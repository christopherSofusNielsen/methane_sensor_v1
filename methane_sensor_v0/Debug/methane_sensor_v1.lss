
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00006bb5  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006d8  00800100  00800100  00006bb5  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00006bb5  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00006c10  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000c18  00000000  00000000  00006c80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012992  00000000  00000000  00007898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003470  00000000  00000000  0001a22a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c5d  00000000  00000000  0001d69a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f5c  00000000  00000000  000242f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001570  00000000  00000000  00026254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000075a2  00000000  00000000  000277c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  0002ed66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00006a44  00006a44  00006b98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0002f768  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  0000671c  0000671c  00006870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  000065a4  000065a4  000066f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  0000672a  0000672a  0000687e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  000065b8  000065b8  0000670c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00006738  00006738  0000688c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  000065cc  000065cc  00006720  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  00006746  00006746  0000689a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  000065e0  000065e0  00006734  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  00006754  00006754  000068a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  000065f4  000065f4  00006748  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  00006998  00006998  00006aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 0000003c  00005882  00005882  000059d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  00006608  00006608  0000675c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  000069a0  000069a0  00006af4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  000069a8  000069a8  00006afc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  000069b0  000069b0  00006b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  00006762  00006762  000068b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  0000692a  0000692a  00006a7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000022  00006118  00006118  0000626c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  00006a08  00006a08  00006b5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  00006a48  00006a48  00006b9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  0000504e  0000504e  000051a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800cf1  00800cf1  00006bb5  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000036  00005b38  00005b38  00005c8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  0000685e  0000685e  000069b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  0000686a  0000686a  000069be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  0000509c  0000509c  000051f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800cf3  00800cf3  00006bb5  2**0
                  ALLOC
 43 .text.clear_callbacks 00000020  00006206  00006206  0000635a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.start_timer 00000008  000069b8  000069b8  00006b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.stop_timer 00000006  00006a0e  00006a0e  00006b62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_init 00000020  00006226  00006226  0000637a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_kill 0000000a  00006934  00006934  00006a88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TC2_HAL_subscribe 00000054  00004eb4  00004eb4  00005008  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TC2_HAL_cancel 0000003a  00005936  00005936  00005a8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_9 0000007c  0000424a  0000424a  0000439e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .bss.cnt      00000001  00800d13  00800d13  00006bb5  2**0
                  ALLOC
 52 .bss.cbCounter 00000001  00800d14  00800d14  00006bb5  2**0
                  ALLOC
 53 .bss.callbacks 0000000a  00800cc0  00800cc0  00006bb5  2**0
                  ALLOC
 54 .text.start_and_write_data 0000004c  000051d4  000051d4  00005328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.read_and_stop 0000005a  00004ca4  00004ca4  00004df8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_write_data 00000014  0000661c  0000661c  00006770  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_write_data_stop 0000001a  00006420  00006420  00006574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00005cae  00005cae  00005e02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_API_repeat_read_data_stop 00000030  00005d76  00005d76  00005eca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_init 00000012  00006680  00006680  000067d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_start 00000048  00005432  00005432  00005586  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_repeated_start 00000042  0000577c  0000577c  000058d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_write_byte 00000020  00006246  00006246  0000639a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_read_byte_ack 00000014  00006630  00006630  00006784  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.TWI_HAL_read_byte_nack 00000014  00006644  00006644  00006798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.TWI_HAL_stop 00000010  000066ec  000066ec  00006840  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.copy_buffer 0000002e  00005f26  00005f26  0000607a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_init 0000003c  000058be  000058be  00005a12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_send_message 0000004e  000050ea  000050ea  0000523e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_send_string 0000007e  000041cc  000041cc  00004320  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_message_ready 0000000e  00006770  00006770  000068c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_clear_rx_buffer 0000000a  0000693e  0000693e  00006a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart0_hal_read_message_as_str 00000028  00006034  00006034  00006188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uart0_hal_send_break 00000046  00005552  00005552  000056a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_22 0000006e  000047da  000047da  0000492e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_20 00000074  00004612  00004612  00004766  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800d15  00800d15  00006bb5  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800d16  00800d16  00006bb5  2**0
                  ALLOC
 79 .bss.tx_buffer_cursor 00000002  00800cf5  00800cf5  00006bb5  2**0
                  ALLOC
 80 .bss.tx_buffer_data_len 00000002  00800cf7  00800cf7  00006bb5  2**0
                  ALLOC
 81 .text.copy_buffer 0000002e  00005f54  00005f54  000060a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.uart1_hal_init 0000003c  000058fa  000058fa  00005a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.uart1_hal_send_string 00000096  00003dce  00003dce  00003f22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.uart1_hal_message_ready 0000000e  0000677e  0000677e  000068d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.uart1_hal_rx_full 0000000e  0000678c  0000678c  000068e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.uart1_hal_clear_rx_buffer 0000000a  00006948  00006948  00006a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.uart1_hal_read_message_as_str 00000028  0000605c  0000605c  000061b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 0000006e  00004848  00004848  0000499c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_28 00000074  00004686  00004686  000047da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .bss.rx_buffer_has_message 00000001  00800d17  00800d17  00006bb5  2**0
                  ALLOC
 91 .bss.rx_buffer_data_len 00000001  00800d18  00800d18  00006bb5  2**0
                  ALLOC
 92 .bss.rx_buffer 0000004b  00800bfb  00800bfb  00006bb5  2**0
                  ALLOC
 93 .bss.tx_buffer_cursor 00000002  00800cf9  00800cf9  00006bb5  2**0
                  ALLOC
 94 .bss.tx_buffer_data_len 00000002  00800cfb  00800cfb  00006bb5  2**0
                  ALLOC
 95 .bss.tx_buffer 0000012c  008007d8  008007d8  00006bb5  2**0
                  ALLOC
 96 .text.UI_HAL_jumper_init 0000000e  0000679a  0000679a  000068ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.UI_HAL_is_config_mode 0000000a  00006952  00006952  00006aa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.main    0000003a  00005970  00005970  00005ac4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.calc_ppm_methane 00000096  00003e64  00003e64  00003fb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vect_ADC_heat_timeout 00000018  000064d6  000064d6  0000662a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.ADC_init_sampling 00000066  00004aca  00004aca  00004c1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.ADC_deinit_sampling 00000014  00006658  00006658  000067ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ADC_is_sampling_done 0000001c  00006378  00006378  000064cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.ADC_get_value 00000056  00004e08  00004e08  00004f5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.vect_ADC_do_sample 00000046  00005598  00005598  000056ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.ADC_start_sampling 0000000a  0000695c  0000695c  00006ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ADC_meth_sens_power_on 0000001e  000062a6  000062a6  000063fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.ADC_meth_sens_power_off 00000008  000069c0  000069c0  00006b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.ADC_meth_sens_ready 00000012  00006692  00006692  000067e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADC_set_conf_parameters 00000042  000057be  000057be  00005912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.cntPowerUpTime 00000001  00800d19  00800d19  00006bb5  2**0
                  ALLOC
112 .bss._powerUpTime 00000001  00800d1a  00800d1a  00006bb5  2**0
                  ALLOC
113 .bss.cntSamples 00000002  00800cfd  00800cfd  00006bb5  2**0
                  ALLOC
114 .bss._data    00000002  00800cff  00800cff  00006bb5  2**0
                  ALLOC
115 .bss._nSamples 00000002  00800d01  00800d01  00006bb5  2**0
                  ALLOC
116 .data.PPM_factor 00000004  00800cd5  00006a51  00006ba5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
117 .data.RRL     00000004  00800cd9  00006a55  00006ba9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
118 .data.Vc      00000004  00800cdd  00006a59  00006bad  2**0
                  CONTENTS, ALLOC, LOAD, DATA
119 .text.EM_has_deveui 00000016  00006536  00006536  0000668a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_has_appeui 00000016  0000654c  0000654c  000066a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_has_appkey 00000016  00006562  00006562  000066b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_set_deveui 0000003a  000059aa  000059aa  00005afe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.EM_get_deveui 00000030  00005da6  00005da6  00005efa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.EM_set_appeui 0000003a  000059e4  000059e4  00005b38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.EM_get_appeui 00000030  00005dd6  00005dd6  00005f2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.EM_set_appkey 0000003a  00005a1e  00005a1e  00005b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.EM_get_appkey 00000030  00005e06  00005e06  00005f5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.EM_set_ppmfactor 0000000e  000067a8  000067a8  000068fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.EM_get_ppmfactor 0000001e  000062c4  000062c4  00006418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.EM_set_RRL 0000000e  000067b6  000067b6  0000690a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.EM_get_RRL 0000001e  000062e2  000062e2  00006436  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.EM_set_Vcc 0000000e  000067c4  000067c4  00006918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.EM_get_Vcc 0000001e  00006300  00006300  00006454  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.EM_set_collections 0000000e  000067d2  000067d2  00006926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.EM_get_collections 00000010  000066fc  000066fc  00006850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.EM_set_heat_up_time 0000000c  00006876  00006876  000069ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.EM_get_heat_up_time 0000000c  00006882  00006882  000069d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.EM_set_air_pump_time 0000000c  0000688e  0000688e  000069e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.EM_get_air_pump_time 0000000c  0000689a  0000689a  000069ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.EM_set_sp_interval 0000000c  000068a6  000068a6  000069fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.EM_get_sp_interval 0000000c  000068b2  000068b2  00006a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.EM_set_group_id 0000000c  000068be  000068be  00006a12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.EM_get_group_id 0000000c  000068ca  000068ca  00006a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.cb_blink 00000006  00006a14  00006a14  00006b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.blink   0000004c  00005220  00005220  00005374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.err_code 00000038  00005a58  00005a58  00005bac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.LED_start_try_join 0000000e  000067e0  000067e0  00006934  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.LED_stop_try_join 00000010  0000670c  0000670c  00006860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.LED_join_success 00000040  00005842  00005842  00005996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.LED_join_denied 00000008  000069c8  000069c8  00006b1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.LED_conf_err 00000008  000069d0  000069d0  00006b24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.LED_fatal_err 00000008  000069d8  000069d8  00006b2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .bss.cbPointer 00000001  00800d1b  00800d1b  00006bb5  2**0
                  ALLOC
154 .progmemx.data 00000058  0000084e  0000084e  000009a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
155 .text.parse_err 00000058  00004d58  00004d58  00004eac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.JN_join_network 000002a4  000016b2  000016b2  00001806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.set_block_uplink 00000018  000064ee  000064ee  00006642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.cb_block_uplink 0000001c  00006394  00006394  000064e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.LM_join_network 00000006  00006a1a  00006a1a  00006b6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.LM_send_uplink 0000002e  00005f82  00005f82  000060d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.LM_put_to_sleep 00000012  000066a4  000066a4  000067f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.LM_wake_up 00000006  00006a20  00006a20  00006b74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.LM_is_free 0000000a  00006966  00006966  00006aba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.LM_reset_module 00000006  00006a26  00006a26  00006b7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.LM_forward_msg 00000006  00006a2c  00006a2c  00006b80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.LM_send_break 00000006  00006a32  00006a32  00006b86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.subPointer 00000001  00800d1c  00800d1c  00006bb5  2**0
                  ALLOC
168 .bss.busy     00000001  00800d1d  00800d1d  00006bb5  2**0
                  ALLOC
169 .bss.cnt      00000001  00800d1e  00800d1e  00006bb5  2**0
                  ALLOC
170 .progmemx.data 00000073  000007db  000007db  0000092f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
171 .text.tohex   0000007a  000042c6  000042c6  0000441a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.attach_ending 0000001c  000063b0  000063b0  00006504  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.cmd_with_ending 00000032  00005ce0  00005ce0  00005e34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.sys_sleep_cmd 0000005e  00004b30  00004b30  00004c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.mac_set_parameter 0000004e  00005138  00005138  0000528c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.mac_set_deveui 00000048  0000547a  0000547a  000055ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.mac_set_appeui 00000048  000054c2  000054c2  00005616  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.mac_set_appkey 00000048  0000550a  0000550a  0000565e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.mac_set_ADR 00000030  00005e36  00005e36  00005f8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.mac_tx_confirmed 000000aa  000039e6  000039e6  00003b3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data 00000038  000008a6  000008a6  000009fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.decode_tx_response 00000068  000049fa  000049fa  00004b4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SU_send_uplink 000000f8  00002f6e  00002f6e  000030c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.cb_counter 00000014  0000666c  0000666c  000067c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.SC_put_to_sleep 00000038  00005a90  00005a90  00005be4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .progmemx.data 00000003  00000903  00000903  00000a57  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
187 .text.SC_wake_up 0000006e  000048b6  000048b6  00004a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .bss.eventPointer 00000001  00800d1f  00800d1f  00006bb5  2**0
                  ALLOC
189 .bss.cnt      00000002  00800d03  00800d03  00006bb5  2**0
                  ALLOC
190 .text.cb_watchdog_counter 0000000c  000068d6  000068d6  00006a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.util_set_pending_states 0000000c  000068e2  000068e2  00006a36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.util_set_match_case 0000000c  000068ee  000068ee  00006a42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.util_str_begins_with 0000004a  000053e8  000053e8  0000553c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.util_match_message 0000005c  00004bec  00004bec  00004d40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .progmemx.data 00000013  000008de  000008de  00000a32  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
196 .text.util_reset_module 00000046  000055de  000055de  00005732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.util_lora_forward_msg 00000078  000043ba  000043ba  0000450e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.util_send_break 00000008  000069e0  000069e0  00006b34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .bss.wd_cb_pointer 00000001  00800d20  00800d20  00006bb5  2**0
                  ALLOC
200 .bss.wd_cnt   00000001  00800d21  00800d21  00006bb5  2**0
                  ALLOC
201 .text.MRPP_init_group 0000001a  0000643a  0000643a  0000658e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.MRPP_add_collection_data_INT16 00000070  000046fa  000046fa  0000484e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.MRPP_is_body_package_ready 00000022  0000613a  0000613a  0000628e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.MRPP_get_ready_body_package 00000096  00003efa  00003efa  0000404e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.MRPP_set_body_sent 0000000c  000068fa  000068fa  00006a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.MRPP_get_header_package 00000022  0000615c  0000615c  000062b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.MRPP_get_tail_package 00000022  0000617e  0000617e  000062d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.MRPP_all_body_package_sent 0000000a  00006970  00006970  00006ac4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .bss.state    000000b3  00800a94  00800a94  00006bb5  2**0
                  ALLOC
210 .text.mrpp_data_add_int16 0000008e  000040b8  000040b8  0000420c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.mrpp_data_get 00000030  00005e66  00005e66  00005fba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.add_data_types 000000aa  00003a90  00003a90  00003be4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.update_bodies 00000162  00002408  00002408  0000255c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.mrpp_state_init 00000174  0000212e  0000212e  00002282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.mrpp_state_get_header 000000aa  00003b3a  00003b3a  00003c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.mrpp_state_get_tail 000000ac  0000393a  0000393a  00003a8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.mrpp_state_set_collection 00000086  00004146  00004146  0000429a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.mrpp_state_is_body_ready 00000030  00005e96  00005e96  00005fea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.mrpp_state_all_bodies_sent 0000002a  0000600a  0000600a  0000615e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.mrpp_state_get_ready_body 000000f0  00003066  00003066  000031ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.mrpp_state_set_body_sent 00000020  00006266  00006266  000063ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.mrpp_state_get_collection_address 00000036  00005b6e  00005b6e  00005cc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.cb_cnt_time 00000030  00005ec6  00005ec6  0000601a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.PUMP_start 00000024  000060ac  000060ac  00006200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.PUMP_is_done 0000001c  000063cc  000063cc  00006520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .bss.eventPointer 00000001  00800d22  00800d22  00006bb5  2**0
                  ALLOC
227 .bss.cnt      00000002  00800d05  00800d05  00006bb5  2**0
                  ALLOC
228 .bss._seconds 00000002  00800d07  00800d07  00006bb5  2**0
                  ALLOC
229 .text.datetime_to_BCD 00000100  00002d70  00002d70  00002ec4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.RTC_set_clock_out 00000050  00004fae  00004fae  00005102  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.RTC_get_current_time 00000140  0000256a  0000256a  000026be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.RTC_set_current_time 00000068  00004a62  00004a62  00004bb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .rodata       00000005  00800cd0  00006a4c  00006ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
234 .text.RTC_set_wake_up_interrupt 000000c2  00003594  00003594  000036e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.RTC_clear_wake_up_interrupt 00000034  00005c46  00005c46  00005d9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.RTC_datetime_to_ts 00000122  00002914  00002914  00002a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .progmemx.data.CMD_READ_TIME_POINTER 00000001  00000908  00000908  00000a5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
238 .text.bytes_2_uint 0000001a  00006454  00006454  000065a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.init_measurement 00000038  00005ac8  00005ac8  00005c1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.validate_data 00000032  00005d12  00005d12  00005e66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.read_value 000000a2  00003d2c  00003d2c  00003e80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.vect_SCD_do_sample 00000046  00005624  00005624  00005778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.SCD30_sensor_on 00000022  000061a0  000061a0  000062f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.SCD30_sensor_off 00000008  000069e8  000069e8  00006b3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.SCD30_init_sampling 00000022  000061c2  000061c2  00006316  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.SCD30_deinit_sampling 0000000e  000067ee  000067ee  00006942  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.SCD30_start_sampling 0000000a  0000697a  0000697a  00006ace  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.SCD30_is_sampling_done 0000001c  000063e8  000063e8  0000653c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.SCD30_get_reading 0000001a  0000646e  0000646e  000065c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .bss.cntSamples 00000002  00800d09  00800d09  00006bb5  2**0
                  ALLOC
251 .bss._data    00000002  00800d0b  00800d0b  00006bb5  2**0
                  ALLOC
252 .bss._nSamples 00000002  00800d0d  00800d0d  00006bb5  2**0
                  ALLOC
253 .progmemx.data.READ_DATA_CMD 00000002  00000906  00000906  00000a5a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
254 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000008f9  000008f9  00000a4d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
255 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000008fe  000008fe  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
256 .text.parse_cmd 00000030  00005ef6  00005ef6  0000604a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .text.validate_cmd 00000056  00004e5e  00004e5e  00004fb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
258 .progmemx.data 000000ac  00000603  00000603  00000757  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
259 .text.CONF_enter 0000013c  000026aa  000026aa  000027fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
260 .progmemx.data 00000081  0000075a  0000075a  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
261 .text.CON_RN2483_parse 0000006c  00004924  00004924  00004a78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 .text.CON_RN2483 00000166  000022a2  000022a2  000023f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 .text.CONNECT 00000054  00004f08  00004f08  0000505c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
264 .progmemx.data 00000188  0000047b  0000047b  000005cf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
265 .text.read_cols 000000bc  00003656  00003656  000037aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .text.read_time 00000092  00004026  00004026  0000417a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
267 .text.write_deveui 00000078  00004432  00004432  00004586  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .text.write_appeui 00000078  000044aa  000044aa  000045fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 .text.write_appkey 00000078  00004522  00004522  00004676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.write_PPM_factor 0000004c  0000526c  0000526c  000053c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.write_RRL 0000004c  000052b8  000052b8  0000540c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .text.write_VCC 0000004c  00005304  00005304  00005458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 .text.get_time_par 00000034  00005c7a  00005c7a  00005dce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .text.write_cols 0000012e  000027e6  000027e6  0000293a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.write_heat_up 0000004c  00005350  00005350  000054a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.write_air_pump 00000050  00004ffe  00004ffe  00005152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.write_sp_interval 0000004c  0000539c  0000539c  000054f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.write_reset 000000e2  00003156  00003156  000032aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.write_time 000000fe  00002e70  00002e70  00002fc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.handle_read 000002a2  00001956  00001956  00001aaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .text.handle_write 00000200  00001bf8  00001bf8  00001d4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
282 .bss.arg      00000050  00800bab  00800bab  00006bb5  2**0
                  ALLOC
283 .progmemx.data 000000ab  000006af  000006af  00000803  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
284 .text.handle_methane 00000186  00001fa8  00001fa8  000020fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.handle_co2 000000a4  00003be4  00003be4  00003d38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.handle_pump 000000a4  00003c88  00003c88  00003ddc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.handle_sensor 000000b8  000037ce  000037ce  00003922  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .text.init_methane_SCD30 00000028  00006084  00006084  000061d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
289 .bss.par      00000014  00800c8a  00800c8a  00006bb5  2**0
                  ALLOC
290 .text.count_parameters 00000052  00004f5c  00004f5c  000050b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .text.par_index 00000070  0000476a  0000476a  000048be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 .text.get_parameter 00000096  00003f90  00003f90  000040e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
293 .text.decode_stage_response 00000016  00006578  00006578  000066cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.decode_join_response 0000001c  00006404  00006404  00006558  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.decode_header_tail_response 0000001e  0000631e  0000631e  00006472  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 .text.read_eeprom 0000005a  00004cfe  00004cfe  00004e52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 .text.join_lora 00000012  000066b6  000066b6  0000680a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 .text.set_wakeup 0000000a  00006984  00006984  00006ad8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
299 .text.send_header 0000001a  00006488  00006488  000065dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 .text.send_body 0000001a  000064a2  000064a2  000065f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
301 .text.send_tail 0000001a  000064bc  000064bc  00006610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 .text.send_msg 00000018  00006506  00006506  0000665a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
303 .progmemx.data 00000217  00000264  00000264  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
304 .text.stage_0 000000dc  00003316  00003316  0000346a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
305 .text.stage_1 00000108  00002c68  00002c68  00002dbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
306 .text.stage_2 00000122  00002a36  00002a36  00002b8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
307 .text.stage_3 00000110  00002b58  00002b58  00002cac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
308 .text.decode_body_response 0000005c  00004c48  00004c48  00004d9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
309 .text.MAINPG_start 00000388  0000104e  0000104e  000011a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
310 .bss.fromSleep 00000001  00800d23  00800d23  00006bb5  2**0
                  ALLOC
311 .bss.samplingProcessInterval 00000001  00800d24  00800d24  00006bb5  2**0
                  ALLOC
312 .data.methHeatUpTime 00000001  00800d25  00000909  00000a5d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
313 .data.airPumpTime 00000002  00800d0f  00006a5d  00006bb1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
314 .bss.ppmx     00000004  00800ce1  00800ce1  00006bb5  2**0
                  ALLOC
315 .bss.rrlx     00000004  00800ce5  00800ce5  00006bb5  2**0
                  ALLOC
316 .bss.vccx     00000004  00800ce9  00800ce9  00006bb5  2**0
                  ALLOC
317 .bss.cols     00000023  00800c46  00800c46  00006bb5  2**0
                  ALLOC
318 .bss.appkey   00000021  00800c69  00800c69  00006bb5  2**0
                  ALLOC
319 .bss.appeui   00000011  00800c9e  00800c9e  00006bb5  2**0
                  ALLOC
320 .bss.deveui   00000011  00800caf  00800caf  00006bb5  2**0
                  ALLOC
321 .bss.package_length 00000001  00800d26  00800d26  00006bb5  2**0
                  ALLOC
322 .bss.package  00000064  00800b47  00800b47  00006bb5  2**0
                  ALLOC
323 .bss.dt       00000006  00800cca  00800cca  00006bb5  2**0
                  ALLOC
324 .bss.ts       00000004  00800ced  00800ced  00006bb5  2**0
                  ALLOC
325 .bss.meth_data 000000c8  00800904  00800904  00006bb5  2**0
                  ALLOC
326 .bss.co2_data 000000c8  008009cc  008009cc  00006bb5  2**0
                  ALLOC
327 .data.bodyIndex 00000002  00800d11  00006a5f  00006bb3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
328 .bss.state_s3 00000001  00800d27  00800d27  00006bb5  2**0
                  ALLOC
329 .bss.state_s2 00000001  00800d28  00800d28  00006bb5  2**0
                  ALLOC
330 .bss.state_s1 00000001  00800d29  00800d29  00006bb5  2**0
                  ALLOC
331 .bss.state_s0 00000001  00800d2a  00800d2a  00006bb5  2**0
                  ALLOC
332 .text.calc_crc8 00000036  00005ba4  00005ba4  00005cf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
333 .text.get_decimal 000000b4  00003886  00003886  000039da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
334 .text.str2flaot 0000004e  00005186  00005186  000052da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
335 .text.is_float 00000058  00004db0  00004db0  00004f04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
336 .text.avrlibc.fplib 0000000e  000067fc  000067fc  00006950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
337 .text.avrlibc.fplib 000000ce  000034c6  000034c6  0000361a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
338 .text.avrlibc.fplib 00000008  000069f0  000069f0  00006b44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
339 .text.avrlibc.fplib 000000de  00003238  00003238  0000338c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
340 .text.avrlibc.fplib 0000005e  00004b8e  00004b8e  00004ce2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
341 .text.avrlibc.fplib 0000007a  00004340  00004340  00004494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
342 .text.avrlibc.fplib 0000000c  00006906  00006906  00006a5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
343 .text.avrlibc.fplib 00000006  00006a38  00006a38  00006b8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text.avrlibc.fplib 0000000e  0000680a  0000680a  0000695e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 .text.avrlibc.fplib 0000000e  00006818  00006818  0000696c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 .text.avrlibc.fplib 00000022  000061e4  000061e4  00006338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 .text.avrlibc.fplib 00000044  000056b0  000056b0  00005804  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .text.avrlibc.fplib 0000000e  00006826  00006826  0000697a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
349 .text.avrlibc.fplib 00000008  000069f8  000069f8  00006b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
350 .text.avrlibc.fplib 000000d4  000033f2  000033f2  00003546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 .progmemx.data 00000008  000008f1  000008f1  00000a45  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
352 .text.avrlibc 00000744  0000090a  0000090a  00000a5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
353 .text.libgcc  0000000c  00006912  00006912  00006a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
354 .text.libgcc.mul 0000001e  0000633c  0000633c  00006490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
355 .text.libgcc.prologue 00000038  00005b00  00005b00  00005c54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
356 .text.libgcc.prologue 00000036  00005bda  00005bda  00005d2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 .text.avrlibc 00000008  00006a00  00006a00  00006b54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
358 .text.avrlibc 0000000e  00006834  00006834  00006988  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 .text.avrlibc 000002dc  000013d6  000013d6  0000152a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
360 .text.avrlibc 000001b0  00001df8  00001df8  00001f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
361 .text.avrlibc 00000012  000066c8  000066c8  0000681c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 .text.avrlibc 00000032  00005d44  00005d44  00005e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
363 .text.avrlibc 0000002e  00005fb0  00005fb0  00006104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
364 .text.avrlibc 00000042  00005800  00005800  00005954  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
365 .text.avrlibc 0000006a  00004990  00004990  00004ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
366 .text.avrlibc 0000002c  00005fde  00005fde  00006132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
367 .text.avrlibc 0000001e  0000635a  0000635a  000064ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
368 .text.avrlibc 00000036  00005c10  00005c10  00005d64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
369 .text.avrlibc 00000078  0000459a  0000459a  000046ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 .text.avrlibc 00000046  0000566a  0000566a  000057be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
371 .text.avrlibc 000000bc  00003712  00003712  00003866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
372 .text.avrlibc 00000006  00006a3e  00006a3e  00006b92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
373 .text.avrlibc 00000024  000060d0  000060d0  00006224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
374 .text.avrlibc 00000012  000066da  000066da  0000682e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
375 .text.avrlibc 0000000e  00006842  00006842  00006996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
376 .text.avrlibc 0000000e  00006850  00006850  000069a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
377 .text.avrlibc 00000044  000056f4  000056f4  00005848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
378 .text.avrlibc 00000024  000060f4  000060f4  00006248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
379 .text.avrlibc 00000018  0000651e  0000651e  00006672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
380 .text.avrlibc 0000000c  0000691e  0000691e  00006a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
381 .text.libgcc.mul 00000020  00006286  00006286  000063da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
382 .text.libgcc.div 00000044  00005738  00005738  0000588c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
383 .text.libgcc.mul 00000016  0000658e  0000658e  000066e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
384 .text.libgcc  0000000a  0000698e  0000698e  00006ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 08 01 	jmp	0x210	; 0x210 <__ctors_end>
   4:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
   8:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
   c:	0c 94 04 33 	jmp	0x6608	; 0x6608 <__vector_3>
  10:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  14:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  18:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  1c:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  20:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  24:	0c 94 25 21 	jmp	0x424a	; 0x424a <__vector_9>
  28:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  2c:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  30:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  34:	0c 94 4e 28 	jmp	0x509c	; 0x509c <__vector_13>
  38:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  3c:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  40:	0c 94 27 28 	jmp	0x504e	; 0x504e <__vector_16>
  44:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  48:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  4c:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  50:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__vector_20>
  54:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  58:	0c 94 ed 23 	jmp	0x47da	; 0x47da <__vector_22>
  5c:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  60:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  64:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  68:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  6c:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  70:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__vector_28>
  74:	0c 94 22 35 	jmp	0x6a44	; 0x6a44 <__bad_interrupt>
  78:	0c 94 24 24 	jmp	0x4848	; 0x4848 <__vector_30>
  7c:	77 0b       	sbc	r23, r23
  7e:	87 0c       	add	r8, r7
  80:	96 0b       	sbc	r25, r22
  82:	b4 0b       	sbc	r27, r20
  84:	d4 0b       	sbc	r29, r20
  86:	f4 0b       	sbc	r31, r20
  88:	14 0c       	add	r1, r4
  8a:	34 0c       	add	r3, r4
  8c:	52 0c       	add	r5, r2
  8e:	70 0c       	add	r7, r0
  90:	82 0c       	add	r8, r2
  92:	98 0c       	add	r9, r8
  94:	9a 0c       	add	r9, r10
  96:	70 13       	cpse	r23, r16
  98:	87 13       	cpse	r24, r23
  9a:	e3 13       	cpse	r30, r19
  9c:	90 13       	cpse	r25, r16
  9e:	ec 13       	cpse	r30, r28
  a0:	d5 13       	cpse	r29, r21
  a2:	dc 13       	cpse	r29, r28
  a4:	a0 13       	cpse	r26, r16
  a6:	ac 13       	cpse	r26, r28
  a8:	b8 13       	cpse	r27, r24
  aa:	c2 13       	cpse	r28, r18
  ac:	ce 13       	cpse	r28, r30
  ae:	63 11       	cpse	r22, r3
  b0:	70 11       	cpse	r23, r0
  b2:	7a 11       	cpse	r23, r10
  b4:	80 11       	cpse	r24, r0
  b6:	af 11       	cpse	r26, r15
  b8:	da 11       	cpse	r29, r10
  ba:	f3 11       	cpse	r31, r3
  bc:	52 08       	sbc	r5, r2
  be:	81 08       	sbc	r8, r1
  c0:	9c 08       	sbc	r9, r12
  c2:	ad 08       	sbc	r10, r13
  c4:	c1 08       	sbc	r12, r1
  c6:	c6 09       	sbc	r28, r6
  c8:	b6 08       	sbc	r11, r6
  ca:	fa 08       	sbc	r15, r10
  cc:	11 09       	sbc	r17, r1
  ce:	06 09       	sbc	r16, r6
  d0:	d5 08       	sbc	r13, r5
  d2:	1c 09       	sbc	r17, r12
  d4:	2d 09       	sbc	r18, r13
  d6:	3f 09       	sbc	r19, r15
  d8:	47 09       	sbc	r20, r7
  da:	4f 09       	sbc	r20, r15
  dc:	57 09       	sbc	r21, r7
  de:	5f 09       	sbc	r21, r15
  e0:	80 09       	sbc	r24, r0
  e2:	87 09       	sbc	r24, r7
  e4:	99 09       	sbc	r25, r9
  e6:	b8 09       	sbc	r27, r8
  e8:	d4 09       	sbc	r29, r4
  ea:	df 09       	sbc	r29, r15

000000ec <.dinit>:
  ec:	01 00       	.word	0x0001	; ????
  ee:	0c d0       	rcall	.+24     	; 0x108 <.dinit+0x1c>
  f0:	80 0c       	add	r8, r0
  f2:	d0 0c       	add	r13, r0
  f4:	e1 00       	.word	0x00e1	; ????
  f6:	6a 4c       	sbci	r22, 0xCA	; 202
  f8:	0c e1       	ldi	r16, 0x1C	; 28
  fa:	0d 0f       	add	r16, r29
  fc:	80 0d       	add	r24, r0
  fe:	0f 0d       	add	r16, r15
 100:	13 00       	.word	0x0013	; ????
 102:	6a 5d       	subi	r22, 0xDA	; 218
 104:	0d 13       	cpse	r16, r29
 106:	0d 25       	eor	r16, r13
 108:	80 0d       	add	r24, r0
 10a:	25 0d       	add	r18, r5
 10c:	26 00       	.word	0x0026	; ????
 10e:	09 09       	sbc	r16, r9
 110:	0d 26       	eor	r0, r29
 112:	0d 2b       	or	r16, r29
 114:	80 00       	.word	0x0080	; ????

00000116 <__trampolines_end>:
 116:	00 40       	sbci	r16, 0x00	; 0
 118:	7a 10       	cpse	r7, r10
 11a:	f3 5a       	subi	r31, 0xA3	; 163
 11c:	00 a0       	ldd	r0, Z+32	; 0x20
 11e:	72 4e       	sbci	r23, 0xE2	; 226
 120:	18 09       	sbc	r17, r8
 122:	00 10       	cpse	r0, r0
 124:	a5 d4       	rcall	.+2378   	; 0xa70 <vfprintf+0x166>
 126:	e8 00       	.word	0x00e8	; ????
 128:	00 e8       	ldi	r16, 0x80	; 128
 12a:	76 48       	sbci	r23, 0x86	; 134
 12c:	17 00       	.word	0x0017	; ????
 12e:	00 e4       	ldi	r16, 0x40	; 64
 130:	0b 54       	subi	r16, 0x4B	; 75
 132:	02 00       	.word	0x0002	; ????
 134:	00 ca       	rjmp	.-3072   	; 0xfffff536 <__eeprom_end+0xff7ef536>
 136:	9a 3b       	cpi	r25, 0xBA	; 186
 138:	00 00       	nop
 13a:	00 e1       	ldi	r16, 0x10	; 16
 13c:	f5 05       	cpc	r31, r5
 13e:	00 00       	nop
 140:	80 96       	adiw	r24, 0x20	; 32
 142:	98 00       	.word	0x0098	; ????
 144:	00 00       	nop
 146:	40 42       	sbci	r20, 0x20	; 32
 148:	0f 00       	.word	0x000f	; ????
 14a:	00 00       	nop
 14c:	a0 86       	std	Z+8, r10	; 0x08
 14e:	01 00       	.word	0x0001	; ????
 150:	00 00       	nop
 152:	10 27       	eor	r17, r16
 154:	00 00       	nop
 156:	00 00       	nop
 158:	e8 03       	fmulsu	r22, r16
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	64 00       	.word	0x0064	; ????
 160:	00 00       	nop
 162:	00 00       	nop
 164:	0a 00       	.word	0x000a	; ????
 166:	00 00       	nop
 168:	00 00       	nop
 16a:	01 00       	.word	0x0001	; ????
 16c:	00 00       	nop
 16e:	00 00       	nop
 170:	2c 76       	andi	r18, 0x6C	; 108
 172:	d8 88       	ldd	r13, Y+16	; 0x10
 174:	dc 67       	ori	r29, 0x7C	; 124
 176:	4f 08       	sbc	r4, r15
 178:	23 df       	rcall	.-442    	; 0xffffffc0 <__eeprom_end+0xff7effc0>
 17a:	c1 df       	rcall	.-126    	; 0xfe <.dinit+0x12>
 17c:	ae 59       	subi	r26, 0x9E	; 158
 17e:	e1 b1       	in	r30, 0x01	; 1
 180:	b7 96       	adiw	r30, 0x27	; 39
 182:	e5 e3       	ldi	r30, 0x35	; 53
 184:	e4 53       	subi	r30, 0x34	; 52
 186:	c6 3a       	cpi	r28, 0xA6	; 166
 188:	e6 51       	subi	r30, 0x16	; 22
 18a:	99 76       	andi	r25, 0x69	; 105
 18c:	96 e8       	ldi	r25, 0x86	; 134
 18e:	e6 c2       	rjmp	.+1484   	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 190:	84 26       	eor	r8, r20
 192:	eb 89       	ldd	r30, Y+19	; 0x13
 194:	8c 9b       	sbis	0x11, 4	; 17
 196:	62 ed       	ldi	r22, 0xD2	; 210
 198:	40 7c       	andi	r20, 0xC0	; 192
 19a:	6f fc       	.word	0xfc6f	; ????
 19c:	ef bc       	out	0x2f, r14	; 47
 19e:	9c 9f       	mul	r25, r28
 1a0:	40 f2       	brcs	.-112    	; 0x132 <__trampolines_end+0x1c>
 1a2:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a4:	6f a5       	ldd	r22, Y+47	; 0x2f
 1a6:	f4 90       	lpm	r15, Z
 1a8:	05 5a       	subi	r16, 0xA5	; 165
 1aa:	2a f7       	brpl	.-54     	; 0x176 <__trampolines_end+0x60>
 1ac:	5c 93       	st	X, r21
 1ae:	6b 6c       	ori	r22, 0xCB	; 203
 1b0:	f9 67       	ori	r31, 0x79	; 121
 1b2:	6d c1       	rjmp	.+730    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 1b4:	1b fc       	.word	0xfc1b	; ????
 1b6:	e0 e4       	ldi	r30, 0x40	; 64
 1b8:	0d 47       	sbci	r16, 0x7D	; 125
 1ba:	fe f5       	brtc	.+126    	; 0x23a <__do_copy_data+0x1e>
 1bc:	20 e6       	ldi	r18, 0x60	; 96
 1be:	b5 00       	.word	0x00b5	; ????
 1c0:	d0 ed       	ldi	r29, 0xD0	; 208
 1c2:	90 2e       	mov	r9, r16
 1c4:	03 00       	.word	0x0003	; ????
 1c6:	94 35       	cpi	r25, 0x54	; 84
 1c8:	77 05       	cpc	r23, r7
 1ca:	00 80       	ld	r0, Z
 1cc:	84 1e       	adc	r8, r20
 1ce:	08 00       	.word	0x0008	; ????
 1d0:	00 20       	and	r0, r0
 1d2:	4e 0a       	sbc	r4, r30
 1d4:	00 00       	nop
 1d6:	00 c8       	rjmp	.-4096   	; 0xfffff1d8 <__eeprom_end+0xff7ef1d8>
 1d8:	0c 33       	cpi	r16, 0x3C	; 60
 1da:	33 33       	cpi	r19, 0x33	; 51
 1dc:	33 0f       	add	r19, r19
 1de:	98 6e       	ori	r25, 0xE8	; 232
 1e0:	12 83       	std	Z+2, r17	; 0x02
 1e2:	11 41       	sbci	r17, 0x11	; 17
 1e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1e6:	21 14       	cp	r2, r1
 1e8:	89 3b       	cpi	r24, 0xB9	; 185
 1ea:	e6 55       	subi	r30, 0x56	; 86
 1ec:	16 cf       	rjmp	.-468    	; 0x1a <__FUSE_REGION_LENGTH__+0x17>
 1ee:	fe e6       	ldi	r31, 0x6E	; 110
 1f0:	db 18       	sub	r13, r11
 1f2:	d1 84       	ldd	r13, Z+9	; 0x09
 1f4:	4b 38       	cpi	r20, 0x8B	; 139
 1f6:	1b f7       	brvc	.-58     	; 0x1be <__trampolines_end+0xa8>
 1f8:	7c 1d       	adc	r23, r12
 1fa:	90 1d       	adc	r25, r0
 1fc:	a4 bb       	out	0x14, r26	; 20
 1fe:	e4 24       	eor	r14, r4
 200:	20 32       	cpi	r18, 0x20	; 32
 202:	84 72       	andi	r24, 0x24	; 36
 204:	5e 22       	and	r5, r30
 206:	81 00       	.word	0x0081	; ????
 208:	c9 f1       	breq	.+114    	; 0x27c <_etext+0x18>
 20a:	24 ec       	ldi	r18, 0xC4	; 196
 20c:	a1 e5       	ldi	r26, 0x51	; 81
 20e:	3d 27       	eor	r19, r29

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d0 e1       	ldi	r29, 0x10	; 16
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61

0000021c <__do_copy_data>:
 21c:	ec ee       	ldi	r30, 0xEC	; 236
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	17 c0       	rjmp	.+46     	; 0x252 <__do_clear_bss+0x8>
 224:	b5 91       	lpm	r27, Z+
 226:	a5 91       	lpm	r26, Z+
 228:	35 91       	lpm	r19, Z+
 22a:	25 91       	lpm	r18, Z+
 22c:	05 91       	lpm	r16, Z+
 22e:	07 fd       	sbrc	r16, 7
 230:	0c c0       	rjmp	.+24     	; 0x24a <__do_clear_bss>
 232:	95 91       	lpm	r25, Z+
 234:	85 91       	lpm	r24, Z+
 236:	ef 01       	movw	r28, r30
 238:	f9 2f       	mov	r31, r25
 23a:	e8 2f       	mov	r30, r24
 23c:	05 90       	lpm	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	a2 17       	cp	r26, r18
 242:	b3 07       	cpc	r27, r19
 244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x20>
 246:	fe 01       	movw	r30, r28
 248:	04 c0       	rjmp	.+8      	; 0x252 <__do_clear_bss+0x8>

0000024a <__do_clear_bss>:
 24a:	1d 92       	st	X+, r1
 24c:	a2 17       	cp	r26, r18
 24e:	b3 07       	cpc	r27, r19
 250:	e1 f7       	brne	.-8      	; 0x24a <__do_clear_bss>
 252:	e5 31       	cpi	r30, 0x15	; 21
 254:	f4 07       	cpc	r31, r20
 256:	31 f7       	brne	.-52     	; 0x224 <__do_copy_data+0x8>
 258:	0e 94 b8 2c 	call	0x5970	; 0x5970 <main>
 25c:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>

Disassembly of section .text:

00006a44 <__bad_interrupt>:
    6a44:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

0000671c <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    671c:	81 b1       	in	r24, 0x01	; 1
    671e:	88 60       	ori	r24, 0x08	; 8
    6720:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    6722:	82 b1       	in	r24, 0x02	; 2
    6724:	87 7f       	andi	r24, 0xF7	; 247
    6726:	82 b9       	out	0x02, r24	; 2
    6728:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

000065a4 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    65a4:	88 23       	and	r24, r24
    65a6:	21 f0       	breq	.+8      	; 0x65b0 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    65a8:	82 b1       	in	r24, 0x02	; 2
    65aa:	88 60       	ori	r24, 0x08	; 8
    65ac:	82 b9       	out	0x02, r24	; 2
    65ae:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    65b0:	82 b1       	in	r24, 0x02	; 2
    65b2:	87 7f       	andi	r24, 0xF7	; 247
    65b4:	82 b9       	out	0x02, r24	; 2
    65b6:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

0000672a <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    672a:	81 b1       	in	r24, 0x01	; 1
    672c:	80 62       	ori	r24, 0x20	; 32
    672e:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    6730:	82 b1       	in	r24, 0x02	; 2
    6732:	8f 7d       	andi	r24, 0xDF	; 223
    6734:	82 b9       	out	0x02, r24	; 2
    6736:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

000065b8 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    65b8:	88 23       	and	r24, r24
    65ba:	21 f0       	breq	.+8      	; 0x65c4 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    65bc:	82 b1       	in	r24, 0x02	; 2
    65be:	80 62       	ori	r24, 0x20	; 32
    65c0:	82 b9       	out	0x02, r24	; 2
    65c2:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    65c4:	82 b1       	in	r24, 0x02	; 2
    65c6:	8f 7d       	andi	r24, 0xDF	; 223
    65c8:	82 b9       	out	0x02, r24	; 2
    65ca:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00006738 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    6738:	81 b1       	in	r24, 0x01	; 1
    673a:	80 61       	ori	r24, 0x10	; 16
    673c:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    673e:	82 b1       	in	r24, 0x02	; 2
    6740:	8f 7e       	andi	r24, 0xEF	; 239
    6742:	82 b9       	out	0x02, r24	; 2
    6744:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

000065cc <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    65cc:	88 23       	and	r24, r24
    65ce:	21 f0       	breq	.+8      	; 0x65d8 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    65d0:	82 b1       	in	r24, 0x02	; 2
    65d2:	80 61       	ori	r24, 0x10	; 16
    65d4:	82 b9       	out	0x02, r24	; 2
    65d6:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    65d8:	82 b1       	in	r24, 0x02	; 2
    65da:	8f 7e       	andi	r24, 0xEF	; 239
    65dc:	82 b9       	out	0x02, r24	; 2
    65de:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00006746 <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    6746:	8a b1       	in	r24, 0x0a	; 10
    6748:	80 61       	ori	r24, 0x10	; 16
    674a:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    674c:	8b b1       	in	r24, 0x0b	; 11
    674e:	8f 7e       	andi	r24, 0xEF	; 239
    6750:	8b b9       	out	0x0b, r24	; 11
    6752:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

000065e0 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    65e0:	88 23       	and	r24, r24
    65e2:	21 f0       	breq	.+8      	; 0x65ec <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    65e4:	8b b1       	in	r24, 0x0b	; 11
    65e6:	80 61       	ori	r24, 0x10	; 16
    65e8:	8b b9       	out	0x0b, r24	; 11
    65ea:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    65ec:	8b b1       	in	r24, 0x0b	; 11
    65ee:	8f 7e       	andi	r24, 0xEF	; 239
    65f0:	8b b9       	out	0x0b, r24	; 11
    65f2:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

00006754 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    6754:	81 b1       	in	r24, 0x01	; 1
    6756:	80 68       	ori	r24, 0x80	; 128
    6758:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    675a:	82 b1       	in	r24, 0x02	; 2
    675c:	8f 77       	andi	r24, 0x7F	; 127
    675e:	82 b9       	out	0x02, r24	; 2
    6760:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

000065f4 <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    65f4:	88 23       	and	r24, r24
    65f6:	21 f0       	breq	.+8      	; 0x6600 <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    65f8:	82 b1       	in	r24, 0x02	; 2
    65fa:	80 68       	ori	r24, 0x80	; 128
    65fc:	82 b9       	out	0x02, r24	; 2
    65fe:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    6600:	82 b1       	in	r24, 0x02	; 2
    6602:	8f 77       	andi	r24, 0x7F	; 127
    6604:	82 b9       	out	0x02, r24	; 2
    6606:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00006998 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    6998:	82 b1       	in	r24, 0x02	; 2
    699a:	80 58       	subi	r24, 0x80	; 128
    699c:	82 b9       	out	0x02, r24	; 2
    699e:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00005882 <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    5882:	84 b1       	in	r24, 0x04	; 4
    5884:	8b 7f       	andi	r24, 0xFB	; 251
    5886:	84 b9       	out	0x04, r24	; 4
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    5888:	e9 e6       	ldi	r30, 0x69	; 105
    588a:	f0 e0       	ldi	r31, 0x00	; 0
    588c:	80 81       	ld	r24, Z
    588e:	8f 7e       	andi	r24, 0xEF	; 239
    5890:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    5892:	80 81       	ld	r24, Z
    5894:	80 62       	ori	r24, 0x20	; 32
    5896:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    5898:	8d b3       	in	r24, 0x1d	; 29
    589a:	84 60       	ori	r24, 0x04	; 4
    589c:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    589e:	83 b7       	in	r24, 0x33	; 51
    58a0:	81 7f       	andi	r24, 0xF1	; 241
    58a2:	84 60       	ori	r24, 0x04	; 4
    58a4:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    58a6:	83 b7       	in	r24, 0x33	; 51
    58a8:	81 60       	ori	r24, 0x01	; 1
    58aa:	83 bf       	out	0x33, r24	; 51
	sei();
    58ac:	78 94       	sei
	sleep_cpu();
    58ae:	88 95       	sleep
	sleep_disable();
    58b0:	83 b7       	in	r24, 0x33	; 51
    58b2:	8e 7f       	andi	r24, 0xFE	; 254
    58b4:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    58b6:	8d b3       	in	r24, 0x1d	; 29
    58b8:	8b 7f       	andi	r24, 0xFB	; 251
    58ba:	8d bb       	out	0x1d, r24	; 29
    58bc:	08 95       	ret

Disassembly of section .text.__vector_3:

00006608 <__vector_3>:
}

ISR(INT2_vect){
    6608:	1f 92       	push	r1
    660a:	0f 92       	push	r0
    660c:	0f b6       	in	r0, 0x3f	; 63
    660e:	0f 92       	push	r0
    6610:	11 24       	eor	r1, r1
	
}
    6612:	0f 90       	pop	r0
    6614:	0f be       	out	0x3f, r0	; 63
    6616:	0f 90       	pop	r0
    6618:	1f 90       	pop	r1
    661a:	18 95       	reti

Disassembly of section .text.rn2483_init:

000069a0 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    69a0:	84 b1       	in	r24, 0x04	; 4
    69a2:	80 61       	ori	r24, 0x10	; 16
    69a4:	84 b9       	out	0x04, r24	; 4
    69a6:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

000069a8 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    69a8:	85 b1       	in	r24, 0x05	; 5
    69aa:	8f 7e       	andi	r24, 0xEF	; 239
    69ac:	85 b9       	out	0x05, r24	; 5
    69ae:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

000069b0 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    69b0:	85 b1       	in	r24, 0x05	; 5
    69b2:	80 61       	ori	r24, 0x10	; 16
    69b4:	85 b9       	out	0x05, r24	; 5
    69b6:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00006762 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    6762:	87 b1       	in	r24, 0x07	; 7
    6764:	8f 7b       	andi	r24, 0xBF	; 191
    6766:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    6768:	88 b1       	in	r24, 0x08	; 8
    676a:	8f 7b       	andi	r24, 0xBF	; 191
    676c:	88 b9       	out	0x08, r24	; 8
    676e:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

0000692a <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    692a:	86 b1       	in	r24, 0x06	; 6
    692c:	86 fb       	bst	r24, 6
    692e:	88 27       	eor	r24, r24
    6930:	80 f9       	bld	r24, 0
    6932:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00006118 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    6118:	92 e0       	ldi	r25, 0x02	; 2
    611a:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    611c:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match-1; //Set match value
    611e:	81 50       	subi	r24, 0x01	; 1
    6120:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    6122:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    6124:	ee e6       	ldi	r30, 0x6E	; 110
    6126:	f0 e0       	ldi	r31, 0x00	; 0
    6128:	80 81       	ld	r24, Z
    612a:	82 60       	ori	r24, 0x02	; 2
    612c:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    612e:	78 94       	sei
	
	//Set callback
	_cb=cb;
    6130:	70 93 f2 0c 	sts	0x0CF2, r23	; 0x800cf2 <_cb+0x1>
    6134:	60 93 f1 0c 	sts	0x0CF1, r22	; 0x800cf1 <_cb>
    6138:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00006a08 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    6a08:	86 e0       	ldi	r24, 0x06	; 6
    6a0a:	85 bd       	out	0x25, r24	; 37
    6a0c:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

00006a48 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    6a48:	15 bc       	out	0x25, r1	; 37
    6a4a:	08 95       	ret

Disassembly of section .text.__vector_16:

0000504e <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    504e:	1f 92       	push	r1
    5050:	0f 92       	push	r0
    5052:	0f b6       	in	r0, 0x3f	; 63
    5054:	0f 92       	push	r0
    5056:	11 24       	eor	r1, r1
    5058:	2f 93       	push	r18
    505a:	3f 93       	push	r19
    505c:	4f 93       	push	r20
    505e:	5f 93       	push	r21
    5060:	6f 93       	push	r22
    5062:	7f 93       	push	r23
    5064:	8f 93       	push	r24
    5066:	9f 93       	push	r25
    5068:	af 93       	push	r26
    506a:	bf 93       	push	r27
    506c:	ef 93       	push	r30
    506e:	ff 93       	push	r31
	_cb();
    5070:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <_cb>
    5074:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <_cb+0x1>
    5078:	09 95       	icall
}
    507a:	ff 91       	pop	r31
    507c:	ef 91       	pop	r30
    507e:	bf 91       	pop	r27
    5080:	af 91       	pop	r26
    5082:	9f 91       	pop	r25
    5084:	8f 91       	pop	r24
    5086:	7f 91       	pop	r23
    5088:	6f 91       	pop	r22
    508a:	5f 91       	pop	r21
    508c:	4f 91       	pop	r20
    508e:	3f 91       	pop	r19
    5090:	2f 91       	pop	r18
    5092:	0f 90       	pop	r0
    5094:	0f be       	out	0x3f, r0	; 63
    5096:	0f 90       	pop	r0
    5098:	1f 90       	pop	r1
    509a:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00005b38 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    5b38:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    5b3c:	28 e0       	ldi	r18, 0x08	; 8
    5b3e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    5b42:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match-1; //Set compare value
    5b46:	01 97       	sbiw	r24, 0x01	; 1
    5b48:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    5b4c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    5b50:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    5b54:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    5b58:	ef e6       	ldi	r30, 0x6F	; 111
    5b5a:	f0 e0       	ldi	r31, 0x00	; 0
    5b5c:	80 81       	ld	r24, Z
    5b5e:	82 60       	ori	r24, 0x02	; 2
    5b60:	80 83       	st	Z, r24
	sei();
    5b62:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    5b64:	70 93 f4 0c 	sts	0x0CF4, r23	; 0x800cf4 <_cb+0x1>
    5b68:	60 93 f3 0c 	sts	0x0CF3, r22	; 0x800cf3 <_cb>
    5b6c:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

0000685e <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    685e:	e1 e8       	ldi	r30, 0x81	; 129
    6860:	f0 e0       	ldi	r31, 0x00	; 0
    6862:	80 81       	ld	r24, Z
    6864:	86 60       	ori	r24, 0x06	; 6
    6866:	80 83       	st	Z, r24
    6868:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

0000686a <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    686a:	e1 e8       	ldi	r30, 0x81	; 129
    686c:	f0 e0       	ldi	r31, 0x00	; 0
    686e:	80 81       	ld	r24, Z
    6870:	88 7f       	andi	r24, 0xF8	; 248
    6872:	80 83       	st	Z, r24
    6874:	08 95       	ret

Disassembly of section .text.__vector_13:

0000509c <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    509c:	1f 92       	push	r1
    509e:	0f 92       	push	r0
    50a0:	0f b6       	in	r0, 0x3f	; 63
    50a2:	0f 92       	push	r0
    50a4:	11 24       	eor	r1, r1
    50a6:	2f 93       	push	r18
    50a8:	3f 93       	push	r19
    50aa:	4f 93       	push	r20
    50ac:	5f 93       	push	r21
    50ae:	6f 93       	push	r22
    50b0:	7f 93       	push	r23
    50b2:	8f 93       	push	r24
    50b4:	9f 93       	push	r25
    50b6:	af 93       	push	r26
    50b8:	bf 93       	push	r27
    50ba:	ef 93       	push	r30
    50bc:	ff 93       	push	r31
	_cb();
    50be:	e0 91 f3 0c 	lds	r30, 0x0CF3	; 0x800cf3 <_cb>
    50c2:	f0 91 f4 0c 	lds	r31, 0x0CF4	; 0x800cf4 <_cb+0x1>
    50c6:	09 95       	icall
    50c8:	ff 91       	pop	r31
    50ca:	ef 91       	pop	r30
    50cc:	bf 91       	pop	r27
    50ce:	af 91       	pop	r26
    50d0:	9f 91       	pop	r25
    50d2:	8f 91       	pop	r24
    50d4:	7f 91       	pop	r23
    50d6:	6f 91       	pop	r22
    50d8:	5f 91       	pop	r21
    50da:	4f 91       	pop	r20
    50dc:	3f 91       	pop	r19
    50de:	2f 91       	pop	r18
    50e0:	0f 90       	pop	r0
    50e2:	0f be       	out	0x3f, r0	; 63
    50e4:	0f 90       	pop	r0
    50e6:	1f 90       	pop	r1
    50e8:	18 95       	reti

Disassembly of section .text.clear_callbacks:

00006206 <clear_callbacks>:
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    6206:	80 e0       	ldi	r24, 0x00	; 0
    6208:	09 c0       	rjmp	.+18     	; 0x621c <clear_callbacks+0x16>
	{
		callbacks[i]=NULL;
    620a:	e8 2f       	mov	r30, r24
    620c:	f0 e0       	ldi	r31, 0x00	; 0
    620e:	ee 0f       	add	r30, r30
    6210:	ff 1f       	adc	r31, r31
    6212:	e0 54       	subi	r30, 0x40	; 64
    6214:	f3 4f       	sbci	r31, 0xF3	; 243
    6216:	11 82       	std	Z+1, r1	; 0x01
    6218:	10 82       	st	Z, r1
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    621a:	8f 5f       	subi	r24, 0xFF	; 255
    621c:	85 30       	cpi	r24, 0x05	; 5
    621e:	a8 f3       	brcs	.-22     	; 0x620a <clear_callbacks+0x4>
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    6220:	10 92 14 0d 	sts	0x0D14, r1	; 0x800d14 <cbCounter>
    6224:	08 95       	ret

Disassembly of section .text.start_timer:

000069b8 <start_timer>:
}

static void start_timer(){
	TCCR2B=0x07;
    69b8:	87 e0       	ldi	r24, 0x07	; 7
    69ba:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    69be:	08 95       	ret

Disassembly of section .text.stop_timer:

00006a0e <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    6a0e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    6a12:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00006226 <TC2_HAL_init>:
static callback_ptr callbacks[MAX_CALLBACKS];
static uint8_t cbCounter=0;
static uint8_t cnt=0;

void TC2_HAL_init(){
	TCCR2A=0x02; //Set mode=CTC
    6226:	82 e0       	ldi	r24, 0x02	; 2
    6228:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	TCCR2B=0x00; //Stop timer
    622c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
	
	//Disable async
	ASSR=0x00;
    6230:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
	
	TCNT2=0; //Set counter to 0
    6234:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
	OCR2A=243; //16 Hz, 32 event pr s
    6238:	93 ef       	ldi	r25, 0xF3	; 243
    623a:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	
	//Enable interrupt
	TIMSK2=0x02;
    623e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
	sei();
    6242:	78 94       	sei
    6244:	08 95       	ret

Disassembly of section .text.TC2_HAL_kill:

00006934 <TC2_HAL_kill>:
static void stop_timer(){
	TCCR2B=0x00;
}

void TC2_HAL_kill(){
	stop_timer();
    6934:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <stop_timer>
	clear_callbacks();
    6938:	0e 94 03 31 	call	0x6206	; 0x6206 <clear_callbacks>
    693c:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00004eb4 <TC2_HAL_subscribe>:
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
    4eb4:	cf 93       	push	r28
    4eb6:	dc 01       	movw	r26, r24
	int8_t pointer=-1;
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    4eb8:	60 91 14 0d 	lds	r22, 0x0D14	; 0x800d14 <cbCounter>
    4ebc:	65 30       	cpi	r22, 0x05	; 5
    4ebe:	00 f5       	brcc	.+64     	; 0x4f00 <TC2_HAL_subscribe+0x4c>
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	15 c0       	rjmp	.+42     	; 0x4eee <TC2_HAL_subscribe+0x3a>
	
	//Find a free spot in the array to store the cb
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		if(callbacks[i]==NULL){
    4ec4:	29 2f       	mov	r18, r25
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	f9 01       	movw	r30, r18
    4eca:	ee 0f       	add	r30, r30
    4ecc:	ff 1f       	adc	r31, r31
    4ece:	e0 54       	subi	r30, 0x40	; 64
    4ed0:	f3 4f       	sbci	r31, 0xF3	; 243
    4ed2:	40 81       	ld	r20, Z
    4ed4:	51 81       	ldd	r21, Z+1	; 0x01
    4ed6:	45 2b       	or	r20, r21
    4ed8:	49 f4       	brne	.+18     	; 0x4eec <TC2_HAL_subscribe+0x38>
			callbacks[i]=cb;
    4eda:	22 0f       	add	r18, r18
    4edc:	33 1f       	adc	r19, r19
    4ede:	f9 01       	movw	r30, r18
    4ee0:	e0 54       	subi	r30, 0x40	; 64
    4ee2:	f3 4f       	sbci	r31, 0xF3	; 243
    4ee4:	b1 83       	std	Z+1, r27	; 0x01
    4ee6:	a0 83       	st	Z, r26
			pointer=i;
    4ee8:	c9 2f       	mov	r28, r25
			break;
    4eea:	04 c0       	rjmp	.+8      	; 0x4ef4 <TC2_HAL_subscribe+0x40>
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
	
	//Find a free spot in the array to store the cb
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    4eec:	9f 5f       	subi	r25, 0xFF	; 255
    4eee:	95 30       	cpi	r25, 0x05	; 5
    4ef0:	48 f3       	brcs	.-46     	; 0x4ec4 <TC2_HAL_subscribe+0x10>
	stop_timer();
	clear_callbacks();
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
    4ef2:	cf ef       	ldi	r28, 0xFF	; 255
			break;
		}
	}
	
	//Increment the number of cbs and (re)start the timer
	cbCounter++;
    4ef4:	6f 5f       	subi	r22, 0xFF	; 255
    4ef6:	60 93 14 0d 	sts	0x0D14, r22	; 0x800d14 <cbCounter>
	start_timer();
    4efa:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <start_timer>
	return pointer;
    4efe:	01 c0       	rjmp	.+2      	; 0x4f02 <TC2_HAL_subscribe+0x4e>

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    4f00:	cf ef       	ldi	r28, 0xFF	; 255
	
	//Increment the number of cbs and (re)start the timer
	cbCounter++;
	start_timer();
	return pointer;
}
    4f02:	8c 2f       	mov	r24, r28
    4f04:	cf 91       	pop	r28
    4f06:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00005936 <TC2_HAL_cancel>:

void TC2_HAL_cancel(int8_t pointer){
	//Just return if cb not exist
	if(callbacks[pointer]==NULL) return;
    5936:	08 2e       	mov	r0, r24
    5938:	00 0c       	add	r0, r0
    593a:	99 0b       	sbc	r25, r25
    593c:	fc 01       	movw	r30, r24
    593e:	ee 0f       	add	r30, r30
    5940:	ff 1f       	adc	r31, r31
    5942:	e0 54       	subi	r30, 0x40	; 64
    5944:	f3 4f       	sbci	r31, 0xF3	; 243
    5946:	20 81       	ld	r18, Z
    5948:	31 81       	ldd	r19, Z+1	; 0x01
    594a:	23 2b       	or	r18, r19
    594c:	81 f0       	breq	.+32     	; 0x596e <TC2_HAL_cancel+0x38>
	
	//Otherwise remove cb, stop timer if no cb is back
	callbacks[pointer]=NULL;
    594e:	88 0f       	add	r24, r24
    5950:	99 1f       	adc	r25, r25
    5952:	fc 01       	movw	r30, r24
    5954:	e0 54       	subi	r30, 0x40	; 64
    5956:	f3 4f       	sbci	r31, 0xF3	; 243
    5958:	11 82       	std	Z+1, r1	; 0x01
    595a:	10 82       	st	Z, r1
	cbCounter--;
    595c:	80 91 14 0d 	lds	r24, 0x0D14	; 0x800d14 <cbCounter>
    5960:	81 50       	subi	r24, 0x01	; 1
    5962:	80 93 14 0d 	sts	0x0D14, r24	; 0x800d14 <cbCounter>
	if(cbCounter==0){
    5966:	81 11       	cpse	r24, r1
    5968:	02 c0       	rjmp	.+4      	; 0x596e <TC2_HAL_cancel+0x38>
		stop_timer();		
    596a:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <stop_timer>
    596e:	08 95       	ret

Disassembly of section .text.__vector_9:

0000424a <__vector_9>:
	}
}

ISR(TIMER2_COMPA_vect){
    424a:	1f 92       	push	r1
    424c:	0f 92       	push	r0
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	0f 92       	push	r0
    4252:	11 24       	eor	r1, r1
    4254:	2f 93       	push	r18
    4256:	3f 93       	push	r19
    4258:	4f 93       	push	r20
    425a:	5f 93       	push	r21
    425c:	6f 93       	push	r22
    425e:	7f 93       	push	r23
    4260:	8f 93       	push	r24
    4262:	9f 93       	push	r25
    4264:	af 93       	push	r26
    4266:	bf 93       	push	r27
    4268:	cf 93       	push	r28
    426a:	ef 93       	push	r30
    426c:	ff 93       	push	r31
	cnt++;
    426e:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <cnt>
    4272:	8f 5f       	subi	r24, 0xFF	; 255
    4274:	80 93 13 0d 	sts	0x0D13, r24	; 0x800d13 <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    4278:	80 32       	cpi	r24, 0x20	; 32
    427a:	99 f4       	brne	.+38     	; 0x42a2 <__vector_9+0x58>
		cnt=0;
    427c:	10 92 13 0d 	sts	0x0D13, r1	; 0x800d13 <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    4280:	c0 e0       	ldi	r28, 0x00	; 0
    4282:	0d c0       	rjmp	.+26     	; 0x429e <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    4284:	ec 2f       	mov	r30, r28
    4286:	f0 e0       	ldi	r31, 0x00	; 0
    4288:	ee 0f       	add	r30, r30
    428a:	ff 1f       	adc	r31, r31
    428c:	e0 54       	subi	r30, 0x40	; 64
    428e:	f3 4f       	sbci	r31, 0xF3	; 243
    4290:	01 90       	ld	r0, Z+
    4292:	f0 81       	ld	r31, Z
    4294:	e0 2d       	mov	r30, r0
    4296:	30 97       	sbiw	r30, 0x00	; 0
    4298:	09 f0       	breq	.+2      	; 0x429c <__vector_9+0x52>
				callbacks[i]();
    429a:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    429c:	cf 5f       	subi	r28, 0xFF	; 255
    429e:	c5 30       	cpi	r28, 0x05	; 5
    42a0:	88 f3       	brcs	.-30     	; 0x4284 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    42a2:	ff 91       	pop	r31
    42a4:	ef 91       	pop	r30
    42a6:	cf 91       	pop	r28
    42a8:	bf 91       	pop	r27
    42aa:	af 91       	pop	r26
    42ac:	9f 91       	pop	r25
    42ae:	8f 91       	pop	r24
    42b0:	7f 91       	pop	r23
    42b2:	6f 91       	pop	r22
    42b4:	5f 91       	pop	r21
    42b6:	4f 91       	pop	r20
    42b8:	3f 91       	pop	r19
    42ba:	2f 91       	pop	r18
    42bc:	0f 90       	pop	r0
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	0f 90       	pop	r0
    42c2:	1f 90       	pop	r1
    42c4:	18 95       	reti

Disassembly of section .text.start_and_write_data:

000051d4 <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    51d4:	cf 92       	push	r12
    51d6:	df 92       	push	r13
    51d8:	ef 92       	push	r14
    51da:	cf 93       	push	r28
    51dc:	df 93       	push	r29
    51de:	6a 01       	movw	r12, r20
    51e0:	e6 2e       	mov	r14, r22
    51e2:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    51e4:	60 e0       	ldi	r22, 0x00	; 0
    51e6:	0e 94 19 2a 	call	0x5432	; 0x5432 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    51ea:	81 11       	cpse	r24, r1
    51ec:	13 c0       	rjmp	.+38     	; 0x5214 <start_and_write_data+0x40>
    51ee:	c0 e0       	ldi	r28, 0x00	; 0
    51f0:	0e c0       	rjmp	.+28     	; 0x520e <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    51f2:	ae 2d       	mov	r26, r14
    51f4:	c6 01       	movw	r24, r12
    51f6:	8c 0f       	add	r24, r28
    51f8:	91 1d       	adc	r25, r1
    51fa:	a1 1d       	adc	r26, r1
    51fc:	fc 01       	movw	r30, r24
    51fe:	84 91       	lpm	r24, Z
    5200:	a7 fd       	sbrc	r26, 7
    5202:	80 81       	ld	r24, Z
    5204:	0e 94 23 31 	call	0x6246	; 0x6246 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    5208:	81 11       	cpse	r24, r1
    520a:	04 c0       	rjmp	.+8      	; 0x5214 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    520c:	cf 5f       	subi	r28, 0xFF	; 255
    520e:	cd 17       	cp	r28, r29
    5210:	80 f3       	brcs	.-32     	; 0x51f2 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    5212:	80 e0       	ldi	r24, 0x00	; 0
}
    5214:	df 91       	pop	r29
    5216:	cf 91       	pop	r28
    5218:	ef 90       	pop	r14
    521a:	df 90       	pop	r13
    521c:	cf 90       	pop	r12
    521e:	08 95       	ret

Disassembly of section .text.read_and_stop:

00004ca4 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    4ca4:	ef 92       	push	r14
    4ca6:	ff 92       	push	r15
    4ca8:	0f 93       	push	r16
    4caa:	1f 93       	push	r17
    4cac:	cf 93       	push	r28
    4cae:	df 93       	push	r29
    4cb0:	8c 01       	movw	r16, r24
    4cb2:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    4cb4:	c0 e0       	ldi	r28, 0x00	; 0
    4cb6:	08 c0       	rjmp	.+16     	; 0x4cc8 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    4cb8:	78 01       	movw	r14, r16
    4cba:	ec 0e       	add	r14, r28
    4cbc:	f1 1c       	adc	r15, r1
    4cbe:	0e 94 18 33 	call	0x6630	; 0x6630 <TWI_HAL_read_byte_ack>
    4cc2:	f7 01       	movw	r30, r14
    4cc4:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    4cc6:	cf 5f       	subi	r28, 0xFF	; 255
    4cc8:	2c 2f       	mov	r18, r28
    4cca:	30 e0       	ldi	r19, 0x00	; 0
    4ccc:	8d 2f       	mov	r24, r29
    4cce:	90 e0       	ldi	r25, 0x00	; 0
    4cd0:	01 97       	sbiw	r24, 0x01	; 1
    4cd2:	28 17       	cp	r18, r24
    4cd4:	39 07       	cpc	r19, r25
    4cd6:	84 f3       	brlt	.-32     	; 0x4cb8 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    4cd8:	8d 2f       	mov	r24, r29
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	01 97       	sbiw	r24, 0x01	; 1
    4cde:	e8 01       	movw	r28, r16
    4ce0:	c8 0f       	add	r28, r24
    4ce2:	d9 1f       	adc	r29, r25
    4ce4:	0e 94 22 33 	call	0x6644	; 0x6644 <TWI_HAL_read_byte_nack>
    4ce8:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    4cea:	0e 94 76 33 	call	0x66ec	; 0x66ec <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	df 91       	pop	r29
    4cf2:	cf 91       	pop	r28
    4cf4:	1f 91       	pop	r17
    4cf6:	0f 91       	pop	r16
    4cf8:	ff 90       	pop	r15
    4cfa:	ef 90       	pop	r14
    4cfc:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

0000661c <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    661c:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    661e:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <start_and_write_data>
    6622:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    6624:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    6626:	0e 94 76 33 	call	0x66ec	; 0x66ec <TWI_HAL_stop>
	}
	return status;
}
    662a:	8c 2f       	mov	r24, r28
    662c:	cf 91       	pop	r28
    662e:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00006420 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6420:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6422:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <start_and_write_data>
    6426:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    6428:	0e 94 76 33 	call	0x66ec	; 0x66ec <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    642c:	c1 11       	cpse	r28, r1
    642e:	02 c0       	rjmp	.+4      	; 0x6434 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    6430:	80 e0       	ldi	r24, 0x00	; 0
    6432:	01 c0       	rjmp	.+2      	; 0x6436 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    6434:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    6436:	cf 91       	pop	r28
    6438:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00005cae <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5cae:	0f 93       	push	r16
    5cb0:	1f 93       	push	r17
    5cb2:	cf 93       	push	r28
    5cb4:	df 93       	push	r29
    5cb6:	8b 01       	movw	r16, r22
    5cb8:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    5cba:	61 e0       	ldi	r22, 0x01	; 1
    5cbc:	0e 94 19 2a 	call	0x5432	; 0x5432 <TWI_HAL_start>
    5cc0:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5cc2:	88 23       	and	r24, r24
    5cc4:	21 f0       	breq	.+8      	; 0x5cce <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    5cc6:	0e 94 76 33 	call	0x66ec	; 0x66ec <TWI_HAL_stop>
		return status;	
    5cca:	8c 2f       	mov	r24, r28
    5ccc:	04 c0       	rjmp	.+8      	; 0x5cd6 <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    5cce:	6d 2f       	mov	r22, r29
    5cd0:	c8 01       	movw	r24, r16
    5cd2:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <read_and_stop>
	
}
    5cd6:	df 91       	pop	r29
    5cd8:	cf 91       	pop	r28
    5cda:	1f 91       	pop	r17
    5cdc:	0f 91       	pop	r16
    5cde:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00005d76 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5d76:	0f 93       	push	r16
    5d78:	1f 93       	push	r17
    5d7a:	cf 93       	push	r28
    5d7c:	df 93       	push	r29
    5d7e:	8b 01       	movw	r16, r22
    5d80:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    5d82:	0e 94 be 2b 	call	0x577c	; 0x577c <TWI_HAL_repeated_start>
    5d86:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5d88:	88 23       	and	r24, r24
    5d8a:	21 f0       	breq	.+8      	; 0x5d94 <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    5d8c:	0e 94 76 33 	call	0x66ec	; 0x66ec <TWI_HAL_stop>
		return status;
    5d90:	8c 2f       	mov	r24, r28
    5d92:	04 c0       	rjmp	.+8      	; 0x5d9c <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    5d94:	6d 2f       	mov	r22, r29
    5d96:	c8 01       	movw	r24, r16
    5d98:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <read_and_stop>
	
}
    5d9c:	df 91       	pop	r29
    5d9e:	cf 91       	pop	r28
    5da0:	1f 91       	pop	r17
    5da2:	0f 91       	pop	r16
    5da4:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00006680 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    6680:	80 e2       	ldi	r24, 0x20	; 32
    6682:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    6686:	e9 eb       	ldi	r30, 0xB9	; 185
    6688:	f0 e0       	ldi	r31, 0x00	; 0
    668a:	80 81       	ld	r24, Z
    668c:	8c 7f       	andi	r24, 0xFC	; 252
    668e:	80 83       	st	Z, r24
    6690:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00005432 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	88 0f       	add	r24, r24
    5436:	99 1f       	adc	r25, r25
    5438:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    543a:	84 ea       	ldi	r24, 0xA4	; 164
    543c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5440:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5444:	99 23       	and	r25, r25
    5446:	e4 f7       	brge	.-8      	; 0x5440 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    5448:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    544c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    544e:	88 30       	cpi	r24, 0x08	; 8
    5450:	99 f4       	brne	.+38     	; 0x5478 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    5452:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    5456:	84 e8       	ldi	r24, 0x84	; 132
    5458:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    545c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5460:	88 23       	and	r24, r24
    5462:	e4 f7       	brge	.-8      	; 0x545c <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    5464:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5468:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    546a:	88 31       	cpi	r24, 0x18	; 24
    546c:	21 f0       	breq	.+8      	; 0x5476 <TWI_HAL_start+0x44>
    546e:	80 34       	cpi	r24, 0x40	; 64
    5470:	19 f4       	brne	.+6      	; 0x5478 <TWI_HAL_start+0x46>
    5472:	80 e0       	ldi	r24, 0x00	; 0
    5474:	08 95       	ret
    5476:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    5478:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

0000577c <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	88 0f       	add	r24, r24
    5780:	99 1f       	adc	r25, r25
    5782:	28 2f       	mov	r18, r24
    5784:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    5786:	84 ea       	ldi	r24, 0xA4	; 164
    5788:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    578c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5790:	99 23       	and	r25, r25
    5792:	e4 f7       	brge	.-8      	; 0x578c <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    5794:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5798:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    579a:	80 31       	cpi	r24, 0x10	; 16
    579c:	79 f4       	brne	.+30     	; 0x57bc <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    579e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    57a2:	84 e8       	ldi	r24, 0x84	; 132
    57a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    57a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    57ac:	88 23       	and	r24, r24
    57ae:	e4 f7       	brge	.-8      	; 0x57a8 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    57b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    57b4:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    57b6:	80 34       	cpi	r24, 0x40	; 64
    57b8:	09 f4       	brne	.+2      	; 0x57bc <TWI_HAL_repeated_start+0x40>
    57ba:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    57bc:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00006246 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    6246:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    624a:	84 e8       	ldi	r24, 0x84	; 132
    624c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    6250:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6254:	88 23       	and	r24, r24
    6256:	e4 f7       	brge	.-8      	; 0x6250 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    6258:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    625c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    625e:	88 32       	cpi	r24, 0x28	; 40
    6260:	09 f4       	brne	.+2      	; 0x6264 <TWI_HAL_write_byte+0x1e>
    6262:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    6264:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00006630 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    6630:	84 ec       	ldi	r24, 0xC4	; 196
    6632:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    6636:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    663a:	88 23       	and	r24, r24
    663c:	e4 f7       	brge	.-8      	; 0x6636 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    663e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6642:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00006644 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    6644:	84 e8       	ldi	r24, 0x84	; 132
    6646:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    664a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    664e:	88 23       	and	r24, r24
    6650:	e4 f7       	brge	.-8      	; 0x664a <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    6652:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6656:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

000066ec <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    66ec:	84 e9       	ldi	r24, 0x94	; 148
    66ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    66f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    66f6:	84 fd       	sbrc	r24, 4
    66f8:	fc cf       	rjmp	.-8      	; 0x66f2 <TWI_HAL_stop+0x6>
}
    66fa:	08 95       	ret

Disassembly of section .text.copy_buffer:

00005f26 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5f26:	bc 01       	movw	r22, r24
    5f28:	90 e0       	ldi	r25, 0x00	; 0
    5f2a:	09 c0       	rjmp	.+18     	; 0x5f3e <copy_buffer+0x18>
    5f2c:	fb 01       	movw	r30, r22
    5f2e:	e9 0f       	add	r30, r25
    5f30:	f1 1d       	adc	r31, r1
    5f32:	da 01       	movw	r26, r20
    5f34:	a0 50       	subi	r26, 0x00	; 0
    5f36:	bf 4f       	sbci	r27, 0xFF	; 255
    5f38:	2c 91       	ld	r18, X
    5f3a:	20 83       	st	Z, r18
    5f3c:	9f 5f       	subi	r25, 0xFF	; 255
    5f3e:	49 2f       	mov	r20, r25
    5f40:	50 e0       	ldi	r21, 0x00	; 0
    5f42:	20 91 16 0d 	lds	r18, 0x0D16	; 0x800d16 <rx_buffer_data_len>
    5f46:	30 e0       	ldi	r19, 0x00	; 0
    5f48:	22 50       	subi	r18, 0x02	; 2
    5f4a:	31 09       	sbc	r19, r1
    5f4c:	42 17       	cp	r20, r18
    5f4e:	53 07       	cpc	r21, r19
    5f50:	6c f3       	brlt	.-38     	; 0x5f2c <copy_buffer+0x6>
    5f52:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

000058be <uart0_hal_init>:
    58be:	e1 ec       	ldi	r30, 0xC1	; 193
    58c0:	f0 e0       	ldi	r31, 0x00	; 0
    58c2:	80 81       	ld	r24, Z
    58c4:	80 61       	ori	r24, 0x10	; 16
    58c6:	80 83       	st	Z, r24
    58c8:	80 81       	ld	r24, Z
    58ca:	88 60       	ori	r24, 0x08	; 8
    58cc:	80 83       	st	Z, r24
    58ce:	80 81       	ld	r24, Z
    58d0:	80 68       	ori	r24, 0x80	; 128
    58d2:	80 83       	st	Z, r24
    58d4:	80 81       	ld	r24, Z
    58d6:	80 64       	ori	r24, 0x40	; 64
    58d8:	80 83       	st	Z, r24
    58da:	e0 ec       	ldi	r30, 0xC0	; 192
    58dc:	f0 e0       	ldi	r31, 0x00	; 0
    58de:	80 81       	ld	r24, Z
    58e0:	82 60       	ori	r24, 0x02	; 2
    58e2:	80 83       	st	Z, r24
    58e4:	86 e0       	ldi	r24, 0x06	; 6
    58e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    58ea:	80 e1       	ldi	r24, 0x10	; 16
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    58f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    58f6:	78 94       	sei
    58f8:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000050ea <uart0_hal_send_message>:
    50ea:	dc 01       	movw	r26, r24
    50ec:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <tx_buffer_data_len>
    50f0:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <tx_buffer_data_len+0x1>
    50f4:	89 2b       	or	r24, r25
    50f6:	d1 f7       	brne	.-12     	; 0x50ec <uart0_hal_send_message+0x2>
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	0b c0       	rjmp	.+22     	; 0x5112 <uart0_hal_send_message+0x28>
    50fc:	29 2f       	mov	r18, r25
    50fe:	30 e0       	ldi	r19, 0x00	; 0
    5100:	fd 01       	movw	r30, r26
    5102:	e2 0f       	add	r30, r18
    5104:	f3 1f       	adc	r31, r19
    5106:	40 81       	ld	r20, Z
    5108:	f9 01       	movw	r30, r18
    510a:	ea 56       	subi	r30, 0x6A	; 106
    510c:	fe 4f       	sbci	r31, 0xFE	; 254
    510e:	40 83       	st	Z, r20
    5110:	9f 5f       	subi	r25, 0xFF	; 255
    5112:	96 17       	cp	r25, r22
    5114:	98 f3       	brcs	.-26     	; 0x50fc <uart0_hal_send_message+0x12>
    5116:	86 2f       	mov	r24, r22
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	90 93 f8 0c 	sts	0x0CF8, r25	; 0x800cf8 <tx_buffer_data_len+0x1>
    511e:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <tx_buffer_data_len>
    5122:	81 e0       	ldi	r24, 0x01	; 1
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	90 93 f6 0c 	sts	0x0CF6, r25	; 0x800cf6 <tx_buffer_cursor+0x1>
    512a:	80 93 f5 0c 	sts	0x0CF5, r24	; 0x800cf5 <tx_buffer_cursor>
    512e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    5132:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    5136:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

000041cc <uart0_hal_send_string>:
    41cc:	6f 92       	push	r6
    41ce:	7f 92       	push	r7
    41d0:	8f 92       	push	r8
    41d2:	cf 92       	push	r12
    41d4:	df 92       	push	r13
    41d6:	ef 92       	push	r14
    41d8:	3b 01       	movw	r6, r22
    41da:	88 2e       	mov	r8, r24
    41dc:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <tx_buffer_data_len>
    41e0:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <tx_buffer_data_len+0x1>
    41e4:	89 2b       	or	r24, r25
    41e6:	d1 f7       	brne	.-12     	; 0x41dc <uart0_hal_send_string+0x10>
    41e8:	88 2d       	mov	r24, r8
    41ea:	b3 01       	movw	r22, r6
    41ec:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    41f0:	bc 01       	movw	r22, r24
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	11 c0       	rjmp	.+34     	; 0x421a <uart0_hal_send_string+0x4e>
    41f8:	e8 2c       	mov	r14, r8
    41fa:	63 01       	movw	r12, r6
    41fc:	c2 0e       	add	r12, r18
    41fe:	d3 1e       	adc	r13, r19
    4200:	e1 1c       	adc	r14, r1
    4202:	37 fd       	sbrc	r19, 7
    4204:	ea 94       	dec	r14
    4206:	f6 01       	movw	r30, r12
    4208:	94 91       	lpm	r25, Z
    420a:	e7 fc       	sbrc	r14, 7
    420c:	90 81       	ld	r25, Z
    420e:	f9 01       	movw	r30, r18
    4210:	ea 56       	subi	r30, 0x6A	; 106
    4212:	fe 4f       	sbci	r31, 0xFE	; 254
    4214:	90 83       	st	Z, r25
    4216:	2f 5f       	subi	r18, 0xFF	; 255
    4218:	3f 4f       	sbci	r19, 0xFF	; 255
    421a:	26 17       	cp	r18, r22
    421c:	37 07       	cpc	r19, r23
    421e:	60 f3       	brcs	.-40     	; 0x41f8 <uart0_hal_send_string+0x2c>
    4220:	70 93 f8 0c 	sts	0x0CF8, r23	; 0x800cf8 <tx_buffer_data_len+0x1>
    4224:	60 93 f7 0c 	sts	0x0CF7, r22	; 0x800cf7 <tx_buffer_data_len>
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	90 93 f6 0c 	sts	0x0CF6, r25	; 0x800cf6 <tx_buffer_cursor+0x1>
    4230:	80 93 f5 0c 	sts	0x0CF5, r24	; 0x800cf5 <tx_buffer_cursor>
    4234:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    4238:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    423c:	ef 90       	pop	r14
    423e:	df 90       	pop	r13
    4240:	cf 90       	pop	r12
    4242:	8f 90       	pop	r8
    4244:	7f 90       	pop	r7
    4246:	6f 90       	pop	r6
    4248:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00006770 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    6770:	90 91 15 0d 	lds	r25, 0x0D15	; 0x800d15 <rx_buffer_has_message>
    6774:	81 e0       	ldi	r24, 0x01	; 1
    6776:	91 11       	cpse	r25, r1
    6778:	01 c0       	rjmp	.+2      	; 0x677c <uart0_hal_message_ready+0xc>
    677a:	80 e0       	ldi	r24, 0x00	; 0
}
    677c:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

0000693e <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    693e:	10 92 15 0d 	sts	0x0D15, r1	; 0x800d15 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    6942:	10 92 16 0d 	sts	0x0D16, r1	; 0x800d16 <rx_buffer_data_len>
    6946:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00006034 <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    6034:	0f 93       	push	r16
    6036:	1f 93       	push	r17
    6038:	cf 93       	push	r28
    603a:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    603c:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    6040:	c0 91 16 0d 	lds	r28, 0x0D16	; 0x800d16 <rx_buffer_data_len>
    6044:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    6046:	f8 01       	movw	r30, r16
    6048:	ec 0f       	add	r30, r28
    604a:	f1 1d       	adc	r31, r1
    604c:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    604e:	0e 94 9f 34 	call	0x693e	; 0x693e <uart0_hal_clear_rx_buffer>
	return len;
}
    6052:	8c 2f       	mov	r24, r28
    6054:	cf 91       	pop	r28
    6056:	1f 91       	pop	r17
    6058:	0f 91       	pop	r16
    605a:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00005552 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5552:	cf 93       	push	r28
    5554:	df 93       	push	r29
    5556:	1f 92       	push	r1
    5558:	cd b7       	in	r28, 0x3d	; 61
    555a:	de b7       	in	r29, 0x3e	; 62
    555c:	9a b1       	in	r25, 0x0a	; 10
    555e:	92 60       	ori	r25, 0x02	; 2
    5560:	9a b9       	out	0x0a, r25	; 10
    5562:	e1 ec       	ldi	r30, 0xC1	; 193
    5564:	f0 e0       	ldi	r31, 0x00	; 0
    5566:	90 81       	ld	r25, Z
    5568:	97 7f       	andi	r25, 0xF7	; 247
    556a:	90 83       	st	Z, r25
    556c:	9b b1       	in	r25, 0x0b	; 11
    556e:	9d 7f       	andi	r25, 0xFD	; 253
    5570:	9b b9       	out	0x0b, r25	; 11
    5572:	af e9       	ldi	r26, 0x9F	; 159
    5574:	bf e0       	ldi	r27, 0x0F	; 15
    5576:	11 97       	sbiw	r26, 0x01	; 1
    5578:	f1 f7       	brne	.-4      	; 0x5576 <uart0_hal_send_break+0x24>
    557a:	00 c0       	rjmp	.+0      	; 0x557c <uart0_hal_send_break+0x2a>
    557c:	00 00       	nop
    557e:	90 81       	ld	r25, Z
    5580:	98 60       	ori	r25, 0x08	; 8
    5582:	90 83       	st	Z, r25
    5584:	89 83       	std	Y+1, r24	; 0x01
    5586:	61 e0       	ldi	r22, 0x01	; 1
    5588:	ce 01       	movw	r24, r28
    558a:	01 96       	adiw	r24, 0x01	; 1
    558c:	0e 94 75 28 	call	0x50ea	; 0x50ea <uart0_hal_send_message>
    5590:	0f 90       	pop	r0
    5592:	df 91       	pop	r29
    5594:	cf 91       	pop	r28
    5596:	08 95       	ret

Disassembly of section .text.__vector_22:

000047da <__vector_22>:
    47da:	1f 92       	push	r1
    47dc:	0f 92       	push	r0
    47de:	0f b6       	in	r0, 0x3f	; 63
    47e0:	0f 92       	push	r0
    47e2:	11 24       	eor	r1, r1
    47e4:	2f 93       	push	r18
    47e6:	3f 93       	push	r19
    47e8:	8f 93       	push	r24
    47ea:	9f 93       	push	r25
    47ec:	ef 93       	push	r30
    47ee:	ff 93       	push	r31
    47f0:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <tx_buffer_cursor>
    47f4:	90 91 f6 0c 	lds	r25, 0x0CF6	; 0x800cf6 <tx_buffer_cursor+0x1>
    47f8:	20 91 f7 0c 	lds	r18, 0x0CF7	; 0x800cf7 <tx_buffer_data_len>
    47fc:	30 91 f8 0c 	lds	r19, 0x0CF8	; 0x800cf8 <tx_buffer_data_len+0x1>
    4800:	82 17       	cp	r24, r18
    4802:	93 07       	cpc	r25, r19
    4804:	70 f4       	brcc	.+28     	; 0x4822 <__vector_22+0x48>
    4806:	9c 01       	movw	r18, r24
    4808:	2f 5f       	subi	r18, 0xFF	; 255
    480a:	3f 4f       	sbci	r19, 0xFF	; 255
    480c:	30 93 f6 0c 	sts	0x0CF6, r19	; 0x800cf6 <tx_buffer_cursor+0x1>
    4810:	20 93 f5 0c 	sts	0x0CF5, r18	; 0x800cf5 <tx_buffer_cursor>
    4814:	fc 01       	movw	r30, r24
    4816:	ea 56       	subi	r30, 0x6A	; 106
    4818:	fe 4f       	sbci	r31, 0xFE	; 254
    481a:	80 81       	ld	r24, Z
    481c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4820:	08 c0       	rjmp	.+16     	; 0x4832 <__vector_22+0x58>
    4822:	10 92 f6 0c 	sts	0x0CF6, r1	; 0x800cf6 <tx_buffer_cursor+0x1>
    4826:	10 92 f5 0c 	sts	0x0CF5, r1	; 0x800cf5 <tx_buffer_cursor>
    482a:	10 92 f8 0c 	sts	0x0CF8, r1	; 0x800cf8 <tx_buffer_data_len+0x1>
    482e:	10 92 f7 0c 	sts	0x0CF7, r1	; 0x800cf7 <tx_buffer_data_len>
    4832:	ff 91       	pop	r31
    4834:	ef 91       	pop	r30
    4836:	9f 91       	pop	r25
    4838:	8f 91       	pop	r24
    483a:	3f 91       	pop	r19
    483c:	2f 91       	pop	r18
    483e:	0f 90       	pop	r0
    4840:	0f be       	out	0x3f, r0	; 63
    4842:	0f 90       	pop	r0
    4844:	1f 90       	pop	r1
    4846:	18 95       	reti

Disassembly of section .text.__vector_20:

00004612 <__vector_20>:
    4612:	1f 92       	push	r1
    4614:	0f 92       	push	r0
    4616:	0f b6       	in	r0, 0x3f	; 63
    4618:	0f 92       	push	r0
    461a:	11 24       	eor	r1, r1
    461c:	2f 93       	push	r18
    461e:	8f 93       	push	r24
    4620:	9f 93       	push	r25
    4622:	ef 93       	push	r30
    4624:	ff 93       	push	r31
    4626:	80 91 15 0d 	lds	r24, 0x0D15	; 0x800d15 <rx_buffer_has_message>
    462a:	81 11       	cpse	r24, r1
    462c:	0e c0       	rjmp	.+28     	; 0x464a <__vector_20+0x38>
    462e:	e0 91 16 0d 	lds	r30, 0x0D16	; 0x800d16 <rx_buffer_data_len>
    4632:	e6 39       	cpi	r30, 0x96	; 150
    4634:	50 f4       	brcc	.+20     	; 0x464a <__vector_20+0x38>
    4636:	81 e0       	ldi	r24, 0x01	; 1
    4638:	8e 0f       	add	r24, r30
    463a:	80 93 16 0d 	sts	0x0D16, r24	; 0x800d16 <rx_buffer_data_len>
    463e:	f0 e0       	ldi	r31, 0x00	; 0
    4640:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4644:	e0 50       	subi	r30, 0x00	; 0
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	80 83       	st	Z, r24
    464a:	80 91 16 0d 	lds	r24, 0x0D16	; 0x800d16 <rx_buffer_data_len>
    464e:	83 30       	cpi	r24, 0x03	; 3
    4650:	80 f0       	brcs	.+32     	; 0x4672 <__vector_20+0x60>
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	fc 01       	movw	r30, r24
    4656:	e1 50       	subi	r30, 0x01	; 1
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	20 81       	ld	r18, Z
    465c:	2a 30       	cpi	r18, 0x0A	; 10
    465e:	49 f4       	brne	.+18     	; 0x4672 <__vector_20+0x60>
    4660:	fc 01       	movw	r30, r24
    4662:	e2 50       	subi	r30, 0x02	; 2
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	80 81       	ld	r24, Z
    4668:	8d 30       	cpi	r24, 0x0D	; 13
    466a:	19 f4       	brne	.+6      	; 0x4672 <__vector_20+0x60>
    466c:	81 e0       	ldi	r24, 0x01	; 1
    466e:	80 93 15 0d 	sts	0x0D15, r24	; 0x800d15 <rx_buffer_has_message>
    4672:	ff 91       	pop	r31
    4674:	ef 91       	pop	r30
    4676:	9f 91       	pop	r25
    4678:	8f 91       	pop	r24
    467a:	2f 91       	pop	r18
    467c:	0f 90       	pop	r0
    467e:	0f be       	out	0x3f, r0	; 63
    4680:	0f 90       	pop	r0
    4682:	1f 90       	pop	r1
    4684:	18 95       	reti

Disassembly of section .text.copy_buffer:

00005f54 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    5f54:	bc 01       	movw	r22, r24
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	09 c0       	rjmp	.+18     	; 0x5f6c <copy_buffer+0x18>
    5f5a:	fb 01       	movw	r30, r22
    5f5c:	e9 0f       	add	r30, r25
    5f5e:	f1 1d       	adc	r31, r1
    5f60:	da 01       	movw	r26, r20
    5f62:	a5 50       	subi	r26, 0x05	; 5
    5f64:	b4 4f       	sbci	r27, 0xF4	; 244
    5f66:	2c 91       	ld	r18, X
    5f68:	20 83       	st	Z, r18
    5f6a:	9f 5f       	subi	r25, 0xFF	; 255
    5f6c:	49 2f       	mov	r20, r25
    5f6e:	50 e0       	ldi	r21, 0x00	; 0
    5f70:	20 91 18 0d 	lds	r18, 0x0D18	; 0x800d18 <rx_buffer_data_len>
    5f74:	30 e0       	ldi	r19, 0x00	; 0
    5f76:	22 50       	subi	r18, 0x02	; 2
    5f78:	31 09       	sbc	r19, r1
    5f7a:	42 17       	cp	r20, r18
    5f7c:	53 07       	cpc	r21, r19
    5f7e:	6c f3       	brlt	.-38     	; 0x5f5a <copy_buffer+0x6>
    5f80:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

000058fa <uart1_hal_init>:
    58fa:	e9 ec       	ldi	r30, 0xC9	; 201
    58fc:	f0 e0       	ldi	r31, 0x00	; 0
    58fe:	80 81       	ld	r24, Z
    5900:	80 61       	ori	r24, 0x10	; 16
    5902:	80 83       	st	Z, r24
    5904:	80 81       	ld	r24, Z
    5906:	88 60       	ori	r24, 0x08	; 8
    5908:	80 83       	st	Z, r24
    590a:	80 81       	ld	r24, Z
    590c:	80 68       	ori	r24, 0x80	; 128
    590e:	80 83       	st	Z, r24
    5910:	80 81       	ld	r24, Z
    5912:	80 64       	ori	r24, 0x40	; 64
    5914:	80 83       	st	Z, r24
    5916:	e8 ec       	ldi	r30, 0xC8	; 200
    5918:	f0 e0       	ldi	r31, 0x00	; 0
    591a:	80 81       	ld	r24, Z
    591c:	82 60       	ori	r24, 0x02	; 2
    591e:	80 83       	st	Z, r24
    5920:	86 e0       	ldi	r24, 0x06	; 6
    5922:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    5926:	80 e1       	ldi	r24, 0x10	; 16
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    592e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    5932:	78 94       	sei
    5934:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00003dce <uart1_hal_send_string>:
    3dce:	6f 92       	push	r6
    3dd0:	7f 92       	push	r7
    3dd2:	8f 92       	push	r8
    3dd4:	cf 92       	push	r12
    3dd6:	df 92       	push	r13
    3dd8:	ef 92       	push	r14
    3dda:	3b 01       	movw	r6, r22
    3ddc:	88 2e       	mov	r8, r24
    3dde:	80 91 fb 0c 	lds	r24, 0x0CFB	; 0x800cfb <tx_buffer_data_len>
    3de2:	90 91 fc 0c 	lds	r25, 0x0CFC	; 0x800cfc <tx_buffer_data_len+0x1>
    3de6:	89 2b       	or	r24, r25
    3de8:	d1 f7       	brne	.-12     	; 0x3dde <uart1_hal_send_string+0x10>
    3dea:	88 2d       	mov	r24, r8
    3dec:	b3 01       	movw	r22, r6
    3dee:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    3df2:	bc 01       	movw	r22, r24
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	11 c0       	rjmp	.+34     	; 0x3e1c <uart1_hal_send_string+0x4e>
    3dfa:	e8 2c       	mov	r14, r8
    3dfc:	63 01       	movw	r12, r6
    3dfe:	c2 0e       	add	r12, r18
    3e00:	d3 1e       	adc	r13, r19
    3e02:	e1 1c       	adc	r14, r1
    3e04:	37 fd       	sbrc	r19, 7
    3e06:	ea 94       	dec	r14
    3e08:	f6 01       	movw	r30, r12
    3e0a:	94 91       	lpm	r25, Z
    3e0c:	e7 fc       	sbrc	r14, 7
    3e0e:	90 81       	ld	r25, Z
    3e10:	f9 01       	movw	r30, r18
    3e12:	e8 52       	subi	r30, 0x28	; 40
    3e14:	f8 4f       	sbci	r31, 0xF8	; 248
    3e16:	90 83       	st	Z, r25
    3e18:	2f 5f       	subi	r18, 0xFF	; 255
    3e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e1c:	26 17       	cp	r18, r22
    3e1e:	37 07       	cpc	r19, r23
    3e20:	60 f3       	brcs	.-40     	; 0x3dfa <uart1_hal_send_string+0x2c>
    3e22:	fb 01       	movw	r30, r22
    3e24:	e8 52       	subi	r30, 0x28	; 40
    3e26:	f8 4f       	sbci	r31, 0xF8	; 248
    3e28:	8d e0       	ldi	r24, 0x0D	; 13
    3e2a:	80 83       	st	Z, r24
    3e2c:	fb 01       	movw	r30, r22
    3e2e:	e7 52       	subi	r30, 0x27	; 39
    3e30:	f8 4f       	sbci	r31, 0xF8	; 248
    3e32:	8a e0       	ldi	r24, 0x0A	; 10
    3e34:	80 83       	st	Z, r24
    3e36:	6e 5f       	subi	r22, 0xFE	; 254
    3e38:	7f 4f       	sbci	r23, 0xFF	; 255
    3e3a:	70 93 fc 0c 	sts	0x0CFC, r23	; 0x800cfc <tx_buffer_data_len+0x1>
    3e3e:	60 93 fb 0c 	sts	0x0CFB, r22	; 0x800cfb <tx_buffer_data_len>
    3e42:	81 e0       	ldi	r24, 0x01	; 1
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	90 93 fa 0c 	sts	0x0CFA, r25	; 0x800cfa <tx_buffer_cursor+0x1>
    3e4a:	80 93 f9 0c 	sts	0x0CF9, r24	; 0x800cf9 <tx_buffer_cursor>
    3e4e:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <_end>
    3e52:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    3e56:	ef 90       	pop	r14
    3e58:	df 90       	pop	r13
    3e5a:	cf 90       	pop	r12
    3e5c:	8f 90       	pop	r8
    3e5e:	7f 90       	pop	r7
    3e60:	6f 90       	pop	r6
    3e62:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

0000677e <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    677e:	90 91 17 0d 	lds	r25, 0x0D17	; 0x800d17 <rx_buffer_has_message>
    6782:	81 e0       	ldi	r24, 0x01	; 1
    6784:	91 11       	cpse	r25, r1
    6786:	01 c0       	rjmp	.+2      	; 0x678a <uart1_hal_message_ready+0xc>
    6788:	80 e0       	ldi	r24, 0x00	; 0
}
    678a:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

0000678c <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    678c:	90 91 18 0d 	lds	r25, 0x0D18	; 0x800d18 <rx_buffer_data_len>
    6790:	81 e0       	ldi	r24, 0x01	; 1
    6792:	9a 34       	cpi	r25, 0x4A	; 74
    6794:	08 f4       	brcc	.+2      	; 0x6798 <uart1_hal_rx_full+0xc>
    6796:	80 e0       	ldi	r24, 0x00	; 0
}
    6798:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

00006948 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    6948:	10 92 17 0d 	sts	0x0D17, r1	; 0x800d17 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    694c:	10 92 18 0d 	sts	0x0D18, r1	; 0x800d18 <rx_buffer_data_len>
    6950:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

0000605c <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    605c:	0f 93       	push	r16
    605e:	1f 93       	push	r17
    6060:	cf 93       	push	r28
    6062:	8c 01       	movw	r16, r24
    6064:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <copy_buffer>
    6068:	c0 91 18 0d 	lds	r28, 0x0D18	; 0x800d18 <rx_buffer_data_len>
    606c:	c2 50       	subi	r28, 0x02	; 2
    606e:	f8 01       	movw	r30, r16
    6070:	ec 0f       	add	r30, r28
    6072:	f1 1d       	adc	r31, r1
    6074:	10 82       	st	Z, r1
    6076:	0e 94 a4 34 	call	0x6948	; 0x6948 <uart1_hal_clear_rx_buffer>
    607a:	8c 2f       	mov	r24, r28
    607c:	cf 91       	pop	r28
    607e:	1f 91       	pop	r17
    6080:	0f 91       	pop	r16
    6082:	08 95       	ret

Disassembly of section .text.__vector_30:

00004848 <__vector_30>:
    4848:	1f 92       	push	r1
    484a:	0f 92       	push	r0
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	0f 92       	push	r0
    4850:	11 24       	eor	r1, r1
    4852:	2f 93       	push	r18
    4854:	3f 93       	push	r19
    4856:	8f 93       	push	r24
    4858:	9f 93       	push	r25
    485a:	ef 93       	push	r30
    485c:	ff 93       	push	r31
    485e:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <tx_buffer_cursor>
    4862:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <tx_buffer_cursor+0x1>
    4866:	20 91 fb 0c 	lds	r18, 0x0CFB	; 0x800cfb <tx_buffer_data_len>
    486a:	30 91 fc 0c 	lds	r19, 0x0CFC	; 0x800cfc <tx_buffer_data_len+0x1>
    486e:	82 17       	cp	r24, r18
    4870:	93 07       	cpc	r25, r19
    4872:	70 f4       	brcc	.+28     	; 0x4890 <__vector_30+0x48>
    4874:	9c 01       	movw	r18, r24
    4876:	2f 5f       	subi	r18, 0xFF	; 255
    4878:	3f 4f       	sbci	r19, 0xFF	; 255
    487a:	30 93 fa 0c 	sts	0x0CFA, r19	; 0x800cfa <tx_buffer_cursor+0x1>
    487e:	20 93 f9 0c 	sts	0x0CF9, r18	; 0x800cf9 <tx_buffer_cursor>
    4882:	fc 01       	movw	r30, r24
    4884:	e8 52       	subi	r30, 0x28	; 40
    4886:	f8 4f       	sbci	r31, 0xF8	; 248
    4888:	80 81       	ld	r24, Z
    488a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    488e:	08 c0       	rjmp	.+16     	; 0x48a0 <__vector_30+0x58>
    4890:	10 92 fa 0c 	sts	0x0CFA, r1	; 0x800cfa <tx_buffer_cursor+0x1>
    4894:	10 92 f9 0c 	sts	0x0CF9, r1	; 0x800cf9 <tx_buffer_cursor>
    4898:	10 92 fc 0c 	sts	0x0CFC, r1	; 0x800cfc <tx_buffer_data_len+0x1>
    489c:	10 92 fb 0c 	sts	0x0CFB, r1	; 0x800cfb <tx_buffer_data_len>
    48a0:	ff 91       	pop	r31
    48a2:	ef 91       	pop	r30
    48a4:	9f 91       	pop	r25
    48a6:	8f 91       	pop	r24
    48a8:	3f 91       	pop	r19
    48aa:	2f 91       	pop	r18
    48ac:	0f 90       	pop	r0
    48ae:	0f be       	out	0x3f, r0	; 63
    48b0:	0f 90       	pop	r0
    48b2:	1f 90       	pop	r1
    48b4:	18 95       	reti

Disassembly of section .text.__vector_28:

00004686 <__vector_28>:
    4686:	1f 92       	push	r1
    4688:	0f 92       	push	r0
    468a:	0f b6       	in	r0, 0x3f	; 63
    468c:	0f 92       	push	r0
    468e:	11 24       	eor	r1, r1
    4690:	2f 93       	push	r18
    4692:	8f 93       	push	r24
    4694:	9f 93       	push	r25
    4696:	ef 93       	push	r30
    4698:	ff 93       	push	r31
    469a:	80 91 17 0d 	lds	r24, 0x0D17	; 0x800d17 <rx_buffer_has_message>
    469e:	81 11       	cpse	r24, r1
    46a0:	0e c0       	rjmp	.+28     	; 0x46be <__vector_28+0x38>
    46a2:	e0 91 18 0d 	lds	r30, 0x0D18	; 0x800d18 <rx_buffer_data_len>
    46a6:	eb 34       	cpi	r30, 0x4B	; 75
    46a8:	50 f4       	brcc	.+20     	; 0x46be <__vector_28+0x38>
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	8e 0f       	add	r24, r30
    46ae:	80 93 18 0d 	sts	0x0D18, r24	; 0x800d18 <rx_buffer_data_len>
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    46b8:	e5 50       	subi	r30, 0x05	; 5
    46ba:	f4 4f       	sbci	r31, 0xF4	; 244
    46bc:	80 83       	st	Z, r24
    46be:	80 91 18 0d 	lds	r24, 0x0D18	; 0x800d18 <rx_buffer_data_len>
    46c2:	83 30       	cpi	r24, 0x03	; 3
    46c4:	80 f0       	brcs	.+32     	; 0x46e6 <__vector_28+0x60>
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	fc 01       	movw	r30, r24
    46ca:	e6 50       	subi	r30, 0x06	; 6
    46cc:	f4 4f       	sbci	r31, 0xF4	; 244
    46ce:	20 81       	ld	r18, Z
    46d0:	2a 30       	cpi	r18, 0x0A	; 10
    46d2:	49 f4       	brne	.+18     	; 0x46e6 <__vector_28+0x60>
    46d4:	fc 01       	movw	r30, r24
    46d6:	e7 50       	subi	r30, 0x07	; 7
    46d8:	f4 4f       	sbci	r31, 0xF4	; 244
    46da:	80 81       	ld	r24, Z
    46dc:	8d 30       	cpi	r24, 0x0D	; 13
    46de:	19 f4       	brne	.+6      	; 0x46e6 <__vector_28+0x60>
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	80 93 17 0d 	sts	0x0D17, r24	; 0x800d17 <rx_buffer_has_message>
    46e6:	ff 91       	pop	r31
    46e8:	ef 91       	pop	r30
    46ea:	9f 91       	pop	r25
    46ec:	8f 91       	pop	r24
    46ee:	2f 91       	pop	r18
    46f0:	0f 90       	pop	r0
    46f2:	0f be       	out	0x3f, r0	; 63
    46f4:	0f 90       	pop	r0
    46f6:	1f 90       	pop	r1
    46f8:	18 95       	reti

Disassembly of section .text.UI_HAL_jumper_init:

0000679a <UI_HAL_jumper_init>:

#include "UI_HAL.h"
#include "../../util/bit_operators.h"

void UI_HAL_jumper_init(){
	clear_bit(DDRA, 6);
    679a:	81 b1       	in	r24, 0x01	; 1
    679c:	8f 7b       	andi	r24, 0xBF	; 191
    679e:	81 b9       	out	0x01, r24	; 1
	set_bit(PORTA, 6); //Pull up, default config mode
    67a0:	82 b1       	in	r24, 0x02	; 2
    67a2:	80 64       	ori	r24, 0x40	; 64
    67a4:	82 b9       	out	0x02, r24	; 2
    67a6:	08 95       	ret

Disassembly of section .text.UI_HAL_is_config_mode:

00006952 <UI_HAL_is_config_mode>:
}

bool UI_HAL_is_config_mode(){
	return get_bit(PINA, 6);
    6952:	80 b1       	in	r24, 0x00	; 0
}
    6954:	86 fb       	bst	r24, 6
    6956:	88 27       	eor	r24, r24
    6958:	80 f9       	bld	r24, 0
    695a:	08 95       	ret

Disassembly of section .text.main:

00005970 <main>:
	#ifdef _RUN_TEST
		test_runner();
	#endif // _RUN_TEST
	
	
	PM_HAL_LED_power_init();
    5970:	0e 94 aa 33 	call	0x6754	; 0x6754 <PM_HAL_LED_power_init>
	UI_HAL_jumper_init();
    5974:	0e 94 cd 33 	call	0x679a	; 0x679a <UI_HAL_jumper_init>
	
	while(1)
	{
		
		if(UI_HAL_is_config_mode()){
    5978:	0e 94 a9 34 	call	0x6952	; 0x6952 <UI_HAL_is_config_mode>
    597c:	88 23       	and	r24, r24
    597e:	49 f0       	breq	.+18     	; 0x5992 <main+0x22>
			PM_HAL_LED_power(true);
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <PM_HAL_LED_power>
			CONF_enter();
    5986:	0e 94 55 13 	call	0x26aa	; 0x26aa <CONF_enter>
			PM_HAL_LED_power(false);
    598a:	80 e0       	ldi	r24, 0x00	; 0
    598c:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <PM_HAL_LED_power>
    5990:	02 c0       	rjmp	.+4      	; 0x5996 <main+0x26>
		}else{
			MAINPG_start();
    5992:	0e 94 27 08 	call	0x104e	; 0x104e <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5996:	2f ef       	ldi	r18, 0xFF	; 255
    5998:	81 e1       	ldi	r24, 0x11	; 17
    599a:	9a e7       	ldi	r25, 0x7A	; 122
    599c:	21 50       	subi	r18, 0x01	; 1
    599e:	80 40       	sbci	r24, 0x00	; 0
    59a0:	90 40       	sbci	r25, 0x00	; 0
    59a2:	e1 f7       	brne	.-8      	; 0x599c <main+0x2c>
    59a4:	00 c0       	rjmp	.+0      	; 0x59a6 <main+0x36>
    59a6:	00 00       	nop
    59a8:	e7 cf       	rjmp	.-50     	; 0x5978 <main+0x8>

Disassembly of section .text.calc_ppm_methane:

00003e64 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    3e64:	8f 92       	push	r8
    3e66:	9f 92       	push	r9
    3e68:	af 92       	push	r10
    3e6a:	bf 92       	push	r11
    3e6c:	cf 92       	push	r12
    3e6e:	df 92       	push	r13
    3e70:	ef 92       	push	r14
    3e72:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    3e74:	bc 01       	movw	r22, r24
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	0e 94 a0 21 	call	0x4340	; 0x4340 <__floatunsisf>
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	40 e8       	ldi	r20, 0x80	; 128
    3e84:	59 e3       	ldi	r21, 0x39	; 57
    3e86:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <__mulsf3>
    3e8a:	80 90 dd 0c 	lds	r8, 0x0CDD	; 0x800cdd <Vc>
    3e8e:	90 90 de 0c 	lds	r9, 0x0CDE	; 0x800cde <Vc+0x1>
    3e92:	a0 90 df 0c 	lds	r10, 0x0CDF	; 0x800cdf <Vc+0x2>
    3e96:	b0 90 e0 0c 	lds	r11, 0x0CE0	; 0x800ce0 <Vc+0x3>
    3e9a:	a5 01       	movw	r20, r10
    3e9c:	94 01       	movw	r18, r8
    3e9e:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <__mulsf3>
    3ea2:	6b 01       	movw	r12, r22
    3ea4:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    3ea6:	9b 01       	movw	r18, r22
    3ea8:	ac 01       	movw	r20, r24
    3eaa:	c5 01       	movw	r24, r10
    3eac:	b4 01       	movw	r22, r8
    3eae:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__subsf3>
    3eb2:	a7 01       	movw	r20, r14
    3eb4:	96 01       	movw	r18, r12
    3eb6:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <__divsf3>
    3eba:	20 91 d9 0c 	lds	r18, 0x0CD9	; 0x800cd9 <RRL>
    3ebe:	30 91 da 0c 	lds	r19, 0x0CDA	; 0x800cda <RRL+0x1>
    3ec2:	40 91 db 0c 	lds	r20, 0x0CDB	; 0x800cdb <RRL+0x2>
    3ec6:	50 91 dc 0c 	lds	r21, 0x0CDC	; 0x800cdc <RRL+0x3>
    3eca:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    3ece:	20 91 d5 0c 	lds	r18, 0x0CD5	; 0x800cd5 <PPM_factor>
    3ed2:	30 91 d6 0c 	lds	r19, 0x0CD6	; 0x800cd6 <PPM_factor+0x1>
    3ed6:	40 91 d7 0c 	lds	r20, 0x0CD7	; 0x800cd7 <PPM_factor+0x2>
    3eda:	50 91 d8 0c 	lds	r21, 0x0CD8	; 0x800cd8 <PPM_factor+0x3>
    3ede:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <__mulsf3>
    3ee2:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <__fixunssfsi>
	return PPM;
}
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	ff 90       	pop	r15
    3eea:	ef 90       	pop	r14
    3eec:	df 90       	pop	r13
    3eee:	cf 90       	pop	r12
    3ef0:	bf 90       	pop	r11
    3ef2:	af 90       	pop	r10
    3ef4:	9f 90       	pop	r9
    3ef6:	8f 90       	pop	r8
    3ef8:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

000064d6 <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    64d6:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <cntPowerUpTime>
    64da:	8f 5f       	subi	r24, 0xFF	; 255
    64dc:	80 93 19 0d 	sts	0x0D19, r24	; 0x800d19 <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    64e0:	90 91 1a 0d 	lds	r25, 0x0D1A	; 0x800d1a <_powerUpTime>
    64e4:	89 17       	cp	r24, r25
    64e6:	10 f0       	brcs	.+4      	; 0x64ec <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    64e8:	0e 94 24 35 	call	0x6a48	; 0x6a48 <TC0_HAL_stop>
    64ec:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

00004aca <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    4aca:	cf 93       	push	r28
	_data=data;
    4acc:	50 93 00 0d 	sts	0x0D00, r21	; 0x800d00 <_data+0x1>
    4ad0:	40 93 ff 0c 	sts	0x0CFF, r20	; 0x800cff <_data>
	_nSamples=nSamples;
    4ad4:	70 93 02 0d 	sts	0x0D02, r23	; 0x800d02 <_nSamples+0x1>
    4ad8:	60 93 01 0d 	sts	0x0D01, r22	; 0x800d01 <_nSamples>
	cntSamples=0;
    4adc:	10 92 fe 0c 	sts	0x0CFE, r1	; 0x800cfe <cntSamples+0x1>
    4ae0:	10 92 fd 0c 	sts	0x0CFD, r1	; 0x800cfd <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    4ae4:	6c ec       	ldi	r22, 0xCC	; 204
    4ae6:	7a e2       	ldi	r23, 0x2A	; 42
    4ae8:	0e 94 8c 30 	call	0x6118	; 0x6118 <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <PM_HAL_adc_power>
    4af2:	2f ef       	ldi	r18, 0xFF	; 255
    4af4:	83 ec       	ldi	r24, 0xC3	; 195
    4af6:	99 e0       	ldi	r25, 0x09	; 9
    4af8:	21 50       	subi	r18, 0x01	; 1
    4afa:	80 40       	sbci	r24, 0x00	; 0
    4afc:	90 40       	sbci	r25, 0x00	; 0
    4afe:	e1 f7       	brne	.-8      	; 0x4af8 <ADC_init_sampling+0x2e>
    4b00:	00 c0       	rjmp	.+0      	; 0x4b02 <ADC_init_sampling+0x38>
    4b02:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    4b04:	60 e0       	ldi	r22, 0x00	; 0
    4b06:	8d e4       	ldi	r24, 0x4D	; 77
    4b08:	0e 94 19 2a 	call	0x5432	; 0x5432 <TWI_HAL_start>
    4b0c:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    4b0e:	0e 94 76 33 	call	0x66ec	; 0x66ec <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    4b12:	cc 23       	and	r28, r28
    4b14:	51 f0       	breq	.+20     	; 0x4b2a <ADC_init_sampling+0x60>
		_data=NULL;
    4b16:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <_data+0x1>
    4b1a:	10 92 ff 0c 	sts	0x0CFF, r1	; 0x800cff <_data>
		_nSamples=0;
    4b1e:	10 92 02 0d 	sts	0x0D02, r1	; 0x800d02 <_nSamples+0x1>
    4b22:	10 92 01 0d 	sts	0x0D01, r1	; 0x800d01 <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    4b26:	82 e0       	ldi	r24, 0x02	; 2
    4b28:	01 c0       	rjmp	.+2      	; 0x4b2c <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    4b2a:	80 e0       	ldi	r24, 0x00	; 0
}
    4b2c:	cf 91       	pop	r28
    4b2e:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

00006658 <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    6658:	0e 94 24 35 	call	0x6a48	; 0x6a48 <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    665c:	80 e0       	ldi	r24, 0x00	; 0
    665e:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <PM_HAL_adc_power>
	_data=NULL;
    6662:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <_data+0x1>
    6666:	10 92 ff 0c 	sts	0x0CFF, r1	; 0x800cff <_data>
    666a:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00006378 <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    6378:	40 91 fd 0c 	lds	r20, 0x0CFD	; 0x800cfd <cntSamples>
    637c:	50 91 fe 0c 	lds	r21, 0x0CFE	; 0x800cfe <cntSamples+0x1>
    6380:	20 91 01 0d 	lds	r18, 0x0D01	; 0x800d01 <_nSamples>
    6384:	30 91 02 0d 	lds	r19, 0x0D02	; 0x800d02 <_nSamples+0x1>
    6388:	81 e0       	ldi	r24, 0x01	; 1
    638a:	42 17       	cp	r20, r18
    638c:	53 07       	cpc	r21, r19
    638e:	08 f4       	brcc	.+2      	; 0x6392 <ADC_is_sampling_done+0x1a>
    6390:	80 e0       	ldi	r24, 0x00	; 0
}
    6392:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00004e08 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    4e08:	0f 93       	push	r16
    4e0a:	1f 93       	push	r17
    4e0c:	cf 93       	push	r28
    4e0e:	df 93       	push	r29
    4e10:	00 d0       	rcall	.+0      	; 0x4e12 <ADC_get_value+0xa>
    4e12:	cd b7       	in	r28, 0x3d	; 61
    4e14:	de b7       	in	r29, 0x3e	; 62
    4e16:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    4e18:	8f ef       	ldi	r24, 0xFF	; 255
    4e1a:	9f ef       	ldi	r25, 0xFF	; 255
    4e1c:	f8 01       	movw	r30, r16
    4e1e:	91 83       	std	Z+1, r25	; 0x01
    4e20:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    4e22:	42 e0       	ldi	r20, 0x02	; 2
    4e24:	be 01       	movw	r22, r28
    4e26:	6f 5f       	subi	r22, 0xFF	; 255
    4e28:	7f 4f       	sbci	r23, 0xFF	; 255
    4e2a:	8d e4       	ldi	r24, 0x4D	; 77
    4e2c:	0e 94 57 2e 	call	0x5cae	; 0x5cae <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4e30:	81 11       	cpse	r24, r1
    4e32:	0d c0       	rjmp	.+26     	; 0x4e4e <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    4e34:	89 81       	ldd	r24, Y+1	; 0x01
    4e36:	90 e0       	ldi	r25, 0x00	; 0
    4e38:	98 2f       	mov	r25, r24
    4e3a:	88 27       	eor	r24, r24
    4e3c:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    4e3e:	82 2b       	or	r24, r18
    4e40:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <calc_ppm_methane>
    4e44:	f8 01       	movw	r30, r16
    4e46:	91 83       	std	Z+1, r25	; 0x01
    4e48:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	01 c0       	rjmp	.+2      	; 0x4e50 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    4e50:	0f 90       	pop	r0
    4e52:	0f 90       	pop	r0
    4e54:	df 91       	pop	r29
    4e56:	cf 91       	pop	r28
    4e58:	1f 91       	pop	r17
    4e5a:	0f 91       	pop	r16
    4e5c:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00005598 <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    5598:	80 91 ff 0c 	lds	r24, 0x0CFF	; 0x800cff <_data>
    559c:	90 91 00 0d 	lds	r25, 0x0D00	; 0x800d00 <_data+0x1>
    55a0:	20 91 fd 0c 	lds	r18, 0x0CFD	; 0x800cfd <cntSamples>
    55a4:	30 91 fe 0c 	lds	r19, 0x0CFE	; 0x800cfe <cntSamples+0x1>
    55a8:	a9 01       	movw	r20, r18
    55aa:	4f 5f       	subi	r20, 0xFF	; 255
    55ac:	5f 4f       	sbci	r21, 0xFF	; 255
    55ae:	50 93 fe 0c 	sts	0x0CFE, r21	; 0x800cfe <cntSamples+0x1>
    55b2:	40 93 fd 0c 	sts	0x0CFD, r20	; 0x800cfd <cntSamples>
    55b6:	22 0f       	add	r18, r18
    55b8:	33 1f       	adc	r19, r19
    55ba:	82 0f       	add	r24, r18
    55bc:	93 1f       	adc	r25, r19
    55be:	0e 94 04 27 	call	0x4e08	; 0x4e08 <ADC_get_value>
	if(cntSamples>=_nSamples){
    55c2:	20 91 fd 0c 	lds	r18, 0x0CFD	; 0x800cfd <cntSamples>
    55c6:	30 91 fe 0c 	lds	r19, 0x0CFE	; 0x800cfe <cntSamples+0x1>
    55ca:	80 91 01 0d 	lds	r24, 0x0D01	; 0x800d01 <_nSamples>
    55ce:	90 91 02 0d 	lds	r25, 0x0D02	; 0x800d02 <_nSamples+0x1>
    55d2:	28 17       	cp	r18, r24
    55d4:	39 07       	cpc	r19, r25
    55d6:	10 f0       	brcs	.+4      	; 0x55dc <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    55d8:	0e 94 24 35 	call	0x6a48	; 0x6a48 <TC0_HAL_stop>
    55dc:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

0000695c <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    695c:	0e 94 04 35 	call	0x6a08	; 0x6a08 <TC0_HAL_start>
	vect_ADC_do_sample();
    6960:	0e 94 cc 2a 	call	0x5598	; 0x5598 <vect_ADC_do_sample>
    6964:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

000062a6 <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    62a6:	80 93 1a 0d 	sts	0x0D1A, r24	; 0x800d1a <_powerUpTime>
	cntPowerUpTime=0;
    62aa:	10 92 19 0d 	sts	0x0D19, r1	; 0x800d19 <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    62ae:	81 e0       	ldi	r24, 0x01	; 1
    62b0:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <PM_HAL_meth_power>
	
	//Setup timer
	TC0_HAL_init(ADC_HEAT_TIME_INTERVAL, &vect_ADC_heat_timeout);
    62b4:	6b e6       	ldi	r22, 0x6B	; 107
    62b6:	72 e3       	ldi	r23, 0x32	; 50
    62b8:	8c e3       	ldi	r24, 0x3C	; 60
    62ba:	0e 94 8c 30 	call	0x6118	; 0x6118 <TC0_HAL_init>
	TC0_HAL_start();
    62be:	0e 94 04 35 	call	0x6a08	; 0x6a08 <TC0_HAL_start>
    62c2:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

000069c0 <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    69c0:	80 e0       	ldi	r24, 0x00	; 0
    69c2:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <PM_HAL_meth_power>
    69c6:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00006692 <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    6692:	20 91 19 0d 	lds	r18, 0x0D19	; 0x800d19 <cntPowerUpTime>
    6696:	90 91 1a 0d 	lds	r25, 0x0D1A	; 0x800d1a <_powerUpTime>
    669a:	81 e0       	ldi	r24, 0x01	; 1
    669c:	29 17       	cp	r18, r25
    669e:	08 f4       	brcc	.+2      	; 0x66a2 <ADC_meth_sens_ready+0x10>
    66a0:	80 e0       	ldi	r24, 0x00	; 0
}
    66a2:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

000057be <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    57be:	ef 92       	push	r14
    57c0:	ff 92       	push	r15
    57c2:	0f 93       	push	r16
    57c4:	1f 93       	push	r17
	Vc=Vcc;
    57c6:	60 93 dd 0c 	sts	0x0CDD, r22	; 0x800cdd <Vc>
    57ca:	70 93 de 0c 	sts	0x0CDE, r23	; 0x800cde <Vc+0x1>
    57ce:	80 93 df 0c 	sts	0x0CDF, r24	; 0x800cdf <Vc+0x2>
    57d2:	90 93 e0 0c 	sts	0x0CE0, r25	; 0x800ce0 <Vc+0x3>
	RRL=Rrl;
    57d6:	20 93 d9 0c 	sts	0x0CD9, r18	; 0x800cd9 <RRL>
    57da:	30 93 da 0c 	sts	0x0CDA, r19	; 0x800cda <RRL+0x1>
    57de:	40 93 db 0c 	sts	0x0CDB, r20	; 0x800cdb <RRL+0x2>
    57e2:	50 93 dc 0c 	sts	0x0CDC, r21	; 0x800cdc <RRL+0x3>
	PPM_factor=PPMfactor;
    57e6:	e0 92 d5 0c 	sts	0x0CD5, r14	; 0x800cd5 <PPM_factor>
    57ea:	f0 92 d6 0c 	sts	0x0CD6, r15	; 0x800cd6 <PPM_factor+0x1>
    57ee:	00 93 d7 0c 	sts	0x0CD7, r16	; 0x800cd7 <PPM_factor+0x2>
    57f2:	10 93 d8 0c 	sts	0x0CD8, r17	; 0x800cd8 <PPM_factor+0x3>
}
    57f6:	1f 91       	pop	r17
    57f8:	0f 91       	pop	r16
    57fa:	ff 90       	pop	r15
    57fc:	ef 90       	pop	r14
    57fe:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00006536 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    6536:	60 e4       	ldi	r22, 0x40	; 64
    6538:	70 e0       	ldi	r23, 0x00	; 0
    653a:	80 e8       	ldi	r24, 0x80	; 128
    653c:	0e 94 6d 33 	call	0x66da	; 0x66da <eeprom_read_byte>
    6540:	91 e0       	ldi	r25, 0x01	; 1
    6542:	81 11       	cpse	r24, r1
    6544:	01 c0       	rjmp	.+2      	; 0x6548 <EM_has_deveui+0x12>
    6546:	90 e0       	ldi	r25, 0x00	; 0
}
    6548:	89 2f       	mov	r24, r25
    654a:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

0000654c <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    654c:	61 e4       	ldi	r22, 0x41	; 65
    654e:	70 e0       	ldi	r23, 0x00	; 0
    6550:	80 e8       	ldi	r24, 0x80	; 128
    6552:	0e 94 6d 33 	call	0x66da	; 0x66da <eeprom_read_byte>
    6556:	91 e0       	ldi	r25, 0x01	; 1
    6558:	81 11       	cpse	r24, r1
    655a:	01 c0       	rjmp	.+2      	; 0x655e <EM_has_appeui+0x12>
    655c:	90 e0       	ldi	r25, 0x00	; 0
}
    655e:	89 2f       	mov	r24, r25
    6560:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00006562 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    6562:	62 e4       	ldi	r22, 0x42	; 66
    6564:	70 e0       	ldi	r23, 0x00	; 0
    6566:	80 e8       	ldi	r24, 0x80	; 128
    6568:	0e 94 6d 33 	call	0x66da	; 0x66da <eeprom_read_byte>
    656c:	91 e0       	ldi	r25, 0x01	; 1
    656e:	81 11       	cpse	r24, r1
    6570:	01 c0       	rjmp	.+2      	; 0x6574 <EM_has_appkey+0x12>
    6572:	90 e0       	ldi	r25, 0x00	; 0
}
    6574:	89 2f       	mov	r24, r25
    6576:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

000059aa <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    59aa:	cf 92       	push	r12
    59ac:	df 92       	push	r13
    59ae:	ef 92       	push	r14
    59b0:	6b 01       	movw	r12, r22
    59b2:	e8 2e       	mov	r14, r24
    59b4:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    59b8:	40 97       	sbiw	r24, 0x10	; 16
    59ba:	79 f4       	brne	.+30     	; 0x59da <EM_set_deveui+0x30>
    59bc:	20 e1       	ldi	r18, 0x10	; 16
    59be:	30 e0       	ldi	r19, 0x00	; 0
    59c0:	40 e0       	ldi	r20, 0x00	; 0
    59c2:	50 e0       	ldi	r21, 0x00	; 0
    59c4:	8e 2d       	mov	r24, r14
    59c6:	b6 01       	movw	r22, r12
    59c8:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <eeprom_update_block>
    59cc:	61 e0       	ldi	r22, 0x01	; 1
    59ce:	80 e4       	ldi	r24, 0x40	; 64
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <eeprom_update_byte>
    59d6:	81 e0       	ldi	r24, 0x01	; 1
    59d8:	01 c0       	rjmp	.+2      	; 0x59dc <EM_set_deveui+0x32>
    59da:	80 e0       	ldi	r24, 0x00	; 0
    59dc:	ef 90       	pop	r14
    59de:	df 90       	pop	r13
    59e0:	cf 90       	pop	r12
    59e2:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00005da6 <EM_get_deveui>:
    5da6:	0f 93       	push	r16
    5da8:	1f 93       	push	r17
    5daa:	cf 93       	push	r28
    5dac:	8c 01       	movw	r16, r24
    5dae:	0e 94 9b 32 	call	0x6536	; 0x6536 <EM_has_deveui>
    5db2:	c8 2f       	mov	r28, r24
    5db4:	88 23       	and	r24, r24
    5db6:	51 f0       	breq	.+20     	; 0x5dcc <EM_get_deveui+0x26>
    5db8:	20 e1       	ldi	r18, 0x10	; 16
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	40 e0       	ldi	r20, 0x00	; 0
    5dbe:	50 e0       	ldi	r21, 0x00	; 0
    5dc0:	60 e0       	ldi	r22, 0x00	; 0
    5dc2:	c8 01       	movw	r24, r16
    5dc4:	0e 94 68 30 	call	0x60d0	; 0x60d0 <eeprom_read_block>
    5dc8:	f8 01       	movw	r30, r16
    5dca:	10 8a       	std	Z+16, r1	; 0x10
    5dcc:	8c 2f       	mov	r24, r28
    5dce:	cf 91       	pop	r28
    5dd0:	1f 91       	pop	r17
    5dd2:	0f 91       	pop	r16
    5dd4:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

000059e4 <EM_set_appeui>:
    59e4:	cf 92       	push	r12
    59e6:	df 92       	push	r13
    59e8:	ef 92       	push	r14
    59ea:	6b 01       	movw	r12, r22
    59ec:	e8 2e       	mov	r14, r24
    59ee:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    59f2:	40 97       	sbiw	r24, 0x10	; 16
    59f4:	79 f4       	brne	.+30     	; 0x5a14 <EM_set_appeui+0x30>
    59f6:	20 e1       	ldi	r18, 0x10	; 16
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	40 e1       	ldi	r20, 0x10	; 16
    59fc:	50 e0       	ldi	r21, 0x00	; 0
    59fe:	8e 2d       	mov	r24, r14
    5a00:	b6 01       	movw	r22, r12
    5a02:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <eeprom_update_block>
    5a06:	61 e0       	ldi	r22, 0x01	; 1
    5a08:	81 e4       	ldi	r24, 0x41	; 65
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <eeprom_update_byte>
    5a10:	81 e0       	ldi	r24, 0x01	; 1
    5a12:	01 c0       	rjmp	.+2      	; 0x5a16 <EM_set_appeui+0x32>
    5a14:	80 e0       	ldi	r24, 0x00	; 0
    5a16:	ef 90       	pop	r14
    5a18:	df 90       	pop	r13
    5a1a:	cf 90       	pop	r12
    5a1c:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00005dd6 <EM_get_appeui>:
    5dd6:	0f 93       	push	r16
    5dd8:	1f 93       	push	r17
    5dda:	cf 93       	push	r28
    5ddc:	8c 01       	movw	r16, r24
    5dde:	0e 94 a6 32 	call	0x654c	; 0x654c <EM_has_appeui>
    5de2:	c8 2f       	mov	r28, r24
    5de4:	88 23       	and	r24, r24
    5de6:	51 f0       	breq	.+20     	; 0x5dfc <EM_get_appeui+0x26>
    5de8:	20 e1       	ldi	r18, 0x10	; 16
    5dea:	30 e0       	ldi	r19, 0x00	; 0
    5dec:	40 e1       	ldi	r20, 0x10	; 16
    5dee:	50 e0       	ldi	r21, 0x00	; 0
    5df0:	60 e0       	ldi	r22, 0x00	; 0
    5df2:	c8 01       	movw	r24, r16
    5df4:	0e 94 68 30 	call	0x60d0	; 0x60d0 <eeprom_read_block>
    5df8:	f8 01       	movw	r30, r16
    5dfa:	10 8a       	std	Z+16, r1	; 0x10
    5dfc:	8c 2f       	mov	r24, r28
    5dfe:	cf 91       	pop	r28
    5e00:	1f 91       	pop	r17
    5e02:	0f 91       	pop	r16
    5e04:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00005a1e <EM_set_appkey>:
    5a1e:	cf 92       	push	r12
    5a20:	df 92       	push	r13
    5a22:	ef 92       	push	r14
    5a24:	6b 01       	movw	r12, r22
    5a26:	e8 2e       	mov	r14, r24
    5a28:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    5a2c:	80 97       	sbiw	r24, 0x20	; 32
    5a2e:	79 f4       	brne	.+30     	; 0x5a4e <EM_set_appkey+0x30>
    5a30:	20 e2       	ldi	r18, 0x20	; 32
    5a32:	30 e0       	ldi	r19, 0x00	; 0
    5a34:	40 e2       	ldi	r20, 0x20	; 32
    5a36:	50 e0       	ldi	r21, 0x00	; 0
    5a38:	8e 2d       	mov	r24, r14
    5a3a:	b6 01       	movw	r22, r12
    5a3c:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <eeprom_update_block>
    5a40:	61 e0       	ldi	r22, 0x01	; 1
    5a42:	82 e4       	ldi	r24, 0x42	; 66
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <eeprom_update_byte>
    5a4a:	81 e0       	ldi	r24, 0x01	; 1
    5a4c:	01 c0       	rjmp	.+2      	; 0x5a50 <EM_set_appkey+0x32>
    5a4e:	80 e0       	ldi	r24, 0x00	; 0
    5a50:	ef 90       	pop	r14
    5a52:	df 90       	pop	r13
    5a54:	cf 90       	pop	r12
    5a56:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00005e06 <EM_get_appkey>:
    5e06:	0f 93       	push	r16
    5e08:	1f 93       	push	r17
    5e0a:	cf 93       	push	r28
    5e0c:	8c 01       	movw	r16, r24
    5e0e:	0e 94 b1 32 	call	0x6562	; 0x6562 <EM_has_appkey>
    5e12:	c8 2f       	mov	r28, r24
    5e14:	88 23       	and	r24, r24
    5e16:	51 f0       	breq	.+20     	; 0x5e2c <EM_get_appkey+0x26>
    5e18:	20 e2       	ldi	r18, 0x20	; 32
    5e1a:	30 e0       	ldi	r19, 0x00	; 0
    5e1c:	40 e2       	ldi	r20, 0x20	; 32
    5e1e:	50 e0       	ldi	r21, 0x00	; 0
    5e20:	60 e0       	ldi	r22, 0x00	; 0
    5e22:	c8 01       	movw	r24, r16
    5e24:	0e 94 68 30 	call	0x60d0	; 0x60d0 <eeprom_read_block>
    5e28:	f8 01       	movw	r30, r16
    5e2a:	10 a2       	std	Z+32, r1	; 0x20
    5e2c:	8c 2f       	mov	r24, r28
    5e2e:	cf 91       	pop	r28
    5e30:	1f 91       	pop	r17
    5e32:	0f 91       	pop	r16
    5e34:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

000067a8 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    67a8:	ab 01       	movw	r20, r22
    67aa:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    67ac:	83 e4       	ldi	r24, 0x43	; 67
    67ae:	90 e0       	ldi	r25, 0x00	; 0
    67b0:	0e 94 8f 32 	call	0x651e	; 0x651e <eeprom_update_dword>
    67b4:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

000062c4 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    62c4:	cf 93       	push	r28
    62c6:	df 93       	push	r29
    62c8:	ec 01       	movw	r28, r24
    62ca:	63 e4       	ldi	r22, 0x43	; 67
    62cc:	70 e0       	ldi	r23, 0x00	; 0
    62ce:	80 e0       	ldi	r24, 0x00	; 0
    62d0:	0e 94 21 34 	call	0x6842	; 0x6842 <eeprom_read_dword>
    62d4:	68 83       	st	Y, r22
    62d6:	79 83       	std	Y+1, r23	; 0x01
    62d8:	8a 83       	std	Y+2, r24	; 0x02
    62da:	9b 83       	std	Y+3, r25	; 0x03
    62dc:	df 91       	pop	r29
    62de:	cf 91       	pop	r28
    62e0:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

000067b6 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    67b6:	ab 01       	movw	r20, r22
    67b8:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    67ba:	87 e4       	ldi	r24, 0x47	; 71
    67bc:	90 e0       	ldi	r25, 0x00	; 0
    67be:	0e 94 8f 32 	call	0x651e	; 0x651e <eeprom_update_dword>
    67c2:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

000062e2 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    62e2:	cf 93       	push	r28
    62e4:	df 93       	push	r29
    62e6:	ec 01       	movw	r28, r24
    62e8:	67 e4       	ldi	r22, 0x47	; 71
    62ea:	70 e0       	ldi	r23, 0x00	; 0
    62ec:	80 e0       	ldi	r24, 0x00	; 0
    62ee:	0e 94 21 34 	call	0x6842	; 0x6842 <eeprom_read_dword>
    62f2:	68 83       	st	Y, r22
    62f4:	79 83       	std	Y+1, r23	; 0x01
    62f6:	8a 83       	std	Y+2, r24	; 0x02
    62f8:	9b 83       	std	Y+3, r25	; 0x03
    62fa:	df 91       	pop	r29
    62fc:	cf 91       	pop	r28
    62fe:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

000067c4 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    67c4:	ab 01       	movw	r20, r22
    67c6:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    67c8:	8b e4       	ldi	r24, 0x4B	; 75
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	0e 94 8f 32 	call	0x651e	; 0x651e <eeprom_update_dword>
    67d0:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00006300 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6300:	cf 93       	push	r28
    6302:	df 93       	push	r29
    6304:	ec 01       	movw	r28, r24
    6306:	6b e4       	ldi	r22, 0x4B	; 75
    6308:	70 e0       	ldi	r23, 0x00	; 0
    630a:	80 e0       	ldi	r24, 0x00	; 0
    630c:	0e 94 21 34 	call	0x6842	; 0x6842 <eeprom_read_dword>
    6310:	68 83       	st	Y, r22
    6312:	79 83       	std	Y+1, r23	; 0x01
    6314:	8a 83       	std	Y+2, r24	; 0x02
    6316:	9b 83       	std	Y+3, r25	; 0x03
    6318:	df 91       	pop	r29
    631a:	cf 91       	pop	r28
    631c:	08 95       	ret

Disassembly of section .text.EM_set_collections:

000067d2 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    67d2:	24 2f       	mov	r18, r20
    67d4:	30 e0       	ldi	r19, 0x00	; 0
    67d6:	44 e6       	ldi	r20, 0x64	; 100
    67d8:	50 e0       	ldi	r21, 0x00	; 0
    67da:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <eeprom_update_block>
    67de:	08 95       	ret

Disassembly of section .text.EM_get_collections:

000066fc <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    66fc:	26 2f       	mov	r18, r22
    66fe:	30 e0       	ldi	r19, 0x00	; 0
    6700:	44 e6       	ldi	r20, 0x64	; 100
    6702:	50 e0       	ldi	r21, 0x00	; 0
    6704:	60 e0       	ldi	r22, 0x00	; 0
    6706:	0e 94 68 30 	call	0x60d0	; 0x60d0 <eeprom_read_block>
    670a:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

00006876 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    6876:	68 2f       	mov	r22, r24
    6878:	8f e4       	ldi	r24, 0x4F	; 79
    687a:	90 e0       	ldi	r25, 0x00	; 0
    687c:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <eeprom_update_byte>
    6880:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00006882 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    6882:	6f e4       	ldi	r22, 0x4F	; 79
    6884:	70 e0       	ldi	r23, 0x00	; 0
    6886:	80 e0       	ldi	r24, 0x00	; 0
    6888:	0e 94 6d 33 	call	0x66da	; 0x66da <eeprom_read_byte>
}
    688c:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

0000688e <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    688e:	bc 01       	movw	r22, r24
    6890:	80 e5       	ldi	r24, 0x50	; 80
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	0e 94 8f 34 	call	0x691e	; 0x691e <eeprom_update_word>
    6898:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

0000689a <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    689a:	60 e5       	ldi	r22, 0x50	; 80
    689c:	70 e0       	ldi	r23, 0x00	; 0
    689e:	80 e0       	ldi	r24, 0x00	; 0
    68a0:	0e 94 28 34 	call	0x6850	; 0x6850 <eeprom_read_word>
}
    68a4:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

000068a6 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    68a6:	68 2f       	mov	r22, r24
    68a8:	82 e5       	ldi	r24, 0x52	; 82
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <eeprom_update_byte>
    68b0:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

000068b2 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    68b2:	62 e5       	ldi	r22, 0x52	; 82
    68b4:	70 e0       	ldi	r23, 0x00	; 0
    68b6:	80 e0       	ldi	r24, 0x00	; 0
    68b8:	0e 94 6d 33 	call	0x66da	; 0x66da <eeprom_read_byte>
}
    68bc:	08 95       	ret

Disassembly of section .text.EM_set_group_id:

000068be <EM_set_group_id>:

void EM_set_group_id(uint8_t groupId){
	eeprom_update_byte((uint8_t *) EEPROM_GROUP_ID_ADDR, groupId);
    68be:	68 2f       	mov	r22, r24
    68c0:	83 e6       	ldi	r24, 0x63	; 99
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <eeprom_update_byte>
    68c8:	08 95       	ret

Disassembly of section .text.EM_get_group_id:

000068ca <EM_get_group_id>:
}

uint8_t EM_get_group_id(){
	return eeprom_read_byte((const uint8_t *) EEPROM_GROUP_ID_ADDR);
    68ca:	63 e6       	ldi	r22, 0x63	; 99
    68cc:	70 e0       	ldi	r23, 0x00	; 0
    68ce:	80 e0       	ldi	r24, 0x00	; 0
    68d0:	0e 94 6d 33 	call	0x66da	; 0x66da <eeprom_read_byte>
    68d4:	08 95       	ret

Disassembly of section .text.cb_blink:

00006a14 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    6a14:	0e 94 cc 34 	call	0x6998	; 0x6998 <PM_HAL_LED_toggle>
    6a18:	08 95       	ret

Disassembly of section .text.blink:

00005220 <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    5220:	cf 93       	push	r28
    5222:	df 93       	push	r29
    5224:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    5226:	c0 e0       	ldi	r28, 0x00	; 0
    5228:	19 c0       	rjmp	.+50     	; 0x525c <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    522a:	80 e0       	ldi	r24, 0x00	; 0
    522c:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <PM_HAL_LED_power>
    5230:	2f ef       	ldi	r18, 0xFF	; 255
    5232:	82 e5       	ldi	r24, 0x52	; 82
    5234:	97 e0       	ldi	r25, 0x07	; 7
    5236:	21 50       	subi	r18, 0x01	; 1
    5238:	80 40       	sbci	r24, 0x00	; 0
    523a:	90 40       	sbci	r25, 0x00	; 0
    523c:	e1 f7       	brne	.-8      	; 0x5236 <blink+0x16>
    523e:	00 c0       	rjmp	.+0      	; 0x5240 <blink+0x20>
    5240:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <PM_HAL_LED_power>
    5248:	2f ef       	ldi	r18, 0xFF	; 255
    524a:	82 e5       	ldi	r24, 0x52	; 82
    524c:	97 e0       	ldi	r25, 0x07	; 7
    524e:	21 50       	subi	r18, 0x01	; 1
    5250:	80 40       	sbci	r24, 0x00	; 0
    5252:	90 40       	sbci	r25, 0x00	; 0
    5254:	e1 f7       	brne	.-8      	; 0x524e <blink+0x2e>
    5256:	00 c0       	rjmp	.+0      	; 0x5258 <blink+0x38>
    5258:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    525a:	cf 5f       	subi	r28, 0xFF	; 255
    525c:	cd 17       	cp	r28, r29
    525e:	28 f3       	brcs	.-54     	; 0x522a <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    5260:	80 e0       	ldi	r24, 0x00	; 0
    5262:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <PM_HAL_LED_power>
}
    5266:	df 91       	pop	r29
    5268:	cf 91       	pop	r28
    526a:	08 95       	ret

Disassembly of section .text.err_code:

00005a58 <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    5a58:	cf 93       	push	r28
    5a5a:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    5a5c:	81 e0       	ldi	r24, 0x01	; 1
    5a5e:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <PM_HAL_LED_power>
    5a62:	2f ef       	ldi	r18, 0xFF	; 255
    5a64:	83 ed       	ldi	r24, 0xD3	; 211
    5a66:	90 e3       	ldi	r25, 0x30	; 48
    5a68:	21 50       	subi	r18, 0x01	; 1
    5a6a:	80 40       	sbci	r24, 0x00	; 0
    5a6c:	90 40       	sbci	r25, 0x00	; 0
    5a6e:	e1 f7       	brne	.-8      	; 0x5a68 <err_code+0x10>
    5a70:	00 c0       	rjmp	.+0      	; 0x5a72 <err_code+0x1a>
    5a72:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    5a74:	8c 2f       	mov	r24, r28
    5a76:	0e 94 10 29 	call	0x5220	; 0x5220 <blink>
    5a7a:	2f ef       	ldi	r18, 0xFF	; 255
    5a7c:	89 e6       	ldi	r24, 0x69	; 105
    5a7e:	98 e1       	ldi	r25, 0x18	; 24
    5a80:	21 50       	subi	r18, 0x01	; 1
    5a82:	80 40       	sbci	r24, 0x00	; 0
    5a84:	90 40       	sbci	r25, 0x00	; 0
    5a86:	e1 f7       	brne	.-8      	; 0x5a80 <err_code+0x28>
    5a88:	00 c0       	rjmp	.+0      	; 0x5a8a <err_code+0x32>
    5a8a:	00 00       	nop
	_delay_ms(1000);
}
    5a8c:	cf 91       	pop	r28
    5a8e:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

000067e0 <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    67e0:	8a e0       	ldi	r24, 0x0A	; 10
    67e2:	95 e3       	ldi	r25, 0x35	; 53
    67e4:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <TC2_HAL_subscribe>
    67e8:	80 93 1b 0d 	sts	0x0D1B, r24	; 0x800d1b <cbPointer>
    67ec:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

0000670c <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    670c:	80 91 1b 0d 	lds	r24, 0x0D1B	; 0x800d1b <cbPointer>
    6710:	0e 94 9b 2c 	call	0x5936	; 0x5936 <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    6714:	80 e0       	ldi	r24, 0x00	; 0
    6716:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <PM_HAL_LED_power>
    671a:	08 95       	ret

Disassembly of section .text.LED_join_success:

00005842 <LED_join_success>:
}

void LED_join_success(){
    5842:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    5844:	c0 e0       	ldi	r28, 0x00	; 0
    5846:	19 c0       	rjmp	.+50     	; 0x587a <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    5848:	81 e0       	ldi	r24, 0x01	; 1
    584a:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <PM_HAL_LED_power>
    584e:	2f ef       	ldi	r18, 0xFF	; 255
    5850:	80 e7       	ldi	r24, 0x70	; 112
    5852:	92 e0       	ldi	r25, 0x02	; 2
    5854:	21 50       	subi	r18, 0x01	; 1
    5856:	80 40       	sbci	r24, 0x00	; 0
    5858:	90 40       	sbci	r25, 0x00	; 0
    585a:	e1 f7       	brne	.-8      	; 0x5854 <LED_join_success+0x12>
    585c:	00 c0       	rjmp	.+0      	; 0x585e <LED_join_success+0x1c>
    585e:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    5860:	80 e0       	ldi	r24, 0x00	; 0
    5862:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <PM_HAL_LED_power>
    5866:	2f ef       	ldi	r18, 0xFF	; 255
    5868:	80 e7       	ldi	r24, 0x70	; 112
    586a:	92 e0       	ldi	r25, 0x02	; 2
    586c:	21 50       	subi	r18, 0x01	; 1
    586e:	80 40       	sbci	r24, 0x00	; 0
    5870:	90 40       	sbci	r25, 0x00	; 0
    5872:	e1 f7       	brne	.-8      	; 0x586c <LED_join_success+0x2a>
    5874:	00 c0       	rjmp	.+0      	; 0x5876 <LED_join_success+0x34>
    5876:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    5878:	cf 5f       	subi	r28, 0xFF	; 255
    587a:	ca 30       	cpi	r28, 0x0A	; 10
    587c:	28 f3       	brcs	.-54     	; 0x5848 <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    587e:	cf 91       	pop	r28
    5880:	08 95       	ret

Disassembly of section .text.LED_join_denied:

000069c8 <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    69c8:	83 e0       	ldi	r24, 0x03	; 3
    69ca:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <err_code>
    69ce:	08 95       	ret

Disassembly of section .text.LED_conf_err:

000069d0 <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    69d0:	85 e0       	ldi	r24, 0x05	; 5
    69d2:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <err_code>
    69d6:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

000069d8 <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    69d8:	87 e0       	ldi	r24, 0x07	; 7
    69da:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <err_code>
    69de:	08 95       	ret

Disassembly of section .text.parse_err:

00004d58 <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    4d58:	cf 92       	push	r12
    4d5a:	df 92       	push	r13
    4d5c:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    4d5e:	6c 01       	movw	r12, r24
    4d60:	20 e8       	ldi	r18, 0x80	; 128
    4d62:	e2 2e       	mov	r14, r18
    4d64:	2e e4       	ldi	r18, 0x4E	; 78
    4d66:	38 e0       	ldi	r19, 0x08	; 8
    4d68:	40 e0       	ldi	r20, 0x00	; 0
    4d6a:	8e 2d       	mov	r24, r14
    4d6c:	b6 01       	movw	r22, r12
    4d6e:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    4d72:	89 2b       	or	r24, r25
    4d74:	a1 f0       	breq	.+40     	; 0x4d9e <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    4d76:	29 e5       	ldi	r18, 0x59	; 89
    4d78:	38 e0       	ldi	r19, 0x08	; 8
    4d7a:	40 e0       	ldi	r20, 0x00	; 0
    4d7c:	8e 2d       	mov	r24, r14
    4d7e:	b6 01       	movw	r22, r12
    4d80:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    4d84:	89 2b       	or	r24, r25
    4d86:	69 f0       	breq	.+26     	; 0x4da2 <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    4d88:	20 e6       	ldi	r18, 0x60	; 96
    4d8a:	38 e0       	ldi	r19, 0x08	; 8
    4d8c:	40 e0       	ldi	r20, 0x00	; 0
    4d8e:	8e 2d       	mov	r24, r14
    4d90:	b6 01       	movw	r22, r12
    4d92:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    4d96:	89 2b       	or	r24, r25
    4d98:	31 f4       	brne	.+12     	; 0x4da6 <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    4d9a:	83 e0       	ldi	r24, 0x03	; 3
    4d9c:	05 c0       	rjmp	.+10     	; 0x4da8 <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    4d9e:	82 e0       	ldi	r24, 0x02	; 2
    4da0:	03 c0       	rjmp	.+6      	; 0x4da8 <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    4da2:	82 e0       	ldi	r24, 0x02	; 2
    4da4:	01 c0       	rjmp	.+2      	; 0x4da8 <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    4da6:	81 e0       	ldi	r24, 0x01	; 1
}
    4da8:	ef 90       	pop	r14
    4daa:	df 90       	pop	r13
    4dac:	cf 90       	pop	r12
    4dae:	08 95       	ret

Disassembly of section .text.JN_join_network:

000016b2 <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
    16b2:	af 92       	push	r10
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	28 97       	sbiw	r28, 0x08	; 8
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	5c 01       	movw	r10, r24
    16d6:	6b 01       	movw	r12, r22
    16d8:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
    16da:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    16dc:	e1 2f       	mov	r30, r17
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	ed 30       	cpi	r30, 0x0D	; 13
    16e2:	f1 05       	cpc	r31, r1
    16e4:	d8 f7       	brcc	.-10     	; 0x16dc <JN_join_network+0x2a>
    16e6:	e2 5c       	subi	r30, 0xC2	; 194
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	0c 94 89 34 	jmp	0x6912	; 0x6912 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
    16ee:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <rn2483_reset_active>
    16f2:	2f ef       	ldi	r18, 0xFF	; 255
    16f4:	89 e6       	ldi	r24, 0x69	; 105
    16f6:	98 e1       	ldi	r25, 0x18	; 24
    16f8:	21 50       	subi	r18, 0x01	; 1
    16fa:	80 40       	sbci	r24, 0x00	; 0
    16fc:	90 40       	sbci	r25, 0x00	; 0
    16fe:	e1 f7       	brne	.-8      	; 0x16f8 <JN_join_network+0x46>
    1700:	00 c0       	rjmp	.+0      	; 0x1702 <JN_join_network+0x50>
    1702:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
    1704:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <rn2483_reset_deactive>
				
				util_set_pending_states(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
    1708:	4c e0       	ldi	r20, 0x0C	; 12
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	ce 01       	movw	r24, r28
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_BEGINS_WITH, RN2483);
    1718:	2e e6       	ldi	r18, 0x6E	; 110
    171a:	38 e0       	ldi	r19, 0x08	; 8
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	ce 01       	movw	r24, r28
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				
				state=JN_WAIT_FOR_INCOMMING;
    1728:	11 e0       	ldi	r17, 0x01	; 1
			break;
    172a:	d8 cf       	rjmp	.-80     	; 0x16dc <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
    172c:	45 e7       	ldi	r20, 0x75	; 117
    172e:	58 e0       	ldi	r21, 0x08	; 8
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	80 e9       	ldi	r24, 0x90	; 144
    1734:	92 e0       	ldi	r25, 0x02	; 2
    1736:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    173a:	60 e9       	ldi	r22, 0x90	; 144
    173c:	72 e0       	ldi	r23, 0x02	; 2
    173e:	80 e8       	ldi	r24, 0x80	; 128
    1740:	0e 94 e6 20 	call	0x41cc	; 0x41cc <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
    1744:	4c e0       	ldi	r20, 0x0C	; 12
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	63 e0       	ldi	r22, 0x03	; 3
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	ce 01       	movw	r24, r28
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1754:	23 e8       	ldi	r18, 0x83	; 131
    1756:	38 e0       	ldi	r19, 0x08	; 8
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	ce 01       	movw	r24, r28
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1764:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1766:	ba cf       	rjmp	.-140    	; 0x16dc <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
    1768:	b5 01       	movw	r22, r10
    176a:	80 e9       	ldi	r24, 0x90	; 144
    176c:	92 e0       	ldi	r25, 0x02	; 2
    176e:	0e 94 3d 2a 	call	0x547a	; 0x547a <mac_set_deveui>
				attach_ending(lm_msg);
    1772:	80 e9       	ldi	r24, 0x90	; 144
    1774:	92 e0       	ldi	r25, 0x02	; 2
    1776:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <attach_ending>
				uart0_hal_send_string(lm_msg);
    177a:	60 e9       	ldi	r22, 0x90	; 144
    177c:	72 e0       	ldi	r23, 0x02	; 2
    177e:	80 e8       	ldi	r24, 0x80	; 128
    1780:	0e 94 e6 20 	call	0x41cc	; 0x41cc <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
    1784:	4c e0       	ldi	r20, 0x0C	; 12
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	64 e0       	ldi	r22, 0x04	; 4
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	ce 01       	movw	r24, r28
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1794:	23 e8       	ldi	r18, 0x83	; 131
    1796:	38 e0       	ldi	r19, 0x08	; 8
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	ce 01       	movw	r24, r28
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    17a4:	11 e0       	ldi	r17, 0x01	; 1
			break;
    17a6:	9a cf       	rjmp	.-204    	; 0x16dc <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
    17a8:	b7 01       	movw	r22, r14
    17aa:	80 e9       	ldi	r24, 0x90	; 144
    17ac:	92 e0       	ldi	r25, 0x02	; 2
    17ae:	0e 94 85 2a 	call	0x550a	; 0x550a <mac_set_appkey>
				attach_ending(lm_msg);
    17b2:	80 e9       	ldi	r24, 0x90	; 144
    17b4:	92 e0       	ldi	r25, 0x02	; 2
    17b6:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <attach_ending>
				uart0_hal_send_string(lm_msg);
    17ba:	60 e9       	ldi	r22, 0x90	; 144
    17bc:	72 e0       	ldi	r23, 0x02	; 2
    17be:	80 e8       	ldi	r24, 0x80	; 128
    17c0:	0e 94 e6 20 	call	0x41cc	; 0x41cc <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
    17c4:	4c e0       	ldi	r20, 0x0C	; 12
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	65 e0       	ldi	r22, 0x05	; 5
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	ce 01       	movw	r24, r28
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    17d4:	23 e8       	ldi	r18, 0x83	; 131
    17d6:	38 e0       	ldi	r19, 0x08	; 8
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	ce 01       	movw	r24, r28
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    17e4:	11 e0       	ldi	r17, 0x01	; 1
			break;
    17e6:	7a cf       	rjmp	.-268    	; 0x16dc <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
    17e8:	b6 01       	movw	r22, r12
    17ea:	80 e9       	ldi	r24, 0x90	; 144
    17ec:	92 e0       	ldi	r25, 0x02	; 2
    17ee:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <mac_set_appeui>
				attach_ending(lm_msg);
    17f2:	80 e9       	ldi	r24, 0x90	; 144
    17f4:	92 e0       	ldi	r25, 0x02	; 2
    17f6:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <attach_ending>
				uart0_hal_send_string(lm_msg);
    17fa:	60 e9       	ldi	r22, 0x90	; 144
    17fc:	72 e0       	ldi	r23, 0x02	; 2
    17fe:	80 e8       	ldi	r24, 0x80	; 128
    1800:	0e 94 e6 20 	call	0x41cc	; 0x41cc <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
    1804:	4c e0       	ldi	r20, 0x0C	; 12
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	66 e0       	ldi	r22, 0x06	; 6
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	ce 01       	movw	r24, r28
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1814:	23 e8       	ldi	r18, 0x83	; 131
    1816:	38 e0       	ldi	r19, 0x08	; 8
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1824:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1826:	5a cf       	rjmp	.-332    	; 0x16dc <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	80 e9       	ldi	r24, 0x90	; 144
    182c:	92 e0       	ldi	r25, 0x02	; 2
    182e:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <mac_set_ADR>
				attach_ending(lm_msg);
    1832:	80 e9       	ldi	r24, 0x90	; 144
    1834:	92 e0       	ldi	r25, 0x02	; 2
    1836:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <attach_ending>
				uart0_hal_send_string(lm_msg);
    183a:	60 e9       	ldi	r22, 0x90	; 144
    183c:	72 e0       	ldi	r23, 0x02	; 2
    183e:	80 e8       	ldi	r24, 0x80	; 128
    1840:	0e 94 e6 20 	call	0x41cc	; 0x41cc <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
    1844:	4c e0       	ldi	r20, 0x0C	; 12
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	67 e0       	ldi	r22, 0x07	; 7
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	ce 01       	movw	r24, r28
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1854:	23 e8       	ldi	r18, 0x83	; 131
    1856:	38 e0       	ldi	r19, 0x08	; 8
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	ce 01       	movw	r24, r28
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1864:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1866:	3a cf       	rjmp	.-396    	; 0x16dc <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
    1868:	46 e8       	ldi	r20, 0x86	; 134
    186a:	58 e0       	ldi	r21, 0x08	; 8
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	80 e9       	ldi	r24, 0x90	; 144
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1876:	60 e9       	ldi	r22, 0x90	; 144
    1878:	72 e0       	ldi	r23, 0x02	; 2
    187a:	80 e8       	ldi	r24, 0x80	; 128
    187c:	0e 94 e6 20 	call	0x41cc	; 0x41cc <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    1880:	4c e0       	ldi	r20, 0x0C	; 12
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	68 e0       	ldi	r22, 0x08	; 8
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1890:	23 e8       	ldi	r18, 0x83	; 131
    1892:	38 e0       	ldi	r19, 0x08	; 8
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	ce 01       	movw	r24, r28
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    18a0:	11 e0       	ldi	r17, 0x01	; 1
			break;
    18a2:	1c cf       	rjmp	.-456    	; 0x16dc <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    18a4:	4f e8       	ldi	r20, 0x8F	; 143
    18a6:	58 e0       	ldi	r21, 0x08	; 8
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	80 e9       	ldi	r24, 0x90	; 144
    18ac:	92 e0       	ldi	r25, 0x02	; 2
    18ae:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    18b2:	60 e9       	ldi	r22, 0x90	; 144
    18b4:	72 e0       	ldi	r23, 0x02	; 2
    18b6:	80 e8       	ldi	r24, 0x80	; 128
    18b8:	0e 94 e6 20 	call	0x41cc	; 0x41cc <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    18bc:	4a e0       	ldi	r20, 0x0A	; 10
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	69 e0       	ldi	r22, 0x09	; 9
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	ce 01       	movw	r24, r28
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    18cc:	23 e8       	ldi	r18, 0x83	; 131
    18ce:	38 e0       	ldi	r19, 0x08	; 8
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	ce 01       	movw	r24, r28
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    18dc:	11 e0       	ldi	r17, 0x01	; 1
			break;
    18de:	fe ce       	rjmp	.-516    	; 0x16dc <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_set_pending_states(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    18e0:	4a e0       	ldi	r20, 0x0A	; 10
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	6b e0       	ldi	r22, 0x0B	; 11
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	ce 01       	movw	r24, r28
    18ea:	01 96       	adiw	r24, 0x01	; 1
    18ec:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, ACCEPTED);
    18f0:	2d e9       	ldi	r18, 0x9D	; 157
    18f2:	38 e0       	ldi	r19, 0x08	; 8
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	ce 01       	movw	r24, r28
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1900:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1902:	ec ce       	rjmp	.-552    	; 0x16dc <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
    1904:	80 e9       	ldi	r24, 0x90	; 144
    1906:	92 e0       	ldi	r25, 0x02	; 2
    1908:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <parse_err>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <JN_join_network+0x284>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    190e:	0e 94 b8 33 	call	0x6770	; 0x6770 <uart0_hal_message_ready>
    1912:	88 23       	and	r24, r24
    1914:	09 f4       	brne	.+2      	; 0x1918 <JN_join_network+0x266>
    1916:	e2 ce       	rjmp	.-572    	; 0x16dc <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
    1918:	80 e9       	ldi	r24, 0x90	; 144
    191a:	92 e0       	ldi	r25, 0x02	; 2
    191c:	0e 94 1a 30 	call	0x6034	; 0x6034 <uart0_hal_read_message_as_str>
					state=util_match_message(&stateData, lm_msg);
    1920:	60 e9       	ldi	r22, 0x90	; 144
    1922:	72 e0       	ldi	r23, 0x02	; 2
    1924:	ce 01       	movw	r24, r28
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	0e 94 f6 25 	call	0x4bec	; 0x4bec <util_match_message>
    192c:	18 2f       	mov	r17, r24
    192e:	d6 ce       	rjmp	.-596    	; 0x16dc <JN_join_network+0x2a>
				util_set_match_case(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <JN_join_network+0x284>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    1934:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    1936:	28 96       	adiw	r28, 0x08	; 8
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
    1950:	bf 90       	pop	r11
    1952:	af 90       	pop	r10
    1954:	08 95       	ret

Disassembly of section .text.set_block_uplink:

000064ee <set_block_uplink>:
	util_send_break();
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    64ee:	8a ec       	ldi	r24, 0xCA	; 202
    64f0:	91 e3       	ldi	r25, 0x31	; 49
    64f2:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <TC2_HAL_subscribe>
    64f6:	80 93 1c 0d 	sts	0x0D1C, r24	; 0x800d1c <subPointer>
	busy=true;
    64fa:	81 e0       	ldi	r24, 0x01	; 1
    64fc:	80 93 1d 0d 	sts	0x0D1D, r24	; 0x800d1d <busy>
	cnt=0;
    6500:	10 92 1e 0d 	sts	0x0D1E, r1	; 0x800d1e <cnt>
    6504:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

00006394 <cb_block_uplink>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void cb_block_uplink(){
	cnt++;
    6394:	80 91 1e 0d 	lds	r24, 0x0D1E	; 0x800d1e <cnt>
    6398:	8f 5f       	subi	r24, 0xFF	; 255
    639a:	80 93 1e 0d 	sts	0x0D1E, r24	; 0x800d1e <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    639e:	8d 33       	cpi	r24, 0x3D	; 61
    63a0:	30 f0       	brcs	.+12     	; 0x63ae <cb_block_uplink+0x1a>
		busy=false;
    63a2:	10 92 1d 0d 	sts	0x0D1D, r1	; 0x800d1d <busy>
		TC2_HAL_cancel(subPointer);
    63a6:	80 91 1c 0d 	lds	r24, 0x0D1C	; 0x800d1c <subPointer>
    63aa:	0e 94 9b 2c 	call	0x5936	; 0x5936 <TC2_HAL_cancel>
    63ae:	08 95       	ret

Disassembly of section .text.LM_join_network:

00006a1a <LM_join_network>:
static void cb_block_uplink();
static void set_block_uplink();


LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    6a1a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <JN_join_network>
}
    6a1e:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00005f82 <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    5f82:	1f 93       	push	r17
    5f84:	cf 93       	push	r28
    5f86:	df 93       	push	r29
    5f88:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    5f8a:	90 91 1d 0d 	lds	r25, 0x0D1D	; 0x800d1d <busy>
    5f8e:	91 11       	cpse	r25, r1
    5f90:	0a c0       	rjmp	.+20     	; 0x5fa6 <LM_send_uplink+0x24>
    5f92:	16 2f       	mov	r17, r22
    5f94:	e9 01       	movw	r28, r18
	set_block_uplink();
    5f96:	0e 94 77 32 	call	0x64ee	; 0x64ee <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    5f9a:	41 2f       	mov	r20, r17
    5f9c:	be 01       	movw	r22, r28
    5f9e:	84 e6       	ldi	r24, 0x64	; 100
    5fa0:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <SU_send_uplink>
    5fa4:	01 c0       	rjmp	.+2      	; 0x5fa8 <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    5fa6:	82 e0       	ldi	r24, 0x02	; 2
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    5fa8:	df 91       	pop	r29
    5faa:	cf 91       	pop	r28
    5fac:	1f 91       	pop	r17
    5fae:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

000066a4 <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	busy=false;
    66a4:	10 92 1d 0d 	sts	0x0D1D, r1	; 0x800d1d <busy>
	TC2_HAL_cancel(subPointer);
    66a8:	80 91 1c 0d 	lds	r24, 0x0D1C	; 0x800d1c <subPointer>
    66ac:	0e 94 9b 2c 	call	0x5936	; 0x5936 <TC2_HAL_cancel>
	return SC_put_to_sleep();
    66b0:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <SC_put_to_sleep>
}
    66b4:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00006a20 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    6a20:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <SC_wake_up>
}
    6a24:	08 95       	ret

Disassembly of section .text.LM_is_free:

00006966 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    6966:	90 91 1d 0d 	lds	r25, 0x0D1D	; 0x800d1d <busy>
}
    696a:	81 e0       	ldi	r24, 0x01	; 1
    696c:	89 27       	eor	r24, r25
    696e:	08 95       	ret

Disassembly of section .text.LM_reset_module:

00006a26 <LM_reset_module>:

LM_STATUS LM_reset_module(){
	return util_reset_module();
    6a26:	0e 94 ef 2a 	call	0x55de	; 0x55de <util_reset_module>
}
    6a2a:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

00006a2c <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    6a2c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <util_lora_forward_msg>
    6a30:	08 95       	ret

Disassembly of section .text.LM_send_break:

00006a32 <LM_send_break>:
}

void LM_send_break(){
	util_send_break();
    6a32:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <util_send_break>
    6a36:	08 95       	ret

Disassembly of section .text.tohex:

000042c6 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], uint8_t bytes)
{
    42c6:	cf 92       	push	r12
    42c8:	df 92       	push	r13
    42ca:	ef 92       	push	r14
    42cc:	0f 93       	push	r16
    42ce:	1f 93       	push	r17
    42d0:	cf 93       	push	r28
    42d2:	df 93       	push	r29
    42d4:	8c 01       	movw	r16, r24
    42d6:	6a 01       	movw	r12, r20
    42d8:	e6 2e       	mov	r14, r22
    42da:	d2 2f       	mov	r29, r18
    for (uint8_t i = 0; i < bytes; i++){
    42dc:	c0 e0       	ldi	r28, 0x00	; 0
    42de:	26 c0       	rjmp	.+76     	; 0x432c <tohex+0x66>
        sprintf(str + i * 2, "%02x", data[i]);
    42e0:	8c 2f       	mov	r24, r28
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	4e 2d       	mov	r20, r14
    42e6:	96 01       	movw	r18, r12
    42e8:	28 0f       	add	r18, r24
    42ea:	39 1f       	adc	r19, r25
    42ec:	41 1d       	adc	r20, r1
    42ee:	97 fd       	sbrc	r25, 7
    42f0:	4a 95       	dec	r20
    42f2:	f9 01       	movw	r30, r18
    42f4:	24 91       	lpm	r18, Z
    42f6:	47 fd       	sbrc	r20, 7
    42f8:	20 81       	ld	r18, Z
    42fa:	88 0f       	add	r24, r24
    42fc:	99 1f       	adc	r25, r25
    42fe:	1f 92       	push	r1
    4300:	2f 93       	push	r18
    4302:	2b ed       	ldi	r18, 0xDB	; 219
    4304:	37 e0       	ldi	r19, 0x07	; 7
    4306:	40 e0       	ldi	r20, 0x00	; 0
    4308:	4f 93       	push	r20
    430a:	3f 93       	push	r19
    430c:	2f 93       	push	r18
    430e:	80 0f       	add	r24, r16
    4310:	91 1f       	adc	r25, r17
    4312:	9f 93       	push	r25
    4314:	8f 93       	push	r24
    4316:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], uint8_t bytes)
{
    for (uint8_t i = 0; i < bytes; i++){
    431a:	cf 5f       	subi	r28, 0xFF	; 255
    431c:	8d b7       	in	r24, 0x3d	; 61
    431e:	9e b7       	in	r25, 0x3e	; 62
    4320:	07 96       	adiw	r24, 0x07	; 7
    4322:	0f b6       	in	r0, 0x3f	; 63
    4324:	f8 94       	cli
    4326:	9e bf       	out	0x3e, r25	; 62
    4328:	0f be       	out	0x3f, r0	; 63
    432a:	8d bf       	out	0x3d, r24	; 61
    432c:	cd 17       	cp	r28, r29
    432e:	c0 f2       	brcs	.-80     	; 0x42e0 <tohex+0x1a>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    4330:	df 91       	pop	r29
    4332:	cf 91       	pop	r28
    4334:	1f 91       	pop	r17
    4336:	0f 91       	pop	r16
    4338:	ef 90       	pop	r14
    433a:	df 90       	pop	r13
    433c:	cf 90       	pop	r12
    433e:	08 95       	ret

Disassembly of section .text.attach_ending:

000063b0 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    63b0:	fc 01       	movw	r30, r24
    63b2:	01 90       	ld	r0, Z+
    63b4:	00 20       	and	r0, r0
    63b6:	e9 f7       	brne	.-6      	; 0x63b2 <attach_ending+0x2>
    63b8:	cf 01       	movw	r24, r30
    63ba:	23 e0       	ldi	r18, 0x03	; 3
    63bc:	30 e0       	ldi	r19, 0x00	; 0
    63be:	40 ee       	ldi	r20, 0xE0	; 224
    63c0:	57 e0       	ldi	r21, 0x07	; 7
    63c2:	60 e0       	ldi	r22, 0x00	; 0
    63c4:	01 97       	sbiw	r24, 0x01	; 1
    63c6:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
    63ca:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00005ce0 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    5ce0:	cf 93       	push	r28
    5ce2:	df 93       	push	r29
    5ce4:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    5ce6:	0e 94 ad 31 	call	0x635a	; 0x635a <strcpy>
	strcat(buffer, CMD_END_CHARS);
    5cea:	fe 01       	movw	r30, r28
    5cec:	01 90       	ld	r0, Z+
    5cee:	00 20       	and	r0, r0
    5cf0:	e9 f7       	brne	.-6      	; 0x5cec <cmd_with_ending+0xc>
    5cf2:	cf 01       	movw	r24, r30
    5cf4:	23 e0       	ldi	r18, 0x03	; 3
    5cf6:	30 e0       	ldi	r19, 0x00	; 0
    5cf8:	40 ee       	ldi	r20, 0xE0	; 224
    5cfa:	57 e0       	ldi	r21, 0x07	; 7
    5cfc:	60 e0       	ldi	r22, 0x00	; 0
    5cfe:	01 97       	sbiw	r24, 0x01	; 1
    5d00:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
	return strlen(buffer);
    5d04:	be 01       	movw	r22, r28
    5d06:	80 e8       	ldi	r24, 0x80	; 128
    5d08:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
}
    5d0c:	df 91       	pop	r29
    5d0e:	cf 91       	pop	r28
    5d10:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

00004b30 <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    4b30:	cf 93       	push	r28
    4b32:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    4b34:	44 36       	cpi	r20, 0x64	; 100
    4b36:	51 05       	cpc	r21, r1
    4b38:	61 05       	cpc	r22, r1
    4b3a:	71 05       	cpc	r23, r1
    4b3c:	18 f1       	brcs	.+70     	; 0x4b84 <sys_sleep_cmd+0x54>
    4b3e:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    4b40:	7f 93       	push	r23
    4b42:	6f 93       	push	r22
    4b44:	5f 93       	push	r21
    4b46:	4f 93       	push	r20
    4b48:	83 ee       	ldi	r24, 0xE3	; 227
    4b4a:	97 e0       	ldi	r25, 0x07	; 7
    4b4c:	a0 e0       	ldi	r26, 0x00	; 0
    4b4e:	af 93       	push	r26
    4b50:	9f 93       	push	r25
    4b52:	8f 93       	push	r24
    4b54:	8d ee       	ldi	r24, 0xED	; 237
    4b56:	97 e0       	ldi	r25, 0x07	; 7
    4b58:	a0 e0       	ldi	r26, 0x00	; 0
    4b5a:	af 93       	push	r26
    4b5c:	9f 93       	push	r25
    4b5e:	8f 93       	push	r24
    4b60:	df 93       	push	r29
    4b62:	cf 93       	push	r28
    4b64:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    return strlen(buffer);
    4b68:	be 01       	movw	r22, r28
    4b6a:	80 e8       	ldi	r24, 0x80	; 128
    4b6c:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    4b70:	2d b7       	in	r18, 0x3d	; 61
    4b72:	3e b7       	in	r19, 0x3e	; 62
    4b74:	24 5f       	subi	r18, 0xF4	; 244
    4b76:	3f 4f       	sbci	r19, 0xFF	; 255
    4b78:	0f b6       	in	r0, 0x3f	; 63
    4b7a:	f8 94       	cli
    4b7c:	3e bf       	out	0x3e, r19	; 62
    4b7e:	0f be       	out	0x3f, r0	; 63
    4b80:	2d bf       	out	0x3d, r18	; 61
    4b82:	02 c0       	rjmp	.+4      	; 0x4b88 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    4b84:	8f ef       	ldi	r24, 0xFF	; 255
    4b86:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    4b88:	df 91       	pop	r29
    4b8a:	cf 91       	pop	r28
    4b8c:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00005138 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    5138:	0f 93       	push	r16
    513a:	1f 93       	push	r17
    513c:	cf 93       	push	r28
    513e:	df 93       	push	r29
    5140:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    5142:	2f 93       	push	r18
    5144:	1f 93       	push	r17
    5146:	0f 93       	push	r16
    5148:	6f 93       	push	r22
    514a:	5f 93       	push	r21
    514c:	4f 93       	push	r20
    514e:	84 ef       	ldi	r24, 0xF4	; 244
    5150:	97 e0       	ldi	r25, 0x07	; 7
    5152:	a0 e0       	ldi	r26, 0x00	; 0
    5154:	af 93       	push	r26
    5156:	9f 93       	push	r25
    5158:	8f 93       	push	r24
    515a:	df 93       	push	r29
    515c:	cf 93       	push	r28
    515e:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    return strlen(buffer);
    5162:	be 01       	movw	r22, r28
    5164:	80 e8       	ldi	r24, 0x80	; 128
    5166:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    516a:	2d b7       	in	r18, 0x3d	; 61
    516c:	3e b7       	in	r19, 0x3e	; 62
    516e:	25 5f       	subi	r18, 0xF5	; 245
    5170:	3f 4f       	sbci	r19, 0xFF	; 255
    5172:	0f b6       	in	r0, 0x3f	; 63
    5174:	f8 94       	cli
    5176:	3e bf       	out	0x3e, r19	; 62
    5178:	0f be       	out	0x3f, r0	; 63
    517a:	2d bf       	out	0x3d, r18	; 61
}
    517c:	df 91       	pop	r29
    517e:	cf 91       	pop	r28
    5180:	1f 91       	pop	r17
    5182:	0f 91       	pop	r16
    5184:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

0000547a <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    547a:	cf 92       	push	r12
    547c:	df 92       	push	r13
    547e:	ef 92       	push	r14
    5480:	0f 93       	push	r16
    5482:	1f 93       	push	r17
    5484:	cf 93       	push	r28
    5486:	df 93       	push	r29
    5488:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    548a:	6b 01       	movw	r12, r22
    548c:	80 e8       	ldi	r24, 0x80	; 128
    548e:	e8 2e       	mov	r14, r24
    5490:	8e 2d       	mov	r24, r14
    5492:	b6 01       	movw	r22, r12
    5494:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    5498:	40 97       	sbiw	r24, 0x10	; 16
    549a:	49 f4       	brne	.+18     	; 0x54ae <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    549c:	2e 2d       	mov	r18, r14
    549e:	86 01       	movw	r16, r12
    54a0:	4a ef       	ldi	r20, 0xFA	; 250
    54a2:	57 e0       	ldi	r21, 0x07	; 7
    54a4:	60 e0       	ldi	r22, 0x00	; 0
    54a6:	ce 01       	movw	r24, r28
    54a8:	0e 94 9c 28 	call	0x5138	; 0x5138 <mac_set_parameter>
    54ac:	02 c0       	rjmp	.+4      	; 0x54b2 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    54ae:	8f ef       	ldi	r24, 0xFF	; 255
    54b0:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    54b2:	df 91       	pop	r29
    54b4:	cf 91       	pop	r28
    54b6:	1f 91       	pop	r17
    54b8:	0f 91       	pop	r16
    54ba:	ef 90       	pop	r14
    54bc:	df 90       	pop	r13
    54be:	cf 90       	pop	r12
    54c0:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

000054c2 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    54c2:	cf 92       	push	r12
    54c4:	df 92       	push	r13
    54c6:	ef 92       	push	r14
    54c8:	0f 93       	push	r16
    54ca:	1f 93       	push	r17
    54cc:	cf 93       	push	r28
    54ce:	df 93       	push	r29
    54d0:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    54d2:	6b 01       	movw	r12, r22
    54d4:	80 e8       	ldi	r24, 0x80	; 128
    54d6:	e8 2e       	mov	r14, r24
    54d8:	8e 2d       	mov	r24, r14
    54da:	b6 01       	movw	r22, r12
    54dc:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    54e0:	40 97       	sbiw	r24, 0x10	; 16
    54e2:	49 f4       	brne	.+18     	; 0x54f6 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    54e4:	2e 2d       	mov	r18, r14
    54e6:	86 01       	movw	r16, r12
    54e8:	49 e0       	ldi	r20, 0x09	; 9
    54ea:	58 e0       	ldi	r21, 0x08	; 8
    54ec:	60 e0       	ldi	r22, 0x00	; 0
    54ee:	ce 01       	movw	r24, r28
    54f0:	0e 94 9c 28 	call	0x5138	; 0x5138 <mac_set_parameter>
    54f4:	02 c0       	rjmp	.+4      	; 0x54fa <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    54f6:	8f ef       	ldi	r24, 0xFF	; 255
    54f8:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    54fa:	df 91       	pop	r29
    54fc:	cf 91       	pop	r28
    54fe:	1f 91       	pop	r17
    5500:	0f 91       	pop	r16
    5502:	ef 90       	pop	r14
    5504:	df 90       	pop	r13
    5506:	cf 90       	pop	r12
    5508:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

0000550a <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    550a:	cf 92       	push	r12
    550c:	df 92       	push	r13
    550e:	ef 92       	push	r14
    5510:	0f 93       	push	r16
    5512:	1f 93       	push	r17
    5514:	cf 93       	push	r28
    5516:	df 93       	push	r29
    5518:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    551a:	6b 01       	movw	r12, r22
    551c:	80 e8       	ldi	r24, 0x80	; 128
    551e:	e8 2e       	mov	r14, r24
    5520:	8e 2d       	mov	r24, r14
    5522:	b6 01       	movw	r22, r12
    5524:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    5528:	80 97       	sbiw	r24, 0x20	; 32
    552a:	49 f4       	brne	.+18     	; 0x553e <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    552c:	2e 2d       	mov	r18, r14
    552e:	86 01       	movw	r16, r12
    5530:	48 e1       	ldi	r20, 0x18	; 24
    5532:	58 e0       	ldi	r21, 0x08	; 8
    5534:	60 e0       	ldi	r22, 0x00	; 0
    5536:	ce 01       	movw	r24, r28
    5538:	0e 94 9c 28 	call	0x5138	; 0x5138 <mac_set_parameter>
    553c:	02 c0       	rjmp	.+4      	; 0x5542 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    553e:	8f ef       	ldi	r24, 0xFF	; 255
    5540:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    5542:	df 91       	pop	r29
    5544:	cf 91       	pop	r28
    5546:	1f 91       	pop	r17
    5548:	0f 91       	pop	r16
    554a:	ef 90       	pop	r14
    554c:	df 90       	pop	r13
    554e:	cf 90       	pop	r12
    5550:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00005e36 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    5e36:	0f 93       	push	r16
    5e38:	1f 93       	push	r17
	if(state==0){
    5e3a:	61 11       	cpse	r22, r1
    5e3c:	09 c0       	rjmp	.+18     	; 0x5e50 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    5e3e:	07 e2       	ldi	r16, 0x27	; 39
    5e40:	18 e0       	ldi	r17, 0x08	; 8
    5e42:	20 e0       	ldi	r18, 0x00	; 0
    5e44:	4b e2       	ldi	r20, 0x2B	; 43
    5e46:	58 e0       	ldi	r21, 0x08	; 8
    5e48:	60 e0       	ldi	r22, 0x00	; 0
    5e4a:	0e 94 9c 28 	call	0x5138	; 0x5138 <mac_set_parameter>
    5e4e:	08 c0       	rjmp	.+16     	; 0x5e60 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    5e50:	07 e3       	ldi	r16, 0x37	; 55
    5e52:	18 e0       	ldi	r17, 0x08	; 8
    5e54:	20 e0       	ldi	r18, 0x00	; 0
    5e56:	4b e2       	ldi	r20, 0x2B	; 43
    5e58:	58 e0       	ldi	r21, 0x08	; 8
    5e5a:	60 e0       	ldi	r22, 0x00	; 0
    5e5c:	0e 94 9c 28 	call	0x5138	; 0x5138 <mac_set_parameter>
	}
}
    5e60:	1f 91       	pop	r17
    5e62:	0f 91       	pop	r16
    5e64:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

000039e6 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    39e6:	df 92       	push	r13
    39e8:	ef 92       	push	r14
    39ea:	ff 92       	push	r15
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
    39f8:	c9 5c       	subi	r28, 0xC9	; 201
    39fa:	d1 09       	sbc	r29, r1
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
    3a06:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    3a08:	9f ef       	ldi	r25, 0xFF	; 255
    3a0a:	96 0f       	add	r25, r22
    3a0c:	9f 3d       	cpi	r25, 0xDF	; 223
    3a0e:	60 f5       	brcc	.+88     	; 0x3a68 <mac_tx_confirmed+0x82>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    3a10:	9f ef       	ldi	r25, 0xFF	; 255
    3a12:	92 0f       	add	r25, r18
    3a14:	94 36       	cpi	r25, 0x64	; 100
    3a16:	58 f5       	brcc	.+86     	; 0x3a6e <mac_tx_confirmed+0x88>
    3a18:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    3a1a:	60 e8       	ldi	r22, 0x80	; 128
    3a1c:	ce 01       	movw	r24, r28
    3a1e:	01 96       	adiw	r24, 0x01	; 1
    3a20:	7c 01       	movw	r14, r24
    3a22:	0e 94 63 21 	call	0x42c6	; 0x42c6 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    3a26:	c7 01       	movw	r24, r14
    3a28:	a0 e8       	ldi	r26, 0x80	; 128
    3a2a:	af 93       	push	r26
    3a2c:	9f 93       	push	r25
    3a2e:	ef 92       	push	r14
    3a30:	1f 92       	push	r1
    3a32:	df 92       	push	r13
    3a34:	8a e3       	ldi	r24, 0x3A	; 58
    3a36:	98 e0       	ldi	r25, 0x08	; 8
    3a38:	a0 e0       	ldi	r26, 0x00	; 0
    3a3a:	af 93       	push	r26
    3a3c:	9f 93       	push	r25
    3a3e:	8f 93       	push	r24
    3a40:	85 e4       	ldi	r24, 0x45	; 69
    3a42:	98 e0       	ldi	r25, 0x08	; 8
    3a44:	a0 e0       	ldi	r26, 0x00	; 0
    3a46:	af 93       	push	r26
    3a48:	9f 93       	push	r25
    3a4a:	8f 93       	push	r24
    3a4c:	1f 93       	push	r17
    3a4e:	0f 93       	push	r16
    3a50:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    
	
    return strlen(buffer);
    3a54:	b8 01       	movw	r22, r16
    3a56:	80 e8       	ldi	r24, 0x80	; 128
    3a58:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    3a5c:	0f b6       	in	r0, 0x3f	; 63
    3a5e:	f8 94       	cli
    3a60:	de bf       	out	0x3e, r29	; 62
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	cd bf       	out	0x3d, r28	; 61
    3a66:	05 c0       	rjmp	.+10     	; 0x3a72 <mac_tx_confirmed+0x8c>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    3a68:	8f ef       	ldi	r24, 0xFF	; 255
    3a6a:	9f ef       	ldi	r25, 0xFF	; 255
    3a6c:	02 c0       	rjmp	.+4      	; 0x3a72 <mac_tx_confirmed+0x8c>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    3a6e:	8f ef       	ldi	r24, 0xFF	; 255
    3a70:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    3a72:	c7 53       	subi	r28, 0x37	; 55
    3a74:	df 4f       	sbci	r29, 0xFF	; 255
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	f8 94       	cli
    3a7a:	de bf       	out	0x3e, r29	; 62
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	cd bf       	out	0x3d, r28	; 61
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	df 90       	pop	r13
    3a8e:	08 95       	ret

Disassembly of section .text.decode_tx_response:

000049fa <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    49fa:	cf 92       	push	r12
    49fc:	df 92       	push	r13
    49fe:	ef 92       	push	r14
    4a00:	6b 01       	movw	r12, r22
    4a02:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    4a04:	26 ea       	ldi	r18, 0xA6	; 166
    4a06:	38 e0       	ldi	r19, 0x08	; 8
    4a08:	40 e0       	ldi	r20, 0x00	; 0
    4a0a:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    4a0e:	89 2b       	or	r24, r25
    4a10:	e9 f0       	breq	.+58     	; 0x4a4c <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    4a12:	21 eb       	ldi	r18, 0xB1	; 177
    4a14:	38 e0       	ldi	r19, 0x08	; 8
    4a16:	40 e0       	ldi	r20, 0x00	; 0
    4a18:	8e 2d       	mov	r24, r14
    4a1a:	b6 01       	movw	r22, r12
    4a1c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    4a20:	89 2b       	or	r24, r25
    4a22:	b1 f0       	breq	.+44     	; 0x4a50 <decode_tx_response+0x56>
	if(util_str_begins_with(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    4a24:	29 eb       	ldi	r18, 0xB9	; 185
    4a26:	38 e0       	ldi	r19, 0x08	; 8
    4a28:	40 e0       	ldi	r20, 0x00	; 0
    4a2a:	8e 2d       	mov	r24, r14
    4a2c:	b6 01       	movw	r22, r12
    4a2e:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <util_str_begins_with>
    4a32:	81 11       	cpse	r24, r1
    4a34:	0f c0       	rjmp	.+30     	; 0x4a54 <decode_tx_response+0x5a>
	if(util_str_begins_with(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    4a36:	20 ec       	ldi	r18, 0xC0	; 192
    4a38:	38 e0       	ldi	r19, 0x08	; 8
    4a3a:	40 e0       	ldi	r20, 0x00	; 0
    4a3c:	8e 2d       	mov	r24, r14
    4a3e:	b6 01       	movw	r22, r12
    4a40:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <util_str_begins_with>
    4a44:	88 23       	and	r24, r24
    4a46:	41 f0       	breq	.+16     	; 0x4a58 <decode_tx_response+0x5e>
    4a48:	85 e0       	ldi	r24, 0x05	; 5
    4a4a:	07 c0       	rjmp	.+14     	; 0x4a5a <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    4a4c:	82 e0       	ldi	r24, 0x02	; 2
    4a4e:	05 c0       	rjmp	.+10     	; 0x4a5a <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    4a50:	84 e0       	ldi	r24, 0x04	; 4
    4a52:	03 c0       	rjmp	.+6      	; 0x4a5a <decode_tx_response+0x60>
	if(util_str_begins_with(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	01 c0       	rjmp	.+2      	; 0x4a5a <decode_tx_response+0x60>
	if(util_str_begins_with(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    4a58:	81 e0       	ldi	r24, 0x01	; 1
}
    4a5a:	ef 90       	pop	r14
    4a5c:	df 90       	pop	r13
    4a5e:	cf 90       	pop	r12
    4a60:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00002f6e <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    2f6e:	df 92       	push	r13
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	28 97       	sbiw	r28, 0x08	; 8
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	d8 2e       	mov	r13, r24
    2f8e:	7b 01       	movw	r14, r22
    2f90:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    2f92:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    2f94:	12 30       	cpi	r17, 0x02	; 2
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <SU_send_uplink+0x2c>
    2f98:	40 c0       	rjmp	.+128    	; 0x301a <SU_send_uplink+0xac>
    2f9a:	28 f4       	brcc	.+10     	; 0x2fa6 <SU_send_uplink+0x38>
    2f9c:	11 23       	and	r17, r17
    2f9e:	49 f0       	breq	.+18     	; 0x2fb2 <SU_send_uplink+0x44>
    2fa0:	11 30       	cpi	r17, 0x01	; 1
    2fa2:	49 f1       	breq	.+82     	; 0x2ff6 <SU_send_uplink+0x88>
    2fa4:	f7 cf       	rjmp	.-18     	; 0x2f94 <SU_send_uplink+0x26>
    2fa6:	13 30       	cpi	r17, 0x03	; 3
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <SU_send_uplink+0x3e>
    2faa:	4e c0       	rjmp	.+156    	; 0x3048 <SU_send_uplink+0xda>
    2fac:	14 30       	cpi	r17, 0x04	; 4
    2fae:	d9 f1       	breq	.+118    	; 0x3026 <SU_send_uplink+0xb8>
    2fb0:	f1 cf       	rjmp	.-30     	; 0x2f94 <SU_send_uplink+0x26>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    2fb2:	20 2f       	mov	r18, r16
    2fb4:	a7 01       	movw	r20, r14
    2fb6:	6d 2d       	mov	r22, r13
    2fb8:	80 e9       	ldi	r24, 0x90	; 144
    2fba:	92 e0       	ldi	r25, 0x02	; 2
    2fbc:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <mac_tx_confirmed>
				attach_ending(lm_msg);
    2fc0:	80 e9       	ldi	r24, 0x90	; 144
    2fc2:	92 e0       	ldi	r25, 0x02	; 2
    2fc4:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <attach_ending>
				uart0_hal_send_string(lm_msg);
    2fc8:	60 e9       	ldi	r22, 0x90	; 144
    2fca:	72 e0       	ldi	r23, 0x02	; 2
    2fcc:	80 e8       	ldi	r24, 0x80	; 128
    2fce:	0e 94 e6 20 	call	0x41cc	; 0x41cc <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    2fd2:	42 e0       	ldi	r20, 0x02	; 2
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	61 e0       	ldi	r22, 0x01	; 1
    2fd8:	70 e0       	ldi	r23, 0x00	; 0
    2fda:	ce 01       	movw	r24, r28
    2fdc:	01 96       	adiw	r24, 0x01	; 1
    2fde:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    2fe2:	21 ed       	ldi	r18, 0xD1	; 209
    2fe4:	38 e0       	ldi	r19, 0x08	; 8
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	ce 01       	movw	r24, r28
    2fec:	01 96       	adiw	r24, 0x01	; 1
    2fee:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				state=SU_WAIT_FOR_INCOMMING;
    2ff2:	14 e0       	ldi	r17, 0x04	; 4
			break;
    2ff4:	cf cf       	rjmp	.-98     	; 0x2f94 <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_set_pending_states(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    2ff6:	42 e0       	ldi	r20, 0x02	; 2
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	63 e0       	ldi	r22, 0x03	; 3
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	ce 01       	movw	r24, r28
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	0e 94 71 34 	call	0x68e2	; 0x68e2 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, MAC_TX_OK);
    3006:	24 ed       	ldi	r18, 0xD4	; 212
    3008:	38 e0       	ldi	r19, 0x08	; 8
    300a:	40 e0       	ldi	r20, 0x00	; 0
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	ce 01       	movw	r24, r28
    3010:	01 96       	adiw	r24, 0x01	; 1
    3012:	0e 94 77 34 	call	0x68ee	; 0x68ee <util_set_match_case>
				state=SU_WAIT_FOR_INCOMMING;
    3016:	14 e0       	ldi	r17, 0x04	; 4
			break;
    3018:	bd cf       	rjmp	.-134    	; 0x2f94 <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    301a:	60 e9       	ldi	r22, 0x90	; 144
    301c:	72 e0       	ldi	r23, 0x02	; 2
    301e:	80 e8       	ldi	r24, 0x80	; 128
    3020:	0e 94 fd 24 	call	0x49fa	; 0x49fa <decode_tx_response>
    3024:	12 c0       	rjmp	.+36     	; 0x304a <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    3026:	0e 94 b8 33 	call	0x6770	; 0x6770 <uart0_hal_message_ready>
    302a:	88 23       	and	r24, r24
    302c:	09 f4       	brne	.+2      	; 0x3030 <SU_send_uplink+0xc2>
    302e:	b2 cf       	rjmp	.-156    	; 0x2f94 <SU_send_uplink+0x26>
					uart0_hal_read_message_as_str(lm_msg);
    3030:	80 e9       	ldi	r24, 0x90	; 144
    3032:	92 e0       	ldi	r25, 0x02	; 2
    3034:	0e 94 1a 30 	call	0x6034	; 0x6034 <uart0_hal_read_message_as_str>
					state=util_match_message(&stateData, lm_msg);
    3038:	60 e9       	ldi	r22, 0x90	; 144
    303a:	72 e0       	ldi	r23, 0x02	; 2
    303c:	ce 01       	movw	r24, r28
    303e:	01 96       	adiw	r24, 0x01	; 1
    3040:	0e 94 f6 25 	call	0x4bec	; 0x4bec <util_match_message>
    3044:	18 2f       	mov	r17, r24
    3046:	a6 cf       	rjmp	.-180    	; 0x2f94 <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    3048:	80 e0       	ldi	r24, 0x00	; 0
					state=util_match_message(&stateData, lm_msg);
				}
			break;
		}
	}
}
    304a:	28 96       	adiw	r28, 0x08	; 8
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	df 91       	pop	r29
    3058:	cf 91       	pop	r28
    305a:	1f 91       	pop	r17
    305c:	0f 91       	pop	r16
    305e:	ff 90       	pop	r15
    3060:	ef 90       	pop	r14
    3062:	df 90       	pop	r13
    3064:	08 95       	ret

Disassembly of section .text.cb_counter:

0000666c <cb_counter>:
		return LM_STATUS_FATAL_ERROR;
	}
}

static void cb_counter(){
	cnt++;
    666c:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <cnt>
    6670:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <cnt+0x1>
    6674:	01 96       	adiw	r24, 0x01	; 1
    6676:	90 93 04 0d 	sts	0x0D04, r25	; 0x800d04 <cnt+0x1>
    667a:	80 93 03 0d 	sts	0x0D03, r24	; 0x800d03 <cnt>
    667e:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00005a90 <SC_put_to_sleep>:
static uint16_t cnt=0;
static int8_t eventPointer;

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    5a90:	40 e0       	ldi	r20, 0x00	; 0
    5a92:	5c e5       	ldi	r21, 0x5C	; 92
    5a94:	66 e2       	ldi	r22, 0x26	; 38
    5a96:	75 e0       	ldi	r23, 0x05	; 5
    5a98:	80 e9       	ldi	r24, 0x90	; 144
    5a9a:	92 e0       	ldi	r25, 0x02	; 2
    5a9c:	0e 94 98 25 	call	0x4b30	; 0x4b30 <sys_sleep_cmd>
	attach_ending(lm_msg);
    5aa0:	80 e9       	ldi	r24, 0x90	; 144
    5aa2:	92 e0       	ldi	r25, 0x02	; 2
    5aa4:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <attach_ending>
	uart0_hal_send_string(lm_msg);
    5aa8:	60 e9       	ldi	r22, 0x90	; 144
    5aaa:	72 e0       	ldi	r23, 0x02	; 2
    5aac:	80 e8       	ldi	r24, 0x80	; 128
    5aae:	0e 94 e6 20 	call	0x41cc	; 0x41cc <uart0_hal_send_string>
    5ab2:	2f ef       	ldi	r18, 0xFF	; 255
    5ab4:	81 ee       	ldi	r24, 0xE1	; 225
    5ab6:	94 e0       	ldi	r25, 0x04	; 4
    5ab8:	21 50       	subi	r18, 0x01	; 1
    5aba:	80 40       	sbci	r24, 0x00	; 0
    5abc:	90 40       	sbci	r25, 0x00	; 0
    5abe:	e1 f7       	brne	.-8      	; 0x5ab8 <SC_put_to_sleep+0x28>
    5ac0:	00 c0       	rjmp	.+0      	; 0x5ac2 <SC_put_to_sleep+0x32>
    5ac2:	00 00       	nop
	_delay_ms(200);
	return LM_STATUS_SUCCESS;
}
    5ac4:	80 e0       	ldi	r24, 0x00	; 0
    5ac6:	08 95       	ret

Disassembly of section .text.SC_wake_up:

000048b6 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    48b6:	85 e5       	ldi	r24, 0x55	; 85
    48b8:	0e 94 a9 2a 	call	0x5552	; 0x5552 <uart0_hal_send_break>
	
	//Create watchdog
	cnt=0;
    48bc:	10 92 04 0d 	sts	0x0D04, r1	; 0x800d04 <cnt+0x1>
    48c0:	10 92 03 0d 	sts	0x0D03, r1	; 0x800d03 <cnt>
	eventPointer=TC2_HAL_subscribe(&cb_counter);
    48c4:	86 e3       	ldi	r24, 0x36	; 54
    48c6:	93 e3       	ldi	r25, 0x33	; 51
    48c8:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <TC2_HAL_subscribe>
    48cc:	80 93 1f 0d 	sts	0x0D1F, r24	; 0x800d1f <eventPointer>
	
	//Expect ok from sleep
	while(uart0_hal_message_ready()==false && cnt<LM_SLEEP_WATCHDOG_CNT){}
    48d0:	0e 94 b8 33 	call	0x6770	; 0x6770 <uart0_hal_message_ready>
    48d4:	81 11       	cpse	r24, r1
    48d6:	06 c0       	rjmp	.+12     	; 0x48e4 <SC_wake_up+0x2e>
    48d8:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <cnt>
    48dc:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <cnt+0x1>
    48e0:	0a 97       	sbiw	r24, 0x0a	; 10
    48e2:	b0 f3       	brcs	.-20     	; 0x48d0 <SC_wake_up+0x1a>
		
	TC2_HAL_cancel(eventPointer);
    48e4:	80 91 1f 0d 	lds	r24, 0x0D1F	; 0x800d1f <eventPointer>
    48e8:	0e 94 9b 2c 	call	0x5936	; 0x5936 <TC2_HAL_cancel>
		
	if(cnt>=LM_SLEEP_WATCHDOG_CNT){
    48ec:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <cnt>
    48f0:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <cnt+0x1>
    48f4:	0a 97       	sbiw	r24, 0x0a	; 10
    48f6:	20 f0       	brcs	.+8      	; 0x4900 <SC_wake_up+0x4a>
		uart0_hal_clear_rx_buffer();
    48f8:	0e 94 9f 34 	call	0x693e	; 0x693e <uart0_hal_clear_rx_buffer>
		return LM_STATUS_FATAL_ERROR;
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	08 95       	ret
	}else{
		uart0_hal_read_message_as_str(lm_msg);
    4900:	80 e9       	ldi	r24, 0x90	; 144
    4902:	92 e0       	ldi	r25, 0x02	; 2
    4904:	0e 94 1a 30 	call	0x6034	; 0x6034 <uart0_hal_read_message_as_str>
		
		if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    4908:	60 e9       	ldi	r22, 0x90	; 144
    490a:	72 e0       	ldi	r23, 0x02	; 2
    490c:	80 e8       	ldi	r24, 0x80	; 128
    490e:	23 e0       	ldi	r18, 0x03	; 3
    4910:	39 e0       	ldi	r19, 0x09	; 9
    4912:	40 e0       	ldi	r20, 0x00	; 0
    4914:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    4918:	89 2b       	or	r24, r25
    491a:	11 f4       	brne	.+4      	; 0x4920 <SC_wake_up+0x6a>
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	08 95       	ret
		return LM_STATUS_FATAL_ERROR;
    4920:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    4922:	08 95       	ret

Disassembly of section .text.cb_watchdog_counter:

000068d6 <cb_watchdog_counter>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    68d6:	80 91 21 0d 	lds	r24, 0x0D21	; 0x800d21 <wd_cnt>
    68da:	8f 5f       	subi	r24, 0xFF	; 255
    68dc:	80 93 21 0d 	sts	0x0D21, r24	; 0x800d21 <wd_cnt>
    68e0:	08 95       	ret

Disassembly of section .text.util_set_pending_states:

000068e2 <util_set_pending_states>:
char lm_msg[250];

static void cb_watchdog_counter();

void util_set_pending_states(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    68e2:	fc 01       	movw	r30, r24
    68e4:	71 83       	std	Z+1, r23	; 0x01
    68e6:	60 83       	st	Z, r22
	sd->failure_state=failed;
    68e8:	53 83       	std	Z+3, r21	; 0x03
    68ea:	42 83       	std	Z+2, r20	; 0x02
    68ec:	08 95       	ret

Disassembly of section .text.util_set_match_case:

000068ee <util_set_match_case>:
}

void util_set_match_case(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    68ee:	fc 01       	movw	r30, r24
    68f0:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    68f2:	25 83       	std	Z+5, r18	; 0x05
    68f4:	36 83       	std	Z+6, r19	; 0x06
    68f6:	47 83       	std	Z+7, r20	; 0x07
    68f8:	08 95       	ret

Disassembly of section .text.util_str_begins_with:

000053e8 <util_str_begins_with>:
		return sd->failure_state;
	}
}


bool util_str_begins_with(const char *s1, const char *s2){
    53e8:	6f 92       	push	r6
    53ea:	7f 92       	push	r7
    53ec:	8f 92       	push	r8
    53ee:	cf 92       	push	r12
    53f0:	df 92       	push	r13
    53f2:	ef 92       	push	r14
    53f4:	0f 93       	push	r16
    53f6:	1f 93       	push	r17
    53f8:	3b 01       	movw	r6, r22
    53fa:	88 2e       	mov	r8, r24
    53fc:	69 01       	movw	r12, r18
    53fe:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    5400:	84 2f       	mov	r24, r20
    5402:	b9 01       	movw	r22, r18
    5404:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    5408:	8c 01       	movw	r16, r24
    540a:	4e 2d       	mov	r20, r14
    540c:	96 01       	movw	r18, r12
    540e:	88 2d       	mov	r24, r8
    5410:	b3 01       	movw	r22, r6
    5412:	0e 94 c8 24 	call	0x4990	; 0x4990 <strncmp>
    5416:	21 e0       	ldi	r18, 0x01	; 1
    5418:	89 2b       	or	r24, r25
    541a:	09 f0       	breq	.+2      	; 0x541e <util_str_begins_with+0x36>
    541c:	20 e0       	ldi	r18, 0x00	; 0
}
    541e:	82 2f       	mov	r24, r18
    5420:	1f 91       	pop	r17
    5422:	0f 91       	pop	r16
    5424:	ef 90       	pop	r14
    5426:	df 90       	pop	r13
    5428:	cf 90       	pop	r12
    542a:	8f 90       	pop	r8
    542c:	7f 90       	pop	r7
    542e:	6f 90       	pop	r6
    5430:	08 95       	ret

Disassembly of section .text.util_match_message:

00004bec <util_match_message>:
void util_set_match_case(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_match_message(LM_STATE_DATA *sd, char *msg){
    4bec:	cf 93       	push	r28
    4bee:	df 93       	push	r29
    4bf0:	ec 01       	movw	r28, r24
	switch(sd->matchCase){
    4bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    4bf4:	81 30       	cpi	r24, 0x01	; 1
    4bf6:	91 f0       	breq	.+36     	; 0x4c1c <util_match_message+0x30>
    4bf8:	18 f0       	brcs	.+6      	; 0x4c00 <util_match_message+0x14>
    4bfa:	82 30       	cpi	r24, 0x02	; 2
    4bfc:	e9 f0       	breq	.+58     	; 0x4c38 <util_match_message+0x4c>
    4bfe:	1f c0       	rjmp	.+62     	; 0x4c3e <util_match_message+0x52>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    4c00:	2d 81       	ldd	r18, Y+5	; 0x05
    4c02:	3e 81       	ldd	r19, Y+6	; 0x06
    4c04:	4f 81       	ldd	r20, Y+7	; 0x07
    4c06:	80 e8       	ldi	r24, 0x80	; 128
    4c08:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    4c0c:	89 2b       	or	r24, r25
    4c0e:	19 f4       	brne	.+6      	; 0x4c16 <util_match_message+0x2a>
    4c10:	88 81       	ld	r24, Y
    4c12:	99 81       	ldd	r25, Y+1	; 0x01
    4c14:	16 c0       	rjmp	.+44     	; 0x4c42 <util_match_message+0x56>
    4c16:	8a 81       	ldd	r24, Y+2	; 0x02
    4c18:	9b 81       	ldd	r25, Y+3	; 0x03
    4c1a:	13 c0       	rjmp	.+38     	; 0x4c42 <util_match_message+0x56>

		case LM_BEGINS_WITH:
		return util_str_begins_with(msg, sd->matchString)?sd->success_state:sd->failure_state;
    4c1c:	2d 81       	ldd	r18, Y+5	; 0x05
    4c1e:	3e 81       	ldd	r19, Y+6	; 0x06
    4c20:	4f 81       	ldd	r20, Y+7	; 0x07
    4c22:	80 e8       	ldi	r24, 0x80	; 128
    4c24:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <util_str_begins_with>
    4c28:	88 23       	and	r24, r24
    4c2a:	19 f0       	breq	.+6      	; 0x4c32 <util_match_message+0x46>
    4c2c:	88 81       	ld	r24, Y
    4c2e:	99 81       	ldd	r25, Y+1	; 0x01
    4c30:	08 c0       	rjmp	.+16     	; 0x4c42 <util_match_message+0x56>
    4c32:	8a 81       	ldd	r24, Y+2	; 0x02
    4c34:	9b 81       	ldd	r25, Y+3	; 0x03
    4c36:	05 c0       	rjmp	.+10     	; 0x4c42 <util_match_message+0x56>

		case LM_NO_TEST:
		return sd->success_state;
    4c38:	88 81       	ld	r24, Y
    4c3a:	99 81       	ldd	r25, Y+1	; 0x01
    4c3c:	02 c0       	rjmp	.+4      	; 0x4c42 <util_match_message+0x56>
		default:
		return sd->failure_state;
    4c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c40:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    4c42:	df 91       	pop	r29
    4c44:	cf 91       	pop	r28
    4c46:	08 95       	ret

Disassembly of section .text.util_reset_module:

000055de <util_reset_module>:
bool util_str_begins_with(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    55de:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <rn2483_reset_active>
    55e2:	2f ef       	ldi	r18, 0xFF	; 255
    55e4:	89 e6       	ldi	r24, 0x69	; 105
    55e6:	98 e1       	ldi	r25, 0x18	; 24
    55e8:	21 50       	subi	r18, 0x01	; 1
    55ea:	80 40       	sbci	r24, 0x00	; 0
    55ec:	90 40       	sbci	r25, 0x00	; 0
    55ee:	e1 f7       	brne	.-8      	; 0x55e8 <util_reset_module+0xa>
    55f0:	00 c0       	rjmp	.+0      	; 0x55f2 <util_reset_module+0x14>
    55f2:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    55f4:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    55f8:	0e 94 b8 33 	call	0x6770	; 0x6770 <uart0_hal_message_ready>
    55fc:	88 23       	and	r24, r24
    55fe:	e1 f3       	breq	.-8      	; 0x55f8 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    5600:	80 e9       	ldi	r24, 0x90	; 144
    5602:	92 e0       	ldi	r25, 0x02	; 2
    5604:	0e 94 1a 30 	call	0x6034	; 0x6034 <uart0_hal_read_message_as_str>
	
	if(util_str_begins_with(lm_msg, RN2483)){
    5608:	60 e9       	ldi	r22, 0x90	; 144
    560a:	72 e0       	ldi	r23, 0x02	; 2
    560c:	80 e8       	ldi	r24, 0x80	; 128
    560e:	2e ed       	ldi	r18, 0xDE	; 222
    5610:	38 e0       	ldi	r19, 0x08	; 8
    5612:	40 e0       	ldi	r20, 0x00	; 0
    5614:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <util_str_begins_with>
    5618:	88 23       	and	r24, r24
    561a:	11 f0       	breq	.+4      	; 0x5620 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    561c:	80 e0       	ldi	r24, 0x00	; 0
    561e:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    5620:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    5622:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

000043ba <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    43ba:	cf 93       	push	r28
    43bc:	df 93       	push	r29
    43be:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    43c0:	ab 01       	movw	r20, r22
    43c2:	68 2f       	mov	r22, r24
    43c4:	80 e9       	ldi	r24, 0x90	; 144
    43c6:	92 e0       	ldi	r25, 0x02	; 2
    43c8:	0e 94 ad 31 	call	0x635a	; 0x635a <strcpy>
	attach_ending(lm_msg);
    43cc:	80 e9       	ldi	r24, 0x90	; 144
    43ce:	92 e0       	ldi	r25, 0x02	; 2
    43d0:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <attach_ending>
	uart0_hal_send_string(lm_msg);
    43d4:	60 e9       	ldi	r22, 0x90	; 144
    43d6:	72 e0       	ldi	r23, 0x02	; 2
    43d8:	80 e8       	ldi	r24, 0x80	; 128
    43da:	0e 94 e6 20 	call	0x41cc	; 0x41cc <uart0_hal_send_string>
	
	wd_cnt=0;
    43de:	10 92 21 0d 	sts	0x0D21, r1	; 0x800d21 <wd_cnt>
	wd_cb_pointer=TC2_HAL_subscribe(&cb_watchdog_counter);
    43e2:	8b e6       	ldi	r24, 0x6B	; 107
    43e4:	94 e3       	ldi	r25, 0x34	; 52
    43e6:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <TC2_HAL_subscribe>
    43ea:	80 93 20 0d 	sts	0x0D20, r24	; 0x800d20 <wd_cb_pointer>
	
	while(!uart0_hal_message_ready() && wd_cnt<15);
    43ee:	0e 94 b8 33 	call	0x6770	; 0x6770 <uart0_hal_message_ready>
    43f2:	81 11       	cpse	r24, r1
    43f4:	04 c0       	rjmp	.+8      	; 0x43fe <util_lora_forward_msg+0x44>
    43f6:	80 91 21 0d 	lds	r24, 0x0D21	; 0x800d21 <wd_cnt>
    43fa:	8f 30       	cpi	r24, 0x0F	; 15
    43fc:	c0 f3       	brcs	.-16     	; 0x43ee <util_lora_forward_msg+0x34>
	TC2_HAL_cancel(wd_cb_pointer);
    43fe:	80 91 20 0d 	lds	r24, 0x0D20	; 0x800d20 <wd_cb_pointer>
    4402:	0e 94 9b 2c 	call	0x5936	; 0x5936 <TC2_HAL_cancel>
	if(wd_cnt>=15){
    4406:	80 91 21 0d 	lds	r24, 0x0D21	; 0x800d21 <wd_cnt>
    440a:	8f 30       	cpi	r24, 0x0F	; 15
    440c:	60 f0       	brcs	.+24     	; 0x4426 <util_lora_forward_msg+0x6c>
		strcpy(res, "no reply...");
    440e:	2c e0       	ldi	r18, 0x0C	; 12
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	45 ee       	ldi	r20, 0xE5	; 229
    4414:	58 e0       	ldi	r21, 0x08	; 8
    4416:	60 e0       	ldi	r22, 0x00	; 0
    4418:	ce 01       	movw	r24, r28
    441a:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		uart0_hal_read_message_as_str(res);
    441e:	ce 01       	movw	r24, r28
    4420:	0e 94 1a 30 	call	0x6034	; 0x6034 <uart0_hal_read_message_as_str>
    4424:	03 c0       	rjmp	.+6      	; 0x442c <util_lora_forward_msg+0x72>
	}else{
		uart0_hal_read_message_as_str(res);
    4426:	ce 01       	movw	r24, r28
    4428:	0e 94 1a 30 	call	0x6034	; 0x6034 <uart0_hal_read_message_as_str>
	}
}
    442c:	df 91       	pop	r29
    442e:	cf 91       	pop	r28
    4430:	08 95       	ret

Disassembly of section .text.util_send_break:

000069e0 <util_send_break>:

void util_send_break(){
	uart0_hal_send_break(0x55);
    69e0:	85 e5       	ldi	r24, 0x55	; 85
    69e2:	0e 94 a9 2a 	call	0x5552	; 0x5552 <uart0_hal_send_break>
    69e6:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

0000643a <MRPP_init_group>:
#include "mrpp.h"

static MRPP_STATE state;

uint8_t MRPP_init_group(COLLECTION collections[], uint8_t nCollections, uint8_t groupId){
    643a:	cf 93       	push	r28
    643c:	26 2f       	mov	r18, r22
    643e:	c4 2f       	mov	r28, r20
    mrpp_state_init(&state, groupId, collections, nCollections);
    6440:	ac 01       	movw	r20, r24
    6442:	6c 2f       	mov	r22, r28
    6444:	84 e9       	ldi	r24, 0x94	; 148
    6446:	9a e0       	ldi	r25, 0x0A	; 10
    6448:	0e 94 97 10 	call	0x212e	; 0x212e <mrpp_state_init>

    return groupId+1;
}
    644c:	81 e0       	ldi	r24, 0x01	; 1
    644e:	8c 0f       	add	r24, r28
    6450:	cf 91       	pop	r28
    6452:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

000046fa <MRPP_add_collection_data_INT16>:


void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    46fa:	ef 92       	push	r14
    46fc:	ff 92       	push	r15
    46fe:	1f 93       	push	r17
    4700:	cf 93       	push	r28
    4702:	df 93       	push	r29
    4704:	cd b7       	in	r28, 0x3d	; 61
    4706:	de b7       	in	r29, 0x3e	; 62
    4708:	2a 97       	sbiw	r28, 0x0a	; 10
    470a:	0f b6       	in	r0, 0x3f	; 63
    470c:	f8 94       	cli
    470e:	de bf       	out	0x3e, r29	; 62
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	cd bf       	out	0x3d, r28	; 61
    4714:	18 2f       	mov	r17, r24
    4716:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    4718:	9e 01       	movw	r18, r28
    471a:	2f 5f       	subi	r18, 0xFF	; 255
    471c:	3f 4f       	sbci	r19, 0xFF	; 255
    471e:	ab 01       	movw	r20, r22
    4720:	68 2f       	mov	r22, r24
    4722:	84 e9       	ldi	r24, 0x94	; 148
    4724:	9a e0       	ldi	r25, 0x0A	; 10
    4726:	0e 94 a3 20 	call	0x4146	; 0x4146 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    472a:	9e 01       	movw	r18, r28
    472c:	27 5f       	subi	r18, 0xF7	; 247
    472e:	3f 4f       	sbci	r19, 0xFF	; 255
    4730:	ae 01       	movw	r20, r28
    4732:	49 5f       	subi	r20, 0xF9	; 249
    4734:	5f 4f       	sbci	r21, 0xFF	; 255
    4736:	61 2f       	mov	r22, r17
    4738:	84 e9       	ldi	r24, 0x94	; 148
    473a:	9a e0       	ldi	r25, 0x0A	; 10
    473c:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    4740:	29 85       	ldd	r18, Y+9	; 0x09
    4742:	3a 85       	ldd	r19, Y+10	; 0x0a
    4744:	4f 81       	ldd	r20, Y+7	; 0x07
    4746:	58 85       	ldd	r21, Y+8	; 0x08
    4748:	b7 01       	movw	r22, r14
    474a:	ce 01       	movw	r24, r28
    474c:	01 96       	adiw	r24, 0x01	; 1
    474e:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <mrpp_data_add_int16>
}
    4752:	2a 96       	adiw	r28, 0x0a	; 10
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	de bf       	out	0x3e, r29	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	cd bf       	out	0x3d, r28	; 61
    475e:	df 91       	pop	r29
    4760:	cf 91       	pop	r28
    4762:	1f 91       	pop	r17
    4764:	ff 90       	pop	r15
    4766:	ef 90       	pop	r14
    4768:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

0000613a <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    613a:	cf 93       	push	r28
    613c:	df 93       	push	r29
    613e:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    6140:	84 e9       	ldi	r24, 0x94	; 148
    6142:	9a e0       	ldi	r25, 0x0A	; 10
    6144:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <mrpp_state_is_body_ready>
    6148:	88 83       	st	Y, r24
    614a:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    614c:	89 2f       	mov	r24, r25
    614e:	80 95       	com	r24
    
}
    6150:	88 1f       	adc	r24, r24
    6152:	88 27       	eor	r24, r24
    6154:	88 1f       	adc	r24, r24
    6156:	df 91       	pop	r29
    6158:	cf 91       	pop	r28
    615a:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00003efa <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    3efa:	af 92       	push	r10
    3efc:	bf 92       	push	r11
    3efe:	cf 92       	push	r12
    3f00:	df 92       	push	r13
    3f02:	ef 92       	push	r14
    3f04:	ff 92       	push	r15
    3f06:	0f 93       	push	r16
    3f08:	1f 93       	push	r17
    3f0a:	cf 93       	push	r28
    3f0c:	df 93       	push	r29
    3f0e:	00 d0       	rcall	.+0      	; 0x3f10 <MRPP_get_ready_body_package+0x16>
    3f10:	00 d0       	rcall	.+0      	; 0x3f12 <MRPP_get_ready_body_package+0x18>
    3f12:	1f 92       	push	r1
    3f14:	cd b7       	in	r28, 0x3d	; 61
    3f16:	de b7       	in	r29, 0x3e	; 62
    3f18:	6b 01       	movw	r12, r22
    3f1a:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    3f1c:	9e 01       	movw	r18, r28
    3f1e:	2b 5f       	subi	r18, 0xFB	; 251
    3f20:	3f 4f       	sbci	r19, 0xFF	; 255
    3f22:	79 01       	movw	r14, r18
    3f24:	8e 01       	movw	r16, r28
    3f26:	0d 5f       	subi	r16, 0xFD	; 253
    3f28:	1f 4f       	sbci	r17, 0xFF	; 255
    3f2a:	23 50       	subi	r18, 0x03	; 3
    3f2c:	31 09       	sbc	r19, r1
    3f2e:	ae 01       	movw	r20, r28
    3f30:	4f 5f       	subi	r20, 0xFF	; 255
    3f32:	5f 4f       	sbci	r21, 0xFF	; 255
    3f34:	bc 01       	movw	r22, r24
    3f36:	84 e9       	ldi	r24, 0x94	; 148
    3f38:	9a e0       	ldi	r25, 0x0A	; 10
    3f3a:	0e 94 33 18 	call	0x3066	; 0x3066 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    3f3e:	88 23       	and	r24, r24
    3f40:	b1 f0       	breq	.+44     	; 0x3f6e <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    3f42:	4d 81       	ldd	r20, Y+5	; 0x05
    3f44:	83 e0       	ldi	r24, 0x03	; 3
    3f46:	84 0f       	add	r24, r20
    3f48:	f5 01       	movw	r30, r10
    3f4a:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    3f4c:	80 91 94 0a 	lds	r24, 0x0A94	; 0x800a94 <state>
    3f50:	f6 01       	movw	r30, r12
    3f52:	80 83       	st	Z, r24
    package[1]=subId;
    3f54:	89 81       	ldd	r24, Y+1	; 0x01
    3f56:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    3f58:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5a:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    3f5c:	50 e0       	ldi	r21, 0x00	; 0
    3f5e:	6b 81       	ldd	r22, Y+3	; 0x03
    3f60:	7c 81       	ldd	r23, Y+4	; 0x04
    3f62:	c6 01       	movw	r24, r12
    3f64:	03 96       	adiw	r24, 0x03	; 3
    3f66:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <mrpp_data_get>

    return true;
    3f6a:	81 e0       	ldi	r24, 0x01	; 1
    3f6c:	01 c0       	rjmp	.+2      	; 0x3f70 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    3f6e:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    3f70:	0f 90       	pop	r0
    3f72:	0f 90       	pop	r0
    3f74:	0f 90       	pop	r0
    3f76:	0f 90       	pop	r0
    3f78:	0f 90       	pop	r0
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	1f 91       	pop	r17
    3f80:	0f 91       	pop	r16
    3f82:	ff 90       	pop	r15
    3f84:	ef 90       	pop	r14
    3f86:	df 90       	pop	r13
    3f88:	cf 90       	pop	r12
    3f8a:	bf 90       	pop	r11
    3f8c:	af 90       	pop	r10
    3f8e:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

000068fa <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    68fa:	bc 01       	movw	r22, r24
    68fc:	84 e9       	ldi	r24, 0x94	; 148
    68fe:	9a e0       	ldi	r25, 0x0A	; 10
    6900:	0e 94 33 31 	call	0x6266	; 0x6266 <mrpp_state_set_body_sent>
    6904:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

0000615c <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    615c:	cf 93       	push	r28
    615e:	df 93       	push	r29
    6160:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    6162:	20 91 94 0a 	lds	r18, 0x0A94	; 0x800a94 <state>
    6166:	fc 01       	movw	r30, r24
    6168:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    616a:	bf 01       	movw	r22, r30
    616c:	84 e9       	ldi	r24, 0x94	; 148
    616e:	9a e0       	ldi	r25, 0x0A	; 10
    6170:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <mrpp_state_get_header>
    *package_length+=1;
    6174:	8f 5f       	subi	r24, 0xFF	; 255
    6176:	88 83       	st	Y, r24
}
    6178:	df 91       	pop	r29
    617a:	cf 91       	pop	r28
    617c:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

0000617e <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    617e:	cf 93       	push	r28
    6180:	df 93       	push	r29
    6182:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    6184:	20 91 94 0a 	lds	r18, 0x0A94	; 0x800a94 <state>
    6188:	fc 01       	movw	r30, r24
    618a:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    618c:	bf 01       	movw	r22, r30
    618e:	84 e9       	ldi	r24, 0x94	; 148
    6190:	9a e0       	ldi	r25, 0x0A	; 10
    6192:	0e 94 9d 1c 	call	0x393a	; 0x393a <mrpp_state_get_tail>
    *package_length+=1;
    6196:	8f 5f       	subi	r24, 0xFF	; 255
    6198:	88 83       	st	Y, r24
}
    619a:	df 91       	pop	r29
    619c:	cf 91       	pop	r28
    619e:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00006970 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    6970:	84 e9       	ldi	r24, 0x94	; 148
    6972:	9a e0       	ldi	r25, 0x0A	; 10
    6974:	0e 94 05 30 	call	0x600a	; 0x600a <mrpp_state_all_bodies_sent>
}
    6978:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

000040b8 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    40b8:	cf 92       	push	r12
    40ba:	df 92       	push	r13
    40bc:	ff 92       	push	r15
    40be:	0f 93       	push	r16
    40c0:	1f 93       	push	r17
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29
    40c6:	89 01       	movw	r16, r18
    
    //add meta
    for (uint16_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    40c8:	fa 01       	movw	r30, r20
    40ca:	0b c0       	rjmp	.+22     	; 0x40e2 <mrpp_data_add_int16+0x2a>
    {
        storage[i]=metadata[i-begin];
    40cc:	df 01       	movw	r26, r30
    40ce:	a4 1b       	sub	r26, r20
    40d0:	b5 0b       	sbc	r27, r21
    40d2:	a8 0f       	add	r26, r24
    40d4:	b9 1f       	adc	r27, r25
    40d6:	3c 91       	ld	r19, X
    40d8:	df 01       	movw	r26, r30
    40da:	a6 57       	subi	r26, 0x76	; 118
    40dc:	bc 4f       	sbci	r27, 0xFC	; 252
    40de:	3c 93       	st	X, r19
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint16_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    40e0:	31 96       	adiw	r30, 0x01	; 1
    40e2:	6a 01       	movw	r12, r20
    40e4:	26 e0       	ldi	r18, 0x06	; 6
    40e6:	c2 0e       	add	r12, r18
    40e8:	d1 1c       	adc	r13, r1
    40ea:	ec 15       	cp	r30, r12
    40ec:	fd 05       	cpc	r31, r13
    40ee:	70 f3       	brcs	.-36     	; 0x40cc <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    40f0:	98 01       	movw	r18, r16
    40f2:	26 50       	subi	r18, 0x06	; 6
    40f4:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    40f6:	36 95       	lsr	r19
    40f8:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    40fa:	49 5f       	subi	r20, 0xF9	; 249
    40fc:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    40fe:	a0 e0       	ldi	r26, 0x00	; 0
    4100:	b0 e0       	ldi	r27, 0x00	; 0
    4102:	16 c0       	rjmp	.+44     	; 0x4130 <mrpp_data_add_int16+0x78>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    4104:	cd 01       	movw	r24, r26
    4106:	88 0f       	add	r24, r24
    4108:	99 1f       	adc	r25, r25
    410a:	f6 01       	movw	r30, r12
    410c:	e8 0f       	add	r30, r24
    410e:	f9 1f       	adc	r31, r25
    4110:	8b 01       	movw	r16, r22
    4112:	08 0f       	add	r16, r24
    4114:	19 1f       	adc	r17, r25
    4116:	e8 01       	movw	r28, r16
    4118:	f9 80       	ldd	r15, Y+1	; 0x01
    411a:	e6 57       	subi	r30, 0x76	; 118
    411c:	fc 4f       	sbci	r31, 0xFC	; 252
    411e:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    4120:	84 0f       	add	r24, r20
    4122:	95 1f       	adc	r25, r21
    4124:	18 81       	ld	r17, Y
    4126:	fc 01       	movw	r30, r24
    4128:	e6 57       	subi	r30, 0x76	; 118
    412a:	fc 4f       	sbci	r31, 0xFC	; 252
    412c:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    412e:	11 96       	adiw	r26, 0x01	; 1
    4130:	a2 17       	cp	r26, r18
    4132:	b3 07       	cpc	r27, r19
    4134:	38 f3       	brcs	.-50     	; 0x4104 <mrpp_data_add_int16+0x4c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    4136:	df 91       	pop	r29
    4138:	cf 91       	pop	r28
    413a:	1f 91       	pop	r17
    413c:	0f 91       	pop	r16
    413e:	ff 90       	pop	r15
    4140:	df 90       	pop	r13
    4142:	cf 90       	pop	r12
    4144:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00005e66 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    5e66:	cf 93       	push	r28
    5e68:	df 93       	push	r29
    5e6a:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    5e6c:	20 e0       	ldi	r18, 0x00	; 0
    5e6e:	30 e0       	ldi	r19, 0x00	; 0
    5e70:	0c c0       	rjmp	.+24     	; 0x5e8a <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    5e72:	de 01       	movw	r26, r28
    5e74:	a2 0f       	add	r26, r18
    5e76:	b3 1f       	adc	r27, r19
    5e78:	f9 01       	movw	r30, r18
    5e7a:	e6 0f       	add	r30, r22
    5e7c:	f7 1f       	adc	r31, r23
    5e7e:	e6 57       	subi	r30, 0x76	; 118
    5e80:	fc 4f       	sbci	r31, 0xFC	; 252
    5e82:	90 81       	ld	r25, Z
    5e84:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    5e86:	2f 5f       	subi	r18, 0xFF	; 255
    5e88:	3f 4f       	sbci	r19, 0xFF	; 255
    5e8a:	24 17       	cp	r18, r20
    5e8c:	35 07       	cpc	r19, r21
    5e8e:	88 f3       	brcs	.-30     	; 0x5e72 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    5e90:	df 91       	pop	r29
    5e92:	cf 91       	pop	r28
    5e94:	08 95       	ret

Disassembly of section .text.add_data_types:

00003a90 <add_data_types>:
        package[i*4+13]=state->collections[i].length;
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    3a90:	cf 93       	push	r28
    3a92:	dc 01       	movw	r26, r24
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	4d c0       	rjmp	.+154    	; 0x3b32 <add_data_types+0xa2>
    {
        uint8_t bitArray=0x00;
        for (uint8_t index = 0; index < 4; index++)
        {
            //If there is no more collection just skip and use default 0x00
            uint8_t nCol=bIndex*4+index;
    3a98:	28 2f       	mov	r18, r24
    3a9a:	22 0f       	add	r18, r18
    3a9c:	22 0f       	add	r18, r18
    3a9e:	29 0f       	add	r18, r25
            if(nCol+1>state->nCollections) break;
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	f9 01       	movw	r30, r18
    3aa4:	31 96       	adiw	r30, 0x01	; 1
    3aa6:	12 96       	adiw	r26, 0x02	; 2
    3aa8:	4c 91       	ld	r20, X
    3aaa:	12 97       	sbiw	r26, 0x02	; 2
    3aac:	50 e0       	ldi	r21, 0x00	; 0
    3aae:	4e 17       	cp	r20, r30
    3ab0:	5f 07       	cpc	r21, r31
    3ab2:	bc f1       	brlt	.+110    	; 0x3b22 <add_data_types+0x92>

            uint8_t shifts=index*2;
    3ab4:	49 2f       	mov	r20, r25
    3ab6:	44 0f       	add	r20, r20
            switch (state->collections[nCol].type)
    3ab8:	f9 01       	movw	r30, r18
    3aba:	ee 0f       	add	r30, r30
    3abc:	ff 1f       	adc	r31, r31
    3abe:	22 0f       	add	r18, r18
    3ac0:	33 1f       	adc	r19, r19
    3ac2:	22 0f       	add	r18, r18
    3ac4:	33 1f       	adc	r19, r19
    3ac6:	22 0f       	add	r18, r18
    3ac8:	33 1f       	adc	r19, r19
    3aca:	e2 0f       	add	r30, r18
    3acc:	f3 1f       	adc	r31, r19
    3ace:	ea 0f       	add	r30, r26
    3ad0:	fb 1f       	adc	r31, r27
    3ad2:	27 81       	ldd	r18, Z+7	; 0x07
    3ad4:	22 30       	cpi	r18, 0x02	; 2
    3ad6:	69 f0       	breq	.+26     	; 0x3af2 <add_data_types+0x62>
    3ad8:	24 30       	cpi	r18, 0x04	; 4
    3ada:	a1 f0       	breq	.+40     	; 0x3b04 <add_data_types+0x74>
    3adc:	21 30       	cpi	r18, 0x01	; 1
    3ade:	d1 f4       	brne	.+52     	; 0x3b14 <add_data_types+0x84>
            {
                case T_INT8:
                    bitArray |=1 << shifts;
    3ae0:	21 e0       	ldi	r18, 0x01	; 1
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	02 c0       	rjmp	.+4      	; 0x3aea <add_data_types+0x5a>
    3ae6:	22 0f       	add	r18, r18
    3ae8:	33 1f       	adc	r19, r19
    3aea:	4a 95       	dec	r20
    3aec:	e2 f7       	brpl	.-8      	; 0x3ae6 <add_data_types+0x56>
    3aee:	c2 2b       	or	r28, r18
                    break;
    3af0:	11 c0       	rjmp	.+34     	; 0x3b14 <add_data_types+0x84>
                
                case T_INT16:
                    bitArray |= 2 << shifts;
    3af2:	22 e0       	ldi	r18, 0x02	; 2
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	02 c0       	rjmp	.+4      	; 0x3afc <add_data_types+0x6c>
    3af8:	22 0f       	add	r18, r18
    3afa:	33 1f       	adc	r19, r19
    3afc:	4a 95       	dec	r20
    3afe:	e2 f7       	brpl	.-8      	; 0x3af8 <add_data_types+0x68>
    3b00:	c2 2b       	or	r28, r18
                    break;
    3b02:	08 c0       	rjmp	.+16     	; 0x3b14 <add_data_types+0x84>

                case T_FLOAT:
                    bitArray |= 3 << shifts;
    3b04:	23 e0       	ldi	r18, 0x03	; 3
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	02 c0       	rjmp	.+4      	; 0x3b0e <add_data_types+0x7e>
    3b0a:	22 0f       	add	r18, r18
    3b0c:	33 1f       	adc	r19, r19
    3b0e:	4a 95       	dec	r20
    3b10:	e2 f7       	brpl	.-8      	; 0x3b0a <add_data_types+0x7a>
    3b12:	c2 2b       	or	r28, r18

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    {
        uint8_t bitArray=0x00;
        for (uint8_t index = 0; index < 4; index++)
    3b14:	9f 5f       	subi	r25, 0xFF	; 255
    3b16:	02 c0       	rjmp	.+4      	; 0x3b1c <add_data_types+0x8c>
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	c0 e0       	ldi	r28, 0x00	; 0
    3b1c:	94 30       	cpi	r25, 0x04	; 4
    3b1e:	08 f4       	brcc	.+2      	; 0x3b22 <add_data_types+0x92>
    3b20:	bb cf       	rjmp	.-138    	; 0x3a98 <add_data_types+0x8>
                    break;
            }

        }
        //set from the end
        dt[5-bIndex]=bitArray;
    3b22:	e5 e0       	ldi	r30, 0x05	; 5
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	e8 1b       	sub	r30, r24
    3b28:	f1 09       	sbc	r31, r1
    3b2a:	e6 0f       	add	r30, r22
    3b2c:	f7 1f       	adc	r31, r23
    3b2e:	c0 83       	st	Z, r28
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    3b30:	8f 5f       	subi	r24, 0xFF	; 255
    3b32:	86 30       	cpi	r24, 0x06	; 6
    3b34:	88 f3       	brcs	.-30     	; 0x3b18 <add_data_types+0x88>
        //set from the end
        dt[5-bIndex]=bitArray;
        
    }
    
} 
    3b36:	cf 91       	pop	r28
    3b38:	08 95       	ret

Disassembly of section .text.update_bodies:

00002408 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    2408:	cf 93       	push	r28
    240a:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    240c:	26 2f       	mov	r18, r22
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	c9 01       	movw	r24, r18
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f9 01       	movw	r30, r18
    2416:	ee 0f       	add	r30, r30
    2418:	ff 1f       	adc	r31, r31
    241a:	22 0f       	add	r18, r18
    241c:	33 1f       	adc	r19, r19
    241e:	22 0f       	add	r18, r18
    2420:	33 1f       	adc	r19, r19
    2422:	22 0f       	add	r18, r18
    2424:	33 1f       	adc	r19, r19
    2426:	e2 0f       	add	r30, r18
    2428:	f3 1f       	adc	r31, r19
    242a:	ea 0f       	add	r30, r26
    242c:	fb 1f       	adc	r31, r27
    242e:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    2430:	c0 e0       	ldi	r28, 0x00	; 0
    2432:	25 c0       	rjmp	.+74     	; 0x247e <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    2434:	82 17       	cp	r24, r18
    2436:	93 07       	cpc	r25, r19
    2438:	09 f1       	breq	.+66     	; 0x247c <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    243a:	a9 01       	movw	r20, r18
    243c:	44 0f       	add	r20, r20
    243e:	55 1f       	adc	r21, r21
    2440:	44 0f       	add	r20, r20
    2442:	55 1f       	adc	r21, r21
    2444:	44 0f       	add	r20, r20
    2446:	55 1f       	adc	r21, r21
    2448:	f9 01       	movw	r30, r18
    244a:	ee 0f       	add	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	e4 0f       	add	r30, r20
    2450:	f5 1f       	adc	r31, r21
    2452:	ea 0f       	add	r30, r26
    2454:	fb 1f       	adc	r31, r27
    2456:	43 85       	ldd	r20, Z+11	; 0x0b
    2458:	74 13       	cpse	r23, r20
    245a:	10 c0       	rjmp	.+32     	; 0x247c <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    245c:	f9 01       	movw	r30, r18
    245e:	ee 0f       	add	r30, r30
    2460:	ff 1f       	adc	r31, r31
    2462:	22 0f       	add	r18, r18
    2464:	33 1f       	adc	r19, r19
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	22 0f       	add	r18, r18
    246c:	33 1f       	adc	r19, r19
    246e:	e2 0f       	add	r30, r18
    2470:	f3 1f       	adc	r31, r19
    2472:	ea 0f       	add	r30, r26
    2474:	fb 1f       	adc	r31, r27
    2476:	24 85       	ldd	r18, Z+12	; 0x0c
    2478:	23 30       	cpi	r18, 0x03	; 3
    247a:	41 f4       	brne	.+16     	; 0x248c <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    247c:	cf 5f       	subi	r28, 0xFF	; 255
    247e:	2c 2f       	mov	r18, r28
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	28 17       	cp	r18, r24
    2484:	39 07       	cpc	r19, r25
    2486:	b4 f2       	brlt	.-84     	; 0x2434 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    2488:	21 e0       	ldi	r18, 0x01	; 1
    248a:	01 c0       	rjmp	.+2      	; 0x248e <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    248c:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    248e:	22 23       	and	r18, r18
    2490:	39 f0       	breq	.+14     	; 0x24a0 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    2492:	fd 01       	movw	r30, r26
    2494:	e7 0f       	add	r30, r23
    2496:	f1 1d       	adc	r31, r1
    2498:	ec 55       	subi	r30, 0x5C	; 92
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	21 e0       	ldi	r18, 0x01	; 1
    249e:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    24a0:	9c 01       	movw	r18, r24
    24a2:	22 0f       	add	r18, r18
    24a4:	33 1f       	adc	r19, r19
    24a6:	22 0f       	add	r18, r18
    24a8:	33 1f       	adc	r19, r19
    24aa:	22 0f       	add	r18, r18
    24ac:	33 1f       	adc	r19, r19
    24ae:	fc 01       	movw	r30, r24
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	e2 0f       	add	r30, r18
    24b6:	f3 1f       	adc	r31, r19
    24b8:	ea 0f       	add	r30, r26
    24ba:	fb 1f       	adc	r31, r27
    24bc:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    24be:	29 c0       	rjmp	.+82     	; 0x2512 <update_bodies+0x10a>
    {
        if(i==collectionId-1) continue;
    24c0:	46 2f       	mov	r20, r22
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	84 17       	cp	r24, r20
    24c6:	95 07       	cpc	r25, r21
    24c8:	19 f1       	breq	.+70     	; 0x2510 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    24ca:	9a 01       	movw	r18, r20
    24cc:	2f 5f       	subi	r18, 0xFF	; 255
    24ce:	3f 4f       	sbci	r19, 0xFF	; 255
    24d0:	f9 01       	movw	r30, r18
    24d2:	ee 0f       	add	r30, r30
    24d4:	ff 1f       	adc	r31, r31
    24d6:	22 0f       	add	r18, r18
    24d8:	33 1f       	adc	r19, r19
    24da:	22 0f       	add	r18, r18
    24dc:	33 1f       	adc	r19, r19
    24de:	22 0f       	add	r18, r18
    24e0:	33 1f       	adc	r19, r19
    24e2:	e2 0f       	add	r30, r18
    24e4:	f3 1f       	adc	r31, r19
    24e6:	ea 0f       	add	r30, r26
    24e8:	fb 1f       	adc	r31, r27
    24ea:	20 81       	ld	r18, Z
    24ec:	c2 13       	cpse	r28, r18
    24ee:	10 c0       	rjmp	.+32     	; 0x2510 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    24f0:	fa 01       	movw	r30, r20
    24f2:	ee 0f       	add	r30, r30
    24f4:	ff 1f       	adc	r31, r31
    24f6:	44 0f       	add	r20, r20
    24f8:	55 1f       	adc	r21, r21
    24fa:	44 0f       	add	r20, r20
    24fc:	55 1f       	adc	r21, r21
    24fe:	44 0f       	add	r20, r20
    2500:	55 1f       	adc	r21, r21
    2502:	e4 0f       	add	r30, r20
    2504:	f5 1f       	adc	r31, r21
    2506:	ea 0f       	add	r30, r26
    2508:	fb 1f       	adc	r31, r27
    250a:	24 85       	ldd	r18, Z+12	; 0x0c
    250c:	23 30       	cpi	r18, 0x03	; 3
    250e:	41 f4       	brne	.+16     	; 0x2520 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    2510:	6f 5f       	subi	r22, 0xFF	; 255
    2512:	12 96       	adiw	r26, 0x02	; 2
    2514:	2c 91       	ld	r18, X
    2516:	12 97       	sbiw	r26, 0x02	; 2
    2518:	62 17       	cp	r22, r18
    251a:	90 f2       	brcs	.-92     	; 0x24c0 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <update_bodies+0x11a>
    {
        if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    2520:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    2522:	88 23       	and	r24, r24
    2524:	41 f0       	breq	.+16     	; 0x2536 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    2526:	fd 01       	movw	r30, r26
    2528:	ec 0f       	add	r30, r28
    252a:	f1 1d       	adc	r31, r1
    252c:	ec 55       	subi	r30, 0x5C	; 92
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	80 83       	st	Z, r24
    2534:	06 c0       	rjmp	.+12     	; 0x2542 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    2536:	fd 01       	movw	r30, r26
    2538:	ec 0f       	add	r30, r28
    253a:	f1 1d       	adc	r31, r1
    253c:	ec 55       	subi	r30, 0x5C	; 92
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    2542:	8c 2f       	mov	r24, r28
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	87 1b       	sub	r24, r23
    2548:	91 09       	sbc	r25, r1
    254a:	02 97       	sbiw	r24, 0x02	; 2
    254c:	64 f0       	brlt	.+24     	; 0x2566 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    254e:	7f 5f       	subi	r23, 0xFF	; 255
    2550:	08 c0       	rjmp	.+16     	; 0x2562 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    2552:	fd 01       	movw	r30, r26
    2554:	e7 0f       	add	r30, r23
    2556:	f1 1d       	adc	r31, r1
    2558:	ec 55       	subi	r30, 0x5C	; 92
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    2560:	7f 5f       	subi	r23, 0xFF	; 255
    2562:	7c 17       	cp	r23, r28
    2564:	b0 f3       	brcs	.-20     	; 0x2552 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    2566:	cf 91       	pop	r28
    2568:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

0000212e <mrpp_state_init>:


static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    212e:	af 92       	push	r10
    2130:	bf 92       	push	r11
    2132:	cf 92       	push	r12
    2134:	df 92       	push	r13
    2136:	ef 92       	push	r14
    2138:	ff 92       	push	r15
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	6c 01       	movw	r12, r24
    2144:	a2 2e       	mov	r10, r18
    state->groupId=groupId;
    2146:	fc 01       	movw	r30, r24
    2148:	60 83       	st	Z, r22
    state->nCollections=nCollections;
    214a:	22 83       	std	Z+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    214c:	b1 2c       	mov	r11, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    214e:	00 e0       	ldi	r16, 0x00	; 0
    2150:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    2152:	70 c0       	rjmp	.+224    	; 0x2234 <mrpp_state_init+0x106>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    2154:	eb 2d       	mov	r30, r11
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	df 01       	movw	r26, r30
    215a:	aa 0f       	add	r26, r26
    215c:	bb 1f       	adc	r27, r27
    215e:	aa 0f       	add	r26, r26
    2160:	bb 1f       	adc	r27, r27
    2162:	ae 0f       	add	r26, r30
    2164:	bf 1f       	adc	r27, r31
    2166:	a4 0f       	add	r26, r20
    2168:	b5 1f       	adc	r27, r21
    216a:	12 96       	adiw	r26, 0x02	; 2
    216c:	2d 91       	ld	r18, X+
    216e:	3c 91       	ld	r19, X
    2170:	13 97       	sbiw	r26, 0x03	; 3
    2172:	ef 01       	movw	r28, r30
    2174:	cc 0f       	add	r28, r28
    2176:	dd 1f       	adc	r29, r29
    2178:	cf 01       	movw	r24, r30
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	c8 0f       	add	r28, r24
    2188:	d9 1f       	adc	r29, r25
    218a:	cc 0d       	add	r28, r12
    218c:	dd 1d       	adc	r29, r13
    218e:	39 87       	std	Y+9, r19	; 0x09
    2190:	28 87       	std	Y+8, r18	; 0x08

        //type
        state->collections[i].type=collections[i].type;
    2192:	14 96       	adiw	r26, 0x04	; 4
    2194:	8c 91       	ld	r24, X
    2196:	14 97       	sbiw	r26, 0x04	; 4
    2198:	8f 83       	std	Y+7, r24	; 0x07

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    219a:	1c 83       	std	Y+4, r17	; 0x04
    219c:	0b 83       	std	Y+3, r16	; 0x03
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    219e:	8d 91       	ld	r24, X+
    21a0:	9c 91       	ld	r25, X
    21a2:	11 97       	sbiw	r26, 0x01	; 1
    21a4:	14 96       	adiw	r26, 0x04	; 4
    21a6:	2c 91       	ld	r18, X
    21a8:	28 9f       	mul	r18, r24
    21aa:	70 01       	movw	r14, r0
    21ac:	29 9f       	mul	r18, r25
    21ae:	f0 0c       	add	r15, r0
    21b0:	11 24       	eor	r1, r1
    21b2:	86 e0       	ldi	r24, 0x06	; 6
    21b4:	e8 0e       	add	r14, r24
    21b6:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    21b8:	fe 82       	std	Y+6, r15	; 0x06
    21ba:	ed 82       	std	Y+5, r14	; 0x05
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    21bc:	98 01       	movw	r18, r16
    21be:	a1 ed       	ldi	r26, 0xD1	; 209
    21c0:	b1 e5       	ldi	r27, 0x51	; 81
    21c2:	0e 94 9e 31 	call	0x633c	; 0x633c <__umulhisi3>
    21c6:	28 1b       	sub	r18, r24
    21c8:	39 0b       	sbc	r19, r25
    21ca:	36 95       	lsr	r19
    21cc:	27 95       	ror	r18
    21ce:	82 0f       	add	r24, r18
    21d0:	93 1f       	adc	r25, r19
    21d2:	00 24       	eor	r0, r0
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	00 1c       	adc	r0, r0
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	00 1c       	adc	r0, r0
    21e0:	89 2f       	mov	r24, r25
    21e2:	90 2d       	mov	r25, r0
    21e4:	31 96       	adiw	r30, 0x01	; 1
    21e6:	9f 01       	movw	r18, r30
    21e8:	22 0f       	add	r18, r18
    21ea:	33 1f       	adc	r19, r19
    21ec:	ee 0f       	add	r30, r30
    21ee:	ff 1f       	adc	r31, r31
    21f0:	ee 0f       	add	r30, r30
    21f2:	ff 1f       	adc	r31, r31
    21f4:	ee 0f       	add	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	e2 0f       	add	r30, r18
    21fa:	f3 1f       	adc	r31, r19
    21fc:	ec 0d       	add	r30, r12
    21fe:	fd 1d       	adc	r31, r13
    2200:	80 83       	st	Z, r24
        uint8_t endsInBody=(startingIndex+len-1)/DR_BODY_PAYLOAD_SIZE;
    2202:	0e 0d       	add	r16, r14
    2204:	1f 1d       	adc	r17, r15
    2206:	f8 01       	movw	r30, r16
    2208:	31 97       	sbiw	r30, 0x01	; 1
    220a:	9f 01       	movw	r18, r30
    220c:	0e 94 9e 31 	call	0x633c	; 0x633c <__umulhisi3>
    2210:	e8 1b       	sub	r30, r24
    2212:	f9 0b       	sbc	r31, r25
    2214:	f6 95       	lsr	r31
    2216:	e7 95       	ror	r30
    2218:	8e 0f       	add	r24, r30
    221a:	9f 1f       	adc	r25, r31
    221c:	00 24       	eor	r0, r0
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	00 1c       	adc	r0, r0
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	00 1c       	adc	r0, r0
    222a:	89 2f       	mov	r24, r25
    222c:	90 2d       	mov	r25, r0

        //Simpler solution above
        state->collections[i].endsInBody=endsInBody;
    222e:	8b 87       	std	Y+11, r24	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    2230:	1c 86       	std	Y+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    2232:	b3 94       	inc	r11
    2234:	ba 14       	cp	r11, r10
    2236:	08 f4       	brcc	.+2      	; 0x223a <mrpp_state_init+0x10c>
    2238:	8d cf       	rjmp	.-230    	; 0x2154 <mrpp_state_init+0x26>
        startingIndex+=len;      
    }

    //Calculate lastSubId
    
    uint8_t lastSubId=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    223a:	01 50       	subi	r16, 0x01	; 1
    223c:	11 09       	sbc	r17, r1
    223e:	98 01       	movw	r18, r16
    2240:	a1 ed       	ldi	r26, 0xD1	; 209
    2242:	b1 e5       	ldi	r27, 0x51	; 81
    2244:	0e 94 9e 31 	call	0x633c	; 0x633c <__umulhisi3>
    2248:	08 1b       	sub	r16, r24
    224a:	19 0b       	sbc	r17, r25
    224c:	16 95       	lsr	r17
    224e:	07 95       	ror	r16
    2250:	80 0f       	add	r24, r16
    2252:	91 1f       	adc	r25, r17
    2254:	00 24       	eor	r0, r0
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	00 1c       	adc	r0, r0
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	00 1c       	adc	r0, r0
    2262:	89 2f       	mov	r24, r25
    2264:	90 2d       	mov	r25, r0
    2266:	92 e0       	ldi	r25, 0x02	; 2
    2268:	98 0f       	add	r25, r24
    state->lastSubId=lastSubId;
    226a:	f6 01       	movw	r30, r12
    226c:	91 83       	std	Z+1, r25	; 0x01
    
    //calculate bodies
    uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    226e:	8f 5f       	subi	r24, 0xFF	; 255
    state->nBodies=nBodies;
    2270:	ed 55       	subi	r30, 0x5D	; 93
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 83       	st	Z, r24

    for (uint8_t i = 0; i < nBodies; i++)
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	07 c0       	rjmp	.+14     	; 0x2288 <mrpp_state_init+0x15a>
    {
        state->bodies[i]=WAITING;
    227a:	f6 01       	movw	r30, r12
    227c:	e9 0f       	add	r30, r25
    227e:	f1 1d       	adc	r31, r1
    2280:	ec 55       	subi	r30, 0x5C	; 92
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	10 82       	st	Z, r1
    
    //calculate bodies
    uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    2286:	9f 5f       	subi	r25, 0xFF	; 255
    2288:	98 17       	cp	r25, r24
    228a:	b8 f3       	brcs	.-18     	; 0x227a <mrpp_state_init+0x14c>
    {
        state->bodies[i]=WAITING;
    }
}
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	ff 90       	pop	r15
    2296:	ef 90       	pop	r14
    2298:	df 90       	pop	r13
    229a:	cf 90       	pop	r12
    229c:	bf 90       	pop	r11
    229e:	af 90       	pop	r10
    22a0:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00003b3a <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	8c 01       	movw	r16, r24
    3b44:	eb 01       	movw	r28, r22
    package[0]=0;
    3b46:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    3b48:	fc 01       	movw	r30, r24
    3b4a:	81 81       	ldd	r24, Z+1	; 0x01
    3b4c:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3b4e:	1a 82       	std	Y+2, r1	; 0x02

    //N collections
    package[3]=state->nCollections;
    3b50:	82 81       	ldd	r24, Z+2	; 0x02
    3b52:	8b 83       	std	Y+3, r24	; 0x03

    //add data type
    add_data_types(state, &package[4]);
    3b54:	6c 5f       	subi	r22, 0xFC	; 252
    3b56:	7f 4f       	sbci	r23, 0xFF	; 255
    3b58:	c8 01       	movw	r24, r16
    3b5a:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	35 c0       	rjmp	.+106    	; 0x3bcc <mrpp_state_get_header+0x92>
    {
        package[i*4+10]=state->collections[i].startIndex >> 8;
    3b62:	82 2f       	mov	r24, r18
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	dc 01       	movw	r26, r24
    3b68:	aa 0f       	add	r26, r26
    3b6a:	bb 1f       	adc	r27, r27
    3b6c:	aa 0f       	add	r26, r26
    3b6e:	bb 1f       	adc	r27, r27
    3b70:	ad 01       	movw	r20, r26
    3b72:	46 5f       	subi	r20, 0xF6	; 246
    3b74:	5f 4f       	sbci	r21, 0xFF	; 255
    3b76:	4c 0f       	add	r20, r28
    3b78:	5d 1f       	adc	r21, r29
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	ee 0f       	add	r30, r30
    3b7e:	ff 1f       	adc	r31, r31
    3b80:	88 0f       	add	r24, r24
    3b82:	99 1f       	adc	r25, r25
    3b84:	88 0f       	add	r24, r24
    3b86:	99 1f       	adc	r25, r25
    3b88:	88 0f       	add	r24, r24
    3b8a:	99 1f       	adc	r25, r25
    3b8c:	e8 0f       	add	r30, r24
    3b8e:	f9 1f       	adc	r31, r25
    3b90:	bf 01       	movw	r22, r30
    3b92:	60 0f       	add	r22, r16
    3b94:	71 1f       	adc	r23, r17
    3b96:	fb 01       	movw	r30, r22
    3b98:	84 81       	ldd	r24, Z+4	; 0x04
    3b9a:	fa 01       	movw	r30, r20
    3b9c:	80 83       	st	Z, r24
        package[i*4+11]=state->collections[i].startIndex;
    3b9e:	cd 01       	movw	r24, r26
    3ba0:	0b 96       	adiw	r24, 0x0b	; 11
    3ba2:	8c 0f       	add	r24, r28
    3ba4:	9d 1f       	adc	r25, r29
    3ba6:	fb 01       	movw	r30, r22
    3ba8:	33 81       	ldd	r19, Z+3	; 0x03
    3baa:	fc 01       	movw	r30, r24
    3bac:	30 83       	st	Z, r19
        package[i*4+12]=state->collections[i].length>>8;
    3bae:	cd 01       	movw	r24, r26
    3bb0:	0c 96       	adiw	r24, 0x0c	; 12
    3bb2:	8c 0f       	add	r24, r28
    3bb4:	9d 1f       	adc	r25, r29
    3bb6:	fb 01       	movw	r30, r22
    3bb8:	36 81       	ldd	r19, Z+6	; 0x06
    3bba:	fc 01       	movw	r30, r24
    3bbc:	30 83       	st	Z, r19
        package[i*4+13]=state->collections[i].length;
    3bbe:	1d 96       	adiw	r26, 0x0d	; 13
    3bc0:	ac 0f       	add	r26, r28
    3bc2:	bd 1f       	adc	r27, r29
    3bc4:	fb 01       	movw	r30, r22
    3bc6:	85 81       	ldd	r24, Z+5	; 0x05
    3bc8:	8c 93       	st	X, r24
    package[3]=state->nCollections;

    //add data type
    add_data_types(state, &package[4]);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3bca:	2f 5f       	subi	r18, 0xFF	; 255
    3bcc:	f8 01       	movw	r30, r16
    3bce:	82 81       	ldd	r24, Z+2	; 0x02
    3bd0:	28 17       	cp	r18, r24
    3bd2:	38 f2       	brcs	.-114    	; 0x3b62 <mrpp_state_get_header+0x28>
        package[i*4+11]=state->collections[i].startIndex;
        package[i*4+12]=state->collections[i].length>>8;
        package[i*4+13]=state->collections[i].length;
    }
    
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3bd4:	88 0f       	add	r24, r24
    3bd6:	88 0f       	add	r24, r24
}
    3bd8:	86 5f       	subi	r24, 0xF6	; 246
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	1f 91       	pop	r17
    3be0:	0f 91       	pop	r16
    3be2:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

0000393a <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    393a:	0f 93       	push	r16
    393c:	1f 93       	push	r17
    393e:	cf 93       	push	r28
    3940:	df 93       	push	r29
    3942:	8c 01       	movw	r16, r24
    3944:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    3946:	fc 01       	movw	r30, r24
    3948:	81 81       	ldd	r24, Z+1	; 0x01
    394a:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    394c:	81 81       	ldd	r24, Z+1	; 0x01
    394e:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3950:	1a 82       	std	Y+2, r1	; 0x02

    //N collections
    package[3]=state->nCollections;
    3952:	82 81       	ldd	r24, Z+2	; 0x02
    3954:	8b 83       	std	Y+3, r24	; 0x03

    //add data type
    add_data_types(state, &package[4]);
    3956:	6c 5f       	subi	r22, 0xFC	; 252
    3958:	7f 4f       	sbci	r23, 0xFF	; 255
    395a:	c8 01       	movw	r24, r16
    395c:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	35 c0       	rjmp	.+106    	; 0x39ce <mrpp_state_get_tail+0x94>
    {
        package[i*4+10]=state->collections[i].startIndex >> 8;
    3964:	82 2f       	mov	r24, r18
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	dc 01       	movw	r26, r24
    396a:	aa 0f       	add	r26, r26
    396c:	bb 1f       	adc	r27, r27
    396e:	aa 0f       	add	r26, r26
    3970:	bb 1f       	adc	r27, r27
    3972:	ad 01       	movw	r20, r26
    3974:	46 5f       	subi	r20, 0xF6	; 246
    3976:	5f 4f       	sbci	r21, 0xFF	; 255
    3978:	4c 0f       	add	r20, r28
    397a:	5d 1f       	adc	r21, r29
    397c:	fc 01       	movw	r30, r24
    397e:	ee 0f       	add	r30, r30
    3980:	ff 1f       	adc	r31, r31
    3982:	88 0f       	add	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	88 0f       	add	r24, r24
    3988:	99 1f       	adc	r25, r25
    398a:	88 0f       	add	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	e8 0f       	add	r30, r24
    3990:	f9 1f       	adc	r31, r25
    3992:	bf 01       	movw	r22, r30
    3994:	60 0f       	add	r22, r16
    3996:	71 1f       	adc	r23, r17
    3998:	fb 01       	movw	r30, r22
    399a:	84 81       	ldd	r24, Z+4	; 0x04
    399c:	fa 01       	movw	r30, r20
    399e:	80 83       	st	Z, r24
        package[i*4+11]=state->collections[i].startIndex;
    39a0:	cd 01       	movw	r24, r26
    39a2:	0b 96       	adiw	r24, 0x0b	; 11
    39a4:	8c 0f       	add	r24, r28
    39a6:	9d 1f       	adc	r25, r29
    39a8:	fb 01       	movw	r30, r22
    39aa:	33 81       	ldd	r19, Z+3	; 0x03
    39ac:	fc 01       	movw	r30, r24
    39ae:	30 83       	st	Z, r19
        package[i*4+12]=state->collections[i].length>>8;
    39b0:	cd 01       	movw	r24, r26
    39b2:	0c 96       	adiw	r24, 0x0c	; 12
    39b4:	8c 0f       	add	r24, r28
    39b6:	9d 1f       	adc	r25, r29
    39b8:	fb 01       	movw	r30, r22
    39ba:	36 81       	ldd	r19, Z+6	; 0x06
    39bc:	fc 01       	movw	r30, r24
    39be:	30 83       	st	Z, r19
        package[i*4+13]=state->collections[i].length;
    39c0:	1d 96       	adiw	r26, 0x0d	; 13
    39c2:	ac 0f       	add	r26, r28
    39c4:	bd 1f       	adc	r27, r29
    39c6:	fb 01       	movw	r30, r22
    39c8:	85 81       	ldd	r24, Z+5	; 0x05
    39ca:	8c 93       	st	X, r24
    package[3]=state->nCollections;

    //add data type
    add_data_types(state, &package[4]);

    for (uint8_t i = 0; i < state->nCollections; i++)
    39cc:	2f 5f       	subi	r18, 0xFF	; 255
    39ce:	f8 01       	movw	r30, r16
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	28 17       	cp	r18, r24
    39d4:	38 f2       	brcs	.-114    	; 0x3964 <mrpp_state_get_tail+0x2a>
        package[i*4+10]=state->collections[i].startIndex >> 8;
        package[i*4+11]=state->collections[i].startIndex;
        package[i*4+12]=state->collections[i].length>>8;
        package[i*4+13]=state->collections[i].length;
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    39d6:	88 0f       	add	r24, r24
    39d8:	88 0f       	add	r24, r24
}
    39da:	86 5f       	subi	r24, 0xF6	; 246
    39dc:	df 91       	pop	r29
    39de:	cf 91       	pop	r28
    39e0:	1f 91       	pop	r17
    39e2:	0f 91       	pop	r16
    39e4:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00004146 <mrpp_state_set_collection>:
    }
    
} 


void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    4146:	0f 93       	push	r16
    4148:	1f 93       	push	r17
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    4150:	a6 2f       	mov	r26, r22
    4152:	b0 e0       	ldi	r27, 0x00	; 0
    4154:	11 97       	sbiw	r26, 0x01	; 1
    4156:	fd 01       	movw	r30, r26
    4158:	ee 0f       	add	r30, r30
    415a:	ff 1f       	adc	r31, r31
    415c:	cd 01       	movw	r24, r26
    415e:	88 0f       	add	r24, r24
    4160:	99 1f       	adc	r25, r25
    4162:	88 0f       	add	r24, r24
    4164:	99 1f       	adc	r25, r25
    4166:	88 0f       	add	r24, r24
    4168:	99 1f       	adc	r25, r25
    416a:	e8 0f       	add	r30, r24
    416c:	f9 1f       	adc	r31, r25
    416e:	e0 0f       	add	r30, r16
    4170:	f1 1f       	adc	r31, r17
    4172:	83 e0       	ldi	r24, 0x03	; 3
    4174:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	0a c0       	rjmp	.+20     	; 0x418e <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    417a:	e9 2f       	mov	r30, r25
    417c:	f0 e0       	ldi	r31, 0x00	; 0
    417e:	e9 01       	movw	r28, r18
    4180:	ce 0f       	add	r28, r30
    4182:	df 1f       	adc	r29, r31
    4184:	e4 0f       	add	r30, r20
    4186:	f5 1f       	adc	r31, r21
    4188:	80 81       	ld	r24, Z
    418a:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    418c:	9f 5f       	subi	r25, 0xFF	; 255
    418e:	94 30       	cpi	r25, 0x04	; 4
    4190:	a0 f3       	brcs	.-24     	; 0x417a <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    4192:	cd 01       	movw	r24, r26
    4194:	88 0f       	add	r24, r24
    4196:	99 1f       	adc	r25, r25
    4198:	aa 0f       	add	r26, r26
    419a:	bb 1f       	adc	r27, r27
    419c:	aa 0f       	add	r26, r26
    419e:	bb 1f       	adc	r27, r27
    41a0:	aa 0f       	add	r26, r26
    41a2:	bb 1f       	adc	r27, r27
    41a4:	a8 0f       	add	r26, r24
    41a6:	b9 1f       	adc	r27, r25
    41a8:	a0 0f       	add	r26, r16
    41aa:	b1 1f       	adc	r27, r17
    41ac:	19 96       	adiw	r26, 0x09	; 9
    41ae:	8c 91       	ld	r24, X
    41b0:	19 97       	sbiw	r26, 0x09	; 9
    41b2:	f9 01       	movw	r30, r18
    41b4:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    41b6:	18 96       	adiw	r26, 0x08	; 8
    41b8:	8c 91       	ld	r24, X
    41ba:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    41bc:	c8 01       	movw	r24, r16
    41be:	0e 94 04 12 	call	0x2408	; 0x2408 <update_bodies>
}
    41c2:	df 91       	pop	r29
    41c4:	cf 91       	pop	r28
    41c6:	1f 91       	pop	r17
    41c8:	0f 91       	pop	r16
    41ca:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00005e96 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    5e96:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	0b c0       	rjmp	.+22     	; 0x5eb2 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    5e9c:	29 2f       	mov	r18, r25
    5e9e:	30 e0       	ldi	r19, 0x00	; 0
    5ea0:	fa 01       	movw	r30, r20
    5ea2:	e2 0f       	add	r30, r18
    5ea4:	f3 1f       	adc	r31, r19
    5ea6:	ec 55       	subi	r30, 0x5C	; 92
    5ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eaa:	80 81       	ld	r24, Z
    5eac:	81 30       	cpi	r24, 0x01	; 1
    5eae:	49 f0       	breq	.+18     	; 0x5ec2 <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5eb0:	9f 5f       	subi	r25, 0xFF	; 255
    5eb2:	fa 01       	movw	r30, r20
    5eb4:	ed 55       	subi	r30, 0x5D	; 93
    5eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb8:	80 81       	ld	r24, Z
    5eba:	98 17       	cp	r25, r24
    5ebc:	78 f3       	brcs	.-34     	; 0x5e9c <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    5ebe:	2f ef       	ldi	r18, 0xFF	; 255
    5ec0:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    5ec2:	c9 01       	movw	r24, r18
    5ec4:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

0000600a <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    600a:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    600c:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    600e:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    6010:	0a c0       	rjmp	.+20     	; 0x6026 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    6012:	f9 01       	movw	r30, r18
    6014:	e9 0f       	add	r30, r25
    6016:	f1 1d       	adc	r31, r1
    6018:	ec 55       	subi	r30, 0x5C	; 92
    601a:	ff 4f       	sbci	r31, 0xFF	; 255
    601c:	40 81       	ld	r20, Z
    601e:	42 30       	cpi	r20, 0x02	; 2
    6020:	09 f0       	breq	.+2      	; 0x6024 <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    6022:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    6024:	9f 5f       	subi	r25, 0xFF	; 255
    6026:	f9 01       	movw	r30, r18
    6028:	ed 55       	subi	r30, 0x5D	; 93
    602a:	ff 4f       	sbci	r31, 0xFF	; 255
    602c:	40 81       	ld	r20, Z
    602e:	94 17       	cp	r25, r20
    6030:	80 f3       	brcs	.-32     	; 0x6012 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    6032:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

00003066 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    3066:	8f 92       	push	r8
    3068:	9f 92       	push	r9
    306a:	af 92       	push	r10
    306c:	bf 92       	push	r11
    306e:	cf 92       	push	r12
    3070:	df 92       	push	r13
    3072:	ef 92       	push	r14
    3074:	ff 92       	push	r15
    3076:	0f 93       	push	r16
    3078:	1f 93       	push	r17
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	ec 01       	movw	r28, r24
    3080:	6b 01       	movw	r12, r22
    3082:	5a 01       	movw	r10, r20
    3084:	49 01       	movw	r8, r18
    int16_t res=mrpp_state_is_body_ready(state);
    3086:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    308a:	8f 3f       	cpi	r24, 0xFF	; 255
    308c:	2f ef       	ldi	r18, 0xFF	; 255
    308e:	92 07       	cpc	r25, r18
    3090:	09 f4       	brne	.+2      	; 0x3094 <mrpp_state_get_ready_body+0x2e>
    3092:	51 c0       	rjmp	.+162    	; 0x3136 <mrpp_state_get_ready_body+0xd0>
    3094:	8c 15       	cp	r24, r12
    3096:	9d 05       	cpc	r25, r13
    3098:	09 f0       	breq	.+2      	; 0x309c <mrpp_state_get_ready_body+0x36>
    309a:	4f c0       	rjmp	.+158    	; 0x313a <mrpp_state_get_ready_body+0xd4>
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	09 c0       	rjmp	.+18     	; 0x30b2 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    30a0:	fe 01       	movw	r30, r28
    30a2:	e8 0f       	add	r30, r24
    30a4:	f1 1d       	adc	r31, r1
    30a6:	ec 55       	subi	r30, 0x5C	; 92
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	90 81       	ld	r25, Z
    30ac:	91 30       	cpi	r25, 0x01	; 1
    30ae:	41 f0       	breq	.+16     	; 0x30c0 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    30b0:	8f 5f       	subi	r24, 0xFF	; 255
    30b2:	fe 01       	movw	r30, r28
    30b4:	ed 55       	subi	r30, 0x5D	; 93
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	90 81       	ld	r25, Z
    30ba:	89 17       	cp	r24, r25
    30bc:	88 f3       	brcs	.-30     	; 0x30a0 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    30be:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    30c0:	91 e0       	ldi	r25, 0x01	; 1
    30c2:	98 0f       	add	r25, r24
    30c4:	f5 01       	movw	r30, r10
    30c6:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    30c8:	99 81       	ldd	r25, Y+1	; 0x01
    30ca:	f4 01       	movw	r30, r8
    30cc:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	41 e6       	ldi	r20, 0x61	; 97
    30d2:	48 9f       	mul	r20, r24
    30d4:	90 01       	movw	r18, r0
    30d6:	49 9f       	mul	r20, r25
    30d8:	30 0d       	add	r19, r0
    30da:	11 24       	eor	r1, r1
    30dc:	f8 01       	movw	r30, r16
    30de:	31 83       	std	Z+1, r19	; 0x01
    30e0:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    30e2:	fe 01       	movw	r30, r28
    30e4:	ed 55       	subi	r30, 0x5D	; 93
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	20 81       	ld	r18, Z
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	21 50       	subi	r18, 0x01	; 1
    30ee:	31 09       	sbc	r19, r1
    30f0:	82 17       	cp	r24, r18
    30f2:	93 07       	cpc	r25, r19
    30f4:	2c f4       	brge	.+10     	; 0x3100 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    30f6:	81 e6       	ldi	r24, 0x61	; 97
    30f8:	f7 01       	movw	r30, r14
    30fa:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	1e c0       	rjmp	.+60     	; 0x313c <mrpp_state_get_ready_body+0xd6>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	ac 01       	movw	r20, r24
    3108:	44 0f       	add	r20, r20
    310a:	55 1f       	adc	r21, r21
    310c:	88 0f       	add	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	88 0f       	add	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	88 0f       	add	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	84 0f       	add	r24, r20
    311a:	95 1f       	adc	r25, r21
    311c:	c8 0f       	add	r28, r24
    311e:	d9 1f       	adc	r29, r25
    3120:	9b 81       	ldd	r25, Y+3	; 0x03
    3122:	8d 81       	ldd	r24, Y+5	; 0x05
    3124:	89 0f       	add	r24, r25
    3126:	f1 e6       	ldi	r31, 0x61	; 97
    3128:	2f 9f       	mul	r18, r31
    312a:	80 19       	sub	r24, r0
    312c:	11 24       	eor	r1, r1
    312e:	f7 01       	movw	r30, r14
    3130:	80 83       	st	Z, r24
    } 
    return true; 
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	03 c0       	rjmp	.+6      	; 0x313c <mrpp_state_get_ready_body+0xd6>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	01 c0       	rjmp	.+2      	; 0x313c <mrpp_state_get_ready_body+0xd6>
    313a:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	ff 90       	pop	r15
    3146:	ef 90       	pop	r14
    3148:	df 90       	pop	r13
    314a:	cf 90       	pop	r12
    314c:	bf 90       	pop	r11
    314e:	af 90       	pop	r10
    3150:	9f 90       	pop	r9
    3152:	8f 90       	pop	r8
    3154:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00006266 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    6266:	fc 01       	movw	r30, r24
    6268:	ed 55       	subi	r30, 0x5D	; 93
    626a:	ff 4f       	sbci	r31, 0xFF	; 255
    626c:	20 81       	ld	r18, Z
    626e:	30 e0       	ldi	r19, 0x00	; 0
    6270:	62 17       	cp	r22, r18
    6272:	73 07       	cpc	r23, r19
    6274:	3c f4       	brge	.+14     	; 0x6284 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    6276:	68 0f       	add	r22, r24
    6278:	79 1f       	adc	r23, r25
    627a:	fb 01       	movw	r30, r22
    627c:	ec 55       	subi	r30, 0x5C	; 92
    627e:	ff 4f       	sbci	r31, 0xFF	; 255
    6280:	82 e0       	ldi	r24, 0x02	; 2
    6282:	80 83       	st	Z, r24
    6284:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00005b6e <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    5b6e:	70 e0       	ldi	r23, 0x00	; 0
    5b70:	61 50       	subi	r22, 0x01	; 1
    5b72:	71 09       	sbc	r23, r1
    5b74:	fb 01       	movw	r30, r22
    5b76:	ee 0f       	add	r30, r30
    5b78:	ff 1f       	adc	r31, r31
    5b7a:	66 0f       	add	r22, r22
    5b7c:	77 1f       	adc	r23, r23
    5b7e:	66 0f       	add	r22, r22
    5b80:	77 1f       	adc	r23, r23
    5b82:	66 0f       	add	r22, r22
    5b84:	77 1f       	adc	r23, r23
    5b86:	e6 0f       	add	r30, r22
    5b88:	f7 1f       	adc	r31, r23
    5b8a:	e8 0f       	add	r30, r24
    5b8c:	f9 1f       	adc	r31, r25
    5b8e:	83 81       	ldd	r24, Z+3	; 0x03
    5b90:	94 81       	ldd	r25, Z+4	; 0x04
    5b92:	da 01       	movw	r26, r20
    5b94:	8d 93       	st	X+, r24
    5b96:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    5b98:	85 81       	ldd	r24, Z+5	; 0x05
    5b9a:	96 81       	ldd	r25, Z+6	; 0x06
    5b9c:	f9 01       	movw	r30, r18
    5b9e:	91 83       	std	Z+1, r25	; 0x01
    5ba0:	80 83       	st	Z, r24
    5ba2:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00005ec6 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    5ec6:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <cnt>
    5eca:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <cnt+0x1>
    5ece:	01 96       	adiw	r24, 0x01	; 1
    5ed0:	90 93 06 0d 	sts	0x0D06, r25	; 0x800d06 <cnt+0x1>
    5ed4:	80 93 05 0d 	sts	0x0D05, r24	; 0x800d05 <cnt>
	if(cnt>=_seconds){
    5ed8:	20 91 07 0d 	lds	r18, 0x0D07	; 0x800d07 <_seconds>
    5edc:	30 91 08 0d 	lds	r19, 0x0D08	; 0x800d08 <_seconds+0x1>
    5ee0:	82 17       	cp	r24, r18
    5ee2:	93 07       	cpc	r25, r19
    5ee4:	38 f0       	brcs	.+14     	; 0x5ef4 <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    5ee6:	80 91 22 0d 	lds	r24, 0x0D22	; 0x800d22 <eventPointer>
    5eea:	0e 94 9b 2c 	call	0x5936	; 0x5936 <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    5eee:	80 e0       	ldi	r24, 0x00	; 0
    5ef0:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <PM_HAL_BC_power>
    5ef4:	08 95       	ret

Disassembly of section .text.PUMP_start:

000060ac <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    60ac:	10 92 06 0d 	sts	0x0D06, r1	; 0x800d06 <cnt+0x1>
    60b0:	10 92 05 0d 	sts	0x0D05, r1	; 0x800d05 <cnt>
	_seconds=seconds;
    60b4:	90 93 08 0d 	sts	0x0D08, r25	; 0x800d08 <_seconds+0x1>
    60b8:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    60bc:	83 e6       	ldi	r24, 0x63	; 99
    60be:	9f e2       	ldi	r25, 0x2F	; 47
    60c0:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <TC2_HAL_subscribe>
    60c4:	80 93 22 0d 	sts	0x0D22, r24	; 0x800d22 <eventPointer>
	PM_HAL_BC_power(true);
    60c8:	81 e0       	ldi	r24, 0x01	; 1
    60ca:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <PM_HAL_BC_power>
    60ce:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

000063cc <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    63cc:	40 91 05 0d 	lds	r20, 0x0D05	; 0x800d05 <cnt>
    63d0:	50 91 06 0d 	lds	r21, 0x0D06	; 0x800d06 <cnt+0x1>
    63d4:	20 91 07 0d 	lds	r18, 0x0D07	; 0x800d07 <_seconds>
    63d8:	30 91 08 0d 	lds	r19, 0x0D08	; 0x800d08 <_seconds+0x1>
    63dc:	81 e0       	ldi	r24, 0x01	; 1
    63de:	42 17       	cp	r20, r18
    63e0:	53 07       	cpc	r21, r19
    63e2:	08 f4       	brcc	.+2      	; 0x63e6 <PUMP_is_done+0x1a>
    63e4:	80 e0       	ldi	r24, 0x00	; 0
}
    63e6:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00002d70 <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2d70:	1f 93       	push	r17
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <datetime_to_BCD+0x8>
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <datetime_to_BCD+0xa>
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <datetime_to_BCD+0xc>
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	f9 01       	movw	r30, r18
    2d82:	3d ec       	ldi	r19, 0xCD	; 205
    2d84:	43 9f       	mul	r20, r19
    2d86:	21 2d       	mov	r18, r1
    2d88:	11 24       	eor	r1, r1
    2d8a:	26 95       	lsr	r18
    2d8c:	26 95       	lsr	r18
    2d8e:	26 95       	lsr	r18
    2d90:	10 e1       	ldi	r17, 0x10	; 16
    2d92:	21 9f       	mul	r18, r17
    2d94:	d0 01       	movw	r26, r0
    2d96:	11 24       	eor	r1, r1
    2d98:	22 0f       	add	r18, r18
    2d9a:	b2 2f       	mov	r27, r18
    2d9c:	bb 0f       	add	r27, r27
    2d9e:	bb 0f       	add	r27, r27
    2da0:	2b 0f       	add	r18, r27
    2da2:	42 1b       	sub	r20, r18
    2da4:	4a 2b       	or	r20, r26
    2da6:	40 83       	st	Z, r20
    2da8:	53 9f       	mul	r21, r19
    2daa:	21 2d       	mov	r18, r1
    2dac:	11 24       	eor	r1, r1
    2dae:	26 95       	lsr	r18
    2db0:	26 95       	lsr	r18
    2db2:	26 95       	lsr	r18
    2db4:	40 e1       	ldi	r20, 0x10	; 16
    2db6:	24 9f       	mul	r18, r20
    2db8:	d0 01       	movw	r26, r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	22 0f       	add	r18, r18
    2dbe:	42 2f       	mov	r20, r18
    2dc0:	44 0f       	add	r20, r20
    2dc2:	44 0f       	add	r20, r20
    2dc4:	24 0f       	add	r18, r20
    2dc6:	52 1b       	sub	r21, r18
    2dc8:	5a 2b       	or	r21, r26
    2dca:	51 83       	std	Z+1, r21	; 0x01
    2dcc:	63 9f       	mul	r22, r19
    2dce:	41 2d       	mov	r20, r1
    2dd0:	11 24       	eor	r1, r1
    2dd2:	46 95       	lsr	r20
    2dd4:	46 95       	lsr	r20
    2dd6:	46 95       	lsr	r20
    2dd8:	10 e1       	ldi	r17, 0x10	; 16
    2dda:	41 9f       	mul	r20, r17
    2ddc:	d0 01       	movw	r26, r0
    2dde:	11 24       	eor	r1, r1
    2de0:	44 0f       	add	r20, r20
    2de2:	24 2f       	mov	r18, r20
    2de4:	22 0f       	add	r18, r18
    2de6:	22 0f       	add	r18, r18
    2de8:	42 0f       	add	r20, r18
    2dea:	64 1b       	sub	r22, r20
    2dec:	6a 2b       	or	r22, r26
    2dee:	62 83       	std	Z+2, r22	; 0x02
    2df0:	73 9f       	mul	r23, r19
    2df2:	41 2d       	mov	r20, r1
    2df4:	11 24       	eor	r1, r1
    2df6:	46 95       	lsr	r20
    2df8:	46 95       	lsr	r20
    2dfa:	46 95       	lsr	r20
    2dfc:	20 e1       	ldi	r18, 0x10	; 16
    2dfe:	42 9f       	mul	r20, r18
    2e00:	d0 01       	movw	r26, r0
    2e02:	11 24       	eor	r1, r1
    2e04:	44 0f       	add	r20, r20
    2e06:	24 2f       	mov	r18, r20
    2e08:	22 0f       	add	r18, r18
    2e0a:	22 0f       	add	r18, r18
    2e0c:	42 0f       	add	r20, r18
    2e0e:	74 1b       	sub	r23, r20
    2e10:	7a 2b       	or	r23, r26
    2e12:	73 83       	std	Z+3, r23	; 0x03
    2e14:	83 9f       	mul	r24, r19
    2e16:	41 2d       	mov	r20, r1
    2e18:	11 24       	eor	r1, r1
    2e1a:	46 95       	lsr	r20
    2e1c:	46 95       	lsr	r20
    2e1e:	46 95       	lsr	r20
    2e20:	10 e1       	ldi	r17, 0x10	; 16
    2e22:	41 9f       	mul	r20, r17
    2e24:	b0 01       	movw	r22, r0
    2e26:	11 24       	eor	r1, r1
    2e28:	44 0f       	add	r20, r20
    2e2a:	24 2f       	mov	r18, r20
    2e2c:	22 0f       	add	r18, r18
    2e2e:	22 0f       	add	r18, r18
    2e30:	42 0f       	add	r20, r18
    2e32:	84 1b       	sub	r24, r20
    2e34:	86 2b       	or	r24, r22
    2e36:	84 83       	std	Z+4, r24	; 0x04
    2e38:	93 9f       	mul	r25, r19
    2e3a:	31 2d       	mov	r19, r1
    2e3c:	11 24       	eor	r1, r1
    2e3e:	36 95       	lsr	r19
    2e40:	36 95       	lsr	r19
    2e42:	36 95       	lsr	r19
    2e44:	20 e1       	ldi	r18, 0x10	; 16
    2e46:	32 9f       	mul	r19, r18
    2e48:	a0 01       	movw	r20, r0
    2e4a:	11 24       	eor	r1, r1
    2e4c:	33 0f       	add	r19, r19
    2e4e:	83 2f       	mov	r24, r19
    2e50:	88 0f       	add	r24, r24
    2e52:	88 0f       	add	r24, r24
    2e54:	38 0f       	add	r19, r24
    2e56:	93 1b       	sub	r25, r19
    2e58:	94 2b       	or	r25, r20
    2e5a:	95 83       	std	Z+5, r25	; 0x05
    2e5c:	26 96       	adiw	r28, 0x06	; 6
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	cd bf       	out	0x3d, r28	; 61
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	1f 91       	pop	r17
    2e6e:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00004fae <RTC_set_clock_out>:
    4fae:	cf 93       	push	r28
    4fb0:	df 93       	push	r29
    4fb2:	00 d0       	rcall	.+0      	; 0x4fb4 <RTC_set_clock_out+0x6>
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
    4fb8:	9d e0       	ldi	r25, 0x0D	; 13
    4fba:	99 83       	std	Y+1, r25	; 0x01
    4fbc:	81 30       	cpi	r24, 0x01	; 1
    4fbe:	31 f0       	breq	.+12     	; 0x4fcc <RTC_set_clock_out+0x1e>
    4fc0:	18 f0       	brcs	.+6      	; 0x4fc8 <RTC_set_clock_out+0x1a>
    4fc2:	80 32       	cpi	r24, 0x20	; 32
    4fc4:	31 f0       	breq	.+12     	; 0x4fd2 <RTC_set_clock_out+0x24>
    4fc6:	13 c0       	rjmp	.+38     	; 0x4fee <RTC_set_clock_out+0x40>
    4fc8:	1a 82       	std	Y+2, r1	; 0x02
    4fca:	05 c0       	rjmp	.+10     	; 0x4fd6 <RTC_set_clock_out+0x28>
    4fcc:	83 e8       	ldi	r24, 0x83	; 131
    4fce:	8a 83       	std	Y+2, r24	; 0x02
    4fd0:	02 c0       	rjmp	.+4      	; 0x4fd6 <RTC_set_clock_out+0x28>
    4fd2:	82 e8       	ldi	r24, 0x82	; 130
    4fd4:	8a 83       	std	Y+2, r24	; 0x02
    4fd6:	ae 01       	movw	r20, r28
    4fd8:	4f 5f       	subi	r20, 0xFF	; 255
    4fda:	5f 4f       	sbci	r21, 0xFF	; 255
    4fdc:	60 e8       	ldi	r22, 0x80	; 128
    4fde:	22 e0       	ldi	r18, 0x02	; 2
    4fe0:	81 e5       	ldi	r24, 0x51	; 81
    4fe2:	0e 94 10 32 	call	0x6420	; 0x6420 <TWI_API_write_data_stop>
    4fe6:	88 23       	and	r24, r24
    4fe8:	21 f0       	breq	.+8      	; 0x4ff2 <RTC_set_clock_out+0x44>
    4fea:	82 e0       	ldi	r24, 0x02	; 2
    4fec:	03 c0       	rjmp	.+6      	; 0x4ff4 <RTC_set_clock_out+0x46>
    4fee:	81 e0       	ldi	r24, 0x01	; 1
    4ff0:	01 c0       	rjmp	.+2      	; 0x4ff4 <RTC_set_clock_out+0x46>
    4ff2:	80 e0       	ldi	r24, 0x00	; 0
    4ff4:	0f 90       	pop	r0
    4ff6:	0f 90       	pop	r0
    4ff8:	df 91       	pop	r29
    4ffa:	cf 91       	pop	r28
    4ffc:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

0000256a <RTC_get_current_time>:
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	27 97       	sbiw	r28, 0x07	; 7
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	8c 01       	movw	r16, r24
    2584:	21 e0       	ldi	r18, 0x01	; 1
    2586:	48 e0       	ldi	r20, 0x08	; 8
    2588:	59 e0       	ldi	r21, 0x09	; 9
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	81 e5       	ldi	r24, 0x51	; 81
    258e:	0e 94 0e 33 	call	0x661c	; 0x661c <TWI_API_write_data>
    2592:	81 11       	cpse	r24, r1
    2594:	7c c0       	rjmp	.+248    	; 0x268e <RTC_get_current_time+0x124>
    2596:	47 e0       	ldi	r20, 0x07	; 7
    2598:	be 01       	movw	r22, r28
    259a:	6f 5f       	subi	r22, 0xFF	; 255
    259c:	7f 4f       	sbci	r23, 0xFF	; 255
    259e:	81 e5       	ldi	r24, 0x51	; 81
    25a0:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <TWI_API_repeat_read_data_stop>
    25a4:	81 11       	cpse	r24, r1
    25a6:	75 c0       	rjmp	.+234    	; 0x2692 <RTC_get_current_time+0x128>
    25a8:	29 81       	ldd	r18, Y+1	; 0x01
    25aa:	82 2f       	mov	r24, r18
    25ac:	8f 77       	andi	r24, 0x7F	; 127
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	95 95       	asr	r25
    25b2:	87 95       	ror	r24
    25b4:	95 95       	asr	r25
    25b6:	87 95       	ror	r24
    25b8:	95 95       	asr	r25
    25ba:	87 95       	ror	r24
    25bc:	95 95       	asr	r25
    25be:	87 95       	ror	r24
    25c0:	88 0f       	add	r24, r24
    25c2:	98 2f       	mov	r25, r24
    25c4:	99 0f       	add	r25, r25
    25c6:	99 0f       	add	r25, r25
    25c8:	89 0f       	add	r24, r25
    25ca:	2f 70       	andi	r18, 0x0F	; 15
    25cc:	82 0f       	add	r24, r18
    25ce:	f8 01       	movw	r30, r16
    25d0:	80 83       	st	Z, r24
    25d2:	2a 81       	ldd	r18, Y+2	; 0x02
    25d4:	82 2f       	mov	r24, r18
    25d6:	8f 77       	andi	r24, 0x7F	; 127
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	95 95       	asr	r25
    25dc:	87 95       	ror	r24
    25de:	95 95       	asr	r25
    25e0:	87 95       	ror	r24
    25e2:	95 95       	asr	r25
    25e4:	87 95       	ror	r24
    25e6:	95 95       	asr	r25
    25e8:	87 95       	ror	r24
    25ea:	88 0f       	add	r24, r24
    25ec:	98 2f       	mov	r25, r24
    25ee:	99 0f       	add	r25, r25
    25f0:	99 0f       	add	r25, r25
    25f2:	89 0f       	add	r24, r25
    25f4:	2f 70       	andi	r18, 0x0F	; 15
    25f6:	82 0f       	add	r24, r18
    25f8:	81 83       	std	Z+1, r24	; 0x01
    25fa:	2b 81       	ldd	r18, Y+3	; 0x03
    25fc:	82 2f       	mov	r24, r18
    25fe:	8f 73       	andi	r24, 0x3F	; 63
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	95 95       	asr	r25
    2604:	87 95       	ror	r24
    2606:	95 95       	asr	r25
    2608:	87 95       	ror	r24
    260a:	95 95       	asr	r25
    260c:	87 95       	ror	r24
    260e:	95 95       	asr	r25
    2610:	87 95       	ror	r24
    2612:	88 0f       	add	r24, r24
    2614:	98 2f       	mov	r25, r24
    2616:	99 0f       	add	r25, r25
    2618:	99 0f       	add	r25, r25
    261a:	89 0f       	add	r24, r25
    261c:	2f 70       	andi	r18, 0x0F	; 15
    261e:	82 0f       	add	r24, r18
    2620:	82 83       	std	Z+2, r24	; 0x02
    2622:	2c 81       	ldd	r18, Y+4	; 0x04
    2624:	82 2f       	mov	r24, r18
    2626:	8f 73       	andi	r24, 0x3F	; 63
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	95 95       	asr	r25
    262c:	87 95       	ror	r24
    262e:	95 95       	asr	r25
    2630:	87 95       	ror	r24
    2632:	95 95       	asr	r25
    2634:	87 95       	ror	r24
    2636:	95 95       	asr	r25
    2638:	87 95       	ror	r24
    263a:	88 0f       	add	r24, r24
    263c:	98 2f       	mov	r25, r24
    263e:	99 0f       	add	r25, r25
    2640:	99 0f       	add	r25, r25
    2642:	89 0f       	add	r24, r25
    2644:	2f 70       	andi	r18, 0x0F	; 15
    2646:	82 0f       	add	r24, r18
    2648:	83 83       	std	Z+3, r24	; 0x03
    264a:	2e 81       	ldd	r18, Y+6	; 0x06
    264c:	82 2f       	mov	r24, r18
    264e:	8f 71       	andi	r24, 0x1F	; 31
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	95 95       	asr	r25
    2654:	87 95       	ror	r24
    2656:	95 95       	asr	r25
    2658:	87 95       	ror	r24
    265a:	95 95       	asr	r25
    265c:	87 95       	ror	r24
    265e:	95 95       	asr	r25
    2660:	87 95       	ror	r24
    2662:	88 0f       	add	r24, r24
    2664:	98 2f       	mov	r25, r24
    2666:	99 0f       	add	r25, r25
    2668:	99 0f       	add	r25, r25
    266a:	89 0f       	add	r24, r25
    266c:	2f 70       	andi	r18, 0x0F	; 15
    266e:	82 0f       	add	r24, r18
    2670:	84 83       	std	Z+4, r24	; 0x04
    2672:	8f 81       	ldd	r24, Y+7	; 0x07
    2674:	98 2f       	mov	r25, r24
    2676:	92 95       	swap	r25
    2678:	9f 70       	andi	r25, 0x0F	; 15
    267a:	99 0f       	add	r25, r25
    267c:	29 2f       	mov	r18, r25
    267e:	22 0f       	add	r18, r18
    2680:	22 0f       	add	r18, r18
    2682:	92 0f       	add	r25, r18
    2684:	8f 70       	andi	r24, 0x0F	; 15
    2686:	89 0f       	add	r24, r25
    2688:	85 83       	std	Z+5, r24	; 0x05
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <RTC_get_current_time+0x12a>
    268e:	82 e0       	ldi	r24, 0x02	; 2
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <RTC_get_current_time+0x12a>
    2692:	82 e0       	ldi	r24, 0x02	; 2
    2694:	27 96       	adiw	r28, 0x07	; 7
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

00004a62 <RTC_set_current_time>:
    4a62:	cf 93       	push	r28
    4a64:	df 93       	push	r29
    4a66:	cd b7       	in	r28, 0x3d	; 61
    4a68:	de b7       	in	r29, 0x3e	; 62
    4a6a:	64 97       	sbiw	r28, 0x14	; 20
    4a6c:	0f b6       	in	r0, 0x3f	; 63
    4a6e:	f8 94       	cli
    4a70:	de bf       	out	0x3e, r29	; 62
    4a72:	0f be       	out	0x3f, r0	; 63
    4a74:	cd bf       	out	0x3d, r28	; 61
    4a76:	9e 01       	movw	r18, r28
    4a78:	27 5f       	subi	r18, 0xF7	; 247
    4a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a7c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <datetime_to_BCD>
    4a80:	82 e0       	ldi	r24, 0x02	; 2
    4a82:	89 83       	std	Y+1, r24	; 0x01
    4a84:	89 85       	ldd	r24, Y+9	; 0x09
    4a86:	8a 83       	std	Y+2, r24	; 0x02
    4a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a8a:	8b 83       	std	Y+3, r24	; 0x03
    4a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a8e:	8c 83       	std	Y+4, r24	; 0x04
    4a90:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a92:	8d 83       	std	Y+5, r24	; 0x05
    4a94:	1e 82       	std	Y+6, r1	; 0x06
    4a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a98:	8f 83       	std	Y+7, r24	; 0x07
    4a9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a9c:	88 87       	std	Y+8, r24	; 0x08
    4a9e:	ae 01       	movw	r20, r28
    4aa0:	4f 5f       	subi	r20, 0xFF	; 255
    4aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    4aa4:	60 e8       	ldi	r22, 0x80	; 128
    4aa6:	28 e0       	ldi	r18, 0x08	; 8
    4aa8:	81 e5       	ldi	r24, 0x51	; 81
    4aaa:	0e 94 10 32 	call	0x6420	; 0x6420 <TWI_API_write_data_stop>
    4aae:	88 23       	and	r24, r24
    4ab0:	11 f0       	breq	.+4      	; 0x4ab6 <RTC_set_current_time+0x54>
    4ab2:	82 e0       	ldi	r24, 0x02	; 2
    4ab4:	01 c0       	rjmp	.+2      	; 0x4ab8 <RTC_set_current_time+0x56>
    4ab6:	80 e0       	ldi	r24, 0x00	; 0
    4ab8:	64 96       	adiw	r28, 0x14	; 20
    4aba:	0f b6       	in	r0, 0x3f	; 63
    4abc:	f8 94       	cli
    4abe:	de bf       	out	0x3e, r29	; 62
    4ac0:	0f be       	out	0x3f, r0	; 63
    4ac2:	cd bf       	out	0x3d, r28	; 61
    4ac4:	df 91       	pop	r29
    4ac6:	cf 91       	pop	r28
    4ac8:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt:

00003594 <RTC_set_wake_up_interrupt>:
    3594:	1f 93       	push	r17
    3596:	cf 93       	push	r28
    3598:	df 93       	push	r29
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62
    359e:	2d 97       	sbiw	r28, 0x0d	; 13
    35a0:	0f b6       	in	r0, 0x3f	; 63
    35a2:	f8 94       	cli
    35a4:	de bf       	out	0x3e, r29	; 62
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	18 2f       	mov	r17, r24
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	89 83       	std	Y+1, r24	; 0x01
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	8a 83       	std	Y+2, r24	; 0x02
    35b4:	85 e0       	ldi	r24, 0x05	; 5
    35b6:	e0 ed       	ldi	r30, 0xD0	; 208
    35b8:	fc e0       	ldi	r31, 0x0C	; 12
    35ba:	de 01       	movw	r26, r28
    35bc:	13 96       	adiw	r26, 0x03	; 3
    35be:	01 90       	ld	r0, Z+
    35c0:	0d 92       	st	X+, r0
    35c2:	8a 95       	dec	r24
    35c4:	e1 f7       	brne	.-8      	; 0x35be <RTC_set_wake_up_interrupt+0x2a>
    35c6:	ce 01       	movw	r24, r28
    35c8:	08 96       	adiw	r24, 0x08	; 8
    35ca:	0e 94 b5 12 	call	0x256a	; 0x256a <RTC_get_current_time>
    35ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    35d0:	81 0f       	add	r24, r17
    35d2:	9b ea       	ldi	r25, 0xAB	; 171
    35d4:	89 9f       	mul	r24, r25
    35d6:	91 2d       	mov	r25, r1
    35d8:	11 24       	eor	r1, r1
    35da:	92 95       	swap	r25
    35dc:	9f 70       	andi	r25, 0x0F	; 15
    35de:	28 e1       	ldi	r18, 0x18	; 24
    35e0:	92 9f       	mul	r25, r18
    35e2:	80 19       	sub	r24, r0
    35e4:	11 24       	eor	r1, r1
    35e6:	8a 87       	std	Y+10, r24	; 0x0a
    35e8:	ae 01       	movw	r20, r28
    35ea:	4f 5f       	subi	r20, 0xFF	; 255
    35ec:	5f 4f       	sbci	r21, 0xFF	; 255
    35ee:	60 e8       	ldi	r22, 0x80	; 128
    35f0:	22 e0       	ldi	r18, 0x02	; 2
    35f2:	81 e5       	ldi	r24, 0x51	; 81
    35f4:	0e 94 10 32 	call	0x6420	; 0x6420 <TWI_API_write_data_stop>
    35f8:	81 11       	cpse	r24, r1
    35fa:	20 c0       	rjmp	.+64     	; 0x363c <RTC_set_wake_up_interrupt+0xa8>
    35fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fe:	8d ec       	ldi	r24, 0xCD	; 205
    3600:	98 9f       	mul	r25, r24
    3602:	81 2d       	mov	r24, r1
    3604:	11 24       	eor	r1, r1
    3606:	86 95       	lsr	r24
    3608:	86 95       	lsr	r24
    360a:	86 95       	lsr	r24
    360c:	40 e1       	ldi	r20, 0x10	; 16
    360e:	84 9f       	mul	r24, r20
    3610:	90 01       	movw	r18, r0
    3612:	11 24       	eor	r1, r1
    3614:	88 0f       	add	r24, r24
    3616:	38 2f       	mov	r19, r24
    3618:	33 0f       	add	r19, r19
    361a:	33 0f       	add	r19, r19
    361c:	83 0f       	add	r24, r19
    361e:	98 1b       	sub	r25, r24
    3620:	92 2b       	or	r25, r18
    3622:	9d 83       	std	Y+5, r25	; 0x05
    3624:	ae 01       	movw	r20, r28
    3626:	4d 5f       	subi	r20, 0xFD	; 253
    3628:	5f 4f       	sbci	r21, 0xFF	; 255
    362a:	60 e8       	ldi	r22, 0x80	; 128
    362c:	25 e0       	ldi	r18, 0x05	; 5
    362e:	81 e5       	ldi	r24, 0x51	; 81
    3630:	0e 94 10 32 	call	0x6420	; 0x6420 <TWI_API_write_data_stop>
    3634:	88 23       	and	r24, r24
    3636:	21 f0       	breq	.+8      	; 0x3640 <RTC_set_wake_up_interrupt+0xac>
    3638:	82 e0       	ldi	r24, 0x02	; 2
    363a:	03 c0       	rjmp	.+6      	; 0x3642 <RTC_set_wake_up_interrupt+0xae>
    363c:	82 e0       	ldi	r24, 0x02	; 2
    363e:	01 c0       	rjmp	.+2      	; 0x3642 <RTC_set_wake_up_interrupt+0xae>
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	2d 96       	adiw	r28, 0x0d	; 13
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	1f 91       	pop	r17
    3654:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

00005c46 <RTC_clear_wake_up_interrupt>:

RTC_STATUS RTC_clear_wake_up_interrupt(){
    5c46:	cf 93       	push	r28
    5c48:	df 93       	push	r29
    5c4a:	00 d0       	rcall	.+0      	; 0x5c4c <RTC_clear_wake_up_interrupt+0x6>
    5c4c:	cd b7       	in	r28, 0x3d	; 61
    5c4e:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	89 83       	std	Y+1, r24	; 0x01
    5c54:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    5c56:	ae 01       	movw	r20, r28
    5c58:	4f 5f       	subi	r20, 0xFF	; 255
    5c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    5c5c:	60 e8       	ldi	r22, 0x80	; 128
    5c5e:	22 e0       	ldi	r18, 0x02	; 2
    5c60:	81 e5       	ldi	r24, 0x51	; 81
    5c62:	0e 94 10 32 	call	0x6420	; 0x6420 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    5c66:	88 23       	and	r24, r24
    5c68:	11 f0       	breq	.+4      	; 0x5c6e <RTC_clear_wake_up_interrupt+0x28>
    5c6a:	82 e0       	ldi	r24, 0x02	; 2
    5c6c:	01 c0       	rjmp	.+2      	; 0x5c70 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    5c6e:	80 e0       	ldi	r24, 0x00	; 0
}
    5c70:	0f 90       	pop	r0
    5c72:	0f 90       	pop	r0
    5c74:	df 91       	pop	r29
    5c76:	cf 91       	pop	r28
    5c78:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

00002914 <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2914:	4f 92       	push	r4
    2916:	5f 92       	push	r5
    2918:	6f 92       	push	r6
    291a:	7f 92       	push	r7
    291c:	8f 92       	push	r8
    291e:	9f 92       	push	r9
    2920:	af 92       	push	r10
    2922:	bf 92       	push	r11
    2924:	cf 92       	push	r12
    2926:	df 92       	push	r13
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	00 d0       	rcall	.+0      	; 0x2936 <RTC_datetime_to_ts+0x22>
    2936:	00 d0       	rcall	.+0      	; 0x2938 <RTC_datetime_to_ts+0x24>
    2938:	00 d0       	rcall	.+0      	; 0x293a <RTC_datetime_to_ts+0x26>
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	f9 01       	movw	r30, r18
    2940:	49 2e       	mov	r4, r25
    2942:	51 2c       	mov	r5, r1
    2944:	61 2c       	mov	r6, r1
    2946:	71 2c       	mov	r7, r1
    2948:	03 2e       	mov	r0, r19
    294a:	3a e1       	ldi	r19, 0x1A	; 26
    294c:	44 0c       	add	r4, r4
    294e:	55 1c       	adc	r5, r5
    2950:	66 1c       	adc	r6, r6
    2952:	77 1c       	adc	r7, r7
    2954:	3a 95       	dec	r19
    2956:	d1 f7       	brne	.-12     	; 0x294c <RTC_datetime_to_ts+0x38>
    2958:	30 2d       	mov	r19, r0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 e0       	ldi	r26, 0x00	; 0
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	07 2e       	mov	r0, r23
    2962:	76 e1       	ldi	r23, 0x16	; 22
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	aa 1f       	adc	r26, r26
    296a:	bb 1f       	adc	r27, r27
    296c:	7a 95       	dec	r23
    296e:	d1 f7       	brne	.-12     	; 0x2964 <RTC_datetime_to_ts+0x50>
    2970:	70 2d       	mov	r23, r0
    2972:	84 29       	or	r24, r4
    2974:	95 29       	or	r25, r5
    2976:	a6 29       	or	r26, r6
    2978:	b7 29       	or	r27, r7
    297a:	87 2e       	mov	r8, r23
    297c:	91 2c       	mov	r9, r1
    297e:	a1 2c       	mov	r10, r1
    2980:	b1 2c       	mov	r11, r1
    2982:	07 2e       	mov	r0, r23
    2984:	71 e1       	ldi	r23, 0x11	; 17
    2986:	88 0c       	add	r8, r8
    2988:	99 1c       	adc	r9, r9
    298a:	aa 1c       	adc	r10, r10
    298c:	bb 1c       	adc	r11, r11
    298e:	7a 95       	dec	r23
    2990:	d1 f7       	brne	.-12     	; 0x2986 <RTC_datetime_to_ts+0x72>
    2992:	70 2d       	mov	r23, r0
    2994:	88 29       	or	r24, r8
    2996:	99 29       	or	r25, r9
    2998:	aa 29       	or	r26, r10
    299a:	bb 29       	or	r27, r11
    299c:	c6 2e       	mov	r12, r22
    299e:	d1 2c       	mov	r13, r1
    29a0:	e1 2c       	mov	r14, r1
    29a2:	f1 2c       	mov	r15, r1
    29a4:	0b 2e       	mov	r0, r27
    29a6:	bc e0       	ldi	r27, 0x0C	; 12
    29a8:	cc 0c       	add	r12, r12
    29aa:	dd 1c       	adc	r13, r13
    29ac:	ee 1c       	adc	r14, r14
    29ae:	ff 1c       	adc	r15, r15
    29b0:	ba 95       	dec	r27
    29b2:	d1 f7       	brne	.-12     	; 0x29a8 <RTC_datetime_to_ts+0x94>
    29b4:	b0 2d       	mov	r27, r0
    29b6:	8c 29       	or	r24, r12
    29b8:	9d 29       	or	r25, r13
    29ba:	ae 29       	or	r26, r14
    29bc:	bf 29       	or	r27, r15
    29be:	05 2f       	mov	r16, r21
    29c0:	10 e0       	ldi	r17, 0x00	; 0
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	00 0f       	add	r16, r16
    29c8:	11 1f       	adc	r17, r17
    29ca:	22 1f       	adc	r18, r18
    29cc:	33 1f       	adc	r19, r19
    29ce:	00 0f       	add	r16, r16
    29d0:	11 1f       	adc	r17, r17
    29d2:	22 1f       	adc	r18, r18
    29d4:	33 1f       	adc	r19, r19
    29d6:	00 0f       	add	r16, r16
    29d8:	11 1f       	adc	r17, r17
    29da:	22 1f       	adc	r18, r18
    29dc:	33 1f       	adc	r19, r19
    29de:	00 0f       	add	r16, r16
    29e0:	11 1f       	adc	r17, r17
    29e2:	22 1f       	adc	r18, r18
    29e4:	33 1f       	adc	r19, r19
    29e6:	00 0f       	add	r16, r16
    29e8:	11 1f       	adc	r17, r17
    29ea:	22 1f       	adc	r18, r18
    29ec:	33 1f       	adc	r19, r19
    29ee:	00 0f       	add	r16, r16
    29f0:	11 1f       	adc	r17, r17
    29f2:	22 1f       	adc	r18, r18
    29f4:	33 1f       	adc	r19, r19
    29f6:	80 2b       	or	r24, r16
    29f8:	91 2b       	or	r25, r17
    29fa:	a2 2b       	or	r26, r18
    29fc:	b3 2b       	or	r27, r19
    29fe:	84 2b       	or	r24, r20
    2a00:	b0 83       	st	Z, r27
    2a02:	a1 83       	std	Z+1, r26	; 0x01
    2a04:	92 83       	std	Z+2, r25	; 0x02
    2a06:	83 83       	std	Z+3, r24	; 0x03
    2a08:	26 96       	adiw	r28, 0x06	; 6
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	ef 90       	pop	r14
    2a20:	df 90       	pop	r13
    2a22:	cf 90       	pop	r12
    2a24:	bf 90       	pop	r11
    2a26:	af 90       	pop	r10
    2a28:	9f 90       	pop	r9
    2a2a:	8f 90       	pop	r8
    2a2c:	7f 90       	pop	r7
    2a2e:	6f 90       	pop	r6
    2a30:	5f 90       	pop	r5
    2a32:	4f 90       	pop	r4
    2a34:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00006454 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    6454:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    6456:	54 81       	ldd	r21, Z+4	; 0x04
    6458:	43 81       	ldd	r20, Z+3	; 0x03
    645a:	31 81       	ldd	r19, Z+1	; 0x01
    645c:	20 81       	ld	r18, Z
    645e:	65 2f       	mov	r22, r21
    6460:	74 2f       	mov	r23, r20
    6462:	83 2f       	mov	r24, r19
    6464:	92 2f       	mov	r25, r18
    6466:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <__fixunssfsi>
}
    646a:	cb 01       	movw	r24, r22
    646c:	08 95       	ret

Disassembly of section .text.init_measurement:

00005ac8 <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    5ac8:	25 e0       	ldi	r18, 0x05	; 5
    5aca:	49 ef       	ldi	r20, 0xF9	; 249
    5acc:	58 e0       	ldi	r21, 0x08	; 8
    5ace:	60 e0       	ldi	r22, 0x00	; 0
    5ad0:	81 e6       	ldi	r24, 0x61	; 97
    5ad2:	0e 94 10 32 	call	0x6420	; 0x6420 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5ad6:	81 11       	cpse	r24, r1
    5ad8:	0f c0       	rjmp	.+30     	; 0x5af8 <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    5ada:	25 e0       	ldi	r18, 0x05	; 5
    5adc:	4e ef       	ldi	r20, 0xFE	; 254
    5ade:	58 e0       	ldi	r21, 0x08	; 8
    5ae0:	60 e0       	ldi	r22, 0x00	; 0
    5ae2:	81 e6       	ldi	r24, 0x61	; 97
    5ae4:	0e 94 10 32 	call	0x6420	; 0x6420 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5ae8:	81 11       	cpse	r24, r1
    5aea:	08 c0       	rjmp	.+16     	; 0x5afc <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    5aec:	0e 94 95 34 	call	0x692a	; 0x692a <SCD30_HAL_data_ready>
    5af0:	88 23       	and	r24, r24
    5af2:	e1 f3       	breq	.-8      	; 0x5aec <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    5af4:	80 e0       	ldi	r24, 0x00	; 0
    5af6:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5af8:	82 e0       	ldi	r24, 0x02	; 2
    5afa:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5afc:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    5afe:	08 95       	ret

Disassembly of section .text.validate_data:

00005d12 <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    5d12:	cf 93       	push	r28
    5d14:	df 93       	push	r29
    5d16:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    5d18:	62 e0       	ldi	r22, 0x02	; 2
    5d1a:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <calc_crc8>
	if(data[2]!=crc) return false;
    5d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d20:	89 13       	cpse	r24, r25
    5d22:	0a c0       	rjmp	.+20     	; 0x5d38 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    5d24:	62 e0       	ldi	r22, 0x02	; 2
    5d26:	ce 01       	movw	r24, r28
    5d28:	03 96       	adiw	r24, 0x03	; 3
    5d2a:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <calc_crc8>
	if(data[5]!=crc) return false;
    5d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    5d30:	89 17       	cp	r24, r25
    5d32:	21 f0       	breq	.+8      	; 0x5d3c <validate_data+0x2a>
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	03 c0       	rjmp	.+6      	; 0x5d3e <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    5d38:	80 e0       	ldi	r24, 0x00	; 0
    5d3a:	01 c0       	rjmp	.+2      	; 0x5d3e <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    5d3c:	81 e0       	ldi	r24, 0x01	; 1
}
    5d3e:	df 91       	pop	r29
    5d40:	cf 91       	pop	r28
    5d42:	08 95       	ret

Disassembly of section .text.read_value:

00003d2c <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    3d2c:	0f 93       	push	r16
    3d2e:	1f 93       	push	r17
    3d30:	cf 93       	push	r28
    3d32:	df 93       	push	r29
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <read_value+0xa>
    3d36:	00 d0       	rcall	.+0      	; 0x3d38 <read_value+0xc>
    3d38:	00 d0       	rcall	.+0      	; 0x3d3a <read_value+0xe>
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    3d40:	8f ef       	ldi	r24, 0xFF	; 255
    3d42:	9f ef       	ldi	r25, 0xFF	; 255
    3d44:	f8 01       	movw	r30, r16
    3d46:	91 83       	std	Z+1, r25	; 0x01
    3d48:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    3d4a:	0e 94 95 34 	call	0x692a	; 0x692a <SCD30_HAL_data_ready>
    3d4e:	81 11       	cpse	r24, r1
    3d50:	07 c0       	rjmp	.+14     	; 0x3d60 <read_value+0x34>
		*value=0xfffe;
    3d52:	8e ef       	ldi	r24, 0xFE	; 254
    3d54:	9f ef       	ldi	r25, 0xFF	; 255
    3d56:	f8 01       	movw	r30, r16
    3d58:	91 83       	std	Z+1, r25	; 0x01
    3d5a:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    3d5c:	83 e0       	ldi	r24, 0x03	; 3
    3d5e:	2c c0       	rjmp	.+88     	; 0x3db8 <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    3d60:	22 e0       	ldi	r18, 0x02	; 2
    3d62:	46 e0       	ldi	r20, 0x06	; 6
    3d64:	59 e0       	ldi	r21, 0x09	; 9
    3d66:	60 e0       	ldi	r22, 0x00	; 0
    3d68:	81 e6       	ldi	r24, 0x61	; 97
    3d6a:	0e 94 10 32 	call	0x6420	; 0x6420 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3d6e:	81 11       	cpse	r24, r1
    3d70:	1e c0       	rjmp	.+60     	; 0x3dae <read_value+0x82>
    3d72:	8f e3       	ldi	r24, 0x3F	; 63
    3d74:	9f e1       	ldi	r25, 0x1F	; 31
    3d76:	01 97       	sbiw	r24, 0x01	; 1
    3d78:	f1 f7       	brne	.-4      	; 0x3d76 <read_value+0x4a>
    3d7a:	00 c0       	rjmp	.+0      	; 0x3d7c <read_value+0x50>
    3d7c:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    3d7e:	46 e0       	ldi	r20, 0x06	; 6
    3d80:	be 01       	movw	r22, r28
    3d82:	6f 5f       	subi	r22, 0xFF	; 255
    3d84:	7f 4f       	sbci	r23, 0xFF	; 255
    3d86:	81 e6       	ldi	r24, 0x61	; 97
    3d88:	0e 94 57 2e 	call	0x5cae	; 0x5cae <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3d8c:	81 11       	cpse	r24, r1
    3d8e:	11 c0       	rjmp	.+34     	; 0x3db2 <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3d90:	ce 01       	movw	r24, r28
    3d92:	01 96       	adiw	r24, 0x01	; 1
    3d94:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <validate_data>
    3d98:	88 23       	and	r24, r24
    3d9a:	69 f0       	breq	.+26     	; 0x3db6 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	01 96       	adiw	r24, 0x01	; 1
    3da0:	0e 94 2a 32 	call	0x6454	; 0x6454 <bytes_2_uint>
    3da4:	f8 01       	movw	r30, r16
    3da6:	91 83       	std	Z+1, r25	; 0x01
    3da8:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	05 c0       	rjmp	.+10     	; 0x3db8 <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	03 c0       	rjmp	.+6      	; 0x3db8 <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	01 c0       	rjmp	.+2      	; 0x3db8 <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3db6:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    3db8:	26 96       	adiw	r28, 0x06	; 6
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	de bf       	out	0x3e, r29	; 62
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	cd bf       	out	0x3d, r28	; 61
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	1f 91       	pop	r17
    3dca:	0f 91       	pop	r16
    3dcc:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00005624 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    5624:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <_data>
    5628:	90 91 0c 0d 	lds	r25, 0x0D0C	; 0x800d0c <_data+0x1>
    562c:	20 91 09 0d 	lds	r18, 0x0D09	; 0x800d09 <cntSamples>
    5630:	30 91 0a 0d 	lds	r19, 0x0D0A	; 0x800d0a <cntSamples+0x1>
    5634:	a9 01       	movw	r20, r18
    5636:	4f 5f       	subi	r20, 0xFF	; 255
    5638:	5f 4f       	sbci	r21, 0xFF	; 255
    563a:	50 93 0a 0d 	sts	0x0D0A, r21	; 0x800d0a <cntSamples+0x1>
    563e:	40 93 09 0d 	sts	0x0D09, r20	; 0x800d09 <cntSamples>
    5642:	22 0f       	add	r18, r18
    5644:	33 1f       	adc	r19, r19
    5646:	82 0f       	add	r24, r18
    5648:	93 1f       	adc	r25, r19
    564a:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <read_value>
	if(cntSamples>=_nSamples){
    564e:	20 91 09 0d 	lds	r18, 0x0D09	; 0x800d09 <cntSamples>
    5652:	30 91 0a 0d 	lds	r19, 0x0D0A	; 0x800d0a <cntSamples+0x1>
    5656:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <_nSamples>
    565a:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <_nSamples+0x1>
    565e:	28 17       	cp	r18, r24
    5660:	39 07       	cpc	r19, r25
    5662:	10 f0       	brcs	.+4      	; 0x5668 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    5664:	0e 94 35 34 	call	0x686a	; 0x686a <TC1_HAL_stop>
    5668:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

000061a0 <SCD30_sensor_on>:
static void vect_SCD_do_sample();
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    61a0:	0e 94 b1 33 	call	0x6762	; 0x6762 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    61a4:	81 e0       	ldi	r24, 0x01	; 1
    61a6:	0e 94 e6 32 	call	0x65cc	; 0x65cc <PM_HAL_SCD30_power>
    61aa:	2f ef       	ldi	r18, 0xFF	; 255
    61ac:	83 ed       	ldi	r24, 0xD3	; 211
    61ae:	90 e3       	ldi	r25, 0x30	; 48
    61b0:	21 50       	subi	r18, 0x01	; 1
    61b2:	80 40       	sbci	r24, 0x00	; 0
    61b4:	90 40       	sbci	r25, 0x00	; 0
    61b6:	e1 f7       	brne	.-8      	; 0x61b0 <SCD30_sensor_on+0x10>
    61b8:	00 c0       	rjmp	.+0      	; 0x61ba <SCD30_sensor_on+0x1a>
    61ba:	00 00       	nop
	_delay_ms(2000);
	return init_measurement();
    61bc:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <init_measurement>
}
    61c0:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

000069e8 <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    69e8:	80 e0       	ldi	r24, 0x00	; 0
    69ea:	0e 94 e6 32 	call	0x65cc	; 0x65cc <PM_HAL_SCD30_power>
    69ee:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

000061c2 <SCD30_init_sampling>:
}

void SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
	_nSamples=nSamples;
    61c2:	70 93 0e 0d 	sts	0x0D0E, r23	; 0x800d0e <_nSamples+0x1>
    61c6:	60 93 0d 0d 	sts	0x0D0D, r22	; 0x800d0d <_nSamples>
	cntSamples=0;
    61ca:	10 92 0a 0d 	sts	0x0D0A, r1	; 0x800d0a <cntSamples+0x1>
    61ce:	10 92 09 0d 	sts	0x0D09, r1	; 0x800d09 <cntSamples>
	_data=data;
    61d2:	50 93 0c 0d 	sts	0x0D0C, r21	; 0x800d0c <_data+0x1>
    61d6:	40 93 0b 0d 	sts	0x0D0B, r20	; 0x800d0b <_data>

	//Init
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    61da:	62 e1       	ldi	r22, 0x12	; 18
    61dc:	7b e2       	ldi	r23, 0x2B	; 43
    61de:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <TC1_HAL_init>
    61e2:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

000067ee <SCD30_deinit_sampling>:
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    67ee:	0e 94 35 34 	call	0x686a	; 0x686a <TC1_HAL_stop>
	_data=NULL;
    67f2:	10 92 0c 0d 	sts	0x0D0C, r1	; 0x800d0c <_data+0x1>
    67f6:	10 92 0b 0d 	sts	0x0D0B, r1	; 0x800d0b <_data>
    67fa:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

0000697a <SCD30_start_sampling>:
}

void SCD30_start_sampling(){
	vect_SCD_do_sample();
    697a:	0e 94 12 2b 	call	0x5624	; 0x5624 <vect_SCD_do_sample>
	TC1_HAL_start();
    697e:	0e 94 2f 34 	call	0x685e	; 0x685e <TC1_HAL_start>
    6982:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

000063e8 <SCD30_is_sampling_done>:
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    63e8:	40 91 09 0d 	lds	r20, 0x0D09	; 0x800d09 <cntSamples>
    63ec:	50 91 0a 0d 	lds	r21, 0x0D0A	; 0x800d0a <cntSamples+0x1>
    63f0:	20 91 0d 0d 	lds	r18, 0x0D0D	; 0x800d0d <_nSamples>
    63f4:	30 91 0e 0d 	lds	r19, 0x0D0E	; 0x800d0e <_nSamples+0x1>
    63f8:	81 e0       	ldi	r24, 0x01	; 1
    63fa:	42 17       	cp	r20, r18
    63fc:	53 07       	cpc	r21, r19
    63fe:	08 f4       	brcc	.+2      	; 0x6402 <SCD30_is_sampling_done+0x1a>
    6400:	80 e0       	ldi	r24, 0x00	; 0
}
    6402:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

0000646e <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    646e:	cf 93       	push	r28
    6470:	df 93       	push	r29
    6472:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    6474:	0e 94 95 34 	call	0x692a	; 0x692a <SCD30_HAL_data_ready>
    6478:	88 23       	and	r24, r24
    647a:	e1 f3       	breq	.-8      	; 0x6474 <SCD30_get_reading+0x6>
	
	return read_value(value);
    647c:	ce 01       	movw	r24, r28
    647e:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <read_value>
}
    6482:	df 91       	pop	r29
    6484:	cf 91       	pop	r28
    6486:	08 95       	ret

Disassembly of section .text.parse_cmd:

00005ef6 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5ef6:	fc 01       	movw	r30, r24
    5ef8:	80 81       	ld	r24, Z
    5efa:	82 37       	cpi	r24, 0x72	; 114
    5efc:	51 f0       	breq	.+20     	; 0x5f12 <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    5efe:	87 37       	cpi	r24, 0x77	; 119
    5f00:	51 f0       	breq	.+20     	; 0x5f16 <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    5f02:	83 36       	cpi	r24, 0x63	; 99
    5f04:	51 f0       	breq	.+20     	; 0x5f1a <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    5f06:	83 37       	cpi	r24, 0x73	; 115
    5f08:	51 f0       	breq	.+20     	; 0x5f1e <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    5f0a:	81 37       	cpi	r24, 0x71	; 113
    5f0c:	51 f4       	brne	.+20     	; 0x5f22 <parse_cmd+0x2c>
    5f0e:	84 e0       	ldi	r24, 0x04	; 4
    5f10:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5f12:	87 e0       	ldi	r24, 0x07	; 7
    5f14:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    5f16:	88 e0       	ldi	r24, 0x08	; 8
    5f18:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    5f1a:	89 e0       	ldi	r24, 0x09	; 9
    5f1c:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    5f1e:	8a e0       	ldi	r24, 0x0A	; 10
    5f20:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    5f22:	85 e0       	ldi	r24, 0x05	; 5
}
    5f24:	08 95       	ret

Disassembly of section .text.validate_cmd:

00004e5e <validate_cmd>:

static bool validate_cmd(char msg[]){
    4e5e:	cf 93       	push	r28
    4e60:	df 93       	push	r29
    4e62:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    4e64:	bc 01       	movw	r22, r24
    4e66:	80 e8       	ldi	r24, 0x80	; 128
    4e68:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    4e6c:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4e6e:	fc 01       	movw	r30, r24
    4e70:	31 97       	sbiw	r30, 0x01	; 1
    4e72:	ec 0f       	add	r30, r28
    4e74:	fd 1f       	adc	r31, r29
    4e76:	80 81       	ld	r24, Z
    4e78:	80 32       	cpi	r24, 0x20	; 32
    4e7a:	b1 f0       	breq	.+44     	; 0x4ea8 <validate_cmd+0x4a>
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	30 e0       	ldi	r19, 0x00	; 0
    4e80:	40 e0       	ldi	r20, 0x00	; 0
    4e82:	0d c0       	rjmp	.+26     	; 0x4e9e <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    4e84:	fe 01       	movw	r30, r28
    4e86:	e2 0f       	add	r30, r18
    4e88:	f3 1f       	adc	r31, r19
    4e8a:	90 81       	ld	r25, Z
    4e8c:	90 32       	cpi	r25, 0x20	; 32
    4e8e:	21 f4       	brne	.+8      	; 0x4e98 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    4e90:	41 11       	cpse	r20, r1
    4e92:	0c c0       	rjmp	.+24     	; 0x4eac <validate_cmd+0x4e>
			lastCharWasSpace=true;
    4e94:	41 e0       	ldi	r20, 0x01	; 1
    4e96:	01 c0       	rjmp	.+2      	; 0x4e9a <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    4e98:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    4e9a:	2f 5f       	subi	r18, 0xFF	; 255
    4e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e9e:	26 17       	cp	r18, r22
    4ea0:	37 07       	cpc	r19, r23
    4ea2:	80 f3       	brcs	.-32     	; 0x4e84 <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	03 c0       	rjmp	.+6      	; 0x4eae <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4ea8:	80 e0       	ldi	r24, 0x00	; 0
    4eaa:	01 c0       	rjmp	.+2      	; 0x4eae <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    4eac:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    4eae:	df 91       	pop	r29
    4eb0:	cf 91       	pop	r28
    4eb2:	08 95       	ret

Disassembly of section .text.CONF_enter:

000026aa <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    26aa:	cf 93       	push	r28
	uart1_hal_init();
    26ac:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    26b0:	c0 e0       	ldi	r28, 0x00	; 0
    26b2:	0d c0       	rjmp	.+26     	; 0x26ce <CONF_enter+0x24>
				TC2_HAL_init();
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    26b4:	c2 e0       	ldi	r28, 0x02	; 2
    26b6:	0b c0       	rjmp	.+22     	; 0x26ce <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    26b8:	c5 e0       	ldi	r28, 0x05	; 5
    26ba:	09 c0       	rjmp	.+18     	; 0x26ce <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    26bc:	c6 e0       	ldi	r28, 0x06	; 6
    26be:	07 c0       	rjmp	.+14     	; 0x26ce <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    26c0:	c5 e0       	ldi	r28, 0x05	; 5
    26c2:	05 c0       	rjmp	.+10     	; 0x26ce <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    26c4:	c5 e0       	ldi	r28, 0x05	; 5
    26c6:	03 c0       	rjmp	.+6      	; 0x26ce <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    26c8:	c5 e0       	ldi	r28, 0x05	; 5
    26ca:	01 c0       	rjmp	.+2      	; 0x26ce <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    26cc:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    26ce:	ec 2f       	mov	r30, r28
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	ec 30       	cpi	r30, 0x0C	; 12
    26d4:	f1 05       	cpc	r31, r1
    26d6:	d8 f7       	brcc	.-10     	; 0x26ce <CONF_enter+0x24>
    26d8:	e5 5b       	subi	r30, 0xB5	; 181
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	0c 94 89 34 	jmp	0x6912	; 0x6912 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    26e0:	63 e0       	ldi	r22, 0x03	; 3
    26e2:	76 e0       	ldi	r23, 0x06	; 6
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    26ea:	69 e2       	ldi	r22, 0x29	; 41
    26ec:	76 e0       	ldi	r23, 0x06	; 6
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				TC2_HAL_init();
    26f4:	0e 94 13 31 	call	0x6226	; 0x6226 <TC2_HAL_init>
				if(!init_methane_SCD30()){
    26f8:	0e 94 42 30 	call	0x6084	; 0x6084 <init_methane_SCD30>
    26fc:	81 11       	cpse	r24, r1
    26fe:	da cf       	rjmp	.-76     	; 0x26b4 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    2700:	6b e4       	ldi	r22, 0x4B	; 75
    2702:	76 e0       	ldi	r23, 0x06	; 6
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
					state=CONF_EXIT;
    270a:	c4 e0       	ldi	r28, 0x04	; 4
    270c:	e0 cf       	rjmp	.-64     	; 0x26ce <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    270e:	0e 94 bf 33 	call	0x677e	; 0x677e <uart1_hal_message_ready>
    2712:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    2714:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    2716:	0e 94 c6 33 	call	0x678c	; 0x678c <uart1_hal_rx_full>
    271a:	81 11       	cpse	r24, r1
    271c:	cd cf       	rjmp	.-102    	; 0x26b8 <CONF_enter+0xe>
    271e:	d7 cf       	rjmp	.-82     	; 0x26ce <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    2720:	82 e7       	ldi	r24, 0x72	; 114
    2722:	97 e0       	ldi	r25, 0x07	; 7
    2724:	0e 94 2e 30 	call	0x605c	; 0x605c <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    2728:	82 e7       	ldi	r24, 0x72	; 114
    272a:	97 e0       	ldi	r25, 0x07	; 7
    272c:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <validate_cmd>
    2730:	88 23       	and	r24, r24
    2732:	21 f2       	breq	.-120    	; 0x26bc <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    2734:	82 e7       	ldi	r24, 0x72	; 114
    2736:	97 e0       	ldi	r25, 0x07	; 7
    2738:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <parse_cmd>
    273c:	c8 2f       	mov	r28, r24
    273e:	c7 cf       	rjmp	.-114    	; 0x26ce <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    2740:	62 e7       	ldi	r22, 0x72	; 114
    2742:	77 e0       	ldi	r23, 0x07	; 7
    2744:	80 e8       	ldi	r24, 0x80	; 128
    2746:	4a ea       	ldi	r20, 0xAA	; 170
    2748:	56 e0       	ldi	r21, 0x06	; 6
    274a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <handle_read>
    274e:	88 23       	and	r24, r24
    2750:	09 f4       	brne	.+2      	; 0x2754 <CONF_enter+0xaa>
    2752:	b6 cf       	rjmp	.-148    	; 0x26c0 <CONF_enter+0x16>
					state=CONF_REPLY;
    2754:	cb e0       	ldi	r28, 0x0B	; 11
    2756:	bb cf       	rjmp	.-138    	; 0x26ce <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    2758:	62 e7       	ldi	r22, 0x72	; 114
    275a:	77 e0       	ldi	r23, 0x07	; 7
    275c:	80 e8       	ldi	r24, 0x80	; 128
    275e:	4a ea       	ldi	r20, 0xAA	; 170
    2760:	56 e0       	ldi	r21, 0x06	; 6
    2762:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <handle_write>
    2766:	88 23       	and	r24, r24
    2768:	09 f4       	brne	.+2      	; 0x276c <CONF_enter+0xc2>
    276a:	ac cf       	rjmp	.-168    	; 0x26c4 <CONF_enter+0x1a>
					state=CONF_REPLY;
    276c:	cb e0       	ldi	r28, 0x0B	; 11
    276e:	af cf       	rjmp	.-162    	; 0x26ce <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    2770:	62 e7       	ldi	r22, 0x72	; 114
    2772:	77 e0       	ldi	r23, 0x07	; 7
    2774:	80 e8       	ldi	r24, 0x80	; 128
    2776:	0e 94 84 27 	call	0x4f08	; 0x4f08 <CONNECT>
    277a:	88 23       	and	r24, r24
    277c:	09 f4       	brne	.+2      	; 0x2780 <CONF_enter+0xd6>
    277e:	a4 cf       	rjmp	.-184    	; 0x26c8 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    2780:	c2 e0       	ldi	r28, 0x02	; 2
    2782:	a5 cf       	rjmp	.-182    	; 0x26ce <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
    2784:	62 e7       	ldi	r22, 0x72	; 114
    2786:	77 e0       	ldi	r23, 0x07	; 7
    2788:	80 e8       	ldi	r24, 0x80	; 128
    278a:	4a ea       	ldi	r20, 0xAA	; 170
    278c:	56 e0       	ldi	r21, 0x06	; 6
    278e:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <handle_sensor>
    2792:	88 23       	and	r24, r24
    2794:	09 f4       	brne	.+2      	; 0x2798 <CONF_enter+0xee>
    2796:	9a cf       	rjmp	.-204    	; 0x26cc <CONF_enter+0x22>
					state=CONF_REPLY;
    2798:	cb e0       	ldi	r28, 0x0B	; 11
    279a:	99 cf       	rjmp	.-206    	; 0x26ce <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    279c:	6a ea       	ldi	r22, 0xAA	; 170
    279e:	76 e0       	ldi	r23, 0x06	; 6
    27a0:	80 e8       	ldi	r24, 0x80	; 128
    27a2:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    27a6:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    27a8:	92 cf       	rjmp	.-220    	; 0x26ce <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    27aa:	6a e6       	ldi	r22, 0x6A	; 106
    27ac:	76 e0       	ldi	r23, 0x06	; 6
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    27b4:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    27b6:	8b cf       	rjmp	.-234    	; 0x26ce <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    27b8:	64 e7       	ldi	r22, 0x74	; 116
    27ba:	76 e0       	ldi	r23, 0x06	; 6
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    27c2:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    27c4:	84 cf       	rjmp	.-248    	; 0x26ce <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    27c6:	0e 94 a4 34 	call	0x6948	; 0x6948 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    27ca:	61 e8       	ldi	r22, 0x81	; 129
    27cc:	76 e0       	ldi	r23, 0x06	; 6
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    27d4:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    27d6:	7b cf       	rjmp	.-266    	; 0x26ce <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    27d8:	67 ea       	ldi	r22, 0xA7	; 167
    27da:	76 e0       	ldi	r23, 0x06	; 6
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				return;
		}
	}
}
    27e2:	cf 91       	pop	r28
    27e4:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00004924 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    4924:	cf 92       	push	r12
    4926:	df 92       	push	r13
    4928:	ef 92       	push	r14
    492a:	0f 93       	push	r16
    492c:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    492e:	6c 01       	movw	r12, r24
    4930:	20 e8       	ldi	r18, 0x80	; 128
    4932:	e2 2e       	mov	r14, r18
    4934:	04 e0       	ldi	r16, 0x04	; 4
    4936:	10 e0       	ldi	r17, 0x00	; 0
    4938:	2a e5       	ldi	r18, 0x5A	; 90
    493a:	37 e0       	ldi	r19, 0x07	; 7
    493c:	40 e0       	ldi	r20, 0x00	; 0
    493e:	8e 2d       	mov	r24, r14
    4940:	b6 01       	movw	r22, r12
    4942:	0e 94 c8 24 	call	0x4990	; 0x4990 <strncmp>
    4946:	89 2b       	or	r24, r25
    4948:	c1 f0       	breq	.+48     	; 0x497a <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    494a:	05 e0       	ldi	r16, 0x05	; 5
    494c:	10 e0       	ldi	r17, 0x00	; 0
    494e:	2f e5       	ldi	r18, 0x5F	; 95
    4950:	37 e0       	ldi	r19, 0x07	; 7
    4952:	40 e0       	ldi	r20, 0x00	; 0
    4954:	8e 2d       	mov	r24, r14
    4956:	b6 01       	movw	r22, r12
    4958:	0e 94 c8 24 	call	0x4990	; 0x4990 <strncmp>
    495c:	89 2b       	or	r24, r25
    495e:	79 f0       	breq	.+30     	; 0x497e <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    4960:	04 e0       	ldi	r16, 0x04	; 4
    4962:	10 e0       	ldi	r17, 0x00	; 0
    4964:	25 e6       	ldi	r18, 0x65	; 101
    4966:	37 e0       	ldi	r19, 0x07	; 7
    4968:	40 e0       	ldi	r20, 0x00	; 0
    496a:	8e 2d       	mov	r24, r14
    496c:	b6 01       	movw	r22, r12
    496e:	0e 94 c8 24 	call	0x4990	; 0x4990 <strncmp>
    4972:	89 2b       	or	r24, r25
    4974:	31 f4       	brne	.+12     	; 0x4982 <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    4976:	85 e0       	ldi	r24, 0x05	; 5
    4978:	05 c0       	rjmp	.+10     	; 0x4984 <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    497a:	86 e0       	ldi	r24, 0x06	; 6
    497c:	03 c0       	rjmp	.+6      	; 0x4984 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    497e:	84 e0       	ldi	r24, 0x04	; 4
    4980:	01 c0       	rjmp	.+2      	; 0x4984 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    4982:	83 e0       	ldi	r24, 0x03	; 3
    4984:	1f 91       	pop	r17
    4986:	0f 91       	pop	r16
    4988:	ef 90       	pop	r14
    498a:	df 90       	pop	r13
    498c:	cf 90       	pop	r12
    498e:	08 95       	ret

Disassembly of section .text.CON_RN2483:

000022a2 <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    22a2:	6f 92       	push	r6
    22a4:	7f 92       	push	r7
    22a6:	8f 92       	push	r8
    22a8:	cf 92       	push	r12
    22aa:	df 92       	push	r13
    22ac:	ef 92       	push	r14
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    22b2:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    22b4:	ec 2f       	mov	r30, r28
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	e7 30       	cpi	r30, 0x07	; 7
    22ba:	f1 05       	cpc	r31, r1
    22bc:	d8 f7       	brcc	.-10     	; 0x22b4 <CON_RN2483+0x12>
    22be:	e9 5a       	subi	r30, 0xA9	; 169
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	0c 94 89 34 	jmp	0x6912	; 0x6912 <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    22c6:	0e 94 5f 2c 	call	0x58be	; 0x58be <uart0_hal_init>
				rn2483_init();
    22ca:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <rn2483_init>
				LM_reset_module();
    22ce:	0e 94 13 35 	call	0x6a26	; 0x6a26 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    22d2:	6a e6       	ldi	r22, 0x6A	; 106
    22d4:	77 e0       	ldi	r23, 0x07	; 7
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				state=CL_READ_MSG;
    22dc:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    22de:	ea cf       	rjmp	.-44     	; 0x22b4 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    22e0:	0e 94 bf 33 	call	0x677e	; 0x677e <uart1_hal_message_ready>
    22e4:	88 23       	and	r24, r24
    22e6:	31 f3       	breq	.-52     	; 0x22b4 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    22e8:	82 e7       	ldi	r24, 0x72	; 114
    22ea:	97 e0       	ldi	r25, 0x07	; 7
    22ec:	0e 94 2e 30 	call	0x605c	; 0x605c <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    22f0:	c2 e0       	ldi	r28, 0x02	; 2
    22f2:	e0 cf       	rjmp	.-64     	; 0x22b4 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    22f4:	82 e7       	ldi	r24, 0x72	; 114
    22f6:	97 e0       	ldi	r25, 0x07	; 7
    22f8:	0e 94 92 24 	call	0x4924	; 0x4924 <CON_RN2483_parse>
    22fc:	c8 2f       	mov	r28, r24
			break;
    22fe:	da cf       	rjmp	.-76     	; 0x22b4 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    2300:	82 e7       	ldi	r24, 0x72	; 114
    2302:	97 e0       	ldi	r25, 0x07	; 7
    2304:	6c 01       	movw	r12, r24
    2306:	20 e8       	ldi	r18, 0x80	; 128
    2308:	e2 2e       	mov	r14, r18
    230a:	2f 93       	push	r18
    230c:	df 92       	push	r13
    230e:	8f 93       	push	r24
    2310:	80 ea       	ldi	r24, 0xA0	; 160
    2312:	97 e0       	ldi	r25, 0x07	; 7
    2314:	a0 e0       	ldi	r26, 0x00	; 0
    2316:	af 93       	push	r26
    2318:	9f 93       	push	r25
    231a:	8f 93       	push	r24
    231c:	ca ea       	ldi	r28, 0xAA	; 170
    231e:	d6 e0       	ldi	r29, 0x06	; 6
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
				uart1_hal_send_string(cnf_reply);
    2328:	3e 01       	movw	r6, r28
    232a:	20 e8       	ldi	r18, 0x80	; 128
    232c:	82 2e       	mov	r8, r18
    232e:	88 2d       	mov	r24, r8
    2330:	b3 01       	movw	r22, r6
    2332:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    2336:	ae 01       	movw	r20, r28
    2338:	6c 2d       	mov	r22, r12
    233a:	7d 2d       	mov	r23, r13
    233c:	8e 2d       	mov	r24, r14
    233e:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    2342:	88 2d       	mov	r24, r8
    2344:	b3 01       	movw	r22, r6
    2346:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    234a:	8d b7       	in	r24, 0x3d	; 61
    234c:	9e b7       	in	r25, 0x3e	; 62
    234e:	08 96       	adiw	r24, 0x08	; 8
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	9e bf       	out	0x3e, r25	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    235a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    235c:	ab cf       	rjmp	.-170    	; 0x22b4 <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    235e:	86 ea       	ldi	r24, 0xA6	; 166
    2360:	97 e0       	ldi	r25, 0x07	; 7
    2362:	a0 e0       	ldi	r26, 0x00	; 0
    2364:	af 93       	push	r26
    2366:	9f 93       	push	r25
    2368:	8f 93       	push	r24
    236a:	80 ea       	ldi	r24, 0xA0	; 160
    236c:	97 e0       	ldi	r25, 0x07	; 7
    236e:	a0 e0       	ldi	r26, 0x00	; 0
    2370:	af 93       	push	r26
    2372:	9f 93       	push	r25
    2374:	8f 93       	push	r24
    2376:	ca ea       	ldi	r28, 0xAA	; 170
    2378:	d6 e0       	ldi	r29, 0x06	; 6
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
				uart1_hal_send_string(cnf_reply);
    2382:	be 01       	movw	r22, r28
    2384:	80 e8       	ldi	r24, 0x80	; 128
    2386:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
    238a:	8f e7       	ldi	r24, 0x7F	; 127
    238c:	98 e3       	ldi	r25, 0x38	; 56
    238e:	21 e0       	ldi	r18, 0x01	; 1
    2390:	81 50       	subi	r24, 0x01	; 1
    2392:	90 40       	sbci	r25, 0x00	; 0
    2394:	20 40       	sbci	r18, 0x00	; 0
    2396:	e1 f7       	brne	.-8      	; 0x2390 <CON_RN2483+0xee>
    2398:	00 c0       	rjmp	.+0      	; 0x239a <CON_RN2483+0xf8>
    239a:	00 00       	nop
				_delay_ms(50);
				LM_send_break();
    239c:	0e 94 19 35 	call	0x6a32	; 0x6a32 <LM_send_break>
				state=CL_READ_MSG;
			break;
    23a0:	8d b7       	in	r24, 0x3d	; 61
    23a2:	9e b7       	in	r25, 0x3e	; 62
    23a4:	08 96       	adiw	r24, 0x08	; 8
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	9e bf       	out	0x3e, r25	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	8d bf       	out	0x3d, r24	; 61
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break();
				state=CL_READ_MSG;
    23b0:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    23b2:	80 cf       	rjmp	.-256    	; 0x22b4 <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    23b4:	0e 94 b8 33 	call	0x6770	; 0x6770 <uart0_hal_message_ready>
    23b8:	88 23       	and	r24, r24
    23ba:	29 f0       	breq	.+10     	; 0x23c6 <CON_RN2483+0x124>
					uart0_hal_read_message_as_str(cnf_reply);
    23bc:	8a ea       	ldi	r24, 0xAA	; 170
    23be:	96 e0       	ldi	r25, 0x06	; 6
    23c0:	0e 94 1a 30 	call	0x6034	; 0x6034 <uart0_hal_read_message_as_str>
    23c4:	09 c0       	rjmp	.+18     	; 0x23d8 <CON_RN2483+0x136>
				}else{
					strcpy(cnf_reply, "null");
    23c6:	25 e0       	ldi	r18, 0x05	; 5
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	41 eb       	ldi	r20, 0xB1	; 177
    23cc:	57 e0       	ldi	r21, 0x07	; 7
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	8a ea       	ldi	r24, 0xAA	; 170
    23d2:	96 e0       	ldi	r25, 0x06	; 6
    23d4:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    23d8:	6a ea       	ldi	r22, 0xAA	; 170
    23da:	76 e0       	ldi	r23, 0x06	; 6
    23dc:	80 e8       	ldi	r24, 0x80	; 128
    23de:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				state=CL_READ_MSG;
    23e2:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    23e4:	67 cf       	rjmp	.-306    	; 0x22b4 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    23e6:	0e 94 9f 34 	call	0x693e	; 0x693e <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    23ea:	66 eb       	ldi	r22, 0xB6	; 182
    23ec:	77 e0       	ldi	r23, 0x07	; 7
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	ef 90       	pop	r14
    23fc:	df 90       	pop	r13
    23fe:	cf 90       	pop	r12
    2400:	8f 90       	pop	r8
    2402:	7f 90       	pop	r7
    2404:	6f 90       	pop	r6
    2406:	08 95       	ret

Disassembly of section .text.CONNECT:

00004f08 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    4f08:	cf 93       	push	r28
    4f0a:	df 93       	push	r29
    4f0c:	cd b7       	in	r28, 0x3d	; 61
    4f0e:	de b7       	in	r29, 0x3e	; 62
    4f10:	64 97       	sbiw	r28, 0x14	; 20
    4f12:	0f b6       	in	r0, 0x3f	; 63
    4f14:	f8 94       	cli
    4f16:	de bf       	out	0x3e, r29	; 62
    4f18:	0f be       	out	0x3f, r0	; 63
    4f1a:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    4f1c:	21 e0       	ldi	r18, 0x01	; 1
    4f1e:	ae 01       	movw	r20, r28
    4f20:	4f 5f       	subi	r20, 0xFF	; 255
    4f22:	5f 4f       	sbci	r21, 0xFF	; 255
    4f24:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    4f28:	88 23       	and	r24, r24
    4f2a:	79 f0       	breq	.+30     	; 0x4f4a <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    4f2c:	be 01       	movw	r22, r28
    4f2e:	6f 5f       	subi	r22, 0xFF	; 255
    4f30:	7f 4f       	sbci	r23, 0xFF	; 255
    4f32:	80 e8       	ldi	r24, 0x80	; 128
    4f34:	26 ed       	ldi	r18, 0xD6	; 214
    4f36:	37 e0       	ldi	r19, 0x07	; 7
    4f38:	40 e0       	ldi	r20, 0x00	; 0
    4f3a:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    4f3e:	89 2b       	or	r24, r25
    4f40:	19 f4       	brne	.+6      	; 0x4f48 <CONNECT+0x40>
		return CON_RN2483();
    4f42:	0e 94 51 11 	call	0x22a2	; 0x22a2 <CON_RN2483>
    4f46:	01 c0       	rjmp	.+2      	; 0x4f4a <CONNECT+0x42>
	}else{
		return false;
    4f48:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4f4a:	64 96       	adiw	r28, 0x14	; 20
    4f4c:	0f b6       	in	r0, 0x3f	; 63
    4f4e:	f8 94       	cli
    4f50:	de bf       	out	0x3e, r29	; 62
    4f52:	0f be       	out	0x3f, r0	; 63
    4f54:	cd bf       	out	0x3d, r28	; 61
    4f56:	df 91       	pop	r29
    4f58:	cf 91       	pop	r28
    4f5a:	08 95       	ret

Disassembly of section .text.read_cols:

00003656 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    3656:	cf 92       	push	r12
    3658:	df 92       	push	r13
    365a:	ef 92       	push	r14
    365c:	ff 92       	push	r15
    365e:	1f 93       	push	r17
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
    3668:	a3 97       	sbiw	r28, 0x23	; 35
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    3676:	63 e2       	ldi	r22, 0x23	; 35
    3678:	ce 01       	movw	r24, r28
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	0e 94 7e 33 	call	0x66fc	; 0x66fc <EM_get_collections>
	res[0]='\0';
    3680:	f7 01       	movw	r30, r14
    3682:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    3684:	10 e0       	ldi	r17, 0x00	; 0
    3686:	35 c0       	rjmp	.+106    	; 0x36f2 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    3688:	81 2f       	mov	r24, r17
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	fc 01       	movw	r30, r24
    368e:	ee 0f       	add	r30, r30
    3690:	ff 1f       	adc	r31, r31
    3692:	ee 0f       	add	r30, r30
    3694:	ff 1f       	adc	r31, r31
    3696:	e8 0f       	add	r30, r24
    3698:	f9 1f       	adc	r31, r25
    369a:	21 e0       	ldi	r18, 0x01	; 1
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	2c 0f       	add	r18, r28
    36a0:	3d 1f       	adc	r19, r29
    36a2:	e2 0f       	add	r30, r18
    36a4:	f3 1f       	adc	r31, r19
    36a6:	23 81       	ldd	r18, Z+3	; 0x03
    36a8:	2f 93       	push	r18
    36aa:	22 81       	ldd	r18, Z+2	; 0x02
    36ac:	2f 93       	push	r18
    36ae:	21 81       	ldd	r18, Z+1	; 0x01
    36b0:	2f 93       	push	r18
    36b2:	20 81       	ld	r18, Z
    36b4:	2f 93       	push	r18
    36b6:	01 96       	adiw	r24, 0x01	; 1
    36b8:	9f 93       	push	r25
    36ba:	8f 93       	push	r24
    36bc:	8b e7       	ldi	r24, 0x7B	; 123
    36be:	94 e0       	ldi	r25, 0x04	; 4
    36c0:	a0 e0       	ldi	r26, 0x00	; 0
    36c2:	af 93       	push	r26
    36c4:	9f 93       	push	r25
    36c6:	8f 93       	push	r24
    36c8:	0f 2e       	mov	r0, r31
    36ca:	fb ea       	ldi	r31, 0xAB	; 171
    36cc:	cf 2e       	mov	r12, r31
    36ce:	fb e0       	ldi	r31, 0x0B	; 11
    36d0:	df 2e       	mov	r13, r31
    36d2:	f0 2d       	mov	r31, r0
    36d4:	df 92       	push	r13
    36d6:	cf 92       	push	r12
    36d8:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
		strcat(res, arg);
    36dc:	a6 01       	movw	r20, r12
    36de:	60 e8       	ldi	r22, 0x80	; 128
    36e0:	c7 01       	movw	r24, r14
    36e2:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    36e6:	1f 5f       	subi	r17, 0xFF	; 255
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	17 30       	cpi	r17, 0x07	; 7
    36f4:	48 f2       	brcs	.-110    	; 0x3688 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    36f6:	a3 96       	adiw	r28, 0x23	; 35
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	1f 91       	pop	r17
    3708:	ff 90       	pop	r15
    370a:	ef 90       	pop	r14
    370c:	df 90       	pop	r13
    370e:	cf 90       	pop	r12
    3710:	08 95       	ret

Disassembly of section .text.read_time:

00004026 <read_time>:

static void read_time(char res[]){
    4026:	0f 93       	push	r16
    4028:	1f 93       	push	r17
    402a:	cf 93       	push	r28
    402c:	df 93       	push	r29
    402e:	00 d0       	rcall	.+0      	; 0x4030 <read_time+0xa>
    4030:	00 d0       	rcall	.+0      	; 0x4032 <read_time+0xc>
    4032:	00 d0       	rcall	.+0      	; 0x4034 <read_time+0xe>
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	18 2f       	mov	r17, r24
    403a:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    403c:	0e 94 40 33 	call	0x6680	; 0x6680 <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    4040:	ce 01       	movw	r24, r28
    4042:	01 96       	adiw	r24, 0x01	; 1
    4044:	0e 94 b5 12 	call	0x256a	; 0x256a <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    4048:	88 23       	and	r24, r24
    404a:	51 f0       	breq	.+20     	; 0x4060 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    404c:	24 e1       	ldi	r18, 0x14	; 20
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	41 e9       	ldi	r20, 0x91	; 145
    4052:	54 e0       	ldi	r21, 0x04	; 4
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	81 2f       	mov	r24, r17
    4058:	90 2f       	mov	r25, r16
    405a:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
    405e:	21 c0       	rjmp	.+66     	; 0x40a2 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    4060:	59 81       	ldd	r21, Y+1	; 0x01
    4062:	4a 81       	ldd	r20, Y+2	; 0x02
    4064:	3b 81       	ldd	r19, Y+3	; 0x03
    4066:	2c 81       	ldd	r18, Y+4	; 0x04
    4068:	9d 81       	ldd	r25, Y+5	; 0x05
    406a:	8e 81       	ldd	r24, Y+6	; 0x06
    406c:	1f 92       	push	r1
    406e:	5f 93       	push	r21
    4070:	1f 92       	push	r1
    4072:	4f 93       	push	r20
    4074:	1f 92       	push	r1
    4076:	3f 93       	push	r19
    4078:	1f 92       	push	r1
    407a:	2f 93       	push	r18
    407c:	1f 92       	push	r1
    407e:	9f 93       	push	r25
    4080:	1f 92       	push	r1
    4082:	8f 93       	push	r24
    4084:	85 ea       	ldi	r24, 0xA5	; 165
    4086:	94 e0       	ldi	r25, 0x04	; 4
    4088:	a0 e0       	ldi	r26, 0x00	; 0
    408a:	af 93       	push	r26
    408c:	9f 93       	push	r25
    408e:	8f 93       	push	r24
    4090:	0f 93       	push	r16
    4092:	1f 93       	push	r17
    4094:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
	}
}
    40a2:	26 96       	adiw	r28, 0x06	; 6
    40a4:	0f b6       	in	r0, 0x3f	; 63
    40a6:	f8 94       	cli
    40a8:	de bf       	out	0x3e, r29	; 62
    40aa:	0f be       	out	0x3f, r0	; 63
    40ac:	cd bf       	out	0x3d, r28	; 61
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	1f 91       	pop	r17
    40b4:	0f 91       	pop	r16
    40b6:	08 95       	ret

Disassembly of section .text.write_deveui:

00004432 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    4432:	cf 92       	push	r12
    4434:	df 92       	push	r13
    4436:	ef 92       	push	r14
    4438:	0f 93       	push	r16
    443a:	1f 93       	push	r17
    443c:	cf 93       	push	r28
    443e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4440:	22 e0       	ldi	r18, 0x02	; 2
    4442:	4b ea       	ldi	r20, 0xAB	; 171
    4444:	5b e0       	ldi	r21, 0x0B	; 11
    4446:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    444a:	c8 2f       	mov	r28, r24
    444c:	88 23       	and	r24, r24
    444e:	29 f1       	breq	.+74     	; 0x449a <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    4450:	8b ea       	ldi	r24, 0xAB	; 171
    4452:	9b e0       	ldi	r25, 0x0B	; 11
    4454:	6c 01       	movw	r12, r24
    4456:	20 e8       	ldi	r18, 0x80	; 128
    4458:	e2 2e       	mov	r14, r18
    445a:	8e 2d       	mov	r24, r14
    445c:	b6 01       	movw	r22, r12
    445e:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    4462:	40 97       	sbiw	r24, 0x10	; 16
    4464:	c9 f4       	brne	.+50     	; 0x4498 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    4466:	8e 2d       	mov	r24, r14
    4468:	b6 01       	movw	r22, r12
    446a:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <EM_set_deveui>
    446e:	c8 2f       	mov	r28, r24
    4470:	81 11       	cpse	r24, r1
    4472:	09 c0       	rjmp	.+18     	; 0x4486 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    4474:	27 e0       	ldi	r18, 0x07	; 7
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	43 ec       	ldi	r20, 0xC3	; 195
    447a:	54 e0       	ldi	r21, 0x04	; 4
    447c:	60 e0       	ldi	r22, 0x00	; 0
    447e:	c8 01       	movw	r24, r16
    4480:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return false;
    4484:	0a c0       	rjmp	.+20     	; 0x449a <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4486:	28 e0       	ldi	r18, 0x08	; 8
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	4a ec       	ldi	r20, 0xCA	; 202
    448c:	54 e0       	ldi	r21, 0x04	; 4
    448e:	60 e0       	ldi	r22, 0x00	; 0
    4490:	c8 01       	movw	r24, r16
    4492:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
    4496:	01 c0       	rjmp	.+2      	; 0x449a <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4498:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    449a:	8c 2f       	mov	r24, r28
    449c:	cf 91       	pop	r28
    449e:	1f 91       	pop	r17
    44a0:	0f 91       	pop	r16
    44a2:	ef 90       	pop	r14
    44a4:	df 90       	pop	r13
    44a6:	cf 90       	pop	r12
    44a8:	08 95       	ret

Disassembly of section .text.write_appeui:

000044aa <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    44aa:	cf 92       	push	r12
    44ac:	df 92       	push	r13
    44ae:	ef 92       	push	r14
    44b0:	0f 93       	push	r16
    44b2:	1f 93       	push	r17
    44b4:	cf 93       	push	r28
    44b6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    44b8:	22 e0       	ldi	r18, 0x02	; 2
    44ba:	4b ea       	ldi	r20, 0xAB	; 171
    44bc:	5b e0       	ldi	r21, 0x0B	; 11
    44be:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    44c2:	c8 2f       	mov	r28, r24
    44c4:	88 23       	and	r24, r24
    44c6:	29 f1       	breq	.+74     	; 0x4512 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    44c8:	8b ea       	ldi	r24, 0xAB	; 171
    44ca:	9b e0       	ldi	r25, 0x0B	; 11
    44cc:	6c 01       	movw	r12, r24
    44ce:	20 e8       	ldi	r18, 0x80	; 128
    44d0:	e2 2e       	mov	r14, r18
    44d2:	8e 2d       	mov	r24, r14
    44d4:	b6 01       	movw	r22, r12
    44d6:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    44da:	40 97       	sbiw	r24, 0x10	; 16
    44dc:	c9 f4       	brne	.+50     	; 0x4510 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    44de:	8e 2d       	mov	r24, r14
    44e0:	b6 01       	movw	r22, r12
    44e2:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <EM_set_appeui>
    44e6:	c8 2f       	mov	r28, r24
    44e8:	81 11       	cpse	r24, r1
    44ea:	09 c0       	rjmp	.+18     	; 0x44fe <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    44ec:	27 e0       	ldi	r18, 0x07	; 7
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	43 ec       	ldi	r20, 0xC3	; 195
    44f2:	54 e0       	ldi	r21, 0x04	; 4
    44f4:	60 e0       	ldi	r22, 0x00	; 0
    44f6:	c8 01       	movw	r24, r16
    44f8:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return false;
    44fc:	0a c0       	rjmp	.+20     	; 0x4512 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    44fe:	28 e0       	ldi	r18, 0x08	; 8
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	4a ec       	ldi	r20, 0xCA	; 202
    4504:	54 e0       	ldi	r21, 0x04	; 4
    4506:	60 e0       	ldi	r22, 0x00	; 0
    4508:	c8 01       	movw	r24, r16
    450a:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
    450e:	01 c0       	rjmp	.+2      	; 0x4512 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4510:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4512:	8c 2f       	mov	r24, r28
    4514:	cf 91       	pop	r28
    4516:	1f 91       	pop	r17
    4518:	0f 91       	pop	r16
    451a:	ef 90       	pop	r14
    451c:	df 90       	pop	r13
    451e:	cf 90       	pop	r12
    4520:	08 95       	ret

Disassembly of section .text.write_appkey:

00004522 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    4522:	cf 92       	push	r12
    4524:	df 92       	push	r13
    4526:	ef 92       	push	r14
    4528:	0f 93       	push	r16
    452a:	1f 93       	push	r17
    452c:	cf 93       	push	r28
    452e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4530:	22 e0       	ldi	r18, 0x02	; 2
    4532:	4b ea       	ldi	r20, 0xAB	; 171
    4534:	5b e0       	ldi	r21, 0x0B	; 11
    4536:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    453a:	c8 2f       	mov	r28, r24
    453c:	88 23       	and	r24, r24
    453e:	29 f1       	breq	.+74     	; 0x458a <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    4540:	8b ea       	ldi	r24, 0xAB	; 171
    4542:	9b e0       	ldi	r25, 0x0B	; 11
    4544:	6c 01       	movw	r12, r24
    4546:	20 e8       	ldi	r18, 0x80	; 128
    4548:	e2 2e       	mov	r14, r18
    454a:	8e 2d       	mov	r24, r14
    454c:	b6 01       	movw	r22, r12
    454e:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    4552:	80 97       	sbiw	r24, 0x20	; 32
    4554:	c9 f4       	brne	.+50     	; 0x4588 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    4556:	8e 2d       	mov	r24, r14
    4558:	b6 01       	movw	r22, r12
    455a:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <EM_set_appkey>
    455e:	c8 2f       	mov	r28, r24
    4560:	81 11       	cpse	r24, r1
    4562:	09 c0       	rjmp	.+18     	; 0x4576 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    4564:	27 e0       	ldi	r18, 0x07	; 7
    4566:	30 e0       	ldi	r19, 0x00	; 0
    4568:	43 ec       	ldi	r20, 0xC3	; 195
    456a:	54 e0       	ldi	r21, 0x04	; 4
    456c:	60 e0       	ldi	r22, 0x00	; 0
    456e:	c8 01       	movw	r24, r16
    4570:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return false;
    4574:	0a c0       	rjmp	.+20     	; 0x458a <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4576:	28 e0       	ldi	r18, 0x08	; 8
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	4a ec       	ldi	r20, 0xCA	; 202
    457c:	54 e0       	ldi	r21, 0x04	; 4
    457e:	60 e0       	ldi	r22, 0x00	; 0
    4580:	c8 01       	movw	r24, r16
    4582:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
    4586:	01 c0       	rjmp	.+2      	; 0x458a <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    4588:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    458a:	8c 2f       	mov	r24, r28
    458c:	cf 91       	pop	r28
    458e:	1f 91       	pop	r17
    4590:	0f 91       	pop	r16
    4592:	ef 90       	pop	r14
    4594:	df 90       	pop	r13
    4596:	cf 90       	pop	r12
    4598:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

0000526c <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    526c:	0f 93       	push	r16
    526e:	1f 93       	push	r17
    5270:	cf 93       	push	r28
    5272:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5274:	22 e0       	ldi	r18, 0x02	; 2
    5276:	4b ea       	ldi	r20, 0xAB	; 171
    5278:	5b e0       	ldi	r21, 0x0B	; 11
    527a:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    527e:	c8 2f       	mov	r28, r24
    5280:	88 23       	and	r24, r24
    5282:	a9 f0       	breq	.+42     	; 0x52ae <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    5284:	8b ea       	ldi	r24, 0xAB	; 171
    5286:	9b e0       	ldi	r25, 0x0B	; 11
    5288:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <is_float>
    528c:	c8 2f       	mov	r28, r24
    528e:	88 23       	and	r24, r24
    5290:	71 f0       	breq	.+28     	; 0x52ae <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    5292:	8b ea       	ldi	r24, 0xAB	; 171
    5294:	9b e0       	ldi	r25, 0x0B	; 11
    5296:	0e 94 c3 28 	call	0x5186	; 0x5186 <str2flaot>
	EM_set_ppmfactor(val);
    529a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    529e:	28 e0       	ldi	r18, 0x08	; 8
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	4a ec       	ldi	r20, 0xCA	; 202
    52a4:	54 e0       	ldi	r21, 0x04	; 4
    52a6:	60 e0       	ldi	r22, 0x00	; 0
    52a8:	c8 01       	movw	r24, r16
    52aa:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
	return true;
}
    52ae:	8c 2f       	mov	r24, r28
    52b0:	cf 91       	pop	r28
    52b2:	1f 91       	pop	r17
    52b4:	0f 91       	pop	r16
    52b6:	08 95       	ret

Disassembly of section .text.write_RRL:

000052b8 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    52b8:	0f 93       	push	r16
    52ba:	1f 93       	push	r17
    52bc:	cf 93       	push	r28
    52be:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    52c0:	22 e0       	ldi	r18, 0x02	; 2
    52c2:	4b ea       	ldi	r20, 0xAB	; 171
    52c4:	5b e0       	ldi	r21, 0x0B	; 11
    52c6:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    52ca:	c8 2f       	mov	r28, r24
    52cc:	88 23       	and	r24, r24
    52ce:	a9 f0       	breq	.+42     	; 0x52fa <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    52d0:	8b ea       	ldi	r24, 0xAB	; 171
    52d2:	9b e0       	ldi	r25, 0x0B	; 11
    52d4:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <is_float>
    52d8:	c8 2f       	mov	r28, r24
    52da:	88 23       	and	r24, r24
    52dc:	71 f0       	breq	.+28     	; 0x52fa <write_RRL+0x42>
	
	float val=str2flaot(arg);
    52de:	8b ea       	ldi	r24, 0xAB	; 171
    52e0:	9b e0       	ldi	r25, 0x0B	; 11
    52e2:	0e 94 c3 28 	call	0x5186	; 0x5186 <str2flaot>
	EM_set_RRL(val);
    52e6:	0e 94 db 33 	call	0x67b6	; 0x67b6 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    52ea:	28 e0       	ldi	r18, 0x08	; 8
    52ec:	30 e0       	ldi	r19, 0x00	; 0
    52ee:	4a ec       	ldi	r20, 0xCA	; 202
    52f0:	54 e0       	ldi	r21, 0x04	; 4
    52f2:	60 e0       	ldi	r22, 0x00	; 0
    52f4:	c8 01       	movw	r24, r16
    52f6:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
	return true;
}
    52fa:	8c 2f       	mov	r24, r28
    52fc:	cf 91       	pop	r28
    52fe:	1f 91       	pop	r17
    5300:	0f 91       	pop	r16
    5302:	08 95       	ret

Disassembly of section .text.write_VCC:

00005304 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    5304:	0f 93       	push	r16
    5306:	1f 93       	push	r17
    5308:	cf 93       	push	r28
    530a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    530c:	22 e0       	ldi	r18, 0x02	; 2
    530e:	4b ea       	ldi	r20, 0xAB	; 171
    5310:	5b e0       	ldi	r21, 0x0B	; 11
    5312:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    5316:	c8 2f       	mov	r28, r24
    5318:	88 23       	and	r24, r24
    531a:	a9 f0       	breq	.+42     	; 0x5346 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    531c:	8b ea       	ldi	r24, 0xAB	; 171
    531e:	9b e0       	ldi	r25, 0x0B	; 11
    5320:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <is_float>
    5324:	c8 2f       	mov	r28, r24
    5326:	88 23       	and	r24, r24
    5328:	71 f0       	breq	.+28     	; 0x5346 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    532a:	8b ea       	ldi	r24, 0xAB	; 171
    532c:	9b e0       	ldi	r25, 0x0B	; 11
    532e:	0e 94 c3 28 	call	0x5186	; 0x5186 <str2flaot>
	EM_set_Vcc(val);
    5332:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    5336:	28 e0       	ldi	r18, 0x08	; 8
    5338:	30 e0       	ldi	r19, 0x00	; 0
    533a:	4a ec       	ldi	r20, 0xCA	; 202
    533c:	54 e0       	ldi	r21, 0x04	; 4
    533e:	60 e0       	ldi	r22, 0x00	; 0
    5340:	c8 01       	movw	r24, r16
    5342:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
	return true;
}
    5346:	8c 2f       	mov	r24, r28
    5348:	cf 91       	pop	r28
    534a:	1f 91       	pop	r17
    534c:	0f 91       	pop	r16
    534e:	08 95       	ret

Disassembly of section .text.get_time_par:

00005c7a <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    5c7a:	cf 93       	push	r28
    5c7c:	df 93       	push	r29
    5c7e:	00 d0       	rcall	.+0      	; 0x5c80 <get_time_par+0x6>
    5c80:	1f 92       	push	r1
    5c82:	cd b7       	in	r28, 0x3d	; 61
    5c84:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    5c86:	fc 01       	movw	r30, r24
    5c88:	e6 0f       	add	r30, r22
    5c8a:	f1 1d       	adc	r31, r1
    5c8c:	80 81       	ld	r24, Z
    5c8e:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    5c90:	81 81       	ldd	r24, Z+1	; 0x01
    5c92:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    5c94:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    5c96:	be 01       	movw	r22, r28
    5c98:	6f 5f       	subi	r22, 0xFF	; 255
    5c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c9c:	80 e8       	ldi	r24, 0x80	; 128
    5c9e:	0e 94 00 35 	call	0x6a00	; 0x6a00 <atoi>
}
    5ca2:	0f 90       	pop	r0
    5ca4:	0f 90       	pop	r0
    5ca6:	0f 90       	pop	r0
    5ca8:	df 91       	pop	r29
    5caa:	cf 91       	pop	r28
    5cac:	08 95       	ret

Disassembly of section .text.write_cols:

000027e6 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    27e6:	4f 92       	push	r4
    27e8:	5f 92       	push	r5
    27ea:	6f 92       	push	r6
    27ec:	7f 92       	push	r7
    27ee:	8f 92       	push	r8
    27f0:	af 92       	push	r10
    27f2:	bf 92       	push	r11
    27f4:	cf 92       	push	r12
    27f6:	df 92       	push	r13
    27f8:	ef 92       	push	r14
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	a3 97       	sbiw	r28, 0x23	; 35
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	3b 01       	movw	r6, r22
    2816:	88 2e       	mov	r8, r24
    2818:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    281a:	22 e0       	ldi	r18, 0x02	; 2
    281c:	4b ea       	ldi	r20, 0xAB	; 171
    281e:	5b e0       	ldi	r21, 0x0B	; 11
    2820:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    2824:	18 2f       	mov	r17, r24
    2826:	88 23       	and	r24, r24
    2828:	09 f4       	brne	.+2      	; 0x282c <write_cols+0x46>
    282a:	5d c0       	rjmp	.+186    	; 0x28e6 <write_cols+0x100>
	index=atoi(arg);
    282c:	8b ea       	ldi	r24, 0xAB	; 171
    282e:	9b e0       	ldi	r25, 0x0B	; 11
    2830:	6c 01       	movw	r12, r24
    2832:	20 e8       	ldi	r18, 0x80	; 128
    2834:	e2 2e       	mov	r14, r18
    2836:	8e 2d       	mov	r24, r14
    2838:	b6 01       	movw	r22, r12
    283a:	0e 94 00 35 	call	0x6a00	; 0x6a00 <atoi>
	if(index<1 || index>7) return false;
    283e:	0f ef       	ldi	r16, 0xFF	; 255
    2840:	08 0f       	add	r16, r24
    2842:	07 30       	cpi	r16, 0x07	; 7
    2844:	08 f0       	brcs	.+2      	; 0x2848 <write_cols+0x62>
    2846:	4a c0       	rjmp	.+148    	; 0x28dc <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    2848:	23 e0       	ldi	r18, 0x03	; 3
    284a:	4b ea       	ldi	r20, 0xAB	; 171
    284c:	5b e0       	ldi	r21, 0x0B	; 11
    284e:	88 2d       	mov	r24, r8
    2850:	b3 01       	movw	r22, r6
    2852:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    2856:	18 2f       	mov	r17, r24
    2858:	88 23       	and	r24, r24
    285a:	09 f4       	brne	.+2      	; 0x285e <write_cols+0x78>
    285c:	44 c0       	rjmp	.+136    	; 0x28e6 <write_cols+0x100>
	samplings=atoi(arg);
    285e:	8e 2d       	mov	r24, r14
    2860:	b6 01       	movw	r22, r12
    2862:	0e 94 00 35 	call	0x6a00	; 0x6a00 <atoi>
    2866:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    2868:	02 97       	sbiw	r24, 0x02	; 2
    286a:	8b 32       	cpi	r24, 0x2B	; 43
    286c:	91 40       	sbci	r25, 0x01	; 1
    286e:	c0 f5       	brcc	.+112    	; 0x28e0 <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    2870:	24 e0       	ldi	r18, 0x04	; 4
    2872:	4b ea       	ldi	r20, 0xAB	; 171
    2874:	5b e0       	ldi	r21, 0x0B	; 11
    2876:	88 2d       	mov	r24, r8
    2878:	b3 01       	movw	r22, r6
    287a:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    287e:	18 2f       	mov	r17, r24
    2880:	88 23       	and	r24, r24
    2882:	89 f1       	breq	.+98     	; 0x28e6 <write_cols+0x100>
	samplingInterval=atoi(arg);
    2884:	8e 2d       	mov	r24, r14
    2886:	b6 01       	movw	r22, r12
    2888:	0e 94 00 35 	call	0x6a00	; 0x6a00 <atoi>
    288c:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    288e:	02 97       	sbiw	r24, 0x02	; 2
    2890:	87 35       	cpi	r24, 0x57	; 87
    2892:	92 40       	sbci	r25, 0x02	; 2
    2894:	38 f5       	brcc	.+78     	; 0x28e4 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    2896:	63 e2       	ldi	r22, 0x23	; 35
    2898:	ce 01       	movw	r24, r28
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	7c 01       	movw	r14, r24
    289e:	0e 94 7e 33 	call	0x66fc	; 0x66fc <EM_get_collections>
	
	cols[index].samplings=samplings;
    28a2:	80 2f       	mov	r24, r16
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	fc 01       	movw	r30, r24
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	ee 0f       	add	r30, r30
    28ae:	ff 1f       	adc	r31, r31
    28b0:	e8 0f       	add	r30, r24
    28b2:	f9 1f       	adc	r31, r25
    28b4:	ee 0d       	add	r30, r14
    28b6:	ff 1d       	adc	r31, r15
    28b8:	51 82       	std	Z+1, r5	; 0x01
    28ba:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    28bc:	d3 82       	std	Z+3, r13	; 0x03
    28be:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    28c0:	b7 01       	movw	r22, r14
    28c2:	80 e8       	ldi	r24, 0x80	; 128
    28c4:	43 e2       	ldi	r20, 0x23	; 35
    28c6:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    28ca:	28 e0       	ldi	r18, 0x08	; 8
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4a ec       	ldi	r20, 0xCA	; 202
    28d0:	54 e0       	ldi	r21, 0x04	; 4
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	c5 01       	movw	r24, r10
    28d6:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
	return true;	
    28da:	05 c0       	rjmp	.+10     	; 0x28e6 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    28dc:	10 e0       	ldi	r17, 0x00	; 0
    28de:	03 c0       	rjmp	.+6      	; 0x28e6 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    28e0:	10 e0       	ldi	r17, 0x00	; 0
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    28e4:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    28e6:	81 2f       	mov	r24, r17
    28e8:	a3 96       	adiw	r28, 0x23	; 35
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	1f 91       	pop	r17
    28fa:	0f 91       	pop	r16
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	df 90       	pop	r13
    2902:	cf 90       	pop	r12
    2904:	bf 90       	pop	r11
    2906:	af 90       	pop	r10
    2908:	8f 90       	pop	r8
    290a:	7f 90       	pop	r7
    290c:	6f 90       	pop	r6
    290e:	5f 90       	pop	r5
    2910:	4f 90       	pop	r4
    2912:	08 95       	ret

Disassembly of section .text.write_heat_up:

00005350 <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    5350:	0f 93       	push	r16
    5352:	1f 93       	push	r17
    5354:	cf 93       	push	r28
    5356:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5358:	22 e0       	ldi	r18, 0x02	; 2
    535a:	4b ea       	ldi	r20, 0xAB	; 171
    535c:	5b e0       	ldi	r21, 0x0B	; 11
    535e:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    5362:	c8 2f       	mov	r28, r24
    5364:	88 23       	and	r24, r24
    5366:	a9 f0       	breq	.+42     	; 0x5392 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    5368:	6b ea       	ldi	r22, 0xAB	; 171
    536a:	7b e0       	ldi	r23, 0x0B	; 11
    536c:	80 e8       	ldi	r24, 0x80	; 128
    536e:	0e 94 00 35 	call	0x6a00	; 0x6a00 <atoi>
	
	if(val<1 || val>200) return false;
    5372:	9f ef       	ldi	r25, 0xFF	; 255
    5374:	98 0f       	add	r25, r24
    5376:	98 3c       	cpi	r25, 0xC8	; 200
    5378:	58 f4       	brcc	.+22     	; 0x5390 <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    537a:	0e 94 3b 34 	call	0x6876	; 0x6876 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    537e:	28 e0       	ldi	r18, 0x08	; 8
    5380:	30 e0       	ldi	r19, 0x00	; 0
    5382:	4a ec       	ldi	r20, 0xCA	; 202
    5384:	54 e0       	ldi	r21, 0x04	; 4
    5386:	60 e0       	ldi	r22, 0x00	; 0
    5388:	c8 01       	movw	r24, r16
    538a:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
	return true;
    538e:	01 c0       	rjmp	.+2      	; 0x5392 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    5390:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5392:	8c 2f       	mov	r24, r28
    5394:	cf 91       	pop	r28
    5396:	1f 91       	pop	r17
    5398:	0f 91       	pop	r16
    539a:	08 95       	ret

Disassembly of section .text.write_air_pump:

00004ffe <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    4ffe:	0f 93       	push	r16
    5000:	1f 93       	push	r17
    5002:	cf 93       	push	r28
    5004:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5006:	22 e0       	ldi	r18, 0x02	; 2
    5008:	4b ea       	ldi	r20, 0xAB	; 171
    500a:	5b e0       	ldi	r21, 0x0B	; 11
    500c:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    5010:	c8 2f       	mov	r28, r24
    5012:	88 23       	and	r24, r24
    5014:	b9 f0       	breq	.+46     	; 0x5044 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    5016:	6b ea       	ldi	r22, 0xAB	; 171
    5018:	7b e0       	ldi	r23, 0x0B	; 11
    501a:	80 e8       	ldi	r24, 0x80	; 128
    501c:	0e 94 00 35 	call	0x6a00	; 0x6a00 <atoi>
	
	if(val<5 || val>1000) return false;
    5020:	9c 01       	movw	r18, r24
    5022:	25 50       	subi	r18, 0x05	; 5
    5024:	31 09       	sbc	r19, r1
    5026:	24 3e       	cpi	r18, 0xE4	; 228
    5028:	33 40       	sbci	r19, 0x03	; 3
    502a:	58 f4       	brcc	.+22     	; 0x5042 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    502c:	0e 94 47 34 	call	0x688e	; 0x688e <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    5030:	28 e0       	ldi	r18, 0x08	; 8
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	4a ec       	ldi	r20, 0xCA	; 202
    5036:	54 e0       	ldi	r21, 0x04	; 4
    5038:	60 e0       	ldi	r22, 0x00	; 0
    503a:	c8 01       	movw	r24, r16
    503c:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
	return true;
    5040:	01 c0       	rjmp	.+2      	; 0x5044 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    5042:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5044:	8c 2f       	mov	r24, r28
    5046:	cf 91       	pop	r28
    5048:	1f 91       	pop	r17
    504a:	0f 91       	pop	r16
    504c:	08 95       	ret

Disassembly of section .text.write_sp_interval:

0000539c <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    539c:	0f 93       	push	r16
    539e:	1f 93       	push	r17
    53a0:	cf 93       	push	r28
    53a2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    53a4:	22 e0       	ldi	r18, 0x02	; 2
    53a6:	4b ea       	ldi	r20, 0xAB	; 171
    53a8:	5b e0       	ldi	r21, 0x0B	; 11
    53aa:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    53ae:	c8 2f       	mov	r28, r24
    53b0:	88 23       	and	r24, r24
    53b2:	a9 f0       	breq	.+42     	; 0x53de <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    53b4:	6b ea       	ldi	r22, 0xAB	; 171
    53b6:	7b e0       	ldi	r23, 0x0B	; 11
    53b8:	80 e8       	ldi	r24, 0x80	; 128
    53ba:	0e 94 00 35 	call	0x6a00	; 0x6a00 <atoi>
	
	if(val<6 || val>24) return false;
    53be:	9a ef       	ldi	r25, 0xFA	; 250
    53c0:	98 0f       	add	r25, r24
    53c2:	93 31       	cpi	r25, 0x13	; 19
    53c4:	58 f4       	brcc	.+22     	; 0x53dc <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    53c6:	0e 94 53 34 	call	0x68a6	; 0x68a6 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    53ca:	28 e0       	ldi	r18, 0x08	; 8
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	4a ec       	ldi	r20, 0xCA	; 202
    53d0:	54 e0       	ldi	r21, 0x04	; 4
    53d2:	60 e0       	ldi	r22, 0x00	; 0
    53d4:	c8 01       	movw	r24, r16
    53d6:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
	return true;
    53da:	01 c0       	rjmp	.+2      	; 0x53de <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    53dc:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    53de:	8c 2f       	mov	r24, r28
    53e0:	cf 91       	pop	r28
    53e2:	1f 91       	pop	r17
    53e4:	0f 91       	pop	r16
    53e6:	08 95       	ret

Disassembly of section .text.write_reset:

00003156 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    3156:	0f 93       	push	r16
    3158:	1f 93       	push	r17
    315a:	cf 93       	push	r28
    315c:	df 93       	push	r29
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	a3 97       	sbiw	r28, 0x23	; 35
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    3170:	62 ed       	ldi	r22, 0xD2	; 210
    3172:	74 e0       	ldi	r23, 0x04	; 4
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    317a:	62 ed       	ldi	r22, 0xD2	; 210
    317c:	74 e0       	ldi	r23, 0x04	; 4
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    3184:	63 ee       	ldi	r22, 0xE3	; 227
    3186:	74 e0       	ldi	r23, 0x04	; 4
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    318e:	60 e0       	ldi	r22, 0x00	; 0
    3190:	70 e0       	ldi	r23, 0x00	; 0
    3192:	80 e8       	ldi	r24, 0x80	; 128
    3194:	9f e3       	ldi	r25, 0x3F	; 63
    3196:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    319a:	60 e0       	ldi	r22, 0x00	; 0
    319c:	70 e4       	ldi	r23, 0x40	; 64
    319e:	8c e1       	ldi	r24, 0x1C	; 28
    31a0:	95 e4       	ldi	r25, 0x45	; 69
    31a2:	0e 94 db 33 	call	0x67b6	; 0x67b6 <EM_set_RRL>
	EM_set_Vcc(5.00);
    31a6:	60 e0       	ldi	r22, 0x00	; 0
    31a8:	70 e0       	ldi	r23, 0x00	; 0
    31aa:	80 ea       	ldi	r24, 0xA0	; 160
    31ac:	90 e4       	ldi	r25, 0x40	; 64
    31ae:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	0e 94 3b 34 	call	0x6876	; 0x6876 <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    31b8:	85 e0       	ldi	r24, 0x05	; 5
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 47 34 	call	0x688e	; 0x688e <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    31c0:	86 e0       	ldi	r24, 0x06	; 6
    31c2:	0e 94 53 34 	call	0x68a6	; 0x68a6 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	1a c0       	rjmp	.+52     	; 0x31fe <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    31ca:	e8 2f       	mov	r30, r24
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	9f 01       	movw	r18, r30
    31d0:	22 0f       	add	r18, r18
    31d2:	33 1f       	adc	r19, r19
    31d4:	22 0f       	add	r18, r18
    31d6:	33 1f       	adc	r19, r19
    31d8:	e2 0f       	add	r30, r18
    31da:	f3 1f       	adc	r31, r19
    31dc:	21 e0       	ldi	r18, 0x01	; 1
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	2c 0f       	add	r18, r28
    31e2:	3d 1f       	adc	r19, r29
    31e4:	e2 0f       	add	r30, r18
    31e6:	f3 1f       	adc	r31, r19
    31e8:	92 e0       	ldi	r25, 0x02	; 2
    31ea:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    31ec:	22 e0       	ldi	r18, 0x02	; 2
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	31 83       	std	Z+1, r19	; 0x01
    31f2:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    31f4:	23 e0       	ldi	r18, 0x03	; 3
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	33 83       	std	Z+3, r19	; 0x03
    31fa:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    31fc:	8f 5f       	subi	r24, 0xFF	; 255
    31fe:	87 30       	cpi	r24, 0x07	; 7
    3200:	20 f3       	brcs	.-56     	; 0x31ca <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    3202:	be 01       	movw	r22, r28
    3204:	6f 5f       	subi	r22, 0xFF	; 255
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	80 e8       	ldi	r24, 0x80	; 128
    320a:	43 e2       	ldi	r20, 0x23	; 35
    320c:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    3210:	23 e1       	ldi	r18, 0x13	; 19
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	44 e0       	ldi	r20, 0x04	; 4
    3216:	55 e0       	ldi	r21, 0x05	; 5
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	c8 01       	movw	r24, r16
    321c:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
	return true;
}
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	a3 96       	adiw	r28, 0x23	; 35
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	1f 91       	pop	r17
    3234:	0f 91       	pop	r16
    3236:	08 95       	ret

Disassembly of section .text.write_time:

00002e70 <write_time>:

static bool write_time(const char cmd[], char res[]){
    2e70:	6f 92       	push	r6
    2e72:	7f 92       	push	r7
    2e74:	8f 92       	push	r8
    2e76:	df 92       	push	r13
    2e78:	ef 92       	push	r14
    2e7a:	ff 92       	push	r15
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <write_time+0x16>
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <write_time+0x18>
    2e88:	00 d0       	rcall	.+0      	; 0x2e8a <write_time+0x1a>
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	3b 01       	movw	r6, r22
    2e90:	88 2e       	mov	r8, r24
    2e92:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    2e94:	0e 94 40 33 	call	0x6680	; 0x6680 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    2e98:	22 e0       	ldi	r18, 0x02	; 2
    2e9a:	4b ea       	ldi	r20, 0xAB	; 171
    2e9c:	5b e0       	ldi	r21, 0x0B	; 11
    2e9e:	88 2d       	mov	r24, r8
    2ea0:	b3 01       	movw	r22, r6
    2ea2:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    2ea6:	18 2f       	mov	r17, r24
    2ea8:	88 23       	and	r24, r24
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <write_time+0x3e>
    2eac:	4e c0       	rjmp	.+156    	; 0x2f4a <write_time+0xda>
	if(strlen(arg)!=17){
    2eae:	6b ea       	ldi	r22, 0xAB	; 171
    2eb0:	7b e0       	ldi	r23, 0x0B	; 11
    2eb2:	80 e8       	ldi	r24, 0x80	; 128
    2eb4:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    2eb8:	41 97       	sbiw	r24, 0x11	; 17
    2eba:	49 f0       	breq	.+18     	; 0x2ece <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    2ebc:	25 e2       	ldi	r18, 0x25	; 37
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	47 e1       	ldi	r20, 0x17	; 23
    2ec2:	55 e0       	ldi	r21, 0x05	; 5
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	c7 01       	movw	r24, r14
    2ec8:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
    2ecc:	3e c0       	rjmp	.+124    	; 0x2f4a <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	8b ea       	ldi	r24, 0xAB	; 171
    2ed2:	9b e0       	ldi	r25, 0x0B	; 11
    2ed4:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <get_time_par>
    2ed8:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    2eda:	63 e0       	ldi	r22, 0x03	; 3
    2edc:	8b ea       	ldi	r24, 0xAB	; 171
    2ede:	9b e0       	ldi	r25, 0x0B	; 11
    2ee0:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <get_time_par>
    2ee4:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    2ee6:	66 e0       	ldi	r22, 0x06	; 6
    2ee8:	8b ea       	ldi	r24, 0xAB	; 171
    2eea:	9b e0       	ldi	r25, 0x0B	; 11
    2eec:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <get_time_par>
    2ef0:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    2ef2:	69 e0       	ldi	r22, 0x09	; 9
    2ef4:	8b ea       	ldi	r24, 0xAB	; 171
    2ef6:	9b e0       	ldi	r25, 0x0B	; 11
    2ef8:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <get_time_par>
    2efc:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    2efe:	6c e0       	ldi	r22, 0x0C	; 12
    2f00:	8b ea       	ldi	r24, 0xAB	; 171
    2f02:	9b e0       	ldi	r25, 0x0B	; 11
    2f04:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <get_time_par>
    2f08:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    2f0a:	6f e0       	ldi	r22, 0x0F	; 15
    2f0c:	8b ea       	ldi	r24, 0xAB	; 171
    2f0e:	9b e0       	ldi	r25, 0x0B	; 11
    2f10:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    2f14:	48 2f       	mov	r20, r24
    2f16:	5d 2d       	mov	r21, r13
    2f18:	60 2f       	mov	r22, r16
    2f1a:	76 2d       	mov	r23, r6
    2f1c:	87 2d       	mov	r24, r7
    2f1e:	98 2d       	mov	r25, r8
    2f20:	0e 94 31 25 	call	0x4a62	; 0x4a62 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2f24:	88 23       	and	r24, r24
    2f26:	49 f0       	breq	.+18     	; 0x2f3a <write_time+0xca>
		strcpy(res, "Failed to set time");
    2f28:	23 e1       	ldi	r18, 0x13	; 19
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4c e3       	ldi	r20, 0x3C	; 60
    2f2e:	55 e0       	ldi	r21, 0x05	; 5
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	c7 01       	movw	r24, r14
    2f34:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
    2f38:	08 c0       	rjmp	.+16     	; 0x2f4a <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    2f3a:	28 e0       	ldi	r18, 0x08	; 8
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a ec       	ldi	r20, 0xCA	; 202
    2f40:	54 e0       	ldi	r21, 0x04	; 4
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	c7 01       	movw	r24, r14
    2f46:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
	return true;
}
    2f4a:	81 2f       	mov	r24, r17
    2f4c:	26 96       	adiw	r28, 0x06	; 6
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	df 91       	pop	r29
    2f5a:	cf 91       	pop	r28
    2f5c:	1f 91       	pop	r17
    2f5e:	0f 91       	pop	r16
    2f60:	ff 90       	pop	r15
    2f62:	ef 90       	pop	r14
    2f64:	df 90       	pop	r13
    2f66:	8f 90       	pop	r8
    2f68:	7f 90       	pop	r7
    2f6a:	6f 90       	pop	r6
    2f6c:	08 95       	ret

Disassembly of section .text.handle_read:

00001956 <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
    1956:	cf 92       	push	r12
    1958:	df 92       	push	r13
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	68 97       	sbiw	r28, 0x18	; 24
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	6b 01       	movw	r12, r22
    1978:	e8 2e       	mov	r14, r24
    197a:	f4 2e       	mov	r15, r20
    197c:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    197e:	21 e0       	ldi	r18, 0x01	; 1
    1980:	ae 01       	movw	r20, r28
    1982:	4f 5f       	subi	r20, 0xFF	; 255
    1984:	5f 4f       	sbci	r21, 0xFF	; 255
    1986:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    198a:	18 2f       	mov	r17, r24
    198c:	88 23       	and	r24, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <handle_read+0x3c>
    1990:	23 c1       	rjmp	.+582    	; 0x1bd8 <handle_read+0x282>
    1992:	8e 2d       	mov	r24, r14
    1994:	b6 01       	movw	r22, r12
    1996:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <count_parameters>
    199a:	82 30       	cpi	r24, 0x02	; 2
    199c:	09 f4       	brne	.+2      	; 0x19a0 <handle_read+0x4a>
    199e:	1b c1       	rjmp	.+566    	; 0x1bd6 <handle_read+0x280>
	
	if (strcmp(par, RW_DEVEUI)==0)
    19a0:	ce 01       	movw	r24, r28
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	6c 01       	movw	r12, r24
    19a6:	20 e8       	ldi	r18, 0x80	; 128
    19a8:	e2 2e       	mov	r14, r18
    19aa:	2f e4       	ldi	r18, 0x4F	; 79
    19ac:	35 e0       	ldi	r19, 0x05	; 5
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	8e 2d       	mov	r24, r14
    19b2:	b6 01       	movw	r22, r12
    19b4:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    19b8:	89 2b       	or	r24, r25
    19ba:	29 f4       	brne	.+10     	; 0x19c6 <handle_read+0x70>
	{
		EM_get_deveui(res);
    19bc:	8f 2d       	mov	r24, r15
    19be:	90 2f       	mov	r25, r16
    19c0:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <EM_get_deveui>
    19c4:	09 c1       	rjmp	.+530    	; 0x1bd8 <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    19c6:	26 e5       	ldi	r18, 0x56	; 86
    19c8:	35 e0       	ldi	r19, 0x05	; 5
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	8e 2d       	mov	r24, r14
    19ce:	b6 01       	movw	r22, r12
    19d0:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    19d4:	89 2b       	or	r24, r25
    19d6:	29 f4       	brne	.+10     	; 0x19e2 <handle_read+0x8c>
	{
		EM_get_appeui(res);
    19d8:	8f 2d       	mov	r24, r15
    19da:	90 2f       	mov	r25, r16
    19dc:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <EM_get_appeui>
    19e0:	fb c0       	rjmp	.+502    	; 0x1bd8 <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    19e2:	2d e5       	ldi	r18, 0x5D	; 93
    19e4:	35 e0       	ldi	r19, 0x05	; 5
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	8e 2d       	mov	r24, r14
    19ea:	b6 01       	movw	r22, r12
    19ec:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    19f0:	89 2b       	or	r24, r25
    19f2:	29 f4       	brne	.+10     	; 0x19fe <handle_read+0xa8>
	{
		EM_get_appkey(res);
    19f4:	8f 2d       	mov	r24, r15
    19f6:	90 2f       	mov	r25, r16
    19f8:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <EM_get_appkey>
    19fc:	ed c0       	rjmp	.+474    	; 0x1bd8 <handle_read+0x282>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    19fe:	24 e6       	ldi	r18, 0x64	; 100
    1a00:	35 e0       	ldi	r19, 0x05	; 5
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	8e 2d       	mov	r24, r14
    1a06:	b6 01       	movw	r22, r12
    1a08:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1a0c:	89 2b       	or	r24, r25
    1a0e:	e1 f4       	brne	.+56     	; 0x1a48 <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    1a10:	ce 01       	movw	r24, r28
    1a12:	45 96       	adiw	r24, 0x15	; 21
    1a14:	0e 94 62 31 	call	0x62c4	; 0x62c4 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    1a18:	88 8d       	ldd	r24, Y+24	; 0x18
    1a1a:	8f 93       	push	r24
    1a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1e:	8f 93       	push	r24
    1a20:	8e 89       	ldd	r24, Y+22	; 0x16
    1a22:	8f 93       	push	r24
    1a24:	8d 89       	ldd	r24, Y+21	; 0x15
    1a26:	8f 93       	push	r24
    1a28:	89 e6       	ldi	r24, 0x69	; 105
    1a2a:	95 e0       	ldi	r25, 0x05	; 5
    1a2c:	a0 e0       	ldi	r26, 0x00	; 0
    1a2e:	af 93       	push	r26
    1a30:	9f 93       	push	r25
    1a32:	8f 93       	push	r24
    1a34:	0f 93       	push	r16
    1a36:	ff 92       	push	r15
    1a38:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	c8 c0       	rjmp	.+400    	; 0x1bd8 <handle_read+0x282>
	}
	else if(strcmp(par, RW_RRL)==0)
    1a48:	2e e6       	ldi	r18, 0x6E	; 110
    1a4a:	35 e0       	ldi	r19, 0x05	; 5
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	8e 2d       	mov	r24, r14
    1a50:	b6 01       	movw	r22, r12
    1a52:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1a56:	89 2b       	or	r24, r25
    1a58:	e1 f4       	brne	.+56     	; 0x1a92 <handle_read+0x13c>
	{
		EM_get_RRL(&val);
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	45 96       	adiw	r24, 0x15	; 21
    1a5e:	0e 94 71 31 	call	0x62e2	; 0x62e2 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    1a62:	88 8d       	ldd	r24, Y+24	; 0x18
    1a64:	8f 93       	push	r24
    1a66:	8f 89       	ldd	r24, Y+23	; 0x17
    1a68:	8f 93       	push	r24
    1a6a:	8e 89       	ldd	r24, Y+22	; 0x16
    1a6c:	8f 93       	push	r24
    1a6e:	8d 89       	ldd	r24, Y+21	; 0x15
    1a70:	8f 93       	push	r24
    1a72:	89 e6       	ldi	r24, 0x69	; 105
    1a74:	95 e0       	ldi	r25, 0x05	; 5
    1a76:	a0 e0       	ldi	r26, 0x00	; 0
    1a78:	af 93       	push	r26
    1a7a:	9f 93       	push	r25
    1a7c:	8f 93       	push	r24
    1a7e:	0f 93       	push	r16
    1a80:	ff 92       	push	r15
    1a82:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	a3 c0       	rjmp	.+326    	; 0x1bd8 <handle_read+0x282>
	}
	else if(strcmp(par, RW_VCC)==0)
    1a92:	23 e7       	ldi	r18, 0x73	; 115
    1a94:	35 e0       	ldi	r19, 0x05	; 5
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	8e 2d       	mov	r24, r14
    1a9a:	b6 01       	movw	r22, r12
    1a9c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1aa0:	89 2b       	or	r24, r25
    1aa2:	e1 f4       	brne	.+56     	; 0x1adc <handle_read+0x186>
	{
		EM_get_Vcc(&val);
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	45 96       	adiw	r24, 0x15	; 21
    1aa8:	0e 94 80 31 	call	0x6300	; 0x6300 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1aac:	88 8d       	ldd	r24, Y+24	; 0x18
    1aae:	8f 93       	push	r24
    1ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab2:	8f 93       	push	r24
    1ab4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ab6:	8f 93       	push	r24
    1ab8:	8d 89       	ldd	r24, Y+21	; 0x15
    1aba:	8f 93       	push	r24
    1abc:	89 e6       	ldi	r24, 0x69	; 105
    1abe:	95 e0       	ldi	r25, 0x05	; 5
    1ac0:	a0 e0       	ldi	r26, 0x00	; 0
    1ac2:	af 93       	push	r26
    1ac4:	9f 93       	push	r25
    1ac6:	8f 93       	push	r24
    1ac8:	0f 93       	push	r16
    1aca:	ff 92       	push	r15
    1acc:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	7e c0       	rjmp	.+252    	; 0x1bd8 <handle_read+0x282>
	}
	else if(strcmp(par, RW_COLS)==0)
    1adc:	28 e7       	ldi	r18, 0x78	; 120
    1ade:	35 e0       	ldi	r19, 0x05	; 5
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	8e 2d       	mov	r24, r14
    1ae4:	b6 01       	movw	r22, r12
    1ae6:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1aea:	89 2b       	or	r24, r25
    1aec:	29 f4       	brne	.+10     	; 0x1af8 <handle_read+0x1a2>
	{
		read_cols(res);
    1aee:	8f 2d       	mov	r24, r15
    1af0:	90 2f       	mov	r25, r16
    1af2:	0e 94 2b 1b 	call	0x3656	; 0x3656 <read_cols>
    1af6:	70 c0       	rjmp	.+224    	; 0x1bd8 <handle_read+0x282>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1af8:	2d e7       	ldi	r18, 0x7D	; 125
    1afa:	35 e0       	ldi	r19, 0x05	; 5
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	8e 2d       	mov	r24, r14
    1b00:	b6 01       	movw	r22, r12
    1b02:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1b06:	89 2b       	or	r24, r25
    1b08:	a1 f4       	brne	.+40     	; 0x1b32 <handle_read+0x1dc>
	{
		uint8_t val=EM_get_heat_up_time();
    1b0a:	0e 94 41 34 	call	0x6882	; 0x6882 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    1b0e:	1f 92       	push	r1
    1b10:	8f 93       	push	r24
    1b12:	87 e8       	ldi	r24, 0x87	; 135
    1b14:	95 e0       	ldi	r25, 0x05	; 5
    1b16:	a0 e0       	ldi	r26, 0x00	; 0
    1b18:	af 93       	push	r26
    1b1a:	9f 93       	push	r25
    1b1c:	8f 93       	push	r24
    1b1e:	0f 93       	push	r16
    1b20:	ff 92       	push	r15
    1b22:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	53 c0       	rjmp	.+166    	; 0x1bd8 <handle_read+0x282>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1b32:	29 e9       	ldi	r18, 0x99	; 153
    1b34:	35 e0       	ldi	r19, 0x05	; 5
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	8e 2d       	mov	r24, r14
    1b3a:	b6 01       	movw	r22, r12
    1b3c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1b40:	89 2b       	or	r24, r25
    1b42:	a1 f4       	brne	.+40     	; 0x1b6c <handle_read+0x216>
	{
		uint16_t val=EM_get_air_pump_time();
    1b44:	0e 94 4d 34 	call	0x689a	; 0x689a <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    1b48:	9f 93       	push	r25
    1b4a:	8f 93       	push	r24
    1b4c:	84 ea       	ldi	r24, 0xA4	; 164
    1b4e:	95 e0       	ldi	r25, 0x05	; 5
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	af 93       	push	r26
    1b54:	9f 93       	push	r25
    1b56:	8f 93       	push	r24
    1b58:	0f 93       	push	r16
    1b5a:	ff 92       	push	r15
    1b5c:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	36 c0       	rjmp	.+108    	; 0x1bd8 <handle_read+0x282>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1b6c:	27 eb       	ldi	r18, 0xB7	; 183
    1b6e:	35 e0       	ldi	r19, 0x05	; 5
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	8e 2d       	mov	r24, r14
    1b74:	b6 01       	movw	r22, r12
    1b76:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1b7a:	89 2b       	or	r24, r25
    1b7c:	a1 f4       	brne	.+40     	; 0x1ba6 <handle_read+0x250>
	{
		uint8_t val=EM_get_sp_interval();
    1b7e:	0e 94 59 34 	call	0x68b2	; 0x68b2 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1b82:	1f 92       	push	r1
    1b84:	8f 93       	push	r24
    1b86:	83 ec       	ldi	r24, 0xC3	; 195
    1b88:	95 e0       	ldi	r25, 0x05	; 5
    1b8a:	a0 e0       	ldi	r26, 0x00	; 0
    1b8c:	af 93       	push	r26
    1b8e:	9f 93       	push	r25
    1b90:	8f 93       	push	r24
    1b92:	0f 93       	push	r16
    1b94:	ff 92       	push	r15
    1b96:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	19 c0       	rjmp	.+50     	; 0x1bd8 <handle_read+0x282>
	}
	else if(strcmp(par, RW_TIME)==0)
    1ba6:	22 ee       	ldi	r18, 0xE2	; 226
    1ba8:	35 e0       	ldi	r19, 0x05	; 5
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	8e 2d       	mov	r24, r14
    1bae:	b6 01       	movw	r22, r12
    1bb0:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1bb4:	89 2b       	or	r24, r25
    1bb6:	29 f4       	brne	.+10     	; 0x1bc2 <handle_read+0x26c>
	{
		read_time(res);
    1bb8:	8f 2d       	mov	r24, r15
    1bba:	90 2f       	mov	r25, r16
    1bbc:	0e 94 13 20 	call	0x4026	; 0x4026 <read_time>
    1bc0:	0b c0       	rjmp	.+22     	; 0x1bd8 <handle_read+0x282>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1bc2:	26 e1       	ldi	r18, 0x16	; 22
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	47 ee       	ldi	r20, 0xE7	; 231
    1bc8:	55 e0       	ldi	r21, 0x05	; 5
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	8f 2d       	mov	r24, r15
    1bce:	90 2f       	mov	r25, r16
    1bd0:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <handle_read+0x282>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1bd6:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1bd8:	81 2f       	mov	r24, r17
    1bda:	68 96       	adiw	r28, 0x18	; 24
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
    1bf4:	cf 90       	pop	r12
    1bf6:	08 95       	ret

Disassembly of section .text.handle_write:

00001bf8 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1bf8:	6f 92       	push	r6
    1bfa:	7f 92       	push	r7
    1bfc:	8f 92       	push	r8
    1bfe:	af 92       	push	r10
    1c00:	bf 92       	push	r11
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	64 97       	sbiw	r28, 0x14	; 20
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	3b 01       	movw	r6, r22
    1c20:	88 2e       	mov	r8, r24
    1c22:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1c24:	21 e0       	ldi	r18, 0x01	; 1
    1c26:	ae 01       	movw	r20, r28
    1c28:	4f 5f       	subi	r20, 0xFF	; 255
    1c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2c:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    1c30:	18 2f       	mov	r17, r24
    1c32:	88 23       	and	r24, r24
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <handle_write+0x40>
    1c36:	cd c0       	rjmp	.+410    	; 0x1dd2 <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1c38:	ce 01       	movw	r24, r28
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	6c 01       	movw	r12, r24
    1c3e:	20 e8       	ldi	r18, 0x80	; 128
    1c40:	e2 2e       	mov	r14, r18
    1c42:	2f e4       	ldi	r18, 0x4F	; 79
    1c44:	35 e0       	ldi	r19, 0x05	; 5
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	8e 2d       	mov	r24, r14
    1c4a:	b6 01       	movw	r22, r12
    1c4c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1c50:	89 2b       	or	r24, r25
    1c52:	39 f4       	brne	.+14     	; 0x1c62 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1c54:	a5 01       	movw	r20, r10
    1c56:	88 2d       	mov	r24, r8
    1c58:	b3 01       	movw	r22, r6
    1c5a:	0e 94 19 22 	call	0x4432	; 0x4432 <write_deveui>
    1c5e:	18 2f       	mov	r17, r24
    1c60:	b8 c0       	rjmp	.+368    	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1c62:	26 e5       	ldi	r18, 0x56	; 86
    1c64:	35 e0       	ldi	r19, 0x05	; 5
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	8e 2d       	mov	r24, r14
    1c6a:	b6 01       	movw	r22, r12
    1c6c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1c70:	89 2b       	or	r24, r25
    1c72:	39 f4       	brne	.+14     	; 0x1c82 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1c74:	a5 01       	movw	r20, r10
    1c76:	88 2d       	mov	r24, r8
    1c78:	b3 01       	movw	r22, r6
    1c7a:	0e 94 55 22 	call	0x44aa	; 0x44aa <write_appeui>
    1c7e:	18 2f       	mov	r17, r24
    1c80:	a8 c0       	rjmp	.+336    	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1c82:	2d e5       	ldi	r18, 0x5D	; 93
    1c84:	35 e0       	ldi	r19, 0x05	; 5
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	8e 2d       	mov	r24, r14
    1c8a:	b6 01       	movw	r22, r12
    1c8c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1c90:	89 2b       	or	r24, r25
    1c92:	39 f4       	brne	.+14     	; 0x1ca2 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1c94:	a5 01       	movw	r20, r10
    1c96:	88 2d       	mov	r24, r8
    1c98:	b3 01       	movw	r22, r6
    1c9a:	0e 94 91 22 	call	0x4522	; 0x4522 <write_appkey>
    1c9e:	18 2f       	mov	r17, r24
    1ca0:	98 c0       	rjmp	.+304    	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1ca2:	24 e6       	ldi	r18, 0x64	; 100
    1ca4:	35 e0       	ldi	r19, 0x05	; 5
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	8e 2d       	mov	r24, r14
    1caa:	b6 01       	movw	r22, r12
    1cac:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1cb0:	89 2b       	or	r24, r25
    1cb2:	39 f4       	brne	.+14     	; 0x1cc2 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1cb4:	a5 01       	movw	r20, r10
    1cb6:	88 2d       	mov	r24, r8
    1cb8:	b3 01       	movw	r22, r6
    1cba:	0e 94 36 29 	call	0x526c	; 0x526c <write_PPM_factor>
    1cbe:	18 2f       	mov	r17, r24
    1cc0:	88 c0       	rjmp	.+272    	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1cc2:	2e e6       	ldi	r18, 0x6E	; 110
    1cc4:	35 e0       	ldi	r19, 0x05	; 5
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	8e 2d       	mov	r24, r14
    1cca:	b6 01       	movw	r22, r12
    1ccc:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1cd0:	89 2b       	or	r24, r25
    1cd2:	39 f4       	brne	.+14     	; 0x1ce2 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1cd4:	a5 01       	movw	r20, r10
    1cd6:	88 2d       	mov	r24, r8
    1cd8:	b3 01       	movw	r22, r6
    1cda:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <write_RRL>
    1cde:	18 2f       	mov	r17, r24
    1ce0:	78 c0       	rjmp	.+240    	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1ce2:	23 e7       	ldi	r18, 0x73	; 115
    1ce4:	35 e0       	ldi	r19, 0x05	; 5
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	8e 2d       	mov	r24, r14
    1cea:	b6 01       	movw	r22, r12
    1cec:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1cf0:	89 2b       	or	r24, r25
    1cf2:	39 f4       	brne	.+14     	; 0x1d02 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1cf4:	a5 01       	movw	r20, r10
    1cf6:	88 2d       	mov	r24, r8
    1cf8:	b3 01       	movw	r22, r6
    1cfa:	0e 94 82 29 	call	0x5304	; 0x5304 <write_VCC>
    1cfe:	18 2f       	mov	r17, r24
    1d00:	68 c0       	rjmp	.+208    	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    1d02:	28 e7       	ldi	r18, 0x78	; 120
    1d04:	35 e0       	ldi	r19, 0x05	; 5
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	8e 2d       	mov	r24, r14
    1d0a:	b6 01       	movw	r22, r12
    1d0c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1d10:	89 2b       	or	r24, r25
    1d12:	39 f4       	brne	.+14     	; 0x1d22 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1d14:	a5 01       	movw	r20, r10
    1d16:	88 2d       	mov	r24, r8
    1d18:	b3 01       	movw	r22, r6
    1d1a:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <write_cols>
    1d1e:	18 2f       	mov	r17, r24
    1d20:	58 c0       	rjmp	.+176    	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1d22:	2d e7       	ldi	r18, 0x7D	; 125
    1d24:	35 e0       	ldi	r19, 0x05	; 5
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	8e 2d       	mov	r24, r14
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1d30:	89 2b       	or	r24, r25
    1d32:	39 f4       	brne	.+14     	; 0x1d42 <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    1d34:	a5 01       	movw	r20, r10
    1d36:	88 2d       	mov	r24, r8
    1d38:	b3 01       	movw	r22, r6
    1d3a:	0e 94 a8 29 	call	0x5350	; 0x5350 <write_heat_up>
    1d3e:	18 2f       	mov	r17, r24
    1d40:	48 c0       	rjmp	.+144    	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1d42:	29 e9       	ldi	r18, 0x99	; 153
    1d44:	35 e0       	ldi	r19, 0x05	; 5
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	8e 2d       	mov	r24, r14
    1d4a:	b6 01       	movw	r22, r12
    1d4c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1d50:	89 2b       	or	r24, r25
    1d52:	39 f4       	brne	.+14     	; 0x1d62 <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1d54:	a5 01       	movw	r20, r10
    1d56:	88 2d       	mov	r24, r8
    1d58:	b3 01       	movw	r22, r6
    1d5a:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <write_air_pump>
    1d5e:	18 2f       	mov	r17, r24
    1d60:	38 c0       	rjmp	.+112    	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1d62:	27 eb       	ldi	r18, 0xB7	; 183
    1d64:	35 e0       	ldi	r19, 0x05	; 5
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	8e 2d       	mov	r24, r14
    1d6a:	b6 01       	movw	r22, r12
    1d6c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1d70:	89 2b       	or	r24, r25
    1d72:	39 f4       	brne	.+14     	; 0x1d82 <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1d74:	a5 01       	movw	r20, r10
    1d76:	88 2d       	mov	r24, r8
    1d78:	b3 01       	movw	r22, r6
    1d7a:	0e 94 ce 29 	call	0x539c	; 0x539c <write_sp_interval>
    1d7e:	18 2f       	mov	r17, r24
    1d80:	28 c0       	rjmp	.+80     	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1d82:	2d ef       	ldi	r18, 0xFD	; 253
    1d84:	35 e0       	ldi	r19, 0x05	; 5
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	8e 2d       	mov	r24, r14
    1d8a:	b6 01       	movw	r22, r12
    1d8c:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1d90:	89 2b       	or	r24, r25
    1d92:	39 f4       	brne	.+14     	; 0x1da2 <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1d94:	a5 01       	movw	r20, r10
    1d96:	88 2d       	mov	r24, r8
    1d98:	b3 01       	movw	r22, r6
    1d9a:	0e 94 ab 18 	call	0x3156	; 0x3156 <write_reset>
    1d9e:	18 2f       	mov	r17, r24
    1da0:	18 c0       	rjmp	.+48     	; 0x1dd2 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1da2:	22 ee       	ldi	r18, 0xE2	; 226
    1da4:	35 e0       	ldi	r19, 0x05	; 5
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	8e 2d       	mov	r24, r14
    1daa:	b6 01       	movw	r22, r12
    1dac:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1db0:	89 2b       	or	r24, r25
    1db2:	39 f4       	brne	.+14     	; 0x1dc2 <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1db4:	a5 01       	movw	r20, r10
    1db6:	88 2d       	mov	r24, r8
    1db8:	b3 01       	movw	r22, r6
    1dba:	0e 94 38 17 	call	0x2e70	; 0x2e70 <write_time>
    1dbe:	18 2f       	mov	r17, r24
    1dc0:	08 c0       	rjmp	.+16     	; 0x1dd2 <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1dc2:	26 e1       	ldi	r18, 0x16	; 22
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	47 ee       	ldi	r20, 0xE7	; 231
    1dc8:	55 e0       	ldi	r21, 0x05	; 5
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	c5 01       	movw	r24, r10
    1dce:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
	}
	
}
    1dd2:	81 2f       	mov	r24, r17
    1dd4:	64 96       	adiw	r28, 0x14	; 20
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	bf 90       	pop	r11
    1dee:	af 90       	pop	r10
    1df0:	8f 90       	pop	r8
    1df2:	7f 90       	pop	r7
    1df4:	6f 90       	pop	r6
    1df6:	08 95       	ret

Disassembly of section .text.handle_methane:

00001fa8 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    1fa8:	9f 92       	push	r9
    1faa:	af 92       	push	r10
    1fac:	bf 92       	push	r11
    1fae:	cf 92       	push	r12
    1fb0:	df 92       	push	r13
    1fb2:	ef 92       	push	r14
    1fb4:	ff 92       	push	r15
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	2e 97       	sbiw	r28, 0x0e	; 14
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	94 2e       	mov	r9, r20
    1fd0:	a5 2e       	mov	r10, r21
	if(!get_parameter(cmd, par, 2)) return false;
    1fd2:	22 e0       	ldi	r18, 0x02	; 2
    1fd4:	4a e8       	ldi	r20, 0x8A	; 138
    1fd6:	5c e0       	ldi	r21, 0x0C	; 12
    1fd8:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    1fdc:	b8 2e       	mov	r11, r24
    1fde:	88 23       	and	r24, r24
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <handle_methane+0x3c>
    1fe2:	92 c0       	rjmp	.+292    	; 0x2108 <handle_methane+0x160>
	
	if(strcmp(par, METH_POWER_ON)==0){
    1fe4:	8a e8       	ldi	r24, 0x8A	; 138
    1fe6:	9c e0       	ldi	r25, 0x0C	; 12
    1fe8:	6c 01       	movw	r12, r24
    1fea:	20 e8       	ldi	r18, 0x80	; 128
    1fec:	e2 2e       	mov	r14, r18
    1fee:	2f ea       	ldi	r18, 0xAF	; 175
    1ff0:	36 e0       	ldi	r19, 0x06	; 6
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	8e 2d       	mov	r24, r14
    1ff6:	b6 01       	movw	r22, r12
    1ff8:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    1ffc:	89 2b       	or	r24, r25
    1ffe:	79 f4       	brne	.+30     	; 0x201e <handle_methane+0x76>
		PM_HAL_meth_power_init();
    2000:	0e 94 95 33 	call	0x672a	; 0x672a <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    200a:	28 e1       	ldi	r18, 0x18	; 24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	42 eb       	ldi	r20, 0xB2	; 178
    2010:	56 e0       	ldi	r21, 0x06	; 6
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	89 2d       	mov	r24, r9
    2016:	9a 2d       	mov	r25, r10
    2018:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
    201c:	75 c0       	rjmp	.+234    	; 0x2108 <handle_methane+0x160>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    201e:	2a ec       	ldi	r18, 0xCA	; 202
    2020:	36 e0       	ldi	r19, 0x06	; 6
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	8e 2d       	mov	r24, r14
    2026:	b6 01       	movw	r22, r12
    2028:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    202c:	89 2b       	or	r24, r25
    202e:	79 f4       	brne	.+30     	; 0x204e <handle_methane+0xa6>
		PM_HAL_meth_power_init();
    2030:	0e 94 95 33 	call	0x672a	; 0x672a <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    203a:	29 e1       	ldi	r18, 0x19	; 25
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4e ec       	ldi	r20, 0xCE	; 206
    2040:	56 e0       	ldi	r21, 0x06	; 6
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	89 2d       	mov	r24, r9
    2046:	9a 2d       	mov	r25, r10
    2048:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
    204c:	5d c0       	rjmp	.+186    	; 0x2108 <handle_methane+0x160>
	}
	else if(strcmp(par, METH_READ)==0)
    204e:	27 ee       	ldi	r18, 0xE7	; 231
    2050:	36 e0       	ldi	r19, 0x06	; 6
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	8e 2d       	mov	r24, r14
    2056:	b6 01       	movw	r22, r12
    2058:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    205c:	89 2b       	or	r24, r25
    205e:	09 f0       	breq	.+2      	; 0x2062 <handle_methane+0xba>
    2060:	4a c0       	rjmp	.+148    	; 0x20f6 <handle_methane+0x14e>
	{
		//Set parameters
		float vccx=0.0;
    2062:	19 86       	std	Y+9, r1	; 0x09
    2064:	1a 86       	std	Y+10, r1	; 0x0a
    2066:	1b 86       	std	Y+11, r1	; 0x0b
    2068:	1c 86       	std	Y+12, r1	; 0x0c
		float rrlx=0.0;
    206a:	1d 82       	std	Y+5, r1	; 0x05
    206c:	1e 82       	std	Y+6, r1	; 0x06
    206e:	1f 82       	std	Y+7, r1	; 0x07
    2070:	18 86       	std	Y+8, r1	; 0x08
		float ppmx=0.0;
    2072:	19 82       	std	Y+1, r1	; 0x01
    2074:	1a 82       	std	Y+2, r1	; 0x02
    2076:	1b 82       	std	Y+3, r1	; 0x03
    2078:	1c 82       	std	Y+4, r1	; 0x04
		
		EM_get_Vcc(&vccx);
    207a:	ce 01       	movw	r24, r28
    207c:	09 96       	adiw	r24, 0x09	; 9
    207e:	0e 94 80 31 	call	0x6300	; 0x6300 <EM_get_Vcc>
		EM_get_RRL(&rrlx);
    2082:	ce 01       	movw	r24, r28
    2084:	05 96       	adiw	r24, 0x05	; 5
    2086:	0e 94 71 31 	call	0x62e2	; 0x62e2 <EM_get_RRL>
		EM_get_ppmfactor(&ppmx);
    208a:	ce 01       	movw	r24, r28
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	0e 94 62 31 	call	0x62c4	; 0x62c4 <EM_get_ppmfactor>
		
		ADC_set_conf_parameters(vccx, rrlx, ppmx);
    2092:	e9 80       	ldd	r14, Y+1	; 0x01
    2094:	fa 80       	ldd	r15, Y+2	; 0x02
    2096:	0b 81       	ldd	r16, Y+3	; 0x03
    2098:	1c 81       	ldd	r17, Y+4	; 0x04
    209a:	2d 81       	ldd	r18, Y+5	; 0x05
    209c:	3e 81       	ldd	r19, Y+6	; 0x06
    209e:	4f 81       	ldd	r20, Y+7	; 0x07
    20a0:	58 85       	ldd	r21, Y+8	; 0x08
    20a2:	69 85       	ldd	r22, Y+9	; 0x09
    20a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    20a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    20aa:	0e 94 df 2b 	call	0x57be	; 0x57be <ADC_set_conf_parameters>
		
		
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    20ae:	ce 01       	movw	r24, r28
    20b0:	0d 96       	adiw	r24, 0x0d	; 13
    20b2:	0e 94 04 27 	call	0x4e08	; 0x4e08 <ADC_get_value>
    20b6:	88 23       	and	r24, r24
    20b8:	51 f0       	breq	.+20     	; 0x20ce <handle_methane+0x126>
		{
			strcpy(res, "Error when reading data");
    20ba:	28 e1       	ldi	r18, 0x18	; 24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4c ee       	ldi	r20, 0xEC	; 236
    20c0:	56 e0       	ldi	r21, 0x06	; 6
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	89 2d       	mov	r24, r9
    20c6:	9a 2d       	mov	r25, r10
    20c8:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
    20cc:	1d c0       	rjmp	.+58     	; 0x2108 <handle_methane+0x160>
		}else{
			sprintf(res, "PPM=%u", val);
    20ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    20d0:	8f 93       	push	r24
    20d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d4:	8f 93       	push	r24
    20d6:	84 e0       	ldi	r24, 0x04	; 4
    20d8:	97 e0       	ldi	r25, 0x07	; 7
    20da:	a0 e0       	ldi	r26, 0x00	; 0
    20dc:	af 93       	push	r26
    20de:	9f 93       	push	r25
    20e0:	8f 93       	push	r24
    20e2:	af 92       	push	r10
    20e4:	9f 92       	push	r9
    20e6:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	09 c0       	rjmp	.+18     	; 0x2108 <handle_methane+0x160>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    20f6:	26 e1       	ldi	r18, 0x16	; 22
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	4b e0       	ldi	r20, 0x0B	; 11
    20fc:	57 e0       	ldi	r21, 0x07	; 7
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	89 2d       	mov	r24, r9
    2102:	9a 2d       	mov	r25, r10
    2104:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
	}
	return false;
}
    2108:	8b 2d       	mov	r24, r11
    210a:	2e 96       	adiw	r28, 0x0e	; 14
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	df 90       	pop	r13
    2124:	cf 90       	pop	r12
    2126:	bf 90       	pop	r11
    2128:	af 90       	pop	r10
    212a:	9f 90       	pop	r9
    212c:	08 95       	ret

Disassembly of section .text.handle_co2:

00003be4 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    3be4:	ff 92       	push	r15
    3be6:	0f 93       	push	r16
    3be8:	1f 93       	push	r17
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
    3bee:	00 d0       	rcall	.+0      	; 0x3bf0 <handle_co2+0xc>
    3bf0:	cd b7       	in	r28, 0x3d	; 61
    3bf2:	de b7       	in	r29, 0x3e	; 62
    3bf4:	f4 2e       	mov	r15, r20
    3bf6:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    3bf8:	22 e0       	ldi	r18, 0x02	; 2
    3bfa:	4a e8       	ldi	r20, 0x8A	; 138
    3bfc:	5c e0       	ldi	r21, 0x0C	; 12
    3bfe:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    3c02:	18 2f       	mov	r17, r24
    3c04:	88 23       	and	r24, r24
    3c06:	b9 f1       	breq	.+110    	; 0x3c76 <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    3c08:	6a e8       	ldi	r22, 0x8A	; 138
    3c0a:	7c e0       	ldi	r23, 0x0C	; 12
    3c0c:	80 e8       	ldi	r24, 0x80	; 128
    3c0e:	27 ee       	ldi	r18, 0xE7	; 231
    3c10:	36 e0       	ldi	r19, 0x06	; 6
    3c12:	40 e0       	ldi	r20, 0x00	; 0
    3c14:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    3c18:	89 2b       	or	r24, r25
    3c1a:	21 f5       	brne	.+72     	; 0x3c64 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    3c1c:	ce 01       	movw	r24, r28
    3c1e:	01 96       	adiw	r24, 0x01	; 1
    3c20:	0e 94 37 32 	call	0x646e	; 0x646e <SCD30_get_reading>
    3c24:	88 23       	and	r24, r24
    3c26:	51 f0       	breq	.+20     	; 0x3c3c <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    3c28:	28 e1       	ldi	r18, 0x18	; 24
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	4c ee       	ldi	r20, 0xEC	; 236
    3c2e:	56 e0       	ldi	r21, 0x06	; 6
    3c30:	60 e0       	ldi	r22, 0x00	; 0
    3c32:	8f 2d       	mov	r24, r15
    3c34:	90 2f       	mov	r25, r16
    3c36:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
    3c3a:	1d c0       	rjmp	.+58     	; 0x3c76 <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    3c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3e:	8f 93       	push	r24
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	8f 93       	push	r24
    3c44:	84 e0       	ldi	r24, 0x04	; 4
    3c46:	97 e0       	ldi	r25, 0x07	; 7
    3c48:	a0 e0       	ldi	r26, 0x00	; 0
    3c4a:	af 93       	push	r26
    3c4c:	9f 93       	push	r25
    3c4e:	8f 93       	push	r24
    3c50:	0f 93       	push	r16
    3c52:	ff 92       	push	r15
    3c54:	0e 94 35 2b 	call	0x566a	; 0x566a <sprintf>
    3c58:	0f b6       	in	r0, 0x3f	; 63
    3c5a:	f8 94       	cli
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	cd bf       	out	0x3d, r28	; 61
    3c62:	09 c0       	rjmp	.+18     	; 0x3c76 <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3c64:	26 e1       	ldi	r18, 0x16	; 22
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	4b e0       	ldi	r20, 0x0B	; 11
    3c6a:	57 e0       	ldi	r21, 0x07	; 7
    3c6c:	60 e0       	ldi	r22, 0x00	; 0
    3c6e:	8f 2d       	mov	r24, r15
    3c70:	90 2f       	mov	r25, r16
    3c72:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
	}
}
    3c76:	81 2f       	mov	r24, r17
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	1f 91       	pop	r17
    3c82:	0f 91       	pop	r16
    3c84:	ff 90       	pop	r15
    3c86:	08 95       	ret

Disassembly of section .text.handle_pump:

00003c88 <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    3c88:	cf 92       	push	r12
    3c8a:	df 92       	push	r13
    3c8c:	ef 92       	push	r14
    3c8e:	0f 93       	push	r16
    3c90:	1f 93       	push	r17
    3c92:	cf 93       	push	r28
    3c94:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    3c96:	22 e0       	ldi	r18, 0x02	; 2
    3c98:	4a e8       	ldi	r20, 0x8A	; 138
    3c9a:	5c e0       	ldi	r21, 0x0C	; 12
    3c9c:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    3ca0:	c8 2f       	mov	r28, r24
    3ca2:	88 23       	and	r24, r24
    3ca4:	d9 f1       	breq	.+118    	; 0x3d1c <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    3ca6:	8a e8       	ldi	r24, 0x8A	; 138
    3ca8:	9c e0       	ldi	r25, 0x0C	; 12
    3caa:	6c 01       	movw	r12, r24
    3cac:	20 e8       	ldi	r18, 0x80	; 128
    3cae:	e2 2e       	mov	r14, r18
    3cb0:	2f ea       	ldi	r18, 0xAF	; 175
    3cb2:	36 e0       	ldi	r19, 0x06	; 6
    3cb4:	40 e0       	ldi	r20, 0x00	; 0
    3cb6:	8e 2d       	mov	r24, r14
    3cb8:	b6 01       	movw	r22, r12
    3cba:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    3cbe:	89 2b       	or	r24, r25
    3cc0:	71 f4       	brne	.+28     	; 0x3cde <handle_pump+0x56>
		PM_HAL_BC_power_init();
    3cc2:	0e 94 a3 33 	call	0x6746	; 0x6746 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    3ccc:	25 e1       	ldi	r18, 0x15	; 21
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	41 e2       	ldi	r20, 0x21	; 33
    3cd2:	57 e0       	ldi	r21, 0x07	; 7
    3cd4:	60 e0       	ldi	r22, 0x00	; 0
    3cd6:	c8 01       	movw	r24, r16
    3cd8:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
    3cdc:	1f c0       	rjmp	.+62     	; 0x3d1c <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    3cde:	2a ec       	ldi	r18, 0xCA	; 202
    3ce0:	36 e0       	ldi	r19, 0x06	; 6
    3ce2:	40 e0       	ldi	r20, 0x00	; 0
    3ce4:	8e 2d       	mov	r24, r14
    3ce6:	b6 01       	movw	r22, r12
    3ce8:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    3cec:	89 2b       	or	r24, r25
    3cee:	71 f4       	brne	.+28     	; 0x3d0c <handle_pump+0x84>
		PM_HAL_BC_power_init();
    3cf0:	0e 94 a3 33 	call	0x6746	; 0x6746 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    3cfa:	26 e1       	ldi	r18, 0x16	; 22
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	46 e3       	ldi	r20, 0x36	; 54
    3d00:	57 e0       	ldi	r21, 0x07	; 7
    3d02:	60 e0       	ldi	r22, 0x00	; 0
    3d04:	c8 01       	movw	r24, r16
    3d06:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
    3d0a:	08 c0       	rjmp	.+16     	; 0x3d1c <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3d0c:	26 e1       	ldi	r18, 0x16	; 22
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	4b e0       	ldi	r20, 0x0B	; 11
    3d12:	57 e0       	ldi	r21, 0x07	; 7
    3d14:	60 e0       	ldi	r22, 0x00	; 0
    3d16:	c8 01       	movw	r24, r16
    3d18:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
	}
}
    3d1c:	8c 2f       	mov	r24, r28
    3d1e:	cf 91       	pop	r28
    3d20:	1f 91       	pop	r17
    3d22:	0f 91       	pop	r16
    3d24:	ef 90       	pop	r14
    3d26:	df 90       	pop	r13
    3d28:	cf 90       	pop	r12
    3d2a:	08 95       	ret

Disassembly of section .text.handle_sensor:

000037ce <handle_sensor>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sensor(const char cmd[], char res[]){
    37ce:	6f 92       	push	r6
    37d0:	7f 92       	push	r7
    37d2:	8f 92       	push	r8
    37d4:	cf 92       	push	r12
    37d6:	df 92       	push	r13
    37d8:	ef 92       	push	r14
    37da:	0f 93       	push	r16
    37dc:	1f 93       	push	r17
    37de:	cf 93       	push	r28
    37e0:	3b 01       	movw	r6, r22
    37e2:	88 2e       	mov	r8, r24
    37e4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    37e6:	21 e0       	ldi	r18, 0x01	; 1
    37e8:	4a e8       	ldi	r20, 0x8A	; 138
    37ea:	5c e0       	ldi	r21, 0x0C	; 12
    37ec:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <get_parameter>
    37f0:	c8 2f       	mov	r28, r24
    37f2:	88 23       	and	r24, r24
    37f4:	e9 f1       	breq	.+122    	; 0x3870 <handle_sensor+0xa2>
	
	if(strcmp(par, S_METH)==0){
    37f6:	8a e8       	ldi	r24, 0x8A	; 138
    37f8:	9c e0       	ldi	r25, 0x0C	; 12
    37fa:	6c 01       	movw	r12, r24
    37fc:	20 e8       	ldi	r18, 0x80	; 128
    37fe:	e2 2e       	mov	r14, r18
    3800:	2c e4       	ldi	r18, 0x4C	; 76
    3802:	37 e0       	ldi	r19, 0x07	; 7
    3804:	40 e0       	ldi	r20, 0x00	; 0
    3806:	8e 2d       	mov	r24, r14
    3808:	b6 01       	movw	r22, r12
    380a:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    380e:	89 2b       	or	r24, r25
    3810:	39 f4       	brne	.+14     	; 0x3820 <handle_sensor+0x52>
		return handle_methane(cmd, res);
    3812:	a8 01       	movw	r20, r16
    3814:	88 2d       	mov	r24, r8
    3816:	b3 01       	movw	r22, r6
    3818:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <handle_methane>
    381c:	c8 2f       	mov	r28, r24
    381e:	28 c0       	rjmp	.+80     	; 0x3870 <handle_sensor+0xa2>
	}else if(strcmp(par, S_CO2)==0){
    3820:	21 e5       	ldi	r18, 0x51	; 81
    3822:	37 e0       	ldi	r19, 0x07	; 7
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	8e 2d       	mov	r24, r14
    3828:	b6 01       	movw	r22, r12
    382a:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    382e:	89 2b       	or	r24, r25
    3830:	39 f4       	brne	.+14     	; 0x3840 <handle_sensor+0x72>
		return handle_co2(cmd, res);
    3832:	a8 01       	movw	r20, r16
    3834:	88 2d       	mov	r24, r8
    3836:	b3 01       	movw	r22, r6
    3838:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <handle_co2>
    383c:	c8 2f       	mov	r28, r24
    383e:	18 c0       	rjmp	.+48     	; 0x3870 <handle_sensor+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    3840:	25 e5       	ldi	r18, 0x55	; 85
    3842:	37 e0       	ldi	r19, 0x07	; 7
    3844:	40 e0       	ldi	r20, 0x00	; 0
    3846:	8e 2d       	mov	r24, r14
    3848:	b6 01       	movw	r22, r12
    384a:	0e 94 00 2c 	call	0x5800	; 0x5800 <strcmp>
    384e:	89 2b       	or	r24, r25
    3850:	39 f4       	brne	.+14     	; 0x3860 <handle_sensor+0x92>
		return handle_pump(cmd, res);
    3852:	a8 01       	movw	r20, r16
    3854:	88 2d       	mov	r24, r8
    3856:	b3 01       	movw	r22, r6
    3858:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <handle_pump>
    385c:	c8 2f       	mov	r28, r24
    385e:	08 c0       	rjmp	.+16     	; 0x3870 <handle_sensor+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3860:	26 e1       	ldi	r18, 0x16	; 22
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	4b e0       	ldi	r20, 0x0B	; 11
    3866:	57 e0       	ldi	r21, 0x07	; 7
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	c8 01       	movw	r24, r16
    386c:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <memcpy>
		return true;
	}
}
    3870:	8c 2f       	mov	r24, r28
    3872:	cf 91       	pop	r28
    3874:	1f 91       	pop	r17
    3876:	0f 91       	pop	r16
    3878:	ef 90       	pop	r14
    387a:	df 90       	pop	r13
    387c:	cf 90       	pop	r12
    387e:	8f 90       	pop	r8
    3880:	7f 90       	pop	r7
    3882:	6f 90       	pop	r6
    3884:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00006084 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    6084:	0e 94 40 33 	call	0x6680	; 0x6680 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    6088:	0e 94 8e 33 	call	0x671c	; 0x671c <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    608c:	81 e0       	ldi	r24, 0x01	; 1
    608e:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    6092:	0e 94 9c 33 	call	0x6738	; 0x6738 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    6096:	81 e0       	ldi	r24, 0x01	; 1
    6098:	0e 94 e6 32 	call	0x65cc	; 0x65cc <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    609c:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    60a0:	88 23       	and	r24, r24
    60a2:	11 f0       	breq	.+4      	; 0x60a8 <init_methane_SCD30+0x24>
    60a4:	80 e0       	ldi	r24, 0x00	; 0
    60a6:	08 95       	ret
	return true;
    60a8:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    60aa:	08 95       	ret

Disassembly of section .text.count_parameters:

00004f5c <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    4f5c:	6f 92       	push	r6
    4f5e:	7f 92       	push	r7
    4f60:	8f 92       	push	r8
    4f62:	cf 92       	push	r12
    4f64:	df 92       	push	r13
    4f66:	ef 92       	push	r14
    4f68:	3b 01       	movw	r6, r22
    4f6a:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    4f6c:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    4f70:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4f72:	20 e0       	ldi	r18, 0x00	; 0
    4f74:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    4f76:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    4f78:	10 c0       	rjmp	.+32     	; 0x4f9a <count_parameters+0x3e>
	{
		if(src[i]==' '){
    4f7a:	e8 2c       	mov	r14, r8
    4f7c:	63 01       	movw	r12, r6
    4f7e:	c2 0e       	add	r12, r18
    4f80:	d3 1e       	adc	r13, r19
    4f82:	e1 1c       	adc	r14, r1
    4f84:	37 fd       	sbrc	r19, 7
    4f86:	ea 94       	dec	r14
    4f88:	f6 01       	movw	r30, r12
    4f8a:	94 91       	lpm	r25, Z
    4f8c:	e7 fc       	sbrc	r14, 7
    4f8e:	90 81       	ld	r25, Z
    4f90:	90 32       	cpi	r25, 0x20	; 32
    4f92:	09 f4       	brne	.+2      	; 0x4f96 <count_parameters+0x3a>
			cnt++;
    4f94:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4f96:	2f 5f       	subi	r18, 0xFF	; 255
    4f98:	3f 4f       	sbci	r19, 0xFF	; 255
    4f9a:	26 17       	cp	r18, r22
    4f9c:	37 07       	cpc	r19, r23
    4f9e:	68 f3       	brcs	.-38     	; 0x4f7a <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    4fa0:	ef 90       	pop	r14
    4fa2:	df 90       	pop	r13
    4fa4:	cf 90       	pop	r12
    4fa6:	8f 90       	pop	r8
    4fa8:	7f 90       	pop	r7
    4faa:	6f 90       	pop	r6
    4fac:	08 95       	ret

Disassembly of section .text.par_index:

0000476a <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    476a:	cf 92       	push	r12
    476c:	df 92       	push	r13
    476e:	ef 92       	push	r14
    4770:	0f 93       	push	r16
    4772:	1f 93       	push	r17
    4774:	cf 93       	push	r28
    4776:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4778:	44 23       	and	r20, r20
    477a:	29 f1       	breq	.+74     	; 0x47c6 <par_index+0x5c>
    477c:	04 2f       	mov	r16, r20
    477e:	6b 01       	movw	r12, r22
    4780:	e8 2e       	mov	r14, r24
    4782:	c0 e0       	ldi	r28, 0x00	; 0
    4784:	d0 e0       	ldi	r29, 0x00	; 0
    4786:	10 e0       	ldi	r17, 0x00	; 0
    4788:	14 c0       	rjmp	.+40     	; 0x47b2 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    478a:	ae 2d       	mov	r26, r14
    478c:	c6 01       	movw	r24, r12
    478e:	8c 0f       	add	r24, r28
    4790:	9d 1f       	adc	r25, r29
    4792:	a1 1d       	adc	r26, r1
    4794:	d7 fd       	sbrc	r29, 7
    4796:	aa 95       	dec	r26
    4798:	fc 01       	movw	r30, r24
    479a:	84 91       	lpm	r24, Z
    479c:	a7 fd       	sbrc	r26, 7
    479e:	80 81       	ld	r24, Z
    47a0:	80 32       	cpi	r24, 0x20	; 32
    47a2:	31 f4       	brne	.+12     	; 0x47b0 <par_index+0x46>
			cnt++;
    47a4:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    47a6:	01 13       	cpse	r16, r17
    47a8:	03 c0       	rjmp	.+6      	; 0x47b0 <par_index+0x46>
				return i+1;
    47aa:	ce 01       	movw	r24, r28
    47ac:	01 96       	adiw	r24, 0x01	; 1
    47ae:	0d c0       	rjmp	.+26     	; 0x47ca <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    47b0:	21 96       	adiw	r28, 0x01	; 1
    47b2:	8e 2d       	mov	r24, r14
    47b4:	b6 01       	movw	r22, r12
    47b6:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    47ba:	c8 17       	cp	r28, r24
    47bc:	d9 07       	cpc	r29, r25
    47be:	28 f3       	brcs	.-54     	; 0x478a <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	02 c0       	rjmp	.+4      	; 0x47ca <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    47ca:	df 91       	pop	r29
    47cc:	cf 91       	pop	r28
    47ce:	1f 91       	pop	r17
    47d0:	0f 91       	pop	r16
    47d2:	ef 90       	pop	r14
    47d4:	df 90       	pop	r13
    47d6:	cf 90       	pop	r12
    47d8:	08 95       	ret

Disassembly of section .text.get_parameter:

00003f90 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    3f90:	8f 92       	push	r8
    3f92:	9f 92       	push	r9
    3f94:	af 92       	push	r10
    3f96:	cf 92       	push	r12
    3f98:	df 92       	push	r13
    3f9a:	ef 92       	push	r14
    3f9c:	ff 92       	push	r15
    3f9e:	0f 93       	push	r16
    3fa0:	1f 93       	push	r17
    3fa2:	cf 93       	push	r28
    3fa4:	df 93       	push	r29
    3fa6:	6b 01       	movw	r12, r22
    3fa8:	e8 2e       	mov	r14, r24
    3faa:	ea 01       	movw	r28, r20
    3fac:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    3fae:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <count_parameters>
	if(pars<parNo) return false;
    3fb2:	8f 15       	cp	r24, r15
    3fb4:	58 f1       	brcs	.+86     	; 0x400c <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    3fb6:	8e 2d       	mov	r24, r14
    3fb8:	b6 01       	movw	r22, r12
    3fba:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    3fbe:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    3fc0:	4f 2d       	mov	r20, r15
    3fc2:	8e 2d       	mov	r24, r14
    3fc4:	b6 01       	movw	r22, r12
    3fc6:	0e 94 b5 23 	call	0x476a	; 0x476a <par_index>
	uint8_t parLen=0;
    3fca:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    3fcc:	15 c0       	rjmp	.+42     	; 0x3ff8 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    3fce:	46 01       	movw	r8, r12
    3fd0:	ae 2c       	mov	r10, r14
    3fd2:	82 0e       	add	r8, r18
    3fd4:	93 1e       	adc	r9, r19
    3fd6:	a1 1c       	adc	r10, r1
    3fd8:	37 fd       	sbrc	r19, 7
    3fda:	aa 94       	dec	r10
    3fdc:	4a 2d       	mov	r20, r10
    3fde:	94 01       	movw	r18, r8
    3fe0:	f4 01       	movw	r30, r8
    3fe2:	24 91       	lpm	r18, Z
    3fe4:	47 fd       	sbrc	r20, 7
    3fe6:	20 81       	ld	r18, Z
    3fe8:	20 32       	cpi	r18, 0x20	; 32
    3fea:	59 f0       	breq	.+22     	; 0x4002 <get_parameter+0x72>
		par[parLen++]=src[i];
    3fec:	fe 01       	movw	r30, r28
    3fee:	e9 0f       	add	r30, r25
    3ff0:	f1 1d       	adc	r31, r1
    3ff2:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3ff4:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    3ff6:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3ff8:	28 2f       	mov	r18, r24
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	20 17       	cp	r18, r16
    3ffe:	31 07       	cpc	r19, r17
    4000:	30 f3       	brcs	.-52     	; 0x3fce <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    4002:	c9 0f       	add	r28, r25
    4004:	d1 1d       	adc	r29, r1
    4006:	18 82       	st	Y, r1
	
	return true;
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	01 c0       	rjmp	.+2      	; 0x400e <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    400c:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    400e:	df 91       	pop	r29
    4010:	cf 91       	pop	r28
    4012:	1f 91       	pop	r17
    4014:	0f 91       	pop	r16
    4016:	ff 90       	pop	r15
    4018:	ef 90       	pop	r14
    401a:	df 90       	pop	r13
    401c:	cf 90       	pop	r12
    401e:	af 90       	pop	r10
    4020:	9f 90       	pop	r9
    4022:	8f 90       	pop	r8
    4024:	08 95       	ret

Disassembly of section .text.decode_stage_response:

00006578 <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    6578:	88 23       	and	r24, r24
    657a:	19 f0       	breq	.+6      	; 0x6582 <decode_stage_response+0xa>
    657c:	81 30       	cpi	r24, 0x01	; 1
    657e:	29 f0       	breq	.+10     	; 0x658a <decode_stage_response+0x12>
    6580:	02 c0       	rjmp	.+4      	; 0x6586 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    6582:	81 e1       	ldi	r24, 0x11	; 17
    6584:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    6586:	86 e1       	ldi	r24, 0x16	; 22
    6588:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    658a:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    658c:	08 95       	ret

Disassembly of section .text.decode_join_response:

00006404 <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    6404:	82 30       	cpi	r24, 0x02	; 2
    6406:	51 f0       	breq	.+20     	; 0x641c <decode_join_response+0x18>
    6408:	83 30       	cpi	r24, 0x03	; 3
    640a:	21 f0       	breq	.+8      	; 0x6414 <decode_join_response+0x10>
    640c:	81 11       	cpse	r24, r1
    640e:	04 c0       	rjmp	.+8      	; 0x6418 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    6410:	83 e0       	ldi	r24, 0x03	; 3
    6412:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    6414:	85 e0       	ldi	r24, 0x05	; 5
    6416:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    6418:	86 e1       	ldi	r24, 0x16	; 22
    641a:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    641c:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    641e:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

0000631e <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    631e:	82 30       	cpi	r24, 0x02	; 2
    6320:	49 f0       	breq	.+18     	; 0x6334 <decode_header_tail_response+0x16>
    6322:	18 f4       	brcc	.+6      	; 0x632a <decode_header_tail_response+0xc>
    6324:	88 23       	and	r24, r24
    6326:	41 f0       	breq	.+16     	; 0x6338 <decode_header_tail_response+0x1a>
    6328:	03 c0       	rjmp	.+6      	; 0x6330 <decode_header_tail_response+0x12>
    632a:	84 50       	subi	r24, 0x04	; 4
    632c:	82 30       	cpi	r24, 0x02	; 2
    632e:	20 f0       	brcs	.+8      	; 0x6338 <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    6330:	86 e1       	ldi	r24, 0x16	; 22
    6332:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    6334:	84 2f       	mov	r24, r20
    6336:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    6338:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    633a:	08 95       	ret

Disassembly of section .text.read_eeprom:

00004cfe <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    4cfe:	8f ea       	ldi	r24, 0xAF	; 175
    4d00:	9c e0       	ldi	r25, 0x0C	; 12
    4d02:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <EM_get_deveui>
	EM_get_appeui(appeui);
    4d06:	8e e9       	ldi	r24, 0x9E	; 158
    4d08:	9c e0       	ldi	r25, 0x0C	; 12
    4d0a:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <EM_get_appeui>
	EM_get_appkey(appkey);
    4d0e:	89 e6       	ldi	r24, 0x69	; 105
    4d10:	9c e0       	ldi	r25, 0x0C	; 12
    4d12:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    4d16:	63 e2       	ldi	r22, 0x23	; 35
    4d18:	86 e4       	ldi	r24, 0x46	; 70
    4d1a:	9c e0       	ldi	r25, 0x0C	; 12
    4d1c:	0e 94 7e 33 	call	0x66fc	; 0x66fc <EM_get_collections>
	EM_get_Vcc(&vccx);
    4d20:	89 ee       	ldi	r24, 0xE9	; 233
    4d22:	9c e0       	ldi	r25, 0x0C	; 12
    4d24:	0e 94 80 31 	call	0x6300	; 0x6300 <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    4d28:	85 ee       	ldi	r24, 0xE5	; 229
    4d2a:	9c e0       	ldi	r25, 0x0C	; 12
    4d2c:	0e 94 71 31 	call	0x62e2	; 0x62e2 <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    4d30:	81 ee       	ldi	r24, 0xE1	; 225
    4d32:	9c e0       	ldi	r25, 0x0C	; 12
    4d34:	0e 94 62 31 	call	0x62c4	; 0x62c4 <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    4d38:	0e 94 41 34 	call	0x6882	; 0x6882 <EM_get_heat_up_time>
    4d3c:	80 93 25 0d 	sts	0x0D25, r24	; 0x800d25 <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    4d40:	0e 94 4d 34 	call	0x689a	; 0x689a <EM_get_air_pump_time>
    4d44:	90 93 10 0d 	sts	0x0D10, r25	; 0x800d10 <airPumpTime+0x1>
    4d48:	80 93 0f 0d 	sts	0x0D0F, r24	; 0x800d0f <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    4d4c:	0e 94 59 34 	call	0x68b2	; 0x68b2 <EM_get_sp_interval>
    4d50:	80 93 24 0d 	sts	0x0D24, r24	; 0x800d24 <samplingProcessInterval>
	return true;
}
    4d54:	81 e0       	ldi	r24, 0x01	; 1
    4d56:	08 95       	ret

Disassembly of section .text.join_lora:

000066b6 <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    66b6:	49 e6       	ldi	r20, 0x69	; 105
    66b8:	5c e0       	ldi	r21, 0x0C	; 12
    66ba:	6e e9       	ldi	r22, 0x9E	; 158
    66bc:	7c e0       	ldi	r23, 0x0C	; 12
    66be:	8f ea       	ldi	r24, 0xAF	; 175
    66c0:	9c e0       	ldi	r25, 0x0C	; 12
    66c2:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <LM_join_network>
}
    66c6:	08 95       	ret

Disassembly of section .text.set_wakeup:

00006984 <set_wakeup>:
			return MAINPG_FATAL_ERROR;
	}
}

static RTC_STATUS set_wakeup(){
	return RTC_set_wake_up_interrupt(samplingProcessInterval);
    6984:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <samplingProcessInterval>
    6988:	0e 94 ca 1a 	call	0x3594	; 0x3594 <RTC_set_wake_up_interrupt>
	//return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
}
    698c:	08 95       	ret

Disassembly of section .text.send_header:

00006488 <send_header>:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
	MRPP_get_header_package(package, &package_length);
    6488:	66 e2       	ldi	r22, 0x26	; 38
    648a:	7d e0       	ldi	r23, 0x0D	; 13
    648c:	87 e4       	ldi	r24, 0x47	; 71
    648e:	9b e0       	ldi	r25, 0x0B	; 11
    6490:	0e 94 ae 30 	call	0x615c	; 0x615c <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    6494:	60 91 26 0d 	lds	r22, 0x0D26	; 0x800d26 <package_length>
    6498:	87 e4       	ldi	r24, 0x47	; 71
    649a:	9b e0       	ldi	r25, 0x0B	; 11
    649c:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <LM_send_uplink>
}
    64a0:	08 95       	ret

Disassembly of section .text.send_body:

000064a2 <send_body>:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    64a2:	46 e2       	ldi	r20, 0x26	; 38
    64a4:	5d e0       	ldi	r21, 0x0D	; 13
    64a6:	67 e4       	ldi	r22, 0x47	; 71
    64a8:	7b e0       	ldi	r23, 0x0B	; 11
    64aa:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    64ae:	60 91 26 0d 	lds	r22, 0x0D26	; 0x800d26 <package_length>
    64b2:	87 e4       	ldi	r24, 0x47	; 71
    64b4:	9b e0       	ldi	r25, 0x0B	; 11
    64b6:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <LM_send_uplink>
}
    64ba:	08 95       	ret

Disassembly of section .text.send_tail:

000064bc <send_tail>:
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
	MRPP_get_tail_package(package, &package_length);
    64bc:	66 e2       	ldi	r22, 0x26	; 38
    64be:	7d e0       	ldi	r23, 0x0D	; 13
    64c0:	87 e4       	ldi	r24, 0x47	; 71
    64c2:	9b e0       	ldi	r25, 0x0B	; 11
    64c4:	0e 94 bf 30 	call	0x617e	; 0x617e <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    64c8:	60 91 26 0d 	lds	r22, 0x0D26	; 0x800d26 <package_length>
    64cc:	87 e4       	ldi	r24, 0x47	; 71
    64ce:	9b e0       	ldi	r25, 0x0B	; 11
    64d0:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <LM_send_uplink>
}
    64d4:	08 95       	ret

Disassembly of section .text.send_msg:

00006506 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    6506:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <uart1_hal_send_string>
    650a:	2f ef       	ldi	r18, 0xFF	; 255
    650c:	80 e7       	ldi	r24, 0x70	; 112
    650e:	92 e0       	ldi	r25, 0x02	; 2
    6510:	21 50       	subi	r18, 0x01	; 1
    6512:	80 40       	sbci	r24, 0x00	; 0
    6514:	90 40       	sbci	r25, 0x00	; 0
    6516:	e1 f7       	brne	.-8      	; 0x6510 <send_msg+0xa>
    6518:	00 c0       	rjmp	.+0      	; 0x651a <send_msg+0x14>
    651a:	00 00       	nop
    651c:	08 95       	ret

Disassembly of section .text.stage_0:

00003316 <stage_0>:
/************************************************************************/
static STAGE_STATUS stage_0(){
	RTC_STATUS rtcStatus;
	
	while(1){
		switch(state_s0){
    3316:	80 91 2a 0d 	lds	r24, 0x0D2A	; 0x800d2a <state_s0>
    331a:	82 30       	cpi	r24, 0x02	; 2
    331c:	51 f1       	breq	.+84     	; 0x3372 <stage_0+0x5c>
    331e:	28 f4       	brcc	.+10     	; 0x332a <stage_0+0x14>
    3320:	88 23       	and	r24, r24
    3322:	51 f0       	breq	.+20     	; 0x3338 <stage_0+0x22>
    3324:	81 30       	cpi	r24, 0x01	; 1
    3326:	d9 f0       	breq	.+54     	; 0x335e <stage_0+0x48>
    3328:	f6 cf       	rjmp	.-20     	; 0x3316 <stage_0>
    332a:	84 30       	cpi	r24, 0x04	; 4
    332c:	09 f4       	brne	.+2      	; 0x3330 <stage_0+0x1a>
    332e:	52 c0       	rjmp	.+164    	; 0x33d4 <stage_0+0xbe>
    3330:	50 f1       	brcs	.+84     	; 0x3386 <stage_0+0x70>
    3332:	85 30       	cpi	r24, 0x05	; 5
    3334:	a1 f1       	breq	.+104    	; 0x339e <stage_0+0x88>
    3336:	ef cf       	rjmp	.-34     	; 0x3316 <stage_0>
			case STAGE_INIT:
				print_debug("State: S0 INIT");
    3338:	64 e6       	ldi	r22, 0x64	; 100
    333a:	72 e0       	ldi	r23, 0x02	; 2
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				SCD30_init_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    3342:	e6 e4       	ldi	r30, 0x46	; 70
    3344:	fc e0       	ldi	r31, 0x0C	; 12
    3346:	60 81       	ld	r22, Z
    3348:	71 81       	ldd	r23, Z+1	; 0x01
    334a:	4c ec       	ldi	r20, 0xCC	; 204
    334c:	59 e0       	ldi	r21, 0x09	; 9
    334e:	82 81       	ldd	r24, Z+2	; 0x02
    3350:	93 81       	ldd	r25, Z+3	; 0x03
    3352:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <SCD30_init_sampling>
				state_s0=STAGE_GET_TIME;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	80 93 2a 0d 	sts	0x0D2A, r24	; 0x800d2a <state_s0>
			break;
    335c:	dc cf       	rjmp	.-72     	; 0x3316 <stage_0>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    335e:	8a ec       	ldi	r24, 0xCA	; 202
    3360:	9c e0       	ldi	r25, 0x0C	; 12
    3362:	0e 94 b5 12 	call	0x256a	; 0x256a <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    3366:	81 11       	cpse	r24, r1
    3368:	3e c0       	rjmp	.+124    	; 0x33e6 <stage_0+0xd0>
				state_s0=STAGE_START;
    336a:	82 e0       	ldi	r24, 0x02	; 2
    336c:	80 93 2a 0d 	sts	0x0D2A, r24	; 0x800d2a <state_s0>
			break;
    3370:	d2 cf       	rjmp	.-92     	; 0x3316 <stage_0>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    3372:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <methHeatUpTime>
    3376:	0e 94 53 31 	call	0x62a6	; 0x62a6 <ADC_meth_sens_power_on>
				SCD30_start_sampling();
    337a:	0e 94 bd 34 	call	0x697a	; 0x697a <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    337e:	83 e0       	ldi	r24, 0x03	; 3
    3380:	80 93 2a 0d 	sts	0x0D2A, r24	; 0x800d2a <state_s0>
			break;
    3384:	c8 cf       	rjmp	.-112    	; 0x3316 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    3386:	0e 94 49 33 	call	0x6692	; 0x6692 <ADC_meth_sens_ready>
    338a:	88 23       	and	r24, r24
    338c:	71 f1       	breq	.+92     	; 0x33ea <stage_0+0xd4>
    338e:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <SCD30_is_sampling_done>
    3392:	88 23       	and	r24, r24
    3394:	61 f1       	breq	.+88     	; 0x33ee <stage_0+0xd8>
				state_s0=STAGE_UPDATE_MRPP;
    3396:	85 e0       	ldi	r24, 0x05	; 5
    3398:	80 93 2a 0d 	sts	0x0D2A, r24	; 0x800d2a <state_s0>
			break;
    339c:	bc cf       	rjmp	.-136    	; 0x3316 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    339e:	2d ee       	ldi	r18, 0xED	; 237
    33a0:	3c e0       	ldi	r19, 0x0C	; 12
    33a2:	40 91 ca 0c 	lds	r20, 0x0CCA	; 0x800cca <dt>
    33a6:	50 91 cb 0c 	lds	r21, 0x0CCB	; 0x800ccb <dt+0x1>
    33aa:	60 91 cc 0c 	lds	r22, 0x0CCC	; 0x800ccc <dt+0x2>
    33ae:	70 91 cd 0c 	lds	r23, 0x0CCD	; 0x800ccd <dt+0x3>
    33b2:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <dt+0x4>
    33b6:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <dt+0x5>
    33ba:	0e 94 8a 14 	call	0x2914	; 0x2914 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    33be:	4c ec       	ldi	r20, 0xCC	; 204
    33c0:	59 e0       	ldi	r21, 0x09	; 9
    33c2:	6d ee       	ldi	r22, 0xED	; 237
    33c4:	7c e0       	ldi	r23, 0x0C	; 12
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	0e 94 7d 23 	call	0x46fa	; 0x46fa <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    33cc:	84 e0       	ldi	r24, 0x04	; 4
    33ce:	80 93 2a 0d 	sts	0x0D2A, r24	; 0x800d2a <state_s0>
			break;
    33d2:	a1 cf       	rjmp	.-190    	; 0x3316 <stage_0>
			
			case STAGE_DEINIT:
				print_debug("State: S0 DE-INIT");
    33d4:	63 e7       	ldi	r22, 0x73	; 115
    33d6:	72 e0       	ldi	r23, 0x02	; 2
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				SCD30_deinit_sampling();
    33de:	0e 94 f7 33 	call	0x67ee	; 0x67ee <SCD30_deinit_sampling>
				return STAGE_DONE;
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	08 95       	ret
				state_s0=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	08 95       	ret
    33ee:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    33f0:	08 95       	ret

Disassembly of section .text.stage_1:

00002c68 <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	
	while(1){
		switch(state_s1){
    2c6c:	80 91 29 0d 	lds	r24, 0x0D29	; 0x800d29 <state_s1>
    2c70:	82 30       	cpi	r24, 0x02	; 2
    2c72:	99 f1       	breq	.+102    	; 0x2cda <stage_1+0x72>
    2c74:	28 f4       	brcc	.+10     	; 0x2c80 <stage_1+0x18>
    2c76:	88 23       	and	r24, r24
    2c78:	51 f0       	breq	.+20     	; 0x2c8e <stage_1+0x26>
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	21 f1       	breq	.+72     	; 0x2cc6 <stage_1+0x5e>
    2c7e:	f6 cf       	rjmp	.-20     	; 0x2c6c <stage_1+0x4>
    2c80:	84 30       	cpi	r24, 0x04	; 4
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <stage_1+0x1e>
    2c84:	60 c0       	rjmp	.+192    	; 0x2d46 <stage_1+0xde>
    2c86:	88 f1       	brcs	.+98     	; 0x2cea <stage_1+0x82>
    2c88:	85 30       	cpi	r24, 0x05	; 5
    2c8a:	d9 f1       	breq	.+118    	; 0x2d02 <stage_1+0x9a>
    2c8c:	ef cf       	rjmp	.-34     	; 0x2c6c <stage_1+0x4>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
    2c8e:	65 e8       	ldi	r22, 0x85	; 133
    2c90:	72 e0       	ldi	r23, 0x02	; 2
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    2c98:	c6 e4       	ldi	r28, 0x46	; 70
    2c9a:	dc e0       	ldi	r29, 0x0C	; 12
    2c9c:	6a 85       	ldd	r22, Y+10	; 0x0a
    2c9e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2ca0:	4c ec       	ldi	r20, 0xCC	; 204
    2ca2:	59 e0       	ldi	r21, 0x09	; 9
    2ca4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ca6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ca8:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    2cac:	6d 81       	ldd	r22, Y+5	; 0x05
    2cae:	7e 81       	ldd	r23, Y+6	; 0x06
    2cb0:	44 e0       	ldi	r20, 0x04	; 4
    2cb2:	59 e0       	ldi	r21, 0x09	; 9
    2cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb6:	0e 94 65 25 	call	0x4aca	; 0x4aca <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2cba:	81 11       	cpse	r24, r1
    2cbc:	4f c0       	rjmp	.+158    	; 0x2d5c <stage_1+0xf4>
				
				state_s1=STAGE_GET_TIME;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	80 93 29 0d 	sts	0x0D29, r24	; 0x800d29 <state_s1>
			break;
    2cc4:	d3 cf       	rjmp	.-90     	; 0x2c6c <stage_1+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    2cc6:	8a ec       	ldi	r24, 0xCA	; 202
    2cc8:	9c e0       	ldi	r25, 0x0C	; 12
    2cca:	0e 94 b5 12 	call	0x256a	; 0x256a <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2cce:	81 11       	cpse	r24, r1
    2cd0:	47 c0       	rjmp	.+142    	; 0x2d60 <stage_1+0xf8>
				state_s1=STAGE_START;
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	80 93 29 0d 	sts	0x0D29, r24	; 0x800d29 <state_s1>
			break;
    2cd8:	c9 cf       	rjmp	.-110    	; 0x2c6c <stage_1+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2cda:	0e 94 bd 34 	call	0x697a	; 0x697a <SCD30_start_sampling>
				ADC_start_sampling();
    2cde:	0e 94 ae 34 	call	0x695c	; 0x695c <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    2ce2:	83 e0       	ldi	r24, 0x03	; 3
    2ce4:	80 93 29 0d 	sts	0x0D29, r24	; 0x800d29 <state_s1>
			break;
    2ce8:	c1 cf       	rjmp	.-126    	; 0x2c6c <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2cea:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <SCD30_is_sampling_done>
    2cee:	88 23       	and	r24, r24
    2cf0:	c9 f1       	breq	.+114    	; 0x2d64 <stage_1+0xfc>
    2cf2:	0e 94 bc 31 	call	0x6378	; 0x6378 <ADC_is_sampling_done>
    2cf6:	88 23       	and	r24, r24
    2cf8:	b9 f1       	breq	.+110    	; 0x2d68 <stage_1+0x100>
				state_s1=STAGE_UPDATE_MRPP;
    2cfa:	85 e0       	ldi	r24, 0x05	; 5
    2cfc:	80 93 29 0d 	sts	0x0D29, r24	; 0x800d29 <state_s1>
			break;
    2d00:	b5 cf       	rjmp	.-150    	; 0x2c6c <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2d02:	2d ee       	ldi	r18, 0xED	; 237
    2d04:	3c e0       	ldi	r19, 0x0C	; 12
    2d06:	40 91 ca 0c 	lds	r20, 0x0CCA	; 0x800cca <dt>
    2d0a:	50 91 cb 0c 	lds	r21, 0x0CCB	; 0x800ccb <dt+0x1>
    2d0e:	60 91 cc 0c 	lds	r22, 0x0CCC	; 0x800ccc <dt+0x2>
    2d12:	70 91 cd 0c 	lds	r23, 0x0CCD	; 0x800ccd <dt+0x3>
    2d16:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <dt+0x4>
    2d1a:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <dt+0x5>
    2d1e:	0e 94 8a 14 	call	0x2914	; 0x2914 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    2d22:	4c ec       	ldi	r20, 0xCC	; 204
    2d24:	59 e0       	ldi	r21, 0x09	; 9
    2d26:	6d ee       	ldi	r22, 0xED	; 237
    2d28:	7c e0       	ldi	r23, 0x0C	; 12
    2d2a:	83 e0       	ldi	r24, 0x03	; 3
    2d2c:	0e 94 7d 23 	call	0x46fa	; 0x46fa <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    2d30:	44 e0       	ldi	r20, 0x04	; 4
    2d32:	59 e0       	ldi	r21, 0x09	; 9
    2d34:	6d ee       	ldi	r22, 0xED	; 237
    2d36:	7c e0       	ldi	r23, 0x0C	; 12
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    2d3e:	84 e0       	ldi	r24, 0x04	; 4
    2d40:	80 93 29 0d 	sts	0x0D29, r24	; 0x800d29 <state_s1>
			break;
    2d44:	93 cf       	rjmp	.-218    	; 0x2c6c <stage_1+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S1 DE-INIT");
    2d46:	64 e9       	ldi	r22, 0x94	; 148
    2d48:	72 e0       	ldi	r23, 0x02	; 2
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				SCD30_deinit_sampling();
    2d50:	0e 94 f7 33 	call	0x67ee	; 0x67ee <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2d54:	0e 94 2c 33 	call	0x6658	; 0x6658 <ADC_deinit_sampling>
				return STAGE_DONE;
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	07 c0       	rjmp	.+14     	; 0x2d6a <stage_1+0x102>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2d5c:	83 e0       	ldi	r24, 0x03	; 3
    2d5e:	05 c0       	rjmp	.+10     	; 0x2d6a <stage_1+0x102>
				state_s1=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	03 c0       	rjmp	.+6      	; 0x2d6a <stage_1+0x102>
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	01 c0       	rjmp	.+2      	; 0x2d6a <stage_1+0x102>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	08 95       	ret

Disassembly of section .text.stage_2:

00002a36 <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;

	while(1){
		switch(state_s2){
    2a3a:	80 91 28 0d 	lds	r24, 0x0D28	; 0x800d28 <state_s2>
    2a3e:	82 30       	cpi	r24, 0x02	; 2
    2a40:	a1 f1       	breq	.+104    	; 0x2aaa <stage_2+0x74>
    2a42:	28 f4       	brcc	.+10     	; 0x2a4e <stage_2+0x18>
    2a44:	88 23       	and	r24, r24
    2a46:	59 f0       	breq	.+22     	; 0x2a5e <stage_2+0x28>
    2a48:	81 30       	cpi	r24, 0x01	; 1
    2a4a:	29 f1       	breq	.+74     	; 0x2a96 <stage_2+0x60>
    2a4c:	f6 cf       	rjmp	.-20     	; 0x2a3a <stage_2+0x4>
    2a4e:	84 30       	cpi	r24, 0x04	; 4
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <stage_2+0x1e>
    2a52:	6b c0       	rjmp	.+214    	; 0x2b2a <stage_2+0xf4>
    2a54:	c0 f1       	brcs	.+112    	; 0x2ac6 <stage_2+0x90>
    2a56:	85 30       	cpi	r24, 0x05	; 5
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <stage_2+0x26>
    2a5a:	45 c0       	rjmp	.+138    	; 0x2ae6 <stage_2+0xb0>
    2a5c:	ee cf       	rjmp	.-36     	; 0x2a3a <stage_2+0x4>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
    2a5e:	66 ea       	ldi	r22, 0xA6	; 166
    2a60:	72 e0       	ldi	r23, 0x02	; 2
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    2a68:	c6 e4       	ldi	r28, 0x46	; 70
    2a6a:	dc e0       	ldi	r29, 0x0C	; 12
    2a6c:	6c 89       	ldd	r22, Y+20	; 0x14
    2a6e:	7d 89       	ldd	r23, Y+21	; 0x15
    2a70:	4c ec       	ldi	r20, 0xCC	; 204
    2a72:	59 e0       	ldi	r21, 0x09	; 9
    2a74:	8e 89       	ldd	r24, Y+22	; 0x16
    2a76:	9f 89       	ldd	r25, Y+23	; 0x17
    2a78:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    2a7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a7e:	78 89       	ldd	r23, Y+16	; 0x10
    2a80:	44 e0       	ldi	r20, 0x04	; 4
    2a82:	59 e0       	ldi	r21, 0x09	; 9
    2a84:	89 89       	ldd	r24, Y+17	; 0x11
    2a86:	0e 94 65 25 	call	0x4aca	; 0x4aca <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	59 c0       	rjmp	.+178    	; 0x2b40 <stage_2+0x10a>
			
				state_s2=STAGE_GET_TIME;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	80 93 28 0d 	sts	0x0D28, r24	; 0x800d28 <state_s2>
			break;
    2a94:	d2 cf       	rjmp	.-92     	; 0x2a3a <stage_2+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    2a96:	8a ec       	ldi	r24, 0xCA	; 202
    2a98:	9c e0       	ldi	r25, 0x0C	; 12
    2a9a:	0e 94 b5 12 	call	0x256a	; 0x256a <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2a9e:	81 11       	cpse	r24, r1
    2aa0:	51 c0       	rjmp	.+162    	; 0x2b44 <stage_2+0x10e>
				state_s2=STAGE_START;
    2aa2:	82 e0       	ldi	r24, 0x02	; 2
    2aa4:	80 93 28 0d 	sts	0x0D28, r24	; 0x800d28 <state_s2>
			break;
    2aa8:	c8 cf       	rjmp	.-112    	; 0x2a3a <stage_2+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2aaa:	0e 94 bd 34 	call	0x697a	; 0x697a <SCD30_start_sampling>
				ADC_start_sampling();
    2aae:	0e 94 ae 34 	call	0x695c	; 0x695c <ADC_start_sampling>
				PUMP_start(airPumpTime);
    2ab2:	80 91 0f 0d 	lds	r24, 0x0D0F	; 0x800d0f <airPumpTime>
    2ab6:	90 91 10 0d 	lds	r25, 0x0D10	; 0x800d10 <airPumpTime+0x1>
    2aba:	0e 94 56 30 	call	0x60ac	; 0x60ac <PUMP_start>
			
				state_s2=STAGE_WAIT;
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	80 93 28 0d 	sts	0x0D28, r24	; 0x800d28 <state_s2>
			break;
    2ac4:	ba cf       	rjmp	.-140    	; 0x2a3a <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2ac6:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <SCD30_is_sampling_done>
    2aca:	88 23       	and	r24, r24
    2acc:	e9 f1       	breq	.+122    	; 0x2b48 <stage_2+0x112>
    2ace:	0e 94 bc 31 	call	0x6378	; 0x6378 <ADC_is_sampling_done>
    2ad2:	88 23       	and	r24, r24
    2ad4:	d9 f1       	breq	.+118    	; 0x2b4c <stage_2+0x116>
    2ad6:	0e 94 e6 31 	call	0x63cc	; 0x63cc <PUMP_is_done>
    2ada:	88 23       	and	r24, r24
    2adc:	c9 f1       	breq	.+114    	; 0x2b50 <stage_2+0x11a>
				state_s2=STAGE_UPDATE_MRPP;
    2ade:	85 e0       	ldi	r24, 0x05	; 5
    2ae0:	80 93 28 0d 	sts	0x0D28, r24	; 0x800d28 <state_s2>
			break;
    2ae4:	aa cf       	rjmp	.-172    	; 0x2a3a <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2ae6:	2d ee       	ldi	r18, 0xED	; 237
    2ae8:	3c e0       	ldi	r19, 0x0C	; 12
    2aea:	40 91 ca 0c 	lds	r20, 0x0CCA	; 0x800cca <dt>
    2aee:	50 91 cb 0c 	lds	r21, 0x0CCB	; 0x800ccb <dt+0x1>
    2af2:	60 91 cc 0c 	lds	r22, 0x0CCC	; 0x800ccc <dt+0x2>
    2af6:	70 91 cd 0c 	lds	r23, 0x0CCD	; 0x800ccd <dt+0x3>
    2afa:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <dt+0x4>
    2afe:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <dt+0x5>
    2b02:	0e 94 8a 14 	call	0x2914	; 0x2914 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    2b06:	4c ec       	ldi	r20, 0xCC	; 204
    2b08:	59 e0       	ldi	r21, 0x09	; 9
    2b0a:	6d ee       	ldi	r22, 0xED	; 237
    2b0c:	7c e0       	ldi	r23, 0x0C	; 12
    2b0e:	85 e0       	ldi	r24, 0x05	; 5
    2b10:	0e 94 7d 23 	call	0x46fa	; 0x46fa <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    2b14:	44 e0       	ldi	r20, 0x04	; 4
    2b16:	59 e0       	ldi	r21, 0x09	; 9
    2b18:	6d ee       	ldi	r22, 0xED	; 237
    2b1a:	7c e0       	ldi	r23, 0x0C	; 12
    2b1c:	84 e0       	ldi	r24, 0x04	; 4
    2b1e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    2b22:	84 e0       	ldi	r24, 0x04	; 4
    2b24:	80 93 28 0d 	sts	0x0D28, r24	; 0x800d28 <state_s2>
			break;
    2b28:	88 cf       	rjmp	.-240    	; 0x2a3a <stage_2+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S2 DE-INIT");
    2b2a:	65 eb       	ldi	r22, 0xB5	; 181
    2b2c:	72 e0       	ldi	r23, 0x02	; 2
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				SCD30_deinit_sampling();
    2b34:	0e 94 f7 33 	call	0x67ee	; 0x67ee <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2b38:	0e 94 2c 33 	call	0x6658	; 0x6658 <ADC_deinit_sampling>
				return STAGE_DONE;
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	09 c0       	rjmp	.+18     	; 0x2b52 <stage_2+0x11c>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2b40:	83 e0       	ldi	r24, 0x03	; 3
    2b42:	07 c0       	rjmp	.+14     	; 0x2b52 <stage_2+0x11c>
				state_s2=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2b44:	82 e0       	ldi	r24, 0x02	; 2
    2b46:	05 c0       	rjmp	.+10     	; 0x2b52 <stage_2+0x11c>
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	03 c0       	rjmp	.+6      	; 0x2b52 <stage_2+0x11c>
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <stage_2+0x11c>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	08 95       	ret

Disassembly of section .text.stage_3:

00002b58 <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	
	while(1){
		switch(state_s3){
    2b5c:	80 91 27 0d 	lds	r24, 0x0D27	; 0x800d27 <state_s3>
    2b60:	82 30       	cpi	r24, 0x02	; 2
    2b62:	99 f1       	breq	.+102    	; 0x2bca <stage_3+0x72>
    2b64:	28 f4       	brcc	.+10     	; 0x2b70 <stage_3+0x18>
    2b66:	88 23       	and	r24, r24
    2b68:	51 f0       	breq	.+20     	; 0x2b7e <stage_3+0x26>
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	21 f1       	breq	.+72     	; 0x2bb6 <stage_3+0x5e>
    2b6e:	f6 cf       	rjmp	.-20     	; 0x2b5c <stage_3+0x4>
    2b70:	84 30       	cpi	r24, 0x04	; 4
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <stage_3+0x1e>
    2b74:	60 c0       	rjmp	.+192    	; 0x2c36 <stage_3+0xde>
    2b76:	88 f1       	brcs	.+98     	; 0x2bda <stage_3+0x82>
    2b78:	85 30       	cpi	r24, 0x05	; 5
    2b7a:	d9 f1       	breq	.+118    	; 0x2bf2 <stage_3+0x9a>
    2b7c:	ef cf       	rjmp	.-34     	; 0x2b5c <stage_3+0x4>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
    2b7e:	67 ec       	ldi	r22, 0xC7	; 199
    2b80:	72 e0       	ldi	r23, 0x02	; 2
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    2b88:	c6 e4       	ldi	r28, 0x46	; 70
    2b8a:	dc e0       	ldi	r29, 0x0C	; 12
    2b8c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2b8e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2b90:	4c ec       	ldi	r20, 0xCC	; 204
    2b92:	59 e0       	ldi	r21, 0x09	; 9
    2b94:	88 a1       	ldd	r24, Y+32	; 0x20
    2b96:	99 a1       	ldd	r25, Y+33	; 0x21
    2b98:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    2b9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba0:	44 e0       	ldi	r20, 0x04	; 4
    2ba2:	59 e0       	ldi	r21, 0x09	; 9
    2ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba6:	0e 94 65 25 	call	0x4aca	; 0x4aca <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2baa:	81 11       	cpse	r24, r1
    2bac:	53 c0       	rjmp	.+166    	; 0x2c54 <stage_3+0xfc>
			
				state_s3=STAGE_GET_TIME;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	80 93 27 0d 	sts	0x0D27, r24	; 0x800d27 <state_s3>
			break;
    2bb4:	d3 cf       	rjmp	.-90     	; 0x2b5c <stage_3+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    2bb6:	8a ec       	ldi	r24, 0xCA	; 202
    2bb8:	9c e0       	ldi	r25, 0x0C	; 12
    2bba:	0e 94 b5 12 	call	0x256a	; 0x256a <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	4b c0       	rjmp	.+150    	; 0x2c58 <stage_3+0x100>
				state_s3=STAGE_START;
    2bc2:	82 e0       	ldi	r24, 0x02	; 2
    2bc4:	80 93 27 0d 	sts	0x0D27, r24	; 0x800d27 <state_s3>
			break;
    2bc8:	c9 cf       	rjmp	.-110    	; 0x2b5c <stage_3+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2bca:	0e 94 bd 34 	call	0x697a	; 0x697a <SCD30_start_sampling>
				ADC_start_sampling();
    2bce:	0e 94 ae 34 	call	0x695c	; 0x695c <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    2bd2:	83 e0       	ldi	r24, 0x03	; 3
    2bd4:	80 93 27 0d 	sts	0x0D27, r24	; 0x800d27 <state_s3>
			break;
    2bd8:	c1 cf       	rjmp	.-126    	; 0x2b5c <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2bda:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <SCD30_is_sampling_done>
    2bde:	88 23       	and	r24, r24
    2be0:	e9 f1       	breq	.+122    	; 0x2c5c <stage_3+0x104>
    2be2:	0e 94 bc 31 	call	0x6378	; 0x6378 <ADC_is_sampling_done>
    2be6:	88 23       	and	r24, r24
    2be8:	d9 f1       	breq	.+118    	; 0x2c60 <stage_3+0x108>
				state_s3=STAGE_UPDATE_MRPP;
    2bea:	85 e0       	ldi	r24, 0x05	; 5
    2bec:	80 93 27 0d 	sts	0x0D27, r24	; 0x800d27 <state_s3>
			break;
    2bf0:	b5 cf       	rjmp	.-150    	; 0x2b5c <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2bf2:	2d ee       	ldi	r18, 0xED	; 237
    2bf4:	3c e0       	ldi	r19, 0x0C	; 12
    2bf6:	40 91 ca 0c 	lds	r20, 0x0CCA	; 0x800cca <dt>
    2bfa:	50 91 cb 0c 	lds	r21, 0x0CCB	; 0x800ccb <dt+0x1>
    2bfe:	60 91 cc 0c 	lds	r22, 0x0CCC	; 0x800ccc <dt+0x2>
    2c02:	70 91 cd 0c 	lds	r23, 0x0CCD	; 0x800ccd <dt+0x3>
    2c06:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <dt+0x4>
    2c0a:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <dt+0x5>
    2c0e:	0e 94 8a 14 	call	0x2914	; 0x2914 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    2c12:	4c ec       	ldi	r20, 0xCC	; 204
    2c14:	59 e0       	ldi	r21, 0x09	; 9
    2c16:	6d ee       	ldi	r22, 0xED	; 237
    2c18:	7c e0       	ldi	r23, 0x0C	; 12
    2c1a:	87 e0       	ldi	r24, 0x07	; 7
    2c1c:	0e 94 7d 23 	call	0x46fa	; 0x46fa <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    2c20:	44 e0       	ldi	r20, 0x04	; 4
    2c22:	59 e0       	ldi	r21, 0x09	; 9
    2c24:	6d ee       	ldi	r22, 0xED	; 237
    2c26:	7c e0       	ldi	r23, 0x0C	; 12
    2c28:	86 e0       	ldi	r24, 0x06	; 6
    2c2a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    2c2e:	84 e0       	ldi	r24, 0x04	; 4
    2c30:	80 93 27 0d 	sts	0x0D27, r24	; 0x800d27 <state_s3>
			break;
    2c34:	93 cf       	rjmp	.-218    	; 0x2b5c <stage_3+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S3 DE-INIT");
    2c36:	66 ed       	ldi	r22, 0xD6	; 214
    2c38:	72 e0       	ldi	r23, 0x02	; 2
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				SCD30_deinit_sampling();
    2c40:	0e 94 f7 33 	call	0x67ee	; 0x67ee <SCD30_deinit_sampling>
				SCD30_sensor_off();
    2c44:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <SCD30_sensor_off>
				ADC_deinit_sampling();
    2c48:	0e 94 2c 33 	call	0x6658	; 0x6658 <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    2c4c:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <ADC_meth_sens_power_off>
				return STAGE_DONE;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	07 c0       	rjmp	.+14     	; 0x2c62 <stage_3+0x10a>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2c54:	83 e0       	ldi	r24, 0x03	; 3
    2c56:	05 c0       	rjmp	.+10     	; 0x2c62 <stage_3+0x10a>
				state_s3=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	03 c0       	rjmp	.+6      	; 0x2c62 <stage_3+0x10a>
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	01 c0       	rjmp	.+2      	; 0x2c62 <stage_3+0x10a>
    2c60:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	08 95       	ret

Disassembly of section .text.decode_body_response:

00004c48 <decode_body_response>:
static LM_STATUS send_body(int16_t bodyIndex){
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    4c48:	0f 93       	push	r16
    4c4a:	1f 93       	push	r17
    4c4c:	cf 93       	push	r28
    4c4e:	8c 01       	movw	r16, r24
    4c50:	c4 2f       	mov	r28, r20
	switch(status){
    4c52:	62 30       	cpi	r22, 0x02	; 2
    4c54:	d9 f0       	breq	.+54     	; 0x4c8c <decode_body_response+0x44>
    4c56:	18 f4       	brcc	.+6      	; 0x4c5e <decode_body_response+0x16>
    4c58:	66 23       	and	r22, r22
    4c5a:	29 f0       	breq	.+10     	; 0x4c66 <decode_body_response+0x1e>
    4c5c:	1e c0       	rjmp	.+60     	; 0x4c9a <decode_body_response+0x52>
    4c5e:	64 50       	subi	r22, 0x04	; 4
    4c60:	62 30       	cpi	r22, 0x02	; 2
    4c62:	50 f0       	brcs	.+20     	; 0x4c78 <decode_body_response+0x30>
    4c64:	1a c0       	rjmp	.+52     	; 0x4c9a <decode_body_response+0x52>
		case LM_STATUS_SUCCESS:
			MRPP_set_body_sent(bodyIndex);
    4c66:	0e 94 7d 34 	call	0x68fa	; 0x68fa <MRPP_set_body_sent>
			print_debug("res: success");
    4c6a:	68 ee       	ldi	r22, 0xE8	; 232
    4c6c:	72 e0       	ldi	r23, 0x02	; 2
    4c6e:	80 e0       	ldi	r24, 0x00	; 0
    4c70:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
			return success;
    4c74:	8c 2f       	mov	r24, r28
    4c76:	12 c0       	rjmp	.+36     	; 0x4c9c <decode_body_response+0x54>
		
		
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			print_debug("res: mac err");
    4c78:	65 ef       	ldi	r22, 0xF5	; 245
    4c7a:	72 e0       	ldi	r23, 0x02	; 2
    4c7c:	80 e0       	ldi	r24, 0x00	; 0
    4c7e:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
			MRPP_set_body_sent(bodyIndex);
    4c82:	c8 01       	movw	r24, r16
    4c84:	0e 94 7d 34 	call	0x68fa	; 0x68fa <MRPP_set_body_sent>
			return success;
    4c88:	8c 2f       	mov	r24, r28
    4c8a:	08 c0       	rjmp	.+16     	; 0x4c9c <decode_body_response+0x54>
		
		case LM_STATUS_TRY_AGAIN:
			print_debug("res: try again");
    4c8c:	62 e0       	ldi	r22, 0x02	; 2
    4c8e:	73 e0       	ldi	r23, 0x03	; 3
    4c90:	80 e0       	ldi	r24, 0x00	; 0
    4c92:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
			return success;
    4c96:	8c 2f       	mov	r24, r28
    4c98:	01 c0       	rjmp	.+2      	; 0x4c9c <decode_body_response+0x54>
		
		default:
			return MAINPG_FATAL_ERROR;
    4c9a:	86 e1       	ldi	r24, 0x16	; 22
	}
}
    4c9c:	cf 91       	pop	r28
    4c9e:	1f 91       	pop	r17
    4ca0:	0f 91       	pop	r16
    4ca2:	08 95       	ret

Disassembly of section .text.MAINPG_start:

0000104e <MAINPG_start>:

static void send_msg(const char msg[]);

static bool fromSleep=false;

void MAINPG_start(){
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
    105a:	c0 e0       	ldi	r28, 0x00	; 0
    105c:	1a c0       	rjmp	.+52     	; 0x1092 <MAINPG_start+0x44>
				PM_HAL_SCD30_power_init();
				PM_HAL_LED_power_init();
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    105e:	c6 e0       	ldi	r28, 0x06	; 6
    1060:	18 c0       	rjmp	.+48     	; 0x1092 <MAINPG_start+0x44>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
    1062:	c5 e0       	ldi	r28, 0x05	; 5
    1064:	16 c0       	rjmp	.+44     	; 0x1092 <MAINPG_start+0x44>
    1066:	c5 e0       	ldi	r28, 0x05	; 5
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <MAINPG_start+0x44>
    106a:	c5 e0       	ldi	r28, 0x05	; 5
    106c:	12 c0       	rjmp	.+36     	; 0x1092 <MAINPG_start+0x44>
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
    106e:	c5 e0       	ldi	r28, 0x05	; 5
    1070:	10 c0       	rjmp	.+32     	; 0x1092 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1072:	c6 e1       	ldi	r28, 0x16	; 22
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <MAINPG_start+0x44>
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    1076:	c6 e1       	ldi	r28, 0x16	; 22
    1078:	0c c0       	rjmp	.+24     	; 0x1092 <MAINPG_start+0x44>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    107a:	c6 e1       	ldi	r28, 0x16	; 22
    107c:	0a c0       	rjmp	.+20     	; 0x1092 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    107e:	c6 e1       	ldi	r28, 0x16	; 22
    1080:	08 c0       	rjmp	.+16     	; 0x1092 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1082:	c6 e1       	ldi	r28, 0x16	; 22
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <MAINPG_start+0x44>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
    1086:	cd 2f       	mov	r28, r29
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <MAINPG_start+0x44>
    108a:	cd 2f       	mov	r28, r29
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
    108e:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
    1090:	c1 e1       	ldi	r28, 0x11	; 17
	STAGE_STATUS stageStatus;
	uint8_t groupId=0;
	

	while(1){
		switch(state){
    1092:	ec 2f       	mov	r30, r28
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	e8 31       	cpi	r30, 0x18	; 24
    1098:	f1 05       	cpc	r31, r1
    109a:	d8 f7       	brcc	.-10     	; 0x1092 <MAINPG_start+0x44>
    109c:	e2 5a       	subi	r30, 0xA2	; 162
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	0c 94 89 34 	jmp	0x6912	; 0x6912 <__tablejump2__>
			case MAINPG_INIT_HW:
				print_debug("State: INIT HW");
    10a4:	61 e1       	ldi	r22, 0x11	; 17
    10a6:	73 e0       	ldi	r23, 0x03	; 3
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				//Reset variables
				state_s0=STAGE_INIT;
    10ae:	10 92 2a 0d 	sts	0x0D2A, r1	; 0x800d2a <state_s0>
				state_s1=STAGE_INIT;
    10b2:	10 92 29 0d 	sts	0x0D29, r1	; 0x800d29 <state_s1>
				state_s2=STAGE_INIT;
    10b6:	10 92 28 0d 	sts	0x0D28, r1	; 0x800d28 <state_s2>
				state_s3=STAGE_INIT;
    10ba:	10 92 27 0d 	sts	0x0D27, r1	; 0x800d27 <state_s3>
				bodyIndex=-1;
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	9f ef       	ldi	r25, 0xFF	; 255
    10c2:	90 93 12 0d 	sts	0x0D12, r25	; 0x800d12 <bodyIndex+0x1>
    10c6:	80 93 11 0d 	sts	0x0D11, r24	; 0x800d11 <bodyIndex>
				
				uart0_hal_init();
    10ca:	0e 94 5f 2c 	call	0x58be	; 0x58be <uart0_hal_init>
				uart1_hal_init();
    10ce:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <uart1_hal_init>
				TWI_HAL_init();
    10d2:	0e 94 40 33 	call	0x6680	; 0x6680 <TWI_HAL_init>
				TC2_HAL_init();
    10d6:	0e 94 13 31 	call	0x6226	; 0x6226 <TC2_HAL_init>
				rn2483_init();
    10da:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <rn2483_init>
				SCD30_HAL_init();
    10de:	0e 94 b1 33 	call	0x6762	; 0x6762 <SCD30_HAL_init>
				PM_HAL_adc_power_init();
    10e2:	0e 94 8e 33 	call	0x671c	; 0x671c <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
    10e6:	0e 94 95 33 	call	0x672a	; 0x672a <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
    10ea:	0e 94 a3 33 	call	0x6746	; 0x6746 <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
    10ee:	0e 94 9c 33 	call	0x6738	; 0x6738 <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
    10f2:	0e 94 aa 33 	call	0x6754	; 0x6754 <PM_HAL_LED_power_init>
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    10f6:	80 91 23 0d 	lds	r24, 0x0D23	; 0x800d23 <fromSleep>
    10fa:	81 11       	cpse	r24, r1
    10fc:	b0 cf       	rjmp	.-160    	; 0x105e <MAINPG_start+0x10>
    10fe:	c1 e0       	ldi	r28, 0x01	; 1
    1100:	c8 cf       	rjmp	.-112    	; 0x1092 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
    1102:	60 e2       	ldi	r22, 0x20	; 32
    1104:	73 e0       	ldi	r23, 0x03	; 3
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
    110c:	0e 94 9b 32 	call	0x6536	; 0x6536 <EM_has_deveui>
    1110:	88 23       	and	r24, r24
    1112:	09 f4       	brne	.+2      	; 0x1116 <__stack+0x17>
    1114:	a6 cf       	rjmp	.-180    	; 0x1062 <MAINPG_start+0x14>
    1116:	0e 94 a6 32 	call	0x654c	; 0x654c <EM_has_appeui>
    111a:	88 23       	and	r24, r24
    111c:	09 f4       	brne	.+2      	; 0x1120 <__stack+0x21>
    111e:	a3 cf       	rjmp	.-186    	; 0x1066 <MAINPG_start+0x18>
    1120:	0e 94 b1 32 	call	0x6562	; 0x6562 <EM_has_appkey>
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <__stack+0x2b>
    1128:	a0 cf       	rjmp	.-192    	; 0x106a <MAINPG_start+0x1c>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
    112a:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <read_eeprom>
    112e:	88 23       	and	r24, r24
    1130:	09 f4       	brne	.+2      	; 0x1134 <__stack+0x35>
    1132:	9d cf       	rjmp	.-198    	; 0x106e <MAINPG_start+0x20>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
    1134:	c2 e0       	ldi	r28, 0x02	; 2
    1136:	ad cf       	rjmp	.-166    	; 0x1092 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("State: JOIN LORA");
    1138:	6e e2       	ldi	r22, 0x2E	; 46
    113a:	73 e0       	ldi	r23, 0x03	; 3
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				LED_start_try_join();
    1142:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <LED_start_try_join>
				lmStatus=join_lora();
    1146:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <join_lora>
    114a:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
    114c:	0e 94 86 33 	call	0x670c	; 0x670c <LED_stop_try_join>
				state=decode_join_response(lmStatus);
    1150:	8c 2f       	mov	r24, r28
    1152:	0e 94 02 32 	call	0x6404	; 0x6404 <decode_join_response>
    1156:	c8 2f       	mov	r28, r24
			break;
    1158:	9c cf       	rjmp	.-200    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				print_debug("State: JOIN SUCCESS");
    115a:	6f e3       	ldi	r22, 0x3F	; 63
    115c:	73 e0       	ldi	r23, 0x03	; 3
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				LED_join_success();
    1164:	0e 94 21 2c 	call	0x5842	; 0x5842 <LED_join_success>
				state=MAINPG_INIT_MODULES;
    1168:	ca e0       	ldi	r28, 0x0A	; 10
			break;
    116a:	93 cf       	rjmp	.-218    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
    116c:	63 e5       	ldi	r22, 0x53	; 83
    116e:	73 e0       	ldi	r23, 0x03	; 3
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				lmStatus=LM_wake_up();
    1176:	0e 94 10 35 	call	0x6a20	; 0x6a20 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    117a:	81 11       	cpse	r24, r1
    117c:	7a cf       	rjmp	.-268    	; 0x1072 <MAINPG_start+0x24>
    117e:	ca e0       	ldi	r28, 0x0A	; 10
    1180:	88 cf       	rjmp	.-240    	; 0x1092 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("State: LORA TRY AGAIN");
    1182:	67 e6       	ldi	r22, 0x67	; 103
    1184:	73 e0       	ldi	r23, 0x03	; 3
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				LED_join_denied();
    118c:	0e 94 e4 34 	call	0x69c8	; 0x69c8 <LED_join_denied>
    1190:	2f ef       	ldi	r18, 0xFF	; 255
    1192:	33 eb       	ldi	r19, 0xB3	; 179
    1194:	84 ec       	ldi	r24, 0xC4	; 196
    1196:	94 e0       	ldi	r25, 0x04	; 4
    1198:	21 50       	subi	r18, 0x01	; 1
    119a:	30 40       	sbci	r19, 0x00	; 0
    119c:	80 40       	sbci	r24, 0x00	; 0
    119e:	90 40       	sbci	r25, 0x00	; 0
    11a0:	d9 f7       	brne	.-10     	; 0x1198 <__stack+0x99>
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <__stack+0xa5>
    11a4:	00 00       	nop
				_delay_ms(60000);
				state=MAINPG_LORA_JOIN_NETWORK;
    11a6:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    11a8:	74 cf       	rjmp	.-280    	; 0x1092 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Initialize modules                                                   */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
    11aa:	6d e7       	ldi	r22, 0x7D	; 125
    11ac:	73 e0       	ldi	r23, 0x03	; 3
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    11b4:	e0 90 e1 0c 	lds	r14, 0x0CE1	; 0x800ce1 <ppmx>
    11b8:	f0 90 e2 0c 	lds	r15, 0x0CE2	; 0x800ce2 <ppmx+0x1>
    11bc:	00 91 e3 0c 	lds	r16, 0x0CE3	; 0x800ce3 <ppmx+0x2>
    11c0:	10 91 e4 0c 	lds	r17, 0x0CE4	; 0x800ce4 <ppmx+0x3>
    11c4:	20 91 e5 0c 	lds	r18, 0x0CE5	; 0x800ce5 <rrlx>
    11c8:	30 91 e6 0c 	lds	r19, 0x0CE6	; 0x800ce6 <rrlx+0x1>
    11cc:	40 91 e7 0c 	lds	r20, 0x0CE7	; 0x800ce7 <rrlx+0x2>
    11d0:	50 91 e8 0c 	lds	r21, 0x0CE8	; 0x800ce8 <rrlx+0x3>
    11d4:	60 91 e9 0c 	lds	r22, 0x0CE9	; 0x800ce9 <vccx>
    11d8:	70 91 ea 0c 	lds	r23, 0x0CEA	; 0x800cea <vccx+0x1>
    11dc:	80 91 eb 0c 	lds	r24, 0x0CEB	; 0x800ceb <vccx+0x2>
    11e0:	90 91 ec 0c 	lds	r25, 0x0CEC	; 0x800cec <vccx+0x3>
    11e4:	0e 94 df 2b 	call	0x57be	; 0x57be <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
    11e8:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    11ec:	81 11       	cpse	r24, r1
    11ee:	43 cf       	rjmp	.-378    	; 0x1076 <MAINPG_start+0x28>
    11f0:	c7 e0       	ldi	r28, 0x07	; 7
    11f2:	4f cf       	rjmp	.-354    	; 0x1092 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
    11f4:	61 e9       	ldi	r22, 0x91	; 145
    11f6:	73 e0       	ldi	r23, 0x03	; 3
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	0e 94 d7 27 	call	0x4fae	; 0x4fae <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    1204:	81 11       	cpse	r24, r1
    1206:	39 cf       	rjmp	.-398    	; 0x107a <MAINPG_start+0x2c>
    1208:	c9 e0       	ldi	r28, 0x09	; 9
    120a:	43 cf       	rjmp	.-378    	; 0x1092 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
    120c:	61 ea       	ldi	r22, 0xA1	; 161
    120e:	73 e0       	ldi	r23, 0x03	; 3
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
    1216:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    121a:	81 11       	cpse	r24, r1
    121c:	30 cf       	rjmp	.-416    	; 0x107e <MAINPG_start+0x30>
    121e:	c8 e0       	ldi	r28, 0x08	; 8
    1220:	38 cf       	rjmp	.-400    	; 0x1092 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
    1222:	62 eb       	ldi	r22, 0xB2	; 178
    1224:	73 e0       	ldi	r23, 0x03	; 3
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				rtcStatus=set_wakeup();
    122c:	0e 94 c2 34 	call	0x6984	; 0x6984 <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1230:	81 11       	cpse	r24, r1
    1232:	27 cf       	rjmp	.-434    	; 0x1082 <MAINPG_start+0x34>
    1234:	cb e0       	ldi	r28, 0x0B	; 11
    1236:	2d cf       	rjmp	.-422    	; 0x1092 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("State: MRPP INIT");
    1238:	68 ec       	ldi	r22, 0xC8	; 200
    123a:	73 e0       	ldi	r23, 0x03	; 3
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				groupId=EM_get_group_id();
    1242:	0e 94 65 34 	call	0x68ca	; 0x68ca <EM_get_group_id>
				groupId=MRPP_init_group(cols, N_COLLECTIONS, groupId);
    1246:	48 2f       	mov	r20, r24
    1248:	67 e0       	ldi	r22, 0x07	; 7
    124a:	86 e4       	ldi	r24, 0x46	; 70
    124c:	9c e0       	ldi	r25, 0x0C	; 12
    124e:	0e 94 1d 32 	call	0x643a	; 0x643a <MRPP_init_group>
				EM_set_group_id(groupId);
    1252:	0e 94 5f 34 	call	0x68be	; 0x68be <EM_set_group_id>
				state=MAINPG_SEND_HEADER;
    1256:	cc e0       	ldi	r28, 0x0C	; 12
			break;
    1258:	1c cf       	rjmp	.-456    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
    125a:	0e 94 b3 34 	call	0x6966	; 0x6966 <LM_is_free>
    125e:	88 23       	and	r24, r24
    1260:	09 f4       	brne	.+2      	; 0x1264 <__stack+0x165>
    1262:	17 cf       	rjmp	.-466    	; 0x1092 <MAINPG_start+0x44>
					state=MAINPG_SEND_HEADER;
					break;
				}
				print_debug("State: SEND HEADER");
    1264:	69 ed       	ldi	r22, 0xD9	; 217
    1266:	73 e0       	ldi	r23, 0x03	; 3
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				lmStatus=send_header();
    126e:	0e 94 44 32 	call	0x6488	; 0x6488 <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
    1272:	4c e0       	ldi	r20, 0x0C	; 12
    1274:	6d e0       	ldi	r22, 0x0D	; 13
    1276:	0e 94 8f 31 	call	0x631e	; 0x631e <decode_header_tail_response>
    127a:	c8 2f       	mov	r28, r24
			break;
    127c:	0a cf       	rjmp	.-492    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
    127e:	0e 94 8b 19 	call	0x3316	; 0x3316 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1282:	6e e0       	ldi	r22, 0x0E	; 14
    1284:	0e 94 bc 32 	call	0x6578	; 0x6578 <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
    1288:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    128a:	c8 2f       	mov	r28, r24
			break;
    128c:	02 cf       	rjmp	.-508    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
    128e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    1292:	6f e0       	ldi	r22, 0x0F	; 15
    1294:	0e 94 bc 32 	call	0x6578	; 0x6578 <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
    1298:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    129a:	c8 2f       	mov	r28, r24
			break;
    129c:	fa ce       	rjmp	.-524    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
    129e:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    12a2:	60 e1       	ldi	r22, 0x10	; 16
    12a4:	0e 94 bc 32 	call	0x6578	; 0x6578 <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
    12a8:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    12aa:	c8 2f       	mov	r28, r24
			break;
    12ac:	f2 ce       	rjmp	.-540    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
    12ae:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    12b2:	62 e1       	ldi	r22, 0x12	; 18
    12b4:	0e 94 bc 32 	call	0x6578	; 0x6578 <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
    12b8:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    12ba:	c8 2f       	mov	r28, r24
			break;
    12bc:	ea ce       	rjmp	.-556    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
    12be:	81 e1       	ldi	r24, 0x11	; 17
    12c0:	9d e0       	ldi	r25, 0x0D	; 13
    12c2:	0e 94 9d 30 	call	0x613a	; 0x613a <MRPP_is_body_package_ready>
    12c6:	88 23       	and	r24, r24
    12c8:	09 f4       	brne	.+2      	; 0x12cc <__stack+0x1cd>
    12ca:	dd ce       	rjmp	.-582    	; 0x1086 <MAINPG_start+0x38>
    12cc:	0e 94 b3 34 	call	0x6966	; 0x6966 <LM_is_free>
    12d0:	88 23       	and	r24, r24
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <__stack+0x1d7>
    12d4:	da ce       	rjmp	.-588    	; 0x108a <MAINPG_start+0x3c>
					print_debug("State: SEND DATA");
    12d6:	6c ee       	ldi	r22, 0xEC	; 236
    12d8:	73 e0       	ldi	r23, 0x03	; 3
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
					lmStatus=send_body(bodyIndex);
    12e0:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <bodyIndex>
    12e4:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <bodyIndex+0x1>
    12e8:	0e 94 51 32 	call	0x64a2	; 0x64a2 <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
    12ec:	4d 2f       	mov	r20, r29
    12ee:	68 2f       	mov	r22, r24
    12f0:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <bodyIndex>
    12f4:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <bodyIndex+0x1>
    12f8:	0e 94 24 26 	call	0x4c48	; 0x4c48 <decode_body_response>
    12fc:	c8 2f       	mov	r28, r24
    12fe:	c9 ce       	rjmp	.-622    	; 0x1092 <MAINPG_start+0x44>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
    1300:	0e 94 b8 34 	call	0x6970	; 0x6970 <MRPP_all_body_package_sent>
    1304:	88 23       	and	r24, r24
    1306:	09 f4       	brne	.+2      	; 0x130a <__stack+0x20b>
    1308:	c2 ce       	rjmp	.-636    	; 0x108e <MAINPG_start+0x40>
					state=MAINPG_SEND_TAIL;
    130a:	c3 e1       	ldi	r28, 0x13	; 19
    130c:	c2 ce       	rjmp	.-636    	; 0x1092 <MAINPG_start+0x44>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
    130e:	0e 94 b3 34 	call	0x6966	; 0x6966 <LM_is_free>
    1312:	88 23       	and	r24, r24
    1314:	09 f4       	brne	.+2      	; 0x1318 <__stack+0x219>
    1316:	bd ce       	rjmp	.-646    	; 0x1092 <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
					break;
				}
				print_debug("State: SEND TAIL");
    1318:	6d ef       	ldi	r22, 0xFD	; 253
    131a:	73 e0       	ldi	r23, 0x03	; 3
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				lmStatus=send_tail();
    1322:	0e 94 5e 32 	call	0x64bc	; 0x64bc <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
    1326:	43 e1       	ldi	r20, 0x13	; 19
    1328:	64 e1       	ldi	r22, 0x14	; 20
    132a:	0e 94 8f 31 	call	0x631e	; 0x631e <decode_header_tail_response>
    132e:	c8 2f       	mov	r28, r24
				
			break;
    1330:	b0 ce       	rjmp	.-672    	; 0x1092 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				print_debug("State: SETUP SLEEP");
    1332:	6e e0       	ldi	r22, 0x0E	; 14
    1334:	74 e0       	ldi	r23, 0x04	; 4
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				lmStatus=LM_put_to_sleep();
    133c:	0e 94 52 33 	call	0x66a4	; 0x66a4 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	81 11       	cpse	r24, r1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	90 93 23 0d 	sts	0x0D23, r25	; 0x800d23 <fromSleep>
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	0e 94 e6 32 	call	0x65cc	; 0x65cc <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <PM_HAL_LED_power>
				TC2_HAL_kill();
    1368:	0e 94 9a 34 	call	0x6934	; 0x6934 <TC2_HAL_kill>
				
				state=MAINPG_SLEEP;
    136c:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    136e:	91 ce       	rjmp	.-734    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_SLEEP:
				print_debug("State: SLEEP");
    1370:	61 e2       	ldi	r22, 0x21	; 33
    1372:	74 e0       	ldi	r23, 0x04	; 4
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				PM_HAL_enter_power_down();
    137a:	0e 94 41 2c 	call	0x5882	; 0x5882 <PM_HAL_enter_power_down>
				print_debug("State: SLEEP -> AWAKE");
    137e:	6e e2       	ldi	r22, 0x2E	; 46
    1380:	74 e0       	ldi	r23, 0x04	; 4
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				state=MAINPG_INIT_HW;
    1388:	c0 e0       	ldi	r28, 0x00	; 0
			break;
    138a:	83 ce       	rjmp	.-762    	; 0x1092 <MAINPG_start+0x44>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_CONF_ERR:
				print_debug("State: CONF ERR");
    138c:	64 e4       	ldi	r22, 0x44	; 68
    138e:	74 e0       	ldi	r23, 0x04	; 4
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				LED_conf_err();
    1396:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <LED_conf_err>
				print_debug("Conf err\n\r");
    139a:	64 e5       	ldi	r22, 0x54	; 84
    139c:	74 e0       	ldi	r23, 0x04	; 4
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				state=MAINPG_END;
    13a4:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    13a6:	75 ce       	rjmp	.-790    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_FATAL_ERROR:
				print_debug("State: FATAL ERR");
    13a8:	6f e5       	ldi	r22, 0x5F	; 95
    13aa:	74 e0       	ldi	r23, 0x04	; 4
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				LED_fatal_err();
    13b2:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <LED_fatal_err>
				fromSleep=false;
    13b6:	10 92 23 0d 	sts	0x0D23, r1	; 0x800d23 <fromSleep>
				state=MAINPG_END;
    13ba:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    13bc:	6a ce       	rjmp	.-812    	; 0x1092 <MAINPG_start+0x44>
			
			case MAINPG_END:
				print_debug("State: END");
    13be:	60 e7       	ldi	r22, 0x70	; 112
    13c0:	74 e0       	ldi	r23, 0x04	; 4
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0e 94 83 32 	call	0x6506	; 0x6506 <send_msg>
				return;
			break;	
		}
	}
}
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	08 95       	ret

Disassembly of section .text.calc_crc8:

00005ba4 <calc_crc8>:
 *  Author: Christopher S. Nielsen
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    5ba4:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5ba6:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    5ba8:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    5baa:	14 c0       	rjmp	.+40     	; 0x5bd4 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    5bac:	fa 01       	movw	r30, r20
    5bae:	e3 0f       	add	r30, r19
    5bb0:	f1 1d       	adc	r31, r1
    5bb2:	90 81       	ld	r25, Z
    5bb4:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    5bb6:	28 e0       	ldi	r18, 0x08	; 8
    5bb8:	0a c0       	rjmp	.+20     	; 0x5bce <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    5bba:	88 23       	and	r24, r24
    5bbc:	34 f4       	brge	.+12     	; 0x5bca <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    5bbe:	90 e0       	ldi	r25, 0x00	; 0
    5bc0:	88 0f       	add	r24, r24
    5bc2:	99 1f       	adc	r25, r25
    5bc4:	91 e3       	ldi	r25, 0x31	; 49
    5bc6:	89 27       	eor	r24, r25
    5bc8:	01 c0       	rjmp	.+2      	; 0x5bcc <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    5bca:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    5bcc:	21 50       	subi	r18, 0x01	; 1
    5bce:	21 11       	cpse	r18, r1
    5bd0:	f4 cf       	rjmp	.-24     	; 0x5bba <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5bd2:	3f 5f       	subi	r19, 0xFF	; 255
    5bd4:	36 17       	cp	r19, r22
    5bd6:	50 f3       	brcs	.-44     	; 0x5bac <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    5bd8:	08 95       	ret

Disassembly of section .text.get_decimal:

00003886 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    3886:	cf 92       	push	r12
    3888:	df 92       	push	r13
    388a:	ef 92       	push	r14
    388c:	ff 92       	push	r15
    388e:	0f 93       	push	r16
    3890:	1f 93       	push	r17
    3892:	cf 93       	push	r28
    3894:	df 93       	push	r29
    3896:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    3898:	10 e0       	ldi	r17, 0x00	; 0
    389a:	08 c0       	rjmp	.+16     	; 0x38ac <get_decimal+0x26>
	{
		if(str[i]=='.'){
    389c:	cc 0d       	add	r28, r12
    389e:	dd 1d       	adc	r29, r13
    38a0:	88 81       	ld	r24, Y
    38a2:	8e 32       	cpi	r24, 0x2E	; 46
    38a4:	11 f4       	brne	.+4      	; 0x38aa <get_decimal+0x24>
			index=i+1;
    38a6:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    38a8:	0c c0       	rjmp	.+24     	; 0x38c2 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    38aa:	1f 5f       	subi	r17, 0xFF	; 255
    38ac:	c1 2f       	mov	r28, r17
    38ae:	d0 e0       	ldi	r29, 0x00	; 0
    38b0:	b6 01       	movw	r22, r12
    38b2:	80 e8       	ldi	r24, 0x80	; 128
    38b4:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	c8 17       	cp	r28, r24
    38bc:	d9 07       	cpc	r29, r25
    38be:	70 f3       	brcs	.-36     	; 0x389c <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    38c0:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    38c2:	11 23       	and	r17, r17
    38c4:	71 f1       	breq	.+92     	; 0x3922 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    38c6:	c1 0e       	add	r12, r17
    38c8:	d1 1c       	adc	r13, r1
    38ca:	80 e8       	ldi	r24, 0x80	; 128
    38cc:	e8 2e       	mov	r14, r24
    38ce:	8e 2d       	mov	r24, r14
    38d0:	b6 01       	movw	r22, r12
    38d2:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    38d6:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    38d8:	8e 2d       	mov	r24, r14
    38da:	b6 01       	movw	r22, r12
    38dc:	0e 94 00 35 	call	0x6a00	; 0x6a00 <atoi>
    38e0:	8c 01       	movw	r16, r24
	float divisor=1;
    38e2:	0f 2e       	mov	r0, r31
    38e4:	c1 2c       	mov	r12, r1
    38e6:	d1 2c       	mov	r13, r1
    38e8:	f0 e8       	ldi	r31, 0x80	; 128
    38ea:	ef 2e       	mov	r14, r31
    38ec:	ff e3       	ldi	r31, 0x3F	; 63
    38ee:	ff 2e       	mov	r15, r31
    38f0:	f0 2d       	mov	r31, r0
	
	while(len>0){
    38f2:	0b c0       	rjmp	.+22     	; 0x390a <get_decimal+0x84>
		divisor*=10;
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 e2       	ldi	r20, 0x20	; 32
    38fa:	51 e4       	ldi	r21, 0x41	; 65
    38fc:	c7 01       	movw	r24, r14
    38fe:	b6 01       	movw	r22, r12
    3900:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <__mulsf3>
    3904:	6b 01       	movw	r12, r22
    3906:	7c 01       	movw	r14, r24
		len--;
    3908:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    390a:	c1 11       	cpse	r28, r1
    390c:	f3 cf       	rjmp	.-26     	; 0x38f4 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    390e:	b8 01       	movw	r22, r16
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	0e 94 a0 21 	call	0x4340	; 0x4340 <__floatunsisf>
    3918:	a7 01       	movw	r20, r14
    391a:	96 01       	movw	r18, r12
    391c:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <__divsf3>
    3920:	03 c0       	rjmp	.+6      	; 0x3928 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	70 e0       	ldi	r23, 0x00	; 0
    3926:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    3928:	df 91       	pop	r29
    392a:	cf 91       	pop	r28
    392c:	1f 91       	pop	r17
    392e:	0f 91       	pop	r16
    3930:	ff 90       	pop	r15
    3932:	ef 90       	pop	r14
    3934:	df 90       	pop	r13
    3936:	cf 90       	pop	r12
    3938:	08 95       	ret

Disassembly of section .text.str2flaot:

00005186 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    5186:	cf 92       	push	r12
    5188:	df 92       	push	r13
    518a:	ef 92       	push	r14
    518c:	ff 92       	push	r15
    518e:	0f 93       	push	r16
    5190:	1f 93       	push	r17
    5192:	cf 93       	push	r28
    5194:	df 93       	push	r29
    5196:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    5198:	bc 01       	movw	r22, r24
    519a:	80 e8       	ldi	r24, 0x80	; 128
    519c:	0e 94 00 35 	call	0x6a00	; 0x6a00 <atoi>
    51a0:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    51a2:	c8 01       	movw	r24, r16
    51a4:	0e 94 43 1c 	call	0x3886	; 0x3886 <get_decimal>
    51a8:	6b 01       	movw	r12, r22
    51aa:	7c 01       	movw	r14, r24
	return intVal+deci;
    51ac:	be 01       	movw	r22, r28
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	0e 94 a0 21 	call	0x4340	; 0x4340 <__floatunsisf>
    51b6:	9b 01       	movw	r18, r22
    51b8:	ac 01       	movw	r20, r24
    51ba:	c7 01       	movw	r24, r14
    51bc:	b6 01       	movw	r22, r12
    51be:	0e 94 ff 33 	call	0x67fe	; 0x67fe <__addsf3>
	
	
}
    51c2:	df 91       	pop	r29
    51c4:	cf 91       	pop	r28
    51c6:	1f 91       	pop	r17
    51c8:	0f 91       	pop	r16
    51ca:	ff 90       	pop	r15
    51cc:	ef 90       	pop	r14
    51ce:	df 90       	pop	r13
    51d0:	cf 90       	pop	r12
    51d2:	08 95       	ret

Disassembly of section .text.is_float:

00004db0 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    4db0:	ef 92       	push	r14
    4db2:	ff 92       	push	r15
    4db4:	0f 93       	push	r16
    4db6:	1f 93       	push	r17
    4db8:	cf 93       	push	r28
    4dba:	df 93       	push	r29
    4dbc:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4dbe:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    4dc0:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    4dc2:	0d c0       	rjmp	.+26     	; 0x4dde <is_float+0x2e>
	{
		if(str[i]=='.'){
    4dc4:	ce 0d       	add	r28, r14
    4dc6:	df 1d       	adc	r29, r15
    4dc8:	88 81       	ld	r24, Y
    4dca:	8e 32       	cpi	r24, 0x2E	; 46
    4dcc:	21 f4       	brne	.+8      	; 0x4dd6 <is_float+0x26>
			if (got_dot)
    4dce:	01 11       	cpse	r16, r1
    4dd0:	11 c0       	rjmp	.+34     	; 0x4df4 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    4dd2:	01 e0       	ldi	r16, 0x01	; 1
    4dd4:	03 c0       	rjmp	.+6      	; 0x4ddc <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4dd6:	80 53       	subi	r24, 0x30	; 48
    4dd8:	8a 30       	cpi	r24, 0x0A	; 10
    4dda:	70 f4       	brcc	.+28     	; 0x4df8 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4ddc:	1f 5f       	subi	r17, 0xFF	; 255
    4dde:	c1 2f       	mov	r28, r17
    4de0:	d0 e0       	ldi	r29, 0x00	; 0
    4de2:	b7 01       	movw	r22, r14
    4de4:	80 e8       	ldi	r24, 0x80	; 128
    4de6:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <strlen>
    4dea:	c8 17       	cp	r28, r24
    4dec:	d9 07       	cpc	r29, r25
    4dee:	50 f3       	brcs	.-44     	; 0x4dc4 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    4df0:	81 e0       	ldi	r24, 0x01	; 1
    4df2:	03 c0       	rjmp	.+6      	; 0x4dfa <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    4df4:	80 e0       	ldi	r24, 0x00	; 0
    4df6:	01 c0       	rjmp	.+2      	; 0x4dfa <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4df8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    4dfa:	df 91       	pop	r29
    4dfc:	cf 91       	pop	r28
    4dfe:	1f 91       	pop	r17
    4e00:	0f 91       	pop	r16
    4e02:	ff 90       	pop	r15
    4e04:	ef 90       	pop	r14
    4e06:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000067fc <__subsf3>:
    67fc:	50 58       	subi	r21, 0x80	; 128

000067fe <__addsf3>:
    67fe:	bb 27       	eor	r27, r27
    6800:	aa 27       	eor	r26, r26
    6802:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__addsf3x>
    6806:	0c 94 f2 30 	jmp	0x61e4	; 0x61e4 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000034c6 <__addsf3x>:
    34c6:	11 c0       	rjmp	.+34     	; 0x34ea <__addsf3x+0x24>
    34c8:	0e 94 05 34 	call	0x680a	; 0x680a <__fp_pscA>
    34cc:	38 f0       	brcs	.+14     	; 0x34dc <__addsf3x+0x16>
    34ce:	0e 94 0c 34 	call	0x6818	; 0x6818 <__fp_pscB>
    34d2:	20 f0       	brcs	.+8      	; 0x34dc <__addsf3x+0x16>
    34d4:	39 f4       	brne	.+14     	; 0x34e4 <__addsf3x+0x1e>
    34d6:	9f 3f       	cpi	r25, 0xFF	; 255
    34d8:	19 f4       	brne	.+6      	; 0x34e0 <__addsf3x+0x1a>
    34da:	26 f4       	brtc	.+8      	; 0x34e4 <__addsf3x+0x1e>
    34dc:	0c 94 1c 35 	jmp	0x6a38	; 0x6a38 <__fp_nan>
    34e0:	0e f4       	brtc	.+2      	; 0x34e4 <__addsf3x+0x1e>
    34e2:	e0 95       	com	r30
    34e4:	e7 fb       	bst	r30, 7
    34e6:	0c 94 83 34 	jmp	0x6906	; 0x6906 <__fp_inf>
    34ea:	e9 2f       	mov	r30, r25
    34ec:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <__fp_split3>
    34f0:	58 f3       	brcs	.-42     	; 0x34c8 <__addsf3x+0x2>
    34f2:	ba 17       	cp	r27, r26
    34f4:	62 07       	cpc	r22, r18
    34f6:	73 07       	cpc	r23, r19
    34f8:	84 07       	cpc	r24, r20
    34fa:	95 07       	cpc	r25, r21
    34fc:	20 f0       	brcs	.+8      	; 0x3506 <__addsf3x+0x40>
    34fe:	79 f4       	brne	.+30     	; 0x351e <__addsf3x+0x58>
    3500:	a6 f5       	brtc	.+104    	; 0x356a <__addsf3x+0xa4>
    3502:	0c 94 13 34 	jmp	0x6826	; 0x6826 <__fp_zero>
    3506:	0e f4       	brtc	.+2      	; 0x350a <__addsf3x+0x44>
    3508:	e0 95       	com	r30
    350a:	0b 2e       	mov	r0, r27
    350c:	ba 2f       	mov	r27, r26
    350e:	a0 2d       	mov	r26, r0
    3510:	0b 01       	movw	r0, r22
    3512:	b9 01       	movw	r22, r18
    3514:	90 01       	movw	r18, r0
    3516:	0c 01       	movw	r0, r24
    3518:	ca 01       	movw	r24, r20
    351a:	a0 01       	movw	r20, r0
    351c:	11 24       	eor	r1, r1
    351e:	ff 27       	eor	r31, r31
    3520:	59 1b       	sub	r21, r25
    3522:	99 f0       	breq	.+38     	; 0x354a <__addsf3x+0x84>
    3524:	59 3f       	cpi	r21, 0xF9	; 249
    3526:	50 f4       	brcc	.+20     	; 0x353c <__addsf3x+0x76>
    3528:	50 3e       	cpi	r21, 0xE0	; 224
    352a:	68 f1       	brcs	.+90     	; 0x3586 <__addsf3x+0xc0>
    352c:	1a 16       	cp	r1, r26
    352e:	f0 40       	sbci	r31, 0x00	; 0
    3530:	a2 2f       	mov	r26, r18
    3532:	23 2f       	mov	r18, r19
    3534:	34 2f       	mov	r19, r20
    3536:	44 27       	eor	r20, r20
    3538:	58 5f       	subi	r21, 0xF8	; 248
    353a:	f3 cf       	rjmp	.-26     	; 0x3522 <__addsf3x+0x5c>
    353c:	46 95       	lsr	r20
    353e:	37 95       	ror	r19
    3540:	27 95       	ror	r18
    3542:	a7 95       	ror	r26
    3544:	f0 40       	sbci	r31, 0x00	; 0
    3546:	53 95       	inc	r21
    3548:	c9 f7       	brne	.-14     	; 0x353c <__addsf3x+0x76>
    354a:	7e f4       	brtc	.+30     	; 0x356a <__addsf3x+0xa4>
    354c:	1f 16       	cp	r1, r31
    354e:	ba 0b       	sbc	r27, r26
    3550:	62 0b       	sbc	r22, r18
    3552:	73 0b       	sbc	r23, r19
    3554:	84 0b       	sbc	r24, r20
    3556:	ba f0       	brmi	.+46     	; 0x3586 <__addsf3x+0xc0>
    3558:	91 50       	subi	r25, 0x01	; 1
    355a:	a1 f0       	breq	.+40     	; 0x3584 <__addsf3x+0xbe>
    355c:	ff 0f       	add	r31, r31
    355e:	bb 1f       	adc	r27, r27
    3560:	66 1f       	adc	r22, r22
    3562:	77 1f       	adc	r23, r23
    3564:	88 1f       	adc	r24, r24
    3566:	c2 f7       	brpl	.-16     	; 0x3558 <__addsf3x+0x92>
    3568:	0e c0       	rjmp	.+28     	; 0x3586 <__addsf3x+0xc0>
    356a:	ba 0f       	add	r27, r26
    356c:	62 1f       	adc	r22, r18
    356e:	73 1f       	adc	r23, r19
    3570:	84 1f       	adc	r24, r20
    3572:	48 f4       	brcc	.+18     	; 0x3586 <__addsf3x+0xc0>
    3574:	87 95       	ror	r24
    3576:	77 95       	ror	r23
    3578:	67 95       	ror	r22
    357a:	b7 95       	ror	r27
    357c:	f7 95       	ror	r31
    357e:	9e 3f       	cpi	r25, 0xFE	; 254
    3580:	08 f0       	brcs	.+2      	; 0x3584 <__addsf3x+0xbe>
    3582:	b0 cf       	rjmp	.-160    	; 0x34e4 <__addsf3x+0x1e>
    3584:	93 95       	inc	r25
    3586:	88 0f       	add	r24, r24
    3588:	08 f0       	brcs	.+2      	; 0x358c <__addsf3x+0xc6>
    358a:	99 27       	eor	r25, r25
    358c:	ee 0f       	add	r30, r30
    358e:	97 95       	ror	r25
    3590:	87 95       	ror	r24
    3592:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000069f0 <__divsf3>:
    69f0:	0e 94 1c 19 	call	0x3238	; 0x3238 <__divsf3x>
    69f4:	0c 94 f2 30 	jmp	0x61e4	; 0x61e4 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003238 <__divsf3x>:
    3238:	10 c0       	rjmp	.+32     	; 0x325a <__divsf3x+0x22>
    323a:	0e 94 0c 34 	call	0x6818	; 0x6818 <__fp_pscB>
    323e:	58 f0       	brcs	.+22     	; 0x3256 <__divsf3x+0x1e>
    3240:	0e 94 05 34 	call	0x680a	; 0x680a <__fp_pscA>
    3244:	40 f0       	brcs	.+16     	; 0x3256 <__divsf3x+0x1e>
    3246:	29 f4       	brne	.+10     	; 0x3252 <__divsf3x+0x1a>
    3248:	5f 3f       	cpi	r21, 0xFF	; 255
    324a:	29 f0       	breq	.+10     	; 0x3256 <__divsf3x+0x1e>
    324c:	0c 94 83 34 	jmp	0x6906	; 0x6906 <__fp_inf>
    3250:	51 11       	cpse	r21, r1
    3252:	0c 94 14 34 	jmp	0x6828	; 0x6828 <__fp_szero>
    3256:	0c 94 1c 35 	jmp	0x6a38	; 0x6a38 <__fp_nan>
    325a:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <__fp_split3>
    325e:	68 f3       	brcs	.-38     	; 0x323a <__divsf3x+0x2>

00003260 <__divsf3_pse>:
    3260:	99 23       	and	r25, r25
    3262:	b1 f3       	breq	.-20     	; 0x3250 <__divsf3x+0x18>
    3264:	55 23       	and	r21, r21
    3266:	91 f3       	breq	.-28     	; 0x324c <__divsf3x+0x14>
    3268:	95 1b       	sub	r25, r21
    326a:	55 0b       	sbc	r21, r21
    326c:	bb 27       	eor	r27, r27
    326e:	aa 27       	eor	r26, r26
    3270:	62 17       	cp	r22, r18
    3272:	73 07       	cpc	r23, r19
    3274:	84 07       	cpc	r24, r20
    3276:	38 f0       	brcs	.+14     	; 0x3286 <__divsf3_pse+0x26>
    3278:	9f 5f       	subi	r25, 0xFF	; 255
    327a:	5f 4f       	sbci	r21, 0xFF	; 255
    327c:	22 0f       	add	r18, r18
    327e:	33 1f       	adc	r19, r19
    3280:	44 1f       	adc	r20, r20
    3282:	aa 1f       	adc	r26, r26
    3284:	a9 f3       	breq	.-22     	; 0x3270 <__divsf3_pse+0x10>
    3286:	35 d0       	rcall	.+106    	; 0x32f2 <__divsf3_pse+0x92>
    3288:	0e 2e       	mov	r0, r30
    328a:	3a f0       	brmi	.+14     	; 0x329a <__divsf3_pse+0x3a>
    328c:	e0 e8       	ldi	r30, 0x80	; 128
    328e:	32 d0       	rcall	.+100    	; 0x32f4 <__divsf3_pse+0x94>
    3290:	91 50       	subi	r25, 0x01	; 1
    3292:	50 40       	sbci	r21, 0x00	; 0
    3294:	e6 95       	lsr	r30
    3296:	00 1c       	adc	r0, r0
    3298:	ca f7       	brpl	.-14     	; 0x328c <__divsf3_pse+0x2c>
    329a:	2b d0       	rcall	.+86     	; 0x32f2 <__divsf3_pse+0x92>
    329c:	fe 2f       	mov	r31, r30
    329e:	29 d0       	rcall	.+82     	; 0x32f2 <__divsf3_pse+0x92>
    32a0:	66 0f       	add	r22, r22
    32a2:	77 1f       	adc	r23, r23
    32a4:	88 1f       	adc	r24, r24
    32a6:	bb 1f       	adc	r27, r27
    32a8:	26 17       	cp	r18, r22
    32aa:	37 07       	cpc	r19, r23
    32ac:	48 07       	cpc	r20, r24
    32ae:	ab 07       	cpc	r26, r27
    32b0:	b0 e8       	ldi	r27, 0x80	; 128
    32b2:	09 f0       	breq	.+2      	; 0x32b6 <__divsf3_pse+0x56>
    32b4:	bb 0b       	sbc	r27, r27
    32b6:	80 2d       	mov	r24, r0
    32b8:	bf 01       	movw	r22, r30
    32ba:	ff 27       	eor	r31, r31
    32bc:	93 58       	subi	r25, 0x83	; 131
    32be:	5f 4f       	sbci	r21, 0xFF	; 255
    32c0:	3a f0       	brmi	.+14     	; 0x32d0 <__divsf3_pse+0x70>
    32c2:	9e 3f       	cpi	r25, 0xFE	; 254
    32c4:	51 05       	cpc	r21, r1
    32c6:	78 f0       	brcs	.+30     	; 0x32e6 <__divsf3_pse+0x86>
    32c8:	0c 94 83 34 	jmp	0x6906	; 0x6906 <__fp_inf>
    32cc:	0c 94 14 34 	jmp	0x6828	; 0x6828 <__fp_szero>
    32d0:	5f 3f       	cpi	r21, 0xFF	; 255
    32d2:	e4 f3       	brlt	.-8      	; 0x32cc <__divsf3_pse+0x6c>
    32d4:	98 3e       	cpi	r25, 0xE8	; 232
    32d6:	d4 f3       	brlt	.-12     	; 0x32cc <__divsf3_pse+0x6c>
    32d8:	86 95       	lsr	r24
    32da:	77 95       	ror	r23
    32dc:	67 95       	ror	r22
    32de:	b7 95       	ror	r27
    32e0:	f7 95       	ror	r31
    32e2:	9f 5f       	subi	r25, 0xFF	; 255
    32e4:	c9 f7       	brne	.-14     	; 0x32d8 <__divsf3_pse+0x78>
    32e6:	88 0f       	add	r24, r24
    32e8:	91 1d       	adc	r25, r1
    32ea:	96 95       	lsr	r25
    32ec:	87 95       	ror	r24
    32ee:	97 f9       	bld	r25, 7
    32f0:	08 95       	ret
    32f2:	e1 e0       	ldi	r30, 0x01	; 1
    32f4:	66 0f       	add	r22, r22
    32f6:	77 1f       	adc	r23, r23
    32f8:	88 1f       	adc	r24, r24
    32fa:	bb 1f       	adc	r27, r27
    32fc:	62 17       	cp	r22, r18
    32fe:	73 07       	cpc	r23, r19
    3300:	84 07       	cpc	r24, r20
    3302:	ba 07       	cpc	r27, r26
    3304:	20 f0       	brcs	.+8      	; 0x330e <__divsf3_pse+0xae>
    3306:	62 1b       	sub	r22, r18
    3308:	73 0b       	sbc	r23, r19
    330a:	84 0b       	sbc	r24, r20
    330c:	ba 0b       	sbc	r27, r26
    330e:	ee 1f       	adc	r30, r30
    3310:	88 f7       	brcc	.-30     	; 0x32f4 <__divsf3_pse+0x94>
    3312:	e0 95       	com	r30
    3314:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004b8e <__fixunssfsi>:
    4b8e:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <__fp_splitA>
    4b92:	88 f0       	brcs	.+34     	; 0x4bb6 <__fixunssfsi+0x28>
    4b94:	9f 57       	subi	r25, 0x7F	; 127
    4b96:	98 f0       	brcs	.+38     	; 0x4bbe <__fixunssfsi+0x30>
    4b98:	b9 2f       	mov	r27, r25
    4b9a:	99 27       	eor	r25, r25
    4b9c:	b7 51       	subi	r27, 0x17	; 23
    4b9e:	b0 f0       	brcs	.+44     	; 0x4bcc <__fixunssfsi+0x3e>
    4ba0:	e1 f0       	breq	.+56     	; 0x4bda <__fixunssfsi+0x4c>
    4ba2:	66 0f       	add	r22, r22
    4ba4:	77 1f       	adc	r23, r23
    4ba6:	88 1f       	adc	r24, r24
    4ba8:	99 1f       	adc	r25, r25
    4baa:	1a f0       	brmi	.+6      	; 0x4bb2 <__fixunssfsi+0x24>
    4bac:	ba 95       	dec	r27
    4bae:	c9 f7       	brne	.-14     	; 0x4ba2 <__fixunssfsi+0x14>
    4bb0:	14 c0       	rjmp	.+40     	; 0x4bda <__fixunssfsi+0x4c>
    4bb2:	b1 30       	cpi	r27, 0x01	; 1
    4bb4:	91 f0       	breq	.+36     	; 0x4bda <__fixunssfsi+0x4c>
    4bb6:	0e 94 13 34 	call	0x6826	; 0x6826 <__fp_zero>
    4bba:	b1 e0       	ldi	r27, 0x01	; 1
    4bbc:	08 95       	ret
    4bbe:	0c 94 13 34 	jmp	0x6826	; 0x6826 <__fp_zero>
    4bc2:	67 2f       	mov	r22, r23
    4bc4:	78 2f       	mov	r23, r24
    4bc6:	88 27       	eor	r24, r24
    4bc8:	b8 5f       	subi	r27, 0xF8	; 248
    4bca:	39 f0       	breq	.+14     	; 0x4bda <__fixunssfsi+0x4c>
    4bcc:	b9 3f       	cpi	r27, 0xF9	; 249
    4bce:	cc f3       	brlt	.-14     	; 0x4bc2 <__fixunssfsi+0x34>
    4bd0:	86 95       	lsr	r24
    4bd2:	77 95       	ror	r23
    4bd4:	67 95       	ror	r22
    4bd6:	b3 95       	inc	r27
    4bd8:	d9 f7       	brne	.-10     	; 0x4bd0 <__fixunssfsi+0x42>
    4bda:	3e f4       	brtc	.+14     	; 0x4bea <__fixunssfsi+0x5c>
    4bdc:	90 95       	com	r25
    4bde:	80 95       	com	r24
    4be0:	70 95       	com	r23
    4be2:	61 95       	neg	r22
    4be4:	7f 4f       	sbci	r23, 0xFF	; 255
    4be6:	8f 4f       	sbci	r24, 0xFF	; 255
    4be8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bea:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004340 <__floatunsisf>:
    4340:	e8 94       	clt
    4342:	09 c0       	rjmp	.+18     	; 0x4356 <__floatsisf+0x12>

00004344 <__floatsisf>:
    4344:	97 fb       	bst	r25, 7
    4346:	3e f4       	brtc	.+14     	; 0x4356 <__floatsisf+0x12>
    4348:	90 95       	com	r25
    434a:	80 95       	com	r24
    434c:	70 95       	com	r23
    434e:	61 95       	neg	r22
    4350:	7f 4f       	sbci	r23, 0xFF	; 255
    4352:	8f 4f       	sbci	r24, 0xFF	; 255
    4354:	9f 4f       	sbci	r25, 0xFF	; 255
    4356:	99 23       	and	r25, r25
    4358:	a9 f0       	breq	.+42     	; 0x4384 <__floatsisf+0x40>
    435a:	f9 2f       	mov	r31, r25
    435c:	96 e9       	ldi	r25, 0x96	; 150
    435e:	bb 27       	eor	r27, r27
    4360:	93 95       	inc	r25
    4362:	f6 95       	lsr	r31
    4364:	87 95       	ror	r24
    4366:	77 95       	ror	r23
    4368:	67 95       	ror	r22
    436a:	b7 95       	ror	r27
    436c:	f1 11       	cpse	r31, r1
    436e:	f8 cf       	rjmp	.-16     	; 0x4360 <__floatsisf+0x1c>
    4370:	fa f4       	brpl	.+62     	; 0x43b0 <__floatsisf+0x6c>
    4372:	bb 0f       	add	r27, r27
    4374:	11 f4       	brne	.+4      	; 0x437a <__floatsisf+0x36>
    4376:	60 ff       	sbrs	r22, 0
    4378:	1b c0       	rjmp	.+54     	; 0x43b0 <__floatsisf+0x6c>
    437a:	6f 5f       	subi	r22, 0xFF	; 255
    437c:	7f 4f       	sbci	r23, 0xFF	; 255
    437e:	8f 4f       	sbci	r24, 0xFF	; 255
    4380:	9f 4f       	sbci	r25, 0xFF	; 255
    4382:	16 c0       	rjmp	.+44     	; 0x43b0 <__floatsisf+0x6c>
    4384:	88 23       	and	r24, r24
    4386:	11 f0       	breq	.+4      	; 0x438c <__floatsisf+0x48>
    4388:	96 e9       	ldi	r25, 0x96	; 150
    438a:	11 c0       	rjmp	.+34     	; 0x43ae <__floatsisf+0x6a>
    438c:	77 23       	and	r23, r23
    438e:	21 f0       	breq	.+8      	; 0x4398 <__floatsisf+0x54>
    4390:	9e e8       	ldi	r25, 0x8E	; 142
    4392:	87 2f       	mov	r24, r23
    4394:	76 2f       	mov	r23, r22
    4396:	05 c0       	rjmp	.+10     	; 0x43a2 <__floatsisf+0x5e>
    4398:	66 23       	and	r22, r22
    439a:	71 f0       	breq	.+28     	; 0x43b8 <__floatsisf+0x74>
    439c:	96 e8       	ldi	r25, 0x86	; 134
    439e:	86 2f       	mov	r24, r22
    43a0:	70 e0       	ldi	r23, 0x00	; 0
    43a2:	60 e0       	ldi	r22, 0x00	; 0
    43a4:	2a f0       	brmi	.+10     	; 0x43b0 <__floatsisf+0x6c>
    43a6:	9a 95       	dec	r25
    43a8:	66 0f       	add	r22, r22
    43aa:	77 1f       	adc	r23, r23
    43ac:	88 1f       	adc	r24, r24
    43ae:	da f7       	brpl	.-10     	; 0x43a6 <__floatsisf+0x62>
    43b0:	88 0f       	add	r24, r24
    43b2:	96 95       	lsr	r25
    43b4:	87 95       	ror	r24
    43b6:	97 f9       	bld	r25, 7
    43b8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006906 <__fp_inf>:
    6906:	97 f9       	bld	r25, 7
    6908:	9f 67       	ori	r25, 0x7F	; 127
    690a:	80 e8       	ldi	r24, 0x80	; 128
    690c:	70 e0       	ldi	r23, 0x00	; 0
    690e:	60 e0       	ldi	r22, 0x00	; 0
    6910:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006a38 <__fp_nan>:
    6a38:	9f ef       	ldi	r25, 0xFF	; 255
    6a3a:	80 ec       	ldi	r24, 0xC0	; 192
    6a3c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000680a <__fp_pscA>:
    680a:	00 24       	eor	r0, r0
    680c:	0a 94       	dec	r0
    680e:	16 16       	cp	r1, r22
    6810:	17 06       	cpc	r1, r23
    6812:	18 06       	cpc	r1, r24
    6814:	09 06       	cpc	r0, r25
    6816:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006818 <__fp_pscB>:
    6818:	00 24       	eor	r0, r0
    681a:	0a 94       	dec	r0
    681c:	12 16       	cp	r1, r18
    681e:	13 06       	cpc	r1, r19
    6820:	14 06       	cpc	r1, r20
    6822:	05 06       	cpc	r0, r21
    6824:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000061e4 <__fp_round>:
    61e4:	09 2e       	mov	r0, r25
    61e6:	03 94       	inc	r0
    61e8:	00 0c       	add	r0, r0
    61ea:	11 f4       	brne	.+4      	; 0x61f0 <__fp_round+0xc>
    61ec:	88 23       	and	r24, r24
    61ee:	52 f0       	brmi	.+20     	; 0x6204 <__fp_round+0x20>
    61f0:	bb 0f       	add	r27, r27
    61f2:	40 f4       	brcc	.+16     	; 0x6204 <__fp_round+0x20>
    61f4:	bf 2b       	or	r27, r31
    61f6:	11 f4       	brne	.+4      	; 0x61fc <__fp_round+0x18>
    61f8:	60 ff       	sbrs	r22, 0
    61fa:	04 c0       	rjmp	.+8      	; 0x6204 <__fp_round+0x20>
    61fc:	6f 5f       	subi	r22, 0xFF	; 255
    61fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6200:	8f 4f       	sbci	r24, 0xFF	; 255
    6202:	9f 4f       	sbci	r25, 0xFF	; 255
    6204:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000056b0 <__fp_split3>:
    56b0:	57 fd       	sbrc	r21, 7
    56b2:	90 58       	subi	r25, 0x80	; 128
    56b4:	44 0f       	add	r20, r20
    56b6:	55 1f       	adc	r21, r21
    56b8:	59 f0       	breq	.+22     	; 0x56d0 <__fp_splitA+0x10>
    56ba:	5f 3f       	cpi	r21, 0xFF	; 255
    56bc:	71 f0       	breq	.+28     	; 0x56da <__fp_splitA+0x1a>
    56be:	47 95       	ror	r20

000056c0 <__fp_splitA>:
    56c0:	88 0f       	add	r24, r24
    56c2:	97 fb       	bst	r25, 7
    56c4:	99 1f       	adc	r25, r25
    56c6:	61 f0       	breq	.+24     	; 0x56e0 <__fp_splitA+0x20>
    56c8:	9f 3f       	cpi	r25, 0xFF	; 255
    56ca:	79 f0       	breq	.+30     	; 0x56ea <__fp_splitA+0x2a>
    56cc:	87 95       	ror	r24
    56ce:	08 95       	ret
    56d0:	12 16       	cp	r1, r18
    56d2:	13 06       	cpc	r1, r19
    56d4:	14 06       	cpc	r1, r20
    56d6:	55 1f       	adc	r21, r21
    56d8:	f2 cf       	rjmp	.-28     	; 0x56be <__fp_split3+0xe>
    56da:	46 95       	lsr	r20
    56dc:	f1 df       	rcall	.-30     	; 0x56c0 <__fp_splitA>
    56de:	08 c0       	rjmp	.+16     	; 0x56f0 <__fp_splitA+0x30>
    56e0:	16 16       	cp	r1, r22
    56e2:	17 06       	cpc	r1, r23
    56e4:	18 06       	cpc	r1, r24
    56e6:	99 1f       	adc	r25, r25
    56e8:	f1 cf       	rjmp	.-30     	; 0x56cc <__fp_splitA+0xc>
    56ea:	86 95       	lsr	r24
    56ec:	71 05       	cpc	r23, r1
    56ee:	61 05       	cpc	r22, r1
    56f0:	08 94       	sec
    56f2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006826 <__fp_zero>:
    6826:	e8 94       	clt

00006828 <__fp_szero>:
    6828:	bb 27       	eor	r27, r27
    682a:	66 27       	eor	r22, r22
    682c:	77 27       	eor	r23, r23
    682e:	cb 01       	movw	r24, r22
    6830:	97 f9       	bld	r25, 7
    6832:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000069f8 <__mulsf3>:
    69f8:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__mulsf3x>
    69fc:	0c 94 f2 30 	jmp	0x61e4	; 0x61e4 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000033f2 <__mulsf3x>:
    33f2:	0f c0       	rjmp	.+30     	; 0x3412 <__mulsf3x+0x20>
    33f4:	0e 94 05 34 	call	0x680a	; 0x680a <__fp_pscA>
    33f8:	38 f0       	brcs	.+14     	; 0x3408 <__mulsf3x+0x16>
    33fa:	0e 94 0c 34 	call	0x6818	; 0x6818 <__fp_pscB>
    33fe:	20 f0       	brcs	.+8      	; 0x3408 <__mulsf3x+0x16>
    3400:	95 23       	and	r25, r21
    3402:	11 f0       	breq	.+4      	; 0x3408 <__mulsf3x+0x16>
    3404:	0c 94 83 34 	jmp	0x6906	; 0x6906 <__fp_inf>
    3408:	0c 94 1c 35 	jmp	0x6a38	; 0x6a38 <__fp_nan>
    340c:	11 24       	eor	r1, r1
    340e:	0c 94 14 34 	jmp	0x6828	; 0x6828 <__fp_szero>
    3412:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <__fp_split3>
    3416:	70 f3       	brcs	.-36     	; 0x33f4 <__mulsf3x+0x2>

00003418 <__mulsf3_pse>:
    3418:	95 9f       	mul	r25, r21
    341a:	c1 f3       	breq	.-16     	; 0x340c <__mulsf3x+0x1a>
    341c:	95 0f       	add	r25, r21
    341e:	50 e0       	ldi	r21, 0x00	; 0
    3420:	55 1f       	adc	r21, r21
    3422:	62 9f       	mul	r22, r18
    3424:	f0 01       	movw	r30, r0
    3426:	72 9f       	mul	r23, r18
    3428:	bb 27       	eor	r27, r27
    342a:	f0 0d       	add	r31, r0
    342c:	b1 1d       	adc	r27, r1
    342e:	63 9f       	mul	r22, r19
    3430:	aa 27       	eor	r26, r26
    3432:	f0 0d       	add	r31, r0
    3434:	b1 1d       	adc	r27, r1
    3436:	aa 1f       	adc	r26, r26
    3438:	64 9f       	mul	r22, r20
    343a:	66 27       	eor	r22, r22
    343c:	b0 0d       	add	r27, r0
    343e:	a1 1d       	adc	r26, r1
    3440:	66 1f       	adc	r22, r22
    3442:	82 9f       	mul	r24, r18
    3444:	22 27       	eor	r18, r18
    3446:	b0 0d       	add	r27, r0
    3448:	a1 1d       	adc	r26, r1
    344a:	62 1f       	adc	r22, r18
    344c:	73 9f       	mul	r23, r19
    344e:	b0 0d       	add	r27, r0
    3450:	a1 1d       	adc	r26, r1
    3452:	62 1f       	adc	r22, r18
    3454:	83 9f       	mul	r24, r19
    3456:	a0 0d       	add	r26, r0
    3458:	61 1d       	adc	r22, r1
    345a:	22 1f       	adc	r18, r18
    345c:	74 9f       	mul	r23, r20
    345e:	33 27       	eor	r19, r19
    3460:	a0 0d       	add	r26, r0
    3462:	61 1d       	adc	r22, r1
    3464:	23 1f       	adc	r18, r19
    3466:	84 9f       	mul	r24, r20
    3468:	60 0d       	add	r22, r0
    346a:	21 1d       	adc	r18, r1
    346c:	82 2f       	mov	r24, r18
    346e:	76 2f       	mov	r23, r22
    3470:	6a 2f       	mov	r22, r26
    3472:	11 24       	eor	r1, r1
    3474:	9f 57       	subi	r25, 0x7F	; 127
    3476:	50 40       	sbci	r21, 0x00	; 0
    3478:	9a f0       	brmi	.+38     	; 0x34a0 <__mulsf3_pse+0x88>
    347a:	f1 f0       	breq	.+60     	; 0x34b8 <__mulsf3_pse+0xa0>
    347c:	88 23       	and	r24, r24
    347e:	4a f0       	brmi	.+18     	; 0x3492 <__mulsf3_pse+0x7a>
    3480:	ee 0f       	add	r30, r30
    3482:	ff 1f       	adc	r31, r31
    3484:	bb 1f       	adc	r27, r27
    3486:	66 1f       	adc	r22, r22
    3488:	77 1f       	adc	r23, r23
    348a:	88 1f       	adc	r24, r24
    348c:	91 50       	subi	r25, 0x01	; 1
    348e:	50 40       	sbci	r21, 0x00	; 0
    3490:	a9 f7       	brne	.-22     	; 0x347c <__mulsf3_pse+0x64>
    3492:	9e 3f       	cpi	r25, 0xFE	; 254
    3494:	51 05       	cpc	r21, r1
    3496:	80 f0       	brcs	.+32     	; 0x34b8 <__mulsf3_pse+0xa0>
    3498:	0c 94 83 34 	jmp	0x6906	; 0x6906 <__fp_inf>
    349c:	0c 94 14 34 	jmp	0x6828	; 0x6828 <__fp_szero>
    34a0:	5f 3f       	cpi	r21, 0xFF	; 255
    34a2:	e4 f3       	brlt	.-8      	; 0x349c <__mulsf3_pse+0x84>
    34a4:	98 3e       	cpi	r25, 0xE8	; 232
    34a6:	d4 f3       	brlt	.-12     	; 0x349c <__mulsf3_pse+0x84>
    34a8:	86 95       	lsr	r24
    34aa:	77 95       	ror	r23
    34ac:	67 95       	ror	r22
    34ae:	b7 95       	ror	r27
    34b0:	f7 95       	ror	r31
    34b2:	e7 95       	ror	r30
    34b4:	9f 5f       	subi	r25, 0xFF	; 255
    34b6:	c1 f7       	brne	.-16     	; 0x34a8 <__mulsf3_pse+0x90>
    34b8:	fe 2b       	or	r31, r30
    34ba:	88 0f       	add	r24, r24
    34bc:	91 1d       	adc	r25, r1
    34be:	96 95       	lsr	r25
    34c0:	87 95       	ror	r24
    34c2:	97 f9       	bld	r25, 7
    34c4:	08 95       	ret

Disassembly of section .text.avrlibc:

0000090a <vfprintf>:
     90a:	a4 e1       	ldi	r26, 0x14	; 20
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 80 2d 	jmp	0x5b00	; 0x5b00 <__prologue_saves__>
     916:	6c 01       	movw	r12, r24
     918:	1a 01       	movw	r2, r20
     91a:	46 2e       	mov	r4, r22
     91c:	59 01       	movw	r10, r18
     91e:	fc 01       	movw	r30, r24
     920:	10 86       	std	Z+8, r1	; 0x08
     922:	17 82       	std	Z+7, r1	; 0x07
     924:	84 81       	ldd	r24, Z+4	; 0x04
     926:	81 ff       	sbrs	r24, 1
     928:	62 c3       	rjmp	.+1732   	; 0xfee <vfprintf+0x6e4>
     92a:	ce 01       	movw	r24, r28
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	9d 87       	std	Y+13, r25	; 0x0d
     930:	8c 87       	std	Y+12, r24	; 0x0c
     932:	a0 e8       	ldi	r26, 0x80	; 128
     934:	8a 8b       	std	Y+18, r24	; 0x12
     936:	9b 8b       	std	Y+19, r25	; 0x13
     938:	ac 8b       	std	Y+20, r26	; 0x14
     93a:	f1 01       	movw	r30, r2
     93c:	84 91       	lpm	r24, Z
     93e:	47 fc       	sbrc	r4, 7
     940:	80 81       	ld	r24, Z
     942:	88 23       	and	r24, r24
     944:	09 f4       	brne	.+2      	; 0x948 <vfprintf+0x3e>
     946:	4f c3       	rjmp	.+1694   	; 0xfe6 <vfprintf+0x6dc>
     948:	44 2d       	mov	r20, r4
     94a:	91 01       	movw	r18, r2
     94c:	2f 5f       	subi	r18, 0xFF	; 255
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
     950:	4f 4f       	sbci	r20, 0xFF	; 255
     952:	85 32       	cpi	r24, 0x25	; 37
     954:	19 f0       	breq	.+6      	; 0x95c <vfprintf+0x52>
     956:	19 01       	movw	r2, r18
     958:	44 2e       	mov	r4, r20
     95a:	0a c0       	rjmp	.+20     	; 0x970 <vfprintf+0x66>
     95c:	f9 01       	movw	r30, r18
     95e:	84 91       	lpm	r24, Z
     960:	47 fd       	sbrc	r20, 7
     962:	80 81       	ld	r24, Z
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	29 0e       	add	r2, r25
     968:	31 1c       	adc	r3, r1
     96a:	41 1c       	adc	r4, r1
     96c:	85 32       	cpi	r24, 0x25	; 37
     96e:	49 f4       	brne	.+18     	; 0x982 <vfprintf+0x78>
     970:	b6 01       	movw	r22, r12
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     978:	bf 86       	std	Y+15, r11	; 0x0f
     97a:	ae 86       	std	Y+14, r10	; 0x0e
     97c:	ae 84       	ldd	r10, Y+14	; 0x0e
     97e:	bf 84       	ldd	r11, Y+15	; 0x0f
     980:	dc cf       	rjmp	.-72     	; 0x93a <vfprintf+0x30>
     982:	10 e0       	ldi	r17, 0x00	; 0
     984:	f1 2c       	mov	r15, r1
     986:	00 e0       	ldi	r16, 0x00	; 0
     988:	00 32       	cpi	r16, 0x20	; 32
     98a:	a0 f4       	brcc	.+40     	; 0x9b4 <vfprintf+0xaa>
     98c:	8b 32       	cpi	r24, 0x2B	; 43
     98e:	69 f0       	breq	.+26     	; 0x9aa <vfprintf+0xa0>
     990:	30 f4       	brcc	.+12     	; 0x99e <vfprintf+0x94>
     992:	80 32       	cpi	r24, 0x20	; 32
     994:	59 f0       	breq	.+22     	; 0x9ac <vfprintf+0xa2>
     996:	83 32       	cpi	r24, 0x23	; 35
     998:	69 f4       	brne	.+26     	; 0x9b4 <vfprintf+0xaa>
     99a:	00 61       	ori	r16, 0x10	; 16
     99c:	2c c0       	rjmp	.+88     	; 0x9f6 <vfprintf+0xec>
     99e:	8d 32       	cpi	r24, 0x2D	; 45
     9a0:	39 f0       	breq	.+14     	; 0x9b0 <vfprintf+0xa6>
     9a2:	80 33       	cpi	r24, 0x30	; 48
     9a4:	39 f4       	brne	.+14     	; 0x9b4 <vfprintf+0xaa>
     9a6:	01 60       	ori	r16, 0x01	; 1
     9a8:	26 c0       	rjmp	.+76     	; 0x9f6 <vfprintf+0xec>
     9aa:	02 60       	ori	r16, 0x02	; 2
     9ac:	04 60       	ori	r16, 0x04	; 4
     9ae:	23 c0       	rjmp	.+70     	; 0x9f6 <vfprintf+0xec>
     9b0:	08 60       	ori	r16, 0x08	; 8
     9b2:	21 c0       	rjmp	.+66     	; 0x9f6 <vfprintf+0xec>
     9b4:	07 fd       	sbrc	r16, 7
     9b6:	29 c0       	rjmp	.+82     	; 0xa0a <vfprintf+0x100>
     9b8:	90 ed       	ldi	r25, 0xD0	; 208
     9ba:	98 0f       	add	r25, r24
     9bc:	9a 30       	cpi	r25, 0x0A	; 10
     9be:	78 f4       	brcc	.+30     	; 0x9de <vfprintf+0xd4>
     9c0:	06 ff       	sbrs	r16, 6
     9c2:	06 c0       	rjmp	.+12     	; 0x9d0 <vfprintf+0xc6>
     9c4:	aa e0       	ldi	r26, 0x0A	; 10
     9c6:	1a 9f       	mul	r17, r26
     9c8:	90 0d       	add	r25, r0
     9ca:	11 24       	eor	r1, r1
     9cc:	19 2f       	mov	r17, r25
     9ce:	13 c0       	rjmp	.+38     	; 0x9f6 <vfprintf+0xec>
     9d0:	ea e0       	ldi	r30, 0x0A	; 10
     9d2:	fe 9e       	mul	r15, r30
     9d4:	90 0d       	add	r25, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	f9 2e       	mov	r15, r25
     9da:	00 62       	ori	r16, 0x20	; 32
     9dc:	0c c0       	rjmp	.+24     	; 0x9f6 <vfprintf+0xec>
     9de:	8e 32       	cpi	r24, 0x2E	; 46
     9e0:	21 f4       	brne	.+8      	; 0x9ea <vfprintf+0xe0>
     9e2:	06 fd       	sbrc	r16, 6
     9e4:	00 c3       	rjmp	.+1536   	; 0xfe6 <vfprintf+0x6dc>
     9e6:	00 64       	ori	r16, 0x40	; 64
     9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <vfprintf+0xec>
     9ea:	8c 36       	cpi	r24, 0x6C	; 108
     9ec:	11 f4       	brne	.+4      	; 0x9f2 <vfprintf+0xe8>
     9ee:	00 68       	ori	r16, 0x80	; 128
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <vfprintf+0xec>
     9f2:	88 36       	cpi	r24, 0x68	; 104
     9f4:	51 f4       	brne	.+20     	; 0xa0a <vfprintf+0x100>
     9f6:	f1 01       	movw	r30, r2
     9f8:	84 91       	lpm	r24, Z
     9fa:	47 fc       	sbrc	r4, 7
     9fc:	80 81       	ld	r24, Z
     9fe:	ff ef       	ldi	r31, 0xFF	; 255
     a00:	2f 1a       	sub	r2, r31
     a02:	3f 0a       	sbc	r3, r31
     a04:	4f 0a       	sbc	r4, r31
     a06:	81 11       	cpse	r24, r1
     a08:	bf cf       	rjmp	.-130    	; 0x988 <vfprintf+0x7e>
     a0a:	9b eb       	ldi	r25, 0xBB	; 187
     a0c:	98 0f       	add	r25, r24
     a0e:	93 30       	cpi	r25, 0x03	; 3
     a10:	18 f4       	brcc	.+6      	; 0xa18 <vfprintf+0x10e>
     a12:	00 61       	ori	r16, 0x10	; 16
     a14:	80 5e       	subi	r24, 0xE0	; 224
     a16:	06 c0       	rjmp	.+12     	; 0xa24 <vfprintf+0x11a>
     a18:	9b e9       	ldi	r25, 0x9B	; 155
     a1a:	98 0f       	add	r25, r24
     a1c:	93 30       	cpi	r25, 0x03	; 3
     a1e:	08 f0       	brcs	.+2      	; 0xa22 <vfprintf+0x118>
     a20:	66 c1       	rjmp	.+716    	; 0xcee <vfprintf+0x3e4>
     a22:	0f 7e       	andi	r16, 0xEF	; 239
     a24:	06 ff       	sbrs	r16, 6
     a26:	16 e0       	ldi	r17, 0x06	; 6
     a28:	0f 73       	andi	r16, 0x3F	; 63
     a2a:	70 2e       	mov	r7, r16
     a2c:	85 36       	cpi	r24, 0x65	; 101
     a2e:	21 f4       	brne	.+8      	; 0xa38 <vfprintf+0x12e>
     a30:	20 2f       	mov	r18, r16
     a32:	20 64       	ori	r18, 0x40	; 64
     a34:	72 2e       	mov	r7, r18
     a36:	08 c0       	rjmp	.+16     	; 0xa48 <vfprintf+0x13e>
     a38:	86 36       	cpi	r24, 0x66	; 102
     a3a:	21 f4       	brne	.+8      	; 0xa44 <vfprintf+0x13a>
     a3c:	80 2f       	mov	r24, r16
     a3e:	80 68       	ori	r24, 0x80	; 128
     a40:	78 2e       	mov	r7, r24
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <vfprintf+0x13e>
     a44:	11 11       	cpse	r17, r1
     a46:	11 50       	subi	r17, 0x01	; 1
     a48:	77 fe       	sbrs	r7, 7
     a4a:	07 c0       	rjmp	.+14     	; 0xa5a <vfprintf+0x150>
     a4c:	1c 33       	cpi	r17, 0x3C	; 60
     a4e:	50 f4       	brcc	.+20     	; 0xa64 <vfprintf+0x15a>
     a50:	ee 24       	eor	r14, r14
     a52:	e3 94       	inc	r14
     a54:	e1 0e       	add	r14, r17
     a56:	27 e0       	ldi	r18, 0x07	; 7
     a58:	0b c0       	rjmp	.+22     	; 0xa70 <vfprintf+0x166>
     a5a:	18 30       	cpi	r17, 0x08	; 8
     a5c:	38 f0       	brcs	.+14     	; 0xa6c <vfprintf+0x162>
     a5e:	27 e0       	ldi	r18, 0x07	; 7
     a60:	17 e0       	ldi	r17, 0x07	; 7
     a62:	05 c0       	rjmp	.+10     	; 0xa6e <vfprintf+0x164>
     a64:	27 e0       	ldi	r18, 0x07	; 7
     a66:	6c e3       	ldi	r22, 0x3C	; 60
     a68:	e6 2e       	mov	r14, r22
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <vfprintf+0x166>
     a6c:	21 2f       	mov	r18, r17
     a6e:	e1 2c       	mov	r14, r1
     a70:	f5 01       	movw	r30, r10
     a72:	34 96       	adiw	r30, 0x04	; 4
     a74:	ff 87       	std	Y+15, r31	; 0x0f
     a76:	ee 87       	std	Y+14, r30	; 0x0e
     a78:	f5 01       	movw	r30, r10
     a7a:	60 81       	ld	r22, Z
     a7c:	71 81       	ldd	r23, Z+1	; 0x01
     a7e:	82 81       	ldd	r24, Z+2	; 0x02
     a80:	93 81       	ldd	r25, Z+3	; 0x03
     a82:	0e 2d       	mov	r16, r14
     a84:	ae 01       	movw	r20, r28
     a86:	4f 5f       	subi	r20, 0xFF	; 255
     a88:	5f 4f       	sbci	r21, 0xFF	; 255
     a8a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__ftoa_engine>
     a8e:	5c 01       	movw	r10, r24
     a90:	59 80       	ldd	r5, Y+1	; 0x01
     a92:	50 fe       	sbrs	r5, 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <vfprintf+0x190>
     a96:	53 fe       	sbrs	r5, 3
     a98:	06 c0       	rjmp	.+12     	; 0xaa6 <vfprintf+0x19c>
     a9a:	71 fc       	sbrc	r7, 1
     a9c:	06 c0       	rjmp	.+12     	; 0xaaa <vfprintf+0x1a0>
     a9e:	72 fe       	sbrs	r7, 2
     aa0:	06 c0       	rjmp	.+12     	; 0xaae <vfprintf+0x1a4>
     aa2:	00 e2       	ldi	r16, 0x20	; 32
     aa4:	05 c0       	rjmp	.+10     	; 0xab0 <vfprintf+0x1a6>
     aa6:	0d e2       	ldi	r16, 0x2D	; 45
     aa8:	03 c0       	rjmp	.+6      	; 0xab0 <vfprintf+0x1a6>
     aaa:	0b e2       	ldi	r16, 0x2B	; 43
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <vfprintf+0x1a6>
     aae:	00 e0       	ldi	r16, 0x00	; 0
     ab0:	85 2d       	mov	r24, r5
     ab2:	8c 70       	andi	r24, 0x0C	; 12
     ab4:	19 f0       	breq	.+6      	; 0xabc <vfprintf+0x1b2>
     ab6:	01 11       	cpse	r16, r1
     ab8:	73 c2       	rjmp	.+1254   	; 0xfa0 <vfprintf+0x696>
     aba:	be c2       	rjmp	.+1404   	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
     abc:	77 fe       	sbrs	r7, 7
     abe:	0f c0       	rjmp	.+30     	; 0xade <vfprintf+0x1d4>
     ac0:	ea 0c       	add	r14, r10
     ac2:	54 fe       	sbrs	r5, 4
     ac4:	04 c0       	rjmp	.+8      	; 0xace <vfprintf+0x1c4>
     ac6:	8a 81       	ldd	r24, Y+2	; 0x02
     ac8:	81 33       	cpi	r24, 0x31	; 49
     aca:	09 f4       	brne	.+2      	; 0xace <vfprintf+0x1c4>
     acc:	ea 94       	dec	r14
     ace:	1e 14       	cp	r1, r14
     ad0:	74 f5       	brge	.+92     	; 0xb2e <vfprintf+0x224>
     ad2:	28 e0       	ldi	r18, 0x08	; 8
     ad4:	2e 15       	cp	r18, r14
     ad6:	78 f5       	brcc	.+94     	; 0xb36 <vfprintf+0x22c>
     ad8:	38 e0       	ldi	r19, 0x08	; 8
     ada:	e3 2e       	mov	r14, r19
     adc:	2c c0       	rjmp	.+88     	; 0xb36 <vfprintf+0x22c>
     ade:	76 fc       	sbrc	r7, 6
     ae0:	2a c0       	rjmp	.+84     	; 0xb36 <vfprintf+0x22c>
     ae2:	81 2f       	mov	r24, r17
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	8a 15       	cp	r24, r10
     ae8:	9b 05       	cpc	r25, r11
     aea:	9c f0       	brlt	.+38     	; 0xb12 <vfprintf+0x208>
     aec:	8c ef       	ldi	r24, 0xFC	; 252
     aee:	a8 16       	cp	r10, r24
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	b8 06       	cpc	r11, r24
     af4:	74 f0       	brlt	.+28     	; 0xb12 <vfprintf+0x208>
     af6:	97 2d       	mov	r25, r7
     af8:	90 68       	ori	r25, 0x80	; 128
     afa:	79 2e       	mov	r7, r25
     afc:	0a c0       	rjmp	.+20     	; 0xb12 <vfprintf+0x208>
     afe:	e2 e0       	ldi	r30, 0x02	; 2
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	ec 0f       	add	r30, r28
     b04:	fd 1f       	adc	r31, r29
     b06:	e1 0f       	add	r30, r17
     b08:	f1 1d       	adc	r31, r1
     b0a:	80 81       	ld	r24, Z
     b0c:	80 33       	cpi	r24, 0x30	; 48
     b0e:	19 f4       	brne	.+6      	; 0xb16 <vfprintf+0x20c>
     b10:	11 50       	subi	r17, 0x01	; 1
     b12:	11 11       	cpse	r17, r1
     b14:	f4 cf       	rjmp	.-24     	; 0xafe <vfprintf+0x1f4>
     b16:	77 fe       	sbrs	r7, 7
     b18:	0e c0       	rjmp	.+28     	; 0xb36 <vfprintf+0x22c>
     b1a:	ee 24       	eor	r14, r14
     b1c:	e3 94       	inc	r14
     b1e:	e1 0e       	add	r14, r17
     b20:	81 2f       	mov	r24, r17
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	a8 16       	cp	r10, r24
     b26:	b9 06       	cpc	r11, r25
     b28:	2c f4       	brge	.+10     	; 0xb34 <vfprintf+0x22a>
     b2a:	1a 19       	sub	r17, r10
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <vfprintf+0x22c>
     b2e:	ee 24       	eor	r14, r14
     b30:	e3 94       	inc	r14
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <vfprintf+0x22c>
     b34:	10 e0       	ldi	r17, 0x00	; 0
     b36:	77 fe       	sbrs	r7, 7
     b38:	06 c0       	rjmp	.+12     	; 0xb46 <vfprintf+0x23c>
     b3a:	1a 14       	cp	r1, r10
     b3c:	1b 04       	cpc	r1, r11
     b3e:	34 f4       	brge	.+12     	; 0xb4c <vfprintf+0x242>
     b40:	c5 01       	movw	r24, r10
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	05 c0       	rjmp	.+10     	; 0xb50 <vfprintf+0x246>
     b46:	85 e0       	ldi	r24, 0x05	; 5
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <vfprintf+0x246>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	01 11       	cpse	r16, r1
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	11 23       	and	r17, r17
     b56:	31 f0       	breq	.+12     	; 0xb64 <vfprintf+0x25a>
     b58:	21 2f       	mov	r18, r17
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	2f 5f       	subi	r18, 0xFF	; 255
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	82 0f       	add	r24, r18
     b62:	93 1f       	adc	r25, r19
     b64:	2f 2d       	mov	r18, r15
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	82 17       	cp	r24, r18
     b6a:	93 07       	cpc	r25, r19
     b6c:	14 f4       	brge	.+4      	; 0xb72 <vfprintf+0x268>
     b6e:	f8 1a       	sub	r15, r24
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <vfprintf+0x26a>
     b72:	f1 2c       	mov	r15, r1
     b74:	87 2d       	mov	r24, r7
     b76:	89 70       	andi	r24, 0x09	; 9
     b78:	49 f4       	brne	.+18     	; 0xb8c <vfprintf+0x282>
     b7a:	ff 20       	and	r15, r15
     b7c:	39 f0       	breq	.+14     	; 0xb8c <vfprintf+0x282>
     b7e:	b6 01       	movw	r22, r12
     b80:	80 e2       	ldi	r24, 0x20	; 32
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     b88:	fa 94       	dec	r15
     b8a:	f7 cf       	rjmp	.-18     	; 0xb7a <vfprintf+0x270>
     b8c:	00 23       	and	r16, r16
     b8e:	29 f0       	breq	.+10     	; 0xb9a <vfprintf+0x290>
     b90:	b6 01       	movw	r22, r12
     b92:	80 2f       	mov	r24, r16
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     b9a:	73 fc       	sbrc	r7, 3
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <vfprintf+0x2a6>
     b9e:	ff 20       	and	r15, r15
     ba0:	39 f0       	breq	.+14     	; 0xbb0 <vfprintf+0x2a6>
     ba2:	b6 01       	movw	r22, r12
     ba4:	80 e3       	ldi	r24, 0x30	; 48
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     bac:	fa 94       	dec	r15
     bae:	f7 cf       	rjmp	.-18     	; 0xb9e <vfprintf+0x294>
     bb0:	77 fe       	sbrs	r7, 7
     bb2:	49 c0       	rjmp	.+146    	; 0xc46 <vfprintf+0x33c>
     bb4:	35 01       	movw	r6, r10
     bb6:	b7 fe       	sbrs	r11, 7
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <vfprintf+0x2b4>
     bba:	61 2c       	mov	r6, r1
     bbc:	71 2c       	mov	r7, r1
     bbe:	c5 01       	movw	r24, r10
     bc0:	86 19       	sub	r24, r6
     bc2:	97 09       	sbc	r25, r7
     bc4:	88 24       	eor	r8, r8
     bc6:	83 94       	inc	r8
     bc8:	91 2c       	mov	r9, r1
     bca:	8c 0e       	add	r8, r28
     bcc:	9d 1e       	adc	r9, r29
     bce:	88 0e       	add	r8, r24
     bd0:	99 1e       	adc	r9, r25
     bd2:	f5 01       	movw	r30, r10
     bd4:	ee 19       	sub	r30, r14
     bd6:	f1 09       	sbc	r31, r1
     bd8:	f9 8b       	std	Y+17, r31	; 0x11
     bda:	e8 8b       	std	Y+16, r30	; 0x10
     bdc:	01 2f       	mov	r16, r17
     bde:	10 e0       	ldi	r17, 0x00	; 0
     be0:	11 95       	neg	r17
     be2:	01 95       	neg	r16
     be4:	11 09       	sbc	r17, r1
     be6:	ff ef       	ldi	r31, 0xFF	; 255
     be8:	6f 16       	cp	r6, r31
     bea:	7f 06       	cpc	r7, r31
     bec:	29 f4       	brne	.+10     	; 0xbf8 <vfprintf+0x2ee>
     bee:	b6 01       	movw	r22, r12
     bf0:	8e e2       	ldi	r24, 0x2E	; 46
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     bf8:	a6 14       	cp	r10, r6
     bfa:	b7 04       	cpc	r11, r7
     bfc:	44 f0       	brlt	.+16     	; 0xc0e <vfprintf+0x304>
     bfe:	88 89       	ldd	r24, Y+16	; 0x10
     c00:	99 89       	ldd	r25, Y+17	; 0x11
     c02:	86 15       	cp	r24, r6
     c04:	97 05       	cpc	r25, r7
     c06:	1c f4       	brge	.+6      	; 0xc0e <vfprintf+0x304>
     c08:	f4 01       	movw	r30, r8
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <vfprintf+0x306>
     c0e:	80 e3       	ldi	r24, 0x30	; 48
     c10:	f1 e0       	ldi	r31, 0x01	; 1
     c12:	6f 1a       	sub	r6, r31
     c14:	71 08       	sbc	r7, r1
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	82 1a       	sub	r8, r18
     c1a:	92 0a       	sbc	r9, r18
     c1c:	60 16       	cp	r6, r16
     c1e:	71 06       	cpc	r7, r17
     c20:	2c f0       	brlt	.+10     	; 0xc2c <vfprintf+0x322>
     c22:	b6 01       	movw	r22, r12
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     c2a:	dd cf       	rjmp	.-70     	; 0xbe6 <vfprintf+0x2dc>
     c2c:	a6 14       	cp	r10, r6
     c2e:	b7 04       	cpc	r11, r7
     c30:	39 f4       	brne	.+14     	; 0xc40 <vfprintf+0x336>
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	96 33       	cpi	r25, 0x36	; 54
     c36:	18 f4       	brcc	.+6      	; 0xc3e <vfprintf+0x334>
     c38:	95 33       	cpi	r25, 0x35	; 53
     c3a:	11 f4       	brne	.+4      	; 0xc40 <vfprintf+0x336>
     c3c:	54 fe       	sbrs	r5, 4
     c3e:	81 e3       	ldi	r24, 0x31	; 49
     c40:	b6 01       	movw	r22, r12
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	51 c0       	rjmp	.+162    	; 0xce8 <vfprintf+0x3de>
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	81 33       	cpi	r24, 0x31	; 49
     c4a:	19 f0       	breq	.+6      	; 0xc52 <vfprintf+0x348>
     c4c:	95 2d       	mov	r25, r5
     c4e:	9f 7e       	andi	r25, 0xEF	; 239
     c50:	59 2e       	mov	r5, r25
     c52:	b6 01       	movw	r22, r12
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     c5a:	11 11       	cpse	r17, r1
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <vfprintf+0x35e>
     c5e:	74 fc       	sbrc	r7, 4
     c60:	1c c0       	rjmp	.+56     	; 0xc9a <vfprintf+0x390>
     c62:	85 e6       	ldi	r24, 0x65	; 101
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	1b c0       	rjmp	.+54     	; 0xc9e <vfprintf+0x394>
     c68:	b6 01       	movw	r22, r12
     c6a:	8e e2       	ldi	r24, 0x2E	; 46
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     c72:	02 e0       	ldi	r16, 0x02	; 2
     c74:	01 0f       	add	r16, r17
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	11 e0       	ldi	r17, 0x01	; 1
     c7a:	18 0f       	add	r17, r24
     c7c:	e1 e0       	ldi	r30, 0x01	; 1
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	ec 0f       	add	r30, r28
     c82:	fd 1f       	adc	r31, r29
     c84:	e8 0f       	add	r30, r24
     c86:	f1 1d       	adc	r31, r1
     c88:	80 81       	ld	r24, Z
     c8a:	b6 01       	movw	r22, r12
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     c92:	81 2f       	mov	r24, r17
     c94:	10 13       	cpse	r17, r16
     c96:	f0 cf       	rjmp	.-32     	; 0xc78 <vfprintf+0x36e>
     c98:	e2 cf       	rjmp	.-60     	; 0xc5e <vfprintf+0x354>
     c9a:	85 e4       	ldi	r24, 0x45	; 69
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	b6 01       	movw	r22, r12
     ca0:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     ca4:	b7 fc       	sbrc	r11, 7
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <vfprintf+0x3a8>
     ca8:	a1 14       	cp	r10, r1
     caa:	b1 04       	cpc	r11, r1
     cac:	39 f4       	brne	.+14     	; 0xcbc <vfprintf+0x3b2>
     cae:	54 fe       	sbrs	r5, 4
     cb0:	05 c0       	rjmp	.+10     	; 0xcbc <vfprintf+0x3b2>
     cb2:	b1 94       	neg	r11
     cb4:	a1 94       	neg	r10
     cb6:	b1 08       	sbc	r11, r1
     cb8:	8d e2       	ldi	r24, 0x2D	; 45
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <vfprintf+0x3b4>
     cbc:	8b e2       	ldi	r24, 0x2B	; 43
     cbe:	b6 01       	movw	r22, r12
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     cc6:	80 e3       	ldi	r24, 0x30	; 48
     cc8:	ea e0       	ldi	r30, 0x0A	; 10
     cca:	ae 16       	cp	r10, r30
     ccc:	b1 04       	cpc	r11, r1
     cce:	2c f0       	brlt	.+10     	; 0xcda <vfprintf+0x3d0>
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	aa e0       	ldi	r26, 0x0A	; 10
     cd4:	aa 1a       	sub	r10, r26
     cd6:	b1 08       	sbc	r11, r1
     cd8:	f7 cf       	rjmp	.-18     	; 0xcc8 <vfprintf+0x3be>
     cda:	b6 01       	movw	r22, r12
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     ce2:	b6 01       	movw	r22, r12
     ce4:	c5 01       	movw	r24, r10
     ce6:	c0 96       	adiw	r24, 0x30	; 48
     ce8:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     cec:	72 c1       	rjmp	.+740    	; 0xfd2 <vfprintf+0x6c8>
     cee:	83 36       	cpi	r24, 0x63	; 99
     cf0:	31 f0       	breq	.+12     	; 0xcfe <vfprintf+0x3f4>
     cf2:	83 37       	cpi	r24, 0x73	; 115
     cf4:	91 f0       	breq	.+36     	; 0xd1a <vfprintf+0x410>
     cf6:	83 35       	cpi	r24, 0x53	; 83
     cf8:	09 f0       	breq	.+2      	; 0xcfc <vfprintf+0x3f2>
     cfa:	5d c0       	rjmp	.+186    	; 0xdb6 <vfprintf+0x4ac>
     cfc:	24 c0       	rjmp	.+72     	; 0xd46 <vfprintf+0x43c>
     cfe:	c5 01       	movw	r24, r10
     d00:	02 96       	adiw	r24, 0x02	; 2
     d02:	9f 87       	std	Y+15, r25	; 0x0f
     d04:	8e 87       	std	Y+14, r24	; 0x0e
     d06:	f5 01       	movw	r30, r10
     d08:	80 81       	ld	r24, Z
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	6a 88       	ldd	r6, Y+18	; 0x12
     d0e:	7b 88       	ldd	r7, Y+19	; 0x13
     d10:	8c 88       	ldd	r8, Y+20	; 0x14
     d12:	aa 24       	eor	r10, r10
     d14:	a3 94       	inc	r10
     d16:	b1 2c       	mov	r11, r1
     d18:	14 c0       	rjmp	.+40     	; 0xd42 <vfprintf+0x438>
     d1a:	c5 01       	movw	r24, r10
     d1c:	03 96       	adiw	r24, 0x03	; 3
     d1e:	9f 87       	std	Y+15, r25	; 0x0f
     d20:	8e 87       	std	Y+14, r24	; 0x0e
     d22:	f5 01       	movw	r30, r10
     d24:	60 80       	ld	r6, Z
     d26:	71 80       	ldd	r7, Z+1	; 0x01
     d28:	82 80       	ldd	r8, Z+2	; 0x02
     d2a:	06 ff       	sbrs	r16, 6
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <vfprintf+0x42a>
     d2e:	41 2f       	mov	r20, r17
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <vfprintf+0x42e>
     d34:	4f ef       	ldi	r20, 0xFF	; 255
     d36:	5f ef       	ldi	r21, 0xFF	; 255
     d38:	88 2d       	mov	r24, r8
     d3a:	b3 01       	movw	r22, r6
     d3c:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <strnlen>
     d40:	5c 01       	movw	r10, r24
     d42:	0f 77       	andi	r16, 0x7F	; 127
     d44:	15 c0       	rjmp	.+42     	; 0xd70 <vfprintf+0x466>
     d46:	c5 01       	movw	r24, r10
     d48:	03 96       	adiw	r24, 0x03	; 3
     d4a:	9f 87       	std	Y+15, r25	; 0x0f
     d4c:	8e 87       	std	Y+14, r24	; 0x0e
     d4e:	f5 01       	movw	r30, r10
     d50:	60 80       	ld	r6, Z
     d52:	71 80       	ldd	r7, Z+1	; 0x01
     d54:	82 80       	ldd	r8, Z+2	; 0x02
     d56:	06 ff       	sbrs	r16, 6
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <vfprintf+0x456>
     d5a:	41 2f       	mov	r20, r17
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <vfprintf+0x45a>
     d60:	4f ef       	ldi	r20, 0xFF	; 255
     d62:	5f ef       	ldi	r21, 0xFF	; 255
     d64:	88 2d       	mov	r24, r8
     d66:	b3 01       	movw	r22, r6
     d68:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <strnlen>
     d6c:	5c 01       	movw	r10, r24
     d6e:	00 68       	ori	r16, 0x80	; 128
     d70:	03 fd       	sbrc	r16, 3
     d72:	1d c0       	rjmp	.+58     	; 0xdae <vfprintf+0x4a4>
     d74:	8f 2d       	mov	r24, r15
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a8 16       	cp	r10, r24
     d7a:	b9 06       	cpc	r11, r25
     d7c:	c0 f4       	brcc	.+48     	; 0xdae <vfprintf+0x4a4>
     d7e:	b6 01       	movw	r22, r12
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     d88:	fa 94       	dec	r15
     d8a:	f4 cf       	rjmp	.-24     	; 0xd74 <vfprintf+0x46a>
     d8c:	f3 01       	movw	r30, r6
     d8e:	84 91       	lpm	r24, Z
     d90:	87 fc       	sbrc	r8, 7
     d92:	80 81       	ld	r24, Z
     d94:	ff ef       	ldi	r31, 0xFF	; 255
     d96:	6f 1a       	sub	r6, r31
     d98:	7f 0a       	sbc	r7, r31
     d9a:	8f 0a       	sbc	r8, r31
     d9c:	b6 01       	movw	r22, r12
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     da4:	f1 10       	cpse	r15, r1
     da6:	fa 94       	dec	r15
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	a2 1a       	sub	r10, r18
     dac:	b1 08       	sbc	r11, r1
     dae:	a1 14       	cp	r10, r1
     db0:	b1 04       	cpc	r11, r1
     db2:	61 f7       	brne	.-40     	; 0xd8c <vfprintf+0x482>
     db4:	0e c1       	rjmp	.+540    	; 0xfd2 <vfprintf+0x6c8>
     db6:	84 36       	cpi	r24, 0x64	; 100
     db8:	11 f0       	breq	.+4      	; 0xdbe <vfprintf+0x4b4>
     dba:	89 36       	cpi	r24, 0x69	; 105
     dbc:	79 f5       	brne	.+94     	; 0xe1c <vfprintf+0x512>
     dbe:	c5 01       	movw	r24, r10
     dc0:	07 ff       	sbrs	r16, 7
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <vfprintf+0x4cc>
     dc4:	04 96       	adiw	r24, 0x04	; 4
     dc6:	9f 87       	std	Y+15, r25	; 0x0f
     dc8:	8e 87       	std	Y+14, r24	; 0x0e
     dca:	f5 01       	movw	r30, r10
     dcc:	60 81       	ld	r22, Z
     dce:	71 81       	ldd	r23, Z+1	; 0x01
     dd0:	82 81       	ldd	r24, Z+2	; 0x02
     dd2:	93 81       	ldd	r25, Z+3	; 0x03
     dd4:	0a c0       	rjmp	.+20     	; 0xdea <vfprintf+0x4e0>
     dd6:	02 96       	adiw	r24, 0x02	; 2
     dd8:	9f 87       	std	Y+15, r25	; 0x0f
     dda:	8e 87       	std	Y+14, r24	; 0x0e
     ddc:	f5 01       	movw	r30, r10
     dde:	60 81       	ld	r22, Z
     de0:	71 81       	ldd	r23, Z+1	; 0x01
     de2:	07 2e       	mov	r0, r23
     de4:	00 0c       	add	r0, r0
     de6:	88 0b       	sbc	r24, r24
     de8:	99 0b       	sbc	r25, r25
     dea:	0f 76       	andi	r16, 0x6F	; 111
     dec:	e0 2e       	mov	r14, r16
     dee:	97 ff       	sbrs	r25, 7
     df0:	0a c0       	rjmp	.+20     	; 0xe06 <vfprintf+0x4fc>
     df2:	90 95       	com	r25
     df4:	80 95       	com	r24
     df6:	70 95       	com	r23
     df8:	61 95       	neg	r22
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	8f 4f       	sbci	r24, 0xFF	; 255
     dfe:	9f 4f       	sbci	r25, 0xFF	; 255
     e00:	f0 2f       	mov	r31, r16
     e02:	f0 68       	ori	r31, 0x80	; 128
     e04:	ef 2e       	mov	r14, r31
     e06:	2a e0       	ldi	r18, 0x0A	; 10
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	ae 01       	movw	r20, r28
     e0c:	4f 5f       	subi	r20, 0xFF	; 255
     e0e:	5f 4f       	sbci	r21, 0xFF	; 255
     e10:	0e 94 89 1b 	call	0x3712	; 0x3712 <__ultoa_invert>
     e14:	a8 2e       	mov	r10, r24
     e16:	2c 85       	ldd	r18, Y+12	; 0x0c
     e18:	a2 1a       	sub	r10, r18
     e1a:	4b c0       	rjmp	.+150    	; 0xeb2 <vfprintf+0x5a8>
     e1c:	85 37       	cpi	r24, 0x75	; 117
     e1e:	29 f4       	brne	.+10     	; 0xe2a <vfprintf+0x520>
     e20:	0f 7e       	andi	r16, 0xEF	; 239
     e22:	e0 2e       	mov	r14, r16
     e24:	2a e0       	ldi	r18, 0x0A	; 10
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	25 c0       	rjmp	.+74     	; 0xe74 <vfprintf+0x56a>
     e2a:	90 2f       	mov	r25, r16
     e2c:	99 7f       	andi	r25, 0xF9	; 249
     e2e:	e9 2e       	mov	r14, r25
     e30:	8f 36       	cpi	r24, 0x6F	; 111
     e32:	c1 f0       	breq	.+48     	; 0xe64 <vfprintf+0x55a>
     e34:	18 f4       	brcc	.+6      	; 0xe3c <vfprintf+0x532>
     e36:	88 35       	cpi	r24, 0x58	; 88
     e38:	79 f0       	breq	.+30     	; 0xe58 <vfprintf+0x54e>
     e3a:	d5 c0       	rjmp	.+426    	; 0xfe6 <vfprintf+0x6dc>
     e3c:	80 37       	cpi	r24, 0x70	; 112
     e3e:	19 f0       	breq	.+6      	; 0xe46 <vfprintf+0x53c>
     e40:	88 37       	cpi	r24, 0x78	; 120
     e42:	21 f0       	breq	.+8      	; 0xe4c <vfprintf+0x542>
     e44:	d0 c0       	rjmp	.+416    	; 0xfe6 <vfprintf+0x6dc>
     e46:	a9 2f       	mov	r26, r25
     e48:	a0 61       	ori	r26, 0x10	; 16
     e4a:	ea 2e       	mov	r14, r26
     e4c:	e4 fe       	sbrs	r14, 4
     e4e:	0d c0       	rjmp	.+26     	; 0xe6a <vfprintf+0x560>
     e50:	ee 2d       	mov	r30, r14
     e52:	e4 60       	ori	r30, 0x04	; 4
     e54:	ee 2e       	mov	r14, r30
     e56:	09 c0       	rjmp	.+18     	; 0xe6a <vfprintf+0x560>
     e58:	04 ff       	sbrs	r16, 4
     e5a:	0a c0       	rjmp	.+20     	; 0xe70 <vfprintf+0x566>
     e5c:	f9 2f       	mov	r31, r25
     e5e:	f6 60       	ori	r31, 0x06	; 6
     e60:	ef 2e       	mov	r14, r31
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <vfprintf+0x566>
     e64:	28 e0       	ldi	r18, 0x08	; 8
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <vfprintf+0x56a>
     e6a:	20 e1       	ldi	r18, 0x10	; 16
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <vfprintf+0x56a>
     e70:	20 e1       	ldi	r18, 0x10	; 16
     e72:	32 e0       	ldi	r19, 0x02	; 2
     e74:	c5 01       	movw	r24, r10
     e76:	e7 fe       	sbrs	r14, 7
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <vfprintf+0x582>
     e7a:	04 96       	adiw	r24, 0x04	; 4
     e7c:	9f 87       	std	Y+15, r25	; 0x0f
     e7e:	8e 87       	std	Y+14, r24	; 0x0e
     e80:	f5 01       	movw	r30, r10
     e82:	60 81       	ld	r22, Z
     e84:	71 81       	ldd	r23, Z+1	; 0x01
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	08 c0       	rjmp	.+16     	; 0xe9c <vfprintf+0x592>
     e8c:	02 96       	adiw	r24, 0x02	; 2
     e8e:	9f 87       	std	Y+15, r25	; 0x0f
     e90:	8e 87       	std	Y+14, r24	; 0x0e
     e92:	f5 01       	movw	r30, r10
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	ae 01       	movw	r20, r28
     e9e:	4f 5f       	subi	r20, 0xFF	; 255
     ea0:	5f 4f       	sbci	r21, 0xFF	; 255
     ea2:	0e 94 89 1b 	call	0x3712	; 0x3712 <__ultoa_invert>
     ea6:	a8 2e       	mov	r10, r24
     ea8:	fc 85       	ldd	r31, Y+12	; 0x0c
     eaa:	af 1a       	sub	r10, r31
     eac:	2e 2d       	mov	r18, r14
     eae:	2f 77       	andi	r18, 0x7F	; 127
     eb0:	e2 2e       	mov	r14, r18
     eb2:	e6 fe       	sbrs	r14, 6
     eb4:	0b c0       	rjmp	.+22     	; 0xecc <vfprintf+0x5c2>
     eb6:	0e 2d       	mov	r16, r14
     eb8:	0e 7f       	andi	r16, 0xFE	; 254
     eba:	a1 16       	cp	r10, r17
     ebc:	50 f4       	brcc	.+20     	; 0xed2 <vfprintf+0x5c8>
     ebe:	e4 fe       	sbrs	r14, 4
     ec0:	0a c0       	rjmp	.+20     	; 0xed6 <vfprintf+0x5cc>
     ec2:	e2 fc       	sbrc	r14, 2
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <vfprintf+0x5cc>
     ec6:	0e 2d       	mov	r16, r14
     ec8:	0e 7e       	andi	r16, 0xEE	; 238
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <vfprintf+0x5cc>
     ecc:	ba 2c       	mov	r11, r10
     ece:	0e 2d       	mov	r16, r14
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <vfprintf+0x5ce>
     ed2:	ba 2c       	mov	r11, r10
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <vfprintf+0x5ce>
     ed6:	b1 2e       	mov	r11, r17
     ed8:	04 ff       	sbrs	r16, 4
     eda:	0d c0       	rjmp	.+26     	; 0xef6 <vfprintf+0x5ec>
     edc:	fe 01       	movw	r30, r28
     ede:	ea 0d       	add	r30, r10
     ee0:	f1 1d       	adc	r31, r1
     ee2:	80 81       	ld	r24, Z
     ee4:	80 33       	cpi	r24, 0x30	; 48
     ee6:	11 f4       	brne	.+4      	; 0xeec <vfprintf+0x5e2>
     ee8:	09 7e       	andi	r16, 0xE9	; 233
     eea:	09 c0       	rjmp	.+18     	; 0xefe <vfprintf+0x5f4>
     eec:	02 ff       	sbrs	r16, 2
     eee:	06 c0       	rjmp	.+12     	; 0xefc <vfprintf+0x5f2>
     ef0:	b3 94       	inc	r11
     ef2:	b3 94       	inc	r11
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <vfprintf+0x5f4>
     ef6:	80 2f       	mov	r24, r16
     ef8:	86 78       	andi	r24, 0x86	; 134
     efa:	09 f0       	breq	.+2      	; 0xefe <vfprintf+0x5f4>
     efc:	b3 94       	inc	r11
     efe:	03 fd       	sbrc	r16, 3
     f00:	11 c0       	rjmp	.+34     	; 0xf24 <vfprintf+0x61a>
     f02:	00 ff       	sbrs	r16, 0
     f04:	06 c0       	rjmp	.+12     	; 0xf12 <vfprintf+0x608>
     f06:	bf 14       	cp	r11, r15
     f08:	88 f4       	brcc	.+34     	; 0xf2c <vfprintf+0x622>
     f0a:	fa 0c       	add	r15, r10
     f0c:	1f 2d       	mov	r17, r15
     f0e:	1b 19       	sub	r17, r11
     f10:	0e c0       	rjmp	.+28     	; 0xf2e <vfprintf+0x624>
     f12:	bf 14       	cp	r11, r15
     f14:	60 f4       	brcc	.+24     	; 0xf2e <vfprintf+0x624>
     f16:	b6 01       	movw	r22, r12
     f18:	80 e2       	ldi	r24, 0x20	; 32
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     f20:	b3 94       	inc	r11
     f22:	f7 cf       	rjmp	.-18     	; 0xf12 <vfprintf+0x608>
     f24:	bf 14       	cp	r11, r15
     f26:	18 f4       	brcc	.+6      	; 0xf2e <vfprintf+0x624>
     f28:	fb 18       	sub	r15, r11
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <vfprintf+0x626>
     f2c:	1a 2d       	mov	r17, r10
     f2e:	f1 2c       	mov	r15, r1
     f30:	04 ff       	sbrs	r16, 4
     f32:	10 c0       	rjmp	.+32     	; 0xf54 <vfprintf+0x64a>
     f34:	b6 01       	movw	r22, r12
     f36:	80 e3       	ldi	r24, 0x30	; 48
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     f3e:	02 ff       	sbrs	r16, 2
     f40:	17 c0       	rjmp	.+46     	; 0xf70 <vfprintf+0x666>
     f42:	01 fd       	sbrc	r16, 1
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <vfprintf+0x642>
     f46:	88 e7       	ldi	r24, 0x78	; 120
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <vfprintf+0x646>
     f4c:	88 e5       	ldi	r24, 0x58	; 88
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	b6 01       	movw	r22, r12
     f52:	0c c0       	rjmp	.+24     	; 0xf6c <vfprintf+0x662>
     f54:	80 2f       	mov	r24, r16
     f56:	86 78       	andi	r24, 0x86	; 134
     f58:	59 f0       	breq	.+22     	; 0xf70 <vfprintf+0x666>
     f5a:	01 ff       	sbrs	r16, 1
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <vfprintf+0x658>
     f5e:	8b e2       	ldi	r24, 0x2B	; 43
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <vfprintf+0x65a>
     f62:	80 e2       	ldi	r24, 0x20	; 32
     f64:	07 fd       	sbrc	r16, 7
     f66:	8d e2       	ldi	r24, 0x2D	; 45
     f68:	b6 01       	movw	r22, r12
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     f70:	a1 16       	cp	r10, r17
     f72:	38 f4       	brcc	.+14     	; 0xf82 <vfprintf+0x678>
     f74:	b6 01       	movw	r22, r12
     f76:	80 e3       	ldi	r24, 0x30	; 48
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     f7e:	11 50       	subi	r17, 0x01	; 1
     f80:	f7 cf       	rjmp	.-18     	; 0xf70 <vfprintf+0x666>
     f82:	aa 94       	dec	r10
     f84:	e1 e0       	ldi	r30, 0x01	; 1
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	ec 0f       	add	r30, r28
     f8a:	fd 1f       	adc	r31, r29
     f8c:	ea 0d       	add	r30, r10
     f8e:	f1 1d       	adc	r31, r1
     f90:	80 81       	ld	r24, Z
     f92:	b6 01       	movw	r22, r12
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     f9a:	a1 10       	cpse	r10, r1
     f9c:	f2 cf       	rjmp	.-28     	; 0xf82 <vfprintf+0x678>
     f9e:	19 c0       	rjmp	.+50     	; 0xfd2 <vfprintf+0x6c8>
     fa0:	f4 e0       	ldi	r31, 0x04	; 4
     fa2:	ff 15       	cp	r31, r15
     fa4:	80 f5       	brcc	.+96     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     fa6:	84 e0       	ldi	r24, 0x04	; 4
     fa8:	f8 1a       	sub	r15, r24
     faa:	73 fe       	sbrs	r7, 3
     fac:	23 c0       	rjmp	.+70     	; 0xff4 <vfprintf+0x6ea>
     fae:	01 11       	cpse	r16, r1
     fb0:	2b c0       	rjmp	.+86     	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
     fb2:	53 fe       	sbrs	r5, 3
     fb4:	2f c0       	rjmp	.+94     	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
     fb6:	55 ef       	ldi	r21, 0xF5	; 245
     fb8:	85 2e       	mov	r8, r21
     fba:	58 e0       	ldi	r21, 0x08	; 8
     fbc:	95 2e       	mov	r9, r21
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	a5 2e       	mov	r10, r21
     fc2:	07 2d       	mov	r16, r7
     fc4:	00 71       	andi	r16, 0x10	; 16
     fc6:	f4 01       	movw	r30, r8
     fc8:	84 91       	lpm	r24, Z
     fca:	a7 fc       	sbrc	r10, 7
     fcc:	80 81       	ld	r24, Z
     fce:	81 11       	cpse	r24, r1
     fd0:	28 c0       	rjmp	.+80     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
     fd2:	ff 20       	and	r15, r15
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <vfprintf+0x6ce>
     fd6:	d2 cc       	rjmp	.-1628   	; 0x97c <vfprintf+0x72>
     fd8:	b6 01       	movw	r22, r12
     fda:	80 e2       	ldi	r24, 0x20	; 32
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     fe2:	fa 94       	dec	r15
     fe4:	f6 cf       	rjmp	.-20     	; 0xfd2 <vfprintf+0x6c8>
     fe6:	f6 01       	movw	r30, r12
     fe8:	87 81       	ldd	r24, Z+7	; 0x07
     fea:	90 85       	ldd	r25, Z+8	; 0x08
     fec:	2c c0       	rjmp	.+88     	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	9f ef       	ldi	r25, 0xFF	; 255
     ff2:	29 c0       	rjmp	.+82     	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
     ff4:	b6 01       	movw	r22, r12
     ff6:	80 e2       	ldi	r24, 0x20	; 32
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
     ffe:	fa 94       	dec	r15
    1000:	f1 10       	cpse	r15, r1
    1002:	f8 cf       	rjmp	.-16     	; 0xff4 <vfprintf+0x6ea>
    1004:	d4 cf       	rjmp	.-88     	; 0xfae <vfprintf+0x6a4>
    1006:	f1 2c       	mov	r15, r1
    1008:	b6 01       	movw	r22, r12
    100a:	80 2f       	mov	r24, r16
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
    1012:	cf cf       	rjmp	.-98     	; 0xfb2 <vfprintf+0x6a8>
    1014:	41 ef       	ldi	r20, 0xF1	; 241
    1016:	84 2e       	mov	r8, r20
    1018:	48 e0       	ldi	r20, 0x08	; 8
    101a:	94 2e       	mov	r9, r20
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	a4 2e       	mov	r10, r20
    1020:	d0 cf       	rjmp	.-96     	; 0xfc2 <vfprintf+0x6b8>
    1022:	01 11       	cpse	r16, r1
    1024:	80 52       	subi	r24, 0x20	; 32
    1026:	b6 01       	movw	r22, r12
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 cd 22 	call	0x459a	; 0x459a <fputc>
    102e:	ff ef       	ldi	r31, 0xFF	; 255
    1030:	8f 1a       	sub	r8, r31
    1032:	9f 0a       	sbc	r9, r31
    1034:	af 0a       	sbc	r10, r31
    1036:	c7 cf       	rjmp	.-114    	; 0xfc6 <vfprintf+0x6bc>
    1038:	23 e0       	ldi	r18, 0x03	; 3
    103a:	2f 15       	cp	r18, r15
    103c:	10 f4       	brcc	.+4      	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
    103e:	83 e0       	ldi	r24, 0x03	; 3
    1040:	b3 cf       	rjmp	.-154    	; 0xfa8 <vfprintf+0x69e>
    1042:	f1 2c       	mov	r15, r1
    1044:	b6 cf       	rjmp	.-148    	; 0xfb2 <vfprintf+0x6a8>
    1046:	64 96       	adiw	r28, 0x14	; 20
    1048:	e2 e1       	ldi	r30, 0x12	; 18
    104a:	0c 94 ed 2d 	jmp	0x5bda	; 0x5bda <__epilogue_restores__>

Disassembly of section .text.libgcc:

00006912 <__tablejump2__>:
    6912:	ee 0f       	add	r30, r30
    6914:	ff 1f       	adc	r31, r31
    6916:	05 90       	lpm	r0, Z+
    6918:	f4 91       	lpm	r31, Z
    691a:	e0 2d       	mov	r30, r0
    691c:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

0000633c <__umulhisi3>:
    633c:	a2 9f       	mul	r26, r18
    633e:	b0 01       	movw	r22, r0
    6340:	b3 9f       	mul	r27, r19
    6342:	c0 01       	movw	r24, r0
    6344:	a3 9f       	mul	r26, r19
    6346:	70 0d       	add	r23, r0
    6348:	81 1d       	adc	r24, r1
    634a:	11 24       	eor	r1, r1
    634c:	91 1d       	adc	r25, r1
    634e:	b2 9f       	mul	r27, r18
    6350:	70 0d       	add	r23, r0
    6352:	81 1d       	adc	r24, r1
    6354:	11 24       	eor	r1, r1
    6356:	91 1d       	adc	r25, r1
    6358:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00005b00 <__prologue_saves__>:
    5b00:	2f 92       	push	r2
    5b02:	3f 92       	push	r3
    5b04:	4f 92       	push	r4
    5b06:	5f 92       	push	r5
    5b08:	6f 92       	push	r6
    5b0a:	7f 92       	push	r7
    5b0c:	8f 92       	push	r8
    5b0e:	9f 92       	push	r9
    5b10:	af 92       	push	r10
    5b12:	bf 92       	push	r11
    5b14:	cf 92       	push	r12
    5b16:	df 92       	push	r13
    5b18:	ef 92       	push	r14
    5b1a:	ff 92       	push	r15
    5b1c:	0f 93       	push	r16
    5b1e:	1f 93       	push	r17
    5b20:	cf 93       	push	r28
    5b22:	df 93       	push	r29
    5b24:	cd b7       	in	r28, 0x3d	; 61
    5b26:	de b7       	in	r29, 0x3e	; 62
    5b28:	ca 1b       	sub	r28, r26
    5b2a:	db 0b       	sbc	r29, r27
    5b2c:	0f b6       	in	r0, 0x3f	; 63
    5b2e:	f8 94       	cli
    5b30:	de bf       	out	0x3e, r29	; 62
    5b32:	0f be       	out	0x3f, r0	; 63
    5b34:	cd bf       	out	0x3d, r28	; 61
    5b36:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00005bda <__epilogue_restores__>:
    5bda:	2a 88       	ldd	r2, Y+18	; 0x12
    5bdc:	39 88       	ldd	r3, Y+17	; 0x11
    5bde:	48 88       	ldd	r4, Y+16	; 0x10
    5be0:	5f 84       	ldd	r5, Y+15	; 0x0f
    5be2:	6e 84       	ldd	r6, Y+14	; 0x0e
    5be4:	7d 84       	ldd	r7, Y+13	; 0x0d
    5be6:	8c 84       	ldd	r8, Y+12	; 0x0c
    5be8:	9b 84       	ldd	r9, Y+11	; 0x0b
    5bea:	aa 84       	ldd	r10, Y+10	; 0x0a
    5bec:	b9 84       	ldd	r11, Y+9	; 0x09
    5bee:	c8 84       	ldd	r12, Y+8	; 0x08
    5bf0:	df 80       	ldd	r13, Y+7	; 0x07
    5bf2:	ee 80       	ldd	r14, Y+6	; 0x06
    5bf4:	fd 80       	ldd	r15, Y+5	; 0x05
    5bf6:	0c 81       	ldd	r16, Y+4	; 0x04
    5bf8:	1b 81       	ldd	r17, Y+3	; 0x03
    5bfa:	aa 81       	ldd	r26, Y+2	; 0x02
    5bfc:	b9 81       	ldd	r27, Y+1	; 0x01
    5bfe:	ce 0f       	add	r28, r30
    5c00:	d1 1d       	adc	r29, r1
    5c02:	0f b6       	in	r0, 0x3f	; 63
    5c04:	f8 94       	cli
    5c06:	de bf       	out	0x3e, r29	; 62
    5c08:	0f be       	out	0x3f, r0	; 63
    5c0a:	cd bf       	out	0x3d, r28	; 61
    5c0c:	ed 01       	movw	r28, r26
    5c0e:	08 95       	ret

Disassembly of section .text.avrlibc:

00006a00 <atoi>:
    6a00:	0e 94 1a 34 	call	0x6834	; 0x6834 <atol>
    6a04:	cb 01       	movw	r24, r22
    6a06:	08 95       	ret

Disassembly of section .text.avrlibc:

00006834 <atol>:
    6834:	2a e0       	ldi	r18, 0x0A	; 10
    6836:	30 e0       	ldi	r19, 0x00	; 0
    6838:	40 e0       	ldi	r20, 0x00	; 0
    683a:	50 e0       	ldi	r21, 0x00	; 0
    683c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <strtol>
    6840:	08 95       	ret

Disassembly of section .text.avrlibc:

000013d6 <strtol>:
    13d6:	2f 92       	push	r2
    13d8:	3f 92       	push	r3
    13da:	4f 92       	push	r4
    13dc:	5f 92       	push	r5
    13de:	6f 92       	push	r6
    13e0:	7f 92       	push	r7
    13e2:	8f 92       	push	r8
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <strtol+0x22>
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <strtol+0x24>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <strtol+0x26>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	3b 01       	movw	r6, r22
    1402:	88 2e       	mov	r8, r24
    1404:	5a 01       	movw	r10, r20
    1406:	19 01       	movw	r2, r18
    1408:	41 15       	cp	r20, r1
    140a:	51 05       	cpc	r21, r1
    140c:	21 f0       	breq	.+8      	; 0x1416 <strtol+0x40>
    140e:	fa 01       	movw	r30, r20
    1410:	60 83       	st	Z, r22
    1412:	71 83       	std	Z+1, r23	; 0x01
    1414:	82 83       	std	Z+2, r24	; 0x02
    1416:	21 14       	cp	r2, r1
    1418:	31 04       	cpc	r3, r1
    141a:	29 f0       	breq	.+10     	; 0x1426 <strtol+0x50>
    141c:	c1 01       	movw	r24, r2
    141e:	02 97       	sbiw	r24, 0x02	; 2
    1420:	83 97       	sbiw	r24, 0x23	; 35
    1422:	08 f0       	brcs	.+2      	; 0x1426 <strtol+0x50>
    1424:	1a c1       	rjmp	.+564    	; 0x165a <strtol+0x284>
    1426:	e8 2c       	mov	r14, r8
    1428:	63 01       	movw	r12, r6
    142a:	ff ef       	ldi	r31, 0xFF	; 255
    142c:	cf 1a       	sub	r12, r31
    142e:	df 0a       	sbc	r13, r31
    1430:	ef 0a       	sbc	r14, r31
    1432:	f3 01       	movw	r30, r6
    1434:	14 91       	lpm	r17, Z
    1436:	87 fc       	sbrc	r8, 7
    1438:	10 81       	ld	r17, Z
    143a:	81 2f       	mov	r24, r17
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 64 33 	call	0x66c8	; 0x66c8 <isspace>
    1442:	4c 2d       	mov	r20, r12
    1444:	3d 2d       	mov	r19, r13
    1446:	2e 2d       	mov	r18, r14
    1448:	89 2b       	or	r24, r25
    144a:	19 f0       	breq	.+6      	; 0x1452 <strtol+0x7c>
    144c:	36 01       	movw	r6, r12
    144e:	8e 2c       	mov	r8, r14
    1450:	ea cf       	rjmp	.-44     	; 0x1426 <strtol+0x50>
    1452:	1d 32       	cpi	r17, 0x2D	; 45
    1454:	69 f4       	brne	.+26     	; 0x1470 <strtol+0x9a>
    1456:	e8 2c       	mov	r14, r8
    1458:	63 01       	movw	r12, r6
    145a:	52 e0       	ldi	r21, 0x02	; 2
    145c:	c5 0e       	add	r12, r21
    145e:	d1 1c       	adc	r13, r1
    1460:	e1 1c       	adc	r14, r1
    1462:	e4 2f       	mov	r30, r20
    1464:	f3 2f       	mov	r31, r19
    1466:	14 91       	lpm	r17, Z
    1468:	27 fd       	sbrc	r18, 7
    146a:	10 81       	ld	r17, Z
    146c:	01 e0       	ldi	r16, 0x01	; 1
    146e:	0e c0       	rjmp	.+28     	; 0x148c <strtol+0xb6>
    1470:	1b 32       	cpi	r17, 0x2B	; 43
    1472:	59 f4       	brne	.+22     	; 0x148a <strtol+0xb4>
    1474:	e8 2c       	mov	r14, r8
    1476:	63 01       	movw	r12, r6
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	c8 0e       	add	r12, r24
    147c:	d1 1c       	adc	r13, r1
    147e:	e1 1c       	adc	r14, r1
    1480:	e4 2f       	mov	r30, r20
    1482:	f3 2f       	mov	r31, r19
    1484:	14 91       	lpm	r17, Z
    1486:	27 fd       	sbrc	r18, 7
    1488:	10 81       	ld	r17, Z
    148a:	00 e0       	ldi	r16, 0x00	; 0
    148c:	21 14       	cp	r2, r1
    148e:	31 04       	cpc	r3, r1
    1490:	09 f1       	breq	.+66     	; 0x14d4 <strtol+0xfe>
    1492:	90 e1       	ldi	r25, 0x10	; 16
    1494:	29 16       	cp	r2, r25
    1496:	31 04       	cpc	r3, r1
    1498:	29 f4       	brne	.+10     	; 0x14a4 <strtol+0xce>
    149a:	3f c0       	rjmp	.+126    	; 0x151a <strtol+0x144>
    149c:	10 e3       	ldi	r17, 0x30	; 48
    149e:	21 14       	cp	r2, r1
    14a0:	31 04       	cpc	r3, r1
    14a2:	21 f1       	breq	.+72     	; 0x14ec <strtol+0x116>
    14a4:	f8 e0       	ldi	r31, 0x08	; 8
    14a6:	2f 16       	cp	r2, r31
    14a8:	31 04       	cpc	r3, r1
    14aa:	01 f1       	breq	.+64     	; 0x14ec <strtol+0x116>
    14ac:	54 f4       	brge	.+20     	; 0x14c2 <strtol+0xec>
    14ae:	32 e0       	ldi	r19, 0x02	; 2
    14b0:	23 16       	cp	r2, r19
    14b2:	31 04       	cpc	r3, r1
    14b4:	21 f5       	brne	.+72     	; 0x14fe <strtol+0x128>
    14b6:	41 2c       	mov	r4, r1
    14b8:	51 2c       	mov	r5, r1
    14ba:	61 2c       	mov	r6, r1
    14bc:	50 e4       	ldi	r21, 0x40	; 64
    14be:	75 2e       	mov	r7, r21
    14c0:	4b c0       	rjmp	.+150    	; 0x1558 <strtol+0x182>
    14c2:	4a e0       	ldi	r20, 0x0A	; 10
    14c4:	24 16       	cp	r2, r20
    14c6:	31 04       	cpc	r3, r1
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <strtol+0x102>
    14ca:	50 e1       	ldi	r21, 0x10	; 16
    14cc:	25 16       	cp	r2, r21
    14ce:	31 04       	cpc	r3, r1
    14d0:	b1 f4       	brne	.+44     	; 0x14fe <strtol+0x128>
    14d2:	3d c0       	rjmp	.+122    	; 0x154e <strtol+0x178>
    14d4:	10 33       	cpi	r17, 0x30	; 48
    14d6:	19 f1       	breq	.+70     	; 0x151e <strtol+0x148>
    14d8:	3a e0       	ldi	r19, 0x0A	; 10
    14da:	23 2e       	mov	r2, r19
    14dc:	31 2c       	mov	r3, r1
    14de:	4c ec       	ldi	r20, 0xCC	; 204
    14e0:	44 2e       	mov	r4, r20
    14e2:	54 2c       	mov	r5, r4
    14e4:	64 2c       	mov	r6, r4
    14e6:	4c e0       	ldi	r20, 0x0C	; 12
    14e8:	74 2e       	mov	r7, r20
    14ea:	36 c0       	rjmp	.+108    	; 0x1558 <strtol+0x182>
    14ec:	98 e0       	ldi	r25, 0x08	; 8
    14ee:	29 2e       	mov	r2, r25
    14f0:	31 2c       	mov	r3, r1
    14f2:	41 2c       	mov	r4, r1
    14f4:	51 2c       	mov	r5, r1
    14f6:	61 2c       	mov	r6, r1
    14f8:	20 e1       	ldi	r18, 0x10	; 16
    14fa:	72 2e       	mov	r7, r18
    14fc:	2d c0       	rjmp	.+90     	; 0x1558 <strtol+0x182>
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e8       	ldi	r25, 0x80	; 128
    1506:	91 01       	movw	r18, r2
    1508:	03 2c       	mov	r0, r3
    150a:	00 0c       	add	r0, r0
    150c:	44 0b       	sbc	r20, r20
    150e:	55 0b       	sbc	r21, r21
    1510:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__udivmodsi4>
    1514:	29 01       	movw	r4, r18
    1516:	3a 01       	movw	r6, r20
    1518:	1f c0       	rjmp	.+62     	; 0x1558 <strtol+0x182>
    151a:	10 33       	cpi	r17, 0x30	; 48
    151c:	c1 f4       	brne	.+48     	; 0x154e <strtol+0x178>
    151e:	f6 01       	movw	r30, r12
    1520:	84 91       	lpm	r24, Z
    1522:	e7 fc       	sbrc	r14, 7
    1524:	80 81       	ld	r24, Z
    1526:	8f 7d       	andi	r24, 0xDF	; 223
    1528:	88 35       	cpi	r24, 0x58	; 88
    152a:	09 f0       	breq	.+2      	; 0x152e <strtol+0x158>
    152c:	b7 cf       	rjmp	.-146    	; 0x149c <strtol+0xc6>
    152e:	ae 2d       	mov	r26, r14
    1530:	c6 01       	movw	r24, r12
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	a1 1d       	adc	r26, r1
    1536:	fc 01       	movw	r30, r24
    1538:	14 91       	lpm	r17, Z
    153a:	a7 fd       	sbrc	r26, 7
    153c:	10 81       	ld	r17, Z
    153e:	e2 e0       	ldi	r30, 0x02	; 2
    1540:	ce 0e       	add	r12, r30
    1542:	d1 1c       	adc	r13, r1
    1544:	e1 1c       	adc	r14, r1
    1546:	02 60       	ori	r16, 0x02	; 2
    1548:	60 e1       	ldi	r22, 0x10	; 16
    154a:	26 2e       	mov	r2, r22
    154c:	31 2c       	mov	r3, r1
    154e:	41 2c       	mov	r4, r1
    1550:	51 2c       	mov	r5, r1
    1552:	61 2c       	mov	r6, r1
    1554:	88 e0       	ldi	r24, 0x08	; 8
    1556:	78 2e       	mov	r7, r24
    1558:	a0 e0       	ldi	r26, 0x00	; 0
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	cb 01       	movw	r24, r22
    1560:	91 01       	movw	r18, r2
    1562:	03 2c       	mov	r0, r3
    1564:	00 0c       	add	r0, r0
    1566:	44 0b       	sbc	r20, r20
    1568:	55 0b       	sbc	r21, r21
    156a:	29 83       	std	Y+1, r18	; 0x01
    156c:	3a 83       	std	Y+2, r19	; 0x02
    156e:	4b 83       	std	Y+3, r20	; 0x03
    1570:	5c 83       	std	Y+4, r21	; 0x04
    1572:	e0 ed       	ldi	r30, 0xD0	; 208
    1574:	e1 0f       	add	r30, r17
    1576:	ea 30       	cpi	r30, 0x0A	; 10
    1578:	60 f0       	brcs	.+24     	; 0x1592 <strtol+0x1bc>
    157a:	2f eb       	ldi	r18, 0xBF	; 191
    157c:	21 0f       	add	r18, r17
    157e:	2a 31       	cpi	r18, 0x1A	; 26
    1580:	10 f4       	brcc	.+4      	; 0x1586 <strtol+0x1b0>
    1582:	e9 ec       	ldi	r30, 0xC9	; 201
    1584:	05 c0       	rjmp	.+10     	; 0x1590 <strtol+0x1ba>
    1586:	2f e9       	ldi	r18, 0x9F	; 159
    1588:	21 0f       	add	r18, r17
    158a:	2a 31       	cpi	r18, 0x1A	; 26
    158c:	50 f5       	brcc	.+84     	; 0x15e2 <strtol+0x20c>
    158e:	e9 ea       	ldi	r30, 0xA9	; 169
    1590:	e1 0f       	add	r30, r17
    1592:	2e 2f       	mov	r18, r30
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	22 15       	cp	r18, r2
    1598:	33 05       	cpc	r19, r3
    159a:	1c f5       	brge	.+70     	; 0x15e2 <strtol+0x20c>
    159c:	a7 fd       	sbrc	r26, 7
    159e:	18 c0       	rjmp	.+48     	; 0x15d0 <strtol+0x1fa>
    15a0:	46 16       	cp	r4, r22
    15a2:	57 06       	cpc	r5, r23
    15a4:	68 06       	cpc	r6, r24
    15a6:	79 06       	cpc	r7, r25
    15a8:	80 f0       	brcs	.+32     	; 0x15ca <strtol+0x1f4>
    15aa:	29 81       	ldd	r18, Y+1	; 0x01
    15ac:	3a 81       	ldd	r19, Y+2	; 0x02
    15ae:	4b 81       	ldd	r20, Y+3	; 0x03
    15b0:	5c 81       	ldd	r21, Y+4	; 0x04
    15b2:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsi3>
    15b6:	6e 0f       	add	r22, r30
    15b8:	71 1d       	adc	r23, r1
    15ba:	81 1d       	adc	r24, r1
    15bc:	91 1d       	adc	r25, r1
    15be:	61 30       	cpi	r22, 0x01	; 1
    15c0:	71 05       	cpc	r23, r1
    15c2:	81 05       	cpc	r24, r1
    15c4:	30 e8       	ldi	r19, 0x80	; 128
    15c6:	93 07       	cpc	r25, r19
    15c8:	10 f0       	brcs	.+4      	; 0x15ce <strtol+0x1f8>
    15ca:	af ef       	ldi	r26, 0xFF	; 255
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <strtol+0x1fa>
    15ce:	a1 e0       	ldi	r26, 0x01	; 1
    15d0:	f6 01       	movw	r30, r12
    15d2:	14 91       	lpm	r17, Z
    15d4:	e7 fc       	sbrc	r14, 7
    15d6:	10 81       	ld	r17, Z
    15d8:	4f ef       	ldi	r20, 0xFF	; 255
    15da:	c4 1a       	sub	r12, r20
    15dc:	d4 0a       	sbc	r13, r20
    15de:	e4 0a       	sbc	r14, r20
    15e0:	c8 cf       	rjmp	.-112    	; 0x1572 <strtol+0x19c>
    15e2:	20 2f       	mov	r18, r16
    15e4:	21 70       	andi	r18, 0x01	; 1
    15e6:	a1 14       	cp	r10, r1
    15e8:	b1 04       	cpc	r11, r1
    15ea:	b1 f0       	breq	.+44     	; 0x1618 <strtol+0x242>
    15ec:	aa 23       	and	r26, r26
    15ee:	49 f0       	breq	.+18     	; 0x1602 <strtol+0x22c>
    15f0:	51 e0       	ldi	r21, 0x01	; 1
    15f2:	c5 1a       	sub	r12, r21
    15f4:	d1 08       	sbc	r13, r1
    15f6:	e1 08       	sbc	r14, r1
    15f8:	f5 01       	movw	r30, r10
    15fa:	c0 82       	st	Z, r12
    15fc:	d1 82       	std	Z+1, r13	; 0x01
    15fe:	e2 82       	std	Z+2, r14	; 0x02
    1600:	0b c0       	rjmp	.+22     	; 0x1618 <strtol+0x242>
    1602:	01 ff       	sbrs	r16, 1
    1604:	1d c0       	rjmp	.+58     	; 0x1640 <strtol+0x26a>
    1606:	f2 e0       	ldi	r31, 0x02	; 2
    1608:	cf 1a       	sub	r12, r31
    160a:	d1 08       	sbc	r13, r1
    160c:	e1 08       	sbc	r14, r1
    160e:	f5 01       	movw	r30, r10
    1610:	c0 82       	st	Z, r12
    1612:	d1 82       	std	Z+1, r13	; 0x01
    1614:	e2 82       	std	Z+2, r14	; 0x02
    1616:	14 c0       	rjmp	.+40     	; 0x1640 <strtol+0x26a>
    1618:	a7 ff       	sbrs	r26, 7
    161a:	12 c0       	rjmp	.+36     	; 0x1640 <strtol+0x26a>
    161c:	22 23       	and	r18, r18
    161e:	29 f0       	breq	.+10     	; 0x162a <strtol+0x254>
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e8       	ldi	r25, 0x80	; 128
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <strtol+0x25c>
    162a:	6f ef       	ldi	r22, 0xFF	; 255
    162c:	7f ef       	ldi	r23, 0xFF	; 255
    162e:	8f ef       	ldi	r24, 0xFF	; 255
    1630:	9f e7       	ldi	r25, 0x7F	; 127
    1632:	22 e2       	ldi	r18, 0x22	; 34
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	30 93 d7 07 	sts	0x07D7, r19	; 0x8007d7 <errno+0x1>
    163a:	20 93 d6 07 	sts	0x07D6, r18	; 0x8007d6 <errno>
    163e:	09 c0       	rjmp	.+18     	; 0x1652 <strtol+0x27c>
    1640:	22 23       	and	r18, r18
    1642:	81 f0       	breq	.+32     	; 0x1664 <strtol+0x28e>
    1644:	90 95       	com	r25
    1646:	80 95       	com	r24
    1648:	70 95       	com	r23
    164a:	61 95       	neg	r22
    164c:	7f 4f       	sbci	r23, 0xFF	; 255
    164e:	8f 4f       	sbci	r24, 0xFF	; 255
    1650:	9f 4f       	sbci	r25, 0xFF	; 255
    1652:	46 2f       	mov	r20, r22
    1654:	37 2f       	mov	r19, r23
    1656:	28 2f       	mov	r18, r24
    1658:	12 c0       	rjmp	.+36     	; 0x167e <strtol+0x2a8>
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0d c0       	rjmp	.+26     	; 0x167e <strtol+0x2a8>
    1664:	97 ff       	sbrs	r25, 7
    1666:	f5 cf       	rjmp	.-22     	; 0x1652 <strtol+0x27c>
    1668:	82 e2       	ldi	r24, 0x22	; 34
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <errno+0x1>
    1670:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <errno>
    1674:	6f ef       	ldi	r22, 0xFF	; 255
    1676:	7f ef       	ldi	r23, 0xFF	; 255
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	9f e7       	ldi	r25, 0x7F	; 127
    167c:	ea cf       	rjmp	.-44     	; 0x1652 <strtol+0x27c>
    167e:	64 2f       	mov	r22, r20
    1680:	73 2f       	mov	r23, r19
    1682:	82 2f       	mov	r24, r18
    1684:	26 96       	adiw	r28, 0x06	; 6
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	8f 90       	pop	r8
    16a4:	7f 90       	pop	r7
    16a6:	6f 90       	pop	r6
    16a8:	5f 90       	pop	r5
    16aa:	4f 90       	pop	r4
    16ac:	3f 90       	pop	r3
    16ae:	2f 90       	pop	r2
    16b0:	08 95       	ret

Disassembly of section .text.avrlibc:

00001df8 <__ftoa_engine>:
    1df8:	28 30       	cpi	r18, 0x08	; 8
    1dfa:	08 f0       	brcs	.+2      	; 0x1dfe <__ftoa_engine+0x6>
    1dfc:	27 e0       	ldi	r18, 0x07	; 7
    1dfe:	33 27       	eor	r19, r19
    1e00:	da 01       	movw	r26, r20
    1e02:	99 0f       	add	r25, r25
    1e04:	31 1d       	adc	r19, r1
    1e06:	87 fd       	sbrc	r24, 7
    1e08:	91 60       	ori	r25, 0x01	; 1
    1e0a:	00 96       	adiw	r24, 0x00	; 0
    1e0c:	61 05       	cpc	r22, r1
    1e0e:	71 05       	cpc	r23, r1
    1e10:	39 f4       	brne	.+14     	; 0x1e20 <__ftoa_engine+0x28>
    1e12:	32 60       	ori	r19, 0x02	; 2
    1e14:	2e 5f       	subi	r18, 0xFE	; 254
    1e16:	3d 93       	st	X+, r19
    1e18:	30 e3       	ldi	r19, 0x30	; 48
    1e1a:	2a 95       	dec	r18
    1e1c:	e1 f7       	brne	.-8      	; 0x1e16 <__ftoa_engine+0x1e>
    1e1e:	08 95       	ret
    1e20:	9f 3f       	cpi	r25, 0xFF	; 255
    1e22:	30 f0       	brcs	.+12     	; 0x1e30 <__ftoa_engine+0x38>
    1e24:	80 38       	cpi	r24, 0x80	; 128
    1e26:	71 05       	cpc	r23, r1
    1e28:	61 05       	cpc	r22, r1
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <__ftoa_engine+0x36>
    1e2c:	3c 5f       	subi	r19, 0xFC	; 252
    1e2e:	3c 5f       	subi	r19, 0xFC	; 252
    1e30:	3d 93       	st	X+, r19
    1e32:	91 30       	cpi	r25, 0x01	; 1
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <__ftoa_engine+0x40>
    1e36:	80 68       	ori	r24, 0x80	; 128
    1e38:	91 1d       	adc	r25, r1
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	1f 93       	push	r17
    1e40:	0f 93       	push	r16
    1e42:	ff 92       	push	r15
    1e44:	ef 92       	push	r14
    1e46:	19 2f       	mov	r17, r25
    1e48:	98 7f       	andi	r25, 0xF8	; 248
    1e4a:	96 95       	lsr	r25
    1e4c:	e9 2f       	mov	r30, r25
    1e4e:	96 95       	lsr	r25
    1e50:	96 95       	lsr	r25
    1e52:	e9 0f       	add	r30, r25
    1e54:	ff 27       	eor	r31, r31
    1e56:	e0 59       	subi	r30, 0x90	; 144
    1e58:	fe 4f       	sbci	r31, 0xFE	; 254
    1e5a:	99 27       	eor	r25, r25
    1e5c:	33 27       	eor	r19, r19
    1e5e:	ee 24       	eor	r14, r14
    1e60:	ff 24       	eor	r15, r15
    1e62:	a7 01       	movw	r20, r14
    1e64:	e7 01       	movw	r28, r14
    1e66:	05 90       	lpm	r0, Z+
    1e68:	08 94       	sec
    1e6a:	07 94       	ror	r0
    1e6c:	28 f4       	brcc	.+10     	; 0x1e78 <__ftoa_engine+0x80>
    1e6e:	36 0f       	add	r19, r22
    1e70:	e7 1e       	adc	r14, r23
    1e72:	f8 1e       	adc	r15, r24
    1e74:	49 1f       	adc	r20, r25
    1e76:	51 1d       	adc	r21, r1
    1e78:	66 0f       	add	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	88 1f       	adc	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	06 94       	lsr	r0
    1e82:	a1 f7       	brne	.-24     	; 0x1e6c <__ftoa_engine+0x74>
    1e84:	05 90       	lpm	r0, Z+
    1e86:	07 94       	ror	r0
    1e88:	28 f4       	brcc	.+10     	; 0x1e94 <__ftoa_engine+0x9c>
    1e8a:	e7 0e       	add	r14, r23
    1e8c:	f8 1e       	adc	r15, r24
    1e8e:	49 1f       	adc	r20, r25
    1e90:	56 1f       	adc	r21, r22
    1e92:	c1 1d       	adc	r28, r1
    1e94:	77 0f       	add	r23, r23
    1e96:	88 1f       	adc	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	66 1f       	adc	r22, r22
    1e9c:	06 94       	lsr	r0
    1e9e:	a1 f7       	brne	.-24     	; 0x1e88 <__ftoa_engine+0x90>
    1ea0:	05 90       	lpm	r0, Z+
    1ea2:	07 94       	ror	r0
    1ea4:	28 f4       	brcc	.+10     	; 0x1eb0 <__ftoa_engine+0xb8>
    1ea6:	f8 0e       	add	r15, r24
    1ea8:	49 1f       	adc	r20, r25
    1eaa:	56 1f       	adc	r21, r22
    1eac:	c7 1f       	adc	r28, r23
    1eae:	d1 1d       	adc	r29, r1
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	66 1f       	adc	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	06 94       	lsr	r0
    1eba:	a1 f7       	brne	.-24     	; 0x1ea4 <__ftoa_engine+0xac>
    1ebc:	05 90       	lpm	r0, Z+
    1ebe:	07 94       	ror	r0
    1ec0:	20 f4       	brcc	.+8      	; 0x1eca <__ftoa_engine+0xd2>
    1ec2:	49 0f       	add	r20, r25
    1ec4:	56 1f       	adc	r21, r22
    1ec6:	c7 1f       	adc	r28, r23
    1ec8:	d8 1f       	adc	r29, r24
    1eca:	99 0f       	add	r25, r25
    1ecc:	66 1f       	adc	r22, r22
    1ece:	77 1f       	adc	r23, r23
    1ed0:	88 1f       	adc	r24, r24
    1ed2:	06 94       	lsr	r0
    1ed4:	a9 f7       	brne	.-22     	; 0x1ec0 <__ftoa_engine+0xc8>
    1ed6:	84 91       	lpm	r24, Z
    1ed8:	10 95       	com	r17
    1eda:	17 70       	andi	r17, 0x07	; 7
    1edc:	41 f0       	breq	.+16     	; 0x1eee <__ftoa_engine+0xf6>
    1ede:	d6 95       	lsr	r29
    1ee0:	c7 95       	ror	r28
    1ee2:	57 95       	ror	r21
    1ee4:	47 95       	ror	r20
    1ee6:	f7 94       	ror	r15
    1ee8:	e7 94       	ror	r14
    1eea:	1a 95       	dec	r17
    1eec:	c1 f7       	brne	.-16     	; 0x1ede <__ftoa_engine+0xe6>
    1eee:	e6 e1       	ldi	r30, 0x16	; 22
    1ef0:	f1 e0       	ldi	r31, 0x01	; 1
    1ef2:	68 94       	set
    1ef4:	15 90       	lpm	r1, Z+
    1ef6:	15 91       	lpm	r17, Z+
    1ef8:	35 91       	lpm	r19, Z+
    1efa:	65 91       	lpm	r22, Z+
    1efc:	95 91       	lpm	r25, Z+
    1efe:	05 90       	lpm	r0, Z+
    1f00:	7f e2       	ldi	r23, 0x2F	; 47
    1f02:	73 95       	inc	r23
    1f04:	e1 18       	sub	r14, r1
    1f06:	f1 0a       	sbc	r15, r17
    1f08:	43 0b       	sbc	r20, r19
    1f0a:	56 0b       	sbc	r21, r22
    1f0c:	c9 0b       	sbc	r28, r25
    1f0e:	d0 09       	sbc	r29, r0
    1f10:	c0 f7       	brcc	.-16     	; 0x1f02 <__ftoa_engine+0x10a>
    1f12:	e1 0c       	add	r14, r1
    1f14:	f1 1e       	adc	r15, r17
    1f16:	43 1f       	adc	r20, r19
    1f18:	56 1f       	adc	r21, r22
    1f1a:	c9 1f       	adc	r28, r25
    1f1c:	d0 1d       	adc	r29, r0
    1f1e:	7e f4       	brtc	.+30     	; 0x1f3e <__ftoa_engine+0x146>
    1f20:	70 33       	cpi	r23, 0x30	; 48
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <__ftoa_engine+0x130>
    1f24:	8a 95       	dec	r24
    1f26:	e6 cf       	rjmp	.-52     	; 0x1ef4 <__ftoa_engine+0xfc>
    1f28:	e8 94       	clt
    1f2a:	01 50       	subi	r16, 0x01	; 1
    1f2c:	30 f0       	brcs	.+12     	; 0x1f3a <__ftoa_engine+0x142>
    1f2e:	08 0f       	add	r16, r24
    1f30:	0a f4       	brpl	.+2      	; 0x1f34 <__ftoa_engine+0x13c>
    1f32:	00 27       	eor	r16, r16
    1f34:	02 17       	cp	r16, r18
    1f36:	08 f4       	brcc	.+2      	; 0x1f3a <__ftoa_engine+0x142>
    1f38:	20 2f       	mov	r18, r16
    1f3a:	23 95       	inc	r18
    1f3c:	02 2f       	mov	r16, r18
    1f3e:	7a 33       	cpi	r23, 0x3A	; 58
    1f40:	28 f0       	brcs	.+10     	; 0x1f4c <__ftoa_engine+0x154>
    1f42:	79 e3       	ldi	r23, 0x39	; 57
    1f44:	7d 93       	st	X+, r23
    1f46:	2a 95       	dec	r18
    1f48:	e9 f7       	brne	.-6      	; 0x1f44 <__ftoa_engine+0x14c>
    1f4a:	10 c0       	rjmp	.+32     	; 0x1f6c <__ftoa_engine+0x174>
    1f4c:	7d 93       	st	X+, r23
    1f4e:	2a 95       	dec	r18
    1f50:	89 f6       	brne	.-94     	; 0x1ef4 <__ftoa_engine+0xfc>
    1f52:	06 94       	lsr	r0
    1f54:	97 95       	ror	r25
    1f56:	67 95       	ror	r22
    1f58:	37 95       	ror	r19
    1f5a:	17 95       	ror	r17
    1f5c:	17 94       	ror	r1
    1f5e:	e1 18       	sub	r14, r1
    1f60:	f1 0a       	sbc	r15, r17
    1f62:	43 0b       	sbc	r20, r19
    1f64:	56 0b       	sbc	r21, r22
    1f66:	c9 0b       	sbc	r28, r25
    1f68:	d0 09       	sbc	r29, r0
    1f6a:	98 f0       	brcs	.+38     	; 0x1f92 <__ftoa_engine+0x19a>
    1f6c:	23 95       	inc	r18
    1f6e:	7e 91       	ld	r23, -X
    1f70:	73 95       	inc	r23
    1f72:	7a 33       	cpi	r23, 0x3A	; 58
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <__ftoa_engine+0x180>
    1f76:	70 e3       	ldi	r23, 0x30	; 48
    1f78:	7c 93       	st	X, r23
    1f7a:	20 13       	cpse	r18, r16
    1f7c:	b8 f7       	brcc	.-18     	; 0x1f6c <__ftoa_engine+0x174>
    1f7e:	7e 91       	ld	r23, -X
    1f80:	70 61       	ori	r23, 0x10	; 16
    1f82:	7d 93       	st	X+, r23
    1f84:	30 f0       	brcs	.+12     	; 0x1f92 <__ftoa_engine+0x19a>
    1f86:	83 95       	inc	r24
    1f88:	71 e3       	ldi	r23, 0x31	; 49
    1f8a:	7d 93       	st	X+, r23
    1f8c:	70 e3       	ldi	r23, 0x30	; 48
    1f8e:	2a 95       	dec	r18
    1f90:	e1 f7       	brne	.-8      	; 0x1f8a <__ftoa_engine+0x192>
    1f92:	11 24       	eor	r1, r1
    1f94:	ef 90       	pop	r14
    1f96:	ff 90       	pop	r15
    1f98:	0f 91       	pop	r16
    1f9a:	1f 91       	pop	r17
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	99 27       	eor	r25, r25
    1fa2:	87 fd       	sbrc	r24, 7
    1fa4:	90 95       	com	r25
    1fa6:	08 95       	ret

Disassembly of section .text.avrlibc:

000066c8 <isspace>:
    66c8:	91 11       	cpse	r25, r1
    66ca:	0c 94 1f 35 	jmp	0x6a3e	; 0x6a3e <__ctype_isfalse>
    66ce:	80 32       	cpi	r24, 0x20	; 32
    66d0:	19 f0       	breq	.+6      	; 0x66d8 <isspace+0x10>
    66d2:	89 50       	subi	r24, 0x09	; 9
    66d4:	85 50       	subi	r24, 0x05	; 5
    66d6:	c8 f7       	brcc	.-14     	; 0x66ca <isspace+0x2>
    66d8:	08 95       	ret

Disassembly of section .text.avrlibc:

00005d44 <memcpy>:
    5d44:	cf 92       	push	r12
    5d46:	df 92       	push	r13
    5d48:	ef 92       	push	r14
    5d4a:	dc 01       	movw	r26, r24
    5d4c:	6a 01       	movw	r12, r20
    5d4e:	e6 2e       	mov	r14, r22
    5d50:	28 0f       	add	r18, r24
    5d52:	39 1f       	adc	r19, r25
    5d54:	a2 17       	cp	r26, r18
    5d56:	b3 07       	cpc	r27, r19
    5d58:	51 f0       	breq	.+20     	; 0x5d6e <memcpy+0x2a>
    5d5a:	f6 01       	movw	r30, r12
    5d5c:	44 91       	lpm	r20, Z
    5d5e:	e7 fc       	sbrc	r14, 7
    5d60:	40 81       	ld	r20, Z
    5d62:	4d 93       	st	X+, r20
    5d64:	4f ef       	ldi	r20, 0xFF	; 255
    5d66:	c4 1a       	sub	r12, r20
    5d68:	d4 0a       	sbc	r13, r20
    5d6a:	e4 0a       	sbc	r14, r20
    5d6c:	f3 cf       	rjmp	.-26     	; 0x5d54 <memcpy+0x10>
    5d6e:	ef 90       	pop	r14
    5d70:	df 90       	pop	r13
    5d72:	cf 90       	pop	r12
    5d74:	08 95       	ret

Disassembly of section .text.avrlibc:

00005fb0 <strcat>:
    5fb0:	9a 01       	movw	r18, r20
    5fb2:	46 2f       	mov	r20, r22
    5fb4:	dc 01       	movw	r26, r24
    5fb6:	bd 01       	movw	r22, r26
    5fb8:	6f 5f       	subi	r22, 0xFF	; 255
    5fba:	7f 4f       	sbci	r23, 0xFF	; 255
    5fbc:	5c 91       	ld	r21, X
    5fbe:	55 23       	and	r21, r21
    5fc0:	11 f0       	breq	.+4      	; 0x5fc6 <strcat+0x16>
    5fc2:	db 01       	movw	r26, r22
    5fc4:	f8 cf       	rjmp	.-16     	; 0x5fb6 <strcat+0x6>
    5fc6:	f9 01       	movw	r30, r18
    5fc8:	54 91       	lpm	r21, Z
    5fca:	47 fd       	sbrc	r20, 7
    5fcc:	50 81       	ld	r21, Z
    5fce:	5d 93       	st	X+, r21
    5fd0:	55 23       	and	r21, r21
    5fd2:	21 f0       	breq	.+8      	; 0x5fdc <strcat+0x2c>
    5fd4:	2f 5f       	subi	r18, 0xFF	; 255
    5fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd8:	4f 4f       	sbci	r20, 0xFF	; 255
    5fda:	f5 cf       	rjmp	.-22     	; 0x5fc6 <strcat+0x16>
    5fdc:	08 95       	ret

Disassembly of section .text.avrlibc:

00005800 <strcmp>:
    5800:	cf 92       	push	r12
    5802:	df 92       	push	r13
    5804:	ef 92       	push	r14
    5806:	6b 01       	movw	r12, r22
    5808:	e8 2e       	mov	r14, r24
    580a:	f6 01       	movw	r30, r12
    580c:	84 91       	lpm	r24, Z
    580e:	e7 fc       	sbrc	r14, 7
    5810:	80 81       	ld	r24, Z
    5812:	f9 01       	movw	r30, r18
    5814:	54 91       	lpm	r21, Z
    5816:	47 fd       	sbrc	r20, 7
    5818:	50 81       	ld	r21, Z
    581a:	85 13       	cpse	r24, r21
    581c:	0b c0       	rjmp	.+22     	; 0x5834 <strcmp+0x34>
    581e:	88 23       	and	r24, r24
    5820:	41 f0       	breq	.+16     	; 0x5832 <strcmp+0x32>
    5822:	8f ef       	ldi	r24, 0xFF	; 255
    5824:	c8 1a       	sub	r12, r24
    5826:	d8 0a       	sbc	r13, r24
    5828:	e8 0a       	sbc	r14, r24
    582a:	2f 5f       	subi	r18, 0xFF	; 255
    582c:	3f 4f       	sbci	r19, 0xFF	; 255
    582e:	4f 4f       	sbci	r20, 0xFF	; 255
    5830:	ec cf       	rjmp	.-40     	; 0x580a <strcmp+0xa>
    5832:	58 2f       	mov	r21, r24
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	85 1b       	sub	r24, r21
    5838:	91 09       	sbc	r25, r1
    583a:	ef 90       	pop	r14
    583c:	df 90       	pop	r13
    583e:	cf 90       	pop	r12
    5840:	08 95       	ret

Disassembly of section .text.avrlibc:

00004990 <strncmp>:
    4990:	cf 92       	push	r12
    4992:	df 92       	push	r13
    4994:	ef 92       	push	r14
    4996:	0f 93       	push	r16
    4998:	1f 93       	push	r17
    499a:	6b 01       	movw	r12, r22
    499c:	e8 2e       	mov	r14, r24
    499e:	01 15       	cp	r16, r1
    49a0:	11 05       	cpc	r17, r1
    49a2:	19 f1       	breq	.+70     	; 0x49ea <strncmp+0x5a>
    49a4:	01 50       	subi	r16, 0x01	; 1
    49a6:	11 09       	sbc	r17, r1
    49a8:	f6 01       	movw	r30, r12
    49aa:	84 91       	lpm	r24, Z
    49ac:	e7 fc       	sbrc	r14, 7
    49ae:	80 81       	ld	r24, Z
    49b0:	88 23       	and	r24, r24
    49b2:	99 f0       	breq	.+38     	; 0x49da <strncmp+0x4a>
    49b4:	f9 01       	movw	r30, r18
    49b6:	94 91       	lpm	r25, Z
    49b8:	47 fd       	sbrc	r20, 7
    49ba:	90 81       	ld	r25, Z
    49bc:	99 23       	and	r25, r25
    49be:	69 f0       	breq	.+26     	; 0x49da <strncmp+0x4a>
    49c0:	01 15       	cp	r16, r1
    49c2:	11 05       	cpc	r17, r1
    49c4:	51 f0       	breq	.+20     	; 0x49da <strncmp+0x4a>
    49c6:	89 13       	cpse	r24, r25
    49c8:	08 c0       	rjmp	.+16     	; 0x49da <strncmp+0x4a>
    49ca:	8f ef       	ldi	r24, 0xFF	; 255
    49cc:	c8 1a       	sub	r12, r24
    49ce:	d8 0a       	sbc	r13, r24
    49d0:	e8 0a       	sbc	r14, r24
    49d2:	2f 5f       	subi	r18, 0xFF	; 255
    49d4:	3f 4f       	sbci	r19, 0xFF	; 255
    49d6:	4f 4f       	sbci	r20, 0xFF	; 255
    49d8:	e5 cf       	rjmp	.-54     	; 0x49a4 <strncmp+0x14>
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	f9 01       	movw	r30, r18
    49de:	24 91       	lpm	r18, Z
    49e0:	47 fd       	sbrc	r20, 7
    49e2:	20 81       	ld	r18, Z
    49e4:	82 1b       	sub	r24, r18
    49e6:	91 09       	sbc	r25, r1
    49e8:	02 c0       	rjmp	.+4      	; 0x49ee <strncmp+0x5e>
    49ea:	80 e0       	ldi	r24, 0x00	; 0
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	1f 91       	pop	r17
    49f0:	0f 91       	pop	r16
    49f2:	ef 90       	pop	r14
    49f4:	df 90       	pop	r13
    49f6:	cf 90       	pop	r12
    49f8:	08 95       	ret

Disassembly of section .text.avrlibc:

00005fde <strlen>:
    5fde:	cf 92       	push	r12
    5fe0:	df 92       	push	r13
    5fe2:	ef 92       	push	r14
    5fe4:	6b 01       	movw	r12, r22
    5fe6:	e8 2e       	mov	r14, r24
    5fe8:	a8 2f       	mov	r26, r24
    5fea:	cb 01       	movw	r24, r22
    5fec:	fc 01       	movw	r30, r24
    5fee:	24 91       	lpm	r18, Z
    5ff0:	a7 fd       	sbrc	r26, 7
    5ff2:	20 81       	ld	r18, Z
    5ff4:	22 23       	and	r18, r18
    5ff6:	19 f0       	breq	.+6      	; 0x5ffe <strlen+0x20>
    5ff8:	01 96       	adiw	r24, 0x01	; 1
    5ffa:	a1 1d       	adc	r26, r1
    5ffc:	f7 cf       	rjmp	.-18     	; 0x5fec <strlen+0xe>
    5ffe:	8c 19       	sub	r24, r12
    6000:	9d 09       	sbc	r25, r13
    6002:	ef 90       	pop	r14
    6004:	df 90       	pop	r13
    6006:	cf 90       	pop	r12
    6008:	08 95       	ret

Disassembly of section .text.avrlibc:

0000635a <strcpy>:
    635a:	9a 01       	movw	r18, r20
    635c:	46 2f       	mov	r20, r22
    635e:	dc 01       	movw	r26, r24
    6360:	f9 01       	movw	r30, r18
    6362:	54 91       	lpm	r21, Z
    6364:	47 fd       	sbrc	r20, 7
    6366:	50 81       	ld	r21, Z
    6368:	5d 93       	st	X+, r21
    636a:	55 23       	and	r21, r21
    636c:	21 f0       	breq	.+8      	; 0x6376 <strcpy+0x1c>
    636e:	2f 5f       	subi	r18, 0xFF	; 255
    6370:	3f 4f       	sbci	r19, 0xFF	; 255
    6372:	4f 4f       	sbci	r20, 0xFF	; 255
    6374:	f5 cf       	rjmp	.-22     	; 0x6360 <strcpy+0x6>
    6376:	08 95       	ret

Disassembly of section .text.avrlibc:

00005c10 <strnlen>:
    5c10:	cf 92       	push	r12
    5c12:	df 92       	push	r13
    5c14:	ef 92       	push	r14
    5c16:	6b 01       	movw	r12, r22
    5c18:	e8 2e       	mov	r14, r24
    5c1a:	a8 2f       	mov	r26, r24
    5c1c:	cb 01       	movw	r24, r22
    5c1e:	41 15       	cp	r20, r1
    5c20:	51 05       	cpc	r21, r1
    5c22:	31 f4       	brne	.+12     	; 0x5c30 <strnlen+0x20>
    5c24:	8c 19       	sub	r24, r12
    5c26:	9d 09       	sbc	r25, r13
    5c28:	ef 90       	pop	r14
    5c2a:	df 90       	pop	r13
    5c2c:	cf 90       	pop	r12
    5c2e:	08 95       	ret
    5c30:	fc 01       	movw	r30, r24
    5c32:	24 91       	lpm	r18, Z
    5c34:	a7 fd       	sbrc	r26, 7
    5c36:	20 81       	ld	r18, Z
    5c38:	22 23       	and	r18, r18
    5c3a:	a1 f3       	breq	.-24     	; 0x5c24 <strnlen+0x14>
    5c3c:	01 96       	adiw	r24, 0x01	; 1
    5c3e:	a1 1d       	adc	r26, r1
    5c40:	41 50       	subi	r20, 0x01	; 1
    5c42:	51 09       	sbc	r21, r1
    5c44:	ec cf       	rjmp	.-40     	; 0x5c1e <strnlen+0xe>

Disassembly of section .text.avrlibc:

0000459a <fputc>:
    459a:	0f 93       	push	r16
    459c:	1f 93       	push	r17
    459e:	cf 93       	push	r28
    45a0:	df 93       	push	r29
    45a2:	fb 01       	movw	r30, r22
    45a4:	24 81       	ldd	r18, Z+4	; 0x04
    45a6:	21 fd       	sbrc	r18, 1
    45a8:	03 c0       	rjmp	.+6      	; 0x45b0 <fputc+0x16>
    45aa:	8f ef       	ldi	r24, 0xFF	; 255
    45ac:	9f ef       	ldi	r25, 0xFF	; 255
    45ae:	2c c0       	rjmp	.+88     	; 0x4608 <fputc+0x6e>
    45b0:	22 ff       	sbrs	r18, 2
    45b2:	16 c0       	rjmp	.+44     	; 0x45e0 <fputc+0x46>
    45b4:	47 81       	ldd	r20, Z+7	; 0x07
    45b6:	50 85       	ldd	r21, Z+8	; 0x08
    45b8:	25 81       	ldd	r18, Z+5	; 0x05
    45ba:	36 81       	ldd	r19, Z+6	; 0x06
    45bc:	42 17       	cp	r20, r18
    45be:	53 07       	cpc	r21, r19
    45c0:	44 f4       	brge	.+16     	; 0x45d2 <fputc+0x38>
    45c2:	a0 81       	ld	r26, Z
    45c4:	b1 81       	ldd	r27, Z+1	; 0x01
    45c6:	9d 01       	movw	r18, r26
    45c8:	2f 5f       	subi	r18, 0xFF	; 255
    45ca:	3f 4f       	sbci	r19, 0xFF	; 255
    45cc:	31 83       	std	Z+1, r19	; 0x01
    45ce:	20 83       	st	Z, r18
    45d0:	8c 93       	st	X, r24
    45d2:	27 81       	ldd	r18, Z+7	; 0x07
    45d4:	30 85       	ldd	r19, Z+8	; 0x08
    45d6:	2f 5f       	subi	r18, 0xFF	; 255
    45d8:	3f 4f       	sbci	r19, 0xFF	; 255
    45da:	30 87       	std	Z+8, r19	; 0x08
    45dc:	27 83       	std	Z+7, r18	; 0x07
    45de:	14 c0       	rjmp	.+40     	; 0x4608 <fputc+0x6e>
    45e0:	8b 01       	movw	r16, r22
    45e2:	ec 01       	movw	r28, r24
    45e4:	fb 01       	movw	r30, r22
    45e6:	01 84       	ldd	r0, Z+9	; 0x09
    45e8:	f2 85       	ldd	r31, Z+10	; 0x0a
    45ea:	e0 2d       	mov	r30, r0
    45ec:	09 95       	icall
    45ee:	89 2b       	or	r24, r25
    45f0:	e1 f6       	brne	.-72     	; 0x45aa <fputc+0x10>
    45f2:	d8 01       	movw	r26, r16
    45f4:	17 96       	adiw	r26, 0x07	; 7
    45f6:	8d 91       	ld	r24, X+
    45f8:	9c 91       	ld	r25, X
    45fa:	18 97       	sbiw	r26, 0x08	; 8
    45fc:	01 96       	adiw	r24, 0x01	; 1
    45fe:	18 96       	adiw	r26, 0x08	; 8
    4600:	9c 93       	st	X, r25
    4602:	8e 93       	st	-X, r24
    4604:	17 97       	sbiw	r26, 0x07	; 7
    4606:	ce 01       	movw	r24, r28
    4608:	df 91       	pop	r29
    460a:	cf 91       	pop	r28
    460c:	1f 91       	pop	r17
    460e:	0f 91       	pop	r16
    4610:	08 95       	ret

Disassembly of section .text.avrlibc:

0000566a <sprintf>:
    566a:	af e0       	ldi	r26, 0x0F	; 15
    566c:	b0 e0       	ldi	r27, 0x00	; 0
    566e:	eb e3       	ldi	r30, 0x3B	; 59
    5670:	fb e2       	ldi	r31, 0x2B	; 43
    5672:	0c 94 8e 2d 	jmp	0x5b1c	; 0x5b1c <__prologue_saves__+0x1c>
    5676:	0e 89       	ldd	r16, Y+22	; 0x16
    5678:	1f 89       	ldd	r17, Y+23	; 0x17
    567a:	86 e0       	ldi	r24, 0x06	; 6
    567c:	8d 83       	std	Y+5, r24	; 0x05
    567e:	1a 83       	std	Y+2, r17	; 0x02
    5680:	09 83       	std	Y+1, r16	; 0x01
    5682:	8f ef       	ldi	r24, 0xFF	; 255
    5684:	9f e7       	ldi	r25, 0x7F	; 127
    5686:	9f 83       	std	Y+7, r25	; 0x07
    5688:	8e 83       	std	Y+6, r24	; 0x06
    568a:	9e 01       	movw	r18, r28
    568c:	25 5e       	subi	r18, 0xE5	; 229
    568e:	3f 4f       	sbci	r19, 0xFF	; 255
    5690:	48 8d       	ldd	r20, Y+24	; 0x18
    5692:	59 8d       	ldd	r21, Y+25	; 0x19
    5694:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5696:	ce 01       	movw	r24, r28
    5698:	01 96       	adiw	r24, 0x01	; 1
    569a:	0e 94 85 04 	call	0x90a	; 0x90a <vfprintf>
    569e:	e8 85       	ldd	r30, Y+8	; 0x08
    56a0:	f9 85       	ldd	r31, Y+9	; 0x09
    56a2:	e0 0f       	add	r30, r16
    56a4:	f1 1f       	adc	r31, r17
    56a6:	10 82       	st	Z, r1
    56a8:	2f 96       	adiw	r28, 0x0f	; 15
    56aa:	e4 e0       	ldi	r30, 0x04	; 4
    56ac:	0c 94 fb 2d 	jmp	0x5bf6	; 0x5bf6 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00003712 <__ultoa_invert>:
    3712:	fa 01       	movw	r30, r20
    3714:	aa 27       	eor	r26, r26
    3716:	28 30       	cpi	r18, 0x08	; 8
    3718:	51 f1       	breq	.+84     	; 0x376e <__ultoa_invert+0x5c>
    371a:	20 31       	cpi	r18, 0x10	; 16
    371c:	81 f1       	breq	.+96     	; 0x377e <__ultoa_invert+0x6c>
    371e:	e8 94       	clt
    3720:	6f 93       	push	r22
    3722:	6e 7f       	andi	r22, 0xFE	; 254
    3724:	6e 5f       	subi	r22, 0xFE	; 254
    3726:	7f 4f       	sbci	r23, 0xFF	; 255
    3728:	8f 4f       	sbci	r24, 0xFF	; 255
    372a:	9f 4f       	sbci	r25, 0xFF	; 255
    372c:	af 4f       	sbci	r26, 0xFF	; 255
    372e:	b1 e0       	ldi	r27, 0x01	; 1
    3730:	3e d0       	rcall	.+124    	; 0x37ae <__ultoa_invert+0x9c>
    3732:	b4 e0       	ldi	r27, 0x04	; 4
    3734:	3c d0       	rcall	.+120    	; 0x37ae <__ultoa_invert+0x9c>
    3736:	67 0f       	add	r22, r23
    3738:	78 1f       	adc	r23, r24
    373a:	89 1f       	adc	r24, r25
    373c:	9a 1f       	adc	r25, r26
    373e:	a1 1d       	adc	r26, r1
    3740:	68 0f       	add	r22, r24
    3742:	79 1f       	adc	r23, r25
    3744:	8a 1f       	adc	r24, r26
    3746:	91 1d       	adc	r25, r1
    3748:	a1 1d       	adc	r26, r1
    374a:	6a 0f       	add	r22, r26
    374c:	71 1d       	adc	r23, r1
    374e:	81 1d       	adc	r24, r1
    3750:	91 1d       	adc	r25, r1
    3752:	a1 1d       	adc	r26, r1
    3754:	20 d0       	rcall	.+64     	; 0x3796 <__ultoa_invert+0x84>
    3756:	09 f4       	brne	.+2      	; 0x375a <__ultoa_invert+0x48>
    3758:	68 94       	set
    375a:	3f 91       	pop	r19
    375c:	2a e0       	ldi	r18, 0x0A	; 10
    375e:	26 9f       	mul	r18, r22
    3760:	11 24       	eor	r1, r1
    3762:	30 19       	sub	r19, r0
    3764:	30 5d       	subi	r19, 0xD0	; 208
    3766:	31 93       	st	Z+, r19
    3768:	de f6       	brtc	.-74     	; 0x3720 <__ultoa_invert+0xe>
    376a:	cf 01       	movw	r24, r30
    376c:	08 95       	ret
    376e:	46 2f       	mov	r20, r22
    3770:	47 70       	andi	r20, 0x07	; 7
    3772:	40 5d       	subi	r20, 0xD0	; 208
    3774:	41 93       	st	Z+, r20
    3776:	b3 e0       	ldi	r27, 0x03	; 3
    3778:	0f d0       	rcall	.+30     	; 0x3798 <__ultoa_invert+0x86>
    377a:	c9 f7       	brne	.-14     	; 0x376e <__ultoa_invert+0x5c>
    377c:	f6 cf       	rjmp	.-20     	; 0x376a <__ultoa_invert+0x58>
    377e:	46 2f       	mov	r20, r22
    3780:	4f 70       	andi	r20, 0x0F	; 15
    3782:	40 5d       	subi	r20, 0xD0	; 208
    3784:	4a 33       	cpi	r20, 0x3A	; 58
    3786:	18 f0       	brcs	.+6      	; 0x378e <__ultoa_invert+0x7c>
    3788:	49 5d       	subi	r20, 0xD9	; 217
    378a:	31 fd       	sbrc	r19, 1
    378c:	40 52       	subi	r20, 0x20	; 32
    378e:	41 93       	st	Z+, r20
    3790:	02 d0       	rcall	.+4      	; 0x3796 <__ultoa_invert+0x84>
    3792:	a9 f7       	brne	.-22     	; 0x377e <__ultoa_invert+0x6c>
    3794:	ea cf       	rjmp	.-44     	; 0x376a <__ultoa_invert+0x58>
    3796:	b4 e0       	ldi	r27, 0x04	; 4
    3798:	a6 95       	lsr	r26
    379a:	97 95       	ror	r25
    379c:	87 95       	ror	r24
    379e:	77 95       	ror	r23
    37a0:	67 95       	ror	r22
    37a2:	ba 95       	dec	r27
    37a4:	c9 f7       	brne	.-14     	; 0x3798 <__ultoa_invert+0x86>
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	61 05       	cpc	r22, r1
    37aa:	71 05       	cpc	r23, r1
    37ac:	08 95       	ret
    37ae:	9b 01       	movw	r18, r22
    37b0:	ac 01       	movw	r20, r24
    37b2:	0a 2e       	mov	r0, r26
    37b4:	06 94       	lsr	r0
    37b6:	57 95       	ror	r21
    37b8:	47 95       	ror	r20
    37ba:	37 95       	ror	r19
    37bc:	27 95       	ror	r18
    37be:	ba 95       	dec	r27
    37c0:	c9 f7       	brne	.-14     	; 0x37b4 <__ultoa_invert+0xa2>
    37c2:	62 0f       	add	r22, r18
    37c4:	73 1f       	adc	r23, r19
    37c6:	84 1f       	adc	r24, r20
    37c8:	95 1f       	adc	r25, r21
    37ca:	a0 1d       	adc	r26, r0
    37cc:	08 95       	ret

Disassembly of section .text.avrlibc:

00006a3e <__ctype_isfalse>:
    6a3e:	99 27       	eor	r25, r25
    6a40:	88 27       	eor	r24, r24

00006a42 <__ctype_istrue>:
    6a42:	08 95       	ret

Disassembly of section .text.avrlibc:

000060d0 <eeprom_read_block>:
    60d0:	ba 01       	movw	r22, r20
    60d2:	a9 01       	movw	r20, r18
    60d4:	dc 01       	movw	r26, r24
    60d6:	cb 01       	movw	r24, r22

000060d8 <eeprom_read_blraw>:
    60d8:	fc 01       	movw	r30, r24
    60da:	f9 99       	sbic	0x1f, 1	; 31
    60dc:	fe cf       	rjmp	.-4      	; 0x60da <eeprom_read_blraw+0x2>
    60de:	06 c0       	rjmp	.+12     	; 0x60ec <eeprom_read_blraw+0x14>
    60e0:	f2 bd       	out	0x22, r31	; 34
    60e2:	e1 bd       	out	0x21, r30	; 33
    60e4:	f8 9a       	sbi	0x1f, 0	; 31
    60e6:	31 96       	adiw	r30, 0x01	; 1
    60e8:	00 b4       	in	r0, 0x20	; 32
    60ea:	0d 92       	st	X+, r0
    60ec:	41 50       	subi	r20, 0x01	; 1
    60ee:	50 40       	sbci	r21, 0x00	; 0
    60f0:	b8 f7       	brcc	.-18     	; 0x60e0 <eeprom_read_blraw+0x8>
    60f2:	08 95       	ret

Disassembly of section .text.avrlibc:

000066da <eeprom_read_byte>:
    66da:	cb 01       	movw	r24, r22
    66dc:	f9 99       	sbic	0x1f, 1	; 31
    66de:	fe cf       	rjmp	.-4      	; 0x66dc <eeprom_read_byte+0x2>
    66e0:	92 bd       	out	0x22, r25	; 34
    66e2:	81 bd       	out	0x21, r24	; 33
    66e4:	f8 9a       	sbi	0x1f, 0	; 31
    66e6:	99 27       	eor	r25, r25
    66e8:	80 b5       	in	r24, 0x20	; 32
    66ea:	08 95       	ret

Disassembly of section .text.avrlibc:

00006842 <eeprom_read_dword>:
    6842:	cb 01       	movw	r24, r22
    6844:	a6 e1       	ldi	r26, 0x16	; 22
    6846:	b0 e0       	ldi	r27, 0x00	; 0
    6848:	44 e0       	ldi	r20, 0x04	; 4
    684a:	50 e0       	ldi	r21, 0x00	; 0
    684c:	0c 94 6c 30 	jmp	0x60d8	; 0x60d8 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00006850 <eeprom_read_word>:
    6850:	cb 01       	movw	r24, r22
    6852:	a8 e1       	ldi	r26, 0x18	; 24
    6854:	b0 e0       	ldi	r27, 0x00	; 0
    6856:	42 e0       	ldi	r20, 0x02	; 2
    6858:	50 e0       	ldi	r21, 0x00	; 0
    685a:	0c 94 6c 30 	jmp	0x60d8	; 0x60d8 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000056f4 <eeprom_update_block>:
    56f4:	cf 92       	push	r12
    56f6:	df 92       	push	r13
    56f8:	ef 92       	push	r14
    56fa:	21 50       	subi	r18, 0x01	; 1
    56fc:	31 09       	sbc	r19, r1
    56fe:	c0 f0       	brcs	.+48     	; 0x5730 <eeprom_update_block+0x3c>
    5700:	6b 01       	movw	r12, r22
    5702:	e8 2e       	mov	r14, r24
    5704:	c2 0e       	add	r12, r18
    5706:	d3 1e       	adc	r13, r19
    5708:	e1 1c       	adc	r14, r1
    570a:	ca 01       	movw	r24, r20
    570c:	82 0f       	add	r24, r18
    570e:	93 1f       	adc	r25, r19
    5710:	42 2f       	mov	r20, r18
    5712:	73 2f       	mov	r23, r19
    5714:	f6 01       	movw	r30, r12
    5716:	5e 2d       	mov	r21, r14
    5718:	0e 94 c7 34 	call	0x698e	; 0x698e <__xload_1>
    571c:	26 2f       	mov	r18, r22
    571e:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <eeprom_update_r18>
    5722:	31 e0       	ldi	r19, 0x01	; 1
    5724:	c3 1a       	sub	r12, r19
    5726:	d1 08       	sbc	r13, r1
    5728:	e1 08       	sbc	r14, r1
    572a:	41 50       	subi	r20, 0x01	; 1
    572c:	70 40       	sbci	r23, 0x00	; 0
    572e:	90 f7       	brcc	.-28     	; 0x5714 <eeprom_update_block+0x20>
    5730:	ef 90       	pop	r14
    5732:	df 90       	pop	r13
    5734:	cf 90       	pop	r12
    5736:	08 95       	ret

Disassembly of section .text.avrlibc:

000060f4 <eeprom_update_byte>:
    60f4:	26 2f       	mov	r18, r22

000060f6 <eeprom_update_r18>:
    60f6:	f9 99       	sbic	0x1f, 1	; 31
    60f8:	fe cf       	rjmp	.-4      	; 0x60f6 <eeprom_update_r18>
    60fa:	92 bd       	out	0x22, r25	; 34
    60fc:	81 bd       	out	0x21, r24	; 33
    60fe:	f8 9a       	sbi	0x1f, 0	; 31
    6100:	01 97       	sbiw	r24, 0x01	; 1
    6102:	00 b4       	in	r0, 0x20	; 32
    6104:	02 16       	cp	r0, r18
    6106:	39 f0       	breq	.+14     	; 0x6116 <eeprom_update_r18+0x20>
    6108:	1f ba       	out	0x1f, r1	; 31
    610a:	20 bd       	out	0x20, r18	; 32
    610c:	0f b6       	in	r0, 0x3f	; 63
    610e:	f8 94       	cli
    6110:	fa 9a       	sbi	0x1f, 2	; 31
    6112:	f9 9a       	sbi	0x1f, 1	; 31
    6114:	0f be       	out	0x3f, r0	; 63
    6116:	08 95       	ret

Disassembly of section .text.avrlibc:

0000651e <eeprom_update_dword>:
    651e:	03 96       	adiw	r24, 0x03	; 3
    6520:	27 2f       	mov	r18, r23
    6522:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <eeprom_update_r18>
    6526:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <eeprom_update_byte>
    652a:	25 2f       	mov	r18, r21
    652c:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <eeprom_update_r18>
    6530:	24 2f       	mov	r18, r20
    6532:	0c 94 7b 30 	jmp	0x60f6	; 0x60f6 <eeprom_update_r18>

Disassembly of section .text.avrlibc:

0000691e <eeprom_update_word>:
    691e:	01 96       	adiw	r24, 0x01	; 1
    6920:	27 2f       	mov	r18, r23
    6922:	0e 94 7b 30 	call	0x60f6	; 0x60f6 <eeprom_update_r18>
    6926:	0c 94 7a 30 	jmp	0x60f4	; 0x60f4 <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00006286 <__mulsi3>:
    6286:	db 01       	movw	r26, r22
    6288:	8f 93       	push	r24
    628a:	9f 93       	push	r25
    628c:	0e 94 c7 32 	call	0x658e	; 0x658e <__muluhisi3>
    6290:	bf 91       	pop	r27
    6292:	af 91       	pop	r26
    6294:	a2 9f       	mul	r26, r18
    6296:	80 0d       	add	r24, r0
    6298:	91 1d       	adc	r25, r1
    629a:	a3 9f       	mul	r26, r19
    629c:	90 0d       	add	r25, r0
    629e:	b2 9f       	mul	r27, r18
    62a0:	90 0d       	add	r25, r0
    62a2:	11 24       	eor	r1, r1
    62a4:	08 95       	ret

Disassembly of section .text.libgcc.div:

00005738 <__udivmodsi4>:
    5738:	a1 e2       	ldi	r26, 0x21	; 33
    573a:	1a 2e       	mov	r1, r26
    573c:	aa 1b       	sub	r26, r26
    573e:	bb 1b       	sub	r27, r27
    5740:	fd 01       	movw	r30, r26
    5742:	0d c0       	rjmp	.+26     	; 0x575e <__udivmodsi4_ep>

00005744 <__udivmodsi4_loop>:
    5744:	aa 1f       	adc	r26, r26
    5746:	bb 1f       	adc	r27, r27
    5748:	ee 1f       	adc	r30, r30
    574a:	ff 1f       	adc	r31, r31
    574c:	a2 17       	cp	r26, r18
    574e:	b3 07       	cpc	r27, r19
    5750:	e4 07       	cpc	r30, r20
    5752:	f5 07       	cpc	r31, r21
    5754:	20 f0       	brcs	.+8      	; 0x575e <__udivmodsi4_ep>
    5756:	a2 1b       	sub	r26, r18
    5758:	b3 0b       	sbc	r27, r19
    575a:	e4 0b       	sbc	r30, r20
    575c:	f5 0b       	sbc	r31, r21

0000575e <__udivmodsi4_ep>:
    575e:	66 1f       	adc	r22, r22
    5760:	77 1f       	adc	r23, r23
    5762:	88 1f       	adc	r24, r24
    5764:	99 1f       	adc	r25, r25
    5766:	1a 94       	dec	r1
    5768:	69 f7       	brne	.-38     	; 0x5744 <__udivmodsi4_loop>
    576a:	60 95       	com	r22
    576c:	70 95       	com	r23
    576e:	80 95       	com	r24
    5770:	90 95       	com	r25
    5772:	9b 01       	movw	r18, r22
    5774:	ac 01       	movw	r20, r24
    5776:	bd 01       	movw	r22, r26
    5778:	cf 01       	movw	r24, r30
    577a:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000658e <__muluhisi3>:
    658e:	0e 94 9e 31 	call	0x633c	; 0x633c <__umulhisi3>
    6592:	a5 9f       	mul	r26, r21
    6594:	90 0d       	add	r25, r0
    6596:	b4 9f       	mul	r27, r20
    6598:	90 0d       	add	r25, r0
    659a:	a4 9f       	mul	r26, r20
    659c:	80 0d       	add	r24, r0
    659e:	91 1d       	adc	r25, r1
    65a0:	11 24       	eor	r1, r1
    65a2:	08 95       	ret

Disassembly of section .text.libgcc:

0000698e <__xload_1>:
    698e:	57 fd       	sbrc	r21, 7
    6990:	60 81       	ld	r22, Z
    6992:	57 ff       	sbrs	r21, 7
    6994:	64 91       	lpm	r22, Z
    6996:	08 95       	ret
