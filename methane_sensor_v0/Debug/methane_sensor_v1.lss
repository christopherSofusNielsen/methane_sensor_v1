
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000020de  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  00800100  00800100  000020de  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000020de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000468  00000000  00000000  00002139  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000067ff  00000000  00000000  000025a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001949  00000000  00000000  00008da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000252e  00000000  00000000  0000a6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b4c  00000000  00000000  0000cc18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006dd  00000000  00000000  0000d764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f1e  00000000  00000000  0000de41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000380  00000000  00000000  0000fd5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00002046  00002046  000020da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000100e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_3 00000014  00001f9e  00001f9e  00002032  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.rn2483_init 00000008  00002014  00002014  000020a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.rn2483_reset_active 00000008  0000201c  0000201c  000020b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.rn2483_reset_deactive 00000008  00002024  00002024  000020b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_16 0000004e  000018d4  000018d4  00001968  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss._cb      00000002  0080048e  0080048e  000020de  2**0
                  ALLOC
 20 .text.__vector_13 0000004e  00001922  00001922  000019b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss._cb      00000002  00800490  00800490  000020de  2**0
                  ALLOC
 22 .text.start_timer 00000008  0000202c  0000202c  000020c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.stop_timer 00000006  00002034  00002034  000020c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.TC2_HAL_init 00000020  00001ef6  00001ef6  00001f8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.TC2_HAL_subscribe 00000054  00001880  00001880  00001914  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.TC2_HAL_cancel 0000003a  00001c74  00001c74  00001d08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_9 0000007c  00001452  00001452  000014e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss.cnt      00000001  00800492  00800492  000020de  2**0
                  ALLOC
 29 .bss.cbCounter 00000001  00800493  00800493  000020de  2**0
                  ALLOC
 30 .bss.callbacks 0000000a  00800484  00800484  000020de  2**0
                  ALLOC
 31 .text.copy_buffer 0000002e  00001e1e  00001e1e  00001eb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.uart0_hal_init 0000003c  00001bfc  00001bfc  00001c90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.uart0_hal_send_string 0000006e  0000162e  0000162e  000016c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.uart0_hal_message_ready 0000000e  00001fc4  00001fc4  00002058  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.uart0_hal_clear_rx_buffer 0000000a  00001ff6  00001ff6  0000208a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.uart0_hal_read_message_as_str 00000028  00001ea6  00001ea6  00001f3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_22 0000004a  000019be  000019be  00001a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__vector_20 00000074  00001546  00001546  000015da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .bss.rx_buffer_has_message 00000001  00800494  00800494  000020de  2**0
                  ALLOC
 40 .bss.rx_buffer_data_len 00000001  00800495  00800495  000020de  2**0
                  ALLOC
 41 .bss.tx_buffer_cursor 00000001  00800496  00800496  000020de  2**0
                  ALLOC
 42 .bss.tx_buffer_data_len 00000001  00800497  00800497  000020de  2**0
                  ALLOC
 43 .text.uart1_hal_init 0000003c  00001c38  00001c38  00001ccc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.uart1_hal_send_string 0000008a  00001344  00001344  000013d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__vector_30 0000004a  00001a08  00001a08  00001a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__vector_28 00000074  000015ba  000015ba  0000164e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .bss.rx_buffer_has_message 00000001  00800498  00800498  000020de  2**0
                  ALLOC
 48 .bss.rx_buffer_data_len 00000001  00800499  00800499  000020de  2**0
                  ALLOC
 49 .bss.rx_buffer 00000096  008003ee  008003ee  000020de  2**0
                  ALLOC
 50 .bss.tx_buffer_cursor 00000001  0080049a  0080049a  000020de  2**0
                  ALLOC
 51 .bss.tx_buffer_data_len 00000001  0080049b  0080049b  000020de  2**0
                  ALLOC
 52 .bss.tx_buffer 000000c8  00800326  00800326  000020de  2**0
                  ALLOC
 53 .text.main    0000000a  00002000  00002000  00002094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .progmemx.data 00000058  0000032f  0000032f  000003c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 55 .text.parse_err 00000058  00001828  00001828  000018bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.JN_join_network 000002a4  00000b0c  00000b0c  00000ba0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.set_block_uplink 00000018  00001f86  00001f86  0000201a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.cb_block_uplink 0000001c  00001f34  00001f34  00001fc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.LM_join_network 00000006  0000203a  0000203a  000020ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.LM_send_uplink 0000002e  00001e4c  00001e4c  00001ee0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.LM_put_to_sleep 00000012  00001fb2  00001fb2  00002046  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.LM_is_free 0000000a  0000200a  0000200a  0000209e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .bss.subPointer 00000001  0080049c  0080049c  000020de  2**0
                  ALLOC
 64 .bss.busy     00000001  0080049d  0080049d  000020de  2**0
                  ALLOC
 65 .bss.cnt      00000001  0080049e  0080049e  000020de  2**0
                  ALLOC
 66 .progmemx.data 00000073  000002bc  000002bc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 67 .text.tohex   00000084  000013ce  000013ce  00001462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.attach_ending 0000001c  00001f50  00001f50  00001fe4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.cmd_with_ending 00000032  00001d8a  00001d8a  00001e1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.sys_sleep_cmd 0000005e  0000176e  0000176e  00001802  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.mac_set_parameter 0000004e  00001970  00001970  00001a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.mac_set_deveui 00000048  00001a9c  00001a9c  00001b30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.mac_set_appeui 00000048  00001ae4  00001ae4  00001b78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.mac_set_appkey 00000048  00001b2c  00001b2c  00001bc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.mac_set_ADR 00000030  00001dee  00001dee  00001e82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.mac_tx_confirmed 000000ac  00001298  00001298  0000132c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .progmemx.data 00000038  00000387  00000387  0000041b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 78 .text.decode_tx_response 00000068  00001706  00001706  0000179a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.SU_send_uplink 000000f8  000010e4  000010e4  00001178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.SC_put_to_sleep 00000038  00001cae  00001cae  00001d42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.util_setPendingStates 0000000c  00001fd2  00001fd2  00002066  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.util_setMatchCase 0000000c  00001fde  00001fde  00002072  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.util_strbeginswith 0000004a  00001a52  00001a52  00001ae6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.util_matchMessage 0000005c  000017cc  000017cc  00001860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .progmemx.data 000000d2  000001ea  000001ea  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 86 .text.power_test 00000184  00000f60  00000f60  00000ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.test_LORA_module_start 00000028  00001ece  00001ece  00001f62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.test_runner 00000006  00002040  00002040  000020d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .progmemx.data 00000008  000003bf  000003bf  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 90 .text.avrlibc 00000744  000003c8  000003c8  0000045c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.libgcc  0000000c  00001fea  00001fea  0000207e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.libgcc.prologue 00000038  00001ce6  00001ce6  00001d7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.libgcc.prologue 00000036  00001d1e  00001d1e  00001db2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.libgcc  0000001a  00001f6c  00001f6c  00002000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.avrlibc 000001b0  00000db0  00000db0  00000e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.avrlibc 00000032  00001dbc  00001dbc  00001e50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.avrlibc 00000042  00001bba  00001bba  00001c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.avrlibc 0000006a  0000169c  0000169c  00001730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.avrlibc 0000002c  00001e7a  00001e7a  00001f0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.avrlibc 0000001e  00001f16  00001f16  00001faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.avrlibc 00000036  00001d54  00001d54  00001de8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.avrlibc 00000078  000014ce  000014ce  00001562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.avrlibc 00000046  00001b74  00001b74  00001c08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.avrlibc 000000bc  000011dc  000011dc  00001270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__ctors_end>
   4:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
   8:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
   c:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__vector_3>
  10:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  14:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  18:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  1c:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  20:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  24:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__vector_9>
  28:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  2c:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  30:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  34:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__vector_13>
  38:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  3c:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  40:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_16>
  44:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  48:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  4c:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  50:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_20>
  54:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  58:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__vector_22>
  5c:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  60:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  64:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  68:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  6c:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  70:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_28>
  74:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__bad_interrupt>
  78:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__vector_30>
  7c:	a4 05       	cpc	r26, r4
  7e:	b4 06       	cpc	r11, r20
  80:	c3 05       	cpc	r28, r3
  82:	e1 05       	cpc	r30, r1
  84:	01 06       	cpc	r0, r17
  86:	21 06       	cpc	r2, r17
  88:	41 06       	cpc	r4, r17
  8a:	61 06       	cpc	r6, r17
  8c:	7f 06       	cpc	r7, r31
  8e:	9d 06       	cpc	r9, r29
  90:	af 06       	cpc	r10, r31
  92:	c5 06       	cpc	r12, r21
  94:	c7 06       	cpc	r12, r23

00000096 <.dinit>:
  96:	01 00       	.word	0x0001	; ????
  98:	04 9f       	mul	r16, r20
  9a:	80 00       	.word	0x0080	; ????

0000009c <__trampolines_end>:
  9c:	00 40       	sbci	r16, 0x00	; 0
  9e:	7a 10       	cpse	r7, r10
  a0:	f3 5a       	subi	r31, 0xA3	; 163
  a2:	00 a0       	ldd	r0, Z+32	; 0x20
  a4:	72 4e       	sbci	r23, 0xE2	; 226
  a6:	18 09       	sbc	r17, r8
  a8:	00 10       	cpse	r0, r0
  aa:	a5 d4       	rcall	.+2378   	; 0x9f6 <__EEPROM_REGION_LENGTH__+0x1f6>
  ac:	e8 00       	.word	0x00e8	; ????
  ae:	00 e8       	ldi	r16, 0x80	; 128
  b0:	76 48       	sbci	r23, 0x86	; 134
  b2:	17 00       	.word	0x0017	; ????
  b4:	00 e4       	ldi	r16, 0x40	; 64
  b6:	0b 54       	subi	r16, 0x4B	; 75
  b8:	02 00       	.word	0x0002	; ????
  ba:	00 ca       	rjmp	.-3072   	; 0xfffff4bc <__eeprom_end+0xff7ef4bc>
  bc:	9a 3b       	cpi	r25, 0xBA	; 186
  be:	00 00       	nop
  c0:	00 e1       	ldi	r16, 0x10	; 16
  c2:	f5 05       	cpc	r31, r5
  c4:	00 00       	nop
  c6:	80 96       	adiw	r24, 0x20	; 32
  c8:	98 00       	.word	0x0098	; ????
  ca:	00 00       	nop
  cc:	40 42       	sbci	r20, 0x20	; 32
  ce:	0f 00       	.word	0x000f	; ????
  d0:	00 00       	nop
  d2:	a0 86       	std	Z+8, r10	; 0x08
  d4:	01 00       	.word	0x0001	; ????
  d6:	00 00       	nop
  d8:	10 27       	eor	r17, r16
  da:	00 00       	nop
  dc:	00 00       	nop
  de:	e8 03       	fmulsu	r22, r16
  e0:	00 00       	nop
  e2:	00 00       	nop
  e4:	64 00       	.word	0x0064	; ????
  e6:	00 00       	nop
  e8:	00 00       	nop
  ea:	0a 00       	.word	0x000a	; ????
  ec:	00 00       	nop
  ee:	00 00       	nop
  f0:	01 00       	.word	0x0001	; ????
  f2:	00 00       	nop
  f4:	00 00       	nop
  f6:	2c 76       	andi	r18, 0x6C	; 108
  f8:	d8 88       	ldd	r13, Y+16	; 0x10
  fa:	dc 67       	ori	r29, 0x7C	; 124
  fc:	4f 08       	sbc	r4, r15
  fe:	23 df       	rcall	.-442    	; 0xffffff46 <__eeprom_end+0xff7eff46>
 100:	c1 df       	rcall	.-126    	; 0x84 <__SREG__+0x45>
 102:	ae 59       	subi	r26, 0x9E	; 158
 104:	e1 b1       	in	r30, 0x01	; 1
 106:	b7 96       	adiw	r30, 0x27	; 39
 108:	e5 e3       	ldi	r30, 0x35	; 53
 10a:	e4 53       	subi	r30, 0x34	; 52
 10c:	c6 3a       	cpi	r28, 0xA6	; 166
 10e:	e6 51       	subi	r30, 0x16	; 22
 110:	99 76       	andi	r25, 0x69	; 105
 112:	96 e8       	ldi	r25, 0x86	; 134
 114:	e6 c2       	rjmp	.+1484   	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 116:	84 26       	eor	r8, r20
 118:	eb 89       	ldd	r30, Y+19	; 0x13
 11a:	8c 9b       	sbis	0x11, 4	; 17
 11c:	62 ed       	ldi	r22, 0xD2	; 210
 11e:	40 7c       	andi	r20, 0xC0	; 192
 120:	6f fc       	.word	0xfc6f	; ????
 122:	ef bc       	out	0x2f, r14	; 47
 124:	9c 9f       	mul	r25, r28
 126:	40 f2       	brcs	.-112    	; 0xb8 <__trampolines_end+0x1c>
 128:	ba a5       	ldd	r27, Y+42	; 0x2a
 12a:	6f a5       	ldd	r22, Y+47	; 0x2f
 12c:	f4 90       	lpm	r15, Z
 12e:	05 5a       	subi	r16, 0xA5	; 165
 130:	2a f7       	brpl	.-54     	; 0xfc <__trampolines_end+0x60>
 132:	5c 93       	st	X, r21
 134:	6b 6c       	ori	r22, 0xCB	; 203
 136:	f9 67       	ori	r31, 0x79	; 121
 138:	6d c1       	rjmp	.+730    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 13a:	1b fc       	.word	0xfc1b	; ????
 13c:	e0 e4       	ldi	r30, 0x40	; 64
 13e:	0d 47       	sbci	r16, 0x7D	; 125
 140:	fe f5       	brtc	.+126    	; 0x1c0 <__do_copy_data+0x1e>
 142:	20 e6       	ldi	r18, 0x60	; 96
 144:	b5 00       	.word	0x00b5	; ????
 146:	d0 ed       	ldi	r29, 0xD0	; 208
 148:	90 2e       	mov	r9, r16
 14a:	03 00       	.word	0x0003	; ????
 14c:	94 35       	cpi	r25, 0x54	; 84
 14e:	77 05       	cpc	r23, r7
 150:	00 80       	ld	r0, Z
 152:	84 1e       	adc	r8, r20
 154:	08 00       	.word	0x0008	; ????
 156:	00 20       	and	r0, r0
 158:	4e 0a       	sbc	r4, r30
 15a:	00 00       	nop
 15c:	00 c8       	rjmp	.-4096   	; 0xfffff15e <__eeprom_end+0xff7ef15e>
 15e:	0c 33       	cpi	r16, 0x3C	; 60
 160:	33 33       	cpi	r19, 0x33	; 51
 162:	33 0f       	add	r19, r19
 164:	98 6e       	ori	r25, 0xE8	; 232
 166:	12 83       	std	Z+2, r17	; 0x02
 168:	11 41       	sbci	r17, 0x11	; 17
 16a:	ef 8d       	ldd	r30, Y+31	; 0x1f
 16c:	21 14       	cp	r2, r1
 16e:	89 3b       	cpi	r24, 0xB9	; 185
 170:	e6 55       	subi	r30, 0x56	; 86
 172:	16 cf       	rjmp	.-468    	; 0xffffffa0 <__eeprom_end+0xff7effa0>
 174:	fe e6       	ldi	r31, 0x6E	; 110
 176:	db 18       	sub	r13, r11
 178:	d1 84       	ldd	r13, Z+9	; 0x09
 17a:	4b 38       	cpi	r20, 0x8B	; 139
 17c:	1b f7       	brvc	.-58     	; 0x144 <__trampolines_end+0xa8>
 17e:	7c 1d       	adc	r23, r12
 180:	90 1d       	adc	r25, r0
 182:	a4 bb       	out	0x14, r26	; 20
 184:	e4 24       	eor	r14, r4
 186:	20 32       	cpi	r18, 0x20	; 32
 188:	84 72       	andi	r24, 0x24	; 36
 18a:	5e 22       	and	r5, r30
 18c:	81 00       	.word	0x0081	; ????
 18e:	c9 f1       	breq	.+114    	; 0x202 <_etext+0x18>
 190:	24 ec       	ldi	r18, 0xC4	; 196
 192:	a1 e5       	ldi	r26, 0x51	; 81
 194:	3d 27       	eor	r19, r29

00000196 <__ctors_end>:
 196:	11 24       	eor	r1, r1
 198:	1f be       	out	0x3f, r1	; 63
 19a:	cf ef       	ldi	r28, 0xFF	; 255
 19c:	d0 e1       	ldi	r29, 0x10	; 16
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	cd bf       	out	0x3d, r28	; 61

000001a2 <__do_copy_data>:
 1a2:	e6 e9       	ldi	r30, 0x96	; 150
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <__do_clear_bss+0x8>
 1aa:	b5 91       	lpm	r27, Z+
 1ac:	a5 91       	lpm	r26, Z+
 1ae:	35 91       	lpm	r19, Z+
 1b0:	25 91       	lpm	r18, Z+
 1b2:	05 91       	lpm	r16, Z+
 1b4:	07 fd       	sbrc	r16, 7
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <__do_clear_bss>
 1b8:	95 91       	lpm	r25, Z+
 1ba:	85 91       	lpm	r24, Z+
 1bc:	ef 01       	movw	r28, r30
 1be:	f9 2f       	mov	r31, r25
 1c0:	e8 2f       	mov	r30, r24
 1c2:	05 90       	lpm	r0, Z+
 1c4:	0d 92       	st	X+, r0
 1c6:	a2 17       	cp	r26, r18
 1c8:	b3 07       	cpc	r27, r19
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0x20>
 1cc:	fe 01       	movw	r30, r28
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <__do_clear_bss+0x8>

000001d0 <__do_clear_bss>:
 1d0:	1d 92       	st	X+, r1
 1d2:	a2 17       	cp	r26, r18
 1d4:	b3 07       	cpc	r27, r19
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <__do_clear_bss>
 1d8:	eb 39       	cpi	r30, 0x9B	; 155
 1da:	f4 07       	cpc	r31, r20
 1dc:	31 f7       	brne	.-52     	; 0x1aa <__do_copy_data+0x8>
 1de:	0e 94 00 10 	call	0x2000	; 0x2000 <main>
 1e2:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>

Disassembly of section .text:

00002046 <__bad_interrupt>:
    2046:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_3:

00001f9e <__vector_3>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
}

ISR(INT2_vect){
    1f9e:	1f 92       	push	r1
    1fa0:	0f 92       	push	r0
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	0f 92       	push	r0
    1fa6:	11 24       	eor	r1, r1
	
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	0f 90       	pop	r0
    1fae:	1f 90       	pop	r1
    1fb0:	18 95       	reti

Disassembly of section .text.rn2483_init:

00002014 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    2014:	84 b1       	in	r24, 0x04	; 4
    2016:	80 61       	ori	r24, 0x10	; 16
    2018:	84 b9       	out	0x04, r24	; 4
    201a:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

0000201c <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    201c:	85 b1       	in	r24, 0x05	; 5
    201e:	8f 7e       	andi	r24, 0xEF	; 239
    2020:	85 b9       	out	0x05, r24	; 5
    2022:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00002024 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    2024:	85 b1       	in	r24, 0x05	; 5
    2026:	80 61       	ori	r24, 0x10	; 16
    2028:	85 b9       	out	0x05, r24	; 5
    202a:	08 95       	ret

Disassembly of section .text.__vector_16:

000018d4 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	af 93       	push	r26
    18f0:	bf 93       	push	r27
    18f2:	ef 93       	push	r30
    18f4:	ff 93       	push	r31
	_cb();
    18f6:	e0 91 8e 04 	lds	r30, 0x048E	; 0x80048e <_cb>
    18fa:	f0 91 8f 04 	lds	r31, 0x048F	; 0x80048f <_cb+0x1>
    18fe:	09 95       	icall
}
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	0f 90       	pop	r0
    191e:	1f 90       	pop	r1
    1920:	18 95       	reti

Disassembly of section .text.__vector_13:

00001922 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    1922:	1f 92       	push	r1
    1924:	0f 92       	push	r0
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	0f 92       	push	r0
    192a:	11 24       	eor	r1, r1
    192c:	2f 93       	push	r18
    192e:	3f 93       	push	r19
    1930:	4f 93       	push	r20
    1932:	5f 93       	push	r21
    1934:	6f 93       	push	r22
    1936:	7f 93       	push	r23
    1938:	8f 93       	push	r24
    193a:	9f 93       	push	r25
    193c:	af 93       	push	r26
    193e:	bf 93       	push	r27
    1940:	ef 93       	push	r30
    1942:	ff 93       	push	r31
	_cb();
    1944:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <_cb>
    1948:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <_cb+0x1>
    194c:	09 95       	icall
    194e:	ff 91       	pop	r31
    1950:	ef 91       	pop	r30
    1952:	bf 91       	pop	r27
    1954:	af 91       	pop	r26
    1956:	9f 91       	pop	r25
    1958:	8f 91       	pop	r24
    195a:	7f 91       	pop	r23
    195c:	6f 91       	pop	r22
    195e:	5f 91       	pop	r21
    1960:	4f 91       	pop	r20
    1962:	3f 91       	pop	r19
    1964:	2f 91       	pop	r18
    1966:	0f 90       	pop	r0
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	0f 90       	pop	r0
    196c:	1f 90       	pop	r1
    196e:	18 95       	reti

Disassembly of section .text.start_timer:

0000202c <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    202c:	87 e0       	ldi	r24, 0x07	; 7
    202e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    2032:	08 95       	ret

Disassembly of section .text.stop_timer:

00002034 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    2034:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    2038:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00001ef6 <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    1efc:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    1f00:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    1f04:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    1f08:	93 ef       	ldi	r25, 0xF3	; 243
    1f0a:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    1f0e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    1f12:	78 94       	sei
    1f14:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00001880 <TC2_HAL_subscribe>:
    1880:	cf 93       	push	r28
    1882:	dc 01       	movw	r26, r24
    1884:	60 91 93 04 	lds	r22, 0x0493	; 0x800493 <cbCounter>
    1888:	65 30       	cpi	r22, 0x05	; 5
    188a:	00 f5       	brcc	.+64     	; 0x18cc <TC2_HAL_subscribe+0x4c>
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	15 c0       	rjmp	.+42     	; 0x18ba <TC2_HAL_subscribe+0x3a>
    1890:	29 2f       	mov	r18, r25
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	f9 01       	movw	r30, r18
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	ec 57       	subi	r30, 0x7C	; 124
    189c:	fb 4f       	sbci	r31, 0xFB	; 251
    189e:	40 81       	ld	r20, Z
    18a0:	51 81       	ldd	r21, Z+1	; 0x01
    18a2:	45 2b       	or	r20, r21
    18a4:	49 f4       	brne	.+18     	; 0x18b8 <TC2_HAL_subscribe+0x38>
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	f9 01       	movw	r30, r18
    18ac:	ec 57       	subi	r30, 0x7C	; 124
    18ae:	fb 4f       	sbci	r31, 0xFB	; 251
    18b0:	b1 83       	std	Z+1, r27	; 0x01
    18b2:	a0 83       	st	Z, r26
    18b4:	c9 2f       	mov	r28, r25
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <TC2_HAL_subscribe+0x40>
    18b8:	9f 5f       	subi	r25, 0xFF	; 255
    18ba:	95 30       	cpi	r25, 0x05	; 5
    18bc:	48 f3       	brcs	.-46     	; 0x1890 <TC2_HAL_subscribe+0x10>
    18be:	cf ef       	ldi	r28, 0xFF	; 255
    18c0:	6f 5f       	subi	r22, 0xFF	; 255
    18c2:	60 93 93 04 	sts	0x0493, r22	; 0x800493 <cbCounter>
    18c6:	0e 94 16 10 	call	0x202c	; 0x202c <start_timer>
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <TC2_HAL_subscribe+0x4e>
    18cc:	cf ef       	ldi	r28, 0xFF	; 255
    18ce:	8c 2f       	mov	r24, r28
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00001c74 <TC2_HAL_cancel>:
    1c74:	08 2e       	mov	r0, r24
    1c76:	00 0c       	add	r0, r0
    1c78:	99 0b       	sbc	r25, r25
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	ee 0f       	add	r30, r30
    1c7e:	ff 1f       	adc	r31, r31
    1c80:	ec 57       	subi	r30, 0x7C	; 124
    1c82:	fb 4f       	sbci	r31, 0xFB	; 251
    1c84:	20 81       	ld	r18, Z
    1c86:	31 81       	ldd	r19, Z+1	; 0x01
    1c88:	23 2b       	or	r18, r19
    1c8a:	81 f0       	breq	.+32     	; 0x1cac <TC2_HAL_cancel+0x38>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	fc 01       	movw	r30, r24
    1c92:	ec 57       	subi	r30, 0x7C	; 124
    1c94:	fb 4f       	sbci	r31, 0xFB	; 251
    1c96:	11 82       	std	Z+1, r1	; 0x01
    1c98:	10 82       	st	Z, r1
    1c9a:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <cbCounter>
    1c9e:	81 50       	subi	r24, 0x01	; 1
    1ca0:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <cbCounter>
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <TC2_HAL_cancel+0x38>
    1ca8:	0e 94 1a 10 	call	0x2034	; 0x2034 <stop_timer>
    1cac:	08 95       	ret

Disassembly of section .text.__vector_9:

00001452 <__vector_9>:
    1452:	1f 92       	push	r1
    1454:	0f 92       	push	r0
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	0f 92       	push	r0
    145a:	11 24       	eor	r1, r1
    145c:	2f 93       	push	r18
    145e:	3f 93       	push	r19
    1460:	4f 93       	push	r20
    1462:	5f 93       	push	r21
    1464:	6f 93       	push	r22
    1466:	7f 93       	push	r23
    1468:	8f 93       	push	r24
    146a:	9f 93       	push	r25
    146c:	af 93       	push	r26
    146e:	bf 93       	push	r27
    1470:	cf 93       	push	r28
    1472:	ef 93       	push	r30
    1474:	ff 93       	push	r31
    1476:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <cnt>
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <cnt>
    1480:	80 32       	cpi	r24, 0x20	; 32
    1482:	99 f4       	brne	.+38     	; 0x14aa <__vector_9+0x58>
    1484:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <cnt>
    1488:	c0 e0       	ldi	r28, 0x00	; 0
    148a:	0d c0       	rjmp	.+26     	; 0x14a6 <__vector_9+0x54>
    148c:	ec 2f       	mov	r30, r28
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	ec 57       	subi	r30, 0x7C	; 124
    1496:	fb 4f       	sbci	r31, 0xFB	; 251
    1498:	01 90       	ld	r0, Z+
    149a:	f0 81       	ld	r31, Z
    149c:	e0 2d       	mov	r30, r0
    149e:	30 97       	sbiw	r30, 0x00	; 0
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <__vector_9+0x52>
    14a2:	09 95       	icall
    14a4:	cf 5f       	subi	r28, 0xFF	; 255
    14a6:	c5 30       	cpi	r28, 0x05	; 5
    14a8:	88 f3       	brcs	.-30     	; 0x148c <__vector_9+0x3a>
    14aa:	ff 91       	pop	r31
    14ac:	ef 91       	pop	r30
    14ae:	cf 91       	pop	r28
    14b0:	bf 91       	pop	r27
    14b2:	af 91       	pop	r26
    14b4:	9f 91       	pop	r25
    14b6:	8f 91       	pop	r24
    14b8:	7f 91       	pop	r23
    14ba:	6f 91       	pop	r22
    14bc:	5f 91       	pop	r21
    14be:	4f 91       	pop	r20
    14c0:	3f 91       	pop	r19
    14c2:	2f 91       	pop	r18
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

Disassembly of section .text.copy_buffer:

00001e1e <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    1e1e:	bc 01       	movw	r22, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <copy_buffer+0x18>
    1e24:	fb 01       	movw	r30, r22
    1e26:	e9 0f       	add	r30, r25
    1e28:	f1 1d       	adc	r31, r1
    1e2a:	da 01       	movw	r26, r20
    1e2c:	a0 50       	subi	r26, 0x00	; 0
    1e2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e30:	2c 91       	ld	r18, X
    1e32:	20 83       	st	Z, r18
    1e34:	9f 5f       	subi	r25, 0xFF	; 255
    1e36:	49 2f       	mov	r20, r25
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <rx_buffer_data_len>
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	22 50       	subi	r18, 0x02	; 2
    1e42:	31 09       	sbc	r19, r1
    1e44:	42 17       	cp	r20, r18
    1e46:	53 07       	cpc	r21, r19
    1e48:	6c f3       	brlt	.-38     	; 0x1e24 <copy_buffer+0x6>
    1e4a:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00001bfc <uart0_hal_init>:
    1bfc:	e1 ec       	ldi	r30, 0xC1	; 193
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	80 61       	ori	r24, 0x10	; 16
    1c04:	80 83       	st	Z, r24
    1c06:	80 81       	ld	r24, Z
    1c08:	88 60       	ori	r24, 0x08	; 8
    1c0a:	80 83       	st	Z, r24
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 68       	ori	r24, 0x80	; 128
    1c10:	80 83       	st	Z, r24
    1c12:	80 81       	ld	r24, Z
    1c14:	80 64       	ori	r24, 0x40	; 64
    1c16:	80 83       	st	Z, r24
    1c18:	e0 ec       	ldi	r30, 0xC0	; 192
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	82 60       	ori	r24, 0x02	; 2
    1c20:	80 83       	st	Z, r24
    1c22:	86 e0       	ldi	r24, 0x06	; 6
    1c24:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    1c28:	80 e1       	ldi	r24, 0x10	; 16
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    1c30:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    1c34:	78 94       	sei
    1c36:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

0000162e <uart0_hal_send_string>:
    162e:	6f 92       	push	r6
    1630:	7f 92       	push	r7
    1632:	8f 92       	push	r8
    1634:	cf 92       	push	r12
    1636:	df 92       	push	r13
    1638:	ef 92       	push	r14
    163a:	3b 01       	movw	r6, r22
    163c:	88 2e       	mov	r8, r24
    163e:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <tx_buffer_data_len>
    1642:	81 11       	cpse	r24, r1
    1644:	fc cf       	rjmp	.-8      	; 0x163e <uart0_hal_send_string+0x10>
    1646:	88 2d       	mov	r24, r8
    1648:	b3 01       	movw	r22, r6
    164a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strlen>
    164e:	68 2f       	mov	r22, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	12 c0       	rjmp	.+36     	; 0x1678 <uart0_hal_send_string+0x4a>
    1654:	29 2f       	mov	r18, r25
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	e8 2c       	mov	r14, r8
    165a:	63 01       	movw	r12, r6
    165c:	c2 0e       	add	r12, r18
    165e:	d3 1e       	adc	r13, r19
    1660:	e1 1c       	adc	r14, r1
    1662:	37 fd       	sbrc	r19, 7
    1664:	ea 94       	dec	r14
    1666:	f6 01       	movw	r30, r12
    1668:	44 91       	lpm	r20, Z
    166a:	e7 fc       	sbrc	r14, 7
    166c:	40 81       	ld	r20, Z
    166e:	f9 01       	movw	r30, r18
    1670:	ea 56       	subi	r30, 0x6A	; 106
    1672:	fe 4f       	sbci	r31, 0xFE	; 254
    1674:	40 83       	st	Z, r20
    1676:	9f 5f       	subi	r25, 0xFF	; 255
    1678:	96 17       	cp	r25, r22
    167a:	60 f3       	brcs	.-40     	; 0x1654 <uart0_hal_send_string+0x26>
    167c:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <tx_buffer_data_len>
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <tx_buffer_cursor>
    1686:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    168a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	8f 90       	pop	r8
    1696:	7f 90       	pop	r7
    1698:	6f 90       	pop	r6
    169a:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00001fc4 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    1fc4:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <rx_buffer_has_message>
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	91 11       	cpse	r25, r1
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <uart0_hal_message_ready+0xc>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
}
    1fd0:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00001ff6 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    1ff6:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    1ffa:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <rx_buffer_data_len>
    1ffe:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00001ea6 <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    1eae:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    1eb2:	c0 91 95 04 	lds	r28, 0x0495	; 0x800495 <rx_buffer_data_len>
    1eb6:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    1eb8:	f8 01       	movw	r30, r16
    1eba:	ec 0f       	add	r30, r28
    1ebc:	f1 1d       	adc	r31, r1
    1ebe:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    1ec0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <uart0_hal_clear_rx_buffer>
	return len;
}
    1ec4:	8c 2f       	mov	r24, r28
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	08 95       	ret

Disassembly of section .text.__vector_22:

000019be <__vector_22>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    19be:	1f 92       	push	r1
    19c0:	0f 92       	push	r0
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	0f 92       	push	r0
    19c6:	11 24       	eor	r1, r1
    19c8:	8f 93       	push	r24
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <tx_buffer_cursor>
    19d2:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <tx_buffer_data_len>
    19d6:	e8 17       	cp	r30, r24
    19d8:	58 f4       	brcc	.+22     	; 0x19f0 <__vector_22+0x32>
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	8e 0f       	add	r24, r30
    19de:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <tx_buffer_cursor>
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	ea 56       	subi	r30, 0x6A	; 106
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	80 81       	ld	r24, Z
    19ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    19ee:	04 c0       	rjmp	.+8      	; 0x19f8 <__vector_22+0x3a>
    19f0:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <tx_buffer_cursor>
    19f4:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <tx_buffer_data_len>
    19f8:	ff 91       	pop	r31
    19fa:	ef 91       	pop	r30
    19fc:	8f 91       	pop	r24
    19fe:	0f 90       	pop	r0
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	0f 90       	pop	r0
    1a04:	1f 90       	pop	r1
    1a06:	18 95       	reti

Disassembly of section .text.__vector_20:

00001546 <__vector_20>:
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	2f 93       	push	r18
    1552:	8f 93       	push	r24
    1554:	9f 93       	push	r25
    1556:	ef 93       	push	r30
    1558:	ff 93       	push	r31
    155a:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <rx_buffer_has_message>
    155e:	81 11       	cpse	r24, r1
    1560:	0e c0       	rjmp	.+28     	; 0x157e <__vector_20+0x38>
    1562:	e0 91 95 04 	lds	r30, 0x0495	; 0x800495 <rx_buffer_data_len>
    1566:	e6 39       	cpi	r30, 0x96	; 150
    1568:	50 f4       	brcc	.+20     	; 0x157e <__vector_20+0x38>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	8e 0f       	add	r24, r30
    156e:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <rx_buffer_data_len>
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    1578:	e0 50       	subi	r30, 0x00	; 0
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	80 83       	st	Z, r24
    157e:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <rx_buffer_data_len>
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	80 f0       	brcs	.+32     	; 0x15a6 <__vector_20+0x60>
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	fc 01       	movw	r30, r24
    158a:	e1 50       	subi	r30, 0x01	; 1
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	20 81       	ld	r18, Z
    1590:	2a 30       	cpi	r18, 0x0A	; 10
    1592:	49 f4       	brne	.+18     	; 0x15a6 <__vector_20+0x60>
    1594:	fc 01       	movw	r30, r24
    1596:	e2 50       	subi	r30, 0x02	; 2
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	8d 30       	cpi	r24, 0x0D	; 13
    159e:	19 f4       	brne	.+6      	; 0x15a6 <__vector_20+0x60>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <rx_buffer_has_message>
    15a6:	ff 91       	pop	r31
    15a8:	ef 91       	pop	r30
    15aa:	9f 91       	pop	r25
    15ac:	8f 91       	pop	r24
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00001c38 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    1c38:	e9 ec       	ldi	r30, 0xC9	; 201
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 61       	ori	r24, 0x10	; 16
    1c40:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    1c42:	80 81       	ld	r24, Z
    1c44:	88 60       	ori	r24, 0x08	; 8
    1c46:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    1c48:	80 81       	ld	r24, Z
    1c4a:	80 68       	ori	r24, 0x80	; 128
    1c4c:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    1c4e:	80 81       	ld	r24, Z
    1c50:	80 64       	ori	r24, 0x40	; 64
    1c52:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    1c54:	e8 ec       	ldi	r30, 0xC8	; 200
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	82 60       	ori	r24, 0x02	; 2
    1c5c:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    1c5e:	86 e0       	ldi	r24, 0x06	; 6
    1c60:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=UART1_BAUDRATE; //set baudrate
    1c64:	80 e1       	ldi	r24, 0x10	; 16
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    1c6c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    1c70:	78 94       	sei
    1c72:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00001344 <uart1_hal_send_string>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    1344:	6f 92       	push	r6
    1346:	7f 92       	push	r7
    1348:	8f 92       	push	r8
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	3b 01       	movw	r6, r22
    1352:	88 2e       	mov	r8, r24
    1354:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <tx_buffer_data_len>
    1358:	81 11       	cpse	r24, r1
    135a:	fc cf       	rjmp	.-8      	; 0x1354 <uart1_hal_send_string+0x10>
    135c:	88 2d       	mov	r24, r8
    135e:	b3 01       	movw	r22, r6
    1360:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strlen>
    1364:	bc 01       	movw	r22, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	12 c0       	rjmp	.+36     	; 0x138e <uart1_hal_send_string+0x4a>
    136a:	29 2f       	mov	r18, r25
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	e8 2c       	mov	r14, r8
    1370:	63 01       	movw	r12, r6
    1372:	c4 0e       	add	r12, r20
    1374:	d5 1e       	adc	r13, r21
    1376:	e1 1c       	adc	r14, r1
    1378:	57 fd       	sbrc	r21, 7
    137a:	ea 94       	dec	r14
    137c:	f6 01       	movw	r30, r12
    137e:	44 91       	lpm	r20, Z
    1380:	e7 fc       	sbrc	r14, 7
    1382:	40 81       	ld	r20, Z
    1384:	f9 01       	movw	r30, r18
    1386:	ea 5d       	subi	r30, 0xDA	; 218
    1388:	fc 4f       	sbci	r31, 0xFC	; 252
    138a:	40 83       	st	Z, r20
    138c:	9f 5f       	subi	r25, 0xFF	; 255
    138e:	49 2f       	mov	r20, r25
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	46 17       	cp	r20, r22
    1394:	57 07       	cpc	r21, r23
    1396:	48 f3       	brcs	.-46     	; 0x136a <uart1_hal_send_string+0x26>
    1398:	fb 01       	movw	r30, r22
    139a:	ea 5d       	subi	r30, 0xDA	; 218
    139c:	fc 4f       	sbci	r31, 0xFC	; 252
    139e:	8d e0       	ldi	r24, 0x0D	; 13
    13a0:	80 83       	st	Z, r24
    13a2:	fb 01       	movw	r30, r22
    13a4:	e9 5d       	subi	r30, 0xD9	; 217
    13a6:	fc 4f       	sbci	r31, 0xFC	; 252
    13a8:	8a e0       	ldi	r24, 0x0A	; 10
    13aa:	80 83       	st	Z, r24
    13ac:	6e 5f       	subi	r22, 0xFE	; 254
    13ae:	60 93 9b 04 	sts	0x049B, r22	; 0x80049b <tx_buffer_data_len>
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <tx_buffer_cursor>
    13b8:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_end>
    13bc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	8f 90       	pop	r8
    13c8:	7f 90       	pop	r7
    13ca:	6f 90       	pop	r6
    13cc:	08 95       	ret

Disassembly of section .text.__vector_30:

00001a08 <__vector_30>:
    1a08:	1f 92       	push	r1
    1a0a:	0f 92       	push	r0
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	0f 92       	push	r0
    1a10:	11 24       	eor	r1, r1
    1a12:	8f 93       	push	r24
    1a14:	ef 93       	push	r30
    1a16:	ff 93       	push	r31
    1a18:	e0 91 9a 04 	lds	r30, 0x049A	; 0x80049a <tx_buffer_cursor>
    1a1c:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <tx_buffer_data_len>
    1a20:	e8 17       	cp	r30, r24
    1a22:	58 f4       	brcc	.+22     	; 0x1a3a <__vector_30+0x32>
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	8e 0f       	add	r24, r30
    1a28:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <tx_buffer_cursor>
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	ea 5d       	subi	r30, 0xDA	; 218
    1a30:	fc 4f       	sbci	r31, 0xFC	; 252
    1a32:	80 81       	ld	r24, Z
    1a34:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <__vector_30+0x3a>
    1a3a:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <tx_buffer_cursor>
    1a3e:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <tx_buffer_data_len>
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	8f 91       	pop	r24
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

Disassembly of section .text.__vector_28:

000015ba <__vector_28>:
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	8f 93       	push	r24
    15c8:	9f 93       	push	r25
    15ca:	ef 93       	push	r30
    15cc:	ff 93       	push	r31
    15ce:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <rx_buffer_has_message>
    15d2:	81 11       	cpse	r24, r1
    15d4:	0e c0       	rjmp	.+28     	; 0x15f2 <__vector_28+0x38>
    15d6:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <rx_buffer_data_len>
    15da:	e6 39       	cpi	r30, 0x96	; 150
    15dc:	50 f4       	brcc	.+20     	; 0x15f2 <__vector_28+0x38>
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	8e 0f       	add	r24, r30
    15e2:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <rx_buffer_data_len>
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    15ec:	e2 51       	subi	r30, 0x12	; 18
    15ee:	fc 4f       	sbci	r31, 0xFC	; 252
    15f0:	80 83       	st	Z, r24
    15f2:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <rx_buffer_data_len>
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	80 f0       	brcs	.+32     	; 0x161a <__vector_28+0x60>
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	fc 01       	movw	r30, r24
    15fe:	e3 51       	subi	r30, 0x13	; 19
    1600:	fc 4f       	sbci	r31, 0xFC	; 252
    1602:	20 81       	ld	r18, Z
    1604:	2a 30       	cpi	r18, 0x0A	; 10
    1606:	49 f4       	brne	.+18     	; 0x161a <__vector_28+0x60>
    1608:	fc 01       	movw	r30, r24
    160a:	e4 51       	subi	r30, 0x14	; 20
    160c:	fc 4f       	sbci	r31, 0xFC	; 252
    160e:	80 81       	ld	r24, Z
    1610:	8d 30       	cpi	r24, 0x0D	; 13
    1612:	19 f4       	brne	.+6      	; 0x161a <__vector_28+0x60>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <rx_buffer_has_message>
    161a:	ff 91       	pop	r31
    161c:	ef 91       	pop	r30
    161e:	9f 91       	pop	r25
    1620:	8f 91       	pop	r24
    1622:	2f 91       	pop	r18
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	0f 90       	pop	r0
    162a:	1f 90       	pop	r1
    162c:	18 95       	reti

Disassembly of section .text.main:

00002000 <main>:
#include "HAL/PM/PM_HAL.h"
#include "HAL/UI/UI_HAL.h"

int main(void)
{
	test_runner();
    2000:	0e 94 20 10 	call	0x2040	; 0x2040 <test_runner>
		//}else{
			//MAINPG_start();
		//}
		//_delay_ms(5000);
	//}
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	08 95       	ret

Disassembly of section .text.parse_err:

00001828 <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    1828:	cf 92       	push	r12
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    182e:	6c 01       	movw	r12, r24
    1830:	20 e8       	ldi	r18, 0x80	; 128
    1832:	e2 2e       	mov	r14, r18
    1834:	2f e2       	ldi	r18, 0x2F	; 47
    1836:	33 e0       	ldi	r19, 0x03	; 3
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	8e 2d       	mov	r24, r14
    183c:	b6 01       	movw	r22, r12
    183e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <strcmp>
    1842:	89 2b       	or	r24, r25
    1844:	a1 f0       	breq	.+40     	; 0x186e <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    1846:	2a e3       	ldi	r18, 0x3A	; 58
    1848:	33 e0       	ldi	r19, 0x03	; 3
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	8e 2d       	mov	r24, r14
    184e:	b6 01       	movw	r22, r12
    1850:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <strcmp>
    1854:	89 2b       	or	r24, r25
    1856:	69 f0       	breq	.+26     	; 0x1872 <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    1858:	21 e4       	ldi	r18, 0x41	; 65
    185a:	33 e0       	ldi	r19, 0x03	; 3
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	8e 2d       	mov	r24, r14
    1860:	b6 01       	movw	r22, r12
    1862:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <strcmp>
    1866:	89 2b       	or	r24, r25
    1868:	31 f4       	brne	.+12     	; 0x1876 <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    186a:	83 e0       	ldi	r24, 0x03	; 3
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    1876:	81 e0       	ldi	r24, 0x01	; 1
}
    1878:	ef 90       	pop	r14
    187a:	df 90       	pop	r13
    187c:	cf 90       	pop	r12
    187e:	08 95       	ret

Disassembly of section .text.JN_join_network:

00000b0c <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
 b0c:	af 92       	push	r10
 b0e:	bf 92       	push	r11
 b10:	cf 92       	push	r12
 b12:	df 92       	push	r13
 b14:	ef 92       	push	r14
 b16:	ff 92       	push	r15
 b18:	1f 93       	push	r17
 b1a:	cf 93       	push	r28
 b1c:	df 93       	push	r29
 b1e:	cd b7       	in	r28, 0x3d	; 61
 b20:	de b7       	in	r29, 0x3e	; 62
 b22:	28 97       	sbiw	r28, 0x08	; 8
 b24:	0f b6       	in	r0, 0x3f	; 63
 b26:	f8 94       	cli
 b28:	de bf       	out	0x3e, r29	; 62
 b2a:	0f be       	out	0x3f, r0	; 63
 b2c:	cd bf       	out	0x3d, r28	; 61
 b2e:	5c 01       	movw	r10, r24
 b30:	6b 01       	movw	r12, r22
 b32:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
 b34:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
 b36:	e1 2f       	mov	r30, r17
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	ed 30       	cpi	r30, 0x0D	; 13
 b3c:	f1 05       	cpc	r31, r1
 b3e:	d8 f7       	brcc	.-10     	; 0xb36 <JN_join_network+0x2a>
 b40:	e2 5c       	subi	r30, 0xC2	; 194
 b42:	ff 4f       	sbci	r31, 0xFF	; 255
 b44:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
 b48:	0e 94 0e 10 	call	0x201c	; 0x201c <rn2483_reset_active>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b4c:	2f ef       	ldi	r18, 0xFF	; 255
 b4e:	89 e6       	ldi	r24, 0x69	; 105
 b50:	98 e1       	ldi	r25, 0x18	; 24
 b52:	21 50       	subi	r18, 0x01	; 1
 b54:	80 40       	sbci	r24, 0x00	; 0
 b56:	90 40       	sbci	r25, 0x00	; 0
 b58:	e1 f7       	brne	.-8      	; 0xb52 <JN_join_network+0x46>
 b5a:	00 c0       	rjmp	.+0      	; 0xb5c <JN_join_network+0x50>
 b5c:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
 b5e:	0e 94 12 10 	call	0x2024	; 0x2024 <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
 b62:	4c e0       	ldi	r20, 0x0C	; 12
 b64:	50 e0       	ldi	r21, 0x00	; 0
 b66:	62 e0       	ldi	r22, 0x02	; 2
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	ce 01       	movw	r24, r28
 b6c:	01 96       	adiw	r24, 0x01	; 1
 b6e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
 b72:	2f e4       	ldi	r18, 0x4F	; 79
 b74:	33 e0       	ldi	r19, 0x03	; 3
 b76:	40 e0       	ldi	r20, 0x00	; 0
 b78:	61 e0       	ldi	r22, 0x01	; 1
 b7a:	ce 01       	movw	r24, r28
 b7c:	01 96       	adiw	r24, 0x01	; 1
 b7e:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
 b82:	11 e0       	ldi	r17, 0x01	; 1
			break;
 b84:	d8 cf       	rjmp	.-80     	; 0xb36 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
 b86:	46 e5       	ldi	r20, 0x56	; 86
 b88:	53 e0       	ldi	r21, 0x03	; 3
 b8a:	60 e0       	ldi	r22, 0x00	; 0
 b8c:	8e e5       	ldi	r24, 0x5E	; 94
 b8e:	92 e0       	ldi	r25, 0x02	; 2
 b90:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
 b94:	6e e5       	ldi	r22, 0x5E	; 94
 b96:	72 e0       	ldi	r23, 0x02	; 2
 b98:	80 e8       	ldi	r24, 0x80	; 128
 b9a:	0e 94 17 0b 	call	0x162e	; 0x162e <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
 b9e:	4c e0       	ldi	r20, 0x0C	; 12
 ba0:	50 e0       	ldi	r21, 0x00	; 0
 ba2:	63 e0       	ldi	r22, 0x03	; 3
 ba4:	70 e0       	ldi	r23, 0x00	; 0
 ba6:	ce 01       	movw	r24, r28
 ba8:	01 96       	adiw	r24, 0x01	; 1
 baa:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 bae:	24 e6       	ldi	r18, 0x64	; 100
 bb0:	33 e0       	ldi	r19, 0x03	; 3
 bb2:	40 e0       	ldi	r20, 0x00	; 0
 bb4:	60 e0       	ldi	r22, 0x00	; 0
 bb6:	ce 01       	movw	r24, r28
 bb8:	01 96       	adiw	r24, 0x01	; 1
 bba:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 bbe:	11 e0       	ldi	r17, 0x01	; 1
			break;
 bc0:	ba cf       	rjmp	.-140    	; 0xb36 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
 bc2:	b5 01       	movw	r22, r10
 bc4:	8e e5       	ldi	r24, 0x5E	; 94
 bc6:	92 e0       	ldi	r25, 0x02	; 2
 bc8:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <mac_set_deveui>
				attach_ending(lm_msg);
 bcc:	8e e5       	ldi	r24, 0x5E	; 94
 bce:	92 e0       	ldi	r25, 0x02	; 2
 bd0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <attach_ending>
				uart0_hal_send_string(lm_msg);
 bd4:	6e e5       	ldi	r22, 0x5E	; 94
 bd6:	72 e0       	ldi	r23, 0x02	; 2
 bd8:	80 e8       	ldi	r24, 0x80	; 128
 bda:	0e 94 17 0b 	call	0x162e	; 0x162e <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
 bde:	4c e0       	ldi	r20, 0x0C	; 12
 be0:	50 e0       	ldi	r21, 0x00	; 0
 be2:	64 e0       	ldi	r22, 0x04	; 4
 be4:	70 e0       	ldi	r23, 0x00	; 0
 be6:	ce 01       	movw	r24, r28
 be8:	01 96       	adiw	r24, 0x01	; 1
 bea:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 bee:	24 e6       	ldi	r18, 0x64	; 100
 bf0:	33 e0       	ldi	r19, 0x03	; 3
 bf2:	40 e0       	ldi	r20, 0x00	; 0
 bf4:	60 e0       	ldi	r22, 0x00	; 0
 bf6:	ce 01       	movw	r24, r28
 bf8:	01 96       	adiw	r24, 0x01	; 1
 bfa:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 bfe:	11 e0       	ldi	r17, 0x01	; 1
			break;
 c00:	9a cf       	rjmp	.-204    	; 0xb36 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
 c02:	b7 01       	movw	r22, r14
 c04:	8e e5       	ldi	r24, 0x5E	; 94
 c06:	92 e0       	ldi	r25, 0x02	; 2
 c08:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <mac_set_appkey>
				attach_ending(lm_msg);
 c0c:	8e e5       	ldi	r24, 0x5E	; 94
 c0e:	92 e0       	ldi	r25, 0x02	; 2
 c10:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <attach_ending>
				uart0_hal_send_string(lm_msg);
 c14:	6e e5       	ldi	r22, 0x5E	; 94
 c16:	72 e0       	ldi	r23, 0x02	; 2
 c18:	80 e8       	ldi	r24, 0x80	; 128
 c1a:	0e 94 17 0b 	call	0x162e	; 0x162e <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
 c1e:	4c e0       	ldi	r20, 0x0C	; 12
 c20:	50 e0       	ldi	r21, 0x00	; 0
 c22:	65 e0       	ldi	r22, 0x05	; 5
 c24:	70 e0       	ldi	r23, 0x00	; 0
 c26:	ce 01       	movw	r24, r28
 c28:	01 96       	adiw	r24, 0x01	; 1
 c2a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 c2e:	24 e6       	ldi	r18, 0x64	; 100
 c30:	33 e0       	ldi	r19, 0x03	; 3
 c32:	40 e0       	ldi	r20, 0x00	; 0
 c34:	60 e0       	ldi	r22, 0x00	; 0
 c36:	ce 01       	movw	r24, r28
 c38:	01 96       	adiw	r24, 0x01	; 1
 c3a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 c3e:	11 e0       	ldi	r17, 0x01	; 1
			break;
 c40:	7a cf       	rjmp	.-268    	; 0xb36 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
 c42:	b6 01       	movw	r22, r12
 c44:	8e e5       	ldi	r24, 0x5E	; 94
 c46:	92 e0       	ldi	r25, 0x02	; 2
 c48:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <mac_set_appeui>
				attach_ending(lm_msg);
 c4c:	8e e5       	ldi	r24, 0x5E	; 94
 c4e:	92 e0       	ldi	r25, 0x02	; 2
 c50:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <attach_ending>
				uart0_hal_send_string(lm_msg);
 c54:	6e e5       	ldi	r22, 0x5E	; 94
 c56:	72 e0       	ldi	r23, 0x02	; 2
 c58:	80 e8       	ldi	r24, 0x80	; 128
 c5a:	0e 94 17 0b 	call	0x162e	; 0x162e <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
 c5e:	4c e0       	ldi	r20, 0x0C	; 12
 c60:	50 e0       	ldi	r21, 0x00	; 0
 c62:	66 e0       	ldi	r22, 0x06	; 6
 c64:	70 e0       	ldi	r23, 0x00	; 0
 c66:	ce 01       	movw	r24, r28
 c68:	01 96       	adiw	r24, 0x01	; 1
 c6a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 c6e:	24 e6       	ldi	r18, 0x64	; 100
 c70:	33 e0       	ldi	r19, 0x03	; 3
 c72:	40 e0       	ldi	r20, 0x00	; 0
 c74:	60 e0       	ldi	r22, 0x00	; 0
 c76:	ce 01       	movw	r24, r28
 c78:	01 96       	adiw	r24, 0x01	; 1
 c7a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 c7e:	11 e0       	ldi	r17, 0x01	; 1
			break;
 c80:	5a cf       	rjmp	.-332    	; 0xb36 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
 c82:	61 e0       	ldi	r22, 0x01	; 1
 c84:	8e e5       	ldi	r24, 0x5E	; 94
 c86:	92 e0       	ldi	r25, 0x02	; 2
 c88:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <mac_set_ADR>
				attach_ending(lm_msg);
 c8c:	8e e5       	ldi	r24, 0x5E	; 94
 c8e:	92 e0       	ldi	r25, 0x02	; 2
 c90:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <attach_ending>
				uart0_hal_send_string(lm_msg);
 c94:	6e e5       	ldi	r22, 0x5E	; 94
 c96:	72 e0       	ldi	r23, 0x02	; 2
 c98:	80 e8       	ldi	r24, 0x80	; 128
 c9a:	0e 94 17 0b 	call	0x162e	; 0x162e <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
 c9e:	4c e0       	ldi	r20, 0x0C	; 12
 ca0:	50 e0       	ldi	r21, 0x00	; 0
 ca2:	67 e0       	ldi	r22, 0x07	; 7
 ca4:	70 e0       	ldi	r23, 0x00	; 0
 ca6:	ce 01       	movw	r24, r28
 ca8:	01 96       	adiw	r24, 0x01	; 1
 caa:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 cae:	24 e6       	ldi	r18, 0x64	; 100
 cb0:	33 e0       	ldi	r19, 0x03	; 3
 cb2:	40 e0       	ldi	r20, 0x00	; 0
 cb4:	60 e0       	ldi	r22, 0x00	; 0
 cb6:	ce 01       	movw	r24, r28
 cb8:	01 96       	adiw	r24, 0x01	; 1
 cba:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 cbe:	11 e0       	ldi	r17, 0x01	; 1
			break;
 cc0:	3a cf       	rjmp	.-396    	; 0xb36 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
 cc2:	47 e6       	ldi	r20, 0x67	; 103
 cc4:	53 e0       	ldi	r21, 0x03	; 3
 cc6:	60 e0       	ldi	r22, 0x00	; 0
 cc8:	8e e5       	ldi	r24, 0x5E	; 94
 cca:	92 e0       	ldi	r25, 0x02	; 2
 ccc:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
 cd0:	6e e5       	ldi	r22, 0x5E	; 94
 cd2:	72 e0       	ldi	r23, 0x02	; 2
 cd4:	80 e8       	ldi	r24, 0x80	; 128
 cd6:	0e 94 17 0b 	call	0x162e	; 0x162e <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
 cda:	4c e0       	ldi	r20, 0x0C	; 12
 cdc:	50 e0       	ldi	r21, 0x00	; 0
 cde:	68 e0       	ldi	r22, 0x08	; 8
 ce0:	70 e0       	ldi	r23, 0x00	; 0
 ce2:	ce 01       	movw	r24, r28
 ce4:	01 96       	adiw	r24, 0x01	; 1
 ce6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 cea:	24 e6       	ldi	r18, 0x64	; 100
 cec:	33 e0       	ldi	r19, 0x03	; 3
 cee:	40 e0       	ldi	r20, 0x00	; 0
 cf0:	60 e0       	ldi	r22, 0x00	; 0
 cf2:	ce 01       	movw	r24, r28
 cf4:	01 96       	adiw	r24, 0x01	; 1
 cf6:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 cfa:	11 e0       	ldi	r17, 0x01	; 1
			break;
 cfc:	1c cf       	rjmp	.-456    	; 0xb36 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
 cfe:	40 e7       	ldi	r20, 0x70	; 112
 d00:	53 e0       	ldi	r21, 0x03	; 3
 d02:	60 e0       	ldi	r22, 0x00	; 0
 d04:	8e e5       	ldi	r24, 0x5E	; 94
 d06:	92 e0       	ldi	r25, 0x02	; 2
 d08:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
 d0c:	6e e5       	ldi	r22, 0x5E	; 94
 d0e:	72 e0       	ldi	r23, 0x02	; 2
 d10:	80 e8       	ldi	r24, 0x80	; 128
 d12:	0e 94 17 0b 	call	0x162e	; 0x162e <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
 d16:	4a e0       	ldi	r20, 0x0A	; 10
 d18:	50 e0       	ldi	r21, 0x00	; 0
 d1a:	69 e0       	ldi	r22, 0x09	; 9
 d1c:	70 e0       	ldi	r23, 0x00	; 0
 d1e:	ce 01       	movw	r24, r28
 d20:	01 96       	adiw	r24, 0x01	; 1
 d22:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 d26:	24 e6       	ldi	r18, 0x64	; 100
 d28:	33 e0       	ldi	r19, 0x03	; 3
 d2a:	40 e0       	ldi	r20, 0x00	; 0
 d2c:	60 e0       	ldi	r22, 0x00	; 0
 d2e:	ce 01       	movw	r24, r28
 d30:	01 96       	adiw	r24, 0x01	; 1
 d32:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 d36:	11 e0       	ldi	r17, 0x01	; 1
			break;
 d38:	fe ce       	rjmp	.-516    	; 0xb36 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
 d3a:	4a e0       	ldi	r20, 0x0A	; 10
 d3c:	50 e0       	ldi	r21, 0x00	; 0
 d3e:	6b e0       	ldi	r22, 0x0B	; 11
 d40:	70 e0       	ldi	r23, 0x00	; 0
 d42:	ce 01       	movw	r24, r28
 d44:	01 96       	adiw	r24, 0x01	; 1
 d46:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
 d4a:	2e e7       	ldi	r18, 0x7E	; 126
 d4c:	33 e0       	ldi	r19, 0x03	; 3
 d4e:	40 e0       	ldi	r20, 0x00	; 0
 d50:	60 e0       	ldi	r22, 0x00	; 0
 d52:	ce 01       	movw	r24, r28
 d54:	01 96       	adiw	r24, 0x01	; 1
 d56:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 d5a:	11 e0       	ldi	r17, 0x01	; 1
			break;
 d5c:	ec ce       	rjmp	.-552    	; 0xb36 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
 d5e:	8e e5       	ldi	r24, 0x5E	; 94
 d60:	92 e0       	ldi	r25, 0x02	; 2
 d62:	0e 94 14 0c 	call	0x1828	; 0x1828 <parse_err>
 d66:	14 c0       	rjmp	.+40     	; 0xd90 <JN_join_network+0x284>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
 d68:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <uart0_hal_message_ready>
 d6c:	88 23       	and	r24, r24
 d6e:	09 f4       	brne	.+2      	; 0xd72 <JN_join_network+0x266>
 d70:	e2 ce       	rjmp	.-572    	; 0xb36 <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
 d72:	8e e5       	ldi	r24, 0x5E	; 94
 d74:	92 e0       	ldi	r25, 0x02	; 2
 d76:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
 d7a:	6e e5       	ldi	r22, 0x5E	; 94
 d7c:	72 e0       	ldi	r23, 0x02	; 2
 d7e:	ce 01       	movw	r24, r28
 d80:	01 96       	adiw	r24, 0x01	; 1
 d82:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <util_matchMessage>
 d86:	18 2f       	mov	r17, r24
 d88:	d6 ce       	rjmp	.-596    	; 0xb36 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
 d8a:	80 e0       	ldi	r24, 0x00	; 0
 d8c:	01 c0       	rjmp	.+2      	; 0xd90 <JN_join_network+0x284>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
 d8e:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
 d90:	28 96       	adiw	r28, 0x08	; 8
 d92:	0f b6       	in	r0, 0x3f	; 63
 d94:	f8 94       	cli
 d96:	de bf       	out	0x3e, r29	; 62
 d98:	0f be       	out	0x3f, r0	; 63
 d9a:	cd bf       	out	0x3d, r28	; 61
 d9c:	df 91       	pop	r29
 d9e:	cf 91       	pop	r28
 da0:	1f 91       	pop	r17
 da2:	ff 90       	pop	r15
 da4:	ef 90       	pop	r14
 da6:	df 90       	pop	r13
 da8:	cf 90       	pop	r12
 daa:	bf 90       	pop	r11
 dac:	af 90       	pop	r10
 dae:	08 95       	ret

Disassembly of section .text.set_block_uplink:

00001f86 <set_block_uplink>:
	return SC_put_to_sleep();
}

LM_STATUS LM_wake_up(){
	return SC_wake_up();
}
    1f86:	8a e9       	ldi	r24, 0x9A	; 154
    1f88:	9f e0       	ldi	r25, 0x0F	; 15
    1f8a:	0e 94 40 0c 	call	0x1880	; 0x1880 <TC2_HAL_subscribe>
    1f8e:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <subPointer>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <busy>
    1f98:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <cnt>
    1f9c:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

00001f34 <cb_block_uplink>:
    1f34:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <cnt>
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <cnt>
    1f3e:	8f 31       	cpi	r24, 0x1F	; 31
    1f40:	30 f0       	brcs	.+12     	; 0x1f4e <cb_block_uplink+0x1a>
    1f42:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <busy>
    1f46:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <subPointer>
    1f4a:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <TC2_HAL_cancel>
    1f4e:	08 95       	ret

Disassembly of section .text.LM_join_network:

0000203a <LM_join_network>:
static void cb_block_uplink();
static void set_block_uplink();


LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    203a:	0e 94 86 05 	call	0xb0c	; 0xb0c <JN_join_network>
}
    203e:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00001e4c <LM_send_uplink>:
	return SC_put_to_sleep();
}

LM_STATUS LM_wake_up(){
	return SC_wake_up();
}
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	9c 01       	movw	r18, r24
    1e54:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <busy>
    1e58:	91 11       	cpse	r25, r1
    1e5a:	0a c0       	rjmp	.+20     	; 0x1e70 <LM_send_uplink+0x24>
    1e5c:	16 2f       	mov	r17, r22
    1e5e:	e9 01       	movw	r28, r18
    1e60:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_block_uplink>
    1e64:	41 2f       	mov	r20, r17
    1e66:	be 01       	movw	r22, r28
    1e68:	84 e6       	ldi	r24, 0x64	; 100
    1e6a:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SU_send_uplink>
    1e6e:	01 c0       	rjmp	.+2      	; 0x1e72 <LM_send_uplink+0x26>
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00001fb2 <LM_put_to_sleep>:
    1fb2:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <busy>
    1fb6:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <subPointer>
    1fba:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <TC2_HAL_cancel>
    1fbe:	0e 94 57 0e 	call	0x1cae	; 0x1cae <SC_put_to_sleep>
    1fc2:	08 95       	ret

Disassembly of section .text.LM_is_free:

0000200a <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    200a:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <busy>
}
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	89 27       	eor	r24, r25
    2012:	08 95       	ret

Disassembly of section .text.tohex:

000013ce <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    13ce:	6f 92       	push	r6
    13d0:	7f 92       	push	r7
    13d2:	8f 92       	push	r8
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	7c 01       	movw	r14, r24
    13e2:	3a 01       	movw	r6, r20
    13e4:	86 2e       	mov	r8, r22
    13e6:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    13e8:	c0 e0       	ldi	r28, 0x00	; 0
    13ea:	d0 e0       	ldi	r29, 0x00	; 0
    13ec:	25 c0       	rjmp	.+74     	; 0x1438 <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    13ee:	a8 2d       	mov	r26, r8
    13f0:	c3 01       	movw	r24, r6
    13f2:	8c 0f       	add	r24, r28
    13f4:	9d 1f       	adc	r25, r29
    13f6:	a1 1d       	adc	r26, r1
    13f8:	d7 fd       	sbrc	r29, 7
    13fa:	aa 95       	dec	r26
    13fc:	fc 01       	movw	r30, r24
    13fe:	24 91       	lpm	r18, Z
    1400:	a7 fd       	sbrc	r26, 7
    1402:	20 81       	ld	r18, Z
    1404:	ce 01       	movw	r24, r28
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	1f 92       	push	r1
    140c:	2f 93       	push	r18
    140e:	2c eb       	ldi	r18, 0xBC	; 188
    1410:	32 e0       	ldi	r19, 0x02	; 2
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	4f 93       	push	r20
    1416:	3f 93       	push	r19
    1418:	2f 93       	push	r18
    141a:	8e 0d       	add	r24, r14
    141c:	9f 1d       	adc	r25, r15
    141e:	9f 93       	push	r25
    1420:	8f 93       	push	r24
    1422:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    1426:	21 96       	adiw	r28, 0x01	; 1
    1428:	8d b7       	in	r24, 0x3d	; 61
    142a:	9e b7       	in	r25, 0x3e	; 62
    142c:	07 96       	adiw	r24, 0x07	; 7
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	9e bf       	out	0x3e, r25	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	8d bf       	out	0x3d, r24	; 61
    1438:	c0 17       	cp	r28, r16
    143a:	d1 07       	cpc	r29, r17
    143c:	c4 f2       	brlt	.-80     	; 0x13ee <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	8f 90       	pop	r8
    144c:	7f 90       	pop	r7
    144e:	6f 90       	pop	r6
    1450:	08 95       	ret

Disassembly of section .text.attach_ending:

00001f50 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    1f50:	fc 01       	movw	r30, r24
    1f52:	01 90       	ld	r0, Z+
    1f54:	00 20       	and	r0, r0
    1f56:	e9 f7       	brne	.-6      	; 0x1f52 <attach_ending+0x2>
    1f58:	cf 01       	movw	r24, r30
    1f5a:	23 e0       	ldi	r18, 0x03	; 3
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	41 ec       	ldi	r20, 0xC1	; 193
    1f60:	52 e0       	ldi	r21, 0x02	; 2
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <memcpy>
    1f6a:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00001d8a <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    1d90:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    1d94:	fe 01       	movw	r30, r28
    1d96:	01 90       	ld	r0, Z+
    1d98:	00 20       	and	r0, r0
    1d9a:	e9 f7       	brne	.-6      	; 0x1d96 <cmd_with_ending+0xc>
    1d9c:	cf 01       	movw	r24, r30
    1d9e:	23 e0       	ldi	r18, 0x03	; 3
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	41 ec       	ldi	r20, 0xC1	; 193
    1da4:	52 e0       	ldi	r21, 0x02	; 2
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <memcpy>
	return strlen(buffer);
    1dae:	be 01       	movw	r22, r28
    1db0:	80 e8       	ldi	r24, 0x80	; 128
    1db2:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strlen>
}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

0000176e <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    1772:	44 36       	cpi	r20, 0x64	; 100
    1774:	51 05       	cpc	r21, r1
    1776:	61 05       	cpc	r22, r1
    1778:	71 05       	cpc	r23, r1
    177a:	18 f1       	brcs	.+70     	; 0x17c2 <sys_sleep_cmd+0x54>
    177c:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    177e:	7f 93       	push	r23
    1780:	6f 93       	push	r22
    1782:	5f 93       	push	r21
    1784:	4f 93       	push	r20
    1786:	84 ec       	ldi	r24, 0xC4	; 196
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	a0 e0       	ldi	r26, 0x00	; 0
    178c:	af 93       	push	r26
    178e:	9f 93       	push	r25
    1790:	8f 93       	push	r24
    1792:	8e ec       	ldi	r24, 0xCE	; 206
    1794:	92 e0       	ldi	r25, 0x02	; 2
    1796:	a0 e0       	ldi	r26, 0x00	; 0
    1798:	af 93       	push	r26
    179a:	9f 93       	push	r25
    179c:	8f 93       	push	r24
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <sprintf>
    return strlen(buffer);
    17a6:	be 01       	movw	r22, r28
    17a8:	80 e8       	ldi	r24, 0x80	; 128
    17aa:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strlen>
    17ae:	2d b7       	in	r18, 0x3d	; 61
    17b0:	3e b7       	in	r19, 0x3e	; 62
    17b2:	24 5f       	subi	r18, 0xF4	; 244
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	3e bf       	out	0x3e, r19	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	2d bf       	out	0x3d, r18	; 61
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00001970 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    197a:	2f 93       	push	r18
    197c:	1f 93       	push	r17
    197e:	0f 93       	push	r16
    1980:	6f 93       	push	r22
    1982:	5f 93       	push	r21
    1984:	4f 93       	push	r20
    1986:	85 ed       	ldi	r24, 0xD5	; 213
    1988:	92 e0       	ldi	r25, 0x02	; 2
    198a:	a0 e0       	ldi	r26, 0x00	; 0
    198c:	af 93       	push	r26
    198e:	9f 93       	push	r25
    1990:	8f 93       	push	r24
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <sprintf>
    return strlen(buffer);
    199a:	be 01       	movw	r22, r28
    199c:	80 e8       	ldi	r24, 0x80	; 128
    199e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strlen>
    19a2:	2d b7       	in	r18, 0x3d	; 61
    19a4:	3e b7       	in	r19, 0x3e	; 62
    19a6:	25 5f       	subi	r18, 0xF5	; 245
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	3e bf       	out	0x3e, r19	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	2d bf       	out	0x3d, r18	; 61
}
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00001a9c <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    1a9c:	cf 92       	push	r12
    1a9e:	df 92       	push	r13
    1aa0:	ef 92       	push	r14
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    1aac:	6b 01       	movw	r12, r22
    1aae:	80 e8       	ldi	r24, 0x80	; 128
    1ab0:	e8 2e       	mov	r14, r24
    1ab2:	8e 2d       	mov	r24, r14
    1ab4:	b6 01       	movw	r22, r12
    1ab6:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strlen>
    1aba:	40 97       	sbiw	r24, 0x10	; 16
    1abc:	49 f4       	brne	.+18     	; 0x1ad0 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    1abe:	2e 2d       	mov	r18, r14
    1ac0:	86 01       	movw	r16, r12
    1ac2:	4b ed       	ldi	r20, 0xDB	; 219
    1ac4:	52 e0       	ldi	r21, 0x02	; 2
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	ce 01       	movw	r24, r28
    1aca:	0e 94 b8 0c 	call	0x1970	; 0x1970 <mac_set_parameter>
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ef 90       	pop	r14
    1ade:	df 90       	pop	r13
    1ae0:	cf 90       	pop	r12
    1ae2:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00001ae4 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    1ae4:	cf 92       	push	r12
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    1af4:	6b 01       	movw	r12, r22
    1af6:	80 e8       	ldi	r24, 0x80	; 128
    1af8:	e8 2e       	mov	r14, r24
    1afa:	8e 2d       	mov	r24, r14
    1afc:	b6 01       	movw	r22, r12
    1afe:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strlen>
    1b02:	40 97       	sbiw	r24, 0x10	; 16
    1b04:	49 f4       	brne	.+18     	; 0x1b18 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    1b06:	2e 2d       	mov	r18, r14
    1b08:	86 01       	movw	r16, r12
    1b0a:	4a ee       	ldi	r20, 0xEA	; 234
    1b0c:	52 e0       	ldi	r21, 0x02	; 2
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	ce 01       	movw	r24, r28
    1b12:	0e 94 b8 0c 	call	0x1970	; 0x1970 <mac_set_parameter>
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    1b18:	8f ef       	ldi	r24, 0xFF	; 255
    1b1a:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ef 90       	pop	r14
    1b26:	df 90       	pop	r13
    1b28:	cf 90       	pop	r12
    1b2a:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00001b2c <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    1b3c:	6b 01       	movw	r12, r22
    1b3e:	80 e8       	ldi	r24, 0x80	; 128
    1b40:	e8 2e       	mov	r14, r24
    1b42:	8e 2d       	mov	r24, r14
    1b44:	b6 01       	movw	r22, r12
    1b46:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strlen>
    1b4a:	80 97       	sbiw	r24, 0x20	; 32
    1b4c:	49 f4       	brne	.+18     	; 0x1b60 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    1b4e:	2e 2d       	mov	r18, r14
    1b50:	86 01       	movw	r16, r12
    1b52:	49 ef       	ldi	r20, 0xF9	; 249
    1b54:	52 e0       	ldi	r21, 0x02	; 2
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	ce 01       	movw	r24, r28
    1b5a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <mac_set_parameter>
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	ef 90       	pop	r14
    1b6e:	df 90       	pop	r13
    1b70:	cf 90       	pop	r12
    1b72:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00001dee <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
	if(state==0){
    1df2:	61 11       	cpse	r22, r1
    1df4:	09 c0       	rjmp	.+18     	; 0x1e08 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    1df6:	08 e0       	ldi	r16, 0x08	; 8
    1df8:	13 e0       	ldi	r17, 0x03	; 3
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	4c e0       	ldi	r20, 0x0C	; 12
    1dfe:	53 e0       	ldi	r21, 0x03	; 3
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	0e 94 b8 0c 	call	0x1970	; 0x1970 <mac_set_parameter>
    1e06:	08 c0       	rjmp	.+16     	; 0x1e18 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    1e08:	08 e1       	ldi	r16, 0x18	; 24
    1e0a:	13 e0       	ldi	r17, 0x03	; 3
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	4c e0       	ldi	r20, 0x0C	; 12
    1e10:	53 e0       	ldi	r21, 0x03	; 3
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	0e 94 b8 0c 	call	0x1970	; 0x1970 <mac_set_parameter>
	}
}
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00001298 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    1298:	df 92       	push	r13
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	c7 56       	subi	r28, 0x67	; 103
    12ac:	d1 09       	sbc	r29, r1
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    12ba:	9f ef       	ldi	r25, 0xFF	; 255
    12bc:	96 0f       	add	r25, r22
    12be:	9f 3d       	cpi	r25, 0xDF	; 223
    12c0:	68 f5       	brcc	.+90     	; 0x131c <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    12c2:	9f ef       	ldi	r25, 0xFF	; 255
    12c4:	92 0f       	add	r25, r18
    12c6:	93 33       	cpi	r25, 0x33	; 51
    12c8:	60 f5       	brcc	.+88     	; 0x1322 <mac_tx_confirmed+0x8a>
    12ca:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	60 e8       	ldi	r22, 0x80	; 128
    12d0:	ce 01       	movw	r24, r28
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	7c 01       	movw	r14, r24
    12d6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    12da:	c7 01       	movw	r24, r14
    12dc:	a0 e8       	ldi	r26, 0x80	; 128
    12de:	af 93       	push	r26
    12e0:	9f 93       	push	r25
    12e2:	ef 92       	push	r14
    12e4:	1f 92       	push	r1
    12e6:	df 92       	push	r13
    12e8:	8b e1       	ldi	r24, 0x1B	; 27
    12ea:	93 e0       	ldi	r25, 0x03	; 3
    12ec:	a0 e0       	ldi	r26, 0x00	; 0
    12ee:	af 93       	push	r26
    12f0:	9f 93       	push	r25
    12f2:	8f 93       	push	r24
    12f4:	86 e2       	ldi	r24, 0x26	; 38
    12f6:	93 e0       	ldi	r25, 0x03	; 3
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	af 93       	push	r26
    12fc:	9f 93       	push	r25
    12fe:	8f 93       	push	r24
    1300:	1f 93       	push	r17
    1302:	0f 93       	push	r16
    1304:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <sprintf>
    
	
    return strlen(buffer);
    1308:	b8 01       	movw	r22, r16
    130a:	80 e8       	ldi	r24, 0x80	; 128
    130c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strlen>
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	9f ef       	ldi	r25, 0xFF	; 255
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    1326:	c9 59       	subi	r28, 0x99	; 153
    1328:	df 4f       	sbci	r29, 0xFF	; 255
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	08 95       	ret

Disassembly of section .text.decode_tx_response:

00001706 <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	6b 01       	movw	r12, r22
    170e:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    1710:	27 e8       	ldi	r18, 0x87	; 135
    1712:	33 e0       	ldi	r19, 0x03	; 3
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <strcmp>
    171a:	89 2b       	or	r24, r25
    171c:	e9 f0       	breq	.+58     	; 0x1758 <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    171e:	22 e9       	ldi	r18, 0x92	; 146
    1720:	33 e0       	ldi	r19, 0x03	; 3
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	8e 2d       	mov	r24, r14
    1726:	b6 01       	movw	r22, r12
    1728:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <strcmp>
    172c:	89 2b       	or	r24, r25
    172e:	b1 f0       	breq	.+44     	; 0x175c <decode_tx_response+0x56>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    1730:	2a e9       	ldi	r18, 0x9A	; 154
    1732:	33 e0       	ldi	r19, 0x03	; 3
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	8e 2d       	mov	r24, r14
    1738:	b6 01       	movw	r22, r12
    173a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <util_strbeginswith>
    173e:	81 11       	cpse	r24, r1
    1740:	0f c0       	rjmp	.+30     	; 0x1760 <decode_tx_response+0x5a>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    1742:	21 ea       	ldi	r18, 0xA1	; 161
    1744:	33 e0       	ldi	r19, 0x03	; 3
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	8e 2d       	mov	r24, r14
    174a:	b6 01       	movw	r22, r12
    174c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <util_strbeginswith>
    1750:	88 23       	and	r24, r24
    1752:	41 f0       	breq	.+16     	; 0x1764 <decode_tx_response+0x5e>
    1754:	85 e0       	ldi	r24, 0x05	; 5
    1756:	07 c0       	rjmp	.+14     	; 0x1766 <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	05 c0       	rjmp	.+10     	; 0x1766 <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <decode_tx_response+0x60>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <decode_tx_response+0x60>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    1764:	81 e0       	ldi	r24, 0x01	; 1
}
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	cf 90       	pop	r12
    176c:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

000010e4 <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	28 97       	sbiw	r28, 0x08	; 8
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	d8 2e       	mov	r13, r24
    1104:	7b 01       	movw	r14, r22
    1106:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    1108:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    110a:	12 30       	cpi	r17, 0x02	; 2
    110c:	09 f4       	brne	.+2      	; 0x1110 <__stack+0x11>
    110e:	40 c0       	rjmp	.+128    	; 0x1190 <__stack+0x91>
    1110:	28 f4       	brcc	.+10     	; 0x111c <__stack+0x1d>
    1112:	11 23       	and	r17, r17
    1114:	49 f0       	breq	.+18     	; 0x1128 <__stack+0x29>
    1116:	11 30       	cpi	r17, 0x01	; 1
    1118:	49 f1       	breq	.+82     	; 0x116c <__stack+0x6d>
    111a:	f7 cf       	rjmp	.-18     	; 0x110a <__stack+0xb>
    111c:	13 30       	cpi	r17, 0x03	; 3
    111e:	09 f4       	brne	.+2      	; 0x1122 <__stack+0x23>
    1120:	4e c0       	rjmp	.+156    	; 0x11be <__stack+0xbf>
    1122:	14 30       	cpi	r17, 0x04	; 4
    1124:	d9 f1       	breq	.+118    	; 0x119c <__stack+0x9d>
    1126:	f1 cf       	rjmp	.-30     	; 0x110a <__stack+0xb>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    1128:	20 2f       	mov	r18, r16
    112a:	a7 01       	movw	r20, r14
    112c:	6d 2d       	mov	r22, r13
    112e:	8e e5       	ldi	r24, 0x5E	; 94
    1130:	92 e0       	ldi	r25, 0x02	; 2
    1132:	0e 94 4c 09 	call	0x1298	; 0x1298 <mac_tx_confirmed>
				attach_ending(lm_msg);
    1136:	8e e5       	ldi	r24, 0x5E	; 94
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <attach_ending>
				uart0_hal_send_string(lm_msg);
    113e:	6e e5       	ldi	r22, 0x5E	; 94
    1140:	72 e0       	ldi	r23, 0x02	; 2
    1142:	80 e8       	ldi	r24, 0x80	; 128
    1144:	0e 94 17 0b 	call	0x162e	; 0x162e <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    1148:	42 e0       	ldi	r20, 0x02	; 2
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	ce 01       	movw	r24, r28
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1158:	22 eb       	ldi	r18, 0xB2	; 178
    115a:	33 e0       	ldi	r19, 0x03	; 3
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	ce 01       	movw	r24, r28
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1168:	14 e0       	ldi	r17, 0x04	; 4
			break;
    116a:	cf cf       	rjmp	.-98     	; 0x110a <__stack+0xb>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    116c:	42 e0       	ldi	r20, 0x02	; 2
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	63 e0       	ldi	r22, 0x03	; 3
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	ce 01       	movw	r24, r28
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    117c:	25 eb       	ldi	r18, 0xB5	; 181
    117e:	33 e0       	ldi	r19, 0x03	; 3
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	ce 01       	movw	r24, r28
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    118c:	14 e0       	ldi	r17, 0x04	; 4
			break;
    118e:	bd cf       	rjmp	.-134    	; 0x110a <__stack+0xb>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    1190:	6e e5       	ldi	r22, 0x5E	; 94
    1192:	72 e0       	ldi	r23, 0x02	; 2
    1194:	80 e8       	ldi	r24, 0x80	; 128
    1196:	0e 94 83 0b 	call	0x1706	; 0x1706 <decode_tx_response>
    119a:	12 c0       	rjmp	.+36     	; 0x11c0 <__stack+0xc1>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    119c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <uart0_hal_message_ready>
    11a0:	88 23       	and	r24, r24
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <__stack+0xa7>
    11a4:	b2 cf       	rjmp	.-156    	; 0x110a <__stack+0xb>
					uart0_hal_read_message_as_str(lm_msg);
    11a6:	8e e5       	ldi	r24, 0x5E	; 94
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    11ae:	6e e5       	ldi	r22, 0x5E	; 94
    11b0:	72 e0       	ldi	r23, 0x02	; 2
    11b2:	ce 01       	movw	r24, r28
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <util_matchMessage>
    11ba:	18 2f       	mov	r17, r24
    11bc:	a6 cf       	rjmp	.-180    	; 0x110a <__stack+0xb>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    11be:	80 e0       	ldi	r24, 0x00	; 0
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    11c0:	28 96       	adiw	r28, 0x08	; 8
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00001cae <SC_put_to_sleep>:
static uint16_t cnt=0;
static int8_t eventPointer;

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	5c e5       	ldi	r21, 0x5C	; 92
    1cb2:	66 e2       	ldi	r22, 0x26	; 38
    1cb4:	75 e0       	ldi	r23, 0x05	; 5
    1cb6:	8e e5       	ldi	r24, 0x5E	; 94
    1cb8:	92 e0       	ldi	r25, 0x02	; 2
    1cba:	0e 94 b7 0b 	call	0x176e	; 0x176e <sys_sleep_cmd>
	attach_ending(lm_msg);
    1cbe:	8e e5       	ldi	r24, 0x5E	; 94
    1cc0:	92 e0       	ldi	r25, 0x02	; 2
    1cc2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <attach_ending>
	uart0_hal_send_string(lm_msg);
    1cc6:	6e e5       	ldi	r22, 0x5E	; 94
    1cc8:	72 e0       	ldi	r23, 0x02	; 2
    1cca:	80 e8       	ldi	r24, 0x80	; 128
    1ccc:	0e 94 17 0b 	call	0x162e	; 0x162e <uart0_hal_send_string>
    1cd0:	2f ef       	ldi	r18, 0xFF	; 255
    1cd2:	81 ee       	ldi	r24, 0xE1	; 225
    1cd4:	94 e0       	ldi	r25, 0x04	; 4
    1cd6:	21 50       	subi	r18, 0x01	; 1
    1cd8:	80 40       	sbci	r24, 0x00	; 0
    1cda:	90 40       	sbci	r25, 0x00	; 0
    1cdc:	e1 f7       	brne	.-8      	; 0x1cd6 <SC_put_to_sleep+0x28>
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <SC_put_to_sleep+0x32>
    1ce0:	00 00       	nop
	_delay_ms(200);
	return LM_STATUS_SUCCESS;
}
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

00001fd2 <util_setPendingStates>:
char lm_msg[200];

static void cb_watchdog_counter();

void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	71 83       	std	Z+1, r23	; 0x01
    1fd6:	60 83       	st	Z, r22
	sd->failure_state=failed;
    1fd8:	53 83       	std	Z+3, r21	; 0x03
    1fda:	42 83       	std	Z+2, r20	; 0x02
    1fdc:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

00001fde <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    1fde:	fc 01       	movw	r30, r24
    1fe0:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    1fe2:	25 83       	std	Z+5, r18	; 0x05
    1fe4:	36 83       	std	Z+6, r19	; 0x06
    1fe6:	47 83       	std	Z+7, r20	; 0x07
    1fe8:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

00001a52 <util_strbeginswith>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    1a52:	6f 92       	push	r6
    1a54:	7f 92       	push	r7
    1a56:	8f 92       	push	r8
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	3b 01       	movw	r6, r22
    1a64:	88 2e       	mov	r8, r24
    1a66:	69 01       	movw	r12, r18
    1a68:	e4 2e       	mov	r14, r20
    1a6a:	84 2f       	mov	r24, r20
    1a6c:	b9 01       	movw	r22, r18
    1a6e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <strlen>
    1a72:	8c 01       	movw	r16, r24
    1a74:	4e 2d       	mov	r20, r14
    1a76:	96 01       	movw	r18, r12
    1a78:	88 2d       	mov	r24, r8
    1a7a:	b3 01       	movw	r22, r6
    1a7c:	0e 94 4e 0b 	call	0x169c	; 0x169c <strncmp>
    1a80:	21 e0       	ldi	r18, 0x01	; 1
    1a82:	89 2b       	or	r24, r25
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <util_strbeginswith+0x36>
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	82 2f       	mov	r24, r18
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	ef 90       	pop	r14
    1a90:	df 90       	pop	r13
    1a92:	cf 90       	pop	r12
    1a94:	8f 90       	pop	r8
    1a96:	7f 90       	pop	r7
    1a98:	6f 90       	pop	r6
    1a9a:	08 95       	ret

Disassembly of section .text.util_matchMessage:

000017cc <util_matchMessage>:
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	ec 01       	movw	r28, r24
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	91 f0       	breq	.+36     	; 0x17fc <util_matchMessage+0x30>
    17d8:	18 f0       	brcs	.+6      	; 0x17e0 <util_matchMessage+0x14>
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	e9 f0       	breq	.+58     	; 0x1818 <util_matchMessage+0x4c>
    17de:	1f c0       	rjmp	.+62     	; 0x181e <util_matchMessage+0x52>
    17e0:	2d 81       	ldd	r18, Y+5	; 0x05
    17e2:	3e 81       	ldd	r19, Y+6	; 0x06
    17e4:	4f 81       	ldd	r20, Y+7	; 0x07
    17e6:	80 e8       	ldi	r24, 0x80	; 128
    17e8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <strcmp>
    17ec:	89 2b       	or	r24, r25
    17ee:	19 f4       	brne	.+6      	; 0x17f6 <util_matchMessage+0x2a>
    17f0:	88 81       	ld	r24, Y
    17f2:	99 81       	ldd	r25, Y+1	; 0x01
    17f4:	16 c0       	rjmp	.+44     	; 0x1822 <util_matchMessage+0x56>
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	13 c0       	rjmp	.+38     	; 0x1822 <util_matchMessage+0x56>
    17fc:	2d 81       	ldd	r18, Y+5	; 0x05
    17fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1800:	4f 81       	ldd	r20, Y+7	; 0x07
    1802:	80 e8       	ldi	r24, 0x80	; 128
    1804:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <util_strbeginswith>
    1808:	88 23       	and	r24, r24
    180a:	19 f0       	breq	.+6      	; 0x1812 <util_matchMessage+0x46>
    180c:	88 81       	ld	r24, Y
    180e:	99 81       	ldd	r25, Y+1	; 0x01
    1810:	08 c0       	rjmp	.+16     	; 0x1822 <util_matchMessage+0x56>
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	9b 81       	ldd	r25, Y+3	; 0x03
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <util_matchMessage+0x56>
    1818:	88 81       	ld	r24, Y
    181a:	99 81       	ldd	r25, Y+1	; 0x01
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <util_matchMessage+0x56>
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	9b 81       	ldd	r25, Y+3	; 0x03
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

Disassembly of section .text.power_test:

00000f60 <power_test>:
	char res[30];
	LM_forward_msg("sys get hweui", res);
	uart1_hal_send_string(res);
}

static void power_test(){
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	c6 57       	subi	r28, 0x76	; 118
     f6c:	d1 09       	sbc	r29, r1
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
	char deveui[]="70B3D57ED0047B7D";
     f78:	29 e7       	ldi	r18, 0x79	; 121
     f7a:	32 e0       	ldi	r19, 0x02	; 2
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	81 e1       	ldi	r24, 0x11	; 17
     f80:	f9 01       	movw	r30, r18
     f82:	de 01       	movw	r26, r28
     f84:	11 96       	adiw	r26, 0x01	; 1
     f86:	74 2f       	mov	r23, r20
     f88:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__movmemx_qi>
	char appeui[]="0000000000000000";
     f8c:	2a e8       	ldi	r18, 0x8A	; 138
     f8e:	32 e0       	ldi	r19, 0x02	; 2
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	81 e1       	ldi	r24, 0x11	; 17
     f94:	f9 01       	movw	r30, r18
     f96:	de 01       	movw	r26, r28
     f98:	52 96       	adiw	r26, 0x12	; 18
     f9a:	74 2f       	mov	r23, r20
     f9c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__movmemx_qi>
	char appkey[]="EA11A4D6D368D5CDE102B0491B40A494";
     fa0:	2b e9       	ldi	r18, 0x9B	; 155
     fa2:	32 e0       	ldi	r19, 0x02	; 2
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	81 e2       	ldi	r24, 0x21	; 33
     fa8:	f9 01       	movw	r30, r18
     faa:	de 01       	movw	r26, r28
     fac:	93 96       	adiw	r26, 0x23	; 35
     fae:	74 2f       	mov	r23, r20
     fb0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__movmemx_qi>
	uint8_t data[51];
	
	//Load data
	for (uint8_t i=0; i<51; i++)
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <power_test+0x6a>
	{
		data[i]=0xAA;
     fb8:	e4 e4       	ldi	r30, 0x44	; 68
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	ec 0f       	add	r30, r28
     fbe:	fd 1f       	adc	r31, r29
     fc0:	e8 0f       	add	r30, r24
     fc2:	f1 1d       	adc	r31, r1
     fc4:	9a ea       	ldi	r25, 0xAA	; 170
     fc6:	90 83       	st	Z, r25
	char appeui[]="0000000000000000";
	char appkey[]="EA11A4D6D368D5CDE102B0491B40A494";
	uint8_t data[51];
	
	//Load data
	for (uint8_t i=0; i<51; i++)
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	83 33       	cpi	r24, 0x33	; 51
     fcc:	a8 f3       	brcs	.-22     	; 0xfb8 <power_test+0x58>
	{
		data[i]=0xAA;
	}
	uart1_hal_send_string("Start LORA power test");
     fce:	6a ee       	ldi	r22, 0xEA	; 234
     fd0:	71 e0       	ldi	r23, 0x01	; 1
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
	
	
	//Join network
	uart1_hal_send_string("Join network");
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	72 e0       	ldi	r23, 0x02	; 2
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
	LM_STATUS status=LM_join_network(deveui, appeui, appkey);
     fe2:	ae 01       	movw	r20, r28
     fe4:	4d 5d       	subi	r20, 0xDD	; 221
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	be 01       	movw	r22, r28
     fea:	6e 5e       	subi	r22, 0xEE	; 238
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	ce 01       	movw	r24, r28
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	0e 94 1d 10 	call	0x203a	; 0x203a <LM_join_network>
	if(status==LM_STATUS_SUCCESS){
     ff6:	81 11       	cpse	r24, r1
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
		uart1_hal_send_string("OK ");
     ffa:	6d e0       	ldi	r22, 0x0D	; 13
     ffc:	72 e0       	ldi	r23, 0x02	; 2
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
		return;
	}
	
	//Send 3 uplink
	
	for (uint8_t i=0; i<2; i++)
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	4c c0       	rjmp	.+152    	; 0x10a0 <__DATA_REGION_LENGTH__+0xa0>
	//Join network
	uart1_hal_send_string("Join network");
	LM_STATUS status=LM_join_network(deveui, appeui, appkey);
	if(status==LM_STATUS_SUCCESS){
		uart1_hal_send_string("OK ");
	}else if(status==LM_STATUS_TRY_AGAIN){
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	31 f4       	brne	.+12     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
		uart1_hal_send_string("TRY AGAIN ");
    100c:	61 e1       	ldi	r22, 0x11	; 17
    100e:	72 e0       	ldi	r23, 0x02	; 2
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
		return;
    1016:	5b c0       	rjmp	.+182    	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
	}else if(status==LM_STATUS_CONF_ERR){
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	31 f4       	brne	.+12     	; 0x1028 <__DATA_REGION_LENGTH__+0x28>
		uart1_hal_send_string("CONF_ERR ");
    101c:	6c e1       	ldi	r22, 0x1C	; 28
    101e:	72 e0       	ldi	r23, 0x02	; 2
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
		return;
    1026:	53 c0       	rjmp	.+166    	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
	}else{
		uart1_hal_send_string("FAIL ");
    1028:	66 e2       	ldi	r22, 0x26	; 38
    102a:	72 e0       	ldi	r23, 0x02	; 2
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
		return;
    1032:	4d c0       	rjmp	.+154    	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
	
	//Send 3 uplink
	
	for (uint8_t i=0; i<2; i++)
	{
		uart1_hal_send_string("Transmitting uplink");
    1034:	6c e2       	ldi	r22, 0x2C	; 44
    1036:	72 e0       	ldi	r23, 0x02	; 2
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
		LM_STATUS status=LM_send_uplink(data, 51);
    103e:	63 e3       	ldi	r22, 0x33	; 51
    1040:	ce 01       	movw	r24, r28
    1042:	8c 5b       	subi	r24, 0xBC	; 188
    1044:	9f 4f       	sbci	r25, 0xFF	; 255
    1046:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LM_send_uplink>
		if(status==LM_STATUS_SUCCESS){
    104a:	81 11       	cpse	r24, r1
    104c:	06 c0       	rjmp	.+12     	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
			uart1_hal_send_string("OK ");
    104e:	6d e0       	ldi	r22, 0x0D	; 13
    1050:	72 e0       	ldi	r23, 0x02	; 2
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
    1058:	1e c0       	rjmp	.+60     	; 0x1096 <__DATA_REGION_LENGTH__+0x96>
		}else if(status==LM_STATUS_TRY_AGAIN){
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	31 f4       	brne	.+12     	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
			uart1_hal_send_string("TRY AGAIN ");
    105e:	61 e1       	ldi	r22, 0x11	; 17
    1060:	72 e0       	ldi	r23, 0x02	; 2
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
    1068:	16 c0       	rjmp	.+44     	; 0x1096 <__DATA_REGION_LENGTH__+0x96>
		}else if(status==LM_STATUS_MAC_ERR){
    106a:	84 30       	cpi	r24, 0x04	; 4
    106c:	31 f4       	brne	.+12     	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
			uart1_hal_send_string("MAC_ERR ");
    106e:	60 e4       	ldi	r22, 0x40	; 64
    1070:	72 e0       	ldi	r23, 0x02	; 2
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
    1078:	0e c0       	rjmp	.+28     	; 0x1096 <__DATA_REGION_LENGTH__+0x96>
		}else if(status==LM_STATUS_INV_DATA_LEN){
    107a:	85 30       	cpi	r24, 0x05	; 5
    107c:	31 f4       	brne	.+12     	; 0x108a <__DATA_REGION_LENGTH__+0x8a>
			uart1_hal_send_string("inv length ");
    107e:	69 e4       	ldi	r22, 0x49	; 73
    1080:	72 e0       	ldi	r23, 0x02	; 2
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <__DATA_REGION_LENGTH__+0x96>
		}else{
			uart1_hal_send_string("FAIL ");
    108a:	66 e2       	ldi	r22, 0x26	; 38
    108c:	72 e0       	ldi	r23, 0x02	; 2
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
			return;
    1094:	1c c0       	rjmp	.+56     	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
		}
		
		while (!LM_is_free());
    1096:	0e 94 05 10 	call	0x200a	; 0x200a <LM_is_free>
    109a:	88 23       	and	r24, r24
    109c:	e1 f3       	breq	.-8      	; 0x1096 <__DATA_REGION_LENGTH__+0x96>
		return;
	}
	
	//Send 3 uplink
	
	for (uint8_t i=0; i<2; i++)
    109e:	1f 5f       	subi	r17, 0xFF	; 255
    10a0:	12 30       	cpi	r17, 0x02	; 2
    10a2:	40 f2       	brcs	.-112    	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
		}
		
		while (!LM_is_free());
	}
	
	uart1_hal_send_string("Done, power off");
    10a4:	65 e5       	ldi	r22, 0x55	; 85
    10a6:	72 e0       	ldi	r23, 0x02	; 2
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
	
	LM_put_to_sleep();
    10ae:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LM_put_to_sleep>
    10b2:	2f ef       	ldi	r18, 0xFF	; 255
    10b4:	83 ed       	ldi	r24, 0xD3	; 211
    10b6:	90 e3       	ldi	r25, 0x30	; 48
    10b8:	21 50       	subi	r18, 0x01	; 1
    10ba:	80 40       	sbci	r24, 0x00	; 0
    10bc:	90 40       	sbci	r25, 0x00	; 0
    10be:	e1 f7       	brne	.-8      	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
    10c2:	00 00       	nop
	_delay_ms(2000);
	
	uart1_hal_send_string("End LORA power test");
    10c4:	65 e6       	ldi	r22, 0x65	; 101
    10c6:	72 e0       	ldi	r23, 0x02	; 2
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	0e 94 a2 09 	call	0x1344	; 0x1344 <uart1_hal_send_string>
	
}
    10ce:	ca 58       	subi	r28, 0x8A	; 138
    10d0:	df 4f       	sbci	r29, 0xFF	; 255
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	08 95       	ret

Disassembly of section .text.test_LORA_module_start:

00001ece <test_LORA_module_start>:
static void power_test();



void test_LORA_module_start(){
	uart1_hal_init();
    1ece:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <uart1_hal_init>
	uart0_hal_init();
    1ed2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <uart0_hal_init>
	rn2483_init();
    1ed6:	0e 94 0a 10 	call	0x2014	; 0x2014 <rn2483_init>
	TC2_HAL_init();
    1eda:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <TC2_HAL_init>
		//test_send_uplink_block();
		//test_put_to_sleep();
		//test_wake_up();
		//test_reset();
		//test_forward_msg();
		power_test();
    1ede:	0e 94 b0 07 	call	0xf60	; 0xf60 <power_test>
    1ee2:	2f ef       	ldi	r18, 0xFF	; 255
    1ee4:	8d e3       	ldi	r24, 0x3D	; 61
    1ee6:	99 e4       	ldi	r25, 0x49	; 73
    1ee8:	21 50       	subi	r18, 0x01	; 1
    1eea:	80 40       	sbci	r24, 0x00	; 0
    1eec:	90 40       	sbci	r25, 0x00	; 0
    1eee:	e1 f7       	brne	.-8      	; 0x1ee8 <test_LORA_module_start+0x1a>
    1ef0:	00 c0       	rjmp	.+0      	; 0x1ef2 <test_LORA_module_start+0x24>
    1ef2:	00 00       	nop
    1ef4:	f4 cf       	rjmp	.-24     	; 0x1ede <test_LORA_module_start+0x10>

Disassembly of section .text.test_runner:

00002040 <test_runner>:
#include "MRPP_module/test_MRPP_module.h"
#include "PUMP_module/test_PUMP_module.h"
#include "LED_module/test_LED_module.h"

void test_runner(){
	test_LORA_module_start();
    2040:	0e 94 67 0f 	call	0x1ece	; 0x1ece <test_LORA_module_start>
    2044:	08 95       	ret

Disassembly of section .text.avrlibc:

000003c8 <vfprintf>:
 3c8:	a4 e1       	ldi	r26, 0x14	; 20
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	ea ee       	ldi	r30, 0xEA	; 234
 3ce:	f1 e0       	ldi	r31, 0x01	; 1
 3d0:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__prologue_saves__>
 3d4:	6c 01       	movw	r12, r24
 3d6:	1a 01       	movw	r2, r20
 3d8:	46 2e       	mov	r4, r22
 3da:	59 01       	movw	r10, r18
 3dc:	fc 01       	movw	r30, r24
 3de:	10 86       	std	Z+8, r1	; 0x08
 3e0:	17 82       	std	Z+7, r1	; 0x07
 3e2:	84 81       	ldd	r24, Z+4	; 0x04
 3e4:	81 ff       	sbrs	r24, 1
 3e6:	62 c3       	rjmp	.+1732   	; 0xaac <__EEPROM_REGION_LENGTH__+0x2ac>
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	9d 87       	std	Y+13, r25	; 0x0d
 3ee:	8c 87       	std	Y+12, r24	; 0x0c
 3f0:	a0 e8       	ldi	r26, 0x80	; 128
 3f2:	8a 8b       	std	Y+18, r24	; 0x12
 3f4:	9b 8b       	std	Y+19, r25	; 0x13
 3f6:	ac 8b       	std	Y+20, r26	; 0x14
 3f8:	f1 01       	movw	r30, r2
 3fa:	84 91       	lpm	r24, Z
 3fc:	47 fc       	sbrc	r4, 7
 3fe:	80 81       	ld	r24, Z
 400:	88 23       	and	r24, r24
 402:	09 f4       	brne	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	4f c3       	rjmp	.+1694   	; 0xaa4 <__EEPROM_REGION_LENGTH__+0x2a4>
 406:	44 2d       	mov	r20, r4
 408:	91 01       	movw	r18, r2
 40a:	2f 5f       	subi	r18, 0xFF	; 255
 40c:	3f 4f       	sbci	r19, 0xFF	; 255
 40e:	4f 4f       	sbci	r20, 0xFF	; 255
 410:	85 32       	cpi	r24, 0x25	; 37
 412:	19 f0       	breq	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 414:	19 01       	movw	r2, r18
 416:	44 2e       	mov	r4, r20
 418:	0a c0       	rjmp	.+20     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 41a:	f9 01       	movw	r30, r18
 41c:	84 91       	lpm	r24, Z
 41e:	47 fd       	sbrc	r20, 7
 420:	80 81       	ld	r24, Z
 422:	92 e0       	ldi	r25, 0x02	; 2
 424:	29 0e       	add	r2, r25
 426:	31 1c       	adc	r3, r1
 428:	41 1c       	adc	r4, r1
 42a:	85 32       	cpi	r24, 0x25	; 37
 42c:	49 f4       	brne	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42e:	b6 01       	movw	r22, r12
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 436:	bf 86       	std	Y+15, r11	; 0x0f
 438:	ae 86       	std	Y+14, r10	; 0x0e
 43a:	ae 84       	ldd	r10, Y+14	; 0x0e
 43c:	bf 84       	ldd	r11, Y+15	; 0x0f
 43e:	dc cf       	rjmp	.-72     	; 0x3f8 <vfprintf+0x30>
 440:	10 e0       	ldi	r17, 0x00	; 0
 442:	f1 2c       	mov	r15, r1
 444:	00 e0       	ldi	r16, 0x00	; 0
 446:	00 32       	cpi	r16, 0x20	; 32
 448:	a0 f4       	brcc	.+40     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 44a:	8b 32       	cpi	r24, 0x2B	; 43
 44c:	69 f0       	breq	.+26     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 44e:	30 f4       	brcc	.+12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 450:	80 32       	cpi	r24, 0x20	; 32
 452:	59 f0       	breq	.+22     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 454:	83 32       	cpi	r24, 0x23	; 35
 456:	69 f4       	brne	.+26     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 458:	00 61       	ori	r16, 0x10	; 16
 45a:	2c c0       	rjmp	.+88     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 45c:	8d 32       	cpi	r24, 0x2D	; 45
 45e:	39 f0       	breq	.+14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 460:	80 33       	cpi	r24, 0x30	; 48
 462:	39 f4       	brne	.+14     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 464:	01 60       	ori	r16, 0x01	; 1
 466:	26 c0       	rjmp	.+76     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 468:	02 60       	ori	r16, 0x02	; 2
 46a:	04 60       	ori	r16, 0x04	; 4
 46c:	23 c0       	rjmp	.+70     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 46e:	08 60       	ori	r16, 0x08	; 8
 470:	21 c0       	rjmp	.+66     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 472:	07 fd       	sbrc	r16, 7
 474:	29 c0       	rjmp	.+82     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 476:	90 ed       	ldi	r25, 0xD0	; 208
 478:	98 0f       	add	r25, r24
 47a:	9a 30       	cpi	r25, 0x0A	; 10
 47c:	78 f4       	brcc	.+30     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 47e:	06 ff       	sbrs	r16, 6
 480:	06 c0       	rjmp	.+12     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 482:	aa e0       	ldi	r26, 0x0A	; 10
 484:	1a 9f       	mul	r17, r26
 486:	90 0d       	add	r25, r0
 488:	11 24       	eor	r1, r1
 48a:	19 2f       	mov	r17, r25
 48c:	13 c0       	rjmp	.+38     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 48e:	ea e0       	ldi	r30, 0x0A	; 10
 490:	fe 9e       	mul	r15, r30
 492:	90 0d       	add	r25, r0
 494:	11 24       	eor	r1, r1
 496:	f9 2e       	mov	r15, r25
 498:	00 62       	ori	r16, 0x20	; 32
 49a:	0c c0       	rjmp	.+24     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 49c:	8e 32       	cpi	r24, 0x2E	; 46
 49e:	21 f4       	brne	.+8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a0:	06 fd       	sbrc	r16, 6
 4a2:	00 c3       	rjmp	.+1536   	; 0xaa4 <__EEPROM_REGION_LENGTH__+0x2a4>
 4a4:	00 64       	ori	r16, 0x40	; 64
 4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4a8:	8c 36       	cpi	r24, 0x6C	; 108
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4ac:	00 68       	ori	r16, 0x80	; 128
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b0:	88 36       	cpi	r24, 0x68	; 104
 4b2:	51 f4       	brne	.+20     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4b4:	f1 01       	movw	r30, r2
 4b6:	84 91       	lpm	r24, Z
 4b8:	47 fc       	sbrc	r4, 7
 4ba:	80 81       	ld	r24, Z
 4bc:	ff ef       	ldi	r31, 0xFF	; 255
 4be:	2f 1a       	sub	r2, r31
 4c0:	3f 0a       	sbc	r3, r31
 4c2:	4f 0a       	sbc	r4, r31
 4c4:	81 11       	cpse	r24, r1
 4c6:	bf cf       	rjmp	.-130    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 4c8:	9b eb       	ldi	r25, 0xBB	; 187
 4ca:	98 0f       	add	r25, r24
 4cc:	93 30       	cpi	r25, 0x03	; 3
 4ce:	18 f4       	brcc	.+6      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d0:	00 61       	ori	r16, 0x10	; 16
 4d2:	80 5e       	subi	r24, 0xE0	; 224
 4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4d6:	9b e9       	ldi	r25, 0x9B	; 155
 4d8:	98 0f       	add	r25, r24
 4da:	93 30       	cpi	r25, 0x03	; 3
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4de:	66 c1       	rjmp	.+716    	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
 4e0:	0f 7e       	andi	r16, 0xEF	; 239
 4e2:	06 ff       	sbrs	r16, 6
 4e4:	16 e0       	ldi	r17, 0x06	; 6
 4e6:	0f 73       	andi	r16, 0x3F	; 63
 4e8:	70 2e       	mov	r7, r16
 4ea:	85 36       	cpi	r24, 0x65	; 101
 4ec:	21 f4       	brne	.+8      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4ee:	20 2f       	mov	r18, r16
 4f0:	20 64       	ori	r18, 0x40	; 64
 4f2:	72 2e       	mov	r7, r18
 4f4:	08 c0       	rjmp	.+16     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4f6:	86 36       	cpi	r24, 0x66	; 102
 4f8:	21 f4       	brne	.+8      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4fa:	80 2f       	mov	r24, r16
 4fc:	80 68       	ori	r24, 0x80	; 128
 4fe:	78 2e       	mov	r7, r24
 500:	02 c0       	rjmp	.+4      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 502:	11 11       	cpse	r17, r1
 504:	11 50       	subi	r17, 0x01	; 1
 506:	77 fe       	sbrs	r7, 7
 508:	07 c0       	rjmp	.+14     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 50a:	1c 33       	cpi	r17, 0x3C	; 60
 50c:	50 f4       	brcc	.+20     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 50e:	ee 24       	eor	r14, r14
 510:	e3 94       	inc	r14
 512:	e1 0e       	add	r14, r17
 514:	27 e0       	ldi	r18, 0x07	; 7
 516:	0b c0       	rjmp	.+22     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 518:	18 30       	cpi	r17, 0x08	; 8
 51a:	38 f0       	brcs	.+14     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 51c:	27 e0       	ldi	r18, 0x07	; 7
 51e:	17 e0       	ldi	r17, 0x07	; 7
 520:	05 c0       	rjmp	.+10     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 522:	27 e0       	ldi	r18, 0x07	; 7
 524:	6c e3       	ldi	r22, 0x3C	; 60
 526:	e6 2e       	mov	r14, r22
 528:	02 c0       	rjmp	.+4      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52a:	21 2f       	mov	r18, r17
 52c:	e1 2c       	mov	r14, r1
 52e:	f5 01       	movw	r30, r10
 530:	34 96       	adiw	r30, 0x04	; 4
 532:	ff 87       	std	Y+15, r31	; 0x0f
 534:	ee 87       	std	Y+14, r30	; 0x0e
 536:	f5 01       	movw	r30, r10
 538:	60 81       	ld	r22, Z
 53a:	71 81       	ldd	r23, Z+1	; 0x01
 53c:	82 81       	ldd	r24, Z+2	; 0x02
 53e:	93 81       	ldd	r25, Z+3	; 0x03
 540:	0e 2d       	mov	r16, r14
 542:	ae 01       	movw	r20, r28
 544:	4f 5f       	subi	r20, 0xFF	; 255
 546:	5f 4f       	sbci	r21, 0xFF	; 255
 548:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__ftoa_engine>
 54c:	5c 01       	movw	r10, r24
 54e:	59 80       	ldd	r5, Y+1	; 0x01
 550:	50 fe       	sbrs	r5, 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 554:	53 fe       	sbrs	r5, 3
 556:	06 c0       	rjmp	.+12     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 558:	71 fc       	sbrc	r7, 1
 55a:	06 c0       	rjmp	.+12     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 55c:	72 fe       	sbrs	r7, 2
 55e:	06 c0       	rjmp	.+12     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 560:	00 e2       	ldi	r16, 0x20	; 32
 562:	05 c0       	rjmp	.+10     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 564:	0d e2       	ldi	r16, 0x2D	; 45
 566:	03 c0       	rjmp	.+6      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 568:	0b e2       	ldi	r16, 0x2B	; 43
 56a:	01 c0       	rjmp	.+2      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 56c:	00 e0       	ldi	r16, 0x00	; 0
 56e:	85 2d       	mov	r24, r5
 570:	8c 70       	andi	r24, 0x0C	; 12
 572:	19 f0       	breq	.+6      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 574:	01 11       	cpse	r16, r1
 576:	73 c2       	rjmp	.+1254   	; 0xa5e <__EEPROM_REGION_LENGTH__+0x25e>
 578:	be c2       	rjmp	.+1404   	; 0xaf6 <__EEPROM_REGION_LENGTH__+0x2f6>
 57a:	77 fe       	sbrs	r7, 7
 57c:	0f c0       	rjmp	.+30     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 57e:	ea 0c       	add	r14, r10
 580:	54 fe       	sbrs	r5, 4
 582:	04 c0       	rjmp	.+8      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 584:	8a 81       	ldd	r24, Y+2	; 0x02
 586:	81 33       	cpi	r24, 0x31	; 49
 588:	09 f4       	brne	.+2      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 58a:	ea 94       	dec	r14
 58c:	1e 14       	cp	r1, r14
 58e:	74 f5       	brge	.+92     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 590:	28 e0       	ldi	r18, 0x08	; 8
 592:	2e 15       	cp	r18, r14
 594:	78 f5       	brcc	.+94     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 596:	38 e0       	ldi	r19, 0x08	; 8
 598:	e3 2e       	mov	r14, r19
 59a:	2c c0       	rjmp	.+88     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 59c:	76 fc       	sbrc	r7, 6
 59e:	2a c0       	rjmp	.+84     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5a0:	81 2f       	mov	r24, r17
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	8a 15       	cp	r24, r10
 5a6:	9b 05       	cpc	r25, r11
 5a8:	9c f0       	brlt	.+38     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5aa:	8c ef       	ldi	r24, 0xFC	; 252
 5ac:	a8 16       	cp	r10, r24
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	b8 06       	cpc	r11, r24
 5b2:	74 f0       	brlt	.+28     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5b4:	97 2d       	mov	r25, r7
 5b6:	90 68       	ori	r25, 0x80	; 128
 5b8:	79 2e       	mov	r7, r25
 5ba:	0a c0       	rjmp	.+20     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5bc:	e2 e0       	ldi	r30, 0x02	; 2
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	ec 0f       	add	r30, r28
 5c2:	fd 1f       	adc	r31, r29
 5c4:	e1 0f       	add	r30, r17
 5c6:	f1 1d       	adc	r31, r1
 5c8:	80 81       	ld	r24, Z
 5ca:	80 33       	cpi	r24, 0x30	; 48
 5cc:	19 f4       	brne	.+6      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5ce:	11 50       	subi	r17, 0x01	; 1
 5d0:	11 11       	cpse	r17, r1
 5d2:	f4 cf       	rjmp	.-24     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5d4:	77 fe       	sbrs	r7, 7
 5d6:	0e c0       	rjmp	.+28     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5d8:	ee 24       	eor	r14, r14
 5da:	e3 94       	inc	r14
 5dc:	e1 0e       	add	r14, r17
 5de:	81 2f       	mov	r24, r17
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	a8 16       	cp	r10, r24
 5e4:	b9 06       	cpc	r11, r25
 5e6:	2c f4       	brge	.+10     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5e8:	1a 19       	sub	r17, r10
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5ec:	ee 24       	eor	r14, r14
 5ee:	e3 94       	inc	r14
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5f2:	10 e0       	ldi	r17, 0x00	; 0
 5f4:	77 fe       	sbrs	r7, 7
 5f6:	06 c0       	rjmp	.+12     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5f8:	1a 14       	cp	r1, r10
 5fa:	1b 04       	cpc	r1, r11
 5fc:	34 f4       	brge	.+12     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5fe:	c5 01       	movw	r24, r10
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	05 c0       	rjmp	.+10     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 604:	85 e0       	ldi	r24, 0x05	; 5
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	01 11       	cpse	r16, r1
 610:	01 96       	adiw	r24, 0x01	; 1
 612:	11 23       	and	r17, r17
 614:	31 f0       	breq	.+12     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 616:	21 2f       	mov	r18, r17
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	2f 5f       	subi	r18, 0xFF	; 255
 61c:	3f 4f       	sbci	r19, 0xFF	; 255
 61e:	82 0f       	add	r24, r18
 620:	93 1f       	adc	r25, r19
 622:	2f 2d       	mov	r18, r15
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	82 17       	cp	r24, r18
 628:	93 07       	cpc	r25, r19
 62a:	14 f4       	brge	.+4      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 62c:	f8 1a       	sub	r15, r24
 62e:	01 c0       	rjmp	.+2      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 630:	f1 2c       	mov	r15, r1
 632:	87 2d       	mov	r24, r7
 634:	89 70       	andi	r24, 0x09	; 9
 636:	49 f4       	brne	.+18     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 638:	ff 20       	and	r15, r15
 63a:	39 f0       	breq	.+14     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 63c:	b6 01       	movw	r22, r12
 63e:	80 e2       	ldi	r24, 0x20	; 32
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 646:	fa 94       	dec	r15
 648:	f7 cf       	rjmp	.-18     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 64a:	00 23       	and	r16, r16
 64c:	29 f0       	breq	.+10     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 64e:	b6 01       	movw	r22, r12
 650:	80 2f       	mov	r24, r16
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 658:	73 fc       	sbrc	r7, 3
 65a:	09 c0       	rjmp	.+18     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 65c:	ff 20       	and	r15, r15
 65e:	39 f0       	breq	.+14     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 660:	b6 01       	movw	r22, r12
 662:	80 e3       	ldi	r24, 0x30	; 48
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 66a:	fa 94       	dec	r15
 66c:	f7 cf       	rjmp	.-18     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 66e:	77 fe       	sbrs	r7, 7
 670:	49 c0       	rjmp	.+146    	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 672:	35 01       	movw	r6, r10
 674:	b7 fe       	sbrs	r11, 7
 676:	02 c0       	rjmp	.+4      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 678:	61 2c       	mov	r6, r1
 67a:	71 2c       	mov	r7, r1
 67c:	c5 01       	movw	r24, r10
 67e:	86 19       	sub	r24, r6
 680:	97 09       	sbc	r25, r7
 682:	88 24       	eor	r8, r8
 684:	83 94       	inc	r8
 686:	91 2c       	mov	r9, r1
 688:	8c 0e       	add	r8, r28
 68a:	9d 1e       	adc	r9, r29
 68c:	88 0e       	add	r8, r24
 68e:	99 1e       	adc	r9, r25
 690:	f5 01       	movw	r30, r10
 692:	ee 19       	sub	r30, r14
 694:	f1 09       	sbc	r31, r1
 696:	f9 8b       	std	Y+17, r31	; 0x11
 698:	e8 8b       	std	Y+16, r30	; 0x10
 69a:	01 2f       	mov	r16, r17
 69c:	10 e0       	ldi	r17, 0x00	; 0
 69e:	11 95       	neg	r17
 6a0:	01 95       	neg	r16
 6a2:	11 09       	sbc	r17, r1
 6a4:	ff ef       	ldi	r31, 0xFF	; 255
 6a6:	6f 16       	cp	r6, r31
 6a8:	7f 06       	cpc	r7, r31
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 6ac:	b6 01       	movw	r22, r12
 6ae:	8e e2       	ldi	r24, 0x2E	; 46
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 6b6:	a6 14       	cp	r10, r6
 6b8:	b7 04       	cpc	r11, r7
 6ba:	44 f0       	brlt	.+16     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 6bc:	88 89       	ldd	r24, Y+16	; 0x10
 6be:	99 89       	ldd	r25, Y+17	; 0x11
 6c0:	86 15       	cp	r24, r6
 6c2:	97 05       	cpc	r25, r7
 6c4:	1c f4       	brge	.+6      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 6c6:	f4 01       	movw	r30, r8
 6c8:	81 81       	ldd	r24, Z+1	; 0x01
 6ca:	01 c0       	rjmp	.+2      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6cc:	80 e3       	ldi	r24, 0x30	; 48
 6ce:	f1 e0       	ldi	r31, 0x01	; 1
 6d0:	6f 1a       	sub	r6, r31
 6d2:	71 08       	sbc	r7, r1
 6d4:	2f ef       	ldi	r18, 0xFF	; 255
 6d6:	82 1a       	sub	r8, r18
 6d8:	92 0a       	sbc	r9, r18
 6da:	60 16       	cp	r6, r16
 6dc:	71 06       	cpc	r7, r17
 6de:	2c f0       	brlt	.+10     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6e0:	b6 01       	movw	r22, r12
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 6e8:	dd cf       	rjmp	.-70     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 6ea:	a6 14       	cp	r10, r6
 6ec:	b7 04       	cpc	r11, r7
 6ee:	39 f4       	brne	.+14     	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
 6f0:	9a 81       	ldd	r25, Y+2	; 0x02
 6f2:	96 33       	cpi	r25, 0x36	; 54
 6f4:	18 f4       	brcc	.+6      	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6f6:	95 33       	cpi	r25, 0x35	; 53
 6f8:	11 f4       	brne	.+4      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
 6fa:	54 fe       	sbrs	r5, 4
 6fc:	81 e3       	ldi	r24, 0x31	; 49
 6fe:	b6 01       	movw	r22, r12
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	51 c0       	rjmp	.+162    	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
 704:	8a 81       	ldd	r24, Y+2	; 0x02
 706:	81 33       	cpi	r24, 0x31	; 49
 708:	19 f0       	breq	.+6      	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 70a:	95 2d       	mov	r25, r5
 70c:	9f 7e       	andi	r25, 0xEF	; 239
 70e:	59 2e       	mov	r5, r25
 710:	b6 01       	movw	r22, r12
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 718:	11 11       	cpse	r17, r1
 71a:	05 c0       	rjmp	.+10     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 71c:	74 fc       	sbrc	r7, 4
 71e:	1c c0       	rjmp	.+56     	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
 720:	85 e6       	ldi	r24, 0x65	; 101
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	1b c0       	rjmp	.+54     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 726:	b6 01       	movw	r22, r12
 728:	8e e2       	ldi	r24, 0x2E	; 46
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 730:	02 e0       	ldi	r16, 0x02	; 2
 732:	01 0f       	add	r16, r17
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	11 e0       	ldi	r17, 0x01	; 1
 738:	18 0f       	add	r17, r24
 73a:	e1 e0       	ldi	r30, 0x01	; 1
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	ec 0f       	add	r30, r28
 740:	fd 1f       	adc	r31, r29
 742:	e8 0f       	add	r30, r24
 744:	f1 1d       	adc	r31, r1
 746:	80 81       	ld	r24, Z
 748:	b6 01       	movw	r22, r12
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 750:	81 2f       	mov	r24, r17
 752:	10 13       	cpse	r17, r16
 754:	f0 cf       	rjmp	.-32     	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 756:	e2 cf       	rjmp	.-60     	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 758:	85 e4       	ldi	r24, 0x45	; 69
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	b6 01       	movw	r22, r12
 75e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 762:	b7 fc       	sbrc	r11, 7
 764:	05 c0       	rjmp	.+10     	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 766:	a1 14       	cp	r10, r1
 768:	b1 04       	cpc	r11, r1
 76a:	39 f4       	brne	.+14     	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 76c:	54 fe       	sbrs	r5, 4
 76e:	05 c0       	rjmp	.+10     	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 770:	b1 94       	neg	r11
 772:	a1 94       	neg	r10
 774:	b1 08       	sbc	r11, r1
 776:	8d e2       	ldi	r24, 0x2D	; 45
 778:	01 c0       	rjmp	.+2      	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
 77a:	8b e2       	ldi	r24, 0x2B	; 43
 77c:	b6 01       	movw	r22, r12
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 784:	80 e3       	ldi	r24, 0x30	; 48
 786:	ea e0       	ldi	r30, 0x0A	; 10
 788:	ae 16       	cp	r10, r30
 78a:	b1 04       	cpc	r11, r1
 78c:	2c f0       	brlt	.+10     	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
 78e:	8f 5f       	subi	r24, 0xFF	; 255
 790:	aa e0       	ldi	r26, 0x0A	; 10
 792:	aa 1a       	sub	r10, r26
 794:	b1 08       	sbc	r11, r1
 796:	f7 cf       	rjmp	.-18     	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
 798:	b6 01       	movw	r22, r12
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 7a0:	b6 01       	movw	r22, r12
 7a2:	c5 01       	movw	r24, r10
 7a4:	c0 96       	adiw	r24, 0x30	; 48
 7a6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 7aa:	72 c1       	rjmp	.+740    	; 0xa90 <__EEPROM_REGION_LENGTH__+0x290>
 7ac:	83 36       	cpi	r24, 0x63	; 99
 7ae:	31 f0       	breq	.+12     	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
 7b0:	83 37       	cpi	r24, 0x73	; 115
 7b2:	91 f0       	breq	.+36     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
 7b4:	83 35       	cpi	r24, 0x53	; 83
 7b6:	09 f0       	breq	.+2      	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
 7b8:	5d c0       	rjmp	.+186    	; 0x874 <__EEPROM_REGION_LENGTH__+0x74>
 7ba:	24 c0       	rjmp	.+72     	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 7bc:	c5 01       	movw	r24, r10
 7be:	02 96       	adiw	r24, 0x02	; 2
 7c0:	9f 87       	std	Y+15, r25	; 0x0f
 7c2:	8e 87       	std	Y+14, r24	; 0x0e
 7c4:	f5 01       	movw	r30, r10
 7c6:	80 81       	ld	r24, Z
 7c8:	89 83       	std	Y+1, r24	; 0x01
 7ca:	6a 88       	ldd	r6, Y+18	; 0x12
 7cc:	7b 88       	ldd	r7, Y+19	; 0x13
 7ce:	8c 88       	ldd	r8, Y+20	; 0x14
 7d0:	aa 24       	eor	r10, r10
 7d2:	a3 94       	inc	r10
 7d4:	b1 2c       	mov	r11, r1
 7d6:	14 c0       	rjmp	.+40     	; 0x800 <__EEPROM_REGION_LENGTH__>
 7d8:	c5 01       	movw	r24, r10
 7da:	03 96       	adiw	r24, 0x03	; 3
 7dc:	9f 87       	std	Y+15, r25	; 0x0f
 7de:	8e 87       	std	Y+14, r24	; 0x0e
 7e0:	f5 01       	movw	r30, r10
 7e2:	60 80       	ld	r6, Z
 7e4:	71 80       	ldd	r7, Z+1	; 0x01
 7e6:	82 80       	ldd	r8, Z+2	; 0x02
 7e8:	06 ff       	sbrs	r16, 6
 7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
 7ec:	41 2f       	mov	r20, r17
 7ee:	50 e0       	ldi	r21, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <__LOCK_REGION_LENGTH__+0x3f6>
 7f2:	4f ef       	ldi	r20, 0xFF	; 255
 7f4:	5f ef       	ldi	r21, 0xFF	; 255
 7f6:	88 2d       	mov	r24, r8
 7f8:	b3 01       	movw	r22, r6
 7fa:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <strnlen>
 7fe:	5c 01       	movw	r10, r24
 800:	0f 77       	andi	r16, 0x7F	; 127
 802:	15 c0       	rjmp	.+42     	; 0x82e <__EEPROM_REGION_LENGTH__+0x2e>
 804:	c5 01       	movw	r24, r10
 806:	03 96       	adiw	r24, 0x03	; 3
 808:	9f 87       	std	Y+15, r25	; 0x0f
 80a:	8e 87       	std	Y+14, r24	; 0x0e
 80c:	f5 01       	movw	r30, r10
 80e:	60 80       	ld	r6, Z
 810:	71 80       	ldd	r7, Z+1	; 0x01
 812:	82 80       	ldd	r8, Z+2	; 0x02
 814:	06 ff       	sbrs	r16, 6
 816:	03 c0       	rjmp	.+6      	; 0x81e <__EEPROM_REGION_LENGTH__+0x1e>
 818:	41 2f       	mov	r20, r17
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <__EEPROM_REGION_LENGTH__+0x22>
 81e:	4f ef       	ldi	r20, 0xFF	; 255
 820:	5f ef       	ldi	r21, 0xFF	; 255
 822:	88 2d       	mov	r24, r8
 824:	b3 01       	movw	r22, r6
 826:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <strnlen>
 82a:	5c 01       	movw	r10, r24
 82c:	00 68       	ori	r16, 0x80	; 128
 82e:	03 fd       	sbrc	r16, 3
 830:	1d c0       	rjmp	.+58     	; 0x86c <__EEPROM_REGION_LENGTH__+0x6c>
 832:	8f 2d       	mov	r24, r15
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	a8 16       	cp	r10, r24
 838:	b9 06       	cpc	r11, r25
 83a:	c0 f4       	brcc	.+48     	; 0x86c <__EEPROM_REGION_LENGTH__+0x6c>
 83c:	b6 01       	movw	r22, r12
 83e:	80 e2       	ldi	r24, 0x20	; 32
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 846:	fa 94       	dec	r15
 848:	f4 cf       	rjmp	.-24     	; 0x832 <__EEPROM_REGION_LENGTH__+0x32>
 84a:	f3 01       	movw	r30, r6
 84c:	84 91       	lpm	r24, Z
 84e:	87 fc       	sbrc	r8, 7
 850:	80 81       	ld	r24, Z
 852:	ff ef       	ldi	r31, 0xFF	; 255
 854:	6f 1a       	sub	r6, r31
 856:	7f 0a       	sbc	r7, r31
 858:	8f 0a       	sbc	r8, r31
 85a:	b6 01       	movw	r22, r12
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 862:	f1 10       	cpse	r15, r1
 864:	fa 94       	dec	r15
 866:	21 e0       	ldi	r18, 0x01	; 1
 868:	a2 1a       	sub	r10, r18
 86a:	b1 08       	sbc	r11, r1
 86c:	a1 14       	cp	r10, r1
 86e:	b1 04       	cpc	r11, r1
 870:	61 f7       	brne	.-40     	; 0x84a <__EEPROM_REGION_LENGTH__+0x4a>
 872:	0e c1       	rjmp	.+540    	; 0xa90 <__EEPROM_REGION_LENGTH__+0x290>
 874:	84 36       	cpi	r24, 0x64	; 100
 876:	11 f0       	breq	.+4      	; 0x87c <__EEPROM_REGION_LENGTH__+0x7c>
 878:	89 36       	cpi	r24, 0x69	; 105
 87a:	79 f5       	brne	.+94     	; 0x8da <__EEPROM_REGION_LENGTH__+0xda>
 87c:	c5 01       	movw	r24, r10
 87e:	07 ff       	sbrs	r16, 7
 880:	09 c0       	rjmp	.+18     	; 0x894 <__EEPROM_REGION_LENGTH__+0x94>
 882:	04 96       	adiw	r24, 0x04	; 4
 884:	9f 87       	std	Y+15, r25	; 0x0f
 886:	8e 87       	std	Y+14, r24	; 0x0e
 888:	f5 01       	movw	r30, r10
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	82 81       	ldd	r24, Z+2	; 0x02
 890:	93 81       	ldd	r25, Z+3	; 0x03
 892:	0a c0       	rjmp	.+20     	; 0x8a8 <__EEPROM_REGION_LENGTH__+0xa8>
 894:	02 96       	adiw	r24, 0x02	; 2
 896:	9f 87       	std	Y+15, r25	; 0x0f
 898:	8e 87       	std	Y+14, r24	; 0x0e
 89a:	f5 01       	movw	r30, r10
 89c:	60 81       	ld	r22, Z
 89e:	71 81       	ldd	r23, Z+1	; 0x01
 8a0:	07 2e       	mov	r0, r23
 8a2:	00 0c       	add	r0, r0
 8a4:	88 0b       	sbc	r24, r24
 8a6:	99 0b       	sbc	r25, r25
 8a8:	0f 76       	andi	r16, 0x6F	; 111
 8aa:	e0 2e       	mov	r14, r16
 8ac:	97 ff       	sbrs	r25, 7
 8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <__EEPROM_REGION_LENGTH__+0xc4>
 8b0:	90 95       	com	r25
 8b2:	80 95       	com	r24
 8b4:	70 95       	com	r23
 8b6:	61 95       	neg	r22
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	8f 4f       	sbci	r24, 0xFF	; 255
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	f0 2f       	mov	r31, r16
 8c0:	f0 68       	ori	r31, 0x80	; 128
 8c2:	ef 2e       	mov	r14, r31
 8c4:	2a e0       	ldi	r18, 0x0A	; 10
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	ae 01       	movw	r20, r28
 8ca:	4f 5f       	subi	r20, 0xFF	; 255
 8cc:	5f 4f       	sbci	r21, 0xFF	; 255
 8ce:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__ultoa_invert>
 8d2:	a8 2e       	mov	r10, r24
 8d4:	2c 85       	ldd	r18, Y+12	; 0x0c
 8d6:	a2 1a       	sub	r10, r18
 8d8:	4b c0       	rjmp	.+150    	; 0x970 <__EEPROM_REGION_LENGTH__+0x170>
 8da:	85 37       	cpi	r24, 0x75	; 117
 8dc:	29 f4       	brne	.+10     	; 0x8e8 <__EEPROM_REGION_LENGTH__+0xe8>
 8de:	0f 7e       	andi	r16, 0xEF	; 239
 8e0:	e0 2e       	mov	r14, r16
 8e2:	2a e0       	ldi	r18, 0x0A	; 10
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	25 c0       	rjmp	.+74     	; 0x932 <__EEPROM_REGION_LENGTH__+0x132>
 8e8:	90 2f       	mov	r25, r16
 8ea:	99 7f       	andi	r25, 0xF9	; 249
 8ec:	e9 2e       	mov	r14, r25
 8ee:	8f 36       	cpi	r24, 0x6F	; 111
 8f0:	c1 f0       	breq	.+48     	; 0x922 <__EEPROM_REGION_LENGTH__+0x122>
 8f2:	18 f4       	brcc	.+6      	; 0x8fa <__EEPROM_REGION_LENGTH__+0xfa>
 8f4:	88 35       	cpi	r24, 0x58	; 88
 8f6:	79 f0       	breq	.+30     	; 0x916 <__EEPROM_REGION_LENGTH__+0x116>
 8f8:	d5 c0       	rjmp	.+426    	; 0xaa4 <__EEPROM_REGION_LENGTH__+0x2a4>
 8fa:	80 37       	cpi	r24, 0x70	; 112
 8fc:	19 f0       	breq	.+6      	; 0x904 <__EEPROM_REGION_LENGTH__+0x104>
 8fe:	88 37       	cpi	r24, 0x78	; 120
 900:	21 f0       	breq	.+8      	; 0x90a <__EEPROM_REGION_LENGTH__+0x10a>
 902:	d0 c0       	rjmp	.+416    	; 0xaa4 <__EEPROM_REGION_LENGTH__+0x2a4>
 904:	a9 2f       	mov	r26, r25
 906:	a0 61       	ori	r26, 0x10	; 16
 908:	ea 2e       	mov	r14, r26
 90a:	e4 fe       	sbrs	r14, 4
 90c:	0d c0       	rjmp	.+26     	; 0x928 <__EEPROM_REGION_LENGTH__+0x128>
 90e:	ee 2d       	mov	r30, r14
 910:	e4 60       	ori	r30, 0x04	; 4
 912:	ee 2e       	mov	r14, r30
 914:	09 c0       	rjmp	.+18     	; 0x928 <__EEPROM_REGION_LENGTH__+0x128>
 916:	04 ff       	sbrs	r16, 4
 918:	0a c0       	rjmp	.+20     	; 0x92e <__EEPROM_REGION_LENGTH__+0x12e>
 91a:	f9 2f       	mov	r31, r25
 91c:	f6 60       	ori	r31, 0x06	; 6
 91e:	ef 2e       	mov	r14, r31
 920:	06 c0       	rjmp	.+12     	; 0x92e <__EEPROM_REGION_LENGTH__+0x12e>
 922:	28 e0       	ldi	r18, 0x08	; 8
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	05 c0       	rjmp	.+10     	; 0x932 <__EEPROM_REGION_LENGTH__+0x132>
 928:	20 e1       	ldi	r18, 0x10	; 16
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	02 c0       	rjmp	.+4      	; 0x932 <__EEPROM_REGION_LENGTH__+0x132>
 92e:	20 e1       	ldi	r18, 0x10	; 16
 930:	32 e0       	ldi	r19, 0x02	; 2
 932:	c5 01       	movw	r24, r10
 934:	e7 fe       	sbrs	r14, 7
 936:	09 c0       	rjmp	.+18     	; 0x94a <__EEPROM_REGION_LENGTH__+0x14a>
 938:	04 96       	adiw	r24, 0x04	; 4
 93a:	9f 87       	std	Y+15, r25	; 0x0f
 93c:	8e 87       	std	Y+14, r24	; 0x0e
 93e:	f5 01       	movw	r30, r10
 940:	60 81       	ld	r22, Z
 942:	71 81       	ldd	r23, Z+1	; 0x01
 944:	82 81       	ldd	r24, Z+2	; 0x02
 946:	93 81       	ldd	r25, Z+3	; 0x03
 948:	08 c0       	rjmp	.+16     	; 0x95a <__EEPROM_REGION_LENGTH__+0x15a>
 94a:	02 96       	adiw	r24, 0x02	; 2
 94c:	9f 87       	std	Y+15, r25	; 0x0f
 94e:	8e 87       	std	Y+14, r24	; 0x0e
 950:	f5 01       	movw	r30, r10
 952:	60 81       	ld	r22, Z
 954:	71 81       	ldd	r23, Z+1	; 0x01
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	ae 01       	movw	r20, r28
 95c:	4f 5f       	subi	r20, 0xFF	; 255
 95e:	5f 4f       	sbci	r21, 0xFF	; 255
 960:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__ultoa_invert>
 964:	a8 2e       	mov	r10, r24
 966:	fc 85       	ldd	r31, Y+12	; 0x0c
 968:	af 1a       	sub	r10, r31
 96a:	2e 2d       	mov	r18, r14
 96c:	2f 77       	andi	r18, 0x7F	; 127
 96e:	e2 2e       	mov	r14, r18
 970:	e6 fe       	sbrs	r14, 6
 972:	0b c0       	rjmp	.+22     	; 0x98a <__EEPROM_REGION_LENGTH__+0x18a>
 974:	0e 2d       	mov	r16, r14
 976:	0e 7f       	andi	r16, 0xFE	; 254
 978:	a1 16       	cp	r10, r17
 97a:	50 f4       	brcc	.+20     	; 0x990 <__EEPROM_REGION_LENGTH__+0x190>
 97c:	e4 fe       	sbrs	r14, 4
 97e:	0a c0       	rjmp	.+20     	; 0x994 <__EEPROM_REGION_LENGTH__+0x194>
 980:	e2 fc       	sbrc	r14, 2
 982:	08 c0       	rjmp	.+16     	; 0x994 <__EEPROM_REGION_LENGTH__+0x194>
 984:	0e 2d       	mov	r16, r14
 986:	0e 7e       	andi	r16, 0xEE	; 238
 988:	05 c0       	rjmp	.+10     	; 0x994 <__EEPROM_REGION_LENGTH__+0x194>
 98a:	ba 2c       	mov	r11, r10
 98c:	0e 2d       	mov	r16, r14
 98e:	03 c0       	rjmp	.+6      	; 0x996 <__EEPROM_REGION_LENGTH__+0x196>
 990:	ba 2c       	mov	r11, r10
 992:	01 c0       	rjmp	.+2      	; 0x996 <__EEPROM_REGION_LENGTH__+0x196>
 994:	b1 2e       	mov	r11, r17
 996:	04 ff       	sbrs	r16, 4
 998:	0d c0       	rjmp	.+26     	; 0x9b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 99a:	fe 01       	movw	r30, r28
 99c:	ea 0d       	add	r30, r10
 99e:	f1 1d       	adc	r31, r1
 9a0:	80 81       	ld	r24, Z
 9a2:	80 33       	cpi	r24, 0x30	; 48
 9a4:	11 f4       	brne	.+4      	; 0x9aa <__EEPROM_REGION_LENGTH__+0x1aa>
 9a6:	09 7e       	andi	r16, 0xE9	; 233
 9a8:	09 c0       	rjmp	.+18     	; 0x9bc <__EEPROM_REGION_LENGTH__+0x1bc>
 9aa:	02 ff       	sbrs	r16, 2
 9ac:	06 c0       	rjmp	.+12     	; 0x9ba <__EEPROM_REGION_LENGTH__+0x1ba>
 9ae:	b3 94       	inc	r11
 9b0:	b3 94       	inc	r11
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <__EEPROM_REGION_LENGTH__+0x1bc>
 9b4:	80 2f       	mov	r24, r16
 9b6:	86 78       	andi	r24, 0x86	; 134
 9b8:	09 f0       	breq	.+2      	; 0x9bc <__EEPROM_REGION_LENGTH__+0x1bc>
 9ba:	b3 94       	inc	r11
 9bc:	03 fd       	sbrc	r16, 3
 9be:	11 c0       	rjmp	.+34     	; 0x9e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 9c0:	00 ff       	sbrs	r16, 0
 9c2:	06 c0       	rjmp	.+12     	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9c4:	bf 14       	cp	r11, r15
 9c6:	88 f4       	brcc	.+34     	; 0x9ea <__EEPROM_REGION_LENGTH__+0x1ea>
 9c8:	fa 0c       	add	r15, r10
 9ca:	1f 2d       	mov	r17, r15
 9cc:	1b 19       	sub	r17, r11
 9ce:	0e c0       	rjmp	.+28     	; 0x9ec <__EEPROM_REGION_LENGTH__+0x1ec>
 9d0:	bf 14       	cp	r11, r15
 9d2:	60 f4       	brcc	.+24     	; 0x9ec <__EEPROM_REGION_LENGTH__+0x1ec>
 9d4:	b6 01       	movw	r22, r12
 9d6:	80 e2       	ldi	r24, 0x20	; 32
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 9de:	b3 94       	inc	r11
 9e0:	f7 cf       	rjmp	.-18     	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9e2:	bf 14       	cp	r11, r15
 9e4:	18 f4       	brcc	.+6      	; 0x9ec <__EEPROM_REGION_LENGTH__+0x1ec>
 9e6:	fb 18       	sub	r15, r11
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <__EEPROM_REGION_LENGTH__+0x1ee>
 9ea:	1a 2d       	mov	r17, r10
 9ec:	f1 2c       	mov	r15, r1
 9ee:	04 ff       	sbrs	r16, 4
 9f0:	10 c0       	rjmp	.+32     	; 0xa12 <__EEPROM_REGION_LENGTH__+0x212>
 9f2:	b6 01       	movw	r22, r12
 9f4:	80 e3       	ldi	r24, 0x30	; 48
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 9fc:	02 ff       	sbrs	r16, 2
 9fe:	17 c0       	rjmp	.+46     	; 0xa2e <__EEPROM_REGION_LENGTH__+0x22e>
 a00:	01 fd       	sbrc	r16, 1
 a02:	03 c0       	rjmp	.+6      	; 0xa0a <__EEPROM_REGION_LENGTH__+0x20a>
 a04:	88 e7       	ldi	r24, 0x78	; 120
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <__EEPROM_REGION_LENGTH__+0x20e>
 a0a:	88 e5       	ldi	r24, 0x58	; 88
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	b6 01       	movw	r22, r12
 a10:	0c c0       	rjmp	.+24     	; 0xa2a <__EEPROM_REGION_LENGTH__+0x22a>
 a12:	80 2f       	mov	r24, r16
 a14:	86 78       	andi	r24, 0x86	; 134
 a16:	59 f0       	breq	.+22     	; 0xa2e <__EEPROM_REGION_LENGTH__+0x22e>
 a18:	01 ff       	sbrs	r16, 1
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__EEPROM_REGION_LENGTH__+0x220>
 a1c:	8b e2       	ldi	r24, 0x2B	; 43
 a1e:	01 c0       	rjmp	.+2      	; 0xa22 <__EEPROM_REGION_LENGTH__+0x222>
 a20:	80 e2       	ldi	r24, 0x20	; 32
 a22:	07 fd       	sbrc	r16, 7
 a24:	8d e2       	ldi	r24, 0x2D	; 45
 a26:	b6 01       	movw	r22, r12
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 a2e:	a1 16       	cp	r10, r17
 a30:	38 f4       	brcc	.+14     	; 0xa40 <__EEPROM_REGION_LENGTH__+0x240>
 a32:	b6 01       	movw	r22, r12
 a34:	80 e3       	ldi	r24, 0x30	; 48
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 a3c:	11 50       	subi	r17, 0x01	; 1
 a3e:	f7 cf       	rjmp	.-18     	; 0xa2e <__EEPROM_REGION_LENGTH__+0x22e>
 a40:	aa 94       	dec	r10
 a42:	e1 e0       	ldi	r30, 0x01	; 1
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	ec 0f       	add	r30, r28
 a48:	fd 1f       	adc	r31, r29
 a4a:	ea 0d       	add	r30, r10
 a4c:	f1 1d       	adc	r31, r1
 a4e:	80 81       	ld	r24, Z
 a50:	b6 01       	movw	r22, r12
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 a58:	a1 10       	cpse	r10, r1
 a5a:	f2 cf       	rjmp	.-28     	; 0xa40 <__EEPROM_REGION_LENGTH__+0x240>
 a5c:	19 c0       	rjmp	.+50     	; 0xa90 <__EEPROM_REGION_LENGTH__+0x290>
 a5e:	f4 e0       	ldi	r31, 0x04	; 4
 a60:	ff 15       	cp	r31, r15
 a62:	80 f5       	brcc	.+96     	; 0xac4 <__EEPROM_REGION_LENGTH__+0x2c4>
 a64:	84 e0       	ldi	r24, 0x04	; 4
 a66:	f8 1a       	sub	r15, r24
 a68:	73 fe       	sbrs	r7, 3
 a6a:	23 c0       	rjmp	.+70     	; 0xab2 <__EEPROM_REGION_LENGTH__+0x2b2>
 a6c:	01 11       	cpse	r16, r1
 a6e:	2b c0       	rjmp	.+86     	; 0xac6 <__EEPROM_REGION_LENGTH__+0x2c6>
 a70:	53 fe       	sbrs	r5, 3
 a72:	2f c0       	rjmp	.+94     	; 0xad2 <__EEPROM_REGION_LENGTH__+0x2d2>
 a74:	53 ec       	ldi	r21, 0xC3	; 195
 a76:	85 2e       	mov	r8, r21
 a78:	53 e0       	ldi	r21, 0x03	; 3
 a7a:	95 2e       	mov	r9, r21
 a7c:	50 e0       	ldi	r21, 0x00	; 0
 a7e:	a5 2e       	mov	r10, r21
 a80:	07 2d       	mov	r16, r7
 a82:	00 71       	andi	r16, 0x10	; 16
 a84:	f4 01       	movw	r30, r8
 a86:	84 91       	lpm	r24, Z
 a88:	a7 fc       	sbrc	r10, 7
 a8a:	80 81       	ld	r24, Z
 a8c:	81 11       	cpse	r24, r1
 a8e:	28 c0       	rjmp	.+80     	; 0xae0 <__EEPROM_REGION_LENGTH__+0x2e0>
 a90:	ff 20       	and	r15, r15
 a92:	09 f4       	brne	.+2      	; 0xa96 <__EEPROM_REGION_LENGTH__+0x296>
 a94:	d2 cc       	rjmp	.-1628   	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 a96:	b6 01       	movw	r22, r12
 a98:	80 e2       	ldi	r24, 0x20	; 32
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 aa0:	fa 94       	dec	r15
 aa2:	f6 cf       	rjmp	.-20     	; 0xa90 <__EEPROM_REGION_LENGTH__+0x290>
 aa4:	f6 01       	movw	r30, r12
 aa6:	87 81       	ldd	r24, Z+7	; 0x07
 aa8:	90 85       	ldd	r25, Z+8	; 0x08
 aaa:	2c c0       	rjmp	.+88     	; 0xb04 <__EEPROM_REGION_LENGTH__+0x304>
 aac:	8f ef       	ldi	r24, 0xFF	; 255
 aae:	9f ef       	ldi	r25, 0xFF	; 255
 ab0:	29 c0       	rjmp	.+82     	; 0xb04 <__EEPROM_REGION_LENGTH__+0x304>
 ab2:	b6 01       	movw	r22, r12
 ab4:	80 e2       	ldi	r24, 0x20	; 32
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 abc:	fa 94       	dec	r15
 abe:	f1 10       	cpse	r15, r1
 ac0:	f8 cf       	rjmp	.-16     	; 0xab2 <__EEPROM_REGION_LENGTH__+0x2b2>
 ac2:	d4 cf       	rjmp	.-88     	; 0xa6c <__EEPROM_REGION_LENGTH__+0x26c>
 ac4:	f1 2c       	mov	r15, r1
 ac6:	b6 01       	movw	r22, r12
 ac8:	80 2f       	mov	r24, r16
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 ad0:	cf cf       	rjmp	.-98     	; 0xa70 <__EEPROM_REGION_LENGTH__+0x270>
 ad2:	4f eb       	ldi	r20, 0xBF	; 191
 ad4:	84 2e       	mov	r8, r20
 ad6:	43 e0       	ldi	r20, 0x03	; 3
 ad8:	94 2e       	mov	r9, r20
 ada:	40 e0       	ldi	r20, 0x00	; 0
 adc:	a4 2e       	mov	r10, r20
 ade:	d0 cf       	rjmp	.-96     	; 0xa80 <__EEPROM_REGION_LENGTH__+0x280>
 ae0:	01 11       	cpse	r16, r1
 ae2:	80 52       	subi	r24, 0x20	; 32
 ae4:	b6 01       	movw	r22, r12
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <fputc>
 aec:	ff ef       	ldi	r31, 0xFF	; 255
 aee:	8f 1a       	sub	r8, r31
 af0:	9f 0a       	sbc	r9, r31
 af2:	af 0a       	sbc	r10, r31
 af4:	c7 cf       	rjmp	.-114    	; 0xa84 <__EEPROM_REGION_LENGTH__+0x284>
 af6:	23 e0       	ldi	r18, 0x03	; 3
 af8:	2f 15       	cp	r18, r15
 afa:	10 f4       	brcc	.+4      	; 0xb00 <__EEPROM_REGION_LENGTH__+0x300>
 afc:	83 e0       	ldi	r24, 0x03	; 3
 afe:	b3 cf       	rjmp	.-154    	; 0xa66 <__EEPROM_REGION_LENGTH__+0x266>
 b00:	f1 2c       	mov	r15, r1
 b02:	b6 cf       	rjmp	.-148    	; 0xa70 <__EEPROM_REGION_LENGTH__+0x270>
 b04:	64 96       	adiw	r28, 0x14	; 20
 b06:	e2 e1       	ldi	r30, 0x12	; 18
 b08:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__epilogue_restores__>

Disassembly of section .text.libgcc:

00001fea <__tablejump2__>:
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	05 90       	lpm	r0, Z+
    1ff0:	f4 91       	lpm	r31, Z
    1ff2:	e0 2d       	mov	r30, r0
    1ff4:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00001ce6 <__prologue_saves__>:
    1ce6:	2f 92       	push	r2
    1ce8:	3f 92       	push	r3
    1cea:	4f 92       	push	r4
    1cec:	5f 92       	push	r5
    1cee:	6f 92       	push	r6
    1cf0:	7f 92       	push	r7
    1cf2:	8f 92       	push	r8
    1cf4:	9f 92       	push	r9
    1cf6:	af 92       	push	r10
    1cf8:	bf 92       	push	r11
    1cfa:	cf 92       	push	r12
    1cfc:	df 92       	push	r13
    1cfe:	ef 92       	push	r14
    1d00:	ff 92       	push	r15
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	ca 1b       	sub	r28, r26
    1d10:	db 0b       	sbc	r29, r27
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00001d1e <__epilogue_restores__>:
    1d1e:	2a 88       	ldd	r2, Y+18	; 0x12
    1d20:	39 88       	ldd	r3, Y+17	; 0x11
    1d22:	48 88       	ldd	r4, Y+16	; 0x10
    1d24:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d26:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d28:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d30:	b9 84       	ldd	r11, Y+9	; 0x09
    1d32:	c8 84       	ldd	r12, Y+8	; 0x08
    1d34:	df 80       	ldd	r13, Y+7	; 0x07
    1d36:	ee 80       	ldd	r14, Y+6	; 0x06
    1d38:	fd 80       	ldd	r15, Y+5	; 0x05
    1d3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1d3c:	1b 81       	ldd	r17, Y+3	; 0x03
    1d3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1d40:	b9 81       	ldd	r27, Y+1	; 0x01
    1d42:	ce 0f       	add	r28, r30
    1d44:	d1 1d       	adc	r29, r1
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	ed 01       	movw	r28, r26
    1d52:	08 95       	ret

Disassembly of section .text.libgcc:

00001f6c <__movmemx_qi>:
    1f6c:	99 27       	eor	r25, r25

00001f6e <__movmemx_hi>:
    1f6e:	77 fd       	sbrc	r23, 7
    1f70:	05 c0       	rjmp	.+10     	; 0x1f7c <__movmemx_hi+0xe>
    1f72:	05 90       	lpm	r0, Z+
    1f74:	0d 92       	st	X+, r0
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	e1 f7       	brne	.-8      	; 0x1f72 <__movmemx_hi+0x4>
    1f7a:	08 95       	ret
    1f7c:	01 90       	ld	r0, Z+
    1f7e:	0d 92       	st	X+, r0
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	e1 f7       	brne	.-8      	; 0x1f7c <__movmemx_hi+0xe>
    1f84:	08 95       	ret

Disassembly of section .text.avrlibc:

00000db0 <__ftoa_engine>:
 db0:	28 30       	cpi	r18, 0x08	; 8
 db2:	08 f0       	brcs	.+2      	; 0xdb6 <__ftoa_engine+0x6>
 db4:	27 e0       	ldi	r18, 0x07	; 7
 db6:	33 27       	eor	r19, r19
 db8:	da 01       	movw	r26, r20
 dba:	99 0f       	add	r25, r25
 dbc:	31 1d       	adc	r19, r1
 dbe:	87 fd       	sbrc	r24, 7
 dc0:	91 60       	ori	r25, 0x01	; 1
 dc2:	00 96       	adiw	r24, 0x00	; 0
 dc4:	61 05       	cpc	r22, r1
 dc6:	71 05       	cpc	r23, r1
 dc8:	39 f4       	brne	.+14     	; 0xdd8 <__ftoa_engine+0x28>
 dca:	32 60       	ori	r19, 0x02	; 2
 dcc:	2e 5f       	subi	r18, 0xFE	; 254
 dce:	3d 93       	st	X+, r19
 dd0:	30 e3       	ldi	r19, 0x30	; 48
 dd2:	2a 95       	dec	r18
 dd4:	e1 f7       	brne	.-8      	; 0xdce <__ftoa_engine+0x1e>
 dd6:	08 95       	ret
 dd8:	9f 3f       	cpi	r25, 0xFF	; 255
 dda:	30 f0       	brcs	.+12     	; 0xde8 <__ftoa_engine+0x38>
 ddc:	80 38       	cpi	r24, 0x80	; 128
 dde:	71 05       	cpc	r23, r1
 de0:	61 05       	cpc	r22, r1
 de2:	09 f0       	breq	.+2      	; 0xde6 <__ftoa_engine+0x36>
 de4:	3c 5f       	subi	r19, 0xFC	; 252
 de6:	3c 5f       	subi	r19, 0xFC	; 252
 de8:	3d 93       	st	X+, r19
 dea:	91 30       	cpi	r25, 0x01	; 1
 dec:	08 f0       	brcs	.+2      	; 0xdf0 <__ftoa_engine+0x40>
 dee:	80 68       	ori	r24, 0x80	; 128
 df0:	91 1d       	adc	r25, r1
 df2:	df 93       	push	r29
 df4:	cf 93       	push	r28
 df6:	1f 93       	push	r17
 df8:	0f 93       	push	r16
 dfa:	ff 92       	push	r15
 dfc:	ef 92       	push	r14
 dfe:	19 2f       	mov	r17, r25
 e00:	98 7f       	andi	r25, 0xF8	; 248
 e02:	96 95       	lsr	r25
 e04:	e9 2f       	mov	r30, r25
 e06:	96 95       	lsr	r25
 e08:	96 95       	lsr	r25
 e0a:	e9 0f       	add	r30, r25
 e0c:	ff 27       	eor	r31, r31
 e0e:	ea 50       	subi	r30, 0x0A	; 10
 e10:	ff 4f       	sbci	r31, 0xFF	; 255
 e12:	99 27       	eor	r25, r25
 e14:	33 27       	eor	r19, r19
 e16:	ee 24       	eor	r14, r14
 e18:	ff 24       	eor	r15, r15
 e1a:	a7 01       	movw	r20, r14
 e1c:	e7 01       	movw	r28, r14
 e1e:	05 90       	lpm	r0, Z+
 e20:	08 94       	sec
 e22:	07 94       	ror	r0
 e24:	28 f4       	brcc	.+10     	; 0xe30 <__ftoa_engine+0x80>
 e26:	36 0f       	add	r19, r22
 e28:	e7 1e       	adc	r14, r23
 e2a:	f8 1e       	adc	r15, r24
 e2c:	49 1f       	adc	r20, r25
 e2e:	51 1d       	adc	r21, r1
 e30:	66 0f       	add	r22, r22
 e32:	77 1f       	adc	r23, r23
 e34:	88 1f       	adc	r24, r24
 e36:	99 1f       	adc	r25, r25
 e38:	06 94       	lsr	r0
 e3a:	a1 f7       	brne	.-24     	; 0xe24 <__ftoa_engine+0x74>
 e3c:	05 90       	lpm	r0, Z+
 e3e:	07 94       	ror	r0
 e40:	28 f4       	brcc	.+10     	; 0xe4c <__ftoa_engine+0x9c>
 e42:	e7 0e       	add	r14, r23
 e44:	f8 1e       	adc	r15, r24
 e46:	49 1f       	adc	r20, r25
 e48:	56 1f       	adc	r21, r22
 e4a:	c1 1d       	adc	r28, r1
 e4c:	77 0f       	add	r23, r23
 e4e:	88 1f       	adc	r24, r24
 e50:	99 1f       	adc	r25, r25
 e52:	66 1f       	adc	r22, r22
 e54:	06 94       	lsr	r0
 e56:	a1 f7       	brne	.-24     	; 0xe40 <__ftoa_engine+0x90>
 e58:	05 90       	lpm	r0, Z+
 e5a:	07 94       	ror	r0
 e5c:	28 f4       	brcc	.+10     	; 0xe68 <__ftoa_engine+0xb8>
 e5e:	f8 0e       	add	r15, r24
 e60:	49 1f       	adc	r20, r25
 e62:	56 1f       	adc	r21, r22
 e64:	c7 1f       	adc	r28, r23
 e66:	d1 1d       	adc	r29, r1
 e68:	88 0f       	add	r24, r24
 e6a:	99 1f       	adc	r25, r25
 e6c:	66 1f       	adc	r22, r22
 e6e:	77 1f       	adc	r23, r23
 e70:	06 94       	lsr	r0
 e72:	a1 f7       	brne	.-24     	; 0xe5c <__ftoa_engine+0xac>
 e74:	05 90       	lpm	r0, Z+
 e76:	07 94       	ror	r0
 e78:	20 f4       	brcc	.+8      	; 0xe82 <__ftoa_engine+0xd2>
 e7a:	49 0f       	add	r20, r25
 e7c:	56 1f       	adc	r21, r22
 e7e:	c7 1f       	adc	r28, r23
 e80:	d8 1f       	adc	r29, r24
 e82:	99 0f       	add	r25, r25
 e84:	66 1f       	adc	r22, r22
 e86:	77 1f       	adc	r23, r23
 e88:	88 1f       	adc	r24, r24
 e8a:	06 94       	lsr	r0
 e8c:	a9 f7       	brne	.-22     	; 0xe78 <__ftoa_engine+0xc8>
 e8e:	84 91       	lpm	r24, Z
 e90:	10 95       	com	r17
 e92:	17 70       	andi	r17, 0x07	; 7
 e94:	41 f0       	breq	.+16     	; 0xea6 <__ftoa_engine+0xf6>
 e96:	d6 95       	lsr	r29
 e98:	c7 95       	ror	r28
 e9a:	57 95       	ror	r21
 e9c:	47 95       	ror	r20
 e9e:	f7 94       	ror	r15
 ea0:	e7 94       	ror	r14
 ea2:	1a 95       	dec	r17
 ea4:	c1 f7       	brne	.-16     	; 0xe96 <__ftoa_engine+0xe6>
 ea6:	ec e9       	ldi	r30, 0x9C	; 156
 ea8:	f0 e0       	ldi	r31, 0x00	; 0
 eaa:	68 94       	set
 eac:	15 90       	lpm	r1, Z+
 eae:	15 91       	lpm	r17, Z+
 eb0:	35 91       	lpm	r19, Z+
 eb2:	65 91       	lpm	r22, Z+
 eb4:	95 91       	lpm	r25, Z+
 eb6:	05 90       	lpm	r0, Z+
 eb8:	7f e2       	ldi	r23, 0x2F	; 47
 eba:	73 95       	inc	r23
 ebc:	e1 18       	sub	r14, r1
 ebe:	f1 0a       	sbc	r15, r17
 ec0:	43 0b       	sbc	r20, r19
 ec2:	56 0b       	sbc	r21, r22
 ec4:	c9 0b       	sbc	r28, r25
 ec6:	d0 09       	sbc	r29, r0
 ec8:	c0 f7       	brcc	.-16     	; 0xeba <__ftoa_engine+0x10a>
 eca:	e1 0c       	add	r14, r1
 ecc:	f1 1e       	adc	r15, r17
 ece:	43 1f       	adc	r20, r19
 ed0:	56 1f       	adc	r21, r22
 ed2:	c9 1f       	adc	r28, r25
 ed4:	d0 1d       	adc	r29, r0
 ed6:	7e f4       	brtc	.+30     	; 0xef6 <__ftoa_engine+0x146>
 ed8:	70 33       	cpi	r23, 0x30	; 48
 eda:	11 f4       	brne	.+4      	; 0xee0 <__ftoa_engine+0x130>
 edc:	8a 95       	dec	r24
 ede:	e6 cf       	rjmp	.-52     	; 0xeac <__ftoa_engine+0xfc>
 ee0:	e8 94       	clt
 ee2:	01 50       	subi	r16, 0x01	; 1
 ee4:	30 f0       	brcs	.+12     	; 0xef2 <__ftoa_engine+0x142>
 ee6:	08 0f       	add	r16, r24
 ee8:	0a f4       	brpl	.+2      	; 0xeec <__ftoa_engine+0x13c>
 eea:	00 27       	eor	r16, r16
 eec:	02 17       	cp	r16, r18
 eee:	08 f4       	brcc	.+2      	; 0xef2 <__ftoa_engine+0x142>
 ef0:	20 2f       	mov	r18, r16
 ef2:	23 95       	inc	r18
 ef4:	02 2f       	mov	r16, r18
 ef6:	7a 33       	cpi	r23, 0x3A	; 58
 ef8:	28 f0       	brcs	.+10     	; 0xf04 <__ftoa_engine+0x154>
 efa:	79 e3       	ldi	r23, 0x39	; 57
 efc:	7d 93       	st	X+, r23
 efe:	2a 95       	dec	r18
 f00:	e9 f7       	brne	.-6      	; 0xefc <__ftoa_engine+0x14c>
 f02:	10 c0       	rjmp	.+32     	; 0xf24 <__ftoa_engine+0x174>
 f04:	7d 93       	st	X+, r23
 f06:	2a 95       	dec	r18
 f08:	89 f6       	brne	.-94     	; 0xeac <__ftoa_engine+0xfc>
 f0a:	06 94       	lsr	r0
 f0c:	97 95       	ror	r25
 f0e:	67 95       	ror	r22
 f10:	37 95       	ror	r19
 f12:	17 95       	ror	r17
 f14:	17 94       	ror	r1
 f16:	e1 18       	sub	r14, r1
 f18:	f1 0a       	sbc	r15, r17
 f1a:	43 0b       	sbc	r20, r19
 f1c:	56 0b       	sbc	r21, r22
 f1e:	c9 0b       	sbc	r28, r25
 f20:	d0 09       	sbc	r29, r0
 f22:	98 f0       	brcs	.+38     	; 0xf4a <__ftoa_engine+0x19a>
 f24:	23 95       	inc	r18
 f26:	7e 91       	ld	r23, -X
 f28:	73 95       	inc	r23
 f2a:	7a 33       	cpi	r23, 0x3A	; 58
 f2c:	08 f0       	brcs	.+2      	; 0xf30 <__ftoa_engine+0x180>
 f2e:	70 e3       	ldi	r23, 0x30	; 48
 f30:	7c 93       	st	X, r23
 f32:	20 13       	cpse	r18, r16
 f34:	b8 f7       	brcc	.-18     	; 0xf24 <__ftoa_engine+0x174>
 f36:	7e 91       	ld	r23, -X
 f38:	70 61       	ori	r23, 0x10	; 16
 f3a:	7d 93       	st	X+, r23
 f3c:	30 f0       	brcs	.+12     	; 0xf4a <__ftoa_engine+0x19a>
 f3e:	83 95       	inc	r24
 f40:	71 e3       	ldi	r23, 0x31	; 49
 f42:	7d 93       	st	X+, r23
 f44:	70 e3       	ldi	r23, 0x30	; 48
 f46:	2a 95       	dec	r18
 f48:	e1 f7       	brne	.-8      	; 0xf42 <__ftoa_engine+0x192>
 f4a:	11 24       	eor	r1, r1
 f4c:	ef 90       	pop	r14
 f4e:	ff 90       	pop	r15
 f50:	0f 91       	pop	r16
 f52:	1f 91       	pop	r17
 f54:	cf 91       	pop	r28
 f56:	df 91       	pop	r29
 f58:	99 27       	eor	r25, r25
 f5a:	87 fd       	sbrc	r24, 7
 f5c:	90 95       	com	r25
 f5e:	08 95       	ret

Disassembly of section .text.avrlibc:

00001dbc <memcpy>:
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	6a 01       	movw	r12, r20
    1dc6:	e6 2e       	mov	r14, r22
    1dc8:	28 0f       	add	r18, r24
    1dca:	39 1f       	adc	r19, r25
    1dcc:	a2 17       	cp	r26, r18
    1dce:	b3 07       	cpc	r27, r19
    1dd0:	51 f0       	breq	.+20     	; 0x1de6 <memcpy+0x2a>
    1dd2:	f6 01       	movw	r30, r12
    1dd4:	44 91       	lpm	r20, Z
    1dd6:	e7 fc       	sbrc	r14, 7
    1dd8:	40 81       	ld	r20, Z
    1dda:	4d 93       	st	X+, r20
    1ddc:	4f ef       	ldi	r20, 0xFF	; 255
    1dde:	c4 1a       	sub	r12, r20
    1de0:	d4 0a       	sbc	r13, r20
    1de2:	e4 0a       	sbc	r14, r20
    1de4:	f3 cf       	rjmp	.-26     	; 0x1dcc <memcpy+0x10>
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	08 95       	ret

Disassembly of section .text.avrlibc:

00001bba <strcmp>:
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	6b 01       	movw	r12, r22
    1bc2:	e8 2e       	mov	r14, r24
    1bc4:	f6 01       	movw	r30, r12
    1bc6:	84 91       	lpm	r24, Z
    1bc8:	e7 fc       	sbrc	r14, 7
    1bca:	80 81       	ld	r24, Z
    1bcc:	f9 01       	movw	r30, r18
    1bce:	54 91       	lpm	r21, Z
    1bd0:	47 fd       	sbrc	r20, 7
    1bd2:	50 81       	ld	r21, Z
    1bd4:	85 13       	cpse	r24, r21
    1bd6:	0b c0       	rjmp	.+22     	; 0x1bee <strcmp+0x34>
    1bd8:	88 23       	and	r24, r24
    1bda:	41 f0       	breq	.+16     	; 0x1bec <strcmp+0x32>
    1bdc:	8f ef       	ldi	r24, 0xFF	; 255
    1bde:	c8 1a       	sub	r12, r24
    1be0:	d8 0a       	sbc	r13, r24
    1be2:	e8 0a       	sbc	r14, r24
    1be4:	2f 5f       	subi	r18, 0xFF	; 255
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bea:	ec cf       	rjmp	.-40     	; 0x1bc4 <strcmp+0xa>
    1bec:	58 2f       	mov	r21, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	85 1b       	sub	r24, r21
    1bf2:	91 09       	sbc	r25, r1
    1bf4:	ef 90       	pop	r14
    1bf6:	df 90       	pop	r13
    1bf8:	cf 90       	pop	r12
    1bfa:	08 95       	ret

Disassembly of section .text.avrlibc:

0000169c <strncmp>:
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	6b 01       	movw	r12, r22
    16a8:	e8 2e       	mov	r14, r24
    16aa:	01 15       	cp	r16, r1
    16ac:	11 05       	cpc	r17, r1
    16ae:	19 f1       	breq	.+70     	; 0x16f6 <strncmp+0x5a>
    16b0:	01 50       	subi	r16, 0x01	; 1
    16b2:	11 09       	sbc	r17, r1
    16b4:	f6 01       	movw	r30, r12
    16b6:	84 91       	lpm	r24, Z
    16b8:	e7 fc       	sbrc	r14, 7
    16ba:	80 81       	ld	r24, Z
    16bc:	88 23       	and	r24, r24
    16be:	99 f0       	breq	.+38     	; 0x16e6 <strncmp+0x4a>
    16c0:	f9 01       	movw	r30, r18
    16c2:	94 91       	lpm	r25, Z
    16c4:	47 fd       	sbrc	r20, 7
    16c6:	90 81       	ld	r25, Z
    16c8:	99 23       	and	r25, r25
    16ca:	69 f0       	breq	.+26     	; 0x16e6 <strncmp+0x4a>
    16cc:	01 15       	cp	r16, r1
    16ce:	11 05       	cpc	r17, r1
    16d0:	51 f0       	breq	.+20     	; 0x16e6 <strncmp+0x4a>
    16d2:	89 13       	cpse	r24, r25
    16d4:	08 c0       	rjmp	.+16     	; 0x16e6 <strncmp+0x4a>
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	c8 1a       	sub	r12, r24
    16da:	d8 0a       	sbc	r13, r24
    16dc:	e8 0a       	sbc	r14, r24
    16de:	2f 5f       	subi	r18, 0xFF	; 255
    16e0:	3f 4f       	sbci	r19, 0xFF	; 255
    16e2:	4f 4f       	sbci	r20, 0xFF	; 255
    16e4:	e5 cf       	rjmp	.-54     	; 0x16b0 <strncmp+0x14>
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	f9 01       	movw	r30, r18
    16ea:	24 91       	lpm	r18, Z
    16ec:	47 fd       	sbrc	r20, 7
    16ee:	20 81       	ld	r18, Z
    16f0:	82 1b       	sub	r24, r18
    16f2:	91 09       	sbc	r25, r1
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <strncmp+0x5e>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	08 95       	ret

Disassembly of section .text.avrlibc:

00001e7a <strlen>:
    1e7a:	cf 92       	push	r12
    1e7c:	df 92       	push	r13
    1e7e:	ef 92       	push	r14
    1e80:	6b 01       	movw	r12, r22
    1e82:	e8 2e       	mov	r14, r24
    1e84:	a8 2f       	mov	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	fc 01       	movw	r30, r24
    1e8a:	24 91       	lpm	r18, Z
    1e8c:	a7 fd       	sbrc	r26, 7
    1e8e:	20 81       	ld	r18, Z
    1e90:	22 23       	and	r18, r18
    1e92:	19 f0       	breq	.+6      	; 0x1e9a <strlen+0x20>
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	a1 1d       	adc	r26, r1
    1e98:	f7 cf       	rjmp	.-18     	; 0x1e88 <strlen+0xe>
    1e9a:	8c 19       	sub	r24, r12
    1e9c:	9d 09       	sbc	r25, r13
    1e9e:	ef 90       	pop	r14
    1ea0:	df 90       	pop	r13
    1ea2:	cf 90       	pop	r12
    1ea4:	08 95       	ret

Disassembly of section .text.avrlibc:

00001f16 <strcpy>:
    1f16:	9a 01       	movw	r18, r20
    1f18:	46 2f       	mov	r20, r22
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	f9 01       	movw	r30, r18
    1f1e:	54 91       	lpm	r21, Z
    1f20:	47 fd       	sbrc	r20, 7
    1f22:	50 81       	ld	r21, Z
    1f24:	5d 93       	st	X+, r21
    1f26:	55 23       	and	r21, r21
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <strcpy+0x1c>
    1f2a:	2f 5f       	subi	r18, 0xFF	; 255
    1f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f30:	f5 cf       	rjmp	.-22     	; 0x1f1c <strcpy+0x6>
    1f32:	08 95       	ret

Disassembly of section .text.avrlibc:

00001d54 <strnlen>:
    1d54:	cf 92       	push	r12
    1d56:	df 92       	push	r13
    1d58:	ef 92       	push	r14
    1d5a:	6b 01       	movw	r12, r22
    1d5c:	e8 2e       	mov	r14, r24
    1d5e:	a8 2f       	mov	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	41 15       	cp	r20, r1
    1d64:	51 05       	cpc	r21, r1
    1d66:	31 f4       	brne	.+12     	; 0x1d74 <strnlen+0x20>
    1d68:	8c 19       	sub	r24, r12
    1d6a:	9d 09       	sbc	r25, r13
    1d6c:	ef 90       	pop	r14
    1d6e:	df 90       	pop	r13
    1d70:	cf 90       	pop	r12
    1d72:	08 95       	ret
    1d74:	fc 01       	movw	r30, r24
    1d76:	24 91       	lpm	r18, Z
    1d78:	a7 fd       	sbrc	r26, 7
    1d7a:	20 81       	ld	r18, Z
    1d7c:	22 23       	and	r18, r18
    1d7e:	a1 f3       	breq	.-24     	; 0x1d68 <strnlen+0x14>
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	a1 1d       	adc	r26, r1
    1d84:	41 50       	subi	r20, 0x01	; 1
    1d86:	51 09       	sbc	r21, r1
    1d88:	ec cf       	rjmp	.-40     	; 0x1d62 <strnlen+0xe>

Disassembly of section .text.avrlibc:

000014ce <fputc>:
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	fb 01       	movw	r30, r22
    14d8:	24 81       	ldd	r18, Z+4	; 0x04
    14da:	21 fd       	sbrc	r18, 1
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <fputc+0x16>
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	9f ef       	ldi	r25, 0xFF	; 255
    14e2:	2c c0       	rjmp	.+88     	; 0x153c <fputc+0x6e>
    14e4:	22 ff       	sbrs	r18, 2
    14e6:	16 c0       	rjmp	.+44     	; 0x1514 <fputc+0x46>
    14e8:	47 81       	ldd	r20, Z+7	; 0x07
    14ea:	50 85       	ldd	r21, Z+8	; 0x08
    14ec:	25 81       	ldd	r18, Z+5	; 0x05
    14ee:	36 81       	ldd	r19, Z+6	; 0x06
    14f0:	42 17       	cp	r20, r18
    14f2:	53 07       	cpc	r21, r19
    14f4:	44 f4       	brge	.+16     	; 0x1506 <fputc+0x38>
    14f6:	a0 81       	ld	r26, Z
    14f8:	b1 81       	ldd	r27, Z+1	; 0x01
    14fa:	9d 01       	movw	r18, r26
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	31 83       	std	Z+1, r19	; 0x01
    1502:	20 83       	st	Z, r18
    1504:	8c 93       	st	X, r24
    1506:	27 81       	ldd	r18, Z+7	; 0x07
    1508:	30 85       	ldd	r19, Z+8	; 0x08
    150a:	2f 5f       	subi	r18, 0xFF	; 255
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	30 87       	std	Z+8, r19	; 0x08
    1510:	27 83       	std	Z+7, r18	; 0x07
    1512:	14 c0       	rjmp	.+40     	; 0x153c <fputc+0x6e>
    1514:	8b 01       	movw	r16, r22
    1516:	ec 01       	movw	r28, r24
    1518:	fb 01       	movw	r30, r22
    151a:	01 84       	ldd	r0, Z+9	; 0x09
    151c:	f2 85       	ldd	r31, Z+10	; 0x0a
    151e:	e0 2d       	mov	r30, r0
    1520:	09 95       	icall
    1522:	89 2b       	or	r24, r25
    1524:	e1 f6       	brne	.-72     	; 0x14de <fputc+0x10>
    1526:	d8 01       	movw	r26, r16
    1528:	17 96       	adiw	r26, 0x07	; 7
    152a:	8d 91       	ld	r24, X+
    152c:	9c 91       	ld	r25, X
    152e:	18 97       	sbiw	r26, 0x08	; 8
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	18 96       	adiw	r26, 0x08	; 8
    1534:	9c 93       	st	X, r25
    1536:	8e 93       	st	-X, r24
    1538:	17 97       	sbiw	r26, 0x07	; 7
    153a:	ce 01       	movw	r24, r28
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	08 95       	ret

Disassembly of section .text.avrlibc:

00001b74 <sprintf>:
    1b74:	af e0       	ldi	r26, 0x0F	; 15
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e0 ec       	ldi	r30, 0xC0	; 192
    1b7a:	fd e0       	ldi	r31, 0x0D	; 13
    1b7c:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__prologue_saves__+0x1c>
    1b80:	0e 89       	ldd	r16, Y+22	; 0x16
    1b82:	1f 89       	ldd	r17, Y+23	; 0x17
    1b84:	86 e0       	ldi	r24, 0x06	; 6
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	1a 83       	std	Y+2, r17	; 0x02
    1b8a:	09 83       	std	Y+1, r16	; 0x01
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	9f e7       	ldi	r25, 0x7F	; 127
    1b90:	9f 83       	std	Y+7, r25	; 0x07
    1b92:	8e 83       	std	Y+6, r24	; 0x06
    1b94:	9e 01       	movw	r18, r28
    1b96:	25 5e       	subi	r18, 0xE5	; 229
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	48 8d       	ldd	r20, Y+24	; 0x18
    1b9c:	59 8d       	ldd	r21, Y+25	; 0x19
    1b9e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <vfprintf>
    1ba8:	e8 85       	ldd	r30, Y+8	; 0x08
    1baa:	f9 85       	ldd	r31, Y+9	; 0x09
    1bac:	e0 0f       	add	r30, r16
    1bae:	f1 1f       	adc	r31, r17
    1bb0:	10 82       	st	Z, r1
    1bb2:	2f 96       	adiw	r28, 0x0f	; 15
    1bb4:	e4 e0       	ldi	r30, 0x04	; 4
    1bb6:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000011dc <__ultoa_invert>:
    11dc:	fa 01       	movw	r30, r20
    11de:	aa 27       	eor	r26, r26
    11e0:	28 30       	cpi	r18, 0x08	; 8
    11e2:	51 f1       	breq	.+84     	; 0x1238 <__ultoa_invert+0x5c>
    11e4:	20 31       	cpi	r18, 0x10	; 16
    11e6:	81 f1       	breq	.+96     	; 0x1248 <__ultoa_invert+0x6c>
    11e8:	e8 94       	clt
    11ea:	6f 93       	push	r22
    11ec:	6e 7f       	andi	r22, 0xFE	; 254
    11ee:	6e 5f       	subi	r22, 0xFE	; 254
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	8f 4f       	sbci	r24, 0xFF	; 255
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	af 4f       	sbci	r26, 0xFF	; 255
    11f8:	b1 e0       	ldi	r27, 0x01	; 1
    11fa:	3e d0       	rcall	.+124    	; 0x1278 <__ultoa_invert+0x9c>
    11fc:	b4 e0       	ldi	r27, 0x04	; 4
    11fe:	3c d0       	rcall	.+120    	; 0x1278 <__ultoa_invert+0x9c>
    1200:	67 0f       	add	r22, r23
    1202:	78 1f       	adc	r23, r24
    1204:	89 1f       	adc	r24, r25
    1206:	9a 1f       	adc	r25, r26
    1208:	a1 1d       	adc	r26, r1
    120a:	68 0f       	add	r22, r24
    120c:	79 1f       	adc	r23, r25
    120e:	8a 1f       	adc	r24, r26
    1210:	91 1d       	adc	r25, r1
    1212:	a1 1d       	adc	r26, r1
    1214:	6a 0f       	add	r22, r26
    1216:	71 1d       	adc	r23, r1
    1218:	81 1d       	adc	r24, r1
    121a:	91 1d       	adc	r25, r1
    121c:	a1 1d       	adc	r26, r1
    121e:	20 d0       	rcall	.+64     	; 0x1260 <__ultoa_invert+0x84>
    1220:	09 f4       	brne	.+2      	; 0x1224 <__ultoa_invert+0x48>
    1222:	68 94       	set
    1224:	3f 91       	pop	r19
    1226:	2a e0       	ldi	r18, 0x0A	; 10
    1228:	26 9f       	mul	r18, r22
    122a:	11 24       	eor	r1, r1
    122c:	30 19       	sub	r19, r0
    122e:	30 5d       	subi	r19, 0xD0	; 208
    1230:	31 93       	st	Z+, r19
    1232:	de f6       	brtc	.-74     	; 0x11ea <__ultoa_invert+0xe>
    1234:	cf 01       	movw	r24, r30
    1236:	08 95       	ret
    1238:	46 2f       	mov	r20, r22
    123a:	47 70       	andi	r20, 0x07	; 7
    123c:	40 5d       	subi	r20, 0xD0	; 208
    123e:	41 93       	st	Z+, r20
    1240:	b3 e0       	ldi	r27, 0x03	; 3
    1242:	0f d0       	rcall	.+30     	; 0x1262 <__ultoa_invert+0x86>
    1244:	c9 f7       	brne	.-14     	; 0x1238 <__ultoa_invert+0x5c>
    1246:	f6 cf       	rjmp	.-20     	; 0x1234 <__ultoa_invert+0x58>
    1248:	46 2f       	mov	r20, r22
    124a:	4f 70       	andi	r20, 0x0F	; 15
    124c:	40 5d       	subi	r20, 0xD0	; 208
    124e:	4a 33       	cpi	r20, 0x3A	; 58
    1250:	18 f0       	brcs	.+6      	; 0x1258 <__ultoa_invert+0x7c>
    1252:	49 5d       	subi	r20, 0xD9	; 217
    1254:	31 fd       	sbrc	r19, 1
    1256:	40 52       	subi	r20, 0x20	; 32
    1258:	41 93       	st	Z+, r20
    125a:	02 d0       	rcall	.+4      	; 0x1260 <__ultoa_invert+0x84>
    125c:	a9 f7       	brne	.-22     	; 0x1248 <__ultoa_invert+0x6c>
    125e:	ea cf       	rjmp	.-44     	; 0x1234 <__ultoa_invert+0x58>
    1260:	b4 e0       	ldi	r27, 0x04	; 4
    1262:	a6 95       	lsr	r26
    1264:	97 95       	ror	r25
    1266:	87 95       	ror	r24
    1268:	77 95       	ror	r23
    126a:	67 95       	ror	r22
    126c:	ba 95       	dec	r27
    126e:	c9 f7       	brne	.-14     	; 0x1262 <__ultoa_invert+0x86>
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	61 05       	cpc	r22, r1
    1274:	71 05       	cpc	r23, r1
    1276:	08 95       	ret
    1278:	9b 01       	movw	r18, r22
    127a:	ac 01       	movw	r20, r24
    127c:	0a 2e       	mov	r0, r26
    127e:	06 94       	lsr	r0
    1280:	57 95       	ror	r21
    1282:	47 95       	ror	r20
    1284:	37 95       	ror	r19
    1286:	27 95       	ror	r18
    1288:	ba 95       	dec	r27
    128a:	c9 f7       	brne	.-14     	; 0x127e <__ultoa_invert+0xa2>
    128c:	62 0f       	add	r22, r18
    128e:	73 1f       	adc	r23, r19
    1290:	84 1f       	adc	r24, r20
    1292:	95 1f       	adc	r25, r21
    1294:	a0 1d       	adc	r26, r0
    1296:	08 95       	ret
