
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000556  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800100  00800100  00000556  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00000585  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002758  00000000  00000000  00000745  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d83  00000000  00000000  00002e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cb4  00000000  00000000  00003c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e4  00000000  00000000  000048d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00004cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009e8  00000000  00000000  0000500f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  000059f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004de  000004de  00000552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_1 00000014  0000046a  0000046a  000004de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.start_and_write_data 0000004c  00000292  00000292  00000306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.TWI_API_write_data_stop 00000010  000004b8  000004b8  0000052c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.TWI_API_read_data_ack_end_nack_stop 00000064  0000022e  0000022e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TWI_HAL_init 00000012  000004a6  000004a6  0000051a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.TWI_HAL_start 00000048  00000372  00000372  000003e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.TWI_HAL_write_byte 00000020  0000042a  0000042a  0000049e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.TWI_HAL_read_byte_ack 00000014  0000047e  0000047e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.TWI_HAL_read_byte_nack 00000014  00000492  00000492  00000506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.TWI_HAL_stop 00000010  000004c8  000004c8  0000053c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_22 0000004a  000002de  000002de  00000352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_20 00000074  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.rx_buffer_has_message 00000001  00800358  00800358  00000556  2**0
                  ALLOC
 27 .bss.rx_buffer_data_len 00000001  00800359  00800359  00000556  2**0
                  ALLOC
 28 .bss.tx_buffer_cursor 00000001  0080035a  0080035a  00000556  2**0
                  ALLOC
 29 .bss.tx_buffer_data_len 00000001  0080035b  0080035b  00000556  2**0
                  ALLOC
 30 .text.uart1_hal_init 0000003c  000003ba  000003ba  0000042e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.uart1_hal_send_message 00000034  000003f6  000003f6  0000046a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__vector_30 0000004a  00000328  00000328  0000039c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_28 00000070  000001be  000001be  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .bss.rx_buffer_has_message 00000001  0080035c  0080035c  00000556  2**0
                  ALLOC
 35 .bss.rx_buffer_data_len 00000001  0080035d  0080035d  00000556  2**0
                  ALLOC
 36 .bss.rx_buffer 00000064  008002f4  008002f4  00000556  2**0
                  ALLOC
 37 .bss.tx_buffer_cursor 00000001  0080035e  0080035e  00000556  2**0
                  ALLOC
 38 .bss.tx_buffer_data_len 00000001  0080035f  0080035f  00000556  2**0
                  ALLOC
 39 .bss.tx_buffer 000000c8  0080022c  0080022c  00000556  2**0
                  ALLOC
 40 .text.main    00000006  000004d8  000004d8  0000054c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.test_write_clk 00000074  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.test_RTC_module_start 00000020  0000044a  0000044a  000004be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_1>
   8:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
   c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  10:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  14:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  18:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  1c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  20:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  24:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  28:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  2c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  30:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  34:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  38:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  3c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  40:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  44:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  48:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  4c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_etext>
  54:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  58:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_22>
  5c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  60:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  64:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  68:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  6c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  70:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_28>
  74:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  78:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	03 60       	ori	r16, 0x03	; 3
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d0 e1       	ldi	r29, 0x10	; 16
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  ce:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

000004de <__bad_interrupt>:
 4de:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

0000046a <__vector_1>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 0);
}

ISR(INT0_vect){
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
	
}
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00000292 <start_and_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
}
 292:	cf 92       	push	r12
 294:	df 92       	push	r13
 296:	ef 92       	push	r14
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	6a 01       	movw	r12, r20
 29e:	e6 2e       	mov	r14, r22
 2a0:	d2 2f       	mov	r29, r18
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	0e 94 b9 01 	call	0x372	; 0x372 <TWI_HAL_start>
 2a8:	81 11       	cpse	r24, r1
 2aa:	13 c0       	rjmp	.+38     	; 0x2d2 <start_and_write_data+0x40>
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	0e c0       	rjmp	.+28     	; 0x2cc <start_and_write_data+0x3a>
 2b0:	ae 2d       	mov	r26, r14
 2b2:	c6 01       	movw	r24, r12
 2b4:	8c 0f       	add	r24, r28
 2b6:	91 1d       	adc	r25, r1
 2b8:	a1 1d       	adc	r26, r1
 2ba:	fc 01       	movw	r30, r24
 2bc:	84 91       	lpm	r24, Z
 2be:	a7 fd       	sbrc	r26, 7
 2c0:	80 81       	ld	r24, Z
 2c2:	0e 94 15 02 	call	0x42a	; 0x42a <TWI_HAL_write_byte>
 2c6:	81 11       	cpse	r24, r1
 2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <start_and_write_data+0x40>
 2ca:	cf 5f       	subi	r28, 0xFF	; 255
 2cc:	cd 17       	cp	r28, r29
 2ce:	80 f3       	brcs	.-32     	; 0x2b0 <start_and_write_data+0x1e>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

000004b8 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
 4b8:	0e 94 49 01 	call	0x292	; 0x292 <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
 4bc:	81 11       	cpse	r24, r1
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
 4c0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
 4c4:	80 e0       	ldi	r24, 0x00	; 0
}
 4c6:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

0000022e <TWI_API_read_data_ack_end_nack_stop>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
}
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	8b 01       	movw	r16, r22
 23c:	d4 2f       	mov	r29, r20
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	0e 94 b9 01 	call	0x372	; 0x372 <TWI_HAL_start>
 244:	81 11       	cpse	r24, r1
 246:	1e c0       	rjmp	.+60     	; 0x284 <TWI_API_read_data_ack_end_nack_stop+0x56>
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	08 c0       	rjmp	.+16     	; 0x25c <TWI_API_read_data_ack_end_nack_stop+0x2e>
 24c:	78 01       	movw	r14, r16
 24e:	ec 0e       	add	r14, r28
 250:	f1 1c       	adc	r15, r1
 252:	0e 94 3f 02 	call	0x47e	; 0x47e <TWI_HAL_read_byte_ack>
 256:	f7 01       	movw	r30, r14
 258:	80 83       	st	Z, r24
 25a:	cf 5f       	subi	r28, 0xFF	; 255
 25c:	2c 2f       	mov	r18, r28
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	8d 2f       	mov	r24, r29
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	28 17       	cp	r18, r24
 268:	39 07       	cpc	r19, r25
 26a:	84 f3       	brlt	.-32     	; 0x24c <TWI_API_read_data_ack_end_nack_stop+0x1e>
 26c:	8d 2f       	mov	r24, r29
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	e8 01       	movw	r28, r16
 274:	c8 0f       	add	r28, r24
 276:	d9 1f       	adc	r29, r25
 278:	0e 94 49 02 	call	0x492	; 0x492 <TWI_HAL_read_byte_nack>
 27c:	88 83       	st	Y, r24
 27e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <TWI_HAL_stop>
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

000004a6 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
 4a6:	80 e2       	ldi	r24, 0x20	; 32
 4a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
 4ac:	e9 eb       	ldi	r30, 0xB9	; 185
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	8c 7f       	andi	r24, 0xFC	; 252
 4b4:	80 83       	st	Z, r24
 4b6:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00000372 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
 37a:	84 ea       	ldi	r24, 0xA4	; 164
 37c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
 380:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 384:	99 23       	and	r25, r25
 386:	e4 f7       	brge	.-8      	; 0x380 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
 388:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 38c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
 38e:	88 30       	cpi	r24, 0x08	; 8
 390:	99 f4       	brne	.+38     	; 0x3b8 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
 392:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
 396:	84 e8       	ldi	r24, 0x84	; 132
 398:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
 39c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 3a0:	88 23       	and	r24, r24
 3a2:	e4 f7       	brge	.-8      	; 0x39c <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
 3a4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 3a8:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
 3aa:	88 31       	cpi	r24, 0x18	; 24
 3ac:	21 f0       	breq	.+8      	; 0x3b6 <TWI_HAL_start+0x44>
 3ae:	80 34       	cpi	r24, 0x40	; 64
 3b0:	19 f4       	brne	.+6      	; 0x3b8 <TWI_HAL_start+0x46>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
 3b6:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
 3b8:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

0000042a <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
 42a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
 42e:	84 e8       	ldi	r24, 0x84	; 132
 430:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
 434:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 438:	88 23       	and	r24, r24
 43a:	e4 f7       	brge	.-8      	; 0x434 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
 43c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 440:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
 442:	88 32       	cpi	r24, 0x28	; 40
 444:	09 f4       	brne	.+2      	; 0x448 <TWI_HAL_write_byte+0x1e>
 446:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
 448:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

0000047e <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
 47e:	84 ec       	ldi	r24, 0xC4	; 196
 480:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
 484:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 488:	88 23       	and	r24, r24
 48a:	e4 f7       	brge	.-8      	; 0x484 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
 48c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
 490:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00000492 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
 492:	84 e8       	ldi	r24, 0x84	; 132
 494:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
 498:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 49c:	88 23       	and	r24, r24
 49e:	e4 f7       	brge	.-8      	; 0x498 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
 4a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
 4a4:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

000004c8 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
 4c8:	84 e9       	ldi	r24, 0x94	; 148
 4ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
 4ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 4d2:	84 fd       	sbrc	r24, 4
 4d4:	fc cf       	rjmp	.-8      	; 0x4ce <TWI_HAL_stop+0x6>
}
 4d6:	08 95       	ret

Disassembly of section .text.__vector_22:

000002de <__vector_22>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART0_TX_vect){
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 2ee:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <tx_buffer_cursor>
 2f2:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <tx_buffer_data_len>
 2f6:	e8 17       	cp	r30, r24
 2f8:	58 f4       	brcc	.+22     	; 0x310 <__vector_22+0x32>
		UDR0=tx_buffer[tx_buffer_cursor++];
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	8e 0f       	add	r24, r30
 2fe:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <tx_buffer_cursor>
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	ec 59       	subi	r30, 0x9C	; 156
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	80 81       	ld	r24, Z
 30a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 30e:	04 c0       	rjmp	.+8      	; 0x318 <__vector_22+0x3a>
	}else{
		tx_buffer_cursor=0;
 310:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <tx_buffer_cursor>
		tx_buffer_data_len=0;
 314:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <tx_buffer_data_len>
	}
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	8f 91       	pop	r24
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

Disassembly of section .text.__vector_20:

000000d6 <__vector_20>:
	set_bit(UCSR0B, 3); //Enable Tx
	
	uint8_t data[1];
	data[0]=followUpByte;
	uart0_hal_send_message(data, 1);
}
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
  ea:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <rx_buffer_has_message>
  ee:	81 11       	cpse	r24, r1
  f0:	0e c0       	rjmp	.+28     	; 0x10e <__vector_20+0x38>
  f2:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <rx_buffer_data_len>
  f6:	e4 36       	cpi	r30, 0x64	; 100
  f8:	50 f4       	brcc	.+20     	; 0x10e <__vector_20+0x38>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	8e 0f       	add	r24, r30
  fe:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <rx_buffer_data_len>
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 108:	e0 50       	subi	r30, 0x00	; 0
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 83       	st	Z, r24
 10e:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <rx_buffer_data_len>
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	80 f0       	brcs	.+32     	; 0x136 <__vector_20+0x60>
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	e1 50       	subi	r30, 0x01	; 1
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	20 81       	ld	r18, Z
 120:	2a 30       	cpi	r18, 0x0A	; 10
 122:	49 f4       	brne	.+18     	; 0x136 <__vector_20+0x60>
 124:	fc 01       	movw	r30, r24
 126:	e2 50       	subi	r30, 0x02	; 2
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	80 81       	ld	r24, Z
 12c:	8d 30       	cpi	r24, 0x0D	; 13
 12e:	19 f4       	brne	.+6      	; 0x136 <__vector_20+0x60>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <rx_buffer_has_message>
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

000003ba <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
 3ba:	e9 ec       	ldi	r30, 0xC9	; 201
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	80 61       	ori	r24, 0x10	; 16
 3c2:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
 3c4:	80 81       	ld	r24, Z
 3c6:	88 60       	ori	r24, 0x08	; 8
 3c8:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
 3ca:	80 81       	ld	r24, Z
 3cc:	80 68       	ori	r24, 0x80	; 128
 3ce:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
 3d0:	80 81       	ld	r24, Z
 3d2:	80 64       	ori	r24, 0x40	; 64
 3d4:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
 3d6:	e8 ec       	ldi	r30, 0xC8	; 200
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 3e0:	86 e0       	ldi	r24, 0x06	; 6
 3e2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
 3e6:	80 e1       	ldi	r24, 0x10	; 16
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
 3ee:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
 3f2:	78 94       	sei
 3f4:	08 95       	ret

Disassembly of section .text.uart1_hal_send_message:

000003f6 <uart1_hal_send_message>:
}


void uart1_hal_send_message(uint8_t msg[], uint8_t length){
 3f6:	dc 01       	movw	r26, r24
	for (uint8_t i=0; i<length; i++)
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0b c0       	rjmp	.+22     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		tx_buffer[i]=msg[i];
 3fc:	29 2f       	mov	r18, r25
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	fd 01       	movw	r30, r26
 402:	e2 0f       	add	r30, r18
 404:	f3 1f       	adc	r31, r19
 406:	40 81       	ld	r20, Z
 408:	f9 01       	movw	r30, r18
 40a:	e4 5d       	subi	r30, 0xD4	; 212
 40c:	fd 4f       	sbci	r31, 0xFD	; 253
 40e:	40 83       	st	Z, r20
	sei();
}


void uart1_hal_send_message(uint8_t msg[], uint8_t length){
	for (uint8_t i=0; i<length; i++)
 410:	9f 5f       	subi	r25, 0xFF	; 255
 412:	96 17       	cp	r25, r22
 414:	98 f3       	brcs	.-26     	; 0x3fc <uart1_hal_send_message+0x6>
	{
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
 416:	60 93 5f 03 	sts	0x035F, r22	; 0x80035f <tx_buffer_data_len>
	tx_buffer_cursor=1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <tx_buffer_cursor>
	UDR1=tx_buffer[0];
 420:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <_end>
 424:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 428:	08 95       	ret

Disassembly of section .text.__vector_30:

00000328 <__vector_30>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	8f 93       	push	r24
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
 338:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <tx_buffer_cursor>
 33c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <tx_buffer_data_len>
 340:	e8 17       	cp	r30, r24
 342:	58 f4       	brcc	.+22     	; 0x35a <__vector_30+0x32>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	8e 0f       	add	r24, r30
 348:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <tx_buffer_cursor>
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	e4 5d       	subi	r30, 0xD4	; 212
 350:	fd 4f       	sbci	r31, 0xFD	; 253
 352:	80 81       	ld	r24, Z
 354:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 358:	04 c0       	rjmp	.+8      	; 0x362 <__vector_30+0x3a>
 35a:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <tx_buffer_cursor>
 35e:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <tx_buffer_data_len>
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	8f 91       	pop	r24
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

Disassembly of section .text.__vector_28:

000001be <__vector_28>:
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	2f 93       	push	r18
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
 1d2:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <rx_buffer_has_message>
 1d6:	81 11       	cpse	r24, r1
 1d8:	0e c0       	rjmp	.+28     	; 0x1f6 <__vector_28+0x38>
 1da:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <rx_buffer_data_len>
 1de:	e4 36       	cpi	r30, 0x64	; 100
 1e0:	50 f4       	brcc	.+20     	; 0x1f6 <__vector_28+0x38>
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	8e 0f       	add	r24, r30
 1e6:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <rx_buffer_data_len>
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 1f0:	ec 50       	subi	r30, 0x0C	; 12
 1f2:	fd 4f       	sbci	r31, 0xFD	; 253
 1f4:	80 83       	st	Z, r24
 1f6:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <rx_buffer_data_len>
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	ed 50       	subi	r30, 0x0D	; 13
 200:	fd 4f       	sbci	r31, 0xFD	; 253
 202:	20 81       	ld	r18, Z
 204:	2a 30       	cpi	r18, 0x0A	; 10
 206:	49 f4       	brne	.+18     	; 0x21a <__vector_28+0x5c>
 208:	fc 01       	movw	r30, r24
 20a:	ee 50       	subi	r30, 0x0E	; 14
 20c:	fd 4f       	sbci	r31, 0xFD	; 253
 20e:	80 81       	ld	r24, Z
 210:	8d 30       	cpi	r24, 0x0D	; 13
 212:	19 f4       	brne	.+6      	; 0x21a <__vector_28+0x5c>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <rx_buffer_has_message>
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

Disassembly of section .text.main:

000004d8 <main>:
	//test_lora_module_start();
	//test_SCD30_module_start();
    //test_PM_HAL_start();
	//test_EEPROM_module_start();
	//test_ADC_module_start();
	test_RTC_module_start();
 4d8:	0e 94 25 02 	call	0x44a	; 0x44a <test_RTC_module_start>
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <main+0x4>

Disassembly of section .text.test_write_clk:

0000014a <test_write_clk>:
	
	uart1_hal_send_message(data, 1);
	
}

void test_write_clk(){
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	2d 97       	sbiw	r28, 0x0d	; 13
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
	//Set pull up
	set_bit(PORTB, 0);
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	81 60       	ori	r24, 0x01	; 1
 162:	85 b9       	out	0x05, r24	; 5
	set_bit(PORTB, 1);
 164:	85 b1       	in	r24, 0x05	; 5
 166:	82 60       	ori	r24, 0x02	; 2
 168:	85 b9       	out	0x05, r24	; 5
	
	
	uint8_t CMD_SET_CLK[]={0x0D, 0x83};
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	93 e8       	ldi	r25, 0x83	; 131
 170:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t CMD_READ_CLK[]={0x0D};
 172:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t data[10];
	
	
	//Set register pointer
	TWI_API_write_data_stop(SLAVE_ADDR, CMD_SET_CLK, 2);
 174:	ae 01       	movw	r20, r28
 176:	4f 5f       	subi	r20, 0xFF	; 255
 178:	5f 4f       	sbci	r21, 0xFF	; 255
 17a:	60 e8       	ldi	r22, 0x80	; 128
 17c:	22 e0       	ldi	r18, 0x02	; 2
 17e:	81 e5       	ldi	r24, 0x51	; 81
 180:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <TWI_API_write_data_stop>
	
	//Set register pointer
	TWI_API_write_data_stop(SLAVE_ADDR, CMD_READ_CLK, 1);
 184:	ae 01       	movw	r20, r28
 186:	4d 5f       	subi	r20, 0xFD	; 253
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	60 e8       	ldi	r22, 0x80	; 128
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	81 e5       	ldi	r24, 0x51	; 81
 190:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <TWI_API_write_data_stop>
	
	
	//Read value
	TWI_API_read_data_ack_end_nack_stop(SLAVE_ADDR, data, 1);
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	be 01       	movw	r22, r28
 198:	6c 5f       	subi	r22, 0xFC	; 252
 19a:	7f 4f       	sbci	r23, 0xFF	; 255
 19c:	81 e5       	ldi	r24, 0x51	; 81
 19e:	0e 94 17 01 	call	0x22e	; 0x22e <TWI_API_read_data_ack_end_nack_stop>
	
	uart1_hal_send_message(data, 1);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	ce 01       	movw	r24, r28
 1a6:	04 96       	adiw	r24, 0x04	; 4
 1a8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uart1_hal_send_message>
	
}
 1ac:	2d 96       	adiw	r28, 0x0d	; 13
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

Disassembly of section .text.test_RTC_module_start:

0000044a <test_RTC_module_start>:

void test_read_clk();
void test_write_clk();

void test_RTC_module_start(){
	uart1_hal_init();
 44a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <uart1_hal_init>
	
	
	TWI_HAL_init();
 44e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <TWI_HAL_init>
	

	while(1){
		//test_read_clk();
		test_write_clk();
 452:	0e 94 a5 00 	call	0x14a	; 0x14a <test_write_clk>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 456:	2f ef       	ldi	r18, 0xFF	; 255
 458:	8e e9       	ldi	r24, 0x9E	; 158
 45a:	94 e2       	ldi	r25, 0x24	; 36
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <test_RTC_module_start+0x12>
 464:	00 c0       	rjmp	.+0      	; 0x466 <test_RTC_module_start+0x1c>
 466:	00 00       	nop
 468:	f4 cf       	rjmp	.-24     	; 0x452 <test_RTC_module_start+0x8>
