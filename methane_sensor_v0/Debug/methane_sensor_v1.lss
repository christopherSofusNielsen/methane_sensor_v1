
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004717  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000612  00800100  00800100  00004717  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00004717  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  00004772  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000009d8  00000000  00000000  000047b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000df7b  00000000  00000000  00005188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a9b  00000000  00000000  00013103  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000051db  00000000  00000000  00015b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018c4  00000000  00000000  0001ad7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001046  00000000  00000000  0001c640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005833  00000000  00000000  0001d686  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000840  00000000  00000000  00022eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000045a6  000045a6  000046fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000236fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  0000438e  0000438e  000044e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  0000423e  0000423e  00004392  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  0000439c  0000439c  000044f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00004252  00004252  000043a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  000043aa  000043aa  000044fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00004266  00004266  000043ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  000043b8  000043b8  0000450c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  0000427a  0000427a  000043ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  000043c6  000043c6  0000451a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  0000428e  0000428e  000043e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  00004514  00004514  00004668  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 00000042  00003620  00003620  00003774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  000042a2  000042a2  000043f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  0000451c  0000451c  00004670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  00004524  00004524  00004678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  0000452c  0000452c  00004680  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  000043d4  000043d4  00004528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  000044e2  000044e2  00004636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000020  00003f54  00003f54  000040a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  00004564  00004564  000046b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  000045aa  000045aa  000046fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  00003066  00003066  000031ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800e1b  00800e1b  00004717  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000034  00003a56  00003a56  00003baa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  00004452  00004452  000045a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  0000445e  0000445e  000045b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  000030b4  000030b4  00003208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800e1d  00800e1d  00004717  2**0
                  ALLOC
 43 .text.start_timer 00000008  00004534  00004534  00004688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.stop_timer 00000006  0000456a  0000456a  000046be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TC2_HAL_init 00000020  00003f74  00003f74  000040c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_subscribe 00000054  00002fc2  00002fc2  00003116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_cancel 0000003a  0000389c  0000389c  000039f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__vector_9 00000098  000025de  000025de  00002732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .bss.cnt      00000001  00800e33  00800e33  00004717  2**0
                  ALLOC
 50 .bss.cbCounter 00000001  00800e34  00800e34  00004717  2**0
                  ALLOC
 51 .bss.callbacks 0000000a  00800dea  00800dea  00004717  2**0
                  ALLOC
 52 .text.start_and_write_data 0000004c  0000319e  0000319e  000032f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.read_and_stop 0000005a  00002e60  00002e60  00002fb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_API_write_data 00000006  00004570  00004570  000046c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_API_write_data_stop 00000010  0000434e  0000434e  000044a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_read_data_ack_end_nack_stop 00000024  00003e3e  00003e3e  00003f92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_repeat_read_data_stop 00000022  00003eaa  00003eaa  00003ffe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_HAL_init 00000012  00004306  00004306  0000445a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_HAL_start 00000048  00003360  00003360  000034b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_repeated_start 00000042  00003662  00003662  000037b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_write_byte 00000020  00003f94  00003f94  000040e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_read_byte_ack 00000014  000042b6  000042b6  0000440a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_read_byte_nack 00000014  000042ca  000042ca  0000441e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_stop 00000010  0000435e  0000435e  000044b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.copy_buffer 0000002e  00003d3c  00003d3c  00003e90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart0_hal_init 0000003c  00003824  00003824  00003978  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart0_hal_send_message 00000034  00003a8a  00003a8a  00003bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_message_ready 0000000e  000043e2  000043e2  00004536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_clear_rx_buffer 0000000a  000044ec  000044ec  00004640  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_read_message_as_str 00000028  00003dee  00003dee  00003f42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_send_break 00000046  00003480  00003480  000035d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__vector_22 0000004a  00003282  00003282  000033d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_20 00000074  00002aba  00002aba  00002c0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .bss.rx_buffer_has_message 00000001  00800e35  00800e35  00004717  2**0
                  ALLOC
 75 .bss.rx_buffer_data_len 00000001  00800e36  00800e36  00004717  2**0
                  ALLOC
 76 .bss.tx_buffer_cursor 00000001  00800e37  00800e37  00004717  2**0
                  ALLOC
 77 .bss.tx_buffer_data_len 00000001  00800e38  00800e38  00004717  2**0
                  ALLOC
 78 .text.uart1_hal_init 0000003c  00003860  00003860  000039b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.uart1_hal_send_string 0000008a  00002834  00002834  00002988  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_30 0000004a  000032cc  000032cc  00003420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_28 00000070  00002b2e  00002b2e  00002c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .bss.rx_buffer_has_message 00000001  00800e39  00800e39  00004717  2**0
                  ALLOC
 83 .bss.rx_buffer_data_len 00000001  00800e3a  00800e3a  00004717  2**0
                  ALLOC
 84 .bss.rx_buffer 00000096  00800cee  00800cee  00004717  2**0
                  ALLOC
 85 .bss.tx_buffer_cursor 00000001  00800e3b  00800e3b  00004717  2**0
                  ALLOC
 86 .bss.tx_buffer_data_len 00000001  00800e3c  00800e3c  00004717  2**0
                  ALLOC
 87 .bss.tx_buffer 0000012c  00800bc2  00800bc2  00004717  2**0
                  ALLOC
 88 .text.main    00000018  00004186  00004186  000042da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.vect_ADC_heat_timeout 00000018  0000419e  0000419e  000042f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.ADC_init_sampling 00000066  00002ce0  00002ce0  00002e34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ADC_deinit_sampling 00000014  000042de  000042de  00004432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.ADC_is_sampling_done 0000001c  000040a8  000040a8  000041fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.ADC_meth_sens_power_on 00000020  00003fb4  00003fb4  00004108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.ADC_meth_sens_ready 00000012  00004318  00004318  0000446c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.ADC_set_conf_parameters 00000042  000036a4  000036a4  000037f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.calc_ppm_methane 00000096  00002676  00002676  000027ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.ADC_get_value 00000056  00002f6c  00002f6c  000030c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.vect_ADC_do_sample 00000046  000034c6  000034c6  0000361a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.ADC_start_sampling 0000000c  0000446a  0000446a  000045be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .bss.cntPowerUpTime 00000001  00800e3d  00800e3d  00004717  2**0
                  ALLOC
101 .bss._powerUpTime 00000001  00800e3e  00800e3e  00004717  2**0
                  ALLOC
102 .bss.cntSamples 00000002  00800e1f  00800e1f  00004717  2**0
                  ALLOC
103 .bss._data    00000002  00800e21  00800e21  00004717  2**0
                  ALLOC
104 .bss._nSamples 00000002  00800e23  00800e23  00004717  2**0
                  ALLOC
105 .data.PPM_factor 00000004  00800dff  000045b3  00004707  2**0
                  CONTENTS, ALLOC, LOAD, DATA
106 .data.RRL     00000004  00800e03  000045b7  0000470b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
107 .data.Vc      00000004  00800e07  000045bb  0000470f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
108 .text.EM_has_deveui 00000016  000041e6  000041e6  0000433a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.EM_has_appeui 00000016  000041fc  000041fc  00004350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.EM_has_appkey 00000016  00004212  00004212  00004366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.EM_get_deveui 00000030  00003bec  00003bec  00003d40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.EM_get_appeui 00000030  00003c1c  00003c1c  00003d70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.EM_get_appkey 00000030  00003c4c  00003c4c  00003da0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.EM_get_ppmfactor 0000001e  00003ff4  00003ff4  00004148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.EM_get_RRL 0000001e  00004012  00004012  00004166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.EM_get_Vcc 0000001e  00004030  00004030  00004184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.EM_get_collections 00000010  0000436e  0000436e  000044c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.EM_get_heat_up_time 0000000c  00004476  00004476  000045ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.EM_get_air_pump_time 0000000c  00004482  00004482  000045d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_get_sp_interval 0000000c  0000448e  0000448e  000045e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.cb_blink 00000006  00004576  00004576  000046ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.blink   0000004c  000031ea  000031ea  0000333e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.err_code 00000038  000038d6  000038d6  00003a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.LED_start_try_join 0000000e  000043f0  000043f0  00004544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.LED_stop_try_join 00000010  0000437e  0000437e  000044d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.LED_join_success 00000040  00003728  00003728  0000387c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.LED_join_denied 00000008  0000453c  0000453c  00004690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.LED_conf_err 00000008  00004544  00004544  00004698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.LED_fatal_err 00000008  0000454c  0000454c  000046a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .bss.cbPointer 00000001  00800e3f  00800e3f  00004717  2**0
                  ALLOC
131 .progmemx.data 00000038  00000352  00000352  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
132 .text.JN_join_network 00000296  00000df8  00000df8  00000f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.set_block_uplink 00000018  000041b6  000041b6  0000430a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.block_uplink 0000001c  000040c4  000040c4  00004218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.LM_join_network 00000006  0000457c  0000457c  000046d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.LM_send_uplink 0000002e  00003d6a  00003d6a  00003ebe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.LM_put_to_sleep 00000006  00004582  00004582  000046d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.LM_wake_up 00000006  00004588  00004588  000046dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.LM_is_free 0000000a  000044f6  000044f6  0000464a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .bss.subPointer 00000001  00800e40  00800e40  00004717  2**0
                  ALLOC
141 .bss.busy     00000001  00800e41  00800e41  00004717  2**0
                  ALLOC
142 .bss.cnt      00000001  00800e42  00800e42  00004717  2**0
                  ALLOC
143 .progmemx.data 00000073  000002df  000002df  00000433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
144 .text.tohex   00000084  00002944  00002944  00002a98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.attach_ending 0000001c  000040e0  000040e0  00004234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.cmd_with_ending 00000032  00003af2  00003af2  00003c46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.sys_sleep_cmd 0000005e  00002d46  00002d46  00002e9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.mac_set_parameter 0000004e  00003102  00003102  00003256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.mac_set_deveui 00000048  000033a8  000033a8  000034fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.mac_set_appeui 00000048  000033f0  000033f0  00003544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.mac_set_appkey 00000048  00003438  00003438  0000358c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.mac_set_ADR 00000030  00003c7c  00003c7c  00003dd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.mac_tx_confirmed 000000ac  0000234a  0000234a  0000249e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.beginsWidth 0000004a  00003316  00003316  0000346a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .progmemx.data 00000038  0000038a  0000038a  000004de  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
156 .text.decode_tx_response 00000068  00002c78  00002c78  00002dcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.SU_send_uplink 000000fc  00001ca6  00001ca6  00001dfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .progmemx.data 00000003  000003fb  000003fb  0000054f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
159 .text.SC_put_to_sleep 0000004c  00003236  00003236  0000338a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.SC_wake_up 00000032  00003b24  00003b24  00003c78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.util_setPendingStates 0000000c  0000449a  0000449a  000045ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.util_setMatchCase 0000000c  000044a6  000044a6  000045fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.util_transmit_msg 0000001c  000040fc  000040fc  00004250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.util_read_msg 00000006  0000458e  0000458e  000046e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .progmemx.data 00000027  000003c2  000003c2  00000516  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
166 .text.util_parse_err 00000058  00002f14  00002f14  00003068  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.util_strbeginswith 00000044  00003598  00003598  000036ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.util_matchMessage 0000005e  00002da4  00002da4  00002ef8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.get_group_id 00000006  00004594  00004594  000046e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.set_group_id 00000006  0000459a  0000459a  000046ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.MRPP_init_group 00000032  00003b56  00003b56  00003caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.MRPP_add_collection_data_INT16 00000070  00002b9e  00002b9e  00002cf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.MRPP_is_body_package_ready 00000022  00003ecc  00003ecc  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.MRPP_get_ready_body_package 00000096  0000270c  0000270c  00002860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.MRPP_set_body_sent 0000000c  000044b2  000044b2  00004606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.MRPP_get_header_package 00000022  00003eee  00003eee  00004042  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.MRPP_get_tail_package 00000022  00003f10  00003f10  00004064  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.MRPP_all_body_package_sent 0000000a  00004500  00004500  00004654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .bss._groupId 00000001  00800e43  00800e43  00004717  2**0
                  ALLOC
180 .text.mrpp_data_add_int16 00000092  000027a2  000027a2  000028f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.mrpp_data_get 00000030  00003cac  00003cac  00003e00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.add_data_types 000000d8  00001e80  00001e80  00001fd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.update_bodies 00000162  000013fc  000013fc  00001550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.mrpp_state_init 000001be  0000108e  0000108e  000011e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.mrpp_state_get_header 000000a2  0000249a  0000249a  000025ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.mrpp_state_get_tail 000000a4  000023f6  000023f6  0000254a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.mrpp_state_set_collection 00000086  000028be  000028be  00002a12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.mrpp_state_is_body_ready 00000030  00003cdc  00003cdc  00003e30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.mrpp_state_all_bodies_sent 0000002a  00003dc4  00003dc4  00003f18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.mrpp_state_get_ready_body 0000011a  00001b8c  00001b8c  00001ce0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.mrpp_state_set_body_sent 00000020  00003fd4  00003fd4  00004128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.mrpp_state_get_collection_address 00000036  0000397e  0000397e  00003ad2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.cb_cnt_time 00000030  00003d0c  00003d0c  00003e60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.PUMP_start 00000024  00003e62  00003e62  00003fb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.PUMP_is_done 0000001c  00004118  00004118  0000426c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .bss.eventPointer 00000001  00800e44  00800e44  00004717  2**0
                  ALLOC
197 .bss.cnt      00000002  00800e25  00800e25  00004717  2**0
                  ALLOC
198 .bss._seconds 00000002  00800e27  00800e27  00004717  2**0
                  ALLOC
199 .text.RTC_set_clock_out 00000050  00003016  00003016  0000316a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.RTC_clear_wake_up_interrupt 00000034  00003abe  00003abe  00003c12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.RTC_get_current_time 00000140  000016b2  000016b2  00001806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .rodata       00000005  00800dfa  000045ae  00004702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
203 .text.RTC_set_wake_up_interrupt_minutes 000000c4  000021ca  000021ca  0000231e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.RTC_datetime_to_ts 00000122  00001a6a  00001a6a  00001bbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .progmemx.data.CMD_READ_TIME_POINTER 00000001  00000400  00000400  00000554  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
206 .text.bytes_2_uint 0000001a  0000416c  0000416c  000042c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.init_measurement 00000038  0000390e  0000390e  00003a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.validate_data 00000032  00003b88  00003b88  00003cdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.read_value 000000a2  0000253c  0000253c  00002690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.vect_SCD_do_sample 00000046  0000350c  0000350c  00003660  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.SCD30_init_sampling 0000004e  00003150  00003150  000032a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.SCD30_deinit_sampling 00000014  000042f2  000042f2  00004446  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.SCD30_start_sampling 0000000c  000044be  000044be  00004612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.SCD30_is_sampling_done 0000001c  00004134  00004134  00004288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .bss.cntSamples 00000002  00800e29  00800e29  00004717  2**0
                  ALLOC
216 .bss._data    00000002  00800e2b  00800e2b  00004717  2**0
                  ALLOC
217 .bss._nSamples 00000002  00800e2d  00800e2d  00004717  2**0
                  ALLOC
218 .progmemx.data.READ_DATA_CMD 00000002  000003fe  000003fe  00000552  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
219 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000003f1  000003f1  00000545  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
220 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000003f6  000003f6  0000054a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
221 .text.decode_stage_response 00000016  00004228  00004228  0000437c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.decode_join_response 0000001c  00004150  00004150  000042a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.decode_header_tail_response 0000001e  0000404e  0000404e  000041a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.read_eeprom 0000005a  00002eba  00002eba  0000300e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.join_lora 00000012  0000432a  0000432a  0000447e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.set_wakeup 0000000a  0000450a  0000450a  0000465e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.send_header 0000003e  000037a8  000037a8  000038fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.stage_0 000000d0  0000202c  0000202c  00002180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.stage_1 0000013c  000017f2  000017f2  00001946  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.stage_3 0000013c  0000192e  0000192e  00001a82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.stage_2 00000154  0000155e  0000155e  000016b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.send_body 00000040  00003768  00003768  000038bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.decode_body_response 00000028  00003e16  00003e16  00003f6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.send_tail 0000003e  000037e6  000037e6  0000393a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.send_msg 00000018  000041ce  000041ce  00004322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data 0000008f  00000250  00000250  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.MAINPG_start 000002b2  00000b46  00000b46  00000c9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .bss.samplingProcessInterval 00000001  00800e45  00800e45  00004717  2**0
                  ALLOC
239 .data.methHeatUpTime 00000001  00800e46  00000401  00000555  2**0
                  CONTENTS, ALLOC, LOAD, DATA
240 .data.airPumpTime 00000002  00800e2f  000045bf  00004713  2**0
                  CONTENTS, ALLOC, LOAD, DATA
241 .bss.ppmx     00000004  00800e0b  00800e0b  00004717  2**0
                  ALLOC
242 .bss.rrlx     00000004  00800e0f  00800e0f  00004717  2**0
                  ALLOC
243 .bss.vccx     00000004  00800e13  00800e13  00004717  2**0
                  ALLOC
244 .bss.cols     00000023  00800d84  00800d84  00004717  2**0
                  ALLOC
245 .bss.appkey   00000021  00800da7  00800da7  00004717  2**0
                  ALLOC
246 .bss.appeui   00000011  00800dc8  00800dc8  00004717  2**0
                  ALLOC
247 .bss.deveui   00000011  00800dd9  00800dd9  00004717  2**0
                  ALLOC
248 .bss.dt       00000006  00800df4  00800df4  00004717  2**0
                  ALLOC
249 .bss.ts       00000004  00800e17  00800e17  00004717  2**0
                  ALLOC
250 .bss.meth_data 00000258  00800712  00800712  00004717  2**0
                  ALLOC
251 .bss.co2_data 00000258  0080096a  0080096a  00004717  2**0
                  ALLOC
252 .data.bodyIndex 00000002  00800e31  000045c1  00004715  2**0
                  CONTENTS, ALLOC, LOAD, DATA
253 .bss.state_s3 00000001  00800e47  00800e47  00004717  2**0
                  ALLOC
254 .bss.state_s2 00000001  00800e48  00800e48  00004717  2**0
                  ALLOC
255 .bss.state_s1 00000001  00800e49  00800e49  00004717  2**0
                  ALLOC
256 .bss.state_s0 00000001  00800e4a  00800e4a  00004717  2**0
                  ALLOC
257 .text.calc_crc8 00000036  000039b4  000039b4  00003b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
258 .text.avrlibc.fplib 0000000e  000043fe  000043fe  00004552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
259 .text.avrlibc.fplib 000000ce  000020fc  000020fc  00002250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
260 .text.avrlibc.fplib 00000008  00004554  00004554  000046a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
261 .text.avrlibc.fplib 000000de  00001da2  00001da2  00001ef6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 .text.avrlibc.fplib 0000005e  00002e02  00002e02  00002f56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 .text.avrlibc.fplib 0000007a  000029c8  000029c8  00002b1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
264 .text.avrlibc.fplib 0000000c  000044ca  000044ca  0000461e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.avrlibc.fplib 00000006  000045a0  000045a0  000046f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .text.avrlibc.fplib 0000000e  0000440c  0000440c  00004560  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
267 .text.avrlibc.fplib 0000000e  0000441a  0000441a  0000456e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .text.avrlibc.fplib 00000022  00003f32  00003f32  00004086  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 .text.avrlibc.fplib 00000044  000035dc  000035dc  00003730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.avrlibc.fplib 0000000e  00004428  00004428  0000457c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.avrlibc.fplib 00000008  0000455c  0000455c  000046b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .text.avrlibc.fplib 000000d4  00001f58  00001f58  000020ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 .progmemx.data 00000008  000003e9  000003e9  0000053d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
274 .text.avrlibc 00000744  00000402  00000402  00000556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.libgcc  0000000c  000044d6  000044d6  0000462a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.libgcc.mul 0000001e  0000406c  0000406c  000041c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.libgcc.prologue 00000038  00003946  00003946  00003a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.libgcc.prologue 00000036  000039ea  000039ea  00003b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.avrlibc 000001b0  0000124c  0000124c  000013a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.avrlibc 00000032  00003bba  00003bba  00003d0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .text.avrlibc 00000042  000036e6  000036e6  0000383a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
282 .text.avrlibc 0000006a  00002c0e  00002c0e  00002d62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
283 .text.avrlibc 0000002c  00003d98  00003d98  00003eec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 .text.avrlibc 0000001e  0000408a  0000408a  000041de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.avrlibc 00000036  00003a20  00003a20  00003b74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.avrlibc 00000078  00002a42  00002a42  00002b96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.avrlibc 00000046  00003552  00003552  000036a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .text.avrlibc 000000bc  0000228e  0000228e  000023e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
289 .text.avrlibc 00000024  00003e86  00003e86  00003fda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .text.avrlibc 00000012  0000433c  0000433c  00004490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .text.avrlibc 0000000e  00004436  00004436  0000458a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 .text.avrlibc 0000000e  00004444  00004444  00004598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
   8:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
   c:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <__vector_3>
  10:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  14:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  18:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  1c:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  20:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  24:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__vector_9>
  28:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  2c:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  30:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  34:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__vector_13>
  38:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  3c:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  40:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__vector_16>
  44:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  48:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  4c:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  50:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__vector_20>
  54:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  58:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__vector_22>
  5c:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  60:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  64:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  68:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  6c:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  70:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__vector_28>
  74:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__bad_interrupt>
  78:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__vector_30>
  7c:	1a 07       	cpc	r17, r26
  7e:	23 08       	sbc	r2, r3
  80:	39 07       	cpc	r19, r25
  82:	56 07       	cpc	r21, r22
  84:	75 07       	cpc	r23, r21
  86:	94 07       	cpc	r25, r20
  88:	b3 07       	cpc	r27, r19
  8a:	d2 07       	cpc	r29, r18
  8c:	ef 07       	cpc	r30, r31
  8e:	0c 08       	sbc	r0, r12
  90:	1e 08       	sbc	r1, r14
  92:	34 08       	sbc	r3, r4
  94:	36 08       	sbc	r3, r6
  96:	6f 0e       	add	r6, r31
  98:	a2 0e       	add	r10, r18
  9a:	90 0e       	add	r9, r16
  9c:	c0 0e       	add	r12, r16
  9e:	c0 0e       	add	r12, r16
  a0:	af 0e       	add	r10, r31
  a2:	ad 0e       	add	r10, r29
  a4:	c2 0e       	add	r12, r18
  a6:	a9 0e       	add	r10, r25
  a8:	ab 0e       	add	r10, r27
  aa:	ca 05       	cpc	r28, r10
  ac:	ea 05       	cpc	r30, r10
  ae:	00 06       	cpc	r0, r16
  b0:	11 06       	cpc	r1, r17
  b2:	20 06       	cpc	r2, r16
  b4:	e1 06       	cpc	r14, r17
  b6:	15 06       	cpc	r1, r21
  b8:	32 06       	cpc	r3, r18
  ba:	49 06       	cpc	r4, r25
  bc:	3e 06       	cpc	r3, r30
  be:	54 06       	cpc	r5, r20
  c0:	60 06       	cpc	r6, r16
  c2:	6d 06       	cpc	r6, r29
  c4:	75 06       	cpc	r7, r21
  c6:	7d 06       	cpc	r7, r29
  c8:	85 06       	cpc	r8, r21
  ca:	8d 06       	cpc	r8, r29
  cc:	a9 06       	cpc	r10, r25
  ce:	b0 06       	cpc	r11, r16
  d0:	bd 06       	cpc	r11, r29
  d2:	d3 06       	cpc	r13, r19
  d4:	ea 06       	cpc	r14, r26
  d6:	f3 06       	cpc	r15, r19

000000d8 <.dinit>:
  d8:	01 00       	.word	0x0001	; ????
  da:	0d fa       	.word	0xfa0d	; ????
  dc:	80 0d       	add	r24, r0
  de:	fa 0e       	add	r15, r26
  e0:	0b 00       	.word	0x000b	; ????
  e2:	45 ae       	std	Z+61, r4	; 0x3d
  e4:	0e 0b       	sbc	r16, r30
  e6:	0e 2f       	mov	r16, r30
  e8:	80 0e       	add	r8, r16
  ea:	2f 0e       	add	r2, r31
  ec:	33 00       	.word	0x0033	; ????
  ee:	45 bf       	out	0x35, r20	; 53
  f0:	0e 33       	cpi	r16, 0x3E	; 62
  f2:	0e 46       	sbci	r16, 0x6E	; 110
  f4:	80 0e       	add	r8, r16
  f6:	46 0e       	add	r4, r22
  f8:	47 00       	.word	0x0047	; ????
  fa:	04 01       	movw	r0, r8
  fc:	0e 47       	sbci	r16, 0x7E	; 126
  fe:	0e 4b       	sbci	r16, 0xBE	; 190
 100:	80 00       	.word	0x0080	; ????

00000102 <__trampolines_end>:
 102:	00 40       	sbci	r16, 0x00	; 0
 104:	7a 10       	cpse	r7, r10
 106:	f3 5a       	subi	r31, 0xA3	; 163
 108:	00 a0       	ldd	r0, Z+32	; 0x20
 10a:	72 4e       	sbci	r23, 0xE2	; 226
 10c:	18 09       	sbc	r17, r8
 10e:	00 10       	cpse	r0, r0
 110:	a5 d4       	rcall	.+2378   	; 0xa5c <__EEPROM_REGION_LENGTH__+0x25c>
 112:	e8 00       	.word	0x00e8	; ????
 114:	00 e8       	ldi	r16, 0x80	; 128
 116:	76 48       	sbci	r23, 0x86	; 134
 118:	17 00       	.word	0x0017	; ????
 11a:	00 e4       	ldi	r16, 0x40	; 64
 11c:	0b 54       	subi	r16, 0x4B	; 75
 11e:	02 00       	.word	0x0002	; ????
 120:	00 ca       	rjmp	.-3072   	; 0xfffff522 <__eeprom_end+0xff7ef522>
 122:	9a 3b       	cpi	r25, 0xBA	; 186
 124:	00 00       	nop
 126:	00 e1       	ldi	r16, 0x10	; 16
 128:	f5 05       	cpc	r31, r5
 12a:	00 00       	nop
 12c:	80 96       	adiw	r24, 0x20	; 32
 12e:	98 00       	.word	0x0098	; ????
 130:	00 00       	nop
 132:	40 42       	sbci	r20, 0x20	; 32
 134:	0f 00       	.word	0x000f	; ????
 136:	00 00       	nop
 138:	a0 86       	std	Z+8, r10	; 0x08
 13a:	01 00       	.word	0x0001	; ????
 13c:	00 00       	nop
 13e:	10 27       	eor	r17, r16
 140:	00 00       	nop
 142:	00 00       	nop
 144:	e8 03       	fmulsu	r22, r16
 146:	00 00       	nop
 148:	00 00       	nop
 14a:	64 00       	.word	0x0064	; ????
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	0a 00       	.word	0x000a	; ????
 152:	00 00       	nop
 154:	00 00       	nop
 156:	01 00       	.word	0x0001	; ????
 158:	00 00       	nop
 15a:	00 00       	nop
 15c:	2c 76       	andi	r18, 0x6C	; 108
 15e:	d8 88       	ldd	r13, Y+16	; 0x10
 160:	dc 67       	ori	r29, 0x7C	; 124
 162:	4f 08       	sbc	r4, r15
 164:	23 df       	rcall	.-442    	; 0xffffffac <__eeprom_end+0xff7effac>
 166:	c1 df       	rcall	.-126    	; 0xea <.dinit+0x12>
 168:	ae 59       	subi	r26, 0x9E	; 158
 16a:	e1 b1       	in	r30, 0x01	; 1
 16c:	b7 96       	adiw	r30, 0x27	; 39
 16e:	e5 e3       	ldi	r30, 0x35	; 53
 170:	e4 53       	subi	r30, 0x34	; 52
 172:	c6 3a       	cpi	r28, 0xA6	; 166
 174:	e6 51       	subi	r30, 0x16	; 22
 176:	99 76       	andi	r25, 0x69	; 105
 178:	96 e8       	ldi	r25, 0x86	; 134
 17a:	e6 c2       	rjmp	.+1484   	; 0x748 <vfprintf+0x346>
 17c:	84 26       	eor	r8, r20
 17e:	eb 89       	ldd	r30, Y+19	; 0x13
 180:	8c 9b       	sbis	0x11, 4	; 17
 182:	62 ed       	ldi	r22, 0xD2	; 210
 184:	40 7c       	andi	r20, 0xC0	; 192
 186:	6f fc       	.word	0xfc6f	; ????
 188:	ef bc       	out	0x2f, r14	; 47
 18a:	9c 9f       	mul	r25, r28
 18c:	40 f2       	brcs	.-112    	; 0x11e <__trampolines_end+0x1c>
 18e:	ba a5       	ldd	r27, Y+42	; 0x2a
 190:	6f a5       	ldd	r22, Y+47	; 0x2f
 192:	f4 90       	lpm	r15, Z
 194:	05 5a       	subi	r16, 0xA5	; 165
 196:	2a f7       	brpl	.-54     	; 0x162 <__trampolines_end+0x60>
 198:	5c 93       	st	X, r21
 19a:	6b 6c       	ori	r22, 0xCB	; 203
 19c:	f9 67       	ori	r31, 0x79	; 121
 19e:	6d c1       	rjmp	.+730    	; 0x47a <vfprintf+0x78>
 1a0:	1b fc       	.word	0xfc1b	; ????
 1a2:	e0 e4       	ldi	r30, 0x40	; 64
 1a4:	0d 47       	sbci	r16, 0x7D	; 125
 1a6:	fe f5       	brtc	.+126    	; 0x226 <__do_copy_data+0x1e>
 1a8:	20 e6       	ldi	r18, 0x60	; 96
 1aa:	b5 00       	.word	0x00b5	; ????
 1ac:	d0 ed       	ldi	r29, 0xD0	; 208
 1ae:	90 2e       	mov	r9, r16
 1b0:	03 00       	.word	0x0003	; ????
 1b2:	94 35       	cpi	r25, 0x54	; 84
 1b4:	77 05       	cpc	r23, r7
 1b6:	00 80       	ld	r0, Z
 1b8:	84 1e       	adc	r8, r20
 1ba:	08 00       	.word	0x0008	; ????
 1bc:	00 20       	and	r0, r0
 1be:	4e 0a       	sbc	r4, r30
 1c0:	00 00       	nop
 1c2:	00 c8       	rjmp	.-4096   	; 0xfffff1c4 <__eeprom_end+0xff7ef1c4>
 1c4:	0c 33       	cpi	r16, 0x3C	; 60
 1c6:	33 33       	cpi	r19, 0x33	; 51
 1c8:	33 0f       	add	r19, r19
 1ca:	98 6e       	ori	r25, 0xE8	; 232
 1cc:	12 83       	std	Z+2, r17	; 0x02
 1ce:	11 41       	sbci	r17, 0x11	; 17
 1d0:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1d2:	21 14       	cp	r2, r1
 1d4:	89 3b       	cpi	r24, 0xB9	; 185
 1d6:	e6 55       	subi	r30, 0x56	; 86
 1d8:	16 cf       	rjmp	.-468    	; 0x6 <__FUSE_REGION_LENGTH__+0x3>
 1da:	fe e6       	ldi	r31, 0x6E	; 110
 1dc:	db 18       	sub	r13, r11
 1de:	d1 84       	ldd	r13, Z+9	; 0x09
 1e0:	4b 38       	cpi	r20, 0x8B	; 139
 1e2:	1b f7       	brvc	.-58     	; 0x1aa <__trampolines_end+0xa8>
 1e4:	7c 1d       	adc	r23, r12
 1e6:	90 1d       	adc	r25, r0
 1e8:	a4 bb       	out	0x14, r26	; 20
 1ea:	e4 24       	eor	r14, r4
 1ec:	20 32       	cpi	r18, 0x20	; 32
 1ee:	84 72       	andi	r24, 0x24	; 36
 1f0:	5e 22       	and	r5, r30
 1f2:	81 00       	.word	0x0081	; ????
 1f4:	c9 f1       	breq	.+114    	; 0x268 <_etext+0x18>
 1f6:	24 ec       	ldi	r18, 0xC4	; 196
 1f8:	a1 e5       	ldi	r26, 0x51	; 81
 1fa:	3d 27       	eor	r19, r29

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	d0 e1       	ldi	r29, 0x10	; 16
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
 208:	e8 ed       	ldi	r30, 0xD8	; 216
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	17 c0       	rjmp	.+46     	; 0x23e <__do_clear_bss+0x8>
 210:	b5 91       	lpm	r27, Z+
 212:	a5 91       	lpm	r26, Z+
 214:	35 91       	lpm	r19, Z+
 216:	25 91       	lpm	r18, Z+
 218:	05 91       	lpm	r16, Z+
 21a:	07 fd       	sbrc	r16, 7
 21c:	0c c0       	rjmp	.+24     	; 0x236 <__do_clear_bss>
 21e:	95 91       	lpm	r25, Z+
 220:	85 91       	lpm	r24, Z+
 222:	ef 01       	movw	r28, r30
 224:	f9 2f       	mov	r31, r25
 226:	e8 2f       	mov	r30, r24
 228:	05 90       	lpm	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	a2 17       	cp	r26, r18
 22e:	b3 07       	cpc	r27, r19
 230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x20>
 232:	fe 01       	movw	r30, r28
 234:	04 c0       	rjmp	.+8      	; 0x23e <__do_clear_bss+0x8>

00000236 <__do_clear_bss>:
 236:	1d 92       	st	X+, r1
 238:	a2 17       	cp	r26, r18
 23a:	b3 07       	cpc	r27, r19
 23c:	e1 f7       	brne	.-8      	; 0x236 <__do_clear_bss>
 23e:	e1 30       	cpi	r30, 0x01	; 1
 240:	f4 07       	cpc	r31, r20
 242:	31 f7       	brne	.-52     	; 0x210 <__do_copy_data+0x8>
 244:	0e 94 c3 20 	call	0x4186	; 0x4186 <main>
 248:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>

Disassembly of section .text:

000045a6 <__bad_interrupt>:
    45a6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

0000438e <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    438e:	81 b1       	in	r24, 0x01	; 1
    4390:	88 60       	ori	r24, 0x08	; 8
    4392:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    4394:	82 b1       	in	r24, 0x02	; 2
    4396:	87 7f       	andi	r24, 0xF7	; 247
    4398:	82 b9       	out	0x02, r24	; 2
    439a:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

0000423e <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    423e:	88 23       	and	r24, r24
    4240:	21 f0       	breq	.+8      	; 0x424a <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    4242:	82 b1       	in	r24, 0x02	; 2
    4244:	88 60       	ori	r24, 0x08	; 8
    4246:	82 b9       	out	0x02, r24	; 2
    4248:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    424a:	82 b1       	in	r24, 0x02	; 2
    424c:	87 7f       	andi	r24, 0xF7	; 247
    424e:	82 b9       	out	0x02, r24	; 2
    4250:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

0000439c <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    439c:	81 b1       	in	r24, 0x01	; 1
    439e:	80 62       	ori	r24, 0x20	; 32
    43a0:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    43a2:	82 b1       	in	r24, 0x02	; 2
    43a4:	8f 7d       	andi	r24, 0xDF	; 223
    43a6:	82 b9       	out	0x02, r24	; 2
    43a8:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00004252 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    4252:	88 23       	and	r24, r24
    4254:	21 f0       	breq	.+8      	; 0x425e <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    4256:	82 b1       	in	r24, 0x02	; 2
    4258:	80 62       	ori	r24, 0x20	; 32
    425a:	82 b9       	out	0x02, r24	; 2
    425c:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    425e:	82 b1       	in	r24, 0x02	; 2
    4260:	8f 7d       	andi	r24, 0xDF	; 223
    4262:	82 b9       	out	0x02, r24	; 2
    4264:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

000043aa <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    43aa:	81 b1       	in	r24, 0x01	; 1
    43ac:	80 61       	ori	r24, 0x10	; 16
    43ae:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    43b0:	82 b1       	in	r24, 0x02	; 2
    43b2:	8f 7e       	andi	r24, 0xEF	; 239
    43b4:	82 b9       	out	0x02, r24	; 2
    43b6:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00004266 <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    4266:	88 23       	and	r24, r24
    4268:	21 f0       	breq	.+8      	; 0x4272 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    426a:	82 b1       	in	r24, 0x02	; 2
    426c:	80 61       	ori	r24, 0x10	; 16
    426e:	82 b9       	out	0x02, r24	; 2
    4270:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    4272:	82 b1       	in	r24, 0x02	; 2
    4274:	8f 7e       	andi	r24, 0xEF	; 239
    4276:	82 b9       	out	0x02, r24	; 2
    4278:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

000043b8 <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    43b8:	8a b1       	in	r24, 0x0a	; 10
    43ba:	80 61       	ori	r24, 0x10	; 16
    43bc:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    43be:	8b b1       	in	r24, 0x0b	; 11
    43c0:	8f 7e       	andi	r24, 0xEF	; 239
    43c2:	8b b9       	out	0x0b, r24	; 11
    43c4:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

0000427a <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    427a:	88 23       	and	r24, r24
    427c:	21 f0       	breq	.+8      	; 0x4286 <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    427e:	8b b1       	in	r24, 0x0b	; 11
    4280:	80 61       	ori	r24, 0x10	; 16
    4282:	8b b9       	out	0x0b, r24	; 11
    4284:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    4286:	8b b1       	in	r24, 0x0b	; 11
    4288:	8f 7e       	andi	r24, 0xEF	; 239
    428a:	8b b9       	out	0x0b, r24	; 11
    428c:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

000043c6 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    43c6:	81 b1       	in	r24, 0x01	; 1
    43c8:	80 68       	ori	r24, 0x80	; 128
    43ca:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    43cc:	82 b1       	in	r24, 0x02	; 2
    43ce:	8f 77       	andi	r24, 0x7F	; 127
    43d0:	82 b9       	out	0x02, r24	; 2
    43d2:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

0000428e <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    428e:	88 23       	and	r24, r24
    4290:	21 f0       	breq	.+8      	; 0x429a <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    4292:	82 b1       	in	r24, 0x02	; 2
    4294:	80 68       	ori	r24, 0x80	; 128
    4296:	82 b9       	out	0x02, r24	; 2
    4298:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    429a:	82 b1       	in	r24, 0x02	; 2
    429c:	8f 77       	andi	r24, 0x7F	; 127
    429e:	82 b9       	out	0x02, r24	; 2
    42a0:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00004514 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    4514:	82 b1       	in	r24, 0x02	; 2
    4516:	80 58       	subi	r24, 0x80	; 128
    4518:	82 b9       	out	0x02, r24	; 2
    451a:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00003620 <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    3620:	84 b1       	in	r24, 0x04	; 4
    3622:	8b 7f       	andi	r24, 0xFB	; 251
    3624:	84 b9       	out	0x04, r24	; 4
	set_bit(PORTB, 2); //Enbale pull up
    3626:	85 b1       	in	r24, 0x05	; 5
    3628:	84 60       	ori	r24, 0x04	; 4
    362a:	85 b9       	out	0x05, r24	; 5
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    362c:	e9 e6       	ldi	r30, 0x69	; 105
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	8f 7e       	andi	r24, 0xEF	; 239
    3634:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    3636:	80 81       	ld	r24, Z
    3638:	80 62       	ori	r24, 0x20	; 32
    363a:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    363c:	8d b3       	in	r24, 0x1d	; 29
    363e:	84 60       	ori	r24, 0x04	; 4
    3640:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3642:	83 b7       	in	r24, 0x33	; 51
    3644:	81 7f       	andi	r24, 0xF1	; 241
    3646:	84 60       	ori	r24, 0x04	; 4
    3648:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    364a:	83 b7       	in	r24, 0x33	; 51
    364c:	81 60       	ori	r24, 0x01	; 1
    364e:	83 bf       	out	0x33, r24	; 51
	sei();
    3650:	78 94       	sei
	sleep_cpu();
    3652:	88 95       	sleep
	sleep_disable();
    3654:	83 b7       	in	r24, 0x33	; 51
    3656:	8e 7f       	andi	r24, 0xFE	; 254
    3658:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    365a:	8d b3       	in	r24, 0x1d	; 29
    365c:	8b 7f       	andi	r24, 0xFB	; 251
    365e:	8d bb       	out	0x1d, r24	; 29
    3660:	08 95       	ret

Disassembly of section .text.__vector_3:

000042a2 <__vector_3>:
}

ISR(INT2_vect){
    42a2:	1f 92       	push	r1
    42a4:	0f 92       	push	r0
    42a6:	0f b6       	in	r0, 0x3f	; 63
    42a8:	0f 92       	push	r0
    42aa:	11 24       	eor	r1, r1
	
}
    42ac:	0f 90       	pop	r0
    42ae:	0f be       	out	0x3f, r0	; 63
    42b0:	0f 90       	pop	r0
    42b2:	1f 90       	pop	r1
    42b4:	18 95       	reti

Disassembly of section .text.rn2483_init:

0000451c <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    451c:	84 b1       	in	r24, 0x04	; 4
    451e:	80 61       	ori	r24, 0x10	; 16
    4520:	84 b9       	out	0x04, r24	; 4
    4522:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00004524 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    4524:	85 b1       	in	r24, 0x05	; 5
    4526:	8f 7e       	andi	r24, 0xEF	; 239
    4528:	85 b9       	out	0x05, r24	; 5
    452a:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

0000452c <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    452c:	85 b1       	in	r24, 0x05	; 5
    452e:	80 61       	ori	r24, 0x10	; 16
    4530:	85 b9       	out	0x05, r24	; 5
    4532:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

000043d4 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    43d4:	87 b1       	in	r24, 0x07	; 7
    43d6:	8f 7b       	andi	r24, 0xBF	; 191
    43d8:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    43da:	88 b1       	in	r24, 0x08	; 8
    43dc:	8f 7b       	andi	r24, 0xBF	; 191
    43de:	88 b9       	out	0x08, r24	; 8
    43e0:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

000044e2 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    44e2:	86 b1       	in	r24, 0x06	; 6
    44e4:	86 fb       	bst	r24, 6
    44e6:	88 27       	eor	r24, r24
    44e8:	80 f9       	bld	r24, 0
    44ea:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00003f54 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    3f54:	92 e0       	ldi	r25, 0x02	; 2
    3f56:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    3f58:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    3f5a:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    3f5c:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    3f5e:	ee e6       	ldi	r30, 0x6E	; 110
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	80 81       	ld	r24, Z
    3f64:	82 60       	ori	r24, 0x02	; 2
    3f66:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    3f68:	78 94       	sei
	
	//Set callback
	_cb=cb;
    3f6a:	70 93 1c 0e 	sts	0x0E1C, r23	; 0x800e1c <_cb+0x1>
    3f6e:	60 93 1b 0e 	sts	0x0E1B, r22	; 0x800e1b <_cb>
    3f72:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00004564 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    4564:	86 e0       	ldi	r24, 0x06	; 6
    4566:	85 bd       	out	0x25, r24	; 37
    4568:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

000045aa <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    45aa:	15 bc       	out	0x25, r1	; 37
    45ac:	08 95       	ret

Disassembly of section .text.__vector_16:

00003066 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    3066:	1f 92       	push	r1
    3068:	0f 92       	push	r0
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	0f 92       	push	r0
    306e:	11 24       	eor	r1, r1
    3070:	2f 93       	push	r18
    3072:	3f 93       	push	r19
    3074:	4f 93       	push	r20
    3076:	5f 93       	push	r21
    3078:	6f 93       	push	r22
    307a:	7f 93       	push	r23
    307c:	8f 93       	push	r24
    307e:	9f 93       	push	r25
    3080:	af 93       	push	r26
    3082:	bf 93       	push	r27
    3084:	ef 93       	push	r30
    3086:	ff 93       	push	r31
	_cb();
    3088:	e0 91 1b 0e 	lds	r30, 0x0E1B	; 0x800e1b <_cb>
    308c:	f0 91 1c 0e 	lds	r31, 0x0E1C	; 0x800e1c <_cb+0x1>
    3090:	09 95       	icall
}
    3092:	ff 91       	pop	r31
    3094:	ef 91       	pop	r30
    3096:	bf 91       	pop	r27
    3098:	af 91       	pop	r26
    309a:	9f 91       	pop	r25
    309c:	8f 91       	pop	r24
    309e:	7f 91       	pop	r23
    30a0:	6f 91       	pop	r22
    30a2:	5f 91       	pop	r21
    30a4:	4f 91       	pop	r20
    30a6:	3f 91       	pop	r19
    30a8:	2f 91       	pop	r18
    30aa:	0f 90       	pop	r0
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	0f 90       	pop	r0
    30b0:	1f 90       	pop	r1
    30b2:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00003a56 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    3a56:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    3a5a:	28 e0       	ldi	r18, 0x08	; 8
    3a5c:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    3a60:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    3a64:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3a68:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    3a6c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    3a70:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    3a74:	ef e6       	ldi	r30, 0x6F	; 111
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	80 81       	ld	r24, Z
    3a7a:	82 60       	ori	r24, 0x02	; 2
    3a7c:	80 83       	st	Z, r24
	sei();
    3a7e:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    3a80:	70 93 1e 0e 	sts	0x0E1E, r23	; 0x800e1e <_cb+0x1>
    3a84:	60 93 1d 0e 	sts	0x0E1D, r22	; 0x800e1d <_cb>
    3a88:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

00004452 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    4452:	e1 e8       	ldi	r30, 0x81	; 129
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	80 81       	ld	r24, Z
    4458:	86 60       	ori	r24, 0x06	; 6
    445a:	80 83       	st	Z, r24
    445c:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

0000445e <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    445e:	e1 e8       	ldi	r30, 0x81	; 129
    4460:	f0 e0       	ldi	r31, 0x00	; 0
    4462:	80 81       	ld	r24, Z
    4464:	88 7f       	andi	r24, 0xF8	; 248
    4466:	80 83       	st	Z, r24
    4468:	08 95       	ret

Disassembly of section .text.__vector_13:

000030b4 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    30b4:	1f 92       	push	r1
    30b6:	0f 92       	push	r0
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	0f 92       	push	r0
    30bc:	11 24       	eor	r1, r1
    30be:	2f 93       	push	r18
    30c0:	3f 93       	push	r19
    30c2:	4f 93       	push	r20
    30c4:	5f 93       	push	r21
    30c6:	6f 93       	push	r22
    30c8:	7f 93       	push	r23
    30ca:	8f 93       	push	r24
    30cc:	9f 93       	push	r25
    30ce:	af 93       	push	r26
    30d0:	bf 93       	push	r27
    30d2:	ef 93       	push	r30
    30d4:	ff 93       	push	r31
	_cb();
    30d6:	e0 91 1d 0e 	lds	r30, 0x0E1D	; 0x800e1d <_cb>
    30da:	f0 91 1e 0e 	lds	r31, 0x0E1E	; 0x800e1e <_cb+0x1>
    30de:	09 95       	icall
    30e0:	ff 91       	pop	r31
    30e2:	ef 91       	pop	r30
    30e4:	bf 91       	pop	r27
    30e6:	af 91       	pop	r26
    30e8:	9f 91       	pop	r25
    30ea:	8f 91       	pop	r24
    30ec:	7f 91       	pop	r23
    30ee:	6f 91       	pop	r22
    30f0:	5f 91       	pop	r21
    30f2:	4f 91       	pop	r20
    30f4:	3f 91       	pop	r19
    30f6:	2f 91       	pop	r18
    30f8:	0f 90       	pop	r0
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	0f 90       	pop	r0
    30fe:	1f 90       	pop	r1
    3100:	18 95       	reti

Disassembly of section .text.start_timer:

00004534 <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    4534:	87 e0       	ldi	r24, 0x07	; 7
    4536:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    453a:	08 95       	ret

Disassembly of section .text.stop_timer:

0000456a <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    456a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    456e:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00003f74 <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    3f74:	82 e0       	ldi	r24, 0x02	; 2
    3f76:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    3f7a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3f7e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    3f82:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    3f86:	9b ef       	ldi	r25, 0xFB	; 251
    3f88:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    3f8c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    3f90:	78 94       	sei
    3f92:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00002fc2 <TC2_HAL_subscribe>:
    2fc2:	cf 93       	push	r28
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	60 91 34 0e 	lds	r22, 0x0E34	; 0x800e34 <cbCounter>
    2fca:	65 30       	cpi	r22, 0x05	; 5
    2fcc:	00 f5       	brcc	.+64     	; 0x300e <TC2_HAL_subscribe+0x4c>
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	15 c0       	rjmp	.+42     	; 0x2ffc <TC2_HAL_subscribe+0x3a>
    2fd2:	29 2f       	mov	r18, r25
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	f9 01       	movw	r30, r18
    2fd8:	ee 0f       	add	r30, r30
    2fda:	ff 1f       	adc	r31, r31
    2fdc:	e6 51       	subi	r30, 0x16	; 22
    2fde:	f2 4f       	sbci	r31, 0xF2	; 242
    2fe0:	40 81       	ld	r20, Z
    2fe2:	51 81       	ldd	r21, Z+1	; 0x01
    2fe4:	45 2b       	or	r20, r21
    2fe6:	49 f4       	brne	.+18     	; 0x2ffa <TC2_HAL_subscribe+0x38>
    2fe8:	22 0f       	add	r18, r18
    2fea:	33 1f       	adc	r19, r19
    2fec:	f9 01       	movw	r30, r18
    2fee:	e6 51       	subi	r30, 0x16	; 22
    2ff0:	f2 4f       	sbci	r31, 0xF2	; 242
    2ff2:	b1 83       	std	Z+1, r27	; 0x01
    2ff4:	a0 83       	st	Z, r26
    2ff6:	c9 2f       	mov	r28, r25
    2ff8:	04 c0       	rjmp	.+8      	; 0x3002 <TC2_HAL_subscribe+0x40>
    2ffa:	9f 5f       	subi	r25, 0xFF	; 255
    2ffc:	95 30       	cpi	r25, 0x05	; 5
    2ffe:	48 f3       	brcs	.-46     	; 0x2fd2 <TC2_HAL_subscribe+0x10>
    3000:	cf ef       	ldi	r28, 0xFF	; 255
    3002:	6f 5f       	subi	r22, 0xFF	; 255
    3004:	60 93 34 0e 	sts	0x0E34, r22	; 0x800e34 <cbCounter>
    3008:	0e 94 9a 22 	call	0x4534	; 0x4534 <start_timer>
    300c:	01 c0       	rjmp	.+2      	; 0x3010 <TC2_HAL_subscribe+0x4e>
    300e:	cf ef       	ldi	r28, 0xFF	; 255
    3010:	8c 2f       	mov	r24, r28
    3012:	cf 91       	pop	r28
    3014:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

0000389c <TC2_HAL_cancel>:
    389c:	08 2e       	mov	r0, r24
    389e:	00 0c       	add	r0, r0
    38a0:	99 0b       	sbc	r25, r25
    38a2:	fc 01       	movw	r30, r24
    38a4:	ee 0f       	add	r30, r30
    38a6:	ff 1f       	adc	r31, r31
    38a8:	e6 51       	subi	r30, 0x16	; 22
    38aa:	f2 4f       	sbci	r31, 0xF2	; 242
    38ac:	20 81       	ld	r18, Z
    38ae:	31 81       	ldd	r19, Z+1	; 0x01
    38b0:	23 2b       	or	r18, r19
    38b2:	81 f0       	breq	.+32     	; 0x38d4 <TC2_HAL_cancel+0x38>
    38b4:	88 0f       	add	r24, r24
    38b6:	99 1f       	adc	r25, r25
    38b8:	fc 01       	movw	r30, r24
    38ba:	e6 51       	subi	r30, 0x16	; 22
    38bc:	f2 4f       	sbci	r31, 0xF2	; 242
    38be:	11 82       	std	Z+1, r1	; 0x01
    38c0:	10 82       	st	Z, r1
    38c2:	80 91 34 0e 	lds	r24, 0x0E34	; 0x800e34 <cbCounter>
    38c6:	81 50       	subi	r24, 0x01	; 1
    38c8:	80 93 34 0e 	sts	0x0E34, r24	; 0x800e34 <cbCounter>
    38cc:	81 11       	cpse	r24, r1
    38ce:	02 c0       	rjmp	.+4      	; 0x38d4 <TC2_HAL_cancel+0x38>
    38d0:	0e 94 b5 22 	call	0x456a	; 0x456a <stop_timer>
    38d4:	08 95       	ret

Disassembly of section .text.__vector_9:

000025de <__vector_9>:
    25de:	1f 92       	push	r1
    25e0:	0f 92       	push	r0
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	0f 92       	push	r0
    25e6:	11 24       	eor	r1, r1
    25e8:	2f 93       	push	r18
    25ea:	3f 93       	push	r19
    25ec:	4f 93       	push	r20
    25ee:	5f 93       	push	r21
    25f0:	6f 93       	push	r22
    25f2:	7f 93       	push	r23
    25f4:	8f 93       	push	r24
    25f6:	9f 93       	push	r25
    25f8:	af 93       	push	r26
    25fa:	bf 93       	push	r27
    25fc:	cf 93       	push	r28
    25fe:	ef 93       	push	r30
    2600:	ff 93       	push	r31
    2602:	90 91 33 0e 	lds	r25, 0x0E33	; 0x800e33 <cnt>
    2606:	9f 5f       	subi	r25, 0xFF	; 255
    2608:	90 93 33 0e 	sts	0x0E33, r25	; 0x800e33 <cnt>
    260c:	89 e0       	ldi	r24, 0x09	; 9
    260e:	98 9f       	mul	r25, r24
    2610:	21 2d       	mov	r18, r1
    2612:	11 24       	eor	r1, r1
    2614:	89 2f       	mov	r24, r25
    2616:	82 1b       	sub	r24, r18
    2618:	86 95       	lsr	r24
    261a:	82 0f       	add	r24, r18
    261c:	82 95       	swap	r24
    261e:	8f 70       	andi	r24, 0x0F	; 15
    2620:	2f e1       	ldi	r18, 0x1F	; 31
    2622:	82 9f       	mul	r24, r18
    2624:	90 19       	sub	r25, r0
    2626:	11 24       	eor	r1, r1
    2628:	91 11       	cpse	r25, r1
    262a:	13 c0       	rjmp	.+38     	; 0x2652 <__vector_9+0x74>
    262c:	10 92 33 0e 	sts	0x0E33, r1	; 0x800e33 <cnt>
    2630:	c0 e0       	ldi	r28, 0x00	; 0
    2632:	0d c0       	rjmp	.+26     	; 0x264e <__vector_9+0x70>
    2634:	ec 2f       	mov	r30, r28
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	ee 0f       	add	r30, r30
    263a:	ff 1f       	adc	r31, r31
    263c:	e6 51       	subi	r30, 0x16	; 22
    263e:	f2 4f       	sbci	r31, 0xF2	; 242
    2640:	01 90       	ld	r0, Z+
    2642:	f0 81       	ld	r31, Z
    2644:	e0 2d       	mov	r30, r0
    2646:	30 97       	sbiw	r30, 0x00	; 0
    2648:	09 f0       	breq	.+2      	; 0x264c <__vector_9+0x6e>
    264a:	09 95       	icall
    264c:	cf 5f       	subi	r28, 0xFF	; 255
    264e:	c5 30       	cpi	r28, 0x05	; 5
    2650:	88 f3       	brcs	.-30     	; 0x2634 <__vector_9+0x56>
    2652:	ff 91       	pop	r31
    2654:	ef 91       	pop	r30
    2656:	cf 91       	pop	r28
    2658:	bf 91       	pop	r27
    265a:	af 91       	pop	r26
    265c:	9f 91       	pop	r25
    265e:	8f 91       	pop	r24
    2660:	7f 91       	pop	r23
    2662:	6f 91       	pop	r22
    2664:	5f 91       	pop	r21
    2666:	4f 91       	pop	r20
    2668:	3f 91       	pop	r19
    266a:	2f 91       	pop	r18
    266c:	0f 90       	pop	r0
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	0f 90       	pop	r0
    2672:	1f 90       	pop	r1
    2674:	18 95       	reti

Disassembly of section .text.start_and_write_data:

0000319e <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    319e:	cf 92       	push	r12
    31a0:	df 92       	push	r13
    31a2:	ef 92       	push	r14
    31a4:	cf 93       	push	r28
    31a6:	df 93       	push	r29
    31a8:	6a 01       	movw	r12, r20
    31aa:	e6 2e       	mov	r14, r22
    31ac:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	0e 94 b0 19 	call	0x3360	; 0x3360 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    31b4:	81 11       	cpse	r24, r1
    31b6:	13 c0       	rjmp	.+38     	; 0x31de <start_and_write_data+0x40>
    31b8:	c0 e0       	ldi	r28, 0x00	; 0
    31ba:	0e c0       	rjmp	.+28     	; 0x31d8 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    31bc:	ae 2d       	mov	r26, r14
    31be:	c6 01       	movw	r24, r12
    31c0:	8c 0f       	add	r24, r28
    31c2:	91 1d       	adc	r25, r1
    31c4:	a1 1d       	adc	r26, r1
    31c6:	fc 01       	movw	r30, r24
    31c8:	84 91       	lpm	r24, Z
    31ca:	a7 fd       	sbrc	r26, 7
    31cc:	80 81       	ld	r24, Z
    31ce:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    31d2:	81 11       	cpse	r24, r1
    31d4:	04 c0       	rjmp	.+8      	; 0x31de <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    31d6:	cf 5f       	subi	r28, 0xFF	; 255
    31d8:	cd 17       	cp	r28, r29
    31da:	80 f3       	brcs	.-32     	; 0x31bc <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    31dc:	80 e0       	ldi	r24, 0x00	; 0
}
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	ef 90       	pop	r14
    31e4:	df 90       	pop	r13
    31e6:	cf 90       	pop	r12
    31e8:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002e60 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2e60:	ef 92       	push	r14
    2e62:	ff 92       	push	r15
    2e64:	0f 93       	push	r16
    2e66:	1f 93       	push	r17
    2e68:	cf 93       	push	r28
    2e6a:	df 93       	push	r29
    2e6c:	8c 01       	movw	r16, r24
    2e6e:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2e70:	c0 e0       	ldi	r28, 0x00	; 0
    2e72:	08 c0       	rjmp	.+16     	; 0x2e84 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2e74:	78 01       	movw	r14, r16
    2e76:	ec 0e       	add	r14, r28
    2e78:	f1 1c       	adc	r15, r1
    2e7a:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <TWI_HAL_read_byte_ack>
    2e7e:	f7 01       	movw	r30, r14
    2e80:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2e82:	cf 5f       	subi	r28, 0xFF	; 255
    2e84:	2c 2f       	mov	r18, r28
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	8d 2f       	mov	r24, r29
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	28 17       	cp	r18, r24
    2e90:	39 07       	cpc	r19, r25
    2e92:	84 f3       	brlt	.-32     	; 0x2e74 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2e94:	8d 2f       	mov	r24, r29
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	e8 01       	movw	r28, r16
    2e9c:	c8 0f       	add	r28, r24
    2e9e:	d9 1f       	adc	r29, r25
    2ea0:	0e 94 65 21 	call	0x42ca	; 0x42ca <TWI_HAL_read_byte_nack>
    2ea4:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2ea6:	0e 94 af 21 	call	0x435e	; 0x435e <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	1f 91       	pop	r17
    2eb2:	0f 91       	pop	r16
    2eb4:	ff 90       	pop	r15
    2eb6:	ef 90       	pop	r14
    2eb8:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00004570 <TWI_API_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
    4570:	0e 94 cf 18 	call	0x319e	; 0x319e <start_and_write_data>
}
    4574:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

0000434e <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    434e:	0e 94 cf 18 	call	0x319e	; 0x319e <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    4352:	81 11       	cpse	r24, r1
    4354:	03 c0       	rjmp	.+6      	; 0x435c <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    4356:	0e 94 af 21 	call	0x435e	; 0x435e <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    435a:	80 e0       	ldi	r24, 0x00	; 0
}
    435c:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00003e3e <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3e3e:	1f 93       	push	r17
    3e40:	cf 93       	push	r28
    3e42:	df 93       	push	r29
    3e44:	eb 01       	movw	r28, r22
    3e46:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    3e48:	61 e0       	ldi	r22, 0x01	; 1
    3e4a:	0e 94 b0 19 	call	0x3360	; 0x3360 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3e4e:	81 11       	cpse	r24, r1
    3e50:	04 c0       	rjmp	.+8      	; 0x3e5a <TWI_API_read_data_ack_end_nack_stop+0x1c>
	
	return read_and_stop(data, length);
    3e52:	61 2f       	mov	r22, r17
    3e54:	ce 01       	movw	r24, r28
    3e56:	0e 94 30 17 	call	0x2e60	; 0x2e60 <read_and_stop>
	//}
	//data[length-1]=TWI_HAL_read_byte_nack();
	//
	//TWI_HAL_stop();
	//return TWI_CODE_SUCCESS;
}
    3e5a:	df 91       	pop	r29
    3e5c:	cf 91       	pop	r28
    3e5e:	1f 91       	pop	r17
    3e60:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00003eaa <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3eaa:	1f 93       	push	r17
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	eb 01       	movw	r28, r22
    3eb2:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    3eb4:	0e 94 31 1b 	call	0x3662	; 0x3662 <TWI_HAL_repeated_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3eb8:	81 11       	cpse	r24, r1
    3eba:	04 c0       	rjmp	.+8      	; 0x3ec4 <TWI_API_repeat_read_data_stop+0x1a>
	
	return read_and_stop(data, length);
    3ebc:	61 2f       	mov	r22, r17
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	0e 94 30 17 	call	0x2e60	; 0x2e60 <read_and_stop>
	
}
    3ec4:	df 91       	pop	r29
    3ec6:	cf 91       	pop	r28
    3ec8:	1f 91       	pop	r17
    3eca:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00004306 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    4306:	80 e2       	ldi	r24, 0x20	; 32
    4308:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    430c:	e9 eb       	ldi	r30, 0xB9	; 185
    430e:	f0 e0       	ldi	r31, 0x00	; 0
    4310:	80 81       	ld	r24, Z
    4312:	8c 7f       	andi	r24, 0xFC	; 252
    4314:	80 83       	st	Z, r24
    4316:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00003360 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    3368:	84 ea       	ldi	r24, 0xA4	; 164
    336a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    336e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3372:	99 23       	and	r25, r25
    3374:	e4 f7       	brge	.-8      	; 0x336e <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    3376:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    337a:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    337c:	88 30       	cpi	r24, 0x08	; 8
    337e:	99 f4       	brne	.+38     	; 0x33a6 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    3380:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    3384:	84 e8       	ldi	r24, 0x84	; 132
    3386:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    338a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    338e:	88 23       	and	r24, r24
    3390:	e4 f7       	brge	.-8      	; 0x338a <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    3392:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3396:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3398:	88 31       	cpi	r24, 0x18	; 24
    339a:	21 f0       	breq	.+8      	; 0x33a4 <TWI_HAL_start+0x44>
    339c:	80 34       	cpi	r24, 0x40	; 64
    339e:	19 f4       	brne	.+6      	; 0x33a6 <TWI_HAL_start+0x46>
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	08 95       	ret
    33a4:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    33a6:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00003662 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	88 0f       	add	r24, r24
    3666:	99 1f       	adc	r25, r25
    3668:	28 2f       	mov	r18, r24
    366a:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    366c:	84 ea       	ldi	r24, 0xA4	; 164
    366e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3672:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3676:	99 23       	and	r25, r25
    3678:	e4 f7       	brge	.-8      	; 0x3672 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    367a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    367e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    3680:	80 31       	cpi	r24, 0x10	; 16
    3682:	79 f4       	brne	.+30     	; 0x36a2 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    3684:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    3688:	84 e8       	ldi	r24, 0x84	; 132
    368a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    368e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3692:	88 23       	and	r24, r24
    3694:	e4 f7       	brge	.-8      	; 0x368e <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    3696:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    369a:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    369c:	80 34       	cpi	r24, 0x40	; 64
    369e:	09 f4       	brne	.+2      	; 0x36a2 <TWI_HAL_repeated_start+0x40>
    36a0:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    36a2:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00003f94 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    3f94:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3f98:	84 e8       	ldi	r24, 0x84	; 132
    3f9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3f9e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3fa2:	88 23       	and	r24, r24
    3fa4:	e4 f7       	brge	.-8      	; 0x3f9e <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    3fa6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3faa:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3fac:	88 32       	cpi	r24, 0x28	; 40
    3fae:	09 f4       	brne	.+2      	; 0x3fb2 <TWI_HAL_write_byte+0x1e>
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3fb2:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

000042b6 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    42b6:	84 ec       	ldi	r24, 0xC4	; 196
    42b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    42bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    42c0:	88 23       	and	r24, r24
    42c2:	e4 f7       	brge	.-8      	; 0x42bc <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    42c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    42c8:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

000042ca <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    42ca:	84 e8       	ldi	r24, 0x84	; 132
    42cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    42d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    42d4:	88 23       	and	r24, r24
    42d6:	e4 f7       	brge	.-8      	; 0x42d0 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    42d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    42dc:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

0000435e <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    435e:	84 e9       	ldi	r24, 0x94	; 148
    4360:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    4364:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    4368:	84 fd       	sbrc	r24, 4
    436a:	fc cf       	rjmp	.-8      	; 0x4364 <TWI_HAL_stop+0x6>
}
    436c:	08 95       	ret

Disassembly of section .text.copy_buffer:

00003d3c <copy_buffer>:
	}
	
	tx_buffer_data_len=strlen(msg);
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}
    3d3c:	bc 01       	movw	r22, r24
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	09 c0       	rjmp	.+18     	; 0x3d54 <copy_buffer+0x18>
    3d42:	fb 01       	movw	r30, r22
    3d44:	e9 0f       	add	r30, r25
    3d46:	f1 1d       	adc	r31, r1
    3d48:	da 01       	movw	r26, r20
    3d4a:	a0 50       	subi	r26, 0x00	; 0
    3d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d4e:	2c 91       	ld	r18, X
    3d50:	20 83       	st	Z, r18
    3d52:	9f 5f       	subi	r25, 0xFF	; 255
    3d54:	49 2f       	mov	r20, r25
    3d56:	50 e0       	ldi	r21, 0x00	; 0
    3d58:	20 91 36 0e 	lds	r18, 0x0E36	; 0x800e36 <rx_buffer_data_len>
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	22 50       	subi	r18, 0x02	; 2
    3d60:	31 09       	sbc	r19, r1
    3d62:	42 17       	cp	r20, r18
    3d64:	53 07       	cpc	r21, r19
    3d66:	6c f3       	brlt	.-38     	; 0x3d42 <copy_buffer+0x6>
    3d68:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00003824 <uart0_hal_init>:
    3824:	e1 ec       	ldi	r30, 0xC1	; 193
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	80 81       	ld	r24, Z
    382a:	80 61       	ori	r24, 0x10	; 16
    382c:	80 83       	st	Z, r24
    382e:	80 81       	ld	r24, Z
    3830:	88 60       	ori	r24, 0x08	; 8
    3832:	80 83       	st	Z, r24
    3834:	80 81       	ld	r24, Z
    3836:	80 68       	ori	r24, 0x80	; 128
    3838:	80 83       	st	Z, r24
    383a:	80 81       	ld	r24, Z
    383c:	80 64       	ori	r24, 0x40	; 64
    383e:	80 83       	st	Z, r24
    3840:	e0 ec       	ldi	r30, 0xC0	; 192
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	82 60       	ori	r24, 0x02	; 2
    3848:	80 83       	st	Z, r24
    384a:	86 e0       	ldi	r24, 0x06	; 6
    384c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    3850:	80 e1       	ldi	r24, 0x10	; 16
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    3858:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    385c:	78 94       	sei
    385e:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00003a8a <uart0_hal_send_message>:
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	0b c0       	rjmp	.+22     	; 0x3aa6 <uart0_hal_send_message+0x1c>
    3a90:	29 2f       	mov	r18, r25
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	fd 01       	movw	r30, r26
    3a96:	e2 0f       	add	r30, r18
    3a98:	f3 1f       	adc	r31, r19
    3a9a:	40 81       	ld	r20, Z
    3a9c:	f9 01       	movw	r30, r18
    3a9e:	ec 59       	subi	r30, 0x9C	; 156
    3aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa2:	40 83       	st	Z, r20
    3aa4:	9f 5f       	subi	r25, 0xFF	; 255
    3aa6:	96 17       	cp	r25, r22
    3aa8:	98 f3       	brcs	.-26     	; 0x3a90 <uart0_hal_send_message+0x6>
    3aaa:	60 93 38 0e 	sts	0x0E38, r22	; 0x800e38 <tx_buffer_data_len>
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	80 93 37 0e 	sts	0x0E37, r24	; 0x800e37 <tx_buffer_cursor>
    3ab4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    3ab8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3abc:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

000043e2 <uart0_hal_message_ready>:

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    43e2:	90 91 35 0e 	lds	r25, 0x0E35	; 0x800e35 <rx_buffer_has_message>
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	91 11       	cpse	r25, r1
    43ea:	01 c0       	rjmp	.+2      	; 0x43ee <uart0_hal_message_ready+0xc>
    43ec:	80 e0       	ldi	r24, 0x00	; 0
}
    43ee:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000044ec <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    44ec:	10 92 35 0e 	sts	0x0E35, r1	; 0x800e35 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    44f0:	10 92 36 0e 	sts	0x0E36, r1	; 0x800e36 <rx_buffer_data_len>
    44f4:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003dee <uart0_hal_read_message_as_str>:
	}
	
	tx_buffer_data_len=strlen(msg);
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
    3df2:	cf 93       	push	r28
    3df4:	8c 01       	movw	r16, r24
    3df6:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <copy_buffer>
    3dfa:	c0 91 36 0e 	lds	r28, 0x0E36	; 0x800e36 <rx_buffer_data_len>
    3dfe:	c2 50       	subi	r28, 0x02	; 2
    3e00:	f8 01       	movw	r30, r16
    3e02:	ec 0f       	add	r30, r28
    3e04:	f1 1d       	adc	r31, r1
    3e06:	10 82       	st	Z, r1
    3e08:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart0_hal_clear_rx_buffer>
    3e0c:	8c 2f       	mov	r24, r28
    3e0e:	cf 91       	pop	r28
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00003480 <uart0_hal_send_break>:
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	1f 92       	push	r1
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
    348a:	9a b1       	in	r25, 0x0a	; 10
    348c:	92 60       	ori	r25, 0x02	; 2
    348e:	9a b9       	out	0x0a, r25	; 10
    3490:	e1 ec       	ldi	r30, 0xC1	; 193
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	90 81       	ld	r25, Z
    3496:	97 7f       	andi	r25, 0xF7	; 247
    3498:	90 83       	st	Z, r25
    349a:	9b b1       	in	r25, 0x0b	; 11
    349c:	9d 7f       	andi	r25, 0xFD	; 253
    349e:	9b b9       	out	0x0b, r25	; 11
    34a0:	af e9       	ldi	r26, 0x9F	; 159
    34a2:	bf e0       	ldi	r27, 0x0F	; 15
    34a4:	11 97       	sbiw	r26, 0x01	; 1
    34a6:	f1 f7       	brne	.-4      	; 0x34a4 <uart0_hal_send_break+0x24>
    34a8:	00 c0       	rjmp	.+0      	; 0x34aa <uart0_hal_send_break+0x2a>
    34aa:	00 00       	nop
    34ac:	90 81       	ld	r25, Z
    34ae:	98 60       	ori	r25, 0x08	; 8
    34b0:	90 83       	st	Z, r25
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	61 e0       	ldi	r22, 0x01	; 1
    34b6:	ce 01       	movw	r24, r28
    34b8:	01 96       	adiw	r24, 0x01	; 1
    34ba:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <uart0_hal_send_message>
    34be:	0f 90       	pop	r0
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	08 95       	ret

Disassembly of section .text.__vector_22:

00003282 <__vector_22>:
    3282:	1f 92       	push	r1
    3284:	0f 92       	push	r0
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	0f 92       	push	r0
    328a:	11 24       	eor	r1, r1
    328c:	8f 93       	push	r24
    328e:	ef 93       	push	r30
    3290:	ff 93       	push	r31
    3292:	e0 91 37 0e 	lds	r30, 0x0E37	; 0x800e37 <tx_buffer_cursor>
    3296:	80 91 38 0e 	lds	r24, 0x0E38	; 0x800e38 <tx_buffer_data_len>
    329a:	e8 17       	cp	r30, r24
    329c:	58 f4       	brcc	.+22     	; 0x32b4 <__vector_22+0x32>
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	8e 0f       	add	r24, r30
    32a2:	80 93 37 0e 	sts	0x0E37, r24	; 0x800e37 <tx_buffer_cursor>
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	ec 59       	subi	r30, 0x9C	; 156
    32aa:	fe 4f       	sbci	r31, 0xFE	; 254
    32ac:	80 81       	ld	r24, Z
    32ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    32b2:	04 c0       	rjmp	.+8      	; 0x32bc <__vector_22+0x3a>
    32b4:	10 92 37 0e 	sts	0x0E37, r1	; 0x800e37 <tx_buffer_cursor>
    32b8:	10 92 38 0e 	sts	0x0E38, r1	; 0x800e38 <tx_buffer_data_len>
    32bc:	ff 91       	pop	r31
    32be:	ef 91       	pop	r30
    32c0:	8f 91       	pop	r24
    32c2:	0f 90       	pop	r0
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	0f 90       	pop	r0
    32c8:	1f 90       	pop	r1
    32ca:	18 95       	reti

Disassembly of section .text.__vector_20:

00002aba <__vector_20>:
    2aba:	1f 92       	push	r1
    2abc:	0f 92       	push	r0
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	0f 92       	push	r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	2f 93       	push	r18
    2ac6:	8f 93       	push	r24
    2ac8:	9f 93       	push	r25
    2aca:	ef 93       	push	r30
    2acc:	ff 93       	push	r31
    2ace:	80 91 35 0e 	lds	r24, 0x0E35	; 0x800e35 <rx_buffer_has_message>
    2ad2:	81 11       	cpse	r24, r1
    2ad4:	0e c0       	rjmp	.+28     	; 0x2af2 <__vector_20+0x38>
    2ad6:	e0 91 36 0e 	lds	r30, 0x0E36	; 0x800e36 <rx_buffer_data_len>
    2ada:	e4 36       	cpi	r30, 0x64	; 100
    2adc:	50 f4       	brcc	.+20     	; 0x2af2 <__vector_20+0x38>
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	8e 0f       	add	r24, r30
    2ae2:	80 93 36 0e 	sts	0x0E36, r24	; 0x800e36 <rx_buffer_data_len>
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2aec:	e0 50       	subi	r30, 0x00	; 0
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 83       	st	Z, r24
    2af2:	80 91 36 0e 	lds	r24, 0x0E36	; 0x800e36 <rx_buffer_data_len>
    2af6:	83 30       	cpi	r24, 0x03	; 3
    2af8:	80 f0       	brcs	.+32     	; 0x2b1a <__vector_20+0x60>
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	fc 01       	movw	r30, r24
    2afe:	e1 50       	subi	r30, 0x01	; 1
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	20 81       	ld	r18, Z
    2b04:	2a 30       	cpi	r18, 0x0A	; 10
    2b06:	49 f4       	brne	.+18     	; 0x2b1a <__vector_20+0x60>
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e2 50       	subi	r30, 0x02	; 2
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	8d 30       	cpi	r24, 0x0D	; 13
    2b12:	19 f4       	brne	.+6      	; 0x2b1a <__vector_20+0x60>
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	80 93 35 0e 	sts	0x0E35, r24	; 0x800e35 <rx_buffer_has_message>
    2b1a:	ff 91       	pop	r31
    2b1c:	ef 91       	pop	r30
    2b1e:	9f 91       	pop	r25
    2b20:	8f 91       	pop	r24
    2b22:	2f 91       	pop	r18
    2b24:	0f 90       	pop	r0
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	0f 90       	pop	r0
    2b2a:	1f 90       	pop	r1
    2b2c:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00003860 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    3860:	e9 ec       	ldi	r30, 0xC9	; 201
    3862:	f0 e0       	ldi	r31, 0x00	; 0
    3864:	80 81       	ld	r24, Z
    3866:	80 61       	ori	r24, 0x10	; 16
    3868:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    386a:	80 81       	ld	r24, Z
    386c:	88 60       	ori	r24, 0x08	; 8
    386e:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    3870:	80 81       	ld	r24, Z
    3872:	80 68       	ori	r24, 0x80	; 128
    3874:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    3876:	80 81       	ld	r24, Z
    3878:	80 64       	ori	r24, 0x40	; 64
    387a:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    387c:	e8 ec       	ldi	r30, 0xC8	; 200
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	80 81       	ld	r24, Z
    3882:	82 60       	ori	r24, 0x02	; 2
    3884:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    3886:	86 e0       	ldi	r24, 0x06	; 6
    3888:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
    388c:	80 e1       	ldi	r24, 0x10	; 16
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    3894:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    3898:	78 94       	sei
    389a:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00002834 <uart1_hal_send_string>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    2834:	6f 92       	push	r6
    2836:	7f 92       	push	r7
    2838:	8f 92       	push	r8
    283a:	cf 92       	push	r12
    283c:	df 92       	push	r13
    283e:	ef 92       	push	r14
    2840:	3b 01       	movw	r6, r22
    2842:	88 2e       	mov	r8, r24
    2844:	80 91 3c 0e 	lds	r24, 0x0E3C	; 0x800e3c <tx_buffer_data_len>
    2848:	81 11       	cpse	r24, r1
    284a:	fc cf       	rjmp	.-8      	; 0x2844 <uart1_hal_send_string+0x10>
    284c:	88 2d       	mov	r24, r8
    284e:	b3 01       	movw	r22, r6
    2850:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
    2854:	bc 01       	movw	r22, r24
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	12 c0       	rjmp	.+36     	; 0x287e <uart1_hal_send_string+0x4a>
    285a:	29 2f       	mov	r18, r25
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	e8 2c       	mov	r14, r8
    2860:	63 01       	movw	r12, r6
    2862:	c4 0e       	add	r12, r20
    2864:	d5 1e       	adc	r13, r21
    2866:	e1 1c       	adc	r14, r1
    2868:	57 fd       	sbrc	r21, 7
    286a:	ea 94       	dec	r14
    286c:	f6 01       	movw	r30, r12
    286e:	44 91       	lpm	r20, Z
    2870:	e7 fc       	sbrc	r14, 7
    2872:	40 81       	ld	r20, Z
    2874:	f9 01       	movw	r30, r18
    2876:	ee 53       	subi	r30, 0x3E	; 62
    2878:	f4 4f       	sbci	r31, 0xF4	; 244
    287a:	40 83       	st	Z, r20
    287c:	9f 5f       	subi	r25, 0xFF	; 255
    287e:	49 2f       	mov	r20, r25
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	46 17       	cp	r20, r22
    2884:	57 07       	cpc	r21, r23
    2886:	48 f3       	brcs	.-46     	; 0x285a <uart1_hal_send_string+0x26>
    2888:	fb 01       	movw	r30, r22
    288a:	ee 53       	subi	r30, 0x3E	; 62
    288c:	f4 4f       	sbci	r31, 0xF4	; 244
    288e:	8d e0       	ldi	r24, 0x0D	; 13
    2890:	80 83       	st	Z, r24
    2892:	fb 01       	movw	r30, r22
    2894:	ed 53       	subi	r30, 0x3D	; 61
    2896:	f4 4f       	sbci	r31, 0xF4	; 244
    2898:	8a e0       	ldi	r24, 0x0A	; 10
    289a:	80 83       	st	Z, r24
    289c:	6e 5f       	subi	r22, 0xFE	; 254
    289e:	60 93 3c 0e 	sts	0x0E3C, r22	; 0x800e3c <tx_buffer_data_len>
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <tx_buffer_cursor>
    28a8:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <tx_buffer>
    28ac:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    28b0:	ef 90       	pop	r14
    28b2:	df 90       	pop	r13
    28b4:	cf 90       	pop	r12
    28b6:	8f 90       	pop	r8
    28b8:	7f 90       	pop	r7
    28ba:	6f 90       	pop	r6
    28bc:	08 95       	ret

Disassembly of section .text.__vector_30:

000032cc <__vector_30>:
    32cc:	1f 92       	push	r1
    32ce:	0f 92       	push	r0
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	0f 92       	push	r0
    32d4:	11 24       	eor	r1, r1
    32d6:	8f 93       	push	r24
    32d8:	ef 93       	push	r30
    32da:	ff 93       	push	r31
    32dc:	e0 91 3b 0e 	lds	r30, 0x0E3B	; 0x800e3b <tx_buffer_cursor>
    32e0:	80 91 3c 0e 	lds	r24, 0x0E3C	; 0x800e3c <tx_buffer_data_len>
    32e4:	e8 17       	cp	r30, r24
    32e6:	58 f4       	brcc	.+22     	; 0x32fe <__vector_30+0x32>
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	8e 0f       	add	r24, r30
    32ec:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <tx_buffer_cursor>
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	ee 53       	subi	r30, 0x3E	; 62
    32f4:	f4 4f       	sbci	r31, 0xF4	; 244
    32f6:	80 81       	ld	r24, Z
    32f8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    32fc:	04 c0       	rjmp	.+8      	; 0x3306 <__vector_30+0x3a>
    32fe:	10 92 3b 0e 	sts	0x0E3B, r1	; 0x800e3b <tx_buffer_cursor>
    3302:	10 92 3c 0e 	sts	0x0E3C, r1	; 0x800e3c <tx_buffer_data_len>
    3306:	ff 91       	pop	r31
    3308:	ef 91       	pop	r30
    330a:	8f 91       	pop	r24
    330c:	0f 90       	pop	r0
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	0f 90       	pop	r0
    3312:	1f 90       	pop	r1
    3314:	18 95       	reti

Disassembly of section .text.__vector_28:

00002b2e <__vector_28>:
    2b2e:	1f 92       	push	r1
    2b30:	0f 92       	push	r0
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	0f 92       	push	r0
    2b36:	11 24       	eor	r1, r1
    2b38:	2f 93       	push	r18
    2b3a:	8f 93       	push	r24
    2b3c:	9f 93       	push	r25
    2b3e:	ef 93       	push	r30
    2b40:	ff 93       	push	r31
    2b42:	80 91 39 0e 	lds	r24, 0x0E39	; 0x800e39 <rx_buffer_has_message>
    2b46:	81 11       	cpse	r24, r1
    2b48:	0e c0       	rjmp	.+28     	; 0x2b66 <__vector_28+0x38>
    2b4a:	e0 91 3a 0e 	lds	r30, 0x0E3A	; 0x800e3a <rx_buffer_data_len>
    2b4e:	e6 39       	cpi	r30, 0x96	; 150
    2b50:	50 f4       	brcc	.+20     	; 0x2b66 <__vector_28+0x38>
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	8e 0f       	add	r24, r30
    2b56:	80 93 3a 0e 	sts	0x0E3A, r24	; 0x800e3a <rx_buffer_data_len>
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2b60:	e2 51       	subi	r30, 0x12	; 18
    2b62:	f3 4f       	sbci	r31, 0xF3	; 243
    2b64:	80 83       	st	Z, r24
    2b66:	80 91 3a 0e 	lds	r24, 0x0E3A	; 0x800e3a <rx_buffer_data_len>
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	e3 51       	subi	r30, 0x13	; 19
    2b70:	f3 4f       	sbci	r31, 0xF3	; 243
    2b72:	20 81       	ld	r18, Z
    2b74:	2a 30       	cpi	r18, 0x0A	; 10
    2b76:	49 f4       	brne	.+18     	; 0x2b8a <__vector_28+0x5c>
    2b78:	fc 01       	movw	r30, r24
    2b7a:	e4 51       	subi	r30, 0x14	; 20
    2b7c:	f3 4f       	sbci	r31, 0xF3	; 243
    2b7e:	80 81       	ld	r24, Z
    2b80:	8d 30       	cpi	r24, 0x0D	; 13
    2b82:	19 f4       	brne	.+6      	; 0x2b8a <__vector_28+0x5c>
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	80 93 39 0e 	sts	0x0E39, r24	; 0x800e39 <rx_buffer_has_message>
    2b8a:	ff 91       	pop	r31
    2b8c:	ef 91       	pop	r30
    2b8e:	9f 91       	pop	r25
    2b90:	8f 91       	pop	r24
    2b92:	2f 91       	pop	r18
    2b94:	0f 90       	pop	r0
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	0f 90       	pop	r0
    2b9a:	1f 90       	pop	r1
    2b9c:	18 95       	reti

Disassembly of section .text.main:

00004186 <main>:
	while(1)
    {
		if(0){
			CONF_enter();
		}else{
			MAINPG_start();
    4186:	0e 94 a3 05 	call	0xb46	; 0xb46 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    418a:	2f ef       	ldi	r18, 0xFF	; 255
    418c:	81 e1       	ldi	r24, 0x11	; 17
    418e:	9a e7       	ldi	r25, 0x7A	; 122
    4190:	21 50       	subi	r18, 0x01	; 1
    4192:	80 40       	sbci	r24, 0x00	; 0
    4194:	90 40       	sbci	r25, 0x00	; 0
    4196:	e1 f7       	brne	.-8      	; 0x4190 <main+0xa>
    4198:	00 c0       	rjmp	.+0      	; 0x419a <main+0x14>
    419a:	00 00       	nop
    419c:	f4 cf       	rjmp	.-24     	; 0x4186 <main>

Disassembly of section .text.vect_ADC_heat_timeout:

0000419e <vect_ADC_heat_timeout>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    419e:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <cntPowerUpTime>
    41a2:	8f 5f       	subi	r24, 0xFF	; 255
    41a4:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <cntPowerUpTime>
    41a8:	90 91 3e 0e 	lds	r25, 0x0E3E	; 0x800e3e <_powerUpTime>
    41ac:	89 17       	cp	r24, r25
    41ae:	10 f0       	brcs	.+4      	; 0x41b4 <vect_ADC_heat_timeout+0x16>
    41b0:	0e 94 d5 22 	call	0x45aa	; 0x45aa <TC0_HAL_stop>
    41b4:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

00002ce0 <ADC_init_sampling>:
    2ce0:	cf 93       	push	r28
    2ce2:	50 93 22 0e 	sts	0x0E22, r21	; 0x800e22 <_data+0x1>
    2ce6:	40 93 21 0e 	sts	0x0E21, r20	; 0x800e21 <_data>
    2cea:	70 93 24 0e 	sts	0x0E24, r23	; 0x800e24 <_nSamples+0x1>
    2cee:	60 93 23 0e 	sts	0x0E23, r22	; 0x800e23 <_nSamples>
    2cf2:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <cntSamples+0x1>
    2cf6:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <cntSamples>
    2cfa:	63 e6       	ldi	r22, 0x63	; 99
    2cfc:	7a e1       	ldi	r23, 0x1A	; 26
    2cfe:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <TC0_HAL_init>
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	0e 94 1f 21 	call	0x423e	; 0x423e <PM_HAL_adc_power>
    2d08:	2f ef       	ldi	r18, 0xFF	; 255
    2d0a:	83 ec       	ldi	r24, 0xC3	; 195
    2d0c:	99 e0       	ldi	r25, 0x09	; 9
    2d0e:	21 50       	subi	r18, 0x01	; 1
    2d10:	80 40       	sbci	r24, 0x00	; 0
    2d12:	90 40       	sbci	r25, 0x00	; 0
    2d14:	e1 f7       	brne	.-8      	; 0x2d0e <ADC_init_sampling+0x2e>
    2d16:	00 c0       	rjmp	.+0      	; 0x2d18 <ADC_init_sampling+0x38>
    2d18:	00 00       	nop
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	8d e4       	ldi	r24, 0x4D	; 77
    2d1e:	0e 94 b0 19 	call	0x3360	; 0x3360 <TWI_HAL_start>
    2d22:	c8 2f       	mov	r28, r24
    2d24:	0e 94 af 21 	call	0x435e	; 0x435e <TWI_HAL_stop>
    2d28:	cc 23       	and	r28, r28
    2d2a:	51 f0       	breq	.+20     	; 0x2d40 <ADC_init_sampling+0x60>
    2d2c:	10 92 22 0e 	sts	0x0E22, r1	; 0x800e22 <_data+0x1>
    2d30:	10 92 21 0e 	sts	0x0E21, r1	; 0x800e21 <_data>
    2d34:	10 92 24 0e 	sts	0x0E24, r1	; 0x800e24 <_nSamples+0x1>
    2d38:	10 92 23 0e 	sts	0x0E23, r1	; 0x800e23 <_nSamples>
    2d3c:	82 e0       	ldi	r24, 0x02	; 2
    2d3e:	01 c0       	rjmp	.+2      	; 0x2d42 <ADC_init_sampling+0x62>
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	cf 91       	pop	r28
    2d44:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

000042de <ADC_deinit_sampling>:
    42de:	0e 94 d5 22 	call	0x45aa	; 0x45aa <TC0_HAL_stop>
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	0e 94 1f 21 	call	0x423e	; 0x423e <PM_HAL_adc_power>
    42e8:	10 92 22 0e 	sts	0x0E22, r1	; 0x800e22 <_data+0x1>
    42ec:	10 92 21 0e 	sts	0x0E21, r1	; 0x800e21 <_data>
    42f0:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

000040a8 <ADC_is_sampling_done>:
    40a8:	40 91 1f 0e 	lds	r20, 0x0E1F	; 0x800e1f <cntSamples>
    40ac:	50 91 20 0e 	lds	r21, 0x0E20	; 0x800e20 <cntSamples+0x1>
    40b0:	20 91 23 0e 	lds	r18, 0x0E23	; 0x800e23 <_nSamples>
    40b4:	30 91 24 0e 	lds	r19, 0x0E24	; 0x800e24 <_nSamples+0x1>
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	42 17       	cp	r20, r18
    40bc:	53 07       	cpc	r21, r19
    40be:	08 f4       	brcc	.+2      	; 0x40c2 <ADC_is_sampling_done+0x1a>
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00003fb4 <ADC_meth_sens_power_on>:
    3fb4:	80 93 3e 0e 	sts	0x0E3E, r24	; 0x800e3e <_powerUpTime>
    3fb8:	10 92 3d 0e 	sts	0x0E3D, r1	; 0x800e3d <cntPowerUpTime>
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
    3fbe:	0e 94 29 21 	call	0x4252	; 0x4252 <PM_HAL_meth_power>
    3fc2:	6f ec       	ldi	r22, 0xCF	; 207
    3fc4:	70 e2       	ldi	r23, 0x20	; 32
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <TC0_HAL_init>
    3fcc:	0e 94 b2 22 	call	0x4564	; 0x4564 <TC0_HAL_start>
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00004318 <ADC_meth_sens_ready>:

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    4318:	20 91 3d 0e 	lds	r18, 0x0E3D	; 0x800e3d <cntPowerUpTime>
    431c:	90 91 3e 0e 	lds	r25, 0x0E3E	; 0x800e3e <_powerUpTime>
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	29 17       	cp	r18, r25
    4324:	08 f4       	brcc	.+2      	; 0x4328 <ADC_meth_sens_ready+0x10>
    4326:	80 e0       	ldi	r24, 0x00	; 0
}
    4328:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

000036a4 <ADC_set_conf_parameters>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    36a4:	ef 92       	push	r14
    36a6:	ff 92       	push	r15
    36a8:	0f 93       	push	r16
    36aa:	1f 93       	push	r17
    36ac:	60 93 07 0e 	sts	0x0E07, r22	; 0x800e07 <Vc>
    36b0:	70 93 08 0e 	sts	0x0E08, r23	; 0x800e08 <Vc+0x1>
    36b4:	80 93 09 0e 	sts	0x0E09, r24	; 0x800e09 <Vc+0x2>
    36b8:	90 93 0a 0e 	sts	0x0E0A, r25	; 0x800e0a <Vc+0x3>
    36bc:	20 93 03 0e 	sts	0x0E03, r18	; 0x800e03 <RRL>
    36c0:	30 93 04 0e 	sts	0x0E04, r19	; 0x800e04 <RRL+0x1>
    36c4:	40 93 05 0e 	sts	0x0E05, r20	; 0x800e05 <RRL+0x2>
    36c8:	50 93 06 0e 	sts	0x0E06, r21	; 0x800e06 <RRL+0x3>
    36cc:	e0 92 ff 0d 	sts	0x0DFF, r14	; 0x800dff <PPM_factor>
    36d0:	f0 92 00 0e 	sts	0x0E00, r15	; 0x800e00 <PPM_factor+0x1>
    36d4:	00 93 01 0e 	sts	0x0E01, r16	; 0x800e01 <PPM_factor+0x2>
    36d8:	10 93 02 0e 	sts	0x0E02, r17	; 0x800e02 <PPM_factor+0x3>
    36dc:	1f 91       	pop	r17
    36de:	0f 91       	pop	r16
    36e0:	ff 90       	pop	r15
    36e2:	ef 90       	pop	r14
    36e4:	08 95       	ret

Disassembly of section .text.calc_ppm_methane:

00002676 <calc_ppm_methane>:
    2676:	8f 92       	push	r8
    2678:	9f 92       	push	r9
    267a:	af 92       	push	r10
    267c:	bf 92       	push	r11
    267e:	cf 92       	push	r12
    2680:	df 92       	push	r13
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	bc 01       	movw	r22, r24
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__floatunsisf>
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	59 e3       	ldi	r21, 0x39	; 57
    2698:	0e 94 ae 22 	call	0x455c	; 0x455c <__mulsf3>
    269c:	80 90 07 0e 	lds	r8, 0x0E07	; 0x800e07 <Vc>
    26a0:	90 90 08 0e 	lds	r9, 0x0E08	; 0x800e08 <Vc+0x1>
    26a4:	a0 90 09 0e 	lds	r10, 0x0E09	; 0x800e09 <Vc+0x2>
    26a8:	b0 90 0a 0e 	lds	r11, 0x0E0A	; 0x800e0a <Vc+0x3>
    26ac:	a5 01       	movw	r20, r10
    26ae:	94 01       	movw	r18, r8
    26b0:	0e 94 ae 22 	call	0x455c	; 0x455c <__mulsf3>
    26b4:	6b 01       	movw	r12, r22
    26b6:	7c 01       	movw	r14, r24
    26b8:	9b 01       	movw	r18, r22
    26ba:	ac 01       	movw	r20, r24
    26bc:	c5 01       	movw	r24, r10
    26be:	b4 01       	movw	r22, r8
    26c0:	0e 94 ff 21 	call	0x43fe	; 0x43fe <__subsf3>
    26c4:	a7 01       	movw	r20, r14
    26c6:	96 01       	movw	r18, r12
    26c8:	0e 94 aa 22 	call	0x4554	; 0x4554 <__divsf3>
    26cc:	20 91 03 0e 	lds	r18, 0x0E03	; 0x800e03 <RRL>
    26d0:	30 91 04 0e 	lds	r19, 0x0E04	; 0x800e04 <RRL+0x1>
    26d4:	40 91 05 0e 	lds	r20, 0x0E05	; 0x800e05 <RRL+0x2>
    26d8:	50 91 06 0e 	lds	r21, 0x0E06	; 0x800e06 <RRL+0x3>
    26dc:	0e 94 ae 22 	call	0x455c	; 0x455c <__mulsf3>
    26e0:	20 91 ff 0d 	lds	r18, 0x0DFF	; 0x800dff <PPM_factor>
    26e4:	30 91 00 0e 	lds	r19, 0x0E00	; 0x800e00 <PPM_factor+0x1>
    26e8:	40 91 01 0e 	lds	r20, 0x0E01	; 0x800e01 <PPM_factor+0x2>
    26ec:	50 91 02 0e 	lds	r21, 0x0E02	; 0x800e02 <PPM_factor+0x3>
    26f0:	0e 94 ae 22 	call	0x455c	; 0x455c <__mulsf3>
    26f4:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__fixunssfsi>
    26f8:	cb 01       	movw	r24, r22
    26fa:	ff 90       	pop	r15
    26fc:	ef 90       	pop	r14
    26fe:	df 90       	pop	r13
    2700:	cf 90       	pop	r12
    2702:	bf 90       	pop	r11
    2704:	af 90       	pop	r10
    2706:	9f 90       	pop	r9
    2708:	8f 90       	pop	r8
    270a:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002f6c <ADC_get_value>:
    2f6c:	0f 93       	push	r16
    2f6e:	1f 93       	push	r17
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <ADC_get_value+0xa>
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	8c 01       	movw	r16, r24
    2f7c:	8f ef       	ldi	r24, 0xFF	; 255
    2f7e:	9f ef       	ldi	r25, 0xFF	; 255
    2f80:	f8 01       	movw	r30, r16
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
    2f86:	42 e0       	ldi	r20, 0x02	; 2
    2f88:	be 01       	movw	r22, r28
    2f8a:	6f 5f       	subi	r22, 0xFF	; 255
    2f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8e:	8d e4       	ldi	r24, 0x4D	; 77
    2f90:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <TWI_API_read_data_ack_end_nack_stop>
    2f94:	81 11       	cpse	r24, r1
    2f96:	0d c0       	rjmp	.+26     	; 0x2fb2 <ADC_get_value+0x46>
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	98 2f       	mov	r25, r24
    2f9e:	88 27       	eor	r24, r24
    2fa0:	2a 81       	ldd	r18, Y+2	; 0x02
    2fa2:	82 2b       	or	r24, r18
    2fa4:	0e 94 3b 13 	call	0x2676	; 0x2676 <calc_ppm_methane>
    2fa8:	f8 01       	movw	r30, r16
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	80 83       	st	Z, r24
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	01 c0       	rjmp	.+2      	; 0x2fb4 <ADC_get_value+0x48>
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

000034c6 <vect_ADC_do_sample>:
    34c6:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <_data>
    34ca:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <_data+0x1>
    34ce:	20 91 1f 0e 	lds	r18, 0x0E1F	; 0x800e1f <cntSamples>
    34d2:	30 91 20 0e 	lds	r19, 0x0E20	; 0x800e20 <cntSamples+0x1>
    34d6:	a9 01       	movw	r20, r18
    34d8:	4f 5f       	subi	r20, 0xFF	; 255
    34da:	5f 4f       	sbci	r21, 0xFF	; 255
    34dc:	50 93 20 0e 	sts	0x0E20, r21	; 0x800e20 <cntSamples+0x1>
    34e0:	40 93 1f 0e 	sts	0x0E1F, r20	; 0x800e1f <cntSamples>
    34e4:	22 0f       	add	r18, r18
    34e6:	33 1f       	adc	r19, r19
    34e8:	82 0f       	add	r24, r18
    34ea:	93 1f       	adc	r25, r19
    34ec:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <ADC_get_value>
    34f0:	20 91 1f 0e 	lds	r18, 0x0E1F	; 0x800e1f <cntSamples>
    34f4:	30 91 20 0e 	lds	r19, 0x0E20	; 0x800e20 <cntSamples+0x1>
    34f8:	80 91 23 0e 	lds	r24, 0x0E23	; 0x800e23 <_nSamples>
    34fc:	90 91 24 0e 	lds	r25, 0x0E24	; 0x800e24 <_nSamples+0x1>
    3500:	28 17       	cp	r18, r24
    3502:	39 07       	cpc	r19, r25
    3504:	10 f0       	brcs	.+4      	; 0x350a <vect_ADC_do_sample+0x44>
    3506:	0e 94 d5 22 	call	0x45aa	; 0x45aa <TC0_HAL_stop>
    350a:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

0000446a <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

ADC_STATUS ADC_start_sampling(){
	TC0_HAL_start();
    446a:	0e 94 b2 22 	call	0x4564	; 0x4564 <TC0_HAL_start>
	vect_ADC_do_sample();
    446e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <vect_ADC_do_sample>
	return ADC_STATUS_SUCCESS;
}
    4472:	80 e0       	ldi	r24, 0x00	; 0
    4474:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

000041e6 <EM_has_deveui>:
uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
}

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    41e6:	60 e4       	ldi	r22, 0x40	; 64
    41e8:	70 e0       	ldi	r23, 0x00	; 0
    41ea:	80 e8       	ldi	r24, 0x80	; 128
    41ec:	0e 94 9e 21 	call	0x433c	; 0x433c <eeprom_read_byte>
    41f0:	91 e0       	ldi	r25, 0x01	; 1
    41f2:	81 11       	cpse	r24, r1
    41f4:	01 c0       	rjmp	.+2      	; 0x41f8 <EM_has_deveui+0x12>
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	89 2f       	mov	r24, r25
    41fa:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

000041fc <EM_has_appeui>:
    41fc:	61 e4       	ldi	r22, 0x41	; 65
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    4200:	80 e8       	ldi	r24, 0x80	; 128
    4202:	0e 94 9e 21 	call	0x433c	; 0x433c <eeprom_read_byte>
    4206:	91 e0       	ldi	r25, 0x01	; 1
    4208:	81 11       	cpse	r24, r1
    420a:	01 c0       	rjmp	.+2      	; 0x420e <EM_has_appeui+0x12>
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	89 2f       	mov	r24, r25
    4210:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00004212 <EM_has_appkey>:
    4212:	62 e4       	ldi	r22, 0x42	; 66
    4214:	70 e0       	ldi	r23, 0x00	; 0
    4216:	80 e8       	ldi	r24, 0x80	; 128
    4218:	0e 94 9e 21 	call	0x433c	; 0x433c <eeprom_read_byte>
    421c:	91 e0       	ldi	r25, 0x01	; 1
    421e:	81 11       	cpse	r24, r1
    4220:	01 c0       	rjmp	.+2      	; 0x4224 <EM_has_appkey+0x12>
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	89 2f       	mov	r24, r25
    4226:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00003bec <EM_get_deveui>:
    3bec:	0f 93       	push	r16
    3bee:	1f 93       	push	r17
    3bf0:	cf 93       	push	r28
    3bf2:	8c 01       	movw	r16, r24
    3bf4:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <EM_has_deveui>
    3bf8:	c8 2f       	mov	r28, r24
    3bfa:	88 23       	and	r24, r24
    3bfc:	51 f0       	breq	.+20     	; 0x3c12 <EM_get_deveui+0x26>
    3bfe:	20 e1       	ldi	r18, 0x10	; 16
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	40 e0       	ldi	r20, 0x00	; 0
    3c04:	50 e0       	ldi	r21, 0x00	; 0
    3c06:	60 e0       	ldi	r22, 0x00	; 0
    3c08:	c8 01       	movw	r24, r16
    3c0a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <eeprom_read_block>
    3c0e:	f8 01       	movw	r30, r16
    3c10:	10 8a       	std	Z+16, r1	; 0x10
    3c12:	8c 2f       	mov	r24, r28
    3c14:	cf 91       	pop	r28
    3c16:	1f 91       	pop	r17
    3c18:	0f 91       	pop	r16
    3c1a:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003c1c <EM_get_appeui>:
    3c1c:	0f 93       	push	r16
    3c1e:	1f 93       	push	r17
    3c20:	cf 93       	push	r28
    3c22:	8c 01       	movw	r16, r24
    3c24:	0e 94 fe 20 	call	0x41fc	; 0x41fc <EM_has_appeui>
    3c28:	c8 2f       	mov	r28, r24
    3c2a:	88 23       	and	r24, r24
    3c2c:	51 f0       	breq	.+20     	; 0x3c42 <EM_get_appeui+0x26>
    3c2e:	20 e1       	ldi	r18, 0x10	; 16
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	40 e1       	ldi	r20, 0x10	; 16
    3c34:	50 e0       	ldi	r21, 0x00	; 0
    3c36:	60 e0       	ldi	r22, 0x00	; 0
    3c38:	c8 01       	movw	r24, r16
    3c3a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <eeprom_read_block>
    3c3e:	f8 01       	movw	r30, r16
    3c40:	10 8a       	std	Z+16, r1	; 0x10
    3c42:	8c 2f       	mov	r24, r28
    3c44:	cf 91       	pop	r28
    3c46:	1f 91       	pop	r17
    3c48:	0f 91       	pop	r16
    3c4a:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00003c4c <EM_get_appkey>:
    3c4c:	0f 93       	push	r16
    3c4e:	1f 93       	push	r17
    3c50:	cf 93       	push	r28
    3c52:	8c 01       	movw	r16, r24
    3c54:	0e 94 09 21 	call	0x4212	; 0x4212 <EM_has_appkey>
    3c58:	c8 2f       	mov	r28, r24
    3c5a:	88 23       	and	r24, r24
    3c5c:	51 f0       	breq	.+20     	; 0x3c72 <EM_get_appkey+0x26>
    3c5e:	20 e2       	ldi	r18, 0x20	; 32
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e2       	ldi	r20, 0x20	; 32
    3c64:	50 e0       	ldi	r21, 0x00	; 0
    3c66:	60 e0       	ldi	r22, 0x00	; 0
    3c68:	c8 01       	movw	r24, r16
    3c6a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <eeprom_read_block>
    3c6e:	f8 01       	movw	r30, r16
    3c70:	10 a2       	std	Z+32, r1	; 0x20
    3c72:	8c 2f       	mov	r24, r28
    3c74:	cf 91       	pop	r28
    3c76:	1f 91       	pop	r17
    3c78:	0f 91       	pop	r16
    3c7a:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00003ff4 <EM_get_ppmfactor>:
    3ff4:	cf 93       	push	r28
    3ff6:	df 93       	push	r29
    3ff8:	ec 01       	movw	r28, r24
    3ffa:	63 e4       	ldi	r22, 0x43	; 67
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	0e 94 1b 22 	call	0x4436	; 0x4436 <eeprom_read_dword>
    4004:	68 83       	st	Y, r22
    4006:	79 83       	std	Y+1, r23	; 0x01
    4008:	8a 83       	std	Y+2, r24	; 0x02
    400a:	9b 83       	std	Y+3, r25	; 0x03
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00004012 <EM_get_RRL>:
    4012:	cf 93       	push	r28
    4014:	df 93       	push	r29
    4016:	ec 01       	movw	r28, r24
    4018:	67 e4       	ldi	r22, 0x47	; 71
    401a:	70 e0       	ldi	r23, 0x00	; 0
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	0e 94 1b 22 	call	0x4436	; 0x4436 <eeprom_read_dword>
    4022:	68 83       	st	Y, r22
    4024:	79 83       	std	Y+1, r23	; 0x01
    4026:	8a 83       	std	Y+2, r24	; 0x02
    4028:	9b 83       	std	Y+3, r25	; 0x03
    402a:	df 91       	pop	r29
    402c:	cf 91       	pop	r28
    402e:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00004030 <EM_get_Vcc>:
    4030:	cf 93       	push	r28
    4032:	df 93       	push	r29
    4034:	ec 01       	movw	r28, r24
    4036:	6b e4       	ldi	r22, 0x4B	; 75
    4038:	70 e0       	ldi	r23, 0x00	; 0
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	0e 94 1b 22 	call	0x4436	; 0x4436 <eeprom_read_dword>
    4040:	68 83       	st	Y, r22
    4042:	79 83       	std	Y+1, r23	; 0x01
    4044:	8a 83       	std	Y+2, r24	; 0x02
    4046:	9b 83       	std	Y+3, r25	; 0x03
    4048:	df 91       	pop	r29
    404a:	cf 91       	pop	r28
    404c:	08 95       	ret

Disassembly of section .text.EM_get_collections:

0000436e <EM_get_collections>:
    436e:	26 2f       	mov	r18, r22
    4370:	30 e0       	ldi	r19, 0x00	; 0
    4372:	44 e6       	ldi	r20, 0x64	; 100
    4374:	50 e0       	ldi	r21, 0x00	; 0
    4376:	60 e0       	ldi	r22, 0x00	; 0
    4378:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <eeprom_read_block>
    437c:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00004476 <EM_get_heat_up_time>:
    4476:	6f e4       	ldi	r22, 0x4F	; 79
    4478:	70 e0       	ldi	r23, 0x00	; 0
    447a:	80 e0       	ldi	r24, 0x00	; 0
    447c:	0e 94 9e 21 	call	0x433c	; 0x433c <eeprom_read_byte>
    4480:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

00004482 <EM_get_air_pump_time>:
    4482:	60 e5       	ldi	r22, 0x50	; 80
    4484:	70 e0       	ldi	r23, 0x00	; 0
    4486:	80 e0       	ldi	r24, 0x00	; 0
    4488:	0e 94 22 22 	call	0x4444	; 0x4444 <eeprom_read_word>
    448c:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

0000448e <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    448e:	62 e5       	ldi	r22, 0x52	; 82
    4490:	70 e0       	ldi	r23, 0x00	; 0
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	0e 94 9e 21 	call	0x433c	; 0x433c <eeprom_read_byte>
    4498:	08 95       	ret

Disassembly of section .text.cb_blink:

00004576 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    4576:	0e 94 8a 22 	call	0x4514	; 0x4514 <PM_HAL_LED_toggle>
    457a:	08 95       	ret

Disassembly of section .text.blink:

000031ea <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    31f0:	c0 e0       	ldi	r28, 0x00	; 0
    31f2:	19 c0       	rjmp	.+50     	; 0x3226 <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	0e 94 47 21 	call	0x428e	; 0x428e <PM_HAL_LED_power>
    31fa:	2f ef       	ldi	r18, 0xFF	; 255
    31fc:	82 e5       	ldi	r24, 0x52	; 82
    31fe:	97 e0       	ldi	r25, 0x07	; 7
    3200:	21 50       	subi	r18, 0x01	; 1
    3202:	80 40       	sbci	r24, 0x00	; 0
    3204:	90 40       	sbci	r25, 0x00	; 0
    3206:	e1 f7       	brne	.-8      	; 0x3200 <blink+0x16>
    3208:	00 c0       	rjmp	.+0      	; 0x320a <blink+0x20>
    320a:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	0e 94 47 21 	call	0x428e	; 0x428e <PM_HAL_LED_power>
    3212:	2f ef       	ldi	r18, 0xFF	; 255
    3214:	82 e5       	ldi	r24, 0x52	; 82
    3216:	97 e0       	ldi	r25, 0x07	; 7
    3218:	21 50       	subi	r18, 0x01	; 1
    321a:	80 40       	sbci	r24, 0x00	; 0
    321c:	90 40       	sbci	r25, 0x00	; 0
    321e:	e1 f7       	brne	.-8      	; 0x3218 <blink+0x2e>
    3220:	00 c0       	rjmp	.+0      	; 0x3222 <blink+0x38>
    3222:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    3224:	cf 5f       	subi	r28, 0xFF	; 255
    3226:	cd 17       	cp	r28, r29
    3228:	28 f3       	brcs	.-54     	; 0x31f4 <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	0e 94 47 21 	call	0x428e	; 0x428e <PM_HAL_LED_power>
}
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	08 95       	ret

Disassembly of section .text.err_code:

000038d6 <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    38d6:	cf 93       	push	r28
    38d8:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	0e 94 47 21 	call	0x428e	; 0x428e <PM_HAL_LED_power>
    38e0:	2f ef       	ldi	r18, 0xFF	; 255
    38e2:	83 ed       	ldi	r24, 0xD3	; 211
    38e4:	90 e3       	ldi	r25, 0x30	; 48
    38e6:	21 50       	subi	r18, 0x01	; 1
    38e8:	80 40       	sbci	r24, 0x00	; 0
    38ea:	90 40       	sbci	r25, 0x00	; 0
    38ec:	e1 f7       	brne	.-8      	; 0x38e6 <err_code+0x10>
    38ee:	00 c0       	rjmp	.+0      	; 0x38f0 <err_code+0x1a>
    38f0:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    38f2:	8c 2f       	mov	r24, r28
    38f4:	0e 94 f5 18 	call	0x31ea	; 0x31ea <blink>
    38f8:	2f ef       	ldi	r18, 0xFF	; 255
    38fa:	89 e6       	ldi	r24, 0x69	; 105
    38fc:	98 e1       	ldi	r25, 0x18	; 24
    38fe:	21 50       	subi	r18, 0x01	; 1
    3900:	80 40       	sbci	r24, 0x00	; 0
    3902:	90 40       	sbci	r25, 0x00	; 0
    3904:	e1 f7       	brne	.-8      	; 0x38fe <err_code+0x28>
    3906:	00 c0       	rjmp	.+0      	; 0x3908 <err_code+0x32>
    3908:	00 00       	nop
	_delay_ms(1000);
}
    390a:	cf 91       	pop	r28
    390c:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

000043f0 <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    43f0:	8b eb       	ldi	r24, 0xBB	; 187
    43f2:	92 e2       	ldi	r25, 0x22	; 34
    43f4:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <TC2_HAL_subscribe>
    43f8:	80 93 3f 0e 	sts	0x0E3F, r24	; 0x800e3f <cbPointer>
    43fc:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

0000437e <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    437e:	80 91 3f 0e 	lds	r24, 0x0E3F	; 0x800e3f <cbPointer>
    4382:	0e 94 4e 1c 	call	0x389c	; 0x389c <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	0e 94 47 21 	call	0x428e	; 0x428e <PM_HAL_LED_power>
    438c:	08 95       	ret

Disassembly of section .text.LED_join_success:

00003728 <LED_join_success>:
}

void LED_join_success(){
    3728:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    372a:	c0 e0       	ldi	r28, 0x00	; 0
    372c:	19 c0       	rjmp	.+50     	; 0x3760 <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	0e 94 47 21 	call	0x428e	; 0x428e <PM_HAL_LED_power>
    3734:	2f ef       	ldi	r18, 0xFF	; 255
    3736:	80 e7       	ldi	r24, 0x70	; 112
    3738:	92 e0       	ldi	r25, 0x02	; 2
    373a:	21 50       	subi	r18, 0x01	; 1
    373c:	80 40       	sbci	r24, 0x00	; 0
    373e:	90 40       	sbci	r25, 0x00	; 0
    3740:	e1 f7       	brne	.-8      	; 0x373a <LED_join_success+0x12>
    3742:	00 c0       	rjmp	.+0      	; 0x3744 <LED_join_success+0x1c>
    3744:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	0e 94 47 21 	call	0x428e	; 0x428e <PM_HAL_LED_power>
    374c:	2f ef       	ldi	r18, 0xFF	; 255
    374e:	80 e7       	ldi	r24, 0x70	; 112
    3750:	92 e0       	ldi	r25, 0x02	; 2
    3752:	21 50       	subi	r18, 0x01	; 1
    3754:	80 40       	sbci	r24, 0x00	; 0
    3756:	90 40       	sbci	r25, 0x00	; 0
    3758:	e1 f7       	brne	.-8      	; 0x3752 <LED_join_success+0x2a>
    375a:	00 c0       	rjmp	.+0      	; 0x375c <LED_join_success+0x34>
    375c:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    375e:	cf 5f       	subi	r28, 0xFF	; 255
    3760:	ca 30       	cpi	r28, 0x0A	; 10
    3762:	28 f3       	brcs	.-54     	; 0x372e <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    3764:	cf 91       	pop	r28
    3766:	08 95       	ret

Disassembly of section .text.LED_join_denied:

0000453c <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    453c:	83 e0       	ldi	r24, 0x03	; 3
    453e:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <err_code>
    4542:	08 95       	ret

Disassembly of section .text.LED_conf_err:

00004544 <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    4544:	85 e0       	ldi	r24, 0x05	; 5
    4546:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <err_code>
    454a:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

0000454c <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    454c:	87 e0       	ldi	r24, 0x07	; 7
    454e:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <err_code>
    4552:	08 95       	ret

Disassembly of section .text.JN_join_network:

00000df8 <JN_join_network>:
#include "../../../HAL/RN2483/RN2483_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	28 97       	sbiw	r28, 0x08	; 8
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	5c 01       	movw	r10, r24
     e1c:	6b 01       	movw	r12, r22
     e1e:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
     e20:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	
	
	while(1){
		switch(state){
     e22:	e1 2f       	mov	r30, r17
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	ed 30       	cpi	r30, 0x0D	; 13
     e28:	f1 05       	cpc	r31, r1
     e2a:	d8 f7       	brcc	.-10     	; 0xe22 <JN_join_network+0x2a>
     e2c:	e2 5c       	subi	r30, 0xC2	; 194
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
     e34:	0e 94 92 22 	call	0x4524	; 0x4524 <rn2483_reset_active>
     e38:	2f ef       	ldi	r18, 0xFF	; 255
     e3a:	89 e6       	ldi	r24, 0x69	; 105
     e3c:	98 e1       	ldi	r25, 0x18	; 24
     e3e:	21 50       	subi	r18, 0x01	; 1
     e40:	80 40       	sbci	r24, 0x00	; 0
     e42:	90 40       	sbci	r25, 0x00	; 0
     e44:	e1 f7       	brne	.-8      	; 0xe3e <JN_join_network+0x46>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <JN_join_network+0x50>
     e48:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
     e4a:	0e 94 96 22 	call	0x452c	; 0x452c <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
     e4e:	4c e0       	ldi	r20, 0x0C	; 12
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	62 e0       	ldi	r22, 0x02	; 2
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	ce 01       	movw	r24, r28
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
     e5e:	22 e5       	ldi	r18, 0x52	; 82
     e60:	33 e0       	ldi	r19, 0x03	; 3
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	61 e0       	ldi	r22, 0x01	; 1
     e66:	ce 01       	movw	r24, r28
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
     e6e:	11 e0       	ldi	r17, 0x01	; 1
			break;
     e70:	d8 cf       	rjmp	.-80     	; 0xe22 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
     e72:	49 e5       	ldi	r20, 0x59	; 89
     e74:	53 e0       	ldi	r21, 0x03	; 3
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	80 e9       	ldi	r24, 0x90	; 144
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <cmd_with_ending>
				util_transmit_msg(lm_msg);
     e80:	80 e9       	ldi	r24, 0x90	; 144
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	0e 94 7e 20 	call	0x40fc	; 0x40fc <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
     e88:	4c e0       	ldi	r20, 0x0C	; 12
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	63 e0       	ldi	r22, 0x03	; 3
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     e98:	27 e6       	ldi	r18, 0x67	; 103
     e9a:	33 e0       	ldi	r19, 0x03	; 3
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	ce 01       	movw	r24, r28
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     ea8:	11 e0       	ldi	r17, 0x01	; 1
			break;
     eaa:	bb cf       	rjmp	.-138    	; 0xe22 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
     eac:	b5 01       	movw	r22, r10
     eae:	80 e9       	ldi	r24, 0x90	; 144
     eb0:	92 e0       	ldi	r25, 0x02	; 2
     eb2:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <mac_set_deveui>
				attach_ending(lm_msg);
     eb6:	80 e9       	ldi	r24, 0x90	; 144
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	0e 94 70 20 	call	0x40e0	; 0x40e0 <attach_ending>
				util_transmit_msg(lm_msg);
     ebe:	80 e9       	ldi	r24, 0x90	; 144
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	0e 94 7e 20 	call	0x40fc	; 0x40fc <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
     ec6:	4c e0       	ldi	r20, 0x0C	; 12
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	64 e0       	ldi	r22, 0x04	; 4
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	ce 01       	movw	r24, r28
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     ed6:	27 e6       	ldi	r18, 0x67	; 103
     ed8:	33 e0       	ldi	r19, 0x03	; 3
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	ce 01       	movw	r24, r28
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     ee6:	11 e0       	ldi	r17, 0x01	; 1
			break;
     ee8:	9c cf       	rjmp	.-200    	; 0xe22 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
     eea:	b7 01       	movw	r22, r14
     eec:	80 e9       	ldi	r24, 0x90	; 144
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	0e 94 1c 1a 	call	0x3438	; 0x3438 <mac_set_appkey>
				attach_ending(lm_msg);
     ef4:	80 e9       	ldi	r24, 0x90	; 144
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	0e 94 70 20 	call	0x40e0	; 0x40e0 <attach_ending>
				util_transmit_msg(lm_msg);
     efc:	80 e9       	ldi	r24, 0x90	; 144
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	0e 94 7e 20 	call	0x40fc	; 0x40fc <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
     f04:	4c e0       	ldi	r20, 0x0C	; 12
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	65 e0       	ldi	r22, 0x05	; 5
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	ce 01       	movw	r24, r28
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     f14:	27 e6       	ldi	r18, 0x67	; 103
     f16:	33 e0       	ldi	r19, 0x03	; 3
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	ce 01       	movw	r24, r28
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     f24:	11 e0       	ldi	r17, 0x01	; 1
			break;
     f26:	7d cf       	rjmp	.-262    	; 0xe22 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
     f28:	b6 01       	movw	r22, r12
     f2a:	80 e9       	ldi	r24, 0x90	; 144
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <mac_set_appeui>
				attach_ending(lm_msg);
     f32:	80 e9       	ldi	r24, 0x90	; 144
     f34:	92 e0       	ldi	r25, 0x02	; 2
     f36:	0e 94 70 20 	call	0x40e0	; 0x40e0 <attach_ending>
				util_transmit_msg(lm_msg);
     f3a:	80 e9       	ldi	r24, 0x90	; 144
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	0e 94 7e 20 	call	0x40fc	; 0x40fc <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
     f42:	4c e0       	ldi	r20, 0x0C	; 12
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	66 e0       	ldi	r22, 0x06	; 6
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     f52:	27 e6       	ldi	r18, 0x67	; 103
     f54:	33 e0       	ldi	r19, 0x03	; 3
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	ce 01       	movw	r24, r28
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     f62:	11 e0       	ldi	r17, 0x01	; 1
			break;
     f64:	5e cf       	rjmp	.-324    	; 0xe22 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	80 e9       	ldi	r24, 0x90	; 144
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <mac_set_ADR>
				attach_ending(lm_msg);
     f70:	80 e9       	ldi	r24, 0x90	; 144
     f72:	92 e0       	ldi	r25, 0x02	; 2
     f74:	0e 94 70 20 	call	0x40e0	; 0x40e0 <attach_ending>
				util_transmit_msg(lm_msg);
     f78:	80 e9       	ldi	r24, 0x90	; 144
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	0e 94 7e 20 	call	0x40fc	; 0x40fc <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
     f80:	4c e0       	ldi	r20, 0x0C	; 12
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	67 e0       	ldi	r22, 0x07	; 7
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     f90:	27 e6       	ldi	r18, 0x67	; 103
     f92:	33 e0       	ldi	r19, 0x03	; 3
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     fa0:	11 e0       	ldi	r17, 0x01	; 1
			break;
     fa2:	3f cf       	rjmp	.-386    	; 0xe22 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
     fa4:	4a e6       	ldi	r20, 0x6A	; 106
     fa6:	53 e0       	ldi	r21, 0x03	; 3
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	80 e9       	ldi	r24, 0x90	; 144
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <cmd_with_ending>
				util_transmit_msg(lm_msg);
     fb2:	80 e9       	ldi	r24, 0x90	; 144
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	0e 94 7e 20 	call	0x40fc	; 0x40fc <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
     fba:	4c e0       	ldi	r20, 0x0C	; 12
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	68 e0       	ldi	r22, 0x08	; 8
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	ce 01       	movw	r24, r28
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     fca:	27 e6       	ldi	r18, 0x67	; 103
     fcc:	33 e0       	ldi	r19, 0x03	; 3
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	ce 01       	movw	r24, r28
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     fda:	11 e0       	ldi	r17, 0x01	; 1
			break;
     fdc:	22 cf       	rjmp	.-444    	; 0xe22 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
     fde:	43 e7       	ldi	r20, 0x73	; 115
     fe0:	53 e0       	ldi	r21, 0x03	; 3
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	80 e9       	ldi	r24, 0x90	; 144
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <cmd_with_ending>
				util_transmit_msg(lm_msg);
     fec:	80 e9       	ldi	r24, 0x90	; 144
     fee:	92 e0       	ldi	r25, 0x02	; 2
     ff0:	0e 94 7e 20 	call	0x40fc	; 0x40fc <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
     ff4:	4a e0       	ldi	r20, 0x0A	; 10
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	69 e0       	ldi	r22, 0x09	; 9
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1004:	27 e6       	ldi	r18, 0x67	; 103
    1006:	33 e0       	ldi	r19, 0x03	; 3
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	ce 01       	movw	r24, r28
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1014:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1016:	05 cf       	rjmp	.-502    	; 0xe22 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    1018:	4a e0       	ldi	r20, 0x0A	; 10
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	6b e0       	ldi	r22, 0x0B	; 11
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	ce 01       	movw	r24, r28
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
    1028:	21 e8       	ldi	r18, 0x81	; 129
    102a:	33 e0       	ldi	r19, 0x03	; 3
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	ce 01       	movw	r24, r28
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1038:	11 e0       	ldi	r17, 0x01	; 1
			break;
    103a:	f3 ce       	rjmp	.-538    	; 0xe22 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return util_parse_err(lm_msg);
    103c:	80 e9       	ldi	r24, 0x90	; 144
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <util_parse_err>
    1044:	14 c0       	rjmp	.+40     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    1046:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <uart0_hal_message_ready>
    104a:	88 23       	and	r24, r24
    104c:	09 f4       	brne	.+2      	; 0x1050 <__DATA_REGION_LENGTH__+0x50>
    104e:	e9 ce       	rjmp	.-558    	; 0xe22 <JN_join_network+0x2a>
					util_read_msg(lm_msg);
    1050:	80 e9       	ldi	r24, 0x90	; 144
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	0e 94 c7 22 	call	0x458e	; 0x458e <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    1058:	60 e9       	ldi	r22, 0x90	; 144
    105a:	72 e0       	ldi	r23, 0x02	; 2
    105c:	ce 01       	movw	r24, r28
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <util_matchMessage>
    1064:	18 2f       	mov	r17, r24
    1066:	dd ce       	rjmp	.-582    	; 0xe22 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	01 c0       	rjmp	.+2      	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    106c:	82 e0       	ldi	r24, 0x02	; 2
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    106e:	28 96       	adiw	r28, 0x08	; 8
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	08 95       	ret

Disassembly of section .text.set_block_uplink:

000041b6 <set_block_uplink>:
	util_lora_forward_msg(msg, res);
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&block_uplink);
    41b6:	82 e6       	ldi	r24, 0x62	; 98
    41b8:	90 e2       	ldi	r25, 0x20	; 32
    41ba:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <TC2_HAL_subscribe>
    41be:	80 93 40 0e 	sts	0x0E40, r24	; 0x800e40 <subPointer>
	busy=true;
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	80 93 41 0e 	sts	0x0E41, r24	; 0x800e41 <busy>
	cnt=0;
    41c8:	10 92 42 0e 	sts	0x0E42, r1	; 0x800e42 <cnt>
    41cc:	08 95       	ret

Disassembly of section .text.block_uplink:

000040c4 <block_uplink>:
}

static void block_uplink(){
	cnt++;
    40c4:	80 91 42 0e 	lds	r24, 0x0E42	; 0x800e42 <cnt>
    40c8:	8f 5f       	subi	r24, 0xFF	; 255
    40ca:	80 93 42 0e 	sts	0x0E42, r24	; 0x800e42 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    40ce:	86 30       	cpi	r24, 0x06	; 6
    40d0:	30 f0       	brcs	.+12     	; 0x40de <block_uplink+0x1a>
		busy=false;
    40d2:	10 92 41 0e 	sts	0x0E41, r1	; 0x800e41 <busy>
		TC2_HAL_cancel(subPointer);
    40d6:	80 91 40 0e 	lds	r24, 0x0E40	; 0x800e40 <subPointer>
    40da:	0e 94 4e 1c 	call	0x389c	; 0x389c <TC2_HAL_cancel>
    40de:	08 95       	ret

Disassembly of section .text.LM_join_network:

0000457c <LM_join_network>:

static void block_uplink();
static void set_block_uplink();

LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    457c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <JN_join_network>
}
    4580:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00003d6a <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    3d6a:	1f 93       	push	r17
    3d6c:	cf 93       	push	r28
    3d6e:	df 93       	push	r29
    3d70:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    3d72:	90 91 41 0e 	lds	r25, 0x0E41	; 0x800e41 <busy>
    3d76:	91 11       	cpse	r25, r1
    3d78:	0a c0       	rjmp	.+20     	; 0x3d8e <LM_send_uplink+0x24>
    3d7a:	16 2f       	mov	r17, r22
    3d7c:	e9 01       	movw	r28, r18
	set_block_uplink();
    3d7e:	0e 94 db 20 	call	0x41b6	; 0x41b6 <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    3d82:	41 2f       	mov	r20, r17
    3d84:	be 01       	movw	r22, r28
    3d86:	84 e6       	ldi	r24, 0x64	; 100
    3d88:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <SU_send_uplink>
    3d8c:	01 c0       	rjmp	.+2      	; 0x3d90 <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    3d8e:	83 e0       	ldi	r24, 0x03	; 3
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    3d90:	df 91       	pop	r29
    3d92:	cf 91       	pop	r28
    3d94:	1f 91       	pop	r17
    3d96:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00004582 <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
    4582:	0e 94 1b 19 	call	0x3236	; 0x3236 <SC_put_to_sleep>
}
    4586:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00004588 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    4588:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <SC_wake_up>
}
    458c:	08 95       	ret

Disassembly of section .text.LM_is_free:

000044f6 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    44f6:	90 91 41 0e 	lds	r25, 0x0E41	; 0x800e41 <busy>
}
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	89 27       	eor	r24, r25
    44fe:	08 95       	ret

Disassembly of section .text.tohex:

00002944 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    2944:	6f 92       	push	r6
    2946:	7f 92       	push	r7
    2948:	8f 92       	push	r8
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	7c 01       	movw	r14, r24
    2958:	3a 01       	movw	r6, r20
    295a:	86 2e       	mov	r8, r22
    295c:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    295e:	c0 e0       	ldi	r28, 0x00	; 0
    2960:	d0 e0       	ldi	r29, 0x00	; 0
    2962:	25 c0       	rjmp	.+74     	; 0x29ae <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    2964:	a8 2d       	mov	r26, r8
    2966:	c3 01       	movw	r24, r6
    2968:	8c 0f       	add	r24, r28
    296a:	9d 1f       	adc	r25, r29
    296c:	a1 1d       	adc	r26, r1
    296e:	d7 fd       	sbrc	r29, 7
    2970:	aa 95       	dec	r26
    2972:	fc 01       	movw	r30, r24
    2974:	24 91       	lpm	r18, Z
    2976:	a7 fd       	sbrc	r26, 7
    2978:	20 81       	ld	r18, Z
    297a:	ce 01       	movw	r24, r28
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	1f 92       	push	r1
    2982:	2f 93       	push	r18
    2984:	2f ed       	ldi	r18, 0xDF	; 223
    2986:	32 e0       	ldi	r19, 0x02	; 2
    2988:	40 e0       	ldi	r20, 0x00	; 0
    298a:	4f 93       	push	r20
    298c:	3f 93       	push	r19
    298e:	2f 93       	push	r18
    2990:	8e 0d       	add	r24, r14
    2992:	9f 1d       	adc	r25, r15
    2994:	9f 93       	push	r25
    2996:	8f 93       	push	r24
    2998:	0e 94 a9 1a 	call	0x3552	; 0x3552 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    299c:	21 96       	adiw	r28, 0x01	; 1
    299e:	8d b7       	in	r24, 0x3d	; 61
    29a0:	9e b7       	in	r25, 0x3e	; 62
    29a2:	07 96       	adiw	r24, 0x07	; 7
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	9e bf       	out	0x3e, r25	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	8d bf       	out	0x3d, r24	; 61
    29ae:	c0 17       	cp	r28, r16
    29b0:	d1 07       	cpc	r29, r17
    29b2:	c4 f2       	brlt	.-80     	; 0x2964 <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	ef 90       	pop	r14
    29c0:	8f 90       	pop	r8
    29c2:	7f 90       	pop	r7
    29c4:	6f 90       	pop	r6
    29c6:	08 95       	ret

Disassembly of section .text.attach_ending:

000040e0 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    40e0:	fc 01       	movw	r30, r24
    40e2:	01 90       	ld	r0, Z+
    40e4:	00 20       	and	r0, r0
    40e6:	e9 f7       	brne	.-6      	; 0x40e2 <attach_ending+0x2>
    40e8:	cf 01       	movw	r24, r30
    40ea:	23 e0       	ldi	r18, 0x03	; 3
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	44 ee       	ldi	r20, 0xE4	; 228
    40f0:	52 e0       	ldi	r21, 0x02	; 2
    40f2:	60 e0       	ldi	r22, 0x00	; 0
    40f4:	01 97       	sbiw	r24, 0x01	; 1
    40f6:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <memcpy>
    40fa:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00003af2 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    3af2:	cf 93       	push	r28
    3af4:	df 93       	push	r29
    3af6:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    3af8:	0e 94 45 20 	call	0x408a	; 0x408a <strcpy>
	strcat(buffer, CMD_END_CHARS);
    3afc:	fe 01       	movw	r30, r28
    3afe:	01 90       	ld	r0, Z+
    3b00:	00 20       	and	r0, r0
    3b02:	e9 f7       	brne	.-6      	; 0x3afe <cmd_with_ending+0xc>
    3b04:	cf 01       	movw	r24, r30
    3b06:	23 e0       	ldi	r18, 0x03	; 3
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	44 ee       	ldi	r20, 0xE4	; 228
    3b0c:	52 e0       	ldi	r21, 0x02	; 2
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <memcpy>
	return strlen(buffer);
    3b16:	be 01       	movw	r22, r28
    3b18:	80 e8       	ldi	r24, 0x80	; 128
    3b1a:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
}
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

00002d46 <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    2d4a:	44 36       	cpi	r20, 0x64	; 100
    2d4c:	51 05       	cpc	r21, r1
    2d4e:	61 05       	cpc	r22, r1
    2d50:	71 05       	cpc	r23, r1
    2d52:	18 f1       	brcs	.+70     	; 0x2d9a <sys_sleep_cmd+0x54>
    2d54:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    2d56:	7f 93       	push	r23
    2d58:	6f 93       	push	r22
    2d5a:	5f 93       	push	r21
    2d5c:	4f 93       	push	r20
    2d5e:	87 ee       	ldi	r24, 0xE7	; 231
    2d60:	92 e0       	ldi	r25, 0x02	; 2
    2d62:	a0 e0       	ldi	r26, 0x00	; 0
    2d64:	af 93       	push	r26
    2d66:	9f 93       	push	r25
    2d68:	8f 93       	push	r24
    2d6a:	81 ef       	ldi	r24, 0xF1	; 241
    2d6c:	92 e0       	ldi	r25, 0x02	; 2
    2d6e:	a0 e0       	ldi	r26, 0x00	; 0
    2d70:	af 93       	push	r26
    2d72:	9f 93       	push	r25
    2d74:	8f 93       	push	r24
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <sprintf>
    return strlen(buffer);
    2d7e:	be 01       	movw	r22, r28
    2d80:	80 e8       	ldi	r24, 0x80	; 128
    2d82:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
    2d86:	2d b7       	in	r18, 0x3d	; 61
    2d88:	3e b7       	in	r19, 0x3e	; 62
    2d8a:	24 5f       	subi	r18, 0xF4	; 244
    2d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	3e bf       	out	0x3e, r19	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	2d bf       	out	0x3d, r18	; 61
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    2d9a:	8f ef       	ldi	r24, 0xFF	; 255
    2d9c:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    2d9e:	df 91       	pop	r29
    2da0:	cf 91       	pop	r28
    2da2:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00003102 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    310c:	2f 93       	push	r18
    310e:	1f 93       	push	r17
    3110:	0f 93       	push	r16
    3112:	6f 93       	push	r22
    3114:	5f 93       	push	r21
    3116:	4f 93       	push	r20
    3118:	88 ef       	ldi	r24, 0xF8	; 248
    311a:	92 e0       	ldi	r25, 0x02	; 2
    311c:	a0 e0       	ldi	r26, 0x00	; 0
    311e:	af 93       	push	r26
    3120:	9f 93       	push	r25
    3122:	8f 93       	push	r24
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	0e 94 a9 1a 	call	0x3552	; 0x3552 <sprintf>
    return strlen(buffer);
    312c:	be 01       	movw	r22, r28
    312e:	80 e8       	ldi	r24, 0x80	; 128
    3130:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
    3134:	2d b7       	in	r18, 0x3d	; 61
    3136:	3e b7       	in	r19, 0x3e	; 62
    3138:	25 5f       	subi	r18, 0xF5	; 245
    313a:	3f 4f       	sbci	r19, 0xFF	; 255
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	3e bf       	out	0x3e, r19	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	2d bf       	out	0x3d, r18	; 61
}
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	1f 91       	pop	r17
    314c:	0f 91       	pop	r16
    314e:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

000033a8 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    33a8:	cf 92       	push	r12
    33aa:	df 92       	push	r13
    33ac:	ef 92       	push	r14
    33ae:	0f 93       	push	r16
    33b0:	1f 93       	push	r17
    33b2:	cf 93       	push	r28
    33b4:	df 93       	push	r29
    33b6:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    33b8:	6b 01       	movw	r12, r22
    33ba:	80 e8       	ldi	r24, 0x80	; 128
    33bc:	e8 2e       	mov	r14, r24
    33be:	8e 2d       	mov	r24, r14
    33c0:	b6 01       	movw	r22, r12
    33c2:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
    33c6:	40 97       	sbiw	r24, 0x10	; 16
    33c8:	49 f4       	brne	.+18     	; 0x33dc <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    33ca:	2e 2d       	mov	r18, r14
    33cc:	86 01       	movw	r16, r12
    33ce:	4e ef       	ldi	r20, 0xFE	; 254
    33d0:	52 e0       	ldi	r21, 0x02	; 2
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	ce 01       	movw	r24, r28
    33d6:	0e 94 81 18 	call	0x3102	; 0x3102 <mac_set_parameter>
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    33dc:	8f ef       	ldi	r24, 0xFF	; 255
    33de:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    33e0:	df 91       	pop	r29
    33e2:	cf 91       	pop	r28
    33e4:	1f 91       	pop	r17
    33e6:	0f 91       	pop	r16
    33e8:	ef 90       	pop	r14
    33ea:	df 90       	pop	r13
    33ec:	cf 90       	pop	r12
    33ee:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

000033f0 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    33f0:	cf 92       	push	r12
    33f2:	df 92       	push	r13
    33f4:	ef 92       	push	r14
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    3400:	6b 01       	movw	r12, r22
    3402:	80 e8       	ldi	r24, 0x80	; 128
    3404:	e8 2e       	mov	r14, r24
    3406:	8e 2d       	mov	r24, r14
    3408:	b6 01       	movw	r22, r12
    340a:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
    340e:	40 97       	sbiw	r24, 0x10	; 16
    3410:	49 f4       	brne	.+18     	; 0x3424 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    3412:	2e 2d       	mov	r18, r14
    3414:	86 01       	movw	r16, r12
    3416:	4d e0       	ldi	r20, 0x0D	; 13
    3418:	53 e0       	ldi	r21, 0x03	; 3
    341a:	60 e0       	ldi	r22, 0x00	; 0
    341c:	ce 01       	movw	r24, r28
    341e:	0e 94 81 18 	call	0x3102	; 0x3102 <mac_set_parameter>
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    3424:	8f ef       	ldi	r24, 0xFF	; 255
    3426:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    3428:	df 91       	pop	r29
    342a:	cf 91       	pop	r28
    342c:	1f 91       	pop	r17
    342e:	0f 91       	pop	r16
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
    3436:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00003438 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    3438:	cf 92       	push	r12
    343a:	df 92       	push	r13
    343c:	ef 92       	push	r14
    343e:	0f 93       	push	r16
    3440:	1f 93       	push	r17
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    3448:	6b 01       	movw	r12, r22
    344a:	80 e8       	ldi	r24, 0x80	; 128
    344c:	e8 2e       	mov	r14, r24
    344e:	8e 2d       	mov	r24, r14
    3450:	b6 01       	movw	r22, r12
    3452:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
    3456:	80 97       	sbiw	r24, 0x20	; 32
    3458:	49 f4       	brne	.+18     	; 0x346c <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    345a:	2e 2d       	mov	r18, r14
    345c:	86 01       	movw	r16, r12
    345e:	4c e1       	ldi	r20, 0x1C	; 28
    3460:	53 e0       	ldi	r21, 0x03	; 3
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	ce 01       	movw	r24, r28
    3466:	0e 94 81 18 	call	0x3102	; 0x3102 <mac_set_parameter>
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    346c:	8f ef       	ldi	r24, 0xFF	; 255
    346e:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    3470:	df 91       	pop	r29
    3472:	cf 91       	pop	r28
    3474:	1f 91       	pop	r17
    3476:	0f 91       	pop	r16
    3478:	ef 90       	pop	r14
    347a:	df 90       	pop	r13
    347c:	cf 90       	pop	r12
    347e:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00003c7c <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    3c7c:	0f 93       	push	r16
    3c7e:	1f 93       	push	r17
	if(state==0){
    3c80:	61 11       	cpse	r22, r1
    3c82:	09 c0       	rjmp	.+18     	; 0x3c96 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    3c84:	0b e2       	ldi	r16, 0x2B	; 43
    3c86:	13 e0       	ldi	r17, 0x03	; 3
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	4f e2       	ldi	r20, 0x2F	; 47
    3c8c:	53 e0       	ldi	r21, 0x03	; 3
    3c8e:	60 e0       	ldi	r22, 0x00	; 0
    3c90:	0e 94 81 18 	call	0x3102	; 0x3102 <mac_set_parameter>
    3c94:	08 c0       	rjmp	.+16     	; 0x3ca6 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    3c96:	0b e3       	ldi	r16, 0x3B	; 59
    3c98:	13 e0       	ldi	r17, 0x03	; 3
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	4f e2       	ldi	r20, 0x2F	; 47
    3c9e:	53 e0       	ldi	r21, 0x03	; 3
    3ca0:	60 e0       	ldi	r22, 0x00	; 0
    3ca2:	0e 94 81 18 	call	0x3102	; 0x3102 <mac_set_parameter>
	}
}
    3ca6:	1f 91       	pop	r17
    3ca8:	0f 91       	pop	r16
    3caa:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

0000234a <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	c7 56       	subi	r28, 0x67	; 103
    235e:	d1 09       	sbc	r29, r1
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    236c:	9f ef       	ldi	r25, 0xFF	; 255
    236e:	96 0f       	add	r25, r22
    2370:	9f 3d       	cpi	r25, 0xDF	; 223
    2372:	68 f5       	brcc	.+90     	; 0x23ce <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    2374:	9f ef       	ldi	r25, 0xFF	; 255
    2376:	92 0f       	add	r25, r18
    2378:	93 33       	cpi	r25, 0x33	; 51
    237a:	60 f5       	brcc	.+88     	; 0x23d4 <mac_tx_confirmed+0x8a>
    237c:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	60 e8       	ldi	r22, 0x80	; 128
    2382:	ce 01       	movw	r24, r28
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	7c 01       	movw	r14, r24
    2388:	0e 94 a2 14 	call	0x2944	; 0x2944 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    238c:	c7 01       	movw	r24, r14
    238e:	a0 e8       	ldi	r26, 0x80	; 128
    2390:	af 93       	push	r26
    2392:	9f 93       	push	r25
    2394:	ef 92       	push	r14
    2396:	1f 92       	push	r1
    2398:	df 92       	push	r13
    239a:	8e e3       	ldi	r24, 0x3E	; 62
    239c:	93 e0       	ldi	r25, 0x03	; 3
    239e:	a0 e0       	ldi	r26, 0x00	; 0
    23a0:	af 93       	push	r26
    23a2:	9f 93       	push	r25
    23a4:	8f 93       	push	r24
    23a6:	89 e4       	ldi	r24, 0x49	; 73
    23a8:	93 e0       	ldi	r25, 0x03	; 3
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	af 93       	push	r26
    23ae:	9f 93       	push	r25
    23b0:	8f 93       	push	r24
    23b2:	1f 93       	push	r17
    23b4:	0f 93       	push	r16
    23b6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <sprintf>
    
	
    return strlen(buffer);
    23ba:	b8 01       	movw	r22, r16
    23bc:	80 e8       	ldi	r24, 0x80	; 128
    23be:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    23ce:	8f ef       	ldi	r24, 0xFF	; 255
    23d0:	9f ef       	ldi	r25, 0xFF	; 255
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    23d4:	8f ef       	ldi	r24, 0xFF	; 255
    23d6:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    23d8:	c9 59       	subi	r28, 0x99	; 153
    23da:	df 4f       	sbci	r29, 0xFF	; 255
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	df 90       	pop	r13
    23f4:	08 95       	ret

Disassembly of section .text.beginsWidth:

00003316 <beginsWidth>:
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
}

static bool beginsWidth(const char *s1, const char *s2){
    3316:	6f 92       	push	r6
    3318:	7f 92       	push	r7
    331a:	8f 92       	push	r8
    331c:	cf 92       	push	r12
    331e:	df 92       	push	r13
    3320:	ef 92       	push	r14
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	3b 01       	movw	r6, r22
    3328:	88 2e       	mov	r8, r24
    332a:	69 01       	movw	r12, r18
    332c:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    332e:	84 2f       	mov	r24, r20
    3330:	b9 01       	movw	r22, r18
    3332:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
    3336:	8c 01       	movw	r16, r24
    3338:	4e 2d       	mov	r20, r14
    333a:	96 01       	movw	r18, r12
    333c:	88 2d       	mov	r24, r8
    333e:	b3 01       	movw	r22, r6
    3340:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <strncmp>
    3344:	21 e0       	ldi	r18, 0x01	; 1
    3346:	89 2b       	or	r24, r25
    3348:	09 f0       	breq	.+2      	; 0x334c <beginsWidth+0x36>
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	82 2f       	mov	r24, r18
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	ef 90       	pop	r14
    3354:	df 90       	pop	r13
    3356:	cf 90       	pop	r12
    3358:	8f 90       	pop	r8
    335a:	7f 90       	pop	r7
    335c:	6f 90       	pop	r6
    335e:	08 95       	ret

Disassembly of section .text.decode_tx_response:

00002c78 <decode_tx_response>:
			break;
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
    2c78:	cf 92       	push	r12
    2c7a:	df 92       	push	r13
    2c7c:	ef 92       	push	r14
    2c7e:	6b 01       	movw	r12, r22
    2c80:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    2c82:	2a e8       	ldi	r18, 0x8A	; 138
    2c84:	33 e0       	ldi	r19, 0x03	; 3
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <strcmp>
    2c8c:	89 2b       	or	r24, r25
    2c8e:	e9 f0       	breq	.+58     	; 0x2cca <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2c90:	25 e9       	ldi	r18, 0x95	; 149
    2c92:	33 e0       	ldi	r19, 0x03	; 3
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	8e 2d       	mov	r24, r14
    2c98:	b6 01       	movw	r22, r12
    2c9a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <strcmp>
    2c9e:	89 2b       	or	r24, r25
    2ca0:	b1 f0       	breq	.+44     	; 0x2cce <decode_tx_response+0x56>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    2ca2:	2d e9       	ldi	r18, 0x9D	; 157
    2ca4:	33 e0       	ldi	r19, 0x03	; 3
    2ca6:	40 e0       	ldi	r20, 0x00	; 0
    2ca8:	8e 2d       	mov	r24, r14
    2caa:	b6 01       	movw	r22, r12
    2cac:	0e 94 8b 19 	call	0x3316	; 0x3316 <beginsWidth>
    2cb0:	81 11       	cpse	r24, r1
    2cb2:	0f c0       	rjmp	.+30     	; 0x2cd2 <decode_tx_response+0x5a>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
    2cb4:	24 ea       	ldi	r18, 0xA4	; 164
    2cb6:	33 e0       	ldi	r19, 0x03	; 3
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	8e 2d       	mov	r24, r14
    2cbc:	b6 01       	movw	r22, r12
    2cbe:	0e 94 8b 19 	call	0x3316	; 0x3316 <beginsWidth>
    2cc2:	88 23       	and	r24, r24
    2cc4:	41 f0       	breq	.+16     	; 0x2cd6 <decode_tx_response+0x5e>
    2cc6:	89 e0       	ldi	r24, 0x09	; 9
    2cc8:	07 c0       	rjmp	.+14     	; 0x2cd8 <decode_tx_response+0x60>
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    2cca:	87 e0       	ldi	r24, 0x07	; 7
    2ccc:	05 c0       	rjmp	.+10     	; 0x2cd8 <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2cce:	88 e0       	ldi	r24, 0x08	; 8
    2cd0:	03 c0       	rjmp	.+6      	; 0x2cd8 <decode_tx_response+0x60>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    2cd2:	83 e0       	ldi	r24, 0x03	; 3
    2cd4:	01 c0       	rjmp	.+2      	; 0x2cd8 <decode_tx_response+0x60>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
    2cd6:	86 e0       	ldi	r24, 0x06	; 6
}
    2cd8:	ef 90       	pop	r14
    2cda:	df 90       	pop	r13
    2cdc:	cf 90       	pop	r12
    2cde:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00001ca6 <SU_send_uplink>:

static SU_STATES decode_tx_response(const char msg[]);
static bool beginsWidth(const char *s1, const char *s2);


LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	28 97       	sbiw	r28, 0x08	; 8
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	d8 2e       	mov	r13, r24
    1cc6:	7b 01       	movw	r14, r22
    1cc8:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    1cca:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    1ccc:	e1 2f       	mov	r30, r17
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	ea 30       	cpi	r30, 0x0A	; 10
    1cd2:	f1 05       	cpc	r31, r1
    1cd4:	d8 f7       	brcc	.-10     	; 0x1ccc <SU_send_uplink+0x26>
    1cd6:	e5 5b       	subi	r30, 0xB5	; 181
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <__tablejump2__>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    1cde:	20 2f       	mov	r18, r16
    1ce0:	a7 01       	movw	r20, r14
    1ce2:	6d 2d       	mov	r22, r13
    1ce4:	80 e9       	ldi	r24, 0x90	; 144
    1ce6:	92 e0       	ldi	r25, 0x02	; 2
    1ce8:	0e 94 a5 11 	call	0x234a	; 0x234a <mac_tx_confirmed>
				attach_ending(lm_msg);
    1cec:	80 e9       	ldi	r24, 0x90	; 144
    1cee:	92 e0       	ldi	r25, 0x02	; 2
    1cf0:	0e 94 70 20 	call	0x40e0	; 0x40e0 <attach_ending>
				util_transmit_msg(lm_msg);
    1cf4:	80 e9       	ldi	r24, 0x90	; 144
    1cf6:	92 e0       	ldi	r25, 0x02	; 2
    1cf8:	0e 94 7e 20 	call	0x40fc	; 0x40fc <util_transmit_msg>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	62 e0       	ldi	r22, 0x02	; 2
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1d0c:	25 eb       	ldi	r18, 0xB5	; 181
    1d0e:	33 e0       	ldi	r19, 0x03	; 3
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	ce 01       	movw	r24, r28
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1d1c:	15 e0       	ldi	r17, 0x05	; 5
			break;
    1d1e:	d6 cf       	rjmp	.-84     	; 0x1ccc <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	64 e0       	ldi	r22, 0x04	; 4
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	ce 01       	movw	r24, r28
    1d2a:	01 96       	adiw	r24, 0x01	; 1
    1d2c:	0e 94 4d 22 	call	0x449a	; 0x449a <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    1d30:	28 eb       	ldi	r18, 0xB8	; 184
    1d32:	33 e0       	ldi	r19, 0x03	; 3
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	ce 01       	movw	r24, r28
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	0e 94 53 22 	call	0x44a6	; 0x44a6 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1d40:	15 e0       	ldi	r17, 0x05	; 5
			break;
    1d42:	c4 cf       	rjmp	.-120    	; 0x1ccc <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
    1d44:	60 e9       	ldi	r22, 0x90	; 144
    1d46:	72 e0       	ldi	r23, 0x02	; 2
    1d48:	80 e8       	ldi	r24, 0x80	; 128
    1d4a:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <decode_tx_response>
    1d4e:	18 2f       	mov	r17, r24
			break;
    1d50:	bd cf       	rjmp	.-134    	; 0x1ccc <SU_send_uplink+0x26>
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
			
			case SU_NO_ACK:
				return LM_STATUS_MAC_ERR;
    1d52:	85 e0       	ldi	r24, 0x05	; 5
    1d54:	18 c0       	rjmp	.+48     	; 0x1d86 <SU_send_uplink+0xe0>
				
			case SU_INV_DATA_LEN:
				return LM_STATUS_INV_DATA_LEN;
    1d56:	86 e0       	ldi	r24, 0x06	; 6
    1d58:	16 c0       	rjmp	.+44     	; 0x1d86 <SU_send_uplink+0xe0>
			
			case SU_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;	
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <SU_send_uplink+0xe0>
			
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    1d5e:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <uart0_hal_message_ready>
    1d62:	88 23       	and	r24, r24
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <SU_send_uplink+0xc2>
    1d66:	b2 cf       	rjmp	.-156    	; 0x1ccc <SU_send_uplink+0x26>
					util_read_msg(lm_msg);
    1d68:	80 e9       	ldi	r24, 0x90	; 144
    1d6a:	92 e0       	ldi	r25, 0x02	; 2
    1d6c:	0e 94 c7 22 	call	0x458e	; 0x458e <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    1d70:	60 e9       	ldi	r22, 0x90	; 144
    1d72:	72 e0       	ldi	r23, 0x02	; 2
    1d74:	ce 01       	movw	r24, r28
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <util_matchMessage>
    1d7c:	18 2f       	mov	r17, r24
    1d7e:	a6 cf       	rjmp	.-180    	; 0x1ccc <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
			break;
			
			case SU_HANDLE_DOWNLINK:
				return LM_STATUS_SUCCESS;
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <SU_send_uplink+0xe0>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
    1d84:	83 e0       	ldi	r24, 0x03	; 3
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    1d86:	28 96       	adiw	r28, 0x08	; 8
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00003236 <SC_put_to_sleep>:
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	5c e5       	ldi	r21, 0x5C	; 92
    323a:	66 e2       	ldi	r22, 0x26	; 38
    323c:	75 e0       	ldi	r23, 0x05	; 5
    323e:	80 e9       	ldi	r24, 0x90	; 144
    3240:	92 e0       	ldi	r25, 0x02	; 2
    3242:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <sys_sleep_cmd>
	attach_ending(lm_msg);
    3246:	80 e9       	ldi	r24, 0x90	; 144
    3248:	92 e0       	ldi	r25, 0x02	; 2
    324a:	0e 94 70 20 	call	0x40e0	; 0x40e0 <attach_ending>
	util_transmit_msg(lm_msg);
    324e:	80 e9       	ldi	r24, 0x90	; 144
    3250:	92 e0       	ldi	r25, 0x02	; 2
    3252:	0e 94 7e 20 	call	0x40fc	; 0x40fc <util_transmit_msg>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    3256:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <uart0_hal_message_ready>
    325a:	88 23       	and	r24, r24
    325c:	e1 f3       	breq	.-8      	; 0x3256 <SC_put_to_sleep+0x20>
	
	util_read_msg(lm_msg);
    325e:	80 e9       	ldi	r24, 0x90	; 144
    3260:	92 e0       	ldi	r25, 0x02	; 2
    3262:	0e 94 c7 22 	call	0x458e	; 0x458e <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    3266:	60 e9       	ldi	r22, 0x90	; 144
    3268:	72 e0       	ldi	r23, 0x02	; 2
    326a:	80 e8       	ldi	r24, 0x80	; 128
    326c:	2b ef       	ldi	r18, 0xFB	; 251
    326e:	33 e0       	ldi	r19, 0x03	; 3
    3270:	40 e0       	ldi	r20, 0x00	; 0
    3272:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <strcmp>
    3276:	89 2b       	or	r24, r25
    3278:	11 f4       	brne	.+4      	; 0x327e <SC_put_to_sleep+0x48>
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	08 95       	ret
	return LM_STATUS_ERROR;
    327e:	81 e0       	ldi	r24, 0x01	; 1
}
    3280:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00003b24 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    3b24:	85 e5       	ldi	r24, 0x55	; 85
    3b26:	0e 94 40 1a 	call	0x3480	; 0x3480 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    3b2a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <uart0_hal_message_ready>
    3b2e:	88 23       	and	r24, r24
    3b30:	e1 f3       	breq	.-8      	; 0x3b2a <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
    3b32:	80 e9       	ldi	r24, 0x90	; 144
    3b34:	92 e0       	ldi	r25, 0x02	; 2
    3b36:	0e 94 c7 22 	call	0x458e	; 0x458e <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    3b3a:	60 e9       	ldi	r22, 0x90	; 144
    3b3c:	72 e0       	ldi	r23, 0x02	; 2
    3b3e:	80 e8       	ldi	r24, 0x80	; 128
    3b40:	2b ef       	ldi	r18, 0xFB	; 251
    3b42:	33 e0       	ldi	r19, 0x03	; 3
    3b44:	40 e0       	ldi	r20, 0x00	; 0
    3b46:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <strcmp>
    3b4a:	89 2b       	or	r24, r25
    3b4c:	11 f4       	brne	.+4      	; 0x3b52 <SC_wake_up+0x2e>
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	08 95       	ret
	return LM_STATUS_ERROR;
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

0000449a <util_setPendingStates>:


char lm_msg[200];

void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    449a:	fc 01       	movw	r30, r24
    449c:	71 83       	std	Z+1, r23	; 0x01
    449e:	60 83       	st	Z, r22
	sd->failure_state=failed;
    44a0:	53 83       	std	Z+3, r21	; 0x03
    44a2:	42 83       	std	Z+2, r20	; 0x02
    44a4:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

000044a6 <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    44a6:	fc 01       	movw	r30, r24
    44a8:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    44aa:	25 83       	std	Z+5, r18	; 0x05
    44ac:	36 83       	std	Z+6, r19	; 0x06
    44ae:	47 83       	std	Z+7, r20	; 0x07
    44b0:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

000040fc <util_transmit_msg>:
		default:
		return sd->failure_state;
	}
}

void util_transmit_msg(char msg[]){
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    4102:	bc 01       	movw	r22, r24
    4104:	80 e8       	ldi	r24, 0x80	; 128
    4106:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
    410a:	68 2f       	mov	r22, r24
    410c:	ce 01       	movw	r24, r28
    410e:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <uart0_hal_send_message>
}
    4112:	df 91       	pop	r29
    4114:	cf 91       	pop	r28
    4116:	08 95       	ret

Disassembly of section .text.util_read_msg:

0000458e <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str(msg);
    458e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <uart0_hal_read_message_as_str>
    4592:	08 95       	ret

Disassembly of section .text.util_parse_err:

00002f14 <util_parse_err>:
}

LM_STATUS util_parse_err(char *msg){
    2f14:	cf 92       	push	r12
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    2f1a:	6c 01       	movw	r12, r24
    2f1c:	20 e8       	ldi	r18, 0x80	; 128
    2f1e:	e2 2e       	mov	r14, r18
    2f20:	22 ec       	ldi	r18, 0xC2	; 194
    2f22:	33 e0       	ldi	r19, 0x03	; 3
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	8e 2d       	mov	r24, r14
    2f28:	b6 01       	movw	r22, r12
    2f2a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <strcmp>
    2f2e:	89 2b       	or	r24, r25
    2f30:	a1 f0       	breq	.+40     	; 0x2f5a <util_parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    2f32:	2d ec       	ldi	r18, 0xCD	; 205
    2f34:	33 e0       	ldi	r19, 0x03	; 3
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	8e 2d       	mov	r24, r14
    2f3a:	b6 01       	movw	r22, r12
    2f3c:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <strcmp>
    2f40:	89 2b       	or	r24, r25
    2f42:	69 f0       	breq	.+26     	; 0x2f5e <util_parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    2f44:	24 ed       	ldi	r18, 0xD4	; 212
    2f46:	33 e0       	ldi	r19, 0x03	; 3
    2f48:	40 e0       	ldi	r20, 0x00	; 0
    2f4a:	8e 2d       	mov	r24, r14
    2f4c:	b6 01       	movw	r22, r12
    2f4e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <strcmp>
    2f52:	89 2b       	or	r24, r25
    2f54:	31 f4       	brne	.+12     	; 0x2f62 <util_parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    2f56:	84 e0       	ldi	r24, 0x04	; 4
    2f58:	05 c0       	rjmp	.+10     	; 0x2f64 <util_parse_err+0x50>
	uart0_hal_read_message_as_str(msg);
}

LM_STATUS util_parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    2f5a:	83 e0       	ldi	r24, 0x03	; 3
    2f5c:	03 c0       	rjmp	.+6      	; 0x2f64 <util_parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    2f5e:	83 e0       	ldi	r24, 0x03	; 3
    2f60:	01 c0       	rjmp	.+2      	; 0x2f64 <util_parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    2f62:	82 e0       	ldi	r24, 0x02	; 2
}
    2f64:	ef 90       	pop	r14
    2f66:	df 90       	pop	r13
    2f68:	cf 90       	pop	r12
    2f6a:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

00003598 <util_strbeginswith>:

bool util_strbeginswith(char *s1, const char *s2){
    3598:	cf 92       	push	r12
    359a:	df 92       	push	r13
    359c:	ef 92       	push	r14
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	ec 01       	movw	r28, r24
    35a8:	6a 01       	movw	r12, r20
    35aa:	e6 2e       	mov	r14, r22
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    35ac:	86 2f       	mov	r24, r22
    35ae:	ba 01       	movw	r22, r20
    35b0:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <strlen>
    35b4:	8c 01       	movw	r16, r24
    35b6:	be 01       	movw	r22, r28
    35b8:	80 e8       	ldi	r24, 0x80	; 128
    35ba:	4e 2d       	mov	r20, r14
    35bc:	96 01       	movw	r18, r12
    35be:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <strncmp>
    35c2:	21 e0       	ldi	r18, 0x01	; 1
    35c4:	89 2b       	or	r24, r25
    35c6:	09 f0       	breq	.+2      	; 0x35ca <util_strbeginswith+0x32>
    35c8:	20 e0       	ldi	r18, 0x00	; 0
}
    35ca:	82 2f       	mov	r24, r18
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	ef 90       	pop	r14
    35d6:	df 90       	pop	r13
    35d8:	cf 90       	pop	r12
    35da:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00002da4 <util_matchMessage>:
void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	ec 01       	movw	r28, r24
    2daa:	fb 01       	movw	r30, r22
	switch(sd->matchCase){
    2dac:	9c 81       	ldd	r25, Y+4	; 0x04
    2dae:	91 30       	cpi	r25, 0x01	; 1
    2db0:	91 f0       	breq	.+36     	; 0x2dd6 <util_matchMessage+0x32>
    2db2:	18 f0       	brcs	.+6      	; 0x2dba <util_matchMessage+0x16>
    2db4:	92 30       	cpi	r25, 0x02	; 2
    2db6:	e9 f0       	breq	.+58     	; 0x2df2 <util_matchMessage+0x4e>
    2db8:	1f c0       	rjmp	.+62     	; 0x2df8 <util_matchMessage+0x54>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    2dba:	2d 81       	ldd	r18, Y+5	; 0x05
    2dbc:	3e 81       	ldd	r19, Y+6	; 0x06
    2dbe:	4f 81       	ldd	r20, Y+7	; 0x07
    2dc0:	80 e8       	ldi	r24, 0x80	; 128
    2dc2:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <strcmp>
    2dc6:	89 2b       	or	r24, r25
    2dc8:	19 f4       	brne	.+6      	; 0x2dd0 <util_matchMessage+0x2c>
    2dca:	88 81       	ld	r24, Y
    2dcc:	99 81       	ldd	r25, Y+1	; 0x01
    2dce:	16 c0       	rjmp	.+44     	; 0x2dfc <util_matchMessage+0x58>
    2dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd4:	13 c0       	rjmp	.+38     	; 0x2dfc <util_matchMessage+0x58>

		case LM_BEGINS_WITH:
		return util_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    2dd6:	4d 81       	ldd	r20, Y+5	; 0x05
    2dd8:	5e 81       	ldd	r21, Y+6	; 0x06
    2dda:	6f 81       	ldd	r22, Y+7	; 0x07
    2ddc:	cf 01       	movw	r24, r30
    2dde:	0e 94 cc 1a 	call	0x3598	; 0x3598 <util_strbeginswith>
    2de2:	88 23       	and	r24, r24
    2de4:	19 f0       	breq	.+6      	; 0x2dec <util_matchMessage+0x48>
    2de6:	88 81       	ld	r24, Y
    2de8:	99 81       	ldd	r25, Y+1	; 0x01
    2dea:	08 c0       	rjmp	.+16     	; 0x2dfc <util_matchMessage+0x58>
    2dec:	8a 81       	ldd	r24, Y+2	; 0x02
    2dee:	9b 81       	ldd	r25, Y+3	; 0x03
    2df0:	05 c0       	rjmp	.+10     	; 0x2dfc <util_matchMessage+0x58>

		case LM_NO_TEST:
		return sd->success_state;
    2df2:	88 81       	ld	r24, Y
    2df4:	99 81       	ldd	r25, Y+1	; 0x01
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <util_matchMessage+0x58>
		default:
		return sd->failure_state;
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	08 95       	ret

Disassembly of section .text.get_group_id:

00004594 <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    4594:	80 91 43 0e 	lds	r24, 0x0E43	; 0x800e43 <_groupId>
    4598:	08 95       	ret

Disassembly of section .text.set_group_id:

0000459a <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    459a:	80 93 43 0e 	sts	0x0E43, r24	; 0x800e43 <_groupId>
    459e:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00003b56 <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    3b56:	0f 93       	push	r16
    3b58:	1f 93       	push	r17
    3b5a:	cf 93       	push	r28
    3b5c:	df 93       	push	r29
    3b5e:	8c 01       	movw	r16, r24
    3b60:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    3b62:	0e 94 ca 22 	call	0x4594	; 0x4594 <get_group_id>
    3b66:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    3b68:	2d 2f       	mov	r18, r29
    3b6a:	a8 01       	movw	r20, r16
    3b6c:	68 2f       	mov	r22, r24
    3b6e:	88 e5       	ldi	r24, 0x58	; 88
    3b70:	93 e0       	ldi	r25, 0x03	; 3
    3b72:	0e 94 47 08 	call	0x108e	; 0x108e <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	8c 0f       	add	r24, r28
    3b7a:	0e 94 cd 22 	call	0x459a	; 0x459a <set_group_id>
}
    3b7e:	df 91       	pop	r29
    3b80:	cf 91       	pop	r28
    3b82:	1f 91       	pop	r17
    3b84:	0f 91       	pop	r16
    3b86:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00002b9e <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    2b9e:	ef 92       	push	r14
    2ba0:	ff 92       	push	r15
    2ba2:	1f 93       	push	r17
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	2a 97       	sbiw	r28, 0x0a	; 10
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
    2bb8:	18 2f       	mov	r17, r24
    2bba:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    2bbc:	9e 01       	movw	r18, r28
    2bbe:	2f 5f       	subi	r18, 0xFF	; 255
    2bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc2:	ab 01       	movw	r20, r22
    2bc4:	68 2f       	mov	r22, r24
    2bc6:	88 e5       	ldi	r24, 0x58	; 88
    2bc8:	93 e0       	ldi	r25, 0x03	; 3
    2bca:	0e 94 5f 14 	call	0x28be	; 0x28be <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    2bce:	9e 01       	movw	r18, r28
    2bd0:	27 5f       	subi	r18, 0xF7	; 247
    2bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd4:	ae 01       	movw	r20, r28
    2bd6:	49 5f       	subi	r20, 0xF9	; 249
    2bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bda:	61 2f       	mov	r22, r17
    2bdc:	88 e5       	ldi	r24, 0x58	; 88
    2bde:	93 e0       	ldi	r25, 0x03	; 3
    2be0:	0e 94 bf 1c 	call	0x397e	; 0x397e <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    2be4:	29 85       	ldd	r18, Y+9	; 0x09
    2be6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2be8:	4f 81       	ldd	r20, Y+7	; 0x07
    2bea:	58 85       	ldd	r21, Y+8	; 0x08
    2bec:	b7 01       	movw	r22, r14
    2bee:	ce 01       	movw	r24, r28
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <mrpp_data_add_int16>
}
    2bf6:	2a 96       	adiw	r28, 0x0a	; 10
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	ff 90       	pop	r15
    2c0a:	ef 90       	pop	r14
    2c0c:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00003ecc <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    3ecc:	cf 93       	push	r28
    3ece:	df 93       	push	r29
    3ed0:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    3ed2:	88 e5       	ldi	r24, 0x58	; 88
    3ed4:	93 e0       	ldi	r25, 0x03	; 3
    3ed6:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <mrpp_state_is_body_ready>
    3eda:	88 83       	st	Y, r24
    3edc:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    3ede:	89 2f       	mov	r24, r25
    3ee0:	80 95       	com	r24
    
}
    3ee2:	88 1f       	adc	r24, r24
    3ee4:	88 27       	eor	r24, r24
    3ee6:	88 1f       	adc	r24, r24
    3ee8:	df 91       	pop	r29
    3eea:	cf 91       	pop	r28
    3eec:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

0000270c <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    270c:	af 92       	push	r10
    270e:	bf 92       	push	r11
    2710:	cf 92       	push	r12
    2712:	df 92       	push	r13
    2714:	ef 92       	push	r14
    2716:	ff 92       	push	r15
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	00 d0       	rcall	.+0      	; 0x2722 <MRPP_get_ready_body_package+0x16>
    2722:	00 d0       	rcall	.+0      	; 0x2724 <MRPP_get_ready_body_package+0x18>
    2724:	1f 92       	push	r1
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	6b 01       	movw	r12, r22
    272c:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    272e:	9e 01       	movw	r18, r28
    2730:	2b 5f       	subi	r18, 0xFB	; 251
    2732:	3f 4f       	sbci	r19, 0xFF	; 255
    2734:	79 01       	movw	r14, r18
    2736:	8e 01       	movw	r16, r28
    2738:	0d 5f       	subi	r16, 0xFD	; 253
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	23 50       	subi	r18, 0x03	; 3
    273e:	31 09       	sbc	r19, r1
    2740:	ae 01       	movw	r20, r28
    2742:	4f 5f       	subi	r20, 0xFF	; 255
    2744:	5f 4f       	sbci	r21, 0xFF	; 255
    2746:	bc 01       	movw	r22, r24
    2748:	88 e5       	ldi	r24, 0x58	; 88
    274a:	93 e0       	ldi	r25, 0x03	; 3
    274c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <mrpp_state_get_ready_body>
    
    if(!res) return false;
    2750:	88 23       	and	r24, r24
    2752:	b1 f0       	breq	.+44     	; 0x2780 <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    2754:	4d 81       	ldd	r20, Y+5	; 0x05
    2756:	83 e0       	ldi	r24, 0x03	; 3
    2758:	84 0f       	add	r24, r20
    275a:	f5 01       	movw	r30, r10
    275c:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    275e:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <state>
    2762:	f6 01       	movw	r30, r12
    2764:	80 83       	st	Z, r24
    package[1]=subId;
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	6b 81       	ldd	r22, Y+3	; 0x03
    2772:	7c 81       	ldd	r23, Y+4	; 0x04
    2774:	c6 01       	movw	r24, r12
    2776:	03 96       	adiw	r24, 0x03	; 3
    2778:	0e 94 56 1e 	call	0x3cac	; 0x3cac <mrpp_data_get>

    return true;
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    2780:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	ff 90       	pop	r15
    2796:	ef 90       	pop	r14
    2798:	df 90       	pop	r13
    279a:	cf 90       	pop	r12
    279c:	bf 90       	pop	r11
    279e:	af 90       	pop	r10
    27a0:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

000044b2 <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    44b2:	bc 01       	movw	r22, r24
    44b4:	88 e5       	ldi	r24, 0x58	; 88
    44b6:	93 e0       	ldi	r25, 0x03	; 3
    44b8:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <mrpp_state_set_body_sent>
    44bc:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00003eee <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    3eee:	cf 93       	push	r28
    3ef0:	df 93       	push	r29
    3ef2:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3ef4:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    3ef8:	fc 01       	movw	r30, r24
    3efa:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    3efc:	bf 01       	movw	r22, r30
    3efe:	88 e5       	ldi	r24, 0x58	; 88
    3f00:	93 e0       	ldi	r25, 0x03	; 3
    3f02:	0e 94 4d 12 	call	0x249a	; 0x249a <mrpp_state_get_header>
    *package_length+=1;
    3f06:	8f 5f       	subi	r24, 0xFF	; 255
    3f08:	88 83       	st	Y, r24
}
    3f0a:	df 91       	pop	r29
    3f0c:	cf 91       	pop	r28
    3f0e:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00003f10 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
    3f14:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3f16:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    3f1e:	bf 01       	movw	r22, r30
    3f20:	88 e5       	ldi	r24, 0x58	; 88
    3f22:	93 e0       	ldi	r25, 0x03	; 3
    3f24:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <mrpp_state_get_tail>
    *package_length+=1;
    3f28:	8f 5f       	subi	r24, 0xFF	; 255
    3f2a:	88 83       	st	Y, r24
}
    3f2c:	df 91       	pop	r29
    3f2e:	cf 91       	pop	r28
    3f30:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00004500 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    4500:	88 e5       	ldi	r24, 0x58	; 88
    4502:	93 e0       	ldi	r25, 0x03	; 3
    4504:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <mrpp_state_all_bodies_sent>
}
    4508:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

000027a2 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    27a2:	cf 92       	push	r12
    27a4:	df 92       	push	r13
    27a6:	ff 92       	push	r15
    27a8:	0f 93       	push	r16
    27aa:	1f 93       	push	r17
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    27b2:	94 2f       	mov	r25, r20
    27b4:	0c c0       	rjmp	.+24     	; 0x27ce <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    27b6:	c9 2f       	mov	r28, r25
    27b8:	d0 e0       	ldi	r29, 0x00	; 0
    27ba:	e4 1b       	sub	r30, r20
    27bc:	f5 0b       	sbc	r31, r21
    27be:	ea 0f       	add	r30, r26
    27c0:	fb 1f       	adc	r31, r27
    27c2:	80 81       	ld	r24, Z
    27c4:	fe 01       	movw	r30, r28
    27c6:	ee 50       	subi	r30, 0x0E	; 14
    27c8:	fc 4f       	sbci	r31, 0xFC	; 252
    27ca:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    27cc:	9f 5f       	subi	r25, 0xFF	; 255
    27ce:	e9 2f       	mov	r30, r25
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	6a 01       	movw	r12, r20
    27d4:	86 e0       	ldi	r24, 0x06	; 6
    27d6:	c8 0e       	add	r12, r24
    27d8:	d1 1c       	adc	r13, r1
    27da:	ec 15       	cp	r30, r12
    27dc:	fd 05       	cpc	r31, r13
    27de:	58 f3       	brcs	.-42     	; 0x27b6 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    27e0:	26 50       	subi	r18, 0x06	; 6
    27e2:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    27e4:	36 95       	lsr	r19
    27e6:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    27e8:	49 5f       	subi	r20, 0xF9	; 249
    27ea:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    27ec:	a0 e0       	ldi	r26, 0x00	; 0
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	16 c0       	rjmp	.+44     	; 0x281e <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    27f2:	cd 01       	movw	r24, r26
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	f6 01       	movw	r30, r12
    27fa:	e8 0f       	add	r30, r24
    27fc:	f9 1f       	adc	r31, r25
    27fe:	8b 01       	movw	r16, r22
    2800:	08 0f       	add	r16, r24
    2802:	19 1f       	adc	r17, r25
    2804:	e8 01       	movw	r28, r16
    2806:	f9 80       	ldd	r15, Y+1	; 0x01
    2808:	ee 50       	subi	r30, 0x0E	; 14
    280a:	fc 4f       	sbci	r31, 0xFC	; 252
    280c:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    280e:	84 0f       	add	r24, r20
    2810:	95 1f       	adc	r25, r21
    2812:	18 81       	ld	r17, Y
    2814:	fc 01       	movw	r30, r24
    2816:	ee 50       	subi	r30, 0x0E	; 14
    2818:	fc 4f       	sbci	r31, 0xFC	; 252
    281a:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    281c:	11 96       	adiw	r26, 0x01	; 1
    281e:	a2 17       	cp	r26, r18
    2820:	b3 07       	cpc	r27, r19
    2822:	38 f3       	brcs	.-50     	; 0x27f2 <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	df 90       	pop	r13
    2830:	cf 90       	pop	r12
    2832:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00003cac <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    3cac:	cf 93       	push	r28
    3cae:	df 93       	push	r29
    3cb0:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	0c c0       	rjmp	.+24     	; 0x3cd0 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    3cb8:	de 01       	movw	r26, r28
    3cba:	a2 0f       	add	r26, r18
    3cbc:	b3 1f       	adc	r27, r19
    3cbe:	f9 01       	movw	r30, r18
    3cc0:	e6 0f       	add	r30, r22
    3cc2:	f7 1f       	adc	r31, r23
    3cc4:	ee 50       	subi	r30, 0x0E	; 14
    3cc6:	fc 4f       	sbci	r31, 0xFC	; 252
    3cc8:	90 81       	ld	r25, Z
    3cca:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    3ccc:	2f 5f       	subi	r18, 0xFF	; 255
    3cce:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd0:	24 17       	cp	r18, r20
    3cd2:	35 07       	cpc	r19, r21
    3cd4:	88 f3       	brcs	.-30     	; 0x3cb8 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    3cd6:	df 91       	pop	r29
    3cd8:	cf 91       	pop	r28
    3cda:	08 95       	ret

Disassembly of section .text.add_data_types:

00001e80 <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	dc 01       	movw	r26, r24
    1e92:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    1e98:	c1 2c       	mov	r12, r1
    1e9a:	d1 2c       	mov	r13, r1
    1e9c:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1e9e:	4a c0       	rjmp	.+148    	; 0x1f34 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    1ea0:	29 2f       	mov	r18, r25
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	22 0f       	add	r18, r18
    1eac:	33 1f       	adc	r19, r19
    1eae:	22 0f       	add	r18, r18
    1eb0:	33 1f       	adc	r19, r19
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	e2 0f       	add	r30, r18
    1eb8:	f3 1f       	adc	r31, r19
    1eba:	ea 0f       	add	r30, r26
    1ebc:	fb 1f       	adc	r31, r27
    1ebe:	27 81       	ldd	r18, Z+7	; 0x07
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	a9 f0       	breq	.+42     	; 0x1eee <add_data_types+0x6e>
    1ec4:	24 30       	cpi	r18, 0x04	; 4
    1ec6:	21 f1       	breq	.+72     	; 0x1f10 <add_data_types+0x90>
    1ec8:	21 30       	cpi	r18, 0x01	; 1
    1eca:	91 f5       	brne	.+100    	; 0x1f30 <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    1ecc:	01 e0       	ldi	r16, 0x01	; 1
    1ece:	10 e0       	ldi	r17, 0x00	; 0
    1ed0:	04 2e       	mov	r0, r20
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <add_data_types+0x58>
    1ed4:	00 0f       	add	r16, r16
    1ed6:	11 1f       	adc	r17, r17
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <add_data_types+0x54>
    1edc:	01 2e       	mov	r0, r17
    1ede:	00 0c       	add	r0, r0
    1ee0:	22 0b       	sbc	r18, r18
    1ee2:	33 0b       	sbc	r19, r19
    1ee4:	c0 2a       	or	r12, r16
    1ee6:	d1 2a       	or	r13, r17
    1ee8:	e2 2a       	or	r14, r18
    1eea:	f3 2a       	or	r15, r19
                break;
    1eec:	21 c0       	rjmp	.+66     	; 0x1f30 <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    1eee:	02 e0       	ldi	r16, 0x02	; 2
    1ef0:	10 e0       	ldi	r17, 0x00	; 0
    1ef2:	04 2e       	mov	r0, r20
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <add_data_types+0x7a>
    1ef6:	00 0f       	add	r16, r16
    1ef8:	11 1f       	adc	r17, r17
    1efa:	0a 94       	dec	r0
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <add_data_types+0x76>
    1efe:	01 2e       	mov	r0, r17
    1f00:	00 0c       	add	r0, r0
    1f02:	22 0b       	sbc	r18, r18
    1f04:	33 0b       	sbc	r19, r19
    1f06:	c0 2a       	or	r12, r16
    1f08:	d1 2a       	or	r13, r17
    1f0a:	e2 2a       	or	r14, r18
    1f0c:	f3 2a       	or	r15, r19
                break;
    1f0e:	10 c0       	rjmp	.+32     	; 0x1f30 <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    1f10:	03 e0       	ldi	r16, 0x03	; 3
    1f12:	10 e0       	ldi	r17, 0x00	; 0
    1f14:	04 2e       	mov	r0, r20
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <add_data_types+0x9c>
    1f18:	00 0f       	add	r16, r16
    1f1a:	11 1f       	adc	r17, r17
    1f1c:	0a 94       	dec	r0
    1f1e:	e2 f7       	brpl	.-8      	; 0x1f18 <add_data_types+0x98>
    1f20:	01 2e       	mov	r0, r17
    1f22:	00 0c       	add	r0, r0
    1f24:	22 0b       	sbc	r18, r18
    1f26:	33 0b       	sbc	r19, r19
    1f28:	c0 2a       	or	r12, r16
    1f2a:	d1 2a       	or	r13, r17
    1f2c:	e2 2a       	or	r14, r18
    1f2e:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    1f30:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1f32:	9f 5f       	subi	r25, 0xFF	; 255
    1f34:	12 96       	adiw	r26, 0x02	; 2
    1f36:	8c 91       	ld	r24, X
    1f38:	12 97       	sbiw	r26, 0x02	; 2
    1f3a:	98 17       	cp	r25, r24
    1f3c:	08 f4       	brcc	.+2      	; 0x1f40 <add_data_types+0xc0>
    1f3e:	b0 cf       	rjmp	.-160    	; 0x1ea0 <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    1f40:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    1f42:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    1f44:	cd 82       	std	Y+5, r12	; 0x05
} 
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	0f 91       	pop	r16
    1f4e:	ff 90       	pop	r15
    1f50:	ef 90       	pop	r14
    1f52:	df 90       	pop	r13
    1f54:	cf 90       	pop	r12
    1f56:	08 95       	ret

Disassembly of section .text.update_bodies:

000013fc <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    13fc:	cf 93       	push	r28
    13fe:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    1400:	26 2f       	mov	r18, r22
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	c9 01       	movw	r24, r18
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	f9 01       	movw	r30, r18
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	22 0f       	add	r18, r18
    1418:	33 1f       	adc	r19, r19
    141a:	e2 0f       	add	r30, r18
    141c:	f3 1f       	adc	r31, r19
    141e:	ea 0f       	add	r30, r26
    1420:	fb 1f       	adc	r31, r27
    1422:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    1424:	c0 e0       	ldi	r28, 0x00	; 0
    1426:	25 c0       	rjmp	.+74     	; 0x1472 <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    1428:	82 17       	cp	r24, r18
    142a:	93 07       	cpc	r25, r19
    142c:	09 f1       	breq	.+66     	; 0x1470 <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    142e:	a9 01       	movw	r20, r18
    1430:	44 0f       	add	r20, r20
    1432:	55 1f       	adc	r21, r21
    1434:	44 0f       	add	r20, r20
    1436:	55 1f       	adc	r21, r21
    1438:	44 0f       	add	r20, r20
    143a:	55 1f       	adc	r21, r21
    143c:	f9 01       	movw	r30, r18
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	e4 0f       	add	r30, r20
    1444:	f5 1f       	adc	r31, r21
    1446:	ea 0f       	add	r30, r26
    1448:	fb 1f       	adc	r31, r27
    144a:	43 85       	ldd	r20, Z+11	; 0x0b
    144c:	74 13       	cpse	r23, r20
    144e:	10 c0       	rjmp	.+32     	; 0x1470 <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    1450:	f9 01       	movw	r30, r18
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	22 0f       	add	r18, r18
    145c:	33 1f       	adc	r19, r19
    145e:	22 0f       	add	r18, r18
    1460:	33 1f       	adc	r19, r19
    1462:	e2 0f       	add	r30, r18
    1464:	f3 1f       	adc	r31, r19
    1466:	ea 0f       	add	r30, r26
    1468:	fb 1f       	adc	r31, r27
    146a:	24 85       	ldd	r18, Z+12	; 0x0c
    146c:	23 30       	cpi	r18, 0x03	; 3
    146e:	41 f4       	brne	.+16     	; 0x1480 <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    1470:	cf 5f       	subi	r28, 0xFF	; 255
    1472:	2c 2f       	mov	r18, r28
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	28 17       	cp	r18, r24
    1478:	39 07       	cpc	r19, r25
    147a:	b4 f2       	brlt	.-84     	; 0x1428 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    147c:	21 e0       	ldi	r18, 0x01	; 1
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    1480:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    1482:	22 23       	and	r18, r18
    1484:	39 f0       	breq	.+14     	; 0x1494 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    1486:	fd 01       	movw	r30, r26
    1488:	e7 0f       	add	r30, r23
    148a:	f1 1d       	adc	r31, r1
    148c:	e4 58       	subi	r30, 0x84	; 132
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	21 e0       	ldi	r18, 0x01	; 1
    1492:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    1494:	9c 01       	movw	r18, r24
    1496:	22 0f       	add	r18, r18
    1498:	33 1f       	adc	r19, r19
    149a:	22 0f       	add	r18, r18
    149c:	33 1f       	adc	r19, r19
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	fc 01       	movw	r30, r24
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	e2 0f       	add	r30, r18
    14aa:	f3 1f       	adc	r31, r19
    14ac:	ea 0f       	add	r30, r26
    14ae:	fb 1f       	adc	r31, r27
    14b0:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    14b2:	29 c0       	rjmp	.+82     	; 0x1506 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
    14b4:	46 2f       	mov	r20, r22
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	84 17       	cp	r24, r20
    14ba:	95 07       	cpc	r25, r21
    14bc:	19 f1       	breq	.+70     	; 0x1504 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    14be:	9a 01       	movw	r18, r20
    14c0:	2f 5f       	subi	r18, 0xFF	; 255
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	f9 01       	movw	r30, r18
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	22 0f       	add	r18, r18
    14cc:	33 1f       	adc	r19, r19
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	e2 0f       	add	r30, r18
    14d8:	f3 1f       	adc	r31, r19
    14da:	ea 0f       	add	r30, r26
    14dc:	fb 1f       	adc	r31, r27
    14de:	20 81       	ld	r18, Z
    14e0:	c2 13       	cpse	r28, r18
    14e2:	10 c0       	rjmp	.+32     	; 0x1504 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    14e4:	fa 01       	movw	r30, r20
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	44 0f       	add	r20, r20
    14ec:	55 1f       	adc	r21, r21
    14ee:	44 0f       	add	r20, r20
    14f0:	55 1f       	adc	r21, r21
    14f2:	44 0f       	add	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	e4 0f       	add	r30, r20
    14f8:	f5 1f       	adc	r31, r21
    14fa:	ea 0f       	add	r30, r26
    14fc:	fb 1f       	adc	r31, r27
    14fe:	24 85       	ldd	r18, Z+12	; 0x0c
    1500:	23 30       	cpi	r18, 0x03	; 3
    1502:	41 f4       	brne	.+16     	; 0x1514 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    1504:	6f 5f       	subi	r22, 0xFF	; 255
    1506:	12 96       	adiw	r26, 0x02	; 2
    1508:	2c 91       	ld	r18, X
    150a:	12 97       	sbiw	r26, 0x02	; 2
    150c:	62 17       	cp	r22, r18
    150e:	90 f2       	brcs	.-92     	; 0x14b4 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    1514:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    1516:	88 23       	and	r24, r24
    1518:	41 f0       	breq	.+16     	; 0x152a <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    151a:	fd 01       	movw	r30, r26
    151c:	ec 0f       	add	r30, r28
    151e:	f1 1d       	adc	r31, r1
    1520:	e4 58       	subi	r30, 0x84	; 132
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 83       	st	Z, r24
    1528:	06 c0       	rjmp	.+12     	; 0x1536 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    152a:	fd 01       	movw	r30, r26
    152c:	ec 0f       	add	r30, r28
    152e:	f1 1d       	adc	r31, r1
    1530:	e4 58       	subi	r30, 0x84	; 132
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    1536:	8c 2f       	mov	r24, r28
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	87 1b       	sub	r24, r23
    153c:	91 09       	sbc	r25, r1
    153e:	02 97       	sbiw	r24, 0x02	; 2
    1540:	64 f0       	brlt	.+24     	; 0x155a <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    1542:	7f 5f       	subi	r23, 0xFF	; 255
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    1546:	fd 01       	movw	r30, r26
    1548:	e7 0f       	add	r30, r23
    154a:	f1 1d       	adc	r31, r1
    154c:	e4 58       	subi	r30, 0x84	; 132
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    1554:	7f 5f       	subi	r23, 0xFF	; 255
    1556:	7c 17       	cp	r23, r28
    1558:	b0 f3       	brcs	.-20     	; 0x1546 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

0000108e <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    108e:	af 92       	push	r10
    1090:	bf 92       	push	r11
    1092:	cf 92       	push	r12
    1094:	df 92       	push	r13
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	ec 01       	movw	r28, r24
    10a4:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
    10a6:	68 83       	st	Y, r22
    state->nCollections=nCollections;
    10a8:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    10aa:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    10ac:	00 e0       	ldi	r16, 0x00	; 0
    10ae:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    10b0:	8f c0       	rjmp	.+286    	; 0x11d0 <__stack+0xd1>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    10b2:	ed 2d       	mov	r30, r13
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	cf 01       	movw	r24, r30
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	8e 0f       	add	r24, r30
    10c2:	9f 1f       	adc	r25, r31
    10c4:	84 0f       	add	r24, r20
    10c6:	95 1f       	adc	r25, r21
    10c8:	dc 01       	movw	r26, r24
    10ca:	12 96       	adiw	r26, 0x02	; 2
    10cc:	6d 91       	ld	r22, X+
    10ce:	7c 91       	ld	r23, X
    10d0:	13 97       	sbiw	r26, 0x03	; 3
    10d2:	df 01       	movw	r26, r30
    10d4:	aa 0f       	add	r26, r26
    10d6:	bb 1f       	adc	r27, r27
    10d8:	9f 01       	movw	r18, r30
    10da:	22 0f       	add	r18, r18
    10dc:	33 1f       	adc	r19, r19
    10de:	22 0f       	add	r18, r18
    10e0:	33 1f       	adc	r19, r19
    10e2:	22 0f       	add	r18, r18
    10e4:	33 1f       	adc	r19, r19
    10e6:	a2 0f       	add	r26, r18
    10e8:	b3 1f       	adc	r27, r19
    10ea:	5d 01       	movw	r10, r26
    10ec:	ac 0e       	add	r10, r28
    10ee:	bd 1e       	adc	r11, r29
    10f0:	d5 01       	movw	r26, r10
    10f2:	19 96       	adiw	r26, 0x09	; 9
    10f4:	7c 93       	st	X, r23
    10f6:	6e 93       	st	-X, r22
    10f8:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
    10fa:	dc 01       	movw	r26, r24
    10fc:	14 96       	adiw	r26, 0x04	; 4
    10fe:	2c 91       	ld	r18, X
    1100:	d5 01       	movw	r26, r10
    1102:	17 96       	adiw	r26, 0x07	; 7
    1104:	2c 93       	st	X, r18
    1106:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    1108:	14 96       	adiw	r26, 0x04	; 4
    110a:	1c 93       	st	X, r17
    110c:	0e 93       	st	-X, r16
    110e:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    1110:	dc 01       	movw	r26, r24
    1112:	2d 91       	ld	r18, X+
    1114:	3c 91       	ld	r19, X
    1116:	11 97       	sbiw	r26, 0x01	; 1
    1118:	14 96       	adiw	r26, 0x04	; 4
    111a:	8c 91       	ld	r24, X
    111c:	82 9f       	mul	r24, r18
    111e:	70 01       	movw	r14, r0
    1120:	83 9f       	mul	r24, r19
    1122:	f0 0c       	add	r15, r0
    1124:	11 24       	eor	r1, r1
    1126:	b6 e0       	ldi	r27, 0x06	; 6
    1128:	eb 0e       	add	r14, r27
    112a:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    112c:	d5 01       	movw	r26, r10
    112e:	16 96       	adiw	r26, 0x06	; 6
    1130:	fc 92       	st	X, r15
    1132:	ee 92       	st	-X, r14
    1134:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    1136:	98 01       	movw	r18, r16
    1138:	ab ea       	ldi	r26, 0xAB	; 171
    113a:	ba ea       	ldi	r27, 0xAA	; 170
    113c:	0e 94 36 20 	call	0x406c	; 0x406c <__umulhisi3>
    1140:	96 95       	lsr	r25
    1142:	87 95       	ror	r24
    1144:	92 95       	swap	r25
    1146:	82 95       	swap	r24
    1148:	8f 70       	andi	r24, 0x0F	; 15
    114a:	89 27       	eor	r24, r25
    114c:	9f 70       	andi	r25, 0x0F	; 15
    114e:	89 27       	eor	r24, r25
    1150:	9f 01       	movw	r18, r30
    1152:	2f 5f       	subi	r18, 0xFF	; 255
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	d9 01       	movw	r26, r18
    1158:	aa 0f       	add	r26, r26
    115a:	bb 1f       	adc	r27, r27
    115c:	22 0f       	add	r18, r18
    115e:	33 1f       	adc	r19, r19
    1160:	22 0f       	add	r18, r18
    1162:	33 1f       	adc	r19, r19
    1164:	22 0f       	add	r18, r18
    1166:	33 1f       	adc	r19, r19
    1168:	a2 0f       	add	r26, r18
    116a:	b3 1f       	adc	r27, r19
    116c:	ac 0f       	add	r26, r28
    116e:	bd 1f       	adc	r27, r29
    1170:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
    1172:	0e 0d       	add	r16, r14
    1174:	1f 1d       	adc	r17, r15
    1176:	98 01       	movw	r18, r16
    1178:	ab ea       	ldi	r26, 0xAB	; 171
    117a:	ba ea       	ldi	r27, 0xAA	; 170
    117c:	0e 94 36 20 	call	0x406c	; 0x406c <__umulhisi3>
    1180:	7c 01       	movw	r14, r24
    1182:	f6 94       	lsr	r15
    1184:	e7 94       	ror	r14
    1186:	f6 94       	lsr	r15
    1188:	e7 94       	ror	r14
    118a:	f6 94       	lsr	r15
    118c:	e7 94       	ror	r14
    118e:	f6 94       	lsr	r15
    1190:	e7 94       	ror	r14
    1192:	f6 94       	lsr	r15
    1194:	e7 94       	ror	r14
    1196:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
    1198:	20 e3       	ldi	r18, 0x30	; 48
    119a:	2e 9d       	mul	r18, r14
    119c:	c0 01       	movw	r24, r0
    119e:	2f 9d       	mul	r18, r15
    11a0:	90 0d       	add	r25, r0
    11a2:	11 24       	eor	r1, r1
    11a4:	08 17       	cp	r16, r24
    11a6:	19 07       	cpc	r17, r25
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <__stack+0xb1>
    11aa:	bb 24       	eor	r11, r11
    11ac:	ba 94       	dec	r11
    11ae:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
    11b0:	cf 01       	movw	r24, r30
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	e8 0f       	add	r30, r24
    11c4:	f9 1f       	adc	r31, r25
    11c6:	ec 0f       	add	r30, r28
    11c8:	fd 1f       	adc	r31, r29
    11ca:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    11cc:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    11ce:	d3 94       	inc	r13
    11d0:	dc 14       	cp	r13, r12
    11d2:	08 f4       	brcc	.+2      	; 0x11d6 <__stack+0xd7>
    11d4:	6e cf       	rjmp	.-292    	; 0x10b2 <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    11d6:	98 01       	movw	r18, r16
    11d8:	ab ea       	ldi	r26, 0xAB	; 171
    11da:	ba ea       	ldi	r27, 0xAA	; 170
    11dc:	0e 94 36 20 	call	0x406c	; 0x406c <__umulhisi3>
    11e0:	fc 01       	movw	r30, r24
    11e2:	f6 95       	lsr	r31
    11e4:	e7 95       	ror	r30
    11e6:	f2 95       	swap	r31
    11e8:	e2 95       	swap	r30
    11ea:	ef 70       	andi	r30, 0x0F	; 15
    11ec:	ef 27       	eor	r30, r31
    11ee:	ff 70       	andi	r31, 0x0F	; 15
    11f0:	ef 27       	eor	r30, r31
    11f2:	4e 2f       	mov	r20, r30
    11f4:	52 e0       	ldi	r21, 0x02	; 2
    11f6:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
    11f8:	20 e3       	ldi	r18, 0x30	; 48
    11fa:	2e 9f       	mul	r18, r30
    11fc:	c0 01       	movw	r24, r0
    11fe:	2f 9f       	mul	r18, r31
    1200:	90 0d       	add	r25, r0
    1202:	11 24       	eor	r1, r1
    1204:	08 1b       	sub	r16, r24
    1206:	19 0b       	sbc	r17, r25
    1208:	11 f4       	brne	.+4      	; 0x120e <__stack+0x10f>
    120a:	51 e0       	ldi	r21, 0x01	; 1
    120c:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
    120e:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    1210:	01 2b       	or	r16, r17
    1212:	11 f0       	breq	.+4      	; 0x1218 <__stack+0x119>
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
    1218:	fe 01       	movw	r30, r28
    121a:	e5 58       	subi	r30, 0x85	; 133
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <__stack+0x133>
    {
        state->bodies[i]=WAITING;
    1224:	fe 01       	movw	r30, r28
    1226:	e8 0f       	add	r30, r24
    1228:	f1 1d       	adc	r31, r1
    122a:	e4 58       	subi	r30, 0x84	; 132
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    1230:	8f 5f       	subi	r24, 0xFF	; 255
    1232:	84 17       	cp	r24, r20
    1234:	b8 f3       	brcs	.-18     	; 0x1224 <__stack+0x125>
    {
        state->bodies[i]=WAITING;
    }
}
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	bf 90       	pop	r11
    1248:	af 90       	pop	r10
    124a:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

0000249a <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	8c 01       	movw	r16, r24
    24a4:	eb 01       	movw	r28, r22
    package[0]=0;
    24a6:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    24a8:	fc 01       	movw	r30, r24
    24aa:	81 81       	ldd	r24, Z+1	; 0x01
    24ac:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    24ae:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    24b0:	c8 01       	movw	r24, r16
    24b2:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	35 c0       	rjmp	.+106    	; 0x2524 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    24ba:	82 2f       	mov	r24, r18
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	dc 01       	movw	r26, r24
    24c0:	aa 0f       	add	r26, r26
    24c2:	bb 1f       	adc	r27, r27
    24c4:	aa 0f       	add	r26, r26
    24c6:	bb 1f       	adc	r27, r27
    24c8:	ad 01       	movw	r20, r26
    24ca:	4a 5f       	subi	r20, 0xFA	; 250
    24cc:	5f 4f       	sbci	r21, 0xFF	; 255
    24ce:	4c 0f       	add	r20, r28
    24d0:	5d 1f       	adc	r21, r29
    24d2:	fc 01       	movw	r30, r24
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	e8 0f       	add	r30, r24
    24e6:	f9 1f       	adc	r31, r25
    24e8:	bf 01       	movw	r22, r30
    24ea:	60 0f       	add	r22, r16
    24ec:	71 1f       	adc	r23, r17
    24ee:	fb 01       	movw	r30, r22
    24f0:	84 81       	ldd	r24, Z+4	; 0x04
    24f2:	fa 01       	movw	r30, r20
    24f4:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    24f6:	cd 01       	movw	r24, r26
    24f8:	07 96       	adiw	r24, 0x07	; 7
    24fa:	8c 0f       	add	r24, r28
    24fc:	9d 1f       	adc	r25, r29
    24fe:	fb 01       	movw	r30, r22
    2500:	33 81       	ldd	r19, Z+3	; 0x03
    2502:	fc 01       	movw	r30, r24
    2504:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    2506:	cd 01       	movw	r24, r26
    2508:	08 96       	adiw	r24, 0x08	; 8
    250a:	8c 0f       	add	r24, r28
    250c:	9d 1f       	adc	r25, r29
    250e:	fb 01       	movw	r30, r22
    2510:	36 81       	ldd	r19, Z+6	; 0x06
    2512:	fc 01       	movw	r30, r24
    2514:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    2516:	19 96       	adiw	r26, 0x09	; 9
    2518:	ac 0f       	add	r26, r28
    251a:	bd 1f       	adc	r27, r29
    251c:	fb 01       	movw	r30, r22
    251e:	85 81       	ldd	r24, Z+5	; 0x05
    2520:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    2522:	2f 5f       	subi	r18, 0xFF	; 255
    2524:	f8 01       	movw	r30, r16
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	28 17       	cp	r18, r24
    252a:	38 f2       	brcs	.-114    	; 0x24ba <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    252c:	88 0f       	add	r24, r24
    252e:	88 0f       	add	r24, r24
}
    2530:	8a 5f       	subi	r24, 0xFA	; 250
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	1f 91       	pop	r17
    2538:	0f 91       	pop	r16
    253a:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

000023f6 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	8c 01       	movw	r16, r24
    2400:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    2402:	fc 01       	movw	r30, r24
    2404:	81 81       	ldd	r24, Z+1	; 0x01
    2406:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    2408:	81 81       	ldd	r24, Z+1	; 0x01
    240a:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    240c:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    240e:	c8 01       	movw	r24, r16
    2410:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	35 c0       	rjmp	.+106    	; 0x2482 <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    2418:	82 2f       	mov	r24, r18
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	dc 01       	movw	r26, r24
    241e:	aa 0f       	add	r26, r26
    2420:	bb 1f       	adc	r27, r27
    2422:	aa 0f       	add	r26, r26
    2424:	bb 1f       	adc	r27, r27
    2426:	ad 01       	movw	r20, r26
    2428:	4a 5f       	subi	r20, 0xFA	; 250
    242a:	5f 4f       	sbci	r21, 0xFF	; 255
    242c:	4c 0f       	add	r20, r28
    242e:	5d 1f       	adc	r21, r29
    2430:	fc 01       	movw	r30, r24
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	e8 0f       	add	r30, r24
    2444:	f9 1f       	adc	r31, r25
    2446:	bf 01       	movw	r22, r30
    2448:	60 0f       	add	r22, r16
    244a:	71 1f       	adc	r23, r17
    244c:	fb 01       	movw	r30, r22
    244e:	84 81       	ldd	r24, Z+4	; 0x04
    2450:	fa 01       	movw	r30, r20
    2452:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    2454:	cd 01       	movw	r24, r26
    2456:	07 96       	adiw	r24, 0x07	; 7
    2458:	8c 0f       	add	r24, r28
    245a:	9d 1f       	adc	r25, r29
    245c:	fb 01       	movw	r30, r22
    245e:	33 81       	ldd	r19, Z+3	; 0x03
    2460:	fc 01       	movw	r30, r24
    2462:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    2464:	cd 01       	movw	r24, r26
    2466:	08 96       	adiw	r24, 0x08	; 8
    2468:	8c 0f       	add	r24, r28
    246a:	9d 1f       	adc	r25, r29
    246c:	fb 01       	movw	r30, r22
    246e:	36 81       	ldd	r19, Z+6	; 0x06
    2470:	fc 01       	movw	r30, r24
    2472:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    2474:	19 96       	adiw	r26, 0x09	; 9
    2476:	ac 0f       	add	r26, r28
    2478:	bd 1f       	adc	r27, r29
    247a:	fb 01       	movw	r30, r22
    247c:	85 81       	ldd	r24, Z+5	; 0x05
    247e:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    2480:	2f 5f       	subi	r18, 0xFF	; 255
    2482:	f8 01       	movw	r30, r16
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	28 17       	cp	r18, r24
    2488:	38 f2       	brcs	.-114    	; 0x2418 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    248a:	88 0f       	add	r24, r24
    248c:	88 0f       	add	r24, r24
}
    248e:	8a 5f       	subi	r24, 0xFA	; 250
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

000028be <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    28c8:	a6 2f       	mov	r26, r22
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	11 97       	sbiw	r26, 0x01	; 1
    28ce:	fd 01       	movw	r30, r26
    28d0:	ee 0f       	add	r30, r30
    28d2:	ff 1f       	adc	r31, r31
    28d4:	cd 01       	movw	r24, r26
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	e8 0f       	add	r30, r24
    28e4:	f9 1f       	adc	r31, r25
    28e6:	e0 0f       	add	r30, r16
    28e8:	f1 1f       	adc	r31, r17
    28ea:	83 e0       	ldi	r24, 0x03	; 3
    28ec:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0a c0       	rjmp	.+20     	; 0x2906 <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    28f2:	e9 2f       	mov	r30, r25
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	e9 01       	movw	r28, r18
    28f8:	ce 0f       	add	r28, r30
    28fa:	df 1f       	adc	r29, r31
    28fc:	e4 0f       	add	r30, r20
    28fe:	f5 1f       	adc	r31, r21
    2900:	80 81       	ld	r24, Z
    2902:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    2904:	9f 5f       	subi	r25, 0xFF	; 255
    2906:	94 30       	cpi	r25, 0x04	; 4
    2908:	a0 f3       	brcs	.-24     	; 0x28f2 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    290a:	cd 01       	movw	r24, r26
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	aa 0f       	add	r26, r26
    2912:	bb 1f       	adc	r27, r27
    2914:	aa 0f       	add	r26, r26
    2916:	bb 1f       	adc	r27, r27
    2918:	aa 0f       	add	r26, r26
    291a:	bb 1f       	adc	r27, r27
    291c:	a8 0f       	add	r26, r24
    291e:	b9 1f       	adc	r27, r25
    2920:	a0 0f       	add	r26, r16
    2922:	b1 1f       	adc	r27, r17
    2924:	19 96       	adiw	r26, 0x09	; 9
    2926:	8c 91       	ld	r24, X
    2928:	19 97       	sbiw	r26, 0x09	; 9
    292a:	f9 01       	movw	r30, r18
    292c:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    292e:	18 96       	adiw	r26, 0x08	; 8
    2930:	8c 91       	ld	r24, X
    2932:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    2934:	c8 01       	movw	r24, r16
    2936:	0e 94 fe 09 	call	0x13fc	; 0x13fc <update_bodies>
}
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00003cdc <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    3cdc:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	0b c0       	rjmp	.+22     	; 0x3cf8 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    3ce2:	29 2f       	mov	r18, r25
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	fa 01       	movw	r30, r20
    3ce8:	e2 0f       	add	r30, r18
    3cea:	f3 1f       	adc	r31, r19
    3cec:	e4 58       	subi	r30, 0x84	; 132
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	80 81       	ld	r24, Z
    3cf2:	81 30       	cpi	r24, 0x01	; 1
    3cf4:	49 f0       	breq	.+18     	; 0x3d08 <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3cf6:	9f 5f       	subi	r25, 0xFF	; 255
    3cf8:	fa 01       	movw	r30, r20
    3cfa:	e5 58       	subi	r30, 0x85	; 133
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	80 81       	ld	r24, Z
    3d00:	98 17       	cp	r25, r24
    3d02:	78 f3       	brcs	.-34     	; 0x3ce2 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    3d04:	2f ef       	ldi	r18, 0xFF	; 255
    3d06:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    3d08:	c9 01       	movw	r24, r18
    3d0a:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00003dc4 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    3dc4:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    3dc8:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    3dca:	0a c0       	rjmp	.+20     	; 0x3de0 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    3dcc:	f9 01       	movw	r30, r18
    3dce:	e9 0f       	add	r30, r25
    3dd0:	f1 1d       	adc	r31, r1
    3dd2:	e4 58       	subi	r30, 0x84	; 132
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	40 81       	ld	r20, Z
    3dd8:	42 30       	cpi	r20, 0x02	; 2
    3dda:	09 f0       	breq	.+2      	; 0x3dde <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3dde:	9f 5f       	subi	r25, 0xFF	; 255
    3de0:	f9 01       	movw	r30, r18
    3de2:	e5 58       	subi	r30, 0x85	; 133
    3de4:	ff 4f       	sbci	r31, 0xFF	; 255
    3de6:	40 81       	ld	r20, Z
    3de8:	94 17       	cp	r25, r20
    3dea:	80 f3       	brcs	.-32     	; 0x3dcc <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    3dec:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

00001b8c <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    1b8c:	8f 92       	push	r8
    1b8e:	9f 92       	push	r9
    1b90:	af 92       	push	r10
    1b92:	bf 92       	push	r11
    1b94:	cf 92       	push	r12
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	6b 01       	movw	r12, r22
    1ba8:	4a 01       	movw	r8, r20
    1baa:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    1bac:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    1bb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb2:	2f ef       	ldi	r18, 0xFF	; 255
    1bb4:	92 07       	cpc	r25, r18
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <mrpp_state_get_ready_body+0x2e>
    1bb8:	66 c0       	rjmp	.+204    	; 0x1c86 <mrpp_state_get_ready_body+0xfa>
    1bba:	8c 15       	cp	r24, r12
    1bbc:	9d 05       	cpc	r25, r13
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <mrpp_state_get_ready_body+0x36>
    1bc0:	64 c0       	rjmp	.+200    	; 0x1c8a <mrpp_state_get_ready_body+0xfe>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	09 c0       	rjmp	.+18     	; 0x1bd8 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e8 0f       	add	r30, r24
    1bca:	f1 1d       	adc	r31, r1
    1bcc:	e4 58       	subi	r30, 0x84	; 132
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	90 81       	ld	r25, Z
    1bd2:	91 30       	cpi	r25, 0x01	; 1
    1bd4:	41 f0       	breq	.+16     	; 0x1be6 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    1bd6:	8f 5f       	subi	r24, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e5 58       	subi	r30, 0x85	; 133
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	90 81       	ld	r25, Z
    1be0:	89 17       	cp	r24, r25
    1be2:	88 f3       	brcs	.-30     	; 0x1bc6 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    1be4:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    1be6:	91 e0       	ldi	r25, 0x01	; 1
    1be8:	98 0f       	add	r25, r24
    1bea:	f4 01       	movw	r30, r8
    1bec:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    1bee:	99 81       	ldd	r25, Y+1	; 0x01
    1bf0:	f5 01       	movw	r30, r10
    1bf2:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	40 e3       	ldi	r20, 0x30	; 48
    1bf8:	48 9f       	mul	r20, r24
    1bfa:	90 01       	movw	r18, r0
    1bfc:	49 9f       	mul	r20, r25
    1bfe:	30 0d       	add	r19, r0
    1c00:	11 24       	eor	r1, r1
    1c02:	f8 01       	movw	r30, r16
    1c04:	31 83       	std	Z+1, r19	; 0x01
    1c06:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e5 58       	subi	r30, 0x85	; 133
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	20 81       	ld	r18, Z
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	21 50       	subi	r18, 0x01	; 1
    1c14:	31 09       	sbc	r19, r1
    1c16:	82 17       	cp	r24, r18
    1c18:	93 07       	cpc	r25, r19
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    1c1c:	80 e3       	ldi	r24, 0x30	; 48
    1c1e:	f7 01       	movw	r30, r14
    1c20:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	33 c0       	rjmp	.+102    	; 0x1c8c <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9c 01       	movw	r18, r24
    1c2e:	22 0f       	add	r18, r18
    1c30:	33 1f       	adc	r19, r19
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	82 0f       	add	r24, r18
    1c40:	93 1f       	adc	r25, r19
    1c42:	c8 0f       	add	r28, r24
    1c44:	d9 1f       	adc	r29, r25
    1c46:	4b 81       	ldd	r20, Y+3	; 0x03
    1c48:	5c 81       	ldd	r21, Y+4	; 0x04
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	48 0f       	add	r20, r24
    1c50:	59 1f       	adc	r21, r25
    1c52:	9a 01       	movw	r18, r20
    1c54:	ab ea       	ldi	r26, 0xAB	; 171
    1c56:	ba ea       	ldi	r27, 0xAA	; 170
    1c58:	0e 94 36 20 	call	0x406c	; 0x406c <__umulhisi3>
    1c5c:	96 95       	lsr	r25
    1c5e:	87 95       	ror	r24
    1c60:	92 95       	swap	r25
    1c62:	82 95       	swap	r24
    1c64:	8f 70       	andi	r24, 0x0F	; 15
    1c66:	89 27       	eor	r24, r25
    1c68:	9f 70       	andi	r25, 0x0F	; 15
    1c6a:	89 27       	eor	r24, r25
    1c6c:	60 e3       	ldi	r22, 0x30	; 48
    1c6e:	68 9f       	mul	r22, r24
    1c70:	90 01       	movw	r18, r0
    1c72:	69 9f       	mul	r22, r25
    1c74:	30 0d       	add	r19, r0
    1c76:	11 24       	eor	r1, r1
    1c78:	ca 01       	movw	r24, r20
    1c7a:	82 1b       	sub	r24, r18
    1c7c:	93 0b       	sbc	r25, r19
    1c7e:	f7 01       	movw	r30, r14
    1c80:	80 83       	st	Z, r24
    } 
    return true; 
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	01 c0       	rjmp	.+2      	; 0x1c8c <mrpp_state_get_ready_body+0x100>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	df 90       	pop	r13
    1c9a:	cf 90       	pop	r12
    1c9c:	bf 90       	pop	r11
    1c9e:	af 90       	pop	r10
    1ca0:	9f 90       	pop	r9
    1ca2:	8f 90       	pop	r8
    1ca4:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00003fd4 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	e5 58       	subi	r30, 0x85	; 133
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	20 81       	ld	r18, Z
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	62 17       	cp	r22, r18
    3fe0:	73 07       	cpc	r23, r19
    3fe2:	3c f4       	brge	.+14     	; 0x3ff2 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    3fe4:	68 0f       	add	r22, r24
    3fe6:	79 1f       	adc	r23, r25
    3fe8:	fb 01       	movw	r30, r22
    3fea:	e4 58       	subi	r30, 0x84	; 132
    3fec:	ff 4f       	sbci	r31, 0xFF	; 255
    3fee:	82 e0       	ldi	r24, 0x02	; 2
    3ff0:	80 83       	st	Z, r24
    3ff2:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

0000397e <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    397e:	70 e0       	ldi	r23, 0x00	; 0
    3980:	61 50       	subi	r22, 0x01	; 1
    3982:	71 09       	sbc	r23, r1
    3984:	fb 01       	movw	r30, r22
    3986:	ee 0f       	add	r30, r30
    3988:	ff 1f       	adc	r31, r31
    398a:	66 0f       	add	r22, r22
    398c:	77 1f       	adc	r23, r23
    398e:	66 0f       	add	r22, r22
    3990:	77 1f       	adc	r23, r23
    3992:	66 0f       	add	r22, r22
    3994:	77 1f       	adc	r23, r23
    3996:	e6 0f       	add	r30, r22
    3998:	f7 1f       	adc	r31, r23
    399a:	e8 0f       	add	r30, r24
    399c:	f9 1f       	adc	r31, r25
    399e:	83 81       	ldd	r24, Z+3	; 0x03
    39a0:	94 81       	ldd	r25, Z+4	; 0x04
    39a2:	da 01       	movw	r26, r20
    39a4:	8d 93       	st	X+, r24
    39a6:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    39a8:	85 81       	ldd	r24, Z+5	; 0x05
    39aa:	96 81       	ldd	r25, Z+6	; 0x06
    39ac:	f9 01       	movw	r30, r18
    39ae:	91 83       	std	Z+1, r25	; 0x01
    39b0:	80 83       	st	Z, r24
    39b2:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00003d0c <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    3d0c:	80 91 25 0e 	lds	r24, 0x0E25	; 0x800e25 <cnt>
    3d10:	90 91 26 0e 	lds	r25, 0x0E26	; 0x800e26 <cnt+0x1>
    3d14:	01 96       	adiw	r24, 0x01	; 1
    3d16:	90 93 26 0e 	sts	0x0E26, r25	; 0x800e26 <cnt+0x1>
    3d1a:	80 93 25 0e 	sts	0x0E25, r24	; 0x800e25 <cnt>
	if(cnt>=_seconds){
    3d1e:	20 91 27 0e 	lds	r18, 0x0E27	; 0x800e27 <_seconds>
    3d22:	30 91 28 0e 	lds	r19, 0x0E28	; 0x800e28 <_seconds+0x1>
    3d26:	82 17       	cp	r24, r18
    3d28:	93 07       	cpc	r25, r19
    3d2a:	38 f0       	brcs	.+14     	; 0x3d3a <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    3d2c:	80 91 44 0e 	lds	r24, 0x0E44	; 0x800e44 <eventPointer>
    3d30:	0e 94 4e 1c 	call	0x389c	; 0x389c <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	0e 94 3d 21 	call	0x427a	; 0x427a <PM_HAL_BC_power>
    3d3a:	08 95       	ret

Disassembly of section .text.PUMP_start:

00003e62 <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    3e62:	10 92 26 0e 	sts	0x0E26, r1	; 0x800e26 <cnt+0x1>
    3e66:	10 92 25 0e 	sts	0x0E25, r1	; 0x800e25 <cnt>
	_seconds=seconds;
    3e6a:	90 93 28 0e 	sts	0x0E28, r25	; 0x800e28 <_seconds+0x1>
    3e6e:	80 93 27 0e 	sts	0x0E27, r24	; 0x800e27 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    3e72:	86 e8       	ldi	r24, 0x86	; 134
    3e74:	9e e1       	ldi	r25, 0x1E	; 30
    3e76:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <TC2_HAL_subscribe>
    3e7a:	80 93 44 0e 	sts	0x0E44, r24	; 0x800e44 <eventPointer>
	PM_HAL_BC_power(true);
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	0e 94 3d 21 	call	0x427a	; 0x427a <PM_HAL_BC_power>
    3e84:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

00004118 <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    4118:	40 91 25 0e 	lds	r20, 0x0E25	; 0x800e25 <cnt>
    411c:	50 91 26 0e 	lds	r21, 0x0E26	; 0x800e26 <cnt+0x1>
    4120:	20 91 27 0e 	lds	r18, 0x0E27	; 0x800e27 <_seconds>
    4124:	30 91 28 0e 	lds	r19, 0x0E28	; 0x800e28 <_seconds+0x1>
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	42 17       	cp	r20, r18
    412c:	53 07       	cpc	r21, r19
    412e:	08 f4       	brcc	.+2      	; 0x4132 <PUMP_is_done+0x1a>
    4130:	80 e0       	ldi	r24, 0x00	; 0
}
    4132:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00003016 <RTC_set_clock_out>:
	uint32_t tsbit;
} tsbit;

const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	00 d0       	rcall	.+0      	; 0x301c <RTC_set_clock_out+0x6>
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    3020:	9d e0       	ldi	r25, 0x0D	; 13
    3022:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    3024:	81 30       	cpi	r24, 0x01	; 1
    3026:	31 f0       	breq	.+12     	; 0x3034 <RTC_set_clock_out+0x1e>
    3028:	18 f0       	brcs	.+6      	; 0x3030 <RTC_set_clock_out+0x1a>
    302a:	80 32       	cpi	r24, 0x20	; 32
    302c:	31 f0       	breq	.+12     	; 0x303a <RTC_set_clock_out+0x24>
    302e:	13 c0       	rjmp	.+38     	; 0x3056 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    3030:	1a 82       	std	Y+2, r1	; 0x02
			break;
    3032:	05 c0       	rjmp	.+10     	; 0x303e <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    3034:	83 e8       	ldi	r24, 0x83	; 131
    3036:	8a 83       	std	Y+2, r24	; 0x02
			break;
    3038:	02 c0       	rjmp	.+4      	; 0x303e <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    303a:	82 e8       	ldi	r24, 0x82	; 130
    303c:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    303e:	ae 01       	movw	r20, r28
    3040:	4f 5f       	subi	r20, 0xFF	; 255
    3042:	5f 4f       	sbci	r21, 0xFF	; 255
    3044:	60 e8       	ldi	r22, 0x80	; 128
    3046:	22 e0       	ldi	r18, 0x02	; 2
    3048:	81 e5       	ldi	r24, 0x51	; 81
    304a:	0e 94 a7 21 	call	0x434e	; 0x434e <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    304e:	88 23       	and	r24, r24
    3050:	21 f0       	breq	.+8      	; 0x305a <RTC_set_clock_out+0x44>
    3052:	82 e0       	ldi	r24, 0x02	; 2
    3054:	03 c0       	rjmp	.+6      	; 0x305c <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	01 c0       	rjmp	.+2      	; 0x305c <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    305a:	80 e0       	ldi	r24, 0x00	; 0
}
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

00003abe <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    3abe:	cf 93       	push	r28
    3ac0:	df 93       	push	r29
    3ac2:	00 d0       	rcall	.+0      	; 0x3ac4 <RTC_clear_wake_up_interrupt+0x6>
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    3ace:	ae 01       	movw	r20, r28
    3ad0:	4f 5f       	subi	r20, 0xFF	; 255
    3ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad4:	60 e8       	ldi	r22, 0x80	; 128
    3ad6:	22 e0       	ldi	r18, 0x02	; 2
    3ad8:	81 e5       	ldi	r24, 0x51	; 81
    3ada:	0e 94 a7 21 	call	0x434e	; 0x434e <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    3ade:	88 23       	and	r24, r24
    3ae0:	11 f0       	breq	.+4      	; 0x3ae6 <RTC_clear_wake_up_interrupt+0x28>
    3ae2:	82 e0       	ldi	r24, 0x02	; 2
    3ae4:	01 c0       	rjmp	.+2      	; 0x3ae8 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
}
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

000016b2 <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	27 97       	sbiw	r28, 0x07	; 7
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	8c 01       	movw	r16, r24
    16cc:	21 e0       	ldi	r18, 0x01	; 1
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	54 e0       	ldi	r21, 0x04	; 4
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	81 e5       	ldi	r24, 0x51	; 81
    16d6:	0e 94 b8 22 	call	0x4570	; 0x4570 <TWI_API_write_data>
    16da:	81 11       	cpse	r24, r1
    16dc:	7c c0       	rjmp	.+248    	; 0x17d6 <RTC_get_current_time+0x124>
    16de:	47 e0       	ldi	r20, 0x07	; 7
    16e0:	be 01       	movw	r22, r28
    16e2:	6f 5f       	subi	r22, 0xFF	; 255
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	81 e5       	ldi	r24, 0x51	; 81
    16e8:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <TWI_API_repeat_read_data_stop>
    16ec:	81 11       	cpse	r24, r1
    16ee:	75 c0       	rjmp	.+234    	; 0x17da <RTC_get_current_time+0x128>
    16f0:	29 81       	ldd	r18, Y+1	; 0x01
    16f2:	82 2f       	mov	r24, r18
    16f4:	8f 77       	andi	r24, 0x7F	; 127
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	95 95       	asr	r25
    16fa:	87 95       	ror	r24
    16fc:	95 95       	asr	r25
    16fe:	87 95       	ror	r24
    1700:	95 95       	asr	r25
    1702:	87 95       	ror	r24
    1704:	95 95       	asr	r25
    1706:	87 95       	ror	r24
    1708:	88 0f       	add	r24, r24
    170a:	98 2f       	mov	r25, r24
    170c:	99 0f       	add	r25, r25
    170e:	99 0f       	add	r25, r25
    1710:	89 0f       	add	r24, r25
    1712:	2f 70       	andi	r18, 0x0F	; 15
    1714:	82 0f       	add	r24, r18
    1716:	f8 01       	movw	r30, r16
    1718:	80 83       	st	Z, r24
    171a:	2a 81       	ldd	r18, Y+2	; 0x02
    171c:	82 2f       	mov	r24, r18
    171e:	8f 77       	andi	r24, 0x7F	; 127
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	95 95       	asr	r25
    1724:	87 95       	ror	r24
    1726:	95 95       	asr	r25
    1728:	87 95       	ror	r24
    172a:	95 95       	asr	r25
    172c:	87 95       	ror	r24
    172e:	95 95       	asr	r25
    1730:	87 95       	ror	r24
    1732:	88 0f       	add	r24, r24
    1734:	98 2f       	mov	r25, r24
    1736:	99 0f       	add	r25, r25
    1738:	99 0f       	add	r25, r25
    173a:	89 0f       	add	r24, r25
    173c:	2f 70       	andi	r18, 0x0F	; 15
    173e:	82 0f       	add	r24, r18
    1740:	81 83       	std	Z+1, r24	; 0x01
    1742:	2b 81       	ldd	r18, Y+3	; 0x03
    1744:	82 2f       	mov	r24, r18
    1746:	8f 73       	andi	r24, 0x3F	; 63
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	95 95       	asr	r25
    174c:	87 95       	ror	r24
    174e:	95 95       	asr	r25
    1750:	87 95       	ror	r24
    1752:	95 95       	asr	r25
    1754:	87 95       	ror	r24
    1756:	95 95       	asr	r25
    1758:	87 95       	ror	r24
    175a:	88 0f       	add	r24, r24
    175c:	98 2f       	mov	r25, r24
    175e:	99 0f       	add	r25, r25
    1760:	99 0f       	add	r25, r25
    1762:	89 0f       	add	r24, r25
    1764:	2f 70       	andi	r18, 0x0F	; 15
    1766:	82 0f       	add	r24, r18
    1768:	82 83       	std	Z+2, r24	; 0x02
    176a:	2c 81       	ldd	r18, Y+4	; 0x04
    176c:	82 2f       	mov	r24, r18
    176e:	8f 73       	andi	r24, 0x3F	; 63
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	95 95       	asr	r25
    1774:	87 95       	ror	r24
    1776:	95 95       	asr	r25
    1778:	87 95       	ror	r24
    177a:	95 95       	asr	r25
    177c:	87 95       	ror	r24
    177e:	95 95       	asr	r25
    1780:	87 95       	ror	r24
    1782:	88 0f       	add	r24, r24
    1784:	98 2f       	mov	r25, r24
    1786:	99 0f       	add	r25, r25
    1788:	99 0f       	add	r25, r25
    178a:	89 0f       	add	r24, r25
    178c:	2f 70       	andi	r18, 0x0F	; 15
    178e:	82 0f       	add	r24, r18
    1790:	83 83       	std	Z+3, r24	; 0x03
    1792:	2e 81       	ldd	r18, Y+6	; 0x06
    1794:	82 2f       	mov	r24, r18
    1796:	8f 71       	andi	r24, 0x1F	; 31
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	95 95       	asr	r25
    179c:	87 95       	ror	r24
    179e:	95 95       	asr	r25
    17a0:	87 95       	ror	r24
    17a2:	95 95       	asr	r25
    17a4:	87 95       	ror	r24
    17a6:	95 95       	asr	r25
    17a8:	87 95       	ror	r24
    17aa:	88 0f       	add	r24, r24
    17ac:	98 2f       	mov	r25, r24
    17ae:	99 0f       	add	r25, r25
    17b0:	99 0f       	add	r25, r25
    17b2:	89 0f       	add	r24, r25
    17b4:	2f 70       	andi	r18, 0x0F	; 15
    17b6:	82 0f       	add	r24, r18
    17b8:	84 83       	std	Z+4, r24	; 0x04
    17ba:	8f 81       	ldd	r24, Y+7	; 0x07
    17bc:	98 2f       	mov	r25, r24
    17be:	92 95       	swap	r25
    17c0:	9f 70       	andi	r25, 0x0F	; 15
    17c2:	99 0f       	add	r25, r25
    17c4:	29 2f       	mov	r18, r25
    17c6:	22 0f       	add	r18, r18
    17c8:	22 0f       	add	r18, r18
    17ca:	92 0f       	add	r25, r18
    17cc:	8f 70       	andi	r24, 0x0F	; 15
    17ce:	89 0f       	add	r24, r25
    17d0:	85 83       	std	Z+5, r24	; 0x05
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <RTC_get_current_time+0x12a>
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <RTC_get_current_time+0x12a>
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	27 96       	adiw	r28, 0x07	; 7
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

000021ca <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	2d 97       	sbiw	r28, 0x0d	; 13
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    21ea:	85 e0       	ldi	r24, 0x05	; 5
    21ec:	ea ef       	ldi	r30, 0xFA	; 250
    21ee:	fd e0       	ldi	r31, 0x0D	; 13
    21f0:	de 01       	movw	r26, r28
    21f2:	13 96       	adiw	r26, 0x03	; 3
    21f4:	01 90       	ld	r0, Z+
    21f6:	0d 92       	st	X+, r0
    21f8:	8a 95       	dec	r24
    21fa:	e1 f7       	brne	.-8      	; 0x21f4 <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    21fc:	ce 01       	movw	r24, r28
    21fe:	08 96       	adiw	r24, 0x08	; 8
    2200:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	81 0f       	add	r24, r17
	dt.minute %= 60;
    2208:	99 e8       	ldi	r25, 0x89	; 137
    220a:	89 9f       	mul	r24, r25
    220c:	91 2d       	mov	r25, r1
    220e:	11 24       	eor	r1, r1
    2210:	92 95       	swap	r25
    2212:	96 95       	lsr	r25
    2214:	97 70       	andi	r25, 0x07	; 7
    2216:	2c e3       	ldi	r18, 0x3C	; 60
    2218:	92 9f       	mul	r25, r18
    221a:	80 19       	sub	r24, r0
    221c:	11 24       	eor	r1, r1
    221e:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    2220:	ae 01       	movw	r20, r28
    2222:	4f 5f       	subi	r20, 0xFF	; 255
    2224:	5f 4f       	sbci	r21, 0xFF	; 255
    2226:	60 e8       	ldi	r22, 0x80	; 128
    2228:	22 e0       	ldi	r18, 0x02	; 2
    222a:	81 e5       	ldi	r24, 0x51	; 81
    222c:	0e 94 a7 21 	call	0x434e	; 0x434e <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2230:	81 11       	cpse	r24, r1
    2232:	20 c0       	rjmp	.+64     	; 0x2274 <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    2234:	99 85       	ldd	r25, Y+9	; 0x09
    2236:	8d ec       	ldi	r24, 0xCD	; 205
    2238:	98 9f       	mul	r25, r24
    223a:	81 2d       	mov	r24, r1
    223c:	11 24       	eor	r1, r1
    223e:	86 95       	lsr	r24
    2240:	86 95       	lsr	r24
    2242:	86 95       	lsr	r24
    2244:	40 e1       	ldi	r20, 0x10	; 16
    2246:	84 9f       	mul	r24, r20
    2248:	90 01       	movw	r18, r0
    224a:	11 24       	eor	r1, r1
    224c:	88 0f       	add	r24, r24
    224e:	38 2f       	mov	r19, r24
    2250:	33 0f       	add	r19, r19
    2252:	33 0f       	add	r19, r19
    2254:	83 0f       	add	r24, r19
    2256:	98 1b       	sub	r25, r24
    2258:	92 2b       	or	r25, r18
    225a:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    225c:	ae 01       	movw	r20, r28
    225e:	4d 5f       	subi	r20, 0xFD	; 253
    2260:	5f 4f       	sbci	r21, 0xFF	; 255
    2262:	60 e8       	ldi	r22, 0x80	; 128
    2264:	25 e0       	ldi	r18, 0x05	; 5
    2266:	81 e5       	ldi	r24, 0x51	; 81
    2268:	0e 94 a7 21 	call	0x434e	; 0x434e <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    226c:	88 23       	and	r24, r24
    226e:	21 f0       	breq	.+8      	; 0x2278 <RTC_set_wake_up_interrupt_minutes+0xae>
    2270:	82 e0       	ldi	r24, 0x02	; 2
    2272:	03 c0       	rjmp	.+6      	; 0x227a <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	01 c0       	rjmp	.+2      	; 0x227a <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    2278:	80 e0       	ldi	r24, 0x00	; 0
}
    227a:	2d 96       	adiw	r28, 0x0d	; 13
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

00001a6a <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    1a6a:	4f 92       	push	r4
    1a6c:	5f 92       	push	r5
    1a6e:	6f 92       	push	r6
    1a70:	7f 92       	push	r7
    1a72:	8f 92       	push	r8
    1a74:	9f 92       	push	r9
    1a76:	af 92       	push	r10
    1a78:	bf 92       	push	r11
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <RTC_datetime_to_ts+0x22>
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <RTC_datetime_to_ts+0x24>
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <RTC_datetime_to_ts+0x26>
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	f9 01       	movw	r30, r18
    1a96:	49 2e       	mov	r4, r25
    1a98:	51 2c       	mov	r5, r1
    1a9a:	61 2c       	mov	r6, r1
    1a9c:	71 2c       	mov	r7, r1
    1a9e:	03 2e       	mov	r0, r19
    1aa0:	3a e1       	ldi	r19, 0x1A	; 26
    1aa2:	44 0c       	add	r4, r4
    1aa4:	55 1c       	adc	r5, r5
    1aa6:	66 1c       	adc	r6, r6
    1aa8:	77 1c       	adc	r7, r7
    1aaa:	3a 95       	dec	r19
    1aac:	d1 f7       	brne	.-12     	; 0x1aa2 <RTC_datetime_to_ts+0x38>
    1aae:	30 2d       	mov	r19, r0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e0       	ldi	r26, 0x00	; 0
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	07 2e       	mov	r0, r23
    1ab8:	76 e1       	ldi	r23, 0x16	; 22
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	aa 1f       	adc	r26, r26
    1ac0:	bb 1f       	adc	r27, r27
    1ac2:	7a 95       	dec	r23
    1ac4:	d1 f7       	brne	.-12     	; 0x1aba <RTC_datetime_to_ts+0x50>
    1ac6:	70 2d       	mov	r23, r0
    1ac8:	84 29       	or	r24, r4
    1aca:	95 29       	or	r25, r5
    1acc:	a6 29       	or	r26, r6
    1ace:	b7 29       	or	r27, r7
    1ad0:	87 2e       	mov	r8, r23
    1ad2:	91 2c       	mov	r9, r1
    1ad4:	a1 2c       	mov	r10, r1
    1ad6:	b1 2c       	mov	r11, r1
    1ad8:	07 2e       	mov	r0, r23
    1ada:	71 e1       	ldi	r23, 0x11	; 17
    1adc:	88 0c       	add	r8, r8
    1ade:	99 1c       	adc	r9, r9
    1ae0:	aa 1c       	adc	r10, r10
    1ae2:	bb 1c       	adc	r11, r11
    1ae4:	7a 95       	dec	r23
    1ae6:	d1 f7       	brne	.-12     	; 0x1adc <RTC_datetime_to_ts+0x72>
    1ae8:	70 2d       	mov	r23, r0
    1aea:	88 29       	or	r24, r8
    1aec:	99 29       	or	r25, r9
    1aee:	aa 29       	or	r26, r10
    1af0:	bb 29       	or	r27, r11
    1af2:	c6 2e       	mov	r12, r22
    1af4:	d1 2c       	mov	r13, r1
    1af6:	e1 2c       	mov	r14, r1
    1af8:	f1 2c       	mov	r15, r1
    1afa:	0b 2e       	mov	r0, r27
    1afc:	bc e0       	ldi	r27, 0x0C	; 12
    1afe:	cc 0c       	add	r12, r12
    1b00:	dd 1c       	adc	r13, r13
    1b02:	ee 1c       	adc	r14, r14
    1b04:	ff 1c       	adc	r15, r15
    1b06:	ba 95       	dec	r27
    1b08:	d1 f7       	brne	.-12     	; 0x1afe <RTC_datetime_to_ts+0x94>
    1b0a:	b0 2d       	mov	r27, r0
    1b0c:	8c 29       	or	r24, r12
    1b0e:	9d 29       	or	r25, r13
    1b10:	ae 29       	or	r26, r14
    1b12:	bf 29       	or	r27, r15
    1b14:	05 2f       	mov	r16, r21
    1b16:	10 e0       	ldi	r17, 0x00	; 0
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	00 0f       	add	r16, r16
    1b1e:	11 1f       	adc	r17, r17
    1b20:	22 1f       	adc	r18, r18
    1b22:	33 1f       	adc	r19, r19
    1b24:	00 0f       	add	r16, r16
    1b26:	11 1f       	adc	r17, r17
    1b28:	22 1f       	adc	r18, r18
    1b2a:	33 1f       	adc	r19, r19
    1b2c:	00 0f       	add	r16, r16
    1b2e:	11 1f       	adc	r17, r17
    1b30:	22 1f       	adc	r18, r18
    1b32:	33 1f       	adc	r19, r19
    1b34:	00 0f       	add	r16, r16
    1b36:	11 1f       	adc	r17, r17
    1b38:	22 1f       	adc	r18, r18
    1b3a:	33 1f       	adc	r19, r19
    1b3c:	00 0f       	add	r16, r16
    1b3e:	11 1f       	adc	r17, r17
    1b40:	22 1f       	adc	r18, r18
    1b42:	33 1f       	adc	r19, r19
    1b44:	00 0f       	add	r16, r16
    1b46:	11 1f       	adc	r17, r17
    1b48:	22 1f       	adc	r18, r18
    1b4a:	33 1f       	adc	r19, r19
    1b4c:	80 2b       	or	r24, r16
    1b4e:	91 2b       	or	r25, r17
    1b50:	a2 2b       	or	r26, r18
    1b52:	b3 2b       	or	r27, r19
    1b54:	84 2b       	or	r24, r20
    1b56:	b0 83       	st	Z, r27
    1b58:	a1 83       	std	Z+1, r26	; 0x01
    1b5a:	92 83       	std	Z+2, r25	; 0x02
    1b5c:	83 83       	std	Z+3, r24	; 0x03
    1b5e:	26 96       	adiw	r28, 0x06	; 6
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	bf 90       	pop	r11
    1b7c:	af 90       	pop	r10
    1b7e:	9f 90       	pop	r9
    1b80:	8f 90       	pop	r8
    1b82:	7f 90       	pop	r7
    1b84:	6f 90       	pop	r6
    1b86:	5f 90       	pop	r5
    1b88:	4f 90       	pop	r4
    1b8a:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

0000416c <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    416c:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    416e:	54 81       	ldd	r21, Z+4	; 0x04
    4170:	43 81       	ldd	r20, Z+3	; 0x03
    4172:	31 81       	ldd	r19, Z+1	; 0x01
    4174:	20 81       	ld	r18, Z
    4176:	65 2f       	mov	r22, r21
    4178:	74 2f       	mov	r23, r20
    417a:	83 2f       	mov	r24, r19
    417c:	92 2f       	mov	r25, r18
    417e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__fixunssfsi>
}
    4182:	cb 01       	movw	r24, r22
    4184:	08 95       	ret

Disassembly of section .text.init_measurement:

0000390e <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    390e:	25 e0       	ldi	r18, 0x05	; 5
    3910:	41 ef       	ldi	r20, 0xF1	; 241
    3912:	53 e0       	ldi	r21, 0x03	; 3
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	81 e6       	ldi	r24, 0x61	; 97
    3918:	0e 94 a7 21 	call	0x434e	; 0x434e <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    391c:	81 11       	cpse	r24, r1
    391e:	0f c0       	rjmp	.+30     	; 0x393e <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    3920:	25 e0       	ldi	r18, 0x05	; 5
    3922:	46 ef       	ldi	r20, 0xF6	; 246
    3924:	53 e0       	ldi	r21, 0x03	; 3
    3926:	60 e0       	ldi	r22, 0x00	; 0
    3928:	81 e6       	ldi	r24, 0x61	; 97
    392a:	0e 94 a7 21 	call	0x434e	; 0x434e <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    392e:	81 11       	cpse	r24, r1
    3930:	08 c0       	rjmp	.+16     	; 0x3942 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    3932:	0e 94 71 22 	call	0x44e2	; 0x44e2 <SCD30_HAL_data_ready>
    3936:	88 23       	and	r24, r24
    3938:	e1 f3       	breq	.-8      	; 0x3932 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    393e:	82 e0       	ldi	r24, 0x02	; 2
    3940:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3942:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    3944:	08 95       	ret

Disassembly of section .text.validate_data:

00003b88 <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    3b88:	cf 93       	push	r28
    3b8a:	df 93       	push	r29
    3b8c:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    3b8e:	62 e0       	ldi	r22, 0x02	; 2
    3b90:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <calc_crc8>
	if(data[2]!=crc) return false;
    3b94:	9a 81       	ldd	r25, Y+2	; 0x02
    3b96:	89 13       	cpse	r24, r25
    3b98:	0a c0       	rjmp	.+20     	; 0x3bae <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    3b9a:	62 e0       	ldi	r22, 0x02	; 2
    3b9c:	ce 01       	movw	r24, r28
    3b9e:	03 96       	adiw	r24, 0x03	; 3
    3ba0:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <calc_crc8>
	if(data[5]!=crc) return false;
    3ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ba6:	89 17       	cp	r24, r25
    3ba8:	21 f0       	breq	.+8      	; 0x3bb2 <validate_data+0x2a>
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	03 c0       	rjmp	.+6      	; 0x3bb4 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	01 c0       	rjmp	.+2      	; 0x3bb4 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
}
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	08 95       	ret

Disassembly of section .text.read_value:

0000253c <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	00 d0       	rcall	.+0      	; 0x2546 <read_value+0xa>
    2546:	00 d0       	rcall	.+0      	; 0x2548 <read_value+0xc>
    2548:	00 d0       	rcall	.+0      	; 0x254a <read_value+0xe>
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    2550:	8f ef       	ldi	r24, 0xFF	; 255
    2552:	9f ef       	ldi	r25, 0xFF	; 255
    2554:	f8 01       	movw	r30, r16
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    255a:	0e 94 71 22 	call	0x44e2	; 0x44e2 <SCD30_HAL_data_ready>
    255e:	81 11       	cpse	r24, r1
    2560:	07 c0       	rjmp	.+14     	; 0x2570 <read_value+0x34>
		*value=0xfffe;
    2562:	8e ef       	ldi	r24, 0xFE	; 254
    2564:	9f ef       	ldi	r25, 0xFF	; 255
    2566:	f8 01       	movw	r30, r16
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	2c c0       	rjmp	.+88     	; 0x25c8 <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    2570:	22 e0       	ldi	r18, 0x02	; 2
    2572:	4e ef       	ldi	r20, 0xFE	; 254
    2574:	53 e0       	ldi	r21, 0x03	; 3
    2576:	60 e0       	ldi	r22, 0x00	; 0
    2578:	81 e6       	ldi	r24, 0x61	; 97
    257a:	0e 94 a7 21 	call	0x434e	; 0x434e <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    257e:	81 11       	cpse	r24, r1
    2580:	1e c0       	rjmp	.+60     	; 0x25be <read_value+0x82>
    2582:	8f e3       	ldi	r24, 0x3F	; 63
    2584:	9f e1       	ldi	r25, 0x1F	; 31
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <read_value+0x4a>
    258a:	00 c0       	rjmp	.+0      	; 0x258c <read_value+0x50>
    258c:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    258e:	46 e0       	ldi	r20, 0x06	; 6
    2590:	be 01       	movw	r22, r28
    2592:	6f 5f       	subi	r22, 0xFF	; 255
    2594:	7f 4f       	sbci	r23, 0xFF	; 255
    2596:	81 e6       	ldi	r24, 0x61	; 97
    2598:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    259c:	81 11       	cpse	r24, r1
    259e:	11 c0       	rjmp	.+34     	; 0x25c2 <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    25a0:	ce 01       	movw	r24, r28
    25a2:	01 96       	adiw	r24, 0x01	; 1
    25a4:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <validate_data>
    25a8:	88 23       	and	r24, r24
    25aa:	69 f0       	breq	.+26     	; 0x25c6 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    25ac:	ce 01       	movw	r24, r28
    25ae:	01 96       	adiw	r24, 0x01	; 1
    25b0:	0e 94 b6 20 	call	0x416c	; 0x416c <bytes_2_uint>
    25b4:	f8 01       	movw	r30, r16
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	05 c0       	rjmp	.+10     	; 0x25c8 <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	03 c0       	rjmp	.+6      	; 0x25c8 <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    25c8:	26 96       	adiw	r28, 0x06	; 6
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

0000350c <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    350c:	80 91 2b 0e 	lds	r24, 0x0E2B	; 0x800e2b <_data>
    3510:	90 91 2c 0e 	lds	r25, 0x0E2C	; 0x800e2c <_data+0x1>
    3514:	20 91 29 0e 	lds	r18, 0x0E29	; 0x800e29 <cntSamples>
    3518:	30 91 2a 0e 	lds	r19, 0x0E2A	; 0x800e2a <cntSamples+0x1>
    351c:	a9 01       	movw	r20, r18
    351e:	4f 5f       	subi	r20, 0xFF	; 255
    3520:	5f 4f       	sbci	r21, 0xFF	; 255
    3522:	50 93 2a 0e 	sts	0x0E2A, r21	; 0x800e2a <cntSamples+0x1>
    3526:	40 93 29 0e 	sts	0x0E29, r20	; 0x800e29 <cntSamples>
    352a:	22 0f       	add	r18, r18
    352c:	33 1f       	adc	r19, r19
    352e:	82 0f       	add	r24, r18
    3530:	93 1f       	adc	r25, r19
    3532:	0e 94 9e 12 	call	0x253c	; 0x253c <read_value>
	if(cntSamples>=_nSamples){
    3536:	20 91 29 0e 	lds	r18, 0x0E29	; 0x800e29 <cntSamples>
    353a:	30 91 2a 0e 	lds	r19, 0x0E2A	; 0x800e2a <cntSamples+0x1>
    353e:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <_nSamples>
    3542:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <_nSamples+0x1>
    3546:	28 17       	cp	r18, r24
    3548:	39 07       	cpc	r19, r25
    354a:	10 f0       	brcs	.+4      	; 0x3550 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    354c:	0e 94 2f 22 	call	0x445e	; 0x445e <TC1_HAL_stop>
    3550:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00003150 <SCD30_init_sampling>:
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();



SCD30_STATUS SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    3150:	cf 93       	push	r28
    3152:	df 93       	push	r29
    3154:	ec 01       	movw	r28, r24
	_nSamples=nSamples;
    3156:	70 93 2e 0e 	sts	0x0E2E, r23	; 0x800e2e <_nSamples+0x1>
    315a:	60 93 2d 0e 	sts	0x0E2D, r22	; 0x800e2d <_nSamples>
	cntSamples=0;
    315e:	10 92 2a 0e 	sts	0x0E2A, r1	; 0x800e2a <cntSamples+0x1>
    3162:	10 92 29 0e 	sts	0x0E29, r1	; 0x800e29 <cntSamples>
	_data=data;
    3166:	50 93 2c 0e 	sts	0x0E2C, r21	; 0x800e2c <_data+0x1>
    316a:	40 93 2b 0e 	sts	0x0E2B, r20	; 0x800e2b <_data>
	
	//Init
	SCD30_HAL_init();
    316e:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <SCD30_HAL_init>
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    3172:	66 e8       	ldi	r22, 0x86	; 134
    3174:	7a e1       	ldi	r23, 0x1A	; 26
    3176:	ce 01       	movw	r24, r28
    3178:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <TC1_HAL_init>
	PM_HAL_SCD30_power(true);
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	0e 94 33 21 	call	0x4266	; 0x4266 <PM_HAL_SCD30_power>
    3182:	2f ef       	ldi	r18, 0xFF	; 255
    3184:	83 ed       	ldi	r24, 0xD3	; 211
    3186:	90 e3       	ldi	r25, 0x30	; 48
    3188:	21 50       	subi	r18, 0x01	; 1
    318a:	80 40       	sbci	r24, 0x00	; 0
    318c:	90 40       	sbci	r25, 0x00	; 0
    318e:	e1 f7       	brne	.-8      	; 0x3188 <SCD30_init_sampling+0x38>
    3190:	00 c0       	rjmp	.+0      	; 0x3192 <SCD30_init_sampling+0x42>
    3192:	00 00       	nop
	_delay_ms(2000);
	
	return init_measurement();
    3194:	0e 94 87 1c 	call	0x390e	; 0x390e <init_measurement>
}
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

000042f2 <SCD30_deinit_sampling>:

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    42f2:	0e 94 2f 22 	call	0x445e	; 0x445e <TC1_HAL_stop>
	PM_HAL_SCD30_power(false);
    42f6:	80 e0       	ldi	r24, 0x00	; 0
    42f8:	0e 94 33 21 	call	0x4266	; 0x4266 <PM_HAL_SCD30_power>
	_data=NULL;
    42fc:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <_data+0x1>
    4300:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <_data>
    4304:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

000044be <SCD30_start_sampling>:
	
}

SCD30_STATUS SCD30_start_sampling(){
	vect_SCD_do_sample();
    44be:	0e 94 86 1a 	call	0x350c	; 0x350c <vect_SCD_do_sample>
	TC1_HAL_start();
    44c2:	0e 94 29 22 	call	0x4452	; 0x4452 <TC1_HAL_start>
	return SCD30_STATUS_SUCCESS;
}
    44c6:	80 e0       	ldi	r24, 0x00	; 0
    44c8:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00004134 <SCD30_is_sampling_done>:

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    4134:	40 91 29 0e 	lds	r20, 0x0E29	; 0x800e29 <cntSamples>
    4138:	50 91 2a 0e 	lds	r21, 0x0E2A	; 0x800e2a <cntSamples+0x1>
    413c:	20 91 2d 0e 	lds	r18, 0x0E2D	; 0x800e2d <_nSamples>
    4140:	30 91 2e 0e 	lds	r19, 0x0E2E	; 0x800e2e <_nSamples+0x1>
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	42 17       	cp	r20, r18
    4148:	53 07       	cpc	r21, r19
    414a:	08 f4       	brcc	.+2      	; 0x414e <SCD30_is_sampling_done+0x1a>
    414c:	80 e0       	ldi	r24, 0x00	; 0
}
    414e:	08 95       	ret

Disassembly of section .text.decode_stage_response:

00004228 <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    4228:	88 23       	and	r24, r24
    422a:	19 f0       	breq	.+6      	; 0x4232 <decode_stage_response+0xa>
    422c:	81 30       	cpi	r24, 0x01	; 1
    422e:	29 f0       	breq	.+10     	; 0x423a <decode_stage_response+0x12>
    4230:	02 c0       	rjmp	.+4      	; 0x4236 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    4232:	80 e1       	ldi	r24, 0x10	; 16
    4234:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    4236:	85 e1       	ldi	r24, 0x15	; 21
    4238:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    423a:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    423c:	08 95       	ret

Disassembly of section .text.decode_join_response:

00004150 <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    4150:	83 30       	cpi	r24, 0x03	; 3
    4152:	51 f0       	breq	.+20     	; 0x4168 <decode_join_response+0x18>
    4154:	84 30       	cpi	r24, 0x04	; 4
    4156:	21 f0       	breq	.+8      	; 0x4160 <decode_join_response+0x10>
    4158:	81 11       	cpse	r24, r1
    415a:	04 c0       	rjmp	.+8      	; 0x4164 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    415c:	83 e0       	ldi	r24, 0x03	; 3
    415e:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    4160:	85 e0       	ldi	r24, 0x05	; 5
    4162:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    4164:	85 e1       	ldi	r24, 0x15	; 21
    4166:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    4168:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    416a:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

0000404e <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    404e:	83 30       	cpi	r24, 0x03	; 3
    4050:	49 f0       	breq	.+18     	; 0x4064 <decode_header_tail_response+0x16>
    4052:	18 f4       	brcc	.+6      	; 0x405a <decode_header_tail_response+0xc>
    4054:	88 23       	and	r24, r24
    4056:	41 f0       	breq	.+16     	; 0x4068 <decode_header_tail_response+0x1a>
    4058:	03 c0       	rjmp	.+6      	; 0x4060 <decode_header_tail_response+0x12>
    405a:	85 50       	subi	r24, 0x05	; 5
    405c:	82 30       	cpi	r24, 0x02	; 2
    405e:	20 f0       	brcs	.+8      	; 0x4068 <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    4060:	85 e1       	ldi	r24, 0x15	; 21
    4062:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    4064:	84 2f       	mov	r24, r20
    4066:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    4068:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    406a:	08 95       	ret

Disassembly of section .text.read_eeprom:

00002eba <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    2eba:	89 ed       	ldi	r24, 0xD9	; 217
    2ebc:	9d e0       	ldi	r25, 0x0D	; 13
    2ebe:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <EM_get_deveui>
	EM_get_appeui(appeui);
    2ec2:	88 ec       	ldi	r24, 0xC8	; 200
    2ec4:	9d e0       	ldi	r25, 0x0D	; 13
    2ec6:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <EM_get_appeui>
	EM_get_appkey(appkey);
    2eca:	87 ea       	ldi	r24, 0xA7	; 167
    2ecc:	9d e0       	ldi	r25, 0x0D	; 13
    2ece:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    2ed2:	63 e2       	ldi	r22, 0x23	; 35
    2ed4:	84 e8       	ldi	r24, 0x84	; 132
    2ed6:	9d e0       	ldi	r25, 0x0D	; 13
    2ed8:	0e 94 b7 21 	call	0x436e	; 0x436e <EM_get_collections>
	EM_get_Vcc(&vccx);
    2edc:	83 e1       	ldi	r24, 0x13	; 19
    2ede:	9e e0       	ldi	r25, 0x0E	; 14
    2ee0:	0e 94 18 20 	call	0x4030	; 0x4030 <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    2ee4:	8f e0       	ldi	r24, 0x0F	; 15
    2ee6:	9e e0       	ldi	r25, 0x0E	; 14
    2ee8:	0e 94 09 20 	call	0x4012	; 0x4012 <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    2eec:	8b e0       	ldi	r24, 0x0B	; 11
    2eee:	9e e0       	ldi	r25, 0x0E	; 14
    2ef0:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    2ef4:	0e 94 3b 22 	call	0x4476	; 0x4476 <EM_get_heat_up_time>
    2ef8:	80 93 46 0e 	sts	0x0E46, r24	; 0x800e46 <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    2efc:	0e 94 41 22 	call	0x4482	; 0x4482 <EM_get_air_pump_time>
    2f00:	90 93 30 0e 	sts	0x0E30, r25	; 0x800e30 <airPumpTime+0x1>
    2f04:	80 93 2f 0e 	sts	0x0E2F, r24	; 0x800e2f <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    2f08:	0e 94 47 22 	call	0x448e	; 0x448e <EM_get_sp_interval>
    2f0c:	80 93 45 0e 	sts	0x0E45, r24	; 0x800e45 <samplingProcessInterval>
	return true;
}
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	08 95       	ret

Disassembly of section .text.join_lora:

0000432a <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    432a:	47 ea       	ldi	r20, 0xA7	; 167
    432c:	5d e0       	ldi	r21, 0x0D	; 13
    432e:	68 ec       	ldi	r22, 0xC8	; 200
    4330:	7d e0       	ldi	r23, 0x0D	; 13
    4332:	89 ed       	ldi	r24, 0xD9	; 217
    4334:	9d e0       	ldi	r25, 0x0D	; 13
    4336:	0e 94 be 22 	call	0x457c	; 0x457c <LM_join_network>
}
    433a:	08 95       	ret

Disassembly of section .text.set_wakeup:

0000450a <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
    450a:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <samplingProcessInterval>
    450e:	0e 94 e5 10 	call	0x21ca	; 0x21ca <RTC_set_wake_up_interrupt_minutes>
}
    4512:	08 95       	ret

Disassembly of section .text.send_header:

000037a8 <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	e4 97       	sbiw	r28, 0x34	; 52
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    37bc:	be 01       	movw	r22, r28
    37be:	6c 5c       	subi	r22, 0xCC	; 204
    37c0:	7f 4f       	sbci	r23, 0xFF	; 255
    37c2:	ce 01       	movw	r24, r28
    37c4:	01 96       	adiw	r24, 0x01	; 1
    37c6:	0e 94 77 1f 	call	0x3eee	; 0x3eee <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    37ca:	6c a9       	ldd	r22, Y+52	; 0x34
    37cc:	ce 01       	movw	r24, r28
    37ce:	01 96       	adiw	r24, 0x01	; 1
    37d0:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <LM_send_uplink>
}
    37d4:	e4 96       	adiw	r28, 0x34	; 52
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	f8 94       	cli
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	cd bf       	out	0x3d, r28	; 61
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	08 95       	ret

Disassembly of section .text.stage_0:

0000202c <stage_0>:
/************************************************************************/
static STAGE_STATUS stage_0(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
    202c:	80 91 4a 0e 	lds	r24, 0x0E4A	; 0x800e4a <state_s0>
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	29 f1       	breq	.+74     	; 0x207e <stage_0+0x52>
    2034:	28 f4       	brcc	.+10     	; 0x2040 <stage_0+0x14>
    2036:	88 23       	and	r24, r24
    2038:	51 f0       	breq	.+20     	; 0x204e <stage_0+0x22>
    203a:	81 30       	cpi	r24, 0x01	; 1
    203c:	c1 f0       	breq	.+48     	; 0x206e <stage_0+0x42>
    203e:	f6 cf       	rjmp	.-20     	; 0x202c <stage_0>
    2040:	84 30       	cpi	r24, 0x04	; 4
    2042:	09 f4       	brne	.+2      	; 0x2046 <stage_0+0x1a>
    2044:	4f c0       	rjmp	.+158    	; 0x20e4 <stage_0+0xb8>
    2046:	38 f1       	brcs	.+78     	; 0x2096 <stage_0+0x6a>
    2048:	85 30       	cpi	r24, 0x05	; 5
    204a:	89 f1       	breq	.+98     	; 0x20ae <stage_0+0x82>
    204c:	ef cf       	rjmp	.-34     	; 0x202c <stage_0>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    204e:	e4 e8       	ldi	r30, 0x84	; 132
    2050:	fd e0       	ldi	r31, 0x0D	; 13
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	4a e6       	ldi	r20, 0x6A	; 106
    2058:	59 e0       	ldi	r21, 0x09	; 9
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	0e 94 a8 18 	call	0x3150	; 0x3150 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2062:	81 11       	cpse	r24, r1
    2064:	43 c0       	rjmp	.+134    	; 0x20ec <stage_0+0xc0>
			
				state_s0=STAGE_GET_TIME;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <state_s0>
			break;
    206c:	df cf       	rjmp	.-66     	; 0x202c <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    206e:	84 ef       	ldi	r24, 0xF4	; 244
    2070:	9d e0       	ldi	r25, 0x0D	; 13
    2072:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <RTC_get_current_time>
				state_s0=STAGE_START;
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <state_s0>
			break;
    207c:	d7 cf       	rjmp	.-82     	; 0x202c <stage_0>
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(methHeatUpTime); //Should be changed
    207e:	80 91 46 0e 	lds	r24, 0x0E46	; 0x800e46 <methHeatUpTime>
    2082:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <ADC_meth_sens_power_on>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2086:	81 11       	cpse	r24, r1
    2088:	33 c0       	rjmp	.+102    	; 0x20f0 <stage_0+0xc4>
			
				SCD30_start_sampling();
    208a:	0e 94 5f 22 	call	0x44be	; 0x44be <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <state_s0>
			break;
    2094:	cb cf       	rjmp	.-106    	; 0x202c <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    2096:	0e 94 8c 21 	call	0x4318	; 0x4318 <ADC_meth_sens_ready>
    209a:	88 23       	and	r24, r24
    209c:	59 f1       	breq	.+86     	; 0x20f4 <stage_0+0xc8>
    209e:	0e 94 9a 20 	call	0x4134	; 0x4134 <SCD30_is_sampling_done>
    20a2:	88 23       	and	r24, r24
    20a4:	49 f1       	breq	.+82     	; 0x20f8 <stage_0+0xcc>
				state_s0=STAGE_UPDATE_MRPP;
    20a6:	85 e0       	ldi	r24, 0x05	; 5
    20a8:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <state_s0>
			break;
    20ac:	bf cf       	rjmp	.-130    	; 0x202c <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    20ae:	27 e1       	ldi	r18, 0x17	; 23
    20b0:	3e e0       	ldi	r19, 0x0E	; 14
    20b2:	40 91 f4 0d 	lds	r20, 0x0DF4	; 0x800df4 <dt>
    20b6:	50 91 f5 0d 	lds	r21, 0x0DF5	; 0x800df5 <dt+0x1>
    20ba:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <dt+0x2>
    20be:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <dt+0x3>
    20c2:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <dt+0x4>
    20c6:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <dt+0x5>
    20ca:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    20ce:	4a e6       	ldi	r20, 0x6A	; 106
    20d0:	59 e0       	ldi	r21, 0x09	; 9
    20d2:	67 e1       	ldi	r22, 0x17	; 23
    20d4:	7e e0       	ldi	r23, 0x0E	; 14
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    20dc:	84 e0       	ldi	r24, 0x04	; 4
    20de:	80 93 4a 0e 	sts	0x0E4A, r24	; 0x800e4a <state_s0>
			break;
    20e2:	a4 cf       	rjmp	.-184    	; 0x202c <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    20e4:	0e 94 79 21 	call	0x42f2	; 0x42f2 <SCD30_deinit_sampling>
				return STAGE_DONE;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    20ec:	83 e0       	ldi	r24, 0x03	; 3
    20ee:	08 95       	ret
				state_s0=STAGE_START;
			break;
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(methHeatUpTime); //Should be changed
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	08 95       	ret
    20f8:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    20fa:	08 95       	ret

Disassembly of section .text.stage_1:

000017f2 <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
    17fa:	80 91 49 0e 	lds	r24, 0x0E49	; 0x800e49 <state_s1>
    17fe:	82 30       	cpi	r24, 0x02	; 2
    1800:	09 f4       	brne	.+2      	; 0x1804 <stage_1+0x12>
    1802:	4d c0       	rjmp	.+154    	; 0x189e <stage_1+0xac>
    1804:	30 f4       	brcc	.+12     	; 0x1812 <stage_1+0x20>
    1806:	88 23       	and	r24, r24
    1808:	69 f0       	breq	.+26     	; 0x1824 <stage_1+0x32>
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	09 f4       	brne	.+2      	; 0x1810 <stage_1+0x1e>
    180e:	3f c0       	rjmp	.+126    	; 0x188e <stage_1+0x9c>
    1810:	f4 cf       	rjmp	.-24     	; 0x17fa <stage_1+0x8>
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	09 f4       	brne	.+2      	; 0x1818 <stage_1+0x26>
    1816:	79 c0       	rjmp	.+242    	; 0x190a <stage_1+0x118>
    1818:	08 f4       	brcc	.+2      	; 0x181c <stage_1+0x2a>
    181a:	49 c0       	rjmp	.+146    	; 0x18ae <stage_1+0xbc>
    181c:	85 30       	cpi	r24, 0x05	; 5
    181e:	09 f4       	brne	.+2      	; 0x1822 <stage_1+0x30>
    1820:	52 c0       	rjmp	.+164    	; 0x18c6 <stage_1+0xd4>
    1822:	eb cf       	rjmp	.-42     	; 0x17fa <stage_1+0x8>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    1824:	e4 e8       	ldi	r30, 0x84	; 132
    1826:	fd e0       	ldi	r31, 0x0D	; 13
    1828:	62 85       	ldd	r22, Z+10	; 0x0a
    182a:	73 85       	ldd	r23, Z+11	; 0x0b
    182c:	4a e6       	ldi	r20, 0x6A	; 106
    182e:	59 e0       	ldi	r21, 0x09	; 9
    1830:	84 85       	ldd	r24, Z+12	; 0x0c
    1832:	95 85       	ldd	r25, Z+13	; 0x0d
    1834:	0e 94 a8 18 	call	0x3150	; 0x3150 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1838:	81 11       	cpse	r24, r1
    183a:	6d c0       	rjmp	.+218    	; 0x1916 <stage_1+0x124>
				
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    183c:	e0 90 0b 0e 	lds	r14, 0x0E0B	; 0x800e0b <ppmx>
    1840:	f0 90 0c 0e 	lds	r15, 0x0E0C	; 0x800e0c <ppmx+0x1>
    1844:	00 91 0d 0e 	lds	r16, 0x0E0D	; 0x800e0d <ppmx+0x2>
    1848:	10 91 0e 0e 	lds	r17, 0x0E0E	; 0x800e0e <ppmx+0x3>
    184c:	20 91 0f 0e 	lds	r18, 0x0E0F	; 0x800e0f <rrlx>
    1850:	30 91 10 0e 	lds	r19, 0x0E10	; 0x800e10 <rrlx+0x1>
    1854:	40 91 11 0e 	lds	r20, 0x0E11	; 0x800e11 <rrlx+0x2>
    1858:	50 91 12 0e 	lds	r21, 0x0E12	; 0x800e12 <rrlx+0x3>
    185c:	60 91 13 0e 	lds	r22, 0x0E13	; 0x800e13 <vccx>
    1860:	70 91 14 0e 	lds	r23, 0x0E14	; 0x800e14 <vccx+0x1>
    1864:	80 91 15 0e 	lds	r24, 0x0E15	; 0x800e15 <vccx+0x2>
    1868:	90 91 16 0e 	lds	r25, 0x0E16	; 0x800e16 <vccx+0x3>
    186c:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <ADC_set_conf_parameters>
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    1870:	e4 e8       	ldi	r30, 0x84	; 132
    1872:	fd e0       	ldi	r31, 0x0D	; 13
    1874:	65 81       	ldd	r22, Z+5	; 0x05
    1876:	76 81       	ldd	r23, Z+6	; 0x06
    1878:	42 e1       	ldi	r20, 0x12	; 18
    187a:	57 e0       	ldi	r21, 0x07	; 7
    187c:	87 81       	ldd	r24, Z+7	; 0x07
    187e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1882:	81 11       	cpse	r24, r1
    1884:	4a c0       	rjmp	.+148    	; 0x191a <stage_1+0x128>
				
				state_s1=STAGE_GET_TIME;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <state_s1>
			break;
    188c:	b6 cf       	rjmp	.-148    	; 0x17fa <stage_1+0x8>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    188e:	84 ef       	ldi	r24, 0xF4	; 244
    1890:	9d e0       	ldi	r25, 0x0D	; 13
    1892:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <RTC_get_current_time>
				
				state_s1=STAGE_START;
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <state_s1>
			break;
    189c:	ae cf       	rjmp	.-164    	; 0x17fa <stage_1+0x8>
			
			case STAGE_START:
				SCD30_start_sampling();
    189e:	0e 94 5f 22 	call	0x44be	; 0x44be <SCD30_start_sampling>
				ADC_start_sampling();
    18a2:	0e 94 35 22 	call	0x446a	; 0x446a <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    18a6:	83 e0       	ldi	r24, 0x03	; 3
    18a8:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <state_s1>
			break;
    18ac:	a6 cf       	rjmp	.-180    	; 0x17fa <stage_1+0x8>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    18ae:	0e 94 9a 20 	call	0x4134	; 0x4134 <SCD30_is_sampling_done>
    18b2:	88 23       	and	r24, r24
    18b4:	a1 f1       	breq	.+104    	; 0x191e <stage_1+0x12c>
    18b6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <ADC_is_sampling_done>
    18ba:	88 23       	and	r24, r24
    18bc:	91 f1       	breq	.+100    	; 0x1922 <stage_1+0x130>
				state_s1=STAGE_UPDATE_MRPP;
    18be:	85 e0       	ldi	r24, 0x05	; 5
    18c0:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <state_s1>
			break;
    18c4:	9a cf       	rjmp	.-204    	; 0x17fa <stage_1+0x8>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    18c6:	27 e1       	ldi	r18, 0x17	; 23
    18c8:	3e e0       	ldi	r19, 0x0E	; 14
    18ca:	40 91 f4 0d 	lds	r20, 0x0DF4	; 0x800df4 <dt>
    18ce:	50 91 f5 0d 	lds	r21, 0x0DF5	; 0x800df5 <dt+0x1>
    18d2:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <dt+0x2>
    18d6:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <dt+0x3>
    18da:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <dt+0x4>
    18de:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <dt+0x5>
    18e2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    18e6:	4a e6       	ldi	r20, 0x6A	; 106
    18e8:	59 e0       	ldi	r21, 0x09	; 9
    18ea:	67 e1       	ldi	r22, 0x17	; 23
    18ec:	7e e0       	ldi	r23, 0x0E	; 14
    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    18f4:	42 e1       	ldi	r20, 0x12	; 18
    18f6:	57 e0       	ldi	r21, 0x07	; 7
    18f8:	67 e1       	ldi	r22, 0x17	; 23
    18fa:	7e e0       	ldi	r23, 0x0E	; 14
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    1902:	84 e0       	ldi	r24, 0x04	; 4
    1904:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <state_s1>
			break;
    1908:	78 cf       	rjmp	.-272    	; 0x17fa <stage_1+0x8>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    190a:	0e 94 79 21 	call	0x42f2	; 0x42f2 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    190e:	0e 94 6f 21 	call	0x42de	; 0x42de <ADC_deinit_sampling>
				return STAGE_DONE;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	07 c0       	rjmp	.+14     	; 0x1924 <stage_1+0x132>
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1916:	83 e0       	ldi	r24, 0x03	; 3
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <stage_1+0x132>
				
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <stage_1+0x132>
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <stage_1+0x132>
    1922:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	08 95       	ret

Disassembly of section .text.stage_3:

0000192e <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    192e:	ef 92       	push	r14
    1930:	ff 92       	push	r15
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s3){
    1936:	80 91 47 0e 	lds	r24, 0x0E47	; 0x800e47 <state_s3>
    193a:	82 30       	cpi	r24, 0x02	; 2
    193c:	09 f4       	brne	.+2      	; 0x1940 <stage_3+0x12>
    193e:	4d c0       	rjmp	.+154    	; 0x19da <stage_3+0xac>
    1940:	30 f4       	brcc	.+12     	; 0x194e <stage_3+0x20>
    1942:	88 23       	and	r24, r24
    1944:	69 f0       	breq	.+26     	; 0x1960 <stage_3+0x32>
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	09 f4       	brne	.+2      	; 0x194c <stage_3+0x1e>
    194a:	3f c0       	rjmp	.+126    	; 0x19ca <stage_3+0x9c>
    194c:	f4 cf       	rjmp	.-24     	; 0x1936 <stage_3+0x8>
    194e:	84 30       	cpi	r24, 0x04	; 4
    1950:	09 f4       	brne	.+2      	; 0x1954 <stage_3+0x26>
    1952:	79 c0       	rjmp	.+242    	; 0x1a46 <stage_3+0x118>
    1954:	08 f4       	brcc	.+2      	; 0x1958 <stage_3+0x2a>
    1956:	49 c0       	rjmp	.+146    	; 0x19ea <stage_3+0xbc>
    1958:	85 30       	cpi	r24, 0x05	; 5
    195a:	09 f4       	brne	.+2      	; 0x195e <stage_3+0x30>
    195c:	52 c0       	rjmp	.+164    	; 0x1a02 <stage_3+0xd4>
    195e:	eb cf       	rjmp	.-42     	; 0x1936 <stage_3+0x8>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    1960:	e4 e8       	ldi	r30, 0x84	; 132
    1962:	fd e0       	ldi	r31, 0x0D	; 13
    1964:	66 8d       	ldd	r22, Z+30	; 0x1e
    1966:	77 8d       	ldd	r23, Z+31	; 0x1f
    1968:	4a e6       	ldi	r20, 0x6A	; 106
    196a:	59 e0       	ldi	r21, 0x09	; 9
    196c:	80 a1       	ldd	r24, Z+32	; 0x20
    196e:	91 a1       	ldd	r25, Z+33	; 0x21
    1970:	0e 94 a8 18 	call	0x3150	; 0x3150 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1974:	81 11       	cpse	r24, r1
    1976:	6d c0       	rjmp	.+218    	; 0x1a52 <stage_3+0x124>
				
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    1978:	e0 90 0b 0e 	lds	r14, 0x0E0B	; 0x800e0b <ppmx>
    197c:	f0 90 0c 0e 	lds	r15, 0x0E0C	; 0x800e0c <ppmx+0x1>
    1980:	00 91 0d 0e 	lds	r16, 0x0E0D	; 0x800e0d <ppmx+0x2>
    1984:	10 91 0e 0e 	lds	r17, 0x0E0E	; 0x800e0e <ppmx+0x3>
    1988:	20 91 0f 0e 	lds	r18, 0x0E0F	; 0x800e0f <rrlx>
    198c:	30 91 10 0e 	lds	r19, 0x0E10	; 0x800e10 <rrlx+0x1>
    1990:	40 91 11 0e 	lds	r20, 0x0E11	; 0x800e11 <rrlx+0x2>
    1994:	50 91 12 0e 	lds	r21, 0x0E12	; 0x800e12 <rrlx+0x3>
    1998:	60 91 13 0e 	lds	r22, 0x0E13	; 0x800e13 <vccx>
    199c:	70 91 14 0e 	lds	r23, 0x0E14	; 0x800e14 <vccx+0x1>
    19a0:	80 91 15 0e 	lds	r24, 0x0E15	; 0x800e15 <vccx+0x2>
    19a4:	90 91 16 0e 	lds	r25, 0x0E16	; 0x800e16 <vccx+0x3>
    19a8:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <ADC_set_conf_parameters>
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    19ac:	e4 e8       	ldi	r30, 0x84	; 132
    19ae:	fd e0       	ldi	r31, 0x0D	; 13
    19b0:	61 8d       	ldd	r22, Z+25	; 0x19
    19b2:	72 8d       	ldd	r23, Z+26	; 0x1a
    19b4:	42 e1       	ldi	r20, 0x12	; 18
    19b6:	57 e0       	ldi	r21, 0x07	; 7
    19b8:	83 8d       	ldd	r24, Z+27	; 0x1b
    19ba:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    19be:	81 11       	cpse	r24, r1
    19c0:	4a c0       	rjmp	.+148    	; 0x1a56 <stage_3+0x128>
			
				state_s3=STAGE_GET_TIME;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <state_s3>
			break;
    19c8:	b6 cf       	rjmp	.-148    	; 0x1936 <stage_3+0x8>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    19ca:	84 ef       	ldi	r24, 0xF4	; 244
    19cc:	9d e0       	ldi	r25, 0x0D	; 13
    19ce:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <RTC_get_current_time>
				
				state_s3=STAGE_START;
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <state_s3>
			break;
    19d8:	ae cf       	rjmp	.-164    	; 0x1936 <stage_3+0x8>
			
			case STAGE_START:
				SCD30_start_sampling();
    19da:	0e 94 5f 22 	call	0x44be	; 0x44be <SCD30_start_sampling>
				ADC_start_sampling();
    19de:	0e 94 35 22 	call	0x446a	; 0x446a <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <state_s3>
			break;
    19e8:	a6 cf       	rjmp	.-180    	; 0x1936 <stage_3+0x8>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    19ea:	0e 94 9a 20 	call	0x4134	; 0x4134 <SCD30_is_sampling_done>
    19ee:	88 23       	and	r24, r24
    19f0:	a1 f1       	breq	.+104    	; 0x1a5a <stage_3+0x12c>
    19f2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <ADC_is_sampling_done>
    19f6:	88 23       	and	r24, r24
    19f8:	91 f1       	breq	.+100    	; 0x1a5e <stage_3+0x130>
				state_s3=STAGE_UPDATE_MRPP;
    19fa:	85 e0       	ldi	r24, 0x05	; 5
    19fc:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <state_s3>
			break;
    1a00:	9a cf       	rjmp	.-204    	; 0x1936 <stage_3+0x8>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1a02:	27 e1       	ldi	r18, 0x17	; 23
    1a04:	3e e0       	ldi	r19, 0x0E	; 14
    1a06:	40 91 f4 0d 	lds	r20, 0x0DF4	; 0x800df4 <dt>
    1a0a:	50 91 f5 0d 	lds	r21, 0x0DF5	; 0x800df5 <dt+0x1>
    1a0e:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <dt+0x2>
    1a12:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <dt+0x3>
    1a16:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <dt+0x4>
    1a1a:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <dt+0x5>
    1a1e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    1a22:	4a e6       	ldi	r20, 0x6A	; 106
    1a24:	59 e0       	ldi	r21, 0x09	; 9
    1a26:	67 e1       	ldi	r22, 0x17	; 23
    1a28:	7e e0       	ldi	r23, 0x0E	; 14
    1a2a:	87 e0       	ldi	r24, 0x07	; 7
    1a2c:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    1a30:	42 e1       	ldi	r20, 0x12	; 18
    1a32:	57 e0       	ldi	r21, 0x07	; 7
    1a34:	67 e1       	ldi	r22, 0x17	; 23
    1a36:	7e e0       	ldi	r23, 0x0E	; 14
    1a38:	86 e0       	ldi	r24, 0x06	; 6
    1a3a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    1a3e:	84 e0       	ldi	r24, 0x04	; 4
    1a40:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <state_s3>
			break;
    1a44:	78 cf       	rjmp	.-272    	; 0x1936 <stage_3+0x8>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    1a46:	0e 94 79 21 	call	0x42f2	; 0x42f2 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    1a4a:	0e 94 6f 21 	call	0x42de	; 0x42de <ADC_deinit_sampling>
				return STAGE_DONE;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	07 c0       	rjmp	.+14     	; 0x1a60 <stage_3+0x132>
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s3){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	05 c0       	rjmp	.+10     	; 0x1a60 <stage_3+0x132>
				
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	03 c0       	rjmp	.+6      	; 0x1a60 <stage_3+0x132>
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <stage_3+0x132>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
				ADC_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	ff 90       	pop	r15
    1a66:	ef 90       	pop	r14
    1a68:	08 95       	ret

Disassembly of section .text.stage_2:

0000155e <stage_2>:
}

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;

	while(1){
		switch(state_s2){
    1566:	80 91 48 0e 	lds	r24, 0x0E48	; 0x800e48 <state_s2>
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	09 f4       	brne	.+2      	; 0x1570 <stage_2+0x12>
    156e:	4d c0       	rjmp	.+154    	; 0x160a <stage_2+0xac>
    1570:	30 f4       	brcc	.+12     	; 0x157e <stage_2+0x20>
    1572:	88 23       	and	r24, r24
    1574:	69 f0       	breq	.+26     	; 0x1590 <stage_2+0x32>
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	09 f4       	brne	.+2      	; 0x157c <stage_2+0x1e>
    157a:	3f c0       	rjmp	.+126    	; 0x15fa <stage_2+0x9c>
    157c:	f4 cf       	rjmp	.-24     	; 0x1566 <stage_2+0x8>
    157e:	84 30       	cpi	r24, 0x04	; 4
    1580:	09 f4       	brne	.+2      	; 0x1584 <stage_2+0x26>
    1582:	83 c0       	rjmp	.+262    	; 0x168a <stage_2+0x12c>
    1584:	08 f4       	brcc	.+2      	; 0x1588 <stage_2+0x2a>
    1586:	4f c0       	rjmp	.+158    	; 0x1626 <stage_2+0xc8>
    1588:	85 30       	cpi	r24, 0x05	; 5
    158a:	09 f4       	brne	.+2      	; 0x158e <stage_2+0x30>
    158c:	5c c0       	rjmp	.+184    	; 0x1646 <stage_2+0xe8>
    158e:	eb cf       	rjmp	.-42     	; 0x1566 <stage_2+0x8>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    1590:	e4 e8       	ldi	r30, 0x84	; 132
    1592:	fd e0       	ldi	r31, 0x0D	; 13
    1594:	64 89       	ldd	r22, Z+20	; 0x14
    1596:	75 89       	ldd	r23, Z+21	; 0x15
    1598:	4a e6       	ldi	r20, 0x6A	; 106
    159a:	59 e0       	ldi	r21, 0x09	; 9
    159c:	86 89       	ldd	r24, Z+22	; 0x16
    159e:	97 89       	ldd	r25, Z+23	; 0x17
    15a0:	0e 94 a8 18 	call	0x3150	; 0x3150 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    15a4:	81 11       	cpse	r24, r1
    15a6:	77 c0       	rjmp	.+238    	; 0x1696 <stage_2+0x138>
				
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    15a8:	e0 90 0b 0e 	lds	r14, 0x0E0B	; 0x800e0b <ppmx>
    15ac:	f0 90 0c 0e 	lds	r15, 0x0E0C	; 0x800e0c <ppmx+0x1>
    15b0:	00 91 0d 0e 	lds	r16, 0x0E0D	; 0x800e0d <ppmx+0x2>
    15b4:	10 91 0e 0e 	lds	r17, 0x0E0E	; 0x800e0e <ppmx+0x3>
    15b8:	20 91 0f 0e 	lds	r18, 0x0E0F	; 0x800e0f <rrlx>
    15bc:	30 91 10 0e 	lds	r19, 0x0E10	; 0x800e10 <rrlx+0x1>
    15c0:	40 91 11 0e 	lds	r20, 0x0E11	; 0x800e11 <rrlx+0x2>
    15c4:	50 91 12 0e 	lds	r21, 0x0E12	; 0x800e12 <rrlx+0x3>
    15c8:	60 91 13 0e 	lds	r22, 0x0E13	; 0x800e13 <vccx>
    15cc:	70 91 14 0e 	lds	r23, 0x0E14	; 0x800e14 <vccx+0x1>
    15d0:	80 91 15 0e 	lds	r24, 0x0E15	; 0x800e15 <vccx+0x2>
    15d4:	90 91 16 0e 	lds	r25, 0x0E16	; 0x800e16 <vccx+0x3>
    15d8:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <ADC_set_conf_parameters>
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    15dc:	e4 e8       	ldi	r30, 0x84	; 132
    15de:	fd e0       	ldi	r31, 0x0D	; 13
    15e0:	67 85       	ldd	r22, Z+15	; 0x0f
    15e2:	70 89       	ldd	r23, Z+16	; 0x10
    15e4:	42 e1       	ldi	r20, 0x12	; 18
    15e6:	57 e0       	ldi	r21, 0x07	; 7
    15e8:	81 89       	ldd	r24, Z+17	; 0x11
    15ea:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    15ee:	81 11       	cpse	r24, r1
    15f0:	54 c0       	rjmp	.+168    	; 0x169a <stage_2+0x13c>
			
				state_s2=STAGE_GET_TIME;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <state_s2>
			break;
    15f8:	b6 cf       	rjmp	.-148    	; 0x1566 <stage_2+0x8>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    15fa:	84 ef       	ldi	r24, 0xF4	; 244
    15fc:	9d e0       	ldi	r25, 0x0D	; 13
    15fe:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <RTC_get_current_time>
			
				state_s2=STAGE_START;
    1602:	82 e0       	ldi	r24, 0x02	; 2
    1604:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <state_s2>
			break;
    1608:	ae cf       	rjmp	.-164    	; 0x1566 <stage_2+0x8>
			
			case STAGE_START:
				SCD30_start_sampling();
    160a:	0e 94 5f 22 	call	0x44be	; 0x44be <SCD30_start_sampling>
				ADC_start_sampling();
    160e:	0e 94 35 22 	call	0x446a	; 0x446a <ADC_start_sampling>
				PUMP_start(airPumpTime);
    1612:	80 91 2f 0e 	lds	r24, 0x0E2F	; 0x800e2f <airPumpTime>
    1616:	90 91 30 0e 	lds	r25, 0x0E30	; 0x800e30 <airPumpTime+0x1>
    161a:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <PUMP_start>
			
				state_s2=STAGE_WAIT;
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <state_s2>
			break;
    1624:	a0 cf       	rjmp	.-192    	; 0x1566 <stage_2+0x8>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    1626:	0e 94 9a 20 	call	0x4134	; 0x4134 <SCD30_is_sampling_done>
    162a:	88 23       	and	r24, r24
    162c:	c1 f1       	breq	.+112    	; 0x169e <stage_2+0x140>
    162e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <ADC_is_sampling_done>
    1632:	88 23       	and	r24, r24
    1634:	b1 f1       	breq	.+108    	; 0x16a2 <stage_2+0x144>
    1636:	0e 94 8c 20 	call	0x4118	; 0x4118 <PUMP_is_done>
    163a:	88 23       	and	r24, r24
    163c:	a1 f1       	breq	.+104    	; 0x16a6 <stage_2+0x148>
				state_s2=STAGE_UPDATE_MRPP;
    163e:	85 e0       	ldi	r24, 0x05	; 5
    1640:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <state_s2>
			break;
    1644:	90 cf       	rjmp	.-224    	; 0x1566 <stage_2+0x8>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1646:	27 e1       	ldi	r18, 0x17	; 23
    1648:	3e e0       	ldi	r19, 0x0E	; 14
    164a:	40 91 f4 0d 	lds	r20, 0x0DF4	; 0x800df4 <dt>
    164e:	50 91 f5 0d 	lds	r21, 0x0DF5	; 0x800df5 <dt+0x1>
    1652:	60 91 f6 0d 	lds	r22, 0x0DF6	; 0x800df6 <dt+0x2>
    1656:	70 91 f7 0d 	lds	r23, 0x0DF7	; 0x800df7 <dt+0x3>
    165a:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <dt+0x4>
    165e:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <dt+0x5>
    1662:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    1666:	4a e6       	ldi	r20, 0x6A	; 106
    1668:	59 e0       	ldi	r21, 0x09	; 9
    166a:	67 e1       	ldi	r22, 0x17	; 23
    166c:	7e e0       	ldi	r23, 0x0E	; 14
    166e:	85 e0       	ldi	r24, 0x05	; 5
    1670:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    1674:	42 e1       	ldi	r20, 0x12	; 18
    1676:	57 e0       	ldi	r21, 0x07	; 7
    1678:	67 e1       	ldi	r22, 0x17	; 23
    167a:	7e e0       	ldi	r23, 0x0E	; 14
    167c:	84 e0       	ldi	r24, 0x04	; 4
    167e:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    1682:	84 e0       	ldi	r24, 0x04	; 4
    1684:	80 93 48 0e 	sts	0x0E48, r24	; 0x800e48 <state_s2>
			break;
    1688:	6e cf       	rjmp	.-292    	; 0x1566 <stage_2+0x8>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    168a:	0e 94 79 21 	call	0x42f2	; 0x42f2 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    168e:	0e 94 6f 21 	call	0x42de	; 0x42de <ADC_deinit_sampling>
				return STAGE_DONE;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	09 c0       	rjmp	.+18     	; 0x16a8 <stage_2+0x14a>

	while(1){
		switch(state_s2){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <stage_2+0x14a>
				
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	05 c0       	rjmp	.+10     	; 0x16a8 <stage_2+0x14a>
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <stage_2+0x14a>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <stage_2+0x14a>
    16a6:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	08 95       	ret

Disassembly of section .text.send_body:

00003768 <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	e4 97       	sbiw	r28, 0x34	; 52
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    377c:	ae 01       	movw	r20, r28
    377e:	4c 5c       	subi	r20, 0xCC	; 204
    3780:	5f 4f       	sbci	r21, 0xFF	; 255
    3782:	be 01       	movw	r22, r28
    3784:	6f 5f       	subi	r22, 0xFF	; 255
    3786:	7f 4f       	sbci	r23, 0xFF	; 255
    3788:	0e 94 86 13 	call	0x270c	; 0x270c <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    378c:	6c a9       	ldd	r22, Y+52	; 0x34
    378e:	ce 01       	movw	r24, r28
    3790:	01 96       	adiw	r24, 0x01	; 1
    3792:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <LM_send_uplink>
}
    3796:	e4 96       	adiw	r28, 0x34	; 52
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	08 95       	ret

Disassembly of section .text.decode_body_response:

00003e16 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    3e16:	cf 93       	push	r28
	switch(status){
    3e18:	63 30       	cpi	r22, 0x03	; 3
    3e1a:	71 f0       	breq	.+28     	; 0x3e38 <decode_body_response+0x22>
    3e1c:	18 f4       	brcc	.+6      	; 0x3e24 <decode_body_response+0xe>
    3e1e:	66 23       	and	r22, r22
    3e20:	31 f0       	breq	.+12     	; 0x3e2e <decode_body_response+0x18>
    3e22:	03 c0       	rjmp	.+6      	; 0x3e2a <decode_body_response+0x14>
    3e24:	65 50       	subi	r22, 0x05	; 5
    3e26:	62 30       	cpi	r22, 0x02	; 2
    3e28:	10 f0       	brcs	.+4      	; 0x3e2e <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    3e2a:	85 e1       	ldi	r24, 0x15	; 21
    3e2c:	06 c0       	rjmp	.+12     	; 0x3e3a <decode_body_response+0x24>
    3e2e:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    3e30:	0e 94 59 22 	call	0x44b2	; 0x44b2 <MRPP_set_body_sent>
			return success;
    3e34:	8c 2f       	mov	r24, r28
    3e36:	01 c0       	rjmp	.+2      	; 0x3e3a <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    3e38:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3e3a:	cf 91       	pop	r28
    3e3c:	08 95       	ret

Disassembly of section .text.send_tail:

000037e6 <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    37e6:	cf 93       	push	r28
    37e8:	df 93       	push	r29
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
    37ee:	e4 97       	sbiw	r28, 0x34	; 52
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    37fa:	be 01       	movw	r22, r28
    37fc:	6c 5c       	subi	r22, 0xCC	; 204
    37fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3800:	ce 01       	movw	r24, r28
    3802:	01 96       	adiw	r24, 0x01	; 1
    3804:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    3808:	6c a9       	ldd	r22, Y+52	; 0x34
    380a:	ce 01       	movw	r24, r28
    380c:	01 96       	adiw	r24, 0x01	; 1
    380e:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <LM_send_uplink>
}
    3812:	e4 96       	adiw	r28, 0x34	; 52
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	df 91       	pop	r29
    3820:	cf 91       	pop	r28
    3822:	08 95       	ret

Disassembly of section .text.send_msg:

000041ce <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    41ce:	0e 94 1a 14 	call	0x2834	; 0x2834 <uart1_hal_send_string>
    41d2:	2f ef       	ldi	r18, 0xFF	; 255
    41d4:	80 e7       	ldi	r24, 0x70	; 112
    41d6:	92 e0       	ldi	r25, 0x02	; 2
    41d8:	21 50       	subi	r18, 0x01	; 1
    41da:	80 40       	sbci	r24, 0x00	; 0
    41dc:	90 40       	sbci	r25, 0x00	; 0
    41de:	e1 f7       	brne	.-8      	; 0x41d8 <send_msg+0xa>
    41e0:	00 c0       	rjmp	.+0      	; 0x41e2 <send_msg+0x14>
    41e2:	00 00       	nop
    41e4:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00000b46 <MAINPG_start>:


static void send_msg(const char msg[]);


void MAINPG_start(){
 b46:	1f 93       	push	r17
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	STAGE_STATUS stageStatus;
	bool fromSleep=false;
 b4c:	10 e0       	ldi	r17, 0x00	; 0

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
 b4e:	c0 e0       	ldi	r28, 0x00	; 0
 b50:	18 c0       	rjmp	.+48     	; 0xb82 <MAINPG_start+0x3c>
				
				//Set pull up
				set_bit(PORTB, 0);
				set_bit(PORTB, 1);
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
 b52:	c6 e0       	ldi	r28, 0x06	; 6
 b54:	16 c0       	rjmp	.+44     	; 0xb82 <MAINPG_start+0x3c>
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
 b56:	c5 e0       	ldi	r28, 0x05	; 5
 b58:	14 c0       	rjmp	.+40     	; 0xb82 <MAINPG_start+0x3c>
 b5a:	c5 e0       	ldi	r28, 0x05	; 5
 b5c:	12 c0       	rjmp	.+36     	; 0xb82 <MAINPG_start+0x3c>
 b5e:	c5 e0       	ldi	r28, 0x05	; 5
 b60:	10 c0       	rjmp	.+32     	; 0xb82 <MAINPG_start+0x3c>
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
 b62:	c5 e0       	ldi	r28, 0x05	; 5
 b64:	0e c0       	rjmp	.+28     	; 0xb82 <MAINPG_start+0x3c>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 b66:	c5 e1       	ldi	r28, 0x15	; 21
 b68:	0c c0       	rjmp	.+24     	; 0xb82 <MAINPG_start+0x3c>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 b6a:	c5 e1       	ldi	r28, 0x15	; 21
 b6c:	0a c0       	rjmp	.+20     	; 0xb82 <MAINPG_start+0x3c>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 b6e:	c5 e1       	ldi	r28, 0x15	; 21
 b70:	08 c0       	rjmp	.+16     	; 0xb82 <MAINPG_start+0x3c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 b72:	c5 e1       	ldi	r28, 0x15	; 21
 b74:	06 c0       	rjmp	.+12     	; 0xb82 <MAINPG_start+0x3c>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
 b76:	cd 2f       	mov	r28, r29
 b78:	04 c0       	rjmp	.+8      	; 0xb82 <MAINPG_start+0x3c>
 b7a:	cd 2f       	mov	r28, r29
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
 b7e:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
 b80:	c0 e1       	ldi	r28, 0x10	; 16
	STAGE_STATUS stageStatus;
	bool fromSleep=false;
	

	while(1){
		switch(state){
 b82:	ec 2f       	mov	r30, r28
 b84:	f0 e0       	ldi	r31, 0x00	; 0
 b86:	e7 31       	cpi	r30, 0x17	; 23
 b88:	f1 05       	cpc	r31, r1
 b8a:	d8 f7       	brcc	.-10     	; 0xb82 <MAINPG_start+0x3c>
 b8c:	eb 5a       	subi	r30, 0xAB	; 171
 b8e:	ff 4f       	sbci	r31, 0xFF	; 255
 b90:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
 b94:	0e 94 12 1c 	call	0x3824	; 0x3824 <uart0_hal_init>
				uart1_hal_init();
 b98:	0e 94 30 1c 	call	0x3860	; 0x3860 <uart1_hal_init>
				TWI_HAL_init();
 b9c:	0e 94 83 21 	call	0x4306	; 0x4306 <TWI_HAL_init>
				TC2_HAL_init();
 ba0:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <TC2_HAL_init>
				rn2483_init();
 ba4:	0e 94 8e 22 	call	0x451c	; 0x451c <rn2483_init>
				SCD30_HAL_init();
 ba8:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <SCD30_HAL_init>
				PM_HAL_adc_power_init();
 bac:	0e 94 c7 21 	call	0x438e	; 0x438e <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
 bb0:	0e 94 ce 21 	call	0x439c	; 0x439c <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
 bb4:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
 bb8:	0e 94 d5 21 	call	0x43aa	; 0x43aa <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
 bbc:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <PM_HAL_LED_power_init>
				
				//Set pull up
				set_bit(PORTB, 0);
 bc0:	85 b1       	in	r24, 0x05	; 5
 bc2:	81 60       	ori	r24, 0x01	; 1
 bc4:	85 b9       	out	0x05, r24	; 5
				set_bit(PORTB, 1);
 bc6:	85 b1       	in	r24, 0x05	; 5
 bc8:	82 60       	ori	r24, 0x02	; 2
 bca:	85 b9       	out	0x05, r24	; 5
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
 bcc:	11 11       	cpse	r17, r1
 bce:	c1 cf       	rjmp	.-126    	; 0xb52 <MAINPG_start+0xc>
 bd0:	c1 e0       	ldi	r28, 0x01	; 1
 bd2:	d7 cf       	rjmp	.-82     	; 0xb82 <MAINPG_start+0x3c>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
 bd4:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <EM_has_deveui>
 bd8:	88 23       	and	r24, r24
 bda:	09 f4       	brne	.+2      	; 0xbde <MAINPG_start+0x98>
 bdc:	bc cf       	rjmp	.-136    	; 0xb56 <MAINPG_start+0x10>
 bde:	0e 94 fe 20 	call	0x41fc	; 0x41fc <EM_has_appeui>
 be2:	88 23       	and	r24, r24
 be4:	09 f4       	brne	.+2      	; 0xbe8 <MAINPG_start+0xa2>
 be6:	b9 cf       	rjmp	.-142    	; 0xb5a <MAINPG_start+0x14>
 be8:	0e 94 09 21 	call	0x4212	; 0x4212 <EM_has_appkey>
 bec:	88 23       	and	r24, r24
 bee:	09 f4       	brne	.+2      	; 0xbf2 <MAINPG_start+0xac>
 bf0:	b6 cf       	rjmp	.-148    	; 0xb5e <MAINPG_start+0x18>
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
 bf2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <read_eeprom>
 bf6:	88 23       	and	r24, r24
 bf8:	09 f4       	brne	.+2      	; 0xbfc <MAINPG_start+0xb6>
 bfa:	b3 cf       	rjmp	.-154    	; 0xb62 <MAINPG_start+0x1c>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
 bfc:	c6 e0       	ldi	r28, 0x06	; 6
 bfe:	c1 cf       	rjmp	.-126    	; 0xb82 <MAINPG_start+0x3c>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
 c00:	60 e5       	ldi	r22, 0x50	; 80
 c02:	72 e0       	ldi	r23, 0x02	; 2
 c04:	80 e0       	ldi	r24, 0x00	; 0
 c06:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				LED_start_try_join();
 c0a:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <LED_start_try_join>
				lmStatus=join_lora();
 c0e:	0e 94 95 21 	call	0x432a	; 0x432a <join_lora>
 c12:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
 c14:	0e 94 bf 21 	call	0x437e	; 0x437e <LED_stop_try_join>
				state=decode_join_response(lmStatus);
 c18:	8c 2f       	mov	r24, r28
 c1a:	0e 94 a8 20 	call	0x4150	; 0x4150 <decode_join_response>
 c1e:	c8 2f       	mov	r28, r24
			break;
 c20:	b0 cf       	rjmp	.-160    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				LED_join_success();
 c22:	0e 94 94 1b 	call	0x3728	; 0x3728 <LED_join_success>
				state=MAINPG_INIT_RTC;
 c26:	c7 e0       	ldi	r28, 0x07	; 7
			break;
 c28:	ac cf       	rjmp	.-168    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
 c2a:	67 e5       	ldi	r22, 0x57	; 87
 c2c:	72 e0       	ldi	r23, 0x02	; 2
 c2e:	80 e0       	ldi	r24, 0x00	; 0
 c30:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				lmStatus=LM_wake_up();
 c34:	0e 94 c4 22 	call	0x4588	; 0x4588 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 c38:	81 11       	cpse	r24, r1
 c3a:	95 cf       	rjmp	.-214    	; 0xb66 <MAINPG_start+0x20>
 c3c:	c7 e0       	ldi	r28, 0x07	; 7
 c3e:	a1 cf       	rjmp	.-190    	; 0xb82 <MAINPG_start+0x3c>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
 c40:	66 e6       	ldi	r22, 0x66	; 102
 c42:	72 e0       	ldi	r23, 0x02	; 2
 c44:	80 e0       	ldi	r24, 0x00	; 0
 c46:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				LED_join_denied();
 c4a:	0e 94 9e 22 	call	0x453c	; 0x453c <LED_join_denied>
 c4e:	2f ef       	ldi	r18, 0xFF	; 255
 c50:	81 e1       	ldi	r24, 0x11	; 17
 c52:	9a e7       	ldi	r25, 0x7A	; 122
 c54:	21 50       	subi	r18, 0x01	; 1
 c56:	80 40       	sbci	r24, 0x00	; 0
 c58:	90 40       	sbci	r25, 0x00	; 0
 c5a:	e1 f7       	brne	.-8      	; 0xc54 <MAINPG_start+0x10e>
 c5c:	00 c0       	rjmp	.+0      	; 0xc5e <MAINPG_start+0x118>
 c5e:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
 c60:	c2 e0       	ldi	r28, 0x02	; 2
			break;
 c62:	8f cf       	rjmp	.-226    	; 0xb82 <MAINPG_start+0x3c>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
 c64:	62 e7       	ldi	r22, 0x72	; 114
 c66:	72 e0       	ldi	r23, 0x02	; 2
 c68:	80 e0       	ldi	r24, 0x00	; 0
 c6a:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				rtcStatus=RTC_set_clock_out(1);
 c6e:	81 e0       	ldi	r24, 0x01	; 1
 c70:	0e 94 0b 18 	call	0x3016	; 0x3016 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 c74:	81 11       	cpse	r24, r1
 c76:	79 cf       	rjmp	.-270    	; 0xb6a <MAINPG_start+0x24>
 c78:	c9 e0       	ldi	r28, 0x09	; 9
 c7a:	83 cf       	rjmp	.-250    	; 0xb82 <MAINPG_start+0x3c>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
 c7c:	6d e7       	ldi	r22, 0x7D	; 125
 c7e:	72 e0       	ldi	r23, 0x02	; 2
 c80:	80 e0       	ldi	r24, 0x00	; 0
 c82:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
 c86:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 c8a:	81 11       	cpse	r24, r1
 c8c:	70 cf       	rjmp	.-288    	; 0xb6e <MAINPG_start+0x28>
 c8e:	c8 e0       	ldi	r28, 0x08	; 8
 c90:	78 cf       	rjmp	.-272    	; 0xb82 <MAINPG_start+0x3c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
 c92:	6f e8       	ldi	r22, 0x8F	; 143
 c94:	72 e0       	ldi	r23, 0x02	; 2
 c96:	80 e0       	ldi	r24, 0x00	; 0
 c98:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				rtcStatus=set_wakeup();
 c9c:	0e 94 85 22 	call	0x450a	; 0x450a <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 ca0:	81 11       	cpse	r24, r1
 ca2:	67 cf       	rjmp	.-306    	; 0xb72 <MAINPG_start+0x2c>
 ca4:	ca e0       	ldi	r28, 0x0A	; 10
 ca6:	6d cf       	rjmp	.-294    	; 0xb82 <MAINPG_start+0x3c>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
 ca8:	64 ea       	ldi	r22, 0xA4	; 164
 caa:	72 e0       	ldi	r23, 0x02	; 2
 cac:	80 e0       	ldi	r24, 0x00	; 0
 cae:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				MRPP_init_group(cols, N_COLLECTIONS);
 cb2:	67 e0       	ldi	r22, 0x07	; 7
 cb4:	84 e8       	ldi	r24, 0x84	; 132
 cb6:	9d e0       	ldi	r25, 0x0D	; 13
 cb8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
 cbc:	cb e0       	ldi	r28, 0x0B	; 11
			break;
 cbe:	61 cf       	rjmp	.-318    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
 cc0:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <LM_is_free>
 cc4:	88 23       	and	r24, r24
 cc6:	09 f4       	brne	.+2      	; 0xcca <MAINPG_start+0x184>
 cc8:	5c cf       	rjmp	.-328    	; 0xb82 <MAINPG_start+0x3c>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
 cca:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
 cce:	4b e0       	ldi	r20, 0x0B	; 11
 cd0:	6c e0       	ldi	r22, 0x0C	; 12
 cd2:	0e 94 27 20 	call	0x404e	; 0x404e <decode_header_tail_response>
 cd6:	c8 2f       	mov	r28, r24
			break;
 cd8:	54 cf       	rjmp	.-344    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
 cda:	0e 94 16 10 	call	0x202c	; 0x202c <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 cde:	6d e0       	ldi	r22, 0x0D	; 13
 ce0:	0e 94 14 21 	call	0x4228	; 0x4228 <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
 ce4:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 ce6:	c8 2f       	mov	r28, r24
			break;
 ce8:	4c cf       	rjmp	.-360    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
 cea:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 cee:	6e e0       	ldi	r22, 0x0E	; 14
 cf0:	0e 94 14 21 	call	0x4228	; 0x4228 <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
 cf4:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 cf6:	c8 2f       	mov	r28, r24
			break;
 cf8:	44 cf       	rjmp	.-376    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
 cfa:	0e 94 af 0a 	call	0x155e	; 0x155e <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
 cfe:	6f e0       	ldi	r22, 0x0F	; 15
 d00:	0e 94 14 21 	call	0x4228	; 0x4228 <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
 d04:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
 d06:	c8 2f       	mov	r28, r24
			break;
 d08:	3c cf       	rjmp	.-392    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
 d0a:	0e 94 97 0c 	call	0x192e	; 0x192e <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 d0e:	61 e1       	ldi	r22, 0x11	; 17
 d10:	0e 94 14 21 	call	0x4228	; 0x4228 <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
 d14:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 d16:	c8 2f       	mov	r28, r24
			break;
 d18:	34 cf       	rjmp	.-408    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
 d1a:	81 e3       	ldi	r24, 0x31	; 49
 d1c:	9e e0       	ldi	r25, 0x0E	; 14
 d1e:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <MRPP_is_body_package_ready>
 d22:	88 23       	and	r24, r24
 d24:	09 f4       	brne	.+2      	; 0xd28 <MAINPG_start+0x1e2>
 d26:	27 cf       	rjmp	.-434    	; 0xb76 <MAINPG_start+0x30>
 d28:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <LM_is_free>
 d2c:	88 23       	and	r24, r24
 d2e:	09 f4       	brne	.+2      	; 0xd32 <MAINPG_start+0x1ec>
 d30:	24 cf       	rjmp	.-440    	; 0xb7a <MAINPG_start+0x34>
					lmStatus=send_body(bodyIndex);
 d32:	80 91 31 0e 	lds	r24, 0x0E31	; 0x800e31 <bodyIndex>
 d36:	90 91 32 0e 	lds	r25, 0x0E32	; 0x800e32 <bodyIndex+0x1>
 d3a:	0e 94 b4 1b 	call	0x3768	; 0x3768 <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
 d3e:	4d 2f       	mov	r20, r29
 d40:	68 2f       	mov	r22, r24
 d42:	80 91 31 0e 	lds	r24, 0x0E31	; 0x800e31 <bodyIndex>
 d46:	90 91 32 0e 	lds	r25, 0x0E32	; 0x800e32 <bodyIndex+0x1>
 d4a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <decode_body_response>
 d4e:	c8 2f       	mov	r28, r24
 d50:	18 cf       	rjmp	.-464    	; 0xb82 <MAINPG_start+0x3c>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
 d52:	0e 94 80 22 	call	0x4500	; 0x4500 <MRPP_all_body_package_sent>
 d56:	88 23       	and	r24, r24
 d58:	09 f4       	brne	.+2      	; 0xd5c <MAINPG_start+0x216>
 d5a:	11 cf       	rjmp	.-478    	; 0xb7e <MAINPG_start+0x38>
					state=MAINPG_SEND_TAIL;
 d5c:	c2 e1       	ldi	r28, 0x12	; 18
 d5e:	11 cf       	rjmp	.-478    	; 0xb82 <MAINPG_start+0x3c>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
 d60:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <LM_is_free>
 d64:	88 23       	and	r24, r24
 d66:	09 f4       	brne	.+2      	; 0xd6a <MAINPG_start+0x224>
 d68:	0c cf       	rjmp	.-488    	; 0xb82 <MAINPG_start+0x3c>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
 d6a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
 d6e:	42 e1       	ldi	r20, 0x12	; 18
 d70:	63 e1       	ldi	r22, 0x13	; 19
 d72:	0e 94 27 20 	call	0x404e	; 0x404e <decode_header_tail_response>
 d76:	c8 2f       	mov	r28, r24
				
			break;
 d78:	04 cf       	rjmp	.-504    	; 0xb82 <MAINPG_start+0x3c>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
 d7a:	0e 94 c1 22 	call	0x4582	; 0x4582 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
 d7e:	11 e0       	ldi	r17, 0x01	; 1
 d80:	81 11       	cpse	r24, r1
 d82:	10 e0       	ldi	r17, 0x00	; 0
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
 d84:	80 e0       	ldi	r24, 0x00	; 0
 d86:	0e 94 1f 21 	call	0x423e	; 0x423e <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
 d8a:	80 e0       	ldi	r24, 0x00	; 0
 d8c:	0e 94 33 21 	call	0x4266	; 0x4266 <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
 d90:	80 e0       	ldi	r24, 0x00	; 0
 d92:	0e 94 3d 21 	call	0x427a	; 0x427a <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
 d96:	80 e0       	ldi	r24, 0x00	; 0
 d98:	0e 94 29 21 	call	0x4252	; 0x4252 <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
 d9c:	80 e0       	ldi	r24, 0x00	; 0
 d9e:	0e 94 47 21 	call	0x428e	; 0x428e <PM_HAL_LED_power>
				
				state=MAINPG_SLEEP;
 da2:	c4 e1       	ldi	r28, 0x14	; 20
			break;
 da4:	ee ce       	rjmp	.-548    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
 da6:	60 eb       	ldi	r22, 0xB0	; 176
 da8:	72 e0       	ldi	r23, 0x02	; 2
 daa:	80 e0       	ldi	r24, 0x00	; 0
 dac:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				PM_HAL_enter_power_down();
 db0:	0e 94 10 1b 	call	0x3620	; 0x3620 <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
 db4:	68 eb       	ldi	r22, 0xB8	; 184
 db6:	72 e0       	ldi	r23, 0x02	; 2
 db8:	80 e0       	ldi	r24, 0x00	; 0
 dba:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				state=MAINPG_INIT_HW;
 dbe:	c0 e0       	ldi	r28, 0x00	; 0
			break;
 dc0:	e0 ce       	rjmp	.-576    	; 0xb82 <MAINPG_start+0x3c>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_CONF_ERR:
				LED_conf_err();
 dc2:	0e 94 a2 22 	call	0x4544	; 0x4544 <LED_conf_err>
				print_debug("Conf err\n\r");
 dc6:	60 ec       	ldi	r22, 0xC0	; 192
 dc8:	72 e0       	ldi	r23, 0x02	; 2
 dca:	80 e0       	ldi	r24, 0x00	; 0
 dcc:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				state=MAINPG_END;
 dd0:	c6 e1       	ldi	r28, 0x16	; 22
			break;
 dd2:	d7 ce       	rjmp	.-594    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
 dd4:	6b ec       	ldi	r22, 0xCB	; 203
 dd6:	72 e0       	ldi	r23, 0x02	; 2
 dd8:	80 e0       	ldi	r24, 0x00	; 0
 dda:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				LED_fatal_err();
 dde:	0e 94 a6 22 	call	0x454c	; 0x454c <LED_fatal_err>
				state=MAINPG_END;
 de2:	c6 e1       	ldi	r28, 0x16	; 22
			break;
 de4:	ce ce       	rjmp	.-612    	; 0xb82 <MAINPG_start+0x3c>
			
			case MAINPG_END:
				print_debug("END\n\r");
 de6:	69 ed       	ldi	r22, 0xD9	; 217
 de8:	72 e0       	ldi	r23, 0x02	; 2
 dea:	80 e0       	ldi	r24, 0x00	; 0
 dec:	0e 94 e7 20 	call	0x41ce	; 0x41ce <send_msg>
				return;
			break;	
		}
	}
}
 df0:	df 91       	pop	r29
 df2:	cf 91       	pop	r28
 df4:	1f 91       	pop	r17
 df6:	08 95       	ret

Disassembly of section .text.calc_crc8:

000039b4 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    39b4:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    39b6:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    39b8:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    39ba:	14 c0       	rjmp	.+40     	; 0x39e4 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    39bc:	fa 01       	movw	r30, r20
    39be:	e3 0f       	add	r30, r19
    39c0:	f1 1d       	adc	r31, r1
    39c2:	90 81       	ld	r25, Z
    39c4:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    39c6:	28 e0       	ldi	r18, 0x08	; 8
    39c8:	0a c0       	rjmp	.+20     	; 0x39de <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    39ca:	88 23       	and	r24, r24
    39cc:	34 f4       	brge	.+12     	; 0x39da <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	88 0f       	add	r24, r24
    39d2:	99 1f       	adc	r25, r25
    39d4:	91 e3       	ldi	r25, 0x31	; 49
    39d6:	89 27       	eor	r24, r25
    39d8:	01 c0       	rjmp	.+2      	; 0x39dc <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    39da:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    39dc:	21 50       	subi	r18, 0x01	; 1
    39de:	21 11       	cpse	r18, r1
    39e0:	f4 cf       	rjmp	.-24     	; 0x39ca <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    39e2:	3f 5f       	subi	r19, 0xFF	; 255
    39e4:	36 17       	cp	r19, r22
    39e6:	50 f3       	brcs	.-44     	; 0x39bc <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    39e8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000043fe <__subsf3>:
    43fe:	50 58       	subi	r21, 0x80	; 128

00004400 <__addsf3>:
    4400:	bb 27       	eor	r27, r27
    4402:	aa 27       	eor	r26, r26
    4404:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__addsf3x>
    4408:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000020fc <__addsf3x>:
    20fc:	11 c0       	rjmp	.+34     	; 0x2120 <__addsf3x+0x24>
    20fe:	0e 94 06 22 	call	0x440c	; 0x440c <__fp_pscA>
    2102:	38 f0       	brcs	.+14     	; 0x2112 <__addsf3x+0x16>
    2104:	0e 94 0d 22 	call	0x441a	; 0x441a <__fp_pscB>
    2108:	20 f0       	brcs	.+8      	; 0x2112 <__addsf3x+0x16>
    210a:	39 f4       	brne	.+14     	; 0x211a <__addsf3x+0x1e>
    210c:	9f 3f       	cpi	r25, 0xFF	; 255
    210e:	19 f4       	brne	.+6      	; 0x2116 <__addsf3x+0x1a>
    2110:	26 f4       	brtc	.+8      	; 0x211a <__addsf3x+0x1e>
    2112:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__fp_nan>
    2116:	0e f4       	brtc	.+2      	; 0x211a <__addsf3x+0x1e>
    2118:	e0 95       	com	r30
    211a:	e7 fb       	bst	r30, 7
    211c:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__fp_inf>
    2120:	e9 2f       	mov	r30, r25
    2122:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__fp_split3>
    2126:	58 f3       	brcs	.-42     	; 0x20fe <__addsf3x+0x2>
    2128:	ba 17       	cp	r27, r26
    212a:	62 07       	cpc	r22, r18
    212c:	73 07       	cpc	r23, r19
    212e:	84 07       	cpc	r24, r20
    2130:	95 07       	cpc	r25, r21
    2132:	20 f0       	brcs	.+8      	; 0x213c <__addsf3x+0x40>
    2134:	79 f4       	brne	.+30     	; 0x2154 <__addsf3x+0x58>
    2136:	a6 f5       	brtc	.+104    	; 0x21a0 <__addsf3x+0xa4>
    2138:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__fp_zero>
    213c:	0e f4       	brtc	.+2      	; 0x2140 <__addsf3x+0x44>
    213e:	e0 95       	com	r30
    2140:	0b 2e       	mov	r0, r27
    2142:	ba 2f       	mov	r27, r26
    2144:	a0 2d       	mov	r26, r0
    2146:	0b 01       	movw	r0, r22
    2148:	b9 01       	movw	r22, r18
    214a:	90 01       	movw	r18, r0
    214c:	0c 01       	movw	r0, r24
    214e:	ca 01       	movw	r24, r20
    2150:	a0 01       	movw	r20, r0
    2152:	11 24       	eor	r1, r1
    2154:	ff 27       	eor	r31, r31
    2156:	59 1b       	sub	r21, r25
    2158:	99 f0       	breq	.+38     	; 0x2180 <__addsf3x+0x84>
    215a:	59 3f       	cpi	r21, 0xF9	; 249
    215c:	50 f4       	brcc	.+20     	; 0x2172 <__addsf3x+0x76>
    215e:	50 3e       	cpi	r21, 0xE0	; 224
    2160:	68 f1       	brcs	.+90     	; 0x21bc <__addsf3x+0xc0>
    2162:	1a 16       	cp	r1, r26
    2164:	f0 40       	sbci	r31, 0x00	; 0
    2166:	a2 2f       	mov	r26, r18
    2168:	23 2f       	mov	r18, r19
    216a:	34 2f       	mov	r19, r20
    216c:	44 27       	eor	r20, r20
    216e:	58 5f       	subi	r21, 0xF8	; 248
    2170:	f3 cf       	rjmp	.-26     	; 0x2158 <__addsf3x+0x5c>
    2172:	46 95       	lsr	r20
    2174:	37 95       	ror	r19
    2176:	27 95       	ror	r18
    2178:	a7 95       	ror	r26
    217a:	f0 40       	sbci	r31, 0x00	; 0
    217c:	53 95       	inc	r21
    217e:	c9 f7       	brne	.-14     	; 0x2172 <__addsf3x+0x76>
    2180:	7e f4       	brtc	.+30     	; 0x21a0 <__addsf3x+0xa4>
    2182:	1f 16       	cp	r1, r31
    2184:	ba 0b       	sbc	r27, r26
    2186:	62 0b       	sbc	r22, r18
    2188:	73 0b       	sbc	r23, r19
    218a:	84 0b       	sbc	r24, r20
    218c:	ba f0       	brmi	.+46     	; 0x21bc <__addsf3x+0xc0>
    218e:	91 50       	subi	r25, 0x01	; 1
    2190:	a1 f0       	breq	.+40     	; 0x21ba <__addsf3x+0xbe>
    2192:	ff 0f       	add	r31, r31
    2194:	bb 1f       	adc	r27, r27
    2196:	66 1f       	adc	r22, r22
    2198:	77 1f       	adc	r23, r23
    219a:	88 1f       	adc	r24, r24
    219c:	c2 f7       	brpl	.-16     	; 0x218e <__addsf3x+0x92>
    219e:	0e c0       	rjmp	.+28     	; 0x21bc <__addsf3x+0xc0>
    21a0:	ba 0f       	add	r27, r26
    21a2:	62 1f       	adc	r22, r18
    21a4:	73 1f       	adc	r23, r19
    21a6:	84 1f       	adc	r24, r20
    21a8:	48 f4       	brcc	.+18     	; 0x21bc <__addsf3x+0xc0>
    21aa:	87 95       	ror	r24
    21ac:	77 95       	ror	r23
    21ae:	67 95       	ror	r22
    21b0:	b7 95       	ror	r27
    21b2:	f7 95       	ror	r31
    21b4:	9e 3f       	cpi	r25, 0xFE	; 254
    21b6:	08 f0       	brcs	.+2      	; 0x21ba <__addsf3x+0xbe>
    21b8:	b0 cf       	rjmp	.-160    	; 0x211a <__addsf3x+0x1e>
    21ba:	93 95       	inc	r25
    21bc:	88 0f       	add	r24, r24
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <__addsf3x+0xc6>
    21c0:	99 27       	eor	r25, r25
    21c2:	ee 0f       	add	r30, r30
    21c4:	97 95       	ror	r25
    21c6:	87 95       	ror	r24
    21c8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004554 <__divsf3>:
    4554:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__divsf3x>
    4558:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001da2 <__divsf3x>:
    1da2:	10 c0       	rjmp	.+32     	; 0x1dc4 <__divsf3x+0x22>
    1da4:	0e 94 0d 22 	call	0x441a	; 0x441a <__fp_pscB>
    1da8:	58 f0       	brcs	.+22     	; 0x1dc0 <__divsf3x+0x1e>
    1daa:	0e 94 06 22 	call	0x440c	; 0x440c <__fp_pscA>
    1dae:	40 f0       	brcs	.+16     	; 0x1dc0 <__divsf3x+0x1e>
    1db0:	29 f4       	brne	.+10     	; 0x1dbc <__divsf3x+0x1a>
    1db2:	5f 3f       	cpi	r21, 0xFF	; 255
    1db4:	29 f0       	breq	.+10     	; 0x1dc0 <__divsf3x+0x1e>
    1db6:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__fp_inf>
    1dba:	51 11       	cpse	r21, r1
    1dbc:	0c 94 15 22 	jmp	0x442a	; 0x442a <__fp_szero>
    1dc0:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__fp_nan>
    1dc4:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__fp_split3>
    1dc8:	68 f3       	brcs	.-38     	; 0x1da4 <__divsf3x+0x2>

00001dca <__divsf3_pse>:
    1dca:	99 23       	and	r25, r25
    1dcc:	b1 f3       	breq	.-20     	; 0x1dba <__divsf3x+0x18>
    1dce:	55 23       	and	r21, r21
    1dd0:	91 f3       	breq	.-28     	; 0x1db6 <__divsf3x+0x14>
    1dd2:	95 1b       	sub	r25, r21
    1dd4:	55 0b       	sbc	r21, r21
    1dd6:	bb 27       	eor	r27, r27
    1dd8:	aa 27       	eor	r26, r26
    1dda:	62 17       	cp	r22, r18
    1ddc:	73 07       	cpc	r23, r19
    1dde:	84 07       	cpc	r24, r20
    1de0:	38 f0       	brcs	.+14     	; 0x1df0 <__divsf3_pse+0x26>
    1de2:	9f 5f       	subi	r25, 0xFF	; 255
    1de4:	5f 4f       	sbci	r21, 0xFF	; 255
    1de6:	22 0f       	add	r18, r18
    1de8:	33 1f       	adc	r19, r19
    1dea:	44 1f       	adc	r20, r20
    1dec:	aa 1f       	adc	r26, r26
    1dee:	a9 f3       	breq	.-22     	; 0x1dda <__divsf3_pse+0x10>
    1df0:	35 d0       	rcall	.+106    	; 0x1e5c <__divsf3_pse+0x92>
    1df2:	0e 2e       	mov	r0, r30
    1df4:	3a f0       	brmi	.+14     	; 0x1e04 <__divsf3_pse+0x3a>
    1df6:	e0 e8       	ldi	r30, 0x80	; 128
    1df8:	32 d0       	rcall	.+100    	; 0x1e5e <__divsf3_pse+0x94>
    1dfa:	91 50       	subi	r25, 0x01	; 1
    1dfc:	50 40       	sbci	r21, 0x00	; 0
    1dfe:	e6 95       	lsr	r30
    1e00:	00 1c       	adc	r0, r0
    1e02:	ca f7       	brpl	.-14     	; 0x1df6 <__divsf3_pse+0x2c>
    1e04:	2b d0       	rcall	.+86     	; 0x1e5c <__divsf3_pse+0x92>
    1e06:	fe 2f       	mov	r31, r30
    1e08:	29 d0       	rcall	.+82     	; 0x1e5c <__divsf3_pse+0x92>
    1e0a:	66 0f       	add	r22, r22
    1e0c:	77 1f       	adc	r23, r23
    1e0e:	88 1f       	adc	r24, r24
    1e10:	bb 1f       	adc	r27, r27
    1e12:	26 17       	cp	r18, r22
    1e14:	37 07       	cpc	r19, r23
    1e16:	48 07       	cpc	r20, r24
    1e18:	ab 07       	cpc	r26, r27
    1e1a:	b0 e8       	ldi	r27, 0x80	; 128
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <__divsf3_pse+0x56>
    1e1e:	bb 0b       	sbc	r27, r27
    1e20:	80 2d       	mov	r24, r0
    1e22:	bf 01       	movw	r22, r30
    1e24:	ff 27       	eor	r31, r31
    1e26:	93 58       	subi	r25, 0x83	; 131
    1e28:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2a:	3a f0       	brmi	.+14     	; 0x1e3a <__divsf3_pse+0x70>
    1e2c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e2e:	51 05       	cpc	r21, r1
    1e30:	78 f0       	brcs	.+30     	; 0x1e50 <__divsf3_pse+0x86>
    1e32:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__fp_inf>
    1e36:	0c 94 15 22 	jmp	0x442a	; 0x442a <__fp_szero>
    1e3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e3c:	e4 f3       	brlt	.-8      	; 0x1e36 <__divsf3_pse+0x6c>
    1e3e:	98 3e       	cpi	r25, 0xE8	; 232
    1e40:	d4 f3       	brlt	.-12     	; 0x1e36 <__divsf3_pse+0x6c>
    1e42:	86 95       	lsr	r24
    1e44:	77 95       	ror	r23
    1e46:	67 95       	ror	r22
    1e48:	b7 95       	ror	r27
    1e4a:	f7 95       	ror	r31
    1e4c:	9f 5f       	subi	r25, 0xFF	; 255
    1e4e:	c9 f7       	brne	.-14     	; 0x1e42 <__divsf3_pse+0x78>
    1e50:	88 0f       	add	r24, r24
    1e52:	91 1d       	adc	r25, r1
    1e54:	96 95       	lsr	r25
    1e56:	87 95       	ror	r24
    1e58:	97 f9       	bld	r25, 7
    1e5a:	08 95       	ret
    1e5c:	e1 e0       	ldi	r30, 0x01	; 1
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	bb 1f       	adc	r27, r27
    1e66:	62 17       	cp	r22, r18
    1e68:	73 07       	cpc	r23, r19
    1e6a:	84 07       	cpc	r24, r20
    1e6c:	ba 07       	cpc	r27, r26
    1e6e:	20 f0       	brcs	.+8      	; 0x1e78 <__divsf3_pse+0xae>
    1e70:	62 1b       	sub	r22, r18
    1e72:	73 0b       	sbc	r23, r19
    1e74:	84 0b       	sbc	r24, r20
    1e76:	ba 0b       	sbc	r27, r26
    1e78:	ee 1f       	adc	r30, r30
    1e7a:	88 f7       	brcc	.-30     	; 0x1e5e <__divsf3_pse+0x94>
    1e7c:	e0 95       	com	r30
    1e7e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002e02 <__fixunssfsi>:
    2e02:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__fp_splitA>
    2e06:	88 f0       	brcs	.+34     	; 0x2e2a <__fixunssfsi+0x28>
    2e08:	9f 57       	subi	r25, 0x7F	; 127
    2e0a:	98 f0       	brcs	.+38     	; 0x2e32 <__fixunssfsi+0x30>
    2e0c:	b9 2f       	mov	r27, r25
    2e0e:	99 27       	eor	r25, r25
    2e10:	b7 51       	subi	r27, 0x17	; 23
    2e12:	b0 f0       	brcs	.+44     	; 0x2e40 <__fixunssfsi+0x3e>
    2e14:	e1 f0       	breq	.+56     	; 0x2e4e <__fixunssfsi+0x4c>
    2e16:	66 0f       	add	r22, r22
    2e18:	77 1f       	adc	r23, r23
    2e1a:	88 1f       	adc	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	1a f0       	brmi	.+6      	; 0x2e26 <__fixunssfsi+0x24>
    2e20:	ba 95       	dec	r27
    2e22:	c9 f7       	brne	.-14     	; 0x2e16 <__fixunssfsi+0x14>
    2e24:	14 c0       	rjmp	.+40     	; 0x2e4e <__fixunssfsi+0x4c>
    2e26:	b1 30       	cpi	r27, 0x01	; 1
    2e28:	91 f0       	breq	.+36     	; 0x2e4e <__fixunssfsi+0x4c>
    2e2a:	0e 94 14 22 	call	0x4428	; 0x4428 <__fp_zero>
    2e2e:	b1 e0       	ldi	r27, 0x01	; 1
    2e30:	08 95       	ret
    2e32:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__fp_zero>
    2e36:	67 2f       	mov	r22, r23
    2e38:	78 2f       	mov	r23, r24
    2e3a:	88 27       	eor	r24, r24
    2e3c:	b8 5f       	subi	r27, 0xF8	; 248
    2e3e:	39 f0       	breq	.+14     	; 0x2e4e <__fixunssfsi+0x4c>
    2e40:	b9 3f       	cpi	r27, 0xF9	; 249
    2e42:	cc f3       	brlt	.-14     	; 0x2e36 <__fixunssfsi+0x34>
    2e44:	86 95       	lsr	r24
    2e46:	77 95       	ror	r23
    2e48:	67 95       	ror	r22
    2e4a:	b3 95       	inc	r27
    2e4c:	d9 f7       	brne	.-10     	; 0x2e44 <__fixunssfsi+0x42>
    2e4e:	3e f4       	brtc	.+14     	; 0x2e5e <__fixunssfsi+0x5c>
    2e50:	90 95       	com	r25
    2e52:	80 95       	com	r24
    2e54:	70 95       	com	r23
    2e56:	61 95       	neg	r22
    2e58:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e5e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000029c8 <__floatunsisf>:
    29c8:	e8 94       	clt
    29ca:	09 c0       	rjmp	.+18     	; 0x29de <__floatsisf+0x12>

000029cc <__floatsisf>:
    29cc:	97 fb       	bst	r25, 7
    29ce:	3e f4       	brtc	.+14     	; 0x29de <__floatsisf+0x12>
    29d0:	90 95       	com	r25
    29d2:	80 95       	com	r24
    29d4:	70 95       	com	r23
    29d6:	61 95       	neg	r22
    29d8:	7f 4f       	sbci	r23, 0xFF	; 255
    29da:	8f 4f       	sbci	r24, 0xFF	; 255
    29dc:	9f 4f       	sbci	r25, 0xFF	; 255
    29de:	99 23       	and	r25, r25
    29e0:	a9 f0       	breq	.+42     	; 0x2a0c <__floatsisf+0x40>
    29e2:	f9 2f       	mov	r31, r25
    29e4:	96 e9       	ldi	r25, 0x96	; 150
    29e6:	bb 27       	eor	r27, r27
    29e8:	93 95       	inc	r25
    29ea:	f6 95       	lsr	r31
    29ec:	87 95       	ror	r24
    29ee:	77 95       	ror	r23
    29f0:	67 95       	ror	r22
    29f2:	b7 95       	ror	r27
    29f4:	f1 11       	cpse	r31, r1
    29f6:	f8 cf       	rjmp	.-16     	; 0x29e8 <__floatsisf+0x1c>
    29f8:	fa f4       	brpl	.+62     	; 0x2a38 <__floatsisf+0x6c>
    29fa:	bb 0f       	add	r27, r27
    29fc:	11 f4       	brne	.+4      	; 0x2a02 <__floatsisf+0x36>
    29fe:	60 ff       	sbrs	r22, 0
    2a00:	1b c0       	rjmp	.+54     	; 0x2a38 <__floatsisf+0x6c>
    2a02:	6f 5f       	subi	r22, 0xFF	; 255
    2a04:	7f 4f       	sbci	r23, 0xFF	; 255
    2a06:	8f 4f       	sbci	r24, 0xFF	; 255
    2a08:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0a:	16 c0       	rjmp	.+44     	; 0x2a38 <__floatsisf+0x6c>
    2a0c:	88 23       	and	r24, r24
    2a0e:	11 f0       	breq	.+4      	; 0x2a14 <__floatsisf+0x48>
    2a10:	96 e9       	ldi	r25, 0x96	; 150
    2a12:	11 c0       	rjmp	.+34     	; 0x2a36 <__floatsisf+0x6a>
    2a14:	77 23       	and	r23, r23
    2a16:	21 f0       	breq	.+8      	; 0x2a20 <__floatsisf+0x54>
    2a18:	9e e8       	ldi	r25, 0x8E	; 142
    2a1a:	87 2f       	mov	r24, r23
    2a1c:	76 2f       	mov	r23, r22
    2a1e:	05 c0       	rjmp	.+10     	; 0x2a2a <__floatsisf+0x5e>
    2a20:	66 23       	and	r22, r22
    2a22:	71 f0       	breq	.+28     	; 0x2a40 <__floatsisf+0x74>
    2a24:	96 e8       	ldi	r25, 0x86	; 134
    2a26:	86 2f       	mov	r24, r22
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	2a f0       	brmi	.+10     	; 0x2a38 <__floatsisf+0x6c>
    2a2e:	9a 95       	dec	r25
    2a30:	66 0f       	add	r22, r22
    2a32:	77 1f       	adc	r23, r23
    2a34:	88 1f       	adc	r24, r24
    2a36:	da f7       	brpl	.-10     	; 0x2a2e <__floatsisf+0x62>
    2a38:	88 0f       	add	r24, r24
    2a3a:	96 95       	lsr	r25
    2a3c:	87 95       	ror	r24
    2a3e:	97 f9       	bld	r25, 7
    2a40:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000044ca <__fp_inf>:
    44ca:	97 f9       	bld	r25, 7
    44cc:	9f 67       	ori	r25, 0x7F	; 127
    44ce:	80 e8       	ldi	r24, 0x80	; 128
    44d0:	70 e0       	ldi	r23, 0x00	; 0
    44d2:	60 e0       	ldi	r22, 0x00	; 0
    44d4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000045a0 <__fp_nan>:
    45a0:	9f ef       	ldi	r25, 0xFF	; 255
    45a2:	80 ec       	ldi	r24, 0xC0	; 192
    45a4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000440c <__fp_pscA>:
    440c:	00 24       	eor	r0, r0
    440e:	0a 94       	dec	r0
    4410:	16 16       	cp	r1, r22
    4412:	17 06       	cpc	r1, r23
    4414:	18 06       	cpc	r1, r24
    4416:	09 06       	cpc	r0, r25
    4418:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000441a <__fp_pscB>:
    441a:	00 24       	eor	r0, r0
    441c:	0a 94       	dec	r0
    441e:	12 16       	cp	r1, r18
    4420:	13 06       	cpc	r1, r19
    4422:	14 06       	cpc	r1, r20
    4424:	05 06       	cpc	r0, r21
    4426:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003f32 <__fp_round>:
    3f32:	09 2e       	mov	r0, r25
    3f34:	03 94       	inc	r0
    3f36:	00 0c       	add	r0, r0
    3f38:	11 f4       	brne	.+4      	; 0x3f3e <__fp_round+0xc>
    3f3a:	88 23       	and	r24, r24
    3f3c:	52 f0       	brmi	.+20     	; 0x3f52 <__fp_round+0x20>
    3f3e:	bb 0f       	add	r27, r27
    3f40:	40 f4       	brcc	.+16     	; 0x3f52 <__fp_round+0x20>
    3f42:	bf 2b       	or	r27, r31
    3f44:	11 f4       	brne	.+4      	; 0x3f4a <__fp_round+0x18>
    3f46:	60 ff       	sbrs	r22, 0
    3f48:	04 c0       	rjmp	.+8      	; 0x3f52 <__fp_round+0x20>
    3f4a:	6f 5f       	subi	r22, 0xFF	; 255
    3f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f4e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f50:	9f 4f       	sbci	r25, 0xFF	; 255
    3f52:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000035dc <__fp_split3>:
    35dc:	57 fd       	sbrc	r21, 7
    35de:	90 58       	subi	r25, 0x80	; 128
    35e0:	44 0f       	add	r20, r20
    35e2:	55 1f       	adc	r21, r21
    35e4:	59 f0       	breq	.+22     	; 0x35fc <__fp_splitA+0x10>
    35e6:	5f 3f       	cpi	r21, 0xFF	; 255
    35e8:	71 f0       	breq	.+28     	; 0x3606 <__fp_splitA+0x1a>
    35ea:	47 95       	ror	r20

000035ec <__fp_splitA>:
    35ec:	88 0f       	add	r24, r24
    35ee:	97 fb       	bst	r25, 7
    35f0:	99 1f       	adc	r25, r25
    35f2:	61 f0       	breq	.+24     	; 0x360c <__fp_splitA+0x20>
    35f4:	9f 3f       	cpi	r25, 0xFF	; 255
    35f6:	79 f0       	breq	.+30     	; 0x3616 <__fp_splitA+0x2a>
    35f8:	87 95       	ror	r24
    35fa:	08 95       	ret
    35fc:	12 16       	cp	r1, r18
    35fe:	13 06       	cpc	r1, r19
    3600:	14 06       	cpc	r1, r20
    3602:	55 1f       	adc	r21, r21
    3604:	f2 cf       	rjmp	.-28     	; 0x35ea <__fp_split3+0xe>
    3606:	46 95       	lsr	r20
    3608:	f1 df       	rcall	.-30     	; 0x35ec <__fp_splitA>
    360a:	08 c0       	rjmp	.+16     	; 0x361c <__fp_splitA+0x30>
    360c:	16 16       	cp	r1, r22
    360e:	17 06       	cpc	r1, r23
    3610:	18 06       	cpc	r1, r24
    3612:	99 1f       	adc	r25, r25
    3614:	f1 cf       	rjmp	.-30     	; 0x35f8 <__fp_splitA+0xc>
    3616:	86 95       	lsr	r24
    3618:	71 05       	cpc	r23, r1
    361a:	61 05       	cpc	r22, r1
    361c:	08 94       	sec
    361e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004428 <__fp_zero>:
    4428:	e8 94       	clt

0000442a <__fp_szero>:
    442a:	bb 27       	eor	r27, r27
    442c:	66 27       	eor	r22, r22
    442e:	77 27       	eor	r23, r23
    4430:	cb 01       	movw	r24, r22
    4432:	97 f9       	bld	r25, 7
    4434:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000455c <__mulsf3>:
    455c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3x>
    4560:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001f58 <__mulsf3x>:
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <__mulsf3x+0x20>
    1f5a:	0e 94 06 22 	call	0x440c	; 0x440c <__fp_pscA>
    1f5e:	38 f0       	brcs	.+14     	; 0x1f6e <__mulsf3x+0x16>
    1f60:	0e 94 0d 22 	call	0x441a	; 0x441a <__fp_pscB>
    1f64:	20 f0       	brcs	.+8      	; 0x1f6e <__mulsf3x+0x16>
    1f66:	95 23       	and	r25, r21
    1f68:	11 f0       	breq	.+4      	; 0x1f6e <__mulsf3x+0x16>
    1f6a:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__fp_inf>
    1f6e:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <__fp_nan>
    1f72:	11 24       	eor	r1, r1
    1f74:	0c 94 15 22 	jmp	0x442a	; 0x442a <__fp_szero>
    1f78:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__fp_split3>
    1f7c:	70 f3       	brcs	.-36     	; 0x1f5a <__mulsf3x+0x2>

00001f7e <__mulsf3_pse>:
    1f7e:	95 9f       	mul	r25, r21
    1f80:	c1 f3       	breq	.-16     	; 0x1f72 <__mulsf3x+0x1a>
    1f82:	95 0f       	add	r25, r21
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	55 1f       	adc	r21, r21
    1f88:	62 9f       	mul	r22, r18
    1f8a:	f0 01       	movw	r30, r0
    1f8c:	72 9f       	mul	r23, r18
    1f8e:	bb 27       	eor	r27, r27
    1f90:	f0 0d       	add	r31, r0
    1f92:	b1 1d       	adc	r27, r1
    1f94:	63 9f       	mul	r22, r19
    1f96:	aa 27       	eor	r26, r26
    1f98:	f0 0d       	add	r31, r0
    1f9a:	b1 1d       	adc	r27, r1
    1f9c:	aa 1f       	adc	r26, r26
    1f9e:	64 9f       	mul	r22, r20
    1fa0:	66 27       	eor	r22, r22
    1fa2:	b0 0d       	add	r27, r0
    1fa4:	a1 1d       	adc	r26, r1
    1fa6:	66 1f       	adc	r22, r22
    1fa8:	82 9f       	mul	r24, r18
    1faa:	22 27       	eor	r18, r18
    1fac:	b0 0d       	add	r27, r0
    1fae:	a1 1d       	adc	r26, r1
    1fb0:	62 1f       	adc	r22, r18
    1fb2:	73 9f       	mul	r23, r19
    1fb4:	b0 0d       	add	r27, r0
    1fb6:	a1 1d       	adc	r26, r1
    1fb8:	62 1f       	adc	r22, r18
    1fba:	83 9f       	mul	r24, r19
    1fbc:	a0 0d       	add	r26, r0
    1fbe:	61 1d       	adc	r22, r1
    1fc0:	22 1f       	adc	r18, r18
    1fc2:	74 9f       	mul	r23, r20
    1fc4:	33 27       	eor	r19, r19
    1fc6:	a0 0d       	add	r26, r0
    1fc8:	61 1d       	adc	r22, r1
    1fca:	23 1f       	adc	r18, r19
    1fcc:	84 9f       	mul	r24, r20
    1fce:	60 0d       	add	r22, r0
    1fd0:	21 1d       	adc	r18, r1
    1fd2:	82 2f       	mov	r24, r18
    1fd4:	76 2f       	mov	r23, r22
    1fd6:	6a 2f       	mov	r22, r26
    1fd8:	11 24       	eor	r1, r1
    1fda:	9f 57       	subi	r25, 0x7F	; 127
    1fdc:	50 40       	sbci	r21, 0x00	; 0
    1fde:	9a f0       	brmi	.+38     	; 0x2006 <__mulsf3_pse+0x88>
    1fe0:	f1 f0       	breq	.+60     	; 0x201e <__mulsf3_pse+0xa0>
    1fe2:	88 23       	and	r24, r24
    1fe4:	4a f0       	brmi	.+18     	; 0x1ff8 <__mulsf3_pse+0x7a>
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	bb 1f       	adc	r27, r27
    1fec:	66 1f       	adc	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	88 1f       	adc	r24, r24
    1ff2:	91 50       	subi	r25, 0x01	; 1
    1ff4:	50 40       	sbci	r21, 0x00	; 0
    1ff6:	a9 f7       	brne	.-22     	; 0x1fe2 <__mulsf3_pse+0x64>
    1ff8:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffa:	51 05       	cpc	r21, r1
    1ffc:	80 f0       	brcs	.+32     	; 0x201e <__mulsf3_pse+0xa0>
    1ffe:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__fp_inf>
    2002:	0c 94 15 22 	jmp	0x442a	; 0x442a <__fp_szero>
    2006:	5f 3f       	cpi	r21, 0xFF	; 255
    2008:	e4 f3       	brlt	.-8      	; 0x2002 <__mulsf3_pse+0x84>
    200a:	98 3e       	cpi	r25, 0xE8	; 232
    200c:	d4 f3       	brlt	.-12     	; 0x2002 <__mulsf3_pse+0x84>
    200e:	86 95       	lsr	r24
    2010:	77 95       	ror	r23
    2012:	67 95       	ror	r22
    2014:	b7 95       	ror	r27
    2016:	f7 95       	ror	r31
    2018:	e7 95       	ror	r30
    201a:	9f 5f       	subi	r25, 0xFF	; 255
    201c:	c1 f7       	brne	.-16     	; 0x200e <__mulsf3_pse+0x90>
    201e:	fe 2b       	or	r31, r30
    2020:	88 0f       	add	r24, r24
    2022:	91 1d       	adc	r25, r1
    2024:	96 95       	lsr	r25
    2026:	87 95       	ror	r24
    2028:	97 f9       	bld	r25, 7
    202a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000402 <vfprintf>:
 402:	a4 e1       	ldi	r26, 0x14	; 20
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	e7 e0       	ldi	r30, 0x07	; 7
 408:	f2 e0       	ldi	r31, 0x02	; 2
 40a:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <__prologue_saves__>
 40e:	6c 01       	movw	r12, r24
 410:	1a 01       	movw	r2, r20
 412:	46 2e       	mov	r4, r22
 414:	59 01       	movw	r10, r18
 416:	fc 01       	movw	r30, r24
 418:	10 86       	std	Z+8, r1	; 0x08
 41a:	17 82       	std	Z+7, r1	; 0x07
 41c:	84 81       	ldd	r24, Z+4	; 0x04
 41e:	81 ff       	sbrs	r24, 1
 420:	62 c3       	rjmp	.+1732   	; 0xae6 <__EEPROM_REGION_LENGTH__+0x2e6>
 422:	ce 01       	movw	r24, r28
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	9d 87       	std	Y+13, r25	; 0x0d
 428:	8c 87       	std	Y+12, r24	; 0x0c
 42a:	a0 e8       	ldi	r26, 0x80	; 128
 42c:	8a 8b       	std	Y+18, r24	; 0x12
 42e:	9b 8b       	std	Y+19, r25	; 0x13
 430:	ac 8b       	std	Y+20, r26	; 0x14
 432:	f1 01       	movw	r30, r2
 434:	84 91       	lpm	r24, Z
 436:	47 fc       	sbrc	r4, 7
 438:	80 81       	ld	r24, Z
 43a:	88 23       	and	r24, r24
 43c:	09 f4       	brne	.+2      	; 0x440 <vfprintf+0x3e>
 43e:	4f c3       	rjmp	.+1694   	; 0xade <__EEPROM_REGION_LENGTH__+0x2de>
 440:	44 2d       	mov	r20, r4
 442:	91 01       	movw	r18, r2
 444:	2f 5f       	subi	r18, 0xFF	; 255
 446:	3f 4f       	sbci	r19, 0xFF	; 255
 448:	4f 4f       	sbci	r20, 0xFF	; 255
 44a:	85 32       	cpi	r24, 0x25	; 37
 44c:	19 f0       	breq	.+6      	; 0x454 <vfprintf+0x52>
 44e:	19 01       	movw	r2, r18
 450:	44 2e       	mov	r4, r20
 452:	0a c0       	rjmp	.+20     	; 0x468 <vfprintf+0x66>
 454:	f9 01       	movw	r30, r18
 456:	84 91       	lpm	r24, Z
 458:	47 fd       	sbrc	r20, 7
 45a:	80 81       	ld	r24, Z
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	29 0e       	add	r2, r25
 460:	31 1c       	adc	r3, r1
 462:	41 1c       	adc	r4, r1
 464:	85 32       	cpi	r24, 0x25	; 37
 466:	49 f4       	brne	.+18     	; 0x47a <vfprintf+0x78>
 468:	b6 01       	movw	r22, r12
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 470:	bf 86       	std	Y+15, r11	; 0x0f
 472:	ae 86       	std	Y+14, r10	; 0x0e
 474:	ae 84       	ldd	r10, Y+14	; 0x0e
 476:	bf 84       	ldd	r11, Y+15	; 0x0f
 478:	dc cf       	rjmp	.-72     	; 0x432 <vfprintf+0x30>
 47a:	10 e0       	ldi	r17, 0x00	; 0
 47c:	f1 2c       	mov	r15, r1
 47e:	00 e0       	ldi	r16, 0x00	; 0
 480:	00 32       	cpi	r16, 0x20	; 32
 482:	a0 f4       	brcc	.+40     	; 0x4ac <vfprintf+0xaa>
 484:	8b 32       	cpi	r24, 0x2B	; 43
 486:	69 f0       	breq	.+26     	; 0x4a2 <vfprintf+0xa0>
 488:	30 f4       	brcc	.+12     	; 0x496 <vfprintf+0x94>
 48a:	80 32       	cpi	r24, 0x20	; 32
 48c:	59 f0       	breq	.+22     	; 0x4a4 <vfprintf+0xa2>
 48e:	83 32       	cpi	r24, 0x23	; 35
 490:	69 f4       	brne	.+26     	; 0x4ac <vfprintf+0xaa>
 492:	00 61       	ori	r16, 0x10	; 16
 494:	2c c0       	rjmp	.+88     	; 0x4ee <vfprintf+0xec>
 496:	8d 32       	cpi	r24, 0x2D	; 45
 498:	39 f0       	breq	.+14     	; 0x4a8 <vfprintf+0xa6>
 49a:	80 33       	cpi	r24, 0x30	; 48
 49c:	39 f4       	brne	.+14     	; 0x4ac <vfprintf+0xaa>
 49e:	01 60       	ori	r16, 0x01	; 1
 4a0:	26 c0       	rjmp	.+76     	; 0x4ee <vfprintf+0xec>
 4a2:	02 60       	ori	r16, 0x02	; 2
 4a4:	04 60       	ori	r16, 0x04	; 4
 4a6:	23 c0       	rjmp	.+70     	; 0x4ee <vfprintf+0xec>
 4a8:	08 60       	ori	r16, 0x08	; 8
 4aa:	21 c0       	rjmp	.+66     	; 0x4ee <vfprintf+0xec>
 4ac:	07 fd       	sbrc	r16, 7
 4ae:	29 c0       	rjmp	.+82     	; 0x502 <vfprintf+0x100>
 4b0:	90 ed       	ldi	r25, 0xD0	; 208
 4b2:	98 0f       	add	r25, r24
 4b4:	9a 30       	cpi	r25, 0x0A	; 10
 4b6:	78 f4       	brcc	.+30     	; 0x4d6 <vfprintf+0xd4>
 4b8:	06 ff       	sbrs	r16, 6
 4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <vfprintf+0xc6>
 4bc:	aa e0       	ldi	r26, 0x0A	; 10
 4be:	1a 9f       	mul	r17, r26
 4c0:	90 0d       	add	r25, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	19 2f       	mov	r17, r25
 4c6:	13 c0       	rjmp	.+38     	; 0x4ee <vfprintf+0xec>
 4c8:	ea e0       	ldi	r30, 0x0A	; 10
 4ca:	fe 9e       	mul	r15, r30
 4cc:	90 0d       	add	r25, r0
 4ce:	11 24       	eor	r1, r1
 4d0:	f9 2e       	mov	r15, r25
 4d2:	00 62       	ori	r16, 0x20	; 32
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <vfprintf+0xec>
 4d6:	8e 32       	cpi	r24, 0x2E	; 46
 4d8:	21 f4       	brne	.+8      	; 0x4e2 <vfprintf+0xe0>
 4da:	06 fd       	sbrc	r16, 6
 4dc:	00 c3       	rjmp	.+1536   	; 0xade <__EEPROM_REGION_LENGTH__+0x2de>
 4de:	00 64       	ori	r16, 0x40	; 64
 4e0:	06 c0       	rjmp	.+12     	; 0x4ee <vfprintf+0xec>
 4e2:	8c 36       	cpi	r24, 0x6C	; 108
 4e4:	11 f4       	brne	.+4      	; 0x4ea <vfprintf+0xe8>
 4e6:	00 68       	ori	r16, 0x80	; 128
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <vfprintf+0xec>
 4ea:	88 36       	cpi	r24, 0x68	; 104
 4ec:	51 f4       	brne	.+20     	; 0x502 <vfprintf+0x100>
 4ee:	f1 01       	movw	r30, r2
 4f0:	84 91       	lpm	r24, Z
 4f2:	47 fc       	sbrc	r4, 7
 4f4:	80 81       	ld	r24, Z
 4f6:	ff ef       	ldi	r31, 0xFF	; 255
 4f8:	2f 1a       	sub	r2, r31
 4fa:	3f 0a       	sbc	r3, r31
 4fc:	4f 0a       	sbc	r4, r31
 4fe:	81 11       	cpse	r24, r1
 500:	bf cf       	rjmp	.-130    	; 0x480 <vfprintf+0x7e>
 502:	9b eb       	ldi	r25, 0xBB	; 187
 504:	98 0f       	add	r25, r24
 506:	93 30       	cpi	r25, 0x03	; 3
 508:	18 f4       	brcc	.+6      	; 0x510 <vfprintf+0x10e>
 50a:	00 61       	ori	r16, 0x10	; 16
 50c:	80 5e       	subi	r24, 0xE0	; 224
 50e:	06 c0       	rjmp	.+12     	; 0x51c <vfprintf+0x11a>
 510:	9b e9       	ldi	r25, 0x9B	; 155
 512:	98 0f       	add	r25, r24
 514:	93 30       	cpi	r25, 0x03	; 3
 516:	08 f0       	brcs	.+2      	; 0x51a <vfprintf+0x118>
 518:	66 c1       	rjmp	.+716    	; 0x7e6 <vfprintf+0x3e4>
 51a:	0f 7e       	andi	r16, 0xEF	; 239
 51c:	06 ff       	sbrs	r16, 6
 51e:	16 e0       	ldi	r17, 0x06	; 6
 520:	0f 73       	andi	r16, 0x3F	; 63
 522:	70 2e       	mov	r7, r16
 524:	85 36       	cpi	r24, 0x65	; 101
 526:	21 f4       	brne	.+8      	; 0x530 <vfprintf+0x12e>
 528:	20 2f       	mov	r18, r16
 52a:	20 64       	ori	r18, 0x40	; 64
 52c:	72 2e       	mov	r7, r18
 52e:	08 c0       	rjmp	.+16     	; 0x540 <vfprintf+0x13e>
 530:	86 36       	cpi	r24, 0x66	; 102
 532:	21 f4       	brne	.+8      	; 0x53c <vfprintf+0x13a>
 534:	80 2f       	mov	r24, r16
 536:	80 68       	ori	r24, 0x80	; 128
 538:	78 2e       	mov	r7, r24
 53a:	02 c0       	rjmp	.+4      	; 0x540 <vfprintf+0x13e>
 53c:	11 11       	cpse	r17, r1
 53e:	11 50       	subi	r17, 0x01	; 1
 540:	77 fe       	sbrs	r7, 7
 542:	07 c0       	rjmp	.+14     	; 0x552 <vfprintf+0x150>
 544:	1c 33       	cpi	r17, 0x3C	; 60
 546:	50 f4       	brcc	.+20     	; 0x55c <vfprintf+0x15a>
 548:	ee 24       	eor	r14, r14
 54a:	e3 94       	inc	r14
 54c:	e1 0e       	add	r14, r17
 54e:	27 e0       	ldi	r18, 0x07	; 7
 550:	0b c0       	rjmp	.+22     	; 0x568 <vfprintf+0x166>
 552:	18 30       	cpi	r17, 0x08	; 8
 554:	38 f0       	brcs	.+14     	; 0x564 <vfprintf+0x162>
 556:	27 e0       	ldi	r18, 0x07	; 7
 558:	17 e0       	ldi	r17, 0x07	; 7
 55a:	05 c0       	rjmp	.+10     	; 0x566 <vfprintf+0x164>
 55c:	27 e0       	ldi	r18, 0x07	; 7
 55e:	6c e3       	ldi	r22, 0x3C	; 60
 560:	e6 2e       	mov	r14, r22
 562:	02 c0       	rjmp	.+4      	; 0x568 <vfprintf+0x166>
 564:	21 2f       	mov	r18, r17
 566:	e1 2c       	mov	r14, r1
 568:	f5 01       	movw	r30, r10
 56a:	34 96       	adiw	r30, 0x04	; 4
 56c:	ff 87       	std	Y+15, r31	; 0x0f
 56e:	ee 87       	std	Y+14, r30	; 0x0e
 570:	f5 01       	movw	r30, r10
 572:	60 81       	ld	r22, Z
 574:	71 81       	ldd	r23, Z+1	; 0x01
 576:	82 81       	ldd	r24, Z+2	; 0x02
 578:	93 81       	ldd	r25, Z+3	; 0x03
 57a:	0e 2d       	mov	r16, r14
 57c:	ae 01       	movw	r20, r28
 57e:	4f 5f       	subi	r20, 0xFF	; 255
 580:	5f 4f       	sbci	r21, 0xFF	; 255
 582:	0e 94 26 09 	call	0x124c	; 0x124c <__ftoa_engine>
 586:	5c 01       	movw	r10, r24
 588:	59 80       	ldd	r5, Y+1	; 0x01
 58a:	50 fe       	sbrs	r5, 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <vfprintf+0x190>
 58e:	53 fe       	sbrs	r5, 3
 590:	06 c0       	rjmp	.+12     	; 0x59e <vfprintf+0x19c>
 592:	71 fc       	sbrc	r7, 1
 594:	06 c0       	rjmp	.+12     	; 0x5a2 <vfprintf+0x1a0>
 596:	72 fe       	sbrs	r7, 2
 598:	06 c0       	rjmp	.+12     	; 0x5a6 <vfprintf+0x1a4>
 59a:	00 e2       	ldi	r16, 0x20	; 32
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <vfprintf+0x1a6>
 59e:	0d e2       	ldi	r16, 0x2D	; 45
 5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <vfprintf+0x1a6>
 5a2:	0b e2       	ldi	r16, 0x2B	; 43
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <vfprintf+0x1a6>
 5a6:	00 e0       	ldi	r16, 0x00	; 0
 5a8:	85 2d       	mov	r24, r5
 5aa:	8c 70       	andi	r24, 0x0C	; 12
 5ac:	19 f0       	breq	.+6      	; 0x5b4 <vfprintf+0x1b2>
 5ae:	01 11       	cpse	r16, r1
 5b0:	73 c2       	rjmp	.+1254   	; 0xa98 <__EEPROM_REGION_LENGTH__+0x298>
 5b2:	be c2       	rjmp	.+1404   	; 0xb30 <__EEPROM_REGION_LENGTH__+0x330>
 5b4:	77 fe       	sbrs	r7, 7
 5b6:	0f c0       	rjmp	.+30     	; 0x5d6 <vfprintf+0x1d4>
 5b8:	ea 0c       	add	r14, r10
 5ba:	54 fe       	sbrs	r5, 4
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <vfprintf+0x1c4>
 5be:	8a 81       	ldd	r24, Y+2	; 0x02
 5c0:	81 33       	cpi	r24, 0x31	; 49
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <vfprintf+0x1c4>
 5c4:	ea 94       	dec	r14
 5c6:	1e 14       	cp	r1, r14
 5c8:	74 f5       	brge	.+92     	; 0x626 <vfprintf+0x224>
 5ca:	28 e0       	ldi	r18, 0x08	; 8
 5cc:	2e 15       	cp	r18, r14
 5ce:	78 f5       	brcc	.+94     	; 0x62e <vfprintf+0x22c>
 5d0:	38 e0       	ldi	r19, 0x08	; 8
 5d2:	e3 2e       	mov	r14, r19
 5d4:	2c c0       	rjmp	.+88     	; 0x62e <vfprintf+0x22c>
 5d6:	76 fc       	sbrc	r7, 6
 5d8:	2a c0       	rjmp	.+84     	; 0x62e <vfprintf+0x22c>
 5da:	81 2f       	mov	r24, r17
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	8a 15       	cp	r24, r10
 5e0:	9b 05       	cpc	r25, r11
 5e2:	9c f0       	brlt	.+38     	; 0x60a <vfprintf+0x208>
 5e4:	8c ef       	ldi	r24, 0xFC	; 252
 5e6:	a8 16       	cp	r10, r24
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	b8 06       	cpc	r11, r24
 5ec:	74 f0       	brlt	.+28     	; 0x60a <vfprintf+0x208>
 5ee:	97 2d       	mov	r25, r7
 5f0:	90 68       	ori	r25, 0x80	; 128
 5f2:	79 2e       	mov	r7, r25
 5f4:	0a c0       	rjmp	.+20     	; 0x60a <vfprintf+0x208>
 5f6:	e2 e0       	ldi	r30, 0x02	; 2
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	ec 0f       	add	r30, r28
 5fc:	fd 1f       	adc	r31, r29
 5fe:	e1 0f       	add	r30, r17
 600:	f1 1d       	adc	r31, r1
 602:	80 81       	ld	r24, Z
 604:	80 33       	cpi	r24, 0x30	; 48
 606:	19 f4       	brne	.+6      	; 0x60e <vfprintf+0x20c>
 608:	11 50       	subi	r17, 0x01	; 1
 60a:	11 11       	cpse	r17, r1
 60c:	f4 cf       	rjmp	.-24     	; 0x5f6 <vfprintf+0x1f4>
 60e:	77 fe       	sbrs	r7, 7
 610:	0e c0       	rjmp	.+28     	; 0x62e <vfprintf+0x22c>
 612:	ee 24       	eor	r14, r14
 614:	e3 94       	inc	r14
 616:	e1 0e       	add	r14, r17
 618:	81 2f       	mov	r24, r17
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	a8 16       	cp	r10, r24
 61e:	b9 06       	cpc	r11, r25
 620:	2c f4       	brge	.+10     	; 0x62c <vfprintf+0x22a>
 622:	1a 19       	sub	r17, r10
 624:	04 c0       	rjmp	.+8      	; 0x62e <vfprintf+0x22c>
 626:	ee 24       	eor	r14, r14
 628:	e3 94       	inc	r14
 62a:	01 c0       	rjmp	.+2      	; 0x62e <vfprintf+0x22c>
 62c:	10 e0       	ldi	r17, 0x00	; 0
 62e:	77 fe       	sbrs	r7, 7
 630:	06 c0       	rjmp	.+12     	; 0x63e <vfprintf+0x23c>
 632:	1a 14       	cp	r1, r10
 634:	1b 04       	cpc	r1, r11
 636:	34 f4       	brge	.+12     	; 0x644 <vfprintf+0x242>
 638:	c5 01       	movw	r24, r10
 63a:	01 96       	adiw	r24, 0x01	; 1
 63c:	05 c0       	rjmp	.+10     	; 0x648 <vfprintf+0x246>
 63e:	85 e0       	ldi	r24, 0x05	; 5
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <vfprintf+0x246>
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	01 11       	cpse	r16, r1
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	11 23       	and	r17, r17
 64e:	31 f0       	breq	.+12     	; 0x65c <vfprintf+0x25a>
 650:	21 2f       	mov	r18, r17
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	2f 5f       	subi	r18, 0xFF	; 255
 656:	3f 4f       	sbci	r19, 0xFF	; 255
 658:	82 0f       	add	r24, r18
 65a:	93 1f       	adc	r25, r19
 65c:	2f 2d       	mov	r18, r15
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	82 17       	cp	r24, r18
 662:	93 07       	cpc	r25, r19
 664:	14 f4       	brge	.+4      	; 0x66a <vfprintf+0x268>
 666:	f8 1a       	sub	r15, r24
 668:	01 c0       	rjmp	.+2      	; 0x66c <vfprintf+0x26a>
 66a:	f1 2c       	mov	r15, r1
 66c:	87 2d       	mov	r24, r7
 66e:	89 70       	andi	r24, 0x09	; 9
 670:	49 f4       	brne	.+18     	; 0x684 <vfprintf+0x282>
 672:	ff 20       	and	r15, r15
 674:	39 f0       	breq	.+14     	; 0x684 <vfprintf+0x282>
 676:	b6 01       	movw	r22, r12
 678:	80 e2       	ldi	r24, 0x20	; 32
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 680:	fa 94       	dec	r15
 682:	f7 cf       	rjmp	.-18     	; 0x672 <vfprintf+0x270>
 684:	00 23       	and	r16, r16
 686:	29 f0       	breq	.+10     	; 0x692 <vfprintf+0x290>
 688:	b6 01       	movw	r22, r12
 68a:	80 2f       	mov	r24, r16
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 692:	73 fc       	sbrc	r7, 3
 694:	09 c0       	rjmp	.+18     	; 0x6a8 <vfprintf+0x2a6>
 696:	ff 20       	and	r15, r15
 698:	39 f0       	breq	.+14     	; 0x6a8 <vfprintf+0x2a6>
 69a:	b6 01       	movw	r22, r12
 69c:	80 e3       	ldi	r24, 0x30	; 48
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 6a4:	fa 94       	dec	r15
 6a6:	f7 cf       	rjmp	.-18     	; 0x696 <vfprintf+0x294>
 6a8:	77 fe       	sbrs	r7, 7
 6aa:	49 c0       	rjmp	.+146    	; 0x73e <vfprintf+0x33c>
 6ac:	35 01       	movw	r6, r10
 6ae:	b7 fe       	sbrs	r11, 7
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <vfprintf+0x2b4>
 6b2:	61 2c       	mov	r6, r1
 6b4:	71 2c       	mov	r7, r1
 6b6:	c5 01       	movw	r24, r10
 6b8:	86 19       	sub	r24, r6
 6ba:	97 09       	sbc	r25, r7
 6bc:	88 24       	eor	r8, r8
 6be:	83 94       	inc	r8
 6c0:	91 2c       	mov	r9, r1
 6c2:	8c 0e       	add	r8, r28
 6c4:	9d 1e       	adc	r9, r29
 6c6:	88 0e       	add	r8, r24
 6c8:	99 1e       	adc	r9, r25
 6ca:	f5 01       	movw	r30, r10
 6cc:	ee 19       	sub	r30, r14
 6ce:	f1 09       	sbc	r31, r1
 6d0:	f9 8b       	std	Y+17, r31	; 0x11
 6d2:	e8 8b       	std	Y+16, r30	; 0x10
 6d4:	01 2f       	mov	r16, r17
 6d6:	10 e0       	ldi	r17, 0x00	; 0
 6d8:	11 95       	neg	r17
 6da:	01 95       	neg	r16
 6dc:	11 09       	sbc	r17, r1
 6de:	ff ef       	ldi	r31, 0xFF	; 255
 6e0:	6f 16       	cp	r6, r31
 6e2:	7f 06       	cpc	r7, r31
 6e4:	29 f4       	brne	.+10     	; 0x6f0 <vfprintf+0x2ee>
 6e6:	b6 01       	movw	r22, r12
 6e8:	8e e2       	ldi	r24, 0x2E	; 46
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 6f0:	a6 14       	cp	r10, r6
 6f2:	b7 04       	cpc	r11, r7
 6f4:	44 f0       	brlt	.+16     	; 0x706 <vfprintf+0x304>
 6f6:	88 89       	ldd	r24, Y+16	; 0x10
 6f8:	99 89       	ldd	r25, Y+17	; 0x11
 6fa:	86 15       	cp	r24, r6
 6fc:	97 05       	cpc	r25, r7
 6fe:	1c f4       	brge	.+6      	; 0x706 <vfprintf+0x304>
 700:	f4 01       	movw	r30, r8
 702:	81 81       	ldd	r24, Z+1	; 0x01
 704:	01 c0       	rjmp	.+2      	; 0x708 <vfprintf+0x306>
 706:	80 e3       	ldi	r24, 0x30	; 48
 708:	f1 e0       	ldi	r31, 0x01	; 1
 70a:	6f 1a       	sub	r6, r31
 70c:	71 08       	sbc	r7, r1
 70e:	2f ef       	ldi	r18, 0xFF	; 255
 710:	82 1a       	sub	r8, r18
 712:	92 0a       	sbc	r9, r18
 714:	60 16       	cp	r6, r16
 716:	71 06       	cpc	r7, r17
 718:	2c f0       	brlt	.+10     	; 0x724 <vfprintf+0x322>
 71a:	b6 01       	movw	r22, r12
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 722:	dd cf       	rjmp	.-70     	; 0x6de <vfprintf+0x2dc>
 724:	a6 14       	cp	r10, r6
 726:	b7 04       	cpc	r11, r7
 728:	39 f4       	brne	.+14     	; 0x738 <vfprintf+0x336>
 72a:	9a 81       	ldd	r25, Y+2	; 0x02
 72c:	96 33       	cpi	r25, 0x36	; 54
 72e:	18 f4       	brcc	.+6      	; 0x736 <vfprintf+0x334>
 730:	95 33       	cpi	r25, 0x35	; 53
 732:	11 f4       	brne	.+4      	; 0x738 <vfprintf+0x336>
 734:	54 fe       	sbrs	r5, 4
 736:	81 e3       	ldi	r24, 0x31	; 49
 738:	b6 01       	movw	r22, r12
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	51 c0       	rjmp	.+162    	; 0x7e0 <vfprintf+0x3de>
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	81 33       	cpi	r24, 0x31	; 49
 742:	19 f0       	breq	.+6      	; 0x74a <vfprintf+0x348>
 744:	95 2d       	mov	r25, r5
 746:	9f 7e       	andi	r25, 0xEF	; 239
 748:	59 2e       	mov	r5, r25
 74a:	b6 01       	movw	r22, r12
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 752:	11 11       	cpse	r17, r1
 754:	05 c0       	rjmp	.+10     	; 0x760 <vfprintf+0x35e>
 756:	74 fc       	sbrc	r7, 4
 758:	1c c0       	rjmp	.+56     	; 0x792 <vfprintf+0x390>
 75a:	85 e6       	ldi	r24, 0x65	; 101
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	1b c0       	rjmp	.+54     	; 0x796 <vfprintf+0x394>
 760:	b6 01       	movw	r22, r12
 762:	8e e2       	ldi	r24, 0x2E	; 46
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 76a:	02 e0       	ldi	r16, 0x02	; 2
 76c:	01 0f       	add	r16, r17
 76e:	82 e0       	ldi	r24, 0x02	; 2
 770:	11 e0       	ldi	r17, 0x01	; 1
 772:	18 0f       	add	r17, r24
 774:	e1 e0       	ldi	r30, 0x01	; 1
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	ec 0f       	add	r30, r28
 77a:	fd 1f       	adc	r31, r29
 77c:	e8 0f       	add	r30, r24
 77e:	f1 1d       	adc	r31, r1
 780:	80 81       	ld	r24, Z
 782:	b6 01       	movw	r22, r12
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 78a:	81 2f       	mov	r24, r17
 78c:	10 13       	cpse	r17, r16
 78e:	f0 cf       	rjmp	.-32     	; 0x770 <vfprintf+0x36e>
 790:	e2 cf       	rjmp	.-60     	; 0x756 <vfprintf+0x354>
 792:	85 e4       	ldi	r24, 0x45	; 69
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	b6 01       	movw	r22, r12
 798:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 79c:	b7 fc       	sbrc	r11, 7
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <vfprintf+0x3a8>
 7a0:	a1 14       	cp	r10, r1
 7a2:	b1 04       	cpc	r11, r1
 7a4:	39 f4       	brne	.+14     	; 0x7b4 <vfprintf+0x3b2>
 7a6:	54 fe       	sbrs	r5, 4
 7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <vfprintf+0x3b2>
 7aa:	b1 94       	neg	r11
 7ac:	a1 94       	neg	r10
 7ae:	b1 08       	sbc	r11, r1
 7b0:	8d e2       	ldi	r24, 0x2D	; 45
 7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <vfprintf+0x3b4>
 7b4:	8b e2       	ldi	r24, 0x2B	; 43
 7b6:	b6 01       	movw	r22, r12
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 7be:	80 e3       	ldi	r24, 0x30	; 48
 7c0:	ea e0       	ldi	r30, 0x0A	; 10
 7c2:	ae 16       	cp	r10, r30
 7c4:	b1 04       	cpc	r11, r1
 7c6:	2c f0       	brlt	.+10     	; 0x7d2 <vfprintf+0x3d0>
 7c8:	8f 5f       	subi	r24, 0xFF	; 255
 7ca:	aa e0       	ldi	r26, 0x0A	; 10
 7cc:	aa 1a       	sub	r10, r26
 7ce:	b1 08       	sbc	r11, r1
 7d0:	f7 cf       	rjmp	.-18     	; 0x7c0 <vfprintf+0x3be>
 7d2:	b6 01       	movw	r22, r12
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 7da:	b6 01       	movw	r22, r12
 7dc:	c5 01       	movw	r24, r10
 7de:	c0 96       	adiw	r24, 0x30	; 48
 7e0:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 7e4:	72 c1       	rjmp	.+740    	; 0xaca <__EEPROM_REGION_LENGTH__+0x2ca>
 7e6:	83 36       	cpi	r24, 0x63	; 99
 7e8:	31 f0       	breq	.+12     	; 0x7f6 <vfprintf+0x3f4>
 7ea:	83 37       	cpi	r24, 0x73	; 115
 7ec:	91 f0       	breq	.+36     	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
 7ee:	83 35       	cpi	r24, 0x53	; 83
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <vfprintf+0x3f2>
 7f2:	5d c0       	rjmp	.+186    	; 0x8ae <__EEPROM_REGION_LENGTH__+0xae>
 7f4:	24 c0       	rjmp	.+72     	; 0x83e <__EEPROM_REGION_LENGTH__+0x3e>
 7f6:	c5 01       	movw	r24, r10
 7f8:	02 96       	adiw	r24, 0x02	; 2
 7fa:	9f 87       	std	Y+15, r25	; 0x0f
 7fc:	8e 87       	std	Y+14, r24	; 0x0e
 7fe:	f5 01       	movw	r30, r10
 800:	80 81       	ld	r24, Z
 802:	89 83       	std	Y+1, r24	; 0x01
 804:	6a 88       	ldd	r6, Y+18	; 0x12
 806:	7b 88       	ldd	r7, Y+19	; 0x13
 808:	8c 88       	ldd	r8, Y+20	; 0x14
 80a:	aa 24       	eor	r10, r10
 80c:	a3 94       	inc	r10
 80e:	b1 2c       	mov	r11, r1
 810:	14 c0       	rjmp	.+40     	; 0x83a <__EEPROM_REGION_LENGTH__+0x3a>
 812:	c5 01       	movw	r24, r10
 814:	03 96       	adiw	r24, 0x03	; 3
 816:	9f 87       	std	Y+15, r25	; 0x0f
 818:	8e 87       	std	Y+14, r24	; 0x0e
 81a:	f5 01       	movw	r30, r10
 81c:	60 80       	ld	r6, Z
 81e:	71 80       	ldd	r7, Z+1	; 0x01
 820:	82 80       	ldd	r8, Z+2	; 0x02
 822:	06 ff       	sbrs	r16, 6
 824:	03 c0       	rjmp	.+6      	; 0x82c <__EEPROM_REGION_LENGTH__+0x2c>
 826:	41 2f       	mov	r20, r17
 828:	50 e0       	ldi	r21, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <__EEPROM_REGION_LENGTH__+0x30>
 82c:	4f ef       	ldi	r20, 0xFF	; 255
 82e:	5f ef       	ldi	r21, 0xFF	; 255
 830:	88 2d       	mov	r24, r8
 832:	b3 01       	movw	r22, r6
 834:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <strnlen>
 838:	5c 01       	movw	r10, r24
 83a:	0f 77       	andi	r16, 0x7F	; 127
 83c:	15 c0       	rjmp	.+42     	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
 83e:	c5 01       	movw	r24, r10
 840:	03 96       	adiw	r24, 0x03	; 3
 842:	9f 87       	std	Y+15, r25	; 0x0f
 844:	8e 87       	std	Y+14, r24	; 0x0e
 846:	f5 01       	movw	r30, r10
 848:	60 80       	ld	r6, Z
 84a:	71 80       	ldd	r7, Z+1	; 0x01
 84c:	82 80       	ldd	r8, Z+2	; 0x02
 84e:	06 ff       	sbrs	r16, 6
 850:	03 c0       	rjmp	.+6      	; 0x858 <__EEPROM_REGION_LENGTH__+0x58>
 852:	41 2f       	mov	r20, r17
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <__EEPROM_REGION_LENGTH__+0x5c>
 858:	4f ef       	ldi	r20, 0xFF	; 255
 85a:	5f ef       	ldi	r21, 0xFF	; 255
 85c:	88 2d       	mov	r24, r8
 85e:	b3 01       	movw	r22, r6
 860:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <strnlen>
 864:	5c 01       	movw	r10, r24
 866:	00 68       	ori	r16, 0x80	; 128
 868:	03 fd       	sbrc	r16, 3
 86a:	1d c0       	rjmp	.+58     	; 0x8a6 <__EEPROM_REGION_LENGTH__+0xa6>
 86c:	8f 2d       	mov	r24, r15
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	a8 16       	cp	r10, r24
 872:	b9 06       	cpc	r11, r25
 874:	c0 f4       	brcc	.+48     	; 0x8a6 <__EEPROM_REGION_LENGTH__+0xa6>
 876:	b6 01       	movw	r22, r12
 878:	80 e2       	ldi	r24, 0x20	; 32
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 880:	fa 94       	dec	r15
 882:	f4 cf       	rjmp	.-24     	; 0x86c <__EEPROM_REGION_LENGTH__+0x6c>
 884:	f3 01       	movw	r30, r6
 886:	84 91       	lpm	r24, Z
 888:	87 fc       	sbrc	r8, 7
 88a:	80 81       	ld	r24, Z
 88c:	ff ef       	ldi	r31, 0xFF	; 255
 88e:	6f 1a       	sub	r6, r31
 890:	7f 0a       	sbc	r7, r31
 892:	8f 0a       	sbc	r8, r31
 894:	b6 01       	movw	r22, r12
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 89c:	f1 10       	cpse	r15, r1
 89e:	fa 94       	dec	r15
 8a0:	21 e0       	ldi	r18, 0x01	; 1
 8a2:	a2 1a       	sub	r10, r18
 8a4:	b1 08       	sbc	r11, r1
 8a6:	a1 14       	cp	r10, r1
 8a8:	b1 04       	cpc	r11, r1
 8aa:	61 f7       	brne	.-40     	; 0x884 <__EEPROM_REGION_LENGTH__+0x84>
 8ac:	0e c1       	rjmp	.+540    	; 0xaca <__EEPROM_REGION_LENGTH__+0x2ca>
 8ae:	84 36       	cpi	r24, 0x64	; 100
 8b0:	11 f0       	breq	.+4      	; 0x8b6 <__EEPROM_REGION_LENGTH__+0xb6>
 8b2:	89 36       	cpi	r24, 0x69	; 105
 8b4:	79 f5       	brne	.+94     	; 0x914 <__EEPROM_REGION_LENGTH__+0x114>
 8b6:	c5 01       	movw	r24, r10
 8b8:	07 ff       	sbrs	r16, 7
 8ba:	09 c0       	rjmp	.+18     	; 0x8ce <__EEPROM_REGION_LENGTH__+0xce>
 8bc:	04 96       	adiw	r24, 0x04	; 4
 8be:	9f 87       	std	Y+15, r25	; 0x0f
 8c0:	8e 87       	std	Y+14, r24	; 0x0e
 8c2:	f5 01       	movw	r30, r10
 8c4:	60 81       	ld	r22, Z
 8c6:	71 81       	ldd	r23, Z+1	; 0x01
 8c8:	82 81       	ldd	r24, Z+2	; 0x02
 8ca:	93 81       	ldd	r25, Z+3	; 0x03
 8cc:	0a c0       	rjmp	.+20     	; 0x8e2 <__EEPROM_REGION_LENGTH__+0xe2>
 8ce:	02 96       	adiw	r24, 0x02	; 2
 8d0:	9f 87       	std	Y+15, r25	; 0x0f
 8d2:	8e 87       	std	Y+14, r24	; 0x0e
 8d4:	f5 01       	movw	r30, r10
 8d6:	60 81       	ld	r22, Z
 8d8:	71 81       	ldd	r23, Z+1	; 0x01
 8da:	07 2e       	mov	r0, r23
 8dc:	00 0c       	add	r0, r0
 8de:	88 0b       	sbc	r24, r24
 8e0:	99 0b       	sbc	r25, r25
 8e2:	0f 76       	andi	r16, 0x6F	; 111
 8e4:	e0 2e       	mov	r14, r16
 8e6:	97 ff       	sbrs	r25, 7
 8e8:	0a c0       	rjmp	.+20     	; 0x8fe <__EEPROM_REGION_LENGTH__+0xfe>
 8ea:	90 95       	com	r25
 8ec:	80 95       	com	r24
 8ee:	70 95       	com	r23
 8f0:	61 95       	neg	r22
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255
 8f4:	8f 4f       	sbci	r24, 0xFF	; 255
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	f0 2f       	mov	r31, r16
 8fa:	f0 68       	ori	r31, 0x80	; 128
 8fc:	ef 2e       	mov	r14, r31
 8fe:	2a e0       	ldi	r18, 0x0A	; 10
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	ae 01       	movw	r20, r28
 904:	4f 5f       	subi	r20, 0xFF	; 255
 906:	5f 4f       	sbci	r21, 0xFF	; 255
 908:	0e 94 47 11 	call	0x228e	; 0x228e <__ultoa_invert>
 90c:	a8 2e       	mov	r10, r24
 90e:	2c 85       	ldd	r18, Y+12	; 0x0c
 910:	a2 1a       	sub	r10, r18
 912:	4b c0       	rjmp	.+150    	; 0x9aa <__EEPROM_REGION_LENGTH__+0x1aa>
 914:	85 37       	cpi	r24, 0x75	; 117
 916:	29 f4       	brne	.+10     	; 0x922 <__EEPROM_REGION_LENGTH__+0x122>
 918:	0f 7e       	andi	r16, 0xEF	; 239
 91a:	e0 2e       	mov	r14, r16
 91c:	2a e0       	ldi	r18, 0x0A	; 10
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	25 c0       	rjmp	.+74     	; 0x96c <__EEPROM_REGION_LENGTH__+0x16c>
 922:	90 2f       	mov	r25, r16
 924:	99 7f       	andi	r25, 0xF9	; 249
 926:	e9 2e       	mov	r14, r25
 928:	8f 36       	cpi	r24, 0x6F	; 111
 92a:	c1 f0       	breq	.+48     	; 0x95c <__EEPROM_REGION_LENGTH__+0x15c>
 92c:	18 f4       	brcc	.+6      	; 0x934 <__EEPROM_REGION_LENGTH__+0x134>
 92e:	88 35       	cpi	r24, 0x58	; 88
 930:	79 f0       	breq	.+30     	; 0x950 <__EEPROM_REGION_LENGTH__+0x150>
 932:	d5 c0       	rjmp	.+426    	; 0xade <__EEPROM_REGION_LENGTH__+0x2de>
 934:	80 37       	cpi	r24, 0x70	; 112
 936:	19 f0       	breq	.+6      	; 0x93e <__EEPROM_REGION_LENGTH__+0x13e>
 938:	88 37       	cpi	r24, 0x78	; 120
 93a:	21 f0       	breq	.+8      	; 0x944 <__EEPROM_REGION_LENGTH__+0x144>
 93c:	d0 c0       	rjmp	.+416    	; 0xade <__EEPROM_REGION_LENGTH__+0x2de>
 93e:	a9 2f       	mov	r26, r25
 940:	a0 61       	ori	r26, 0x10	; 16
 942:	ea 2e       	mov	r14, r26
 944:	e4 fe       	sbrs	r14, 4
 946:	0d c0       	rjmp	.+26     	; 0x962 <__EEPROM_REGION_LENGTH__+0x162>
 948:	ee 2d       	mov	r30, r14
 94a:	e4 60       	ori	r30, 0x04	; 4
 94c:	ee 2e       	mov	r14, r30
 94e:	09 c0       	rjmp	.+18     	; 0x962 <__EEPROM_REGION_LENGTH__+0x162>
 950:	04 ff       	sbrs	r16, 4
 952:	0a c0       	rjmp	.+20     	; 0x968 <__EEPROM_REGION_LENGTH__+0x168>
 954:	f9 2f       	mov	r31, r25
 956:	f6 60       	ori	r31, 0x06	; 6
 958:	ef 2e       	mov	r14, r31
 95a:	06 c0       	rjmp	.+12     	; 0x968 <__EEPROM_REGION_LENGTH__+0x168>
 95c:	28 e0       	ldi	r18, 0x08	; 8
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	05 c0       	rjmp	.+10     	; 0x96c <__EEPROM_REGION_LENGTH__+0x16c>
 962:	20 e1       	ldi	r18, 0x10	; 16
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	02 c0       	rjmp	.+4      	; 0x96c <__EEPROM_REGION_LENGTH__+0x16c>
 968:	20 e1       	ldi	r18, 0x10	; 16
 96a:	32 e0       	ldi	r19, 0x02	; 2
 96c:	c5 01       	movw	r24, r10
 96e:	e7 fe       	sbrs	r14, 7
 970:	09 c0       	rjmp	.+18     	; 0x984 <__EEPROM_REGION_LENGTH__+0x184>
 972:	04 96       	adiw	r24, 0x04	; 4
 974:	9f 87       	std	Y+15, r25	; 0x0f
 976:	8e 87       	std	Y+14, r24	; 0x0e
 978:	f5 01       	movw	r30, r10
 97a:	60 81       	ld	r22, Z
 97c:	71 81       	ldd	r23, Z+1	; 0x01
 97e:	82 81       	ldd	r24, Z+2	; 0x02
 980:	93 81       	ldd	r25, Z+3	; 0x03
 982:	08 c0       	rjmp	.+16     	; 0x994 <__EEPROM_REGION_LENGTH__+0x194>
 984:	02 96       	adiw	r24, 0x02	; 2
 986:	9f 87       	std	Y+15, r25	; 0x0f
 988:	8e 87       	std	Y+14, r24	; 0x0e
 98a:	f5 01       	movw	r30, r10
 98c:	60 81       	ld	r22, Z
 98e:	71 81       	ldd	r23, Z+1	; 0x01
 990:	80 e0       	ldi	r24, 0x00	; 0
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	ae 01       	movw	r20, r28
 996:	4f 5f       	subi	r20, 0xFF	; 255
 998:	5f 4f       	sbci	r21, 0xFF	; 255
 99a:	0e 94 47 11 	call	0x228e	; 0x228e <__ultoa_invert>
 99e:	a8 2e       	mov	r10, r24
 9a0:	fc 85       	ldd	r31, Y+12	; 0x0c
 9a2:	af 1a       	sub	r10, r31
 9a4:	2e 2d       	mov	r18, r14
 9a6:	2f 77       	andi	r18, 0x7F	; 127
 9a8:	e2 2e       	mov	r14, r18
 9aa:	e6 fe       	sbrs	r14, 6
 9ac:	0b c0       	rjmp	.+22     	; 0x9c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 9ae:	0e 2d       	mov	r16, r14
 9b0:	0e 7f       	andi	r16, 0xFE	; 254
 9b2:	a1 16       	cp	r10, r17
 9b4:	50 f4       	brcc	.+20     	; 0x9ca <__EEPROM_REGION_LENGTH__+0x1ca>
 9b6:	e4 fe       	sbrs	r14, 4
 9b8:	0a c0       	rjmp	.+20     	; 0x9ce <__EEPROM_REGION_LENGTH__+0x1ce>
 9ba:	e2 fc       	sbrc	r14, 2
 9bc:	08 c0       	rjmp	.+16     	; 0x9ce <__EEPROM_REGION_LENGTH__+0x1ce>
 9be:	0e 2d       	mov	r16, r14
 9c0:	0e 7e       	andi	r16, 0xEE	; 238
 9c2:	05 c0       	rjmp	.+10     	; 0x9ce <__EEPROM_REGION_LENGTH__+0x1ce>
 9c4:	ba 2c       	mov	r11, r10
 9c6:	0e 2d       	mov	r16, r14
 9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9ca:	ba 2c       	mov	r11, r10
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9ce:	b1 2e       	mov	r11, r17
 9d0:	04 ff       	sbrs	r16, 4
 9d2:	0d c0       	rjmp	.+26     	; 0x9ee <__EEPROM_REGION_LENGTH__+0x1ee>
 9d4:	fe 01       	movw	r30, r28
 9d6:	ea 0d       	add	r30, r10
 9d8:	f1 1d       	adc	r31, r1
 9da:	80 81       	ld	r24, Z
 9dc:	80 33       	cpi	r24, 0x30	; 48
 9de:	11 f4       	brne	.+4      	; 0x9e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 9e0:	09 7e       	andi	r16, 0xE9	; 233
 9e2:	09 c0       	rjmp	.+18     	; 0x9f6 <__EEPROM_REGION_LENGTH__+0x1f6>
 9e4:	02 ff       	sbrs	r16, 2
 9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <__EEPROM_REGION_LENGTH__+0x1f4>
 9e8:	b3 94       	inc	r11
 9ea:	b3 94       	inc	r11
 9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <__EEPROM_REGION_LENGTH__+0x1f6>
 9ee:	80 2f       	mov	r24, r16
 9f0:	86 78       	andi	r24, 0x86	; 134
 9f2:	09 f0       	breq	.+2      	; 0x9f6 <__EEPROM_REGION_LENGTH__+0x1f6>
 9f4:	b3 94       	inc	r11
 9f6:	03 fd       	sbrc	r16, 3
 9f8:	11 c0       	rjmp	.+34     	; 0xa1c <__EEPROM_REGION_LENGTH__+0x21c>
 9fa:	00 ff       	sbrs	r16, 0
 9fc:	06 c0       	rjmp	.+12     	; 0xa0a <__EEPROM_REGION_LENGTH__+0x20a>
 9fe:	bf 14       	cp	r11, r15
 a00:	88 f4       	brcc	.+34     	; 0xa24 <__EEPROM_REGION_LENGTH__+0x224>
 a02:	fa 0c       	add	r15, r10
 a04:	1f 2d       	mov	r17, r15
 a06:	1b 19       	sub	r17, r11
 a08:	0e c0       	rjmp	.+28     	; 0xa26 <__EEPROM_REGION_LENGTH__+0x226>
 a0a:	bf 14       	cp	r11, r15
 a0c:	60 f4       	brcc	.+24     	; 0xa26 <__EEPROM_REGION_LENGTH__+0x226>
 a0e:	b6 01       	movw	r22, r12
 a10:	80 e2       	ldi	r24, 0x20	; 32
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 a18:	b3 94       	inc	r11
 a1a:	f7 cf       	rjmp	.-18     	; 0xa0a <__EEPROM_REGION_LENGTH__+0x20a>
 a1c:	bf 14       	cp	r11, r15
 a1e:	18 f4       	brcc	.+6      	; 0xa26 <__EEPROM_REGION_LENGTH__+0x226>
 a20:	fb 18       	sub	r15, r11
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <__EEPROM_REGION_LENGTH__+0x228>
 a24:	1a 2d       	mov	r17, r10
 a26:	f1 2c       	mov	r15, r1
 a28:	04 ff       	sbrs	r16, 4
 a2a:	10 c0       	rjmp	.+32     	; 0xa4c <__EEPROM_REGION_LENGTH__+0x24c>
 a2c:	b6 01       	movw	r22, r12
 a2e:	80 e3       	ldi	r24, 0x30	; 48
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 a36:	02 ff       	sbrs	r16, 2
 a38:	17 c0       	rjmp	.+46     	; 0xa68 <__EEPROM_REGION_LENGTH__+0x268>
 a3a:	01 fd       	sbrc	r16, 1
 a3c:	03 c0       	rjmp	.+6      	; 0xa44 <__EEPROM_REGION_LENGTH__+0x244>
 a3e:	88 e7       	ldi	r24, 0x78	; 120
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <__EEPROM_REGION_LENGTH__+0x248>
 a44:	88 e5       	ldi	r24, 0x58	; 88
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	b6 01       	movw	r22, r12
 a4a:	0c c0       	rjmp	.+24     	; 0xa64 <__EEPROM_REGION_LENGTH__+0x264>
 a4c:	80 2f       	mov	r24, r16
 a4e:	86 78       	andi	r24, 0x86	; 134
 a50:	59 f0       	breq	.+22     	; 0xa68 <__EEPROM_REGION_LENGTH__+0x268>
 a52:	01 ff       	sbrs	r16, 1
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <__EEPROM_REGION_LENGTH__+0x25a>
 a56:	8b e2       	ldi	r24, 0x2B	; 43
 a58:	01 c0       	rjmp	.+2      	; 0xa5c <__EEPROM_REGION_LENGTH__+0x25c>
 a5a:	80 e2       	ldi	r24, 0x20	; 32
 a5c:	07 fd       	sbrc	r16, 7
 a5e:	8d e2       	ldi	r24, 0x2D	; 45
 a60:	b6 01       	movw	r22, r12
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 a68:	a1 16       	cp	r10, r17
 a6a:	38 f4       	brcc	.+14     	; 0xa7a <__EEPROM_REGION_LENGTH__+0x27a>
 a6c:	b6 01       	movw	r22, r12
 a6e:	80 e3       	ldi	r24, 0x30	; 48
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 a76:	11 50       	subi	r17, 0x01	; 1
 a78:	f7 cf       	rjmp	.-18     	; 0xa68 <__EEPROM_REGION_LENGTH__+0x268>
 a7a:	aa 94       	dec	r10
 a7c:	e1 e0       	ldi	r30, 0x01	; 1
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	ec 0f       	add	r30, r28
 a82:	fd 1f       	adc	r31, r29
 a84:	ea 0d       	add	r30, r10
 a86:	f1 1d       	adc	r31, r1
 a88:	80 81       	ld	r24, Z
 a8a:	b6 01       	movw	r22, r12
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 a92:	a1 10       	cpse	r10, r1
 a94:	f2 cf       	rjmp	.-28     	; 0xa7a <__EEPROM_REGION_LENGTH__+0x27a>
 a96:	19 c0       	rjmp	.+50     	; 0xaca <__EEPROM_REGION_LENGTH__+0x2ca>
 a98:	f4 e0       	ldi	r31, 0x04	; 4
 a9a:	ff 15       	cp	r31, r15
 a9c:	80 f5       	brcc	.+96     	; 0xafe <__EEPROM_REGION_LENGTH__+0x2fe>
 a9e:	84 e0       	ldi	r24, 0x04	; 4
 aa0:	f8 1a       	sub	r15, r24
 aa2:	73 fe       	sbrs	r7, 3
 aa4:	23 c0       	rjmp	.+70     	; 0xaec <__EEPROM_REGION_LENGTH__+0x2ec>
 aa6:	01 11       	cpse	r16, r1
 aa8:	2b c0       	rjmp	.+86     	; 0xb00 <__EEPROM_REGION_LENGTH__+0x300>
 aaa:	53 fe       	sbrs	r5, 3
 aac:	2f c0       	rjmp	.+94     	; 0xb0c <__EEPROM_REGION_LENGTH__+0x30c>
 aae:	5d ee       	ldi	r21, 0xED	; 237
 ab0:	85 2e       	mov	r8, r21
 ab2:	53 e0       	ldi	r21, 0x03	; 3
 ab4:	95 2e       	mov	r9, r21
 ab6:	50 e0       	ldi	r21, 0x00	; 0
 ab8:	a5 2e       	mov	r10, r21
 aba:	07 2d       	mov	r16, r7
 abc:	00 71       	andi	r16, 0x10	; 16
 abe:	f4 01       	movw	r30, r8
 ac0:	84 91       	lpm	r24, Z
 ac2:	a7 fc       	sbrc	r10, 7
 ac4:	80 81       	ld	r24, Z
 ac6:	81 11       	cpse	r24, r1
 ac8:	28 c0       	rjmp	.+80     	; 0xb1a <__EEPROM_REGION_LENGTH__+0x31a>
 aca:	ff 20       	and	r15, r15
 acc:	09 f4       	brne	.+2      	; 0xad0 <__EEPROM_REGION_LENGTH__+0x2d0>
 ace:	d2 cc       	rjmp	.-1628   	; 0x474 <vfprintf+0x72>
 ad0:	b6 01       	movw	r22, r12
 ad2:	80 e2       	ldi	r24, 0x20	; 32
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 ada:	fa 94       	dec	r15
 adc:	f6 cf       	rjmp	.-20     	; 0xaca <__EEPROM_REGION_LENGTH__+0x2ca>
 ade:	f6 01       	movw	r30, r12
 ae0:	87 81       	ldd	r24, Z+7	; 0x07
 ae2:	90 85       	ldd	r25, Z+8	; 0x08
 ae4:	2c c0       	rjmp	.+88     	; 0xb3e <__EEPROM_REGION_LENGTH__+0x33e>
 ae6:	8f ef       	ldi	r24, 0xFF	; 255
 ae8:	9f ef       	ldi	r25, 0xFF	; 255
 aea:	29 c0       	rjmp	.+82     	; 0xb3e <__EEPROM_REGION_LENGTH__+0x33e>
 aec:	b6 01       	movw	r22, r12
 aee:	80 e2       	ldi	r24, 0x20	; 32
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 af6:	fa 94       	dec	r15
 af8:	f1 10       	cpse	r15, r1
 afa:	f8 cf       	rjmp	.-16     	; 0xaec <__EEPROM_REGION_LENGTH__+0x2ec>
 afc:	d4 cf       	rjmp	.-88     	; 0xaa6 <__EEPROM_REGION_LENGTH__+0x2a6>
 afe:	f1 2c       	mov	r15, r1
 b00:	b6 01       	movw	r22, r12
 b02:	80 2f       	mov	r24, r16
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 b0a:	cf cf       	rjmp	.-98     	; 0xaaa <__EEPROM_REGION_LENGTH__+0x2aa>
 b0c:	49 ee       	ldi	r20, 0xE9	; 233
 b0e:	84 2e       	mov	r8, r20
 b10:	43 e0       	ldi	r20, 0x03	; 3
 b12:	94 2e       	mov	r9, r20
 b14:	40 e0       	ldi	r20, 0x00	; 0
 b16:	a4 2e       	mov	r10, r20
 b18:	d0 cf       	rjmp	.-96     	; 0xaba <__EEPROM_REGION_LENGTH__+0x2ba>
 b1a:	01 11       	cpse	r16, r1
 b1c:	80 52       	subi	r24, 0x20	; 32
 b1e:	b6 01       	movw	r22, r12
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	0e 94 21 15 	call	0x2a42	; 0x2a42 <fputc>
 b26:	ff ef       	ldi	r31, 0xFF	; 255
 b28:	8f 1a       	sub	r8, r31
 b2a:	9f 0a       	sbc	r9, r31
 b2c:	af 0a       	sbc	r10, r31
 b2e:	c7 cf       	rjmp	.-114    	; 0xabe <__EEPROM_REGION_LENGTH__+0x2be>
 b30:	23 e0       	ldi	r18, 0x03	; 3
 b32:	2f 15       	cp	r18, r15
 b34:	10 f4       	brcc	.+4      	; 0xb3a <__EEPROM_REGION_LENGTH__+0x33a>
 b36:	83 e0       	ldi	r24, 0x03	; 3
 b38:	b3 cf       	rjmp	.-154    	; 0xaa0 <__EEPROM_REGION_LENGTH__+0x2a0>
 b3a:	f1 2c       	mov	r15, r1
 b3c:	b6 cf       	rjmp	.-148    	; 0xaaa <__EEPROM_REGION_LENGTH__+0x2aa>
 b3e:	64 96       	adiw	r28, 0x14	; 20
 b40:	e2 e1       	ldi	r30, 0x12	; 18
 b42:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__epilogue_restores__>

Disassembly of section .text.libgcc:

000044d6 <__tablejump2__>:
    44d6:	ee 0f       	add	r30, r30
    44d8:	ff 1f       	adc	r31, r31
    44da:	05 90       	lpm	r0, Z+
    44dc:	f4 91       	lpm	r31, Z
    44de:	e0 2d       	mov	r30, r0
    44e0:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

0000406c <__umulhisi3>:
    406c:	a2 9f       	mul	r26, r18
    406e:	b0 01       	movw	r22, r0
    4070:	b3 9f       	mul	r27, r19
    4072:	c0 01       	movw	r24, r0
    4074:	a3 9f       	mul	r26, r19
    4076:	70 0d       	add	r23, r0
    4078:	81 1d       	adc	r24, r1
    407a:	11 24       	eor	r1, r1
    407c:	91 1d       	adc	r25, r1
    407e:	b2 9f       	mul	r27, r18
    4080:	70 0d       	add	r23, r0
    4082:	81 1d       	adc	r24, r1
    4084:	11 24       	eor	r1, r1
    4086:	91 1d       	adc	r25, r1
    4088:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00003946 <__prologue_saves__>:
    3946:	2f 92       	push	r2
    3948:	3f 92       	push	r3
    394a:	4f 92       	push	r4
    394c:	5f 92       	push	r5
    394e:	6f 92       	push	r6
    3950:	7f 92       	push	r7
    3952:	8f 92       	push	r8
    3954:	9f 92       	push	r9
    3956:	af 92       	push	r10
    3958:	bf 92       	push	r11
    395a:	cf 92       	push	r12
    395c:	df 92       	push	r13
    395e:	ef 92       	push	r14
    3960:	ff 92       	push	r15
    3962:	0f 93       	push	r16
    3964:	1f 93       	push	r17
    3966:	cf 93       	push	r28
    3968:	df 93       	push	r29
    396a:	cd b7       	in	r28, 0x3d	; 61
    396c:	de b7       	in	r29, 0x3e	; 62
    396e:	ca 1b       	sub	r28, r26
    3970:	db 0b       	sbc	r29, r27
    3972:	0f b6       	in	r0, 0x3f	; 63
    3974:	f8 94       	cli
    3976:	de bf       	out	0x3e, r29	; 62
    3978:	0f be       	out	0x3f, r0	; 63
    397a:	cd bf       	out	0x3d, r28	; 61
    397c:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000039ea <__epilogue_restores__>:
    39ea:	2a 88       	ldd	r2, Y+18	; 0x12
    39ec:	39 88       	ldd	r3, Y+17	; 0x11
    39ee:	48 88       	ldd	r4, Y+16	; 0x10
    39f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    39f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    39f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    39f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    39f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    39fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    39fc:	b9 84       	ldd	r11, Y+9	; 0x09
    39fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3a00:	df 80       	ldd	r13, Y+7	; 0x07
    3a02:	ee 80       	ldd	r14, Y+6	; 0x06
    3a04:	fd 80       	ldd	r15, Y+5	; 0x05
    3a06:	0c 81       	ldd	r16, Y+4	; 0x04
    3a08:	1b 81       	ldd	r17, Y+3	; 0x03
    3a0a:	aa 81       	ldd	r26, Y+2	; 0x02
    3a0c:	b9 81       	ldd	r27, Y+1	; 0x01
    3a0e:	ce 0f       	add	r28, r30
    3a10:	d1 1d       	adc	r29, r1
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	ed 01       	movw	r28, r26
    3a1e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000124c <__ftoa_engine>:
    124c:	28 30       	cpi	r18, 0x08	; 8
    124e:	08 f0       	brcs	.+2      	; 0x1252 <__ftoa_engine+0x6>
    1250:	27 e0       	ldi	r18, 0x07	; 7
    1252:	33 27       	eor	r19, r19
    1254:	da 01       	movw	r26, r20
    1256:	99 0f       	add	r25, r25
    1258:	31 1d       	adc	r19, r1
    125a:	87 fd       	sbrc	r24, 7
    125c:	91 60       	ori	r25, 0x01	; 1
    125e:	00 96       	adiw	r24, 0x00	; 0
    1260:	61 05       	cpc	r22, r1
    1262:	71 05       	cpc	r23, r1
    1264:	39 f4       	brne	.+14     	; 0x1274 <__ftoa_engine+0x28>
    1266:	32 60       	ori	r19, 0x02	; 2
    1268:	2e 5f       	subi	r18, 0xFE	; 254
    126a:	3d 93       	st	X+, r19
    126c:	30 e3       	ldi	r19, 0x30	; 48
    126e:	2a 95       	dec	r18
    1270:	e1 f7       	brne	.-8      	; 0x126a <__ftoa_engine+0x1e>
    1272:	08 95       	ret
    1274:	9f 3f       	cpi	r25, 0xFF	; 255
    1276:	30 f0       	brcs	.+12     	; 0x1284 <__ftoa_engine+0x38>
    1278:	80 38       	cpi	r24, 0x80	; 128
    127a:	71 05       	cpc	r23, r1
    127c:	61 05       	cpc	r22, r1
    127e:	09 f0       	breq	.+2      	; 0x1282 <__ftoa_engine+0x36>
    1280:	3c 5f       	subi	r19, 0xFC	; 252
    1282:	3c 5f       	subi	r19, 0xFC	; 252
    1284:	3d 93       	st	X+, r19
    1286:	91 30       	cpi	r25, 0x01	; 1
    1288:	08 f0       	brcs	.+2      	; 0x128c <__ftoa_engine+0x40>
    128a:	80 68       	ori	r24, 0x80	; 128
    128c:	91 1d       	adc	r25, r1
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	1f 93       	push	r17
    1294:	0f 93       	push	r16
    1296:	ff 92       	push	r15
    1298:	ef 92       	push	r14
    129a:	19 2f       	mov	r17, r25
    129c:	98 7f       	andi	r25, 0xF8	; 248
    129e:	96 95       	lsr	r25
    12a0:	e9 2f       	mov	r30, r25
    12a2:	96 95       	lsr	r25
    12a4:	96 95       	lsr	r25
    12a6:	e9 0f       	add	r30, r25
    12a8:	ff 27       	eor	r31, r31
    12aa:	e4 5a       	subi	r30, 0xA4	; 164
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	99 27       	eor	r25, r25
    12b0:	33 27       	eor	r19, r19
    12b2:	ee 24       	eor	r14, r14
    12b4:	ff 24       	eor	r15, r15
    12b6:	a7 01       	movw	r20, r14
    12b8:	e7 01       	movw	r28, r14
    12ba:	05 90       	lpm	r0, Z+
    12bc:	08 94       	sec
    12be:	07 94       	ror	r0
    12c0:	28 f4       	brcc	.+10     	; 0x12cc <__ftoa_engine+0x80>
    12c2:	36 0f       	add	r19, r22
    12c4:	e7 1e       	adc	r14, r23
    12c6:	f8 1e       	adc	r15, r24
    12c8:	49 1f       	adc	r20, r25
    12ca:	51 1d       	adc	r21, r1
    12cc:	66 0f       	add	r22, r22
    12ce:	77 1f       	adc	r23, r23
    12d0:	88 1f       	adc	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	06 94       	lsr	r0
    12d6:	a1 f7       	brne	.-24     	; 0x12c0 <__ftoa_engine+0x74>
    12d8:	05 90       	lpm	r0, Z+
    12da:	07 94       	ror	r0
    12dc:	28 f4       	brcc	.+10     	; 0x12e8 <__ftoa_engine+0x9c>
    12de:	e7 0e       	add	r14, r23
    12e0:	f8 1e       	adc	r15, r24
    12e2:	49 1f       	adc	r20, r25
    12e4:	56 1f       	adc	r21, r22
    12e6:	c1 1d       	adc	r28, r1
    12e8:	77 0f       	add	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	66 1f       	adc	r22, r22
    12f0:	06 94       	lsr	r0
    12f2:	a1 f7       	brne	.-24     	; 0x12dc <__ftoa_engine+0x90>
    12f4:	05 90       	lpm	r0, Z+
    12f6:	07 94       	ror	r0
    12f8:	28 f4       	brcc	.+10     	; 0x1304 <__ftoa_engine+0xb8>
    12fa:	f8 0e       	add	r15, r24
    12fc:	49 1f       	adc	r20, r25
    12fe:	56 1f       	adc	r21, r22
    1300:	c7 1f       	adc	r28, r23
    1302:	d1 1d       	adc	r29, r1
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	66 1f       	adc	r22, r22
    130a:	77 1f       	adc	r23, r23
    130c:	06 94       	lsr	r0
    130e:	a1 f7       	brne	.-24     	; 0x12f8 <__ftoa_engine+0xac>
    1310:	05 90       	lpm	r0, Z+
    1312:	07 94       	ror	r0
    1314:	20 f4       	brcc	.+8      	; 0x131e <__ftoa_engine+0xd2>
    1316:	49 0f       	add	r20, r25
    1318:	56 1f       	adc	r21, r22
    131a:	c7 1f       	adc	r28, r23
    131c:	d8 1f       	adc	r29, r24
    131e:	99 0f       	add	r25, r25
    1320:	66 1f       	adc	r22, r22
    1322:	77 1f       	adc	r23, r23
    1324:	88 1f       	adc	r24, r24
    1326:	06 94       	lsr	r0
    1328:	a9 f7       	brne	.-22     	; 0x1314 <__ftoa_engine+0xc8>
    132a:	84 91       	lpm	r24, Z
    132c:	10 95       	com	r17
    132e:	17 70       	andi	r17, 0x07	; 7
    1330:	41 f0       	breq	.+16     	; 0x1342 <__ftoa_engine+0xf6>
    1332:	d6 95       	lsr	r29
    1334:	c7 95       	ror	r28
    1336:	57 95       	ror	r21
    1338:	47 95       	ror	r20
    133a:	f7 94       	ror	r15
    133c:	e7 94       	ror	r14
    133e:	1a 95       	dec	r17
    1340:	c1 f7       	brne	.-16     	; 0x1332 <__ftoa_engine+0xe6>
    1342:	e2 e0       	ldi	r30, 0x02	; 2
    1344:	f1 e0       	ldi	r31, 0x01	; 1
    1346:	68 94       	set
    1348:	15 90       	lpm	r1, Z+
    134a:	15 91       	lpm	r17, Z+
    134c:	35 91       	lpm	r19, Z+
    134e:	65 91       	lpm	r22, Z+
    1350:	95 91       	lpm	r25, Z+
    1352:	05 90       	lpm	r0, Z+
    1354:	7f e2       	ldi	r23, 0x2F	; 47
    1356:	73 95       	inc	r23
    1358:	e1 18       	sub	r14, r1
    135a:	f1 0a       	sbc	r15, r17
    135c:	43 0b       	sbc	r20, r19
    135e:	56 0b       	sbc	r21, r22
    1360:	c9 0b       	sbc	r28, r25
    1362:	d0 09       	sbc	r29, r0
    1364:	c0 f7       	brcc	.-16     	; 0x1356 <__ftoa_engine+0x10a>
    1366:	e1 0c       	add	r14, r1
    1368:	f1 1e       	adc	r15, r17
    136a:	43 1f       	adc	r20, r19
    136c:	56 1f       	adc	r21, r22
    136e:	c9 1f       	adc	r28, r25
    1370:	d0 1d       	adc	r29, r0
    1372:	7e f4       	brtc	.+30     	; 0x1392 <__ftoa_engine+0x146>
    1374:	70 33       	cpi	r23, 0x30	; 48
    1376:	11 f4       	brne	.+4      	; 0x137c <__ftoa_engine+0x130>
    1378:	8a 95       	dec	r24
    137a:	e6 cf       	rjmp	.-52     	; 0x1348 <__ftoa_engine+0xfc>
    137c:	e8 94       	clt
    137e:	01 50       	subi	r16, 0x01	; 1
    1380:	30 f0       	brcs	.+12     	; 0x138e <__ftoa_engine+0x142>
    1382:	08 0f       	add	r16, r24
    1384:	0a f4       	brpl	.+2      	; 0x1388 <__ftoa_engine+0x13c>
    1386:	00 27       	eor	r16, r16
    1388:	02 17       	cp	r16, r18
    138a:	08 f4       	brcc	.+2      	; 0x138e <__ftoa_engine+0x142>
    138c:	20 2f       	mov	r18, r16
    138e:	23 95       	inc	r18
    1390:	02 2f       	mov	r16, r18
    1392:	7a 33       	cpi	r23, 0x3A	; 58
    1394:	28 f0       	brcs	.+10     	; 0x13a0 <__ftoa_engine+0x154>
    1396:	79 e3       	ldi	r23, 0x39	; 57
    1398:	7d 93       	st	X+, r23
    139a:	2a 95       	dec	r18
    139c:	e9 f7       	brne	.-6      	; 0x1398 <__ftoa_engine+0x14c>
    139e:	10 c0       	rjmp	.+32     	; 0x13c0 <__ftoa_engine+0x174>
    13a0:	7d 93       	st	X+, r23
    13a2:	2a 95       	dec	r18
    13a4:	89 f6       	brne	.-94     	; 0x1348 <__ftoa_engine+0xfc>
    13a6:	06 94       	lsr	r0
    13a8:	97 95       	ror	r25
    13aa:	67 95       	ror	r22
    13ac:	37 95       	ror	r19
    13ae:	17 95       	ror	r17
    13b0:	17 94       	ror	r1
    13b2:	e1 18       	sub	r14, r1
    13b4:	f1 0a       	sbc	r15, r17
    13b6:	43 0b       	sbc	r20, r19
    13b8:	56 0b       	sbc	r21, r22
    13ba:	c9 0b       	sbc	r28, r25
    13bc:	d0 09       	sbc	r29, r0
    13be:	98 f0       	brcs	.+38     	; 0x13e6 <__ftoa_engine+0x19a>
    13c0:	23 95       	inc	r18
    13c2:	7e 91       	ld	r23, -X
    13c4:	73 95       	inc	r23
    13c6:	7a 33       	cpi	r23, 0x3A	; 58
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <__ftoa_engine+0x180>
    13ca:	70 e3       	ldi	r23, 0x30	; 48
    13cc:	7c 93       	st	X, r23
    13ce:	20 13       	cpse	r18, r16
    13d0:	b8 f7       	brcc	.-18     	; 0x13c0 <__ftoa_engine+0x174>
    13d2:	7e 91       	ld	r23, -X
    13d4:	70 61       	ori	r23, 0x10	; 16
    13d6:	7d 93       	st	X+, r23
    13d8:	30 f0       	brcs	.+12     	; 0x13e6 <__ftoa_engine+0x19a>
    13da:	83 95       	inc	r24
    13dc:	71 e3       	ldi	r23, 0x31	; 49
    13de:	7d 93       	st	X+, r23
    13e0:	70 e3       	ldi	r23, 0x30	; 48
    13e2:	2a 95       	dec	r18
    13e4:	e1 f7       	brne	.-8      	; 0x13de <__ftoa_engine+0x192>
    13e6:	11 24       	eor	r1, r1
    13e8:	ef 90       	pop	r14
    13ea:	ff 90       	pop	r15
    13ec:	0f 91       	pop	r16
    13ee:	1f 91       	pop	r17
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	99 27       	eor	r25, r25
    13f6:	87 fd       	sbrc	r24, 7
    13f8:	90 95       	com	r25
    13fa:	08 95       	ret

Disassembly of section .text.avrlibc:

00003bba <memcpy>:
    3bba:	cf 92       	push	r12
    3bbc:	df 92       	push	r13
    3bbe:	ef 92       	push	r14
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	6a 01       	movw	r12, r20
    3bc4:	e6 2e       	mov	r14, r22
    3bc6:	28 0f       	add	r18, r24
    3bc8:	39 1f       	adc	r19, r25
    3bca:	a2 17       	cp	r26, r18
    3bcc:	b3 07       	cpc	r27, r19
    3bce:	51 f0       	breq	.+20     	; 0x3be4 <memcpy+0x2a>
    3bd0:	f6 01       	movw	r30, r12
    3bd2:	44 91       	lpm	r20, Z
    3bd4:	e7 fc       	sbrc	r14, 7
    3bd6:	40 81       	ld	r20, Z
    3bd8:	4d 93       	st	X+, r20
    3bda:	4f ef       	ldi	r20, 0xFF	; 255
    3bdc:	c4 1a       	sub	r12, r20
    3bde:	d4 0a       	sbc	r13, r20
    3be0:	e4 0a       	sbc	r14, r20
    3be2:	f3 cf       	rjmp	.-26     	; 0x3bca <memcpy+0x10>
    3be4:	ef 90       	pop	r14
    3be6:	df 90       	pop	r13
    3be8:	cf 90       	pop	r12
    3bea:	08 95       	ret

Disassembly of section .text.avrlibc:

000036e6 <strcmp>:
    36e6:	cf 92       	push	r12
    36e8:	df 92       	push	r13
    36ea:	ef 92       	push	r14
    36ec:	6b 01       	movw	r12, r22
    36ee:	e8 2e       	mov	r14, r24
    36f0:	f6 01       	movw	r30, r12
    36f2:	84 91       	lpm	r24, Z
    36f4:	e7 fc       	sbrc	r14, 7
    36f6:	80 81       	ld	r24, Z
    36f8:	f9 01       	movw	r30, r18
    36fa:	54 91       	lpm	r21, Z
    36fc:	47 fd       	sbrc	r20, 7
    36fe:	50 81       	ld	r21, Z
    3700:	85 13       	cpse	r24, r21
    3702:	0b c0       	rjmp	.+22     	; 0x371a <strcmp+0x34>
    3704:	88 23       	and	r24, r24
    3706:	41 f0       	breq	.+16     	; 0x3718 <strcmp+0x32>
    3708:	8f ef       	ldi	r24, 0xFF	; 255
    370a:	c8 1a       	sub	r12, r24
    370c:	d8 0a       	sbc	r13, r24
    370e:	e8 0a       	sbc	r14, r24
    3710:	2f 5f       	subi	r18, 0xFF	; 255
    3712:	3f 4f       	sbci	r19, 0xFF	; 255
    3714:	4f 4f       	sbci	r20, 0xFF	; 255
    3716:	ec cf       	rjmp	.-40     	; 0x36f0 <strcmp+0xa>
    3718:	58 2f       	mov	r21, r24
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	85 1b       	sub	r24, r21
    371e:	91 09       	sbc	r25, r1
    3720:	ef 90       	pop	r14
    3722:	df 90       	pop	r13
    3724:	cf 90       	pop	r12
    3726:	08 95       	ret

Disassembly of section .text.avrlibc:

00002c0e <strncmp>:
    2c0e:	cf 92       	push	r12
    2c10:	df 92       	push	r13
    2c12:	ef 92       	push	r14
    2c14:	0f 93       	push	r16
    2c16:	1f 93       	push	r17
    2c18:	6b 01       	movw	r12, r22
    2c1a:	e8 2e       	mov	r14, r24
    2c1c:	01 15       	cp	r16, r1
    2c1e:	11 05       	cpc	r17, r1
    2c20:	19 f1       	breq	.+70     	; 0x2c68 <strncmp+0x5a>
    2c22:	01 50       	subi	r16, 0x01	; 1
    2c24:	11 09       	sbc	r17, r1
    2c26:	f6 01       	movw	r30, r12
    2c28:	84 91       	lpm	r24, Z
    2c2a:	e7 fc       	sbrc	r14, 7
    2c2c:	80 81       	ld	r24, Z
    2c2e:	88 23       	and	r24, r24
    2c30:	99 f0       	breq	.+38     	; 0x2c58 <strncmp+0x4a>
    2c32:	f9 01       	movw	r30, r18
    2c34:	94 91       	lpm	r25, Z
    2c36:	47 fd       	sbrc	r20, 7
    2c38:	90 81       	ld	r25, Z
    2c3a:	99 23       	and	r25, r25
    2c3c:	69 f0       	breq	.+26     	; 0x2c58 <strncmp+0x4a>
    2c3e:	01 15       	cp	r16, r1
    2c40:	11 05       	cpc	r17, r1
    2c42:	51 f0       	breq	.+20     	; 0x2c58 <strncmp+0x4a>
    2c44:	89 13       	cpse	r24, r25
    2c46:	08 c0       	rjmp	.+16     	; 0x2c58 <strncmp+0x4a>
    2c48:	8f ef       	ldi	r24, 0xFF	; 255
    2c4a:	c8 1a       	sub	r12, r24
    2c4c:	d8 0a       	sbc	r13, r24
    2c4e:	e8 0a       	sbc	r14, r24
    2c50:	2f 5f       	subi	r18, 0xFF	; 255
    2c52:	3f 4f       	sbci	r19, 0xFF	; 255
    2c54:	4f 4f       	sbci	r20, 0xFF	; 255
    2c56:	e5 cf       	rjmp	.-54     	; 0x2c22 <strncmp+0x14>
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	f9 01       	movw	r30, r18
    2c5c:	24 91       	lpm	r18, Z
    2c5e:	47 fd       	sbrc	r20, 7
    2c60:	20 81       	ld	r18, Z
    2c62:	82 1b       	sub	r24, r18
    2c64:	91 09       	sbc	r25, r1
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <strncmp+0x5e>
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	08 95       	ret

Disassembly of section .text.avrlibc:

00003d98 <strlen>:
    3d98:	cf 92       	push	r12
    3d9a:	df 92       	push	r13
    3d9c:	ef 92       	push	r14
    3d9e:	6b 01       	movw	r12, r22
    3da0:	e8 2e       	mov	r14, r24
    3da2:	a8 2f       	mov	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	fc 01       	movw	r30, r24
    3da8:	24 91       	lpm	r18, Z
    3daa:	a7 fd       	sbrc	r26, 7
    3dac:	20 81       	ld	r18, Z
    3dae:	22 23       	and	r18, r18
    3db0:	19 f0       	breq	.+6      	; 0x3db8 <strlen+0x20>
    3db2:	01 96       	adiw	r24, 0x01	; 1
    3db4:	a1 1d       	adc	r26, r1
    3db6:	f7 cf       	rjmp	.-18     	; 0x3da6 <strlen+0xe>
    3db8:	8c 19       	sub	r24, r12
    3dba:	9d 09       	sbc	r25, r13
    3dbc:	ef 90       	pop	r14
    3dbe:	df 90       	pop	r13
    3dc0:	cf 90       	pop	r12
    3dc2:	08 95       	ret

Disassembly of section .text.avrlibc:

0000408a <strcpy>:
    408a:	9a 01       	movw	r18, r20
    408c:	46 2f       	mov	r20, r22
    408e:	dc 01       	movw	r26, r24
    4090:	f9 01       	movw	r30, r18
    4092:	54 91       	lpm	r21, Z
    4094:	47 fd       	sbrc	r20, 7
    4096:	50 81       	ld	r21, Z
    4098:	5d 93       	st	X+, r21
    409a:	55 23       	and	r21, r21
    409c:	21 f0       	breq	.+8      	; 0x40a6 <strcpy+0x1c>
    409e:	2f 5f       	subi	r18, 0xFF	; 255
    40a0:	3f 4f       	sbci	r19, 0xFF	; 255
    40a2:	4f 4f       	sbci	r20, 0xFF	; 255
    40a4:	f5 cf       	rjmp	.-22     	; 0x4090 <strcpy+0x6>
    40a6:	08 95       	ret

Disassembly of section .text.avrlibc:

00003a20 <strnlen>:
    3a20:	cf 92       	push	r12
    3a22:	df 92       	push	r13
    3a24:	ef 92       	push	r14
    3a26:	6b 01       	movw	r12, r22
    3a28:	e8 2e       	mov	r14, r24
    3a2a:	a8 2f       	mov	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	41 15       	cp	r20, r1
    3a30:	51 05       	cpc	r21, r1
    3a32:	31 f4       	brne	.+12     	; 0x3a40 <strnlen+0x20>
    3a34:	8c 19       	sub	r24, r12
    3a36:	9d 09       	sbc	r25, r13
    3a38:	ef 90       	pop	r14
    3a3a:	df 90       	pop	r13
    3a3c:	cf 90       	pop	r12
    3a3e:	08 95       	ret
    3a40:	fc 01       	movw	r30, r24
    3a42:	24 91       	lpm	r18, Z
    3a44:	a7 fd       	sbrc	r26, 7
    3a46:	20 81       	ld	r18, Z
    3a48:	22 23       	and	r18, r18
    3a4a:	a1 f3       	breq	.-24     	; 0x3a34 <strnlen+0x14>
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	a1 1d       	adc	r26, r1
    3a50:	41 50       	subi	r20, 0x01	; 1
    3a52:	51 09       	sbc	r21, r1
    3a54:	ec cf       	rjmp	.-40     	; 0x3a2e <strnlen+0xe>

Disassembly of section .text.avrlibc:

00002a42 <fputc>:
    2a42:	0f 93       	push	r16
    2a44:	1f 93       	push	r17
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	fb 01       	movw	r30, r22
    2a4c:	24 81       	ldd	r18, Z+4	; 0x04
    2a4e:	21 fd       	sbrc	r18, 1
    2a50:	03 c0       	rjmp	.+6      	; 0x2a58 <fputc+0x16>
    2a52:	8f ef       	ldi	r24, 0xFF	; 255
    2a54:	9f ef       	ldi	r25, 0xFF	; 255
    2a56:	2c c0       	rjmp	.+88     	; 0x2ab0 <fputc+0x6e>
    2a58:	22 ff       	sbrs	r18, 2
    2a5a:	16 c0       	rjmp	.+44     	; 0x2a88 <fputc+0x46>
    2a5c:	47 81       	ldd	r20, Z+7	; 0x07
    2a5e:	50 85       	ldd	r21, Z+8	; 0x08
    2a60:	25 81       	ldd	r18, Z+5	; 0x05
    2a62:	36 81       	ldd	r19, Z+6	; 0x06
    2a64:	42 17       	cp	r20, r18
    2a66:	53 07       	cpc	r21, r19
    2a68:	44 f4       	brge	.+16     	; 0x2a7a <fputc+0x38>
    2a6a:	a0 81       	ld	r26, Z
    2a6c:	b1 81       	ldd	r27, Z+1	; 0x01
    2a6e:	9d 01       	movw	r18, r26
    2a70:	2f 5f       	subi	r18, 0xFF	; 255
    2a72:	3f 4f       	sbci	r19, 0xFF	; 255
    2a74:	31 83       	std	Z+1, r19	; 0x01
    2a76:	20 83       	st	Z, r18
    2a78:	8c 93       	st	X, r24
    2a7a:	27 81       	ldd	r18, Z+7	; 0x07
    2a7c:	30 85       	ldd	r19, Z+8	; 0x08
    2a7e:	2f 5f       	subi	r18, 0xFF	; 255
    2a80:	3f 4f       	sbci	r19, 0xFF	; 255
    2a82:	30 87       	std	Z+8, r19	; 0x08
    2a84:	27 83       	std	Z+7, r18	; 0x07
    2a86:	14 c0       	rjmp	.+40     	; 0x2ab0 <fputc+0x6e>
    2a88:	8b 01       	movw	r16, r22
    2a8a:	ec 01       	movw	r28, r24
    2a8c:	fb 01       	movw	r30, r22
    2a8e:	01 84       	ldd	r0, Z+9	; 0x09
    2a90:	f2 85       	ldd	r31, Z+10	; 0x0a
    2a92:	e0 2d       	mov	r30, r0
    2a94:	09 95       	icall
    2a96:	89 2b       	or	r24, r25
    2a98:	e1 f6       	brne	.-72     	; 0x2a52 <fputc+0x10>
    2a9a:	d8 01       	movw	r26, r16
    2a9c:	17 96       	adiw	r26, 0x07	; 7
    2a9e:	8d 91       	ld	r24, X+
    2aa0:	9c 91       	ld	r25, X
    2aa2:	18 97       	sbiw	r26, 0x08	; 8
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	18 96       	adiw	r26, 0x08	; 8
    2aa8:	9c 93       	st	X, r25
    2aaa:	8e 93       	st	-X, r24
    2aac:	17 97       	sbiw	r26, 0x07	; 7
    2aae:	ce 01       	movw	r24, r28
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	1f 91       	pop	r17
    2ab6:	0f 91       	pop	r16
    2ab8:	08 95       	ret

Disassembly of section .text.avrlibc:

00003552 <sprintf>:
    3552:	af e0       	ldi	r26, 0x0F	; 15
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	ef ea       	ldi	r30, 0xAF	; 175
    3558:	fa e1       	ldi	r31, 0x1A	; 26
    355a:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__prologue_saves__+0x1c>
    355e:	0e 89       	ldd	r16, Y+22	; 0x16
    3560:	1f 89       	ldd	r17, Y+23	; 0x17
    3562:	86 e0       	ldi	r24, 0x06	; 6
    3564:	8d 83       	std	Y+5, r24	; 0x05
    3566:	1a 83       	std	Y+2, r17	; 0x02
    3568:	09 83       	std	Y+1, r16	; 0x01
    356a:	8f ef       	ldi	r24, 0xFF	; 255
    356c:	9f e7       	ldi	r25, 0x7F	; 127
    356e:	9f 83       	std	Y+7, r25	; 0x07
    3570:	8e 83       	std	Y+6, r24	; 0x06
    3572:	9e 01       	movw	r18, r28
    3574:	25 5e       	subi	r18, 0xE5	; 229
    3576:	3f 4f       	sbci	r19, 0xFF	; 255
    3578:	48 8d       	ldd	r20, Y+24	; 0x18
    357a:	59 8d       	ldd	r21, Y+25	; 0x19
    357c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    357e:	ce 01       	movw	r24, r28
    3580:	01 96       	adiw	r24, 0x01	; 1
    3582:	0e 94 01 02 	call	0x402	; 0x402 <vfprintf>
    3586:	e8 85       	ldd	r30, Y+8	; 0x08
    3588:	f9 85       	ldd	r31, Y+9	; 0x09
    358a:	e0 0f       	add	r30, r16
    358c:	f1 1f       	adc	r31, r17
    358e:	10 82       	st	Z, r1
    3590:	2f 96       	adiw	r28, 0x0f	; 15
    3592:	e4 e0       	ldi	r30, 0x04	; 4
    3594:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

0000228e <__ultoa_invert>:
    228e:	fa 01       	movw	r30, r20
    2290:	aa 27       	eor	r26, r26
    2292:	28 30       	cpi	r18, 0x08	; 8
    2294:	51 f1       	breq	.+84     	; 0x22ea <__ultoa_invert+0x5c>
    2296:	20 31       	cpi	r18, 0x10	; 16
    2298:	81 f1       	breq	.+96     	; 0x22fa <__ultoa_invert+0x6c>
    229a:	e8 94       	clt
    229c:	6f 93       	push	r22
    229e:	6e 7f       	andi	r22, 0xFE	; 254
    22a0:	6e 5f       	subi	r22, 0xFE	; 254
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	8f 4f       	sbci	r24, 0xFF	; 255
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	af 4f       	sbci	r26, 0xFF	; 255
    22aa:	b1 e0       	ldi	r27, 0x01	; 1
    22ac:	3e d0       	rcall	.+124    	; 0x232a <__ultoa_invert+0x9c>
    22ae:	b4 e0       	ldi	r27, 0x04	; 4
    22b0:	3c d0       	rcall	.+120    	; 0x232a <__ultoa_invert+0x9c>
    22b2:	67 0f       	add	r22, r23
    22b4:	78 1f       	adc	r23, r24
    22b6:	89 1f       	adc	r24, r25
    22b8:	9a 1f       	adc	r25, r26
    22ba:	a1 1d       	adc	r26, r1
    22bc:	68 0f       	add	r22, r24
    22be:	79 1f       	adc	r23, r25
    22c0:	8a 1f       	adc	r24, r26
    22c2:	91 1d       	adc	r25, r1
    22c4:	a1 1d       	adc	r26, r1
    22c6:	6a 0f       	add	r22, r26
    22c8:	71 1d       	adc	r23, r1
    22ca:	81 1d       	adc	r24, r1
    22cc:	91 1d       	adc	r25, r1
    22ce:	a1 1d       	adc	r26, r1
    22d0:	20 d0       	rcall	.+64     	; 0x2312 <__ultoa_invert+0x84>
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <__ultoa_invert+0x48>
    22d4:	68 94       	set
    22d6:	3f 91       	pop	r19
    22d8:	2a e0       	ldi	r18, 0x0A	; 10
    22da:	26 9f       	mul	r18, r22
    22dc:	11 24       	eor	r1, r1
    22de:	30 19       	sub	r19, r0
    22e0:	30 5d       	subi	r19, 0xD0	; 208
    22e2:	31 93       	st	Z+, r19
    22e4:	de f6       	brtc	.-74     	; 0x229c <__ultoa_invert+0xe>
    22e6:	cf 01       	movw	r24, r30
    22e8:	08 95       	ret
    22ea:	46 2f       	mov	r20, r22
    22ec:	47 70       	andi	r20, 0x07	; 7
    22ee:	40 5d       	subi	r20, 0xD0	; 208
    22f0:	41 93       	st	Z+, r20
    22f2:	b3 e0       	ldi	r27, 0x03	; 3
    22f4:	0f d0       	rcall	.+30     	; 0x2314 <__ultoa_invert+0x86>
    22f6:	c9 f7       	brne	.-14     	; 0x22ea <__ultoa_invert+0x5c>
    22f8:	f6 cf       	rjmp	.-20     	; 0x22e6 <__ultoa_invert+0x58>
    22fa:	46 2f       	mov	r20, r22
    22fc:	4f 70       	andi	r20, 0x0F	; 15
    22fe:	40 5d       	subi	r20, 0xD0	; 208
    2300:	4a 33       	cpi	r20, 0x3A	; 58
    2302:	18 f0       	brcs	.+6      	; 0x230a <__ultoa_invert+0x7c>
    2304:	49 5d       	subi	r20, 0xD9	; 217
    2306:	31 fd       	sbrc	r19, 1
    2308:	40 52       	subi	r20, 0x20	; 32
    230a:	41 93       	st	Z+, r20
    230c:	02 d0       	rcall	.+4      	; 0x2312 <__ultoa_invert+0x84>
    230e:	a9 f7       	brne	.-22     	; 0x22fa <__ultoa_invert+0x6c>
    2310:	ea cf       	rjmp	.-44     	; 0x22e6 <__ultoa_invert+0x58>
    2312:	b4 e0       	ldi	r27, 0x04	; 4
    2314:	a6 95       	lsr	r26
    2316:	97 95       	ror	r25
    2318:	87 95       	ror	r24
    231a:	77 95       	ror	r23
    231c:	67 95       	ror	r22
    231e:	ba 95       	dec	r27
    2320:	c9 f7       	brne	.-14     	; 0x2314 <__ultoa_invert+0x86>
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	61 05       	cpc	r22, r1
    2326:	71 05       	cpc	r23, r1
    2328:	08 95       	ret
    232a:	9b 01       	movw	r18, r22
    232c:	ac 01       	movw	r20, r24
    232e:	0a 2e       	mov	r0, r26
    2330:	06 94       	lsr	r0
    2332:	57 95       	ror	r21
    2334:	47 95       	ror	r20
    2336:	37 95       	ror	r19
    2338:	27 95       	ror	r18
    233a:	ba 95       	dec	r27
    233c:	c9 f7       	brne	.-14     	; 0x2330 <__ultoa_invert+0xa2>
    233e:	62 0f       	add	r22, r18
    2340:	73 1f       	adc	r23, r19
    2342:	84 1f       	adc	r24, r20
    2344:	95 1f       	adc	r25, r21
    2346:	a0 1d       	adc	r26, r0
    2348:	08 95       	ret

Disassembly of section .text.avrlibc:

00003e86 <eeprom_read_block>:
    3e86:	ba 01       	movw	r22, r20
    3e88:	a9 01       	movw	r20, r18
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22

00003e8e <eeprom_read_blraw>:
    3e8e:	fc 01       	movw	r30, r24
    3e90:	f9 99       	sbic	0x1f, 1	; 31
    3e92:	fe cf       	rjmp	.-4      	; 0x3e90 <eeprom_read_blraw+0x2>
    3e94:	06 c0       	rjmp	.+12     	; 0x3ea2 <eeprom_read_blraw+0x14>
    3e96:	f2 bd       	out	0x22, r31	; 34
    3e98:	e1 bd       	out	0x21, r30	; 33
    3e9a:	f8 9a       	sbi	0x1f, 0	; 31
    3e9c:	31 96       	adiw	r30, 0x01	; 1
    3e9e:	00 b4       	in	r0, 0x20	; 32
    3ea0:	0d 92       	st	X+, r0
    3ea2:	41 50       	subi	r20, 0x01	; 1
    3ea4:	50 40       	sbci	r21, 0x00	; 0
    3ea6:	b8 f7       	brcc	.-18     	; 0x3e96 <eeprom_read_blraw+0x8>
    3ea8:	08 95       	ret

Disassembly of section .text.avrlibc:

0000433c <eeprom_read_byte>:
    433c:	cb 01       	movw	r24, r22
    433e:	f9 99       	sbic	0x1f, 1	; 31
    4340:	fe cf       	rjmp	.-4      	; 0x433e <eeprom_read_byte+0x2>
    4342:	92 bd       	out	0x22, r25	; 34
    4344:	81 bd       	out	0x21, r24	; 33
    4346:	f8 9a       	sbi	0x1f, 0	; 31
    4348:	99 27       	eor	r25, r25
    434a:	80 b5       	in	r24, 0x20	; 32
    434c:	08 95       	ret

Disassembly of section .text.avrlibc:

00004436 <eeprom_read_dword>:
    4436:	cb 01       	movw	r24, r22
    4438:	a6 e1       	ldi	r26, 0x16	; 22
    443a:	b0 e0       	ldi	r27, 0x00	; 0
    443c:	44 e0       	ldi	r20, 0x04	; 4
    443e:	50 e0       	ldi	r21, 0x00	; 0
    4440:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00004444 <eeprom_read_word>:
    4444:	cb 01       	movw	r24, r22
    4446:	a8 e1       	ldi	r26, 0x18	; 24
    4448:	b0 e0       	ldi	r27, 0x00	; 0
    444a:	42 e0       	ldi	r20, 0x02	; 2
    444c:	50 e0       	ldi	r21, 0x00	; 0
    444e:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <eeprom_read_blraw>
