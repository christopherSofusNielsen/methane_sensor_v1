
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00003acc  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ea  00800100  00800100  00003acc  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00003acc  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00003b27  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000008b0  00000000  00000000  00003b98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b0ba  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002410  00000000  00000000  0000f502  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f63  00000000  00000000  00011912  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001584  00000000  00000000  00015878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091b  00000000  00000000  00016dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000047d9  00000000  00000000  00017717  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  0001bef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00003a08  00003a08  00003abc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001c5a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00003830  00003830  000038e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00003752  00003752  00003806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  0000383e  0000383e  000038f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00003766  00003766  0000381a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  0000384c  0000384c  00003900  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  0000377a  0000377a  0000382e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_3 00000014  0000378e  0000378e  00003842  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.rn2483_init 00000008  000039c0  000039c0  00003a74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.rn2483_reset_active 00000008  000039c8  000039c8  00003a7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_reset_deactive 00000008  000039d0  000039d0  00003a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SCD30_HAL_init 0000000e  0000385a  0000385a  0000390e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SCD30_HAL_data_ready 0000000a  00003998  00003998  00003a4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_16 0000004e  00002aa2  00002aa2  00002b56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss._cb      00000002  00800726  00800726  00003acc  2**0
                  ALLOC
 29 .text.__vector_13 0000004e  00002af0  00002af0  00002ba4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss._cb      00000002  00800728  00800728  00003acc  2**0
                  ALLOC
 31 .text.__vector_9 00000098  00002088  00002088  0000213c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.cnt      00000001  0080072a  0080072a  00003acc  2**0
                  ALLOC
 33 .bss.callbacks 0000000a  00800710  00800710  00003acc  2**0
                  ALLOC
 34 .text.start_and_write_data 0000004c  00002b8c  00002b8c  00002c40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.read_and_stop 0000005a  0000284e  0000284e  00002902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.TWI_API_write_data_stop 00000010  00003800  00003800  000038b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.TWI_API_read_data_ack_end_nack_stop 00000024  000034f4  000034f4  000035a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TWI_HAL_init 00000012  000037ca  000037ca  0000387e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TWI_HAL_start 00000048  00002e32  00002e32  00002ee6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TWI_HAL_write_byte 00000020  000035a4  000035a4  00003658  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TWI_HAL_read_byte_ack 00000014  000037a2  000037a2  00003856  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TWI_HAL_read_byte_nack 00000014  000037b6  000037b6  0000386a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.TWI_HAL_stop 00000010  00003810  00003810  000038c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.copy_buffer 0000002e  00003378  00003378  0000342c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.uart0_hal_init 0000003c  00003014  00003014  000030c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.uart0_hal_send_string 0000006a  0000271c  0000271c  000027d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.uart0_hal_message_ready 0000000e  00003868  00003868  0000391c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.uart0_hal_clear_rx_buffer 0000000a  000039a2  000039a2  00003a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.uart0_hal_read_message_as_str 00000028  0000342e  0000342e  000034e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_22 0000004a  00002d54  00002d54  00002e08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.__vector_20 00000074  000025c8  000025c8  0000267c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .bss.rx_buffer_has_message 00000001  0080072b  0080072b  00003acc  2**0
                  ALLOC
 53 .bss.rx_buffer_data_len 00000001  0080072c  0080072c  00003acc  2**0
                  ALLOC
 54 .bss.tx_buffer_cursor 00000001  0080072d  0080072d  00003acc  2**0
                  ALLOC
 55 .bss.tx_buffer_data_len 00000001  0080072e  0080072e  00003acc  2**0
                  ALLOC
 56 .text.copy_buffer 0000002e  000033a6  000033a6  0000345a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.uart1_hal_init 0000003c  00003050  00003050  00003104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.uart1_hal_send_string 0000008a  000022e4  000022e4  00002398  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.uart1_hal_message_ready 0000000e  00003876  00003876  0000392a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.uart1_hal_rx_full 0000000e  00003884  00003884  00003938  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.uart1_hal_clear_rx_buffer 0000000a  000039ac  000039ac  00003a60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uart1_hal_read_message_as_str 00000028  00003456  00003456  0000350a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.__vector_30 0000004a  00002d9e  00002d9e  00002e52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.__vector_28 00000070  0000263c  0000263c  000026f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .bss.rx_buffer_has_message 00000001  0080072f  0080072f  00003acc  2**0
                  ALLOC
 66 .bss.rx_buffer_data_len 00000001  00800730  00800730  00003acc  2**0
                  ALLOC
 67 .bss.rx_buffer 00000096  00800616  00800616  00003acc  2**0
                  ALLOC
 68 .bss.tx_buffer_cursor 00000001  00800731  00800731  00003acc  2**0
                  ALLOC
 69 .bss.tx_buffer_data_len 00000001  00800732  00800732  00003acc  2**0
                  ALLOC
 70 .bss.tx_buffer 0000012c  008004ea  008004ea  00003acc  2**0
                  ALLOC
 71 .text.main    00000018  000036ca  000036ca  0000377e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.calc_ppm_methane 00000096  000021b8  000021b8  0000226c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.ADC_get_value 00000056  00002900  00002900  000029b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .data.PPM_factor 00000004  0080071a  00003a0c  00003ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 75 .data.RRL     00000004  0080071e  00003a10  00003ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 76 .data.Vc      00000004  00800722  00003a14  00003ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 77 .text.EM_has_deveui 00000016  000036fa  000036fa  000037ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.EM_has_appeui 00000016  00003710  00003710  000037c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.EM_has_appkey 00000016  00003726  00003726  000037da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.EM_set_deveui 0000003a  0000308c  0000308c  00003140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.EM_get_deveui 00000030  000032e8  000032e8  0000339c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.EM_set_appeui 0000003a  000030c6  000030c6  0000317a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.EM_get_appeui 00000030  00003318  00003318  000033cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.EM_set_appkey 0000003a  00003100  00003100  000031b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.EM_get_appkey 00000030  00003348  00003348  000033fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.EM_set_ppmfactor 0000000e  00003892  00003892  00003946  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.EM_get_ppmfactor 0000001e  000035e4  000035e4  00003698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.EM_set_RRL 0000000e  000038a0  000038a0  00003954  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.EM_get_RRL 0000001e  00003602  00003602  000036b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.EM_set_Vcc 0000000e  000038ae  000038ae  00003962  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.EM_get_Vcc 0000001e  00003620  00003620  000036d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.EM_set_collections 0000000e  000038bc  000038bc  00003970  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.EM_get_collections 00000010  00003820  00003820  000038d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.EM_set_heat_up_time 0000000c  0000392c  0000392c  000039e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.EM_get_heat_up_time 0000000c  00003938  00003938  000039ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.EM_set_air_pump_time 0000000c  00003944  00003944  000039f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.EM_get_air_pump_time 0000000c  00003950  00003950  00003a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.EM_set_sp_interval 0000000c  0000395c  0000395c  00003a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.EM_get_sp_interval 0000000c  00003968  00003968  00003a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.LM_reset_module 00000006  000039f0  000039f0  00003aa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.LM_forward_msg 00000006  000039f6  000039f6  00003aaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .progmemx.data 00000073  0000042c  0000042c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
103 .text.attach_ending 0000001c  0000367a  0000367a  0000372e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.util_strbeginswith 0000004a  00002de8  00002de8  00002e9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .progmemx.data 00000007  0000050d  0000050d  000005c1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
106 .text.util_reset_module 00000046  00002e7a  00002e7a  00002f2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.util_lora_forward_msg 00000038  0000313a  0000313a  000031ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.bytes_2_uint 0000001a  00003696  00003696  0000374a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.init_measurement 00000038  00003172  00003172  00003226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.validate_data 00000032  00003284  00003284  00003338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.read_value 000000a2  00001fe6  00001fe6  0000209a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.SCD30_sensor_on 00000022  00003560  00003560  00003614  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.SCD30_get_reading 0000001a  000036b0  000036b0  00003764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .progmemx.data.READ_DATA_CMD 00000002  0000051e  0000051e  000005d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
115 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000514  00000514  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
116 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  00000519  00000519  000005cd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
117 .text.parse_cmd 00000028  0000347e  0000347e  00003532  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.validate_cmd 00000056  00002956  00002956  00002a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .progmemx.data 000000a4  0000030d  0000030d  000003c1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
120 .text.CONF_enter 0000012e  00001556  00001556  0000160a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .progmemx.data 00000066  0000049f  0000049f  00000553  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
122 .text.CON_RN2483_parse 00000026  000034ce  000034ce  00003582  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.CON_RN2483 000000e8  000018cc  000018cc  00001980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.CONNECT 00000054  000029ac  000029ac  00002a60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .progmemx.data 00000119  000001f4  000001f4  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
126 .text.read_cols 000000bc  00001d16  00001d16  00001dca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.write_deveui 00000078  000023e8  000023e8  0000249c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.write_appeui 00000078  00002460  00002460  00002514  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.write_appkey 00000078  000024d8  000024d8  0000258c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.write_PPM_factor 0000004c  00002bd8  00002bd8  00002c8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.write_RRL 0000004c  00002c24  00002c24  00002cd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.write_VCC 0000004c  00002c70  00002c70  00002d24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.write_cols 0000012e  00001684  00001684  00001738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.write_heat_up 0000004c  00002cbc  00002cbc  00002d70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.write_air_pump 00000050  00002a52  00002a52  00002b06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.write_sp_interval 0000004c  00002d08  00002d08  00002dbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.write_reset 000000e2  000019b4  000019b4  00001a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.handle_read 00000286  00000f40  00000f40  00000ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.handle_write 000001e0  000011c6  000011c6  0000127a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .bss.arg      00000050  008006ac  008006ac  00003acc  2**0
                  ALLOC
141 .progmemx.data 0000007b  000003b1  000003b1  00000465  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
142 .text.handle_methane 0000011a  000017b2  000017b2  00001866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.handle_co2 000000a4  00001f42  00001f42  00001ff6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.handle_sample 00000098  00002120  00002120  000021d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.init_methane_SCD30 00000028  000034a6  000034a6  0000355a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .bss.par      00000014  008006fc  008006fc  00003acc  2**0
                  ALLOC
147 .text.count_parameters 00000052  00002a00  00002a00  00002ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.par_index 00000070  000026ac  000026ac  00002760  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.get_parameter 00000096  0000224e  0000224e  00002302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.calc_crc8 00000036  000031e2  000031e2  00003296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.get_decimal 000000b4  00001e8e  00001e8e  00001f42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.str2flaot 0000004e  00002b3e  00002b3e  00002bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.is_float 00000058  000028a8  000028a8  0000295c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.avrlibc.fplib 0000000e  000038ca  000038ca  0000397e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.avrlibc.fplib 000000ce  00001c48  00001c48  00001cfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.avrlibc.fplib 00000008  000039d8  000039d8  00003a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.avrlibc.fplib 000000de  00001a96  00001a96  00001b4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.avrlibc.fplib 0000005e  000027f0  000027f0  000028a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.avrlibc.fplib 0000007a  0000236e  0000236e  00002422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.avrlibc.fplib 0000000c  00003974  00003974  00003a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.avrlibc.fplib 00000006  000039fc  000039fc  00003ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.avrlibc.fplib 0000000e  000038d8  000038d8  0000398c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.avrlibc.fplib 0000000e  000038e6  000038e6  0000399a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.avrlibc.fplib 00000022  00003582  00003582  00003636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.avrlibc.fplib 00000044  00002f06  00002f06  00002fba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.avrlibc.fplib 0000000e  000038f4  000038f4  000039a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.avrlibc.fplib 00000008  000039e0  000039e0  00003a94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.avrlibc.fplib 000000d4  00001b74  00001b74  00001c28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .progmemx.data 00000008  00000505  00000505  000005b9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
170 .text.avrlibc 00000744  00000520  00000520  000005d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.libgcc  0000000c  00003980  00003980  00003a34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.libgcc.mul 0000001e  0000363e  0000363e  000036f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.libgcc.prologue 00000038  000031aa  000031aa  0000325e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.libgcc.prologue 00000036  00003218  00003218  000032cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.avrlibc 00000008  000039e8  000039e8  00003a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.avrlibc 0000000e  00003902  00003902  000039b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.avrlibc 000002dc  00000c64  00000c64  00000d18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.avrlibc 000001b0  000013a6  000013a6  0000145a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.avrlibc 00000012  000037dc  000037dc  00003890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.avrlibc 00000032  000032b6  000032b6  0000336a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.avrlibc 0000002e  000033d4  000033d4  00003488  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.avrlibc 00000042  00002fd2  00002fd2  00003086  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.avrlibc 0000006a  00002786  00002786  0000283a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.avrlibc 0000002c  00003402  00003402  000034b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.avrlibc 0000001e  0000365c  0000365c  00003710  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.avrlibc 00000036  0000324e  0000324e  00003302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.avrlibc 00000078  00002550  00002550  00002604  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.avrlibc 00000046  00002ec0  00002ec0  00002f74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.avrlibc 000000bc  00001dd2  00001dd2  00001e86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.avrlibc 00000006  00003a02  00003a02  00003ab6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.avrlibc 00000024  00003518  00003518  000035cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.avrlibc 00000012  000037ee  000037ee  000038a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.avrlibc 0000000e  00003910  00003910  000039c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.avrlibc 0000000e  0000391e  0000391e  000039d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.avrlibc 00000044  00002f4a  00002f4a  00002ffe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.avrlibc 00000024  0000353c  0000353c  000035f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.avrlibc 00000018  000036e2  000036e2  00003796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.avrlibc 0000000c  0000398c  0000398c  00003a40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.libgcc.mul 00000020  000035c4  000035c4  00003678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.libgcc.div 00000044  00002f8e  00002f8e  00003042  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.libgcc.mul 00000016  0000373c  0000373c  000037f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.libgcc  0000000a  000039b6  000039b6  00003a6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__ctors_end>
   4:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
   8:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
   c:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__vector_3>
  10:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  14:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  18:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  1c:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  20:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  24:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__vector_9>
  28:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  2c:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  30:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  34:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__vector_13>
  38:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  3c:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  40:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__vector_16>
  44:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  48:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  4c:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  50:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__vector_20>
  54:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  58:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__vector_22>
  5c:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  60:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  64:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  68:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  6c:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  70:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__vector_28>
  74:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__bad_interrupt>
  78:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__vector_30>
  7c:	c6 0a       	sbc	r12, r22
  7e:	db 0a       	sbc	r13, r27
  80:	37 0b       	sbc	r19, r23
  82:	e4 0a       	sbc	r14, r20
  84:	40 0b       	sbc	r20, r16
  86:	29 0b       	sbc	r18, r25
  88:	30 0b       	sbc	r19, r16
  8a:	f4 0a       	sbc	r15, r20
  8c:	00 0b       	sbc	r16, r16
  8e:	0c 0b       	sbc	r16, r28
  90:	16 0b       	sbc	r17, r22
  92:	22 0b       	sbc	r18, r18

00000094 <.dinit>:
  94:	01 00       	.word	0x0001	; ????
  96:	07 1a       	sub	r0, r23
  98:	80 07       	cpc	r24, r16
  9a:	1a 07       	cpc	r17, r26
  9c:	26 00       	.word	0x0026	; ????
  9e:	3a 0c       	add	r3, r10
  a0:	07 26       	eor	r0, r23
  a2:	07 33       	cpi	r16, 0x37	; 55
  a4:	80 00       	.word	0x0080	; ????

000000a6 <__trampolines_end>:
  a6:	00 40       	sbci	r16, 0x00	; 0
  a8:	7a 10       	cpse	r7, r10
  aa:	f3 5a       	subi	r31, 0xA3	; 163
  ac:	00 a0       	ldd	r0, Z+32	; 0x20
  ae:	72 4e       	sbci	r23, 0xE2	; 226
  b0:	18 09       	sbc	r17, r8
  b2:	00 10       	cpse	r0, r0
  b4:	a5 d4       	rcall	.+2378   	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
  b6:	e8 00       	.word	0x00e8	; ????
  b8:	00 e8       	ldi	r16, 0x80	; 128
  ba:	76 48       	sbci	r23, 0x86	; 134
  bc:	17 00       	.word	0x0017	; ????
  be:	00 e4       	ldi	r16, 0x40	; 64
  c0:	0b 54       	subi	r16, 0x4B	; 75
  c2:	02 00       	.word	0x0002	; ????
  c4:	00 ca       	rjmp	.-3072   	; 0xfffff4c6 <__eeprom_end+0xff7ef4c6>
  c6:	9a 3b       	cpi	r25, 0xBA	; 186
  c8:	00 00       	nop
  ca:	00 e1       	ldi	r16, 0x10	; 16
  cc:	f5 05       	cpc	r31, r5
  ce:	00 00       	nop
  d0:	80 96       	adiw	r24, 0x20	; 32
  d2:	98 00       	.word	0x0098	; ????
  d4:	00 00       	nop
  d6:	40 42       	sbci	r20, 0x20	; 32
  d8:	0f 00       	.word	0x000f	; ????
  da:	00 00       	nop
  dc:	a0 86       	std	Z+8, r10	; 0x08
  de:	01 00       	.word	0x0001	; ????
  e0:	00 00       	nop
  e2:	10 27       	eor	r17, r16
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	e8 03       	fmulsu	r22, r16
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	64 00       	.word	0x0064	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	0a 00       	.word	0x000a	; ????
  f6:	00 00       	nop
  f8:	00 00       	nop
  fa:	01 00       	.word	0x0001	; ????
  fc:	00 00       	nop
  fe:	00 00       	nop
 100:	2c 76       	andi	r18, 0x6C	; 108
 102:	d8 88       	ldd	r13, Y+16	; 0x10
 104:	dc 67       	ori	r29, 0x7C	; 124
 106:	4f 08       	sbc	r4, r15
 108:	23 df       	rcall	.-442    	; 0xffffff50 <__eeprom_end+0xff7eff50>
 10a:	c1 df       	rcall	.-126    	; 0x8e <__SREG__+0x4f>
 10c:	ae 59       	subi	r26, 0x9E	; 158
 10e:	e1 b1       	in	r30, 0x01	; 1
 110:	b7 96       	adiw	r30, 0x27	; 39
 112:	e5 e3       	ldi	r30, 0x35	; 53
 114:	e4 53       	subi	r30, 0x34	; 52
 116:	c6 3a       	cpi	r28, 0xA6	; 166
 118:	e6 51       	subi	r30, 0x16	; 22
 11a:	99 76       	andi	r25, 0x69	; 105
 11c:	96 e8       	ldi	r25, 0x86	; 134
 11e:	e6 c2       	rjmp	.+1484   	; 0x6ec <vfprintf+0x1cc>
 120:	84 26       	eor	r8, r20
 122:	eb 89       	ldd	r30, Y+19	; 0x13
 124:	8c 9b       	sbis	0x11, 4	; 17
 126:	62 ed       	ldi	r22, 0xD2	; 210
 128:	40 7c       	andi	r20, 0xC0	; 192
 12a:	6f fc       	.word	0xfc6f	; ????
 12c:	ef bc       	out	0x2f, r14	; 47
 12e:	9c 9f       	mul	r25, r28
 130:	40 f2       	brcs	.-112    	; 0xc2 <__trampolines_end+0x1c>
 132:	ba a5       	ldd	r27, Y+42	; 0x2a
 134:	6f a5       	ldd	r22, Y+47	; 0x2f
 136:	f4 90       	lpm	r15, Z
 138:	05 5a       	subi	r16, 0xA5	; 165
 13a:	2a f7       	brpl	.-54     	; 0x106 <__trampolines_end+0x60>
 13c:	5c 93       	st	X, r21
 13e:	6b 6c       	ori	r22, 0xCB	; 203
 140:	f9 67       	ori	r31, 0x79	; 121
 142:	6d c1       	rjmp	.+730    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 144:	1b fc       	.word	0xfc1b	; ????
 146:	e0 e4       	ldi	r30, 0x40	; 64
 148:	0d 47       	sbci	r16, 0x7D	; 125
 14a:	fe f5       	brtc	.+126    	; 0x1ca <__do_copy_data+0x1e>
 14c:	20 e6       	ldi	r18, 0x60	; 96
 14e:	b5 00       	.word	0x00b5	; ????
 150:	d0 ed       	ldi	r29, 0xD0	; 208
 152:	90 2e       	mov	r9, r16
 154:	03 00       	.word	0x0003	; ????
 156:	94 35       	cpi	r25, 0x54	; 84
 158:	77 05       	cpc	r23, r7
 15a:	00 80       	ld	r0, Z
 15c:	84 1e       	adc	r8, r20
 15e:	08 00       	.word	0x0008	; ????
 160:	00 20       	and	r0, r0
 162:	4e 0a       	sbc	r4, r30
 164:	00 00       	nop
 166:	00 c8       	rjmp	.-4096   	; 0xfffff168 <__eeprom_end+0xff7ef168>
 168:	0c 33       	cpi	r16, 0x3C	; 60
 16a:	33 33       	cpi	r19, 0x33	; 51
 16c:	33 0f       	add	r19, r19
 16e:	98 6e       	ori	r25, 0xE8	; 232
 170:	12 83       	std	Z+2, r17	; 0x02
 172:	11 41       	sbci	r17, 0x11	; 17
 174:	ef 8d       	ldd	r30, Y+31	; 0x1f
 176:	21 14       	cp	r2, r1
 178:	89 3b       	cpi	r24, 0xB9	; 185
 17a:	e6 55       	subi	r30, 0x56	; 86
 17c:	16 cf       	rjmp	.-468    	; 0xffffffaa <__eeprom_end+0xff7effaa>
 17e:	fe e6       	ldi	r31, 0x6E	; 110
 180:	db 18       	sub	r13, r11
 182:	d1 84       	ldd	r13, Z+9	; 0x09
 184:	4b 38       	cpi	r20, 0x8B	; 139
 186:	1b f7       	brvc	.-58     	; 0x14e <__trampolines_end+0xa8>
 188:	7c 1d       	adc	r23, r12
 18a:	90 1d       	adc	r25, r0
 18c:	a4 bb       	out	0x14, r26	; 20
 18e:	e4 24       	eor	r14, r4
 190:	20 32       	cpi	r18, 0x20	; 32
 192:	84 72       	andi	r24, 0x24	; 36
 194:	5e 22       	and	r5, r30
 196:	81 00       	.word	0x0081	; ????
 198:	c9 f1       	breq	.+114    	; 0x20c <_etext+0x18>
 19a:	24 ec       	ldi	r18, 0xC4	; 196
 19c:	a1 e5       	ldi	r26, 0x51	; 81
 19e:	3d 27       	eor	r19, r29

000001a0 <__ctors_end>:
 1a0:	11 24       	eor	r1, r1
 1a2:	1f be       	out	0x3f, r1	; 63
 1a4:	cf ef       	ldi	r28, 0xFF	; 255
 1a6:	d0 e1       	ldi	r29, 0x10	; 16
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	cd bf       	out	0x3d, r28	; 61

000001ac <__do_copy_data>:
 1ac:	e4 e9       	ldi	r30, 0x94	; 148
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	17 c0       	rjmp	.+46     	; 0x1e2 <__do_clear_bss+0x8>
 1b4:	b5 91       	lpm	r27, Z+
 1b6:	a5 91       	lpm	r26, Z+
 1b8:	35 91       	lpm	r19, Z+
 1ba:	25 91       	lpm	r18, Z+
 1bc:	05 91       	lpm	r16, Z+
 1be:	07 fd       	sbrc	r16, 7
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <__do_clear_bss>
 1c2:	95 91       	lpm	r25, Z+
 1c4:	85 91       	lpm	r24, Z+
 1c6:	ef 01       	movw	r28, r30
 1c8:	f9 2f       	mov	r31, r25
 1ca:	e8 2f       	mov	r30, r24
 1cc:	05 90       	lpm	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x20>
 1d6:	fe 01       	movw	r30, r28
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__do_clear_bss+0x8>

000001da <__do_clear_bss>:
 1da:	1d 92       	st	X+, r1
 1dc:	a2 17       	cp	r26, r18
 1de:	b3 07       	cpc	r27, r19
 1e0:	e1 f7       	brne	.-8      	; 0x1da <__do_clear_bss>
 1e2:	e5 3a       	cpi	r30, 0xA5	; 165
 1e4:	f4 07       	cpc	r31, r20
 1e6:	31 f7       	brne	.-52     	; 0x1b4 <__do_copy_data+0x8>
 1e8:	0e 94 65 1b 	call	0x36ca	; 0x36ca <main>
 1ec:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>

Disassembly of section .text:

00003a08 <__bad_interrupt>:
    3a08:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

00003830 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    3830:	81 b1       	in	r24, 0x01	; 1
    3832:	88 60       	ori	r24, 0x08	; 8
    3834:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    3836:	82 b1       	in	r24, 0x02	; 2
    3838:	87 7f       	andi	r24, 0xF7	; 247
    383a:	82 b9       	out	0x02, r24	; 2
    383c:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00003752 <PM_HAL_adc_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3752:	88 23       	and	r24, r24
    3754:	21 f0       	breq	.+8      	; 0x375e <PM_HAL_adc_power+0xc>
    3756:	82 b1       	in	r24, 0x02	; 2
    3758:	88 60       	ori	r24, 0x08	; 8
    375a:	82 b9       	out	0x02, r24	; 2
    375c:	08 95       	ret
    375e:	82 b1       	in	r24, 0x02	; 2
    3760:	87 7f       	andi	r24, 0xF7	; 247
    3762:	82 b9       	out	0x02, r24	; 2
    3764:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

0000383e <PM_HAL_meth_power_init>:
		clear_bit(PORTA, 3);
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    383e:	81 b1       	in	r24, 0x01	; 1
    3840:	80 62       	ori	r24, 0x20	; 32
    3842:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    3844:	82 b1       	in	r24, 0x02	; 2
    3846:	8f 7d       	andi	r24, 0xDF	; 223
    3848:	82 b9       	out	0x02, r24	; 2
    384a:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003766 <PM_HAL_meth_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3766:	88 23       	and	r24, r24
    3768:	21 f0       	breq	.+8      	; 0x3772 <PM_HAL_meth_power+0xc>
    376a:	82 b1       	in	r24, 0x02	; 2
    376c:	80 62       	ori	r24, 0x20	; 32
    376e:	82 b9       	out	0x02, r24	; 2
    3770:	08 95       	ret
    3772:	82 b1       	in	r24, 0x02	; 2
    3774:	8f 7d       	andi	r24, 0xDF	; 223
    3776:	82 b9       	out	0x02, r24	; 2
    3778:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

0000384c <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    384c:	81 b1       	in	r24, 0x01	; 1
    384e:	80 61       	ori	r24, 0x10	; 16
    3850:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    3852:	82 b1       	in	r24, 0x02	; 2
    3854:	8f 7e       	andi	r24, 0xEF	; 239
    3856:	82 b9       	out	0x02, r24	; 2
    3858:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

0000377a <PM_HAL_SCD30_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    377a:	88 23       	and	r24, r24
    377c:	21 f0       	breq	.+8      	; 0x3786 <PM_HAL_SCD30_power+0xc>
    377e:	82 b1       	in	r24, 0x02	; 2
    3780:	80 61       	ori	r24, 0x10	; 16
    3782:	82 b9       	out	0x02, r24	; 2
    3784:	08 95       	ret
    3786:	82 b1       	in	r24, 0x02	; 2
    3788:	8f 7e       	andi	r24, 0xEF	; 239
    378a:	82 b9       	out	0x02, r24	; 2
    378c:	08 95       	ret

Disassembly of section .text.__vector_3:

0000378e <__vector_3>:
}

ISR(INT2_vect){
    378e:	1f 92       	push	r1
    3790:	0f 92       	push	r0
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	0f 92       	push	r0
    3796:	11 24       	eor	r1, r1
	
}
    3798:	0f 90       	pop	r0
    379a:	0f be       	out	0x3f, r0	; 63
    379c:	0f 90       	pop	r0
    379e:	1f 90       	pop	r1
    37a0:	18 95       	reti

Disassembly of section .text.rn2483_init:

000039c0 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    39c0:	84 b1       	in	r24, 0x04	; 4
    39c2:	80 61       	ori	r24, 0x10	; 16
    39c4:	84 b9       	out	0x04, r24	; 4
    39c6:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

000039c8 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    39c8:	85 b1       	in	r24, 0x05	; 5
    39ca:	8f 7e       	andi	r24, 0xEF	; 239
    39cc:	85 b9       	out	0x05, r24	; 5
    39ce:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

000039d0 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    39d0:	85 b1       	in	r24, 0x05	; 5
    39d2:	80 61       	ori	r24, 0x10	; 16
    39d4:	85 b9       	out	0x05, r24	; 5
    39d6:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

0000385a <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    385a:	87 b1       	in	r24, 0x07	; 7
    385c:	8f 7b       	andi	r24, 0xBF	; 191
    385e:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    3860:	88 b1       	in	r24, 0x08	; 8
    3862:	8f 7b       	andi	r24, 0xBF	; 191
    3864:	88 b9       	out	0x08, r24	; 8
    3866:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00003998 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    3998:	86 b1       	in	r24, 0x06	; 6
    399a:	86 fb       	bst	r24, 6
    399c:	88 27       	eor	r24, r24
    399e:	80 f9       	bld	r24, 0
    39a0:	08 95       	ret

Disassembly of section .text.__vector_16:

00002aa2 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    2aa2:	1f 92       	push	r1
    2aa4:	0f 92       	push	r0
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	0f 92       	push	r0
    2aaa:	11 24       	eor	r1, r1
    2aac:	2f 93       	push	r18
    2aae:	3f 93       	push	r19
    2ab0:	4f 93       	push	r20
    2ab2:	5f 93       	push	r21
    2ab4:	6f 93       	push	r22
    2ab6:	7f 93       	push	r23
    2ab8:	8f 93       	push	r24
    2aba:	9f 93       	push	r25
    2abc:	af 93       	push	r26
    2abe:	bf 93       	push	r27
    2ac0:	ef 93       	push	r30
    2ac2:	ff 93       	push	r31
	_cb();
    2ac4:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <_cb>
    2ac8:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <_cb+0x1>
    2acc:	09 95       	icall
}
    2ace:	ff 91       	pop	r31
    2ad0:	ef 91       	pop	r30
    2ad2:	bf 91       	pop	r27
    2ad4:	af 91       	pop	r26
    2ad6:	9f 91       	pop	r25
    2ad8:	8f 91       	pop	r24
    2ada:	7f 91       	pop	r23
    2adc:	6f 91       	pop	r22
    2ade:	5f 91       	pop	r21
    2ae0:	4f 91       	pop	r20
    2ae2:	3f 91       	pop	r19
    2ae4:	2f 91       	pop	r18
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

Disassembly of section .text.__vector_13:

00002af0 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    2af0:	1f 92       	push	r1
    2af2:	0f 92       	push	r0
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	0f 92       	push	r0
    2af8:	11 24       	eor	r1, r1
    2afa:	2f 93       	push	r18
    2afc:	3f 93       	push	r19
    2afe:	4f 93       	push	r20
    2b00:	5f 93       	push	r21
    2b02:	6f 93       	push	r22
    2b04:	7f 93       	push	r23
    2b06:	8f 93       	push	r24
    2b08:	9f 93       	push	r25
    2b0a:	af 93       	push	r26
    2b0c:	bf 93       	push	r27
    2b0e:	ef 93       	push	r30
    2b10:	ff 93       	push	r31
	_cb();
    2b12:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <_cb>
    2b16:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <_cb+0x1>
    2b1a:	09 95       	icall
    2b1c:	ff 91       	pop	r31
    2b1e:	ef 91       	pop	r30
    2b20:	bf 91       	pop	r27
    2b22:	af 91       	pop	r26
    2b24:	9f 91       	pop	r25
    2b26:	8f 91       	pop	r24
    2b28:	7f 91       	pop	r23
    2b2a:	6f 91       	pop	r22
    2b2c:	5f 91       	pop	r21
    2b2e:	4f 91       	pop	r20
    2b30:	3f 91       	pop	r19
    2b32:	2f 91       	pop	r18
    2b34:	0f 90       	pop	r0
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	0f 90       	pop	r0
    2b3a:	1f 90       	pop	r1
    2b3c:	18 95       	reti

Disassembly of section .text.__vector_9:

00002088 <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
    2088:	1f 92       	push	r1
    208a:	0f 92       	push	r0
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	0f 92       	push	r0
    2090:	11 24       	eor	r1, r1
    2092:	2f 93       	push	r18
    2094:	3f 93       	push	r19
    2096:	4f 93       	push	r20
    2098:	5f 93       	push	r21
    209a:	6f 93       	push	r22
    209c:	7f 93       	push	r23
    209e:	8f 93       	push	r24
    20a0:	9f 93       	push	r25
    20a2:	af 93       	push	r26
    20a4:	bf 93       	push	r27
    20a6:	cf 93       	push	r28
    20a8:	ef 93       	push	r30
    20aa:	ff 93       	push	r31
	cnt++;
    20ac:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <cnt>
    20b0:	9f 5f       	subi	r25, 0xFF	; 255
    20b2:	90 93 2a 07 	sts	0x072A, r25	; 0x80072a <cnt>
	
	if(cnt % 31==0){
    20b6:	89 e0       	ldi	r24, 0x09	; 9
    20b8:	98 9f       	mul	r25, r24
    20ba:	21 2d       	mov	r18, r1
    20bc:	11 24       	eor	r1, r1
    20be:	89 2f       	mov	r24, r25
    20c0:	82 1b       	sub	r24, r18
    20c2:	86 95       	lsr	r24
    20c4:	82 0f       	add	r24, r18
    20c6:	82 95       	swap	r24
    20c8:	8f 70       	andi	r24, 0x0F	; 15
    20ca:	2f e1       	ldi	r18, 0x1F	; 31
    20cc:	82 9f       	mul	r24, r18
    20ce:	90 19       	sub	r25, r0
    20d0:	11 24       	eor	r1, r1
    20d2:	91 11       	cpse	r25, r1
    20d4:	13 c0       	rjmp	.+38     	; 0x20fc <__vector_9+0x74>
		cnt=0;
    20d6:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    20da:	c0 e0       	ldi	r28, 0x00	; 0
    20dc:	0d c0       	rjmp	.+26     	; 0x20f8 <__vector_9+0x70>
		{
			if(callbacks[i]!=NULL){
    20de:	ec 2f       	mov	r30, r28
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	e0 5f       	subi	r30, 0xF0	; 240
    20e8:	f8 4f       	sbci	r31, 0xF8	; 248
    20ea:	01 90       	ld	r0, Z+
    20ec:	f0 81       	ld	r31, Z
    20ee:	e0 2d       	mov	r30, r0
    20f0:	30 97       	sbiw	r30, 0x00	; 0
    20f2:	09 f0       	breq	.+2      	; 0x20f6 <__vector_9+0x6e>
				callbacks[i]();
    20f4:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt % 31==0){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    20f6:	cf 5f       	subi	r28, 0xFF	; 255
    20f8:	c5 30       	cpi	r28, 0x05	; 5
    20fa:	88 f3       	brcs	.-30     	; 0x20de <__vector_9+0x56>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    20fc:	ff 91       	pop	r31
    20fe:	ef 91       	pop	r30
    2100:	cf 91       	pop	r28
    2102:	bf 91       	pop	r27
    2104:	af 91       	pop	r26
    2106:	9f 91       	pop	r25
    2108:	8f 91       	pop	r24
    210a:	7f 91       	pop	r23
    210c:	6f 91       	pop	r22
    210e:	5f 91       	pop	r21
    2110:	4f 91       	pop	r20
    2112:	3f 91       	pop	r19
    2114:	2f 91       	pop	r18
    2116:	0f 90       	pop	r0
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	0f 90       	pop	r0
    211c:	1f 90       	pop	r1
    211e:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00002b8c <start_and_write_data>:
static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
}
    2b8c:	cf 92       	push	r12
    2b8e:	df 92       	push	r13
    2b90:	ef 92       	push	r14
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	6a 01       	movw	r12, r20
    2b98:	e6 2e       	mov	r14, r22
    2b9a:	d2 2f       	mov	r29, r18
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	0e 94 19 17 	call	0x2e32	; 0x2e32 <TWI_HAL_start>
    2ba2:	81 11       	cpse	r24, r1
    2ba4:	13 c0       	rjmp	.+38     	; 0x2bcc <start_and_write_data+0x40>
    2ba6:	c0 e0       	ldi	r28, 0x00	; 0
    2ba8:	0e c0       	rjmp	.+28     	; 0x2bc6 <start_and_write_data+0x3a>
    2baa:	ae 2d       	mov	r26, r14
    2bac:	c6 01       	movw	r24, r12
    2bae:	8c 0f       	add	r24, r28
    2bb0:	91 1d       	adc	r25, r1
    2bb2:	a1 1d       	adc	r26, r1
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	84 91       	lpm	r24, Z
    2bb8:	a7 fd       	sbrc	r26, 7
    2bba:	80 81       	ld	r24, Z
    2bbc:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <TWI_HAL_write_byte>
    2bc0:	81 11       	cpse	r24, r1
    2bc2:	04 c0       	rjmp	.+8      	; 0x2bcc <start_and_write_data+0x40>
    2bc4:	cf 5f       	subi	r28, 0xFF	; 255
    2bc6:	cd 17       	cp	r28, r29
    2bc8:	80 f3       	brcs	.-32     	; 0x2baa <start_and_write_data+0x1e>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	ef 90       	pop	r14
    2bd2:	df 90       	pop	r13
    2bd4:	cf 90       	pop	r12
    2bd6:	08 95       	ret

Disassembly of section .text.read_and_stop:

0000284e <read_and_stop>:
    284e:	ef 92       	push	r14
    2850:	ff 92       	push	r15
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	8c 01       	movw	r16, r24
    285c:	d6 2f       	mov	r29, r22
    285e:	c0 e0       	ldi	r28, 0x00	; 0
    2860:	08 c0       	rjmp	.+16     	; 0x2872 <read_and_stop+0x24>
    2862:	78 01       	movw	r14, r16
    2864:	ec 0e       	add	r14, r28
    2866:	f1 1c       	adc	r15, r1
    2868:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <TWI_HAL_read_byte_ack>
    286c:	f7 01       	movw	r30, r14
    286e:	80 83       	st	Z, r24
    2870:	cf 5f       	subi	r28, 0xFF	; 255
    2872:	2c 2f       	mov	r18, r28
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	8d 2f       	mov	r24, r29
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	28 17       	cp	r18, r24
    287e:	39 07       	cpc	r19, r25
    2880:	84 f3       	brlt	.-32     	; 0x2862 <read_and_stop+0x14>
    2882:	8d 2f       	mov	r24, r29
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	e8 01       	movw	r28, r16
    288a:	c8 0f       	add	r28, r24
    288c:	d9 1f       	adc	r29, r25
    288e:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <TWI_HAL_read_byte_nack>
    2892:	88 83       	st	Y, r24
    2894:	0e 94 08 1c 	call	0x3810	; 0x3810 <TWI_HAL_stop>
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	1f 91       	pop	r17
    28a0:	0f 91       	pop	r16
    28a2:	ff 90       	pop	r15
    28a4:	ef 90       	pop	r14
    28a6:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00003800 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3800:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    3804:	81 11       	cpse	r24, r1
    3806:	03 c0       	rjmp	.+6      	; 0x380e <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    3808:	0e 94 08 1c 	call	0x3810	; 0x3810 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    380c:	80 e0       	ldi	r24, 0x00	; 0
}
    380e:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000034f4 <TWI_API_read_data_ack_end_nack_stop>:
static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
}
    34f4:	1f 93       	push	r17
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	eb 01       	movw	r28, r22
    34fc:	14 2f       	mov	r17, r20
    34fe:	61 e0       	ldi	r22, 0x01	; 1
    3500:	0e 94 19 17 	call	0x2e32	; 0x2e32 <TWI_HAL_start>
    3504:	81 11       	cpse	r24, r1
    3506:	04 c0       	rjmp	.+8      	; 0x3510 <TWI_API_read_data_ack_end_nack_stop+0x1c>
    3508:	61 2f       	mov	r22, r17
    350a:	ce 01       	movw	r24, r28
    350c:	0e 94 27 14 	call	0x284e	; 0x284e <read_and_stop>
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	1f 91       	pop	r17
    3516:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

000037ca <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    37ca:	80 e2       	ldi	r24, 0x20	; 32
    37cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    37d0:	e9 eb       	ldi	r30, 0xB9	; 185
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	80 81       	ld	r24, Z
    37d6:	8c 7f       	andi	r24, 0xFC	; 252
    37d8:	80 83       	st	Z, r24
    37da:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00002e32 <TWI_HAL_start>:
	status=twi_read_status(TWSR);
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
	
	return status;
}
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	88 0f       	add	r24, r24
    2e36:	99 1f       	adc	r25, r25
    2e38:	68 2b       	or	r22, r24
    2e3a:	84 ea       	ldi	r24, 0xA4	; 164
    2e3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2e40:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2e44:	99 23       	and	r25, r25
    2e46:	e4 f7       	brge	.-8      	; 0x2e40 <TWI_HAL_start+0xe>
    2e48:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2e4c:	88 7f       	andi	r24, 0xF8	; 248
    2e4e:	88 30       	cpi	r24, 0x08	; 8
    2e50:	99 f4       	brne	.+38     	; 0x2e78 <TWI_HAL_start+0x46>
    2e52:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
    2e56:	84 e8       	ldi	r24, 0x84	; 132
    2e58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2e5c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2e60:	88 23       	and	r24, r24
    2e62:	e4 f7       	brge	.-8      	; 0x2e5c <TWI_HAL_start+0x2a>
    2e64:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2e68:	88 7f       	andi	r24, 0xF8	; 248
    2e6a:	88 31       	cpi	r24, 0x18	; 24
    2e6c:	21 f0       	breq	.+8      	; 0x2e76 <TWI_HAL_start+0x44>
    2e6e:	80 34       	cpi	r24, 0x40	; 64
    2e70:	19 f4       	brne	.+6      	; 0x2e78 <TWI_HAL_start+0x46>
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	08 95       	ret
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

000035a4 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    35a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    35a8:	84 e8       	ldi	r24, 0x84	; 132
    35aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    35ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    35b2:	88 23       	and	r24, r24
    35b4:	e4 f7       	brge	.-8      	; 0x35ae <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    35b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    35ba:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    35bc:	88 32       	cpi	r24, 0x28	; 40
    35be:	09 f4       	brne	.+2      	; 0x35c2 <TWI_HAL_write_byte+0x1e>
    35c0:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    35c2:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

000037a2 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    37a2:	84 ec       	ldi	r24, 0xC4	; 196
    37a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    37a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    37ac:	88 23       	and	r24, r24
    37ae:	e4 f7       	brge	.-8      	; 0x37a8 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    37b0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    37b4:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

000037b6 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    37b6:	84 e8       	ldi	r24, 0x84	; 132
    37b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    37bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    37c0:	88 23       	and	r24, r24
    37c2:	e4 f7       	brge	.-8      	; 0x37bc <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    37c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    37c8:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00003810 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    3810:	84 e9       	ldi	r24, 0x94	; 148
    3812:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    3816:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    381a:	84 fd       	sbrc	r24, 4
    381c:	fc cf       	rjmp	.-8      	; 0x3816 <TWI_HAL_stop+0x6>
}
    381e:	08 95       	ret

Disassembly of section .text.copy_buffer:

00003378 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3378:	bc 01       	movw	r22, r24
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	09 c0       	rjmp	.+18     	; 0x3390 <copy_buffer+0x18>
    337e:	fb 01       	movw	r30, r22
    3380:	e9 0f       	add	r30, r25
    3382:	f1 1d       	adc	r31, r1
    3384:	da 01       	movw	r26, r20
    3386:	a0 50       	subi	r26, 0x00	; 0
    3388:	bf 4f       	sbci	r27, 0xFF	; 255
    338a:	2c 91       	ld	r18, X
    338c:	20 83       	st	Z, r18
    338e:	9f 5f       	subi	r25, 0xFF	; 255
    3390:	49 2f       	mov	r20, r25
    3392:	50 e0       	ldi	r21, 0x00	; 0
    3394:	20 91 2c 07 	lds	r18, 0x072C	; 0x80072c <rx_buffer_data_len>
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	22 50       	subi	r18, 0x02	; 2
    339c:	31 09       	sbc	r19, r1
    339e:	42 17       	cp	r20, r18
    33a0:	53 07       	cpc	r21, r19
    33a2:	6c f3       	brlt	.-38     	; 0x337e <copy_buffer+0x6>
    33a4:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00003014 <uart0_hal_init>:
    3014:	e1 ec       	ldi	r30, 0xC1	; 193
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	80 61       	ori	r24, 0x10	; 16
    301c:	80 83       	st	Z, r24
    301e:	80 81       	ld	r24, Z
    3020:	88 60       	ori	r24, 0x08	; 8
    3022:	80 83       	st	Z, r24
    3024:	80 81       	ld	r24, Z
    3026:	80 68       	ori	r24, 0x80	; 128
    3028:	80 83       	st	Z, r24
    302a:	80 81       	ld	r24, Z
    302c:	80 64       	ori	r24, 0x40	; 64
    302e:	80 83       	st	Z, r24
    3030:	e0 ec       	ldi	r30, 0xC0	; 192
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	82 60       	ori	r24, 0x02	; 2
    3038:	80 83       	st	Z, r24
    303a:	86 e0       	ldi	r24, 0x06	; 6
    303c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    3040:	80 e1       	ldi	r24, 0x10	; 16
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    3048:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    304c:	78 94       	sei
    304e:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

0000271c <uart0_hal_send_string>:
    271c:	cf 92       	push	r12
    271e:	df 92       	push	r13
    2720:	ef 92       	push	r14
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	cf 93       	push	r28
    2728:	6b 01       	movw	r12, r22
    272a:	e8 2e       	mov	r14, r24
    272c:	c0 e0       	ldi	r28, 0x00	; 0
    272e:	12 c0       	rjmp	.+36     	; 0x2754 <uart0_hal_send_string+0x38>
    2730:	8c 2f       	mov	r24, r28
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	4e 2d       	mov	r20, r14
    2736:	96 01       	movw	r18, r12
    2738:	20 0f       	add	r18, r16
    273a:	31 1f       	adc	r19, r17
    273c:	41 1d       	adc	r20, r1
    273e:	17 fd       	sbrc	r17, 7
    2740:	4a 95       	dec	r20
    2742:	f9 01       	movw	r30, r18
    2744:	24 91       	lpm	r18, Z
    2746:	47 fd       	sbrc	r20, 7
    2748:	20 81       	ld	r18, Z
    274a:	fc 01       	movw	r30, r24
    274c:	ec 59       	subi	r30, 0x9C	; 156
    274e:	fe 4f       	sbci	r31, 0xFE	; 254
    2750:	20 83       	st	Z, r18
    2752:	cf 5f       	subi	r28, 0xFF	; 255
    2754:	0c 2f       	mov	r16, r28
    2756:	10 e0       	ldi	r17, 0x00	; 0
    2758:	8e 2d       	mov	r24, r14
    275a:	b6 01       	movw	r22, r12
    275c:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    2760:	08 17       	cp	r16, r24
    2762:	19 07       	cpc	r17, r25
    2764:	28 f3       	brcs	.-54     	; 0x2730 <uart0_hal_send_string+0x14>
    2766:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <tx_buffer_data_len>
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <tx_buffer_cursor>
    2770:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2774:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ef 90       	pop	r14
    2780:	df 90       	pop	r13
    2782:	cf 90       	pop	r12
    2784:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00003868 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    3868:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <rx_buffer_has_message>
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	91 11       	cpse	r25, r1
    3870:	01 c0       	rjmp	.+2      	; 0x3874 <uart0_hal_message_ready+0xc>
    3872:	80 e0       	ldi	r24, 0x00	; 0
}
    3874:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000039a2 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    39a2:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <rx_buffer_has_message>
	rx_buffer_data_len=0;
    39a6:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <rx_buffer_data_len>
    39aa:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

0000342e <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(char msg[]){
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    3436:	0e 94 bc 19 	call	0x3378	; 0x3378 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    343a:	c0 91 2c 07 	lds	r28, 0x072C	; 0x80072c <rx_buffer_data_len>
    343e:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    3440:	f8 01       	movw	r30, r16
    3442:	ec 0f       	add	r30, r28
    3444:	f1 1d       	adc	r31, r1
    3446:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    3448:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <uart0_hal_clear_rx_buffer>
	return len;
}
    344c:	8c 2f       	mov	r24, r28
    344e:	cf 91       	pop	r28
    3450:	1f 91       	pop	r17
    3452:	0f 91       	pop	r16
    3454:	08 95       	ret

Disassembly of section .text.__vector_22:

00002d54 <__vector_22>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    2d54:	1f 92       	push	r1
    2d56:	0f 92       	push	r0
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	0f 92       	push	r0
    2d5c:	11 24       	eor	r1, r1
    2d5e:	8f 93       	push	r24
    2d60:	ef 93       	push	r30
    2d62:	ff 93       	push	r31
    2d64:	e0 91 2d 07 	lds	r30, 0x072D	; 0x80072d <tx_buffer_cursor>
    2d68:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <tx_buffer_data_len>
    2d6c:	e8 17       	cp	r30, r24
    2d6e:	58 f4       	brcc	.+22     	; 0x2d86 <__vector_22+0x32>
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	8e 0f       	add	r24, r30
    2d74:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <tx_buffer_cursor>
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	ec 59       	subi	r30, 0x9C	; 156
    2d7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d7e:	80 81       	ld	r24, Z
    2d80:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2d84:	04 c0       	rjmp	.+8      	; 0x2d8e <__vector_22+0x3a>
    2d86:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <tx_buffer_cursor>
    2d8a:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <tx_buffer_data_len>
    2d8e:	ff 91       	pop	r31
    2d90:	ef 91       	pop	r30
    2d92:	8f 91       	pop	r24
    2d94:	0f 90       	pop	r0
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	0f 90       	pop	r0
    2d9a:	1f 90       	pop	r1
    2d9c:	18 95       	reti

Disassembly of section .text.__vector_20:

000025c8 <__vector_20>:
    25c8:	1f 92       	push	r1
    25ca:	0f 92       	push	r0
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	0f 92       	push	r0
    25d0:	11 24       	eor	r1, r1
    25d2:	2f 93       	push	r18
    25d4:	8f 93       	push	r24
    25d6:	9f 93       	push	r25
    25d8:	ef 93       	push	r30
    25da:	ff 93       	push	r31
    25dc:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <rx_buffer_has_message>
    25e0:	81 11       	cpse	r24, r1
    25e2:	0e c0       	rjmp	.+28     	; 0x2600 <__vector_20+0x38>
    25e4:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <rx_buffer_data_len>
    25e8:	e4 36       	cpi	r30, 0x64	; 100
    25ea:	50 f4       	brcc	.+20     	; 0x2600 <__vector_20+0x38>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	8e 0f       	add	r24, r30
    25f0:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <rx_buffer_data_len>
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    25fa:	e0 50       	subi	r30, 0x00	; 0
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 83       	st	Z, r24
    2600:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <rx_buffer_data_len>
    2604:	83 30       	cpi	r24, 0x03	; 3
    2606:	80 f0       	brcs	.+32     	; 0x2628 <__vector_20+0x60>
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	fc 01       	movw	r30, r24
    260c:	e1 50       	subi	r30, 0x01	; 1
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	20 81       	ld	r18, Z
    2612:	2a 30       	cpi	r18, 0x0A	; 10
    2614:	49 f4       	brne	.+18     	; 0x2628 <__vector_20+0x60>
    2616:	fc 01       	movw	r30, r24
    2618:	e2 50       	subi	r30, 0x02	; 2
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	8d 30       	cpi	r24, 0x0D	; 13
    2620:	19 f4       	brne	.+6      	; 0x2628 <__vector_20+0x60>
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <rx_buffer_has_message>
    2628:	ff 91       	pop	r31
    262a:	ef 91       	pop	r30
    262c:	9f 91       	pop	r25
    262e:	8f 91       	pop	r24
    2630:	2f 91       	pop	r18
    2632:	0f 90       	pop	r0
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	0f 90       	pop	r0
    2638:	1f 90       	pop	r1
    263a:	18 95       	reti

Disassembly of section .text.copy_buffer:

000033a6 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    33a6:	bc 01       	movw	r22, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	09 c0       	rjmp	.+18     	; 0x33be <copy_buffer+0x18>
    33ac:	fb 01       	movw	r30, r22
    33ae:	e9 0f       	add	r30, r25
    33b0:	f1 1d       	adc	r31, r1
    33b2:	da 01       	movw	r26, r20
    33b4:	aa 5e       	subi	r26, 0xEA	; 234
    33b6:	b9 4f       	sbci	r27, 0xF9	; 249
    33b8:	2c 91       	ld	r18, X
    33ba:	20 83       	st	Z, r18
    33bc:	9f 5f       	subi	r25, 0xFF	; 255
    33be:	49 2f       	mov	r20, r25
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	20 91 30 07 	lds	r18, 0x0730	; 0x800730 <rx_buffer_data_len>
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	22 50       	subi	r18, 0x02	; 2
    33ca:	31 09       	sbc	r19, r1
    33cc:	42 17       	cp	r20, r18
    33ce:	53 07       	cpc	r21, r19
    33d0:	6c f3       	brlt	.-38     	; 0x33ac <copy_buffer+0x6>
    33d2:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

00003050 <uart1_hal_init>:
    3050:	e9 ec       	ldi	r30, 0xC9	; 201
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	80 61       	ori	r24, 0x10	; 16
    3058:	80 83       	st	Z, r24
    305a:	80 81       	ld	r24, Z
    305c:	88 60       	ori	r24, 0x08	; 8
    305e:	80 83       	st	Z, r24
    3060:	80 81       	ld	r24, Z
    3062:	80 68       	ori	r24, 0x80	; 128
    3064:	80 83       	st	Z, r24
    3066:	80 81       	ld	r24, Z
    3068:	80 64       	ori	r24, 0x40	; 64
    306a:	80 83       	st	Z, r24
    306c:	e8 ec       	ldi	r30, 0xC8	; 200
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	82 60       	ori	r24, 0x02	; 2
    3074:	80 83       	st	Z, r24
    3076:	86 e0       	ldi	r24, 0x06	; 6
    3078:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    307c:	80 e1       	ldi	r24, 0x10	; 16
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    3084:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    3088:	78 94       	sei
    308a:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

000022e4 <uart1_hal_send_string>:
    22e4:	6f 92       	push	r6
    22e6:	7f 92       	push	r7
    22e8:	8f 92       	push	r8
    22ea:	cf 92       	push	r12
    22ec:	df 92       	push	r13
    22ee:	ef 92       	push	r14
    22f0:	3b 01       	movw	r6, r22
    22f2:	88 2e       	mov	r8, r24
    22f4:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <tx_buffer_data_len>
    22f8:	81 11       	cpse	r24, r1
    22fa:	fc cf       	rjmp	.-8      	; 0x22f4 <uart1_hal_send_string+0x10>
    22fc:	88 2d       	mov	r24, r8
    22fe:	b3 01       	movw	r22, r6
    2300:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    2304:	bc 01       	movw	r22, r24
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	12 c0       	rjmp	.+36     	; 0x232e <uart1_hal_send_string+0x4a>
    230a:	29 2f       	mov	r18, r25
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	e8 2c       	mov	r14, r8
    2310:	63 01       	movw	r12, r6
    2312:	c4 0e       	add	r12, r20
    2314:	d5 1e       	adc	r13, r21
    2316:	e1 1c       	adc	r14, r1
    2318:	57 fd       	sbrc	r21, 7
    231a:	ea 94       	dec	r14
    231c:	f6 01       	movw	r30, r12
    231e:	44 91       	lpm	r20, Z
    2320:	e7 fc       	sbrc	r14, 7
    2322:	40 81       	ld	r20, Z
    2324:	f9 01       	movw	r30, r18
    2326:	e6 51       	subi	r30, 0x16	; 22
    2328:	fb 4f       	sbci	r31, 0xFB	; 251
    232a:	40 83       	st	Z, r20
    232c:	9f 5f       	subi	r25, 0xFF	; 255
    232e:	49 2f       	mov	r20, r25
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	46 17       	cp	r20, r22
    2334:	57 07       	cpc	r21, r23
    2336:	48 f3       	brcs	.-46     	; 0x230a <uart1_hal_send_string+0x26>
    2338:	fb 01       	movw	r30, r22
    233a:	e6 51       	subi	r30, 0x16	; 22
    233c:	fb 4f       	sbci	r31, 0xFB	; 251
    233e:	8d e0       	ldi	r24, 0x0D	; 13
    2340:	80 83       	st	Z, r24
    2342:	fb 01       	movw	r30, r22
    2344:	e5 51       	subi	r30, 0x15	; 21
    2346:	fb 4f       	sbci	r31, 0xFB	; 251
    2348:	8a e0       	ldi	r24, 0x0A	; 10
    234a:	80 83       	st	Z, r24
    234c:	6e 5f       	subi	r22, 0xFE	; 254
    234e:	60 93 32 07 	sts	0x0732, r22	; 0x800732 <tx_buffer_data_len>
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <tx_buffer_cursor>
    2358:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <_end>
    235c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2360:	ef 90       	pop	r14
    2362:	df 90       	pop	r13
    2364:	cf 90       	pop	r12
    2366:	8f 90       	pop	r8
    2368:	7f 90       	pop	r7
    236a:	6f 90       	pop	r6
    236c:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00003876 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    3876:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <rx_buffer_has_message>
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	91 11       	cpse	r25, r1
    387e:	01 c0       	rjmp	.+2      	; 0x3882 <uart1_hal_message_ready+0xc>
    3880:	80 e0       	ldi	r24, 0x00	; 0
}
    3882:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00003884 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    3884:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <rx_buffer_data_len>
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	95 39       	cpi	r25, 0x95	; 149
    388c:	08 f4       	brcc	.+2      	; 0x3890 <uart1_hal_rx_full+0xc>
    388e:	80 e0       	ldi	r24, 0x00	; 0
}
    3890:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

000039ac <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    39ac:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <rx_buffer_has_message>
	rx_buffer_data_len=0;
    39b0:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <rx_buffer_data_len>
    39b4:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00003456 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	8c 01       	movw	r16, r24
    345e:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <copy_buffer>
    3462:	c0 91 30 07 	lds	r28, 0x0730	; 0x800730 <rx_buffer_data_len>
    3466:	c2 50       	subi	r28, 0x02	; 2
    3468:	f8 01       	movw	r30, r16
    346a:	ec 0f       	add	r30, r28
    346c:	f1 1d       	adc	r31, r1
    346e:	10 82       	st	Z, r1
    3470:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <uart1_hal_clear_rx_buffer>
    3474:	8c 2f       	mov	r24, r28
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	08 95       	ret

Disassembly of section .text.__vector_30:

00002d9e <__vector_30>:
    2d9e:	1f 92       	push	r1
    2da0:	0f 92       	push	r0
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	0f 92       	push	r0
    2da6:	11 24       	eor	r1, r1
    2da8:	8f 93       	push	r24
    2daa:	ef 93       	push	r30
    2dac:	ff 93       	push	r31
    2dae:	e0 91 31 07 	lds	r30, 0x0731	; 0x800731 <tx_buffer_cursor>
    2db2:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <tx_buffer_data_len>
    2db6:	e8 17       	cp	r30, r24
    2db8:	58 f4       	brcc	.+22     	; 0x2dd0 <__vector_30+0x32>
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	8e 0f       	add	r24, r30
    2dbe:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <tx_buffer_cursor>
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	e6 51       	subi	r30, 0x16	; 22
    2dc6:	fb 4f       	sbci	r31, 0xFB	; 251
    2dc8:	80 81       	ld	r24, Z
    2dca:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2dce:	04 c0       	rjmp	.+8      	; 0x2dd8 <__vector_30+0x3a>
    2dd0:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <tx_buffer_cursor>
    2dd4:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <tx_buffer_data_len>
    2dd8:	ff 91       	pop	r31
    2dda:	ef 91       	pop	r30
    2ddc:	8f 91       	pop	r24
    2dde:	0f 90       	pop	r0
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	0f 90       	pop	r0
    2de4:	1f 90       	pop	r1
    2de6:	18 95       	reti

Disassembly of section .text.__vector_28:

0000263c <__vector_28>:
    263c:	1f 92       	push	r1
    263e:	0f 92       	push	r0
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	0f 92       	push	r0
    2644:	11 24       	eor	r1, r1
    2646:	2f 93       	push	r18
    2648:	8f 93       	push	r24
    264a:	9f 93       	push	r25
    264c:	ef 93       	push	r30
    264e:	ff 93       	push	r31
    2650:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <rx_buffer_has_message>
    2654:	81 11       	cpse	r24, r1
    2656:	0e c0       	rjmp	.+28     	; 0x2674 <__vector_28+0x38>
    2658:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <rx_buffer_data_len>
    265c:	e6 39       	cpi	r30, 0x96	; 150
    265e:	50 f4       	brcc	.+20     	; 0x2674 <__vector_28+0x38>
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	8e 0f       	add	r24, r30
    2664:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <rx_buffer_data_len>
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    266e:	ea 5e       	subi	r30, 0xEA	; 234
    2670:	f9 4f       	sbci	r31, 0xF9	; 249
    2672:	80 83       	st	Z, r24
    2674:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <rx_buffer_data_len>
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	fc 01       	movw	r30, r24
    267c:	eb 5e       	subi	r30, 0xEB	; 235
    267e:	f9 4f       	sbci	r31, 0xF9	; 249
    2680:	20 81       	ld	r18, Z
    2682:	2a 30       	cpi	r18, 0x0A	; 10
    2684:	49 f4       	brne	.+18     	; 0x2698 <__vector_28+0x5c>
    2686:	fc 01       	movw	r30, r24
    2688:	ec 5e       	subi	r30, 0xEC	; 236
    268a:	f9 4f       	sbci	r31, 0xF9	; 249
    268c:	80 81       	ld	r24, Z
    268e:	8d 30       	cpi	r24, 0x0D	; 13
    2690:	19 f4       	brne	.+6      	; 0x2698 <__vector_28+0x5c>
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <rx_buffer_has_message>
    2698:	ff 91       	pop	r31
    269a:	ef 91       	pop	r30
    269c:	9f 91       	pop	r25
    269e:	8f 91       	pop	r24
    26a0:	2f 91       	pop	r18
    26a2:	0f 90       	pop	r0
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	0f 90       	pop	r0
    26a8:	1f 90       	pop	r1
    26aa:	18 95       	reti

Disassembly of section .text.main:

000036ca <main>:
	//test_runner();
	
	while(1)
    {
		if(1){
			CONF_enter();
    36ca:	0e 94 ab 0a 	call	0x1556	; 0x1556 <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36ce:	2f ef       	ldi	r18, 0xFF	; 255
    36d0:	81 e1       	ldi	r24, 0x11	; 17
    36d2:	9a e7       	ldi	r25, 0x7A	; 122
    36d4:	21 50       	subi	r18, 0x01	; 1
    36d6:	80 40       	sbci	r24, 0x00	; 0
    36d8:	90 40       	sbci	r25, 0x00	; 0
    36da:	e1 f7       	brne	.-8      	; 0x36d4 <main+0xa>
    36dc:	00 c0       	rjmp	.+0      	; 0x36de <main+0x14>
    36de:	00 00       	nop
    36e0:	f4 cf       	rjmp	.-24     	; 0x36ca <main>

Disassembly of section .text.calc_ppm_methane:

000021b8 <calc_ppm_methane>:
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    21b8:	8f 92       	push	r8
    21ba:	9f 92       	push	r9
    21bc:	af 92       	push	r10
    21be:	bf 92       	push	r11
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	bc 01       	movw	r22, r24
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 b7 11 	call	0x236e	; 0x236e <__floatunsisf>
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	59 e3       	ldi	r21, 0x39	; 57
    21da:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__mulsf3>
    21de:	80 90 22 07 	lds	r8, 0x0722	; 0x800722 <Vc>
    21e2:	90 90 23 07 	lds	r9, 0x0723	; 0x800723 <Vc+0x1>
    21e6:	a0 90 24 07 	lds	r10, 0x0724	; 0x800724 <Vc+0x2>
    21ea:	b0 90 25 07 	lds	r11, 0x0725	; 0x800725 <Vc+0x3>
    21ee:	a5 01       	movw	r20, r10
    21f0:	94 01       	movw	r18, r8
    21f2:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__mulsf3>
    21f6:	6b 01       	movw	r12, r22
    21f8:	7c 01       	movw	r14, r24
    21fa:	9b 01       	movw	r18, r22
    21fc:	ac 01       	movw	r20, r24
    21fe:	c5 01       	movw	r24, r10
    2200:	b4 01       	movw	r22, r8
    2202:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2206:	a7 01       	movw	r20, r14
    2208:	96 01       	movw	r18, r12
    220a:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__divsf3>
    220e:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <RRL>
    2212:	30 91 1f 07 	lds	r19, 0x071F	; 0x80071f <RRL+0x1>
    2216:	40 91 20 07 	lds	r20, 0x0720	; 0x800720 <RRL+0x2>
    221a:	50 91 21 07 	lds	r21, 0x0721	; 0x800721 <RRL+0x3>
    221e:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__mulsf3>
    2222:	20 91 1a 07 	lds	r18, 0x071A	; 0x80071a <PPM_factor>
    2226:	30 91 1b 07 	lds	r19, 0x071B	; 0x80071b <PPM_factor+0x1>
    222a:	40 91 1c 07 	lds	r20, 0x071C	; 0x80071c <PPM_factor+0x2>
    222e:	50 91 1d 07 	lds	r21, 0x071D	; 0x80071d <PPM_factor+0x3>
    2232:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__mulsf3>
    2236:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__fixunssfsi>
    223a:	cb 01       	movw	r24, r22
    223c:	ff 90       	pop	r15
    223e:	ef 90       	pop	r14
    2240:	df 90       	pop	r13
    2242:	cf 90       	pop	r12
    2244:	bf 90       	pop	r11
    2246:	af 90       	pop	r10
    2248:	9f 90       	pop	r9
    224a:	8f 90       	pop	r8
    224c:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002900 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    2900:	0f 93       	push	r16
    2902:	1f 93       	push	r17
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	00 d0       	rcall	.+0      	; 0x290a <ADC_get_value+0xa>
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	9f ef       	ldi	r25, 0xFF	; 255
    2914:	f8 01       	movw	r30, r16
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    291a:	42 e0       	ldi	r20, 0x02	; 2
    291c:	be 01       	movw	r22, r28
    291e:	6f 5f       	subi	r22, 0xFF	; 255
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	8d e4       	ldi	r24, 0x4D	; 77
    2924:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2928:	81 11       	cpse	r24, r1
    292a:	0d c0       	rjmp	.+26     	; 0x2946 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	98 2f       	mov	r25, r24
    2932:	88 27       	eor	r24, r24
    2934:	2a 81       	ldd	r18, Y+2	; 0x02
	*value=calc_ppm_methane(bit_value);
    2936:	82 2b       	or	r24, r18
    2938:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <calc_ppm_methane>
    293c:	f8 01       	movw	r30, r16
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	01 c0       	rjmp	.+2      	; 0x2948 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2946:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

000036fa <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    36fa:	60 e4       	ldi	r22, 0x40	; 64
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	80 e8       	ldi	r24, 0x80	; 128
    3700:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <eeprom_read_byte>
    3704:	91 e0       	ldi	r25, 0x01	; 1
    3706:	81 11       	cpse	r24, r1
    3708:	01 c0       	rjmp	.+2      	; 0x370c <EM_has_deveui+0x12>
    370a:	90 e0       	ldi	r25, 0x00	; 0
}
    370c:	89 2f       	mov	r24, r25
    370e:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00003710 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    3710:	61 e4       	ldi	r22, 0x41	; 65
    3712:	70 e0       	ldi	r23, 0x00	; 0
    3714:	80 e8       	ldi	r24, 0x80	; 128
    3716:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <eeprom_read_byte>
    371a:	91 e0       	ldi	r25, 0x01	; 1
    371c:	81 11       	cpse	r24, r1
    371e:	01 c0       	rjmp	.+2      	; 0x3722 <EM_has_appeui+0x12>
    3720:	90 e0       	ldi	r25, 0x00	; 0
}
    3722:	89 2f       	mov	r24, r25
    3724:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00003726 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    3726:	62 e4       	ldi	r22, 0x42	; 66
    3728:	70 e0       	ldi	r23, 0x00	; 0
    372a:	80 e8       	ldi	r24, 0x80	; 128
    372c:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <eeprom_read_byte>
    3730:	91 e0       	ldi	r25, 0x01	; 1
    3732:	81 11       	cpse	r24, r1
    3734:	01 c0       	rjmp	.+2      	; 0x3738 <EM_has_appkey+0x12>
    3736:	90 e0       	ldi	r25, 0x00	; 0
}
    3738:	89 2f       	mov	r24, r25
    373a:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

0000308c <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    308c:	cf 92       	push	r12
    308e:	df 92       	push	r13
    3090:	ef 92       	push	r14
    3092:	6b 01       	movw	r12, r22
    3094:	e8 2e       	mov	r14, r24
    3096:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    309a:	40 97       	sbiw	r24, 0x10	; 16
    309c:	79 f4       	brne	.+30     	; 0x30bc <EM_set_deveui+0x30>
    309e:	20 e1       	ldi	r18, 0x10	; 16
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e0       	ldi	r20, 0x00	; 0
    30a4:	50 e0       	ldi	r21, 0x00	; 0
    30a6:	8e 2d       	mov	r24, r14
    30a8:	b6 01       	movw	r22, r12
    30aa:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <eeprom_update_block>
    30ae:	61 e0       	ldi	r22, 0x01	; 1
    30b0:	80 e4       	ldi	r24, 0x40	; 64
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	0e 94 9e 1a 	call	0x353c	; 0x353c <eeprom_update_byte>
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	01 c0       	rjmp	.+2      	; 0x30be <EM_set_deveui+0x32>
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	ef 90       	pop	r14
    30c0:	df 90       	pop	r13
    30c2:	cf 90       	pop	r12
    30c4:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

000032e8 <EM_get_deveui>:
    32e8:	0f 93       	push	r16
    32ea:	1f 93       	push	r17
    32ec:	cf 93       	push	r28
    32ee:	8c 01       	movw	r16, r24
    32f0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <EM_has_deveui>
    32f4:	c8 2f       	mov	r28, r24
    32f6:	88 23       	and	r24, r24
    32f8:	51 f0       	breq	.+20     	; 0x330e <EM_get_deveui+0x26>
    32fa:	20 e1       	ldi	r18, 0x10	; 16
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e0       	ldi	r20, 0x00	; 0
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	c8 01       	movw	r24, r16
    3306:	0e 94 8c 1a 	call	0x3518	; 0x3518 <eeprom_read_block>
    330a:	f8 01       	movw	r30, r16
    330c:	10 8a       	std	Z+16, r1	; 0x10
    330e:	8c 2f       	mov	r24, r28
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

000030c6 <EM_set_appeui>:
    30c6:	cf 92       	push	r12
    30c8:	df 92       	push	r13
    30ca:	ef 92       	push	r14
    30cc:	6b 01       	movw	r12, r22
    30ce:	e8 2e       	mov	r14, r24
    30d0:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    30d4:	40 97       	sbiw	r24, 0x10	; 16
    30d6:	79 f4       	brne	.+30     	; 0x30f6 <EM_set_appeui+0x30>
    30d8:	20 e1       	ldi	r18, 0x10	; 16
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e1       	ldi	r20, 0x10	; 16
    30de:	50 e0       	ldi	r21, 0x00	; 0
    30e0:	8e 2d       	mov	r24, r14
    30e2:	b6 01       	movw	r22, r12
    30e4:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <eeprom_update_block>
    30e8:	61 e0       	ldi	r22, 0x01	; 1
    30ea:	81 e4       	ldi	r24, 0x41	; 65
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0e 94 9e 1a 	call	0x353c	; 0x353c <eeprom_update_byte>
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	01 c0       	rjmp	.+2      	; 0x30f8 <EM_set_appeui+0x32>
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	ef 90       	pop	r14
    30fa:	df 90       	pop	r13
    30fc:	cf 90       	pop	r12
    30fe:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003318 <EM_get_appeui>:
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	cf 93       	push	r28
    331e:	8c 01       	movw	r16, r24
    3320:	0e 94 88 1b 	call	0x3710	; 0x3710 <EM_has_appeui>
    3324:	c8 2f       	mov	r28, r24
    3326:	88 23       	and	r24, r24
    3328:	51 f0       	breq	.+20     	; 0x333e <EM_get_appeui+0x26>
    332a:	20 e1       	ldi	r18, 0x10	; 16
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e1       	ldi	r20, 0x10	; 16
    3330:	50 e0       	ldi	r21, 0x00	; 0
    3332:	60 e0       	ldi	r22, 0x00	; 0
    3334:	c8 01       	movw	r24, r16
    3336:	0e 94 8c 1a 	call	0x3518	; 0x3518 <eeprom_read_block>
    333a:	f8 01       	movw	r30, r16
    333c:	10 8a       	std	Z+16, r1	; 0x10
    333e:	8c 2f       	mov	r24, r28
    3340:	cf 91       	pop	r28
    3342:	1f 91       	pop	r17
    3344:	0f 91       	pop	r16
    3346:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00003100 <EM_set_appkey>:
    3100:	cf 92       	push	r12
    3102:	df 92       	push	r13
    3104:	ef 92       	push	r14
    3106:	6b 01       	movw	r12, r22
    3108:	e8 2e       	mov	r14, r24
    310a:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    310e:	80 97       	sbiw	r24, 0x20	; 32
    3110:	79 f4       	brne	.+30     	; 0x3130 <EM_set_appkey+0x30>
    3112:	20 e2       	ldi	r18, 0x20	; 32
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e2       	ldi	r20, 0x20	; 32
    3118:	50 e0       	ldi	r21, 0x00	; 0
    311a:	8e 2d       	mov	r24, r14
    311c:	b6 01       	movw	r22, r12
    311e:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <eeprom_update_block>
    3122:	61 e0       	ldi	r22, 0x01	; 1
    3124:	82 e4       	ldi	r24, 0x42	; 66
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 94 9e 1a 	call	0x353c	; 0x353c <eeprom_update_byte>
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	01 c0       	rjmp	.+2      	; 0x3132 <EM_set_appkey+0x32>
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	ef 90       	pop	r14
    3134:	df 90       	pop	r13
    3136:	cf 90       	pop	r12
    3138:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00003348 <EM_get_appkey>:
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	cf 93       	push	r28
    334e:	8c 01       	movw	r16, r24
    3350:	0e 94 93 1b 	call	0x3726	; 0x3726 <EM_has_appkey>
    3354:	c8 2f       	mov	r28, r24
    3356:	88 23       	and	r24, r24
    3358:	51 f0       	breq	.+20     	; 0x336e <EM_get_appkey+0x26>
    335a:	20 e2       	ldi	r18, 0x20	; 32
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e2       	ldi	r20, 0x20	; 32
    3360:	50 e0       	ldi	r21, 0x00	; 0
    3362:	60 e0       	ldi	r22, 0x00	; 0
    3364:	c8 01       	movw	r24, r16
    3366:	0e 94 8c 1a 	call	0x3518	; 0x3518 <eeprom_read_block>
    336a:	f8 01       	movw	r30, r16
    336c:	10 a2       	std	Z+32, r1	; 0x20
    336e:	8c 2f       	mov	r24, r28
    3370:	cf 91       	pop	r28
    3372:	1f 91       	pop	r17
    3374:	0f 91       	pop	r16
    3376:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00003892 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    3892:	ab 01       	movw	r20, r22
    3894:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    3896:	83 e4       	ldi	r24, 0x43	; 67
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <eeprom_update_dword>
    389e:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

000035e4 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    35e4:	cf 93       	push	r28
    35e6:	df 93       	push	r29
    35e8:	ec 01       	movw	r28, r24
    35ea:	63 e4       	ldi	r22, 0x43	; 67
    35ec:	70 e0       	ldi	r23, 0x00	; 0
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	0e 94 88 1c 	call	0x3910	; 0x3910 <eeprom_read_dword>
    35f4:	68 83       	st	Y, r22
    35f6:	79 83       	std	Y+1, r23	; 0x01
    35f8:	8a 83       	std	Y+2, r24	; 0x02
    35fa:	9b 83       	std	Y+3, r25	; 0x03
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

000038a0 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    38a0:	ab 01       	movw	r20, r22
    38a2:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    38a4:	87 e4       	ldi	r24, 0x47	; 71
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <eeprom_update_dword>
    38ac:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00003602 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3602:	cf 93       	push	r28
    3604:	df 93       	push	r29
    3606:	ec 01       	movw	r28, r24
    3608:	67 e4       	ldi	r22, 0x47	; 71
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	0e 94 88 1c 	call	0x3910	; 0x3910 <eeprom_read_dword>
    3612:	68 83       	st	Y, r22
    3614:	79 83       	std	Y+1, r23	; 0x01
    3616:	8a 83       	std	Y+2, r24	; 0x02
    3618:	9b 83       	std	Y+3, r25	; 0x03
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

000038ae <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    38ae:	ab 01       	movw	r20, r22
    38b0:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    38b2:	8b e4       	ldi	r24, 0x4B	; 75
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <eeprom_update_dword>
    38ba:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00003620 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	ec 01       	movw	r28, r24
    3626:	6b e4       	ldi	r22, 0x4B	; 75
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	0e 94 88 1c 	call	0x3910	; 0x3910 <eeprom_read_dword>
    3630:	68 83       	st	Y, r22
    3632:	79 83       	std	Y+1, r23	; 0x01
    3634:	8a 83       	std	Y+2, r24	; 0x02
    3636:	9b 83       	std	Y+3, r25	; 0x03
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	08 95       	ret

Disassembly of section .text.EM_set_collections:

000038bc <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    38bc:	24 2f       	mov	r18, r20
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	44 e6       	ldi	r20, 0x64	; 100
    38c2:	50 e0       	ldi	r21, 0x00	; 0
    38c4:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <eeprom_update_block>
    38c8:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00003820 <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    3820:	26 2f       	mov	r18, r22
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	44 e6       	ldi	r20, 0x64	; 100
    3826:	50 e0       	ldi	r21, 0x00	; 0
    3828:	60 e0       	ldi	r22, 0x00	; 0
    382a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <eeprom_read_block>
    382e:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

0000392c <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    392c:	68 2f       	mov	r22, r24
    392e:	8f e4       	ldi	r24, 0x4F	; 79
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	0e 94 9e 1a 	call	0x353c	; 0x353c <eeprom_update_byte>
    3936:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00003938 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    3938:	6f e4       	ldi	r22, 0x4F	; 79
    393a:	70 e0       	ldi	r23, 0x00	; 0
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <eeprom_read_byte>
}
    3942:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

00003944 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    3944:	bc 01       	movw	r22, r24
    3946:	80 e5       	ldi	r24, 0x50	; 80
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	0e 94 c6 1c 	call	0x398c	; 0x398c <eeprom_update_word>
    394e:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

00003950 <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    3950:	60 e5       	ldi	r22, 0x50	; 80
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	0e 94 8f 1c 	call	0x391e	; 0x391e <eeprom_read_word>
}
    395a:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

0000395c <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    395c:	68 2f       	mov	r22, r24
    395e:	82 e5       	ldi	r24, 0x52	; 82
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	0e 94 9e 1a 	call	0x353c	; 0x353c <eeprom_update_byte>
    3966:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

00003968 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    3968:	62 e5       	ldi	r22, 0x52	; 82
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	80 e0       	ldi	r24, 0x00	; 0
    396e:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <eeprom_read_byte>
    3972:	08 95       	ret

Disassembly of section .text.LM_reset_module:

000039f0 <LM_reset_module>:
bool LM_is_free(){
	return busy==false;
}

LM_STATUS LM_reset_module(){
	return util_reset_module();
    39f0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <util_reset_module>
}
    39f4:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

000039f6 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    39f6:	0e 94 9d 18 	call	0x313a	; 0x313a <util_lora_forward_msg>
    39fa:	08 95       	ret

Disassembly of section .text.attach_ending:

0000367a <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    367a:	fc 01       	movw	r30, r24
    367c:	01 90       	ld	r0, Z+
    367e:	00 20       	and	r0, r0
    3680:	e9 f7       	brne	.-6      	; 0x367c <attach_ending+0x2>
    3682:	cf 01       	movw	r24, r30
    3684:	23 e0       	ldi	r18, 0x03	; 3
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	41 e3       	ldi	r20, 0x31	; 49
    368a:	54 e0       	ldi	r21, 0x04	; 4
    368c:	60 e0       	ldi	r22, 0x00	; 0
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
    3694:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

00002de8 <util_strbeginswith>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    2de8:	6f 92       	push	r6
    2dea:	7f 92       	push	r7
    2dec:	8f 92       	push	r8
    2dee:	cf 92       	push	r12
    2df0:	df 92       	push	r13
    2df2:	ef 92       	push	r14
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	3b 01       	movw	r6, r22
    2dfa:	88 2e       	mov	r8, r24
    2dfc:	69 01       	movw	r12, r18
    2dfe:	e4 2e       	mov	r14, r20
    2e00:	84 2f       	mov	r24, r20
    2e02:	b9 01       	movw	r22, r18
    2e04:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    2e08:	8c 01       	movw	r16, r24
    2e0a:	4e 2d       	mov	r20, r14
    2e0c:	96 01       	movw	r18, r12
    2e0e:	88 2d       	mov	r24, r8
    2e10:	b3 01       	movw	r22, r6
    2e12:	0e 94 c3 13 	call	0x2786	; 0x2786 <strncmp>
    2e16:	21 e0       	ldi	r18, 0x01	; 1
    2e18:	89 2b       	or	r24, r25
    2e1a:	09 f0       	breq	.+2      	; 0x2e1e <util_strbeginswith+0x36>
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	82 2f       	mov	r24, r18
    2e20:	1f 91       	pop	r17
    2e22:	0f 91       	pop	r16
    2e24:	ef 90       	pop	r14
    2e26:	df 90       	pop	r13
    2e28:	cf 90       	pop	r12
    2e2a:	8f 90       	pop	r8
    2e2c:	7f 90       	pop	r7
    2e2e:	6f 90       	pop	r6
    2e30:	08 95       	ret

Disassembly of section .text.util_reset_module:

00002e7a <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    2e7a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <rn2483_reset_active>
    2e7e:	2f ef       	ldi	r18, 0xFF	; 255
    2e80:	89 e6       	ldi	r24, 0x69	; 105
    2e82:	98 e1       	ldi	r25, 0x18	; 24
    2e84:	21 50       	subi	r18, 0x01	; 1
    2e86:	80 40       	sbci	r24, 0x00	; 0
    2e88:	90 40       	sbci	r25, 0x00	; 0
    2e8a:	e1 f7       	brne	.-8      	; 0x2e84 <util_reset_module+0xa>
    2e8c:	00 c0       	rjmp	.+0      	; 0x2e8e <util_reset_module+0x14>
    2e8e:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    2e90:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    2e94:	0e 94 34 1c 	call	0x3868	; 0x3868 <uart0_hal_message_ready>
    2e98:	88 23       	and	r24, r24
    2e9a:	e1 f3       	breq	.-8      	; 0x2e94 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    2e9c:	80 e9       	ldi	r24, 0x90	; 144
    2e9e:	92 e0       	ldi	r25, 0x02	; 2
    2ea0:	0e 94 17 1a 	call	0x342e	; 0x342e <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    2ea4:	60 e9       	ldi	r22, 0x90	; 144
    2ea6:	72 e0       	ldi	r23, 0x02	; 2
    2ea8:	80 e8       	ldi	r24, 0x80	; 128
    2eaa:	2d e0       	ldi	r18, 0x0D	; 13
    2eac:	35 e0       	ldi	r19, 0x05	; 5
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <util_strbeginswith>
    2eb4:	88 23       	and	r24, r24
    2eb6:	11 f0       	breq	.+4      	; 0x2ebc <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    2ebe:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

0000313a <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    3140:	ab 01       	movw	r20, r22
    3142:	68 2f       	mov	r22, r24
    3144:	80 e9       	ldi	r24, 0x90	; 144
    3146:	92 e0       	ldi	r25, 0x02	; 2
    3148:	0e 94 2e 1b 	call	0x365c	; 0x365c <strcpy>
	attach_ending(lm_msg);
    314c:	80 e9       	ldi	r24, 0x90	; 144
    314e:	92 e0       	ldi	r25, 0x02	; 2
    3150:	0e 94 3d 1b 	call	0x367a	; 0x367a <attach_ending>
	uart0_hal_send_string(lm_msg);
    3154:	60 e9       	ldi	r22, 0x90	; 144
    3156:	72 e0       	ldi	r23, 0x02	; 2
    3158:	80 e8       	ldi	r24, 0x80	; 128
    315a:	0e 94 8e 13 	call	0x271c	; 0x271c <uart0_hal_send_string>
	
	while(!uart0_hal_message_ready());
    315e:	0e 94 34 1c 	call	0x3868	; 0x3868 <uart0_hal_message_ready>
    3162:	88 23       	and	r24, r24
    3164:	e1 f3       	breq	.-8      	; 0x315e <util_lora_forward_msg+0x24>
	uart0_hal_read_message_as_str(res);
    3166:	ce 01       	movw	r24, r28
    3168:	0e 94 17 1a 	call	0x342e	; 0x342e <uart0_hal_read_message_as_str>
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00003696 <bytes_2_uint>:
	TC1_HAL_start();
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    3696:	fc 01       	movw	r30, r24
    3698:	54 81       	ldd	r21, Z+4	; 0x04
    369a:	43 81       	ldd	r20, Z+3	; 0x03
    369c:	31 81       	ldd	r19, Z+1	; 0x01
    369e:	20 81       	ld	r18, Z
    36a0:	65 2f       	mov	r22, r21
    36a2:	74 2f       	mov	r23, r20
    36a4:	83 2f       	mov	r24, r19
    36a6:	92 2f       	mov	r25, r18
    36a8:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__fixunssfsi>
    36ac:	cb 01       	movw	r24, r22
    36ae:	08 95       	ret

Disassembly of section .text.init_measurement:

00003172 <init_measurement>:
    3172:	25 e0       	ldi	r18, 0x05	; 5
    3174:	44 e1       	ldi	r20, 0x14	; 20
    3176:	55 e0       	ldi	r21, 0x05	; 5
    3178:	60 e0       	ldi	r22, 0x00	; 0
    317a:	81 e6       	ldi	r24, 0x61	; 97
    317c:	0e 94 00 1c 	call	0x3800	; 0x3800 <TWI_API_write_data_stop>
    3180:	81 11       	cpse	r24, r1
    3182:	0f c0       	rjmp	.+30     	; 0x31a2 <init_measurement+0x30>
    3184:	25 e0       	ldi	r18, 0x05	; 5
    3186:	49 e1       	ldi	r20, 0x19	; 25
    3188:	55 e0       	ldi	r21, 0x05	; 5
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	81 e6       	ldi	r24, 0x61	; 97
    318e:	0e 94 00 1c 	call	0x3800	; 0x3800 <TWI_API_write_data_stop>
    3192:	81 11       	cpse	r24, r1
    3194:	08 c0       	rjmp	.+16     	; 0x31a6 <init_measurement+0x34>
    3196:	0e 94 cc 1c 	call	0x3998	; 0x3998 <SCD30_HAL_data_ready>
    319a:	88 23       	and	r24, r24
    319c:	e1 f3       	breq	.-8      	; 0x3196 <init_measurement+0x24>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	08 95       	ret
    31a2:	82 e0       	ldi	r24, 0x02	; 2
    31a4:	08 95       	ret
    31a6:	82 e0       	ldi	r24, 0x02	; 2
    31a8:	08 95       	ret

Disassembly of section .text.validate_data:

00003284 <validate_data>:
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	ec 01       	movw	r28, r24
    328a:	62 e0       	ldi	r22, 0x02	; 2
    328c:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <calc_crc8>
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	89 13       	cpse	r24, r25
    3294:	0a c0       	rjmp	.+20     	; 0x32aa <validate_data+0x26>
    3296:	62 e0       	ldi	r22, 0x02	; 2
    3298:	ce 01       	movw	r24, r28
    329a:	03 96       	adiw	r24, 0x03	; 3
    329c:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <calc_crc8>
    32a0:	9d 81       	ldd	r25, Y+5	; 0x05
    32a2:	89 17       	cp	r24, r25
    32a4:	21 f0       	breq	.+8      	; 0x32ae <validate_data+0x2a>
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	03 c0       	rjmp	.+6      	; 0x32b0 <validate_data+0x2c>
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	01 c0       	rjmp	.+2      	; 0x32b0 <validate_data+0x2c>
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	08 95       	ret

Disassembly of section .text.read_value:

00001fe6 <read_value>:
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <read_value+0xa>
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <read_value+0xc>
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <read_value+0xe>
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	8c 01       	movw	r16, r24
    1ffa:	8f ef       	ldi	r24, 0xFF	; 255
    1ffc:	9f ef       	ldi	r25, 0xFF	; 255
    1ffe:	f8 01       	movw	r30, r16
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	80 83       	st	Z, r24
    2004:	0e 94 cc 1c 	call	0x3998	; 0x3998 <SCD30_HAL_data_ready>
    2008:	81 11       	cpse	r24, r1
    200a:	07 c0       	rjmp	.+14     	; 0x201a <read_value+0x34>
    200c:	8e ef       	ldi	r24, 0xFE	; 254
    200e:	9f ef       	ldi	r25, 0xFF	; 255
    2010:	f8 01       	movw	r30, r16
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	2c c0       	rjmp	.+88     	; 0x2072 <read_value+0x8c>
    201a:	22 e0       	ldi	r18, 0x02	; 2
    201c:	4e e1       	ldi	r20, 0x1E	; 30
    201e:	55 e0       	ldi	r21, 0x05	; 5
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	81 e6       	ldi	r24, 0x61	; 97
    2024:	0e 94 00 1c 	call	0x3800	; 0x3800 <TWI_API_write_data_stop>
    2028:	81 11       	cpse	r24, r1
    202a:	1e c0       	rjmp	.+60     	; 0x2068 <read_value+0x82>
    202c:	8f e3       	ldi	r24, 0x3F	; 63
    202e:	9f e1       	ldi	r25, 0x1F	; 31
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <read_value+0x4a>
    2034:	00 c0       	rjmp	.+0      	; 0x2036 <read_value+0x50>
    2036:	00 00       	nop
    2038:	46 e0       	ldi	r20, 0x06	; 6
    203a:	be 01       	movw	r22, r28
    203c:	6f 5f       	subi	r22, 0xFF	; 255
    203e:	7f 4f       	sbci	r23, 0xFF	; 255
    2040:	81 e6       	ldi	r24, 0x61	; 97
    2042:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <TWI_API_read_data_ack_end_nack_stop>
    2046:	81 11       	cpse	r24, r1
    2048:	11 c0       	rjmp	.+34     	; 0x206c <read_value+0x86>
    204a:	ce 01       	movw	r24, r28
    204c:	01 96       	adiw	r24, 0x01	; 1
    204e:	0e 94 42 19 	call	0x3284	; 0x3284 <validate_data>
    2052:	88 23       	and	r24, r24
    2054:	69 f0       	breq	.+26     	; 0x2070 <read_value+0x8a>
    2056:	ce 01       	movw	r24, r28
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	0e 94 4b 1b 	call	0x3696	; 0x3696 <bytes_2_uint>
    205e:	f8 01       	movw	r30, r16
    2060:	91 83       	std	Z+1, r25	; 0x01
    2062:	80 83       	st	Z, r24
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <read_value+0x8c>
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	03 c0       	rjmp	.+6      	; 0x2072 <read_value+0x8c>
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	01 c0       	rjmp	.+2      	; 0x2072 <read_value+0x8c>
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	26 96       	adiw	r28, 0x06	; 6
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00003560 <SCD30_sensor_on>:
    3560:	0e 94 2d 1c 	call	0x385a	; 0x385a <SCD30_HAL_init>
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	0e 94 bd 1b 	call	0x377a	; 0x377a <PM_HAL_SCD30_power>
    356a:	2f ef       	ldi	r18, 0xFF	; 255
    356c:	83 ed       	ldi	r24, 0xD3	; 211
    356e:	90 e3       	ldi	r25, 0x30	; 48
    3570:	21 50       	subi	r18, 0x01	; 1
    3572:	80 40       	sbci	r24, 0x00	; 0
    3574:	90 40       	sbci	r25, 0x00	; 0
    3576:	e1 f7       	brne	.-8      	; 0x3570 <SCD30_sensor_on+0x10>
    3578:	00 c0       	rjmp	.+0      	; 0x357a <SCD30_sensor_on+0x1a>
    357a:	00 00       	nop
    357c:	0e 94 b9 18 	call	0x3172	; 0x3172 <init_measurement>
    3580:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

000036b0 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29
    36b4:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    36b6:	0e 94 cc 1c 	call	0x3998	; 0x3998 <SCD30_HAL_data_ready>
    36ba:	88 23       	and	r24, r24
    36bc:	e1 f3       	breq	.-8      	; 0x36b6 <SCD30_get_reading+0x6>
	
	return read_value(value);
    36be:	ce 01       	movw	r24, r28
    36c0:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <read_value>
}
    36c4:	df 91       	pop	r29
    36c6:	cf 91       	pop	r28
    36c8:	08 95       	ret

Disassembly of section .text.parse_cmd:

0000347e <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    347e:	fc 01       	movw	r30, r24
    3480:	80 81       	ld	r24, Z
    3482:	82 37       	cpi	r24, 0x72	; 114
    3484:	41 f0       	breq	.+16     	; 0x3496 <parse_cmd+0x18>
	if(msg[0]=='w') return CONF_WRTIE;
    3486:	87 37       	cpi	r24, 0x77	; 119
    3488:	41 f0       	breq	.+16     	; 0x349a <parse_cmd+0x1c>
	if(msg[0]=='c') return CONF_CONNECT;
    348a:	83 36       	cpi	r24, 0x63	; 99
    348c:	41 f0       	breq	.+16     	; 0x349e <parse_cmd+0x20>
	if(msg[0]=='s') return CONF_SAMPLE;
    348e:	83 37       	cpi	r24, 0x73	; 115
    3490:	41 f4       	brne	.+16     	; 0x34a2 <parse_cmd+0x24>
    3492:	8a e0       	ldi	r24, 0x0A	; 10
    3494:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3496:	87 e0       	ldi	r24, 0x07	; 7
    3498:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    349a:	88 e0       	ldi	r24, 0x08	; 8
    349c:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    349e:	89 e0       	ldi	r24, 0x09	; 9
    34a0:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
	
	return CONF_NOT_VALID;
    34a2:	85 e0       	ldi	r24, 0x05	; 5
}
    34a4:	08 95       	ret

Disassembly of section .text.validate_cmd:

00002956 <validate_cmd>:

static bool validate_cmd(char msg[]){
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    295c:	bc 01       	movw	r22, r24
    295e:	80 e8       	ldi	r24, 0x80	; 128
    2960:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    2964:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2966:	fc 01       	movw	r30, r24
    2968:	31 97       	sbiw	r30, 0x01	; 1
    296a:	ec 0f       	add	r30, r28
    296c:	fd 1f       	adc	r31, r29
    296e:	80 81       	ld	r24, Z
    2970:	80 32       	cpi	r24, 0x20	; 32
    2972:	b1 f0       	breq	.+44     	; 0x29a0 <validate_cmd+0x4a>
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	0d c0       	rjmp	.+26     	; 0x2996 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    297c:	fe 01       	movw	r30, r28
    297e:	e2 0f       	add	r30, r18
    2980:	f3 1f       	adc	r31, r19
    2982:	90 81       	ld	r25, Z
    2984:	90 32       	cpi	r25, 0x20	; 32
    2986:	21 f4       	brne	.+8      	; 0x2990 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    2988:	41 11       	cpse	r20, r1
    298a:	0c c0       	rjmp	.+24     	; 0x29a4 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    298c:	41 e0       	ldi	r20, 0x01	; 1
    298e:	01 c0       	rjmp	.+2      	; 0x2992 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    2990:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    2992:	2f 5f       	subi	r18, 0xFF	; 255
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	26 17       	cp	r18, r22
    2998:	37 07       	cpc	r19, r23
    299a:	80 f3       	brcs	.-32     	; 0x297c <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	03 c0       	rjmp	.+6      	; 0x29a6 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	01 c0       	rjmp	.+2      	; 0x29a6 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    29a4:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	08 95       	ret

Disassembly of section .text.CONF_enter:

00001556 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    1556:	cf 93       	push	r28
	uart1_hal_init();
    1558:	0e 94 28 18 	call	0x3050	; 0x3050 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    155c:	c0 e0       	ldi	r28, 0x00	; 0
    155e:	0d c0       	rjmp	.+26     	; 0x157a <CONF_enter+0x24>
				uart1_hal_send_string("Setting modules up... Please wait");
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    1560:	c2 e0       	ldi	r28, 0x02	; 2
    1562:	0b c0       	rjmp	.+22     	; 0x157a <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    1564:	c5 e0       	ldi	r28, 0x05	; 5
    1566:	09 c0       	rjmp	.+18     	; 0x157a <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    1568:	c6 e0       	ldi	r28, 0x06	; 6
    156a:	07 c0       	rjmp	.+14     	; 0x157a <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    156c:	c5 e0       	ldi	r28, 0x05	; 5
    156e:	05 c0       	rjmp	.+10     	; 0x157a <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1570:	c5 e0       	ldi	r28, 0x05	; 5
    1572:	03 c0       	rjmp	.+6      	; 0x157a <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    1574:	c5 e0       	ldi	r28, 0x05	; 5
    1576:	01 c0       	rjmp	.+2      	; 0x157a <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1578:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    157a:	ec 2f       	mov	r30, r28
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	ec 30       	cpi	r30, 0x0C	; 12
    1580:	f1 05       	cpc	r31, r1
    1582:	d8 f7       	brcc	.-10     	; 0x157a <CONF_enter+0x24>
    1584:	e2 5c       	subi	r30, 0xC2	; 194
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    158c:	6d e0       	ldi	r22, 0x0D	; 13
    158e:	73 e0       	ldi	r23, 0x03	; 3
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    1596:	63 e3       	ldi	r22, 0x33	; 51
    1598:	73 e0       	ldi	r23, 0x03	; 3
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
				if(!init_methane_SCD30()){
    15a0:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <init_methane_SCD30>
    15a4:	81 11       	cpse	r24, r1
    15a6:	dc cf       	rjmp	.-72     	; 0x1560 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    15a8:	65 e5       	ldi	r22, 0x55	; 85
    15aa:	73 e0       	ldi	r23, 0x03	; 3
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
					state=CONF_EXIT;
    15b2:	c4 e0       	ldi	r28, 0x04	; 4
    15b4:	e2 cf       	rjmp	.-60     	; 0x157a <CONF_enter+0x24>
				}
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    15b6:	0e 94 3b 1c 	call	0x3876	; 0x3876 <uart1_hal_message_ready>
    15ba:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    15bc:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    15be:	0e 94 42 1c 	call	0x3884	; 0x3884 <uart1_hal_rx_full>
    15c2:	81 11       	cpse	r24, r1
    15c4:	cf cf       	rjmp	.-98     	; 0x1564 <CONF_enter+0xe>
    15c6:	d9 cf       	rjmp	.-78     	; 0x157a <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    15c8:	80 e2       	ldi	r24, 0x20	; 32
    15ca:	94 e0       	ldi	r25, 0x04	; 4
    15cc:	0e 94 2b 1a 	call	0x3456	; 0x3456 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    15d0:	80 e2       	ldi	r24, 0x20	; 32
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	0e 94 ab 14 	call	0x2956	; 0x2956 <validate_cmd>
    15d8:	88 23       	and	r24, r24
    15da:	31 f2       	breq	.-116    	; 0x1568 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    15dc:	80 e2       	ldi	r24, 0x20	; 32
    15de:	94 e0       	ldi	r25, 0x04	; 4
    15e0:	0e 94 3f 1a 	call	0x347e	; 0x347e <parse_cmd>
    15e4:	c8 2f       	mov	r28, r24
    15e6:	c9 cf       	rjmp	.-110    	; 0x157a <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    15e8:	60 e2       	ldi	r22, 0x20	; 32
    15ea:	74 e0       	ldi	r23, 0x04	; 4
    15ec:	80 e8       	ldi	r24, 0x80	; 128
    15ee:	48 e5       	ldi	r20, 0x58	; 88
    15f0:	53 e0       	ldi	r21, 0x03	; 3
    15f2:	0e 94 a0 07 	call	0xf40	; 0xf40 <handle_read>
    15f6:	88 23       	and	r24, r24
    15f8:	09 f4       	brne	.+2      	; 0x15fc <CONF_enter+0xa6>
    15fa:	b8 cf       	rjmp	.-144    	; 0x156c <CONF_enter+0x16>
					state=CONF_REPLY;
    15fc:	cb e0       	ldi	r28, 0x0B	; 11
    15fe:	bd cf       	rjmp	.-134    	; 0x157a <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    1600:	60 e2       	ldi	r22, 0x20	; 32
    1602:	74 e0       	ldi	r23, 0x04	; 4
    1604:	80 e8       	ldi	r24, 0x80	; 128
    1606:	48 e5       	ldi	r20, 0x58	; 88
    1608:	53 e0       	ldi	r21, 0x03	; 3
    160a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <handle_write>
    160e:	88 23       	and	r24, r24
    1610:	09 f4       	brne	.+2      	; 0x1614 <CONF_enter+0xbe>
    1612:	ae cf       	rjmp	.-164    	; 0x1570 <CONF_enter+0x1a>
					state=CONF_REPLY;
    1614:	cb e0       	ldi	r28, 0x0B	; 11
    1616:	b1 cf       	rjmp	.-158    	; 0x157a <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    1618:	60 e2       	ldi	r22, 0x20	; 32
    161a:	74 e0       	ldi	r23, 0x04	; 4
    161c:	80 e8       	ldi	r24, 0x80	; 128
    161e:	0e 94 d6 14 	call	0x29ac	; 0x29ac <CONNECT>
    1622:	88 23       	and	r24, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <CONF_enter+0xd2>
    1626:	a6 cf       	rjmp	.-180    	; 0x1574 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    1628:	c2 e0       	ldi	r28, 0x02	; 2
    162a:	a7 cf       	rjmp	.-178    	; 0x157a <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    162c:	60 e2       	ldi	r22, 0x20	; 32
    162e:	74 e0       	ldi	r23, 0x04	; 4
    1630:	80 e8       	ldi	r24, 0x80	; 128
    1632:	48 e5       	ldi	r20, 0x58	; 88
    1634:	53 e0       	ldi	r21, 0x03	; 3
    1636:	0e 94 90 10 	call	0x2120	; 0x2120 <handle_sample>
    163a:	88 23       	and	r24, r24
    163c:	09 f4       	brne	.+2      	; 0x1640 <CONF_enter+0xea>
    163e:	9c cf       	rjmp	.-200    	; 0x1578 <CONF_enter+0x22>
					state=CONF_REPLY;
    1640:	cb e0       	ldi	r28, 0x0B	; 11
    1642:	9b cf       	rjmp	.-202    	; 0x157a <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    1644:	68 e5       	ldi	r22, 0x58	; 88
    1646:	73 e0       	ldi	r23, 0x03	; 3
    1648:	80 e8       	ldi	r24, 0x80	; 128
    164a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    164e:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1650:	94 cf       	rjmp	.-216    	; 0x157a <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    1652:	64 e7       	ldi	r22, 0x74	; 116
    1654:	73 e0       	ldi	r23, 0x03	; 3
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    165c:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    165e:	8d cf       	rjmp	.-230    	; 0x157a <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    1660:	6e e7       	ldi	r22, 0x7E	; 126
    1662:	73 e0       	ldi	r23, 0x03	; 3
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    166a:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    166c:	86 cf       	rjmp	.-244    	; 0x157a <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    166e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    1672:	6b e8       	ldi	r22, 0x8B	; 139
    1674:	73 e0       	ldi	r23, 0x03	; 3
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    167c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    167e:	7d cf       	rjmp	.-262    	; 0x157a <CONF_enter+0x24>
			
			case CONF_EXIT:
				return;
		}
	}
}
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

000034ce <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    34ce:	0f 93       	push	r16
    34d0:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0){
    34d2:	bc 01       	movw	r22, r24
    34d4:	80 e8       	ldi	r24, 0x80	; 128
    34d6:	04 e0       	ldi	r16, 0x04	; 4
    34d8:	10 e0       	ldi	r17, 0x00	; 0
    34da:	2f e9       	ldi	r18, 0x9F	; 159
    34dc:	34 e0       	ldi	r19, 0x04	; 4
    34de:	40 e0       	ldi	r20, 0x00	; 0
    34e0:	0e 94 c3 13 	call	0x2786	; 0x2786 <strncmp>
    34e4:	89 2b       	or	r24, r25
    34e6:	11 f4       	brne	.+4      	; 0x34ec <CON_RN2483_parse+0x1e>
		return CL_EXIT;
    34e8:	84 e0       	ldi	r24, 0x04	; 4
    34ea:	01 c0       	rjmp	.+2      	; 0x34ee <CON_RN2483_parse+0x20>
	}
	return CL_FORWARD;
    34ec:	83 e0       	ldi	r24, 0x03	; 3
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	08 95       	ret

Disassembly of section .text.CON_RN2483:

000018cc <CON_RN2483>:
	}else{
		return false;
	}
}

static bool CON_RN2483(){
    18cc:	6f 92       	push	r6
    18ce:	7f 92       	push	r7
    18d0:	8f 92       	push	r8
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ef 92       	push	r14
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    18dc:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    18de:	c2 30       	cpi	r28, 0x02	; 2
    18e0:	19 f1       	breq	.+70     	; 0x1928 <CON_RN2483+0x5c>
    18e2:	28 f4       	brcc	.+10     	; 0x18ee <CON_RN2483+0x22>
    18e4:	cc 23       	and	r28, r28
    18e6:	49 f0       	breq	.+18     	; 0x18fa <CON_RN2483+0x2e>
    18e8:	c1 30       	cpi	r28, 0x01	; 1
    18ea:	a1 f0       	breq	.+40     	; 0x1914 <CON_RN2483+0x48>
    18ec:	f8 cf       	rjmp	.-16     	; 0x18de <CON_RN2483+0x12>
    18ee:	c3 30       	cpi	r28, 0x03	; 3
    18f0:	09 f1       	breq	.+66     	; 0x1934 <CON_RN2483+0x68>
    18f2:	c4 30       	cpi	r28, 0x04	; 4
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <CON_RN2483+0x2c>
    18f6:	4d c0       	rjmp	.+154    	; 0x1992 <CON_RN2483+0xc6>
    18f8:	f2 cf       	rjmp	.-28     	; 0x18de <CON_RN2483+0x12>
			case CL_INIT:
				uart0_hal_init();
    18fa:	0e 94 0a 18 	call	0x3014	; 0x3014 <uart0_hal_init>
				rn2483_init();
    18fe:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <rn2483_init>
				LM_reset_module();
    1902:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1906:	64 ea       	ldi	r22, 0xA4	; 164
    1908:	74 e0       	ldi	r23, 0x04	; 4
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
				state=CL_READ_MSG;
    1910:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1912:	e5 cf       	rjmp	.-54     	; 0x18de <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1914:	0e 94 3b 1c 	call	0x3876	; 0x3876 <uart1_hal_message_ready>
    1918:	88 23       	and	r24, r24
    191a:	09 f3       	breq	.-62     	; 0x18de <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    191c:	80 e2       	ldi	r24, 0x20	; 32
    191e:	94 e0       	ldi	r25, 0x04	; 4
    1920:	0e 94 2b 1a 	call	0x3456	; 0x3456 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1924:	c2 e0       	ldi	r28, 0x02	; 2
    1926:	db cf       	rjmp	.-74     	; 0x18de <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    1928:	80 e2       	ldi	r24, 0x20	; 32
    192a:	94 e0       	ldi	r25, 0x04	; 4
    192c:	0e 94 67 1a 	call	0x34ce	; 0x34ce <CON_RN2483_parse>
    1930:	c8 2f       	mov	r28, r24
			break;
    1932:	d5 cf       	rjmp	.-86     	; 0x18de <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1934:	80 e2       	ldi	r24, 0x20	; 32
    1936:	94 e0       	ldi	r25, 0x04	; 4
    1938:	6c 01       	movw	r12, r24
    193a:	20 e8       	ldi	r18, 0x80	; 128
    193c:	e2 2e       	mov	r14, r18
    193e:	2f 93       	push	r18
    1940:	df 92       	push	r13
    1942:	8f 93       	push	r24
    1944:	8a ed       	ldi	r24, 0xDA	; 218
    1946:	94 e0       	ldi	r25, 0x04	; 4
    1948:	a0 e0       	ldi	r26, 0x00	; 0
    194a:	af 93       	push	r26
    194c:	9f 93       	push	r25
    194e:	8f 93       	push	r24
    1950:	c8 e5       	ldi	r28, 0x58	; 88
    1952:	d3 e0       	ldi	r29, 0x03	; 3
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sprintf>
				uart1_hal_send_string(cnf_reply);
    195c:	3e 01       	movw	r6, r28
    195e:	20 e8       	ldi	r18, 0x80	; 128
    1960:	82 2e       	mov	r8, r18
    1962:	88 2d       	mov	r24, r8
    1964:	b3 01       	movw	r22, r6
    1966:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    196a:	ae 01       	movw	r20, r28
    196c:	6c 2d       	mov	r22, r12
    196e:	7d 2d       	mov	r23, r13
    1970:	8e 2d       	mov	r24, r14
    1972:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    1976:	88 2d       	mov	r24, r8
    1978:	b3 01       	movw	r22, r6
    197a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    197e:	8d b7       	in	r24, 0x3d	; 61
    1980:	9e b7       	in	r25, 0x3e	; 62
    1982:	08 96       	adiw	r24, 0x08	; 8
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	9e bf       	out	0x3e, r25	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    198e:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1990:	a6 cf       	rjmp	.-180    	; 0x18de <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    1992:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    1996:	60 ee       	ldi	r22, 0xE0	; 224
    1998:	74 e0       	ldi	r23, 0x04	; 4
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	8f 90       	pop	r8
    19ae:	7f 90       	pop	r7
    19b0:	6f 90       	pop	r6
    19b2:	08 95       	ret

Disassembly of section .text.CONNECT:

000029ac <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	64 97       	sbiw	r28, 0x14	; 20
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    29c0:	21 e0       	ldi	r18, 0x01	; 1
    29c2:	ae 01       	movw	r20, r28
    29c4:	4f 5f       	subi	r20, 0xFF	; 255
    29c6:	5f 4f       	sbci	r21, 0xFF	; 255
    29c8:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    29cc:	88 23       	and	r24, r24
    29ce:	79 f0       	breq	.+30     	; 0x29ee <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    29d0:	be 01       	movw	r22, r28
    29d2:	6f 5f       	subi	r22, 0xFF	; 255
    29d4:	7f 4f       	sbci	r23, 0xFF	; 255
    29d6:	80 e8       	ldi	r24, 0x80	; 128
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	35 e0       	ldi	r19, 0x05	; 5
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    29e2:	89 2b       	or	r24, r25
    29e4:	19 f4       	brne	.+6      	; 0x29ec <CONNECT+0x40>
		return CON_RN2483();
    29e6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <CON_RN2483>
    29ea:	01 c0       	rjmp	.+2      	; 0x29ee <CONNECT+0x42>
	}else{
		return false;
    29ec:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    29ee:	64 96       	adiw	r28, 0x14	; 20
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	08 95       	ret

Disassembly of section .text.read_cols:

00001d16 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    1d16:	cf 92       	push	r12
    1d18:	df 92       	push	r13
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	a3 97       	sbiw	r28, 0x23	; 35
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1d36:	63 e2       	ldi	r22, 0x23	; 35
    1d38:	ce 01       	movw	r24, r28
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	0e 94 10 1c 	call	0x3820	; 0x3820 <EM_get_collections>
	res[0]='\0';
    1d40:	f7 01       	movw	r30, r14
    1d42:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    1d44:	10 e0       	ldi	r17, 0x00	; 0
    1d46:	35 c0       	rjmp	.+106    	; 0x1db2 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    1d48:	81 2f       	mov	r24, r17
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	e8 0f       	add	r30, r24
    1d58:	f9 1f       	adc	r31, r25
    1d5a:	21 e0       	ldi	r18, 0x01	; 1
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	2c 0f       	add	r18, r28
    1d60:	3d 1f       	adc	r19, r29
    1d62:	e2 0f       	add	r30, r18
    1d64:	f3 1f       	adc	r31, r19
    1d66:	23 81       	ldd	r18, Z+3	; 0x03
    1d68:	2f 93       	push	r18
    1d6a:	22 81       	ldd	r18, Z+2	; 0x02
    1d6c:	2f 93       	push	r18
    1d6e:	21 81       	ldd	r18, Z+1	; 0x01
    1d70:	2f 93       	push	r18
    1d72:	20 81       	ld	r18, Z
    1d74:	2f 93       	push	r18
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	9f 93       	push	r25
    1d7a:	8f 93       	push	r24
    1d7c:	84 ef       	ldi	r24, 0xF4	; 244
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	a0 e0       	ldi	r26, 0x00	; 0
    1d82:	af 93       	push	r26
    1d84:	9f 93       	push	r25
    1d86:	8f 93       	push	r24
    1d88:	0f 2e       	mov	r0, r31
    1d8a:	fc ea       	ldi	r31, 0xAC	; 172
    1d8c:	cf 2e       	mov	r12, r31
    1d8e:	f6 e0       	ldi	r31, 0x06	; 6
    1d90:	df 2e       	mov	r13, r31
    1d92:	f0 2d       	mov	r31, r0
    1d94:	df 92       	push	r13
    1d96:	cf 92       	push	r12
    1d98:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sprintf>
		strcat(res, arg);
    1d9c:	a6 01       	movw	r20, r12
    1d9e:	60 e8       	ldi	r22, 0x80	; 128
    1da0:	c7 01       	movw	r24, r14
    1da2:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    1da6:	1f 5f       	subi	r17, 0xFF	; 255
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	17 30       	cpi	r17, 0x07	; 7
    1db4:	48 f2       	brcs	.-110    	; 0x1d48 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    1db6:	a3 96       	adiw	r28, 0x23	; 35
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	1f 91       	pop	r17
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	df 90       	pop	r13
    1dce:	cf 90       	pop	r12
    1dd0:	08 95       	ret

Disassembly of section .text.write_deveui:

000023e8 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    23e8:	cf 92       	push	r12
    23ea:	df 92       	push	r13
    23ec:	ef 92       	push	r14
    23ee:	0f 93       	push	r16
    23f0:	1f 93       	push	r17
    23f2:	cf 93       	push	r28
    23f4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    23f6:	22 e0       	ldi	r18, 0x02	; 2
    23f8:	4c ea       	ldi	r20, 0xAC	; 172
    23fa:	56 e0       	ldi	r21, 0x06	; 6
    23fc:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    2400:	c8 2f       	mov	r28, r24
    2402:	88 23       	and	r24, r24
    2404:	29 f1       	breq	.+74     	; 0x2450 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    2406:	8c ea       	ldi	r24, 0xAC	; 172
    2408:	96 e0       	ldi	r25, 0x06	; 6
    240a:	6c 01       	movw	r12, r24
    240c:	20 e8       	ldi	r18, 0x80	; 128
    240e:	e2 2e       	mov	r14, r18
    2410:	8e 2d       	mov	r24, r14
    2412:	b6 01       	movw	r22, r12
    2414:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    2418:	40 97       	sbiw	r24, 0x10	; 16
    241a:	c9 f4       	brne	.+50     	; 0x244e <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    241c:	8e 2d       	mov	r24, r14
    241e:	b6 01       	movw	r22, r12
    2420:	0e 94 46 18 	call	0x308c	; 0x308c <EM_set_deveui>
    2424:	c8 2f       	mov	r28, r24
    2426:	81 11       	cpse	r24, r1
    2428:	09 c0       	rjmp	.+18     	; 0x243c <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    242a:	27 e0       	ldi	r18, 0x07	; 7
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a e0       	ldi	r20, 0x0A	; 10
    2430:	52 e0       	ldi	r21, 0x02	; 2
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	c8 01       	movw	r24, r16
    2436:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return false;
    243a:	0a c0       	rjmp	.+20     	; 0x2450 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    243c:	28 e0       	ldi	r18, 0x08	; 8
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	41 e1       	ldi	r20, 0x11	; 17
    2442:	52 e0       	ldi	r21, 0x02	; 2
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	c8 01       	movw	r24, r16
    2448:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return true;
    244c:	01 c0       	rjmp	.+2      	; 0x2450 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    244e:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2450:	8c 2f       	mov	r24, r28
    2452:	cf 91       	pop	r28
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	08 95       	ret

Disassembly of section .text.write_appeui:

00002460 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    2460:	cf 92       	push	r12
    2462:	df 92       	push	r13
    2464:	ef 92       	push	r14
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    246e:	22 e0       	ldi	r18, 0x02	; 2
    2470:	4c ea       	ldi	r20, 0xAC	; 172
    2472:	56 e0       	ldi	r21, 0x06	; 6
    2474:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    2478:	c8 2f       	mov	r28, r24
    247a:	88 23       	and	r24, r24
    247c:	29 f1       	breq	.+74     	; 0x24c8 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    247e:	8c ea       	ldi	r24, 0xAC	; 172
    2480:	96 e0       	ldi	r25, 0x06	; 6
    2482:	6c 01       	movw	r12, r24
    2484:	20 e8       	ldi	r18, 0x80	; 128
    2486:	e2 2e       	mov	r14, r18
    2488:	8e 2d       	mov	r24, r14
    248a:	b6 01       	movw	r22, r12
    248c:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    2490:	40 97       	sbiw	r24, 0x10	; 16
    2492:	c9 f4       	brne	.+50     	; 0x24c6 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    2494:	8e 2d       	mov	r24, r14
    2496:	b6 01       	movw	r22, r12
    2498:	0e 94 63 18 	call	0x30c6	; 0x30c6 <EM_set_appeui>
    249c:	c8 2f       	mov	r28, r24
    249e:	81 11       	cpse	r24, r1
    24a0:	09 c0       	rjmp	.+18     	; 0x24b4 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    24a2:	27 e0       	ldi	r18, 0x07	; 7
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	4a e0       	ldi	r20, 0x0A	; 10
    24a8:	52 e0       	ldi	r21, 0x02	; 2
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	c8 01       	movw	r24, r16
    24ae:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return false;
    24b2:	0a c0       	rjmp	.+20     	; 0x24c8 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    24b4:	28 e0       	ldi	r18, 0x08	; 8
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	41 e1       	ldi	r20, 0x11	; 17
    24ba:	52 e0       	ldi	r21, 0x02	; 2
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	c8 01       	movw	r24, r16
    24c0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return true;
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    24c6:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    24c8:	8c 2f       	mov	r24, r28
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	ef 90       	pop	r14
    24d2:	df 90       	pop	r13
    24d4:	cf 90       	pop	r12
    24d6:	08 95       	ret

Disassembly of section .text.write_appkey:

000024d8 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    24d8:	cf 92       	push	r12
    24da:	df 92       	push	r13
    24dc:	ef 92       	push	r14
    24de:	0f 93       	push	r16
    24e0:	1f 93       	push	r17
    24e2:	cf 93       	push	r28
    24e4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    24e6:	22 e0       	ldi	r18, 0x02	; 2
    24e8:	4c ea       	ldi	r20, 0xAC	; 172
    24ea:	56 e0       	ldi	r21, 0x06	; 6
    24ec:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    24f0:	c8 2f       	mov	r28, r24
    24f2:	88 23       	and	r24, r24
    24f4:	29 f1       	breq	.+74     	; 0x2540 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    24f6:	8c ea       	ldi	r24, 0xAC	; 172
    24f8:	96 e0       	ldi	r25, 0x06	; 6
    24fa:	6c 01       	movw	r12, r24
    24fc:	20 e8       	ldi	r18, 0x80	; 128
    24fe:	e2 2e       	mov	r14, r18
    2500:	8e 2d       	mov	r24, r14
    2502:	b6 01       	movw	r22, r12
    2504:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    2508:	80 97       	sbiw	r24, 0x20	; 32
    250a:	c9 f4       	brne	.+50     	; 0x253e <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    250c:	8e 2d       	mov	r24, r14
    250e:	b6 01       	movw	r22, r12
    2510:	0e 94 80 18 	call	0x3100	; 0x3100 <EM_set_appkey>
    2514:	c8 2f       	mov	r28, r24
    2516:	81 11       	cpse	r24, r1
    2518:	09 c0       	rjmp	.+18     	; 0x252c <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    251a:	27 e0       	ldi	r18, 0x07	; 7
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4a e0       	ldi	r20, 0x0A	; 10
    2520:	52 e0       	ldi	r21, 0x02	; 2
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	c8 01       	movw	r24, r16
    2526:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return false;
    252a:	0a c0       	rjmp	.+20     	; 0x2540 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    252c:	28 e0       	ldi	r18, 0x08	; 8
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	41 e1       	ldi	r20, 0x11	; 17
    2532:	52 e0       	ldi	r21, 0x02	; 2
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	c8 01       	movw	r24, r16
    2538:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return true;
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    253e:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2540:	8c 2f       	mov	r24, r28
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	ef 90       	pop	r14
    254a:	df 90       	pop	r13
    254c:	cf 90       	pop	r12
    254e:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00002bd8 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    2bd8:	0f 93       	push	r16
    2bda:	1f 93       	push	r17
    2bdc:	cf 93       	push	r28
    2bde:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2be0:	22 e0       	ldi	r18, 0x02	; 2
    2be2:	4c ea       	ldi	r20, 0xAC	; 172
    2be4:	56 e0       	ldi	r21, 0x06	; 6
    2be6:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    2bea:	c8 2f       	mov	r28, r24
    2bec:	88 23       	and	r24, r24
    2bee:	a9 f0       	breq	.+42     	; 0x2c1a <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    2bf0:	8c ea       	ldi	r24, 0xAC	; 172
    2bf2:	96 e0       	ldi	r25, 0x06	; 6
    2bf4:	0e 94 54 14 	call	0x28a8	; 0x28a8 <is_float>
    2bf8:	c8 2f       	mov	r28, r24
    2bfa:	88 23       	and	r24, r24
    2bfc:	71 f0       	breq	.+28     	; 0x2c1a <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    2bfe:	8c ea       	ldi	r24, 0xAC	; 172
    2c00:	96 e0       	ldi	r25, 0x06	; 6
    2c02:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <str2flaot>
	EM_set_ppmfactor(val);
    2c06:	0e 94 49 1c 	call	0x3892	; 0x3892 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    2c0a:	28 e0       	ldi	r18, 0x08	; 8
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	41 e1       	ldi	r20, 0x11	; 17
    2c10:	52 e0       	ldi	r21, 0x02	; 2
    2c12:	60 e0       	ldi	r22, 0x00	; 0
    2c14:	c8 01       	movw	r24, r16
    2c16:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
	return true;
}
    2c1a:	8c 2f       	mov	r24, r28
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	08 95       	ret

Disassembly of section .text.write_RRL:

00002c24 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2c2c:	22 e0       	ldi	r18, 0x02	; 2
    2c2e:	4c ea       	ldi	r20, 0xAC	; 172
    2c30:	56 e0       	ldi	r21, 0x06	; 6
    2c32:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    2c36:	c8 2f       	mov	r28, r24
    2c38:	88 23       	and	r24, r24
    2c3a:	a9 f0       	breq	.+42     	; 0x2c66 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    2c3c:	8c ea       	ldi	r24, 0xAC	; 172
    2c3e:	96 e0       	ldi	r25, 0x06	; 6
    2c40:	0e 94 54 14 	call	0x28a8	; 0x28a8 <is_float>
    2c44:	c8 2f       	mov	r28, r24
    2c46:	88 23       	and	r24, r24
    2c48:	71 f0       	breq	.+28     	; 0x2c66 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    2c4a:	8c ea       	ldi	r24, 0xAC	; 172
    2c4c:	96 e0       	ldi	r25, 0x06	; 6
    2c4e:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <str2flaot>
	EM_set_RRL(val);
    2c52:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    2c56:	28 e0       	ldi	r18, 0x08	; 8
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	41 e1       	ldi	r20, 0x11	; 17
    2c5c:	52 e0       	ldi	r21, 0x02	; 2
    2c5e:	60 e0       	ldi	r22, 0x00	; 0
    2c60:	c8 01       	movw	r24, r16
    2c62:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
	return true;
}
    2c66:	8c 2f       	mov	r24, r28
    2c68:	cf 91       	pop	r28
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	08 95       	ret

Disassembly of section .text.write_VCC:

00002c70 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2c78:	22 e0       	ldi	r18, 0x02	; 2
    2c7a:	4c ea       	ldi	r20, 0xAC	; 172
    2c7c:	56 e0       	ldi	r21, 0x06	; 6
    2c7e:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    2c82:	c8 2f       	mov	r28, r24
    2c84:	88 23       	and	r24, r24
    2c86:	a9 f0       	breq	.+42     	; 0x2cb2 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    2c88:	8c ea       	ldi	r24, 0xAC	; 172
    2c8a:	96 e0       	ldi	r25, 0x06	; 6
    2c8c:	0e 94 54 14 	call	0x28a8	; 0x28a8 <is_float>
    2c90:	c8 2f       	mov	r28, r24
    2c92:	88 23       	and	r24, r24
    2c94:	71 f0       	breq	.+28     	; 0x2cb2 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    2c96:	8c ea       	ldi	r24, 0xAC	; 172
    2c98:	96 e0       	ldi	r25, 0x06	; 6
    2c9a:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <str2flaot>
	EM_set_Vcc(val);
    2c9e:	0e 94 57 1c 	call	0x38ae	; 0x38ae <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    2ca2:	28 e0       	ldi	r18, 0x08	; 8
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	41 e1       	ldi	r20, 0x11	; 17
    2ca8:	52 e0       	ldi	r21, 0x02	; 2
    2caa:	60 e0       	ldi	r22, 0x00	; 0
    2cac:	c8 01       	movw	r24, r16
    2cae:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
	return true;
}
    2cb2:	8c 2f       	mov	r24, r28
    2cb4:	cf 91       	pop	r28
    2cb6:	1f 91       	pop	r17
    2cb8:	0f 91       	pop	r16
    2cba:	08 95       	ret

Disassembly of section .text.write_cols:

00001684 <write_cols>:

static bool write_cols(const char cmd[], char res[]){
    1684:	4f 92       	push	r4
    1686:	5f 92       	push	r5
    1688:	6f 92       	push	r6
    168a:	7f 92       	push	r7
    168c:	8f 92       	push	r8
    168e:	af 92       	push	r10
    1690:	bf 92       	push	r11
    1692:	cf 92       	push	r12
    1694:	df 92       	push	r13
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	a3 97       	sbiw	r28, 0x23	; 35
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	3b 01       	movw	r6, r22
    16b4:	88 2e       	mov	r8, r24
    16b6:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    16b8:	22 e0       	ldi	r18, 0x02	; 2
    16ba:	4c ea       	ldi	r20, 0xAC	; 172
    16bc:	56 e0       	ldi	r21, 0x06	; 6
    16be:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    16c2:	18 2f       	mov	r17, r24
    16c4:	88 23       	and	r24, r24
    16c6:	09 f4       	brne	.+2      	; 0x16ca <write_cols+0x46>
    16c8:	5d c0       	rjmp	.+186    	; 0x1784 <write_cols+0x100>
	index=atoi(arg);
    16ca:	8c ea       	ldi	r24, 0xAC	; 172
    16cc:	96 e0       	ldi	r25, 0x06	; 6
    16ce:	6c 01       	movw	r12, r24
    16d0:	20 e8       	ldi	r18, 0x80	; 128
    16d2:	e2 2e       	mov	r14, r18
    16d4:	8e 2d       	mov	r24, r14
    16d6:	b6 01       	movw	r22, r12
    16d8:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <atoi>
	if(index<1 || index>7) return false;
    16dc:	0f ef       	ldi	r16, 0xFF	; 255
    16de:	08 0f       	add	r16, r24
    16e0:	07 30       	cpi	r16, 0x07	; 7
    16e2:	08 f0       	brcs	.+2      	; 0x16e6 <write_cols+0x62>
    16e4:	4a c0       	rjmp	.+148    	; 0x177a <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    16e6:	23 e0       	ldi	r18, 0x03	; 3
    16e8:	4c ea       	ldi	r20, 0xAC	; 172
    16ea:	56 e0       	ldi	r21, 0x06	; 6
    16ec:	88 2d       	mov	r24, r8
    16ee:	b3 01       	movw	r22, r6
    16f0:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    16f4:	18 2f       	mov	r17, r24
    16f6:	88 23       	and	r24, r24
    16f8:	09 f4       	brne	.+2      	; 0x16fc <write_cols+0x78>
    16fa:	44 c0       	rjmp	.+136    	; 0x1784 <write_cols+0x100>
	samplings=atoi(arg);
    16fc:	8e 2d       	mov	r24, r14
    16fe:	b6 01       	movw	r22, r12
    1700:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <atoi>
    1704:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    1706:	02 97       	sbiw	r24, 0x02	; 2
    1708:	8b 32       	cpi	r24, 0x2B	; 43
    170a:	91 40       	sbci	r25, 0x01	; 1
    170c:	c0 f5       	brcc	.+112    	; 0x177e <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    170e:	24 e0       	ldi	r18, 0x04	; 4
    1710:	4c ea       	ldi	r20, 0xAC	; 172
    1712:	56 e0       	ldi	r21, 0x06	; 6
    1714:	88 2d       	mov	r24, r8
    1716:	b3 01       	movw	r22, r6
    1718:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    171c:	18 2f       	mov	r17, r24
    171e:	88 23       	and	r24, r24
    1720:	89 f1       	breq	.+98     	; 0x1784 <write_cols+0x100>
	samplingInterval=atoi(arg);
    1722:	8e 2d       	mov	r24, r14
    1724:	b6 01       	movw	r22, r12
    1726:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <atoi>
    172a:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    172c:	02 97       	sbiw	r24, 0x02	; 2
    172e:	87 35       	cpi	r24, 0x57	; 87
    1730:	92 40       	sbci	r25, 0x02	; 2
    1732:	38 f5       	brcc	.+78     	; 0x1782 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1734:	63 e2       	ldi	r22, 0x23	; 35
    1736:	ce 01       	movw	r24, r28
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	7c 01       	movw	r14, r24
    173c:	0e 94 10 1c 	call	0x3820	; 0x3820 <EM_get_collections>
	
	cols[index].samplings=samplings;
    1740:	80 2f       	mov	r24, r16
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	fc 01       	movw	r30, r24
    1746:	ee 0f       	add	r30, r30
    1748:	ff 1f       	adc	r31, r31
    174a:	ee 0f       	add	r30, r30
    174c:	ff 1f       	adc	r31, r31
    174e:	e8 0f       	add	r30, r24
    1750:	f9 1f       	adc	r31, r25
    1752:	ee 0d       	add	r30, r14
    1754:	ff 1d       	adc	r31, r15
    1756:	51 82       	std	Z+1, r5	; 0x01
    1758:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    175a:	d3 82       	std	Z+3, r13	; 0x03
    175c:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    175e:	b7 01       	movw	r22, r14
    1760:	80 e8       	ldi	r24, 0x80	; 128
    1762:	43 e2       	ldi	r20, 0x23	; 35
    1764:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    1768:	28 e0       	ldi	r18, 0x08	; 8
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	41 e1       	ldi	r20, 0x11	; 17
    176e:	52 e0       	ldi	r21, 0x02	; 2
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	c5 01       	movw	r24, r10
    1774:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
	return true;	
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    177e:	10 e0       	ldi	r17, 0x00	; 0
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    1782:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    1784:	81 2f       	mov	r24, r17
    1786:	a3 96       	adiw	r28, 0x23	; 35
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	bf 90       	pop	r11
    17a4:	af 90       	pop	r10
    17a6:	8f 90       	pop	r8
    17a8:	7f 90       	pop	r7
    17aa:	6f 90       	pop	r6
    17ac:	5f 90       	pop	r5
    17ae:	4f 90       	pop	r4
    17b0:	08 95       	ret

Disassembly of section .text.write_heat_up:

00002cbc <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    2cbc:	0f 93       	push	r16
    2cbe:	1f 93       	push	r17
    2cc0:	cf 93       	push	r28
    2cc2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2cc4:	22 e0       	ldi	r18, 0x02	; 2
    2cc6:	4c ea       	ldi	r20, 0xAC	; 172
    2cc8:	56 e0       	ldi	r21, 0x06	; 6
    2cca:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    2cce:	c8 2f       	mov	r28, r24
    2cd0:	88 23       	and	r24, r24
    2cd2:	a9 f0       	breq	.+42     	; 0x2cfe <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    2cd4:	6c ea       	ldi	r22, 0xAC	; 172
    2cd6:	76 e0       	ldi	r23, 0x06	; 6
    2cd8:	80 e8       	ldi	r24, 0x80	; 128
    2cda:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <atoi>
	
	if(val<1 || val>200) return false;
    2cde:	9f ef       	ldi	r25, 0xFF	; 255
    2ce0:	98 0f       	add	r25, r24
    2ce2:	98 3c       	cpi	r25, 0xC8	; 200
    2ce4:	58 f4       	brcc	.+22     	; 0x2cfc <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    2ce6:	0e 94 96 1c 	call	0x392c	; 0x392c <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    2cea:	28 e0       	ldi	r18, 0x08	; 8
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	41 e1       	ldi	r20, 0x11	; 17
    2cf0:	52 e0       	ldi	r21, 0x02	; 2
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	c8 01       	movw	r24, r16
    2cf6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
	return true;
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    2cfc:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    2cfe:	8c 2f       	mov	r24, r28
    2d00:	cf 91       	pop	r28
    2d02:	1f 91       	pop	r17
    2d04:	0f 91       	pop	r16
    2d06:	08 95       	ret

Disassembly of section .text.write_air_pump:

00002a52 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    2a52:	0f 93       	push	r16
    2a54:	1f 93       	push	r17
    2a56:	cf 93       	push	r28
    2a58:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2a5a:	22 e0       	ldi	r18, 0x02	; 2
    2a5c:	4c ea       	ldi	r20, 0xAC	; 172
    2a5e:	56 e0       	ldi	r21, 0x06	; 6
    2a60:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    2a64:	c8 2f       	mov	r28, r24
    2a66:	88 23       	and	r24, r24
    2a68:	b9 f0       	breq	.+46     	; 0x2a98 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    2a6a:	6c ea       	ldi	r22, 0xAC	; 172
    2a6c:	76 e0       	ldi	r23, 0x06	; 6
    2a6e:	80 e8       	ldi	r24, 0x80	; 128
    2a70:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <atoi>
	
	if(val<10 || val>1000) return false;
    2a74:	9c 01       	movw	r18, r24
    2a76:	2a 50       	subi	r18, 0x0A	; 10
    2a78:	31 09       	sbc	r19, r1
    2a7a:	2f 3d       	cpi	r18, 0xDF	; 223
    2a7c:	33 40       	sbci	r19, 0x03	; 3
    2a7e:	58 f4       	brcc	.+22     	; 0x2a96 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    2a80:	0e 94 a2 1c 	call	0x3944	; 0x3944 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    2a84:	28 e0       	ldi	r18, 0x08	; 8
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	41 e1       	ldi	r20, 0x11	; 17
    2a8a:	52 e0       	ldi	r21, 0x02	; 2
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	c8 01       	movw	r24, r16
    2a90:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
	return true;
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<10 || val>1000) return false;
    2a96:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    2a98:	8c 2f       	mov	r24, r28
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	08 95       	ret

Disassembly of section .text.write_sp_interval:

00002d08 <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2d10:	22 e0       	ldi	r18, 0x02	; 2
    2d12:	4c ea       	ldi	r20, 0xAC	; 172
    2d14:	56 e0       	ldi	r21, 0x06	; 6
    2d16:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    2d1a:	c8 2f       	mov	r28, r24
    2d1c:	88 23       	and	r24, r24
    2d1e:	a9 f0       	breq	.+42     	; 0x2d4a <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    2d20:	6c ea       	ldi	r22, 0xAC	; 172
    2d22:	76 e0       	ldi	r23, 0x06	; 6
    2d24:	80 e8       	ldi	r24, 0x80	; 128
    2d26:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <atoi>
	
	if(val<6 || val>24) return false;
    2d2a:	9a ef       	ldi	r25, 0xFA	; 250
    2d2c:	98 0f       	add	r25, r24
    2d2e:	93 31       	cpi	r25, 0x13	; 19
    2d30:	58 f4       	brcc	.+22     	; 0x2d48 <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    2d32:	0e 94 ae 1c 	call	0x395c	; 0x395c <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    2d36:	28 e0       	ldi	r18, 0x08	; 8
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	41 e1       	ldi	r20, 0x11	; 17
    2d3c:	52 e0       	ldi	r21, 0x02	; 2
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	c8 01       	movw	r24, r16
    2d42:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
	return true;
    2d46:	01 c0       	rjmp	.+2      	; 0x2d4a <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    2d48:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    2d4a:	8c 2f       	mov	r24, r28
    2d4c:	cf 91       	pop	r28
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	08 95       	ret

Disassembly of section .text.write_reset:

000019b4 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	a3 97       	sbiw	r28, 0x23	; 35
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    19ce:	69 e1       	ldi	r22, 0x19	; 25
    19d0:	72 e0       	ldi	r23, 0x02	; 2
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	0e 94 46 18 	call	0x308c	; 0x308c <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    19d8:	69 e1       	ldi	r22, 0x19	; 25
    19da:	72 e0       	ldi	r23, 0x02	; 2
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	0e 94 63 18 	call	0x30c6	; 0x30c6 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    19e2:	6a e2       	ldi	r22, 0x2A	; 42
    19e4:	72 e0       	ldi	r23, 0x02	; 2
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	0e 94 80 18 	call	0x3100	; 0x3100 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	80 e8       	ldi	r24, 0x80	; 128
    19f2:	9f e3       	ldi	r25, 0x3F	; 63
    19f4:	0e 94 49 1c 	call	0x3892	; 0x3892 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	70 e4       	ldi	r23, 0x40	; 64
    19fc:	8c e1       	ldi	r24, 0x1C	; 28
    19fe:	95 e4       	ldi	r25, 0x45	; 69
    1a00:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <EM_set_RRL>
	EM_set_Vcc(5.00);
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	80 ea       	ldi	r24, 0xA0	; 160
    1a0a:	90 e4       	ldi	r25, 0x40	; 64
    1a0c:	0e 94 57 1c 	call	0x38ae	; 0x38ae <EM_set_Vcc>
	EM_set_heat_up_time(2);
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	0e 94 96 1c 	call	0x392c	; 0x392c <EM_set_heat_up_time>
	EM_set_air_pump_time(10);
    1a16:	8a e0       	ldi	r24, 0x0A	; 10
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    1a1e:	86 e0       	ldi	r24, 0x06	; 6
    1a20:	0e 94 ae 1c 	call	0x395c	; 0x395c <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	1a c0       	rjmp	.+52     	; 0x1a5c <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    1a28:	e8 2f       	mov	r30, r24
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	9f 01       	movw	r18, r30
    1a2e:	22 0f       	add	r18, r18
    1a30:	33 1f       	adc	r19, r19
    1a32:	22 0f       	add	r18, r18
    1a34:	33 1f       	adc	r19, r19
    1a36:	e2 0f       	add	r30, r18
    1a38:	f3 1f       	adc	r31, r19
    1a3a:	21 e0       	ldi	r18, 0x01	; 1
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	2c 0f       	add	r18, r28
    1a40:	3d 1f       	adc	r19, r29
    1a42:	e2 0f       	add	r30, r18
    1a44:	f3 1f       	adc	r31, r19
    1a46:	92 e0       	ldi	r25, 0x02	; 2
    1a48:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    1a4a:	22 e0       	ldi	r18, 0x02	; 2
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	31 83       	std	Z+1, r19	; 0x01
    1a50:	20 83       	st	Z, r18
		cols[i].samplingInterval=10;
    1a52:	2a e0       	ldi	r18, 0x0A	; 10
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	33 83       	std	Z+3, r19	; 0x03
    1a58:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(10);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    1a5a:	8f 5f       	subi	r24, 0xFF	; 255
    1a5c:	87 30       	cpi	r24, 0x07	; 7
    1a5e:	20 f3       	brcs	.-56     	; 0x1a28 <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=10;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1a60:	be 01       	movw	r22, r28
    1a62:	6f 5f       	subi	r22, 0xFF	; 255
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	80 e8       	ldi	r24, 0x80	; 128
    1a68:	43 e2       	ldi	r20, 0x23	; 35
    1a6a:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <EM_set_collections>
	
	strcpy(res, "All settings reset");
    1a6e:	23 e1       	ldi	r18, 0x13	; 19
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4b e4       	ldi	r20, 0x4B	; 75
    1a74:	52 e0       	ldi	r21, 0x02	; 2
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	c8 01       	movw	r24, r16
    1a7a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
	return true;
}
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	a3 96       	adiw	r28, 0x23	; 35
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	08 95       	ret

Disassembly of section .text.handle_read:

00000f40 <handle_read>:
static bool write_heat_up(const char cmd[], char res[]);
static bool write_air_pump(const char cmd[], char res[]);
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);

bool handle_read(const char cmd[], char res[]){
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	68 97       	sbiw	r28, 0x18	; 24
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	6b 01       	movw	r12, r22
     f62:	e8 2e       	mov	r14, r24
     f64:	f4 2e       	mov	r15, r20
     f66:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
     f68:	21 e0       	ldi	r18, 0x01	; 1
     f6a:	ae 01       	movw	r20, r28
     f6c:	4f 5f       	subi	r20, 0xFF	; 255
     f6e:	5f 4f       	sbci	r21, 0xFF	; 255
     f70:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
     f74:	18 2f       	mov	r17, r24
     f76:	88 23       	and	r24, r24
     f78:	09 f4       	brne	.+2      	; 0xf7c <handle_read+0x3c>
     f7a:	15 c1       	rjmp	.+554    	; 0x11a6 <__stack+0xa7>
     f7c:	8e 2d       	mov	r24, r14
     f7e:	b6 01       	movw	r22, r12
     f80:	0e 94 00 15 	call	0x2a00	; 0x2a00 <count_parameters>
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	09 f4       	brne	.+2      	; 0xf8a <handle_read+0x4a>
     f88:	0d c1       	rjmp	.+538    	; 0x11a4 <__stack+0xa5>
	
	if (strcmp(par, RW_DEVEUI)==0)
     f8a:	ce 01       	movw	r24, r28
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	6c 01       	movw	r12, r24
     f90:	20 e8       	ldi	r18, 0x80	; 128
     f92:	e2 2e       	mov	r14, r18
     f94:	2e e5       	ldi	r18, 0x5E	; 94
     f96:	32 e0       	ldi	r19, 0x02	; 2
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	8e 2d       	mov	r24, r14
     f9c:	b6 01       	movw	r22, r12
     f9e:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
     fa2:	89 2b       	or	r24, r25
     fa4:	29 f4       	brne	.+10     	; 0xfb0 <handle_read+0x70>
	{
		EM_get_deveui(res);
     fa6:	8f 2d       	mov	r24, r15
     fa8:	90 2f       	mov	r25, r16
     faa:	0e 94 74 19 	call	0x32e8	; 0x32e8 <EM_get_deveui>
     fae:	fb c0       	rjmp	.+502    	; 0x11a6 <__stack+0xa7>
	}
	else if (strcmp(par, RW_APPEUI)==0)
     fb0:	25 e6       	ldi	r18, 0x65	; 101
     fb2:	32 e0       	ldi	r19, 0x02	; 2
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	8e 2d       	mov	r24, r14
     fb8:	b6 01       	movw	r22, r12
     fba:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
     fbe:	89 2b       	or	r24, r25
     fc0:	29 f4       	brne	.+10     	; 0xfcc <handle_read+0x8c>
	{
		EM_get_appeui(res);
     fc2:	8f 2d       	mov	r24, r15
     fc4:	90 2f       	mov	r25, r16
     fc6:	0e 94 8c 19 	call	0x3318	; 0x3318 <EM_get_appeui>
     fca:	ed c0       	rjmp	.+474    	; 0x11a6 <__stack+0xa7>
	}
	else if (strcmp(par, RW_APPKEY)==0)
     fcc:	2c e6       	ldi	r18, 0x6C	; 108
     fce:	32 e0       	ldi	r19, 0x02	; 2
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	8e 2d       	mov	r24, r14
     fd4:	b6 01       	movw	r22, r12
     fd6:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
     fda:	89 2b       	or	r24, r25
     fdc:	29 f4       	brne	.+10     	; 0xfe8 <handle_read+0xa8>
	{
		EM_get_appkey(res);
     fde:	8f 2d       	mov	r24, r15
     fe0:	90 2f       	mov	r25, r16
     fe2:	0e 94 a4 19 	call	0x3348	; 0x3348 <EM_get_appkey>
     fe6:	df c0       	rjmp	.+446    	; 0x11a6 <__stack+0xa7>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
     fe8:	23 e7       	ldi	r18, 0x73	; 115
     fea:	32 e0       	ldi	r19, 0x02	; 2
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	8e 2d       	mov	r24, r14
     ff0:	b6 01       	movw	r22, r12
     ff2:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
     ff6:	89 2b       	or	r24, r25
     ff8:	e1 f4       	brne	.+56     	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
	{
		EM_get_ppmfactor(&val);
     ffa:	ce 01       	movw	r24, r28
     ffc:	45 96       	adiw	r24, 0x15	; 21
     ffe:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    1002:	88 8d       	ldd	r24, Y+24	; 0x18
    1004:	8f 93       	push	r24
    1006:	8f 89       	ldd	r24, Y+23	; 0x17
    1008:	8f 93       	push	r24
    100a:	8e 89       	ldd	r24, Y+22	; 0x16
    100c:	8f 93       	push	r24
    100e:	8d 89       	ldd	r24, Y+21	; 0x15
    1010:	8f 93       	push	r24
    1012:	88 e7       	ldi	r24, 0x78	; 120
    1014:	92 e0       	ldi	r25, 0x02	; 2
    1016:	a0 e0       	ldi	r26, 0x00	; 0
    1018:	af 93       	push	r26
    101a:	9f 93       	push	r25
    101c:	8f 93       	push	r24
    101e:	0f 93       	push	r16
    1020:	ff 92       	push	r15
    1022:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sprintf>
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	ba c0       	rjmp	.+372    	; 0x11a6 <__stack+0xa7>
	}
	else if(strcmp(par, RW_RRL)==0)
    1032:	2d e7       	ldi	r18, 0x7D	; 125
    1034:	32 e0       	ldi	r19, 0x02	; 2
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	8e 2d       	mov	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    1040:	89 2b       	or	r24, r25
    1042:	e1 f4       	brne	.+56     	; 0x107c <__DATA_REGION_LENGTH__+0x7c>
	{
		EM_get_RRL(&val);
    1044:	ce 01       	movw	r24, r28
    1046:	45 96       	adiw	r24, 0x15	; 21
    1048:	0e 94 01 1b 	call	0x3602	; 0x3602 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    104c:	88 8d       	ldd	r24, Y+24	; 0x18
    104e:	8f 93       	push	r24
    1050:	8f 89       	ldd	r24, Y+23	; 0x17
    1052:	8f 93       	push	r24
    1054:	8e 89       	ldd	r24, Y+22	; 0x16
    1056:	8f 93       	push	r24
    1058:	8d 89       	ldd	r24, Y+21	; 0x15
    105a:	8f 93       	push	r24
    105c:	88 e7       	ldi	r24, 0x78	; 120
    105e:	92 e0       	ldi	r25, 0x02	; 2
    1060:	a0 e0       	ldi	r26, 0x00	; 0
    1062:	af 93       	push	r26
    1064:	9f 93       	push	r25
    1066:	8f 93       	push	r24
    1068:	0f 93       	push	r16
    106a:	ff 92       	push	r15
    106c:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sprintf>
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	95 c0       	rjmp	.+298    	; 0x11a6 <__stack+0xa7>
	}
	else if(strcmp(par, RW_VCC)==0)
    107c:	22 e8       	ldi	r18, 0x82	; 130
    107e:	32 e0       	ldi	r19, 0x02	; 2
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	8e 2d       	mov	r24, r14
    1084:	b6 01       	movw	r22, r12
    1086:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    108a:	89 2b       	or	r24, r25
    108c:	e1 f4       	brne	.+56     	; 0x10c6 <__DATA_REGION_LENGTH__+0xc6>
	{
		EM_get_Vcc(&val);
    108e:	ce 01       	movw	r24, r28
    1090:	45 96       	adiw	r24, 0x15	; 21
    1092:	0e 94 10 1b 	call	0x3620	; 0x3620 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1096:	88 8d       	ldd	r24, Y+24	; 0x18
    1098:	8f 93       	push	r24
    109a:	8f 89       	ldd	r24, Y+23	; 0x17
    109c:	8f 93       	push	r24
    109e:	8e 89       	ldd	r24, Y+22	; 0x16
    10a0:	8f 93       	push	r24
    10a2:	8d 89       	ldd	r24, Y+21	; 0x15
    10a4:	8f 93       	push	r24
    10a6:	88 e7       	ldi	r24, 0x78	; 120
    10a8:	92 e0       	ldi	r25, 0x02	; 2
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	af 93       	push	r26
    10ae:	9f 93       	push	r25
    10b0:	8f 93       	push	r24
    10b2:	0f 93       	push	r16
    10b4:	ff 92       	push	r15
    10b6:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sprintf>
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	70 c0       	rjmp	.+224    	; 0x11a6 <__stack+0xa7>
	}
	else if(strcmp(par, RW_COLS)==0)
    10c6:	27 e8       	ldi	r18, 0x87	; 135
    10c8:	32 e0       	ldi	r19, 0x02	; 2
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	8e 2d       	mov	r24, r14
    10ce:	b6 01       	movw	r22, r12
    10d0:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    10d4:	89 2b       	or	r24, r25
    10d6:	29 f4       	brne	.+10     	; 0x10e2 <__DATA_REGION_LENGTH__+0xe2>
	{
		read_cols(res);
    10d8:	8f 2d       	mov	r24, r15
    10da:	90 2f       	mov	r25, r16
    10dc:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <read_cols>
    10e0:	62 c0       	rjmp	.+196    	; 0x11a6 <__stack+0xa7>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    10e2:	2c e8       	ldi	r18, 0x8C	; 140
    10e4:	32 e0       	ldi	r19, 0x02	; 2
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	8e 2d       	mov	r24, r14
    10ea:	b6 01       	movw	r22, r12
    10ec:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    10f0:	89 2b       	or	r24, r25
    10f2:	a1 f4       	brne	.+40     	; 0x111c <__stack+0x1d>
	{
		uint8_t val=EM_get_heat_up_time();
    10f4:	0e 94 9c 1c 	call	0x3938	; 0x3938 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    10f8:	1f 92       	push	r1
    10fa:	8f 93       	push	r24
    10fc:	86 e9       	ldi	r24, 0x96	; 150
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	a0 e0       	ldi	r26, 0x00	; 0
    1102:	af 93       	push	r26
    1104:	9f 93       	push	r25
    1106:	8f 93       	push	r24
    1108:	0f 93       	push	r16
    110a:	ff 92       	push	r15
    110c:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sprintf>
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	45 c0       	rjmp	.+138    	; 0x11a6 <__stack+0xa7>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    111c:	28 ea       	ldi	r18, 0xA8	; 168
    111e:	32 e0       	ldi	r19, 0x02	; 2
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	8e 2d       	mov	r24, r14
    1124:	b6 01       	movw	r22, r12
    1126:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    112a:	89 2b       	or	r24, r25
    112c:	a1 f4       	brne	.+40     	; 0x1156 <__stack+0x57>
	{
		uint16_t val=EM_get_air_pump_time();
    112e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    1132:	9f 93       	push	r25
    1134:	8f 93       	push	r24
    1136:	83 eb       	ldi	r24, 0xB3	; 179
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	a0 e0       	ldi	r26, 0x00	; 0
    113c:	af 93       	push	r26
    113e:	9f 93       	push	r25
    1140:	8f 93       	push	r24
    1142:	0f 93       	push	r16
    1144:	ff 92       	push	r15
    1146:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sprintf>
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	28 c0       	rjmp	.+80     	; 0x11a6 <__stack+0xa7>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1156:	26 ec       	ldi	r18, 0xC6	; 198
    1158:	32 e0       	ldi	r19, 0x02	; 2
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	8e 2d       	mov	r24, r14
    115e:	b6 01       	movw	r22, r12
    1160:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    1164:	89 2b       	or	r24, r25
    1166:	a1 f4       	brne	.+40     	; 0x1190 <__stack+0x91>
	{
		uint8_t val=EM_get_sp_interval();
    1168:	0e 94 b4 1c 	call	0x3968	; 0x3968 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    116c:	1f 92       	push	r1
    116e:	8f 93       	push	r24
    1170:	82 ed       	ldi	r24, 0xD2	; 210
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	a0 e0       	ldi	r26, 0x00	; 0
    1176:	af 93       	push	r26
    1178:	9f 93       	push	r25
    117a:	8f 93       	push	r24
    117c:	0f 93       	push	r16
    117e:	ff 92       	push	r15
    1180:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sprintf>
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	0b c0       	rjmp	.+22     	; 0x11a6 <__stack+0xa7>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1190:	26 e1       	ldi	r18, 0x16	; 22
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	41 ef       	ldi	r20, 0xF1	; 241
    1196:	52 e0       	ldi	r21, 0x02	; 2
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	8f 2d       	mov	r24, r15
    119c:	90 2f       	mov	r25, r16
    119e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <__stack+0xa7>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    11a4:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    11a6:	81 2f       	mov	r24, r17
    11a8:	68 96       	adiw	r28, 0x18	; 24
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	08 95       	ret

Disassembly of section .text.handle_write:

000011c6 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    11c6:	6f 92       	push	r6
    11c8:	7f 92       	push	r7
    11ca:	8f 92       	push	r8
    11cc:	af 92       	push	r10
    11ce:	bf 92       	push	r11
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	64 97       	sbiw	r28, 0x14	; 20
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	3b 01       	movw	r6, r22
    11ee:	88 2e       	mov	r8, r24
    11f0:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	ae 01       	movw	r20, r28
    11f6:	4f 5f       	subi	r20, 0xFF	; 255
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    11fe:	18 2f       	mov	r17, r24
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <handle_write+0x40>
    1204:	bd c0       	rjmp	.+378    	; 0x1380 <handle_write+0x1ba>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	6c 01       	movw	r12, r24
    120c:	20 e8       	ldi	r18, 0x80	; 128
    120e:	e2 2e       	mov	r14, r18
    1210:	2e e5       	ldi	r18, 0x5E	; 94
    1212:	32 e0       	ldi	r19, 0x02	; 2
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	8e 2d       	mov	r24, r14
    1218:	b6 01       	movw	r22, r12
    121a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    121e:	89 2b       	or	r24, r25
    1220:	39 f4       	brne	.+14     	; 0x1230 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1222:	a5 01       	movw	r20, r10
    1224:	88 2d       	mov	r24, r8
    1226:	b3 01       	movw	r22, r6
    1228:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <write_deveui>
    122c:	18 2f       	mov	r17, r24
    122e:	a8 c0       	rjmp	.+336    	; 0x1380 <handle_write+0x1ba>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1230:	25 e6       	ldi	r18, 0x65	; 101
    1232:	32 e0       	ldi	r19, 0x02	; 2
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	8e 2d       	mov	r24, r14
    1238:	b6 01       	movw	r22, r12
    123a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    123e:	89 2b       	or	r24, r25
    1240:	39 f4       	brne	.+14     	; 0x1250 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1242:	a5 01       	movw	r20, r10
    1244:	88 2d       	mov	r24, r8
    1246:	b3 01       	movw	r22, r6
    1248:	0e 94 30 12 	call	0x2460	; 0x2460 <write_appeui>
    124c:	18 2f       	mov	r17, r24
    124e:	98 c0       	rjmp	.+304    	; 0x1380 <handle_write+0x1ba>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1250:	2c e6       	ldi	r18, 0x6C	; 108
    1252:	32 e0       	ldi	r19, 0x02	; 2
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	8e 2d       	mov	r24, r14
    1258:	b6 01       	movw	r22, r12
    125a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    125e:	89 2b       	or	r24, r25
    1260:	39 f4       	brne	.+14     	; 0x1270 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1262:	a5 01       	movw	r20, r10
    1264:	88 2d       	mov	r24, r8
    1266:	b3 01       	movw	r22, r6
    1268:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <write_appkey>
    126c:	18 2f       	mov	r17, r24
    126e:	88 c0       	rjmp	.+272    	; 0x1380 <handle_write+0x1ba>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1270:	23 e7       	ldi	r18, 0x73	; 115
    1272:	32 e0       	ldi	r19, 0x02	; 2
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	8e 2d       	mov	r24, r14
    1278:	b6 01       	movw	r22, r12
    127a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    127e:	89 2b       	or	r24, r25
    1280:	39 f4       	brne	.+14     	; 0x1290 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1282:	a5 01       	movw	r20, r10
    1284:	88 2d       	mov	r24, r8
    1286:	b3 01       	movw	r22, r6
    1288:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <write_PPM_factor>
    128c:	18 2f       	mov	r17, r24
    128e:	78 c0       	rjmp	.+240    	; 0x1380 <handle_write+0x1ba>
	}
	else if(strcmp(par, RW_RRL)==0)
    1290:	2d e7       	ldi	r18, 0x7D	; 125
    1292:	32 e0       	ldi	r19, 0x02	; 2
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	8e 2d       	mov	r24, r14
    1298:	b6 01       	movw	r22, r12
    129a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    129e:	89 2b       	or	r24, r25
    12a0:	39 f4       	brne	.+14     	; 0x12b0 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    12a2:	a5 01       	movw	r20, r10
    12a4:	88 2d       	mov	r24, r8
    12a6:	b3 01       	movw	r22, r6
    12a8:	0e 94 12 16 	call	0x2c24	; 0x2c24 <write_RRL>
    12ac:	18 2f       	mov	r17, r24
    12ae:	68 c0       	rjmp	.+208    	; 0x1380 <handle_write+0x1ba>
	}
	else if(strcmp(par, RW_VCC)==0)
    12b0:	22 e8       	ldi	r18, 0x82	; 130
    12b2:	32 e0       	ldi	r19, 0x02	; 2
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	8e 2d       	mov	r24, r14
    12b8:	b6 01       	movw	r22, r12
    12ba:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    12be:	89 2b       	or	r24, r25
    12c0:	39 f4       	brne	.+14     	; 0x12d0 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    12c2:	a5 01       	movw	r20, r10
    12c4:	88 2d       	mov	r24, r8
    12c6:	b3 01       	movw	r22, r6
    12c8:	0e 94 38 16 	call	0x2c70	; 0x2c70 <write_VCC>
    12cc:	18 2f       	mov	r17, r24
    12ce:	58 c0       	rjmp	.+176    	; 0x1380 <handle_write+0x1ba>
	}
	else if(strcmp(par, RW_COLS)==0)
    12d0:	27 e8       	ldi	r18, 0x87	; 135
    12d2:	32 e0       	ldi	r19, 0x02	; 2
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	8e 2d       	mov	r24, r14
    12d8:	b6 01       	movw	r22, r12
    12da:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    12de:	89 2b       	or	r24, r25
    12e0:	39 f4       	brne	.+14     	; 0x12f0 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    12e2:	a5 01       	movw	r20, r10
    12e4:	88 2d       	mov	r24, r8
    12e6:	b3 01       	movw	r22, r6
    12e8:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_cols>
    12ec:	18 2f       	mov	r17, r24
    12ee:	48 c0       	rjmp	.+144    	; 0x1380 <handle_write+0x1ba>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    12f0:	2c e8       	ldi	r18, 0x8C	; 140
    12f2:	32 e0       	ldi	r19, 0x02	; 2
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	8e 2d       	mov	r24, r14
    12f8:	b6 01       	movw	r22, r12
    12fa:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    12fe:	89 2b       	or	r24, r25
    1300:	39 f4       	brne	.+14     	; 0x1310 <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    1302:	a5 01       	movw	r20, r10
    1304:	88 2d       	mov	r24, r8
    1306:	b3 01       	movw	r22, r6
    1308:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <write_heat_up>
    130c:	18 2f       	mov	r17, r24
    130e:	38 c0       	rjmp	.+112    	; 0x1380 <handle_write+0x1ba>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1310:	28 ea       	ldi	r18, 0xA8	; 168
    1312:	32 e0       	ldi	r19, 0x02	; 2
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	8e 2d       	mov	r24, r14
    1318:	b6 01       	movw	r22, r12
    131a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    131e:	89 2b       	or	r24, r25
    1320:	39 f4       	brne	.+14     	; 0x1330 <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1322:	a5 01       	movw	r20, r10
    1324:	88 2d       	mov	r24, r8
    1326:	b3 01       	movw	r22, r6
    1328:	0e 94 29 15 	call	0x2a52	; 0x2a52 <write_air_pump>
    132c:	18 2f       	mov	r17, r24
    132e:	28 c0       	rjmp	.+80     	; 0x1380 <handle_write+0x1ba>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1330:	26 ec       	ldi	r18, 0xC6	; 198
    1332:	32 e0       	ldi	r19, 0x02	; 2
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	8e 2d       	mov	r24, r14
    1338:	b6 01       	movw	r22, r12
    133a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    133e:	89 2b       	or	r24, r25
    1340:	39 f4       	brne	.+14     	; 0x1350 <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1342:	a5 01       	movw	r20, r10
    1344:	88 2d       	mov	r24, r8
    1346:	b3 01       	movw	r22, r6
    1348:	0e 94 84 16 	call	0x2d08	; 0x2d08 <write_sp_interval>
    134c:	18 2f       	mov	r17, r24
    134e:	18 c0       	rjmp	.+48     	; 0x1380 <handle_write+0x1ba>
	}
	else if(strcmp(par, RW_RESET)==0)
    1350:	27 e0       	ldi	r18, 0x07	; 7
    1352:	33 e0       	ldi	r19, 0x03	; 3
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	8e 2d       	mov	r24, r14
    1358:	b6 01       	movw	r22, r12
    135a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    135e:	89 2b       	or	r24, r25
    1360:	39 f4       	brne	.+14     	; 0x1370 <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1362:	a5 01       	movw	r20, r10
    1364:	88 2d       	mov	r24, r8
    1366:	b3 01       	movw	r22, r6
    1368:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <write_reset>
    136c:	18 2f       	mov	r17, r24
    136e:	08 c0       	rjmp	.+16     	; 0x1380 <handle_write+0x1ba>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1370:	26 e1       	ldi	r18, 0x16	; 22
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	41 ef       	ldi	r20, 0xF1	; 241
    1376:	52 e0       	ldi	r21, 0x02	; 2
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	c5 01       	movw	r24, r10
    137c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return true;
	}
	
}
    1380:	81 2f       	mov	r24, r17
    1382:	64 96       	adiw	r28, 0x14	; 20
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	bf 90       	pop	r11
    139c:	af 90       	pop	r10
    139e:	8f 90       	pop	r8
    13a0:	7f 90       	pop	r7
    13a2:	6f 90       	pop	r6
    13a4:	08 95       	ret

Disassembly of section .text.handle_methane:

000017b2 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <handle_methane+0x12>
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	f4 2e       	mov	r15, r20
    17ca:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    17cc:	22 e0       	ldi	r18, 0x02	; 2
    17ce:	4c ef       	ldi	r20, 0xFC	; 252
    17d0:	56 e0       	ldi	r21, 0x06	; 6
    17d2:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    17d6:	18 2f       	mov	r17, r24
    17d8:	88 23       	and	r24, r24
    17da:	09 f4       	brne	.+2      	; 0x17de <handle_methane+0x2c>
    17dc:	6b c0       	rjmp	.+214    	; 0x18b4 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    17de:	8c ef       	ldi	r24, 0xFC	; 252
    17e0:	96 e0       	ldi	r25, 0x06	; 6
    17e2:	6c 01       	movw	r12, r24
    17e4:	20 e8       	ldi	r18, 0x80	; 128
    17e6:	e2 2e       	mov	r14, r18
    17e8:	21 eb       	ldi	r18, 0xB1	; 177
    17ea:	33 e0       	ldi	r19, 0x03	; 3
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	8e 2d       	mov	r24, r14
    17f0:	b6 01       	movw	r22, r12
    17f2:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    17f6:	89 2b       	or	r24, r25
    17f8:	79 f4       	brne	.+30     	; 0x1818 <handle_methane+0x66>
		PM_HAL_meth_power_init();
    17fa:	0e 94 1f 1c 	call	0x383e	; 0x383e <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	0e 94 b3 1b 	call	0x3766	; 0x3766 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    1804:	28 e1       	ldi	r18, 0x18	; 24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	44 eb       	ldi	r20, 0xB4	; 180
    180a:	53 e0       	ldi	r21, 0x03	; 3
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	8f 2d       	mov	r24, r15
    1810:	90 2f       	mov	r25, r16
    1812:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return true;
    1816:	4e c0       	rjmp	.+156    	; 0x18b4 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    1818:	2c ec       	ldi	r18, 0xCC	; 204
    181a:	33 e0       	ldi	r19, 0x03	; 3
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	8e 2d       	mov	r24, r14
    1820:	b6 01       	movw	r22, r12
    1822:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    1826:	89 2b       	or	r24, r25
    1828:	79 f4       	brne	.+30     	; 0x1848 <handle_methane+0x96>
		PM_HAL_meth_power_init();
    182a:	0e 94 1f 1c 	call	0x383e	; 0x383e <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	0e 94 b3 1b 	call	0x3766	; 0x3766 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    1834:	29 e1       	ldi	r18, 0x19	; 25
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 ed       	ldi	r20, 0xD0	; 208
    183a:	53 e0       	ldi	r21, 0x03	; 3
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	8f 2d       	mov	r24, r15
    1840:	90 2f       	mov	r25, r16
    1842:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return true;
    1846:	36 c0       	rjmp	.+108    	; 0x18b4 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    1848:	29 ee       	ldi	r18, 0xE9	; 233
    184a:	33 e0       	ldi	r19, 0x03	; 3
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	8e 2d       	mov	r24, r14
    1850:	b6 01       	movw	r22, r12
    1852:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    1856:	89 2b       	or	r24, r25
    1858:	21 f5       	brne	.+72     	; 0x18a2 <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    185a:	ce 01       	movw	r24, r28
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	0e 94 80 14 	call	0x2900	; 0x2900 <ADC_get_value>
    1862:	88 23       	and	r24, r24
    1864:	51 f0       	breq	.+20     	; 0x187a <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    1866:	28 e1       	ldi	r18, 0x18	; 24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4e ee       	ldi	r20, 0xEE	; 238
    186c:	53 e0       	ldi	r21, 0x03	; 3
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	8f 2d       	mov	r24, r15
    1872:	90 2f       	mov	r25, r16
    1874:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
    1878:	1d c0       	rjmp	.+58     	; 0x18b4 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	8f 93       	push	r24
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	8f 93       	push	r24
    1882:	86 e0       	ldi	r24, 0x06	; 6
    1884:	94 e0       	ldi	r25, 0x04	; 4
    1886:	a0 e0       	ldi	r26, 0x00	; 0
    1888:	af 93       	push	r26
    188a:	9f 93       	push	r25
    188c:	8f 93       	push	r24
    188e:	0f 93       	push	r16
    1890:	ff 92       	push	r15
    1892:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sprintf>
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	09 c0       	rjmp	.+18     	; 0x18b4 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    18a2:	26 e1       	ldi	r18, 0x16	; 22
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4d e0       	ldi	r20, 0x0D	; 13
    18a8:	54 e0       	ldi	r21, 0x04	; 4
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	8f 2d       	mov	r24, r15
    18ae:	90 2f       	mov	r25, r16
    18b0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return true;
	}
	return false;
}
    18b4:	81 2f       	mov	r24, r17
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	ff 90       	pop	r15
    18c4:	ef 90       	pop	r14
    18c6:	df 90       	pop	r13
    18c8:	cf 90       	pop	r12
    18ca:	08 95       	ret

Disassembly of section .text.handle_co2:

00001f42 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    1f42:	ff 92       	push	r15
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <handle_co2+0xc>
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	f4 2e       	mov	r15, r20
    1f54:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    1f56:	22 e0       	ldi	r18, 0x02	; 2
    1f58:	4c ef       	ldi	r20, 0xFC	; 252
    1f5a:	56 e0       	ldi	r21, 0x06	; 6
    1f5c:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    1f60:	18 2f       	mov	r17, r24
    1f62:	88 23       	and	r24, r24
    1f64:	b9 f1       	breq	.+110    	; 0x1fd4 <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    1f66:	6c ef       	ldi	r22, 0xFC	; 252
    1f68:	76 e0       	ldi	r23, 0x06	; 6
    1f6a:	80 e8       	ldi	r24, 0x80	; 128
    1f6c:	29 ee       	ldi	r18, 0xE9	; 233
    1f6e:	33 e0       	ldi	r19, 0x03	; 3
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    1f76:	89 2b       	or	r24, r25
    1f78:	21 f5       	brne	.+72     	; 0x1fc2 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <SCD30_get_reading>
    1f82:	88 23       	and	r24, r24
    1f84:	51 f0       	breq	.+20     	; 0x1f9a <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    1f86:	28 e1       	ldi	r18, 0x18	; 24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4e ee       	ldi	r20, 0xEE	; 238
    1f8c:	53 e0       	ldi	r21, 0x03	; 3
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	8f 2d       	mov	r24, r15
    1f92:	90 2f       	mov	r25, r16
    1f94:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
    1f98:	1d c0       	rjmp	.+58     	; 0x1fd4 <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	8f 93       	push	r24
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	8f 93       	push	r24
    1fa2:	86 e0       	ldi	r24, 0x06	; 6
    1fa4:	94 e0       	ldi	r25, 0x04	; 4
    1fa6:	a0 e0       	ldi	r26, 0x00	; 0
    1fa8:	af 93       	push	r26
    1faa:	9f 93       	push	r25
    1fac:	8f 93       	push	r24
    1fae:	0f 93       	push	r16
    1fb0:	ff 92       	push	r15
    1fb2:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sprintf>
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	09 c0       	rjmp	.+18     	; 0x1fd4 <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1fc2:	26 e1       	ldi	r18, 0x16	; 22
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	4d e0       	ldi	r20, 0x0D	; 13
    1fc8:	54 e0       	ldi	r21, 0x04	; 4
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	8f 2d       	mov	r24, r15
    1fce:	90 2f       	mov	r25, r16
    1fd0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return true;
	}
}
    1fd4:	81 2f       	mov	r24, r17
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	1f 91       	pop	r17
    1fe0:	0f 91       	pop	r16
    1fe2:	ff 90       	pop	r15
    1fe4:	08 95       	ret

Disassembly of section .text.handle_sample:

00002120 <handle_sample>:


static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    2120:	6f 92       	push	r6
    2122:	7f 92       	push	r7
    2124:	8f 92       	push	r8
    2126:	cf 92       	push	r12
    2128:	df 92       	push	r13
    212a:	ef 92       	push	r14
    212c:	0f 93       	push	r16
    212e:	1f 93       	push	r17
    2130:	cf 93       	push	r28
    2132:	3b 01       	movw	r6, r22
    2134:	88 2e       	mov	r8, r24
    2136:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    2138:	21 e0       	ldi	r18, 0x01	; 1
    213a:	4c ef       	ldi	r20, 0xFC	; 252
    213c:	56 e0       	ldi	r21, 0x06	; 6
    213e:	0e 94 27 11 	call	0x224e	; 0x224e <get_parameter>
    2142:	c8 2f       	mov	r28, r24
    2144:	88 23       	and	r24, r24
    2146:	69 f1       	breq	.+90     	; 0x21a2 <handle_sample+0x82>
	
	if(strcmp(par, S_METH)==0){
    2148:	8c ef       	ldi	r24, 0xFC	; 252
    214a:	96 e0       	ldi	r25, 0x06	; 6
    214c:	6c 01       	movw	r12, r24
    214e:	20 e8       	ldi	r18, 0x80	; 128
    2150:	e2 2e       	mov	r14, r18
    2152:	23 e2       	ldi	r18, 0x23	; 35
    2154:	34 e0       	ldi	r19, 0x04	; 4
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	8e 2d       	mov	r24, r14
    215a:	b6 01       	movw	r22, r12
    215c:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    2160:	89 2b       	or	r24, r25
    2162:	39 f4       	brne	.+14     	; 0x2172 <handle_sample+0x52>
		return handle_methane(cmd, res);
    2164:	a8 01       	movw	r20, r16
    2166:	88 2d       	mov	r24, r8
    2168:	b3 01       	movw	r22, r6
    216a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <handle_methane>
    216e:	c8 2f       	mov	r28, r24
    2170:	18 c0       	rjmp	.+48     	; 0x21a2 <handle_sample+0x82>
	}else if(strcmp(par, S_CO2)==0){
    2172:	28 e2       	ldi	r18, 0x28	; 40
    2174:	34 e0       	ldi	r19, 0x04	; 4
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	8e 2d       	mov	r24, r14
    217a:	b6 01       	movw	r22, r12
    217c:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <strcmp>
    2180:	89 2b       	or	r24, r25
    2182:	39 f4       	brne	.+14     	; 0x2192 <handle_sample+0x72>
		return handle_co2(cmd, res);
    2184:	a8 01       	movw	r20, r16
    2186:	88 2d       	mov	r24, r8
    2188:	b3 01       	movw	r22, r6
    218a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <handle_co2>
    218e:	c8 2f       	mov	r28, r24
    2190:	08 c0       	rjmp	.+16     	; 0x21a2 <handle_sample+0x82>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2192:	26 e1       	ldi	r18, 0x16	; 22
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4d e0       	ldi	r20, 0x0D	; 13
    2198:	54 e0       	ldi	r21, 0x04	; 4
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	c8 01       	movw	r24, r16
    219e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memcpy>
		return true;
	}
}
    21a2:	8c 2f       	mov	r24, r28
    21a4:	cf 91       	pop	r28
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ef 90       	pop	r14
    21ac:	df 90       	pop	r13
    21ae:	cf 90       	pop	r12
    21b0:	8f 90       	pop	r8
    21b2:	7f 90       	pop	r7
    21b4:	6f 90       	pop	r6
    21b6:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

000034a6 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    34a6:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <TWI_HAL_init>
	PM_HAL_adc_power_init();
    34aa:	0e 94 18 1c 	call	0x3830	; 0x3830 <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	0e 94 a9 1b 	call	0x3752	; 0x3752 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    34b4:	0e 94 26 1c 	call	0x384c	; 0x384c <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	0e 94 bd 1b 	call	0x377a	; 0x377a <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    34be:	0e 94 b0 1a 	call	0x3560	; 0x3560 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    34c2:	88 23       	and	r24, r24
    34c4:	11 f0       	breq	.+4      	; 0x34ca <init_methane_SCD30+0x24>
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	08 95       	ret
	return true;
    34ca:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    34cc:	08 95       	ret

Disassembly of section .text.count_parameters:

00002a00 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    2a00:	6f 92       	push	r6
    2a02:	7f 92       	push	r7
    2a04:	8f 92       	push	r8
    2a06:	cf 92       	push	r12
    2a08:	df 92       	push	r13
    2a0a:	ef 92       	push	r14
    2a0c:	3b 01       	movw	r6, r22
    2a0e:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    2a10:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    2a14:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    2a1c:	10 c0       	rjmp	.+32     	; 0x2a3e <count_parameters+0x3e>
	{
		if(src[i]==' '){
    2a1e:	e8 2c       	mov	r14, r8
    2a20:	63 01       	movw	r12, r6
    2a22:	c2 0e       	add	r12, r18
    2a24:	d3 1e       	adc	r13, r19
    2a26:	e1 1c       	adc	r14, r1
    2a28:	37 fd       	sbrc	r19, 7
    2a2a:	ea 94       	dec	r14
    2a2c:	f6 01       	movw	r30, r12
    2a2e:	94 91       	lpm	r25, Z
    2a30:	e7 fc       	sbrc	r14, 7
    2a32:	90 81       	ld	r25, Z
    2a34:	90 32       	cpi	r25, 0x20	; 32
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <count_parameters+0x3a>
			cnt++;
    2a38:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2a3a:	2f 5f       	subi	r18, 0xFF	; 255
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	26 17       	cp	r18, r22
    2a40:	37 07       	cpc	r19, r23
    2a42:	68 f3       	brcs	.-38     	; 0x2a1e <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    2a44:	ef 90       	pop	r14
    2a46:	df 90       	pop	r13
    2a48:	cf 90       	pop	r12
    2a4a:	8f 90       	pop	r8
    2a4c:	7f 90       	pop	r7
    2a4e:	6f 90       	pop	r6
    2a50:	08 95       	ret

Disassembly of section .text.par_index:

000026ac <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    26ac:	cf 92       	push	r12
    26ae:	df 92       	push	r13
    26b0:	ef 92       	push	r14
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    26ba:	44 23       	and	r20, r20
    26bc:	29 f1       	breq	.+74     	; 0x2708 <par_index+0x5c>
    26be:	04 2f       	mov	r16, r20
    26c0:	6b 01       	movw	r12, r22
    26c2:	e8 2e       	mov	r14, r24
    26c4:	c0 e0       	ldi	r28, 0x00	; 0
    26c6:	d0 e0       	ldi	r29, 0x00	; 0
    26c8:	10 e0       	ldi	r17, 0x00	; 0
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    26cc:	ae 2d       	mov	r26, r14
    26ce:	c6 01       	movw	r24, r12
    26d0:	8c 0f       	add	r24, r28
    26d2:	9d 1f       	adc	r25, r29
    26d4:	a1 1d       	adc	r26, r1
    26d6:	d7 fd       	sbrc	r29, 7
    26d8:	aa 95       	dec	r26
    26da:	fc 01       	movw	r30, r24
    26dc:	84 91       	lpm	r24, Z
    26de:	a7 fd       	sbrc	r26, 7
    26e0:	80 81       	ld	r24, Z
    26e2:	80 32       	cpi	r24, 0x20	; 32
    26e4:	31 f4       	brne	.+12     	; 0x26f2 <par_index+0x46>
			cnt++;
    26e6:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    26e8:	01 13       	cpse	r16, r17
    26ea:	03 c0       	rjmp	.+6      	; 0x26f2 <par_index+0x46>
				return i+1;
    26ec:	ce 01       	movw	r24, r28
    26ee:	01 96       	adiw	r24, 0x01	; 1
    26f0:	0d c0       	rjmp	.+26     	; 0x270c <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    26f2:	21 96       	adiw	r28, 0x01	; 1
    26f4:	8e 2d       	mov	r24, r14
    26f6:	b6 01       	movw	r22, r12
    26f8:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    26fc:	c8 17       	cp	r28, r24
    26fe:	d9 07       	cpc	r29, r25
    2700:	28 f3       	brcs	.-54     	; 0x26cc <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	02 c0       	rjmp	.+4      	; 0x270c <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	ef 90       	pop	r14
    2716:	df 90       	pop	r13
    2718:	cf 90       	pop	r12
    271a:	08 95       	ret

Disassembly of section .text.get_parameter:

0000224e <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    224e:	8f 92       	push	r8
    2250:	9f 92       	push	r9
    2252:	af 92       	push	r10
    2254:	cf 92       	push	r12
    2256:	df 92       	push	r13
    2258:	ef 92       	push	r14
    225a:	ff 92       	push	r15
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	6b 01       	movw	r12, r22
    2266:	e8 2e       	mov	r14, r24
    2268:	ea 01       	movw	r28, r20
    226a:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    226c:	0e 94 00 15 	call	0x2a00	; 0x2a00 <count_parameters>
	if(pars<parNo) return false;
    2270:	8f 15       	cp	r24, r15
    2272:	58 f1       	brcs	.+86     	; 0x22ca <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    2274:	8e 2d       	mov	r24, r14
    2276:	b6 01       	movw	r22, r12
    2278:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    227c:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    227e:	4f 2d       	mov	r20, r15
    2280:	8e 2d       	mov	r24, r14
    2282:	b6 01       	movw	r22, r12
    2284:	0e 94 56 13 	call	0x26ac	; 0x26ac <par_index>
	uint8_t parLen=0;
    2288:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    228a:	15 c0       	rjmp	.+42     	; 0x22b6 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    228c:	46 01       	movw	r8, r12
    228e:	ae 2c       	mov	r10, r14
    2290:	82 0e       	add	r8, r18
    2292:	93 1e       	adc	r9, r19
    2294:	a1 1c       	adc	r10, r1
    2296:	37 fd       	sbrc	r19, 7
    2298:	aa 94       	dec	r10
    229a:	4a 2d       	mov	r20, r10
    229c:	94 01       	movw	r18, r8
    229e:	f4 01       	movw	r30, r8
    22a0:	24 91       	lpm	r18, Z
    22a2:	47 fd       	sbrc	r20, 7
    22a4:	20 81       	ld	r18, Z
    22a6:	20 32       	cpi	r18, 0x20	; 32
    22a8:	59 f0       	breq	.+22     	; 0x22c0 <get_parameter+0x72>
		par[parLen++]=src[i];
    22aa:	fe 01       	movw	r30, r28
    22ac:	e9 0f       	add	r30, r25
    22ae:	f1 1d       	adc	r31, r1
    22b0:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    22b2:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    22b4:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	20 17       	cp	r18, r16
    22bc:	31 07       	cpc	r19, r17
    22be:	30 f3       	brcs	.-52     	; 0x228c <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    22c0:	c9 0f       	add	r28, r25
    22c2:	d1 1d       	adc	r29, r1
    22c4:	18 82       	st	Y, r1
	
	return true;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    22ca:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	df 90       	pop	r13
    22da:	cf 90       	pop	r12
    22dc:	af 90       	pop	r10
    22de:	9f 90       	pop	r9
    22e0:	8f 90       	pop	r8
    22e2:	08 95       	ret

Disassembly of section .text.calc_crc8:

000031e2 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    31e2:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    31e4:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    31e6:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    31e8:	14 c0       	rjmp	.+40     	; 0x3212 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    31ea:	fa 01       	movw	r30, r20
    31ec:	e3 0f       	add	r30, r19
    31ee:	f1 1d       	adc	r31, r1
    31f0:	90 81       	ld	r25, Z
    31f2:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    31f4:	28 e0       	ldi	r18, 0x08	; 8
    31f6:	0a c0       	rjmp	.+20     	; 0x320c <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    31f8:	88 23       	and	r24, r24
    31fa:	34 f4       	brge	.+12     	; 0x3208 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	91 e3       	ldi	r25, 0x31	; 49
    3204:	89 27       	eor	r24, r25
    3206:	01 c0       	rjmp	.+2      	; 0x320a <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    3208:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    320a:	21 50       	subi	r18, 0x01	; 1
    320c:	21 11       	cpse	r18, r1
    320e:	f4 cf       	rjmp	.-24     	; 0x31f8 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3210:	3f 5f       	subi	r19, 0xFF	; 255
    3212:	36 17       	cp	r19, r22
    3214:	50 f3       	brcs	.-44     	; 0x31ea <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    3216:	08 95       	ret

Disassembly of section .text.get_decimal:

00001e8e <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    1e8e:	cf 92       	push	r12
    1e90:	df 92       	push	r13
    1e92:	ef 92       	push	r14
    1e94:	ff 92       	push	r15
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    1ea0:	10 e0       	ldi	r17, 0x00	; 0
    1ea2:	08 c0       	rjmp	.+16     	; 0x1eb4 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    1ea4:	cc 0d       	add	r28, r12
    1ea6:	dd 1d       	adc	r29, r13
    1ea8:	88 81       	ld	r24, Y
    1eaa:	8e 32       	cpi	r24, 0x2E	; 46
    1eac:	11 f4       	brne	.+4      	; 0x1eb2 <get_decimal+0x24>
			index=i+1;
    1eae:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    1eb0:	0c c0       	rjmp	.+24     	; 0x1eca <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    1eb2:	1f 5f       	subi	r17, 0xFF	; 255
    1eb4:	c1 2f       	mov	r28, r17
    1eb6:	d0 e0       	ldi	r29, 0x00	; 0
    1eb8:	b6 01       	movw	r22, r12
    1eba:	80 e8       	ldi	r24, 0x80	; 128
    1ebc:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	c8 17       	cp	r28, r24
    1ec4:	d9 07       	cpc	r29, r25
    1ec6:	70 f3       	brcs	.-36     	; 0x1ea4 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    1ec8:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    1eca:	11 23       	and	r17, r17
    1ecc:	71 f1       	breq	.+92     	; 0x1f2a <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    1ece:	c1 0e       	add	r12, r17
    1ed0:	d1 1c       	adc	r13, r1
    1ed2:	80 e8       	ldi	r24, 0x80	; 128
    1ed4:	e8 2e       	mov	r14, r24
    1ed6:	8e 2d       	mov	r24, r14
    1ed8:	b6 01       	movw	r22, r12
    1eda:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    1ede:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    1ee0:	8e 2d       	mov	r24, r14
    1ee2:	b6 01       	movw	r22, r12
    1ee4:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <atoi>
    1ee8:	8c 01       	movw	r16, r24
	float divisor=1;
    1eea:	0f 2e       	mov	r0, r31
    1eec:	c1 2c       	mov	r12, r1
    1eee:	d1 2c       	mov	r13, r1
    1ef0:	f0 e8       	ldi	r31, 0x80	; 128
    1ef2:	ef 2e       	mov	r14, r31
    1ef4:	ff e3       	ldi	r31, 0x3F	; 63
    1ef6:	ff 2e       	mov	r15, r31
    1ef8:	f0 2d       	mov	r31, r0
	
	while(len>0){
    1efa:	0b c0       	rjmp	.+22     	; 0x1f12 <get_decimal+0x84>
		divisor*=10;
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	c7 01       	movw	r24, r14
    1f06:	b6 01       	movw	r22, r12
    1f08:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__mulsf3>
    1f0c:	6b 01       	movw	r12, r22
    1f0e:	7c 01       	movw	r14, r24
		len--;
    1f10:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    1f12:	c1 11       	cpse	r28, r1
    1f14:	f3 cf       	rjmp	.-26     	; 0x1efc <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    1f16:	b8 01       	movw	r22, r16
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 b7 11 	call	0x236e	; 0x236e <__floatunsisf>
    1f20:	a7 01       	movw	r20, r14
    1f22:	96 01       	movw	r18, r12
    1f24:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__divsf3>
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	df 90       	pop	r13
    1f3e:	cf 90       	pop	r12
    1f40:	08 95       	ret

Disassembly of section .text.str2flaot:

00002b3e <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    2b3e:	cf 92       	push	r12
    2b40:	df 92       	push	r13
    2b42:	ef 92       	push	r14
    2b44:	ff 92       	push	r15
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    2b50:	bc 01       	movw	r22, r24
    2b52:	80 e8       	ldi	r24, 0x80	; 128
    2b54:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <atoi>
    2b58:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    2b5a:	c8 01       	movw	r24, r16
    2b5c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <get_decimal>
    2b60:	6b 01       	movw	r12, r22
    2b62:	7c 01       	movw	r14, r24
	return intVal+deci;
    2b64:	be 01       	movw	r22, r28
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 b7 11 	call	0x236e	; 0x236e <__floatunsisf>
    2b6e:	9b 01       	movw	r18, r22
    2b70:	ac 01       	movw	r20, r24
    2b72:	c7 01       	movw	r24, r14
    2b74:	b6 01       	movw	r22, r12
    2b76:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
	
	
}
    2b7a:	df 91       	pop	r29
    2b7c:	cf 91       	pop	r28
    2b7e:	1f 91       	pop	r17
    2b80:	0f 91       	pop	r16
    2b82:	ff 90       	pop	r15
    2b84:	ef 90       	pop	r14
    2b86:	df 90       	pop	r13
    2b88:	cf 90       	pop	r12
    2b8a:	08 95       	ret

Disassembly of section .text.is_float:

000028a8 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    28a8:	ef 92       	push	r14
    28aa:	ff 92       	push	r15
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    28b6:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    28b8:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    28ba:	0d c0       	rjmp	.+26     	; 0x28d6 <is_float+0x2e>
	{
		if(str[i]=='.'){
    28bc:	ce 0d       	add	r28, r14
    28be:	df 1d       	adc	r29, r15
    28c0:	88 81       	ld	r24, Y
    28c2:	8e 32       	cpi	r24, 0x2E	; 46
    28c4:	21 f4       	brne	.+8      	; 0x28ce <is_float+0x26>
			if (got_dot)
    28c6:	01 11       	cpse	r16, r1
    28c8:	11 c0       	rjmp	.+34     	; 0x28ec <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    28ca:	01 e0       	ldi	r16, 0x01	; 1
    28cc:	03 c0       	rjmp	.+6      	; 0x28d4 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    28ce:	80 53       	subi	r24, 0x30	; 48
    28d0:	8a 30       	cpi	r24, 0x0A	; 10
    28d2:	70 f4       	brcc	.+28     	; 0x28f0 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    28d4:	1f 5f       	subi	r17, 0xFF	; 255
    28d6:	c1 2f       	mov	r28, r17
    28d8:	d0 e0       	ldi	r29, 0x00	; 0
    28da:	b7 01       	movw	r22, r14
    28dc:	80 e8       	ldi	r24, 0x80	; 128
    28de:	0e 94 01 1a 	call	0x3402	; 0x3402 <strlen>
    28e2:	c8 17       	cp	r28, r24
    28e4:	d9 07       	cpc	r29, r25
    28e6:	50 f3       	brcs	.-44     	; 0x28bc <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	03 c0       	rjmp	.+6      	; 0x28f2 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	01 c0       	rjmp	.+2      	; 0x28f2 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    28f0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	1f 91       	pop	r17
    28f8:	0f 91       	pop	r16
    28fa:	ff 90       	pop	r15
    28fc:	ef 90       	pop	r14
    28fe:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000038ca <__subsf3>:
    38ca:	50 58       	subi	r21, 0x80	; 128

000038cc <__addsf3>:
    38cc:	bb 27       	eor	r27, r27
    38ce:	aa 27       	eor	r26, r26
    38d0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__addsf3x>
    38d4:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001c48 <__addsf3x>:
    1c48:	11 c0       	rjmp	.+34     	; 0x1c6c <__addsf3x+0x24>
    1c4a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__fp_pscA>
    1c4e:	38 f0       	brcs	.+14     	; 0x1c5e <__addsf3x+0x16>
    1c50:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__fp_pscB>
    1c54:	20 f0       	brcs	.+8      	; 0x1c5e <__addsf3x+0x16>
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <__addsf3x+0x1e>
    1c58:	9f 3f       	cpi	r25, 0xFF	; 255
    1c5a:	19 f4       	brne	.+6      	; 0x1c62 <__addsf3x+0x1a>
    1c5c:	26 f4       	brtc	.+8      	; 0x1c66 <__addsf3x+0x1e>
    1c5e:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__fp_nan>
    1c62:	0e f4       	brtc	.+2      	; 0x1c66 <__addsf3x+0x1e>
    1c64:	e0 95       	com	r30
    1c66:	e7 fb       	bst	r30, 7
    1c68:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__fp_inf>
    1c6c:	e9 2f       	mov	r30, r25
    1c6e:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__fp_split3>
    1c72:	58 f3       	brcs	.-42     	; 0x1c4a <__addsf3x+0x2>
    1c74:	ba 17       	cp	r27, r26
    1c76:	62 07       	cpc	r22, r18
    1c78:	73 07       	cpc	r23, r19
    1c7a:	84 07       	cpc	r24, r20
    1c7c:	95 07       	cpc	r25, r21
    1c7e:	20 f0       	brcs	.+8      	; 0x1c88 <__addsf3x+0x40>
    1c80:	79 f4       	brne	.+30     	; 0x1ca0 <__addsf3x+0x58>
    1c82:	a6 f5       	brtc	.+104    	; 0x1cec <__addsf3x+0xa4>
    1c84:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__fp_zero>
    1c88:	0e f4       	brtc	.+2      	; 0x1c8c <__addsf3x+0x44>
    1c8a:	e0 95       	com	r30
    1c8c:	0b 2e       	mov	r0, r27
    1c8e:	ba 2f       	mov	r27, r26
    1c90:	a0 2d       	mov	r26, r0
    1c92:	0b 01       	movw	r0, r22
    1c94:	b9 01       	movw	r22, r18
    1c96:	90 01       	movw	r18, r0
    1c98:	0c 01       	movw	r0, r24
    1c9a:	ca 01       	movw	r24, r20
    1c9c:	a0 01       	movw	r20, r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	ff 27       	eor	r31, r31
    1ca2:	59 1b       	sub	r21, r25
    1ca4:	99 f0       	breq	.+38     	; 0x1ccc <__addsf3x+0x84>
    1ca6:	59 3f       	cpi	r21, 0xF9	; 249
    1ca8:	50 f4       	brcc	.+20     	; 0x1cbe <__addsf3x+0x76>
    1caa:	50 3e       	cpi	r21, 0xE0	; 224
    1cac:	68 f1       	brcs	.+90     	; 0x1d08 <__addsf3x+0xc0>
    1cae:	1a 16       	cp	r1, r26
    1cb0:	f0 40       	sbci	r31, 0x00	; 0
    1cb2:	a2 2f       	mov	r26, r18
    1cb4:	23 2f       	mov	r18, r19
    1cb6:	34 2f       	mov	r19, r20
    1cb8:	44 27       	eor	r20, r20
    1cba:	58 5f       	subi	r21, 0xF8	; 248
    1cbc:	f3 cf       	rjmp	.-26     	; 0x1ca4 <__addsf3x+0x5c>
    1cbe:	46 95       	lsr	r20
    1cc0:	37 95       	ror	r19
    1cc2:	27 95       	ror	r18
    1cc4:	a7 95       	ror	r26
    1cc6:	f0 40       	sbci	r31, 0x00	; 0
    1cc8:	53 95       	inc	r21
    1cca:	c9 f7       	brne	.-14     	; 0x1cbe <__addsf3x+0x76>
    1ccc:	7e f4       	brtc	.+30     	; 0x1cec <__addsf3x+0xa4>
    1cce:	1f 16       	cp	r1, r31
    1cd0:	ba 0b       	sbc	r27, r26
    1cd2:	62 0b       	sbc	r22, r18
    1cd4:	73 0b       	sbc	r23, r19
    1cd6:	84 0b       	sbc	r24, r20
    1cd8:	ba f0       	brmi	.+46     	; 0x1d08 <__addsf3x+0xc0>
    1cda:	91 50       	subi	r25, 0x01	; 1
    1cdc:	a1 f0       	breq	.+40     	; 0x1d06 <__addsf3x+0xbe>
    1cde:	ff 0f       	add	r31, r31
    1ce0:	bb 1f       	adc	r27, r27
    1ce2:	66 1f       	adc	r22, r22
    1ce4:	77 1f       	adc	r23, r23
    1ce6:	88 1f       	adc	r24, r24
    1ce8:	c2 f7       	brpl	.-16     	; 0x1cda <__addsf3x+0x92>
    1cea:	0e c0       	rjmp	.+28     	; 0x1d08 <__addsf3x+0xc0>
    1cec:	ba 0f       	add	r27, r26
    1cee:	62 1f       	adc	r22, r18
    1cf0:	73 1f       	adc	r23, r19
    1cf2:	84 1f       	adc	r24, r20
    1cf4:	48 f4       	brcc	.+18     	; 0x1d08 <__addsf3x+0xc0>
    1cf6:	87 95       	ror	r24
    1cf8:	77 95       	ror	r23
    1cfa:	67 95       	ror	r22
    1cfc:	b7 95       	ror	r27
    1cfe:	f7 95       	ror	r31
    1d00:	9e 3f       	cpi	r25, 0xFE	; 254
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <__addsf3x+0xbe>
    1d04:	b0 cf       	rjmp	.-160    	; 0x1c66 <__addsf3x+0x1e>
    1d06:	93 95       	inc	r25
    1d08:	88 0f       	add	r24, r24
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <__addsf3x+0xc6>
    1d0c:	99 27       	eor	r25, r25
    1d0e:	ee 0f       	add	r30, r30
    1d10:	97 95       	ror	r25
    1d12:	87 95       	ror	r24
    1d14:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000039d8 <__divsf3>:
    39d8:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__divsf3x>
    39dc:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001a96 <__divsf3x>:
    1a96:	10 c0       	rjmp	.+32     	; 0x1ab8 <__divsf3x+0x22>
    1a98:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__fp_pscB>
    1a9c:	58 f0       	brcs	.+22     	; 0x1ab4 <__divsf3x+0x1e>
    1a9e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__fp_pscA>
    1aa2:	40 f0       	brcs	.+16     	; 0x1ab4 <__divsf3x+0x1e>
    1aa4:	29 f4       	brne	.+10     	; 0x1ab0 <__divsf3x+0x1a>
    1aa6:	5f 3f       	cpi	r21, 0xFF	; 255
    1aa8:	29 f0       	breq	.+10     	; 0x1ab4 <__divsf3x+0x1e>
    1aaa:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__fp_inf>
    1aae:	51 11       	cpse	r21, r1
    1ab0:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__fp_szero>
    1ab4:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__fp_nan>
    1ab8:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__fp_split3>
    1abc:	68 f3       	brcs	.-38     	; 0x1a98 <__divsf3x+0x2>

00001abe <__divsf3_pse>:
    1abe:	99 23       	and	r25, r25
    1ac0:	b1 f3       	breq	.-20     	; 0x1aae <__divsf3x+0x18>
    1ac2:	55 23       	and	r21, r21
    1ac4:	91 f3       	breq	.-28     	; 0x1aaa <__divsf3x+0x14>
    1ac6:	95 1b       	sub	r25, r21
    1ac8:	55 0b       	sbc	r21, r21
    1aca:	bb 27       	eor	r27, r27
    1acc:	aa 27       	eor	r26, r26
    1ace:	62 17       	cp	r22, r18
    1ad0:	73 07       	cpc	r23, r19
    1ad2:	84 07       	cpc	r24, r20
    1ad4:	38 f0       	brcs	.+14     	; 0x1ae4 <__divsf3_pse+0x26>
    1ad6:	9f 5f       	subi	r25, 0xFF	; 255
    1ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    1ada:	22 0f       	add	r18, r18
    1adc:	33 1f       	adc	r19, r19
    1ade:	44 1f       	adc	r20, r20
    1ae0:	aa 1f       	adc	r26, r26
    1ae2:	a9 f3       	breq	.-22     	; 0x1ace <__divsf3_pse+0x10>
    1ae4:	35 d0       	rcall	.+106    	; 0x1b50 <__divsf3_pse+0x92>
    1ae6:	0e 2e       	mov	r0, r30
    1ae8:	3a f0       	brmi	.+14     	; 0x1af8 <__divsf3_pse+0x3a>
    1aea:	e0 e8       	ldi	r30, 0x80	; 128
    1aec:	32 d0       	rcall	.+100    	; 0x1b52 <__divsf3_pse+0x94>
    1aee:	91 50       	subi	r25, 0x01	; 1
    1af0:	50 40       	sbci	r21, 0x00	; 0
    1af2:	e6 95       	lsr	r30
    1af4:	00 1c       	adc	r0, r0
    1af6:	ca f7       	brpl	.-14     	; 0x1aea <__divsf3_pse+0x2c>
    1af8:	2b d0       	rcall	.+86     	; 0x1b50 <__divsf3_pse+0x92>
    1afa:	fe 2f       	mov	r31, r30
    1afc:	29 d0       	rcall	.+82     	; 0x1b50 <__divsf3_pse+0x92>
    1afe:	66 0f       	add	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	88 1f       	adc	r24, r24
    1b04:	bb 1f       	adc	r27, r27
    1b06:	26 17       	cp	r18, r22
    1b08:	37 07       	cpc	r19, r23
    1b0a:	48 07       	cpc	r20, r24
    1b0c:	ab 07       	cpc	r26, r27
    1b0e:	b0 e8       	ldi	r27, 0x80	; 128
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <__divsf3_pse+0x56>
    1b12:	bb 0b       	sbc	r27, r27
    1b14:	80 2d       	mov	r24, r0
    1b16:	bf 01       	movw	r22, r30
    1b18:	ff 27       	eor	r31, r31
    1b1a:	93 58       	subi	r25, 0x83	; 131
    1b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1e:	3a f0       	brmi	.+14     	; 0x1b2e <__divsf3_pse+0x70>
    1b20:	9e 3f       	cpi	r25, 0xFE	; 254
    1b22:	51 05       	cpc	r21, r1
    1b24:	78 f0       	brcs	.+30     	; 0x1b44 <__divsf3_pse+0x86>
    1b26:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__fp_inf>
    1b2a:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__fp_szero>
    1b2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b30:	e4 f3       	brlt	.-8      	; 0x1b2a <__divsf3_pse+0x6c>
    1b32:	98 3e       	cpi	r25, 0xE8	; 232
    1b34:	d4 f3       	brlt	.-12     	; 0x1b2a <__divsf3_pse+0x6c>
    1b36:	86 95       	lsr	r24
    1b38:	77 95       	ror	r23
    1b3a:	67 95       	ror	r22
    1b3c:	b7 95       	ror	r27
    1b3e:	f7 95       	ror	r31
    1b40:	9f 5f       	subi	r25, 0xFF	; 255
    1b42:	c9 f7       	brne	.-14     	; 0x1b36 <__divsf3_pse+0x78>
    1b44:	88 0f       	add	r24, r24
    1b46:	91 1d       	adc	r25, r1
    1b48:	96 95       	lsr	r25
    1b4a:	87 95       	ror	r24
    1b4c:	97 f9       	bld	r25, 7
    1b4e:	08 95       	ret
    1b50:	e1 e0       	ldi	r30, 0x01	; 1
    1b52:	66 0f       	add	r22, r22
    1b54:	77 1f       	adc	r23, r23
    1b56:	88 1f       	adc	r24, r24
    1b58:	bb 1f       	adc	r27, r27
    1b5a:	62 17       	cp	r22, r18
    1b5c:	73 07       	cpc	r23, r19
    1b5e:	84 07       	cpc	r24, r20
    1b60:	ba 07       	cpc	r27, r26
    1b62:	20 f0       	brcs	.+8      	; 0x1b6c <__divsf3_pse+0xae>
    1b64:	62 1b       	sub	r22, r18
    1b66:	73 0b       	sbc	r23, r19
    1b68:	84 0b       	sbc	r24, r20
    1b6a:	ba 0b       	sbc	r27, r26
    1b6c:	ee 1f       	adc	r30, r30
    1b6e:	88 f7       	brcc	.-30     	; 0x1b52 <__divsf3_pse+0x94>
    1b70:	e0 95       	com	r30
    1b72:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000027f0 <__fixunssfsi>:
    27f0:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <__fp_splitA>
    27f4:	88 f0       	brcs	.+34     	; 0x2818 <__fixunssfsi+0x28>
    27f6:	9f 57       	subi	r25, 0x7F	; 127
    27f8:	98 f0       	brcs	.+38     	; 0x2820 <__fixunssfsi+0x30>
    27fa:	b9 2f       	mov	r27, r25
    27fc:	99 27       	eor	r25, r25
    27fe:	b7 51       	subi	r27, 0x17	; 23
    2800:	b0 f0       	brcs	.+44     	; 0x282e <__fixunssfsi+0x3e>
    2802:	e1 f0       	breq	.+56     	; 0x283c <__fixunssfsi+0x4c>
    2804:	66 0f       	add	r22, r22
    2806:	77 1f       	adc	r23, r23
    2808:	88 1f       	adc	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	1a f0       	brmi	.+6      	; 0x2814 <__fixunssfsi+0x24>
    280e:	ba 95       	dec	r27
    2810:	c9 f7       	brne	.-14     	; 0x2804 <__fixunssfsi+0x14>
    2812:	14 c0       	rjmp	.+40     	; 0x283c <__fixunssfsi+0x4c>
    2814:	b1 30       	cpi	r27, 0x01	; 1
    2816:	91 f0       	breq	.+36     	; 0x283c <__fixunssfsi+0x4c>
    2818:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <__fp_zero>
    281c:	b1 e0       	ldi	r27, 0x01	; 1
    281e:	08 95       	ret
    2820:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__fp_zero>
    2824:	67 2f       	mov	r22, r23
    2826:	78 2f       	mov	r23, r24
    2828:	88 27       	eor	r24, r24
    282a:	b8 5f       	subi	r27, 0xF8	; 248
    282c:	39 f0       	breq	.+14     	; 0x283c <__fixunssfsi+0x4c>
    282e:	b9 3f       	cpi	r27, 0xF9	; 249
    2830:	cc f3       	brlt	.-14     	; 0x2824 <__fixunssfsi+0x34>
    2832:	86 95       	lsr	r24
    2834:	77 95       	ror	r23
    2836:	67 95       	ror	r22
    2838:	b3 95       	inc	r27
    283a:	d9 f7       	brne	.-10     	; 0x2832 <__fixunssfsi+0x42>
    283c:	3e f4       	brtc	.+14     	; 0x284c <__fixunssfsi+0x5c>
    283e:	90 95       	com	r25
    2840:	80 95       	com	r24
    2842:	70 95       	com	r23
    2844:	61 95       	neg	r22
    2846:	7f 4f       	sbci	r23, 0xFF	; 255
    2848:	8f 4f       	sbci	r24, 0xFF	; 255
    284a:	9f 4f       	sbci	r25, 0xFF	; 255
    284c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000236e <__floatunsisf>:
    236e:	e8 94       	clt
    2370:	09 c0       	rjmp	.+18     	; 0x2384 <__floatsisf+0x12>

00002372 <__floatsisf>:
    2372:	97 fb       	bst	r25, 7
    2374:	3e f4       	brtc	.+14     	; 0x2384 <__floatsisf+0x12>
    2376:	90 95       	com	r25
    2378:	80 95       	com	r24
    237a:	70 95       	com	r23
    237c:	61 95       	neg	r22
    237e:	7f 4f       	sbci	r23, 0xFF	; 255
    2380:	8f 4f       	sbci	r24, 0xFF	; 255
    2382:	9f 4f       	sbci	r25, 0xFF	; 255
    2384:	99 23       	and	r25, r25
    2386:	a9 f0       	breq	.+42     	; 0x23b2 <__floatsisf+0x40>
    2388:	f9 2f       	mov	r31, r25
    238a:	96 e9       	ldi	r25, 0x96	; 150
    238c:	bb 27       	eor	r27, r27
    238e:	93 95       	inc	r25
    2390:	f6 95       	lsr	r31
    2392:	87 95       	ror	r24
    2394:	77 95       	ror	r23
    2396:	67 95       	ror	r22
    2398:	b7 95       	ror	r27
    239a:	f1 11       	cpse	r31, r1
    239c:	f8 cf       	rjmp	.-16     	; 0x238e <__floatsisf+0x1c>
    239e:	fa f4       	brpl	.+62     	; 0x23de <__floatsisf+0x6c>
    23a0:	bb 0f       	add	r27, r27
    23a2:	11 f4       	brne	.+4      	; 0x23a8 <__floatsisf+0x36>
    23a4:	60 ff       	sbrs	r22, 0
    23a6:	1b c0       	rjmp	.+54     	; 0x23de <__floatsisf+0x6c>
    23a8:	6f 5f       	subi	r22, 0xFF	; 255
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	8f 4f       	sbci	r24, 0xFF	; 255
    23ae:	9f 4f       	sbci	r25, 0xFF	; 255
    23b0:	16 c0       	rjmp	.+44     	; 0x23de <__floatsisf+0x6c>
    23b2:	88 23       	and	r24, r24
    23b4:	11 f0       	breq	.+4      	; 0x23ba <__floatsisf+0x48>
    23b6:	96 e9       	ldi	r25, 0x96	; 150
    23b8:	11 c0       	rjmp	.+34     	; 0x23dc <__floatsisf+0x6a>
    23ba:	77 23       	and	r23, r23
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <__floatsisf+0x54>
    23be:	9e e8       	ldi	r25, 0x8E	; 142
    23c0:	87 2f       	mov	r24, r23
    23c2:	76 2f       	mov	r23, r22
    23c4:	05 c0       	rjmp	.+10     	; 0x23d0 <__floatsisf+0x5e>
    23c6:	66 23       	and	r22, r22
    23c8:	71 f0       	breq	.+28     	; 0x23e6 <__floatsisf+0x74>
    23ca:	96 e8       	ldi	r25, 0x86	; 134
    23cc:	86 2f       	mov	r24, r22
    23ce:	70 e0       	ldi	r23, 0x00	; 0
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	2a f0       	brmi	.+10     	; 0x23de <__floatsisf+0x6c>
    23d4:	9a 95       	dec	r25
    23d6:	66 0f       	add	r22, r22
    23d8:	77 1f       	adc	r23, r23
    23da:	88 1f       	adc	r24, r24
    23dc:	da f7       	brpl	.-10     	; 0x23d4 <__floatsisf+0x62>
    23de:	88 0f       	add	r24, r24
    23e0:	96 95       	lsr	r25
    23e2:	87 95       	ror	r24
    23e4:	97 f9       	bld	r25, 7
    23e6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003974 <__fp_inf>:
    3974:	97 f9       	bld	r25, 7
    3976:	9f 67       	ori	r25, 0x7F	; 127
    3978:	80 e8       	ldi	r24, 0x80	; 128
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	60 e0       	ldi	r22, 0x00	; 0
    397e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000039fc <__fp_nan>:
    39fc:	9f ef       	ldi	r25, 0xFF	; 255
    39fe:	80 ec       	ldi	r24, 0xC0	; 192
    3a00:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000038d8 <__fp_pscA>:
    38d8:	00 24       	eor	r0, r0
    38da:	0a 94       	dec	r0
    38dc:	16 16       	cp	r1, r22
    38de:	17 06       	cpc	r1, r23
    38e0:	18 06       	cpc	r1, r24
    38e2:	09 06       	cpc	r0, r25
    38e4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000038e6 <__fp_pscB>:
    38e6:	00 24       	eor	r0, r0
    38e8:	0a 94       	dec	r0
    38ea:	12 16       	cp	r1, r18
    38ec:	13 06       	cpc	r1, r19
    38ee:	14 06       	cpc	r1, r20
    38f0:	05 06       	cpc	r0, r21
    38f2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003582 <__fp_round>:
    3582:	09 2e       	mov	r0, r25
    3584:	03 94       	inc	r0
    3586:	00 0c       	add	r0, r0
    3588:	11 f4       	brne	.+4      	; 0x358e <__fp_round+0xc>
    358a:	88 23       	and	r24, r24
    358c:	52 f0       	brmi	.+20     	; 0x35a2 <__fp_round+0x20>
    358e:	bb 0f       	add	r27, r27
    3590:	40 f4       	brcc	.+16     	; 0x35a2 <__fp_round+0x20>
    3592:	bf 2b       	or	r27, r31
    3594:	11 f4       	brne	.+4      	; 0x359a <__fp_round+0x18>
    3596:	60 ff       	sbrs	r22, 0
    3598:	04 c0       	rjmp	.+8      	; 0x35a2 <__fp_round+0x20>
    359a:	6f 5f       	subi	r22, 0xFF	; 255
    359c:	7f 4f       	sbci	r23, 0xFF	; 255
    359e:	8f 4f       	sbci	r24, 0xFF	; 255
    35a0:	9f 4f       	sbci	r25, 0xFF	; 255
    35a2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002f06 <__fp_split3>:
    2f06:	57 fd       	sbrc	r21, 7
    2f08:	90 58       	subi	r25, 0x80	; 128
    2f0a:	44 0f       	add	r20, r20
    2f0c:	55 1f       	adc	r21, r21
    2f0e:	59 f0       	breq	.+22     	; 0x2f26 <__fp_splitA+0x10>
    2f10:	5f 3f       	cpi	r21, 0xFF	; 255
    2f12:	71 f0       	breq	.+28     	; 0x2f30 <__fp_splitA+0x1a>
    2f14:	47 95       	ror	r20

00002f16 <__fp_splitA>:
    2f16:	88 0f       	add	r24, r24
    2f18:	97 fb       	bst	r25, 7
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	61 f0       	breq	.+24     	; 0x2f36 <__fp_splitA+0x20>
    2f1e:	9f 3f       	cpi	r25, 0xFF	; 255
    2f20:	79 f0       	breq	.+30     	; 0x2f40 <__fp_splitA+0x2a>
    2f22:	87 95       	ror	r24
    2f24:	08 95       	ret
    2f26:	12 16       	cp	r1, r18
    2f28:	13 06       	cpc	r1, r19
    2f2a:	14 06       	cpc	r1, r20
    2f2c:	55 1f       	adc	r21, r21
    2f2e:	f2 cf       	rjmp	.-28     	; 0x2f14 <__fp_split3+0xe>
    2f30:	46 95       	lsr	r20
    2f32:	f1 df       	rcall	.-30     	; 0x2f16 <__fp_splitA>
    2f34:	08 c0       	rjmp	.+16     	; 0x2f46 <__fp_splitA+0x30>
    2f36:	16 16       	cp	r1, r22
    2f38:	17 06       	cpc	r1, r23
    2f3a:	18 06       	cpc	r1, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	f1 cf       	rjmp	.-30     	; 0x2f22 <__fp_splitA+0xc>
    2f40:	86 95       	lsr	r24
    2f42:	71 05       	cpc	r23, r1
    2f44:	61 05       	cpc	r22, r1
    2f46:	08 94       	sec
    2f48:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000038f4 <__fp_zero>:
    38f4:	e8 94       	clt

000038f6 <__fp_szero>:
    38f6:	bb 27       	eor	r27, r27
    38f8:	66 27       	eor	r22, r22
    38fa:	77 27       	eor	r23, r23
    38fc:	cb 01       	movw	r24, r22
    38fe:	97 f9       	bld	r25, 7
    3900:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000039e0 <__mulsf3>:
    39e0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__mulsf3x>
    39e4:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001b74 <__mulsf3x>:
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <__mulsf3x+0x20>
    1b76:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__fp_pscA>
    1b7a:	38 f0       	brcs	.+14     	; 0x1b8a <__mulsf3x+0x16>
    1b7c:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__fp_pscB>
    1b80:	20 f0       	brcs	.+8      	; 0x1b8a <__mulsf3x+0x16>
    1b82:	95 23       	and	r25, r21
    1b84:	11 f0       	breq	.+4      	; 0x1b8a <__mulsf3x+0x16>
    1b86:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__fp_inf>
    1b8a:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__fp_nan>
    1b8e:	11 24       	eor	r1, r1
    1b90:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__fp_szero>
    1b94:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__fp_split3>
    1b98:	70 f3       	brcs	.-36     	; 0x1b76 <__mulsf3x+0x2>

00001b9a <__mulsf3_pse>:
    1b9a:	95 9f       	mul	r25, r21
    1b9c:	c1 f3       	breq	.-16     	; 0x1b8e <__mulsf3x+0x1a>
    1b9e:	95 0f       	add	r25, r21
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	55 1f       	adc	r21, r21
    1ba4:	62 9f       	mul	r22, r18
    1ba6:	f0 01       	movw	r30, r0
    1ba8:	72 9f       	mul	r23, r18
    1baa:	bb 27       	eor	r27, r27
    1bac:	f0 0d       	add	r31, r0
    1bae:	b1 1d       	adc	r27, r1
    1bb0:	63 9f       	mul	r22, r19
    1bb2:	aa 27       	eor	r26, r26
    1bb4:	f0 0d       	add	r31, r0
    1bb6:	b1 1d       	adc	r27, r1
    1bb8:	aa 1f       	adc	r26, r26
    1bba:	64 9f       	mul	r22, r20
    1bbc:	66 27       	eor	r22, r22
    1bbe:	b0 0d       	add	r27, r0
    1bc0:	a1 1d       	adc	r26, r1
    1bc2:	66 1f       	adc	r22, r22
    1bc4:	82 9f       	mul	r24, r18
    1bc6:	22 27       	eor	r18, r18
    1bc8:	b0 0d       	add	r27, r0
    1bca:	a1 1d       	adc	r26, r1
    1bcc:	62 1f       	adc	r22, r18
    1bce:	73 9f       	mul	r23, r19
    1bd0:	b0 0d       	add	r27, r0
    1bd2:	a1 1d       	adc	r26, r1
    1bd4:	62 1f       	adc	r22, r18
    1bd6:	83 9f       	mul	r24, r19
    1bd8:	a0 0d       	add	r26, r0
    1bda:	61 1d       	adc	r22, r1
    1bdc:	22 1f       	adc	r18, r18
    1bde:	74 9f       	mul	r23, r20
    1be0:	33 27       	eor	r19, r19
    1be2:	a0 0d       	add	r26, r0
    1be4:	61 1d       	adc	r22, r1
    1be6:	23 1f       	adc	r18, r19
    1be8:	84 9f       	mul	r24, r20
    1bea:	60 0d       	add	r22, r0
    1bec:	21 1d       	adc	r18, r1
    1bee:	82 2f       	mov	r24, r18
    1bf0:	76 2f       	mov	r23, r22
    1bf2:	6a 2f       	mov	r22, r26
    1bf4:	11 24       	eor	r1, r1
    1bf6:	9f 57       	subi	r25, 0x7F	; 127
    1bf8:	50 40       	sbci	r21, 0x00	; 0
    1bfa:	9a f0       	brmi	.+38     	; 0x1c22 <__mulsf3_pse+0x88>
    1bfc:	f1 f0       	breq	.+60     	; 0x1c3a <__mulsf3_pse+0xa0>
    1bfe:	88 23       	and	r24, r24
    1c00:	4a f0       	brmi	.+18     	; 0x1c14 <__mulsf3_pse+0x7a>
    1c02:	ee 0f       	add	r30, r30
    1c04:	ff 1f       	adc	r31, r31
    1c06:	bb 1f       	adc	r27, r27
    1c08:	66 1f       	adc	r22, r22
    1c0a:	77 1f       	adc	r23, r23
    1c0c:	88 1f       	adc	r24, r24
    1c0e:	91 50       	subi	r25, 0x01	; 1
    1c10:	50 40       	sbci	r21, 0x00	; 0
    1c12:	a9 f7       	brne	.-22     	; 0x1bfe <__mulsf3_pse+0x64>
    1c14:	9e 3f       	cpi	r25, 0xFE	; 254
    1c16:	51 05       	cpc	r21, r1
    1c18:	80 f0       	brcs	.+32     	; 0x1c3a <__mulsf3_pse+0xa0>
    1c1a:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__fp_inf>
    1c1e:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <__fp_szero>
    1c22:	5f 3f       	cpi	r21, 0xFF	; 255
    1c24:	e4 f3       	brlt	.-8      	; 0x1c1e <__mulsf3_pse+0x84>
    1c26:	98 3e       	cpi	r25, 0xE8	; 232
    1c28:	d4 f3       	brlt	.-12     	; 0x1c1e <__mulsf3_pse+0x84>
    1c2a:	86 95       	lsr	r24
    1c2c:	77 95       	ror	r23
    1c2e:	67 95       	ror	r22
    1c30:	b7 95       	ror	r27
    1c32:	f7 95       	ror	r31
    1c34:	e7 95       	ror	r30
    1c36:	9f 5f       	subi	r25, 0xFF	; 255
    1c38:	c1 f7       	brne	.-16     	; 0x1c2a <__mulsf3_pse+0x90>
    1c3a:	fe 2b       	or	r31, r30
    1c3c:	88 0f       	add	r24, r24
    1c3e:	91 1d       	adc	r25, r1
    1c40:	96 95       	lsr	r25
    1c42:	87 95       	ror	r24
    1c44:	97 f9       	bld	r25, 7
    1c46:	08 95       	ret

Disassembly of section .text.avrlibc:

00000520 <vfprintf>:
 520:	a4 e1       	ldi	r26, 0x14	; 20
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	e6 e9       	ldi	r30, 0x96	; 150
 526:	f2 e0       	ldi	r31, 0x02	; 2
 528:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__prologue_saves__>
 52c:	6c 01       	movw	r12, r24
 52e:	1a 01       	movw	r2, r20
 530:	46 2e       	mov	r4, r22
 532:	59 01       	movw	r10, r18
 534:	fc 01       	movw	r30, r24
 536:	10 86       	std	Z+8, r1	; 0x08
 538:	17 82       	std	Z+7, r1	; 0x07
 53a:	84 81       	ldd	r24, Z+4	; 0x04
 53c:	81 ff       	sbrs	r24, 1
 53e:	62 c3       	rjmp	.+1732   	; 0xc04 <__EEPROM_REGION_LENGTH__+0x404>
 540:	ce 01       	movw	r24, r28
 542:	01 96       	adiw	r24, 0x01	; 1
 544:	9d 87       	std	Y+13, r25	; 0x0d
 546:	8c 87       	std	Y+12, r24	; 0x0c
 548:	a0 e8       	ldi	r26, 0x80	; 128
 54a:	8a 8b       	std	Y+18, r24	; 0x12
 54c:	9b 8b       	std	Y+19, r25	; 0x13
 54e:	ac 8b       	std	Y+20, r26	; 0x14
 550:	f1 01       	movw	r30, r2
 552:	84 91       	lpm	r24, Z
 554:	47 fc       	sbrc	r4, 7
 556:	80 81       	ld	r24, Z
 558:	88 23       	and	r24, r24
 55a:	09 f4       	brne	.+2      	; 0x55e <vfprintf+0x3e>
 55c:	4f c3       	rjmp	.+1694   	; 0xbfc <__EEPROM_REGION_LENGTH__+0x3fc>
 55e:	44 2d       	mov	r20, r4
 560:	91 01       	movw	r18, r2
 562:	2f 5f       	subi	r18, 0xFF	; 255
 564:	3f 4f       	sbci	r19, 0xFF	; 255
 566:	4f 4f       	sbci	r20, 0xFF	; 255
 568:	85 32       	cpi	r24, 0x25	; 37
 56a:	19 f0       	breq	.+6      	; 0x572 <vfprintf+0x52>
 56c:	19 01       	movw	r2, r18
 56e:	44 2e       	mov	r4, r20
 570:	0a c0       	rjmp	.+20     	; 0x586 <vfprintf+0x66>
 572:	f9 01       	movw	r30, r18
 574:	84 91       	lpm	r24, Z
 576:	47 fd       	sbrc	r20, 7
 578:	80 81       	ld	r24, Z
 57a:	92 e0       	ldi	r25, 0x02	; 2
 57c:	29 0e       	add	r2, r25
 57e:	31 1c       	adc	r3, r1
 580:	41 1c       	adc	r4, r1
 582:	85 32       	cpi	r24, 0x25	; 37
 584:	49 f4       	brne	.+18     	; 0x598 <vfprintf+0x78>
 586:	b6 01       	movw	r22, r12
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 58e:	bf 86       	std	Y+15, r11	; 0x0f
 590:	ae 86       	std	Y+14, r10	; 0x0e
 592:	ae 84       	ldd	r10, Y+14	; 0x0e
 594:	bf 84       	ldd	r11, Y+15	; 0x0f
 596:	dc cf       	rjmp	.-72     	; 0x550 <vfprintf+0x30>
 598:	10 e0       	ldi	r17, 0x00	; 0
 59a:	f1 2c       	mov	r15, r1
 59c:	00 e0       	ldi	r16, 0x00	; 0
 59e:	00 32       	cpi	r16, 0x20	; 32
 5a0:	a0 f4       	brcc	.+40     	; 0x5ca <vfprintf+0xaa>
 5a2:	8b 32       	cpi	r24, 0x2B	; 43
 5a4:	69 f0       	breq	.+26     	; 0x5c0 <vfprintf+0xa0>
 5a6:	30 f4       	brcc	.+12     	; 0x5b4 <vfprintf+0x94>
 5a8:	80 32       	cpi	r24, 0x20	; 32
 5aa:	59 f0       	breq	.+22     	; 0x5c2 <vfprintf+0xa2>
 5ac:	83 32       	cpi	r24, 0x23	; 35
 5ae:	69 f4       	brne	.+26     	; 0x5ca <vfprintf+0xaa>
 5b0:	00 61       	ori	r16, 0x10	; 16
 5b2:	2c c0       	rjmp	.+88     	; 0x60c <vfprintf+0xec>
 5b4:	8d 32       	cpi	r24, 0x2D	; 45
 5b6:	39 f0       	breq	.+14     	; 0x5c6 <vfprintf+0xa6>
 5b8:	80 33       	cpi	r24, 0x30	; 48
 5ba:	39 f4       	brne	.+14     	; 0x5ca <vfprintf+0xaa>
 5bc:	01 60       	ori	r16, 0x01	; 1
 5be:	26 c0       	rjmp	.+76     	; 0x60c <vfprintf+0xec>
 5c0:	02 60       	ori	r16, 0x02	; 2
 5c2:	04 60       	ori	r16, 0x04	; 4
 5c4:	23 c0       	rjmp	.+70     	; 0x60c <vfprintf+0xec>
 5c6:	08 60       	ori	r16, 0x08	; 8
 5c8:	21 c0       	rjmp	.+66     	; 0x60c <vfprintf+0xec>
 5ca:	07 fd       	sbrc	r16, 7
 5cc:	29 c0       	rjmp	.+82     	; 0x620 <vfprintf+0x100>
 5ce:	90 ed       	ldi	r25, 0xD0	; 208
 5d0:	98 0f       	add	r25, r24
 5d2:	9a 30       	cpi	r25, 0x0A	; 10
 5d4:	78 f4       	brcc	.+30     	; 0x5f4 <vfprintf+0xd4>
 5d6:	06 ff       	sbrs	r16, 6
 5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <vfprintf+0xc6>
 5da:	aa e0       	ldi	r26, 0x0A	; 10
 5dc:	1a 9f       	mul	r17, r26
 5de:	90 0d       	add	r25, r0
 5e0:	11 24       	eor	r1, r1
 5e2:	19 2f       	mov	r17, r25
 5e4:	13 c0       	rjmp	.+38     	; 0x60c <vfprintf+0xec>
 5e6:	ea e0       	ldi	r30, 0x0A	; 10
 5e8:	fe 9e       	mul	r15, r30
 5ea:	90 0d       	add	r25, r0
 5ec:	11 24       	eor	r1, r1
 5ee:	f9 2e       	mov	r15, r25
 5f0:	00 62       	ori	r16, 0x20	; 32
 5f2:	0c c0       	rjmp	.+24     	; 0x60c <vfprintf+0xec>
 5f4:	8e 32       	cpi	r24, 0x2E	; 46
 5f6:	21 f4       	brne	.+8      	; 0x600 <vfprintf+0xe0>
 5f8:	06 fd       	sbrc	r16, 6
 5fa:	00 c3       	rjmp	.+1536   	; 0xbfc <__EEPROM_REGION_LENGTH__+0x3fc>
 5fc:	00 64       	ori	r16, 0x40	; 64
 5fe:	06 c0       	rjmp	.+12     	; 0x60c <vfprintf+0xec>
 600:	8c 36       	cpi	r24, 0x6C	; 108
 602:	11 f4       	brne	.+4      	; 0x608 <vfprintf+0xe8>
 604:	00 68       	ori	r16, 0x80	; 128
 606:	02 c0       	rjmp	.+4      	; 0x60c <vfprintf+0xec>
 608:	88 36       	cpi	r24, 0x68	; 104
 60a:	51 f4       	brne	.+20     	; 0x620 <vfprintf+0x100>
 60c:	f1 01       	movw	r30, r2
 60e:	84 91       	lpm	r24, Z
 610:	47 fc       	sbrc	r4, 7
 612:	80 81       	ld	r24, Z
 614:	ff ef       	ldi	r31, 0xFF	; 255
 616:	2f 1a       	sub	r2, r31
 618:	3f 0a       	sbc	r3, r31
 61a:	4f 0a       	sbc	r4, r31
 61c:	81 11       	cpse	r24, r1
 61e:	bf cf       	rjmp	.-130    	; 0x59e <vfprintf+0x7e>
 620:	9b eb       	ldi	r25, 0xBB	; 187
 622:	98 0f       	add	r25, r24
 624:	93 30       	cpi	r25, 0x03	; 3
 626:	18 f4       	brcc	.+6      	; 0x62e <vfprintf+0x10e>
 628:	00 61       	ori	r16, 0x10	; 16
 62a:	80 5e       	subi	r24, 0xE0	; 224
 62c:	06 c0       	rjmp	.+12     	; 0x63a <vfprintf+0x11a>
 62e:	9b e9       	ldi	r25, 0x9B	; 155
 630:	98 0f       	add	r25, r24
 632:	93 30       	cpi	r25, 0x03	; 3
 634:	08 f0       	brcs	.+2      	; 0x638 <vfprintf+0x118>
 636:	66 c1       	rjmp	.+716    	; 0x904 <__EEPROM_REGION_LENGTH__+0x104>
 638:	0f 7e       	andi	r16, 0xEF	; 239
 63a:	06 ff       	sbrs	r16, 6
 63c:	16 e0       	ldi	r17, 0x06	; 6
 63e:	0f 73       	andi	r16, 0x3F	; 63
 640:	70 2e       	mov	r7, r16
 642:	85 36       	cpi	r24, 0x65	; 101
 644:	21 f4       	brne	.+8      	; 0x64e <vfprintf+0x12e>
 646:	20 2f       	mov	r18, r16
 648:	20 64       	ori	r18, 0x40	; 64
 64a:	72 2e       	mov	r7, r18
 64c:	08 c0       	rjmp	.+16     	; 0x65e <vfprintf+0x13e>
 64e:	86 36       	cpi	r24, 0x66	; 102
 650:	21 f4       	brne	.+8      	; 0x65a <vfprintf+0x13a>
 652:	80 2f       	mov	r24, r16
 654:	80 68       	ori	r24, 0x80	; 128
 656:	78 2e       	mov	r7, r24
 658:	02 c0       	rjmp	.+4      	; 0x65e <vfprintf+0x13e>
 65a:	11 11       	cpse	r17, r1
 65c:	11 50       	subi	r17, 0x01	; 1
 65e:	77 fe       	sbrs	r7, 7
 660:	07 c0       	rjmp	.+14     	; 0x670 <vfprintf+0x150>
 662:	1c 33       	cpi	r17, 0x3C	; 60
 664:	50 f4       	brcc	.+20     	; 0x67a <vfprintf+0x15a>
 666:	ee 24       	eor	r14, r14
 668:	e3 94       	inc	r14
 66a:	e1 0e       	add	r14, r17
 66c:	27 e0       	ldi	r18, 0x07	; 7
 66e:	0b c0       	rjmp	.+22     	; 0x686 <vfprintf+0x166>
 670:	18 30       	cpi	r17, 0x08	; 8
 672:	38 f0       	brcs	.+14     	; 0x682 <vfprintf+0x162>
 674:	27 e0       	ldi	r18, 0x07	; 7
 676:	17 e0       	ldi	r17, 0x07	; 7
 678:	05 c0       	rjmp	.+10     	; 0x684 <vfprintf+0x164>
 67a:	27 e0       	ldi	r18, 0x07	; 7
 67c:	6c e3       	ldi	r22, 0x3C	; 60
 67e:	e6 2e       	mov	r14, r22
 680:	02 c0       	rjmp	.+4      	; 0x686 <vfprintf+0x166>
 682:	21 2f       	mov	r18, r17
 684:	e1 2c       	mov	r14, r1
 686:	f5 01       	movw	r30, r10
 688:	34 96       	adiw	r30, 0x04	; 4
 68a:	ff 87       	std	Y+15, r31	; 0x0f
 68c:	ee 87       	std	Y+14, r30	; 0x0e
 68e:	f5 01       	movw	r30, r10
 690:	60 81       	ld	r22, Z
 692:	71 81       	ldd	r23, Z+1	; 0x01
 694:	82 81       	ldd	r24, Z+2	; 0x02
 696:	93 81       	ldd	r25, Z+3	; 0x03
 698:	0e 2d       	mov	r16, r14
 69a:	ae 01       	movw	r20, r28
 69c:	4f 5f       	subi	r20, 0xFF	; 255
 69e:	5f 4f       	sbci	r21, 0xFF	; 255
 6a0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__ftoa_engine>
 6a4:	5c 01       	movw	r10, r24
 6a6:	59 80       	ldd	r5, Y+1	; 0x01
 6a8:	50 fe       	sbrs	r5, 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <vfprintf+0x190>
 6ac:	53 fe       	sbrs	r5, 3
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <vfprintf+0x19c>
 6b0:	71 fc       	sbrc	r7, 1
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <vfprintf+0x1a0>
 6b4:	72 fe       	sbrs	r7, 2
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <vfprintf+0x1a4>
 6b8:	00 e2       	ldi	r16, 0x20	; 32
 6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <vfprintf+0x1a6>
 6bc:	0d e2       	ldi	r16, 0x2D	; 45
 6be:	03 c0       	rjmp	.+6      	; 0x6c6 <vfprintf+0x1a6>
 6c0:	0b e2       	ldi	r16, 0x2B	; 43
 6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <vfprintf+0x1a6>
 6c4:	00 e0       	ldi	r16, 0x00	; 0
 6c6:	85 2d       	mov	r24, r5
 6c8:	8c 70       	andi	r24, 0x0C	; 12
 6ca:	19 f0       	breq	.+6      	; 0x6d2 <vfprintf+0x1b2>
 6cc:	01 11       	cpse	r16, r1
 6ce:	73 c2       	rjmp	.+1254   	; 0xbb6 <__EEPROM_REGION_LENGTH__+0x3b6>
 6d0:	be c2       	rjmp	.+1404   	; 0xc4e <__EEPROM_REGION_LENGTH__+0x44e>
 6d2:	77 fe       	sbrs	r7, 7
 6d4:	0f c0       	rjmp	.+30     	; 0x6f4 <vfprintf+0x1d4>
 6d6:	ea 0c       	add	r14, r10
 6d8:	54 fe       	sbrs	r5, 4
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <vfprintf+0x1c4>
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	81 33       	cpi	r24, 0x31	; 49
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <vfprintf+0x1c4>
 6e2:	ea 94       	dec	r14
 6e4:	1e 14       	cp	r1, r14
 6e6:	74 f5       	brge	.+92     	; 0x744 <vfprintf+0x224>
 6e8:	28 e0       	ldi	r18, 0x08	; 8
 6ea:	2e 15       	cp	r18, r14
 6ec:	78 f5       	brcc	.+94     	; 0x74c <vfprintf+0x22c>
 6ee:	38 e0       	ldi	r19, 0x08	; 8
 6f0:	e3 2e       	mov	r14, r19
 6f2:	2c c0       	rjmp	.+88     	; 0x74c <vfprintf+0x22c>
 6f4:	76 fc       	sbrc	r7, 6
 6f6:	2a c0       	rjmp	.+84     	; 0x74c <vfprintf+0x22c>
 6f8:	81 2f       	mov	r24, r17
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	8a 15       	cp	r24, r10
 6fe:	9b 05       	cpc	r25, r11
 700:	9c f0       	brlt	.+38     	; 0x728 <vfprintf+0x208>
 702:	8c ef       	ldi	r24, 0xFC	; 252
 704:	a8 16       	cp	r10, r24
 706:	8f ef       	ldi	r24, 0xFF	; 255
 708:	b8 06       	cpc	r11, r24
 70a:	74 f0       	brlt	.+28     	; 0x728 <vfprintf+0x208>
 70c:	97 2d       	mov	r25, r7
 70e:	90 68       	ori	r25, 0x80	; 128
 710:	79 2e       	mov	r7, r25
 712:	0a c0       	rjmp	.+20     	; 0x728 <vfprintf+0x208>
 714:	e2 e0       	ldi	r30, 0x02	; 2
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	ec 0f       	add	r30, r28
 71a:	fd 1f       	adc	r31, r29
 71c:	e1 0f       	add	r30, r17
 71e:	f1 1d       	adc	r31, r1
 720:	80 81       	ld	r24, Z
 722:	80 33       	cpi	r24, 0x30	; 48
 724:	19 f4       	brne	.+6      	; 0x72c <vfprintf+0x20c>
 726:	11 50       	subi	r17, 0x01	; 1
 728:	11 11       	cpse	r17, r1
 72a:	f4 cf       	rjmp	.-24     	; 0x714 <vfprintf+0x1f4>
 72c:	77 fe       	sbrs	r7, 7
 72e:	0e c0       	rjmp	.+28     	; 0x74c <vfprintf+0x22c>
 730:	ee 24       	eor	r14, r14
 732:	e3 94       	inc	r14
 734:	e1 0e       	add	r14, r17
 736:	81 2f       	mov	r24, r17
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	a8 16       	cp	r10, r24
 73c:	b9 06       	cpc	r11, r25
 73e:	2c f4       	brge	.+10     	; 0x74a <vfprintf+0x22a>
 740:	1a 19       	sub	r17, r10
 742:	04 c0       	rjmp	.+8      	; 0x74c <vfprintf+0x22c>
 744:	ee 24       	eor	r14, r14
 746:	e3 94       	inc	r14
 748:	01 c0       	rjmp	.+2      	; 0x74c <vfprintf+0x22c>
 74a:	10 e0       	ldi	r17, 0x00	; 0
 74c:	77 fe       	sbrs	r7, 7
 74e:	06 c0       	rjmp	.+12     	; 0x75c <vfprintf+0x23c>
 750:	1a 14       	cp	r1, r10
 752:	1b 04       	cpc	r1, r11
 754:	34 f4       	brge	.+12     	; 0x762 <vfprintf+0x242>
 756:	c5 01       	movw	r24, r10
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	05 c0       	rjmp	.+10     	; 0x766 <vfprintf+0x246>
 75c:	85 e0       	ldi	r24, 0x05	; 5
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	02 c0       	rjmp	.+4      	; 0x766 <vfprintf+0x246>
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	01 11       	cpse	r16, r1
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	11 23       	and	r17, r17
 76c:	31 f0       	breq	.+12     	; 0x77a <vfprintf+0x25a>
 76e:	21 2f       	mov	r18, r17
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	2f 5f       	subi	r18, 0xFF	; 255
 774:	3f 4f       	sbci	r19, 0xFF	; 255
 776:	82 0f       	add	r24, r18
 778:	93 1f       	adc	r25, r19
 77a:	2f 2d       	mov	r18, r15
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	82 17       	cp	r24, r18
 780:	93 07       	cpc	r25, r19
 782:	14 f4       	brge	.+4      	; 0x788 <vfprintf+0x268>
 784:	f8 1a       	sub	r15, r24
 786:	01 c0       	rjmp	.+2      	; 0x78a <vfprintf+0x26a>
 788:	f1 2c       	mov	r15, r1
 78a:	87 2d       	mov	r24, r7
 78c:	89 70       	andi	r24, 0x09	; 9
 78e:	49 f4       	brne	.+18     	; 0x7a2 <vfprintf+0x282>
 790:	ff 20       	and	r15, r15
 792:	39 f0       	breq	.+14     	; 0x7a2 <vfprintf+0x282>
 794:	b6 01       	movw	r22, r12
 796:	80 e2       	ldi	r24, 0x20	; 32
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 79e:	fa 94       	dec	r15
 7a0:	f7 cf       	rjmp	.-18     	; 0x790 <vfprintf+0x270>
 7a2:	00 23       	and	r16, r16
 7a4:	29 f0       	breq	.+10     	; 0x7b0 <vfprintf+0x290>
 7a6:	b6 01       	movw	r22, r12
 7a8:	80 2f       	mov	r24, r16
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 7b0:	73 fc       	sbrc	r7, 3
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <vfprintf+0x2a6>
 7b4:	ff 20       	and	r15, r15
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <vfprintf+0x2a6>
 7b8:	b6 01       	movw	r22, r12
 7ba:	80 e3       	ldi	r24, 0x30	; 48
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 7c2:	fa 94       	dec	r15
 7c4:	f7 cf       	rjmp	.-18     	; 0x7b4 <vfprintf+0x294>
 7c6:	77 fe       	sbrs	r7, 7
 7c8:	49 c0       	rjmp	.+146    	; 0x85c <__EEPROM_REGION_LENGTH__+0x5c>
 7ca:	35 01       	movw	r6, r10
 7cc:	b7 fe       	sbrs	r11, 7
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <vfprintf+0x2b4>
 7d0:	61 2c       	mov	r6, r1
 7d2:	71 2c       	mov	r7, r1
 7d4:	c5 01       	movw	r24, r10
 7d6:	86 19       	sub	r24, r6
 7d8:	97 09       	sbc	r25, r7
 7da:	88 24       	eor	r8, r8
 7dc:	83 94       	inc	r8
 7de:	91 2c       	mov	r9, r1
 7e0:	8c 0e       	add	r8, r28
 7e2:	9d 1e       	adc	r9, r29
 7e4:	88 0e       	add	r8, r24
 7e6:	99 1e       	adc	r9, r25
 7e8:	f5 01       	movw	r30, r10
 7ea:	ee 19       	sub	r30, r14
 7ec:	f1 09       	sbc	r31, r1
 7ee:	f9 8b       	std	Y+17, r31	; 0x11
 7f0:	e8 8b       	std	Y+16, r30	; 0x10
 7f2:	01 2f       	mov	r16, r17
 7f4:	10 e0       	ldi	r17, 0x00	; 0
 7f6:	11 95       	neg	r17
 7f8:	01 95       	neg	r16
 7fa:	11 09       	sbc	r17, r1
 7fc:	ff ef       	ldi	r31, 0xFF	; 255
 7fe:	6f 16       	cp	r6, r31
 800:	7f 06       	cpc	r7, r31
 802:	29 f4       	brne	.+10     	; 0x80e <__EEPROM_REGION_LENGTH__+0xe>
 804:	b6 01       	movw	r22, r12
 806:	8e e2       	ldi	r24, 0x2E	; 46
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 80e:	a6 14       	cp	r10, r6
 810:	b7 04       	cpc	r11, r7
 812:	44 f0       	brlt	.+16     	; 0x824 <__EEPROM_REGION_LENGTH__+0x24>
 814:	88 89       	ldd	r24, Y+16	; 0x10
 816:	99 89       	ldd	r25, Y+17	; 0x11
 818:	86 15       	cp	r24, r6
 81a:	97 05       	cpc	r25, r7
 81c:	1c f4       	brge	.+6      	; 0x824 <__EEPROM_REGION_LENGTH__+0x24>
 81e:	f4 01       	movw	r30, r8
 820:	81 81       	ldd	r24, Z+1	; 0x01
 822:	01 c0       	rjmp	.+2      	; 0x826 <__EEPROM_REGION_LENGTH__+0x26>
 824:	80 e3       	ldi	r24, 0x30	; 48
 826:	f1 e0       	ldi	r31, 0x01	; 1
 828:	6f 1a       	sub	r6, r31
 82a:	71 08       	sbc	r7, r1
 82c:	2f ef       	ldi	r18, 0xFF	; 255
 82e:	82 1a       	sub	r8, r18
 830:	92 0a       	sbc	r9, r18
 832:	60 16       	cp	r6, r16
 834:	71 06       	cpc	r7, r17
 836:	2c f0       	brlt	.+10     	; 0x842 <__EEPROM_REGION_LENGTH__+0x42>
 838:	b6 01       	movw	r22, r12
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 840:	dd cf       	rjmp	.-70     	; 0x7fc <vfprintf+0x2dc>
 842:	a6 14       	cp	r10, r6
 844:	b7 04       	cpc	r11, r7
 846:	39 f4       	brne	.+14     	; 0x856 <__EEPROM_REGION_LENGTH__+0x56>
 848:	9a 81       	ldd	r25, Y+2	; 0x02
 84a:	96 33       	cpi	r25, 0x36	; 54
 84c:	18 f4       	brcc	.+6      	; 0x854 <__EEPROM_REGION_LENGTH__+0x54>
 84e:	95 33       	cpi	r25, 0x35	; 53
 850:	11 f4       	brne	.+4      	; 0x856 <__EEPROM_REGION_LENGTH__+0x56>
 852:	54 fe       	sbrs	r5, 4
 854:	81 e3       	ldi	r24, 0x31	; 49
 856:	b6 01       	movw	r22, r12
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	51 c0       	rjmp	.+162    	; 0x8fe <__EEPROM_REGION_LENGTH__+0xfe>
 85c:	8a 81       	ldd	r24, Y+2	; 0x02
 85e:	81 33       	cpi	r24, 0x31	; 49
 860:	19 f0       	breq	.+6      	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
 862:	95 2d       	mov	r25, r5
 864:	9f 7e       	andi	r25, 0xEF	; 239
 866:	59 2e       	mov	r5, r25
 868:	b6 01       	movw	r22, r12
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 870:	11 11       	cpse	r17, r1
 872:	05 c0       	rjmp	.+10     	; 0x87e <__EEPROM_REGION_LENGTH__+0x7e>
 874:	74 fc       	sbrc	r7, 4
 876:	1c c0       	rjmp	.+56     	; 0x8b0 <__EEPROM_REGION_LENGTH__+0xb0>
 878:	85 e6       	ldi	r24, 0x65	; 101
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	1b c0       	rjmp	.+54     	; 0x8b4 <__EEPROM_REGION_LENGTH__+0xb4>
 87e:	b6 01       	movw	r22, r12
 880:	8e e2       	ldi	r24, 0x2E	; 46
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 888:	02 e0       	ldi	r16, 0x02	; 2
 88a:	01 0f       	add	r16, r17
 88c:	82 e0       	ldi	r24, 0x02	; 2
 88e:	11 e0       	ldi	r17, 0x01	; 1
 890:	18 0f       	add	r17, r24
 892:	e1 e0       	ldi	r30, 0x01	; 1
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	ec 0f       	add	r30, r28
 898:	fd 1f       	adc	r31, r29
 89a:	e8 0f       	add	r30, r24
 89c:	f1 1d       	adc	r31, r1
 89e:	80 81       	ld	r24, Z
 8a0:	b6 01       	movw	r22, r12
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 8a8:	81 2f       	mov	r24, r17
 8aa:	10 13       	cpse	r17, r16
 8ac:	f0 cf       	rjmp	.-32     	; 0x88e <__EEPROM_REGION_LENGTH__+0x8e>
 8ae:	e2 cf       	rjmp	.-60     	; 0x874 <__EEPROM_REGION_LENGTH__+0x74>
 8b0:	85 e4       	ldi	r24, 0x45	; 69
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	b6 01       	movw	r22, r12
 8b6:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 8ba:	b7 fc       	sbrc	r11, 7
 8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <__EEPROM_REGION_LENGTH__+0xc8>
 8be:	a1 14       	cp	r10, r1
 8c0:	b1 04       	cpc	r11, r1
 8c2:	39 f4       	brne	.+14     	; 0x8d2 <__EEPROM_REGION_LENGTH__+0xd2>
 8c4:	54 fe       	sbrs	r5, 4
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <__EEPROM_REGION_LENGTH__+0xd2>
 8c8:	b1 94       	neg	r11
 8ca:	a1 94       	neg	r10
 8cc:	b1 08       	sbc	r11, r1
 8ce:	8d e2       	ldi	r24, 0x2D	; 45
 8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <__EEPROM_REGION_LENGTH__+0xd4>
 8d2:	8b e2       	ldi	r24, 0x2B	; 43
 8d4:	b6 01       	movw	r22, r12
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 8dc:	80 e3       	ldi	r24, 0x30	; 48
 8de:	ea e0       	ldi	r30, 0x0A	; 10
 8e0:	ae 16       	cp	r10, r30
 8e2:	b1 04       	cpc	r11, r1
 8e4:	2c f0       	brlt	.+10     	; 0x8f0 <__EEPROM_REGION_LENGTH__+0xf0>
 8e6:	8f 5f       	subi	r24, 0xFF	; 255
 8e8:	aa e0       	ldi	r26, 0x0A	; 10
 8ea:	aa 1a       	sub	r10, r26
 8ec:	b1 08       	sbc	r11, r1
 8ee:	f7 cf       	rjmp	.-18     	; 0x8de <__EEPROM_REGION_LENGTH__+0xde>
 8f0:	b6 01       	movw	r22, r12
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 8f8:	b6 01       	movw	r22, r12
 8fa:	c5 01       	movw	r24, r10
 8fc:	c0 96       	adiw	r24, 0x30	; 48
 8fe:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 902:	72 c1       	rjmp	.+740    	; 0xbe8 <__EEPROM_REGION_LENGTH__+0x3e8>
 904:	83 36       	cpi	r24, 0x63	; 99
 906:	31 f0       	breq	.+12     	; 0x914 <__EEPROM_REGION_LENGTH__+0x114>
 908:	83 37       	cpi	r24, 0x73	; 115
 90a:	91 f0       	breq	.+36     	; 0x930 <__EEPROM_REGION_LENGTH__+0x130>
 90c:	83 35       	cpi	r24, 0x53	; 83
 90e:	09 f0       	breq	.+2      	; 0x912 <__EEPROM_REGION_LENGTH__+0x112>
 910:	5d c0       	rjmp	.+186    	; 0x9cc <__EEPROM_REGION_LENGTH__+0x1cc>
 912:	24 c0       	rjmp	.+72     	; 0x95c <__EEPROM_REGION_LENGTH__+0x15c>
 914:	c5 01       	movw	r24, r10
 916:	02 96       	adiw	r24, 0x02	; 2
 918:	9f 87       	std	Y+15, r25	; 0x0f
 91a:	8e 87       	std	Y+14, r24	; 0x0e
 91c:	f5 01       	movw	r30, r10
 91e:	80 81       	ld	r24, Z
 920:	89 83       	std	Y+1, r24	; 0x01
 922:	6a 88       	ldd	r6, Y+18	; 0x12
 924:	7b 88       	ldd	r7, Y+19	; 0x13
 926:	8c 88       	ldd	r8, Y+20	; 0x14
 928:	aa 24       	eor	r10, r10
 92a:	a3 94       	inc	r10
 92c:	b1 2c       	mov	r11, r1
 92e:	14 c0       	rjmp	.+40     	; 0x958 <__EEPROM_REGION_LENGTH__+0x158>
 930:	c5 01       	movw	r24, r10
 932:	03 96       	adiw	r24, 0x03	; 3
 934:	9f 87       	std	Y+15, r25	; 0x0f
 936:	8e 87       	std	Y+14, r24	; 0x0e
 938:	f5 01       	movw	r30, r10
 93a:	60 80       	ld	r6, Z
 93c:	71 80       	ldd	r7, Z+1	; 0x01
 93e:	82 80       	ldd	r8, Z+2	; 0x02
 940:	06 ff       	sbrs	r16, 6
 942:	03 c0       	rjmp	.+6      	; 0x94a <__EEPROM_REGION_LENGTH__+0x14a>
 944:	41 2f       	mov	r20, r17
 946:	50 e0       	ldi	r21, 0x00	; 0
 948:	02 c0       	rjmp	.+4      	; 0x94e <__EEPROM_REGION_LENGTH__+0x14e>
 94a:	4f ef       	ldi	r20, 0xFF	; 255
 94c:	5f ef       	ldi	r21, 0xFF	; 255
 94e:	88 2d       	mov	r24, r8
 950:	b3 01       	movw	r22, r6
 952:	0e 94 27 19 	call	0x324e	; 0x324e <strnlen>
 956:	5c 01       	movw	r10, r24
 958:	0f 77       	andi	r16, 0x7F	; 127
 95a:	15 c0       	rjmp	.+42     	; 0x986 <__EEPROM_REGION_LENGTH__+0x186>
 95c:	c5 01       	movw	r24, r10
 95e:	03 96       	adiw	r24, 0x03	; 3
 960:	9f 87       	std	Y+15, r25	; 0x0f
 962:	8e 87       	std	Y+14, r24	; 0x0e
 964:	f5 01       	movw	r30, r10
 966:	60 80       	ld	r6, Z
 968:	71 80       	ldd	r7, Z+1	; 0x01
 96a:	82 80       	ldd	r8, Z+2	; 0x02
 96c:	06 ff       	sbrs	r16, 6
 96e:	03 c0       	rjmp	.+6      	; 0x976 <__EEPROM_REGION_LENGTH__+0x176>
 970:	41 2f       	mov	r20, r17
 972:	50 e0       	ldi	r21, 0x00	; 0
 974:	02 c0       	rjmp	.+4      	; 0x97a <__EEPROM_REGION_LENGTH__+0x17a>
 976:	4f ef       	ldi	r20, 0xFF	; 255
 978:	5f ef       	ldi	r21, 0xFF	; 255
 97a:	88 2d       	mov	r24, r8
 97c:	b3 01       	movw	r22, r6
 97e:	0e 94 27 19 	call	0x324e	; 0x324e <strnlen>
 982:	5c 01       	movw	r10, r24
 984:	00 68       	ori	r16, 0x80	; 128
 986:	03 fd       	sbrc	r16, 3
 988:	1d c0       	rjmp	.+58     	; 0x9c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 98a:	8f 2d       	mov	r24, r15
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	a8 16       	cp	r10, r24
 990:	b9 06       	cpc	r11, r25
 992:	c0 f4       	brcc	.+48     	; 0x9c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 994:	b6 01       	movw	r22, r12
 996:	80 e2       	ldi	r24, 0x20	; 32
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 99e:	fa 94       	dec	r15
 9a0:	f4 cf       	rjmp	.-24     	; 0x98a <__EEPROM_REGION_LENGTH__+0x18a>
 9a2:	f3 01       	movw	r30, r6
 9a4:	84 91       	lpm	r24, Z
 9a6:	87 fc       	sbrc	r8, 7
 9a8:	80 81       	ld	r24, Z
 9aa:	ff ef       	ldi	r31, 0xFF	; 255
 9ac:	6f 1a       	sub	r6, r31
 9ae:	7f 0a       	sbc	r7, r31
 9b0:	8f 0a       	sbc	r8, r31
 9b2:	b6 01       	movw	r22, r12
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 9ba:	f1 10       	cpse	r15, r1
 9bc:	fa 94       	dec	r15
 9be:	21 e0       	ldi	r18, 0x01	; 1
 9c0:	a2 1a       	sub	r10, r18
 9c2:	b1 08       	sbc	r11, r1
 9c4:	a1 14       	cp	r10, r1
 9c6:	b1 04       	cpc	r11, r1
 9c8:	61 f7       	brne	.-40     	; 0x9a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 9ca:	0e c1       	rjmp	.+540    	; 0xbe8 <__EEPROM_REGION_LENGTH__+0x3e8>
 9cc:	84 36       	cpi	r24, 0x64	; 100
 9ce:	11 f0       	breq	.+4      	; 0x9d4 <__EEPROM_REGION_LENGTH__+0x1d4>
 9d0:	89 36       	cpi	r24, 0x69	; 105
 9d2:	79 f5       	brne	.+94     	; 0xa32 <__EEPROM_REGION_LENGTH__+0x232>
 9d4:	c5 01       	movw	r24, r10
 9d6:	07 ff       	sbrs	r16, 7
 9d8:	09 c0       	rjmp	.+18     	; 0x9ec <__EEPROM_REGION_LENGTH__+0x1ec>
 9da:	04 96       	adiw	r24, 0x04	; 4
 9dc:	9f 87       	std	Y+15, r25	; 0x0f
 9de:	8e 87       	std	Y+14, r24	; 0x0e
 9e0:	f5 01       	movw	r30, r10
 9e2:	60 81       	ld	r22, Z
 9e4:	71 81       	ldd	r23, Z+1	; 0x01
 9e6:	82 81       	ldd	r24, Z+2	; 0x02
 9e8:	93 81       	ldd	r25, Z+3	; 0x03
 9ea:	0a c0       	rjmp	.+20     	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
 9ec:	02 96       	adiw	r24, 0x02	; 2
 9ee:	9f 87       	std	Y+15, r25	; 0x0f
 9f0:	8e 87       	std	Y+14, r24	; 0x0e
 9f2:	f5 01       	movw	r30, r10
 9f4:	60 81       	ld	r22, Z
 9f6:	71 81       	ldd	r23, Z+1	; 0x01
 9f8:	07 2e       	mov	r0, r23
 9fa:	00 0c       	add	r0, r0
 9fc:	88 0b       	sbc	r24, r24
 9fe:	99 0b       	sbc	r25, r25
 a00:	0f 76       	andi	r16, 0x6F	; 111
 a02:	e0 2e       	mov	r14, r16
 a04:	97 ff       	sbrs	r25, 7
 a06:	0a c0       	rjmp	.+20     	; 0xa1c <__EEPROM_REGION_LENGTH__+0x21c>
 a08:	90 95       	com	r25
 a0a:	80 95       	com	r24
 a0c:	70 95       	com	r23
 a0e:	61 95       	neg	r22
 a10:	7f 4f       	sbci	r23, 0xFF	; 255
 a12:	8f 4f       	sbci	r24, 0xFF	; 255
 a14:	9f 4f       	sbci	r25, 0xFF	; 255
 a16:	f0 2f       	mov	r31, r16
 a18:	f0 68       	ori	r31, 0x80	; 128
 a1a:	ef 2e       	mov	r14, r31
 a1c:	2a e0       	ldi	r18, 0x0A	; 10
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	ae 01       	movw	r20, r28
 a22:	4f 5f       	subi	r20, 0xFF	; 255
 a24:	5f 4f       	sbci	r21, 0xFF	; 255
 a26:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__ultoa_invert>
 a2a:	a8 2e       	mov	r10, r24
 a2c:	2c 85       	ldd	r18, Y+12	; 0x0c
 a2e:	a2 1a       	sub	r10, r18
 a30:	4b c0       	rjmp	.+150    	; 0xac8 <__EEPROM_REGION_LENGTH__+0x2c8>
 a32:	85 37       	cpi	r24, 0x75	; 117
 a34:	29 f4       	brne	.+10     	; 0xa40 <__EEPROM_REGION_LENGTH__+0x240>
 a36:	0f 7e       	andi	r16, 0xEF	; 239
 a38:	e0 2e       	mov	r14, r16
 a3a:	2a e0       	ldi	r18, 0x0A	; 10
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	25 c0       	rjmp	.+74     	; 0xa8a <__EEPROM_REGION_LENGTH__+0x28a>
 a40:	90 2f       	mov	r25, r16
 a42:	99 7f       	andi	r25, 0xF9	; 249
 a44:	e9 2e       	mov	r14, r25
 a46:	8f 36       	cpi	r24, 0x6F	; 111
 a48:	c1 f0       	breq	.+48     	; 0xa7a <__EEPROM_REGION_LENGTH__+0x27a>
 a4a:	18 f4       	brcc	.+6      	; 0xa52 <__EEPROM_REGION_LENGTH__+0x252>
 a4c:	88 35       	cpi	r24, 0x58	; 88
 a4e:	79 f0       	breq	.+30     	; 0xa6e <__EEPROM_REGION_LENGTH__+0x26e>
 a50:	d5 c0       	rjmp	.+426    	; 0xbfc <__EEPROM_REGION_LENGTH__+0x3fc>
 a52:	80 37       	cpi	r24, 0x70	; 112
 a54:	19 f0       	breq	.+6      	; 0xa5c <__EEPROM_REGION_LENGTH__+0x25c>
 a56:	88 37       	cpi	r24, 0x78	; 120
 a58:	21 f0       	breq	.+8      	; 0xa62 <__EEPROM_REGION_LENGTH__+0x262>
 a5a:	d0 c0       	rjmp	.+416    	; 0xbfc <__EEPROM_REGION_LENGTH__+0x3fc>
 a5c:	a9 2f       	mov	r26, r25
 a5e:	a0 61       	ori	r26, 0x10	; 16
 a60:	ea 2e       	mov	r14, r26
 a62:	e4 fe       	sbrs	r14, 4
 a64:	0d c0       	rjmp	.+26     	; 0xa80 <__EEPROM_REGION_LENGTH__+0x280>
 a66:	ee 2d       	mov	r30, r14
 a68:	e4 60       	ori	r30, 0x04	; 4
 a6a:	ee 2e       	mov	r14, r30
 a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__EEPROM_REGION_LENGTH__+0x280>
 a6e:	04 ff       	sbrs	r16, 4
 a70:	0a c0       	rjmp	.+20     	; 0xa86 <__EEPROM_REGION_LENGTH__+0x286>
 a72:	f9 2f       	mov	r31, r25
 a74:	f6 60       	ori	r31, 0x06	; 6
 a76:	ef 2e       	mov	r14, r31
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <__EEPROM_REGION_LENGTH__+0x286>
 a7a:	28 e0       	ldi	r18, 0x08	; 8
 a7c:	30 e0       	ldi	r19, 0x00	; 0
 a7e:	05 c0       	rjmp	.+10     	; 0xa8a <__EEPROM_REGION_LENGTH__+0x28a>
 a80:	20 e1       	ldi	r18, 0x10	; 16
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <__EEPROM_REGION_LENGTH__+0x28a>
 a86:	20 e1       	ldi	r18, 0x10	; 16
 a88:	32 e0       	ldi	r19, 0x02	; 2
 a8a:	c5 01       	movw	r24, r10
 a8c:	e7 fe       	sbrs	r14, 7
 a8e:	09 c0       	rjmp	.+18     	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
 a90:	04 96       	adiw	r24, 0x04	; 4
 a92:	9f 87       	std	Y+15, r25	; 0x0f
 a94:	8e 87       	std	Y+14, r24	; 0x0e
 a96:	f5 01       	movw	r30, r10
 a98:	60 81       	ld	r22, Z
 a9a:	71 81       	ldd	r23, Z+1	; 0x01
 a9c:	82 81       	ldd	r24, Z+2	; 0x02
 a9e:	93 81       	ldd	r25, Z+3	; 0x03
 aa0:	08 c0       	rjmp	.+16     	; 0xab2 <__EEPROM_REGION_LENGTH__+0x2b2>
 aa2:	02 96       	adiw	r24, 0x02	; 2
 aa4:	9f 87       	std	Y+15, r25	; 0x0f
 aa6:	8e 87       	std	Y+14, r24	; 0x0e
 aa8:	f5 01       	movw	r30, r10
 aaa:	60 81       	ld	r22, Z
 aac:	71 81       	ldd	r23, Z+1	; 0x01
 aae:	80 e0       	ldi	r24, 0x00	; 0
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	ae 01       	movw	r20, r28
 ab4:	4f 5f       	subi	r20, 0xFF	; 255
 ab6:	5f 4f       	sbci	r21, 0xFF	; 255
 ab8:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__ultoa_invert>
 abc:	a8 2e       	mov	r10, r24
 abe:	fc 85       	ldd	r31, Y+12	; 0x0c
 ac0:	af 1a       	sub	r10, r31
 ac2:	2e 2d       	mov	r18, r14
 ac4:	2f 77       	andi	r18, 0x7F	; 127
 ac6:	e2 2e       	mov	r14, r18
 ac8:	e6 fe       	sbrs	r14, 6
 aca:	0b c0       	rjmp	.+22     	; 0xae2 <__EEPROM_REGION_LENGTH__+0x2e2>
 acc:	0e 2d       	mov	r16, r14
 ace:	0e 7f       	andi	r16, 0xFE	; 254
 ad0:	a1 16       	cp	r10, r17
 ad2:	50 f4       	brcc	.+20     	; 0xae8 <__EEPROM_REGION_LENGTH__+0x2e8>
 ad4:	e4 fe       	sbrs	r14, 4
 ad6:	0a c0       	rjmp	.+20     	; 0xaec <__EEPROM_REGION_LENGTH__+0x2ec>
 ad8:	e2 fc       	sbrc	r14, 2
 ada:	08 c0       	rjmp	.+16     	; 0xaec <__EEPROM_REGION_LENGTH__+0x2ec>
 adc:	0e 2d       	mov	r16, r14
 ade:	0e 7e       	andi	r16, 0xEE	; 238
 ae0:	05 c0       	rjmp	.+10     	; 0xaec <__EEPROM_REGION_LENGTH__+0x2ec>
 ae2:	ba 2c       	mov	r11, r10
 ae4:	0e 2d       	mov	r16, r14
 ae6:	03 c0       	rjmp	.+6      	; 0xaee <__EEPROM_REGION_LENGTH__+0x2ee>
 ae8:	ba 2c       	mov	r11, r10
 aea:	01 c0       	rjmp	.+2      	; 0xaee <__EEPROM_REGION_LENGTH__+0x2ee>
 aec:	b1 2e       	mov	r11, r17
 aee:	04 ff       	sbrs	r16, 4
 af0:	0d c0       	rjmp	.+26     	; 0xb0c <__EEPROM_REGION_LENGTH__+0x30c>
 af2:	fe 01       	movw	r30, r28
 af4:	ea 0d       	add	r30, r10
 af6:	f1 1d       	adc	r31, r1
 af8:	80 81       	ld	r24, Z
 afa:	80 33       	cpi	r24, 0x30	; 48
 afc:	11 f4       	brne	.+4      	; 0xb02 <__EEPROM_REGION_LENGTH__+0x302>
 afe:	09 7e       	andi	r16, 0xE9	; 233
 b00:	09 c0       	rjmp	.+18     	; 0xb14 <__EEPROM_REGION_LENGTH__+0x314>
 b02:	02 ff       	sbrs	r16, 2
 b04:	06 c0       	rjmp	.+12     	; 0xb12 <__EEPROM_REGION_LENGTH__+0x312>
 b06:	b3 94       	inc	r11
 b08:	b3 94       	inc	r11
 b0a:	04 c0       	rjmp	.+8      	; 0xb14 <__EEPROM_REGION_LENGTH__+0x314>
 b0c:	80 2f       	mov	r24, r16
 b0e:	86 78       	andi	r24, 0x86	; 134
 b10:	09 f0       	breq	.+2      	; 0xb14 <__EEPROM_REGION_LENGTH__+0x314>
 b12:	b3 94       	inc	r11
 b14:	03 fd       	sbrc	r16, 3
 b16:	11 c0       	rjmp	.+34     	; 0xb3a <__EEPROM_REGION_LENGTH__+0x33a>
 b18:	00 ff       	sbrs	r16, 0
 b1a:	06 c0       	rjmp	.+12     	; 0xb28 <__EEPROM_REGION_LENGTH__+0x328>
 b1c:	bf 14       	cp	r11, r15
 b1e:	88 f4       	brcc	.+34     	; 0xb42 <__EEPROM_REGION_LENGTH__+0x342>
 b20:	fa 0c       	add	r15, r10
 b22:	1f 2d       	mov	r17, r15
 b24:	1b 19       	sub	r17, r11
 b26:	0e c0       	rjmp	.+28     	; 0xb44 <__EEPROM_REGION_LENGTH__+0x344>
 b28:	bf 14       	cp	r11, r15
 b2a:	60 f4       	brcc	.+24     	; 0xb44 <__EEPROM_REGION_LENGTH__+0x344>
 b2c:	b6 01       	movw	r22, r12
 b2e:	80 e2       	ldi	r24, 0x20	; 32
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 b36:	b3 94       	inc	r11
 b38:	f7 cf       	rjmp	.-18     	; 0xb28 <__EEPROM_REGION_LENGTH__+0x328>
 b3a:	bf 14       	cp	r11, r15
 b3c:	18 f4       	brcc	.+6      	; 0xb44 <__EEPROM_REGION_LENGTH__+0x344>
 b3e:	fb 18       	sub	r15, r11
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <__EEPROM_REGION_LENGTH__+0x346>
 b42:	1a 2d       	mov	r17, r10
 b44:	f1 2c       	mov	r15, r1
 b46:	04 ff       	sbrs	r16, 4
 b48:	10 c0       	rjmp	.+32     	; 0xb6a <__EEPROM_REGION_LENGTH__+0x36a>
 b4a:	b6 01       	movw	r22, r12
 b4c:	80 e3       	ldi	r24, 0x30	; 48
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 b54:	02 ff       	sbrs	r16, 2
 b56:	17 c0       	rjmp	.+46     	; 0xb86 <__EEPROM_REGION_LENGTH__+0x386>
 b58:	01 fd       	sbrc	r16, 1
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <__EEPROM_REGION_LENGTH__+0x362>
 b5c:	88 e7       	ldi	r24, 0x78	; 120
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <__EEPROM_REGION_LENGTH__+0x366>
 b62:	88 e5       	ldi	r24, 0x58	; 88
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	b6 01       	movw	r22, r12
 b68:	0c c0       	rjmp	.+24     	; 0xb82 <__EEPROM_REGION_LENGTH__+0x382>
 b6a:	80 2f       	mov	r24, r16
 b6c:	86 78       	andi	r24, 0x86	; 134
 b6e:	59 f0       	breq	.+22     	; 0xb86 <__EEPROM_REGION_LENGTH__+0x386>
 b70:	01 ff       	sbrs	r16, 1
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <__EEPROM_REGION_LENGTH__+0x378>
 b74:	8b e2       	ldi	r24, 0x2B	; 43
 b76:	01 c0       	rjmp	.+2      	; 0xb7a <__EEPROM_REGION_LENGTH__+0x37a>
 b78:	80 e2       	ldi	r24, 0x20	; 32
 b7a:	07 fd       	sbrc	r16, 7
 b7c:	8d e2       	ldi	r24, 0x2D	; 45
 b7e:	b6 01       	movw	r22, r12
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 b86:	a1 16       	cp	r10, r17
 b88:	38 f4       	brcc	.+14     	; 0xb98 <__EEPROM_REGION_LENGTH__+0x398>
 b8a:	b6 01       	movw	r22, r12
 b8c:	80 e3       	ldi	r24, 0x30	; 48
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 b94:	11 50       	subi	r17, 0x01	; 1
 b96:	f7 cf       	rjmp	.-18     	; 0xb86 <__EEPROM_REGION_LENGTH__+0x386>
 b98:	aa 94       	dec	r10
 b9a:	e1 e0       	ldi	r30, 0x01	; 1
 b9c:	f0 e0       	ldi	r31, 0x00	; 0
 b9e:	ec 0f       	add	r30, r28
 ba0:	fd 1f       	adc	r31, r29
 ba2:	ea 0d       	add	r30, r10
 ba4:	f1 1d       	adc	r31, r1
 ba6:	80 81       	ld	r24, Z
 ba8:	b6 01       	movw	r22, r12
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 bb0:	a1 10       	cpse	r10, r1
 bb2:	f2 cf       	rjmp	.-28     	; 0xb98 <__EEPROM_REGION_LENGTH__+0x398>
 bb4:	19 c0       	rjmp	.+50     	; 0xbe8 <__EEPROM_REGION_LENGTH__+0x3e8>
 bb6:	f4 e0       	ldi	r31, 0x04	; 4
 bb8:	ff 15       	cp	r31, r15
 bba:	80 f5       	brcc	.+96     	; 0xc1c <__EEPROM_REGION_LENGTH__+0x41c>
 bbc:	84 e0       	ldi	r24, 0x04	; 4
 bbe:	f8 1a       	sub	r15, r24
 bc0:	73 fe       	sbrs	r7, 3
 bc2:	23 c0       	rjmp	.+70     	; 0xc0a <__EEPROM_REGION_LENGTH__+0x40a>
 bc4:	01 11       	cpse	r16, r1
 bc6:	2b c0       	rjmp	.+86     	; 0xc1e <__EEPROM_REGION_LENGTH__+0x41e>
 bc8:	53 fe       	sbrs	r5, 3
 bca:	2f c0       	rjmp	.+94     	; 0xc2a <__EEPROM_REGION_LENGTH__+0x42a>
 bcc:	59 e0       	ldi	r21, 0x09	; 9
 bce:	85 2e       	mov	r8, r21
 bd0:	55 e0       	ldi	r21, 0x05	; 5
 bd2:	95 2e       	mov	r9, r21
 bd4:	50 e0       	ldi	r21, 0x00	; 0
 bd6:	a5 2e       	mov	r10, r21
 bd8:	07 2d       	mov	r16, r7
 bda:	00 71       	andi	r16, 0x10	; 16
 bdc:	f4 01       	movw	r30, r8
 bde:	84 91       	lpm	r24, Z
 be0:	a7 fc       	sbrc	r10, 7
 be2:	80 81       	ld	r24, Z
 be4:	81 11       	cpse	r24, r1
 be6:	28 c0       	rjmp	.+80     	; 0xc38 <__EEPROM_REGION_LENGTH__+0x438>
 be8:	ff 20       	and	r15, r15
 bea:	09 f4       	brne	.+2      	; 0xbee <__EEPROM_REGION_LENGTH__+0x3ee>
 bec:	d2 cc       	rjmp	.-1628   	; 0x592 <vfprintf+0x72>
 bee:	b6 01       	movw	r22, r12
 bf0:	80 e2       	ldi	r24, 0x20	; 32
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 bf8:	fa 94       	dec	r15
 bfa:	f6 cf       	rjmp	.-20     	; 0xbe8 <__EEPROM_REGION_LENGTH__+0x3e8>
 bfc:	f6 01       	movw	r30, r12
 bfe:	87 81       	ldd	r24, Z+7	; 0x07
 c00:	90 85       	ldd	r25, Z+8	; 0x08
 c02:	2c c0       	rjmp	.+88     	; 0xc5c <__EEPROM_REGION_LENGTH__+0x45c>
 c04:	8f ef       	ldi	r24, 0xFF	; 255
 c06:	9f ef       	ldi	r25, 0xFF	; 255
 c08:	29 c0       	rjmp	.+82     	; 0xc5c <__EEPROM_REGION_LENGTH__+0x45c>
 c0a:	b6 01       	movw	r22, r12
 c0c:	80 e2       	ldi	r24, 0x20	; 32
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 c14:	fa 94       	dec	r15
 c16:	f1 10       	cpse	r15, r1
 c18:	f8 cf       	rjmp	.-16     	; 0xc0a <__EEPROM_REGION_LENGTH__+0x40a>
 c1a:	d4 cf       	rjmp	.-88     	; 0xbc4 <__EEPROM_REGION_LENGTH__+0x3c4>
 c1c:	f1 2c       	mov	r15, r1
 c1e:	b6 01       	movw	r22, r12
 c20:	80 2f       	mov	r24, r16
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 c28:	cf cf       	rjmp	.-98     	; 0xbc8 <__EEPROM_REGION_LENGTH__+0x3c8>
 c2a:	45 e0       	ldi	r20, 0x05	; 5
 c2c:	84 2e       	mov	r8, r20
 c2e:	45 e0       	ldi	r20, 0x05	; 5
 c30:	94 2e       	mov	r9, r20
 c32:	40 e0       	ldi	r20, 0x00	; 0
 c34:	a4 2e       	mov	r10, r20
 c36:	d0 cf       	rjmp	.-96     	; 0xbd8 <__EEPROM_REGION_LENGTH__+0x3d8>
 c38:	01 11       	cpse	r16, r1
 c3a:	80 52       	subi	r24, 0x20	; 32
 c3c:	b6 01       	movw	r22, r12
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	0e 94 a8 12 	call	0x2550	; 0x2550 <fputc>
 c44:	ff ef       	ldi	r31, 0xFF	; 255
 c46:	8f 1a       	sub	r8, r31
 c48:	9f 0a       	sbc	r9, r31
 c4a:	af 0a       	sbc	r10, r31
 c4c:	c7 cf       	rjmp	.-114    	; 0xbdc <__EEPROM_REGION_LENGTH__+0x3dc>
 c4e:	23 e0       	ldi	r18, 0x03	; 3
 c50:	2f 15       	cp	r18, r15
 c52:	10 f4       	brcc	.+4      	; 0xc58 <__EEPROM_REGION_LENGTH__+0x458>
 c54:	83 e0       	ldi	r24, 0x03	; 3
 c56:	b3 cf       	rjmp	.-154    	; 0xbbe <__EEPROM_REGION_LENGTH__+0x3be>
 c58:	f1 2c       	mov	r15, r1
 c5a:	b6 cf       	rjmp	.-148    	; 0xbc8 <__EEPROM_REGION_LENGTH__+0x3c8>
 c5c:	64 96       	adiw	r28, 0x14	; 20
 c5e:	e2 e1       	ldi	r30, 0x12	; 18
 c60:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__epilogue_restores__>

Disassembly of section .text.libgcc:

00003980 <__tablejump2__>:
    3980:	ee 0f       	add	r30, r30
    3982:	ff 1f       	adc	r31, r31
    3984:	05 90       	lpm	r0, Z+
    3986:	f4 91       	lpm	r31, Z
    3988:	e0 2d       	mov	r30, r0
    398a:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

0000363e <__umulhisi3>:
    363e:	a2 9f       	mul	r26, r18
    3640:	b0 01       	movw	r22, r0
    3642:	b3 9f       	mul	r27, r19
    3644:	c0 01       	movw	r24, r0
    3646:	a3 9f       	mul	r26, r19
    3648:	70 0d       	add	r23, r0
    364a:	81 1d       	adc	r24, r1
    364c:	11 24       	eor	r1, r1
    364e:	91 1d       	adc	r25, r1
    3650:	b2 9f       	mul	r27, r18
    3652:	70 0d       	add	r23, r0
    3654:	81 1d       	adc	r24, r1
    3656:	11 24       	eor	r1, r1
    3658:	91 1d       	adc	r25, r1
    365a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000031aa <__prologue_saves__>:
    31aa:	2f 92       	push	r2
    31ac:	3f 92       	push	r3
    31ae:	4f 92       	push	r4
    31b0:	5f 92       	push	r5
    31b2:	6f 92       	push	r6
    31b4:	7f 92       	push	r7
    31b6:	8f 92       	push	r8
    31b8:	9f 92       	push	r9
    31ba:	af 92       	push	r10
    31bc:	bf 92       	push	r11
    31be:	cf 92       	push	r12
    31c0:	df 92       	push	r13
    31c2:	ef 92       	push	r14
    31c4:	ff 92       	push	r15
    31c6:	0f 93       	push	r16
    31c8:	1f 93       	push	r17
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	ca 1b       	sub	r28, r26
    31d4:	db 0b       	sbc	r29, r27
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    31e0:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00003218 <__epilogue_restores__>:
    3218:	2a 88       	ldd	r2, Y+18	; 0x12
    321a:	39 88       	ldd	r3, Y+17	; 0x11
    321c:	48 88       	ldd	r4, Y+16	; 0x10
    321e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3220:	6e 84       	ldd	r6, Y+14	; 0x0e
    3222:	7d 84       	ldd	r7, Y+13	; 0x0d
    3224:	8c 84       	ldd	r8, Y+12	; 0x0c
    3226:	9b 84       	ldd	r9, Y+11	; 0x0b
    3228:	aa 84       	ldd	r10, Y+10	; 0x0a
    322a:	b9 84       	ldd	r11, Y+9	; 0x09
    322c:	c8 84       	ldd	r12, Y+8	; 0x08
    322e:	df 80       	ldd	r13, Y+7	; 0x07
    3230:	ee 80       	ldd	r14, Y+6	; 0x06
    3232:	fd 80       	ldd	r15, Y+5	; 0x05
    3234:	0c 81       	ldd	r16, Y+4	; 0x04
    3236:	1b 81       	ldd	r17, Y+3	; 0x03
    3238:	aa 81       	ldd	r26, Y+2	; 0x02
    323a:	b9 81       	ldd	r27, Y+1	; 0x01
    323c:	ce 0f       	add	r28, r30
    323e:	d1 1d       	adc	r29, r1
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	ed 01       	movw	r28, r26
    324c:	08 95       	ret

Disassembly of section .text.avrlibc:

000039e8 <atoi>:
    39e8:	0e 94 81 1c 	call	0x3902	; 0x3902 <atol>
    39ec:	cb 01       	movw	r24, r22
    39ee:	08 95       	ret

Disassembly of section .text.avrlibc:

00003902 <atol>:
    3902:	2a e0       	ldi	r18, 0x0A	; 10
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e0       	ldi	r20, 0x00	; 0
    3908:	50 e0       	ldi	r21, 0x00	; 0
    390a:	0e 94 32 06 	call	0xc64	; 0xc64 <strtol>
    390e:	08 95       	ret

Disassembly of section .text.avrlibc:

00000c64 <strtol>:
 c64:	2f 92       	push	r2
 c66:	3f 92       	push	r3
 c68:	4f 92       	push	r4
 c6a:	5f 92       	push	r5
 c6c:	6f 92       	push	r6
 c6e:	7f 92       	push	r7
 c70:	8f 92       	push	r8
 c72:	af 92       	push	r10
 c74:	bf 92       	push	r11
 c76:	cf 92       	push	r12
 c78:	df 92       	push	r13
 c7a:	ef 92       	push	r14
 c7c:	0f 93       	push	r16
 c7e:	1f 93       	push	r17
 c80:	cf 93       	push	r28
 c82:	df 93       	push	r29
 c84:	00 d0       	rcall	.+0      	; 0xc86 <strtol+0x22>
 c86:	00 d0       	rcall	.+0      	; 0xc88 <strtol+0x24>
 c88:	00 d0       	rcall	.+0      	; 0xc8a <strtol+0x26>
 c8a:	cd b7       	in	r28, 0x3d	; 61
 c8c:	de b7       	in	r29, 0x3e	; 62
 c8e:	3b 01       	movw	r6, r22
 c90:	88 2e       	mov	r8, r24
 c92:	5a 01       	movw	r10, r20
 c94:	19 01       	movw	r2, r18
 c96:	41 15       	cp	r20, r1
 c98:	51 05       	cpc	r21, r1
 c9a:	21 f0       	breq	.+8      	; 0xca4 <strtol+0x40>
 c9c:	fa 01       	movw	r30, r20
 c9e:	60 83       	st	Z, r22
 ca0:	71 83       	std	Z+1, r23	; 0x01
 ca2:	82 83       	std	Z+2, r24	; 0x02
 ca4:	21 14       	cp	r2, r1
 ca6:	31 04       	cpc	r3, r1
 ca8:	29 f0       	breq	.+10     	; 0xcb4 <strtol+0x50>
 caa:	c1 01       	movw	r24, r2
 cac:	02 97       	sbiw	r24, 0x02	; 2
 cae:	83 97       	sbiw	r24, 0x23	; 35
 cb0:	08 f0       	brcs	.+2      	; 0xcb4 <strtol+0x50>
 cb2:	1a c1       	rjmp	.+564    	; 0xee8 <strtol+0x284>
 cb4:	e8 2c       	mov	r14, r8
 cb6:	63 01       	movw	r12, r6
 cb8:	ff ef       	ldi	r31, 0xFF	; 255
 cba:	cf 1a       	sub	r12, r31
 cbc:	df 0a       	sbc	r13, r31
 cbe:	ef 0a       	sbc	r14, r31
 cc0:	f3 01       	movw	r30, r6
 cc2:	14 91       	lpm	r17, Z
 cc4:	87 fc       	sbrc	r8, 7
 cc6:	10 81       	ld	r17, Z
 cc8:	81 2f       	mov	r24, r17
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <isspace>
 cd0:	4c 2d       	mov	r20, r12
 cd2:	3d 2d       	mov	r19, r13
 cd4:	2e 2d       	mov	r18, r14
 cd6:	89 2b       	or	r24, r25
 cd8:	19 f0       	breq	.+6      	; 0xce0 <strtol+0x7c>
 cda:	36 01       	movw	r6, r12
 cdc:	8e 2c       	mov	r8, r14
 cde:	ea cf       	rjmp	.-44     	; 0xcb4 <strtol+0x50>
 ce0:	1d 32       	cpi	r17, 0x2D	; 45
 ce2:	69 f4       	brne	.+26     	; 0xcfe <strtol+0x9a>
 ce4:	e8 2c       	mov	r14, r8
 ce6:	63 01       	movw	r12, r6
 ce8:	52 e0       	ldi	r21, 0x02	; 2
 cea:	c5 0e       	add	r12, r21
 cec:	d1 1c       	adc	r13, r1
 cee:	e1 1c       	adc	r14, r1
 cf0:	e4 2f       	mov	r30, r20
 cf2:	f3 2f       	mov	r31, r19
 cf4:	14 91       	lpm	r17, Z
 cf6:	27 fd       	sbrc	r18, 7
 cf8:	10 81       	ld	r17, Z
 cfa:	01 e0       	ldi	r16, 0x01	; 1
 cfc:	0e c0       	rjmp	.+28     	; 0xd1a <strtol+0xb6>
 cfe:	1b 32       	cpi	r17, 0x2B	; 43
 d00:	59 f4       	brne	.+22     	; 0xd18 <strtol+0xb4>
 d02:	e8 2c       	mov	r14, r8
 d04:	63 01       	movw	r12, r6
 d06:	82 e0       	ldi	r24, 0x02	; 2
 d08:	c8 0e       	add	r12, r24
 d0a:	d1 1c       	adc	r13, r1
 d0c:	e1 1c       	adc	r14, r1
 d0e:	e4 2f       	mov	r30, r20
 d10:	f3 2f       	mov	r31, r19
 d12:	14 91       	lpm	r17, Z
 d14:	27 fd       	sbrc	r18, 7
 d16:	10 81       	ld	r17, Z
 d18:	00 e0       	ldi	r16, 0x00	; 0
 d1a:	21 14       	cp	r2, r1
 d1c:	31 04       	cpc	r3, r1
 d1e:	09 f1       	breq	.+66     	; 0xd62 <strtol+0xfe>
 d20:	90 e1       	ldi	r25, 0x10	; 16
 d22:	29 16       	cp	r2, r25
 d24:	31 04       	cpc	r3, r1
 d26:	29 f4       	brne	.+10     	; 0xd32 <strtol+0xce>
 d28:	3f c0       	rjmp	.+126    	; 0xda8 <strtol+0x144>
 d2a:	10 e3       	ldi	r17, 0x30	; 48
 d2c:	21 14       	cp	r2, r1
 d2e:	31 04       	cpc	r3, r1
 d30:	21 f1       	breq	.+72     	; 0xd7a <strtol+0x116>
 d32:	f8 e0       	ldi	r31, 0x08	; 8
 d34:	2f 16       	cp	r2, r31
 d36:	31 04       	cpc	r3, r1
 d38:	01 f1       	breq	.+64     	; 0xd7a <strtol+0x116>
 d3a:	54 f4       	brge	.+20     	; 0xd50 <strtol+0xec>
 d3c:	32 e0       	ldi	r19, 0x02	; 2
 d3e:	23 16       	cp	r2, r19
 d40:	31 04       	cpc	r3, r1
 d42:	21 f5       	brne	.+72     	; 0xd8c <strtol+0x128>
 d44:	41 2c       	mov	r4, r1
 d46:	51 2c       	mov	r5, r1
 d48:	61 2c       	mov	r6, r1
 d4a:	50 e4       	ldi	r21, 0x40	; 64
 d4c:	75 2e       	mov	r7, r21
 d4e:	4b c0       	rjmp	.+150    	; 0xde6 <strtol+0x182>
 d50:	4a e0       	ldi	r20, 0x0A	; 10
 d52:	24 16       	cp	r2, r20
 d54:	31 04       	cpc	r3, r1
 d56:	39 f0       	breq	.+14     	; 0xd66 <strtol+0x102>
 d58:	50 e1       	ldi	r21, 0x10	; 16
 d5a:	25 16       	cp	r2, r21
 d5c:	31 04       	cpc	r3, r1
 d5e:	b1 f4       	brne	.+44     	; 0xd8c <strtol+0x128>
 d60:	3d c0       	rjmp	.+122    	; 0xddc <strtol+0x178>
 d62:	10 33       	cpi	r17, 0x30	; 48
 d64:	19 f1       	breq	.+70     	; 0xdac <strtol+0x148>
 d66:	3a e0       	ldi	r19, 0x0A	; 10
 d68:	23 2e       	mov	r2, r19
 d6a:	31 2c       	mov	r3, r1
 d6c:	4c ec       	ldi	r20, 0xCC	; 204
 d6e:	44 2e       	mov	r4, r20
 d70:	54 2c       	mov	r5, r4
 d72:	64 2c       	mov	r6, r4
 d74:	4c e0       	ldi	r20, 0x0C	; 12
 d76:	74 2e       	mov	r7, r20
 d78:	36 c0       	rjmp	.+108    	; 0xde6 <strtol+0x182>
 d7a:	98 e0       	ldi	r25, 0x08	; 8
 d7c:	29 2e       	mov	r2, r25
 d7e:	31 2c       	mov	r3, r1
 d80:	41 2c       	mov	r4, r1
 d82:	51 2c       	mov	r5, r1
 d84:	61 2c       	mov	r6, r1
 d86:	20 e1       	ldi	r18, 0x10	; 16
 d88:	72 2e       	mov	r7, r18
 d8a:	2d c0       	rjmp	.+90     	; 0xde6 <strtol+0x182>
 d8c:	60 e0       	ldi	r22, 0x00	; 0
 d8e:	70 e0       	ldi	r23, 0x00	; 0
 d90:	80 e0       	ldi	r24, 0x00	; 0
 d92:	90 e8       	ldi	r25, 0x80	; 128
 d94:	91 01       	movw	r18, r2
 d96:	03 2c       	mov	r0, r3
 d98:	00 0c       	add	r0, r0
 d9a:	44 0b       	sbc	r20, r20
 d9c:	55 0b       	sbc	r21, r21
 d9e:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <__udivmodsi4>
 da2:	29 01       	movw	r4, r18
 da4:	3a 01       	movw	r6, r20
 da6:	1f c0       	rjmp	.+62     	; 0xde6 <strtol+0x182>
 da8:	10 33       	cpi	r17, 0x30	; 48
 daa:	c1 f4       	brne	.+48     	; 0xddc <strtol+0x178>
 dac:	f6 01       	movw	r30, r12
 dae:	84 91       	lpm	r24, Z
 db0:	e7 fc       	sbrc	r14, 7
 db2:	80 81       	ld	r24, Z
 db4:	8f 7d       	andi	r24, 0xDF	; 223
 db6:	88 35       	cpi	r24, 0x58	; 88
 db8:	09 f0       	breq	.+2      	; 0xdbc <strtol+0x158>
 dba:	b7 cf       	rjmp	.-146    	; 0xd2a <strtol+0xc6>
 dbc:	ae 2d       	mov	r26, r14
 dbe:	c6 01       	movw	r24, r12
 dc0:	01 96       	adiw	r24, 0x01	; 1
 dc2:	a1 1d       	adc	r26, r1
 dc4:	fc 01       	movw	r30, r24
 dc6:	14 91       	lpm	r17, Z
 dc8:	a7 fd       	sbrc	r26, 7
 dca:	10 81       	ld	r17, Z
 dcc:	e2 e0       	ldi	r30, 0x02	; 2
 dce:	ce 0e       	add	r12, r30
 dd0:	d1 1c       	adc	r13, r1
 dd2:	e1 1c       	adc	r14, r1
 dd4:	02 60       	ori	r16, 0x02	; 2
 dd6:	60 e1       	ldi	r22, 0x10	; 16
 dd8:	26 2e       	mov	r2, r22
 dda:	31 2c       	mov	r3, r1
 ddc:	41 2c       	mov	r4, r1
 dde:	51 2c       	mov	r5, r1
 de0:	61 2c       	mov	r6, r1
 de2:	88 e0       	ldi	r24, 0x08	; 8
 de4:	78 2e       	mov	r7, r24
 de6:	a0 e0       	ldi	r26, 0x00	; 0
 de8:	60 e0       	ldi	r22, 0x00	; 0
 dea:	70 e0       	ldi	r23, 0x00	; 0
 dec:	cb 01       	movw	r24, r22
 dee:	91 01       	movw	r18, r2
 df0:	03 2c       	mov	r0, r3
 df2:	00 0c       	add	r0, r0
 df4:	44 0b       	sbc	r20, r20
 df6:	55 0b       	sbc	r21, r21
 df8:	29 83       	std	Y+1, r18	; 0x01
 dfa:	3a 83       	std	Y+2, r19	; 0x02
 dfc:	4b 83       	std	Y+3, r20	; 0x03
 dfe:	5c 83       	std	Y+4, r21	; 0x04
 e00:	e0 ed       	ldi	r30, 0xD0	; 208
 e02:	e1 0f       	add	r30, r17
 e04:	ea 30       	cpi	r30, 0x0A	; 10
 e06:	60 f0       	brcs	.+24     	; 0xe20 <strtol+0x1bc>
 e08:	2f eb       	ldi	r18, 0xBF	; 191
 e0a:	21 0f       	add	r18, r17
 e0c:	2a 31       	cpi	r18, 0x1A	; 26
 e0e:	10 f4       	brcc	.+4      	; 0xe14 <strtol+0x1b0>
 e10:	e9 ec       	ldi	r30, 0xC9	; 201
 e12:	05 c0       	rjmp	.+10     	; 0xe1e <strtol+0x1ba>
 e14:	2f e9       	ldi	r18, 0x9F	; 159
 e16:	21 0f       	add	r18, r17
 e18:	2a 31       	cpi	r18, 0x1A	; 26
 e1a:	50 f5       	brcc	.+84     	; 0xe70 <strtol+0x20c>
 e1c:	e9 ea       	ldi	r30, 0xA9	; 169
 e1e:	e1 0f       	add	r30, r17
 e20:	2e 2f       	mov	r18, r30
 e22:	30 e0       	ldi	r19, 0x00	; 0
 e24:	22 15       	cp	r18, r2
 e26:	33 05       	cpc	r19, r3
 e28:	1c f5       	brge	.+70     	; 0xe70 <strtol+0x20c>
 e2a:	a7 fd       	sbrc	r26, 7
 e2c:	18 c0       	rjmp	.+48     	; 0xe5e <strtol+0x1fa>
 e2e:	46 16       	cp	r4, r22
 e30:	57 06       	cpc	r5, r23
 e32:	68 06       	cpc	r6, r24
 e34:	79 06       	cpc	r7, r25
 e36:	80 f0       	brcs	.+32     	; 0xe58 <strtol+0x1f4>
 e38:	29 81       	ldd	r18, Y+1	; 0x01
 e3a:	3a 81       	ldd	r19, Y+2	; 0x02
 e3c:	4b 81       	ldd	r20, Y+3	; 0x03
 e3e:	5c 81       	ldd	r21, Y+4	; 0x04
 e40:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__mulsi3>
 e44:	6e 0f       	add	r22, r30
 e46:	71 1d       	adc	r23, r1
 e48:	81 1d       	adc	r24, r1
 e4a:	91 1d       	adc	r25, r1
 e4c:	61 30       	cpi	r22, 0x01	; 1
 e4e:	71 05       	cpc	r23, r1
 e50:	81 05       	cpc	r24, r1
 e52:	30 e8       	ldi	r19, 0x80	; 128
 e54:	93 07       	cpc	r25, r19
 e56:	10 f0       	brcs	.+4      	; 0xe5c <strtol+0x1f8>
 e58:	af ef       	ldi	r26, 0xFF	; 255
 e5a:	01 c0       	rjmp	.+2      	; 0xe5e <strtol+0x1fa>
 e5c:	a1 e0       	ldi	r26, 0x01	; 1
 e5e:	f6 01       	movw	r30, r12
 e60:	14 91       	lpm	r17, Z
 e62:	e7 fc       	sbrc	r14, 7
 e64:	10 81       	ld	r17, Z
 e66:	4f ef       	ldi	r20, 0xFF	; 255
 e68:	c4 1a       	sub	r12, r20
 e6a:	d4 0a       	sbc	r13, r20
 e6c:	e4 0a       	sbc	r14, r20
 e6e:	c8 cf       	rjmp	.-112    	; 0xe00 <strtol+0x19c>
 e70:	20 2f       	mov	r18, r16
 e72:	21 70       	andi	r18, 0x01	; 1
 e74:	a1 14       	cp	r10, r1
 e76:	b1 04       	cpc	r11, r1
 e78:	b1 f0       	breq	.+44     	; 0xea6 <strtol+0x242>
 e7a:	aa 23       	and	r26, r26
 e7c:	49 f0       	breq	.+18     	; 0xe90 <strtol+0x22c>
 e7e:	51 e0       	ldi	r21, 0x01	; 1
 e80:	c5 1a       	sub	r12, r21
 e82:	d1 08       	sbc	r13, r1
 e84:	e1 08       	sbc	r14, r1
 e86:	f5 01       	movw	r30, r10
 e88:	c0 82       	st	Z, r12
 e8a:	d1 82       	std	Z+1, r13	; 0x01
 e8c:	e2 82       	std	Z+2, r14	; 0x02
 e8e:	0b c0       	rjmp	.+22     	; 0xea6 <strtol+0x242>
 e90:	01 ff       	sbrs	r16, 1
 e92:	1d c0       	rjmp	.+58     	; 0xece <strtol+0x26a>
 e94:	f2 e0       	ldi	r31, 0x02	; 2
 e96:	cf 1a       	sub	r12, r31
 e98:	d1 08       	sbc	r13, r1
 e9a:	e1 08       	sbc	r14, r1
 e9c:	f5 01       	movw	r30, r10
 e9e:	c0 82       	st	Z, r12
 ea0:	d1 82       	std	Z+1, r13	; 0x01
 ea2:	e2 82       	std	Z+2, r14	; 0x02
 ea4:	14 c0       	rjmp	.+40     	; 0xece <strtol+0x26a>
 ea6:	a7 ff       	sbrs	r26, 7
 ea8:	12 c0       	rjmp	.+36     	; 0xece <strtol+0x26a>
 eaa:	22 23       	and	r18, r18
 eac:	29 f0       	breq	.+10     	; 0xeb8 <strtol+0x254>
 eae:	60 e0       	ldi	r22, 0x00	; 0
 eb0:	70 e0       	ldi	r23, 0x00	; 0
 eb2:	80 e0       	ldi	r24, 0x00	; 0
 eb4:	90 e8       	ldi	r25, 0x80	; 128
 eb6:	04 c0       	rjmp	.+8      	; 0xec0 <strtol+0x25c>
 eb8:	6f ef       	ldi	r22, 0xFF	; 255
 eba:	7f ef       	ldi	r23, 0xFF	; 255
 ebc:	8f ef       	ldi	r24, 0xFF	; 255
 ebe:	9f e7       	ldi	r25, 0x7F	; 127
 ec0:	22 e2       	ldi	r18, 0x22	; 34
 ec2:	30 e0       	ldi	r19, 0x00	; 0
 ec4:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <errno+0x1>
 ec8:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <errno>
 ecc:	09 c0       	rjmp	.+18     	; 0xee0 <strtol+0x27c>
 ece:	22 23       	and	r18, r18
 ed0:	81 f0       	breq	.+32     	; 0xef2 <strtol+0x28e>
 ed2:	90 95       	com	r25
 ed4:	80 95       	com	r24
 ed6:	70 95       	com	r23
 ed8:	61 95       	neg	r22
 eda:	7f 4f       	sbci	r23, 0xFF	; 255
 edc:	8f 4f       	sbci	r24, 0xFF	; 255
 ede:	9f 4f       	sbci	r25, 0xFF	; 255
 ee0:	46 2f       	mov	r20, r22
 ee2:	37 2f       	mov	r19, r23
 ee4:	28 2f       	mov	r18, r24
 ee6:	12 c0       	rjmp	.+36     	; 0xf0c <strtol+0x2a8>
 ee8:	40 e0       	ldi	r20, 0x00	; 0
 eea:	30 e0       	ldi	r19, 0x00	; 0
 eec:	20 e0       	ldi	r18, 0x00	; 0
 eee:	90 e0       	ldi	r25, 0x00	; 0
 ef0:	0d c0       	rjmp	.+26     	; 0xf0c <strtol+0x2a8>
 ef2:	97 ff       	sbrs	r25, 7
 ef4:	f5 cf       	rjmp	.-22     	; 0xee0 <strtol+0x27c>
 ef6:	82 e2       	ldi	r24, 0x22	; 34
 ef8:	90 e0       	ldi	r25, 0x00	; 0
 efa:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <errno+0x1>
 efe:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <errno>
 f02:	6f ef       	ldi	r22, 0xFF	; 255
 f04:	7f ef       	ldi	r23, 0xFF	; 255
 f06:	8f ef       	ldi	r24, 0xFF	; 255
 f08:	9f e7       	ldi	r25, 0x7F	; 127
 f0a:	ea cf       	rjmp	.-44     	; 0xee0 <strtol+0x27c>
 f0c:	64 2f       	mov	r22, r20
 f0e:	73 2f       	mov	r23, r19
 f10:	82 2f       	mov	r24, r18
 f12:	26 96       	adiw	r28, 0x06	; 6
 f14:	0f b6       	in	r0, 0x3f	; 63
 f16:	f8 94       	cli
 f18:	de bf       	out	0x3e, r29	; 62
 f1a:	0f be       	out	0x3f, r0	; 63
 f1c:	cd bf       	out	0x3d, r28	; 61
 f1e:	df 91       	pop	r29
 f20:	cf 91       	pop	r28
 f22:	1f 91       	pop	r17
 f24:	0f 91       	pop	r16
 f26:	ef 90       	pop	r14
 f28:	df 90       	pop	r13
 f2a:	cf 90       	pop	r12
 f2c:	bf 90       	pop	r11
 f2e:	af 90       	pop	r10
 f30:	8f 90       	pop	r8
 f32:	7f 90       	pop	r7
 f34:	6f 90       	pop	r6
 f36:	5f 90       	pop	r5
 f38:	4f 90       	pop	r4
 f3a:	3f 90       	pop	r3
 f3c:	2f 90       	pop	r2
 f3e:	08 95       	ret

Disassembly of section .text.avrlibc:

000013a6 <__ftoa_engine>:
    13a6:	28 30       	cpi	r18, 0x08	; 8
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <__ftoa_engine+0x6>
    13aa:	27 e0       	ldi	r18, 0x07	; 7
    13ac:	33 27       	eor	r19, r19
    13ae:	da 01       	movw	r26, r20
    13b0:	99 0f       	add	r25, r25
    13b2:	31 1d       	adc	r19, r1
    13b4:	87 fd       	sbrc	r24, 7
    13b6:	91 60       	ori	r25, 0x01	; 1
    13b8:	00 96       	adiw	r24, 0x00	; 0
    13ba:	61 05       	cpc	r22, r1
    13bc:	71 05       	cpc	r23, r1
    13be:	39 f4       	brne	.+14     	; 0x13ce <__ftoa_engine+0x28>
    13c0:	32 60       	ori	r19, 0x02	; 2
    13c2:	2e 5f       	subi	r18, 0xFE	; 254
    13c4:	3d 93       	st	X+, r19
    13c6:	30 e3       	ldi	r19, 0x30	; 48
    13c8:	2a 95       	dec	r18
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <__ftoa_engine+0x1e>
    13cc:	08 95       	ret
    13ce:	9f 3f       	cpi	r25, 0xFF	; 255
    13d0:	30 f0       	brcs	.+12     	; 0x13de <__ftoa_engine+0x38>
    13d2:	80 38       	cpi	r24, 0x80	; 128
    13d4:	71 05       	cpc	r23, r1
    13d6:	61 05       	cpc	r22, r1
    13d8:	09 f0       	breq	.+2      	; 0x13dc <__ftoa_engine+0x36>
    13da:	3c 5f       	subi	r19, 0xFC	; 252
    13dc:	3c 5f       	subi	r19, 0xFC	; 252
    13de:	3d 93       	st	X+, r19
    13e0:	91 30       	cpi	r25, 0x01	; 1
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <__ftoa_engine+0x40>
    13e4:	80 68       	ori	r24, 0x80	; 128
    13e6:	91 1d       	adc	r25, r1
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	1f 93       	push	r17
    13ee:	0f 93       	push	r16
    13f0:	ff 92       	push	r15
    13f2:	ef 92       	push	r14
    13f4:	19 2f       	mov	r17, r25
    13f6:	98 7f       	andi	r25, 0xF8	; 248
    13f8:	96 95       	lsr	r25
    13fa:	e9 2f       	mov	r30, r25
    13fc:	96 95       	lsr	r25
    13fe:	96 95       	lsr	r25
    1400:	e9 0f       	add	r30, r25
    1402:	ff 27       	eor	r31, r31
    1404:	e0 50       	subi	r30, 0x00	; 0
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	99 27       	eor	r25, r25
    140a:	33 27       	eor	r19, r19
    140c:	ee 24       	eor	r14, r14
    140e:	ff 24       	eor	r15, r15
    1410:	a7 01       	movw	r20, r14
    1412:	e7 01       	movw	r28, r14
    1414:	05 90       	lpm	r0, Z+
    1416:	08 94       	sec
    1418:	07 94       	ror	r0
    141a:	28 f4       	brcc	.+10     	; 0x1426 <__ftoa_engine+0x80>
    141c:	36 0f       	add	r19, r22
    141e:	e7 1e       	adc	r14, r23
    1420:	f8 1e       	adc	r15, r24
    1422:	49 1f       	adc	r20, r25
    1424:	51 1d       	adc	r21, r1
    1426:	66 0f       	add	r22, r22
    1428:	77 1f       	adc	r23, r23
    142a:	88 1f       	adc	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	06 94       	lsr	r0
    1430:	a1 f7       	brne	.-24     	; 0x141a <__ftoa_engine+0x74>
    1432:	05 90       	lpm	r0, Z+
    1434:	07 94       	ror	r0
    1436:	28 f4       	brcc	.+10     	; 0x1442 <__ftoa_engine+0x9c>
    1438:	e7 0e       	add	r14, r23
    143a:	f8 1e       	adc	r15, r24
    143c:	49 1f       	adc	r20, r25
    143e:	56 1f       	adc	r21, r22
    1440:	c1 1d       	adc	r28, r1
    1442:	77 0f       	add	r23, r23
    1444:	88 1f       	adc	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	66 1f       	adc	r22, r22
    144a:	06 94       	lsr	r0
    144c:	a1 f7       	brne	.-24     	; 0x1436 <__ftoa_engine+0x90>
    144e:	05 90       	lpm	r0, Z+
    1450:	07 94       	ror	r0
    1452:	28 f4       	brcc	.+10     	; 0x145e <__ftoa_engine+0xb8>
    1454:	f8 0e       	add	r15, r24
    1456:	49 1f       	adc	r20, r25
    1458:	56 1f       	adc	r21, r22
    145a:	c7 1f       	adc	r28, r23
    145c:	d1 1d       	adc	r29, r1
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	66 1f       	adc	r22, r22
    1464:	77 1f       	adc	r23, r23
    1466:	06 94       	lsr	r0
    1468:	a1 f7       	brne	.-24     	; 0x1452 <__ftoa_engine+0xac>
    146a:	05 90       	lpm	r0, Z+
    146c:	07 94       	ror	r0
    146e:	20 f4       	brcc	.+8      	; 0x1478 <__ftoa_engine+0xd2>
    1470:	49 0f       	add	r20, r25
    1472:	56 1f       	adc	r21, r22
    1474:	c7 1f       	adc	r28, r23
    1476:	d8 1f       	adc	r29, r24
    1478:	99 0f       	add	r25, r25
    147a:	66 1f       	adc	r22, r22
    147c:	77 1f       	adc	r23, r23
    147e:	88 1f       	adc	r24, r24
    1480:	06 94       	lsr	r0
    1482:	a9 f7       	brne	.-22     	; 0x146e <__ftoa_engine+0xc8>
    1484:	84 91       	lpm	r24, Z
    1486:	10 95       	com	r17
    1488:	17 70       	andi	r17, 0x07	; 7
    148a:	41 f0       	breq	.+16     	; 0x149c <__ftoa_engine+0xf6>
    148c:	d6 95       	lsr	r29
    148e:	c7 95       	ror	r28
    1490:	57 95       	ror	r21
    1492:	47 95       	ror	r20
    1494:	f7 94       	ror	r15
    1496:	e7 94       	ror	r14
    1498:	1a 95       	dec	r17
    149a:	c1 f7       	brne	.-16     	; 0x148c <__ftoa_engine+0xe6>
    149c:	e6 ea       	ldi	r30, 0xA6	; 166
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	68 94       	set
    14a2:	15 90       	lpm	r1, Z+
    14a4:	15 91       	lpm	r17, Z+
    14a6:	35 91       	lpm	r19, Z+
    14a8:	65 91       	lpm	r22, Z+
    14aa:	95 91       	lpm	r25, Z+
    14ac:	05 90       	lpm	r0, Z+
    14ae:	7f e2       	ldi	r23, 0x2F	; 47
    14b0:	73 95       	inc	r23
    14b2:	e1 18       	sub	r14, r1
    14b4:	f1 0a       	sbc	r15, r17
    14b6:	43 0b       	sbc	r20, r19
    14b8:	56 0b       	sbc	r21, r22
    14ba:	c9 0b       	sbc	r28, r25
    14bc:	d0 09       	sbc	r29, r0
    14be:	c0 f7       	brcc	.-16     	; 0x14b0 <__ftoa_engine+0x10a>
    14c0:	e1 0c       	add	r14, r1
    14c2:	f1 1e       	adc	r15, r17
    14c4:	43 1f       	adc	r20, r19
    14c6:	56 1f       	adc	r21, r22
    14c8:	c9 1f       	adc	r28, r25
    14ca:	d0 1d       	adc	r29, r0
    14cc:	7e f4       	brtc	.+30     	; 0x14ec <__ftoa_engine+0x146>
    14ce:	70 33       	cpi	r23, 0x30	; 48
    14d0:	11 f4       	brne	.+4      	; 0x14d6 <__ftoa_engine+0x130>
    14d2:	8a 95       	dec	r24
    14d4:	e6 cf       	rjmp	.-52     	; 0x14a2 <__ftoa_engine+0xfc>
    14d6:	e8 94       	clt
    14d8:	01 50       	subi	r16, 0x01	; 1
    14da:	30 f0       	brcs	.+12     	; 0x14e8 <__ftoa_engine+0x142>
    14dc:	08 0f       	add	r16, r24
    14de:	0a f4       	brpl	.+2      	; 0x14e2 <__ftoa_engine+0x13c>
    14e0:	00 27       	eor	r16, r16
    14e2:	02 17       	cp	r16, r18
    14e4:	08 f4       	brcc	.+2      	; 0x14e8 <__ftoa_engine+0x142>
    14e6:	20 2f       	mov	r18, r16
    14e8:	23 95       	inc	r18
    14ea:	02 2f       	mov	r16, r18
    14ec:	7a 33       	cpi	r23, 0x3A	; 58
    14ee:	28 f0       	brcs	.+10     	; 0x14fa <__ftoa_engine+0x154>
    14f0:	79 e3       	ldi	r23, 0x39	; 57
    14f2:	7d 93       	st	X+, r23
    14f4:	2a 95       	dec	r18
    14f6:	e9 f7       	brne	.-6      	; 0x14f2 <__ftoa_engine+0x14c>
    14f8:	10 c0       	rjmp	.+32     	; 0x151a <__ftoa_engine+0x174>
    14fa:	7d 93       	st	X+, r23
    14fc:	2a 95       	dec	r18
    14fe:	89 f6       	brne	.-94     	; 0x14a2 <__ftoa_engine+0xfc>
    1500:	06 94       	lsr	r0
    1502:	97 95       	ror	r25
    1504:	67 95       	ror	r22
    1506:	37 95       	ror	r19
    1508:	17 95       	ror	r17
    150a:	17 94       	ror	r1
    150c:	e1 18       	sub	r14, r1
    150e:	f1 0a       	sbc	r15, r17
    1510:	43 0b       	sbc	r20, r19
    1512:	56 0b       	sbc	r21, r22
    1514:	c9 0b       	sbc	r28, r25
    1516:	d0 09       	sbc	r29, r0
    1518:	98 f0       	brcs	.+38     	; 0x1540 <__ftoa_engine+0x19a>
    151a:	23 95       	inc	r18
    151c:	7e 91       	ld	r23, -X
    151e:	73 95       	inc	r23
    1520:	7a 33       	cpi	r23, 0x3A	; 58
    1522:	08 f0       	brcs	.+2      	; 0x1526 <__ftoa_engine+0x180>
    1524:	70 e3       	ldi	r23, 0x30	; 48
    1526:	7c 93       	st	X, r23
    1528:	20 13       	cpse	r18, r16
    152a:	b8 f7       	brcc	.-18     	; 0x151a <__ftoa_engine+0x174>
    152c:	7e 91       	ld	r23, -X
    152e:	70 61       	ori	r23, 0x10	; 16
    1530:	7d 93       	st	X+, r23
    1532:	30 f0       	brcs	.+12     	; 0x1540 <__ftoa_engine+0x19a>
    1534:	83 95       	inc	r24
    1536:	71 e3       	ldi	r23, 0x31	; 49
    1538:	7d 93       	st	X+, r23
    153a:	70 e3       	ldi	r23, 0x30	; 48
    153c:	2a 95       	dec	r18
    153e:	e1 f7       	brne	.-8      	; 0x1538 <__ftoa_engine+0x192>
    1540:	11 24       	eor	r1, r1
    1542:	ef 90       	pop	r14
    1544:	ff 90       	pop	r15
    1546:	0f 91       	pop	r16
    1548:	1f 91       	pop	r17
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	99 27       	eor	r25, r25
    1550:	87 fd       	sbrc	r24, 7
    1552:	90 95       	com	r25
    1554:	08 95       	ret

Disassembly of section .text.avrlibc:

000037dc <isspace>:
    37dc:	91 11       	cpse	r25, r1
    37de:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <__ctype_isfalse>
    37e2:	80 32       	cpi	r24, 0x20	; 32
    37e4:	19 f0       	breq	.+6      	; 0x37ec <isspace+0x10>
    37e6:	89 50       	subi	r24, 0x09	; 9
    37e8:	85 50       	subi	r24, 0x05	; 5
    37ea:	c8 f7       	brcc	.-14     	; 0x37de <isspace+0x2>
    37ec:	08 95       	ret

Disassembly of section .text.avrlibc:

000032b6 <memcpy>:
    32b6:	cf 92       	push	r12
    32b8:	df 92       	push	r13
    32ba:	ef 92       	push	r14
    32bc:	dc 01       	movw	r26, r24
    32be:	6a 01       	movw	r12, r20
    32c0:	e6 2e       	mov	r14, r22
    32c2:	28 0f       	add	r18, r24
    32c4:	39 1f       	adc	r19, r25
    32c6:	a2 17       	cp	r26, r18
    32c8:	b3 07       	cpc	r27, r19
    32ca:	51 f0       	breq	.+20     	; 0x32e0 <memcpy+0x2a>
    32cc:	f6 01       	movw	r30, r12
    32ce:	44 91       	lpm	r20, Z
    32d0:	e7 fc       	sbrc	r14, 7
    32d2:	40 81       	ld	r20, Z
    32d4:	4d 93       	st	X+, r20
    32d6:	4f ef       	ldi	r20, 0xFF	; 255
    32d8:	c4 1a       	sub	r12, r20
    32da:	d4 0a       	sbc	r13, r20
    32dc:	e4 0a       	sbc	r14, r20
    32de:	f3 cf       	rjmp	.-26     	; 0x32c6 <memcpy+0x10>
    32e0:	ef 90       	pop	r14
    32e2:	df 90       	pop	r13
    32e4:	cf 90       	pop	r12
    32e6:	08 95       	ret

Disassembly of section .text.avrlibc:

000033d4 <strcat>:
    33d4:	9a 01       	movw	r18, r20
    33d6:	46 2f       	mov	r20, r22
    33d8:	dc 01       	movw	r26, r24
    33da:	bd 01       	movw	r22, r26
    33dc:	6f 5f       	subi	r22, 0xFF	; 255
    33de:	7f 4f       	sbci	r23, 0xFF	; 255
    33e0:	5c 91       	ld	r21, X
    33e2:	55 23       	and	r21, r21
    33e4:	11 f0       	breq	.+4      	; 0x33ea <strcat+0x16>
    33e6:	db 01       	movw	r26, r22
    33e8:	f8 cf       	rjmp	.-16     	; 0x33da <strcat+0x6>
    33ea:	f9 01       	movw	r30, r18
    33ec:	54 91       	lpm	r21, Z
    33ee:	47 fd       	sbrc	r20, 7
    33f0:	50 81       	ld	r21, Z
    33f2:	5d 93       	st	X+, r21
    33f4:	55 23       	and	r21, r21
    33f6:	21 f0       	breq	.+8      	; 0x3400 <strcat+0x2c>
    33f8:	2f 5f       	subi	r18, 0xFF	; 255
    33fa:	3f 4f       	sbci	r19, 0xFF	; 255
    33fc:	4f 4f       	sbci	r20, 0xFF	; 255
    33fe:	f5 cf       	rjmp	.-22     	; 0x33ea <strcat+0x16>
    3400:	08 95       	ret

Disassembly of section .text.avrlibc:

00002fd2 <strcmp>:
    2fd2:	cf 92       	push	r12
    2fd4:	df 92       	push	r13
    2fd6:	ef 92       	push	r14
    2fd8:	6b 01       	movw	r12, r22
    2fda:	e8 2e       	mov	r14, r24
    2fdc:	f6 01       	movw	r30, r12
    2fde:	84 91       	lpm	r24, Z
    2fe0:	e7 fc       	sbrc	r14, 7
    2fe2:	80 81       	ld	r24, Z
    2fe4:	f9 01       	movw	r30, r18
    2fe6:	54 91       	lpm	r21, Z
    2fe8:	47 fd       	sbrc	r20, 7
    2fea:	50 81       	ld	r21, Z
    2fec:	85 13       	cpse	r24, r21
    2fee:	0b c0       	rjmp	.+22     	; 0x3006 <strcmp+0x34>
    2ff0:	88 23       	and	r24, r24
    2ff2:	41 f0       	breq	.+16     	; 0x3004 <strcmp+0x32>
    2ff4:	8f ef       	ldi	r24, 0xFF	; 255
    2ff6:	c8 1a       	sub	r12, r24
    2ff8:	d8 0a       	sbc	r13, r24
    2ffa:	e8 0a       	sbc	r14, r24
    2ffc:	2f 5f       	subi	r18, 0xFF	; 255
    2ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    3000:	4f 4f       	sbci	r20, 0xFF	; 255
    3002:	ec cf       	rjmp	.-40     	; 0x2fdc <strcmp+0xa>
    3004:	58 2f       	mov	r21, r24
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	85 1b       	sub	r24, r21
    300a:	91 09       	sbc	r25, r1
    300c:	ef 90       	pop	r14
    300e:	df 90       	pop	r13
    3010:	cf 90       	pop	r12
    3012:	08 95       	ret

Disassembly of section .text.avrlibc:

00002786 <strncmp>:
    2786:	cf 92       	push	r12
    2788:	df 92       	push	r13
    278a:	ef 92       	push	r14
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	6b 01       	movw	r12, r22
    2792:	e8 2e       	mov	r14, r24
    2794:	01 15       	cp	r16, r1
    2796:	11 05       	cpc	r17, r1
    2798:	19 f1       	breq	.+70     	; 0x27e0 <strncmp+0x5a>
    279a:	01 50       	subi	r16, 0x01	; 1
    279c:	11 09       	sbc	r17, r1
    279e:	f6 01       	movw	r30, r12
    27a0:	84 91       	lpm	r24, Z
    27a2:	e7 fc       	sbrc	r14, 7
    27a4:	80 81       	ld	r24, Z
    27a6:	88 23       	and	r24, r24
    27a8:	99 f0       	breq	.+38     	; 0x27d0 <strncmp+0x4a>
    27aa:	f9 01       	movw	r30, r18
    27ac:	94 91       	lpm	r25, Z
    27ae:	47 fd       	sbrc	r20, 7
    27b0:	90 81       	ld	r25, Z
    27b2:	99 23       	and	r25, r25
    27b4:	69 f0       	breq	.+26     	; 0x27d0 <strncmp+0x4a>
    27b6:	01 15       	cp	r16, r1
    27b8:	11 05       	cpc	r17, r1
    27ba:	51 f0       	breq	.+20     	; 0x27d0 <strncmp+0x4a>
    27bc:	89 13       	cpse	r24, r25
    27be:	08 c0       	rjmp	.+16     	; 0x27d0 <strncmp+0x4a>
    27c0:	8f ef       	ldi	r24, 0xFF	; 255
    27c2:	c8 1a       	sub	r12, r24
    27c4:	d8 0a       	sbc	r13, r24
    27c6:	e8 0a       	sbc	r14, r24
    27c8:	2f 5f       	subi	r18, 0xFF	; 255
    27ca:	3f 4f       	sbci	r19, 0xFF	; 255
    27cc:	4f 4f       	sbci	r20, 0xFF	; 255
    27ce:	e5 cf       	rjmp	.-54     	; 0x279a <strncmp+0x14>
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	f9 01       	movw	r30, r18
    27d4:	24 91       	lpm	r18, Z
    27d6:	47 fd       	sbrc	r20, 7
    27d8:	20 81       	ld	r18, Z
    27da:	82 1b       	sub	r24, r18
    27dc:	91 09       	sbc	r25, r1
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <strncmp+0x5e>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	ef 90       	pop	r14
    27ea:	df 90       	pop	r13
    27ec:	cf 90       	pop	r12
    27ee:	08 95       	ret

Disassembly of section .text.avrlibc:

00003402 <strlen>:
    3402:	cf 92       	push	r12
    3404:	df 92       	push	r13
    3406:	ef 92       	push	r14
    3408:	6b 01       	movw	r12, r22
    340a:	e8 2e       	mov	r14, r24
    340c:	a8 2f       	mov	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	fc 01       	movw	r30, r24
    3412:	24 91       	lpm	r18, Z
    3414:	a7 fd       	sbrc	r26, 7
    3416:	20 81       	ld	r18, Z
    3418:	22 23       	and	r18, r18
    341a:	19 f0       	breq	.+6      	; 0x3422 <strlen+0x20>
    341c:	01 96       	adiw	r24, 0x01	; 1
    341e:	a1 1d       	adc	r26, r1
    3420:	f7 cf       	rjmp	.-18     	; 0x3410 <strlen+0xe>
    3422:	8c 19       	sub	r24, r12
    3424:	9d 09       	sbc	r25, r13
    3426:	ef 90       	pop	r14
    3428:	df 90       	pop	r13
    342a:	cf 90       	pop	r12
    342c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000365c <strcpy>:
    365c:	9a 01       	movw	r18, r20
    365e:	46 2f       	mov	r20, r22
    3660:	dc 01       	movw	r26, r24
    3662:	f9 01       	movw	r30, r18
    3664:	54 91       	lpm	r21, Z
    3666:	47 fd       	sbrc	r20, 7
    3668:	50 81       	ld	r21, Z
    366a:	5d 93       	st	X+, r21
    366c:	55 23       	and	r21, r21
    366e:	21 f0       	breq	.+8      	; 0x3678 <strcpy+0x1c>
    3670:	2f 5f       	subi	r18, 0xFF	; 255
    3672:	3f 4f       	sbci	r19, 0xFF	; 255
    3674:	4f 4f       	sbci	r20, 0xFF	; 255
    3676:	f5 cf       	rjmp	.-22     	; 0x3662 <strcpy+0x6>
    3678:	08 95       	ret

Disassembly of section .text.avrlibc:

0000324e <strnlen>:
    324e:	cf 92       	push	r12
    3250:	df 92       	push	r13
    3252:	ef 92       	push	r14
    3254:	6b 01       	movw	r12, r22
    3256:	e8 2e       	mov	r14, r24
    3258:	a8 2f       	mov	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	41 15       	cp	r20, r1
    325e:	51 05       	cpc	r21, r1
    3260:	31 f4       	brne	.+12     	; 0x326e <strnlen+0x20>
    3262:	8c 19       	sub	r24, r12
    3264:	9d 09       	sbc	r25, r13
    3266:	ef 90       	pop	r14
    3268:	df 90       	pop	r13
    326a:	cf 90       	pop	r12
    326c:	08 95       	ret
    326e:	fc 01       	movw	r30, r24
    3270:	24 91       	lpm	r18, Z
    3272:	a7 fd       	sbrc	r26, 7
    3274:	20 81       	ld	r18, Z
    3276:	22 23       	and	r18, r18
    3278:	a1 f3       	breq	.-24     	; 0x3262 <strnlen+0x14>
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	a1 1d       	adc	r26, r1
    327e:	41 50       	subi	r20, 0x01	; 1
    3280:	51 09       	sbc	r21, r1
    3282:	ec cf       	rjmp	.-40     	; 0x325c <strnlen+0xe>

Disassembly of section .text.avrlibc:

00002550 <fputc>:
    2550:	0f 93       	push	r16
    2552:	1f 93       	push	r17
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	fb 01       	movw	r30, r22
    255a:	24 81       	ldd	r18, Z+4	; 0x04
    255c:	21 fd       	sbrc	r18, 1
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <fputc+0x16>
    2560:	8f ef       	ldi	r24, 0xFF	; 255
    2562:	9f ef       	ldi	r25, 0xFF	; 255
    2564:	2c c0       	rjmp	.+88     	; 0x25be <fputc+0x6e>
    2566:	22 ff       	sbrs	r18, 2
    2568:	16 c0       	rjmp	.+44     	; 0x2596 <fputc+0x46>
    256a:	47 81       	ldd	r20, Z+7	; 0x07
    256c:	50 85       	ldd	r21, Z+8	; 0x08
    256e:	25 81       	ldd	r18, Z+5	; 0x05
    2570:	36 81       	ldd	r19, Z+6	; 0x06
    2572:	42 17       	cp	r20, r18
    2574:	53 07       	cpc	r21, r19
    2576:	44 f4       	brge	.+16     	; 0x2588 <fputc+0x38>
    2578:	a0 81       	ld	r26, Z
    257a:	b1 81       	ldd	r27, Z+1	; 0x01
    257c:	9d 01       	movw	r18, r26
    257e:	2f 5f       	subi	r18, 0xFF	; 255
    2580:	3f 4f       	sbci	r19, 0xFF	; 255
    2582:	31 83       	std	Z+1, r19	; 0x01
    2584:	20 83       	st	Z, r18
    2586:	8c 93       	st	X, r24
    2588:	27 81       	ldd	r18, Z+7	; 0x07
    258a:	30 85       	ldd	r19, Z+8	; 0x08
    258c:	2f 5f       	subi	r18, 0xFF	; 255
    258e:	3f 4f       	sbci	r19, 0xFF	; 255
    2590:	30 87       	std	Z+8, r19	; 0x08
    2592:	27 83       	std	Z+7, r18	; 0x07
    2594:	14 c0       	rjmp	.+40     	; 0x25be <fputc+0x6e>
    2596:	8b 01       	movw	r16, r22
    2598:	ec 01       	movw	r28, r24
    259a:	fb 01       	movw	r30, r22
    259c:	01 84       	ldd	r0, Z+9	; 0x09
    259e:	f2 85       	ldd	r31, Z+10	; 0x0a
    25a0:	e0 2d       	mov	r30, r0
    25a2:	09 95       	icall
    25a4:	89 2b       	or	r24, r25
    25a6:	e1 f6       	brne	.-72     	; 0x2560 <fputc+0x10>
    25a8:	d8 01       	movw	r26, r16
    25aa:	17 96       	adiw	r26, 0x07	; 7
    25ac:	8d 91       	ld	r24, X+
    25ae:	9c 91       	ld	r25, X
    25b0:	18 97       	sbiw	r26, 0x08	; 8
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	18 96       	adiw	r26, 0x08	; 8
    25b6:	9c 93       	st	X, r25
    25b8:	8e 93       	st	-X, r24
    25ba:	17 97       	sbiw	r26, 0x07	; 7
    25bc:	ce 01       	movw	r24, r28
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	08 95       	ret

Disassembly of section .text.avrlibc:

00002ec0 <sprintf>:
    2ec0:	af e0       	ldi	r26, 0x0F	; 15
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e6 e6       	ldi	r30, 0x66	; 102
    2ec6:	f7 e1       	ldi	r31, 0x17	; 23
    2ec8:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__prologue_saves__+0x1c>
    2ecc:	0e 89       	ldd	r16, Y+22	; 0x16
    2ece:	1f 89       	ldd	r17, Y+23	; 0x17
    2ed0:	86 e0       	ldi	r24, 0x06	; 6
    2ed2:	8d 83       	std	Y+5, r24	; 0x05
    2ed4:	1a 83       	std	Y+2, r17	; 0x02
    2ed6:	09 83       	std	Y+1, r16	; 0x01
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	9f e7       	ldi	r25, 0x7F	; 127
    2edc:	9f 83       	std	Y+7, r25	; 0x07
    2ede:	8e 83       	std	Y+6, r24	; 0x06
    2ee0:	9e 01       	movw	r18, r28
    2ee2:	25 5e       	subi	r18, 0xE5	; 229
    2ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee6:	48 8d       	ldd	r20, Y+24	; 0x18
    2ee8:	59 8d       	ldd	r21, Y+25	; 0x19
    2eea:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2eec:	ce 01       	movw	r24, r28
    2eee:	01 96       	adiw	r24, 0x01	; 1
    2ef0:	0e 94 90 02 	call	0x520	; 0x520 <vfprintf>
    2ef4:	e8 85       	ldd	r30, Y+8	; 0x08
    2ef6:	f9 85       	ldd	r31, Y+9	; 0x09
    2ef8:	e0 0f       	add	r30, r16
    2efa:	f1 1f       	adc	r31, r17
    2efc:	10 82       	st	Z, r1
    2efe:	2f 96       	adiw	r28, 0x0f	; 15
    2f00:	e4 e0       	ldi	r30, 0x04	; 4
    2f02:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00001dd2 <__ultoa_invert>:
    1dd2:	fa 01       	movw	r30, r20
    1dd4:	aa 27       	eor	r26, r26
    1dd6:	28 30       	cpi	r18, 0x08	; 8
    1dd8:	51 f1       	breq	.+84     	; 0x1e2e <__ultoa_invert+0x5c>
    1dda:	20 31       	cpi	r18, 0x10	; 16
    1ddc:	81 f1       	breq	.+96     	; 0x1e3e <__ultoa_invert+0x6c>
    1dde:	e8 94       	clt
    1de0:	6f 93       	push	r22
    1de2:	6e 7f       	andi	r22, 0xFE	; 254
    1de4:	6e 5f       	subi	r22, 0xFE	; 254
    1de6:	7f 4f       	sbci	r23, 0xFF	; 255
    1de8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dea:	9f 4f       	sbci	r25, 0xFF	; 255
    1dec:	af 4f       	sbci	r26, 0xFF	; 255
    1dee:	b1 e0       	ldi	r27, 0x01	; 1
    1df0:	3e d0       	rcall	.+124    	; 0x1e6e <__ultoa_invert+0x9c>
    1df2:	b4 e0       	ldi	r27, 0x04	; 4
    1df4:	3c d0       	rcall	.+120    	; 0x1e6e <__ultoa_invert+0x9c>
    1df6:	67 0f       	add	r22, r23
    1df8:	78 1f       	adc	r23, r24
    1dfa:	89 1f       	adc	r24, r25
    1dfc:	9a 1f       	adc	r25, r26
    1dfe:	a1 1d       	adc	r26, r1
    1e00:	68 0f       	add	r22, r24
    1e02:	79 1f       	adc	r23, r25
    1e04:	8a 1f       	adc	r24, r26
    1e06:	91 1d       	adc	r25, r1
    1e08:	a1 1d       	adc	r26, r1
    1e0a:	6a 0f       	add	r22, r26
    1e0c:	71 1d       	adc	r23, r1
    1e0e:	81 1d       	adc	r24, r1
    1e10:	91 1d       	adc	r25, r1
    1e12:	a1 1d       	adc	r26, r1
    1e14:	20 d0       	rcall	.+64     	; 0x1e56 <__ultoa_invert+0x84>
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <__ultoa_invert+0x48>
    1e18:	68 94       	set
    1e1a:	3f 91       	pop	r19
    1e1c:	2a e0       	ldi	r18, 0x0A	; 10
    1e1e:	26 9f       	mul	r18, r22
    1e20:	11 24       	eor	r1, r1
    1e22:	30 19       	sub	r19, r0
    1e24:	30 5d       	subi	r19, 0xD0	; 208
    1e26:	31 93       	st	Z+, r19
    1e28:	de f6       	brtc	.-74     	; 0x1de0 <__ultoa_invert+0xe>
    1e2a:	cf 01       	movw	r24, r30
    1e2c:	08 95       	ret
    1e2e:	46 2f       	mov	r20, r22
    1e30:	47 70       	andi	r20, 0x07	; 7
    1e32:	40 5d       	subi	r20, 0xD0	; 208
    1e34:	41 93       	st	Z+, r20
    1e36:	b3 e0       	ldi	r27, 0x03	; 3
    1e38:	0f d0       	rcall	.+30     	; 0x1e58 <__ultoa_invert+0x86>
    1e3a:	c9 f7       	brne	.-14     	; 0x1e2e <__ultoa_invert+0x5c>
    1e3c:	f6 cf       	rjmp	.-20     	; 0x1e2a <__ultoa_invert+0x58>
    1e3e:	46 2f       	mov	r20, r22
    1e40:	4f 70       	andi	r20, 0x0F	; 15
    1e42:	40 5d       	subi	r20, 0xD0	; 208
    1e44:	4a 33       	cpi	r20, 0x3A	; 58
    1e46:	18 f0       	brcs	.+6      	; 0x1e4e <__ultoa_invert+0x7c>
    1e48:	49 5d       	subi	r20, 0xD9	; 217
    1e4a:	31 fd       	sbrc	r19, 1
    1e4c:	40 52       	subi	r20, 0x20	; 32
    1e4e:	41 93       	st	Z+, r20
    1e50:	02 d0       	rcall	.+4      	; 0x1e56 <__ultoa_invert+0x84>
    1e52:	a9 f7       	brne	.-22     	; 0x1e3e <__ultoa_invert+0x6c>
    1e54:	ea cf       	rjmp	.-44     	; 0x1e2a <__ultoa_invert+0x58>
    1e56:	b4 e0       	ldi	r27, 0x04	; 4
    1e58:	a6 95       	lsr	r26
    1e5a:	97 95       	ror	r25
    1e5c:	87 95       	ror	r24
    1e5e:	77 95       	ror	r23
    1e60:	67 95       	ror	r22
    1e62:	ba 95       	dec	r27
    1e64:	c9 f7       	brne	.-14     	; 0x1e58 <__ultoa_invert+0x86>
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	61 05       	cpc	r22, r1
    1e6a:	71 05       	cpc	r23, r1
    1e6c:	08 95       	ret
    1e6e:	9b 01       	movw	r18, r22
    1e70:	ac 01       	movw	r20, r24
    1e72:	0a 2e       	mov	r0, r26
    1e74:	06 94       	lsr	r0
    1e76:	57 95       	ror	r21
    1e78:	47 95       	ror	r20
    1e7a:	37 95       	ror	r19
    1e7c:	27 95       	ror	r18
    1e7e:	ba 95       	dec	r27
    1e80:	c9 f7       	brne	.-14     	; 0x1e74 <__ultoa_invert+0xa2>
    1e82:	62 0f       	add	r22, r18
    1e84:	73 1f       	adc	r23, r19
    1e86:	84 1f       	adc	r24, r20
    1e88:	95 1f       	adc	r25, r21
    1e8a:	a0 1d       	adc	r26, r0
    1e8c:	08 95       	ret

Disassembly of section .text.avrlibc:

00003a02 <__ctype_isfalse>:
    3a02:	99 27       	eor	r25, r25
    3a04:	88 27       	eor	r24, r24

00003a06 <__ctype_istrue>:
    3a06:	08 95       	ret

Disassembly of section .text.avrlibc:

00003518 <eeprom_read_block>:
    3518:	ba 01       	movw	r22, r20
    351a:	a9 01       	movw	r20, r18
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22

00003520 <eeprom_read_blraw>:
    3520:	fc 01       	movw	r30, r24
    3522:	f9 99       	sbic	0x1f, 1	; 31
    3524:	fe cf       	rjmp	.-4      	; 0x3522 <eeprom_read_blraw+0x2>
    3526:	06 c0       	rjmp	.+12     	; 0x3534 <eeprom_read_blraw+0x14>
    3528:	f2 bd       	out	0x22, r31	; 34
    352a:	e1 bd       	out	0x21, r30	; 33
    352c:	f8 9a       	sbi	0x1f, 0	; 31
    352e:	31 96       	adiw	r30, 0x01	; 1
    3530:	00 b4       	in	r0, 0x20	; 32
    3532:	0d 92       	st	X+, r0
    3534:	41 50       	subi	r20, 0x01	; 1
    3536:	50 40       	sbci	r21, 0x00	; 0
    3538:	b8 f7       	brcc	.-18     	; 0x3528 <eeprom_read_blraw+0x8>
    353a:	08 95       	ret

Disassembly of section .text.avrlibc:

000037ee <eeprom_read_byte>:
    37ee:	cb 01       	movw	r24, r22
    37f0:	f9 99       	sbic	0x1f, 1	; 31
    37f2:	fe cf       	rjmp	.-4      	; 0x37f0 <eeprom_read_byte+0x2>
    37f4:	92 bd       	out	0x22, r25	; 34
    37f6:	81 bd       	out	0x21, r24	; 33
    37f8:	f8 9a       	sbi	0x1f, 0	; 31
    37fa:	99 27       	eor	r25, r25
    37fc:	80 b5       	in	r24, 0x20	; 32
    37fe:	08 95       	ret

Disassembly of section .text.avrlibc:

00003910 <eeprom_read_dword>:
    3910:	cb 01       	movw	r24, r22
    3912:	a6 e1       	ldi	r26, 0x16	; 22
    3914:	b0 e0       	ldi	r27, 0x00	; 0
    3916:	44 e0       	ldi	r20, 0x04	; 4
    3918:	50 e0       	ldi	r21, 0x00	; 0
    391a:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000391e <eeprom_read_word>:
    391e:	cb 01       	movw	r24, r22
    3920:	a8 e1       	ldi	r26, 0x18	; 24
    3922:	b0 e0       	ldi	r27, 0x00	; 0
    3924:	42 e0       	ldi	r20, 0x02	; 2
    3926:	50 e0       	ldi	r21, 0x00	; 0
    3928:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00002f4a <eeprom_update_block>:
    2f4a:	cf 92       	push	r12
    2f4c:	df 92       	push	r13
    2f4e:	ef 92       	push	r14
    2f50:	21 50       	subi	r18, 0x01	; 1
    2f52:	31 09       	sbc	r19, r1
    2f54:	c0 f0       	brcs	.+48     	; 0x2f86 <eeprom_update_block+0x3c>
    2f56:	6b 01       	movw	r12, r22
    2f58:	e8 2e       	mov	r14, r24
    2f5a:	c2 0e       	add	r12, r18
    2f5c:	d3 1e       	adc	r13, r19
    2f5e:	e1 1c       	adc	r14, r1
    2f60:	ca 01       	movw	r24, r20
    2f62:	82 0f       	add	r24, r18
    2f64:	93 1f       	adc	r25, r19
    2f66:	42 2f       	mov	r20, r18
    2f68:	73 2f       	mov	r23, r19
    2f6a:	f6 01       	movw	r30, r12
    2f6c:	5e 2d       	mov	r21, r14
    2f6e:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <__xload_1>
    2f72:	26 2f       	mov	r18, r22
    2f74:	0e 94 9f 1a 	call	0x353e	; 0x353e <eeprom_update_r18>
    2f78:	31 e0       	ldi	r19, 0x01	; 1
    2f7a:	c3 1a       	sub	r12, r19
    2f7c:	d1 08       	sbc	r13, r1
    2f7e:	e1 08       	sbc	r14, r1
    2f80:	41 50       	subi	r20, 0x01	; 1
    2f82:	70 40       	sbci	r23, 0x00	; 0
    2f84:	90 f7       	brcc	.-28     	; 0x2f6a <eeprom_update_block+0x20>
    2f86:	ef 90       	pop	r14
    2f88:	df 90       	pop	r13
    2f8a:	cf 90       	pop	r12
    2f8c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000353c <eeprom_update_byte>:
    353c:	26 2f       	mov	r18, r22

0000353e <eeprom_update_r18>:
    353e:	f9 99       	sbic	0x1f, 1	; 31
    3540:	fe cf       	rjmp	.-4      	; 0x353e <eeprom_update_r18>
    3542:	92 bd       	out	0x22, r25	; 34
    3544:	81 bd       	out	0x21, r24	; 33
    3546:	f8 9a       	sbi	0x1f, 0	; 31
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	00 b4       	in	r0, 0x20	; 32
    354c:	02 16       	cp	r0, r18
    354e:	39 f0       	breq	.+14     	; 0x355e <eeprom_update_r18+0x20>
    3550:	1f ba       	out	0x1f, r1	; 31
    3552:	20 bd       	out	0x20, r18	; 32
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	fa 9a       	sbi	0x1f, 2	; 31
    355a:	f9 9a       	sbi	0x1f, 1	; 31
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	08 95       	ret

Disassembly of section .text.avrlibc:

000036e2 <eeprom_update_dword>:
    36e2:	03 96       	adiw	r24, 0x03	; 3
    36e4:	27 2f       	mov	r18, r23
    36e6:	0e 94 9f 1a 	call	0x353e	; 0x353e <eeprom_update_r18>
    36ea:	0e 94 9e 1a 	call	0x353c	; 0x353c <eeprom_update_byte>
    36ee:	25 2f       	mov	r18, r21
    36f0:	0e 94 9f 1a 	call	0x353e	; 0x353e <eeprom_update_r18>
    36f4:	24 2f       	mov	r18, r20
    36f6:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <eeprom_update_r18>

Disassembly of section .text.avrlibc:

0000398c <eeprom_update_word>:
    398c:	01 96       	adiw	r24, 0x01	; 1
    398e:	27 2f       	mov	r18, r23
    3990:	0e 94 9f 1a 	call	0x353e	; 0x353e <eeprom_update_r18>
    3994:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

000035c4 <__mulsi3>:
    35c4:	db 01       	movw	r26, r22
    35c6:	8f 93       	push	r24
    35c8:	9f 93       	push	r25
    35ca:	0e 94 9e 1b 	call	0x373c	; 0x373c <__muluhisi3>
    35ce:	bf 91       	pop	r27
    35d0:	af 91       	pop	r26
    35d2:	a2 9f       	mul	r26, r18
    35d4:	80 0d       	add	r24, r0
    35d6:	91 1d       	adc	r25, r1
    35d8:	a3 9f       	mul	r26, r19
    35da:	90 0d       	add	r25, r0
    35dc:	b2 9f       	mul	r27, r18
    35de:	90 0d       	add	r25, r0
    35e0:	11 24       	eor	r1, r1
    35e2:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002f8e <__udivmodsi4>:
    2f8e:	a1 e2       	ldi	r26, 0x21	; 33
    2f90:	1a 2e       	mov	r1, r26
    2f92:	aa 1b       	sub	r26, r26
    2f94:	bb 1b       	sub	r27, r27
    2f96:	fd 01       	movw	r30, r26
    2f98:	0d c0       	rjmp	.+26     	; 0x2fb4 <__udivmodsi4_ep>

00002f9a <__udivmodsi4_loop>:
    2f9a:	aa 1f       	adc	r26, r26
    2f9c:	bb 1f       	adc	r27, r27
    2f9e:	ee 1f       	adc	r30, r30
    2fa0:	ff 1f       	adc	r31, r31
    2fa2:	a2 17       	cp	r26, r18
    2fa4:	b3 07       	cpc	r27, r19
    2fa6:	e4 07       	cpc	r30, r20
    2fa8:	f5 07       	cpc	r31, r21
    2faa:	20 f0       	brcs	.+8      	; 0x2fb4 <__udivmodsi4_ep>
    2fac:	a2 1b       	sub	r26, r18
    2fae:	b3 0b       	sbc	r27, r19
    2fb0:	e4 0b       	sbc	r30, r20
    2fb2:	f5 0b       	sbc	r31, r21

00002fb4 <__udivmodsi4_ep>:
    2fb4:	66 1f       	adc	r22, r22
    2fb6:	77 1f       	adc	r23, r23
    2fb8:	88 1f       	adc	r24, r24
    2fba:	99 1f       	adc	r25, r25
    2fbc:	1a 94       	dec	r1
    2fbe:	69 f7       	brne	.-38     	; 0x2f9a <__udivmodsi4_loop>
    2fc0:	60 95       	com	r22
    2fc2:	70 95       	com	r23
    2fc4:	80 95       	com	r24
    2fc6:	90 95       	com	r25
    2fc8:	9b 01       	movw	r18, r22
    2fca:	ac 01       	movw	r20, r24
    2fcc:	bd 01       	movw	r22, r26
    2fce:	cf 01       	movw	r24, r30
    2fd0:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000373c <__muluhisi3>:
    373c:	0e 94 1f 1b 	call	0x363e	; 0x363e <__umulhisi3>
    3740:	a5 9f       	mul	r26, r21
    3742:	90 0d       	add	r25, r0
    3744:	b4 9f       	mul	r27, r20
    3746:	90 0d       	add	r25, r0
    3748:	a4 9f       	mul	r26, r20
    374a:	80 0d       	add	r24, r0
    374c:	91 1d       	adc	r25, r1
    374e:	11 24       	eor	r1, r1
    3750:	08 95       	ret

Disassembly of section .text.libgcc:

000039b6 <__xload_1>:
    39b6:	57 fd       	sbrc	r21, 7
    39b8:	60 81       	ld	r22, Z
    39ba:	57 ff       	sbrs	r21, 7
    39bc:	64 91       	lpm	r22, Z
    39be:	08 95       	ret
