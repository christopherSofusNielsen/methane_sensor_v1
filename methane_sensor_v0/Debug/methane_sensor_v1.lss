
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000054a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000190  00800100  00800100  0000054a  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000268  00000000  00000000  000005a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ce7  00000000  00000000  0000080d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f51  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fd0  00000000  00000000  00004445  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005c4  00000000  00000000  00005418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000299  00000000  00000000  000059dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c22  00000000  00000000  00005c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00006897  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004b2  000004b2  00000546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_3 00000014  00000498  00000498  0000052c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_16 0000004e  000002c6  000002c6  0000035a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss._cb      00000002  0080042a  0080042a  0000054a  2**0
                  ALLOC
 17 .text.__vector_13 0000004e  00000314  00000314  000003a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss._cb      00000002  0080042c  0080042c  0000054a  2**0
                  ALLOC
 19 .text.__vector_9 00000098  000000e0  000000e0  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.cnt      00000001  0080042e  0080042e  0000054a  2**0
                  ALLOC
 21 .bss.callbacks 0000000a  00800420  00800420  0000054a  2**0
                  ALLOC
 22 .text.uart0_hal_init 0000003c  000003f6  000003f6  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.uart0_hal_send_string 0000006a  0000025c  0000025c  000002f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_22 0000004a  00000362  00000362  000003f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_20 00000074  00000178  00000178  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.rx_buffer_has_message 00000001  0080042f  0080042f  0000054a  2**0
                  ALLOC
 27 .bss.rx_buffer_data_len 00000001  00800430  00800430  0000054a  2**0
                  ALLOC
 28 .bss.tx_buffer_cursor 00000001  00800431  00800431  0000054a  2**0
                  ALLOC
 29 .bss.tx_buffer_data_len 00000001  00800432  00800432  0000054a  2**0
                  ALLOC
 30 .text.__vector_30 0000004a  000003ac  000003ac  00000440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_28 00000070  000001ec  000001ec  00000280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.rx_buffer_has_message 00000001  00800433  00800433  0000054a  2**0
                  ALLOC
 33 .bss.rx_buffer_data_len 00000001  00800434  00800434  0000054a  2**0
                  ALLOC
 34 .bss.rx_buffer 00000064  008003bc  008003bc  0000054a  2**0
                  ALLOC
 35 .bss.tx_buffer_cursor 00000001  00800435  00800435  0000054a  2**0
                  ALLOC
 36 .bss.tx_buffer_data_len 00000001  00800436  00800436  0000054a  2**0
                  ALLOC
 37 .bss.tx_buffer 0000012c  00800290  00800290  0000054a  2**0
                  ALLOC
 38 .text.main    00000018  00000480  00000480  00000514  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .progmemx.data 00000009  000000d6  000000d6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .text.test_LED_module_start 00000022  0000045e  0000045e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.test_runner 00000006  000004ac  000004ac  00000540  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc 0000002c  00000432  00000432  000004c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
   8:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
   c:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_3>
  10:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  14:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  18:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  1c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  20:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_9>
  28:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  2c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  30:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  34:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_13>
  38:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  3c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  40:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_16>
  44:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  48:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  4c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_20>
  54:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  58:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_22>
  5c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  60:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  64:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  68:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  6c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  70:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_28>
  74:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__bad_interrupt>
  78:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	04 37       	cpi	r16, 0x74	; 116
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d0 e1       	ldi	r29, 0x10	; 16
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 40 02 	call	0x480	; 0x480 <main>
  ce:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

000004b2 <__bad_interrupt>:
 4b2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_3:

00000498 <__vector_3>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
}

ISR(INT2_vect){
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
	
}
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

Disassembly of section .text.__vector_16:

000002c6 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	_cb();
 2e8:	e0 91 2a 04 	lds	r30, 0x042A	; 0x80042a <_cb>
 2ec:	f0 91 2b 04 	lds	r31, 0x042B	; 0x80042b <_cb+0x1>
 2f0:	09 95       	icall
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

Disassembly of section .text.__vector_13:

00000314 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
	_cb();
 336:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <_cb>
 33a:	f0 91 2d 04 	lds	r31, 0x042D	; 0x80042d <_cb+0x1>
 33e:	09 95       	icall
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

Disassembly of section .text.__vector_9:

000000e0 <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	cf 93       	push	r28
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	cnt++;
 104:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <cnt>
 108:	9f 5f       	subi	r25, 0xFF	; 255
 10a:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <cnt>
	
	if(cnt % 31==0){
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	98 9f       	mul	r25, r24
 112:	21 2d       	mov	r18, r1
 114:	11 24       	eor	r1, r1
 116:	89 2f       	mov	r24, r25
 118:	82 1b       	sub	r24, r18
 11a:	86 95       	lsr	r24
 11c:	82 0f       	add	r24, r18
 11e:	82 95       	swap	r24
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	2f e1       	ldi	r18, 0x1F	; 31
 124:	82 9f       	mul	r24, r18
 126:	90 19       	sub	r25, r0
 128:	11 24       	eor	r1, r1
 12a:	91 11       	cpse	r25, r1
 12c:	13 c0       	rjmp	.+38     	; 0x154 <__vector_9+0x74>
		cnt=0;
 12e:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	0d c0       	rjmp	.+26     	; 0x150 <__vector_9+0x70>
		{
			if(callbacks[i]!=NULL){
 136:	ec 2f       	mov	r30, r28
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	e0 5e       	subi	r30, 0xE0	; 224
 140:	fb 4f       	sbci	r31, 0xFB	; 251
 142:	01 90       	ld	r0, Z+
 144:	f0 81       	ld	r31, Z
 146:	e0 2d       	mov	r30, r0
 148:	30 97       	sbiw	r30, 0x00	; 0
 14a:	09 f0       	breq	.+2      	; 0x14e <__vector_9+0x6e>
				callbacks[i]();
 14c:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt % 31==0){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
 14e:	cf 5f       	subi	r28, 0xFF	; 255
 150:	c5 30       	cpi	r28, 0x05	; 5
 152:	88 f3       	brcs	.-30     	; 0x136 <__vector_9+0x56>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	cf 91       	pop	r28
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

Disassembly of section .text.uart0_hal_init:

000003f6 <uart0_hal_init>:
uint8_t rx_buffer_has_message=0;

static void copy_buffer(uint8_t msg[]);

void uart0_hal_init(){
	set_bit(UCSR0B, 4); //Enable Rx
 3f6:	e1 ec       	ldi	r30, 0xC1	; 193
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	80 61       	ori	r24, 0x10	; 16
 3fe:	80 83       	st	Z, r24
	set_bit(UCSR0B, 3); //Enable Tx
 400:	80 81       	ld	r24, Z
 402:	88 60       	ori	r24, 0x08	; 8
 404:	80 83       	st	Z, r24
	set_bit(UCSR0B, 7); //interrupt Rx complete
 406:	80 81       	ld	r24, Z
 408:	80 68       	ori	r24, 0x80	; 128
 40a:	80 83       	st	Z, r24
	set_bit(UCSR0B, 6); //interrupt Tx complete
 40c:	80 81       	ld	r24, Z
 40e:	80 64       	ori	r24, 0x40	; 64
 410:	80 83       	st	Z, r24
	set_bit(UCSR0A, 1); //Set double speed
 412:	e0 ec       	ldi	r30, 0xC0	; 192
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	80 83       	st	Z, r24
	UCSR0C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 41c:	86 e0       	ldi	r24, 0x06	; 6
 41e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
	UBRR0=(8000000/(8*57600))-1; //set baudrate
 422:	80 e1       	ldi	r24, 0x10	; 16
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
 42a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	sei();
 42e:	78 94       	sei
 430:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

0000025c <uart0_hal_send_string>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	6b 01       	movw	r12, r22
 26a:	e8 2e       	mov	r14, r24
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	12 c0       	rjmp	.+36     	; 0x294 <uart0_hal_send_string+0x38>
 270:	8c 2f       	mov	r24, r28
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	4e 2d       	mov	r20, r14
 276:	96 01       	movw	r18, r12
 278:	20 0f       	add	r18, r16
 27a:	31 1f       	adc	r19, r17
 27c:	41 1d       	adc	r20, r1
 27e:	17 fd       	sbrc	r17, 7
 280:	4a 95       	dec	r20
 282:	f9 01       	movw	r30, r18
 284:	24 91       	lpm	r18, Z
 286:	47 fd       	sbrc	r20, 7
 288:	20 81       	ld	r18, Z
 28a:	fc 01       	movw	r30, r24
 28c:	ec 59       	subi	r30, 0x9C	; 156
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	20 83       	st	Z, r18
 292:	cf 5f       	subi	r28, 0xFF	; 255
 294:	0c 2f       	mov	r16, r28
 296:	10 e0       	ldi	r17, 0x00	; 0
 298:	8e 2d       	mov	r24, r14
 29a:	b6 01       	movw	r22, r12
 29c:	0e 94 19 02 	call	0x432	; 0x432 <strlen>
 2a0:	08 17       	cp	r16, r24
 2a2:	19 07       	cpc	r17, r25
 2a4:	28 f3       	brcs	.-54     	; 0x270 <uart0_hal_send_string+0x14>
 2a6:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <tx_buffer_data_len>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <tx_buffer_cursor>
 2b0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
 2b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ef 90       	pop	r14
 2c0:	df 90       	pop	r13
 2c2:	cf 90       	pop	r12
 2c4:	08 95       	ret

Disassembly of section .text.__vector_22:

00000362 <__vector_22>:
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	8f 93       	push	r24
 36e:	ef 93       	push	r30
 370:	ff 93       	push	r31
 372:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <tx_buffer_cursor>
 376:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <tx_buffer_data_len>
 37a:	e8 17       	cp	r30, r24
 37c:	58 f4       	brcc	.+22     	; 0x394 <__vector_22+0x32>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	8e 0f       	add	r24, r30
 382:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <tx_buffer_cursor>
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	ec 59       	subi	r30, 0x9C	; 156
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	80 81       	ld	r24, Z
 38e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 392:	04 c0       	rjmp	.+8      	; 0x39c <__vector_22+0x3a>
 394:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <tx_buffer_cursor>
 398:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <tx_buffer_data_len>
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	8f 91       	pop	r24
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

Disassembly of section .text.__vector_20:

00000178 <__vector_20>:
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
 18c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <rx_buffer_has_message>
 190:	81 11       	cpse	r24, r1
 192:	0e c0       	rjmp	.+28     	; 0x1b0 <__vector_20+0x38>
 194:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <rx_buffer_data_len>
 198:	e4 36       	cpi	r30, 0x64	; 100
 19a:	50 f4       	brcc	.+20     	; 0x1b0 <__vector_20+0x38>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	8e 0f       	add	r24, r30
 1a0:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <rx_buffer_data_len>
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 1aa:	e0 50       	subi	r30, 0x00	; 0
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	80 83       	st	Z, r24
 1b0:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <rx_buffer_data_len>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	80 f0       	brcs	.+32     	; 0x1d8 <__vector_20+0x60>
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	e1 50       	subi	r30, 0x01	; 1
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	20 81       	ld	r18, Z
 1c2:	2a 30       	cpi	r18, 0x0A	; 10
 1c4:	49 f4       	brne	.+18     	; 0x1d8 <__vector_20+0x60>
 1c6:	fc 01       	movw	r30, r24
 1c8:	e2 50       	subi	r30, 0x02	; 2
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	80 81       	ld	r24, Z
 1ce:	8d 30       	cpi	r24, 0x0D	; 13
 1d0:	19 f4       	brne	.+6      	; 0x1d8 <__vector_20+0x60>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <rx_buffer_has_message>
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

Disassembly of section .text.__vector_30:

000003ac <__vector_30>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART1_TX_vect){
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	8f 93       	push	r24
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 3bc:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <tx_buffer_cursor>
 3c0:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <tx_buffer_data_len>
 3c4:	e8 17       	cp	r30, r24
 3c6:	58 f4       	brcc	.+22     	; 0x3de <__vector_30+0x32>
		UDR1=tx_buffer[tx_buffer_cursor++];
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	8e 0f       	add	r24, r30
 3cc:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <tx_buffer_cursor>
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	e0 57       	subi	r30, 0x70	; 112
 3d4:	fd 4f       	sbci	r31, 0xFD	; 253
 3d6:	80 81       	ld	r24, Z
 3d8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <__vector_30+0x3a>
		}else{
		tx_buffer_cursor=0;
 3de:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <tx_buffer_cursor>
		tx_buffer_data_len=0;
 3e2:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <tx_buffer_data_len>
	}
}
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	8f 91       	pop	r24
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

Disassembly of section .text.__vector_28:

000001ec <__vector_28>:
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	msg[len]='\0';
	uart1_hal_clear_rx_buffer();
	return len;
}
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
 200:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <rx_buffer_has_message>
 204:	81 11       	cpse	r24, r1
 206:	0e c0       	rjmp	.+28     	; 0x224 <__vector_28+0x38>
 208:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <rx_buffer_data_len>
 20c:	e4 36       	cpi	r30, 0x64	; 100
 20e:	50 f4       	brcc	.+20     	; 0x224 <__vector_28+0x38>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	8e 0f       	add	r24, r30
 214:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <rx_buffer_data_len>
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 21e:	e4 54       	subi	r30, 0x44	; 68
 220:	fc 4f       	sbci	r31, 0xFC	; 252
 222:	80 83       	st	Z, r24
 224:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <rx_buffer_data_len>
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	e5 54       	subi	r30, 0x45	; 69
 22e:	fc 4f       	sbci	r31, 0xFC	; 252
 230:	20 81       	ld	r18, Z
 232:	2a 30       	cpi	r18, 0x0A	; 10
 234:	49 f4       	brne	.+18     	; 0x248 <__vector_28+0x5c>
 236:	fc 01       	movw	r30, r24
 238:	e6 54       	subi	r30, 0x46	; 70
 23a:	fc 4f       	sbci	r31, 0xFC	; 252
 23c:	80 81       	ld	r24, Z
 23e:	8d 30       	cpi	r24, 0x0D	; 13
 240:	19 f4       	brne	.+6      	; 0x248 <__vector_28+0x5c>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <rx_buffer_has_message>
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

Disassembly of section .text.main:

00000480 <main>:
#include "TEST/test_runner.h"
#include "PROGRAMS/MAINPG/MAINPG.h"

int main(void)
{
	test_runner();
 480:	0e 94 56 02 	call	0x4ac	; 0x4ac <test_runner>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 484:	2f ef       	ldi	r18, 0xFF	; 255
 486:	8d e3       	ldi	r24, 0x3D	; 61
 488:	99 e4       	ldi	r25, 0x49	; 73
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	90 40       	sbci	r25, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <main+0xa>
 492:	00 c0       	rjmp	.+0      	; 0x494 <main+0x14>
 494:	00 00       	nop
 496:	f6 cf       	rjmp	.-20     	; 0x484 <main+0x4>

Disassembly of section .text.test_LED_module_start:

0000045e <test_LED_module_start>:
#include "test_LED_module.h"
#include "../../HAL/UART0/UART0_HAL.h"


void test_LED_module_start(){
	uart0_hal_init();
 45e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uart0_hal_init>
	
	while(1){
		uart0_hal_send_string("Working ");
 462:	66 ed       	ldi	r22, 0xD6	; 214
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 2e 01 	call	0x25c	; 0x25c <uart0_hal_send_string>
 46c:	2f ef       	ldi	r18, 0xFF	; 255
 46e:	83 ed       	ldi	r24, 0xD3	; 211
 470:	90 e3       	ldi	r25, 0x30	; 48
 472:	21 50       	subi	r18, 0x01	; 1
 474:	80 40       	sbci	r24, 0x00	; 0
 476:	90 40       	sbci	r25, 0x00	; 0
 478:	e1 f7       	brne	.-8      	; 0x472 <test_LED_module_start+0x14>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <test_LED_module_start+0x1e>
 47c:	00 00       	nop
 47e:	f1 cf       	rjmp	.-30     	; 0x462 <test_LED_module_start+0x4>

Disassembly of section .text.test_runner:

000004ac <test_runner>:
	//test_RTC_module_start();
	//test_UART0_HAL_start();
	//test_TC2_HAL_start();
	//test_MRPP_module_start();
	//test_PUMP_module_start();
	test_LED_module_start();
 4ac:	0e 94 2f 02 	call	0x45e	; 0x45e <test_LED_module_start>
 4b0:	08 95       	ret

Disassembly of section .text.avrlibc:

00000432 <strlen>:
 432:	cf 92       	push	r12
 434:	df 92       	push	r13
 436:	ef 92       	push	r14
 438:	6b 01       	movw	r12, r22
 43a:	e8 2e       	mov	r14, r24
 43c:	a8 2f       	mov	r26, r24
 43e:	cb 01       	movw	r24, r22
 440:	fc 01       	movw	r30, r24
 442:	24 91       	lpm	r18, Z
 444:	a7 fd       	sbrc	r26, 7
 446:	20 81       	ld	r18, Z
 448:	22 23       	and	r18, r18
 44a:	19 f0       	breq	.+6      	; 0x452 <strlen+0x20>
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	a1 1d       	adc	r26, r1
 450:	f7 cf       	rjmp	.-18     	; 0x440 <strlen+0xe>
 452:	8c 19       	sub	r24, r12
 454:	9d 09       	sbc	r25, r13
 456:	ef 90       	pop	r14
 458:	df 90       	pop	r13
 45a:	cf 90       	pop	r12
 45c:	08 95       	ret
