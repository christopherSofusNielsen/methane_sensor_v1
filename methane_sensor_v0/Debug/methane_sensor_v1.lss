
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004a4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800100  00800100  000004a4  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  000004d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002723  00000000  00000000  00000693  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d95  00000000  00000000  00002db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cdd  00000000  00000000  00003b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f0  00000000  00000000  00004828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  00004c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a74  00000000  00000000  00004f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  000059cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000042c  0000042c  000004a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_1 00000014  000003c8  000003c8  0000043c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.TWI_API_read_data_ack_end_nack_stop 00000064  000001ba  000001ba  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.TWI_HAL_init 00000012  00000404  00000404  00000478  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.TWI_HAL_start 00000048  000002b2  000002b2  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TWI_HAL_read_byte_ack 00000014  000003dc  000003dc  00000450  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.TWI_HAL_read_byte_nack 00000014  000003f0  000003f0  00000464  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.TWI_HAL_stop 00000010  00000416  00000416  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_22 0000004a  0000021e  0000021e  00000292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_20 00000074  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .bss.rx_buffer_has_message 00000001  00800358  00800358  000004a4  2**0
                  ALLOC
 24 .bss.rx_buffer_data_len 00000001  00800359  00800359  000004a4  2**0
                  ALLOC
 25 .bss.tx_buffer_cursor 00000001  0080035a  0080035a  000004a4  2**0
                  ALLOC
 26 .bss.tx_buffer_data_len 00000001  0080035b  0080035b  000004a4  2**0
                  ALLOC
 27 .text.uart1_hal_init 0000003c  0000033c  0000033c  000003b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.uart1_hal_send_message 00000034  00000378  00000378  000003ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_30 0000004a  00000268  00000268  000002dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_28 00000070  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss.rx_buffer_has_message 00000001  0080035c  0080035c  000004a4  2**0
                  ALLOC
 32 .bss.rx_buffer_data_len 00000001  0080035d  0080035d  000004a4  2**0
                  ALLOC
 33 .bss.rx_buffer 00000064  008002f4  008002f4  000004a4  2**0
                  ALLOC
 34 .bss.tx_buffer_cursor 00000001  0080035e  0080035e  000004a4  2**0
                  ALLOC
 35 .bss.tx_buffer_data_len 00000001  0080035f  0080035f  000004a4  2**0
                  ALLOC
 36 .bss.tx_buffer 000000c8  0080022c  0080022c  000004a4  2**0
                  ALLOC
 37 .text.main    00000006  00000426  00000426  0000049a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.read_adc 00000042  000002fa  000002fa  0000036e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.test_ADC_module_start 0000001c  000003ac  000003ac  00000420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_1>
   8:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
   c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  10:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  14:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  18:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  1c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  20:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  24:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  28:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  2c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  30:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  34:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  38:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  3c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  40:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  44:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  48:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  4c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_etext>
  54:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_22>
  5c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  60:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  64:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  68:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  6c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  70:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_28>
  74:	0c 94 16 02 	jmp	0x42c	; 0x42c <__bad_interrupt>
  78:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	03 60       	ori	r16, 0x03	; 3
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d0 e1       	ldi	r29, 0x10	; 16
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 13 02 	call	0x426	; 0x426 <main>
  ce:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

0000042c <__bad_interrupt>:
 42c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

000003c8 <__vector_1>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 0);
}

ISR(INT0_vect){
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
	
}
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000001ba <TWI_API_read_data_ack_end_nack_stop>:
	if(status!=TWI_CODE_SUCCESS) return status;
	TWI_HAL_stop();
	return TWI_CODE_SUCCESS;
}

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	8b 01       	movw	r16, r22
 1c8:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
 1d0:	81 11       	cpse	r24, r1
 1d2:	1e c0       	rjmp	.+60     	; 0x210 <TWI_API_read_data_ack_end_nack_stop+0x56>
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <TWI_API_read_data_ack_end_nack_stop+0x2e>
	
	for (uint8_t i=0; i<length-1; i++)
	{
		data[i]=TWI_HAL_read_byte_ack();
 1d8:	78 01       	movw	r14, r16
 1da:	ec 0e       	add	r14, r28
 1dc:	f1 1c       	adc	r15, r1
 1de:	0e 94 ee 01 	call	0x3dc	; 0x3dc <TWI_HAL_read_byte_ack>
 1e2:	f7 01       	movw	r30, r14
 1e4:	80 83       	st	Z, r24
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length-1; i++)
 1e6:	cf 5f       	subi	r28, 0xFF	; 255
 1e8:	2c 2f       	mov	r18, r28
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	8d 2f       	mov	r24, r29
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	28 17       	cp	r18, r24
 1f4:	39 07       	cpc	r19, r25
 1f6:	84 f3       	brlt	.-32     	; 0x1d8 <TWI_API_read_data_ack_end_nack_stop+0x1e>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
 1f8:	8d 2f       	mov	r24, r29
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	e8 01       	movw	r28, r16
 200:	c8 0f       	add	r28, r24
 202:	d9 1f       	adc	r29, r25
 204:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <TWI_HAL_read_byte_nack>
 208:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
 20a:	0e 94 0b 02 	call	0x416	; 0x416 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
 20e:	80 e0       	ldi	r24, 0x00	; 0
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00000404 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
 404:	80 e2       	ldi	r24, 0x20	; 32
 406:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
 40a:	e9 eb       	ldi	r30, 0xB9	; 185
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	8c 7f       	andi	r24, 0xFC	; 252
 412:	80 83       	st	Z, r24
 414:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

000002b2 <TWI_HAL_start>:
	while (!get_bit(TWCR, TWINT)); 
	status=twi_read_status(TWSR);
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
	return status;
}
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	68 2b       	or	r22, r24
 2ba:	84 ea       	ldi	r24, 0xA4	; 164
 2bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 2c0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 2c4:	99 23       	and	r25, r25
 2c6:	e4 f7       	brge	.-8      	; 0x2c0 <TWI_HAL_start+0xe>
 2c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 2cc:	88 7f       	andi	r24, 0xF8	; 248
 2ce:	88 30       	cpi	r24, 0x08	; 8
 2d0:	99 f4       	brne	.+38     	; 0x2f8 <TWI_HAL_start+0x46>
 2d2:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
 2d6:	84 e8       	ldi	r24, 0x84	; 132
 2d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 2dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 2e0:	88 23       	and	r24, r24
 2e2:	e4 f7       	brge	.-8      	; 0x2dc <TWI_HAL_start+0x2a>
 2e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 2e8:	88 7f       	andi	r24, 0xF8	; 248
 2ea:	88 31       	cpi	r24, 0x18	; 24
 2ec:	21 f0       	breq	.+8      	; 0x2f6 <TWI_HAL_start+0x44>
 2ee:	80 34       	cpi	r24, 0x40	; 64
 2f0:	19 f4       	brne	.+6      	; 0x2f8 <TWI_HAL_start+0x46>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

000003dc <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
 3dc:	84 ec       	ldi	r24, 0xC4	; 196
 3de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
 3e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 3e6:	88 23       	and	r24, r24
 3e8:	e4 f7       	brge	.-8      	; 0x3e2 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
 3ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
 3ee:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

000003f0 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
 3f0:	84 e8       	ldi	r24, 0x84	; 132
 3f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
 3f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 3fa:	88 23       	and	r24, r24
 3fc:	e4 f7       	brge	.-8      	; 0x3f6 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
 3fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
 402:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00000416 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
 416:	84 e9       	ldi	r24, 0x94	; 148
 418:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
 41c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 420:	84 fd       	sbrc	r24, 4
 422:	fc cf       	rjmp	.-8      	; 0x41c <TWI_HAL_stop+0x6>
}
 424:	08 95       	ret

Disassembly of section .text.__vector_22:

0000021e <__vector_22>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART0_TX_vect){
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	8f 93       	push	r24
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 22e:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <tx_buffer_cursor>
 232:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <tx_buffer_data_len>
 236:	e8 17       	cp	r30, r24
 238:	58 f4       	brcc	.+22     	; 0x250 <__vector_22+0x32>
		UDR0=tx_buffer[tx_buffer_cursor++];
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	8e 0f       	add	r24, r30
 23e:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <tx_buffer_cursor>
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	ec 59       	subi	r30, 0x9C	; 156
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	80 81       	ld	r24, Z
 24a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 24e:	04 c0       	rjmp	.+8      	; 0x258 <__vector_22+0x3a>
	}else{
		tx_buffer_cursor=0;
 250:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <tx_buffer_cursor>
		tx_buffer_data_len=0;
 254:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <tx_buffer_data_len>
	}
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	8f 91       	pop	r24
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

Disassembly of section .text.__vector_20:

000000d6 <__vector_20>:
	set_bit(UCSR0B, 3); //Enable Tx
	
	uint8_t data[1];
	data[0]=followUpByte;
	uart0_hal_send_message(data, 1);
}
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
  ea:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <rx_buffer_has_message>
  ee:	81 11       	cpse	r24, r1
  f0:	0e c0       	rjmp	.+28     	; 0x10e <__vector_20+0x38>
  f2:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <rx_buffer_data_len>
  f6:	e4 36       	cpi	r30, 0x64	; 100
  f8:	50 f4       	brcc	.+20     	; 0x10e <__vector_20+0x38>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	8e 0f       	add	r24, r30
  fe:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <rx_buffer_data_len>
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 108:	e0 50       	subi	r30, 0x00	; 0
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 83       	st	Z, r24
 10e:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <rx_buffer_data_len>
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	80 f0       	brcs	.+32     	; 0x136 <__vector_20+0x60>
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	e1 50       	subi	r30, 0x01	; 1
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	20 81       	ld	r18, Z
 120:	2a 30       	cpi	r18, 0x0A	; 10
 122:	49 f4       	brne	.+18     	; 0x136 <__vector_20+0x60>
 124:	fc 01       	movw	r30, r24
 126:	e2 50       	subi	r30, 0x02	; 2
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	80 81       	ld	r24, Z
 12c:	8d 30       	cpi	r24, 0x0D	; 13
 12e:	19 f4       	brne	.+6      	; 0x136 <__vector_20+0x60>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <rx_buffer_has_message>
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

0000033c <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
 33c:	e9 ec       	ldi	r30, 0xC9	; 201
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	80 61       	ori	r24, 0x10	; 16
 344:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
 346:	80 81       	ld	r24, Z
 348:	88 60       	ori	r24, 0x08	; 8
 34a:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
 34c:	80 81       	ld	r24, Z
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
 352:	80 81       	ld	r24, Z
 354:	80 64       	ori	r24, 0x40	; 64
 356:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
 358:	e8 ec       	ldi	r30, 0xC8	; 200
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	82 60       	ori	r24, 0x02	; 2
 360:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
 368:	80 e1       	ldi	r24, 0x10	; 16
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
 370:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
 374:	78 94       	sei
 376:	08 95       	ret

Disassembly of section .text.uart1_hal_send_message:

00000378 <uart1_hal_send_message>:
}


void uart1_hal_send_message(uint8_t msg[], uint8_t length){
 378:	dc 01       	movw	r26, r24
	for (uint8_t i=0; i<length; i++)
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0b c0       	rjmp	.+22     	; 0x394 <uart1_hal_send_message+0x1c>
	{
		tx_buffer[i]=msg[i];
 37e:	29 2f       	mov	r18, r25
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	fd 01       	movw	r30, r26
 384:	e2 0f       	add	r30, r18
 386:	f3 1f       	adc	r31, r19
 388:	40 81       	ld	r20, Z
 38a:	f9 01       	movw	r30, r18
 38c:	e4 5d       	subi	r30, 0xD4	; 212
 38e:	fd 4f       	sbci	r31, 0xFD	; 253
 390:	40 83       	st	Z, r20
	sei();
}


void uart1_hal_send_message(uint8_t msg[], uint8_t length){
	for (uint8_t i=0; i<length; i++)
 392:	9f 5f       	subi	r25, 0xFF	; 255
 394:	96 17       	cp	r25, r22
 396:	98 f3       	brcs	.-26     	; 0x37e <uart1_hal_send_message+0x6>
	{
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
 398:	60 93 5f 03 	sts	0x035F, r22	; 0x80035f <tx_buffer_data_len>
	tx_buffer_cursor=1;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <tx_buffer_cursor>
	UDR1=tx_buffer[0];
 3a2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <_end>
 3a6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 3aa:	08 95       	ret

Disassembly of section .text.__vector_30:

00000268 <__vector_30>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	8f 93       	push	r24
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
 278:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <tx_buffer_cursor>
 27c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <tx_buffer_data_len>
 280:	e8 17       	cp	r30, r24
 282:	58 f4       	brcc	.+22     	; 0x29a <__vector_30+0x32>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	8e 0f       	add	r24, r30
 288:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <tx_buffer_cursor>
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	e4 5d       	subi	r30, 0xD4	; 212
 290:	fd 4f       	sbci	r31, 0xFD	; 253
 292:	80 81       	ld	r24, Z
 294:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <__vector_30+0x3a>
 29a:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <tx_buffer_cursor>
 29e:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <tx_buffer_data_len>
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	8f 91       	pop	r24
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

Disassembly of section .text.__vector_28:

0000014a <__vector_28>:
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
 15e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <rx_buffer_has_message>
 162:	81 11       	cpse	r24, r1
 164:	0e c0       	rjmp	.+28     	; 0x182 <__vector_28+0x38>
 166:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <rx_buffer_data_len>
 16a:	e4 36       	cpi	r30, 0x64	; 100
 16c:	50 f4       	brcc	.+20     	; 0x182 <__vector_28+0x38>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	8e 0f       	add	r24, r30
 172:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <rx_buffer_data_len>
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 17c:	ec 50       	subi	r30, 0x0C	; 12
 17e:	fd 4f       	sbci	r31, 0xFD	; 253
 180:	80 83       	st	Z, r24
 182:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <rx_buffer_data_len>
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	ed 50       	subi	r30, 0x0D	; 13
 18c:	fd 4f       	sbci	r31, 0xFD	; 253
 18e:	20 81       	ld	r18, Z
 190:	2a 30       	cpi	r18, 0x0A	; 10
 192:	49 f4       	brne	.+18     	; 0x1a6 <__vector_28+0x5c>
 194:	fc 01       	movw	r30, r24
 196:	ee 50       	subi	r30, 0x0E	; 14
 198:	fd 4f       	sbci	r31, 0xFD	; 253
 19a:	80 81       	ld	r24, Z
 19c:	8d 30       	cpi	r24, 0x0D	; 13
 19e:	19 f4       	brne	.+6      	; 0x1a6 <__vector_28+0x5c>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <rx_buffer_has_message>
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	2f 91       	pop	r18
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

Disassembly of section .text.main:

00000426 <main>:
{
	//test_lora_module_start();
	//test_SCD30_module_start();
    //test_PM_HAL_start();
	//test_EEPROM_module_start();
	test_ADC_module_start();
 426:	0e 94 d6 01 	call	0x3ac	; 0x3ac <test_ADC_module_start>
 42a:	ff cf       	rjmp	.-2      	; 0x42a <main+0x4>

Disassembly of section .text.read_adc:

000002fa <read_adc>:
	uint16_t value=calc_ppm_methane(2000);
	sprintf(data, " %u ", value);
	uart1_hal_send_message((uint8_t *)data, strlen(data));
}

void read_adc(){
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	64 97       	sbiw	r28, 0x14	; 20
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[20];
	
	TWI_HAL_init();
 30e:	0e 94 02 02 	call	0x404	; 0x404 <TWI_HAL_init>
	
	TWI_API_read_data_ack_end_nack_stop(SLAVE_ADDR, data, 2);
 312:	42 e0       	ldi	r20, 0x02	; 2
 314:	be 01       	movw	r22, r28
 316:	6f 5f       	subi	r22, 0xFF	; 255
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	8d e4       	ldi	r24, 0x4D	; 77
 31c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <TWI_API_read_data_ack_end_nack_stop>
	
	uart1_hal_send_message(data, 2);
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	0e 94 bc 01 	call	0x378	; 0x378 <uart1_hal_send_message>
 32a:	64 96       	adiw	r28, 0x14	; 20
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

Disassembly of section .text.test_ADC_module_start:

000003ac <test_ADC_module_start>:

void test_calc_ppm_methane();
void read_adc();

void test_ADC_module_start(){
	uart1_hal_init();
 3ac:	0e 94 9e 01 	call	0x33c	; 0x33c <uart1_hal_init>
	//char msg[]="Init ";
	//uart0_hal_send_message((uint8_t *)msg, strlen(msg));
	
	while(1){
		//test_calc_ppm_methane();
		read_adc();
 3b0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <read_adc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	89 e6       	ldi	r24, 0x69	; 105
 3b8:	98 e1       	ldi	r25, 0x18	; 24
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <test_ADC_module_start+0xe>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <test_ADC_module_start+0x18>
 3c4:	00 00       	nop
 3c6:	f4 cf       	rjmp	.-24     	; 0x3b0 <test_ADC_module_start+0x4>
