
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002e18  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ea  00800100  00800100  00002e18  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000054  00000000  00000000  00002e73  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000630  00000000  00000000  00002ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007abd  00000000  00000000  000034f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a9b  00000000  00000000  0000afb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c4d  00000000  00000000  0000ca50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001030  00000000  00000000  0000f6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bd  00000000  00000000  000106d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000351e  00000000  00000000  00010c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  000141ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00002d80  00002d80  00002e14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001467c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.__vector_3 00000014  00002c14  00002c14  00002ca8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.rn2483_init 00000008  00002d48  00002d48  00002ddc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_16 0000004e  0000223c  0000223c  000022d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss._cb      00000002  00800706  00800706  00002e18  2**0
                  ALLOC
 19 .text.__vector_13 0000004e  0000228a  0000228a  0000231e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss._cb      00000002  00800708  00800708  00002e18  2**0
                  ALLOC
 21 .text.__vector_9 00000098  00001b6c  00001b6c  00001c00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.cnt      00000001  0080070a  0080070a  00002e18  2**0
                  ALLOC
 23 .bss.callbacks 0000000a  008006fc  008006fc  00002e18  2**0
                  ALLOC
 24 .text.copy_buffer 0000002e  000028e8  000028e8  0000297c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.uart0_hal_init 0000003c  000025f2  000025f2  00002686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.uart0_hal_send_message 00000034  000027f2  000027f2  00002886  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.uart0_hal_message_ready 0000000e  00002c5c  00002c5c  00002cf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.uart0_hal_clear_rx_buffer 0000000a  00002d2a  00002d2a  00002dbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.uart0_hal_read_message_as_str 00000028  0000299e  0000299e  00002a32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_22 0000004a  0000240a  0000240a  0000249e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_20 00000074  00001f7e  00001f7e  00002012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.rx_buffer_has_message 00000001  0080070b  0080070b  00002e18  2**0
                  ALLOC
 33 .bss.rx_buffer_data_len 00000001  0080070c  0080070c  00002e18  2**0
                  ALLOC
 34 .bss.tx_buffer_cursor 00000001  0080070d  0080070d  00002e18  2**0
                  ALLOC
 35 .bss.tx_buffer_data_len 00000001  0080070e  0080070e  00002e18  2**0
                  ALLOC
 36 .text.copy_buffer 0000002e  00002916  00002916  000029aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.uart1_hal_init 0000003c  0000262e  0000262e  000026c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.uart1_hal_send_string 0000008a  00001c9a  00001c9a  00001d2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.uart1_hal_message_ready 0000000e  00002c6a  00002c6a  00002cfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.uart1_hal_rx_full 0000000e  00002c78  00002c78  00002d0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.uart1_hal_clear_rx_buffer 0000000a  00002d34  00002d34  00002dc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.uart1_hal_read_message_as_str 00000028  000029c6  000029c6  00002a5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_30 0000004a  00002454  00002454  000024e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__vector_28 00000070  00001ff2  00001ff2  00002086  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .bss.rx_buffer_has_message 00000001  0080070f  0080070f  00002e18  2**0
                  ALLOC
 46 .bss.rx_buffer_data_len 00000001  00800710  00800710  00002e18  2**0
                  ALLOC
 47 .bss.rx_buffer 00000096  00800616  00800616  00002e18  2**0
                  ALLOC
 48 .bss.tx_buffer_cursor 00000001  00800711  00800711  00002e18  2**0
                  ALLOC
 49 .bss.tx_buffer_data_len 00000001  00800712  00800712  00002e18  2**0
                  ALLOC
 50 .bss.tx_buffer 0000012c  008004ea  008004ea  00002e18  2**0
                  ALLOC
 51 .text.main    00000018  00002b8c  00002b8c  00002c20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.EM_has_deveui 00000016  00002bbc  00002bbc  00002c50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EM_has_appeui 00000016  00002bd2  00002bd2  00002c66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.EM_has_appkey 00000016  00002be8  00002be8  00002c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.EM_set_deveui 0000003a  0000266a  0000266a  000026fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.EM_get_deveui 00000030  00002858  00002858  000028ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.EM_set_appeui 0000003a  000026a4  000026a4  00002738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.EM_get_appeui 00000030  00002888  00002888  0000291c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.EM_set_appkey 0000003a  000026de  000026de  00002772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.EM_get_appkey 00000030  000028b8  000028b8  0000294c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.EM_set_ppmfactor 0000000e  00002c86  00002c86  00002d1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.EM_get_ppmfactor 0000001e  00002abe  00002abe  00002b52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.EM_set_RRL 0000000e  00002c94  00002c94  00002d28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.EM_get_RRL 0000001e  00002adc  00002adc  00002b70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.EM_set_Vcc 0000000e  00002ca2  00002ca2  00002d36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.EM_get_Vcc 0000001e  00002afa  00002afa  00002b8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.EM_set_collections 0000000e  00002cb0  00002cb0  00002d44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.EM_get_collections 00000010  00002c4c  00002c4c  00002ce0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.LM_forward_msg 00000006  00002d68  00002d68  00002dfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .progmemx.data 00000073  0000029a  0000029a  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 71 .text.attach_ending 0000001c  00002b54  00002b54  00002be8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.util_transmit_msg 0000001c  00002b70  00002b70  00002c04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.util_read_msg 00000006  00002d6e  00002d6e  00002e02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.util_lora_forward_msg 00000036  00002750  00002750  000027e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.parse_cmd 00000020  00002a7e  00002a7e  00002b12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.validate_cmd 00000056  00002194  00002194  00002228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .progmemx.data 00000063  0000030d  0000030d  000003a1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 78 .text.CONF_enter 000000e2  00001430  00001430  000014c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .progmemx.data 00000061  00000370  00000370  00000404  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 80 .text.CON_RN2483_parse 00000026  000029ee  000029ee  00002a82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.CON_RN2483 000000e0  00001512  00001512  000015a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .progmemx.data 000000b4  000001e6  000001e6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 83 .text.read_cols 000000bc  00001940  00001940  000019d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.write_deveui 00000078  00001d9e  00001d9e  00001e32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.write_appeui 00000078  00001e16  00001e16  00001eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.write_appkey 00000078  00001e8e  00001e8e  00001f22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.write_PPM_factor 0000004c  00002326  00002326  000023ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.write_RRL 0000004c  00002372  00002372  00002406  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.write_VCC 0000004c  000023be  000023be  00002452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.write_cols 0000012e  00001302  00001302  00001396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.write_reset 000000ce  000017a4  000017a4  00001838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.handle_read 000001d8  00000dfa  00000dfa  00000e8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.handle_write 00000180  00001182  00001182  00001216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .bss.arg      00000050  008006ac  008006ac  00002e18  2**0
                  ALLOC
 95 .text.count_parameters 00000052  000021ea  000021ea  0000227e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.par_index 00000070  00002062  00002062  000020f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.get_parameter 00000096  00001c04  00001c04  00001c98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.get_decimal 000000b4  00001ab8  00001ab8  00001b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.str2flaot 0000004e  000022d8  000022d8  0000236c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.is_float 00000058  0000213c  0000213c  000021d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.avrlibc.fplib 0000000e  00002cbe  00002cbe  00002d52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.avrlibc.fplib 000000ce  00001872  00001872  00001906  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.avrlibc.fplib 00000008  00002d50  00002d50  00002de4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.avrlibc.fplib 000000de  000015f2  000015f2  00001686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.avrlibc.fplib 0000007a  00001d24  00001d24  00001db8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.avrlibc.fplib 0000000c  00002d12  00002d12  00002da6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.avrlibc.fplib 00000006  00002d74  00002d74  00002e08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.avrlibc.fplib 0000000e  00002ccc  00002ccc  00002d60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.avrlibc.fplib 0000000e  00002cda  00002cda  00002d6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.avrlibc.fplib 00000022  00002a5c  00002a5c  00002af0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.avrlibc.fplib 00000044  000024e4  000024e4  00002578  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.avrlibc.fplib 0000000e  00002ce8  00002ce8  00002d7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.avrlibc.fplib 00000008  00002d58  00002d58  00002dec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.avrlibc.fplib 000000d4  000016d0  000016d0  00001764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .progmemx.data 00000008  000003d1  000003d1  00000465  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
116 .text.avrlibc 00000744  000003da  000003da  0000046e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.libgcc  0000000c  00002d1e  00002d1e  00002db2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.libgcc.mul 0000001e  00002b18  00002b18  00002bac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.libgcc.prologue 00000038  00002718  00002718  000027ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.libgcc.prologue 00000036  00002786  00002786  0000281a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.avrlibc 00000008  00002d60  00002d60  00002df4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.avrlibc 0000000e  00002cf6  00002cf6  00002d8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.avrlibc 000002dc  00000b1e  00000b1e  00000bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.avrlibc 000001b0  00000fd2  00000fd2  00001066  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.avrlibc 00000012  00002c28  00002c28  00002cbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.avrlibc 00000032  00002826  00002826  000028ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.avrlibc 0000002e  00002944  00002944  000029d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.avrlibc 00000042  000025b0  000025b0  00002644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.avrlibc 0000006a  000020d2  000020d2  00002166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.avrlibc 0000002c  00002972  00002972  00002a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.avrlibc 0000001e  00002b36  00002b36  00002bca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.avrlibc 00000036  000027bc  000027bc  00002850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.avrlibc 00000078  00001f06  00001f06  00001f9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.avrlibc 00000046  0000249e  0000249e  00002532  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.avrlibc 000000bc  000019fc  000019fc  00001a90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.avrlibc 00000006  00002d7a  00002d7a  00002e0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.avrlibc 00000024  00002a14  00002a14  00002aa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.avrlibc 00000012  00002c3a  00002c3a  00002cce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.avrlibc 0000000e  00002d04  00002d04  00002d98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.avrlibc 00000044  00002528  00002528  000025bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.avrlibc 00000024  00002a38  00002a38  00002acc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.avrlibc 00000018  00002ba4  00002ba4  00002c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.libgcc.mul 00000020  00002a9e  00002a9e  00002b32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.libgcc.div 00000044  0000256c  0000256c  00002600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.libgcc.mul 00000016  00002bfe  00002bfe  00002c92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.libgcc  0000000a  00002d3e  00002d3e  00002dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__ctors_end>
   4:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
   8:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
   c:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__vector_3>
  10:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  14:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  18:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  1c:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  20:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  24:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__vector_9>
  28:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  2c:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  30:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  34:	0c 94 45 11 	jmp	0x228a	; 0x228a <__vector_13>
  38:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  3c:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  40:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__vector_16>
  44:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  48:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  4c:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  50:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__vector_20>
  54:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  58:	0c 94 05 12 	jmp	0x240a	; 0x240a <__vector_22>
  5c:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  60:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  64:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  68:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  6c:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  70:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__vector_28>
  74:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__bad_interrupt>
  78:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__vector_30>
  7c:	2d 0a       	sbc	r2, r29
  7e:	34 0a       	sbc	r3, r20
  80:	7e 0a       	sbc	r7, r30
  82:	3d 0a       	sbc	r3, r29
  84:	87 0a       	sbc	r8, r23
  86:	70 0a       	sbc	r7, r16
  88:	77 0a       	sbc	r7, r23
  8a:	4d 0a       	sbc	r4, r29
  8c:	58 0a       	sbc	r5, r24
  8e:	63 0a       	sbc	r6, r19
  90:	69 0a       	sbc	r6, r25

00000092 <.dinit>:
  92:	01 00       	.word	0x0001	; ????
  94:	07 13       	cpse	r16, r23
  96:	80 00       	.word	0x0080	; ????

00000098 <__trampolines_end>:
  98:	00 40       	sbci	r16, 0x00	; 0
  9a:	7a 10       	cpse	r7, r10
  9c:	f3 5a       	subi	r31, 0xA3	; 163
  9e:	00 a0       	ldd	r0, Z+32	; 0x20
  a0:	72 4e       	sbci	r23, 0xE2	; 226
  a2:	18 09       	sbc	r17, r8
  a4:	00 10       	cpse	r0, r0
  a6:	a5 d4       	rcall	.+2378   	; 0x9f2 <__EEPROM_REGION_LENGTH__+0x1f2>
  a8:	e8 00       	.word	0x00e8	; ????
  aa:	00 e8       	ldi	r16, 0x80	; 128
  ac:	76 48       	sbci	r23, 0x86	; 134
  ae:	17 00       	.word	0x0017	; ????
  b0:	00 e4       	ldi	r16, 0x40	; 64
  b2:	0b 54       	subi	r16, 0x4B	; 75
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 ca       	rjmp	.-3072   	; 0xfffff4b8 <__eeprom_end+0xff7ef4b8>
  b8:	9a 3b       	cpi	r25, 0xBA	; 186
  ba:	00 00       	nop
  bc:	00 e1       	ldi	r16, 0x10	; 16
  be:	f5 05       	cpc	r31, r5
  c0:	00 00       	nop
  c2:	80 96       	adiw	r24, 0x20	; 32
  c4:	98 00       	.word	0x0098	; ????
  c6:	00 00       	nop
  c8:	40 42       	sbci	r20, 0x20	; 32
  ca:	0f 00       	.word	0x000f	; ????
  cc:	00 00       	nop
  ce:	a0 86       	std	Z+8, r10	; 0x08
  d0:	01 00       	.word	0x0001	; ????
  d2:	00 00       	nop
  d4:	10 27       	eor	r17, r16
  d6:	00 00       	nop
  d8:	00 00       	nop
  da:	e8 03       	fmulsu	r22, r16
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	64 00       	.word	0x0064	; ????
  e2:	00 00       	nop
  e4:	00 00       	nop
  e6:	0a 00       	.word	0x000a	; ????
  e8:	00 00       	nop
  ea:	00 00       	nop
  ec:	01 00       	.word	0x0001	; ????
  ee:	00 00       	nop
  f0:	00 00       	nop
  f2:	2c 76       	andi	r18, 0x6C	; 108
  f4:	d8 88       	ldd	r13, Y+16	; 0x10
  f6:	dc 67       	ori	r29, 0x7C	; 124
  f8:	4f 08       	sbc	r4, r15
  fa:	23 df       	rcall	.-442    	; 0xffffff42 <__eeprom_end+0xff7eff42>
  fc:	c1 df       	rcall	.-126    	; 0x80 <__SREG__+0x41>
  fe:	ae 59       	subi	r26, 0x9E	; 158
 100:	e1 b1       	in	r30, 0x01	; 1
 102:	b7 96       	adiw	r30, 0x27	; 39
 104:	e5 e3       	ldi	r30, 0x35	; 53
 106:	e4 53       	subi	r30, 0x34	; 52
 108:	c6 3a       	cpi	r28, 0xA6	; 166
 10a:	e6 51       	subi	r30, 0x16	; 22
 10c:	99 76       	andi	r25, 0x69	; 105
 10e:	96 e8       	ldi	r25, 0x86	; 134
 110:	e6 c2       	rjmp	.+1484   	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 112:	84 26       	eor	r8, r20
 114:	eb 89       	ldd	r30, Y+19	; 0x13
 116:	8c 9b       	sbis	0x11, 4	; 17
 118:	62 ed       	ldi	r22, 0xD2	; 210
 11a:	40 7c       	andi	r20, 0xC0	; 192
 11c:	6f fc       	.word	0xfc6f	; ????
 11e:	ef bc       	out	0x2f, r14	; 47
 120:	9c 9f       	mul	r25, r28
 122:	40 f2       	brcs	.-112    	; 0xb4 <__trampolines_end+0x1c>
 124:	ba a5       	ldd	r27, Y+42	; 0x2a
 126:	6f a5       	ldd	r22, Y+47	; 0x2f
 128:	f4 90       	lpm	r15, Z
 12a:	05 5a       	subi	r16, 0xA5	; 165
 12c:	2a f7       	brpl	.-54     	; 0xf8 <__trampolines_end+0x60>
 12e:	5c 93       	st	X, r21
 130:	6b 6c       	ori	r22, 0xCB	; 203
 132:	f9 67       	ori	r31, 0x79	; 121
 134:	6d c1       	rjmp	.+730    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 136:	1b fc       	.word	0xfc1b	; ????
 138:	e0 e4       	ldi	r30, 0x40	; 64
 13a:	0d 47       	sbci	r16, 0x7D	; 125
 13c:	fe f5       	brtc	.+126    	; 0x1bc <__do_copy_data+0x1e>
 13e:	20 e6       	ldi	r18, 0x60	; 96
 140:	b5 00       	.word	0x00b5	; ????
 142:	d0 ed       	ldi	r29, 0xD0	; 208
 144:	90 2e       	mov	r9, r16
 146:	03 00       	.word	0x0003	; ????
 148:	94 35       	cpi	r25, 0x54	; 84
 14a:	77 05       	cpc	r23, r7
 14c:	00 80       	ld	r0, Z
 14e:	84 1e       	adc	r8, r20
 150:	08 00       	.word	0x0008	; ????
 152:	00 20       	and	r0, r0
 154:	4e 0a       	sbc	r4, r30
 156:	00 00       	nop
 158:	00 c8       	rjmp	.-4096   	; 0xfffff15a <__eeprom_end+0xff7ef15a>
 15a:	0c 33       	cpi	r16, 0x3C	; 60
 15c:	33 33       	cpi	r19, 0x33	; 51
 15e:	33 0f       	add	r19, r19
 160:	98 6e       	ori	r25, 0xE8	; 232
 162:	12 83       	std	Z+2, r17	; 0x02
 164:	11 41       	sbci	r17, 0x11	; 17
 166:	ef 8d       	ldd	r30, Y+31	; 0x1f
 168:	21 14       	cp	r2, r1
 16a:	89 3b       	cpi	r24, 0xB9	; 185
 16c:	e6 55       	subi	r30, 0x56	; 86
 16e:	16 cf       	rjmp	.-468    	; 0xffffff9c <__eeprom_end+0xff7eff9c>
 170:	fe e6       	ldi	r31, 0x6E	; 110
 172:	db 18       	sub	r13, r11
 174:	d1 84       	ldd	r13, Z+9	; 0x09
 176:	4b 38       	cpi	r20, 0x8B	; 139
 178:	1b f7       	brvc	.-58     	; 0x140 <__trampolines_end+0xa8>
 17a:	7c 1d       	adc	r23, r12
 17c:	90 1d       	adc	r25, r0
 17e:	a4 bb       	out	0x14, r26	; 20
 180:	e4 24       	eor	r14, r4
 182:	20 32       	cpi	r18, 0x20	; 32
 184:	84 72       	andi	r24, 0x24	; 36
 186:	5e 22       	and	r5, r30
 188:	81 00       	.word	0x0081	; ????
 18a:	c9 f1       	breq	.+114    	; 0x1fe <_etext+0x18>
 18c:	24 ec       	ldi	r18, 0xC4	; 196
 18e:	a1 e5       	ldi	r26, 0x51	; 81
 190:	3d 27       	eor	r19, r29

00000192 <__ctors_end>:
 192:	11 24       	eor	r1, r1
 194:	1f be       	out	0x3f, r1	; 63
 196:	cf ef       	ldi	r28, 0xFF	; 255
 198:	d0 e1       	ldi	r29, 0x10	; 16
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	cd bf       	out	0x3d, r28	; 61

0000019e <__do_copy_data>:
 19e:	e2 e9       	ldi	r30, 0x92	; 146
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	17 c0       	rjmp	.+46     	; 0x1d4 <__do_clear_bss+0x8>
 1a6:	b5 91       	lpm	r27, Z+
 1a8:	a5 91       	lpm	r26, Z+
 1aa:	35 91       	lpm	r19, Z+
 1ac:	25 91       	lpm	r18, Z+
 1ae:	05 91       	lpm	r16, Z+
 1b0:	07 fd       	sbrc	r16, 7
 1b2:	0c c0       	rjmp	.+24     	; 0x1cc <__do_clear_bss>
 1b4:	95 91       	lpm	r25, Z+
 1b6:	85 91       	lpm	r24, Z+
 1b8:	ef 01       	movw	r28, r30
 1ba:	f9 2f       	mov	r31, r25
 1bc:	e8 2f       	mov	r30, r24
 1be:	05 90       	lpm	r0, Z+
 1c0:	0d 92       	st	X+, r0
 1c2:	a2 17       	cp	r26, r18
 1c4:	b3 07       	cpc	r27, r19
 1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0x20>
 1c8:	fe 01       	movw	r30, r28
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <__do_clear_bss+0x8>

000001cc <__do_clear_bss>:
 1cc:	1d 92       	st	X+, r1
 1ce:	a2 17       	cp	r26, r18
 1d0:	b3 07       	cpc	r27, r19
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <__do_clear_bss>
 1d4:	e7 39       	cpi	r30, 0x97	; 151
 1d6:	f4 07       	cpc	r31, r20
 1d8:	31 f7       	brne	.-52     	; 0x1a6 <__do_copy_data+0x8>
 1da:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <main>
 1de:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>

Disassembly of section .text:

00002d80 <__bad_interrupt>:
    2d80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_3:

00002c14 <__vector_3>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
}

ISR(INT2_vect){
    2c14:	1f 92       	push	r1
    2c16:	0f 92       	push	r0
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	0f 92       	push	r0
    2c1c:	11 24       	eor	r1, r1
	
}
    2c1e:	0f 90       	pop	r0
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	0f 90       	pop	r0
    2c24:	1f 90       	pop	r1
    2c26:	18 95       	reti

Disassembly of section .text.rn2483_init:

00002d48 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    2d48:	84 b1       	in	r24, 0x04	; 4
    2d4a:	80 61       	ori	r24, 0x10	; 16
    2d4c:	84 b9       	out	0x04, r24	; 4
    2d4e:	08 95       	ret

Disassembly of section .text.__vector_16:

0000223c <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    223c:	1f 92       	push	r1
    223e:	0f 92       	push	r0
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	0f 92       	push	r0
    2244:	11 24       	eor	r1, r1
    2246:	2f 93       	push	r18
    2248:	3f 93       	push	r19
    224a:	4f 93       	push	r20
    224c:	5f 93       	push	r21
    224e:	6f 93       	push	r22
    2250:	7f 93       	push	r23
    2252:	8f 93       	push	r24
    2254:	9f 93       	push	r25
    2256:	af 93       	push	r26
    2258:	bf 93       	push	r27
    225a:	ef 93       	push	r30
    225c:	ff 93       	push	r31
	_cb();
    225e:	e0 91 06 07 	lds	r30, 0x0706	; 0x800706 <_cb>
    2262:	f0 91 07 07 	lds	r31, 0x0707	; 0x800707 <_cb+0x1>
    2266:	09 95       	icall
}
    2268:	ff 91       	pop	r31
    226a:	ef 91       	pop	r30
    226c:	bf 91       	pop	r27
    226e:	af 91       	pop	r26
    2270:	9f 91       	pop	r25
    2272:	8f 91       	pop	r24
    2274:	7f 91       	pop	r23
    2276:	6f 91       	pop	r22
    2278:	5f 91       	pop	r21
    227a:	4f 91       	pop	r20
    227c:	3f 91       	pop	r19
    227e:	2f 91       	pop	r18
    2280:	0f 90       	pop	r0
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	0f 90       	pop	r0
    2286:	1f 90       	pop	r1
    2288:	18 95       	reti

Disassembly of section .text.__vector_13:

0000228a <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    228a:	1f 92       	push	r1
    228c:	0f 92       	push	r0
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	0f 92       	push	r0
    2292:	11 24       	eor	r1, r1
    2294:	2f 93       	push	r18
    2296:	3f 93       	push	r19
    2298:	4f 93       	push	r20
    229a:	5f 93       	push	r21
    229c:	6f 93       	push	r22
    229e:	7f 93       	push	r23
    22a0:	8f 93       	push	r24
    22a2:	9f 93       	push	r25
    22a4:	af 93       	push	r26
    22a6:	bf 93       	push	r27
    22a8:	ef 93       	push	r30
    22aa:	ff 93       	push	r31
	_cb();
    22ac:	e0 91 08 07 	lds	r30, 0x0708	; 0x800708 <_cb>
    22b0:	f0 91 09 07 	lds	r31, 0x0709	; 0x800709 <_cb+0x1>
    22b4:	09 95       	icall
    22b6:	ff 91       	pop	r31
    22b8:	ef 91       	pop	r30
    22ba:	bf 91       	pop	r27
    22bc:	af 91       	pop	r26
    22be:	9f 91       	pop	r25
    22c0:	8f 91       	pop	r24
    22c2:	7f 91       	pop	r23
    22c4:	6f 91       	pop	r22
    22c6:	5f 91       	pop	r21
    22c8:	4f 91       	pop	r20
    22ca:	3f 91       	pop	r19
    22cc:	2f 91       	pop	r18
    22ce:	0f 90       	pop	r0
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	0f 90       	pop	r0
    22d4:	1f 90       	pop	r1
    22d6:	18 95       	reti

Disassembly of section .text.__vector_9:

00001b6c <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
    1b6c:	1f 92       	push	r1
    1b6e:	0f 92       	push	r0
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	0f 92       	push	r0
    1b74:	11 24       	eor	r1, r1
    1b76:	2f 93       	push	r18
    1b78:	3f 93       	push	r19
    1b7a:	4f 93       	push	r20
    1b7c:	5f 93       	push	r21
    1b7e:	6f 93       	push	r22
    1b80:	7f 93       	push	r23
    1b82:	8f 93       	push	r24
    1b84:	9f 93       	push	r25
    1b86:	af 93       	push	r26
    1b88:	bf 93       	push	r27
    1b8a:	cf 93       	push	r28
    1b8c:	ef 93       	push	r30
    1b8e:	ff 93       	push	r31
	cnt++;
    1b90:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <cnt>
    1b94:	9f 5f       	subi	r25, 0xFF	; 255
    1b96:	90 93 0a 07 	sts	0x070A, r25	; 0x80070a <cnt>
	
	if(cnt % 31==0){
    1b9a:	89 e0       	ldi	r24, 0x09	; 9
    1b9c:	98 9f       	mul	r25, r24
    1b9e:	21 2d       	mov	r18, r1
    1ba0:	11 24       	eor	r1, r1
    1ba2:	89 2f       	mov	r24, r25
    1ba4:	82 1b       	sub	r24, r18
    1ba6:	86 95       	lsr	r24
    1ba8:	82 0f       	add	r24, r18
    1baa:	82 95       	swap	r24
    1bac:	8f 70       	andi	r24, 0x0F	; 15
    1bae:	2f e1       	ldi	r18, 0x1F	; 31
    1bb0:	82 9f       	mul	r24, r18
    1bb2:	90 19       	sub	r25, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	91 11       	cpse	r25, r1
    1bb8:	13 c0       	rjmp	.+38     	; 0x1be0 <__vector_9+0x74>
		cnt=0;
    1bba:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    1bbe:	c0 e0       	ldi	r28, 0x00	; 0
    1bc0:	0d c0       	rjmp	.+26     	; 0x1bdc <__vector_9+0x70>
		{
			if(callbacks[i]!=NULL){
    1bc2:	ec 2f       	mov	r30, r28
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	ee 0f       	add	r30, r30
    1bc8:	ff 1f       	adc	r31, r31
    1bca:	e4 50       	subi	r30, 0x04	; 4
    1bcc:	f9 4f       	sbci	r31, 0xF9	; 249
    1bce:	01 90       	ld	r0, Z+
    1bd0:	f0 81       	ld	r31, Z
    1bd2:	e0 2d       	mov	r30, r0
    1bd4:	30 97       	sbiw	r30, 0x00	; 0
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <__vector_9+0x6e>
				callbacks[i]();
    1bd8:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt % 31==0){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    1bda:	cf 5f       	subi	r28, 0xFF	; 255
    1bdc:	c5 30       	cpi	r28, 0x05	; 5
    1bde:	88 f3       	brcs	.-30     	; 0x1bc2 <__vector_9+0x56>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	cf 91       	pop	r28
    1be6:	bf 91       	pop	r27
    1be8:	af 91       	pop	r26
    1bea:	9f 91       	pop	r25
    1bec:	8f 91       	pop	r24
    1bee:	7f 91       	pop	r23
    1bf0:	6f 91       	pop	r22
    1bf2:	5f 91       	pop	r21
    1bf4:	4f 91       	pop	r20
    1bf6:	3f 91       	pop	r19
    1bf8:	2f 91       	pop	r18
    1bfa:	0f 90       	pop	r0
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	0f 90       	pop	r0
    1c00:	1f 90       	pop	r1
    1c02:	18 95       	reti

Disassembly of section .text.copy_buffer:

000028e8 <copy_buffer>:
	}
	
	tx_buffer_data_len=strlen(msg);
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}
    28e8:	bc 01       	movw	r22, r24
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	09 c0       	rjmp	.+18     	; 0x2900 <copy_buffer+0x18>
    28ee:	fb 01       	movw	r30, r22
    28f0:	e9 0f       	add	r30, r25
    28f2:	f1 1d       	adc	r31, r1
    28f4:	da 01       	movw	r26, r20
    28f6:	a0 50       	subi	r26, 0x00	; 0
    28f8:	bf 4f       	sbci	r27, 0xFF	; 255
    28fa:	2c 91       	ld	r18, X
    28fc:	20 83       	st	Z, r18
    28fe:	9f 5f       	subi	r25, 0xFF	; 255
    2900:	49 2f       	mov	r20, r25
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	20 91 0c 07 	lds	r18, 0x070C	; 0x80070c <rx_buffer_data_len>
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	22 50       	subi	r18, 0x02	; 2
    290c:	31 09       	sbc	r19, r1
    290e:	42 17       	cp	r20, r18
    2910:	53 07       	cpc	r21, r19
    2912:	6c f3       	brlt	.-38     	; 0x28ee <copy_buffer+0x6>
    2914:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

000025f2 <uart0_hal_init>:
    25f2:	e1 ec       	ldi	r30, 0xC1	; 193
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	80 61       	ori	r24, 0x10	; 16
    25fa:	80 83       	st	Z, r24
    25fc:	80 81       	ld	r24, Z
    25fe:	88 60       	ori	r24, 0x08	; 8
    2600:	80 83       	st	Z, r24
    2602:	80 81       	ld	r24, Z
    2604:	80 68       	ori	r24, 0x80	; 128
    2606:	80 83       	st	Z, r24
    2608:	80 81       	ld	r24, Z
    260a:	80 64       	ori	r24, 0x40	; 64
    260c:	80 83       	st	Z, r24
    260e:	e0 ec       	ldi	r30, 0xC0	; 192
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	82 60       	ori	r24, 0x02	; 2
    2616:	80 83       	st	Z, r24
    2618:	86 e0       	ldi	r24, 0x06	; 6
    261a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    261e:	80 e1       	ldi	r24, 0x10	; 16
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    2626:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    262a:	78 94       	sei
    262c:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000027f2 <uart0_hal_send_message>:
    27f2:	dc 01       	movw	r26, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0b c0       	rjmp	.+22     	; 0x280e <uart0_hal_send_message+0x1c>
    27f8:	29 2f       	mov	r18, r25
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	fd 01       	movw	r30, r26
    27fe:	e2 0f       	add	r30, r18
    2800:	f3 1f       	adc	r31, r19
    2802:	40 81       	ld	r20, Z
    2804:	f9 01       	movw	r30, r18
    2806:	ec 59       	subi	r30, 0x9C	; 156
    2808:	fe 4f       	sbci	r31, 0xFE	; 254
    280a:	40 83       	st	Z, r20
    280c:	9f 5f       	subi	r25, 0xFF	; 255
    280e:	96 17       	cp	r25, r22
    2810:	98 f3       	brcs	.-26     	; 0x27f8 <uart0_hal_send_message+0x6>
    2812:	60 93 0e 07 	sts	0x070E, r22	; 0x80070e <tx_buffer_data_len>
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <tx_buffer_cursor>
    281c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2820:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2824:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00002c5c <uart0_hal_message_ready>:

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    2c5c:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <rx_buffer_has_message>
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	91 11       	cpse	r25, r1
    2c64:	01 c0       	rjmp	.+2      	; 0x2c68 <uart0_hal_message_ready+0xc>
    2c66:	80 e0       	ldi	r24, 0x00	; 0
}
    2c68:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00002d2a <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    2d2a:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <rx_buffer_has_message>
	rx_buffer_data_len=0;
    2d2e:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <rx_buffer_data_len>
    2d32:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

0000299e <uart0_hal_read_message_as_str>:
	}
	
	tx_buffer_data_len=strlen(msg);
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	8c 01       	movw	r16, r24
    29a6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <copy_buffer>
    29aa:	c0 91 0c 07 	lds	r28, 0x070C	; 0x80070c <rx_buffer_data_len>
    29ae:	c2 50       	subi	r28, 0x02	; 2
    29b0:	f8 01       	movw	r30, r16
    29b2:	ec 0f       	add	r30, r28
    29b4:	f1 1d       	adc	r31, r1
    29b6:	10 82       	st	Z, r1
    29b8:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <uart0_hal_clear_rx_buffer>
    29bc:	8c 2f       	mov	r24, r28
    29be:	cf 91       	pop	r28
    29c0:	1f 91       	pop	r17
    29c2:	0f 91       	pop	r16
    29c4:	08 95       	ret

Disassembly of section .text.__vector_22:

0000240a <__vector_22>:
    240a:	1f 92       	push	r1
    240c:	0f 92       	push	r0
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	0f 92       	push	r0
    2412:	11 24       	eor	r1, r1
    2414:	8f 93       	push	r24
    2416:	ef 93       	push	r30
    2418:	ff 93       	push	r31
    241a:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <tx_buffer_cursor>
    241e:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <tx_buffer_data_len>
    2422:	e8 17       	cp	r30, r24
    2424:	58 f4       	brcc	.+22     	; 0x243c <__vector_22+0x32>
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	8e 0f       	add	r24, r30
    242a:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <tx_buffer_cursor>
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	ec 59       	subi	r30, 0x9C	; 156
    2432:	fe 4f       	sbci	r31, 0xFE	; 254
    2434:	80 81       	ld	r24, Z
    2436:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    243a:	04 c0       	rjmp	.+8      	; 0x2444 <__vector_22+0x3a>
    243c:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <tx_buffer_cursor>
    2440:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <tx_buffer_data_len>
    2444:	ff 91       	pop	r31
    2446:	ef 91       	pop	r30
    2448:	8f 91       	pop	r24
    244a:	0f 90       	pop	r0
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	0f 90       	pop	r0
    2450:	1f 90       	pop	r1
    2452:	18 95       	reti

Disassembly of section .text.__vector_20:

00001f7e <__vector_20>:
    1f7e:	1f 92       	push	r1
    1f80:	0f 92       	push	r0
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	0f 92       	push	r0
    1f86:	11 24       	eor	r1, r1
    1f88:	2f 93       	push	r18
    1f8a:	8f 93       	push	r24
    1f8c:	9f 93       	push	r25
    1f8e:	ef 93       	push	r30
    1f90:	ff 93       	push	r31
    1f92:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <rx_buffer_has_message>
    1f96:	81 11       	cpse	r24, r1
    1f98:	0e c0       	rjmp	.+28     	; 0x1fb6 <__vector_20+0x38>
    1f9a:	e0 91 0c 07 	lds	r30, 0x070C	; 0x80070c <rx_buffer_data_len>
    1f9e:	e4 36       	cpi	r30, 0x64	; 100
    1fa0:	50 f4       	brcc	.+20     	; 0x1fb6 <__vector_20+0x38>
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	8e 0f       	add	r24, r30
    1fa6:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <rx_buffer_data_len>
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    1fb0:	e0 50       	subi	r30, 0x00	; 0
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 83       	st	Z, r24
    1fb6:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <rx_buffer_data_len>
    1fba:	83 30       	cpi	r24, 0x03	; 3
    1fbc:	80 f0       	brcs	.+32     	; 0x1fde <__vector_20+0x60>
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	e1 50       	subi	r30, 0x01	; 1
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	20 81       	ld	r18, Z
    1fc8:	2a 30       	cpi	r18, 0x0A	; 10
    1fca:	49 f4       	brne	.+18     	; 0x1fde <__vector_20+0x60>
    1fcc:	fc 01       	movw	r30, r24
    1fce:	e2 50       	subi	r30, 0x02	; 2
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8d 30       	cpi	r24, 0x0D	; 13
    1fd6:	19 f4       	brne	.+6      	; 0x1fde <__vector_20+0x60>
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <rx_buffer_has_message>
    1fde:	ff 91       	pop	r31
    1fe0:	ef 91       	pop	r30
    1fe2:	9f 91       	pop	r25
    1fe4:	8f 91       	pop	r24
    1fe6:	2f 91       	pop	r18
    1fe8:	0f 90       	pop	r0
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	0f 90       	pop	r0
    1fee:	1f 90       	pop	r1
    1ff0:	18 95       	reti

Disassembly of section .text.copy_buffer:

00002916 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    2916:	bc 01       	movw	r22, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	09 c0       	rjmp	.+18     	; 0x292e <copy_buffer+0x18>
    291c:	fb 01       	movw	r30, r22
    291e:	e9 0f       	add	r30, r25
    2920:	f1 1d       	adc	r31, r1
    2922:	da 01       	movw	r26, r20
    2924:	aa 5e       	subi	r26, 0xEA	; 234
    2926:	b9 4f       	sbci	r27, 0xF9	; 249
    2928:	2c 91       	ld	r18, X
    292a:	20 83       	st	Z, r18
    292c:	9f 5f       	subi	r25, 0xFF	; 255
    292e:	49 2f       	mov	r20, r25
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <rx_buffer_data_len>
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	22 50       	subi	r18, 0x02	; 2
    293a:	31 09       	sbc	r19, r1
    293c:	42 17       	cp	r20, r18
    293e:	53 07       	cpc	r21, r19
    2940:	6c f3       	brlt	.-38     	; 0x291c <copy_buffer+0x6>
    2942:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

0000262e <uart1_hal_init>:
    262e:	e9 ec       	ldi	r30, 0xC9	; 201
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	80 61       	ori	r24, 0x10	; 16
    2636:	80 83       	st	Z, r24
    2638:	80 81       	ld	r24, Z
    263a:	88 60       	ori	r24, 0x08	; 8
    263c:	80 83       	st	Z, r24
    263e:	80 81       	ld	r24, Z
    2640:	80 68       	ori	r24, 0x80	; 128
    2642:	80 83       	st	Z, r24
    2644:	80 81       	ld	r24, Z
    2646:	80 64       	ori	r24, 0x40	; 64
    2648:	80 83       	st	Z, r24
    264a:	e8 ec       	ldi	r30, 0xC8	; 200
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	82 60       	ori	r24, 0x02	; 2
    2652:	80 83       	st	Z, r24
    2654:	86 e0       	ldi	r24, 0x06	; 6
    2656:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    265a:	80 e1       	ldi	r24, 0x10	; 16
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    2662:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    2666:	78 94       	sei
    2668:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00001c9a <uart1_hal_send_string>:
    1c9a:	6f 92       	push	r6
    1c9c:	7f 92       	push	r7
    1c9e:	8f 92       	push	r8
    1ca0:	cf 92       	push	r12
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	3b 01       	movw	r6, r22
    1ca8:	88 2e       	mov	r8, r24
    1caa:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <tx_buffer_data_len>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	fc cf       	rjmp	.-8      	; 0x1caa <uart1_hal_send_string+0x10>
    1cb2:	88 2d       	mov	r24, r8
    1cb4:	b3 01       	movw	r22, r6
    1cb6:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    1cba:	bc 01       	movw	r22, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	12 c0       	rjmp	.+36     	; 0x1ce4 <uart1_hal_send_string+0x4a>
    1cc0:	29 2f       	mov	r18, r25
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	e8 2c       	mov	r14, r8
    1cc6:	63 01       	movw	r12, r6
    1cc8:	c4 0e       	add	r12, r20
    1cca:	d5 1e       	adc	r13, r21
    1ccc:	e1 1c       	adc	r14, r1
    1cce:	57 fd       	sbrc	r21, 7
    1cd0:	ea 94       	dec	r14
    1cd2:	f6 01       	movw	r30, r12
    1cd4:	44 91       	lpm	r20, Z
    1cd6:	e7 fc       	sbrc	r14, 7
    1cd8:	40 81       	ld	r20, Z
    1cda:	f9 01       	movw	r30, r18
    1cdc:	e6 51       	subi	r30, 0x16	; 22
    1cde:	fb 4f       	sbci	r31, 0xFB	; 251
    1ce0:	40 83       	st	Z, r20
    1ce2:	9f 5f       	subi	r25, 0xFF	; 255
    1ce4:	49 2f       	mov	r20, r25
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	46 17       	cp	r20, r22
    1cea:	57 07       	cpc	r21, r23
    1cec:	48 f3       	brcs	.-46     	; 0x1cc0 <uart1_hal_send_string+0x26>
    1cee:	fb 01       	movw	r30, r22
    1cf0:	e6 51       	subi	r30, 0x16	; 22
    1cf2:	fb 4f       	sbci	r31, 0xFB	; 251
    1cf4:	8d e0       	ldi	r24, 0x0D	; 13
    1cf6:	80 83       	st	Z, r24
    1cf8:	fb 01       	movw	r30, r22
    1cfa:	e5 51       	subi	r30, 0x15	; 21
    1cfc:	fb 4f       	sbci	r31, 0xFB	; 251
    1cfe:	8a e0       	ldi	r24, 0x0A	; 10
    1d00:	80 83       	st	Z, r24
    1d02:	6e 5f       	subi	r22, 0xFE	; 254
    1d04:	60 93 12 07 	sts	0x0712, r22	; 0x800712 <tx_buffer_data_len>
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <tx_buffer_cursor>
    1d0e:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <_end>
    1d12:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    1d16:	ef 90       	pop	r14
    1d18:	df 90       	pop	r13
    1d1a:	cf 90       	pop	r12
    1d1c:	8f 90       	pop	r8
    1d1e:	7f 90       	pop	r7
    1d20:	6f 90       	pop	r6
    1d22:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00002c6a <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    2c6a:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <rx_buffer_has_message>
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	91 11       	cpse	r25, r1
    2c72:	01 c0       	rjmp	.+2      	; 0x2c76 <uart1_hal_message_ready+0xc>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
}
    2c76:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00002c78 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    2c78:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <rx_buffer_data_len>
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	95 39       	cpi	r25, 0x95	; 149
    2c80:	08 f4       	brcc	.+2      	; 0x2c84 <uart1_hal_rx_full+0xc>
    2c82:	80 e0       	ldi	r24, 0x00	; 0
}
    2c84:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

00002d34 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    2d34:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <rx_buffer_has_message>
	rx_buffer_data_len=0;
    2d38:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <rx_buffer_data_len>
    2d3c:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

000029c6 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	cf 93       	push	r28
    29cc:	8c 01       	movw	r16, r24
    29ce:	0e 94 8b 14 	call	0x2916	; 0x2916 <copy_buffer>
    29d2:	c0 91 10 07 	lds	r28, 0x0710	; 0x800710 <rx_buffer_data_len>
    29d6:	c2 50       	subi	r28, 0x02	; 2
    29d8:	f8 01       	movw	r30, r16
    29da:	ec 0f       	add	r30, r28
    29dc:	f1 1d       	adc	r31, r1
    29de:	10 82       	st	Z, r1
    29e0:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <uart1_hal_clear_rx_buffer>
    29e4:	8c 2f       	mov	r24, r28
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	08 95       	ret

Disassembly of section .text.__vector_30:

00002454 <__vector_30>:
    2454:	1f 92       	push	r1
    2456:	0f 92       	push	r0
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	0f 92       	push	r0
    245c:	11 24       	eor	r1, r1
    245e:	8f 93       	push	r24
    2460:	ef 93       	push	r30
    2462:	ff 93       	push	r31
    2464:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <tx_buffer_cursor>
    2468:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <tx_buffer_data_len>
    246c:	e8 17       	cp	r30, r24
    246e:	58 f4       	brcc	.+22     	; 0x2486 <__vector_30+0x32>
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	8e 0f       	add	r24, r30
    2474:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <tx_buffer_cursor>
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	e6 51       	subi	r30, 0x16	; 22
    247c:	fb 4f       	sbci	r31, 0xFB	; 251
    247e:	80 81       	ld	r24, Z
    2480:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2484:	04 c0       	rjmp	.+8      	; 0x248e <__vector_30+0x3a>
    2486:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <tx_buffer_cursor>
    248a:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <tx_buffer_data_len>
    248e:	ff 91       	pop	r31
    2490:	ef 91       	pop	r30
    2492:	8f 91       	pop	r24
    2494:	0f 90       	pop	r0
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	0f 90       	pop	r0
    249a:	1f 90       	pop	r1
    249c:	18 95       	reti

Disassembly of section .text.__vector_28:

00001ff2 <__vector_28>:
    1ff2:	1f 92       	push	r1
    1ff4:	0f 92       	push	r0
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	0f 92       	push	r0
    1ffa:	11 24       	eor	r1, r1
    1ffc:	2f 93       	push	r18
    1ffe:	8f 93       	push	r24
    2000:	9f 93       	push	r25
    2002:	ef 93       	push	r30
    2004:	ff 93       	push	r31
    2006:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <rx_buffer_has_message>
    200a:	81 11       	cpse	r24, r1
    200c:	0e c0       	rjmp	.+28     	; 0x202a <__vector_28+0x38>
    200e:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <rx_buffer_data_len>
    2012:	e6 39       	cpi	r30, 0x96	; 150
    2014:	50 f4       	brcc	.+20     	; 0x202a <__vector_28+0x38>
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	8e 0f       	add	r24, r30
    201a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <rx_buffer_data_len>
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2024:	ea 5e       	subi	r30, 0xEA	; 234
    2026:	f9 4f       	sbci	r31, 0xF9	; 249
    2028:	80 83       	st	Z, r24
    202a:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <rx_buffer_data_len>
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	fc 01       	movw	r30, r24
    2032:	eb 5e       	subi	r30, 0xEB	; 235
    2034:	f9 4f       	sbci	r31, 0xF9	; 249
    2036:	20 81       	ld	r18, Z
    2038:	2a 30       	cpi	r18, 0x0A	; 10
    203a:	49 f4       	brne	.+18     	; 0x204e <__vector_28+0x5c>
    203c:	fc 01       	movw	r30, r24
    203e:	ec 5e       	subi	r30, 0xEC	; 236
    2040:	f9 4f       	sbci	r31, 0xF9	; 249
    2042:	80 81       	ld	r24, Z
    2044:	8d 30       	cpi	r24, 0x0D	; 13
    2046:	19 f4       	brne	.+6      	; 0x204e <__vector_28+0x5c>
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <rx_buffer_has_message>
    204e:	ff 91       	pop	r31
    2050:	ef 91       	pop	r30
    2052:	9f 91       	pop	r25
    2054:	8f 91       	pop	r24
    2056:	2f 91       	pop	r18
    2058:	0f 90       	pop	r0
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	0f 90       	pop	r0
    205e:	1f 90       	pop	r1
    2060:	18 95       	reti

Disassembly of section .text.main:

00002b8c <main>:
	//test_runner();
	
	while(1)
    {
		//MAINPG_start();
		CONF_enter();
    2b8c:	0e 94 18 0a 	call	0x1430	; 0x1430 <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b90:	2f ef       	ldi	r18, 0xFF	; 255
    2b92:	8d e3       	ldi	r24, 0x3D	; 61
    2b94:	99 e4       	ldi	r25, 0x49	; 73
    2b96:	21 50       	subi	r18, 0x01	; 1
    2b98:	80 40       	sbci	r24, 0x00	; 0
    2b9a:	90 40       	sbci	r25, 0x00	; 0
    2b9c:	e1 f7       	brne	.-8      	; 0x2b96 <main+0xa>
    2b9e:	00 c0       	rjmp	.+0      	; 0x2ba0 <main+0x14>
    2ba0:	00 00       	nop
    2ba2:	f4 cf       	rjmp	.-24     	; 0x2b8c <main>

Disassembly of section .text.EM_has_deveui:

00002bbc <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    2bbc:	60 e4       	ldi	r22, 0x40	; 64
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	80 e8       	ldi	r24, 0x80	; 128
    2bc2:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <eeprom_read_byte>
    2bc6:	91 e0       	ldi	r25, 0x01	; 1
    2bc8:	81 11       	cpse	r24, r1
    2bca:	01 c0       	rjmp	.+2      	; 0x2bce <EM_has_deveui+0x12>
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
}
    2bce:	89 2f       	mov	r24, r25
    2bd0:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00002bd2 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    2bd2:	61 e4       	ldi	r22, 0x41	; 65
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	80 e8       	ldi	r24, 0x80	; 128
    2bd8:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <eeprom_read_byte>
    2bdc:	91 e0       	ldi	r25, 0x01	; 1
    2bde:	81 11       	cpse	r24, r1
    2be0:	01 c0       	rjmp	.+2      	; 0x2be4 <EM_has_appeui+0x12>
    2be2:	90 e0       	ldi	r25, 0x00	; 0
}
    2be4:	89 2f       	mov	r24, r25
    2be6:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00002be8 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    2be8:	62 e4       	ldi	r22, 0x42	; 66
    2bea:	70 e0       	ldi	r23, 0x00	; 0
    2bec:	80 e8       	ldi	r24, 0x80	; 128
    2bee:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <eeprom_read_byte>
    2bf2:	91 e0       	ldi	r25, 0x01	; 1
    2bf4:	81 11       	cpse	r24, r1
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <EM_has_appkey+0x12>
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
}
    2bfa:	89 2f       	mov	r24, r25
    2bfc:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

0000266a <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    266a:	cf 92       	push	r12
    266c:	df 92       	push	r13
    266e:	ef 92       	push	r14
    2670:	6b 01       	movw	r12, r22
    2672:	e8 2e       	mov	r14, r24
    2674:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    2678:	40 97       	sbiw	r24, 0x10	; 16
    267a:	79 f4       	brne	.+30     	; 0x269a <EM_set_deveui+0x30>
    267c:	20 e1       	ldi	r18, 0x10	; 16
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	50 e0       	ldi	r21, 0x00	; 0
    2684:	8e 2d       	mov	r24, r14
    2686:	b6 01       	movw	r22, r12
    2688:	0e 94 94 12 	call	0x2528	; 0x2528 <eeprom_update_block>
    268c:	61 e0       	ldi	r22, 0x01	; 1
    268e:	80 e4       	ldi	r24, 0x40	; 64
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <eeprom_update_byte>
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	01 c0       	rjmp	.+2      	; 0x269c <EM_set_deveui+0x32>
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	ef 90       	pop	r14
    269e:	df 90       	pop	r13
    26a0:	cf 90       	pop	r12
    26a2:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00002858 <EM_get_deveui>:
    2858:	0f 93       	push	r16
    285a:	1f 93       	push	r17
    285c:	cf 93       	push	r28
    285e:	8c 01       	movw	r16, r24
    2860:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <EM_has_deveui>
    2864:	c8 2f       	mov	r28, r24
    2866:	88 23       	and	r24, r24
    2868:	51 f0       	breq	.+20     	; 0x287e <EM_get_deveui+0x26>
    286a:	20 e1       	ldi	r18, 0x10	; 16
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	50 e0       	ldi	r21, 0x00	; 0
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	c8 01       	movw	r24, r16
    2876:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <eeprom_read_block>
    287a:	f8 01       	movw	r30, r16
    287c:	10 8a       	std	Z+16, r1	; 0x10
    287e:	8c 2f       	mov	r24, r28
    2880:	cf 91       	pop	r28
    2882:	1f 91       	pop	r17
    2884:	0f 91       	pop	r16
    2886:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

000026a4 <EM_set_appeui>:
    26a4:	cf 92       	push	r12
    26a6:	df 92       	push	r13
    26a8:	ef 92       	push	r14
    26aa:	6b 01       	movw	r12, r22
    26ac:	e8 2e       	mov	r14, r24
    26ae:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    26b2:	40 97       	sbiw	r24, 0x10	; 16
    26b4:	79 f4       	brne	.+30     	; 0x26d4 <EM_set_appeui+0x30>
    26b6:	20 e1       	ldi	r18, 0x10	; 16
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e1       	ldi	r20, 0x10	; 16
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	8e 2d       	mov	r24, r14
    26c0:	b6 01       	movw	r22, r12
    26c2:	0e 94 94 12 	call	0x2528	; 0x2528 <eeprom_update_block>
    26c6:	61 e0       	ldi	r22, 0x01	; 1
    26c8:	81 e4       	ldi	r24, 0x41	; 65
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <eeprom_update_byte>
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <EM_set_appeui+0x32>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	ef 90       	pop	r14
    26d8:	df 90       	pop	r13
    26da:	cf 90       	pop	r12
    26dc:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00002888 <EM_get_appeui>:
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	8c 01       	movw	r16, r24
    2890:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <EM_has_appeui>
    2894:	c8 2f       	mov	r28, r24
    2896:	88 23       	and	r24, r24
    2898:	51 f0       	breq	.+20     	; 0x28ae <EM_get_appeui+0x26>
    289a:	20 e1       	ldi	r18, 0x10	; 16
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e1       	ldi	r20, 0x10	; 16
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	c8 01       	movw	r24, r16
    28a6:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <eeprom_read_block>
    28aa:	f8 01       	movw	r30, r16
    28ac:	10 8a       	std	Z+16, r1	; 0x10
    28ae:	8c 2f       	mov	r24, r28
    28b0:	cf 91       	pop	r28
    28b2:	1f 91       	pop	r17
    28b4:	0f 91       	pop	r16
    28b6:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

000026de <EM_set_appkey>:
    26de:	cf 92       	push	r12
    26e0:	df 92       	push	r13
    26e2:	ef 92       	push	r14
    26e4:	6b 01       	movw	r12, r22
    26e6:	e8 2e       	mov	r14, r24
    26e8:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    26ec:	80 97       	sbiw	r24, 0x20	; 32
    26ee:	79 f4       	brne	.+30     	; 0x270e <EM_set_appkey+0x30>
    26f0:	20 e2       	ldi	r18, 0x20	; 32
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	50 e0       	ldi	r21, 0x00	; 0
    26f8:	8e 2d       	mov	r24, r14
    26fa:	b6 01       	movw	r22, r12
    26fc:	0e 94 94 12 	call	0x2528	; 0x2528 <eeprom_update_block>
    2700:	61 e0       	ldi	r22, 0x01	; 1
    2702:	82 e4       	ldi	r24, 0x42	; 66
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <eeprom_update_byte>
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	01 c0       	rjmp	.+2      	; 0x2710 <EM_set_appkey+0x32>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	ef 90       	pop	r14
    2712:	df 90       	pop	r13
    2714:	cf 90       	pop	r12
    2716:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

000028b8 <EM_get_appkey>:
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	cf 93       	push	r28
    28be:	8c 01       	movw	r16, r24
    28c0:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <EM_has_appkey>
    28c4:	c8 2f       	mov	r28, r24
    28c6:	88 23       	and	r24, r24
    28c8:	51 f0       	breq	.+20     	; 0x28de <EM_get_appkey+0x26>
    28ca:	20 e2       	ldi	r18, 0x20	; 32
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	c8 01       	movw	r24, r16
    28d6:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <eeprom_read_block>
    28da:	f8 01       	movw	r30, r16
    28dc:	10 a2       	std	Z+32, r1	; 0x20
    28de:	8c 2f       	mov	r24, r28
    28e0:	cf 91       	pop	r28
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00002c86 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    2c86:	ab 01       	movw	r20, r22
    2c88:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    2c8a:	83 e4       	ldi	r24, 0x43	; 67
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <eeprom_update_dword>
    2c92:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00002abe <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	ec 01       	movw	r28, r24
    2ac4:	63 e4       	ldi	r22, 0x43	; 67
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	0e 94 82 16 	call	0x2d04	; 0x2d04 <eeprom_read_dword>
    2ace:	68 83       	st	Y, r22
    2ad0:	79 83       	std	Y+1, r23	; 0x01
    2ad2:	8a 83       	std	Y+2, r24	; 0x02
    2ad4:	9b 83       	std	Y+3, r25	; 0x03
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00002c94 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    2c94:	ab 01       	movw	r20, r22
    2c96:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    2c98:	87 e4       	ldi	r24, 0x47	; 71
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <eeprom_update_dword>
    2ca0:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00002adc <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	ec 01       	movw	r28, r24
    2ae2:	67 e4       	ldi	r22, 0x47	; 71
    2ae4:	70 e0       	ldi	r23, 0x00	; 0
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	0e 94 82 16 	call	0x2d04	; 0x2d04 <eeprom_read_dword>
    2aec:	68 83       	st	Y, r22
    2aee:	79 83       	std	Y+1, r23	; 0x01
    2af0:	8a 83       	std	Y+2, r24	; 0x02
    2af2:	9b 83       	std	Y+3, r25	; 0x03
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00002ca2 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    2ca2:	ab 01       	movw	r20, r22
    2ca4:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    2ca6:	8b e4       	ldi	r24, 0x4B	; 75
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <eeprom_update_dword>
    2cae:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00002afa <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	ec 01       	movw	r28, r24
    2b00:	6b e4       	ldi	r22, 0x4B	; 75
    2b02:	70 e0       	ldi	r23, 0x00	; 0
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	0e 94 82 16 	call	0x2d04	; 0x2d04 <eeprom_read_dword>
    2b0a:	68 83       	st	Y, r22
    2b0c:	79 83       	std	Y+1, r23	; 0x01
    2b0e:	8a 83       	std	Y+2, r24	; 0x02
    2b10:	9b 83       	std	Y+3, r25	; 0x03
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00002cb0 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    2cb0:	24 2f       	mov	r18, r20
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	44 e6       	ldi	r20, 0x64	; 100
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	0e 94 94 12 	call	0x2528	; 0x2528 <eeprom_update_block>
    2cbc:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00002c4c <EM_get_collections>:
}
void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    2c4c:	26 2f       	mov	r18, r22
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	44 e6       	ldi	r20, 0x64	; 100
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <eeprom_read_block>
    2c5a:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

00002d68 <LM_forward_msg>:
LM_STATUS LM_reset_module(){
	return util_reset_module();
}

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    2d68:	0e 94 a8 13 	call	0x2750	; 0x2750 <util_lora_forward_msg>
    2d6c:	08 95       	ret

Disassembly of section .text.attach_ending:

00002b54 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    2b54:	fc 01       	movw	r30, r24
    2b56:	01 90       	ld	r0, Z+
    2b58:	00 20       	and	r0, r0
    2b5a:	e9 f7       	brne	.-6      	; 0x2b56 <attach_ending+0x2>
    2b5c:	cf 01       	movw	r24, r30
    2b5e:	23 e0       	ldi	r18, 0x03	; 3
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4f e9       	ldi	r20, 0x9F	; 159
    2b64:	52 e0       	ldi	r21, 0x02	; 2
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
    2b6e:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

00002b70 <util_transmit_msg>:
		default:
		return sd->failure_state;
	}
}

void util_transmit_msg(char msg[]){
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    2b76:	bc 01       	movw	r22, r24
    2b78:	80 e8       	ldi	r24, 0x80	; 128
    2b7a:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    2b7e:	68 2f       	mov	r22, r24
    2b80:	ce 01       	movw	r24, r28
    2b82:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <uart0_hal_send_message>
}
    2b86:	df 91       	pop	r29
    2b88:	cf 91       	pop	r28
    2b8a:	08 95       	ret

Disassembly of section .text.util_read_msg:

00002d6e <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str(msg);
    2d6e:	0e 94 cf 14 	call	0x299e	; 0x299e <uart0_hal_read_message_as_str>
    2d72:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00002750 <util_lora_forward_msg>:
	sd->failure_state=failed;
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	ea 01       	movw	r28, r20
    2756:	ab 01       	movw	r20, r22
    2758:	68 2f       	mov	r22, r24
    275a:	80 e9       	ldi	r24, 0x90	; 144
    275c:	92 e0       	ldi	r25, 0x02	; 2
    275e:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <strcpy>
    2762:	80 e9       	ldi	r24, 0x90	; 144
    2764:	92 e0       	ldi	r25, 0x02	; 2
    2766:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <attach_ending>
    276a:	80 e9       	ldi	r24, 0x90	; 144
    276c:	92 e0       	ldi	r25, 0x02	; 2
    276e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <util_transmit_msg>
    2772:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <uart0_hal_message_ready>
    2776:	88 23       	and	r24, r24
    2778:	e1 f3       	breq	.-8      	; 0x2772 <util_lora_forward_msg+0x22>
    277a:	ce 01       	movw	r24, r28
    277c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <util_read_msg>
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	08 95       	ret

Disassembly of section .text.parse_cmd:

00002a7e <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    2a7e:	fc 01       	movw	r30, r24
    2a80:	80 81       	ld	r24, Z
    2a82:	82 37       	cpi	r24, 0x72	; 114
    2a84:	31 f0       	breq	.+12     	; 0x2a92 <parse_cmd+0x14>
	if(msg[0]=='w') return CONF_WRTIE;
    2a86:	87 37       	cpi	r24, 0x77	; 119
    2a88:	31 f0       	breq	.+12     	; 0x2a96 <parse_cmd+0x18>
	if(msg[0]=='c') return CONF_CONNECT;
    2a8a:	83 36       	cpi	r24, 0x63	; 99
    2a8c:	31 f4       	brne	.+12     	; 0x2a9a <parse_cmd+0x1c>
    2a8e:	89 e0       	ldi	r24, 0x09	; 9
    2a90:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    2a92:	87 e0       	ldi	r24, 0x07	; 7
    2a94:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    2a96:	88 e0       	ldi	r24, 0x08	; 8
    2a98:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
	return CONF_NOT_VALID;
    2a9a:	85 e0       	ldi	r24, 0x05	; 5
}
    2a9c:	08 95       	ret

Disassembly of section .text.validate_cmd:

00002194 <validate_cmd>:

static bool validate_cmd(char msg[]){
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    219a:	bc 01       	movw	r22, r24
    219c:	80 e8       	ldi	r24, 0x80	; 128
    219e:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    21a2:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    21a4:	fc 01       	movw	r30, r24
    21a6:	31 97       	sbiw	r30, 0x01	; 1
    21a8:	ec 0f       	add	r30, r28
    21aa:	fd 1f       	adc	r31, r29
    21ac:	80 81       	ld	r24, Z
    21ae:	80 32       	cpi	r24, 0x20	; 32
    21b0:	b1 f0       	breq	.+44     	; 0x21de <validate_cmd+0x4a>
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	0d c0       	rjmp	.+26     	; 0x21d4 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    21ba:	fe 01       	movw	r30, r28
    21bc:	e2 0f       	add	r30, r18
    21be:	f3 1f       	adc	r31, r19
    21c0:	90 81       	ld	r25, Z
    21c2:	90 32       	cpi	r25, 0x20	; 32
    21c4:	21 f4       	brne	.+8      	; 0x21ce <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    21c6:	41 11       	cpse	r20, r1
    21c8:	0c c0       	rjmp	.+24     	; 0x21e2 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    21ce:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    21d0:	2f 5f       	subi	r18, 0xFF	; 255
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	26 17       	cp	r18, r22
    21d6:	37 07       	cpc	r19, r23
    21d8:	80 f3       	brcs	.-32     	; 0x21ba <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	03 c0       	rjmp	.+6      	; 0x21e4 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    21e2:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

Disassembly of section .text.CONF_enter:

00001430 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    1430:	cf 93       	push	r28
	uart1_hal_init();
    1432:	0e 94 17 13 	call	0x262e	; 0x262e <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    1436:	c0 e0       	ldi	r28, 0x00	; 0
    1438:	07 c0       	rjmp	.+14     	; 0x1448 <CONF_enter+0x18>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    143a:	c5 e0       	ldi	r28, 0x05	; 5
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <CONF_enter+0x18>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    143e:	c6 e0       	ldi	r28, 0x06	; 6
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <CONF_enter+0x18>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1442:	c5 e0       	ldi	r28, 0x05	; 5
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <CONF_enter+0x18>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1446:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    1448:	ec 2f       	mov	r30, r28
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	eb 30       	cpi	r30, 0x0B	; 11
    144e:	f1 05       	cpc	r31, r1
    1450:	d8 f7       	brcc	.-10     	; 0x1448 <CONF_enter+0x18>
    1452:	e2 5c       	subi	r30, 0xC2	; 194
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    145a:	6d e0       	ldi	r22, 0x0D	; 13
    145c:	73 e0       	ldi	r23, 0x03	; 3
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1464:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1466:	f0 cf       	rjmp	.-32     	; 0x1448 <CONF_enter+0x18>
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    1468:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <uart1_hal_message_ready>
    146c:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    146e:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    1470:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <uart1_hal_rx_full>
    1474:	81 11       	cpse	r24, r1
    1476:	e1 cf       	rjmp	.-62     	; 0x143a <CONF_enter+0xa>
    1478:	e7 cf       	rjmp	.-50     	; 0x1448 <CONF_enter+0x18>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    147a:	80 e2       	ldi	r24, 0x20	; 32
    147c:	94 e0       	ldi	r25, 0x04	; 4
    147e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	94 e0       	ldi	r25, 0x04	; 4
    1486:	0e 94 ca 10 	call	0x2194	; 0x2194 <validate_cmd>
    148a:	88 23       	and	r24, r24
    148c:	c1 f2       	breq	.-80     	; 0x143e <CONF_enter+0xe>
					state=parse_cmd(cnf_rx_cmd);
    148e:	80 e2       	ldi	r24, 0x20	; 32
    1490:	94 e0       	ldi	r25, 0x04	; 4
    1492:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <parse_cmd>
    1496:	c8 2f       	mov	r28, r24
    1498:	d7 cf       	rjmp	.-82     	; 0x1448 <CONF_enter+0x18>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    149a:	60 e2       	ldi	r22, 0x20	; 32
    149c:	74 e0       	ldi	r23, 0x04	; 4
    149e:	80 e8       	ldi	r24, 0x80	; 128
    14a0:	48 e5       	ldi	r20, 0x58	; 88
    14a2:	53 e0       	ldi	r21, 0x03	; 3
    14a4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <handle_read>
    14a8:	88 23       	and	r24, r24
    14aa:	59 f2       	breq	.-106    	; 0x1442 <CONF_enter+0x12>
					state=CONF_REPLY;
    14ac:	ca e0       	ldi	r28, 0x0A	; 10
    14ae:	cc cf       	rjmp	.-104    	; 0x1448 <CONF_enter+0x18>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    14b0:	60 e2       	ldi	r22, 0x20	; 32
    14b2:	74 e0       	ldi	r23, 0x04	; 4
    14b4:	80 e8       	ldi	r24, 0x80	; 128
    14b6:	48 e5       	ldi	r20, 0x58	; 88
    14b8:	53 e0       	ldi	r21, 0x03	; 3
    14ba:	0e 94 c1 08 	call	0x1182	; 0x1182 <handle_write>
    14be:	88 23       	and	r24, r24
    14c0:	11 f2       	breq	.-124    	; 0x1446 <CONF_enter+0x16>
					state=CONF_REPLY;
    14c2:	ca e0       	ldi	r28, 0x0A	; 10
    14c4:	c1 cf       	rjmp	.-126    	; 0x1448 <CONF_enter+0x18>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				CON_RN2483();
    14c6:	0e 94 89 0a 	call	0x1512	; 0x1512 <CON_RN2483>
				uart1_hal_clear_rx_buffer();
    14ca:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <uart1_hal_clear_rx_buffer>
				state=CONF_CLEAR_FOR_NEW_CMD;
    14ce:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    14d0:	bb cf       	rjmp	.-138    	; 0x1448 <CONF_enter+0x18>
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    14d2:	68 e5       	ldi	r22, 0x58	; 88
    14d4:	73 e0       	ldi	r23, 0x03	; 3
    14d6:	80 e8       	ldi	r24, 0x80	; 128
    14d8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    14dc:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    14de:	b4 cf       	rjmp	.-152    	; 0x1448 <CONF_enter+0x18>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    14e0:	63 e3       	ldi	r22, 0x33	; 51
    14e2:	73 e0       	ldi	r23, 0x03	; 3
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    14ea:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    14ec:	ad cf       	rjmp	.-166    	; 0x1448 <CONF_enter+0x18>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    14ee:	6d e3       	ldi	r22, 0x3D	; 61
    14f0:	73 e0       	ldi	r23, 0x03	; 3
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    14f8:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    14fa:	a6 cf       	rjmp	.-180    	; 0x1448 <CONF_enter+0x18>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    14fc:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    1500:	6a e4       	ldi	r22, 0x4A	; 74
    1502:	73 e0       	ldi	r23, 0x03	; 3
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    150a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    150c:	9d cf       	rjmp	.-198    	; 0x1448 <CONF_enter+0x18>
			
			case CONF_EXIT:
				return;
		}
	}
}
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

000029ee <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    29ee:	0f 93       	push	r16
    29f0:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0){
    29f2:	bc 01       	movw	r22, r24
    29f4:	80 e8       	ldi	r24, 0x80	; 128
    29f6:	04 e0       	ldi	r16, 0x04	; 4
    29f8:	10 e0       	ldi	r17, 0x00	; 0
    29fa:	20 e7       	ldi	r18, 0x70	; 112
    29fc:	33 e0       	ldi	r19, 0x03	; 3
    29fe:	40 e0       	ldi	r20, 0x00	; 0
    2a00:	0e 94 69 10 	call	0x20d2	; 0x20d2 <strncmp>
    2a04:	89 2b       	or	r24, r25
    2a06:	11 f4       	brne	.+4      	; 0x2a0c <CON_RN2483_parse+0x1e>
		return CL_EXIT;
    2a08:	84 e0       	ldi	r24, 0x04	; 4
    2a0a:	01 c0       	rjmp	.+2      	; 0x2a0e <CON_RN2483_parse+0x20>
	}
	return CL_FORWARD;
    2a0c:	83 e0       	ldi	r24, 0x03	; 3
    2a0e:	1f 91       	pop	r17
    2a10:	0f 91       	pop	r16
    2a12:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001512 <CON_RN2483>:
extern char cnf_rx_cmd[];
extern char cnf_reply[];

static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CON_RN2483(){
    1512:	6f 92       	push	r6
    1514:	7f 92       	push	r7
    1516:	8f 92       	push	r8
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1522:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1524:	c2 30       	cpi	r28, 0x02	; 2
    1526:	09 f1       	breq	.+66     	; 0x156a <CON_RN2483+0x58>
    1528:	28 f4       	brcc	.+10     	; 0x1534 <CON_RN2483+0x22>
    152a:	cc 23       	and	r28, r28
    152c:	49 f0       	breq	.+18     	; 0x1540 <CON_RN2483+0x2e>
    152e:	c1 30       	cpi	r28, 0x01	; 1
    1530:	91 f0       	breq	.+36     	; 0x1556 <CON_RN2483+0x44>
    1532:	f8 cf       	rjmp	.-16     	; 0x1524 <CON_RN2483+0x12>
    1534:	c3 30       	cpi	r28, 0x03	; 3
    1536:	f9 f0       	breq	.+62     	; 0x1576 <CON_RN2483+0x64>
    1538:	c4 30       	cpi	r28, 0x04	; 4
    153a:	09 f4       	brne	.+2      	; 0x153e <CON_RN2483+0x2c>
    153c:	4b c0       	rjmp	.+150    	; 0x15d4 <CON_RN2483+0xc2>
    153e:	f2 cf       	rjmp	.-28     	; 0x1524 <CON_RN2483+0x12>
			case CL_INIT:
				uart0_hal_init();
    1540:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <uart0_hal_init>
				rn2483_init();
    1544:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <rn2483_init>
				//LM_reset_module();
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1548:	65 e7       	ldi	r22, 0x75	; 117
    154a:	73 e0       	ldi	r23, 0x03	; 3
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <uart1_hal_send_string>
				state=CL_READ_MSG;
    1552:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1554:	e7 cf       	rjmp	.-50     	; 0x1524 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1556:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <uart1_hal_message_ready>
    155a:	88 23       	and	r24, r24
    155c:	19 f3       	breq	.-58     	; 0x1524 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    155e:	80 e2       	ldi	r24, 0x20	; 32
    1560:	94 e0       	ldi	r25, 0x04	; 4
    1562:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1566:	c2 e0       	ldi	r28, 0x02	; 2
    1568:	dd cf       	rjmp	.-70     	; 0x1524 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    156a:	80 e2       	ldi	r24, 0x20	; 32
    156c:	94 e0       	ldi	r25, 0x04	; 4
    156e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <CON_RN2483_parse>
    1572:	c8 2f       	mov	r28, r24
			break;
    1574:	d7 cf       	rjmp	.-82     	; 0x1524 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1576:	80 e2       	ldi	r24, 0x20	; 32
    1578:	94 e0       	ldi	r25, 0x04	; 4
    157a:	6c 01       	movw	r12, r24
    157c:	20 e8       	ldi	r18, 0x80	; 128
    157e:	e2 2e       	mov	r14, r18
    1580:	2f 93       	push	r18
    1582:	df 92       	push	r13
    1584:	8f 93       	push	r24
    1586:	8b ea       	ldi	r24, 0xAB	; 171
    1588:	93 e0       	ldi	r25, 0x03	; 3
    158a:	a0 e0       	ldi	r26, 0x00	; 0
    158c:	af 93       	push	r26
    158e:	9f 93       	push	r25
    1590:	8f 93       	push	r24
    1592:	c8 e5       	ldi	r28, 0x58	; 88
    1594:	d3 e0       	ldi	r29, 0x03	; 3
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	0e 94 4f 12 	call	0x249e	; 0x249e <sprintf>
				uart1_hal_send_string(cnf_reply);
    159e:	3e 01       	movw	r6, r28
    15a0:	20 e8       	ldi	r18, 0x80	; 128
    15a2:	82 2e       	mov	r8, r18
    15a4:	88 2d       	mov	r24, r8
    15a6:	b3 01       	movw	r22, r6
    15a8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    15ac:	ae 01       	movw	r20, r28
    15ae:	6c 2d       	mov	r22, r12
    15b0:	7d 2d       	mov	r23, r13
    15b2:	8e 2d       	mov	r24, r14
    15b4:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    15b8:	88 2d       	mov	r24, r8
    15ba:	b3 01       	movw	r22, r6
    15bc:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    15c0:	8d b7       	in	r24, 0x3d	; 61
    15c2:	9e b7       	in	r25, 0x3e	; 62
    15c4:	08 96       	adiw	r24, 0x08	; 8
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	9e bf       	out	0x3e, r25	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    15d0:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    15d2:	a8 cf       	rjmp	.-176    	; 0x1524 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart1_hal_send_string("Closing connection to RN2483...");
    15d4:	61 eb       	ldi	r22, 0xB1	; 177
    15d6:	73 e0       	ldi	r23, 0x03	; 3
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	ef 90       	pop	r14
    15e6:	df 90       	pop	r13
    15e8:	cf 90       	pop	r12
    15ea:	8f 90       	pop	r8
    15ec:	7f 90       	pop	r7
    15ee:	6f 90       	pop	r6
    15f0:	08 95       	ret

Disassembly of section .text.read_cols:

00001940 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	a3 97       	sbiw	r28, 0x23	; 35
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1960:	63 e2       	ldi	r22, 0x23	; 35
    1962:	ce 01       	movw	r24, r28
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <EM_get_collections>
	res[0]='\0';
    196a:	f7 01       	movw	r30, r14
    196c:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    196e:	10 e0       	ldi	r17, 0x00	; 0
    1970:	35 c0       	rjmp	.+106    	; 0x19dc <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    1972:	81 2f       	mov	r24, r17
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	fc 01       	movw	r30, r24
    1978:	ee 0f       	add	r30, r30
    197a:	ff 1f       	adc	r31, r31
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	e8 0f       	add	r30, r24
    1982:	f9 1f       	adc	r31, r25
    1984:	21 e0       	ldi	r18, 0x01	; 1
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	2c 0f       	add	r18, r28
    198a:	3d 1f       	adc	r19, r29
    198c:	e2 0f       	add	r30, r18
    198e:	f3 1f       	adc	r31, r19
    1990:	23 81       	ldd	r18, Z+3	; 0x03
    1992:	2f 93       	push	r18
    1994:	22 81       	ldd	r18, Z+2	; 0x02
    1996:	2f 93       	push	r18
    1998:	21 81       	ldd	r18, Z+1	; 0x01
    199a:	2f 93       	push	r18
    199c:	20 81       	ld	r18, Z
    199e:	2f 93       	push	r18
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	9f 93       	push	r25
    19a4:	8f 93       	push	r24
    19a6:	86 ee       	ldi	r24, 0xE6	; 230
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	af 93       	push	r26
    19ae:	9f 93       	push	r25
    19b0:	8f 93       	push	r24
    19b2:	0f 2e       	mov	r0, r31
    19b4:	fc ea       	ldi	r31, 0xAC	; 172
    19b6:	cf 2e       	mov	r12, r31
    19b8:	f6 e0       	ldi	r31, 0x06	; 6
    19ba:	df 2e       	mov	r13, r31
    19bc:	f0 2d       	mov	r31, r0
    19be:	df 92       	push	r13
    19c0:	cf 92       	push	r12
    19c2:	0e 94 4f 12 	call	0x249e	; 0x249e <sprintf>
		strcat(res, arg);
    19c6:	a6 01       	movw	r20, r12
    19c8:	60 e8       	ldi	r22, 0x80	; 128
    19ca:	c7 01       	movw	r24, r14
    19cc:	0e 94 a2 14 	call	0x2944	; 0x2944 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    19d0:	1f 5f       	subi	r17, 0xFF	; 255
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	17 30       	cpi	r17, 0x07	; 7
    19de:	48 f2       	brcs	.-110    	; 0x1972 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    19e0:	a3 96       	adiw	r28, 0x23	; 35
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	08 95       	ret

Disassembly of section .text.write_deveui:

00001d9e <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    1d9e:	cf 92       	push	r12
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    1dac:	22 e0       	ldi	r18, 0x02	; 2
    1dae:	4c ea       	ldi	r20, 0xAC	; 172
    1db0:	56 e0       	ldi	r21, 0x06	; 6
    1db2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
    1db6:	c8 2f       	mov	r28, r24
    1db8:	88 23       	and	r24, r24
    1dba:	29 f1       	breq	.+74     	; 0x1e06 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    1dbc:	8c ea       	ldi	r24, 0xAC	; 172
    1dbe:	96 e0       	ldi	r25, 0x06	; 6
    1dc0:	6c 01       	movw	r12, r24
    1dc2:	20 e8       	ldi	r18, 0x80	; 128
    1dc4:	e2 2e       	mov	r14, r18
    1dc6:	8e 2d       	mov	r24, r14
    1dc8:	b6 01       	movw	r22, r12
    1dca:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    1dce:	40 97       	sbiw	r24, 0x10	; 16
    1dd0:	c9 f4       	brne	.+50     	; 0x1e04 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    1dd2:	8e 2d       	mov	r24, r14
    1dd4:	b6 01       	movw	r22, r12
    1dd6:	0e 94 35 13 	call	0x266a	; 0x266a <EM_set_deveui>
    1dda:	c8 2f       	mov	r28, r24
    1ddc:	81 11       	cpse	r24, r1
    1dde:	09 c0       	rjmp	.+18     	; 0x1df2 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    1de0:	27 e0       	ldi	r18, 0x07	; 7
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	4c ef       	ldi	r20, 0xFC	; 252
    1de6:	51 e0       	ldi	r21, 0x01	; 1
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	c8 01       	movw	r24, r16
    1dec:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
		return false;
    1df0:	0a c0       	rjmp	.+20     	; 0x1e06 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    1df2:	28 e0       	ldi	r18, 0x08	; 8
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	43 e0       	ldi	r20, 0x03	; 3
    1df8:	52 e0       	ldi	r21, 0x02	; 2
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	c8 01       	movw	r24, r16
    1dfe:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
		return true;
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    1e04:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    1e06:	8c 2f       	mov	r24, r28
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	ef 90       	pop	r14
    1e10:	df 90       	pop	r13
    1e12:	cf 90       	pop	r12
    1e14:	08 95       	ret

Disassembly of section .text.write_appeui:

00001e16 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    1e16:	cf 92       	push	r12
    1e18:	df 92       	push	r13
    1e1a:	ef 92       	push	r14
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    1e24:	22 e0       	ldi	r18, 0x02	; 2
    1e26:	4c ea       	ldi	r20, 0xAC	; 172
    1e28:	56 e0       	ldi	r21, 0x06	; 6
    1e2a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
    1e2e:	c8 2f       	mov	r28, r24
    1e30:	88 23       	and	r24, r24
    1e32:	29 f1       	breq	.+74     	; 0x1e7e <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    1e34:	8c ea       	ldi	r24, 0xAC	; 172
    1e36:	96 e0       	ldi	r25, 0x06	; 6
    1e38:	6c 01       	movw	r12, r24
    1e3a:	20 e8       	ldi	r18, 0x80	; 128
    1e3c:	e2 2e       	mov	r14, r18
    1e3e:	8e 2d       	mov	r24, r14
    1e40:	b6 01       	movw	r22, r12
    1e42:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    1e46:	40 97       	sbiw	r24, 0x10	; 16
    1e48:	c9 f4       	brne	.+50     	; 0x1e7c <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    1e4a:	8e 2d       	mov	r24, r14
    1e4c:	b6 01       	movw	r22, r12
    1e4e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <EM_set_appeui>
    1e52:	c8 2f       	mov	r28, r24
    1e54:	81 11       	cpse	r24, r1
    1e56:	09 c0       	rjmp	.+18     	; 0x1e6a <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    1e58:	27 e0       	ldi	r18, 0x07	; 7
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4c ef       	ldi	r20, 0xFC	; 252
    1e5e:	51 e0       	ldi	r21, 0x01	; 1
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	c8 01       	movw	r24, r16
    1e64:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
		return false;
    1e68:	0a c0       	rjmp	.+20     	; 0x1e7e <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    1e6a:	28 e0       	ldi	r18, 0x08	; 8
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	43 e0       	ldi	r20, 0x03	; 3
    1e70:	52 e0       	ldi	r21, 0x02	; 2
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	c8 01       	movw	r24, r16
    1e76:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
		return true;
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    1e7c:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    1e7e:	8c 2f       	mov	r24, r28
    1e80:	cf 91       	pop	r28
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	ef 90       	pop	r14
    1e88:	df 90       	pop	r13
    1e8a:	cf 90       	pop	r12
    1e8c:	08 95       	ret

Disassembly of section .text.write_appkey:

00001e8e <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    1e8e:	cf 92       	push	r12
    1e90:	df 92       	push	r13
    1e92:	ef 92       	push	r14
    1e94:	0f 93       	push	r16
    1e96:	1f 93       	push	r17
    1e98:	cf 93       	push	r28
    1e9a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    1e9c:	22 e0       	ldi	r18, 0x02	; 2
    1e9e:	4c ea       	ldi	r20, 0xAC	; 172
    1ea0:	56 e0       	ldi	r21, 0x06	; 6
    1ea2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
    1ea6:	c8 2f       	mov	r28, r24
    1ea8:	88 23       	and	r24, r24
    1eaa:	29 f1       	breq	.+74     	; 0x1ef6 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    1eac:	8c ea       	ldi	r24, 0xAC	; 172
    1eae:	96 e0       	ldi	r25, 0x06	; 6
    1eb0:	6c 01       	movw	r12, r24
    1eb2:	20 e8       	ldi	r18, 0x80	; 128
    1eb4:	e2 2e       	mov	r14, r18
    1eb6:	8e 2d       	mov	r24, r14
    1eb8:	b6 01       	movw	r22, r12
    1eba:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    1ebe:	80 97       	sbiw	r24, 0x20	; 32
    1ec0:	c9 f4       	brne	.+50     	; 0x1ef4 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    1ec2:	8e 2d       	mov	r24, r14
    1ec4:	b6 01       	movw	r22, r12
    1ec6:	0e 94 6f 13 	call	0x26de	; 0x26de <EM_set_appkey>
    1eca:	c8 2f       	mov	r28, r24
    1ecc:	81 11       	cpse	r24, r1
    1ece:	09 c0       	rjmp	.+18     	; 0x1ee2 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    1ed0:	27 e0       	ldi	r18, 0x07	; 7
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4c ef       	ldi	r20, 0xFC	; 252
    1ed6:	51 e0       	ldi	r21, 0x01	; 1
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	c8 01       	movw	r24, r16
    1edc:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
		return false;
    1ee0:	0a c0       	rjmp	.+20     	; 0x1ef6 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    1ee2:	28 e0       	ldi	r18, 0x08	; 8
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	43 e0       	ldi	r20, 0x03	; 3
    1ee8:	52 e0       	ldi	r21, 0x02	; 2
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	c8 01       	movw	r24, r16
    1eee:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
		return true;
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    1ef4:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    1ef6:	8c 2f       	mov	r24, r28
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	cf 90       	pop	r12
    1f04:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00002326 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    232e:	22 e0       	ldi	r18, 0x02	; 2
    2330:	4c ea       	ldi	r20, 0xAC	; 172
    2332:	56 e0       	ldi	r21, 0x06	; 6
    2334:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
    2338:	c8 2f       	mov	r28, r24
    233a:	88 23       	and	r24, r24
    233c:	a9 f0       	breq	.+42     	; 0x2368 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    233e:	8c ea       	ldi	r24, 0xAC	; 172
    2340:	96 e0       	ldi	r25, 0x06	; 6
    2342:	0e 94 9e 10 	call	0x213c	; 0x213c <is_float>
    2346:	c8 2f       	mov	r28, r24
    2348:	88 23       	and	r24, r24
    234a:	71 f0       	breq	.+28     	; 0x2368 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    234c:	8c ea       	ldi	r24, 0xAC	; 172
    234e:	96 e0       	ldi	r25, 0x06	; 6
    2350:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <str2flaot>
	EM_set_ppmfactor(val);
    2354:	0e 94 43 16 	call	0x2c86	; 0x2c86 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    2358:	28 e0       	ldi	r18, 0x08	; 8
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	43 e0       	ldi	r20, 0x03	; 3
    235e:	52 e0       	ldi	r21, 0x02	; 2
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	c8 01       	movw	r24, r16
    2364:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
	return true;
}
    2368:	8c 2f       	mov	r24, r28
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	08 95       	ret

Disassembly of section .text.write_RRL:

00002372 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    2372:	0f 93       	push	r16
    2374:	1f 93       	push	r17
    2376:	cf 93       	push	r28
    2378:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    237a:	22 e0       	ldi	r18, 0x02	; 2
    237c:	4c ea       	ldi	r20, 0xAC	; 172
    237e:	56 e0       	ldi	r21, 0x06	; 6
    2380:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
    2384:	c8 2f       	mov	r28, r24
    2386:	88 23       	and	r24, r24
    2388:	a9 f0       	breq	.+42     	; 0x23b4 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    238a:	8c ea       	ldi	r24, 0xAC	; 172
    238c:	96 e0       	ldi	r25, 0x06	; 6
    238e:	0e 94 9e 10 	call	0x213c	; 0x213c <is_float>
    2392:	c8 2f       	mov	r28, r24
    2394:	88 23       	and	r24, r24
    2396:	71 f0       	breq	.+28     	; 0x23b4 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    2398:	8c ea       	ldi	r24, 0xAC	; 172
    239a:	96 e0       	ldi	r25, 0x06	; 6
    239c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <str2flaot>
	EM_set_RRL(val);
    23a0:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    23a4:	28 e0       	ldi	r18, 0x08	; 8
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	43 e0       	ldi	r20, 0x03	; 3
    23aa:	52 e0       	ldi	r21, 0x02	; 2
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	c8 01       	movw	r24, r16
    23b0:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
	return true;
}
    23b4:	8c 2f       	mov	r24, r28
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	08 95       	ret

Disassembly of section .text.write_VCC:

000023be <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    23c6:	22 e0       	ldi	r18, 0x02	; 2
    23c8:	4c ea       	ldi	r20, 0xAC	; 172
    23ca:	56 e0       	ldi	r21, 0x06	; 6
    23cc:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
    23d0:	c8 2f       	mov	r28, r24
    23d2:	88 23       	and	r24, r24
    23d4:	a9 f0       	breq	.+42     	; 0x2400 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    23d6:	8c ea       	ldi	r24, 0xAC	; 172
    23d8:	96 e0       	ldi	r25, 0x06	; 6
    23da:	0e 94 9e 10 	call	0x213c	; 0x213c <is_float>
    23de:	c8 2f       	mov	r28, r24
    23e0:	88 23       	and	r24, r24
    23e2:	71 f0       	breq	.+28     	; 0x2400 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    23e4:	8c ea       	ldi	r24, 0xAC	; 172
    23e6:	96 e0       	ldi	r25, 0x06	; 6
    23e8:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <str2flaot>
	EM_set_Vcc(val);
    23ec:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    23f0:	28 e0       	ldi	r18, 0x08	; 8
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	43 e0       	ldi	r20, 0x03	; 3
    23f6:	52 e0       	ldi	r21, 0x02	; 2
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	c8 01       	movw	r24, r16
    23fc:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
	return true;
}
    2400:	8c 2f       	mov	r24, r28
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	08 95       	ret

Disassembly of section .text.write_cols:

00001302 <write_cols>:

static bool write_cols(const char cmd[], char res[]){
    1302:	4f 92       	push	r4
    1304:	5f 92       	push	r5
    1306:	6f 92       	push	r6
    1308:	7f 92       	push	r7
    130a:	8f 92       	push	r8
    130c:	af 92       	push	r10
    130e:	bf 92       	push	r11
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	a3 97       	sbiw	r28, 0x23	; 35
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	3b 01       	movw	r6, r22
    1332:	88 2e       	mov	r8, r24
    1334:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    1336:	22 e0       	ldi	r18, 0x02	; 2
    1338:	4c ea       	ldi	r20, 0xAC	; 172
    133a:	56 e0       	ldi	r21, 0x06	; 6
    133c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
    1340:	18 2f       	mov	r17, r24
    1342:	88 23       	and	r24, r24
    1344:	09 f4       	brne	.+2      	; 0x1348 <write_cols+0x46>
    1346:	5d c0       	rjmp	.+186    	; 0x1402 <write_cols+0x100>
	index=atoi(arg);
    1348:	8c ea       	ldi	r24, 0xAC	; 172
    134a:	96 e0       	ldi	r25, 0x06	; 6
    134c:	6c 01       	movw	r12, r24
    134e:	20 e8       	ldi	r18, 0x80	; 128
    1350:	e2 2e       	mov	r14, r18
    1352:	8e 2d       	mov	r24, r14
    1354:	b6 01       	movw	r22, r12
    1356:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <atoi>
	if(index<1 || index>7) return false;
    135a:	0f ef       	ldi	r16, 0xFF	; 255
    135c:	08 0f       	add	r16, r24
    135e:	07 30       	cpi	r16, 0x07	; 7
    1360:	08 f0       	brcs	.+2      	; 0x1364 <write_cols+0x62>
    1362:	4a c0       	rjmp	.+148    	; 0x13f8 <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    1364:	23 e0       	ldi	r18, 0x03	; 3
    1366:	4c ea       	ldi	r20, 0xAC	; 172
    1368:	56 e0       	ldi	r21, 0x06	; 6
    136a:	88 2d       	mov	r24, r8
    136c:	b3 01       	movw	r22, r6
    136e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
    1372:	18 2f       	mov	r17, r24
    1374:	88 23       	and	r24, r24
    1376:	09 f4       	brne	.+2      	; 0x137a <write_cols+0x78>
    1378:	44 c0       	rjmp	.+136    	; 0x1402 <write_cols+0x100>
	samplings=atoi(arg);
    137a:	8e 2d       	mov	r24, r14
    137c:	b6 01       	movw	r22, r12
    137e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <atoi>
    1382:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    1384:	02 97       	sbiw	r24, 0x02	; 2
    1386:	8b 32       	cpi	r24, 0x2B	; 43
    1388:	91 40       	sbci	r25, 0x01	; 1
    138a:	c0 f5       	brcc	.+112    	; 0x13fc <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    138c:	24 e0       	ldi	r18, 0x04	; 4
    138e:	4c ea       	ldi	r20, 0xAC	; 172
    1390:	56 e0       	ldi	r21, 0x06	; 6
    1392:	88 2d       	mov	r24, r8
    1394:	b3 01       	movw	r22, r6
    1396:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
    139a:	18 2f       	mov	r17, r24
    139c:	88 23       	and	r24, r24
    139e:	89 f1       	breq	.+98     	; 0x1402 <write_cols+0x100>
	samplingInterval=atoi(arg);
    13a0:	8e 2d       	mov	r24, r14
    13a2:	b6 01       	movw	r22, r12
    13a4:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <atoi>
    13a8:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    13aa:	02 97       	sbiw	r24, 0x02	; 2
    13ac:	87 35       	cpi	r24, 0x57	; 87
    13ae:	92 40       	sbci	r25, 0x02	; 2
    13b0:	38 f5       	brcc	.+78     	; 0x1400 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    13b2:	63 e2       	ldi	r22, 0x23	; 35
    13b4:	ce 01       	movw	r24, r28
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	7c 01       	movw	r14, r24
    13ba:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <EM_get_collections>
	
	cols[index].samplings=samplings;
    13be:	80 2f       	mov	r24, r16
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	fc 01       	movw	r30, r24
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	e8 0f       	add	r30, r24
    13ce:	f9 1f       	adc	r31, r25
    13d0:	ee 0d       	add	r30, r14
    13d2:	ff 1d       	adc	r31, r15
    13d4:	51 82       	std	Z+1, r5	; 0x01
    13d6:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    13d8:	d3 82       	std	Z+3, r13	; 0x03
    13da:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    13dc:	b7 01       	movw	r22, r14
    13de:	80 e8       	ldi	r24, 0x80	; 128
    13e0:	43 e2       	ldi	r20, 0x23	; 35
    13e2:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    13e6:	28 e0       	ldi	r18, 0x08	; 8
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	43 e0       	ldi	r20, 0x03	; 3
    13ec:	52 e0       	ldi	r21, 0x02	; 2
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	c5 01       	movw	r24, r10
    13f2:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
	return true;	
    13f6:	05 c0       	rjmp	.+10     	; 0x1402 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    13f8:	10 e0       	ldi	r17, 0x00	; 0
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    1400:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    1402:	81 2f       	mov	r24, r17
    1404:	a3 96       	adiw	r28, 0x23	; 35
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	bf 90       	pop	r11
    1422:	af 90       	pop	r10
    1424:	8f 90       	pop	r8
    1426:	7f 90       	pop	r7
    1428:	6f 90       	pop	r6
    142a:	5f 90       	pop	r5
    142c:	4f 90       	pop	r4
    142e:	08 95       	ret

Disassembly of section .text.write_reset:

000017a4 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	a3 97       	sbiw	r28, 0x23	; 35
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    17be:	6b e0       	ldi	r22, 0x0B	; 11
    17c0:	72 e0       	ldi	r23, 0x02	; 2
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	0e 94 35 13 	call	0x266a	; 0x266a <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    17c8:	6b e0       	ldi	r22, 0x0B	; 11
    17ca:	72 e0       	ldi	r23, 0x02	; 2
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	0e 94 52 13 	call	0x26a4	; 0x26a4 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    17d2:	6c e1       	ldi	r22, 0x1C	; 28
    17d4:	72 e0       	ldi	r23, 0x02	; 2
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	0e 94 6f 13 	call	0x26de	; 0x26de <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	80 e8       	ldi	r24, 0x80	; 128
    17e2:	9f e3       	ldi	r25, 0x3F	; 63
    17e4:	0e 94 43 16 	call	0x2c86	; 0x2c86 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	70 e4       	ldi	r23, 0x40	; 64
    17ec:	8c e1       	ldi	r24, 0x1C	; 28
    17ee:	95 e4       	ldi	r25, 0x45	; 69
    17f0:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <EM_set_RRL>
	EM_set_Vcc(5.00);
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	80 ea       	ldi	r24, 0xA0	; 160
    17fa:	90 e4       	ldi	r25, 0x40	; 64
    17fc:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <EM_set_Vcc>
	
	for (uint8_t i=0; i<7; i++)
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	1a c0       	rjmp	.+52     	; 0x1838 <write_reset+0x94>
	{
		cols[i].type=T_INT16;
    1804:	e8 2f       	mov	r30, r24
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	9f 01       	movw	r18, r30
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	21 e0       	ldi	r18, 0x01	; 1
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	2c 0f       	add	r18, r28
    181c:	3d 1f       	adc	r19, r29
    181e:	e2 0f       	add	r30, r18
    1820:	f3 1f       	adc	r31, r19
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    1826:	22 e0       	ldi	r18, 0x02	; 2
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	31 83       	std	Z+1, r19	; 0x01
    182c:	20 83       	st	Z, r18
		cols[i].samplingInterval=10;
    182e:	2a e0       	ldi	r18, 0x0A	; 10
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	33 83       	std	Z+3, r19	; 0x03
    1834:	22 83       	std	Z+2, r18	; 0x02
	EM_set_appkey("00000000000000000000000000000000");
	EM_set_ppmfactor(1.00);
	EM_set_RRL(2500.00);
	EM_set_Vcc(5.00);
	
	for (uint8_t i=0; i<7; i++)
    1836:	8f 5f       	subi	r24, 0xFF	; 255
    1838:	87 30       	cpi	r24, 0x07	; 7
    183a:	20 f3       	brcs	.-56     	; 0x1804 <write_reset+0x60>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=10;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    183c:	be 01       	movw	r22, r28
    183e:	6f 5f       	subi	r22, 0xFF	; 255
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	80 e8       	ldi	r24, 0x80	; 128
    1844:	43 e2       	ldi	r20, 0x23	; 35
    1846:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    184a:	23 e1       	ldi	r18, 0x13	; 19
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4d e3       	ldi	r20, 0x3D	; 61
    1850:	52 e0       	ldi	r21, 0x02	; 2
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	c8 01       	movw	r24, r16
    1856:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
	return true;
}
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	a3 96       	adiw	r28, 0x23	; 35
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	08 95       	ret

Disassembly of section .text.handle_read:

00000dfa <handle_read>:
static bool write_RRL(const char cmd[], char res[]);
static bool write_VCC(const char cmd[], char res[]);
static bool write_cols(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);

bool handle_read(const char cmd[], char res[]){
 dfa:	cf 92       	push	r12
 dfc:	df 92       	push	r13
 dfe:	ef 92       	push	r14
 e00:	ff 92       	push	r15
 e02:	0f 93       	push	r16
 e04:	1f 93       	push	r17
 e06:	cf 93       	push	r28
 e08:	df 93       	push	r29
 e0a:	cd b7       	in	r28, 0x3d	; 61
 e0c:	de b7       	in	r29, 0x3e	; 62
 e0e:	68 97       	sbiw	r28, 0x18	; 24
 e10:	0f b6       	in	r0, 0x3f	; 63
 e12:	f8 94       	cli
 e14:	de bf       	out	0x3e, r29	; 62
 e16:	0f be       	out	0x3f, r0	; 63
 e18:	cd bf       	out	0x3d, r28	; 61
 e1a:	6b 01       	movw	r12, r22
 e1c:	e8 2e       	mov	r14, r24
 e1e:	f4 2e       	mov	r15, r20
 e20:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
 e22:	21 e0       	ldi	r18, 0x01	; 1
 e24:	ae 01       	movw	r20, r28
 e26:	4f 5f       	subi	r20, 0xFF	; 255
 e28:	5f 4f       	sbci	r21, 0xFF	; 255
 e2a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
 e2e:	18 2f       	mov	r17, r24
 e30:	88 23       	and	r24, r24
 e32:	09 f4       	brne	.+2      	; 0xe36 <handle_read+0x3c>
 e34:	be c0       	rjmp	.+380    	; 0xfb2 <handle_read+0x1b8>
 e36:	8e 2d       	mov	r24, r14
 e38:	b6 01       	movw	r22, r12
 e3a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <count_parameters>
 e3e:	82 30       	cpi	r24, 0x02	; 2
 e40:	09 f4       	brne	.+2      	; 0xe44 <handle_read+0x4a>
 e42:	b6 c0       	rjmp	.+364    	; 0xfb0 <handle_read+0x1b6>
	
	if (strcmp(par, RW_DEVEUI)==0)
 e44:	ce 01       	movw	r24, r28
 e46:	01 96       	adiw	r24, 0x01	; 1
 e48:	6c 01       	movw	r12, r24
 e4a:	20 e8       	ldi	r18, 0x80	; 128
 e4c:	e2 2e       	mov	r14, r18
 e4e:	20 e5       	ldi	r18, 0x50	; 80
 e50:	32 e0       	ldi	r19, 0x02	; 2
 e52:	40 e0       	ldi	r20, 0x00	; 0
 e54:	8e 2d       	mov	r24, r14
 e56:	b6 01       	movw	r22, r12
 e58:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
 e5c:	89 2b       	or	r24, r25
 e5e:	29 f4       	brne	.+10     	; 0xe6a <handle_read+0x70>
	{
		EM_get_deveui(res);
 e60:	8f 2d       	mov	r24, r15
 e62:	90 2f       	mov	r25, r16
 e64:	0e 94 2c 14 	call	0x2858	; 0x2858 <EM_get_deveui>
 e68:	a4 c0       	rjmp	.+328    	; 0xfb2 <handle_read+0x1b8>
	}
	else if (strcmp(par, RW_APPEUI)==0)
 e6a:	27 e5       	ldi	r18, 0x57	; 87
 e6c:	32 e0       	ldi	r19, 0x02	; 2
 e6e:	40 e0       	ldi	r20, 0x00	; 0
 e70:	8e 2d       	mov	r24, r14
 e72:	b6 01       	movw	r22, r12
 e74:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
 e78:	89 2b       	or	r24, r25
 e7a:	29 f4       	brne	.+10     	; 0xe86 <handle_read+0x8c>
	{
		EM_get_appeui(res);
 e7c:	8f 2d       	mov	r24, r15
 e7e:	90 2f       	mov	r25, r16
 e80:	0e 94 44 14 	call	0x2888	; 0x2888 <EM_get_appeui>
 e84:	96 c0       	rjmp	.+300    	; 0xfb2 <handle_read+0x1b8>
	}
	else if (strcmp(par, RW_APPKEY)==0)
 e86:	2e e5       	ldi	r18, 0x5E	; 94
 e88:	32 e0       	ldi	r19, 0x02	; 2
 e8a:	40 e0       	ldi	r20, 0x00	; 0
 e8c:	8e 2d       	mov	r24, r14
 e8e:	b6 01       	movw	r22, r12
 e90:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
 e94:	89 2b       	or	r24, r25
 e96:	29 f4       	brne	.+10     	; 0xea2 <handle_read+0xa8>
	{
		EM_get_appkey(res);
 e98:	8f 2d       	mov	r24, r15
 e9a:	90 2f       	mov	r25, r16
 e9c:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <EM_get_appkey>
 ea0:	88 c0       	rjmp	.+272    	; 0xfb2 <handle_read+0x1b8>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
 ea2:	25 e6       	ldi	r18, 0x65	; 101
 ea4:	32 e0       	ldi	r19, 0x02	; 2
 ea6:	40 e0       	ldi	r20, 0x00	; 0
 ea8:	8e 2d       	mov	r24, r14
 eaa:	b6 01       	movw	r22, r12
 eac:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
 eb0:	89 2b       	or	r24, r25
 eb2:	e1 f4       	brne	.+56     	; 0xeec <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
 eb4:	ce 01       	movw	r24, r28
 eb6:	45 96       	adiw	r24, 0x15	; 21
 eb8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
 ebc:	88 8d       	ldd	r24, Y+24	; 0x18
 ebe:	8f 93       	push	r24
 ec0:	8f 89       	ldd	r24, Y+23	; 0x17
 ec2:	8f 93       	push	r24
 ec4:	8e 89       	ldd	r24, Y+22	; 0x16
 ec6:	8f 93       	push	r24
 ec8:	8d 89       	ldd	r24, Y+21	; 0x15
 eca:	8f 93       	push	r24
 ecc:	8a e6       	ldi	r24, 0x6A	; 106
 ece:	92 e0       	ldi	r25, 0x02	; 2
 ed0:	a0 e0       	ldi	r26, 0x00	; 0
 ed2:	af 93       	push	r26
 ed4:	9f 93       	push	r25
 ed6:	8f 93       	push	r24
 ed8:	0f 93       	push	r16
 eda:	ff 92       	push	r15
 edc:	0e 94 4f 12 	call	0x249e	; 0x249e <sprintf>
 ee0:	0f b6       	in	r0, 0x3f	; 63
 ee2:	f8 94       	cli
 ee4:	de bf       	out	0x3e, r29	; 62
 ee6:	0f be       	out	0x3f, r0	; 63
 ee8:	cd bf       	out	0x3d, r28	; 61
 eea:	63 c0       	rjmp	.+198    	; 0xfb2 <handle_read+0x1b8>
	}
	else if(strcmp(par, RW_RRL)==0)
 eec:	2f e6       	ldi	r18, 0x6F	; 111
 eee:	32 e0       	ldi	r19, 0x02	; 2
 ef0:	40 e0       	ldi	r20, 0x00	; 0
 ef2:	8e 2d       	mov	r24, r14
 ef4:	b6 01       	movw	r22, r12
 ef6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
 efa:	89 2b       	or	r24, r25
 efc:	e1 f4       	brne	.+56     	; 0xf36 <handle_read+0x13c>
	{
		EM_get_RRL(&val);
 efe:	ce 01       	movw	r24, r28
 f00:	45 96       	adiw	r24, 0x15	; 21
 f02:	0e 94 6e 15 	call	0x2adc	; 0x2adc <EM_get_RRL>
		sprintf(res, "%.2f", val);
 f06:	88 8d       	ldd	r24, Y+24	; 0x18
 f08:	8f 93       	push	r24
 f0a:	8f 89       	ldd	r24, Y+23	; 0x17
 f0c:	8f 93       	push	r24
 f0e:	8e 89       	ldd	r24, Y+22	; 0x16
 f10:	8f 93       	push	r24
 f12:	8d 89       	ldd	r24, Y+21	; 0x15
 f14:	8f 93       	push	r24
 f16:	8a e6       	ldi	r24, 0x6A	; 106
 f18:	92 e0       	ldi	r25, 0x02	; 2
 f1a:	a0 e0       	ldi	r26, 0x00	; 0
 f1c:	af 93       	push	r26
 f1e:	9f 93       	push	r25
 f20:	8f 93       	push	r24
 f22:	0f 93       	push	r16
 f24:	ff 92       	push	r15
 f26:	0e 94 4f 12 	call	0x249e	; 0x249e <sprintf>
 f2a:	0f b6       	in	r0, 0x3f	; 63
 f2c:	f8 94       	cli
 f2e:	de bf       	out	0x3e, r29	; 62
 f30:	0f be       	out	0x3f, r0	; 63
 f32:	cd bf       	out	0x3d, r28	; 61
 f34:	3e c0       	rjmp	.+124    	; 0xfb2 <handle_read+0x1b8>
	}
	else if(strcmp(par, RW_VCC)==0)
 f36:	24 e7       	ldi	r18, 0x74	; 116
 f38:	32 e0       	ldi	r19, 0x02	; 2
 f3a:	40 e0       	ldi	r20, 0x00	; 0
 f3c:	8e 2d       	mov	r24, r14
 f3e:	b6 01       	movw	r22, r12
 f40:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
 f44:	89 2b       	or	r24, r25
 f46:	e1 f4       	brne	.+56     	; 0xf80 <handle_read+0x186>
	{
		EM_get_Vcc(&val);
 f48:	ce 01       	movw	r24, r28
 f4a:	45 96       	adiw	r24, 0x15	; 21
 f4c:	0e 94 7d 15 	call	0x2afa	; 0x2afa <EM_get_Vcc>
		sprintf(res, "%.2f", val);
 f50:	88 8d       	ldd	r24, Y+24	; 0x18
 f52:	8f 93       	push	r24
 f54:	8f 89       	ldd	r24, Y+23	; 0x17
 f56:	8f 93       	push	r24
 f58:	8e 89       	ldd	r24, Y+22	; 0x16
 f5a:	8f 93       	push	r24
 f5c:	8d 89       	ldd	r24, Y+21	; 0x15
 f5e:	8f 93       	push	r24
 f60:	8a e6       	ldi	r24, 0x6A	; 106
 f62:	92 e0       	ldi	r25, 0x02	; 2
 f64:	a0 e0       	ldi	r26, 0x00	; 0
 f66:	af 93       	push	r26
 f68:	9f 93       	push	r25
 f6a:	8f 93       	push	r24
 f6c:	0f 93       	push	r16
 f6e:	ff 92       	push	r15
 f70:	0e 94 4f 12 	call	0x249e	; 0x249e <sprintf>
 f74:	0f b6       	in	r0, 0x3f	; 63
 f76:	f8 94       	cli
 f78:	de bf       	out	0x3e, r29	; 62
 f7a:	0f be       	out	0x3f, r0	; 63
 f7c:	cd bf       	out	0x3d, r28	; 61
 f7e:	19 c0       	rjmp	.+50     	; 0xfb2 <handle_read+0x1b8>
	}
	else if(strcmp(par, RW_COLS)==0)
 f80:	29 e7       	ldi	r18, 0x79	; 121
 f82:	32 e0       	ldi	r19, 0x02	; 2
 f84:	40 e0       	ldi	r20, 0x00	; 0
 f86:	8e 2d       	mov	r24, r14
 f88:	b6 01       	movw	r22, r12
 f8a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
 f8e:	89 2b       	or	r24, r25
 f90:	29 f4       	brne	.+10     	; 0xf9c <handle_read+0x1a2>
	{
		read_cols(res);
 f92:	8f 2d       	mov	r24, r15
 f94:	90 2f       	mov	r25, r16
 f96:	0e 94 a0 0c 	call	0x1940	; 0x1940 <read_cols>
 f9a:	0b c0       	rjmp	.+22     	; 0xfb2 <handle_read+0x1b8>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
 f9c:	26 e1       	ldi	r18, 0x16	; 22
 f9e:	30 e0       	ldi	r19, 0x00	; 0
 fa0:	4e e7       	ldi	r20, 0x7E	; 126
 fa2:	52 e0       	ldi	r21, 0x02	; 2
 fa4:	60 e0       	ldi	r22, 0x00	; 0
 fa6:	8f 2d       	mov	r24, r15
 fa8:	90 2f       	mov	r25, r16
 faa:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
 fae:	01 c0       	rjmp	.+2      	; 0xfb2 <handle_read+0x1b8>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
 fb0:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
 fb2:	81 2f       	mov	r24, r17
 fb4:	68 96       	adiw	r28, 0x18	; 24
 fb6:	0f b6       	in	r0, 0x3f	; 63
 fb8:	f8 94       	cli
 fba:	de bf       	out	0x3e, r29	; 62
 fbc:	0f be       	out	0x3f, r0	; 63
 fbe:	cd bf       	out	0x3d, r28	; 61
 fc0:	df 91       	pop	r29
 fc2:	cf 91       	pop	r28
 fc4:	1f 91       	pop	r17
 fc6:	0f 91       	pop	r16
 fc8:	ff 90       	pop	r15
 fca:	ef 90       	pop	r14
 fcc:	df 90       	pop	r13
 fce:	cf 90       	pop	r12
 fd0:	08 95       	ret

Disassembly of section .text.handle_write:

00001182 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1182:	6f 92       	push	r6
    1184:	7f 92       	push	r7
    1186:	8f 92       	push	r8
    1188:	af 92       	push	r10
    118a:	bf 92       	push	r11
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	64 97       	sbiw	r28, 0x14	; 20
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	3b 01       	movw	r6, r22
    11aa:	88 2e       	mov	r8, r24
    11ac:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    11ae:	21 e0       	ldi	r18, 0x01	; 1
    11b0:	ae 01       	movw	r20, r28
    11b2:	4f 5f       	subi	r20, 0xFF	; 255
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_parameter>
    11ba:	18 2f       	mov	r17, r24
    11bc:	88 23       	and	r24, r24
    11be:	09 f4       	brne	.+2      	; 0x11c2 <handle_write+0x40>
    11c0:	8d c0       	rjmp	.+282    	; 0x12dc <handle_write+0x15a>
	
	if (strcmp(par, RW_DEVEUI)==0)
    11c2:	ce 01       	movw	r24, r28
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	6c 01       	movw	r12, r24
    11c8:	20 e8       	ldi	r18, 0x80	; 128
    11ca:	e2 2e       	mov	r14, r18
    11cc:	20 e5       	ldi	r18, 0x50	; 80
    11ce:	32 e0       	ldi	r19, 0x02	; 2
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	8e 2d       	mov	r24, r14
    11d4:	b6 01       	movw	r22, r12
    11d6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
    11da:	89 2b       	or	r24, r25
    11dc:	39 f4       	brne	.+14     	; 0x11ec <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    11de:	a5 01       	movw	r20, r10
    11e0:	88 2d       	mov	r24, r8
    11e2:	b3 01       	movw	r22, r6
    11e4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <write_deveui>
    11e8:	18 2f       	mov	r17, r24
    11ea:	78 c0       	rjmp	.+240    	; 0x12dc <handle_write+0x15a>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    11ec:	27 e5       	ldi	r18, 0x57	; 87
    11ee:	32 e0       	ldi	r19, 0x02	; 2
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	8e 2d       	mov	r24, r14
    11f4:	b6 01       	movw	r22, r12
    11f6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
    11fa:	89 2b       	or	r24, r25
    11fc:	39 f4       	brne	.+14     	; 0x120c <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    11fe:	a5 01       	movw	r20, r10
    1200:	88 2d       	mov	r24, r8
    1202:	b3 01       	movw	r22, r6
    1204:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <write_appeui>
    1208:	18 2f       	mov	r17, r24
    120a:	68 c0       	rjmp	.+208    	; 0x12dc <handle_write+0x15a>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    120c:	2e e5       	ldi	r18, 0x5E	; 94
    120e:	32 e0       	ldi	r19, 0x02	; 2
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	8e 2d       	mov	r24, r14
    1214:	b6 01       	movw	r22, r12
    1216:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
    121a:	89 2b       	or	r24, r25
    121c:	39 f4       	brne	.+14     	; 0x122c <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    121e:	a5 01       	movw	r20, r10
    1220:	88 2d       	mov	r24, r8
    1222:	b3 01       	movw	r22, r6
    1224:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <write_appkey>
    1228:	18 2f       	mov	r17, r24
    122a:	58 c0       	rjmp	.+176    	; 0x12dc <handle_write+0x15a>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    122c:	25 e6       	ldi	r18, 0x65	; 101
    122e:	32 e0       	ldi	r19, 0x02	; 2
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	8e 2d       	mov	r24, r14
    1234:	b6 01       	movw	r22, r12
    1236:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
    123a:	89 2b       	or	r24, r25
    123c:	39 f4       	brne	.+14     	; 0x124c <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    123e:	a5 01       	movw	r20, r10
    1240:	88 2d       	mov	r24, r8
    1242:	b3 01       	movw	r22, r6
    1244:	0e 94 93 11 	call	0x2326	; 0x2326 <write_PPM_factor>
    1248:	18 2f       	mov	r17, r24
    124a:	48 c0       	rjmp	.+144    	; 0x12dc <handle_write+0x15a>
	}
	else if(strcmp(par, RW_RRL)==0)
    124c:	2f e6       	ldi	r18, 0x6F	; 111
    124e:	32 e0       	ldi	r19, 0x02	; 2
    1250:	40 e0       	ldi	r20, 0x00	; 0
    1252:	8e 2d       	mov	r24, r14
    1254:	b6 01       	movw	r22, r12
    1256:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
    125a:	89 2b       	or	r24, r25
    125c:	39 f4       	brne	.+14     	; 0x126c <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    125e:	a5 01       	movw	r20, r10
    1260:	88 2d       	mov	r24, r8
    1262:	b3 01       	movw	r22, r6
    1264:	0e 94 b9 11 	call	0x2372	; 0x2372 <write_RRL>
    1268:	18 2f       	mov	r17, r24
    126a:	38 c0       	rjmp	.+112    	; 0x12dc <handle_write+0x15a>
	}
	else if(strcmp(par, RW_VCC)==0)
    126c:	24 e7       	ldi	r18, 0x74	; 116
    126e:	32 e0       	ldi	r19, 0x02	; 2
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	8e 2d       	mov	r24, r14
    1274:	b6 01       	movw	r22, r12
    1276:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
    127a:	89 2b       	or	r24, r25
    127c:	39 f4       	brne	.+14     	; 0x128c <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    127e:	a5 01       	movw	r20, r10
    1280:	88 2d       	mov	r24, r8
    1282:	b3 01       	movw	r22, r6
    1284:	0e 94 df 11 	call	0x23be	; 0x23be <write_VCC>
    1288:	18 2f       	mov	r17, r24
    128a:	28 c0       	rjmp	.+80     	; 0x12dc <handle_write+0x15a>
	}
	else if(strcmp(par, RW_COLS)==0)
    128c:	29 e7       	ldi	r18, 0x79	; 121
    128e:	32 e0       	ldi	r19, 0x02	; 2
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	8e 2d       	mov	r24, r14
    1294:	b6 01       	movw	r22, r12
    1296:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
    129a:	89 2b       	or	r24, r25
    129c:	39 f4       	brne	.+14     	; 0x12ac <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    129e:	a5 01       	movw	r20, r10
    12a0:	88 2d       	mov	r24, r8
    12a2:	b3 01       	movw	r22, r6
    12a4:	0e 94 81 09 	call	0x1302	; 0x1302 <write_cols>
    12a8:	18 2f       	mov	r17, r24
    12aa:	18 c0       	rjmp	.+48     	; 0x12dc <handle_write+0x15a>
	}
	else if(strcmp(par, RW_RESET)==0)
    12ac:	24 e9       	ldi	r18, 0x94	; 148
    12ae:	32 e0       	ldi	r19, 0x02	; 2
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	8e 2d       	mov	r24, r14
    12b4:	b6 01       	movw	r22, r12
    12b6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strcmp>
    12ba:	89 2b       	or	r24, r25
    12bc:	39 f4       	brne	.+14     	; 0x12cc <handle_write+0x14a>
	{
		return write_reset(cmd, res);
    12be:	a5 01       	movw	r20, r10
    12c0:	88 2d       	mov	r24, r8
    12c2:	b3 01       	movw	r22, r6
    12c4:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <write_reset>
    12c8:	18 2f       	mov	r17, r24
    12ca:	08 c0       	rjmp	.+16     	; 0x12dc <handle_write+0x15a>
	}else{
		strcpy(res, RW_S_NOT_EXIST);
    12cc:	26 e1       	ldi	r18, 0x16	; 22
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4e e7       	ldi	r20, 0x7E	; 126
    12d2:	52 e0       	ldi	r21, 0x02	; 2
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	c5 01       	movw	r24, r10
    12d8:	0e 94 13 14 	call	0x2826	; 0x2826 <memcpy>
		return true;
	}
	
}
    12dc:	81 2f       	mov	r24, r17
    12de:	64 96       	adiw	r28, 0x14	; 20
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	bf 90       	pop	r11
    12f8:	af 90       	pop	r10
    12fa:	8f 90       	pop	r8
    12fc:	7f 90       	pop	r7
    12fe:	6f 90       	pop	r6
    1300:	08 95       	ret

Disassembly of section .text.count_parameters:

000021ea <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    21ea:	6f 92       	push	r6
    21ec:	7f 92       	push	r7
    21ee:	8f 92       	push	r8
    21f0:	cf 92       	push	r12
    21f2:	df 92       	push	r13
    21f4:	ef 92       	push	r14
    21f6:	3b 01       	movw	r6, r22
    21f8:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    21fa:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    21fe:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    2204:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    2206:	10 c0       	rjmp	.+32     	; 0x2228 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    2208:	e8 2c       	mov	r14, r8
    220a:	63 01       	movw	r12, r6
    220c:	c2 0e       	add	r12, r18
    220e:	d3 1e       	adc	r13, r19
    2210:	e1 1c       	adc	r14, r1
    2212:	37 fd       	sbrc	r19, 7
    2214:	ea 94       	dec	r14
    2216:	f6 01       	movw	r30, r12
    2218:	94 91       	lpm	r25, Z
    221a:	e7 fc       	sbrc	r14, 7
    221c:	90 81       	ld	r25, Z
    221e:	90 32       	cpi	r25, 0x20	; 32
    2220:	09 f4       	brne	.+2      	; 0x2224 <count_parameters+0x3a>
			cnt++;
    2222:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2224:	2f 5f       	subi	r18, 0xFF	; 255
    2226:	3f 4f       	sbci	r19, 0xFF	; 255
    2228:	26 17       	cp	r18, r22
    222a:	37 07       	cpc	r19, r23
    222c:	68 f3       	brcs	.-38     	; 0x2208 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    222e:	ef 90       	pop	r14
    2230:	df 90       	pop	r13
    2232:	cf 90       	pop	r12
    2234:	8f 90       	pop	r8
    2236:	7f 90       	pop	r7
    2238:	6f 90       	pop	r6
    223a:	08 95       	ret

Disassembly of section .text.par_index:

00002062 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    2062:	cf 92       	push	r12
    2064:	df 92       	push	r13
    2066:	ef 92       	push	r14
    2068:	0f 93       	push	r16
    206a:	1f 93       	push	r17
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2070:	44 23       	and	r20, r20
    2072:	29 f1       	breq	.+74     	; 0x20be <par_index+0x5c>
    2074:	04 2f       	mov	r16, r20
    2076:	6b 01       	movw	r12, r22
    2078:	e8 2e       	mov	r14, r24
    207a:	c0 e0       	ldi	r28, 0x00	; 0
    207c:	d0 e0       	ldi	r29, 0x00	; 0
    207e:	10 e0       	ldi	r17, 0x00	; 0
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    2082:	ae 2d       	mov	r26, r14
    2084:	c6 01       	movw	r24, r12
    2086:	8c 0f       	add	r24, r28
    2088:	9d 1f       	adc	r25, r29
    208a:	a1 1d       	adc	r26, r1
    208c:	d7 fd       	sbrc	r29, 7
    208e:	aa 95       	dec	r26
    2090:	fc 01       	movw	r30, r24
    2092:	84 91       	lpm	r24, Z
    2094:	a7 fd       	sbrc	r26, 7
    2096:	80 81       	ld	r24, Z
    2098:	80 32       	cpi	r24, 0x20	; 32
    209a:	31 f4       	brne	.+12     	; 0x20a8 <par_index+0x46>
			cnt++;
    209c:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    209e:	01 13       	cpse	r16, r17
    20a0:	03 c0       	rjmp	.+6      	; 0x20a8 <par_index+0x46>
				return i+1;
    20a2:	ce 01       	movw	r24, r28
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	0d c0       	rjmp	.+26     	; 0x20c2 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    20a8:	21 96       	adiw	r28, 0x01	; 1
    20aa:	8e 2d       	mov	r24, r14
    20ac:	b6 01       	movw	r22, r12
    20ae:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    20b2:	c8 17       	cp	r28, r24
    20b4:	d9 07       	cpc	r29, r25
    20b6:	28 f3       	brcs	.-54     	; 0x2082 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ef 90       	pop	r14
    20cc:	df 90       	pop	r13
    20ce:	cf 90       	pop	r12
    20d0:	08 95       	ret

Disassembly of section .text.get_parameter:

00001c04 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    1c04:	8f 92       	push	r8
    1c06:	9f 92       	push	r9
    1c08:	af 92       	push	r10
    1c0a:	cf 92       	push	r12
    1c0c:	df 92       	push	r13
    1c0e:	ef 92       	push	r14
    1c10:	ff 92       	push	r15
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	6b 01       	movw	r12, r22
    1c1c:	e8 2e       	mov	r14, r24
    1c1e:	ea 01       	movw	r28, r20
    1c20:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    1c22:	0e 94 f5 10 	call	0x21ea	; 0x21ea <count_parameters>
	if(pars<parNo) return false;
    1c26:	8f 15       	cp	r24, r15
    1c28:	58 f1       	brcs	.+86     	; 0x1c80 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    1c2a:	8e 2d       	mov	r24, r14
    1c2c:	b6 01       	movw	r22, r12
    1c2e:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    1c32:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    1c34:	4f 2d       	mov	r20, r15
    1c36:	8e 2d       	mov	r24, r14
    1c38:	b6 01       	movw	r22, r12
    1c3a:	0e 94 31 10 	call	0x2062	; 0x2062 <par_index>
	uint8_t parLen=0;
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    1c40:	15 c0       	rjmp	.+42     	; 0x1c6c <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    1c42:	46 01       	movw	r8, r12
    1c44:	ae 2c       	mov	r10, r14
    1c46:	82 0e       	add	r8, r18
    1c48:	93 1e       	adc	r9, r19
    1c4a:	a1 1c       	adc	r10, r1
    1c4c:	37 fd       	sbrc	r19, 7
    1c4e:	aa 94       	dec	r10
    1c50:	4a 2d       	mov	r20, r10
    1c52:	94 01       	movw	r18, r8
    1c54:	f4 01       	movw	r30, r8
    1c56:	24 91       	lpm	r18, Z
    1c58:	47 fd       	sbrc	r20, 7
    1c5a:	20 81       	ld	r18, Z
    1c5c:	20 32       	cpi	r18, 0x20	; 32
    1c5e:	59 f0       	breq	.+22     	; 0x1c76 <get_parameter+0x72>
		par[parLen++]=src[i];
    1c60:	fe 01       	movw	r30, r28
    1c62:	e9 0f       	add	r30, r25
    1c64:	f1 1d       	adc	r31, r1
    1c66:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    1c68:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    1c6a:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	20 17       	cp	r18, r16
    1c72:	31 07       	cpc	r19, r17
    1c74:	30 f3       	brcs	.-52     	; 0x1c42 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    1c76:	c9 0f       	add	r28, r25
    1c78:	d1 1d       	adc	r29, r1
    1c7a:	18 82       	st	Y, r1
	
	return true;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    1c80:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	df 90       	pop	r13
    1c90:	cf 90       	pop	r12
    1c92:	af 90       	pop	r10
    1c94:	9f 90       	pop	r9
    1c96:	8f 90       	pop	r8
    1c98:	08 95       	ret

Disassembly of section .text.get_decimal:

00001ab8 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    1aca:	10 e0       	ldi	r17, 0x00	; 0
    1acc:	08 c0       	rjmp	.+16     	; 0x1ade <get_decimal+0x26>
	{
		if(str[i]=='.'){
    1ace:	cc 0d       	add	r28, r12
    1ad0:	dd 1d       	adc	r29, r13
    1ad2:	88 81       	ld	r24, Y
    1ad4:	8e 32       	cpi	r24, 0x2E	; 46
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <get_decimal+0x24>
			index=i+1;
    1ad8:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    1ada:	0c c0       	rjmp	.+24     	; 0x1af4 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    1adc:	1f 5f       	subi	r17, 0xFF	; 255
    1ade:	c1 2f       	mov	r28, r17
    1ae0:	d0 e0       	ldi	r29, 0x00	; 0
    1ae2:	b6 01       	movw	r22, r12
    1ae4:	80 e8       	ldi	r24, 0x80	; 128
    1ae6:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	c8 17       	cp	r28, r24
    1aee:	d9 07       	cpc	r29, r25
    1af0:	70 f3       	brcs	.-36     	; 0x1ace <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    1af2:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    1af4:	11 23       	and	r17, r17
    1af6:	71 f1       	breq	.+92     	; 0x1b54 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    1af8:	c1 0e       	add	r12, r17
    1afa:	d1 1c       	adc	r13, r1
    1afc:	80 e8       	ldi	r24, 0x80	; 128
    1afe:	e8 2e       	mov	r14, r24
    1b00:	8e 2d       	mov	r24, r14
    1b02:	b6 01       	movw	r22, r12
    1b04:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    1b08:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    1b0a:	8e 2d       	mov	r24, r14
    1b0c:	b6 01       	movw	r22, r12
    1b0e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <atoi>
    1b12:	8c 01       	movw	r16, r24
	float divisor=1;
    1b14:	0f 2e       	mov	r0, r31
    1b16:	c1 2c       	mov	r12, r1
    1b18:	d1 2c       	mov	r13, r1
    1b1a:	f0 e8       	ldi	r31, 0x80	; 128
    1b1c:	ef 2e       	mov	r14, r31
    1b1e:	ff e3       	ldi	r31, 0x3F	; 63
    1b20:	ff 2e       	mov	r15, r31
    1b22:	f0 2d       	mov	r31, r0
	
	while(len>0){
    1b24:	0b c0       	rjmp	.+22     	; 0x1b3c <get_decimal+0x84>
		divisor*=10;
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e2       	ldi	r20, 0x20	; 32
    1b2c:	51 e4       	ldi	r21, 0x41	; 65
    1b2e:	c7 01       	movw	r24, r14
    1b30:	b6 01       	movw	r22, r12
    1b32:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__mulsf3>
    1b36:	6b 01       	movw	r12, r22
    1b38:	7c 01       	movw	r14, r24
		len--;
    1b3a:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    1b3c:	c1 11       	cpse	r28, r1
    1b3e:	f3 cf       	rjmp	.-26     	; 0x1b26 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    1b40:	b8 01       	movw	r22, r16
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__floatunsisf>
    1b4a:	a7 01       	movw	r20, r14
    1b4c:	96 01       	movw	r18, r12
    1b4e:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__divsf3>
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	08 95       	ret

Disassembly of section .text.str2flaot:

000022d8 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    22d8:	cf 92       	push	r12
    22da:	df 92       	push	r13
    22dc:	ef 92       	push	r14
    22de:	ff 92       	push	r15
    22e0:	0f 93       	push	r16
    22e2:	1f 93       	push	r17
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    22ea:	bc 01       	movw	r22, r24
    22ec:	80 e8       	ldi	r24, 0x80	; 128
    22ee:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <atoi>
    22f2:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    22f4:	c8 01       	movw	r24, r16
    22f6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <get_decimal>
    22fa:	6b 01       	movw	r12, r22
    22fc:	7c 01       	movw	r14, r24
	return intVal+deci;
    22fe:	be 01       	movw	r22, r28
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__floatunsisf>
    2308:	9b 01       	movw	r18, r22
    230a:	ac 01       	movw	r20, r24
    230c:	c7 01       	movw	r24, r14
    230e:	b6 01       	movw	r22, r12
    2310:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__addsf3>
	
	
}
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	ff 90       	pop	r15
    231e:	ef 90       	pop	r14
    2320:	df 90       	pop	r13
    2322:	cf 90       	pop	r12
    2324:	08 95       	ret

Disassembly of section .text.is_float:

0000213c <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    213c:	ef 92       	push	r14
    213e:	ff 92       	push	r15
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    214a:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    214c:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    214e:	0d c0       	rjmp	.+26     	; 0x216a <is_float+0x2e>
	{
		if(str[i]=='.'){
    2150:	ce 0d       	add	r28, r14
    2152:	df 1d       	adc	r29, r15
    2154:	88 81       	ld	r24, Y
    2156:	8e 32       	cpi	r24, 0x2E	; 46
    2158:	21 f4       	brne	.+8      	; 0x2162 <is_float+0x26>
			if (got_dot)
    215a:	01 11       	cpse	r16, r1
    215c:	11 c0       	rjmp	.+34     	; 0x2180 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    215e:	01 e0       	ldi	r16, 0x01	; 1
    2160:	03 c0       	rjmp	.+6      	; 0x2168 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2162:	80 53       	subi	r24, 0x30	; 48
    2164:	8a 30       	cpi	r24, 0x0A	; 10
    2166:	70 f4       	brcc	.+28     	; 0x2184 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2168:	1f 5f       	subi	r17, 0xFF	; 255
    216a:	c1 2f       	mov	r28, r17
    216c:	d0 e0       	ldi	r29, 0x00	; 0
    216e:	b7 01       	movw	r22, r14
    2170:	80 e8       	ldi	r24, 0x80	; 128
    2172:	0e 94 b9 14 	call	0x2972	; 0x2972 <strlen>
    2176:	c8 17       	cp	r28, r24
    2178:	d9 07       	cpc	r29, r25
    217a:	50 f3       	brcs	.-44     	; 0x2150 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2184:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	ef 90       	pop	r14
    2192:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002cbe <__subsf3>:
    2cbe:	50 58       	subi	r21, 0x80	; 128

00002cc0 <__addsf3>:
    2cc0:	bb 27       	eor	r27, r27
    2cc2:	aa 27       	eor	r26, r26
    2cc4:	0e 94 39 0c 	call	0x1872	; 0x1872 <__addsf3x>
    2cc8:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001872 <__addsf3x>:
    1872:	11 c0       	rjmp	.+34     	; 0x1896 <__addsf3x+0x24>
    1874:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__fp_pscA>
    1878:	38 f0       	brcs	.+14     	; 0x1888 <__addsf3x+0x16>
    187a:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__fp_pscB>
    187e:	20 f0       	brcs	.+8      	; 0x1888 <__addsf3x+0x16>
    1880:	39 f4       	brne	.+14     	; 0x1890 <__addsf3x+0x1e>
    1882:	9f 3f       	cpi	r25, 0xFF	; 255
    1884:	19 f4       	brne	.+6      	; 0x188c <__addsf3x+0x1a>
    1886:	26 f4       	brtc	.+8      	; 0x1890 <__addsf3x+0x1e>
    1888:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__fp_nan>
    188c:	0e f4       	brtc	.+2      	; 0x1890 <__addsf3x+0x1e>
    188e:	e0 95       	com	r30
    1890:	e7 fb       	bst	r30, 7
    1892:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__fp_inf>
    1896:	e9 2f       	mov	r30, r25
    1898:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__fp_split3>
    189c:	58 f3       	brcs	.-42     	; 0x1874 <__addsf3x+0x2>
    189e:	ba 17       	cp	r27, r26
    18a0:	62 07       	cpc	r22, r18
    18a2:	73 07       	cpc	r23, r19
    18a4:	84 07       	cpc	r24, r20
    18a6:	95 07       	cpc	r25, r21
    18a8:	20 f0       	brcs	.+8      	; 0x18b2 <__addsf3x+0x40>
    18aa:	79 f4       	brne	.+30     	; 0x18ca <__addsf3x+0x58>
    18ac:	a6 f5       	brtc	.+104    	; 0x1916 <__addsf3x+0xa4>
    18ae:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__fp_zero>
    18b2:	0e f4       	brtc	.+2      	; 0x18b6 <__addsf3x+0x44>
    18b4:	e0 95       	com	r30
    18b6:	0b 2e       	mov	r0, r27
    18b8:	ba 2f       	mov	r27, r26
    18ba:	a0 2d       	mov	r26, r0
    18bc:	0b 01       	movw	r0, r22
    18be:	b9 01       	movw	r22, r18
    18c0:	90 01       	movw	r18, r0
    18c2:	0c 01       	movw	r0, r24
    18c4:	ca 01       	movw	r24, r20
    18c6:	a0 01       	movw	r20, r0
    18c8:	11 24       	eor	r1, r1
    18ca:	ff 27       	eor	r31, r31
    18cc:	59 1b       	sub	r21, r25
    18ce:	99 f0       	breq	.+38     	; 0x18f6 <__addsf3x+0x84>
    18d0:	59 3f       	cpi	r21, 0xF9	; 249
    18d2:	50 f4       	brcc	.+20     	; 0x18e8 <__addsf3x+0x76>
    18d4:	50 3e       	cpi	r21, 0xE0	; 224
    18d6:	68 f1       	brcs	.+90     	; 0x1932 <__addsf3x+0xc0>
    18d8:	1a 16       	cp	r1, r26
    18da:	f0 40       	sbci	r31, 0x00	; 0
    18dc:	a2 2f       	mov	r26, r18
    18de:	23 2f       	mov	r18, r19
    18e0:	34 2f       	mov	r19, r20
    18e2:	44 27       	eor	r20, r20
    18e4:	58 5f       	subi	r21, 0xF8	; 248
    18e6:	f3 cf       	rjmp	.-26     	; 0x18ce <__addsf3x+0x5c>
    18e8:	46 95       	lsr	r20
    18ea:	37 95       	ror	r19
    18ec:	27 95       	ror	r18
    18ee:	a7 95       	ror	r26
    18f0:	f0 40       	sbci	r31, 0x00	; 0
    18f2:	53 95       	inc	r21
    18f4:	c9 f7       	brne	.-14     	; 0x18e8 <__addsf3x+0x76>
    18f6:	7e f4       	brtc	.+30     	; 0x1916 <__addsf3x+0xa4>
    18f8:	1f 16       	cp	r1, r31
    18fa:	ba 0b       	sbc	r27, r26
    18fc:	62 0b       	sbc	r22, r18
    18fe:	73 0b       	sbc	r23, r19
    1900:	84 0b       	sbc	r24, r20
    1902:	ba f0       	brmi	.+46     	; 0x1932 <__addsf3x+0xc0>
    1904:	91 50       	subi	r25, 0x01	; 1
    1906:	a1 f0       	breq	.+40     	; 0x1930 <__addsf3x+0xbe>
    1908:	ff 0f       	add	r31, r31
    190a:	bb 1f       	adc	r27, r27
    190c:	66 1f       	adc	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	88 1f       	adc	r24, r24
    1912:	c2 f7       	brpl	.-16     	; 0x1904 <__addsf3x+0x92>
    1914:	0e c0       	rjmp	.+28     	; 0x1932 <__addsf3x+0xc0>
    1916:	ba 0f       	add	r27, r26
    1918:	62 1f       	adc	r22, r18
    191a:	73 1f       	adc	r23, r19
    191c:	84 1f       	adc	r24, r20
    191e:	48 f4       	brcc	.+18     	; 0x1932 <__addsf3x+0xc0>
    1920:	87 95       	ror	r24
    1922:	77 95       	ror	r23
    1924:	67 95       	ror	r22
    1926:	b7 95       	ror	r27
    1928:	f7 95       	ror	r31
    192a:	9e 3f       	cpi	r25, 0xFE	; 254
    192c:	08 f0       	brcs	.+2      	; 0x1930 <__addsf3x+0xbe>
    192e:	b0 cf       	rjmp	.-160    	; 0x1890 <__addsf3x+0x1e>
    1930:	93 95       	inc	r25
    1932:	88 0f       	add	r24, r24
    1934:	08 f0       	brcs	.+2      	; 0x1938 <__addsf3x+0xc6>
    1936:	99 27       	eor	r25, r25
    1938:	ee 0f       	add	r30, r30
    193a:	97 95       	ror	r25
    193c:	87 95       	ror	r24
    193e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d50 <__divsf3>:
    2d50:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__divsf3x>
    2d54:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000015f2 <__divsf3x>:
    15f2:	10 c0       	rjmp	.+32     	; 0x1614 <__divsf3x+0x22>
    15f4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__fp_pscB>
    15f8:	58 f0       	brcs	.+22     	; 0x1610 <__divsf3x+0x1e>
    15fa:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__fp_pscA>
    15fe:	40 f0       	brcs	.+16     	; 0x1610 <__divsf3x+0x1e>
    1600:	29 f4       	brne	.+10     	; 0x160c <__divsf3x+0x1a>
    1602:	5f 3f       	cpi	r21, 0xFF	; 255
    1604:	29 f0       	breq	.+10     	; 0x1610 <__divsf3x+0x1e>
    1606:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__fp_inf>
    160a:	51 11       	cpse	r21, r1
    160c:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_szero>
    1610:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__fp_nan>
    1614:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__fp_split3>
    1618:	68 f3       	brcs	.-38     	; 0x15f4 <__divsf3x+0x2>

0000161a <__divsf3_pse>:
    161a:	99 23       	and	r25, r25
    161c:	b1 f3       	breq	.-20     	; 0x160a <__divsf3x+0x18>
    161e:	55 23       	and	r21, r21
    1620:	91 f3       	breq	.-28     	; 0x1606 <__divsf3x+0x14>
    1622:	95 1b       	sub	r25, r21
    1624:	55 0b       	sbc	r21, r21
    1626:	bb 27       	eor	r27, r27
    1628:	aa 27       	eor	r26, r26
    162a:	62 17       	cp	r22, r18
    162c:	73 07       	cpc	r23, r19
    162e:	84 07       	cpc	r24, r20
    1630:	38 f0       	brcs	.+14     	; 0x1640 <__divsf3_pse+0x26>
    1632:	9f 5f       	subi	r25, 0xFF	; 255
    1634:	5f 4f       	sbci	r21, 0xFF	; 255
    1636:	22 0f       	add	r18, r18
    1638:	33 1f       	adc	r19, r19
    163a:	44 1f       	adc	r20, r20
    163c:	aa 1f       	adc	r26, r26
    163e:	a9 f3       	breq	.-22     	; 0x162a <__divsf3_pse+0x10>
    1640:	35 d0       	rcall	.+106    	; 0x16ac <__divsf3_pse+0x92>
    1642:	0e 2e       	mov	r0, r30
    1644:	3a f0       	brmi	.+14     	; 0x1654 <__divsf3_pse+0x3a>
    1646:	e0 e8       	ldi	r30, 0x80	; 128
    1648:	32 d0       	rcall	.+100    	; 0x16ae <__divsf3_pse+0x94>
    164a:	91 50       	subi	r25, 0x01	; 1
    164c:	50 40       	sbci	r21, 0x00	; 0
    164e:	e6 95       	lsr	r30
    1650:	00 1c       	adc	r0, r0
    1652:	ca f7       	brpl	.-14     	; 0x1646 <__divsf3_pse+0x2c>
    1654:	2b d0       	rcall	.+86     	; 0x16ac <__divsf3_pse+0x92>
    1656:	fe 2f       	mov	r31, r30
    1658:	29 d0       	rcall	.+82     	; 0x16ac <__divsf3_pse+0x92>
    165a:	66 0f       	add	r22, r22
    165c:	77 1f       	adc	r23, r23
    165e:	88 1f       	adc	r24, r24
    1660:	bb 1f       	adc	r27, r27
    1662:	26 17       	cp	r18, r22
    1664:	37 07       	cpc	r19, r23
    1666:	48 07       	cpc	r20, r24
    1668:	ab 07       	cpc	r26, r27
    166a:	b0 e8       	ldi	r27, 0x80	; 128
    166c:	09 f0       	breq	.+2      	; 0x1670 <__divsf3_pse+0x56>
    166e:	bb 0b       	sbc	r27, r27
    1670:	80 2d       	mov	r24, r0
    1672:	bf 01       	movw	r22, r30
    1674:	ff 27       	eor	r31, r31
    1676:	93 58       	subi	r25, 0x83	; 131
    1678:	5f 4f       	sbci	r21, 0xFF	; 255
    167a:	3a f0       	brmi	.+14     	; 0x168a <__divsf3_pse+0x70>
    167c:	9e 3f       	cpi	r25, 0xFE	; 254
    167e:	51 05       	cpc	r21, r1
    1680:	78 f0       	brcs	.+30     	; 0x16a0 <__divsf3_pse+0x86>
    1682:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__fp_inf>
    1686:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_szero>
    168a:	5f 3f       	cpi	r21, 0xFF	; 255
    168c:	e4 f3       	brlt	.-8      	; 0x1686 <__divsf3_pse+0x6c>
    168e:	98 3e       	cpi	r25, 0xE8	; 232
    1690:	d4 f3       	brlt	.-12     	; 0x1686 <__divsf3_pse+0x6c>
    1692:	86 95       	lsr	r24
    1694:	77 95       	ror	r23
    1696:	67 95       	ror	r22
    1698:	b7 95       	ror	r27
    169a:	f7 95       	ror	r31
    169c:	9f 5f       	subi	r25, 0xFF	; 255
    169e:	c9 f7       	brne	.-14     	; 0x1692 <__divsf3_pse+0x78>
    16a0:	88 0f       	add	r24, r24
    16a2:	91 1d       	adc	r25, r1
    16a4:	96 95       	lsr	r25
    16a6:	87 95       	ror	r24
    16a8:	97 f9       	bld	r25, 7
    16aa:	08 95       	ret
    16ac:	e1 e0       	ldi	r30, 0x01	; 1
    16ae:	66 0f       	add	r22, r22
    16b0:	77 1f       	adc	r23, r23
    16b2:	88 1f       	adc	r24, r24
    16b4:	bb 1f       	adc	r27, r27
    16b6:	62 17       	cp	r22, r18
    16b8:	73 07       	cpc	r23, r19
    16ba:	84 07       	cpc	r24, r20
    16bc:	ba 07       	cpc	r27, r26
    16be:	20 f0       	brcs	.+8      	; 0x16c8 <__divsf3_pse+0xae>
    16c0:	62 1b       	sub	r22, r18
    16c2:	73 0b       	sbc	r23, r19
    16c4:	84 0b       	sbc	r24, r20
    16c6:	ba 0b       	sbc	r27, r26
    16c8:	ee 1f       	adc	r30, r30
    16ca:	88 f7       	brcc	.-30     	; 0x16ae <__divsf3_pse+0x94>
    16cc:	e0 95       	com	r30
    16ce:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001d24 <__floatunsisf>:
    1d24:	e8 94       	clt
    1d26:	09 c0       	rjmp	.+18     	; 0x1d3a <__floatsisf+0x12>

00001d28 <__floatsisf>:
    1d28:	97 fb       	bst	r25, 7
    1d2a:	3e f4       	brtc	.+14     	; 0x1d3a <__floatsisf+0x12>
    1d2c:	90 95       	com	r25
    1d2e:	80 95       	com	r24
    1d30:	70 95       	com	r23
    1d32:	61 95       	neg	r22
    1d34:	7f 4f       	sbci	r23, 0xFF	; 255
    1d36:	8f 4f       	sbci	r24, 0xFF	; 255
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	99 23       	and	r25, r25
    1d3c:	a9 f0       	breq	.+42     	; 0x1d68 <__floatsisf+0x40>
    1d3e:	f9 2f       	mov	r31, r25
    1d40:	96 e9       	ldi	r25, 0x96	; 150
    1d42:	bb 27       	eor	r27, r27
    1d44:	93 95       	inc	r25
    1d46:	f6 95       	lsr	r31
    1d48:	87 95       	ror	r24
    1d4a:	77 95       	ror	r23
    1d4c:	67 95       	ror	r22
    1d4e:	b7 95       	ror	r27
    1d50:	f1 11       	cpse	r31, r1
    1d52:	f8 cf       	rjmp	.-16     	; 0x1d44 <__floatsisf+0x1c>
    1d54:	fa f4       	brpl	.+62     	; 0x1d94 <__floatsisf+0x6c>
    1d56:	bb 0f       	add	r27, r27
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <__floatsisf+0x36>
    1d5a:	60 ff       	sbrs	r22, 0
    1d5c:	1b c0       	rjmp	.+54     	; 0x1d94 <__floatsisf+0x6c>
    1d5e:	6f 5f       	subi	r22, 0xFF	; 255
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	8f 4f       	sbci	r24, 0xFF	; 255
    1d64:	9f 4f       	sbci	r25, 0xFF	; 255
    1d66:	16 c0       	rjmp	.+44     	; 0x1d94 <__floatsisf+0x6c>
    1d68:	88 23       	and	r24, r24
    1d6a:	11 f0       	breq	.+4      	; 0x1d70 <__floatsisf+0x48>
    1d6c:	96 e9       	ldi	r25, 0x96	; 150
    1d6e:	11 c0       	rjmp	.+34     	; 0x1d92 <__floatsisf+0x6a>
    1d70:	77 23       	and	r23, r23
    1d72:	21 f0       	breq	.+8      	; 0x1d7c <__floatsisf+0x54>
    1d74:	9e e8       	ldi	r25, 0x8E	; 142
    1d76:	87 2f       	mov	r24, r23
    1d78:	76 2f       	mov	r23, r22
    1d7a:	05 c0       	rjmp	.+10     	; 0x1d86 <__floatsisf+0x5e>
    1d7c:	66 23       	and	r22, r22
    1d7e:	71 f0       	breq	.+28     	; 0x1d9c <__floatsisf+0x74>
    1d80:	96 e8       	ldi	r25, 0x86	; 134
    1d82:	86 2f       	mov	r24, r22
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	2a f0       	brmi	.+10     	; 0x1d94 <__floatsisf+0x6c>
    1d8a:	9a 95       	dec	r25
    1d8c:	66 0f       	add	r22, r22
    1d8e:	77 1f       	adc	r23, r23
    1d90:	88 1f       	adc	r24, r24
    1d92:	da f7       	brpl	.-10     	; 0x1d8a <__floatsisf+0x62>
    1d94:	88 0f       	add	r24, r24
    1d96:	96 95       	lsr	r25
    1d98:	87 95       	ror	r24
    1d9a:	97 f9       	bld	r25, 7
    1d9c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d12 <__fp_inf>:
    2d12:	97 f9       	bld	r25, 7
    2d14:	9f 67       	ori	r25, 0x7F	; 127
    2d16:	80 e8       	ldi	r24, 0x80	; 128
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d74 <__fp_nan>:
    2d74:	9f ef       	ldi	r25, 0xFF	; 255
    2d76:	80 ec       	ldi	r24, 0xC0	; 192
    2d78:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002ccc <__fp_pscA>:
    2ccc:	00 24       	eor	r0, r0
    2cce:	0a 94       	dec	r0
    2cd0:	16 16       	cp	r1, r22
    2cd2:	17 06       	cpc	r1, r23
    2cd4:	18 06       	cpc	r1, r24
    2cd6:	09 06       	cpc	r0, r25
    2cd8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002cda <__fp_pscB>:
    2cda:	00 24       	eor	r0, r0
    2cdc:	0a 94       	dec	r0
    2cde:	12 16       	cp	r1, r18
    2ce0:	13 06       	cpc	r1, r19
    2ce2:	14 06       	cpc	r1, r20
    2ce4:	05 06       	cpc	r0, r21
    2ce6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002a5c <__fp_round>:
    2a5c:	09 2e       	mov	r0, r25
    2a5e:	03 94       	inc	r0
    2a60:	00 0c       	add	r0, r0
    2a62:	11 f4       	brne	.+4      	; 0x2a68 <__fp_round+0xc>
    2a64:	88 23       	and	r24, r24
    2a66:	52 f0       	brmi	.+20     	; 0x2a7c <__fp_round+0x20>
    2a68:	bb 0f       	add	r27, r27
    2a6a:	40 f4       	brcc	.+16     	; 0x2a7c <__fp_round+0x20>
    2a6c:	bf 2b       	or	r27, r31
    2a6e:	11 f4       	brne	.+4      	; 0x2a74 <__fp_round+0x18>
    2a70:	60 ff       	sbrs	r22, 0
    2a72:	04 c0       	rjmp	.+8      	; 0x2a7c <__fp_round+0x20>
    2a74:	6f 5f       	subi	r22, 0xFF	; 255
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	8f 4f       	sbci	r24, 0xFF	; 255
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000024e4 <__fp_split3>:
    24e4:	57 fd       	sbrc	r21, 7
    24e6:	90 58       	subi	r25, 0x80	; 128
    24e8:	44 0f       	add	r20, r20
    24ea:	55 1f       	adc	r21, r21
    24ec:	59 f0       	breq	.+22     	; 0x2504 <__fp_splitA+0x10>
    24ee:	5f 3f       	cpi	r21, 0xFF	; 255
    24f0:	71 f0       	breq	.+28     	; 0x250e <__fp_splitA+0x1a>
    24f2:	47 95       	ror	r20

000024f4 <__fp_splitA>:
    24f4:	88 0f       	add	r24, r24
    24f6:	97 fb       	bst	r25, 7
    24f8:	99 1f       	adc	r25, r25
    24fa:	61 f0       	breq	.+24     	; 0x2514 <__fp_splitA+0x20>
    24fc:	9f 3f       	cpi	r25, 0xFF	; 255
    24fe:	79 f0       	breq	.+30     	; 0x251e <__fp_splitA+0x2a>
    2500:	87 95       	ror	r24
    2502:	08 95       	ret
    2504:	12 16       	cp	r1, r18
    2506:	13 06       	cpc	r1, r19
    2508:	14 06       	cpc	r1, r20
    250a:	55 1f       	adc	r21, r21
    250c:	f2 cf       	rjmp	.-28     	; 0x24f2 <__fp_split3+0xe>
    250e:	46 95       	lsr	r20
    2510:	f1 df       	rcall	.-30     	; 0x24f4 <__fp_splitA>
    2512:	08 c0       	rjmp	.+16     	; 0x2524 <__fp_splitA+0x30>
    2514:	16 16       	cp	r1, r22
    2516:	17 06       	cpc	r1, r23
    2518:	18 06       	cpc	r1, r24
    251a:	99 1f       	adc	r25, r25
    251c:	f1 cf       	rjmp	.-30     	; 0x2500 <__fp_splitA+0xc>
    251e:	86 95       	lsr	r24
    2520:	71 05       	cpc	r23, r1
    2522:	61 05       	cpc	r22, r1
    2524:	08 94       	sec
    2526:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002ce8 <__fp_zero>:
    2ce8:	e8 94       	clt

00002cea <__fp_szero>:
    2cea:	bb 27       	eor	r27, r27
    2cec:	66 27       	eor	r22, r22
    2cee:	77 27       	eor	r23, r23
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	97 f9       	bld	r25, 7
    2cf4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d58 <__mulsf3>:
    2d58:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__mulsf3x>
    2d5c:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000016d0 <__mulsf3x>:
    16d0:	0f c0       	rjmp	.+30     	; 0x16f0 <__mulsf3x+0x20>
    16d2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__fp_pscA>
    16d6:	38 f0       	brcs	.+14     	; 0x16e6 <__mulsf3x+0x16>
    16d8:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__fp_pscB>
    16dc:	20 f0       	brcs	.+8      	; 0x16e6 <__mulsf3x+0x16>
    16de:	95 23       	and	r25, r21
    16e0:	11 f0       	breq	.+4      	; 0x16e6 <__mulsf3x+0x16>
    16e2:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__fp_inf>
    16e6:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__fp_nan>
    16ea:	11 24       	eor	r1, r1
    16ec:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_szero>
    16f0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__fp_split3>
    16f4:	70 f3       	brcs	.-36     	; 0x16d2 <__mulsf3x+0x2>

000016f6 <__mulsf3_pse>:
    16f6:	95 9f       	mul	r25, r21
    16f8:	c1 f3       	breq	.-16     	; 0x16ea <__mulsf3x+0x1a>
    16fa:	95 0f       	add	r25, r21
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	55 1f       	adc	r21, r21
    1700:	62 9f       	mul	r22, r18
    1702:	f0 01       	movw	r30, r0
    1704:	72 9f       	mul	r23, r18
    1706:	bb 27       	eor	r27, r27
    1708:	f0 0d       	add	r31, r0
    170a:	b1 1d       	adc	r27, r1
    170c:	63 9f       	mul	r22, r19
    170e:	aa 27       	eor	r26, r26
    1710:	f0 0d       	add	r31, r0
    1712:	b1 1d       	adc	r27, r1
    1714:	aa 1f       	adc	r26, r26
    1716:	64 9f       	mul	r22, r20
    1718:	66 27       	eor	r22, r22
    171a:	b0 0d       	add	r27, r0
    171c:	a1 1d       	adc	r26, r1
    171e:	66 1f       	adc	r22, r22
    1720:	82 9f       	mul	r24, r18
    1722:	22 27       	eor	r18, r18
    1724:	b0 0d       	add	r27, r0
    1726:	a1 1d       	adc	r26, r1
    1728:	62 1f       	adc	r22, r18
    172a:	73 9f       	mul	r23, r19
    172c:	b0 0d       	add	r27, r0
    172e:	a1 1d       	adc	r26, r1
    1730:	62 1f       	adc	r22, r18
    1732:	83 9f       	mul	r24, r19
    1734:	a0 0d       	add	r26, r0
    1736:	61 1d       	adc	r22, r1
    1738:	22 1f       	adc	r18, r18
    173a:	74 9f       	mul	r23, r20
    173c:	33 27       	eor	r19, r19
    173e:	a0 0d       	add	r26, r0
    1740:	61 1d       	adc	r22, r1
    1742:	23 1f       	adc	r18, r19
    1744:	84 9f       	mul	r24, r20
    1746:	60 0d       	add	r22, r0
    1748:	21 1d       	adc	r18, r1
    174a:	82 2f       	mov	r24, r18
    174c:	76 2f       	mov	r23, r22
    174e:	6a 2f       	mov	r22, r26
    1750:	11 24       	eor	r1, r1
    1752:	9f 57       	subi	r25, 0x7F	; 127
    1754:	50 40       	sbci	r21, 0x00	; 0
    1756:	9a f0       	brmi	.+38     	; 0x177e <__mulsf3_pse+0x88>
    1758:	f1 f0       	breq	.+60     	; 0x1796 <__mulsf3_pse+0xa0>
    175a:	88 23       	and	r24, r24
    175c:	4a f0       	brmi	.+18     	; 0x1770 <__mulsf3_pse+0x7a>
    175e:	ee 0f       	add	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	bb 1f       	adc	r27, r27
    1764:	66 1f       	adc	r22, r22
    1766:	77 1f       	adc	r23, r23
    1768:	88 1f       	adc	r24, r24
    176a:	91 50       	subi	r25, 0x01	; 1
    176c:	50 40       	sbci	r21, 0x00	; 0
    176e:	a9 f7       	brne	.-22     	; 0x175a <__mulsf3_pse+0x64>
    1770:	9e 3f       	cpi	r25, 0xFE	; 254
    1772:	51 05       	cpc	r21, r1
    1774:	80 f0       	brcs	.+32     	; 0x1796 <__mulsf3_pse+0xa0>
    1776:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__fp_inf>
    177a:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_szero>
    177e:	5f 3f       	cpi	r21, 0xFF	; 255
    1780:	e4 f3       	brlt	.-8      	; 0x177a <__mulsf3_pse+0x84>
    1782:	98 3e       	cpi	r25, 0xE8	; 232
    1784:	d4 f3       	brlt	.-12     	; 0x177a <__mulsf3_pse+0x84>
    1786:	86 95       	lsr	r24
    1788:	77 95       	ror	r23
    178a:	67 95       	ror	r22
    178c:	b7 95       	ror	r27
    178e:	f7 95       	ror	r31
    1790:	e7 95       	ror	r30
    1792:	9f 5f       	subi	r25, 0xFF	; 255
    1794:	c1 f7       	brne	.-16     	; 0x1786 <__mulsf3_pse+0x90>
    1796:	fe 2b       	or	r31, r30
    1798:	88 0f       	add	r24, r24
    179a:	91 1d       	adc	r25, r1
    179c:	96 95       	lsr	r25
    179e:	87 95       	ror	r24
    17a0:	97 f9       	bld	r25, 7
    17a2:	08 95       	ret

Disassembly of section .text.avrlibc:

000003da <vfprintf>:
 3da:	a4 e1       	ldi	r26, 0x14	; 20
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	e3 ef       	ldi	r30, 0xF3	; 243
 3e0:	f1 e0       	ldi	r31, 0x01	; 1
 3e2:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__prologue_saves__>
 3e6:	6c 01       	movw	r12, r24
 3e8:	1a 01       	movw	r2, r20
 3ea:	46 2e       	mov	r4, r22
 3ec:	59 01       	movw	r10, r18
 3ee:	fc 01       	movw	r30, r24
 3f0:	10 86       	std	Z+8, r1	; 0x08
 3f2:	17 82       	std	Z+7, r1	; 0x07
 3f4:	84 81       	ldd	r24, Z+4	; 0x04
 3f6:	81 ff       	sbrs	r24, 1
 3f8:	62 c3       	rjmp	.+1732   	; 0xabe <__EEPROM_REGION_LENGTH__+0x2be>
 3fa:	ce 01       	movw	r24, r28
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	9d 87       	std	Y+13, r25	; 0x0d
 400:	8c 87       	std	Y+12, r24	; 0x0c
 402:	a0 e8       	ldi	r26, 0x80	; 128
 404:	8a 8b       	std	Y+18, r24	; 0x12
 406:	9b 8b       	std	Y+19, r25	; 0x13
 408:	ac 8b       	std	Y+20, r26	; 0x14
 40a:	f1 01       	movw	r30, r2
 40c:	84 91       	lpm	r24, Z
 40e:	47 fc       	sbrc	r4, 7
 410:	80 81       	ld	r24, Z
 412:	88 23       	and	r24, r24
 414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	4f c3       	rjmp	.+1694   	; 0xab6 <__EEPROM_REGION_LENGTH__+0x2b6>
 418:	44 2d       	mov	r20, r4
 41a:	91 01       	movw	r18, r2
 41c:	2f 5f       	subi	r18, 0xFF	; 255
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
 420:	4f 4f       	sbci	r20, 0xFF	; 255
 422:	85 32       	cpi	r24, 0x25	; 37
 424:	19 f0       	breq	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 426:	19 01       	movw	r2, r18
 428:	44 2e       	mov	r4, r20
 42a:	0a c0       	rjmp	.+20     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42c:	f9 01       	movw	r30, r18
 42e:	84 91       	lpm	r24, Z
 430:	47 fd       	sbrc	r20, 7
 432:	80 81       	ld	r24, Z
 434:	92 e0       	ldi	r25, 0x02	; 2
 436:	29 0e       	add	r2, r25
 438:	31 1c       	adc	r3, r1
 43a:	41 1c       	adc	r4, r1
 43c:	85 32       	cpi	r24, 0x25	; 37
 43e:	49 f4       	brne	.+18     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 440:	b6 01       	movw	r22, r12
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 448:	bf 86       	std	Y+15, r11	; 0x0f
 44a:	ae 86       	std	Y+14, r10	; 0x0e
 44c:	ae 84       	ldd	r10, Y+14	; 0x0e
 44e:	bf 84       	ldd	r11, Y+15	; 0x0f
 450:	dc cf       	rjmp	.-72     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 452:	10 e0       	ldi	r17, 0x00	; 0
 454:	f1 2c       	mov	r15, r1
 456:	00 e0       	ldi	r16, 0x00	; 0
 458:	00 32       	cpi	r16, 0x20	; 32
 45a:	a0 f4       	brcc	.+40     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 45c:	8b 32       	cpi	r24, 0x2B	; 43
 45e:	69 f0       	breq	.+26     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 460:	30 f4       	brcc	.+12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 462:	80 32       	cpi	r24, 0x20	; 32
 464:	59 f0       	breq	.+22     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 466:	83 32       	cpi	r24, 0x23	; 35
 468:	69 f4       	brne	.+26     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 46a:	00 61       	ori	r16, 0x10	; 16
 46c:	2c c0       	rjmp	.+88     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 46e:	8d 32       	cpi	r24, 0x2D	; 45
 470:	39 f0       	breq	.+14     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 472:	80 33       	cpi	r24, 0x30	; 48
 474:	39 f4       	brne	.+14     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 476:	01 60       	ori	r16, 0x01	; 1
 478:	26 c0       	rjmp	.+76     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 47a:	02 60       	ori	r16, 0x02	; 2
 47c:	04 60       	ori	r16, 0x04	; 4
 47e:	23 c0       	rjmp	.+70     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 480:	08 60       	ori	r16, 0x08	; 8
 482:	21 c0       	rjmp	.+66     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 484:	07 fd       	sbrc	r16, 7
 486:	29 c0       	rjmp	.+82     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 488:	90 ed       	ldi	r25, 0xD0	; 208
 48a:	98 0f       	add	r25, r24
 48c:	9a 30       	cpi	r25, 0x0A	; 10
 48e:	78 f4       	brcc	.+30     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 490:	06 ff       	sbrs	r16, 6
 492:	06 c0       	rjmp	.+12     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 494:	aa e0       	ldi	r26, 0x0A	; 10
 496:	1a 9f       	mul	r17, r26
 498:	90 0d       	add	r25, r0
 49a:	11 24       	eor	r1, r1
 49c:	19 2f       	mov	r17, r25
 49e:	13 c0       	rjmp	.+38     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4a0:	ea e0       	ldi	r30, 0x0A	; 10
 4a2:	fe 9e       	mul	r15, r30
 4a4:	90 0d       	add	r25, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	f9 2e       	mov	r15, r25
 4aa:	00 62       	ori	r16, 0x20	; 32
 4ac:	0c c0       	rjmp	.+24     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ae:	8e 32       	cpi	r24, 0x2E	; 46
 4b0:	21 f4       	brne	.+8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b2:	06 fd       	sbrc	r16, 6
 4b4:	00 c3       	rjmp	.+1536   	; 0xab6 <__EEPROM_REGION_LENGTH__+0x2b6>
 4b6:	00 64       	ori	r16, 0x40	; 64
 4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ba:	8c 36       	cpi	r24, 0x6C	; 108
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4be:	00 68       	ori	r16, 0x80	; 128
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c2:	88 36       	cpi	r24, 0x68	; 104
 4c4:	51 f4       	brne	.+20     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4c6:	f1 01       	movw	r30, r2
 4c8:	84 91       	lpm	r24, Z
 4ca:	47 fc       	sbrc	r4, 7
 4cc:	80 81       	ld	r24, Z
 4ce:	ff ef       	ldi	r31, 0xFF	; 255
 4d0:	2f 1a       	sub	r2, r31
 4d2:	3f 0a       	sbc	r3, r31
 4d4:	4f 0a       	sbc	r4, r31
 4d6:	81 11       	cpse	r24, r1
 4d8:	bf cf       	rjmp	.-130    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 4da:	9b eb       	ldi	r25, 0xBB	; 187
 4dc:	98 0f       	add	r25, r24
 4de:	93 30       	cpi	r25, 0x03	; 3
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e2:	00 61       	ori	r16, 0x10	; 16
 4e4:	80 5e       	subi	r24, 0xE0	; 224
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4e8:	9b e9       	ldi	r25, 0x9B	; 155
 4ea:	98 0f       	add	r25, r24
 4ec:	93 30       	cpi	r25, 0x03	; 3
 4ee:	08 f0       	brcs	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	66 c1       	rjmp	.+716    	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
 4f2:	0f 7e       	andi	r16, 0xEF	; 239
 4f4:	06 ff       	sbrs	r16, 6
 4f6:	16 e0       	ldi	r17, 0x06	; 6
 4f8:	0f 73       	andi	r16, 0x3F	; 63
 4fa:	70 2e       	mov	r7, r16
 4fc:	85 36       	cpi	r24, 0x65	; 101
 4fe:	21 f4       	brne	.+8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 500:	20 2f       	mov	r18, r16
 502:	20 64       	ori	r18, 0x40	; 64
 504:	72 2e       	mov	r7, r18
 506:	08 c0       	rjmp	.+16     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 508:	86 36       	cpi	r24, 0x66	; 102
 50a:	21 f4       	brne	.+8      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 50c:	80 2f       	mov	r24, r16
 50e:	80 68       	ori	r24, 0x80	; 128
 510:	78 2e       	mov	r7, r24
 512:	02 c0       	rjmp	.+4      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 514:	11 11       	cpse	r17, r1
 516:	11 50       	subi	r17, 0x01	; 1
 518:	77 fe       	sbrs	r7, 7
 51a:	07 c0       	rjmp	.+14     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 51c:	1c 33       	cpi	r17, 0x3C	; 60
 51e:	50 f4       	brcc	.+20     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 520:	ee 24       	eor	r14, r14
 522:	e3 94       	inc	r14
 524:	e1 0e       	add	r14, r17
 526:	27 e0       	ldi	r18, 0x07	; 7
 528:	0b c0       	rjmp	.+22     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 52a:	18 30       	cpi	r17, 0x08	; 8
 52c:	38 f0       	brcs	.+14     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 52e:	27 e0       	ldi	r18, 0x07	; 7
 530:	17 e0       	ldi	r17, 0x07	; 7
 532:	05 c0       	rjmp	.+10     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 534:	27 e0       	ldi	r18, 0x07	; 7
 536:	6c e3       	ldi	r22, 0x3C	; 60
 538:	e6 2e       	mov	r14, r22
 53a:	02 c0       	rjmp	.+4      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 53c:	21 2f       	mov	r18, r17
 53e:	e1 2c       	mov	r14, r1
 540:	f5 01       	movw	r30, r10
 542:	34 96       	adiw	r30, 0x04	; 4
 544:	ff 87       	std	Y+15, r31	; 0x0f
 546:	ee 87       	std	Y+14, r30	; 0x0e
 548:	f5 01       	movw	r30, r10
 54a:	60 81       	ld	r22, Z
 54c:	71 81       	ldd	r23, Z+1	; 0x01
 54e:	82 81       	ldd	r24, Z+2	; 0x02
 550:	93 81       	ldd	r25, Z+3	; 0x03
 552:	0e 2d       	mov	r16, r14
 554:	ae 01       	movw	r20, r28
 556:	4f 5f       	subi	r20, 0xFF	; 255
 558:	5f 4f       	sbci	r21, 0xFF	; 255
 55a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__ftoa_engine>
 55e:	5c 01       	movw	r10, r24
 560:	59 80       	ldd	r5, Y+1	; 0x01
 562:	50 fe       	sbrs	r5, 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 566:	53 fe       	sbrs	r5, 3
 568:	06 c0       	rjmp	.+12     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 56a:	71 fc       	sbrc	r7, 1
 56c:	06 c0       	rjmp	.+12     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 56e:	72 fe       	sbrs	r7, 2
 570:	06 c0       	rjmp	.+12     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 572:	00 e2       	ldi	r16, 0x20	; 32
 574:	05 c0       	rjmp	.+10     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 576:	0d e2       	ldi	r16, 0x2D	; 45
 578:	03 c0       	rjmp	.+6      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57a:	0b e2       	ldi	r16, 0x2B	; 43
 57c:	01 c0       	rjmp	.+2      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57e:	00 e0       	ldi	r16, 0x00	; 0
 580:	85 2d       	mov	r24, r5
 582:	8c 70       	andi	r24, 0x0C	; 12
 584:	19 f0       	breq	.+6      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 586:	01 11       	cpse	r16, r1
 588:	73 c2       	rjmp	.+1254   	; 0xa70 <__EEPROM_REGION_LENGTH__+0x270>
 58a:	be c2       	rjmp	.+1404   	; 0xb08 <__EEPROM_REGION_LENGTH__+0x308>
 58c:	77 fe       	sbrs	r7, 7
 58e:	0f c0       	rjmp	.+30     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 590:	ea 0c       	add	r14, r10
 592:	54 fe       	sbrs	r5, 4
 594:	04 c0       	rjmp	.+8      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 596:	8a 81       	ldd	r24, Y+2	; 0x02
 598:	81 33       	cpi	r24, 0x31	; 49
 59a:	09 f4       	brne	.+2      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 59c:	ea 94       	dec	r14
 59e:	1e 14       	cp	r1, r14
 5a0:	74 f5       	brge	.+92     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5a2:	28 e0       	ldi	r18, 0x08	; 8
 5a4:	2e 15       	cp	r18, r14
 5a6:	78 f5       	brcc	.+94     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5a8:	38 e0       	ldi	r19, 0x08	; 8
 5aa:	e3 2e       	mov	r14, r19
 5ac:	2c c0       	rjmp	.+88     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5ae:	76 fc       	sbrc	r7, 6
 5b0:	2a c0       	rjmp	.+84     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5b2:	81 2f       	mov	r24, r17
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	8a 15       	cp	r24, r10
 5b8:	9b 05       	cpc	r25, r11
 5ba:	9c f0       	brlt	.+38     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5bc:	8c ef       	ldi	r24, 0xFC	; 252
 5be:	a8 16       	cp	r10, r24
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	b8 06       	cpc	r11, r24
 5c4:	74 f0       	brlt	.+28     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5c6:	97 2d       	mov	r25, r7
 5c8:	90 68       	ori	r25, 0x80	; 128
 5ca:	79 2e       	mov	r7, r25
 5cc:	0a c0       	rjmp	.+20     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5ce:	e2 e0       	ldi	r30, 0x02	; 2
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	ec 0f       	add	r30, r28
 5d4:	fd 1f       	adc	r31, r29
 5d6:	e1 0f       	add	r30, r17
 5d8:	f1 1d       	adc	r31, r1
 5da:	80 81       	ld	r24, Z
 5dc:	80 33       	cpi	r24, 0x30	; 48
 5de:	19 f4       	brne	.+6      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5e0:	11 50       	subi	r17, 0x01	; 1
 5e2:	11 11       	cpse	r17, r1
 5e4:	f4 cf       	rjmp	.-24     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5e6:	77 fe       	sbrs	r7, 7
 5e8:	0e c0       	rjmp	.+28     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5ea:	ee 24       	eor	r14, r14
 5ec:	e3 94       	inc	r14
 5ee:	e1 0e       	add	r14, r17
 5f0:	81 2f       	mov	r24, r17
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	a8 16       	cp	r10, r24
 5f6:	b9 06       	cpc	r11, r25
 5f8:	2c f4       	brge	.+10     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5fa:	1a 19       	sub	r17, r10
 5fc:	04 c0       	rjmp	.+8      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5fe:	ee 24       	eor	r14, r14
 600:	e3 94       	inc	r14
 602:	01 c0       	rjmp	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 604:	10 e0       	ldi	r17, 0x00	; 0
 606:	77 fe       	sbrs	r7, 7
 608:	06 c0       	rjmp	.+12     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 60a:	1a 14       	cp	r1, r10
 60c:	1b 04       	cpc	r1, r11
 60e:	34 f4       	brge	.+12     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 610:	c5 01       	movw	r24, r10
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	05 c0       	rjmp	.+10     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 616:	85 e0       	ldi	r24, 0x05	; 5
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	01 11       	cpse	r16, r1
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	11 23       	and	r17, r17
 626:	31 f0       	breq	.+12     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 628:	21 2f       	mov	r18, r17
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	2f 5f       	subi	r18, 0xFF	; 255
 62e:	3f 4f       	sbci	r19, 0xFF	; 255
 630:	82 0f       	add	r24, r18
 632:	93 1f       	adc	r25, r19
 634:	2f 2d       	mov	r18, r15
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	82 17       	cp	r24, r18
 63a:	93 07       	cpc	r25, r19
 63c:	14 f4       	brge	.+4      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 63e:	f8 1a       	sub	r15, r24
 640:	01 c0       	rjmp	.+2      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 642:	f1 2c       	mov	r15, r1
 644:	87 2d       	mov	r24, r7
 646:	89 70       	andi	r24, 0x09	; 9
 648:	49 f4       	brne	.+18     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 64a:	ff 20       	and	r15, r15
 64c:	39 f0       	breq	.+14     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 64e:	b6 01       	movw	r22, r12
 650:	80 e2       	ldi	r24, 0x20	; 32
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 658:	fa 94       	dec	r15
 65a:	f7 cf       	rjmp	.-18     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 65c:	00 23       	and	r16, r16
 65e:	29 f0       	breq	.+10     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 660:	b6 01       	movw	r22, r12
 662:	80 2f       	mov	r24, r16
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 66a:	73 fc       	sbrc	r7, 3
 66c:	09 c0       	rjmp	.+18     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
 66e:	ff 20       	and	r15, r15
 670:	39 f0       	breq	.+14     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
 672:	b6 01       	movw	r22, r12
 674:	80 e3       	ldi	r24, 0x30	; 48
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 67c:	fa 94       	dec	r15
 67e:	f7 cf       	rjmp	.-18     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 680:	77 fe       	sbrs	r7, 7
 682:	49 c0       	rjmp	.+146    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
 684:	35 01       	movw	r6, r10
 686:	b7 fe       	sbrs	r11, 7
 688:	02 c0       	rjmp	.+4      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 68a:	61 2c       	mov	r6, r1
 68c:	71 2c       	mov	r7, r1
 68e:	c5 01       	movw	r24, r10
 690:	86 19       	sub	r24, r6
 692:	97 09       	sbc	r25, r7
 694:	88 24       	eor	r8, r8
 696:	83 94       	inc	r8
 698:	91 2c       	mov	r9, r1
 69a:	8c 0e       	add	r8, r28
 69c:	9d 1e       	adc	r9, r29
 69e:	88 0e       	add	r8, r24
 6a0:	99 1e       	adc	r9, r25
 6a2:	f5 01       	movw	r30, r10
 6a4:	ee 19       	sub	r30, r14
 6a6:	f1 09       	sbc	r31, r1
 6a8:	f9 8b       	std	Y+17, r31	; 0x11
 6aa:	e8 8b       	std	Y+16, r30	; 0x10
 6ac:	01 2f       	mov	r16, r17
 6ae:	10 e0       	ldi	r17, 0x00	; 0
 6b0:	11 95       	neg	r17
 6b2:	01 95       	neg	r16
 6b4:	11 09       	sbc	r17, r1
 6b6:	ff ef       	ldi	r31, 0xFF	; 255
 6b8:	6f 16       	cp	r6, r31
 6ba:	7f 06       	cpc	r7, r31
 6bc:	29 f4       	brne	.+10     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6be:	b6 01       	movw	r22, r12
 6c0:	8e e2       	ldi	r24, 0x2E	; 46
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 6c8:	a6 14       	cp	r10, r6
 6ca:	b7 04       	cpc	r11, r7
 6cc:	44 f0       	brlt	.+16     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6ce:	88 89       	ldd	r24, Y+16	; 0x10
 6d0:	99 89       	ldd	r25, Y+17	; 0x11
 6d2:	86 15       	cp	r24, r6
 6d4:	97 05       	cpc	r25, r7
 6d6:	1c f4       	brge	.+6      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6d8:	f4 01       	movw	r30, r8
 6da:	81 81       	ldd	r24, Z+1	; 0x01
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6de:	80 e3       	ldi	r24, 0x30	; 48
 6e0:	f1 e0       	ldi	r31, 0x01	; 1
 6e2:	6f 1a       	sub	r6, r31
 6e4:	71 08       	sbc	r7, r1
 6e6:	2f ef       	ldi	r18, 0xFF	; 255
 6e8:	82 1a       	sub	r8, r18
 6ea:	92 0a       	sbc	r9, r18
 6ec:	60 16       	cp	r6, r16
 6ee:	71 06       	cpc	r7, r17
 6f0:	2c f0       	brlt	.+10     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6f2:	b6 01       	movw	r22, r12
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 6fa:	dd cf       	rjmp	.-70     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 6fc:	a6 14       	cp	r10, r6
 6fe:	b7 04       	cpc	r11, r7
 700:	39 f4       	brne	.+14     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 702:	9a 81       	ldd	r25, Y+2	; 0x02
 704:	96 33       	cpi	r25, 0x36	; 54
 706:	18 f4       	brcc	.+6      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 708:	95 33       	cpi	r25, 0x35	; 53
 70a:	11 f4       	brne	.+4      	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 70c:	54 fe       	sbrs	r5, 4
 70e:	81 e3       	ldi	r24, 0x31	; 49
 710:	b6 01       	movw	r22, r12
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	51 c0       	rjmp	.+162    	; 0x7b8 <__LOCK_REGION_LENGTH__+0x3b8>
 716:	8a 81       	ldd	r24, Y+2	; 0x02
 718:	81 33       	cpi	r24, 0x31	; 49
 71a:	19 f0       	breq	.+6      	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
 71c:	95 2d       	mov	r25, r5
 71e:	9f 7e       	andi	r25, 0xEF	; 239
 720:	59 2e       	mov	r5, r25
 722:	b6 01       	movw	r22, r12
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 72a:	11 11       	cpse	r17, r1
 72c:	05 c0       	rjmp	.+10     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 72e:	74 fc       	sbrc	r7, 4
 730:	1c c0       	rjmp	.+56     	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
 732:	85 e6       	ldi	r24, 0x65	; 101
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	1b c0       	rjmp	.+54     	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 738:	b6 01       	movw	r22, r12
 73a:	8e e2       	ldi	r24, 0x2E	; 46
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 742:	02 e0       	ldi	r16, 0x02	; 2
 744:	01 0f       	add	r16, r17
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	11 e0       	ldi	r17, 0x01	; 1
 74a:	18 0f       	add	r17, r24
 74c:	e1 e0       	ldi	r30, 0x01	; 1
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	ec 0f       	add	r30, r28
 752:	fd 1f       	adc	r31, r29
 754:	e8 0f       	add	r30, r24
 756:	f1 1d       	adc	r31, r1
 758:	80 81       	ld	r24, Z
 75a:	b6 01       	movw	r22, r12
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 762:	81 2f       	mov	r24, r17
 764:	10 13       	cpse	r17, r16
 766:	f0 cf       	rjmp	.-32     	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 768:	e2 cf       	rjmp	.-60     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 76a:	85 e4       	ldi	r24, 0x45	; 69
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	b6 01       	movw	r22, r12
 770:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 774:	b7 fc       	sbrc	r11, 7
 776:	05 c0       	rjmp	.+10     	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
 778:	a1 14       	cp	r10, r1
 77a:	b1 04       	cpc	r11, r1
 77c:	39 f4       	brne	.+14     	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
 77e:	54 fe       	sbrs	r5, 4
 780:	05 c0       	rjmp	.+10     	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
 782:	b1 94       	neg	r11
 784:	a1 94       	neg	r10
 786:	b1 08       	sbc	r11, r1
 788:	8d e2       	ldi	r24, 0x2D	; 45
 78a:	01 c0       	rjmp	.+2      	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
 78c:	8b e2       	ldi	r24, 0x2B	; 43
 78e:	b6 01       	movw	r22, r12
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 796:	80 e3       	ldi	r24, 0x30	; 48
 798:	ea e0       	ldi	r30, 0x0A	; 10
 79a:	ae 16       	cp	r10, r30
 79c:	b1 04       	cpc	r11, r1
 79e:	2c f0       	brlt	.+10     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
 7a0:	8f 5f       	subi	r24, 0xFF	; 255
 7a2:	aa e0       	ldi	r26, 0x0A	; 10
 7a4:	aa 1a       	sub	r10, r26
 7a6:	b1 08       	sbc	r11, r1
 7a8:	f7 cf       	rjmp	.-18     	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
 7aa:	b6 01       	movw	r22, r12
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 7b2:	b6 01       	movw	r22, r12
 7b4:	c5 01       	movw	r24, r10
 7b6:	c0 96       	adiw	r24, 0x30	; 48
 7b8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 7bc:	72 c1       	rjmp	.+740    	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
 7be:	83 36       	cpi	r24, 0x63	; 99
 7c0:	31 f0       	breq	.+12     	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
 7c2:	83 37       	cpi	r24, 0x73	; 115
 7c4:	91 f0       	breq	.+36     	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
 7c6:	83 35       	cpi	r24, 0x53	; 83
 7c8:	09 f0       	breq	.+2      	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 7ca:	5d c0       	rjmp	.+186    	; 0x886 <__EEPROM_REGION_LENGTH__+0x86>
 7cc:	24 c0       	rjmp	.+72     	; 0x816 <__EEPROM_REGION_LENGTH__+0x16>
 7ce:	c5 01       	movw	r24, r10
 7d0:	02 96       	adiw	r24, 0x02	; 2
 7d2:	9f 87       	std	Y+15, r25	; 0x0f
 7d4:	8e 87       	std	Y+14, r24	; 0x0e
 7d6:	f5 01       	movw	r30, r10
 7d8:	80 81       	ld	r24, Z
 7da:	89 83       	std	Y+1, r24	; 0x01
 7dc:	6a 88       	ldd	r6, Y+18	; 0x12
 7de:	7b 88       	ldd	r7, Y+19	; 0x13
 7e0:	8c 88       	ldd	r8, Y+20	; 0x14
 7e2:	aa 24       	eor	r10, r10
 7e4:	a3 94       	inc	r10
 7e6:	b1 2c       	mov	r11, r1
 7e8:	14 c0       	rjmp	.+40     	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
 7ea:	c5 01       	movw	r24, r10
 7ec:	03 96       	adiw	r24, 0x03	; 3
 7ee:	9f 87       	std	Y+15, r25	; 0x0f
 7f0:	8e 87       	std	Y+14, r24	; 0x0e
 7f2:	f5 01       	movw	r30, r10
 7f4:	60 80       	ld	r6, Z
 7f6:	71 80       	ldd	r7, Z+1	; 0x01
 7f8:	82 80       	ldd	r8, Z+2	; 0x02
 7fa:	06 ff       	sbrs	r16, 6
 7fc:	03 c0       	rjmp	.+6      	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 7fe:	41 2f       	mov	r20, r17
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	4f ef       	ldi	r20, 0xFF	; 255
 806:	5f ef       	ldi	r21, 0xFF	; 255
 808:	88 2d       	mov	r24, r8
 80a:	b3 01       	movw	r22, r6
 80c:	0e 94 de 13 	call	0x27bc	; 0x27bc <strnlen>
 810:	5c 01       	movw	r10, r24
 812:	0f 77       	andi	r16, 0x7F	; 127
 814:	15 c0       	rjmp	.+42     	; 0x840 <__EEPROM_REGION_LENGTH__+0x40>
 816:	c5 01       	movw	r24, r10
 818:	03 96       	adiw	r24, 0x03	; 3
 81a:	9f 87       	std	Y+15, r25	; 0x0f
 81c:	8e 87       	std	Y+14, r24	; 0x0e
 81e:	f5 01       	movw	r30, r10
 820:	60 80       	ld	r6, Z
 822:	71 80       	ldd	r7, Z+1	; 0x01
 824:	82 80       	ldd	r8, Z+2	; 0x02
 826:	06 ff       	sbrs	r16, 6
 828:	03 c0       	rjmp	.+6      	; 0x830 <__EEPROM_REGION_LENGTH__+0x30>
 82a:	41 2f       	mov	r20, r17
 82c:	50 e0       	ldi	r21, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
 830:	4f ef       	ldi	r20, 0xFF	; 255
 832:	5f ef       	ldi	r21, 0xFF	; 255
 834:	88 2d       	mov	r24, r8
 836:	b3 01       	movw	r22, r6
 838:	0e 94 de 13 	call	0x27bc	; 0x27bc <strnlen>
 83c:	5c 01       	movw	r10, r24
 83e:	00 68       	ori	r16, 0x80	; 128
 840:	03 fd       	sbrc	r16, 3
 842:	1d c0       	rjmp	.+58     	; 0x87e <__EEPROM_REGION_LENGTH__+0x7e>
 844:	8f 2d       	mov	r24, r15
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	a8 16       	cp	r10, r24
 84a:	b9 06       	cpc	r11, r25
 84c:	c0 f4       	brcc	.+48     	; 0x87e <__EEPROM_REGION_LENGTH__+0x7e>
 84e:	b6 01       	movw	r22, r12
 850:	80 e2       	ldi	r24, 0x20	; 32
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 858:	fa 94       	dec	r15
 85a:	f4 cf       	rjmp	.-24     	; 0x844 <__EEPROM_REGION_LENGTH__+0x44>
 85c:	f3 01       	movw	r30, r6
 85e:	84 91       	lpm	r24, Z
 860:	87 fc       	sbrc	r8, 7
 862:	80 81       	ld	r24, Z
 864:	ff ef       	ldi	r31, 0xFF	; 255
 866:	6f 1a       	sub	r6, r31
 868:	7f 0a       	sbc	r7, r31
 86a:	8f 0a       	sbc	r8, r31
 86c:	b6 01       	movw	r22, r12
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 874:	f1 10       	cpse	r15, r1
 876:	fa 94       	dec	r15
 878:	21 e0       	ldi	r18, 0x01	; 1
 87a:	a2 1a       	sub	r10, r18
 87c:	b1 08       	sbc	r11, r1
 87e:	a1 14       	cp	r10, r1
 880:	b1 04       	cpc	r11, r1
 882:	61 f7       	brne	.-40     	; 0x85c <__EEPROM_REGION_LENGTH__+0x5c>
 884:	0e c1       	rjmp	.+540    	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
 886:	84 36       	cpi	r24, 0x64	; 100
 888:	11 f0       	breq	.+4      	; 0x88e <__EEPROM_REGION_LENGTH__+0x8e>
 88a:	89 36       	cpi	r24, 0x69	; 105
 88c:	79 f5       	brne	.+94     	; 0x8ec <__EEPROM_REGION_LENGTH__+0xec>
 88e:	c5 01       	movw	r24, r10
 890:	07 ff       	sbrs	r16, 7
 892:	09 c0       	rjmp	.+18     	; 0x8a6 <__EEPROM_REGION_LENGTH__+0xa6>
 894:	04 96       	adiw	r24, 0x04	; 4
 896:	9f 87       	std	Y+15, r25	; 0x0f
 898:	8e 87       	std	Y+14, r24	; 0x0e
 89a:	f5 01       	movw	r30, r10
 89c:	60 81       	ld	r22, Z
 89e:	71 81       	ldd	r23, Z+1	; 0x01
 8a0:	82 81       	ldd	r24, Z+2	; 0x02
 8a2:	93 81       	ldd	r25, Z+3	; 0x03
 8a4:	0a c0       	rjmp	.+20     	; 0x8ba <__EEPROM_REGION_LENGTH__+0xba>
 8a6:	02 96       	adiw	r24, 0x02	; 2
 8a8:	9f 87       	std	Y+15, r25	; 0x0f
 8aa:	8e 87       	std	Y+14, r24	; 0x0e
 8ac:	f5 01       	movw	r30, r10
 8ae:	60 81       	ld	r22, Z
 8b0:	71 81       	ldd	r23, Z+1	; 0x01
 8b2:	07 2e       	mov	r0, r23
 8b4:	00 0c       	add	r0, r0
 8b6:	88 0b       	sbc	r24, r24
 8b8:	99 0b       	sbc	r25, r25
 8ba:	0f 76       	andi	r16, 0x6F	; 111
 8bc:	e0 2e       	mov	r14, r16
 8be:	97 ff       	sbrs	r25, 7
 8c0:	0a c0       	rjmp	.+20     	; 0x8d6 <__EEPROM_REGION_LENGTH__+0xd6>
 8c2:	90 95       	com	r25
 8c4:	80 95       	com	r24
 8c6:	70 95       	com	r23
 8c8:	61 95       	neg	r22
 8ca:	7f 4f       	sbci	r23, 0xFF	; 255
 8cc:	8f 4f       	sbci	r24, 0xFF	; 255
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	f0 2f       	mov	r31, r16
 8d2:	f0 68       	ori	r31, 0x80	; 128
 8d4:	ef 2e       	mov	r14, r31
 8d6:	2a e0       	ldi	r18, 0x0A	; 10
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	ae 01       	movw	r20, r28
 8dc:	4f 5f       	subi	r20, 0xFF	; 255
 8de:	5f 4f       	sbci	r21, 0xFF	; 255
 8e0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__ultoa_invert>
 8e4:	a8 2e       	mov	r10, r24
 8e6:	2c 85       	ldd	r18, Y+12	; 0x0c
 8e8:	a2 1a       	sub	r10, r18
 8ea:	4b c0       	rjmp	.+150    	; 0x982 <__EEPROM_REGION_LENGTH__+0x182>
 8ec:	85 37       	cpi	r24, 0x75	; 117
 8ee:	29 f4       	brne	.+10     	; 0x8fa <__EEPROM_REGION_LENGTH__+0xfa>
 8f0:	0f 7e       	andi	r16, 0xEF	; 239
 8f2:	e0 2e       	mov	r14, r16
 8f4:	2a e0       	ldi	r18, 0x0A	; 10
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	25 c0       	rjmp	.+74     	; 0x944 <__EEPROM_REGION_LENGTH__+0x144>
 8fa:	90 2f       	mov	r25, r16
 8fc:	99 7f       	andi	r25, 0xF9	; 249
 8fe:	e9 2e       	mov	r14, r25
 900:	8f 36       	cpi	r24, 0x6F	; 111
 902:	c1 f0       	breq	.+48     	; 0x934 <__EEPROM_REGION_LENGTH__+0x134>
 904:	18 f4       	brcc	.+6      	; 0x90c <__EEPROM_REGION_LENGTH__+0x10c>
 906:	88 35       	cpi	r24, 0x58	; 88
 908:	79 f0       	breq	.+30     	; 0x928 <__EEPROM_REGION_LENGTH__+0x128>
 90a:	d5 c0       	rjmp	.+426    	; 0xab6 <__EEPROM_REGION_LENGTH__+0x2b6>
 90c:	80 37       	cpi	r24, 0x70	; 112
 90e:	19 f0       	breq	.+6      	; 0x916 <__EEPROM_REGION_LENGTH__+0x116>
 910:	88 37       	cpi	r24, 0x78	; 120
 912:	21 f0       	breq	.+8      	; 0x91c <__EEPROM_REGION_LENGTH__+0x11c>
 914:	d0 c0       	rjmp	.+416    	; 0xab6 <__EEPROM_REGION_LENGTH__+0x2b6>
 916:	a9 2f       	mov	r26, r25
 918:	a0 61       	ori	r26, 0x10	; 16
 91a:	ea 2e       	mov	r14, r26
 91c:	e4 fe       	sbrs	r14, 4
 91e:	0d c0       	rjmp	.+26     	; 0x93a <__EEPROM_REGION_LENGTH__+0x13a>
 920:	ee 2d       	mov	r30, r14
 922:	e4 60       	ori	r30, 0x04	; 4
 924:	ee 2e       	mov	r14, r30
 926:	09 c0       	rjmp	.+18     	; 0x93a <__EEPROM_REGION_LENGTH__+0x13a>
 928:	04 ff       	sbrs	r16, 4
 92a:	0a c0       	rjmp	.+20     	; 0x940 <__EEPROM_REGION_LENGTH__+0x140>
 92c:	f9 2f       	mov	r31, r25
 92e:	f6 60       	ori	r31, 0x06	; 6
 930:	ef 2e       	mov	r14, r31
 932:	06 c0       	rjmp	.+12     	; 0x940 <__EEPROM_REGION_LENGTH__+0x140>
 934:	28 e0       	ldi	r18, 0x08	; 8
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	05 c0       	rjmp	.+10     	; 0x944 <__EEPROM_REGION_LENGTH__+0x144>
 93a:	20 e1       	ldi	r18, 0x10	; 16
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	02 c0       	rjmp	.+4      	; 0x944 <__EEPROM_REGION_LENGTH__+0x144>
 940:	20 e1       	ldi	r18, 0x10	; 16
 942:	32 e0       	ldi	r19, 0x02	; 2
 944:	c5 01       	movw	r24, r10
 946:	e7 fe       	sbrs	r14, 7
 948:	09 c0       	rjmp	.+18     	; 0x95c <__EEPROM_REGION_LENGTH__+0x15c>
 94a:	04 96       	adiw	r24, 0x04	; 4
 94c:	9f 87       	std	Y+15, r25	; 0x0f
 94e:	8e 87       	std	Y+14, r24	; 0x0e
 950:	f5 01       	movw	r30, r10
 952:	60 81       	ld	r22, Z
 954:	71 81       	ldd	r23, Z+1	; 0x01
 956:	82 81       	ldd	r24, Z+2	; 0x02
 958:	93 81       	ldd	r25, Z+3	; 0x03
 95a:	08 c0       	rjmp	.+16     	; 0x96c <__EEPROM_REGION_LENGTH__+0x16c>
 95c:	02 96       	adiw	r24, 0x02	; 2
 95e:	9f 87       	std	Y+15, r25	; 0x0f
 960:	8e 87       	std	Y+14, r24	; 0x0e
 962:	f5 01       	movw	r30, r10
 964:	60 81       	ld	r22, Z
 966:	71 81       	ldd	r23, Z+1	; 0x01
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	ae 01       	movw	r20, r28
 96e:	4f 5f       	subi	r20, 0xFF	; 255
 970:	5f 4f       	sbci	r21, 0xFF	; 255
 972:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__ultoa_invert>
 976:	a8 2e       	mov	r10, r24
 978:	fc 85       	ldd	r31, Y+12	; 0x0c
 97a:	af 1a       	sub	r10, r31
 97c:	2e 2d       	mov	r18, r14
 97e:	2f 77       	andi	r18, 0x7F	; 127
 980:	e2 2e       	mov	r14, r18
 982:	e6 fe       	sbrs	r14, 6
 984:	0b c0       	rjmp	.+22     	; 0x99c <__EEPROM_REGION_LENGTH__+0x19c>
 986:	0e 2d       	mov	r16, r14
 988:	0e 7f       	andi	r16, 0xFE	; 254
 98a:	a1 16       	cp	r10, r17
 98c:	50 f4       	brcc	.+20     	; 0x9a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 98e:	e4 fe       	sbrs	r14, 4
 990:	0a c0       	rjmp	.+20     	; 0x9a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 992:	e2 fc       	sbrc	r14, 2
 994:	08 c0       	rjmp	.+16     	; 0x9a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 996:	0e 2d       	mov	r16, r14
 998:	0e 7e       	andi	r16, 0xEE	; 238
 99a:	05 c0       	rjmp	.+10     	; 0x9a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 99c:	ba 2c       	mov	r11, r10
 99e:	0e 2d       	mov	r16, r14
 9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 9a2:	ba 2c       	mov	r11, r10
 9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 9a6:	b1 2e       	mov	r11, r17
 9a8:	04 ff       	sbrs	r16, 4
 9aa:	0d c0       	rjmp	.+26     	; 0x9c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 9ac:	fe 01       	movw	r30, r28
 9ae:	ea 0d       	add	r30, r10
 9b0:	f1 1d       	adc	r31, r1
 9b2:	80 81       	ld	r24, Z
 9b4:	80 33       	cpi	r24, 0x30	; 48
 9b6:	11 f4       	brne	.+4      	; 0x9bc <__EEPROM_REGION_LENGTH__+0x1bc>
 9b8:	09 7e       	andi	r16, 0xE9	; 233
 9ba:	09 c0       	rjmp	.+18     	; 0x9ce <__EEPROM_REGION_LENGTH__+0x1ce>
 9bc:	02 ff       	sbrs	r16, 2
 9be:	06 c0       	rjmp	.+12     	; 0x9cc <__EEPROM_REGION_LENGTH__+0x1cc>
 9c0:	b3 94       	inc	r11
 9c2:	b3 94       	inc	r11
 9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__EEPROM_REGION_LENGTH__+0x1ce>
 9c6:	80 2f       	mov	r24, r16
 9c8:	86 78       	andi	r24, 0x86	; 134
 9ca:	09 f0       	breq	.+2      	; 0x9ce <__EEPROM_REGION_LENGTH__+0x1ce>
 9cc:	b3 94       	inc	r11
 9ce:	03 fd       	sbrc	r16, 3
 9d0:	11 c0       	rjmp	.+34     	; 0x9f4 <__EEPROM_REGION_LENGTH__+0x1f4>
 9d2:	00 ff       	sbrs	r16, 0
 9d4:	06 c0       	rjmp	.+12     	; 0x9e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 9d6:	bf 14       	cp	r11, r15
 9d8:	88 f4       	brcc	.+34     	; 0x9fc <__EEPROM_REGION_LENGTH__+0x1fc>
 9da:	fa 0c       	add	r15, r10
 9dc:	1f 2d       	mov	r17, r15
 9de:	1b 19       	sub	r17, r11
 9e0:	0e c0       	rjmp	.+28     	; 0x9fe <__EEPROM_REGION_LENGTH__+0x1fe>
 9e2:	bf 14       	cp	r11, r15
 9e4:	60 f4       	brcc	.+24     	; 0x9fe <__EEPROM_REGION_LENGTH__+0x1fe>
 9e6:	b6 01       	movw	r22, r12
 9e8:	80 e2       	ldi	r24, 0x20	; 32
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 9f0:	b3 94       	inc	r11
 9f2:	f7 cf       	rjmp	.-18     	; 0x9e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 9f4:	bf 14       	cp	r11, r15
 9f6:	18 f4       	brcc	.+6      	; 0x9fe <__EEPROM_REGION_LENGTH__+0x1fe>
 9f8:	fb 18       	sub	r15, r11
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
 9fc:	1a 2d       	mov	r17, r10
 9fe:	f1 2c       	mov	r15, r1
 a00:	04 ff       	sbrs	r16, 4
 a02:	10 c0       	rjmp	.+32     	; 0xa24 <__EEPROM_REGION_LENGTH__+0x224>
 a04:	b6 01       	movw	r22, r12
 a06:	80 e3       	ldi	r24, 0x30	; 48
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 a0e:	02 ff       	sbrs	r16, 2
 a10:	17 c0       	rjmp	.+46     	; 0xa40 <__EEPROM_REGION_LENGTH__+0x240>
 a12:	01 fd       	sbrc	r16, 1
 a14:	03 c0       	rjmp	.+6      	; 0xa1c <__EEPROM_REGION_LENGTH__+0x21c>
 a16:	88 e7       	ldi	r24, 0x78	; 120
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__EEPROM_REGION_LENGTH__+0x220>
 a1c:	88 e5       	ldi	r24, 0x58	; 88
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	b6 01       	movw	r22, r12
 a22:	0c c0       	rjmp	.+24     	; 0xa3c <__EEPROM_REGION_LENGTH__+0x23c>
 a24:	80 2f       	mov	r24, r16
 a26:	86 78       	andi	r24, 0x86	; 134
 a28:	59 f0       	breq	.+22     	; 0xa40 <__EEPROM_REGION_LENGTH__+0x240>
 a2a:	01 ff       	sbrs	r16, 1
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <__EEPROM_REGION_LENGTH__+0x232>
 a2e:	8b e2       	ldi	r24, 0x2B	; 43
 a30:	01 c0       	rjmp	.+2      	; 0xa34 <__EEPROM_REGION_LENGTH__+0x234>
 a32:	80 e2       	ldi	r24, 0x20	; 32
 a34:	07 fd       	sbrc	r16, 7
 a36:	8d e2       	ldi	r24, 0x2D	; 45
 a38:	b6 01       	movw	r22, r12
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 a40:	a1 16       	cp	r10, r17
 a42:	38 f4       	brcc	.+14     	; 0xa52 <__EEPROM_REGION_LENGTH__+0x252>
 a44:	b6 01       	movw	r22, r12
 a46:	80 e3       	ldi	r24, 0x30	; 48
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 a4e:	11 50       	subi	r17, 0x01	; 1
 a50:	f7 cf       	rjmp	.-18     	; 0xa40 <__EEPROM_REGION_LENGTH__+0x240>
 a52:	aa 94       	dec	r10
 a54:	e1 e0       	ldi	r30, 0x01	; 1
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	ec 0f       	add	r30, r28
 a5a:	fd 1f       	adc	r31, r29
 a5c:	ea 0d       	add	r30, r10
 a5e:	f1 1d       	adc	r31, r1
 a60:	80 81       	ld	r24, Z
 a62:	b6 01       	movw	r22, r12
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 a6a:	a1 10       	cpse	r10, r1
 a6c:	f2 cf       	rjmp	.-28     	; 0xa52 <__EEPROM_REGION_LENGTH__+0x252>
 a6e:	19 c0       	rjmp	.+50     	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
 a70:	f4 e0       	ldi	r31, 0x04	; 4
 a72:	ff 15       	cp	r31, r15
 a74:	80 f5       	brcc	.+96     	; 0xad6 <__EEPROM_REGION_LENGTH__+0x2d6>
 a76:	84 e0       	ldi	r24, 0x04	; 4
 a78:	f8 1a       	sub	r15, r24
 a7a:	73 fe       	sbrs	r7, 3
 a7c:	23 c0       	rjmp	.+70     	; 0xac4 <__EEPROM_REGION_LENGTH__+0x2c4>
 a7e:	01 11       	cpse	r16, r1
 a80:	2b c0       	rjmp	.+86     	; 0xad8 <__EEPROM_REGION_LENGTH__+0x2d8>
 a82:	53 fe       	sbrs	r5, 3
 a84:	2f c0       	rjmp	.+94     	; 0xae4 <__EEPROM_REGION_LENGTH__+0x2e4>
 a86:	55 ed       	ldi	r21, 0xD5	; 213
 a88:	85 2e       	mov	r8, r21
 a8a:	53 e0       	ldi	r21, 0x03	; 3
 a8c:	95 2e       	mov	r9, r21
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	a5 2e       	mov	r10, r21
 a92:	07 2d       	mov	r16, r7
 a94:	00 71       	andi	r16, 0x10	; 16
 a96:	f4 01       	movw	r30, r8
 a98:	84 91       	lpm	r24, Z
 a9a:	a7 fc       	sbrc	r10, 7
 a9c:	80 81       	ld	r24, Z
 a9e:	81 11       	cpse	r24, r1
 aa0:	28 c0       	rjmp	.+80     	; 0xaf2 <__EEPROM_REGION_LENGTH__+0x2f2>
 aa2:	ff 20       	and	r15, r15
 aa4:	09 f4       	brne	.+2      	; 0xaa8 <__EEPROM_REGION_LENGTH__+0x2a8>
 aa6:	d2 cc       	rjmp	.-1628   	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 aa8:	b6 01       	movw	r22, r12
 aaa:	80 e2       	ldi	r24, 0x20	; 32
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 ab2:	fa 94       	dec	r15
 ab4:	f6 cf       	rjmp	.-20     	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
 ab6:	f6 01       	movw	r30, r12
 ab8:	87 81       	ldd	r24, Z+7	; 0x07
 aba:	90 85       	ldd	r25, Z+8	; 0x08
 abc:	2c c0       	rjmp	.+88     	; 0xb16 <__EEPROM_REGION_LENGTH__+0x316>
 abe:	8f ef       	ldi	r24, 0xFF	; 255
 ac0:	9f ef       	ldi	r25, 0xFF	; 255
 ac2:	29 c0       	rjmp	.+82     	; 0xb16 <__EEPROM_REGION_LENGTH__+0x316>
 ac4:	b6 01       	movw	r22, r12
 ac6:	80 e2       	ldi	r24, 0x20	; 32
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 ace:	fa 94       	dec	r15
 ad0:	f1 10       	cpse	r15, r1
 ad2:	f8 cf       	rjmp	.-16     	; 0xac4 <__EEPROM_REGION_LENGTH__+0x2c4>
 ad4:	d4 cf       	rjmp	.-88     	; 0xa7e <__EEPROM_REGION_LENGTH__+0x27e>
 ad6:	f1 2c       	mov	r15, r1
 ad8:	b6 01       	movw	r22, r12
 ada:	80 2f       	mov	r24, r16
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 ae2:	cf cf       	rjmp	.-98     	; 0xa82 <__EEPROM_REGION_LENGTH__+0x282>
 ae4:	41 ed       	ldi	r20, 0xD1	; 209
 ae6:	84 2e       	mov	r8, r20
 ae8:	43 e0       	ldi	r20, 0x03	; 3
 aea:	94 2e       	mov	r9, r20
 aec:	40 e0       	ldi	r20, 0x00	; 0
 aee:	a4 2e       	mov	r10, r20
 af0:	d0 cf       	rjmp	.-96     	; 0xa92 <__EEPROM_REGION_LENGTH__+0x292>
 af2:	01 11       	cpse	r16, r1
 af4:	80 52       	subi	r24, 0x20	; 32
 af6:	b6 01       	movw	r22, r12
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <fputc>
 afe:	ff ef       	ldi	r31, 0xFF	; 255
 b00:	8f 1a       	sub	r8, r31
 b02:	9f 0a       	sbc	r9, r31
 b04:	af 0a       	sbc	r10, r31
 b06:	c7 cf       	rjmp	.-114    	; 0xa96 <__EEPROM_REGION_LENGTH__+0x296>
 b08:	23 e0       	ldi	r18, 0x03	; 3
 b0a:	2f 15       	cp	r18, r15
 b0c:	10 f4       	brcc	.+4      	; 0xb12 <__EEPROM_REGION_LENGTH__+0x312>
 b0e:	83 e0       	ldi	r24, 0x03	; 3
 b10:	b3 cf       	rjmp	.-154    	; 0xa78 <__EEPROM_REGION_LENGTH__+0x278>
 b12:	f1 2c       	mov	r15, r1
 b14:	b6 cf       	rjmp	.-148    	; 0xa82 <__EEPROM_REGION_LENGTH__+0x282>
 b16:	64 96       	adiw	r28, 0x14	; 20
 b18:	e2 e1       	ldi	r30, 0x12	; 18
 b1a:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__epilogue_restores__>

Disassembly of section .text.libgcc:

00002d1e <__tablejump2__>:
    2d1e:	ee 0f       	add	r30, r30
    2d20:	ff 1f       	adc	r31, r31
    2d22:	05 90       	lpm	r0, Z+
    2d24:	f4 91       	lpm	r31, Z
    2d26:	e0 2d       	mov	r30, r0
    2d28:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00002b18 <__umulhisi3>:
    2b18:	a2 9f       	mul	r26, r18
    2b1a:	b0 01       	movw	r22, r0
    2b1c:	b3 9f       	mul	r27, r19
    2b1e:	c0 01       	movw	r24, r0
    2b20:	a3 9f       	mul	r26, r19
    2b22:	70 0d       	add	r23, r0
    2b24:	81 1d       	adc	r24, r1
    2b26:	11 24       	eor	r1, r1
    2b28:	91 1d       	adc	r25, r1
    2b2a:	b2 9f       	mul	r27, r18
    2b2c:	70 0d       	add	r23, r0
    2b2e:	81 1d       	adc	r24, r1
    2b30:	11 24       	eor	r1, r1
    2b32:	91 1d       	adc	r25, r1
    2b34:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00002718 <__prologue_saves__>:
    2718:	2f 92       	push	r2
    271a:	3f 92       	push	r3
    271c:	4f 92       	push	r4
    271e:	5f 92       	push	r5
    2720:	6f 92       	push	r6
    2722:	7f 92       	push	r7
    2724:	8f 92       	push	r8
    2726:	9f 92       	push	r9
    2728:	af 92       	push	r10
    272a:	bf 92       	push	r11
    272c:	cf 92       	push	r12
    272e:	df 92       	push	r13
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	ca 1b       	sub	r28, r26
    2742:	db 0b       	sbc	r29, r27
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00002786 <__epilogue_restores__>:
    2786:	2a 88       	ldd	r2, Y+18	; 0x12
    2788:	39 88       	ldd	r3, Y+17	; 0x11
    278a:	48 88       	ldd	r4, Y+16	; 0x10
    278c:	5f 84       	ldd	r5, Y+15	; 0x0f
    278e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2790:	7d 84       	ldd	r7, Y+13	; 0x0d
    2792:	8c 84       	ldd	r8, Y+12	; 0x0c
    2794:	9b 84       	ldd	r9, Y+11	; 0x0b
    2796:	aa 84       	ldd	r10, Y+10	; 0x0a
    2798:	b9 84       	ldd	r11, Y+9	; 0x09
    279a:	c8 84       	ldd	r12, Y+8	; 0x08
    279c:	df 80       	ldd	r13, Y+7	; 0x07
    279e:	ee 80       	ldd	r14, Y+6	; 0x06
    27a0:	fd 80       	ldd	r15, Y+5	; 0x05
    27a2:	0c 81       	ldd	r16, Y+4	; 0x04
    27a4:	1b 81       	ldd	r17, Y+3	; 0x03
    27a6:	aa 81       	ldd	r26, Y+2	; 0x02
    27a8:	b9 81       	ldd	r27, Y+1	; 0x01
    27aa:	ce 0f       	add	r28, r30
    27ac:	d1 1d       	adc	r29, r1
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	ed 01       	movw	r28, r26
    27ba:	08 95       	ret

Disassembly of section .text.avrlibc:

00002d60 <atoi>:
    2d60:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <atol>
    2d64:	cb 01       	movw	r24, r22
    2d66:	08 95       	ret

Disassembly of section .text.avrlibc:

00002cf6 <atol>:
    2cf6:	2a e0       	ldi	r18, 0x0A	; 10
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e0       	ldi	r20, 0x00	; 0
    2cfc:	50 e0       	ldi	r21, 0x00	; 0
    2cfe:	0e 94 8f 05 	call	0xb1e	; 0xb1e <strtol>
    2d02:	08 95       	ret

Disassembly of section .text.avrlibc:

00000b1e <strtol>:
 b1e:	2f 92       	push	r2
 b20:	3f 92       	push	r3
 b22:	4f 92       	push	r4
 b24:	5f 92       	push	r5
 b26:	6f 92       	push	r6
 b28:	7f 92       	push	r7
 b2a:	8f 92       	push	r8
 b2c:	af 92       	push	r10
 b2e:	bf 92       	push	r11
 b30:	cf 92       	push	r12
 b32:	df 92       	push	r13
 b34:	ef 92       	push	r14
 b36:	0f 93       	push	r16
 b38:	1f 93       	push	r17
 b3a:	cf 93       	push	r28
 b3c:	df 93       	push	r29
 b3e:	00 d0       	rcall	.+0      	; 0xb40 <strtol+0x22>
 b40:	00 d0       	rcall	.+0      	; 0xb42 <strtol+0x24>
 b42:	00 d0       	rcall	.+0      	; 0xb44 <strtol+0x26>
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
 b48:	3b 01       	movw	r6, r22
 b4a:	88 2e       	mov	r8, r24
 b4c:	5a 01       	movw	r10, r20
 b4e:	19 01       	movw	r2, r18
 b50:	41 15       	cp	r20, r1
 b52:	51 05       	cpc	r21, r1
 b54:	21 f0       	breq	.+8      	; 0xb5e <strtol+0x40>
 b56:	fa 01       	movw	r30, r20
 b58:	60 83       	st	Z, r22
 b5a:	71 83       	std	Z+1, r23	; 0x01
 b5c:	82 83       	std	Z+2, r24	; 0x02
 b5e:	21 14       	cp	r2, r1
 b60:	31 04       	cpc	r3, r1
 b62:	29 f0       	breq	.+10     	; 0xb6e <strtol+0x50>
 b64:	c1 01       	movw	r24, r2
 b66:	02 97       	sbiw	r24, 0x02	; 2
 b68:	83 97       	sbiw	r24, 0x23	; 35
 b6a:	08 f0       	brcs	.+2      	; 0xb6e <strtol+0x50>
 b6c:	1a c1       	rjmp	.+564    	; 0xda2 <strtol+0x284>
 b6e:	e8 2c       	mov	r14, r8
 b70:	63 01       	movw	r12, r6
 b72:	ff ef       	ldi	r31, 0xFF	; 255
 b74:	cf 1a       	sub	r12, r31
 b76:	df 0a       	sbc	r13, r31
 b78:	ef 0a       	sbc	r14, r31
 b7a:	f3 01       	movw	r30, r6
 b7c:	14 91       	lpm	r17, Z
 b7e:	87 fc       	sbrc	r8, 7
 b80:	10 81       	ld	r17, Z
 b82:	81 2f       	mov	r24, r17
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	0e 94 14 16 	call	0x2c28	; 0x2c28 <isspace>
 b8a:	4c 2d       	mov	r20, r12
 b8c:	3d 2d       	mov	r19, r13
 b8e:	2e 2d       	mov	r18, r14
 b90:	89 2b       	or	r24, r25
 b92:	19 f0       	breq	.+6      	; 0xb9a <strtol+0x7c>
 b94:	36 01       	movw	r6, r12
 b96:	8e 2c       	mov	r8, r14
 b98:	ea cf       	rjmp	.-44     	; 0xb6e <strtol+0x50>
 b9a:	1d 32       	cpi	r17, 0x2D	; 45
 b9c:	69 f4       	brne	.+26     	; 0xbb8 <strtol+0x9a>
 b9e:	e8 2c       	mov	r14, r8
 ba0:	63 01       	movw	r12, r6
 ba2:	52 e0       	ldi	r21, 0x02	; 2
 ba4:	c5 0e       	add	r12, r21
 ba6:	d1 1c       	adc	r13, r1
 ba8:	e1 1c       	adc	r14, r1
 baa:	e4 2f       	mov	r30, r20
 bac:	f3 2f       	mov	r31, r19
 bae:	14 91       	lpm	r17, Z
 bb0:	27 fd       	sbrc	r18, 7
 bb2:	10 81       	ld	r17, Z
 bb4:	01 e0       	ldi	r16, 0x01	; 1
 bb6:	0e c0       	rjmp	.+28     	; 0xbd4 <strtol+0xb6>
 bb8:	1b 32       	cpi	r17, 0x2B	; 43
 bba:	59 f4       	brne	.+22     	; 0xbd2 <strtol+0xb4>
 bbc:	e8 2c       	mov	r14, r8
 bbe:	63 01       	movw	r12, r6
 bc0:	82 e0       	ldi	r24, 0x02	; 2
 bc2:	c8 0e       	add	r12, r24
 bc4:	d1 1c       	adc	r13, r1
 bc6:	e1 1c       	adc	r14, r1
 bc8:	e4 2f       	mov	r30, r20
 bca:	f3 2f       	mov	r31, r19
 bcc:	14 91       	lpm	r17, Z
 bce:	27 fd       	sbrc	r18, 7
 bd0:	10 81       	ld	r17, Z
 bd2:	00 e0       	ldi	r16, 0x00	; 0
 bd4:	21 14       	cp	r2, r1
 bd6:	31 04       	cpc	r3, r1
 bd8:	09 f1       	breq	.+66     	; 0xc1c <strtol+0xfe>
 bda:	90 e1       	ldi	r25, 0x10	; 16
 bdc:	29 16       	cp	r2, r25
 bde:	31 04       	cpc	r3, r1
 be0:	29 f4       	brne	.+10     	; 0xbec <strtol+0xce>
 be2:	3f c0       	rjmp	.+126    	; 0xc62 <strtol+0x144>
 be4:	10 e3       	ldi	r17, 0x30	; 48
 be6:	21 14       	cp	r2, r1
 be8:	31 04       	cpc	r3, r1
 bea:	21 f1       	breq	.+72     	; 0xc34 <strtol+0x116>
 bec:	f8 e0       	ldi	r31, 0x08	; 8
 bee:	2f 16       	cp	r2, r31
 bf0:	31 04       	cpc	r3, r1
 bf2:	01 f1       	breq	.+64     	; 0xc34 <strtol+0x116>
 bf4:	54 f4       	brge	.+20     	; 0xc0a <strtol+0xec>
 bf6:	32 e0       	ldi	r19, 0x02	; 2
 bf8:	23 16       	cp	r2, r19
 bfa:	31 04       	cpc	r3, r1
 bfc:	21 f5       	brne	.+72     	; 0xc46 <strtol+0x128>
 bfe:	41 2c       	mov	r4, r1
 c00:	51 2c       	mov	r5, r1
 c02:	61 2c       	mov	r6, r1
 c04:	50 e4       	ldi	r21, 0x40	; 64
 c06:	75 2e       	mov	r7, r21
 c08:	4b c0       	rjmp	.+150    	; 0xca0 <strtol+0x182>
 c0a:	4a e0       	ldi	r20, 0x0A	; 10
 c0c:	24 16       	cp	r2, r20
 c0e:	31 04       	cpc	r3, r1
 c10:	39 f0       	breq	.+14     	; 0xc20 <strtol+0x102>
 c12:	50 e1       	ldi	r21, 0x10	; 16
 c14:	25 16       	cp	r2, r21
 c16:	31 04       	cpc	r3, r1
 c18:	b1 f4       	brne	.+44     	; 0xc46 <strtol+0x128>
 c1a:	3d c0       	rjmp	.+122    	; 0xc96 <strtol+0x178>
 c1c:	10 33       	cpi	r17, 0x30	; 48
 c1e:	19 f1       	breq	.+70     	; 0xc66 <strtol+0x148>
 c20:	3a e0       	ldi	r19, 0x0A	; 10
 c22:	23 2e       	mov	r2, r19
 c24:	31 2c       	mov	r3, r1
 c26:	4c ec       	ldi	r20, 0xCC	; 204
 c28:	44 2e       	mov	r4, r20
 c2a:	54 2c       	mov	r5, r4
 c2c:	64 2c       	mov	r6, r4
 c2e:	4c e0       	ldi	r20, 0x0C	; 12
 c30:	74 2e       	mov	r7, r20
 c32:	36 c0       	rjmp	.+108    	; 0xca0 <strtol+0x182>
 c34:	98 e0       	ldi	r25, 0x08	; 8
 c36:	29 2e       	mov	r2, r25
 c38:	31 2c       	mov	r3, r1
 c3a:	41 2c       	mov	r4, r1
 c3c:	51 2c       	mov	r5, r1
 c3e:	61 2c       	mov	r6, r1
 c40:	20 e1       	ldi	r18, 0x10	; 16
 c42:	72 2e       	mov	r7, r18
 c44:	2d c0       	rjmp	.+90     	; 0xca0 <strtol+0x182>
 c46:	60 e0       	ldi	r22, 0x00	; 0
 c48:	70 e0       	ldi	r23, 0x00	; 0
 c4a:	80 e0       	ldi	r24, 0x00	; 0
 c4c:	90 e8       	ldi	r25, 0x80	; 128
 c4e:	91 01       	movw	r18, r2
 c50:	03 2c       	mov	r0, r3
 c52:	00 0c       	add	r0, r0
 c54:	44 0b       	sbc	r20, r20
 c56:	55 0b       	sbc	r21, r21
 c58:	0e 94 b6 12 	call	0x256c	; 0x256c <__udivmodsi4>
 c5c:	29 01       	movw	r4, r18
 c5e:	3a 01       	movw	r6, r20
 c60:	1f c0       	rjmp	.+62     	; 0xca0 <strtol+0x182>
 c62:	10 33       	cpi	r17, 0x30	; 48
 c64:	c1 f4       	brne	.+48     	; 0xc96 <strtol+0x178>
 c66:	f6 01       	movw	r30, r12
 c68:	84 91       	lpm	r24, Z
 c6a:	e7 fc       	sbrc	r14, 7
 c6c:	80 81       	ld	r24, Z
 c6e:	8f 7d       	andi	r24, 0xDF	; 223
 c70:	88 35       	cpi	r24, 0x58	; 88
 c72:	09 f0       	breq	.+2      	; 0xc76 <strtol+0x158>
 c74:	b7 cf       	rjmp	.-146    	; 0xbe4 <strtol+0xc6>
 c76:	ae 2d       	mov	r26, r14
 c78:	c6 01       	movw	r24, r12
 c7a:	01 96       	adiw	r24, 0x01	; 1
 c7c:	a1 1d       	adc	r26, r1
 c7e:	fc 01       	movw	r30, r24
 c80:	14 91       	lpm	r17, Z
 c82:	a7 fd       	sbrc	r26, 7
 c84:	10 81       	ld	r17, Z
 c86:	e2 e0       	ldi	r30, 0x02	; 2
 c88:	ce 0e       	add	r12, r30
 c8a:	d1 1c       	adc	r13, r1
 c8c:	e1 1c       	adc	r14, r1
 c8e:	02 60       	ori	r16, 0x02	; 2
 c90:	60 e1       	ldi	r22, 0x10	; 16
 c92:	26 2e       	mov	r2, r22
 c94:	31 2c       	mov	r3, r1
 c96:	41 2c       	mov	r4, r1
 c98:	51 2c       	mov	r5, r1
 c9a:	61 2c       	mov	r6, r1
 c9c:	88 e0       	ldi	r24, 0x08	; 8
 c9e:	78 2e       	mov	r7, r24
 ca0:	a0 e0       	ldi	r26, 0x00	; 0
 ca2:	60 e0       	ldi	r22, 0x00	; 0
 ca4:	70 e0       	ldi	r23, 0x00	; 0
 ca6:	cb 01       	movw	r24, r22
 ca8:	91 01       	movw	r18, r2
 caa:	03 2c       	mov	r0, r3
 cac:	00 0c       	add	r0, r0
 cae:	44 0b       	sbc	r20, r20
 cb0:	55 0b       	sbc	r21, r21
 cb2:	29 83       	std	Y+1, r18	; 0x01
 cb4:	3a 83       	std	Y+2, r19	; 0x02
 cb6:	4b 83       	std	Y+3, r20	; 0x03
 cb8:	5c 83       	std	Y+4, r21	; 0x04
 cba:	e0 ed       	ldi	r30, 0xD0	; 208
 cbc:	e1 0f       	add	r30, r17
 cbe:	ea 30       	cpi	r30, 0x0A	; 10
 cc0:	60 f0       	brcs	.+24     	; 0xcda <strtol+0x1bc>
 cc2:	2f eb       	ldi	r18, 0xBF	; 191
 cc4:	21 0f       	add	r18, r17
 cc6:	2a 31       	cpi	r18, 0x1A	; 26
 cc8:	10 f4       	brcc	.+4      	; 0xcce <strtol+0x1b0>
 cca:	e9 ec       	ldi	r30, 0xC9	; 201
 ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <strtol+0x1ba>
 cce:	2f e9       	ldi	r18, 0x9F	; 159
 cd0:	21 0f       	add	r18, r17
 cd2:	2a 31       	cpi	r18, 0x1A	; 26
 cd4:	50 f5       	brcc	.+84     	; 0xd2a <strtol+0x20c>
 cd6:	e9 ea       	ldi	r30, 0xA9	; 169
 cd8:	e1 0f       	add	r30, r17
 cda:	2e 2f       	mov	r18, r30
 cdc:	30 e0       	ldi	r19, 0x00	; 0
 cde:	22 15       	cp	r18, r2
 ce0:	33 05       	cpc	r19, r3
 ce2:	1c f5       	brge	.+70     	; 0xd2a <strtol+0x20c>
 ce4:	a7 fd       	sbrc	r26, 7
 ce6:	18 c0       	rjmp	.+48     	; 0xd18 <strtol+0x1fa>
 ce8:	46 16       	cp	r4, r22
 cea:	57 06       	cpc	r5, r23
 cec:	68 06       	cpc	r6, r24
 cee:	79 06       	cpc	r7, r25
 cf0:	80 f0       	brcs	.+32     	; 0xd12 <strtol+0x1f4>
 cf2:	29 81       	ldd	r18, Y+1	; 0x01
 cf4:	3a 81       	ldd	r19, Y+2	; 0x02
 cf6:	4b 81       	ldd	r20, Y+3	; 0x03
 cf8:	5c 81       	ldd	r21, Y+4	; 0x04
 cfa:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__mulsi3>
 cfe:	6e 0f       	add	r22, r30
 d00:	71 1d       	adc	r23, r1
 d02:	81 1d       	adc	r24, r1
 d04:	91 1d       	adc	r25, r1
 d06:	61 30       	cpi	r22, 0x01	; 1
 d08:	71 05       	cpc	r23, r1
 d0a:	81 05       	cpc	r24, r1
 d0c:	30 e8       	ldi	r19, 0x80	; 128
 d0e:	93 07       	cpc	r25, r19
 d10:	10 f0       	brcs	.+4      	; 0xd16 <strtol+0x1f8>
 d12:	af ef       	ldi	r26, 0xFF	; 255
 d14:	01 c0       	rjmp	.+2      	; 0xd18 <strtol+0x1fa>
 d16:	a1 e0       	ldi	r26, 0x01	; 1
 d18:	f6 01       	movw	r30, r12
 d1a:	14 91       	lpm	r17, Z
 d1c:	e7 fc       	sbrc	r14, 7
 d1e:	10 81       	ld	r17, Z
 d20:	4f ef       	ldi	r20, 0xFF	; 255
 d22:	c4 1a       	sub	r12, r20
 d24:	d4 0a       	sbc	r13, r20
 d26:	e4 0a       	sbc	r14, r20
 d28:	c8 cf       	rjmp	.-112    	; 0xcba <strtol+0x19c>
 d2a:	20 2f       	mov	r18, r16
 d2c:	21 70       	andi	r18, 0x01	; 1
 d2e:	a1 14       	cp	r10, r1
 d30:	b1 04       	cpc	r11, r1
 d32:	b1 f0       	breq	.+44     	; 0xd60 <strtol+0x242>
 d34:	aa 23       	and	r26, r26
 d36:	49 f0       	breq	.+18     	; 0xd4a <strtol+0x22c>
 d38:	51 e0       	ldi	r21, 0x01	; 1
 d3a:	c5 1a       	sub	r12, r21
 d3c:	d1 08       	sbc	r13, r1
 d3e:	e1 08       	sbc	r14, r1
 d40:	f5 01       	movw	r30, r10
 d42:	c0 82       	st	Z, r12
 d44:	d1 82       	std	Z+1, r13	; 0x01
 d46:	e2 82       	std	Z+2, r14	; 0x02
 d48:	0b c0       	rjmp	.+22     	; 0xd60 <strtol+0x242>
 d4a:	01 ff       	sbrs	r16, 1
 d4c:	1d c0       	rjmp	.+58     	; 0xd88 <strtol+0x26a>
 d4e:	f2 e0       	ldi	r31, 0x02	; 2
 d50:	cf 1a       	sub	r12, r31
 d52:	d1 08       	sbc	r13, r1
 d54:	e1 08       	sbc	r14, r1
 d56:	f5 01       	movw	r30, r10
 d58:	c0 82       	st	Z, r12
 d5a:	d1 82       	std	Z+1, r13	; 0x01
 d5c:	e2 82       	std	Z+2, r14	; 0x02
 d5e:	14 c0       	rjmp	.+40     	; 0xd88 <strtol+0x26a>
 d60:	a7 ff       	sbrs	r26, 7
 d62:	12 c0       	rjmp	.+36     	; 0xd88 <strtol+0x26a>
 d64:	22 23       	and	r18, r18
 d66:	29 f0       	breq	.+10     	; 0xd72 <strtol+0x254>
 d68:	60 e0       	ldi	r22, 0x00	; 0
 d6a:	70 e0       	ldi	r23, 0x00	; 0
 d6c:	80 e0       	ldi	r24, 0x00	; 0
 d6e:	90 e8       	ldi	r25, 0x80	; 128
 d70:	04 c0       	rjmp	.+8      	; 0xd7a <strtol+0x25c>
 d72:	6f ef       	ldi	r22, 0xFF	; 255
 d74:	7f ef       	ldi	r23, 0xFF	; 255
 d76:	8f ef       	ldi	r24, 0xFF	; 255
 d78:	9f e7       	ldi	r25, 0x7F	; 127
 d7a:	22 e2       	ldi	r18, 0x22	; 34
 d7c:	30 e0       	ldi	r19, 0x00	; 0
 d7e:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <errno+0x1>
 d82:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <errno>
 d86:	09 c0       	rjmp	.+18     	; 0xd9a <strtol+0x27c>
 d88:	22 23       	and	r18, r18
 d8a:	81 f0       	breq	.+32     	; 0xdac <strtol+0x28e>
 d8c:	90 95       	com	r25
 d8e:	80 95       	com	r24
 d90:	70 95       	com	r23
 d92:	61 95       	neg	r22
 d94:	7f 4f       	sbci	r23, 0xFF	; 255
 d96:	8f 4f       	sbci	r24, 0xFF	; 255
 d98:	9f 4f       	sbci	r25, 0xFF	; 255
 d9a:	46 2f       	mov	r20, r22
 d9c:	37 2f       	mov	r19, r23
 d9e:	28 2f       	mov	r18, r24
 da0:	12 c0       	rjmp	.+36     	; 0xdc6 <strtol+0x2a8>
 da2:	40 e0       	ldi	r20, 0x00	; 0
 da4:	30 e0       	ldi	r19, 0x00	; 0
 da6:	20 e0       	ldi	r18, 0x00	; 0
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	0d c0       	rjmp	.+26     	; 0xdc6 <strtol+0x2a8>
 dac:	97 ff       	sbrs	r25, 7
 dae:	f5 cf       	rjmp	.-22     	; 0xd9a <strtol+0x27c>
 db0:	82 e2       	ldi	r24, 0x22	; 34
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <errno+0x1>
 db8:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <errno>
 dbc:	6f ef       	ldi	r22, 0xFF	; 255
 dbe:	7f ef       	ldi	r23, 0xFF	; 255
 dc0:	8f ef       	ldi	r24, 0xFF	; 255
 dc2:	9f e7       	ldi	r25, 0x7F	; 127
 dc4:	ea cf       	rjmp	.-44     	; 0xd9a <strtol+0x27c>
 dc6:	64 2f       	mov	r22, r20
 dc8:	73 2f       	mov	r23, r19
 dca:	82 2f       	mov	r24, r18
 dcc:	26 96       	adiw	r28, 0x06	; 6
 dce:	0f b6       	in	r0, 0x3f	; 63
 dd0:	f8 94       	cli
 dd2:	de bf       	out	0x3e, r29	; 62
 dd4:	0f be       	out	0x3f, r0	; 63
 dd6:	cd bf       	out	0x3d, r28	; 61
 dd8:	df 91       	pop	r29
 dda:	cf 91       	pop	r28
 ddc:	1f 91       	pop	r17
 dde:	0f 91       	pop	r16
 de0:	ef 90       	pop	r14
 de2:	df 90       	pop	r13
 de4:	cf 90       	pop	r12
 de6:	bf 90       	pop	r11
 de8:	af 90       	pop	r10
 dea:	8f 90       	pop	r8
 dec:	7f 90       	pop	r7
 dee:	6f 90       	pop	r6
 df0:	5f 90       	pop	r5
 df2:	4f 90       	pop	r4
 df4:	3f 90       	pop	r3
 df6:	2f 90       	pop	r2
 df8:	08 95       	ret

Disassembly of section .text.avrlibc:

00000fd2 <__ftoa_engine>:
     fd2:	28 30       	cpi	r18, 0x08	; 8
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <__ftoa_engine+0x6>
     fd6:	27 e0       	ldi	r18, 0x07	; 7
     fd8:	33 27       	eor	r19, r19
     fda:	da 01       	movw	r26, r20
     fdc:	99 0f       	add	r25, r25
     fde:	31 1d       	adc	r19, r1
     fe0:	87 fd       	sbrc	r24, 7
     fe2:	91 60       	ori	r25, 0x01	; 1
     fe4:	00 96       	adiw	r24, 0x00	; 0
     fe6:	61 05       	cpc	r22, r1
     fe8:	71 05       	cpc	r23, r1
     fea:	39 f4       	brne	.+14     	; 0xffa <__ftoa_engine+0x28>
     fec:	32 60       	ori	r19, 0x02	; 2
     fee:	2e 5f       	subi	r18, 0xFE	; 254
     ff0:	3d 93       	st	X+, r19
     ff2:	30 e3       	ldi	r19, 0x30	; 48
     ff4:	2a 95       	dec	r18
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <__ftoa_engine+0x1e>
     ff8:	08 95       	ret
     ffa:	9f 3f       	cpi	r25, 0xFF	; 255
     ffc:	30 f0       	brcs	.+12     	; 0x100a <__DATA_REGION_LENGTH__+0xa>
     ffe:	80 38       	cpi	r24, 0x80	; 128
    1000:	71 05       	cpc	r23, r1
    1002:	61 05       	cpc	r22, r1
    1004:	09 f0       	breq	.+2      	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    1006:	3c 5f       	subi	r19, 0xFC	; 252
    1008:	3c 5f       	subi	r19, 0xFC	; 252
    100a:	3d 93       	st	X+, r19
    100c:	91 30       	cpi	r25, 0x01	; 1
    100e:	08 f0       	brcs	.+2      	; 0x1012 <__DATA_REGION_LENGTH__+0x12>
    1010:	80 68       	ori	r24, 0x80	; 128
    1012:	91 1d       	adc	r25, r1
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	1f 93       	push	r17
    101a:	0f 93       	push	r16
    101c:	ff 92       	push	r15
    101e:	ef 92       	push	r14
    1020:	19 2f       	mov	r17, r25
    1022:	98 7f       	andi	r25, 0xF8	; 248
    1024:	96 95       	lsr	r25
    1026:	e9 2f       	mov	r30, r25
    1028:	96 95       	lsr	r25
    102a:	96 95       	lsr	r25
    102c:	e9 0f       	add	r30, r25
    102e:	ff 27       	eor	r31, r31
    1030:	ee 50       	subi	r30, 0x0E	; 14
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	99 27       	eor	r25, r25
    1036:	33 27       	eor	r19, r19
    1038:	ee 24       	eor	r14, r14
    103a:	ff 24       	eor	r15, r15
    103c:	a7 01       	movw	r20, r14
    103e:	e7 01       	movw	r28, r14
    1040:	05 90       	lpm	r0, Z+
    1042:	08 94       	sec
    1044:	07 94       	ror	r0
    1046:	28 f4       	brcc	.+10     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    1048:	36 0f       	add	r19, r22
    104a:	e7 1e       	adc	r14, r23
    104c:	f8 1e       	adc	r15, r24
    104e:	49 1f       	adc	r20, r25
    1050:	51 1d       	adc	r21, r1
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	06 94       	lsr	r0
    105c:	a1 f7       	brne	.-24     	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
    105e:	05 90       	lpm	r0, Z+
    1060:	07 94       	ror	r0
    1062:	28 f4       	brcc	.+10     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    1064:	e7 0e       	add	r14, r23
    1066:	f8 1e       	adc	r15, r24
    1068:	49 1f       	adc	r20, r25
    106a:	56 1f       	adc	r21, r22
    106c:	c1 1d       	adc	r28, r1
    106e:	77 0f       	add	r23, r23
    1070:	88 1f       	adc	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	66 1f       	adc	r22, r22
    1076:	06 94       	lsr	r0
    1078:	a1 f7       	brne	.-24     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    107a:	05 90       	lpm	r0, Z+
    107c:	07 94       	ror	r0
    107e:	28 f4       	brcc	.+10     	; 0x108a <__DATA_REGION_LENGTH__+0x8a>
    1080:	f8 0e       	add	r15, r24
    1082:	49 1f       	adc	r20, r25
    1084:	56 1f       	adc	r21, r22
    1086:	c7 1f       	adc	r28, r23
    1088:	d1 1d       	adc	r29, r1
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	66 1f       	adc	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	06 94       	lsr	r0
    1094:	a1 f7       	brne	.-24     	; 0x107e <__DATA_REGION_LENGTH__+0x7e>
    1096:	05 90       	lpm	r0, Z+
    1098:	07 94       	ror	r0
    109a:	20 f4       	brcc	.+8      	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    109c:	49 0f       	add	r20, r25
    109e:	56 1f       	adc	r21, r22
    10a0:	c7 1f       	adc	r28, r23
    10a2:	d8 1f       	adc	r29, r24
    10a4:	99 0f       	add	r25, r25
    10a6:	66 1f       	adc	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	06 94       	lsr	r0
    10ae:	a9 f7       	brne	.-22     	; 0x109a <__DATA_REGION_LENGTH__+0x9a>
    10b0:	84 91       	lpm	r24, Z
    10b2:	10 95       	com	r17
    10b4:	17 70       	andi	r17, 0x07	; 7
    10b6:	41 f0       	breq	.+16     	; 0x10c8 <__DATA_REGION_LENGTH__+0xc8>
    10b8:	d6 95       	lsr	r29
    10ba:	c7 95       	ror	r28
    10bc:	57 95       	ror	r21
    10be:	47 95       	ror	r20
    10c0:	f7 94       	ror	r15
    10c2:	e7 94       	ror	r14
    10c4:	1a 95       	dec	r17
    10c6:	c1 f7       	brne	.-16     	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    10c8:	e8 e9       	ldi	r30, 0x98	; 152
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	68 94       	set
    10ce:	15 90       	lpm	r1, Z+
    10d0:	15 91       	lpm	r17, Z+
    10d2:	35 91       	lpm	r19, Z+
    10d4:	65 91       	lpm	r22, Z+
    10d6:	95 91       	lpm	r25, Z+
    10d8:	05 90       	lpm	r0, Z+
    10da:	7f e2       	ldi	r23, 0x2F	; 47
    10dc:	73 95       	inc	r23
    10de:	e1 18       	sub	r14, r1
    10e0:	f1 0a       	sbc	r15, r17
    10e2:	43 0b       	sbc	r20, r19
    10e4:	56 0b       	sbc	r21, r22
    10e6:	c9 0b       	sbc	r28, r25
    10e8:	d0 09       	sbc	r29, r0
    10ea:	c0 f7       	brcc	.-16     	; 0x10dc <__DATA_REGION_LENGTH__+0xdc>
    10ec:	e1 0c       	add	r14, r1
    10ee:	f1 1e       	adc	r15, r17
    10f0:	43 1f       	adc	r20, r19
    10f2:	56 1f       	adc	r21, r22
    10f4:	c9 1f       	adc	r28, r25
    10f6:	d0 1d       	adc	r29, r0
    10f8:	7e f4       	brtc	.+30     	; 0x1118 <__stack+0x19>
    10fa:	70 33       	cpi	r23, 0x30	; 48
    10fc:	11 f4       	brne	.+4      	; 0x1102 <__stack+0x3>
    10fe:	8a 95       	dec	r24
    1100:	e6 cf       	rjmp	.-52     	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    1102:	e8 94       	clt
    1104:	01 50       	subi	r16, 0x01	; 1
    1106:	30 f0       	brcs	.+12     	; 0x1114 <__stack+0x15>
    1108:	08 0f       	add	r16, r24
    110a:	0a f4       	brpl	.+2      	; 0x110e <__stack+0xf>
    110c:	00 27       	eor	r16, r16
    110e:	02 17       	cp	r16, r18
    1110:	08 f4       	brcc	.+2      	; 0x1114 <__stack+0x15>
    1112:	20 2f       	mov	r18, r16
    1114:	23 95       	inc	r18
    1116:	02 2f       	mov	r16, r18
    1118:	7a 33       	cpi	r23, 0x3A	; 58
    111a:	28 f0       	brcs	.+10     	; 0x1126 <__stack+0x27>
    111c:	79 e3       	ldi	r23, 0x39	; 57
    111e:	7d 93       	st	X+, r23
    1120:	2a 95       	dec	r18
    1122:	e9 f7       	brne	.-6      	; 0x111e <__stack+0x1f>
    1124:	10 c0       	rjmp	.+32     	; 0x1146 <__stack+0x47>
    1126:	7d 93       	st	X+, r23
    1128:	2a 95       	dec	r18
    112a:	89 f6       	brne	.-94     	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    112c:	06 94       	lsr	r0
    112e:	97 95       	ror	r25
    1130:	67 95       	ror	r22
    1132:	37 95       	ror	r19
    1134:	17 95       	ror	r17
    1136:	17 94       	ror	r1
    1138:	e1 18       	sub	r14, r1
    113a:	f1 0a       	sbc	r15, r17
    113c:	43 0b       	sbc	r20, r19
    113e:	56 0b       	sbc	r21, r22
    1140:	c9 0b       	sbc	r28, r25
    1142:	d0 09       	sbc	r29, r0
    1144:	98 f0       	brcs	.+38     	; 0x116c <__stack+0x6d>
    1146:	23 95       	inc	r18
    1148:	7e 91       	ld	r23, -X
    114a:	73 95       	inc	r23
    114c:	7a 33       	cpi	r23, 0x3A	; 58
    114e:	08 f0       	brcs	.+2      	; 0x1152 <__stack+0x53>
    1150:	70 e3       	ldi	r23, 0x30	; 48
    1152:	7c 93       	st	X, r23
    1154:	20 13       	cpse	r18, r16
    1156:	b8 f7       	brcc	.-18     	; 0x1146 <__stack+0x47>
    1158:	7e 91       	ld	r23, -X
    115a:	70 61       	ori	r23, 0x10	; 16
    115c:	7d 93       	st	X+, r23
    115e:	30 f0       	brcs	.+12     	; 0x116c <__stack+0x6d>
    1160:	83 95       	inc	r24
    1162:	71 e3       	ldi	r23, 0x31	; 49
    1164:	7d 93       	st	X+, r23
    1166:	70 e3       	ldi	r23, 0x30	; 48
    1168:	2a 95       	dec	r18
    116a:	e1 f7       	brne	.-8      	; 0x1164 <__stack+0x65>
    116c:	11 24       	eor	r1, r1
    116e:	ef 90       	pop	r14
    1170:	ff 90       	pop	r15
    1172:	0f 91       	pop	r16
    1174:	1f 91       	pop	r17
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	99 27       	eor	r25, r25
    117c:	87 fd       	sbrc	r24, 7
    117e:	90 95       	com	r25
    1180:	08 95       	ret

Disassembly of section .text.avrlibc:

00002c28 <isspace>:
    2c28:	91 11       	cpse	r25, r1
    2c2a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__ctype_isfalse>
    2c2e:	80 32       	cpi	r24, 0x20	; 32
    2c30:	19 f0       	breq	.+6      	; 0x2c38 <isspace+0x10>
    2c32:	89 50       	subi	r24, 0x09	; 9
    2c34:	85 50       	subi	r24, 0x05	; 5
    2c36:	c8 f7       	brcc	.-14     	; 0x2c2a <isspace+0x2>
    2c38:	08 95       	ret

Disassembly of section .text.avrlibc:

00002826 <memcpy>:
    2826:	cf 92       	push	r12
    2828:	df 92       	push	r13
    282a:	ef 92       	push	r14
    282c:	dc 01       	movw	r26, r24
    282e:	6a 01       	movw	r12, r20
    2830:	e6 2e       	mov	r14, r22
    2832:	28 0f       	add	r18, r24
    2834:	39 1f       	adc	r19, r25
    2836:	a2 17       	cp	r26, r18
    2838:	b3 07       	cpc	r27, r19
    283a:	51 f0       	breq	.+20     	; 0x2850 <memcpy+0x2a>
    283c:	f6 01       	movw	r30, r12
    283e:	44 91       	lpm	r20, Z
    2840:	e7 fc       	sbrc	r14, 7
    2842:	40 81       	ld	r20, Z
    2844:	4d 93       	st	X+, r20
    2846:	4f ef       	ldi	r20, 0xFF	; 255
    2848:	c4 1a       	sub	r12, r20
    284a:	d4 0a       	sbc	r13, r20
    284c:	e4 0a       	sbc	r14, r20
    284e:	f3 cf       	rjmp	.-26     	; 0x2836 <memcpy+0x10>
    2850:	ef 90       	pop	r14
    2852:	df 90       	pop	r13
    2854:	cf 90       	pop	r12
    2856:	08 95       	ret

Disassembly of section .text.avrlibc:

00002944 <strcat>:
    2944:	9a 01       	movw	r18, r20
    2946:	46 2f       	mov	r20, r22
    2948:	dc 01       	movw	r26, r24
    294a:	bd 01       	movw	r22, r26
    294c:	6f 5f       	subi	r22, 0xFF	; 255
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	5c 91       	ld	r21, X
    2952:	55 23       	and	r21, r21
    2954:	11 f0       	breq	.+4      	; 0x295a <strcat+0x16>
    2956:	db 01       	movw	r26, r22
    2958:	f8 cf       	rjmp	.-16     	; 0x294a <strcat+0x6>
    295a:	f9 01       	movw	r30, r18
    295c:	54 91       	lpm	r21, Z
    295e:	47 fd       	sbrc	r20, 7
    2960:	50 81       	ld	r21, Z
    2962:	5d 93       	st	X+, r21
    2964:	55 23       	and	r21, r21
    2966:	21 f0       	breq	.+8      	; 0x2970 <strcat+0x2c>
    2968:	2f 5f       	subi	r18, 0xFF	; 255
    296a:	3f 4f       	sbci	r19, 0xFF	; 255
    296c:	4f 4f       	sbci	r20, 0xFF	; 255
    296e:	f5 cf       	rjmp	.-22     	; 0x295a <strcat+0x16>
    2970:	08 95       	ret

Disassembly of section .text.avrlibc:

000025b0 <strcmp>:
    25b0:	cf 92       	push	r12
    25b2:	df 92       	push	r13
    25b4:	ef 92       	push	r14
    25b6:	6b 01       	movw	r12, r22
    25b8:	e8 2e       	mov	r14, r24
    25ba:	f6 01       	movw	r30, r12
    25bc:	84 91       	lpm	r24, Z
    25be:	e7 fc       	sbrc	r14, 7
    25c0:	80 81       	ld	r24, Z
    25c2:	f9 01       	movw	r30, r18
    25c4:	54 91       	lpm	r21, Z
    25c6:	47 fd       	sbrc	r20, 7
    25c8:	50 81       	ld	r21, Z
    25ca:	85 13       	cpse	r24, r21
    25cc:	0b c0       	rjmp	.+22     	; 0x25e4 <strcmp+0x34>
    25ce:	88 23       	and	r24, r24
    25d0:	41 f0       	breq	.+16     	; 0x25e2 <strcmp+0x32>
    25d2:	8f ef       	ldi	r24, 0xFF	; 255
    25d4:	c8 1a       	sub	r12, r24
    25d6:	d8 0a       	sbc	r13, r24
    25d8:	e8 0a       	sbc	r14, r24
    25da:	2f 5f       	subi	r18, 0xFF	; 255
    25dc:	3f 4f       	sbci	r19, 0xFF	; 255
    25de:	4f 4f       	sbci	r20, 0xFF	; 255
    25e0:	ec cf       	rjmp	.-40     	; 0x25ba <strcmp+0xa>
    25e2:	58 2f       	mov	r21, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	85 1b       	sub	r24, r21
    25e8:	91 09       	sbc	r25, r1
    25ea:	ef 90       	pop	r14
    25ec:	df 90       	pop	r13
    25ee:	cf 90       	pop	r12
    25f0:	08 95       	ret

Disassembly of section .text.avrlibc:

000020d2 <strncmp>:
    20d2:	cf 92       	push	r12
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	6b 01       	movw	r12, r22
    20de:	e8 2e       	mov	r14, r24
    20e0:	01 15       	cp	r16, r1
    20e2:	11 05       	cpc	r17, r1
    20e4:	19 f1       	breq	.+70     	; 0x212c <strncmp+0x5a>
    20e6:	01 50       	subi	r16, 0x01	; 1
    20e8:	11 09       	sbc	r17, r1
    20ea:	f6 01       	movw	r30, r12
    20ec:	84 91       	lpm	r24, Z
    20ee:	e7 fc       	sbrc	r14, 7
    20f0:	80 81       	ld	r24, Z
    20f2:	88 23       	and	r24, r24
    20f4:	99 f0       	breq	.+38     	; 0x211c <strncmp+0x4a>
    20f6:	f9 01       	movw	r30, r18
    20f8:	94 91       	lpm	r25, Z
    20fa:	47 fd       	sbrc	r20, 7
    20fc:	90 81       	ld	r25, Z
    20fe:	99 23       	and	r25, r25
    2100:	69 f0       	breq	.+26     	; 0x211c <strncmp+0x4a>
    2102:	01 15       	cp	r16, r1
    2104:	11 05       	cpc	r17, r1
    2106:	51 f0       	breq	.+20     	; 0x211c <strncmp+0x4a>
    2108:	89 13       	cpse	r24, r25
    210a:	08 c0       	rjmp	.+16     	; 0x211c <strncmp+0x4a>
    210c:	8f ef       	ldi	r24, 0xFF	; 255
    210e:	c8 1a       	sub	r12, r24
    2110:	d8 0a       	sbc	r13, r24
    2112:	e8 0a       	sbc	r14, r24
    2114:	2f 5f       	subi	r18, 0xFF	; 255
    2116:	3f 4f       	sbci	r19, 0xFF	; 255
    2118:	4f 4f       	sbci	r20, 0xFF	; 255
    211a:	e5 cf       	rjmp	.-54     	; 0x20e6 <strncmp+0x14>
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	f9 01       	movw	r30, r18
    2120:	24 91       	lpm	r18, Z
    2122:	47 fd       	sbrc	r20, 7
    2124:	20 81       	ld	r18, Z
    2126:	82 1b       	sub	r24, r18
    2128:	91 09       	sbc	r25, r1
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <strncmp+0x5e>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	ef 90       	pop	r14
    2136:	df 90       	pop	r13
    2138:	cf 90       	pop	r12
    213a:	08 95       	ret

Disassembly of section .text.avrlibc:

00002972 <strlen>:
    2972:	cf 92       	push	r12
    2974:	df 92       	push	r13
    2976:	ef 92       	push	r14
    2978:	6b 01       	movw	r12, r22
    297a:	e8 2e       	mov	r14, r24
    297c:	a8 2f       	mov	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	fc 01       	movw	r30, r24
    2982:	24 91       	lpm	r18, Z
    2984:	a7 fd       	sbrc	r26, 7
    2986:	20 81       	ld	r18, Z
    2988:	22 23       	and	r18, r18
    298a:	19 f0       	breq	.+6      	; 0x2992 <strlen+0x20>
    298c:	01 96       	adiw	r24, 0x01	; 1
    298e:	a1 1d       	adc	r26, r1
    2990:	f7 cf       	rjmp	.-18     	; 0x2980 <strlen+0xe>
    2992:	8c 19       	sub	r24, r12
    2994:	9d 09       	sbc	r25, r13
    2996:	ef 90       	pop	r14
    2998:	df 90       	pop	r13
    299a:	cf 90       	pop	r12
    299c:	08 95       	ret

Disassembly of section .text.avrlibc:

00002b36 <strcpy>:
    2b36:	9a 01       	movw	r18, r20
    2b38:	46 2f       	mov	r20, r22
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	f9 01       	movw	r30, r18
    2b3e:	54 91       	lpm	r21, Z
    2b40:	47 fd       	sbrc	r20, 7
    2b42:	50 81       	ld	r21, Z
    2b44:	5d 93       	st	X+, r21
    2b46:	55 23       	and	r21, r21
    2b48:	21 f0       	breq	.+8      	; 0x2b52 <strcpy+0x1c>
    2b4a:	2f 5f       	subi	r18, 0xFF	; 255
    2b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4e:	4f 4f       	sbci	r20, 0xFF	; 255
    2b50:	f5 cf       	rjmp	.-22     	; 0x2b3c <strcpy+0x6>
    2b52:	08 95       	ret

Disassembly of section .text.avrlibc:

000027bc <strnlen>:
    27bc:	cf 92       	push	r12
    27be:	df 92       	push	r13
    27c0:	ef 92       	push	r14
    27c2:	6b 01       	movw	r12, r22
    27c4:	e8 2e       	mov	r14, r24
    27c6:	a8 2f       	mov	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	41 15       	cp	r20, r1
    27cc:	51 05       	cpc	r21, r1
    27ce:	31 f4       	brne	.+12     	; 0x27dc <strnlen+0x20>
    27d0:	8c 19       	sub	r24, r12
    27d2:	9d 09       	sbc	r25, r13
    27d4:	ef 90       	pop	r14
    27d6:	df 90       	pop	r13
    27d8:	cf 90       	pop	r12
    27da:	08 95       	ret
    27dc:	fc 01       	movw	r30, r24
    27de:	24 91       	lpm	r18, Z
    27e0:	a7 fd       	sbrc	r26, 7
    27e2:	20 81       	ld	r18, Z
    27e4:	22 23       	and	r18, r18
    27e6:	a1 f3       	breq	.-24     	; 0x27d0 <strnlen+0x14>
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	a1 1d       	adc	r26, r1
    27ec:	41 50       	subi	r20, 0x01	; 1
    27ee:	51 09       	sbc	r21, r1
    27f0:	ec cf       	rjmp	.-40     	; 0x27ca <strnlen+0xe>

Disassembly of section .text.avrlibc:

00001f06 <fputc>:
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	fb 01       	movw	r30, r22
    1f10:	24 81       	ldd	r18, Z+4	; 0x04
    1f12:	21 fd       	sbrc	r18, 1
    1f14:	03 c0       	rjmp	.+6      	; 0x1f1c <fputc+0x16>
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	9f ef       	ldi	r25, 0xFF	; 255
    1f1a:	2c c0       	rjmp	.+88     	; 0x1f74 <fputc+0x6e>
    1f1c:	22 ff       	sbrs	r18, 2
    1f1e:	16 c0       	rjmp	.+44     	; 0x1f4c <fputc+0x46>
    1f20:	47 81       	ldd	r20, Z+7	; 0x07
    1f22:	50 85       	ldd	r21, Z+8	; 0x08
    1f24:	25 81       	ldd	r18, Z+5	; 0x05
    1f26:	36 81       	ldd	r19, Z+6	; 0x06
    1f28:	42 17       	cp	r20, r18
    1f2a:	53 07       	cpc	r21, r19
    1f2c:	44 f4       	brge	.+16     	; 0x1f3e <fputc+0x38>
    1f2e:	a0 81       	ld	r26, Z
    1f30:	b1 81       	ldd	r27, Z+1	; 0x01
    1f32:	9d 01       	movw	r18, r26
    1f34:	2f 5f       	subi	r18, 0xFF	; 255
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	31 83       	std	Z+1, r19	; 0x01
    1f3a:	20 83       	st	Z, r18
    1f3c:	8c 93       	st	X, r24
    1f3e:	27 81       	ldd	r18, Z+7	; 0x07
    1f40:	30 85       	ldd	r19, Z+8	; 0x08
    1f42:	2f 5f       	subi	r18, 0xFF	; 255
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	30 87       	std	Z+8, r19	; 0x08
    1f48:	27 83       	std	Z+7, r18	; 0x07
    1f4a:	14 c0       	rjmp	.+40     	; 0x1f74 <fputc+0x6e>
    1f4c:	8b 01       	movw	r16, r22
    1f4e:	ec 01       	movw	r28, r24
    1f50:	fb 01       	movw	r30, r22
    1f52:	01 84       	ldd	r0, Z+9	; 0x09
    1f54:	f2 85       	ldd	r31, Z+10	; 0x0a
    1f56:	e0 2d       	mov	r30, r0
    1f58:	09 95       	icall
    1f5a:	89 2b       	or	r24, r25
    1f5c:	e1 f6       	brne	.-72     	; 0x1f16 <fputc+0x10>
    1f5e:	d8 01       	movw	r26, r16
    1f60:	17 96       	adiw	r26, 0x07	; 7
    1f62:	8d 91       	ld	r24, X+
    1f64:	9c 91       	ld	r25, X
    1f66:	18 97       	sbiw	r26, 0x08	; 8
    1f68:	01 96       	adiw	r24, 0x01	; 1
    1f6a:	18 96       	adiw	r26, 0x08	; 8
    1f6c:	9c 93       	st	X, r25
    1f6e:	8e 93       	st	-X, r24
    1f70:	17 97       	sbiw	r26, 0x07	; 7
    1f72:	ce 01       	movw	r24, r28
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000249e <sprintf>:
    249e:	af e0       	ldi	r26, 0x0F	; 15
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e5 e5       	ldi	r30, 0x55	; 85
    24a4:	f2 e1       	ldi	r31, 0x12	; 18
    24a6:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__prologue_saves__+0x1c>
    24aa:	0e 89       	ldd	r16, Y+22	; 0x16
    24ac:	1f 89       	ldd	r17, Y+23	; 0x17
    24ae:	86 e0       	ldi	r24, 0x06	; 6
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	1a 83       	std	Y+2, r17	; 0x02
    24b4:	09 83       	std	Y+1, r16	; 0x01
    24b6:	8f ef       	ldi	r24, 0xFF	; 255
    24b8:	9f e7       	ldi	r25, 0x7F	; 127
    24ba:	9f 83       	std	Y+7, r25	; 0x07
    24bc:	8e 83       	std	Y+6, r24	; 0x06
    24be:	9e 01       	movw	r18, r28
    24c0:	25 5e       	subi	r18, 0xE5	; 229
    24c2:	3f 4f       	sbci	r19, 0xFF	; 255
    24c4:	48 8d       	ldd	r20, Y+24	; 0x18
    24c6:	59 8d       	ldd	r21, Y+25	; 0x19
    24c8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    24ca:	ce 01       	movw	r24, r28
    24cc:	01 96       	adiw	r24, 0x01	; 1
    24ce:	0e 94 ed 01 	call	0x3da	; 0x3da <vfprintf>
    24d2:	e8 85       	ldd	r30, Y+8	; 0x08
    24d4:	f9 85       	ldd	r31, Y+9	; 0x09
    24d6:	e0 0f       	add	r30, r16
    24d8:	f1 1f       	adc	r31, r17
    24da:	10 82       	st	Z, r1
    24dc:	2f 96       	adiw	r28, 0x0f	; 15
    24de:	e4 e0       	ldi	r30, 0x04	; 4
    24e0:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000019fc <__ultoa_invert>:
    19fc:	fa 01       	movw	r30, r20
    19fe:	aa 27       	eor	r26, r26
    1a00:	28 30       	cpi	r18, 0x08	; 8
    1a02:	51 f1       	breq	.+84     	; 0x1a58 <__ultoa_invert+0x5c>
    1a04:	20 31       	cpi	r18, 0x10	; 16
    1a06:	81 f1       	breq	.+96     	; 0x1a68 <__ultoa_invert+0x6c>
    1a08:	e8 94       	clt
    1a0a:	6f 93       	push	r22
    1a0c:	6e 7f       	andi	r22, 0xFE	; 254
    1a0e:	6e 5f       	subi	r22, 0xFE	; 254
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	af 4f       	sbci	r26, 0xFF	; 255
    1a18:	b1 e0       	ldi	r27, 0x01	; 1
    1a1a:	3e d0       	rcall	.+124    	; 0x1a98 <__ultoa_invert+0x9c>
    1a1c:	b4 e0       	ldi	r27, 0x04	; 4
    1a1e:	3c d0       	rcall	.+120    	; 0x1a98 <__ultoa_invert+0x9c>
    1a20:	67 0f       	add	r22, r23
    1a22:	78 1f       	adc	r23, r24
    1a24:	89 1f       	adc	r24, r25
    1a26:	9a 1f       	adc	r25, r26
    1a28:	a1 1d       	adc	r26, r1
    1a2a:	68 0f       	add	r22, r24
    1a2c:	79 1f       	adc	r23, r25
    1a2e:	8a 1f       	adc	r24, r26
    1a30:	91 1d       	adc	r25, r1
    1a32:	a1 1d       	adc	r26, r1
    1a34:	6a 0f       	add	r22, r26
    1a36:	71 1d       	adc	r23, r1
    1a38:	81 1d       	adc	r24, r1
    1a3a:	91 1d       	adc	r25, r1
    1a3c:	a1 1d       	adc	r26, r1
    1a3e:	20 d0       	rcall	.+64     	; 0x1a80 <__ultoa_invert+0x84>
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <__ultoa_invert+0x48>
    1a42:	68 94       	set
    1a44:	3f 91       	pop	r19
    1a46:	2a e0       	ldi	r18, 0x0A	; 10
    1a48:	26 9f       	mul	r18, r22
    1a4a:	11 24       	eor	r1, r1
    1a4c:	30 19       	sub	r19, r0
    1a4e:	30 5d       	subi	r19, 0xD0	; 208
    1a50:	31 93       	st	Z+, r19
    1a52:	de f6       	brtc	.-74     	; 0x1a0a <__ultoa_invert+0xe>
    1a54:	cf 01       	movw	r24, r30
    1a56:	08 95       	ret
    1a58:	46 2f       	mov	r20, r22
    1a5a:	47 70       	andi	r20, 0x07	; 7
    1a5c:	40 5d       	subi	r20, 0xD0	; 208
    1a5e:	41 93       	st	Z+, r20
    1a60:	b3 e0       	ldi	r27, 0x03	; 3
    1a62:	0f d0       	rcall	.+30     	; 0x1a82 <__ultoa_invert+0x86>
    1a64:	c9 f7       	brne	.-14     	; 0x1a58 <__ultoa_invert+0x5c>
    1a66:	f6 cf       	rjmp	.-20     	; 0x1a54 <__ultoa_invert+0x58>
    1a68:	46 2f       	mov	r20, r22
    1a6a:	4f 70       	andi	r20, 0x0F	; 15
    1a6c:	40 5d       	subi	r20, 0xD0	; 208
    1a6e:	4a 33       	cpi	r20, 0x3A	; 58
    1a70:	18 f0       	brcs	.+6      	; 0x1a78 <__ultoa_invert+0x7c>
    1a72:	49 5d       	subi	r20, 0xD9	; 217
    1a74:	31 fd       	sbrc	r19, 1
    1a76:	40 52       	subi	r20, 0x20	; 32
    1a78:	41 93       	st	Z+, r20
    1a7a:	02 d0       	rcall	.+4      	; 0x1a80 <__ultoa_invert+0x84>
    1a7c:	a9 f7       	brne	.-22     	; 0x1a68 <__ultoa_invert+0x6c>
    1a7e:	ea cf       	rjmp	.-44     	; 0x1a54 <__ultoa_invert+0x58>
    1a80:	b4 e0       	ldi	r27, 0x04	; 4
    1a82:	a6 95       	lsr	r26
    1a84:	97 95       	ror	r25
    1a86:	87 95       	ror	r24
    1a88:	77 95       	ror	r23
    1a8a:	67 95       	ror	r22
    1a8c:	ba 95       	dec	r27
    1a8e:	c9 f7       	brne	.-14     	; 0x1a82 <__ultoa_invert+0x86>
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	61 05       	cpc	r22, r1
    1a94:	71 05       	cpc	r23, r1
    1a96:	08 95       	ret
    1a98:	9b 01       	movw	r18, r22
    1a9a:	ac 01       	movw	r20, r24
    1a9c:	0a 2e       	mov	r0, r26
    1a9e:	06 94       	lsr	r0
    1aa0:	57 95       	ror	r21
    1aa2:	47 95       	ror	r20
    1aa4:	37 95       	ror	r19
    1aa6:	27 95       	ror	r18
    1aa8:	ba 95       	dec	r27
    1aaa:	c9 f7       	brne	.-14     	; 0x1a9e <__ultoa_invert+0xa2>
    1aac:	62 0f       	add	r22, r18
    1aae:	73 1f       	adc	r23, r19
    1ab0:	84 1f       	adc	r24, r20
    1ab2:	95 1f       	adc	r25, r21
    1ab4:	a0 1d       	adc	r26, r0
    1ab6:	08 95       	ret

Disassembly of section .text.avrlibc:

00002d7a <__ctype_isfalse>:
    2d7a:	99 27       	eor	r25, r25
    2d7c:	88 27       	eor	r24, r24

00002d7e <__ctype_istrue>:
    2d7e:	08 95       	ret

Disassembly of section .text.avrlibc:

00002a14 <eeprom_read_block>:
    2a14:	ba 01       	movw	r22, r20
    2a16:	a9 01       	movw	r20, r18
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22

00002a1c <eeprom_read_blraw>:
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	f9 99       	sbic	0x1f, 1	; 31
    2a20:	fe cf       	rjmp	.-4      	; 0x2a1e <eeprom_read_blraw+0x2>
    2a22:	06 c0       	rjmp	.+12     	; 0x2a30 <eeprom_read_blraw+0x14>
    2a24:	f2 bd       	out	0x22, r31	; 34
    2a26:	e1 bd       	out	0x21, r30	; 33
    2a28:	f8 9a       	sbi	0x1f, 0	; 31
    2a2a:	31 96       	adiw	r30, 0x01	; 1
    2a2c:	00 b4       	in	r0, 0x20	; 32
    2a2e:	0d 92       	st	X+, r0
    2a30:	41 50       	subi	r20, 0x01	; 1
    2a32:	50 40       	sbci	r21, 0x00	; 0
    2a34:	b8 f7       	brcc	.-18     	; 0x2a24 <eeprom_read_blraw+0x8>
    2a36:	08 95       	ret

Disassembly of section .text.avrlibc:

00002c3a <eeprom_read_byte>:
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	f9 99       	sbic	0x1f, 1	; 31
    2c3e:	fe cf       	rjmp	.-4      	; 0x2c3c <eeprom_read_byte+0x2>
    2c40:	92 bd       	out	0x22, r25	; 34
    2c42:	81 bd       	out	0x21, r24	; 33
    2c44:	f8 9a       	sbi	0x1f, 0	; 31
    2c46:	99 27       	eor	r25, r25
    2c48:	80 b5       	in	r24, 0x20	; 32
    2c4a:	08 95       	ret

Disassembly of section .text.avrlibc:

00002d04 <eeprom_read_dword>:
    2d04:	cb 01       	movw	r24, r22
    2d06:	a6 e1       	ldi	r26, 0x16	; 22
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	44 e0       	ldi	r20, 0x04	; 4
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00002528 <eeprom_update_block>:
    2528:	cf 92       	push	r12
    252a:	df 92       	push	r13
    252c:	ef 92       	push	r14
    252e:	21 50       	subi	r18, 0x01	; 1
    2530:	31 09       	sbc	r19, r1
    2532:	c0 f0       	brcs	.+48     	; 0x2564 <eeprom_update_block+0x3c>
    2534:	6b 01       	movw	r12, r22
    2536:	e8 2e       	mov	r14, r24
    2538:	c2 0e       	add	r12, r18
    253a:	d3 1e       	adc	r13, r19
    253c:	e1 1c       	adc	r14, r1
    253e:	ca 01       	movw	r24, r20
    2540:	82 0f       	add	r24, r18
    2542:	93 1f       	adc	r25, r19
    2544:	42 2f       	mov	r20, r18
    2546:	73 2f       	mov	r23, r19
    2548:	f6 01       	movw	r30, r12
    254a:	5e 2d       	mov	r21, r14
    254c:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__xload_1>
    2550:	26 2f       	mov	r18, r22
    2552:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <eeprom_update_r18>
    2556:	31 e0       	ldi	r19, 0x01	; 1
    2558:	c3 1a       	sub	r12, r19
    255a:	d1 08       	sbc	r13, r1
    255c:	e1 08       	sbc	r14, r1
    255e:	41 50       	subi	r20, 0x01	; 1
    2560:	70 40       	sbci	r23, 0x00	; 0
    2562:	90 f7       	brcc	.-28     	; 0x2548 <eeprom_update_block+0x20>
    2564:	ef 90       	pop	r14
    2566:	df 90       	pop	r13
    2568:	cf 90       	pop	r12
    256a:	08 95       	ret

Disassembly of section .text.avrlibc:

00002a38 <eeprom_update_byte>:
    2a38:	26 2f       	mov	r18, r22

00002a3a <eeprom_update_r18>:
    2a3a:	f9 99       	sbic	0x1f, 1	; 31
    2a3c:	fe cf       	rjmp	.-4      	; 0x2a3a <eeprom_update_r18>
    2a3e:	92 bd       	out	0x22, r25	; 34
    2a40:	81 bd       	out	0x21, r24	; 33
    2a42:	f8 9a       	sbi	0x1f, 0	; 31
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	00 b4       	in	r0, 0x20	; 32
    2a48:	02 16       	cp	r0, r18
    2a4a:	39 f0       	breq	.+14     	; 0x2a5a <eeprom_update_r18+0x20>
    2a4c:	1f ba       	out	0x1f, r1	; 31
    2a4e:	20 bd       	out	0x20, r18	; 32
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	fa 9a       	sbi	0x1f, 2	; 31
    2a56:	f9 9a       	sbi	0x1f, 1	; 31
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	08 95       	ret

Disassembly of section .text.avrlibc:

00002ba4 <eeprom_update_dword>:
    2ba4:	03 96       	adiw	r24, 0x03	; 3
    2ba6:	27 2f       	mov	r18, r23
    2ba8:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <eeprom_update_r18>
    2bac:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <eeprom_update_byte>
    2bb0:	25 2f       	mov	r18, r21
    2bb2:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <eeprom_update_r18>
    2bb6:	24 2f       	mov	r18, r20
    2bb8:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <eeprom_update_r18>

Disassembly of section .text.libgcc.mul:

00002a9e <__mulsi3>:
    2a9e:	db 01       	movw	r26, r22
    2aa0:	8f 93       	push	r24
    2aa2:	9f 93       	push	r25
    2aa4:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__muluhisi3>
    2aa8:	bf 91       	pop	r27
    2aaa:	af 91       	pop	r26
    2aac:	a2 9f       	mul	r26, r18
    2aae:	80 0d       	add	r24, r0
    2ab0:	91 1d       	adc	r25, r1
    2ab2:	a3 9f       	mul	r26, r19
    2ab4:	90 0d       	add	r25, r0
    2ab6:	b2 9f       	mul	r27, r18
    2ab8:	90 0d       	add	r25, r0
    2aba:	11 24       	eor	r1, r1
    2abc:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000256c <__udivmodsi4>:
    256c:	a1 e2       	ldi	r26, 0x21	; 33
    256e:	1a 2e       	mov	r1, r26
    2570:	aa 1b       	sub	r26, r26
    2572:	bb 1b       	sub	r27, r27
    2574:	fd 01       	movw	r30, r26
    2576:	0d c0       	rjmp	.+26     	; 0x2592 <__udivmodsi4_ep>

00002578 <__udivmodsi4_loop>:
    2578:	aa 1f       	adc	r26, r26
    257a:	bb 1f       	adc	r27, r27
    257c:	ee 1f       	adc	r30, r30
    257e:	ff 1f       	adc	r31, r31
    2580:	a2 17       	cp	r26, r18
    2582:	b3 07       	cpc	r27, r19
    2584:	e4 07       	cpc	r30, r20
    2586:	f5 07       	cpc	r31, r21
    2588:	20 f0       	brcs	.+8      	; 0x2592 <__udivmodsi4_ep>
    258a:	a2 1b       	sub	r26, r18
    258c:	b3 0b       	sbc	r27, r19
    258e:	e4 0b       	sbc	r30, r20
    2590:	f5 0b       	sbc	r31, r21

00002592 <__udivmodsi4_ep>:
    2592:	66 1f       	adc	r22, r22
    2594:	77 1f       	adc	r23, r23
    2596:	88 1f       	adc	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	1a 94       	dec	r1
    259c:	69 f7       	brne	.-38     	; 0x2578 <__udivmodsi4_loop>
    259e:	60 95       	com	r22
    25a0:	70 95       	com	r23
    25a2:	80 95       	com	r24
    25a4:	90 95       	com	r25
    25a6:	9b 01       	movw	r18, r22
    25a8:	ac 01       	movw	r20, r24
    25aa:	bd 01       	movw	r22, r26
    25ac:	cf 01       	movw	r24, r30
    25ae:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00002bfe <__muluhisi3>:
    2bfe:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__umulhisi3>
    2c02:	a5 9f       	mul	r26, r21
    2c04:	90 0d       	add	r25, r0
    2c06:	b4 9f       	mul	r27, r20
    2c08:	90 0d       	add	r25, r0
    2c0a:	a4 9f       	mul	r26, r20
    2c0c:	80 0d       	add	r24, r0
    2c0e:	91 1d       	adc	r25, r1
    2c10:	11 24       	eor	r1, r1
    2c12:	08 95       	ret

Disassembly of section .text.libgcc:

00002d3e <__xload_1>:
    2d3e:	57 fd       	sbrc	r21, 7
    2d40:	60 81       	ld	r22, Z
    2d42:	57 ff       	sbrs	r21, 7
    2d44:	64 91       	lpm	r22, Z
    2d46:	08 95       	ret
