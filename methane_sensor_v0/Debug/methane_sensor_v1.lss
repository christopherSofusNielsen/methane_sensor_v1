
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004aba  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b8  00800100  00800100  00004aba  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00004aba  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00004b15  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000009d8  00000000  00000000  00004b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d72e  00000000  00000000  00005560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002866  00000000  00000000  00012c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d88  00000000  00000000  000154f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ab8  00000000  00000000  0001a27c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c89  00000000  00000000  0001bd34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005df3  00000000  00000000  0001c9bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  000227b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000049f6  000049f6  00004aaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00022f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  000047de  000047de  00004892  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  000046d4  000046d4  00004788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  000047ec  000047ec  000048a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  000046e8  000046e8  0000479c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  000047fa  000047fa  000048ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  000046fc  000046fc  000047b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  00004808  00004808  000048bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  00004710  00004710  000047c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power 00000014  00004724  00004724  000047d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_3 00000014  00004738  00004738  000047ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.rn2483_init 00000008  00004992  00004992  00004a46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.rn2483_reset_active 00000008  0000499a  0000499a  00004a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.rn2483_reset_deactive 00000008  000049a2  000049a2  00004a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.SCD30_HAL_init 0000000e  00004816  00004816  000048ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.SCD30_HAL_data_ready 0000000a  00004960  00004960  00004a14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_16 0000004e  00003884  00003884  00003938  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss._cb      00000002  008006bb  008006bb  00004aba  2**0
                  ALLOC
 32 .text.__vector_13 0000004e  000038d2  000038d2  00003986  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .bss._cb      00000002  008006bd  008006bd  00004aba  2**0
                  ALLOC
 34 .text.start_timer 00000008  000049aa  000049aa  00004a5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.stop_timer 00000006  000049d2  000049d2  00004a86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.TC2_HAL_init 00000020  00004522  00004522  000045d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.TC2_HAL_subscribe 00000054  0000373a  0000373a  000037ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TC2_HAL_cancel 0000003a  00003f84  00003f84  00004038  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_9 0000007c  00002df2  00002df2  00002ea6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .bss.cnt      00000001  008006cd  008006cd  00004aba  2**0
                  ALLOC
 41 .bss.cbCounter 00000001  008006ce  008006ce  00004aba  2**0
                  ALLOC
 42 .bss.callbacks 0000000a  00800693  00800693  00004aba  2**0
                  ALLOC
 43 .text.start_and_write_data 0000004c  000039bc  000039bc  00003a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.read_and_stop 0000005a  000035dc  000035dc  00003690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TWI_API_write_data 00000014  0000474c  0000474c  00004800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TWI_API_write_data_stop 0000001a  00004634  00004634  000046e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TWI_API_read_data_ack_end_nack_stop 00000032  000041b2  000041b2  00004266  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TWI_API_repeat_read_data_stop 00000030  0000427a  0000427a  0000432e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TWI_HAL_init 00000012  00004788  00004788  0000483c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.TWI_HAL_start 00000048  00003c18  00003c18  00003ccc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.TWI_HAL_repeated_start 00000042  00003e46  00003e46  00003efa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.TWI_HAL_write_byte 00000020  00004542  00004542  000045f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.TWI_HAL_read_byte_ack 00000014  00004760  00004760  00004814  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_HAL_read_byte_nack 00000014  00004774  00004774  00004828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_HAL_stop 00000010  000047be  000047be  00004872  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.copy_buffer 0000002e  0000436a  0000436a  0000441e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.uart0_hal_init 0000003c  00003f0c  00003f0c  00003fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.uart0_hal_send_message 0000004e  00003920  00003920  000039d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.uart0_hal_send_string 0000007e  00002d74  00002d74  00002e28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.uart0_hal_message_ready 0000000e  00004824  00004824  000048d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.uart0_hal_clear_rx_buffer 0000000a  0000496a  0000496a  00004a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uart0_hal_read_message_as_str 00000028  000043f2  000043f2  000044a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart0_hal_send_break 00000046  00003ca8  00003ca8  00003d5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.__vector_22 0000006e  00003298  00003298  0000334c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.__vector_20 00000074  00003140  00003140  000031f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .bss.rx_buffer_has_message 00000001  008006cf  008006cf  00004aba  2**0
                  ALLOC
 67 .bss.rx_buffer_data_len 00000001  008006d0  008006d0  00004aba  2**0
                  ALLOC
 68 .bss.tx_buffer_cursor 00000002  008006bf  008006bf  00004aba  2**0
                  ALLOC
 69 .bss.tx_buffer_data_len 00000002  008006c1  008006c1  00004aba  2**0
                  ALLOC
 70 .text.copy_buffer 0000002e  00004398  00004398  0000444c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart1_hal_init 0000003c  00003f48  00003f48  00003ffc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart1_hal_send_string 00000096  00002b20  00002b20  00002bd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart1_hal_message_ready 0000000e  00004832  00004832  000048e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uart1_hal_rx_full 0000000e  00004840  00004840  000048f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.uart1_hal_clear_rx_buffer 0000000a  00004974  00004974  00004a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.uart1_hal_read_message_as_str 00000028  0000441a  0000441a  000044ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_30 0000006e  00003306  00003306  000033ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_28 00000074  000031b4  000031b4  00003268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .bss.rx_buffer_has_message 00000001  008006d1  008006d1  00004aba  2**0
                  ALLOC
 80 .bss.rx_buffer_data_len 00000001  008006d2  008006d2  00004aba  2**0
                  ALLOC
 81 .bss.rx_buffer 0000004b  00800634  00800634  00004aba  2**0
                  ALLOC
 82 .bss.tx_buffer_cursor 00000002  008006c3  008006c3  00004aba  2**0
                  ALLOC
 83 .bss.tx_buffer_data_len 00000002  008006c5  008006c5  00004aba  2**0
                  ALLOC
 84 .bss.tx_buffer 0000012c  008004b8  008004b8  00004aba  2**0
                  ALLOC
 85 .text.main    00000016  00004666  00004666  0000471a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.calc_ppm_methane 00000096  00002bb6  00002bb6  00002c6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.ADC_get_value 00000056  0000368e  0000368e  00003742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.ADC_set_conf_parameters 00000042  00003e88  00003e88  00003f3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .data.PPM_factor 00000004  008006af  000049fa  00004aae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 90 .data.RRL     00000004  008006b3  000049fe  00004ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 91 .data.Vc      00000004  008006b7  00004a02  00004ab6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 92 .text.EM_has_deveui 00000016  0000467c  0000467c  00004730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.EM_has_appeui 00000016  00004692  00004692  00004746  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.EM_has_appkey 00000016  000046a8  000046a8  0000475c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.EM_set_deveui 0000003a  00003fbe  00003fbe  00004072  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.EM_get_deveui 00000030  000042aa  000042aa  0000435e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.EM_set_appeui 0000003a  00003ff8  00003ff8  000040ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.EM_get_appeui 00000030  000042da  000042da  0000438e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.EM_set_appkey 0000003a  00004032  00004032  000040e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.EM_get_appkey 00000030  0000430a  0000430a  000043be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.EM_set_ppmfactor 0000000e  0000484e  0000484e  00004902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.EM_get_ppmfactor 0000001e  00004582  00004582  00004636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.EM_set_RRL 0000000e  0000485c  0000485c  00004910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.EM_get_RRL 0000001e  000045a0  000045a0  00004654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.EM_set_Vcc 0000000e  0000486a  0000486a  0000491e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.EM_get_Vcc 0000001e  000045be  000045be  00004672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.EM_set_collections 0000000e  00004878  00004878  0000492c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.EM_get_collections 00000010  000047ce  000047ce  00004882  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.EM_set_heat_up_time 0000000c  000048e8  000048e8  0000499c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.EM_get_heat_up_time 0000000c  000048f4  000048f4  000049a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.EM_set_air_pump_time 0000000c  00004900  00004900  000049b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.EM_get_air_pump_time 0000000c  0000490c  0000490c  000049c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.EM_set_sp_interval 0000000c  00004918  00004918  000049cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.EM_get_sp_interval 0000000c  00004924  00004924  000049d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.LM_reset_module 00000006  000049d8  000049d8  00004a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.LM_forward_msg 00000006  000049de  000049de  00004a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.LM_send_break 00000006  000049e4  000049e4  00004a98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .progmemx.data 00000073  0000062d  0000062d  000006e1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
119 .text.attach_ending 0000001c  00004618  00004618  000046cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.cb_watchdog_counter 0000000c  00004930  00004930  000049e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.util_str_begins_with 0000004a  00003b84  00003b84  00003c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .progmemx.data 00000013  000006a0  000006a0  00000754  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
123 .text.util_reset_module 00000046  00003cee  00003cee  00003da2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.util_lora_forward_msg 00000078  00002ee8  00002ee8  00002f9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.util_send_break 00000008  000049b2  000049b2  00004a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .bss.wd_cb_pointer 00000001  008006d3  008006d3  00004aba  2**0
                  ALLOC
127 .bss.wd_cnt   00000001  008006d4  008006d4  00004aba  2**0
                  ALLOC
128 .text.MRPP_validate_collections_space 00000064  0000351a  0000351a  000035ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.datetime_to_BCD 00000100  0000216e  0000216e  00002222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.RTC_get_current_time 00000140  00001b9a  00001b9a  00001c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.RTC_set_current_time 00000068  0000344a  0000344a  000034fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000006c7  000006c7  0000077b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
133 .text.clear_sampling_data 0000004a  00003bce  00003bce  00003c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.bytes_2_uint 00000068  000034b2  000034b2  00003566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.init_measurement 00000038  0000406c  0000406c  00004120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.validate_data 00000032  000041e4  000041e4  00004298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.SCD30_sensor_on 00000026  00004492  00004492  00004546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.SCD30_calc_validate_SI 000000c6  000026d2  000026d2  00002786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.read_all_values 00000116  00002058  00002058  0000210c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.SCD30_get_reading 00000032  00004216  00004216  000042ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .bss.si_counter 00000002  008006c7  008006c7  00004aba  2**0
                  ALLOC
142 .bss.highest_si 00000002  008006c9  008006c9  00004aba  2**0
                  ALLOC
143 .bss.lowest_si 00000002  008006cb  008006cb  00004aba  2**0
                  ALLOC
144 .bss.hum_pars 00000006  0080069d  0080069d  00004aba  2**0
                  ALLOC
145 .bss.temp_pars 00000006  008006a3  008006a3  00004aba  2**0
                  ALLOC
146 .bss.co2_pars 00000006  008006a9  008006a9  00004aba  2**0
                  ALLOC
147 .progmemx.data.READ_DATA_CMD 00000002  000006c5  000006c5  00000779  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
148 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000006bb  000006bb  0000076f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
149 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000006c0  000006c0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
150 .text.parse_cmd 00000030  0000433a  0000433a  000043ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.validate_cmd 00000056  000036e4  000036e4  00003798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .progmemx.data 000000ac  00000500  00000500  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
153 .text.CONF_enter 0000013c  00001cda  00001cda  00001d8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .progmemx.data 00000081  000005ac  000005ac  00000660  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
155 .text.CON_RN2483_parse 0000006c  00003374  00003374  00003428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.CON_RN2483 00000166  000018dc  000018dc  00001990  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.CONNECT 00000054  0000378e  0000378e  00003842  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .progmemx.data 00000225  00000202  00000202  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
159 .text.read_cols 000000bc  00002798  00002798  0000284c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.read_time 00000092  00002ce2  00002ce2  00002d96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.read_validate_SI 0000012a  00001e16  00001e16  00001eca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.write_deveui 00000078  00002f60  00002f60  00003014  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.write_appeui 00000078  00002fd8  00002fd8  0000308c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.write_appkey 00000078  00003050  00003050  00003104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.write_PPM_factor 0000004c  00003a08  00003a08  00003abc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.write_RRL 0000004c  00003a54  00003a54  00003b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.write_VCC 0000004c  00003aa0  00003aa0  00003b54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.get_time_par 00000034  0000417e  0000417e  00004232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.write_cols 00000158  00001a42  00001a42  00001af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.write_heat_up 0000004c  00003aec  00003aec  00003ba0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.write_air_pump 00000050  00003834  00003834  000038e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.write_sp_interval 0000004c  00003b38  00003b38  00003bec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.write_reset 000000e6  0000236c  0000236c  00002420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.write_time 000000fe  0000226e  0000226e  00002322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.handle_read 000002be  000010e8  000010e8  0000119c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.handle_write 00000200  000013a6  000013a6  0000145a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .bss.arg      00000050  008005e4  008005e4  00004aba  2**0
                  ALLOC
178 .progmemx.data 000000d9  00000427  00000427  000004db  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
179 .text.handle_methane 00000186  00001756  00001756  0000180a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.handle_SCD30 00000118  00001f40  00001f40  00001ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.handle_pump 000000a4  00002a7c  00002a7c  00002b30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.handle_sensor 000000b8  00002910  00002910  000029c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.init_methane_SCD30 00000028  00004442  00004442  000044f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .bss.par      00000014  0080067f  0080067f  00004aba  2**0
                  ALLOC
185 .text.count_parameters 00000052  000037e2  000037e2  00003896  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.par_index 00000070  00003228  00003228  000032dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.get_parameter 00000096  00002c4c  00002c4c  00002d00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.calc_crc8 00000036  000040dc  000040dc  00004190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.get_decimal 000000b4  000029c8  000029c8  00002a7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.str2flaot 0000004e  0000396e  0000396e  00003a22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.is_float 00000058  00003636  00003636  000036ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.avrlibc.fplib 0000000e  00004886  00004886  0000493a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.avrlibc.fplib 000000ce  00002604  00002604  000026b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.avrlibc.fplib 0000000a  0000497e  0000497e  00004a32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.avrlibc.fplib 00000008  000049ba  000049ba  00004a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.avrlibc.fplib 000000de  00002452  00002452  00002506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.avrlibc.fplib 0000005e  0000357e  0000357e  00003632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.avrlibc.fplib 0000007a  00002e6e  00002e6e  00002f22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.avrlibc.fplib 00000048  00003c60  00003c60  00003d14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.avrlibc.fplib 0000000c  0000493c  0000493c  000049f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.avrlibc.fplib 00000006  000049ea  000049ea  00004a9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.avrlibc.fplib 0000000e  00004894  00004894  00004948  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.avrlibc.fplib 0000000e  000048a2  000048a2  00004956  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.avrlibc.fplib 00000022  00004500  00004500  000045b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.avrlibc.fplib 00000044  00003d7a  00003d7a  00003e2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.avrlibc.fplib 0000000e  000048b0  000048b0  00004964  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.avrlibc.fplib 00000008  000049c2  000049c2  00004a76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.avrlibc.fplib 000000d4  00002530  00002530  000025e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .progmemx.data 00000008  000006b3  000006b3  00000767  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
210 .text.avrlibc 00000744  000006c8  000006c8  0000077c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc.div 00000028  0000446a  0000446a  0000451e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.libgcc  0000000c  00004948  00004948  000049fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.libgcc.mul 0000001e  000045dc  000045dc  00004690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.libgcc.prologue 00000038  000040a4  000040a4  00004158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.libgcc.prologue 00000036  00004112  00004112  000041c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.avrlibc 00000008  000049ca  000049ca  00004a7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.avrlibc 0000000e  000048be  000048be  00004972  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.avrlibc 000002dc  00000e0c  00000e0c  00000ec0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.avrlibc 000001b0  000015a6  000015a6  0000165a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.avrlibc 00000012  0000479a  0000479a  0000484e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.avrlibc 00000032  00004248  00004248  000042fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.avrlibc 00000042  00003eca  00003eca  00003f7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.avrlibc 0000006a  000033e0  000033e0  00003494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.avrlibc 0000002c  000043c6  000043c6  0000447a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.avrlibc 0000001e  000045fa  000045fa  000046ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.avrlibc 00000036  00004148  00004148  000041fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.avrlibc 00000078  000030c8  000030c8  0000317c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.avrlibc 00000046  00003d34  00003d34  00003de8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.avrlibc 000000bc  00002854  00002854  00002908  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.avrlibc 00000006  000049f0  000049f0  00004aa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.avrlibc 00000024  000044b8  000044b8  0000456c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.avrlibc 00000012  000047ac  000047ac  00004860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.avrlibc 0000000e  000048cc  000048cc  00004980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.avrlibc 0000000e  000048da  000048da  0000498e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.avrlibc 00000044  00003dbe  00003dbe  00003e72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.avrlibc 00000024  000044dc  000044dc  00004590  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.avrlibc 00000018  0000464e  0000464e  00004702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.avrlibc 0000000c  00004954  00004954  00004a08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc.mul 00000020  00004562  00004562  00004616  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.libgcc.div 00000044  00003e02  00003e02  00003eb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.libgcc.mul 00000016  000046be  000046be  00004772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.libgcc  0000000a  00004988  00004988  00004a3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__ctors_end>
   4:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
   8:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
   c:	0c 94 9c 23 	jmp	0x4738	; 0x4738 <__vector_3>
  10:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  14:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  18:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  1c:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  20:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  24:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__vector_9>
  28:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  2c:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  30:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  34:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__vector_13>
  38:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  3c:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  40:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__vector_16>
  44:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  48:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  4c:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  50:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__vector_20>
  54:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  58:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__vector_22>
  5c:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  60:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  64:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  68:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  6c:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  70:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__vector_28>
  74:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__bad_interrupt>
  78:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__vector_30>
  7c:	88 0e       	add	r8, r24
  7e:	9f 0e       	add	r9, r31
  80:	fb 0e       	add	r15, r27
  82:	a8 0e       	add	r10, r24
  84:	04 0f       	add	r16, r20
  86:	ed 0e       	add	r14, r29
  88:	f4 0e       	add	r15, r20
  8a:	b8 0e       	add	r11, r24
  8c:	c4 0e       	add	r12, r20
  8e:	d0 0e       	add	r13, r16
  90:	da 0e       	add	r13, r26
  92:	e6 0e       	add	r14, r22
  94:	80 0c       	add	r8, r0
  96:	8d 0c       	add	r8, r13
  98:	97 0c       	add	r9, r7
  9a:	9d 0c       	add	r9, r13
  9c:	cc 0c       	add	r12, r12
  9e:	f7 0c       	add	r15, r7
  a0:	10 0d       	add	r17, r0

000000a2 <.dinit>:
  a2:	01 00       	.word	0x0001	; ????
  a4:	06 af       	std	Z+62, r16	; 0x3e
  a6:	80 06       	cpc	r8, r16
  a8:	af 06       	cpc	r10, r31
  aa:	bb 00       	.word	0x00bb	; ????
  ac:	49 fa       	.word	0xfa49	; ????
  ae:	06 bb       	out	0x16, r16	; 22
  b0:	06 d5       	rcall	.+2572   	; 0xabe <__EEPROM_REGION_LENGTH__+0x2be>
  b2:	80 00       	.word	0x0080	; ????

000000b4 <__trampolines_end>:
  b4:	00 40       	sbci	r16, 0x00	; 0
  b6:	7a 10       	cpse	r7, r10
  b8:	f3 5a       	subi	r31, 0xA3	; 163
  ba:	00 a0       	ldd	r0, Z+32	; 0x20
  bc:	72 4e       	sbci	r23, 0xE2	; 226
  be:	18 09       	sbc	r17, r8
  c0:	00 10       	cpse	r0, r0
  c2:	a5 d4       	rcall	.+2378   	; 0xa0e <__EEPROM_REGION_LENGTH__+0x20e>
  c4:	e8 00       	.word	0x00e8	; ????
  c6:	00 e8       	ldi	r16, 0x80	; 128
  c8:	76 48       	sbci	r23, 0x86	; 134
  ca:	17 00       	.word	0x0017	; ????
  cc:	00 e4       	ldi	r16, 0x40	; 64
  ce:	0b 54       	subi	r16, 0x4B	; 75
  d0:	02 00       	.word	0x0002	; ????
  d2:	00 ca       	rjmp	.-3072   	; 0xfffff4d4 <__eeprom_end+0xff7ef4d4>
  d4:	9a 3b       	cpi	r25, 0xBA	; 186
  d6:	00 00       	nop
  d8:	00 e1       	ldi	r16, 0x10	; 16
  da:	f5 05       	cpc	r31, r5
  dc:	00 00       	nop
  de:	80 96       	adiw	r24, 0x20	; 32
  e0:	98 00       	.word	0x0098	; ????
  e2:	00 00       	nop
  e4:	40 42       	sbci	r20, 0x20	; 32
  e6:	0f 00       	.word	0x000f	; ????
  e8:	00 00       	nop
  ea:	a0 86       	std	Z+8, r10	; 0x08
  ec:	01 00       	.word	0x0001	; ????
  ee:	00 00       	nop
  f0:	10 27       	eor	r17, r16
  f2:	00 00       	nop
  f4:	00 00       	nop
  f6:	e8 03       	fmulsu	r22, r16
  f8:	00 00       	nop
  fa:	00 00       	nop
  fc:	64 00       	.word	0x0064	; ????
  fe:	00 00       	nop
 100:	00 00       	nop
 102:	0a 00       	.word	0x000a	; ????
 104:	00 00       	nop
 106:	00 00       	nop
 108:	01 00       	.word	0x0001	; ????
 10a:	00 00       	nop
 10c:	00 00       	nop
 10e:	2c 76       	andi	r18, 0x6C	; 108
 110:	d8 88       	ldd	r13, Y+16	; 0x10
 112:	dc 67       	ori	r29, 0x7C	; 124
 114:	4f 08       	sbc	r4, r15
 116:	23 df       	rcall	.-442    	; 0xffffff5e <__eeprom_end+0xff7eff5e>
 118:	c1 df       	rcall	.-126    	; 0x9c <__SREG__+0x5d>
 11a:	ae 59       	subi	r26, 0x9E	; 158
 11c:	e1 b1       	in	r30, 0x01	; 1
 11e:	b7 96       	adiw	r30, 0x27	; 39
 120:	e5 e3       	ldi	r30, 0x35	; 53
 122:	e4 53       	subi	r30, 0x34	; 52
 124:	c6 3a       	cpi	r28, 0xA6	; 166
 126:	e6 51       	subi	r30, 0x16	; 22
 128:	99 76       	andi	r25, 0x69	; 105
 12a:	96 e8       	ldi	r25, 0x86	; 134
 12c:	e6 c2       	rjmp	.+1484   	; 0x6fa <vfprintf+0x32>
 12e:	84 26       	eor	r8, r20
 130:	eb 89       	ldd	r30, Y+19	; 0x13
 132:	8c 9b       	sbis	0x11, 4	; 17
 134:	62 ed       	ldi	r22, 0xD2	; 210
 136:	40 7c       	andi	r20, 0xC0	; 192
 138:	6f fc       	.word	0xfc6f	; ????
 13a:	ef bc       	out	0x2f, r14	; 47
 13c:	9c 9f       	mul	r25, r28
 13e:	40 f2       	brcs	.-112    	; 0xd0 <__trampolines_end+0x1c>
 140:	ba a5       	ldd	r27, Y+42	; 0x2a
 142:	6f a5       	ldd	r22, Y+47	; 0x2f
 144:	f4 90       	lpm	r15, Z
 146:	05 5a       	subi	r16, 0xA5	; 165
 148:	2a f7       	brpl	.-54     	; 0x114 <__trampolines_end+0x60>
 14a:	5c 93       	st	X, r21
 14c:	6b 6c       	ori	r22, 0xCB	; 203
 14e:	f9 67       	ori	r31, 0x79	; 121
 150:	6d c1       	rjmp	.+730    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 152:	1b fc       	.word	0xfc1b	; ????
 154:	e0 e4       	ldi	r30, 0x40	; 64
 156:	0d 47       	sbci	r16, 0x7D	; 125
 158:	fe f5       	brtc	.+126    	; 0x1d8 <__do_copy_data+0x1e>
 15a:	20 e6       	ldi	r18, 0x60	; 96
 15c:	b5 00       	.word	0x00b5	; ????
 15e:	d0 ed       	ldi	r29, 0xD0	; 208
 160:	90 2e       	mov	r9, r16
 162:	03 00       	.word	0x0003	; ????
 164:	94 35       	cpi	r25, 0x54	; 84
 166:	77 05       	cpc	r23, r7
 168:	00 80       	ld	r0, Z
 16a:	84 1e       	adc	r8, r20
 16c:	08 00       	.word	0x0008	; ????
 16e:	00 20       	and	r0, r0
 170:	4e 0a       	sbc	r4, r30
 172:	00 00       	nop
 174:	00 c8       	rjmp	.-4096   	; 0xfffff176 <__eeprom_end+0xff7ef176>
 176:	0c 33       	cpi	r16, 0x3C	; 60
 178:	33 33       	cpi	r19, 0x33	; 51
 17a:	33 0f       	add	r19, r19
 17c:	98 6e       	ori	r25, 0xE8	; 232
 17e:	12 83       	std	Z+2, r17	; 0x02
 180:	11 41       	sbci	r17, 0x11	; 17
 182:	ef 8d       	ldd	r30, Y+31	; 0x1f
 184:	21 14       	cp	r2, r1
 186:	89 3b       	cpi	r24, 0xB9	; 185
 188:	e6 55       	subi	r30, 0x56	; 86
 18a:	16 cf       	rjmp	.-468    	; 0xffffffb8 <__eeprom_end+0xff7effb8>
 18c:	fe e6       	ldi	r31, 0x6E	; 110
 18e:	db 18       	sub	r13, r11
 190:	d1 84       	ldd	r13, Z+9	; 0x09
 192:	4b 38       	cpi	r20, 0x8B	; 139
 194:	1b f7       	brvc	.-58     	; 0x15c <__trampolines_end+0xa8>
 196:	7c 1d       	adc	r23, r12
 198:	90 1d       	adc	r25, r0
 19a:	a4 bb       	out	0x14, r26	; 20
 19c:	e4 24       	eor	r14, r4
 19e:	20 32       	cpi	r18, 0x20	; 32
 1a0:	84 72       	andi	r24, 0x24	; 36
 1a2:	5e 22       	and	r5, r30
 1a4:	81 00       	.word	0x0081	; ????
 1a6:	c9 f1       	breq	.+114    	; 0x21a <_etext+0x18>
 1a8:	24 ec       	ldi	r18, 0xC4	; 196
 1aa:	a1 e5       	ldi	r26, 0x51	; 81
 1ac:	3d 27       	eor	r19, r29

000001ae <__ctors_end>:
 1ae:	11 24       	eor	r1, r1
 1b0:	1f be       	out	0x3f, r1	; 63
 1b2:	cf ef       	ldi	r28, 0xFF	; 255
 1b4:	d0 e1       	ldi	r29, 0x10	; 16
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	cd bf       	out	0x3d, r28	; 61

000001ba <__do_copy_data>:
 1ba:	e2 ea       	ldi	r30, 0xA2	; 162
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <__do_clear_bss+0x8>
 1c2:	b5 91       	lpm	r27, Z+
 1c4:	a5 91       	lpm	r26, Z+
 1c6:	35 91       	lpm	r19, Z+
 1c8:	25 91       	lpm	r18, Z+
 1ca:	05 91       	lpm	r16, Z+
 1cc:	07 fd       	sbrc	r16, 7
 1ce:	0c c0       	rjmp	.+24     	; 0x1e8 <__do_clear_bss>
 1d0:	95 91       	lpm	r25, Z+
 1d2:	85 91       	lpm	r24, Z+
 1d4:	ef 01       	movw	r28, r30
 1d6:	f9 2f       	mov	r31, r25
 1d8:	e8 2f       	mov	r30, r24
 1da:	05 90       	lpm	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	a2 17       	cp	r26, r18
 1e0:	b3 07       	cpc	r27, r19
 1e2:	d9 f7       	brne	.-10     	; 0x1da <__do_copy_data+0x20>
 1e4:	fe 01       	movw	r30, r28
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <__do_clear_bss+0x8>

000001e8 <__do_clear_bss>:
 1e8:	1d 92       	st	X+, r1
 1ea:	a2 17       	cp	r26, r18
 1ec:	b3 07       	cpc	r27, r19
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <__do_clear_bss>
 1f0:	e3 3b       	cpi	r30, 0xB3	; 179
 1f2:	f4 07       	cpc	r31, r20
 1f4:	31 f7       	brne	.-52     	; 0x1c2 <__do_copy_data+0x8>
 1f6:	0e 94 33 23 	call	0x4666	; 0x4666 <main>
 1fa:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>

Disassembly of section .text:

000049f6 <__bad_interrupt>:
    49f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

000047de <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    47de:	81 b1       	in	r24, 0x01	; 1
    47e0:	88 60       	ori	r24, 0x08	; 8
    47e2:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    47e4:	82 b1       	in	r24, 0x02	; 2
    47e6:	87 7f       	andi	r24, 0xF7	; 247
    47e8:	82 b9       	out	0x02, r24	; 2
    47ea:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

000046d4 <PM_HAL_adc_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    46d4:	88 23       	and	r24, r24
    46d6:	21 f0       	breq	.+8      	; 0x46e0 <PM_HAL_adc_power+0xc>
    46d8:	82 b1       	in	r24, 0x02	; 2
    46da:	88 60       	ori	r24, 0x08	; 8
    46dc:	82 b9       	out	0x02, r24	; 2
    46de:	08 95       	ret
    46e0:	82 b1       	in	r24, 0x02	; 2
    46e2:	87 7f       	andi	r24, 0xF7	; 247
    46e4:	82 b9       	out	0x02, r24	; 2
    46e6:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

000047ec <PM_HAL_meth_power_init>:
		clear_bit(PORTA, 3);
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    47ec:	81 b1       	in	r24, 0x01	; 1
    47ee:	80 62       	ori	r24, 0x20	; 32
    47f0:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    47f2:	82 b1       	in	r24, 0x02	; 2
    47f4:	8f 7d       	andi	r24, 0xDF	; 223
    47f6:	82 b9       	out	0x02, r24	; 2
    47f8:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

000046e8 <PM_HAL_meth_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    46e8:	88 23       	and	r24, r24
    46ea:	21 f0       	breq	.+8      	; 0x46f4 <PM_HAL_meth_power+0xc>
    46ec:	82 b1       	in	r24, 0x02	; 2
    46ee:	80 62       	ori	r24, 0x20	; 32
    46f0:	82 b9       	out	0x02, r24	; 2
    46f2:	08 95       	ret
    46f4:	82 b1       	in	r24, 0x02	; 2
    46f6:	8f 7d       	andi	r24, 0xDF	; 223
    46f8:	82 b9       	out	0x02, r24	; 2
    46fa:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

000047fa <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    47fa:	81 b1       	in	r24, 0x01	; 1
    47fc:	80 61       	ori	r24, 0x10	; 16
    47fe:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    4800:	82 b1       	in	r24, 0x02	; 2
    4802:	8f 7e       	andi	r24, 0xEF	; 239
    4804:	82 b9       	out	0x02, r24	; 2
    4806:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

000046fc <PM_HAL_SCD30_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    46fc:	88 23       	and	r24, r24
    46fe:	21 f0       	breq	.+8      	; 0x4708 <PM_HAL_SCD30_power+0xc>
    4700:	82 b1       	in	r24, 0x02	; 2
    4702:	80 61       	ori	r24, 0x10	; 16
    4704:	82 b9       	out	0x02, r24	; 2
    4706:	08 95       	ret
    4708:	82 b1       	in	r24, 0x02	; 2
    470a:	8f 7e       	andi	r24, 0xEF	; 239
    470c:	82 b9       	out	0x02, r24	; 2
    470e:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00004808 <PM_HAL_BC_power_init>:
		clear_bit(PORTA, 4);
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    4808:	8a b1       	in	r24, 0x0a	; 10
    480a:	80 61       	ori	r24, 0x10	; 16
    480c:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    480e:	8b b1       	in	r24, 0x0b	; 11
    4810:	8f 7e       	andi	r24, 0xEF	; 239
    4812:	8b b9       	out	0x0b, r24	; 11
    4814:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00004710 <PM_HAL_BC_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    4710:	88 23       	and	r24, r24
    4712:	21 f0       	breq	.+8      	; 0x471c <PM_HAL_BC_power+0xc>
    4714:	8b b1       	in	r24, 0x0b	; 11
    4716:	80 61       	ori	r24, 0x10	; 16
    4718:	8b b9       	out	0x0b, r24	; 11
    471a:	08 95       	ret
    471c:	8b b1       	in	r24, 0x0b	; 11
    471e:	8f 7e       	andi	r24, 0xEF	; 239
    4720:	8b b9       	out	0x0b, r24	; 11
    4722:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

00004724 <PM_HAL_LED_power>:
    4724:	88 23       	and	r24, r24
    4726:	21 f0       	breq	.+8      	; 0x4730 <PM_HAL_LED_power+0xc>
    4728:	82 b1       	in	r24, 0x02	; 2
    472a:	80 68       	ori	r24, 0x80	; 128
    472c:	82 b9       	out	0x02, r24	; 2
    472e:	08 95       	ret
    4730:	82 b1       	in	r24, 0x02	; 2
    4732:	8f 77       	andi	r24, 0x7F	; 127
    4734:	82 b9       	out	0x02, r24	; 2
    4736:	08 95       	ret

Disassembly of section .text.__vector_3:

00004738 <__vector_3>:
}

ISR(INT2_vect){
    4738:	1f 92       	push	r1
    473a:	0f 92       	push	r0
    473c:	0f b6       	in	r0, 0x3f	; 63
    473e:	0f 92       	push	r0
    4740:	11 24       	eor	r1, r1
	
}
    4742:	0f 90       	pop	r0
    4744:	0f be       	out	0x3f, r0	; 63
    4746:	0f 90       	pop	r0
    4748:	1f 90       	pop	r1
    474a:	18 95       	reti

Disassembly of section .text.rn2483_init:

00004992 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    4992:	84 b1       	in	r24, 0x04	; 4
    4994:	80 61       	ori	r24, 0x10	; 16
    4996:	84 b9       	out	0x04, r24	; 4
    4998:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

0000499a <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    499a:	85 b1       	in	r24, 0x05	; 5
    499c:	8f 7e       	andi	r24, 0xEF	; 239
    499e:	85 b9       	out	0x05, r24	; 5
    49a0:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

000049a2 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    49a2:	85 b1       	in	r24, 0x05	; 5
    49a4:	80 61       	ori	r24, 0x10	; 16
    49a6:	85 b9       	out	0x05, r24	; 5
    49a8:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00004816 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    4816:	87 b1       	in	r24, 0x07	; 7
    4818:	8f 7b       	andi	r24, 0xBF	; 191
    481a:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    481c:	88 b1       	in	r24, 0x08	; 8
    481e:	8f 7b       	andi	r24, 0xBF	; 191
    4820:	88 b9       	out	0x08, r24	; 8
    4822:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00004960 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    4960:	86 b1       	in	r24, 0x06	; 6
    4962:	86 fb       	bst	r24, 6
    4964:	88 27       	eor	r24, r24
    4966:	80 f9       	bld	r24, 0
    4968:	08 95       	ret

Disassembly of section .text.__vector_16:

00003884 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    3884:	1f 92       	push	r1
    3886:	0f 92       	push	r0
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	0f 92       	push	r0
    388c:	11 24       	eor	r1, r1
    388e:	2f 93       	push	r18
    3890:	3f 93       	push	r19
    3892:	4f 93       	push	r20
    3894:	5f 93       	push	r21
    3896:	6f 93       	push	r22
    3898:	7f 93       	push	r23
    389a:	8f 93       	push	r24
    389c:	9f 93       	push	r25
    389e:	af 93       	push	r26
    38a0:	bf 93       	push	r27
    38a2:	ef 93       	push	r30
    38a4:	ff 93       	push	r31
	_cb();
    38a6:	e0 91 bb 06 	lds	r30, 0x06BB	; 0x8006bb <_cb>
    38aa:	f0 91 bc 06 	lds	r31, 0x06BC	; 0x8006bc <_cb+0x1>
    38ae:	09 95       	icall
}
    38b0:	ff 91       	pop	r31
    38b2:	ef 91       	pop	r30
    38b4:	bf 91       	pop	r27
    38b6:	af 91       	pop	r26
    38b8:	9f 91       	pop	r25
    38ba:	8f 91       	pop	r24
    38bc:	7f 91       	pop	r23
    38be:	6f 91       	pop	r22
    38c0:	5f 91       	pop	r21
    38c2:	4f 91       	pop	r20
    38c4:	3f 91       	pop	r19
    38c6:	2f 91       	pop	r18
    38c8:	0f 90       	pop	r0
    38ca:	0f be       	out	0x3f, r0	; 63
    38cc:	0f 90       	pop	r0
    38ce:	1f 90       	pop	r1
    38d0:	18 95       	reti

Disassembly of section .text.__vector_13:

000038d2 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    38d2:	1f 92       	push	r1
    38d4:	0f 92       	push	r0
    38d6:	0f b6       	in	r0, 0x3f	; 63
    38d8:	0f 92       	push	r0
    38da:	11 24       	eor	r1, r1
    38dc:	2f 93       	push	r18
    38de:	3f 93       	push	r19
    38e0:	4f 93       	push	r20
    38e2:	5f 93       	push	r21
    38e4:	6f 93       	push	r22
    38e6:	7f 93       	push	r23
    38e8:	8f 93       	push	r24
    38ea:	9f 93       	push	r25
    38ec:	af 93       	push	r26
    38ee:	bf 93       	push	r27
    38f0:	ef 93       	push	r30
    38f2:	ff 93       	push	r31
	_cb();
    38f4:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <_cb>
    38f8:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <_cb+0x1>
    38fc:	09 95       	icall
    38fe:	ff 91       	pop	r31
    3900:	ef 91       	pop	r30
    3902:	bf 91       	pop	r27
    3904:	af 91       	pop	r26
    3906:	9f 91       	pop	r25
    3908:	8f 91       	pop	r24
    390a:	7f 91       	pop	r23
    390c:	6f 91       	pop	r22
    390e:	5f 91       	pop	r21
    3910:	4f 91       	pop	r20
    3912:	3f 91       	pop	r19
    3914:	2f 91       	pop	r18
    3916:	0f 90       	pop	r0
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	0f 90       	pop	r0
    391c:	1f 90       	pop	r1
    391e:	18 95       	reti

Disassembly of section .text.start_timer:

000049aa <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    49aa:	87 e0       	ldi	r24, 0x07	; 7
    49ac:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    49b0:	08 95       	ret

Disassembly of section .text.stop_timer:

000049d2 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    49d2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    49d6:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00004522 <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    4522:	82 e0       	ldi	r24, 0x02	; 2
    4524:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    4528:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    452c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    4530:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    4534:	93 ef       	ldi	r25, 0xF3	; 243
    4536:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    453a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    453e:	78 94       	sei
    4540:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

0000373a <TC2_HAL_subscribe>:
    373a:	cf 93       	push	r28
    373c:	dc 01       	movw	r26, r24
    373e:	60 91 ce 06 	lds	r22, 0x06CE	; 0x8006ce <cbCounter>
    3742:	65 30       	cpi	r22, 0x05	; 5
    3744:	00 f5       	brcc	.+64     	; 0x3786 <TC2_HAL_subscribe+0x4c>
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	15 c0       	rjmp	.+42     	; 0x3774 <TC2_HAL_subscribe+0x3a>
    374a:	29 2f       	mov	r18, r25
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	f9 01       	movw	r30, r18
    3750:	ee 0f       	add	r30, r30
    3752:	ff 1f       	adc	r31, r31
    3754:	ed 56       	subi	r30, 0x6D	; 109
    3756:	f9 4f       	sbci	r31, 0xF9	; 249
    3758:	40 81       	ld	r20, Z
    375a:	51 81       	ldd	r21, Z+1	; 0x01
    375c:	45 2b       	or	r20, r21
    375e:	49 f4       	brne	.+18     	; 0x3772 <TC2_HAL_subscribe+0x38>
    3760:	22 0f       	add	r18, r18
    3762:	33 1f       	adc	r19, r19
    3764:	f9 01       	movw	r30, r18
    3766:	ed 56       	subi	r30, 0x6D	; 109
    3768:	f9 4f       	sbci	r31, 0xF9	; 249
    376a:	b1 83       	std	Z+1, r27	; 0x01
    376c:	a0 83       	st	Z, r26
    376e:	c9 2f       	mov	r28, r25
    3770:	04 c0       	rjmp	.+8      	; 0x377a <TC2_HAL_subscribe+0x40>
    3772:	9f 5f       	subi	r25, 0xFF	; 255
    3774:	95 30       	cpi	r25, 0x05	; 5
    3776:	48 f3       	brcs	.-46     	; 0x374a <TC2_HAL_subscribe+0x10>
    3778:	cf ef       	ldi	r28, 0xFF	; 255
    377a:	6f 5f       	subi	r22, 0xFF	; 255
    377c:	60 93 ce 06 	sts	0x06CE, r22	; 0x8006ce <cbCounter>
    3780:	0e 94 d5 24 	call	0x49aa	; 0x49aa <start_timer>
    3784:	01 c0       	rjmp	.+2      	; 0x3788 <TC2_HAL_subscribe+0x4e>
    3786:	cf ef       	ldi	r28, 0xFF	; 255
    3788:	8c 2f       	mov	r24, r28
    378a:	cf 91       	pop	r28
    378c:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00003f84 <TC2_HAL_cancel>:
    3f84:	08 2e       	mov	r0, r24
    3f86:	00 0c       	add	r0, r0
    3f88:	99 0b       	sbc	r25, r25
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	ee 0f       	add	r30, r30
    3f8e:	ff 1f       	adc	r31, r31
    3f90:	ed 56       	subi	r30, 0x6D	; 109
    3f92:	f9 4f       	sbci	r31, 0xF9	; 249
    3f94:	20 81       	ld	r18, Z
    3f96:	31 81       	ldd	r19, Z+1	; 0x01
    3f98:	23 2b       	or	r18, r19
    3f9a:	81 f0       	breq	.+32     	; 0x3fbc <TC2_HAL_cancel+0x38>
    3f9c:	88 0f       	add	r24, r24
    3f9e:	99 1f       	adc	r25, r25
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	ed 56       	subi	r30, 0x6D	; 109
    3fa4:	f9 4f       	sbci	r31, 0xF9	; 249
    3fa6:	11 82       	std	Z+1, r1	; 0x01
    3fa8:	10 82       	st	Z, r1
    3faa:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <cbCounter>
    3fae:	81 50       	subi	r24, 0x01	; 1
    3fb0:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <cbCounter>
    3fb4:	81 11       	cpse	r24, r1
    3fb6:	02 c0       	rjmp	.+4      	; 0x3fbc <TC2_HAL_cancel+0x38>
    3fb8:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <stop_timer>
    3fbc:	08 95       	ret

Disassembly of section .text.__vector_9:

00002df2 <__vector_9>:
    2df2:	1f 92       	push	r1
    2df4:	0f 92       	push	r0
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	0f 92       	push	r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	2f 93       	push	r18
    2dfe:	3f 93       	push	r19
    2e00:	4f 93       	push	r20
    2e02:	5f 93       	push	r21
    2e04:	6f 93       	push	r22
    2e06:	7f 93       	push	r23
    2e08:	8f 93       	push	r24
    2e0a:	9f 93       	push	r25
    2e0c:	af 93       	push	r26
    2e0e:	bf 93       	push	r27
    2e10:	cf 93       	push	r28
    2e12:	ef 93       	push	r30
    2e14:	ff 93       	push	r31
    2e16:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <cnt>
    2e1a:	8f 5f       	subi	r24, 0xFF	; 255
    2e1c:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <cnt>
    2e20:	80 32       	cpi	r24, 0x20	; 32
    2e22:	99 f4       	brne	.+38     	; 0x2e4a <__vector_9+0x58>
    2e24:	10 92 cd 06 	sts	0x06CD, r1	; 0x8006cd <cnt>
    2e28:	c0 e0       	ldi	r28, 0x00	; 0
    2e2a:	0d c0       	rjmp	.+26     	; 0x2e46 <__vector_9+0x54>
    2e2c:	ec 2f       	mov	r30, r28
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	ee 0f       	add	r30, r30
    2e32:	ff 1f       	adc	r31, r31
    2e34:	ed 56       	subi	r30, 0x6D	; 109
    2e36:	f9 4f       	sbci	r31, 0xF9	; 249
    2e38:	01 90       	ld	r0, Z+
    2e3a:	f0 81       	ld	r31, Z
    2e3c:	e0 2d       	mov	r30, r0
    2e3e:	30 97       	sbiw	r30, 0x00	; 0
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <__vector_9+0x52>
    2e42:	09 95       	icall
    2e44:	cf 5f       	subi	r28, 0xFF	; 255
    2e46:	c5 30       	cpi	r28, 0x05	; 5
    2e48:	88 f3       	brcs	.-30     	; 0x2e2c <__vector_9+0x3a>
    2e4a:	ff 91       	pop	r31
    2e4c:	ef 91       	pop	r30
    2e4e:	cf 91       	pop	r28
    2e50:	bf 91       	pop	r27
    2e52:	af 91       	pop	r26
    2e54:	9f 91       	pop	r25
    2e56:	8f 91       	pop	r24
    2e58:	7f 91       	pop	r23
    2e5a:	6f 91       	pop	r22
    2e5c:	5f 91       	pop	r21
    2e5e:	4f 91       	pop	r20
    2e60:	3f 91       	pop	r19
    2e62:	2f 91       	pop	r18
    2e64:	0f 90       	pop	r0
    2e66:	0f be       	out	0x3f, r0	; 63
    2e68:	0f 90       	pop	r0
    2e6a:	1f 90       	pop	r1
    2e6c:	18 95       	reti

Disassembly of section .text.start_and_write_data:

000039bc <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	6a 01       	movw	r12, r20
    39c8:	e6 2e       	mov	r14, r22
    39ca:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    39cc:	60 e0       	ldi	r22, 0x00	; 0
    39ce:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    39d2:	81 11       	cpse	r24, r1
    39d4:	13 c0       	rjmp	.+38     	; 0x39fc <start_and_write_data+0x40>
    39d6:	c0 e0       	ldi	r28, 0x00	; 0
    39d8:	0e c0       	rjmp	.+28     	; 0x39f6 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    39da:	ae 2d       	mov	r26, r14
    39dc:	c6 01       	movw	r24, r12
    39de:	8c 0f       	add	r24, r28
    39e0:	91 1d       	adc	r25, r1
    39e2:	a1 1d       	adc	r26, r1
    39e4:	fc 01       	movw	r30, r24
    39e6:	84 91       	lpm	r24, Z
    39e8:	a7 fd       	sbrc	r26, 7
    39ea:	80 81       	ld	r24, Z
    39ec:	0e 94 a1 22 	call	0x4542	; 0x4542 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    39f0:	81 11       	cpse	r24, r1
    39f2:	04 c0       	rjmp	.+8      	; 0x39fc <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    39f4:	cf 5f       	subi	r28, 0xFF	; 255
    39f6:	cd 17       	cp	r28, r29
    39f8:	80 f3       	brcs	.-32     	; 0x39da <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    39fa:	80 e0       	ldi	r24, 0x00	; 0
}
    39fc:	df 91       	pop	r29
    39fe:	cf 91       	pop	r28
    3a00:	ef 90       	pop	r14
    3a02:	df 90       	pop	r13
    3a04:	cf 90       	pop	r12
    3a06:	08 95       	ret

Disassembly of section .text.read_and_stop:

000035dc <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    35dc:	ef 92       	push	r14
    35de:	ff 92       	push	r15
    35e0:	0f 93       	push	r16
    35e2:	1f 93       	push	r17
    35e4:	cf 93       	push	r28
    35e6:	df 93       	push	r29
    35e8:	8c 01       	movw	r16, r24
    35ea:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    35ec:	c0 e0       	ldi	r28, 0x00	; 0
    35ee:	08 c0       	rjmp	.+16     	; 0x3600 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    35f0:	78 01       	movw	r14, r16
    35f2:	ec 0e       	add	r14, r28
    35f4:	f1 1c       	adc	r15, r1
    35f6:	0e 94 b0 23 	call	0x4760	; 0x4760 <TWI_HAL_read_byte_ack>
    35fa:	f7 01       	movw	r30, r14
    35fc:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    35fe:	cf 5f       	subi	r28, 0xFF	; 255
    3600:	2c 2f       	mov	r18, r28
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	8d 2f       	mov	r24, r29
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	28 17       	cp	r18, r24
    360c:	39 07       	cpc	r19, r25
    360e:	84 f3       	brlt	.-32     	; 0x35f0 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    3610:	8d 2f       	mov	r24, r29
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	e8 01       	movw	r28, r16
    3618:	c8 0f       	add	r28, r24
    361a:	d9 1f       	adc	r29, r25
    361c:	0e 94 ba 23 	call	0x4774	; 0x4774 <TWI_HAL_read_byte_nack>
    3620:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    3622:	0e 94 df 23 	call	0x47be	; 0x47be <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    3626:	80 e0       	ldi	r24, 0x00	; 0
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	1f 91       	pop	r17
    362e:	0f 91       	pop	r16
    3630:	ff 90       	pop	r15
    3632:	ef 90       	pop	r14
    3634:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

0000474c <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    474c:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    474e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <start_and_write_data>
    4752:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    4754:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    4756:	0e 94 df 23 	call	0x47be	; 0x47be <TWI_HAL_stop>
	}
	return status;
}
    475a:	8c 2f       	mov	r24, r28
    475c:	cf 91       	pop	r28
    475e:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00004634 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    4634:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    4636:	0e 94 de 1c 	call	0x39bc	; 0x39bc <start_and_write_data>
    463a:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    463c:	0e 94 df 23 	call	0x47be	; 0x47be <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    4640:	c1 11       	cpse	r28, r1
    4642:	02 c0       	rjmp	.+4      	; 0x4648 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    4644:	80 e0       	ldi	r24, 0x00	; 0
    4646:	01 c0       	rjmp	.+2      	; 0x464a <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    4648:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    464a:	cf 91       	pop	r28
    464c:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000041b2 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    41b2:	0f 93       	push	r16
    41b4:	1f 93       	push	r17
    41b6:	cf 93       	push	r28
    41b8:	df 93       	push	r29
    41ba:	8b 01       	movw	r16, r22
    41bc:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    41be:	61 e0       	ldi	r22, 0x01	; 1
    41c0:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <TWI_HAL_start>
    41c4:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    41c6:	88 23       	and	r24, r24
    41c8:	21 f0       	breq	.+8      	; 0x41d2 <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    41ca:	0e 94 df 23 	call	0x47be	; 0x47be <TWI_HAL_stop>
		return status;	
    41ce:	8c 2f       	mov	r24, r28
    41d0:	04 c0       	rjmp	.+8      	; 0x41da <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    41d2:	6d 2f       	mov	r22, r29
    41d4:	c8 01       	movw	r24, r16
    41d6:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <read_and_stop>
	
}
    41da:	df 91       	pop	r29
    41dc:	cf 91       	pop	r28
    41de:	1f 91       	pop	r17
    41e0:	0f 91       	pop	r16
    41e2:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

0000427a <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    427a:	0f 93       	push	r16
    427c:	1f 93       	push	r17
    427e:	cf 93       	push	r28
    4280:	df 93       	push	r29
    4282:	8b 01       	movw	r16, r22
    4284:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    4286:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <TWI_HAL_repeated_start>
    428a:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    428c:	88 23       	and	r24, r24
    428e:	21 f0       	breq	.+8      	; 0x4298 <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    4290:	0e 94 df 23 	call	0x47be	; 0x47be <TWI_HAL_stop>
		return status;
    4294:	8c 2f       	mov	r24, r28
    4296:	04 c0       	rjmp	.+8      	; 0x42a0 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    4298:	6d 2f       	mov	r22, r29
    429a:	c8 01       	movw	r24, r16
    429c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <read_and_stop>
	
}
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	1f 91       	pop	r17
    42a6:	0f 91       	pop	r16
    42a8:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00004788 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    4788:	80 e2       	ldi	r24, 0x20	; 32
    478a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    478e:	e9 eb       	ldi	r30, 0xB9	; 185
    4790:	f0 e0       	ldi	r31, 0x00	; 0
    4792:	80 81       	ld	r24, Z
    4794:	8c 7f       	andi	r24, 0xFC	; 252
    4796:	80 83       	st	Z, r24
    4798:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00003c18 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	88 0f       	add	r24, r24
    3c1c:	99 1f       	adc	r25, r25
    3c1e:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    3c20:	84 ea       	ldi	r24, 0xA4	; 164
    3c22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3c26:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3c2a:	99 23       	and	r25, r25
    3c2c:	e4 f7       	brge	.-8      	; 0x3c26 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    3c2e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3c32:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    3c34:	88 30       	cpi	r24, 0x08	; 8
    3c36:	99 f4       	brne	.+38     	; 0x3c5e <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    3c38:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    3c3c:	84 e8       	ldi	r24, 0x84	; 132
    3c3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3c42:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3c46:	88 23       	and	r24, r24
    3c48:	e4 f7       	brge	.-8      	; 0x3c42 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    3c4a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3c4e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3c50:	88 31       	cpi	r24, 0x18	; 24
    3c52:	21 f0       	breq	.+8      	; 0x3c5c <TWI_HAL_start+0x44>
    3c54:	80 34       	cpi	r24, 0x40	; 64
    3c56:	19 f4       	brne	.+6      	; 0x3c5e <TWI_HAL_start+0x46>
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	08 95       	ret
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3c5e:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00003e46 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	88 0f       	add	r24, r24
    3e4a:	99 1f       	adc	r25, r25
    3e4c:	28 2f       	mov	r18, r24
    3e4e:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    3e50:	84 ea       	ldi	r24, 0xA4	; 164
    3e52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3e56:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3e5a:	99 23       	and	r25, r25
    3e5c:	e4 f7       	brge	.-8      	; 0x3e56 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    3e5e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3e62:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    3e64:	80 31       	cpi	r24, 0x10	; 16
    3e66:	79 f4       	brne	.+30     	; 0x3e86 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    3e68:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    3e6c:	84 e8       	ldi	r24, 0x84	; 132
    3e6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3e72:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3e76:	88 23       	and	r24, r24
    3e78:	e4 f7       	brge	.-8      	; 0x3e72 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    3e7a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3e7e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    3e80:	80 34       	cpi	r24, 0x40	; 64
    3e82:	09 f4       	brne	.+2      	; 0x3e86 <TWI_HAL_repeated_start+0x40>
    3e84:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3e86:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00004542 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    4542:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    4546:	84 e8       	ldi	r24, 0x84	; 132
    4548:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    454c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    4550:	88 23       	and	r24, r24
    4552:	e4 f7       	brge	.-8      	; 0x454c <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    4554:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    4558:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    455a:	88 32       	cpi	r24, 0x28	; 40
    455c:	09 f4       	brne	.+2      	; 0x4560 <TWI_HAL_write_byte+0x1e>
    455e:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    4560:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00004760 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    4760:	84 ec       	ldi	r24, 0xC4	; 196
    4762:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    4766:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    476a:	88 23       	and	r24, r24
    476c:	e4 f7       	brge	.-8      	; 0x4766 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    476e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    4772:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00004774 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    4774:	84 e8       	ldi	r24, 0x84	; 132
    4776:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    477a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    477e:	88 23       	and	r24, r24
    4780:	e4 f7       	brge	.-8      	; 0x477a <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    4782:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    4786:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

000047be <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    47be:	84 e9       	ldi	r24, 0x94	; 148
    47c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    47c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    47c8:	84 fd       	sbrc	r24, 4
    47ca:	fc cf       	rjmp	.-8      	; 0x47c4 <TWI_HAL_stop+0x6>
}
    47cc:	08 95       	ret

Disassembly of section .text.copy_buffer:

0000436a <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    436a:	bc 01       	movw	r22, r24
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	09 c0       	rjmp	.+18     	; 0x4382 <copy_buffer+0x18>
    4370:	fb 01       	movw	r30, r22
    4372:	e9 0f       	add	r30, r25
    4374:	f1 1d       	adc	r31, r1
    4376:	da 01       	movw	r26, r20
    4378:	a0 50       	subi	r26, 0x00	; 0
    437a:	bf 4f       	sbci	r27, 0xFF	; 255
    437c:	2c 91       	ld	r18, X
    437e:	20 83       	st	Z, r18
    4380:	9f 5f       	subi	r25, 0xFF	; 255
    4382:	49 2f       	mov	r20, r25
    4384:	50 e0       	ldi	r21, 0x00	; 0
    4386:	20 91 d0 06 	lds	r18, 0x06D0	; 0x8006d0 <rx_buffer_data_len>
    438a:	30 e0       	ldi	r19, 0x00	; 0
    438c:	22 50       	subi	r18, 0x02	; 2
    438e:	31 09       	sbc	r19, r1
    4390:	42 17       	cp	r20, r18
    4392:	53 07       	cpc	r21, r19
    4394:	6c f3       	brlt	.-38     	; 0x4370 <copy_buffer+0x6>
    4396:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00003f0c <uart0_hal_init>:
    3f0c:	e1 ec       	ldi	r30, 0xC1	; 193
    3f0e:	f0 e0       	ldi	r31, 0x00	; 0
    3f10:	80 81       	ld	r24, Z
    3f12:	80 61       	ori	r24, 0x10	; 16
    3f14:	80 83       	st	Z, r24
    3f16:	80 81       	ld	r24, Z
    3f18:	88 60       	ori	r24, 0x08	; 8
    3f1a:	80 83       	st	Z, r24
    3f1c:	80 81       	ld	r24, Z
    3f1e:	80 68       	ori	r24, 0x80	; 128
    3f20:	80 83       	st	Z, r24
    3f22:	80 81       	ld	r24, Z
    3f24:	80 64       	ori	r24, 0x40	; 64
    3f26:	80 83       	st	Z, r24
    3f28:	e0 ec       	ldi	r30, 0xC0	; 192
    3f2a:	f0 e0       	ldi	r31, 0x00	; 0
    3f2c:	80 81       	ld	r24, Z
    3f2e:	82 60       	ori	r24, 0x02	; 2
    3f30:	80 83       	st	Z, r24
    3f32:	86 e0       	ldi	r24, 0x06	; 6
    3f34:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    3f38:	80 e1       	ldi	r24, 0x10	; 16
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    3f40:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    3f44:	78 94       	sei
    3f46:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00003920 <uart0_hal_send_message>:
    3920:	dc 01       	movw	r26, r24
    3922:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <tx_buffer_data_len>
    3926:	90 91 c2 06 	lds	r25, 0x06C2	; 0x8006c2 <tx_buffer_data_len+0x1>
    392a:	89 2b       	or	r24, r25
    392c:	d1 f7       	brne	.-12     	; 0x3922 <uart0_hal_send_message+0x2>
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	0b c0       	rjmp	.+22     	; 0x3948 <uart0_hal_send_message+0x28>
    3932:	29 2f       	mov	r18, r25
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	fd 01       	movw	r30, r26
    3938:	e2 0f       	add	r30, r18
    393a:	f3 1f       	adc	r31, r19
    393c:	40 81       	ld	r20, Z
    393e:	f9 01       	movw	r30, r18
    3940:	ea 56       	subi	r30, 0x6A	; 106
    3942:	fe 4f       	sbci	r31, 0xFE	; 254
    3944:	40 83       	st	Z, r20
    3946:	9f 5f       	subi	r25, 0xFF	; 255
    3948:	96 17       	cp	r25, r22
    394a:	98 f3       	brcs	.-26     	; 0x3932 <uart0_hal_send_message+0x12>
    394c:	86 2f       	mov	r24, r22
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	90 93 c2 06 	sts	0x06C2, r25	; 0x8006c2 <tx_buffer_data_len+0x1>
    3954:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <tx_buffer_data_len>
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	90 93 c0 06 	sts	0x06C0, r25	; 0x8006c0 <tx_buffer_cursor+0x1>
    3960:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <tx_buffer_cursor>
    3964:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    3968:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    396c:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002d74 <uart0_hal_send_string>:
    2d74:	6f 92       	push	r6
    2d76:	7f 92       	push	r7
    2d78:	8f 92       	push	r8
    2d7a:	cf 92       	push	r12
    2d7c:	df 92       	push	r13
    2d7e:	ef 92       	push	r14
    2d80:	3b 01       	movw	r6, r22
    2d82:	88 2e       	mov	r8, r24
    2d84:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <tx_buffer_data_len>
    2d88:	90 91 c2 06 	lds	r25, 0x06C2	; 0x8006c2 <tx_buffer_data_len+0x1>
    2d8c:	89 2b       	or	r24, r25
    2d8e:	d1 f7       	brne	.-12     	; 0x2d84 <uart0_hal_send_string+0x10>
    2d90:	88 2d       	mov	r24, r8
    2d92:	b3 01       	movw	r22, r6
    2d94:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    2d98:	bc 01       	movw	r22, r24
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	11 c0       	rjmp	.+34     	; 0x2dc2 <uart0_hal_send_string+0x4e>
    2da0:	e8 2c       	mov	r14, r8
    2da2:	63 01       	movw	r12, r6
    2da4:	c2 0e       	add	r12, r18
    2da6:	d3 1e       	adc	r13, r19
    2da8:	e1 1c       	adc	r14, r1
    2daa:	37 fd       	sbrc	r19, 7
    2dac:	ea 94       	dec	r14
    2dae:	f6 01       	movw	r30, r12
    2db0:	94 91       	lpm	r25, Z
    2db2:	e7 fc       	sbrc	r14, 7
    2db4:	90 81       	ld	r25, Z
    2db6:	f9 01       	movw	r30, r18
    2db8:	ea 56       	subi	r30, 0x6A	; 106
    2dba:	fe 4f       	sbci	r31, 0xFE	; 254
    2dbc:	90 83       	st	Z, r25
    2dbe:	2f 5f       	subi	r18, 0xFF	; 255
    2dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc2:	26 17       	cp	r18, r22
    2dc4:	37 07       	cpc	r19, r23
    2dc6:	60 f3       	brcs	.-40     	; 0x2da0 <uart0_hal_send_string+0x2c>
    2dc8:	70 93 c2 06 	sts	0x06C2, r23	; 0x8006c2 <tx_buffer_data_len+0x1>
    2dcc:	60 93 c1 06 	sts	0x06C1, r22	; 0x8006c1 <tx_buffer_data_len>
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	90 93 c0 06 	sts	0x06C0, r25	; 0x8006c0 <tx_buffer_cursor+0x1>
    2dd8:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <tx_buffer_cursor>
    2ddc:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    2de0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2de4:	ef 90       	pop	r14
    2de6:	df 90       	pop	r13
    2de8:	cf 90       	pop	r12
    2dea:	8f 90       	pop	r8
    2dec:	7f 90       	pop	r7
    2dee:	6f 90       	pop	r6
    2df0:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00004824 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    4824:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <rx_buffer_has_message>
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	91 11       	cpse	r25, r1
    482c:	01 c0       	rjmp	.+2      	; 0x4830 <uart0_hal_message_ready+0xc>
    482e:	80 e0       	ldi	r24, 0x00	; 0
}
    4830:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

0000496a <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    496a:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <rx_buffer_has_message>
	rx_buffer_data_len=0;
    496e:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <rx_buffer_data_len>
    4972:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

000043f2 <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    43f2:	0f 93       	push	r16
    43f4:	1f 93       	push	r17
    43f6:	cf 93       	push	r28
    43f8:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    43fa:	0e 94 b5 21 	call	0x436a	; 0x436a <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    43fe:	c0 91 d0 06 	lds	r28, 0x06D0	; 0x8006d0 <rx_buffer_data_len>
    4402:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    4404:	f8 01       	movw	r30, r16
    4406:	ec 0f       	add	r30, r28
    4408:	f1 1d       	adc	r31, r1
    440a:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    440c:	0e 94 b5 24 	call	0x496a	; 0x496a <uart0_hal_clear_rx_buffer>
	return len;
}
    4410:	8c 2f       	mov	r24, r28
    4412:	cf 91       	pop	r28
    4414:	1f 91       	pop	r17
    4416:	0f 91       	pop	r16
    4418:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00003ca8 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3ca8:	cf 93       	push	r28
    3caa:	df 93       	push	r29
    3cac:	1f 92       	push	r1
    3cae:	cd b7       	in	r28, 0x3d	; 61
    3cb0:	de b7       	in	r29, 0x3e	; 62
    3cb2:	9a b1       	in	r25, 0x0a	; 10
    3cb4:	92 60       	ori	r25, 0x02	; 2
    3cb6:	9a b9       	out	0x0a, r25	; 10
    3cb8:	e1 ec       	ldi	r30, 0xC1	; 193
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	90 81       	ld	r25, Z
    3cbe:	97 7f       	andi	r25, 0xF7	; 247
    3cc0:	90 83       	st	Z, r25
    3cc2:	9b b1       	in	r25, 0x0b	; 11
    3cc4:	9d 7f       	andi	r25, 0xFD	; 253
    3cc6:	9b b9       	out	0x0b, r25	; 11
    3cc8:	af e9       	ldi	r26, 0x9F	; 159
    3cca:	bf e0       	ldi	r27, 0x0F	; 15
    3ccc:	11 97       	sbiw	r26, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <uart0_hal_send_break+0x24>
    3cd0:	00 c0       	rjmp	.+0      	; 0x3cd2 <uart0_hal_send_break+0x2a>
    3cd2:	00 00       	nop
    3cd4:	90 81       	ld	r25, Z
    3cd6:	98 60       	ori	r25, 0x08	; 8
    3cd8:	90 83       	st	Z, r25
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	61 e0       	ldi	r22, 0x01	; 1
    3cde:	ce 01       	movw	r24, r28
    3ce0:	01 96       	adiw	r24, 0x01	; 1
    3ce2:	0e 94 90 1c 	call	0x3920	; 0x3920 <uart0_hal_send_message>
    3ce6:	0f 90       	pop	r0
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	08 95       	ret

Disassembly of section .text.__vector_22:

00003298 <__vector_22>:
    3298:	1f 92       	push	r1
    329a:	0f 92       	push	r0
    329c:	0f b6       	in	r0, 0x3f	; 63
    329e:	0f 92       	push	r0
    32a0:	11 24       	eor	r1, r1
    32a2:	2f 93       	push	r18
    32a4:	3f 93       	push	r19
    32a6:	8f 93       	push	r24
    32a8:	9f 93       	push	r25
    32aa:	ef 93       	push	r30
    32ac:	ff 93       	push	r31
    32ae:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <tx_buffer_cursor>
    32b2:	90 91 c0 06 	lds	r25, 0x06C0	; 0x8006c0 <tx_buffer_cursor+0x1>
    32b6:	20 91 c1 06 	lds	r18, 0x06C1	; 0x8006c1 <tx_buffer_data_len>
    32ba:	30 91 c2 06 	lds	r19, 0x06C2	; 0x8006c2 <tx_buffer_data_len+0x1>
    32be:	82 17       	cp	r24, r18
    32c0:	93 07       	cpc	r25, r19
    32c2:	70 f4       	brcc	.+28     	; 0x32e0 <__vector_22+0x48>
    32c4:	9c 01       	movw	r18, r24
    32c6:	2f 5f       	subi	r18, 0xFF	; 255
    32c8:	3f 4f       	sbci	r19, 0xFF	; 255
    32ca:	30 93 c0 06 	sts	0x06C0, r19	; 0x8006c0 <tx_buffer_cursor+0x1>
    32ce:	20 93 bf 06 	sts	0x06BF, r18	; 0x8006bf <tx_buffer_cursor>
    32d2:	fc 01       	movw	r30, r24
    32d4:	ea 56       	subi	r30, 0x6A	; 106
    32d6:	fe 4f       	sbci	r31, 0xFE	; 254
    32d8:	80 81       	ld	r24, Z
    32da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    32de:	08 c0       	rjmp	.+16     	; 0x32f0 <__vector_22+0x58>
    32e0:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <tx_buffer_cursor+0x1>
    32e4:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <tx_buffer_cursor>
    32e8:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <tx_buffer_data_len+0x1>
    32ec:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <tx_buffer_data_len>
    32f0:	ff 91       	pop	r31
    32f2:	ef 91       	pop	r30
    32f4:	9f 91       	pop	r25
    32f6:	8f 91       	pop	r24
    32f8:	3f 91       	pop	r19
    32fa:	2f 91       	pop	r18
    32fc:	0f 90       	pop	r0
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	0f 90       	pop	r0
    3302:	1f 90       	pop	r1
    3304:	18 95       	reti

Disassembly of section .text.__vector_20:

00003140 <__vector_20>:
    3140:	1f 92       	push	r1
    3142:	0f 92       	push	r0
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	0f 92       	push	r0
    3148:	11 24       	eor	r1, r1
    314a:	2f 93       	push	r18
    314c:	8f 93       	push	r24
    314e:	9f 93       	push	r25
    3150:	ef 93       	push	r30
    3152:	ff 93       	push	r31
    3154:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <rx_buffer_has_message>
    3158:	81 11       	cpse	r24, r1
    315a:	0e c0       	rjmp	.+28     	; 0x3178 <__vector_20+0x38>
    315c:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <rx_buffer_data_len>
    3160:	e6 39       	cpi	r30, 0x96	; 150
    3162:	50 f4       	brcc	.+20     	; 0x3178 <__vector_20+0x38>
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	8e 0f       	add	r24, r30
    3168:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <rx_buffer_data_len>
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3172:	e0 50       	subi	r30, 0x00	; 0
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	80 83       	st	Z, r24
    3178:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <rx_buffer_data_len>
    317c:	83 30       	cpi	r24, 0x03	; 3
    317e:	80 f0       	brcs	.+32     	; 0x31a0 <__vector_20+0x60>
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	fc 01       	movw	r30, r24
    3184:	e1 50       	subi	r30, 0x01	; 1
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	20 81       	ld	r18, Z
    318a:	2a 30       	cpi	r18, 0x0A	; 10
    318c:	49 f4       	brne	.+18     	; 0x31a0 <__vector_20+0x60>
    318e:	fc 01       	movw	r30, r24
    3190:	e2 50       	subi	r30, 0x02	; 2
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 81       	ld	r24, Z
    3196:	8d 30       	cpi	r24, 0x0D	; 13
    3198:	19 f4       	brne	.+6      	; 0x31a0 <__vector_20+0x60>
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <rx_buffer_has_message>
    31a0:	ff 91       	pop	r31
    31a2:	ef 91       	pop	r30
    31a4:	9f 91       	pop	r25
    31a6:	8f 91       	pop	r24
    31a8:	2f 91       	pop	r18
    31aa:	0f 90       	pop	r0
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	0f 90       	pop	r0
    31b0:	1f 90       	pop	r1
    31b2:	18 95       	reti

Disassembly of section .text.copy_buffer:

00004398 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    4398:	bc 01       	movw	r22, r24
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	09 c0       	rjmp	.+18     	; 0x43b0 <copy_buffer+0x18>
    439e:	fb 01       	movw	r30, r22
    43a0:	e9 0f       	add	r30, r25
    43a2:	f1 1d       	adc	r31, r1
    43a4:	da 01       	movw	r26, r20
    43a6:	ac 5c       	subi	r26, 0xCC	; 204
    43a8:	b9 4f       	sbci	r27, 0xF9	; 249
    43aa:	2c 91       	ld	r18, X
    43ac:	20 83       	st	Z, r18
    43ae:	9f 5f       	subi	r25, 0xFF	; 255
    43b0:	49 2f       	mov	r20, r25
    43b2:	50 e0       	ldi	r21, 0x00	; 0
    43b4:	20 91 d2 06 	lds	r18, 0x06D2	; 0x8006d2 <rx_buffer_data_len>
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	22 50       	subi	r18, 0x02	; 2
    43bc:	31 09       	sbc	r19, r1
    43be:	42 17       	cp	r20, r18
    43c0:	53 07       	cpc	r21, r19
    43c2:	6c f3       	brlt	.-38     	; 0x439e <copy_buffer+0x6>
    43c4:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

00003f48 <uart1_hal_init>:
    3f48:	e9 ec       	ldi	r30, 0xC9	; 201
    3f4a:	f0 e0       	ldi	r31, 0x00	; 0
    3f4c:	80 81       	ld	r24, Z
    3f4e:	80 61       	ori	r24, 0x10	; 16
    3f50:	80 83       	st	Z, r24
    3f52:	80 81       	ld	r24, Z
    3f54:	88 60       	ori	r24, 0x08	; 8
    3f56:	80 83       	st	Z, r24
    3f58:	80 81       	ld	r24, Z
    3f5a:	80 68       	ori	r24, 0x80	; 128
    3f5c:	80 83       	st	Z, r24
    3f5e:	80 81       	ld	r24, Z
    3f60:	80 64       	ori	r24, 0x40	; 64
    3f62:	80 83       	st	Z, r24
    3f64:	e8 ec       	ldi	r30, 0xC8	; 200
    3f66:	f0 e0       	ldi	r31, 0x00	; 0
    3f68:	80 81       	ld	r24, Z
    3f6a:	82 60       	ori	r24, 0x02	; 2
    3f6c:	80 83       	st	Z, r24
    3f6e:	86 e0       	ldi	r24, 0x06	; 6
    3f70:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    3f74:	80 e1       	ldi	r24, 0x10	; 16
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    3f7c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    3f80:	78 94       	sei
    3f82:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00002b20 <uart1_hal_send_string>:
    2b20:	6f 92       	push	r6
    2b22:	7f 92       	push	r7
    2b24:	8f 92       	push	r8
    2b26:	cf 92       	push	r12
    2b28:	df 92       	push	r13
    2b2a:	ef 92       	push	r14
    2b2c:	3b 01       	movw	r6, r22
    2b2e:	88 2e       	mov	r8, r24
    2b30:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <tx_buffer_data_len>
    2b34:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <tx_buffer_data_len+0x1>
    2b38:	89 2b       	or	r24, r25
    2b3a:	d1 f7       	brne	.-12     	; 0x2b30 <uart1_hal_send_string+0x10>
    2b3c:	88 2d       	mov	r24, r8
    2b3e:	b3 01       	movw	r22, r6
    2b40:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    2b44:	bc 01       	movw	r22, r24
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	11 c0       	rjmp	.+34     	; 0x2b6e <uart1_hal_send_string+0x4e>
    2b4c:	e8 2c       	mov	r14, r8
    2b4e:	63 01       	movw	r12, r6
    2b50:	c2 0e       	add	r12, r18
    2b52:	d3 1e       	adc	r13, r19
    2b54:	e1 1c       	adc	r14, r1
    2b56:	37 fd       	sbrc	r19, 7
    2b58:	ea 94       	dec	r14
    2b5a:	f6 01       	movw	r30, r12
    2b5c:	94 91       	lpm	r25, Z
    2b5e:	e7 fc       	sbrc	r14, 7
    2b60:	90 81       	ld	r25, Z
    2b62:	f9 01       	movw	r30, r18
    2b64:	e8 54       	subi	r30, 0x48	; 72
    2b66:	fb 4f       	sbci	r31, 0xFB	; 251
    2b68:	90 83       	st	Z, r25
    2b6a:	2f 5f       	subi	r18, 0xFF	; 255
    2b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6e:	26 17       	cp	r18, r22
    2b70:	37 07       	cpc	r19, r23
    2b72:	60 f3       	brcs	.-40     	; 0x2b4c <uart1_hal_send_string+0x2c>
    2b74:	fb 01       	movw	r30, r22
    2b76:	e8 54       	subi	r30, 0x48	; 72
    2b78:	fb 4f       	sbci	r31, 0xFB	; 251
    2b7a:	8d e0       	ldi	r24, 0x0D	; 13
    2b7c:	80 83       	st	Z, r24
    2b7e:	fb 01       	movw	r30, r22
    2b80:	e7 54       	subi	r30, 0x47	; 71
    2b82:	fb 4f       	sbci	r31, 0xFB	; 251
    2b84:	8a e0       	ldi	r24, 0x0A	; 10
    2b86:	80 83       	st	Z, r24
    2b88:	6e 5f       	subi	r22, 0xFE	; 254
    2b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8c:	70 93 c6 06 	sts	0x06C6, r23	; 0x8006c6 <tx_buffer_data_len+0x1>
    2b90:	60 93 c5 06 	sts	0x06C5, r22	; 0x8006c5 <tx_buffer_data_len>
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	90 93 c4 06 	sts	0x06C4, r25	; 0x8006c4 <tx_buffer_cursor+0x1>
    2b9c:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <tx_buffer_cursor>
    2ba0:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_end>
    2ba4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2ba8:	ef 90       	pop	r14
    2baa:	df 90       	pop	r13
    2bac:	cf 90       	pop	r12
    2bae:	8f 90       	pop	r8
    2bb0:	7f 90       	pop	r7
    2bb2:	6f 90       	pop	r6
    2bb4:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00004832 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    4832:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <rx_buffer_has_message>
    4836:	81 e0       	ldi	r24, 0x01	; 1
    4838:	91 11       	cpse	r25, r1
    483a:	01 c0       	rjmp	.+2      	; 0x483e <uart1_hal_message_ready+0xc>
    483c:	80 e0       	ldi	r24, 0x00	; 0
}
    483e:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00004840 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    4840:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <rx_buffer_data_len>
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	9a 34       	cpi	r25, 0x4A	; 74
    4848:	08 f4       	brcc	.+2      	; 0x484c <uart1_hal_rx_full+0xc>
    484a:	80 e0       	ldi	r24, 0x00	; 0
}
    484c:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

00004974 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    4974:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    4978:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <rx_buffer_data_len>
    497c:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

0000441a <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    441a:	0f 93       	push	r16
    441c:	1f 93       	push	r17
    441e:	cf 93       	push	r28
    4420:	8c 01       	movw	r16, r24
    4422:	0e 94 cc 21 	call	0x4398	; 0x4398 <copy_buffer>
    4426:	c0 91 d2 06 	lds	r28, 0x06D2	; 0x8006d2 <rx_buffer_data_len>
    442a:	c2 50       	subi	r28, 0x02	; 2
    442c:	f8 01       	movw	r30, r16
    442e:	ec 0f       	add	r30, r28
    4430:	f1 1d       	adc	r31, r1
    4432:	10 82       	st	Z, r1
    4434:	0e 94 ba 24 	call	0x4974	; 0x4974 <uart1_hal_clear_rx_buffer>
    4438:	8c 2f       	mov	r24, r28
    443a:	cf 91       	pop	r28
    443c:	1f 91       	pop	r17
    443e:	0f 91       	pop	r16
    4440:	08 95       	ret

Disassembly of section .text.__vector_30:

00003306 <__vector_30>:
    3306:	1f 92       	push	r1
    3308:	0f 92       	push	r0
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	0f 92       	push	r0
    330e:	11 24       	eor	r1, r1
    3310:	2f 93       	push	r18
    3312:	3f 93       	push	r19
    3314:	8f 93       	push	r24
    3316:	9f 93       	push	r25
    3318:	ef 93       	push	r30
    331a:	ff 93       	push	r31
    331c:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <tx_buffer_cursor>
    3320:	90 91 c4 06 	lds	r25, 0x06C4	; 0x8006c4 <tx_buffer_cursor+0x1>
    3324:	20 91 c5 06 	lds	r18, 0x06C5	; 0x8006c5 <tx_buffer_data_len>
    3328:	30 91 c6 06 	lds	r19, 0x06C6	; 0x8006c6 <tx_buffer_data_len+0x1>
    332c:	82 17       	cp	r24, r18
    332e:	93 07       	cpc	r25, r19
    3330:	70 f4       	brcc	.+28     	; 0x334e <__vector_30+0x48>
    3332:	9c 01       	movw	r18, r24
    3334:	2f 5f       	subi	r18, 0xFF	; 255
    3336:	3f 4f       	sbci	r19, 0xFF	; 255
    3338:	30 93 c4 06 	sts	0x06C4, r19	; 0x8006c4 <tx_buffer_cursor+0x1>
    333c:	20 93 c3 06 	sts	0x06C3, r18	; 0x8006c3 <tx_buffer_cursor>
    3340:	fc 01       	movw	r30, r24
    3342:	e8 54       	subi	r30, 0x48	; 72
    3344:	fb 4f       	sbci	r31, 0xFB	; 251
    3346:	80 81       	ld	r24, Z
    3348:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    334c:	08 c0       	rjmp	.+16     	; 0x335e <__vector_30+0x58>
    334e:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <tx_buffer_cursor+0x1>
    3352:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <tx_buffer_cursor>
    3356:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <tx_buffer_data_len+0x1>
    335a:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <tx_buffer_data_len>
    335e:	ff 91       	pop	r31
    3360:	ef 91       	pop	r30
    3362:	9f 91       	pop	r25
    3364:	8f 91       	pop	r24
    3366:	3f 91       	pop	r19
    3368:	2f 91       	pop	r18
    336a:	0f 90       	pop	r0
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	0f 90       	pop	r0
    3370:	1f 90       	pop	r1
    3372:	18 95       	reti

Disassembly of section .text.__vector_28:

000031b4 <__vector_28>:
    31b4:	1f 92       	push	r1
    31b6:	0f 92       	push	r0
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	0f 92       	push	r0
    31bc:	11 24       	eor	r1, r1
    31be:	2f 93       	push	r18
    31c0:	8f 93       	push	r24
    31c2:	9f 93       	push	r25
    31c4:	ef 93       	push	r30
    31c6:	ff 93       	push	r31
    31c8:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <rx_buffer_has_message>
    31cc:	81 11       	cpse	r24, r1
    31ce:	0e c0       	rjmp	.+28     	; 0x31ec <__vector_28+0x38>
    31d0:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <rx_buffer_data_len>
    31d4:	eb 34       	cpi	r30, 0x4B	; 75
    31d6:	50 f4       	brcc	.+20     	; 0x31ec <__vector_28+0x38>
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	8e 0f       	add	r24, r30
    31dc:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <rx_buffer_data_len>
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    31e6:	ec 5c       	subi	r30, 0xCC	; 204
    31e8:	f9 4f       	sbci	r31, 0xF9	; 249
    31ea:	80 83       	st	Z, r24
    31ec:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <rx_buffer_data_len>
    31f0:	83 30       	cpi	r24, 0x03	; 3
    31f2:	80 f0       	brcs	.+32     	; 0x3214 <__vector_28+0x60>
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	fc 01       	movw	r30, r24
    31f8:	ed 5c       	subi	r30, 0xCD	; 205
    31fa:	f9 4f       	sbci	r31, 0xF9	; 249
    31fc:	20 81       	ld	r18, Z
    31fe:	2a 30       	cpi	r18, 0x0A	; 10
    3200:	49 f4       	brne	.+18     	; 0x3214 <__vector_28+0x60>
    3202:	fc 01       	movw	r30, r24
    3204:	ee 5c       	subi	r30, 0xCE	; 206
    3206:	f9 4f       	sbci	r31, 0xF9	; 249
    3208:	80 81       	ld	r24, Z
    320a:	8d 30       	cpi	r24, 0x0D	; 13
    320c:	19 f4       	brne	.+6      	; 0x3214 <__vector_28+0x60>
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <rx_buffer_has_message>
    3214:	ff 91       	pop	r31
    3216:	ef 91       	pop	r30
    3218:	9f 91       	pop	r25
    321a:	8f 91       	pop	r24
    321c:	2f 91       	pop	r18
    321e:	0f 90       	pop	r0
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	0f 90       	pop	r0
    3224:	1f 90       	pop	r1
    3226:	18 95       	reti

Disassembly of section .text.main:

00004666 <main>:
{
	#ifdef _RUN_TEST
		test_runner();
	#endif // _RUN_TEST
	
	PM_HAL_LED_power(true);
    4666:	81 e0       	ldi	r24, 0x01	; 1
    4668:	0e 94 92 23 	call	0x4724	; 0x4724 <PM_HAL_LED_power>
	CONF_enter();
    466c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <CONF_enter>
	PM_HAL_LED_power(false);
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	0e 94 92 23 	call	0x4724	; 0x4724 <PM_HAL_LED_power>
			//MAINPG_start();
		//}
		//_delay_ms(5000);
	//}
	//#endif
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	08 95       	ret

Disassembly of section .text.calc_ppm_methane:

00002bb6 <calc_ppm_methane>:
	PM_HAL_meth_power(false);
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
}
    2bb6:	8f 92       	push	r8
    2bb8:	9f 92       	push	r9
    2bba:	af 92       	push	r10
    2bbc:	bf 92       	push	r11
    2bbe:	cf 92       	push	r12
    2bc0:	df 92       	push	r13
    2bc2:	ef 92       	push	r14
    2bc4:	ff 92       	push	r15
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__floatunsisf>
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e8       	ldi	r20, 0x80	; 128
    2bd6:	59 e3       	ldi	r21, 0x39	; 57
    2bd8:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <__mulsf3>
    2bdc:	80 90 b7 06 	lds	r8, 0x06B7	; 0x8006b7 <Vc>
    2be0:	90 90 b8 06 	lds	r9, 0x06B8	; 0x8006b8 <Vc+0x1>
    2be4:	a0 90 b9 06 	lds	r10, 0x06B9	; 0x8006b9 <Vc+0x2>
    2be8:	b0 90 ba 06 	lds	r11, 0x06BA	; 0x8006ba <Vc+0x3>
    2bec:	a5 01       	movw	r20, r10
    2bee:	94 01       	movw	r18, r8
    2bf0:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <__mulsf3>
    2bf4:	6b 01       	movw	r12, r22
    2bf6:	7c 01       	movw	r14, r24
    2bf8:	9b 01       	movw	r18, r22
    2bfa:	ac 01       	movw	r20, r24
    2bfc:	c5 01       	movw	r24, r10
    2bfe:	b4 01       	movw	r22, r8
    2c00:	0e 94 43 24 	call	0x4886	; 0x4886 <__subsf3>
    2c04:	a7 01       	movw	r20, r14
    2c06:	96 01       	movw	r18, r12
    2c08:	0e 94 dd 24 	call	0x49ba	; 0x49ba <__divsf3>
    2c0c:	20 91 b3 06 	lds	r18, 0x06B3	; 0x8006b3 <RRL>
    2c10:	30 91 b4 06 	lds	r19, 0x06B4	; 0x8006b4 <RRL+0x1>
    2c14:	40 91 b5 06 	lds	r20, 0x06B5	; 0x8006b5 <RRL+0x2>
    2c18:	50 91 b6 06 	lds	r21, 0x06B6	; 0x8006b6 <RRL+0x3>
    2c1c:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <__mulsf3>
    2c20:	20 91 af 06 	lds	r18, 0x06AF	; 0x8006af <PPM_factor>
    2c24:	30 91 b0 06 	lds	r19, 0x06B0	; 0x8006b0 <PPM_factor+0x1>
    2c28:	40 91 b1 06 	lds	r20, 0x06B1	; 0x8006b1 <PPM_factor+0x2>
    2c2c:	50 91 b2 06 	lds	r21, 0x06B2	; 0x8006b2 <PPM_factor+0x3>
    2c30:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <__mulsf3>
    2c34:	0e 94 bf 1a 	call	0x357e	; 0x357e <__fixunssfsi>
    2c38:	cb 01       	movw	r24, r22
    2c3a:	ff 90       	pop	r15
    2c3c:	ef 90       	pop	r14
    2c3e:	df 90       	pop	r13
    2c40:	cf 90       	pop	r12
    2c42:	bf 90       	pop	r11
    2c44:	af 90       	pop	r10
    2c46:	9f 90       	pop	r9
    2c48:	8f 90       	pop	r8
    2c4a:	08 95       	ret

Disassembly of section .text.ADC_get_value:

0000368e <ADC_get_value>:
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	00 d0       	rcall	.+0      	; 0x3698 <ADC_get_value+0xa>
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	8c 01       	movw	r16, r24
    369e:	8f ef       	ldi	r24, 0xFF	; 255
    36a0:	9f ef       	ldi	r25, 0xFF	; 255
    36a2:	f8 01       	movw	r30, r16
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	80 83       	st	Z, r24
    36a8:	42 e0       	ldi	r20, 0x02	; 2
    36aa:	be 01       	movw	r22, r28
    36ac:	6f 5f       	subi	r22, 0xFF	; 255
    36ae:	7f 4f       	sbci	r23, 0xFF	; 255
    36b0:	8d e4       	ldi	r24, 0x4D	; 77
    36b2:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <TWI_API_read_data_ack_end_nack_stop>
    36b6:	81 11       	cpse	r24, r1
    36b8:	0d c0       	rjmp	.+26     	; 0x36d4 <ADC_get_value+0x46>
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	98 2f       	mov	r25, r24
    36c0:	88 27       	eor	r24, r24
    36c2:	2a 81       	ldd	r18, Y+2	; 0x02
    36c4:	82 2b       	or	r24, r18
    36c6:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <calc_ppm_methane>
    36ca:	f8 01       	movw	r30, r16
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	01 c0       	rjmp	.+2      	; 0x36d6 <ADC_get_value+0x48>
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

00003e88 <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    3e88:	ef 92       	push	r14
    3e8a:	ff 92       	push	r15
    3e8c:	0f 93       	push	r16
    3e8e:	1f 93       	push	r17
	Vc=Vcc;
    3e90:	60 93 b7 06 	sts	0x06B7, r22	; 0x8006b7 <Vc>
    3e94:	70 93 b8 06 	sts	0x06B8, r23	; 0x8006b8 <Vc+0x1>
    3e98:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <Vc+0x2>
    3e9c:	90 93 ba 06 	sts	0x06BA, r25	; 0x8006ba <Vc+0x3>
	RRL=Rrl;
    3ea0:	20 93 b3 06 	sts	0x06B3, r18	; 0x8006b3 <RRL>
    3ea4:	30 93 b4 06 	sts	0x06B4, r19	; 0x8006b4 <RRL+0x1>
    3ea8:	40 93 b5 06 	sts	0x06B5, r20	; 0x8006b5 <RRL+0x2>
    3eac:	50 93 b6 06 	sts	0x06B6, r21	; 0x8006b6 <RRL+0x3>
	PPM_factor=PPMfactor;
    3eb0:	e0 92 af 06 	sts	0x06AF, r14	; 0x8006af <PPM_factor>
    3eb4:	f0 92 b0 06 	sts	0x06B0, r15	; 0x8006b0 <PPM_factor+0x1>
    3eb8:	00 93 b1 06 	sts	0x06B1, r16	; 0x8006b1 <PPM_factor+0x2>
    3ebc:	10 93 b2 06 	sts	0x06B2, r17	; 0x8006b2 <PPM_factor+0x3>
}
    3ec0:	1f 91       	pop	r17
    3ec2:	0f 91       	pop	r16
    3ec4:	ff 90       	pop	r15
    3ec6:	ef 90       	pop	r14
    3ec8:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

0000467c <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    467c:	60 e4       	ldi	r22, 0x40	; 64
    467e:	70 e0       	ldi	r23, 0x00	; 0
    4680:	80 e8       	ldi	r24, 0x80	; 128
    4682:	0e 94 d6 23 	call	0x47ac	; 0x47ac <eeprom_read_byte>
    4686:	91 e0       	ldi	r25, 0x01	; 1
    4688:	81 11       	cpse	r24, r1
    468a:	01 c0       	rjmp	.+2      	; 0x468e <EM_has_deveui+0x12>
    468c:	90 e0       	ldi	r25, 0x00	; 0
}
    468e:	89 2f       	mov	r24, r25
    4690:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00004692 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    4692:	61 e4       	ldi	r22, 0x41	; 65
    4694:	70 e0       	ldi	r23, 0x00	; 0
    4696:	80 e8       	ldi	r24, 0x80	; 128
    4698:	0e 94 d6 23 	call	0x47ac	; 0x47ac <eeprom_read_byte>
    469c:	91 e0       	ldi	r25, 0x01	; 1
    469e:	81 11       	cpse	r24, r1
    46a0:	01 c0       	rjmp	.+2      	; 0x46a4 <EM_has_appeui+0x12>
    46a2:	90 e0       	ldi	r25, 0x00	; 0
}
    46a4:	89 2f       	mov	r24, r25
    46a6:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

000046a8 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    46a8:	62 e4       	ldi	r22, 0x42	; 66
    46aa:	70 e0       	ldi	r23, 0x00	; 0
    46ac:	80 e8       	ldi	r24, 0x80	; 128
    46ae:	0e 94 d6 23 	call	0x47ac	; 0x47ac <eeprom_read_byte>
    46b2:	91 e0       	ldi	r25, 0x01	; 1
    46b4:	81 11       	cpse	r24, r1
    46b6:	01 c0       	rjmp	.+2      	; 0x46ba <EM_has_appkey+0x12>
    46b8:	90 e0       	ldi	r25, 0x00	; 0
}
    46ba:	89 2f       	mov	r24, r25
    46bc:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

00003fbe <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3fbe:	cf 92       	push	r12
    3fc0:	df 92       	push	r13
    3fc2:	ef 92       	push	r14
    3fc4:	6b 01       	movw	r12, r22
    3fc6:	e8 2e       	mov	r14, r24
    3fc8:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    3fcc:	40 97       	sbiw	r24, 0x10	; 16
    3fce:	79 f4       	brne	.+30     	; 0x3fee <EM_set_deveui+0x30>
    3fd0:	20 e1       	ldi	r18, 0x10	; 16
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 e0       	ldi	r20, 0x00	; 0
    3fd6:	50 e0       	ldi	r21, 0x00	; 0
    3fd8:	8e 2d       	mov	r24, r14
    3fda:	b6 01       	movw	r22, r12
    3fdc:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <eeprom_update_block>
    3fe0:	61 e0       	ldi	r22, 0x01	; 1
    3fe2:	80 e4       	ldi	r24, 0x40	; 64
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	0e 94 6e 22 	call	0x44dc	; 0x44dc <eeprom_update_byte>
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	01 c0       	rjmp	.+2      	; 0x3ff0 <EM_set_deveui+0x32>
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	ef 90       	pop	r14
    3ff2:	df 90       	pop	r13
    3ff4:	cf 90       	pop	r12
    3ff6:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

000042aa <EM_get_deveui>:
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	8c 01       	movw	r16, r24
    42b2:	0e 94 3e 23 	call	0x467c	; 0x467c <EM_has_deveui>
    42b6:	c8 2f       	mov	r28, r24
    42b8:	88 23       	and	r24, r24
    42ba:	51 f0       	breq	.+20     	; 0x42d0 <EM_get_deveui+0x26>
    42bc:	20 e1       	ldi	r18, 0x10	; 16
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	40 e0       	ldi	r20, 0x00	; 0
    42c2:	50 e0       	ldi	r21, 0x00	; 0
    42c4:	60 e0       	ldi	r22, 0x00	; 0
    42c6:	c8 01       	movw	r24, r16
    42c8:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <eeprom_read_block>
    42cc:	f8 01       	movw	r30, r16
    42ce:	10 8a       	std	Z+16, r1	; 0x10
    42d0:	8c 2f       	mov	r24, r28
    42d2:	cf 91       	pop	r28
    42d4:	1f 91       	pop	r17
    42d6:	0f 91       	pop	r16
    42d8:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00003ff8 <EM_set_appeui>:
    3ff8:	cf 92       	push	r12
    3ffa:	df 92       	push	r13
    3ffc:	ef 92       	push	r14
    3ffe:	6b 01       	movw	r12, r22
    4000:	e8 2e       	mov	r14, r24
    4002:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    4006:	40 97       	sbiw	r24, 0x10	; 16
    4008:	79 f4       	brne	.+30     	; 0x4028 <EM_set_appeui+0x30>
    400a:	20 e1       	ldi	r18, 0x10	; 16
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e1       	ldi	r20, 0x10	; 16
    4010:	50 e0       	ldi	r21, 0x00	; 0
    4012:	8e 2d       	mov	r24, r14
    4014:	b6 01       	movw	r22, r12
    4016:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <eeprom_update_block>
    401a:	61 e0       	ldi	r22, 0x01	; 1
    401c:	81 e4       	ldi	r24, 0x41	; 65
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	0e 94 6e 22 	call	0x44dc	; 0x44dc <eeprom_update_byte>
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	01 c0       	rjmp	.+2      	; 0x402a <EM_set_appeui+0x32>
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	ef 90       	pop	r14
    402c:	df 90       	pop	r13
    402e:	cf 90       	pop	r12
    4030:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

000042da <EM_get_appeui>:
    42da:	0f 93       	push	r16
    42dc:	1f 93       	push	r17
    42de:	cf 93       	push	r28
    42e0:	8c 01       	movw	r16, r24
    42e2:	0e 94 49 23 	call	0x4692	; 0x4692 <EM_has_appeui>
    42e6:	c8 2f       	mov	r28, r24
    42e8:	88 23       	and	r24, r24
    42ea:	51 f0       	breq	.+20     	; 0x4300 <EM_get_appeui+0x26>
    42ec:	20 e1       	ldi	r18, 0x10	; 16
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	40 e1       	ldi	r20, 0x10	; 16
    42f2:	50 e0       	ldi	r21, 0x00	; 0
    42f4:	60 e0       	ldi	r22, 0x00	; 0
    42f6:	c8 01       	movw	r24, r16
    42f8:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <eeprom_read_block>
    42fc:	f8 01       	movw	r30, r16
    42fe:	10 8a       	std	Z+16, r1	; 0x10
    4300:	8c 2f       	mov	r24, r28
    4302:	cf 91       	pop	r28
    4304:	1f 91       	pop	r17
    4306:	0f 91       	pop	r16
    4308:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00004032 <EM_set_appkey>:
    4032:	cf 92       	push	r12
    4034:	df 92       	push	r13
    4036:	ef 92       	push	r14
    4038:	6b 01       	movw	r12, r22
    403a:	e8 2e       	mov	r14, r24
    403c:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    4040:	80 97       	sbiw	r24, 0x20	; 32
    4042:	79 f4       	brne	.+30     	; 0x4062 <EM_set_appkey+0x30>
    4044:	20 e2       	ldi	r18, 0x20	; 32
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	40 e2       	ldi	r20, 0x20	; 32
    404a:	50 e0       	ldi	r21, 0x00	; 0
    404c:	8e 2d       	mov	r24, r14
    404e:	b6 01       	movw	r22, r12
    4050:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <eeprom_update_block>
    4054:	61 e0       	ldi	r22, 0x01	; 1
    4056:	82 e4       	ldi	r24, 0x42	; 66
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	0e 94 6e 22 	call	0x44dc	; 0x44dc <eeprom_update_byte>
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	01 c0       	rjmp	.+2      	; 0x4064 <EM_set_appkey+0x32>
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	ef 90       	pop	r14
    4066:	df 90       	pop	r13
    4068:	cf 90       	pop	r12
    406a:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

0000430a <EM_get_appkey>:
    430a:	0f 93       	push	r16
    430c:	1f 93       	push	r17
    430e:	cf 93       	push	r28
    4310:	8c 01       	movw	r16, r24
    4312:	0e 94 54 23 	call	0x46a8	; 0x46a8 <EM_has_appkey>
    4316:	c8 2f       	mov	r28, r24
    4318:	88 23       	and	r24, r24
    431a:	51 f0       	breq	.+20     	; 0x4330 <EM_get_appkey+0x26>
    431c:	20 e2       	ldi	r18, 0x20	; 32
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	40 e2       	ldi	r20, 0x20	; 32
    4322:	50 e0       	ldi	r21, 0x00	; 0
    4324:	60 e0       	ldi	r22, 0x00	; 0
    4326:	c8 01       	movw	r24, r16
    4328:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <eeprom_read_block>
    432c:	f8 01       	movw	r30, r16
    432e:	10 a2       	std	Z+32, r1	; 0x20
    4330:	8c 2f       	mov	r24, r28
    4332:	cf 91       	pop	r28
    4334:	1f 91       	pop	r17
    4336:	0f 91       	pop	r16
    4338:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

0000484e <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    484e:	ab 01       	movw	r20, r22
    4850:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    4852:	83 e4       	ldi	r24, 0x43	; 67
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	0e 94 27 23 	call	0x464e	; 0x464e <eeprom_update_dword>
    485a:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00004582 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    4582:	cf 93       	push	r28
    4584:	df 93       	push	r29
    4586:	ec 01       	movw	r28, r24
    4588:	63 e4       	ldi	r22, 0x43	; 67
    458a:	70 e0       	ldi	r23, 0x00	; 0
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	0e 94 66 24 	call	0x48cc	; 0x48cc <eeprom_read_dword>
    4592:	68 83       	st	Y, r22
    4594:	79 83       	std	Y+1, r23	; 0x01
    4596:	8a 83       	std	Y+2, r24	; 0x02
    4598:	9b 83       	std	Y+3, r25	; 0x03
    459a:	df 91       	pop	r29
    459c:	cf 91       	pop	r28
    459e:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

0000485c <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    485c:	ab 01       	movw	r20, r22
    485e:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    4860:	87 e4       	ldi	r24, 0x47	; 71
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	0e 94 27 23 	call	0x464e	; 0x464e <eeprom_update_dword>
    4868:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

000045a0 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    45a0:	cf 93       	push	r28
    45a2:	df 93       	push	r29
    45a4:	ec 01       	movw	r28, r24
    45a6:	67 e4       	ldi	r22, 0x47	; 71
    45a8:	70 e0       	ldi	r23, 0x00	; 0
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	0e 94 66 24 	call	0x48cc	; 0x48cc <eeprom_read_dword>
    45b0:	68 83       	st	Y, r22
    45b2:	79 83       	std	Y+1, r23	; 0x01
    45b4:	8a 83       	std	Y+2, r24	; 0x02
    45b6:	9b 83       	std	Y+3, r25	; 0x03
    45b8:	df 91       	pop	r29
    45ba:	cf 91       	pop	r28
    45bc:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

0000486a <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    486a:	ab 01       	movw	r20, r22
    486c:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    486e:	8b e4       	ldi	r24, 0x4B	; 75
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	0e 94 27 23 	call	0x464e	; 0x464e <eeprom_update_dword>
    4876:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

000045be <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    45be:	cf 93       	push	r28
    45c0:	df 93       	push	r29
    45c2:	ec 01       	movw	r28, r24
    45c4:	6b e4       	ldi	r22, 0x4B	; 75
    45c6:	70 e0       	ldi	r23, 0x00	; 0
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	0e 94 66 24 	call	0x48cc	; 0x48cc <eeprom_read_dword>
    45ce:	68 83       	st	Y, r22
    45d0:	79 83       	std	Y+1, r23	; 0x01
    45d2:	8a 83       	std	Y+2, r24	; 0x02
    45d4:	9b 83       	std	Y+3, r25	; 0x03
    45d6:	df 91       	pop	r29
    45d8:	cf 91       	pop	r28
    45da:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00004878 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    4878:	24 2f       	mov	r18, r20
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	44 e6       	ldi	r20, 0x64	; 100
    487e:	50 e0       	ldi	r21, 0x00	; 0
    4880:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <eeprom_update_block>
    4884:	08 95       	ret

Disassembly of section .text.EM_get_collections:

000047ce <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    47ce:	26 2f       	mov	r18, r22
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	44 e6       	ldi	r20, 0x64	; 100
    47d4:	50 e0       	ldi	r21, 0x00	; 0
    47d6:	60 e0       	ldi	r22, 0x00	; 0
    47d8:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <eeprom_read_block>
    47dc:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

000048e8 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    48e8:	68 2f       	mov	r22, r24
    48ea:	8f e4       	ldi	r24, 0x4F	; 79
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	0e 94 6e 22 	call	0x44dc	; 0x44dc <eeprom_update_byte>
    48f2:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

000048f4 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    48f4:	6f e4       	ldi	r22, 0x4F	; 79
    48f6:	70 e0       	ldi	r23, 0x00	; 0
    48f8:	80 e0       	ldi	r24, 0x00	; 0
    48fa:	0e 94 d6 23 	call	0x47ac	; 0x47ac <eeprom_read_byte>
}
    48fe:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

00004900 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    4900:	bc 01       	movw	r22, r24
    4902:	80 e5       	ldi	r24, 0x50	; 80
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	0e 94 aa 24 	call	0x4954	; 0x4954 <eeprom_update_word>
    490a:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

0000490c <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    490c:	60 e5       	ldi	r22, 0x50	; 80
    490e:	70 e0       	ldi	r23, 0x00	; 0
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	0e 94 6d 24 	call	0x48da	; 0x48da <eeprom_read_word>
}
    4916:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

00004918 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    4918:	68 2f       	mov	r22, r24
    491a:	82 e5       	ldi	r24, 0x52	; 82
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	0e 94 6e 22 	call	0x44dc	; 0x44dc <eeprom_update_byte>
    4922:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

00004924 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    4924:	62 e5       	ldi	r22, 0x52	; 82
    4926:	70 e0       	ldi	r23, 0x00	; 0
    4928:	80 e0       	ldi	r24, 0x00	; 0
    492a:	0e 94 d6 23 	call	0x47ac	; 0x47ac <eeprom_read_byte>
}
    492e:	08 95       	ret

Disassembly of section .text.LM_reset_module:

000049d8 <LM_reset_module>:
bool LM_is_free(){
	return busy==false;
}

LM_STATUS LM_reset_module(){
	return util_reset_module();
    49d8:	0e 94 77 1e 	call	0x3cee	; 0x3cee <util_reset_module>
}
    49dc:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

000049de <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    49de:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <util_lora_forward_msg>
    49e2:	08 95       	ret

Disassembly of section .text.LM_send_break:

000049e4 <LM_send_break>:
}

void LM_send_break(){
	util_send_break();
    49e4:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <util_send_break>
    49e8:	08 95       	ret

Disassembly of section .text.attach_ending:

00004618 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    4618:	fc 01       	movw	r30, r24
    461a:	01 90       	ld	r0, Z+
    461c:	00 20       	and	r0, r0
    461e:	e9 f7       	brne	.-6      	; 0x461a <attach_ending+0x2>
    4620:	cf 01       	movw	r24, r30
    4622:	23 e0       	ldi	r18, 0x03	; 3
    4624:	30 e0       	ldi	r19, 0x00	; 0
    4626:	42 e3       	ldi	r20, 0x32	; 50
    4628:	56 e0       	ldi	r21, 0x06	; 6
    462a:	60 e0       	ldi	r22, 0x00	; 0
    462c:	01 97       	sbiw	r24, 0x01	; 1
    462e:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
    4632:	08 95       	ret

Disassembly of section .text.cb_watchdog_counter:

00004930 <cb_watchdog_counter>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    4930:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <wd_cnt>
    4934:	8f 5f       	subi	r24, 0xFF	; 255
    4936:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <wd_cnt>
    493a:	08 95       	ret

Disassembly of section .text.util_str_begins_with:

00003b84 <util_str_begins_with>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    3b84:	6f 92       	push	r6
    3b86:	7f 92       	push	r7
    3b88:	8f 92       	push	r8
    3b8a:	cf 92       	push	r12
    3b8c:	df 92       	push	r13
    3b8e:	ef 92       	push	r14
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	3b 01       	movw	r6, r22
    3b96:	88 2e       	mov	r8, r24
    3b98:	69 01       	movw	r12, r18
    3b9a:	e4 2e       	mov	r14, r20
    3b9c:	84 2f       	mov	r24, r20
    3b9e:	b9 01       	movw	r22, r18
    3ba0:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    3ba4:	8c 01       	movw	r16, r24
    3ba6:	4e 2d       	mov	r20, r14
    3ba8:	96 01       	movw	r18, r12
    3baa:	88 2d       	mov	r24, r8
    3bac:	b3 01       	movw	r22, r6
    3bae:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <strncmp>
    3bb2:	21 e0       	ldi	r18, 0x01	; 1
    3bb4:	89 2b       	or	r24, r25
    3bb6:	09 f0       	breq	.+2      	; 0x3bba <util_str_begins_with+0x36>
    3bb8:	20 e0       	ldi	r18, 0x00	; 0
    3bba:	82 2f       	mov	r24, r18
    3bbc:	1f 91       	pop	r17
    3bbe:	0f 91       	pop	r16
    3bc0:	ef 90       	pop	r14
    3bc2:	df 90       	pop	r13
    3bc4:	cf 90       	pop	r12
    3bc6:	8f 90       	pop	r8
    3bc8:	7f 90       	pop	r7
    3bca:	6f 90       	pop	r6
    3bcc:	08 95       	ret

Disassembly of section .text.util_reset_module:

00003cee <util_reset_module>:
bool util_str_begins_with(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    3cee:	0e 94 cd 24 	call	0x499a	; 0x499a <rn2483_reset_active>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cf2:	2f ef       	ldi	r18, 0xFF	; 255
    3cf4:	89 e6       	ldi	r24, 0x69	; 105
    3cf6:	98 e1       	ldi	r25, 0x18	; 24
    3cf8:	21 50       	subi	r18, 0x01	; 1
    3cfa:	80 40       	sbci	r24, 0x00	; 0
    3cfc:	90 40       	sbci	r25, 0x00	; 0
    3cfe:	e1 f7       	brne	.-8      	; 0x3cf8 <util_reset_module+0xa>
    3d00:	00 c0       	rjmp	.+0      	; 0x3d02 <util_reset_module+0x14>
    3d02:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    3d04:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    3d08:	0e 94 12 24 	call	0x4824	; 0x4824 <uart0_hal_message_ready>
    3d0c:	88 23       	and	r24, r24
    3d0e:	e1 f3       	breq	.-8      	; 0x3d08 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    3d10:	80 e9       	ldi	r24, 0x90	; 144
    3d12:	92 e0       	ldi	r25, 0x02	; 2
    3d14:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <uart0_hal_read_message_as_str>
	
	if(util_str_begins_with(lm_msg, RN2483)){
    3d18:	60 e9       	ldi	r22, 0x90	; 144
    3d1a:	72 e0       	ldi	r23, 0x02	; 2
    3d1c:	80 e8       	ldi	r24, 0x80	; 128
    3d1e:	20 ea       	ldi	r18, 0xA0	; 160
    3d20:	36 e0       	ldi	r19, 0x06	; 6
    3d22:	40 e0       	ldi	r20, 0x00	; 0
    3d24:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <util_str_begins_with>
    3d28:	88 23       	and	r24, r24
    3d2a:	11 f0       	breq	.+4      	; 0x3d30 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    3d30:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    3d32:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00002ee8 <util_lora_forward_msg>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	ea 01       	movw	r28, r20
    2eee:	ab 01       	movw	r20, r22
    2ef0:	68 2f       	mov	r22, r24
    2ef2:	80 e9       	ldi	r24, 0x90	; 144
    2ef4:	92 e0       	ldi	r25, 0x02	; 2
    2ef6:	0e 94 fd 22 	call	0x45fa	; 0x45fa <strcpy>
    2efa:	80 e9       	ldi	r24, 0x90	; 144
    2efc:	92 e0       	ldi	r25, 0x02	; 2
    2efe:	0e 94 0c 23 	call	0x4618	; 0x4618 <attach_ending>
    2f02:	60 e9       	ldi	r22, 0x90	; 144
    2f04:	72 e0       	ldi	r23, 0x02	; 2
    2f06:	80 e8       	ldi	r24, 0x80	; 128
    2f08:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <uart0_hal_send_string>
    2f0c:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <wd_cnt>
    2f10:	88 e9       	ldi	r24, 0x98	; 152
    2f12:	94 e2       	ldi	r25, 0x24	; 36
    2f14:	0e 94 9d 1b 	call	0x373a	; 0x373a <TC2_HAL_subscribe>
    2f18:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <wd_cb_pointer>
    2f1c:	0e 94 12 24 	call	0x4824	; 0x4824 <uart0_hal_message_ready>
    2f20:	81 11       	cpse	r24, r1
    2f22:	04 c0       	rjmp	.+8      	; 0x2f2c <util_lora_forward_msg+0x44>
    2f24:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <wd_cnt>
    2f28:	8f 30       	cpi	r24, 0x0F	; 15
    2f2a:	c0 f3       	brcs	.-16     	; 0x2f1c <util_lora_forward_msg+0x34>
    2f2c:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <wd_cb_pointer>
    2f30:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <TC2_HAL_cancel>
    2f34:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <wd_cnt>
    2f38:	8f 30       	cpi	r24, 0x0F	; 15
    2f3a:	60 f0       	brcs	.+24     	; 0x2f54 <util_lora_forward_msg+0x6c>
    2f3c:	2c e0       	ldi	r18, 0x0C	; 12
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	47 ea       	ldi	r20, 0xA7	; 167
    2f42:	56 e0       	ldi	r21, 0x06	; 6
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	ce 01       	movw	r24, r28
    2f48:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <uart0_hal_read_message_as_str>
    2f52:	03 c0       	rjmp	.+6      	; 0x2f5a <util_lora_forward_msg+0x72>
    2f54:	ce 01       	movw	r24, r28
    2f56:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <uart0_hal_read_message_as_str>
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	08 95       	ret

Disassembly of section .text.util_send_break:

000049b2 <util_send_break>:
		uart0_hal_read_message_as_str(res);
	}
}

void util_send_break(){
	uart0_hal_send_break(0x55);
    49b2:	85 e5       	ldi	r24, 0x55	; 85
    49b4:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <uart0_hal_send_break>
    49b8:	08 95       	ret

Disassembly of section .text.MRPP_validate_collections_space:

0000351a <MRPP_validate_collections_space>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
}

bool MRPP_validate_collections_space(COLLECTION collections[], uint8_t nCollections){
    351a:	cf 93       	push	r28
    351c:	df 93       	push	r29
    351e:	ec 01       	movw	r28, r24
    //Check number of collections
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3520:	86 2f       	mov	r24, r22
    3522:	88 0f       	add	r24, r24
    3524:	88 0f       	add	r24, r24
    3526:	85 5f       	subi	r24, 0xF5	; 245
    if(headerSize>MAX_PAYLOAD_SIZE) return false;
    3528:	85 36       	cpi	r24, 0x65	; 101
    352a:	18 f5       	brcc	.+70     	; 0x3572 <MRPP_validate_collections_space+0x58>
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	18 c0       	rjmp	.+48     	; 0x3564 <MRPP_validate_collections_space+0x4a>

    //Check buffer size
    uint16_t size=0;
    for (uint8_t i = 0; i < nCollections; i++)
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    3534:	e9 2f       	mov	r30, r25
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	af 01       	movw	r20, r30
    353a:	44 0f       	add	r20, r20
    353c:	55 1f       	adc	r21, r21
    353e:	44 0f       	add	r20, r20
    3540:	55 1f       	adc	r21, r21
    3542:	e4 0f       	add	r30, r20
    3544:	f5 1f       	adc	r31, r21
    3546:	ec 0f       	add	r30, r28
    3548:	fd 1f       	adc	r31, r29
    354a:	a0 81       	ld	r26, Z
    354c:	b1 81       	ldd	r27, Z+1	; 0x01
    354e:	74 81       	ldd	r23, Z+4	; 0x04
    3550:	7a 9f       	mul	r23, r26
    3552:	a0 01       	movw	r20, r0
    3554:	7b 9f       	mul	r23, r27
    3556:	50 0d       	add	r21, r0
    3558:	11 24       	eor	r1, r1
    355a:	24 0f       	add	r18, r20
    355c:	35 1f       	adc	r19, r21
    355e:	2a 5f       	subi	r18, 0xFA	; 250
    3560:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    if(headerSize>MAX_PAYLOAD_SIZE) return false;

    //Check buffer size
    uint16_t size=0;
    for (uint8_t i = 0; i < nCollections; i++)
    3562:	9f 5f       	subi	r25, 0xFF	; 255
    3564:	96 17       	cp	r25, r22
    3566:	30 f3       	brcs	.-52     	; 0x3534 <MRPP_validate_collections_space+0x1a>
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    }
    
    if(size<=BODY_BUFFER_DATA_SIZE) return true;
    3568:	21 32       	cpi	r18, 0x21	; 33
    356a:	33 40       	sbci	r19, 0x03	; 3
    356c:	20 f4       	brcc	.+8      	; 0x3576 <MRPP_validate_collections_space+0x5c>
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	03 c0       	rjmp	.+6      	; 0x3578 <MRPP_validate_collections_space+0x5e>
}

bool MRPP_validate_collections_space(COLLECTION collections[], uint8_t nCollections){
    //Check number of collections
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    if(headerSize>MAX_PAYLOAD_SIZE) return false;
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	01 c0       	rjmp	.+2      	; 0x3578 <MRPP_validate_collections_space+0x5e>
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    }
    
    if(size<=BODY_BUFFER_DATA_SIZE) return true;
    return false;
    3576:	80 e0       	ldi	r24, 0x00	; 0
}
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

0000216e <datetime_to_BCD>:
	ts[1]=_tsbit.ts[2];
	ts[2]=_tsbit.ts[1];
	ts[3]=_tsbit.ts[0];
}

static void datetime_to_BCD(Datetime dt, DatetimeBCD *bcd){
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	00 d0       	rcall	.+0      	; 0x2176 <datetime_to_BCD+0x8>
    2176:	00 d0       	rcall	.+0      	; 0x2178 <datetime_to_BCD+0xa>
    2178:	00 d0       	rcall	.+0      	; 0x217a <datetime_to_BCD+0xc>
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	f9 01       	movw	r30, r18
	bcd->second=decToBCD(dt.second);
    2180:	3d ec       	ldi	r19, 0xCD	; 205
    2182:	43 9f       	mul	r20, r19
    2184:	21 2d       	mov	r18, r1
    2186:	11 24       	eor	r1, r1
    2188:	26 95       	lsr	r18
    218a:	26 95       	lsr	r18
    218c:	26 95       	lsr	r18
    218e:	10 e1       	ldi	r17, 0x10	; 16
    2190:	21 9f       	mul	r18, r17
    2192:	d0 01       	movw	r26, r0
    2194:	11 24       	eor	r1, r1
    2196:	22 0f       	add	r18, r18
    2198:	b2 2f       	mov	r27, r18
    219a:	bb 0f       	add	r27, r27
    219c:	bb 0f       	add	r27, r27
    219e:	2b 0f       	add	r18, r27
    21a0:	42 1b       	sub	r20, r18
    21a2:	4a 2b       	or	r20, r26
    21a4:	40 83       	st	Z, r20
	bcd->minute=decToBCD(dt.minute);
    21a6:	53 9f       	mul	r21, r19
    21a8:	21 2d       	mov	r18, r1
    21aa:	11 24       	eor	r1, r1
    21ac:	26 95       	lsr	r18
    21ae:	26 95       	lsr	r18
    21b0:	26 95       	lsr	r18
    21b2:	40 e1       	ldi	r20, 0x10	; 16
    21b4:	24 9f       	mul	r18, r20
    21b6:	d0 01       	movw	r26, r0
    21b8:	11 24       	eor	r1, r1
    21ba:	22 0f       	add	r18, r18
    21bc:	42 2f       	mov	r20, r18
    21be:	44 0f       	add	r20, r20
    21c0:	44 0f       	add	r20, r20
    21c2:	24 0f       	add	r18, r20
    21c4:	52 1b       	sub	r21, r18
    21c6:	5a 2b       	or	r21, r26
    21c8:	51 83       	std	Z+1, r21	; 0x01
	bcd->hour=decToBCD(dt.hour);
    21ca:	63 9f       	mul	r22, r19
    21cc:	41 2d       	mov	r20, r1
    21ce:	11 24       	eor	r1, r1
    21d0:	46 95       	lsr	r20
    21d2:	46 95       	lsr	r20
    21d4:	46 95       	lsr	r20
    21d6:	10 e1       	ldi	r17, 0x10	; 16
    21d8:	41 9f       	mul	r20, r17
    21da:	d0 01       	movw	r26, r0
    21dc:	11 24       	eor	r1, r1
    21de:	44 0f       	add	r20, r20
    21e0:	24 2f       	mov	r18, r20
    21e2:	22 0f       	add	r18, r18
    21e4:	22 0f       	add	r18, r18
    21e6:	42 0f       	add	r20, r18
    21e8:	64 1b       	sub	r22, r20
    21ea:	6a 2b       	or	r22, r26
    21ec:	62 83       	std	Z+2, r22	; 0x02
	bcd->day=decToBCD(dt.day);
    21ee:	73 9f       	mul	r23, r19
    21f0:	41 2d       	mov	r20, r1
    21f2:	11 24       	eor	r1, r1
    21f4:	46 95       	lsr	r20
    21f6:	46 95       	lsr	r20
    21f8:	46 95       	lsr	r20
    21fa:	20 e1       	ldi	r18, 0x10	; 16
    21fc:	42 9f       	mul	r20, r18
    21fe:	d0 01       	movw	r26, r0
    2200:	11 24       	eor	r1, r1
    2202:	44 0f       	add	r20, r20
    2204:	24 2f       	mov	r18, r20
    2206:	22 0f       	add	r18, r18
    2208:	22 0f       	add	r18, r18
    220a:	42 0f       	add	r20, r18
    220c:	74 1b       	sub	r23, r20
    220e:	7a 2b       	or	r23, r26
    2210:	73 83       	std	Z+3, r23	; 0x03
	bcd->month=decToBCD(dt.month);
    2212:	83 9f       	mul	r24, r19
    2214:	41 2d       	mov	r20, r1
    2216:	11 24       	eor	r1, r1
    2218:	46 95       	lsr	r20
    221a:	46 95       	lsr	r20
    221c:	46 95       	lsr	r20
    221e:	10 e1       	ldi	r17, 0x10	; 16
    2220:	41 9f       	mul	r20, r17
    2222:	b0 01       	movw	r22, r0
    2224:	11 24       	eor	r1, r1
    2226:	44 0f       	add	r20, r20
    2228:	24 2f       	mov	r18, r20
    222a:	22 0f       	add	r18, r18
    222c:	22 0f       	add	r18, r18
    222e:	42 0f       	add	r20, r18
    2230:	84 1b       	sub	r24, r20
    2232:	86 2b       	or	r24, r22
    2234:	84 83       	std	Z+4, r24	; 0x04
	bcd->year=decToBCD(dt.year);
    2236:	93 9f       	mul	r25, r19
    2238:	31 2d       	mov	r19, r1
    223a:	11 24       	eor	r1, r1
    223c:	36 95       	lsr	r19
    223e:	36 95       	lsr	r19
    2240:	36 95       	lsr	r19
    2242:	20 e1       	ldi	r18, 0x10	; 16
    2244:	32 9f       	mul	r19, r18
    2246:	a0 01       	movw	r20, r0
    2248:	11 24       	eor	r1, r1
    224a:	33 0f       	add	r19, r19
    224c:	83 2f       	mov	r24, r19
    224e:	88 0f       	add	r24, r24
    2250:	88 0f       	add	r24, r24
    2252:	38 0f       	add	r19, r24
    2254:	93 1b       	sub	r25, r19
    2256:	94 2b       	or	r25, r20
    2258:	95 83       	std	Z+5, r25	; 0x05
}
    225a:	26 96       	adiw	r28, 0x06	; 6
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00001b9a <RTC_get_current_time>:
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_get_current_time(Datetime *dt){
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	27 97       	sbiw	r28, 0x07	; 7
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	8c 01       	movw	r16, r24
	uint8_t data[7];
	uint8_t status;
	
	status = TWI_API_write_data(RTC_ADDR, CMD_READ_TIME_POINTER, 1);
    1bb4:	21 e0       	ldi	r18, 0x01	; 1
    1bb6:	47 ec       	ldi	r20, 0xC7	; 199
    1bb8:	56 e0       	ldi	r21, 0x06	; 6
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	81 e5       	ldi	r24, 0x51	; 81
    1bbe:	0e 94 a6 23 	call	0x474c	; 0x474c <TWI_API_write_data>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	7c c0       	rjmp	.+248    	; 0x1cbe <RTC_get_current_time+0x124>
	
	status = TWI_API_repeat_read_data_stop(RTC_ADDR, data, 7);
    1bc6:	47 e0       	ldi	r20, 0x07	; 7
    1bc8:	be 01       	movw	r22, r28
    1bca:	6f 5f       	subi	r22, 0xFF	; 255
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	81 e5       	ldi	r24, 0x51	; 81
    1bd0:	0e 94 3d 21 	call	0x427a	; 0x427a <TWI_API_repeat_read_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1bd4:	81 11       	cpse	r24, r1
    1bd6:	75 c0       	rjmp	.+234    	; 0x1cc2 <RTC_get_current_time+0x128>
	
	dt->second=BCDTodec((data[0] & 0x7F));
    1bd8:	29 81       	ldd	r18, Y+1	; 0x01
    1bda:	82 2f       	mov	r24, r18
    1bdc:	8f 77       	andi	r24, 0x7F	; 127
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	95 95       	asr	r25
    1be2:	87 95       	ror	r24
    1be4:	95 95       	asr	r25
    1be6:	87 95       	ror	r24
    1be8:	95 95       	asr	r25
    1bea:	87 95       	ror	r24
    1bec:	95 95       	asr	r25
    1bee:	87 95       	ror	r24
    1bf0:	88 0f       	add	r24, r24
    1bf2:	98 2f       	mov	r25, r24
    1bf4:	99 0f       	add	r25, r25
    1bf6:	99 0f       	add	r25, r25
    1bf8:	89 0f       	add	r24, r25
    1bfa:	2f 70       	andi	r18, 0x0F	; 15
    1bfc:	82 0f       	add	r24, r18
    1bfe:	f8 01       	movw	r30, r16
    1c00:	80 83       	st	Z, r24
	dt->minute=BCDTodec((data[1] & 0x7F));
    1c02:	2a 81       	ldd	r18, Y+2	; 0x02
    1c04:	82 2f       	mov	r24, r18
    1c06:	8f 77       	andi	r24, 0x7F	; 127
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	95 95       	asr	r25
    1c0c:	87 95       	ror	r24
    1c0e:	95 95       	asr	r25
    1c10:	87 95       	ror	r24
    1c12:	95 95       	asr	r25
    1c14:	87 95       	ror	r24
    1c16:	95 95       	asr	r25
    1c18:	87 95       	ror	r24
    1c1a:	88 0f       	add	r24, r24
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	99 0f       	add	r25, r25
    1c20:	99 0f       	add	r25, r25
    1c22:	89 0f       	add	r24, r25
    1c24:	2f 70       	andi	r18, 0x0F	; 15
    1c26:	82 0f       	add	r24, r18
    1c28:	81 83       	std	Z+1, r24	; 0x01
	dt->hour=BCDTodec((data[2] & 0x3F));
    1c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2c:	82 2f       	mov	r24, r18
    1c2e:	8f 73       	andi	r24, 0x3F	; 63
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	95 95       	asr	r25
    1c34:	87 95       	ror	r24
    1c36:	95 95       	asr	r25
    1c38:	87 95       	ror	r24
    1c3a:	95 95       	asr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	95 95       	asr	r25
    1c40:	87 95       	ror	r24
    1c42:	88 0f       	add	r24, r24
    1c44:	98 2f       	mov	r25, r24
    1c46:	99 0f       	add	r25, r25
    1c48:	99 0f       	add	r25, r25
    1c4a:	89 0f       	add	r24, r25
    1c4c:	2f 70       	andi	r18, 0x0F	; 15
    1c4e:	82 0f       	add	r24, r18
    1c50:	82 83       	std	Z+2, r24	; 0x02
	dt->day=BCDTodec((data[3] & 0x3F));
    1c52:	2c 81       	ldd	r18, Y+4	; 0x04
    1c54:	82 2f       	mov	r24, r18
    1c56:	8f 73       	andi	r24, 0x3F	; 63
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	95 95       	asr	r25
    1c5c:	87 95       	ror	r24
    1c5e:	95 95       	asr	r25
    1c60:	87 95       	ror	r24
    1c62:	95 95       	asr	r25
    1c64:	87 95       	ror	r24
    1c66:	95 95       	asr	r25
    1c68:	87 95       	ror	r24
    1c6a:	88 0f       	add	r24, r24
    1c6c:	98 2f       	mov	r25, r24
    1c6e:	99 0f       	add	r25, r25
    1c70:	99 0f       	add	r25, r25
    1c72:	89 0f       	add	r24, r25
    1c74:	2f 70       	andi	r18, 0x0F	; 15
    1c76:	82 0f       	add	r24, r18
    1c78:	83 83       	std	Z+3, r24	; 0x03
	dt->month=BCDTodec((data[5] & 0x1F));
    1c7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1c7c:	82 2f       	mov	r24, r18
    1c7e:	8f 71       	andi	r24, 0x1F	; 31
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	95 95       	asr	r25
    1c84:	87 95       	ror	r24
    1c86:	95 95       	asr	r25
    1c88:	87 95       	ror	r24
    1c8a:	95 95       	asr	r25
    1c8c:	87 95       	ror	r24
    1c8e:	95 95       	asr	r25
    1c90:	87 95       	ror	r24
    1c92:	88 0f       	add	r24, r24
    1c94:	98 2f       	mov	r25, r24
    1c96:	99 0f       	add	r25, r25
    1c98:	99 0f       	add	r25, r25
    1c9a:	89 0f       	add	r24, r25
    1c9c:	2f 70       	andi	r18, 0x0F	; 15
    1c9e:	82 0f       	add	r24, r18
    1ca0:	84 83       	std	Z+4, r24	; 0x04
	dt->year=BCDTodec((data[6] & 0xFF));
    1ca2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca4:	98 2f       	mov	r25, r24
    1ca6:	92 95       	swap	r25
    1ca8:	9f 70       	andi	r25, 0x0F	; 15
    1caa:	99 0f       	add	r25, r25
    1cac:	29 2f       	mov	r18, r25
    1cae:	22 0f       	add	r18, r18
    1cb0:	22 0f       	add	r18, r18
    1cb2:	92 0f       	add	r25, r18
    1cb4:	8f 70       	andi	r24, 0x0F	; 15
    1cb6:	89 0f       	add	r24, r25
    1cb8:	85 83       	std	Z+5, r24	; 0x05
	
	return RTC_STATUS_SUCCESS;
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	03 c0       	rjmp	.+6      	; 0x1cc4 <RTC_get_current_time+0x12a>
RTC_STATUS RTC_get_current_time(Datetime *dt){
	uint8_t data[7];
	uint8_t status;
	
	status = TWI_API_write_data(RTC_ADDR, CMD_READ_TIME_POINTER, 1);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	01 c0       	rjmp	.+2      	; 0x1cc4 <RTC_get_current_time+0x12a>
	
	status = TWI_API_repeat_read_data_stop(RTC_ADDR, data, 7);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
	dt->day=BCDTodec((data[3] & 0x3F));
	dt->month=BCDTodec((data[5] & 0x1F));
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}
    1cc4:	27 96       	adiw	r28, 0x07	; 7
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

0000344a <RTC_set_current_time>:

RTC_STATUS RTC_set_current_time(Datetime dt){
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	64 97       	sbiw	r28, 0x14	; 20
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    345e:	9e 01       	movw	r18, r28
    3460:	27 5f       	subi	r18, 0xF7	; 247
    3462:	3f 4f       	sbci	r19, 0xFF	; 255
    3464:	0e 94 b7 10 	call	0x216e	; 0x216e <datetime_to_BCD>
	
	data[0]=0x02;
    3468:	82 e0       	ldi	r24, 0x02	; 2
    346a:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    346c:	89 85       	ldd	r24, Y+9	; 0x09
    346e:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    3470:	8a 85       	ldd	r24, Y+10	; 0x0a
    3472:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    3474:	8b 85       	ldd	r24, Y+11	; 0x0b
    3476:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    3478:	8c 85       	ldd	r24, Y+12	; 0x0c
    347a:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    347c:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    347e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3480:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    3482:	8e 85       	ldd	r24, Y+14	; 0x0e
    3484:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    3486:	ae 01       	movw	r20, r28
    3488:	4f 5f       	subi	r20, 0xFF	; 255
    348a:	5f 4f       	sbci	r21, 0xFF	; 255
    348c:	60 e8       	ldi	r22, 0x80	; 128
    348e:	28 e0       	ldi	r18, 0x08	; 8
    3490:	81 e5       	ldi	r24, 0x51	; 81
    3492:	0e 94 1a 23 	call	0x4634	; 0x4634 <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    3496:	88 23       	and	r24, r24
    3498:	11 f0       	breq	.+4      	; 0x349e <RTC_set_current_time+0x54>
    349a:	82 e0       	ldi	r24, 0x02	; 2
    349c:	01 c0       	rjmp	.+2      	; 0x34a0 <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    349e:	80 e0       	ldi	r24, 0x00	; 0
}
    34a0:	64 96       	adiw	r28, 0x14	; 20
    34a2:	0f b6       	in	r0, 0x3f	; 63
    34a4:	f8 94       	cli
    34a6:	de bf       	out	0x3e, r29	; 62
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	cd bf       	out	0x3d, r28	; 61
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	08 95       	ret

Disassembly of section .text.clear_sampling_data:

00003bce <clear_sampling_data>:
	vect_SCD_do_sample();
	
	//Start timer
	TC1_HAL_start();
	return true;
}
    3bce:	e9 ea       	ldi	r30, 0xA9	; 169
    3bd0:	f6 e0       	ldi	r31, 0x06	; 6
    3bd2:	11 82       	std	Z+1, r1	; 0x01
    3bd4:	10 82       	st	Z, r1
    3bd6:	15 82       	std	Z+5, r1	; 0x05
    3bd8:	14 82       	std	Z+4, r1	; 0x04
    3bda:	13 82       	std	Z+3, r1	; 0x03
    3bdc:	12 82       	std	Z+2, r1	; 0x02
    3bde:	e3 ea       	ldi	r30, 0xA3	; 163
    3be0:	f6 e0       	ldi	r31, 0x06	; 6
    3be2:	11 82       	std	Z+1, r1	; 0x01
    3be4:	10 82       	st	Z, r1
    3be6:	15 82       	std	Z+5, r1	; 0x05
    3be8:	14 82       	std	Z+4, r1	; 0x04
    3bea:	13 82       	std	Z+3, r1	; 0x03
    3bec:	12 82       	std	Z+2, r1	; 0x02
    3bee:	ed e9       	ldi	r30, 0x9D	; 157
    3bf0:	f6 e0       	ldi	r31, 0x06	; 6
    3bf2:	11 82       	std	Z+1, r1	; 0x01
    3bf4:	10 82       	st	Z, r1
    3bf6:	15 82       	std	Z+5, r1	; 0x05
    3bf8:	14 82       	std	Z+4, r1	; 0x04
    3bfa:	13 82       	std	Z+3, r1	; 0x03
    3bfc:	12 82       	std	Z+2, r1	; 0x02
    3bfe:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <lowest_si+0x1>
    3c02:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <lowest_si>
    3c06:	10 92 ca 06 	sts	0x06CA, r1	; 0x8006ca <highest_si+0x1>
    3c0a:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <highest_si>
    3c0e:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <si_counter+0x1>
    3c12:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <si_counter>
    3c16:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

000034b2 <bytes_2_uint>:
    34b2:	cf 92       	push	r12
    34b4:	df 92       	push	r13
    34b6:	ef 92       	push	r14
    34b8:	ff 92       	push	r15
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	fc 01       	movw	r30, r24
    34c4:	04 81       	ldd	r16, Z+4	; 0x04
    34c6:	13 81       	ldd	r17, Z+3	; 0x03
    34c8:	d1 81       	ldd	r29, Z+1	; 0x01
    34ca:	c0 81       	ld	r28, Z
    34cc:	70 e0       	ldi	r23, 0x00	; 0
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__floatsisf>
    34d6:	9b 01       	movw	r18, r22
    34d8:	ac 01       	movw	r20, r24
    34da:	60 2f       	mov	r22, r16
    34dc:	71 2f       	mov	r23, r17
    34de:	8d 2f       	mov	r24, r29
    34e0:	9c 2f       	mov	r25, r28
    34e2:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <__mulsf3>
    34e6:	6b 01       	movw	r12, r22
    34e8:	7c 01       	movw	r14, r24
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	a9 01       	movw	r20, r18
    34f0:	0e 94 bf 24 	call	0x497e	; 0x497e <__cmpsf2>
    34f4:	88 23       	and	r24, r24
    34f6:	34 f0       	brlt	.+12     	; 0x3504 <bytes_2_uint+0x52>
    34f8:	c7 01       	movw	r24, r14
    34fa:	b6 01       	movw	r22, r12
    34fc:	0e 94 bf 1a 	call	0x357e	; 0x357e <__fixunssfsi>
    3500:	cb 01       	movw	r24, r22
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <bytes_2_uint+0x56>
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	1f 91       	pop	r17
    350e:	0f 91       	pop	r16
    3510:	ff 90       	pop	r15
    3512:	ef 90       	pop	r14
    3514:	df 90       	pop	r13
    3516:	cf 90       	pop	r12
    3518:	08 95       	ret

Disassembly of section .text.init_measurement:

0000406c <init_measurement>:
    406c:	25 e0       	ldi	r18, 0x05	; 5
    406e:	4b eb       	ldi	r20, 0xBB	; 187
    4070:	56 e0       	ldi	r21, 0x06	; 6
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	81 e6       	ldi	r24, 0x61	; 97
    4076:	0e 94 1a 23 	call	0x4634	; 0x4634 <TWI_API_write_data_stop>
    407a:	81 11       	cpse	r24, r1
    407c:	0f c0       	rjmp	.+30     	; 0x409c <init_measurement+0x30>
    407e:	25 e0       	ldi	r18, 0x05	; 5
    4080:	40 ec       	ldi	r20, 0xC0	; 192
    4082:	56 e0       	ldi	r21, 0x06	; 6
    4084:	60 e0       	ldi	r22, 0x00	; 0
    4086:	81 e6       	ldi	r24, 0x61	; 97
    4088:	0e 94 1a 23 	call	0x4634	; 0x4634 <TWI_API_write_data_stop>
    408c:	81 11       	cpse	r24, r1
    408e:	08 c0       	rjmp	.+16     	; 0x40a0 <init_measurement+0x34>
    4090:	0e 94 b0 24 	call	0x4960	; 0x4960 <SCD30_HAL_data_ready>
    4094:	88 23       	and	r24, r24
    4096:	e1 f3       	breq	.-8      	; 0x4090 <init_measurement+0x24>
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	08 95       	ret
    409c:	82 e0       	ldi	r24, 0x02	; 2
    409e:	08 95       	ret
    40a0:	82 e0       	ldi	r24, 0x02	; 2
    40a2:	08 95       	ret

Disassembly of section .text.validate_data:

000041e4 <validate_data>:
    41e4:	cf 93       	push	r28
    41e6:	df 93       	push	r29
    41e8:	ec 01       	movw	r28, r24
    41ea:	62 e0       	ldi	r22, 0x02	; 2
    41ec:	0e 94 6e 20 	call	0x40dc	; 0x40dc <calc_crc8>
    41f0:	9a 81       	ldd	r25, Y+2	; 0x02
    41f2:	89 13       	cpse	r24, r25
    41f4:	0a c0       	rjmp	.+20     	; 0x420a <validate_data+0x26>
    41f6:	62 e0       	ldi	r22, 0x02	; 2
    41f8:	ce 01       	movw	r24, r28
    41fa:	03 96       	adiw	r24, 0x03	; 3
    41fc:	0e 94 6e 20 	call	0x40dc	; 0x40dc <calc_crc8>
    4200:	9d 81       	ldd	r25, Y+5	; 0x05
    4202:	89 17       	cp	r24, r25
    4204:	21 f0       	breq	.+8      	; 0x420e <validate_data+0x2a>
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	03 c0       	rjmp	.+6      	; 0x4210 <validate_data+0x2c>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	01 c0       	rjmp	.+2      	; 0x4210 <validate_data+0x2c>
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	df 91       	pop	r29
    4212:	cf 91       	pop	r28
    4214:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00004492 <SCD30_sensor_on>:
/************************************************************************/
/* Definitions                                                          */
/************************************************************************/

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    4492:	0e 94 0b 24 	call	0x4816	; 0x4816 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	0e 94 7e 23 	call	0x46fc	; 0x46fc <PM_HAL_SCD30_power>
    449c:	2f ef       	ldi	r18, 0xFF	; 255
    449e:	83 ed       	ldi	r24, 0xD3	; 211
    44a0:	90 e3       	ldi	r25, 0x30	; 48
    44a2:	21 50       	subi	r18, 0x01	; 1
    44a4:	80 40       	sbci	r24, 0x00	; 0
    44a6:	90 40       	sbci	r25, 0x00	; 0
    44a8:	e1 f7       	brne	.-8      	; 0x44a2 <SCD30_sensor_on+0x10>
    44aa:	00 c0       	rjmp	.+0      	; 0x44ac <SCD30_sensor_on+0x1a>
    44ac:	00 00       	nop
	_delay_ms(2000);
	clear_sampling_data();
    44ae:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <clear_sampling_data>
	return init_measurement();
    44b2:	0e 94 36 20 	call	0x406c	; 0x406c <init_measurement>
}
    44b6:	08 95       	ret

Disassembly of section .text.SCD30_calc_validate_SI:

000026d2 <SCD30_calc_validate_SI>:
	vect_SCD_do_sample();
	
	//Start timer
	TC1_HAL_start();
	return true;
}
    26d2:	ef 92       	push	r14
    26d4:	ff 92       	push	r15
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	eb 01       	movw	r28, r22
    26e0:	7a 01       	movw	r14, r20
    26e2:	d9 01       	movw	r26, r18
    26e4:	f8 01       	movw	r30, r16
    26e6:	11 82       	std	Z+1, r1	; 0x01
    26e8:	10 82       	st	Z, r1
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	11 f0       	breq	.+4      	; 0x26f2 <SCD30_calc_validate_SI+0x20>
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
    26f2:	20 81       	ld	r18, Z
    26f4:	31 81       	ldd	r19, Z+1	; 0x01
    26f6:	2c 17       	cp	r18, r28
    26f8:	3d 07       	cpc	r19, r29
    26fa:	10 f4       	brcc	.+4      	; 0x2700 <SCD30_calc_validate_SI+0x2e>
    26fc:	d1 83       	std	Z+1, r29	; 0x01
    26fe:	c0 83       	st	Z, r28
    2700:	20 81       	ld	r18, Z
    2702:	31 81       	ldd	r19, Z+1	; 0x01
    2704:	2e 15       	cp	r18, r14
    2706:	3f 05       	cpc	r19, r15
    2708:	10 f4       	brcc	.+4      	; 0x270e <SCD30_calc_validate_SI+0x3c>
    270a:	f1 82       	std	Z+1, r15	; 0x01
    270c:	e0 82       	st	Z, r14
    270e:	20 81       	ld	r18, Z
    2710:	31 81       	ldd	r19, Z+1	; 0x01
    2712:	11 96       	adiw	r26, 0x01	; 1
    2714:	3c 93       	st	X, r19
    2716:	2e 93       	st	-X, r18
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	31 f0       	breq	.+12     	; 0x2728 <SCD30_calc_validate_SI+0x56>
    271c:	82 17       	cp	r24, r18
    271e:	93 07       	cpc	r25, r19
    2720:	18 f4       	brcc	.+6      	; 0x2728 <SCD30_calc_validate_SI+0x56>
    2722:	11 96       	adiw	r26, 0x01	; 1
    2724:	9c 93       	st	X, r25
    2726:	8e 93       	st	-X, r24
    2728:	20 97       	sbiw	r28, 0x00	; 0
    272a:	49 f0       	breq	.+18     	; 0x273e <SCD30_calc_validate_SI+0x6c>
    272c:	2d 91       	ld	r18, X+
    272e:	3c 91       	ld	r19, X
    2730:	11 97       	sbiw	r26, 0x01	; 1
    2732:	c2 17       	cp	r28, r18
    2734:	d3 07       	cpc	r29, r19
    2736:	18 f4       	brcc	.+6      	; 0x273e <SCD30_calc_validate_SI+0x6c>
    2738:	11 96       	adiw	r26, 0x01	; 1
    273a:	dc 93       	st	X, r29
    273c:	ce 93       	st	-X, r28
    273e:	e1 14       	cp	r14, r1
    2740:	f1 04       	cpc	r15, r1
    2742:	49 f0       	breq	.+18     	; 0x2756 <SCD30_calc_validate_SI+0x84>
    2744:	2d 91       	ld	r18, X+
    2746:	3c 91       	ld	r19, X
    2748:	11 97       	sbiw	r26, 0x01	; 1
    274a:	e2 16       	cp	r14, r18
    274c:	f3 06       	cpc	r15, r19
    274e:	18 f4       	brcc	.+6      	; 0x2756 <SCD30_calc_validate_SI+0x84>
    2750:	11 96       	adiw	r26, 0x01	; 1
    2752:	fc 92       	st	X, r15
    2754:	ee 92       	st	-X, r14
    2756:	2d 91       	ld	r18, X+
    2758:	3c 91       	ld	r19, X
    275a:	b9 01       	movw	r22, r18
    275c:	0e 94 35 22 	call	0x446a	; 0x446a <__udivmodhi4>
    2760:	89 2b       	or	r24, r25
    2762:	71 f4       	brne	.+28     	; 0x2780 <SCD30_calc_validate_SI+0xae>
    2764:	ce 01       	movw	r24, r28
    2766:	b9 01       	movw	r22, r18
    2768:	0e 94 35 22 	call	0x446a	; 0x446a <__udivmodhi4>
    276c:	89 2b       	or	r24, r25
    276e:	51 f4       	brne	.+20     	; 0x2784 <SCD30_calc_validate_SI+0xb2>
    2770:	c7 01       	movw	r24, r14
    2772:	b9 01       	movw	r22, r18
    2774:	0e 94 35 22 	call	0x446a	; 0x446a <__udivmodhi4>
    2778:	89 2b       	or	r24, r25
    277a:	31 f0       	breq	.+12     	; 0x2788 <SCD30_calc_validate_SI+0xb6>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	05 c0       	rjmp	.+10     	; 0x278a <SCD30_calc_validate_SI+0xb8>
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	03 c0       	rjmp	.+6      	; 0x278a <SCD30_calc_validate_SI+0xb8>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	01 c0       	rjmp	.+2      	; 0x278a <SCD30_calc_validate_SI+0xb8>
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	ff 90       	pop	r15
    2794:	ef 90       	pop	r14
    2796:	08 95       	ret

Disassembly of section .text.read_all_values:

00002058 <read_all_values>:
    2058:	cf 92       	push	r12
    205a:	df 92       	push	r13
    205c:	ef 92       	push	r14
    205e:	ff 92       	push	r15
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	62 97       	sbiw	r28, 0x12	; 18
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	8c 01       	movw	r16, r24
    207a:	7b 01       	movw	r14, r22
    207c:	6a 01       	movw	r12, r20
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	9f ef       	ldi	r25, 0xFF	; 255
    2082:	f8 01       	movw	r30, r16
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
    2088:	fb 01       	movw	r30, r22
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
    208e:	fa 01       	movw	r30, r20
    2090:	91 83       	std	Z+1, r25	; 0x01
    2092:	80 83       	st	Z, r24
    2094:	0e 94 b0 24 	call	0x4960	; 0x4960 <SCD30_HAL_data_ready>
    2098:	81 11       	cpse	r24, r1
    209a:	0d c0       	rjmp	.+26     	; 0x20b6 <read_all_values+0x5e>
    209c:	8e ef       	ldi	r24, 0xFE	; 254
    209e:	9f ef       	ldi	r25, 0xFF	; 255
    20a0:	f8 01       	movw	r30, r16
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
    20a6:	f7 01       	movw	r30, r14
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	80 83       	st	Z, r24
    20ac:	f6 01       	movw	r30, r12
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	80 83       	st	Z, r24
    20b2:	83 e0       	ldi	r24, 0x03	; 3
    20b4:	4d c0       	rjmp	.+154    	; 0x2150 <read_all_values+0xf8>
    20b6:	22 e0       	ldi	r18, 0x02	; 2
    20b8:	45 ec       	ldi	r20, 0xC5	; 197
    20ba:	56 e0       	ldi	r21, 0x06	; 6
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	81 e6       	ldi	r24, 0x61	; 97
    20c0:	0e 94 1a 23 	call	0x4634	; 0x4634 <TWI_API_write_data_stop>
    20c4:	81 11       	cpse	r24, r1
    20c6:	3b c0       	rjmp	.+118    	; 0x213e <read_all_values+0xe6>
    20c8:	8f e3       	ldi	r24, 0x3F	; 63
    20ca:	9f e1       	ldi	r25, 0x1F	; 31
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <read_all_values+0x74>
    20d0:	00 c0       	rjmp	.+0      	; 0x20d2 <read_all_values+0x7a>
    20d2:	00 00       	nop
    20d4:	42 e1       	ldi	r20, 0x12	; 18
    20d6:	be 01       	movw	r22, r28
    20d8:	6f 5f       	subi	r22, 0xFF	; 255
    20da:	7f 4f       	sbci	r23, 0xFF	; 255
    20dc:	81 e6       	ldi	r24, 0x61	; 97
    20de:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <TWI_API_read_data_ack_end_nack_stop>
    20e2:	81 11       	cpse	r24, r1
    20e4:	2e c0       	rjmp	.+92     	; 0x2142 <read_all_values+0xea>
    20e6:	ce 01       	movw	r24, r28
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <validate_data>
    20ee:	88 23       	and	r24, r24
    20f0:	51 f1       	breq	.+84     	; 0x2146 <read_all_values+0xee>
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	ce 01       	movw	r24, r28
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <bytes_2_uint>
    20fc:	f8 01       	movw	r30, r16
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	ce 01       	movw	r24, r28
    2104:	07 96       	adiw	r24, 0x07	; 7
    2106:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <validate_data>
    210a:	88 23       	and	r24, r24
    210c:	f1 f0       	breq	.+60     	; 0x214a <read_all_values+0xf2>
    210e:	6a e0       	ldi	r22, 0x0A	; 10
    2110:	ce 01       	movw	r24, r28
    2112:	07 96       	adiw	r24, 0x07	; 7
    2114:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <bytes_2_uint>
    2118:	f7 01       	movw	r30, r14
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	80 83       	st	Z, r24
    211e:	ce 01       	movw	r24, r28
    2120:	0d 96       	adiw	r24, 0x0d	; 13
    2122:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <validate_data>
    2126:	88 23       	and	r24, r24
    2128:	91 f0       	breq	.+36     	; 0x214e <read_all_values+0xf6>
    212a:	6a e0       	ldi	r22, 0x0A	; 10
    212c:	ce 01       	movw	r24, r28
    212e:	0d 96       	adiw	r24, 0x0d	; 13
    2130:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <bytes_2_uint>
    2134:	f6 01       	movw	r30, r12
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	09 c0       	rjmp	.+18     	; 0x2150 <read_all_values+0xf8>
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	07 c0       	rjmp	.+14     	; 0x2150 <read_all_values+0xf8>
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <read_all_values+0xf8>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	03 c0       	rjmp	.+6      	; 0x2150 <read_all_values+0xf8>
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <read_all_values+0xf8>
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	62 96       	adiw	r28, 0x12	; 18
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	ff 90       	pop	r15
    2166:	ef 90       	pop	r14
    2168:	df 90       	pop	r13
    216a:	cf 90       	pop	r12
    216c:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00004216 <SCD30_get_reading>:
	if(temp_SI % *lowest != 0) return false;
	if(hum_SI % *lowest != 0) return false;
	return true;
}

SCD30_STATUS SCD30_get_reading(uint16_t *co2, uint16_t *temp, uint16_t *humidity){
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	ec 01       	movw	r28, r24
    4224:	8b 01       	movw	r16, r22
    4226:	7a 01       	movw	r14, r20
	while(!SCD30_HAL_data_ready()){};
    4228:	0e 94 b0 24 	call	0x4960	; 0x4960 <SCD30_HAL_data_ready>
    422c:	88 23       	and	r24, r24
    422e:	e1 f3       	breq	.-8      	; 0x4228 <SCD30_get_reading+0x12>
	
	return read_all_values(co2, temp, humidity);
    4230:	a7 01       	movw	r20, r14
    4232:	b8 01       	movw	r22, r16
    4234:	ce 01       	movw	r24, r28
    4236:	0e 94 2c 10 	call	0x2058	; 0x2058 <read_all_values>
}
    423a:	df 91       	pop	r29
    423c:	cf 91       	pop	r28
    423e:	1f 91       	pop	r17
    4240:	0f 91       	pop	r16
    4242:	ff 90       	pop	r15
    4244:	ef 90       	pop	r14
    4246:	08 95       	ret

Disassembly of section .text.parse_cmd:

0000433a <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    433a:	fc 01       	movw	r30, r24
    433c:	80 81       	ld	r24, Z
    433e:	82 37       	cpi	r24, 0x72	; 114
    4340:	51 f0       	breq	.+20     	; 0x4356 <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    4342:	87 37       	cpi	r24, 0x77	; 119
    4344:	51 f0       	breq	.+20     	; 0x435a <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    4346:	83 36       	cpi	r24, 0x63	; 99
    4348:	51 f0       	breq	.+20     	; 0x435e <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    434a:	83 37       	cpi	r24, 0x73	; 115
    434c:	51 f0       	breq	.+20     	; 0x4362 <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    434e:	81 37       	cpi	r24, 0x71	; 113
    4350:	51 f4       	brne	.+20     	; 0x4366 <parse_cmd+0x2c>
    4352:	84 e0       	ldi	r24, 0x04	; 4
    4354:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    4356:	87 e0       	ldi	r24, 0x07	; 7
    4358:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    435a:	88 e0       	ldi	r24, 0x08	; 8
    435c:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    435e:	89 e0       	ldi	r24, 0x09	; 9
    4360:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    4362:	8a e0       	ldi	r24, 0x0A	; 10
    4364:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    4366:	85 e0       	ldi	r24, 0x05	; 5
}
    4368:	08 95       	ret

Disassembly of section .text.validate_cmd:

000036e4 <validate_cmd>:

static bool validate_cmd(char msg[]){
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    36ea:	bc 01       	movw	r22, r24
    36ec:	80 e8       	ldi	r24, 0x80	; 128
    36ee:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    36f2:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    36f4:	fc 01       	movw	r30, r24
    36f6:	31 97       	sbiw	r30, 0x01	; 1
    36f8:	ec 0f       	add	r30, r28
    36fa:	fd 1f       	adc	r31, r29
    36fc:	80 81       	ld	r24, Z
    36fe:	80 32       	cpi	r24, 0x20	; 32
    3700:	b1 f0       	breq	.+44     	; 0x372e <validate_cmd+0x4a>
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e0       	ldi	r20, 0x00	; 0
    3708:	0d c0       	rjmp	.+26     	; 0x3724 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    370a:	fe 01       	movw	r30, r28
    370c:	e2 0f       	add	r30, r18
    370e:	f3 1f       	adc	r31, r19
    3710:	90 81       	ld	r25, Z
    3712:	90 32       	cpi	r25, 0x20	; 32
    3714:	21 f4       	brne	.+8      	; 0x371e <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    3716:	41 11       	cpse	r20, r1
    3718:	0c c0       	rjmp	.+24     	; 0x3732 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    371a:	41 e0       	ldi	r20, 0x01	; 1
    371c:	01 c0       	rjmp	.+2      	; 0x3720 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    371e:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    3720:	2f 5f       	subi	r18, 0xFF	; 255
    3722:	3f 4f       	sbci	r19, 0xFF	; 255
    3724:	26 17       	cp	r18, r22
    3726:	37 07       	cpc	r19, r23
    3728:	80 f3       	brcs	.-32     	; 0x370a <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	03 c0       	rjmp	.+6      	; 0x3734 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	01 c0       	rjmp	.+2      	; 0x3734 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    3732:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	08 95       	ret

Disassembly of section .text.CONF_enter:

00001cda <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    1cda:	cf 93       	push	r28
	uart1_hal_init();
    1cdc:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    1ce0:	c0 e0       	ldi	r28, 0x00	; 0
    1ce2:	0d c0       	rjmp	.+26     	; 0x1cfe <CONF_enter+0x24>
				TC2_HAL_init();
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    1ce4:	c2 e0       	ldi	r28, 0x02	; 2
    1ce6:	0b c0       	rjmp	.+22     	; 0x1cfe <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    1ce8:	c5 e0       	ldi	r28, 0x05	; 5
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    1cec:	c6 e0       	ldi	r28, 0x06	; 6
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1cf0:	c5 e0       	ldi	r28, 0x05	; 5
    1cf2:	05 c0       	rjmp	.+10     	; 0x1cfe <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1cf4:	c5 e0       	ldi	r28, 0x05	; 5
    1cf6:	03 c0       	rjmp	.+6      	; 0x1cfe <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    1cf8:	c5 e0       	ldi	r28, 0x05	; 5
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1cfc:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    1cfe:	ec 2f       	mov	r30, r28
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	ec 30       	cpi	r30, 0x0C	; 12
    1d04:	f1 05       	cpc	r31, r1
    1d06:	d8 f7       	brcc	.-10     	; 0x1cfe <CONF_enter+0x24>
    1d08:	e2 5c       	subi	r30, 0xC2	; 194
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	75 e0       	ldi	r23, 0x05	; 5
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    1d1a:	66 e2       	ldi	r22, 0x26	; 38
    1d1c:	75 e0       	ldi	r23, 0x05	; 5
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				TC2_HAL_init();
    1d24:	0e 94 91 22 	call	0x4522	; 0x4522 <TC2_HAL_init>
				if(!init_methane_SCD30()){
    1d28:	0e 94 21 22 	call	0x4442	; 0x4442 <init_methane_SCD30>
    1d2c:	81 11       	cpse	r24, r1
    1d2e:	da cf       	rjmp	.-76     	; 0x1ce4 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    1d30:	68 e4       	ldi	r22, 0x48	; 72
    1d32:	75 e0       	ldi	r23, 0x05	; 5
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
					state=CONF_EXIT;
    1d3a:	c4 e0       	ldi	r28, 0x04	; 4
    1d3c:	e0 cf       	rjmp	.-64     	; 0x1cfe <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    1d3e:	0e 94 19 24 	call	0x4832	; 0x4832 <uart1_hal_message_ready>
    1d42:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    1d44:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    1d46:	0e 94 20 24 	call	0x4840	; 0x4840 <uart1_hal_rx_full>
    1d4a:	81 11       	cpse	r24, r1
    1d4c:	cd cf       	rjmp	.-102    	; 0x1ce8 <CONF_enter+0xe>
    1d4e:	d7 cf       	rjmp	.-82     	; 0x1cfe <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    1d50:	82 e5       	ldi	r24, 0x52	; 82
    1d52:	94 e0       	ldi	r25, 0x04	; 4
    1d54:	0e 94 0d 22 	call	0x441a	; 0x441a <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    1d58:	82 e5       	ldi	r24, 0x52	; 82
    1d5a:	94 e0       	ldi	r25, 0x04	; 4
    1d5c:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <validate_cmd>
    1d60:	88 23       	and	r24, r24
    1d62:	21 f2       	breq	.-120    	; 0x1cec <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    1d64:	82 e5       	ldi	r24, 0x52	; 82
    1d66:	94 e0       	ldi	r25, 0x04	; 4
    1d68:	0e 94 9d 21 	call	0x433a	; 0x433a <parse_cmd>
    1d6c:	c8 2f       	mov	r28, r24
    1d6e:	c7 cf       	rjmp	.-114    	; 0x1cfe <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    1d70:	62 e5       	ldi	r22, 0x52	; 82
    1d72:	74 e0       	ldi	r23, 0x04	; 4
    1d74:	80 e8       	ldi	r24, 0x80	; 128
    1d76:	4a e8       	ldi	r20, 0x8A	; 138
    1d78:	53 e0       	ldi	r21, 0x03	; 3
    1d7a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <handle_read>
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <CONF_enter+0xaa>
    1d82:	b6 cf       	rjmp	.-148    	; 0x1cf0 <CONF_enter+0x16>
					state=CONF_REPLY;
    1d84:	cb e0       	ldi	r28, 0x0B	; 11
    1d86:	bb cf       	rjmp	.-138    	; 0x1cfe <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    1d88:	62 e5       	ldi	r22, 0x52	; 82
    1d8a:	74 e0       	ldi	r23, 0x04	; 4
    1d8c:	80 e8       	ldi	r24, 0x80	; 128
    1d8e:	4a e8       	ldi	r20, 0x8A	; 138
    1d90:	53 e0       	ldi	r21, 0x03	; 3
    1d92:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <handle_write>
    1d96:	88 23       	and	r24, r24
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <CONF_enter+0xc2>
    1d9a:	ac cf       	rjmp	.-168    	; 0x1cf4 <CONF_enter+0x1a>
					state=CONF_REPLY;
    1d9c:	cb e0       	ldi	r28, 0x0B	; 11
    1d9e:	af cf       	rjmp	.-162    	; 0x1cfe <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    1da0:	62 e5       	ldi	r22, 0x52	; 82
    1da2:	74 e0       	ldi	r23, 0x04	; 4
    1da4:	80 e8       	ldi	r24, 0x80	; 128
    1da6:	0e 94 c7 1b 	call	0x378e	; 0x378e <CONNECT>
    1daa:	88 23       	and	r24, r24
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <CONF_enter+0xd6>
    1dae:	a4 cf       	rjmp	.-184    	; 0x1cf8 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    1db0:	c2 e0       	ldi	r28, 0x02	; 2
    1db2:	a5 cf       	rjmp	.-182    	; 0x1cfe <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
    1db4:	62 e5       	ldi	r22, 0x52	; 82
    1db6:	74 e0       	ldi	r23, 0x04	; 4
    1db8:	80 e8       	ldi	r24, 0x80	; 128
    1dba:	4a e8       	ldi	r20, 0x8A	; 138
    1dbc:	53 e0       	ldi	r21, 0x03	; 3
    1dbe:	0e 94 88 14 	call	0x2910	; 0x2910 <handle_sensor>
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <CONF_enter+0xee>
    1dc6:	9a cf       	rjmp	.-204    	; 0x1cfc <CONF_enter+0x22>
					state=CONF_REPLY;
    1dc8:	cb e0       	ldi	r28, 0x0B	; 11
    1dca:	99 cf       	rjmp	.-206    	; 0x1cfe <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    1dcc:	6a e8       	ldi	r22, 0x8A	; 138
    1dce:	73 e0       	ldi	r23, 0x03	; 3
    1dd0:	80 e8       	ldi	r24, 0x80	; 128
    1dd2:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1dd6:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1dd8:	92 cf       	rjmp	.-220    	; 0x1cfe <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    1dda:	67 e6       	ldi	r22, 0x67	; 103
    1ddc:	75 e0       	ldi	r23, 0x05	; 5
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1de4:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1de6:	8b cf       	rjmp	.-234    	; 0x1cfe <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    1de8:	61 e7       	ldi	r22, 0x71	; 113
    1dea:	75 e0       	ldi	r23, 0x05	; 5
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1df2:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1df4:	84 cf       	rjmp	.-248    	; 0x1cfe <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    1df6:	0e 94 ba 24 	call	0x4974	; 0x4974 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    1dfa:	6e e7       	ldi	r22, 0x7E	; 126
    1dfc:	75 e0       	ldi	r23, 0x05	; 5
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    1e04:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1e06:	7b cf       	rjmp	.-266    	; 0x1cfe <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    1e08:	64 ea       	ldi	r22, 0xA4	; 164
    1e0a:	75 e0       	ldi	r23, 0x05	; 5
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				return;
		}
	}
}
    1e12:	cf 91       	pop	r28
    1e14:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00003374 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    3374:	cf 92       	push	r12
    3376:	df 92       	push	r13
    3378:	ef 92       	push	r14
    337a:	0f 93       	push	r16
    337c:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    337e:	6c 01       	movw	r12, r24
    3380:	20 e8       	ldi	r18, 0x80	; 128
    3382:	e2 2e       	mov	r14, r18
    3384:	04 e0       	ldi	r16, 0x04	; 4
    3386:	10 e0       	ldi	r17, 0x00	; 0
    3388:	2c ea       	ldi	r18, 0xAC	; 172
    338a:	35 e0       	ldi	r19, 0x05	; 5
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	8e 2d       	mov	r24, r14
    3390:	b6 01       	movw	r22, r12
    3392:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <strncmp>
    3396:	89 2b       	or	r24, r25
    3398:	c1 f0       	breq	.+48     	; 0x33ca <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    339a:	05 e0       	ldi	r16, 0x05	; 5
    339c:	10 e0       	ldi	r17, 0x00	; 0
    339e:	21 eb       	ldi	r18, 0xB1	; 177
    33a0:	35 e0       	ldi	r19, 0x05	; 5
    33a2:	40 e0       	ldi	r20, 0x00	; 0
    33a4:	8e 2d       	mov	r24, r14
    33a6:	b6 01       	movw	r22, r12
    33a8:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <strncmp>
    33ac:	89 2b       	or	r24, r25
    33ae:	79 f0       	breq	.+30     	; 0x33ce <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    33b0:	04 e0       	ldi	r16, 0x04	; 4
    33b2:	10 e0       	ldi	r17, 0x00	; 0
    33b4:	27 eb       	ldi	r18, 0xB7	; 183
    33b6:	35 e0       	ldi	r19, 0x05	; 5
    33b8:	40 e0       	ldi	r20, 0x00	; 0
    33ba:	8e 2d       	mov	r24, r14
    33bc:	b6 01       	movw	r22, r12
    33be:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <strncmp>
    33c2:	89 2b       	or	r24, r25
    33c4:	31 f4       	brne	.+12     	; 0x33d2 <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    33c6:	85 e0       	ldi	r24, 0x05	; 5
    33c8:	05 c0       	rjmp	.+10     	; 0x33d4 <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    33ca:	86 e0       	ldi	r24, 0x06	; 6
    33cc:	03 c0       	rjmp	.+6      	; 0x33d4 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    33ce:	84 e0       	ldi	r24, 0x04	; 4
    33d0:	01 c0       	rjmp	.+2      	; 0x33d4 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    33d2:	83 e0       	ldi	r24, 0x03	; 3
    33d4:	1f 91       	pop	r17
    33d6:	0f 91       	pop	r16
    33d8:	ef 90       	pop	r14
    33da:	df 90       	pop	r13
    33dc:	cf 90       	pop	r12
    33de:	08 95       	ret

Disassembly of section .text.CON_RN2483:

000018dc <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    18dc:	6f 92       	push	r6
    18de:	7f 92       	push	r7
    18e0:	8f 92       	push	r8
    18e2:	cf 92       	push	r12
    18e4:	df 92       	push	r13
    18e6:	ef 92       	push	r14
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    18ec:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    18ee:	ec 2f       	mov	r30, r28
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	e7 30       	cpi	r30, 0x07	; 7
    18f4:	f1 05       	cpc	r31, r1
    18f6:	d8 f7       	brcc	.-10     	; 0x18ee <CON_RN2483+0x12>
    18f8:	e6 5b       	subi	r30, 0xB6	; 182
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    1900:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <uart0_hal_init>
				rn2483_init();
    1904:	0e 94 c9 24 	call	0x4992	; 0x4992 <rn2483_init>
				LM_reset_module();
    1908:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    190c:	6c eb       	ldi	r22, 0xBC	; 188
    190e:	75 e0       	ldi	r23, 0x05	; 5
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				state=CL_READ_MSG;
    1916:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1918:	ea cf       	rjmp	.-44     	; 0x18ee <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    191a:	0e 94 19 24 	call	0x4832	; 0x4832 <uart1_hal_message_ready>
    191e:	88 23       	and	r24, r24
    1920:	31 f3       	breq	.-52     	; 0x18ee <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    1922:	82 e5       	ldi	r24, 0x52	; 82
    1924:	94 e0       	ldi	r25, 0x04	; 4
    1926:	0e 94 0d 22 	call	0x441a	; 0x441a <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    192a:	c2 e0       	ldi	r28, 0x02	; 2
    192c:	e0 cf       	rjmp	.-64     	; 0x18ee <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    192e:	82 e5       	ldi	r24, 0x52	; 82
    1930:	94 e0       	ldi	r25, 0x04	; 4
    1932:	0e 94 ba 19 	call	0x3374	; 0x3374 <CON_RN2483_parse>
    1936:	c8 2f       	mov	r28, r24
			break;
    1938:	da cf       	rjmp	.-76     	; 0x18ee <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    193a:	82 e5       	ldi	r24, 0x52	; 82
    193c:	94 e0       	ldi	r25, 0x04	; 4
    193e:	6c 01       	movw	r12, r24
    1940:	20 e8       	ldi	r18, 0x80	; 128
    1942:	e2 2e       	mov	r14, r18
    1944:	2f 93       	push	r18
    1946:	df 92       	push	r13
    1948:	8f 93       	push	r24
    194a:	82 ef       	ldi	r24, 0xF2	; 242
    194c:	95 e0       	ldi	r25, 0x05	; 5
    194e:	a0 e0       	ldi	r26, 0x00	; 0
    1950:	af 93       	push	r26
    1952:	9f 93       	push	r25
    1954:	8f 93       	push	r24
    1956:	ca e8       	ldi	r28, 0x8A	; 138
    1958:	d3 e0       	ldi	r29, 0x03	; 3
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
				uart1_hal_send_string(cnf_reply);
    1962:	3e 01       	movw	r6, r28
    1964:	20 e8       	ldi	r18, 0x80	; 128
    1966:	82 2e       	mov	r8, r18
    1968:	88 2d       	mov	r24, r8
    196a:	b3 01       	movw	r22, r6
    196c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    1970:	ae 01       	movw	r20, r28
    1972:	6c 2d       	mov	r22, r12
    1974:	7d 2d       	mov	r23, r13
    1976:	8e 2d       	mov	r24, r14
    1978:	0e 94 ef 24 	call	0x49de	; 0x49de <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    197c:	88 2d       	mov	r24, r8
    197e:	b3 01       	movw	r22, r6
    1980:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    1984:	8d b7       	in	r24, 0x3d	; 61
    1986:	9e b7       	in	r25, 0x3e	; 62
    1988:	08 96       	adiw	r24, 0x08	; 8
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	9e bf       	out	0x3e, r25	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    1994:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1996:	ab cf       	rjmp	.-170    	; 0x18ee <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    1998:	88 ef       	ldi	r24, 0xF8	; 248
    199a:	95 e0       	ldi	r25, 0x05	; 5
    199c:	a0 e0       	ldi	r26, 0x00	; 0
    199e:	af 93       	push	r26
    19a0:	9f 93       	push	r25
    19a2:	8f 93       	push	r24
    19a4:	82 ef       	ldi	r24, 0xF2	; 242
    19a6:	95 e0       	ldi	r25, 0x05	; 5
    19a8:	a0 e0       	ldi	r26, 0x00	; 0
    19aa:	af 93       	push	r26
    19ac:	9f 93       	push	r25
    19ae:	8f 93       	push	r24
    19b0:	ca e8       	ldi	r28, 0x8A	; 138
    19b2:	d3 e0       	ldi	r29, 0x03	; 3
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
				uart1_hal_send_string(cnf_reply);
    19bc:	be 01       	movw	r22, r28
    19be:	80 e8       	ldi	r24, 0x80	; 128
    19c0:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
    19c4:	8f e7       	ldi	r24, 0x7F	; 127
    19c6:	98 e3       	ldi	r25, 0x38	; 56
    19c8:	21 e0       	ldi	r18, 0x01	; 1
    19ca:	81 50       	subi	r24, 0x01	; 1
    19cc:	90 40       	sbci	r25, 0x00	; 0
    19ce:	20 40       	sbci	r18, 0x00	; 0
    19d0:	e1 f7       	brne	.-8      	; 0x19ca <CON_RN2483+0xee>
    19d2:	00 c0       	rjmp	.+0      	; 0x19d4 <CON_RN2483+0xf8>
    19d4:	00 00       	nop
				_delay_ms(50);
				LM_send_break();
    19d6:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <LM_send_break>
				state=CL_READ_MSG;
			break;
    19da:	8d b7       	in	r24, 0x3d	; 61
    19dc:	9e b7       	in	r25, 0x3e	; 62
    19de:	08 96       	adiw	r24, 0x08	; 8
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	9e bf       	out	0x3e, r25	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	8d bf       	out	0x3d, r24	; 61
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break();
				state=CL_READ_MSG;
    19ea:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    19ec:	80 cf       	rjmp	.-256    	; 0x18ee <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    19ee:	0e 94 12 24 	call	0x4824	; 0x4824 <uart0_hal_message_ready>
    19f2:	88 23       	and	r24, r24
    19f4:	29 f0       	breq	.+10     	; 0x1a00 <CON_RN2483+0x124>
					uart0_hal_read_message_as_str(cnf_reply);
    19f6:	8a e8       	ldi	r24, 0x8A	; 138
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <uart0_hal_read_message_as_str>
    19fe:	09 c0       	rjmp	.+18     	; 0x1a12 <CON_RN2483+0x136>
				}else{
					strcpy(cnf_reply, "null");
    1a00:	25 e0       	ldi	r18, 0x05	; 5
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	43 e0       	ldi	r20, 0x03	; 3
    1a06:	56 e0       	ldi	r21, 0x06	; 6
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	8a e8       	ldi	r24, 0x8A	; 138
    1a0c:	93 e0       	ldi	r25, 0x03	; 3
    1a0e:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    1a12:	6a e8       	ldi	r22, 0x8A	; 138
    1a14:	73 e0       	ldi	r23, 0x03	; 3
    1a16:	80 e8       	ldi	r24, 0x80	; 128
    1a18:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				state=CL_READ_MSG;
    1a1c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1a1e:	67 cf       	rjmp	.-306    	; 0x18ee <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    1a20:	0e 94 b5 24 	call	0x496a	; 0x496a <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    1a24:	68 e0       	ldi	r22, 0x08	; 8
    1a26:	76 e0       	ldi	r23, 0x06	; 6
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	ef 90       	pop	r14
    1a36:	df 90       	pop	r13
    1a38:	cf 90       	pop	r12
    1a3a:	8f 90       	pop	r8
    1a3c:	7f 90       	pop	r7
    1a3e:	6f 90       	pop	r6
    1a40:	08 95       	ret

Disassembly of section .text.CONNECT:

0000378e <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
    3796:	64 97       	sbiw	r28, 0x14	; 20
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    37a2:	21 e0       	ldi	r18, 0x01	; 1
    37a4:	ae 01       	movw	r20, r28
    37a6:	4f 5f       	subi	r20, 0xFF	; 255
    37a8:	5f 4f       	sbci	r21, 0xFF	; 255
    37aa:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    37ae:	88 23       	and	r24, r24
    37b0:	79 f0       	breq	.+30     	; 0x37d0 <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    37b2:	be 01       	movw	r22, r28
    37b4:	6f 5f       	subi	r22, 0xFF	; 255
    37b6:	7f 4f       	sbci	r23, 0xFF	; 255
    37b8:	80 e8       	ldi	r24, 0x80	; 128
    37ba:	28 e2       	ldi	r18, 0x28	; 40
    37bc:	36 e0       	ldi	r19, 0x06	; 6
    37be:	40 e0       	ldi	r20, 0x00	; 0
    37c0:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    37c4:	89 2b       	or	r24, r25
    37c6:	19 f4       	brne	.+6      	; 0x37ce <CONNECT+0x40>
		return CON_RN2483();
    37c8:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <CON_RN2483>
    37cc:	01 c0       	rjmp	.+2      	; 0x37d0 <CONNECT+0x42>
	}else{
		return false;
    37ce:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    37d0:	64 96       	adiw	r28, 0x14	; 20
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	f8 94       	cli
    37d6:	de bf       	out	0x3e, r29	; 62
    37d8:	0f be       	out	0x3f, r0	; 63
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	df 91       	pop	r29
    37de:	cf 91       	pop	r28
    37e0:	08 95       	ret

Disassembly of section .text.read_cols:

00002798 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    2798:	ff 92       	push	r15
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	cb 54       	subi	r28, 0x4B	; 75
    27a8:	d1 09       	sbc	r29, r1
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	8c 01       	movw	r16, r24
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    27b6:	6b e4       	ldi	r22, 0x4B	; 75
    27b8:	ce 01       	movw	r24, r28
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	0e 94 e7 23 	call	0x47ce	; 0x47ce <EM_get_collections>
	strcpy(res, "End of collections");
    27c0:	23 e1       	ldi	r18, 0x13	; 19
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	42 e0       	ldi	r20, 0x02	; 2
    27c6:	52 e0       	ldi	r21, 0x02	; 2
    27c8:	60 e0       	ldi	r22, 0x00	; 0
    27ca:	c8 01       	movw	r24, r16
    27cc:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    27d0:	f1 2c       	mov	r15, r1
    27d2:	30 c0       	rjmp	.+96     	; 0x2834 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u", i+1, cols[i].samplings, cols[i].samplingInterval);
    27d4:	8f 2d       	mov	r24, r15
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	fc 01       	movw	r30, r24
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	ee 0f       	add	r30, r30
    27e0:	ff 1f       	adc	r31, r31
    27e2:	e8 0f       	add	r30, r24
    27e4:	f9 1f       	adc	r31, r25
    27e6:	21 e0       	ldi	r18, 0x01	; 1
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	2c 0f       	add	r18, r28
    27ec:	3d 1f       	adc	r19, r29
    27ee:	e2 0f       	add	r30, r18
    27f0:	f3 1f       	adc	r31, r19
    27f2:	23 81       	ldd	r18, Z+3	; 0x03
    27f4:	2f 93       	push	r18
    27f6:	22 81       	ldd	r18, Z+2	; 0x02
    27f8:	2f 93       	push	r18
    27fa:	21 81       	ldd	r18, Z+1	; 0x01
    27fc:	2f 93       	push	r18
    27fe:	20 81       	ld	r18, Z
    2800:	2f 93       	push	r18
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	9f 93       	push	r25
    2806:	8f 93       	push	r24
    2808:	85 e1       	ldi	r24, 0x15	; 21
    280a:	92 e0       	ldi	r25, 0x02	; 2
    280c:	a0 e0       	ldi	r26, 0x00	; 0
    280e:	af 93       	push	r26
    2810:	9f 93       	push	r25
    2812:	8f 93       	push	r24
    2814:	04 ee       	ldi	r16, 0xE4	; 228
    2816:	15 e0       	ldi	r17, 0x05	; 5
    2818:	1f 93       	push	r17
    281a:	0f 93       	push	r16
    281c:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
		uart1_hal_send_string(arg);
    2820:	b8 01       	movw	r22, r16
    2822:	80 e8       	ldi	r24, 0x80	; 128
    2824:	0e 94 90 15 	call	0x2b20	; 0x2b20 <uart1_hal_send_string>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
	strcpy(res, "End of collections");
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    2828:	f3 94       	inc	r15
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	9e e0       	ldi	r25, 0x0E	; 14
    2836:	9f 15       	cp	r25, r15
    2838:	68 f6       	brcc	.-102    	; 0x27d4 <read_cols+0x3c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u", i+1, cols[i].samplings, cols[i].samplingInterval);
		uart1_hal_send_string(arg);
	}
}
    283a:	c5 5b       	subi	r28, 0xB5	; 181
    283c:	df 4f       	sbci	r29, 0xFF	; 255
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	08 95       	ret

Disassembly of section .text.read_time:

00002ce2 <read_time>:

static void read_time(char res[]){
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <read_time+0xa>
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <read_time+0xc>
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <read_time+0xe>
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	18 2f       	mov	r17, r24
    2cf6:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    2cf8:	0e 94 c4 23 	call	0x4788	; 0x4788 <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	01 96       	adiw	r24, 0x01	; 1
    2d00:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2d04:	88 23       	and	r24, r24
    2d06:	51 f0       	breq	.+20     	; 0x2d1c <read_time+0x3a>
		strcpy(res, "Failed to read time");
    2d08:	24 e1       	ldi	r18, 0x14	; 20
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	48 e2       	ldi	r20, 0x28	; 40
    2d0e:	52 e0       	ldi	r21, 0x02	; 2
    2d10:	60 e0       	ldi	r22, 0x00	; 0
    2d12:	81 2f       	mov	r24, r17
    2d14:	90 2f       	mov	r25, r16
    2d16:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
    2d1a:	21 c0       	rjmp	.+66     	; 0x2d5e <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    2d1c:	59 81       	ldd	r21, Y+1	; 0x01
    2d1e:	4a 81       	ldd	r20, Y+2	; 0x02
    2d20:	3b 81       	ldd	r19, Y+3	; 0x03
    2d22:	2c 81       	ldd	r18, Y+4	; 0x04
    2d24:	9d 81       	ldd	r25, Y+5	; 0x05
    2d26:	8e 81       	ldd	r24, Y+6	; 0x06
    2d28:	1f 92       	push	r1
    2d2a:	5f 93       	push	r21
    2d2c:	1f 92       	push	r1
    2d2e:	4f 93       	push	r20
    2d30:	1f 92       	push	r1
    2d32:	3f 93       	push	r19
    2d34:	1f 92       	push	r1
    2d36:	2f 93       	push	r18
    2d38:	1f 92       	push	r1
    2d3a:	9f 93       	push	r25
    2d3c:	1f 92       	push	r1
    2d3e:	8f 93       	push	r24
    2d40:	8c e3       	ldi	r24, 0x3C	; 60
    2d42:	92 e0       	ldi	r25, 0x02	; 2
    2d44:	a0 e0       	ldi	r26, 0x00	; 0
    2d46:	af 93       	push	r26
    2d48:	9f 93       	push	r25
    2d4a:	8f 93       	push	r24
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
	}
}
    2d5e:	26 96       	adiw	r28, 0x06	; 6
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	08 95       	ret

Disassembly of section .text.read_validate_SI:

00001e16 <read_validate_SI>:

static void read_validate_SI(char res[]){
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	cf 54       	subi	r28, 0x4F	; 79
    1e28:	d1 09       	sbc	r29, r1
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	7c 01       	movw	r14, r24
	uint16_t lowest, highest;
	bool valid;
	COLLECTION cols[N_COLLECTIONS];
	
	//Get collections
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    1e36:	6b e4       	ldi	r22, 0x4B	; 75
    1e38:	ce 01       	movw	r24, r28
    1e3a:	05 96       	adiw	r24, 0x05	; 5
    1e3c:	0e 94 e7 23 	call	0x47ce	; 0x47ce <EM_get_collections>
	
	valid=SCD30_calc_validate_SI(cols[0].samplingInterval, cols[1].samplingInterval, cols[2].samplingInterval, &lowest, &highest);
    1e40:	49 89       	ldd	r20, Y+17	; 0x11
    1e42:	5a 89       	ldd	r21, Y+18	; 0x12
    1e44:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e46:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e48:	8e 01       	movw	r16, r28
    1e4a:	0d 5f       	subi	r16, 0xFD	; 253
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	9e 01       	movw	r18, r28
    1e50:	2f 5f       	subi	r18, 0xFF	; 255
    1e52:	3f 4f       	sbci	r19, 0xFF	; 255
    1e54:	8f 81       	ldd	r24, Y+7	; 0x07
    1e56:	98 85       	ldd	r25, Y+8	; 0x08
    1e58:	0e 94 69 13 	call	0x26d2	; 0x26d2 <SCD30_calc_validate_SI>
	if(!valid){
    1e5c:	81 11       	cpse	r24, r1
    1e5e:	09 c0       	rjmp	.+18     	; 0x1e72 <read_validate_SI+0x5c>
		strcpy(res, "ID=1...ID=3 not valid");
    1e60:	26 e1       	ldi	r18, 0x16	; 22
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a e5       	ldi	r20, 0x5A	; 90
    1e66:	52 e0       	ldi	r21, 0x02	; 2
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	c7 01       	movw	r24, r14
    1e6c:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return;
    1e70:	59 c0       	rjmp	.+178    	; 0x1f24 <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[4].samplingInterval, cols[5].samplingInterval, cols[6].samplingInterval, &lowest, &highest);
    1e72:	4d a1       	ldd	r20, Y+37	; 0x25
    1e74:	5e a1       	ldd	r21, Y+38	; 0x26
    1e76:	68 a1       	ldd	r22, Y+32	; 0x20
    1e78:	79 a1       	ldd	r23, Y+33	; 0x21
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	0d 5f       	subi	r16, 0xFD	; 253
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	9e 01       	movw	r18, r28
    1e82:	2f 5f       	subi	r18, 0xFF	; 255
    1e84:	3f 4f       	sbci	r19, 0xFF	; 255
    1e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <SCD30_calc_validate_SI>
	if(!valid){
    1e8e:	81 11       	cpse	r24, r1
    1e90:	09 c0       	rjmp	.+18     	; 0x1ea4 <read_validate_SI+0x8e>
		strcpy(res, "ID=5...ID=7 not valid");
    1e92:	26 e1       	ldi	r18, 0x16	; 22
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e7       	ldi	r20, 0x70	; 112
    1e98:	52 e0       	ldi	r21, 0x02	; 2
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	c7 01       	movw	r24, r14
    1e9e:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return;
    1ea2:	40 c0       	rjmp	.+128    	; 0x1f24 <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[8].samplingInterval, cols[9].samplingInterval, cols[10].samplingInterval, &lowest, &highest);
    1ea4:	49 ad       	ldd	r20, Y+57	; 0x39
    1ea6:	5a ad       	ldd	r21, Y+58	; 0x3a
    1ea8:	6c a9       	ldd	r22, Y+52	; 0x34
    1eaa:	7d a9       	ldd	r23, Y+53	; 0x35
    1eac:	8e 01       	movw	r16, r28
    1eae:	0d 5f       	subi	r16, 0xFD	; 253
    1eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb2:	9e 01       	movw	r18, r28
    1eb4:	2f 5f       	subi	r18, 0xFF	; 255
    1eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eba:	98 a9       	ldd	r25, Y+48	; 0x30
    1ebc:	0e 94 69 13 	call	0x26d2	; 0x26d2 <SCD30_calc_validate_SI>
	if(!valid){
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <read_validate_SI+0xc0>
		strcpy(res, "ID=9...ID=11 not valid");
    1ec4:	27 e1       	ldi	r18, 0x17	; 23
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	46 e8       	ldi	r20, 0x86	; 134
    1eca:	52 e0       	ldi	r21, 0x02	; 2
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	c7 01       	movw	r24, r14
    1ed0:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return;
    1ed4:	27 c0       	rjmp	.+78     	; 0x1f24 <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[12].samplingInterval, cols[13].samplingInterval, cols[14].samplingInterval, &lowest, &highest);
    1ed6:	2f 96       	adiw	r28, 0x0f	; 15
    1ed8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eda:	5f ad       	ldd	r21, Y+63	; 0x3f
    1edc:	2f 97       	sbiw	r28, 0x0f	; 15
    1ede:	2a 96       	adiw	r28, 0x0a	; 10
    1ee0:	6e ad       	ldd	r22, Y+62	; 0x3e
    1ee2:	7f ad       	ldd	r23, Y+63	; 0x3f
    1ee4:	2a 97       	sbiw	r28, 0x0a	; 10
    1ee6:	8e 01       	movw	r16, r28
    1ee8:	0d 5f       	subi	r16, 0xFD	; 253
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	9e 01       	movw	r18, r28
    1eee:	2f 5f       	subi	r18, 0xFF	; 255
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	25 96       	adiw	r28, 0x05	; 5
    1ef4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ef6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ef8:	25 97       	sbiw	r28, 0x05	; 5
    1efa:	0e 94 69 13 	call	0x26d2	; 0x26d2 <SCD30_calc_validate_SI>
	if(!valid){
    1efe:	81 11       	cpse	r24, r1
    1f00:	09 c0       	rjmp	.+18     	; 0x1f14 <read_validate_SI+0xfe>
		strcpy(res, "ID=13...ID=15 not valid");
    1f02:	28 e1       	ldi	r18, 0x18	; 24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4d e9       	ldi	r20, 0x9D	; 157
    1f08:	52 e0       	ldi	r21, 0x02	; 2
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
    1f0c:	c7 01       	movw	r24, r14
    1f0e:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return;
    1f12:	08 c0       	rjmp	.+16     	; 0x1f24 <read_validate_SI+0x10e>
	}
	
	strcpy(res, "All valid");
    1f14:	2a e0       	ldi	r18, 0x0A	; 10
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	45 eb       	ldi	r20, 0xB5	; 181
    1f1a:	52 e0       	ldi	r21, 0x02	; 2
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	c7 01       	movw	r24, r14
    1f20:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
}
    1f24:	c1 5b       	subi	r28, 0xB1	; 177
    1f26:	df 4f       	sbci	r29, 0xFF	; 255
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	1f 91       	pop	r17
    1f38:	0f 91       	pop	r16
    1f3a:	ff 90       	pop	r15
    1f3c:	ef 90       	pop	r14
    1f3e:	08 95       	ret

Disassembly of section .text.write_deveui:

00002f60 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    2f60:	cf 92       	push	r12
    2f62:	df 92       	push	r13
    2f64:	ef 92       	push	r14
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2f6e:	22 e0       	ldi	r18, 0x02	; 2
    2f70:	44 ee       	ldi	r20, 0xE4	; 228
    2f72:	55 e0       	ldi	r21, 0x05	; 5
    2f74:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    2f78:	c8 2f       	mov	r28, r24
    2f7a:	88 23       	and	r24, r24
    2f7c:	29 f1       	breq	.+74     	; 0x2fc8 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    2f7e:	84 ee       	ldi	r24, 0xE4	; 228
    2f80:	95 e0       	ldi	r25, 0x05	; 5
    2f82:	6c 01       	movw	r12, r24
    2f84:	20 e8       	ldi	r18, 0x80	; 128
    2f86:	e2 2e       	mov	r14, r18
    2f88:	8e 2d       	mov	r24, r14
    2f8a:	b6 01       	movw	r22, r12
    2f8c:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    2f90:	40 97       	sbiw	r24, 0x10	; 16
    2f92:	c9 f4       	brne	.+50     	; 0x2fc6 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    2f94:	8e 2d       	mov	r24, r14
    2f96:	b6 01       	movw	r22, r12
    2f98:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <EM_set_deveui>
    2f9c:	c8 2f       	mov	r28, r24
    2f9e:	81 11       	cpse	r24, r1
    2fa0:	09 c0       	rjmp	.+18     	; 0x2fb4 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    2fa2:	27 e0       	ldi	r18, 0x07	; 7
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	4f eb       	ldi	r20, 0xBF	; 191
    2fa8:	52 e0       	ldi	r21, 0x02	; 2
    2faa:	60 e0       	ldi	r22, 0x00	; 0
    2fac:	c8 01       	movw	r24, r16
    2fae:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return false;
    2fb2:	0a c0       	rjmp	.+20     	; 0x2fc8 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2fb4:	28 e0       	ldi	r18, 0x08	; 8
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	46 ec       	ldi	r20, 0xC6	; 198
    2fba:	52 e0       	ldi	r21, 0x02	; 2
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
    2fbe:	c8 01       	movw	r24, r16
    2fc0:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
    2fc4:	01 c0       	rjmp	.+2      	; 0x2fc8 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    2fc6:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2fc8:	8c 2f       	mov	r24, r28
    2fca:	cf 91       	pop	r28
    2fcc:	1f 91       	pop	r17
    2fce:	0f 91       	pop	r16
    2fd0:	ef 90       	pop	r14
    2fd2:	df 90       	pop	r13
    2fd4:	cf 90       	pop	r12
    2fd6:	08 95       	ret

Disassembly of section .text.write_appeui:

00002fd8 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    2fd8:	cf 92       	push	r12
    2fda:	df 92       	push	r13
    2fdc:	ef 92       	push	r14
    2fde:	0f 93       	push	r16
    2fe0:	1f 93       	push	r17
    2fe2:	cf 93       	push	r28
    2fe4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2fe6:	22 e0       	ldi	r18, 0x02	; 2
    2fe8:	44 ee       	ldi	r20, 0xE4	; 228
    2fea:	55 e0       	ldi	r21, 0x05	; 5
    2fec:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    2ff0:	c8 2f       	mov	r28, r24
    2ff2:	88 23       	and	r24, r24
    2ff4:	29 f1       	breq	.+74     	; 0x3040 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    2ff6:	84 ee       	ldi	r24, 0xE4	; 228
    2ff8:	95 e0       	ldi	r25, 0x05	; 5
    2ffa:	6c 01       	movw	r12, r24
    2ffc:	20 e8       	ldi	r18, 0x80	; 128
    2ffe:	e2 2e       	mov	r14, r18
    3000:	8e 2d       	mov	r24, r14
    3002:	b6 01       	movw	r22, r12
    3004:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    3008:	40 97       	sbiw	r24, 0x10	; 16
    300a:	c9 f4       	brne	.+50     	; 0x303e <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    300c:	8e 2d       	mov	r24, r14
    300e:	b6 01       	movw	r22, r12
    3010:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <EM_set_appeui>
    3014:	c8 2f       	mov	r28, r24
    3016:	81 11       	cpse	r24, r1
    3018:	09 c0       	rjmp	.+18     	; 0x302c <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    301a:	27 e0       	ldi	r18, 0x07	; 7
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	4f eb       	ldi	r20, 0xBF	; 191
    3020:	52 e0       	ldi	r21, 0x02	; 2
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	c8 01       	movw	r24, r16
    3026:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return false;
    302a:	0a c0       	rjmp	.+20     	; 0x3040 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    302c:	28 e0       	ldi	r18, 0x08	; 8
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	46 ec       	ldi	r20, 0xC6	; 198
    3032:	52 e0       	ldi	r21, 0x02	; 2
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	c8 01       	movw	r24, r16
    3038:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
    303c:	01 c0       	rjmp	.+2      	; 0x3040 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    303e:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    3040:	8c 2f       	mov	r24, r28
    3042:	cf 91       	pop	r28
    3044:	1f 91       	pop	r17
    3046:	0f 91       	pop	r16
    3048:	ef 90       	pop	r14
    304a:	df 90       	pop	r13
    304c:	cf 90       	pop	r12
    304e:	08 95       	ret

Disassembly of section .text.write_appkey:

00003050 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    3050:	cf 92       	push	r12
    3052:	df 92       	push	r13
    3054:	ef 92       	push	r14
    3056:	0f 93       	push	r16
    3058:	1f 93       	push	r17
    305a:	cf 93       	push	r28
    305c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    305e:	22 e0       	ldi	r18, 0x02	; 2
    3060:	44 ee       	ldi	r20, 0xE4	; 228
    3062:	55 e0       	ldi	r21, 0x05	; 5
    3064:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    3068:	c8 2f       	mov	r28, r24
    306a:	88 23       	and	r24, r24
    306c:	29 f1       	breq	.+74     	; 0x30b8 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    306e:	84 ee       	ldi	r24, 0xE4	; 228
    3070:	95 e0       	ldi	r25, 0x05	; 5
    3072:	6c 01       	movw	r12, r24
    3074:	20 e8       	ldi	r18, 0x80	; 128
    3076:	e2 2e       	mov	r14, r18
    3078:	8e 2d       	mov	r24, r14
    307a:	b6 01       	movw	r22, r12
    307c:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    3080:	80 97       	sbiw	r24, 0x20	; 32
    3082:	c9 f4       	brne	.+50     	; 0x30b6 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    3084:	8e 2d       	mov	r24, r14
    3086:	b6 01       	movw	r22, r12
    3088:	0e 94 19 20 	call	0x4032	; 0x4032 <EM_set_appkey>
    308c:	c8 2f       	mov	r28, r24
    308e:	81 11       	cpse	r24, r1
    3090:	09 c0       	rjmp	.+18     	; 0x30a4 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    3092:	27 e0       	ldi	r18, 0x07	; 7
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	4f eb       	ldi	r20, 0xBF	; 191
    3098:	52 e0       	ldi	r21, 0x02	; 2
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	c8 01       	movw	r24, r16
    309e:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return false;
    30a2:	0a c0       	rjmp	.+20     	; 0x30b8 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    30a4:	28 e0       	ldi	r18, 0x08	; 8
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	46 ec       	ldi	r20, 0xC6	; 198
    30aa:	52 e0       	ldi	r21, 0x02	; 2
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	c8 01       	movw	r24, r16
    30b0:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
    30b4:	01 c0       	rjmp	.+2      	; 0x30b8 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    30b6:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    30b8:	8c 2f       	mov	r24, r28
    30ba:	cf 91       	pop	r28
    30bc:	1f 91       	pop	r17
    30be:	0f 91       	pop	r16
    30c0:	ef 90       	pop	r14
    30c2:	df 90       	pop	r13
    30c4:	cf 90       	pop	r12
    30c6:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00003a08 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    3a08:	0f 93       	push	r16
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3a10:	22 e0       	ldi	r18, 0x02	; 2
    3a12:	44 ee       	ldi	r20, 0xE4	; 228
    3a14:	55 e0       	ldi	r21, 0x05	; 5
    3a16:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    3a1a:	c8 2f       	mov	r28, r24
    3a1c:	88 23       	and	r24, r24
    3a1e:	a9 f0       	breq	.+42     	; 0x3a4a <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    3a20:	84 ee       	ldi	r24, 0xE4	; 228
    3a22:	95 e0       	ldi	r25, 0x05	; 5
    3a24:	0e 94 1b 1b 	call	0x3636	; 0x3636 <is_float>
    3a28:	c8 2f       	mov	r28, r24
    3a2a:	88 23       	and	r24, r24
    3a2c:	71 f0       	breq	.+28     	; 0x3a4a <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    3a2e:	84 ee       	ldi	r24, 0xE4	; 228
    3a30:	95 e0       	ldi	r25, 0x05	; 5
    3a32:	0e 94 b7 1c 	call	0x396e	; 0x396e <str2flaot>
	EM_set_ppmfactor(val);
    3a36:	0e 94 27 24 	call	0x484e	; 0x484e <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    3a3a:	28 e0       	ldi	r18, 0x08	; 8
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	46 ec       	ldi	r20, 0xC6	; 198
    3a40:	52 e0       	ldi	r21, 0x02	; 2
    3a42:	60 e0       	ldi	r22, 0x00	; 0
    3a44:	c8 01       	movw	r24, r16
    3a46:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
	return true;
}
    3a4a:	8c 2f       	mov	r24, r28
    3a4c:	cf 91       	pop	r28
    3a4e:	1f 91       	pop	r17
    3a50:	0f 91       	pop	r16
    3a52:	08 95       	ret

Disassembly of section .text.write_RRL:

00003a54 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3a5c:	22 e0       	ldi	r18, 0x02	; 2
    3a5e:	44 ee       	ldi	r20, 0xE4	; 228
    3a60:	55 e0       	ldi	r21, 0x05	; 5
    3a62:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    3a66:	c8 2f       	mov	r28, r24
    3a68:	88 23       	and	r24, r24
    3a6a:	a9 f0       	breq	.+42     	; 0x3a96 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    3a6c:	84 ee       	ldi	r24, 0xE4	; 228
    3a6e:	95 e0       	ldi	r25, 0x05	; 5
    3a70:	0e 94 1b 1b 	call	0x3636	; 0x3636 <is_float>
    3a74:	c8 2f       	mov	r28, r24
    3a76:	88 23       	and	r24, r24
    3a78:	71 f0       	breq	.+28     	; 0x3a96 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    3a7a:	84 ee       	ldi	r24, 0xE4	; 228
    3a7c:	95 e0       	ldi	r25, 0x05	; 5
    3a7e:	0e 94 b7 1c 	call	0x396e	; 0x396e <str2flaot>
	EM_set_RRL(val);
    3a82:	0e 94 2e 24 	call	0x485c	; 0x485c <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    3a86:	28 e0       	ldi	r18, 0x08	; 8
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	46 ec       	ldi	r20, 0xC6	; 198
    3a8c:	52 e0       	ldi	r21, 0x02	; 2
    3a8e:	60 e0       	ldi	r22, 0x00	; 0
    3a90:	c8 01       	movw	r24, r16
    3a92:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
	return true;
}
    3a96:	8c 2f       	mov	r24, r28
    3a98:	cf 91       	pop	r28
    3a9a:	1f 91       	pop	r17
    3a9c:	0f 91       	pop	r16
    3a9e:	08 95       	ret

Disassembly of section .text.write_VCC:

00003aa0 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    3aa0:	0f 93       	push	r16
    3aa2:	1f 93       	push	r17
    3aa4:	cf 93       	push	r28
    3aa6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3aa8:	22 e0       	ldi	r18, 0x02	; 2
    3aaa:	44 ee       	ldi	r20, 0xE4	; 228
    3aac:	55 e0       	ldi	r21, 0x05	; 5
    3aae:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    3ab2:	c8 2f       	mov	r28, r24
    3ab4:	88 23       	and	r24, r24
    3ab6:	a9 f0       	breq	.+42     	; 0x3ae2 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    3ab8:	84 ee       	ldi	r24, 0xE4	; 228
    3aba:	95 e0       	ldi	r25, 0x05	; 5
    3abc:	0e 94 1b 1b 	call	0x3636	; 0x3636 <is_float>
    3ac0:	c8 2f       	mov	r28, r24
    3ac2:	88 23       	and	r24, r24
    3ac4:	71 f0       	breq	.+28     	; 0x3ae2 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    3ac6:	84 ee       	ldi	r24, 0xE4	; 228
    3ac8:	95 e0       	ldi	r25, 0x05	; 5
    3aca:	0e 94 b7 1c 	call	0x396e	; 0x396e <str2flaot>
	EM_set_Vcc(val);
    3ace:	0e 94 35 24 	call	0x486a	; 0x486a <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    3ad2:	28 e0       	ldi	r18, 0x08	; 8
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	46 ec       	ldi	r20, 0xC6	; 198
    3ad8:	52 e0       	ldi	r21, 0x02	; 2
    3ada:	60 e0       	ldi	r22, 0x00	; 0
    3adc:	c8 01       	movw	r24, r16
    3ade:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
	return true;
}
    3ae2:	8c 2f       	mov	r24, r28
    3ae4:	cf 91       	pop	r28
    3ae6:	1f 91       	pop	r17
    3ae8:	0f 91       	pop	r16
    3aea:	08 95       	ret

Disassembly of section .text.get_time_par:

0000417e <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	00 d0       	rcall	.+0      	; 0x4184 <get_time_par+0x6>
    4184:	1f 92       	push	r1
    4186:	cd b7       	in	r28, 0x3d	; 61
    4188:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    418a:	fc 01       	movw	r30, r24
    418c:	e6 0f       	add	r30, r22
    418e:	f1 1d       	adc	r31, r1
    4190:	80 81       	ld	r24, Z
    4192:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    4194:	81 81       	ldd	r24, Z+1	; 0x01
    4196:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    4198:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    419a:	be 01       	movw	r22, r28
    419c:	6f 5f       	subi	r22, 0xFF	; 255
    419e:	7f 4f       	sbci	r23, 0xFF	; 255
    41a0:	80 e8       	ldi	r24, 0x80	; 128
    41a2:	0e 94 e5 24 	call	0x49ca	; 0x49ca <atoi>
}
    41a6:	0f 90       	pop	r0
    41a8:	0f 90       	pop	r0
    41aa:	0f 90       	pop	r0
    41ac:	df 91       	pop	r29
    41ae:	cf 91       	pop	r28
    41b0:	08 95       	ret

Disassembly of section .text.write_cols:

00001a42 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    1a42:	4f 92       	push	r4
    1a44:	5f 92       	push	r5
    1a46:	6f 92       	push	r6
    1a48:	7f 92       	push	r7
    1a4a:	8f 92       	push	r8
    1a4c:	af 92       	push	r10
    1a4e:	bf 92       	push	r11
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	cb 54       	subi	r28, 0x4B	; 75
    1a64:	d1 09       	sbc	r29, r1
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	3b 01       	movw	r6, r22
    1a72:	88 2e       	mov	r8, r24
    1a74:	5a 01       	movw	r10, r20
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	bool valid;
	
	//Col ID
	if(!get_parameter(cmd, arg, 2)) return false;
    1a76:	22 e0       	ldi	r18, 0x02	; 2
    1a78:	44 ee       	ldi	r20, 0xE4	; 228
    1a7a:	55 e0       	ldi	r21, 0x05	; 5
    1a7c:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    1a80:	18 2f       	mov	r17, r24
    1a82:	88 23       	and	r24, r24
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <write_cols+0x46>
    1a86:	72 c0       	rjmp	.+228    	; 0x1b6c <write_cols+0x12a>
	index=atoi(arg);
    1a88:	84 ee       	ldi	r24, 0xE4	; 228
    1a8a:	95 e0       	ldi	r25, 0x05	; 5
    1a8c:	6c 01       	movw	r12, r24
    1a8e:	20 e8       	ldi	r18, 0x80	; 128
    1a90:	e2 2e       	mov	r14, r18
    1a92:	8e 2d       	mov	r24, r14
    1a94:	b6 01       	movw	r22, r12
    1a96:	0e 94 e5 24 	call	0x49ca	; 0x49ca <atoi>
	if(index<1 || index>N_COLLECTIONS) return false;
    1a9a:	0f ef       	ldi	r16, 0xFF	; 255
    1a9c:	08 0f       	add	r16, r24
    1a9e:	0f 30       	cpi	r16, 0x0F	; 15
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <write_cols+0x62>
    1aa2:	5f c0       	rjmp	.+190    	; 0x1b62 <write_cols+0x120>
	index--; //Offset index
	
	//Number of samples
	if(!get_parameter(cmd, arg, 3)) return false;
    1aa4:	23 e0       	ldi	r18, 0x03	; 3
    1aa6:	44 ee       	ldi	r20, 0xE4	; 228
    1aa8:	55 e0       	ldi	r21, 0x05	; 5
    1aaa:	88 2d       	mov	r24, r8
    1aac:	b3 01       	movw	r22, r6
    1aae:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    1ab2:	18 2f       	mov	r17, r24
    1ab4:	88 23       	and	r24, r24
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <write_cols+0x78>
    1ab8:	59 c0       	rjmp	.+178    	; 0x1b6c <write_cols+0x12a>
	samplings=atoi(arg);
    1aba:	8e 2d       	mov	r24, r14
    1abc:	b6 01       	movw	r22, r12
    1abe:	0e 94 e5 24 	call	0x49ca	; 0x49ca <atoi>
    1ac2:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>MAX_SAMPLES_ALL) return false;
    1ac4:	02 97       	sbiw	r24, 0x02	; 2
    1ac6:	83 36       	cpi	r24, 0x63	; 99
    1ac8:	91 05       	cpc	r25, r1
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <write_cols+0x8c>
    1acc:	4c c0       	rjmp	.+152    	; 0x1b66 <write_cols+0x124>
	
	//Sampling interval
	if(!get_parameter(cmd, arg, 4)) return false;
    1ace:	24 e0       	ldi	r18, 0x04	; 4
    1ad0:	44 ee       	ldi	r20, 0xE4	; 228
    1ad2:	55 e0       	ldi	r21, 0x05	; 5
    1ad4:	88 2d       	mov	r24, r8
    1ad6:	b3 01       	movw	r22, r6
    1ad8:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    1adc:	18 2f       	mov	r17, r24
    1ade:	88 23       	and	r24, r24
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <write_cols+0xa2>
    1ae2:	44 c0       	rjmp	.+136    	; 0x1b6c <write_cols+0x12a>
	samplingInterval=atoi(arg);
    1ae4:	8e 2d       	mov	r24, r14
    1ae6:	b6 01       	movw	r22, r12
    1ae8:	0e 94 e5 24 	call	0x49ca	; 0x49ca <atoi>
    1aec:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    1aee:	02 97       	sbiw	r24, 0x02	; 2
    1af0:	87 35       	cpi	r24, 0x57	; 87
    1af2:	92 40       	sbci	r25, 0x02	; 2
    1af4:	d0 f5       	brcc	.+116    	; 0x1b6a <write_cols+0x128>
	
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    1af6:	6b e4       	ldi	r22, 0x4B	; 75
    1af8:	ce 01       	movw	r24, r28
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	0e 94 e7 23 	call	0x47ce	; 0x47ce <EM_get_collections>
	
	cols[index].samplings=samplings;
    1b00:	80 2f       	mov	r24, r16
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	fc 01       	movw	r30, r24
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	ee 0f       	add	r30, r30
    1b0c:	ff 1f       	adc	r31, r31
    1b0e:	e8 0f       	add	r30, r24
    1b10:	f9 1f       	adc	r31, r25
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	8c 0f       	add	r24, r28
    1b18:	9d 1f       	adc	r25, r29
    1b1a:	e8 0f       	add	r30, r24
    1b1c:	f9 1f       	adc	r31, r25
    1b1e:	51 82       	std	Z+1, r5	; 0x01
    1b20:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    1b22:	d3 82       	std	Z+3, r13	; 0x03
    1b24:	c2 82       	std	Z+2, r12	; 0x02
	
	//Check for space in buffer
	valid=MRPP_validate_collections_space(cols, N_COLLECTIONS);
    1b26:	6f e0       	ldi	r22, 0x0F	; 15
    1b28:	0e 94 8d 1a 	call	0x351a	; 0x351a <MRPP_validate_collections_space>
	if(!valid){
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	09 c0       	rjmp	.+18     	; 0x1b42 <write_cols+0x100>
		strcpy(res, "Too much data to be in buffer!");
    1b30:	2f e1       	ldi	r18, 0x1F	; 31
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	4e ec       	ldi	r20, 0xCE	; 206
    1b36:	52 e0       	ldi	r21, 0x02	; 2
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	c5 01       	movw	r24, r10
    1b3c:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
    1b40:	15 c0       	rjmp	.+42     	; 0x1b6c <write_cols+0x12a>
	}
	
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    1b42:	be 01       	movw	r22, r28
    1b44:	6f 5f       	subi	r22, 0xFF	; 255
    1b46:	7f 4f       	sbci	r23, 0xFF	; 255
    1b48:	80 e8       	ldi	r24, 0x80	; 128
    1b4a:	4b e4       	ldi	r20, 0x4B	; 75
    1b4c:	0e 94 3c 24 	call	0x4878	; 0x4878 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    1b50:	28 e0       	ldi	r18, 0x08	; 8
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	46 ec       	ldi	r20, 0xC6	; 198
    1b56:	52 e0       	ldi	r21, 0x02	; 2
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	c5 01       	movw	r24, r10
    1b5c:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
	return true;	
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <write_cols+0x12a>
	bool valid;
	
	//Col ID
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>N_COLLECTIONS) return false;
    1b62:	10 e0       	ldi	r17, 0x00	; 0
    1b64:	03 c0       	rjmp	.+6      	; 0x1b6c <write_cols+0x12a>
	index--; //Offset index
	
	//Number of samples
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>MAX_SAMPLES_ALL) return false;
    1b66:	10 e0       	ldi	r17, 0x00	; 0
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <write_cols+0x12a>
	
	//Sampling interval
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    1b6c:	81 2f       	mov	r24, r17
    1b6e:	c5 5b       	subi	r28, 0xB5	; 181
    1b70:	df 4f       	sbci	r29, 0xFF	; 255
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ef 90       	pop	r14
    1b86:	df 90       	pop	r13
    1b88:	cf 90       	pop	r12
    1b8a:	bf 90       	pop	r11
    1b8c:	af 90       	pop	r10
    1b8e:	8f 90       	pop	r8
    1b90:	7f 90       	pop	r7
    1b92:	6f 90       	pop	r6
    1b94:	5f 90       	pop	r5
    1b96:	4f 90       	pop	r4
    1b98:	08 95       	ret

Disassembly of section .text.write_heat_up:

00003aec <write_heat_up>:



static bool write_heat_up(const char cmd[], char res[]){
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	cf 93       	push	r28
    3af2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3af4:	22 e0       	ldi	r18, 0x02	; 2
    3af6:	44 ee       	ldi	r20, 0xE4	; 228
    3af8:	55 e0       	ldi	r21, 0x05	; 5
    3afa:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    3afe:	c8 2f       	mov	r28, r24
    3b00:	88 23       	and	r24, r24
    3b02:	a9 f0       	breq	.+42     	; 0x3b2e <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    3b04:	64 ee       	ldi	r22, 0xE4	; 228
    3b06:	75 e0       	ldi	r23, 0x05	; 5
    3b08:	80 e8       	ldi	r24, 0x80	; 128
    3b0a:	0e 94 e5 24 	call	0x49ca	; 0x49ca <atoi>
	
	if(val<1 || val>200) return false;
    3b0e:	9f ef       	ldi	r25, 0xFF	; 255
    3b10:	98 0f       	add	r25, r24
    3b12:	98 3c       	cpi	r25, 0xC8	; 200
    3b14:	58 f4       	brcc	.+22     	; 0x3b2c <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    3b16:	0e 94 74 24 	call	0x48e8	; 0x48e8 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    3b1a:	28 e0       	ldi	r18, 0x08	; 8
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	46 ec       	ldi	r20, 0xC6	; 198
    3b20:	52 e0       	ldi	r21, 0x02	; 2
    3b22:	60 e0       	ldi	r22, 0x00	; 0
    3b24:	c8 01       	movw	r24, r16
    3b26:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
	return true;
    3b2a:	01 c0       	rjmp	.+2      	; 0x3b2e <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    3b2c:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    3b2e:	8c 2f       	mov	r24, r28
    3b30:	cf 91       	pop	r28
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	08 95       	ret

Disassembly of section .text.write_air_pump:

00003834 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    3834:	0f 93       	push	r16
    3836:	1f 93       	push	r17
    3838:	cf 93       	push	r28
    383a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    383c:	22 e0       	ldi	r18, 0x02	; 2
    383e:	44 ee       	ldi	r20, 0xE4	; 228
    3840:	55 e0       	ldi	r21, 0x05	; 5
    3842:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    3846:	c8 2f       	mov	r28, r24
    3848:	88 23       	and	r24, r24
    384a:	b9 f0       	breq	.+46     	; 0x387a <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    384c:	64 ee       	ldi	r22, 0xE4	; 228
    384e:	75 e0       	ldi	r23, 0x05	; 5
    3850:	80 e8       	ldi	r24, 0x80	; 128
    3852:	0e 94 e5 24 	call	0x49ca	; 0x49ca <atoi>
	
	if(val<5 || val>1000) return false;
    3856:	9c 01       	movw	r18, r24
    3858:	25 50       	subi	r18, 0x05	; 5
    385a:	31 09       	sbc	r19, r1
    385c:	24 3e       	cpi	r18, 0xE4	; 228
    385e:	33 40       	sbci	r19, 0x03	; 3
    3860:	58 f4       	brcc	.+22     	; 0x3878 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    3862:	0e 94 80 24 	call	0x4900	; 0x4900 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    3866:	28 e0       	ldi	r18, 0x08	; 8
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	46 ec       	ldi	r20, 0xC6	; 198
    386c:	52 e0       	ldi	r21, 0x02	; 2
    386e:	60 e0       	ldi	r22, 0x00	; 0
    3870:	c8 01       	movw	r24, r16
    3872:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
	return true;
    3876:	01 c0       	rjmp	.+2      	; 0x387a <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    3878:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    387a:	8c 2f       	mov	r24, r28
    387c:	cf 91       	pop	r28
    387e:	1f 91       	pop	r17
    3880:	0f 91       	pop	r16
    3882:	08 95       	ret

Disassembly of section .text.write_sp_interval:

00003b38 <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	cf 93       	push	r28
    3b3e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3b40:	22 e0       	ldi	r18, 0x02	; 2
    3b42:	44 ee       	ldi	r20, 0xE4	; 228
    3b44:	55 e0       	ldi	r21, 0x05	; 5
    3b46:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    3b4a:	c8 2f       	mov	r28, r24
    3b4c:	88 23       	and	r24, r24
    3b4e:	a9 f0       	breq	.+42     	; 0x3b7a <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    3b50:	64 ee       	ldi	r22, 0xE4	; 228
    3b52:	75 e0       	ldi	r23, 0x05	; 5
    3b54:	80 e8       	ldi	r24, 0x80	; 128
    3b56:	0e 94 e5 24 	call	0x49ca	; 0x49ca <atoi>
	
	if(val<6 || val>24) return false;
    3b5a:	9a ef       	ldi	r25, 0xFA	; 250
    3b5c:	98 0f       	add	r25, r24
    3b5e:	93 31       	cpi	r25, 0x13	; 19
    3b60:	58 f4       	brcc	.+22     	; 0x3b78 <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    3b62:	0e 94 8c 24 	call	0x4918	; 0x4918 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    3b66:	28 e0       	ldi	r18, 0x08	; 8
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	46 ec       	ldi	r20, 0xC6	; 198
    3b6c:	52 e0       	ldi	r21, 0x02	; 2
    3b6e:	60 e0       	ldi	r22, 0x00	; 0
    3b70:	c8 01       	movw	r24, r16
    3b72:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
	return true;
    3b76:	01 c0       	rjmp	.+2      	; 0x3b7a <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    3b78:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    3b7a:	8c 2f       	mov	r24, r28
    3b7c:	cf 91       	pop	r28
    3b7e:	1f 91       	pop	r17
    3b80:	0f 91       	pop	r16
    3b82:	08 95       	ret

Disassembly of section .text.write_reset:

0000236c <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	cb 54       	subi	r28, 0x4B	; 75
    237a:	d1 09       	sbc	r29, r1
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	8a 01       	movw	r16, r20
	
	COLLECTION cols[N_COLLECTIONS];
	
	EM_set_deveui("0000000000000000");
    2388:	6d ee       	ldi	r22, 0xED	; 237
    238a:	72 e0       	ldi	r23, 0x02	; 2
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    2392:	6d ee       	ldi	r22, 0xED	; 237
    2394:	72 e0       	ldi	r23, 0x02	; 2
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    239c:	6e ef       	ldi	r22, 0xFE	; 254
    239e:	72 e0       	ldi	r23, 0x02	; 2
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	0e 94 19 20 	call	0x4032	; 0x4032 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	80 e8       	ldi	r24, 0x80	; 128
    23ac:	9f e3       	ldi	r25, 0x3F	; 63
    23ae:	0e 94 27 24 	call	0x484e	; 0x484e <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	70 e4       	ldi	r23, 0x40	; 64
    23b6:	8c e1       	ldi	r24, 0x1C	; 28
    23b8:	95 e4       	ldi	r25, 0x45	; 69
    23ba:	0e 94 2e 24 	call	0x485c	; 0x485c <EM_set_RRL>
	EM_set_Vcc(5.00);
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	80 ea       	ldi	r24, 0xA0	; 160
    23c4:	90 e4       	ldi	r25, 0x40	; 64
    23c6:	0e 94 35 24 	call	0x486a	; 0x486a <EM_set_Vcc>
	EM_set_heat_up_time(2);
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	0e 94 74 24 	call	0x48e8	; 0x48e8 <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    23d0:	85 e0       	ldi	r24, 0x05	; 5
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 80 24 	call	0x4900	; 0x4900 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    23d8:	86 e0       	ldi	r24, 0x06	; 6
    23da:	0e 94 8c 24 	call	0x4918	; 0x4918 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	1a c0       	rjmp	.+52     	; 0x2416 <write_reset+0xaa>
	{
		cols[i].type=T_INT16;
    23e2:	e8 2f       	mov	r30, r24
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	9f 01       	movw	r18, r30
    23e8:	22 0f       	add	r18, r18
    23ea:	33 1f       	adc	r19, r19
    23ec:	22 0f       	add	r18, r18
    23ee:	33 1f       	adc	r19, r19
    23f0:	e2 0f       	add	r30, r18
    23f2:	f3 1f       	adc	r31, r19
    23f4:	21 e0       	ldi	r18, 0x01	; 1
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	2c 0f       	add	r18, r28
    23fa:	3d 1f       	adc	r19, r29
    23fc:	e2 0f       	add	r30, r18
    23fe:	f3 1f       	adc	r31, r19
    2400:	92 e0       	ldi	r25, 0x02	; 2
    2402:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    2404:	22 e0       	ldi	r18, 0x02	; 2
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	31 83       	std	Z+1, r19	; 0x01
    240a:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    240c:	23 e0       	ldi	r18, 0x03	; 3
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	33 83       	std	Z+3, r19	; 0x03
    2412:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    2414:	8f 5f       	subi	r24, 0xFF	; 255
    2416:	8f 30       	cpi	r24, 0x0F	; 15
    2418:	20 f3       	brcs	.-56     	; 0x23e2 <write_reset+0x76>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    241a:	be 01       	movw	r22, r28
    241c:	6f 5f       	subi	r22, 0xFF	; 255
    241e:	7f 4f       	sbci	r23, 0xFF	; 255
    2420:	80 e8       	ldi	r24, 0x80	; 128
    2422:	4b e4       	ldi	r20, 0x4B	; 75
    2424:	0e 94 3c 24 	call	0x4878	; 0x4878 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    2428:	23 e1       	ldi	r18, 0x13	; 19
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4f e1       	ldi	r20, 0x1F	; 31
    242e:	53 e0       	ldi	r21, 0x03	; 3
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	c8 01       	movw	r24, r16
    2434:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
	return true;
}
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	c5 5b       	subi	r28, 0xB5	; 181
    243c:	df 4f       	sbci	r29, 0xFF	; 255
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	08 95       	ret

Disassembly of section .text.write_time:

0000226e <write_time>:

static bool write_time(const char cmd[], char res[]){
    226e:	6f 92       	push	r6
    2270:	7f 92       	push	r7
    2272:	8f 92       	push	r8
    2274:	df 92       	push	r13
    2276:	ef 92       	push	r14
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	00 d0       	rcall	.+0      	; 0x2284 <write_time+0x16>
    2284:	00 d0       	rcall	.+0      	; 0x2286 <write_time+0x18>
    2286:	00 d0       	rcall	.+0      	; 0x2288 <write_time+0x1a>
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	3b 01       	movw	r6, r22
    228e:	88 2e       	mov	r8, r24
    2290:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    2292:	0e 94 c4 23 	call	0x4788	; 0x4788 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    2296:	22 e0       	ldi	r18, 0x02	; 2
    2298:	44 ee       	ldi	r20, 0xE4	; 228
    229a:	55 e0       	ldi	r21, 0x05	; 5
    229c:	88 2d       	mov	r24, r8
    229e:	b3 01       	movw	r22, r6
    22a0:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    22a4:	18 2f       	mov	r17, r24
    22a6:	88 23       	and	r24, r24
    22a8:	09 f4       	brne	.+2      	; 0x22ac <write_time+0x3e>
    22aa:	4e c0       	rjmp	.+156    	; 0x2348 <write_time+0xda>
	if(strlen(arg)!=17){
    22ac:	64 ee       	ldi	r22, 0xE4	; 228
    22ae:	75 e0       	ldi	r23, 0x05	; 5
    22b0:	80 e8       	ldi	r24, 0x80	; 128
    22b2:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    22b6:	41 97       	sbiw	r24, 0x11	; 17
    22b8:	49 f0       	breq	.+18     	; 0x22cc <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    22ba:	25 e2       	ldi	r18, 0x25	; 37
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	42 e3       	ldi	r20, 0x32	; 50
    22c0:	53 e0       	ldi	r21, 0x03	; 3
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	c7 01       	movw	r24, r14
    22c6:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
    22ca:	3e c0       	rjmp	.+124    	; 0x2348 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	84 ee       	ldi	r24, 0xE4	; 228
    22d0:	95 e0       	ldi	r25, 0x05	; 5
    22d2:	0e 94 bf 20 	call	0x417e	; 0x417e <get_time_par>
    22d6:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    22d8:	63 e0       	ldi	r22, 0x03	; 3
    22da:	84 ee       	ldi	r24, 0xE4	; 228
    22dc:	95 e0       	ldi	r25, 0x05	; 5
    22de:	0e 94 bf 20 	call	0x417e	; 0x417e <get_time_par>
    22e2:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    22e4:	66 e0       	ldi	r22, 0x06	; 6
    22e6:	84 ee       	ldi	r24, 0xE4	; 228
    22e8:	95 e0       	ldi	r25, 0x05	; 5
    22ea:	0e 94 bf 20 	call	0x417e	; 0x417e <get_time_par>
    22ee:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    22f0:	69 e0       	ldi	r22, 0x09	; 9
    22f2:	84 ee       	ldi	r24, 0xE4	; 228
    22f4:	95 e0       	ldi	r25, 0x05	; 5
    22f6:	0e 94 bf 20 	call	0x417e	; 0x417e <get_time_par>
    22fa:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    22fc:	6c e0       	ldi	r22, 0x0C	; 12
    22fe:	84 ee       	ldi	r24, 0xE4	; 228
    2300:	95 e0       	ldi	r25, 0x05	; 5
    2302:	0e 94 bf 20 	call	0x417e	; 0x417e <get_time_par>
    2306:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    2308:	6f e0       	ldi	r22, 0x0F	; 15
    230a:	84 ee       	ldi	r24, 0xE4	; 228
    230c:	95 e0       	ldi	r25, 0x05	; 5
    230e:	0e 94 bf 20 	call	0x417e	; 0x417e <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    2312:	48 2f       	mov	r20, r24
    2314:	5d 2d       	mov	r21, r13
    2316:	60 2f       	mov	r22, r16
    2318:	76 2d       	mov	r23, r6
    231a:	87 2d       	mov	r24, r7
    231c:	98 2d       	mov	r25, r8
    231e:	0e 94 25 1a 	call	0x344a	; 0x344a <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2322:	88 23       	and	r24, r24
    2324:	49 f0       	breq	.+18     	; 0x2338 <write_time+0xca>
		strcpy(res, "Failed to set time");
    2326:	23 e1       	ldi	r18, 0x13	; 19
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	47 e5       	ldi	r20, 0x57	; 87
    232c:	53 e0       	ldi	r21, 0x03	; 3
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	c7 01       	movw	r24, r14
    2332:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
    2336:	08 c0       	rjmp	.+16     	; 0x2348 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    2338:	28 e0       	ldi	r18, 0x08	; 8
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	46 ec       	ldi	r20, 0xC6	; 198
    233e:	52 e0       	ldi	r21, 0x02	; 2
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	c7 01       	movw	r24, r14
    2344:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
	return true;
}
    2348:	81 2f       	mov	r24, r17
    234a:	26 96       	adiw	r28, 0x06	; 6
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	ff 90       	pop	r15
    2360:	ef 90       	pop	r14
    2362:	df 90       	pop	r13
    2364:	8f 90       	pop	r8
    2366:	7f 90       	pop	r7
    2368:	6f 90       	pop	r6
    236a:	08 95       	ret

Disassembly of section .text.handle_read:

000010e8 <handle_read>:
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);
static void read_validate_SI(char res[]);

bool handle_read(const char cmd[], char res[]){
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	68 97       	sbiw	r28, 0x18	; 24
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	6b 01       	movw	r12, r22
    110a:	e8 2e       	mov	r14, r24
    110c:	f4 2e       	mov	r15, r20
    110e:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1110:	21 e0       	ldi	r18, 0x01	; 1
    1112:	ae 01       	movw	r20, r28
    1114:	4f 5f       	subi	r20, 0xFF	; 255
    1116:	5f 4f       	sbci	r21, 0xFF	; 255
    1118:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    111c:	18 2f       	mov	r17, r24
    111e:	88 23       	and	r24, r24
    1120:	09 f4       	brne	.+2      	; 0x1124 <__stack+0x25>
    1122:	31 c1       	rjmp	.+610    	; 0x1386 <__stack+0x287>
    1124:	8e 2d       	mov	r24, r14
    1126:	b6 01       	movw	r22, r12
    1128:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <count_parameters>
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	09 f4       	brne	.+2      	; 0x1132 <__stack+0x33>
    1130:	29 c1       	rjmp	.+594    	; 0x1384 <__stack+0x285>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1132:	ce 01       	movw	r24, r28
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	6c 01       	movw	r12, r24
    1138:	20 e8       	ldi	r18, 0x80	; 128
    113a:	e2 2e       	mov	r14, r18
    113c:	2a e6       	ldi	r18, 0x6A	; 106
    113e:	33 e0       	ldi	r19, 0x03	; 3
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	8e 2d       	mov	r24, r14
    1144:	b6 01       	movw	r22, r12
    1146:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    114a:	89 2b       	or	r24, r25
    114c:	29 f4       	brne	.+10     	; 0x1158 <__stack+0x59>
	{
		EM_get_deveui(res);
    114e:	8f 2d       	mov	r24, r15
    1150:	90 2f       	mov	r25, r16
    1152:	0e 94 55 21 	call	0x42aa	; 0x42aa <EM_get_deveui>
    1156:	17 c1       	rjmp	.+558    	; 0x1386 <__stack+0x287>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1158:	21 e7       	ldi	r18, 0x71	; 113
    115a:	33 e0       	ldi	r19, 0x03	; 3
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	8e 2d       	mov	r24, r14
    1160:	b6 01       	movw	r22, r12
    1162:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    1166:	89 2b       	or	r24, r25
    1168:	29 f4       	brne	.+10     	; 0x1174 <__stack+0x75>
	{
		EM_get_appeui(res);
    116a:	8f 2d       	mov	r24, r15
    116c:	90 2f       	mov	r25, r16
    116e:	0e 94 6d 21 	call	0x42da	; 0x42da <EM_get_appeui>
    1172:	09 c1       	rjmp	.+530    	; 0x1386 <__stack+0x287>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    1174:	28 e7       	ldi	r18, 0x78	; 120
    1176:	33 e0       	ldi	r19, 0x03	; 3
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	8e 2d       	mov	r24, r14
    117c:	b6 01       	movw	r22, r12
    117e:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    1182:	89 2b       	or	r24, r25
    1184:	29 f4       	brne	.+10     	; 0x1190 <__stack+0x91>
	{
		EM_get_appkey(res);
    1186:	8f 2d       	mov	r24, r15
    1188:	90 2f       	mov	r25, r16
    118a:	0e 94 85 21 	call	0x430a	; 0x430a <EM_get_appkey>
    118e:	fb c0       	rjmp	.+502    	; 0x1386 <__stack+0x287>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1190:	2f e7       	ldi	r18, 0x7F	; 127
    1192:	33 e0       	ldi	r19, 0x03	; 3
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	8e 2d       	mov	r24, r14
    1198:	b6 01       	movw	r22, r12
    119a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    119e:	89 2b       	or	r24, r25
    11a0:	e1 f4       	brne	.+56     	; 0x11da <__stack+0xdb>
	{
		EM_get_ppmfactor(&val);
    11a2:	ce 01       	movw	r24, r28
    11a4:	45 96       	adiw	r24, 0x15	; 21
    11a6:	0e 94 c1 22 	call	0x4582	; 0x4582 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    11aa:	88 8d       	ldd	r24, Y+24	; 0x18
    11ac:	8f 93       	push	r24
    11ae:	8f 89       	ldd	r24, Y+23	; 0x17
    11b0:	8f 93       	push	r24
    11b2:	8e 89       	ldd	r24, Y+22	; 0x16
    11b4:	8f 93       	push	r24
    11b6:	8d 89       	ldd	r24, Y+21	; 0x15
    11b8:	8f 93       	push	r24
    11ba:	84 e8       	ldi	r24, 0x84	; 132
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	a0 e0       	ldi	r26, 0x00	; 0
    11c0:	af 93       	push	r26
    11c2:	9f 93       	push	r25
    11c4:	8f 93       	push	r24
    11c6:	0f 93       	push	r16
    11c8:	ff 92       	push	r15
    11ca:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	d6 c0       	rjmp	.+428    	; 0x1386 <__stack+0x287>
	}
	else if(strcmp(par, RW_RRL)==0)
    11da:	29 e8       	ldi	r18, 0x89	; 137
    11dc:	33 e0       	ldi	r19, 0x03	; 3
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	8e 2d       	mov	r24, r14
    11e2:	b6 01       	movw	r22, r12
    11e4:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    11e8:	89 2b       	or	r24, r25
    11ea:	e1 f4       	brne	.+56     	; 0x1224 <__stack+0x125>
	{
		EM_get_RRL(&val);
    11ec:	ce 01       	movw	r24, r28
    11ee:	45 96       	adiw	r24, 0x15	; 21
    11f0:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    11f4:	88 8d       	ldd	r24, Y+24	; 0x18
    11f6:	8f 93       	push	r24
    11f8:	8f 89       	ldd	r24, Y+23	; 0x17
    11fa:	8f 93       	push	r24
    11fc:	8e 89       	ldd	r24, Y+22	; 0x16
    11fe:	8f 93       	push	r24
    1200:	8d 89       	ldd	r24, Y+21	; 0x15
    1202:	8f 93       	push	r24
    1204:	84 e8       	ldi	r24, 0x84	; 132
    1206:	93 e0       	ldi	r25, 0x03	; 3
    1208:	a0 e0       	ldi	r26, 0x00	; 0
    120a:	af 93       	push	r26
    120c:	9f 93       	push	r25
    120e:	8f 93       	push	r24
    1210:	0f 93       	push	r16
    1212:	ff 92       	push	r15
    1214:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	b1 c0       	rjmp	.+354    	; 0x1386 <__stack+0x287>
	}
	else if(strcmp(par, RW_VCC)==0)
    1224:	2e e8       	ldi	r18, 0x8E	; 142
    1226:	33 e0       	ldi	r19, 0x03	; 3
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	8e 2d       	mov	r24, r14
    122c:	b6 01       	movw	r22, r12
    122e:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    1232:	89 2b       	or	r24, r25
    1234:	e1 f4       	brne	.+56     	; 0x126e <__stack+0x16f>
	{
		EM_get_Vcc(&val);
    1236:	ce 01       	movw	r24, r28
    1238:	45 96       	adiw	r24, 0x15	; 21
    123a:	0e 94 df 22 	call	0x45be	; 0x45be <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    123e:	88 8d       	ldd	r24, Y+24	; 0x18
    1240:	8f 93       	push	r24
    1242:	8f 89       	ldd	r24, Y+23	; 0x17
    1244:	8f 93       	push	r24
    1246:	8e 89       	ldd	r24, Y+22	; 0x16
    1248:	8f 93       	push	r24
    124a:	8d 89       	ldd	r24, Y+21	; 0x15
    124c:	8f 93       	push	r24
    124e:	84 e8       	ldi	r24, 0x84	; 132
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	a0 e0       	ldi	r26, 0x00	; 0
    1254:	af 93       	push	r26
    1256:	9f 93       	push	r25
    1258:	8f 93       	push	r24
    125a:	0f 93       	push	r16
    125c:	ff 92       	push	r15
    125e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	8c c0       	rjmp	.+280    	; 0x1386 <__stack+0x287>
	}
	else if(strcmp(par, RW_COLS)==0)
    126e:	23 e9       	ldi	r18, 0x93	; 147
    1270:	33 e0       	ldi	r19, 0x03	; 3
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	8e 2d       	mov	r24, r14
    1276:	b6 01       	movw	r22, r12
    1278:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    127c:	89 2b       	or	r24, r25
    127e:	29 f4       	brne	.+10     	; 0x128a <__stack+0x18b>
	{
		read_cols(res);
    1280:	8f 2d       	mov	r24, r15
    1282:	90 2f       	mov	r25, r16
    1284:	0e 94 cc 13 	call	0x2798	; 0x2798 <read_cols>
    1288:	7e c0       	rjmp	.+252    	; 0x1386 <__stack+0x287>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    128a:	28 e9       	ldi	r18, 0x98	; 152
    128c:	33 e0       	ldi	r19, 0x03	; 3
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	8e 2d       	mov	r24, r14
    1292:	b6 01       	movw	r22, r12
    1294:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    1298:	89 2b       	or	r24, r25
    129a:	a1 f4       	brne	.+40     	; 0x12c4 <__stack+0x1c5>
	{
		uint8_t val=EM_get_heat_up_time();
    129c:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    12a0:	1f 92       	push	r1
    12a2:	8f 93       	push	r24
    12a4:	82 ea       	ldi	r24, 0xA2	; 162
    12a6:	93 e0       	ldi	r25, 0x03	; 3
    12a8:	a0 e0       	ldi	r26, 0x00	; 0
    12aa:	af 93       	push	r26
    12ac:	9f 93       	push	r25
    12ae:	8f 93       	push	r24
    12b0:	0f 93       	push	r16
    12b2:	ff 92       	push	r15
    12b4:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	61 c0       	rjmp	.+194    	; 0x1386 <__stack+0x287>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    12c4:	24 eb       	ldi	r18, 0xB4	; 180
    12c6:	33 e0       	ldi	r19, 0x03	; 3
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	8e 2d       	mov	r24, r14
    12cc:	b6 01       	movw	r22, r12
    12ce:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    12d2:	89 2b       	or	r24, r25
    12d4:	a1 f4       	brne	.+40     	; 0x12fe <__stack+0x1ff>
	{
		uint16_t val=EM_get_air_pump_time();
    12d6:	0e 94 86 24 	call	0x490c	; 0x490c <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    12da:	9f 93       	push	r25
    12dc:	8f 93       	push	r24
    12de:	8f eb       	ldi	r24, 0xBF	; 191
    12e0:	93 e0       	ldi	r25, 0x03	; 3
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	af 93       	push	r26
    12e6:	9f 93       	push	r25
    12e8:	8f 93       	push	r24
    12ea:	0f 93       	push	r16
    12ec:	ff 92       	push	r15
    12ee:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	44 c0       	rjmp	.+136    	; 0x1386 <__stack+0x287>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    12fe:	22 ed       	ldi	r18, 0xD2	; 210
    1300:	33 e0       	ldi	r19, 0x03	; 3
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	8e 2d       	mov	r24, r14
    1306:	b6 01       	movw	r22, r12
    1308:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    130c:	89 2b       	or	r24, r25
    130e:	a1 f4       	brne	.+40     	; 0x1338 <__stack+0x239>
	{
		uint8_t val=EM_get_sp_interval();
    1310:	0e 94 92 24 	call	0x4924	; 0x4924 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1314:	1f 92       	push	r1
    1316:	8f 93       	push	r24
    1318:	8e ed       	ldi	r24, 0xDE	; 222
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	af 93       	push	r26
    1320:	9f 93       	push	r25
    1322:	8f 93       	push	r24
    1324:	0f 93       	push	r16
    1326:	ff 92       	push	r15
    1328:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	27 c0       	rjmp	.+78     	; 0x1386 <__stack+0x287>
	}
	else if(strcmp(par, RW_TIME)==0)
    1338:	2d ef       	ldi	r18, 0xFD	; 253
    133a:	33 e0       	ldi	r19, 0x03	; 3
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	8e 2d       	mov	r24, r14
    1340:	b6 01       	movw	r22, r12
    1342:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    1346:	89 2b       	or	r24, r25
    1348:	29 f4       	brne	.+10     	; 0x1354 <__stack+0x255>
	{
		read_time(res);
    134a:	8f 2d       	mov	r24, r15
    134c:	90 2f       	mov	r25, r16
    134e:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <read_time>
    1352:	19 c0       	rjmp	.+50     	; 0x1386 <__stack+0x287>
	}
	else if(strcmp(par, RW_VALIDATE_SI)==0)
    1354:	22 e0       	ldi	r18, 0x02	; 2
    1356:	34 e0       	ldi	r19, 0x04	; 4
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	8e 2d       	mov	r24, r14
    135c:	b6 01       	movw	r22, r12
    135e:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    1362:	89 2b       	or	r24, r25
    1364:	29 f4       	brne	.+10     	; 0x1370 <__stack+0x271>
	{
		read_validate_SI(res);
    1366:	8f 2d       	mov	r24, r15
    1368:	90 2f       	mov	r25, r16
    136a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <read_validate_SI>
    136e:	0b c0       	rjmp	.+22     	; 0x1386 <__stack+0x287>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1370:	26 e1       	ldi	r18, 0x16	; 22
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	4b e0       	ldi	r20, 0x0B	; 11
    1376:	54 e0       	ldi	r21, 0x04	; 4
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	8f 2d       	mov	r24, r15
    137c:	90 2f       	mov	r25, r16
    137e:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <__stack+0x287>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1384:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1386:	81 2f       	mov	r24, r17
    1388:	68 96       	adiw	r28, 0x18	; 24
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	df 90       	pop	r13
    13a2:	cf 90       	pop	r12
    13a4:	08 95       	ret

Disassembly of section .text.handle_write:

000013a6 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    13a6:	6f 92       	push	r6
    13a8:	7f 92       	push	r7
    13aa:	8f 92       	push	r8
    13ac:	af 92       	push	r10
    13ae:	bf 92       	push	r11
    13b0:	cf 92       	push	r12
    13b2:	df 92       	push	r13
    13b4:	ef 92       	push	r14
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	64 97       	sbiw	r28, 0x14	; 20
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	3b 01       	movw	r6, r22
    13ce:	88 2e       	mov	r8, r24
    13d0:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    13d2:	21 e0       	ldi	r18, 0x01	; 1
    13d4:	ae 01       	movw	r20, r28
    13d6:	4f 5f       	subi	r20, 0xFF	; 255
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    13de:	18 2f       	mov	r17, r24
    13e0:	88 23       	and	r24, r24
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <handle_write+0x40>
    13e4:	cd c0       	rjmp	.+410    	; 0x1580 <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	6c 01       	movw	r12, r24
    13ec:	20 e8       	ldi	r18, 0x80	; 128
    13ee:	e2 2e       	mov	r14, r18
    13f0:	2a e6       	ldi	r18, 0x6A	; 106
    13f2:	33 e0       	ldi	r19, 0x03	; 3
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	8e 2d       	mov	r24, r14
    13f8:	b6 01       	movw	r22, r12
    13fa:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    13fe:	89 2b       	or	r24, r25
    1400:	39 f4       	brne	.+14     	; 0x1410 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1402:	a5 01       	movw	r20, r10
    1404:	88 2d       	mov	r24, r8
    1406:	b3 01       	movw	r22, r6
    1408:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <write_deveui>
    140c:	18 2f       	mov	r17, r24
    140e:	b8 c0       	rjmp	.+368    	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1410:	21 e7       	ldi	r18, 0x71	; 113
    1412:	33 e0       	ldi	r19, 0x03	; 3
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	8e 2d       	mov	r24, r14
    1418:	b6 01       	movw	r22, r12
    141a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    141e:	89 2b       	or	r24, r25
    1420:	39 f4       	brne	.+14     	; 0x1430 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1422:	a5 01       	movw	r20, r10
    1424:	88 2d       	mov	r24, r8
    1426:	b3 01       	movw	r22, r6
    1428:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <write_appeui>
    142c:	18 2f       	mov	r17, r24
    142e:	a8 c0       	rjmp	.+336    	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1430:	28 e7       	ldi	r18, 0x78	; 120
    1432:	33 e0       	ldi	r19, 0x03	; 3
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	8e 2d       	mov	r24, r14
    1438:	b6 01       	movw	r22, r12
    143a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    143e:	89 2b       	or	r24, r25
    1440:	39 f4       	brne	.+14     	; 0x1450 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1442:	a5 01       	movw	r20, r10
    1444:	88 2d       	mov	r24, r8
    1446:	b3 01       	movw	r22, r6
    1448:	0e 94 28 18 	call	0x3050	; 0x3050 <write_appkey>
    144c:	18 2f       	mov	r17, r24
    144e:	98 c0       	rjmp	.+304    	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1450:	2f e7       	ldi	r18, 0x7F	; 127
    1452:	33 e0       	ldi	r19, 0x03	; 3
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	8e 2d       	mov	r24, r14
    1458:	b6 01       	movw	r22, r12
    145a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    145e:	89 2b       	or	r24, r25
    1460:	39 f4       	brne	.+14     	; 0x1470 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1462:	a5 01       	movw	r20, r10
    1464:	88 2d       	mov	r24, r8
    1466:	b3 01       	movw	r22, r6
    1468:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <write_PPM_factor>
    146c:	18 2f       	mov	r17, r24
    146e:	88 c0       	rjmp	.+272    	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1470:	29 e8       	ldi	r18, 0x89	; 137
    1472:	33 e0       	ldi	r19, 0x03	; 3
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	8e 2d       	mov	r24, r14
    1478:	b6 01       	movw	r22, r12
    147a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    147e:	89 2b       	or	r24, r25
    1480:	39 f4       	brne	.+14     	; 0x1490 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1482:	a5 01       	movw	r20, r10
    1484:	88 2d       	mov	r24, r8
    1486:	b3 01       	movw	r22, r6
    1488:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <write_RRL>
    148c:	18 2f       	mov	r17, r24
    148e:	78 c0       	rjmp	.+240    	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1490:	2e e8       	ldi	r18, 0x8E	; 142
    1492:	33 e0       	ldi	r19, 0x03	; 3
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	8e 2d       	mov	r24, r14
    1498:	b6 01       	movw	r22, r12
    149a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    149e:	89 2b       	or	r24, r25
    14a0:	39 f4       	brne	.+14     	; 0x14b0 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    14a2:	a5 01       	movw	r20, r10
    14a4:	88 2d       	mov	r24, r8
    14a6:	b3 01       	movw	r22, r6
    14a8:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <write_VCC>
    14ac:	18 2f       	mov	r17, r24
    14ae:	68 c0       	rjmp	.+208    	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    14b0:	23 e9       	ldi	r18, 0x93	; 147
    14b2:	33 e0       	ldi	r19, 0x03	; 3
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	8e 2d       	mov	r24, r14
    14b8:	b6 01       	movw	r22, r12
    14ba:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    14be:	89 2b       	or	r24, r25
    14c0:	39 f4       	brne	.+14     	; 0x14d0 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    14c2:	a5 01       	movw	r20, r10
    14c4:	88 2d       	mov	r24, r8
    14c6:	b3 01       	movw	r22, r6
    14c8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <write_cols>
    14cc:	18 2f       	mov	r17, r24
    14ce:	58 c0       	rjmp	.+176    	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    14d0:	28 e9       	ldi	r18, 0x98	; 152
    14d2:	33 e0       	ldi	r19, 0x03	; 3
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	8e 2d       	mov	r24, r14
    14d8:	b6 01       	movw	r22, r12
    14da:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    14de:	89 2b       	or	r24, r25
    14e0:	39 f4       	brne	.+14     	; 0x14f0 <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    14e2:	a5 01       	movw	r20, r10
    14e4:	88 2d       	mov	r24, r8
    14e6:	b3 01       	movw	r22, r6
    14e8:	0e 94 76 1d 	call	0x3aec	; 0x3aec <write_heat_up>
    14ec:	18 2f       	mov	r17, r24
    14ee:	48 c0       	rjmp	.+144    	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    14f0:	24 eb       	ldi	r18, 0xB4	; 180
    14f2:	33 e0       	ldi	r19, 0x03	; 3
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	8e 2d       	mov	r24, r14
    14f8:	b6 01       	movw	r22, r12
    14fa:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    14fe:	89 2b       	or	r24, r25
    1500:	39 f4       	brne	.+14     	; 0x1510 <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1502:	a5 01       	movw	r20, r10
    1504:	88 2d       	mov	r24, r8
    1506:	b3 01       	movw	r22, r6
    1508:	0e 94 1a 1c 	call	0x3834	; 0x3834 <write_air_pump>
    150c:	18 2f       	mov	r17, r24
    150e:	38 c0       	rjmp	.+112    	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1510:	22 ed       	ldi	r18, 0xD2	; 210
    1512:	33 e0       	ldi	r19, 0x03	; 3
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	8e 2d       	mov	r24, r14
    1518:	b6 01       	movw	r22, r12
    151a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    151e:	89 2b       	or	r24, r25
    1520:	39 f4       	brne	.+14     	; 0x1530 <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1522:	a5 01       	movw	r20, r10
    1524:	88 2d       	mov	r24, r8
    1526:	b3 01       	movw	r22, r6
    1528:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <write_sp_interval>
    152c:	18 2f       	mov	r17, r24
    152e:	28 c0       	rjmp	.+80     	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1530:	21 e2       	ldi	r18, 0x21	; 33
    1532:	34 e0       	ldi	r19, 0x04	; 4
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	8e 2d       	mov	r24, r14
    1538:	b6 01       	movw	r22, r12
    153a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    153e:	89 2b       	or	r24, r25
    1540:	39 f4       	brne	.+14     	; 0x1550 <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1542:	a5 01       	movw	r20, r10
    1544:	88 2d       	mov	r24, r8
    1546:	b3 01       	movw	r22, r6
    1548:	0e 94 b6 11 	call	0x236c	; 0x236c <write_reset>
    154c:	18 2f       	mov	r17, r24
    154e:	18 c0       	rjmp	.+48     	; 0x1580 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1550:	2d ef       	ldi	r18, 0xFD	; 253
    1552:	33 e0       	ldi	r19, 0x03	; 3
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	8e 2d       	mov	r24, r14
    1558:	b6 01       	movw	r22, r12
    155a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    155e:	89 2b       	or	r24, r25
    1560:	39 f4       	brne	.+14     	; 0x1570 <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1562:	a5 01       	movw	r20, r10
    1564:	88 2d       	mov	r24, r8
    1566:	b3 01       	movw	r22, r6
    1568:	0e 94 37 11 	call	0x226e	; 0x226e <write_time>
    156c:	18 2f       	mov	r17, r24
    156e:	08 c0       	rjmp	.+16     	; 0x1580 <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1570:	26 e1       	ldi	r18, 0x16	; 22
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	4b e0       	ldi	r20, 0x0B	; 11
    1576:	54 e0       	ldi	r21, 0x04	; 4
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	c5 01       	movw	r24, r10
    157c:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
	}
	
}
    1580:	81 2f       	mov	r24, r17
    1582:	64 96       	adiw	r28, 0x14	; 20
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	ef 90       	pop	r14
    1596:	df 90       	pop	r13
    1598:	cf 90       	pop	r12
    159a:	bf 90       	pop	r11
    159c:	af 90       	pop	r10
    159e:	8f 90       	pop	r8
    15a0:	7f 90       	pop	r7
    15a2:	6f 90       	pop	r6
    15a4:	08 95       	ret

Disassembly of section .text.handle_methane:

00001756 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    1756:	9f 92       	push	r9
    1758:	af 92       	push	r10
    175a:	bf 92       	push	r11
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	2e 97       	sbiw	r28, 0x0e	; 14
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	94 2e       	mov	r9, r20
    177e:	a5 2e       	mov	r10, r21
	if(!get_parameter(cmd, par, 2)) return false;
    1780:	22 e0       	ldi	r18, 0x02	; 2
    1782:	4f e7       	ldi	r20, 0x7F	; 127
    1784:	56 e0       	ldi	r21, 0x06	; 6
    1786:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    178a:	b8 2e       	mov	r11, r24
    178c:	88 23       	and	r24, r24
    178e:	09 f4       	brne	.+2      	; 0x1792 <handle_methane+0x3c>
    1790:	92 c0       	rjmp	.+292    	; 0x18b6 <handle_methane+0x160>
	
	if(strcmp(par, METH_POWER_ON)==0){
    1792:	8f e7       	ldi	r24, 0x7F	; 127
    1794:	96 e0       	ldi	r25, 0x06	; 6
    1796:	6c 01       	movw	r12, r24
    1798:	20 e8       	ldi	r18, 0x80	; 128
    179a:	e2 2e       	mov	r14, r18
    179c:	27 e2       	ldi	r18, 0x27	; 39
    179e:	34 e0       	ldi	r19, 0x04	; 4
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	8e 2d       	mov	r24, r14
    17a4:	b6 01       	movw	r22, r12
    17a6:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    17aa:	89 2b       	or	r24, r25
    17ac:	79 f4       	brne	.+30     	; 0x17cc <handle_methane+0x76>
		PM_HAL_meth_power_init();
    17ae:	0e 94 f6 23 	call	0x47ec	; 0x47ec <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	0e 94 74 23 	call	0x46e8	; 0x46e8 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    17b8:	28 e1       	ldi	r18, 0x18	; 24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	4a e2       	ldi	r20, 0x2A	; 42
    17be:	54 e0       	ldi	r21, 0x04	; 4
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	89 2d       	mov	r24, r9
    17c4:	9a 2d       	mov	r25, r10
    17c6:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
    17ca:	75 c0       	rjmp	.+234    	; 0x18b6 <handle_methane+0x160>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    17cc:	22 e4       	ldi	r18, 0x42	; 66
    17ce:	34 e0       	ldi	r19, 0x04	; 4
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	8e 2d       	mov	r24, r14
    17d4:	b6 01       	movw	r22, r12
    17d6:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    17da:	89 2b       	or	r24, r25
    17dc:	79 f4       	brne	.+30     	; 0x17fc <handle_methane+0xa6>
		PM_HAL_meth_power_init();
    17de:	0e 94 f6 23 	call	0x47ec	; 0x47ec <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	0e 94 74 23 	call	0x46e8	; 0x46e8 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    17e8:	29 e1       	ldi	r18, 0x19	; 25
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	46 e4       	ldi	r20, 0x46	; 70
    17ee:	54 e0       	ldi	r21, 0x04	; 4
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	89 2d       	mov	r24, r9
    17f4:	9a 2d       	mov	r25, r10
    17f6:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
    17fa:	5d c0       	rjmp	.+186    	; 0x18b6 <handle_methane+0x160>
	}
	else if(strcmp(par, METH_READ)==0)
    17fc:	2f e5       	ldi	r18, 0x5F	; 95
    17fe:	34 e0       	ldi	r19, 0x04	; 4
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	8e 2d       	mov	r24, r14
    1804:	b6 01       	movw	r22, r12
    1806:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    180a:	89 2b       	or	r24, r25
    180c:	09 f0       	breq	.+2      	; 0x1810 <handle_methane+0xba>
    180e:	4a c0       	rjmp	.+148    	; 0x18a4 <handle_methane+0x14e>
	{
		//Set parameters
		float vccx=0.0;
    1810:	19 86       	std	Y+9, r1	; 0x09
    1812:	1a 86       	std	Y+10, r1	; 0x0a
    1814:	1b 86       	std	Y+11, r1	; 0x0b
    1816:	1c 86       	std	Y+12, r1	; 0x0c
		float rrlx=0.0;
    1818:	1d 82       	std	Y+5, r1	; 0x05
    181a:	1e 82       	std	Y+6, r1	; 0x06
    181c:	1f 82       	std	Y+7, r1	; 0x07
    181e:	18 86       	std	Y+8, r1	; 0x08
		float ppmx=0.0;
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	1a 82       	std	Y+2, r1	; 0x02
    1824:	1b 82       	std	Y+3, r1	; 0x03
    1826:	1c 82       	std	Y+4, r1	; 0x04
		
		EM_get_Vcc(&vccx);
    1828:	ce 01       	movw	r24, r28
    182a:	09 96       	adiw	r24, 0x09	; 9
    182c:	0e 94 df 22 	call	0x45be	; 0x45be <EM_get_Vcc>
		EM_get_RRL(&rrlx);
    1830:	ce 01       	movw	r24, r28
    1832:	05 96       	adiw	r24, 0x05	; 5
    1834:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <EM_get_RRL>
		EM_get_ppmfactor(&ppmx);
    1838:	ce 01       	movw	r24, r28
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	0e 94 c1 22 	call	0x4582	; 0x4582 <EM_get_ppmfactor>
		
		ADC_set_conf_parameters(vccx, rrlx, ppmx);
    1840:	e9 80       	ldd	r14, Y+1	; 0x01
    1842:	fa 80       	ldd	r15, Y+2	; 0x02
    1844:	0b 81       	ldd	r16, Y+3	; 0x03
    1846:	1c 81       	ldd	r17, Y+4	; 0x04
    1848:	2d 81       	ldd	r18, Y+5	; 0x05
    184a:	3e 81       	ldd	r19, Y+6	; 0x06
    184c:	4f 81       	ldd	r20, Y+7	; 0x07
    184e:	58 85       	ldd	r21, Y+8	; 0x08
    1850:	69 85       	ldd	r22, Y+9	; 0x09
    1852:	7a 85       	ldd	r23, Y+10	; 0x0a
    1854:	8b 85       	ldd	r24, Y+11	; 0x0b
    1856:	9c 85       	ldd	r25, Y+12	; 0x0c
    1858:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <ADC_set_conf_parameters>
		
		
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    185c:	ce 01       	movw	r24, r28
    185e:	0d 96       	adiw	r24, 0x0d	; 13
    1860:	0e 94 47 1b 	call	0x368e	; 0x368e <ADC_get_value>
    1864:	88 23       	and	r24, r24
    1866:	51 f0       	breq	.+20     	; 0x187c <handle_methane+0x126>
		{
			strcpy(res, "Error when reading data");
    1868:	28 e1       	ldi	r18, 0x18	; 24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	44 e6       	ldi	r20, 0x64	; 100
    186e:	54 e0       	ldi	r21, 0x04	; 4
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	89 2d       	mov	r24, r9
    1874:	9a 2d       	mov	r25, r10
    1876:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
    187a:	1d c0       	rjmp	.+58     	; 0x18b6 <handle_methane+0x160>
		}else{
			sprintf(res, "PPM=%u", val);
    187c:	8e 85       	ldd	r24, Y+14	; 0x0e
    187e:	8f 93       	push	r24
    1880:	8d 85       	ldd	r24, Y+13	; 0x0d
    1882:	8f 93       	push	r24
    1884:	8c e7       	ldi	r24, 0x7C	; 124
    1886:	94 e0       	ldi	r25, 0x04	; 4
    1888:	a0 e0       	ldi	r26, 0x00	; 0
    188a:	af 93       	push	r26
    188c:	9f 93       	push	r25
    188e:	8f 93       	push	r24
    1890:	af 92       	push	r10
    1892:	9f 92       	push	r9
    1894:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	09 c0       	rjmp	.+18     	; 0x18b6 <handle_methane+0x160>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    18a4:	26 e1       	ldi	r18, 0x16	; 22
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	43 e8       	ldi	r20, 0x83	; 131
    18aa:	54 e0       	ldi	r21, 0x04	; 4
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	89 2d       	mov	r24, r9
    18b0:	9a 2d       	mov	r25, r10
    18b2:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
	}
	return false;
}
    18b6:	8b 2d       	mov	r24, r11
    18b8:	2e 96       	adiw	r28, 0x0e	; 14
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	df 90       	pop	r13
    18d2:	cf 90       	pop	r12
    18d4:	bf 90       	pop	r11
    18d6:	af 90       	pop	r10
    18d8:	9f 90       	pop	r9
    18da:	08 95       	ret

Disassembly of section .text.handle_SCD30:

00001f40 <handle_SCD30>:

static bool handle_SCD30(const char cmd[], char res[]){
    1f40:	bf 92       	push	r11
    1f42:	cf 92       	push	r12
    1f44:	df 92       	push	r13
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <handle_SCD30+0x14>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <handle_SCD30+0x16>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <handle_SCD30+0x18>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	f4 2e       	mov	r15, r20
    1f5e:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    1f60:	22 e0       	ldi	r18, 0x02	; 2
    1f62:	4f e7       	ldi	r20, 0x7F	; 127
    1f64:	56 e0       	ldi	r21, 0x06	; 6
    1f66:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    1f6a:	18 2f       	mov	r17, r24
    1f6c:	88 23       	and	r24, r24
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <handle_SCD30+0x32>
    1f70:	62 c0       	rjmp	.+196    	; 0x2036 <handle_SCD30+0xf6>
	
	if(strcmp(par, SCD30_READ)==0){
    1f72:	6f e7       	ldi	r22, 0x7F	; 127
    1f74:	76 e0       	ldi	r23, 0x06	; 6
    1f76:	80 e8       	ldi	r24, 0x80	; 128
    1f78:	2f e5       	ldi	r18, 0x5F	; 95
    1f7a:	34 e0       	ldi	r19, 0x04	; 4
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    1f82:	89 2b       	or	r24, r25
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <handle_SCD30+0x48>
    1f86:	4e c0       	rjmp	.+156    	; 0x2024 <handle_SCD30+0xe4>
		uint16_t co2, temp, humidity;
		if(SCD30_get_reading(&co2, &temp, &humidity)!=SCD30_STATUS_SUCCESS){
    1f88:	ae 01       	movw	r20, r28
    1f8a:	4f 5f       	subi	r20, 0xFF	; 255
    1f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8e:	be 01       	movw	r22, r28
    1f90:	6d 5f       	subi	r22, 0xFD	; 253
    1f92:	7f 4f       	sbci	r23, 0xFF	; 255
    1f94:	ce 01       	movw	r24, r28
    1f96:	05 96       	adiw	r24, 0x05	; 5
    1f98:	0e 94 0b 21 	call	0x4216	; 0x4216 <SCD30_get_reading>
    1f9c:	88 23       	and	r24, r24
    1f9e:	51 f0       	breq	.+20     	; 0x1fb4 <handle_SCD30+0x74>
			strcpy(res, "Error when reading data");
    1fa0:	28 e1       	ldi	r18, 0x18	; 24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	44 e6       	ldi	r20, 0x64	; 100
    1fa6:	54 e0       	ldi	r21, 0x04	; 4
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	8f 2d       	mov	r24, r15
    1fac:	90 2f       	mov	r25, r16
    1fae:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
    1fb2:	41 c0       	rjmp	.+130    	; 0x2036 <handle_SCD30+0xf6>
		}else{
			float temp_f=(float)temp/10.00;
    1fb4:	6b 81       	ldd	r22, Y+3	; 0x03
    1fb6:	7c 81       	ldd	r23, Y+4	; 0x04
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__floatunsisf>
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 dd 24 	call	0x49ba	; 0x49ba <__divsf3>
    1fcc:	e6 2e       	mov	r14, r22
    1fce:	d7 2e       	mov	r13, r23
    1fd0:	c8 2e       	mov	r12, r24
    1fd2:	b9 2e       	mov	r11, r25
			float hum_f=(float)humidity/10.00;
    1fd4:	69 81       	ldd	r22, Y+1	; 0x01
    1fd6:	7a 81       	ldd	r23, Y+2	; 0x02
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__floatunsisf>
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e2       	ldi	r20, 0x20	; 32
    1fe6:	51 e4       	ldi	r21, 0x41	; 65
    1fe8:	0e 94 dd 24 	call	0x49ba	; 0x49ba <__divsf3>
			sprintf(res, "CO2=%u ppm, temp=%.1f C, humidity=%.1f%% RH", co2, temp_f, hum_f);
    1fec:	9f 93       	push	r25
    1fee:	8f 93       	push	r24
    1ff0:	7f 93       	push	r23
    1ff2:	6f 93       	push	r22
    1ff4:	bf 92       	push	r11
    1ff6:	cf 92       	push	r12
    1ff8:	df 92       	push	r13
    1ffa:	ef 92       	push	r14
    1ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffe:	8f 93       	push	r24
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	8f 93       	push	r24
    2004:	89 e9       	ldi	r24, 0x99	; 153
    2006:	94 e0       	ldi	r25, 0x04	; 4
    2008:	a0 e0       	ldi	r26, 0x00	; 0
    200a:	af 93       	push	r26
    200c:	9f 93       	push	r25
    200e:	8f 93       	push	r24
    2010:	0f 93       	push	r16
    2012:	ff 92       	push	r15
    2014:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <sprintf>
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	09 c0       	rjmp	.+18     	; 0x2036 <handle_SCD30+0xf6>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2024:	26 e1       	ldi	r18, 0x16	; 22
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	43 e8       	ldi	r20, 0x83	; 131
    202a:	54 e0       	ldi	r21, 0x04	; 4
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	8f 2d       	mov	r24, r15
    2030:	90 2f       	mov	r25, r16
    2032:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
	}
}
    2036:	81 2f       	mov	r24, r17
    2038:	26 96       	adiw	r28, 0x06	; 6
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	1f 91       	pop	r17
    204a:	0f 91       	pop	r16
    204c:	ff 90       	pop	r15
    204e:	ef 90       	pop	r14
    2050:	df 90       	pop	r13
    2052:	cf 90       	pop	r12
    2054:	bf 90       	pop	r11
    2056:	08 95       	ret

Disassembly of section .text.handle_pump:

00002a7c <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    2a7c:	cf 92       	push	r12
    2a7e:	df 92       	push	r13
    2a80:	ef 92       	push	r14
    2a82:	0f 93       	push	r16
    2a84:	1f 93       	push	r17
    2a86:	cf 93       	push	r28
    2a88:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    2a8a:	22 e0       	ldi	r18, 0x02	; 2
    2a8c:	4f e7       	ldi	r20, 0x7F	; 127
    2a8e:	56 e0       	ldi	r21, 0x06	; 6
    2a90:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    2a94:	c8 2f       	mov	r28, r24
    2a96:	88 23       	and	r24, r24
    2a98:	d9 f1       	breq	.+118    	; 0x2b10 <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    2a9a:	8f e7       	ldi	r24, 0x7F	; 127
    2a9c:	96 e0       	ldi	r25, 0x06	; 6
    2a9e:	6c 01       	movw	r12, r24
    2aa0:	20 e8       	ldi	r18, 0x80	; 128
    2aa2:	e2 2e       	mov	r14, r18
    2aa4:	27 e2       	ldi	r18, 0x27	; 39
    2aa6:	34 e0       	ldi	r19, 0x04	; 4
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	8e 2d       	mov	r24, r14
    2aac:	b6 01       	movw	r22, r12
    2aae:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    2ab2:	89 2b       	or	r24, r25
    2ab4:	71 f4       	brne	.+28     	; 0x2ad2 <handle_pump+0x56>
		PM_HAL_BC_power_init();
    2ab6:	0e 94 04 24 	call	0x4808	; 0x4808 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	0e 94 88 23 	call	0x4710	; 0x4710 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    2ac0:	25 e1       	ldi	r18, 0x15	; 21
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	45 ec       	ldi	r20, 0xC5	; 197
    2ac6:	54 e0       	ldi	r21, 0x04	; 4
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	c8 01       	movw	r24, r16
    2acc:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
    2ad0:	1f c0       	rjmp	.+62     	; 0x2b10 <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    2ad2:	22 e4       	ldi	r18, 0x42	; 66
    2ad4:	34 e0       	ldi	r19, 0x04	; 4
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	8e 2d       	mov	r24, r14
    2ada:	b6 01       	movw	r22, r12
    2adc:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    2ae0:	89 2b       	or	r24, r25
    2ae2:	71 f4       	brne	.+28     	; 0x2b00 <handle_pump+0x84>
		PM_HAL_BC_power_init();
    2ae4:	0e 94 04 24 	call	0x4808	; 0x4808 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	0e 94 88 23 	call	0x4710	; 0x4710 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    2aee:	26 e1       	ldi	r18, 0x16	; 22
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	4a ed       	ldi	r20, 0xDA	; 218
    2af4:	54 e0       	ldi	r21, 0x04	; 4
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	c8 01       	movw	r24, r16
    2afa:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
    2afe:	08 c0       	rjmp	.+16     	; 0x2b10 <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2b00:	26 e1       	ldi	r18, 0x16	; 22
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	43 e8       	ldi	r20, 0x83	; 131
    2b06:	54 e0       	ldi	r21, 0x04	; 4
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	c8 01       	movw	r24, r16
    2b0c:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
	}
}
    2b10:	8c 2f       	mov	r24, r28
    2b12:	cf 91       	pop	r28
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	ef 90       	pop	r14
    2b1a:	df 90       	pop	r13
    2b1c:	cf 90       	pop	r12
    2b1e:	08 95       	ret

Disassembly of section .text.handle_sensor:

00002910 <handle_sensor>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_SCD30(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sensor(const char cmd[], char res[]){
    2910:	6f 92       	push	r6
    2912:	7f 92       	push	r7
    2914:	8f 92       	push	r8
    2916:	cf 92       	push	r12
    2918:	df 92       	push	r13
    291a:	ef 92       	push	r14
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	cf 93       	push	r28
    2922:	3b 01       	movw	r6, r22
    2924:	88 2e       	mov	r8, r24
    2926:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    2928:	21 e0       	ldi	r18, 0x01	; 1
    292a:	4f e7       	ldi	r20, 0x7F	; 127
    292c:	56 e0       	ldi	r21, 0x06	; 6
    292e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <get_parameter>
    2932:	c8 2f       	mov	r28, r24
    2934:	88 23       	and	r24, r24
    2936:	e9 f1       	breq	.+122    	; 0x29b2 <handle_sensor+0xa2>
	
	if(strcmp(par, S_METH)==0){
    2938:	8f e7       	ldi	r24, 0x7F	; 127
    293a:	96 e0       	ldi	r25, 0x06	; 6
    293c:	6c 01       	movw	r12, r24
    293e:	20 e8       	ldi	r18, 0x80	; 128
    2940:	e2 2e       	mov	r14, r18
    2942:	20 ef       	ldi	r18, 0xF0	; 240
    2944:	34 e0       	ldi	r19, 0x04	; 4
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	8e 2d       	mov	r24, r14
    294a:	b6 01       	movw	r22, r12
    294c:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    2950:	89 2b       	or	r24, r25
    2952:	39 f4       	brne	.+14     	; 0x2962 <handle_sensor+0x52>
		return handle_methane(cmd, res);
    2954:	a8 01       	movw	r20, r16
    2956:	88 2d       	mov	r24, r8
    2958:	b3 01       	movw	r22, r6
    295a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <handle_methane>
    295e:	c8 2f       	mov	r28, r24
    2960:	28 c0       	rjmp	.+80     	; 0x29b2 <handle_sensor+0xa2>
	}else if(strcmp(par, S_SCD30)==0){
    2962:	25 ef       	ldi	r18, 0xF5	; 245
    2964:	34 e0       	ldi	r19, 0x04	; 4
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	8e 2d       	mov	r24, r14
    296a:	b6 01       	movw	r22, r12
    296c:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    2970:	89 2b       	or	r24, r25
    2972:	39 f4       	brne	.+14     	; 0x2982 <handle_sensor+0x72>
		return handle_SCD30(cmd, res);
    2974:	a8 01       	movw	r20, r16
    2976:	88 2d       	mov	r24, r8
    2978:	b3 01       	movw	r22, r6
    297a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <handle_SCD30>
    297e:	c8 2f       	mov	r28, r24
    2980:	18 c0       	rjmp	.+48     	; 0x29b2 <handle_sensor+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    2982:	2b ef       	ldi	r18, 0xFB	; 251
    2984:	34 e0       	ldi	r19, 0x04	; 4
    2986:	40 e0       	ldi	r20, 0x00	; 0
    2988:	8e 2d       	mov	r24, r14
    298a:	b6 01       	movw	r22, r12
    298c:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcmp>
    2990:	89 2b       	or	r24, r25
    2992:	39 f4       	brne	.+14     	; 0x29a2 <handle_sensor+0x92>
		return handle_pump(cmd, res);
    2994:	a8 01       	movw	r20, r16
    2996:	88 2d       	mov	r24, r8
    2998:	b3 01       	movw	r22, r6
    299a:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <handle_pump>
    299e:	c8 2f       	mov	r28, r24
    29a0:	08 c0       	rjmp	.+16     	; 0x29b2 <handle_sensor+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    29a2:	26 e1       	ldi	r18, 0x16	; 22
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	43 e8       	ldi	r20, 0x83	; 131
    29a8:	54 e0       	ldi	r21, 0x04	; 4
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	c8 01       	movw	r24, r16
    29ae:	0e 94 24 21 	call	0x4248	; 0x4248 <memcpy>
		return true;
	}
}
    29b2:	8c 2f       	mov	r24, r28
    29b4:	cf 91       	pop	r28
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	ef 90       	pop	r14
    29bc:	df 90       	pop	r13
    29be:	cf 90       	pop	r12
    29c0:	8f 90       	pop	r8
    29c2:	7f 90       	pop	r7
    29c4:	6f 90       	pop	r6
    29c6:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00004442 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    4442:	0e 94 c4 23 	call	0x4788	; 0x4788 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    4446:	0e 94 ef 23 	call	0x47de	; 0x47de <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    4450:	0e 94 fd 23 	call	0x47fa	; 0x47fa <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	0e 94 7e 23 	call	0x46fc	; 0x46fc <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    445a:	0e 94 49 22 	call	0x4492	; 0x4492 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    445e:	88 23       	and	r24, r24
    4460:	11 f0       	breq	.+4      	; 0x4466 <init_methane_SCD30+0x24>
    4462:	80 e0       	ldi	r24, 0x00	; 0
    4464:	08 95       	ret
	return true;
    4466:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    4468:	08 95       	ret

Disassembly of section .text.count_parameters:

000037e2 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    37e2:	6f 92       	push	r6
    37e4:	7f 92       	push	r7
    37e6:	8f 92       	push	r8
    37e8:	cf 92       	push	r12
    37ea:	df 92       	push	r13
    37ec:	ef 92       	push	r14
    37ee:	3b 01       	movw	r6, r22
    37f0:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    37f2:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    37f6:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    37fc:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    37fe:	10 c0       	rjmp	.+32     	; 0x3820 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    3800:	e8 2c       	mov	r14, r8
    3802:	63 01       	movw	r12, r6
    3804:	c2 0e       	add	r12, r18
    3806:	d3 1e       	adc	r13, r19
    3808:	e1 1c       	adc	r14, r1
    380a:	37 fd       	sbrc	r19, 7
    380c:	ea 94       	dec	r14
    380e:	f6 01       	movw	r30, r12
    3810:	94 91       	lpm	r25, Z
    3812:	e7 fc       	sbrc	r14, 7
    3814:	90 81       	ld	r25, Z
    3816:	90 32       	cpi	r25, 0x20	; 32
    3818:	09 f4       	brne	.+2      	; 0x381c <count_parameters+0x3a>
			cnt++;
    381a:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    381c:	2f 5f       	subi	r18, 0xFF	; 255
    381e:	3f 4f       	sbci	r19, 0xFF	; 255
    3820:	26 17       	cp	r18, r22
    3822:	37 07       	cpc	r19, r23
    3824:	68 f3       	brcs	.-38     	; 0x3800 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    3826:	ef 90       	pop	r14
    3828:	df 90       	pop	r13
    382a:	cf 90       	pop	r12
    382c:	8f 90       	pop	r8
    382e:	7f 90       	pop	r7
    3830:	6f 90       	pop	r6
    3832:	08 95       	ret

Disassembly of section .text.par_index:

00003228 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    3228:	cf 92       	push	r12
    322a:	df 92       	push	r13
    322c:	ef 92       	push	r14
    322e:	0f 93       	push	r16
    3230:	1f 93       	push	r17
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    3236:	44 23       	and	r20, r20
    3238:	29 f1       	breq	.+74     	; 0x3284 <par_index+0x5c>
    323a:	04 2f       	mov	r16, r20
    323c:	6b 01       	movw	r12, r22
    323e:	e8 2e       	mov	r14, r24
    3240:	c0 e0       	ldi	r28, 0x00	; 0
    3242:	d0 e0       	ldi	r29, 0x00	; 0
    3244:	10 e0       	ldi	r17, 0x00	; 0
    3246:	14 c0       	rjmp	.+40     	; 0x3270 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    3248:	ae 2d       	mov	r26, r14
    324a:	c6 01       	movw	r24, r12
    324c:	8c 0f       	add	r24, r28
    324e:	9d 1f       	adc	r25, r29
    3250:	a1 1d       	adc	r26, r1
    3252:	d7 fd       	sbrc	r29, 7
    3254:	aa 95       	dec	r26
    3256:	fc 01       	movw	r30, r24
    3258:	84 91       	lpm	r24, Z
    325a:	a7 fd       	sbrc	r26, 7
    325c:	80 81       	ld	r24, Z
    325e:	80 32       	cpi	r24, 0x20	; 32
    3260:	31 f4       	brne	.+12     	; 0x326e <par_index+0x46>
			cnt++;
    3262:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    3264:	01 13       	cpse	r16, r17
    3266:	03 c0       	rjmp	.+6      	; 0x326e <par_index+0x46>
				return i+1;
    3268:	ce 01       	movw	r24, r28
    326a:	01 96       	adiw	r24, 0x01	; 1
    326c:	0d c0       	rjmp	.+26     	; 0x3288 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    326e:	21 96       	adiw	r28, 0x01	; 1
    3270:	8e 2d       	mov	r24, r14
    3272:	b6 01       	movw	r22, r12
    3274:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    3278:	c8 17       	cp	r28, r24
    327a:	d9 07       	cpc	r29, r25
    327c:	28 f3       	brcs	.-54     	; 0x3248 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	02 c0       	rjmp	.+4      	; 0x3288 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	0f 91       	pop	r16
    3290:	ef 90       	pop	r14
    3292:	df 90       	pop	r13
    3294:	cf 90       	pop	r12
    3296:	08 95       	ret

Disassembly of section .text.get_parameter:

00002c4c <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    2c4c:	8f 92       	push	r8
    2c4e:	9f 92       	push	r9
    2c50:	af 92       	push	r10
    2c52:	cf 92       	push	r12
    2c54:	df 92       	push	r13
    2c56:	ef 92       	push	r14
    2c58:	ff 92       	push	r15
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	6b 01       	movw	r12, r22
    2c64:	e8 2e       	mov	r14, r24
    2c66:	ea 01       	movw	r28, r20
    2c68:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    2c6a:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <count_parameters>
	if(pars<parNo) return false;
    2c6e:	8f 15       	cp	r24, r15
    2c70:	58 f1       	brcs	.+86     	; 0x2cc8 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    2c72:	8e 2d       	mov	r24, r14
    2c74:	b6 01       	movw	r22, r12
    2c76:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    2c7a:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    2c7c:	4f 2d       	mov	r20, r15
    2c7e:	8e 2d       	mov	r24, r14
    2c80:	b6 01       	movw	r22, r12
    2c82:	0e 94 14 19 	call	0x3228	; 0x3228 <par_index>
	uint8_t parLen=0;
    2c86:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    2c88:	15 c0       	rjmp	.+42     	; 0x2cb4 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    2c8a:	46 01       	movw	r8, r12
    2c8c:	ae 2c       	mov	r10, r14
    2c8e:	82 0e       	add	r8, r18
    2c90:	93 1e       	adc	r9, r19
    2c92:	a1 1c       	adc	r10, r1
    2c94:	37 fd       	sbrc	r19, 7
    2c96:	aa 94       	dec	r10
    2c98:	4a 2d       	mov	r20, r10
    2c9a:	94 01       	movw	r18, r8
    2c9c:	f4 01       	movw	r30, r8
    2c9e:	24 91       	lpm	r18, Z
    2ca0:	47 fd       	sbrc	r20, 7
    2ca2:	20 81       	ld	r18, Z
    2ca4:	20 32       	cpi	r18, 0x20	; 32
    2ca6:	59 f0       	breq	.+22     	; 0x2cbe <get_parameter+0x72>
		par[parLen++]=src[i];
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e9 0f       	add	r30, r25
    2cac:	f1 1d       	adc	r31, r1
    2cae:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    2cb0:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    2cb2:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    2cb4:	28 2f       	mov	r18, r24
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	20 17       	cp	r18, r16
    2cba:	31 07       	cpc	r19, r17
    2cbc:	30 f3       	brcs	.-52     	; 0x2c8a <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    2cbe:	c9 0f       	add	r28, r25
    2cc0:	d1 1d       	adc	r29, r1
    2cc2:	18 82       	st	Y, r1
	
	return true;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	01 c0       	rjmp	.+2      	; 0x2cca <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	df 90       	pop	r13
    2cd8:	cf 90       	pop	r12
    2cda:	af 90       	pop	r10
    2cdc:	9f 90       	pop	r9
    2cde:	8f 90       	pop	r8
    2ce0:	08 95       	ret

Disassembly of section .text.calc_crc8:

000040dc <calc_crc8>:
 *  Author: Christopher S. Nielsen
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    40dc:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    40de:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    40e0:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    40e2:	14 c0       	rjmp	.+40     	; 0x410c <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    40e4:	fa 01       	movw	r30, r20
    40e6:	e3 0f       	add	r30, r19
    40e8:	f1 1d       	adc	r31, r1
    40ea:	90 81       	ld	r25, Z
    40ec:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    40ee:	28 e0       	ldi	r18, 0x08	; 8
    40f0:	0a c0       	rjmp	.+20     	; 0x4106 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    40f2:	88 23       	and	r24, r24
    40f4:	34 f4       	brge	.+12     	; 0x4102 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	88 0f       	add	r24, r24
    40fa:	99 1f       	adc	r25, r25
    40fc:	91 e3       	ldi	r25, 0x31	; 49
    40fe:	89 27       	eor	r24, r25
    4100:	01 c0       	rjmp	.+2      	; 0x4104 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    4102:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    4104:	21 50       	subi	r18, 0x01	; 1
    4106:	21 11       	cpse	r18, r1
    4108:	f4 cf       	rjmp	.-24     	; 0x40f2 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    410a:	3f 5f       	subi	r19, 0xFF	; 255
    410c:	36 17       	cp	r19, r22
    410e:	50 f3       	brcs	.-44     	; 0x40e4 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    4110:	08 95       	ret

Disassembly of section .text.get_decimal:

000029c8 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    29c8:	cf 92       	push	r12
    29ca:	df 92       	push	r13
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    29da:	10 e0       	ldi	r17, 0x00	; 0
    29dc:	08 c0       	rjmp	.+16     	; 0x29ee <get_decimal+0x26>
	{
		if(str[i]=='.'){
    29de:	cc 0d       	add	r28, r12
    29e0:	dd 1d       	adc	r29, r13
    29e2:	88 81       	ld	r24, Y
    29e4:	8e 32       	cpi	r24, 0x2E	; 46
    29e6:	11 f4       	brne	.+4      	; 0x29ec <get_decimal+0x24>
			index=i+1;
    29e8:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    29ea:	0c c0       	rjmp	.+24     	; 0x2a04 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    29ec:	1f 5f       	subi	r17, 0xFF	; 255
    29ee:	c1 2f       	mov	r28, r17
    29f0:	d0 e0       	ldi	r29, 0x00	; 0
    29f2:	b6 01       	movw	r22, r12
    29f4:	80 e8       	ldi	r24, 0x80	; 128
    29f6:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	c8 17       	cp	r28, r24
    29fe:	d9 07       	cpc	r29, r25
    2a00:	70 f3       	brcs	.-36     	; 0x29de <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    2a02:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    2a04:	11 23       	and	r17, r17
    2a06:	71 f1       	breq	.+92     	; 0x2a64 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    2a08:	c1 0e       	add	r12, r17
    2a0a:	d1 1c       	adc	r13, r1
    2a0c:	80 e8       	ldi	r24, 0x80	; 128
    2a0e:	e8 2e       	mov	r14, r24
    2a10:	8e 2d       	mov	r24, r14
    2a12:	b6 01       	movw	r22, r12
    2a14:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    2a18:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    2a1a:	8e 2d       	mov	r24, r14
    2a1c:	b6 01       	movw	r22, r12
    2a1e:	0e 94 e5 24 	call	0x49ca	; 0x49ca <atoi>
    2a22:	8c 01       	movw	r16, r24
	float divisor=1;
    2a24:	0f 2e       	mov	r0, r31
    2a26:	c1 2c       	mov	r12, r1
    2a28:	d1 2c       	mov	r13, r1
    2a2a:	f0 e8       	ldi	r31, 0x80	; 128
    2a2c:	ef 2e       	mov	r14, r31
    2a2e:	ff e3       	ldi	r31, 0x3F	; 63
    2a30:	ff 2e       	mov	r15, r31
    2a32:	f0 2d       	mov	r31, r0
	
	while(len>0){
    2a34:	0b c0       	rjmp	.+22     	; 0x2a4c <get_decimal+0x84>
		divisor*=10;
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e2       	ldi	r20, 0x20	; 32
    2a3c:	51 e4       	ldi	r21, 0x41	; 65
    2a3e:	c7 01       	movw	r24, r14
    2a40:	b6 01       	movw	r22, r12
    2a42:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <__mulsf3>
    2a46:	6b 01       	movw	r12, r22
    2a48:	7c 01       	movw	r14, r24
		len--;
    2a4a:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    2a4c:	c1 11       	cpse	r28, r1
    2a4e:	f3 cf       	rjmp	.-26     	; 0x2a36 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    2a50:	b8 01       	movw	r22, r16
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__floatunsisf>
    2a5a:	a7 01       	movw	r20, r14
    2a5c:	96 01       	movw	r18, r12
    2a5e:	0e 94 dd 24 	call	0x49ba	; 0x49ba <__divsf3>
    2a62:	03 c0       	rjmp	.+6      	; 0x2a6a <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	70 e0       	ldi	r23, 0x00	; 0
    2a68:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	ff 90       	pop	r15
    2a74:	ef 90       	pop	r14
    2a76:	df 90       	pop	r13
    2a78:	cf 90       	pop	r12
    2a7a:	08 95       	ret

Disassembly of section .text.str2flaot:

0000396e <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    396e:	cf 92       	push	r12
    3970:	df 92       	push	r13
    3972:	ef 92       	push	r14
    3974:	ff 92       	push	r15
    3976:	0f 93       	push	r16
    3978:	1f 93       	push	r17
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    3980:	bc 01       	movw	r22, r24
    3982:	80 e8       	ldi	r24, 0x80	; 128
    3984:	0e 94 e5 24 	call	0x49ca	; 0x49ca <atoi>
    3988:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    398a:	c8 01       	movw	r24, r16
    398c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <get_decimal>
    3990:	6b 01       	movw	r12, r22
    3992:	7c 01       	movw	r14, r24
	return intVal+deci;
    3994:	be 01       	movw	r22, r28
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__floatunsisf>
    399e:	9b 01       	movw	r18, r22
    39a0:	ac 01       	movw	r20, r24
    39a2:	c7 01       	movw	r24, r14
    39a4:	b6 01       	movw	r22, r12
    39a6:	0e 94 44 24 	call	0x4888	; 0x4888 <__addsf3>
	
	
}
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	ff 90       	pop	r15
    39b4:	ef 90       	pop	r14
    39b6:	df 90       	pop	r13
    39b8:	cf 90       	pop	r12
    39ba:	08 95       	ret

Disassembly of section .text.is_float:

00003636 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    3636:	ef 92       	push	r14
    3638:	ff 92       	push	r15
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    3644:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    3646:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    3648:	0d c0       	rjmp	.+26     	; 0x3664 <is_float+0x2e>
	{
		if(str[i]=='.'){
    364a:	ce 0d       	add	r28, r14
    364c:	df 1d       	adc	r29, r15
    364e:	88 81       	ld	r24, Y
    3650:	8e 32       	cpi	r24, 0x2E	; 46
    3652:	21 f4       	brne	.+8      	; 0x365c <is_float+0x26>
			if (got_dot)
    3654:	01 11       	cpse	r16, r1
    3656:	11 c0       	rjmp	.+34     	; 0x367a <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    3658:	01 e0       	ldi	r16, 0x01	; 1
    365a:	03 c0       	rjmp	.+6      	; 0x3662 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    365c:	80 53       	subi	r24, 0x30	; 48
    365e:	8a 30       	cpi	r24, 0x0A	; 10
    3660:	70 f4       	brcc	.+28     	; 0x367e <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    3662:	1f 5f       	subi	r17, 0xFF	; 255
    3664:	c1 2f       	mov	r28, r17
    3666:	d0 e0       	ldi	r29, 0x00	; 0
    3668:	b7 01       	movw	r22, r14
    366a:	80 e8       	ldi	r24, 0x80	; 128
    366c:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strlen>
    3670:	c8 17       	cp	r28, r24
    3672:	d9 07       	cpc	r29, r25
    3674:	50 f3       	brcs	.-44     	; 0x364a <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	03 c0       	rjmp	.+6      	; 0x3680 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	01 c0       	rjmp	.+2      	; 0x3680 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    367e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    3680:	df 91       	pop	r29
    3682:	cf 91       	pop	r28
    3684:	1f 91       	pop	r17
    3686:	0f 91       	pop	r16
    3688:	ff 90       	pop	r15
    368a:	ef 90       	pop	r14
    368c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004886 <__subsf3>:
    4886:	50 58       	subi	r21, 0x80	; 128

00004888 <__addsf3>:
    4888:	bb 27       	eor	r27, r27
    488a:	aa 27       	eor	r26, r26
    488c:	0e 94 02 13 	call	0x2604	; 0x2604 <__addsf3x>
    4890:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002604 <__addsf3x>:
    2604:	11 c0       	rjmp	.+34     	; 0x2628 <__addsf3x+0x24>
    2606:	0e 94 4a 24 	call	0x4894	; 0x4894 <__fp_pscA>
    260a:	38 f0       	brcs	.+14     	; 0x261a <__addsf3x+0x16>
    260c:	0e 94 51 24 	call	0x48a2	; 0x48a2 <__fp_pscB>
    2610:	20 f0       	brcs	.+8      	; 0x261a <__addsf3x+0x16>
    2612:	39 f4       	brne	.+14     	; 0x2622 <__addsf3x+0x1e>
    2614:	9f 3f       	cpi	r25, 0xFF	; 255
    2616:	19 f4       	brne	.+6      	; 0x261e <__addsf3x+0x1a>
    2618:	26 f4       	brtc	.+8      	; 0x2622 <__addsf3x+0x1e>
    261a:	0c 94 f5 24 	jmp	0x49ea	; 0x49ea <__fp_nan>
    261e:	0e f4       	brtc	.+2      	; 0x2622 <__addsf3x+0x1e>
    2620:	e0 95       	com	r30
    2622:	e7 fb       	bst	r30, 7
    2624:	0c 94 9e 24 	jmp	0x493c	; 0x493c <__fp_inf>
    2628:	e9 2f       	mov	r30, r25
    262a:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__fp_split3>
    262e:	58 f3       	brcs	.-42     	; 0x2606 <__addsf3x+0x2>
    2630:	ba 17       	cp	r27, r26
    2632:	62 07       	cpc	r22, r18
    2634:	73 07       	cpc	r23, r19
    2636:	84 07       	cpc	r24, r20
    2638:	95 07       	cpc	r25, r21
    263a:	20 f0       	brcs	.+8      	; 0x2644 <__addsf3x+0x40>
    263c:	79 f4       	brne	.+30     	; 0x265c <__addsf3x+0x58>
    263e:	a6 f5       	brtc	.+104    	; 0x26a8 <__addsf3x+0xa4>
    2640:	0c 94 58 24 	jmp	0x48b0	; 0x48b0 <__fp_zero>
    2644:	0e f4       	brtc	.+2      	; 0x2648 <__addsf3x+0x44>
    2646:	e0 95       	com	r30
    2648:	0b 2e       	mov	r0, r27
    264a:	ba 2f       	mov	r27, r26
    264c:	a0 2d       	mov	r26, r0
    264e:	0b 01       	movw	r0, r22
    2650:	b9 01       	movw	r22, r18
    2652:	90 01       	movw	r18, r0
    2654:	0c 01       	movw	r0, r24
    2656:	ca 01       	movw	r24, r20
    2658:	a0 01       	movw	r20, r0
    265a:	11 24       	eor	r1, r1
    265c:	ff 27       	eor	r31, r31
    265e:	59 1b       	sub	r21, r25
    2660:	99 f0       	breq	.+38     	; 0x2688 <__addsf3x+0x84>
    2662:	59 3f       	cpi	r21, 0xF9	; 249
    2664:	50 f4       	brcc	.+20     	; 0x267a <__addsf3x+0x76>
    2666:	50 3e       	cpi	r21, 0xE0	; 224
    2668:	68 f1       	brcs	.+90     	; 0x26c4 <__addsf3x+0xc0>
    266a:	1a 16       	cp	r1, r26
    266c:	f0 40       	sbci	r31, 0x00	; 0
    266e:	a2 2f       	mov	r26, r18
    2670:	23 2f       	mov	r18, r19
    2672:	34 2f       	mov	r19, r20
    2674:	44 27       	eor	r20, r20
    2676:	58 5f       	subi	r21, 0xF8	; 248
    2678:	f3 cf       	rjmp	.-26     	; 0x2660 <__addsf3x+0x5c>
    267a:	46 95       	lsr	r20
    267c:	37 95       	ror	r19
    267e:	27 95       	ror	r18
    2680:	a7 95       	ror	r26
    2682:	f0 40       	sbci	r31, 0x00	; 0
    2684:	53 95       	inc	r21
    2686:	c9 f7       	brne	.-14     	; 0x267a <__addsf3x+0x76>
    2688:	7e f4       	brtc	.+30     	; 0x26a8 <__addsf3x+0xa4>
    268a:	1f 16       	cp	r1, r31
    268c:	ba 0b       	sbc	r27, r26
    268e:	62 0b       	sbc	r22, r18
    2690:	73 0b       	sbc	r23, r19
    2692:	84 0b       	sbc	r24, r20
    2694:	ba f0       	brmi	.+46     	; 0x26c4 <__addsf3x+0xc0>
    2696:	91 50       	subi	r25, 0x01	; 1
    2698:	a1 f0       	breq	.+40     	; 0x26c2 <__addsf3x+0xbe>
    269a:	ff 0f       	add	r31, r31
    269c:	bb 1f       	adc	r27, r27
    269e:	66 1f       	adc	r22, r22
    26a0:	77 1f       	adc	r23, r23
    26a2:	88 1f       	adc	r24, r24
    26a4:	c2 f7       	brpl	.-16     	; 0x2696 <__addsf3x+0x92>
    26a6:	0e c0       	rjmp	.+28     	; 0x26c4 <__addsf3x+0xc0>
    26a8:	ba 0f       	add	r27, r26
    26aa:	62 1f       	adc	r22, r18
    26ac:	73 1f       	adc	r23, r19
    26ae:	84 1f       	adc	r24, r20
    26b0:	48 f4       	brcc	.+18     	; 0x26c4 <__addsf3x+0xc0>
    26b2:	87 95       	ror	r24
    26b4:	77 95       	ror	r23
    26b6:	67 95       	ror	r22
    26b8:	b7 95       	ror	r27
    26ba:	f7 95       	ror	r31
    26bc:	9e 3f       	cpi	r25, 0xFE	; 254
    26be:	08 f0       	brcs	.+2      	; 0x26c2 <__addsf3x+0xbe>
    26c0:	b0 cf       	rjmp	.-160    	; 0x2622 <__addsf3x+0x1e>
    26c2:	93 95       	inc	r25
    26c4:	88 0f       	add	r24, r24
    26c6:	08 f0       	brcs	.+2      	; 0x26ca <__addsf3x+0xc6>
    26c8:	99 27       	eor	r25, r25
    26ca:	ee 0f       	add	r30, r30
    26cc:	97 95       	ror	r25
    26ce:	87 95       	ror	r24
    26d0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000497e <__cmpsf2>:
    497e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__fp_cmp>
    4982:	08 f4       	brcc	.+2      	; 0x4986 <__cmpsf2+0x8>
    4984:	81 e0       	ldi	r24, 0x01	; 1
    4986:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000049ba <__divsf3>:
    49ba:	0e 94 29 12 	call	0x2452	; 0x2452 <__divsf3x>
    49be:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002452 <__divsf3x>:
    2452:	10 c0       	rjmp	.+32     	; 0x2474 <__divsf3x+0x22>
    2454:	0e 94 51 24 	call	0x48a2	; 0x48a2 <__fp_pscB>
    2458:	58 f0       	brcs	.+22     	; 0x2470 <__divsf3x+0x1e>
    245a:	0e 94 4a 24 	call	0x4894	; 0x4894 <__fp_pscA>
    245e:	40 f0       	brcs	.+16     	; 0x2470 <__divsf3x+0x1e>
    2460:	29 f4       	brne	.+10     	; 0x246c <__divsf3x+0x1a>
    2462:	5f 3f       	cpi	r21, 0xFF	; 255
    2464:	29 f0       	breq	.+10     	; 0x2470 <__divsf3x+0x1e>
    2466:	0c 94 9e 24 	jmp	0x493c	; 0x493c <__fp_inf>
    246a:	51 11       	cpse	r21, r1
    246c:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__fp_szero>
    2470:	0c 94 f5 24 	jmp	0x49ea	; 0x49ea <__fp_nan>
    2474:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__fp_split3>
    2478:	68 f3       	brcs	.-38     	; 0x2454 <__divsf3x+0x2>

0000247a <__divsf3_pse>:
    247a:	99 23       	and	r25, r25
    247c:	b1 f3       	breq	.-20     	; 0x246a <__divsf3x+0x18>
    247e:	55 23       	and	r21, r21
    2480:	91 f3       	breq	.-28     	; 0x2466 <__divsf3x+0x14>
    2482:	95 1b       	sub	r25, r21
    2484:	55 0b       	sbc	r21, r21
    2486:	bb 27       	eor	r27, r27
    2488:	aa 27       	eor	r26, r26
    248a:	62 17       	cp	r22, r18
    248c:	73 07       	cpc	r23, r19
    248e:	84 07       	cpc	r24, r20
    2490:	38 f0       	brcs	.+14     	; 0x24a0 <__divsf3_pse+0x26>
    2492:	9f 5f       	subi	r25, 0xFF	; 255
    2494:	5f 4f       	sbci	r21, 0xFF	; 255
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	44 1f       	adc	r20, r20
    249c:	aa 1f       	adc	r26, r26
    249e:	a9 f3       	breq	.-22     	; 0x248a <__divsf3_pse+0x10>
    24a0:	35 d0       	rcall	.+106    	; 0x250c <__divsf3_pse+0x92>
    24a2:	0e 2e       	mov	r0, r30
    24a4:	3a f0       	brmi	.+14     	; 0x24b4 <__divsf3_pse+0x3a>
    24a6:	e0 e8       	ldi	r30, 0x80	; 128
    24a8:	32 d0       	rcall	.+100    	; 0x250e <__divsf3_pse+0x94>
    24aa:	91 50       	subi	r25, 0x01	; 1
    24ac:	50 40       	sbci	r21, 0x00	; 0
    24ae:	e6 95       	lsr	r30
    24b0:	00 1c       	adc	r0, r0
    24b2:	ca f7       	brpl	.-14     	; 0x24a6 <__divsf3_pse+0x2c>
    24b4:	2b d0       	rcall	.+86     	; 0x250c <__divsf3_pse+0x92>
    24b6:	fe 2f       	mov	r31, r30
    24b8:	29 d0       	rcall	.+82     	; 0x250c <__divsf3_pse+0x92>
    24ba:	66 0f       	add	r22, r22
    24bc:	77 1f       	adc	r23, r23
    24be:	88 1f       	adc	r24, r24
    24c0:	bb 1f       	adc	r27, r27
    24c2:	26 17       	cp	r18, r22
    24c4:	37 07       	cpc	r19, r23
    24c6:	48 07       	cpc	r20, r24
    24c8:	ab 07       	cpc	r26, r27
    24ca:	b0 e8       	ldi	r27, 0x80	; 128
    24cc:	09 f0       	breq	.+2      	; 0x24d0 <__divsf3_pse+0x56>
    24ce:	bb 0b       	sbc	r27, r27
    24d0:	80 2d       	mov	r24, r0
    24d2:	bf 01       	movw	r22, r30
    24d4:	ff 27       	eor	r31, r31
    24d6:	93 58       	subi	r25, 0x83	; 131
    24d8:	5f 4f       	sbci	r21, 0xFF	; 255
    24da:	3a f0       	brmi	.+14     	; 0x24ea <__divsf3_pse+0x70>
    24dc:	9e 3f       	cpi	r25, 0xFE	; 254
    24de:	51 05       	cpc	r21, r1
    24e0:	78 f0       	brcs	.+30     	; 0x2500 <__divsf3_pse+0x86>
    24e2:	0c 94 9e 24 	jmp	0x493c	; 0x493c <__fp_inf>
    24e6:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__fp_szero>
    24ea:	5f 3f       	cpi	r21, 0xFF	; 255
    24ec:	e4 f3       	brlt	.-8      	; 0x24e6 <__divsf3_pse+0x6c>
    24ee:	98 3e       	cpi	r25, 0xE8	; 232
    24f0:	d4 f3       	brlt	.-12     	; 0x24e6 <__divsf3_pse+0x6c>
    24f2:	86 95       	lsr	r24
    24f4:	77 95       	ror	r23
    24f6:	67 95       	ror	r22
    24f8:	b7 95       	ror	r27
    24fa:	f7 95       	ror	r31
    24fc:	9f 5f       	subi	r25, 0xFF	; 255
    24fe:	c9 f7       	brne	.-14     	; 0x24f2 <__divsf3_pse+0x78>
    2500:	88 0f       	add	r24, r24
    2502:	91 1d       	adc	r25, r1
    2504:	96 95       	lsr	r25
    2506:	87 95       	ror	r24
    2508:	97 f9       	bld	r25, 7
    250a:	08 95       	ret
    250c:	e1 e0       	ldi	r30, 0x01	; 1
    250e:	66 0f       	add	r22, r22
    2510:	77 1f       	adc	r23, r23
    2512:	88 1f       	adc	r24, r24
    2514:	bb 1f       	adc	r27, r27
    2516:	62 17       	cp	r22, r18
    2518:	73 07       	cpc	r23, r19
    251a:	84 07       	cpc	r24, r20
    251c:	ba 07       	cpc	r27, r26
    251e:	20 f0       	brcs	.+8      	; 0x2528 <__divsf3_pse+0xae>
    2520:	62 1b       	sub	r22, r18
    2522:	73 0b       	sbc	r23, r19
    2524:	84 0b       	sbc	r24, r20
    2526:	ba 0b       	sbc	r27, r26
    2528:	ee 1f       	adc	r30, r30
    252a:	88 f7       	brcc	.-30     	; 0x250e <__divsf3_pse+0x94>
    252c:	e0 95       	com	r30
    252e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000357e <__fixunssfsi>:
    357e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__fp_splitA>
    3582:	88 f0       	brcs	.+34     	; 0x35a6 <__fixunssfsi+0x28>
    3584:	9f 57       	subi	r25, 0x7F	; 127
    3586:	98 f0       	brcs	.+38     	; 0x35ae <__fixunssfsi+0x30>
    3588:	b9 2f       	mov	r27, r25
    358a:	99 27       	eor	r25, r25
    358c:	b7 51       	subi	r27, 0x17	; 23
    358e:	b0 f0       	brcs	.+44     	; 0x35bc <__fixunssfsi+0x3e>
    3590:	e1 f0       	breq	.+56     	; 0x35ca <__fixunssfsi+0x4c>
    3592:	66 0f       	add	r22, r22
    3594:	77 1f       	adc	r23, r23
    3596:	88 1f       	adc	r24, r24
    3598:	99 1f       	adc	r25, r25
    359a:	1a f0       	brmi	.+6      	; 0x35a2 <__fixunssfsi+0x24>
    359c:	ba 95       	dec	r27
    359e:	c9 f7       	brne	.-14     	; 0x3592 <__fixunssfsi+0x14>
    35a0:	14 c0       	rjmp	.+40     	; 0x35ca <__fixunssfsi+0x4c>
    35a2:	b1 30       	cpi	r27, 0x01	; 1
    35a4:	91 f0       	breq	.+36     	; 0x35ca <__fixunssfsi+0x4c>
    35a6:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__fp_zero>
    35aa:	b1 e0       	ldi	r27, 0x01	; 1
    35ac:	08 95       	ret
    35ae:	0c 94 58 24 	jmp	0x48b0	; 0x48b0 <__fp_zero>
    35b2:	67 2f       	mov	r22, r23
    35b4:	78 2f       	mov	r23, r24
    35b6:	88 27       	eor	r24, r24
    35b8:	b8 5f       	subi	r27, 0xF8	; 248
    35ba:	39 f0       	breq	.+14     	; 0x35ca <__fixunssfsi+0x4c>
    35bc:	b9 3f       	cpi	r27, 0xF9	; 249
    35be:	cc f3       	brlt	.-14     	; 0x35b2 <__fixunssfsi+0x34>
    35c0:	86 95       	lsr	r24
    35c2:	77 95       	ror	r23
    35c4:	67 95       	ror	r22
    35c6:	b3 95       	inc	r27
    35c8:	d9 f7       	brne	.-10     	; 0x35c0 <__fixunssfsi+0x42>
    35ca:	3e f4       	brtc	.+14     	; 0x35da <__fixunssfsi+0x5c>
    35cc:	90 95       	com	r25
    35ce:	80 95       	com	r24
    35d0:	70 95       	com	r23
    35d2:	61 95       	neg	r22
    35d4:	7f 4f       	sbci	r23, 0xFF	; 255
    35d6:	8f 4f       	sbci	r24, 0xFF	; 255
    35d8:	9f 4f       	sbci	r25, 0xFF	; 255
    35da:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002e6e <__floatunsisf>:
    2e6e:	e8 94       	clt
    2e70:	09 c0       	rjmp	.+18     	; 0x2e84 <__floatsisf+0x12>

00002e72 <__floatsisf>:
    2e72:	97 fb       	bst	r25, 7
    2e74:	3e f4       	brtc	.+14     	; 0x2e84 <__floatsisf+0x12>
    2e76:	90 95       	com	r25
    2e78:	80 95       	com	r24
    2e7a:	70 95       	com	r23
    2e7c:	61 95       	neg	r22
    2e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e80:	8f 4f       	sbci	r24, 0xFF	; 255
    2e82:	9f 4f       	sbci	r25, 0xFF	; 255
    2e84:	99 23       	and	r25, r25
    2e86:	a9 f0       	breq	.+42     	; 0x2eb2 <__floatsisf+0x40>
    2e88:	f9 2f       	mov	r31, r25
    2e8a:	96 e9       	ldi	r25, 0x96	; 150
    2e8c:	bb 27       	eor	r27, r27
    2e8e:	93 95       	inc	r25
    2e90:	f6 95       	lsr	r31
    2e92:	87 95       	ror	r24
    2e94:	77 95       	ror	r23
    2e96:	67 95       	ror	r22
    2e98:	b7 95       	ror	r27
    2e9a:	f1 11       	cpse	r31, r1
    2e9c:	f8 cf       	rjmp	.-16     	; 0x2e8e <__floatsisf+0x1c>
    2e9e:	fa f4       	brpl	.+62     	; 0x2ede <__floatsisf+0x6c>
    2ea0:	bb 0f       	add	r27, r27
    2ea2:	11 f4       	brne	.+4      	; 0x2ea8 <__floatsisf+0x36>
    2ea4:	60 ff       	sbrs	r22, 0
    2ea6:	1b c0       	rjmp	.+54     	; 0x2ede <__floatsisf+0x6c>
    2ea8:	6f 5f       	subi	r22, 0xFF	; 255
    2eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    2eac:	8f 4f       	sbci	r24, 0xFF	; 255
    2eae:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb0:	16 c0       	rjmp	.+44     	; 0x2ede <__floatsisf+0x6c>
    2eb2:	88 23       	and	r24, r24
    2eb4:	11 f0       	breq	.+4      	; 0x2eba <__floatsisf+0x48>
    2eb6:	96 e9       	ldi	r25, 0x96	; 150
    2eb8:	11 c0       	rjmp	.+34     	; 0x2edc <__floatsisf+0x6a>
    2eba:	77 23       	and	r23, r23
    2ebc:	21 f0       	breq	.+8      	; 0x2ec6 <__floatsisf+0x54>
    2ebe:	9e e8       	ldi	r25, 0x8E	; 142
    2ec0:	87 2f       	mov	r24, r23
    2ec2:	76 2f       	mov	r23, r22
    2ec4:	05 c0       	rjmp	.+10     	; 0x2ed0 <__floatsisf+0x5e>
    2ec6:	66 23       	and	r22, r22
    2ec8:	71 f0       	breq	.+28     	; 0x2ee6 <__floatsisf+0x74>
    2eca:	96 e8       	ldi	r25, 0x86	; 134
    2ecc:	86 2f       	mov	r24, r22
    2ece:	70 e0       	ldi	r23, 0x00	; 0
    2ed0:	60 e0       	ldi	r22, 0x00	; 0
    2ed2:	2a f0       	brmi	.+10     	; 0x2ede <__floatsisf+0x6c>
    2ed4:	9a 95       	dec	r25
    2ed6:	66 0f       	add	r22, r22
    2ed8:	77 1f       	adc	r23, r23
    2eda:	88 1f       	adc	r24, r24
    2edc:	da f7       	brpl	.-10     	; 0x2ed4 <__floatsisf+0x62>
    2ede:	88 0f       	add	r24, r24
    2ee0:	96 95       	lsr	r25
    2ee2:	87 95       	ror	r24
    2ee4:	97 f9       	bld	r25, 7
    2ee6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003c60 <__fp_cmp>:
    3c60:	99 0f       	add	r25, r25
    3c62:	00 08       	sbc	r0, r0
    3c64:	55 0f       	add	r21, r21
    3c66:	aa 0b       	sbc	r26, r26
    3c68:	e0 e8       	ldi	r30, 0x80	; 128
    3c6a:	fe ef       	ldi	r31, 0xFE	; 254
    3c6c:	16 16       	cp	r1, r22
    3c6e:	17 06       	cpc	r1, r23
    3c70:	e8 07       	cpc	r30, r24
    3c72:	f9 07       	cpc	r31, r25
    3c74:	c0 f0       	brcs	.+48     	; 0x3ca6 <__fp_cmp+0x46>
    3c76:	12 16       	cp	r1, r18
    3c78:	13 06       	cpc	r1, r19
    3c7a:	e4 07       	cpc	r30, r20
    3c7c:	f5 07       	cpc	r31, r21
    3c7e:	98 f0       	brcs	.+38     	; 0x3ca6 <__fp_cmp+0x46>
    3c80:	62 1b       	sub	r22, r18
    3c82:	73 0b       	sbc	r23, r19
    3c84:	84 0b       	sbc	r24, r20
    3c86:	95 0b       	sbc	r25, r21
    3c88:	39 f4       	brne	.+14     	; 0x3c98 <__fp_cmp+0x38>
    3c8a:	0a 26       	eor	r0, r26
    3c8c:	61 f0       	breq	.+24     	; 0x3ca6 <__fp_cmp+0x46>
    3c8e:	23 2b       	or	r18, r19
    3c90:	24 2b       	or	r18, r20
    3c92:	25 2b       	or	r18, r21
    3c94:	21 f4       	brne	.+8      	; 0x3c9e <__fp_cmp+0x3e>
    3c96:	08 95       	ret
    3c98:	0a 26       	eor	r0, r26
    3c9a:	09 f4       	brne	.+2      	; 0x3c9e <__fp_cmp+0x3e>
    3c9c:	a1 40       	sbci	r26, 0x01	; 1
    3c9e:	a6 95       	lsr	r26
    3ca0:	8f ef       	ldi	r24, 0xFF	; 255
    3ca2:	81 1d       	adc	r24, r1
    3ca4:	81 1d       	adc	r24, r1
    3ca6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000493c <__fp_inf>:
    493c:	97 f9       	bld	r25, 7
    493e:	9f 67       	ori	r25, 0x7F	; 127
    4940:	80 e8       	ldi	r24, 0x80	; 128
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	60 e0       	ldi	r22, 0x00	; 0
    4946:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000049ea <__fp_nan>:
    49ea:	9f ef       	ldi	r25, 0xFF	; 255
    49ec:	80 ec       	ldi	r24, 0xC0	; 192
    49ee:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004894 <__fp_pscA>:
    4894:	00 24       	eor	r0, r0
    4896:	0a 94       	dec	r0
    4898:	16 16       	cp	r1, r22
    489a:	17 06       	cpc	r1, r23
    489c:	18 06       	cpc	r1, r24
    489e:	09 06       	cpc	r0, r25
    48a0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000048a2 <__fp_pscB>:
    48a2:	00 24       	eor	r0, r0
    48a4:	0a 94       	dec	r0
    48a6:	12 16       	cp	r1, r18
    48a8:	13 06       	cpc	r1, r19
    48aa:	14 06       	cpc	r1, r20
    48ac:	05 06       	cpc	r0, r21
    48ae:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004500 <__fp_round>:
    4500:	09 2e       	mov	r0, r25
    4502:	03 94       	inc	r0
    4504:	00 0c       	add	r0, r0
    4506:	11 f4       	brne	.+4      	; 0x450c <__fp_round+0xc>
    4508:	88 23       	and	r24, r24
    450a:	52 f0       	brmi	.+20     	; 0x4520 <__fp_round+0x20>
    450c:	bb 0f       	add	r27, r27
    450e:	40 f4       	brcc	.+16     	; 0x4520 <__fp_round+0x20>
    4510:	bf 2b       	or	r27, r31
    4512:	11 f4       	brne	.+4      	; 0x4518 <__fp_round+0x18>
    4514:	60 ff       	sbrs	r22, 0
    4516:	04 c0       	rjmp	.+8      	; 0x4520 <__fp_round+0x20>
    4518:	6f 5f       	subi	r22, 0xFF	; 255
    451a:	7f 4f       	sbci	r23, 0xFF	; 255
    451c:	8f 4f       	sbci	r24, 0xFF	; 255
    451e:	9f 4f       	sbci	r25, 0xFF	; 255
    4520:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003d7a <__fp_split3>:
    3d7a:	57 fd       	sbrc	r21, 7
    3d7c:	90 58       	subi	r25, 0x80	; 128
    3d7e:	44 0f       	add	r20, r20
    3d80:	55 1f       	adc	r21, r21
    3d82:	59 f0       	breq	.+22     	; 0x3d9a <__fp_splitA+0x10>
    3d84:	5f 3f       	cpi	r21, 0xFF	; 255
    3d86:	71 f0       	breq	.+28     	; 0x3da4 <__fp_splitA+0x1a>
    3d88:	47 95       	ror	r20

00003d8a <__fp_splitA>:
    3d8a:	88 0f       	add	r24, r24
    3d8c:	97 fb       	bst	r25, 7
    3d8e:	99 1f       	adc	r25, r25
    3d90:	61 f0       	breq	.+24     	; 0x3daa <__fp_splitA+0x20>
    3d92:	9f 3f       	cpi	r25, 0xFF	; 255
    3d94:	79 f0       	breq	.+30     	; 0x3db4 <__fp_splitA+0x2a>
    3d96:	87 95       	ror	r24
    3d98:	08 95       	ret
    3d9a:	12 16       	cp	r1, r18
    3d9c:	13 06       	cpc	r1, r19
    3d9e:	14 06       	cpc	r1, r20
    3da0:	55 1f       	adc	r21, r21
    3da2:	f2 cf       	rjmp	.-28     	; 0x3d88 <__fp_split3+0xe>
    3da4:	46 95       	lsr	r20
    3da6:	f1 df       	rcall	.-30     	; 0x3d8a <__fp_splitA>
    3da8:	08 c0       	rjmp	.+16     	; 0x3dba <__fp_splitA+0x30>
    3daa:	16 16       	cp	r1, r22
    3dac:	17 06       	cpc	r1, r23
    3dae:	18 06       	cpc	r1, r24
    3db0:	99 1f       	adc	r25, r25
    3db2:	f1 cf       	rjmp	.-30     	; 0x3d96 <__fp_splitA+0xc>
    3db4:	86 95       	lsr	r24
    3db6:	71 05       	cpc	r23, r1
    3db8:	61 05       	cpc	r22, r1
    3dba:	08 94       	sec
    3dbc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000048b0 <__fp_zero>:
    48b0:	e8 94       	clt

000048b2 <__fp_szero>:
    48b2:	bb 27       	eor	r27, r27
    48b4:	66 27       	eor	r22, r22
    48b6:	77 27       	eor	r23, r23
    48b8:	cb 01       	movw	r24, r22
    48ba:	97 f9       	bld	r25, 7
    48bc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000049c2 <__mulsf3>:
    49c2:	0e 94 98 12 	call	0x2530	; 0x2530 <__mulsf3x>
    49c6:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002530 <__mulsf3x>:
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <__mulsf3x+0x20>
    2532:	0e 94 4a 24 	call	0x4894	; 0x4894 <__fp_pscA>
    2536:	38 f0       	brcs	.+14     	; 0x2546 <__mulsf3x+0x16>
    2538:	0e 94 51 24 	call	0x48a2	; 0x48a2 <__fp_pscB>
    253c:	20 f0       	brcs	.+8      	; 0x2546 <__mulsf3x+0x16>
    253e:	95 23       	and	r25, r21
    2540:	11 f0       	breq	.+4      	; 0x2546 <__mulsf3x+0x16>
    2542:	0c 94 9e 24 	jmp	0x493c	; 0x493c <__fp_inf>
    2546:	0c 94 f5 24 	jmp	0x49ea	; 0x49ea <__fp_nan>
    254a:	11 24       	eor	r1, r1
    254c:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__fp_szero>
    2550:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__fp_split3>
    2554:	70 f3       	brcs	.-36     	; 0x2532 <__mulsf3x+0x2>

00002556 <__mulsf3_pse>:
    2556:	95 9f       	mul	r25, r21
    2558:	c1 f3       	breq	.-16     	; 0x254a <__mulsf3x+0x1a>
    255a:	95 0f       	add	r25, r21
    255c:	50 e0       	ldi	r21, 0x00	; 0
    255e:	55 1f       	adc	r21, r21
    2560:	62 9f       	mul	r22, r18
    2562:	f0 01       	movw	r30, r0
    2564:	72 9f       	mul	r23, r18
    2566:	bb 27       	eor	r27, r27
    2568:	f0 0d       	add	r31, r0
    256a:	b1 1d       	adc	r27, r1
    256c:	63 9f       	mul	r22, r19
    256e:	aa 27       	eor	r26, r26
    2570:	f0 0d       	add	r31, r0
    2572:	b1 1d       	adc	r27, r1
    2574:	aa 1f       	adc	r26, r26
    2576:	64 9f       	mul	r22, r20
    2578:	66 27       	eor	r22, r22
    257a:	b0 0d       	add	r27, r0
    257c:	a1 1d       	adc	r26, r1
    257e:	66 1f       	adc	r22, r22
    2580:	82 9f       	mul	r24, r18
    2582:	22 27       	eor	r18, r18
    2584:	b0 0d       	add	r27, r0
    2586:	a1 1d       	adc	r26, r1
    2588:	62 1f       	adc	r22, r18
    258a:	73 9f       	mul	r23, r19
    258c:	b0 0d       	add	r27, r0
    258e:	a1 1d       	adc	r26, r1
    2590:	62 1f       	adc	r22, r18
    2592:	83 9f       	mul	r24, r19
    2594:	a0 0d       	add	r26, r0
    2596:	61 1d       	adc	r22, r1
    2598:	22 1f       	adc	r18, r18
    259a:	74 9f       	mul	r23, r20
    259c:	33 27       	eor	r19, r19
    259e:	a0 0d       	add	r26, r0
    25a0:	61 1d       	adc	r22, r1
    25a2:	23 1f       	adc	r18, r19
    25a4:	84 9f       	mul	r24, r20
    25a6:	60 0d       	add	r22, r0
    25a8:	21 1d       	adc	r18, r1
    25aa:	82 2f       	mov	r24, r18
    25ac:	76 2f       	mov	r23, r22
    25ae:	6a 2f       	mov	r22, r26
    25b0:	11 24       	eor	r1, r1
    25b2:	9f 57       	subi	r25, 0x7F	; 127
    25b4:	50 40       	sbci	r21, 0x00	; 0
    25b6:	9a f0       	brmi	.+38     	; 0x25de <__mulsf3_pse+0x88>
    25b8:	f1 f0       	breq	.+60     	; 0x25f6 <__mulsf3_pse+0xa0>
    25ba:	88 23       	and	r24, r24
    25bc:	4a f0       	brmi	.+18     	; 0x25d0 <__mulsf3_pse+0x7a>
    25be:	ee 0f       	add	r30, r30
    25c0:	ff 1f       	adc	r31, r31
    25c2:	bb 1f       	adc	r27, r27
    25c4:	66 1f       	adc	r22, r22
    25c6:	77 1f       	adc	r23, r23
    25c8:	88 1f       	adc	r24, r24
    25ca:	91 50       	subi	r25, 0x01	; 1
    25cc:	50 40       	sbci	r21, 0x00	; 0
    25ce:	a9 f7       	brne	.-22     	; 0x25ba <__mulsf3_pse+0x64>
    25d0:	9e 3f       	cpi	r25, 0xFE	; 254
    25d2:	51 05       	cpc	r21, r1
    25d4:	80 f0       	brcs	.+32     	; 0x25f6 <__mulsf3_pse+0xa0>
    25d6:	0c 94 9e 24 	jmp	0x493c	; 0x493c <__fp_inf>
    25da:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__fp_szero>
    25de:	5f 3f       	cpi	r21, 0xFF	; 255
    25e0:	e4 f3       	brlt	.-8      	; 0x25da <__mulsf3_pse+0x84>
    25e2:	98 3e       	cpi	r25, 0xE8	; 232
    25e4:	d4 f3       	brlt	.-12     	; 0x25da <__mulsf3_pse+0x84>
    25e6:	86 95       	lsr	r24
    25e8:	77 95       	ror	r23
    25ea:	67 95       	ror	r22
    25ec:	b7 95       	ror	r27
    25ee:	f7 95       	ror	r31
    25f0:	e7 95       	ror	r30
    25f2:	9f 5f       	subi	r25, 0xFF	; 255
    25f4:	c1 f7       	brne	.-16     	; 0x25e6 <__mulsf3_pse+0x90>
    25f6:	fe 2b       	or	r31, r30
    25f8:	88 0f       	add	r24, r24
    25fa:	91 1d       	adc	r25, r1
    25fc:	96 95       	lsr	r25
    25fe:	87 95       	ror	r24
    2600:	97 f9       	bld	r25, 7
    2602:	08 95       	ret

Disassembly of section .text.avrlibc:

000006c8 <vfprintf>:
 6c8:	a4 e1       	ldi	r26, 0x14	; 20
 6ca:	b0 e0       	ldi	r27, 0x00	; 0
 6cc:	ea e6       	ldi	r30, 0x6A	; 106
 6ce:	f3 e0       	ldi	r31, 0x03	; 3
 6d0:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <__prologue_saves__>
 6d4:	6c 01       	movw	r12, r24
 6d6:	1a 01       	movw	r2, r20
 6d8:	46 2e       	mov	r4, r22
 6da:	59 01       	movw	r10, r18
 6dc:	fc 01       	movw	r30, r24
 6de:	10 86       	std	Z+8, r1	; 0x08
 6e0:	17 82       	std	Z+7, r1	; 0x07
 6e2:	84 81       	ldd	r24, Z+4	; 0x04
 6e4:	81 ff       	sbrs	r24, 1
 6e6:	62 c3       	rjmp	.+1732   	; 0xdac <__EEPROM_REGION_LENGTH__+0x5ac>
 6e8:	ce 01       	movw	r24, r28
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	9d 87       	std	Y+13, r25	; 0x0d
 6ee:	8c 87       	std	Y+12, r24	; 0x0c
 6f0:	a0 e8       	ldi	r26, 0x80	; 128
 6f2:	8a 8b       	std	Y+18, r24	; 0x12
 6f4:	9b 8b       	std	Y+19, r25	; 0x13
 6f6:	ac 8b       	std	Y+20, r26	; 0x14
 6f8:	f1 01       	movw	r30, r2
 6fa:	84 91       	lpm	r24, Z
 6fc:	47 fc       	sbrc	r4, 7
 6fe:	80 81       	ld	r24, Z
 700:	88 23       	and	r24, r24
 702:	09 f4       	brne	.+2      	; 0x706 <vfprintf+0x3e>
 704:	4f c3       	rjmp	.+1694   	; 0xda4 <__EEPROM_REGION_LENGTH__+0x5a4>
 706:	44 2d       	mov	r20, r4
 708:	91 01       	movw	r18, r2
 70a:	2f 5f       	subi	r18, 0xFF	; 255
 70c:	3f 4f       	sbci	r19, 0xFF	; 255
 70e:	4f 4f       	sbci	r20, 0xFF	; 255
 710:	85 32       	cpi	r24, 0x25	; 37
 712:	19 f0       	breq	.+6      	; 0x71a <vfprintf+0x52>
 714:	19 01       	movw	r2, r18
 716:	44 2e       	mov	r4, r20
 718:	0a c0       	rjmp	.+20     	; 0x72e <vfprintf+0x66>
 71a:	f9 01       	movw	r30, r18
 71c:	84 91       	lpm	r24, Z
 71e:	47 fd       	sbrc	r20, 7
 720:	80 81       	ld	r24, Z
 722:	92 e0       	ldi	r25, 0x02	; 2
 724:	29 0e       	add	r2, r25
 726:	31 1c       	adc	r3, r1
 728:	41 1c       	adc	r4, r1
 72a:	85 32       	cpi	r24, 0x25	; 37
 72c:	49 f4       	brne	.+18     	; 0x740 <vfprintf+0x78>
 72e:	b6 01       	movw	r22, r12
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 736:	bf 86       	std	Y+15, r11	; 0x0f
 738:	ae 86       	std	Y+14, r10	; 0x0e
 73a:	ae 84       	ldd	r10, Y+14	; 0x0e
 73c:	bf 84       	ldd	r11, Y+15	; 0x0f
 73e:	dc cf       	rjmp	.-72     	; 0x6f8 <vfprintf+0x30>
 740:	10 e0       	ldi	r17, 0x00	; 0
 742:	f1 2c       	mov	r15, r1
 744:	00 e0       	ldi	r16, 0x00	; 0
 746:	00 32       	cpi	r16, 0x20	; 32
 748:	a0 f4       	brcc	.+40     	; 0x772 <vfprintf+0xaa>
 74a:	8b 32       	cpi	r24, 0x2B	; 43
 74c:	69 f0       	breq	.+26     	; 0x768 <vfprintf+0xa0>
 74e:	30 f4       	brcc	.+12     	; 0x75c <vfprintf+0x94>
 750:	80 32       	cpi	r24, 0x20	; 32
 752:	59 f0       	breq	.+22     	; 0x76a <vfprintf+0xa2>
 754:	83 32       	cpi	r24, 0x23	; 35
 756:	69 f4       	brne	.+26     	; 0x772 <vfprintf+0xaa>
 758:	00 61       	ori	r16, 0x10	; 16
 75a:	2c c0       	rjmp	.+88     	; 0x7b4 <vfprintf+0xec>
 75c:	8d 32       	cpi	r24, 0x2D	; 45
 75e:	39 f0       	breq	.+14     	; 0x76e <vfprintf+0xa6>
 760:	80 33       	cpi	r24, 0x30	; 48
 762:	39 f4       	brne	.+14     	; 0x772 <vfprintf+0xaa>
 764:	01 60       	ori	r16, 0x01	; 1
 766:	26 c0       	rjmp	.+76     	; 0x7b4 <vfprintf+0xec>
 768:	02 60       	ori	r16, 0x02	; 2
 76a:	04 60       	ori	r16, 0x04	; 4
 76c:	23 c0       	rjmp	.+70     	; 0x7b4 <vfprintf+0xec>
 76e:	08 60       	ori	r16, 0x08	; 8
 770:	21 c0       	rjmp	.+66     	; 0x7b4 <vfprintf+0xec>
 772:	07 fd       	sbrc	r16, 7
 774:	29 c0       	rjmp	.+82     	; 0x7c8 <vfprintf+0x100>
 776:	90 ed       	ldi	r25, 0xD0	; 208
 778:	98 0f       	add	r25, r24
 77a:	9a 30       	cpi	r25, 0x0A	; 10
 77c:	78 f4       	brcc	.+30     	; 0x79c <vfprintf+0xd4>
 77e:	06 ff       	sbrs	r16, 6
 780:	06 c0       	rjmp	.+12     	; 0x78e <vfprintf+0xc6>
 782:	aa e0       	ldi	r26, 0x0A	; 10
 784:	1a 9f       	mul	r17, r26
 786:	90 0d       	add	r25, r0
 788:	11 24       	eor	r1, r1
 78a:	19 2f       	mov	r17, r25
 78c:	13 c0       	rjmp	.+38     	; 0x7b4 <vfprintf+0xec>
 78e:	ea e0       	ldi	r30, 0x0A	; 10
 790:	fe 9e       	mul	r15, r30
 792:	90 0d       	add	r25, r0
 794:	11 24       	eor	r1, r1
 796:	f9 2e       	mov	r15, r25
 798:	00 62       	ori	r16, 0x20	; 32
 79a:	0c c0       	rjmp	.+24     	; 0x7b4 <vfprintf+0xec>
 79c:	8e 32       	cpi	r24, 0x2E	; 46
 79e:	21 f4       	brne	.+8      	; 0x7a8 <vfprintf+0xe0>
 7a0:	06 fd       	sbrc	r16, 6
 7a2:	00 c3       	rjmp	.+1536   	; 0xda4 <__EEPROM_REGION_LENGTH__+0x5a4>
 7a4:	00 64       	ori	r16, 0x40	; 64
 7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <vfprintf+0xec>
 7a8:	8c 36       	cpi	r24, 0x6C	; 108
 7aa:	11 f4       	brne	.+4      	; 0x7b0 <vfprintf+0xe8>
 7ac:	00 68       	ori	r16, 0x80	; 128
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <vfprintf+0xec>
 7b0:	88 36       	cpi	r24, 0x68	; 104
 7b2:	51 f4       	brne	.+20     	; 0x7c8 <vfprintf+0x100>
 7b4:	f1 01       	movw	r30, r2
 7b6:	84 91       	lpm	r24, Z
 7b8:	47 fc       	sbrc	r4, 7
 7ba:	80 81       	ld	r24, Z
 7bc:	ff ef       	ldi	r31, 0xFF	; 255
 7be:	2f 1a       	sub	r2, r31
 7c0:	3f 0a       	sbc	r3, r31
 7c2:	4f 0a       	sbc	r4, r31
 7c4:	81 11       	cpse	r24, r1
 7c6:	bf cf       	rjmp	.-130    	; 0x746 <vfprintf+0x7e>
 7c8:	9b eb       	ldi	r25, 0xBB	; 187
 7ca:	98 0f       	add	r25, r24
 7cc:	93 30       	cpi	r25, 0x03	; 3
 7ce:	18 f4       	brcc	.+6      	; 0x7d6 <vfprintf+0x10e>
 7d0:	00 61       	ori	r16, 0x10	; 16
 7d2:	80 5e       	subi	r24, 0xE0	; 224
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <vfprintf+0x11a>
 7d6:	9b e9       	ldi	r25, 0x9B	; 155
 7d8:	98 0f       	add	r25, r24
 7da:	93 30       	cpi	r25, 0x03	; 3
 7dc:	08 f0       	brcs	.+2      	; 0x7e0 <vfprintf+0x118>
 7de:	66 c1       	rjmp	.+716    	; 0xaac <__EEPROM_REGION_LENGTH__+0x2ac>
 7e0:	0f 7e       	andi	r16, 0xEF	; 239
 7e2:	06 ff       	sbrs	r16, 6
 7e4:	16 e0       	ldi	r17, 0x06	; 6
 7e6:	0f 73       	andi	r16, 0x3F	; 63
 7e8:	70 2e       	mov	r7, r16
 7ea:	85 36       	cpi	r24, 0x65	; 101
 7ec:	21 f4       	brne	.+8      	; 0x7f6 <vfprintf+0x12e>
 7ee:	20 2f       	mov	r18, r16
 7f0:	20 64       	ori	r18, 0x40	; 64
 7f2:	72 2e       	mov	r7, r18
 7f4:	08 c0       	rjmp	.+16     	; 0x806 <__EEPROM_REGION_LENGTH__+0x6>
 7f6:	86 36       	cpi	r24, 0x66	; 102
 7f8:	21 f4       	brne	.+8      	; 0x802 <__EEPROM_REGION_LENGTH__+0x2>
 7fa:	80 2f       	mov	r24, r16
 7fc:	80 68       	ori	r24, 0x80	; 128
 7fe:	78 2e       	mov	r7, r24
 800:	02 c0       	rjmp	.+4      	; 0x806 <__EEPROM_REGION_LENGTH__+0x6>
 802:	11 11       	cpse	r17, r1
 804:	11 50       	subi	r17, 0x01	; 1
 806:	77 fe       	sbrs	r7, 7
 808:	07 c0       	rjmp	.+14     	; 0x818 <__EEPROM_REGION_LENGTH__+0x18>
 80a:	1c 33       	cpi	r17, 0x3C	; 60
 80c:	50 f4       	brcc	.+20     	; 0x822 <__EEPROM_REGION_LENGTH__+0x22>
 80e:	ee 24       	eor	r14, r14
 810:	e3 94       	inc	r14
 812:	e1 0e       	add	r14, r17
 814:	27 e0       	ldi	r18, 0x07	; 7
 816:	0b c0       	rjmp	.+22     	; 0x82e <__EEPROM_REGION_LENGTH__+0x2e>
 818:	18 30       	cpi	r17, 0x08	; 8
 81a:	38 f0       	brcs	.+14     	; 0x82a <__EEPROM_REGION_LENGTH__+0x2a>
 81c:	27 e0       	ldi	r18, 0x07	; 7
 81e:	17 e0       	ldi	r17, 0x07	; 7
 820:	05 c0       	rjmp	.+10     	; 0x82c <__EEPROM_REGION_LENGTH__+0x2c>
 822:	27 e0       	ldi	r18, 0x07	; 7
 824:	6c e3       	ldi	r22, 0x3C	; 60
 826:	e6 2e       	mov	r14, r22
 828:	02 c0       	rjmp	.+4      	; 0x82e <__EEPROM_REGION_LENGTH__+0x2e>
 82a:	21 2f       	mov	r18, r17
 82c:	e1 2c       	mov	r14, r1
 82e:	f5 01       	movw	r30, r10
 830:	34 96       	adiw	r30, 0x04	; 4
 832:	ff 87       	std	Y+15, r31	; 0x0f
 834:	ee 87       	std	Y+14, r30	; 0x0e
 836:	f5 01       	movw	r30, r10
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	82 81       	ldd	r24, Z+2	; 0x02
 83e:	93 81       	ldd	r25, Z+3	; 0x03
 840:	0e 2d       	mov	r16, r14
 842:	ae 01       	movw	r20, r28
 844:	4f 5f       	subi	r20, 0xFF	; 255
 846:	5f 4f       	sbci	r21, 0xFF	; 255
 848:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__ftoa_engine>
 84c:	5c 01       	movw	r10, r24
 84e:	59 80       	ldd	r5, Y+1	; 0x01
 850:	50 fe       	sbrs	r5, 0
 852:	02 c0       	rjmp	.+4      	; 0x858 <__EEPROM_REGION_LENGTH__+0x58>
 854:	53 fe       	sbrs	r5, 3
 856:	06 c0       	rjmp	.+12     	; 0x864 <__EEPROM_REGION_LENGTH__+0x64>
 858:	71 fc       	sbrc	r7, 1
 85a:	06 c0       	rjmp	.+12     	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
 85c:	72 fe       	sbrs	r7, 2
 85e:	06 c0       	rjmp	.+12     	; 0x86c <__EEPROM_REGION_LENGTH__+0x6c>
 860:	00 e2       	ldi	r16, 0x20	; 32
 862:	05 c0       	rjmp	.+10     	; 0x86e <__EEPROM_REGION_LENGTH__+0x6e>
 864:	0d e2       	ldi	r16, 0x2D	; 45
 866:	03 c0       	rjmp	.+6      	; 0x86e <__EEPROM_REGION_LENGTH__+0x6e>
 868:	0b e2       	ldi	r16, 0x2B	; 43
 86a:	01 c0       	rjmp	.+2      	; 0x86e <__EEPROM_REGION_LENGTH__+0x6e>
 86c:	00 e0       	ldi	r16, 0x00	; 0
 86e:	85 2d       	mov	r24, r5
 870:	8c 70       	andi	r24, 0x0C	; 12
 872:	19 f0       	breq	.+6      	; 0x87a <__EEPROM_REGION_LENGTH__+0x7a>
 874:	01 11       	cpse	r16, r1
 876:	73 c2       	rjmp	.+1254   	; 0xd5e <__EEPROM_REGION_LENGTH__+0x55e>
 878:	be c2       	rjmp	.+1404   	; 0xdf6 <__EEPROM_REGION_LENGTH__+0x5f6>
 87a:	77 fe       	sbrs	r7, 7
 87c:	0f c0       	rjmp	.+30     	; 0x89c <__EEPROM_REGION_LENGTH__+0x9c>
 87e:	ea 0c       	add	r14, r10
 880:	54 fe       	sbrs	r5, 4
 882:	04 c0       	rjmp	.+8      	; 0x88c <__EEPROM_REGION_LENGTH__+0x8c>
 884:	8a 81       	ldd	r24, Y+2	; 0x02
 886:	81 33       	cpi	r24, 0x31	; 49
 888:	09 f4       	brne	.+2      	; 0x88c <__EEPROM_REGION_LENGTH__+0x8c>
 88a:	ea 94       	dec	r14
 88c:	1e 14       	cp	r1, r14
 88e:	74 f5       	brge	.+92     	; 0x8ec <__EEPROM_REGION_LENGTH__+0xec>
 890:	28 e0       	ldi	r18, 0x08	; 8
 892:	2e 15       	cp	r18, r14
 894:	78 f5       	brcc	.+94     	; 0x8f4 <__EEPROM_REGION_LENGTH__+0xf4>
 896:	38 e0       	ldi	r19, 0x08	; 8
 898:	e3 2e       	mov	r14, r19
 89a:	2c c0       	rjmp	.+88     	; 0x8f4 <__EEPROM_REGION_LENGTH__+0xf4>
 89c:	76 fc       	sbrc	r7, 6
 89e:	2a c0       	rjmp	.+84     	; 0x8f4 <__EEPROM_REGION_LENGTH__+0xf4>
 8a0:	81 2f       	mov	r24, r17
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	8a 15       	cp	r24, r10
 8a6:	9b 05       	cpc	r25, r11
 8a8:	9c f0       	brlt	.+38     	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 8aa:	8c ef       	ldi	r24, 0xFC	; 252
 8ac:	a8 16       	cp	r10, r24
 8ae:	8f ef       	ldi	r24, 0xFF	; 255
 8b0:	b8 06       	cpc	r11, r24
 8b2:	74 f0       	brlt	.+28     	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 8b4:	97 2d       	mov	r25, r7
 8b6:	90 68       	ori	r25, 0x80	; 128
 8b8:	79 2e       	mov	r7, r25
 8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 8bc:	e2 e0       	ldi	r30, 0x02	; 2
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	ec 0f       	add	r30, r28
 8c2:	fd 1f       	adc	r31, r29
 8c4:	e1 0f       	add	r30, r17
 8c6:	f1 1d       	adc	r31, r1
 8c8:	80 81       	ld	r24, Z
 8ca:	80 33       	cpi	r24, 0x30	; 48
 8cc:	19 f4       	brne	.+6      	; 0x8d4 <__EEPROM_REGION_LENGTH__+0xd4>
 8ce:	11 50       	subi	r17, 0x01	; 1
 8d0:	11 11       	cpse	r17, r1
 8d2:	f4 cf       	rjmp	.-24     	; 0x8bc <__EEPROM_REGION_LENGTH__+0xbc>
 8d4:	77 fe       	sbrs	r7, 7
 8d6:	0e c0       	rjmp	.+28     	; 0x8f4 <__EEPROM_REGION_LENGTH__+0xf4>
 8d8:	ee 24       	eor	r14, r14
 8da:	e3 94       	inc	r14
 8dc:	e1 0e       	add	r14, r17
 8de:	81 2f       	mov	r24, r17
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	a8 16       	cp	r10, r24
 8e4:	b9 06       	cpc	r11, r25
 8e6:	2c f4       	brge	.+10     	; 0x8f2 <__EEPROM_REGION_LENGTH__+0xf2>
 8e8:	1a 19       	sub	r17, r10
 8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__EEPROM_REGION_LENGTH__+0xf4>
 8ec:	ee 24       	eor	r14, r14
 8ee:	e3 94       	inc	r14
 8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <__EEPROM_REGION_LENGTH__+0xf4>
 8f2:	10 e0       	ldi	r17, 0x00	; 0
 8f4:	77 fe       	sbrs	r7, 7
 8f6:	06 c0       	rjmp	.+12     	; 0x904 <__EEPROM_REGION_LENGTH__+0x104>
 8f8:	1a 14       	cp	r1, r10
 8fa:	1b 04       	cpc	r1, r11
 8fc:	34 f4       	brge	.+12     	; 0x90a <__EEPROM_REGION_LENGTH__+0x10a>
 8fe:	c5 01       	movw	r24, r10
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	05 c0       	rjmp	.+10     	; 0x90e <__EEPROM_REGION_LENGTH__+0x10e>
 904:	85 e0       	ldi	r24, 0x05	; 5
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	02 c0       	rjmp	.+4      	; 0x90e <__EEPROM_REGION_LENGTH__+0x10e>
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	01 11       	cpse	r16, r1
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	11 23       	and	r17, r17
 914:	31 f0       	breq	.+12     	; 0x922 <__EEPROM_REGION_LENGTH__+0x122>
 916:	21 2f       	mov	r18, r17
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	2f 5f       	subi	r18, 0xFF	; 255
 91c:	3f 4f       	sbci	r19, 0xFF	; 255
 91e:	82 0f       	add	r24, r18
 920:	93 1f       	adc	r25, r19
 922:	2f 2d       	mov	r18, r15
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	82 17       	cp	r24, r18
 928:	93 07       	cpc	r25, r19
 92a:	14 f4       	brge	.+4      	; 0x930 <__EEPROM_REGION_LENGTH__+0x130>
 92c:	f8 1a       	sub	r15, r24
 92e:	01 c0       	rjmp	.+2      	; 0x932 <__EEPROM_REGION_LENGTH__+0x132>
 930:	f1 2c       	mov	r15, r1
 932:	87 2d       	mov	r24, r7
 934:	89 70       	andi	r24, 0x09	; 9
 936:	49 f4       	brne	.+18     	; 0x94a <__EEPROM_REGION_LENGTH__+0x14a>
 938:	ff 20       	and	r15, r15
 93a:	39 f0       	breq	.+14     	; 0x94a <__EEPROM_REGION_LENGTH__+0x14a>
 93c:	b6 01       	movw	r22, r12
 93e:	80 e2       	ldi	r24, 0x20	; 32
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 946:	fa 94       	dec	r15
 948:	f7 cf       	rjmp	.-18     	; 0x938 <__EEPROM_REGION_LENGTH__+0x138>
 94a:	00 23       	and	r16, r16
 94c:	29 f0       	breq	.+10     	; 0x958 <__EEPROM_REGION_LENGTH__+0x158>
 94e:	b6 01       	movw	r22, r12
 950:	80 2f       	mov	r24, r16
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 958:	73 fc       	sbrc	r7, 3
 95a:	09 c0       	rjmp	.+18     	; 0x96e <__EEPROM_REGION_LENGTH__+0x16e>
 95c:	ff 20       	and	r15, r15
 95e:	39 f0       	breq	.+14     	; 0x96e <__EEPROM_REGION_LENGTH__+0x16e>
 960:	b6 01       	movw	r22, r12
 962:	80 e3       	ldi	r24, 0x30	; 48
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 96a:	fa 94       	dec	r15
 96c:	f7 cf       	rjmp	.-18     	; 0x95c <__EEPROM_REGION_LENGTH__+0x15c>
 96e:	77 fe       	sbrs	r7, 7
 970:	49 c0       	rjmp	.+146    	; 0xa04 <__EEPROM_REGION_LENGTH__+0x204>
 972:	35 01       	movw	r6, r10
 974:	b7 fe       	sbrs	r11, 7
 976:	02 c0       	rjmp	.+4      	; 0x97c <__EEPROM_REGION_LENGTH__+0x17c>
 978:	61 2c       	mov	r6, r1
 97a:	71 2c       	mov	r7, r1
 97c:	c5 01       	movw	r24, r10
 97e:	86 19       	sub	r24, r6
 980:	97 09       	sbc	r25, r7
 982:	88 24       	eor	r8, r8
 984:	83 94       	inc	r8
 986:	91 2c       	mov	r9, r1
 988:	8c 0e       	add	r8, r28
 98a:	9d 1e       	adc	r9, r29
 98c:	88 0e       	add	r8, r24
 98e:	99 1e       	adc	r9, r25
 990:	f5 01       	movw	r30, r10
 992:	ee 19       	sub	r30, r14
 994:	f1 09       	sbc	r31, r1
 996:	f9 8b       	std	Y+17, r31	; 0x11
 998:	e8 8b       	std	Y+16, r30	; 0x10
 99a:	01 2f       	mov	r16, r17
 99c:	10 e0       	ldi	r17, 0x00	; 0
 99e:	11 95       	neg	r17
 9a0:	01 95       	neg	r16
 9a2:	11 09       	sbc	r17, r1
 9a4:	ff ef       	ldi	r31, 0xFF	; 255
 9a6:	6f 16       	cp	r6, r31
 9a8:	7f 06       	cpc	r7, r31
 9aa:	29 f4       	brne	.+10     	; 0x9b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 9ac:	b6 01       	movw	r22, r12
 9ae:	8e e2       	ldi	r24, 0x2E	; 46
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 9b6:	a6 14       	cp	r10, r6
 9b8:	b7 04       	cpc	r11, r7
 9ba:	44 f0       	brlt	.+16     	; 0x9cc <__EEPROM_REGION_LENGTH__+0x1cc>
 9bc:	88 89       	ldd	r24, Y+16	; 0x10
 9be:	99 89       	ldd	r25, Y+17	; 0x11
 9c0:	86 15       	cp	r24, r6
 9c2:	97 05       	cpc	r25, r7
 9c4:	1c f4       	brge	.+6      	; 0x9cc <__EEPROM_REGION_LENGTH__+0x1cc>
 9c6:	f4 01       	movw	r30, r8
 9c8:	81 81       	ldd	r24, Z+1	; 0x01
 9ca:	01 c0       	rjmp	.+2      	; 0x9ce <__EEPROM_REGION_LENGTH__+0x1ce>
 9cc:	80 e3       	ldi	r24, 0x30	; 48
 9ce:	f1 e0       	ldi	r31, 0x01	; 1
 9d0:	6f 1a       	sub	r6, r31
 9d2:	71 08       	sbc	r7, r1
 9d4:	2f ef       	ldi	r18, 0xFF	; 255
 9d6:	82 1a       	sub	r8, r18
 9d8:	92 0a       	sbc	r9, r18
 9da:	60 16       	cp	r6, r16
 9dc:	71 06       	cpc	r7, r17
 9de:	2c f0       	brlt	.+10     	; 0x9ea <__EEPROM_REGION_LENGTH__+0x1ea>
 9e0:	b6 01       	movw	r22, r12
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 9e8:	dd cf       	rjmp	.-70     	; 0x9a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 9ea:	a6 14       	cp	r10, r6
 9ec:	b7 04       	cpc	r11, r7
 9ee:	39 f4       	brne	.+14     	; 0x9fe <__EEPROM_REGION_LENGTH__+0x1fe>
 9f0:	9a 81       	ldd	r25, Y+2	; 0x02
 9f2:	96 33       	cpi	r25, 0x36	; 54
 9f4:	18 f4       	brcc	.+6      	; 0x9fc <__EEPROM_REGION_LENGTH__+0x1fc>
 9f6:	95 33       	cpi	r25, 0x35	; 53
 9f8:	11 f4       	brne	.+4      	; 0x9fe <__EEPROM_REGION_LENGTH__+0x1fe>
 9fa:	54 fe       	sbrs	r5, 4
 9fc:	81 e3       	ldi	r24, 0x31	; 49
 9fe:	b6 01       	movw	r22, r12
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	51 c0       	rjmp	.+162    	; 0xaa6 <__EEPROM_REGION_LENGTH__+0x2a6>
 a04:	8a 81       	ldd	r24, Y+2	; 0x02
 a06:	81 33       	cpi	r24, 0x31	; 49
 a08:	19 f0       	breq	.+6      	; 0xa10 <__EEPROM_REGION_LENGTH__+0x210>
 a0a:	95 2d       	mov	r25, r5
 a0c:	9f 7e       	andi	r25, 0xEF	; 239
 a0e:	59 2e       	mov	r5, r25
 a10:	b6 01       	movw	r22, r12
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 a18:	11 11       	cpse	r17, r1
 a1a:	05 c0       	rjmp	.+10     	; 0xa26 <__EEPROM_REGION_LENGTH__+0x226>
 a1c:	74 fc       	sbrc	r7, 4
 a1e:	1c c0       	rjmp	.+56     	; 0xa58 <__EEPROM_REGION_LENGTH__+0x258>
 a20:	85 e6       	ldi	r24, 0x65	; 101
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	1b c0       	rjmp	.+54     	; 0xa5c <__EEPROM_REGION_LENGTH__+0x25c>
 a26:	b6 01       	movw	r22, r12
 a28:	8e e2       	ldi	r24, 0x2E	; 46
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 a30:	02 e0       	ldi	r16, 0x02	; 2
 a32:	01 0f       	add	r16, r17
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	11 e0       	ldi	r17, 0x01	; 1
 a38:	18 0f       	add	r17, r24
 a3a:	e1 e0       	ldi	r30, 0x01	; 1
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	ec 0f       	add	r30, r28
 a40:	fd 1f       	adc	r31, r29
 a42:	e8 0f       	add	r30, r24
 a44:	f1 1d       	adc	r31, r1
 a46:	80 81       	ld	r24, Z
 a48:	b6 01       	movw	r22, r12
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 a50:	81 2f       	mov	r24, r17
 a52:	10 13       	cpse	r17, r16
 a54:	f0 cf       	rjmp	.-32     	; 0xa36 <__EEPROM_REGION_LENGTH__+0x236>
 a56:	e2 cf       	rjmp	.-60     	; 0xa1c <__EEPROM_REGION_LENGTH__+0x21c>
 a58:	85 e4       	ldi	r24, 0x45	; 69
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	b6 01       	movw	r22, r12
 a5e:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 a62:	b7 fc       	sbrc	r11, 7
 a64:	05 c0       	rjmp	.+10     	; 0xa70 <__EEPROM_REGION_LENGTH__+0x270>
 a66:	a1 14       	cp	r10, r1
 a68:	b1 04       	cpc	r11, r1
 a6a:	39 f4       	brne	.+14     	; 0xa7a <__EEPROM_REGION_LENGTH__+0x27a>
 a6c:	54 fe       	sbrs	r5, 4
 a6e:	05 c0       	rjmp	.+10     	; 0xa7a <__EEPROM_REGION_LENGTH__+0x27a>
 a70:	b1 94       	neg	r11
 a72:	a1 94       	neg	r10
 a74:	b1 08       	sbc	r11, r1
 a76:	8d e2       	ldi	r24, 0x2D	; 45
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <__EEPROM_REGION_LENGTH__+0x27c>
 a7a:	8b e2       	ldi	r24, 0x2B	; 43
 a7c:	b6 01       	movw	r22, r12
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 a84:	80 e3       	ldi	r24, 0x30	; 48
 a86:	ea e0       	ldi	r30, 0x0A	; 10
 a88:	ae 16       	cp	r10, r30
 a8a:	b1 04       	cpc	r11, r1
 a8c:	2c f0       	brlt	.+10     	; 0xa98 <__EEPROM_REGION_LENGTH__+0x298>
 a8e:	8f 5f       	subi	r24, 0xFF	; 255
 a90:	aa e0       	ldi	r26, 0x0A	; 10
 a92:	aa 1a       	sub	r10, r26
 a94:	b1 08       	sbc	r11, r1
 a96:	f7 cf       	rjmp	.-18     	; 0xa86 <__EEPROM_REGION_LENGTH__+0x286>
 a98:	b6 01       	movw	r22, r12
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 aa0:	b6 01       	movw	r22, r12
 aa2:	c5 01       	movw	r24, r10
 aa4:	c0 96       	adiw	r24, 0x30	; 48
 aa6:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 aaa:	72 c1       	rjmp	.+740    	; 0xd90 <__EEPROM_REGION_LENGTH__+0x590>
 aac:	83 36       	cpi	r24, 0x63	; 99
 aae:	31 f0       	breq	.+12     	; 0xabc <__EEPROM_REGION_LENGTH__+0x2bc>
 ab0:	83 37       	cpi	r24, 0x73	; 115
 ab2:	91 f0       	breq	.+36     	; 0xad8 <__EEPROM_REGION_LENGTH__+0x2d8>
 ab4:	83 35       	cpi	r24, 0x53	; 83
 ab6:	09 f0       	breq	.+2      	; 0xaba <__EEPROM_REGION_LENGTH__+0x2ba>
 ab8:	5d c0       	rjmp	.+186    	; 0xb74 <__EEPROM_REGION_LENGTH__+0x374>
 aba:	24 c0       	rjmp	.+72     	; 0xb04 <__EEPROM_REGION_LENGTH__+0x304>
 abc:	c5 01       	movw	r24, r10
 abe:	02 96       	adiw	r24, 0x02	; 2
 ac0:	9f 87       	std	Y+15, r25	; 0x0f
 ac2:	8e 87       	std	Y+14, r24	; 0x0e
 ac4:	f5 01       	movw	r30, r10
 ac6:	80 81       	ld	r24, Z
 ac8:	89 83       	std	Y+1, r24	; 0x01
 aca:	6a 88       	ldd	r6, Y+18	; 0x12
 acc:	7b 88       	ldd	r7, Y+19	; 0x13
 ace:	8c 88       	ldd	r8, Y+20	; 0x14
 ad0:	aa 24       	eor	r10, r10
 ad2:	a3 94       	inc	r10
 ad4:	b1 2c       	mov	r11, r1
 ad6:	14 c0       	rjmp	.+40     	; 0xb00 <__EEPROM_REGION_LENGTH__+0x300>
 ad8:	c5 01       	movw	r24, r10
 ada:	03 96       	adiw	r24, 0x03	; 3
 adc:	9f 87       	std	Y+15, r25	; 0x0f
 ade:	8e 87       	std	Y+14, r24	; 0x0e
 ae0:	f5 01       	movw	r30, r10
 ae2:	60 80       	ld	r6, Z
 ae4:	71 80       	ldd	r7, Z+1	; 0x01
 ae6:	82 80       	ldd	r8, Z+2	; 0x02
 ae8:	06 ff       	sbrs	r16, 6
 aea:	03 c0       	rjmp	.+6      	; 0xaf2 <__EEPROM_REGION_LENGTH__+0x2f2>
 aec:	41 2f       	mov	r20, r17
 aee:	50 e0       	ldi	r21, 0x00	; 0
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <__EEPROM_REGION_LENGTH__+0x2f6>
 af2:	4f ef       	ldi	r20, 0xFF	; 255
 af4:	5f ef       	ldi	r21, 0xFF	; 255
 af6:	88 2d       	mov	r24, r8
 af8:	b3 01       	movw	r22, r6
 afa:	0e 94 a4 20 	call	0x4148	; 0x4148 <strnlen>
 afe:	5c 01       	movw	r10, r24
 b00:	0f 77       	andi	r16, 0x7F	; 127
 b02:	15 c0       	rjmp	.+42     	; 0xb2e <__EEPROM_REGION_LENGTH__+0x32e>
 b04:	c5 01       	movw	r24, r10
 b06:	03 96       	adiw	r24, 0x03	; 3
 b08:	9f 87       	std	Y+15, r25	; 0x0f
 b0a:	8e 87       	std	Y+14, r24	; 0x0e
 b0c:	f5 01       	movw	r30, r10
 b0e:	60 80       	ld	r6, Z
 b10:	71 80       	ldd	r7, Z+1	; 0x01
 b12:	82 80       	ldd	r8, Z+2	; 0x02
 b14:	06 ff       	sbrs	r16, 6
 b16:	03 c0       	rjmp	.+6      	; 0xb1e <__EEPROM_REGION_LENGTH__+0x31e>
 b18:	41 2f       	mov	r20, r17
 b1a:	50 e0       	ldi	r21, 0x00	; 0
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <__EEPROM_REGION_LENGTH__+0x322>
 b1e:	4f ef       	ldi	r20, 0xFF	; 255
 b20:	5f ef       	ldi	r21, 0xFF	; 255
 b22:	88 2d       	mov	r24, r8
 b24:	b3 01       	movw	r22, r6
 b26:	0e 94 a4 20 	call	0x4148	; 0x4148 <strnlen>
 b2a:	5c 01       	movw	r10, r24
 b2c:	00 68       	ori	r16, 0x80	; 128
 b2e:	03 fd       	sbrc	r16, 3
 b30:	1d c0       	rjmp	.+58     	; 0xb6c <__EEPROM_REGION_LENGTH__+0x36c>
 b32:	8f 2d       	mov	r24, r15
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	a8 16       	cp	r10, r24
 b38:	b9 06       	cpc	r11, r25
 b3a:	c0 f4       	brcc	.+48     	; 0xb6c <__EEPROM_REGION_LENGTH__+0x36c>
 b3c:	b6 01       	movw	r22, r12
 b3e:	80 e2       	ldi	r24, 0x20	; 32
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 b46:	fa 94       	dec	r15
 b48:	f4 cf       	rjmp	.-24     	; 0xb32 <__EEPROM_REGION_LENGTH__+0x332>
 b4a:	f3 01       	movw	r30, r6
 b4c:	84 91       	lpm	r24, Z
 b4e:	87 fc       	sbrc	r8, 7
 b50:	80 81       	ld	r24, Z
 b52:	ff ef       	ldi	r31, 0xFF	; 255
 b54:	6f 1a       	sub	r6, r31
 b56:	7f 0a       	sbc	r7, r31
 b58:	8f 0a       	sbc	r8, r31
 b5a:	b6 01       	movw	r22, r12
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 b62:	f1 10       	cpse	r15, r1
 b64:	fa 94       	dec	r15
 b66:	21 e0       	ldi	r18, 0x01	; 1
 b68:	a2 1a       	sub	r10, r18
 b6a:	b1 08       	sbc	r11, r1
 b6c:	a1 14       	cp	r10, r1
 b6e:	b1 04       	cpc	r11, r1
 b70:	61 f7       	brne	.-40     	; 0xb4a <__EEPROM_REGION_LENGTH__+0x34a>
 b72:	0e c1       	rjmp	.+540    	; 0xd90 <__EEPROM_REGION_LENGTH__+0x590>
 b74:	84 36       	cpi	r24, 0x64	; 100
 b76:	11 f0       	breq	.+4      	; 0xb7c <__EEPROM_REGION_LENGTH__+0x37c>
 b78:	89 36       	cpi	r24, 0x69	; 105
 b7a:	79 f5       	brne	.+94     	; 0xbda <__EEPROM_REGION_LENGTH__+0x3da>
 b7c:	c5 01       	movw	r24, r10
 b7e:	07 ff       	sbrs	r16, 7
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <__EEPROM_REGION_LENGTH__+0x394>
 b82:	04 96       	adiw	r24, 0x04	; 4
 b84:	9f 87       	std	Y+15, r25	; 0x0f
 b86:	8e 87       	std	Y+14, r24	; 0x0e
 b88:	f5 01       	movw	r30, r10
 b8a:	60 81       	ld	r22, Z
 b8c:	71 81       	ldd	r23, Z+1	; 0x01
 b8e:	82 81       	ldd	r24, Z+2	; 0x02
 b90:	93 81       	ldd	r25, Z+3	; 0x03
 b92:	0a c0       	rjmp	.+20     	; 0xba8 <__EEPROM_REGION_LENGTH__+0x3a8>
 b94:	02 96       	adiw	r24, 0x02	; 2
 b96:	9f 87       	std	Y+15, r25	; 0x0f
 b98:	8e 87       	std	Y+14, r24	; 0x0e
 b9a:	f5 01       	movw	r30, r10
 b9c:	60 81       	ld	r22, Z
 b9e:	71 81       	ldd	r23, Z+1	; 0x01
 ba0:	07 2e       	mov	r0, r23
 ba2:	00 0c       	add	r0, r0
 ba4:	88 0b       	sbc	r24, r24
 ba6:	99 0b       	sbc	r25, r25
 ba8:	0f 76       	andi	r16, 0x6F	; 111
 baa:	e0 2e       	mov	r14, r16
 bac:	97 ff       	sbrs	r25, 7
 bae:	0a c0       	rjmp	.+20     	; 0xbc4 <__EEPROM_REGION_LENGTH__+0x3c4>
 bb0:	90 95       	com	r25
 bb2:	80 95       	com	r24
 bb4:	70 95       	com	r23
 bb6:	61 95       	neg	r22
 bb8:	7f 4f       	sbci	r23, 0xFF	; 255
 bba:	8f 4f       	sbci	r24, 0xFF	; 255
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
 bbe:	f0 2f       	mov	r31, r16
 bc0:	f0 68       	ori	r31, 0x80	; 128
 bc2:	ef 2e       	mov	r14, r31
 bc4:	2a e0       	ldi	r18, 0x0A	; 10
 bc6:	30 e0       	ldi	r19, 0x00	; 0
 bc8:	ae 01       	movw	r20, r28
 bca:	4f 5f       	subi	r20, 0xFF	; 255
 bcc:	5f 4f       	sbci	r21, 0xFF	; 255
 bce:	0e 94 2a 14 	call	0x2854	; 0x2854 <__ultoa_invert>
 bd2:	a8 2e       	mov	r10, r24
 bd4:	2c 85       	ldd	r18, Y+12	; 0x0c
 bd6:	a2 1a       	sub	r10, r18
 bd8:	4b c0       	rjmp	.+150    	; 0xc70 <__EEPROM_REGION_LENGTH__+0x470>
 bda:	85 37       	cpi	r24, 0x75	; 117
 bdc:	29 f4       	brne	.+10     	; 0xbe8 <__EEPROM_REGION_LENGTH__+0x3e8>
 bde:	0f 7e       	andi	r16, 0xEF	; 239
 be0:	e0 2e       	mov	r14, r16
 be2:	2a e0       	ldi	r18, 0x0A	; 10
 be4:	30 e0       	ldi	r19, 0x00	; 0
 be6:	25 c0       	rjmp	.+74     	; 0xc32 <__EEPROM_REGION_LENGTH__+0x432>
 be8:	90 2f       	mov	r25, r16
 bea:	99 7f       	andi	r25, 0xF9	; 249
 bec:	e9 2e       	mov	r14, r25
 bee:	8f 36       	cpi	r24, 0x6F	; 111
 bf0:	c1 f0       	breq	.+48     	; 0xc22 <__EEPROM_REGION_LENGTH__+0x422>
 bf2:	18 f4       	brcc	.+6      	; 0xbfa <__EEPROM_REGION_LENGTH__+0x3fa>
 bf4:	88 35       	cpi	r24, 0x58	; 88
 bf6:	79 f0       	breq	.+30     	; 0xc16 <__EEPROM_REGION_LENGTH__+0x416>
 bf8:	d5 c0       	rjmp	.+426    	; 0xda4 <__EEPROM_REGION_LENGTH__+0x5a4>
 bfa:	80 37       	cpi	r24, 0x70	; 112
 bfc:	19 f0       	breq	.+6      	; 0xc04 <__EEPROM_REGION_LENGTH__+0x404>
 bfe:	88 37       	cpi	r24, 0x78	; 120
 c00:	21 f0       	breq	.+8      	; 0xc0a <__EEPROM_REGION_LENGTH__+0x40a>
 c02:	d0 c0       	rjmp	.+416    	; 0xda4 <__EEPROM_REGION_LENGTH__+0x5a4>
 c04:	a9 2f       	mov	r26, r25
 c06:	a0 61       	ori	r26, 0x10	; 16
 c08:	ea 2e       	mov	r14, r26
 c0a:	e4 fe       	sbrs	r14, 4
 c0c:	0d c0       	rjmp	.+26     	; 0xc28 <__EEPROM_REGION_LENGTH__+0x428>
 c0e:	ee 2d       	mov	r30, r14
 c10:	e4 60       	ori	r30, 0x04	; 4
 c12:	ee 2e       	mov	r14, r30
 c14:	09 c0       	rjmp	.+18     	; 0xc28 <__EEPROM_REGION_LENGTH__+0x428>
 c16:	04 ff       	sbrs	r16, 4
 c18:	0a c0       	rjmp	.+20     	; 0xc2e <__EEPROM_REGION_LENGTH__+0x42e>
 c1a:	f9 2f       	mov	r31, r25
 c1c:	f6 60       	ori	r31, 0x06	; 6
 c1e:	ef 2e       	mov	r14, r31
 c20:	06 c0       	rjmp	.+12     	; 0xc2e <__EEPROM_REGION_LENGTH__+0x42e>
 c22:	28 e0       	ldi	r18, 0x08	; 8
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	05 c0       	rjmp	.+10     	; 0xc32 <__EEPROM_REGION_LENGTH__+0x432>
 c28:	20 e1       	ldi	r18, 0x10	; 16
 c2a:	30 e0       	ldi	r19, 0x00	; 0
 c2c:	02 c0       	rjmp	.+4      	; 0xc32 <__EEPROM_REGION_LENGTH__+0x432>
 c2e:	20 e1       	ldi	r18, 0x10	; 16
 c30:	32 e0       	ldi	r19, 0x02	; 2
 c32:	c5 01       	movw	r24, r10
 c34:	e7 fe       	sbrs	r14, 7
 c36:	09 c0       	rjmp	.+18     	; 0xc4a <__EEPROM_REGION_LENGTH__+0x44a>
 c38:	04 96       	adiw	r24, 0x04	; 4
 c3a:	9f 87       	std	Y+15, r25	; 0x0f
 c3c:	8e 87       	std	Y+14, r24	; 0x0e
 c3e:	f5 01       	movw	r30, r10
 c40:	60 81       	ld	r22, Z
 c42:	71 81       	ldd	r23, Z+1	; 0x01
 c44:	82 81       	ldd	r24, Z+2	; 0x02
 c46:	93 81       	ldd	r25, Z+3	; 0x03
 c48:	08 c0       	rjmp	.+16     	; 0xc5a <__EEPROM_REGION_LENGTH__+0x45a>
 c4a:	02 96       	adiw	r24, 0x02	; 2
 c4c:	9f 87       	std	Y+15, r25	; 0x0f
 c4e:	8e 87       	std	Y+14, r24	; 0x0e
 c50:	f5 01       	movw	r30, r10
 c52:	60 81       	ld	r22, Z
 c54:	71 81       	ldd	r23, Z+1	; 0x01
 c56:	80 e0       	ldi	r24, 0x00	; 0
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	ae 01       	movw	r20, r28
 c5c:	4f 5f       	subi	r20, 0xFF	; 255
 c5e:	5f 4f       	sbci	r21, 0xFF	; 255
 c60:	0e 94 2a 14 	call	0x2854	; 0x2854 <__ultoa_invert>
 c64:	a8 2e       	mov	r10, r24
 c66:	fc 85       	ldd	r31, Y+12	; 0x0c
 c68:	af 1a       	sub	r10, r31
 c6a:	2e 2d       	mov	r18, r14
 c6c:	2f 77       	andi	r18, 0x7F	; 127
 c6e:	e2 2e       	mov	r14, r18
 c70:	e6 fe       	sbrs	r14, 6
 c72:	0b c0       	rjmp	.+22     	; 0xc8a <__EEPROM_REGION_LENGTH__+0x48a>
 c74:	0e 2d       	mov	r16, r14
 c76:	0e 7f       	andi	r16, 0xFE	; 254
 c78:	a1 16       	cp	r10, r17
 c7a:	50 f4       	brcc	.+20     	; 0xc90 <__EEPROM_REGION_LENGTH__+0x490>
 c7c:	e4 fe       	sbrs	r14, 4
 c7e:	0a c0       	rjmp	.+20     	; 0xc94 <__EEPROM_REGION_LENGTH__+0x494>
 c80:	e2 fc       	sbrc	r14, 2
 c82:	08 c0       	rjmp	.+16     	; 0xc94 <__EEPROM_REGION_LENGTH__+0x494>
 c84:	0e 2d       	mov	r16, r14
 c86:	0e 7e       	andi	r16, 0xEE	; 238
 c88:	05 c0       	rjmp	.+10     	; 0xc94 <__EEPROM_REGION_LENGTH__+0x494>
 c8a:	ba 2c       	mov	r11, r10
 c8c:	0e 2d       	mov	r16, r14
 c8e:	03 c0       	rjmp	.+6      	; 0xc96 <__EEPROM_REGION_LENGTH__+0x496>
 c90:	ba 2c       	mov	r11, r10
 c92:	01 c0       	rjmp	.+2      	; 0xc96 <__EEPROM_REGION_LENGTH__+0x496>
 c94:	b1 2e       	mov	r11, r17
 c96:	04 ff       	sbrs	r16, 4
 c98:	0d c0       	rjmp	.+26     	; 0xcb4 <__EEPROM_REGION_LENGTH__+0x4b4>
 c9a:	fe 01       	movw	r30, r28
 c9c:	ea 0d       	add	r30, r10
 c9e:	f1 1d       	adc	r31, r1
 ca0:	80 81       	ld	r24, Z
 ca2:	80 33       	cpi	r24, 0x30	; 48
 ca4:	11 f4       	brne	.+4      	; 0xcaa <__EEPROM_REGION_LENGTH__+0x4aa>
 ca6:	09 7e       	andi	r16, 0xE9	; 233
 ca8:	09 c0       	rjmp	.+18     	; 0xcbc <__EEPROM_REGION_LENGTH__+0x4bc>
 caa:	02 ff       	sbrs	r16, 2
 cac:	06 c0       	rjmp	.+12     	; 0xcba <__EEPROM_REGION_LENGTH__+0x4ba>
 cae:	b3 94       	inc	r11
 cb0:	b3 94       	inc	r11
 cb2:	04 c0       	rjmp	.+8      	; 0xcbc <__EEPROM_REGION_LENGTH__+0x4bc>
 cb4:	80 2f       	mov	r24, r16
 cb6:	86 78       	andi	r24, 0x86	; 134
 cb8:	09 f0       	breq	.+2      	; 0xcbc <__EEPROM_REGION_LENGTH__+0x4bc>
 cba:	b3 94       	inc	r11
 cbc:	03 fd       	sbrc	r16, 3
 cbe:	11 c0       	rjmp	.+34     	; 0xce2 <__EEPROM_REGION_LENGTH__+0x4e2>
 cc0:	00 ff       	sbrs	r16, 0
 cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <__EEPROM_REGION_LENGTH__+0x4d0>
 cc4:	bf 14       	cp	r11, r15
 cc6:	88 f4       	brcc	.+34     	; 0xcea <__EEPROM_REGION_LENGTH__+0x4ea>
 cc8:	fa 0c       	add	r15, r10
 cca:	1f 2d       	mov	r17, r15
 ccc:	1b 19       	sub	r17, r11
 cce:	0e c0       	rjmp	.+28     	; 0xcec <__EEPROM_REGION_LENGTH__+0x4ec>
 cd0:	bf 14       	cp	r11, r15
 cd2:	60 f4       	brcc	.+24     	; 0xcec <__EEPROM_REGION_LENGTH__+0x4ec>
 cd4:	b6 01       	movw	r22, r12
 cd6:	80 e2       	ldi	r24, 0x20	; 32
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 cde:	b3 94       	inc	r11
 ce0:	f7 cf       	rjmp	.-18     	; 0xcd0 <__EEPROM_REGION_LENGTH__+0x4d0>
 ce2:	bf 14       	cp	r11, r15
 ce4:	18 f4       	brcc	.+6      	; 0xcec <__EEPROM_REGION_LENGTH__+0x4ec>
 ce6:	fb 18       	sub	r15, r11
 ce8:	02 c0       	rjmp	.+4      	; 0xcee <__EEPROM_REGION_LENGTH__+0x4ee>
 cea:	1a 2d       	mov	r17, r10
 cec:	f1 2c       	mov	r15, r1
 cee:	04 ff       	sbrs	r16, 4
 cf0:	10 c0       	rjmp	.+32     	; 0xd12 <__EEPROM_REGION_LENGTH__+0x512>
 cf2:	b6 01       	movw	r22, r12
 cf4:	80 e3       	ldi	r24, 0x30	; 48
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 cfc:	02 ff       	sbrs	r16, 2
 cfe:	17 c0       	rjmp	.+46     	; 0xd2e <__EEPROM_REGION_LENGTH__+0x52e>
 d00:	01 fd       	sbrc	r16, 1
 d02:	03 c0       	rjmp	.+6      	; 0xd0a <__EEPROM_REGION_LENGTH__+0x50a>
 d04:	88 e7       	ldi	r24, 0x78	; 120
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	02 c0       	rjmp	.+4      	; 0xd0e <__EEPROM_REGION_LENGTH__+0x50e>
 d0a:	88 e5       	ldi	r24, 0x58	; 88
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	b6 01       	movw	r22, r12
 d10:	0c c0       	rjmp	.+24     	; 0xd2a <__EEPROM_REGION_LENGTH__+0x52a>
 d12:	80 2f       	mov	r24, r16
 d14:	86 78       	andi	r24, 0x86	; 134
 d16:	59 f0       	breq	.+22     	; 0xd2e <__EEPROM_REGION_LENGTH__+0x52e>
 d18:	01 ff       	sbrs	r16, 1
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <__EEPROM_REGION_LENGTH__+0x520>
 d1c:	8b e2       	ldi	r24, 0x2B	; 43
 d1e:	01 c0       	rjmp	.+2      	; 0xd22 <__EEPROM_REGION_LENGTH__+0x522>
 d20:	80 e2       	ldi	r24, 0x20	; 32
 d22:	07 fd       	sbrc	r16, 7
 d24:	8d e2       	ldi	r24, 0x2D	; 45
 d26:	b6 01       	movw	r22, r12
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 d2e:	a1 16       	cp	r10, r17
 d30:	38 f4       	brcc	.+14     	; 0xd40 <__EEPROM_REGION_LENGTH__+0x540>
 d32:	b6 01       	movw	r22, r12
 d34:	80 e3       	ldi	r24, 0x30	; 48
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 d3c:	11 50       	subi	r17, 0x01	; 1
 d3e:	f7 cf       	rjmp	.-18     	; 0xd2e <__EEPROM_REGION_LENGTH__+0x52e>
 d40:	aa 94       	dec	r10
 d42:	e1 e0       	ldi	r30, 0x01	; 1
 d44:	f0 e0       	ldi	r31, 0x00	; 0
 d46:	ec 0f       	add	r30, r28
 d48:	fd 1f       	adc	r31, r29
 d4a:	ea 0d       	add	r30, r10
 d4c:	f1 1d       	adc	r31, r1
 d4e:	80 81       	ld	r24, Z
 d50:	b6 01       	movw	r22, r12
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 d58:	a1 10       	cpse	r10, r1
 d5a:	f2 cf       	rjmp	.-28     	; 0xd40 <__EEPROM_REGION_LENGTH__+0x540>
 d5c:	19 c0       	rjmp	.+50     	; 0xd90 <__EEPROM_REGION_LENGTH__+0x590>
 d5e:	f4 e0       	ldi	r31, 0x04	; 4
 d60:	ff 15       	cp	r31, r15
 d62:	80 f5       	brcc	.+96     	; 0xdc4 <__EEPROM_REGION_LENGTH__+0x5c4>
 d64:	84 e0       	ldi	r24, 0x04	; 4
 d66:	f8 1a       	sub	r15, r24
 d68:	73 fe       	sbrs	r7, 3
 d6a:	23 c0       	rjmp	.+70     	; 0xdb2 <__EEPROM_REGION_LENGTH__+0x5b2>
 d6c:	01 11       	cpse	r16, r1
 d6e:	2b c0       	rjmp	.+86     	; 0xdc6 <__EEPROM_REGION_LENGTH__+0x5c6>
 d70:	53 fe       	sbrs	r5, 3
 d72:	2f c0       	rjmp	.+94     	; 0xdd2 <__EEPROM_REGION_LENGTH__+0x5d2>
 d74:	57 eb       	ldi	r21, 0xB7	; 183
 d76:	85 2e       	mov	r8, r21
 d78:	56 e0       	ldi	r21, 0x06	; 6
 d7a:	95 2e       	mov	r9, r21
 d7c:	50 e0       	ldi	r21, 0x00	; 0
 d7e:	a5 2e       	mov	r10, r21
 d80:	07 2d       	mov	r16, r7
 d82:	00 71       	andi	r16, 0x10	; 16
 d84:	f4 01       	movw	r30, r8
 d86:	84 91       	lpm	r24, Z
 d88:	a7 fc       	sbrc	r10, 7
 d8a:	80 81       	ld	r24, Z
 d8c:	81 11       	cpse	r24, r1
 d8e:	28 c0       	rjmp	.+80     	; 0xde0 <__EEPROM_REGION_LENGTH__+0x5e0>
 d90:	ff 20       	and	r15, r15
 d92:	09 f4       	brne	.+2      	; 0xd96 <__EEPROM_REGION_LENGTH__+0x596>
 d94:	d2 cc       	rjmp	.-1628   	; 0x73a <vfprintf+0x72>
 d96:	b6 01       	movw	r22, r12
 d98:	80 e2       	ldi	r24, 0x20	; 32
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 da0:	fa 94       	dec	r15
 da2:	f6 cf       	rjmp	.-20     	; 0xd90 <__EEPROM_REGION_LENGTH__+0x590>
 da4:	f6 01       	movw	r30, r12
 da6:	87 81       	ldd	r24, Z+7	; 0x07
 da8:	90 85       	ldd	r25, Z+8	; 0x08
 daa:	2c c0       	rjmp	.+88     	; 0xe04 <__EEPROM_REGION_LENGTH__+0x604>
 dac:	8f ef       	ldi	r24, 0xFF	; 255
 dae:	9f ef       	ldi	r25, 0xFF	; 255
 db0:	29 c0       	rjmp	.+82     	; 0xe04 <__EEPROM_REGION_LENGTH__+0x604>
 db2:	b6 01       	movw	r22, r12
 db4:	80 e2       	ldi	r24, 0x20	; 32
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 dbc:	fa 94       	dec	r15
 dbe:	f1 10       	cpse	r15, r1
 dc0:	f8 cf       	rjmp	.-16     	; 0xdb2 <__EEPROM_REGION_LENGTH__+0x5b2>
 dc2:	d4 cf       	rjmp	.-88     	; 0xd6c <__EEPROM_REGION_LENGTH__+0x56c>
 dc4:	f1 2c       	mov	r15, r1
 dc6:	b6 01       	movw	r22, r12
 dc8:	80 2f       	mov	r24, r16
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 dd0:	cf cf       	rjmp	.-98     	; 0xd70 <__EEPROM_REGION_LENGTH__+0x570>
 dd2:	43 eb       	ldi	r20, 0xB3	; 179
 dd4:	84 2e       	mov	r8, r20
 dd6:	46 e0       	ldi	r20, 0x06	; 6
 dd8:	94 2e       	mov	r9, r20
 dda:	40 e0       	ldi	r20, 0x00	; 0
 ddc:	a4 2e       	mov	r10, r20
 dde:	d0 cf       	rjmp	.-96     	; 0xd80 <__EEPROM_REGION_LENGTH__+0x580>
 de0:	01 11       	cpse	r16, r1
 de2:	80 52       	subi	r24, 0x20	; 32
 de4:	b6 01       	movw	r22, r12
 de6:	90 e0       	ldi	r25, 0x00	; 0
 de8:	0e 94 64 18 	call	0x30c8	; 0x30c8 <fputc>
 dec:	ff ef       	ldi	r31, 0xFF	; 255
 dee:	8f 1a       	sub	r8, r31
 df0:	9f 0a       	sbc	r9, r31
 df2:	af 0a       	sbc	r10, r31
 df4:	c7 cf       	rjmp	.-114    	; 0xd84 <__EEPROM_REGION_LENGTH__+0x584>
 df6:	23 e0       	ldi	r18, 0x03	; 3
 df8:	2f 15       	cp	r18, r15
 dfa:	10 f4       	brcc	.+4      	; 0xe00 <__EEPROM_REGION_LENGTH__+0x600>
 dfc:	83 e0       	ldi	r24, 0x03	; 3
 dfe:	b3 cf       	rjmp	.-154    	; 0xd66 <__EEPROM_REGION_LENGTH__+0x566>
 e00:	f1 2c       	mov	r15, r1
 e02:	b6 cf       	rjmp	.-148    	; 0xd70 <__EEPROM_REGION_LENGTH__+0x570>
 e04:	64 96       	adiw	r28, 0x14	; 20
 e06:	e2 e1       	ldi	r30, 0x12	; 18
 e08:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

0000446a <__udivmodhi4>:
    446a:	aa 1b       	sub	r26, r26
    446c:	bb 1b       	sub	r27, r27
    446e:	51 e1       	ldi	r21, 0x11	; 17
    4470:	07 c0       	rjmp	.+14     	; 0x4480 <__udivmodhi4_ep>

00004472 <__udivmodhi4_loop>:
    4472:	aa 1f       	adc	r26, r26
    4474:	bb 1f       	adc	r27, r27
    4476:	a6 17       	cp	r26, r22
    4478:	b7 07       	cpc	r27, r23
    447a:	10 f0       	brcs	.+4      	; 0x4480 <__udivmodhi4_ep>
    447c:	a6 1b       	sub	r26, r22
    447e:	b7 0b       	sbc	r27, r23

00004480 <__udivmodhi4_ep>:
    4480:	88 1f       	adc	r24, r24
    4482:	99 1f       	adc	r25, r25
    4484:	5a 95       	dec	r21
    4486:	a9 f7       	brne	.-22     	; 0x4472 <__udivmodhi4_loop>
    4488:	80 95       	com	r24
    448a:	90 95       	com	r25
    448c:	bc 01       	movw	r22, r24
    448e:	cd 01       	movw	r24, r26
    4490:	08 95       	ret

Disassembly of section .text.libgcc:

00004948 <__tablejump2__>:
    4948:	ee 0f       	add	r30, r30
    494a:	ff 1f       	adc	r31, r31
    494c:	05 90       	lpm	r0, Z+
    494e:	f4 91       	lpm	r31, Z
    4950:	e0 2d       	mov	r30, r0
    4952:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

000045dc <__umulhisi3>:
    45dc:	a2 9f       	mul	r26, r18
    45de:	b0 01       	movw	r22, r0
    45e0:	b3 9f       	mul	r27, r19
    45e2:	c0 01       	movw	r24, r0
    45e4:	a3 9f       	mul	r26, r19
    45e6:	70 0d       	add	r23, r0
    45e8:	81 1d       	adc	r24, r1
    45ea:	11 24       	eor	r1, r1
    45ec:	91 1d       	adc	r25, r1
    45ee:	b2 9f       	mul	r27, r18
    45f0:	70 0d       	add	r23, r0
    45f2:	81 1d       	adc	r24, r1
    45f4:	11 24       	eor	r1, r1
    45f6:	91 1d       	adc	r25, r1
    45f8:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000040a4 <__prologue_saves__>:
    40a4:	2f 92       	push	r2
    40a6:	3f 92       	push	r3
    40a8:	4f 92       	push	r4
    40aa:	5f 92       	push	r5
    40ac:	6f 92       	push	r6
    40ae:	7f 92       	push	r7
    40b0:	8f 92       	push	r8
    40b2:	9f 92       	push	r9
    40b4:	af 92       	push	r10
    40b6:	bf 92       	push	r11
    40b8:	cf 92       	push	r12
    40ba:	df 92       	push	r13
    40bc:	ef 92       	push	r14
    40be:	ff 92       	push	r15
    40c0:	0f 93       	push	r16
    40c2:	1f 93       	push	r17
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	cd b7       	in	r28, 0x3d	; 61
    40ca:	de b7       	in	r29, 0x3e	; 62
    40cc:	ca 1b       	sub	r28, r26
    40ce:	db 0b       	sbc	r29, r27
    40d0:	0f b6       	in	r0, 0x3f	; 63
    40d2:	f8 94       	cli
    40d4:	de bf       	out	0x3e, r29	; 62
    40d6:	0f be       	out	0x3f, r0	; 63
    40d8:	cd bf       	out	0x3d, r28	; 61
    40da:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00004112 <__epilogue_restores__>:
    4112:	2a 88       	ldd	r2, Y+18	; 0x12
    4114:	39 88       	ldd	r3, Y+17	; 0x11
    4116:	48 88       	ldd	r4, Y+16	; 0x10
    4118:	5f 84       	ldd	r5, Y+15	; 0x0f
    411a:	6e 84       	ldd	r6, Y+14	; 0x0e
    411c:	7d 84       	ldd	r7, Y+13	; 0x0d
    411e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4120:	9b 84       	ldd	r9, Y+11	; 0x0b
    4122:	aa 84       	ldd	r10, Y+10	; 0x0a
    4124:	b9 84       	ldd	r11, Y+9	; 0x09
    4126:	c8 84       	ldd	r12, Y+8	; 0x08
    4128:	df 80       	ldd	r13, Y+7	; 0x07
    412a:	ee 80       	ldd	r14, Y+6	; 0x06
    412c:	fd 80       	ldd	r15, Y+5	; 0x05
    412e:	0c 81       	ldd	r16, Y+4	; 0x04
    4130:	1b 81       	ldd	r17, Y+3	; 0x03
    4132:	aa 81       	ldd	r26, Y+2	; 0x02
    4134:	b9 81       	ldd	r27, Y+1	; 0x01
    4136:	ce 0f       	add	r28, r30
    4138:	d1 1d       	adc	r29, r1
    413a:	0f b6       	in	r0, 0x3f	; 63
    413c:	f8 94       	cli
    413e:	de bf       	out	0x3e, r29	; 62
    4140:	0f be       	out	0x3f, r0	; 63
    4142:	cd bf       	out	0x3d, r28	; 61
    4144:	ed 01       	movw	r28, r26
    4146:	08 95       	ret

Disassembly of section .text.avrlibc:

000049ca <atoi>:
    49ca:	0e 94 5f 24 	call	0x48be	; 0x48be <atol>
    49ce:	cb 01       	movw	r24, r22
    49d0:	08 95       	ret

Disassembly of section .text.avrlibc:

000048be <atol>:
    48be:	2a e0       	ldi	r18, 0x0A	; 10
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	40 e0       	ldi	r20, 0x00	; 0
    48c4:	50 e0       	ldi	r21, 0x00	; 0
    48c6:	0e 94 06 07 	call	0xe0c	; 0xe0c <strtol>
    48ca:	08 95       	ret

Disassembly of section .text.avrlibc:

00000e0c <strtol>:
     e0c:	2f 92       	push	r2
     e0e:	3f 92       	push	r3
     e10:	4f 92       	push	r4
     e12:	5f 92       	push	r5
     e14:	6f 92       	push	r6
     e16:	7f 92       	push	r7
     e18:	8f 92       	push	r8
     e1a:	af 92       	push	r10
     e1c:	bf 92       	push	r11
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <strtol+0x22>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <strtol+0x24>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <strtol+0x26>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	3b 01       	movw	r6, r22
     e38:	88 2e       	mov	r8, r24
     e3a:	5a 01       	movw	r10, r20
     e3c:	19 01       	movw	r2, r18
     e3e:	41 15       	cp	r20, r1
     e40:	51 05       	cpc	r21, r1
     e42:	21 f0       	breq	.+8      	; 0xe4c <strtol+0x40>
     e44:	fa 01       	movw	r30, r20
     e46:	60 83       	st	Z, r22
     e48:	71 83       	std	Z+1, r23	; 0x01
     e4a:	82 83       	std	Z+2, r24	; 0x02
     e4c:	21 14       	cp	r2, r1
     e4e:	31 04       	cpc	r3, r1
     e50:	29 f0       	breq	.+10     	; 0xe5c <strtol+0x50>
     e52:	c1 01       	movw	r24, r2
     e54:	02 97       	sbiw	r24, 0x02	; 2
     e56:	83 97       	sbiw	r24, 0x23	; 35
     e58:	08 f0       	brcs	.+2      	; 0xe5c <strtol+0x50>
     e5a:	1a c1       	rjmp	.+564    	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
     e5c:	e8 2c       	mov	r14, r8
     e5e:	63 01       	movw	r12, r6
     e60:	ff ef       	ldi	r31, 0xFF	; 255
     e62:	cf 1a       	sub	r12, r31
     e64:	df 0a       	sbc	r13, r31
     e66:	ef 0a       	sbc	r14, r31
     e68:	f3 01       	movw	r30, r6
     e6a:	14 91       	lpm	r17, Z
     e6c:	87 fc       	sbrc	r8, 7
     e6e:	10 81       	ld	r17, Z
     e70:	81 2f       	mov	r24, r17
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 cd 23 	call	0x479a	; 0x479a <isspace>
     e78:	4c 2d       	mov	r20, r12
     e7a:	3d 2d       	mov	r19, r13
     e7c:	2e 2d       	mov	r18, r14
     e7e:	89 2b       	or	r24, r25
     e80:	19 f0       	breq	.+6      	; 0xe88 <strtol+0x7c>
     e82:	36 01       	movw	r6, r12
     e84:	8e 2c       	mov	r8, r14
     e86:	ea cf       	rjmp	.-44     	; 0xe5c <strtol+0x50>
     e88:	1d 32       	cpi	r17, 0x2D	; 45
     e8a:	69 f4       	brne	.+26     	; 0xea6 <strtol+0x9a>
     e8c:	e8 2c       	mov	r14, r8
     e8e:	63 01       	movw	r12, r6
     e90:	52 e0       	ldi	r21, 0x02	; 2
     e92:	c5 0e       	add	r12, r21
     e94:	d1 1c       	adc	r13, r1
     e96:	e1 1c       	adc	r14, r1
     e98:	e4 2f       	mov	r30, r20
     e9a:	f3 2f       	mov	r31, r19
     e9c:	14 91       	lpm	r17, Z
     e9e:	27 fd       	sbrc	r18, 7
     ea0:	10 81       	ld	r17, Z
     ea2:	01 e0       	ldi	r16, 0x01	; 1
     ea4:	0e c0       	rjmp	.+28     	; 0xec2 <strtol+0xb6>
     ea6:	1b 32       	cpi	r17, 0x2B	; 43
     ea8:	59 f4       	brne	.+22     	; 0xec0 <strtol+0xb4>
     eaa:	e8 2c       	mov	r14, r8
     eac:	63 01       	movw	r12, r6
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	c8 0e       	add	r12, r24
     eb2:	d1 1c       	adc	r13, r1
     eb4:	e1 1c       	adc	r14, r1
     eb6:	e4 2f       	mov	r30, r20
     eb8:	f3 2f       	mov	r31, r19
     eba:	14 91       	lpm	r17, Z
     ebc:	27 fd       	sbrc	r18, 7
     ebe:	10 81       	ld	r17, Z
     ec0:	00 e0       	ldi	r16, 0x00	; 0
     ec2:	21 14       	cp	r2, r1
     ec4:	31 04       	cpc	r3, r1
     ec6:	09 f1       	breq	.+66     	; 0xf0a <strtol+0xfe>
     ec8:	90 e1       	ldi	r25, 0x10	; 16
     eca:	29 16       	cp	r2, r25
     ecc:	31 04       	cpc	r3, r1
     ece:	29 f4       	brne	.+10     	; 0xeda <strtol+0xce>
     ed0:	3f c0       	rjmp	.+126    	; 0xf50 <strtol+0x144>
     ed2:	10 e3       	ldi	r17, 0x30	; 48
     ed4:	21 14       	cp	r2, r1
     ed6:	31 04       	cpc	r3, r1
     ed8:	21 f1       	breq	.+72     	; 0xf22 <strtol+0x116>
     eda:	f8 e0       	ldi	r31, 0x08	; 8
     edc:	2f 16       	cp	r2, r31
     ede:	31 04       	cpc	r3, r1
     ee0:	01 f1       	breq	.+64     	; 0xf22 <strtol+0x116>
     ee2:	54 f4       	brge	.+20     	; 0xef8 <strtol+0xec>
     ee4:	32 e0       	ldi	r19, 0x02	; 2
     ee6:	23 16       	cp	r2, r19
     ee8:	31 04       	cpc	r3, r1
     eea:	21 f5       	brne	.+72     	; 0xf34 <strtol+0x128>
     eec:	41 2c       	mov	r4, r1
     eee:	51 2c       	mov	r5, r1
     ef0:	61 2c       	mov	r6, r1
     ef2:	50 e4       	ldi	r21, 0x40	; 64
     ef4:	75 2e       	mov	r7, r21
     ef6:	4b c0       	rjmp	.+150    	; 0xf8e <strtol+0x182>
     ef8:	4a e0       	ldi	r20, 0x0A	; 10
     efa:	24 16       	cp	r2, r20
     efc:	31 04       	cpc	r3, r1
     efe:	39 f0       	breq	.+14     	; 0xf0e <strtol+0x102>
     f00:	50 e1       	ldi	r21, 0x10	; 16
     f02:	25 16       	cp	r2, r21
     f04:	31 04       	cpc	r3, r1
     f06:	b1 f4       	brne	.+44     	; 0xf34 <strtol+0x128>
     f08:	3d c0       	rjmp	.+122    	; 0xf84 <strtol+0x178>
     f0a:	10 33       	cpi	r17, 0x30	; 48
     f0c:	19 f1       	breq	.+70     	; 0xf54 <strtol+0x148>
     f0e:	3a e0       	ldi	r19, 0x0A	; 10
     f10:	23 2e       	mov	r2, r19
     f12:	31 2c       	mov	r3, r1
     f14:	4c ec       	ldi	r20, 0xCC	; 204
     f16:	44 2e       	mov	r4, r20
     f18:	54 2c       	mov	r5, r4
     f1a:	64 2c       	mov	r6, r4
     f1c:	4c e0       	ldi	r20, 0x0C	; 12
     f1e:	74 2e       	mov	r7, r20
     f20:	36 c0       	rjmp	.+108    	; 0xf8e <strtol+0x182>
     f22:	98 e0       	ldi	r25, 0x08	; 8
     f24:	29 2e       	mov	r2, r25
     f26:	31 2c       	mov	r3, r1
     f28:	41 2c       	mov	r4, r1
     f2a:	51 2c       	mov	r5, r1
     f2c:	61 2c       	mov	r6, r1
     f2e:	20 e1       	ldi	r18, 0x10	; 16
     f30:	72 2e       	mov	r7, r18
     f32:	2d c0       	rjmp	.+90     	; 0xf8e <strtol+0x182>
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e8       	ldi	r25, 0x80	; 128
     f3c:	91 01       	movw	r18, r2
     f3e:	03 2c       	mov	r0, r3
     f40:	00 0c       	add	r0, r0
     f42:	44 0b       	sbc	r20, r20
     f44:	55 0b       	sbc	r21, r21
     f46:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__udivmodsi4>
     f4a:	29 01       	movw	r4, r18
     f4c:	3a 01       	movw	r6, r20
     f4e:	1f c0       	rjmp	.+62     	; 0xf8e <strtol+0x182>
     f50:	10 33       	cpi	r17, 0x30	; 48
     f52:	c1 f4       	brne	.+48     	; 0xf84 <strtol+0x178>
     f54:	f6 01       	movw	r30, r12
     f56:	84 91       	lpm	r24, Z
     f58:	e7 fc       	sbrc	r14, 7
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 7d       	andi	r24, 0xDF	; 223
     f5e:	88 35       	cpi	r24, 0x58	; 88
     f60:	09 f0       	breq	.+2      	; 0xf64 <strtol+0x158>
     f62:	b7 cf       	rjmp	.-146    	; 0xed2 <strtol+0xc6>
     f64:	ae 2d       	mov	r26, r14
     f66:	c6 01       	movw	r24, r12
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	a1 1d       	adc	r26, r1
     f6c:	fc 01       	movw	r30, r24
     f6e:	14 91       	lpm	r17, Z
     f70:	a7 fd       	sbrc	r26, 7
     f72:	10 81       	ld	r17, Z
     f74:	e2 e0       	ldi	r30, 0x02	; 2
     f76:	ce 0e       	add	r12, r30
     f78:	d1 1c       	adc	r13, r1
     f7a:	e1 1c       	adc	r14, r1
     f7c:	02 60       	ori	r16, 0x02	; 2
     f7e:	60 e1       	ldi	r22, 0x10	; 16
     f80:	26 2e       	mov	r2, r22
     f82:	31 2c       	mov	r3, r1
     f84:	41 2c       	mov	r4, r1
     f86:	51 2c       	mov	r5, r1
     f88:	61 2c       	mov	r6, r1
     f8a:	88 e0       	ldi	r24, 0x08	; 8
     f8c:	78 2e       	mov	r7, r24
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	cb 01       	movw	r24, r22
     f96:	91 01       	movw	r18, r2
     f98:	03 2c       	mov	r0, r3
     f9a:	00 0c       	add	r0, r0
     f9c:	44 0b       	sbc	r20, r20
     f9e:	55 0b       	sbc	r21, r21
     fa0:	29 83       	std	Y+1, r18	; 0x01
     fa2:	3a 83       	std	Y+2, r19	; 0x02
     fa4:	4b 83       	std	Y+3, r20	; 0x03
     fa6:	5c 83       	std	Y+4, r21	; 0x04
     fa8:	e0 ed       	ldi	r30, 0xD0	; 208
     faa:	e1 0f       	add	r30, r17
     fac:	ea 30       	cpi	r30, 0x0A	; 10
     fae:	60 f0       	brcs	.+24     	; 0xfc8 <strtol+0x1bc>
     fb0:	2f eb       	ldi	r18, 0xBF	; 191
     fb2:	21 0f       	add	r18, r17
     fb4:	2a 31       	cpi	r18, 0x1A	; 26
     fb6:	10 f4       	brcc	.+4      	; 0xfbc <strtol+0x1b0>
     fb8:	e9 ec       	ldi	r30, 0xC9	; 201
     fba:	05 c0       	rjmp	.+10     	; 0xfc6 <strtol+0x1ba>
     fbc:	2f e9       	ldi	r18, 0x9F	; 159
     fbe:	21 0f       	add	r18, r17
     fc0:	2a 31       	cpi	r18, 0x1A	; 26
     fc2:	50 f5       	brcc	.+84     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
     fc4:	e9 ea       	ldi	r30, 0xA9	; 169
     fc6:	e1 0f       	add	r30, r17
     fc8:	2e 2f       	mov	r18, r30
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	22 15       	cp	r18, r2
     fce:	33 05       	cpc	r19, r3
     fd0:	1c f5       	brge	.+70     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
     fd2:	a7 fd       	sbrc	r26, 7
     fd4:	18 c0       	rjmp	.+48     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     fd6:	46 16       	cp	r4, r22
     fd8:	57 06       	cpc	r5, r23
     fda:	68 06       	cpc	r6, r24
     fdc:	79 06       	cpc	r7, r25
     fde:	80 f0       	brcs	.+32     	; 0x1000 <__DATA_REGION_LENGTH__>
     fe0:	29 81       	ldd	r18, Y+1	; 0x01
     fe2:	3a 81       	ldd	r19, Y+2	; 0x02
     fe4:	4b 81       	ldd	r20, Y+3	; 0x03
     fe6:	5c 81       	ldd	r21, Y+4	; 0x04
     fe8:	0e 94 b1 22 	call	0x4562	; 0x4562 <__mulsi3>
     fec:	6e 0f       	add	r22, r30
     fee:	71 1d       	adc	r23, r1
     ff0:	81 1d       	adc	r24, r1
     ff2:	91 1d       	adc	r25, r1
     ff4:	61 30       	cpi	r22, 0x01	; 1
     ff6:	71 05       	cpc	r23, r1
     ff8:	81 05       	cpc	r24, r1
     ffa:	30 e8       	ldi	r19, 0x80	; 128
     ffc:	93 07       	cpc	r25, r19
     ffe:	10 f0       	brcs	.+4      	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
    1000:	af ef       	ldi	r26, 0xFF	; 255
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
    1004:	a1 e0       	ldi	r26, 0x01	; 1
    1006:	f6 01       	movw	r30, r12
    1008:	14 91       	lpm	r17, Z
    100a:	e7 fc       	sbrc	r14, 7
    100c:	10 81       	ld	r17, Z
    100e:	4f ef       	ldi	r20, 0xFF	; 255
    1010:	c4 1a       	sub	r12, r20
    1012:	d4 0a       	sbc	r13, r20
    1014:	e4 0a       	sbc	r14, r20
    1016:	c8 cf       	rjmp	.-112    	; 0xfa8 <strtol+0x19c>
    1018:	20 2f       	mov	r18, r16
    101a:	21 70       	andi	r18, 0x01	; 1
    101c:	a1 14       	cp	r10, r1
    101e:	b1 04       	cpc	r11, r1
    1020:	b1 f0       	breq	.+44     	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    1022:	aa 23       	and	r26, r26
    1024:	49 f0       	breq	.+18     	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
    1026:	51 e0       	ldi	r21, 0x01	; 1
    1028:	c5 1a       	sub	r12, r21
    102a:	d1 08       	sbc	r13, r1
    102c:	e1 08       	sbc	r14, r1
    102e:	f5 01       	movw	r30, r10
    1030:	c0 82       	st	Z, r12
    1032:	d1 82       	std	Z+1, r13	; 0x01
    1034:	e2 82       	std	Z+2, r14	; 0x02
    1036:	0b c0       	rjmp	.+22     	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    1038:	01 ff       	sbrs	r16, 1
    103a:	1d c0       	rjmp	.+58     	; 0x1076 <__DATA_REGION_LENGTH__+0x76>
    103c:	f2 e0       	ldi	r31, 0x02	; 2
    103e:	cf 1a       	sub	r12, r31
    1040:	d1 08       	sbc	r13, r1
    1042:	e1 08       	sbc	r14, r1
    1044:	f5 01       	movw	r30, r10
    1046:	c0 82       	st	Z, r12
    1048:	d1 82       	std	Z+1, r13	; 0x01
    104a:	e2 82       	std	Z+2, r14	; 0x02
    104c:	14 c0       	rjmp	.+40     	; 0x1076 <__DATA_REGION_LENGTH__+0x76>
    104e:	a7 ff       	sbrs	r26, 7
    1050:	12 c0       	rjmp	.+36     	; 0x1076 <__DATA_REGION_LENGTH__+0x76>
    1052:	22 23       	and	r18, r18
    1054:	29 f0       	breq	.+10     	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e8       	ldi	r25, 0x80	; 128
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <__DATA_REGION_LENGTH__+0x68>
    1060:	6f ef       	ldi	r22, 0xFF	; 255
    1062:	7f ef       	ldi	r23, 0xFF	; 255
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	9f e7       	ldi	r25, 0x7F	; 127
    1068:	22 e2       	ldi	r18, 0x22	; 34
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	30 93 b7 04 	sts	0x04B7, r19	; 0x8004b7 <errno+0x1>
    1070:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <errno>
    1074:	09 c0       	rjmp	.+18     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    1076:	22 23       	and	r18, r18
    1078:	81 f0       	breq	.+32     	; 0x109a <__DATA_REGION_LENGTH__+0x9a>
    107a:	90 95       	com	r25
    107c:	80 95       	com	r24
    107e:	70 95       	com	r23
    1080:	61 95       	neg	r22
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	8f 4f       	sbci	r24, 0xFF	; 255
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	46 2f       	mov	r20, r22
    108a:	37 2f       	mov	r19, r23
    108c:	28 2f       	mov	r18, r24
    108e:	12 c0       	rjmp	.+36     	; 0x10b4 <__DATA_REGION_LENGTH__+0xb4>
    1090:	40 e0       	ldi	r20, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0d c0       	rjmp	.+26     	; 0x10b4 <__DATA_REGION_LENGTH__+0xb4>
    109a:	97 ff       	sbrs	r25, 7
    109c:	f5 cf       	rjmp	.-22     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    109e:	82 e2       	ldi	r24, 0x22	; 34
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <errno+0x1>
    10a6:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <errno>
    10aa:	6f ef       	ldi	r22, 0xFF	; 255
    10ac:	7f ef       	ldi	r23, 0xFF	; 255
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	9f e7       	ldi	r25, 0x7F	; 127
    10b2:	ea cf       	rjmp	.-44     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    10b4:	64 2f       	mov	r22, r20
    10b6:	73 2f       	mov	r23, r19
    10b8:	82 2f       	mov	r24, r18
    10ba:	26 96       	adiw	r28, 0x06	; 6
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	8f 90       	pop	r8
    10da:	7f 90       	pop	r7
    10dc:	6f 90       	pop	r6
    10de:	5f 90       	pop	r5
    10e0:	4f 90       	pop	r4
    10e2:	3f 90       	pop	r3
    10e4:	2f 90       	pop	r2
    10e6:	08 95       	ret

Disassembly of section .text.avrlibc:

000015a6 <__ftoa_engine>:
    15a6:	28 30       	cpi	r18, 0x08	; 8
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <__ftoa_engine+0x6>
    15aa:	27 e0       	ldi	r18, 0x07	; 7
    15ac:	33 27       	eor	r19, r19
    15ae:	da 01       	movw	r26, r20
    15b0:	99 0f       	add	r25, r25
    15b2:	31 1d       	adc	r19, r1
    15b4:	87 fd       	sbrc	r24, 7
    15b6:	91 60       	ori	r25, 0x01	; 1
    15b8:	00 96       	adiw	r24, 0x00	; 0
    15ba:	61 05       	cpc	r22, r1
    15bc:	71 05       	cpc	r23, r1
    15be:	39 f4       	brne	.+14     	; 0x15ce <__ftoa_engine+0x28>
    15c0:	32 60       	ori	r19, 0x02	; 2
    15c2:	2e 5f       	subi	r18, 0xFE	; 254
    15c4:	3d 93       	st	X+, r19
    15c6:	30 e3       	ldi	r19, 0x30	; 48
    15c8:	2a 95       	dec	r18
    15ca:	e1 f7       	brne	.-8      	; 0x15c4 <__ftoa_engine+0x1e>
    15cc:	08 95       	ret
    15ce:	9f 3f       	cpi	r25, 0xFF	; 255
    15d0:	30 f0       	brcs	.+12     	; 0x15de <__ftoa_engine+0x38>
    15d2:	80 38       	cpi	r24, 0x80	; 128
    15d4:	71 05       	cpc	r23, r1
    15d6:	61 05       	cpc	r22, r1
    15d8:	09 f0       	breq	.+2      	; 0x15dc <__ftoa_engine+0x36>
    15da:	3c 5f       	subi	r19, 0xFC	; 252
    15dc:	3c 5f       	subi	r19, 0xFC	; 252
    15de:	3d 93       	st	X+, r19
    15e0:	91 30       	cpi	r25, 0x01	; 1
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <__ftoa_engine+0x40>
    15e4:	80 68       	ori	r24, 0x80	; 128
    15e6:	91 1d       	adc	r25, r1
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	1f 93       	push	r17
    15ee:	0f 93       	push	r16
    15f0:	ff 92       	push	r15
    15f2:	ef 92       	push	r14
    15f4:	19 2f       	mov	r17, r25
    15f6:	98 7f       	andi	r25, 0xF8	; 248
    15f8:	96 95       	lsr	r25
    15fa:	e9 2f       	mov	r30, r25
    15fc:	96 95       	lsr	r25
    15fe:	96 95       	lsr	r25
    1600:	e9 0f       	add	r30, r25
    1602:	ff 27       	eor	r31, r31
    1604:	e2 5f       	subi	r30, 0xF2	; 242
    1606:	fe 4f       	sbci	r31, 0xFE	; 254
    1608:	99 27       	eor	r25, r25
    160a:	33 27       	eor	r19, r19
    160c:	ee 24       	eor	r14, r14
    160e:	ff 24       	eor	r15, r15
    1610:	a7 01       	movw	r20, r14
    1612:	e7 01       	movw	r28, r14
    1614:	05 90       	lpm	r0, Z+
    1616:	08 94       	sec
    1618:	07 94       	ror	r0
    161a:	28 f4       	brcc	.+10     	; 0x1626 <__ftoa_engine+0x80>
    161c:	36 0f       	add	r19, r22
    161e:	e7 1e       	adc	r14, r23
    1620:	f8 1e       	adc	r15, r24
    1622:	49 1f       	adc	r20, r25
    1624:	51 1d       	adc	r21, r1
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	88 1f       	adc	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	06 94       	lsr	r0
    1630:	a1 f7       	brne	.-24     	; 0x161a <__ftoa_engine+0x74>
    1632:	05 90       	lpm	r0, Z+
    1634:	07 94       	ror	r0
    1636:	28 f4       	brcc	.+10     	; 0x1642 <__ftoa_engine+0x9c>
    1638:	e7 0e       	add	r14, r23
    163a:	f8 1e       	adc	r15, r24
    163c:	49 1f       	adc	r20, r25
    163e:	56 1f       	adc	r21, r22
    1640:	c1 1d       	adc	r28, r1
    1642:	77 0f       	add	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	66 1f       	adc	r22, r22
    164a:	06 94       	lsr	r0
    164c:	a1 f7       	brne	.-24     	; 0x1636 <__ftoa_engine+0x90>
    164e:	05 90       	lpm	r0, Z+
    1650:	07 94       	ror	r0
    1652:	28 f4       	brcc	.+10     	; 0x165e <__ftoa_engine+0xb8>
    1654:	f8 0e       	add	r15, r24
    1656:	49 1f       	adc	r20, r25
    1658:	56 1f       	adc	r21, r22
    165a:	c7 1f       	adc	r28, r23
    165c:	d1 1d       	adc	r29, r1
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	66 1f       	adc	r22, r22
    1664:	77 1f       	adc	r23, r23
    1666:	06 94       	lsr	r0
    1668:	a1 f7       	brne	.-24     	; 0x1652 <__ftoa_engine+0xac>
    166a:	05 90       	lpm	r0, Z+
    166c:	07 94       	ror	r0
    166e:	20 f4       	brcc	.+8      	; 0x1678 <__ftoa_engine+0xd2>
    1670:	49 0f       	add	r20, r25
    1672:	56 1f       	adc	r21, r22
    1674:	c7 1f       	adc	r28, r23
    1676:	d8 1f       	adc	r29, r24
    1678:	99 0f       	add	r25, r25
    167a:	66 1f       	adc	r22, r22
    167c:	77 1f       	adc	r23, r23
    167e:	88 1f       	adc	r24, r24
    1680:	06 94       	lsr	r0
    1682:	a9 f7       	brne	.-22     	; 0x166e <__ftoa_engine+0xc8>
    1684:	84 91       	lpm	r24, Z
    1686:	10 95       	com	r17
    1688:	17 70       	andi	r17, 0x07	; 7
    168a:	41 f0       	breq	.+16     	; 0x169c <__ftoa_engine+0xf6>
    168c:	d6 95       	lsr	r29
    168e:	c7 95       	ror	r28
    1690:	57 95       	ror	r21
    1692:	47 95       	ror	r20
    1694:	f7 94       	ror	r15
    1696:	e7 94       	ror	r14
    1698:	1a 95       	dec	r17
    169a:	c1 f7       	brne	.-16     	; 0x168c <__ftoa_engine+0xe6>
    169c:	e4 eb       	ldi	r30, 0xB4	; 180
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	68 94       	set
    16a2:	15 90       	lpm	r1, Z+
    16a4:	15 91       	lpm	r17, Z+
    16a6:	35 91       	lpm	r19, Z+
    16a8:	65 91       	lpm	r22, Z+
    16aa:	95 91       	lpm	r25, Z+
    16ac:	05 90       	lpm	r0, Z+
    16ae:	7f e2       	ldi	r23, 0x2F	; 47
    16b0:	73 95       	inc	r23
    16b2:	e1 18       	sub	r14, r1
    16b4:	f1 0a       	sbc	r15, r17
    16b6:	43 0b       	sbc	r20, r19
    16b8:	56 0b       	sbc	r21, r22
    16ba:	c9 0b       	sbc	r28, r25
    16bc:	d0 09       	sbc	r29, r0
    16be:	c0 f7       	brcc	.-16     	; 0x16b0 <__ftoa_engine+0x10a>
    16c0:	e1 0c       	add	r14, r1
    16c2:	f1 1e       	adc	r15, r17
    16c4:	43 1f       	adc	r20, r19
    16c6:	56 1f       	adc	r21, r22
    16c8:	c9 1f       	adc	r28, r25
    16ca:	d0 1d       	adc	r29, r0
    16cc:	7e f4       	brtc	.+30     	; 0x16ec <__ftoa_engine+0x146>
    16ce:	70 33       	cpi	r23, 0x30	; 48
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <__ftoa_engine+0x130>
    16d2:	8a 95       	dec	r24
    16d4:	e6 cf       	rjmp	.-52     	; 0x16a2 <__ftoa_engine+0xfc>
    16d6:	e8 94       	clt
    16d8:	01 50       	subi	r16, 0x01	; 1
    16da:	30 f0       	brcs	.+12     	; 0x16e8 <__ftoa_engine+0x142>
    16dc:	08 0f       	add	r16, r24
    16de:	0a f4       	brpl	.+2      	; 0x16e2 <__ftoa_engine+0x13c>
    16e0:	00 27       	eor	r16, r16
    16e2:	02 17       	cp	r16, r18
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <__ftoa_engine+0x142>
    16e6:	20 2f       	mov	r18, r16
    16e8:	23 95       	inc	r18
    16ea:	02 2f       	mov	r16, r18
    16ec:	7a 33       	cpi	r23, 0x3A	; 58
    16ee:	28 f0       	brcs	.+10     	; 0x16fa <__ftoa_engine+0x154>
    16f0:	79 e3       	ldi	r23, 0x39	; 57
    16f2:	7d 93       	st	X+, r23
    16f4:	2a 95       	dec	r18
    16f6:	e9 f7       	brne	.-6      	; 0x16f2 <__ftoa_engine+0x14c>
    16f8:	10 c0       	rjmp	.+32     	; 0x171a <__ftoa_engine+0x174>
    16fa:	7d 93       	st	X+, r23
    16fc:	2a 95       	dec	r18
    16fe:	89 f6       	brne	.-94     	; 0x16a2 <__ftoa_engine+0xfc>
    1700:	06 94       	lsr	r0
    1702:	97 95       	ror	r25
    1704:	67 95       	ror	r22
    1706:	37 95       	ror	r19
    1708:	17 95       	ror	r17
    170a:	17 94       	ror	r1
    170c:	e1 18       	sub	r14, r1
    170e:	f1 0a       	sbc	r15, r17
    1710:	43 0b       	sbc	r20, r19
    1712:	56 0b       	sbc	r21, r22
    1714:	c9 0b       	sbc	r28, r25
    1716:	d0 09       	sbc	r29, r0
    1718:	98 f0       	brcs	.+38     	; 0x1740 <__ftoa_engine+0x19a>
    171a:	23 95       	inc	r18
    171c:	7e 91       	ld	r23, -X
    171e:	73 95       	inc	r23
    1720:	7a 33       	cpi	r23, 0x3A	; 58
    1722:	08 f0       	brcs	.+2      	; 0x1726 <__ftoa_engine+0x180>
    1724:	70 e3       	ldi	r23, 0x30	; 48
    1726:	7c 93       	st	X, r23
    1728:	20 13       	cpse	r18, r16
    172a:	b8 f7       	brcc	.-18     	; 0x171a <__ftoa_engine+0x174>
    172c:	7e 91       	ld	r23, -X
    172e:	70 61       	ori	r23, 0x10	; 16
    1730:	7d 93       	st	X+, r23
    1732:	30 f0       	brcs	.+12     	; 0x1740 <__ftoa_engine+0x19a>
    1734:	83 95       	inc	r24
    1736:	71 e3       	ldi	r23, 0x31	; 49
    1738:	7d 93       	st	X+, r23
    173a:	70 e3       	ldi	r23, 0x30	; 48
    173c:	2a 95       	dec	r18
    173e:	e1 f7       	brne	.-8      	; 0x1738 <__ftoa_engine+0x192>
    1740:	11 24       	eor	r1, r1
    1742:	ef 90       	pop	r14
    1744:	ff 90       	pop	r15
    1746:	0f 91       	pop	r16
    1748:	1f 91       	pop	r17
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	99 27       	eor	r25, r25
    1750:	87 fd       	sbrc	r24, 7
    1752:	90 95       	com	r25
    1754:	08 95       	ret

Disassembly of section .text.avrlibc:

0000479a <isspace>:
    479a:	91 11       	cpse	r25, r1
    479c:	0c 94 f8 24 	jmp	0x49f0	; 0x49f0 <__ctype_isfalse>
    47a0:	80 32       	cpi	r24, 0x20	; 32
    47a2:	19 f0       	breq	.+6      	; 0x47aa <isspace+0x10>
    47a4:	89 50       	subi	r24, 0x09	; 9
    47a6:	85 50       	subi	r24, 0x05	; 5
    47a8:	c8 f7       	brcc	.-14     	; 0x479c <isspace+0x2>
    47aa:	08 95       	ret

Disassembly of section .text.avrlibc:

00004248 <memcpy>:
    4248:	cf 92       	push	r12
    424a:	df 92       	push	r13
    424c:	ef 92       	push	r14
    424e:	dc 01       	movw	r26, r24
    4250:	6a 01       	movw	r12, r20
    4252:	e6 2e       	mov	r14, r22
    4254:	28 0f       	add	r18, r24
    4256:	39 1f       	adc	r19, r25
    4258:	a2 17       	cp	r26, r18
    425a:	b3 07       	cpc	r27, r19
    425c:	51 f0       	breq	.+20     	; 0x4272 <memcpy+0x2a>
    425e:	f6 01       	movw	r30, r12
    4260:	44 91       	lpm	r20, Z
    4262:	e7 fc       	sbrc	r14, 7
    4264:	40 81       	ld	r20, Z
    4266:	4d 93       	st	X+, r20
    4268:	4f ef       	ldi	r20, 0xFF	; 255
    426a:	c4 1a       	sub	r12, r20
    426c:	d4 0a       	sbc	r13, r20
    426e:	e4 0a       	sbc	r14, r20
    4270:	f3 cf       	rjmp	.-26     	; 0x4258 <memcpy+0x10>
    4272:	ef 90       	pop	r14
    4274:	df 90       	pop	r13
    4276:	cf 90       	pop	r12
    4278:	08 95       	ret

Disassembly of section .text.avrlibc:

00003eca <strcmp>:
    3eca:	cf 92       	push	r12
    3ecc:	df 92       	push	r13
    3ece:	ef 92       	push	r14
    3ed0:	6b 01       	movw	r12, r22
    3ed2:	e8 2e       	mov	r14, r24
    3ed4:	f6 01       	movw	r30, r12
    3ed6:	84 91       	lpm	r24, Z
    3ed8:	e7 fc       	sbrc	r14, 7
    3eda:	80 81       	ld	r24, Z
    3edc:	f9 01       	movw	r30, r18
    3ede:	54 91       	lpm	r21, Z
    3ee0:	47 fd       	sbrc	r20, 7
    3ee2:	50 81       	ld	r21, Z
    3ee4:	85 13       	cpse	r24, r21
    3ee6:	0b c0       	rjmp	.+22     	; 0x3efe <strcmp+0x34>
    3ee8:	88 23       	and	r24, r24
    3eea:	41 f0       	breq	.+16     	; 0x3efc <strcmp+0x32>
    3eec:	8f ef       	ldi	r24, 0xFF	; 255
    3eee:	c8 1a       	sub	r12, r24
    3ef0:	d8 0a       	sbc	r13, r24
    3ef2:	e8 0a       	sbc	r14, r24
    3ef4:	2f 5f       	subi	r18, 0xFF	; 255
    3ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef8:	4f 4f       	sbci	r20, 0xFF	; 255
    3efa:	ec cf       	rjmp	.-40     	; 0x3ed4 <strcmp+0xa>
    3efc:	58 2f       	mov	r21, r24
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	85 1b       	sub	r24, r21
    3f02:	91 09       	sbc	r25, r1
    3f04:	ef 90       	pop	r14
    3f06:	df 90       	pop	r13
    3f08:	cf 90       	pop	r12
    3f0a:	08 95       	ret

Disassembly of section .text.avrlibc:

000033e0 <strncmp>:
    33e0:	cf 92       	push	r12
    33e2:	df 92       	push	r13
    33e4:	ef 92       	push	r14
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	6b 01       	movw	r12, r22
    33ec:	e8 2e       	mov	r14, r24
    33ee:	01 15       	cp	r16, r1
    33f0:	11 05       	cpc	r17, r1
    33f2:	19 f1       	breq	.+70     	; 0x343a <strncmp+0x5a>
    33f4:	01 50       	subi	r16, 0x01	; 1
    33f6:	11 09       	sbc	r17, r1
    33f8:	f6 01       	movw	r30, r12
    33fa:	84 91       	lpm	r24, Z
    33fc:	e7 fc       	sbrc	r14, 7
    33fe:	80 81       	ld	r24, Z
    3400:	88 23       	and	r24, r24
    3402:	99 f0       	breq	.+38     	; 0x342a <strncmp+0x4a>
    3404:	f9 01       	movw	r30, r18
    3406:	94 91       	lpm	r25, Z
    3408:	47 fd       	sbrc	r20, 7
    340a:	90 81       	ld	r25, Z
    340c:	99 23       	and	r25, r25
    340e:	69 f0       	breq	.+26     	; 0x342a <strncmp+0x4a>
    3410:	01 15       	cp	r16, r1
    3412:	11 05       	cpc	r17, r1
    3414:	51 f0       	breq	.+20     	; 0x342a <strncmp+0x4a>
    3416:	89 13       	cpse	r24, r25
    3418:	08 c0       	rjmp	.+16     	; 0x342a <strncmp+0x4a>
    341a:	8f ef       	ldi	r24, 0xFF	; 255
    341c:	c8 1a       	sub	r12, r24
    341e:	d8 0a       	sbc	r13, r24
    3420:	e8 0a       	sbc	r14, r24
    3422:	2f 5f       	subi	r18, 0xFF	; 255
    3424:	3f 4f       	sbci	r19, 0xFF	; 255
    3426:	4f 4f       	sbci	r20, 0xFF	; 255
    3428:	e5 cf       	rjmp	.-54     	; 0x33f4 <strncmp+0x14>
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	f9 01       	movw	r30, r18
    342e:	24 91       	lpm	r18, Z
    3430:	47 fd       	sbrc	r20, 7
    3432:	20 81       	ld	r18, Z
    3434:	82 1b       	sub	r24, r18
    3436:	91 09       	sbc	r25, r1
    3438:	02 c0       	rjmp	.+4      	; 0x343e <strncmp+0x5e>
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	1f 91       	pop	r17
    3440:	0f 91       	pop	r16
    3442:	ef 90       	pop	r14
    3444:	df 90       	pop	r13
    3446:	cf 90       	pop	r12
    3448:	08 95       	ret

Disassembly of section .text.avrlibc:

000043c6 <strlen>:
    43c6:	cf 92       	push	r12
    43c8:	df 92       	push	r13
    43ca:	ef 92       	push	r14
    43cc:	6b 01       	movw	r12, r22
    43ce:	e8 2e       	mov	r14, r24
    43d0:	a8 2f       	mov	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	fc 01       	movw	r30, r24
    43d6:	24 91       	lpm	r18, Z
    43d8:	a7 fd       	sbrc	r26, 7
    43da:	20 81       	ld	r18, Z
    43dc:	22 23       	and	r18, r18
    43de:	19 f0       	breq	.+6      	; 0x43e6 <strlen+0x20>
    43e0:	01 96       	adiw	r24, 0x01	; 1
    43e2:	a1 1d       	adc	r26, r1
    43e4:	f7 cf       	rjmp	.-18     	; 0x43d4 <strlen+0xe>
    43e6:	8c 19       	sub	r24, r12
    43e8:	9d 09       	sbc	r25, r13
    43ea:	ef 90       	pop	r14
    43ec:	df 90       	pop	r13
    43ee:	cf 90       	pop	r12
    43f0:	08 95       	ret

Disassembly of section .text.avrlibc:

000045fa <strcpy>:
    45fa:	9a 01       	movw	r18, r20
    45fc:	46 2f       	mov	r20, r22
    45fe:	dc 01       	movw	r26, r24
    4600:	f9 01       	movw	r30, r18
    4602:	54 91       	lpm	r21, Z
    4604:	47 fd       	sbrc	r20, 7
    4606:	50 81       	ld	r21, Z
    4608:	5d 93       	st	X+, r21
    460a:	55 23       	and	r21, r21
    460c:	21 f0       	breq	.+8      	; 0x4616 <strcpy+0x1c>
    460e:	2f 5f       	subi	r18, 0xFF	; 255
    4610:	3f 4f       	sbci	r19, 0xFF	; 255
    4612:	4f 4f       	sbci	r20, 0xFF	; 255
    4614:	f5 cf       	rjmp	.-22     	; 0x4600 <strcpy+0x6>
    4616:	08 95       	ret

Disassembly of section .text.avrlibc:

00004148 <strnlen>:
    4148:	cf 92       	push	r12
    414a:	df 92       	push	r13
    414c:	ef 92       	push	r14
    414e:	6b 01       	movw	r12, r22
    4150:	e8 2e       	mov	r14, r24
    4152:	a8 2f       	mov	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	41 15       	cp	r20, r1
    4158:	51 05       	cpc	r21, r1
    415a:	31 f4       	brne	.+12     	; 0x4168 <strnlen+0x20>
    415c:	8c 19       	sub	r24, r12
    415e:	9d 09       	sbc	r25, r13
    4160:	ef 90       	pop	r14
    4162:	df 90       	pop	r13
    4164:	cf 90       	pop	r12
    4166:	08 95       	ret
    4168:	fc 01       	movw	r30, r24
    416a:	24 91       	lpm	r18, Z
    416c:	a7 fd       	sbrc	r26, 7
    416e:	20 81       	ld	r18, Z
    4170:	22 23       	and	r18, r18
    4172:	a1 f3       	breq	.-24     	; 0x415c <strnlen+0x14>
    4174:	01 96       	adiw	r24, 0x01	; 1
    4176:	a1 1d       	adc	r26, r1
    4178:	41 50       	subi	r20, 0x01	; 1
    417a:	51 09       	sbc	r21, r1
    417c:	ec cf       	rjmp	.-40     	; 0x4156 <strnlen+0xe>

Disassembly of section .text.avrlibc:

000030c8 <fputc>:
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	fb 01       	movw	r30, r22
    30d2:	24 81       	ldd	r18, Z+4	; 0x04
    30d4:	21 fd       	sbrc	r18, 1
    30d6:	03 c0       	rjmp	.+6      	; 0x30de <fputc+0x16>
    30d8:	8f ef       	ldi	r24, 0xFF	; 255
    30da:	9f ef       	ldi	r25, 0xFF	; 255
    30dc:	2c c0       	rjmp	.+88     	; 0x3136 <fputc+0x6e>
    30de:	22 ff       	sbrs	r18, 2
    30e0:	16 c0       	rjmp	.+44     	; 0x310e <fputc+0x46>
    30e2:	47 81       	ldd	r20, Z+7	; 0x07
    30e4:	50 85       	ldd	r21, Z+8	; 0x08
    30e6:	25 81       	ldd	r18, Z+5	; 0x05
    30e8:	36 81       	ldd	r19, Z+6	; 0x06
    30ea:	42 17       	cp	r20, r18
    30ec:	53 07       	cpc	r21, r19
    30ee:	44 f4       	brge	.+16     	; 0x3100 <fputc+0x38>
    30f0:	a0 81       	ld	r26, Z
    30f2:	b1 81       	ldd	r27, Z+1	; 0x01
    30f4:	9d 01       	movw	r18, r26
    30f6:	2f 5f       	subi	r18, 0xFF	; 255
    30f8:	3f 4f       	sbci	r19, 0xFF	; 255
    30fa:	31 83       	std	Z+1, r19	; 0x01
    30fc:	20 83       	st	Z, r18
    30fe:	8c 93       	st	X, r24
    3100:	27 81       	ldd	r18, Z+7	; 0x07
    3102:	30 85       	ldd	r19, Z+8	; 0x08
    3104:	2f 5f       	subi	r18, 0xFF	; 255
    3106:	3f 4f       	sbci	r19, 0xFF	; 255
    3108:	30 87       	std	Z+8, r19	; 0x08
    310a:	27 83       	std	Z+7, r18	; 0x07
    310c:	14 c0       	rjmp	.+40     	; 0x3136 <fputc+0x6e>
    310e:	8b 01       	movw	r16, r22
    3110:	ec 01       	movw	r28, r24
    3112:	fb 01       	movw	r30, r22
    3114:	01 84       	ldd	r0, Z+9	; 0x09
    3116:	f2 85       	ldd	r31, Z+10	; 0x0a
    3118:	e0 2d       	mov	r30, r0
    311a:	09 95       	icall
    311c:	89 2b       	or	r24, r25
    311e:	e1 f6       	brne	.-72     	; 0x30d8 <fputc+0x10>
    3120:	d8 01       	movw	r26, r16
    3122:	17 96       	adiw	r26, 0x07	; 7
    3124:	8d 91       	ld	r24, X+
    3126:	9c 91       	ld	r25, X
    3128:	18 97       	sbiw	r26, 0x08	; 8
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	18 96       	adiw	r26, 0x08	; 8
    312e:	9c 93       	st	X, r25
    3130:	8e 93       	st	-X, r24
    3132:	17 97       	sbiw	r26, 0x07	; 7
    3134:	ce 01       	movw	r24, r28
    3136:	df 91       	pop	r29
    3138:	cf 91       	pop	r28
    313a:	1f 91       	pop	r17
    313c:	0f 91       	pop	r16
    313e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003d34 <sprintf>:
    3d34:	af e0       	ldi	r26, 0x0F	; 15
    3d36:	b0 e0       	ldi	r27, 0x00	; 0
    3d38:	e0 ea       	ldi	r30, 0xA0	; 160
    3d3a:	fe e1       	ldi	r31, 0x1E	; 30
    3d3c:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__prologue_saves__+0x1c>
    3d40:	0e 89       	ldd	r16, Y+22	; 0x16
    3d42:	1f 89       	ldd	r17, Y+23	; 0x17
    3d44:	86 e0       	ldi	r24, 0x06	; 6
    3d46:	8d 83       	std	Y+5, r24	; 0x05
    3d48:	1a 83       	std	Y+2, r17	; 0x02
    3d4a:	09 83       	std	Y+1, r16	; 0x01
    3d4c:	8f ef       	ldi	r24, 0xFF	; 255
    3d4e:	9f e7       	ldi	r25, 0x7F	; 127
    3d50:	9f 83       	std	Y+7, r25	; 0x07
    3d52:	8e 83       	std	Y+6, r24	; 0x06
    3d54:	9e 01       	movw	r18, r28
    3d56:	25 5e       	subi	r18, 0xE5	; 229
    3d58:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5a:	48 8d       	ldd	r20, Y+24	; 0x18
    3d5c:	59 8d       	ldd	r21, Y+25	; 0x19
    3d5e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3d60:	ce 01       	movw	r24, r28
    3d62:	01 96       	adiw	r24, 0x01	; 1
    3d64:	0e 94 64 03 	call	0x6c8	; 0x6c8 <vfprintf>
    3d68:	e8 85       	ldd	r30, Y+8	; 0x08
    3d6a:	f9 85       	ldd	r31, Y+9	; 0x09
    3d6c:	e0 0f       	add	r30, r16
    3d6e:	f1 1f       	adc	r31, r17
    3d70:	10 82       	st	Z, r1
    3d72:	2f 96       	adiw	r28, 0x0f	; 15
    3d74:	e4 e0       	ldi	r30, 0x04	; 4
    3d76:	0c 94 97 20 	jmp	0x412e	; 0x412e <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00002854 <__ultoa_invert>:
    2854:	fa 01       	movw	r30, r20
    2856:	aa 27       	eor	r26, r26
    2858:	28 30       	cpi	r18, 0x08	; 8
    285a:	51 f1       	breq	.+84     	; 0x28b0 <__ultoa_invert+0x5c>
    285c:	20 31       	cpi	r18, 0x10	; 16
    285e:	81 f1       	breq	.+96     	; 0x28c0 <__ultoa_invert+0x6c>
    2860:	e8 94       	clt
    2862:	6f 93       	push	r22
    2864:	6e 7f       	andi	r22, 0xFE	; 254
    2866:	6e 5f       	subi	r22, 0xFE	; 254
    2868:	7f 4f       	sbci	r23, 0xFF	; 255
    286a:	8f 4f       	sbci	r24, 0xFF	; 255
    286c:	9f 4f       	sbci	r25, 0xFF	; 255
    286e:	af 4f       	sbci	r26, 0xFF	; 255
    2870:	b1 e0       	ldi	r27, 0x01	; 1
    2872:	3e d0       	rcall	.+124    	; 0x28f0 <__ultoa_invert+0x9c>
    2874:	b4 e0       	ldi	r27, 0x04	; 4
    2876:	3c d0       	rcall	.+120    	; 0x28f0 <__ultoa_invert+0x9c>
    2878:	67 0f       	add	r22, r23
    287a:	78 1f       	adc	r23, r24
    287c:	89 1f       	adc	r24, r25
    287e:	9a 1f       	adc	r25, r26
    2880:	a1 1d       	adc	r26, r1
    2882:	68 0f       	add	r22, r24
    2884:	79 1f       	adc	r23, r25
    2886:	8a 1f       	adc	r24, r26
    2888:	91 1d       	adc	r25, r1
    288a:	a1 1d       	adc	r26, r1
    288c:	6a 0f       	add	r22, r26
    288e:	71 1d       	adc	r23, r1
    2890:	81 1d       	adc	r24, r1
    2892:	91 1d       	adc	r25, r1
    2894:	a1 1d       	adc	r26, r1
    2896:	20 d0       	rcall	.+64     	; 0x28d8 <__ultoa_invert+0x84>
    2898:	09 f4       	brne	.+2      	; 0x289c <__ultoa_invert+0x48>
    289a:	68 94       	set
    289c:	3f 91       	pop	r19
    289e:	2a e0       	ldi	r18, 0x0A	; 10
    28a0:	26 9f       	mul	r18, r22
    28a2:	11 24       	eor	r1, r1
    28a4:	30 19       	sub	r19, r0
    28a6:	30 5d       	subi	r19, 0xD0	; 208
    28a8:	31 93       	st	Z+, r19
    28aa:	de f6       	brtc	.-74     	; 0x2862 <__ultoa_invert+0xe>
    28ac:	cf 01       	movw	r24, r30
    28ae:	08 95       	ret
    28b0:	46 2f       	mov	r20, r22
    28b2:	47 70       	andi	r20, 0x07	; 7
    28b4:	40 5d       	subi	r20, 0xD0	; 208
    28b6:	41 93       	st	Z+, r20
    28b8:	b3 e0       	ldi	r27, 0x03	; 3
    28ba:	0f d0       	rcall	.+30     	; 0x28da <__ultoa_invert+0x86>
    28bc:	c9 f7       	brne	.-14     	; 0x28b0 <__ultoa_invert+0x5c>
    28be:	f6 cf       	rjmp	.-20     	; 0x28ac <__ultoa_invert+0x58>
    28c0:	46 2f       	mov	r20, r22
    28c2:	4f 70       	andi	r20, 0x0F	; 15
    28c4:	40 5d       	subi	r20, 0xD0	; 208
    28c6:	4a 33       	cpi	r20, 0x3A	; 58
    28c8:	18 f0       	brcs	.+6      	; 0x28d0 <__ultoa_invert+0x7c>
    28ca:	49 5d       	subi	r20, 0xD9	; 217
    28cc:	31 fd       	sbrc	r19, 1
    28ce:	40 52       	subi	r20, 0x20	; 32
    28d0:	41 93       	st	Z+, r20
    28d2:	02 d0       	rcall	.+4      	; 0x28d8 <__ultoa_invert+0x84>
    28d4:	a9 f7       	brne	.-22     	; 0x28c0 <__ultoa_invert+0x6c>
    28d6:	ea cf       	rjmp	.-44     	; 0x28ac <__ultoa_invert+0x58>
    28d8:	b4 e0       	ldi	r27, 0x04	; 4
    28da:	a6 95       	lsr	r26
    28dc:	97 95       	ror	r25
    28de:	87 95       	ror	r24
    28e0:	77 95       	ror	r23
    28e2:	67 95       	ror	r22
    28e4:	ba 95       	dec	r27
    28e6:	c9 f7       	brne	.-14     	; 0x28da <__ultoa_invert+0x86>
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	61 05       	cpc	r22, r1
    28ec:	71 05       	cpc	r23, r1
    28ee:	08 95       	ret
    28f0:	9b 01       	movw	r18, r22
    28f2:	ac 01       	movw	r20, r24
    28f4:	0a 2e       	mov	r0, r26
    28f6:	06 94       	lsr	r0
    28f8:	57 95       	ror	r21
    28fa:	47 95       	ror	r20
    28fc:	37 95       	ror	r19
    28fe:	27 95       	ror	r18
    2900:	ba 95       	dec	r27
    2902:	c9 f7       	brne	.-14     	; 0x28f6 <__ultoa_invert+0xa2>
    2904:	62 0f       	add	r22, r18
    2906:	73 1f       	adc	r23, r19
    2908:	84 1f       	adc	r24, r20
    290a:	95 1f       	adc	r25, r21
    290c:	a0 1d       	adc	r26, r0
    290e:	08 95       	ret

Disassembly of section .text.avrlibc:

000049f0 <__ctype_isfalse>:
    49f0:	99 27       	eor	r25, r25
    49f2:	88 27       	eor	r24, r24

000049f4 <__ctype_istrue>:
    49f4:	08 95       	ret

Disassembly of section .text.avrlibc:

000044b8 <eeprom_read_block>:
    44b8:	ba 01       	movw	r22, r20
    44ba:	a9 01       	movw	r20, r18
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22

000044c0 <eeprom_read_blraw>:
    44c0:	fc 01       	movw	r30, r24
    44c2:	f9 99       	sbic	0x1f, 1	; 31
    44c4:	fe cf       	rjmp	.-4      	; 0x44c2 <eeprom_read_blraw+0x2>
    44c6:	06 c0       	rjmp	.+12     	; 0x44d4 <eeprom_read_blraw+0x14>
    44c8:	f2 bd       	out	0x22, r31	; 34
    44ca:	e1 bd       	out	0x21, r30	; 33
    44cc:	f8 9a       	sbi	0x1f, 0	; 31
    44ce:	31 96       	adiw	r30, 0x01	; 1
    44d0:	00 b4       	in	r0, 0x20	; 32
    44d2:	0d 92       	st	X+, r0
    44d4:	41 50       	subi	r20, 0x01	; 1
    44d6:	50 40       	sbci	r21, 0x00	; 0
    44d8:	b8 f7       	brcc	.-18     	; 0x44c8 <eeprom_read_blraw+0x8>
    44da:	08 95       	ret

Disassembly of section .text.avrlibc:

000047ac <eeprom_read_byte>:
    47ac:	cb 01       	movw	r24, r22
    47ae:	f9 99       	sbic	0x1f, 1	; 31
    47b0:	fe cf       	rjmp	.-4      	; 0x47ae <eeprom_read_byte+0x2>
    47b2:	92 bd       	out	0x22, r25	; 34
    47b4:	81 bd       	out	0x21, r24	; 33
    47b6:	f8 9a       	sbi	0x1f, 0	; 31
    47b8:	99 27       	eor	r25, r25
    47ba:	80 b5       	in	r24, 0x20	; 32
    47bc:	08 95       	ret

Disassembly of section .text.avrlibc:

000048cc <eeprom_read_dword>:
    48cc:	cb 01       	movw	r24, r22
    48ce:	a6 e1       	ldi	r26, 0x16	; 22
    48d0:	b0 e0       	ldi	r27, 0x00	; 0
    48d2:	44 e0       	ldi	r20, 0x04	; 4
    48d4:	50 e0       	ldi	r21, 0x00	; 0
    48d6:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000048da <eeprom_read_word>:
    48da:	cb 01       	movw	r24, r22
    48dc:	a8 e1       	ldi	r26, 0x18	; 24
    48de:	b0 e0       	ldi	r27, 0x00	; 0
    48e0:	42 e0       	ldi	r20, 0x02	; 2
    48e2:	50 e0       	ldi	r21, 0x00	; 0
    48e4:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00003dbe <eeprom_update_block>:
    3dbe:	cf 92       	push	r12
    3dc0:	df 92       	push	r13
    3dc2:	ef 92       	push	r14
    3dc4:	21 50       	subi	r18, 0x01	; 1
    3dc6:	31 09       	sbc	r19, r1
    3dc8:	c0 f0       	brcs	.+48     	; 0x3dfa <eeprom_update_block+0x3c>
    3dca:	6b 01       	movw	r12, r22
    3dcc:	e8 2e       	mov	r14, r24
    3dce:	c2 0e       	add	r12, r18
    3dd0:	d3 1e       	adc	r13, r19
    3dd2:	e1 1c       	adc	r14, r1
    3dd4:	ca 01       	movw	r24, r20
    3dd6:	82 0f       	add	r24, r18
    3dd8:	93 1f       	adc	r25, r19
    3dda:	42 2f       	mov	r20, r18
    3ddc:	73 2f       	mov	r23, r19
    3dde:	f6 01       	movw	r30, r12
    3de0:	5e 2d       	mov	r21, r14
    3de2:	0e 94 c4 24 	call	0x4988	; 0x4988 <__xload_1>
    3de6:	26 2f       	mov	r18, r22
    3de8:	0e 94 6f 22 	call	0x44de	; 0x44de <eeprom_update_r18>
    3dec:	31 e0       	ldi	r19, 0x01	; 1
    3dee:	c3 1a       	sub	r12, r19
    3df0:	d1 08       	sbc	r13, r1
    3df2:	e1 08       	sbc	r14, r1
    3df4:	41 50       	subi	r20, 0x01	; 1
    3df6:	70 40       	sbci	r23, 0x00	; 0
    3df8:	90 f7       	brcc	.-28     	; 0x3dde <eeprom_update_block+0x20>
    3dfa:	ef 90       	pop	r14
    3dfc:	df 90       	pop	r13
    3dfe:	cf 90       	pop	r12
    3e00:	08 95       	ret

Disassembly of section .text.avrlibc:

000044dc <eeprom_update_byte>:
    44dc:	26 2f       	mov	r18, r22

000044de <eeprom_update_r18>:
    44de:	f9 99       	sbic	0x1f, 1	; 31
    44e0:	fe cf       	rjmp	.-4      	; 0x44de <eeprom_update_r18>
    44e2:	92 bd       	out	0x22, r25	; 34
    44e4:	81 bd       	out	0x21, r24	; 33
    44e6:	f8 9a       	sbi	0x1f, 0	; 31
    44e8:	01 97       	sbiw	r24, 0x01	; 1
    44ea:	00 b4       	in	r0, 0x20	; 32
    44ec:	02 16       	cp	r0, r18
    44ee:	39 f0       	breq	.+14     	; 0x44fe <eeprom_update_r18+0x20>
    44f0:	1f ba       	out	0x1f, r1	; 31
    44f2:	20 bd       	out	0x20, r18	; 32
    44f4:	0f b6       	in	r0, 0x3f	; 63
    44f6:	f8 94       	cli
    44f8:	fa 9a       	sbi	0x1f, 2	; 31
    44fa:	f9 9a       	sbi	0x1f, 1	; 31
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	08 95       	ret

Disassembly of section .text.avrlibc:

0000464e <eeprom_update_dword>:
    464e:	03 96       	adiw	r24, 0x03	; 3
    4650:	27 2f       	mov	r18, r23
    4652:	0e 94 6f 22 	call	0x44de	; 0x44de <eeprom_update_r18>
    4656:	0e 94 6e 22 	call	0x44dc	; 0x44dc <eeprom_update_byte>
    465a:	25 2f       	mov	r18, r21
    465c:	0e 94 6f 22 	call	0x44de	; 0x44de <eeprom_update_r18>
    4660:	24 2f       	mov	r18, r20
    4662:	0c 94 6f 22 	jmp	0x44de	; 0x44de <eeprom_update_r18>

Disassembly of section .text.avrlibc:

00004954 <eeprom_update_word>:
    4954:	01 96       	adiw	r24, 0x01	; 1
    4956:	27 2f       	mov	r18, r23
    4958:	0e 94 6f 22 	call	0x44de	; 0x44de <eeprom_update_r18>
    495c:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00004562 <__mulsi3>:
    4562:	db 01       	movw	r26, r22
    4564:	8f 93       	push	r24
    4566:	9f 93       	push	r25
    4568:	0e 94 5f 23 	call	0x46be	; 0x46be <__muluhisi3>
    456c:	bf 91       	pop	r27
    456e:	af 91       	pop	r26
    4570:	a2 9f       	mul	r26, r18
    4572:	80 0d       	add	r24, r0
    4574:	91 1d       	adc	r25, r1
    4576:	a3 9f       	mul	r26, r19
    4578:	90 0d       	add	r25, r0
    457a:	b2 9f       	mul	r27, r18
    457c:	90 0d       	add	r25, r0
    457e:	11 24       	eor	r1, r1
    4580:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003e02 <__udivmodsi4>:
    3e02:	a1 e2       	ldi	r26, 0x21	; 33
    3e04:	1a 2e       	mov	r1, r26
    3e06:	aa 1b       	sub	r26, r26
    3e08:	bb 1b       	sub	r27, r27
    3e0a:	fd 01       	movw	r30, r26
    3e0c:	0d c0       	rjmp	.+26     	; 0x3e28 <__udivmodsi4_ep>

00003e0e <__udivmodsi4_loop>:
    3e0e:	aa 1f       	adc	r26, r26
    3e10:	bb 1f       	adc	r27, r27
    3e12:	ee 1f       	adc	r30, r30
    3e14:	ff 1f       	adc	r31, r31
    3e16:	a2 17       	cp	r26, r18
    3e18:	b3 07       	cpc	r27, r19
    3e1a:	e4 07       	cpc	r30, r20
    3e1c:	f5 07       	cpc	r31, r21
    3e1e:	20 f0       	brcs	.+8      	; 0x3e28 <__udivmodsi4_ep>
    3e20:	a2 1b       	sub	r26, r18
    3e22:	b3 0b       	sbc	r27, r19
    3e24:	e4 0b       	sbc	r30, r20
    3e26:	f5 0b       	sbc	r31, r21

00003e28 <__udivmodsi4_ep>:
    3e28:	66 1f       	adc	r22, r22
    3e2a:	77 1f       	adc	r23, r23
    3e2c:	88 1f       	adc	r24, r24
    3e2e:	99 1f       	adc	r25, r25
    3e30:	1a 94       	dec	r1
    3e32:	69 f7       	brne	.-38     	; 0x3e0e <__udivmodsi4_loop>
    3e34:	60 95       	com	r22
    3e36:	70 95       	com	r23
    3e38:	80 95       	com	r24
    3e3a:	90 95       	com	r25
    3e3c:	9b 01       	movw	r18, r22
    3e3e:	ac 01       	movw	r20, r24
    3e40:	bd 01       	movw	r22, r26
    3e42:	cf 01       	movw	r24, r30
    3e44:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000046be <__muluhisi3>:
    46be:	0e 94 ee 22 	call	0x45dc	; 0x45dc <__umulhisi3>
    46c2:	a5 9f       	mul	r26, r21
    46c4:	90 0d       	add	r25, r0
    46c6:	b4 9f       	mul	r27, r20
    46c8:	90 0d       	add	r25, r0
    46ca:	a4 9f       	mul	r26, r20
    46cc:	80 0d       	add	r24, r0
    46ce:	91 1d       	adc	r25, r1
    46d0:	11 24       	eor	r1, r1
    46d2:	08 95       	ret

Disassembly of section .text.libgcc:

00004988 <__xload_1>:
    4988:	57 fd       	sbrc	r21, 7
    498a:	60 81       	ld	r22, Z
    498c:	57 ff       	sbrs	r21, 7
    498e:	64 91       	lpm	r22, Z
    4990:	08 95       	ret
