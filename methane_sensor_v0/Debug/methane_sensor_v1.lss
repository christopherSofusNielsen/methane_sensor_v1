
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000498  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  00800100  00800100  00000498  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  000004c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028da  00000000  00000000  000006ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db8  00000000  00000000  00002fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e60  00000000  00000000  00003d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004ec  00000000  00000000  00004be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000295  00000000  00000000  000050d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009dd  00000000  00000000  00005365  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  00005d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000003de  000003de  00000492  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_1 00000014  000003b2  000003b2  00000466  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_16 00000094  000000e2  000000e2  00000196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .data.cnt     00000002  0080035a  000003e2  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .text.__vector_13 0000004e  0000025a  0000025a  0000030e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TWI_HAL_init 00000012  000003c6  000003c6  0000047a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_22 0000004a  000002a8  000002a8  0000035c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_20 00000074  00000176  00000176  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.rx_buffer_has_message 00000001  0080035c  0080035c  00000498  2**0
                  ALLOC
 22 .bss.rx_buffer_data_len 00000001  0080035d  0080035d  00000498  2**0
                  ALLOC
 23 .bss.tx_buffer_cursor 00000001  0080035e  0080035e  00000498  2**0
                  ALLOC
 24 .bss.tx_buffer_data_len 00000001  0080035f  0080035f  00000498  2**0
                  ALLOC
 25 .text.uart1_hal_init 0000003c  0000033c  0000033c  000003f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_30 0000004a  000002f2  000002f2  000003a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_28 00000070  000001ea  000001ea  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss.rx_buffer_has_message 00000001  00800360  00800360  00000498  2**0
                  ALLOC
 29 .bss.rx_buffer_data_len 00000001  00800361  00800361  00000498  2**0
                  ALLOC
 30 .bss.rx_buffer 00000064  008002f6  008002f6  00000498  2**0
                  ALLOC
 31 .bss.tx_buffer_cursor 00000001  00800362  00800362  00000498  2**0
                  ALLOC
 32 .bss.tx_buffer_data_len 00000001  00800363  00800363  00000498  2**0
                  ALLOC
 33 .bss.tx_buffer 000000c8  0080022e  0080022e  00000498  2**0
                  ALLOC
 34 .text.main    00000006  000003d8  000003d8  0000048c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.test_RTC_module_start 0000001c  00000396  00000396  0000044a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.libgcc.mul 0000001e  00000378  00000378  0000042c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_1>
   8:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
   c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  10:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  14:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  18:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  1c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  20:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  24:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  28:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  2c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  30:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_13>
  38:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  3c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_etext>
  44:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  48:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  4c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  50:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_20>
  54:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  58:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_22>
  5c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  60:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  64:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  68:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  6c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  70:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_28>
  74:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__bad_interrupt>
  78:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	03 5a       	subi	r16, 0xA3	; 163
  80:	80 03       	fmuls	r16, r16
  82:	5a 03       	fmul	r21, r18
  84:	5c 00       	.word	0x005c	; ????
  86:	03 e2       	ldi	r16, 0x23	; 35
  88:	03 5c       	subi	r16, 0xC3	; 195
  8a:	03 64       	ori	r16, 0x43	; 67
  8c:	80 00       	.word	0x0080	; ????

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e1       	ldi	r29, 0x10	; 16
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	ec e7       	ldi	r30, 0x7C	; 124
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	17 c0       	rjmp	.+46     	; 0xd0 <__do_clear_bss+0x8>
  a2:	b5 91       	lpm	r27, Z+
  a4:	a5 91       	lpm	r26, Z+
  a6:	35 91       	lpm	r19, Z+
  a8:	25 91       	lpm	r18, Z+
  aa:	05 91       	lpm	r16, Z+
  ac:	07 fd       	sbrc	r16, 7
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <__do_clear_bss>
  b0:	95 91       	lpm	r25, Z+
  b2:	85 91       	lpm	r24, Z+
  b4:	ef 01       	movw	r28, r30
  b6:	f9 2f       	mov	r31, r25
  b8:	e8 2f       	mov	r30, r24
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x20>
  c4:	fe 01       	movw	r30, r28
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <__do_clear_bss+0x8>

000000c8 <__do_clear_bss>:
  c8:	1d 92       	st	X+, r1
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	e1 f7       	brne	.-8      	; 0xc8 <__do_clear_bss>
  d0:	ed 38       	cpi	r30, 0x8D	; 141
  d2:	f4 07       	cpc	r31, r20
  d4:	31 f7       	brne	.-52     	; 0xa2 <__do_copy_data+0x8>
  d6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <main>
  da:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>

Disassembly of section .text:

000003de <__bad_interrupt>:
 3de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_1:

000003b2 <__vector_1>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 0);
}

ISR(INT0_vect){
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
	
}
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

Disassembly of section .text.__vector_16:

000000e2 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; //Set clock NOTE, this should be changed!
}

ISR(TIMER0_COMPA_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	//Only for test
	cnt++;
 104:	40 91 5a 03 	lds	r20, 0x035A	; 0x80035a <cnt>
 108:	50 91 5b 03 	lds	r21, 0x035B	; 0x80035b <cnt+0x1>
 10c:	4f 5f       	subi	r20, 0xFF	; 255
 10e:	5f 4f       	sbci	r21, 0xFF	; 255
 110:	50 93 5b 03 	sts	0x035B, r21	; 0x80035b <cnt+0x1>
 114:	40 93 5a 03 	sts	0x035A, r20	; 0x80035a <cnt>
	if(cnt%10==0){
 118:	9a 01       	movw	r18, r20
 11a:	ad ec       	ldi	r26, 0xCD	; 205
 11c:	bc ec       	ldi	r27, 0xCC	; 204
 11e:	0e 94 bc 01 	call	0x378	; 0x378 <__umulhisi3>
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	96 95       	lsr	r25
 12c:	87 95       	ror	r24
 12e:	9c 01       	movw	r18, r24
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	82 0f       	add	r24, r18
 142:	93 1f       	adc	r25, r19
 144:	48 17       	cp	r20, r24
 146:	59 07       	cpc	r21, r25
 148:	29 f4       	brne	.+10     	; 0x154 <__vector_16+0x72>
		_cb();		
 14a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 14e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 152:	09 95       	icall
	}
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

Disassembly of section .text.__vector_13:

0000025a <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
	_cb();
 27c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 280:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 284:	09 95       	icall
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	7f 91       	pop	r23
 294:	6f 91       	pop	r22
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

Disassembly of section .text.TWI_HAL_init:

000003c6 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
 3c6:	80 e2       	ldi	r24, 0x20	; 32
 3c8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
 3cc:	e9 eb       	ldi	r30, 0xB9	; 185
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	8c 7f       	andi	r24, 0xFC	; 252
 3d4:	80 83       	st	Z, r24
 3d6:	08 95       	ret

Disassembly of section .text.__vector_22:

000002a8 <__vector_22>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART0_TX_vect){
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 2b8:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <tx_buffer_cursor>
 2bc:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <tx_buffer_data_len>
 2c0:	e8 17       	cp	r30, r24
 2c2:	58 f4       	brcc	.+22     	; 0x2da <__vector_22+0x32>
		UDR0=tx_buffer[tx_buffer_cursor++];
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	8e 0f       	add	r24, r30
 2c8:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <tx_buffer_cursor>
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	ea 59       	subi	r30, 0x9A	; 154
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	80 81       	ld	r24, Z
 2d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <__vector_22+0x3a>
	}else{
		tx_buffer_cursor=0;
 2da:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <tx_buffer_cursor>
		tx_buffer_data_len=0;
 2de:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <tx_buffer_data_len>
	}
}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

Disassembly of section .text.__vector_20:

00000176 <__vector_20>:
	set_bit(UCSR0B, 3); //Enable Tx
	
	uint8_t data[1];
	data[0]=followUpByte;
	uart0_hal_send_message(data, 1);
}
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
 18a:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <rx_buffer_has_message>
 18e:	81 11       	cpse	r24, r1
 190:	0e c0       	rjmp	.+28     	; 0x1ae <__vector_20+0x38>
 192:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <rx_buffer_data_len>
 196:	e4 36       	cpi	r30, 0x64	; 100
 198:	50 f4       	brcc	.+20     	; 0x1ae <__vector_20+0x38>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	8e 0f       	add	r24, r30
 19e:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <rx_buffer_data_len>
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 1a8:	ee 5f       	subi	r30, 0xFE	; 254
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	80 83       	st	Z, r24
 1ae:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <rx_buffer_data_len>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	80 f0       	brcs	.+32     	; 0x1d6 <__vector_20+0x60>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fc 01       	movw	r30, r24
 1ba:	ef 5f       	subi	r30, 0xFF	; 255
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
 1be:	20 81       	ld	r18, Z
 1c0:	2a 30       	cpi	r18, 0x0A	; 10
 1c2:	49 f4       	brne	.+18     	; 0x1d6 <__vector_20+0x60>
 1c4:	fc 01       	movw	r30, r24
 1c6:	e0 50       	subi	r30, 0x00	; 0
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	8d 30       	cpi	r24, 0x0D	; 13
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <__vector_20+0x60>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <rx_buffer_has_message>
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

0000033c <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
 33c:	e9 ec       	ldi	r30, 0xC9	; 201
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	80 61       	ori	r24, 0x10	; 16
 344:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
 346:	80 81       	ld	r24, Z
 348:	88 60       	ori	r24, 0x08	; 8
 34a:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
 34c:	80 81       	ld	r24, Z
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
 352:	80 81       	ld	r24, Z
 354:	80 64       	ori	r24, 0x40	; 64
 356:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
 358:	e8 ec       	ldi	r30, 0xC8	; 200
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	82 60       	ori	r24, 0x02	; 2
 360:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
 368:	80 e1       	ldi	r24, 0x10	; 16
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
 370:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
 374:	78 94       	sei
 376:	08 95       	ret

Disassembly of section .text.__vector_30:

000002f2 <__vector_30>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	8f 93       	push	r24
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
 302:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <tx_buffer_cursor>
 306:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <tx_buffer_data_len>
 30a:	e8 17       	cp	r30, r24
 30c:	58 f4       	brcc	.+22     	; 0x324 <__vector_30+0x32>
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	8e 0f       	add	r24, r30
 312:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <tx_buffer_cursor>
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	e2 5d       	subi	r30, 0xD2	; 210
 31a:	fd 4f       	sbci	r31, 0xFD	; 253
 31c:	80 81       	ld	r24, Z
 31e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 322:	04 c0       	rjmp	.+8      	; 0x32c <__vector_30+0x3a>
 324:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <tx_buffer_cursor>
 328:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <tx_buffer_data_len>
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	8f 91       	pop	r24
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

Disassembly of section .text.__vector_28:

000001ea <__vector_28>:
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
 1fe:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <rx_buffer_has_message>
 202:	81 11       	cpse	r24, r1
 204:	0e c0       	rjmp	.+28     	; 0x222 <__vector_28+0x38>
 206:	e0 91 61 03 	lds	r30, 0x0361	; 0x800361 <rx_buffer_data_len>
 20a:	e4 36       	cpi	r30, 0x64	; 100
 20c:	50 f4       	brcc	.+20     	; 0x222 <__vector_28+0x38>
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	8e 0f       	add	r24, r30
 212:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <rx_buffer_data_len>
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 21c:	ea 50       	subi	r30, 0x0A	; 10
 21e:	fd 4f       	sbci	r31, 0xFD	; 253
 220:	80 83       	st	Z, r24
 222:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <rx_buffer_data_len>
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	eb 50       	subi	r30, 0x0B	; 11
 22c:	fd 4f       	sbci	r31, 0xFD	; 253
 22e:	20 81       	ld	r18, Z
 230:	2a 30       	cpi	r18, 0x0A	; 10
 232:	49 f4       	brne	.+18     	; 0x246 <__vector_28+0x5c>
 234:	fc 01       	movw	r30, r24
 236:	ec 50       	subi	r30, 0x0C	; 12
 238:	fd 4f       	sbci	r31, 0xFD	; 253
 23a:	80 81       	ld	r24, Z
 23c:	8d 30       	cpi	r24, 0x0D	; 13
 23e:	19 f4       	brne	.+6      	; 0x246 <__vector_28+0x5c>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <rx_buffer_has_message>
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

Disassembly of section .text.main:

000003d8 <main>:
	//test_EEPROM_module_start();
	//test_ADC_module_start();
	//test_RTC_module_start();
	//test_TC0_HAL_start();
	//test_TC1_HAL_start();
	test_RTC_module_start();
 3d8:	0e 94 cb 01 	call	0x396	; 0x396 <test_RTC_module_start>
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <main+0x4>

Disassembly of section .text.test_RTC_module_start:

00000396 <test_RTC_module_start>:
static void test_set_current_time();



void test_RTC_module_start(){
	uart1_hal_init();
 396:	0e 94 9e 01 	call	0x33c	; 0x33c <uart1_hal_init>
	TWI_HAL_init();
 39a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <TWI_HAL_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	2f ef       	ldi	r18, 0xFF	; 255
 3a0:	8e e9       	ldi	r24, 0x9E	; 158
 3a2:	94 e2       	ldi	r25, 0x24	; 36
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <test_RTC_module_start+0xe>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <test_RTC_module_start+0x18>
 3ae:	00 00       	nop
 3b0:	f6 cf       	rjmp	.-20     	; 0x39e <test_RTC_module_start+0x8>

Disassembly of section .text.libgcc.mul:

00000378 <__umulhisi3>:
 378:	a2 9f       	mul	r26, r18
 37a:	b0 01       	movw	r22, r0
 37c:	b3 9f       	mul	r27, r19
 37e:	c0 01       	movw	r24, r0
 380:	a3 9f       	mul	r26, r19
 382:	70 0d       	add	r23, r0
 384:	81 1d       	adc	r24, r1
 386:	11 24       	eor	r1, r1
 388:	91 1d       	adc	r25, r1
 38a:	b2 9f       	mul	r27, r18
 38c:	70 0d       	add	r23, r0
 38e:	81 1d       	adc	r24, r1
 390:	11 24       	eor	r1, r1
 392:	91 1d       	adc	r25, r1
 394:	08 95       	ret
