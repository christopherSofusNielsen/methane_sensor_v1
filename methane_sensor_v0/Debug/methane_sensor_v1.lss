
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004b6  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000190  00800100  00800100  000004b6  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000280  00000000  00000000  000004e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d6b  00000000  00000000  00000765  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f3a  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001083  00000000  00000000  0000440a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005f4  00000000  00000000  00005490  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a6  00000000  00000000  00005a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c5c  00000000  00000000  00005d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  00006986  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000043e  0000043e  000004b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.PM_HAL_LED_power_init 0000000e  0000042a  0000042a  0000049e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_3 00000014  00000416  00000416  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_16 0000004e  00000252  00000252  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss._cb      00000002  0080042a  0080042a  000004b6  2**0
                  ALLOC
 18 .text.__vector_13 0000004e  000002a0  000002a0  00000314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss._cb      00000002  0080042c  0080042c  000004b6  2**0
                  ALLOC
 20 .text.TC2_HAL_init 00000020  000003be  000003be  00000432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_9 00000098  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.cnt      00000001  0080042e  0080042e  000004b6  2**0
                  ALLOC
 23 .bss.callbacks 0000000a  00800420  00800420  000004b6  2**0
                  ALLOC
 24 .text.uart0_hal_init 0000003c  00000382  00000382  000003f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_22 0000004a  000002ee  000002ee  00000362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_20 00000074  0000016e  0000016e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .bss.rx_buffer_has_message 00000001  0080042f  0080042f  000004b6  2**0
                  ALLOC
 28 .bss.rx_buffer_data_len 00000001  00800430  00800430  000004b6  2**0
                  ALLOC
 29 .bss.tx_buffer_cursor 00000001  00800431  00800431  000004b6  2**0
                  ALLOC
 30 .bss.tx_buffer_data_len 00000001  00800432  00800432  000004b6  2**0
                  ALLOC
 31 .text.__vector_30 0000004a  00000338  00000338  000003ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__vector_28 00000070  000001e2  000001e2  00000256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .bss.rx_buffer_has_message 00000001  00800433  00800433  000004b6  2**0
                  ALLOC
 34 .bss.rx_buffer_data_len 00000001  00800434  00800434  000004b6  2**0
                  ALLOC
 35 .bss.rx_buffer 00000064  008003bc  008003bc  000004b6  2**0
                  ALLOC
 36 .bss.tx_buffer_cursor 00000001  00800435  00800435  000004b6  2**0
                  ALLOC
 37 .bss.tx_buffer_data_len 00000001  00800436  00800436  000004b6  2**0
                  ALLOC
 38 .bss.tx_buffer 0000012c  00800290  00800290  000004b6  2**0
                  ALLOC
 39 .text.main    00000018  000003fe  000003fe  00000472  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.test_LED_module_start 00000020  000003de  000003de  00000452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.test_runner 00000006  00000438  00000438  000004ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
   8:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
   c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_3>
  10:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  14:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  18:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  1c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  20:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_etext>
  28:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  2c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  30:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  34:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_13>
  38:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  3c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  40:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_16>
  44:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  48:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  4c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  50:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_20>
  54:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  58:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_22>
  5c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  60:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  64:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  68:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  6c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  70:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_28>
  74:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__bad_interrupt>
  78:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	04 37       	cpi	r16, 0x74	; 116
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d0 e1       	ldi	r29, 0x10	; 16
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 ff 01 	call	0x3fe	; 0x3fe <main>
  ce:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

0000043e <__bad_interrupt>:
 43e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_LED_power_init:

0000042a <PM_HAL_LED_power_init>:
		clear_bit(PORTD, 4);
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
 42a:	81 b1       	in	r24, 0x01	; 1
 42c:	80 68       	ori	r24, 0x80	; 128
 42e:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
 430:	82 b1       	in	r24, 0x02	; 2
 432:	8f 77       	andi	r24, 0x7F	; 127
 434:	82 b9       	out	0x02, r24	; 2
 436:	08 95       	ret

Disassembly of section .text.__vector_3:

00000416 <__vector_3>:

void PM_HAL_BC_power(bool on){
	if(on){
		set_bit(PORTD, 4);
	}else{
		clear_bit(PORTD, 4);
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

Disassembly of section .text.__vector_16:

00000252 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	_cb();
 274:	e0 91 2a 04 	lds	r30, 0x042A	; 0x80042a <_cb>
 278:	f0 91 2b 04 	lds	r31, 0x042B	; 0x80042b <_cb+0x1>
 27c:	09 95       	icall
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

Disassembly of section .text.__vector_13:

000002a0 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	_cb();
 2c2:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <_cb>
 2c6:	f0 91 2d 04 	lds	r31, 0x042D	; 0x80042d <_cb+0x1>
 2ca:	09 95       	icall
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

Disassembly of section .text.TC2_HAL_init:

000003be <TC2_HAL_init>:
static callback_ptr callbacks[MAX_CALLBACKS];
static uint8_t cbCounter=0;
static uint8_t cnt=0;

void TC2_HAL_init(){
	TCCR2A=0x02; //Set mode=CTC
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	TCCR2B=0x00; //Stop timer
 3c4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
	
	//Disable async
	ASSR=0x00;
 3c8:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
	
	TCNT2=0; //Set counter to 0
 3cc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
	OCR2A=251; //15 Hz, 31 event pr s
 3d0:	9b ef       	ldi	r25, 0xFB	; 251
 3d2:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	
	//Enable interrupt
	TIMSK2=0x02;
 3d6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
	sei();
 3da:	78 94       	sei
 3dc:	08 95       	ret

Disassembly of section .text.__vector_9:

000000d6 <__vector_9>:
static void start_timer(){
	TCCR2B=0x07;
}

static void stop_timer(){
	TCCR2B=0x00;
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	cf 93       	push	r28
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
  fa:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <cnt>
  fe:	9f 5f       	subi	r25, 0xFF	; 255
 100:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <cnt>
 104:	89 e0       	ldi	r24, 0x09	; 9
 106:	98 9f       	mul	r25, r24
 108:	21 2d       	mov	r18, r1
 10a:	11 24       	eor	r1, r1
 10c:	89 2f       	mov	r24, r25
 10e:	82 1b       	sub	r24, r18
 110:	86 95       	lsr	r24
 112:	82 0f       	add	r24, r18
 114:	82 95       	swap	r24
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	2f e1       	ldi	r18, 0x1F	; 31
 11a:	82 9f       	mul	r24, r18
 11c:	90 19       	sub	r25, r0
 11e:	11 24       	eor	r1, r1
 120:	91 11       	cpse	r25, r1
 122:	13 c0       	rjmp	.+38     	; 0x14a <__vector_9+0x74>
 124:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <cnt>
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	0d c0       	rjmp	.+26     	; 0x146 <__vector_9+0x70>
 12c:	ec 2f       	mov	r30, r28
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e0 5e       	subi	r30, 0xE0	; 224
 136:	fb 4f       	sbci	r31, 0xFB	; 251
 138:	01 90       	ld	r0, Z+
 13a:	f0 81       	ld	r31, Z
 13c:	e0 2d       	mov	r30, r0
 13e:	30 97       	sbiw	r30, 0x00	; 0
 140:	09 f0       	breq	.+2      	; 0x144 <__vector_9+0x6e>
 142:	09 95       	icall
 144:	cf 5f       	subi	r28, 0xFF	; 255
 146:	c5 30       	cpi	r28, 0x05	; 5
 148:	88 f3       	brcs	.-30     	; 0x12c <__vector_9+0x56>
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	cf 91       	pop	r28
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	7f 91       	pop	r23
 15a:	6f 91       	pop	r22
 15c:	5f 91       	pop	r21
 15e:	4f 91       	pop	r20
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

Disassembly of section .text.uart0_hal_init:

00000382 <uart0_hal_init>:
uint8_t rx_buffer_has_message=0;

static void copy_buffer(uint8_t msg[]);

void uart0_hal_init(){
	set_bit(UCSR0B, 4); //Enable Rx
 382:	e1 ec       	ldi	r30, 0xC1	; 193
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	80 61       	ori	r24, 0x10	; 16
 38a:	80 83       	st	Z, r24
	set_bit(UCSR0B, 3); //Enable Tx
 38c:	80 81       	ld	r24, Z
 38e:	88 60       	ori	r24, 0x08	; 8
 390:	80 83       	st	Z, r24
	set_bit(UCSR0B, 7); //interrupt Rx complete
 392:	80 81       	ld	r24, Z
 394:	80 68       	ori	r24, 0x80	; 128
 396:	80 83       	st	Z, r24
	set_bit(UCSR0B, 6); //interrupt Tx complete
 398:	80 81       	ld	r24, Z
 39a:	80 64       	ori	r24, 0x40	; 64
 39c:	80 83       	st	Z, r24
	set_bit(UCSR0A, 1); //Set double speed
 39e:	e0 ec       	ldi	r30, 0xC0	; 192
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	82 60       	ori	r24, 0x02	; 2
 3a6:	80 83       	st	Z, r24
	UCSR0C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
	UBRR0=(8000000/(8*57600))-1; //set baudrate
 3ae:	80 e1       	ldi	r24, 0x10	; 16
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
 3b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	sei();
 3ba:	78 94       	sei
 3bc:	08 95       	ret

Disassembly of section .text.__vector_22:

000002ee <__vector_22>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	8f 93       	push	r24
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
 2fe:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <tx_buffer_cursor>
 302:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <tx_buffer_data_len>
 306:	e8 17       	cp	r30, r24
 308:	58 f4       	brcc	.+22     	; 0x320 <__vector_22+0x32>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	8e 0f       	add	r24, r30
 30e:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <tx_buffer_cursor>
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	ec 59       	subi	r30, 0x9C	; 156
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	80 81       	ld	r24, Z
 31a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 31e:	04 c0       	rjmp	.+8      	; 0x328 <__vector_22+0x3a>
 320:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <tx_buffer_cursor>
 324:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <tx_buffer_data_len>
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

Disassembly of section .text.__vector_20:

0000016e <__vector_20>:
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
 182:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <rx_buffer_has_message>
 186:	81 11       	cpse	r24, r1
 188:	0e c0       	rjmp	.+28     	; 0x1a6 <__vector_20+0x38>
 18a:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <rx_buffer_data_len>
 18e:	e4 36       	cpi	r30, 0x64	; 100
 190:	50 f4       	brcc	.+20     	; 0x1a6 <__vector_20+0x38>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	8e 0f       	add	r24, r30
 196:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <rx_buffer_data_len>
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 1a0:	e0 50       	subi	r30, 0x00	; 0
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	80 83       	st	Z, r24
 1a6:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <rx_buffer_data_len>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	80 f0       	brcs	.+32     	; 0x1ce <__vector_20+0x60>
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	e1 50       	subi	r30, 0x01	; 1
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	20 81       	ld	r18, Z
 1b8:	2a 30       	cpi	r18, 0x0A	; 10
 1ba:	49 f4       	brne	.+18     	; 0x1ce <__vector_20+0x60>
 1bc:	fc 01       	movw	r30, r24
 1be:	e2 50       	subi	r30, 0x02	; 2
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	80 81       	ld	r24, Z
 1c4:	8d 30       	cpi	r24, 0x0D	; 13
 1c6:	19 f4       	brne	.+6      	; 0x1ce <__vector_20+0x60>
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <rx_buffer_has_message>
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

Disassembly of section .text.__vector_30:

00000338 <__vector_30>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART1_TX_vect){
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	8f 93       	push	r24
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 348:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <tx_buffer_cursor>
 34c:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <tx_buffer_data_len>
 350:	e8 17       	cp	r30, r24
 352:	58 f4       	brcc	.+22     	; 0x36a <__vector_30+0x32>
		UDR1=tx_buffer[tx_buffer_cursor++];
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	8e 0f       	add	r24, r30
 358:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <tx_buffer_cursor>
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	e0 57       	subi	r30, 0x70	; 112
 360:	fd 4f       	sbci	r31, 0xFD	; 253
 362:	80 81       	ld	r24, Z
 364:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 368:	04 c0       	rjmp	.+8      	; 0x372 <__vector_30+0x3a>
		}else{
		tx_buffer_cursor=0;
 36a:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <tx_buffer_cursor>
		tx_buffer_data_len=0;
 36e:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <tx_buffer_data_len>
	}
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	8f 91       	pop	r24
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

Disassembly of section .text.__vector_28:

000001e2 <__vector_28>:
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	msg[len]='\0';
	uart1_hal_clear_rx_buffer();
	return len;
}
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
 1f6:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <rx_buffer_has_message>
 1fa:	81 11       	cpse	r24, r1
 1fc:	0e c0       	rjmp	.+28     	; 0x21a <__vector_28+0x38>
 1fe:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <rx_buffer_data_len>
 202:	e4 36       	cpi	r30, 0x64	; 100
 204:	50 f4       	brcc	.+20     	; 0x21a <__vector_28+0x38>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	8e 0f       	add	r24, r30
 20a:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <rx_buffer_data_len>
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 214:	e4 54       	subi	r30, 0x44	; 68
 216:	fc 4f       	sbci	r31, 0xFC	; 252
 218:	80 83       	st	Z, r24
 21a:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <rx_buffer_data_len>
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	fc 01       	movw	r30, r24
 222:	e5 54       	subi	r30, 0x45	; 69
 224:	fc 4f       	sbci	r31, 0xFC	; 252
 226:	20 81       	ld	r18, Z
 228:	2a 30       	cpi	r18, 0x0A	; 10
 22a:	49 f4       	brne	.+18     	; 0x23e <__vector_28+0x5c>
 22c:	fc 01       	movw	r30, r24
 22e:	e6 54       	subi	r30, 0x46	; 70
 230:	fc 4f       	sbci	r31, 0xFC	; 252
 232:	80 81       	ld	r24, Z
 234:	8d 30       	cpi	r24, 0x0D	; 13
 236:	19 f4       	brne	.+6      	; 0x23e <__vector_28+0x5c>
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <rx_buffer_has_message>
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

Disassembly of section .text.main:

000003fe <main>:
#include "TEST/test_runner.h"
#include "PROGRAMS/MAINPG/MAINPG.h"

int main(void)
{
	test_runner();
 3fe:	0e 94 1c 02 	call	0x438	; 0x438 <test_runner>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 402:	2f ef       	ldi	r18, 0xFF	; 255
 404:	8d e3       	ldi	r24, 0x3D	; 61
 406:	99 e4       	ldi	r25, 0x49	; 73
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	80 40       	sbci	r24, 0x00	; 0
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	f6 cf       	rjmp	.-20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

Disassembly of section .text.test_LED_module_start:

000003de <test_LED_module_start>:

static void test_try_join();
static void test_sequences();

void test_LED_module_start(){
	uart0_hal_init();
 3de:	0e 94 c1 01 	call	0x382	; 0x382 <uart0_hal_init>
	PM_HAL_LED_power_init();
 3e2:	0e 94 15 02 	call	0x42a	; 0x42a <PM_HAL_LED_power_init>
	TC2_HAL_init();
 3e6:	0e 94 df 01 	call	0x3be	; 0x3be <TC2_HAL_init>
 3ea:	2f ef       	ldi	r18, 0xFF	; 255
 3ec:	83 ed       	ldi	r24, 0xD3	; 211
 3ee:	90 e3       	ldi	r25, 0x30	; 48
 3f0:	21 50       	subi	r18, 0x01	; 1
 3f2:	80 40       	sbci	r24, 0x00	; 0
 3f4:	90 40       	sbci	r25, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <test_LED_module_start+0x12>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <test_LED_module_start+0x1c>
 3fa:	00 00       	nop
 3fc:	f6 cf       	rjmp	.-20     	; 0x3ea <test_LED_module_start+0xc>

Disassembly of section .text.test_runner:

00000438 <test_runner>:
	//test_RTC_module_start();
	//test_UART0_HAL_start();
	//test_TC2_HAL_start();
	//test_MRPP_module_start();
	//test_PUMP_module_start();
	test_LED_module_start();
 438:	0e 94 ef 01 	call	0x3de	; 0x3de <test_LED_module_start>
 43c:	08 95       	ret
