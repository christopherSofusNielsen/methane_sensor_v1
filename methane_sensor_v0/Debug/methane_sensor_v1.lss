
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000041de  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b8  00800100  00800100  000041de  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000041de  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00004239  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000930  00000000  00000000  000042b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c0df  00000000  00000000  00004be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002603  00000000  00000000  00010cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000454b  00000000  00000000  000132c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001808  00000000  00000000  00017810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ed  00000000  00000000  00019018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005123  00000000  00000000  00019a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000728  00000000  00000000  0001eb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000040fa  000040fa  000041ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001f250  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00003f1c  00003f1c  00003ff0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00003e3a  00003e3a  00003f0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00003f2a  00003f2a  00003ffe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00003e4e  00003e4e  00003f22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00003f38  00003f38  0000400c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00003e62  00003e62  00003f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_3 00000014  00003e76  00003e76  00003f4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.rn2483_init 00000008  000040ac  000040ac  00004180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.rn2483_reset_active 00000008  000040b4  000040b4  00004188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_reset_deactive 00000008  000040bc  000040bc  00004190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SCD30_HAL_init 0000000e  00003f46  00003f46  0000401a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SCD30_HAL_data_ready 0000000a  00004084  00004084  00004158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_16 0000004e  00003040  00003040  00003114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss._cb      00000002  00800690  00800690  000041de  2**0
                  ALLOC
 29 .text.__vector_13 0000004e  0000308e  0000308e  00003162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss._cb      00000002  00800692  00800692  000041de  2**0
                  ALLOC
 31 .text.__vector_9 0000007c  000027ce  000027ce  000028a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.cnt      00000001  00800694  00800694  000041de  2**0
                  ALLOC
 33 .bss.callbacks 0000000a  0080067a  0080067a  000041de  2**0
                  ALLOC
 34 .text.start_and_write_data 0000004c  0000312a  0000312a  000031fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.read_and_stop 0000005a  00002d9a  00002d9a  00002e6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.TWI_API_write_data 00000014  00003e8a  00003e8a  00003f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.TWI_API_write_data_stop 0000001a  00003d64  00003d64  00003e38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TWI_API_read_data_ack_end_nack_stop 00000032  0000391a  0000391a  000039ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TWI_API_repeat_read_data_stop 00000030  000039b0  000039b0  00003a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TWI_HAL_init 00000012  00003ec6  00003ec6  00003f9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TWI_HAL_start 00000048  000033d0  000033d0  000034a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TWI_HAL_repeated_start 00000042  000035b6  000035b6  0000368a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.TWI_HAL_write_byte 00000020  00003c52  00003c52  00003d26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.TWI_HAL_read_byte_ack 00000014  00003e9e  00003e9e  00003f72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TWI_HAL_read_byte_nack 00000014  00003eb2  00003eb2  00003f86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TWI_HAL_stop 00000010  00003efc  00003efc  00003fd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.copy_buffer 0000002e  00003a70  00003a70  00003b44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.uart0_hal_init 0000003c  0000363a  0000363a  0000370e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.uart0_hal_send_message 0000003c  00003676  00003676  0000374a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.uart0_hal_send_string 0000006e  00002bfc  00002bfc  00002cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.uart0_hal_message_ready 0000000e  00003f54  00003f54  00004028  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.uart0_hal_clear_rx_buffer 0000000a  0000408e  0000408e  00004162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.uart0_hal_read_message_as_str 00000028  00003b26  00003b26  00003bfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.uart0_hal_send_break 00000046  00003418  00003418  000034ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__vector_22 0000004a  000032f2  000032f2  000033c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__vector_20 00000074  00002aa4  00002aa4  00002b78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .bss.rx_buffer_has_message 00000001  00800695  00800695  000041de  2**0
                  ALLOC
 58 .bss.rx_buffer_data_len 00000001  00800696  00800696  000041de  2**0
                  ALLOC
 59 .bss.tx_buffer_cursor 00000001  00800697  00800697  000041de  2**0
                  ALLOC
 60 .bss.tx_buffer_data_len 00000001  00800698  00800698  000041de  2**0
                  ALLOC
 61 .text.copy_buffer 0000002e  00003a9e  00003a9e  00003b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uart1_hal_init 0000003c  000036b2  000036b2  00003786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart1_hal_send_string 0000008a  00002744  00002744  00002818  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart1_hal_message_ready 0000000e  00003f62  00003f62  00004036  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart1_hal_rx_full 0000000e  00003f70  00003f70  00004044  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart1_hal_clear_rx_buffer 0000000a  00004098  00004098  0000416c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart1_hal_read_message_as_str 00000028  00003b4e  00003b4e  00003c22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.__vector_30 0000004a  0000333c  0000333c  00003410  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__vector_28 00000074  00002b18  00002b18  00002bec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .bss.rx_buffer_has_message 00000001  00800699  00800699  000041de  2**0
                  ALLOC
 71 .bss.rx_buffer_data_len 00000001  0080069a  0080069a  000041de  2**0
                  ALLOC
 72 .bss.rx_buffer 00000096  00800580  00800580  000041de  2**0
                  ALLOC
 73 .bss.tx_buffer_cursor 00000001  0080069b  0080069b  000041de  2**0
                  ALLOC
 74 .bss.tx_buffer_data_len 00000001  0080069c  0080069c  000041de  2**0
                  ALLOC
 75 .bss.tx_buffer 000000c8  008004b8  008004b8  000041de  2**0
                  ALLOC
 76 .text.main    00000018  00003db2  00003db2  00003e86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.calc_ppm_methane 00000096  00002586  00002586  0000265a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.ADC_get_value 00000056  00002e4c  00002e4c  00002f20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .data.PPM_factor 00000004  00800684  000040fe  000041d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 80 .data.RRL     00000004  00800688  00004102  000041d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 81 .data.Vc      00000004  0080068c  00004106  000041da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 82 .text.EM_has_deveui 00000016  00003de2  00003de2  00003eb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.EM_has_appeui 00000016  00003df8  00003df8  00003ecc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.EM_has_appkey 00000016  00003e0e  00003e0e  00003ee2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.EM_set_deveui 0000003a  000036ee  000036ee  000037c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.EM_get_deveui 00000030  000039e0  000039e0  00003ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.EM_set_appeui 0000003a  00003728  00003728  000037fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.EM_get_appeui 00000030  00003a10  00003a10  00003ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.EM_set_appkey 0000003a  00003762  00003762  00003836  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.EM_get_appkey 00000030  00003a40  00003a40  00003b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.EM_set_ppmfactor 0000000e  00003f7e  00003f7e  00004052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.EM_get_ppmfactor 0000001e  00003cb2  00003cb2  00003d86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.EM_set_RRL 0000000e  00003f8c  00003f8c  00004060  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.EM_get_RRL 0000001e  00003cd0  00003cd0  00003da4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.EM_set_Vcc 0000000e  00003f9a  00003f9a  0000406e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.EM_get_Vcc 0000001e  00003cee  00003cee  00003dc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.EM_set_collections 0000000e  00003fa8  00003fa8  0000407c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.EM_get_collections 00000010  00003f0c  00003f0c  00003fe0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.EM_set_heat_up_time 0000000c  00004018  00004018  000040ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.EM_get_heat_up_time 0000000c  00004024  00004024  000040f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.EM_set_air_pump_time 0000000c  00004030  00004030  00004104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.EM_get_air_pump_time 0000000c  0000403c  0000403c  00004110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.EM_set_sp_interval 0000000c  00004048  00004048  0000411c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.EM_get_sp_interval 0000000c  00004054  00004054  00004128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.LM_reset_module 00000006  000040dc  000040dc  000041b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.LM_forward_msg 00000006  000040e2  000040e2  000041b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.LM_send_break 00000006  000040e8  000040e8  000041bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .progmemx.data 00000073  00000512  00000512  000005e6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
109 .text.attach_ending 0000001c  00003d48  00003d48  00003e1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.util_strbeginswith 0000004a  00003386  00003386  0000345a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .progmemx.data 00000007  0000058d  0000058d  00000661  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
112 .text.util_reset_module 00000046  0000345e  0000345e  00003532  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.util_lora_forward_msg 00000038  0000379c  0000379c  00003870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.util_send_break 00000020  00003c72  00003c72  00003d46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.datetime_to_BCD 00000100  00001c1c  00001c1c  00001cf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.RTC_get_current_time 00000140  00001766  00001766  0000183a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.RTC_set_current_time 00000068  00002cd4  00002cd4  00002da8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000005a0  000005a0  00000674  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
119 .text.bytes_2_uint 0000001a  00003d7e  00003d7e  00003e52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.init_measurement 00000038  000037d4  000037d4  000038a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.validate_data 00000032  0000394c  0000394c  00003a20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.read_value 000000a2  0000244c  0000244c  00002520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.SCD30_sensor_on 00000022  00003c0e  00003c0e  00003ce2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.SCD30_get_reading 0000001a  00003d98  00003d98  00003e6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .progmemx.data.READ_DATA_CMD 00000002  0000059e  0000059e  00000672  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
126 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000594  00000594  00000668  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
127 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  00000599  00000599  0000066d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
128 .text.parse_cmd 00000028  00003b76  00003b76  00003c4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.validate_cmd 00000056  00002ea2  00002ea2  00002f76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .progmemx.data 000000a4  0000037c  0000037c  00000450  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
131 .text.CONF_enter 0000012e  000018a6  000018a6  0000197a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .progmemx.data 00000077  0000049b  0000049b  0000056f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
133 .text.CON_RN2483_parse 00000052  00002f4c  00002f4c  00003020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.CON_RN2483 00000152  00001614  00001614  000016e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.CONNECT 00000054  00002ef8  00002ef8  00002fcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .progmemx.data 00000188  000001f4  000001f4  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
137 .text.read_cols 000000bc  0000217c  0000217c  00002250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.read_time 00000092  000026b2  000026b2  00002786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.write_deveui 00000078  000028c4  000028c4  00002998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.write_appeui 00000078  0000293c  0000293c  00002a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.write_appkey 00000078  000029b4  000029b4  00002a88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.write_PPM_factor 0000004c  00003176  00003176  0000324a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.write_RRL 0000004c  000031c2  000031c2  00003296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.write_VCC 0000004c  0000320e  0000320e  000032e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.get_time_par 00000034  000038e6  000038e6  000039ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.write_cols 0000012e  000019d4  000019d4  00001aa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.write_heat_up 0000004c  0000325a  0000325a  0000332e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.write_air_pump 00000050  00002ff0  00002ff0  000030c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.write_sp_interval 0000004c  000032a6  000032a6  0000337a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.write_reset 000000e2  00001e1a  00001e1a  00001eee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.write_time 000000fe  00001d1c  00001d1c  00001df0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.handle_read 000002a2  00000fc2  00000fc2  00001096  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.handle_write 00000200  00001264  00001264  00001338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .bss.arg      00000050  00800616  00800616  000041de  2**0
                  ALLOC
155 .progmemx.data 0000007b  00000420  00000420  000004f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
156 .text.handle_methane 0000011a  00001b02  00001b02  00001bd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.handle_co2 000000a4  000023a8  000023a8  0000247c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.handle_sample 00000098  000024ee  000024ee  000025c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.init_methane_SCD30 00000028  00003b9e  00003b9e  00003c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .bss.par      00000014  00800666  00800666  000041de  2**0
                  ALLOC
161 .text.count_parameters 00000052  00002f9e  00002f9e  00003072  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.par_index 00000070  00002b8c  00002b8c  00002c60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.get_parameter 00000096  0000261c  0000261c  000026f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.calc_crc8 00000036  00003844  00003844  00003918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.get_decimal 000000b4  000022f4  000022f4  000023c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.str2flaot 0000004e  000030dc  000030dc  000031b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.is_float 00000058  00002df4  00002df4  00002ec8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.avrlibc.fplib 0000000e  00003fb6  00003fb6  0000408a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.avrlibc.fplib 000000ce  000020ae  000020ae  00002182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.avrlibc.fplib 00000008  000040c4  000040c4  00004198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.avrlibc.fplib 000000de  00001efc  00001efc  00001fd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.avrlibc.fplib 0000005e  00002d3c  00002d3c  00002e10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.avrlibc.fplib 0000007a  0000284a  0000284a  0000291e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.avrlibc.fplib 0000000c  00004060  00004060  00004134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.avrlibc.fplib 00000006  000040ee  000040ee  000041c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.avrlibc.fplib 0000000e  00003fc4  00003fc4  00004098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.avrlibc.fplib 0000000e  00003fd2  00003fd2  000040a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.avrlibc.fplib 00000022  00003c30  00003c30  00003d04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.avrlibc.fplib 00000044  000034ea  000034ea  000035be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.avrlibc.fplib 0000000e  00003fe0  00003fe0  000040b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.avrlibc.fplib 00000008  000040cc  000040cc  000041a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.avrlibc.fplib 000000d4  00001fda  00001fda  000020ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .progmemx.data 00000008  00000585  00000585  00000659  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
184 .text.avrlibc 00000744  000005a2  000005a2  00000676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.libgcc  0000000c  0000406c  0000406c  00004140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.libgcc.mul 0000001e  00003d0c  00003d0c  00003de0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.libgcc.prologue 00000038  0000380c  0000380c  000038e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.libgcc.prologue 00000036  0000387a  0000387a  0000394e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.avrlibc 00000008  000040d4  000040d4  000041a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.avrlibc 0000000e  00003fee  00003fee  000040c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.avrlibc 000002dc  00000ce6  00000ce6  00000dba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.avrlibc 000001b0  00001464  00001464  00001538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.avrlibc 00000012  00003ed8  00003ed8  00003fac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.avrlibc 00000032  0000397e  0000397e  00003a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.avrlibc 0000002e  00003acc  00003acc  00003ba0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.avrlibc 00000042  000035f8  000035f8  000036cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.avrlibc 0000006a  00002c6a  00002c6a  00002d3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.avrlibc 0000002c  00003afa  00003afa  00003bce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.avrlibc 0000001e  00003d2a  00003d2a  00003dfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.avrlibc 00000036  000038b0  000038b0  00003984  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.avrlibc 00000078  00002a2c  00002a2c  00002b00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.avrlibc 00000046  000034a4  000034a4  00003578  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.avrlibc 000000bc  00002238  00002238  0000230c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.avrlibc 00000006  000040f4  000040f4  000041c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.avrlibc 00000024  00003bc6  00003bc6  00003c9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.avrlibc 00000012  00003eea  00003eea  00003fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.avrlibc 0000000e  00003ffc  00003ffc  000040d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.avrlibc 0000000e  0000400a  0000400a  000040de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.avrlibc 00000044  0000352e  0000352e  00003602  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.avrlibc 00000024  00003bea  00003bea  00003cbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.avrlibc 00000018  00003dca  00003dca  00003e9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.avrlibc 0000000c  00004078  00004078  0000414c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.libgcc.mul 00000020  00003c92  00003c92  00003d66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.libgcc.div 00000044  00003572  00003572  00003646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.libgcc.mul 00000016  00003e24  00003e24  00003ef8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.libgcc  0000000a  000040a2  000040a2  00004176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__ctors_end>
   4:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
   8:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
   c:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <__vector_3>
  10:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  14:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  18:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  1c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  20:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  24:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__vector_9>
  28:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  2c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  30:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  34:	0c 94 47 18 	jmp	0x308e	; 0x308e <__vector_13>
  38:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  3c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  40:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__vector_16>
  44:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  48:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  4c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  50:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__vector_20>
  54:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  58:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__vector_22>
  5c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  60:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  64:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  68:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  6c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  70:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__vector_28>
  74:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__bad_interrupt>
  78:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__vector_30>
  7c:	6e 0c       	add	r6, r14
  7e:	83 0c       	add	r8, r3
  80:	df 0c       	add	r13, r15
  82:	8c 0c       	add	r8, r12
  84:	e8 0c       	add	r14, r8
  86:	d1 0c       	add	r13, r1
  88:	d8 0c       	add	r13, r8
  8a:	9c 0c       	add	r9, r12
  8c:	a8 0c       	add	r10, r8
  8e:	b4 0c       	add	r11, r4
  90:	be 0c       	add	r11, r14
  92:	ca 0c       	add	r12, r10

00000094 <.dinit>:
  94:	01 00       	.word	0x0001	; ????
  96:	06 84       	ldd	r0, Z+14	; 0x0e
  98:	80 06       	cpc	r8, r16
  9a:	84 06       	cpc	r8, r20
  9c:	90 00       	.word	0x0090	; ????
  9e:	40 fe       	sbrs	r4, 0
  a0:	06 90       	elpm	r0, Z
  a2:	06 9d       	mul	r16, r6
  a4:	80 00       	.word	0x0080	; ????

000000a6 <__trampolines_end>:
  a6:	00 40       	sbci	r16, 0x00	; 0
  a8:	7a 10       	cpse	r7, r10
  aa:	f3 5a       	subi	r31, 0xA3	; 163
  ac:	00 a0       	ldd	r0, Z+32	; 0x20
  ae:	72 4e       	sbci	r23, 0xE2	; 226
  b0:	18 09       	sbc	r17, r8
  b2:	00 10       	cpse	r0, r0
  b4:	a5 d4       	rcall	.+2378   	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
  b6:	e8 00       	.word	0x00e8	; ????
  b8:	00 e8       	ldi	r16, 0x80	; 128
  ba:	76 48       	sbci	r23, 0x86	; 134
  bc:	17 00       	.word	0x0017	; ????
  be:	00 e4       	ldi	r16, 0x40	; 64
  c0:	0b 54       	subi	r16, 0x4B	; 75
  c2:	02 00       	.word	0x0002	; ????
  c4:	00 ca       	rjmp	.-3072   	; 0xfffff4c6 <__eeprom_end+0xff7ef4c6>
  c6:	9a 3b       	cpi	r25, 0xBA	; 186
  c8:	00 00       	nop
  ca:	00 e1       	ldi	r16, 0x10	; 16
  cc:	f5 05       	cpc	r31, r5
  ce:	00 00       	nop
  d0:	80 96       	adiw	r24, 0x20	; 32
  d2:	98 00       	.word	0x0098	; ????
  d4:	00 00       	nop
  d6:	40 42       	sbci	r20, 0x20	; 32
  d8:	0f 00       	.word	0x000f	; ????
  da:	00 00       	nop
  dc:	a0 86       	std	Z+8, r10	; 0x08
  de:	01 00       	.word	0x0001	; ????
  e0:	00 00       	nop
  e2:	10 27       	eor	r17, r16
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	e8 03       	fmulsu	r22, r16
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	64 00       	.word	0x0064	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	0a 00       	.word	0x000a	; ????
  f6:	00 00       	nop
  f8:	00 00       	nop
  fa:	01 00       	.word	0x0001	; ????
  fc:	00 00       	nop
  fe:	00 00       	nop
 100:	2c 76       	andi	r18, 0x6C	; 108
 102:	d8 88       	ldd	r13, Y+16	; 0x10
 104:	dc 67       	ori	r29, 0x7C	; 124
 106:	4f 08       	sbc	r4, r15
 108:	23 df       	rcall	.-442    	; 0xffffff50 <__eeprom_end+0xff7eff50>
 10a:	c1 df       	rcall	.-126    	; 0x8e <__SREG__+0x4f>
 10c:	ae 59       	subi	r26, 0x9E	; 158
 10e:	e1 b1       	in	r30, 0x01	; 1
 110:	b7 96       	adiw	r30, 0x27	; 39
 112:	e5 e3       	ldi	r30, 0x35	; 53
 114:	e4 53       	subi	r30, 0x34	; 52
 116:	c6 3a       	cpi	r28, 0xA6	; 166
 118:	e6 51       	subi	r30, 0x16	; 22
 11a:	99 76       	andi	r25, 0x69	; 105
 11c:	96 e8       	ldi	r25, 0x86	; 134
 11e:	e6 c2       	rjmp	.+1484   	; 0x6ec <vfprintf+0x14a>
 120:	84 26       	eor	r8, r20
 122:	eb 89       	ldd	r30, Y+19	; 0x13
 124:	8c 9b       	sbis	0x11, 4	; 17
 126:	62 ed       	ldi	r22, 0xD2	; 210
 128:	40 7c       	andi	r20, 0xC0	; 192
 12a:	6f fc       	.word	0xfc6f	; ????
 12c:	ef bc       	out	0x2f, r14	; 47
 12e:	9c 9f       	mul	r25, r28
 130:	40 f2       	brcs	.-112    	; 0xc2 <__trampolines_end+0x1c>
 132:	ba a5       	ldd	r27, Y+42	; 0x2a
 134:	6f a5       	ldd	r22, Y+47	; 0x2f
 136:	f4 90       	lpm	r15, Z
 138:	05 5a       	subi	r16, 0xA5	; 165
 13a:	2a f7       	brpl	.-54     	; 0x106 <__trampolines_end+0x60>
 13c:	5c 93       	st	X, r21
 13e:	6b 6c       	ori	r22, 0xCB	; 203
 140:	f9 67       	ori	r31, 0x79	; 121
 142:	6d c1       	rjmp	.+730    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 144:	1b fc       	.word	0xfc1b	; ????
 146:	e0 e4       	ldi	r30, 0x40	; 64
 148:	0d 47       	sbci	r16, 0x7D	; 125
 14a:	fe f5       	brtc	.+126    	; 0x1ca <__do_copy_data+0x1e>
 14c:	20 e6       	ldi	r18, 0x60	; 96
 14e:	b5 00       	.word	0x00b5	; ????
 150:	d0 ed       	ldi	r29, 0xD0	; 208
 152:	90 2e       	mov	r9, r16
 154:	03 00       	.word	0x0003	; ????
 156:	94 35       	cpi	r25, 0x54	; 84
 158:	77 05       	cpc	r23, r7
 15a:	00 80       	ld	r0, Z
 15c:	84 1e       	adc	r8, r20
 15e:	08 00       	.word	0x0008	; ????
 160:	00 20       	and	r0, r0
 162:	4e 0a       	sbc	r4, r30
 164:	00 00       	nop
 166:	00 c8       	rjmp	.-4096   	; 0xfffff168 <__eeprom_end+0xff7ef168>
 168:	0c 33       	cpi	r16, 0x3C	; 60
 16a:	33 33       	cpi	r19, 0x33	; 51
 16c:	33 0f       	add	r19, r19
 16e:	98 6e       	ori	r25, 0xE8	; 232
 170:	12 83       	std	Z+2, r17	; 0x02
 172:	11 41       	sbci	r17, 0x11	; 17
 174:	ef 8d       	ldd	r30, Y+31	; 0x1f
 176:	21 14       	cp	r2, r1
 178:	89 3b       	cpi	r24, 0xB9	; 185
 17a:	e6 55       	subi	r30, 0x56	; 86
 17c:	16 cf       	rjmp	.-468    	; 0xffffffaa <__eeprom_end+0xff7effaa>
 17e:	fe e6       	ldi	r31, 0x6E	; 110
 180:	db 18       	sub	r13, r11
 182:	d1 84       	ldd	r13, Z+9	; 0x09
 184:	4b 38       	cpi	r20, 0x8B	; 139
 186:	1b f7       	brvc	.-58     	; 0x14e <__trampolines_end+0xa8>
 188:	7c 1d       	adc	r23, r12
 18a:	90 1d       	adc	r25, r0
 18c:	a4 bb       	out	0x14, r26	; 20
 18e:	e4 24       	eor	r14, r4
 190:	20 32       	cpi	r18, 0x20	; 32
 192:	84 72       	andi	r24, 0x24	; 36
 194:	5e 22       	and	r5, r30
 196:	81 00       	.word	0x0081	; ????
 198:	c9 f1       	breq	.+114    	; 0x20c <_etext+0x18>
 19a:	24 ec       	ldi	r18, 0xC4	; 196
 19c:	a1 e5       	ldi	r26, 0x51	; 81
 19e:	3d 27       	eor	r19, r29

000001a0 <__ctors_end>:
 1a0:	11 24       	eor	r1, r1
 1a2:	1f be       	out	0x3f, r1	; 63
 1a4:	cf ef       	ldi	r28, 0xFF	; 255
 1a6:	d0 e1       	ldi	r29, 0x10	; 16
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	cd bf       	out	0x3d, r28	; 61

000001ac <__do_copy_data>:
 1ac:	e4 e9       	ldi	r30, 0x94	; 148
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	17 c0       	rjmp	.+46     	; 0x1e2 <__do_clear_bss+0x8>
 1b4:	b5 91       	lpm	r27, Z+
 1b6:	a5 91       	lpm	r26, Z+
 1b8:	35 91       	lpm	r19, Z+
 1ba:	25 91       	lpm	r18, Z+
 1bc:	05 91       	lpm	r16, Z+
 1be:	07 fd       	sbrc	r16, 7
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <__do_clear_bss>
 1c2:	95 91       	lpm	r25, Z+
 1c4:	85 91       	lpm	r24, Z+
 1c6:	ef 01       	movw	r28, r30
 1c8:	f9 2f       	mov	r31, r25
 1ca:	e8 2f       	mov	r30, r24
 1cc:	05 90       	lpm	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x20>
 1d6:	fe 01       	movw	r30, r28
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__do_clear_bss+0x8>

000001da <__do_clear_bss>:
 1da:	1d 92       	st	X+, r1
 1dc:	a2 17       	cp	r26, r18
 1de:	b3 07       	cpc	r27, r19
 1e0:	e1 f7       	brne	.-8      	; 0x1da <__do_clear_bss>
 1e2:	e5 3a       	cpi	r30, 0xA5	; 165
 1e4:	f4 07       	cpc	r31, r20
 1e6:	31 f7       	brne	.-52     	; 0x1b4 <__do_copy_data+0x8>
 1e8:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <main>
 1ec:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>

Disassembly of section .text:

000040fa <__bad_interrupt>:
    40fa:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

00003f1c <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    3f1c:	81 b1       	in	r24, 0x01	; 1
    3f1e:	88 60       	ori	r24, 0x08	; 8
    3f20:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    3f22:	82 b1       	in	r24, 0x02	; 2
    3f24:	87 7f       	andi	r24, 0xF7	; 247
    3f26:	82 b9       	out	0x02, r24	; 2
    3f28:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00003e3a <PM_HAL_adc_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3e3a:	88 23       	and	r24, r24
    3e3c:	21 f0       	breq	.+8      	; 0x3e46 <PM_HAL_adc_power+0xc>
    3e3e:	82 b1       	in	r24, 0x02	; 2
    3e40:	88 60       	ori	r24, 0x08	; 8
    3e42:	82 b9       	out	0x02, r24	; 2
    3e44:	08 95       	ret
    3e46:	82 b1       	in	r24, 0x02	; 2
    3e48:	87 7f       	andi	r24, 0xF7	; 247
    3e4a:	82 b9       	out	0x02, r24	; 2
    3e4c:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00003f2a <PM_HAL_meth_power_init>:
		clear_bit(PORTA, 3);
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    3f2a:	81 b1       	in	r24, 0x01	; 1
    3f2c:	80 62       	ori	r24, 0x20	; 32
    3f2e:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    3f30:	82 b1       	in	r24, 0x02	; 2
    3f32:	8f 7d       	andi	r24, 0xDF	; 223
    3f34:	82 b9       	out	0x02, r24	; 2
    3f36:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003e4e <PM_HAL_meth_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3e4e:	88 23       	and	r24, r24
    3e50:	21 f0       	breq	.+8      	; 0x3e5a <PM_HAL_meth_power+0xc>
    3e52:	82 b1       	in	r24, 0x02	; 2
    3e54:	80 62       	ori	r24, 0x20	; 32
    3e56:	82 b9       	out	0x02, r24	; 2
    3e58:	08 95       	ret
    3e5a:	82 b1       	in	r24, 0x02	; 2
    3e5c:	8f 7d       	andi	r24, 0xDF	; 223
    3e5e:	82 b9       	out	0x02, r24	; 2
    3e60:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00003f38 <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    3f38:	81 b1       	in	r24, 0x01	; 1
    3f3a:	80 61       	ori	r24, 0x10	; 16
    3f3c:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    3f3e:	82 b1       	in	r24, 0x02	; 2
    3f40:	8f 7e       	andi	r24, 0xEF	; 239
    3f42:	82 b9       	out	0x02, r24	; 2
    3f44:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003e62 <PM_HAL_SCD30_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3e62:	88 23       	and	r24, r24
    3e64:	21 f0       	breq	.+8      	; 0x3e6e <PM_HAL_SCD30_power+0xc>
    3e66:	82 b1       	in	r24, 0x02	; 2
    3e68:	80 61       	ori	r24, 0x10	; 16
    3e6a:	82 b9       	out	0x02, r24	; 2
    3e6c:	08 95       	ret
    3e6e:	82 b1       	in	r24, 0x02	; 2
    3e70:	8f 7e       	andi	r24, 0xEF	; 239
    3e72:	82 b9       	out	0x02, r24	; 2
    3e74:	08 95       	ret

Disassembly of section .text.__vector_3:

00003e76 <__vector_3>:
}

ISR(INT2_vect){
    3e76:	1f 92       	push	r1
    3e78:	0f 92       	push	r0
    3e7a:	0f b6       	in	r0, 0x3f	; 63
    3e7c:	0f 92       	push	r0
    3e7e:	11 24       	eor	r1, r1
	
}
    3e80:	0f 90       	pop	r0
    3e82:	0f be       	out	0x3f, r0	; 63
    3e84:	0f 90       	pop	r0
    3e86:	1f 90       	pop	r1
    3e88:	18 95       	reti

Disassembly of section .text.rn2483_init:

000040ac <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    40ac:	84 b1       	in	r24, 0x04	; 4
    40ae:	80 61       	ori	r24, 0x10	; 16
    40b0:	84 b9       	out	0x04, r24	; 4
    40b2:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

000040b4 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    40b4:	85 b1       	in	r24, 0x05	; 5
    40b6:	8f 7e       	andi	r24, 0xEF	; 239
    40b8:	85 b9       	out	0x05, r24	; 5
    40ba:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

000040bc <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    40bc:	85 b1       	in	r24, 0x05	; 5
    40be:	80 61       	ori	r24, 0x10	; 16
    40c0:	85 b9       	out	0x05, r24	; 5
    40c2:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00003f46 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    3f46:	87 b1       	in	r24, 0x07	; 7
    3f48:	8f 7b       	andi	r24, 0xBF	; 191
    3f4a:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    3f4c:	88 b1       	in	r24, 0x08	; 8
    3f4e:	8f 7b       	andi	r24, 0xBF	; 191
    3f50:	88 b9       	out	0x08, r24	; 8
    3f52:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00004084 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    4084:	86 b1       	in	r24, 0x06	; 6
    4086:	86 fb       	bst	r24, 6
    4088:	88 27       	eor	r24, r24
    408a:	80 f9       	bld	r24, 0
    408c:	08 95       	ret

Disassembly of section .text.__vector_16:

00003040 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    3040:	1f 92       	push	r1
    3042:	0f 92       	push	r0
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	0f 92       	push	r0
    3048:	11 24       	eor	r1, r1
    304a:	2f 93       	push	r18
    304c:	3f 93       	push	r19
    304e:	4f 93       	push	r20
    3050:	5f 93       	push	r21
    3052:	6f 93       	push	r22
    3054:	7f 93       	push	r23
    3056:	8f 93       	push	r24
    3058:	9f 93       	push	r25
    305a:	af 93       	push	r26
    305c:	bf 93       	push	r27
    305e:	ef 93       	push	r30
    3060:	ff 93       	push	r31
	_cb();
    3062:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <_cb>
    3066:	f0 91 91 06 	lds	r31, 0x0691	; 0x800691 <_cb+0x1>
    306a:	09 95       	icall
}
    306c:	ff 91       	pop	r31
    306e:	ef 91       	pop	r30
    3070:	bf 91       	pop	r27
    3072:	af 91       	pop	r26
    3074:	9f 91       	pop	r25
    3076:	8f 91       	pop	r24
    3078:	7f 91       	pop	r23
    307a:	6f 91       	pop	r22
    307c:	5f 91       	pop	r21
    307e:	4f 91       	pop	r20
    3080:	3f 91       	pop	r19
    3082:	2f 91       	pop	r18
    3084:	0f 90       	pop	r0
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	0f 90       	pop	r0
    308a:	1f 90       	pop	r1
    308c:	18 95       	reti

Disassembly of section .text.__vector_13:

0000308e <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    308e:	1f 92       	push	r1
    3090:	0f 92       	push	r0
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	0f 92       	push	r0
    3096:	11 24       	eor	r1, r1
    3098:	2f 93       	push	r18
    309a:	3f 93       	push	r19
    309c:	4f 93       	push	r20
    309e:	5f 93       	push	r21
    30a0:	6f 93       	push	r22
    30a2:	7f 93       	push	r23
    30a4:	8f 93       	push	r24
    30a6:	9f 93       	push	r25
    30a8:	af 93       	push	r26
    30aa:	bf 93       	push	r27
    30ac:	ef 93       	push	r30
    30ae:	ff 93       	push	r31
	_cb();
    30b0:	e0 91 92 06 	lds	r30, 0x0692	; 0x800692 <_cb>
    30b4:	f0 91 93 06 	lds	r31, 0x0693	; 0x800693 <_cb+0x1>
    30b8:	09 95       	icall
    30ba:	ff 91       	pop	r31
    30bc:	ef 91       	pop	r30
    30be:	bf 91       	pop	r27
    30c0:	af 91       	pop	r26
    30c2:	9f 91       	pop	r25
    30c4:	8f 91       	pop	r24
    30c6:	7f 91       	pop	r23
    30c8:	6f 91       	pop	r22
    30ca:	5f 91       	pop	r21
    30cc:	4f 91       	pop	r20
    30ce:	3f 91       	pop	r19
    30d0:	2f 91       	pop	r18
    30d2:	0f 90       	pop	r0
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	0f 90       	pop	r0
    30d8:	1f 90       	pop	r1
    30da:	18 95       	reti

Disassembly of section .text.__vector_9:

000027ce <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
    27ce:	1f 92       	push	r1
    27d0:	0f 92       	push	r0
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	0f 92       	push	r0
    27d6:	11 24       	eor	r1, r1
    27d8:	2f 93       	push	r18
    27da:	3f 93       	push	r19
    27dc:	4f 93       	push	r20
    27de:	5f 93       	push	r21
    27e0:	6f 93       	push	r22
    27e2:	7f 93       	push	r23
    27e4:	8f 93       	push	r24
    27e6:	9f 93       	push	r25
    27e8:	af 93       	push	r26
    27ea:	bf 93       	push	r27
    27ec:	cf 93       	push	r28
    27ee:	ef 93       	push	r30
    27f0:	ff 93       	push	r31
	cnt++;
    27f2:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <cnt>
    27f6:	8f 5f       	subi	r24, 0xFF	; 255
    27f8:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    27fc:	80 32       	cpi	r24, 0x20	; 32
    27fe:	99 f4       	brne	.+38     	; 0x2826 <__vector_9+0x58>
		cnt=0;
    2800:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    2804:	c0 e0       	ldi	r28, 0x00	; 0
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    2808:	ec 2f       	mov	r30, r28
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	ee 0f       	add	r30, r30
    280e:	ff 1f       	adc	r31, r31
    2810:	e6 58       	subi	r30, 0x86	; 134
    2812:	f9 4f       	sbci	r31, 0xF9	; 249
    2814:	01 90       	ld	r0, Z+
    2816:	f0 81       	ld	r31, Z
    2818:	e0 2d       	mov	r30, r0
    281a:	30 97       	sbiw	r30, 0x00	; 0
    281c:	09 f0       	breq	.+2      	; 0x2820 <__vector_9+0x52>
				callbacks[i]();
    281e:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    2820:	cf 5f       	subi	r28, 0xFF	; 255
    2822:	c5 30       	cpi	r28, 0x05	; 5
    2824:	88 f3       	brcs	.-30     	; 0x2808 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    2826:	ff 91       	pop	r31
    2828:	ef 91       	pop	r30
    282a:	cf 91       	pop	r28
    282c:	bf 91       	pop	r27
    282e:	af 91       	pop	r26
    2830:	9f 91       	pop	r25
    2832:	8f 91       	pop	r24
    2834:	7f 91       	pop	r23
    2836:	6f 91       	pop	r22
    2838:	5f 91       	pop	r21
    283a:	4f 91       	pop	r20
    283c:	3f 91       	pop	r19
    283e:	2f 91       	pop	r18
    2840:	0f 90       	pop	r0
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	0f 90       	pop	r0
    2846:	1f 90       	pop	r1
    2848:	18 95       	reti

Disassembly of section .text.start_and_write_data:

0000312a <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    312a:	cf 92       	push	r12
    312c:	df 92       	push	r13
    312e:	ef 92       	push	r14
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	6a 01       	movw	r12, r20
    3136:	e6 2e       	mov	r14, r22
    3138:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    313a:	60 e0       	ldi	r22, 0x00	; 0
    313c:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3140:	81 11       	cpse	r24, r1
    3142:	13 c0       	rjmp	.+38     	; 0x316a <start_and_write_data+0x40>
    3144:	c0 e0       	ldi	r28, 0x00	; 0
    3146:	0e c0       	rjmp	.+28     	; 0x3164 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    3148:	ae 2d       	mov	r26, r14
    314a:	c6 01       	movw	r24, r12
    314c:	8c 0f       	add	r24, r28
    314e:	91 1d       	adc	r25, r1
    3150:	a1 1d       	adc	r26, r1
    3152:	fc 01       	movw	r30, r24
    3154:	84 91       	lpm	r24, Z
    3156:	a7 fd       	sbrc	r26, 7
    3158:	80 81       	ld	r24, Z
    315a:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    315e:	81 11       	cpse	r24, r1
    3160:	04 c0       	rjmp	.+8      	; 0x316a <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    3162:	cf 5f       	subi	r28, 0xFF	; 255
    3164:	cd 17       	cp	r28, r29
    3166:	80 f3       	brcs	.-32     	; 0x3148 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    3168:	80 e0       	ldi	r24, 0x00	; 0
}
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	ef 90       	pop	r14
    3170:	df 90       	pop	r13
    3172:	cf 90       	pop	r12
    3174:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002d9a <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2d9a:	ef 92       	push	r14
    2d9c:	ff 92       	push	r15
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	8c 01       	movw	r16, r24
    2da8:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2daa:	c0 e0       	ldi	r28, 0x00	; 0
    2dac:	08 c0       	rjmp	.+16     	; 0x2dbe <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2dae:	78 01       	movw	r14, r16
    2db0:	ec 0e       	add	r14, r28
    2db2:	f1 1c       	adc	r15, r1
    2db4:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <TWI_HAL_read_byte_ack>
    2db8:	f7 01       	movw	r30, r14
    2dba:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2dbc:	cf 5f       	subi	r28, 0xFF	; 255
    2dbe:	2c 2f       	mov	r18, r28
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	8d 2f       	mov	r24, r29
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	28 17       	cp	r18, r24
    2dca:	39 07       	cpc	r19, r25
    2dcc:	84 f3       	brlt	.-32     	; 0x2dae <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2dce:	8d 2f       	mov	r24, r29
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	e8 01       	movw	r28, r16
    2dd6:	c8 0f       	add	r28, r24
    2dd8:	d9 1f       	adc	r29, r25
    2dda:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <TWI_HAL_read_byte_nack>
    2dde:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2de0:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	1f 91       	pop	r17
    2dec:	0f 91       	pop	r16
    2dee:	ff 90       	pop	r15
    2df0:	ef 90       	pop	r14
    2df2:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003e8a <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3e8a:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3e8c:	0e 94 95 18 	call	0x312a	; 0x312a <start_and_write_data>
    3e90:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3e92:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    3e94:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <TWI_HAL_stop>
	}
	return status;
}
    3e98:	8c 2f       	mov	r24, r28
    3e9a:	cf 91       	pop	r28
    3e9c:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00003d64 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3d64:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3d66:	0e 94 95 18 	call	0x312a	; 0x312a <start_and_write_data>
    3d6a:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    3d6c:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    3d70:	c1 11       	cpse	r28, r1
    3d72:	02 c0       	rjmp	.+4      	; 0x3d78 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	01 c0       	rjmp	.+2      	; 0x3d7a <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    3d78:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    3d7a:	cf 91       	pop	r28
    3d7c:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

0000391a <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    391a:	0f 93       	push	r16
    391c:	1f 93       	push	r17
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	8b 01       	movw	r16, r22
    3924:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    3926:	61 e0       	ldi	r22, 0x01	; 1
    3928:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <TWI_HAL_start>
    392c:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    392e:	88 23       	and	r24, r24
    3930:	21 f0       	breq	.+8      	; 0x393a <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    3932:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <TWI_HAL_stop>
		return status;	
    3936:	8c 2f       	mov	r24, r28
    3938:	04 c0       	rjmp	.+8      	; 0x3942 <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    393a:	6d 2f       	mov	r22, r29
    393c:	c8 01       	movw	r24, r16
    393e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <read_and_stop>
	
}
    3942:	df 91       	pop	r29
    3944:	cf 91       	pop	r28
    3946:	1f 91       	pop	r17
    3948:	0f 91       	pop	r16
    394a:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

000039b0 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    39b0:	0f 93       	push	r16
    39b2:	1f 93       	push	r17
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	8b 01       	movw	r16, r22
    39ba:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    39bc:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <TWI_HAL_repeated_start>
    39c0:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    39c2:	88 23       	and	r24, r24
    39c4:	21 f0       	breq	.+8      	; 0x39ce <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    39c6:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <TWI_HAL_stop>
		return status;
    39ca:	8c 2f       	mov	r24, r28
    39cc:	04 c0       	rjmp	.+8      	; 0x39d6 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    39ce:	6d 2f       	mov	r22, r29
    39d0:	c8 01       	movw	r24, r16
    39d2:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <read_and_stop>
	
}
    39d6:	df 91       	pop	r29
    39d8:	cf 91       	pop	r28
    39da:	1f 91       	pop	r17
    39dc:	0f 91       	pop	r16
    39de:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00003ec6 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    3ec6:	80 e2       	ldi	r24, 0x20	; 32
    3ec8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    3ecc:	e9 eb       	ldi	r30, 0xB9	; 185
    3ece:	f0 e0       	ldi	r31, 0x00	; 0
    3ed0:	80 81       	ld	r24, Z
    3ed2:	8c 7f       	andi	r24, 0xFC	; 252
    3ed4:	80 83       	st	Z, r24
    3ed6:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

000033d0 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    33d8:	84 ea       	ldi	r24, 0xA4	; 164
    33da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    33de:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    33e2:	99 23       	and	r25, r25
    33e4:	e4 f7       	brge	.-8      	; 0x33de <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    33e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    33ea:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    33ec:	88 30       	cpi	r24, 0x08	; 8
    33ee:	99 f4       	brne	.+38     	; 0x3416 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    33f0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    33f4:	84 e8       	ldi	r24, 0x84	; 132
    33f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    33fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    33fe:	88 23       	and	r24, r24
    3400:	e4 f7       	brge	.-8      	; 0x33fa <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    3402:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3406:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3408:	88 31       	cpi	r24, 0x18	; 24
    340a:	21 f0       	breq	.+8      	; 0x3414 <TWI_HAL_start+0x44>
    340c:	80 34       	cpi	r24, 0x40	; 64
    340e:	19 f4       	brne	.+6      	; 0x3416 <TWI_HAL_start+0x46>
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	08 95       	ret
    3414:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3416:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

000035b6 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	88 0f       	add	r24, r24
    35ba:	99 1f       	adc	r25, r25
    35bc:	28 2f       	mov	r18, r24
    35be:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    35c0:	84 ea       	ldi	r24, 0xA4	; 164
    35c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    35c6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    35ca:	99 23       	and	r25, r25
    35cc:	e4 f7       	brge	.-8      	; 0x35c6 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    35ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    35d2:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    35d4:	80 31       	cpi	r24, 0x10	; 16
    35d6:	79 f4       	brne	.+30     	; 0x35f6 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    35d8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    35dc:	84 e8       	ldi	r24, 0x84	; 132
    35de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    35e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    35e6:	88 23       	and	r24, r24
    35e8:	e4 f7       	brge	.-8      	; 0x35e2 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    35ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    35ee:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    35f0:	80 34       	cpi	r24, 0x40	; 64
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <TWI_HAL_repeated_start+0x40>
    35f4:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    35f6:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00003c52 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    3c52:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3c56:	84 e8       	ldi	r24, 0x84	; 132
    3c58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3c5c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3c60:	88 23       	and	r24, r24
    3c62:	e4 f7       	brge	.-8      	; 0x3c5c <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    3c64:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3c68:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3c6a:	88 32       	cpi	r24, 0x28	; 40
    3c6c:	09 f4       	brne	.+2      	; 0x3c70 <TWI_HAL_write_byte+0x1e>
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3c70:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00003e9e <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    3e9e:	84 ec       	ldi	r24, 0xC4	; 196
    3ea0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    3ea4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3ea8:	88 23       	and	r24, r24
    3eaa:	e4 f7       	brge	.-8      	; 0x3ea4 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    3eac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3eb0:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00003eb2 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    3eb2:	84 e8       	ldi	r24, 0x84	; 132
    3eb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    3eb8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3ebc:	88 23       	and	r24, r24
    3ebe:	e4 f7       	brge	.-8      	; 0x3eb8 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    3ec0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3ec4:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00003efc <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    3efc:	84 e9       	ldi	r24, 0x94	; 148
    3efe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    3f02:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3f06:	84 fd       	sbrc	r24, 4
    3f08:	fc cf       	rjmp	.-8      	; 0x3f02 <TWI_HAL_stop+0x6>
}
    3f0a:	08 95       	ret

Disassembly of section .text.copy_buffer:

00003a70 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3a70:	bc 01       	movw	r22, r24
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	09 c0       	rjmp	.+18     	; 0x3a88 <copy_buffer+0x18>
    3a76:	fb 01       	movw	r30, r22
    3a78:	e9 0f       	add	r30, r25
    3a7a:	f1 1d       	adc	r31, r1
    3a7c:	da 01       	movw	r26, r20
    3a7e:	a0 50       	subi	r26, 0x00	; 0
    3a80:	bf 4f       	sbci	r27, 0xFF	; 255
    3a82:	2c 91       	ld	r18, X
    3a84:	20 83       	st	Z, r18
    3a86:	9f 5f       	subi	r25, 0xFF	; 255
    3a88:	49 2f       	mov	r20, r25
    3a8a:	50 e0       	ldi	r21, 0x00	; 0
    3a8c:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <rx_buffer_data_len>
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	22 50       	subi	r18, 0x02	; 2
    3a94:	31 09       	sbc	r19, r1
    3a96:	42 17       	cp	r20, r18
    3a98:	53 07       	cpc	r21, r19
    3a9a:	6c f3       	brlt	.-38     	; 0x3a76 <copy_buffer+0x6>
    3a9c:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

0000363a <uart0_hal_init>:
    363a:	e1 ec       	ldi	r30, 0xC1	; 193
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	80 81       	ld	r24, Z
    3640:	80 61       	ori	r24, 0x10	; 16
    3642:	80 83       	st	Z, r24
    3644:	80 81       	ld	r24, Z
    3646:	88 60       	ori	r24, 0x08	; 8
    3648:	80 83       	st	Z, r24
    364a:	80 81       	ld	r24, Z
    364c:	80 68       	ori	r24, 0x80	; 128
    364e:	80 83       	st	Z, r24
    3650:	80 81       	ld	r24, Z
    3652:	80 64       	ori	r24, 0x40	; 64
    3654:	80 83       	st	Z, r24
    3656:	e0 ec       	ldi	r30, 0xC0	; 192
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	82 60       	ori	r24, 0x02	; 2
    365e:	80 83       	st	Z, r24
    3660:	86 e0       	ldi	r24, 0x06	; 6
    3662:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    3666:	80 e1       	ldi	r24, 0x10	; 16
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    366e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    3672:	78 94       	sei
    3674:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00003676 <uart0_hal_send_message>:
    3676:	dc 01       	movw	r26, r24
    3678:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tx_buffer_data_len>
    367c:	81 11       	cpse	r24, r1
    367e:	fc cf       	rjmp	.-8      	; 0x3678 <uart0_hal_send_message+0x2>
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	0b c0       	rjmp	.+22     	; 0x369a <uart0_hal_send_message+0x24>
    3684:	29 2f       	mov	r18, r25
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	fd 01       	movw	r30, r26
    368a:	e2 0f       	add	r30, r18
    368c:	f3 1f       	adc	r31, r19
    368e:	40 81       	ld	r20, Z
    3690:	f9 01       	movw	r30, r18
    3692:	ea 56       	subi	r30, 0x6A	; 106
    3694:	fe 4f       	sbci	r31, 0xFE	; 254
    3696:	40 83       	st	Z, r20
    3698:	9f 5f       	subi	r25, 0xFF	; 255
    369a:	96 17       	cp	r25, r22
    369c:	98 f3       	brcs	.-26     	; 0x3684 <uart0_hal_send_message+0xe>
    369e:	60 93 98 06 	sts	0x0698, r22	; 0x800698 <tx_buffer_data_len>
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <tx_buffer_cursor>
    36a8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    36ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    36b0:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002bfc <uart0_hal_send_string>:
    2bfc:	6f 92       	push	r6
    2bfe:	7f 92       	push	r7
    2c00:	8f 92       	push	r8
    2c02:	cf 92       	push	r12
    2c04:	df 92       	push	r13
    2c06:	ef 92       	push	r14
    2c08:	3b 01       	movw	r6, r22
    2c0a:	88 2e       	mov	r8, r24
    2c0c:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tx_buffer_data_len>
    2c10:	81 11       	cpse	r24, r1
    2c12:	fc cf       	rjmp	.-8      	; 0x2c0c <uart0_hal_send_string+0x10>
    2c14:	88 2d       	mov	r24, r8
    2c16:	b3 01       	movw	r22, r6
    2c18:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    2c1c:	68 2f       	mov	r22, r24
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	12 c0       	rjmp	.+36     	; 0x2c46 <uart0_hal_send_string+0x4a>
    2c22:	29 2f       	mov	r18, r25
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	e8 2c       	mov	r14, r8
    2c28:	63 01       	movw	r12, r6
    2c2a:	c2 0e       	add	r12, r18
    2c2c:	d3 1e       	adc	r13, r19
    2c2e:	e1 1c       	adc	r14, r1
    2c30:	37 fd       	sbrc	r19, 7
    2c32:	ea 94       	dec	r14
    2c34:	f6 01       	movw	r30, r12
    2c36:	44 91       	lpm	r20, Z
    2c38:	e7 fc       	sbrc	r14, 7
    2c3a:	40 81       	ld	r20, Z
    2c3c:	f9 01       	movw	r30, r18
    2c3e:	ea 56       	subi	r30, 0x6A	; 106
    2c40:	fe 4f       	sbci	r31, 0xFE	; 254
    2c42:	40 83       	st	Z, r20
    2c44:	9f 5f       	subi	r25, 0xFF	; 255
    2c46:	96 17       	cp	r25, r22
    2c48:	60 f3       	brcs	.-40     	; 0x2c22 <uart0_hal_send_string+0x26>
    2c4a:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <tx_buffer_data_len>
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <tx_buffer_cursor>
    2c54:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    2c58:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2c5c:	ef 90       	pop	r14
    2c5e:	df 90       	pop	r13
    2c60:	cf 90       	pop	r12
    2c62:	8f 90       	pop	r8
    2c64:	7f 90       	pop	r7
    2c66:	6f 90       	pop	r6
    2c68:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00003f54 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    3f54:	90 91 95 06 	lds	r25, 0x0695	; 0x800695 <rx_buffer_has_message>
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	91 11       	cpse	r25, r1
    3f5c:	01 c0       	rjmp	.+2      	; 0x3f60 <uart0_hal_message_ready+0xc>
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
}
    3f60:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

0000408e <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    408e:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    4092:	10 92 96 06 	sts	0x0696, r1	; 0x800696 <rx_buffer_data_len>
    4096:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003b26 <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    3b26:	0f 93       	push	r16
    3b28:	1f 93       	push	r17
    3b2a:	cf 93       	push	r28
    3b2c:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    3b2e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    3b32:	c0 91 96 06 	lds	r28, 0x0696	; 0x800696 <rx_buffer_data_len>
    3b36:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    3b38:	f8 01       	movw	r30, r16
    3b3a:	ec 0f       	add	r30, r28
    3b3c:	f1 1d       	adc	r31, r1
    3b3e:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    3b40:	0e 94 47 20 	call	0x408e	; 0x408e <uart0_hal_clear_rx_buffer>
	return len;
}
    3b44:	8c 2f       	mov	r24, r28
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00003418 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3418:	cf 93       	push	r28
    341a:	df 93       	push	r29
    341c:	1f 92       	push	r1
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    3422:	9a b1       	in	r25, 0x0a	; 10
    3424:	92 60       	ori	r25, 0x02	; 2
    3426:	9a b9       	out	0x0a, r25	; 10
    3428:	e1 ec       	ldi	r30, 0xC1	; 193
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	90 81       	ld	r25, Z
    342e:	97 7f       	andi	r25, 0xF7	; 247
    3430:	90 83       	st	Z, r25
    3432:	9b b1       	in	r25, 0x0b	; 11
    3434:	9d 7f       	andi	r25, 0xFD	; 253
    3436:	9b b9       	out	0x0b, r25	; 11
    3438:	af e9       	ldi	r26, 0x9F	; 159
    343a:	bf e0       	ldi	r27, 0x0F	; 15
    343c:	11 97       	sbiw	r26, 0x01	; 1
    343e:	f1 f7       	brne	.-4      	; 0x343c <uart0_hal_send_break+0x24>
    3440:	00 c0       	rjmp	.+0      	; 0x3442 <uart0_hal_send_break+0x2a>
    3442:	00 00       	nop
    3444:	90 81       	ld	r25, Z
    3446:	98 60       	ori	r25, 0x08	; 8
    3448:	90 83       	st	Z, r25
    344a:	89 83       	std	Y+1, r24	; 0x01
    344c:	61 e0       	ldi	r22, 0x01	; 1
    344e:	ce 01       	movw	r24, r28
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	0e 94 3b 1b 	call	0x3676	; 0x3676 <uart0_hal_send_message>
    3456:	0f 90       	pop	r0
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	08 95       	ret

Disassembly of section .text.__vector_22:

000032f2 <__vector_22>:
    32f2:	1f 92       	push	r1
    32f4:	0f 92       	push	r0
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	0f 92       	push	r0
    32fa:	11 24       	eor	r1, r1
    32fc:	8f 93       	push	r24
    32fe:	ef 93       	push	r30
    3300:	ff 93       	push	r31
    3302:	e0 91 97 06 	lds	r30, 0x0697	; 0x800697 <tx_buffer_cursor>
    3306:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <tx_buffer_data_len>
    330a:	e8 17       	cp	r30, r24
    330c:	58 f4       	brcc	.+22     	; 0x3324 <__vector_22+0x32>
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	8e 0f       	add	r24, r30
    3312:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <tx_buffer_cursor>
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	ea 56       	subi	r30, 0x6A	; 106
    331a:	fe 4f       	sbci	r31, 0xFE	; 254
    331c:	80 81       	ld	r24, Z
    331e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3322:	04 c0       	rjmp	.+8      	; 0x332c <__vector_22+0x3a>
    3324:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <tx_buffer_cursor>
    3328:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <tx_buffer_data_len>
    332c:	ff 91       	pop	r31
    332e:	ef 91       	pop	r30
    3330:	8f 91       	pop	r24
    3332:	0f 90       	pop	r0
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	0f 90       	pop	r0
    3338:	1f 90       	pop	r1
    333a:	18 95       	reti

Disassembly of section .text.__vector_20:

00002aa4 <__vector_20>:
    2aa4:	1f 92       	push	r1
    2aa6:	0f 92       	push	r0
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	0f 92       	push	r0
    2aac:	11 24       	eor	r1, r1
    2aae:	2f 93       	push	r18
    2ab0:	8f 93       	push	r24
    2ab2:	9f 93       	push	r25
    2ab4:	ef 93       	push	r30
    2ab6:	ff 93       	push	r31
    2ab8:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <rx_buffer_has_message>
    2abc:	81 11       	cpse	r24, r1
    2abe:	0e c0       	rjmp	.+28     	; 0x2adc <__vector_20+0x38>
    2ac0:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <rx_buffer_data_len>
    2ac4:	e6 39       	cpi	r30, 0x96	; 150
    2ac6:	50 f4       	brcc	.+20     	; 0x2adc <__vector_20+0x38>
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	8e 0f       	add	r24, r30
    2acc:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <rx_buffer_data_len>
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2ad6:	e0 50       	subi	r30, 0x00	; 0
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 83       	st	Z, r24
    2adc:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <rx_buffer_data_len>
    2ae0:	83 30       	cpi	r24, 0x03	; 3
    2ae2:	80 f0       	brcs	.+32     	; 0x2b04 <__vector_20+0x60>
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	e1 50       	subi	r30, 0x01	; 1
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	20 81       	ld	r18, Z
    2aee:	2a 30       	cpi	r18, 0x0A	; 10
    2af0:	49 f4       	brne	.+18     	; 0x2b04 <__vector_20+0x60>
    2af2:	fc 01       	movw	r30, r24
    2af4:	e2 50       	subi	r30, 0x02	; 2
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	8d 30       	cpi	r24, 0x0D	; 13
    2afc:	19 f4       	brne	.+6      	; 0x2b04 <__vector_20+0x60>
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <rx_buffer_has_message>
    2b04:	ff 91       	pop	r31
    2b06:	ef 91       	pop	r30
    2b08:	9f 91       	pop	r25
    2b0a:	8f 91       	pop	r24
    2b0c:	2f 91       	pop	r18
    2b0e:	0f 90       	pop	r0
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	0f 90       	pop	r0
    2b14:	1f 90       	pop	r1
    2b16:	18 95       	reti

Disassembly of section .text.copy_buffer:

00003a9e <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3a9e:	bc 01       	movw	r22, r24
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	09 c0       	rjmp	.+18     	; 0x3ab6 <copy_buffer+0x18>
    3aa4:	fb 01       	movw	r30, r22
    3aa6:	e9 0f       	add	r30, r25
    3aa8:	f1 1d       	adc	r31, r1
    3aaa:	da 01       	movw	r26, r20
    3aac:	a0 58       	subi	r26, 0x80	; 128
    3aae:	ba 4f       	sbci	r27, 0xFA	; 250
    3ab0:	2c 91       	ld	r18, X
    3ab2:	20 83       	st	Z, r18
    3ab4:	9f 5f       	subi	r25, 0xFF	; 255
    3ab6:	49 2f       	mov	r20, r25
    3ab8:	50 e0       	ldi	r21, 0x00	; 0
    3aba:	20 91 9a 06 	lds	r18, 0x069A	; 0x80069a <rx_buffer_data_len>
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	22 50       	subi	r18, 0x02	; 2
    3ac2:	31 09       	sbc	r19, r1
    3ac4:	42 17       	cp	r20, r18
    3ac6:	53 07       	cpc	r21, r19
    3ac8:	6c f3       	brlt	.-38     	; 0x3aa4 <copy_buffer+0x6>
    3aca:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

000036b2 <uart1_hal_init>:
    36b2:	e9 ec       	ldi	r30, 0xC9	; 201
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	80 61       	ori	r24, 0x10	; 16
    36ba:	80 83       	st	Z, r24
    36bc:	80 81       	ld	r24, Z
    36be:	88 60       	ori	r24, 0x08	; 8
    36c0:	80 83       	st	Z, r24
    36c2:	80 81       	ld	r24, Z
    36c4:	80 68       	ori	r24, 0x80	; 128
    36c6:	80 83       	st	Z, r24
    36c8:	80 81       	ld	r24, Z
    36ca:	80 64       	ori	r24, 0x40	; 64
    36cc:	80 83       	st	Z, r24
    36ce:	e8 ec       	ldi	r30, 0xC8	; 200
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	80 81       	ld	r24, Z
    36d4:	82 60       	ori	r24, 0x02	; 2
    36d6:	80 83       	st	Z, r24
    36d8:	86 e0       	ldi	r24, 0x06	; 6
    36da:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    36de:	80 e1       	ldi	r24, 0x10	; 16
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    36e6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    36ea:	78 94       	sei
    36ec:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00002744 <uart1_hal_send_string>:
    2744:	6f 92       	push	r6
    2746:	7f 92       	push	r7
    2748:	8f 92       	push	r8
    274a:	cf 92       	push	r12
    274c:	df 92       	push	r13
    274e:	ef 92       	push	r14
    2750:	3b 01       	movw	r6, r22
    2752:	88 2e       	mov	r8, r24
    2754:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <tx_buffer_data_len>
    2758:	81 11       	cpse	r24, r1
    275a:	fc cf       	rjmp	.-8      	; 0x2754 <uart1_hal_send_string+0x10>
    275c:	88 2d       	mov	r24, r8
    275e:	b3 01       	movw	r22, r6
    2760:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    2764:	bc 01       	movw	r22, r24
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	12 c0       	rjmp	.+36     	; 0x278e <uart1_hal_send_string+0x4a>
    276a:	29 2f       	mov	r18, r25
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	e8 2c       	mov	r14, r8
    2770:	63 01       	movw	r12, r6
    2772:	c4 0e       	add	r12, r20
    2774:	d5 1e       	adc	r13, r21
    2776:	e1 1c       	adc	r14, r1
    2778:	57 fd       	sbrc	r21, 7
    277a:	ea 94       	dec	r14
    277c:	f6 01       	movw	r30, r12
    277e:	44 91       	lpm	r20, Z
    2780:	e7 fc       	sbrc	r14, 7
    2782:	40 81       	ld	r20, Z
    2784:	f9 01       	movw	r30, r18
    2786:	e8 54       	subi	r30, 0x48	; 72
    2788:	fb 4f       	sbci	r31, 0xFB	; 251
    278a:	40 83       	st	Z, r20
    278c:	9f 5f       	subi	r25, 0xFF	; 255
    278e:	49 2f       	mov	r20, r25
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	46 17       	cp	r20, r22
    2794:	57 07       	cpc	r21, r23
    2796:	48 f3       	brcs	.-46     	; 0x276a <uart1_hal_send_string+0x26>
    2798:	fb 01       	movw	r30, r22
    279a:	e8 54       	subi	r30, 0x48	; 72
    279c:	fb 4f       	sbci	r31, 0xFB	; 251
    279e:	8d e0       	ldi	r24, 0x0D	; 13
    27a0:	80 83       	st	Z, r24
    27a2:	fb 01       	movw	r30, r22
    27a4:	e7 54       	subi	r30, 0x47	; 71
    27a6:	fb 4f       	sbci	r31, 0xFB	; 251
    27a8:	8a e0       	ldi	r24, 0x0A	; 10
    27aa:	80 83       	st	Z, r24
    27ac:	6e 5f       	subi	r22, 0xFE	; 254
    27ae:	60 93 9c 06 	sts	0x069C, r22	; 0x80069c <tx_buffer_data_len>
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <tx_buffer_cursor>
    27b8:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_end>
    27bc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    27c0:	ef 90       	pop	r14
    27c2:	df 90       	pop	r13
    27c4:	cf 90       	pop	r12
    27c6:	8f 90       	pop	r8
    27c8:	7f 90       	pop	r7
    27ca:	6f 90       	pop	r6
    27cc:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00003f62 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    3f62:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <rx_buffer_has_message>
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	91 11       	cpse	r25, r1
    3f6a:	01 c0       	rjmp	.+2      	; 0x3f6e <uart1_hal_message_ready+0xc>
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
}
    3f6e:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00003f70 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    3f70:	90 91 9a 06 	lds	r25, 0x069A	; 0x80069a <rx_buffer_data_len>
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	95 39       	cpi	r25, 0x95	; 149
    3f78:	08 f4       	brcc	.+2      	; 0x3f7c <uart1_hal_rx_full+0xc>
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
}
    3f7c:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

00004098 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    4098:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    409c:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <rx_buffer_data_len>
    40a0:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00003b4e <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	cf 93       	push	r28
    3b54:	8c 01       	movw	r16, r24
    3b56:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <copy_buffer>
    3b5a:	c0 91 9a 06 	lds	r28, 0x069A	; 0x80069a <rx_buffer_data_len>
    3b5e:	c2 50       	subi	r28, 0x02	; 2
    3b60:	f8 01       	movw	r30, r16
    3b62:	ec 0f       	add	r30, r28
    3b64:	f1 1d       	adc	r31, r1
    3b66:	10 82       	st	Z, r1
    3b68:	0e 94 4c 20 	call	0x4098	; 0x4098 <uart1_hal_clear_rx_buffer>
    3b6c:	8c 2f       	mov	r24, r28
    3b6e:	cf 91       	pop	r28
    3b70:	1f 91       	pop	r17
    3b72:	0f 91       	pop	r16
    3b74:	08 95       	ret

Disassembly of section .text.__vector_30:

0000333c <__vector_30>:
    333c:	1f 92       	push	r1
    333e:	0f 92       	push	r0
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	0f 92       	push	r0
    3344:	11 24       	eor	r1, r1
    3346:	8f 93       	push	r24
    3348:	ef 93       	push	r30
    334a:	ff 93       	push	r31
    334c:	e0 91 9b 06 	lds	r30, 0x069B	; 0x80069b <tx_buffer_cursor>
    3350:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <tx_buffer_data_len>
    3354:	e8 17       	cp	r30, r24
    3356:	58 f4       	brcc	.+22     	; 0x336e <__vector_30+0x32>
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	8e 0f       	add	r24, r30
    335c:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <tx_buffer_cursor>
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	e8 54       	subi	r30, 0x48	; 72
    3364:	fb 4f       	sbci	r31, 0xFB	; 251
    3366:	80 81       	ld	r24, Z
    3368:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    336c:	04 c0       	rjmp	.+8      	; 0x3376 <__vector_30+0x3a>
    336e:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <tx_buffer_cursor>
    3372:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <tx_buffer_data_len>
    3376:	ff 91       	pop	r31
    3378:	ef 91       	pop	r30
    337a:	8f 91       	pop	r24
    337c:	0f 90       	pop	r0
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	0f 90       	pop	r0
    3382:	1f 90       	pop	r1
    3384:	18 95       	reti

Disassembly of section .text.__vector_28:

00002b18 <__vector_28>:
    2b18:	1f 92       	push	r1
    2b1a:	0f 92       	push	r0
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	0f 92       	push	r0
    2b20:	11 24       	eor	r1, r1
    2b22:	2f 93       	push	r18
    2b24:	8f 93       	push	r24
    2b26:	9f 93       	push	r25
    2b28:	ef 93       	push	r30
    2b2a:	ff 93       	push	r31
    2b2c:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <rx_buffer_has_message>
    2b30:	81 11       	cpse	r24, r1
    2b32:	0e c0       	rjmp	.+28     	; 0x2b50 <__vector_28+0x38>
    2b34:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <rx_buffer_data_len>
    2b38:	e6 39       	cpi	r30, 0x96	; 150
    2b3a:	50 f4       	brcc	.+20     	; 0x2b50 <__vector_28+0x38>
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	8e 0f       	add	r24, r30
    2b40:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <rx_buffer_data_len>
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2b4a:	e0 58       	subi	r30, 0x80	; 128
    2b4c:	fa 4f       	sbci	r31, 0xFA	; 250
    2b4e:	80 83       	st	Z, r24
    2b50:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <rx_buffer_data_len>
    2b54:	83 30       	cpi	r24, 0x03	; 3
    2b56:	80 f0       	brcs	.+32     	; 0x2b78 <__vector_28+0x60>
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	e1 58       	subi	r30, 0x81	; 129
    2b5e:	fa 4f       	sbci	r31, 0xFA	; 250
    2b60:	20 81       	ld	r18, Z
    2b62:	2a 30       	cpi	r18, 0x0A	; 10
    2b64:	49 f4       	brne	.+18     	; 0x2b78 <__vector_28+0x60>
    2b66:	fc 01       	movw	r30, r24
    2b68:	e2 58       	subi	r30, 0x82	; 130
    2b6a:	fa 4f       	sbci	r31, 0xFA	; 250
    2b6c:	80 81       	ld	r24, Z
    2b6e:	8d 30       	cpi	r24, 0x0D	; 13
    2b70:	19 f4       	brne	.+6      	; 0x2b78 <__vector_28+0x60>
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <rx_buffer_has_message>
    2b78:	ff 91       	pop	r31
    2b7a:	ef 91       	pop	r30
    2b7c:	9f 91       	pop	r25
    2b7e:	8f 91       	pop	r24
    2b80:	2f 91       	pop	r18
    2b82:	0f 90       	pop	r0
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	0f 90       	pop	r0
    2b88:	1f 90       	pop	r1
    2b8a:	18 95       	reti

Disassembly of section .text.main:

00003db2 <main>:
	//test_runner();
	
	while(1)
	{
		if(1){
			CONF_enter();
    3db2:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3db6:	2f ef       	ldi	r18, 0xFF	; 255
    3db8:	81 e1       	ldi	r24, 0x11	; 17
    3dba:	9a e7       	ldi	r25, 0x7A	; 122
    3dbc:	21 50       	subi	r18, 0x01	; 1
    3dbe:	80 40       	sbci	r24, 0x00	; 0
    3dc0:	90 40       	sbci	r25, 0x00	; 0
    3dc2:	e1 f7       	brne	.-8      	; 0x3dbc <main+0xa>
    3dc4:	00 c0       	rjmp	.+0      	; 0x3dc6 <main+0x14>
    3dc6:	00 00       	nop
    3dc8:	f4 cf       	rjmp	.-24     	; 0x3db2 <main>

Disassembly of section .text.calc_ppm_methane:

00002586 <calc_ppm_methane>:
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    2586:	8f 92       	push	r8
    2588:	9f 92       	push	r9
    258a:	af 92       	push	r10
    258c:	bf 92       	push	r11
    258e:	cf 92       	push	r12
    2590:	df 92       	push	r13
    2592:	ef 92       	push	r14
    2594:	ff 92       	push	r15
    2596:	bc 01       	movw	r22, r24
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	0e 94 25 14 	call	0x284a	; 0x284a <__floatunsisf>
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e8       	ldi	r20, 0x80	; 128
    25a6:	59 e3       	ldi	r21, 0x39	; 57
    25a8:	0e 94 66 20 	call	0x40cc	; 0x40cc <__mulsf3>
    25ac:	80 90 8c 06 	lds	r8, 0x068C	; 0x80068c <Vc>
    25b0:	90 90 8d 06 	lds	r9, 0x068D	; 0x80068d <Vc+0x1>
    25b4:	a0 90 8e 06 	lds	r10, 0x068E	; 0x80068e <Vc+0x2>
    25b8:	b0 90 8f 06 	lds	r11, 0x068F	; 0x80068f <Vc+0x3>
    25bc:	a5 01       	movw	r20, r10
    25be:	94 01       	movw	r18, r8
    25c0:	0e 94 66 20 	call	0x40cc	; 0x40cc <__mulsf3>
    25c4:	6b 01       	movw	r12, r22
    25c6:	7c 01       	movw	r14, r24
    25c8:	9b 01       	movw	r18, r22
    25ca:	ac 01       	movw	r20, r24
    25cc:	c5 01       	movw	r24, r10
    25ce:	b4 01       	movw	r22, r8
    25d0:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__subsf3>
    25d4:	a7 01       	movw	r20, r14
    25d6:	96 01       	movw	r18, r12
    25d8:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__divsf3>
    25dc:	20 91 88 06 	lds	r18, 0x0688	; 0x800688 <RRL>
    25e0:	30 91 89 06 	lds	r19, 0x0689	; 0x800689 <RRL+0x1>
    25e4:	40 91 8a 06 	lds	r20, 0x068A	; 0x80068a <RRL+0x2>
    25e8:	50 91 8b 06 	lds	r21, 0x068B	; 0x80068b <RRL+0x3>
    25ec:	0e 94 66 20 	call	0x40cc	; 0x40cc <__mulsf3>
    25f0:	20 91 84 06 	lds	r18, 0x0684	; 0x800684 <PPM_factor>
    25f4:	30 91 85 06 	lds	r19, 0x0685	; 0x800685 <PPM_factor+0x1>
    25f8:	40 91 86 06 	lds	r20, 0x0686	; 0x800686 <PPM_factor+0x2>
    25fc:	50 91 87 06 	lds	r21, 0x0687	; 0x800687 <PPM_factor+0x3>
    2600:	0e 94 66 20 	call	0x40cc	; 0x40cc <__mulsf3>
    2604:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    2608:	cb 01       	movw	r24, r22
    260a:	ff 90       	pop	r15
    260c:	ef 90       	pop	r14
    260e:	df 90       	pop	r13
    2610:	cf 90       	pop	r12
    2612:	bf 90       	pop	r11
    2614:	af 90       	pop	r10
    2616:	9f 90       	pop	r9
    2618:	8f 90       	pop	r8
    261a:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002e4c <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <ADC_get_value+0xa>
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    2e5c:	8f ef       	ldi	r24, 0xFF	; 255
    2e5e:	9f ef       	ldi	r25, 0xFF	; 255
    2e60:	f8 01       	movw	r30, r16
    2e62:	91 83       	std	Z+1, r25	; 0x01
    2e64:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    2e66:	42 e0       	ldi	r20, 0x02	; 2
    2e68:	be 01       	movw	r22, r28
    2e6a:	6f 5f       	subi	r22, 0xFF	; 255
    2e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6e:	8d e4       	ldi	r24, 0x4D	; 77
    2e70:	0e 94 8d 1c 	call	0x391a	; 0x391a <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2e74:	81 11       	cpse	r24, r1
    2e76:	0d c0       	rjmp	.+26     	; 0x2e92 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	98 2f       	mov	r25, r24
    2e7e:	88 27       	eor	r24, r24
    2e80:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    2e82:	82 2b       	or	r24, r18
    2e84:	0e 94 c3 12 	call	0x2586	; 0x2586 <calc_ppm_methane>
    2e88:	f8 01       	movw	r30, r16
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00003de2 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    3de2:	60 e4       	ldi	r22, 0x40	; 64
    3de4:	70 e0       	ldi	r23, 0x00	; 0
    3de6:	80 e8       	ldi	r24, 0x80	; 128
    3de8:	0e 94 75 1f 	call	0x3eea	; 0x3eea <eeprom_read_byte>
    3dec:	91 e0       	ldi	r25, 0x01	; 1
    3dee:	81 11       	cpse	r24, r1
    3df0:	01 c0       	rjmp	.+2      	; 0x3df4 <EM_has_deveui+0x12>
    3df2:	90 e0       	ldi	r25, 0x00	; 0
}
    3df4:	89 2f       	mov	r24, r25
    3df6:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00003df8 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    3df8:	61 e4       	ldi	r22, 0x41	; 65
    3dfa:	70 e0       	ldi	r23, 0x00	; 0
    3dfc:	80 e8       	ldi	r24, 0x80	; 128
    3dfe:	0e 94 75 1f 	call	0x3eea	; 0x3eea <eeprom_read_byte>
    3e02:	91 e0       	ldi	r25, 0x01	; 1
    3e04:	81 11       	cpse	r24, r1
    3e06:	01 c0       	rjmp	.+2      	; 0x3e0a <EM_has_appeui+0x12>
    3e08:	90 e0       	ldi	r25, 0x00	; 0
}
    3e0a:	89 2f       	mov	r24, r25
    3e0c:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00003e0e <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    3e0e:	62 e4       	ldi	r22, 0x42	; 66
    3e10:	70 e0       	ldi	r23, 0x00	; 0
    3e12:	80 e8       	ldi	r24, 0x80	; 128
    3e14:	0e 94 75 1f 	call	0x3eea	; 0x3eea <eeprom_read_byte>
    3e18:	91 e0       	ldi	r25, 0x01	; 1
    3e1a:	81 11       	cpse	r24, r1
    3e1c:	01 c0       	rjmp	.+2      	; 0x3e20 <EM_has_appkey+0x12>
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
}
    3e20:	89 2f       	mov	r24, r25
    3e22:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

000036ee <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    36ee:	cf 92       	push	r12
    36f0:	df 92       	push	r13
    36f2:	ef 92       	push	r14
    36f4:	6b 01       	movw	r12, r22
    36f6:	e8 2e       	mov	r14, r24
    36f8:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    36fc:	40 97       	sbiw	r24, 0x10	; 16
    36fe:	79 f4       	brne	.+30     	; 0x371e <EM_set_deveui+0x30>
    3700:	20 e1       	ldi	r18, 0x10	; 16
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	8e 2d       	mov	r24, r14
    370a:	b6 01       	movw	r22, r12
    370c:	0e 94 97 1a 	call	0x352e	; 0x352e <eeprom_update_block>
    3710:	61 e0       	ldi	r22, 0x01	; 1
    3712:	80 e4       	ldi	r24, 0x40	; 64
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <eeprom_update_byte>
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	01 c0       	rjmp	.+2      	; 0x3720 <EM_set_deveui+0x32>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	ef 90       	pop	r14
    3722:	df 90       	pop	r13
    3724:	cf 90       	pop	r12
    3726:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

000039e0 <EM_get_deveui>:
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	8c 01       	movw	r16, r24
    39e8:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <EM_has_deveui>
    39ec:	c8 2f       	mov	r28, r24
    39ee:	88 23       	and	r24, r24
    39f0:	51 f0       	breq	.+20     	; 0x3a06 <EM_get_deveui+0x26>
    39f2:	20 e1       	ldi	r18, 0x10	; 16
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	60 e0       	ldi	r22, 0x00	; 0
    39fc:	c8 01       	movw	r24, r16
    39fe:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <eeprom_read_block>
    3a02:	f8 01       	movw	r30, r16
    3a04:	10 8a       	std	Z+16, r1	; 0x10
    3a06:	8c 2f       	mov	r24, r28
    3a08:	cf 91       	pop	r28
    3a0a:	1f 91       	pop	r17
    3a0c:	0f 91       	pop	r16
    3a0e:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00003728 <EM_set_appeui>:
    3728:	cf 92       	push	r12
    372a:	df 92       	push	r13
    372c:	ef 92       	push	r14
    372e:	6b 01       	movw	r12, r22
    3730:	e8 2e       	mov	r14, r24
    3732:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    3736:	40 97       	sbiw	r24, 0x10	; 16
    3738:	79 f4       	brne	.+30     	; 0x3758 <EM_set_appeui+0x30>
    373a:	20 e1       	ldi	r18, 0x10	; 16
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e1       	ldi	r20, 0x10	; 16
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	8e 2d       	mov	r24, r14
    3744:	b6 01       	movw	r22, r12
    3746:	0e 94 97 1a 	call	0x352e	; 0x352e <eeprom_update_block>
    374a:	61 e0       	ldi	r22, 0x01	; 1
    374c:	81 e4       	ldi	r24, 0x41	; 65
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <eeprom_update_byte>
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	01 c0       	rjmp	.+2      	; 0x375a <EM_set_appeui+0x32>
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	ef 90       	pop	r14
    375c:	df 90       	pop	r13
    375e:	cf 90       	pop	r12
    3760:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003a10 <EM_get_appeui>:
    3a10:	0f 93       	push	r16
    3a12:	1f 93       	push	r17
    3a14:	cf 93       	push	r28
    3a16:	8c 01       	movw	r16, r24
    3a18:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <EM_has_appeui>
    3a1c:	c8 2f       	mov	r28, r24
    3a1e:	88 23       	and	r24, r24
    3a20:	51 f0       	breq	.+20     	; 0x3a36 <EM_get_appeui+0x26>
    3a22:	20 e1       	ldi	r18, 0x10	; 16
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	40 e1       	ldi	r20, 0x10	; 16
    3a28:	50 e0       	ldi	r21, 0x00	; 0
    3a2a:	60 e0       	ldi	r22, 0x00	; 0
    3a2c:	c8 01       	movw	r24, r16
    3a2e:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <eeprom_read_block>
    3a32:	f8 01       	movw	r30, r16
    3a34:	10 8a       	std	Z+16, r1	; 0x10
    3a36:	8c 2f       	mov	r24, r28
    3a38:	cf 91       	pop	r28
    3a3a:	1f 91       	pop	r17
    3a3c:	0f 91       	pop	r16
    3a3e:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00003762 <EM_set_appkey>:
    3762:	cf 92       	push	r12
    3764:	df 92       	push	r13
    3766:	ef 92       	push	r14
    3768:	6b 01       	movw	r12, r22
    376a:	e8 2e       	mov	r14, r24
    376c:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    3770:	80 97       	sbiw	r24, 0x20	; 32
    3772:	79 f4       	brne	.+30     	; 0x3792 <EM_set_appkey+0x30>
    3774:	20 e2       	ldi	r18, 0x20	; 32
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e2       	ldi	r20, 0x20	; 32
    377a:	50 e0       	ldi	r21, 0x00	; 0
    377c:	8e 2d       	mov	r24, r14
    377e:	b6 01       	movw	r22, r12
    3780:	0e 94 97 1a 	call	0x352e	; 0x352e <eeprom_update_block>
    3784:	61 e0       	ldi	r22, 0x01	; 1
    3786:	82 e4       	ldi	r24, 0x42	; 66
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <eeprom_update_byte>
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	01 c0       	rjmp	.+2      	; 0x3794 <EM_set_appkey+0x32>
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	ef 90       	pop	r14
    3796:	df 90       	pop	r13
    3798:	cf 90       	pop	r12
    379a:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00003a40 <EM_get_appkey>:
    3a40:	0f 93       	push	r16
    3a42:	1f 93       	push	r17
    3a44:	cf 93       	push	r28
    3a46:	8c 01       	movw	r16, r24
    3a48:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <EM_has_appkey>
    3a4c:	c8 2f       	mov	r28, r24
    3a4e:	88 23       	and	r24, r24
    3a50:	51 f0       	breq	.+20     	; 0x3a66 <EM_get_appkey+0x26>
    3a52:	20 e2       	ldi	r18, 0x20	; 32
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e2       	ldi	r20, 0x20	; 32
    3a58:	50 e0       	ldi	r21, 0x00	; 0
    3a5a:	60 e0       	ldi	r22, 0x00	; 0
    3a5c:	c8 01       	movw	r24, r16
    3a5e:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <eeprom_read_block>
    3a62:	f8 01       	movw	r30, r16
    3a64:	10 a2       	std	Z+32, r1	; 0x20
    3a66:	8c 2f       	mov	r24, r28
    3a68:	cf 91       	pop	r28
    3a6a:	1f 91       	pop	r17
    3a6c:	0f 91       	pop	r16
    3a6e:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00003f7e <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    3f7e:	ab 01       	movw	r20, r22
    3f80:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    3f82:	83 e4       	ldi	r24, 0x43	; 67
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <eeprom_update_dword>
    3f8a:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00003cb2 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	ec 01       	movw	r28, r24
    3cb8:	63 e4       	ldi	r22, 0x43	; 67
    3cba:	70 e0       	ldi	r23, 0x00	; 0
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <eeprom_read_dword>
    3cc2:	68 83       	st	Y, r22
    3cc4:	79 83       	std	Y+1, r23	; 0x01
    3cc6:	8a 83       	std	Y+2, r24	; 0x02
    3cc8:	9b 83       	std	Y+3, r25	; 0x03
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00003f8c <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    3f8c:	ab 01       	movw	r20, r22
    3f8e:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    3f90:	87 e4       	ldi	r24, 0x47	; 71
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <eeprom_update_dword>
    3f98:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00003cd0 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	ec 01       	movw	r28, r24
    3cd6:	67 e4       	ldi	r22, 0x47	; 71
    3cd8:	70 e0       	ldi	r23, 0x00	; 0
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <eeprom_read_dword>
    3ce0:	68 83       	st	Y, r22
    3ce2:	79 83       	std	Y+1, r23	; 0x01
    3ce4:	8a 83       	std	Y+2, r24	; 0x02
    3ce6:	9b 83       	std	Y+3, r25	; 0x03
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00003f9a <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    3f9a:	ab 01       	movw	r20, r22
    3f9c:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    3f9e:	8b e4       	ldi	r24, 0x4B	; 75
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <eeprom_update_dword>
    3fa6:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00003cee <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	ec 01       	movw	r28, r24
    3cf4:	6b e4       	ldi	r22, 0x4B	; 75
    3cf6:	70 e0       	ldi	r23, 0x00	; 0
    3cf8:	80 e0       	ldi	r24, 0x00	; 0
    3cfa:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <eeprom_read_dword>
    3cfe:	68 83       	st	Y, r22
    3d00:	79 83       	std	Y+1, r23	; 0x01
    3d02:	8a 83       	std	Y+2, r24	; 0x02
    3d04:	9b 83       	std	Y+3, r25	; 0x03
    3d06:	df 91       	pop	r29
    3d08:	cf 91       	pop	r28
    3d0a:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00003fa8 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    3fa8:	24 2f       	mov	r18, r20
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	44 e6       	ldi	r20, 0x64	; 100
    3fae:	50 e0       	ldi	r21, 0x00	; 0
    3fb0:	0e 94 97 1a 	call	0x352e	; 0x352e <eeprom_update_block>
    3fb4:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00003f0c <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    3f0c:	26 2f       	mov	r18, r22
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	44 e6       	ldi	r20, 0x64	; 100
    3f12:	50 e0       	ldi	r21, 0x00	; 0
    3f14:	60 e0       	ldi	r22, 0x00	; 0
    3f16:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <eeprom_read_block>
    3f1a:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

00004018 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    4018:	68 2f       	mov	r22, r24
    401a:	8f e4       	ldi	r24, 0x4F	; 79
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <eeprom_update_byte>
    4022:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00004024 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    4024:	6f e4       	ldi	r22, 0x4F	; 79
    4026:	70 e0       	ldi	r23, 0x00	; 0
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	0e 94 75 1f 	call	0x3eea	; 0x3eea <eeprom_read_byte>
}
    402e:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

00004030 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    4030:	bc 01       	movw	r22, r24
    4032:	80 e5       	ldi	r24, 0x50	; 80
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 3c 20 	call	0x4078	; 0x4078 <eeprom_update_word>
    403a:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

0000403c <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    403c:	60 e5       	ldi	r22, 0x50	; 80
    403e:	70 e0       	ldi	r23, 0x00	; 0
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	0e 94 05 20 	call	0x400a	; 0x400a <eeprom_read_word>
}
    4046:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

00004048 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    4048:	68 2f       	mov	r22, r24
    404a:	82 e5       	ldi	r24, 0x52	; 82
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <eeprom_update_byte>
    4052:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

00004054 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    4054:	62 e5       	ldi	r22, 0x52	; 82
    4056:	70 e0       	ldi	r23, 0x00	; 0
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	0e 94 75 1f 	call	0x3eea	; 0x3eea <eeprom_read_byte>
    405e:	08 95       	ret

Disassembly of section .text.LM_reset_module:

000040dc <LM_reset_module>:
bool LM_is_free(){
	return busy==false;
}

LM_STATUS LM_reset_module(){
	return util_reset_module();
    40dc:	0e 94 2f 1a 	call	0x345e	; 0x345e <util_reset_module>
}
    40e0:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

000040e2 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    40e2:	0e 94 ce 1b 	call	0x379c	; 0x379c <util_lora_forward_msg>
    40e6:	08 95       	ret

Disassembly of section .text.LM_send_break:

000040e8 <LM_send_break>:
}

void LM_send_break(char res[]){
	util_send_break(res);
    40e8:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <util_send_break>
    40ec:	08 95       	ret

Disassembly of section .text.attach_ending:

00003d48 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    3d48:	fc 01       	movw	r30, r24
    3d4a:	01 90       	ld	r0, Z+
    3d4c:	00 20       	and	r0, r0
    3d4e:	e9 f7       	brne	.-6      	; 0x3d4a <attach_ending+0x2>
    3d50:	cf 01       	movw	r24, r30
    3d52:	23 e0       	ldi	r18, 0x03	; 3
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	47 e1       	ldi	r20, 0x17	; 23
    3d58:	55 e0       	ldi	r21, 0x05	; 5
    3d5a:	60 e0       	ldi	r22, 0x00	; 0
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
    3d62:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

00003386 <util_strbeginswith>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    3386:	6f 92       	push	r6
    3388:	7f 92       	push	r7
    338a:	8f 92       	push	r8
    338c:	cf 92       	push	r12
    338e:	df 92       	push	r13
    3390:	ef 92       	push	r14
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	3b 01       	movw	r6, r22
    3398:	88 2e       	mov	r8, r24
    339a:	69 01       	movw	r12, r18
    339c:	e4 2e       	mov	r14, r20
    339e:	84 2f       	mov	r24, r20
    33a0:	b9 01       	movw	r22, r18
    33a2:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    33a6:	8c 01       	movw	r16, r24
    33a8:	4e 2d       	mov	r20, r14
    33aa:	96 01       	movw	r18, r12
    33ac:	88 2d       	mov	r24, r8
    33ae:	b3 01       	movw	r22, r6
    33b0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <strncmp>
    33b4:	21 e0       	ldi	r18, 0x01	; 1
    33b6:	89 2b       	or	r24, r25
    33b8:	09 f0       	breq	.+2      	; 0x33bc <util_strbeginswith+0x36>
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	82 2f       	mov	r24, r18
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	ef 90       	pop	r14
    33c4:	df 90       	pop	r13
    33c6:	cf 90       	pop	r12
    33c8:	8f 90       	pop	r8
    33ca:	7f 90       	pop	r7
    33cc:	6f 90       	pop	r6
    33ce:	08 95       	ret

Disassembly of section .text.util_reset_module:

0000345e <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    345e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <rn2483_reset_active>
    3462:	2f ef       	ldi	r18, 0xFF	; 255
    3464:	89 e6       	ldi	r24, 0x69	; 105
    3466:	98 e1       	ldi	r25, 0x18	; 24
    3468:	21 50       	subi	r18, 0x01	; 1
    346a:	80 40       	sbci	r24, 0x00	; 0
    346c:	90 40       	sbci	r25, 0x00	; 0
    346e:	e1 f7       	brne	.-8      	; 0x3468 <util_reset_module+0xa>
    3470:	00 c0       	rjmp	.+0      	; 0x3472 <util_reset_module+0x14>
    3472:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    3474:	0e 94 5e 20 	call	0x40bc	; 0x40bc <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    3478:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <uart0_hal_message_ready>
    347c:	88 23       	and	r24, r24
    347e:	e1 f3       	breq	.-8      	; 0x3478 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    3480:	8e e5       	ldi	r24, 0x5E	; 94
    3482:	92 e0       	ldi	r25, 0x02	; 2
    3484:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    3488:	6e e5       	ldi	r22, 0x5E	; 94
    348a:	72 e0       	ldi	r23, 0x02	; 2
    348c:	80 e8       	ldi	r24, 0x80	; 128
    348e:	2d e8       	ldi	r18, 0x8D	; 141
    3490:	35 e0       	ldi	r19, 0x05	; 5
    3492:	40 e0       	ldi	r20, 0x00	; 0
    3494:	0e 94 c3 19 	call	0x3386	; 0x3386 <util_strbeginswith>
    3498:	88 23       	and	r24, r24
    349a:	11 f0       	breq	.+4      	; 0x34a0 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    34a0:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    34a2:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

0000379c <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    379c:	cf 93       	push	r28
    379e:	df 93       	push	r29
    37a0:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    37a2:	ab 01       	movw	r20, r22
    37a4:	68 2f       	mov	r22, r24
    37a6:	8e e5       	ldi	r24, 0x5E	; 94
    37a8:	92 e0       	ldi	r25, 0x02	; 2
    37aa:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <strcpy>
	attach_ending(lm_msg);
    37ae:	8e e5       	ldi	r24, 0x5E	; 94
    37b0:	92 e0       	ldi	r25, 0x02	; 2
    37b2:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <attach_ending>
	uart0_hal_send_string(lm_msg);
    37b6:	6e e5       	ldi	r22, 0x5E	; 94
    37b8:	72 e0       	ldi	r23, 0x02	; 2
    37ba:	80 e8       	ldi	r24, 0x80	; 128
    37bc:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <uart0_hal_send_string>
	
	while(!uart0_hal_message_ready());
    37c0:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <uart0_hal_message_ready>
    37c4:	88 23       	and	r24, r24
    37c6:	e1 f3       	breq	.-8      	; 0x37c0 <util_lora_forward_msg+0x24>
	uart0_hal_read_message_as_str(res);
    37c8:	ce 01       	movw	r24, r28
    37ca:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <uart0_hal_read_message_as_str>
}
    37ce:	df 91       	pop	r29
    37d0:	cf 91       	pop	r28
    37d2:	08 95       	ret

Disassembly of section .text.util_send_break:

00003c72 <util_send_break>:

void util_send_break(char res[]){
    3c72:	cf 93       	push	r28
    3c74:	df 93       	push	r29
    3c76:	ec 01       	movw	r28, r24
	uart0_hal_send_break(0x55);
    3c78:	85 e5       	ldi	r24, 0x55	; 85
    3c7a:	0e 94 0c 1a 	call	0x3418	; 0x3418 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    3c7e:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <uart0_hal_message_ready>
    3c82:	88 23       	and	r24, r24
    3c84:	e1 f3       	breq	.-8      	; 0x3c7e <util_send_break+0xc>
	
	uart0_hal_read_message_as_str(res);
    3c86:	ce 01       	movw	r24, r28
    3c88:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <uart0_hal_read_message_as_str>
    3c8c:	df 91       	pop	r29
    3c8e:	cf 91       	pop	r28
    3c90:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00001c1c <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <datetime_to_BCD+0x8>
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <datetime_to_BCD+0xa>
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <datetime_to_BCD+0xc>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	f9 01       	movw	r30, r18
    1c2e:	3d ec       	ldi	r19, 0xCD	; 205
    1c30:	43 9f       	mul	r20, r19
    1c32:	21 2d       	mov	r18, r1
    1c34:	11 24       	eor	r1, r1
    1c36:	26 95       	lsr	r18
    1c38:	26 95       	lsr	r18
    1c3a:	26 95       	lsr	r18
    1c3c:	10 e1       	ldi	r17, 0x10	; 16
    1c3e:	21 9f       	mul	r18, r17
    1c40:	d0 01       	movw	r26, r0
    1c42:	11 24       	eor	r1, r1
    1c44:	22 0f       	add	r18, r18
    1c46:	b2 2f       	mov	r27, r18
    1c48:	bb 0f       	add	r27, r27
    1c4a:	bb 0f       	add	r27, r27
    1c4c:	2b 0f       	add	r18, r27
    1c4e:	42 1b       	sub	r20, r18
    1c50:	4a 2b       	or	r20, r26
    1c52:	40 83       	st	Z, r20
    1c54:	53 9f       	mul	r21, r19
    1c56:	21 2d       	mov	r18, r1
    1c58:	11 24       	eor	r1, r1
    1c5a:	26 95       	lsr	r18
    1c5c:	26 95       	lsr	r18
    1c5e:	26 95       	lsr	r18
    1c60:	40 e1       	ldi	r20, 0x10	; 16
    1c62:	24 9f       	mul	r18, r20
    1c64:	d0 01       	movw	r26, r0
    1c66:	11 24       	eor	r1, r1
    1c68:	22 0f       	add	r18, r18
    1c6a:	42 2f       	mov	r20, r18
    1c6c:	44 0f       	add	r20, r20
    1c6e:	44 0f       	add	r20, r20
    1c70:	24 0f       	add	r18, r20
    1c72:	52 1b       	sub	r21, r18
    1c74:	5a 2b       	or	r21, r26
    1c76:	51 83       	std	Z+1, r21	; 0x01
    1c78:	63 9f       	mul	r22, r19
    1c7a:	41 2d       	mov	r20, r1
    1c7c:	11 24       	eor	r1, r1
    1c7e:	46 95       	lsr	r20
    1c80:	46 95       	lsr	r20
    1c82:	46 95       	lsr	r20
    1c84:	10 e1       	ldi	r17, 0x10	; 16
    1c86:	41 9f       	mul	r20, r17
    1c88:	d0 01       	movw	r26, r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	44 0f       	add	r20, r20
    1c8e:	24 2f       	mov	r18, r20
    1c90:	22 0f       	add	r18, r18
    1c92:	22 0f       	add	r18, r18
    1c94:	42 0f       	add	r20, r18
    1c96:	64 1b       	sub	r22, r20
    1c98:	6a 2b       	or	r22, r26
    1c9a:	62 83       	std	Z+2, r22	; 0x02
    1c9c:	73 9f       	mul	r23, r19
    1c9e:	41 2d       	mov	r20, r1
    1ca0:	11 24       	eor	r1, r1
    1ca2:	46 95       	lsr	r20
    1ca4:	46 95       	lsr	r20
    1ca6:	46 95       	lsr	r20
    1ca8:	20 e1       	ldi	r18, 0x10	; 16
    1caa:	42 9f       	mul	r20, r18
    1cac:	d0 01       	movw	r26, r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	44 0f       	add	r20, r20
    1cb2:	24 2f       	mov	r18, r20
    1cb4:	22 0f       	add	r18, r18
    1cb6:	22 0f       	add	r18, r18
    1cb8:	42 0f       	add	r20, r18
    1cba:	74 1b       	sub	r23, r20
    1cbc:	7a 2b       	or	r23, r26
    1cbe:	73 83       	std	Z+3, r23	; 0x03
    1cc0:	83 9f       	mul	r24, r19
    1cc2:	41 2d       	mov	r20, r1
    1cc4:	11 24       	eor	r1, r1
    1cc6:	46 95       	lsr	r20
    1cc8:	46 95       	lsr	r20
    1cca:	46 95       	lsr	r20
    1ccc:	10 e1       	ldi	r17, 0x10	; 16
    1cce:	41 9f       	mul	r20, r17
    1cd0:	b0 01       	movw	r22, r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	44 0f       	add	r20, r20
    1cd6:	24 2f       	mov	r18, r20
    1cd8:	22 0f       	add	r18, r18
    1cda:	22 0f       	add	r18, r18
    1cdc:	42 0f       	add	r20, r18
    1cde:	84 1b       	sub	r24, r20
    1ce0:	86 2b       	or	r24, r22
    1ce2:	84 83       	std	Z+4, r24	; 0x04
    1ce4:	93 9f       	mul	r25, r19
    1ce6:	31 2d       	mov	r19, r1
    1ce8:	11 24       	eor	r1, r1
    1cea:	36 95       	lsr	r19
    1cec:	36 95       	lsr	r19
    1cee:	36 95       	lsr	r19
    1cf0:	20 e1       	ldi	r18, 0x10	; 16
    1cf2:	32 9f       	mul	r19, r18
    1cf4:	a0 01       	movw	r20, r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	33 0f       	add	r19, r19
    1cfa:	83 2f       	mov	r24, r19
    1cfc:	88 0f       	add	r24, r24
    1cfe:	88 0f       	add	r24, r24
    1d00:	38 0f       	add	r19, r24
    1d02:	93 1b       	sub	r25, r19
    1d04:	94 2b       	or	r25, r20
    1d06:	95 83       	std	Z+5, r25	; 0x05
    1d08:	26 96       	adiw	r28, 0x06	; 6
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00001766 <RTC_get_current_time>:
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	27 97       	sbiw	r28, 0x07	; 7
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	8c 01       	movw	r16, r24
    1780:	21 e0       	ldi	r18, 0x01	; 1
    1782:	40 ea       	ldi	r20, 0xA0	; 160
    1784:	55 e0       	ldi	r21, 0x05	; 5
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	81 e5       	ldi	r24, 0x51	; 81
    178a:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <TWI_API_write_data>
    178e:	81 11       	cpse	r24, r1
    1790:	7c c0       	rjmp	.+248    	; 0x188a <RTC_get_current_time+0x124>
    1792:	47 e0       	ldi	r20, 0x07	; 7
    1794:	be 01       	movw	r22, r28
    1796:	6f 5f       	subi	r22, 0xFF	; 255
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	81 e5       	ldi	r24, 0x51	; 81
    179c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <TWI_API_repeat_read_data_stop>
    17a0:	81 11       	cpse	r24, r1
    17a2:	75 c0       	rjmp	.+234    	; 0x188e <RTC_get_current_time+0x128>
    17a4:	29 81       	ldd	r18, Y+1	; 0x01
    17a6:	82 2f       	mov	r24, r18
    17a8:	8f 77       	andi	r24, 0x7F	; 127
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	95 95       	asr	r25
    17ae:	87 95       	ror	r24
    17b0:	95 95       	asr	r25
    17b2:	87 95       	ror	r24
    17b4:	95 95       	asr	r25
    17b6:	87 95       	ror	r24
    17b8:	95 95       	asr	r25
    17ba:	87 95       	ror	r24
    17bc:	88 0f       	add	r24, r24
    17be:	98 2f       	mov	r25, r24
    17c0:	99 0f       	add	r25, r25
    17c2:	99 0f       	add	r25, r25
    17c4:	89 0f       	add	r24, r25
    17c6:	2f 70       	andi	r18, 0x0F	; 15
    17c8:	82 0f       	add	r24, r18
    17ca:	f8 01       	movw	r30, r16
    17cc:	80 83       	st	Z, r24
    17ce:	2a 81       	ldd	r18, Y+2	; 0x02
    17d0:	82 2f       	mov	r24, r18
    17d2:	8f 77       	andi	r24, 0x7F	; 127
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	95 95       	asr	r25
    17d8:	87 95       	ror	r24
    17da:	95 95       	asr	r25
    17dc:	87 95       	ror	r24
    17de:	95 95       	asr	r25
    17e0:	87 95       	ror	r24
    17e2:	95 95       	asr	r25
    17e4:	87 95       	ror	r24
    17e6:	88 0f       	add	r24, r24
    17e8:	98 2f       	mov	r25, r24
    17ea:	99 0f       	add	r25, r25
    17ec:	99 0f       	add	r25, r25
    17ee:	89 0f       	add	r24, r25
    17f0:	2f 70       	andi	r18, 0x0F	; 15
    17f2:	82 0f       	add	r24, r18
    17f4:	81 83       	std	Z+1, r24	; 0x01
    17f6:	2b 81       	ldd	r18, Y+3	; 0x03
    17f8:	82 2f       	mov	r24, r18
    17fa:	8f 73       	andi	r24, 0x3F	; 63
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	95 95       	asr	r25
    1800:	87 95       	ror	r24
    1802:	95 95       	asr	r25
    1804:	87 95       	ror	r24
    1806:	95 95       	asr	r25
    1808:	87 95       	ror	r24
    180a:	95 95       	asr	r25
    180c:	87 95       	ror	r24
    180e:	88 0f       	add	r24, r24
    1810:	98 2f       	mov	r25, r24
    1812:	99 0f       	add	r25, r25
    1814:	99 0f       	add	r25, r25
    1816:	89 0f       	add	r24, r25
    1818:	2f 70       	andi	r18, 0x0F	; 15
    181a:	82 0f       	add	r24, r18
    181c:	82 83       	std	Z+2, r24	; 0x02
    181e:	2c 81       	ldd	r18, Y+4	; 0x04
    1820:	82 2f       	mov	r24, r18
    1822:	8f 73       	andi	r24, 0x3F	; 63
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	95 95       	asr	r25
    1828:	87 95       	ror	r24
    182a:	95 95       	asr	r25
    182c:	87 95       	ror	r24
    182e:	95 95       	asr	r25
    1830:	87 95       	ror	r24
    1832:	95 95       	asr	r25
    1834:	87 95       	ror	r24
    1836:	88 0f       	add	r24, r24
    1838:	98 2f       	mov	r25, r24
    183a:	99 0f       	add	r25, r25
    183c:	99 0f       	add	r25, r25
    183e:	89 0f       	add	r24, r25
    1840:	2f 70       	andi	r18, 0x0F	; 15
    1842:	82 0f       	add	r24, r18
    1844:	83 83       	std	Z+3, r24	; 0x03
    1846:	2e 81       	ldd	r18, Y+6	; 0x06
    1848:	82 2f       	mov	r24, r18
    184a:	8f 71       	andi	r24, 0x1F	; 31
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	95 95       	asr	r25
    1850:	87 95       	ror	r24
    1852:	95 95       	asr	r25
    1854:	87 95       	ror	r24
    1856:	95 95       	asr	r25
    1858:	87 95       	ror	r24
    185a:	95 95       	asr	r25
    185c:	87 95       	ror	r24
    185e:	88 0f       	add	r24, r24
    1860:	98 2f       	mov	r25, r24
    1862:	99 0f       	add	r25, r25
    1864:	99 0f       	add	r25, r25
    1866:	89 0f       	add	r24, r25
    1868:	2f 70       	andi	r18, 0x0F	; 15
    186a:	82 0f       	add	r24, r18
    186c:	84 83       	std	Z+4, r24	; 0x04
    186e:	8f 81       	ldd	r24, Y+7	; 0x07
    1870:	98 2f       	mov	r25, r24
    1872:	92 95       	swap	r25
    1874:	9f 70       	andi	r25, 0x0F	; 15
    1876:	99 0f       	add	r25, r25
    1878:	29 2f       	mov	r18, r25
    187a:	22 0f       	add	r18, r18
    187c:	22 0f       	add	r18, r18
    187e:	92 0f       	add	r25, r18
    1880:	8f 70       	andi	r24, 0x0F	; 15
    1882:	89 0f       	add	r24, r25
    1884:	85 83       	std	Z+5, r24	; 0x05
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	03 c0       	rjmp	.+6      	; 0x1890 <RTC_get_current_time+0x12a>
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <RTC_get_current_time+0x12a>
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	27 96       	adiw	r28, 0x07	; 7
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

00002cd4 <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	64 97       	sbiw	r28, 0x14	; 20
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    2ce8:	9e 01       	movw	r18, r28
    2cea:	27 5f       	subi	r18, 0xF7	; 247
    2cec:	3f 4f       	sbci	r19, 0xFF	; 255
    2cee:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <datetime_to_BCD>
	
	data[0]=0x02;
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    2cf6:	89 85       	ldd	r24, Y+9	; 0x09
    2cf8:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    2cfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cfc:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    2cfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d00:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    2d02:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d04:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    2d06:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    2d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d0a:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    2d0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d0e:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    2d10:	ae 01       	movw	r20, r28
    2d12:	4f 5f       	subi	r20, 0xFF	; 255
    2d14:	5f 4f       	sbci	r21, 0xFF	; 255
    2d16:	60 e8       	ldi	r22, 0x80	; 128
    2d18:	28 e0       	ldi	r18, 0x08	; 8
    2d1a:	81 e5       	ldi	r24, 0x51	; 81
    2d1c:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2d20:	88 23       	and	r24, r24
    2d22:	11 f0       	breq	.+4      	; 0x2d28 <RTC_set_current_time+0x54>
    2d24:	82 e0       	ldi	r24, 0x02	; 2
    2d26:	01 c0       	rjmp	.+2      	; 0x2d2a <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    2d28:	80 e0       	ldi	r24, 0x00	; 0
}
    2d2a:	64 96       	adiw	r28, 0x14	; 20
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00003d7e <bytes_2_uint>:
	TC1_HAL_start();
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    3d7e:	fc 01       	movw	r30, r24
    3d80:	54 81       	ldd	r21, Z+4	; 0x04
    3d82:	43 81       	ldd	r20, Z+3	; 0x03
    3d84:	31 81       	ldd	r19, Z+1	; 0x01
    3d86:	20 81       	ld	r18, Z
    3d88:	65 2f       	mov	r22, r21
    3d8a:	74 2f       	mov	r23, r20
    3d8c:	83 2f       	mov	r24, r19
    3d8e:	92 2f       	mov	r25, r18
    3d90:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fixunssfsi>
    3d94:	cb 01       	movw	r24, r22
    3d96:	08 95       	ret

Disassembly of section .text.init_measurement:

000037d4 <init_measurement>:
    37d4:	25 e0       	ldi	r18, 0x05	; 5
    37d6:	44 e9       	ldi	r20, 0x94	; 148
    37d8:	55 e0       	ldi	r21, 0x05	; 5
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	81 e6       	ldi	r24, 0x61	; 97
    37de:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <TWI_API_write_data_stop>
    37e2:	81 11       	cpse	r24, r1
    37e4:	0f c0       	rjmp	.+30     	; 0x3804 <init_measurement+0x30>
    37e6:	25 e0       	ldi	r18, 0x05	; 5
    37e8:	49 e9       	ldi	r20, 0x99	; 153
    37ea:	55 e0       	ldi	r21, 0x05	; 5
    37ec:	60 e0       	ldi	r22, 0x00	; 0
    37ee:	81 e6       	ldi	r24, 0x61	; 97
    37f0:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <TWI_API_write_data_stop>
    37f4:	81 11       	cpse	r24, r1
    37f6:	08 c0       	rjmp	.+16     	; 0x3808 <init_measurement+0x34>
    37f8:	0e 94 42 20 	call	0x4084	; 0x4084 <SCD30_HAL_data_ready>
    37fc:	88 23       	and	r24, r24
    37fe:	e1 f3       	breq	.-8      	; 0x37f8 <init_measurement+0x24>
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	08 95       	ret
    3804:	82 e0       	ldi	r24, 0x02	; 2
    3806:	08 95       	ret
    3808:	82 e0       	ldi	r24, 0x02	; 2
    380a:	08 95       	ret

Disassembly of section .text.validate_data:

0000394c <validate_data>:
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	ec 01       	movw	r28, r24
    3952:	62 e0       	ldi	r22, 0x02	; 2
    3954:	0e 94 22 1c 	call	0x3844	; 0x3844 <calc_crc8>
    3958:	9a 81       	ldd	r25, Y+2	; 0x02
    395a:	89 13       	cpse	r24, r25
    395c:	0a c0       	rjmp	.+20     	; 0x3972 <validate_data+0x26>
    395e:	62 e0       	ldi	r22, 0x02	; 2
    3960:	ce 01       	movw	r24, r28
    3962:	03 96       	adiw	r24, 0x03	; 3
    3964:	0e 94 22 1c 	call	0x3844	; 0x3844 <calc_crc8>
    3968:	9d 81       	ldd	r25, Y+5	; 0x05
    396a:	89 17       	cp	r24, r25
    396c:	21 f0       	breq	.+8      	; 0x3976 <validate_data+0x2a>
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	03 c0       	rjmp	.+6      	; 0x3978 <validate_data+0x2c>
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	01 c0       	rjmp	.+2      	; 0x3978 <validate_data+0x2c>
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	df 91       	pop	r29
    397a:	cf 91       	pop	r28
    397c:	08 95       	ret

Disassembly of section .text.read_value:

0000244c <read_value>:
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	00 d0       	rcall	.+0      	; 0x2456 <read_value+0xa>
    2456:	00 d0       	rcall	.+0      	; 0x2458 <read_value+0xc>
    2458:	00 d0       	rcall	.+0      	; 0x245a <read_value+0xe>
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	8c 01       	movw	r16, r24
    2460:	8f ef       	ldi	r24, 0xFF	; 255
    2462:	9f ef       	ldi	r25, 0xFF	; 255
    2464:	f8 01       	movw	r30, r16
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	80 83       	st	Z, r24
    246a:	0e 94 42 20 	call	0x4084	; 0x4084 <SCD30_HAL_data_ready>
    246e:	81 11       	cpse	r24, r1
    2470:	07 c0       	rjmp	.+14     	; 0x2480 <read_value+0x34>
    2472:	8e ef       	ldi	r24, 0xFE	; 254
    2474:	9f ef       	ldi	r25, 0xFF	; 255
    2476:	f8 01       	movw	r30, r16
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	2c c0       	rjmp	.+88     	; 0x24d8 <read_value+0x8c>
    2480:	22 e0       	ldi	r18, 0x02	; 2
    2482:	4e e9       	ldi	r20, 0x9E	; 158
    2484:	55 e0       	ldi	r21, 0x05	; 5
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	81 e6       	ldi	r24, 0x61	; 97
    248a:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <TWI_API_write_data_stop>
    248e:	81 11       	cpse	r24, r1
    2490:	1e c0       	rjmp	.+60     	; 0x24ce <read_value+0x82>
    2492:	8f e3       	ldi	r24, 0x3F	; 63
    2494:	9f e1       	ldi	r25, 0x1F	; 31
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <read_value+0x4a>
    249a:	00 c0       	rjmp	.+0      	; 0x249c <read_value+0x50>
    249c:	00 00       	nop
    249e:	46 e0       	ldi	r20, 0x06	; 6
    24a0:	be 01       	movw	r22, r28
    24a2:	6f 5f       	subi	r22, 0xFF	; 255
    24a4:	7f 4f       	sbci	r23, 0xFF	; 255
    24a6:	81 e6       	ldi	r24, 0x61	; 97
    24a8:	0e 94 8d 1c 	call	0x391a	; 0x391a <TWI_API_read_data_ack_end_nack_stop>
    24ac:	81 11       	cpse	r24, r1
    24ae:	11 c0       	rjmp	.+34     	; 0x24d2 <read_value+0x86>
    24b0:	ce 01       	movw	r24, r28
    24b2:	01 96       	adiw	r24, 0x01	; 1
    24b4:	0e 94 a6 1c 	call	0x394c	; 0x394c <validate_data>
    24b8:	88 23       	and	r24, r24
    24ba:	69 f0       	breq	.+26     	; 0x24d6 <read_value+0x8a>
    24bc:	ce 01       	movw	r24, r28
    24be:	01 96       	adiw	r24, 0x01	; 1
    24c0:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <bytes_2_uint>
    24c4:	f8 01       	movw	r30, r16
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	80 83       	st	Z, r24
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	05 c0       	rjmp	.+10     	; 0x24d8 <read_value+0x8c>
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	03 c0       	rjmp	.+6      	; 0x24d8 <read_value+0x8c>
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <read_value+0x8c>
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	26 96       	adiw	r28, 0x06	; 6
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	1f 91       	pop	r17
    24ea:	0f 91       	pop	r16
    24ec:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00003c0e <SCD30_sensor_on>:
    3c0e:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <SCD30_HAL_init>
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <PM_HAL_SCD30_power>
    3c18:	2f ef       	ldi	r18, 0xFF	; 255
    3c1a:	83 ed       	ldi	r24, 0xD3	; 211
    3c1c:	90 e3       	ldi	r25, 0x30	; 48
    3c1e:	21 50       	subi	r18, 0x01	; 1
    3c20:	80 40       	sbci	r24, 0x00	; 0
    3c22:	90 40       	sbci	r25, 0x00	; 0
    3c24:	e1 f7       	brne	.-8      	; 0x3c1e <SCD30_sensor_on+0x10>
    3c26:	00 c0       	rjmp	.+0      	; 0x3c28 <SCD30_sensor_on+0x1a>
    3c28:	00 00       	nop
    3c2a:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <init_measurement>
    3c2e:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00003d98 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    3d98:	cf 93       	push	r28
    3d9a:	df 93       	push	r29
    3d9c:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    3d9e:	0e 94 42 20 	call	0x4084	; 0x4084 <SCD30_HAL_data_ready>
    3da2:	88 23       	and	r24, r24
    3da4:	e1 f3       	breq	.-8      	; 0x3d9e <SCD30_get_reading+0x6>
	
	return read_value(value);
    3da6:	ce 01       	movw	r24, r28
    3da8:	0e 94 26 12 	call	0x244c	; 0x244c <read_value>
}
    3dac:	df 91       	pop	r29
    3dae:	cf 91       	pop	r28
    3db0:	08 95       	ret

Disassembly of section .text.parse_cmd:

00003b76 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3b76:	fc 01       	movw	r30, r24
    3b78:	80 81       	ld	r24, Z
    3b7a:	82 37       	cpi	r24, 0x72	; 114
    3b7c:	41 f0       	breq	.+16     	; 0x3b8e <parse_cmd+0x18>
	if(msg[0]=='w') return CONF_WRTIE;
    3b7e:	87 37       	cpi	r24, 0x77	; 119
    3b80:	41 f0       	breq	.+16     	; 0x3b92 <parse_cmd+0x1c>
	if(msg[0]=='c') return CONF_CONNECT;
    3b82:	83 36       	cpi	r24, 0x63	; 99
    3b84:	41 f0       	breq	.+16     	; 0x3b96 <parse_cmd+0x20>
	if(msg[0]=='s') return CONF_SAMPLE;
    3b86:	83 37       	cpi	r24, 0x73	; 115
    3b88:	41 f4       	brne	.+16     	; 0x3b9a <parse_cmd+0x24>
    3b8a:	8a e0       	ldi	r24, 0x0A	; 10
    3b8c:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3b8e:	87 e0       	ldi	r24, 0x07	; 7
    3b90:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    3b92:	88 e0       	ldi	r24, 0x08	; 8
    3b94:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    3b96:	89 e0       	ldi	r24, 0x09	; 9
    3b98:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
	
	return CONF_NOT_VALID;
    3b9a:	85 e0       	ldi	r24, 0x05	; 5
}
    3b9c:	08 95       	ret

Disassembly of section .text.validate_cmd:

00002ea2 <validate_cmd>:

static bool validate_cmd(char msg[]){
    2ea2:	cf 93       	push	r28
    2ea4:	df 93       	push	r29
    2ea6:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    2ea8:	bc 01       	movw	r22, r24
    2eaa:	80 e8       	ldi	r24, 0x80	; 128
    2eac:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    2eb0:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	31 97       	sbiw	r30, 0x01	; 1
    2eb6:	ec 0f       	add	r30, r28
    2eb8:	fd 1f       	adc	r31, r29
    2eba:	80 81       	ld	r24, Z
    2ebc:	80 32       	cpi	r24, 0x20	; 32
    2ebe:	b1 f0       	breq	.+44     	; 0x2eec <validate_cmd+0x4a>
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e0       	ldi	r20, 0x00	; 0
    2ec6:	0d c0       	rjmp	.+26     	; 0x2ee2 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e2 0f       	add	r30, r18
    2ecc:	f3 1f       	adc	r31, r19
    2ece:	90 81       	ld	r25, Z
    2ed0:	90 32       	cpi	r25, 0x20	; 32
    2ed2:	21 f4       	brne	.+8      	; 0x2edc <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    2ed4:	41 11       	cpse	r20, r1
    2ed6:	0c c0       	rjmp	.+24     	; 0x2ef0 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    2ed8:	41 e0       	ldi	r20, 0x01	; 1
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    2edc:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    2ede:	2f 5f       	subi	r18, 0xFF	; 255
    2ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee2:	26 17       	cp	r18, r22
    2ee4:	37 07       	cpc	r19, r23
    2ee6:	80 f3       	brcs	.-32     	; 0x2ec8 <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	03 c0       	rjmp	.+6      	; 0x2ef2 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	01 c0       	rjmp	.+2      	; 0x2ef2 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	08 95       	ret

Disassembly of section .text.CONF_enter:

000018a6 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    18a6:	cf 93       	push	r28
	uart1_hal_init();
    18a8:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    18ac:	c0 e0       	ldi	r28, 0x00	; 0
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <CONF_enter+0x24>
				
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    18b0:	c2 e0       	ldi	r28, 0x02	; 2
    18b2:	0b c0       	rjmp	.+22     	; 0x18ca <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    18b4:	c5 e0       	ldi	r28, 0x05	; 5
    18b6:	09 c0       	rjmp	.+18     	; 0x18ca <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    18b8:	c6 e0       	ldi	r28, 0x06	; 6
    18ba:	07 c0       	rjmp	.+14     	; 0x18ca <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    18bc:	c5 e0       	ldi	r28, 0x05	; 5
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    18c0:	c5 e0       	ldi	r28, 0x05	; 5
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    18c4:	c5 e0       	ldi	r28, 0x05	; 5
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    18c8:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    18ca:	ec 2f       	mov	r30, r28
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	ec 30       	cpi	r30, 0x0C	; 12
    18d0:	f1 05       	cpc	r31, r1
    18d2:	d8 f7       	brcc	.-10     	; 0x18ca <CONF_enter+0x24>
    18d4:	e2 5c       	subi	r30, 0xC2	; 194
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	0c 94 36 20 	jmp	0x406c	; 0x406c <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    18dc:	6c e7       	ldi	r22, 0x7C	; 124
    18de:	73 e0       	ldi	r23, 0x03	; 3
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    18e6:	62 ea       	ldi	r22, 0xA2	; 162
    18e8:	73 e0       	ldi	r23, 0x03	; 3
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				
				if(!init_methane_SCD30()){
    18f0:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <init_methane_SCD30>
    18f4:	81 11       	cpse	r24, r1
    18f6:	dc cf       	rjmp	.-72     	; 0x18b0 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    18f8:	64 ec       	ldi	r22, 0xC4	; 196
    18fa:	73 e0       	ldi	r23, 0x03	; 3
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
					state=CONF_EXIT;
    1902:	c4 e0       	ldi	r28, 0x04	; 4
    1904:	e2 cf       	rjmp	.-60     	; 0x18ca <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    1906:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <uart1_hal_message_ready>
    190a:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    190c:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    190e:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <uart1_hal_rx_full>
    1912:	81 11       	cpse	r24, r1
    1914:	cf cf       	rjmp	.-98     	; 0x18b4 <CONF_enter+0xe>
    1916:	d9 cf       	rjmp	.-78     	; 0x18ca <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    1918:	8e ee       	ldi	r24, 0xEE	; 238
    191a:	93 e0       	ldi	r25, 0x03	; 3
    191c:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    1920:	8e ee       	ldi	r24, 0xEE	; 238
    1922:	93 e0       	ldi	r25, 0x03	; 3
    1924:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <validate_cmd>
    1928:	88 23       	and	r24, r24
    192a:	31 f2       	breq	.-116    	; 0x18b8 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    192c:	8e ee       	ldi	r24, 0xEE	; 238
    192e:	93 e0       	ldi	r25, 0x03	; 3
    1930:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <parse_cmd>
    1934:	c8 2f       	mov	r28, r24
    1936:	c9 cf       	rjmp	.-110    	; 0x18ca <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    1938:	6e ee       	ldi	r22, 0xEE	; 238
    193a:	73 e0       	ldi	r23, 0x03	; 3
    193c:	80 e8       	ldi	r24, 0x80	; 128
    193e:	46 e2       	ldi	r20, 0x26	; 38
    1940:	53 e0       	ldi	r21, 0x03	; 3
    1942:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <handle_read>
    1946:	88 23       	and	r24, r24
    1948:	09 f4       	brne	.+2      	; 0x194c <CONF_enter+0xa6>
    194a:	b8 cf       	rjmp	.-144    	; 0x18bc <CONF_enter+0x16>
					state=CONF_REPLY;
    194c:	cb e0       	ldi	r28, 0x0B	; 11
    194e:	bd cf       	rjmp	.-134    	; 0x18ca <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    1950:	6e ee       	ldi	r22, 0xEE	; 238
    1952:	73 e0       	ldi	r23, 0x03	; 3
    1954:	80 e8       	ldi	r24, 0x80	; 128
    1956:	46 e2       	ldi	r20, 0x26	; 38
    1958:	53 e0       	ldi	r21, 0x03	; 3
    195a:	0e 94 32 09 	call	0x1264	; 0x1264 <handle_write>
    195e:	88 23       	and	r24, r24
    1960:	09 f4       	brne	.+2      	; 0x1964 <CONF_enter+0xbe>
    1962:	ae cf       	rjmp	.-164    	; 0x18c0 <CONF_enter+0x1a>
					state=CONF_REPLY;
    1964:	cb e0       	ldi	r28, 0x0B	; 11
    1966:	b1 cf       	rjmp	.-158    	; 0x18ca <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    1968:	6e ee       	ldi	r22, 0xEE	; 238
    196a:	73 e0       	ldi	r23, 0x03	; 3
    196c:	80 e8       	ldi	r24, 0x80	; 128
    196e:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <CONNECT>
    1972:	88 23       	and	r24, r24
    1974:	09 f4       	brne	.+2      	; 0x1978 <CONF_enter+0xd2>
    1976:	a6 cf       	rjmp	.-180    	; 0x18c4 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    1978:	c2 e0       	ldi	r28, 0x02	; 2
    197a:	a7 cf       	rjmp	.-178    	; 0x18ca <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    197c:	6e ee       	ldi	r22, 0xEE	; 238
    197e:	73 e0       	ldi	r23, 0x03	; 3
    1980:	80 e8       	ldi	r24, 0x80	; 128
    1982:	46 e2       	ldi	r20, 0x26	; 38
    1984:	53 e0       	ldi	r21, 0x03	; 3
    1986:	0e 94 77 12 	call	0x24ee	; 0x24ee <handle_sample>
    198a:	88 23       	and	r24, r24
    198c:	09 f4       	brne	.+2      	; 0x1990 <CONF_enter+0xea>
    198e:	9c cf       	rjmp	.-200    	; 0x18c8 <CONF_enter+0x22>
					state=CONF_REPLY;
    1990:	cb e0       	ldi	r28, 0x0B	; 11
    1992:	9b cf       	rjmp	.-202    	; 0x18ca <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    1994:	66 e2       	ldi	r22, 0x26	; 38
    1996:	73 e0       	ldi	r23, 0x03	; 3
    1998:	80 e8       	ldi	r24, 0x80	; 128
    199a:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    199e:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    19a0:	94 cf       	rjmp	.-216    	; 0x18ca <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    19a2:	63 ee       	ldi	r22, 0xE3	; 227
    19a4:	73 e0       	ldi	r23, 0x03	; 3
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    19ac:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    19ae:	8d cf       	rjmp	.-230    	; 0x18ca <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    19b0:	6d ee       	ldi	r22, 0xED	; 237
    19b2:	73 e0       	ldi	r23, 0x03	; 3
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    19ba:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    19bc:	86 cf       	rjmp	.-244    	; 0x18ca <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    19be:	0e 94 4c 20 	call	0x4098	; 0x4098 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    19c2:	6a ef       	ldi	r22, 0xFA	; 250
    19c4:	73 e0       	ldi	r23, 0x03	; 3
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    19cc:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    19ce:	7d cf       	rjmp	.-262    	; 0x18ca <CONF_enter+0x24>
			
			case CONF_EXIT:
				return;
		}
	}
}
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00002f4c <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    2f4c:	cf 92       	push	r12
    2f4e:	df 92       	push	r13
    2f50:	ef 92       	push	r14
    2f52:	0f 93       	push	r16
    2f54:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0){
    2f56:	6c 01       	movw	r12, r24
    2f58:	20 e8       	ldi	r18, 0x80	; 128
    2f5a:	e2 2e       	mov	r14, r18
    2f5c:	04 e0       	ldi	r16, 0x04	; 4
    2f5e:	10 e0       	ldi	r17, 0x00	; 0
    2f60:	2b e9       	ldi	r18, 0x9B	; 155
    2f62:	34 e0       	ldi	r19, 0x04	; 4
    2f64:	40 e0       	ldi	r20, 0x00	; 0
    2f66:	8e 2d       	mov	r24, r14
    2f68:	b6 01       	movw	r22, r12
    2f6a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <strncmp>
    2f6e:	89 2b       	or	r24, r25
    2f70:	69 f0       	breq	.+26     	; 0x2f8c <CON_RN2483_parse+0x40>
		return CL_EXIT;
	}else if (strncmp(msg, "break", strlen("break"))==0)
    2f72:	05 e0       	ldi	r16, 0x05	; 5
    2f74:	10 e0       	ldi	r17, 0x00	; 0
    2f76:	20 ea       	ldi	r18, 0xA0	; 160
    2f78:	34 e0       	ldi	r19, 0x04	; 4
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	8e 2d       	mov	r24, r14
    2f7e:	b6 01       	movw	r22, r12
    2f80:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <strncmp>
    2f84:	89 2b       	or	r24, r25
    2f86:	21 f4       	brne	.+8      	; 0x2f90 <CON_RN2483_parse+0x44>
	{
		return CL_SEND_BREAK;
    2f88:	84 e0       	ldi	r24, 0x04	; 4
    2f8a:	03 c0       	rjmp	.+6      	; 0x2f92 <CON_RN2483_parse+0x46>
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0){
		return CL_EXIT;
    2f8c:	85 e0       	ldi	r24, 0x05	; 5
    2f8e:	01 c0       	rjmp	.+2      	; 0x2f92 <CON_RN2483_parse+0x46>
	}else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
	}
	return CL_FORWARD;
    2f90:	83 e0       	ldi	r24, 0x03	; 3
    2f92:	1f 91       	pop	r17
    2f94:	0f 91       	pop	r16
    2f96:	ef 90       	pop	r14
    2f98:	df 90       	pop	r13
    2f9a:	cf 90       	pop	r12
    2f9c:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001614 <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    1614:	6f 92       	push	r6
    1616:	7f 92       	push	r7
    1618:	8f 92       	push	r8
    161a:	cf 92       	push	r12
    161c:	df 92       	push	r13
    161e:	ef 92       	push	r14
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1624:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1626:	c2 30       	cpi	r28, 0x02	; 2
    1628:	29 f1       	breq	.+74     	; 0x1674 <CON_RN2483+0x60>
    162a:	28 f4       	brcc	.+10     	; 0x1636 <CON_RN2483+0x22>
    162c:	cc 23       	and	r28, r28
    162e:	59 f0       	breq	.+22     	; 0x1646 <CON_RN2483+0x32>
    1630:	c1 30       	cpi	r28, 0x01	; 1
    1632:	b1 f0       	breq	.+44     	; 0x1660 <CON_RN2483+0x4c>
    1634:	f8 cf       	rjmp	.-16     	; 0x1626 <CON_RN2483+0x12>
    1636:	c4 30       	cpi	r28, 0x04	; 4
    1638:	09 f4       	brne	.+2      	; 0x163c <CON_RN2483+0x28>
    163a:	51 c0       	rjmp	.+162    	; 0x16de <CON_RN2483+0xca>
    163c:	08 f1       	brcs	.+66     	; 0x1680 <CON_RN2483+0x6c>
    163e:	c5 30       	cpi	r28, 0x05	; 5
    1640:	09 f4       	brne	.+2      	; 0x1644 <CON_RN2483+0x30>
    1642:	80 c0       	rjmp	.+256    	; 0x1744 <CON_RN2483+0x130>
    1644:	f0 cf       	rjmp	.-32     	; 0x1626 <CON_RN2483+0x12>
			case CL_INIT:
				uart0_hal_init();
    1646:	0e 94 1d 1b 	call	0x363a	; 0x363a <uart0_hal_init>
				rn2483_init();
    164a:	0e 94 56 20 	call	0x40ac	; 0x40ac <rn2483_init>
				LM_reset_module();
    164e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1652:	66 ea       	ldi	r22, 0xA6	; 166
    1654:	74 e0       	ldi	r23, 0x04	; 4
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				state=CL_READ_MSG;
    165c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    165e:	e3 cf       	rjmp	.-58     	; 0x1626 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1660:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <uart1_hal_message_ready>
    1664:	88 23       	and	r24, r24
    1666:	f9 f2       	breq	.-66     	; 0x1626 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    1668:	8e ee       	ldi	r24, 0xEE	; 238
    166a:	93 e0       	ldi	r25, 0x03	; 3
    166c:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1670:	c2 e0       	ldi	r28, 0x02	; 2
    1672:	d9 cf       	rjmp	.-78     	; 0x1626 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    1674:	8e ee       	ldi	r24, 0xEE	; 238
    1676:	93 e0       	ldi	r25, 0x03	; 3
    1678:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <CON_RN2483_parse>
    167c:	c8 2f       	mov	r28, r24
			break;
    167e:	d3 cf       	rjmp	.-90     	; 0x1626 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1680:	8e ee       	ldi	r24, 0xEE	; 238
    1682:	93 e0       	ldi	r25, 0x03	; 3
    1684:	6c 01       	movw	r12, r24
    1686:	20 e8       	ldi	r18, 0x80	; 128
    1688:	e2 2e       	mov	r14, r18
    168a:	2f 93       	push	r18
    168c:	df 92       	push	r13
    168e:	8f 93       	push	r24
    1690:	8c ed       	ldi	r24, 0xDC	; 220
    1692:	94 e0       	ldi	r25, 0x04	; 4
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	af 93       	push	r26
    1698:	9f 93       	push	r25
    169a:	8f 93       	push	r24
    169c:	c6 e2       	ldi	r28, 0x26	; 38
    169e:	d3 e0       	ldi	r29, 0x03	; 3
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
				uart1_hal_send_string(cnf_reply);
    16a8:	3e 01       	movw	r6, r28
    16aa:	20 e8       	ldi	r18, 0x80	; 128
    16ac:	82 2e       	mov	r8, r18
    16ae:	88 2d       	mov	r24, r8
    16b0:	b3 01       	movw	r22, r6
    16b2:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    16b6:	ae 01       	movw	r20, r28
    16b8:	6c 2d       	mov	r22, r12
    16ba:	7d 2d       	mov	r23, r13
    16bc:	8e 2d       	mov	r24, r14
    16be:	0e 94 71 20 	call	0x40e2	; 0x40e2 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    16c2:	88 2d       	mov	r24, r8
    16c4:	b3 01       	movw	r22, r6
    16c6:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    16ca:	8d b7       	in	r24, 0x3d	; 61
    16cc:	9e b7       	in	r25, 0x3e	; 62
    16ce:	08 96       	adiw	r24, 0x08	; 8
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	9e bf       	out	0x3e, r25	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    16da:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    16dc:	a4 cf       	rjmp	.-184    	; 0x1626 <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    16de:	82 ee       	ldi	r24, 0xE2	; 226
    16e0:	94 e0       	ldi	r25, 0x04	; 4
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	af 93       	push	r26
    16e6:	9f 93       	push	r25
    16e8:	8f 93       	push	r24
    16ea:	8c ed       	ldi	r24, 0xDC	; 220
    16ec:	94 e0       	ldi	r25, 0x04	; 4
    16ee:	a0 e0       	ldi	r26, 0x00	; 0
    16f0:	af 93       	push	r26
    16f2:	9f 93       	push	r25
    16f4:	8f 93       	push	r24
    16f6:	c6 e2       	ldi	r28, 0x26	; 38
    16f8:	d3 e0       	ldi	r29, 0x03	; 3
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
				uart1_hal_send_string(cnf_reply);
    1702:	6e 01       	movw	r12, r28
    1704:	80 e8       	ldi	r24, 0x80	; 128
    1706:	e8 2e       	mov	r14, r24
    1708:	8e 2d       	mov	r24, r14
    170a:	b6 01       	movw	r22, r12
    170c:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
    1710:	9f e7       	ldi	r25, 0x7F	; 127
    1712:	28 e3       	ldi	r18, 0x38	; 56
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	91 50       	subi	r25, 0x01	; 1
    1718:	20 40       	sbci	r18, 0x00	; 0
    171a:	80 40       	sbci	r24, 0x00	; 0
    171c:	e1 f7       	brne	.-8      	; 0x1716 <CON_RN2483+0x102>
    171e:	00 c0       	rjmp	.+0      	; 0x1720 <CON_RN2483+0x10c>
    1720:	00 00       	nop
				_delay_ms(50);
				LM_send_break(cnf_reply);
    1722:	ce 01       	movw	r24, r28
    1724:	0e 94 74 20 	call	0x40e8	; 0x40e8 <LM_send_break>
				uart1_hal_send_string(cnf_reply);
    1728:	8e 2d       	mov	r24, r14
    172a:	b6 01       	movw	r22, r12
    172c:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    1730:	8d b7       	in	r24, 0x3d	; 61
    1732:	9e b7       	in	r25, 0x3e	; 62
    1734:	08 96       	adiw	r24, 0x08	; 8
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	9e bf       	out	0x3e, r25	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	8d bf       	out	0x3d, r24	; 61
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break(cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    1740:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1742:	71 cf       	rjmp	.-286    	; 0x1626 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    1744:	0e 94 47 20 	call	0x408e	; 0x408e <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    1748:	6d ee       	ldi	r22, 0xED	; 237
    174a:	74 e0       	ldi	r23, 0x04	; 4
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	0e 94 a2 13 	call	0x2744	; 0x2744 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	ef 90       	pop	r14
    175a:	df 90       	pop	r13
    175c:	cf 90       	pop	r12
    175e:	8f 90       	pop	r8
    1760:	7f 90       	pop	r7
    1762:	6f 90       	pop	r6
    1764:	08 95       	ret

Disassembly of section .text.CONNECT:

00002ef8 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    2ef8:	cf 93       	push	r28
    2efa:	df 93       	push	r29
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	64 97       	sbiw	r28, 0x14	; 20
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    2f0c:	21 e0       	ldi	r18, 0x01	; 1
    2f0e:	ae 01       	movw	r20, r28
    2f10:	4f 5f       	subi	r20, 0xFF	; 255
    2f12:	5f 4f       	sbci	r21, 0xFF	; 255
    2f14:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    2f18:	88 23       	and	r24, r24
    2f1a:	79 f0       	breq	.+30     	; 0x2f3a <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    2f1c:	be 01       	movw	r22, r28
    2f1e:	6f 5f       	subi	r22, 0xFF	; 255
    2f20:	7f 4f       	sbci	r23, 0xFF	; 255
    2f22:	80 e8       	ldi	r24, 0x80	; 128
    2f24:	2d e0       	ldi	r18, 0x0D	; 13
    2f26:	35 e0       	ldi	r19, 0x05	; 5
    2f28:	40 e0       	ldi	r20, 0x00	; 0
    2f2a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    2f2e:	89 2b       	or	r24, r25
    2f30:	19 f4       	brne	.+6      	; 0x2f38 <CONNECT+0x40>
		return CON_RN2483();
    2f32:	0e 94 0a 0b 	call	0x1614	; 0x1614 <CON_RN2483>
    2f36:	01 c0       	rjmp	.+2      	; 0x2f3a <CONNECT+0x42>
	}else{
		return false;
    2f38:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2f3a:	64 96       	adiw	r28, 0x14	; 20
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	08 95       	ret

Disassembly of section .text.read_cols:

0000217c <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    217c:	cf 92       	push	r12
    217e:	df 92       	push	r13
    2180:	ef 92       	push	r14
    2182:	ff 92       	push	r15
    2184:	1f 93       	push	r17
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	a3 97       	sbiw	r28, 0x23	; 35
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    219c:	63 e2       	ldi	r22, 0x23	; 35
    219e:	ce 01       	movw	r24, r28
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <EM_get_collections>
	res[0]='\0';
    21a6:	f7 01       	movw	r30, r14
    21a8:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    21aa:	10 e0       	ldi	r17, 0x00	; 0
    21ac:	35 c0       	rjmp	.+106    	; 0x2218 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    21ae:	81 2f       	mov	r24, r17
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	fc 01       	movw	r30, r24
    21b4:	ee 0f       	add	r30, r30
    21b6:	ff 1f       	adc	r31, r31
    21b8:	ee 0f       	add	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	e8 0f       	add	r30, r24
    21be:	f9 1f       	adc	r31, r25
    21c0:	21 e0       	ldi	r18, 0x01	; 1
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	2c 0f       	add	r18, r28
    21c6:	3d 1f       	adc	r19, r29
    21c8:	e2 0f       	add	r30, r18
    21ca:	f3 1f       	adc	r31, r19
    21cc:	23 81       	ldd	r18, Z+3	; 0x03
    21ce:	2f 93       	push	r18
    21d0:	22 81       	ldd	r18, Z+2	; 0x02
    21d2:	2f 93       	push	r18
    21d4:	21 81       	ldd	r18, Z+1	; 0x01
    21d6:	2f 93       	push	r18
    21d8:	20 81       	ld	r18, Z
    21da:	2f 93       	push	r18
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	9f 93       	push	r25
    21e0:	8f 93       	push	r24
    21e2:	84 ef       	ldi	r24, 0xF4	; 244
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	a0 e0       	ldi	r26, 0x00	; 0
    21e8:	af 93       	push	r26
    21ea:	9f 93       	push	r25
    21ec:	8f 93       	push	r24
    21ee:	0f 2e       	mov	r0, r31
    21f0:	f6 e1       	ldi	r31, 0x16	; 22
    21f2:	cf 2e       	mov	r12, r31
    21f4:	f6 e0       	ldi	r31, 0x06	; 6
    21f6:	df 2e       	mov	r13, r31
    21f8:	f0 2d       	mov	r31, r0
    21fa:	df 92       	push	r13
    21fc:	cf 92       	push	r12
    21fe:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
		strcat(res, arg);
    2202:	a6 01       	movw	r20, r12
    2204:	60 e8       	ldi	r22, 0x80	; 128
    2206:	c7 01       	movw	r24, r14
    2208:	0e 94 66 1d 	call	0x3acc	; 0x3acc <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    220c:	1f 5f       	subi	r17, 0xFF	; 255
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	17 30       	cpi	r17, 0x07	; 7
    221a:	48 f2       	brcs	.-110    	; 0x21ae <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    221c:	a3 96       	adiw	r28, 0x23	; 35
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	df 90       	pop	r13
    2234:	cf 90       	pop	r12
    2236:	08 95       	ret

Disassembly of section .text.read_time:

000026b2 <read_time>:

static void read_time(char res[]){
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <read_time+0xa>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <read_time+0xc>
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <read_time+0xe>
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	18 2f       	mov	r17, r24
    26c6:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    26c8:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    26cc:	ce 01       	movw	r24, r28
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    26d4:	88 23       	and	r24, r24
    26d6:	51 f0       	breq	.+20     	; 0x26ec <read_time+0x3a>
		strcpy(res, "Failed to read time");
    26d8:	24 e1       	ldi	r18, 0x14	; 20
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4a e0       	ldi	r20, 0x0A	; 10
    26de:	52 e0       	ldi	r21, 0x02	; 2
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	81 2f       	mov	r24, r17
    26e4:	90 2f       	mov	r25, r16
    26e6:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
    26ea:	21 c0       	rjmp	.+66     	; 0x272e <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    26ec:	59 81       	ldd	r21, Y+1	; 0x01
    26ee:	4a 81       	ldd	r20, Y+2	; 0x02
    26f0:	3b 81       	ldd	r19, Y+3	; 0x03
    26f2:	2c 81       	ldd	r18, Y+4	; 0x04
    26f4:	9d 81       	ldd	r25, Y+5	; 0x05
    26f6:	8e 81       	ldd	r24, Y+6	; 0x06
    26f8:	1f 92       	push	r1
    26fa:	5f 93       	push	r21
    26fc:	1f 92       	push	r1
    26fe:	4f 93       	push	r20
    2700:	1f 92       	push	r1
    2702:	3f 93       	push	r19
    2704:	1f 92       	push	r1
    2706:	2f 93       	push	r18
    2708:	1f 92       	push	r1
    270a:	9f 93       	push	r25
    270c:	1f 92       	push	r1
    270e:	8f 93       	push	r24
    2710:	8e e1       	ldi	r24, 0x1E	; 30
    2712:	92 e0       	ldi	r25, 0x02	; 2
    2714:	a0 e0       	ldi	r26, 0x00	; 0
    2716:	af 93       	push	r26
    2718:	9f 93       	push	r25
    271a:	8f 93       	push	r24
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
	}
}
    272e:	26 96       	adiw	r28, 0x06	; 6
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
    273e:	1f 91       	pop	r17
    2740:	0f 91       	pop	r16
    2742:	08 95       	ret

Disassembly of section .text.write_deveui:

000028c4 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    28c4:	cf 92       	push	r12
    28c6:	df 92       	push	r13
    28c8:	ef 92       	push	r14
    28ca:	0f 93       	push	r16
    28cc:	1f 93       	push	r17
    28ce:	cf 93       	push	r28
    28d0:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    28d2:	22 e0       	ldi	r18, 0x02	; 2
    28d4:	46 e1       	ldi	r20, 0x16	; 22
    28d6:	56 e0       	ldi	r21, 0x06	; 6
    28d8:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    28dc:	c8 2f       	mov	r28, r24
    28de:	88 23       	and	r24, r24
    28e0:	29 f1       	breq	.+74     	; 0x292c <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    28e2:	86 e1       	ldi	r24, 0x16	; 22
    28e4:	96 e0       	ldi	r25, 0x06	; 6
    28e6:	6c 01       	movw	r12, r24
    28e8:	20 e8       	ldi	r18, 0x80	; 128
    28ea:	e2 2e       	mov	r14, r18
    28ec:	8e 2d       	mov	r24, r14
    28ee:	b6 01       	movw	r22, r12
    28f0:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    28f4:	40 97       	sbiw	r24, 0x10	; 16
    28f6:	c9 f4       	brne	.+50     	; 0x292a <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    28f8:	8e 2d       	mov	r24, r14
    28fa:	b6 01       	movw	r22, r12
    28fc:	0e 94 77 1b 	call	0x36ee	; 0x36ee <EM_set_deveui>
    2900:	c8 2f       	mov	r28, r24
    2902:	81 11       	cpse	r24, r1
    2904:	09 c0       	rjmp	.+18     	; 0x2918 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    2906:	27 e0       	ldi	r18, 0x07	; 7
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4c e3       	ldi	r20, 0x3C	; 60
    290c:	52 e0       	ldi	r21, 0x02	; 2
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	c8 01       	movw	r24, r16
    2912:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return false;
    2916:	0a c0       	rjmp	.+20     	; 0x292c <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2918:	28 e0       	ldi	r18, 0x08	; 8
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	43 e4       	ldi	r20, 0x43	; 67
    291e:	52 e0       	ldi	r21, 0x02	; 2
    2920:	60 e0       	ldi	r22, 0x00	; 0
    2922:	c8 01       	movw	r24, r16
    2924:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
    2928:	01 c0       	rjmp	.+2      	; 0x292c <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    292a:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    292c:	8c 2f       	mov	r24, r28
    292e:	cf 91       	pop	r28
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	ef 90       	pop	r14
    2936:	df 90       	pop	r13
    2938:	cf 90       	pop	r12
    293a:	08 95       	ret

Disassembly of section .text.write_appeui:

0000293c <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    293c:	cf 92       	push	r12
    293e:	df 92       	push	r13
    2940:	ef 92       	push	r14
    2942:	0f 93       	push	r16
    2944:	1f 93       	push	r17
    2946:	cf 93       	push	r28
    2948:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    294a:	22 e0       	ldi	r18, 0x02	; 2
    294c:	46 e1       	ldi	r20, 0x16	; 22
    294e:	56 e0       	ldi	r21, 0x06	; 6
    2950:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    2954:	c8 2f       	mov	r28, r24
    2956:	88 23       	and	r24, r24
    2958:	29 f1       	breq	.+74     	; 0x29a4 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    295a:	86 e1       	ldi	r24, 0x16	; 22
    295c:	96 e0       	ldi	r25, 0x06	; 6
    295e:	6c 01       	movw	r12, r24
    2960:	20 e8       	ldi	r18, 0x80	; 128
    2962:	e2 2e       	mov	r14, r18
    2964:	8e 2d       	mov	r24, r14
    2966:	b6 01       	movw	r22, r12
    2968:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    296c:	40 97       	sbiw	r24, 0x10	; 16
    296e:	c9 f4       	brne	.+50     	; 0x29a2 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    2970:	8e 2d       	mov	r24, r14
    2972:	b6 01       	movw	r22, r12
    2974:	0e 94 94 1b 	call	0x3728	; 0x3728 <EM_set_appeui>
    2978:	c8 2f       	mov	r28, r24
    297a:	81 11       	cpse	r24, r1
    297c:	09 c0       	rjmp	.+18     	; 0x2990 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    297e:	27 e0       	ldi	r18, 0x07	; 7
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	4c e3       	ldi	r20, 0x3C	; 60
    2984:	52 e0       	ldi	r21, 0x02	; 2
    2986:	60 e0       	ldi	r22, 0x00	; 0
    2988:	c8 01       	movw	r24, r16
    298a:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return false;
    298e:	0a c0       	rjmp	.+20     	; 0x29a4 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2990:	28 e0       	ldi	r18, 0x08	; 8
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	43 e4       	ldi	r20, 0x43	; 67
    2996:	52 e0       	ldi	r21, 0x02	; 2
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	c8 01       	movw	r24, r16
    299c:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
    29a0:	01 c0       	rjmp	.+2      	; 0x29a4 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    29a2:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    29a4:	8c 2f       	mov	r24, r28
    29a6:	cf 91       	pop	r28
    29a8:	1f 91       	pop	r17
    29aa:	0f 91       	pop	r16
    29ac:	ef 90       	pop	r14
    29ae:	df 90       	pop	r13
    29b0:	cf 90       	pop	r12
    29b2:	08 95       	ret

Disassembly of section .text.write_appkey:

000029b4 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    29b4:	cf 92       	push	r12
    29b6:	df 92       	push	r13
    29b8:	ef 92       	push	r14
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	cf 93       	push	r28
    29c0:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    29c2:	22 e0       	ldi	r18, 0x02	; 2
    29c4:	46 e1       	ldi	r20, 0x16	; 22
    29c6:	56 e0       	ldi	r21, 0x06	; 6
    29c8:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    29cc:	c8 2f       	mov	r28, r24
    29ce:	88 23       	and	r24, r24
    29d0:	29 f1       	breq	.+74     	; 0x2a1c <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    29d2:	86 e1       	ldi	r24, 0x16	; 22
    29d4:	96 e0       	ldi	r25, 0x06	; 6
    29d6:	6c 01       	movw	r12, r24
    29d8:	20 e8       	ldi	r18, 0x80	; 128
    29da:	e2 2e       	mov	r14, r18
    29dc:	8e 2d       	mov	r24, r14
    29de:	b6 01       	movw	r22, r12
    29e0:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    29e4:	80 97       	sbiw	r24, 0x20	; 32
    29e6:	c9 f4       	brne	.+50     	; 0x2a1a <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    29e8:	8e 2d       	mov	r24, r14
    29ea:	b6 01       	movw	r22, r12
    29ec:	0e 94 b1 1b 	call	0x3762	; 0x3762 <EM_set_appkey>
    29f0:	c8 2f       	mov	r28, r24
    29f2:	81 11       	cpse	r24, r1
    29f4:	09 c0       	rjmp	.+18     	; 0x2a08 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    29f6:	27 e0       	ldi	r18, 0x07	; 7
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	4c e3       	ldi	r20, 0x3C	; 60
    29fc:	52 e0       	ldi	r21, 0x02	; 2
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	c8 01       	movw	r24, r16
    2a02:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return false;
    2a06:	0a c0       	rjmp	.+20     	; 0x2a1c <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2a08:	28 e0       	ldi	r18, 0x08	; 8
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	43 e4       	ldi	r20, 0x43	; 67
    2a0e:	52 e0       	ldi	r21, 0x02	; 2
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	c8 01       	movw	r24, r16
    2a14:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
    2a18:	01 c0       	rjmp	.+2      	; 0x2a1c <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    2a1a:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2a1c:	8c 2f       	mov	r24, r28
    2a1e:	cf 91       	pop	r28
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
    2a24:	ef 90       	pop	r14
    2a26:	df 90       	pop	r13
    2a28:	cf 90       	pop	r12
    2a2a:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00003176 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    3176:	0f 93       	push	r16
    3178:	1f 93       	push	r17
    317a:	cf 93       	push	r28
    317c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    317e:	22 e0       	ldi	r18, 0x02	; 2
    3180:	46 e1       	ldi	r20, 0x16	; 22
    3182:	56 e0       	ldi	r21, 0x06	; 6
    3184:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    3188:	c8 2f       	mov	r28, r24
    318a:	88 23       	and	r24, r24
    318c:	a9 f0       	breq	.+42     	; 0x31b8 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    318e:	86 e1       	ldi	r24, 0x16	; 22
    3190:	96 e0       	ldi	r25, 0x06	; 6
    3192:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <is_float>
    3196:	c8 2f       	mov	r28, r24
    3198:	88 23       	and	r24, r24
    319a:	71 f0       	breq	.+28     	; 0x31b8 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    319c:	86 e1       	ldi	r24, 0x16	; 22
    319e:	96 e0       	ldi	r25, 0x06	; 6
    31a0:	0e 94 6e 18 	call	0x30dc	; 0x30dc <str2flaot>
	EM_set_ppmfactor(val);
    31a4:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    31a8:	28 e0       	ldi	r18, 0x08	; 8
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	43 e4       	ldi	r20, 0x43	; 67
    31ae:	52 e0       	ldi	r21, 0x02	; 2
    31b0:	60 e0       	ldi	r22, 0x00	; 0
    31b2:	c8 01       	movw	r24, r16
    31b4:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
	return true;
}
    31b8:	8c 2f       	mov	r24, r28
    31ba:	cf 91       	pop	r28
    31bc:	1f 91       	pop	r17
    31be:	0f 91       	pop	r16
    31c0:	08 95       	ret

Disassembly of section .text.write_RRL:

000031c2 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    31c2:	0f 93       	push	r16
    31c4:	1f 93       	push	r17
    31c6:	cf 93       	push	r28
    31c8:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    31ca:	22 e0       	ldi	r18, 0x02	; 2
    31cc:	46 e1       	ldi	r20, 0x16	; 22
    31ce:	56 e0       	ldi	r21, 0x06	; 6
    31d0:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    31d4:	c8 2f       	mov	r28, r24
    31d6:	88 23       	and	r24, r24
    31d8:	a9 f0       	breq	.+42     	; 0x3204 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    31da:	86 e1       	ldi	r24, 0x16	; 22
    31dc:	96 e0       	ldi	r25, 0x06	; 6
    31de:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <is_float>
    31e2:	c8 2f       	mov	r28, r24
    31e4:	88 23       	and	r24, r24
    31e6:	71 f0       	breq	.+28     	; 0x3204 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    31e8:	86 e1       	ldi	r24, 0x16	; 22
    31ea:	96 e0       	ldi	r25, 0x06	; 6
    31ec:	0e 94 6e 18 	call	0x30dc	; 0x30dc <str2flaot>
	EM_set_RRL(val);
    31f0:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    31f4:	28 e0       	ldi	r18, 0x08	; 8
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	43 e4       	ldi	r20, 0x43	; 67
    31fa:	52 e0       	ldi	r21, 0x02	; 2
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	c8 01       	movw	r24, r16
    3200:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
	return true;
}
    3204:	8c 2f       	mov	r24, r28
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	08 95       	ret

Disassembly of section .text.write_VCC:

0000320e <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    320e:	0f 93       	push	r16
    3210:	1f 93       	push	r17
    3212:	cf 93       	push	r28
    3214:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3216:	22 e0       	ldi	r18, 0x02	; 2
    3218:	46 e1       	ldi	r20, 0x16	; 22
    321a:	56 e0       	ldi	r21, 0x06	; 6
    321c:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    3220:	c8 2f       	mov	r28, r24
    3222:	88 23       	and	r24, r24
    3224:	a9 f0       	breq	.+42     	; 0x3250 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    3226:	86 e1       	ldi	r24, 0x16	; 22
    3228:	96 e0       	ldi	r25, 0x06	; 6
    322a:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <is_float>
    322e:	c8 2f       	mov	r28, r24
    3230:	88 23       	and	r24, r24
    3232:	71 f0       	breq	.+28     	; 0x3250 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    3234:	86 e1       	ldi	r24, 0x16	; 22
    3236:	96 e0       	ldi	r25, 0x06	; 6
    3238:	0e 94 6e 18 	call	0x30dc	; 0x30dc <str2flaot>
	EM_set_Vcc(val);
    323c:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    3240:	28 e0       	ldi	r18, 0x08	; 8
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	43 e4       	ldi	r20, 0x43	; 67
    3246:	52 e0       	ldi	r21, 0x02	; 2
    3248:	60 e0       	ldi	r22, 0x00	; 0
    324a:	c8 01       	movw	r24, r16
    324c:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
	return true;
}
    3250:	8c 2f       	mov	r24, r28
    3252:	cf 91       	pop	r28
    3254:	1f 91       	pop	r17
    3256:	0f 91       	pop	r16
    3258:	08 95       	ret

Disassembly of section .text.get_time_par:

000038e6 <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	00 d0       	rcall	.+0      	; 0x38ec <get_time_par+0x6>
    38ec:	1f 92       	push	r1
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    38f2:	fc 01       	movw	r30, r24
    38f4:	e6 0f       	add	r30, r22
    38f6:	f1 1d       	adc	r31, r1
    38f8:	80 81       	ld	r24, Z
    38fa:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    38fc:	81 81       	ldd	r24, Z+1	; 0x01
    38fe:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    3900:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    3902:	be 01       	movw	r22, r28
    3904:	6f 5f       	subi	r22, 0xFF	; 255
    3906:	7f 4f       	sbci	r23, 0xFF	; 255
    3908:	80 e8       	ldi	r24, 0x80	; 128
    390a:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <atoi>
}
    390e:	0f 90       	pop	r0
    3910:	0f 90       	pop	r0
    3912:	0f 90       	pop	r0
    3914:	df 91       	pop	r29
    3916:	cf 91       	pop	r28
    3918:	08 95       	ret

Disassembly of section .text.write_cols:

000019d4 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    19d4:	4f 92       	push	r4
    19d6:	5f 92       	push	r5
    19d8:	6f 92       	push	r6
    19da:	7f 92       	push	r7
    19dc:	8f 92       	push	r8
    19de:	af 92       	push	r10
    19e0:	bf 92       	push	r11
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	a3 97       	sbiw	r28, 0x23	; 35
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	3b 01       	movw	r6, r22
    1a04:	88 2e       	mov	r8, r24
    1a06:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    1a08:	22 e0       	ldi	r18, 0x02	; 2
    1a0a:	46 e1       	ldi	r20, 0x16	; 22
    1a0c:	56 e0       	ldi	r21, 0x06	; 6
    1a0e:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    1a12:	18 2f       	mov	r17, r24
    1a14:	88 23       	and	r24, r24
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <write_cols+0x46>
    1a18:	5d c0       	rjmp	.+186    	; 0x1ad4 <write_cols+0x100>
	index=atoi(arg);
    1a1a:	86 e1       	ldi	r24, 0x16	; 22
    1a1c:	96 e0       	ldi	r25, 0x06	; 6
    1a1e:	6c 01       	movw	r12, r24
    1a20:	20 e8       	ldi	r18, 0x80	; 128
    1a22:	e2 2e       	mov	r14, r18
    1a24:	8e 2d       	mov	r24, r14
    1a26:	b6 01       	movw	r22, r12
    1a28:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <atoi>
	if(index<1 || index>7) return false;
    1a2c:	0f ef       	ldi	r16, 0xFF	; 255
    1a2e:	08 0f       	add	r16, r24
    1a30:	07 30       	cpi	r16, 0x07	; 7
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <write_cols+0x62>
    1a34:	4a c0       	rjmp	.+148    	; 0x1aca <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    1a36:	23 e0       	ldi	r18, 0x03	; 3
    1a38:	46 e1       	ldi	r20, 0x16	; 22
    1a3a:	56 e0       	ldi	r21, 0x06	; 6
    1a3c:	88 2d       	mov	r24, r8
    1a3e:	b3 01       	movw	r22, r6
    1a40:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    1a44:	18 2f       	mov	r17, r24
    1a46:	88 23       	and	r24, r24
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <write_cols+0x78>
    1a4a:	44 c0       	rjmp	.+136    	; 0x1ad4 <write_cols+0x100>
	samplings=atoi(arg);
    1a4c:	8e 2d       	mov	r24, r14
    1a4e:	b6 01       	movw	r22, r12
    1a50:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <atoi>
    1a54:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    1a56:	02 97       	sbiw	r24, 0x02	; 2
    1a58:	8b 32       	cpi	r24, 0x2B	; 43
    1a5a:	91 40       	sbci	r25, 0x01	; 1
    1a5c:	c0 f5       	brcc	.+112    	; 0x1ace <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    1a5e:	24 e0       	ldi	r18, 0x04	; 4
    1a60:	46 e1       	ldi	r20, 0x16	; 22
    1a62:	56 e0       	ldi	r21, 0x06	; 6
    1a64:	88 2d       	mov	r24, r8
    1a66:	b3 01       	movw	r22, r6
    1a68:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    1a6c:	18 2f       	mov	r17, r24
    1a6e:	88 23       	and	r24, r24
    1a70:	89 f1       	breq	.+98     	; 0x1ad4 <write_cols+0x100>
	samplingInterval=atoi(arg);
    1a72:	8e 2d       	mov	r24, r14
    1a74:	b6 01       	movw	r22, r12
    1a76:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <atoi>
    1a7a:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    1a7c:	02 97       	sbiw	r24, 0x02	; 2
    1a7e:	87 35       	cpi	r24, 0x57	; 87
    1a80:	92 40       	sbci	r25, 0x02	; 2
    1a82:	38 f5       	brcc	.+78     	; 0x1ad2 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1a84:	63 e2       	ldi	r22, 0x23	; 35
    1a86:	ce 01       	movw	r24, r28
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	7c 01       	movw	r14, r24
    1a8c:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <EM_get_collections>
	
	cols[index].samplings=samplings;
    1a90:	80 2f       	mov	r24, r16
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	fc 01       	movw	r30, r24
    1a96:	ee 0f       	add	r30, r30
    1a98:	ff 1f       	adc	r31, r31
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	ff 1f       	adc	r31, r31
    1a9e:	e8 0f       	add	r30, r24
    1aa0:	f9 1f       	adc	r31, r25
    1aa2:	ee 0d       	add	r30, r14
    1aa4:	ff 1d       	adc	r31, r15
    1aa6:	51 82       	std	Z+1, r5	; 0x01
    1aa8:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    1aaa:	d3 82       	std	Z+3, r13	; 0x03
    1aac:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1aae:	b7 01       	movw	r22, r14
    1ab0:	80 e8       	ldi	r24, 0x80	; 128
    1ab2:	43 e2       	ldi	r20, 0x23	; 35
    1ab4:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    1ab8:	28 e0       	ldi	r18, 0x08	; 8
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	43 e4       	ldi	r20, 0x43	; 67
    1abe:	52 e0       	ldi	r21, 0x02	; 2
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	c5 01       	movw	r24, r10
    1ac4:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
	return true;	
    1ac8:	05 c0       	rjmp	.+10     	; 0x1ad4 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    1aca:	10 e0       	ldi	r17, 0x00	; 0
    1acc:	03 c0       	rjmp	.+6      	; 0x1ad4 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    1ace:	10 e0       	ldi	r17, 0x00	; 0
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    1ad2:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    1ad4:	81 2f       	mov	r24, r17
    1ad6:	a3 96       	adiw	r28, 0x23	; 35
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	df 90       	pop	r13
    1af0:	cf 90       	pop	r12
    1af2:	bf 90       	pop	r11
    1af4:	af 90       	pop	r10
    1af6:	8f 90       	pop	r8
    1af8:	7f 90       	pop	r7
    1afa:	6f 90       	pop	r6
    1afc:	5f 90       	pop	r5
    1afe:	4f 90       	pop	r4
    1b00:	08 95       	ret

Disassembly of section .text.write_heat_up:

0000325a <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    325a:	0f 93       	push	r16
    325c:	1f 93       	push	r17
    325e:	cf 93       	push	r28
    3260:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3262:	22 e0       	ldi	r18, 0x02	; 2
    3264:	46 e1       	ldi	r20, 0x16	; 22
    3266:	56 e0       	ldi	r21, 0x06	; 6
    3268:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    326c:	c8 2f       	mov	r28, r24
    326e:	88 23       	and	r24, r24
    3270:	a9 f0       	breq	.+42     	; 0x329c <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    3272:	66 e1       	ldi	r22, 0x16	; 22
    3274:	76 e0       	ldi	r23, 0x06	; 6
    3276:	80 e8       	ldi	r24, 0x80	; 128
    3278:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <atoi>
	
	if(val<1 || val>200) return false;
    327c:	9f ef       	ldi	r25, 0xFF	; 255
    327e:	98 0f       	add	r25, r24
    3280:	98 3c       	cpi	r25, 0xC8	; 200
    3282:	58 f4       	brcc	.+22     	; 0x329a <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    3284:	0e 94 0c 20 	call	0x4018	; 0x4018 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    3288:	28 e0       	ldi	r18, 0x08	; 8
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	43 e4       	ldi	r20, 0x43	; 67
    328e:	52 e0       	ldi	r21, 0x02	; 2
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	c8 01       	movw	r24, r16
    3294:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
	return true;
    3298:	01 c0       	rjmp	.+2      	; 0x329c <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    329a:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    329c:	8c 2f       	mov	r24, r28
    329e:	cf 91       	pop	r28
    32a0:	1f 91       	pop	r17
    32a2:	0f 91       	pop	r16
    32a4:	08 95       	ret

Disassembly of section .text.write_air_pump:

00002ff0 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2ff8:	22 e0       	ldi	r18, 0x02	; 2
    2ffa:	46 e1       	ldi	r20, 0x16	; 22
    2ffc:	56 e0       	ldi	r21, 0x06	; 6
    2ffe:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    3002:	c8 2f       	mov	r28, r24
    3004:	88 23       	and	r24, r24
    3006:	b9 f0       	breq	.+46     	; 0x3036 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    3008:	66 e1       	ldi	r22, 0x16	; 22
    300a:	76 e0       	ldi	r23, 0x06	; 6
    300c:	80 e8       	ldi	r24, 0x80	; 128
    300e:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <atoi>
	
	if(val<5 || val>1000) return false;
    3012:	9c 01       	movw	r18, r24
    3014:	25 50       	subi	r18, 0x05	; 5
    3016:	31 09       	sbc	r19, r1
    3018:	24 3e       	cpi	r18, 0xE4	; 228
    301a:	33 40       	sbci	r19, 0x03	; 3
    301c:	58 f4       	brcc	.+22     	; 0x3034 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    301e:	0e 94 18 20 	call	0x4030	; 0x4030 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    3022:	28 e0       	ldi	r18, 0x08	; 8
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	43 e4       	ldi	r20, 0x43	; 67
    3028:	52 e0       	ldi	r21, 0x02	; 2
    302a:	60 e0       	ldi	r22, 0x00	; 0
    302c:	c8 01       	movw	r24, r16
    302e:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
	return true;
    3032:	01 c0       	rjmp	.+2      	; 0x3036 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    3034:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    3036:	8c 2f       	mov	r24, r28
    3038:	cf 91       	pop	r28
    303a:	1f 91       	pop	r17
    303c:	0f 91       	pop	r16
    303e:	08 95       	ret

Disassembly of section .text.write_sp_interval:

000032a6 <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	cf 93       	push	r28
    32ac:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    32ae:	22 e0       	ldi	r18, 0x02	; 2
    32b0:	46 e1       	ldi	r20, 0x16	; 22
    32b2:	56 e0       	ldi	r21, 0x06	; 6
    32b4:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    32b8:	c8 2f       	mov	r28, r24
    32ba:	88 23       	and	r24, r24
    32bc:	a9 f0       	breq	.+42     	; 0x32e8 <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    32be:	66 e1       	ldi	r22, 0x16	; 22
    32c0:	76 e0       	ldi	r23, 0x06	; 6
    32c2:	80 e8       	ldi	r24, 0x80	; 128
    32c4:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <atoi>
	
	if(val<6 || val>24) return false;
    32c8:	9a ef       	ldi	r25, 0xFA	; 250
    32ca:	98 0f       	add	r25, r24
    32cc:	93 31       	cpi	r25, 0x13	; 19
    32ce:	58 f4       	brcc	.+22     	; 0x32e6 <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    32d0:	0e 94 24 20 	call	0x4048	; 0x4048 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    32d4:	28 e0       	ldi	r18, 0x08	; 8
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	43 e4       	ldi	r20, 0x43	; 67
    32da:	52 e0       	ldi	r21, 0x02	; 2
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	c8 01       	movw	r24, r16
    32e0:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
	return true;
    32e4:	01 c0       	rjmp	.+2      	; 0x32e8 <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    32e6:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    32e8:	8c 2f       	mov	r24, r28
    32ea:	cf 91       	pop	r28
    32ec:	1f 91       	pop	r17
    32ee:	0f 91       	pop	r16
    32f0:	08 95       	ret

Disassembly of section .text.write_reset:

00001e1a <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	a3 97       	sbiw	r28, 0x23	; 35
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    1e34:	6b e4       	ldi	r22, 0x4B	; 75
    1e36:	72 e0       	ldi	r23, 0x02	; 2
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	0e 94 77 1b 	call	0x36ee	; 0x36ee <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    1e3e:	6b e4       	ldi	r22, 0x4B	; 75
    1e40:	72 e0       	ldi	r23, 0x02	; 2
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	0e 94 94 1b 	call	0x3728	; 0x3728 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    1e48:	6c e5       	ldi	r22, 0x5C	; 92
    1e4a:	72 e0       	ldi	r23, 0x02	; 2
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	0e 94 b1 1b 	call	0x3762	; 0x3762 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	80 e8       	ldi	r24, 0x80	; 128
    1e58:	9f e3       	ldi	r25, 0x3F	; 63
    1e5a:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	70 e4       	ldi	r23, 0x40	; 64
    1e62:	8c e1       	ldi	r24, 0x1C	; 28
    1e64:	95 e4       	ldi	r25, 0x45	; 69
    1e66:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <EM_set_RRL>
	EM_set_Vcc(5.00);
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	80 ea       	ldi	r24, 0xA0	; 160
    1e70:	90 e4       	ldi	r25, 0x40	; 64
    1e72:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <EM_set_Vcc>
	EM_set_heat_up_time(2);
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	0e 94 0c 20 	call	0x4018	; 0x4018 <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    1e7c:	85 e0       	ldi	r24, 0x05	; 5
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 18 20 	call	0x4030	; 0x4030 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    1e84:	86 e0       	ldi	r24, 0x06	; 6
    1e86:	0e 94 24 20 	call	0x4048	; 0x4048 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	1a c0       	rjmp	.+52     	; 0x1ec2 <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    1e8e:	e8 2f       	mov	r30, r24
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	9f 01       	movw	r18, r30
    1e94:	22 0f       	add	r18, r18
    1e96:	33 1f       	adc	r19, r19
    1e98:	22 0f       	add	r18, r18
    1e9a:	33 1f       	adc	r19, r19
    1e9c:	e2 0f       	add	r30, r18
    1e9e:	f3 1f       	adc	r31, r19
    1ea0:	21 e0       	ldi	r18, 0x01	; 1
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	2c 0f       	add	r18, r28
    1ea6:	3d 1f       	adc	r19, r29
    1ea8:	e2 0f       	add	r30, r18
    1eaa:	f3 1f       	adc	r31, r19
    1eac:	92 e0       	ldi	r25, 0x02	; 2
    1eae:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    1eb0:	22 e0       	ldi	r18, 0x02	; 2
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	31 83       	std	Z+1, r19	; 0x01
    1eb6:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    1eb8:	23 e0       	ldi	r18, 0x03	; 3
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	33 83       	std	Z+3, r19	; 0x03
    1ebe:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    1ec0:	8f 5f       	subi	r24, 0xFF	; 255
    1ec2:	87 30       	cpi	r24, 0x07	; 7
    1ec4:	20 f3       	brcs	.-56     	; 0x1e8e <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1ec6:	be 01       	movw	r22, r28
    1ec8:	6f 5f       	subi	r22, 0xFF	; 255
    1eca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ecc:	80 e8       	ldi	r24, 0x80	; 128
    1ece:	43 e2       	ldi	r20, 0x23	; 35
    1ed0:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    1ed4:	23 e1       	ldi	r18, 0x13	; 19
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4d e7       	ldi	r20, 0x7D	; 125
    1eda:	52 e0       	ldi	r21, 0x02	; 2
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	c8 01       	movw	r24, r16
    1ee0:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
	return true;
}
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	a3 96       	adiw	r28, 0x23	; 35
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

Disassembly of section .text.write_time:

00001d1c <write_time>:

static bool write_time(const char cmd[], char res[]){
    1d1c:	6f 92       	push	r6
    1d1e:	7f 92       	push	r7
    1d20:	8f 92       	push	r8
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <write_time+0x16>
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <write_time+0x18>
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <write_time+0x1a>
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	3b 01       	movw	r6, r22
    1d3c:	88 2e       	mov	r8, r24
    1d3e:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    1d40:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    1d44:	22 e0       	ldi	r18, 0x02	; 2
    1d46:	46 e1       	ldi	r20, 0x16	; 22
    1d48:	56 e0       	ldi	r21, 0x06	; 6
    1d4a:	88 2d       	mov	r24, r8
    1d4c:	b3 01       	movw	r22, r6
    1d4e:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    1d52:	18 2f       	mov	r17, r24
    1d54:	88 23       	and	r24, r24
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <write_time+0x3e>
    1d58:	4e c0       	rjmp	.+156    	; 0x1df6 <write_time+0xda>
	if(strlen(arg)!=17){
    1d5a:	66 e1       	ldi	r22, 0x16	; 22
    1d5c:	76 e0       	ldi	r23, 0x06	; 6
    1d5e:	80 e8       	ldi	r24, 0x80	; 128
    1d60:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    1d64:	41 97       	sbiw	r24, 0x11	; 17
    1d66:	49 f0       	breq	.+18     	; 0x1d7a <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    1d68:	25 e2       	ldi	r18, 0x25	; 37
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e9       	ldi	r20, 0x90	; 144
    1d6e:	52 e0       	ldi	r21, 0x02	; 2
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	c7 01       	movw	r24, r14
    1d74:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
    1d78:	3e c0       	rjmp	.+124    	; 0x1df6 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	86 e1       	ldi	r24, 0x16	; 22
    1d7e:	96 e0       	ldi	r25, 0x06	; 6
    1d80:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <get_time_par>
    1d84:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    1d86:	63 e0       	ldi	r22, 0x03	; 3
    1d88:	86 e1       	ldi	r24, 0x16	; 22
    1d8a:	96 e0       	ldi	r25, 0x06	; 6
    1d8c:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <get_time_par>
    1d90:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    1d92:	66 e0       	ldi	r22, 0x06	; 6
    1d94:	86 e1       	ldi	r24, 0x16	; 22
    1d96:	96 e0       	ldi	r25, 0x06	; 6
    1d98:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <get_time_par>
    1d9c:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    1d9e:	69 e0       	ldi	r22, 0x09	; 9
    1da0:	86 e1       	ldi	r24, 0x16	; 22
    1da2:	96 e0       	ldi	r25, 0x06	; 6
    1da4:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <get_time_par>
    1da8:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    1daa:	6c e0       	ldi	r22, 0x0C	; 12
    1dac:	86 e1       	ldi	r24, 0x16	; 22
    1dae:	96 e0       	ldi	r25, 0x06	; 6
    1db0:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <get_time_par>
    1db4:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    1db6:	6f e0       	ldi	r22, 0x0F	; 15
    1db8:	86 e1       	ldi	r24, 0x16	; 22
    1dba:	96 e0       	ldi	r25, 0x06	; 6
    1dbc:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    1dc0:	48 2f       	mov	r20, r24
    1dc2:	5d 2d       	mov	r21, r13
    1dc4:	60 2f       	mov	r22, r16
    1dc6:	76 2d       	mov	r23, r6
    1dc8:	87 2d       	mov	r24, r7
    1dca:	98 2d       	mov	r25, r8
    1dcc:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    1dd0:	88 23       	and	r24, r24
    1dd2:	49 f0       	breq	.+18     	; 0x1de6 <write_time+0xca>
		strcpy(res, "Failed to set time");
    1dd4:	23 e1       	ldi	r18, 0x13	; 19
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	45 eb       	ldi	r20, 0xB5	; 181
    1dda:	52 e0       	ldi	r21, 0x02	; 2
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	c7 01       	movw	r24, r14
    1de0:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
    1de4:	08 c0       	rjmp	.+16     	; 0x1df6 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    1de6:	28 e0       	ldi	r18, 0x08	; 8
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	43 e4       	ldi	r20, 0x43	; 67
    1dec:	52 e0       	ldi	r21, 0x02	; 2
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	c7 01       	movw	r24, r14
    1df2:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
	return true;
}
    1df6:	81 2f       	mov	r24, r17
    1df8:	26 96       	adiw	r28, 0x06	; 6
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	df 90       	pop	r13
    1e12:	8f 90       	pop	r8
    1e14:	7f 90       	pop	r7
    1e16:	6f 90       	pop	r6
    1e18:	08 95       	ret

Disassembly of section .text.handle_read:

00000fc2 <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	68 97       	sbiw	r28, 0x18	; 24
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	6b 01       	movw	r12, r22
     fe4:	e8 2e       	mov	r14, r24
     fe6:	f4 2e       	mov	r15, r20
     fe8:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
     fea:	21 e0       	ldi	r18, 0x01	; 1
     fec:	ae 01       	movw	r20, r28
     fee:	4f 5f       	subi	r20, 0xFF	; 255
     ff0:	5f 4f       	sbci	r21, 0xFF	; 255
     ff2:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
     ff6:	18 2f       	mov	r17, r24
     ff8:	88 23       	and	r24, r24
     ffa:	09 f4       	brne	.+2      	; 0xffe <handle_read+0x3c>
     ffc:	23 c1       	rjmp	.+582    	; 0x1244 <__stack+0x145>
     ffe:	8e 2d       	mov	r24, r14
    1000:	b6 01       	movw	r22, r12
    1002:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <count_parameters>
    1006:	82 30       	cpi	r24, 0x02	; 2
    1008:	09 f4       	brne	.+2      	; 0x100c <__DATA_REGION_LENGTH__+0xc>
    100a:	1b c1       	rjmp	.+566    	; 0x1242 <__stack+0x143>
	
	if (strcmp(par, RW_DEVEUI)==0)
    100c:	ce 01       	movw	r24, r28
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	6c 01       	movw	r12, r24
    1012:	20 e8       	ldi	r18, 0x80	; 128
    1014:	e2 2e       	mov	r14, r18
    1016:	28 ec       	ldi	r18, 0xC8	; 200
    1018:	32 e0       	ldi	r19, 0x02	; 2
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	8e 2d       	mov	r24, r14
    101e:	b6 01       	movw	r22, r12
    1020:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    1024:	89 2b       	or	r24, r25
    1026:	29 f4       	brne	.+10     	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
	{
		EM_get_deveui(res);
    1028:	8f 2d       	mov	r24, r15
    102a:	90 2f       	mov	r25, r16
    102c:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <EM_get_deveui>
    1030:	09 c1       	rjmp	.+530    	; 0x1244 <__stack+0x145>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1032:	2f ec       	ldi	r18, 0xCF	; 207
    1034:	32 e0       	ldi	r19, 0x02	; 2
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	8e 2d       	mov	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    1040:	89 2b       	or	r24, r25
    1042:	29 f4       	brne	.+10     	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
	{
		EM_get_appeui(res);
    1044:	8f 2d       	mov	r24, r15
    1046:	90 2f       	mov	r25, r16
    1048:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <EM_get_appeui>
    104c:	fb c0       	rjmp	.+502    	; 0x1244 <__stack+0x145>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    104e:	26 ed       	ldi	r18, 0xD6	; 214
    1050:	32 e0       	ldi	r19, 0x02	; 2
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	8e 2d       	mov	r24, r14
    1056:	b6 01       	movw	r22, r12
    1058:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    105c:	89 2b       	or	r24, r25
    105e:	29 f4       	brne	.+10     	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
	{
		EM_get_appkey(res);
    1060:	8f 2d       	mov	r24, r15
    1062:	90 2f       	mov	r25, r16
    1064:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <EM_get_appkey>
    1068:	ed c0       	rjmp	.+474    	; 0x1244 <__stack+0x145>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    106a:	2d ed       	ldi	r18, 0xDD	; 221
    106c:	32 e0       	ldi	r19, 0x02	; 2
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	8e 2d       	mov	r24, r14
    1072:	b6 01       	movw	r22, r12
    1074:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    1078:	89 2b       	or	r24, r25
    107a:	e1 f4       	brne	.+56     	; 0x10b4 <__DATA_REGION_LENGTH__+0xb4>
	{
		EM_get_ppmfactor(&val);
    107c:	ce 01       	movw	r24, r28
    107e:	45 96       	adiw	r24, 0x15	; 21
    1080:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    1084:	88 8d       	ldd	r24, Y+24	; 0x18
    1086:	8f 93       	push	r24
    1088:	8f 89       	ldd	r24, Y+23	; 0x17
    108a:	8f 93       	push	r24
    108c:	8e 89       	ldd	r24, Y+22	; 0x16
    108e:	8f 93       	push	r24
    1090:	8d 89       	ldd	r24, Y+21	; 0x15
    1092:	8f 93       	push	r24
    1094:	82 ee       	ldi	r24, 0xE2	; 226
    1096:	92 e0       	ldi	r25, 0x02	; 2
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	af 93       	push	r26
    109c:	9f 93       	push	r25
    109e:	8f 93       	push	r24
    10a0:	0f 93       	push	r16
    10a2:	ff 92       	push	r15
    10a4:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	c8 c0       	rjmp	.+400    	; 0x1244 <__stack+0x145>
	}
	else if(strcmp(par, RW_RRL)==0)
    10b4:	27 ee       	ldi	r18, 0xE7	; 231
    10b6:	32 e0       	ldi	r19, 0x02	; 2
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	8e 2d       	mov	r24, r14
    10bc:	b6 01       	movw	r22, r12
    10be:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    10c2:	89 2b       	or	r24, r25
    10c4:	e1 f4       	brne	.+56     	; 0x10fe <__DATA_REGION_LENGTH__+0xfe>
	{
		EM_get_RRL(&val);
    10c6:	ce 01       	movw	r24, r28
    10c8:	45 96       	adiw	r24, 0x15	; 21
    10ca:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    10ce:	88 8d       	ldd	r24, Y+24	; 0x18
    10d0:	8f 93       	push	r24
    10d2:	8f 89       	ldd	r24, Y+23	; 0x17
    10d4:	8f 93       	push	r24
    10d6:	8e 89       	ldd	r24, Y+22	; 0x16
    10d8:	8f 93       	push	r24
    10da:	8d 89       	ldd	r24, Y+21	; 0x15
    10dc:	8f 93       	push	r24
    10de:	82 ee       	ldi	r24, 0xE2	; 226
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	a0 e0       	ldi	r26, 0x00	; 0
    10e4:	af 93       	push	r26
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	0f 93       	push	r16
    10ec:	ff 92       	push	r15
    10ee:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	a3 c0       	rjmp	.+326    	; 0x1244 <__stack+0x145>
	}
	else if(strcmp(par, RW_VCC)==0)
    10fe:	2c ee       	ldi	r18, 0xEC	; 236
    1100:	32 e0       	ldi	r19, 0x02	; 2
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	8e 2d       	mov	r24, r14
    1106:	b6 01       	movw	r22, r12
    1108:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    110c:	89 2b       	or	r24, r25
    110e:	e1 f4       	brne	.+56     	; 0x1148 <__stack+0x49>
	{
		EM_get_Vcc(&val);
    1110:	ce 01       	movw	r24, r28
    1112:	45 96       	adiw	r24, 0x15	; 21
    1114:	0e 94 77 1e 	call	0x3cee	; 0x3cee <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1118:	88 8d       	ldd	r24, Y+24	; 0x18
    111a:	8f 93       	push	r24
    111c:	8f 89       	ldd	r24, Y+23	; 0x17
    111e:	8f 93       	push	r24
    1120:	8e 89       	ldd	r24, Y+22	; 0x16
    1122:	8f 93       	push	r24
    1124:	8d 89       	ldd	r24, Y+21	; 0x15
    1126:	8f 93       	push	r24
    1128:	82 ee       	ldi	r24, 0xE2	; 226
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	a0 e0       	ldi	r26, 0x00	; 0
    112e:	af 93       	push	r26
    1130:	9f 93       	push	r25
    1132:	8f 93       	push	r24
    1134:	0f 93       	push	r16
    1136:	ff 92       	push	r15
    1138:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	7e c0       	rjmp	.+252    	; 0x1244 <__stack+0x145>
	}
	else if(strcmp(par, RW_COLS)==0)
    1148:	21 ef       	ldi	r18, 0xF1	; 241
    114a:	32 e0       	ldi	r19, 0x02	; 2
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	8e 2d       	mov	r24, r14
    1150:	b6 01       	movw	r22, r12
    1152:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    1156:	89 2b       	or	r24, r25
    1158:	29 f4       	brne	.+10     	; 0x1164 <__stack+0x65>
	{
		read_cols(res);
    115a:	8f 2d       	mov	r24, r15
    115c:	90 2f       	mov	r25, r16
    115e:	0e 94 be 10 	call	0x217c	; 0x217c <read_cols>
    1162:	70 c0       	rjmp	.+224    	; 0x1244 <__stack+0x145>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1164:	26 ef       	ldi	r18, 0xF6	; 246
    1166:	32 e0       	ldi	r19, 0x02	; 2
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	8e 2d       	mov	r24, r14
    116c:	b6 01       	movw	r22, r12
    116e:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    1172:	89 2b       	or	r24, r25
    1174:	a1 f4       	brne	.+40     	; 0x119e <__stack+0x9f>
	{
		uint8_t val=EM_get_heat_up_time();
    1176:	0e 94 12 20 	call	0x4024	; 0x4024 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    117a:	1f 92       	push	r1
    117c:	8f 93       	push	r24
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	93 e0       	ldi	r25, 0x03	; 3
    1182:	a0 e0       	ldi	r26, 0x00	; 0
    1184:	af 93       	push	r26
    1186:	9f 93       	push	r25
    1188:	8f 93       	push	r24
    118a:	0f 93       	push	r16
    118c:	ff 92       	push	r15
    118e:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	53 c0       	rjmp	.+166    	; 0x1244 <__stack+0x145>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    119e:	22 e1       	ldi	r18, 0x12	; 18
    11a0:	33 e0       	ldi	r19, 0x03	; 3
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	8e 2d       	mov	r24, r14
    11a6:	b6 01       	movw	r22, r12
    11a8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    11ac:	89 2b       	or	r24, r25
    11ae:	a1 f4       	brne	.+40     	; 0x11d8 <__stack+0xd9>
	{
		uint16_t val=EM_get_air_pump_time();
    11b0:	0e 94 1e 20 	call	0x403c	; 0x403c <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    11b4:	9f 93       	push	r25
    11b6:	8f 93       	push	r24
    11b8:	8d e1       	ldi	r24, 0x1D	; 29
    11ba:	93 e0       	ldi	r25, 0x03	; 3
    11bc:	a0 e0       	ldi	r26, 0x00	; 0
    11be:	af 93       	push	r26
    11c0:	9f 93       	push	r25
    11c2:	8f 93       	push	r24
    11c4:	0f 93       	push	r16
    11c6:	ff 92       	push	r15
    11c8:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	36 c0       	rjmp	.+108    	; 0x1244 <__stack+0x145>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    11d8:	20 e3       	ldi	r18, 0x30	; 48
    11da:	33 e0       	ldi	r19, 0x03	; 3
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	8e 2d       	mov	r24, r14
    11e0:	b6 01       	movw	r22, r12
    11e2:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    11e6:	89 2b       	or	r24, r25
    11e8:	a1 f4       	brne	.+40     	; 0x1212 <__stack+0x113>
	{
		uint8_t val=EM_get_sp_interval();
    11ea:	0e 94 2a 20 	call	0x4054	; 0x4054 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    11ee:	1f 92       	push	r1
    11f0:	8f 93       	push	r24
    11f2:	8c e3       	ldi	r24, 0x3C	; 60
    11f4:	93 e0       	ldi	r25, 0x03	; 3
    11f6:	a0 e0       	ldi	r26, 0x00	; 0
    11f8:	af 93       	push	r26
    11fa:	9f 93       	push	r25
    11fc:	8f 93       	push	r24
    11fe:	0f 93       	push	r16
    1200:	ff 92       	push	r15
    1202:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	19 c0       	rjmp	.+50     	; 0x1244 <__stack+0x145>
	}
	else if(strcmp(par, RW_TIME)==0)
    1212:	2b e5       	ldi	r18, 0x5B	; 91
    1214:	33 e0       	ldi	r19, 0x03	; 3
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	8e 2d       	mov	r24, r14
    121a:	b6 01       	movw	r22, r12
    121c:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    1220:	89 2b       	or	r24, r25
    1222:	29 f4       	brne	.+10     	; 0x122e <__stack+0x12f>
	{
		read_time(res);
    1224:	8f 2d       	mov	r24, r15
    1226:	90 2f       	mov	r25, r16
    1228:	0e 94 59 13 	call	0x26b2	; 0x26b2 <read_time>
    122c:	0b c0       	rjmp	.+22     	; 0x1244 <__stack+0x145>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    122e:	26 e1       	ldi	r18, 0x16	; 22
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e6       	ldi	r20, 0x60	; 96
    1234:	53 e0       	ldi	r21, 0x03	; 3
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	8f 2d       	mov	r24, r15
    123a:	90 2f       	mov	r25, r16
    123c:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <__stack+0x145>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1242:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1244:	81 2f       	mov	r24, r17
    1246:	68 96       	adiw	r28, 0x18	; 24
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	08 95       	ret

Disassembly of section .text.handle_write:

00001264 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1264:	6f 92       	push	r6
    1266:	7f 92       	push	r7
    1268:	8f 92       	push	r8
    126a:	af 92       	push	r10
    126c:	bf 92       	push	r11
    126e:	cf 92       	push	r12
    1270:	df 92       	push	r13
    1272:	ef 92       	push	r14
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	64 97       	sbiw	r28, 0x14	; 20
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	3b 01       	movw	r6, r22
    128c:	88 2e       	mov	r8, r24
    128e:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	ae 01       	movw	r20, r28
    1294:	4f 5f       	subi	r20, 0xFF	; 255
    1296:	5f 4f       	sbci	r21, 0xFF	; 255
    1298:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    129c:	18 2f       	mov	r17, r24
    129e:	88 23       	and	r24, r24
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <handle_write+0x40>
    12a2:	cd c0       	rjmp	.+410    	; 0x143e <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    12a4:	ce 01       	movw	r24, r28
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	6c 01       	movw	r12, r24
    12aa:	20 e8       	ldi	r18, 0x80	; 128
    12ac:	e2 2e       	mov	r14, r18
    12ae:	28 ec       	ldi	r18, 0xC8	; 200
    12b0:	32 e0       	ldi	r19, 0x02	; 2
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	8e 2d       	mov	r24, r14
    12b6:	b6 01       	movw	r22, r12
    12b8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    12bc:	89 2b       	or	r24, r25
    12be:	39 f4       	brne	.+14     	; 0x12ce <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    12c0:	a5 01       	movw	r20, r10
    12c2:	88 2d       	mov	r24, r8
    12c4:	b3 01       	movw	r22, r6
    12c6:	0e 94 62 14 	call	0x28c4	; 0x28c4 <write_deveui>
    12ca:	18 2f       	mov	r17, r24
    12cc:	b8 c0       	rjmp	.+368    	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    12ce:	2f ec       	ldi	r18, 0xCF	; 207
    12d0:	32 e0       	ldi	r19, 0x02	; 2
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	8e 2d       	mov	r24, r14
    12d6:	b6 01       	movw	r22, r12
    12d8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    12dc:	89 2b       	or	r24, r25
    12de:	39 f4       	brne	.+14     	; 0x12ee <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    12e0:	a5 01       	movw	r20, r10
    12e2:	88 2d       	mov	r24, r8
    12e4:	b3 01       	movw	r22, r6
    12e6:	0e 94 9e 14 	call	0x293c	; 0x293c <write_appeui>
    12ea:	18 2f       	mov	r17, r24
    12ec:	a8 c0       	rjmp	.+336    	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    12ee:	26 ed       	ldi	r18, 0xD6	; 214
    12f0:	32 e0       	ldi	r19, 0x02	; 2
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	8e 2d       	mov	r24, r14
    12f6:	b6 01       	movw	r22, r12
    12f8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    12fc:	89 2b       	or	r24, r25
    12fe:	39 f4       	brne	.+14     	; 0x130e <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1300:	a5 01       	movw	r20, r10
    1302:	88 2d       	mov	r24, r8
    1304:	b3 01       	movw	r22, r6
    1306:	0e 94 da 14 	call	0x29b4	; 0x29b4 <write_appkey>
    130a:	18 2f       	mov	r17, r24
    130c:	98 c0       	rjmp	.+304    	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    130e:	2d ed       	ldi	r18, 0xDD	; 221
    1310:	32 e0       	ldi	r19, 0x02	; 2
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	8e 2d       	mov	r24, r14
    1316:	b6 01       	movw	r22, r12
    1318:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    131c:	89 2b       	or	r24, r25
    131e:	39 f4       	brne	.+14     	; 0x132e <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1320:	a5 01       	movw	r20, r10
    1322:	88 2d       	mov	r24, r8
    1324:	b3 01       	movw	r22, r6
    1326:	0e 94 bb 18 	call	0x3176	; 0x3176 <write_PPM_factor>
    132a:	18 2f       	mov	r17, r24
    132c:	88 c0       	rjmp	.+272    	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    132e:	27 ee       	ldi	r18, 0xE7	; 231
    1330:	32 e0       	ldi	r19, 0x02	; 2
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	8e 2d       	mov	r24, r14
    1336:	b6 01       	movw	r22, r12
    1338:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    133c:	89 2b       	or	r24, r25
    133e:	39 f4       	brne	.+14     	; 0x134e <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1340:	a5 01       	movw	r20, r10
    1342:	88 2d       	mov	r24, r8
    1344:	b3 01       	movw	r22, r6
    1346:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <write_RRL>
    134a:	18 2f       	mov	r17, r24
    134c:	78 c0       	rjmp	.+240    	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    134e:	2c ee       	ldi	r18, 0xEC	; 236
    1350:	32 e0       	ldi	r19, 0x02	; 2
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	8e 2d       	mov	r24, r14
    1356:	b6 01       	movw	r22, r12
    1358:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    135c:	89 2b       	or	r24, r25
    135e:	39 f4       	brne	.+14     	; 0x136e <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1360:	a5 01       	movw	r20, r10
    1362:	88 2d       	mov	r24, r8
    1364:	b3 01       	movw	r22, r6
    1366:	0e 94 07 19 	call	0x320e	; 0x320e <write_VCC>
    136a:	18 2f       	mov	r17, r24
    136c:	68 c0       	rjmp	.+208    	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    136e:	21 ef       	ldi	r18, 0xF1	; 241
    1370:	32 e0       	ldi	r19, 0x02	; 2
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	8e 2d       	mov	r24, r14
    1376:	b6 01       	movw	r22, r12
    1378:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    137c:	89 2b       	or	r24, r25
    137e:	39 f4       	brne	.+14     	; 0x138e <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1380:	a5 01       	movw	r20, r10
    1382:	88 2d       	mov	r24, r8
    1384:	b3 01       	movw	r22, r6
    1386:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <write_cols>
    138a:	18 2f       	mov	r17, r24
    138c:	58 c0       	rjmp	.+176    	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    138e:	26 ef       	ldi	r18, 0xF6	; 246
    1390:	32 e0       	ldi	r19, 0x02	; 2
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	8e 2d       	mov	r24, r14
    1396:	b6 01       	movw	r22, r12
    1398:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    139c:	89 2b       	or	r24, r25
    139e:	39 f4       	brne	.+14     	; 0x13ae <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    13a0:	a5 01       	movw	r20, r10
    13a2:	88 2d       	mov	r24, r8
    13a4:	b3 01       	movw	r22, r6
    13a6:	0e 94 2d 19 	call	0x325a	; 0x325a <write_heat_up>
    13aa:	18 2f       	mov	r17, r24
    13ac:	48 c0       	rjmp	.+144    	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    13ae:	22 e1       	ldi	r18, 0x12	; 18
    13b0:	33 e0       	ldi	r19, 0x03	; 3
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	8e 2d       	mov	r24, r14
    13b6:	b6 01       	movw	r22, r12
    13b8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    13bc:	89 2b       	or	r24, r25
    13be:	39 f4       	brne	.+14     	; 0x13ce <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    13c0:	a5 01       	movw	r20, r10
    13c2:	88 2d       	mov	r24, r8
    13c4:	b3 01       	movw	r22, r6
    13c6:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <write_air_pump>
    13ca:	18 2f       	mov	r17, r24
    13cc:	38 c0       	rjmp	.+112    	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    13ce:	20 e3       	ldi	r18, 0x30	; 48
    13d0:	33 e0       	ldi	r19, 0x03	; 3
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	8e 2d       	mov	r24, r14
    13d6:	b6 01       	movw	r22, r12
    13d8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    13dc:	89 2b       	or	r24, r25
    13de:	39 f4       	brne	.+14     	; 0x13ee <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    13e0:	a5 01       	movw	r20, r10
    13e2:	88 2d       	mov	r24, r8
    13e4:	b3 01       	movw	r22, r6
    13e6:	0e 94 53 19 	call	0x32a6	; 0x32a6 <write_sp_interval>
    13ea:	18 2f       	mov	r17, r24
    13ec:	28 c0       	rjmp	.+80     	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    13ee:	26 e7       	ldi	r18, 0x76	; 118
    13f0:	33 e0       	ldi	r19, 0x03	; 3
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	8e 2d       	mov	r24, r14
    13f6:	b6 01       	movw	r22, r12
    13f8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    13fc:	89 2b       	or	r24, r25
    13fe:	39 f4       	brne	.+14     	; 0x140e <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1400:	a5 01       	movw	r20, r10
    1402:	88 2d       	mov	r24, r8
    1404:	b3 01       	movw	r22, r6
    1406:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <write_reset>
    140a:	18 2f       	mov	r17, r24
    140c:	18 c0       	rjmp	.+48     	; 0x143e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    140e:	2b e5       	ldi	r18, 0x5B	; 91
    1410:	33 e0       	ldi	r19, 0x03	; 3
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	8e 2d       	mov	r24, r14
    1416:	b6 01       	movw	r22, r12
    1418:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    141c:	89 2b       	or	r24, r25
    141e:	39 f4       	brne	.+14     	; 0x142e <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1420:	a5 01       	movw	r20, r10
    1422:	88 2d       	mov	r24, r8
    1424:	b3 01       	movw	r22, r6
    1426:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <write_time>
    142a:	18 2f       	mov	r17, r24
    142c:	08 c0       	rjmp	.+16     	; 0x143e <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    142e:	26 e1       	ldi	r18, 0x16	; 22
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e6       	ldi	r20, 0x60	; 96
    1434:	53 e0       	ldi	r21, 0x03	; 3
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	c5 01       	movw	r24, r10
    143a:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
	}
	
}
    143e:	81 2f       	mov	r24, r17
    1440:	64 96       	adiw	r28, 0x14	; 20
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	ef 90       	pop	r14
    1454:	df 90       	pop	r13
    1456:	cf 90       	pop	r12
    1458:	bf 90       	pop	r11
    145a:	af 90       	pop	r10
    145c:	8f 90       	pop	r8
    145e:	7f 90       	pop	r7
    1460:	6f 90       	pop	r6
    1462:	08 95       	ret

Disassembly of section .text.handle_methane:

00001b02 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    1b02:	cf 92       	push	r12
    1b04:	df 92       	push	r13
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <handle_methane+0x12>
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	f4 2e       	mov	r15, r20
    1b1a:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    1b1c:	22 e0       	ldi	r18, 0x02	; 2
    1b1e:	46 e6       	ldi	r20, 0x66	; 102
    1b20:	56 e0       	ldi	r21, 0x06	; 6
    1b22:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    1b26:	18 2f       	mov	r17, r24
    1b28:	88 23       	and	r24, r24
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <handle_methane+0x2c>
    1b2c:	6b c0       	rjmp	.+214    	; 0x1c04 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    1b2e:	86 e6       	ldi	r24, 0x66	; 102
    1b30:	96 e0       	ldi	r25, 0x06	; 6
    1b32:	6c 01       	movw	r12, r24
    1b34:	20 e8       	ldi	r18, 0x80	; 128
    1b36:	e2 2e       	mov	r14, r18
    1b38:	20 e2       	ldi	r18, 0x20	; 32
    1b3a:	34 e0       	ldi	r19, 0x04	; 4
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	8e 2d       	mov	r24, r14
    1b40:	b6 01       	movw	r22, r12
    1b42:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    1b46:	89 2b       	or	r24, r25
    1b48:	79 f4       	brne	.+30     	; 0x1b68 <handle_methane+0x66>
		PM_HAL_meth_power_init();
    1b4a:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    1b54:	28 e1       	ldi	r18, 0x18	; 24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	43 e2       	ldi	r20, 0x23	; 35
    1b5a:	54 e0       	ldi	r21, 0x04	; 4
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	8f 2d       	mov	r24, r15
    1b60:	90 2f       	mov	r25, r16
    1b62:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
    1b66:	4e c0       	rjmp	.+156    	; 0x1c04 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    1b68:	2b e3       	ldi	r18, 0x3B	; 59
    1b6a:	34 e0       	ldi	r19, 0x04	; 4
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	8e 2d       	mov	r24, r14
    1b70:	b6 01       	movw	r22, r12
    1b72:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    1b76:	89 2b       	or	r24, r25
    1b78:	79 f4       	brne	.+30     	; 0x1b98 <handle_methane+0x96>
		PM_HAL_meth_power_init();
    1b7a:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    1b84:	29 e1       	ldi	r18, 0x19	; 25
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	4f e3       	ldi	r20, 0x3F	; 63
    1b8a:	54 e0       	ldi	r21, 0x04	; 4
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	8f 2d       	mov	r24, r15
    1b90:	90 2f       	mov	r25, r16
    1b92:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
    1b96:	36 c0       	rjmp	.+108    	; 0x1c04 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    1b98:	28 e5       	ldi	r18, 0x58	; 88
    1b9a:	34 e0       	ldi	r19, 0x04	; 4
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	8e 2d       	mov	r24, r14
    1ba0:	b6 01       	movw	r22, r12
    1ba2:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    1ba6:	89 2b       	or	r24, r25
    1ba8:	21 f5       	brne	.+72     	; 0x1bf2 <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    1baa:	ce 01       	movw	r24, r28
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <ADC_get_value>
    1bb2:	88 23       	and	r24, r24
    1bb4:	51 f0       	breq	.+20     	; 0x1bca <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    1bb6:	28 e1       	ldi	r18, 0x18	; 24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	4d e5       	ldi	r20, 0x5D	; 93
    1bbc:	54 e0       	ldi	r21, 0x04	; 4
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	8f 2d       	mov	r24, r15
    1bc2:	90 2f       	mov	r25, r16
    1bc4:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
    1bc8:	1d c0       	rjmp	.+58     	; 0x1c04 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	8f 93       	push	r24
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	8f 93       	push	r24
    1bd2:	85 e7       	ldi	r24, 0x75	; 117
    1bd4:	94 e0       	ldi	r25, 0x04	; 4
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	af 93       	push	r26
    1bda:	9f 93       	push	r25
    1bdc:	8f 93       	push	r24
    1bde:	0f 93       	push	r16
    1be0:	ff 92       	push	r15
    1be2:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	09 c0       	rjmp	.+18     	; 0x1c04 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1bf2:	26 e1       	ldi	r18, 0x16	; 22
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4c e7       	ldi	r20, 0x7C	; 124
    1bf8:	54 e0       	ldi	r21, 0x04	; 4
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	8f 2d       	mov	r24, r15
    1bfe:	90 2f       	mov	r25, r16
    1c00:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
	}
	return false;
}
    1c04:	81 2f       	mov	r24, r17
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	df 90       	pop	r13
    1c18:	cf 90       	pop	r12
    1c1a:	08 95       	ret

Disassembly of section .text.handle_co2:

000023a8 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <handle_co2+0xc>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	f4 2e       	mov	r15, r20
    23ba:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    23bc:	22 e0       	ldi	r18, 0x02	; 2
    23be:	46 e6       	ldi	r20, 0x66	; 102
    23c0:	56 e0       	ldi	r21, 0x06	; 6
    23c2:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    23c6:	18 2f       	mov	r17, r24
    23c8:	88 23       	and	r24, r24
    23ca:	b9 f1       	breq	.+110    	; 0x243a <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    23cc:	66 e6       	ldi	r22, 0x66	; 102
    23ce:	76 e0       	ldi	r23, 0x06	; 6
    23d0:	80 e8       	ldi	r24, 0x80	; 128
    23d2:	28 e5       	ldi	r18, 0x58	; 88
    23d4:	34 e0       	ldi	r19, 0x04	; 4
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    23dc:	89 2b       	or	r24, r25
    23de:	21 f5       	brne	.+72     	; 0x2428 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    23e0:	ce 01       	movw	r24, r28
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <SCD30_get_reading>
    23e8:	88 23       	and	r24, r24
    23ea:	51 f0       	breq	.+20     	; 0x2400 <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    23ec:	28 e1       	ldi	r18, 0x18	; 24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	4d e5       	ldi	r20, 0x5D	; 93
    23f2:	54 e0       	ldi	r21, 0x04	; 4
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	8f 2d       	mov	r24, r15
    23f8:	90 2f       	mov	r25, r16
    23fa:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
    23fe:	1d c0       	rjmp	.+58     	; 0x243a <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	8f 93       	push	r24
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	8f 93       	push	r24
    2408:	85 e7       	ldi	r24, 0x75	; 117
    240a:	94 e0       	ldi	r25, 0x04	; 4
    240c:	a0 e0       	ldi	r26, 0x00	; 0
    240e:	af 93       	push	r26
    2410:	9f 93       	push	r25
    2412:	8f 93       	push	r24
    2414:	0f 93       	push	r16
    2416:	ff 92       	push	r15
    2418:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <sprintf>
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	09 c0       	rjmp	.+18     	; 0x243a <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2428:	26 e1       	ldi	r18, 0x16	; 22
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4c e7       	ldi	r20, 0x7C	; 124
    242e:	54 e0       	ldi	r21, 0x04	; 4
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	8f 2d       	mov	r24, r15
    2434:	90 2f       	mov	r25, r16
    2436:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
	}
}
    243a:	81 2f       	mov	r24, r17
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	ff 90       	pop	r15
    244a:	08 95       	ret

Disassembly of section .text.handle_sample:

000024ee <handle_sample>:


static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    24ee:	6f 92       	push	r6
    24f0:	7f 92       	push	r7
    24f2:	8f 92       	push	r8
    24f4:	cf 92       	push	r12
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	0f 93       	push	r16
    24fc:	1f 93       	push	r17
    24fe:	cf 93       	push	r28
    2500:	3b 01       	movw	r6, r22
    2502:	88 2e       	mov	r8, r24
    2504:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    2506:	21 e0       	ldi	r18, 0x01	; 1
    2508:	46 e6       	ldi	r20, 0x66	; 102
    250a:	56 e0       	ldi	r21, 0x06	; 6
    250c:	0e 94 0e 13 	call	0x261c	; 0x261c <get_parameter>
    2510:	c8 2f       	mov	r28, r24
    2512:	88 23       	and	r24, r24
    2514:	69 f1       	breq	.+90     	; 0x2570 <handle_sample+0x82>
	
	if(strcmp(par, S_METH)==0){
    2516:	86 e6       	ldi	r24, 0x66	; 102
    2518:	96 e0       	ldi	r25, 0x06	; 6
    251a:	6c 01       	movw	r12, r24
    251c:	20 e8       	ldi	r18, 0x80	; 128
    251e:	e2 2e       	mov	r14, r18
    2520:	22 e9       	ldi	r18, 0x92	; 146
    2522:	34 e0       	ldi	r19, 0x04	; 4
    2524:	40 e0       	ldi	r20, 0x00	; 0
    2526:	8e 2d       	mov	r24, r14
    2528:	b6 01       	movw	r22, r12
    252a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    252e:	89 2b       	or	r24, r25
    2530:	39 f4       	brne	.+14     	; 0x2540 <handle_sample+0x52>
		return handle_methane(cmd, res);
    2532:	a8 01       	movw	r20, r16
    2534:	88 2d       	mov	r24, r8
    2536:	b3 01       	movw	r22, r6
    2538:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <handle_methane>
    253c:	c8 2f       	mov	r28, r24
    253e:	18 c0       	rjmp	.+48     	; 0x2570 <handle_sample+0x82>
	}else if(strcmp(par, S_CO2)==0){
    2540:	27 e9       	ldi	r18, 0x97	; 151
    2542:	34 e0       	ldi	r19, 0x04	; 4
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	8e 2d       	mov	r24, r14
    2548:	b6 01       	movw	r22, r12
    254a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strcmp>
    254e:	89 2b       	or	r24, r25
    2550:	39 f4       	brne	.+14     	; 0x2560 <handle_sample+0x72>
		return handle_co2(cmd, res);
    2552:	a8 01       	movw	r20, r16
    2554:	88 2d       	mov	r24, r8
    2556:	b3 01       	movw	r22, r6
    2558:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <handle_co2>
    255c:	c8 2f       	mov	r28, r24
    255e:	08 c0       	rjmp	.+16     	; 0x2570 <handle_sample+0x82>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2560:	26 e1       	ldi	r18, 0x16	; 22
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4c e7       	ldi	r20, 0x7C	; 124
    2566:	54 e0       	ldi	r21, 0x04	; 4
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	c8 01       	movw	r24, r16
    256c:	0e 94 bf 1c 	call	0x397e	; 0x397e <memcpy>
		return true;
	}
}
    2570:	8c 2f       	mov	r24, r28
    2572:	cf 91       	pop	r28
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	ef 90       	pop	r14
    257a:	df 90       	pop	r13
    257c:	cf 90       	pop	r12
    257e:	8f 90       	pop	r8
    2580:	7f 90       	pop	r7
    2582:	6f 90       	pop	r6
    2584:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00003b9e <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    3b9e:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    3ba2:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    3bac:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    3bb6:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    3bba:	88 23       	and	r24, r24
    3bbc:	11 f0       	breq	.+4      	; 0x3bc2 <init_methane_SCD30+0x24>
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	08 95       	ret
	return true;
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    3bc4:	08 95       	ret

Disassembly of section .text.count_parameters:

00002f9e <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    2f9e:	6f 92       	push	r6
    2fa0:	7f 92       	push	r7
    2fa2:	8f 92       	push	r8
    2fa4:	cf 92       	push	r12
    2fa6:	df 92       	push	r13
    2fa8:	ef 92       	push	r14
    2faa:	3b 01       	movw	r6, r22
    2fac:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    2fae:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    2fb2:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    2fba:	10 c0       	rjmp	.+32     	; 0x2fdc <count_parameters+0x3e>
	{
		if(src[i]==' '){
    2fbc:	e8 2c       	mov	r14, r8
    2fbe:	63 01       	movw	r12, r6
    2fc0:	c2 0e       	add	r12, r18
    2fc2:	d3 1e       	adc	r13, r19
    2fc4:	e1 1c       	adc	r14, r1
    2fc6:	37 fd       	sbrc	r19, 7
    2fc8:	ea 94       	dec	r14
    2fca:	f6 01       	movw	r30, r12
    2fcc:	94 91       	lpm	r25, Z
    2fce:	e7 fc       	sbrc	r14, 7
    2fd0:	90 81       	ld	r25, Z
    2fd2:	90 32       	cpi	r25, 0x20	; 32
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <count_parameters+0x3a>
			cnt++;
    2fd6:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2fd8:	2f 5f       	subi	r18, 0xFF	; 255
    2fda:	3f 4f       	sbci	r19, 0xFF	; 255
    2fdc:	26 17       	cp	r18, r22
    2fde:	37 07       	cpc	r19, r23
    2fe0:	68 f3       	brcs	.-38     	; 0x2fbc <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    2fe2:	ef 90       	pop	r14
    2fe4:	df 90       	pop	r13
    2fe6:	cf 90       	pop	r12
    2fe8:	8f 90       	pop	r8
    2fea:	7f 90       	pop	r7
    2fec:	6f 90       	pop	r6
    2fee:	08 95       	ret

Disassembly of section .text.par_index:

00002b8c <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    2b8c:	cf 92       	push	r12
    2b8e:	df 92       	push	r13
    2b90:	ef 92       	push	r14
    2b92:	0f 93       	push	r16
    2b94:	1f 93       	push	r17
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2b9a:	44 23       	and	r20, r20
    2b9c:	29 f1       	breq	.+74     	; 0x2be8 <par_index+0x5c>
    2b9e:	04 2f       	mov	r16, r20
    2ba0:	6b 01       	movw	r12, r22
    2ba2:	e8 2e       	mov	r14, r24
    2ba4:	c0 e0       	ldi	r28, 0x00	; 0
    2ba6:	d0 e0       	ldi	r29, 0x00	; 0
    2ba8:	10 e0       	ldi	r17, 0x00	; 0
    2baa:	14 c0       	rjmp	.+40     	; 0x2bd4 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    2bac:	ae 2d       	mov	r26, r14
    2bae:	c6 01       	movw	r24, r12
    2bb0:	8c 0f       	add	r24, r28
    2bb2:	9d 1f       	adc	r25, r29
    2bb4:	a1 1d       	adc	r26, r1
    2bb6:	d7 fd       	sbrc	r29, 7
    2bb8:	aa 95       	dec	r26
    2bba:	fc 01       	movw	r30, r24
    2bbc:	84 91       	lpm	r24, Z
    2bbe:	a7 fd       	sbrc	r26, 7
    2bc0:	80 81       	ld	r24, Z
    2bc2:	80 32       	cpi	r24, 0x20	; 32
    2bc4:	31 f4       	brne	.+12     	; 0x2bd2 <par_index+0x46>
			cnt++;
    2bc6:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    2bc8:	01 13       	cpse	r16, r17
    2bca:	03 c0       	rjmp	.+6      	; 0x2bd2 <par_index+0x46>
				return i+1;
    2bcc:	ce 01       	movw	r24, r28
    2bce:	01 96       	adiw	r24, 0x01	; 1
    2bd0:	0d c0       	rjmp	.+26     	; 0x2bec <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    2bd2:	21 96       	adiw	r28, 0x01	; 1
    2bd4:	8e 2d       	mov	r24, r14
    2bd6:	b6 01       	movw	r22, r12
    2bd8:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    2bdc:	c8 17       	cp	r28, r24
    2bde:	d9 07       	cpc	r29, r25
    2be0:	28 f3       	brcs	.-54     	; 0x2bac <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	1f 91       	pop	r17
    2bf2:	0f 91       	pop	r16
    2bf4:	ef 90       	pop	r14
    2bf6:	df 90       	pop	r13
    2bf8:	cf 90       	pop	r12
    2bfa:	08 95       	ret

Disassembly of section .text.get_parameter:

0000261c <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    261c:	8f 92       	push	r8
    261e:	9f 92       	push	r9
    2620:	af 92       	push	r10
    2622:	cf 92       	push	r12
    2624:	df 92       	push	r13
    2626:	ef 92       	push	r14
    2628:	ff 92       	push	r15
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	6b 01       	movw	r12, r22
    2634:	e8 2e       	mov	r14, r24
    2636:	ea 01       	movw	r28, r20
    2638:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    263a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <count_parameters>
	if(pars<parNo) return false;
    263e:	8f 15       	cp	r24, r15
    2640:	58 f1       	brcs	.+86     	; 0x2698 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    2642:	8e 2d       	mov	r24, r14
    2644:	b6 01       	movw	r22, r12
    2646:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    264a:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    264c:	4f 2d       	mov	r20, r15
    264e:	8e 2d       	mov	r24, r14
    2650:	b6 01       	movw	r22, r12
    2652:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <par_index>
	uint8_t parLen=0;
    2656:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    2658:	15 c0       	rjmp	.+42     	; 0x2684 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    265a:	46 01       	movw	r8, r12
    265c:	ae 2c       	mov	r10, r14
    265e:	82 0e       	add	r8, r18
    2660:	93 1e       	adc	r9, r19
    2662:	a1 1c       	adc	r10, r1
    2664:	37 fd       	sbrc	r19, 7
    2666:	aa 94       	dec	r10
    2668:	4a 2d       	mov	r20, r10
    266a:	94 01       	movw	r18, r8
    266c:	f4 01       	movw	r30, r8
    266e:	24 91       	lpm	r18, Z
    2670:	47 fd       	sbrc	r20, 7
    2672:	20 81       	ld	r18, Z
    2674:	20 32       	cpi	r18, 0x20	; 32
    2676:	59 f0       	breq	.+22     	; 0x268e <get_parameter+0x72>
		par[parLen++]=src[i];
    2678:	fe 01       	movw	r30, r28
    267a:	e9 0f       	add	r30, r25
    267c:	f1 1d       	adc	r31, r1
    267e:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    2680:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    2682:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	20 17       	cp	r18, r16
    268a:	31 07       	cpc	r19, r17
    268c:	30 f3       	brcs	.-52     	; 0x265a <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    268e:	c9 0f       	add	r28, r25
    2690:	d1 1d       	adc	r29, r1
    2692:	18 82       	st	Y, r1
	
	return true;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	01 c0       	rjmp	.+2      	; 0x269a <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    2698:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	df 90       	pop	r13
    26a8:	cf 90       	pop	r12
    26aa:	af 90       	pop	r10
    26ac:	9f 90       	pop	r9
    26ae:	8f 90       	pop	r8
    26b0:	08 95       	ret

Disassembly of section .text.calc_crc8:

00003844 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    3844:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3846:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    3848:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    384a:	14 c0       	rjmp	.+40     	; 0x3874 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    384c:	fa 01       	movw	r30, r20
    384e:	e3 0f       	add	r30, r19
    3850:	f1 1d       	adc	r31, r1
    3852:	90 81       	ld	r25, Z
    3854:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    3856:	28 e0       	ldi	r18, 0x08	; 8
    3858:	0a c0       	rjmp	.+20     	; 0x386e <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    385a:	88 23       	and	r24, r24
    385c:	34 f4       	brge	.+12     	; 0x386a <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	91 e3       	ldi	r25, 0x31	; 49
    3866:	89 27       	eor	r24, r25
    3868:	01 c0       	rjmp	.+2      	; 0x386c <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    386a:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    386c:	21 50       	subi	r18, 0x01	; 1
    386e:	21 11       	cpse	r18, r1
    3870:	f4 cf       	rjmp	.-24     	; 0x385a <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3872:	3f 5f       	subi	r19, 0xFF	; 255
    3874:	36 17       	cp	r19, r22
    3876:	50 f3       	brcs	.-44     	; 0x384c <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    3878:	08 95       	ret

Disassembly of section .text.get_decimal:

000022f4 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    22f4:	cf 92       	push	r12
    22f6:	df 92       	push	r13
    22f8:	ef 92       	push	r14
    22fa:	ff 92       	push	r15
    22fc:	0f 93       	push	r16
    22fe:	1f 93       	push	r17
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    2306:	10 e0       	ldi	r17, 0x00	; 0
    2308:	08 c0       	rjmp	.+16     	; 0x231a <get_decimal+0x26>
	{
		if(str[i]=='.'){
    230a:	cc 0d       	add	r28, r12
    230c:	dd 1d       	adc	r29, r13
    230e:	88 81       	ld	r24, Y
    2310:	8e 32       	cpi	r24, 0x2E	; 46
    2312:	11 f4       	brne	.+4      	; 0x2318 <get_decimal+0x24>
			index=i+1;
    2314:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    2316:	0c c0       	rjmp	.+24     	; 0x2330 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    2318:	1f 5f       	subi	r17, 0xFF	; 255
    231a:	c1 2f       	mov	r28, r17
    231c:	d0 e0       	ldi	r29, 0x00	; 0
    231e:	b6 01       	movw	r22, r12
    2320:	80 e8       	ldi	r24, 0x80	; 128
    2322:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	c8 17       	cp	r28, r24
    232a:	d9 07       	cpc	r29, r25
    232c:	70 f3       	brcs	.-36     	; 0x230a <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    232e:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    2330:	11 23       	and	r17, r17
    2332:	71 f1       	breq	.+92     	; 0x2390 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    2334:	c1 0e       	add	r12, r17
    2336:	d1 1c       	adc	r13, r1
    2338:	80 e8       	ldi	r24, 0x80	; 128
    233a:	e8 2e       	mov	r14, r24
    233c:	8e 2d       	mov	r24, r14
    233e:	b6 01       	movw	r22, r12
    2340:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    2344:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    2346:	8e 2d       	mov	r24, r14
    2348:	b6 01       	movw	r22, r12
    234a:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <atoi>
    234e:	8c 01       	movw	r16, r24
	float divisor=1;
    2350:	0f 2e       	mov	r0, r31
    2352:	c1 2c       	mov	r12, r1
    2354:	d1 2c       	mov	r13, r1
    2356:	f0 e8       	ldi	r31, 0x80	; 128
    2358:	ef 2e       	mov	r14, r31
    235a:	ff e3       	ldi	r31, 0x3F	; 63
    235c:	ff 2e       	mov	r15, r31
    235e:	f0 2d       	mov	r31, r0
	
	while(len>0){
    2360:	0b c0       	rjmp	.+22     	; 0x2378 <get_decimal+0x84>
		divisor*=10;
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e2       	ldi	r20, 0x20	; 32
    2368:	51 e4       	ldi	r21, 0x41	; 65
    236a:	c7 01       	movw	r24, r14
    236c:	b6 01       	movw	r22, r12
    236e:	0e 94 66 20 	call	0x40cc	; 0x40cc <__mulsf3>
    2372:	6b 01       	movw	r12, r22
    2374:	7c 01       	movw	r14, r24
		len--;
    2376:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    2378:	c1 11       	cpse	r28, r1
    237a:	f3 cf       	rjmp	.-26     	; 0x2362 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    237c:	b8 01       	movw	r22, r16
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 94 25 14 	call	0x284a	; 0x284a <__floatunsisf>
    2386:	a7 01       	movw	r20, r14
    2388:	96 01       	movw	r18, r12
    238a:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__divsf3>
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    2390:	60 e0       	ldi	r22, 0x00	; 0
    2392:	70 e0       	ldi	r23, 0x00	; 0
    2394:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	ff 90       	pop	r15
    23a0:	ef 90       	pop	r14
    23a2:	df 90       	pop	r13
    23a4:	cf 90       	pop	r12
    23a6:	08 95       	ret

Disassembly of section .text.str2flaot:

000030dc <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    30dc:	cf 92       	push	r12
    30de:	df 92       	push	r13
    30e0:	ef 92       	push	r14
    30e2:	ff 92       	push	r15
    30e4:	0f 93       	push	r16
    30e6:	1f 93       	push	r17
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    30ee:	bc 01       	movw	r22, r24
    30f0:	80 e8       	ldi	r24, 0x80	; 128
    30f2:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <atoi>
    30f6:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    30f8:	c8 01       	movw	r24, r16
    30fa:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <get_decimal>
    30fe:	6b 01       	movw	r12, r22
    3100:	7c 01       	movw	r14, r24
	return intVal+deci;
    3102:	be 01       	movw	r22, r28
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	0e 94 25 14 	call	0x284a	; 0x284a <__floatunsisf>
    310c:	9b 01       	movw	r18, r22
    310e:	ac 01       	movw	r20, r24
    3110:	c7 01       	movw	r24, r14
    3112:	b6 01       	movw	r22, r12
    3114:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__addsf3>
	
	
}
    3118:	df 91       	pop	r29
    311a:	cf 91       	pop	r28
    311c:	1f 91       	pop	r17
    311e:	0f 91       	pop	r16
    3120:	ff 90       	pop	r15
    3122:	ef 90       	pop	r14
    3124:	df 90       	pop	r13
    3126:	cf 90       	pop	r12
    3128:	08 95       	ret

Disassembly of section .text.is_float:

00002df4 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    2df4:	ef 92       	push	r14
    2df6:	ff 92       	push	r15
    2df8:	0f 93       	push	r16
    2dfa:	1f 93       	push	r17
    2dfc:	cf 93       	push	r28
    2dfe:	df 93       	push	r29
    2e00:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2e02:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    2e04:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    2e06:	0d c0       	rjmp	.+26     	; 0x2e22 <is_float+0x2e>
	{
		if(str[i]=='.'){
    2e08:	ce 0d       	add	r28, r14
    2e0a:	df 1d       	adc	r29, r15
    2e0c:	88 81       	ld	r24, Y
    2e0e:	8e 32       	cpi	r24, 0x2E	; 46
    2e10:	21 f4       	brne	.+8      	; 0x2e1a <is_float+0x26>
			if (got_dot)
    2e12:	01 11       	cpse	r16, r1
    2e14:	11 c0       	rjmp	.+34     	; 0x2e38 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    2e16:	01 e0       	ldi	r16, 0x01	; 1
    2e18:	03 c0       	rjmp	.+6      	; 0x2e20 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2e1a:	80 53       	subi	r24, 0x30	; 48
    2e1c:	8a 30       	cpi	r24, 0x0A	; 10
    2e1e:	70 f4       	brcc	.+28     	; 0x2e3c <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2e20:	1f 5f       	subi	r17, 0xFF	; 255
    2e22:	c1 2f       	mov	r28, r17
    2e24:	d0 e0       	ldi	r29, 0x00	; 0
    2e26:	b7 01       	movw	r22, r14
    2e28:	80 e8       	ldi	r24, 0x80	; 128
    2e2a:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <strlen>
    2e2e:	c8 17       	cp	r28, r24
    2e30:	d9 07       	cpc	r29, r25
    2e32:	50 f3       	brcs	.-44     	; 0x2e08 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	03 c0       	rjmp	.+6      	; 0x2e3e <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	01 c0       	rjmp	.+2      	; 0x2e3e <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	1f 91       	pop	r17
    2e44:	0f 91       	pop	r16
    2e46:	ff 90       	pop	r15
    2e48:	ef 90       	pop	r14
    2e4a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003fb6 <__subsf3>:
    3fb6:	50 58       	subi	r21, 0x80	; 128

00003fb8 <__addsf3>:
    3fb8:	bb 27       	eor	r27, r27
    3fba:	aa 27       	eor	r26, r26
    3fbc:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3x>
    3fc0:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000020ae <__addsf3x>:
    20ae:	11 c0       	rjmp	.+34     	; 0x20d2 <__addsf3x+0x24>
    20b0:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__fp_pscA>
    20b4:	38 f0       	brcs	.+14     	; 0x20c4 <__addsf3x+0x16>
    20b6:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__fp_pscB>
    20ba:	20 f0       	brcs	.+8      	; 0x20c4 <__addsf3x+0x16>
    20bc:	39 f4       	brne	.+14     	; 0x20cc <__addsf3x+0x1e>
    20be:	9f 3f       	cpi	r25, 0xFF	; 255
    20c0:	19 f4       	brne	.+6      	; 0x20c8 <__addsf3x+0x1a>
    20c2:	26 f4       	brtc	.+8      	; 0x20cc <__addsf3x+0x1e>
    20c4:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__fp_nan>
    20c8:	0e f4       	brtc	.+2      	; 0x20cc <__addsf3x+0x1e>
    20ca:	e0 95       	com	r30
    20cc:	e7 fb       	bst	r30, 7
    20ce:	0c 94 30 20 	jmp	0x4060	; 0x4060 <__fp_inf>
    20d2:	e9 2f       	mov	r30, r25
    20d4:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__fp_split3>
    20d8:	58 f3       	brcs	.-42     	; 0x20b0 <__addsf3x+0x2>
    20da:	ba 17       	cp	r27, r26
    20dc:	62 07       	cpc	r22, r18
    20de:	73 07       	cpc	r23, r19
    20e0:	84 07       	cpc	r24, r20
    20e2:	95 07       	cpc	r25, r21
    20e4:	20 f0       	brcs	.+8      	; 0x20ee <__addsf3x+0x40>
    20e6:	79 f4       	brne	.+30     	; 0x2106 <__addsf3x+0x58>
    20e8:	a6 f5       	brtc	.+104    	; 0x2152 <__addsf3x+0xa4>
    20ea:	0c 94 f0 1f 	jmp	0x3fe0	; 0x3fe0 <__fp_zero>
    20ee:	0e f4       	brtc	.+2      	; 0x20f2 <__addsf3x+0x44>
    20f0:	e0 95       	com	r30
    20f2:	0b 2e       	mov	r0, r27
    20f4:	ba 2f       	mov	r27, r26
    20f6:	a0 2d       	mov	r26, r0
    20f8:	0b 01       	movw	r0, r22
    20fa:	b9 01       	movw	r22, r18
    20fc:	90 01       	movw	r18, r0
    20fe:	0c 01       	movw	r0, r24
    2100:	ca 01       	movw	r24, r20
    2102:	a0 01       	movw	r20, r0
    2104:	11 24       	eor	r1, r1
    2106:	ff 27       	eor	r31, r31
    2108:	59 1b       	sub	r21, r25
    210a:	99 f0       	breq	.+38     	; 0x2132 <__addsf3x+0x84>
    210c:	59 3f       	cpi	r21, 0xF9	; 249
    210e:	50 f4       	brcc	.+20     	; 0x2124 <__addsf3x+0x76>
    2110:	50 3e       	cpi	r21, 0xE0	; 224
    2112:	68 f1       	brcs	.+90     	; 0x216e <__addsf3x+0xc0>
    2114:	1a 16       	cp	r1, r26
    2116:	f0 40       	sbci	r31, 0x00	; 0
    2118:	a2 2f       	mov	r26, r18
    211a:	23 2f       	mov	r18, r19
    211c:	34 2f       	mov	r19, r20
    211e:	44 27       	eor	r20, r20
    2120:	58 5f       	subi	r21, 0xF8	; 248
    2122:	f3 cf       	rjmp	.-26     	; 0x210a <__addsf3x+0x5c>
    2124:	46 95       	lsr	r20
    2126:	37 95       	ror	r19
    2128:	27 95       	ror	r18
    212a:	a7 95       	ror	r26
    212c:	f0 40       	sbci	r31, 0x00	; 0
    212e:	53 95       	inc	r21
    2130:	c9 f7       	brne	.-14     	; 0x2124 <__addsf3x+0x76>
    2132:	7e f4       	brtc	.+30     	; 0x2152 <__addsf3x+0xa4>
    2134:	1f 16       	cp	r1, r31
    2136:	ba 0b       	sbc	r27, r26
    2138:	62 0b       	sbc	r22, r18
    213a:	73 0b       	sbc	r23, r19
    213c:	84 0b       	sbc	r24, r20
    213e:	ba f0       	brmi	.+46     	; 0x216e <__addsf3x+0xc0>
    2140:	91 50       	subi	r25, 0x01	; 1
    2142:	a1 f0       	breq	.+40     	; 0x216c <__addsf3x+0xbe>
    2144:	ff 0f       	add	r31, r31
    2146:	bb 1f       	adc	r27, r27
    2148:	66 1f       	adc	r22, r22
    214a:	77 1f       	adc	r23, r23
    214c:	88 1f       	adc	r24, r24
    214e:	c2 f7       	brpl	.-16     	; 0x2140 <__addsf3x+0x92>
    2150:	0e c0       	rjmp	.+28     	; 0x216e <__addsf3x+0xc0>
    2152:	ba 0f       	add	r27, r26
    2154:	62 1f       	adc	r22, r18
    2156:	73 1f       	adc	r23, r19
    2158:	84 1f       	adc	r24, r20
    215a:	48 f4       	brcc	.+18     	; 0x216e <__addsf3x+0xc0>
    215c:	87 95       	ror	r24
    215e:	77 95       	ror	r23
    2160:	67 95       	ror	r22
    2162:	b7 95       	ror	r27
    2164:	f7 95       	ror	r31
    2166:	9e 3f       	cpi	r25, 0xFE	; 254
    2168:	08 f0       	brcs	.+2      	; 0x216c <__addsf3x+0xbe>
    216a:	b0 cf       	rjmp	.-160    	; 0x20cc <__addsf3x+0x1e>
    216c:	93 95       	inc	r25
    216e:	88 0f       	add	r24, r24
    2170:	08 f0       	brcs	.+2      	; 0x2174 <__addsf3x+0xc6>
    2172:	99 27       	eor	r25, r25
    2174:	ee 0f       	add	r30, r30
    2176:	97 95       	ror	r25
    2178:	87 95       	ror	r24
    217a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040c4 <__divsf3>:
    40c4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__divsf3x>
    40c8:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001efc <__divsf3x>:
    1efc:	10 c0       	rjmp	.+32     	; 0x1f1e <__divsf3x+0x22>
    1efe:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__fp_pscB>
    1f02:	58 f0       	brcs	.+22     	; 0x1f1a <__divsf3x+0x1e>
    1f04:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__fp_pscA>
    1f08:	40 f0       	brcs	.+16     	; 0x1f1a <__divsf3x+0x1e>
    1f0a:	29 f4       	brne	.+10     	; 0x1f16 <__divsf3x+0x1a>
    1f0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f0e:	29 f0       	breq	.+10     	; 0x1f1a <__divsf3x+0x1e>
    1f10:	0c 94 30 20 	jmp	0x4060	; 0x4060 <__fp_inf>
    1f14:	51 11       	cpse	r21, r1
    1f16:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <__fp_szero>
    1f1a:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__fp_nan>
    1f1e:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__fp_split3>
    1f22:	68 f3       	brcs	.-38     	; 0x1efe <__divsf3x+0x2>

00001f24 <__divsf3_pse>:
    1f24:	99 23       	and	r25, r25
    1f26:	b1 f3       	breq	.-20     	; 0x1f14 <__divsf3x+0x18>
    1f28:	55 23       	and	r21, r21
    1f2a:	91 f3       	breq	.-28     	; 0x1f10 <__divsf3x+0x14>
    1f2c:	95 1b       	sub	r25, r21
    1f2e:	55 0b       	sbc	r21, r21
    1f30:	bb 27       	eor	r27, r27
    1f32:	aa 27       	eor	r26, r26
    1f34:	62 17       	cp	r22, r18
    1f36:	73 07       	cpc	r23, r19
    1f38:	84 07       	cpc	r24, r20
    1f3a:	38 f0       	brcs	.+14     	; 0x1f4a <__divsf3_pse+0x26>
    1f3c:	9f 5f       	subi	r25, 0xFF	; 255
    1f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	44 1f       	adc	r20, r20
    1f46:	aa 1f       	adc	r26, r26
    1f48:	a9 f3       	breq	.-22     	; 0x1f34 <__divsf3_pse+0x10>
    1f4a:	35 d0       	rcall	.+106    	; 0x1fb6 <__divsf3_pse+0x92>
    1f4c:	0e 2e       	mov	r0, r30
    1f4e:	3a f0       	brmi	.+14     	; 0x1f5e <__divsf3_pse+0x3a>
    1f50:	e0 e8       	ldi	r30, 0x80	; 128
    1f52:	32 d0       	rcall	.+100    	; 0x1fb8 <__divsf3_pse+0x94>
    1f54:	91 50       	subi	r25, 0x01	; 1
    1f56:	50 40       	sbci	r21, 0x00	; 0
    1f58:	e6 95       	lsr	r30
    1f5a:	00 1c       	adc	r0, r0
    1f5c:	ca f7       	brpl	.-14     	; 0x1f50 <__divsf3_pse+0x2c>
    1f5e:	2b d0       	rcall	.+86     	; 0x1fb6 <__divsf3_pse+0x92>
    1f60:	fe 2f       	mov	r31, r30
    1f62:	29 d0       	rcall	.+82     	; 0x1fb6 <__divsf3_pse+0x92>
    1f64:	66 0f       	add	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	bb 1f       	adc	r27, r27
    1f6c:	26 17       	cp	r18, r22
    1f6e:	37 07       	cpc	r19, r23
    1f70:	48 07       	cpc	r20, r24
    1f72:	ab 07       	cpc	r26, r27
    1f74:	b0 e8       	ldi	r27, 0x80	; 128
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <__divsf3_pse+0x56>
    1f78:	bb 0b       	sbc	r27, r27
    1f7a:	80 2d       	mov	r24, r0
    1f7c:	bf 01       	movw	r22, r30
    1f7e:	ff 27       	eor	r31, r31
    1f80:	93 58       	subi	r25, 0x83	; 131
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	3a f0       	brmi	.+14     	; 0x1f94 <__divsf3_pse+0x70>
    1f86:	9e 3f       	cpi	r25, 0xFE	; 254
    1f88:	51 05       	cpc	r21, r1
    1f8a:	78 f0       	brcs	.+30     	; 0x1faa <__divsf3_pse+0x86>
    1f8c:	0c 94 30 20 	jmp	0x4060	; 0x4060 <__fp_inf>
    1f90:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <__fp_szero>
    1f94:	5f 3f       	cpi	r21, 0xFF	; 255
    1f96:	e4 f3       	brlt	.-8      	; 0x1f90 <__divsf3_pse+0x6c>
    1f98:	98 3e       	cpi	r25, 0xE8	; 232
    1f9a:	d4 f3       	brlt	.-12     	; 0x1f90 <__divsf3_pse+0x6c>
    1f9c:	86 95       	lsr	r24
    1f9e:	77 95       	ror	r23
    1fa0:	67 95       	ror	r22
    1fa2:	b7 95       	ror	r27
    1fa4:	f7 95       	ror	r31
    1fa6:	9f 5f       	subi	r25, 0xFF	; 255
    1fa8:	c9 f7       	brne	.-14     	; 0x1f9c <__divsf3_pse+0x78>
    1faa:	88 0f       	add	r24, r24
    1fac:	91 1d       	adc	r25, r1
    1fae:	96 95       	lsr	r25
    1fb0:	87 95       	ror	r24
    1fb2:	97 f9       	bld	r25, 7
    1fb4:	08 95       	ret
    1fb6:	e1 e0       	ldi	r30, 0x01	; 1
    1fb8:	66 0f       	add	r22, r22
    1fba:	77 1f       	adc	r23, r23
    1fbc:	88 1f       	adc	r24, r24
    1fbe:	bb 1f       	adc	r27, r27
    1fc0:	62 17       	cp	r22, r18
    1fc2:	73 07       	cpc	r23, r19
    1fc4:	84 07       	cpc	r24, r20
    1fc6:	ba 07       	cpc	r27, r26
    1fc8:	20 f0       	brcs	.+8      	; 0x1fd2 <__divsf3_pse+0xae>
    1fca:	62 1b       	sub	r22, r18
    1fcc:	73 0b       	sbc	r23, r19
    1fce:	84 0b       	sbc	r24, r20
    1fd0:	ba 0b       	sbc	r27, r26
    1fd2:	ee 1f       	adc	r30, r30
    1fd4:	88 f7       	brcc	.-30     	; 0x1fb8 <__divsf3_pse+0x94>
    1fd6:	e0 95       	com	r30
    1fd8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d3c <__fixunssfsi>:
    2d3c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fp_splitA>
    2d40:	88 f0       	brcs	.+34     	; 0x2d64 <__fixunssfsi+0x28>
    2d42:	9f 57       	subi	r25, 0x7F	; 127
    2d44:	98 f0       	brcs	.+38     	; 0x2d6c <__fixunssfsi+0x30>
    2d46:	b9 2f       	mov	r27, r25
    2d48:	99 27       	eor	r25, r25
    2d4a:	b7 51       	subi	r27, 0x17	; 23
    2d4c:	b0 f0       	brcs	.+44     	; 0x2d7a <__fixunssfsi+0x3e>
    2d4e:	e1 f0       	breq	.+56     	; 0x2d88 <__fixunssfsi+0x4c>
    2d50:	66 0f       	add	r22, r22
    2d52:	77 1f       	adc	r23, r23
    2d54:	88 1f       	adc	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	1a f0       	brmi	.+6      	; 0x2d60 <__fixunssfsi+0x24>
    2d5a:	ba 95       	dec	r27
    2d5c:	c9 f7       	brne	.-14     	; 0x2d50 <__fixunssfsi+0x14>
    2d5e:	14 c0       	rjmp	.+40     	; 0x2d88 <__fixunssfsi+0x4c>
    2d60:	b1 30       	cpi	r27, 0x01	; 1
    2d62:	91 f0       	breq	.+36     	; 0x2d88 <__fixunssfsi+0x4c>
    2d64:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__fp_zero>
    2d68:	b1 e0       	ldi	r27, 0x01	; 1
    2d6a:	08 95       	ret
    2d6c:	0c 94 f0 1f 	jmp	0x3fe0	; 0x3fe0 <__fp_zero>
    2d70:	67 2f       	mov	r22, r23
    2d72:	78 2f       	mov	r23, r24
    2d74:	88 27       	eor	r24, r24
    2d76:	b8 5f       	subi	r27, 0xF8	; 248
    2d78:	39 f0       	breq	.+14     	; 0x2d88 <__fixunssfsi+0x4c>
    2d7a:	b9 3f       	cpi	r27, 0xF9	; 249
    2d7c:	cc f3       	brlt	.-14     	; 0x2d70 <__fixunssfsi+0x34>
    2d7e:	86 95       	lsr	r24
    2d80:	77 95       	ror	r23
    2d82:	67 95       	ror	r22
    2d84:	b3 95       	inc	r27
    2d86:	d9 f7       	brne	.-10     	; 0x2d7e <__fixunssfsi+0x42>
    2d88:	3e f4       	brtc	.+14     	; 0x2d98 <__fixunssfsi+0x5c>
    2d8a:	90 95       	com	r25
    2d8c:	80 95       	com	r24
    2d8e:	70 95       	com	r23
    2d90:	61 95       	neg	r22
    2d92:	7f 4f       	sbci	r23, 0xFF	; 255
    2d94:	8f 4f       	sbci	r24, 0xFF	; 255
    2d96:	9f 4f       	sbci	r25, 0xFF	; 255
    2d98:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000284a <__floatunsisf>:
    284a:	e8 94       	clt
    284c:	09 c0       	rjmp	.+18     	; 0x2860 <__floatsisf+0x12>

0000284e <__floatsisf>:
    284e:	97 fb       	bst	r25, 7
    2850:	3e f4       	brtc	.+14     	; 0x2860 <__floatsisf+0x12>
    2852:	90 95       	com	r25
    2854:	80 95       	com	r24
    2856:	70 95       	com	r23
    2858:	61 95       	neg	r22
    285a:	7f 4f       	sbci	r23, 0xFF	; 255
    285c:	8f 4f       	sbci	r24, 0xFF	; 255
    285e:	9f 4f       	sbci	r25, 0xFF	; 255
    2860:	99 23       	and	r25, r25
    2862:	a9 f0       	breq	.+42     	; 0x288e <__floatsisf+0x40>
    2864:	f9 2f       	mov	r31, r25
    2866:	96 e9       	ldi	r25, 0x96	; 150
    2868:	bb 27       	eor	r27, r27
    286a:	93 95       	inc	r25
    286c:	f6 95       	lsr	r31
    286e:	87 95       	ror	r24
    2870:	77 95       	ror	r23
    2872:	67 95       	ror	r22
    2874:	b7 95       	ror	r27
    2876:	f1 11       	cpse	r31, r1
    2878:	f8 cf       	rjmp	.-16     	; 0x286a <__floatsisf+0x1c>
    287a:	fa f4       	brpl	.+62     	; 0x28ba <__floatsisf+0x6c>
    287c:	bb 0f       	add	r27, r27
    287e:	11 f4       	brne	.+4      	; 0x2884 <__floatsisf+0x36>
    2880:	60 ff       	sbrs	r22, 0
    2882:	1b c0       	rjmp	.+54     	; 0x28ba <__floatsisf+0x6c>
    2884:	6f 5f       	subi	r22, 0xFF	; 255
    2886:	7f 4f       	sbci	r23, 0xFF	; 255
    2888:	8f 4f       	sbci	r24, 0xFF	; 255
    288a:	9f 4f       	sbci	r25, 0xFF	; 255
    288c:	16 c0       	rjmp	.+44     	; 0x28ba <__floatsisf+0x6c>
    288e:	88 23       	and	r24, r24
    2890:	11 f0       	breq	.+4      	; 0x2896 <__floatsisf+0x48>
    2892:	96 e9       	ldi	r25, 0x96	; 150
    2894:	11 c0       	rjmp	.+34     	; 0x28b8 <__floatsisf+0x6a>
    2896:	77 23       	and	r23, r23
    2898:	21 f0       	breq	.+8      	; 0x28a2 <__floatsisf+0x54>
    289a:	9e e8       	ldi	r25, 0x8E	; 142
    289c:	87 2f       	mov	r24, r23
    289e:	76 2f       	mov	r23, r22
    28a0:	05 c0       	rjmp	.+10     	; 0x28ac <__floatsisf+0x5e>
    28a2:	66 23       	and	r22, r22
    28a4:	71 f0       	breq	.+28     	; 0x28c2 <__floatsisf+0x74>
    28a6:	96 e8       	ldi	r25, 0x86	; 134
    28a8:	86 2f       	mov	r24, r22
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	2a f0       	brmi	.+10     	; 0x28ba <__floatsisf+0x6c>
    28b0:	9a 95       	dec	r25
    28b2:	66 0f       	add	r22, r22
    28b4:	77 1f       	adc	r23, r23
    28b6:	88 1f       	adc	r24, r24
    28b8:	da f7       	brpl	.-10     	; 0x28b0 <__floatsisf+0x62>
    28ba:	88 0f       	add	r24, r24
    28bc:	96 95       	lsr	r25
    28be:	87 95       	ror	r24
    28c0:	97 f9       	bld	r25, 7
    28c2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004060 <__fp_inf>:
    4060:	97 f9       	bld	r25, 7
    4062:	9f 67       	ori	r25, 0x7F	; 127
    4064:	80 e8       	ldi	r24, 0x80	; 128
    4066:	70 e0       	ldi	r23, 0x00	; 0
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040ee <__fp_nan>:
    40ee:	9f ef       	ldi	r25, 0xFF	; 255
    40f0:	80 ec       	ldi	r24, 0xC0	; 192
    40f2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003fc4 <__fp_pscA>:
    3fc4:	00 24       	eor	r0, r0
    3fc6:	0a 94       	dec	r0
    3fc8:	16 16       	cp	r1, r22
    3fca:	17 06       	cpc	r1, r23
    3fcc:	18 06       	cpc	r1, r24
    3fce:	09 06       	cpc	r0, r25
    3fd0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003fd2 <__fp_pscB>:
    3fd2:	00 24       	eor	r0, r0
    3fd4:	0a 94       	dec	r0
    3fd6:	12 16       	cp	r1, r18
    3fd8:	13 06       	cpc	r1, r19
    3fda:	14 06       	cpc	r1, r20
    3fdc:	05 06       	cpc	r0, r21
    3fde:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003c30 <__fp_round>:
    3c30:	09 2e       	mov	r0, r25
    3c32:	03 94       	inc	r0
    3c34:	00 0c       	add	r0, r0
    3c36:	11 f4       	brne	.+4      	; 0x3c3c <__fp_round+0xc>
    3c38:	88 23       	and	r24, r24
    3c3a:	52 f0       	brmi	.+20     	; 0x3c50 <__fp_round+0x20>
    3c3c:	bb 0f       	add	r27, r27
    3c3e:	40 f4       	brcc	.+16     	; 0x3c50 <__fp_round+0x20>
    3c40:	bf 2b       	or	r27, r31
    3c42:	11 f4       	brne	.+4      	; 0x3c48 <__fp_round+0x18>
    3c44:	60 ff       	sbrs	r22, 0
    3c46:	04 c0       	rjmp	.+8      	; 0x3c50 <__fp_round+0x20>
    3c48:	6f 5f       	subi	r22, 0xFF	; 255
    3c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c50:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000034ea <__fp_split3>:
    34ea:	57 fd       	sbrc	r21, 7
    34ec:	90 58       	subi	r25, 0x80	; 128
    34ee:	44 0f       	add	r20, r20
    34f0:	55 1f       	adc	r21, r21
    34f2:	59 f0       	breq	.+22     	; 0x350a <__fp_splitA+0x10>
    34f4:	5f 3f       	cpi	r21, 0xFF	; 255
    34f6:	71 f0       	breq	.+28     	; 0x3514 <__fp_splitA+0x1a>
    34f8:	47 95       	ror	r20

000034fa <__fp_splitA>:
    34fa:	88 0f       	add	r24, r24
    34fc:	97 fb       	bst	r25, 7
    34fe:	99 1f       	adc	r25, r25
    3500:	61 f0       	breq	.+24     	; 0x351a <__fp_splitA+0x20>
    3502:	9f 3f       	cpi	r25, 0xFF	; 255
    3504:	79 f0       	breq	.+30     	; 0x3524 <__fp_splitA+0x2a>
    3506:	87 95       	ror	r24
    3508:	08 95       	ret
    350a:	12 16       	cp	r1, r18
    350c:	13 06       	cpc	r1, r19
    350e:	14 06       	cpc	r1, r20
    3510:	55 1f       	adc	r21, r21
    3512:	f2 cf       	rjmp	.-28     	; 0x34f8 <__fp_split3+0xe>
    3514:	46 95       	lsr	r20
    3516:	f1 df       	rcall	.-30     	; 0x34fa <__fp_splitA>
    3518:	08 c0       	rjmp	.+16     	; 0x352a <__fp_splitA+0x30>
    351a:	16 16       	cp	r1, r22
    351c:	17 06       	cpc	r1, r23
    351e:	18 06       	cpc	r1, r24
    3520:	99 1f       	adc	r25, r25
    3522:	f1 cf       	rjmp	.-30     	; 0x3506 <__fp_splitA+0xc>
    3524:	86 95       	lsr	r24
    3526:	71 05       	cpc	r23, r1
    3528:	61 05       	cpc	r22, r1
    352a:	08 94       	sec
    352c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003fe0 <__fp_zero>:
    3fe0:	e8 94       	clt

00003fe2 <__fp_szero>:
    3fe2:	bb 27       	eor	r27, r27
    3fe4:	66 27       	eor	r22, r22
    3fe6:	77 27       	eor	r23, r23
    3fe8:	cb 01       	movw	r24, r22
    3fea:	97 f9       	bld	r25, 7
    3fec:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040cc <__mulsf3>:
    40cc:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__mulsf3x>
    40d0:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001fda <__mulsf3x>:
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <__mulsf3x+0x20>
    1fdc:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__fp_pscA>
    1fe0:	38 f0       	brcs	.+14     	; 0x1ff0 <__mulsf3x+0x16>
    1fe2:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__fp_pscB>
    1fe6:	20 f0       	brcs	.+8      	; 0x1ff0 <__mulsf3x+0x16>
    1fe8:	95 23       	and	r25, r21
    1fea:	11 f0       	breq	.+4      	; 0x1ff0 <__mulsf3x+0x16>
    1fec:	0c 94 30 20 	jmp	0x4060	; 0x4060 <__fp_inf>
    1ff0:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__fp_nan>
    1ff4:	11 24       	eor	r1, r1
    1ff6:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <__fp_szero>
    1ffa:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__fp_split3>
    1ffe:	70 f3       	brcs	.-36     	; 0x1fdc <__mulsf3x+0x2>

00002000 <__mulsf3_pse>:
    2000:	95 9f       	mul	r25, r21
    2002:	c1 f3       	breq	.-16     	; 0x1ff4 <__mulsf3x+0x1a>
    2004:	95 0f       	add	r25, r21
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	55 1f       	adc	r21, r21
    200a:	62 9f       	mul	r22, r18
    200c:	f0 01       	movw	r30, r0
    200e:	72 9f       	mul	r23, r18
    2010:	bb 27       	eor	r27, r27
    2012:	f0 0d       	add	r31, r0
    2014:	b1 1d       	adc	r27, r1
    2016:	63 9f       	mul	r22, r19
    2018:	aa 27       	eor	r26, r26
    201a:	f0 0d       	add	r31, r0
    201c:	b1 1d       	adc	r27, r1
    201e:	aa 1f       	adc	r26, r26
    2020:	64 9f       	mul	r22, r20
    2022:	66 27       	eor	r22, r22
    2024:	b0 0d       	add	r27, r0
    2026:	a1 1d       	adc	r26, r1
    2028:	66 1f       	adc	r22, r22
    202a:	82 9f       	mul	r24, r18
    202c:	22 27       	eor	r18, r18
    202e:	b0 0d       	add	r27, r0
    2030:	a1 1d       	adc	r26, r1
    2032:	62 1f       	adc	r22, r18
    2034:	73 9f       	mul	r23, r19
    2036:	b0 0d       	add	r27, r0
    2038:	a1 1d       	adc	r26, r1
    203a:	62 1f       	adc	r22, r18
    203c:	83 9f       	mul	r24, r19
    203e:	a0 0d       	add	r26, r0
    2040:	61 1d       	adc	r22, r1
    2042:	22 1f       	adc	r18, r18
    2044:	74 9f       	mul	r23, r20
    2046:	33 27       	eor	r19, r19
    2048:	a0 0d       	add	r26, r0
    204a:	61 1d       	adc	r22, r1
    204c:	23 1f       	adc	r18, r19
    204e:	84 9f       	mul	r24, r20
    2050:	60 0d       	add	r22, r0
    2052:	21 1d       	adc	r18, r1
    2054:	82 2f       	mov	r24, r18
    2056:	76 2f       	mov	r23, r22
    2058:	6a 2f       	mov	r22, r26
    205a:	11 24       	eor	r1, r1
    205c:	9f 57       	subi	r25, 0x7F	; 127
    205e:	50 40       	sbci	r21, 0x00	; 0
    2060:	9a f0       	brmi	.+38     	; 0x2088 <__mulsf3_pse+0x88>
    2062:	f1 f0       	breq	.+60     	; 0x20a0 <__mulsf3_pse+0xa0>
    2064:	88 23       	and	r24, r24
    2066:	4a f0       	brmi	.+18     	; 0x207a <__mulsf3_pse+0x7a>
    2068:	ee 0f       	add	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	bb 1f       	adc	r27, r27
    206e:	66 1f       	adc	r22, r22
    2070:	77 1f       	adc	r23, r23
    2072:	88 1f       	adc	r24, r24
    2074:	91 50       	subi	r25, 0x01	; 1
    2076:	50 40       	sbci	r21, 0x00	; 0
    2078:	a9 f7       	brne	.-22     	; 0x2064 <__mulsf3_pse+0x64>
    207a:	9e 3f       	cpi	r25, 0xFE	; 254
    207c:	51 05       	cpc	r21, r1
    207e:	80 f0       	brcs	.+32     	; 0x20a0 <__mulsf3_pse+0xa0>
    2080:	0c 94 30 20 	jmp	0x4060	; 0x4060 <__fp_inf>
    2084:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <__fp_szero>
    2088:	5f 3f       	cpi	r21, 0xFF	; 255
    208a:	e4 f3       	brlt	.-8      	; 0x2084 <__mulsf3_pse+0x84>
    208c:	98 3e       	cpi	r25, 0xE8	; 232
    208e:	d4 f3       	brlt	.-12     	; 0x2084 <__mulsf3_pse+0x84>
    2090:	86 95       	lsr	r24
    2092:	77 95       	ror	r23
    2094:	67 95       	ror	r22
    2096:	b7 95       	ror	r27
    2098:	f7 95       	ror	r31
    209a:	e7 95       	ror	r30
    209c:	9f 5f       	subi	r25, 0xFF	; 255
    209e:	c1 f7       	brne	.-16     	; 0x2090 <__mulsf3_pse+0x90>
    20a0:	fe 2b       	or	r31, r30
    20a2:	88 0f       	add	r24, r24
    20a4:	91 1d       	adc	r25, r1
    20a6:	96 95       	lsr	r25
    20a8:	87 95       	ror	r24
    20aa:	97 f9       	bld	r25, 7
    20ac:	08 95       	ret

Disassembly of section .text.avrlibc:

000005a2 <vfprintf>:
 5a2:	a4 e1       	ldi	r26, 0x14	; 20
 5a4:	b0 e0       	ldi	r27, 0x00	; 0
 5a6:	e7 ed       	ldi	r30, 0xD7	; 215
 5a8:	f2 e0       	ldi	r31, 0x02	; 2
 5aa:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__prologue_saves__>
 5ae:	6c 01       	movw	r12, r24
 5b0:	1a 01       	movw	r2, r20
 5b2:	46 2e       	mov	r4, r22
 5b4:	59 01       	movw	r10, r18
 5b6:	fc 01       	movw	r30, r24
 5b8:	10 86       	std	Z+8, r1	; 0x08
 5ba:	17 82       	std	Z+7, r1	; 0x07
 5bc:	84 81       	ldd	r24, Z+4	; 0x04
 5be:	81 ff       	sbrs	r24, 1
 5c0:	62 c3       	rjmp	.+1732   	; 0xc86 <__EEPROM_REGION_LENGTH__+0x486>
 5c2:	ce 01       	movw	r24, r28
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	9d 87       	std	Y+13, r25	; 0x0d
 5c8:	8c 87       	std	Y+12, r24	; 0x0c
 5ca:	a0 e8       	ldi	r26, 0x80	; 128
 5cc:	8a 8b       	std	Y+18, r24	; 0x12
 5ce:	9b 8b       	std	Y+19, r25	; 0x13
 5d0:	ac 8b       	std	Y+20, r26	; 0x14
 5d2:	f1 01       	movw	r30, r2
 5d4:	84 91       	lpm	r24, Z
 5d6:	47 fc       	sbrc	r4, 7
 5d8:	80 81       	ld	r24, Z
 5da:	88 23       	and	r24, r24
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <vfprintf+0x3e>
 5de:	4f c3       	rjmp	.+1694   	; 0xc7e <__EEPROM_REGION_LENGTH__+0x47e>
 5e0:	44 2d       	mov	r20, r4
 5e2:	91 01       	movw	r18, r2
 5e4:	2f 5f       	subi	r18, 0xFF	; 255
 5e6:	3f 4f       	sbci	r19, 0xFF	; 255
 5e8:	4f 4f       	sbci	r20, 0xFF	; 255
 5ea:	85 32       	cpi	r24, 0x25	; 37
 5ec:	19 f0       	breq	.+6      	; 0x5f4 <vfprintf+0x52>
 5ee:	19 01       	movw	r2, r18
 5f0:	44 2e       	mov	r4, r20
 5f2:	0a c0       	rjmp	.+20     	; 0x608 <vfprintf+0x66>
 5f4:	f9 01       	movw	r30, r18
 5f6:	84 91       	lpm	r24, Z
 5f8:	47 fd       	sbrc	r20, 7
 5fa:	80 81       	ld	r24, Z
 5fc:	92 e0       	ldi	r25, 0x02	; 2
 5fe:	29 0e       	add	r2, r25
 600:	31 1c       	adc	r3, r1
 602:	41 1c       	adc	r4, r1
 604:	85 32       	cpi	r24, 0x25	; 37
 606:	49 f4       	brne	.+18     	; 0x61a <vfprintf+0x78>
 608:	b6 01       	movw	r22, r12
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 610:	bf 86       	std	Y+15, r11	; 0x0f
 612:	ae 86       	std	Y+14, r10	; 0x0e
 614:	ae 84       	ldd	r10, Y+14	; 0x0e
 616:	bf 84       	ldd	r11, Y+15	; 0x0f
 618:	dc cf       	rjmp	.-72     	; 0x5d2 <vfprintf+0x30>
 61a:	10 e0       	ldi	r17, 0x00	; 0
 61c:	f1 2c       	mov	r15, r1
 61e:	00 e0       	ldi	r16, 0x00	; 0
 620:	00 32       	cpi	r16, 0x20	; 32
 622:	a0 f4       	brcc	.+40     	; 0x64c <vfprintf+0xaa>
 624:	8b 32       	cpi	r24, 0x2B	; 43
 626:	69 f0       	breq	.+26     	; 0x642 <vfprintf+0xa0>
 628:	30 f4       	brcc	.+12     	; 0x636 <vfprintf+0x94>
 62a:	80 32       	cpi	r24, 0x20	; 32
 62c:	59 f0       	breq	.+22     	; 0x644 <vfprintf+0xa2>
 62e:	83 32       	cpi	r24, 0x23	; 35
 630:	69 f4       	brne	.+26     	; 0x64c <vfprintf+0xaa>
 632:	00 61       	ori	r16, 0x10	; 16
 634:	2c c0       	rjmp	.+88     	; 0x68e <vfprintf+0xec>
 636:	8d 32       	cpi	r24, 0x2D	; 45
 638:	39 f0       	breq	.+14     	; 0x648 <vfprintf+0xa6>
 63a:	80 33       	cpi	r24, 0x30	; 48
 63c:	39 f4       	brne	.+14     	; 0x64c <vfprintf+0xaa>
 63e:	01 60       	ori	r16, 0x01	; 1
 640:	26 c0       	rjmp	.+76     	; 0x68e <vfprintf+0xec>
 642:	02 60       	ori	r16, 0x02	; 2
 644:	04 60       	ori	r16, 0x04	; 4
 646:	23 c0       	rjmp	.+70     	; 0x68e <vfprintf+0xec>
 648:	08 60       	ori	r16, 0x08	; 8
 64a:	21 c0       	rjmp	.+66     	; 0x68e <vfprintf+0xec>
 64c:	07 fd       	sbrc	r16, 7
 64e:	29 c0       	rjmp	.+82     	; 0x6a2 <vfprintf+0x100>
 650:	90 ed       	ldi	r25, 0xD0	; 208
 652:	98 0f       	add	r25, r24
 654:	9a 30       	cpi	r25, 0x0A	; 10
 656:	78 f4       	brcc	.+30     	; 0x676 <vfprintf+0xd4>
 658:	06 ff       	sbrs	r16, 6
 65a:	06 c0       	rjmp	.+12     	; 0x668 <vfprintf+0xc6>
 65c:	aa e0       	ldi	r26, 0x0A	; 10
 65e:	1a 9f       	mul	r17, r26
 660:	90 0d       	add	r25, r0
 662:	11 24       	eor	r1, r1
 664:	19 2f       	mov	r17, r25
 666:	13 c0       	rjmp	.+38     	; 0x68e <vfprintf+0xec>
 668:	ea e0       	ldi	r30, 0x0A	; 10
 66a:	fe 9e       	mul	r15, r30
 66c:	90 0d       	add	r25, r0
 66e:	11 24       	eor	r1, r1
 670:	f9 2e       	mov	r15, r25
 672:	00 62       	ori	r16, 0x20	; 32
 674:	0c c0       	rjmp	.+24     	; 0x68e <vfprintf+0xec>
 676:	8e 32       	cpi	r24, 0x2E	; 46
 678:	21 f4       	brne	.+8      	; 0x682 <vfprintf+0xe0>
 67a:	06 fd       	sbrc	r16, 6
 67c:	00 c3       	rjmp	.+1536   	; 0xc7e <__EEPROM_REGION_LENGTH__+0x47e>
 67e:	00 64       	ori	r16, 0x40	; 64
 680:	06 c0       	rjmp	.+12     	; 0x68e <vfprintf+0xec>
 682:	8c 36       	cpi	r24, 0x6C	; 108
 684:	11 f4       	brne	.+4      	; 0x68a <vfprintf+0xe8>
 686:	00 68       	ori	r16, 0x80	; 128
 688:	02 c0       	rjmp	.+4      	; 0x68e <vfprintf+0xec>
 68a:	88 36       	cpi	r24, 0x68	; 104
 68c:	51 f4       	brne	.+20     	; 0x6a2 <vfprintf+0x100>
 68e:	f1 01       	movw	r30, r2
 690:	84 91       	lpm	r24, Z
 692:	47 fc       	sbrc	r4, 7
 694:	80 81       	ld	r24, Z
 696:	ff ef       	ldi	r31, 0xFF	; 255
 698:	2f 1a       	sub	r2, r31
 69a:	3f 0a       	sbc	r3, r31
 69c:	4f 0a       	sbc	r4, r31
 69e:	81 11       	cpse	r24, r1
 6a0:	bf cf       	rjmp	.-130    	; 0x620 <vfprintf+0x7e>
 6a2:	9b eb       	ldi	r25, 0xBB	; 187
 6a4:	98 0f       	add	r25, r24
 6a6:	93 30       	cpi	r25, 0x03	; 3
 6a8:	18 f4       	brcc	.+6      	; 0x6b0 <vfprintf+0x10e>
 6aa:	00 61       	ori	r16, 0x10	; 16
 6ac:	80 5e       	subi	r24, 0xE0	; 224
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <vfprintf+0x11a>
 6b0:	9b e9       	ldi	r25, 0x9B	; 155
 6b2:	98 0f       	add	r25, r24
 6b4:	93 30       	cpi	r25, 0x03	; 3
 6b6:	08 f0       	brcs	.+2      	; 0x6ba <vfprintf+0x118>
 6b8:	66 c1       	rjmp	.+716    	; 0x986 <__EEPROM_REGION_LENGTH__+0x186>
 6ba:	0f 7e       	andi	r16, 0xEF	; 239
 6bc:	06 ff       	sbrs	r16, 6
 6be:	16 e0       	ldi	r17, 0x06	; 6
 6c0:	0f 73       	andi	r16, 0x3F	; 63
 6c2:	70 2e       	mov	r7, r16
 6c4:	85 36       	cpi	r24, 0x65	; 101
 6c6:	21 f4       	brne	.+8      	; 0x6d0 <vfprintf+0x12e>
 6c8:	20 2f       	mov	r18, r16
 6ca:	20 64       	ori	r18, 0x40	; 64
 6cc:	72 2e       	mov	r7, r18
 6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <vfprintf+0x13e>
 6d0:	86 36       	cpi	r24, 0x66	; 102
 6d2:	21 f4       	brne	.+8      	; 0x6dc <vfprintf+0x13a>
 6d4:	80 2f       	mov	r24, r16
 6d6:	80 68       	ori	r24, 0x80	; 128
 6d8:	78 2e       	mov	r7, r24
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <vfprintf+0x13e>
 6dc:	11 11       	cpse	r17, r1
 6de:	11 50       	subi	r17, 0x01	; 1
 6e0:	77 fe       	sbrs	r7, 7
 6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <vfprintf+0x150>
 6e4:	1c 33       	cpi	r17, 0x3C	; 60
 6e6:	50 f4       	brcc	.+20     	; 0x6fc <vfprintf+0x15a>
 6e8:	ee 24       	eor	r14, r14
 6ea:	e3 94       	inc	r14
 6ec:	e1 0e       	add	r14, r17
 6ee:	27 e0       	ldi	r18, 0x07	; 7
 6f0:	0b c0       	rjmp	.+22     	; 0x708 <vfprintf+0x166>
 6f2:	18 30       	cpi	r17, 0x08	; 8
 6f4:	38 f0       	brcs	.+14     	; 0x704 <vfprintf+0x162>
 6f6:	27 e0       	ldi	r18, 0x07	; 7
 6f8:	17 e0       	ldi	r17, 0x07	; 7
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <vfprintf+0x164>
 6fc:	27 e0       	ldi	r18, 0x07	; 7
 6fe:	6c e3       	ldi	r22, 0x3C	; 60
 700:	e6 2e       	mov	r14, r22
 702:	02 c0       	rjmp	.+4      	; 0x708 <vfprintf+0x166>
 704:	21 2f       	mov	r18, r17
 706:	e1 2c       	mov	r14, r1
 708:	f5 01       	movw	r30, r10
 70a:	34 96       	adiw	r30, 0x04	; 4
 70c:	ff 87       	std	Y+15, r31	; 0x0f
 70e:	ee 87       	std	Y+14, r30	; 0x0e
 710:	f5 01       	movw	r30, r10
 712:	60 81       	ld	r22, Z
 714:	71 81       	ldd	r23, Z+1	; 0x01
 716:	82 81       	ldd	r24, Z+2	; 0x02
 718:	93 81       	ldd	r25, Z+3	; 0x03
 71a:	0e 2d       	mov	r16, r14
 71c:	ae 01       	movw	r20, r28
 71e:	4f 5f       	subi	r20, 0xFF	; 255
 720:	5f 4f       	sbci	r21, 0xFF	; 255
 722:	0e 94 32 0a 	call	0x1464	; 0x1464 <__ftoa_engine>
 726:	5c 01       	movw	r10, r24
 728:	59 80       	ldd	r5, Y+1	; 0x01
 72a:	50 fe       	sbrs	r5, 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <vfprintf+0x190>
 72e:	53 fe       	sbrs	r5, 3
 730:	06 c0       	rjmp	.+12     	; 0x73e <vfprintf+0x19c>
 732:	71 fc       	sbrc	r7, 1
 734:	06 c0       	rjmp	.+12     	; 0x742 <vfprintf+0x1a0>
 736:	72 fe       	sbrs	r7, 2
 738:	06 c0       	rjmp	.+12     	; 0x746 <vfprintf+0x1a4>
 73a:	00 e2       	ldi	r16, 0x20	; 32
 73c:	05 c0       	rjmp	.+10     	; 0x748 <vfprintf+0x1a6>
 73e:	0d e2       	ldi	r16, 0x2D	; 45
 740:	03 c0       	rjmp	.+6      	; 0x748 <vfprintf+0x1a6>
 742:	0b e2       	ldi	r16, 0x2B	; 43
 744:	01 c0       	rjmp	.+2      	; 0x748 <vfprintf+0x1a6>
 746:	00 e0       	ldi	r16, 0x00	; 0
 748:	85 2d       	mov	r24, r5
 74a:	8c 70       	andi	r24, 0x0C	; 12
 74c:	19 f0       	breq	.+6      	; 0x754 <vfprintf+0x1b2>
 74e:	01 11       	cpse	r16, r1
 750:	73 c2       	rjmp	.+1254   	; 0xc38 <__EEPROM_REGION_LENGTH__+0x438>
 752:	be c2       	rjmp	.+1404   	; 0xcd0 <__EEPROM_REGION_LENGTH__+0x4d0>
 754:	77 fe       	sbrs	r7, 7
 756:	0f c0       	rjmp	.+30     	; 0x776 <vfprintf+0x1d4>
 758:	ea 0c       	add	r14, r10
 75a:	54 fe       	sbrs	r5, 4
 75c:	04 c0       	rjmp	.+8      	; 0x766 <vfprintf+0x1c4>
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	81 33       	cpi	r24, 0x31	; 49
 762:	09 f4       	brne	.+2      	; 0x766 <vfprintf+0x1c4>
 764:	ea 94       	dec	r14
 766:	1e 14       	cp	r1, r14
 768:	74 f5       	brge	.+92     	; 0x7c6 <vfprintf+0x224>
 76a:	28 e0       	ldi	r18, 0x08	; 8
 76c:	2e 15       	cp	r18, r14
 76e:	78 f5       	brcc	.+94     	; 0x7ce <vfprintf+0x22c>
 770:	38 e0       	ldi	r19, 0x08	; 8
 772:	e3 2e       	mov	r14, r19
 774:	2c c0       	rjmp	.+88     	; 0x7ce <vfprintf+0x22c>
 776:	76 fc       	sbrc	r7, 6
 778:	2a c0       	rjmp	.+84     	; 0x7ce <vfprintf+0x22c>
 77a:	81 2f       	mov	r24, r17
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	8a 15       	cp	r24, r10
 780:	9b 05       	cpc	r25, r11
 782:	9c f0       	brlt	.+38     	; 0x7aa <vfprintf+0x208>
 784:	8c ef       	ldi	r24, 0xFC	; 252
 786:	a8 16       	cp	r10, r24
 788:	8f ef       	ldi	r24, 0xFF	; 255
 78a:	b8 06       	cpc	r11, r24
 78c:	74 f0       	brlt	.+28     	; 0x7aa <vfprintf+0x208>
 78e:	97 2d       	mov	r25, r7
 790:	90 68       	ori	r25, 0x80	; 128
 792:	79 2e       	mov	r7, r25
 794:	0a c0       	rjmp	.+20     	; 0x7aa <vfprintf+0x208>
 796:	e2 e0       	ldi	r30, 0x02	; 2
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	ec 0f       	add	r30, r28
 79c:	fd 1f       	adc	r31, r29
 79e:	e1 0f       	add	r30, r17
 7a0:	f1 1d       	adc	r31, r1
 7a2:	80 81       	ld	r24, Z
 7a4:	80 33       	cpi	r24, 0x30	; 48
 7a6:	19 f4       	brne	.+6      	; 0x7ae <vfprintf+0x20c>
 7a8:	11 50       	subi	r17, 0x01	; 1
 7aa:	11 11       	cpse	r17, r1
 7ac:	f4 cf       	rjmp	.-24     	; 0x796 <vfprintf+0x1f4>
 7ae:	77 fe       	sbrs	r7, 7
 7b0:	0e c0       	rjmp	.+28     	; 0x7ce <vfprintf+0x22c>
 7b2:	ee 24       	eor	r14, r14
 7b4:	e3 94       	inc	r14
 7b6:	e1 0e       	add	r14, r17
 7b8:	81 2f       	mov	r24, r17
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	a8 16       	cp	r10, r24
 7be:	b9 06       	cpc	r11, r25
 7c0:	2c f4       	brge	.+10     	; 0x7cc <vfprintf+0x22a>
 7c2:	1a 19       	sub	r17, r10
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <vfprintf+0x22c>
 7c6:	ee 24       	eor	r14, r14
 7c8:	e3 94       	inc	r14
 7ca:	01 c0       	rjmp	.+2      	; 0x7ce <vfprintf+0x22c>
 7cc:	10 e0       	ldi	r17, 0x00	; 0
 7ce:	77 fe       	sbrs	r7, 7
 7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0x23c>
 7d2:	1a 14       	cp	r1, r10
 7d4:	1b 04       	cpc	r1, r11
 7d6:	34 f4       	brge	.+12     	; 0x7e4 <vfprintf+0x242>
 7d8:	c5 01       	movw	r24, r10
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <vfprintf+0x246>
 7de:	85 e0       	ldi	r24, 0x05	; 5
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <vfprintf+0x246>
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	01 11       	cpse	r16, r1
 7ea:	01 96       	adiw	r24, 0x01	; 1
 7ec:	11 23       	and	r17, r17
 7ee:	31 f0       	breq	.+12     	; 0x7fc <vfprintf+0x25a>
 7f0:	21 2f       	mov	r18, r17
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	2f 5f       	subi	r18, 0xFF	; 255
 7f6:	3f 4f       	sbci	r19, 0xFF	; 255
 7f8:	82 0f       	add	r24, r18
 7fa:	93 1f       	adc	r25, r19
 7fc:	2f 2d       	mov	r18, r15
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	82 17       	cp	r24, r18
 802:	93 07       	cpc	r25, r19
 804:	14 f4       	brge	.+4      	; 0x80a <__EEPROM_REGION_LENGTH__+0xa>
 806:	f8 1a       	sub	r15, r24
 808:	01 c0       	rjmp	.+2      	; 0x80c <__EEPROM_REGION_LENGTH__+0xc>
 80a:	f1 2c       	mov	r15, r1
 80c:	87 2d       	mov	r24, r7
 80e:	89 70       	andi	r24, 0x09	; 9
 810:	49 f4       	brne	.+18     	; 0x824 <__EEPROM_REGION_LENGTH__+0x24>
 812:	ff 20       	and	r15, r15
 814:	39 f0       	breq	.+14     	; 0x824 <__EEPROM_REGION_LENGTH__+0x24>
 816:	b6 01       	movw	r22, r12
 818:	80 e2       	ldi	r24, 0x20	; 32
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 820:	fa 94       	dec	r15
 822:	f7 cf       	rjmp	.-18     	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
 824:	00 23       	and	r16, r16
 826:	29 f0       	breq	.+10     	; 0x832 <__EEPROM_REGION_LENGTH__+0x32>
 828:	b6 01       	movw	r22, r12
 82a:	80 2f       	mov	r24, r16
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 832:	73 fc       	sbrc	r7, 3
 834:	09 c0       	rjmp	.+18     	; 0x848 <__EEPROM_REGION_LENGTH__+0x48>
 836:	ff 20       	and	r15, r15
 838:	39 f0       	breq	.+14     	; 0x848 <__EEPROM_REGION_LENGTH__+0x48>
 83a:	b6 01       	movw	r22, r12
 83c:	80 e3       	ldi	r24, 0x30	; 48
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 844:	fa 94       	dec	r15
 846:	f7 cf       	rjmp	.-18     	; 0x836 <__EEPROM_REGION_LENGTH__+0x36>
 848:	77 fe       	sbrs	r7, 7
 84a:	49 c0       	rjmp	.+146    	; 0x8de <__EEPROM_REGION_LENGTH__+0xde>
 84c:	35 01       	movw	r6, r10
 84e:	b7 fe       	sbrs	r11, 7
 850:	02 c0       	rjmp	.+4      	; 0x856 <__EEPROM_REGION_LENGTH__+0x56>
 852:	61 2c       	mov	r6, r1
 854:	71 2c       	mov	r7, r1
 856:	c5 01       	movw	r24, r10
 858:	86 19       	sub	r24, r6
 85a:	97 09       	sbc	r25, r7
 85c:	88 24       	eor	r8, r8
 85e:	83 94       	inc	r8
 860:	91 2c       	mov	r9, r1
 862:	8c 0e       	add	r8, r28
 864:	9d 1e       	adc	r9, r29
 866:	88 0e       	add	r8, r24
 868:	99 1e       	adc	r9, r25
 86a:	f5 01       	movw	r30, r10
 86c:	ee 19       	sub	r30, r14
 86e:	f1 09       	sbc	r31, r1
 870:	f9 8b       	std	Y+17, r31	; 0x11
 872:	e8 8b       	std	Y+16, r30	; 0x10
 874:	01 2f       	mov	r16, r17
 876:	10 e0       	ldi	r17, 0x00	; 0
 878:	11 95       	neg	r17
 87a:	01 95       	neg	r16
 87c:	11 09       	sbc	r17, r1
 87e:	ff ef       	ldi	r31, 0xFF	; 255
 880:	6f 16       	cp	r6, r31
 882:	7f 06       	cpc	r7, r31
 884:	29 f4       	brne	.+10     	; 0x890 <__EEPROM_REGION_LENGTH__+0x90>
 886:	b6 01       	movw	r22, r12
 888:	8e e2       	ldi	r24, 0x2E	; 46
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 890:	a6 14       	cp	r10, r6
 892:	b7 04       	cpc	r11, r7
 894:	44 f0       	brlt	.+16     	; 0x8a6 <__EEPROM_REGION_LENGTH__+0xa6>
 896:	88 89       	ldd	r24, Y+16	; 0x10
 898:	99 89       	ldd	r25, Y+17	; 0x11
 89a:	86 15       	cp	r24, r6
 89c:	97 05       	cpc	r25, r7
 89e:	1c f4       	brge	.+6      	; 0x8a6 <__EEPROM_REGION_LENGTH__+0xa6>
 8a0:	f4 01       	movw	r30, r8
 8a2:	81 81       	ldd	r24, Z+1	; 0x01
 8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <__EEPROM_REGION_LENGTH__+0xa8>
 8a6:	80 e3       	ldi	r24, 0x30	; 48
 8a8:	f1 e0       	ldi	r31, 0x01	; 1
 8aa:	6f 1a       	sub	r6, r31
 8ac:	71 08       	sbc	r7, r1
 8ae:	2f ef       	ldi	r18, 0xFF	; 255
 8b0:	82 1a       	sub	r8, r18
 8b2:	92 0a       	sbc	r9, r18
 8b4:	60 16       	cp	r6, r16
 8b6:	71 06       	cpc	r7, r17
 8b8:	2c f0       	brlt	.+10     	; 0x8c4 <__EEPROM_REGION_LENGTH__+0xc4>
 8ba:	b6 01       	movw	r22, r12
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 8c2:	dd cf       	rjmp	.-70     	; 0x87e <__EEPROM_REGION_LENGTH__+0x7e>
 8c4:	a6 14       	cp	r10, r6
 8c6:	b7 04       	cpc	r11, r7
 8c8:	39 f4       	brne	.+14     	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 8ca:	9a 81       	ldd	r25, Y+2	; 0x02
 8cc:	96 33       	cpi	r25, 0x36	; 54
 8ce:	18 f4       	brcc	.+6      	; 0x8d6 <__EEPROM_REGION_LENGTH__+0xd6>
 8d0:	95 33       	cpi	r25, 0x35	; 53
 8d2:	11 f4       	brne	.+4      	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 8d4:	54 fe       	sbrs	r5, 4
 8d6:	81 e3       	ldi	r24, 0x31	; 49
 8d8:	b6 01       	movw	r22, r12
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	51 c0       	rjmp	.+162    	; 0x980 <__EEPROM_REGION_LENGTH__+0x180>
 8de:	8a 81       	ldd	r24, Y+2	; 0x02
 8e0:	81 33       	cpi	r24, 0x31	; 49
 8e2:	19 f0       	breq	.+6      	; 0x8ea <__EEPROM_REGION_LENGTH__+0xea>
 8e4:	95 2d       	mov	r25, r5
 8e6:	9f 7e       	andi	r25, 0xEF	; 239
 8e8:	59 2e       	mov	r5, r25
 8ea:	b6 01       	movw	r22, r12
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 8f2:	11 11       	cpse	r17, r1
 8f4:	05 c0       	rjmp	.+10     	; 0x900 <__EEPROM_REGION_LENGTH__+0x100>
 8f6:	74 fc       	sbrc	r7, 4
 8f8:	1c c0       	rjmp	.+56     	; 0x932 <__EEPROM_REGION_LENGTH__+0x132>
 8fa:	85 e6       	ldi	r24, 0x65	; 101
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	1b c0       	rjmp	.+54     	; 0x936 <__EEPROM_REGION_LENGTH__+0x136>
 900:	b6 01       	movw	r22, r12
 902:	8e e2       	ldi	r24, 0x2E	; 46
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 90a:	02 e0       	ldi	r16, 0x02	; 2
 90c:	01 0f       	add	r16, r17
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	11 e0       	ldi	r17, 0x01	; 1
 912:	18 0f       	add	r17, r24
 914:	e1 e0       	ldi	r30, 0x01	; 1
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	ec 0f       	add	r30, r28
 91a:	fd 1f       	adc	r31, r29
 91c:	e8 0f       	add	r30, r24
 91e:	f1 1d       	adc	r31, r1
 920:	80 81       	ld	r24, Z
 922:	b6 01       	movw	r22, r12
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 92a:	81 2f       	mov	r24, r17
 92c:	10 13       	cpse	r17, r16
 92e:	f0 cf       	rjmp	.-32     	; 0x910 <__EEPROM_REGION_LENGTH__+0x110>
 930:	e2 cf       	rjmp	.-60     	; 0x8f6 <__EEPROM_REGION_LENGTH__+0xf6>
 932:	85 e4       	ldi	r24, 0x45	; 69
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	b6 01       	movw	r22, r12
 938:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 93c:	b7 fc       	sbrc	r11, 7
 93e:	05 c0       	rjmp	.+10     	; 0x94a <__EEPROM_REGION_LENGTH__+0x14a>
 940:	a1 14       	cp	r10, r1
 942:	b1 04       	cpc	r11, r1
 944:	39 f4       	brne	.+14     	; 0x954 <__EEPROM_REGION_LENGTH__+0x154>
 946:	54 fe       	sbrs	r5, 4
 948:	05 c0       	rjmp	.+10     	; 0x954 <__EEPROM_REGION_LENGTH__+0x154>
 94a:	b1 94       	neg	r11
 94c:	a1 94       	neg	r10
 94e:	b1 08       	sbc	r11, r1
 950:	8d e2       	ldi	r24, 0x2D	; 45
 952:	01 c0       	rjmp	.+2      	; 0x956 <__EEPROM_REGION_LENGTH__+0x156>
 954:	8b e2       	ldi	r24, 0x2B	; 43
 956:	b6 01       	movw	r22, r12
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 95e:	80 e3       	ldi	r24, 0x30	; 48
 960:	ea e0       	ldi	r30, 0x0A	; 10
 962:	ae 16       	cp	r10, r30
 964:	b1 04       	cpc	r11, r1
 966:	2c f0       	brlt	.+10     	; 0x972 <__EEPROM_REGION_LENGTH__+0x172>
 968:	8f 5f       	subi	r24, 0xFF	; 255
 96a:	aa e0       	ldi	r26, 0x0A	; 10
 96c:	aa 1a       	sub	r10, r26
 96e:	b1 08       	sbc	r11, r1
 970:	f7 cf       	rjmp	.-18     	; 0x960 <__EEPROM_REGION_LENGTH__+0x160>
 972:	b6 01       	movw	r22, r12
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 97a:	b6 01       	movw	r22, r12
 97c:	c5 01       	movw	r24, r10
 97e:	c0 96       	adiw	r24, 0x30	; 48
 980:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 984:	72 c1       	rjmp	.+740    	; 0xc6a <__EEPROM_REGION_LENGTH__+0x46a>
 986:	83 36       	cpi	r24, 0x63	; 99
 988:	31 f0       	breq	.+12     	; 0x996 <__EEPROM_REGION_LENGTH__+0x196>
 98a:	83 37       	cpi	r24, 0x73	; 115
 98c:	91 f0       	breq	.+36     	; 0x9b2 <__EEPROM_REGION_LENGTH__+0x1b2>
 98e:	83 35       	cpi	r24, 0x53	; 83
 990:	09 f0       	breq	.+2      	; 0x994 <__EEPROM_REGION_LENGTH__+0x194>
 992:	5d c0       	rjmp	.+186    	; 0xa4e <__EEPROM_REGION_LENGTH__+0x24e>
 994:	24 c0       	rjmp	.+72     	; 0x9de <__EEPROM_REGION_LENGTH__+0x1de>
 996:	c5 01       	movw	r24, r10
 998:	02 96       	adiw	r24, 0x02	; 2
 99a:	9f 87       	std	Y+15, r25	; 0x0f
 99c:	8e 87       	std	Y+14, r24	; 0x0e
 99e:	f5 01       	movw	r30, r10
 9a0:	80 81       	ld	r24, Z
 9a2:	89 83       	std	Y+1, r24	; 0x01
 9a4:	6a 88       	ldd	r6, Y+18	; 0x12
 9a6:	7b 88       	ldd	r7, Y+19	; 0x13
 9a8:	8c 88       	ldd	r8, Y+20	; 0x14
 9aa:	aa 24       	eor	r10, r10
 9ac:	a3 94       	inc	r10
 9ae:	b1 2c       	mov	r11, r1
 9b0:	14 c0       	rjmp	.+40     	; 0x9da <__EEPROM_REGION_LENGTH__+0x1da>
 9b2:	c5 01       	movw	r24, r10
 9b4:	03 96       	adiw	r24, 0x03	; 3
 9b6:	9f 87       	std	Y+15, r25	; 0x0f
 9b8:	8e 87       	std	Y+14, r24	; 0x0e
 9ba:	f5 01       	movw	r30, r10
 9bc:	60 80       	ld	r6, Z
 9be:	71 80       	ldd	r7, Z+1	; 0x01
 9c0:	82 80       	ldd	r8, Z+2	; 0x02
 9c2:	06 ff       	sbrs	r16, 6
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <__EEPROM_REGION_LENGTH__+0x1cc>
 9c6:	41 2f       	mov	r20, r17
 9c8:	50 e0       	ldi	r21, 0x00	; 0
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9cc:	4f ef       	ldi	r20, 0xFF	; 255
 9ce:	5f ef       	ldi	r21, 0xFF	; 255
 9d0:	88 2d       	mov	r24, r8
 9d2:	b3 01       	movw	r22, r6
 9d4:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <strnlen>
 9d8:	5c 01       	movw	r10, r24
 9da:	0f 77       	andi	r16, 0x7F	; 127
 9dc:	15 c0       	rjmp	.+42     	; 0xa08 <__EEPROM_REGION_LENGTH__+0x208>
 9de:	c5 01       	movw	r24, r10
 9e0:	03 96       	adiw	r24, 0x03	; 3
 9e2:	9f 87       	std	Y+15, r25	; 0x0f
 9e4:	8e 87       	std	Y+14, r24	; 0x0e
 9e6:	f5 01       	movw	r30, r10
 9e8:	60 80       	ld	r6, Z
 9ea:	71 80       	ldd	r7, Z+1	; 0x01
 9ec:	82 80       	ldd	r8, Z+2	; 0x02
 9ee:	06 ff       	sbrs	r16, 6
 9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 9f2:	41 2f       	mov	r20, r17
 9f4:	50 e0       	ldi	r21, 0x00	; 0
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <__EEPROM_REGION_LENGTH__+0x1fc>
 9f8:	4f ef       	ldi	r20, 0xFF	; 255
 9fa:	5f ef       	ldi	r21, 0xFF	; 255
 9fc:	88 2d       	mov	r24, r8
 9fe:	b3 01       	movw	r22, r6
 a00:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <strnlen>
 a04:	5c 01       	movw	r10, r24
 a06:	00 68       	ori	r16, 0x80	; 128
 a08:	03 fd       	sbrc	r16, 3
 a0a:	1d c0       	rjmp	.+58     	; 0xa46 <__EEPROM_REGION_LENGTH__+0x246>
 a0c:	8f 2d       	mov	r24, r15
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	a8 16       	cp	r10, r24
 a12:	b9 06       	cpc	r11, r25
 a14:	c0 f4       	brcc	.+48     	; 0xa46 <__EEPROM_REGION_LENGTH__+0x246>
 a16:	b6 01       	movw	r22, r12
 a18:	80 e2       	ldi	r24, 0x20	; 32
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 a20:	fa 94       	dec	r15
 a22:	f4 cf       	rjmp	.-24     	; 0xa0c <__EEPROM_REGION_LENGTH__+0x20c>
 a24:	f3 01       	movw	r30, r6
 a26:	84 91       	lpm	r24, Z
 a28:	87 fc       	sbrc	r8, 7
 a2a:	80 81       	ld	r24, Z
 a2c:	ff ef       	ldi	r31, 0xFF	; 255
 a2e:	6f 1a       	sub	r6, r31
 a30:	7f 0a       	sbc	r7, r31
 a32:	8f 0a       	sbc	r8, r31
 a34:	b6 01       	movw	r22, r12
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 a3c:	f1 10       	cpse	r15, r1
 a3e:	fa 94       	dec	r15
 a40:	21 e0       	ldi	r18, 0x01	; 1
 a42:	a2 1a       	sub	r10, r18
 a44:	b1 08       	sbc	r11, r1
 a46:	a1 14       	cp	r10, r1
 a48:	b1 04       	cpc	r11, r1
 a4a:	61 f7       	brne	.-40     	; 0xa24 <__EEPROM_REGION_LENGTH__+0x224>
 a4c:	0e c1       	rjmp	.+540    	; 0xc6a <__EEPROM_REGION_LENGTH__+0x46a>
 a4e:	84 36       	cpi	r24, 0x64	; 100
 a50:	11 f0       	breq	.+4      	; 0xa56 <__EEPROM_REGION_LENGTH__+0x256>
 a52:	89 36       	cpi	r24, 0x69	; 105
 a54:	79 f5       	brne	.+94     	; 0xab4 <__EEPROM_REGION_LENGTH__+0x2b4>
 a56:	c5 01       	movw	r24, r10
 a58:	07 ff       	sbrs	r16, 7
 a5a:	09 c0       	rjmp	.+18     	; 0xa6e <__EEPROM_REGION_LENGTH__+0x26e>
 a5c:	04 96       	adiw	r24, 0x04	; 4
 a5e:	9f 87       	std	Y+15, r25	; 0x0f
 a60:	8e 87       	std	Y+14, r24	; 0x0e
 a62:	f5 01       	movw	r30, r10
 a64:	60 81       	ld	r22, Z
 a66:	71 81       	ldd	r23, Z+1	; 0x01
 a68:	82 81       	ldd	r24, Z+2	; 0x02
 a6a:	93 81       	ldd	r25, Z+3	; 0x03
 a6c:	0a c0       	rjmp	.+20     	; 0xa82 <__EEPROM_REGION_LENGTH__+0x282>
 a6e:	02 96       	adiw	r24, 0x02	; 2
 a70:	9f 87       	std	Y+15, r25	; 0x0f
 a72:	8e 87       	std	Y+14, r24	; 0x0e
 a74:	f5 01       	movw	r30, r10
 a76:	60 81       	ld	r22, Z
 a78:	71 81       	ldd	r23, Z+1	; 0x01
 a7a:	07 2e       	mov	r0, r23
 a7c:	00 0c       	add	r0, r0
 a7e:	88 0b       	sbc	r24, r24
 a80:	99 0b       	sbc	r25, r25
 a82:	0f 76       	andi	r16, 0x6F	; 111
 a84:	e0 2e       	mov	r14, r16
 a86:	97 ff       	sbrs	r25, 7
 a88:	0a c0       	rjmp	.+20     	; 0xa9e <__EEPROM_REGION_LENGTH__+0x29e>
 a8a:	90 95       	com	r25
 a8c:	80 95       	com	r24
 a8e:	70 95       	com	r23
 a90:	61 95       	neg	r22
 a92:	7f 4f       	sbci	r23, 0xFF	; 255
 a94:	8f 4f       	sbci	r24, 0xFF	; 255
 a96:	9f 4f       	sbci	r25, 0xFF	; 255
 a98:	f0 2f       	mov	r31, r16
 a9a:	f0 68       	ori	r31, 0x80	; 128
 a9c:	ef 2e       	mov	r14, r31
 a9e:	2a e0       	ldi	r18, 0x0A	; 10
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	ae 01       	movw	r20, r28
 aa4:	4f 5f       	subi	r20, 0xFF	; 255
 aa6:	5f 4f       	sbci	r21, 0xFF	; 255
 aa8:	0e 94 1c 11 	call	0x2238	; 0x2238 <__ultoa_invert>
 aac:	a8 2e       	mov	r10, r24
 aae:	2c 85       	ldd	r18, Y+12	; 0x0c
 ab0:	a2 1a       	sub	r10, r18
 ab2:	4b c0       	rjmp	.+150    	; 0xb4a <__EEPROM_REGION_LENGTH__+0x34a>
 ab4:	85 37       	cpi	r24, 0x75	; 117
 ab6:	29 f4       	brne	.+10     	; 0xac2 <__EEPROM_REGION_LENGTH__+0x2c2>
 ab8:	0f 7e       	andi	r16, 0xEF	; 239
 aba:	e0 2e       	mov	r14, r16
 abc:	2a e0       	ldi	r18, 0x0A	; 10
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	25 c0       	rjmp	.+74     	; 0xb0c <__EEPROM_REGION_LENGTH__+0x30c>
 ac2:	90 2f       	mov	r25, r16
 ac4:	99 7f       	andi	r25, 0xF9	; 249
 ac6:	e9 2e       	mov	r14, r25
 ac8:	8f 36       	cpi	r24, 0x6F	; 111
 aca:	c1 f0       	breq	.+48     	; 0xafc <__EEPROM_REGION_LENGTH__+0x2fc>
 acc:	18 f4       	brcc	.+6      	; 0xad4 <__EEPROM_REGION_LENGTH__+0x2d4>
 ace:	88 35       	cpi	r24, 0x58	; 88
 ad0:	79 f0       	breq	.+30     	; 0xaf0 <__EEPROM_REGION_LENGTH__+0x2f0>
 ad2:	d5 c0       	rjmp	.+426    	; 0xc7e <__EEPROM_REGION_LENGTH__+0x47e>
 ad4:	80 37       	cpi	r24, 0x70	; 112
 ad6:	19 f0       	breq	.+6      	; 0xade <__EEPROM_REGION_LENGTH__+0x2de>
 ad8:	88 37       	cpi	r24, 0x78	; 120
 ada:	21 f0       	breq	.+8      	; 0xae4 <__EEPROM_REGION_LENGTH__+0x2e4>
 adc:	d0 c0       	rjmp	.+416    	; 0xc7e <__EEPROM_REGION_LENGTH__+0x47e>
 ade:	a9 2f       	mov	r26, r25
 ae0:	a0 61       	ori	r26, 0x10	; 16
 ae2:	ea 2e       	mov	r14, r26
 ae4:	e4 fe       	sbrs	r14, 4
 ae6:	0d c0       	rjmp	.+26     	; 0xb02 <__EEPROM_REGION_LENGTH__+0x302>
 ae8:	ee 2d       	mov	r30, r14
 aea:	e4 60       	ori	r30, 0x04	; 4
 aec:	ee 2e       	mov	r14, r30
 aee:	09 c0       	rjmp	.+18     	; 0xb02 <__EEPROM_REGION_LENGTH__+0x302>
 af0:	04 ff       	sbrs	r16, 4
 af2:	0a c0       	rjmp	.+20     	; 0xb08 <__EEPROM_REGION_LENGTH__+0x308>
 af4:	f9 2f       	mov	r31, r25
 af6:	f6 60       	ori	r31, 0x06	; 6
 af8:	ef 2e       	mov	r14, r31
 afa:	06 c0       	rjmp	.+12     	; 0xb08 <__EEPROM_REGION_LENGTH__+0x308>
 afc:	28 e0       	ldi	r18, 0x08	; 8
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <__EEPROM_REGION_LENGTH__+0x30c>
 b02:	20 e1       	ldi	r18, 0x10	; 16
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <__EEPROM_REGION_LENGTH__+0x30c>
 b08:	20 e1       	ldi	r18, 0x10	; 16
 b0a:	32 e0       	ldi	r19, 0x02	; 2
 b0c:	c5 01       	movw	r24, r10
 b0e:	e7 fe       	sbrs	r14, 7
 b10:	09 c0       	rjmp	.+18     	; 0xb24 <__EEPROM_REGION_LENGTH__+0x324>
 b12:	04 96       	adiw	r24, 0x04	; 4
 b14:	9f 87       	std	Y+15, r25	; 0x0f
 b16:	8e 87       	std	Y+14, r24	; 0x0e
 b18:	f5 01       	movw	r30, r10
 b1a:	60 81       	ld	r22, Z
 b1c:	71 81       	ldd	r23, Z+1	; 0x01
 b1e:	82 81       	ldd	r24, Z+2	; 0x02
 b20:	93 81       	ldd	r25, Z+3	; 0x03
 b22:	08 c0       	rjmp	.+16     	; 0xb34 <__EEPROM_REGION_LENGTH__+0x334>
 b24:	02 96       	adiw	r24, 0x02	; 2
 b26:	9f 87       	std	Y+15, r25	; 0x0f
 b28:	8e 87       	std	Y+14, r24	; 0x0e
 b2a:	f5 01       	movw	r30, r10
 b2c:	60 81       	ld	r22, Z
 b2e:	71 81       	ldd	r23, Z+1	; 0x01
 b30:	80 e0       	ldi	r24, 0x00	; 0
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	ae 01       	movw	r20, r28
 b36:	4f 5f       	subi	r20, 0xFF	; 255
 b38:	5f 4f       	sbci	r21, 0xFF	; 255
 b3a:	0e 94 1c 11 	call	0x2238	; 0x2238 <__ultoa_invert>
 b3e:	a8 2e       	mov	r10, r24
 b40:	fc 85       	ldd	r31, Y+12	; 0x0c
 b42:	af 1a       	sub	r10, r31
 b44:	2e 2d       	mov	r18, r14
 b46:	2f 77       	andi	r18, 0x7F	; 127
 b48:	e2 2e       	mov	r14, r18
 b4a:	e6 fe       	sbrs	r14, 6
 b4c:	0b c0       	rjmp	.+22     	; 0xb64 <__EEPROM_REGION_LENGTH__+0x364>
 b4e:	0e 2d       	mov	r16, r14
 b50:	0e 7f       	andi	r16, 0xFE	; 254
 b52:	a1 16       	cp	r10, r17
 b54:	50 f4       	brcc	.+20     	; 0xb6a <__EEPROM_REGION_LENGTH__+0x36a>
 b56:	e4 fe       	sbrs	r14, 4
 b58:	0a c0       	rjmp	.+20     	; 0xb6e <__EEPROM_REGION_LENGTH__+0x36e>
 b5a:	e2 fc       	sbrc	r14, 2
 b5c:	08 c0       	rjmp	.+16     	; 0xb6e <__EEPROM_REGION_LENGTH__+0x36e>
 b5e:	0e 2d       	mov	r16, r14
 b60:	0e 7e       	andi	r16, 0xEE	; 238
 b62:	05 c0       	rjmp	.+10     	; 0xb6e <__EEPROM_REGION_LENGTH__+0x36e>
 b64:	ba 2c       	mov	r11, r10
 b66:	0e 2d       	mov	r16, r14
 b68:	03 c0       	rjmp	.+6      	; 0xb70 <__EEPROM_REGION_LENGTH__+0x370>
 b6a:	ba 2c       	mov	r11, r10
 b6c:	01 c0       	rjmp	.+2      	; 0xb70 <__EEPROM_REGION_LENGTH__+0x370>
 b6e:	b1 2e       	mov	r11, r17
 b70:	04 ff       	sbrs	r16, 4
 b72:	0d c0       	rjmp	.+26     	; 0xb8e <__EEPROM_REGION_LENGTH__+0x38e>
 b74:	fe 01       	movw	r30, r28
 b76:	ea 0d       	add	r30, r10
 b78:	f1 1d       	adc	r31, r1
 b7a:	80 81       	ld	r24, Z
 b7c:	80 33       	cpi	r24, 0x30	; 48
 b7e:	11 f4       	brne	.+4      	; 0xb84 <__EEPROM_REGION_LENGTH__+0x384>
 b80:	09 7e       	andi	r16, 0xE9	; 233
 b82:	09 c0       	rjmp	.+18     	; 0xb96 <__EEPROM_REGION_LENGTH__+0x396>
 b84:	02 ff       	sbrs	r16, 2
 b86:	06 c0       	rjmp	.+12     	; 0xb94 <__EEPROM_REGION_LENGTH__+0x394>
 b88:	b3 94       	inc	r11
 b8a:	b3 94       	inc	r11
 b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__EEPROM_REGION_LENGTH__+0x396>
 b8e:	80 2f       	mov	r24, r16
 b90:	86 78       	andi	r24, 0x86	; 134
 b92:	09 f0       	breq	.+2      	; 0xb96 <__EEPROM_REGION_LENGTH__+0x396>
 b94:	b3 94       	inc	r11
 b96:	03 fd       	sbrc	r16, 3
 b98:	11 c0       	rjmp	.+34     	; 0xbbc <__EEPROM_REGION_LENGTH__+0x3bc>
 b9a:	00 ff       	sbrs	r16, 0
 b9c:	06 c0       	rjmp	.+12     	; 0xbaa <__EEPROM_REGION_LENGTH__+0x3aa>
 b9e:	bf 14       	cp	r11, r15
 ba0:	88 f4       	brcc	.+34     	; 0xbc4 <__EEPROM_REGION_LENGTH__+0x3c4>
 ba2:	fa 0c       	add	r15, r10
 ba4:	1f 2d       	mov	r17, r15
 ba6:	1b 19       	sub	r17, r11
 ba8:	0e c0       	rjmp	.+28     	; 0xbc6 <__EEPROM_REGION_LENGTH__+0x3c6>
 baa:	bf 14       	cp	r11, r15
 bac:	60 f4       	brcc	.+24     	; 0xbc6 <__EEPROM_REGION_LENGTH__+0x3c6>
 bae:	b6 01       	movw	r22, r12
 bb0:	80 e2       	ldi	r24, 0x20	; 32
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 bb8:	b3 94       	inc	r11
 bba:	f7 cf       	rjmp	.-18     	; 0xbaa <__EEPROM_REGION_LENGTH__+0x3aa>
 bbc:	bf 14       	cp	r11, r15
 bbe:	18 f4       	brcc	.+6      	; 0xbc6 <__EEPROM_REGION_LENGTH__+0x3c6>
 bc0:	fb 18       	sub	r15, r11
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <__EEPROM_REGION_LENGTH__+0x3c8>
 bc4:	1a 2d       	mov	r17, r10
 bc6:	f1 2c       	mov	r15, r1
 bc8:	04 ff       	sbrs	r16, 4
 bca:	10 c0       	rjmp	.+32     	; 0xbec <__EEPROM_REGION_LENGTH__+0x3ec>
 bcc:	b6 01       	movw	r22, r12
 bce:	80 e3       	ldi	r24, 0x30	; 48
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 bd6:	02 ff       	sbrs	r16, 2
 bd8:	17 c0       	rjmp	.+46     	; 0xc08 <__EEPROM_REGION_LENGTH__+0x408>
 bda:	01 fd       	sbrc	r16, 1
 bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <__EEPROM_REGION_LENGTH__+0x3e4>
 bde:	88 e7       	ldi	r24, 0x78	; 120
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	02 c0       	rjmp	.+4      	; 0xbe8 <__EEPROM_REGION_LENGTH__+0x3e8>
 be4:	88 e5       	ldi	r24, 0x58	; 88
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	b6 01       	movw	r22, r12
 bea:	0c c0       	rjmp	.+24     	; 0xc04 <__EEPROM_REGION_LENGTH__+0x404>
 bec:	80 2f       	mov	r24, r16
 bee:	86 78       	andi	r24, 0x86	; 134
 bf0:	59 f0       	breq	.+22     	; 0xc08 <__EEPROM_REGION_LENGTH__+0x408>
 bf2:	01 ff       	sbrs	r16, 1
 bf4:	02 c0       	rjmp	.+4      	; 0xbfa <__EEPROM_REGION_LENGTH__+0x3fa>
 bf6:	8b e2       	ldi	r24, 0x2B	; 43
 bf8:	01 c0       	rjmp	.+2      	; 0xbfc <__EEPROM_REGION_LENGTH__+0x3fc>
 bfa:	80 e2       	ldi	r24, 0x20	; 32
 bfc:	07 fd       	sbrc	r16, 7
 bfe:	8d e2       	ldi	r24, 0x2D	; 45
 c00:	b6 01       	movw	r22, r12
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 c08:	a1 16       	cp	r10, r17
 c0a:	38 f4       	brcc	.+14     	; 0xc1a <__EEPROM_REGION_LENGTH__+0x41a>
 c0c:	b6 01       	movw	r22, r12
 c0e:	80 e3       	ldi	r24, 0x30	; 48
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 c16:	11 50       	subi	r17, 0x01	; 1
 c18:	f7 cf       	rjmp	.-18     	; 0xc08 <__EEPROM_REGION_LENGTH__+0x408>
 c1a:	aa 94       	dec	r10
 c1c:	e1 e0       	ldi	r30, 0x01	; 1
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	ec 0f       	add	r30, r28
 c22:	fd 1f       	adc	r31, r29
 c24:	ea 0d       	add	r30, r10
 c26:	f1 1d       	adc	r31, r1
 c28:	80 81       	ld	r24, Z
 c2a:	b6 01       	movw	r22, r12
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 c32:	a1 10       	cpse	r10, r1
 c34:	f2 cf       	rjmp	.-28     	; 0xc1a <__EEPROM_REGION_LENGTH__+0x41a>
 c36:	19 c0       	rjmp	.+50     	; 0xc6a <__EEPROM_REGION_LENGTH__+0x46a>
 c38:	f4 e0       	ldi	r31, 0x04	; 4
 c3a:	ff 15       	cp	r31, r15
 c3c:	80 f5       	brcc	.+96     	; 0xc9e <__EEPROM_REGION_LENGTH__+0x49e>
 c3e:	84 e0       	ldi	r24, 0x04	; 4
 c40:	f8 1a       	sub	r15, r24
 c42:	73 fe       	sbrs	r7, 3
 c44:	23 c0       	rjmp	.+70     	; 0xc8c <__EEPROM_REGION_LENGTH__+0x48c>
 c46:	01 11       	cpse	r16, r1
 c48:	2b c0       	rjmp	.+86     	; 0xca0 <__EEPROM_REGION_LENGTH__+0x4a0>
 c4a:	53 fe       	sbrs	r5, 3
 c4c:	2f c0       	rjmp	.+94     	; 0xcac <__EEPROM_REGION_LENGTH__+0x4ac>
 c4e:	59 e8       	ldi	r21, 0x89	; 137
 c50:	85 2e       	mov	r8, r21
 c52:	55 e0       	ldi	r21, 0x05	; 5
 c54:	95 2e       	mov	r9, r21
 c56:	50 e0       	ldi	r21, 0x00	; 0
 c58:	a5 2e       	mov	r10, r21
 c5a:	07 2d       	mov	r16, r7
 c5c:	00 71       	andi	r16, 0x10	; 16
 c5e:	f4 01       	movw	r30, r8
 c60:	84 91       	lpm	r24, Z
 c62:	a7 fc       	sbrc	r10, 7
 c64:	80 81       	ld	r24, Z
 c66:	81 11       	cpse	r24, r1
 c68:	28 c0       	rjmp	.+80     	; 0xcba <__EEPROM_REGION_LENGTH__+0x4ba>
 c6a:	ff 20       	and	r15, r15
 c6c:	09 f4       	brne	.+2      	; 0xc70 <__EEPROM_REGION_LENGTH__+0x470>
 c6e:	d2 cc       	rjmp	.-1628   	; 0x614 <vfprintf+0x72>
 c70:	b6 01       	movw	r22, r12
 c72:	80 e2       	ldi	r24, 0x20	; 32
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 c7a:	fa 94       	dec	r15
 c7c:	f6 cf       	rjmp	.-20     	; 0xc6a <__EEPROM_REGION_LENGTH__+0x46a>
 c7e:	f6 01       	movw	r30, r12
 c80:	87 81       	ldd	r24, Z+7	; 0x07
 c82:	90 85       	ldd	r25, Z+8	; 0x08
 c84:	2c c0       	rjmp	.+88     	; 0xcde <__EEPROM_REGION_LENGTH__+0x4de>
 c86:	8f ef       	ldi	r24, 0xFF	; 255
 c88:	9f ef       	ldi	r25, 0xFF	; 255
 c8a:	29 c0       	rjmp	.+82     	; 0xcde <__EEPROM_REGION_LENGTH__+0x4de>
 c8c:	b6 01       	movw	r22, r12
 c8e:	80 e2       	ldi	r24, 0x20	; 32
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 c96:	fa 94       	dec	r15
 c98:	f1 10       	cpse	r15, r1
 c9a:	f8 cf       	rjmp	.-16     	; 0xc8c <__EEPROM_REGION_LENGTH__+0x48c>
 c9c:	d4 cf       	rjmp	.-88     	; 0xc46 <__EEPROM_REGION_LENGTH__+0x446>
 c9e:	f1 2c       	mov	r15, r1
 ca0:	b6 01       	movw	r22, r12
 ca2:	80 2f       	mov	r24, r16
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 caa:	cf cf       	rjmp	.-98     	; 0xc4a <__EEPROM_REGION_LENGTH__+0x44a>
 cac:	45 e8       	ldi	r20, 0x85	; 133
 cae:	84 2e       	mov	r8, r20
 cb0:	45 e0       	ldi	r20, 0x05	; 5
 cb2:	94 2e       	mov	r9, r20
 cb4:	40 e0       	ldi	r20, 0x00	; 0
 cb6:	a4 2e       	mov	r10, r20
 cb8:	d0 cf       	rjmp	.-96     	; 0xc5a <__EEPROM_REGION_LENGTH__+0x45a>
 cba:	01 11       	cpse	r16, r1
 cbc:	80 52       	subi	r24, 0x20	; 32
 cbe:	b6 01       	movw	r22, r12
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <fputc>
 cc6:	ff ef       	ldi	r31, 0xFF	; 255
 cc8:	8f 1a       	sub	r8, r31
 cca:	9f 0a       	sbc	r9, r31
 ccc:	af 0a       	sbc	r10, r31
 cce:	c7 cf       	rjmp	.-114    	; 0xc5e <__EEPROM_REGION_LENGTH__+0x45e>
 cd0:	23 e0       	ldi	r18, 0x03	; 3
 cd2:	2f 15       	cp	r18, r15
 cd4:	10 f4       	brcc	.+4      	; 0xcda <__EEPROM_REGION_LENGTH__+0x4da>
 cd6:	83 e0       	ldi	r24, 0x03	; 3
 cd8:	b3 cf       	rjmp	.-154    	; 0xc40 <__EEPROM_REGION_LENGTH__+0x440>
 cda:	f1 2c       	mov	r15, r1
 cdc:	b6 cf       	rjmp	.-148    	; 0xc4a <__EEPROM_REGION_LENGTH__+0x44a>
 cde:	64 96       	adiw	r28, 0x14	; 20
 ce0:	e2 e1       	ldi	r30, 0x12	; 18
 ce2:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__>

Disassembly of section .text.libgcc:

0000406c <__tablejump2__>:
    406c:	ee 0f       	add	r30, r30
    406e:	ff 1f       	adc	r31, r31
    4070:	05 90       	lpm	r0, Z+
    4072:	f4 91       	lpm	r31, Z
    4074:	e0 2d       	mov	r30, r0
    4076:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003d0c <__umulhisi3>:
    3d0c:	a2 9f       	mul	r26, r18
    3d0e:	b0 01       	movw	r22, r0
    3d10:	b3 9f       	mul	r27, r19
    3d12:	c0 01       	movw	r24, r0
    3d14:	a3 9f       	mul	r26, r19
    3d16:	70 0d       	add	r23, r0
    3d18:	81 1d       	adc	r24, r1
    3d1a:	11 24       	eor	r1, r1
    3d1c:	91 1d       	adc	r25, r1
    3d1e:	b2 9f       	mul	r27, r18
    3d20:	70 0d       	add	r23, r0
    3d22:	81 1d       	adc	r24, r1
    3d24:	11 24       	eor	r1, r1
    3d26:	91 1d       	adc	r25, r1
    3d28:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

0000380c <__prologue_saves__>:
    380c:	2f 92       	push	r2
    380e:	3f 92       	push	r3
    3810:	4f 92       	push	r4
    3812:	5f 92       	push	r5
    3814:	6f 92       	push	r6
    3816:	7f 92       	push	r7
    3818:	8f 92       	push	r8
    381a:	9f 92       	push	r9
    381c:	af 92       	push	r10
    381e:	bf 92       	push	r11
    3820:	cf 92       	push	r12
    3822:	df 92       	push	r13
    3824:	ef 92       	push	r14
    3826:	ff 92       	push	r15
    3828:	0f 93       	push	r16
    382a:	1f 93       	push	r17
    382c:	cf 93       	push	r28
    382e:	df 93       	push	r29
    3830:	cd b7       	in	r28, 0x3d	; 61
    3832:	de b7       	in	r29, 0x3e	; 62
    3834:	ca 1b       	sub	r28, r26
    3836:	db 0b       	sbc	r29, r27
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

0000387a <__epilogue_restores__>:
    387a:	2a 88       	ldd	r2, Y+18	; 0x12
    387c:	39 88       	ldd	r3, Y+17	; 0x11
    387e:	48 88       	ldd	r4, Y+16	; 0x10
    3880:	5f 84       	ldd	r5, Y+15	; 0x0f
    3882:	6e 84       	ldd	r6, Y+14	; 0x0e
    3884:	7d 84       	ldd	r7, Y+13	; 0x0d
    3886:	8c 84       	ldd	r8, Y+12	; 0x0c
    3888:	9b 84       	ldd	r9, Y+11	; 0x0b
    388a:	aa 84       	ldd	r10, Y+10	; 0x0a
    388c:	b9 84       	ldd	r11, Y+9	; 0x09
    388e:	c8 84       	ldd	r12, Y+8	; 0x08
    3890:	df 80       	ldd	r13, Y+7	; 0x07
    3892:	ee 80       	ldd	r14, Y+6	; 0x06
    3894:	fd 80       	ldd	r15, Y+5	; 0x05
    3896:	0c 81       	ldd	r16, Y+4	; 0x04
    3898:	1b 81       	ldd	r17, Y+3	; 0x03
    389a:	aa 81       	ldd	r26, Y+2	; 0x02
    389c:	b9 81       	ldd	r27, Y+1	; 0x01
    389e:	ce 0f       	add	r28, r30
    38a0:	d1 1d       	adc	r29, r1
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	f8 94       	cli
    38a6:	de bf       	out	0x3e, r29	; 62
    38a8:	0f be       	out	0x3f, r0	; 63
    38aa:	cd bf       	out	0x3d, r28	; 61
    38ac:	ed 01       	movw	r28, r26
    38ae:	08 95       	ret

Disassembly of section .text.avrlibc:

000040d4 <atoi>:
    40d4:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <atol>
    40d8:	cb 01       	movw	r24, r22
    40da:	08 95       	ret

Disassembly of section .text.avrlibc:

00003fee <atol>:
    3fee:	2a e0       	ldi	r18, 0x0A	; 10
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	40 e0       	ldi	r20, 0x00	; 0
    3ff4:	50 e0       	ldi	r21, 0x00	; 0
    3ff6:	0e 94 73 06 	call	0xce6	; 0xce6 <strtol>
    3ffa:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ce6 <strtol>:
 ce6:	2f 92       	push	r2
 ce8:	3f 92       	push	r3
 cea:	4f 92       	push	r4
 cec:	5f 92       	push	r5
 cee:	6f 92       	push	r6
 cf0:	7f 92       	push	r7
 cf2:	8f 92       	push	r8
 cf4:	af 92       	push	r10
 cf6:	bf 92       	push	r11
 cf8:	cf 92       	push	r12
 cfa:	df 92       	push	r13
 cfc:	ef 92       	push	r14
 cfe:	0f 93       	push	r16
 d00:	1f 93       	push	r17
 d02:	cf 93       	push	r28
 d04:	df 93       	push	r29
 d06:	00 d0       	rcall	.+0      	; 0xd08 <strtol+0x22>
 d08:	00 d0       	rcall	.+0      	; 0xd0a <strtol+0x24>
 d0a:	00 d0       	rcall	.+0      	; 0xd0c <strtol+0x26>
 d0c:	cd b7       	in	r28, 0x3d	; 61
 d0e:	de b7       	in	r29, 0x3e	; 62
 d10:	3b 01       	movw	r6, r22
 d12:	88 2e       	mov	r8, r24
 d14:	5a 01       	movw	r10, r20
 d16:	19 01       	movw	r2, r18
 d18:	41 15       	cp	r20, r1
 d1a:	51 05       	cpc	r21, r1
 d1c:	21 f0       	breq	.+8      	; 0xd26 <strtol+0x40>
 d1e:	fa 01       	movw	r30, r20
 d20:	60 83       	st	Z, r22
 d22:	71 83       	std	Z+1, r23	; 0x01
 d24:	82 83       	std	Z+2, r24	; 0x02
 d26:	21 14       	cp	r2, r1
 d28:	31 04       	cpc	r3, r1
 d2a:	29 f0       	breq	.+10     	; 0xd36 <strtol+0x50>
 d2c:	c1 01       	movw	r24, r2
 d2e:	02 97       	sbiw	r24, 0x02	; 2
 d30:	83 97       	sbiw	r24, 0x23	; 35
 d32:	08 f0       	brcs	.+2      	; 0xd36 <strtol+0x50>
 d34:	1a c1       	rjmp	.+564    	; 0xf6a <strtol+0x284>
 d36:	e8 2c       	mov	r14, r8
 d38:	63 01       	movw	r12, r6
 d3a:	ff ef       	ldi	r31, 0xFF	; 255
 d3c:	cf 1a       	sub	r12, r31
 d3e:	df 0a       	sbc	r13, r31
 d40:	ef 0a       	sbc	r14, r31
 d42:	f3 01       	movw	r30, r6
 d44:	14 91       	lpm	r17, Z
 d46:	87 fc       	sbrc	r8, 7
 d48:	10 81       	ld	r17, Z
 d4a:	81 2f       	mov	r24, r17
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <isspace>
 d52:	4c 2d       	mov	r20, r12
 d54:	3d 2d       	mov	r19, r13
 d56:	2e 2d       	mov	r18, r14
 d58:	89 2b       	or	r24, r25
 d5a:	19 f0       	breq	.+6      	; 0xd62 <strtol+0x7c>
 d5c:	36 01       	movw	r6, r12
 d5e:	8e 2c       	mov	r8, r14
 d60:	ea cf       	rjmp	.-44     	; 0xd36 <strtol+0x50>
 d62:	1d 32       	cpi	r17, 0x2D	; 45
 d64:	69 f4       	brne	.+26     	; 0xd80 <strtol+0x9a>
 d66:	e8 2c       	mov	r14, r8
 d68:	63 01       	movw	r12, r6
 d6a:	52 e0       	ldi	r21, 0x02	; 2
 d6c:	c5 0e       	add	r12, r21
 d6e:	d1 1c       	adc	r13, r1
 d70:	e1 1c       	adc	r14, r1
 d72:	e4 2f       	mov	r30, r20
 d74:	f3 2f       	mov	r31, r19
 d76:	14 91       	lpm	r17, Z
 d78:	27 fd       	sbrc	r18, 7
 d7a:	10 81       	ld	r17, Z
 d7c:	01 e0       	ldi	r16, 0x01	; 1
 d7e:	0e c0       	rjmp	.+28     	; 0xd9c <strtol+0xb6>
 d80:	1b 32       	cpi	r17, 0x2B	; 43
 d82:	59 f4       	brne	.+22     	; 0xd9a <strtol+0xb4>
 d84:	e8 2c       	mov	r14, r8
 d86:	63 01       	movw	r12, r6
 d88:	82 e0       	ldi	r24, 0x02	; 2
 d8a:	c8 0e       	add	r12, r24
 d8c:	d1 1c       	adc	r13, r1
 d8e:	e1 1c       	adc	r14, r1
 d90:	e4 2f       	mov	r30, r20
 d92:	f3 2f       	mov	r31, r19
 d94:	14 91       	lpm	r17, Z
 d96:	27 fd       	sbrc	r18, 7
 d98:	10 81       	ld	r17, Z
 d9a:	00 e0       	ldi	r16, 0x00	; 0
 d9c:	21 14       	cp	r2, r1
 d9e:	31 04       	cpc	r3, r1
 da0:	09 f1       	breq	.+66     	; 0xde4 <strtol+0xfe>
 da2:	90 e1       	ldi	r25, 0x10	; 16
 da4:	29 16       	cp	r2, r25
 da6:	31 04       	cpc	r3, r1
 da8:	29 f4       	brne	.+10     	; 0xdb4 <strtol+0xce>
 daa:	3f c0       	rjmp	.+126    	; 0xe2a <strtol+0x144>
 dac:	10 e3       	ldi	r17, 0x30	; 48
 dae:	21 14       	cp	r2, r1
 db0:	31 04       	cpc	r3, r1
 db2:	21 f1       	breq	.+72     	; 0xdfc <strtol+0x116>
 db4:	f8 e0       	ldi	r31, 0x08	; 8
 db6:	2f 16       	cp	r2, r31
 db8:	31 04       	cpc	r3, r1
 dba:	01 f1       	breq	.+64     	; 0xdfc <strtol+0x116>
 dbc:	54 f4       	brge	.+20     	; 0xdd2 <strtol+0xec>
 dbe:	32 e0       	ldi	r19, 0x02	; 2
 dc0:	23 16       	cp	r2, r19
 dc2:	31 04       	cpc	r3, r1
 dc4:	21 f5       	brne	.+72     	; 0xe0e <strtol+0x128>
 dc6:	41 2c       	mov	r4, r1
 dc8:	51 2c       	mov	r5, r1
 dca:	61 2c       	mov	r6, r1
 dcc:	50 e4       	ldi	r21, 0x40	; 64
 dce:	75 2e       	mov	r7, r21
 dd0:	4b c0       	rjmp	.+150    	; 0xe68 <strtol+0x182>
 dd2:	4a e0       	ldi	r20, 0x0A	; 10
 dd4:	24 16       	cp	r2, r20
 dd6:	31 04       	cpc	r3, r1
 dd8:	39 f0       	breq	.+14     	; 0xde8 <strtol+0x102>
 dda:	50 e1       	ldi	r21, 0x10	; 16
 ddc:	25 16       	cp	r2, r21
 dde:	31 04       	cpc	r3, r1
 de0:	b1 f4       	brne	.+44     	; 0xe0e <strtol+0x128>
 de2:	3d c0       	rjmp	.+122    	; 0xe5e <strtol+0x178>
 de4:	10 33       	cpi	r17, 0x30	; 48
 de6:	19 f1       	breq	.+70     	; 0xe2e <strtol+0x148>
 de8:	3a e0       	ldi	r19, 0x0A	; 10
 dea:	23 2e       	mov	r2, r19
 dec:	31 2c       	mov	r3, r1
 dee:	4c ec       	ldi	r20, 0xCC	; 204
 df0:	44 2e       	mov	r4, r20
 df2:	54 2c       	mov	r5, r4
 df4:	64 2c       	mov	r6, r4
 df6:	4c e0       	ldi	r20, 0x0C	; 12
 df8:	74 2e       	mov	r7, r20
 dfa:	36 c0       	rjmp	.+108    	; 0xe68 <strtol+0x182>
 dfc:	98 e0       	ldi	r25, 0x08	; 8
 dfe:	29 2e       	mov	r2, r25
 e00:	31 2c       	mov	r3, r1
 e02:	41 2c       	mov	r4, r1
 e04:	51 2c       	mov	r5, r1
 e06:	61 2c       	mov	r6, r1
 e08:	20 e1       	ldi	r18, 0x10	; 16
 e0a:	72 2e       	mov	r7, r18
 e0c:	2d c0       	rjmp	.+90     	; 0xe68 <strtol+0x182>
 e0e:	60 e0       	ldi	r22, 0x00	; 0
 e10:	70 e0       	ldi	r23, 0x00	; 0
 e12:	80 e0       	ldi	r24, 0x00	; 0
 e14:	90 e8       	ldi	r25, 0x80	; 128
 e16:	91 01       	movw	r18, r2
 e18:	03 2c       	mov	r0, r3
 e1a:	00 0c       	add	r0, r0
 e1c:	44 0b       	sbc	r20, r20
 e1e:	55 0b       	sbc	r21, r21
 e20:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__udivmodsi4>
 e24:	29 01       	movw	r4, r18
 e26:	3a 01       	movw	r6, r20
 e28:	1f c0       	rjmp	.+62     	; 0xe68 <strtol+0x182>
 e2a:	10 33       	cpi	r17, 0x30	; 48
 e2c:	c1 f4       	brne	.+48     	; 0xe5e <strtol+0x178>
 e2e:	f6 01       	movw	r30, r12
 e30:	84 91       	lpm	r24, Z
 e32:	e7 fc       	sbrc	r14, 7
 e34:	80 81       	ld	r24, Z
 e36:	8f 7d       	andi	r24, 0xDF	; 223
 e38:	88 35       	cpi	r24, 0x58	; 88
 e3a:	09 f0       	breq	.+2      	; 0xe3e <strtol+0x158>
 e3c:	b7 cf       	rjmp	.-146    	; 0xdac <strtol+0xc6>
 e3e:	ae 2d       	mov	r26, r14
 e40:	c6 01       	movw	r24, r12
 e42:	01 96       	adiw	r24, 0x01	; 1
 e44:	a1 1d       	adc	r26, r1
 e46:	fc 01       	movw	r30, r24
 e48:	14 91       	lpm	r17, Z
 e4a:	a7 fd       	sbrc	r26, 7
 e4c:	10 81       	ld	r17, Z
 e4e:	e2 e0       	ldi	r30, 0x02	; 2
 e50:	ce 0e       	add	r12, r30
 e52:	d1 1c       	adc	r13, r1
 e54:	e1 1c       	adc	r14, r1
 e56:	02 60       	ori	r16, 0x02	; 2
 e58:	60 e1       	ldi	r22, 0x10	; 16
 e5a:	26 2e       	mov	r2, r22
 e5c:	31 2c       	mov	r3, r1
 e5e:	41 2c       	mov	r4, r1
 e60:	51 2c       	mov	r5, r1
 e62:	61 2c       	mov	r6, r1
 e64:	88 e0       	ldi	r24, 0x08	; 8
 e66:	78 2e       	mov	r7, r24
 e68:	a0 e0       	ldi	r26, 0x00	; 0
 e6a:	60 e0       	ldi	r22, 0x00	; 0
 e6c:	70 e0       	ldi	r23, 0x00	; 0
 e6e:	cb 01       	movw	r24, r22
 e70:	91 01       	movw	r18, r2
 e72:	03 2c       	mov	r0, r3
 e74:	00 0c       	add	r0, r0
 e76:	44 0b       	sbc	r20, r20
 e78:	55 0b       	sbc	r21, r21
 e7a:	29 83       	std	Y+1, r18	; 0x01
 e7c:	3a 83       	std	Y+2, r19	; 0x02
 e7e:	4b 83       	std	Y+3, r20	; 0x03
 e80:	5c 83       	std	Y+4, r21	; 0x04
 e82:	e0 ed       	ldi	r30, 0xD0	; 208
 e84:	e1 0f       	add	r30, r17
 e86:	ea 30       	cpi	r30, 0x0A	; 10
 e88:	60 f0       	brcs	.+24     	; 0xea2 <strtol+0x1bc>
 e8a:	2f eb       	ldi	r18, 0xBF	; 191
 e8c:	21 0f       	add	r18, r17
 e8e:	2a 31       	cpi	r18, 0x1A	; 26
 e90:	10 f4       	brcc	.+4      	; 0xe96 <strtol+0x1b0>
 e92:	e9 ec       	ldi	r30, 0xC9	; 201
 e94:	05 c0       	rjmp	.+10     	; 0xea0 <strtol+0x1ba>
 e96:	2f e9       	ldi	r18, 0x9F	; 159
 e98:	21 0f       	add	r18, r17
 e9a:	2a 31       	cpi	r18, 0x1A	; 26
 e9c:	50 f5       	brcc	.+84     	; 0xef2 <strtol+0x20c>
 e9e:	e9 ea       	ldi	r30, 0xA9	; 169
 ea0:	e1 0f       	add	r30, r17
 ea2:	2e 2f       	mov	r18, r30
 ea4:	30 e0       	ldi	r19, 0x00	; 0
 ea6:	22 15       	cp	r18, r2
 ea8:	33 05       	cpc	r19, r3
 eaa:	1c f5       	brge	.+70     	; 0xef2 <strtol+0x20c>
 eac:	a7 fd       	sbrc	r26, 7
 eae:	18 c0       	rjmp	.+48     	; 0xee0 <strtol+0x1fa>
 eb0:	46 16       	cp	r4, r22
 eb2:	57 06       	cpc	r5, r23
 eb4:	68 06       	cpc	r6, r24
 eb6:	79 06       	cpc	r7, r25
 eb8:	80 f0       	brcs	.+32     	; 0xeda <strtol+0x1f4>
 eba:	29 81       	ldd	r18, Y+1	; 0x01
 ebc:	3a 81       	ldd	r19, Y+2	; 0x02
 ebe:	4b 81       	ldd	r20, Y+3	; 0x03
 ec0:	5c 81       	ldd	r21, Y+4	; 0x04
 ec2:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__mulsi3>
 ec6:	6e 0f       	add	r22, r30
 ec8:	71 1d       	adc	r23, r1
 eca:	81 1d       	adc	r24, r1
 ecc:	91 1d       	adc	r25, r1
 ece:	61 30       	cpi	r22, 0x01	; 1
 ed0:	71 05       	cpc	r23, r1
 ed2:	81 05       	cpc	r24, r1
 ed4:	30 e8       	ldi	r19, 0x80	; 128
 ed6:	93 07       	cpc	r25, r19
 ed8:	10 f0       	brcs	.+4      	; 0xede <strtol+0x1f8>
 eda:	af ef       	ldi	r26, 0xFF	; 255
 edc:	01 c0       	rjmp	.+2      	; 0xee0 <strtol+0x1fa>
 ede:	a1 e0       	ldi	r26, 0x01	; 1
 ee0:	f6 01       	movw	r30, r12
 ee2:	14 91       	lpm	r17, Z
 ee4:	e7 fc       	sbrc	r14, 7
 ee6:	10 81       	ld	r17, Z
 ee8:	4f ef       	ldi	r20, 0xFF	; 255
 eea:	c4 1a       	sub	r12, r20
 eec:	d4 0a       	sbc	r13, r20
 eee:	e4 0a       	sbc	r14, r20
 ef0:	c8 cf       	rjmp	.-112    	; 0xe82 <strtol+0x19c>
 ef2:	20 2f       	mov	r18, r16
 ef4:	21 70       	andi	r18, 0x01	; 1
 ef6:	a1 14       	cp	r10, r1
 ef8:	b1 04       	cpc	r11, r1
 efa:	b1 f0       	breq	.+44     	; 0xf28 <strtol+0x242>
 efc:	aa 23       	and	r26, r26
 efe:	49 f0       	breq	.+18     	; 0xf12 <strtol+0x22c>
 f00:	51 e0       	ldi	r21, 0x01	; 1
 f02:	c5 1a       	sub	r12, r21
 f04:	d1 08       	sbc	r13, r1
 f06:	e1 08       	sbc	r14, r1
 f08:	f5 01       	movw	r30, r10
 f0a:	c0 82       	st	Z, r12
 f0c:	d1 82       	std	Z+1, r13	; 0x01
 f0e:	e2 82       	std	Z+2, r14	; 0x02
 f10:	0b c0       	rjmp	.+22     	; 0xf28 <strtol+0x242>
 f12:	01 ff       	sbrs	r16, 1
 f14:	1d c0       	rjmp	.+58     	; 0xf50 <strtol+0x26a>
 f16:	f2 e0       	ldi	r31, 0x02	; 2
 f18:	cf 1a       	sub	r12, r31
 f1a:	d1 08       	sbc	r13, r1
 f1c:	e1 08       	sbc	r14, r1
 f1e:	f5 01       	movw	r30, r10
 f20:	c0 82       	st	Z, r12
 f22:	d1 82       	std	Z+1, r13	; 0x01
 f24:	e2 82       	std	Z+2, r14	; 0x02
 f26:	14 c0       	rjmp	.+40     	; 0xf50 <strtol+0x26a>
 f28:	a7 ff       	sbrs	r26, 7
 f2a:	12 c0       	rjmp	.+36     	; 0xf50 <strtol+0x26a>
 f2c:	22 23       	and	r18, r18
 f2e:	29 f0       	breq	.+10     	; 0xf3a <strtol+0x254>
 f30:	60 e0       	ldi	r22, 0x00	; 0
 f32:	70 e0       	ldi	r23, 0x00	; 0
 f34:	80 e0       	ldi	r24, 0x00	; 0
 f36:	90 e8       	ldi	r25, 0x80	; 128
 f38:	04 c0       	rjmp	.+8      	; 0xf42 <strtol+0x25c>
 f3a:	6f ef       	ldi	r22, 0xFF	; 255
 f3c:	7f ef       	ldi	r23, 0xFF	; 255
 f3e:	8f ef       	ldi	r24, 0xFF	; 255
 f40:	9f e7       	ldi	r25, 0x7F	; 127
 f42:	22 e2       	ldi	r18, 0x22	; 34
 f44:	30 e0       	ldi	r19, 0x00	; 0
 f46:	30 93 b7 04 	sts	0x04B7, r19	; 0x8004b7 <errno+0x1>
 f4a:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <errno>
 f4e:	09 c0       	rjmp	.+18     	; 0xf62 <strtol+0x27c>
 f50:	22 23       	and	r18, r18
 f52:	81 f0       	breq	.+32     	; 0xf74 <strtol+0x28e>
 f54:	90 95       	com	r25
 f56:	80 95       	com	r24
 f58:	70 95       	com	r23
 f5a:	61 95       	neg	r22
 f5c:	7f 4f       	sbci	r23, 0xFF	; 255
 f5e:	8f 4f       	sbci	r24, 0xFF	; 255
 f60:	9f 4f       	sbci	r25, 0xFF	; 255
 f62:	46 2f       	mov	r20, r22
 f64:	37 2f       	mov	r19, r23
 f66:	28 2f       	mov	r18, r24
 f68:	12 c0       	rjmp	.+36     	; 0xf8e <strtol+0x2a8>
 f6a:	40 e0       	ldi	r20, 0x00	; 0
 f6c:	30 e0       	ldi	r19, 0x00	; 0
 f6e:	20 e0       	ldi	r18, 0x00	; 0
 f70:	90 e0       	ldi	r25, 0x00	; 0
 f72:	0d c0       	rjmp	.+26     	; 0xf8e <strtol+0x2a8>
 f74:	97 ff       	sbrs	r25, 7
 f76:	f5 cf       	rjmp	.-22     	; 0xf62 <strtol+0x27c>
 f78:	82 e2       	ldi	r24, 0x22	; 34
 f7a:	90 e0       	ldi	r25, 0x00	; 0
 f7c:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <errno+0x1>
 f80:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <errno>
 f84:	6f ef       	ldi	r22, 0xFF	; 255
 f86:	7f ef       	ldi	r23, 0xFF	; 255
 f88:	8f ef       	ldi	r24, 0xFF	; 255
 f8a:	9f e7       	ldi	r25, 0x7F	; 127
 f8c:	ea cf       	rjmp	.-44     	; 0xf62 <strtol+0x27c>
 f8e:	64 2f       	mov	r22, r20
 f90:	73 2f       	mov	r23, r19
 f92:	82 2f       	mov	r24, r18
 f94:	26 96       	adiw	r28, 0x06	; 6
 f96:	0f b6       	in	r0, 0x3f	; 63
 f98:	f8 94       	cli
 f9a:	de bf       	out	0x3e, r29	; 62
 f9c:	0f be       	out	0x3f, r0	; 63
 f9e:	cd bf       	out	0x3d, r28	; 61
 fa0:	df 91       	pop	r29
 fa2:	cf 91       	pop	r28
 fa4:	1f 91       	pop	r17
 fa6:	0f 91       	pop	r16
 fa8:	ef 90       	pop	r14
 faa:	df 90       	pop	r13
 fac:	cf 90       	pop	r12
 fae:	bf 90       	pop	r11
 fb0:	af 90       	pop	r10
 fb2:	8f 90       	pop	r8
 fb4:	7f 90       	pop	r7
 fb6:	6f 90       	pop	r6
 fb8:	5f 90       	pop	r5
 fba:	4f 90       	pop	r4
 fbc:	3f 90       	pop	r3
 fbe:	2f 90       	pop	r2
 fc0:	08 95       	ret

Disassembly of section .text.avrlibc:

00001464 <__ftoa_engine>:
    1464:	28 30       	cpi	r18, 0x08	; 8
    1466:	08 f0       	brcs	.+2      	; 0x146a <__ftoa_engine+0x6>
    1468:	27 e0       	ldi	r18, 0x07	; 7
    146a:	33 27       	eor	r19, r19
    146c:	da 01       	movw	r26, r20
    146e:	99 0f       	add	r25, r25
    1470:	31 1d       	adc	r19, r1
    1472:	87 fd       	sbrc	r24, 7
    1474:	91 60       	ori	r25, 0x01	; 1
    1476:	00 96       	adiw	r24, 0x00	; 0
    1478:	61 05       	cpc	r22, r1
    147a:	71 05       	cpc	r23, r1
    147c:	39 f4       	brne	.+14     	; 0x148c <__ftoa_engine+0x28>
    147e:	32 60       	ori	r19, 0x02	; 2
    1480:	2e 5f       	subi	r18, 0xFE	; 254
    1482:	3d 93       	st	X+, r19
    1484:	30 e3       	ldi	r19, 0x30	; 48
    1486:	2a 95       	dec	r18
    1488:	e1 f7       	brne	.-8      	; 0x1482 <__ftoa_engine+0x1e>
    148a:	08 95       	ret
    148c:	9f 3f       	cpi	r25, 0xFF	; 255
    148e:	30 f0       	brcs	.+12     	; 0x149c <__ftoa_engine+0x38>
    1490:	80 38       	cpi	r24, 0x80	; 128
    1492:	71 05       	cpc	r23, r1
    1494:	61 05       	cpc	r22, r1
    1496:	09 f0       	breq	.+2      	; 0x149a <__ftoa_engine+0x36>
    1498:	3c 5f       	subi	r19, 0xFC	; 252
    149a:	3c 5f       	subi	r19, 0xFC	; 252
    149c:	3d 93       	st	X+, r19
    149e:	91 30       	cpi	r25, 0x01	; 1
    14a0:	08 f0       	brcs	.+2      	; 0x14a4 <__ftoa_engine+0x40>
    14a2:	80 68       	ori	r24, 0x80	; 128
    14a4:	91 1d       	adc	r25, r1
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	1f 93       	push	r17
    14ac:	0f 93       	push	r16
    14ae:	ff 92       	push	r15
    14b0:	ef 92       	push	r14
    14b2:	19 2f       	mov	r17, r25
    14b4:	98 7f       	andi	r25, 0xF8	; 248
    14b6:	96 95       	lsr	r25
    14b8:	e9 2f       	mov	r30, r25
    14ba:	96 95       	lsr	r25
    14bc:	96 95       	lsr	r25
    14be:	e9 0f       	add	r30, r25
    14c0:	ff 27       	eor	r31, r31
    14c2:	e0 50       	subi	r30, 0x00	; 0
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	99 27       	eor	r25, r25
    14c8:	33 27       	eor	r19, r19
    14ca:	ee 24       	eor	r14, r14
    14cc:	ff 24       	eor	r15, r15
    14ce:	a7 01       	movw	r20, r14
    14d0:	e7 01       	movw	r28, r14
    14d2:	05 90       	lpm	r0, Z+
    14d4:	08 94       	sec
    14d6:	07 94       	ror	r0
    14d8:	28 f4       	brcc	.+10     	; 0x14e4 <__ftoa_engine+0x80>
    14da:	36 0f       	add	r19, r22
    14dc:	e7 1e       	adc	r14, r23
    14de:	f8 1e       	adc	r15, r24
    14e0:	49 1f       	adc	r20, r25
    14e2:	51 1d       	adc	r21, r1
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	06 94       	lsr	r0
    14ee:	a1 f7       	brne	.-24     	; 0x14d8 <__ftoa_engine+0x74>
    14f0:	05 90       	lpm	r0, Z+
    14f2:	07 94       	ror	r0
    14f4:	28 f4       	brcc	.+10     	; 0x1500 <__ftoa_engine+0x9c>
    14f6:	e7 0e       	add	r14, r23
    14f8:	f8 1e       	adc	r15, r24
    14fa:	49 1f       	adc	r20, r25
    14fc:	56 1f       	adc	r21, r22
    14fe:	c1 1d       	adc	r28, r1
    1500:	77 0f       	add	r23, r23
    1502:	88 1f       	adc	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	66 1f       	adc	r22, r22
    1508:	06 94       	lsr	r0
    150a:	a1 f7       	brne	.-24     	; 0x14f4 <__ftoa_engine+0x90>
    150c:	05 90       	lpm	r0, Z+
    150e:	07 94       	ror	r0
    1510:	28 f4       	brcc	.+10     	; 0x151c <__ftoa_engine+0xb8>
    1512:	f8 0e       	add	r15, r24
    1514:	49 1f       	adc	r20, r25
    1516:	56 1f       	adc	r21, r22
    1518:	c7 1f       	adc	r28, r23
    151a:	d1 1d       	adc	r29, r1
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	66 1f       	adc	r22, r22
    1522:	77 1f       	adc	r23, r23
    1524:	06 94       	lsr	r0
    1526:	a1 f7       	brne	.-24     	; 0x1510 <__ftoa_engine+0xac>
    1528:	05 90       	lpm	r0, Z+
    152a:	07 94       	ror	r0
    152c:	20 f4       	brcc	.+8      	; 0x1536 <__ftoa_engine+0xd2>
    152e:	49 0f       	add	r20, r25
    1530:	56 1f       	adc	r21, r22
    1532:	c7 1f       	adc	r28, r23
    1534:	d8 1f       	adc	r29, r24
    1536:	99 0f       	add	r25, r25
    1538:	66 1f       	adc	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	88 1f       	adc	r24, r24
    153e:	06 94       	lsr	r0
    1540:	a9 f7       	brne	.-22     	; 0x152c <__ftoa_engine+0xc8>
    1542:	84 91       	lpm	r24, Z
    1544:	10 95       	com	r17
    1546:	17 70       	andi	r17, 0x07	; 7
    1548:	41 f0       	breq	.+16     	; 0x155a <__ftoa_engine+0xf6>
    154a:	d6 95       	lsr	r29
    154c:	c7 95       	ror	r28
    154e:	57 95       	ror	r21
    1550:	47 95       	ror	r20
    1552:	f7 94       	ror	r15
    1554:	e7 94       	ror	r14
    1556:	1a 95       	dec	r17
    1558:	c1 f7       	brne	.-16     	; 0x154a <__ftoa_engine+0xe6>
    155a:	e6 ea       	ldi	r30, 0xA6	; 166
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	68 94       	set
    1560:	15 90       	lpm	r1, Z+
    1562:	15 91       	lpm	r17, Z+
    1564:	35 91       	lpm	r19, Z+
    1566:	65 91       	lpm	r22, Z+
    1568:	95 91       	lpm	r25, Z+
    156a:	05 90       	lpm	r0, Z+
    156c:	7f e2       	ldi	r23, 0x2F	; 47
    156e:	73 95       	inc	r23
    1570:	e1 18       	sub	r14, r1
    1572:	f1 0a       	sbc	r15, r17
    1574:	43 0b       	sbc	r20, r19
    1576:	56 0b       	sbc	r21, r22
    1578:	c9 0b       	sbc	r28, r25
    157a:	d0 09       	sbc	r29, r0
    157c:	c0 f7       	brcc	.-16     	; 0x156e <__ftoa_engine+0x10a>
    157e:	e1 0c       	add	r14, r1
    1580:	f1 1e       	adc	r15, r17
    1582:	43 1f       	adc	r20, r19
    1584:	56 1f       	adc	r21, r22
    1586:	c9 1f       	adc	r28, r25
    1588:	d0 1d       	adc	r29, r0
    158a:	7e f4       	brtc	.+30     	; 0x15aa <__ftoa_engine+0x146>
    158c:	70 33       	cpi	r23, 0x30	; 48
    158e:	11 f4       	brne	.+4      	; 0x1594 <__ftoa_engine+0x130>
    1590:	8a 95       	dec	r24
    1592:	e6 cf       	rjmp	.-52     	; 0x1560 <__ftoa_engine+0xfc>
    1594:	e8 94       	clt
    1596:	01 50       	subi	r16, 0x01	; 1
    1598:	30 f0       	brcs	.+12     	; 0x15a6 <__ftoa_engine+0x142>
    159a:	08 0f       	add	r16, r24
    159c:	0a f4       	brpl	.+2      	; 0x15a0 <__ftoa_engine+0x13c>
    159e:	00 27       	eor	r16, r16
    15a0:	02 17       	cp	r16, r18
    15a2:	08 f4       	brcc	.+2      	; 0x15a6 <__ftoa_engine+0x142>
    15a4:	20 2f       	mov	r18, r16
    15a6:	23 95       	inc	r18
    15a8:	02 2f       	mov	r16, r18
    15aa:	7a 33       	cpi	r23, 0x3A	; 58
    15ac:	28 f0       	brcs	.+10     	; 0x15b8 <__ftoa_engine+0x154>
    15ae:	79 e3       	ldi	r23, 0x39	; 57
    15b0:	7d 93       	st	X+, r23
    15b2:	2a 95       	dec	r18
    15b4:	e9 f7       	brne	.-6      	; 0x15b0 <__ftoa_engine+0x14c>
    15b6:	10 c0       	rjmp	.+32     	; 0x15d8 <__ftoa_engine+0x174>
    15b8:	7d 93       	st	X+, r23
    15ba:	2a 95       	dec	r18
    15bc:	89 f6       	brne	.-94     	; 0x1560 <__ftoa_engine+0xfc>
    15be:	06 94       	lsr	r0
    15c0:	97 95       	ror	r25
    15c2:	67 95       	ror	r22
    15c4:	37 95       	ror	r19
    15c6:	17 95       	ror	r17
    15c8:	17 94       	ror	r1
    15ca:	e1 18       	sub	r14, r1
    15cc:	f1 0a       	sbc	r15, r17
    15ce:	43 0b       	sbc	r20, r19
    15d0:	56 0b       	sbc	r21, r22
    15d2:	c9 0b       	sbc	r28, r25
    15d4:	d0 09       	sbc	r29, r0
    15d6:	98 f0       	brcs	.+38     	; 0x15fe <__ftoa_engine+0x19a>
    15d8:	23 95       	inc	r18
    15da:	7e 91       	ld	r23, -X
    15dc:	73 95       	inc	r23
    15de:	7a 33       	cpi	r23, 0x3A	; 58
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <__ftoa_engine+0x180>
    15e2:	70 e3       	ldi	r23, 0x30	; 48
    15e4:	7c 93       	st	X, r23
    15e6:	20 13       	cpse	r18, r16
    15e8:	b8 f7       	brcc	.-18     	; 0x15d8 <__ftoa_engine+0x174>
    15ea:	7e 91       	ld	r23, -X
    15ec:	70 61       	ori	r23, 0x10	; 16
    15ee:	7d 93       	st	X+, r23
    15f0:	30 f0       	brcs	.+12     	; 0x15fe <__ftoa_engine+0x19a>
    15f2:	83 95       	inc	r24
    15f4:	71 e3       	ldi	r23, 0x31	; 49
    15f6:	7d 93       	st	X+, r23
    15f8:	70 e3       	ldi	r23, 0x30	; 48
    15fa:	2a 95       	dec	r18
    15fc:	e1 f7       	brne	.-8      	; 0x15f6 <__ftoa_engine+0x192>
    15fe:	11 24       	eor	r1, r1
    1600:	ef 90       	pop	r14
    1602:	ff 90       	pop	r15
    1604:	0f 91       	pop	r16
    1606:	1f 91       	pop	r17
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	99 27       	eor	r25, r25
    160e:	87 fd       	sbrc	r24, 7
    1610:	90 95       	com	r25
    1612:	08 95       	ret

Disassembly of section .text.avrlibc:

00003ed8 <isspace>:
    3ed8:	91 11       	cpse	r25, r1
    3eda:	0c 94 7a 20 	jmp	0x40f4	; 0x40f4 <__ctype_isfalse>
    3ede:	80 32       	cpi	r24, 0x20	; 32
    3ee0:	19 f0       	breq	.+6      	; 0x3ee8 <isspace+0x10>
    3ee2:	89 50       	subi	r24, 0x09	; 9
    3ee4:	85 50       	subi	r24, 0x05	; 5
    3ee6:	c8 f7       	brcc	.-14     	; 0x3eda <isspace+0x2>
    3ee8:	08 95       	ret

Disassembly of section .text.avrlibc:

0000397e <memcpy>:
    397e:	cf 92       	push	r12
    3980:	df 92       	push	r13
    3982:	ef 92       	push	r14
    3984:	dc 01       	movw	r26, r24
    3986:	6a 01       	movw	r12, r20
    3988:	e6 2e       	mov	r14, r22
    398a:	28 0f       	add	r18, r24
    398c:	39 1f       	adc	r19, r25
    398e:	a2 17       	cp	r26, r18
    3990:	b3 07       	cpc	r27, r19
    3992:	51 f0       	breq	.+20     	; 0x39a8 <memcpy+0x2a>
    3994:	f6 01       	movw	r30, r12
    3996:	44 91       	lpm	r20, Z
    3998:	e7 fc       	sbrc	r14, 7
    399a:	40 81       	ld	r20, Z
    399c:	4d 93       	st	X+, r20
    399e:	4f ef       	ldi	r20, 0xFF	; 255
    39a0:	c4 1a       	sub	r12, r20
    39a2:	d4 0a       	sbc	r13, r20
    39a4:	e4 0a       	sbc	r14, r20
    39a6:	f3 cf       	rjmp	.-26     	; 0x398e <memcpy+0x10>
    39a8:	ef 90       	pop	r14
    39aa:	df 90       	pop	r13
    39ac:	cf 90       	pop	r12
    39ae:	08 95       	ret

Disassembly of section .text.avrlibc:

00003acc <strcat>:
    3acc:	9a 01       	movw	r18, r20
    3ace:	46 2f       	mov	r20, r22
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	bd 01       	movw	r22, r26
    3ad4:	6f 5f       	subi	r22, 0xFF	; 255
    3ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad8:	5c 91       	ld	r21, X
    3ada:	55 23       	and	r21, r21
    3adc:	11 f0       	breq	.+4      	; 0x3ae2 <strcat+0x16>
    3ade:	db 01       	movw	r26, r22
    3ae0:	f8 cf       	rjmp	.-16     	; 0x3ad2 <strcat+0x6>
    3ae2:	f9 01       	movw	r30, r18
    3ae4:	54 91       	lpm	r21, Z
    3ae6:	47 fd       	sbrc	r20, 7
    3ae8:	50 81       	ld	r21, Z
    3aea:	5d 93       	st	X+, r21
    3aec:	55 23       	and	r21, r21
    3aee:	21 f0       	breq	.+8      	; 0x3af8 <strcat+0x2c>
    3af0:	2f 5f       	subi	r18, 0xFF	; 255
    3af2:	3f 4f       	sbci	r19, 0xFF	; 255
    3af4:	4f 4f       	sbci	r20, 0xFF	; 255
    3af6:	f5 cf       	rjmp	.-22     	; 0x3ae2 <strcat+0x16>
    3af8:	08 95       	ret

Disassembly of section .text.avrlibc:

000035f8 <strcmp>:
    35f8:	cf 92       	push	r12
    35fa:	df 92       	push	r13
    35fc:	ef 92       	push	r14
    35fe:	6b 01       	movw	r12, r22
    3600:	e8 2e       	mov	r14, r24
    3602:	f6 01       	movw	r30, r12
    3604:	84 91       	lpm	r24, Z
    3606:	e7 fc       	sbrc	r14, 7
    3608:	80 81       	ld	r24, Z
    360a:	f9 01       	movw	r30, r18
    360c:	54 91       	lpm	r21, Z
    360e:	47 fd       	sbrc	r20, 7
    3610:	50 81       	ld	r21, Z
    3612:	85 13       	cpse	r24, r21
    3614:	0b c0       	rjmp	.+22     	; 0x362c <strcmp+0x34>
    3616:	88 23       	and	r24, r24
    3618:	41 f0       	breq	.+16     	; 0x362a <strcmp+0x32>
    361a:	8f ef       	ldi	r24, 0xFF	; 255
    361c:	c8 1a       	sub	r12, r24
    361e:	d8 0a       	sbc	r13, r24
    3620:	e8 0a       	sbc	r14, r24
    3622:	2f 5f       	subi	r18, 0xFF	; 255
    3624:	3f 4f       	sbci	r19, 0xFF	; 255
    3626:	4f 4f       	sbci	r20, 0xFF	; 255
    3628:	ec cf       	rjmp	.-40     	; 0x3602 <strcmp+0xa>
    362a:	58 2f       	mov	r21, r24
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	85 1b       	sub	r24, r21
    3630:	91 09       	sbc	r25, r1
    3632:	ef 90       	pop	r14
    3634:	df 90       	pop	r13
    3636:	cf 90       	pop	r12
    3638:	08 95       	ret

Disassembly of section .text.avrlibc:

00002c6a <strncmp>:
    2c6a:	cf 92       	push	r12
    2c6c:	df 92       	push	r13
    2c6e:	ef 92       	push	r14
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	6b 01       	movw	r12, r22
    2c76:	e8 2e       	mov	r14, r24
    2c78:	01 15       	cp	r16, r1
    2c7a:	11 05       	cpc	r17, r1
    2c7c:	19 f1       	breq	.+70     	; 0x2cc4 <strncmp+0x5a>
    2c7e:	01 50       	subi	r16, 0x01	; 1
    2c80:	11 09       	sbc	r17, r1
    2c82:	f6 01       	movw	r30, r12
    2c84:	84 91       	lpm	r24, Z
    2c86:	e7 fc       	sbrc	r14, 7
    2c88:	80 81       	ld	r24, Z
    2c8a:	88 23       	and	r24, r24
    2c8c:	99 f0       	breq	.+38     	; 0x2cb4 <strncmp+0x4a>
    2c8e:	f9 01       	movw	r30, r18
    2c90:	94 91       	lpm	r25, Z
    2c92:	47 fd       	sbrc	r20, 7
    2c94:	90 81       	ld	r25, Z
    2c96:	99 23       	and	r25, r25
    2c98:	69 f0       	breq	.+26     	; 0x2cb4 <strncmp+0x4a>
    2c9a:	01 15       	cp	r16, r1
    2c9c:	11 05       	cpc	r17, r1
    2c9e:	51 f0       	breq	.+20     	; 0x2cb4 <strncmp+0x4a>
    2ca0:	89 13       	cpse	r24, r25
    2ca2:	08 c0       	rjmp	.+16     	; 0x2cb4 <strncmp+0x4a>
    2ca4:	8f ef       	ldi	r24, 0xFF	; 255
    2ca6:	c8 1a       	sub	r12, r24
    2ca8:	d8 0a       	sbc	r13, r24
    2caa:	e8 0a       	sbc	r14, r24
    2cac:	2f 5f       	subi	r18, 0xFF	; 255
    2cae:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb0:	4f 4f       	sbci	r20, 0xFF	; 255
    2cb2:	e5 cf       	rjmp	.-54     	; 0x2c7e <strncmp+0x14>
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	f9 01       	movw	r30, r18
    2cb8:	24 91       	lpm	r18, Z
    2cba:	47 fd       	sbrc	r20, 7
    2cbc:	20 81       	ld	r18, Z
    2cbe:	82 1b       	sub	r24, r18
    2cc0:	91 09       	sbc	r25, r1
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <strncmp+0x5e>
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	ef 90       	pop	r14
    2cce:	df 90       	pop	r13
    2cd0:	cf 90       	pop	r12
    2cd2:	08 95       	ret

Disassembly of section .text.avrlibc:

00003afa <strlen>:
    3afa:	cf 92       	push	r12
    3afc:	df 92       	push	r13
    3afe:	ef 92       	push	r14
    3b00:	6b 01       	movw	r12, r22
    3b02:	e8 2e       	mov	r14, r24
    3b04:	a8 2f       	mov	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	fc 01       	movw	r30, r24
    3b0a:	24 91       	lpm	r18, Z
    3b0c:	a7 fd       	sbrc	r26, 7
    3b0e:	20 81       	ld	r18, Z
    3b10:	22 23       	and	r18, r18
    3b12:	19 f0       	breq	.+6      	; 0x3b1a <strlen+0x20>
    3b14:	01 96       	adiw	r24, 0x01	; 1
    3b16:	a1 1d       	adc	r26, r1
    3b18:	f7 cf       	rjmp	.-18     	; 0x3b08 <strlen+0xe>
    3b1a:	8c 19       	sub	r24, r12
    3b1c:	9d 09       	sbc	r25, r13
    3b1e:	ef 90       	pop	r14
    3b20:	df 90       	pop	r13
    3b22:	cf 90       	pop	r12
    3b24:	08 95       	ret

Disassembly of section .text.avrlibc:

00003d2a <strcpy>:
    3d2a:	9a 01       	movw	r18, r20
    3d2c:	46 2f       	mov	r20, r22
    3d2e:	dc 01       	movw	r26, r24
    3d30:	f9 01       	movw	r30, r18
    3d32:	54 91       	lpm	r21, Z
    3d34:	47 fd       	sbrc	r20, 7
    3d36:	50 81       	ld	r21, Z
    3d38:	5d 93       	st	X+, r21
    3d3a:	55 23       	and	r21, r21
    3d3c:	21 f0       	breq	.+8      	; 0x3d46 <strcpy+0x1c>
    3d3e:	2f 5f       	subi	r18, 0xFF	; 255
    3d40:	3f 4f       	sbci	r19, 0xFF	; 255
    3d42:	4f 4f       	sbci	r20, 0xFF	; 255
    3d44:	f5 cf       	rjmp	.-22     	; 0x3d30 <strcpy+0x6>
    3d46:	08 95       	ret

Disassembly of section .text.avrlibc:

000038b0 <strnlen>:
    38b0:	cf 92       	push	r12
    38b2:	df 92       	push	r13
    38b4:	ef 92       	push	r14
    38b6:	6b 01       	movw	r12, r22
    38b8:	e8 2e       	mov	r14, r24
    38ba:	a8 2f       	mov	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	41 15       	cp	r20, r1
    38c0:	51 05       	cpc	r21, r1
    38c2:	31 f4       	brne	.+12     	; 0x38d0 <strnlen+0x20>
    38c4:	8c 19       	sub	r24, r12
    38c6:	9d 09       	sbc	r25, r13
    38c8:	ef 90       	pop	r14
    38ca:	df 90       	pop	r13
    38cc:	cf 90       	pop	r12
    38ce:	08 95       	ret
    38d0:	fc 01       	movw	r30, r24
    38d2:	24 91       	lpm	r18, Z
    38d4:	a7 fd       	sbrc	r26, 7
    38d6:	20 81       	ld	r18, Z
    38d8:	22 23       	and	r18, r18
    38da:	a1 f3       	breq	.-24     	; 0x38c4 <strnlen+0x14>
    38dc:	01 96       	adiw	r24, 0x01	; 1
    38de:	a1 1d       	adc	r26, r1
    38e0:	41 50       	subi	r20, 0x01	; 1
    38e2:	51 09       	sbc	r21, r1
    38e4:	ec cf       	rjmp	.-40     	; 0x38be <strnlen+0xe>

Disassembly of section .text.avrlibc:

00002a2c <fputc>:
    2a2c:	0f 93       	push	r16
    2a2e:	1f 93       	push	r17
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	fb 01       	movw	r30, r22
    2a36:	24 81       	ldd	r18, Z+4	; 0x04
    2a38:	21 fd       	sbrc	r18, 1
    2a3a:	03 c0       	rjmp	.+6      	; 0x2a42 <fputc+0x16>
    2a3c:	8f ef       	ldi	r24, 0xFF	; 255
    2a3e:	9f ef       	ldi	r25, 0xFF	; 255
    2a40:	2c c0       	rjmp	.+88     	; 0x2a9a <fputc+0x6e>
    2a42:	22 ff       	sbrs	r18, 2
    2a44:	16 c0       	rjmp	.+44     	; 0x2a72 <fputc+0x46>
    2a46:	47 81       	ldd	r20, Z+7	; 0x07
    2a48:	50 85       	ldd	r21, Z+8	; 0x08
    2a4a:	25 81       	ldd	r18, Z+5	; 0x05
    2a4c:	36 81       	ldd	r19, Z+6	; 0x06
    2a4e:	42 17       	cp	r20, r18
    2a50:	53 07       	cpc	r21, r19
    2a52:	44 f4       	brge	.+16     	; 0x2a64 <fputc+0x38>
    2a54:	a0 81       	ld	r26, Z
    2a56:	b1 81       	ldd	r27, Z+1	; 0x01
    2a58:	9d 01       	movw	r18, r26
    2a5a:	2f 5f       	subi	r18, 0xFF	; 255
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	31 83       	std	Z+1, r19	; 0x01
    2a60:	20 83       	st	Z, r18
    2a62:	8c 93       	st	X, r24
    2a64:	27 81       	ldd	r18, Z+7	; 0x07
    2a66:	30 85       	ldd	r19, Z+8	; 0x08
    2a68:	2f 5f       	subi	r18, 0xFF	; 255
    2a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6c:	30 87       	std	Z+8, r19	; 0x08
    2a6e:	27 83       	std	Z+7, r18	; 0x07
    2a70:	14 c0       	rjmp	.+40     	; 0x2a9a <fputc+0x6e>
    2a72:	8b 01       	movw	r16, r22
    2a74:	ec 01       	movw	r28, r24
    2a76:	fb 01       	movw	r30, r22
    2a78:	01 84       	ldd	r0, Z+9	; 0x09
    2a7a:	f2 85       	ldd	r31, Z+10	; 0x0a
    2a7c:	e0 2d       	mov	r30, r0
    2a7e:	09 95       	icall
    2a80:	89 2b       	or	r24, r25
    2a82:	e1 f6       	brne	.-72     	; 0x2a3c <fputc+0x10>
    2a84:	d8 01       	movw	r26, r16
    2a86:	17 96       	adiw	r26, 0x07	; 7
    2a88:	8d 91       	ld	r24, X+
    2a8a:	9c 91       	ld	r25, X
    2a8c:	18 97       	sbiw	r26, 0x08	; 8
    2a8e:	01 96       	adiw	r24, 0x01	; 1
    2a90:	18 96       	adiw	r26, 0x08	; 8
    2a92:	9c 93       	st	X, r25
    2a94:	8e 93       	st	-X, r24
    2a96:	17 97       	sbiw	r26, 0x07	; 7
    2a98:	ce 01       	movw	r24, r28
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	08 95       	ret

Disassembly of section .text.avrlibc:

000034a4 <sprintf>:
    34a4:	af e0       	ldi	r26, 0x0F	; 15
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e8 e5       	ldi	r30, 0x58	; 88
    34aa:	fa e1       	ldi	r31, 0x1A	; 26
    34ac:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <__prologue_saves__+0x1c>
    34b0:	0e 89       	ldd	r16, Y+22	; 0x16
    34b2:	1f 89       	ldd	r17, Y+23	; 0x17
    34b4:	86 e0       	ldi	r24, 0x06	; 6
    34b6:	8d 83       	std	Y+5, r24	; 0x05
    34b8:	1a 83       	std	Y+2, r17	; 0x02
    34ba:	09 83       	std	Y+1, r16	; 0x01
    34bc:	8f ef       	ldi	r24, 0xFF	; 255
    34be:	9f e7       	ldi	r25, 0x7F	; 127
    34c0:	9f 83       	std	Y+7, r25	; 0x07
    34c2:	8e 83       	std	Y+6, r24	; 0x06
    34c4:	9e 01       	movw	r18, r28
    34c6:	25 5e       	subi	r18, 0xE5	; 229
    34c8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ca:	48 8d       	ldd	r20, Y+24	; 0x18
    34cc:	59 8d       	ldd	r21, Y+25	; 0x19
    34ce:	6a 8d       	ldd	r22, Y+26	; 0x1a
    34d0:	ce 01       	movw	r24, r28
    34d2:	01 96       	adiw	r24, 0x01	; 1
    34d4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <vfprintf>
    34d8:	e8 85       	ldd	r30, Y+8	; 0x08
    34da:	f9 85       	ldd	r31, Y+9	; 0x09
    34dc:	e0 0f       	add	r30, r16
    34de:	f1 1f       	adc	r31, r17
    34e0:	10 82       	st	Z, r1
    34e2:	2f 96       	adiw	r28, 0x0f	; 15
    34e4:	e4 e0       	ldi	r30, 0x04	; 4
    34e6:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00002238 <__ultoa_invert>:
    2238:	fa 01       	movw	r30, r20
    223a:	aa 27       	eor	r26, r26
    223c:	28 30       	cpi	r18, 0x08	; 8
    223e:	51 f1       	breq	.+84     	; 0x2294 <__ultoa_invert+0x5c>
    2240:	20 31       	cpi	r18, 0x10	; 16
    2242:	81 f1       	breq	.+96     	; 0x22a4 <__ultoa_invert+0x6c>
    2244:	e8 94       	clt
    2246:	6f 93       	push	r22
    2248:	6e 7f       	andi	r22, 0xFE	; 254
    224a:	6e 5f       	subi	r22, 0xFE	; 254
    224c:	7f 4f       	sbci	r23, 0xFF	; 255
    224e:	8f 4f       	sbci	r24, 0xFF	; 255
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	af 4f       	sbci	r26, 0xFF	; 255
    2254:	b1 e0       	ldi	r27, 0x01	; 1
    2256:	3e d0       	rcall	.+124    	; 0x22d4 <__ultoa_invert+0x9c>
    2258:	b4 e0       	ldi	r27, 0x04	; 4
    225a:	3c d0       	rcall	.+120    	; 0x22d4 <__ultoa_invert+0x9c>
    225c:	67 0f       	add	r22, r23
    225e:	78 1f       	adc	r23, r24
    2260:	89 1f       	adc	r24, r25
    2262:	9a 1f       	adc	r25, r26
    2264:	a1 1d       	adc	r26, r1
    2266:	68 0f       	add	r22, r24
    2268:	79 1f       	adc	r23, r25
    226a:	8a 1f       	adc	r24, r26
    226c:	91 1d       	adc	r25, r1
    226e:	a1 1d       	adc	r26, r1
    2270:	6a 0f       	add	r22, r26
    2272:	71 1d       	adc	r23, r1
    2274:	81 1d       	adc	r24, r1
    2276:	91 1d       	adc	r25, r1
    2278:	a1 1d       	adc	r26, r1
    227a:	20 d0       	rcall	.+64     	; 0x22bc <__ultoa_invert+0x84>
    227c:	09 f4       	brne	.+2      	; 0x2280 <__ultoa_invert+0x48>
    227e:	68 94       	set
    2280:	3f 91       	pop	r19
    2282:	2a e0       	ldi	r18, 0x0A	; 10
    2284:	26 9f       	mul	r18, r22
    2286:	11 24       	eor	r1, r1
    2288:	30 19       	sub	r19, r0
    228a:	30 5d       	subi	r19, 0xD0	; 208
    228c:	31 93       	st	Z+, r19
    228e:	de f6       	brtc	.-74     	; 0x2246 <__ultoa_invert+0xe>
    2290:	cf 01       	movw	r24, r30
    2292:	08 95       	ret
    2294:	46 2f       	mov	r20, r22
    2296:	47 70       	andi	r20, 0x07	; 7
    2298:	40 5d       	subi	r20, 0xD0	; 208
    229a:	41 93       	st	Z+, r20
    229c:	b3 e0       	ldi	r27, 0x03	; 3
    229e:	0f d0       	rcall	.+30     	; 0x22be <__ultoa_invert+0x86>
    22a0:	c9 f7       	brne	.-14     	; 0x2294 <__ultoa_invert+0x5c>
    22a2:	f6 cf       	rjmp	.-20     	; 0x2290 <__ultoa_invert+0x58>
    22a4:	46 2f       	mov	r20, r22
    22a6:	4f 70       	andi	r20, 0x0F	; 15
    22a8:	40 5d       	subi	r20, 0xD0	; 208
    22aa:	4a 33       	cpi	r20, 0x3A	; 58
    22ac:	18 f0       	brcs	.+6      	; 0x22b4 <__ultoa_invert+0x7c>
    22ae:	49 5d       	subi	r20, 0xD9	; 217
    22b0:	31 fd       	sbrc	r19, 1
    22b2:	40 52       	subi	r20, 0x20	; 32
    22b4:	41 93       	st	Z+, r20
    22b6:	02 d0       	rcall	.+4      	; 0x22bc <__ultoa_invert+0x84>
    22b8:	a9 f7       	brne	.-22     	; 0x22a4 <__ultoa_invert+0x6c>
    22ba:	ea cf       	rjmp	.-44     	; 0x2290 <__ultoa_invert+0x58>
    22bc:	b4 e0       	ldi	r27, 0x04	; 4
    22be:	a6 95       	lsr	r26
    22c0:	97 95       	ror	r25
    22c2:	87 95       	ror	r24
    22c4:	77 95       	ror	r23
    22c6:	67 95       	ror	r22
    22c8:	ba 95       	dec	r27
    22ca:	c9 f7       	brne	.-14     	; 0x22be <__ultoa_invert+0x86>
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	61 05       	cpc	r22, r1
    22d0:	71 05       	cpc	r23, r1
    22d2:	08 95       	ret
    22d4:	9b 01       	movw	r18, r22
    22d6:	ac 01       	movw	r20, r24
    22d8:	0a 2e       	mov	r0, r26
    22da:	06 94       	lsr	r0
    22dc:	57 95       	ror	r21
    22de:	47 95       	ror	r20
    22e0:	37 95       	ror	r19
    22e2:	27 95       	ror	r18
    22e4:	ba 95       	dec	r27
    22e6:	c9 f7       	brne	.-14     	; 0x22da <__ultoa_invert+0xa2>
    22e8:	62 0f       	add	r22, r18
    22ea:	73 1f       	adc	r23, r19
    22ec:	84 1f       	adc	r24, r20
    22ee:	95 1f       	adc	r25, r21
    22f0:	a0 1d       	adc	r26, r0
    22f2:	08 95       	ret

Disassembly of section .text.avrlibc:

000040f4 <__ctype_isfalse>:
    40f4:	99 27       	eor	r25, r25
    40f6:	88 27       	eor	r24, r24

000040f8 <__ctype_istrue>:
    40f8:	08 95       	ret

Disassembly of section .text.avrlibc:

00003bc6 <eeprom_read_block>:
    3bc6:	ba 01       	movw	r22, r20
    3bc8:	a9 01       	movw	r20, r18
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22

00003bce <eeprom_read_blraw>:
    3bce:	fc 01       	movw	r30, r24
    3bd0:	f9 99       	sbic	0x1f, 1	; 31
    3bd2:	fe cf       	rjmp	.-4      	; 0x3bd0 <eeprom_read_blraw+0x2>
    3bd4:	06 c0       	rjmp	.+12     	; 0x3be2 <eeprom_read_blraw+0x14>
    3bd6:	f2 bd       	out	0x22, r31	; 34
    3bd8:	e1 bd       	out	0x21, r30	; 33
    3bda:	f8 9a       	sbi	0x1f, 0	; 31
    3bdc:	31 96       	adiw	r30, 0x01	; 1
    3bde:	00 b4       	in	r0, 0x20	; 32
    3be0:	0d 92       	st	X+, r0
    3be2:	41 50       	subi	r20, 0x01	; 1
    3be4:	50 40       	sbci	r21, 0x00	; 0
    3be6:	b8 f7       	brcc	.-18     	; 0x3bd6 <eeprom_read_blraw+0x8>
    3be8:	08 95       	ret

Disassembly of section .text.avrlibc:

00003eea <eeprom_read_byte>:
    3eea:	cb 01       	movw	r24, r22
    3eec:	f9 99       	sbic	0x1f, 1	; 31
    3eee:	fe cf       	rjmp	.-4      	; 0x3eec <eeprom_read_byte+0x2>
    3ef0:	92 bd       	out	0x22, r25	; 34
    3ef2:	81 bd       	out	0x21, r24	; 33
    3ef4:	f8 9a       	sbi	0x1f, 0	; 31
    3ef6:	99 27       	eor	r25, r25
    3ef8:	80 b5       	in	r24, 0x20	; 32
    3efa:	08 95       	ret

Disassembly of section .text.avrlibc:

00003ffc <eeprom_read_dword>:
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	a6 e1       	ldi	r26, 0x16	; 22
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	44 e0       	ldi	r20, 0x04	; 4
    4004:	50 e0       	ldi	r21, 0x00	; 0
    4006:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000400a <eeprom_read_word>:
    400a:	cb 01       	movw	r24, r22
    400c:	a8 e1       	ldi	r26, 0x18	; 24
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	42 e0       	ldi	r20, 0x02	; 2
    4012:	50 e0       	ldi	r21, 0x00	; 0
    4014:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000352e <eeprom_update_block>:
    352e:	cf 92       	push	r12
    3530:	df 92       	push	r13
    3532:	ef 92       	push	r14
    3534:	21 50       	subi	r18, 0x01	; 1
    3536:	31 09       	sbc	r19, r1
    3538:	c0 f0       	brcs	.+48     	; 0x356a <eeprom_update_block+0x3c>
    353a:	6b 01       	movw	r12, r22
    353c:	e8 2e       	mov	r14, r24
    353e:	c2 0e       	add	r12, r18
    3540:	d3 1e       	adc	r13, r19
    3542:	e1 1c       	adc	r14, r1
    3544:	ca 01       	movw	r24, r20
    3546:	82 0f       	add	r24, r18
    3548:	93 1f       	adc	r25, r19
    354a:	42 2f       	mov	r20, r18
    354c:	73 2f       	mov	r23, r19
    354e:	f6 01       	movw	r30, r12
    3550:	5e 2d       	mov	r21, r14
    3552:	0e 94 51 20 	call	0x40a2	; 0x40a2 <__xload_1>
    3556:	26 2f       	mov	r18, r22
    3558:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <eeprom_update_r18>
    355c:	31 e0       	ldi	r19, 0x01	; 1
    355e:	c3 1a       	sub	r12, r19
    3560:	d1 08       	sbc	r13, r1
    3562:	e1 08       	sbc	r14, r1
    3564:	41 50       	subi	r20, 0x01	; 1
    3566:	70 40       	sbci	r23, 0x00	; 0
    3568:	90 f7       	brcc	.-28     	; 0x354e <eeprom_update_block+0x20>
    356a:	ef 90       	pop	r14
    356c:	df 90       	pop	r13
    356e:	cf 90       	pop	r12
    3570:	08 95       	ret

Disassembly of section .text.avrlibc:

00003bea <eeprom_update_byte>:
    3bea:	26 2f       	mov	r18, r22

00003bec <eeprom_update_r18>:
    3bec:	f9 99       	sbic	0x1f, 1	; 31
    3bee:	fe cf       	rjmp	.-4      	; 0x3bec <eeprom_update_r18>
    3bf0:	92 bd       	out	0x22, r25	; 34
    3bf2:	81 bd       	out	0x21, r24	; 33
    3bf4:	f8 9a       	sbi	0x1f, 0	; 31
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	00 b4       	in	r0, 0x20	; 32
    3bfa:	02 16       	cp	r0, r18
    3bfc:	39 f0       	breq	.+14     	; 0x3c0c <eeprom_update_r18+0x20>
    3bfe:	1f ba       	out	0x1f, r1	; 31
    3c00:	20 bd       	out	0x20, r18	; 32
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	fa 9a       	sbi	0x1f, 2	; 31
    3c08:	f9 9a       	sbi	0x1f, 1	; 31
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	08 95       	ret

Disassembly of section .text.avrlibc:

00003dca <eeprom_update_dword>:
    3dca:	03 96       	adiw	r24, 0x03	; 3
    3dcc:	27 2f       	mov	r18, r23
    3dce:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <eeprom_update_r18>
    3dd2:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <eeprom_update_byte>
    3dd6:	25 2f       	mov	r18, r21
    3dd8:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <eeprom_update_r18>
    3ddc:	24 2f       	mov	r18, r20
    3dde:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <eeprom_update_r18>

Disassembly of section .text.avrlibc:

00004078 <eeprom_update_word>:
    4078:	01 96       	adiw	r24, 0x01	; 1
    407a:	27 2f       	mov	r18, r23
    407c:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <eeprom_update_r18>
    4080:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00003c92 <__mulsi3>:
    3c92:	db 01       	movw	r26, r22
    3c94:	8f 93       	push	r24
    3c96:	9f 93       	push	r25
    3c98:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__muluhisi3>
    3c9c:	bf 91       	pop	r27
    3c9e:	af 91       	pop	r26
    3ca0:	a2 9f       	mul	r26, r18
    3ca2:	80 0d       	add	r24, r0
    3ca4:	91 1d       	adc	r25, r1
    3ca6:	a3 9f       	mul	r26, r19
    3ca8:	90 0d       	add	r25, r0
    3caa:	b2 9f       	mul	r27, r18
    3cac:	90 0d       	add	r25, r0
    3cae:	11 24       	eor	r1, r1
    3cb0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003572 <__udivmodsi4>:
    3572:	a1 e2       	ldi	r26, 0x21	; 33
    3574:	1a 2e       	mov	r1, r26
    3576:	aa 1b       	sub	r26, r26
    3578:	bb 1b       	sub	r27, r27
    357a:	fd 01       	movw	r30, r26
    357c:	0d c0       	rjmp	.+26     	; 0x3598 <__udivmodsi4_ep>

0000357e <__udivmodsi4_loop>:
    357e:	aa 1f       	adc	r26, r26
    3580:	bb 1f       	adc	r27, r27
    3582:	ee 1f       	adc	r30, r30
    3584:	ff 1f       	adc	r31, r31
    3586:	a2 17       	cp	r26, r18
    3588:	b3 07       	cpc	r27, r19
    358a:	e4 07       	cpc	r30, r20
    358c:	f5 07       	cpc	r31, r21
    358e:	20 f0       	brcs	.+8      	; 0x3598 <__udivmodsi4_ep>
    3590:	a2 1b       	sub	r26, r18
    3592:	b3 0b       	sbc	r27, r19
    3594:	e4 0b       	sbc	r30, r20
    3596:	f5 0b       	sbc	r31, r21

00003598 <__udivmodsi4_ep>:
    3598:	66 1f       	adc	r22, r22
    359a:	77 1f       	adc	r23, r23
    359c:	88 1f       	adc	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	1a 94       	dec	r1
    35a2:	69 f7       	brne	.-38     	; 0x357e <__udivmodsi4_loop>
    35a4:	60 95       	com	r22
    35a6:	70 95       	com	r23
    35a8:	80 95       	com	r24
    35aa:	90 95       	com	r25
    35ac:	9b 01       	movw	r18, r22
    35ae:	ac 01       	movw	r20, r24
    35b0:	bd 01       	movw	r22, r26
    35b2:	cf 01       	movw	r24, r30
    35b4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003e24 <__muluhisi3>:
    3e24:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__umulhisi3>
    3e28:	a5 9f       	mul	r26, r21
    3e2a:	90 0d       	add	r25, r0
    3e2c:	b4 9f       	mul	r27, r20
    3e2e:	90 0d       	add	r25, r0
    3e30:	a4 9f       	mul	r26, r20
    3e32:	80 0d       	add	r24, r0
    3e34:	91 1d       	adc	r25, r1
    3e36:	11 24       	eor	r1, r1
    3e38:	08 95       	ret

Disassembly of section .text.libgcc:

000040a2 <__xload_1>:
    40a2:	57 fd       	sbrc	r21, 7
    40a4:	60 81       	ld	r22, Z
    40a6:	57 ff       	sbrs	r21, 7
    40a8:	64 91       	lpm	r22, Z
    40aa:	08 95       	ret
