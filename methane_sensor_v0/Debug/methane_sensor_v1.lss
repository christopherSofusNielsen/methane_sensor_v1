
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00003bd4  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000612  00800100  00800100  00003bd4  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007c0  00000000  00000000  00003c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000bdef  00000000  00000000  000043ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000272f  00000000  00000000  000101de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000043eb  00000000  00000000  0001290d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000014ec  00000000  00000000  00016cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d2b  00000000  00000000  000181e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004c5c  00000000  00000000  00018f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006c8  00000000  00000000  0001db6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00003a6c  00003a6c  00003ba0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e234  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.PM_HAL_adc_power_init 0000000e  000038e0  000038e0  00003a14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.PM_HAL_adc_power 00000014  000037e8  000037e8  0000391c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_meth_power_init 0000000e  000038ee  000038ee  00003a22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power 00000014  000037fc  000037fc  00003930  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_SCD30_power_init 0000000e  000038fc  000038fc  00003a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power 00000014  00003810  00003810  00003944  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_BC_power_init 0000000e  0000390a  0000390a  00003a3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power 00000014  00003824  00003824  00003958  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_enter_power_down 00000042  00002dc6  00002dc6  00002efa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_3 00000014  00003838  00003838  0000396c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_reset_active 00000008  00003a00  00003a00  00003b34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.rn2483_reset_deactive 00000008  00003a08  00003a08  00003b3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SCD30_HAL_init 0000000e  00003918  00003918  00003a4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.SCD30_HAL_data_ready 0000000a  000039d8  000039d8  00003b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.TC0_HAL_init 00000020  00003586  00003586  000036ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.TC0_HAL_start 00000006  00003a30  00003a30  00003b64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.TC0_HAL_stop 00000004  00003a70  00003a70  00003ba4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_16 0000004e  00002858  00002858  0000298c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss._cb      00000002  00800d90  00800d90  00003bd4  2**0
                  ALLOC
 33 .text.TC1_HAL_init 00000034  00003142  00003142  00003276  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC1_HAL_start 0000000c  0000396c  0000396c  00003aa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC1_HAL_stop 0000000c  00003978  00003978  00003aac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_13 0000004e  000028a6  000028a6  000029da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800d92  00800d92  00003bd4  2**0
                  ALLOC
 38 .text.start_timer 00000008  00003a10  00003a10  00003b44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.stop_timer 00000006  00003a36  00003a36  00003b6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC2_HAL_init 00000020  000035a6  000035a6  000036da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TC2_HAL_subscribe 00000054  00002762  00002762  00002896  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TC2_HAL_cancel 0000003a  00002fc0  00002fc0  000030f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_9 00000098  00001de0  00001de0  00001f14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .bss.cnt      00000001  00800da6  00800da6  00003bd4  2**0
                  ALLOC
 45 .bss.cbCounter 00000001  00800da7  00800da7  00003bd4  2**0
                  ALLOC
 46 .bss.callbacks 0000000a  00800d6b  00800d6b  00003bd4  2**0
                  ALLOC
 47 .text.start_and_write_data 0000004c  00002990  00002990  00002ac4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.read_and_stop 0000005a  000026b0  000026b0  000027e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TWI_API_write_data 00000006  00003a3c  00003a3c  00003b70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.TWI_API_write_data_stop 00000010  000038c0  000038c0  000039f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.TWI_API_read_data_ack_end_nack_stop 00000024  00003472  00003472  000035a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.TWI_API_repeat_read_data_stop 00000022  000034ba  000034ba  000035ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.TWI_HAL_init 00000012  0000389c  0000389c  000039d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_HAL_start 00000048  00002b06  00002b06  00002c3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_HAL_repeated_start 00000042  00002e08  00002e08  00002f3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_HAL_write_byte 00000020  000035c6  000035c6  000036fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_HAL_read_byte_ack 00000014  0000384c  0000384c  00003980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_HAL_read_byte_nack 00000014  00003860  00003860  00003994  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_HAL_stop 00000010  000038d0  000038d0  00003a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.copy_buffer 0000002e  00003398  00003398  000034cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.uart0_hal_init 0000003c  00002f48  00002f48  0000307c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uart0_hal_send_message 00000034  00003176  00003176  000032aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart0_hal_send_string 0000006a  00002400  00002400  00002534  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart0_hal_message_ready 0000000e  00003926  00003926  00003a5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart0_hal_clear_rx_buffer 0000000a  000039e2  000039e2  00003b16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart0_hal_read_message_as_str 00000028  0000344a  0000344a  0000357e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart0_hal_send_break 00000046  00002c26  00002c26  00002d5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.__vector_22 0000004a  00002a28  00002a28  00002b5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__vector_20 00000074  000022ac  000022ac  000023e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .bss.rx_buffer_has_message 00000001  00800da8  00800da8  00003bd4  2**0
                  ALLOC
 71 .bss.rx_buffer_data_len 00000001  00800da9  00800da9  00003bd4  2**0
                  ALLOC
 72 .bss.tx_buffer_cursor 00000001  00800daa  00800daa  00003bd4  2**0
                  ALLOC
 73 .bss.tx_buffer_data_len 00000001  00800dab  00800dab  00003bd4  2**0
                  ALLOC
 74 .text.uart1_hal_init 0000003c  00002f84  00002f84  000030b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_30 0000004a  00002a72  00002a72  00002ba6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_28 00000070  00002320  00002320  00002454  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800dac  00800dac  00003bd4  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800dad  00800dad  00003bd4  2**0
                  ALLOC
 79 .bss.rx_buffer 00000064  00800cee  00800cee  00003bd4  2**0
                  ALLOC
 80 .bss.tx_buffer_cursor 00000001  00800dae  00800dae  00003bd4  2**0
                  ALLOC
 81 .bss.tx_buffer_data_len 00000001  00800daf  00800daf  00003bd4  2**0
                  ALLOC
 82 .bss.tx_buffer 0000012c  00800bc2  00800bc2  00003bd4  2**0
                  ALLOC
 83 .text.main    00000018  0000375a  0000375a  0000388e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.vect_ADC_heat_timeout 00000018  00003772  00003772  000038a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.ADC_init_sampling 00000066  000024d4  000024d4  00002608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.ADC_deinit_sampling 00000014  00003874  00003874  000039a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.ADC_is_sampling_done 0000001c  00003662  00003662  00003796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.ADC_meth_sens_power_on 00000020  000035e6  000035e6  0000371a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.ADC_meth_sens_ready 00000012  000038ae  000038ae  000039e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.calc_ppm_methane 00000096  00001e78  00001e78  00001fac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ADC_get_value 0000005c  00002654  00002654  00002788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.vect_ADC_do_sample 00000046  00002c6c  00002c6c  00002da0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.ADC_start_sampling 0000000c  00003984  00003984  00003ab8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .bss.cntPowerUpTime 00000001  00800db0  00800db0  00003bd4  2**0
                  ALLOC
 95 .bss._powerUpTime 00000001  00800db1  00800db1  00003bd4  2**0
                  ALLOC
 96 .bss.cntSamples 00000002  00800d94  00800d94  00003bd4  2**0
                  ALLOC
 97 .bss._data    00000002  00800d96  00800d96  00003bd4  2**0
                  ALLOC
 98 .bss._nSamples 00000002  00800d98  00800d98  00003bd4  2**0
                  ALLOC
 99 .data.PPM_factor 00000004  00800d80  00003a92  00003bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
100 .data.RRL     00000004  00800d84  00003a96  00003bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
101 .data.Vc      00000004  00800d88  00003a9a  00003bce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
102 .progmemx.data 00000038  00000293  00000293  000003c7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
103 .text.JN_join_network 00000296  0000076a  0000076a  0000089e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.set_block_uplink 00000018  0000378a  0000378a  000038be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.block_uplink 0000001c  0000367e  0000367e  000037b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.LM_join_network 00000006  00003a42  00003a42  00003b76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.LM_send_uplink 0000002e  000033c6  000033c6  000034fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.LM_put_to_sleep 00000006  00003a48  00003a48  00003b7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.LM_wake_up 00000006  00003a4e  00003a4e  00003b82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.LM_is_free 0000000a  000039ec  000039ec  00003b20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.subPointer 00000001  00800db2  00800db2  00003bd4  2**0
                  ALLOC
112 .bss.busy     00000001  00800db3  00800db3  00003bd4  2**0
                  ALLOC
113 .bss.cnt      00000001  00800db4  00800db4  00003bd4  2**0
                  ALLOC
114 .progmemx.data 00000073  00000220  00000220  00000354  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
115 .text.tohex   00000084  000020bc  000020bc  000021f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.attach_ending 0000001c  0000369a  0000369a  000037ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.cmd_with_ending 00000032  000031de  000031de  00003312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.sys_sleep_cmd 0000005e  0000253a  0000253a  0000266e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.mac_set_parameter 0000004e  000028f4  000028f4  00002a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.mac_set_deveui 00000048  00002b4e  00002b4e  00002c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.mac_set_appeui 00000048  00002b96  00002b96  00002cca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.mac_set_appkey 00000048  00002bde  00002bde  00002d12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.mac_set_ADR 00000030  000032d8  000032d8  0000340c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.mac_tx_confirmed 000000ac  00001b4c  00001b4c  00001c80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.beginsWidth 0000004a  00002abc  00002abc  00002bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .progmemx.data 00000027  000002cb  000002cb  000003ff  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
127 .text.decode_tx_response 00000052  000027b6  000027b6  000028ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.SU_send_uplink 000000f8  000013be  000013be  000014f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .progmemx.data 00000003  0000031c  0000031c  00000450  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
130 .text.SC_put_to_sleep 0000004c  000029dc  000029dc  00002b10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.SC_wake_up 00000032  00003210  00003210  00003344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.LM_strbeginswith 00000044  00002d3e  00002d3e  00002e72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.util_setPendingStates 0000000c  00003990  00003990  00003ac4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.util_setMatchCase 0000000c  0000399c  0000399c  00003ad0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.util_matchMessage 0000005e  00002598  00002598  000026cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.util_transmit_msg 0000001c  000036b6  000036b6  000037ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.util_read_msg 00000006  00003a54  00003a54  00003b88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .progmemx.data 00000020  000002f2  000002f2  00000426  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
139 .text.util_parse_err 00000058  0000270a  0000270a  0000283e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.get_group_id 00000006  00003a5a  00003a5a  00003b8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.set_group_id 00000006  00003a60  00003a60  00003b94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.MRPP_init_group 00000032  00003242  00003242  00003376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.MRPP_add_collection_data_INT16 00000070  00002390  00002390  000024c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.MRPP_is_body_package_ready 00000022  000034dc  000034dc  00003610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.MRPP_get_ready_body_package 00000096  00001f0e  00001f0e  00002042  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.MRPP_set_body_sent 0000000c  000039a8  000039a8  00003adc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.MRPP_get_header_package 00000022  000034fe  000034fe  00003632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.MRPP_get_tail_package 00000022  00003520  00003520  00003654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.MRPP_all_body_package_sent 0000000a  000039f6  000039f6  00003b2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .bss._groupId 00000001  00800db5  00800db5  00003bd4  2**0
                  ALLOC
151 .text.mrpp_data_add_int16 00000092  00001fa4  00001fa4  000020d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.mrpp_data_get 00000030  00003308  00003308  0000343c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.add_data_types 000000d8  00001684  00001684  000017b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.update_bodies 00000162  00000dda  00000dda  00000f0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.mrpp_state_init 000001be  00000c1c  00000c1c  00000d50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.mrpp_state_get_header 000000a2  00001c9c  00001c9c  00001dd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.mrpp_state_get_tail 000000a4  00001bf8  00001bf8  00001d2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.mrpp_state_set_collection 00000086  00002036  00002036  0000216a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.mrpp_state_is_body_ready 00000030  00003338  00003338  0000346c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.mrpp_state_all_bodies_sent 0000002a  00003420  00003420  00003554  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.mrpp_state_get_ready_body 0000011a  0000119e  0000119e  000012d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.mrpp_state_set_body_sent 00000020  00003606  00003606  0000373a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.mrpp_state_get_collection_address 00000036  0000306a  0000306a  0000319e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.cb_cnt_time 00000030  00003368  00003368  0000349c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.PUMP_start 00000024  00003496  00003496  000035ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.PUMP_is_done 0000001c  000036d2  000036d2  00003806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.eventPointer 00000001  00800db6  00800db6  00003bd4  2**0
                  ALLOC
168 .bss.cnt      00000002  00800d9a  00800d9a  00003bd4  2**0
                  ALLOC
169 .bss._seconds 00000002  00800d9c  00800d9c  00003bd4  2**0
                  ALLOC
170 .text.RTC_set_clock_out 00000050  00002808  00002808  0000293c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.RTC_clear_wake_up_interrupt 00000034  000031aa  000031aa  000032de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.RTC_get_current_time 00000140  00000f3c  00000f3c  00001070  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .rodata       00000005  00800d7b  00003a8d  00003bc1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
174 .text.RTC_set_wake_up_interrupt_minutes 000000c4  000019cc  000019cc  00001b00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.RTC_datetime_to_ts 00000122  0000107c  0000107c  000011b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .progmemx.data.CMD_READ_TIME_POINTER 00000001  00000321  00000321  00000455  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
177 .text.bytes_2_uint 0000001a  00003726  00003726  0000385a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.init_measurement 00000038  00002ffa  00002ffa  0000312e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.validate_data 00000032  00003274  00003274  000033a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.read_value 000000a2  00001d3e  00001d3e  00001e72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.vect_SCD_do_sample 00000046  00002cb2  00002cb2  00002de6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.SCD30_init_sampling 0000004e  00002942  00002942  00002a76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SCD30_deinit_sampling 00000014  00003888  00003888  000039bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.SCD30_start_sampling 0000000c  000039b4  000039b4  00003ae8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.SCD30_is_sampling_done 0000001c  000036ee  000036ee  00003822  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .bss.cntSamples 00000002  00800d9e  00800d9e  00003bd4  2**0
                  ALLOC
187 .bss._data    00000002  00800da0  00800da0  00003bd4  2**0
                  ALLOC
188 .bss._nSamples 00000002  00800da2  00800da2  00003bd4  2**0
                  ALLOC
189 .progmemx.data.READ_DATA_CMD 00000002  0000031f  0000031f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
190 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000312  00000312  00000446  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
191 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  00000317  00000317  0000044b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
192 .text.decode_stage_response 00000016  000037d2  000037d2  00003906  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.decode_join_response 0000001c  0000370a  0000370a  0000383e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.decode_header_tail_response 00000018  000037a2  000037a2  000038d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .progmemx.data 000000d2  0000014e  0000014e  00000282  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
196 .text.join_lora 0000007a  00002140  00002140  00002274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.set_wakeup 00000008  00003a18  00003a18  00003b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.send_header 0000003e  00002ecc  00002ecc  00003000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.stage_0 000000ce  00001830  00001830  00001964  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.stage_1 000000f0  000014b6  000014b6  000015ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.stage_2 00000106  000012b8  000012b8  000013ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.send_body 00000040  00002e8c  00002e8c  00002fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.decode_body_response 00000022  00003542  00003542  00003676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.send_tail 0000003e  00002f0a  00002f0a  0000303e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.send_msg 00000018  000037ba  000037ba  000038ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.MAINPG_start 0000021c  00000a00  00000a00  00000b34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .data.cols    00000019  00800d52  00003a74  00003ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
208 .bss.dt       00000006  00800d75  00800d75  00003bd4  2**0
                  ALLOC
209 .bss.ts       00000004  00800d8c  00800d8c  00003bd4  2**0
                  ALLOC
210 .bss.meth_data 00000258  00800712  00800712  00003bd4  2**0
                  ALLOC
211 .bss.co2_data 00000258  0080096a  0080096a  00003bd4  2**0
                  ALLOC
212 .data.bodyIndex 00000002  00800da4  00003a9e  00003bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
213 .bss.state_s2 00000001  00800db7  00800db7  00003bd4  2**0
                  ALLOC
214 .bss.state_s1 00000001  00800db8  00800db8  00003bd4  2**0
                  ALLOC
215 .bss.state_s0 00000001  00800db9  00800db9  00003bd4  2**0
                  ALLOC
216 .text.calc_crc8 00000036  000030a0  000030a0  000031d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.avrlibc.fplib 0000000e  00003934  00003934  00003a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.avrlibc.fplib 000000ce  000018fe  000018fe  00001a32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.avrlibc.fplib 00000008  00003a20  00003a20  00003b54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.avrlibc.fplib 000000de  000015a6  000015a6  000016da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.avrlibc.fplib 0000005e  000025f6  000025f6  0000272a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.avrlibc.fplib 0000007a  000021ba  000021ba  000022ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.avrlibc.fplib 0000000c  000039c0  000039c0  00003af4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.avrlibc.fplib 00000006  00003a66  00003a66  00003b9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.avrlibc.fplib 0000000e  00003942  00003942  00003a76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.avrlibc.fplib 0000000e  00003950  00003950  00003a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.avrlibc.fplib 00000022  00003564  00003564  00003698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.avrlibc.fplib 00000044  00002d82  00002d82  00002eb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.avrlibc.fplib 0000000e  0000395e  0000395e  00003a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.avrlibc.fplib 00000008  00003a28  00003a28  00003b5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.avrlibc.fplib 000000d4  0000175c  0000175c  00001890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.libgcc  0000000c  000039cc  000039cc  00003b00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.libgcc.mul 0000001e  00003626  00003626  0000375a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.libgcc  0000001a  00003740  00003740  00003874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.avrlibc 00000032  000032a6  000032a6  000033da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.avrlibc 00000042  00002e4a  00002e4a  00002f7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.avrlibc 0000006a  0000246a  0000246a  0000259e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.avrlibc 0000002c  000033f4  000033f4  00003528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.avrlibc 0000001e  00003644  00003644  00003778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.avrlibc 00000046  00002cf8  00002cf8  00002e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.avrlibc 00000448  00000322  00000322  00000456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.avrlibc 00000036  000030d6  000030d6  0000320a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.avrlibc 00000078  00002234  00002234  00002368  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.avrlibc 000000bc  00001a90  00001a90  00001bc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.libgcc.prologue 00000038  00003032  00003032  00003166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc.prologue 00000036  0000310c  0000310c  00003240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
   4:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
   8:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
   c:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__vector_3>
  10:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  14:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  18:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  1c:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  20:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  24:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__vector_9>
  28:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  2c:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  30:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  34:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__vector_13>
  38:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  3c:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  40:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__vector_16>
  44:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  48:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  4c:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  50:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__vector_20>
  54:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  58:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__vector_22>
  5c:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  60:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  64:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  68:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  6c:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  70:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__vector_28>
  74:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__bad_interrupt>
  78:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__vector_30>
  7c:	d3 03       	fmuls	r21, r19
  7e:	dc 04       	cpc	r13, r12
  80:	f2 03       	fmuls	r23, r18
  82:	0f 04       	cpc	r0, r15
  84:	2e 04       	cpc	r2, r14
  86:	4d 04       	cpc	r4, r13
  88:	6c 04       	cpc	r6, r12
  8a:	8b 04       	cpc	r8, r11
  8c:	a8 04       	cpc	r10, r8
  8e:	c5 04       	cpc	r12, r5
  90:	d7 04       	cpc	r13, r7
  92:	ed 04       	cpc	r14, r13
  94:	ef 04       	cpc	r14, r15
  96:	fb 09       	sbc	r31, r11
  98:	2e 0a       	sbc	r2, r30
  9a:	1c 0a       	sbc	r1, r28
  9c:	4a 0a       	sbc	r4, r26
  9e:	4a 0a       	sbc	r4, r26
  a0:	39 0a       	sbc	r3, r25
  a2:	37 0a       	sbc	r3, r23
  a4:	4c 0a       	sbc	r4, r28
  a6:	35 0a       	sbc	r3, r21
  a8:	1f 05       	cpc	r17, r15
  aa:	39 05       	cpc	r19, r9
  ac:	4f 05       	cpc	r20, r15
  ae:	5f 05       	cpc	r21, r15
  b0:	44 05       	cpc	r20, r4
  b2:	66 05       	cpc	r22, r6
  b4:	7d 05       	cpc	r23, r13
  b6:	72 05       	cpc	r23, r2
  b8:	88 05       	cpc	r24, r8
  ba:	94 05       	cpc	r25, r4
  bc:	a1 05       	cpc	r26, r1
  be:	a9 05       	cpc	r26, r9
  c0:	b1 05       	cpc	r27, r1
  c2:	b9 05       	cpc	r27, r9
  c4:	d5 05       	cpc	r29, r5
  c6:	dc 05       	cpc	r29, r12
  c8:	e9 05       	cpc	r30, r9
  ca:	f0 05       	cpc	r31, r0
  cc:	fe 05       	cpc	r31, r14
  ce:	05 06       	cpc	r0, r21

000000d0 <.dinit>:
  d0:	01 00       	.word	0x0001	; ????
  d2:	0d 52       	subi	r16, 0x2D	; 45
  d4:	80 0d       	add	r24, r0
  d6:	52 0d       	add	r21, r2
  d8:	6b 00       	.word	0x006b	; ????
  da:	3a 74       	andi	r19, 0x4A	; 74
  dc:	0d 6b       	ori	r16, 0xBD	; 189
  de:	0d 7b       	andi	r16, 0xBD	; 189
  e0:	80 0d       	add	r24, r0
  e2:	7b 0d       	add	r23, r11
  e4:	8c 00       	.word	0x008c	; ????
  e6:	3a 8d       	ldd	r19, Y+26	; 0x1a
  e8:	0d 8c       	ldd	r0, Y+29	; 0x1d
  ea:	0d a4       	ldd	r0, Y+45	; 0x2d
  ec:	80 0d       	add	r24, r0
  ee:	a4 0d       	add	r26, r4
  f0:	a6 00       	.word	0x00a6	; ????
  f2:	3a 9e       	mul	r3, r26
  f4:	0d a6       	std	Y+45, r0	; 0x2d
  f6:	0d ba       	out	0x1d, r0	; 29
  f8:	80 00       	.word	0x0080	; ????

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d0 e1       	ldi	r29, 0x10	; 16
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
 106:	e0 ed       	ldi	r30, 0xD0	; 208
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	17 c0       	rjmp	.+46     	; 0x13c <__do_clear_bss+0x8>
 10e:	b5 91       	lpm	r27, Z+
 110:	a5 91       	lpm	r26, Z+
 112:	35 91       	lpm	r19, Z+
 114:	25 91       	lpm	r18, Z+
 116:	05 91       	lpm	r16, Z+
 118:	07 fd       	sbrc	r16, 7
 11a:	0c c0       	rjmp	.+24     	; 0x134 <__do_clear_bss>
 11c:	95 91       	lpm	r25, Z+
 11e:	85 91       	lpm	r24, Z+
 120:	ef 01       	movw	r28, r30
 122:	f9 2f       	mov	r31, r25
 124:	e8 2f       	mov	r30, r24
 126:	05 90       	lpm	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	a2 17       	cp	r26, r18
 12c:	b3 07       	cpc	r27, r19
 12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0x20>
 130:	fe 01       	movw	r30, r28
 132:	04 c0       	rjmp	.+8      	; 0x13c <__do_clear_bss+0x8>

00000134 <__do_clear_bss>:
 134:	1d 92       	st	X+, r1
 136:	a2 17       	cp	r26, r18
 138:	b3 07       	cpc	r27, r19
 13a:	e1 f7       	brne	.-8      	; 0x134 <__do_clear_bss>
 13c:	e9 3f       	cpi	r30, 0xF9	; 249
 13e:	f4 07       	cpc	r31, r20
 140:	31 f7       	brne	.-52     	; 0x10e <__do_copy_data+0x8>
 142:	0e 94 ad 1b 	call	0x375a	; 0x375a <main>
 146:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>

Disassembly of section .text:

00003a6c <__bad_interrupt>:
    3a6c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

000038e0 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    38e0:	81 b1       	in	r24, 0x01	; 1
    38e2:	88 60       	ori	r24, 0x08	; 8
    38e4:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    38e6:	82 b1       	in	r24, 0x02	; 2
    38e8:	87 7f       	andi	r24, 0xF7	; 247
    38ea:	82 b9       	out	0x02, r24	; 2
    38ec:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

000037e8 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    37e8:	88 23       	and	r24, r24
    37ea:	21 f0       	breq	.+8      	; 0x37f4 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    37ec:	82 b1       	in	r24, 0x02	; 2
    37ee:	88 60       	ori	r24, 0x08	; 8
    37f0:	82 b9       	out	0x02, r24	; 2
    37f2:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    37f4:	82 b1       	in	r24, 0x02	; 2
    37f6:	87 7f       	andi	r24, 0xF7	; 247
    37f8:	82 b9       	out	0x02, r24	; 2
    37fa:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

000038ee <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    38ee:	81 b1       	in	r24, 0x01	; 1
    38f0:	80 62       	ori	r24, 0x20	; 32
    38f2:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    38f4:	82 b1       	in	r24, 0x02	; 2
    38f6:	8f 7d       	andi	r24, 0xDF	; 223
    38f8:	82 b9       	out	0x02, r24	; 2
    38fa:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

000037fc <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    37fc:	88 23       	and	r24, r24
    37fe:	21 f0       	breq	.+8      	; 0x3808 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    3800:	82 b1       	in	r24, 0x02	; 2
    3802:	80 62       	ori	r24, 0x20	; 32
    3804:	82 b9       	out	0x02, r24	; 2
    3806:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    3808:	82 b1       	in	r24, 0x02	; 2
    380a:	8f 7d       	andi	r24, 0xDF	; 223
    380c:	82 b9       	out	0x02, r24	; 2
    380e:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

000038fc <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    38fc:	81 b1       	in	r24, 0x01	; 1
    38fe:	80 61       	ori	r24, 0x10	; 16
    3900:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    3902:	82 b1       	in	r24, 0x02	; 2
    3904:	8f 7e       	andi	r24, 0xEF	; 239
    3906:	82 b9       	out	0x02, r24	; 2
    3908:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003810 <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    3810:	88 23       	and	r24, r24
    3812:	21 f0       	breq	.+8      	; 0x381c <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    3814:	82 b1       	in	r24, 0x02	; 2
    3816:	80 61       	ori	r24, 0x10	; 16
    3818:	82 b9       	out	0x02, r24	; 2
    381a:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    381c:	82 b1       	in	r24, 0x02	; 2
    381e:	8f 7e       	andi	r24, 0xEF	; 239
    3820:	82 b9       	out	0x02, r24	; 2
    3822:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

0000390a <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    390a:	8a b1       	in	r24, 0x0a	; 10
    390c:	80 61       	ori	r24, 0x10	; 16
    390e:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    3910:	8b b1       	in	r24, 0x0b	; 11
    3912:	8f 7e       	andi	r24, 0xEF	; 239
    3914:	8b b9       	out	0x0b, r24	; 11
    3916:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00003824 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    3824:	88 23       	and	r24, r24
    3826:	21 f0       	breq	.+8      	; 0x3830 <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    3828:	8b b1       	in	r24, 0x0b	; 11
    382a:	80 61       	ori	r24, 0x10	; 16
    382c:	8b b9       	out	0x0b, r24	; 11
    382e:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    3830:	8b b1       	in	r24, 0x0b	; 11
    3832:	8f 7e       	andi	r24, 0xEF	; 239
    3834:	8b b9       	out	0x0b, r24	; 11
    3836:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00002dc6 <PM_HAL_enter_power_down>:
	}
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    2dc6:	84 b1       	in	r24, 0x04	; 4
    2dc8:	8b 7f       	andi	r24, 0xFB	; 251
    2dca:	84 b9       	out	0x04, r24	; 4
	set_bit(PORTB, 2); //Enbale pull up
    2dcc:	85 b1       	in	r24, 0x05	; 5
    2dce:	84 60       	ori	r24, 0x04	; 4
    2dd0:	85 b9       	out	0x05, r24	; 5
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    2dd2:	e9 e6       	ldi	r30, 0x69	; 105
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	8f 7e       	andi	r24, 0xEF	; 239
    2dda:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    2ddc:	80 81       	ld	r24, Z
    2dde:	80 62       	ori	r24, 0x20	; 32
    2de0:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    2de2:	8d b3       	in	r24, 0x1d	; 29
    2de4:	84 60       	ori	r24, 0x04	; 4
    2de6:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2de8:	83 b7       	in	r24, 0x33	; 51
    2dea:	81 7f       	andi	r24, 0xF1	; 241
    2dec:	84 60       	ori	r24, 0x04	; 4
    2dee:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    2df0:	83 b7       	in	r24, 0x33	; 51
    2df2:	81 60       	ori	r24, 0x01	; 1
    2df4:	83 bf       	out	0x33, r24	; 51
	sei();
    2df6:	78 94       	sei
	sleep_cpu();
    2df8:	88 95       	sleep
	sleep_disable();
    2dfa:	83 b7       	in	r24, 0x33	; 51
    2dfc:	8e 7f       	andi	r24, 0xFE	; 254
    2dfe:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    2e00:	8d b3       	in	r24, 0x1d	; 29
    2e02:	8b 7f       	andi	r24, 0xFB	; 251
    2e04:	8d bb       	out	0x1d, r24	; 29
    2e06:	08 95       	ret

Disassembly of section .text.__vector_3:

00003838 <__vector_3>:
}

ISR(INT2_vect){
    3838:	1f 92       	push	r1
    383a:	0f 92       	push	r0
    383c:	0f b6       	in	r0, 0x3f	; 63
    383e:	0f 92       	push	r0
    3840:	11 24       	eor	r1, r1
	
}
    3842:	0f 90       	pop	r0
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	0f 90       	pop	r0
    3848:	1f 90       	pop	r1
    384a:	18 95       	reti

Disassembly of section .text.rn2483_reset_active:

00003a00 <rn2483_reset_active>:
void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    3a00:	85 b1       	in	r24, 0x05	; 5
    3a02:	8f 7e       	andi	r24, 0xEF	; 239
    3a04:	85 b9       	out	0x05, r24	; 5
    3a06:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00003a08 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    3a08:	85 b1       	in	r24, 0x05	; 5
    3a0a:	80 61       	ori	r24, 0x10	; 16
    3a0c:	85 b9       	out	0x05, r24	; 5
    3a0e:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00003918 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    3918:	87 b1       	in	r24, 0x07	; 7
    391a:	8f 7b       	andi	r24, 0xBF	; 191
    391c:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    391e:	88 b1       	in	r24, 0x08	; 8
    3920:	8f 7b       	andi	r24, 0xBF	; 191
    3922:	88 b9       	out	0x08, r24	; 8
    3924:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

000039d8 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    39d8:	86 b1       	in	r24, 0x06	; 6
    39da:	86 fb       	bst	r24, 6
    39dc:	88 27       	eor	r24, r24
    39de:	80 f9       	bld	r24, 0
    39e0:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00003586 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    3586:	92 e0       	ldi	r25, 0x02	; 2
    3588:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    358a:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    358c:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    358e:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    3590:	ee e6       	ldi	r30, 0x6E	; 110
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	82 60       	ori	r24, 0x02	; 2
    3598:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    359a:	78 94       	sei
	
	//Set callback
	_cb=cb;
    359c:	70 93 91 0d 	sts	0x0D91, r23	; 0x800d91 <_cb+0x1>
    35a0:	60 93 90 0d 	sts	0x0D90, r22	; 0x800d90 <_cb>
    35a4:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00003a30 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    3a30:	86 e0       	ldi	r24, 0x06	; 6
    3a32:	85 bd       	out	0x25, r24	; 37
    3a34:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

00003a70 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    3a70:	15 bc       	out	0x25, r1	; 37
    3a72:	08 95       	ret

Disassembly of section .text.__vector_16:

00002858 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    2858:	1f 92       	push	r1
    285a:	0f 92       	push	r0
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	0f 92       	push	r0
    2860:	11 24       	eor	r1, r1
    2862:	2f 93       	push	r18
    2864:	3f 93       	push	r19
    2866:	4f 93       	push	r20
    2868:	5f 93       	push	r21
    286a:	6f 93       	push	r22
    286c:	7f 93       	push	r23
    286e:	8f 93       	push	r24
    2870:	9f 93       	push	r25
    2872:	af 93       	push	r26
    2874:	bf 93       	push	r27
    2876:	ef 93       	push	r30
    2878:	ff 93       	push	r31
	_cb();
    287a:	e0 91 90 0d 	lds	r30, 0x0D90	; 0x800d90 <_cb>
    287e:	f0 91 91 0d 	lds	r31, 0x0D91	; 0x800d91 <_cb+0x1>
    2882:	09 95       	icall
}
    2884:	ff 91       	pop	r31
    2886:	ef 91       	pop	r30
    2888:	bf 91       	pop	r27
    288a:	af 91       	pop	r26
    288c:	9f 91       	pop	r25
    288e:	8f 91       	pop	r24
    2890:	7f 91       	pop	r23
    2892:	6f 91       	pop	r22
    2894:	5f 91       	pop	r21
    2896:	4f 91       	pop	r20
    2898:	3f 91       	pop	r19
    289a:	2f 91       	pop	r18
    289c:	0f 90       	pop	r0
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	0f 90       	pop	r0
    28a2:	1f 90       	pop	r1
    28a4:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00003142 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    3142:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    3146:	28 e0       	ldi	r18, 0x08	; 8
    3148:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    314c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    3150:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3154:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    3158:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    315c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    3160:	ef e6       	ldi	r30, 0x6F	; 111
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	82 60       	ori	r24, 0x02	; 2
    3168:	80 83       	st	Z, r24
	sei();
    316a:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    316c:	70 93 93 0d 	sts	0x0D93, r23	; 0x800d93 <_cb+0x1>
    3170:	60 93 92 0d 	sts	0x0D92, r22	; 0x800d92 <_cb>
    3174:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

0000396c <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    396c:	e1 e8       	ldi	r30, 0x81	; 129
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	86 60       	ori	r24, 0x06	; 6
    3974:	80 83       	st	Z, r24
    3976:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

00003978 <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    3978:	e1 e8       	ldi	r30, 0x81	; 129
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	88 7f       	andi	r24, 0xF8	; 248
    3980:	80 83       	st	Z, r24
    3982:	08 95       	ret

Disassembly of section .text.__vector_13:

000028a6 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    28a6:	1f 92       	push	r1
    28a8:	0f 92       	push	r0
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	0f 92       	push	r0
    28ae:	11 24       	eor	r1, r1
    28b0:	2f 93       	push	r18
    28b2:	3f 93       	push	r19
    28b4:	4f 93       	push	r20
    28b6:	5f 93       	push	r21
    28b8:	6f 93       	push	r22
    28ba:	7f 93       	push	r23
    28bc:	8f 93       	push	r24
    28be:	9f 93       	push	r25
    28c0:	af 93       	push	r26
    28c2:	bf 93       	push	r27
    28c4:	ef 93       	push	r30
    28c6:	ff 93       	push	r31
	_cb();
    28c8:	e0 91 92 0d 	lds	r30, 0x0D92	; 0x800d92 <_cb>
    28cc:	f0 91 93 0d 	lds	r31, 0x0D93	; 0x800d93 <_cb+0x1>
    28d0:	09 95       	icall
    28d2:	ff 91       	pop	r31
    28d4:	ef 91       	pop	r30
    28d6:	bf 91       	pop	r27
    28d8:	af 91       	pop	r26
    28da:	9f 91       	pop	r25
    28dc:	8f 91       	pop	r24
    28de:	7f 91       	pop	r23
    28e0:	6f 91       	pop	r22
    28e2:	5f 91       	pop	r21
    28e4:	4f 91       	pop	r20
    28e6:	3f 91       	pop	r19
    28e8:	2f 91       	pop	r18
    28ea:	0f 90       	pop	r0
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	0f 90       	pop	r0
    28f0:	1f 90       	pop	r1
    28f2:	18 95       	reti

Disassembly of section .text.start_timer:

00003a10 <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    3a10:	87 e0       	ldi	r24, 0x07	; 7
    3a12:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3a16:	08 95       	ret

Disassembly of section .text.stop_timer:

00003a36 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    3a36:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3a3a:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

000035a6 <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    35a6:	82 e0       	ldi	r24, 0x02	; 2
    35a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    35ac:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    35b0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    35b4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    35b8:	9b ef       	ldi	r25, 0xFB	; 251
    35ba:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    35be:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    35c2:	78 94       	sei
    35c4:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00002762 <TC2_HAL_subscribe>:
    2762:	cf 93       	push	r28
    2764:	dc 01       	movw	r26, r24
    2766:	60 91 a7 0d 	lds	r22, 0x0DA7	; 0x800da7 <cbCounter>
    276a:	65 30       	cpi	r22, 0x05	; 5
    276c:	00 f5       	brcc	.+64     	; 0x27ae <TC2_HAL_subscribe+0x4c>
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	15 c0       	rjmp	.+42     	; 0x279c <TC2_HAL_subscribe+0x3a>
    2772:	29 2f       	mov	r18, r25
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	f9 01       	movw	r30, r18
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	e5 59       	subi	r30, 0x95	; 149
    277e:	f2 4f       	sbci	r31, 0xF2	; 242
    2780:	40 81       	ld	r20, Z
    2782:	51 81       	ldd	r21, Z+1	; 0x01
    2784:	45 2b       	or	r20, r21
    2786:	49 f4       	brne	.+18     	; 0x279a <TC2_HAL_subscribe+0x38>
    2788:	22 0f       	add	r18, r18
    278a:	33 1f       	adc	r19, r19
    278c:	f9 01       	movw	r30, r18
    278e:	e5 59       	subi	r30, 0x95	; 149
    2790:	f2 4f       	sbci	r31, 0xF2	; 242
    2792:	b1 83       	std	Z+1, r27	; 0x01
    2794:	a0 83       	st	Z, r26
    2796:	c9 2f       	mov	r28, r25
    2798:	04 c0       	rjmp	.+8      	; 0x27a2 <TC2_HAL_subscribe+0x40>
    279a:	9f 5f       	subi	r25, 0xFF	; 255
    279c:	95 30       	cpi	r25, 0x05	; 5
    279e:	48 f3       	brcs	.-46     	; 0x2772 <TC2_HAL_subscribe+0x10>
    27a0:	cf ef       	ldi	r28, 0xFF	; 255
    27a2:	6f 5f       	subi	r22, 0xFF	; 255
    27a4:	60 93 a7 0d 	sts	0x0DA7, r22	; 0x800da7 <cbCounter>
    27a8:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <start_timer>
    27ac:	01 c0       	rjmp	.+2      	; 0x27b0 <TC2_HAL_subscribe+0x4e>
    27ae:	cf ef       	ldi	r28, 0xFF	; 255
    27b0:	8c 2f       	mov	r24, r28
    27b2:	cf 91       	pop	r28
    27b4:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00002fc0 <TC2_HAL_cancel>:
    2fc0:	08 2e       	mov	r0, r24
    2fc2:	00 0c       	add	r0, r0
    2fc4:	99 0b       	sbc	r25, r25
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	ee 0f       	add	r30, r30
    2fca:	ff 1f       	adc	r31, r31
    2fcc:	e5 59       	subi	r30, 0x95	; 149
    2fce:	f2 4f       	sbci	r31, 0xF2	; 242
    2fd0:	20 81       	ld	r18, Z
    2fd2:	31 81       	ldd	r19, Z+1	; 0x01
    2fd4:	23 2b       	or	r18, r19
    2fd6:	81 f0       	breq	.+32     	; 0x2ff8 <TC2_HAL_cancel+0x38>
    2fd8:	88 0f       	add	r24, r24
    2fda:	99 1f       	adc	r25, r25
    2fdc:	fc 01       	movw	r30, r24
    2fde:	e5 59       	subi	r30, 0x95	; 149
    2fe0:	f2 4f       	sbci	r31, 0xF2	; 242
    2fe2:	11 82       	std	Z+1, r1	; 0x01
    2fe4:	10 82       	st	Z, r1
    2fe6:	80 91 a7 0d 	lds	r24, 0x0DA7	; 0x800da7 <cbCounter>
    2fea:	81 50       	subi	r24, 0x01	; 1
    2fec:	80 93 a7 0d 	sts	0x0DA7, r24	; 0x800da7 <cbCounter>
    2ff0:	81 11       	cpse	r24, r1
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <TC2_HAL_cancel+0x38>
    2ff4:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <stop_timer>
    2ff8:	08 95       	ret

Disassembly of section .text.__vector_9:

00001de0 <__vector_9>:
    1de0:	1f 92       	push	r1
    1de2:	0f 92       	push	r0
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	0f 92       	push	r0
    1de8:	11 24       	eor	r1, r1
    1dea:	2f 93       	push	r18
    1dec:	3f 93       	push	r19
    1dee:	4f 93       	push	r20
    1df0:	5f 93       	push	r21
    1df2:	6f 93       	push	r22
    1df4:	7f 93       	push	r23
    1df6:	8f 93       	push	r24
    1df8:	9f 93       	push	r25
    1dfa:	af 93       	push	r26
    1dfc:	bf 93       	push	r27
    1dfe:	cf 93       	push	r28
    1e00:	ef 93       	push	r30
    1e02:	ff 93       	push	r31
    1e04:	90 91 a6 0d 	lds	r25, 0x0DA6	; 0x800da6 <cnt>
    1e08:	9f 5f       	subi	r25, 0xFF	; 255
    1e0a:	90 93 a6 0d 	sts	0x0DA6, r25	; 0x800da6 <cnt>
    1e0e:	89 e0       	ldi	r24, 0x09	; 9
    1e10:	98 9f       	mul	r25, r24
    1e12:	21 2d       	mov	r18, r1
    1e14:	11 24       	eor	r1, r1
    1e16:	89 2f       	mov	r24, r25
    1e18:	82 1b       	sub	r24, r18
    1e1a:	86 95       	lsr	r24
    1e1c:	82 0f       	add	r24, r18
    1e1e:	82 95       	swap	r24
    1e20:	8f 70       	andi	r24, 0x0F	; 15
    1e22:	2f e1       	ldi	r18, 0x1F	; 31
    1e24:	82 9f       	mul	r24, r18
    1e26:	90 19       	sub	r25, r0
    1e28:	11 24       	eor	r1, r1
    1e2a:	91 11       	cpse	r25, r1
    1e2c:	13 c0       	rjmp	.+38     	; 0x1e54 <__vector_9+0x74>
    1e2e:	10 92 a6 0d 	sts	0x0DA6, r1	; 0x800da6 <cnt>
    1e32:	c0 e0       	ldi	r28, 0x00	; 0
    1e34:	0d c0       	rjmp	.+26     	; 0x1e50 <__vector_9+0x70>
    1e36:	ec 2f       	mov	r30, r28
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	ee 0f       	add	r30, r30
    1e3c:	ff 1f       	adc	r31, r31
    1e3e:	e5 59       	subi	r30, 0x95	; 149
    1e40:	f2 4f       	sbci	r31, 0xF2	; 242
    1e42:	01 90       	ld	r0, Z+
    1e44:	f0 81       	ld	r31, Z
    1e46:	e0 2d       	mov	r30, r0
    1e48:	30 97       	sbiw	r30, 0x00	; 0
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <__vector_9+0x6e>
    1e4c:	09 95       	icall
    1e4e:	cf 5f       	subi	r28, 0xFF	; 255
    1e50:	c5 30       	cpi	r28, 0x05	; 5
    1e52:	88 f3       	brcs	.-30     	; 0x1e36 <__vector_9+0x56>
    1e54:	ff 91       	pop	r31
    1e56:	ef 91       	pop	r30
    1e58:	cf 91       	pop	r28
    1e5a:	bf 91       	pop	r27
    1e5c:	af 91       	pop	r26
    1e5e:	9f 91       	pop	r25
    1e60:	8f 91       	pop	r24
    1e62:	7f 91       	pop	r23
    1e64:	6f 91       	pop	r22
    1e66:	5f 91       	pop	r21
    1e68:	4f 91       	pop	r20
    1e6a:	3f 91       	pop	r19
    1e6c:	2f 91       	pop	r18
    1e6e:	0f 90       	pop	r0
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	0f 90       	pop	r0
    1e74:	1f 90       	pop	r1
    1e76:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00002990 <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    2990:	cf 92       	push	r12
    2992:	df 92       	push	r13
    2994:	ef 92       	push	r14
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	6a 01       	movw	r12, r20
    299c:	e6 2e       	mov	r14, r22
    299e:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	0e 94 83 15 	call	0x2b06	; 0x2b06 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    29a6:	81 11       	cpse	r24, r1
    29a8:	13 c0       	rjmp	.+38     	; 0x29d0 <start_and_write_data+0x40>
    29aa:	c0 e0       	ldi	r28, 0x00	; 0
    29ac:	0e c0       	rjmp	.+28     	; 0x29ca <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    29ae:	ae 2d       	mov	r26, r14
    29b0:	c6 01       	movw	r24, r12
    29b2:	8c 0f       	add	r24, r28
    29b4:	91 1d       	adc	r25, r1
    29b6:	a1 1d       	adc	r26, r1
    29b8:	fc 01       	movw	r30, r24
    29ba:	84 91       	lpm	r24, Z
    29bc:	a7 fd       	sbrc	r26, 7
    29be:	80 81       	ld	r24, Z
    29c0:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    29c4:	81 11       	cpse	r24, r1
    29c6:	04 c0       	rjmp	.+8      	; 0x29d0 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    29c8:	cf 5f       	subi	r28, 0xFF	; 255
    29ca:	cd 17       	cp	r28, r29
    29cc:	80 f3       	brcs	.-32     	; 0x29ae <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    29ce:	80 e0       	ldi	r24, 0x00	; 0
}
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	ef 90       	pop	r14
    29d6:	df 90       	pop	r13
    29d8:	cf 90       	pop	r12
    29da:	08 95       	ret

Disassembly of section .text.read_and_stop:

000026b0 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    26b0:	ef 92       	push	r14
    26b2:	ff 92       	push	r15
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	8c 01       	movw	r16, r24
    26be:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    26c0:	c0 e0       	ldi	r28, 0x00	; 0
    26c2:	08 c0       	rjmp	.+16     	; 0x26d4 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    26c4:	78 01       	movw	r14, r16
    26c6:	ec 0e       	add	r14, r28
    26c8:	f1 1c       	adc	r15, r1
    26ca:	0e 94 26 1c 	call	0x384c	; 0x384c <TWI_HAL_read_byte_ack>
    26ce:	f7 01       	movw	r30, r14
    26d0:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    26d2:	cf 5f       	subi	r28, 0xFF	; 255
    26d4:	2c 2f       	mov	r18, r28
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	8d 2f       	mov	r24, r29
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	28 17       	cp	r18, r24
    26e0:	39 07       	cpc	r19, r25
    26e2:	84 f3       	brlt	.-32     	; 0x26c4 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    26e4:	8d 2f       	mov	r24, r29
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	e8 01       	movw	r28, r16
    26ec:	c8 0f       	add	r28, r24
    26ee:	d9 1f       	adc	r29, r25
    26f0:	0e 94 30 1c 	call	0x3860	; 0x3860 <TWI_HAL_read_byte_nack>
    26f4:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    26f6:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	ff 90       	pop	r15
    2706:	ef 90       	pop	r14
    2708:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003a3c <TWI_API_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
    3a3c:	0e 94 c8 14 	call	0x2990	; 0x2990 <start_and_write_data>
}
    3a40:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

000038c0 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    38c0:	0e 94 c8 14 	call	0x2990	; 0x2990 <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    38c4:	81 11       	cpse	r24, r1
    38c6:	03 c0       	rjmp	.+6      	; 0x38ce <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    38c8:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    38cc:	80 e0       	ldi	r24, 0x00	; 0
}
    38ce:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00003472 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3472:	1f 93       	push	r17
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
    3478:	eb 01       	movw	r28, r22
    347a:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    347c:	61 e0       	ldi	r22, 0x01	; 1
    347e:	0e 94 83 15 	call	0x2b06	; 0x2b06 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3482:	81 11       	cpse	r24, r1
    3484:	04 c0       	rjmp	.+8      	; 0x348e <TWI_API_read_data_ack_end_nack_stop+0x1c>
	
	return read_and_stop(data, length);
    3486:	61 2f       	mov	r22, r17
    3488:	ce 01       	movw	r24, r28
    348a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <read_and_stop>
	//}
	//data[length-1]=TWI_HAL_read_byte_nack();
	//
	//TWI_HAL_stop();
	//return TWI_CODE_SUCCESS;
}
    348e:	df 91       	pop	r29
    3490:	cf 91       	pop	r28
    3492:	1f 91       	pop	r17
    3494:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

000034ba <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    34ba:	1f 93       	push	r17
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	eb 01       	movw	r28, r22
    34c2:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    34c4:	0e 94 04 17 	call	0x2e08	; 0x2e08 <TWI_HAL_repeated_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    34c8:	81 11       	cpse	r24, r1
    34ca:	04 c0       	rjmp	.+8      	; 0x34d4 <TWI_API_repeat_read_data_stop+0x1a>
	
	return read_and_stop(data, length);
    34cc:	61 2f       	mov	r22, r17
    34ce:	ce 01       	movw	r24, r28
    34d0:	0e 94 58 13 	call	0x26b0	; 0x26b0 <read_and_stop>
	
}
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	1f 91       	pop	r17
    34da:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

0000389c <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    389c:	80 e2       	ldi	r24, 0x20	; 32
    389e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    38a2:	e9 eb       	ldi	r30, 0xB9	; 185
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	80 81       	ld	r24, Z
    38a8:	8c 7f       	andi	r24, 0xFC	; 252
    38aa:	80 83       	st	Z, r24
    38ac:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00002b06 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2b0e:	84 ea       	ldi	r24, 0xA4	; 164
    2b10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2b14:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2b18:	99 23       	and	r25, r25
    2b1a:	e4 f7       	brge	.-8      	; 0x2b14 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    2b1c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2b20:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    2b22:	88 30       	cpi	r24, 0x08	; 8
    2b24:	99 f4       	brne	.+38     	; 0x2b4c <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    2b26:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2b2a:	84 e8       	ldi	r24, 0x84	; 132
    2b2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2b30:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2b34:	88 23       	and	r24, r24
    2b36:	e4 f7       	brge	.-8      	; 0x2b30 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    2b38:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2b3c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    2b3e:	88 31       	cpi	r24, 0x18	; 24
    2b40:	21 f0       	breq	.+8      	; 0x2b4a <TWI_HAL_start+0x44>
    2b42:	80 34       	cpi	r24, 0x40	; 64
    2b44:	19 f4       	brne	.+6      	; 0x2b4c <TWI_HAL_start+0x46>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	08 95       	ret
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    2b4c:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00002e08 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	88 0f       	add	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	28 2f       	mov	r18, r24
    2e10:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2e12:	84 ea       	ldi	r24, 0xA4	; 164
    2e14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2e18:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2e1c:	99 23       	and	r25, r25
    2e1e:	e4 f7       	brge	.-8      	; 0x2e18 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    2e20:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2e24:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    2e26:	80 31       	cpi	r24, 0x10	; 16
    2e28:	79 f4       	brne	.+30     	; 0x2e48 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    2e2a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2e2e:	84 e8       	ldi	r24, 0x84	; 132
    2e30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2e34:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2e38:	88 23       	and	r24, r24
    2e3a:	e4 f7       	brge	.-8      	; 0x2e34 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    2e3c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2e40:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    2e42:	80 34       	cpi	r24, 0x40	; 64
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <TWI_HAL_repeated_start+0x40>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    2e48:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

000035c6 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    35c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    35ca:	84 e8       	ldi	r24, 0x84	; 132
    35cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    35d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    35d4:	88 23       	and	r24, r24
    35d6:	e4 f7       	brge	.-8      	; 0x35d0 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    35d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    35dc:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    35de:	88 32       	cpi	r24, 0x28	; 40
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <TWI_HAL_write_byte+0x1e>
    35e2:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    35e4:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

0000384c <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    384c:	84 ec       	ldi	r24, 0xC4	; 196
    384e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    3852:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3856:	88 23       	and	r24, r24
    3858:	e4 f7       	brge	.-8      	; 0x3852 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    385a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    385e:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00003860 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    3860:	84 e8       	ldi	r24, 0x84	; 132
    3862:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    3866:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    386a:	88 23       	and	r24, r24
    386c:	e4 f7       	brge	.-8      	; 0x3866 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    386e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3872:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

000038d0 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    38d0:	84 e9       	ldi	r24, 0x94	; 148
    38d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    38d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    38da:	84 fd       	sbrc	r24, 4
    38dc:	fc cf       	rjmp	.-8      	; 0x38d6 <TWI_HAL_stop+0x6>
}
    38de:	08 95       	ret

Disassembly of section .text.copy_buffer:

00003398 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3398:	bc 01       	movw	r22, r24
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	09 c0       	rjmp	.+18     	; 0x33b0 <copy_buffer+0x18>
    339e:	fb 01       	movw	r30, r22
    33a0:	e9 0f       	add	r30, r25
    33a2:	f1 1d       	adc	r31, r1
    33a4:	da 01       	movw	r26, r20
    33a6:	a0 50       	subi	r26, 0x00	; 0
    33a8:	bf 4f       	sbci	r27, 0xFF	; 255
    33aa:	2c 91       	ld	r18, X
    33ac:	20 83       	st	Z, r18
    33ae:	9f 5f       	subi	r25, 0xFF	; 255
    33b0:	49 2f       	mov	r20, r25
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	20 91 a9 0d 	lds	r18, 0x0DA9	; 0x800da9 <rx_buffer_data_len>
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	22 50       	subi	r18, 0x02	; 2
    33bc:	31 09       	sbc	r19, r1
    33be:	42 17       	cp	r20, r18
    33c0:	53 07       	cpc	r21, r19
    33c2:	6c f3       	brlt	.-38     	; 0x339e <copy_buffer+0x6>
    33c4:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00002f48 <uart0_hal_init>:
    2f48:	e1 ec       	ldi	r30, 0xC1	; 193
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	80 61       	ori	r24, 0x10	; 16
    2f50:	80 83       	st	Z, r24
    2f52:	80 81       	ld	r24, Z
    2f54:	88 60       	ori	r24, 0x08	; 8
    2f56:	80 83       	st	Z, r24
    2f58:	80 81       	ld	r24, Z
    2f5a:	80 68       	ori	r24, 0x80	; 128
    2f5c:	80 83       	st	Z, r24
    2f5e:	80 81       	ld	r24, Z
    2f60:	80 64       	ori	r24, 0x40	; 64
    2f62:	80 83       	st	Z, r24
    2f64:	e0 ec       	ldi	r30, 0xC0	; 192
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	82 60       	ori	r24, 0x02	; 2
    2f6c:	80 83       	st	Z, r24
    2f6e:	86 e0       	ldi	r24, 0x06	; 6
    2f70:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    2f74:	80 e1       	ldi	r24, 0x10	; 16
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    2f7c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    2f80:	78 94       	sei
    2f82:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00003176 <uart0_hal_send_message>:
    3176:	dc 01       	movw	r26, r24
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	0b c0       	rjmp	.+22     	; 0x3192 <uart0_hal_send_message+0x1c>
    317c:	29 2f       	mov	r18, r25
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	fd 01       	movw	r30, r26
    3182:	e2 0f       	add	r30, r18
    3184:	f3 1f       	adc	r31, r19
    3186:	40 81       	ld	r20, Z
    3188:	f9 01       	movw	r30, r18
    318a:	ec 59       	subi	r30, 0x9C	; 156
    318c:	fe 4f       	sbci	r31, 0xFE	; 254
    318e:	40 83       	st	Z, r20
    3190:	9f 5f       	subi	r25, 0xFF	; 255
    3192:	96 17       	cp	r25, r22
    3194:	98 f3       	brcs	.-26     	; 0x317c <uart0_hal_send_message+0x6>
    3196:	60 93 ab 0d 	sts	0x0DAB, r22	; 0x800dab <tx_buffer_data_len>
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	80 93 aa 0d 	sts	0x0DAA, r24	; 0x800daa <tx_buffer_cursor>
    31a0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    31a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    31a8:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002400 <uart0_hal_send_string>:
    2400:	cf 92       	push	r12
    2402:	df 92       	push	r13
    2404:	ef 92       	push	r14
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	cf 93       	push	r28
    240c:	6b 01       	movw	r12, r22
    240e:	e8 2e       	mov	r14, r24
    2410:	c0 e0       	ldi	r28, 0x00	; 0
    2412:	12 c0       	rjmp	.+36     	; 0x2438 <uart0_hal_send_string+0x38>
    2414:	8c 2f       	mov	r24, r28
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	4e 2d       	mov	r20, r14
    241a:	96 01       	movw	r18, r12
    241c:	20 0f       	add	r18, r16
    241e:	31 1f       	adc	r19, r17
    2420:	41 1d       	adc	r20, r1
    2422:	17 fd       	sbrc	r17, 7
    2424:	4a 95       	dec	r20
    2426:	f9 01       	movw	r30, r18
    2428:	24 91       	lpm	r18, Z
    242a:	47 fd       	sbrc	r20, 7
    242c:	20 81       	ld	r18, Z
    242e:	fc 01       	movw	r30, r24
    2430:	ec 59       	subi	r30, 0x9C	; 156
    2432:	fe 4f       	sbci	r31, 0xFE	; 254
    2434:	20 83       	st	Z, r18
    2436:	cf 5f       	subi	r28, 0xFF	; 255
    2438:	0c 2f       	mov	r16, r28
    243a:	10 e0       	ldi	r17, 0x00	; 0
    243c:	8e 2d       	mov	r24, r14
    243e:	b6 01       	movw	r22, r12
    2440:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
    2444:	08 17       	cp	r16, r24
    2446:	19 07       	cpc	r17, r25
    2448:	28 f3       	brcs	.-54     	; 0x2414 <uart0_hal_send_string+0x14>
    244a:	80 93 ab 0d 	sts	0x0DAB, r24	; 0x800dab <tx_buffer_data_len>
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	80 93 aa 0d 	sts	0x0DAA, r24	; 0x800daa <tx_buffer_cursor>
    2454:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2458:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    245c:	cf 91       	pop	r28
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	ef 90       	pop	r14
    2464:	df 90       	pop	r13
    2466:	cf 90       	pop	r12
    2468:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00003926 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    3926:	90 91 a8 0d 	lds	r25, 0x0DA8	; 0x800da8 <rx_buffer_has_message>
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	91 11       	cpse	r25, r1
    392e:	01 c0       	rjmp	.+2      	; 0x3932 <uart0_hal_message_ready+0xc>
    3930:	80 e0       	ldi	r24, 0x00	; 0
}
    3932:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000039e2 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    39e2:	10 92 a8 0d 	sts	0x0DA8, r1	; 0x800da8 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    39e6:	10 92 a9 0d 	sts	0x0DA9, r1	; 0x800da9 <rx_buffer_data_len>
    39ea:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

0000344a <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(uint8_t msg[]){
    344a:	0f 93       	push	r16
    344c:	1f 93       	push	r17
    344e:	cf 93       	push	r28
    3450:	8c 01       	movw	r16, r24
	copy_buffer(msg);
    3452:	0e 94 cc 19 	call	0x3398	; 0x3398 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    3456:	c0 91 a9 0d 	lds	r28, 0x0DA9	; 0x800da9 <rx_buffer_data_len>
    345a:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    345c:	f8 01       	movw	r30, r16
    345e:	ec 0f       	add	r30, r28
    3460:	f1 1d       	adc	r31, r1
    3462:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    3464:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <uart0_hal_clear_rx_buffer>
	return len;
}
    3468:	8c 2f       	mov	r24, r28
    346a:	cf 91       	pop	r28
    346c:	1f 91       	pop	r17
    346e:	0f 91       	pop	r16
    3470:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00002c26 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	1f 92       	push	r1
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	9a b1       	in	r25, 0x0a	; 10
    2c32:	92 60       	ori	r25, 0x02	; 2
    2c34:	9a b9       	out	0x0a, r25	; 10
    2c36:	e1 ec       	ldi	r30, 0xC1	; 193
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	90 81       	ld	r25, Z
    2c3c:	97 7f       	andi	r25, 0xF7	; 247
    2c3e:	90 83       	st	Z, r25
    2c40:	9b b1       	in	r25, 0x0b	; 11
    2c42:	9d 7f       	andi	r25, 0xFD	; 253
    2c44:	9b b9       	out	0x0b, r25	; 11
    2c46:	af e9       	ldi	r26, 0x9F	; 159
    2c48:	bf e0       	ldi	r27, 0x0F	; 15
    2c4a:	11 97       	sbiw	r26, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <uart0_hal_send_break+0x24>
    2c4e:	00 c0       	rjmp	.+0      	; 0x2c50 <uart0_hal_send_break+0x2a>
    2c50:	00 00       	nop
    2c52:	90 81       	ld	r25, Z
    2c54:	98 60       	ori	r25, 0x08	; 8
    2c56:	90 83       	st	Z, r25
    2c58:	89 83       	std	Y+1, r24	; 0x01
    2c5a:	61 e0       	ldi	r22, 0x01	; 1
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	01 96       	adiw	r24, 0x01	; 1
    2c60:	0e 94 bb 18 	call	0x3176	; 0x3176 <uart0_hal_send_message>
    2c64:	0f 90       	pop	r0
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	08 95       	ret

Disassembly of section .text.__vector_22:

00002a28 <__vector_22>:
    2a28:	1f 92       	push	r1
    2a2a:	0f 92       	push	r0
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	0f 92       	push	r0
    2a30:	11 24       	eor	r1, r1
    2a32:	8f 93       	push	r24
    2a34:	ef 93       	push	r30
    2a36:	ff 93       	push	r31
    2a38:	e0 91 aa 0d 	lds	r30, 0x0DAA	; 0x800daa <tx_buffer_cursor>
    2a3c:	80 91 ab 0d 	lds	r24, 0x0DAB	; 0x800dab <tx_buffer_data_len>
    2a40:	e8 17       	cp	r30, r24
    2a42:	58 f4       	brcc	.+22     	; 0x2a5a <__vector_22+0x32>
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	8e 0f       	add	r24, r30
    2a48:	80 93 aa 0d 	sts	0x0DAA, r24	; 0x800daa <tx_buffer_cursor>
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	ec 59       	subi	r30, 0x9C	; 156
    2a50:	fe 4f       	sbci	r31, 0xFE	; 254
    2a52:	80 81       	ld	r24, Z
    2a54:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2a58:	04 c0       	rjmp	.+8      	; 0x2a62 <__vector_22+0x3a>
    2a5a:	10 92 aa 0d 	sts	0x0DAA, r1	; 0x800daa <tx_buffer_cursor>
    2a5e:	10 92 ab 0d 	sts	0x0DAB, r1	; 0x800dab <tx_buffer_data_len>
    2a62:	ff 91       	pop	r31
    2a64:	ef 91       	pop	r30
    2a66:	8f 91       	pop	r24
    2a68:	0f 90       	pop	r0
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	0f 90       	pop	r0
    2a6e:	1f 90       	pop	r1
    2a70:	18 95       	reti

Disassembly of section .text.__vector_20:

000022ac <__vector_20>:
    22ac:	1f 92       	push	r1
    22ae:	0f 92       	push	r0
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	0f 92       	push	r0
    22b4:	11 24       	eor	r1, r1
    22b6:	2f 93       	push	r18
    22b8:	8f 93       	push	r24
    22ba:	9f 93       	push	r25
    22bc:	ef 93       	push	r30
    22be:	ff 93       	push	r31
    22c0:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <rx_buffer_has_message>
    22c4:	81 11       	cpse	r24, r1
    22c6:	0e c0       	rjmp	.+28     	; 0x22e4 <__vector_20+0x38>
    22c8:	e0 91 a9 0d 	lds	r30, 0x0DA9	; 0x800da9 <rx_buffer_data_len>
    22cc:	e4 36       	cpi	r30, 0x64	; 100
    22ce:	50 f4       	brcc	.+20     	; 0x22e4 <__vector_20+0x38>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	8e 0f       	add	r24, r30
    22d4:	80 93 a9 0d 	sts	0x0DA9, r24	; 0x800da9 <rx_buffer_data_len>
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    22de:	e0 50       	subi	r30, 0x00	; 0
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 83       	st	Z, r24
    22e4:	80 91 a9 0d 	lds	r24, 0x0DA9	; 0x800da9 <rx_buffer_data_len>
    22e8:	83 30       	cpi	r24, 0x03	; 3
    22ea:	80 f0       	brcs	.+32     	; 0x230c <__vector_20+0x60>
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	fc 01       	movw	r30, r24
    22f0:	e1 50       	subi	r30, 0x01	; 1
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	20 81       	ld	r18, Z
    22f6:	2a 30       	cpi	r18, 0x0A	; 10
    22f8:	49 f4       	brne	.+18     	; 0x230c <__vector_20+0x60>
    22fa:	fc 01       	movw	r30, r24
    22fc:	e2 50       	subi	r30, 0x02	; 2
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	8d 30       	cpi	r24, 0x0D	; 13
    2304:	19 f4       	brne	.+6      	; 0x230c <__vector_20+0x60>
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	80 93 a8 0d 	sts	0x0DA8, r24	; 0x800da8 <rx_buffer_has_message>
    230c:	ff 91       	pop	r31
    230e:	ef 91       	pop	r30
    2310:	9f 91       	pop	r25
    2312:	8f 91       	pop	r24
    2314:	2f 91       	pop	r18
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	0f 90       	pop	r0
    231c:	1f 90       	pop	r1
    231e:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00002f84 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    2f84:	e9 ec       	ldi	r30, 0xC9	; 201
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	80 61       	ori	r24, 0x10	; 16
    2f8c:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    2f8e:	80 81       	ld	r24, Z
    2f90:	88 60       	ori	r24, 0x08	; 8
    2f92:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    2f94:	80 81       	ld	r24, Z
    2f96:	80 68       	ori	r24, 0x80	; 128
    2f98:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    2f9a:	80 81       	ld	r24, Z
    2f9c:	80 64       	ori	r24, 0x40	; 64
    2f9e:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    2fa0:	e8 ec       	ldi	r30, 0xC8	; 200
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	82 60       	ori	r24, 0x02	; 2
    2fa8:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    2faa:	86 e0       	ldi	r24, 0x06	; 6
    2fac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
    2fb0:	80 e1       	ldi	r24, 0x10	; 16
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    2fb8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    2fbc:	78 94       	sei
    2fbe:	08 95       	ret

Disassembly of section .text.__vector_30:

00002a72 <__vector_30>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    2a72:	1f 92       	push	r1
    2a74:	0f 92       	push	r0
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	0f 92       	push	r0
    2a7a:	11 24       	eor	r1, r1
    2a7c:	8f 93       	push	r24
    2a7e:	ef 93       	push	r30
    2a80:	ff 93       	push	r31
    2a82:	e0 91 ae 0d 	lds	r30, 0x0DAE	; 0x800dae <tx_buffer_cursor>
    2a86:	80 91 af 0d 	lds	r24, 0x0DAF	; 0x800daf <tx_buffer_data_len>
    2a8a:	e8 17       	cp	r30, r24
    2a8c:	58 f4       	brcc	.+22     	; 0x2aa4 <__vector_30+0x32>
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	8e 0f       	add	r24, r30
    2a92:	80 93 ae 0d 	sts	0x0DAE, r24	; 0x800dae <tx_buffer_cursor>
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	ee 53       	subi	r30, 0x3E	; 62
    2a9a:	f4 4f       	sbci	r31, 0xF4	; 244
    2a9c:	80 81       	ld	r24, Z
    2a9e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2aa2:	04 c0       	rjmp	.+8      	; 0x2aac <__vector_30+0x3a>
    2aa4:	10 92 ae 0d 	sts	0x0DAE, r1	; 0x800dae <tx_buffer_cursor>
    2aa8:	10 92 af 0d 	sts	0x0DAF, r1	; 0x800daf <tx_buffer_data_len>
    2aac:	ff 91       	pop	r31
    2aae:	ef 91       	pop	r30
    2ab0:	8f 91       	pop	r24
    2ab2:	0f 90       	pop	r0
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	0f 90       	pop	r0
    2ab8:	1f 90       	pop	r1
    2aba:	18 95       	reti

Disassembly of section .text.__vector_28:

00002320 <__vector_28>:
    2320:	1f 92       	push	r1
    2322:	0f 92       	push	r0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	0f 92       	push	r0
    2328:	11 24       	eor	r1, r1
    232a:	2f 93       	push	r18
    232c:	8f 93       	push	r24
    232e:	9f 93       	push	r25
    2330:	ef 93       	push	r30
    2332:	ff 93       	push	r31
    2334:	80 91 ac 0d 	lds	r24, 0x0DAC	; 0x800dac <rx_buffer_has_message>
    2338:	81 11       	cpse	r24, r1
    233a:	0e c0       	rjmp	.+28     	; 0x2358 <__vector_28+0x38>
    233c:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <rx_buffer_data_len>
    2340:	e4 36       	cpi	r30, 0x64	; 100
    2342:	50 f4       	brcc	.+20     	; 0x2358 <__vector_28+0x38>
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	8e 0f       	add	r24, r30
    2348:	80 93 ad 0d 	sts	0x0DAD, r24	; 0x800dad <rx_buffer_data_len>
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2352:	e2 51       	subi	r30, 0x12	; 18
    2354:	f3 4f       	sbci	r31, 0xF3	; 243
    2356:	80 83       	st	Z, r24
    2358:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <rx_buffer_data_len>
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	fc 01       	movw	r30, r24
    2360:	e3 51       	subi	r30, 0x13	; 19
    2362:	f3 4f       	sbci	r31, 0xF3	; 243
    2364:	20 81       	ld	r18, Z
    2366:	2a 30       	cpi	r18, 0x0A	; 10
    2368:	49 f4       	brne	.+18     	; 0x237c <__vector_28+0x5c>
    236a:	fc 01       	movw	r30, r24
    236c:	e4 51       	subi	r30, 0x14	; 20
    236e:	f3 4f       	sbci	r31, 0xF3	; 243
    2370:	80 81       	ld	r24, Z
    2372:	8d 30       	cpi	r24, 0x0D	; 13
    2374:	19 f4       	brne	.+6      	; 0x237c <__vector_28+0x5c>
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	80 93 ac 0d 	sts	0x0DAC, r24	; 0x800dac <rx_buffer_has_message>
    237c:	ff 91       	pop	r31
    237e:	ef 91       	pop	r30
    2380:	9f 91       	pop	r25
    2382:	8f 91       	pop	r24
    2384:	2f 91       	pop	r18
    2386:	0f 90       	pop	r0
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	0f 90       	pop	r0
    238c:	1f 90       	pop	r1
    238e:	18 95       	reti

Disassembly of section .text.main:

0000375a <main>:
{
	//test_runner();
	
	while(1)
    {
		MAINPG_start();
    375a:	0e 94 00 05 	call	0xa00	; 0xa00 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    375e:	2f ef       	ldi	r18, 0xFF	; 255
    3760:	8d e3       	ldi	r24, 0x3D	; 61
    3762:	99 e4       	ldi	r25, 0x49	; 73
    3764:	21 50       	subi	r18, 0x01	; 1
    3766:	80 40       	sbci	r24, 0x00	; 0
    3768:	90 40       	sbci	r25, 0x00	; 0
    376a:	e1 f7       	brne	.-8      	; 0x3764 <main+0xa>
    376c:	00 c0       	rjmp	.+0      	; 0x376e <main+0x14>
    376e:	00 00       	nop
    3770:	f4 cf       	rjmp	.-24     	; 0x375a <main>

Disassembly of section .text.vect_ADC_heat_timeout:

00003772 <vect_ADC_heat_timeout>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    3772:	80 91 b0 0d 	lds	r24, 0x0DB0	; 0x800db0 <cntPowerUpTime>
    3776:	8f 5f       	subi	r24, 0xFF	; 255
    3778:	80 93 b0 0d 	sts	0x0DB0, r24	; 0x800db0 <cntPowerUpTime>
    377c:	90 91 b1 0d 	lds	r25, 0x0DB1	; 0x800db1 <_powerUpTime>
    3780:	89 17       	cp	r24, r25
    3782:	10 f0       	brcs	.+4      	; 0x3788 <vect_ADC_heat_timeout+0x16>
    3784:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <TC0_HAL_stop>
    3788:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

000024d4 <ADC_init_sampling>:
    24d4:	cf 93       	push	r28
    24d6:	50 93 97 0d 	sts	0x0D97, r21	; 0x800d97 <_data+0x1>
    24da:	40 93 96 0d 	sts	0x0D96, r20	; 0x800d96 <_data>
    24de:	70 93 99 0d 	sts	0x0D99, r23	; 0x800d99 <_nSamples+0x1>
    24e2:	60 93 98 0d 	sts	0x0D98, r22	; 0x800d98 <_nSamples>
    24e6:	10 92 95 0d 	sts	0x0D95, r1	; 0x800d95 <cntSamples+0x1>
    24ea:	10 92 94 0d 	sts	0x0D94, r1	; 0x800d94 <cntSamples>
    24ee:	66 e3       	ldi	r22, 0x36	; 54
    24f0:	76 e1       	ldi	r23, 0x16	; 22
    24f2:	0e 94 c3 1a 	call	0x3586	; 0x3586 <TC0_HAL_init>
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <PM_HAL_adc_power>
    24fc:	2f ef       	ldi	r18, 0xFF	; 255
    24fe:	83 ec       	ldi	r24, 0xC3	; 195
    2500:	99 e0       	ldi	r25, 0x09	; 9
    2502:	21 50       	subi	r18, 0x01	; 1
    2504:	80 40       	sbci	r24, 0x00	; 0
    2506:	90 40       	sbci	r25, 0x00	; 0
    2508:	e1 f7       	brne	.-8      	; 0x2502 <ADC_init_sampling+0x2e>
    250a:	00 c0       	rjmp	.+0      	; 0x250c <ADC_init_sampling+0x38>
    250c:	00 00       	nop
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	8d e4       	ldi	r24, 0x4D	; 77
    2512:	0e 94 83 15 	call	0x2b06	; 0x2b06 <TWI_HAL_start>
    2516:	c8 2f       	mov	r28, r24
    2518:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <TWI_HAL_stop>
    251c:	cc 23       	and	r28, r28
    251e:	51 f0       	breq	.+20     	; 0x2534 <ADC_init_sampling+0x60>
    2520:	10 92 97 0d 	sts	0x0D97, r1	; 0x800d97 <_data+0x1>
    2524:	10 92 96 0d 	sts	0x0D96, r1	; 0x800d96 <_data>
    2528:	10 92 99 0d 	sts	0x0D99, r1	; 0x800d99 <_nSamples+0x1>
    252c:	10 92 98 0d 	sts	0x0D98, r1	; 0x800d98 <_nSamples>
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	01 c0       	rjmp	.+2      	; 0x2536 <ADC_init_sampling+0x62>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

00003874 <ADC_deinit_sampling>:
    3874:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <TC0_HAL_stop>
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <PM_HAL_adc_power>
    387e:	10 92 97 0d 	sts	0x0D97, r1	; 0x800d97 <_data+0x1>
    3882:	10 92 96 0d 	sts	0x0D96, r1	; 0x800d96 <_data>
    3886:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00003662 <ADC_is_sampling_done>:
    3662:	40 91 94 0d 	lds	r20, 0x0D94	; 0x800d94 <cntSamples>
    3666:	50 91 95 0d 	lds	r21, 0x0D95	; 0x800d95 <cntSamples+0x1>
    366a:	20 91 98 0d 	lds	r18, 0x0D98	; 0x800d98 <_nSamples>
    366e:	30 91 99 0d 	lds	r19, 0x0D99	; 0x800d99 <_nSamples+0x1>
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	42 17       	cp	r20, r18
    3676:	53 07       	cpc	r21, r19
    3678:	08 f4       	brcc	.+2      	; 0x367c <ADC_is_sampling_done+0x1a>
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

000035e6 <ADC_meth_sens_power_on>:
    35e6:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <_powerUpTime>
    35ea:	10 92 b0 0d 	sts	0x0DB0, r1	; 0x800db0 <cntPowerUpTime>
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <PM_HAL_meth_power>
    35f4:	69 eb       	ldi	r22, 0xB9	; 185
    35f6:	7b e1       	ldi	r23, 0x1B	; 27
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	0e 94 c3 1a 	call	0x3586	; 0x3586 <TC0_HAL_init>
    35fe:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <TC0_HAL_start>
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

000038ae <ADC_meth_sens_ready>:

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    38ae:	20 91 b0 0d 	lds	r18, 0x0DB0	; 0x800db0 <cntPowerUpTime>
    38b2:	90 91 b1 0d 	lds	r25, 0x0DB1	; 0x800db1 <_powerUpTime>
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	29 17       	cp	r18, r25
    38ba:	08 f4       	brcc	.+2      	; 0x38be <ADC_meth_sens_ready+0x10>
    38bc:	80 e0       	ldi	r24, 0x00	; 0
}
    38be:	08 95       	ret

Disassembly of section .text.calc_ppm_methane:

00001e78 <calc_ppm_methane>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    1e78:	8f 92       	push	r8
    1e7a:	9f 92       	push	r9
    1e7c:	af 92       	push	r10
    1e7e:	bf 92       	push	r11
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	bc 01       	movw	r22, r24
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__floatunsisf>
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e8       	ldi	r20, 0x80	; 128
    1e98:	59 e3       	ldi	r21, 0x39	; 57
    1e9a:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__mulsf3>
    1e9e:	80 90 88 0d 	lds	r8, 0x0D88	; 0x800d88 <Vc>
    1ea2:	90 90 89 0d 	lds	r9, 0x0D89	; 0x800d89 <Vc+0x1>
    1ea6:	a0 90 8a 0d 	lds	r10, 0x0D8A	; 0x800d8a <Vc+0x2>
    1eaa:	b0 90 8b 0d 	lds	r11, 0x0D8B	; 0x800d8b <Vc+0x3>
    1eae:	a5 01       	movw	r20, r10
    1eb0:	94 01       	movw	r18, r8
    1eb2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__mulsf3>
    1eb6:	6b 01       	movw	r12, r22
    1eb8:	7c 01       	movw	r14, r24
    1eba:	9b 01       	movw	r18, r22
    1ebc:	ac 01       	movw	r20, r24
    1ebe:	c5 01       	movw	r24, r10
    1ec0:	b4 01       	movw	r22, r8
    1ec2:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__subsf3>
    1ec6:	a7 01       	movw	r20, r14
    1ec8:	96 01       	movw	r18, r12
    1eca:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__divsf3>
    1ece:	20 91 84 0d 	lds	r18, 0x0D84	; 0x800d84 <RRL>
    1ed2:	30 91 85 0d 	lds	r19, 0x0D85	; 0x800d85 <RRL+0x1>
    1ed6:	40 91 86 0d 	lds	r20, 0x0D86	; 0x800d86 <RRL+0x2>
    1eda:	50 91 87 0d 	lds	r21, 0x0D87	; 0x800d87 <RRL+0x3>
    1ede:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__mulsf3>
    1ee2:	20 91 80 0d 	lds	r18, 0x0D80	; 0x800d80 <PPM_factor>
    1ee6:	30 91 81 0d 	lds	r19, 0x0D81	; 0x800d81 <PPM_factor+0x1>
    1eea:	40 91 82 0d 	lds	r20, 0x0D82	; 0x800d82 <PPM_factor+0x2>
    1eee:	50 91 83 0d 	lds	r21, 0x0D83	; 0x800d83 <PPM_factor+0x3>
    1ef2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__mulsf3>
    1ef6:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
    1efa:	cb 01       	movw	r24, r22
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	cf 90       	pop	r12
    1f04:	bf 90       	pop	r11
    1f06:	af 90       	pop	r10
    1f08:	9f 90       	pop	r9
    1f0a:	8f 90       	pop	r8
    1f0c:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002654 <ADC_get_value>:
    2654:	ef 92       	push	r14
    2656:	ff 92       	push	r15
    2658:	1f 93       	push	r17
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	00 d0       	rcall	.+0      	; 0x2660 <ADC_get_value+0xc>
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	7c 01       	movw	r14, r24
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	9f ef       	ldi	r25, 0xFF	; 255
    266a:	f7 01       	movw	r30, r14
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	42 e0       	ldi	r20, 0x02	; 2
    2672:	be 01       	movw	r22, r28
    2674:	6f 5f       	subi	r22, 0xFF	; 255
    2676:	7f 4f       	sbci	r23, 0xFF	; 255
    2678:	8d e4       	ldi	r24, 0x4D	; 77
    267a:	0e 94 39 1a 	call	0x3472	; 0x3472 <TWI_API_read_data_ack_end_nack_stop>
    267e:	18 2f       	mov	r17, r24
    2680:	81 11       	cpse	r24, r1
    2682:	0d c0       	rjmp	.+26     	; 0x269e <ADC_get_value+0x4a>
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	98 2f       	mov	r25, r24
    268a:	88 27       	eor	r24, r24
    268c:	2a 81       	ldd	r18, Y+2	; 0x02
    268e:	82 2b       	or	r24, r18
    2690:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <calc_ppm_methane>
    2694:	f7 01       	movw	r30, r14
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	81 2f       	mov	r24, r17
    269c:	01 c0       	rjmp	.+2      	; 0x26a0 <ADC_get_value+0x4c>
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	df 91       	pop	r29
    26a6:	cf 91       	pop	r28
    26a8:	1f 91       	pop	r17
    26aa:	ff 90       	pop	r15
    26ac:	ef 90       	pop	r14
    26ae:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00002c6c <vect_ADC_do_sample>:
    2c6c:	80 91 96 0d 	lds	r24, 0x0D96	; 0x800d96 <_data>
    2c70:	90 91 97 0d 	lds	r25, 0x0D97	; 0x800d97 <_data+0x1>
    2c74:	20 91 94 0d 	lds	r18, 0x0D94	; 0x800d94 <cntSamples>
    2c78:	30 91 95 0d 	lds	r19, 0x0D95	; 0x800d95 <cntSamples+0x1>
    2c7c:	a9 01       	movw	r20, r18
    2c7e:	4f 5f       	subi	r20, 0xFF	; 255
    2c80:	5f 4f       	sbci	r21, 0xFF	; 255
    2c82:	50 93 95 0d 	sts	0x0D95, r21	; 0x800d95 <cntSamples+0x1>
    2c86:	40 93 94 0d 	sts	0x0D94, r20	; 0x800d94 <cntSamples>
    2c8a:	22 0f       	add	r18, r18
    2c8c:	33 1f       	adc	r19, r19
    2c8e:	82 0f       	add	r24, r18
    2c90:	93 1f       	adc	r25, r19
    2c92:	0e 94 2a 13 	call	0x2654	; 0x2654 <ADC_get_value>
    2c96:	20 91 94 0d 	lds	r18, 0x0D94	; 0x800d94 <cntSamples>
    2c9a:	30 91 95 0d 	lds	r19, 0x0D95	; 0x800d95 <cntSamples+0x1>
    2c9e:	80 91 98 0d 	lds	r24, 0x0D98	; 0x800d98 <_nSamples>
    2ca2:	90 91 99 0d 	lds	r25, 0x0D99	; 0x800d99 <_nSamples+0x1>
    2ca6:	28 17       	cp	r18, r24
    2ca8:	39 07       	cpc	r19, r25
    2caa:	10 f0       	brcs	.+4      	; 0x2cb0 <vect_ADC_do_sample+0x44>
    2cac:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <TC0_HAL_stop>
    2cb0:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

00003984 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

ADC_STATUS ADC_start_sampling(){
	TC0_HAL_start();
    3984:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <TC0_HAL_start>
	vect_ADC_do_sample();
    3988:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <vect_ADC_do_sample>
	return ADC_STATUS_SUCCESS;
}
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	08 95       	ret

Disassembly of section .text.JN_join_network:

0000076a <JN_join_network>:
#include "../../../HAL/RN2483/RN2483_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
 76a:	af 92       	push	r10
 76c:	bf 92       	push	r11
 76e:	cf 92       	push	r12
 770:	df 92       	push	r13
 772:	ef 92       	push	r14
 774:	ff 92       	push	r15
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
 780:	28 97       	sbiw	r28, 0x08	; 8
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	f8 94       	cli
 786:	de bf       	out	0x3e, r29	; 62
 788:	0f be       	out	0x3f, r0	; 63
 78a:	cd bf       	out	0x3d, r28	; 61
 78c:	5c 01       	movw	r10, r24
 78e:	6b 01       	movw	r12, r22
 790:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
 792:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	
	
	while(1){
		switch(state){
 794:	e1 2f       	mov	r30, r17
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	ed 30       	cpi	r30, 0x0D	; 13
 79a:	f1 05       	cpc	r31, r1
 79c:	d8 f7       	brcc	.-10     	; 0x794 <JN_join_network+0x2a>
 79e:	e2 5c       	subi	r30, 0xC2	; 194
 7a0:	ff 4f       	sbci	r31, 0xFF	; 255
 7a2:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
 7a6:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <rn2483_reset_active>
 7aa:	2f ef       	ldi	r18, 0xFF	; 255
 7ac:	89 e6       	ldi	r24, 0x69	; 105
 7ae:	98 e1       	ldi	r25, 0x18	; 24
 7b0:	21 50       	subi	r18, 0x01	; 1
 7b2:	80 40       	sbci	r24, 0x00	; 0
 7b4:	90 40       	sbci	r25, 0x00	; 0
 7b6:	e1 f7       	brne	.-8      	; 0x7b0 <JN_join_network+0x46>
 7b8:	00 c0       	rjmp	.+0      	; 0x7ba <JN_join_network+0x50>
 7ba:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
 7bc:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
 7c0:	4c e0       	ldi	r20, 0x0C	; 12
 7c2:	50 e0       	ldi	r21, 0x00	; 0
 7c4:	62 e0       	ldi	r22, 0x02	; 2
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	ce 01       	movw	r24, r28
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
 7d0:	23 e9       	ldi	r18, 0x93	; 147
 7d2:	32 e0       	ldi	r19, 0x02	; 2
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	61 e0       	ldi	r22, 0x01	; 1
 7d8:	ce 01       	movw	r24, r28
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
 7e0:	11 e0       	ldi	r17, 0x01	; 1
			break;
 7e2:	d8 cf       	rjmp	.-80     	; 0x794 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
 7e4:	4a e9       	ldi	r20, 0x9A	; 154
 7e6:	52 e0       	ldi	r21, 0x02	; 2
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	80 e9       	ldi	r24, 0x90	; 144
 7ec:	92 e0       	ldi	r25, 0x02	; 2
 7ee:	0e 94 ef 18 	call	0x31de	; 0x31de <cmd_with_ending>
				util_transmit_msg(lm_msg);
 7f2:	80 e9       	ldi	r24, 0x90	; 144
 7f4:	92 e0       	ldi	r25, 0x02	; 2
 7f6:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
 7fa:	4c e0       	ldi	r20, 0x0C	; 12
 7fc:	50 e0       	ldi	r21, 0x00	; 0
 7fe:	63 e0       	ldi	r22, 0x03	; 3
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	ce 01       	movw	r24, r28
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 80a:	28 ea       	ldi	r18, 0xA8	; 168
 80c:	32 e0       	ldi	r19, 0x02	; 2
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	ce 01       	movw	r24, r28
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 81a:	11 e0       	ldi	r17, 0x01	; 1
			break;
 81c:	bb cf       	rjmp	.-138    	; 0x794 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
 81e:	b5 01       	movw	r22, r10
 820:	80 e9       	ldi	r24, 0x90	; 144
 822:	92 e0       	ldi	r25, 0x02	; 2
 824:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <mac_set_deveui>
				attach_ending(lm_msg);
 828:	80 e9       	ldi	r24, 0x90	; 144
 82a:	92 e0       	ldi	r25, 0x02	; 2
 82c:	0e 94 4d 1b 	call	0x369a	; 0x369a <attach_ending>
				util_transmit_msg(lm_msg);
 830:	80 e9       	ldi	r24, 0x90	; 144
 832:	92 e0       	ldi	r25, 0x02	; 2
 834:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
 838:	4c e0       	ldi	r20, 0x0C	; 12
 83a:	50 e0       	ldi	r21, 0x00	; 0
 83c:	64 e0       	ldi	r22, 0x04	; 4
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	ce 01       	movw	r24, r28
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 848:	28 ea       	ldi	r18, 0xA8	; 168
 84a:	32 e0       	ldi	r19, 0x02	; 2
 84c:	40 e0       	ldi	r20, 0x00	; 0
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	ce 01       	movw	r24, r28
 852:	01 96       	adiw	r24, 0x01	; 1
 854:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 858:	11 e0       	ldi	r17, 0x01	; 1
			break;
 85a:	9c cf       	rjmp	.-200    	; 0x794 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
 85c:	b7 01       	movw	r22, r14
 85e:	80 e9       	ldi	r24, 0x90	; 144
 860:	92 e0       	ldi	r25, 0x02	; 2
 862:	0e 94 ef 15 	call	0x2bde	; 0x2bde <mac_set_appkey>
				attach_ending(lm_msg);
 866:	80 e9       	ldi	r24, 0x90	; 144
 868:	92 e0       	ldi	r25, 0x02	; 2
 86a:	0e 94 4d 1b 	call	0x369a	; 0x369a <attach_ending>
				util_transmit_msg(lm_msg);
 86e:	80 e9       	ldi	r24, 0x90	; 144
 870:	92 e0       	ldi	r25, 0x02	; 2
 872:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
 876:	4c e0       	ldi	r20, 0x0C	; 12
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	65 e0       	ldi	r22, 0x05	; 5
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	ce 01       	movw	r24, r28
 880:	01 96       	adiw	r24, 0x01	; 1
 882:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 886:	28 ea       	ldi	r18, 0xA8	; 168
 888:	32 e0       	ldi	r19, 0x02	; 2
 88a:	40 e0       	ldi	r20, 0x00	; 0
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	ce 01       	movw	r24, r28
 890:	01 96       	adiw	r24, 0x01	; 1
 892:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 896:	11 e0       	ldi	r17, 0x01	; 1
			break;
 898:	7d cf       	rjmp	.-262    	; 0x794 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
 89a:	b6 01       	movw	r22, r12
 89c:	80 e9       	ldi	r24, 0x90	; 144
 89e:	92 e0       	ldi	r25, 0x02	; 2
 8a0:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <mac_set_appeui>
				attach_ending(lm_msg);
 8a4:	80 e9       	ldi	r24, 0x90	; 144
 8a6:	92 e0       	ldi	r25, 0x02	; 2
 8a8:	0e 94 4d 1b 	call	0x369a	; 0x369a <attach_ending>
				util_transmit_msg(lm_msg);
 8ac:	80 e9       	ldi	r24, 0x90	; 144
 8ae:	92 e0       	ldi	r25, 0x02	; 2
 8b0:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
 8b4:	4c e0       	ldi	r20, 0x0C	; 12
 8b6:	50 e0       	ldi	r21, 0x00	; 0
 8b8:	66 e0       	ldi	r22, 0x06	; 6
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	ce 01       	movw	r24, r28
 8be:	01 96       	adiw	r24, 0x01	; 1
 8c0:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 8c4:	28 ea       	ldi	r18, 0xA8	; 168
 8c6:	32 e0       	ldi	r19, 0x02	; 2
 8c8:	40 e0       	ldi	r20, 0x00	; 0
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	ce 01       	movw	r24, r28
 8ce:	01 96       	adiw	r24, 0x01	; 1
 8d0:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 8d4:	11 e0       	ldi	r17, 0x01	; 1
			break;
 8d6:	5e cf       	rjmp	.-324    	; 0x794 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
 8d8:	61 e0       	ldi	r22, 0x01	; 1
 8da:	80 e9       	ldi	r24, 0x90	; 144
 8dc:	92 e0       	ldi	r25, 0x02	; 2
 8de:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <mac_set_ADR>
				attach_ending(lm_msg);
 8e2:	80 e9       	ldi	r24, 0x90	; 144
 8e4:	92 e0       	ldi	r25, 0x02	; 2
 8e6:	0e 94 4d 1b 	call	0x369a	; 0x369a <attach_ending>
				util_transmit_msg(lm_msg);
 8ea:	80 e9       	ldi	r24, 0x90	; 144
 8ec:	92 e0       	ldi	r25, 0x02	; 2
 8ee:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
 8f2:	4c e0       	ldi	r20, 0x0C	; 12
 8f4:	50 e0       	ldi	r21, 0x00	; 0
 8f6:	67 e0       	ldi	r22, 0x07	; 7
 8f8:	70 e0       	ldi	r23, 0x00	; 0
 8fa:	ce 01       	movw	r24, r28
 8fc:	01 96       	adiw	r24, 0x01	; 1
 8fe:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 902:	28 ea       	ldi	r18, 0xA8	; 168
 904:	32 e0       	ldi	r19, 0x02	; 2
 906:	40 e0       	ldi	r20, 0x00	; 0
 908:	60 e0       	ldi	r22, 0x00	; 0
 90a:	ce 01       	movw	r24, r28
 90c:	01 96       	adiw	r24, 0x01	; 1
 90e:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 912:	11 e0       	ldi	r17, 0x01	; 1
			break;
 914:	3f cf       	rjmp	.-386    	; 0x794 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
 916:	4b ea       	ldi	r20, 0xAB	; 171
 918:	52 e0       	ldi	r21, 0x02	; 2
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	80 e9       	ldi	r24, 0x90	; 144
 91e:	92 e0       	ldi	r25, 0x02	; 2
 920:	0e 94 ef 18 	call	0x31de	; 0x31de <cmd_with_ending>
				util_transmit_msg(lm_msg);
 924:	80 e9       	ldi	r24, 0x90	; 144
 926:	92 e0       	ldi	r25, 0x02	; 2
 928:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
 92c:	4c e0       	ldi	r20, 0x0C	; 12
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	68 e0       	ldi	r22, 0x08	; 8
 932:	70 e0       	ldi	r23, 0x00	; 0
 934:	ce 01       	movw	r24, r28
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 93c:	28 ea       	ldi	r18, 0xA8	; 168
 93e:	32 e0       	ldi	r19, 0x02	; 2
 940:	40 e0       	ldi	r20, 0x00	; 0
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	ce 01       	movw	r24, r28
 946:	01 96       	adiw	r24, 0x01	; 1
 948:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 94c:	11 e0       	ldi	r17, 0x01	; 1
			break;
 94e:	22 cf       	rjmp	.-444    	; 0x794 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
 950:	44 eb       	ldi	r20, 0xB4	; 180
 952:	52 e0       	ldi	r21, 0x02	; 2
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	80 e9       	ldi	r24, 0x90	; 144
 958:	92 e0       	ldi	r25, 0x02	; 2
 95a:	0e 94 ef 18 	call	0x31de	; 0x31de <cmd_with_ending>
				util_transmit_msg(lm_msg);
 95e:	80 e9       	ldi	r24, 0x90	; 144
 960:	92 e0       	ldi	r25, 0x02	; 2
 962:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
 966:	4a e0       	ldi	r20, 0x0A	; 10
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	69 e0       	ldi	r22, 0x09	; 9
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	ce 01       	movw	r24, r28
 970:	01 96       	adiw	r24, 0x01	; 1
 972:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 976:	28 ea       	ldi	r18, 0xA8	; 168
 978:	32 e0       	ldi	r19, 0x02	; 2
 97a:	40 e0       	ldi	r20, 0x00	; 0
 97c:	60 e0       	ldi	r22, 0x00	; 0
 97e:	ce 01       	movw	r24, r28
 980:	01 96       	adiw	r24, 0x01	; 1
 982:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 986:	11 e0       	ldi	r17, 0x01	; 1
			break;
 988:	05 cf       	rjmp	.-502    	; 0x794 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
 98a:	4a e0       	ldi	r20, 0x0A	; 10
 98c:	50 e0       	ldi	r21, 0x00	; 0
 98e:	6b e0       	ldi	r22, 0x0B	; 11
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	ce 01       	movw	r24, r28
 994:	01 96       	adiw	r24, 0x01	; 1
 996:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
 99a:	22 ec       	ldi	r18, 0xC2	; 194
 99c:	32 e0       	ldi	r19, 0x02	; 2
 99e:	40 e0       	ldi	r20, 0x00	; 0
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	ce 01       	movw	r24, r28
 9a4:	01 96       	adiw	r24, 0x01	; 1
 9a6:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 9aa:	11 e0       	ldi	r17, 0x01	; 1
			break;
 9ac:	f3 ce       	rjmp	.-538    	; 0x794 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return util_parse_err(lm_msg);
 9ae:	80 e9       	ldi	r24, 0x90	; 144
 9b0:	92 e0       	ldi	r25, 0x02	; 2
 9b2:	0e 94 85 13 	call	0x270a	; 0x270a <util_parse_err>
 9b6:	14 c0       	rjmp	.+40     	; 0x9e0 <__EEPROM_REGION_LENGTH__+0x1e0>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
 9b8:	0e 94 93 1c 	call	0x3926	; 0x3926 <uart0_hal_message_ready>
 9bc:	88 23       	and	r24, r24
 9be:	09 f4       	brne	.+2      	; 0x9c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 9c0:	e9 ce       	rjmp	.-558    	; 0x794 <JN_join_network+0x2a>
					util_read_msg(lm_msg);
 9c2:	80 e9       	ldi	r24, 0x90	; 144
 9c4:	92 e0       	ldi	r25, 0x02	; 2
 9c6:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
 9ca:	60 e9       	ldi	r22, 0x90	; 144
 9cc:	72 e0       	ldi	r23, 0x02	; 2
 9ce:	ce 01       	movw	r24, r28
 9d0:	01 96       	adiw	r24, 0x01	; 1
 9d2:	0e 94 cc 12 	call	0x2598	; 0x2598 <util_matchMessage>
 9d6:	18 2f       	mov	r17, r24
 9d8:	dd ce       	rjmp	.-582    	; 0x794 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <__EEPROM_REGION_LENGTH__+0x1e0>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
 9de:	82 e0       	ldi	r24, 0x02	; 2
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
 9e0:	28 96       	adiw	r28, 0x08	; 8
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	f8 94       	cli
 9e6:	de bf       	out	0x3e, r29	; 62
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	cd bf       	out	0x3d, r28	; 61
 9ec:	df 91       	pop	r29
 9ee:	cf 91       	pop	r28
 9f0:	1f 91       	pop	r17
 9f2:	ff 90       	pop	r15
 9f4:	ef 90       	pop	r14
 9f6:	df 90       	pop	r13
 9f8:	cf 90       	pop	r12
 9fa:	bf 90       	pop	r11
 9fc:	af 90       	pop	r10
 9fe:	08 95       	ret

Disassembly of section .text.set_block_uplink:

0000378a <set_block_uplink>:
bool LM_is_free(){
	return busy==false;
}

static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&block_uplink);
    378a:	8f e3       	ldi	r24, 0x3F	; 63
    378c:	9b e1       	ldi	r25, 0x1B	; 27
    378e:	0e 94 b1 13 	call	0x2762	; 0x2762 <TC2_HAL_subscribe>
    3792:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <subPointer>
	busy=true;
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <busy>
	cnt=0;
    379c:	10 92 b4 0d 	sts	0x0DB4, r1	; 0x800db4 <cnt>
    37a0:	08 95       	ret

Disassembly of section .text.block_uplink:

0000367e <block_uplink>:
}

static void block_uplink(){
	cnt++;
    367e:	80 91 b4 0d 	lds	r24, 0x0DB4	; 0x800db4 <cnt>
    3682:	8f 5f       	subi	r24, 0xFF	; 255
    3684:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    3688:	86 30       	cpi	r24, 0x06	; 6
    368a:	30 f0       	brcs	.+12     	; 0x3698 <block_uplink+0x1a>
		busy=false;
    368c:	10 92 b3 0d 	sts	0x0DB3, r1	; 0x800db3 <busy>
		TC2_HAL_cancel(subPointer);
    3690:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <subPointer>
    3694:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <TC2_HAL_cancel>
    3698:	08 95       	ret

Disassembly of section .text.LM_join_network:

00003a42 <LM_join_network>:

static void block_uplink();
static void set_block_uplink();

LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    3a42:	0e 94 b5 03 	call	0x76a	; 0x76a <JN_join_network>
}
    3a46:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

000033c6 <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    33c6:	1f 93       	push	r17
    33c8:	cf 93       	push	r28
    33ca:	df 93       	push	r29
    33cc:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    33ce:	90 91 b3 0d 	lds	r25, 0x0DB3	; 0x800db3 <busy>
    33d2:	91 11       	cpse	r25, r1
    33d4:	0a c0       	rjmp	.+20     	; 0x33ea <LM_send_uplink+0x24>
    33d6:	16 2f       	mov	r17, r22
    33d8:	e9 01       	movw	r28, r18
	set_block_uplink();
    33da:	0e 94 c5 1b 	call	0x378a	; 0x378a <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    33de:	41 2f       	mov	r20, r17
    33e0:	be 01       	movw	r22, r28
    33e2:	84 e6       	ldi	r24, 0x64	; 100
    33e4:	0e 94 df 09 	call	0x13be	; 0x13be <SU_send_uplink>
    33e8:	01 c0       	rjmp	.+2      	; 0x33ec <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    33ea:	83 e0       	ldi	r24, 0x03	; 3
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    33ec:	df 91       	pop	r29
    33ee:	cf 91       	pop	r28
    33f0:	1f 91       	pop	r17
    33f2:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00003a48 <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
    3a48:	0e 94 ee 14 	call	0x29dc	; 0x29dc <SC_put_to_sleep>
}
    3a4c:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00003a4e <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    3a4e:	0e 94 08 19 	call	0x3210	; 0x3210 <SC_wake_up>
}
    3a52:	08 95       	ret

Disassembly of section .text.LM_is_free:

000039ec <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    39ec:	90 91 b3 0d 	lds	r25, 0x0DB3	; 0x800db3 <busy>
}
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	89 27       	eor	r24, r25
    39f4:	08 95       	ret

Disassembly of section .text.tohex:

000020bc <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    20bc:	6f 92       	push	r6
    20be:	7f 92       	push	r7
    20c0:	8f 92       	push	r8
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	7c 01       	movw	r14, r24
    20d0:	3a 01       	movw	r6, r20
    20d2:	86 2e       	mov	r8, r22
    20d4:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    20d6:	c0 e0       	ldi	r28, 0x00	; 0
    20d8:	d0 e0       	ldi	r29, 0x00	; 0
    20da:	25 c0       	rjmp	.+74     	; 0x2126 <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    20dc:	a8 2d       	mov	r26, r8
    20de:	c3 01       	movw	r24, r6
    20e0:	8c 0f       	add	r24, r28
    20e2:	9d 1f       	adc	r25, r29
    20e4:	a1 1d       	adc	r26, r1
    20e6:	d7 fd       	sbrc	r29, 7
    20e8:	aa 95       	dec	r26
    20ea:	fc 01       	movw	r30, r24
    20ec:	24 91       	lpm	r18, Z
    20ee:	a7 fd       	sbrc	r26, 7
    20f0:	20 81       	ld	r18, Z
    20f2:	ce 01       	movw	r24, r28
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	1f 92       	push	r1
    20fa:	2f 93       	push	r18
    20fc:	20 e2       	ldi	r18, 0x20	; 32
    20fe:	32 e0       	ldi	r19, 0x02	; 2
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	4f 93       	push	r20
    2104:	3f 93       	push	r19
    2106:	2f 93       	push	r18
    2108:	8e 0d       	add	r24, r14
    210a:	9f 1d       	adc	r25, r15
    210c:	9f 93       	push	r25
    210e:	8f 93       	push	r24
    2110:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    2114:	21 96       	adiw	r28, 0x01	; 1
    2116:	8d b7       	in	r24, 0x3d	; 61
    2118:	9e b7       	in	r25, 0x3e	; 62
    211a:	07 96       	adiw	r24, 0x07	; 7
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	9e bf       	out	0x3e, r25	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	8d bf       	out	0x3d, r24	; 61
    2126:	c0 17       	cp	r28, r16
    2128:	d1 07       	cpc	r29, r17
    212a:	c4 f2       	brlt	.-80     	; 0x20dc <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	8f 90       	pop	r8
    213a:	7f 90       	pop	r7
    213c:	6f 90       	pop	r6
    213e:	08 95       	ret

Disassembly of section .text.attach_ending:

0000369a <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    369a:	fc 01       	movw	r30, r24
    369c:	01 90       	ld	r0, Z+
    369e:	00 20       	and	r0, r0
    36a0:	e9 f7       	brne	.-6      	; 0x369c <attach_ending+0x2>
    36a2:	cf 01       	movw	r24, r30
    36a4:	23 e0       	ldi	r18, 0x03	; 3
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	45 e2       	ldi	r20, 0x25	; 37
    36aa:	52 e0       	ldi	r21, 0x02	; 2
    36ac:	60 e0       	ldi	r22, 0x00	; 0
    36ae:	01 97       	sbiw	r24, 0x01	; 1
    36b0:	0e 94 53 19 	call	0x32a6	; 0x32a6 <memcpy>
    36b4:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

000031de <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    31e4:	0e 94 22 1b 	call	0x3644	; 0x3644 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    31e8:	fe 01       	movw	r30, r28
    31ea:	01 90       	ld	r0, Z+
    31ec:	00 20       	and	r0, r0
    31ee:	e9 f7       	brne	.-6      	; 0x31ea <cmd_with_ending+0xc>
    31f0:	cf 01       	movw	r24, r30
    31f2:	23 e0       	ldi	r18, 0x03	; 3
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	45 e2       	ldi	r20, 0x25	; 37
    31f8:	52 e0       	ldi	r21, 0x02	; 2
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	0e 94 53 19 	call	0x32a6	; 0x32a6 <memcpy>
	return strlen(buffer);
    3202:	be 01       	movw	r22, r28
    3204:	80 e8       	ldi	r24, 0x80	; 128
    3206:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
}
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

0000253a <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    253e:	44 36       	cpi	r20, 0x64	; 100
    2540:	51 05       	cpc	r21, r1
    2542:	61 05       	cpc	r22, r1
    2544:	71 05       	cpc	r23, r1
    2546:	18 f1       	brcs	.+70     	; 0x258e <sys_sleep_cmd+0x54>
    2548:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    254a:	7f 93       	push	r23
    254c:	6f 93       	push	r22
    254e:	5f 93       	push	r21
    2550:	4f 93       	push	r20
    2552:	88 e2       	ldi	r24, 0x28	; 40
    2554:	92 e0       	ldi	r25, 0x02	; 2
    2556:	a0 e0       	ldi	r26, 0x00	; 0
    2558:	af 93       	push	r26
    255a:	9f 93       	push	r25
    255c:	8f 93       	push	r24
    255e:	82 e3       	ldi	r24, 0x32	; 50
    2560:	92 e0       	ldi	r25, 0x02	; 2
    2562:	a0 e0       	ldi	r26, 0x00	; 0
    2564:	af 93       	push	r26
    2566:	9f 93       	push	r25
    2568:	8f 93       	push	r24
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <sprintf>
    return strlen(buffer);
    2572:	be 01       	movw	r22, r28
    2574:	80 e8       	ldi	r24, 0x80	; 128
    2576:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
    257a:	2d b7       	in	r18, 0x3d	; 61
    257c:	3e b7       	in	r19, 0x3e	; 62
    257e:	24 5f       	subi	r18, 0xF4	; 244
    2580:	3f 4f       	sbci	r19, 0xFF	; 255
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	3e bf       	out	0x3e, r19	; 62
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	2d bf       	out	0x3d, r18	; 61
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    258e:	8f ef       	ldi	r24, 0xFF	; 255
    2590:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

000028f4 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    28f4:	0f 93       	push	r16
    28f6:	1f 93       	push	r17
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    28fe:	2f 93       	push	r18
    2900:	1f 93       	push	r17
    2902:	0f 93       	push	r16
    2904:	6f 93       	push	r22
    2906:	5f 93       	push	r21
    2908:	4f 93       	push	r20
    290a:	89 e3       	ldi	r24, 0x39	; 57
    290c:	92 e0       	ldi	r25, 0x02	; 2
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	af 93       	push	r26
    2912:	9f 93       	push	r25
    2914:	8f 93       	push	r24
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <sprintf>
    return strlen(buffer);
    291e:	be 01       	movw	r22, r28
    2920:	80 e8       	ldi	r24, 0x80	; 128
    2922:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
    2926:	2d b7       	in	r18, 0x3d	; 61
    2928:	3e b7       	in	r19, 0x3e	; 62
    292a:	25 5f       	subi	r18, 0xF5	; 245
    292c:	3f 4f       	sbci	r19, 0xFF	; 255
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	3e bf       	out	0x3e, r19	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	2d bf       	out	0x3d, r18	; 61
}
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00002b4e <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    2b4e:	cf 92       	push	r12
    2b50:	df 92       	push	r13
    2b52:	ef 92       	push	r14
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    2b5e:	6b 01       	movw	r12, r22
    2b60:	80 e8       	ldi	r24, 0x80	; 128
    2b62:	e8 2e       	mov	r14, r24
    2b64:	8e 2d       	mov	r24, r14
    2b66:	b6 01       	movw	r22, r12
    2b68:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
    2b6c:	40 97       	sbiw	r24, 0x10	; 16
    2b6e:	49 f4       	brne	.+18     	; 0x2b82 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    2b70:	2e 2d       	mov	r18, r14
    2b72:	86 01       	movw	r16, r12
    2b74:	4f e3       	ldi	r20, 0x3F	; 63
    2b76:	52 e0       	ldi	r21, 0x02	; 2
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <mac_set_parameter>
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    2b82:	8f ef       	ldi	r24, 0xFF	; 255
    2b84:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    2b86:	df 91       	pop	r29
    2b88:	cf 91       	pop	r28
    2b8a:	1f 91       	pop	r17
    2b8c:	0f 91       	pop	r16
    2b8e:	ef 90       	pop	r14
    2b90:	df 90       	pop	r13
    2b92:	cf 90       	pop	r12
    2b94:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00002b96 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    2b96:	cf 92       	push	r12
    2b98:	df 92       	push	r13
    2b9a:	ef 92       	push	r14
    2b9c:	0f 93       	push	r16
    2b9e:	1f 93       	push	r17
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    2ba6:	6b 01       	movw	r12, r22
    2ba8:	80 e8       	ldi	r24, 0x80	; 128
    2baa:	e8 2e       	mov	r14, r24
    2bac:	8e 2d       	mov	r24, r14
    2bae:	b6 01       	movw	r22, r12
    2bb0:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
    2bb4:	40 97       	sbiw	r24, 0x10	; 16
    2bb6:	49 f4       	brne	.+18     	; 0x2bca <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    2bb8:	2e 2d       	mov	r18, r14
    2bba:	86 01       	movw	r16, r12
    2bbc:	4e e4       	ldi	r20, 0x4E	; 78
    2bbe:	52 e0       	ldi	r21, 0x02	; 2
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <mac_set_parameter>
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    2bca:	8f ef       	ldi	r24, 0xFF	; 255
    2bcc:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	ef 90       	pop	r14
    2bd8:	df 90       	pop	r13
    2bda:	cf 90       	pop	r12
    2bdc:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00002bde <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    2bde:	cf 92       	push	r12
    2be0:	df 92       	push	r13
    2be2:	ef 92       	push	r14
    2be4:	0f 93       	push	r16
    2be6:	1f 93       	push	r17
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    2bee:	6b 01       	movw	r12, r22
    2bf0:	80 e8       	ldi	r24, 0x80	; 128
    2bf2:	e8 2e       	mov	r14, r24
    2bf4:	8e 2d       	mov	r24, r14
    2bf6:	b6 01       	movw	r22, r12
    2bf8:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
    2bfc:	80 97       	sbiw	r24, 0x20	; 32
    2bfe:	49 f4       	brne	.+18     	; 0x2c12 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    2c00:	2e 2d       	mov	r18, r14
    2c02:	86 01       	movw	r16, r12
    2c04:	4d e5       	ldi	r20, 0x5D	; 93
    2c06:	52 e0       	ldi	r21, 0x02	; 2
    2c08:	60 e0       	ldi	r22, 0x00	; 0
    2c0a:	ce 01       	movw	r24, r28
    2c0c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <mac_set_parameter>
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    2c12:	8f ef       	ldi	r24, 0xFF	; 255
    2c14:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ef 90       	pop	r14
    2c20:	df 90       	pop	r13
    2c22:	cf 90       	pop	r12
    2c24:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

000032d8 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
	if(state==0){
    32dc:	61 11       	cpse	r22, r1
    32de:	09 c0       	rjmp	.+18     	; 0x32f2 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    32e0:	0c e6       	ldi	r16, 0x6C	; 108
    32e2:	12 e0       	ldi	r17, 0x02	; 2
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	40 e7       	ldi	r20, 0x70	; 112
    32e8:	52 e0       	ldi	r21, 0x02	; 2
    32ea:	60 e0       	ldi	r22, 0x00	; 0
    32ec:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <mac_set_parameter>
    32f0:	08 c0       	rjmp	.+16     	; 0x3302 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    32f2:	0c e7       	ldi	r16, 0x7C	; 124
    32f4:	12 e0       	ldi	r17, 0x02	; 2
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	40 e7       	ldi	r20, 0x70	; 112
    32fa:	52 e0       	ldi	r21, 0x02	; 2
    32fc:	60 e0       	ldi	r22, 0x00	; 0
    32fe:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <mac_set_parameter>
	}
}
    3302:	1f 91       	pop	r17
    3304:	0f 91       	pop	r16
    3306:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00001b4c <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    1b4c:	df 92       	push	r13
    1b4e:	ef 92       	push	r14
    1b50:	ff 92       	push	r15
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	c7 56       	subi	r28, 0x67	; 103
    1b60:	d1 09       	sbc	r29, r1
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    1b6e:	9f ef       	ldi	r25, 0xFF	; 255
    1b70:	96 0f       	add	r25, r22
    1b72:	9f 3d       	cpi	r25, 0xDF	; 223
    1b74:	68 f5       	brcc	.+90     	; 0x1bd0 <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    1b76:	9f ef       	ldi	r25, 0xFF	; 255
    1b78:	92 0f       	add	r25, r18
    1b7a:	93 33       	cpi	r25, 0x33	; 51
    1b7c:	60 f5       	brcc	.+88     	; 0x1bd6 <mac_tx_confirmed+0x8a>
    1b7e:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	60 e8       	ldi	r22, 0x80	; 128
    1b84:	ce 01       	movw	r24, r28
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	7c 01       	movw	r14, r24
    1b8a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    1b8e:	c7 01       	movw	r24, r14
    1b90:	a0 e8       	ldi	r26, 0x80	; 128
    1b92:	af 93       	push	r26
    1b94:	9f 93       	push	r25
    1b96:	ef 92       	push	r14
    1b98:	1f 92       	push	r1
    1b9a:	df 92       	push	r13
    1b9c:	8f e7       	ldi	r24, 0x7F	; 127
    1b9e:	92 e0       	ldi	r25, 0x02	; 2
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	af 93       	push	r26
    1ba4:	9f 93       	push	r25
    1ba6:	8f 93       	push	r24
    1ba8:	8a e8       	ldi	r24, 0x8A	; 138
    1baa:	92 e0       	ldi	r25, 0x02	; 2
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	af 93       	push	r26
    1bb0:	9f 93       	push	r25
    1bb2:	8f 93       	push	r24
    1bb4:	1f 93       	push	r17
    1bb6:	0f 93       	push	r16
    1bb8:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <sprintf>
    
	
    return strlen(buffer);
    1bbc:	b8 01       	movw	r22, r16
    1bbe:	80 e8       	ldi	r24, 0x80	; 128
    1bc0:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	9f ef       	ldi	r25, 0xFF	; 255
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    1bda:	c9 59       	subi	r28, 0x99	; 153
    1bdc:	df 4f       	sbci	r29, 0xFF	; 255
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	08 95       	ret

Disassembly of section .text.beginsWidth:

00002abc <beginsWidth>:
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
	
	return SU_FATAL_ERROR;
}

static bool beginsWidth(const char *s1, const char *s2){
    2abc:	6f 92       	push	r6
    2abe:	7f 92       	push	r7
    2ac0:	8f 92       	push	r8
    2ac2:	cf 92       	push	r12
    2ac4:	df 92       	push	r13
    2ac6:	ef 92       	push	r14
    2ac8:	0f 93       	push	r16
    2aca:	1f 93       	push	r17
    2acc:	3b 01       	movw	r6, r22
    2ace:	88 2e       	mov	r8, r24
    2ad0:	69 01       	movw	r12, r18
    2ad2:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    2ad4:	84 2f       	mov	r24, r20
    2ad6:	b9 01       	movw	r22, r18
    2ad8:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
    2adc:	8c 01       	movw	r16, r24
    2ade:	4e 2d       	mov	r20, r14
    2ae0:	96 01       	movw	r18, r12
    2ae2:	88 2d       	mov	r24, r8
    2ae4:	b3 01       	movw	r22, r6
    2ae6:	0e 94 35 12 	call	0x246a	; 0x246a <strncmp>
    2aea:	21 e0       	ldi	r18, 0x01	; 1
    2aec:	89 2b       	or	r24, r25
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <beginsWidth+0x36>
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	82 2f       	mov	r24, r18
    2af4:	1f 91       	pop	r17
    2af6:	0f 91       	pop	r16
    2af8:	ef 90       	pop	r14
    2afa:	df 90       	pop	r13
    2afc:	cf 90       	pop	r12
    2afe:	8f 90       	pop	r8
    2b00:	7f 90       	pop	r7
    2b02:	6f 90       	pop	r6
    2b04:	08 95       	ret

Disassembly of section .text.decode_tx_response:

000027b6 <decode_tx_response>:
			break;
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
    27b6:	cf 92       	push	r12
    27b8:	df 92       	push	r13
    27ba:	ef 92       	push	r14
    27bc:	6b 01       	movw	r12, r22
    27be:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    27c0:	2b ec       	ldi	r18, 0xCB	; 203
    27c2:	32 e0       	ldi	r19, 0x02	; 2
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <strcmp>
    27ca:	89 2b       	or	r24, r25
    27cc:	a1 f0       	breq	.+40     	; 0x27f6 <decode_tx_response+0x40>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    27ce:	26 ed       	ldi	r18, 0xD6	; 214
    27d0:	32 e0       	ldi	r19, 0x02	; 2
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	8e 2d       	mov	r24, r14
    27d6:	b6 01       	movw	r22, r12
    27d8:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <strcmp>
    27dc:	89 2b       	or	r24, r25
    27de:	69 f0       	breq	.+26     	; 0x27fa <decode_tx_response+0x44>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    27e0:	2e ed       	ldi	r18, 0xDE	; 222
    27e2:	32 e0       	ldi	r19, 0x02	; 2
    27e4:	40 e0       	ldi	r20, 0x00	; 0
    27e6:	8e 2d       	mov	r24, r14
    27e8:	b6 01       	movw	r22, r12
    27ea:	0e 94 5e 15 	call	0x2abc	; 0x2abc <beginsWidth>
    27ee:	88 23       	and	r24, r24
    27f0:	31 f0       	breq	.+12     	; 0x27fe <decode_tx_response+0x48>
    27f2:	83 e0       	ldi	r24, 0x03	; 3
    27f4:	05 c0       	rjmp	.+10     	; 0x2800 <decode_tx_response+0x4a>
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    27f6:	87 e0       	ldi	r24, 0x07	; 7
    27f8:	03 c0       	rjmp	.+6      	; 0x2800 <decode_tx_response+0x4a>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    27fa:	88 e0       	ldi	r24, 0x08	; 8
    27fc:	01 c0       	rjmp	.+2      	; 0x2800 <decode_tx_response+0x4a>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
	
	return SU_FATAL_ERROR;
    27fe:	86 e0       	ldi	r24, 0x06	; 6
}
    2800:	ef 90       	pop	r14
    2802:	df 90       	pop	r13
    2804:	cf 90       	pop	r12
    2806:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

000013be <SU_send_uplink>:

static SU_STATES decode_tx_response(const char msg[]);
static bool beginsWidth(const char *s1, const char *s2);


LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	28 97       	sbiw	r28, 0x08	; 8
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	d8 2e       	mov	r13, r24
    13de:	7b 01       	movw	r14, r22
    13e0:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    13e2:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    13e4:	e1 2f       	mov	r30, r17
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	e9 30       	cpi	r30, 0x09	; 9
    13ea:	f1 05       	cpc	r31, r1
    13ec:	d8 f7       	brcc	.-10     	; 0x13e4 <SU_send_uplink+0x26>
    13ee:	e5 5b       	subi	r30, 0xB5	; 181
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__tablejump2__>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    13f6:	20 2f       	mov	r18, r16
    13f8:	a7 01       	movw	r20, r14
    13fa:	6d 2d       	mov	r22, r13
    13fc:	80 e9       	ldi	r24, 0x90	; 144
    13fe:	92 e0       	ldi	r25, 0x02	; 2
    1400:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <mac_tx_confirmed>
				attach_ending(lm_msg);
    1404:	80 e9       	ldi	r24, 0x90	; 144
    1406:	92 e0       	ldi	r25, 0x02	; 2
    1408:	0e 94 4d 1b 	call	0x369a	; 0x369a <attach_ending>
				util_transmit_msg(lm_msg);
    140c:	80 e9       	ldi	r24, 0x90	; 144
    140e:	92 e0       	ldi	r25, 0x02	; 2
    1410:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <util_transmit_msg>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	62 e0       	ldi	r22, 0x02	; 2
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	ce 01       	movw	r24, r28
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1424:	25 ee       	ldi	r18, 0xE5	; 229
    1426:	32 e0       	ldi	r19, 0x02	; 2
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1434:	15 e0       	ldi	r17, 0x05	; 5
			break;
    1436:	d6 cf       	rjmp	.-84     	; 0x13e4 <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	64 e0       	ldi	r22, 0x04	; 4
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	0e 94 c8 1c 	call	0x3990	; 0x3990 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    1448:	28 ee       	ldi	r18, 0xE8	; 232
    144a:	32 e0       	ldi	r19, 0x02	; 2
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	ce 01       	movw	r24, r28
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	0e 94 ce 1c 	call	0x399c	; 0x399c <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1458:	15 e0       	ldi	r17, 0x05	; 5
			break;
    145a:	c4 cf       	rjmp	.-120    	; 0x13e4 <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
    145c:	60 e9       	ldi	r22, 0x90	; 144
    145e:	72 e0       	ldi	r23, 0x02	; 2
    1460:	80 e8       	ldi	r24, 0x80	; 128
    1462:	0e 94 db 13 	call	0x27b6	; 0x27b6 <decode_tx_response>
    1466:	18 2f       	mov	r17, r24
			break;
    1468:	bd cf       	rjmp	.-134    	; 0x13e4 <SU_send_uplink+0x26>
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
			
			case SU_NO_ACK:
				return LM_STATUS_MAC_ERR;
    146a:	85 e0       	ldi	r24, 0x05	; 5
    146c:	16 c0       	rjmp	.+44     	; 0x149a <SU_send_uplink+0xdc>
			
			case SU_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;	
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	14 c0       	rjmp	.+40     	; 0x149a <SU_send_uplink+0xdc>
			
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    1472:	0e 94 93 1c 	call	0x3926	; 0x3926 <uart0_hal_message_ready>
    1476:	88 23       	and	r24, r24
    1478:	09 f4       	brne	.+2      	; 0x147c <SU_send_uplink+0xbe>
    147a:	b4 cf       	rjmp	.-152    	; 0x13e4 <SU_send_uplink+0x26>
					util_read_msg(lm_msg);
    147c:	80 e9       	ldi	r24, 0x90	; 144
    147e:	92 e0       	ldi	r25, 0x02	; 2
    1480:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    1484:	60 e9       	ldi	r22, 0x90	; 144
    1486:	72 e0       	ldi	r23, 0x02	; 2
    1488:	ce 01       	movw	r24, r28
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	0e 94 cc 12 	call	0x2598	; 0x2598 <util_matchMessage>
    1490:	18 2f       	mov	r17, r24
    1492:	a8 cf       	rjmp	.-176    	; 0x13e4 <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
			break;
			
			case SU_HANDLE_DOWNLINK:
				return LM_STATUS_SUCCESS;
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	01 c0       	rjmp	.+2      	; 0x149a <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
    1498:	83 e0       	ldi	r24, 0x03	; 3
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    149a:	28 96       	adiw	r28, 0x08	; 8
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

000029dc <SC_put_to_sleep>:
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	5c e5       	ldi	r21, 0x5C	; 92
    29e0:	66 e2       	ldi	r22, 0x26	; 38
    29e2:	75 e0       	ldi	r23, 0x05	; 5
    29e4:	80 e9       	ldi	r24, 0x90	; 144
    29e6:	92 e0       	ldi	r25, 0x02	; 2
    29e8:	0e 94 9d 12 	call	0x253a	; 0x253a <sys_sleep_cmd>
	attach_ending(lm_msg);
    29ec:	80 e9       	ldi	r24, 0x90	; 144
    29ee:	92 e0       	ldi	r25, 0x02	; 2
    29f0:	0e 94 4d 1b 	call	0x369a	; 0x369a <attach_ending>
	util_transmit_msg(lm_msg);
    29f4:	80 e9       	ldi	r24, 0x90	; 144
    29f6:	92 e0       	ldi	r25, 0x02	; 2
    29f8:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <util_transmit_msg>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    29fc:	0e 94 93 1c 	call	0x3926	; 0x3926 <uart0_hal_message_ready>
    2a00:	88 23       	and	r24, r24
    2a02:	e1 f3       	breq	.-8      	; 0x29fc <SC_put_to_sleep+0x20>
	
	util_read_msg(lm_msg);
    2a04:	80 e9       	ldi	r24, 0x90	; 144
    2a06:	92 e0       	ldi	r25, 0x02	; 2
    2a08:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    2a0c:	60 e9       	ldi	r22, 0x90	; 144
    2a0e:	72 e0       	ldi	r23, 0x02	; 2
    2a10:	80 e8       	ldi	r24, 0x80	; 128
    2a12:	2c e1       	ldi	r18, 0x1C	; 28
    2a14:	33 e0       	ldi	r19, 0x03	; 3
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <strcmp>
    2a1c:	89 2b       	or	r24, r25
    2a1e:	11 f4       	brne	.+4      	; 0x2a24 <SC_put_to_sleep+0x48>
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	08 95       	ret
	return LM_STATUS_ERROR;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
}
    2a26:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00003210 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    3210:	85 e5       	ldi	r24, 0x55	; 85
    3212:	0e 94 13 16 	call	0x2c26	; 0x2c26 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    3216:	0e 94 93 1c 	call	0x3926	; 0x3926 <uart0_hal_message_ready>
    321a:	88 23       	and	r24, r24
    321c:	e1 f3       	breq	.-8      	; 0x3216 <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
    321e:	80 e9       	ldi	r24, 0x90	; 144
    3220:	92 e0       	ldi	r25, 0x02	; 2
    3222:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    3226:	60 e9       	ldi	r22, 0x90	; 144
    3228:	72 e0       	ldi	r23, 0x02	; 2
    322a:	80 e8       	ldi	r24, 0x80	; 128
    322c:	2c e1       	ldi	r18, 0x1C	; 28
    322e:	33 e0       	ldi	r19, 0x03	; 3
    3230:	40 e0       	ldi	r20, 0x00	; 0
    3232:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <strcmp>
    3236:	89 2b       	or	r24, r25
    3238:	11 f4       	brne	.+4      	; 0x323e <SC_wake_up+0x2e>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	08 95       	ret
	return LM_STATUS_ERROR;
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	08 95       	ret

Disassembly of section .text.LM_strbeginswith:

00002d3e <LM_strbeginswith>:
	}
	
	return LM_STATUS_FATAL_ERROR;
}

static bool LM_strbeginswith(char *s1, const char *s2){
    2d3e:	cf 92       	push	r12
    2d40:	df 92       	push	r13
    2d42:	ef 92       	push	r14
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	ec 01       	movw	r28, r24
    2d4e:	6a 01       	movw	r12, r20
    2d50:	e6 2e       	mov	r14, r22
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    2d52:	86 2f       	mov	r24, r22
    2d54:	ba 01       	movw	r22, r20
    2d56:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
    2d5a:	8c 01       	movw	r16, r24
    2d5c:	be 01       	movw	r22, r28
    2d5e:	80 e8       	ldi	r24, 0x80	; 128
    2d60:	4e 2d       	mov	r20, r14
    2d62:	96 01       	movw	r18, r12
    2d64:	0e 94 35 12 	call	0x246a	; 0x246a <strncmp>
    2d68:	21 e0       	ldi	r18, 0x01	; 1
    2d6a:	89 2b       	or	r24, r25
    2d6c:	09 f0       	breq	.+2      	; 0x2d70 <LM_strbeginswith+0x32>
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	82 2f       	mov	r24, r18
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	ef 90       	pop	r14
    2d7c:	df 90       	pop	r13
    2d7e:	cf 90       	pop	r12
    2d80:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

00003990 <util_setPendingStates>:




void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    3990:	fc 01       	movw	r30, r24
    3992:	71 83       	std	Z+1, r23	; 0x01
    3994:	60 83       	st	Z, r22
	sd->failure_state=failed;
    3996:	53 83       	std	Z+3, r21	; 0x03
    3998:	42 83       	std	Z+2, r20	; 0x02
    399a:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

0000399c <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    399c:	fc 01       	movw	r30, r24
    399e:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    39a0:	25 83       	std	Z+5, r18	; 0x05
    39a2:	36 83       	std	Z+6, r19	; 0x06
    39a4:	47 83       	std	Z+7, r20	; 0x07
    39a6:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00002598 <util_matchMessage>:
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
    259c:	ec 01       	movw	r28, r24
    259e:	fb 01       	movw	r30, r22
	switch(sd->matchCase){
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	91 30       	cpi	r25, 0x01	; 1
    25a4:	91 f0       	breq	.+36     	; 0x25ca <util_matchMessage+0x32>
    25a6:	18 f0       	brcs	.+6      	; 0x25ae <util_matchMessage+0x16>
    25a8:	92 30       	cpi	r25, 0x02	; 2
    25aa:	e9 f0       	breq	.+58     	; 0x25e6 <util_matchMessage+0x4e>
    25ac:	1f c0       	rjmp	.+62     	; 0x25ec <util_matchMessage+0x54>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    25ae:	2d 81       	ldd	r18, Y+5	; 0x05
    25b0:	3e 81       	ldd	r19, Y+6	; 0x06
    25b2:	4f 81       	ldd	r20, Y+7	; 0x07
    25b4:	80 e8       	ldi	r24, 0x80	; 128
    25b6:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <strcmp>
    25ba:	89 2b       	or	r24, r25
    25bc:	19 f4       	brne	.+6      	; 0x25c4 <util_matchMessage+0x2c>
    25be:	88 81       	ld	r24, Y
    25c0:	99 81       	ldd	r25, Y+1	; 0x01
    25c2:	16 c0       	rjmp	.+44     	; 0x25f0 <util_matchMessage+0x58>
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	9b 81       	ldd	r25, Y+3	; 0x03
    25c8:	13 c0       	rjmp	.+38     	; 0x25f0 <util_matchMessage+0x58>

		case LM_BEGINS_WITH:
		return LM_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    25ca:	4d 81       	ldd	r20, Y+5	; 0x05
    25cc:	5e 81       	ldd	r21, Y+6	; 0x06
    25ce:	6f 81       	ldd	r22, Y+7	; 0x07
    25d0:	cf 01       	movw	r24, r30
    25d2:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <LM_strbeginswith>
    25d6:	88 23       	and	r24, r24
    25d8:	19 f0       	breq	.+6      	; 0x25e0 <util_matchMessage+0x48>
    25da:	88 81       	ld	r24, Y
    25dc:	99 81       	ldd	r25, Y+1	; 0x01
    25de:	08 c0       	rjmp	.+16     	; 0x25f0 <util_matchMessage+0x58>
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	9b 81       	ldd	r25, Y+3	; 0x03
    25e4:	05 c0       	rjmp	.+10     	; 0x25f0 <util_matchMessage+0x58>

		case LM_NO_TEST:
		return sd->success_state;
    25e6:	88 81       	ld	r24, Y
    25e8:	99 81       	ldd	r25, Y+1	; 0x01
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <util_matchMessage+0x58>
		default:
		return sd->failure_state;
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

000036b6 <util_transmit_msg>:

void util_transmit_msg(char msg[]){
    36b6:	cf 93       	push	r28
    36b8:	df 93       	push	r29
    36ba:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    36bc:	bc 01       	movw	r22, r24
    36be:	80 e8       	ldi	r24, 0x80	; 128
    36c0:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <strlen>
    36c4:	68 2f       	mov	r22, r24
    36c6:	ce 01       	movw	r24, r28
    36c8:	0e 94 bb 18 	call	0x3176	; 0x3176 <uart0_hal_send_message>
}
    36cc:	df 91       	pop	r29
    36ce:	cf 91       	pop	r28
    36d0:	08 95       	ret

Disassembly of section .text.util_read_msg:

00003a54 <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str((uint8_t*) msg);
    3a54:	0e 94 25 1a 	call	0x344a	; 0x344a <uart0_hal_read_message_as_str>
    3a58:	08 95       	ret

Disassembly of section .text.util_parse_err:

0000270a <util_parse_err>:
}

LM_STATUS util_parse_err(char *msg){
    270a:	cf 92       	push	r12
    270c:	df 92       	push	r13
    270e:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    2710:	6c 01       	movw	r12, r24
    2712:	20 e8       	ldi	r18, 0x80	; 128
    2714:	e2 2e       	mov	r14, r18
    2716:	22 ef       	ldi	r18, 0xF2	; 242
    2718:	32 e0       	ldi	r19, 0x02	; 2
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	8e 2d       	mov	r24, r14
    271e:	b6 01       	movw	r22, r12
    2720:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <strcmp>
    2724:	89 2b       	or	r24, r25
    2726:	a1 f0       	breq	.+40     	; 0x2750 <util_parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    2728:	2d ef       	ldi	r18, 0xFD	; 253
    272a:	32 e0       	ldi	r19, 0x02	; 2
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	8e 2d       	mov	r24, r14
    2730:	b6 01       	movw	r22, r12
    2732:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <strcmp>
    2736:	89 2b       	or	r24, r25
    2738:	69 f0       	breq	.+26     	; 0x2754 <util_parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    273a:	24 e0       	ldi	r18, 0x04	; 4
    273c:	33 e0       	ldi	r19, 0x03	; 3
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	8e 2d       	mov	r24, r14
    2742:	b6 01       	movw	r22, r12
    2744:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <strcmp>
    2748:	89 2b       	or	r24, r25
    274a:	31 f4       	brne	.+12     	; 0x2758 <util_parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    274c:	84 e0       	ldi	r24, 0x04	; 4
    274e:	05 c0       	rjmp	.+10     	; 0x275a <util_parse_err+0x50>
	uart0_hal_read_message_as_str((uint8_t*) msg);
}

LM_STATUS util_parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	03 c0       	rjmp	.+6      	; 0x275a <util_parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    2754:	83 e0       	ldi	r24, 0x03	; 3
    2756:	01 c0       	rjmp	.+2      	; 0x275a <util_parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    2758:	82 e0       	ldi	r24, 0x02	; 2
}
    275a:	ef 90       	pop	r14
    275c:	df 90       	pop	r13
    275e:	cf 90       	pop	r12
    2760:	08 95       	ret

Disassembly of section .text.get_group_id:

00003a5a <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    3a5a:	80 91 b5 0d 	lds	r24, 0x0DB5	; 0x800db5 <_groupId>
    3a5e:	08 95       	ret

Disassembly of section .text.set_group_id:

00003a60 <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    3a60:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <_groupId>
    3a64:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00003242 <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    3242:	0f 93       	push	r16
    3244:	1f 93       	push	r17
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	8c 01       	movw	r16, r24
    324c:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    324e:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <get_group_id>
    3252:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    3254:	2d 2f       	mov	r18, r29
    3256:	a8 01       	movw	r20, r16
    3258:	68 2f       	mov	r22, r24
    325a:	88 e5       	ldi	r24, 0x58	; 88
    325c:	93 e0       	ldi	r25, 0x03	; 3
    325e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	8c 0f       	add	r24, r28
    3266:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <set_group_id>
}
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00002390 <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    2390:	ef 92       	push	r14
    2392:	ff 92       	push	r15
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	2a 97       	sbiw	r28, 0x0a	; 10
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	18 2f       	mov	r17, r24
    23ac:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    23ae:	9e 01       	movw	r18, r28
    23b0:	2f 5f       	subi	r18, 0xFF	; 255
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	ab 01       	movw	r20, r22
    23b6:	68 2f       	mov	r22, r24
    23b8:	88 e5       	ldi	r24, 0x58	; 88
    23ba:	93 e0       	ldi	r25, 0x03	; 3
    23bc:	0e 94 1b 10 	call	0x2036	; 0x2036 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    23c0:	9e 01       	movw	r18, r28
    23c2:	27 5f       	subi	r18, 0xF7	; 247
    23c4:	3f 4f       	sbci	r19, 0xFF	; 255
    23c6:	ae 01       	movw	r20, r28
    23c8:	49 5f       	subi	r20, 0xF9	; 249
    23ca:	5f 4f       	sbci	r21, 0xFF	; 255
    23cc:	61 2f       	mov	r22, r17
    23ce:	88 e5       	ldi	r24, 0x58	; 88
    23d0:	93 e0       	ldi	r25, 0x03	; 3
    23d2:	0e 94 35 18 	call	0x306a	; 0x306a <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    23d6:	29 85       	ldd	r18, Y+9	; 0x09
    23d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    23da:	4f 81       	ldd	r20, Y+7	; 0x07
    23dc:	58 85       	ldd	r21, Y+8	; 0x08
    23de:	b7 01       	movw	r22, r14
    23e0:	ce 01       	movw	r24, r28
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <mrpp_data_add_int16>
}
    23e8:	2a 96       	adiw	r28, 0x0a	; 10
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	1f 91       	pop	r17
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

000034dc <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    34e2:	88 e5       	ldi	r24, 0x58	; 88
    34e4:	93 e0       	ldi	r25, 0x03	; 3
    34e6:	0e 94 9c 19 	call	0x3338	; 0x3338 <mrpp_state_is_body_ready>
    34ea:	88 83       	st	Y, r24
    34ec:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    34ee:	89 2f       	mov	r24, r25
    34f0:	80 95       	com	r24
    
}
    34f2:	88 1f       	adc	r24, r24
    34f4:	88 27       	eor	r24, r24
    34f6:	88 1f       	adc	r24, r24
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00001f0e <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    1f0e:	af 92       	push	r10
    1f10:	bf 92       	push	r11
    1f12:	cf 92       	push	r12
    1f14:	df 92       	push	r13
    1f16:	ef 92       	push	r14
    1f18:	ff 92       	push	r15
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <MRPP_get_ready_body_package+0x16>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <MRPP_get_ready_body_package+0x18>
    1f26:	1f 92       	push	r1
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	6b 01       	movw	r12, r22
    1f2e:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    1f30:	9e 01       	movw	r18, r28
    1f32:	2b 5f       	subi	r18, 0xFB	; 251
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	79 01       	movw	r14, r18
    1f38:	8e 01       	movw	r16, r28
    1f3a:	0d 5f       	subi	r16, 0xFD	; 253
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	23 50       	subi	r18, 0x03	; 3
    1f40:	31 09       	sbc	r19, r1
    1f42:	ae 01       	movw	r20, r28
    1f44:	4f 5f       	subi	r20, 0xFF	; 255
    1f46:	5f 4f       	sbci	r21, 0xFF	; 255
    1f48:	bc 01       	movw	r22, r24
    1f4a:	88 e5       	ldi	r24, 0x58	; 88
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	0e 94 cf 08 	call	0x119e	; 0x119e <mrpp_state_get_ready_body>
    
    if(!res) return false;
    1f52:	88 23       	and	r24, r24
    1f54:	b1 f0       	breq	.+44     	; 0x1f82 <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    1f56:	4d 81       	ldd	r20, Y+5	; 0x05
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	84 0f       	add	r24, r20
    1f5c:	f5 01       	movw	r30, r10
    1f5e:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    1f60:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <state>
    1f64:	f6 01       	movw	r30, r12
    1f66:	80 83       	st	Z, r24
    package[1]=subId;
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    1f70:	50 e0       	ldi	r21, 0x00	; 0
    1f72:	6b 81       	ldd	r22, Y+3	; 0x03
    1f74:	7c 81       	ldd	r23, Y+4	; 0x04
    1f76:	c6 01       	movw	r24, r12
    1f78:	03 96       	adiw	r24, 0x03	; 3
    1f7a:	0e 94 84 19 	call	0x3308	; 0x3308 <mrpp_data_get>

    return true;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	01 c0       	rjmp	.+2      	; 0x1f84 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    1f82:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	ff 90       	pop	r15
    1f98:	ef 90       	pop	r14
    1f9a:	df 90       	pop	r13
    1f9c:	cf 90       	pop	r12
    1f9e:	bf 90       	pop	r11
    1fa0:	af 90       	pop	r10
    1fa2:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

000039a8 <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    39a8:	bc 01       	movw	r22, r24
    39aa:	88 e5       	ldi	r24, 0x58	; 88
    39ac:	93 e0       	ldi	r25, 0x03	; 3
    39ae:	0e 94 03 1b 	call	0x3606	; 0x3606 <mrpp_state_set_body_sent>
    39b2:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

000034fe <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    34fe:	cf 93       	push	r28
    3500:	df 93       	push	r29
    3502:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3504:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    3508:	fc 01       	movw	r30, r24
    350a:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    350c:	bf 01       	movw	r22, r30
    350e:	88 e5       	ldi	r24, 0x58	; 88
    3510:	93 e0       	ldi	r25, 0x03	; 3
    3512:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <mrpp_state_get_header>
    *package_length+=1;
    3516:	8f 5f       	subi	r24, 0xFF	; 255
    3518:	88 83       	st	Y, r24
}
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00003520 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    3520:	cf 93       	push	r28
    3522:	df 93       	push	r29
    3524:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3526:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    352a:	fc 01       	movw	r30, r24
    352c:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    352e:	bf 01       	movw	r22, r30
    3530:	88 e5       	ldi	r24, 0x58	; 88
    3532:	93 e0       	ldi	r25, 0x03	; 3
    3534:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <mrpp_state_get_tail>
    *package_length+=1;
    3538:	8f 5f       	subi	r24, 0xFF	; 255
    353a:	88 83       	st	Y, r24
}
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

000039f6 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    39f6:	88 e5       	ldi	r24, 0x58	; 88
    39f8:	93 e0       	ldi	r25, 0x03	; 3
    39fa:	0e 94 10 1a 	call	0x3420	; 0x3420 <mrpp_state_all_bodies_sent>
}
    39fe:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00001fa4 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    1fa4:	cf 92       	push	r12
    1fa6:	df 92       	push	r13
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    1fb4:	94 2f       	mov	r25, r20
    1fb6:	0c c0       	rjmp	.+24     	; 0x1fd0 <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    1fb8:	c9 2f       	mov	r28, r25
    1fba:	d0 e0       	ldi	r29, 0x00	; 0
    1fbc:	e4 1b       	sub	r30, r20
    1fbe:	f5 0b       	sbc	r31, r21
    1fc0:	ea 0f       	add	r30, r26
    1fc2:	fb 1f       	adc	r31, r27
    1fc4:	80 81       	ld	r24, Z
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ee 50       	subi	r30, 0x0E	; 14
    1fca:	fc 4f       	sbci	r31, 0xFC	; 252
    1fcc:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    1fce:	9f 5f       	subi	r25, 0xFF	; 255
    1fd0:	e9 2f       	mov	r30, r25
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	6a 01       	movw	r12, r20
    1fd6:	86 e0       	ldi	r24, 0x06	; 6
    1fd8:	c8 0e       	add	r12, r24
    1fda:	d1 1c       	adc	r13, r1
    1fdc:	ec 15       	cp	r30, r12
    1fde:	fd 05       	cpc	r31, r13
    1fe0:	58 f3       	brcs	.-42     	; 0x1fb8 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    1fe2:	26 50       	subi	r18, 0x06	; 6
    1fe4:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    1fe6:	36 95       	lsr	r19
    1fe8:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    1fea:	49 5f       	subi	r20, 0xF9	; 249
    1fec:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    1fee:	a0 e0       	ldi	r26, 0x00	; 0
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	16 c0       	rjmp	.+44     	; 0x2020 <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	f6 01       	movw	r30, r12
    1ffc:	e8 0f       	add	r30, r24
    1ffe:	f9 1f       	adc	r31, r25
    2000:	8b 01       	movw	r16, r22
    2002:	08 0f       	add	r16, r24
    2004:	19 1f       	adc	r17, r25
    2006:	e8 01       	movw	r28, r16
    2008:	f9 80       	ldd	r15, Y+1	; 0x01
    200a:	ee 50       	subi	r30, 0x0E	; 14
    200c:	fc 4f       	sbci	r31, 0xFC	; 252
    200e:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    2010:	84 0f       	add	r24, r20
    2012:	95 1f       	adc	r25, r21
    2014:	18 81       	ld	r17, Y
    2016:	fc 01       	movw	r30, r24
    2018:	ee 50       	subi	r30, 0x0E	; 14
    201a:	fc 4f       	sbci	r31, 0xFC	; 252
    201c:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    201e:	11 96       	adiw	r26, 0x01	; 1
    2020:	a2 17       	cp	r26, r18
    2022:	b3 07       	cpc	r27, r19
    2024:	38 f3       	brcs	.-50     	; 0x1ff4 <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	ff 90       	pop	r15
    2030:	df 90       	pop	r13
    2032:	cf 90       	pop	r12
    2034:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00003308 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	0c c0       	rjmp	.+24     	; 0x332c <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    3314:	de 01       	movw	r26, r28
    3316:	a2 0f       	add	r26, r18
    3318:	b3 1f       	adc	r27, r19
    331a:	f9 01       	movw	r30, r18
    331c:	e6 0f       	add	r30, r22
    331e:	f7 1f       	adc	r31, r23
    3320:	ee 50       	subi	r30, 0x0E	; 14
    3322:	fc 4f       	sbci	r31, 0xFC	; 252
    3324:	90 81       	ld	r25, Z
    3326:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    3328:	2f 5f       	subi	r18, 0xFF	; 255
    332a:	3f 4f       	sbci	r19, 0xFF	; 255
    332c:	24 17       	cp	r18, r20
    332e:	35 07       	cpc	r19, r21
    3330:	88 f3       	brcs	.-30     	; 0x3314 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    3332:	df 91       	pop	r29
    3334:	cf 91       	pop	r28
    3336:	08 95       	ret

Disassembly of section .text.add_data_types:

00001684 <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    1684:	cf 92       	push	r12
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	dc 01       	movw	r26, r24
    1696:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1698:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    169a:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    169c:	c1 2c       	mov	r12, r1
    169e:	d1 2c       	mov	r13, r1
    16a0:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    16a2:	4a c0       	rjmp	.+148    	; 0x1738 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    16a4:	29 2f       	mov	r18, r25
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	f9 01       	movw	r30, r18
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	22 0f       	add	r18, r18
    16b0:	33 1f       	adc	r19, r19
    16b2:	22 0f       	add	r18, r18
    16b4:	33 1f       	adc	r19, r19
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	e2 0f       	add	r30, r18
    16bc:	f3 1f       	adc	r31, r19
    16be:	ea 0f       	add	r30, r26
    16c0:	fb 1f       	adc	r31, r27
    16c2:	27 81       	ldd	r18, Z+7	; 0x07
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	a9 f0       	breq	.+42     	; 0x16f2 <add_data_types+0x6e>
    16c8:	24 30       	cpi	r18, 0x04	; 4
    16ca:	21 f1       	breq	.+72     	; 0x1714 <add_data_types+0x90>
    16cc:	21 30       	cpi	r18, 0x01	; 1
    16ce:	91 f5       	brne	.+100    	; 0x1734 <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    16d0:	01 e0       	ldi	r16, 0x01	; 1
    16d2:	10 e0       	ldi	r17, 0x00	; 0
    16d4:	04 2e       	mov	r0, r20
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <add_data_types+0x58>
    16d8:	00 0f       	add	r16, r16
    16da:	11 1f       	adc	r17, r17
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <add_data_types+0x54>
    16e0:	01 2e       	mov	r0, r17
    16e2:	00 0c       	add	r0, r0
    16e4:	22 0b       	sbc	r18, r18
    16e6:	33 0b       	sbc	r19, r19
    16e8:	c0 2a       	or	r12, r16
    16ea:	d1 2a       	or	r13, r17
    16ec:	e2 2a       	or	r14, r18
    16ee:	f3 2a       	or	r15, r19
                break;
    16f0:	21 c0       	rjmp	.+66     	; 0x1734 <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    16f2:	02 e0       	ldi	r16, 0x02	; 2
    16f4:	10 e0       	ldi	r17, 0x00	; 0
    16f6:	04 2e       	mov	r0, r20
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <add_data_types+0x7a>
    16fa:	00 0f       	add	r16, r16
    16fc:	11 1f       	adc	r17, r17
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <add_data_types+0x76>
    1702:	01 2e       	mov	r0, r17
    1704:	00 0c       	add	r0, r0
    1706:	22 0b       	sbc	r18, r18
    1708:	33 0b       	sbc	r19, r19
    170a:	c0 2a       	or	r12, r16
    170c:	d1 2a       	or	r13, r17
    170e:	e2 2a       	or	r14, r18
    1710:	f3 2a       	or	r15, r19
                break;
    1712:	10 c0       	rjmp	.+32     	; 0x1734 <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    1714:	03 e0       	ldi	r16, 0x03	; 3
    1716:	10 e0       	ldi	r17, 0x00	; 0
    1718:	04 2e       	mov	r0, r20
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <add_data_types+0x9c>
    171c:	00 0f       	add	r16, r16
    171e:	11 1f       	adc	r17, r17
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <add_data_types+0x98>
    1724:	01 2e       	mov	r0, r17
    1726:	00 0c       	add	r0, r0
    1728:	22 0b       	sbc	r18, r18
    172a:	33 0b       	sbc	r19, r19
    172c:	c0 2a       	or	r12, r16
    172e:	d1 2a       	or	r13, r17
    1730:	e2 2a       	or	r14, r18
    1732:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    1734:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1736:	9f 5f       	subi	r25, 0xFF	; 255
    1738:	12 96       	adiw	r26, 0x02	; 2
    173a:	8c 91       	ld	r24, X
    173c:	12 97       	sbiw	r26, 0x02	; 2
    173e:	98 17       	cp	r25, r24
    1740:	08 f4       	brcc	.+2      	; 0x1744 <add_data_types+0xc0>
    1742:	b0 cf       	rjmp	.-160    	; 0x16a4 <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    1744:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    1746:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    1748:	cd 82       	std	Y+5, r12	; 0x05
} 
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	08 95       	ret

Disassembly of section .text.update_bodies:

00000dda <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
 dda:	cf 93       	push	r28
 ddc:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
 dde:	26 2f       	mov	r18, r22
 de0:	30 e0       	ldi	r19, 0x00	; 0
 de2:	c9 01       	movw	r24, r18
 de4:	01 97       	sbiw	r24, 0x01	; 1
 de6:	f9 01       	movw	r30, r18
 de8:	ee 0f       	add	r30, r30
 dea:	ff 1f       	adc	r31, r31
 dec:	22 0f       	add	r18, r18
 dee:	33 1f       	adc	r19, r19
 df0:	22 0f       	add	r18, r18
 df2:	33 1f       	adc	r19, r19
 df4:	22 0f       	add	r18, r18
 df6:	33 1f       	adc	r19, r19
 df8:	e2 0f       	add	r30, r18
 dfa:	f3 1f       	adc	r31, r19
 dfc:	ea 0f       	add	r30, r26
 dfe:	fb 1f       	adc	r31, r27
 e00:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
 e02:	c0 e0       	ldi	r28, 0x00	; 0
 e04:	25 c0       	rjmp	.+74     	; 0xe50 <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
 e06:	82 17       	cp	r24, r18
 e08:	93 07       	cpc	r25, r19
 e0a:	09 f1       	breq	.+66     	; 0xe4e <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
 e0c:	a9 01       	movw	r20, r18
 e0e:	44 0f       	add	r20, r20
 e10:	55 1f       	adc	r21, r21
 e12:	44 0f       	add	r20, r20
 e14:	55 1f       	adc	r21, r21
 e16:	44 0f       	add	r20, r20
 e18:	55 1f       	adc	r21, r21
 e1a:	f9 01       	movw	r30, r18
 e1c:	ee 0f       	add	r30, r30
 e1e:	ff 1f       	adc	r31, r31
 e20:	e4 0f       	add	r30, r20
 e22:	f5 1f       	adc	r31, r21
 e24:	ea 0f       	add	r30, r26
 e26:	fb 1f       	adc	r31, r27
 e28:	43 85       	ldd	r20, Z+11	; 0x0b
 e2a:	74 13       	cpse	r23, r20
 e2c:	10 c0       	rjmp	.+32     	; 0xe4e <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
 e2e:	f9 01       	movw	r30, r18
 e30:	ee 0f       	add	r30, r30
 e32:	ff 1f       	adc	r31, r31
 e34:	22 0f       	add	r18, r18
 e36:	33 1f       	adc	r19, r19
 e38:	22 0f       	add	r18, r18
 e3a:	33 1f       	adc	r19, r19
 e3c:	22 0f       	add	r18, r18
 e3e:	33 1f       	adc	r19, r19
 e40:	e2 0f       	add	r30, r18
 e42:	f3 1f       	adc	r31, r19
 e44:	ea 0f       	add	r30, r26
 e46:	fb 1f       	adc	r31, r27
 e48:	24 85       	ldd	r18, Z+12	; 0x0c
 e4a:	23 30       	cpi	r18, 0x03	; 3
 e4c:	41 f4       	brne	.+16     	; 0xe5e <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
 e4e:	cf 5f       	subi	r28, 0xFF	; 255
 e50:	2c 2f       	mov	r18, r28
 e52:	30 e0       	ldi	r19, 0x00	; 0
 e54:	28 17       	cp	r18, r24
 e56:	39 07       	cpc	r19, r25
 e58:	b4 f2       	brlt	.-84     	; 0xe06 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
 e5a:	21 e0       	ldi	r18, 0x01	; 1
 e5c:	01 c0       	rjmp	.+2      	; 0xe60 <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
 e5e:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
 e60:	22 23       	and	r18, r18
 e62:	39 f0       	breq	.+14     	; 0xe72 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
 e64:	fd 01       	movw	r30, r26
 e66:	e7 0f       	add	r30, r23
 e68:	f1 1d       	adc	r31, r1
 e6a:	e4 58       	subi	r30, 0x84	; 132
 e6c:	ff 4f       	sbci	r31, 0xFF	; 255
 e6e:	21 e0       	ldi	r18, 0x01	; 1
 e70:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
 e72:	9c 01       	movw	r18, r24
 e74:	22 0f       	add	r18, r18
 e76:	33 1f       	adc	r19, r19
 e78:	22 0f       	add	r18, r18
 e7a:	33 1f       	adc	r19, r19
 e7c:	22 0f       	add	r18, r18
 e7e:	33 1f       	adc	r19, r19
 e80:	fc 01       	movw	r30, r24
 e82:	ee 0f       	add	r30, r30
 e84:	ff 1f       	adc	r31, r31
 e86:	e2 0f       	add	r30, r18
 e88:	f3 1f       	adc	r31, r19
 e8a:	ea 0f       	add	r30, r26
 e8c:	fb 1f       	adc	r31, r27
 e8e:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 e90:	29 c0       	rjmp	.+82     	; 0xee4 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
 e92:	46 2f       	mov	r20, r22
 e94:	50 e0       	ldi	r21, 0x00	; 0
 e96:	84 17       	cp	r24, r20
 e98:	95 07       	cpc	r25, r21
 e9a:	19 f1       	breq	.+70     	; 0xee2 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
 e9c:	9a 01       	movw	r18, r20
 e9e:	2f 5f       	subi	r18, 0xFF	; 255
 ea0:	3f 4f       	sbci	r19, 0xFF	; 255
 ea2:	f9 01       	movw	r30, r18
 ea4:	ee 0f       	add	r30, r30
 ea6:	ff 1f       	adc	r31, r31
 ea8:	22 0f       	add	r18, r18
 eaa:	33 1f       	adc	r19, r19
 eac:	22 0f       	add	r18, r18
 eae:	33 1f       	adc	r19, r19
 eb0:	22 0f       	add	r18, r18
 eb2:	33 1f       	adc	r19, r19
 eb4:	e2 0f       	add	r30, r18
 eb6:	f3 1f       	adc	r31, r19
 eb8:	ea 0f       	add	r30, r26
 eba:	fb 1f       	adc	r31, r27
 ebc:	20 81       	ld	r18, Z
 ebe:	c2 13       	cpse	r28, r18
 ec0:	10 c0       	rjmp	.+32     	; 0xee2 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
 ec2:	fa 01       	movw	r30, r20
 ec4:	ee 0f       	add	r30, r30
 ec6:	ff 1f       	adc	r31, r31
 ec8:	44 0f       	add	r20, r20
 eca:	55 1f       	adc	r21, r21
 ecc:	44 0f       	add	r20, r20
 ece:	55 1f       	adc	r21, r21
 ed0:	44 0f       	add	r20, r20
 ed2:	55 1f       	adc	r21, r21
 ed4:	e4 0f       	add	r30, r20
 ed6:	f5 1f       	adc	r31, r21
 ed8:	ea 0f       	add	r30, r26
 eda:	fb 1f       	adc	r31, r27
 edc:	24 85       	ldd	r18, Z+12	; 0x0c
 ede:	23 30       	cpi	r18, 0x03	; 3
 ee0:	41 f4       	brne	.+16     	; 0xef2 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 ee2:	6f 5f       	subi	r22, 0xFF	; 255
 ee4:	12 96       	adiw	r26, 0x02	; 2
 ee6:	2c 91       	ld	r18, X
 ee8:	12 97       	sbiw	r26, 0x02	; 2
 eea:	62 17       	cp	r22, r18
 eec:	90 f2       	brcs	.-92     	; 0xe92 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
 eee:	81 e0       	ldi	r24, 0x01	; 1
 ef0:	01 c0       	rjmp	.+2      	; 0xef4 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
 ef2:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
 ef4:	88 23       	and	r24, r24
 ef6:	41 f0       	breq	.+16     	; 0xf08 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
 ef8:	fd 01       	movw	r30, r26
 efa:	ec 0f       	add	r30, r28
 efc:	f1 1d       	adc	r31, r1
 efe:	e4 58       	subi	r30, 0x84	; 132
 f00:	ff 4f       	sbci	r31, 0xFF	; 255
 f02:	81 e0       	ldi	r24, 0x01	; 1
 f04:	80 83       	st	Z, r24
 f06:	06 c0       	rjmp	.+12     	; 0xf14 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
 f08:	fd 01       	movw	r30, r26
 f0a:	ec 0f       	add	r30, r28
 f0c:	f1 1d       	adc	r31, r1
 f0e:	e4 58       	subi	r30, 0x84	; 132
 f10:	ff 4f       	sbci	r31, 0xFF	; 255
 f12:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
 f14:	8c 2f       	mov	r24, r28
 f16:	90 e0       	ldi	r25, 0x00	; 0
 f18:	87 1b       	sub	r24, r23
 f1a:	91 09       	sbc	r25, r1
 f1c:	02 97       	sbiw	r24, 0x02	; 2
 f1e:	64 f0       	brlt	.+24     	; 0xf38 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f20:	7f 5f       	subi	r23, 0xFF	; 255
 f22:	08 c0       	rjmp	.+16     	; 0xf34 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
 f24:	fd 01       	movw	r30, r26
 f26:	e7 0f       	add	r30, r23
 f28:	f1 1d       	adc	r31, r1
 f2a:	e4 58       	subi	r30, 0x84	; 132
 f2c:	ff 4f       	sbci	r31, 0xFF	; 255
 f2e:	81 e0       	ldi	r24, 0x01	; 1
 f30:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f32:	7f 5f       	subi	r23, 0xFF	; 255
 f34:	7c 17       	cp	r23, r28
 f36:	b0 f3       	brcs	.-20     	; 0xf24 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
 f38:	cf 91       	pop	r28
 f3a:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00000c1c <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
 c1c:	af 92       	push	r10
 c1e:	bf 92       	push	r11
 c20:	cf 92       	push	r12
 c22:	df 92       	push	r13
 c24:	ef 92       	push	r14
 c26:	ff 92       	push	r15
 c28:	0f 93       	push	r16
 c2a:	1f 93       	push	r17
 c2c:	cf 93       	push	r28
 c2e:	df 93       	push	r29
 c30:	ec 01       	movw	r28, r24
 c32:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
 c34:	68 83       	st	Y, r22
    state->nCollections=nCollections;
 c36:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 c38:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
 c3a:	00 e0       	ldi	r16, 0x00	; 0
 c3c:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
 c3e:	8f c0       	rjmp	.+286    	; 0xd5e <mrpp_state_init+0x142>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
 c40:	ed 2d       	mov	r30, r13
 c42:	f0 e0       	ldi	r31, 0x00	; 0
 c44:	cf 01       	movw	r24, r30
 c46:	88 0f       	add	r24, r24
 c48:	99 1f       	adc	r25, r25
 c4a:	88 0f       	add	r24, r24
 c4c:	99 1f       	adc	r25, r25
 c4e:	8e 0f       	add	r24, r30
 c50:	9f 1f       	adc	r25, r31
 c52:	84 0f       	add	r24, r20
 c54:	95 1f       	adc	r25, r21
 c56:	dc 01       	movw	r26, r24
 c58:	12 96       	adiw	r26, 0x02	; 2
 c5a:	6d 91       	ld	r22, X+
 c5c:	7c 91       	ld	r23, X
 c5e:	13 97       	sbiw	r26, 0x03	; 3
 c60:	df 01       	movw	r26, r30
 c62:	aa 0f       	add	r26, r26
 c64:	bb 1f       	adc	r27, r27
 c66:	9f 01       	movw	r18, r30
 c68:	22 0f       	add	r18, r18
 c6a:	33 1f       	adc	r19, r19
 c6c:	22 0f       	add	r18, r18
 c6e:	33 1f       	adc	r19, r19
 c70:	22 0f       	add	r18, r18
 c72:	33 1f       	adc	r19, r19
 c74:	a2 0f       	add	r26, r18
 c76:	b3 1f       	adc	r27, r19
 c78:	5d 01       	movw	r10, r26
 c7a:	ac 0e       	add	r10, r28
 c7c:	bd 1e       	adc	r11, r29
 c7e:	d5 01       	movw	r26, r10
 c80:	19 96       	adiw	r26, 0x09	; 9
 c82:	7c 93       	st	X, r23
 c84:	6e 93       	st	-X, r22
 c86:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
 c88:	dc 01       	movw	r26, r24
 c8a:	14 96       	adiw	r26, 0x04	; 4
 c8c:	2c 91       	ld	r18, X
 c8e:	d5 01       	movw	r26, r10
 c90:	17 96       	adiw	r26, 0x07	; 7
 c92:	2c 93       	st	X, r18
 c94:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
 c96:	14 96       	adiw	r26, 0x04	; 4
 c98:	1c 93       	st	X, r17
 c9a:	0e 93       	st	-X, r16
 c9c:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
 c9e:	dc 01       	movw	r26, r24
 ca0:	2d 91       	ld	r18, X+
 ca2:	3c 91       	ld	r19, X
 ca4:	11 97       	sbiw	r26, 0x01	; 1
 ca6:	14 96       	adiw	r26, 0x04	; 4
 ca8:	8c 91       	ld	r24, X
 caa:	82 9f       	mul	r24, r18
 cac:	70 01       	movw	r14, r0
 cae:	83 9f       	mul	r24, r19
 cb0:	f0 0c       	add	r15, r0
 cb2:	11 24       	eor	r1, r1
 cb4:	b6 e0       	ldi	r27, 0x06	; 6
 cb6:	eb 0e       	add	r14, r27
 cb8:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
 cba:	d5 01       	movw	r26, r10
 cbc:	16 96       	adiw	r26, 0x06	; 6
 cbe:	fc 92       	st	X, r15
 cc0:	ee 92       	st	-X, r14
 cc2:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
 cc4:	98 01       	movw	r18, r16
 cc6:	ab ea       	ldi	r26, 0xAB	; 171
 cc8:	ba ea       	ldi	r27, 0xAA	; 170
 cca:	0e 94 13 1b 	call	0x3626	; 0x3626 <__umulhisi3>
 cce:	96 95       	lsr	r25
 cd0:	87 95       	ror	r24
 cd2:	92 95       	swap	r25
 cd4:	82 95       	swap	r24
 cd6:	8f 70       	andi	r24, 0x0F	; 15
 cd8:	89 27       	eor	r24, r25
 cda:	9f 70       	andi	r25, 0x0F	; 15
 cdc:	89 27       	eor	r24, r25
 cde:	9f 01       	movw	r18, r30
 ce0:	2f 5f       	subi	r18, 0xFF	; 255
 ce2:	3f 4f       	sbci	r19, 0xFF	; 255
 ce4:	d9 01       	movw	r26, r18
 ce6:	aa 0f       	add	r26, r26
 ce8:	bb 1f       	adc	r27, r27
 cea:	22 0f       	add	r18, r18
 cec:	33 1f       	adc	r19, r19
 cee:	22 0f       	add	r18, r18
 cf0:	33 1f       	adc	r19, r19
 cf2:	22 0f       	add	r18, r18
 cf4:	33 1f       	adc	r19, r19
 cf6:	a2 0f       	add	r26, r18
 cf8:	b3 1f       	adc	r27, r19
 cfa:	ac 0f       	add	r26, r28
 cfc:	bd 1f       	adc	r27, r29
 cfe:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
 d00:	0e 0d       	add	r16, r14
 d02:	1f 1d       	adc	r17, r15
 d04:	98 01       	movw	r18, r16
 d06:	ab ea       	ldi	r26, 0xAB	; 171
 d08:	ba ea       	ldi	r27, 0xAA	; 170
 d0a:	0e 94 13 1b 	call	0x3626	; 0x3626 <__umulhisi3>
 d0e:	7c 01       	movw	r14, r24
 d10:	f6 94       	lsr	r15
 d12:	e7 94       	ror	r14
 d14:	f6 94       	lsr	r15
 d16:	e7 94       	ror	r14
 d18:	f6 94       	lsr	r15
 d1a:	e7 94       	ror	r14
 d1c:	f6 94       	lsr	r15
 d1e:	e7 94       	ror	r14
 d20:	f6 94       	lsr	r15
 d22:	e7 94       	ror	r14
 d24:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
 d26:	20 e3       	ldi	r18, 0x30	; 48
 d28:	2e 9d       	mul	r18, r14
 d2a:	c0 01       	movw	r24, r0
 d2c:	2f 9d       	mul	r18, r15
 d2e:	90 0d       	add	r25, r0
 d30:	11 24       	eor	r1, r1
 d32:	08 17       	cp	r16, r24
 d34:	19 07       	cpc	r17, r25
 d36:	19 f4       	brne	.+6      	; 0xd3e <mrpp_state_init+0x122>
 d38:	bb 24       	eor	r11, r11
 d3a:	ba 94       	dec	r11
 d3c:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
 d3e:	cf 01       	movw	r24, r30
 d40:	88 0f       	add	r24, r24
 d42:	99 1f       	adc	r25, r25
 d44:	ee 0f       	add	r30, r30
 d46:	ff 1f       	adc	r31, r31
 d48:	ee 0f       	add	r30, r30
 d4a:	ff 1f       	adc	r31, r31
 d4c:	ee 0f       	add	r30, r30
 d4e:	ff 1f       	adc	r31, r31
 d50:	e8 0f       	add	r30, r24
 d52:	f9 1f       	adc	r31, r25
 d54:	ec 0f       	add	r30, r28
 d56:	fd 1f       	adc	r31, r29
 d58:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
 d5a:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 d5c:	d3 94       	inc	r13
 d5e:	dc 14       	cp	r13, r12
 d60:	08 f4       	brcc	.+2      	; 0xd64 <mrpp_state_init+0x148>
 d62:	6e cf       	rjmp	.-292    	; 0xc40 <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
 d64:	98 01       	movw	r18, r16
 d66:	ab ea       	ldi	r26, 0xAB	; 171
 d68:	ba ea       	ldi	r27, 0xAA	; 170
 d6a:	0e 94 13 1b 	call	0x3626	; 0x3626 <__umulhisi3>
 d6e:	fc 01       	movw	r30, r24
 d70:	f6 95       	lsr	r31
 d72:	e7 95       	ror	r30
 d74:	f2 95       	swap	r31
 d76:	e2 95       	swap	r30
 d78:	ef 70       	andi	r30, 0x0F	; 15
 d7a:	ef 27       	eor	r30, r31
 d7c:	ff 70       	andi	r31, 0x0F	; 15
 d7e:	ef 27       	eor	r30, r31
 d80:	4e 2f       	mov	r20, r30
 d82:	52 e0       	ldi	r21, 0x02	; 2
 d84:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
 d86:	20 e3       	ldi	r18, 0x30	; 48
 d88:	2e 9f       	mul	r18, r30
 d8a:	c0 01       	movw	r24, r0
 d8c:	2f 9f       	mul	r18, r31
 d8e:	90 0d       	add	r25, r0
 d90:	11 24       	eor	r1, r1
 d92:	08 1b       	sub	r16, r24
 d94:	19 0b       	sbc	r17, r25
 d96:	11 f4       	brne	.+4      	; 0xd9c <mrpp_state_init+0x180>
 d98:	51 e0       	ldi	r21, 0x01	; 1
 d9a:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
 d9c:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
 d9e:	01 2b       	or	r16, r17
 da0:	11 f0       	breq	.+4      	; 0xda6 <mrpp_state_init+0x18a>
 da2:	41 e0       	ldi	r20, 0x01	; 1
 da4:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
 da6:	fe 01       	movw	r30, r28
 da8:	e5 58       	subi	r30, 0x85	; 133
 daa:	ff 4f       	sbci	r31, 0xFF	; 255
 dac:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
 dae:	80 e0       	ldi	r24, 0x00	; 0
 db0:	07 c0       	rjmp	.+14     	; 0xdc0 <mrpp_state_init+0x1a4>
    {
        state->bodies[i]=WAITING;
 db2:	fe 01       	movw	r30, r28
 db4:	e8 0f       	add	r30, r24
 db6:	f1 1d       	adc	r31, r1
 db8:	e4 58       	subi	r30, 0x84	; 132
 dba:	ff 4f       	sbci	r31, 0xFF	; 255
 dbc:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
 dbe:	8f 5f       	subi	r24, 0xFF	; 255
 dc0:	84 17       	cp	r24, r20
 dc2:	b8 f3       	brcs	.-18     	; 0xdb2 <mrpp_state_init+0x196>
    {
        state->bodies[i]=WAITING;
    }
}
 dc4:	df 91       	pop	r29
 dc6:	cf 91       	pop	r28
 dc8:	1f 91       	pop	r17
 dca:	0f 91       	pop	r16
 dcc:	ff 90       	pop	r15
 dce:	ef 90       	pop	r14
 dd0:	df 90       	pop	r13
 dd2:	cf 90       	pop	r12
 dd4:	bf 90       	pop	r11
 dd6:	af 90       	pop	r10
 dd8:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00001c9c <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	8c 01       	movw	r16, r24
    1ca6:	eb 01       	movw	r28, r22
    package[0]=0;
    1ca8:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    1caa:	fc 01       	movw	r30, r24
    1cac:	81 81       	ldd	r24, Z+1	; 0x01
    1cae:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1cb0:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    1cb2:	c8 01       	movw	r24, r16
    1cb4:	0e 94 42 0b 	call	0x1684	; 0x1684 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	35 c0       	rjmp	.+106    	; 0x1d26 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1cbc:	82 2f       	mov	r24, r18
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	aa 0f       	add	r26, r26
    1cc4:	bb 1f       	adc	r27, r27
    1cc6:	aa 0f       	add	r26, r26
    1cc8:	bb 1f       	adc	r27, r27
    1cca:	ad 01       	movw	r20, r26
    1ccc:	4a 5f       	subi	r20, 0xFA	; 250
    1cce:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd0:	4c 0f       	add	r20, r28
    1cd2:	5d 1f       	adc	r21, r29
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	e8 0f       	add	r30, r24
    1ce8:	f9 1f       	adc	r31, r25
    1cea:	bf 01       	movw	r22, r30
    1cec:	60 0f       	add	r22, r16
    1cee:	71 1f       	adc	r23, r17
    1cf0:	fb 01       	movw	r30, r22
    1cf2:	84 81       	ldd	r24, Z+4	; 0x04
    1cf4:	fa 01       	movw	r30, r20
    1cf6:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1cf8:	cd 01       	movw	r24, r26
    1cfa:	07 96       	adiw	r24, 0x07	; 7
    1cfc:	8c 0f       	add	r24, r28
    1cfe:	9d 1f       	adc	r25, r29
    1d00:	fb 01       	movw	r30, r22
    1d02:	33 81       	ldd	r19, Z+3	; 0x03
    1d04:	fc 01       	movw	r30, r24
    1d06:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1d08:	cd 01       	movw	r24, r26
    1d0a:	08 96       	adiw	r24, 0x08	; 8
    1d0c:	8c 0f       	add	r24, r28
    1d0e:	9d 1f       	adc	r25, r29
    1d10:	fb 01       	movw	r30, r22
    1d12:	36 81       	ldd	r19, Z+6	; 0x06
    1d14:	fc 01       	movw	r30, r24
    1d16:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1d18:	19 96       	adiw	r26, 0x09	; 9
    1d1a:	ac 0f       	add	r26, r28
    1d1c:	bd 1f       	adc	r27, r29
    1d1e:	fb 01       	movw	r30, r22
    1d20:	85 81       	ldd	r24, Z+5	; 0x05
    1d22:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    1d24:	2f 5f       	subi	r18, 0xFF	; 255
    1d26:	f8 01       	movw	r30, r16
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	28 17       	cp	r18, r24
    1d2c:	38 f2       	brcs	.-114    	; 0x1cbc <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1d2e:	88 0f       	add	r24, r24
    1d30:	88 0f       	add	r24, r24
}
    1d32:	8a 5f       	subi	r24, 0xFA	; 250
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	1f 91       	pop	r17
    1d3a:	0f 91       	pop	r16
    1d3c:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00001bf8 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	8c 01       	movw	r16, r24
    1c02:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    1c04:	fc 01       	movw	r30, r24
    1c06:	81 81       	ldd	r24, Z+1	; 0x01
    1c08:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    1c0a:	81 81       	ldd	r24, Z+1	; 0x01
    1c0c:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1c0e:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    1c10:	c8 01       	movw	r24, r16
    1c12:	0e 94 42 0b 	call	0x1684	; 0x1684 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	35 c0       	rjmp	.+106    	; 0x1c84 <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1c1a:	82 2f       	mov	r24, r18
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	dc 01       	movw	r26, r24
    1c20:	aa 0f       	add	r26, r26
    1c22:	bb 1f       	adc	r27, r27
    1c24:	aa 0f       	add	r26, r26
    1c26:	bb 1f       	adc	r27, r27
    1c28:	ad 01       	movw	r20, r26
    1c2a:	4a 5f       	subi	r20, 0xFA	; 250
    1c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2e:	4c 0f       	add	r20, r28
    1c30:	5d 1f       	adc	r21, r29
    1c32:	fc 01       	movw	r30, r24
    1c34:	ee 0f       	add	r30, r30
    1c36:	ff 1f       	adc	r31, r31
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	e8 0f       	add	r30, r24
    1c46:	f9 1f       	adc	r31, r25
    1c48:	bf 01       	movw	r22, r30
    1c4a:	60 0f       	add	r22, r16
    1c4c:	71 1f       	adc	r23, r17
    1c4e:	fb 01       	movw	r30, r22
    1c50:	84 81       	ldd	r24, Z+4	; 0x04
    1c52:	fa 01       	movw	r30, r20
    1c54:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1c56:	cd 01       	movw	r24, r26
    1c58:	07 96       	adiw	r24, 0x07	; 7
    1c5a:	8c 0f       	add	r24, r28
    1c5c:	9d 1f       	adc	r25, r29
    1c5e:	fb 01       	movw	r30, r22
    1c60:	33 81       	ldd	r19, Z+3	; 0x03
    1c62:	fc 01       	movw	r30, r24
    1c64:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1c66:	cd 01       	movw	r24, r26
    1c68:	08 96       	adiw	r24, 0x08	; 8
    1c6a:	8c 0f       	add	r24, r28
    1c6c:	9d 1f       	adc	r25, r29
    1c6e:	fb 01       	movw	r30, r22
    1c70:	36 81       	ldd	r19, Z+6	; 0x06
    1c72:	fc 01       	movw	r30, r24
    1c74:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1c76:	19 96       	adiw	r26, 0x09	; 9
    1c78:	ac 0f       	add	r26, r28
    1c7a:	bd 1f       	adc	r27, r29
    1c7c:	fb 01       	movw	r30, r22
    1c7e:	85 81       	ldd	r24, Z+5	; 0x05
    1c80:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    1c82:	2f 5f       	subi	r18, 0xFF	; 255
    1c84:	f8 01       	movw	r30, r16
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	28 17       	cp	r18, r24
    1c8a:	38 f2       	brcs	.-114    	; 0x1c1a <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1c8c:	88 0f       	add	r24, r24
    1c8e:	88 0f       	add	r24, r24
}
    1c90:	8a 5f       	subi	r24, 0xFA	; 250
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00002036 <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    2040:	a6 2f       	mov	r26, r22
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	11 97       	sbiw	r26, 0x01	; 1
    2046:	fd 01       	movw	r30, r26
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	cd 01       	movw	r24, r26
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	e8 0f       	add	r30, r24
    205c:	f9 1f       	adc	r31, r25
    205e:	e0 0f       	add	r30, r16
    2060:	f1 1f       	adc	r31, r17
    2062:	83 e0       	ldi	r24, 0x03	; 3
    2064:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0a c0       	rjmp	.+20     	; 0x207e <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    206a:	e9 2f       	mov	r30, r25
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	e9 01       	movw	r28, r18
    2070:	ce 0f       	add	r28, r30
    2072:	df 1f       	adc	r29, r31
    2074:	e4 0f       	add	r30, r20
    2076:	f5 1f       	adc	r31, r21
    2078:	80 81       	ld	r24, Z
    207a:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    207c:	9f 5f       	subi	r25, 0xFF	; 255
    207e:	94 30       	cpi	r25, 0x04	; 4
    2080:	a0 f3       	brcs	.-24     	; 0x206a <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    2082:	cd 01       	movw	r24, r26
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	aa 0f       	add	r26, r26
    208a:	bb 1f       	adc	r27, r27
    208c:	aa 0f       	add	r26, r26
    208e:	bb 1f       	adc	r27, r27
    2090:	aa 0f       	add	r26, r26
    2092:	bb 1f       	adc	r27, r27
    2094:	a8 0f       	add	r26, r24
    2096:	b9 1f       	adc	r27, r25
    2098:	a0 0f       	add	r26, r16
    209a:	b1 1f       	adc	r27, r17
    209c:	19 96       	adiw	r26, 0x09	; 9
    209e:	8c 91       	ld	r24, X
    20a0:	19 97       	sbiw	r26, 0x09	; 9
    20a2:	f9 01       	movw	r30, r18
    20a4:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    20a6:	18 96       	adiw	r26, 0x08	; 8
    20a8:	8c 91       	ld	r24, X
    20aa:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    20ac:	c8 01       	movw	r24, r16
    20ae:	0e 94 ed 06 	call	0xdda	; 0xdda <update_bodies>
}
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00003338 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    3338:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	0b c0       	rjmp	.+22     	; 0x3354 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    333e:	29 2f       	mov	r18, r25
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	fa 01       	movw	r30, r20
    3344:	e2 0f       	add	r30, r18
    3346:	f3 1f       	adc	r31, r19
    3348:	e4 58       	subi	r30, 0x84	; 132
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	80 81       	ld	r24, Z
    334e:	81 30       	cpi	r24, 0x01	; 1
    3350:	49 f0       	breq	.+18     	; 0x3364 <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3352:	9f 5f       	subi	r25, 0xFF	; 255
    3354:	fa 01       	movw	r30, r20
    3356:	e5 58       	subi	r30, 0x85	; 133
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 81       	ld	r24, Z
    335c:	98 17       	cp	r25, r24
    335e:	78 f3       	brcs	.-34     	; 0x333e <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    3360:	2f ef       	ldi	r18, 0xFF	; 255
    3362:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    3364:	c9 01       	movw	r24, r18
    3366:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00003420 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    3420:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3422:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    3424:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    3426:	0a c0       	rjmp	.+20     	; 0x343c <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    3428:	f9 01       	movw	r30, r18
    342a:	e9 0f       	add	r30, r25
    342c:	f1 1d       	adc	r31, r1
    342e:	e4 58       	subi	r30, 0x84	; 132
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	40 81       	ld	r20, Z
    3434:	42 30       	cpi	r20, 0x02	; 2
    3436:	09 f0       	breq	.+2      	; 0x343a <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    3438:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    343a:	9f 5f       	subi	r25, 0xFF	; 255
    343c:	f9 01       	movw	r30, r18
    343e:	e5 58       	subi	r30, 0x85	; 133
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	40 81       	ld	r20, Z
    3444:	94 17       	cp	r25, r20
    3446:	80 f3       	brcs	.-32     	; 0x3428 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    3448:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

0000119e <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    119e:	8f 92       	push	r8
    11a0:	9f 92       	push	r9
    11a2:	af 92       	push	r10
    11a4:	bf 92       	push	r11
    11a6:	cf 92       	push	r12
    11a8:	df 92       	push	r13
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	ec 01       	movw	r28, r24
    11b8:	6b 01       	movw	r12, r22
    11ba:	4a 01       	movw	r8, r20
    11bc:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    11be:	0e 94 9c 19 	call	0x3338	; 0x3338 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    11c2:	8f 3f       	cpi	r24, 0xFF	; 255
    11c4:	2f ef       	ldi	r18, 0xFF	; 255
    11c6:	92 07       	cpc	r25, r18
    11c8:	09 f4       	brne	.+2      	; 0x11cc <mrpp_state_get_ready_body+0x2e>
    11ca:	66 c0       	rjmp	.+204    	; 0x1298 <mrpp_state_get_ready_body+0xfa>
    11cc:	8c 15       	cp	r24, r12
    11ce:	9d 05       	cpc	r25, r13
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <mrpp_state_get_ready_body+0x36>
    11d2:	64 c0       	rjmp	.+200    	; 0x129c <mrpp_state_get_ready_body+0xfe>
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    11d8:	fe 01       	movw	r30, r28
    11da:	e8 0f       	add	r30, r24
    11dc:	f1 1d       	adc	r31, r1
    11de:	e4 58       	subi	r30, 0x84	; 132
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	90 81       	ld	r25, Z
    11e4:	91 30       	cpi	r25, 0x01	; 1
    11e6:	41 f0       	breq	.+16     	; 0x11f8 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	fe 01       	movw	r30, r28
    11ec:	e5 58       	subi	r30, 0x85	; 133
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	90 81       	ld	r25, Z
    11f2:	89 17       	cp	r24, r25
    11f4:	88 f3       	brcs	.-30     	; 0x11d8 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    11f6:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	98 0f       	add	r25, r24
    11fc:	f4 01       	movw	r30, r8
    11fe:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    1200:	99 81       	ldd	r25, Y+1	; 0x01
    1202:	f5 01       	movw	r30, r10
    1204:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	40 e3       	ldi	r20, 0x30	; 48
    120a:	48 9f       	mul	r20, r24
    120c:	90 01       	movw	r18, r0
    120e:	49 9f       	mul	r20, r25
    1210:	30 0d       	add	r19, r0
    1212:	11 24       	eor	r1, r1
    1214:	f8 01       	movw	r30, r16
    1216:	31 83       	std	Z+1, r19	; 0x01
    1218:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    121a:	fe 01       	movw	r30, r28
    121c:	e5 58       	subi	r30, 0x85	; 133
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	20 81       	ld	r18, Z
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	21 50       	subi	r18, 0x01	; 1
    1226:	31 09       	sbc	r19, r1
    1228:	82 17       	cp	r24, r18
    122a:	93 07       	cpc	r25, r19
    122c:	2c f4       	brge	.+10     	; 0x1238 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    122e:	80 e3       	ldi	r24, 0x30	; 48
    1230:	f7 01       	movw	r30, r14
    1232:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	33 c0       	rjmp	.+102    	; 0x129e <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	9c 01       	movw	r18, r24
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	c8 0f       	add	r28, r24
    1256:	d9 1f       	adc	r29, r25
    1258:	4b 81       	ldd	r20, Y+3	; 0x03
    125a:	5c 81       	ldd	r21, Y+4	; 0x04
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	48 0f       	add	r20, r24
    1262:	59 1f       	adc	r21, r25
    1264:	9a 01       	movw	r18, r20
    1266:	ab ea       	ldi	r26, 0xAB	; 171
    1268:	ba ea       	ldi	r27, 0xAA	; 170
    126a:	0e 94 13 1b 	call	0x3626	; 0x3626 <__umulhisi3>
    126e:	96 95       	lsr	r25
    1270:	87 95       	ror	r24
    1272:	92 95       	swap	r25
    1274:	82 95       	swap	r24
    1276:	8f 70       	andi	r24, 0x0F	; 15
    1278:	89 27       	eor	r24, r25
    127a:	9f 70       	andi	r25, 0x0F	; 15
    127c:	89 27       	eor	r24, r25
    127e:	60 e3       	ldi	r22, 0x30	; 48
    1280:	68 9f       	mul	r22, r24
    1282:	90 01       	movw	r18, r0
    1284:	69 9f       	mul	r22, r25
    1286:	30 0d       	add	r19, r0
    1288:	11 24       	eor	r1, r1
    128a:	ca 01       	movw	r24, r20
    128c:	82 1b       	sub	r24, r18
    128e:	93 0b       	sbc	r25, r19
    1290:	f7 01       	movw	r30, r14
    1292:	80 83       	st	Z, r24
    } 
    return true; 
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	03 c0       	rjmp	.+6      	; 0x129e <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	01 c0       	rjmp	.+2      	; 0x129e <mrpp_state_get_ready_body+0x100>
    129c:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	bf 90       	pop	r11
    12b0:	af 90       	pop	r10
    12b2:	9f 90       	pop	r9
    12b4:	8f 90       	pop	r8
    12b6:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00003606 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    3606:	fc 01       	movw	r30, r24
    3608:	e5 58       	subi	r30, 0x85	; 133
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	20 81       	ld	r18, Z
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	62 17       	cp	r22, r18
    3612:	73 07       	cpc	r23, r19
    3614:	3c f4       	brge	.+14     	; 0x3624 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    3616:	68 0f       	add	r22, r24
    3618:	79 1f       	adc	r23, r25
    361a:	fb 01       	movw	r30, r22
    361c:	e4 58       	subi	r30, 0x84	; 132
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	82 e0       	ldi	r24, 0x02	; 2
    3622:	80 83       	st	Z, r24
    3624:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

0000306a <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    306a:	70 e0       	ldi	r23, 0x00	; 0
    306c:	61 50       	subi	r22, 0x01	; 1
    306e:	71 09       	sbc	r23, r1
    3070:	fb 01       	movw	r30, r22
    3072:	ee 0f       	add	r30, r30
    3074:	ff 1f       	adc	r31, r31
    3076:	66 0f       	add	r22, r22
    3078:	77 1f       	adc	r23, r23
    307a:	66 0f       	add	r22, r22
    307c:	77 1f       	adc	r23, r23
    307e:	66 0f       	add	r22, r22
    3080:	77 1f       	adc	r23, r23
    3082:	e6 0f       	add	r30, r22
    3084:	f7 1f       	adc	r31, r23
    3086:	e8 0f       	add	r30, r24
    3088:	f9 1f       	adc	r31, r25
    308a:	83 81       	ldd	r24, Z+3	; 0x03
    308c:	94 81       	ldd	r25, Z+4	; 0x04
    308e:	da 01       	movw	r26, r20
    3090:	8d 93       	st	X+, r24
    3092:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    3094:	85 81       	ldd	r24, Z+5	; 0x05
    3096:	96 81       	ldd	r25, Z+6	; 0x06
    3098:	f9 01       	movw	r30, r18
    309a:	91 83       	std	Z+1, r25	; 0x01
    309c:	80 83       	st	Z, r24
    309e:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00003368 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    3368:	80 91 9a 0d 	lds	r24, 0x0D9A	; 0x800d9a <cnt>
    336c:	90 91 9b 0d 	lds	r25, 0x0D9B	; 0x800d9b <cnt+0x1>
    3370:	01 96       	adiw	r24, 0x01	; 1
    3372:	90 93 9b 0d 	sts	0x0D9B, r25	; 0x800d9b <cnt+0x1>
    3376:	80 93 9a 0d 	sts	0x0D9A, r24	; 0x800d9a <cnt>
	if(cnt>=_seconds){
    337a:	20 91 9c 0d 	lds	r18, 0x0D9C	; 0x800d9c <_seconds>
    337e:	30 91 9d 0d 	lds	r19, 0x0D9D	; 0x800d9d <_seconds+0x1>
    3382:	82 17       	cp	r24, r18
    3384:	93 07       	cpc	r25, r19
    3386:	38 f0       	brcs	.+14     	; 0x3396 <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    3388:	80 91 b6 0d 	lds	r24, 0x0DB6	; 0x800db6 <eventPointer>
    338c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	0e 94 12 1c 	call	0x3824	; 0x3824 <PM_HAL_BC_power>
    3396:	08 95       	ret

Disassembly of section .text.PUMP_start:

00003496 <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    3496:	10 92 9b 0d 	sts	0x0D9B, r1	; 0x800d9b <cnt+0x1>
    349a:	10 92 9a 0d 	sts	0x0D9A, r1	; 0x800d9a <cnt>
	_seconds=seconds;
    349e:	90 93 9d 0d 	sts	0x0D9D, r25	; 0x800d9d <_seconds+0x1>
    34a2:	80 93 9c 0d 	sts	0x0D9C, r24	; 0x800d9c <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    34a6:	84 eb       	ldi	r24, 0xB4	; 180
    34a8:	99 e1       	ldi	r25, 0x19	; 25
    34aa:	0e 94 b1 13 	call	0x2762	; 0x2762 <TC2_HAL_subscribe>
    34ae:	80 93 b6 0d 	sts	0x0DB6, r24	; 0x800db6 <eventPointer>
	PM_HAL_BC_power(true);
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	0e 94 12 1c 	call	0x3824	; 0x3824 <PM_HAL_BC_power>
    34b8:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

000036d2 <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    36d2:	40 91 9a 0d 	lds	r20, 0x0D9A	; 0x800d9a <cnt>
    36d6:	50 91 9b 0d 	lds	r21, 0x0D9B	; 0x800d9b <cnt+0x1>
    36da:	20 91 9c 0d 	lds	r18, 0x0D9C	; 0x800d9c <_seconds>
    36de:	30 91 9d 0d 	lds	r19, 0x0D9D	; 0x800d9d <_seconds+0x1>
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	42 17       	cp	r20, r18
    36e6:	53 07       	cpc	r21, r19
    36e8:	08 f4       	brcc	.+2      	; 0x36ec <PUMP_is_done+0x1a>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
}
    36ec:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00002808 <RTC_set_clock_out>:
	uint32_t tsbit;
} tsbit;

const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	00 d0       	rcall	.+0      	; 0x280e <RTC_set_clock_out+0x6>
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    2812:	9d e0       	ldi	r25, 0x0D	; 13
    2814:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    2816:	81 30       	cpi	r24, 0x01	; 1
    2818:	31 f0       	breq	.+12     	; 0x2826 <RTC_set_clock_out+0x1e>
    281a:	18 f0       	brcs	.+6      	; 0x2822 <RTC_set_clock_out+0x1a>
    281c:	80 32       	cpi	r24, 0x20	; 32
    281e:	31 f0       	breq	.+12     	; 0x282c <RTC_set_clock_out+0x24>
    2820:	13 c0       	rjmp	.+38     	; 0x2848 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    2822:	1a 82       	std	Y+2, r1	; 0x02
			break;
    2824:	05 c0       	rjmp	.+10     	; 0x2830 <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    2826:	83 e8       	ldi	r24, 0x83	; 131
    2828:	8a 83       	std	Y+2, r24	; 0x02
			break;
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    282c:	82 e8       	ldi	r24, 0x82	; 130
    282e:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    2830:	ae 01       	movw	r20, r28
    2832:	4f 5f       	subi	r20, 0xFF	; 255
    2834:	5f 4f       	sbci	r21, 0xFF	; 255
    2836:	60 e8       	ldi	r22, 0x80	; 128
    2838:	22 e0       	ldi	r18, 0x02	; 2
    283a:	81 e5       	ldi	r24, 0x51	; 81
    283c:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2840:	88 23       	and	r24, r24
    2842:	21 f0       	breq	.+8      	; 0x284c <RTC_set_clock_out+0x44>
    2844:	82 e0       	ldi	r24, 0x02	; 2
    2846:	03 c0       	rjmp	.+6      	; 0x284e <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	01 c0       	rjmp	.+2      	; 0x284e <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    284c:	80 e0       	ldi	r24, 0x00	; 0
}
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

000031aa <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <RTC_clear_wake_up_interrupt+0x6>
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	89 83       	std	Y+1, r24	; 0x01
    31b8:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    31ba:	ae 01       	movw	r20, r28
    31bc:	4f 5f       	subi	r20, 0xFF	; 255
    31be:	5f 4f       	sbci	r21, 0xFF	; 255
    31c0:	60 e8       	ldi	r22, 0x80	; 128
    31c2:	22 e0       	ldi	r18, 0x02	; 2
    31c4:	81 e5       	ldi	r24, 0x51	; 81
    31c6:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    31ca:	88 23       	and	r24, r24
    31cc:	11 f0       	breq	.+4      	; 0x31d2 <RTC_clear_wake_up_interrupt+0x28>
    31ce:	82 e0       	ldi	r24, 0x02	; 2
    31d0:	01 c0       	rjmp	.+2      	; 0x31d4 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    31d2:	80 e0       	ldi	r24, 0x00	; 0
}
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00000f3c <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	27 97       	sbiw	r28, 0x07	; 7
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	8c 01       	movw	r16, r24
     f56:	21 e0       	ldi	r18, 0x01	; 1
     f58:	41 e2       	ldi	r20, 0x21	; 33
     f5a:	53 e0       	ldi	r21, 0x03	; 3
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	81 e5       	ldi	r24, 0x51	; 81
     f60:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <TWI_API_write_data>
     f64:	81 11       	cpse	r24, r1
     f66:	7c c0       	rjmp	.+248    	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
     f68:	47 e0       	ldi	r20, 0x07	; 7
     f6a:	be 01       	movw	r22, r28
     f6c:	6f 5f       	subi	r22, 0xFF	; 255
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	81 e5       	ldi	r24, 0x51	; 81
     f72:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <TWI_API_repeat_read_data_stop>
     f76:	81 11       	cpse	r24, r1
     f78:	75 c0       	rjmp	.+234    	; 0x1064 <__DATA_REGION_LENGTH__+0x64>
     f7a:	29 81       	ldd	r18, Y+1	; 0x01
     f7c:	82 2f       	mov	r24, r18
     f7e:	8f 77       	andi	r24, 0x7F	; 127
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	95 95       	asr	r25
     f84:	87 95       	ror	r24
     f86:	95 95       	asr	r25
     f88:	87 95       	ror	r24
     f8a:	95 95       	asr	r25
     f8c:	87 95       	ror	r24
     f8e:	95 95       	asr	r25
     f90:	87 95       	ror	r24
     f92:	88 0f       	add	r24, r24
     f94:	98 2f       	mov	r25, r24
     f96:	99 0f       	add	r25, r25
     f98:	99 0f       	add	r25, r25
     f9a:	89 0f       	add	r24, r25
     f9c:	2f 70       	andi	r18, 0x0F	; 15
     f9e:	82 0f       	add	r24, r18
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 83       	st	Z, r24
     fa4:	2a 81       	ldd	r18, Y+2	; 0x02
     fa6:	82 2f       	mov	r24, r18
     fa8:	8f 77       	andi	r24, 0x7F	; 127
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	95 95       	asr	r25
     fae:	87 95       	ror	r24
     fb0:	95 95       	asr	r25
     fb2:	87 95       	ror	r24
     fb4:	95 95       	asr	r25
     fb6:	87 95       	ror	r24
     fb8:	95 95       	asr	r25
     fba:	87 95       	ror	r24
     fbc:	88 0f       	add	r24, r24
     fbe:	98 2f       	mov	r25, r24
     fc0:	99 0f       	add	r25, r25
     fc2:	99 0f       	add	r25, r25
     fc4:	89 0f       	add	r24, r25
     fc6:	2f 70       	andi	r18, 0x0F	; 15
     fc8:	82 0f       	add	r24, r18
     fca:	81 83       	std	Z+1, r24	; 0x01
     fcc:	2b 81       	ldd	r18, Y+3	; 0x03
     fce:	82 2f       	mov	r24, r18
     fd0:	8f 73       	andi	r24, 0x3F	; 63
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	95 95       	asr	r25
     fd6:	87 95       	ror	r24
     fd8:	95 95       	asr	r25
     fda:	87 95       	ror	r24
     fdc:	95 95       	asr	r25
     fde:	87 95       	ror	r24
     fe0:	95 95       	asr	r25
     fe2:	87 95       	ror	r24
     fe4:	88 0f       	add	r24, r24
     fe6:	98 2f       	mov	r25, r24
     fe8:	99 0f       	add	r25, r25
     fea:	99 0f       	add	r25, r25
     fec:	89 0f       	add	r24, r25
     fee:	2f 70       	andi	r18, 0x0F	; 15
     ff0:	82 0f       	add	r24, r18
     ff2:	82 83       	std	Z+2, r24	; 0x02
     ff4:	2c 81       	ldd	r18, Y+4	; 0x04
     ff6:	82 2f       	mov	r24, r18
     ff8:	8f 73       	andi	r24, 0x3F	; 63
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	95 95       	asr	r25
     ffe:	87 95       	ror	r24
    1000:	95 95       	asr	r25
    1002:	87 95       	ror	r24
    1004:	95 95       	asr	r25
    1006:	87 95       	ror	r24
    1008:	95 95       	asr	r25
    100a:	87 95       	ror	r24
    100c:	88 0f       	add	r24, r24
    100e:	98 2f       	mov	r25, r24
    1010:	99 0f       	add	r25, r25
    1012:	99 0f       	add	r25, r25
    1014:	89 0f       	add	r24, r25
    1016:	2f 70       	andi	r18, 0x0F	; 15
    1018:	82 0f       	add	r24, r18
    101a:	83 83       	std	Z+3, r24	; 0x03
    101c:	2e 81       	ldd	r18, Y+6	; 0x06
    101e:	82 2f       	mov	r24, r18
    1020:	8f 71       	andi	r24, 0x1F	; 31
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	95 95       	asr	r25
    1026:	87 95       	ror	r24
    1028:	95 95       	asr	r25
    102a:	87 95       	ror	r24
    102c:	95 95       	asr	r25
    102e:	87 95       	ror	r24
    1030:	95 95       	asr	r25
    1032:	87 95       	ror	r24
    1034:	88 0f       	add	r24, r24
    1036:	98 2f       	mov	r25, r24
    1038:	99 0f       	add	r25, r25
    103a:	99 0f       	add	r25, r25
    103c:	89 0f       	add	r24, r25
    103e:	2f 70       	andi	r18, 0x0F	; 15
    1040:	82 0f       	add	r24, r18
    1042:	84 83       	std	Z+4, r24	; 0x04
    1044:	8f 81       	ldd	r24, Y+7	; 0x07
    1046:	98 2f       	mov	r25, r24
    1048:	92 95       	swap	r25
    104a:	9f 70       	andi	r25, 0x0F	; 15
    104c:	99 0f       	add	r25, r25
    104e:	29 2f       	mov	r18, r25
    1050:	22 0f       	add	r18, r18
    1052:	22 0f       	add	r18, r18
    1054:	92 0f       	add	r25, r18
    1056:	8f 70       	andi	r24, 0x0F	; 15
    1058:	89 0f       	add	r24, r25
    105a:	85 83       	std	Z+5, r24	; 0x05
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	27 96       	adiw	r28, 0x07	; 7
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

000019cc <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	2d 97       	sbiw	r28, 0x0d	; 13
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    19ec:	85 e0       	ldi	r24, 0x05	; 5
    19ee:	eb e7       	ldi	r30, 0x7B	; 123
    19f0:	fd e0       	ldi	r31, 0x0D	; 13
    19f2:	de 01       	movw	r26, r28
    19f4:	13 96       	adiw	r26, 0x03	; 3
    19f6:	01 90       	ld	r0, Z+
    19f8:	0d 92       	st	X+, r0
    19fa:	8a 95       	dec	r24
    19fc:	e1 f7       	brne	.-8      	; 0x19f6 <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    19fe:	ce 01       	movw	r24, r28
    1a00:	08 96       	adiw	r24, 0x08	; 8
    1a02:	0e 94 9e 07 	call	0xf3c	; 0xf3c <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	81 0f       	add	r24, r17
	dt.minute %= 60;
    1a0a:	99 e8       	ldi	r25, 0x89	; 137
    1a0c:	89 9f       	mul	r24, r25
    1a0e:	91 2d       	mov	r25, r1
    1a10:	11 24       	eor	r1, r1
    1a12:	92 95       	swap	r25
    1a14:	96 95       	lsr	r25
    1a16:	97 70       	andi	r25, 0x07	; 7
    1a18:	2c e3       	ldi	r18, 0x3C	; 60
    1a1a:	92 9f       	mul	r25, r18
    1a1c:	80 19       	sub	r24, r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    1a22:	ae 01       	movw	r20, r28
    1a24:	4f 5f       	subi	r20, 0xFF	; 255
    1a26:	5f 4f       	sbci	r21, 0xFF	; 255
    1a28:	60 e8       	ldi	r22, 0x80	; 128
    1a2a:	22 e0       	ldi	r18, 0x02	; 2
    1a2c:	81 e5       	ldi	r24, 0x51	; 81
    1a2e:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1a32:	81 11       	cpse	r24, r1
    1a34:	20 c0       	rjmp	.+64     	; 0x1a76 <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    1a36:	99 85       	ldd	r25, Y+9	; 0x09
    1a38:	8d ec       	ldi	r24, 0xCD	; 205
    1a3a:	98 9f       	mul	r25, r24
    1a3c:	81 2d       	mov	r24, r1
    1a3e:	11 24       	eor	r1, r1
    1a40:	86 95       	lsr	r24
    1a42:	86 95       	lsr	r24
    1a44:	86 95       	lsr	r24
    1a46:	40 e1       	ldi	r20, 0x10	; 16
    1a48:	84 9f       	mul	r24, r20
    1a4a:	90 01       	movw	r18, r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	88 0f       	add	r24, r24
    1a50:	38 2f       	mov	r19, r24
    1a52:	33 0f       	add	r19, r19
    1a54:	33 0f       	add	r19, r19
    1a56:	83 0f       	add	r24, r19
    1a58:	98 1b       	sub	r25, r24
    1a5a:	92 2b       	or	r25, r18
    1a5c:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    1a5e:	ae 01       	movw	r20, r28
    1a60:	4d 5f       	subi	r20, 0xFD	; 253
    1a62:	5f 4f       	sbci	r21, 0xFF	; 255
    1a64:	60 e8       	ldi	r22, 0x80	; 128
    1a66:	25 e0       	ldi	r18, 0x05	; 5
    1a68:	81 e5       	ldi	r24, 0x51	; 81
    1a6a:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1a6e:	88 23       	and	r24, r24
    1a70:	21 f0       	breq	.+8      	; 0x1a7a <RTC_set_wake_up_interrupt_minutes+0xae>
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	03 c0       	rjmp	.+6      	; 0x1a7c <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	01 c0       	rjmp	.+2      	; 0x1a7c <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
}
    1a7c:	2d 96       	adiw	r28, 0x0d	; 13
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

0000107c <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    107c:	4f 92       	push	r4
    107e:	5f 92       	push	r5
    1080:	6f 92       	push	r6
    1082:	7f 92       	push	r7
    1084:	8f 92       	push	r8
    1086:	9f 92       	push	r9
    1088:	af 92       	push	r10
    108a:	bf 92       	push	r11
    108c:	cf 92       	push	r12
    108e:	df 92       	push	r13
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	00 d0       	rcall	.+0      	; 0x109e <RTC_datetime_to_ts+0x22>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <RTC_datetime_to_ts+0x24>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <RTC_datetime_to_ts+0x26>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	f9 01       	movw	r30, r18
    10a8:	49 2e       	mov	r4, r25
    10aa:	51 2c       	mov	r5, r1
    10ac:	61 2c       	mov	r6, r1
    10ae:	71 2c       	mov	r7, r1
    10b0:	03 2e       	mov	r0, r19
    10b2:	3a e1       	ldi	r19, 0x1A	; 26
    10b4:	44 0c       	add	r4, r4
    10b6:	55 1c       	adc	r5, r5
    10b8:	66 1c       	adc	r6, r6
    10ba:	77 1c       	adc	r7, r7
    10bc:	3a 95       	dec	r19
    10be:	d1 f7       	brne	.-12     	; 0x10b4 <RTC_datetime_to_ts+0x38>
    10c0:	30 2d       	mov	r19, r0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a0 e0       	ldi	r26, 0x00	; 0
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	07 2e       	mov	r0, r23
    10ca:	76 e1       	ldi	r23, 0x16	; 22
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	aa 1f       	adc	r26, r26
    10d2:	bb 1f       	adc	r27, r27
    10d4:	7a 95       	dec	r23
    10d6:	d1 f7       	brne	.-12     	; 0x10cc <RTC_datetime_to_ts+0x50>
    10d8:	70 2d       	mov	r23, r0
    10da:	84 29       	or	r24, r4
    10dc:	95 29       	or	r25, r5
    10de:	a6 29       	or	r26, r6
    10e0:	b7 29       	or	r27, r7
    10e2:	87 2e       	mov	r8, r23
    10e4:	91 2c       	mov	r9, r1
    10e6:	a1 2c       	mov	r10, r1
    10e8:	b1 2c       	mov	r11, r1
    10ea:	07 2e       	mov	r0, r23
    10ec:	71 e1       	ldi	r23, 0x11	; 17
    10ee:	88 0c       	add	r8, r8
    10f0:	99 1c       	adc	r9, r9
    10f2:	aa 1c       	adc	r10, r10
    10f4:	bb 1c       	adc	r11, r11
    10f6:	7a 95       	dec	r23
    10f8:	d1 f7       	brne	.-12     	; 0x10ee <RTC_datetime_to_ts+0x72>
    10fa:	70 2d       	mov	r23, r0
    10fc:	88 29       	or	r24, r8
    10fe:	99 29       	or	r25, r9
    1100:	aa 29       	or	r26, r10
    1102:	bb 29       	or	r27, r11
    1104:	c6 2e       	mov	r12, r22
    1106:	d1 2c       	mov	r13, r1
    1108:	e1 2c       	mov	r14, r1
    110a:	f1 2c       	mov	r15, r1
    110c:	0b 2e       	mov	r0, r27
    110e:	bc e0       	ldi	r27, 0x0C	; 12
    1110:	cc 0c       	add	r12, r12
    1112:	dd 1c       	adc	r13, r13
    1114:	ee 1c       	adc	r14, r14
    1116:	ff 1c       	adc	r15, r15
    1118:	ba 95       	dec	r27
    111a:	d1 f7       	brne	.-12     	; 0x1110 <__stack+0x11>
    111c:	b0 2d       	mov	r27, r0
    111e:	8c 29       	or	r24, r12
    1120:	9d 29       	or	r25, r13
    1122:	ae 29       	or	r26, r14
    1124:	bf 29       	or	r27, r15
    1126:	05 2f       	mov	r16, r21
    1128:	10 e0       	ldi	r17, 0x00	; 0
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	00 0f       	add	r16, r16
    1130:	11 1f       	adc	r17, r17
    1132:	22 1f       	adc	r18, r18
    1134:	33 1f       	adc	r19, r19
    1136:	00 0f       	add	r16, r16
    1138:	11 1f       	adc	r17, r17
    113a:	22 1f       	adc	r18, r18
    113c:	33 1f       	adc	r19, r19
    113e:	00 0f       	add	r16, r16
    1140:	11 1f       	adc	r17, r17
    1142:	22 1f       	adc	r18, r18
    1144:	33 1f       	adc	r19, r19
    1146:	00 0f       	add	r16, r16
    1148:	11 1f       	adc	r17, r17
    114a:	22 1f       	adc	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	00 0f       	add	r16, r16
    1150:	11 1f       	adc	r17, r17
    1152:	22 1f       	adc	r18, r18
    1154:	33 1f       	adc	r19, r19
    1156:	00 0f       	add	r16, r16
    1158:	11 1f       	adc	r17, r17
    115a:	22 1f       	adc	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	80 2b       	or	r24, r16
    1160:	91 2b       	or	r25, r17
    1162:	a2 2b       	or	r26, r18
    1164:	b3 2b       	or	r27, r19
    1166:	84 2b       	or	r24, r20
    1168:	b0 83       	st	Z, r27
    116a:	a1 83       	std	Z+1, r26	; 0x01
    116c:	92 83       	std	Z+2, r25	; 0x02
    116e:	83 83       	std	Z+3, r24	; 0x03
    1170:	26 96       	adiw	r28, 0x06	; 6
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	ff 90       	pop	r15
    1186:	ef 90       	pop	r14
    1188:	df 90       	pop	r13
    118a:	cf 90       	pop	r12
    118c:	bf 90       	pop	r11
    118e:	af 90       	pop	r10
    1190:	9f 90       	pop	r9
    1192:	8f 90       	pop	r8
    1194:	7f 90       	pop	r7
    1196:	6f 90       	pop	r6
    1198:	5f 90       	pop	r5
    119a:	4f 90       	pop	r4
    119c:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00003726 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    3726:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    3728:	54 81       	ldd	r21, Z+4	; 0x04
    372a:	43 81       	ldd	r20, Z+3	; 0x03
    372c:	31 81       	ldd	r19, Z+1	; 0x01
    372e:	20 81       	ld	r18, Z
    3730:	65 2f       	mov	r22, r21
    3732:	74 2f       	mov	r23, r20
    3734:	83 2f       	mov	r24, r19
    3736:	92 2f       	mov	r25, r18
    3738:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
}
    373c:	cb 01       	movw	r24, r22
    373e:	08 95       	ret

Disassembly of section .text.init_measurement:

00002ffa <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    2ffa:	25 e0       	ldi	r18, 0x05	; 5
    2ffc:	42 e1       	ldi	r20, 0x12	; 18
    2ffe:	53 e0       	ldi	r21, 0x03	; 3
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	81 e6       	ldi	r24, 0x61	; 97
    3004:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3008:	81 11       	cpse	r24, r1
    300a:	0f c0       	rjmp	.+30     	; 0x302a <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    300c:	25 e0       	ldi	r18, 0x05	; 5
    300e:	47 e1       	ldi	r20, 0x17	; 23
    3010:	53 e0       	ldi	r21, 0x03	; 3
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	81 e6       	ldi	r24, 0x61	; 97
    3016:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    301a:	81 11       	cpse	r24, r1
    301c:	08 c0       	rjmp	.+16     	; 0x302e <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    301e:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <SCD30_HAL_data_ready>
    3022:	88 23       	and	r24, r24
    3024:	e1 f3       	breq	.-8      	; 0x301e <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    302e:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    3030:	08 95       	ret

Disassembly of section .text.validate_data:

00003274 <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    327a:	62 e0       	ldi	r22, 0x02	; 2
    327c:	0e 94 50 18 	call	0x30a0	; 0x30a0 <calc_crc8>
	if(data[2]!=crc) return false;
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	89 13       	cpse	r24, r25
    3284:	0a c0       	rjmp	.+20     	; 0x329a <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    3286:	62 e0       	ldi	r22, 0x02	; 2
    3288:	ce 01       	movw	r24, r28
    328a:	03 96       	adiw	r24, 0x03	; 3
    328c:	0e 94 50 18 	call	0x30a0	; 0x30a0 <calc_crc8>
	if(data[5]!=crc) return false;
    3290:	9d 81       	ldd	r25, Y+5	; 0x05
    3292:	89 17       	cp	r24, r25
    3294:	21 f0       	breq	.+8      	; 0x329e <validate_data+0x2a>
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	03 c0       	rjmp	.+6      	; 0x32a0 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	01 c0       	rjmp	.+2      	; 0x32a0 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    329e:	81 e0       	ldi	r24, 0x01	; 1
}
    32a0:	df 91       	pop	r29
    32a2:	cf 91       	pop	r28
    32a4:	08 95       	ret

Disassembly of section .text.read_value:

00001d3e <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <read_value+0xa>
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <read_value+0xc>
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <read_value+0xe>
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	9f ef       	ldi	r25, 0xFF	; 255
    1d56:	f8 01       	movw	r30, r16
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    1d5c:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <SCD30_HAL_data_ready>
    1d60:	81 11       	cpse	r24, r1
    1d62:	07 c0       	rjmp	.+14     	; 0x1d72 <read_value+0x34>
		*value=0xfffe;
    1d64:	8e ef       	ldi	r24, 0xFE	; 254
    1d66:	9f ef       	ldi	r25, 0xFF	; 255
    1d68:	f8 01       	movw	r30, r16
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    1d6e:	83 e0       	ldi	r24, 0x03	; 3
    1d70:	2c c0       	rjmp	.+88     	; 0x1dca <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    1d72:	22 e0       	ldi	r18, 0x02	; 2
    1d74:	4f e1       	ldi	r20, 0x1F	; 31
    1d76:	53 e0       	ldi	r21, 0x03	; 3
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	81 e6       	ldi	r24, 0x61	; 97
    1d7c:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1d80:	81 11       	cpse	r24, r1
    1d82:	1e c0       	rjmp	.+60     	; 0x1dc0 <read_value+0x82>
    1d84:	8f e3       	ldi	r24, 0x3F	; 63
    1d86:	9f e1       	ldi	r25, 0x1F	; 31
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <read_value+0x4a>
    1d8c:	00 c0       	rjmp	.+0      	; 0x1d8e <read_value+0x50>
    1d8e:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    1d90:	46 e0       	ldi	r20, 0x06	; 6
    1d92:	be 01       	movw	r22, r28
    1d94:	6f 5f       	subi	r22, 0xFF	; 255
    1d96:	7f 4f       	sbci	r23, 0xFF	; 255
    1d98:	81 e6       	ldi	r24, 0x61	; 97
    1d9a:	0e 94 39 1a 	call	0x3472	; 0x3472 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1d9e:	81 11       	cpse	r24, r1
    1da0:	11 c0       	rjmp	.+34     	; 0x1dc4 <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1da2:	ce 01       	movw	r24, r28
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	0e 94 3a 19 	call	0x3274	; 0x3274 <validate_data>
    1daa:	88 23       	and	r24, r24
    1dac:	69 f0       	breq	.+26     	; 0x1dc8 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    1dae:	ce 01       	movw	r24, r28
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	0e 94 93 1b 	call	0x3726	; 0x3726 <bytes_2_uint>
    1db6:	f8 01       	movw	r30, r16
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	05 c0       	rjmp	.+10     	; 0x1dca <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    1dca:	26 96       	adiw	r28, 0x06	; 6
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00002cb2 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    2cb2:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <_data>
    2cb6:	90 91 a1 0d 	lds	r25, 0x0DA1	; 0x800da1 <_data+0x1>
    2cba:	20 91 9e 0d 	lds	r18, 0x0D9E	; 0x800d9e <cntSamples>
    2cbe:	30 91 9f 0d 	lds	r19, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    2cc2:	a9 01       	movw	r20, r18
    2cc4:	4f 5f       	subi	r20, 0xFF	; 255
    2cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc8:	50 93 9f 0d 	sts	0x0D9F, r21	; 0x800d9f <cntSamples+0x1>
    2ccc:	40 93 9e 0d 	sts	0x0D9E, r20	; 0x800d9e <cntSamples>
    2cd0:	22 0f       	add	r18, r18
    2cd2:	33 1f       	adc	r19, r19
    2cd4:	82 0f       	add	r24, r18
    2cd6:	93 1f       	adc	r25, r19
    2cd8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <read_value>
	if(cntSamples>=_nSamples){
    2cdc:	20 91 9e 0d 	lds	r18, 0x0D9E	; 0x800d9e <cntSamples>
    2ce0:	30 91 9f 0d 	lds	r19, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    2ce4:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <_nSamples>
    2ce8:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <_nSamples+0x1>
    2cec:	28 17       	cp	r18, r24
    2cee:	39 07       	cpc	r19, r25
    2cf0:	10 f0       	brcs	.+4      	; 0x2cf6 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    2cf2:	0e 94 bc 1c 	call	0x3978	; 0x3978 <TC1_HAL_stop>
    2cf6:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00002942 <SCD30_init_sampling>:
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();



SCD30_STATUS SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	ec 01       	movw	r28, r24
	_nSamples=nSamples;
    2948:	70 93 a3 0d 	sts	0x0DA3, r23	; 0x800da3 <_nSamples+0x1>
    294c:	60 93 a2 0d 	sts	0x0DA2, r22	; 0x800da2 <_nSamples>
	cntSamples=0;
    2950:	10 92 9f 0d 	sts	0x0D9F, r1	; 0x800d9f <cntSamples+0x1>
    2954:	10 92 9e 0d 	sts	0x0D9E, r1	; 0x800d9e <cntSamples>
	_data=data;
    2958:	50 93 a1 0d 	sts	0x0DA1, r21	; 0x800da1 <_data+0x1>
    295c:	40 93 a0 0d 	sts	0x0DA0, r20	; 0x800da0 <_data>
	
	//Init
	SCD30_HAL_init();
    2960:	0e 94 8c 1c 	call	0x3918	; 0x3918 <SCD30_HAL_init>
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    2964:	69 e5       	ldi	r22, 0x59	; 89
    2966:	76 e1       	ldi	r23, 0x16	; 22
    2968:	ce 01       	movw	r24, r28
    296a:	0e 94 a1 18 	call	0x3142	; 0x3142 <TC1_HAL_init>
	PM_HAL_SCD30_power(true);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	0e 94 08 1c 	call	0x3810	; 0x3810 <PM_HAL_SCD30_power>
    2974:	2f ef       	ldi	r18, 0xFF	; 255
    2976:	83 ed       	ldi	r24, 0xD3	; 211
    2978:	90 e3       	ldi	r25, 0x30	; 48
    297a:	21 50       	subi	r18, 0x01	; 1
    297c:	80 40       	sbci	r24, 0x00	; 0
    297e:	90 40       	sbci	r25, 0x00	; 0
    2980:	e1 f7       	brne	.-8      	; 0x297a <SCD30_init_sampling+0x38>
    2982:	00 c0       	rjmp	.+0      	; 0x2984 <SCD30_init_sampling+0x42>
    2984:	00 00       	nop
	_delay_ms(2000);
	
	return init_measurement();
    2986:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <init_measurement>
}
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

00003888 <SCD30_deinit_sampling>:

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    3888:	0e 94 bc 1c 	call	0x3978	; 0x3978 <TC1_HAL_stop>
	PM_HAL_SCD30_power(false);
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	0e 94 08 1c 	call	0x3810	; 0x3810 <PM_HAL_SCD30_power>
	_data=NULL;
    3892:	10 92 a1 0d 	sts	0x0DA1, r1	; 0x800da1 <_data+0x1>
    3896:	10 92 a0 0d 	sts	0x0DA0, r1	; 0x800da0 <_data>
    389a:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

000039b4 <SCD30_start_sampling>:
	
}

SCD30_STATUS SCD30_start_sampling(){
	vect_SCD_do_sample();
    39b4:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <vect_SCD_do_sample>
	TC1_HAL_start();
    39b8:	0e 94 b6 1c 	call	0x396c	; 0x396c <TC1_HAL_start>
	return SCD30_STATUS_SUCCESS;
}
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

000036ee <SCD30_is_sampling_done>:

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    36ee:	40 91 9e 0d 	lds	r20, 0x0D9E	; 0x800d9e <cntSamples>
    36f2:	50 91 9f 0d 	lds	r21, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    36f6:	20 91 a2 0d 	lds	r18, 0x0DA2	; 0x800da2 <_nSamples>
    36fa:	30 91 a3 0d 	lds	r19, 0x0DA3	; 0x800da3 <_nSamples+0x1>
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	42 17       	cp	r20, r18
    3702:	53 07       	cpc	r21, r19
    3704:	08 f4       	brcc	.+2      	; 0x3708 <SCD30_is_sampling_done+0x1a>
    3706:	80 e0       	ldi	r24, 0x00	; 0
}
    3708:	08 95       	ret

Disassembly of section .text.decode_stage_response:

000037d2 <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    37d2:	88 23       	and	r24, r24
    37d4:	19 f0       	breq	.+6      	; 0x37dc <decode_stage_response+0xa>
    37d6:	81 30       	cpi	r24, 0x01	; 1
    37d8:	29 f0       	breq	.+10     	; 0x37e4 <decode_stage_response+0x12>
    37da:	02 c0       	rjmp	.+4      	; 0x37e0 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    37dc:	8d e0       	ldi	r24, 0x0D	; 13
    37de:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    37e0:	82 e1       	ldi	r24, 0x12	; 18
    37e2:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    37e4:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    37e6:	08 95       	ret

Disassembly of section .text.decode_join_response:

0000370a <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    370a:	83 30       	cpi	r24, 0x03	; 3
    370c:	51 f0       	breq	.+20     	; 0x3722 <decode_join_response+0x18>
    370e:	84 30       	cpi	r24, 0x04	; 4
    3710:	21 f0       	breq	.+8      	; 0x371a <decode_join_response+0x10>
    3712:	81 11       	cpse	r24, r1
    3714:	04 c0       	rjmp	.+8      	; 0x371e <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_INIT_RTC;
    3716:	85 e0       	ldi	r24, 0x05	; 5
    3718:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
    371a:	83 e0       	ldi	r24, 0x03	; 3
    371c:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    371e:	82 e1       	ldi	r24, 0x12	; 18
    3720:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_INIT_RTC;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    3722:	82 e0       	ldi	r24, 0x02	; 2
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    3724:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

000037a2 <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    37a2:	83 30       	cpi	r24, 0x03	; 3
    37a4:	31 f0       	breq	.+12     	; 0x37b2 <decode_header_tail_response+0x10>
    37a6:	85 30       	cpi	r24, 0x05	; 5
    37a8:	31 f0       	breq	.+12     	; 0x37b6 <decode_header_tail_response+0x14>
    37aa:	88 23       	and	r24, r24
    37ac:	21 f0       	breq	.+8      	; 0x37b6 <decode_header_tail_response+0x14>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    37ae:	82 e1       	ldi	r24, 0x12	; 18
    37b0:	08 95       	ret
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    37b2:	84 2f       	mov	r24, r20
    37b4:	08 95       	ret

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
    37b6:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    37b8:	08 95       	ret

Disassembly of section .text.join_lora:

00002140 <join_lora>:
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(4);
}

static LM_STATUS join_lora(){
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	c3 54       	subi	r28, 0x43	; 67
    214a:	d1 09       	sbc	r29, r1
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
	char deveui[]="0004A30B00F4547A";
    2156:	2e e4       	ldi	r18, 0x4E	; 78
    2158:	31 e0       	ldi	r19, 0x01	; 1
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	81 e1       	ldi	r24, 0x11	; 17
    215e:	f9 01       	movw	r30, r18
    2160:	de 01       	movw	r26, r28
    2162:	11 96       	adiw	r26, 0x01	; 1
    2164:	74 2f       	mov	r23, r20
    2166:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__movmemx_qi>
	char appeui[]="70B3D57ED003F844";
    216a:	2f e5       	ldi	r18, 0x5F	; 95
    216c:	31 e0       	ldi	r19, 0x01	; 1
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	81 e1       	ldi	r24, 0x11	; 17
    2172:	f9 01       	movw	r30, r18
    2174:	de 01       	movw	r26, r28
    2176:	52 96       	adiw	r26, 0x12	; 18
    2178:	74 2f       	mov	r23, r20
    217a:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__movmemx_qi>
	char appkey[]="B88AD6D25A3B27C69A01F74C53F9A179";
    217e:	20 e7       	ldi	r18, 0x70	; 112
    2180:	31 e0       	ldi	r19, 0x01	; 1
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	81 e2       	ldi	r24, 0x21	; 33
    2186:	f9 01       	movw	r30, r18
    2188:	de 01       	movw	r26, r28
    218a:	93 96       	adiw	r26, 0x23	; 35
    218c:	74 2f       	mov	r23, r20
    218e:	0e 94 a0 1b 	call	0x3740	; 0x3740 <__movmemx_qi>
	
	return LM_join_network(deveui, appeui, appkey);
    2192:	ae 01       	movw	r20, r28
    2194:	4d 5d       	subi	r20, 0xDD	; 221
    2196:	5f 4f       	sbci	r21, 0xFF	; 255
    2198:	be 01       	movw	r22, r28
    219a:	6e 5e       	subi	r22, 0xEE	; 238
    219c:	7f 4f       	sbci	r23, 0xFF	; 255
    219e:	ce 01       	movw	r24, r28
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <LM_join_network>
}
    21a6:	cd 5b       	subi	r28, 0xBD	; 189
    21a8:	df 4f       	sbci	r29, 0xFF	; 255
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	08 95       	ret

Disassembly of section .text.set_wakeup:

00003a18 <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(4);
    3a18:	84 e0       	ldi	r24, 0x04	; 4
    3a1a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <RTC_set_wake_up_interrupt_minutes>
}
    3a1e:	08 95       	ret

Disassembly of section .text.send_header:

00002ecc <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    2ecc:	cf 93       	push	r28
    2ece:	df 93       	push	r29
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	e4 97       	sbiw	r28, 0x34	; 52
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    2ee0:	be 01       	movw	r22, r28
    2ee2:	6c 5c       	subi	r22, 0xCC	; 204
    2ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee6:	ce 01       	movw	r24, r28
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    2eee:	6c a9       	ldd	r22, Y+52	; 0x34
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	01 96       	adiw	r24, 0x01	; 1
    2ef4:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <LM_send_uplink>
}
    2ef8:	e4 96       	adiw	r28, 0x34	; 52
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	f8 94       	cli
    2efe:	de bf       	out	0x3e, r29	; 62
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	cd bf       	out	0x3d, r28	; 61
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	08 95       	ret

Disassembly of section .text.stage_0:

00001830 <stage_0>:
/************************************************************************/
static STAGE_STATUS stage_0(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
    1830:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <state_s0>
    1834:	82 30       	cpi	r24, 0x02	; 2
    1836:	29 f1       	breq	.+74     	; 0x1882 <stage_0+0x52>
    1838:	28 f4       	brcc	.+10     	; 0x1844 <stage_0+0x14>
    183a:	88 23       	and	r24, r24
    183c:	51 f0       	breq	.+20     	; 0x1852 <stage_0+0x22>
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	c1 f0       	breq	.+48     	; 0x1872 <stage_0+0x42>
    1842:	f6 cf       	rjmp	.-20     	; 0x1830 <stage_0>
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	09 f4       	brne	.+2      	; 0x184a <stage_0+0x1a>
    1848:	4e c0       	rjmp	.+156    	; 0x18e6 <stage_0+0xb6>
    184a:	30 f1       	brcs	.+76     	; 0x1898 <stage_0+0x68>
    184c:	85 30       	cpi	r24, 0x05	; 5
    184e:	81 f1       	breq	.+96     	; 0x18b0 <stage_0+0x80>
    1850:	ef cf       	rjmp	.-34     	; 0x1830 <stage_0>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
    1852:	e2 e5       	ldi	r30, 0x52	; 82
    1854:	fd e0       	ldi	r31, 0x0D	; 13
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	4a e6       	ldi	r20, 0x6A	; 106
    185c:	59 e0       	ldi	r21, 0x09	; 9
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	0e 94 a1 14 	call	0x2942	; 0x2942 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1866:	81 11       	cpse	r24, r1
    1868:	42 c0       	rjmp	.+132    	; 0x18ee <stage_0+0xbe>
			
				state_s0=STAGE_GET_TIME;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <state_s0>
			break;
    1870:	df cf       	rjmp	.-66     	; 0x1830 <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1872:	85 e7       	ldi	r24, 0x75	; 117
    1874:	9d e0       	ldi	r25, 0x0D	; 13
    1876:	0e 94 9e 07 	call	0xf3c	; 0xf3c <RTC_get_current_time>
				state_s0=STAGE_START;
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <state_s0>
			break;
    1880:	d7 cf       	rjmp	.-82     	; 0x1830 <stage_0>
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <ADC_meth_sens_power_on>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1888:	81 11       	cpse	r24, r1
    188a:	33 c0       	rjmp	.+102    	; 0x18f2 <stage_0+0xc2>
			
				SCD30_start_sampling();
    188c:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <state_s0>
			break;
    1896:	cc cf       	rjmp	.-104    	; 0x1830 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    1898:	0e 94 57 1c 	call	0x38ae	; 0x38ae <ADC_meth_sens_ready>
    189c:	88 23       	and	r24, r24
    189e:	59 f1       	breq	.+86     	; 0x18f6 <stage_0+0xc6>
    18a0:	0e 94 77 1b 	call	0x36ee	; 0x36ee <SCD30_is_sampling_done>
    18a4:	88 23       	and	r24, r24
    18a6:	49 f1       	breq	.+82     	; 0x18fa <stage_0+0xca>
				state_s0=STAGE_UPDATE_MRPP;
    18a8:	85 e0       	ldi	r24, 0x05	; 5
    18aa:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <state_s0>
			break;
    18ae:	c0 cf       	rjmp	.-128    	; 0x1830 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    18b0:	2c e8       	ldi	r18, 0x8C	; 140
    18b2:	3d e0       	ldi	r19, 0x0D	; 13
    18b4:	40 91 75 0d 	lds	r20, 0x0D75	; 0x800d75 <dt>
    18b8:	50 91 76 0d 	lds	r21, 0x0D76	; 0x800d76 <dt+0x1>
    18bc:	60 91 77 0d 	lds	r22, 0x0D77	; 0x800d77 <dt+0x2>
    18c0:	70 91 78 0d 	lds	r23, 0x0D78	; 0x800d78 <dt+0x3>
    18c4:	80 91 79 0d 	lds	r24, 0x0D79	; 0x800d79 <dt+0x4>
    18c8:	90 91 7a 0d 	lds	r25, 0x0D7A	; 0x800d7a <dt+0x5>
    18cc:	0e 94 3e 08 	call	0x107c	; 0x107c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(1, ts, co2_data);
    18d0:	4a e6       	ldi	r20, 0x6A	; 106
    18d2:	59 e0       	ldi	r21, 0x09	; 9
    18d4:	6c e8       	ldi	r22, 0x8C	; 140
    18d6:	7d e0       	ldi	r23, 0x0D	; 13
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	0e 94 c8 11 	call	0x2390	; 0x2390 <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    18de:	84 e0       	ldi	r24, 0x04	; 4
    18e0:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <state_s0>
			break;
    18e4:	a5 cf       	rjmp	.-182    	; 0x1830 <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    18e6:	0e 94 44 1c 	call	0x3888	; 0x3888 <SCD30_deinit_sampling>
				return STAGE_DONE;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	08 95       	ret
				state_s0=STAGE_START;
			break;
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	08 95       	ret
    18fa:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    18fc:	08 95       	ret

Disassembly of section .text.stage_1:

000014b6 <stage_1>:
/************************************************************************/
static STAGE_STATUS stage_1(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
    14b6:	80 91 b8 0d 	lds	r24, 0x0DB8	; 0x800db8 <state_s1>
    14ba:	82 30       	cpi	r24, 0x02	; 2
    14bc:	81 f1       	breq	.+96     	; 0x151e <stage_1+0x68>
    14be:	28 f4       	brcc	.+10     	; 0x14ca <stage_1+0x14>
    14c0:	88 23       	and	r24, r24
    14c2:	51 f0       	breq	.+20     	; 0x14d8 <stage_1+0x22>
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	19 f1       	breq	.+70     	; 0x150e <stage_1+0x58>
    14c8:	f6 cf       	rjmp	.-20     	; 0x14b6 <stage_1>
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <stage_1+0x1a>
    14ce:	5d c0       	rjmp	.+186    	; 0x158a <stage_1+0xd4>
    14d0:	70 f1       	brcs	.+92     	; 0x152e <stage_1+0x78>
    14d2:	85 30       	cpi	r24, 0x05	; 5
    14d4:	c1 f1       	breq	.+112    	; 0x1546 <stage_1+0x90>
    14d6:	ef cf       	rjmp	.-34     	; 0x14b6 <stage_1>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
    14d8:	e2 e5       	ldi	r30, 0x52	; 82
    14da:	fd e0       	ldi	r31, 0x0D	; 13
    14dc:	65 81       	ldd	r22, Z+5	; 0x05
    14de:	76 81       	ldd	r23, Z+6	; 0x06
    14e0:	4a e6       	ldi	r20, 0x6A	; 106
    14e2:	59 e0       	ldi	r21, 0x09	; 9
    14e4:	87 81       	ldd	r24, Z+7	; 0x07
    14e6:	90 85       	ldd	r25, Z+8	; 0x08
    14e8:	0e 94 a1 14 	call	0x2942	; 0x2942 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    14ec:	81 11       	cpse	r24, r1
    14ee:	53 c0       	rjmp	.+166    	; 0x1596 <stage_1+0xe0>
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
    14f0:	e2 e5       	ldi	r30, 0x52	; 82
    14f2:	fd e0       	ldi	r31, 0x0D	; 13
    14f4:	62 85       	ldd	r22, Z+10	; 0x0a
    14f6:	73 85       	ldd	r23, Z+11	; 0x0b
    14f8:	42 e1       	ldi	r20, 0x12	; 18
    14fa:	57 e0       	ldi	r21, 0x07	; 7
    14fc:	84 85       	ldd	r24, Z+12	; 0x0c
    14fe:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1502:	81 11       	cpse	r24, r1
    1504:	4a c0       	rjmp	.+148    	; 0x159a <stage_1+0xe4>
				
				state_s1=STAGE_GET_TIME;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <state_s1>
			break;
    150c:	d4 cf       	rjmp	.-88     	; 0x14b6 <stage_1>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    150e:	85 e7       	ldi	r24, 0x75	; 117
    1510:	9d e0       	ldi	r25, 0x0D	; 13
    1512:	0e 94 9e 07 	call	0xf3c	; 0xf3c <RTC_get_current_time>
				
				state_s1=STAGE_START;
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <state_s1>
			break;
    151c:	cc cf       	rjmp	.-104    	; 0x14b6 <stage_1>
			
			case STAGE_START:
				SCD30_start_sampling();
    151e:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <SCD30_start_sampling>
				ADC_start_sampling();
    1522:	0e 94 c2 1c 	call	0x3984	; 0x3984 <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <state_s1>
			break;
    152c:	c4 cf       	rjmp	.-120    	; 0x14b6 <stage_1>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    152e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <SCD30_is_sampling_done>
    1532:	88 23       	and	r24, r24
    1534:	a1 f1       	breq	.+104    	; 0x159e <stage_1+0xe8>
    1536:	0e 94 31 1b 	call	0x3662	; 0x3662 <ADC_is_sampling_done>
    153a:	88 23       	and	r24, r24
    153c:	91 f1       	breq	.+100    	; 0x15a2 <stage_1+0xec>
				state_s1=STAGE_UPDATE_MRPP;
    153e:	85 e0       	ldi	r24, 0x05	; 5
    1540:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <state_s1>
			break;
    1544:	b8 cf       	rjmp	.-144    	; 0x14b6 <stage_1>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1546:	2c e8       	ldi	r18, 0x8C	; 140
    1548:	3d e0       	ldi	r19, 0x0D	; 13
    154a:	40 91 75 0d 	lds	r20, 0x0D75	; 0x800d75 <dt>
    154e:	50 91 76 0d 	lds	r21, 0x0D76	; 0x800d76 <dt+0x1>
    1552:	60 91 77 0d 	lds	r22, 0x0D77	; 0x800d77 <dt+0x2>
    1556:	70 91 78 0d 	lds	r23, 0x0D78	; 0x800d78 <dt+0x3>
    155a:	80 91 79 0d 	lds	r24, 0x0D79	; 0x800d79 <dt+0x4>
    155e:	90 91 7a 0d 	lds	r25, 0x0D7A	; 0x800d7a <dt+0x5>
    1562:	0e 94 3e 08 	call	0x107c	; 0x107c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(2, ts, co2_data);
    1566:	4a e6       	ldi	r20, 0x6A	; 106
    1568:	59 e0       	ldi	r21, 0x09	; 9
    156a:	6c e8       	ldi	r22, 0x8C	; 140
    156c:	7d e0       	ldi	r23, 0x0D	; 13
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	0e 94 c8 11 	call	0x2390	; 0x2390 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(3, ts, meth_data);
    1574:	42 e1       	ldi	r20, 0x12	; 18
    1576:	57 e0       	ldi	r21, 0x07	; 7
    1578:	6c e8       	ldi	r22, 0x8C	; 140
    157a:	7d e0       	ldi	r23, 0x0D	; 13
    157c:	83 e0       	ldi	r24, 0x03	; 3
    157e:	0e 94 c8 11 	call	0x2390	; 0x2390 <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    1582:	84 e0       	ldi	r24, 0x04	; 4
    1584:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <state_s1>
			break;
    1588:	96 cf       	rjmp	.-212    	; 0x14b6 <stage_1>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    158a:	0e 94 44 1c 	call	0x3888	; 0x3888 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    158e:	0e 94 3a 1c 	call	0x3874	; 0x3874 <ADC_deinit_sampling>
				return STAGE_DONE;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1596:	83 e0       	ldi	r24, 0x03	; 3
    1598:	08 95       	ret
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	08 95       	ret
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	08 95       	ret
    15a2:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    15a4:	08 95       	ret

Disassembly of section .text.stage_2:

000012b8 <stage_2>:
static STAGE_STATUS stage_2(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	uint16_t seconds=10;
	while(1){
		switch(state_s2){
    12b8:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <state_s2>
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	89 f1       	breq	.+98     	; 0x1322 <stage_2+0x6a>
    12c0:	28 f4       	brcc	.+10     	; 0x12cc <stage_2+0x14>
    12c2:	88 23       	and	r24, r24
    12c4:	59 f0       	breq	.+22     	; 0x12dc <stage_2+0x24>
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	21 f1       	breq	.+72     	; 0x1312 <stage_2+0x5a>
    12ca:	f6 cf       	rjmp	.-20     	; 0x12b8 <stage_2>
    12cc:	84 30       	cpi	r24, 0x04	; 4
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <stage_2+0x1a>
    12d0:	66 c0       	rjmp	.+204    	; 0x139e <stage_2+0xe6>
    12d2:	98 f1       	brcs	.+102    	; 0x133a <stage_2+0x82>
    12d4:	85 30       	cpi	r24, 0x05	; 5
    12d6:	09 f4       	brne	.+2      	; 0x12da <stage_2+0x22>
    12d8:	40 c0       	rjmp	.+128    	; 0x135a <stage_2+0xa2>
    12da:	ee cf       	rjmp	.-36     	; 0x12b8 <stage_2>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[3].samplingInterval, cols[3].samplings, co2_data);
    12dc:	e2 e5       	ldi	r30, 0x52	; 82
    12de:	fd e0       	ldi	r31, 0x0D	; 13
    12e0:	67 85       	ldd	r22, Z+15	; 0x0f
    12e2:	70 89       	ldd	r23, Z+16	; 0x10
    12e4:	4a e6       	ldi	r20, 0x6A	; 106
    12e6:	59 e0       	ldi	r21, 0x09	; 9
    12e8:	81 89       	ldd	r24, Z+17	; 0x11
    12ea:	92 89       	ldd	r25, Z+18	; 0x12
    12ec:	0e 94 a1 14 	call	0x2942	; 0x2942 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    12f0:	81 11       	cpse	r24, r1
    12f2:	5b c0       	rjmp	.+182    	; 0x13aa <stage_2+0xf2>
			
				adcStatus=ADC_init_sampling(cols[4].samplingInterval, cols[4].samplings, meth_data);
    12f4:	e2 e5       	ldi	r30, 0x52	; 82
    12f6:	fd e0       	ldi	r31, 0x0D	; 13
    12f8:	64 89       	ldd	r22, Z+20	; 0x14
    12fa:	75 89       	ldd	r23, Z+21	; 0x15
    12fc:	42 e1       	ldi	r20, 0x12	; 18
    12fe:	57 e0       	ldi	r21, 0x07	; 7
    1300:	86 89       	ldd	r24, Z+22	; 0x16
    1302:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1306:	81 11       	cpse	r24, r1
    1308:	52 c0       	rjmp	.+164    	; 0x13ae <stage_2+0xf6>
			
				state_s2=STAGE_GET_TIME;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <state_s2>
			break;
    1310:	d3 cf       	rjmp	.-90     	; 0x12b8 <stage_2>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1312:	85 e7       	ldi	r24, 0x75	; 117
    1314:	9d e0       	ldi	r25, 0x0D	; 13
    1316:	0e 94 9e 07 	call	0xf3c	; 0xf3c <RTC_get_current_time>
			
				state_s2=STAGE_START;
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <state_s2>
			break;
    1320:	cb cf       	rjmp	.-106    	; 0x12b8 <stage_2>
			
			case STAGE_START:
				SCD30_start_sampling();
    1322:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <SCD30_start_sampling>
				ADC_start_sampling();
    1326:	0e 94 c2 1c 	call	0x3984	; 0x3984 <ADC_start_sampling>
				PUMP_start(seconds);
    132a:	8a e0       	ldi	r24, 0x0A	; 10
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 4b 1a 	call	0x3496	; 0x3496 <PUMP_start>
			
				state_s2=STAGE_WAIT;
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <state_s2>
			break;
    1338:	bf cf       	rjmp	.-130    	; 0x12b8 <stage_2>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    133a:	0e 94 77 1b 	call	0x36ee	; 0x36ee <SCD30_is_sampling_done>
    133e:	88 23       	and	r24, r24
    1340:	c1 f1       	breq	.+112    	; 0x13b2 <stage_2+0xfa>
    1342:	0e 94 31 1b 	call	0x3662	; 0x3662 <ADC_is_sampling_done>
    1346:	88 23       	and	r24, r24
    1348:	b1 f1       	breq	.+108    	; 0x13b6 <stage_2+0xfe>
    134a:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <PUMP_is_done>
    134e:	88 23       	and	r24, r24
    1350:	a1 f1       	breq	.+104    	; 0x13ba <stage_2+0x102>
				state_s2=STAGE_UPDATE_MRPP;
    1352:	85 e0       	ldi	r24, 0x05	; 5
    1354:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <state_s2>
			break;
    1358:	af cf       	rjmp	.-162    	; 0x12b8 <stage_2>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    135a:	2c e8       	ldi	r18, 0x8C	; 140
    135c:	3d e0       	ldi	r19, 0x0D	; 13
    135e:	40 91 75 0d 	lds	r20, 0x0D75	; 0x800d75 <dt>
    1362:	50 91 76 0d 	lds	r21, 0x0D76	; 0x800d76 <dt+0x1>
    1366:	60 91 77 0d 	lds	r22, 0x0D77	; 0x800d77 <dt+0x2>
    136a:	70 91 78 0d 	lds	r23, 0x0D78	; 0x800d78 <dt+0x3>
    136e:	80 91 79 0d 	lds	r24, 0x0D79	; 0x800d79 <dt+0x4>
    1372:	90 91 7a 0d 	lds	r25, 0x0D7A	; 0x800d7a <dt+0x5>
    1376:	0e 94 3e 08 	call	0x107c	; 0x107c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(4, ts, co2_data);
    137a:	4a e6       	ldi	r20, 0x6A	; 106
    137c:	59 e0       	ldi	r21, 0x09	; 9
    137e:	6c e8       	ldi	r22, 0x8C	; 140
    1380:	7d e0       	ldi	r23, 0x0D	; 13
    1382:	84 e0       	ldi	r24, 0x04	; 4
    1384:	0e 94 c8 11 	call	0x2390	; 0x2390 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(5, ts, meth_data);
    1388:	42 e1       	ldi	r20, 0x12	; 18
    138a:	57 e0       	ldi	r21, 0x07	; 7
    138c:	6c e8       	ldi	r22, 0x8C	; 140
    138e:	7d e0       	ldi	r23, 0x0D	; 13
    1390:	85 e0       	ldi	r24, 0x05	; 5
    1392:	0e 94 c8 11 	call	0x2390	; 0x2390 <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <state_s2>
			break;
    139c:	8d cf       	rjmp	.-230    	; 0x12b8 <stage_2>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    139e:	0e 94 44 1c 	call	0x3888	; 0x3888 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    13a2:	0e 94 3a 1c 	call	0x3874	; 0x3874 <ADC_deinit_sampling>
				return STAGE_DONE;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	08 95       	ret
	uint16_t seconds=10;
	while(1){
		switch(state_s2){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[3].samplingInterval, cols[3].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    13aa:	83 e0       	ldi	r24, 0x03	; 3
    13ac:	08 95       	ret
			
				adcStatus=ADC_init_sampling(cols[4].samplingInterval, cols[4].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    13ae:	83 e0       	ldi	r24, 0x03	; 3
    13b0:	08 95       	ret
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	08 95       	ret
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	08 95       	ret
    13ba:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    13bc:	08 95       	ret

Disassembly of section .text.send_body:

00002e8c <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	e4 97       	sbiw	r28, 0x34	; 52
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    2ea0:	ae 01       	movw	r20, r28
    2ea2:	4c 5c       	subi	r20, 0xCC	; 204
    2ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ea6:	be 01       	movw	r22, r28
    2ea8:	6f 5f       	subi	r22, 0xFF	; 255
    2eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    2eac:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    2eb0:	6c a9       	ldd	r22, Y+52	; 0x34
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	01 96       	adiw	r24, 0x01	; 1
    2eb6:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <LM_send_uplink>
}
    2eba:	e4 96       	adiw	r28, 0x34	; 52
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	df 91       	pop	r29
    2ec8:	cf 91       	pop	r28
    2eca:	08 95       	ret

Disassembly of section .text.decode_body_response:

00003542 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    3542:	cf 93       	push	r28
	switch(status){
    3544:	63 30       	cpi	r22, 0x03	; 3
    3546:	59 f0       	breq	.+22     	; 0x355e <decode_body_response+0x1c>
    3548:	65 30       	cpi	r22, 0x05	; 5
    354a:	21 f0       	breq	.+8      	; 0x3554 <decode_body_response+0x12>
    354c:	66 23       	and	r22, r22
    354e:	11 f0       	breq	.+4      	; 0x3554 <decode_body_response+0x12>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    3550:	82 e1       	ldi	r24, 0x12	; 18
    3552:	06 c0       	rjmp	.+12     	; 0x3560 <decode_body_response+0x1e>
    3554:	c4 2f       	mov	r28, r20

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			MRPP_set_body_sent(bodyIndex);
    3556:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <MRPP_set_body_sent>
			return success;
    355a:	8c 2f       	mov	r24, r28
    355c:	01 c0       	rjmp	.+2      	; 0x3560 <decode_body_response+0x1e>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    355e:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3560:	cf 91       	pop	r28
    3562:	08 95       	ret

Disassembly of section .text.send_tail:

00002f0a <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	e4 97       	sbiw	r28, 0x34	; 52
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    2f1e:	be 01       	movw	r22, r28
    2f20:	6c 5c       	subi	r22, 0xCC	; 204
    2f22:	7f 4f       	sbci	r23, 0xFF	; 255
    2f24:	ce 01       	movw	r24, r28
    2f26:	01 96       	adiw	r24, 0x01	; 1
    2f28:	0e 94 90 1a 	call	0x3520	; 0x3520 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    2f2c:	6c a9       	ldd	r22, Y+52	; 0x34
    2f2e:	ce 01       	movw	r24, r28
    2f30:	01 96       	adiw	r24, 0x01	; 1
    2f32:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <LM_send_uplink>
}
    2f36:	e4 96       	adiw	r28, 0x34	; 52
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	08 95       	ret

Disassembly of section .text.send_msg:

000037ba <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart0_hal_send_string(msg);
    37ba:	0e 94 00 12 	call	0x2400	; 0x2400 <uart0_hal_send_string>
    37be:	2f ef       	ldi	r18, 0xFF	; 255
    37c0:	80 e7       	ldi	r24, 0x70	; 112
    37c2:	92 e0       	ldi	r25, 0x02	; 2
    37c4:	21 50       	subi	r18, 0x01	; 1
    37c6:	80 40       	sbci	r24, 0x00	; 0
    37c8:	90 40       	sbci	r25, 0x00	; 0
    37ca:	e1 f7       	brne	.-8      	; 0x37c4 <send_msg+0xa>
    37cc:	00 c0       	rjmp	.+0      	; 0x37ce <send_msg+0x14>
    37ce:	00 00       	nop
    37d0:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00000a00 <MAINPG_start>:
static uint8_t colsNumber=5;

static void send_msg(const char msg[]);


void MAINPG_start(){
 a00:	1f 93       	push	r17
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	STAGE_STATUS stageStatus;
	//bool fromSleep=false;
	bool fromSleep=true;
 a06:	11 e0       	ldi	r17, 0x01	; 1

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
 a08:	c0 e0       	ldi	r28, 0x00	; 0
 a0a:	10 c0       	rjmp	.+32     	; 0xa2c <MAINPG_start+0x2c>
				
				//Set pull up
				set_bit(PORTB, 0);
				set_bit(PORTB, 1);
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a0c:	c4 e0       	ldi	r28, 0x04	; 4
 a0e:	0e c0       	rjmp	.+28     	; 0xa2c <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 a10:	c2 e1       	ldi	r28, 0x12	; 18
 a12:	0c c0       	rjmp	.+24     	; 0xa2c <MAINPG_start+0x2c>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 a14:	c2 e1       	ldi	r28, 0x12	; 18
 a16:	0a c0       	rjmp	.+20     	; 0xa2c <MAINPG_start+0x2c>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 a18:	c2 e1       	ldi	r28, 0x12	; 18
 a1a:	08 c0       	rjmp	.+16     	; 0xa2c <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 a1c:	c2 e1       	ldi	r28, 0x12	; 18
 a1e:	06 c0       	rjmp	.+12     	; 0xa2c <MAINPG_start+0x2c>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
 a20:	cd 2f       	mov	r28, r29
 a22:	04 c0       	rjmp	.+8      	; 0xa2c <MAINPG_start+0x2c>
 a24:	cd 2f       	mov	r28, r29
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <MAINPG_start+0x2c>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
 a28:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
 a2a:	cd e0       	ldi	r28, 0x0D	; 13
	//bool fromSleep=false;
	bool fromSleep=true;
	
	
	while(1){
		switch(state){
 a2c:	ec 2f       	mov	r30, r28
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	e4 31       	cpi	r30, 0x14	; 20
 a32:	f1 05       	cpc	r31, r1
 a34:	d8 f7       	brcc	.-10     	; 0xa2c <MAINPG_start+0x2c>
 a36:	ec 5a       	subi	r30, 0xAC	; 172
 a38:	ff 4f       	sbci	r31, 0xFF	; 255
 a3a:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
 a3e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <uart0_hal_init>
				uart1_hal_init();
 a42:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <uart1_hal_init>
				TWI_HAL_init();
 a46:	0e 94 4e 1c 	call	0x389c	; 0x389c <TWI_HAL_init>
				TC2_HAL_init();
 a4a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <TC2_HAL_init>
				PM_HAL_adc_power_init();
 a4e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
 a52:	0e 94 77 1c 	call	0x38ee	; 0x38ee <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
 a56:	0e 94 85 1c 	call	0x390a	; 0x390a <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
 a5a:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <PM_HAL_SCD30_power_init>
				
				//Set pull up
				set_bit(PORTB, 0);
 a5e:	85 b1       	in	r24, 0x05	; 5
 a60:	81 60       	ori	r24, 0x01	; 1
 a62:	85 b9       	out	0x05, r24	; 5
				set_bit(PORTB, 1);
 a64:	85 b1       	in	r24, 0x05	; 5
 a66:	82 60       	ori	r24, 0x02	; 2
 a68:	85 b9       	out	0x05, r24	; 5
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a6a:	11 11       	cpse	r17, r1
 a6c:	cf cf       	rjmp	.-98     	; 0xa0c <MAINPG_start+0xc>
 a6e:	c1 e0       	ldi	r28, 0x01	; 1
 a70:	dd cf       	rjmp	.-70     	; 0xa2c <MAINPG_start+0x2c>
			break;
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
 a72:	61 e9       	ldi	r22, 0x91	; 145
 a74:	71 e0       	ldi	r23, 0x01	; 1
 a76:	80 e0       	ldi	r24, 0x00	; 0
 a78:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				lmStatus=join_lora();
 a7c:	0e 94 a0 10 	call	0x2140	; 0x2140 <join_lora>
				state=decode_join_response(lmStatus);
 a80:	0e 94 85 1b 	call	0x370a	; 0x370a <decode_join_response>
 a84:	c8 2f       	mov	r28, r24
			break;
 a86:	d2 cf       	rjmp	.-92     	; 0xa2c <MAINPG_start+0x2c>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
 a88:	68 e9       	ldi	r22, 0x98	; 152
 a8a:	71 e0       	ldi	r23, 0x01	; 1
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				lmStatus=LM_wake_up();
 a92:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 a96:	81 11       	cpse	r24, r1
 a98:	bb cf       	rjmp	.-138    	; 0xa10 <MAINPG_start+0x10>
 a9a:	c5 e0       	ldi	r28, 0x05	; 5
 a9c:	c7 cf       	rjmp	.-114    	; 0xa2c <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
 a9e:	67 ea       	ldi	r22, 0xA7	; 167
 aa0:	71 e0       	ldi	r23, 0x01	; 1
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
 aa8:	2f ef       	ldi	r18, 0xFF	; 255
 aaa:	81 e1       	ldi	r24, 0x11	; 17
 aac:	9a e7       	ldi	r25, 0x7A	; 122
 aae:	21 50       	subi	r18, 0x01	; 1
 ab0:	80 40       	sbci	r24, 0x00	; 0
 ab2:	90 40       	sbci	r25, 0x00	; 0
 ab4:	e1 f7       	brne	.-8      	; 0xaae <MAINPG_start+0xae>
 ab6:	00 c0       	rjmp	.+0      	; 0xab8 <MAINPG_start+0xb8>
 ab8:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
 aba:	c1 e0       	ldi	r28, 0x01	; 1
			break;
 abc:	b7 cf       	rjmp	.-146    	; 0xa2c <MAINPG_start+0x2c>
			
			case MAINPG_LORA_JOIN_CONF_ERR:
				print_debug("Conf err\n\r");
 abe:	63 eb       	ldi	r22, 0xB3	; 179
 ac0:	71 e0       	ldi	r23, 0x01	; 1
 ac2:	80 e0       	ldi	r24, 0x00	; 0
 ac4:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				state=MAINPG_END;
 ac8:	c3 e1       	ldi	r28, 0x13	; 19
			break;
 aca:	b0 cf       	rjmp	.-160    	; 0xa2c <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
 acc:	6e eb       	ldi	r22, 0xBE	; 190
 ace:	71 e0       	ldi	r23, 0x01	; 1
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				rtcStatus=RTC_set_clock_out(1);
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	0e 94 04 14 	call	0x2808	; 0x2808 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 adc:	81 11       	cpse	r24, r1
 ade:	9a cf       	rjmp	.-204    	; 0xa14 <MAINPG_start+0x14>
 ae0:	c7 e0       	ldi	r28, 0x07	; 7
 ae2:	a4 cf       	rjmp	.-184    	; 0xa2c <MAINPG_start+0x2c>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
 ae4:	69 ec       	ldi	r22, 0xC9	; 201
 ae6:	71 e0       	ldi	r23, 0x01	; 1
 ae8:	80 e0       	ldi	r24, 0x00	; 0
 aea:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
 aee:	0e 94 d5 18 	call	0x31aa	; 0x31aa <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 af2:	81 11       	cpse	r24, r1
 af4:	91 cf       	rjmp	.-222    	; 0xa18 <MAINPG_start+0x18>
 af6:	c6 e0       	ldi	r28, 0x06	; 6
 af8:	99 cf       	rjmp	.-206    	; 0xa2c <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
 afa:	6b ed       	ldi	r22, 0xDB	; 219
 afc:	71 e0       	ldi	r23, 0x01	; 1
 afe:	80 e0       	ldi	r24, 0x00	; 0
 b00:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				rtcStatus=set_wakeup();
 b04:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 b08:	81 11       	cpse	r24, r1
 b0a:	88 cf       	rjmp	.-240    	; 0xa1c <MAINPG_start+0x1c>
 b0c:	c8 e0       	ldi	r28, 0x08	; 8
 b0e:	8e cf       	rjmp	.-228    	; 0xa2c <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
 b10:	60 ef       	ldi	r22, 0xF0	; 240
 b12:	71 e0       	ldi	r23, 0x01	; 1
 b14:	80 e0       	ldi	r24, 0x00	; 0
 b16:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				MRPP_init_group(cols, colsNumber);
 b1a:	65 e0       	ldi	r22, 0x05	; 5
 b1c:	82 e5       	ldi	r24, 0x52	; 82
 b1e:	9d e0       	ldi	r25, 0x0D	; 13
 b20:	0e 94 21 19 	call	0x3242	; 0x3242 <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
 b24:	c9 e0       	ldi	r28, 0x09	; 9
			break;
 b26:	82 cf       	rjmp	.-252    	; 0xa2c <MAINPG_start+0x2c>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
 b28:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <LM_is_free>
 b2c:	88 23       	and	r24, r24
 b2e:	09 f4       	brne	.+2      	; 0xb32 <MAINPG_start+0x132>
 b30:	7d cf       	rjmp	.-262    	; 0xa2c <MAINPG_start+0x2c>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
 b32:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
 b36:	49 e0       	ldi	r20, 0x09	; 9
 b38:	6a e0       	ldi	r22, 0x0A	; 10
 b3a:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <decode_header_tail_response>
 b3e:	c8 2f       	mov	r28, r24
				//state=decode_header_tail_response(lmStatus, MAINPG_STAGE_2, MAINPG_SEND_HEADER);
			break;
 b40:	75 cf       	rjmp	.-278    	; 0xa2c <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
 b42:	0e 94 18 0c 	call	0x1830	; 0x1830 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 b46:	6b e0       	ldi	r22, 0x0B	; 11
 b48:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <decode_stage_response>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
				//state=decode_header_tail_response(lmStatus, MAINPG_STAGE_2, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
 b4c:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 b4e:	c8 2f       	mov	r28, r24
			break;
 b50:	6d cf       	rjmp	.-294    	; 0xa2c <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
 b52:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 b56:	6c e0       	ldi	r22, 0x0C	; 12
 b58:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
 b5c:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 b5e:	c8 2f       	mov	r28, r24
			break;
 b60:	65 cf       	rjmp	.-310    	; 0xa2c <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
 b62:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 b66:	6e e0       	ldi	r22, 0x0E	; 14
 b68:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
 b6c:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 b6e:	c8 2f       	mov	r28, r24
			break;
 b70:	5d cf       	rjmp	.-326    	; 0xa2c <MAINPG_start+0x2c>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
 b72:	84 ea       	ldi	r24, 0xA4	; 164
 b74:	9d e0       	ldi	r25, 0x0D	; 13
 b76:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <MRPP_is_body_package_ready>
 b7a:	88 23       	and	r24, r24
 b7c:	09 f4       	brne	.+2      	; 0xb80 <MAINPG_start+0x180>
 b7e:	50 cf       	rjmp	.-352    	; 0xa20 <MAINPG_start+0x20>
 b80:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <LM_is_free>
 b84:	88 23       	and	r24, r24
 b86:	09 f4       	brne	.+2      	; 0xb8a <MAINPG_start+0x18a>
 b88:	4d cf       	rjmp	.-358    	; 0xa24 <MAINPG_start+0x24>
					lmStatus=send_body(bodyIndex);
 b8a:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <bodyIndex>
 b8e:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <bodyIndex+0x1>
 b92:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
 b96:	4d 2f       	mov	r20, r29
 b98:	68 2f       	mov	r22, r24
 b9a:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <bodyIndex>
 b9e:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <bodyIndex+0x1>
 ba2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <decode_body_response>
 ba6:	c8 2f       	mov	r28, r24
 ba8:	41 cf       	rjmp	.-382    	; 0xa2c <MAINPG_start+0x2c>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
 baa:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <MRPP_all_body_package_sent>
 bae:	88 23       	and	r24, r24
 bb0:	09 f4       	brne	.+2      	; 0xbb4 <MAINPG_start+0x1b4>
 bb2:	3a cf       	rjmp	.-396    	; 0xa28 <MAINPG_start+0x28>
					state=MAINPG_SEND_TAIL;
 bb4:	cf e0       	ldi	r28, 0x0F	; 15
 bb6:	3a cf       	rjmp	.-396    	; 0xa2c <MAINPG_start+0x2c>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
 bb8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <LM_is_free>
 bbc:	88 23       	and	r24, r24
 bbe:	09 f4       	brne	.+2      	; 0xbc2 <MAINPG_start+0x1c2>
 bc0:	35 cf       	rjmp	.-406    	; 0xa2c <MAINPG_start+0x2c>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
 bc2:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
 bc6:	4f e0       	ldi	r20, 0x0F	; 15
 bc8:	60 e1       	ldi	r22, 0x10	; 16
 bca:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <decode_header_tail_response>
 bce:	c8 2f       	mov	r28, r24
				
			break;
 bd0:	2d cf       	rjmp	.-422    	; 0xa2c <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
 bd2:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
 bd6:	11 e0       	ldi	r17, 0x01	; 1
 bd8:	81 11       	cpse	r24, r1
 bda:	10 e0       	ldi	r17, 0x00	; 0
				
				state=MAINPG_SLEEP;
 bdc:	c1 e1       	ldi	r28, 0x11	; 17
			break;
 bde:	26 cf       	rjmp	.-436    	; 0xa2c <MAINPG_start+0x2c>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
 be0:	6c ef       	ldi	r22, 0xFC	; 252
 be2:	71 e0       	ldi	r23, 0x01	; 1
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				PM_HAL_enter_power_down();
 bea:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
 bee:	64 e0       	ldi	r22, 0x04	; 4
 bf0:	72 e0       	ldi	r23, 0x02	; 2
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				state=MAINPG_INIT_HW;
 bf8:	c0 e0       	ldi	r28, 0x00	; 0
			break;
 bfa:	18 cf       	rjmp	.-464    	; 0xa2c <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
 bfc:	6c e0       	ldi	r22, 0x0C	; 12
 bfe:	72 e0       	ldi	r23, 0x02	; 2
 c00:	80 e0       	ldi	r24, 0x00	; 0
 c02:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				state=MAINPG_END;
 c06:	c3 e1       	ldi	r28, 0x13	; 19
			break;
 c08:	11 cf       	rjmp	.-478    	; 0xa2c <MAINPG_start+0x2c>
			
			case MAINPG_END:
				print_debug("END\n\r");
 c0a:	6a e1       	ldi	r22, 0x1A	; 26
 c0c:	72 e0       	ldi	r23, 0x02	; 2
 c0e:	80 e0       	ldi	r24, 0x00	; 0
 c10:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <send_msg>
				return;
			break;	
		}
	}
}
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	1f 91       	pop	r17
 c1a:	08 95       	ret

Disassembly of section .text.calc_crc8:

000030a0 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    30a0:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    30a2:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    30a4:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    30a6:	14 c0       	rjmp	.+40     	; 0x30d0 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    30a8:	fa 01       	movw	r30, r20
    30aa:	e3 0f       	add	r30, r19
    30ac:	f1 1d       	adc	r31, r1
    30ae:	90 81       	ld	r25, Z
    30b0:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    30b2:	28 e0       	ldi	r18, 0x08	; 8
    30b4:	0a c0       	rjmp	.+20     	; 0x30ca <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    30b6:	88 23       	and	r24, r24
    30b8:	34 f4       	brge	.+12     	; 0x30c6 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	88 0f       	add	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	91 e3       	ldi	r25, 0x31	; 49
    30c2:	89 27       	eor	r24, r25
    30c4:	01 c0       	rjmp	.+2      	; 0x30c8 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    30c6:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    30c8:	21 50       	subi	r18, 0x01	; 1
    30ca:	21 11       	cpse	r18, r1
    30cc:	f4 cf       	rjmp	.-24     	; 0x30b6 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    30ce:	3f 5f       	subi	r19, 0xFF	; 255
    30d0:	36 17       	cp	r19, r22
    30d2:	50 f3       	brcs	.-44     	; 0x30a8 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    30d4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003934 <__subsf3>:
    3934:	50 58       	subi	r21, 0x80	; 128

00003936 <__addsf3>:
    3936:	bb 27       	eor	r27, r27
    3938:	aa 27       	eor	r26, r26
    393a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__addsf3x>
    393e:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000018fe <__addsf3x>:
    18fe:	11 c0       	rjmp	.+34     	; 0x1922 <__addsf3x+0x24>
    1900:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__fp_pscA>
    1904:	38 f0       	brcs	.+14     	; 0x1914 <__addsf3x+0x16>
    1906:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__fp_pscB>
    190a:	20 f0       	brcs	.+8      	; 0x1914 <__addsf3x+0x16>
    190c:	39 f4       	brne	.+14     	; 0x191c <__addsf3x+0x1e>
    190e:	9f 3f       	cpi	r25, 0xFF	; 255
    1910:	19 f4       	brne	.+6      	; 0x1918 <__addsf3x+0x1a>
    1912:	26 f4       	brtc	.+8      	; 0x191c <__addsf3x+0x1e>
    1914:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__fp_nan>
    1918:	0e f4       	brtc	.+2      	; 0x191c <__addsf3x+0x1e>
    191a:	e0 95       	com	r30
    191c:	e7 fb       	bst	r30, 7
    191e:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__fp_inf>
    1922:	e9 2f       	mov	r30, r25
    1924:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__fp_split3>
    1928:	58 f3       	brcs	.-42     	; 0x1900 <__addsf3x+0x2>
    192a:	ba 17       	cp	r27, r26
    192c:	62 07       	cpc	r22, r18
    192e:	73 07       	cpc	r23, r19
    1930:	84 07       	cpc	r24, r20
    1932:	95 07       	cpc	r25, r21
    1934:	20 f0       	brcs	.+8      	; 0x193e <__addsf3x+0x40>
    1936:	79 f4       	brne	.+30     	; 0x1956 <__addsf3x+0x58>
    1938:	a6 f5       	brtc	.+104    	; 0x19a2 <__addsf3x+0xa4>
    193a:	0c 94 af 1c 	jmp	0x395e	; 0x395e <__fp_zero>
    193e:	0e f4       	brtc	.+2      	; 0x1942 <__addsf3x+0x44>
    1940:	e0 95       	com	r30
    1942:	0b 2e       	mov	r0, r27
    1944:	ba 2f       	mov	r27, r26
    1946:	a0 2d       	mov	r26, r0
    1948:	0b 01       	movw	r0, r22
    194a:	b9 01       	movw	r22, r18
    194c:	90 01       	movw	r18, r0
    194e:	0c 01       	movw	r0, r24
    1950:	ca 01       	movw	r24, r20
    1952:	a0 01       	movw	r20, r0
    1954:	11 24       	eor	r1, r1
    1956:	ff 27       	eor	r31, r31
    1958:	59 1b       	sub	r21, r25
    195a:	99 f0       	breq	.+38     	; 0x1982 <__addsf3x+0x84>
    195c:	59 3f       	cpi	r21, 0xF9	; 249
    195e:	50 f4       	brcc	.+20     	; 0x1974 <__addsf3x+0x76>
    1960:	50 3e       	cpi	r21, 0xE0	; 224
    1962:	68 f1       	brcs	.+90     	; 0x19be <__addsf3x+0xc0>
    1964:	1a 16       	cp	r1, r26
    1966:	f0 40       	sbci	r31, 0x00	; 0
    1968:	a2 2f       	mov	r26, r18
    196a:	23 2f       	mov	r18, r19
    196c:	34 2f       	mov	r19, r20
    196e:	44 27       	eor	r20, r20
    1970:	58 5f       	subi	r21, 0xF8	; 248
    1972:	f3 cf       	rjmp	.-26     	; 0x195a <__addsf3x+0x5c>
    1974:	46 95       	lsr	r20
    1976:	37 95       	ror	r19
    1978:	27 95       	ror	r18
    197a:	a7 95       	ror	r26
    197c:	f0 40       	sbci	r31, 0x00	; 0
    197e:	53 95       	inc	r21
    1980:	c9 f7       	brne	.-14     	; 0x1974 <__addsf3x+0x76>
    1982:	7e f4       	brtc	.+30     	; 0x19a2 <__addsf3x+0xa4>
    1984:	1f 16       	cp	r1, r31
    1986:	ba 0b       	sbc	r27, r26
    1988:	62 0b       	sbc	r22, r18
    198a:	73 0b       	sbc	r23, r19
    198c:	84 0b       	sbc	r24, r20
    198e:	ba f0       	brmi	.+46     	; 0x19be <__addsf3x+0xc0>
    1990:	91 50       	subi	r25, 0x01	; 1
    1992:	a1 f0       	breq	.+40     	; 0x19bc <__addsf3x+0xbe>
    1994:	ff 0f       	add	r31, r31
    1996:	bb 1f       	adc	r27, r27
    1998:	66 1f       	adc	r22, r22
    199a:	77 1f       	adc	r23, r23
    199c:	88 1f       	adc	r24, r24
    199e:	c2 f7       	brpl	.-16     	; 0x1990 <__addsf3x+0x92>
    19a0:	0e c0       	rjmp	.+28     	; 0x19be <__addsf3x+0xc0>
    19a2:	ba 0f       	add	r27, r26
    19a4:	62 1f       	adc	r22, r18
    19a6:	73 1f       	adc	r23, r19
    19a8:	84 1f       	adc	r24, r20
    19aa:	48 f4       	brcc	.+18     	; 0x19be <__addsf3x+0xc0>
    19ac:	87 95       	ror	r24
    19ae:	77 95       	ror	r23
    19b0:	67 95       	ror	r22
    19b2:	b7 95       	ror	r27
    19b4:	f7 95       	ror	r31
    19b6:	9e 3f       	cpi	r25, 0xFE	; 254
    19b8:	08 f0       	brcs	.+2      	; 0x19bc <__addsf3x+0xbe>
    19ba:	b0 cf       	rjmp	.-160    	; 0x191c <__addsf3x+0x1e>
    19bc:	93 95       	inc	r25
    19be:	88 0f       	add	r24, r24
    19c0:	08 f0       	brcs	.+2      	; 0x19c4 <__addsf3x+0xc6>
    19c2:	99 27       	eor	r25, r25
    19c4:	ee 0f       	add	r30, r30
    19c6:	97 95       	ror	r25
    19c8:	87 95       	ror	r24
    19ca:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a20 <__divsf3>:
    3a20:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__divsf3x>
    3a24:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000015a6 <__divsf3x>:
    15a6:	10 c0       	rjmp	.+32     	; 0x15c8 <__divsf3x+0x22>
    15a8:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__fp_pscB>
    15ac:	58 f0       	brcs	.+22     	; 0x15c4 <__divsf3x+0x1e>
    15ae:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__fp_pscA>
    15b2:	40 f0       	brcs	.+16     	; 0x15c4 <__divsf3x+0x1e>
    15b4:	29 f4       	brne	.+10     	; 0x15c0 <__divsf3x+0x1a>
    15b6:	5f 3f       	cpi	r21, 0xFF	; 255
    15b8:	29 f0       	breq	.+10     	; 0x15c4 <__divsf3x+0x1e>
    15ba:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__fp_inf>
    15be:	51 11       	cpse	r21, r1
    15c0:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__fp_szero>
    15c4:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__fp_nan>
    15c8:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__fp_split3>
    15cc:	68 f3       	brcs	.-38     	; 0x15a8 <__divsf3x+0x2>

000015ce <__divsf3_pse>:
    15ce:	99 23       	and	r25, r25
    15d0:	b1 f3       	breq	.-20     	; 0x15be <__divsf3x+0x18>
    15d2:	55 23       	and	r21, r21
    15d4:	91 f3       	breq	.-28     	; 0x15ba <__divsf3x+0x14>
    15d6:	95 1b       	sub	r25, r21
    15d8:	55 0b       	sbc	r21, r21
    15da:	bb 27       	eor	r27, r27
    15dc:	aa 27       	eor	r26, r26
    15de:	62 17       	cp	r22, r18
    15e0:	73 07       	cpc	r23, r19
    15e2:	84 07       	cpc	r24, r20
    15e4:	38 f0       	brcs	.+14     	; 0x15f4 <__divsf3_pse+0x26>
    15e6:	9f 5f       	subi	r25, 0xFF	; 255
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	22 0f       	add	r18, r18
    15ec:	33 1f       	adc	r19, r19
    15ee:	44 1f       	adc	r20, r20
    15f0:	aa 1f       	adc	r26, r26
    15f2:	a9 f3       	breq	.-22     	; 0x15de <__divsf3_pse+0x10>
    15f4:	35 d0       	rcall	.+106    	; 0x1660 <__divsf3_pse+0x92>
    15f6:	0e 2e       	mov	r0, r30
    15f8:	3a f0       	brmi	.+14     	; 0x1608 <__divsf3_pse+0x3a>
    15fa:	e0 e8       	ldi	r30, 0x80	; 128
    15fc:	32 d0       	rcall	.+100    	; 0x1662 <__divsf3_pse+0x94>
    15fe:	91 50       	subi	r25, 0x01	; 1
    1600:	50 40       	sbci	r21, 0x00	; 0
    1602:	e6 95       	lsr	r30
    1604:	00 1c       	adc	r0, r0
    1606:	ca f7       	brpl	.-14     	; 0x15fa <__divsf3_pse+0x2c>
    1608:	2b d0       	rcall	.+86     	; 0x1660 <__divsf3_pse+0x92>
    160a:	fe 2f       	mov	r31, r30
    160c:	29 d0       	rcall	.+82     	; 0x1660 <__divsf3_pse+0x92>
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	bb 1f       	adc	r27, r27
    1616:	26 17       	cp	r18, r22
    1618:	37 07       	cpc	r19, r23
    161a:	48 07       	cpc	r20, r24
    161c:	ab 07       	cpc	r26, r27
    161e:	b0 e8       	ldi	r27, 0x80	; 128
    1620:	09 f0       	breq	.+2      	; 0x1624 <__divsf3_pse+0x56>
    1622:	bb 0b       	sbc	r27, r27
    1624:	80 2d       	mov	r24, r0
    1626:	bf 01       	movw	r22, r30
    1628:	ff 27       	eor	r31, r31
    162a:	93 58       	subi	r25, 0x83	; 131
    162c:	5f 4f       	sbci	r21, 0xFF	; 255
    162e:	3a f0       	brmi	.+14     	; 0x163e <__divsf3_pse+0x70>
    1630:	9e 3f       	cpi	r25, 0xFE	; 254
    1632:	51 05       	cpc	r21, r1
    1634:	78 f0       	brcs	.+30     	; 0x1654 <__divsf3_pse+0x86>
    1636:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__fp_inf>
    163a:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__fp_szero>
    163e:	5f 3f       	cpi	r21, 0xFF	; 255
    1640:	e4 f3       	brlt	.-8      	; 0x163a <__divsf3_pse+0x6c>
    1642:	98 3e       	cpi	r25, 0xE8	; 232
    1644:	d4 f3       	brlt	.-12     	; 0x163a <__divsf3_pse+0x6c>
    1646:	86 95       	lsr	r24
    1648:	77 95       	ror	r23
    164a:	67 95       	ror	r22
    164c:	b7 95       	ror	r27
    164e:	f7 95       	ror	r31
    1650:	9f 5f       	subi	r25, 0xFF	; 255
    1652:	c9 f7       	brne	.-14     	; 0x1646 <__divsf3_pse+0x78>
    1654:	88 0f       	add	r24, r24
    1656:	91 1d       	adc	r25, r1
    1658:	96 95       	lsr	r25
    165a:	87 95       	ror	r24
    165c:	97 f9       	bld	r25, 7
    165e:	08 95       	ret
    1660:	e1 e0       	ldi	r30, 0x01	; 1
    1662:	66 0f       	add	r22, r22
    1664:	77 1f       	adc	r23, r23
    1666:	88 1f       	adc	r24, r24
    1668:	bb 1f       	adc	r27, r27
    166a:	62 17       	cp	r22, r18
    166c:	73 07       	cpc	r23, r19
    166e:	84 07       	cpc	r24, r20
    1670:	ba 07       	cpc	r27, r26
    1672:	20 f0       	brcs	.+8      	; 0x167c <__divsf3_pse+0xae>
    1674:	62 1b       	sub	r22, r18
    1676:	73 0b       	sbc	r23, r19
    1678:	84 0b       	sbc	r24, r20
    167a:	ba 0b       	sbc	r27, r26
    167c:	ee 1f       	adc	r30, r30
    167e:	88 f7       	brcc	.-30     	; 0x1662 <__divsf3_pse+0x94>
    1680:	e0 95       	com	r30
    1682:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000025f6 <__fixunssfsi>:
    25f6:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__fp_splitA>
    25fa:	88 f0       	brcs	.+34     	; 0x261e <__fixunssfsi+0x28>
    25fc:	9f 57       	subi	r25, 0x7F	; 127
    25fe:	98 f0       	brcs	.+38     	; 0x2626 <__fixunssfsi+0x30>
    2600:	b9 2f       	mov	r27, r25
    2602:	99 27       	eor	r25, r25
    2604:	b7 51       	subi	r27, 0x17	; 23
    2606:	b0 f0       	brcs	.+44     	; 0x2634 <__fixunssfsi+0x3e>
    2608:	e1 f0       	breq	.+56     	; 0x2642 <__fixunssfsi+0x4c>
    260a:	66 0f       	add	r22, r22
    260c:	77 1f       	adc	r23, r23
    260e:	88 1f       	adc	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	1a f0       	brmi	.+6      	; 0x261a <__fixunssfsi+0x24>
    2614:	ba 95       	dec	r27
    2616:	c9 f7       	brne	.-14     	; 0x260a <__fixunssfsi+0x14>
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <__fixunssfsi+0x4c>
    261a:	b1 30       	cpi	r27, 0x01	; 1
    261c:	91 f0       	breq	.+36     	; 0x2642 <__fixunssfsi+0x4c>
    261e:	0e 94 af 1c 	call	0x395e	; 0x395e <__fp_zero>
    2622:	b1 e0       	ldi	r27, 0x01	; 1
    2624:	08 95       	ret
    2626:	0c 94 af 1c 	jmp	0x395e	; 0x395e <__fp_zero>
    262a:	67 2f       	mov	r22, r23
    262c:	78 2f       	mov	r23, r24
    262e:	88 27       	eor	r24, r24
    2630:	b8 5f       	subi	r27, 0xF8	; 248
    2632:	39 f0       	breq	.+14     	; 0x2642 <__fixunssfsi+0x4c>
    2634:	b9 3f       	cpi	r27, 0xF9	; 249
    2636:	cc f3       	brlt	.-14     	; 0x262a <__fixunssfsi+0x34>
    2638:	86 95       	lsr	r24
    263a:	77 95       	ror	r23
    263c:	67 95       	ror	r22
    263e:	b3 95       	inc	r27
    2640:	d9 f7       	brne	.-10     	; 0x2638 <__fixunssfsi+0x42>
    2642:	3e f4       	brtc	.+14     	; 0x2652 <__fixunssfsi+0x5c>
    2644:	90 95       	com	r25
    2646:	80 95       	com	r24
    2648:	70 95       	com	r23
    264a:	61 95       	neg	r22
    264c:	7f 4f       	sbci	r23, 0xFF	; 255
    264e:	8f 4f       	sbci	r24, 0xFF	; 255
    2650:	9f 4f       	sbci	r25, 0xFF	; 255
    2652:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000021ba <__floatunsisf>:
    21ba:	e8 94       	clt
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <__floatsisf+0x12>

000021be <__floatsisf>:
    21be:	97 fb       	bst	r25, 7
    21c0:	3e f4       	brtc	.+14     	; 0x21d0 <__floatsisf+0x12>
    21c2:	90 95       	com	r25
    21c4:	80 95       	com	r24
    21c6:	70 95       	com	r23
    21c8:	61 95       	neg	r22
    21ca:	7f 4f       	sbci	r23, 0xFF	; 255
    21cc:	8f 4f       	sbci	r24, 0xFF	; 255
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	99 23       	and	r25, r25
    21d2:	a9 f0       	breq	.+42     	; 0x21fe <__floatsisf+0x40>
    21d4:	f9 2f       	mov	r31, r25
    21d6:	96 e9       	ldi	r25, 0x96	; 150
    21d8:	bb 27       	eor	r27, r27
    21da:	93 95       	inc	r25
    21dc:	f6 95       	lsr	r31
    21de:	87 95       	ror	r24
    21e0:	77 95       	ror	r23
    21e2:	67 95       	ror	r22
    21e4:	b7 95       	ror	r27
    21e6:	f1 11       	cpse	r31, r1
    21e8:	f8 cf       	rjmp	.-16     	; 0x21da <__floatsisf+0x1c>
    21ea:	fa f4       	brpl	.+62     	; 0x222a <__floatsisf+0x6c>
    21ec:	bb 0f       	add	r27, r27
    21ee:	11 f4       	brne	.+4      	; 0x21f4 <__floatsisf+0x36>
    21f0:	60 ff       	sbrs	r22, 0
    21f2:	1b c0       	rjmp	.+54     	; 0x222a <__floatsisf+0x6c>
    21f4:	6f 5f       	subi	r22, 0xFF	; 255
    21f6:	7f 4f       	sbci	r23, 0xFF	; 255
    21f8:	8f 4f       	sbci	r24, 0xFF	; 255
    21fa:	9f 4f       	sbci	r25, 0xFF	; 255
    21fc:	16 c0       	rjmp	.+44     	; 0x222a <__floatsisf+0x6c>
    21fe:	88 23       	and	r24, r24
    2200:	11 f0       	breq	.+4      	; 0x2206 <__floatsisf+0x48>
    2202:	96 e9       	ldi	r25, 0x96	; 150
    2204:	11 c0       	rjmp	.+34     	; 0x2228 <__floatsisf+0x6a>
    2206:	77 23       	and	r23, r23
    2208:	21 f0       	breq	.+8      	; 0x2212 <__floatsisf+0x54>
    220a:	9e e8       	ldi	r25, 0x8E	; 142
    220c:	87 2f       	mov	r24, r23
    220e:	76 2f       	mov	r23, r22
    2210:	05 c0       	rjmp	.+10     	; 0x221c <__floatsisf+0x5e>
    2212:	66 23       	and	r22, r22
    2214:	71 f0       	breq	.+28     	; 0x2232 <__floatsisf+0x74>
    2216:	96 e8       	ldi	r25, 0x86	; 134
    2218:	86 2f       	mov	r24, r22
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	2a f0       	brmi	.+10     	; 0x222a <__floatsisf+0x6c>
    2220:	9a 95       	dec	r25
    2222:	66 0f       	add	r22, r22
    2224:	77 1f       	adc	r23, r23
    2226:	88 1f       	adc	r24, r24
    2228:	da f7       	brpl	.-10     	; 0x2220 <__floatsisf+0x62>
    222a:	88 0f       	add	r24, r24
    222c:	96 95       	lsr	r25
    222e:	87 95       	ror	r24
    2230:	97 f9       	bld	r25, 7
    2232:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000039c0 <__fp_inf>:
    39c0:	97 f9       	bld	r25, 7
    39c2:	9f 67       	ori	r25, 0x7F	; 127
    39c4:	80 e8       	ldi	r24, 0x80	; 128
    39c6:	70 e0       	ldi	r23, 0x00	; 0
    39c8:	60 e0       	ldi	r22, 0x00	; 0
    39ca:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a66 <__fp_nan>:
    3a66:	9f ef       	ldi	r25, 0xFF	; 255
    3a68:	80 ec       	ldi	r24, 0xC0	; 192
    3a6a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003942 <__fp_pscA>:
    3942:	00 24       	eor	r0, r0
    3944:	0a 94       	dec	r0
    3946:	16 16       	cp	r1, r22
    3948:	17 06       	cpc	r1, r23
    394a:	18 06       	cpc	r1, r24
    394c:	09 06       	cpc	r0, r25
    394e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003950 <__fp_pscB>:
    3950:	00 24       	eor	r0, r0
    3952:	0a 94       	dec	r0
    3954:	12 16       	cp	r1, r18
    3956:	13 06       	cpc	r1, r19
    3958:	14 06       	cpc	r1, r20
    395a:	05 06       	cpc	r0, r21
    395c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003564 <__fp_round>:
    3564:	09 2e       	mov	r0, r25
    3566:	03 94       	inc	r0
    3568:	00 0c       	add	r0, r0
    356a:	11 f4       	brne	.+4      	; 0x3570 <__fp_round+0xc>
    356c:	88 23       	and	r24, r24
    356e:	52 f0       	brmi	.+20     	; 0x3584 <__fp_round+0x20>
    3570:	bb 0f       	add	r27, r27
    3572:	40 f4       	brcc	.+16     	; 0x3584 <__fp_round+0x20>
    3574:	bf 2b       	or	r27, r31
    3576:	11 f4       	brne	.+4      	; 0x357c <__fp_round+0x18>
    3578:	60 ff       	sbrs	r22, 0
    357a:	04 c0       	rjmp	.+8      	; 0x3584 <__fp_round+0x20>
    357c:	6f 5f       	subi	r22, 0xFF	; 255
    357e:	7f 4f       	sbci	r23, 0xFF	; 255
    3580:	8f 4f       	sbci	r24, 0xFF	; 255
    3582:	9f 4f       	sbci	r25, 0xFF	; 255
    3584:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d82 <__fp_split3>:
    2d82:	57 fd       	sbrc	r21, 7
    2d84:	90 58       	subi	r25, 0x80	; 128
    2d86:	44 0f       	add	r20, r20
    2d88:	55 1f       	adc	r21, r21
    2d8a:	59 f0       	breq	.+22     	; 0x2da2 <__fp_splitA+0x10>
    2d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    2d8e:	71 f0       	breq	.+28     	; 0x2dac <__fp_splitA+0x1a>
    2d90:	47 95       	ror	r20

00002d92 <__fp_splitA>:
    2d92:	88 0f       	add	r24, r24
    2d94:	97 fb       	bst	r25, 7
    2d96:	99 1f       	adc	r25, r25
    2d98:	61 f0       	breq	.+24     	; 0x2db2 <__fp_splitA+0x20>
    2d9a:	9f 3f       	cpi	r25, 0xFF	; 255
    2d9c:	79 f0       	breq	.+30     	; 0x2dbc <__fp_splitA+0x2a>
    2d9e:	87 95       	ror	r24
    2da0:	08 95       	ret
    2da2:	12 16       	cp	r1, r18
    2da4:	13 06       	cpc	r1, r19
    2da6:	14 06       	cpc	r1, r20
    2da8:	55 1f       	adc	r21, r21
    2daa:	f2 cf       	rjmp	.-28     	; 0x2d90 <__fp_split3+0xe>
    2dac:	46 95       	lsr	r20
    2dae:	f1 df       	rcall	.-30     	; 0x2d92 <__fp_splitA>
    2db0:	08 c0       	rjmp	.+16     	; 0x2dc2 <__fp_splitA+0x30>
    2db2:	16 16       	cp	r1, r22
    2db4:	17 06       	cpc	r1, r23
    2db6:	18 06       	cpc	r1, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	f1 cf       	rjmp	.-30     	; 0x2d9e <__fp_splitA+0xc>
    2dbc:	86 95       	lsr	r24
    2dbe:	71 05       	cpc	r23, r1
    2dc0:	61 05       	cpc	r22, r1
    2dc2:	08 94       	sec
    2dc4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000395e <__fp_zero>:
    395e:	e8 94       	clt

00003960 <__fp_szero>:
    3960:	bb 27       	eor	r27, r27
    3962:	66 27       	eor	r22, r22
    3964:	77 27       	eor	r23, r23
    3966:	cb 01       	movw	r24, r22
    3968:	97 f9       	bld	r25, 7
    396a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a28 <__mulsf3>:
    3a28:	0e 94 ae 0b 	call	0x175c	; 0x175c <__mulsf3x>
    3a2c:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000175c <__mulsf3x>:
    175c:	0f c0       	rjmp	.+30     	; 0x177c <__mulsf3x+0x20>
    175e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__fp_pscA>
    1762:	38 f0       	brcs	.+14     	; 0x1772 <__mulsf3x+0x16>
    1764:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__fp_pscB>
    1768:	20 f0       	brcs	.+8      	; 0x1772 <__mulsf3x+0x16>
    176a:	95 23       	and	r25, r21
    176c:	11 f0       	breq	.+4      	; 0x1772 <__mulsf3x+0x16>
    176e:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__fp_inf>
    1772:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__fp_nan>
    1776:	11 24       	eor	r1, r1
    1778:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__fp_szero>
    177c:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__fp_split3>
    1780:	70 f3       	brcs	.-36     	; 0x175e <__mulsf3x+0x2>

00001782 <__mulsf3_pse>:
    1782:	95 9f       	mul	r25, r21
    1784:	c1 f3       	breq	.-16     	; 0x1776 <__mulsf3x+0x1a>
    1786:	95 0f       	add	r25, r21
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	55 1f       	adc	r21, r21
    178c:	62 9f       	mul	r22, r18
    178e:	f0 01       	movw	r30, r0
    1790:	72 9f       	mul	r23, r18
    1792:	bb 27       	eor	r27, r27
    1794:	f0 0d       	add	r31, r0
    1796:	b1 1d       	adc	r27, r1
    1798:	63 9f       	mul	r22, r19
    179a:	aa 27       	eor	r26, r26
    179c:	f0 0d       	add	r31, r0
    179e:	b1 1d       	adc	r27, r1
    17a0:	aa 1f       	adc	r26, r26
    17a2:	64 9f       	mul	r22, r20
    17a4:	66 27       	eor	r22, r22
    17a6:	b0 0d       	add	r27, r0
    17a8:	a1 1d       	adc	r26, r1
    17aa:	66 1f       	adc	r22, r22
    17ac:	82 9f       	mul	r24, r18
    17ae:	22 27       	eor	r18, r18
    17b0:	b0 0d       	add	r27, r0
    17b2:	a1 1d       	adc	r26, r1
    17b4:	62 1f       	adc	r22, r18
    17b6:	73 9f       	mul	r23, r19
    17b8:	b0 0d       	add	r27, r0
    17ba:	a1 1d       	adc	r26, r1
    17bc:	62 1f       	adc	r22, r18
    17be:	83 9f       	mul	r24, r19
    17c0:	a0 0d       	add	r26, r0
    17c2:	61 1d       	adc	r22, r1
    17c4:	22 1f       	adc	r18, r18
    17c6:	74 9f       	mul	r23, r20
    17c8:	33 27       	eor	r19, r19
    17ca:	a0 0d       	add	r26, r0
    17cc:	61 1d       	adc	r22, r1
    17ce:	23 1f       	adc	r18, r19
    17d0:	84 9f       	mul	r24, r20
    17d2:	60 0d       	add	r22, r0
    17d4:	21 1d       	adc	r18, r1
    17d6:	82 2f       	mov	r24, r18
    17d8:	76 2f       	mov	r23, r22
    17da:	6a 2f       	mov	r22, r26
    17dc:	11 24       	eor	r1, r1
    17de:	9f 57       	subi	r25, 0x7F	; 127
    17e0:	50 40       	sbci	r21, 0x00	; 0
    17e2:	9a f0       	brmi	.+38     	; 0x180a <__mulsf3_pse+0x88>
    17e4:	f1 f0       	breq	.+60     	; 0x1822 <__mulsf3_pse+0xa0>
    17e6:	88 23       	and	r24, r24
    17e8:	4a f0       	brmi	.+18     	; 0x17fc <__mulsf3_pse+0x7a>
    17ea:	ee 0f       	add	r30, r30
    17ec:	ff 1f       	adc	r31, r31
    17ee:	bb 1f       	adc	r27, r27
    17f0:	66 1f       	adc	r22, r22
    17f2:	77 1f       	adc	r23, r23
    17f4:	88 1f       	adc	r24, r24
    17f6:	91 50       	subi	r25, 0x01	; 1
    17f8:	50 40       	sbci	r21, 0x00	; 0
    17fa:	a9 f7       	brne	.-22     	; 0x17e6 <__mulsf3_pse+0x64>
    17fc:	9e 3f       	cpi	r25, 0xFE	; 254
    17fe:	51 05       	cpc	r21, r1
    1800:	80 f0       	brcs	.+32     	; 0x1822 <__mulsf3_pse+0xa0>
    1802:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__fp_inf>
    1806:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__fp_szero>
    180a:	5f 3f       	cpi	r21, 0xFF	; 255
    180c:	e4 f3       	brlt	.-8      	; 0x1806 <__mulsf3_pse+0x84>
    180e:	98 3e       	cpi	r25, 0xE8	; 232
    1810:	d4 f3       	brlt	.-12     	; 0x1806 <__mulsf3_pse+0x84>
    1812:	86 95       	lsr	r24
    1814:	77 95       	ror	r23
    1816:	67 95       	ror	r22
    1818:	b7 95       	ror	r27
    181a:	f7 95       	ror	r31
    181c:	e7 95       	ror	r30
    181e:	9f 5f       	subi	r25, 0xFF	; 255
    1820:	c1 f7       	brne	.-16     	; 0x1812 <__mulsf3_pse+0x90>
    1822:	fe 2b       	or	r31, r30
    1824:	88 0f       	add	r24, r24
    1826:	91 1d       	adc	r25, r1
    1828:	96 95       	lsr	r25
    182a:	87 95       	ror	r24
    182c:	97 f9       	bld	r25, 7
    182e:	08 95       	ret

Disassembly of section .text.libgcc:

000039cc <__tablejump2__>:
    39cc:	ee 0f       	add	r30, r30
    39ce:	ff 1f       	adc	r31, r31
    39d0:	05 90       	lpm	r0, Z+
    39d2:	f4 91       	lpm	r31, Z
    39d4:	e0 2d       	mov	r30, r0
    39d6:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003626 <__umulhisi3>:
    3626:	a2 9f       	mul	r26, r18
    3628:	b0 01       	movw	r22, r0
    362a:	b3 9f       	mul	r27, r19
    362c:	c0 01       	movw	r24, r0
    362e:	a3 9f       	mul	r26, r19
    3630:	70 0d       	add	r23, r0
    3632:	81 1d       	adc	r24, r1
    3634:	11 24       	eor	r1, r1
    3636:	91 1d       	adc	r25, r1
    3638:	b2 9f       	mul	r27, r18
    363a:	70 0d       	add	r23, r0
    363c:	81 1d       	adc	r24, r1
    363e:	11 24       	eor	r1, r1
    3640:	91 1d       	adc	r25, r1
    3642:	08 95       	ret

Disassembly of section .text.libgcc:

00003740 <__movmemx_qi>:
    3740:	99 27       	eor	r25, r25

00003742 <__movmemx_hi>:
    3742:	77 fd       	sbrc	r23, 7
    3744:	05 c0       	rjmp	.+10     	; 0x3750 <__movmemx_hi+0xe>
    3746:	05 90       	lpm	r0, Z+
    3748:	0d 92       	st	X+, r0
    374a:	01 97       	sbiw	r24, 0x01	; 1
    374c:	e1 f7       	brne	.-8      	; 0x3746 <__movmemx_hi+0x4>
    374e:	08 95       	ret
    3750:	01 90       	ld	r0, Z+
    3752:	0d 92       	st	X+, r0
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	e1 f7       	brne	.-8      	; 0x3750 <__movmemx_hi+0xe>
    3758:	08 95       	ret

Disassembly of section .text.avrlibc:

000032a6 <memcpy>:
    32a6:	cf 92       	push	r12
    32a8:	df 92       	push	r13
    32aa:	ef 92       	push	r14
    32ac:	dc 01       	movw	r26, r24
    32ae:	6a 01       	movw	r12, r20
    32b0:	e6 2e       	mov	r14, r22
    32b2:	28 0f       	add	r18, r24
    32b4:	39 1f       	adc	r19, r25
    32b6:	a2 17       	cp	r26, r18
    32b8:	b3 07       	cpc	r27, r19
    32ba:	51 f0       	breq	.+20     	; 0x32d0 <memcpy+0x2a>
    32bc:	f6 01       	movw	r30, r12
    32be:	44 91       	lpm	r20, Z
    32c0:	e7 fc       	sbrc	r14, 7
    32c2:	40 81       	ld	r20, Z
    32c4:	4d 93       	st	X+, r20
    32c6:	4f ef       	ldi	r20, 0xFF	; 255
    32c8:	c4 1a       	sub	r12, r20
    32ca:	d4 0a       	sbc	r13, r20
    32cc:	e4 0a       	sbc	r14, r20
    32ce:	f3 cf       	rjmp	.-26     	; 0x32b6 <memcpy+0x10>
    32d0:	ef 90       	pop	r14
    32d2:	df 90       	pop	r13
    32d4:	cf 90       	pop	r12
    32d6:	08 95       	ret

Disassembly of section .text.avrlibc:

00002e4a <strcmp>:
    2e4a:	cf 92       	push	r12
    2e4c:	df 92       	push	r13
    2e4e:	ef 92       	push	r14
    2e50:	6b 01       	movw	r12, r22
    2e52:	e8 2e       	mov	r14, r24
    2e54:	f6 01       	movw	r30, r12
    2e56:	84 91       	lpm	r24, Z
    2e58:	e7 fc       	sbrc	r14, 7
    2e5a:	80 81       	ld	r24, Z
    2e5c:	f9 01       	movw	r30, r18
    2e5e:	54 91       	lpm	r21, Z
    2e60:	47 fd       	sbrc	r20, 7
    2e62:	50 81       	ld	r21, Z
    2e64:	85 13       	cpse	r24, r21
    2e66:	0b c0       	rjmp	.+22     	; 0x2e7e <strcmp+0x34>
    2e68:	88 23       	and	r24, r24
    2e6a:	41 f0       	breq	.+16     	; 0x2e7c <strcmp+0x32>
    2e6c:	8f ef       	ldi	r24, 0xFF	; 255
    2e6e:	c8 1a       	sub	r12, r24
    2e70:	d8 0a       	sbc	r13, r24
    2e72:	e8 0a       	sbc	r14, r24
    2e74:	2f 5f       	subi	r18, 0xFF	; 255
    2e76:	3f 4f       	sbci	r19, 0xFF	; 255
    2e78:	4f 4f       	sbci	r20, 0xFF	; 255
    2e7a:	ec cf       	rjmp	.-40     	; 0x2e54 <strcmp+0xa>
    2e7c:	58 2f       	mov	r21, r24
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	85 1b       	sub	r24, r21
    2e82:	91 09       	sbc	r25, r1
    2e84:	ef 90       	pop	r14
    2e86:	df 90       	pop	r13
    2e88:	cf 90       	pop	r12
    2e8a:	08 95       	ret

Disassembly of section .text.avrlibc:

0000246a <strncmp>:
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	6b 01       	movw	r12, r22
    2476:	e8 2e       	mov	r14, r24
    2478:	01 15       	cp	r16, r1
    247a:	11 05       	cpc	r17, r1
    247c:	19 f1       	breq	.+70     	; 0x24c4 <strncmp+0x5a>
    247e:	01 50       	subi	r16, 0x01	; 1
    2480:	11 09       	sbc	r17, r1
    2482:	f6 01       	movw	r30, r12
    2484:	84 91       	lpm	r24, Z
    2486:	e7 fc       	sbrc	r14, 7
    2488:	80 81       	ld	r24, Z
    248a:	88 23       	and	r24, r24
    248c:	99 f0       	breq	.+38     	; 0x24b4 <strncmp+0x4a>
    248e:	f9 01       	movw	r30, r18
    2490:	94 91       	lpm	r25, Z
    2492:	47 fd       	sbrc	r20, 7
    2494:	90 81       	ld	r25, Z
    2496:	99 23       	and	r25, r25
    2498:	69 f0       	breq	.+26     	; 0x24b4 <strncmp+0x4a>
    249a:	01 15       	cp	r16, r1
    249c:	11 05       	cpc	r17, r1
    249e:	51 f0       	breq	.+20     	; 0x24b4 <strncmp+0x4a>
    24a0:	89 13       	cpse	r24, r25
    24a2:	08 c0       	rjmp	.+16     	; 0x24b4 <strncmp+0x4a>
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	c8 1a       	sub	r12, r24
    24a8:	d8 0a       	sbc	r13, r24
    24aa:	e8 0a       	sbc	r14, r24
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	4f 4f       	sbci	r20, 0xFF	; 255
    24b2:	e5 cf       	rjmp	.-54     	; 0x247e <strncmp+0x14>
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	f9 01       	movw	r30, r18
    24b8:	24 91       	lpm	r18, Z
    24ba:	47 fd       	sbrc	r20, 7
    24bc:	20 81       	ld	r18, Z
    24be:	82 1b       	sub	r24, r18
    24c0:	91 09       	sbc	r25, r1
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <strncmp+0x5e>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	ef 90       	pop	r14
    24ce:	df 90       	pop	r13
    24d0:	cf 90       	pop	r12
    24d2:	08 95       	ret

Disassembly of section .text.avrlibc:

000033f4 <strlen>:
    33f4:	cf 92       	push	r12
    33f6:	df 92       	push	r13
    33f8:	ef 92       	push	r14
    33fa:	6b 01       	movw	r12, r22
    33fc:	e8 2e       	mov	r14, r24
    33fe:	a8 2f       	mov	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	fc 01       	movw	r30, r24
    3404:	24 91       	lpm	r18, Z
    3406:	a7 fd       	sbrc	r26, 7
    3408:	20 81       	ld	r18, Z
    340a:	22 23       	and	r18, r18
    340c:	19 f0       	breq	.+6      	; 0x3414 <strlen+0x20>
    340e:	01 96       	adiw	r24, 0x01	; 1
    3410:	a1 1d       	adc	r26, r1
    3412:	f7 cf       	rjmp	.-18     	; 0x3402 <strlen+0xe>
    3414:	8c 19       	sub	r24, r12
    3416:	9d 09       	sbc	r25, r13
    3418:	ef 90       	pop	r14
    341a:	df 90       	pop	r13
    341c:	cf 90       	pop	r12
    341e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003644 <strcpy>:
    3644:	9a 01       	movw	r18, r20
    3646:	46 2f       	mov	r20, r22
    3648:	dc 01       	movw	r26, r24
    364a:	f9 01       	movw	r30, r18
    364c:	54 91       	lpm	r21, Z
    364e:	47 fd       	sbrc	r20, 7
    3650:	50 81       	ld	r21, Z
    3652:	5d 93       	st	X+, r21
    3654:	55 23       	and	r21, r21
    3656:	21 f0       	breq	.+8      	; 0x3660 <strcpy+0x1c>
    3658:	2f 5f       	subi	r18, 0xFF	; 255
    365a:	3f 4f       	sbci	r19, 0xFF	; 255
    365c:	4f 4f       	sbci	r20, 0xFF	; 255
    365e:	f5 cf       	rjmp	.-22     	; 0x364a <strcpy+0x6>
    3660:	08 95       	ret

Disassembly of section .text.avrlibc:

00002cf8 <sprintf>:
    2cf8:	af e0       	ldi	r26, 0x0F	; 15
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	e2 e8       	ldi	r30, 0x82	; 130
    2cfe:	f6 e1       	ldi	r31, 0x16	; 22
    2d00:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x1c>
    2d04:	0e 89       	ldd	r16, Y+22	; 0x16
    2d06:	1f 89       	ldd	r17, Y+23	; 0x17
    2d08:	86 e0       	ldi	r24, 0x06	; 6
    2d0a:	8d 83       	std	Y+5, r24	; 0x05
    2d0c:	1a 83       	std	Y+2, r17	; 0x02
    2d0e:	09 83       	std	Y+1, r16	; 0x01
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
    2d12:	9f e7       	ldi	r25, 0x7F	; 127
    2d14:	9f 83       	std	Y+7, r25	; 0x07
    2d16:	8e 83       	std	Y+6, r24	; 0x06
    2d18:	9e 01       	movw	r18, r28
    2d1a:	25 5e       	subi	r18, 0xE5	; 229
    2d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1e:	48 8d       	ldd	r20, Y+24	; 0x18
    2d20:	59 8d       	ldd	r21, Y+25	; 0x19
    2d22:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d24:	ce 01       	movw	r24, r28
    2d26:	01 96       	adiw	r24, 0x01	; 1
    2d28:	0e 94 91 01 	call	0x322	; 0x322 <vfprintf>
    2d2c:	e8 85       	ldd	r30, Y+8	; 0x08
    2d2e:	f9 85       	ldd	r31, Y+9	; 0x09
    2d30:	e0 0f       	add	r30, r16
    2d32:	f1 1f       	adc	r31, r17
    2d34:	10 82       	st	Z, r1
    2d36:	2f 96       	adiw	r28, 0x0f	; 15
    2d38:	e4 e0       	ldi	r30, 0x04	; 4
    2d3a:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000322 <vfprintf>:
 322:	2f 92       	push	r2
 324:	3f 92       	push	r3
 326:	4f 92       	push	r4
 328:	6f 92       	push	r6
 32a:	7f 92       	push	r7
 32c:	8f 92       	push	r8
 32e:	9f 92       	push	r9
 330:	af 92       	push	r10
 332:	bf 92       	push	r11
 334:	cf 92       	push	r12
 336:	df 92       	push	r13
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
 348:	62 97       	sbiw	r28, 0x12	; 18
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	de bf       	out	0x3e, r29	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	cd bf       	out	0x3d, r28	; 61
 354:	6c 01       	movw	r12, r24
 356:	3a 01       	movw	r6, r20
 358:	86 2e       	mov	r8, r22
 35a:	79 01       	movw	r14, r18
 35c:	fc 01       	movw	r30, r24
 35e:	10 86       	std	Z+8, r1	; 0x08
 360:	17 82       	std	Z+7, r1	; 0x07
 362:	84 81       	ldd	r24, Z+4	; 0x04
 364:	81 ff       	sbrs	r24, 1
 366:	e7 c1       	rjmp	.+974    	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 368:	9e 01       	movw	r18, r28
 36a:	2f 5f       	subi	r18, 0xFF	; 255
 36c:	3f 4f       	sbci	r19, 0xFF	; 255
 36e:	3d 87       	std	Y+13, r19	; 0x0d
 370:	2c 87       	std	Y+12, r18	; 0x0c
 372:	c9 01       	movw	r24, r18
 374:	a0 e8       	ldi	r26, 0x80	; 128
 376:	88 8b       	std	Y+16, r24	; 0x10
 378:	99 8b       	std	Y+17, r25	; 0x11
 37a:	aa 8b       	std	Y+18, r26	; 0x12
 37c:	9f e3       	ldi	r25, 0x3F	; 63
 37e:	99 2e       	mov	r9, r25
 380:	f3 01       	movw	r30, r6
 382:	84 91       	lpm	r24, Z
 384:	87 fc       	sbrc	r8, 7
 386:	80 81       	ld	r24, Z
 388:	88 23       	and	r24, r24
 38a:	09 f4       	brne	.+2      	; 0x38e <vfprintf+0x6c>
 38c:	d0 c1       	rjmp	.+928    	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 38e:	48 2d       	mov	r20, r8
 390:	93 01       	movw	r18, r6
 392:	2f 5f       	subi	r18, 0xFF	; 255
 394:	3f 4f       	sbci	r19, 0xFF	; 255
 396:	4f 4f       	sbci	r20, 0xFF	; 255
 398:	85 32       	cpi	r24, 0x25	; 37
 39a:	19 f0       	breq	.+6      	; 0x3a2 <vfprintf+0x80>
 39c:	39 01       	movw	r6, r18
 39e:	84 2e       	mov	r8, r20
 3a0:	0a c0       	rjmp	.+20     	; 0x3b6 <vfprintf+0x94>
 3a2:	f9 01       	movw	r30, r18
 3a4:	84 91       	lpm	r24, Z
 3a6:	47 fd       	sbrc	r20, 7
 3a8:	80 81       	ld	r24, Z
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	69 0e       	add	r6, r25
 3ae:	71 1c       	adc	r7, r1
 3b0:	81 1c       	adc	r8, r1
 3b2:	85 32       	cpi	r24, 0x25	; 37
 3b4:	29 f4       	brne	.+10     	; 0x3c0 <vfprintf+0x9e>
 3b6:	b6 01       	movw	r22, r12
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 1a 11 	call	0x2234	; 0x2234 <fputc>
 3be:	e0 cf       	rjmp	.-64     	; 0x380 <vfprintf+0x5e>
 3c0:	b1 2c       	mov	r11, r1
 3c2:	00 e0       	ldi	r16, 0x00	; 0
 3c4:	10 e0       	ldi	r17, 0x00	; 0
 3c6:	10 32       	cpi	r17, 0x20	; 32
 3c8:	a0 f4       	brcc	.+40     	; 0x3f2 <vfprintf+0xd0>
 3ca:	8b 32       	cpi	r24, 0x2B	; 43
 3cc:	69 f0       	breq	.+26     	; 0x3e8 <vfprintf+0xc6>
 3ce:	30 f4       	brcc	.+12     	; 0x3dc <vfprintf+0xba>
 3d0:	80 32       	cpi	r24, 0x20	; 32
 3d2:	59 f0       	breq	.+22     	; 0x3ea <vfprintf+0xc8>
 3d4:	83 32       	cpi	r24, 0x23	; 35
 3d6:	69 f4       	brne	.+26     	; 0x3f2 <vfprintf+0xd0>
 3d8:	10 61       	ori	r17, 0x10	; 16
 3da:	2c c0       	rjmp	.+88     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3dc:	8d 32       	cpi	r24, 0x2D	; 45
 3de:	39 f0       	breq	.+14     	; 0x3ee <vfprintf+0xcc>
 3e0:	80 33       	cpi	r24, 0x30	; 48
 3e2:	39 f4       	brne	.+14     	; 0x3f2 <vfprintf+0xd0>
 3e4:	11 60       	ori	r17, 0x01	; 1
 3e6:	26 c0       	rjmp	.+76     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3e8:	12 60       	ori	r17, 0x02	; 2
 3ea:	14 60       	ori	r17, 0x04	; 4
 3ec:	23 c0       	rjmp	.+70     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3ee:	18 60       	ori	r17, 0x08	; 8
 3f0:	21 c0       	rjmp	.+66     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3f2:	17 fd       	sbrc	r17, 7
 3f4:	29 c0       	rjmp	.+82     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3f6:	90 ed       	ldi	r25, 0xD0	; 208
 3f8:	98 0f       	add	r25, r24
 3fa:	9a 30       	cpi	r25, 0x0A	; 10
 3fc:	78 f4       	brcc	.+30     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fe:	16 ff       	sbrs	r17, 6
 400:	06 c0       	rjmp	.+12     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 402:	aa e0       	ldi	r26, 0x0A	; 10
 404:	ba 9e       	mul	r11, r26
 406:	90 0d       	add	r25, r0
 408:	11 24       	eor	r1, r1
 40a:	b9 2e       	mov	r11, r25
 40c:	13 c0       	rjmp	.+38     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 40e:	ea e0       	ldi	r30, 0x0A	; 10
 410:	0e 9f       	mul	r16, r30
 412:	90 0d       	add	r25, r0
 414:	11 24       	eor	r1, r1
 416:	09 2f       	mov	r16, r25
 418:	10 62       	ori	r17, 0x20	; 32
 41a:	0c c0       	rjmp	.+24     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 41c:	8e 32       	cpi	r24, 0x2E	; 46
 41e:	21 f4       	brne	.+8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 420:	16 fd       	sbrc	r17, 6
 422:	85 c1       	rjmp	.+778    	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 424:	10 64       	ori	r17, 0x40	; 64
 426:	06 c0       	rjmp	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 428:	8c 36       	cpi	r24, 0x6C	; 108
 42a:	11 f4       	brne	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	10 68       	ori	r17, 0x80	; 128
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	88 36       	cpi	r24, 0x68	; 104
 432:	51 f4       	brne	.+20     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 434:	f3 01       	movw	r30, r6
 436:	84 91       	lpm	r24, Z
 438:	87 fc       	sbrc	r8, 7
 43a:	80 81       	ld	r24, Z
 43c:	ff ef       	ldi	r31, 0xFF	; 255
 43e:	6f 1a       	sub	r6, r31
 440:	7f 0a       	sbc	r7, r31
 442:	8f 0a       	sbc	r8, r31
 444:	81 11       	cpse	r24, r1
 446:	bf cf       	rjmp	.-130    	; 0x3c6 <vfprintf+0xa4>
 448:	98 2f       	mov	r25, r24
 44a:	9f 7d       	andi	r25, 0xDF	; 223
 44c:	95 54       	subi	r25, 0x45	; 69
 44e:	93 30       	cpi	r25, 0x03	; 3
 450:	28 f4       	brcc	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 452:	24 e0       	ldi	r18, 0x04	; 4
 454:	e2 0e       	add	r14, r18
 456:	f1 1c       	adc	r15, r1
 458:	99 82       	std	Y+1, r9	; 0x01
 45a:	0f c0       	rjmp	.+30     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 45c:	83 36       	cpi	r24, 0x63	; 99
 45e:	31 f0       	breq	.+12     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 460:	83 37       	cpi	r24, 0x73	; 115
 462:	91 f0       	breq	.+36     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 464:	83 35       	cpi	r24, 0x53	; 83
 466:	09 f0       	breq	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	63 c0       	rjmp	.+198    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 46a:	27 c0       	rjmp	.+78     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 46c:	f7 01       	movw	r30, r14
 46e:	80 81       	ld	r24, Z
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	97 01       	movw	r18, r14
 474:	2e 5f       	subi	r18, 0xFE	; 254
 476:	3f 4f       	sbci	r19, 0xFF	; 255
 478:	79 01       	movw	r14, r18
 47a:	28 88       	ldd	r2, Y+16	; 0x10
 47c:	39 88       	ldd	r3, Y+17	; 0x11
 47e:	4a 88       	ldd	r4, Y+18	; 0x12
 480:	aa 24       	eor	r10, r10
 482:	a3 94       	inc	r10
 484:	b1 2c       	mov	r11, r1
 486:	17 c0       	rjmp	.+46     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 488:	a7 01       	movw	r20, r14
 48a:	4d 5f       	subi	r20, 0xFD	; 253
 48c:	5f 4f       	sbci	r21, 0xFF	; 255
 48e:	5f 87       	std	Y+15, r21	; 0x0f
 490:	4e 87       	std	Y+14, r20	; 0x0e
 492:	f7 01       	movw	r30, r14
 494:	20 80       	ld	r2, Z
 496:	31 80       	ldd	r3, Z+1	; 0x01
 498:	42 80       	ldd	r4, Z+2	; 0x02
 49a:	16 ff       	sbrs	r17, 6
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 49e:	4b 2d       	mov	r20, r11
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a4:	4f ef       	ldi	r20, 0xFF	; 255
 4a6:	5f ef       	ldi	r21, 0xFF	; 255
 4a8:	84 2d       	mov	r24, r4
 4aa:	b1 01       	movw	r22, r2
 4ac:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <strnlen>
 4b0:	5c 01       	movw	r10, r24
 4b2:	ee 84       	ldd	r14, Y+14	; 0x0e
 4b4:	ff 84       	ldd	r15, Y+15	; 0x0f
 4b6:	1f 77       	andi	r17, 0x7F	; 127
 4b8:	18 c0       	rjmp	.+48     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4ba:	97 01       	movw	r18, r14
 4bc:	2d 5f       	subi	r18, 0xFD	; 253
 4be:	3f 4f       	sbci	r19, 0xFF	; 255
 4c0:	3f 87       	std	Y+15, r19	; 0x0f
 4c2:	2e 87       	std	Y+14, r18	; 0x0e
 4c4:	f7 01       	movw	r30, r14
 4c6:	20 80       	ld	r2, Z
 4c8:	31 80       	ldd	r3, Z+1	; 0x01
 4ca:	42 80       	ldd	r4, Z+2	; 0x02
 4cc:	16 ff       	sbrs	r17, 6
 4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d0:	4b 2d       	mov	r20, r11
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d6:	4f ef       	ldi	r20, 0xFF	; 255
 4d8:	5f ef       	ldi	r21, 0xFF	; 255
 4da:	84 2d       	mov	r24, r4
 4dc:	b1 01       	movw	r22, r2
 4de:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <strnlen>
 4e2:	5c 01       	movw	r10, r24
 4e4:	10 68       	ori	r17, 0x80	; 128
 4e6:	ee 84       	ldd	r14, Y+14	; 0x0e
 4e8:	ff 84       	ldd	r15, Y+15	; 0x0f
 4ea:	13 fd       	sbrc	r17, 3
 4ec:	1d c0       	rjmp	.+58     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 4ee:	80 2f       	mov	r24, r16
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	a8 16       	cp	r10, r24
 4f4:	b9 06       	cpc	r11, r25
 4f6:	c0 f4       	brcc	.+48     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 4f8:	b6 01       	movw	r22, r12
 4fa:	80 e2       	ldi	r24, 0x20	; 32
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 1a 11 	call	0x2234	; 0x2234 <fputc>
 502:	01 50       	subi	r16, 0x01	; 1
 504:	f4 cf       	rjmp	.-24     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 506:	f1 01       	movw	r30, r2
 508:	84 91       	lpm	r24, Z
 50a:	47 fc       	sbrc	r4, 7
 50c:	80 81       	ld	r24, Z
 50e:	ff ef       	ldi	r31, 0xFF	; 255
 510:	2f 1a       	sub	r2, r31
 512:	3f 0a       	sbc	r3, r31
 514:	4f 0a       	sbc	r4, r31
 516:	b6 01       	movw	r22, r12
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 1a 11 	call	0x2234	; 0x2234 <fputc>
 51e:	01 11       	cpse	r16, r1
 520:	01 50       	subi	r16, 0x01	; 1
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	a2 1a       	sub	r10, r18
 526:	b1 08       	sbc	r11, r1
 528:	a1 14       	cp	r10, r1
 52a:	b1 04       	cpc	r11, r1
 52c:	61 f7       	brne	.-40     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 52e:	f5 c0       	rjmp	.+490    	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
 530:	84 36       	cpi	r24, 0x64	; 100
 532:	11 f0       	breq	.+4      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 534:	89 36       	cpi	r24, 0x69	; 105
 536:	71 f5       	brne	.+92     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 538:	f7 01       	movw	r30, r14
 53a:	17 ff       	sbrs	r17, 7
 53c:	08 c0       	rjmp	.+16     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 53e:	60 81       	ld	r22, Z
 540:	71 81       	ldd	r23, Z+1	; 0x01
 542:	82 81       	ldd	r24, Z+2	; 0x02
 544:	93 81       	ldd	r25, Z+3	; 0x03
 546:	97 01       	movw	r18, r14
 548:	2c 5f       	subi	r18, 0xFC	; 252
 54a:	3f 4f       	sbci	r19, 0xFF	; 255
 54c:	09 c0       	rjmp	.+18     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 54e:	60 81       	ld	r22, Z
 550:	71 81       	ldd	r23, Z+1	; 0x01
 552:	07 2e       	mov	r0, r23
 554:	00 0c       	add	r0, r0
 556:	88 0b       	sbc	r24, r24
 558:	99 0b       	sbc	r25, r25
 55a:	97 01       	movw	r18, r14
 55c:	2e 5f       	subi	r18, 0xFE	; 254
 55e:	3f 4f       	sbci	r19, 0xFF	; 255
 560:	79 01       	movw	r14, r18
 562:	1f 76       	andi	r17, 0x6F	; 111
 564:	31 2e       	mov	r3, r17
 566:	97 ff       	sbrs	r25, 7
 568:	0a c0       	rjmp	.+20     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 56a:	90 95       	com	r25
 56c:	80 95       	com	r24
 56e:	70 95       	com	r23
 570:	61 95       	neg	r22
 572:	7f 4f       	sbci	r23, 0xFF	; 255
 574:	8f 4f       	sbci	r24, 0xFF	; 255
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	31 2f       	mov	r19, r17
 57a:	30 68       	ori	r19, 0x80	; 128
 57c:	33 2e       	mov	r3, r19
 57e:	2a e0       	ldi	r18, 0x0A	; 10
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	ae 01       	movw	r20, r28
 584:	4f 5f       	subi	r20, 0xFF	; 255
 586:	5f 4f       	sbci	r21, 0xFF	; 255
 588:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__ultoa_invert>
 58c:	48 2e       	mov	r4, r24
 58e:	4c 85       	ldd	r20, Y+12	; 0x0c
 590:	44 1a       	sub	r4, r20
 592:	4a c0       	rjmp	.+148    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 594:	85 37       	cpi	r24, 0x75	; 117
 596:	29 f4       	brne	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	1f 7e       	andi	r17, 0xEF	; 239
 59a:	a1 2e       	mov	r10, r17
 59c:	2a e0       	ldi	r18, 0x0A	; 10
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	25 c0       	rjmp	.+74     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5a2:	51 2f       	mov	r21, r17
 5a4:	59 7f       	andi	r21, 0xF9	; 249
 5a6:	a5 2e       	mov	r10, r21
 5a8:	8f 36       	cpi	r24, 0x6F	; 111
 5aa:	c1 f0       	breq	.+48     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5ac:	18 f4       	brcc	.+6      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5ae:	88 35       	cpi	r24, 0x58	; 88
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5b2:	bd c0       	rjmp	.+378    	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 5b4:	80 37       	cpi	r24, 0x70	; 112
 5b6:	19 f0       	breq	.+6      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5b8:	88 37       	cpi	r24, 0x78	; 120
 5ba:	21 f0       	breq	.+8      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5bc:	b8 c0       	rjmp	.+368    	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 5be:	85 2f       	mov	r24, r21
 5c0:	80 61       	ori	r24, 0x10	; 16
 5c2:	a8 2e       	mov	r10, r24
 5c4:	a4 fe       	sbrs	r10, 4
 5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5c8:	9a 2d       	mov	r25, r10
 5ca:	94 60       	ori	r25, 0x04	; 4
 5cc:	a9 2e       	mov	r10, r25
 5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5d0:	14 ff       	sbrs	r17, 4
 5d2:	0a c0       	rjmp	.+20     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d4:	a5 2f       	mov	r26, r21
 5d6:	a6 60       	ori	r26, 0x06	; 6
 5d8:	aa 2e       	mov	r10, r26
 5da:	06 c0       	rjmp	.+12     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5dc:	28 e0       	ldi	r18, 0x08	; 8
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	05 c0       	rjmp	.+10     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5e2:	20 e1       	ldi	r18, 0x10	; 16
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5e8:	20 e1       	ldi	r18, 0x10	; 16
 5ea:	32 e0       	ldi	r19, 0x02	; 2
 5ec:	f7 01       	movw	r30, r14
 5ee:	a7 fe       	sbrs	r10, 7
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5f2:	60 81       	ld	r22, Z
 5f4:	71 81       	ldd	r23, Z+1	; 0x01
 5f6:	82 81       	ldd	r24, Z+2	; 0x02
 5f8:	93 81       	ldd	r25, Z+3	; 0x03
 5fa:	a7 01       	movw	r20, r14
 5fc:	4c 5f       	subi	r20, 0xFC	; 252
 5fe:	5f 4f       	sbci	r21, 0xFF	; 255
 600:	07 c0       	rjmp	.+14     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 602:	60 81       	ld	r22, Z
 604:	71 81       	ldd	r23, Z+1	; 0x01
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	a7 01       	movw	r20, r14
 60c:	4e 5f       	subi	r20, 0xFE	; 254
 60e:	5f 4f       	sbci	r21, 0xFF	; 255
 610:	7a 01       	movw	r14, r20
 612:	ae 01       	movw	r20, r28
 614:	4f 5f       	subi	r20, 0xFF	; 255
 616:	5f 4f       	sbci	r21, 0xFF	; 255
 618:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__ultoa_invert>
 61c:	48 2e       	mov	r4, r24
 61e:	5c 85       	ldd	r21, Y+12	; 0x0c
 620:	45 1a       	sub	r4, r21
 622:	8a 2d       	mov	r24, r10
 624:	8f 77       	andi	r24, 0x7F	; 127
 626:	38 2e       	mov	r3, r24
 628:	36 fe       	sbrs	r3, 6
 62a:	0d c0       	rjmp	.+26     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 62c:	93 2d       	mov	r25, r3
 62e:	9e 7f       	andi	r25, 0xFE	; 254
 630:	a9 2e       	mov	r10, r25
 632:	4b 14       	cp	r4, r11
 634:	58 f4       	brcc	.+22     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 636:	34 fe       	sbrs	r3, 4
 638:	0b c0       	rjmp	.+22     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 63a:	32 fc       	sbrc	r3, 2
 63c:	09 c0       	rjmp	.+18     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 63e:	a3 2d       	mov	r26, r3
 640:	ae 7e       	andi	r26, 0xEE	; 238
 642:	aa 2e       	mov	r10, r26
 644:	05 c0       	rjmp	.+10     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 646:	14 2d       	mov	r17, r4
 648:	a3 2c       	mov	r10, r3
 64a:	03 c0       	rjmp	.+6      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64c:	14 2d       	mov	r17, r4
 64e:	01 c0       	rjmp	.+2      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 650:	1b 2d       	mov	r17, r11
 652:	a4 fe       	sbrs	r10, 4
 654:	0e c0       	rjmp	.+28     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 656:	fe 01       	movw	r30, r28
 658:	e4 0d       	add	r30, r4
 65a:	f1 1d       	adc	r31, r1
 65c:	80 81       	ld	r24, Z
 65e:	80 33       	cpi	r24, 0x30	; 48
 660:	21 f4       	brne	.+8      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 662:	ea 2d       	mov	r30, r10
 664:	e9 7e       	andi	r30, 0xE9	; 233
 666:	ae 2e       	mov	r10, r30
 668:	08 c0       	rjmp	.+16     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 66a:	a2 fe       	sbrs	r10, 2
 66c:	05 c0       	rjmp	.+10     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 66e:	1e 5f       	subi	r17, 0xFE	; 254
 670:	04 c0       	rjmp	.+8      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 672:	8a 2d       	mov	r24, r10
 674:	86 78       	andi	r24, 0x86	; 134
 676:	09 f0       	breq	.+2      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 678:	1f 5f       	subi	r17, 0xFF	; 255
 67a:	a3 fc       	sbrc	r10, 3
 67c:	11 c0       	rjmp	.+34     	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 67e:	a0 fe       	sbrs	r10, 0
 680:	06 c0       	rjmp	.+12     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 682:	10 17       	cp	r17, r16
 684:	88 f4       	brcc	.+34     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 686:	04 0d       	add	r16, r4
 688:	b0 2e       	mov	r11, r16
 68a:	b1 1a       	sub	r11, r17
 68c:	0e c0       	rjmp	.+28     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 68e:	10 17       	cp	r17, r16
 690:	60 f4       	brcc	.+24     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 692:	b6 01       	movw	r22, r12
 694:	80 e2       	ldi	r24, 0x20	; 32
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 1a 11 	call	0x2234	; 0x2234 <fputc>
 69c:	1f 5f       	subi	r17, 0xFF	; 255
 69e:	f7 cf       	rjmp	.-18     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 6a0:	10 17       	cp	r17, r16
 6a2:	18 f4       	brcc	.+6      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 6a4:	01 1b       	sub	r16, r17
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 6a8:	b4 2c       	mov	r11, r4
 6aa:	00 e0       	ldi	r16, 0x00	; 0
 6ac:	a4 fe       	sbrs	r10, 4
 6ae:	10 c0       	rjmp	.+32     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6b0:	b6 01       	movw	r22, r12
 6b2:	80 e3       	ldi	r24, 0x30	; 48
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 1a 11 	call	0x2234	; 0x2234 <fputc>
 6ba:	a2 fe       	sbrs	r10, 2
 6bc:	17 c0       	rjmp	.+46     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 6be:	a1 fc       	sbrc	r10, 1
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6c2:	88 e7       	ldi	r24, 0x78	; 120
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 6c8:	88 e5       	ldi	r24, 0x58	; 88
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	b6 01       	movw	r22, r12
 6ce:	0c c0       	rjmp	.+24     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
 6d0:	8a 2d       	mov	r24, r10
 6d2:	86 78       	andi	r24, 0x86	; 134
 6d4:	59 f0       	breq	.+22     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 6d6:	a1 fe       	sbrs	r10, 1
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6da:	8b e2       	ldi	r24, 0x2B	; 43
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6de:	80 e2       	ldi	r24, 0x20	; 32
 6e0:	a7 fc       	sbrc	r10, 7
 6e2:	8d e2       	ldi	r24, 0x2D	; 45
 6e4:	b6 01       	movw	r22, r12
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 1a 11 	call	0x2234	; 0x2234 <fputc>
 6ec:	4b 14       	cp	r4, r11
 6ee:	38 f4       	brcc	.+14     	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
 6f0:	b6 01       	movw	r22, r12
 6f2:	80 e3       	ldi	r24, 0x30	; 48
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 1a 11 	call	0x2234	; 0x2234 <fputc>
 6fa:	ba 94       	dec	r11
 6fc:	f7 cf       	rjmp	.-18     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 6fe:	4a 94       	dec	r4
 700:	e1 e0       	ldi	r30, 0x01	; 1
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	ec 0f       	add	r30, r28
 706:	fd 1f       	adc	r31, r29
 708:	e4 0d       	add	r30, r4
 70a:	f1 1d       	adc	r31, r1
 70c:	80 81       	ld	r24, Z
 70e:	b6 01       	movw	r22, r12
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 1a 11 	call	0x2234	; 0x2234 <fputc>
 716:	41 10       	cpse	r4, r1
 718:	f2 cf       	rjmp	.-28     	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
 71a:	00 23       	and	r16, r16
 71c:	09 f4       	brne	.+2      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 71e:	30 ce       	rjmp	.-928    	; 0x380 <vfprintf+0x5e>
 720:	b6 01       	movw	r22, r12
 722:	80 e2       	ldi	r24, 0x20	; 32
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 1a 11 	call	0x2234	; 0x2234 <fputc>
 72a:	01 50       	subi	r16, 0x01	; 1
 72c:	f6 cf       	rjmp	.-20     	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
 72e:	f6 01       	movw	r30, r12
 730:	87 81       	ldd	r24, Z+7	; 0x07
 732:	90 85       	ldd	r25, Z+8	; 0x08
 734:	02 c0       	rjmp	.+4      	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	9f ef       	ldi	r25, 0xFF	; 255
 73a:	62 96       	adiw	r28, 0x12	; 18
 73c:	0f b6       	in	r0, 0x3f	; 63
 73e:	f8 94       	cli
 740:	de bf       	out	0x3e, r29	; 62
 742:	0f be       	out	0x3f, r0	; 63
 744:	cd bf       	out	0x3d, r28	; 61
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	1f 91       	pop	r17
 74c:	0f 91       	pop	r16
 74e:	ff 90       	pop	r15
 750:	ef 90       	pop	r14
 752:	df 90       	pop	r13
 754:	cf 90       	pop	r12
 756:	bf 90       	pop	r11
 758:	af 90       	pop	r10
 75a:	9f 90       	pop	r9
 75c:	8f 90       	pop	r8
 75e:	7f 90       	pop	r7
 760:	6f 90       	pop	r6
 762:	4f 90       	pop	r4
 764:	3f 90       	pop	r3
 766:	2f 90       	pop	r2
 768:	08 95       	ret

Disassembly of section .text.avrlibc:

000030d6 <strnlen>:
    30d6:	cf 92       	push	r12
    30d8:	df 92       	push	r13
    30da:	ef 92       	push	r14
    30dc:	6b 01       	movw	r12, r22
    30de:	e8 2e       	mov	r14, r24
    30e0:	a8 2f       	mov	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	41 15       	cp	r20, r1
    30e6:	51 05       	cpc	r21, r1
    30e8:	31 f4       	brne	.+12     	; 0x30f6 <strnlen+0x20>
    30ea:	8c 19       	sub	r24, r12
    30ec:	9d 09       	sbc	r25, r13
    30ee:	ef 90       	pop	r14
    30f0:	df 90       	pop	r13
    30f2:	cf 90       	pop	r12
    30f4:	08 95       	ret
    30f6:	fc 01       	movw	r30, r24
    30f8:	24 91       	lpm	r18, Z
    30fa:	a7 fd       	sbrc	r26, 7
    30fc:	20 81       	ld	r18, Z
    30fe:	22 23       	and	r18, r18
    3100:	a1 f3       	breq	.-24     	; 0x30ea <strnlen+0x14>
    3102:	01 96       	adiw	r24, 0x01	; 1
    3104:	a1 1d       	adc	r26, r1
    3106:	41 50       	subi	r20, 0x01	; 1
    3108:	51 09       	sbc	r21, r1
    310a:	ec cf       	rjmp	.-40     	; 0x30e4 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00002234 <fputc>:
    2234:	0f 93       	push	r16
    2236:	1f 93       	push	r17
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	fb 01       	movw	r30, r22
    223e:	24 81       	ldd	r18, Z+4	; 0x04
    2240:	21 fd       	sbrc	r18, 1
    2242:	03 c0       	rjmp	.+6      	; 0x224a <fputc+0x16>
    2244:	8f ef       	ldi	r24, 0xFF	; 255
    2246:	9f ef       	ldi	r25, 0xFF	; 255
    2248:	2c c0       	rjmp	.+88     	; 0x22a2 <fputc+0x6e>
    224a:	22 ff       	sbrs	r18, 2
    224c:	16 c0       	rjmp	.+44     	; 0x227a <fputc+0x46>
    224e:	47 81       	ldd	r20, Z+7	; 0x07
    2250:	50 85       	ldd	r21, Z+8	; 0x08
    2252:	25 81       	ldd	r18, Z+5	; 0x05
    2254:	36 81       	ldd	r19, Z+6	; 0x06
    2256:	42 17       	cp	r20, r18
    2258:	53 07       	cpc	r21, r19
    225a:	44 f4       	brge	.+16     	; 0x226c <fputc+0x38>
    225c:	a0 81       	ld	r26, Z
    225e:	b1 81       	ldd	r27, Z+1	; 0x01
    2260:	9d 01       	movw	r18, r26
    2262:	2f 5f       	subi	r18, 0xFF	; 255
    2264:	3f 4f       	sbci	r19, 0xFF	; 255
    2266:	31 83       	std	Z+1, r19	; 0x01
    2268:	20 83       	st	Z, r18
    226a:	8c 93       	st	X, r24
    226c:	27 81       	ldd	r18, Z+7	; 0x07
    226e:	30 85       	ldd	r19, Z+8	; 0x08
    2270:	2f 5f       	subi	r18, 0xFF	; 255
    2272:	3f 4f       	sbci	r19, 0xFF	; 255
    2274:	30 87       	std	Z+8, r19	; 0x08
    2276:	27 83       	std	Z+7, r18	; 0x07
    2278:	14 c0       	rjmp	.+40     	; 0x22a2 <fputc+0x6e>
    227a:	8b 01       	movw	r16, r22
    227c:	ec 01       	movw	r28, r24
    227e:	fb 01       	movw	r30, r22
    2280:	01 84       	ldd	r0, Z+9	; 0x09
    2282:	f2 85       	ldd	r31, Z+10	; 0x0a
    2284:	e0 2d       	mov	r30, r0
    2286:	09 95       	icall
    2288:	89 2b       	or	r24, r25
    228a:	e1 f6       	brne	.-72     	; 0x2244 <fputc+0x10>
    228c:	d8 01       	movw	r26, r16
    228e:	17 96       	adiw	r26, 0x07	; 7
    2290:	8d 91       	ld	r24, X+
    2292:	9c 91       	ld	r25, X
    2294:	18 97       	sbiw	r26, 0x08	; 8
    2296:	01 96       	adiw	r24, 0x01	; 1
    2298:	18 96       	adiw	r26, 0x08	; 8
    229a:	9c 93       	st	X, r25
    229c:	8e 93       	st	-X, r24
    229e:	17 97       	sbiw	r26, 0x07	; 7
    22a0:	ce 01       	movw	r24, r28
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	1f 91       	pop	r17
    22a8:	0f 91       	pop	r16
    22aa:	08 95       	ret

Disassembly of section .text.avrlibc:

00001a90 <__ultoa_invert>:
    1a90:	fa 01       	movw	r30, r20
    1a92:	aa 27       	eor	r26, r26
    1a94:	28 30       	cpi	r18, 0x08	; 8
    1a96:	51 f1       	breq	.+84     	; 0x1aec <__ultoa_invert+0x5c>
    1a98:	20 31       	cpi	r18, 0x10	; 16
    1a9a:	81 f1       	breq	.+96     	; 0x1afc <__ultoa_invert+0x6c>
    1a9c:	e8 94       	clt
    1a9e:	6f 93       	push	r22
    1aa0:	6e 7f       	andi	r22, 0xFE	; 254
    1aa2:	6e 5f       	subi	r22, 0xFE	; 254
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aaa:	af 4f       	sbci	r26, 0xFF	; 255
    1aac:	b1 e0       	ldi	r27, 0x01	; 1
    1aae:	3e d0       	rcall	.+124    	; 0x1b2c <__ultoa_invert+0x9c>
    1ab0:	b4 e0       	ldi	r27, 0x04	; 4
    1ab2:	3c d0       	rcall	.+120    	; 0x1b2c <__ultoa_invert+0x9c>
    1ab4:	67 0f       	add	r22, r23
    1ab6:	78 1f       	adc	r23, r24
    1ab8:	89 1f       	adc	r24, r25
    1aba:	9a 1f       	adc	r25, r26
    1abc:	a1 1d       	adc	r26, r1
    1abe:	68 0f       	add	r22, r24
    1ac0:	79 1f       	adc	r23, r25
    1ac2:	8a 1f       	adc	r24, r26
    1ac4:	91 1d       	adc	r25, r1
    1ac6:	a1 1d       	adc	r26, r1
    1ac8:	6a 0f       	add	r22, r26
    1aca:	71 1d       	adc	r23, r1
    1acc:	81 1d       	adc	r24, r1
    1ace:	91 1d       	adc	r25, r1
    1ad0:	a1 1d       	adc	r26, r1
    1ad2:	20 d0       	rcall	.+64     	; 0x1b14 <__ultoa_invert+0x84>
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <__ultoa_invert+0x48>
    1ad6:	68 94       	set
    1ad8:	3f 91       	pop	r19
    1ada:	2a e0       	ldi	r18, 0x0A	; 10
    1adc:	26 9f       	mul	r18, r22
    1ade:	11 24       	eor	r1, r1
    1ae0:	30 19       	sub	r19, r0
    1ae2:	30 5d       	subi	r19, 0xD0	; 208
    1ae4:	31 93       	st	Z+, r19
    1ae6:	de f6       	brtc	.-74     	; 0x1a9e <__ultoa_invert+0xe>
    1ae8:	cf 01       	movw	r24, r30
    1aea:	08 95       	ret
    1aec:	46 2f       	mov	r20, r22
    1aee:	47 70       	andi	r20, 0x07	; 7
    1af0:	40 5d       	subi	r20, 0xD0	; 208
    1af2:	41 93       	st	Z+, r20
    1af4:	b3 e0       	ldi	r27, 0x03	; 3
    1af6:	0f d0       	rcall	.+30     	; 0x1b16 <__ultoa_invert+0x86>
    1af8:	c9 f7       	brne	.-14     	; 0x1aec <__ultoa_invert+0x5c>
    1afa:	f6 cf       	rjmp	.-20     	; 0x1ae8 <__ultoa_invert+0x58>
    1afc:	46 2f       	mov	r20, r22
    1afe:	4f 70       	andi	r20, 0x0F	; 15
    1b00:	40 5d       	subi	r20, 0xD0	; 208
    1b02:	4a 33       	cpi	r20, 0x3A	; 58
    1b04:	18 f0       	brcs	.+6      	; 0x1b0c <__ultoa_invert+0x7c>
    1b06:	49 5d       	subi	r20, 0xD9	; 217
    1b08:	31 fd       	sbrc	r19, 1
    1b0a:	40 52       	subi	r20, 0x20	; 32
    1b0c:	41 93       	st	Z+, r20
    1b0e:	02 d0       	rcall	.+4      	; 0x1b14 <__ultoa_invert+0x84>
    1b10:	a9 f7       	brne	.-22     	; 0x1afc <__ultoa_invert+0x6c>
    1b12:	ea cf       	rjmp	.-44     	; 0x1ae8 <__ultoa_invert+0x58>
    1b14:	b4 e0       	ldi	r27, 0x04	; 4
    1b16:	a6 95       	lsr	r26
    1b18:	97 95       	ror	r25
    1b1a:	87 95       	ror	r24
    1b1c:	77 95       	ror	r23
    1b1e:	67 95       	ror	r22
    1b20:	ba 95       	dec	r27
    1b22:	c9 f7       	brne	.-14     	; 0x1b16 <__ultoa_invert+0x86>
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	61 05       	cpc	r22, r1
    1b28:	71 05       	cpc	r23, r1
    1b2a:	08 95       	ret
    1b2c:	9b 01       	movw	r18, r22
    1b2e:	ac 01       	movw	r20, r24
    1b30:	0a 2e       	mov	r0, r26
    1b32:	06 94       	lsr	r0
    1b34:	57 95       	ror	r21
    1b36:	47 95       	ror	r20
    1b38:	37 95       	ror	r19
    1b3a:	27 95       	ror	r18
    1b3c:	ba 95       	dec	r27
    1b3e:	c9 f7       	brne	.-14     	; 0x1b32 <__ultoa_invert+0xa2>
    1b40:	62 0f       	add	r22, r18
    1b42:	73 1f       	adc	r23, r19
    1b44:	84 1f       	adc	r24, r20
    1b46:	95 1f       	adc	r25, r21
    1b48:	a0 1d       	adc	r26, r0
    1b4a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00003032 <__prologue_saves__>:
    3032:	2f 92       	push	r2
    3034:	3f 92       	push	r3
    3036:	4f 92       	push	r4
    3038:	5f 92       	push	r5
    303a:	6f 92       	push	r6
    303c:	7f 92       	push	r7
    303e:	8f 92       	push	r8
    3040:	9f 92       	push	r9
    3042:	af 92       	push	r10
    3044:	bf 92       	push	r11
    3046:	cf 92       	push	r12
    3048:	df 92       	push	r13
    304a:	ef 92       	push	r14
    304c:	ff 92       	push	r15
    304e:	0f 93       	push	r16
    3050:	1f 93       	push	r17
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	ca 1b       	sub	r28, r26
    305c:	db 0b       	sbc	r29, r27
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

0000310c <__epilogue_restores__>:
    310c:	2a 88       	ldd	r2, Y+18	; 0x12
    310e:	39 88       	ldd	r3, Y+17	; 0x11
    3110:	48 88       	ldd	r4, Y+16	; 0x10
    3112:	5f 84       	ldd	r5, Y+15	; 0x0f
    3114:	6e 84       	ldd	r6, Y+14	; 0x0e
    3116:	7d 84       	ldd	r7, Y+13	; 0x0d
    3118:	8c 84       	ldd	r8, Y+12	; 0x0c
    311a:	9b 84       	ldd	r9, Y+11	; 0x0b
    311c:	aa 84       	ldd	r10, Y+10	; 0x0a
    311e:	b9 84       	ldd	r11, Y+9	; 0x09
    3120:	c8 84       	ldd	r12, Y+8	; 0x08
    3122:	df 80       	ldd	r13, Y+7	; 0x07
    3124:	ee 80       	ldd	r14, Y+6	; 0x06
    3126:	fd 80       	ldd	r15, Y+5	; 0x05
    3128:	0c 81       	ldd	r16, Y+4	; 0x04
    312a:	1b 81       	ldd	r17, Y+3	; 0x03
    312c:	aa 81       	ldd	r26, Y+2	; 0x02
    312e:	b9 81       	ldd	r27, Y+1	; 0x01
    3130:	ce 0f       	add	r28, r30
    3132:	d1 1d       	adc	r29, r1
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	ed 01       	movw	r28, r26
    3140:	08 95       	ret
