
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000738c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006d8  00800100  00800100  0000738c  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  0000738c  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  000073e7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000c40  00000000  00000000  00007458  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001335c  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000352e  00000000  00000000  0001b3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000710a  00000000  00000000  0001e922  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002074  00000000  00000000  00025a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000161f  00000000  00000000  00027aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007bbb  00000000  00000000  000290bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a28  00000000  00000000  00030c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000723a  0000723a  0000736e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000316a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00006f10  00006f10  00007044  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00006d62  00006d62  00006e96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00006f1e  00006f1e  00007052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00006d76  00006d76  00006eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00006f2c  00006f2c  00007060  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00006d8a  00006d8a  00006ebe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  00006f3a  00006f3a  0000706e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  00006d9e  00006d9e  00006ed2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  00006f48  00006f48  0000707c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  00006db2  00006db2  00006ee6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  00007188  00007188  000072bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 0000003c  00006066  00006066  0000619a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  00006dc6  00006dc6  00006efa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  00007190  00007190  000072c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  00007198  00007198  000072cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  000071a0  000071a0  000072d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  00006f56  00006f56  0000708a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  00007110  00007110  00007244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000022  00006982  00006982  00006ab6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  000071f8  000071f8  0000732c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  0000723e  0000723e  00007372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  000057e6  000057e6  0000591a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800ebb  00800ebb  0000738c  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000036  0000631c  0000631c  00006450  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  00007044  00007044  00007178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  00007050  00007050  00007184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  00005834  00005834  00005968  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800ebd  00800ebd  0000738c  2**0
                  ALLOC
 43 .text.clear_callbacks 00000020  00006a2c  00006a2c  00006b60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.start_timer 00000008  000071a8  000071a8  000072dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.stop_timer 00000006  000071fe  000071fe  00007332  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_init 00000020  00006a4c  00006a4c  00006b80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_kill 0000000a  0000711a  0000711a  0000724e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TC2_HAL_subscribe 00000054  0000564c  0000564c  00005780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TC2_HAL_cancel 0000003a  0000611a  0000611a  0000624e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_9 0000007c  000048b8  000048b8  000049ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .bss.cnt      00000001  00800edd  00800edd  0000738c  2**0
                  ALLOC
 52 .bss.cbCounter 00000001  00800ede  00800ede  0000738c  2**0
                  ALLOC
 53 .bss.callbacks 0000000a  00800e78  00800e78  0000738c  2**0
                  ALLOC
 54 .text.start_and_write_data 0000004c  0000596c  0000596c  00005aa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.read_and_stop 0000005a  0000543c  0000543c  00005570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_write_data 00000014  00006dda  00006dda  00006f0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_write_data_stop 0000001a  00006c2a  00006c2a  00006d5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_API_read_data_ack_end_nack_stop 00000032  000064c6  000064c6  000065fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_API_repeat_read_data_stop 00000030  000065c0  000065c0  000066f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_init 00000012  00006e3e  00006e3e  00006f72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_start 00000048  00005c14  00005c14  00005d48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_repeated_start 00000042  00005f60  00005f60  00006094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_write_byte 00000020  00006a6c  00006a6c  00006ba0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_read_byte_ack 00000014  00006dee  00006dee  00006f22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.TWI_HAL_read_byte_nack 00000014  00006e02  00006e02  00006f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.TWI_HAL_stop 00000010  00006ee0  00006ee0  00007014  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.copy_buffer 0000002e  00006770  00006770  000068a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_init 0000003c  000060a2  000060a2  000061d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_send_message 0000004e  00005882  00005882  000059b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_send_string 0000007e  0000483a  0000483a  0000496e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_message_ready 0000000e  00006f64  00006f64  00007098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_clear_rx_buffer 0000000a  00007124  00007124  00007258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart0_hal_read_message_as_str 00000028  00006850  00006850  00006984  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uart0_hal_send_break 00000046  00005d7c  00005d7c  00005eb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_22 0000006e  00004e48  00004e48  00004f7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_20 00000074  00004c80  00004c80  00004db4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800edf  00800edf  0000738c  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800ee0  00800ee0  0000738c  2**0
                  ALLOC
 79 .bss.tx_buffer_cursor 00000002  00800ebf  00800ebf  0000738c  2**0
                  ALLOC
 80 .bss.tx_buffer_data_len 00000002  00800ec1  00800ec1  0000738c  2**0
                  ALLOC
 81 .text.copy_buffer 0000002e  0000679e  0000679e  000068d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.uart1_hal_init 0000003c  000060de  000060de  00006212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.uart1_hal_send_string 00000096  0000443c  0000443c  00004570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.uart1_hal_message_ready 0000000e  00006f72  00006f72  000070a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.uart1_hal_rx_full 0000000e  00006f80  00006f80  000070b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.uart1_hal_clear_rx_buffer 0000000a  0000712e  0000712e  00007262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.uart1_hal_read_message_as_str 00000028  00006878  00006878  000069ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 0000006e  00004eb6  00004eb6  00004fea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_28 00000074  00004cf4  00004cf4  00004e28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .bss.rx_buffer_has_message 00000001  00800ee1  00800ee1  0000738c  2**0
                  ALLOC
 91 .bss.rx_buffer_data_len 00000001  00800ee2  00800ee2  0000738c  2**0
                  ALLOC
 92 .bss.rx_buffer 0000004b  00800d8b  00800d8b  0000738c  2**0
                  ALLOC
 93 .bss.tx_buffer_cursor 00000002  00800ec3  00800ec3  0000738c  2**0
                  ALLOC
 94 .bss.tx_buffer_data_len 00000002  00800ec5  00800ec5  0000738c  2**0
                  ALLOC
 95 .bss.tx_buffer 0000012c  008007d8  008007d8  0000738c  2**0
                  ALLOC
 96 .text.UI_HAL_jumper_init 0000000e  00006f8e  00006f8e  000070c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.UI_HAL_is_config_mode 0000000a  00007138  00007138  0000726c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.main    0000003a  00006154  00006154  00006288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.calc_ppm_methane 00000096  000044d2  000044d2  00004606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vect_ADC_heat_timeout 00000018  00006cac  00006cac  00006de0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.ADC_init_sampling 00000066  000051a0  000051a0  000052d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.ADC_deinit_sampling 00000014  00006e16  00006e16  00006f4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ADC_is_sampling_done 0000001c  00006b9e  00006b9e  00006cd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.ADC_get_value 00000056  000055a0  000055a0  000056d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.vect_ADC_do_sample 00000046  00005dc2  00005dc2  00005ef6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.ADC_start_sampling 0000000a  00007142  00007142  00007276  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ADC_meth_sens_power_on 0000001e  00006acc  00006acc  00006c00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.ADC_meth_sens_power_off 00000008  000071b0  000071b0  000072e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.ADC_meth_sens_ready 00000012  00006e50  00006e50  00006f84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADC_set_conf_parameters 00000042  00005fa2  00005fa2  000060d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.cntPowerUpTime 00000001  00800ee3  00800ee3  0000738c  2**0
                  ALLOC
112 .bss._powerUpTime 00000001  00800ee4  00800ee4  0000738c  2**0
                  ALLOC
113 .bss.cntSamples 00000002  00800ec7  00800ec7  0000738c  2**0
                  ALLOC
114 .bss._data    00000002  00800ec9  00800ec9  0000738c  2**0
                  ALLOC
115 .bss._nSamples 00000002  00800ecb  00800ecb  0000738c  2**0
                  ALLOC
116 .data.PPM_factor 00000004  00800e9f  00007247  0000737b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
117 .data.RRL     00000004  00800ea3  0000724b  0000737f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
118 .data.Vc      00000004  00800ea7  0000724f  00007383  2**0
                  CONTENTS, ALLOC, LOAD, DATA
119 .text.EM_has_deveui 00000016  00006cf4  00006cf4  00006e28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_has_appeui 00000016  00006d0a  00006d0a  00006e3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_has_appkey 00000016  00006d20  00006d20  00006e54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_set_deveui 0000003a  0000618e  0000618e  000062c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.EM_get_deveui 00000030  000065f0  000065f0  00006724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.EM_set_appeui 0000003a  000061c8  000061c8  000062fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.EM_get_appeui 00000030  00006620  00006620  00006754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.EM_set_appkey 0000003a  00006202  00006202  00006336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.EM_get_appkey 00000030  00006650  00006650  00006784  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.EM_set_ppmfactor 0000000e  00006f9c  00006f9c  000070d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.EM_get_ppmfactor 0000001e  00006aea  00006aea  00006c1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.EM_set_RRL 0000000e  00006faa  00006faa  000070de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.EM_get_RRL 0000001e  00006b08  00006b08  00006c3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.EM_set_Vcc 0000000e  00006fb8  00006fb8  000070ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.EM_get_Vcc 0000001e  00006b26  00006b26  00006c5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.EM_set_collections 0000000e  00006fc6  00006fc6  000070fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.EM_get_collections 00000010  00006ef0  00006ef0  00007024  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.EM_set_heat_up_time 0000000c  0000705c  0000705c  00007190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.EM_get_heat_up_time 0000000c  00007068  00007068  0000719c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.EM_set_air_pump_time 0000000c  00007074  00007074  000071a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.EM_get_air_pump_time 0000000c  00007080  00007080  000071b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.EM_set_sp_interval 0000000c  0000708c  0000708c  000071c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.EM_get_sp_interval 0000000c  00007098  00007098  000071cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.EM_set_group_id 0000000c  000070a4  000070a4  000071d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.EM_get_group_id 0000000c  000070b0  000070b0  000071e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.cb_blink 00000006  00007204  00007204  00007338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.blink   0000004c  000059b8  000059b8  00005aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.err_code 00000038  0000623c  0000623c  00006370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.LED_start_try_join 0000000e  00006fd4  00006fd4  00007108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.LED_stop_try_join 00000010  00006f00  00006f00  00007034  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.LED_join_success 00000040  00006026  00006026  0000615a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.LED_join_denied 00000008  000071b8  000071b8  000072ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.LED_conf_err 00000008  000071c0  000071c0  000072f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.LED_fatal_err 00000008  000071c8  000071c8  000072fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .bss.cbPointer 00000001  00800ee5  00800ee5  0000738c  2**0
                  ALLOC
154 .progmemx.data 00000058  00000919  00000919  00000a4d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
155 .text.parse_err 00000058  000054f0  000054f0  00005624  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.JN_join_network 000002a4  00001a3a  00001a3a  00001b6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.set_block_uplink 00000018  00006cc4  00006cc4  00006df8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.cb_block_uplink 0000001c  00006bba  00006bba  00006cee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.LM_join_network 00000006  0000720a  0000720a  0000733e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.LM_send_uplink 0000002e  000067cc  000067cc  00006900  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.LM_put_to_sleep 00000012  00006e62  00006e62  00006f96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.LM_wake_up 00000006  00007210  00007210  00007344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.LM_is_free 0000000a  0000714c  0000714c  00007280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.LM_reset_module 00000006  00007216  00007216  0000734a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.LM_forward_msg 00000006  0000721c  0000721c  00007350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.LM_send_break 00000006  00007222  00007222  00007356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.subPointer 00000001  00800ee6  00800ee6  0000738c  2**0
                  ALLOC
168 .bss.busy     00000001  00800ee7  00800ee7  0000738c  2**0
                  ALLOC
169 .bss.cnt      00000001  00800ee8  00800ee8  0000738c  2**0
                  ALLOC
170 .progmemx.data 00000073  000008a6  000008a6  000009da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
171 .text.tohex   0000007a  00004934  00004934  00004a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.attach_ending 0000001c  00006bd6  00006bd6  00006d0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.cmd_with_ending 00000032  000064f8  000064f8  0000662c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.sys_sleep_cmd 0000005e  0000526a  0000526a  0000539e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.mac_set_parameter 0000004e  000058d0  000058d0  00005a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.mac_set_deveui 00000048  00005c5c  00005c5c  00005d90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.mac_set_appeui 00000048  00005ca4  00005ca4  00005dd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.mac_set_appkey 00000048  00005cec  00005cec  00005e20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.mac_set_ADR 00000030  00006680  00006680  000067b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.mac_tx_confirmed 000000aa  0000419a  0000419a  000042ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data 00000038  00000971  00000971  00000aa5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.decode_tx_response 00000068  00005068  00005068  0000519c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SU_send_uplink 000000f8  00003734  00003734  00003868  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.cb_counter 00000014  00006e2a  00006e2a  00006f5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.SC_put_to_sleep 00000038  00006274  00006274  000063a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .progmemx.data 00000003  000009ce  000009ce  00000b02  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
187 .text.SC_wake_up 0000006e  00004f24  00004f24  00005058  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .bss.eventPointer 00000001  00800ee9  00800ee9  0000738c  2**0
                  ALLOC
189 .bss.cnt      00000002  00800ecd  00800ecd  0000738c  2**0
                  ALLOC
190 .text.cb_watchdog_counter 0000000c  000070bc  000070bc  000071f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.util_set_pending_states 0000000c  000070c8  000070c8  000071fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.util_set_match_case 0000000c  000070d4  000070d4  00007208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.util_str_begins_with 0000004a  00005b80  00005b80  00005cb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.util_match_message 0000005c  00005384  00005384  000054b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .progmemx.data 00000013  000009a9  000009a9  00000add  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
196 .text.util_reset_module 00000046  00005e08  00005e08  00005f3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.util_lora_forward_msg 00000078  00004a28  00004a28  00004b5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.util_send_break 00000008  000071d0  000071d0  00007304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .bss.wd_cb_pointer 00000001  00800eea  00800eea  0000738c  2**0
                  ALLOC
200 .bss.wd_cnt   00000001  00800eeb  00800eeb  0000738c  2**0
                  ALLOC
201 .text.MRPP_init_group 0000001a  00006c44  00006c44  00006d78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.MRPP_add_collection_data_INT16 00000070  00004d68  00004d68  00004e9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.MRPP_is_body_package_ready 00000022  000069a4  000069a4  00006ad8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.MRPP_get_ready_body_package 00000096  00004568  00004568  0000469c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.MRPP_set_body_sent 0000000c  000070e0  000070e0  00007214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.MRPP_get_header_package 00000022  000069c6  000069c6  00006afa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.MRPP_get_tail_package 00000022  000069e8  000069e8  00006b1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.MRPP_all_body_package_sent 0000000a  00007156  00007156  0000728a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.MRPP_validate_collections_space 00000064  00005206  00005206  0000533a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .bss.state    000000b3  00800c24  00800c24  0000738c  2**0
                  ALLOC
211 .text.mrpp_data_add_int16 0000008e  00004726  00004726  0000485a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.mrpp_data_get 00000030  000066b0  000066b0  000067e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.add_data_types 000000aa  00004244  00004244  00004378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.update_bodies 00000162  000027c2  000027c2  000028f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.mrpp_state_init 00000174  00002214  00002214  00002348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.mrpp_state_get_header 000000aa  000042ee  000042ee  00004422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.mrpp_state_get_tail 000000ac  000040ee  000040ee  00004222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.mrpp_state_set_collection 00000086  000047b4  000047b4  000048e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.mrpp_state_is_body_ready 00000030  000066e0  000066e0  00006814  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.mrpp_state_all_bodies_sent 0000002a  00006826  00006826  0000695a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.mrpp_state_get_ready_body 000000f0  0000382c  0000382c  00003960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.mrpp_state_set_body_sent 00000020  00006a8c  00006a8c  00006bc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.mrpp_state_get_collection_address 00000036  00006352  00006352  00006486  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.cb_cnt_time 00000030  00006710  00006710  00006844  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.PUMP_start 00000024  00006916  00006916  00006a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.PUMP_is_done 0000001c  00006bf2  00006bf2  00006d26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .bss.eventPointer 00000001  00800eec  00800eec  0000738c  2**0
                  ALLOC
228 .bss.cnt      00000002  00800ecf  00800ecf  0000738c  2**0
                  ALLOC
229 .bss._seconds 00000002  00800ed1  00800ed1  0000738c  2**0
                  ALLOC
230 .text.datetime_to_BCD 00000100  00003536  00003536  0000366a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.RTC_set_clock_out 00000050  00005746  00005746  0000587a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.RTC_get_current_time 00000140  00002d1a  00002d1a  00002e4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.RTC_set_current_time 00000068  000050d0  000050d0  00005204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .rodata       00000005  00800e9a  00007242  00007376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
235 .text.RTC_set_wake_up_interrupt 000000c2  00003d48  00003d48  00003e7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.RTC_clear_wake_up_interrupt 00000034  0000642a  0000642a  0000655e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.RTC_datetime_to_ts 00000122  000031e6  000031e6  0000331a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000009d3  000009d3  00000b07  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
239 .text.clear_sampling_data 0000004a  00005bca  00005bca  00005cfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.bytes_2_uint 00000068  00005138  00005138  0000526c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.init_measurement 00000038  000062ac  000062ac  000063e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.validate_data 00000032  0000652a  0000652a  0000665e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.SCD30_sensor_on 00000026  000068f0  000068f0  00006a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.SCD30_sensor_off 00000008  000071d8  000071d8  0000730c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.SCD30_init_c02_sampling 00000012  00006e74  00006e74  00006fa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.SCD30_init_temp_sampling 00000012  00006e86  00006e86  00006fba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.SCD30_init_humidity_sampling 00000012  00006e98  00006e98  00006fcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.SCD30_deinit_sampling 0000000a  00007160  00007160  00007294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.SCD30_is_sampling_done 00000034  0000645e  0000645e  00006592  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .text.SCD30_calc_validate_SI 000000c6  00003c82  00003c82  00003db6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
251 .text.read_all_values 00000116  00003420  00003420  00003554  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 .text.vect_SCD_do_sample 0000014c  00002bce  00002bce  00002d02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
253 .text.SCD30_start_sampling 0000005e  000052c8  000052c8  000053fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
254 .text.SCD30_get_reading 00000032  0000655c  0000655c  00006690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
255 .bss.si_counter 00000002  00800ed3  00800ed3  0000738c  2**0
                  ALLOC
256 .bss.highest_si 00000002  00800ed5  00800ed5  0000738c  2**0
                  ALLOC
257 .bss.lowest_si 00000002  00800ed7  00800ed7  0000738c  2**0
                  ALLOC
258 .bss.hum_pars 00000006  00800e82  00800e82  0000738c  2**0
                  ALLOC
259 .bss.temp_pars 00000006  00800e88  00800e88  0000738c  2**0
                  ALLOC
260 .bss.co2_pars 00000006  00800e8e  00800e8e  0000738c  2**0
                  ALLOC
261 .progmemx.data.READ_DATA_CMD 00000002  000009d1  000009d1  00000b05  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
262 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000009c4  000009c4  00000af8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
263 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000009c9  000009c9  00000afd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
264 .text.parse_cmd 00000030  00006740  00006740  00006874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.validate_cmd 00000056  000055f6  000055f6  0000572a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .progmemx.data 000000ac  00000779  00000779  000008ad  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
267 .text.CONF_enter 0000013c  00002e5a  00002e5a  00002f8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .progmemx.data 00000081  00000825  00000825  00000959  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
269 .text.CON_RN2483_parse 0000006c  00004f92  00004f92  000050c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.CON_RN2483 00000166  0000265c  0000265c  00002790  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.CONNECT 00000054  000056a0  000056a0  000057d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .progmemx.data 00000225  00000264  00000264  00000398  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
273 .text.read_cols 000000bc  00003e0a  00003e0a  00003f3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .text.read_time 00000092  00004694  00004694  000047c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.read_validate_SI 0000012a  00002f96  00002f96  000030ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.write_deveui 00000078  00004aa0  00004aa0  00004bd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.write_appeui 00000078  00004b18  00004b18  00004c4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.write_appkey 00000078  00004b90  00004b90  00004cc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.write_PPM_factor 0000004c  00005a04  00005a04  00005b38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.write_RRL 0000004c  00005a50  00005a50  00005b84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .text.write_VCC 0000004c  00005a9c  00005a9c  00005bd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
282 .text.get_time_par 00000034  00006492  00006492  000065c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
283 .text.write_cols 00000158  00002924  00002924  00002a58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 .text.write_heat_up 0000004c  00005ae8  00005ae8  00005c1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.write_air_pump 00000050  00005796  00005796  000058ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.write_sp_interval 0000004c  00005b34  00005b34  00005c68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.write_reset 000000e6  0000391c  0000391c  00003a50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .text.write_time 000000fe  00003636  00003636  0000376a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
289 .text.handle_read 000002be  0000177c  0000177c  000018b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .text.handle_write 00000200  00001cde  00001cde  00001e12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .bss.arg      00000050  00800d3b  00800d3b  0000738c  2**0
                  ALLOC
292 .progmemx.data 000000d9  000006a0  000006a0  000007d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
293 .text.handle_methane 00000186  0000208e  0000208e  000021c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.handle_SCD30 00000118  00003308  00003308  0000343c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.handle_pump 000000a4  00004398  00004398  000044cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 .text.handle_sensor 000000b8  00003f82  00003f82  000040b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 .text.init_methane_SCD30 00000028  000068a0  000068a0  000069d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 .bss.par      00000014  00800e42  00800e42  0000738c  2**0
                  ALLOC
299 .text.count_parameters 00000052  000056f4  000056f4  00005828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 .text.par_index 00000070  00004dd8  00004dd8  00004f0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
301 .text.get_parameter 00000096  000045fe  000045fe  00004732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 .text.decode_stage_response 00000016  00006d36  00006d36  00006e6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
303 .text.decode_join_response 0000001c  00006c0e  00006c0e  00006d42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
304 .text.decode_header_tail_response 0000001e  00006b44  00006b44  00006c78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
305 .text.read_eeprom 0000005a  00005496  00005496  000055ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
306 .text.join_lora 00000012  00006eaa  00006eaa  00006fde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
307 .text.set_wakeup 0000000a  0000716a  0000716a  0000729e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
308 .text.send_header 0000001a  00006c5e  00006c5e  00006d92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
309 .text.send_body 0000001a  00006c78  00006c78  00006dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
310 .text.send_tail 0000001a  00006c92  00006c92  00006dc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
311 .text.send_msg 00000006  00007228  00007228  0000735c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
312 .progmemx.data 00000217  00000489  00000489  000005bd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
313 .text.stage_0 00000126  000030c0  000030c0  000031f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
314 .text.stage_1 00000152  00002a7c  00002a7c  00002bb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
315 .text.stage_2 0000016c  00002388  00002388  000024bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
316 .text.stage_3 00000168  000024f4  000024f4  00002628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
317 .text.decode_body_response 0000005c  000053e0  000053e0  00005514  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
318 .text.MAINPG_start 00000388  00001118  00001118  0000124c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
319 .bss.fromSleep 00000001  00800eed  00800eed  0000738c  2**0
                  ALLOC
320 .bss.samplingProcessInterval 00000001  00800eee  00800eee  0000738c  2**0
                  ALLOC
321 .data.methHeatUpTime 00000001  00800eef  00007257  0000738b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
322 .data.airPumpTime 00000002  00800ed9  00007253  00007387  2**0
                  CONTENTS, ALLOC, LOAD, DATA
323 .bss.ppmx     00000004  00800eab  00800eab  0000738c  2**0
                  ALLOC
324 .bss.rrlx     00000004  00800eaf  00800eaf  0000738c  2**0
                  ALLOC
325 .bss.vccx     00000004  00800eb3  00800eb3  0000738c  2**0
                  ALLOC
326 .bss.cols     0000004b  00800dd6  00800dd6  0000738c  2**0
                  ALLOC
327 .bss.appkey   00000021  00800e21  00800e21  0000738c  2**0
                  ALLOC
328 .bss.appeui   00000011  00800e56  00800e56  0000738c  2**0
                  ALLOC
329 .bss.deveui   00000011  00800e67  00800e67  0000738c  2**0
                  ALLOC
330 .bss.package_length 00000001  00800ef0  00800ef0  0000738c  2**0
                  ALLOC
331 .bss.package  00000064  00800cd7  00800cd7  0000738c  2**0
                  ALLOC
332 .bss.dt       00000006  00800e94  00800e94  0000738c  2**0
                  ALLOC
333 .bss.ts       00000004  00800eb7  00800eb7  0000738c  2**0
                  ALLOC
334 .bss.meth_data 000000c8  00800904  00800904  0000738c  2**0
                  ALLOC
335 .bss.hum_data 000000c8  008009cc  008009cc  0000738c  2**0
                  ALLOC
336 .bss.temp_data 000000c8  00800a94  00800a94  0000738c  2**0
                  ALLOC
337 .bss.co2_data 000000c8  00800b5c  00800b5c  0000738c  2**0
                  ALLOC
338 .data.bodyIndex 00000002  00800edb  00007255  00007389  2**0
                  CONTENTS, ALLOC, LOAD, DATA
339 .bss.state_s3 00000001  00800ef1  00800ef1  0000738c  2**0
                  ALLOC
340 .bss.state_s2 00000001  00800ef2  00800ef2  0000738c  2**0
                  ALLOC
341 .bss.state_s1 00000001  00800ef3  00800ef3  0000738c  2**0
                  ALLOC
342 .bss.state_s0 00000001  00800ef4  00800ef4  0000738c  2**0
                  ALLOC
343 .text.calc_crc8 00000036  00006388  00006388  000064bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text.get_decimal 000000b4  0000403a  0000403a  0000416e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 .text.str2flaot 0000004e  0000591e  0000591e  00005a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 .text.is_float 00000058  00005548  00005548  0000567c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 .text.avrlibc.fplib 0000000e  00006fe2  00006fe2  00007116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .text.avrlibc.fplib 000000ce  00003bb4  00003bb4  00003ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
349 .text.avrlibc.fplib 0000000a  00007174  00007174  000072a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
350 .text.avrlibc.fplib 00000008  000071e0  000071e0  00007314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 .text.avrlibc.fplib 000000de  00003a02  00003a02  00003b36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
352 .text.avrlibc.fplib 0000005e  00005326  00005326  0000545a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
353 .text.avrlibc.fplib 0000007a  000049ae  000049ae  00004ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
354 .text.avrlibc.fplib 00000048  00005d34  00005d34  00005e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
355 .text.avrlibc.fplib 0000000c  000070ec  000070ec  00007220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
356 .text.avrlibc.fplib 00000006  0000722e  0000722e  00007362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 .text.avrlibc.fplib 0000000e  00006ff0  00006ff0  00007124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
358 .text.avrlibc.fplib 0000000e  00006ffe  00006ffe  00007132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 .text.avrlibc.fplib 00000022  00006a0a  00006a0a  00006b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
360 .text.avrlibc.fplib 00000044  00005e94  00005e94  00005fc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
361 .text.avrlibc.fplib 0000000e  0000700c  0000700c  00007140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 .text.avrlibc.fplib 00000008  000071e8  000071e8  0000731c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
363 .text.avrlibc.fplib 000000d4  00003ae0  00003ae0  00003c14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
364 .progmemx.data 00000008  000009bc  000009bc  00000af0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
365 .text.avrlibc 00000744  000009d4  000009d4  00000b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
366 .text.libgcc.div 00000028  000068c8  000068c8  000069fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
367 .text.libgcc  0000000c  000070f8  000070f8  0000722c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
368 .text.libgcc.mul 0000001e  00006b62  00006b62  00006c96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
369 .text.libgcc.prologue 00000038  000062e4  000062e4  00006418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 .text.libgcc.prologue 00000036  000063be  000063be  000064f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
371 .text.avrlibc 00000008  000071f0  000071f0  00007324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
372 .text.avrlibc 0000000e  0000701a  0000701a  0000714e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
373 .text.avrlibc 000002dc  000014a0  000014a0  000015d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
374 .text.avrlibc 000001b0  00001ede  00001ede  00002012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
375 .text.avrlibc 00000012  00006ebc  00006ebc  00006ff0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
376 .text.avrlibc 00000032  0000658e  0000658e  000066c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
377 .text.avrlibc 00000042  00005fe4  00005fe4  00006118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
378 .text.avrlibc 0000006a  00004ffe  00004ffe  00005132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
379 .text.avrlibc 0000002c  000067fa  000067fa  0000692e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
380 .text.avrlibc 0000001e  00006b80  00006b80  00006cb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
381 .text.avrlibc 00000036  000063f4  000063f4  00006528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
382 .text.avrlibc 00000078  00004c08  00004c08  00004d3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
383 .text.avrlibc 00000046  00005e4e  00005e4e  00005f82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
384 .text.avrlibc 000000bc  00003ec6  00003ec6  00003ffa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
385 .text.avrlibc 00000006  00007234  00007234  00007368  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
386 .text.avrlibc 00000024  0000693a  0000693a  00006a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
387 .text.avrlibc 00000012  00006ece  00006ece  00007002  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
388 .text.avrlibc 0000000e  00007028  00007028  0000715c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
389 .text.avrlibc 0000000e  00007036  00007036  0000716a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
390 .text.avrlibc 00000044  00005ed8  00005ed8  0000600c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
391 .text.avrlibc 00000024  0000695e  0000695e  00006a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
392 .text.avrlibc 00000018  00006cdc  00006cdc  00006e10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
393 .text.avrlibc 0000000c  00007104  00007104  00007238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
394 .text.libgcc.mul 00000020  00006aac  00006aac  00006be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
395 .text.libgcc.div 00000044  00005f1c  00005f1c  00006050  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
396 .text.libgcc.mul 00000016  00006d4c  00006d4c  00006e80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
397 .text.libgcc  0000000a  0000717e  0000717e  000072b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 08 01 	jmp	0x210	; 0x210 <__ctors_end>
   4:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
   8:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
   c:	0c 94 e3 36 	jmp	0x6dc6	; 0x6dc6 <__vector_3>
  10:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  14:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  18:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  1c:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  20:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  24:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__vector_9>
  28:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  2c:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  30:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  34:	0c 94 1a 2c 	jmp	0x5834	; 0x5834 <__vector_13>
  38:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  3c:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  40:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__vector_16>
  44:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  48:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  4c:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  50:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <__vector_20>
  54:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  58:	0c 94 24 27 	jmp	0x4e48	; 0x4e48 <__vector_22>
  5c:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  60:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  64:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  68:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  6c:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  70:	0c 94 7a 26 	jmp	0x4cf4	; 0x4cf4 <__vector_28>
  74:	0c 94 1d 39 	jmp	0x723a	; 0x723a <__bad_interrupt>
  78:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <__vector_30>
  7c:	3b 0d       	add	r19, r11
  7e:	4b 0e       	add	r4, r27
  80:	5a 0d       	add	r21, r10
  82:	78 0d       	add	r23, r8
  84:	98 0d       	add	r25, r8
  86:	b8 0d       	add	r27, r8
  88:	d8 0d       	add	r29, r8
  8a:	f8 0d       	add	r31, r8
  8c:	16 0e       	add	r1, r22
  8e:	34 0e       	add	r3, r20
  90:	46 0e       	add	r4, r22
  92:	5c 0e       	add	r5, r28
  94:	5e 0e       	add	r5, r30
  96:	48 17       	cp	r20, r24
  98:	5f 17       	cp	r21, r31
  9a:	bb 17       	cp	r27, r27
  9c:	68 17       	cp	r22, r24
  9e:	c4 17       	cp	r28, r20
  a0:	ad 17       	cp	r26, r29
  a2:	b4 17       	cp	r27, r20
  a4:	78 17       	cp	r23, r24
  a6:	84 17       	cp	r24, r20
  a8:	90 17       	cp	r25, r16
  aa:	9a 17       	cp	r25, r26
  ac:	a6 17       	cp	r26, r22
  ae:	40 13       	cpse	r20, r16
  b0:	4d 13       	cpse	r20, r29
  b2:	57 13       	cpse	r21, r23
  b4:	5d 13       	cpse	r21, r29
  b6:	8c 13       	cpse	r24, r28
  b8:	b7 13       	cpse	r27, r23
  ba:	d0 13       	cpse	r29, r16
  bc:	b7 08       	sbc	r11, r7
  be:	e6 08       	sbc	r14, r6
  c0:	01 09       	sbc	r16, r1
  c2:	12 09       	sbc	r17, r2
  c4:	26 09       	sbc	r18, r6
  c6:	2b 0a       	sbc	r2, r27
  c8:	1b 09       	sbc	r17, r11
  ca:	5f 09       	sbc	r21, r15
  cc:	76 09       	sbc	r23, r6
  ce:	6b 09       	sbc	r22, r11
  d0:	3a 09       	sbc	r19, r10
  d2:	81 09       	sbc	r24, r1
  d4:	92 09       	sbc	r25, r2
  d6:	a4 09       	sbc	r26, r4
  d8:	ac 09       	sbc	r26, r12
  da:	b4 09       	sbc	r27, r4
  dc:	bc 09       	sbc	r27, r12
  de:	c4 09       	sbc	r28, r4
  e0:	e5 09       	sbc	r30, r5
  e2:	ec 09       	sbc	r30, r12
  e4:	fe 09       	sbc	r31, r14
  e6:	1d 0a       	sbc	r1, r29
  e8:	39 0a       	sbc	r3, r25
  ea:	44 0a       	sbc	r4, r20

000000ec <.dinit>:
  ec:	01 00       	.word	0x0001	; ????
  ee:	0e 9a       	sbi	0x01, 6	; 1
  f0:	80 0e       	add	r8, r16
  f2:	9a 0e       	add	r9, r26
  f4:	ab 00       	.word	0x00ab	; ????
  f6:	72 42       	sbci	r23, 0x22	; 34
  f8:	0e ab       	std	Y+54, r16	; 0x36
  fa:	0e d9       	rcall	.-3556   	; 0xfffff318 <__eeprom_end+0xff7ef318>
  fc:	80 0e       	add	r8, r16
  fe:	d9 0e       	add	r13, r25
 100:	dd 00       	.word	0x00dd	; ????
 102:	72 53       	subi	r23, 0x32	; 50
 104:	0e dd       	rcall	.-1508   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
 106:	0e ef       	ldi	r16, 0xFE	; 254
 108:	80 0e       	add	r8, r16
 10a:	ef 0e       	add	r14, r31
 10c:	f0 00       	.word	0x00f0	; ????
 10e:	72 57       	subi	r23, 0x72	; 114
 110:	0e f0       	brts	.+2      	; 0x114 <.dinit+0x28>
 112:	0e f5       	brtc	.+66     	; 0x156 <__trampolines_end+0x40>
 114:	80 00       	.word	0x0080	; ????

00000116 <__trampolines_end>:
 116:	00 40       	sbci	r16, 0x00	; 0
 118:	7a 10       	cpse	r7, r10
 11a:	f3 5a       	subi	r31, 0xA3	; 163
 11c:	00 a0       	ldd	r0, Z+32	; 0x20
 11e:	72 4e       	sbci	r23, 0xE2	; 226
 120:	18 09       	sbc	r17, r8
 122:	00 10       	cpse	r0, r0
 124:	a5 d4       	rcall	.+2378   	; 0xa70 <vfprintf+0x9c>
 126:	e8 00       	.word	0x00e8	; ????
 128:	00 e8       	ldi	r16, 0x80	; 128
 12a:	76 48       	sbci	r23, 0x86	; 134
 12c:	17 00       	.word	0x0017	; ????
 12e:	00 e4       	ldi	r16, 0x40	; 64
 130:	0b 54       	subi	r16, 0x4B	; 75
 132:	02 00       	.word	0x0002	; ????
 134:	00 ca       	rjmp	.-3072   	; 0xfffff536 <__eeprom_end+0xff7ef536>
 136:	9a 3b       	cpi	r25, 0xBA	; 186
 138:	00 00       	nop
 13a:	00 e1       	ldi	r16, 0x10	; 16
 13c:	f5 05       	cpc	r31, r5
 13e:	00 00       	nop
 140:	80 96       	adiw	r24, 0x20	; 32
 142:	98 00       	.word	0x0098	; ????
 144:	00 00       	nop
 146:	40 42       	sbci	r20, 0x20	; 32
 148:	0f 00       	.word	0x000f	; ????
 14a:	00 00       	nop
 14c:	a0 86       	std	Z+8, r10	; 0x08
 14e:	01 00       	.word	0x0001	; ????
 150:	00 00       	nop
 152:	10 27       	eor	r17, r16
 154:	00 00       	nop
 156:	00 00       	nop
 158:	e8 03       	fmulsu	r22, r16
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	64 00       	.word	0x0064	; ????
 160:	00 00       	nop
 162:	00 00       	nop
 164:	0a 00       	.word	0x000a	; ????
 166:	00 00       	nop
 168:	00 00       	nop
 16a:	01 00       	.word	0x0001	; ????
 16c:	00 00       	nop
 16e:	00 00       	nop
 170:	2c 76       	andi	r18, 0x6C	; 108
 172:	d8 88       	ldd	r13, Y+16	; 0x10
 174:	dc 67       	ori	r29, 0x7C	; 124
 176:	4f 08       	sbc	r4, r15
 178:	23 df       	rcall	.-442    	; 0xffffffc0 <__eeprom_end+0xff7effc0>
 17a:	c1 df       	rcall	.-126    	; 0xfe <.dinit+0x12>
 17c:	ae 59       	subi	r26, 0x9E	; 158
 17e:	e1 b1       	in	r30, 0x01	; 1
 180:	b7 96       	adiw	r30, 0x27	; 39
 182:	e5 e3       	ldi	r30, 0x35	; 53
 184:	e4 53       	subi	r30, 0x34	; 52
 186:	c6 3a       	cpi	r28, 0xA6	; 166
 188:	e6 51       	subi	r30, 0x16	; 22
 18a:	99 76       	andi	r25, 0x69	; 105
 18c:	96 e8       	ldi	r25, 0x86	; 134
 18e:	e6 c2       	rjmp	.+1484   	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 190:	84 26       	eor	r8, r20
 192:	eb 89       	ldd	r30, Y+19	; 0x13
 194:	8c 9b       	sbis	0x11, 4	; 17
 196:	62 ed       	ldi	r22, 0xD2	; 210
 198:	40 7c       	andi	r20, 0xC0	; 192
 19a:	6f fc       	.word	0xfc6f	; ????
 19c:	ef bc       	out	0x2f, r14	; 47
 19e:	9c 9f       	mul	r25, r28
 1a0:	40 f2       	brcs	.-112    	; 0x132 <__trampolines_end+0x1c>
 1a2:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a4:	6f a5       	ldd	r22, Y+47	; 0x2f
 1a6:	f4 90       	lpm	r15, Z
 1a8:	05 5a       	subi	r16, 0xA5	; 165
 1aa:	2a f7       	brpl	.-54     	; 0x176 <__trampolines_end+0x60>
 1ac:	5c 93       	st	X, r21
 1ae:	6b 6c       	ori	r22, 0xCB	; 203
 1b0:	f9 67       	ori	r31, 0x79	; 121
 1b2:	6d c1       	rjmp	.+730    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 1b4:	1b fc       	.word	0xfc1b	; ????
 1b6:	e0 e4       	ldi	r30, 0x40	; 64
 1b8:	0d 47       	sbci	r16, 0x7D	; 125
 1ba:	fe f5       	brtc	.+126    	; 0x23a <__do_copy_data+0x1e>
 1bc:	20 e6       	ldi	r18, 0x60	; 96
 1be:	b5 00       	.word	0x00b5	; ????
 1c0:	d0 ed       	ldi	r29, 0xD0	; 208
 1c2:	90 2e       	mov	r9, r16
 1c4:	03 00       	.word	0x0003	; ????
 1c6:	94 35       	cpi	r25, 0x54	; 84
 1c8:	77 05       	cpc	r23, r7
 1ca:	00 80       	ld	r0, Z
 1cc:	84 1e       	adc	r8, r20
 1ce:	08 00       	.word	0x0008	; ????
 1d0:	00 20       	and	r0, r0
 1d2:	4e 0a       	sbc	r4, r30
 1d4:	00 00       	nop
 1d6:	00 c8       	rjmp	.-4096   	; 0xfffff1d8 <__eeprom_end+0xff7ef1d8>
 1d8:	0c 33       	cpi	r16, 0x3C	; 60
 1da:	33 33       	cpi	r19, 0x33	; 51
 1dc:	33 0f       	add	r19, r19
 1de:	98 6e       	ori	r25, 0xE8	; 232
 1e0:	12 83       	std	Z+2, r17	; 0x02
 1e2:	11 41       	sbci	r17, 0x11	; 17
 1e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1e6:	21 14       	cp	r2, r1
 1e8:	89 3b       	cpi	r24, 0xB9	; 185
 1ea:	e6 55       	subi	r30, 0x56	; 86
 1ec:	16 cf       	rjmp	.-468    	; 0x1a <__FUSE_REGION_LENGTH__+0x17>
 1ee:	fe e6       	ldi	r31, 0x6E	; 110
 1f0:	db 18       	sub	r13, r11
 1f2:	d1 84       	ldd	r13, Z+9	; 0x09
 1f4:	4b 38       	cpi	r20, 0x8B	; 139
 1f6:	1b f7       	brvc	.-58     	; 0x1be <__trampolines_end+0xa8>
 1f8:	7c 1d       	adc	r23, r12
 1fa:	90 1d       	adc	r25, r0
 1fc:	a4 bb       	out	0x14, r26	; 20
 1fe:	e4 24       	eor	r14, r4
 200:	20 32       	cpi	r18, 0x20	; 32
 202:	84 72       	andi	r24, 0x24	; 36
 204:	5e 22       	and	r5, r30
 206:	81 00       	.word	0x0081	; ????
 208:	c9 f1       	breq	.+114    	; 0x27c <_etext+0x18>
 20a:	24 ec       	ldi	r18, 0xC4	; 196
 20c:	a1 e5       	ldi	r26, 0x51	; 81
 20e:	3d 27       	eor	r19, r29

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d0 e1       	ldi	r29, 0x10	; 16
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61

0000021c <__do_copy_data>:
 21c:	ec ee       	ldi	r30, 0xEC	; 236
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	17 c0       	rjmp	.+46     	; 0x252 <__do_clear_bss+0x8>
 224:	b5 91       	lpm	r27, Z+
 226:	a5 91       	lpm	r26, Z+
 228:	35 91       	lpm	r19, Z+
 22a:	25 91       	lpm	r18, Z+
 22c:	05 91       	lpm	r16, Z+
 22e:	07 fd       	sbrc	r16, 7
 230:	0c c0       	rjmp	.+24     	; 0x24a <__do_clear_bss>
 232:	95 91       	lpm	r25, Z+
 234:	85 91       	lpm	r24, Z+
 236:	ef 01       	movw	r28, r30
 238:	f9 2f       	mov	r31, r25
 23a:	e8 2f       	mov	r30, r24
 23c:	05 90       	lpm	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	a2 17       	cp	r26, r18
 242:	b3 07       	cpc	r27, r19
 244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x20>
 246:	fe 01       	movw	r30, r28
 248:	04 c0       	rjmp	.+8      	; 0x252 <__do_clear_bss+0x8>

0000024a <__do_clear_bss>:
 24a:	1d 92       	st	X+, r1
 24c:	a2 17       	cp	r26, r18
 24e:	b3 07       	cpc	r27, r19
 250:	e1 f7       	brne	.-8      	; 0x24a <__do_clear_bss>
 252:	e5 31       	cpi	r30, 0x15	; 21
 254:	f4 07       	cpc	r31, r20
 256:	31 f7       	brne	.-52     	; 0x224 <__do_copy_data+0x8>
 258:	0e 94 aa 30 	call	0x6154	; 0x6154 <main>
 25c:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>

Disassembly of section .text:

0000723a <__bad_interrupt>:
    723a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

00006f10 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    6f10:	81 b1       	in	r24, 0x01	; 1
    6f12:	88 60       	ori	r24, 0x08	; 8
    6f14:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    6f16:	82 b1       	in	r24, 0x02	; 2
    6f18:	87 7f       	andi	r24, 0xF7	; 247
    6f1a:	82 b9       	out	0x02, r24	; 2
    6f1c:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00006d62 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    6d62:	88 23       	and	r24, r24
    6d64:	21 f0       	breq	.+8      	; 0x6d6e <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    6d66:	82 b1       	in	r24, 0x02	; 2
    6d68:	88 60       	ori	r24, 0x08	; 8
    6d6a:	82 b9       	out	0x02, r24	; 2
    6d6c:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    6d6e:	82 b1       	in	r24, 0x02	; 2
    6d70:	87 7f       	andi	r24, 0xF7	; 247
    6d72:	82 b9       	out	0x02, r24	; 2
    6d74:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00006f1e <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    6f1e:	81 b1       	in	r24, 0x01	; 1
    6f20:	80 62       	ori	r24, 0x20	; 32
    6f22:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    6f24:	82 b1       	in	r24, 0x02	; 2
    6f26:	8f 7d       	andi	r24, 0xDF	; 223
    6f28:	82 b9       	out	0x02, r24	; 2
    6f2a:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00006d76 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    6d76:	88 23       	and	r24, r24
    6d78:	21 f0       	breq	.+8      	; 0x6d82 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    6d7a:	82 b1       	in	r24, 0x02	; 2
    6d7c:	80 62       	ori	r24, 0x20	; 32
    6d7e:	82 b9       	out	0x02, r24	; 2
    6d80:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    6d82:	82 b1       	in	r24, 0x02	; 2
    6d84:	8f 7d       	andi	r24, 0xDF	; 223
    6d86:	82 b9       	out	0x02, r24	; 2
    6d88:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00006f2c <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    6f2c:	81 b1       	in	r24, 0x01	; 1
    6f2e:	80 61       	ori	r24, 0x10	; 16
    6f30:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    6f32:	82 b1       	in	r24, 0x02	; 2
    6f34:	8f 7e       	andi	r24, 0xEF	; 239
    6f36:	82 b9       	out	0x02, r24	; 2
    6f38:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00006d8a <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    6d8a:	88 23       	and	r24, r24
    6d8c:	21 f0       	breq	.+8      	; 0x6d96 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    6d8e:	82 b1       	in	r24, 0x02	; 2
    6d90:	80 61       	ori	r24, 0x10	; 16
    6d92:	82 b9       	out	0x02, r24	; 2
    6d94:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    6d96:	82 b1       	in	r24, 0x02	; 2
    6d98:	8f 7e       	andi	r24, 0xEF	; 239
    6d9a:	82 b9       	out	0x02, r24	; 2
    6d9c:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00006f3a <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    6f3a:	8a b1       	in	r24, 0x0a	; 10
    6f3c:	80 61       	ori	r24, 0x10	; 16
    6f3e:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    6f40:	8b b1       	in	r24, 0x0b	; 11
    6f42:	8f 7e       	andi	r24, 0xEF	; 239
    6f44:	8b b9       	out	0x0b, r24	; 11
    6f46:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00006d9e <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    6d9e:	88 23       	and	r24, r24
    6da0:	21 f0       	breq	.+8      	; 0x6daa <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    6da2:	8b b1       	in	r24, 0x0b	; 11
    6da4:	80 61       	ori	r24, 0x10	; 16
    6da6:	8b b9       	out	0x0b, r24	; 11
    6da8:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    6daa:	8b b1       	in	r24, 0x0b	; 11
    6dac:	8f 7e       	andi	r24, 0xEF	; 239
    6dae:	8b b9       	out	0x0b, r24	; 11
    6db0:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

00006f48 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    6f48:	81 b1       	in	r24, 0x01	; 1
    6f4a:	80 68       	ori	r24, 0x80	; 128
    6f4c:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    6f4e:	82 b1       	in	r24, 0x02	; 2
    6f50:	8f 77       	andi	r24, 0x7F	; 127
    6f52:	82 b9       	out	0x02, r24	; 2
    6f54:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

00006db2 <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    6db2:	88 23       	and	r24, r24
    6db4:	21 f0       	breq	.+8      	; 0x6dbe <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    6db6:	82 b1       	in	r24, 0x02	; 2
    6db8:	80 68       	ori	r24, 0x80	; 128
    6dba:	82 b9       	out	0x02, r24	; 2
    6dbc:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    6dbe:	82 b1       	in	r24, 0x02	; 2
    6dc0:	8f 77       	andi	r24, 0x7F	; 127
    6dc2:	82 b9       	out	0x02, r24	; 2
    6dc4:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00007188 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    7188:	82 b1       	in	r24, 0x02	; 2
    718a:	80 58       	subi	r24, 0x80	; 128
    718c:	82 b9       	out	0x02, r24	; 2
    718e:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00006066 <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    6066:	84 b1       	in	r24, 0x04	; 4
    6068:	8b 7f       	andi	r24, 0xFB	; 251
    606a:	84 b9       	out	0x04, r24	; 4
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    606c:	e9 e6       	ldi	r30, 0x69	; 105
    606e:	f0 e0       	ldi	r31, 0x00	; 0
    6070:	80 81       	ld	r24, Z
    6072:	8f 7e       	andi	r24, 0xEF	; 239
    6074:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    6076:	80 81       	ld	r24, Z
    6078:	80 62       	ori	r24, 0x20	; 32
    607a:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    607c:	8d b3       	in	r24, 0x1d	; 29
    607e:	84 60       	ori	r24, 0x04	; 4
    6080:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    6082:	83 b7       	in	r24, 0x33	; 51
    6084:	81 7f       	andi	r24, 0xF1	; 241
    6086:	84 60       	ori	r24, 0x04	; 4
    6088:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    608a:	83 b7       	in	r24, 0x33	; 51
    608c:	81 60       	ori	r24, 0x01	; 1
    608e:	83 bf       	out	0x33, r24	; 51
	sei();
    6090:	78 94       	sei
	sleep_cpu();
    6092:	88 95       	sleep
	sleep_disable();
    6094:	83 b7       	in	r24, 0x33	; 51
    6096:	8e 7f       	andi	r24, 0xFE	; 254
    6098:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    609a:	8d b3       	in	r24, 0x1d	; 29
    609c:	8b 7f       	andi	r24, 0xFB	; 251
    609e:	8d bb       	out	0x1d, r24	; 29
    60a0:	08 95       	ret

Disassembly of section .text.__vector_3:

00006dc6 <__vector_3>:
}

ISR(INT2_vect){
    6dc6:	1f 92       	push	r1
    6dc8:	0f 92       	push	r0
    6dca:	0f b6       	in	r0, 0x3f	; 63
    6dcc:	0f 92       	push	r0
    6dce:	11 24       	eor	r1, r1
	
}
    6dd0:	0f 90       	pop	r0
    6dd2:	0f be       	out	0x3f, r0	; 63
    6dd4:	0f 90       	pop	r0
    6dd6:	1f 90       	pop	r1
    6dd8:	18 95       	reti

Disassembly of section .text.rn2483_init:

00007190 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    7190:	84 b1       	in	r24, 0x04	; 4
    7192:	80 61       	ori	r24, 0x10	; 16
    7194:	84 b9       	out	0x04, r24	; 4
    7196:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00007198 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    7198:	85 b1       	in	r24, 0x05	; 5
    719a:	8f 7e       	andi	r24, 0xEF	; 239
    719c:	85 b9       	out	0x05, r24	; 5
    719e:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

000071a0 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    71a0:	85 b1       	in	r24, 0x05	; 5
    71a2:	80 61       	ori	r24, 0x10	; 16
    71a4:	85 b9       	out	0x05, r24	; 5
    71a6:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00006f56 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    6f56:	87 b1       	in	r24, 0x07	; 7
    6f58:	8f 7b       	andi	r24, 0xBF	; 191
    6f5a:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    6f5c:	88 b1       	in	r24, 0x08	; 8
    6f5e:	8f 7b       	andi	r24, 0xBF	; 191
    6f60:	88 b9       	out	0x08, r24	; 8
    6f62:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00007110 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    7110:	86 b1       	in	r24, 0x06	; 6
    7112:	86 fb       	bst	r24, 6
    7114:	88 27       	eor	r24, r24
    7116:	80 f9       	bld	r24, 0
    7118:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00006982 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    6982:	92 e0       	ldi	r25, 0x02	; 2
    6984:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    6986:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match-1; //Set match value
    6988:	81 50       	subi	r24, 0x01	; 1
    698a:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    698c:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    698e:	ee e6       	ldi	r30, 0x6E	; 110
    6990:	f0 e0       	ldi	r31, 0x00	; 0
    6992:	80 81       	ld	r24, Z
    6994:	82 60       	ori	r24, 0x02	; 2
    6996:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    6998:	78 94       	sei
	
	//Set callback
	_cb=cb;
    699a:	70 93 bc 0e 	sts	0x0EBC, r23	; 0x800ebc <_cb+0x1>
    699e:	60 93 bb 0e 	sts	0x0EBB, r22	; 0x800ebb <_cb>
    69a2:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

000071f8 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    71f8:	86 e0       	ldi	r24, 0x06	; 6
    71fa:	85 bd       	out	0x25, r24	; 37
    71fc:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

0000723e <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    723e:	15 bc       	out	0x25, r1	; 37
    7240:	08 95       	ret

Disassembly of section .text.__vector_16:

000057e6 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    57e6:	1f 92       	push	r1
    57e8:	0f 92       	push	r0
    57ea:	0f b6       	in	r0, 0x3f	; 63
    57ec:	0f 92       	push	r0
    57ee:	11 24       	eor	r1, r1
    57f0:	2f 93       	push	r18
    57f2:	3f 93       	push	r19
    57f4:	4f 93       	push	r20
    57f6:	5f 93       	push	r21
    57f8:	6f 93       	push	r22
    57fa:	7f 93       	push	r23
    57fc:	8f 93       	push	r24
    57fe:	9f 93       	push	r25
    5800:	af 93       	push	r26
    5802:	bf 93       	push	r27
    5804:	ef 93       	push	r30
    5806:	ff 93       	push	r31
	_cb();
    5808:	e0 91 bb 0e 	lds	r30, 0x0EBB	; 0x800ebb <_cb>
    580c:	f0 91 bc 0e 	lds	r31, 0x0EBC	; 0x800ebc <_cb+0x1>
    5810:	09 95       	icall
}
    5812:	ff 91       	pop	r31
    5814:	ef 91       	pop	r30
    5816:	bf 91       	pop	r27
    5818:	af 91       	pop	r26
    581a:	9f 91       	pop	r25
    581c:	8f 91       	pop	r24
    581e:	7f 91       	pop	r23
    5820:	6f 91       	pop	r22
    5822:	5f 91       	pop	r21
    5824:	4f 91       	pop	r20
    5826:	3f 91       	pop	r19
    5828:	2f 91       	pop	r18
    582a:	0f 90       	pop	r0
    582c:	0f be       	out	0x3f, r0	; 63
    582e:	0f 90       	pop	r0
    5830:	1f 90       	pop	r1
    5832:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

0000631c <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    631c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    6320:	28 e0       	ldi	r18, 0x08	; 8
    6322:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    6326:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match-1; //Set compare value
    632a:	01 97       	sbiw	r24, 0x01	; 1
    632c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    6330:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    6334:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    6338:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    633c:	ef e6       	ldi	r30, 0x6F	; 111
    633e:	f0 e0       	ldi	r31, 0x00	; 0
    6340:	80 81       	ld	r24, Z
    6342:	82 60       	ori	r24, 0x02	; 2
    6344:	80 83       	st	Z, r24
	sei();
    6346:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    6348:	70 93 be 0e 	sts	0x0EBE, r23	; 0x800ebe <_cb+0x1>
    634c:	60 93 bd 0e 	sts	0x0EBD, r22	; 0x800ebd <_cb>
    6350:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

00007044 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    7044:	e1 e8       	ldi	r30, 0x81	; 129
    7046:	f0 e0       	ldi	r31, 0x00	; 0
    7048:	80 81       	ld	r24, Z
    704a:	86 60       	ori	r24, 0x06	; 6
    704c:	80 83       	st	Z, r24
    704e:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

00007050 <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    7050:	e1 e8       	ldi	r30, 0x81	; 129
    7052:	f0 e0       	ldi	r31, 0x00	; 0
    7054:	80 81       	ld	r24, Z
    7056:	88 7f       	andi	r24, 0xF8	; 248
    7058:	80 83       	st	Z, r24
    705a:	08 95       	ret

Disassembly of section .text.__vector_13:

00005834 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    5834:	1f 92       	push	r1
    5836:	0f 92       	push	r0
    5838:	0f b6       	in	r0, 0x3f	; 63
    583a:	0f 92       	push	r0
    583c:	11 24       	eor	r1, r1
    583e:	2f 93       	push	r18
    5840:	3f 93       	push	r19
    5842:	4f 93       	push	r20
    5844:	5f 93       	push	r21
    5846:	6f 93       	push	r22
    5848:	7f 93       	push	r23
    584a:	8f 93       	push	r24
    584c:	9f 93       	push	r25
    584e:	af 93       	push	r26
    5850:	bf 93       	push	r27
    5852:	ef 93       	push	r30
    5854:	ff 93       	push	r31
	_cb();
    5856:	e0 91 bd 0e 	lds	r30, 0x0EBD	; 0x800ebd <_cb>
    585a:	f0 91 be 0e 	lds	r31, 0x0EBE	; 0x800ebe <_cb+0x1>
    585e:	09 95       	icall
    5860:	ff 91       	pop	r31
    5862:	ef 91       	pop	r30
    5864:	bf 91       	pop	r27
    5866:	af 91       	pop	r26
    5868:	9f 91       	pop	r25
    586a:	8f 91       	pop	r24
    586c:	7f 91       	pop	r23
    586e:	6f 91       	pop	r22
    5870:	5f 91       	pop	r21
    5872:	4f 91       	pop	r20
    5874:	3f 91       	pop	r19
    5876:	2f 91       	pop	r18
    5878:	0f 90       	pop	r0
    587a:	0f be       	out	0x3f, r0	; 63
    587c:	0f 90       	pop	r0
    587e:	1f 90       	pop	r1
    5880:	18 95       	reti

Disassembly of section .text.clear_callbacks:

00006a2c <clear_callbacks>:
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    6a2c:	80 e0       	ldi	r24, 0x00	; 0
    6a2e:	09 c0       	rjmp	.+18     	; 0x6a42 <clear_callbacks+0x16>
	{
		callbacks[i]=NULL;
    6a30:	e8 2f       	mov	r30, r24
    6a32:	f0 e0       	ldi	r31, 0x00	; 0
    6a34:	ee 0f       	add	r30, r30
    6a36:	ff 1f       	adc	r31, r31
    6a38:	e8 58       	subi	r30, 0x88	; 136
    6a3a:	f1 4f       	sbci	r31, 0xF1	; 241
    6a3c:	11 82       	std	Z+1, r1	; 0x01
    6a3e:	10 82       	st	Z, r1
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    6a40:	8f 5f       	subi	r24, 0xFF	; 255
    6a42:	85 30       	cpi	r24, 0x05	; 5
    6a44:	a8 f3       	brcs	.-22     	; 0x6a30 <clear_callbacks+0x4>
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    6a46:	10 92 de 0e 	sts	0x0EDE, r1	; 0x800ede <cbCounter>
    6a4a:	08 95       	ret

Disassembly of section .text.start_timer:

000071a8 <start_timer>:
}

static void start_timer(){
	TCCR2B=0x07;
    71a8:	87 e0       	ldi	r24, 0x07	; 7
    71aa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    71ae:	08 95       	ret

Disassembly of section .text.stop_timer:

000071fe <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    71fe:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    7202:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00006a4c <TC2_HAL_init>:
static callback_ptr callbacks[MAX_CALLBACKS];
static uint8_t cbCounter=0;
static uint8_t cnt=0;

void TC2_HAL_init(){
	TCCR2A=0x02; //Set mode=CTC
    6a4c:	82 e0       	ldi	r24, 0x02	; 2
    6a4e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	TCCR2B=0x00; //Stop timer
    6a52:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
	
	//Disable async
	ASSR=0x00;
    6a56:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
	
	TCNT2=0; //Set counter to 0
    6a5a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
	OCR2A=243; //16 Hz, 32 event pr s
    6a5e:	93 ef       	ldi	r25, 0xF3	; 243
    6a60:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	
	//Enable interrupt
	TIMSK2=0x02;
    6a64:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
	sei();
    6a68:	78 94       	sei
    6a6a:	08 95       	ret

Disassembly of section .text.TC2_HAL_kill:

0000711a <TC2_HAL_kill>:
static void stop_timer(){
	TCCR2B=0x00;
}

void TC2_HAL_kill(){
	stop_timer();
    711a:	0e 94 ff 38 	call	0x71fe	; 0x71fe <stop_timer>
	clear_callbacks();
    711e:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <clear_callbacks>
    7122:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

0000564c <TC2_HAL_subscribe>:
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
    564c:	cf 93       	push	r28
    564e:	dc 01       	movw	r26, r24
	int8_t pointer=-1;
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    5650:	60 91 de 0e 	lds	r22, 0x0EDE	; 0x800ede <cbCounter>
    5654:	65 30       	cpi	r22, 0x05	; 5
    5656:	00 f5       	brcc	.+64     	; 0x5698 <TC2_HAL_subscribe+0x4c>
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	15 c0       	rjmp	.+42     	; 0x5686 <TC2_HAL_subscribe+0x3a>
	
	//Find a free spot in the array to store the cb
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		if(callbacks[i]==NULL){
    565c:	29 2f       	mov	r18, r25
    565e:	30 e0       	ldi	r19, 0x00	; 0
    5660:	f9 01       	movw	r30, r18
    5662:	ee 0f       	add	r30, r30
    5664:	ff 1f       	adc	r31, r31
    5666:	e8 58       	subi	r30, 0x88	; 136
    5668:	f1 4f       	sbci	r31, 0xF1	; 241
    566a:	40 81       	ld	r20, Z
    566c:	51 81       	ldd	r21, Z+1	; 0x01
    566e:	45 2b       	or	r20, r21
    5670:	49 f4       	brne	.+18     	; 0x5684 <TC2_HAL_subscribe+0x38>
			callbacks[i]=cb;
    5672:	22 0f       	add	r18, r18
    5674:	33 1f       	adc	r19, r19
    5676:	f9 01       	movw	r30, r18
    5678:	e8 58       	subi	r30, 0x88	; 136
    567a:	f1 4f       	sbci	r31, 0xF1	; 241
    567c:	b1 83       	std	Z+1, r27	; 0x01
    567e:	a0 83       	st	Z, r26
			pointer=i;
    5680:	c9 2f       	mov	r28, r25
			break;
    5682:	04 c0       	rjmp	.+8      	; 0x568c <TC2_HAL_subscribe+0x40>
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
	
	//Find a free spot in the array to store the cb
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    5684:	9f 5f       	subi	r25, 0xFF	; 255
    5686:	95 30       	cpi	r25, 0x05	; 5
    5688:	48 f3       	brcs	.-46     	; 0x565c <TC2_HAL_subscribe+0x10>
	stop_timer();
	clear_callbacks();
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
    568a:	cf ef       	ldi	r28, 0xFF	; 255
			break;
		}
	}
	
	//Increment the number of cbs and (re)start the timer
	cbCounter++;
    568c:	6f 5f       	subi	r22, 0xFF	; 255
    568e:	60 93 de 0e 	sts	0x0EDE, r22	; 0x800ede <cbCounter>
	start_timer();
    5692:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <start_timer>
	return pointer;
    5696:	01 c0       	rjmp	.+2      	; 0x569a <TC2_HAL_subscribe+0x4e>

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    5698:	cf ef       	ldi	r28, 0xFF	; 255
	
	//Increment the number of cbs and (re)start the timer
	cbCounter++;
	start_timer();
	return pointer;
}
    569a:	8c 2f       	mov	r24, r28
    569c:	cf 91       	pop	r28
    569e:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

0000611a <TC2_HAL_cancel>:

void TC2_HAL_cancel(int8_t pointer){
	//Just return if cb not exist
	if(callbacks[pointer]==NULL) return;
    611a:	08 2e       	mov	r0, r24
    611c:	00 0c       	add	r0, r0
    611e:	99 0b       	sbc	r25, r25
    6120:	fc 01       	movw	r30, r24
    6122:	ee 0f       	add	r30, r30
    6124:	ff 1f       	adc	r31, r31
    6126:	e8 58       	subi	r30, 0x88	; 136
    6128:	f1 4f       	sbci	r31, 0xF1	; 241
    612a:	20 81       	ld	r18, Z
    612c:	31 81       	ldd	r19, Z+1	; 0x01
    612e:	23 2b       	or	r18, r19
    6130:	81 f0       	breq	.+32     	; 0x6152 <TC2_HAL_cancel+0x38>
	
	//Otherwise remove cb, stop timer if no cb is back
	callbacks[pointer]=NULL;
    6132:	88 0f       	add	r24, r24
    6134:	99 1f       	adc	r25, r25
    6136:	fc 01       	movw	r30, r24
    6138:	e8 58       	subi	r30, 0x88	; 136
    613a:	f1 4f       	sbci	r31, 0xF1	; 241
    613c:	11 82       	std	Z+1, r1	; 0x01
    613e:	10 82       	st	Z, r1
	cbCounter--;
    6140:	80 91 de 0e 	lds	r24, 0x0EDE	; 0x800ede <cbCounter>
    6144:	81 50       	subi	r24, 0x01	; 1
    6146:	80 93 de 0e 	sts	0x0EDE, r24	; 0x800ede <cbCounter>
	if(cbCounter==0){
    614a:	81 11       	cpse	r24, r1
    614c:	02 c0       	rjmp	.+4      	; 0x6152 <TC2_HAL_cancel+0x38>
		stop_timer();		
    614e:	0e 94 ff 38 	call	0x71fe	; 0x71fe <stop_timer>
    6152:	08 95       	ret

Disassembly of section .text.__vector_9:

000048b8 <__vector_9>:
	}
}

ISR(TIMER2_COMPA_vect){
    48b8:	1f 92       	push	r1
    48ba:	0f 92       	push	r0
    48bc:	0f b6       	in	r0, 0x3f	; 63
    48be:	0f 92       	push	r0
    48c0:	11 24       	eor	r1, r1
    48c2:	2f 93       	push	r18
    48c4:	3f 93       	push	r19
    48c6:	4f 93       	push	r20
    48c8:	5f 93       	push	r21
    48ca:	6f 93       	push	r22
    48cc:	7f 93       	push	r23
    48ce:	8f 93       	push	r24
    48d0:	9f 93       	push	r25
    48d2:	af 93       	push	r26
    48d4:	bf 93       	push	r27
    48d6:	cf 93       	push	r28
    48d8:	ef 93       	push	r30
    48da:	ff 93       	push	r31
	cnt++;
    48dc:	80 91 dd 0e 	lds	r24, 0x0EDD	; 0x800edd <cnt>
    48e0:	8f 5f       	subi	r24, 0xFF	; 255
    48e2:	80 93 dd 0e 	sts	0x0EDD, r24	; 0x800edd <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    48e6:	80 32       	cpi	r24, 0x20	; 32
    48e8:	99 f4       	brne	.+38     	; 0x4910 <__vector_9+0x58>
		cnt=0;
    48ea:	10 92 dd 0e 	sts	0x0EDD, r1	; 0x800edd <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    48ee:	c0 e0       	ldi	r28, 0x00	; 0
    48f0:	0d c0       	rjmp	.+26     	; 0x490c <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    48f2:	ec 2f       	mov	r30, r28
    48f4:	f0 e0       	ldi	r31, 0x00	; 0
    48f6:	ee 0f       	add	r30, r30
    48f8:	ff 1f       	adc	r31, r31
    48fa:	e8 58       	subi	r30, 0x88	; 136
    48fc:	f1 4f       	sbci	r31, 0xF1	; 241
    48fe:	01 90       	ld	r0, Z+
    4900:	f0 81       	ld	r31, Z
    4902:	e0 2d       	mov	r30, r0
    4904:	30 97       	sbiw	r30, 0x00	; 0
    4906:	09 f0       	breq	.+2      	; 0x490a <__vector_9+0x52>
				callbacks[i]();
    4908:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    490a:	cf 5f       	subi	r28, 0xFF	; 255
    490c:	c5 30       	cpi	r28, 0x05	; 5
    490e:	88 f3       	brcs	.-30     	; 0x48f2 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    4910:	ff 91       	pop	r31
    4912:	ef 91       	pop	r30
    4914:	cf 91       	pop	r28
    4916:	bf 91       	pop	r27
    4918:	af 91       	pop	r26
    491a:	9f 91       	pop	r25
    491c:	8f 91       	pop	r24
    491e:	7f 91       	pop	r23
    4920:	6f 91       	pop	r22
    4922:	5f 91       	pop	r21
    4924:	4f 91       	pop	r20
    4926:	3f 91       	pop	r19
    4928:	2f 91       	pop	r18
    492a:	0f 90       	pop	r0
    492c:	0f be       	out	0x3f, r0	; 63
    492e:	0f 90       	pop	r0
    4930:	1f 90       	pop	r1
    4932:	18 95       	reti

Disassembly of section .text.start_and_write_data:

0000596c <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    596c:	cf 92       	push	r12
    596e:	df 92       	push	r13
    5970:	ef 92       	push	r14
    5972:	cf 93       	push	r28
    5974:	df 93       	push	r29
    5976:	6a 01       	movw	r12, r20
    5978:	e6 2e       	mov	r14, r22
    597a:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    597c:	60 e0       	ldi	r22, 0x00	; 0
    597e:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    5982:	81 11       	cpse	r24, r1
    5984:	13 c0       	rjmp	.+38     	; 0x59ac <start_and_write_data+0x40>
    5986:	c0 e0       	ldi	r28, 0x00	; 0
    5988:	0e c0       	rjmp	.+28     	; 0x59a6 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    598a:	ae 2d       	mov	r26, r14
    598c:	c6 01       	movw	r24, r12
    598e:	8c 0f       	add	r24, r28
    5990:	91 1d       	adc	r25, r1
    5992:	a1 1d       	adc	r26, r1
    5994:	fc 01       	movw	r30, r24
    5996:	84 91       	lpm	r24, Z
    5998:	a7 fd       	sbrc	r26, 7
    599a:	80 81       	ld	r24, Z
    599c:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    59a0:	81 11       	cpse	r24, r1
    59a2:	04 c0       	rjmp	.+8      	; 0x59ac <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    59a4:	cf 5f       	subi	r28, 0xFF	; 255
    59a6:	cd 17       	cp	r28, r29
    59a8:	80 f3       	brcs	.-32     	; 0x598a <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    59aa:	80 e0       	ldi	r24, 0x00	; 0
}
    59ac:	df 91       	pop	r29
    59ae:	cf 91       	pop	r28
    59b0:	ef 90       	pop	r14
    59b2:	df 90       	pop	r13
    59b4:	cf 90       	pop	r12
    59b6:	08 95       	ret

Disassembly of section .text.read_and_stop:

0000543c <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    543c:	ef 92       	push	r14
    543e:	ff 92       	push	r15
    5440:	0f 93       	push	r16
    5442:	1f 93       	push	r17
    5444:	cf 93       	push	r28
    5446:	df 93       	push	r29
    5448:	8c 01       	movw	r16, r24
    544a:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    544c:	c0 e0       	ldi	r28, 0x00	; 0
    544e:	08 c0       	rjmp	.+16     	; 0x5460 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    5450:	78 01       	movw	r14, r16
    5452:	ec 0e       	add	r14, r28
    5454:	f1 1c       	adc	r15, r1
    5456:	0e 94 f7 36 	call	0x6dee	; 0x6dee <TWI_HAL_read_byte_ack>
    545a:	f7 01       	movw	r30, r14
    545c:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    545e:	cf 5f       	subi	r28, 0xFF	; 255
    5460:	2c 2f       	mov	r18, r28
    5462:	30 e0       	ldi	r19, 0x00	; 0
    5464:	8d 2f       	mov	r24, r29
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	01 97       	sbiw	r24, 0x01	; 1
    546a:	28 17       	cp	r18, r24
    546c:	39 07       	cpc	r19, r25
    546e:	84 f3       	brlt	.-32     	; 0x5450 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    5470:	8d 2f       	mov	r24, r29
    5472:	90 e0       	ldi	r25, 0x00	; 0
    5474:	01 97       	sbiw	r24, 0x01	; 1
    5476:	e8 01       	movw	r28, r16
    5478:	c8 0f       	add	r28, r24
    547a:	d9 1f       	adc	r29, r25
    547c:	0e 94 01 37 	call	0x6e02	; 0x6e02 <TWI_HAL_read_byte_nack>
    5480:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    5482:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    5486:	80 e0       	ldi	r24, 0x00	; 0
    5488:	df 91       	pop	r29
    548a:	cf 91       	pop	r28
    548c:	1f 91       	pop	r17
    548e:	0f 91       	pop	r16
    5490:	ff 90       	pop	r15
    5492:	ef 90       	pop	r14
    5494:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00006dda <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6dda:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6ddc:	0e 94 b6 2c 	call	0x596c	; 0x596c <start_and_write_data>
    6de0:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    6de2:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    6de4:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <TWI_HAL_stop>
	}
	return status;
}
    6de8:	8c 2f       	mov	r24, r28
    6dea:	cf 91       	pop	r28
    6dec:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00006c2a <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6c2a:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6c2c:	0e 94 b6 2c 	call	0x596c	; 0x596c <start_and_write_data>
    6c30:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    6c32:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    6c36:	c1 11       	cpse	r28, r1
    6c38:	02 c0       	rjmp	.+4      	; 0x6c3e <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    6c3a:	80 e0       	ldi	r24, 0x00	; 0
    6c3c:	01 c0       	rjmp	.+2      	; 0x6c40 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    6c3e:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    6c40:	cf 91       	pop	r28
    6c42:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000064c6 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    64c6:	0f 93       	push	r16
    64c8:	1f 93       	push	r17
    64ca:	cf 93       	push	r28
    64cc:	df 93       	push	r29
    64ce:	8b 01       	movw	r16, r22
    64d0:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    64d2:	61 e0       	ldi	r22, 0x01	; 1
    64d4:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <TWI_HAL_start>
    64d8:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    64da:	88 23       	and	r24, r24
    64dc:	21 f0       	breq	.+8      	; 0x64e6 <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    64de:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <TWI_HAL_stop>
		return status;	
    64e2:	8c 2f       	mov	r24, r28
    64e4:	04 c0       	rjmp	.+8      	; 0x64ee <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    64e6:	6d 2f       	mov	r22, r29
    64e8:	c8 01       	movw	r24, r16
    64ea:	0e 94 1e 2a 	call	0x543c	; 0x543c <read_and_stop>
	
}
    64ee:	df 91       	pop	r29
    64f0:	cf 91       	pop	r28
    64f2:	1f 91       	pop	r17
    64f4:	0f 91       	pop	r16
    64f6:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

000065c0 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    65c0:	0f 93       	push	r16
    65c2:	1f 93       	push	r17
    65c4:	cf 93       	push	r28
    65c6:	df 93       	push	r29
    65c8:	8b 01       	movw	r16, r22
    65ca:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    65cc:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <TWI_HAL_repeated_start>
    65d0:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    65d2:	88 23       	and	r24, r24
    65d4:	21 f0       	breq	.+8      	; 0x65de <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    65d6:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <TWI_HAL_stop>
		return status;
    65da:	8c 2f       	mov	r24, r28
    65dc:	04 c0       	rjmp	.+8      	; 0x65e6 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    65de:	6d 2f       	mov	r22, r29
    65e0:	c8 01       	movw	r24, r16
    65e2:	0e 94 1e 2a 	call	0x543c	; 0x543c <read_and_stop>
	
}
    65e6:	df 91       	pop	r29
    65e8:	cf 91       	pop	r28
    65ea:	1f 91       	pop	r17
    65ec:	0f 91       	pop	r16
    65ee:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00006e3e <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    6e3e:	80 e2       	ldi	r24, 0x20	; 32
    6e40:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    6e44:	e9 eb       	ldi	r30, 0xB9	; 185
    6e46:	f0 e0       	ldi	r31, 0x00	; 0
    6e48:	80 81       	ld	r24, Z
    6e4a:	8c 7f       	andi	r24, 0xFC	; 252
    6e4c:	80 83       	st	Z, r24
    6e4e:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00005c14 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	88 0f       	add	r24, r24
    5c18:	99 1f       	adc	r25, r25
    5c1a:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    5c1c:	84 ea       	ldi	r24, 0xA4	; 164
    5c1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5c22:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5c26:	99 23       	and	r25, r25
    5c28:	e4 f7       	brge	.-8      	; 0x5c22 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    5c2a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5c2e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    5c30:	88 30       	cpi	r24, 0x08	; 8
    5c32:	99 f4       	brne	.+38     	; 0x5c5a <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    5c34:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    5c38:	84 e8       	ldi	r24, 0x84	; 132
    5c3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5c3e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5c42:	88 23       	and	r24, r24
    5c44:	e4 f7       	brge	.-8      	; 0x5c3e <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    5c46:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5c4a:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    5c4c:	88 31       	cpi	r24, 0x18	; 24
    5c4e:	21 f0       	breq	.+8      	; 0x5c58 <TWI_HAL_start+0x44>
    5c50:	80 34       	cpi	r24, 0x40	; 64
    5c52:	19 f4       	brne	.+6      	; 0x5c5a <TWI_HAL_start+0x46>
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	08 95       	ret
    5c58:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    5c5a:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00005f60 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	88 0f       	add	r24, r24
    5f64:	99 1f       	adc	r25, r25
    5f66:	28 2f       	mov	r18, r24
    5f68:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    5f6a:	84 ea       	ldi	r24, 0xA4	; 164
    5f6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5f70:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5f74:	99 23       	and	r25, r25
    5f76:	e4 f7       	brge	.-8      	; 0x5f70 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    5f78:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5f7c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    5f7e:	80 31       	cpi	r24, 0x10	; 16
    5f80:	79 f4       	brne	.+30     	; 0x5fa0 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    5f82:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    5f86:	84 e8       	ldi	r24, 0x84	; 132
    5f88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5f8c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5f90:	88 23       	and	r24, r24
    5f92:	e4 f7       	brge	.-8      	; 0x5f8c <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    5f94:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5f98:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    5f9a:	80 34       	cpi	r24, 0x40	; 64
    5f9c:	09 f4       	brne	.+2      	; 0x5fa0 <TWI_HAL_repeated_start+0x40>
    5f9e:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    5fa0:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00006a6c <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    6a6c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    6a70:	84 e8       	ldi	r24, 0x84	; 132
    6a72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    6a76:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6a7a:	88 23       	and	r24, r24
    6a7c:	e4 f7       	brge	.-8      	; 0x6a76 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    6a7e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    6a82:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    6a84:	88 32       	cpi	r24, 0x28	; 40
    6a86:	09 f4       	brne	.+2      	; 0x6a8a <TWI_HAL_write_byte+0x1e>
    6a88:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    6a8a:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00006dee <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    6dee:	84 ec       	ldi	r24, 0xC4	; 196
    6df0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    6df4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6df8:	88 23       	and	r24, r24
    6dfa:	e4 f7       	brge	.-8      	; 0x6df4 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    6dfc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6e00:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00006e02 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    6e02:	84 e8       	ldi	r24, 0x84	; 132
    6e04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    6e08:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6e0c:	88 23       	and	r24, r24
    6e0e:	e4 f7       	brge	.-8      	; 0x6e08 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    6e10:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6e14:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00006ee0 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    6ee0:	84 e9       	ldi	r24, 0x94	; 148
    6ee2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    6ee6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6eea:	84 fd       	sbrc	r24, 4
    6eec:	fc cf       	rjmp	.-8      	; 0x6ee6 <TWI_HAL_stop+0x6>
}
    6eee:	08 95       	ret

Disassembly of section .text.copy_buffer:

00006770 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    6770:	bc 01       	movw	r22, r24
    6772:	90 e0       	ldi	r25, 0x00	; 0
    6774:	09 c0       	rjmp	.+18     	; 0x6788 <copy_buffer+0x18>
    6776:	fb 01       	movw	r30, r22
    6778:	e9 0f       	add	r30, r25
    677a:	f1 1d       	adc	r31, r1
    677c:	da 01       	movw	r26, r20
    677e:	a0 50       	subi	r26, 0x00	; 0
    6780:	bf 4f       	sbci	r27, 0xFF	; 255
    6782:	2c 91       	ld	r18, X
    6784:	20 83       	st	Z, r18
    6786:	9f 5f       	subi	r25, 0xFF	; 255
    6788:	49 2f       	mov	r20, r25
    678a:	50 e0       	ldi	r21, 0x00	; 0
    678c:	20 91 e0 0e 	lds	r18, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    6790:	30 e0       	ldi	r19, 0x00	; 0
    6792:	22 50       	subi	r18, 0x02	; 2
    6794:	31 09       	sbc	r19, r1
    6796:	42 17       	cp	r20, r18
    6798:	53 07       	cpc	r21, r19
    679a:	6c f3       	brlt	.-38     	; 0x6776 <copy_buffer+0x6>
    679c:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

000060a2 <uart0_hal_init>:
    60a2:	e1 ec       	ldi	r30, 0xC1	; 193
    60a4:	f0 e0       	ldi	r31, 0x00	; 0
    60a6:	80 81       	ld	r24, Z
    60a8:	80 61       	ori	r24, 0x10	; 16
    60aa:	80 83       	st	Z, r24
    60ac:	80 81       	ld	r24, Z
    60ae:	88 60       	ori	r24, 0x08	; 8
    60b0:	80 83       	st	Z, r24
    60b2:	80 81       	ld	r24, Z
    60b4:	80 68       	ori	r24, 0x80	; 128
    60b6:	80 83       	st	Z, r24
    60b8:	80 81       	ld	r24, Z
    60ba:	80 64       	ori	r24, 0x40	; 64
    60bc:	80 83       	st	Z, r24
    60be:	e0 ec       	ldi	r30, 0xC0	; 192
    60c0:	f0 e0       	ldi	r31, 0x00	; 0
    60c2:	80 81       	ld	r24, Z
    60c4:	82 60       	ori	r24, 0x02	; 2
    60c6:	80 83       	st	Z, r24
    60c8:	86 e0       	ldi	r24, 0x06	; 6
    60ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    60ce:	80 e1       	ldi	r24, 0x10	; 16
    60d0:	90 e0       	ldi	r25, 0x00	; 0
    60d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    60d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    60da:	78 94       	sei
    60dc:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00005882 <uart0_hal_send_message>:
    5882:	dc 01       	movw	r26, r24
    5884:	80 91 c1 0e 	lds	r24, 0x0EC1	; 0x800ec1 <tx_buffer_data_len>
    5888:	90 91 c2 0e 	lds	r25, 0x0EC2	; 0x800ec2 <tx_buffer_data_len+0x1>
    588c:	89 2b       	or	r24, r25
    588e:	d1 f7       	brne	.-12     	; 0x5884 <uart0_hal_send_message+0x2>
    5890:	90 e0       	ldi	r25, 0x00	; 0
    5892:	0b c0       	rjmp	.+22     	; 0x58aa <uart0_hal_send_message+0x28>
    5894:	29 2f       	mov	r18, r25
    5896:	30 e0       	ldi	r19, 0x00	; 0
    5898:	fd 01       	movw	r30, r26
    589a:	e2 0f       	add	r30, r18
    589c:	f3 1f       	adc	r31, r19
    589e:	40 81       	ld	r20, Z
    58a0:	f9 01       	movw	r30, r18
    58a2:	ea 56       	subi	r30, 0x6A	; 106
    58a4:	fe 4f       	sbci	r31, 0xFE	; 254
    58a6:	40 83       	st	Z, r20
    58a8:	9f 5f       	subi	r25, 0xFF	; 255
    58aa:	96 17       	cp	r25, r22
    58ac:	98 f3       	brcs	.-26     	; 0x5894 <uart0_hal_send_message+0x12>
    58ae:	86 2f       	mov	r24, r22
    58b0:	90 e0       	ldi	r25, 0x00	; 0
    58b2:	90 93 c2 0e 	sts	0x0EC2, r25	; 0x800ec2 <tx_buffer_data_len+0x1>
    58b6:	80 93 c1 0e 	sts	0x0EC1, r24	; 0x800ec1 <tx_buffer_data_len>
    58ba:	81 e0       	ldi	r24, 0x01	; 1
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	90 93 c0 0e 	sts	0x0EC0, r25	; 0x800ec0 <tx_buffer_cursor+0x1>
    58c2:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <tx_buffer_cursor>
    58c6:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    58ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    58ce:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

0000483a <uart0_hal_send_string>:
    483a:	6f 92       	push	r6
    483c:	7f 92       	push	r7
    483e:	8f 92       	push	r8
    4840:	cf 92       	push	r12
    4842:	df 92       	push	r13
    4844:	ef 92       	push	r14
    4846:	3b 01       	movw	r6, r22
    4848:	88 2e       	mov	r8, r24
    484a:	80 91 c1 0e 	lds	r24, 0x0EC1	; 0x800ec1 <tx_buffer_data_len>
    484e:	90 91 c2 0e 	lds	r25, 0x0EC2	; 0x800ec2 <tx_buffer_data_len+0x1>
    4852:	89 2b       	or	r24, r25
    4854:	d1 f7       	brne	.-12     	; 0x484a <uart0_hal_send_string+0x10>
    4856:	88 2d       	mov	r24, r8
    4858:	b3 01       	movw	r22, r6
    485a:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    485e:	bc 01       	movw	r22, r24
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	11 c0       	rjmp	.+34     	; 0x4888 <uart0_hal_send_string+0x4e>
    4866:	e8 2c       	mov	r14, r8
    4868:	63 01       	movw	r12, r6
    486a:	c2 0e       	add	r12, r18
    486c:	d3 1e       	adc	r13, r19
    486e:	e1 1c       	adc	r14, r1
    4870:	37 fd       	sbrc	r19, 7
    4872:	ea 94       	dec	r14
    4874:	f6 01       	movw	r30, r12
    4876:	94 91       	lpm	r25, Z
    4878:	e7 fc       	sbrc	r14, 7
    487a:	90 81       	ld	r25, Z
    487c:	f9 01       	movw	r30, r18
    487e:	ea 56       	subi	r30, 0x6A	; 106
    4880:	fe 4f       	sbci	r31, 0xFE	; 254
    4882:	90 83       	st	Z, r25
    4884:	2f 5f       	subi	r18, 0xFF	; 255
    4886:	3f 4f       	sbci	r19, 0xFF	; 255
    4888:	26 17       	cp	r18, r22
    488a:	37 07       	cpc	r19, r23
    488c:	60 f3       	brcs	.-40     	; 0x4866 <uart0_hal_send_string+0x2c>
    488e:	70 93 c2 0e 	sts	0x0EC2, r23	; 0x800ec2 <tx_buffer_data_len+0x1>
    4892:	60 93 c1 0e 	sts	0x0EC1, r22	; 0x800ec1 <tx_buffer_data_len>
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	90 93 c0 0e 	sts	0x0EC0, r25	; 0x800ec0 <tx_buffer_cursor+0x1>
    489e:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <tx_buffer_cursor>
    48a2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    48a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    48aa:	ef 90       	pop	r14
    48ac:	df 90       	pop	r13
    48ae:	cf 90       	pop	r12
    48b0:	8f 90       	pop	r8
    48b2:	7f 90       	pop	r7
    48b4:	6f 90       	pop	r6
    48b6:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00006f64 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    6f64:	90 91 df 0e 	lds	r25, 0x0EDF	; 0x800edf <rx_buffer_has_message>
    6f68:	81 e0       	ldi	r24, 0x01	; 1
    6f6a:	91 11       	cpse	r25, r1
    6f6c:	01 c0       	rjmp	.+2      	; 0x6f70 <uart0_hal_message_ready+0xc>
    6f6e:	80 e0       	ldi	r24, 0x00	; 0
}
    6f70:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00007124 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    7124:	10 92 df 0e 	sts	0x0EDF, r1	; 0x800edf <rx_buffer_has_message>
	rx_buffer_data_len=0;
    7128:	10 92 e0 0e 	sts	0x0EE0, r1	; 0x800ee0 <rx_buffer_data_len>
    712c:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00006850 <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    6850:	0f 93       	push	r16
    6852:	1f 93       	push	r17
    6854:	cf 93       	push	r28
    6856:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    6858:	0e 94 b8 33 	call	0x6770	; 0x6770 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    685c:	c0 91 e0 0e 	lds	r28, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    6860:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    6862:	f8 01       	movw	r30, r16
    6864:	ec 0f       	add	r30, r28
    6866:	f1 1d       	adc	r31, r1
    6868:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    686a:	0e 94 92 38 	call	0x7124	; 0x7124 <uart0_hal_clear_rx_buffer>
	return len;
}
    686e:	8c 2f       	mov	r24, r28
    6870:	cf 91       	pop	r28
    6872:	1f 91       	pop	r17
    6874:	0f 91       	pop	r16
    6876:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00005d7c <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5d7c:	cf 93       	push	r28
    5d7e:	df 93       	push	r29
    5d80:	1f 92       	push	r1
    5d82:	cd b7       	in	r28, 0x3d	; 61
    5d84:	de b7       	in	r29, 0x3e	; 62
    5d86:	9a b1       	in	r25, 0x0a	; 10
    5d88:	92 60       	ori	r25, 0x02	; 2
    5d8a:	9a b9       	out	0x0a, r25	; 10
    5d8c:	e1 ec       	ldi	r30, 0xC1	; 193
    5d8e:	f0 e0       	ldi	r31, 0x00	; 0
    5d90:	90 81       	ld	r25, Z
    5d92:	97 7f       	andi	r25, 0xF7	; 247
    5d94:	90 83       	st	Z, r25
    5d96:	9b b1       	in	r25, 0x0b	; 11
    5d98:	9d 7f       	andi	r25, 0xFD	; 253
    5d9a:	9b b9       	out	0x0b, r25	; 11
    5d9c:	af e9       	ldi	r26, 0x9F	; 159
    5d9e:	bf e0       	ldi	r27, 0x0F	; 15
    5da0:	11 97       	sbiw	r26, 0x01	; 1
    5da2:	f1 f7       	brne	.-4      	; 0x5da0 <uart0_hal_send_break+0x24>
    5da4:	00 c0       	rjmp	.+0      	; 0x5da6 <uart0_hal_send_break+0x2a>
    5da6:	00 00       	nop
    5da8:	90 81       	ld	r25, Z
    5daa:	98 60       	ori	r25, 0x08	; 8
    5dac:	90 83       	st	Z, r25
    5dae:	89 83       	std	Y+1, r24	; 0x01
    5db0:	61 e0       	ldi	r22, 0x01	; 1
    5db2:	ce 01       	movw	r24, r28
    5db4:	01 96       	adiw	r24, 0x01	; 1
    5db6:	0e 94 41 2c 	call	0x5882	; 0x5882 <uart0_hal_send_message>
    5dba:	0f 90       	pop	r0
    5dbc:	df 91       	pop	r29
    5dbe:	cf 91       	pop	r28
    5dc0:	08 95       	ret

Disassembly of section .text.__vector_22:

00004e48 <__vector_22>:
    4e48:	1f 92       	push	r1
    4e4a:	0f 92       	push	r0
    4e4c:	0f b6       	in	r0, 0x3f	; 63
    4e4e:	0f 92       	push	r0
    4e50:	11 24       	eor	r1, r1
    4e52:	2f 93       	push	r18
    4e54:	3f 93       	push	r19
    4e56:	8f 93       	push	r24
    4e58:	9f 93       	push	r25
    4e5a:	ef 93       	push	r30
    4e5c:	ff 93       	push	r31
    4e5e:	80 91 bf 0e 	lds	r24, 0x0EBF	; 0x800ebf <tx_buffer_cursor>
    4e62:	90 91 c0 0e 	lds	r25, 0x0EC0	; 0x800ec0 <tx_buffer_cursor+0x1>
    4e66:	20 91 c1 0e 	lds	r18, 0x0EC1	; 0x800ec1 <tx_buffer_data_len>
    4e6a:	30 91 c2 0e 	lds	r19, 0x0EC2	; 0x800ec2 <tx_buffer_data_len+0x1>
    4e6e:	82 17       	cp	r24, r18
    4e70:	93 07       	cpc	r25, r19
    4e72:	70 f4       	brcc	.+28     	; 0x4e90 <__vector_22+0x48>
    4e74:	9c 01       	movw	r18, r24
    4e76:	2f 5f       	subi	r18, 0xFF	; 255
    4e78:	3f 4f       	sbci	r19, 0xFF	; 255
    4e7a:	30 93 c0 0e 	sts	0x0EC0, r19	; 0x800ec0 <tx_buffer_cursor+0x1>
    4e7e:	20 93 bf 0e 	sts	0x0EBF, r18	; 0x800ebf <tx_buffer_cursor>
    4e82:	fc 01       	movw	r30, r24
    4e84:	ea 56       	subi	r30, 0x6A	; 106
    4e86:	fe 4f       	sbci	r31, 0xFE	; 254
    4e88:	80 81       	ld	r24, Z
    4e8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4e8e:	08 c0       	rjmp	.+16     	; 0x4ea0 <__vector_22+0x58>
    4e90:	10 92 c0 0e 	sts	0x0EC0, r1	; 0x800ec0 <tx_buffer_cursor+0x1>
    4e94:	10 92 bf 0e 	sts	0x0EBF, r1	; 0x800ebf <tx_buffer_cursor>
    4e98:	10 92 c2 0e 	sts	0x0EC2, r1	; 0x800ec2 <tx_buffer_data_len+0x1>
    4e9c:	10 92 c1 0e 	sts	0x0EC1, r1	; 0x800ec1 <tx_buffer_data_len>
    4ea0:	ff 91       	pop	r31
    4ea2:	ef 91       	pop	r30
    4ea4:	9f 91       	pop	r25
    4ea6:	8f 91       	pop	r24
    4ea8:	3f 91       	pop	r19
    4eaa:	2f 91       	pop	r18
    4eac:	0f 90       	pop	r0
    4eae:	0f be       	out	0x3f, r0	; 63
    4eb0:	0f 90       	pop	r0
    4eb2:	1f 90       	pop	r1
    4eb4:	18 95       	reti

Disassembly of section .text.__vector_20:

00004c80 <__vector_20>:
    4c80:	1f 92       	push	r1
    4c82:	0f 92       	push	r0
    4c84:	0f b6       	in	r0, 0x3f	; 63
    4c86:	0f 92       	push	r0
    4c88:	11 24       	eor	r1, r1
    4c8a:	2f 93       	push	r18
    4c8c:	8f 93       	push	r24
    4c8e:	9f 93       	push	r25
    4c90:	ef 93       	push	r30
    4c92:	ff 93       	push	r31
    4c94:	80 91 df 0e 	lds	r24, 0x0EDF	; 0x800edf <rx_buffer_has_message>
    4c98:	81 11       	cpse	r24, r1
    4c9a:	0e c0       	rjmp	.+28     	; 0x4cb8 <__vector_20+0x38>
    4c9c:	e0 91 e0 0e 	lds	r30, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    4ca0:	e6 39       	cpi	r30, 0x96	; 150
    4ca2:	50 f4       	brcc	.+20     	; 0x4cb8 <__vector_20+0x38>
    4ca4:	81 e0       	ldi	r24, 0x01	; 1
    4ca6:	8e 0f       	add	r24, r30
    4ca8:	80 93 e0 0e 	sts	0x0EE0, r24	; 0x800ee0 <rx_buffer_data_len>
    4cac:	f0 e0       	ldi	r31, 0x00	; 0
    4cae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4cb2:	e0 50       	subi	r30, 0x00	; 0
    4cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb6:	80 83       	st	Z, r24
    4cb8:	80 91 e0 0e 	lds	r24, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    4cbc:	83 30       	cpi	r24, 0x03	; 3
    4cbe:	80 f0       	brcs	.+32     	; 0x4ce0 <__vector_20+0x60>
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	e1 50       	subi	r30, 0x01	; 1
    4cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc8:	20 81       	ld	r18, Z
    4cca:	2a 30       	cpi	r18, 0x0A	; 10
    4ccc:	49 f4       	brne	.+18     	; 0x4ce0 <__vector_20+0x60>
    4cce:	fc 01       	movw	r30, r24
    4cd0:	e2 50       	subi	r30, 0x02	; 2
    4cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd4:	80 81       	ld	r24, Z
    4cd6:	8d 30       	cpi	r24, 0x0D	; 13
    4cd8:	19 f4       	brne	.+6      	; 0x4ce0 <__vector_20+0x60>
    4cda:	81 e0       	ldi	r24, 0x01	; 1
    4cdc:	80 93 df 0e 	sts	0x0EDF, r24	; 0x800edf <rx_buffer_has_message>
    4ce0:	ff 91       	pop	r31
    4ce2:	ef 91       	pop	r30
    4ce4:	9f 91       	pop	r25
    4ce6:	8f 91       	pop	r24
    4ce8:	2f 91       	pop	r18
    4cea:	0f 90       	pop	r0
    4cec:	0f be       	out	0x3f, r0	; 63
    4cee:	0f 90       	pop	r0
    4cf0:	1f 90       	pop	r1
    4cf2:	18 95       	reti

Disassembly of section .text.copy_buffer:

0000679e <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    679e:	bc 01       	movw	r22, r24
    67a0:	90 e0       	ldi	r25, 0x00	; 0
    67a2:	09 c0       	rjmp	.+18     	; 0x67b6 <copy_buffer+0x18>
    67a4:	fb 01       	movw	r30, r22
    67a6:	e9 0f       	add	r30, r25
    67a8:	f1 1d       	adc	r31, r1
    67aa:	da 01       	movw	r26, r20
    67ac:	a5 57       	subi	r26, 0x75	; 117
    67ae:	b2 4f       	sbci	r27, 0xF2	; 242
    67b0:	2c 91       	ld	r18, X
    67b2:	20 83       	st	Z, r18
    67b4:	9f 5f       	subi	r25, 0xFF	; 255
    67b6:	49 2f       	mov	r20, r25
    67b8:	50 e0       	ldi	r21, 0x00	; 0
    67ba:	20 91 e2 0e 	lds	r18, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    67be:	30 e0       	ldi	r19, 0x00	; 0
    67c0:	22 50       	subi	r18, 0x02	; 2
    67c2:	31 09       	sbc	r19, r1
    67c4:	42 17       	cp	r20, r18
    67c6:	53 07       	cpc	r21, r19
    67c8:	6c f3       	brlt	.-38     	; 0x67a4 <copy_buffer+0x6>
    67ca:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

000060de <uart1_hal_init>:
    60de:	e9 ec       	ldi	r30, 0xC9	; 201
    60e0:	f0 e0       	ldi	r31, 0x00	; 0
    60e2:	80 81       	ld	r24, Z
    60e4:	80 61       	ori	r24, 0x10	; 16
    60e6:	80 83       	st	Z, r24
    60e8:	80 81       	ld	r24, Z
    60ea:	88 60       	ori	r24, 0x08	; 8
    60ec:	80 83       	st	Z, r24
    60ee:	80 81       	ld	r24, Z
    60f0:	80 68       	ori	r24, 0x80	; 128
    60f2:	80 83       	st	Z, r24
    60f4:	80 81       	ld	r24, Z
    60f6:	80 64       	ori	r24, 0x40	; 64
    60f8:	80 83       	st	Z, r24
    60fa:	e8 ec       	ldi	r30, 0xC8	; 200
    60fc:	f0 e0       	ldi	r31, 0x00	; 0
    60fe:	80 81       	ld	r24, Z
    6100:	82 60       	ori	r24, 0x02	; 2
    6102:	80 83       	st	Z, r24
    6104:	86 e0       	ldi	r24, 0x06	; 6
    6106:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    610a:	80 e1       	ldi	r24, 0x10	; 16
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    6112:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    6116:	78 94       	sei
    6118:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

0000443c <uart1_hal_send_string>:
    443c:	6f 92       	push	r6
    443e:	7f 92       	push	r7
    4440:	8f 92       	push	r8
    4442:	cf 92       	push	r12
    4444:	df 92       	push	r13
    4446:	ef 92       	push	r14
    4448:	3b 01       	movw	r6, r22
    444a:	88 2e       	mov	r8, r24
    444c:	80 91 c5 0e 	lds	r24, 0x0EC5	; 0x800ec5 <tx_buffer_data_len>
    4450:	90 91 c6 0e 	lds	r25, 0x0EC6	; 0x800ec6 <tx_buffer_data_len+0x1>
    4454:	89 2b       	or	r24, r25
    4456:	d1 f7       	brne	.-12     	; 0x444c <uart1_hal_send_string+0x10>
    4458:	88 2d       	mov	r24, r8
    445a:	b3 01       	movw	r22, r6
    445c:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    4460:	bc 01       	movw	r22, r24
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	11 c0       	rjmp	.+34     	; 0x448a <uart1_hal_send_string+0x4e>
    4468:	e8 2c       	mov	r14, r8
    446a:	63 01       	movw	r12, r6
    446c:	c2 0e       	add	r12, r18
    446e:	d3 1e       	adc	r13, r19
    4470:	e1 1c       	adc	r14, r1
    4472:	37 fd       	sbrc	r19, 7
    4474:	ea 94       	dec	r14
    4476:	f6 01       	movw	r30, r12
    4478:	94 91       	lpm	r25, Z
    447a:	e7 fc       	sbrc	r14, 7
    447c:	90 81       	ld	r25, Z
    447e:	f9 01       	movw	r30, r18
    4480:	e8 52       	subi	r30, 0x28	; 40
    4482:	f8 4f       	sbci	r31, 0xF8	; 248
    4484:	90 83       	st	Z, r25
    4486:	2f 5f       	subi	r18, 0xFF	; 255
    4488:	3f 4f       	sbci	r19, 0xFF	; 255
    448a:	26 17       	cp	r18, r22
    448c:	37 07       	cpc	r19, r23
    448e:	60 f3       	brcs	.-40     	; 0x4468 <uart1_hal_send_string+0x2c>
    4490:	fb 01       	movw	r30, r22
    4492:	e8 52       	subi	r30, 0x28	; 40
    4494:	f8 4f       	sbci	r31, 0xF8	; 248
    4496:	8d e0       	ldi	r24, 0x0D	; 13
    4498:	80 83       	st	Z, r24
    449a:	fb 01       	movw	r30, r22
    449c:	e7 52       	subi	r30, 0x27	; 39
    449e:	f8 4f       	sbci	r31, 0xF8	; 248
    44a0:	8a e0       	ldi	r24, 0x0A	; 10
    44a2:	80 83       	st	Z, r24
    44a4:	6e 5f       	subi	r22, 0xFE	; 254
    44a6:	7f 4f       	sbci	r23, 0xFF	; 255
    44a8:	70 93 c6 0e 	sts	0x0EC6, r23	; 0x800ec6 <tx_buffer_data_len+0x1>
    44ac:	60 93 c5 0e 	sts	0x0EC5, r22	; 0x800ec5 <tx_buffer_data_len>
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	90 93 c4 0e 	sts	0x0EC4, r25	; 0x800ec4 <tx_buffer_cursor+0x1>
    44b8:	80 93 c3 0e 	sts	0x0EC3, r24	; 0x800ec3 <tx_buffer_cursor>
    44bc:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <_end>
    44c0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    44c4:	ef 90       	pop	r14
    44c6:	df 90       	pop	r13
    44c8:	cf 90       	pop	r12
    44ca:	8f 90       	pop	r8
    44cc:	7f 90       	pop	r7
    44ce:	6f 90       	pop	r6
    44d0:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00006f72 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    6f72:	90 91 e1 0e 	lds	r25, 0x0EE1	; 0x800ee1 <rx_buffer_has_message>
    6f76:	81 e0       	ldi	r24, 0x01	; 1
    6f78:	91 11       	cpse	r25, r1
    6f7a:	01 c0       	rjmp	.+2      	; 0x6f7e <uart1_hal_message_ready+0xc>
    6f7c:	80 e0       	ldi	r24, 0x00	; 0
}
    6f7e:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00006f80 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    6f80:	90 91 e2 0e 	lds	r25, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    6f84:	81 e0       	ldi	r24, 0x01	; 1
    6f86:	9a 34       	cpi	r25, 0x4A	; 74
    6f88:	08 f4       	brcc	.+2      	; 0x6f8c <uart1_hal_rx_full+0xc>
    6f8a:	80 e0       	ldi	r24, 0x00	; 0
}
    6f8c:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

0000712e <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    712e:	10 92 e1 0e 	sts	0x0EE1, r1	; 0x800ee1 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    7132:	10 92 e2 0e 	sts	0x0EE2, r1	; 0x800ee2 <rx_buffer_data_len>
    7136:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00006878 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    6878:	0f 93       	push	r16
    687a:	1f 93       	push	r17
    687c:	cf 93       	push	r28
    687e:	8c 01       	movw	r16, r24
    6880:	0e 94 cf 33 	call	0x679e	; 0x679e <copy_buffer>
    6884:	c0 91 e2 0e 	lds	r28, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    6888:	c2 50       	subi	r28, 0x02	; 2
    688a:	f8 01       	movw	r30, r16
    688c:	ec 0f       	add	r30, r28
    688e:	f1 1d       	adc	r31, r1
    6890:	10 82       	st	Z, r1
    6892:	0e 94 97 38 	call	0x712e	; 0x712e <uart1_hal_clear_rx_buffer>
    6896:	8c 2f       	mov	r24, r28
    6898:	cf 91       	pop	r28
    689a:	1f 91       	pop	r17
    689c:	0f 91       	pop	r16
    689e:	08 95       	ret

Disassembly of section .text.__vector_30:

00004eb6 <__vector_30>:
    4eb6:	1f 92       	push	r1
    4eb8:	0f 92       	push	r0
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	0f 92       	push	r0
    4ebe:	11 24       	eor	r1, r1
    4ec0:	2f 93       	push	r18
    4ec2:	3f 93       	push	r19
    4ec4:	8f 93       	push	r24
    4ec6:	9f 93       	push	r25
    4ec8:	ef 93       	push	r30
    4eca:	ff 93       	push	r31
    4ecc:	80 91 c3 0e 	lds	r24, 0x0EC3	; 0x800ec3 <tx_buffer_cursor>
    4ed0:	90 91 c4 0e 	lds	r25, 0x0EC4	; 0x800ec4 <tx_buffer_cursor+0x1>
    4ed4:	20 91 c5 0e 	lds	r18, 0x0EC5	; 0x800ec5 <tx_buffer_data_len>
    4ed8:	30 91 c6 0e 	lds	r19, 0x0EC6	; 0x800ec6 <tx_buffer_data_len+0x1>
    4edc:	82 17       	cp	r24, r18
    4ede:	93 07       	cpc	r25, r19
    4ee0:	70 f4       	brcc	.+28     	; 0x4efe <__vector_30+0x48>
    4ee2:	9c 01       	movw	r18, r24
    4ee4:	2f 5f       	subi	r18, 0xFF	; 255
    4ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ee8:	30 93 c4 0e 	sts	0x0EC4, r19	; 0x800ec4 <tx_buffer_cursor+0x1>
    4eec:	20 93 c3 0e 	sts	0x0EC3, r18	; 0x800ec3 <tx_buffer_cursor>
    4ef0:	fc 01       	movw	r30, r24
    4ef2:	e8 52       	subi	r30, 0x28	; 40
    4ef4:	f8 4f       	sbci	r31, 0xF8	; 248
    4ef6:	80 81       	ld	r24, Z
    4ef8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4efc:	08 c0       	rjmp	.+16     	; 0x4f0e <__vector_30+0x58>
    4efe:	10 92 c4 0e 	sts	0x0EC4, r1	; 0x800ec4 <tx_buffer_cursor+0x1>
    4f02:	10 92 c3 0e 	sts	0x0EC3, r1	; 0x800ec3 <tx_buffer_cursor>
    4f06:	10 92 c6 0e 	sts	0x0EC6, r1	; 0x800ec6 <tx_buffer_data_len+0x1>
    4f0a:	10 92 c5 0e 	sts	0x0EC5, r1	; 0x800ec5 <tx_buffer_data_len>
    4f0e:	ff 91       	pop	r31
    4f10:	ef 91       	pop	r30
    4f12:	9f 91       	pop	r25
    4f14:	8f 91       	pop	r24
    4f16:	3f 91       	pop	r19
    4f18:	2f 91       	pop	r18
    4f1a:	0f 90       	pop	r0
    4f1c:	0f be       	out	0x3f, r0	; 63
    4f1e:	0f 90       	pop	r0
    4f20:	1f 90       	pop	r1
    4f22:	18 95       	reti

Disassembly of section .text.__vector_28:

00004cf4 <__vector_28>:
    4cf4:	1f 92       	push	r1
    4cf6:	0f 92       	push	r0
    4cf8:	0f b6       	in	r0, 0x3f	; 63
    4cfa:	0f 92       	push	r0
    4cfc:	11 24       	eor	r1, r1
    4cfe:	2f 93       	push	r18
    4d00:	8f 93       	push	r24
    4d02:	9f 93       	push	r25
    4d04:	ef 93       	push	r30
    4d06:	ff 93       	push	r31
    4d08:	80 91 e1 0e 	lds	r24, 0x0EE1	; 0x800ee1 <rx_buffer_has_message>
    4d0c:	81 11       	cpse	r24, r1
    4d0e:	0e c0       	rjmp	.+28     	; 0x4d2c <__vector_28+0x38>
    4d10:	e0 91 e2 0e 	lds	r30, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    4d14:	eb 34       	cpi	r30, 0x4B	; 75
    4d16:	50 f4       	brcc	.+20     	; 0x4d2c <__vector_28+0x38>
    4d18:	81 e0       	ldi	r24, 0x01	; 1
    4d1a:	8e 0f       	add	r24, r30
    4d1c:	80 93 e2 0e 	sts	0x0EE2, r24	; 0x800ee2 <rx_buffer_data_len>
    4d20:	f0 e0       	ldi	r31, 0x00	; 0
    4d22:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4d26:	e5 57       	subi	r30, 0x75	; 117
    4d28:	f2 4f       	sbci	r31, 0xF2	; 242
    4d2a:	80 83       	st	Z, r24
    4d2c:	80 91 e2 0e 	lds	r24, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    4d30:	83 30       	cpi	r24, 0x03	; 3
    4d32:	80 f0       	brcs	.+32     	; 0x4d54 <__vector_28+0x60>
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	fc 01       	movw	r30, r24
    4d38:	e6 57       	subi	r30, 0x76	; 118
    4d3a:	f2 4f       	sbci	r31, 0xF2	; 242
    4d3c:	20 81       	ld	r18, Z
    4d3e:	2a 30       	cpi	r18, 0x0A	; 10
    4d40:	49 f4       	brne	.+18     	; 0x4d54 <__vector_28+0x60>
    4d42:	fc 01       	movw	r30, r24
    4d44:	e7 57       	subi	r30, 0x77	; 119
    4d46:	f2 4f       	sbci	r31, 0xF2	; 242
    4d48:	80 81       	ld	r24, Z
    4d4a:	8d 30       	cpi	r24, 0x0D	; 13
    4d4c:	19 f4       	brne	.+6      	; 0x4d54 <__vector_28+0x60>
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	80 93 e1 0e 	sts	0x0EE1, r24	; 0x800ee1 <rx_buffer_has_message>
    4d54:	ff 91       	pop	r31
    4d56:	ef 91       	pop	r30
    4d58:	9f 91       	pop	r25
    4d5a:	8f 91       	pop	r24
    4d5c:	2f 91       	pop	r18
    4d5e:	0f 90       	pop	r0
    4d60:	0f be       	out	0x3f, r0	; 63
    4d62:	0f 90       	pop	r0
    4d64:	1f 90       	pop	r1
    4d66:	18 95       	reti

Disassembly of section .text.UI_HAL_jumper_init:

00006f8e <UI_HAL_jumper_init>:

#include "UI_HAL.h"
#include "../../util/bit_operators.h"

void UI_HAL_jumper_init(){
	clear_bit(DDRA, 6);
    6f8e:	81 b1       	in	r24, 0x01	; 1
    6f90:	8f 7b       	andi	r24, 0xBF	; 191
    6f92:	81 b9       	out	0x01, r24	; 1
	set_bit(PORTA, 6); //Pull up, default config mode
    6f94:	82 b1       	in	r24, 0x02	; 2
    6f96:	80 64       	ori	r24, 0x40	; 64
    6f98:	82 b9       	out	0x02, r24	; 2
    6f9a:	08 95       	ret

Disassembly of section .text.UI_HAL_is_config_mode:

00007138 <UI_HAL_is_config_mode>:
}

bool UI_HAL_is_config_mode(){
	return get_bit(PINA, 6);
    7138:	80 b1       	in	r24, 0x00	; 0
}
    713a:	86 fb       	bst	r24, 6
    713c:	88 27       	eor	r24, r24
    713e:	80 f9       	bld	r24, 0
    7140:	08 95       	ret

Disassembly of section .text.main:

00006154 <main>:
		test_runner();
	#endif // _RUN_TEST
	
	#ifndef _RUN_TEST 

	PM_HAL_LED_power_init();
    6154:	0e 94 a4 37 	call	0x6f48	; 0x6f48 <PM_HAL_LED_power_init>
	UI_HAL_jumper_init();
    6158:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <UI_HAL_jumper_init>
	
	while(1)
	{
		
		if(UI_HAL_is_config_mode()){
    615c:	0e 94 9c 38 	call	0x7138	; 0x7138 <UI_HAL_is_config_mode>
    6160:	88 23       	and	r24, r24
    6162:	49 f0       	breq	.+18     	; 0x6176 <main+0x22>
			PM_HAL_LED_power(true);
    6164:	81 e0       	ldi	r24, 0x01	; 1
    6166:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <PM_HAL_LED_power>
			CONF_enter();
    616a:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <CONF_enter>
			PM_HAL_LED_power(false);
    616e:	80 e0       	ldi	r24, 0x00	; 0
    6170:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <PM_HAL_LED_power>
    6174:	02 c0       	rjmp	.+4      	; 0x617a <main+0x26>
		}else{
			MAINPG_start();
    6176:	0e 94 8c 08 	call	0x1118	; 0x1118 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    617a:	2f ef       	ldi	r18, 0xFF	; 255
    617c:	81 e1       	ldi	r24, 0x11	; 17
    617e:	9a e7       	ldi	r25, 0x7A	; 122
    6180:	21 50       	subi	r18, 0x01	; 1
    6182:	80 40       	sbci	r24, 0x00	; 0
    6184:	90 40       	sbci	r25, 0x00	; 0
    6186:	e1 f7       	brne	.-8      	; 0x6180 <main+0x2c>
    6188:	00 c0       	rjmp	.+0      	; 0x618a <main+0x36>
    618a:	00 00       	nop
    618c:	e7 cf       	rjmp	.-50     	; 0x615c <main+0x8>

Disassembly of section .text.calc_ppm_methane:

000044d2 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    44d2:	8f 92       	push	r8
    44d4:	9f 92       	push	r9
    44d6:	af 92       	push	r10
    44d8:	bf 92       	push	r11
    44da:	cf 92       	push	r12
    44dc:	df 92       	push	r13
    44de:	ef 92       	push	r14
    44e0:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    44e2:	bc 01       	movw	r22, r24
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	0e 94 d7 24 	call	0x49ae	; 0x49ae <__floatunsisf>
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	40 e8       	ldi	r20, 0x80	; 128
    44f2:	59 e3       	ldi	r21, 0x39	; 57
    44f4:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <__mulsf3>
    44f8:	80 90 a7 0e 	lds	r8, 0x0EA7	; 0x800ea7 <Vc>
    44fc:	90 90 a8 0e 	lds	r9, 0x0EA8	; 0x800ea8 <Vc+0x1>
    4500:	a0 90 a9 0e 	lds	r10, 0x0EA9	; 0x800ea9 <Vc+0x2>
    4504:	b0 90 aa 0e 	lds	r11, 0x0EAA	; 0x800eaa <Vc+0x3>
    4508:	a5 01       	movw	r20, r10
    450a:	94 01       	movw	r18, r8
    450c:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <__mulsf3>
    4510:	6b 01       	movw	r12, r22
    4512:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    4514:	9b 01       	movw	r18, r22
    4516:	ac 01       	movw	r20, r24
    4518:	c5 01       	movw	r24, r10
    451a:	b4 01       	movw	r22, r8
    451c:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <__subsf3>
    4520:	a7 01       	movw	r20, r14
    4522:	96 01       	movw	r18, r12
    4524:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <__divsf3>
    4528:	20 91 a3 0e 	lds	r18, 0x0EA3	; 0x800ea3 <RRL>
    452c:	30 91 a4 0e 	lds	r19, 0x0EA4	; 0x800ea4 <RRL+0x1>
    4530:	40 91 a5 0e 	lds	r20, 0x0EA5	; 0x800ea5 <RRL+0x2>
    4534:	50 91 a6 0e 	lds	r21, 0x0EA6	; 0x800ea6 <RRL+0x3>
    4538:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    453c:	20 91 9f 0e 	lds	r18, 0x0E9F	; 0x800e9f <PPM_factor>
    4540:	30 91 a0 0e 	lds	r19, 0x0EA0	; 0x800ea0 <PPM_factor+0x1>
    4544:	40 91 a1 0e 	lds	r20, 0x0EA1	; 0x800ea1 <PPM_factor+0x2>
    4548:	50 91 a2 0e 	lds	r21, 0x0EA2	; 0x800ea2 <PPM_factor+0x3>
    454c:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <__mulsf3>
    4550:	0e 94 93 29 	call	0x5326	; 0x5326 <__fixunssfsi>
	return PPM;
}
    4554:	cb 01       	movw	r24, r22
    4556:	ff 90       	pop	r15
    4558:	ef 90       	pop	r14
    455a:	df 90       	pop	r13
    455c:	cf 90       	pop	r12
    455e:	bf 90       	pop	r11
    4560:	af 90       	pop	r10
    4562:	9f 90       	pop	r9
    4564:	8f 90       	pop	r8
    4566:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

00006cac <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    6cac:	80 91 e3 0e 	lds	r24, 0x0EE3	; 0x800ee3 <cntPowerUpTime>
    6cb0:	8f 5f       	subi	r24, 0xFF	; 255
    6cb2:	80 93 e3 0e 	sts	0x0EE3, r24	; 0x800ee3 <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    6cb6:	90 91 e4 0e 	lds	r25, 0x0EE4	; 0x800ee4 <_powerUpTime>
    6cba:	89 17       	cp	r24, r25
    6cbc:	10 f0       	brcs	.+4      	; 0x6cc2 <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    6cbe:	0e 94 1f 39 	call	0x723e	; 0x723e <TC0_HAL_stop>
    6cc2:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

000051a0 <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    51a0:	cf 93       	push	r28
	_data=data;
    51a2:	50 93 ca 0e 	sts	0x0ECA, r21	; 0x800eca <_data+0x1>
    51a6:	40 93 c9 0e 	sts	0x0EC9, r20	; 0x800ec9 <_data>
	_nSamples=nSamples;
    51aa:	70 93 cc 0e 	sts	0x0ECC, r23	; 0x800ecc <_nSamples+0x1>
    51ae:	60 93 cb 0e 	sts	0x0ECB, r22	; 0x800ecb <_nSamples>
	cntSamples=0;
    51b2:	10 92 c8 0e 	sts	0x0EC8, r1	; 0x800ec8 <cntSamples+0x1>
    51b6:	10 92 c7 0e 	sts	0x0EC7, r1	; 0x800ec7 <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    51ba:	61 ee       	ldi	r22, 0xE1	; 225
    51bc:	7e e2       	ldi	r23, 0x2E	; 46
    51be:	0e 94 c1 34 	call	0x6982	; 0x6982 <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    51c2:	81 e0       	ldi	r24, 0x01	; 1
    51c4:	0e 94 b1 36 	call	0x6d62	; 0x6d62 <PM_HAL_adc_power>
    51c8:	2f ef       	ldi	r18, 0xFF	; 255
    51ca:	83 ec       	ldi	r24, 0xC3	; 195
    51cc:	99 e0       	ldi	r25, 0x09	; 9
    51ce:	21 50       	subi	r18, 0x01	; 1
    51d0:	80 40       	sbci	r24, 0x00	; 0
    51d2:	90 40       	sbci	r25, 0x00	; 0
    51d4:	e1 f7       	brne	.-8      	; 0x51ce <ADC_init_sampling+0x2e>
    51d6:	00 c0       	rjmp	.+0      	; 0x51d8 <ADC_init_sampling+0x38>
    51d8:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    51da:	60 e0       	ldi	r22, 0x00	; 0
    51dc:	8d e4       	ldi	r24, 0x4D	; 77
    51de:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <TWI_HAL_start>
    51e2:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    51e4:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    51e8:	cc 23       	and	r28, r28
    51ea:	51 f0       	breq	.+20     	; 0x5200 <ADC_init_sampling+0x60>
		_data=NULL;
    51ec:	10 92 ca 0e 	sts	0x0ECA, r1	; 0x800eca <_data+0x1>
    51f0:	10 92 c9 0e 	sts	0x0EC9, r1	; 0x800ec9 <_data>
		_nSamples=0;
    51f4:	10 92 cc 0e 	sts	0x0ECC, r1	; 0x800ecc <_nSamples+0x1>
    51f8:	10 92 cb 0e 	sts	0x0ECB, r1	; 0x800ecb <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    51fc:	82 e0       	ldi	r24, 0x02	; 2
    51fe:	01 c0       	rjmp	.+2      	; 0x5202 <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    5200:	80 e0       	ldi	r24, 0x00	; 0
}
    5202:	cf 91       	pop	r28
    5204:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

00006e16 <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    6e16:	0e 94 1f 39 	call	0x723e	; 0x723e <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    6e1a:	80 e0       	ldi	r24, 0x00	; 0
    6e1c:	0e 94 b1 36 	call	0x6d62	; 0x6d62 <PM_HAL_adc_power>
	_data=NULL;
    6e20:	10 92 ca 0e 	sts	0x0ECA, r1	; 0x800eca <_data+0x1>
    6e24:	10 92 c9 0e 	sts	0x0EC9, r1	; 0x800ec9 <_data>
    6e28:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00006b9e <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    6b9e:	40 91 c7 0e 	lds	r20, 0x0EC7	; 0x800ec7 <cntSamples>
    6ba2:	50 91 c8 0e 	lds	r21, 0x0EC8	; 0x800ec8 <cntSamples+0x1>
    6ba6:	20 91 cb 0e 	lds	r18, 0x0ECB	; 0x800ecb <_nSamples>
    6baa:	30 91 cc 0e 	lds	r19, 0x0ECC	; 0x800ecc <_nSamples+0x1>
    6bae:	81 e0       	ldi	r24, 0x01	; 1
    6bb0:	42 17       	cp	r20, r18
    6bb2:	53 07       	cpc	r21, r19
    6bb4:	08 f4       	brcc	.+2      	; 0x6bb8 <ADC_is_sampling_done+0x1a>
    6bb6:	80 e0       	ldi	r24, 0x00	; 0
}
    6bb8:	08 95       	ret

Disassembly of section .text.ADC_get_value:

000055a0 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    55a0:	0f 93       	push	r16
    55a2:	1f 93       	push	r17
    55a4:	cf 93       	push	r28
    55a6:	df 93       	push	r29
    55a8:	00 d0       	rcall	.+0      	; 0x55aa <ADC_get_value+0xa>
    55aa:	cd b7       	in	r28, 0x3d	; 61
    55ac:	de b7       	in	r29, 0x3e	; 62
    55ae:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    55b0:	8f ef       	ldi	r24, 0xFF	; 255
    55b2:	9f ef       	ldi	r25, 0xFF	; 255
    55b4:	f8 01       	movw	r30, r16
    55b6:	91 83       	std	Z+1, r25	; 0x01
    55b8:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    55ba:	42 e0       	ldi	r20, 0x02	; 2
    55bc:	be 01       	movw	r22, r28
    55be:	6f 5f       	subi	r22, 0xFF	; 255
    55c0:	7f 4f       	sbci	r23, 0xFF	; 255
    55c2:	8d e4       	ldi	r24, 0x4D	; 77
    55c4:	0e 94 63 32 	call	0x64c6	; 0x64c6 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    55c8:	81 11       	cpse	r24, r1
    55ca:	0d c0       	rjmp	.+26     	; 0x55e6 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    55cc:	89 81       	ldd	r24, Y+1	; 0x01
    55ce:	90 e0       	ldi	r25, 0x00	; 0
    55d0:	98 2f       	mov	r25, r24
    55d2:	88 27       	eor	r24, r24
    55d4:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    55d6:	82 2b       	or	r24, r18
    55d8:	0e 94 69 22 	call	0x44d2	; 0x44d2 <calc_ppm_methane>
    55dc:	f8 01       	movw	r30, r16
    55de:	91 83       	std	Z+1, r25	; 0x01
    55e0:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    55e2:	80 e0       	ldi	r24, 0x00	; 0
    55e4:	01 c0       	rjmp	.+2      	; 0x55e8 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    55e6:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    55e8:	0f 90       	pop	r0
    55ea:	0f 90       	pop	r0
    55ec:	df 91       	pop	r29
    55ee:	cf 91       	pop	r28
    55f0:	1f 91       	pop	r17
    55f2:	0f 91       	pop	r16
    55f4:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00005dc2 <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    5dc2:	80 91 c9 0e 	lds	r24, 0x0EC9	; 0x800ec9 <_data>
    5dc6:	90 91 ca 0e 	lds	r25, 0x0ECA	; 0x800eca <_data+0x1>
    5dca:	20 91 c7 0e 	lds	r18, 0x0EC7	; 0x800ec7 <cntSamples>
    5dce:	30 91 c8 0e 	lds	r19, 0x0EC8	; 0x800ec8 <cntSamples+0x1>
    5dd2:	a9 01       	movw	r20, r18
    5dd4:	4f 5f       	subi	r20, 0xFF	; 255
    5dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd8:	50 93 c8 0e 	sts	0x0EC8, r21	; 0x800ec8 <cntSamples+0x1>
    5ddc:	40 93 c7 0e 	sts	0x0EC7, r20	; 0x800ec7 <cntSamples>
    5de0:	22 0f       	add	r18, r18
    5de2:	33 1f       	adc	r19, r19
    5de4:	82 0f       	add	r24, r18
    5de6:	93 1f       	adc	r25, r19
    5de8:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <ADC_get_value>
	if(cntSamples>=_nSamples){
    5dec:	20 91 c7 0e 	lds	r18, 0x0EC7	; 0x800ec7 <cntSamples>
    5df0:	30 91 c8 0e 	lds	r19, 0x0EC8	; 0x800ec8 <cntSamples+0x1>
    5df4:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <_nSamples>
    5df8:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <_nSamples+0x1>
    5dfc:	28 17       	cp	r18, r24
    5dfe:	39 07       	cpc	r19, r25
    5e00:	10 f0       	brcs	.+4      	; 0x5e06 <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    5e02:	0e 94 1f 39 	call	0x723e	; 0x723e <TC0_HAL_stop>
    5e06:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

00007142 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    7142:	0e 94 fc 38 	call	0x71f8	; 0x71f8 <TC0_HAL_start>
	vect_ADC_do_sample();
    7146:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <vect_ADC_do_sample>
    714a:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00006acc <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    6acc:	80 93 e4 0e 	sts	0x0EE4, r24	; 0x800ee4 <_powerUpTime>
	cntPowerUpTime=0;
    6ad0:	10 92 e3 0e 	sts	0x0EE3, r1	; 0x800ee3 <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    6ad4:	81 e0       	ldi	r24, 0x01	; 1
    6ad6:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <PM_HAL_meth_power>
	
	//Setup timer
	TC0_HAL_init(ADC_HEAT_TIME_INTERVAL, &vect_ADC_heat_timeout);
    6ada:	66 e5       	ldi	r22, 0x56	; 86
    6adc:	76 e3       	ldi	r23, 0x36	; 54
    6ade:	8c e3       	ldi	r24, 0x3C	; 60
    6ae0:	0e 94 c1 34 	call	0x6982	; 0x6982 <TC0_HAL_init>
	TC0_HAL_start();
    6ae4:	0e 94 fc 38 	call	0x71f8	; 0x71f8 <TC0_HAL_start>
    6ae8:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

000071b0 <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    71b0:	80 e0       	ldi	r24, 0x00	; 0
    71b2:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <PM_HAL_meth_power>
    71b6:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00006e50 <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    6e50:	20 91 e3 0e 	lds	r18, 0x0EE3	; 0x800ee3 <cntPowerUpTime>
    6e54:	90 91 e4 0e 	lds	r25, 0x0EE4	; 0x800ee4 <_powerUpTime>
    6e58:	81 e0       	ldi	r24, 0x01	; 1
    6e5a:	29 17       	cp	r18, r25
    6e5c:	08 f4       	brcc	.+2      	; 0x6e60 <ADC_meth_sens_ready+0x10>
    6e5e:	80 e0       	ldi	r24, 0x00	; 0
}
    6e60:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

00005fa2 <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    5fa2:	ef 92       	push	r14
    5fa4:	ff 92       	push	r15
    5fa6:	0f 93       	push	r16
    5fa8:	1f 93       	push	r17
	Vc=Vcc;
    5faa:	60 93 a7 0e 	sts	0x0EA7, r22	; 0x800ea7 <Vc>
    5fae:	70 93 a8 0e 	sts	0x0EA8, r23	; 0x800ea8 <Vc+0x1>
    5fb2:	80 93 a9 0e 	sts	0x0EA9, r24	; 0x800ea9 <Vc+0x2>
    5fb6:	90 93 aa 0e 	sts	0x0EAA, r25	; 0x800eaa <Vc+0x3>
	RRL=Rrl;
    5fba:	20 93 a3 0e 	sts	0x0EA3, r18	; 0x800ea3 <RRL>
    5fbe:	30 93 a4 0e 	sts	0x0EA4, r19	; 0x800ea4 <RRL+0x1>
    5fc2:	40 93 a5 0e 	sts	0x0EA5, r20	; 0x800ea5 <RRL+0x2>
    5fc6:	50 93 a6 0e 	sts	0x0EA6, r21	; 0x800ea6 <RRL+0x3>
	PPM_factor=PPMfactor;
    5fca:	e0 92 9f 0e 	sts	0x0E9F, r14	; 0x800e9f <PPM_factor>
    5fce:	f0 92 a0 0e 	sts	0x0EA0, r15	; 0x800ea0 <PPM_factor+0x1>
    5fd2:	00 93 a1 0e 	sts	0x0EA1, r16	; 0x800ea1 <PPM_factor+0x2>
    5fd6:	10 93 a2 0e 	sts	0x0EA2, r17	; 0x800ea2 <PPM_factor+0x3>
}
    5fda:	1f 91       	pop	r17
    5fdc:	0f 91       	pop	r16
    5fde:	ff 90       	pop	r15
    5fe0:	ef 90       	pop	r14
    5fe2:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00006cf4 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    6cf4:	60 e4       	ldi	r22, 0x40	; 64
    6cf6:	70 e0       	ldi	r23, 0x00	; 0
    6cf8:	80 e8       	ldi	r24, 0x80	; 128
    6cfa:	0e 94 67 37 	call	0x6ece	; 0x6ece <eeprom_read_byte>
    6cfe:	91 e0       	ldi	r25, 0x01	; 1
    6d00:	81 11       	cpse	r24, r1
    6d02:	01 c0       	rjmp	.+2      	; 0x6d06 <EM_has_deveui+0x12>
    6d04:	90 e0       	ldi	r25, 0x00	; 0
}
    6d06:	89 2f       	mov	r24, r25
    6d08:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00006d0a <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    6d0a:	61 e4       	ldi	r22, 0x41	; 65
    6d0c:	70 e0       	ldi	r23, 0x00	; 0
    6d0e:	80 e8       	ldi	r24, 0x80	; 128
    6d10:	0e 94 67 37 	call	0x6ece	; 0x6ece <eeprom_read_byte>
    6d14:	91 e0       	ldi	r25, 0x01	; 1
    6d16:	81 11       	cpse	r24, r1
    6d18:	01 c0       	rjmp	.+2      	; 0x6d1c <EM_has_appeui+0x12>
    6d1a:	90 e0       	ldi	r25, 0x00	; 0
}
    6d1c:	89 2f       	mov	r24, r25
    6d1e:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00006d20 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    6d20:	62 e4       	ldi	r22, 0x42	; 66
    6d22:	70 e0       	ldi	r23, 0x00	; 0
    6d24:	80 e8       	ldi	r24, 0x80	; 128
    6d26:	0e 94 67 37 	call	0x6ece	; 0x6ece <eeprom_read_byte>
    6d2a:	91 e0       	ldi	r25, 0x01	; 1
    6d2c:	81 11       	cpse	r24, r1
    6d2e:	01 c0       	rjmp	.+2      	; 0x6d32 <EM_has_appkey+0x12>
    6d30:	90 e0       	ldi	r25, 0x00	; 0
}
    6d32:	89 2f       	mov	r24, r25
    6d34:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

0000618e <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    618e:	cf 92       	push	r12
    6190:	df 92       	push	r13
    6192:	ef 92       	push	r14
    6194:	6b 01       	movw	r12, r22
    6196:	e8 2e       	mov	r14, r24
    6198:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    619c:	40 97       	sbiw	r24, 0x10	; 16
    619e:	79 f4       	brne	.+30     	; 0x61be <EM_set_deveui+0x30>
    61a0:	20 e1       	ldi	r18, 0x10	; 16
    61a2:	30 e0       	ldi	r19, 0x00	; 0
    61a4:	40 e0       	ldi	r20, 0x00	; 0
    61a6:	50 e0       	ldi	r21, 0x00	; 0
    61a8:	8e 2d       	mov	r24, r14
    61aa:	b6 01       	movw	r22, r12
    61ac:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <eeprom_update_block>
    61b0:	61 e0       	ldi	r22, 0x01	; 1
    61b2:	80 e4       	ldi	r24, 0x40	; 64
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	0e 94 af 34 	call	0x695e	; 0x695e <eeprom_update_byte>
    61ba:	81 e0       	ldi	r24, 0x01	; 1
    61bc:	01 c0       	rjmp	.+2      	; 0x61c0 <EM_set_deveui+0x32>
    61be:	80 e0       	ldi	r24, 0x00	; 0
    61c0:	ef 90       	pop	r14
    61c2:	df 90       	pop	r13
    61c4:	cf 90       	pop	r12
    61c6:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

000065f0 <EM_get_deveui>:
    65f0:	0f 93       	push	r16
    65f2:	1f 93       	push	r17
    65f4:	cf 93       	push	r28
    65f6:	8c 01       	movw	r16, r24
    65f8:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <EM_has_deveui>
    65fc:	c8 2f       	mov	r28, r24
    65fe:	88 23       	and	r24, r24
    6600:	51 f0       	breq	.+20     	; 0x6616 <EM_get_deveui+0x26>
    6602:	20 e1       	ldi	r18, 0x10	; 16
    6604:	30 e0       	ldi	r19, 0x00	; 0
    6606:	40 e0       	ldi	r20, 0x00	; 0
    6608:	50 e0       	ldi	r21, 0x00	; 0
    660a:	60 e0       	ldi	r22, 0x00	; 0
    660c:	c8 01       	movw	r24, r16
    660e:	0e 94 9d 34 	call	0x693a	; 0x693a <eeprom_read_block>
    6612:	f8 01       	movw	r30, r16
    6614:	10 8a       	std	Z+16, r1	; 0x10
    6616:	8c 2f       	mov	r24, r28
    6618:	cf 91       	pop	r28
    661a:	1f 91       	pop	r17
    661c:	0f 91       	pop	r16
    661e:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

000061c8 <EM_set_appeui>:
    61c8:	cf 92       	push	r12
    61ca:	df 92       	push	r13
    61cc:	ef 92       	push	r14
    61ce:	6b 01       	movw	r12, r22
    61d0:	e8 2e       	mov	r14, r24
    61d2:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    61d6:	40 97       	sbiw	r24, 0x10	; 16
    61d8:	79 f4       	brne	.+30     	; 0x61f8 <EM_set_appeui+0x30>
    61da:	20 e1       	ldi	r18, 0x10	; 16
    61dc:	30 e0       	ldi	r19, 0x00	; 0
    61de:	40 e1       	ldi	r20, 0x10	; 16
    61e0:	50 e0       	ldi	r21, 0x00	; 0
    61e2:	8e 2d       	mov	r24, r14
    61e4:	b6 01       	movw	r22, r12
    61e6:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <eeprom_update_block>
    61ea:	61 e0       	ldi	r22, 0x01	; 1
    61ec:	81 e4       	ldi	r24, 0x41	; 65
    61ee:	90 e0       	ldi	r25, 0x00	; 0
    61f0:	0e 94 af 34 	call	0x695e	; 0x695e <eeprom_update_byte>
    61f4:	81 e0       	ldi	r24, 0x01	; 1
    61f6:	01 c0       	rjmp	.+2      	; 0x61fa <EM_set_appeui+0x32>
    61f8:	80 e0       	ldi	r24, 0x00	; 0
    61fa:	ef 90       	pop	r14
    61fc:	df 90       	pop	r13
    61fe:	cf 90       	pop	r12
    6200:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00006620 <EM_get_appeui>:
    6620:	0f 93       	push	r16
    6622:	1f 93       	push	r17
    6624:	cf 93       	push	r28
    6626:	8c 01       	movw	r16, r24
    6628:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <EM_has_appeui>
    662c:	c8 2f       	mov	r28, r24
    662e:	88 23       	and	r24, r24
    6630:	51 f0       	breq	.+20     	; 0x6646 <EM_get_appeui+0x26>
    6632:	20 e1       	ldi	r18, 0x10	; 16
    6634:	30 e0       	ldi	r19, 0x00	; 0
    6636:	40 e1       	ldi	r20, 0x10	; 16
    6638:	50 e0       	ldi	r21, 0x00	; 0
    663a:	60 e0       	ldi	r22, 0x00	; 0
    663c:	c8 01       	movw	r24, r16
    663e:	0e 94 9d 34 	call	0x693a	; 0x693a <eeprom_read_block>
    6642:	f8 01       	movw	r30, r16
    6644:	10 8a       	std	Z+16, r1	; 0x10
    6646:	8c 2f       	mov	r24, r28
    6648:	cf 91       	pop	r28
    664a:	1f 91       	pop	r17
    664c:	0f 91       	pop	r16
    664e:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00006202 <EM_set_appkey>:
    6202:	cf 92       	push	r12
    6204:	df 92       	push	r13
    6206:	ef 92       	push	r14
    6208:	6b 01       	movw	r12, r22
    620a:	e8 2e       	mov	r14, r24
    620c:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    6210:	80 97       	sbiw	r24, 0x20	; 32
    6212:	79 f4       	brne	.+30     	; 0x6232 <EM_set_appkey+0x30>
    6214:	20 e2       	ldi	r18, 0x20	; 32
    6216:	30 e0       	ldi	r19, 0x00	; 0
    6218:	40 e2       	ldi	r20, 0x20	; 32
    621a:	50 e0       	ldi	r21, 0x00	; 0
    621c:	8e 2d       	mov	r24, r14
    621e:	b6 01       	movw	r22, r12
    6220:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <eeprom_update_block>
    6224:	61 e0       	ldi	r22, 0x01	; 1
    6226:	82 e4       	ldi	r24, 0x42	; 66
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	0e 94 af 34 	call	0x695e	; 0x695e <eeprom_update_byte>
    622e:	81 e0       	ldi	r24, 0x01	; 1
    6230:	01 c0       	rjmp	.+2      	; 0x6234 <EM_set_appkey+0x32>
    6232:	80 e0       	ldi	r24, 0x00	; 0
    6234:	ef 90       	pop	r14
    6236:	df 90       	pop	r13
    6238:	cf 90       	pop	r12
    623a:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00006650 <EM_get_appkey>:
    6650:	0f 93       	push	r16
    6652:	1f 93       	push	r17
    6654:	cf 93       	push	r28
    6656:	8c 01       	movw	r16, r24
    6658:	0e 94 90 36 	call	0x6d20	; 0x6d20 <EM_has_appkey>
    665c:	c8 2f       	mov	r28, r24
    665e:	88 23       	and	r24, r24
    6660:	51 f0       	breq	.+20     	; 0x6676 <EM_get_appkey+0x26>
    6662:	20 e2       	ldi	r18, 0x20	; 32
    6664:	30 e0       	ldi	r19, 0x00	; 0
    6666:	40 e2       	ldi	r20, 0x20	; 32
    6668:	50 e0       	ldi	r21, 0x00	; 0
    666a:	60 e0       	ldi	r22, 0x00	; 0
    666c:	c8 01       	movw	r24, r16
    666e:	0e 94 9d 34 	call	0x693a	; 0x693a <eeprom_read_block>
    6672:	f8 01       	movw	r30, r16
    6674:	10 a2       	std	Z+32, r1	; 0x20
    6676:	8c 2f       	mov	r24, r28
    6678:	cf 91       	pop	r28
    667a:	1f 91       	pop	r17
    667c:	0f 91       	pop	r16
    667e:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00006f9c <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    6f9c:	ab 01       	movw	r20, r22
    6f9e:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    6fa0:	83 e4       	ldi	r24, 0x43	; 67
    6fa2:	90 e0       	ldi	r25, 0x00	; 0
    6fa4:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <eeprom_update_dword>
    6fa8:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00006aea <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6aea:	cf 93       	push	r28
    6aec:	df 93       	push	r29
    6aee:	ec 01       	movw	r28, r24
    6af0:	63 e4       	ldi	r22, 0x43	; 67
    6af2:	70 e0       	ldi	r23, 0x00	; 0
    6af4:	80 e0       	ldi	r24, 0x00	; 0
    6af6:	0e 94 14 38 	call	0x7028	; 0x7028 <eeprom_read_dword>
    6afa:	68 83       	st	Y, r22
    6afc:	79 83       	std	Y+1, r23	; 0x01
    6afe:	8a 83       	std	Y+2, r24	; 0x02
    6b00:	9b 83       	std	Y+3, r25	; 0x03
    6b02:	df 91       	pop	r29
    6b04:	cf 91       	pop	r28
    6b06:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00006faa <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    6faa:	ab 01       	movw	r20, r22
    6fac:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    6fae:	87 e4       	ldi	r24, 0x47	; 71
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <eeprom_update_dword>
    6fb6:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00006b08 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6b08:	cf 93       	push	r28
    6b0a:	df 93       	push	r29
    6b0c:	ec 01       	movw	r28, r24
    6b0e:	67 e4       	ldi	r22, 0x47	; 71
    6b10:	70 e0       	ldi	r23, 0x00	; 0
    6b12:	80 e0       	ldi	r24, 0x00	; 0
    6b14:	0e 94 14 38 	call	0x7028	; 0x7028 <eeprom_read_dword>
    6b18:	68 83       	st	Y, r22
    6b1a:	79 83       	std	Y+1, r23	; 0x01
    6b1c:	8a 83       	std	Y+2, r24	; 0x02
    6b1e:	9b 83       	std	Y+3, r25	; 0x03
    6b20:	df 91       	pop	r29
    6b22:	cf 91       	pop	r28
    6b24:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00006fb8 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    6fb8:	ab 01       	movw	r20, r22
    6fba:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    6fbc:	8b e4       	ldi	r24, 0x4B	; 75
    6fbe:	90 e0       	ldi	r25, 0x00	; 0
    6fc0:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <eeprom_update_dword>
    6fc4:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00006b26 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6b26:	cf 93       	push	r28
    6b28:	df 93       	push	r29
    6b2a:	ec 01       	movw	r28, r24
    6b2c:	6b e4       	ldi	r22, 0x4B	; 75
    6b2e:	70 e0       	ldi	r23, 0x00	; 0
    6b30:	80 e0       	ldi	r24, 0x00	; 0
    6b32:	0e 94 14 38 	call	0x7028	; 0x7028 <eeprom_read_dword>
    6b36:	68 83       	st	Y, r22
    6b38:	79 83       	std	Y+1, r23	; 0x01
    6b3a:	8a 83       	std	Y+2, r24	; 0x02
    6b3c:	9b 83       	std	Y+3, r25	; 0x03
    6b3e:	df 91       	pop	r29
    6b40:	cf 91       	pop	r28
    6b42:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00006fc6 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    6fc6:	24 2f       	mov	r18, r20
    6fc8:	30 e0       	ldi	r19, 0x00	; 0
    6fca:	44 e6       	ldi	r20, 0x64	; 100
    6fcc:	50 e0       	ldi	r21, 0x00	; 0
    6fce:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <eeprom_update_block>
    6fd2:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00006ef0 <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    6ef0:	26 2f       	mov	r18, r22
    6ef2:	30 e0       	ldi	r19, 0x00	; 0
    6ef4:	44 e6       	ldi	r20, 0x64	; 100
    6ef6:	50 e0       	ldi	r21, 0x00	; 0
    6ef8:	60 e0       	ldi	r22, 0x00	; 0
    6efa:	0e 94 9d 34 	call	0x693a	; 0x693a <eeprom_read_block>
    6efe:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

0000705c <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    705c:	68 2f       	mov	r22, r24
    705e:	8f e4       	ldi	r24, 0x4F	; 79
    7060:	90 e0       	ldi	r25, 0x00	; 0
    7062:	0e 94 af 34 	call	0x695e	; 0x695e <eeprom_update_byte>
    7066:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00007068 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    7068:	6f e4       	ldi	r22, 0x4F	; 79
    706a:	70 e0       	ldi	r23, 0x00	; 0
    706c:	80 e0       	ldi	r24, 0x00	; 0
    706e:	0e 94 67 37 	call	0x6ece	; 0x6ece <eeprom_read_byte>
}
    7072:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

00007074 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    7074:	bc 01       	movw	r22, r24
    7076:	80 e5       	ldi	r24, 0x50	; 80
    7078:	90 e0       	ldi	r25, 0x00	; 0
    707a:	0e 94 82 38 	call	0x7104	; 0x7104 <eeprom_update_word>
    707e:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

00007080 <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    7080:	60 e5       	ldi	r22, 0x50	; 80
    7082:	70 e0       	ldi	r23, 0x00	; 0
    7084:	80 e0       	ldi	r24, 0x00	; 0
    7086:	0e 94 1b 38 	call	0x7036	; 0x7036 <eeprom_read_word>
}
    708a:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

0000708c <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    708c:	68 2f       	mov	r22, r24
    708e:	82 e5       	ldi	r24, 0x52	; 82
    7090:	90 e0       	ldi	r25, 0x00	; 0
    7092:	0e 94 af 34 	call	0x695e	; 0x695e <eeprom_update_byte>
    7096:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

00007098 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    7098:	62 e5       	ldi	r22, 0x52	; 82
    709a:	70 e0       	ldi	r23, 0x00	; 0
    709c:	80 e0       	ldi	r24, 0x00	; 0
    709e:	0e 94 67 37 	call	0x6ece	; 0x6ece <eeprom_read_byte>
}
    70a2:	08 95       	ret

Disassembly of section .text.EM_set_group_id:

000070a4 <EM_set_group_id>:

void EM_set_group_id(uint8_t groupId){
	eeprom_update_byte((uint8_t *) EEPROM_GROUP_ID_ADDR, groupId);
    70a4:	68 2f       	mov	r22, r24
    70a6:	83 e6       	ldi	r24, 0x63	; 99
    70a8:	90 e0       	ldi	r25, 0x00	; 0
    70aa:	0e 94 af 34 	call	0x695e	; 0x695e <eeprom_update_byte>
    70ae:	08 95       	ret

Disassembly of section .text.EM_get_group_id:

000070b0 <EM_get_group_id>:
}

uint8_t EM_get_group_id(){
	return eeprom_read_byte((const uint8_t *) EEPROM_GROUP_ID_ADDR);
    70b0:	63 e6       	ldi	r22, 0x63	; 99
    70b2:	70 e0       	ldi	r23, 0x00	; 0
    70b4:	80 e0       	ldi	r24, 0x00	; 0
    70b6:	0e 94 67 37 	call	0x6ece	; 0x6ece <eeprom_read_byte>
    70ba:	08 95       	ret

Disassembly of section .text.cb_blink:

00007204 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    7204:	0e 94 c4 38 	call	0x7188	; 0x7188 <PM_HAL_LED_toggle>
    7208:	08 95       	ret

Disassembly of section .text.blink:

000059b8 <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    59b8:	cf 93       	push	r28
    59ba:	df 93       	push	r29
    59bc:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    59be:	c0 e0       	ldi	r28, 0x00	; 0
    59c0:	19 c0       	rjmp	.+50     	; 0x59f4 <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    59c2:	80 e0       	ldi	r24, 0x00	; 0
    59c4:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <PM_HAL_LED_power>
    59c8:	2f ef       	ldi	r18, 0xFF	; 255
    59ca:	82 e5       	ldi	r24, 0x52	; 82
    59cc:	97 e0       	ldi	r25, 0x07	; 7
    59ce:	21 50       	subi	r18, 0x01	; 1
    59d0:	80 40       	sbci	r24, 0x00	; 0
    59d2:	90 40       	sbci	r25, 0x00	; 0
    59d4:	e1 f7       	brne	.-8      	; 0x59ce <blink+0x16>
    59d6:	00 c0       	rjmp	.+0      	; 0x59d8 <blink+0x20>
    59d8:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    59da:	81 e0       	ldi	r24, 0x01	; 1
    59dc:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <PM_HAL_LED_power>
    59e0:	2f ef       	ldi	r18, 0xFF	; 255
    59e2:	82 e5       	ldi	r24, 0x52	; 82
    59e4:	97 e0       	ldi	r25, 0x07	; 7
    59e6:	21 50       	subi	r18, 0x01	; 1
    59e8:	80 40       	sbci	r24, 0x00	; 0
    59ea:	90 40       	sbci	r25, 0x00	; 0
    59ec:	e1 f7       	brne	.-8      	; 0x59e6 <blink+0x2e>
    59ee:	00 c0       	rjmp	.+0      	; 0x59f0 <blink+0x38>
    59f0:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    59f2:	cf 5f       	subi	r28, 0xFF	; 255
    59f4:	cd 17       	cp	r28, r29
    59f6:	28 f3       	brcs	.-54     	; 0x59c2 <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    59f8:	80 e0       	ldi	r24, 0x00	; 0
    59fa:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <PM_HAL_LED_power>
}
    59fe:	df 91       	pop	r29
    5a00:	cf 91       	pop	r28
    5a02:	08 95       	ret

Disassembly of section .text.err_code:

0000623c <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    623c:	cf 93       	push	r28
    623e:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    6240:	81 e0       	ldi	r24, 0x01	; 1
    6242:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <PM_HAL_LED_power>
    6246:	2f ef       	ldi	r18, 0xFF	; 255
    6248:	83 ed       	ldi	r24, 0xD3	; 211
    624a:	90 e3       	ldi	r25, 0x30	; 48
    624c:	21 50       	subi	r18, 0x01	; 1
    624e:	80 40       	sbci	r24, 0x00	; 0
    6250:	90 40       	sbci	r25, 0x00	; 0
    6252:	e1 f7       	brne	.-8      	; 0x624c <err_code+0x10>
    6254:	00 c0       	rjmp	.+0      	; 0x6256 <err_code+0x1a>
    6256:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    6258:	8c 2f       	mov	r24, r28
    625a:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <blink>
    625e:	2f ef       	ldi	r18, 0xFF	; 255
    6260:	89 e6       	ldi	r24, 0x69	; 105
    6262:	98 e1       	ldi	r25, 0x18	; 24
    6264:	21 50       	subi	r18, 0x01	; 1
    6266:	80 40       	sbci	r24, 0x00	; 0
    6268:	90 40       	sbci	r25, 0x00	; 0
    626a:	e1 f7       	brne	.-8      	; 0x6264 <err_code+0x28>
    626c:	00 c0       	rjmp	.+0      	; 0x626e <err_code+0x32>
    626e:	00 00       	nop
	_delay_ms(1000);
}
    6270:	cf 91       	pop	r28
    6272:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

00006fd4 <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    6fd4:	82 e0       	ldi	r24, 0x02	; 2
    6fd6:	99 e3       	ldi	r25, 0x39	; 57
    6fd8:	0e 94 26 2b 	call	0x564c	; 0x564c <TC2_HAL_subscribe>
    6fdc:	80 93 e5 0e 	sts	0x0EE5, r24	; 0x800ee5 <cbPointer>
    6fe0:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

00006f00 <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    6f00:	80 91 e5 0e 	lds	r24, 0x0EE5	; 0x800ee5 <cbPointer>
    6f04:	0e 94 8d 30 	call	0x611a	; 0x611a <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    6f08:	80 e0       	ldi	r24, 0x00	; 0
    6f0a:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <PM_HAL_LED_power>
    6f0e:	08 95       	ret

Disassembly of section .text.LED_join_success:

00006026 <LED_join_success>:
}

void LED_join_success(){
    6026:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    6028:	c0 e0       	ldi	r28, 0x00	; 0
    602a:	19 c0       	rjmp	.+50     	; 0x605e <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    602c:	81 e0       	ldi	r24, 0x01	; 1
    602e:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <PM_HAL_LED_power>
    6032:	2f ef       	ldi	r18, 0xFF	; 255
    6034:	80 e7       	ldi	r24, 0x70	; 112
    6036:	92 e0       	ldi	r25, 0x02	; 2
    6038:	21 50       	subi	r18, 0x01	; 1
    603a:	80 40       	sbci	r24, 0x00	; 0
    603c:	90 40       	sbci	r25, 0x00	; 0
    603e:	e1 f7       	brne	.-8      	; 0x6038 <LED_join_success+0x12>
    6040:	00 c0       	rjmp	.+0      	; 0x6042 <LED_join_success+0x1c>
    6042:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    6044:	80 e0       	ldi	r24, 0x00	; 0
    6046:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <PM_HAL_LED_power>
    604a:	2f ef       	ldi	r18, 0xFF	; 255
    604c:	80 e7       	ldi	r24, 0x70	; 112
    604e:	92 e0       	ldi	r25, 0x02	; 2
    6050:	21 50       	subi	r18, 0x01	; 1
    6052:	80 40       	sbci	r24, 0x00	; 0
    6054:	90 40       	sbci	r25, 0x00	; 0
    6056:	e1 f7       	brne	.-8      	; 0x6050 <LED_join_success+0x2a>
    6058:	00 c0       	rjmp	.+0      	; 0x605a <LED_join_success+0x34>
    605a:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    605c:	cf 5f       	subi	r28, 0xFF	; 255
    605e:	ca 30       	cpi	r28, 0x0A	; 10
    6060:	28 f3       	brcs	.-54     	; 0x602c <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    6062:	cf 91       	pop	r28
    6064:	08 95       	ret

Disassembly of section .text.LED_join_denied:

000071b8 <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    71b8:	83 e0       	ldi	r24, 0x03	; 3
    71ba:	0e 94 1e 31 	call	0x623c	; 0x623c <err_code>
    71be:	08 95       	ret

Disassembly of section .text.LED_conf_err:

000071c0 <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    71c0:	85 e0       	ldi	r24, 0x05	; 5
    71c2:	0e 94 1e 31 	call	0x623c	; 0x623c <err_code>
    71c6:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

000071c8 <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    71c8:	87 e0       	ldi	r24, 0x07	; 7
    71ca:	0e 94 1e 31 	call	0x623c	; 0x623c <err_code>
    71ce:	08 95       	ret

Disassembly of section .text.parse_err:

000054f0 <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    54f0:	cf 92       	push	r12
    54f2:	df 92       	push	r13
    54f4:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    54f6:	6c 01       	movw	r12, r24
    54f8:	20 e8       	ldi	r18, 0x80	; 128
    54fa:	e2 2e       	mov	r14, r18
    54fc:	29 e1       	ldi	r18, 0x19	; 25
    54fe:	39 e0       	ldi	r19, 0x09	; 9
    5500:	40 e0       	ldi	r20, 0x00	; 0
    5502:	8e 2d       	mov	r24, r14
    5504:	b6 01       	movw	r22, r12
    5506:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    550a:	89 2b       	or	r24, r25
    550c:	a1 f0       	breq	.+40     	; 0x5536 <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    550e:	24 e2       	ldi	r18, 0x24	; 36
    5510:	39 e0       	ldi	r19, 0x09	; 9
    5512:	40 e0       	ldi	r20, 0x00	; 0
    5514:	8e 2d       	mov	r24, r14
    5516:	b6 01       	movw	r22, r12
    5518:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    551c:	89 2b       	or	r24, r25
    551e:	69 f0       	breq	.+26     	; 0x553a <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    5520:	2b e2       	ldi	r18, 0x2B	; 43
    5522:	39 e0       	ldi	r19, 0x09	; 9
    5524:	40 e0       	ldi	r20, 0x00	; 0
    5526:	8e 2d       	mov	r24, r14
    5528:	b6 01       	movw	r22, r12
    552a:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    552e:	89 2b       	or	r24, r25
    5530:	31 f4       	brne	.+12     	; 0x553e <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    5532:	83 e0       	ldi	r24, 0x03	; 3
    5534:	05 c0       	rjmp	.+10     	; 0x5540 <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    5536:	82 e0       	ldi	r24, 0x02	; 2
    5538:	03 c0       	rjmp	.+6      	; 0x5540 <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    553a:	82 e0       	ldi	r24, 0x02	; 2
    553c:	01 c0       	rjmp	.+2      	; 0x5540 <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    553e:	81 e0       	ldi	r24, 0x01	; 1
}
    5540:	ef 90       	pop	r14
    5542:	df 90       	pop	r13
    5544:	cf 90       	pop	r12
    5546:	08 95       	ret

Disassembly of section .text.JN_join_network:

00001a3a <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
    1a3a:	af 92       	push	r10
    1a3c:	bf 92       	push	r11
    1a3e:	cf 92       	push	r12
    1a40:	df 92       	push	r13
    1a42:	ef 92       	push	r14
    1a44:	ff 92       	push	r15
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	28 97       	sbiw	r28, 0x08	; 8
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	5c 01       	movw	r10, r24
    1a5e:	6b 01       	movw	r12, r22
    1a60:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
    1a62:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    1a64:	e1 2f       	mov	r30, r17
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	ed 30       	cpi	r30, 0x0D	; 13
    1a6a:	f1 05       	cpc	r31, r1
    1a6c:	d8 f7       	brcc	.-10     	; 0x1a64 <JN_join_network+0x2a>
    1a6e:	e2 5c       	subi	r30, 0xC2	; 194
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	0c 94 7c 38 	jmp	0x70f8	; 0x70f8 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
    1a76:	0e 94 cc 38 	call	0x7198	; 0x7198 <rn2483_reset_active>
    1a7a:	2f ef       	ldi	r18, 0xFF	; 255
    1a7c:	89 e6       	ldi	r24, 0x69	; 105
    1a7e:	98 e1       	ldi	r25, 0x18	; 24
    1a80:	21 50       	subi	r18, 0x01	; 1
    1a82:	80 40       	sbci	r24, 0x00	; 0
    1a84:	90 40       	sbci	r25, 0x00	; 0
    1a86:	e1 f7       	brne	.-8      	; 0x1a80 <JN_join_network+0x46>
    1a88:	00 c0       	rjmp	.+0      	; 0x1a8a <JN_join_network+0x50>
    1a8a:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
    1a8c:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <rn2483_reset_deactive>
				
				util_set_pending_states(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
    1a90:	4c e0       	ldi	r20, 0x0C	; 12
    1a92:	50 e0       	ldi	r21, 0x00	; 0
    1a94:	62 e0       	ldi	r22, 0x02	; 2
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	ce 01       	movw	r24, r28
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_BEGINS_WITH, RN2483);
    1aa0:	29 e3       	ldi	r18, 0x39	; 57
    1aa2:	39 e0       	ldi	r19, 0x09	; 9
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	61 e0       	ldi	r22, 0x01	; 1
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				
				state=JN_WAIT_FOR_INCOMMING;
    1ab0:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1ab2:	d8 cf       	rjmp	.-80     	; 0x1a64 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
    1ab4:	40 e4       	ldi	r20, 0x40	; 64
    1ab6:	59 e0       	ldi	r21, 0x09	; 9
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	80 e9       	ldi	r24, 0x90	; 144
    1abc:	92 e0       	ldi	r25, 0x02	; 2
    1abe:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1ac2:	60 e9       	ldi	r22, 0x90	; 144
    1ac4:	72 e0       	ldi	r23, 0x02	; 2
    1ac6:	80 e8       	ldi	r24, 0x80	; 128
    1ac8:	0e 94 1d 24 	call	0x483a	; 0x483a <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
    1acc:	4c e0       	ldi	r20, 0x0C	; 12
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	63 e0       	ldi	r22, 0x03	; 3
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1adc:	2e e4       	ldi	r18, 0x4E	; 78
    1ade:	39 e0       	ldi	r19, 0x09	; 9
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1aec:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1aee:	ba cf       	rjmp	.-140    	; 0x1a64 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
    1af0:	b5 01       	movw	r22, r10
    1af2:	80 e9       	ldi	r24, 0x90	; 144
    1af4:	92 e0       	ldi	r25, 0x02	; 2
    1af6:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <mac_set_deveui>
				attach_ending(lm_msg);
    1afa:	80 e9       	ldi	r24, 0x90	; 144
    1afc:	92 e0       	ldi	r25, 0x02	; 2
    1afe:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1b02:	60 e9       	ldi	r22, 0x90	; 144
    1b04:	72 e0       	ldi	r23, 0x02	; 2
    1b06:	80 e8       	ldi	r24, 0x80	; 128
    1b08:	0e 94 1d 24 	call	0x483a	; 0x483a <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
    1b0c:	4c e0       	ldi	r20, 0x0C	; 12
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	64 e0       	ldi	r22, 0x04	; 4
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	ce 01       	movw	r24, r28
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1b1c:	2e e4       	ldi	r18, 0x4E	; 78
    1b1e:	39 e0       	ldi	r19, 0x09	; 9
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	ce 01       	movw	r24, r28
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1b2c:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1b2e:	9a cf       	rjmp	.-204    	; 0x1a64 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
    1b30:	b7 01       	movw	r22, r14
    1b32:	80 e9       	ldi	r24, 0x90	; 144
    1b34:	92 e0       	ldi	r25, 0x02	; 2
    1b36:	0e 94 76 2e 	call	0x5cec	; 0x5cec <mac_set_appkey>
				attach_ending(lm_msg);
    1b3a:	80 e9       	ldi	r24, 0x90	; 144
    1b3c:	92 e0       	ldi	r25, 0x02	; 2
    1b3e:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1b42:	60 e9       	ldi	r22, 0x90	; 144
    1b44:	72 e0       	ldi	r23, 0x02	; 2
    1b46:	80 e8       	ldi	r24, 0x80	; 128
    1b48:	0e 94 1d 24 	call	0x483a	; 0x483a <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
    1b4c:	4c e0       	ldi	r20, 0x0C	; 12
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	65 e0       	ldi	r22, 0x05	; 5
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	ce 01       	movw	r24, r28
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1b5c:	2e e4       	ldi	r18, 0x4E	; 78
    1b5e:	39 e0       	ldi	r19, 0x09	; 9
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	ce 01       	movw	r24, r28
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1b6c:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1b6e:	7a cf       	rjmp	.-268    	; 0x1a64 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
    1b70:	b6 01       	movw	r22, r12
    1b72:	80 e9       	ldi	r24, 0x90	; 144
    1b74:	92 e0       	ldi	r25, 0x02	; 2
    1b76:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <mac_set_appeui>
				attach_ending(lm_msg);
    1b7a:	80 e9       	ldi	r24, 0x90	; 144
    1b7c:	92 e0       	ldi	r25, 0x02	; 2
    1b7e:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1b82:	60 e9       	ldi	r22, 0x90	; 144
    1b84:	72 e0       	ldi	r23, 0x02	; 2
    1b86:	80 e8       	ldi	r24, 0x80	; 128
    1b88:	0e 94 1d 24 	call	0x483a	; 0x483a <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
    1b8c:	4c e0       	ldi	r20, 0x0C	; 12
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	66 e0       	ldi	r22, 0x06	; 6
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	ce 01       	movw	r24, r28
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1b9c:	2e e4       	ldi	r18, 0x4E	; 78
    1b9e:	39 e0       	ldi	r19, 0x09	; 9
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1bac:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1bae:	5a cf       	rjmp	.-332    	; 0x1a64 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	80 e9       	ldi	r24, 0x90	; 144
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	0e 94 40 33 	call	0x6680	; 0x6680 <mac_set_ADR>
				attach_ending(lm_msg);
    1bba:	80 e9       	ldi	r24, 0x90	; 144
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1bc2:	60 e9       	ldi	r22, 0x90	; 144
    1bc4:	72 e0       	ldi	r23, 0x02	; 2
    1bc6:	80 e8       	ldi	r24, 0x80	; 128
    1bc8:	0e 94 1d 24 	call	0x483a	; 0x483a <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
    1bcc:	4c e0       	ldi	r20, 0x0C	; 12
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	67 e0       	ldi	r22, 0x07	; 7
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1bdc:	2e e4       	ldi	r18, 0x4E	; 78
    1bde:	39 e0       	ldi	r19, 0x09	; 9
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	ce 01       	movw	r24, r28
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1bec:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1bee:	3a cf       	rjmp	.-396    	; 0x1a64 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
    1bf0:	41 e5       	ldi	r20, 0x51	; 81
    1bf2:	59 e0       	ldi	r21, 0x09	; 9
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	80 e9       	ldi	r24, 0x90	; 144
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1bfe:	60 e9       	ldi	r22, 0x90	; 144
    1c00:	72 e0       	ldi	r23, 0x02	; 2
    1c02:	80 e8       	ldi	r24, 0x80	; 128
    1c04:	0e 94 1d 24 	call	0x483a	; 0x483a <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    1c08:	4c e0       	ldi	r20, 0x0C	; 12
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	68 e0       	ldi	r22, 0x08	; 8
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1c18:	2e e4       	ldi	r18, 0x4E	; 78
    1c1a:	39 e0       	ldi	r19, 0x09	; 9
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	ce 01       	movw	r24, r28
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1c28:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1c2a:	1c cf       	rjmp	.-456    	; 0x1a64 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    1c2c:	4a e5       	ldi	r20, 0x5A	; 90
    1c2e:	59 e0       	ldi	r21, 0x09	; 9
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	80 e9       	ldi	r24, 0x90	; 144
    1c34:	92 e0       	ldi	r25, 0x02	; 2
    1c36:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1c3a:	60 e9       	ldi	r22, 0x90	; 144
    1c3c:	72 e0       	ldi	r23, 0x02	; 2
    1c3e:	80 e8       	ldi	r24, 0x80	; 128
    1c40:	0e 94 1d 24 	call	0x483a	; 0x483a <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    1c44:	4a e0       	ldi	r20, 0x0A	; 10
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	69 e0       	ldi	r22, 0x09	; 9
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1c54:	2e e4       	ldi	r18, 0x4E	; 78
    1c56:	39 e0       	ldi	r19, 0x09	; 9
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	01 96       	adiw	r24, 0x01	; 1
    1c60:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1c64:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1c66:	fe ce       	rjmp	.-516    	; 0x1a64 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_set_pending_states(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    1c68:	4a e0       	ldi	r20, 0x0A	; 10
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	6b e0       	ldi	r22, 0x0B	; 11
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	ce 01       	movw	r24, r28
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, ACCEPTED);
    1c78:	28 e6       	ldi	r18, 0x68	; 104
    1c7a:	39 e0       	ldi	r19, 0x09	; 9
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	ce 01       	movw	r24, r28
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1c88:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1c8a:	ec ce       	rjmp	.-552    	; 0x1a64 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
    1c8c:	80 e9       	ldi	r24, 0x90	; 144
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
    1c90:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <parse_err>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <JN_join_network+0x284>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    1c96:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <uart0_hal_message_ready>
    1c9a:	88 23       	and	r24, r24
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <JN_join_network+0x266>
    1c9e:	e2 ce       	rjmp	.-572    	; 0x1a64 <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
    1ca0:	80 e9       	ldi	r24, 0x90	; 144
    1ca2:	92 e0       	ldi	r25, 0x02	; 2
    1ca4:	0e 94 28 34 	call	0x6850	; 0x6850 <uart0_hal_read_message_as_str>
					state=util_match_message(&stateData, lm_msg);
    1ca8:	60 e9       	ldi	r22, 0x90	; 144
    1caa:	72 e0       	ldi	r23, 0x02	; 2
    1cac:	ce 01       	movw	r24, r28
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	0e 94 c2 29 	call	0x5384	; 0x5384 <util_match_message>
    1cb4:	18 2f       	mov	r17, r24
    1cb6:	d6 ce       	rjmp	.-596    	; 0x1a64 <JN_join_network+0x2a>
				util_set_match_case(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	01 c0       	rjmp	.+2      	; 0x1cbe <JN_join_network+0x284>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    1cbe:	28 96       	adiw	r28, 0x08	; 8
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	ff 90       	pop	r15
    1cd2:	ef 90       	pop	r14
    1cd4:	df 90       	pop	r13
    1cd6:	cf 90       	pop	r12
    1cd8:	bf 90       	pop	r11
    1cda:	af 90       	pop	r10
    1cdc:	08 95       	ret

Disassembly of section .text.set_block_uplink:

00006cc4 <set_block_uplink>:
	util_send_break();
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    6cc4:	8d ed       	ldi	r24, 0xDD	; 221
    6cc6:	95 e3       	ldi	r25, 0x35	; 53
    6cc8:	0e 94 26 2b 	call	0x564c	; 0x564c <TC2_HAL_subscribe>
    6ccc:	80 93 e6 0e 	sts	0x0EE6, r24	; 0x800ee6 <subPointer>
	busy=true;
    6cd0:	81 e0       	ldi	r24, 0x01	; 1
    6cd2:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <busy>
	cnt=0;
    6cd6:	10 92 e8 0e 	sts	0x0EE8, r1	; 0x800ee8 <cnt>
    6cda:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

00006bba <cb_block_uplink>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void cb_block_uplink(){
	cnt++;
    6bba:	80 91 e8 0e 	lds	r24, 0x0EE8	; 0x800ee8 <cnt>
    6bbe:	8f 5f       	subi	r24, 0xFF	; 255
    6bc0:	80 93 e8 0e 	sts	0x0EE8, r24	; 0x800ee8 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    6bc4:	8d 33       	cpi	r24, 0x3D	; 61
    6bc6:	30 f0       	brcs	.+12     	; 0x6bd4 <cb_block_uplink+0x1a>
		busy=false;
    6bc8:	10 92 e7 0e 	sts	0x0EE7, r1	; 0x800ee7 <busy>
		TC2_HAL_cancel(subPointer);
    6bcc:	80 91 e6 0e 	lds	r24, 0x0EE6	; 0x800ee6 <subPointer>
    6bd0:	0e 94 8d 30 	call	0x611a	; 0x611a <TC2_HAL_cancel>
    6bd4:	08 95       	ret

Disassembly of section .text.LM_join_network:

0000720a <LM_join_network>:
static void cb_block_uplink();
static void set_block_uplink();


LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    720a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <JN_join_network>
}
    720e:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

000067cc <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    67cc:	1f 93       	push	r17
    67ce:	cf 93       	push	r28
    67d0:	df 93       	push	r29
    67d2:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    67d4:	90 91 e7 0e 	lds	r25, 0x0EE7	; 0x800ee7 <busy>
    67d8:	91 11       	cpse	r25, r1
    67da:	0a c0       	rjmp	.+20     	; 0x67f0 <LM_send_uplink+0x24>
    67dc:	16 2f       	mov	r17, r22
    67de:	e9 01       	movw	r28, r18
	set_block_uplink();
    67e0:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    67e4:	41 2f       	mov	r20, r17
    67e6:	be 01       	movw	r22, r28
    67e8:	84 e6       	ldi	r24, 0x64	; 100
    67ea:	0e 94 9a 1b 	call	0x3734	; 0x3734 <SU_send_uplink>
    67ee:	01 c0       	rjmp	.+2      	; 0x67f2 <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    67f0:	82 e0       	ldi	r24, 0x02	; 2
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    67f2:	df 91       	pop	r29
    67f4:	cf 91       	pop	r28
    67f6:	1f 91       	pop	r17
    67f8:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00006e62 <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	busy=false;
    6e62:	10 92 e7 0e 	sts	0x0EE7, r1	; 0x800ee7 <busy>
	TC2_HAL_cancel(subPointer);
    6e66:	80 91 e6 0e 	lds	r24, 0x0EE6	; 0x800ee6 <subPointer>
    6e6a:	0e 94 8d 30 	call	0x611a	; 0x611a <TC2_HAL_cancel>
	return SC_put_to_sleep();
    6e6e:	0e 94 3a 31 	call	0x6274	; 0x6274 <SC_put_to_sleep>
}
    6e72:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00007210 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    7210:	0e 94 92 27 	call	0x4f24	; 0x4f24 <SC_wake_up>
}
    7214:	08 95       	ret

Disassembly of section .text.LM_is_free:

0000714c <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    714c:	90 91 e7 0e 	lds	r25, 0x0EE7	; 0x800ee7 <busy>
}
    7150:	81 e0       	ldi	r24, 0x01	; 1
    7152:	89 27       	eor	r24, r25
    7154:	08 95       	ret

Disassembly of section .text.LM_reset_module:

00007216 <LM_reset_module>:

LM_STATUS LM_reset_module(){
	return util_reset_module();
    7216:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <util_reset_module>
}
    721a:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

0000721c <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    721c:	0e 94 14 25 	call	0x4a28	; 0x4a28 <util_lora_forward_msg>
    7220:	08 95       	ret

Disassembly of section .text.LM_send_break:

00007222 <LM_send_break>:
}

void LM_send_break(){
	util_send_break();
    7222:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <util_send_break>
    7226:	08 95       	ret

Disassembly of section .text.tohex:

00004934 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], uint8_t bytes)
{
    4934:	cf 92       	push	r12
    4936:	df 92       	push	r13
    4938:	ef 92       	push	r14
    493a:	0f 93       	push	r16
    493c:	1f 93       	push	r17
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
    4942:	8c 01       	movw	r16, r24
    4944:	6a 01       	movw	r12, r20
    4946:	e6 2e       	mov	r14, r22
    4948:	d2 2f       	mov	r29, r18
    for (uint8_t i = 0; i < bytes; i++){
    494a:	c0 e0       	ldi	r28, 0x00	; 0
    494c:	26 c0       	rjmp	.+76     	; 0x499a <tohex+0x66>
        sprintf(str + i * 2, "%02x", data[i]);
    494e:	8c 2f       	mov	r24, r28
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	4e 2d       	mov	r20, r14
    4954:	96 01       	movw	r18, r12
    4956:	28 0f       	add	r18, r24
    4958:	39 1f       	adc	r19, r25
    495a:	41 1d       	adc	r20, r1
    495c:	97 fd       	sbrc	r25, 7
    495e:	4a 95       	dec	r20
    4960:	f9 01       	movw	r30, r18
    4962:	24 91       	lpm	r18, Z
    4964:	47 fd       	sbrc	r20, 7
    4966:	20 81       	ld	r18, Z
    4968:	88 0f       	add	r24, r24
    496a:	99 1f       	adc	r25, r25
    496c:	1f 92       	push	r1
    496e:	2f 93       	push	r18
    4970:	26 ea       	ldi	r18, 0xA6	; 166
    4972:	38 e0       	ldi	r19, 0x08	; 8
    4974:	40 e0       	ldi	r20, 0x00	; 0
    4976:	4f 93       	push	r20
    4978:	3f 93       	push	r19
    497a:	2f 93       	push	r18
    497c:	80 0f       	add	r24, r16
    497e:	91 1f       	adc	r25, r17
    4980:	9f 93       	push	r25
    4982:	8f 93       	push	r24
    4984:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], uint8_t bytes)
{
    for (uint8_t i = 0; i < bytes; i++){
    4988:	cf 5f       	subi	r28, 0xFF	; 255
    498a:	8d b7       	in	r24, 0x3d	; 61
    498c:	9e b7       	in	r25, 0x3e	; 62
    498e:	07 96       	adiw	r24, 0x07	; 7
    4990:	0f b6       	in	r0, 0x3f	; 63
    4992:	f8 94       	cli
    4994:	9e bf       	out	0x3e, r25	; 62
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	8d bf       	out	0x3d, r24	; 61
    499a:	cd 17       	cp	r28, r29
    499c:	c0 f2       	brcs	.-80     	; 0x494e <tohex+0x1a>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	1f 91       	pop	r17
    49a4:	0f 91       	pop	r16
    49a6:	ef 90       	pop	r14
    49a8:	df 90       	pop	r13
    49aa:	cf 90       	pop	r12
    49ac:	08 95       	ret

Disassembly of section .text.attach_ending:

00006bd6 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    6bd6:	fc 01       	movw	r30, r24
    6bd8:	01 90       	ld	r0, Z+
    6bda:	00 20       	and	r0, r0
    6bdc:	e9 f7       	brne	.-6      	; 0x6bd8 <attach_ending+0x2>
    6bde:	cf 01       	movw	r24, r30
    6be0:	23 e0       	ldi	r18, 0x03	; 3
    6be2:	30 e0       	ldi	r19, 0x00	; 0
    6be4:	4b ea       	ldi	r20, 0xAB	; 171
    6be6:	58 e0       	ldi	r21, 0x08	; 8
    6be8:	60 e0       	ldi	r22, 0x00	; 0
    6bea:	01 97       	sbiw	r24, 0x01	; 1
    6bec:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
    6bf0:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

000064f8 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    64f8:	cf 93       	push	r28
    64fa:	df 93       	push	r29
    64fc:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    64fe:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    6502:	fe 01       	movw	r30, r28
    6504:	01 90       	ld	r0, Z+
    6506:	00 20       	and	r0, r0
    6508:	e9 f7       	brne	.-6      	; 0x6504 <cmd_with_ending+0xc>
    650a:	cf 01       	movw	r24, r30
    650c:	23 e0       	ldi	r18, 0x03	; 3
    650e:	30 e0       	ldi	r19, 0x00	; 0
    6510:	4b ea       	ldi	r20, 0xAB	; 171
    6512:	58 e0       	ldi	r21, 0x08	; 8
    6514:	60 e0       	ldi	r22, 0x00	; 0
    6516:	01 97       	sbiw	r24, 0x01	; 1
    6518:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	return strlen(buffer);
    651c:	be 01       	movw	r22, r28
    651e:	80 e8       	ldi	r24, 0x80	; 128
    6520:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
}
    6524:	df 91       	pop	r29
    6526:	cf 91       	pop	r28
    6528:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

0000526a <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    526a:	cf 93       	push	r28
    526c:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    526e:	44 36       	cpi	r20, 0x64	; 100
    5270:	51 05       	cpc	r21, r1
    5272:	61 05       	cpc	r22, r1
    5274:	71 05       	cpc	r23, r1
    5276:	18 f1       	brcs	.+70     	; 0x52be <sys_sleep_cmd+0x54>
    5278:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    527a:	7f 93       	push	r23
    527c:	6f 93       	push	r22
    527e:	5f 93       	push	r21
    5280:	4f 93       	push	r20
    5282:	8e ea       	ldi	r24, 0xAE	; 174
    5284:	98 e0       	ldi	r25, 0x08	; 8
    5286:	a0 e0       	ldi	r26, 0x00	; 0
    5288:	af 93       	push	r26
    528a:	9f 93       	push	r25
    528c:	8f 93       	push	r24
    528e:	88 eb       	ldi	r24, 0xB8	; 184
    5290:	98 e0       	ldi	r25, 0x08	; 8
    5292:	a0 e0       	ldi	r26, 0x00	; 0
    5294:	af 93       	push	r26
    5296:	9f 93       	push	r25
    5298:	8f 93       	push	r24
    529a:	df 93       	push	r29
    529c:	cf 93       	push	r28
    529e:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    return strlen(buffer);
    52a2:	be 01       	movw	r22, r28
    52a4:	80 e8       	ldi	r24, 0x80	; 128
    52a6:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    52aa:	2d b7       	in	r18, 0x3d	; 61
    52ac:	3e b7       	in	r19, 0x3e	; 62
    52ae:	24 5f       	subi	r18, 0xF4	; 244
    52b0:	3f 4f       	sbci	r19, 0xFF	; 255
    52b2:	0f b6       	in	r0, 0x3f	; 63
    52b4:	f8 94       	cli
    52b6:	3e bf       	out	0x3e, r19	; 62
    52b8:	0f be       	out	0x3f, r0	; 63
    52ba:	2d bf       	out	0x3d, r18	; 61
    52bc:	02 c0       	rjmp	.+4      	; 0x52c2 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    52be:	8f ef       	ldi	r24, 0xFF	; 255
    52c0:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    52c2:	df 91       	pop	r29
    52c4:	cf 91       	pop	r28
    52c6:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

000058d0 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    58d0:	0f 93       	push	r16
    58d2:	1f 93       	push	r17
    58d4:	cf 93       	push	r28
    58d6:	df 93       	push	r29
    58d8:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    58da:	2f 93       	push	r18
    58dc:	1f 93       	push	r17
    58de:	0f 93       	push	r16
    58e0:	6f 93       	push	r22
    58e2:	5f 93       	push	r21
    58e4:	4f 93       	push	r20
    58e6:	8f eb       	ldi	r24, 0xBF	; 191
    58e8:	98 e0       	ldi	r25, 0x08	; 8
    58ea:	a0 e0       	ldi	r26, 0x00	; 0
    58ec:	af 93       	push	r26
    58ee:	9f 93       	push	r25
    58f0:	8f 93       	push	r24
    58f2:	df 93       	push	r29
    58f4:	cf 93       	push	r28
    58f6:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    return strlen(buffer);
    58fa:	be 01       	movw	r22, r28
    58fc:	80 e8       	ldi	r24, 0x80	; 128
    58fe:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    5902:	2d b7       	in	r18, 0x3d	; 61
    5904:	3e b7       	in	r19, 0x3e	; 62
    5906:	25 5f       	subi	r18, 0xF5	; 245
    5908:	3f 4f       	sbci	r19, 0xFF	; 255
    590a:	0f b6       	in	r0, 0x3f	; 63
    590c:	f8 94       	cli
    590e:	3e bf       	out	0x3e, r19	; 62
    5910:	0f be       	out	0x3f, r0	; 63
    5912:	2d bf       	out	0x3d, r18	; 61
}
    5914:	df 91       	pop	r29
    5916:	cf 91       	pop	r28
    5918:	1f 91       	pop	r17
    591a:	0f 91       	pop	r16
    591c:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00005c5c <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    5c5c:	cf 92       	push	r12
    5c5e:	df 92       	push	r13
    5c60:	ef 92       	push	r14
    5c62:	0f 93       	push	r16
    5c64:	1f 93       	push	r17
    5c66:	cf 93       	push	r28
    5c68:	df 93       	push	r29
    5c6a:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    5c6c:	6b 01       	movw	r12, r22
    5c6e:	80 e8       	ldi	r24, 0x80	; 128
    5c70:	e8 2e       	mov	r14, r24
    5c72:	8e 2d       	mov	r24, r14
    5c74:	b6 01       	movw	r22, r12
    5c76:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    5c7a:	40 97       	sbiw	r24, 0x10	; 16
    5c7c:	49 f4       	brne	.+18     	; 0x5c90 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    5c7e:	2e 2d       	mov	r18, r14
    5c80:	86 01       	movw	r16, r12
    5c82:	45 ec       	ldi	r20, 0xC5	; 197
    5c84:	58 e0       	ldi	r21, 0x08	; 8
    5c86:	60 e0       	ldi	r22, 0x00	; 0
    5c88:	ce 01       	movw	r24, r28
    5c8a:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <mac_set_parameter>
    5c8e:	02 c0       	rjmp	.+4      	; 0x5c94 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    5c90:	8f ef       	ldi	r24, 0xFF	; 255
    5c92:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    5c94:	df 91       	pop	r29
    5c96:	cf 91       	pop	r28
    5c98:	1f 91       	pop	r17
    5c9a:	0f 91       	pop	r16
    5c9c:	ef 90       	pop	r14
    5c9e:	df 90       	pop	r13
    5ca0:	cf 90       	pop	r12
    5ca2:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00005ca4 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    5ca4:	cf 92       	push	r12
    5ca6:	df 92       	push	r13
    5ca8:	ef 92       	push	r14
    5caa:	0f 93       	push	r16
    5cac:	1f 93       	push	r17
    5cae:	cf 93       	push	r28
    5cb0:	df 93       	push	r29
    5cb2:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    5cb4:	6b 01       	movw	r12, r22
    5cb6:	80 e8       	ldi	r24, 0x80	; 128
    5cb8:	e8 2e       	mov	r14, r24
    5cba:	8e 2d       	mov	r24, r14
    5cbc:	b6 01       	movw	r22, r12
    5cbe:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    5cc2:	40 97       	sbiw	r24, 0x10	; 16
    5cc4:	49 f4       	brne	.+18     	; 0x5cd8 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    5cc6:	2e 2d       	mov	r18, r14
    5cc8:	86 01       	movw	r16, r12
    5cca:	44 ed       	ldi	r20, 0xD4	; 212
    5ccc:	58 e0       	ldi	r21, 0x08	; 8
    5cce:	60 e0       	ldi	r22, 0x00	; 0
    5cd0:	ce 01       	movw	r24, r28
    5cd2:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <mac_set_parameter>
    5cd6:	02 c0       	rjmp	.+4      	; 0x5cdc <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    5cd8:	8f ef       	ldi	r24, 0xFF	; 255
    5cda:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    5cdc:	df 91       	pop	r29
    5cde:	cf 91       	pop	r28
    5ce0:	1f 91       	pop	r17
    5ce2:	0f 91       	pop	r16
    5ce4:	ef 90       	pop	r14
    5ce6:	df 90       	pop	r13
    5ce8:	cf 90       	pop	r12
    5cea:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00005cec <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    5cec:	cf 92       	push	r12
    5cee:	df 92       	push	r13
    5cf0:	ef 92       	push	r14
    5cf2:	0f 93       	push	r16
    5cf4:	1f 93       	push	r17
    5cf6:	cf 93       	push	r28
    5cf8:	df 93       	push	r29
    5cfa:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    5cfc:	6b 01       	movw	r12, r22
    5cfe:	80 e8       	ldi	r24, 0x80	; 128
    5d00:	e8 2e       	mov	r14, r24
    5d02:	8e 2d       	mov	r24, r14
    5d04:	b6 01       	movw	r22, r12
    5d06:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    5d0a:	80 97       	sbiw	r24, 0x20	; 32
    5d0c:	49 f4       	brne	.+18     	; 0x5d20 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    5d0e:	2e 2d       	mov	r18, r14
    5d10:	86 01       	movw	r16, r12
    5d12:	43 ee       	ldi	r20, 0xE3	; 227
    5d14:	58 e0       	ldi	r21, 0x08	; 8
    5d16:	60 e0       	ldi	r22, 0x00	; 0
    5d18:	ce 01       	movw	r24, r28
    5d1a:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <mac_set_parameter>
    5d1e:	02 c0       	rjmp	.+4      	; 0x5d24 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    5d20:	8f ef       	ldi	r24, 0xFF	; 255
    5d22:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    5d24:	df 91       	pop	r29
    5d26:	cf 91       	pop	r28
    5d28:	1f 91       	pop	r17
    5d2a:	0f 91       	pop	r16
    5d2c:	ef 90       	pop	r14
    5d2e:	df 90       	pop	r13
    5d30:	cf 90       	pop	r12
    5d32:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00006680 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    6680:	0f 93       	push	r16
    6682:	1f 93       	push	r17
	if(state==0){
    6684:	61 11       	cpse	r22, r1
    6686:	09 c0       	rjmp	.+18     	; 0x669a <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    6688:	02 ef       	ldi	r16, 0xF2	; 242
    668a:	18 e0       	ldi	r17, 0x08	; 8
    668c:	20 e0       	ldi	r18, 0x00	; 0
    668e:	46 ef       	ldi	r20, 0xF6	; 246
    6690:	58 e0       	ldi	r21, 0x08	; 8
    6692:	60 e0       	ldi	r22, 0x00	; 0
    6694:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <mac_set_parameter>
    6698:	08 c0       	rjmp	.+16     	; 0x66aa <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    669a:	02 e0       	ldi	r16, 0x02	; 2
    669c:	19 e0       	ldi	r17, 0x09	; 9
    669e:	20 e0       	ldi	r18, 0x00	; 0
    66a0:	46 ef       	ldi	r20, 0xF6	; 246
    66a2:	58 e0       	ldi	r21, 0x08	; 8
    66a4:	60 e0       	ldi	r22, 0x00	; 0
    66a6:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <mac_set_parameter>
	}
}
    66aa:	1f 91       	pop	r17
    66ac:	0f 91       	pop	r16
    66ae:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

0000419a <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    419a:	df 92       	push	r13
    419c:	ef 92       	push	r14
    419e:	ff 92       	push	r15
    41a0:	0f 93       	push	r16
    41a2:	1f 93       	push	r17
    41a4:	cf 93       	push	r28
    41a6:	df 93       	push	r29
    41a8:	cd b7       	in	r28, 0x3d	; 61
    41aa:	de b7       	in	r29, 0x3e	; 62
    41ac:	c9 5c       	subi	r28, 0xC9	; 201
    41ae:	d1 09       	sbc	r29, r1
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    41bc:	9f ef       	ldi	r25, 0xFF	; 255
    41be:	96 0f       	add	r25, r22
    41c0:	9f 3d       	cpi	r25, 0xDF	; 223
    41c2:	60 f5       	brcc	.+88     	; 0x421c <mac_tx_confirmed+0x82>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    41c4:	9f ef       	ldi	r25, 0xFF	; 255
    41c6:	92 0f       	add	r25, r18
    41c8:	94 36       	cpi	r25, 0x64	; 100
    41ca:	58 f5       	brcc	.+86     	; 0x4222 <mac_tx_confirmed+0x88>
    41cc:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    41ce:	60 e8       	ldi	r22, 0x80	; 128
    41d0:	ce 01       	movw	r24, r28
    41d2:	01 96       	adiw	r24, 0x01	; 1
    41d4:	7c 01       	movw	r14, r24
    41d6:	0e 94 9a 24 	call	0x4934	; 0x4934 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    41da:	c7 01       	movw	r24, r14
    41dc:	a0 e8       	ldi	r26, 0x80	; 128
    41de:	af 93       	push	r26
    41e0:	9f 93       	push	r25
    41e2:	ef 92       	push	r14
    41e4:	1f 92       	push	r1
    41e6:	df 92       	push	r13
    41e8:	85 e0       	ldi	r24, 0x05	; 5
    41ea:	99 e0       	ldi	r25, 0x09	; 9
    41ec:	a0 e0       	ldi	r26, 0x00	; 0
    41ee:	af 93       	push	r26
    41f0:	9f 93       	push	r25
    41f2:	8f 93       	push	r24
    41f4:	80 e1       	ldi	r24, 0x10	; 16
    41f6:	99 e0       	ldi	r25, 0x09	; 9
    41f8:	a0 e0       	ldi	r26, 0x00	; 0
    41fa:	af 93       	push	r26
    41fc:	9f 93       	push	r25
    41fe:	8f 93       	push	r24
    4200:	1f 93       	push	r17
    4202:	0f 93       	push	r16
    4204:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    
	
    return strlen(buffer);
    4208:	b8 01       	movw	r22, r16
    420a:	80 e8       	ldi	r24, 0x80	; 128
    420c:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	f8 94       	cli
    4214:	de bf       	out	0x3e, r29	; 62
    4216:	0f be       	out	0x3f, r0	; 63
    4218:	cd bf       	out	0x3d, r28	; 61
    421a:	05 c0       	rjmp	.+10     	; 0x4226 <mac_tx_confirmed+0x8c>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    421c:	8f ef       	ldi	r24, 0xFF	; 255
    421e:	9f ef       	ldi	r25, 0xFF	; 255
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <mac_tx_confirmed+0x8c>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    4222:	8f ef       	ldi	r24, 0xFF	; 255
    4224:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    4226:	c7 53       	subi	r28, 0x37	; 55
    4228:	df 4f       	sbci	r29, 0xFF	; 255
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	f8 94       	cli
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	cd bf       	out	0x3d, r28	; 61
    4234:	df 91       	pop	r29
    4236:	cf 91       	pop	r28
    4238:	1f 91       	pop	r17
    423a:	0f 91       	pop	r16
    423c:	ff 90       	pop	r15
    423e:	ef 90       	pop	r14
    4240:	df 90       	pop	r13
    4242:	08 95       	ret

Disassembly of section .text.decode_tx_response:

00005068 <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    5068:	cf 92       	push	r12
    506a:	df 92       	push	r13
    506c:	ef 92       	push	r14
    506e:	6b 01       	movw	r12, r22
    5070:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    5072:	21 e7       	ldi	r18, 0x71	; 113
    5074:	39 e0       	ldi	r19, 0x09	; 9
    5076:	40 e0       	ldi	r20, 0x00	; 0
    5078:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    507c:	89 2b       	or	r24, r25
    507e:	e9 f0       	breq	.+58     	; 0x50ba <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    5080:	2c e7       	ldi	r18, 0x7C	; 124
    5082:	39 e0       	ldi	r19, 0x09	; 9
    5084:	40 e0       	ldi	r20, 0x00	; 0
    5086:	8e 2d       	mov	r24, r14
    5088:	b6 01       	movw	r22, r12
    508a:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    508e:	89 2b       	or	r24, r25
    5090:	b1 f0       	breq	.+44     	; 0x50be <decode_tx_response+0x56>
	if(util_str_begins_with(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    5092:	24 e8       	ldi	r18, 0x84	; 132
    5094:	39 e0       	ldi	r19, 0x09	; 9
    5096:	40 e0       	ldi	r20, 0x00	; 0
    5098:	8e 2d       	mov	r24, r14
    509a:	b6 01       	movw	r22, r12
    509c:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <util_str_begins_with>
    50a0:	81 11       	cpse	r24, r1
    50a2:	0f c0       	rjmp	.+30     	; 0x50c2 <decode_tx_response+0x5a>
	if(util_str_begins_with(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    50a4:	2b e8       	ldi	r18, 0x8B	; 139
    50a6:	39 e0       	ldi	r19, 0x09	; 9
    50a8:	40 e0       	ldi	r20, 0x00	; 0
    50aa:	8e 2d       	mov	r24, r14
    50ac:	b6 01       	movw	r22, r12
    50ae:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <util_str_begins_with>
    50b2:	88 23       	and	r24, r24
    50b4:	41 f0       	breq	.+16     	; 0x50c6 <decode_tx_response+0x5e>
    50b6:	85 e0       	ldi	r24, 0x05	; 5
    50b8:	07 c0       	rjmp	.+14     	; 0x50c8 <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    50ba:	82 e0       	ldi	r24, 0x02	; 2
    50bc:	05 c0       	rjmp	.+10     	; 0x50c8 <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    50be:	84 e0       	ldi	r24, 0x04	; 4
    50c0:	03 c0       	rjmp	.+6      	; 0x50c8 <decode_tx_response+0x60>
	if(util_str_begins_with(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	01 c0       	rjmp	.+2      	; 0x50c8 <decode_tx_response+0x60>
	if(util_str_begins_with(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    50c6:	81 e0       	ldi	r24, 0x01	; 1
}
    50c8:	ef 90       	pop	r14
    50ca:	df 90       	pop	r13
    50cc:	cf 90       	pop	r12
    50ce:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00003734 <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    3734:	df 92       	push	r13
    3736:	ef 92       	push	r14
    3738:	ff 92       	push	r15
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	28 97       	sbiw	r28, 0x08	; 8
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	f8 94       	cli
    374c:	de bf       	out	0x3e, r29	; 62
    374e:	0f be       	out	0x3f, r0	; 63
    3750:	cd bf       	out	0x3d, r28	; 61
    3752:	d8 2e       	mov	r13, r24
    3754:	7b 01       	movw	r14, r22
    3756:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    3758:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    375a:	12 30       	cpi	r17, 0x02	; 2
    375c:	09 f4       	brne	.+2      	; 0x3760 <SU_send_uplink+0x2c>
    375e:	40 c0       	rjmp	.+128    	; 0x37e0 <SU_send_uplink+0xac>
    3760:	28 f4       	brcc	.+10     	; 0x376c <SU_send_uplink+0x38>
    3762:	11 23       	and	r17, r17
    3764:	49 f0       	breq	.+18     	; 0x3778 <SU_send_uplink+0x44>
    3766:	11 30       	cpi	r17, 0x01	; 1
    3768:	49 f1       	breq	.+82     	; 0x37bc <SU_send_uplink+0x88>
    376a:	f7 cf       	rjmp	.-18     	; 0x375a <SU_send_uplink+0x26>
    376c:	13 30       	cpi	r17, 0x03	; 3
    376e:	09 f4       	brne	.+2      	; 0x3772 <SU_send_uplink+0x3e>
    3770:	4e c0       	rjmp	.+156    	; 0x380e <SU_send_uplink+0xda>
    3772:	14 30       	cpi	r17, 0x04	; 4
    3774:	d9 f1       	breq	.+118    	; 0x37ec <SU_send_uplink+0xb8>
    3776:	f1 cf       	rjmp	.-30     	; 0x375a <SU_send_uplink+0x26>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    3778:	20 2f       	mov	r18, r16
    377a:	a7 01       	movw	r20, r14
    377c:	6d 2d       	mov	r22, r13
    377e:	80 e9       	ldi	r24, 0x90	; 144
    3780:	92 e0       	ldi	r25, 0x02	; 2
    3782:	0e 94 cd 20 	call	0x419a	; 0x419a <mac_tx_confirmed>
				attach_ending(lm_msg);
    3786:	80 e9       	ldi	r24, 0x90	; 144
    3788:	92 e0       	ldi	r25, 0x02	; 2
    378a:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <attach_ending>
				uart0_hal_send_string(lm_msg);
    378e:	60 e9       	ldi	r22, 0x90	; 144
    3790:	72 e0       	ldi	r23, 0x02	; 2
    3792:	80 e8       	ldi	r24, 0x80	; 128
    3794:	0e 94 1d 24 	call	0x483a	; 0x483a <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    3798:	42 e0       	ldi	r20, 0x02	; 2
    379a:	50 e0       	ldi	r21, 0x00	; 0
    379c:	61 e0       	ldi	r22, 0x01	; 1
    379e:	70 e0       	ldi	r23, 0x00	; 0
    37a0:	ce 01       	movw	r24, r28
    37a2:	01 96       	adiw	r24, 0x01	; 1
    37a4:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    37a8:	2c e9       	ldi	r18, 0x9C	; 156
    37aa:	39 e0       	ldi	r19, 0x09	; 9
    37ac:	40 e0       	ldi	r20, 0x00	; 0
    37ae:	60 e0       	ldi	r22, 0x00	; 0
    37b0:	ce 01       	movw	r24, r28
    37b2:	01 96       	adiw	r24, 0x01	; 1
    37b4:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				state=SU_WAIT_FOR_INCOMMING;
    37b8:	14 e0       	ldi	r17, 0x04	; 4
			break;
    37ba:	cf cf       	rjmp	.-98     	; 0x375a <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_set_pending_states(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    37bc:	42 e0       	ldi	r20, 0x02	; 2
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	63 e0       	ldi	r22, 0x03	; 3
    37c2:	70 e0       	ldi	r23, 0x00	; 0
    37c4:	ce 01       	movw	r24, r28
    37c6:	01 96       	adiw	r24, 0x01	; 1
    37c8:	0e 94 64 38 	call	0x70c8	; 0x70c8 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, MAC_TX_OK);
    37cc:	2f e9       	ldi	r18, 0x9F	; 159
    37ce:	39 e0       	ldi	r19, 0x09	; 9
    37d0:	40 e0       	ldi	r20, 0x00	; 0
    37d2:	60 e0       	ldi	r22, 0x00	; 0
    37d4:	ce 01       	movw	r24, r28
    37d6:	01 96       	adiw	r24, 0x01	; 1
    37d8:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <util_set_match_case>
				state=SU_WAIT_FOR_INCOMMING;
    37dc:	14 e0       	ldi	r17, 0x04	; 4
			break;
    37de:	bd cf       	rjmp	.-134    	; 0x375a <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    37e0:	60 e9       	ldi	r22, 0x90	; 144
    37e2:	72 e0       	ldi	r23, 0x02	; 2
    37e4:	80 e8       	ldi	r24, 0x80	; 128
    37e6:	0e 94 34 28 	call	0x5068	; 0x5068 <decode_tx_response>
    37ea:	12 c0       	rjmp	.+36     	; 0x3810 <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    37ec:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <uart0_hal_message_ready>
    37f0:	88 23       	and	r24, r24
    37f2:	09 f4       	brne	.+2      	; 0x37f6 <SU_send_uplink+0xc2>
    37f4:	b2 cf       	rjmp	.-156    	; 0x375a <SU_send_uplink+0x26>
					uart0_hal_read_message_as_str(lm_msg);
    37f6:	80 e9       	ldi	r24, 0x90	; 144
    37f8:	92 e0       	ldi	r25, 0x02	; 2
    37fa:	0e 94 28 34 	call	0x6850	; 0x6850 <uart0_hal_read_message_as_str>
					state=util_match_message(&stateData, lm_msg);
    37fe:	60 e9       	ldi	r22, 0x90	; 144
    3800:	72 e0       	ldi	r23, 0x02	; 2
    3802:	ce 01       	movw	r24, r28
    3804:	01 96       	adiw	r24, 0x01	; 1
    3806:	0e 94 c2 29 	call	0x5384	; 0x5384 <util_match_message>
    380a:	18 2f       	mov	r17, r24
    380c:	a6 cf       	rjmp	.-180    	; 0x375a <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    380e:	80 e0       	ldi	r24, 0x00	; 0
					state=util_match_message(&stateData, lm_msg);
				}
			break;
		}
	}
}
    3810:	28 96       	adiw	r28, 0x08	; 8
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	1f 91       	pop	r17
    3822:	0f 91       	pop	r16
    3824:	ff 90       	pop	r15
    3826:	ef 90       	pop	r14
    3828:	df 90       	pop	r13
    382a:	08 95       	ret

Disassembly of section .text.cb_counter:

00006e2a <cb_counter>:
		return LM_STATUS_FATAL_ERROR;
	}
}

static void cb_counter(){
	cnt++;
    6e2a:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <cnt>
    6e2e:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <cnt+0x1>
    6e32:	01 96       	adiw	r24, 0x01	; 1
    6e34:	90 93 ce 0e 	sts	0x0ECE, r25	; 0x800ece <cnt+0x1>
    6e38:	80 93 cd 0e 	sts	0x0ECD, r24	; 0x800ecd <cnt>
    6e3c:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00006274 <SC_put_to_sleep>:
static uint16_t cnt=0;
static int8_t eventPointer;

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    6274:	40 e0       	ldi	r20, 0x00	; 0
    6276:	5c e5       	ldi	r21, 0x5C	; 92
    6278:	66 e2       	ldi	r22, 0x26	; 38
    627a:	75 e0       	ldi	r23, 0x05	; 5
    627c:	80 e9       	ldi	r24, 0x90	; 144
    627e:	92 e0       	ldi	r25, 0x02	; 2
    6280:	0e 94 35 29 	call	0x526a	; 0x526a <sys_sleep_cmd>
	attach_ending(lm_msg);
    6284:	80 e9       	ldi	r24, 0x90	; 144
    6286:	92 e0       	ldi	r25, 0x02	; 2
    6288:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <attach_ending>
	uart0_hal_send_string(lm_msg);
    628c:	60 e9       	ldi	r22, 0x90	; 144
    628e:	72 e0       	ldi	r23, 0x02	; 2
    6290:	80 e8       	ldi	r24, 0x80	; 128
    6292:	0e 94 1d 24 	call	0x483a	; 0x483a <uart0_hal_send_string>
    6296:	2f ef       	ldi	r18, 0xFF	; 255
    6298:	81 ee       	ldi	r24, 0xE1	; 225
    629a:	94 e0       	ldi	r25, 0x04	; 4
    629c:	21 50       	subi	r18, 0x01	; 1
    629e:	80 40       	sbci	r24, 0x00	; 0
    62a0:	90 40       	sbci	r25, 0x00	; 0
    62a2:	e1 f7       	brne	.-8      	; 0x629c <SC_put_to_sleep+0x28>
    62a4:	00 c0       	rjmp	.+0      	; 0x62a6 <SC_put_to_sleep+0x32>
    62a6:	00 00       	nop
	_delay_ms(200);
	return LM_STATUS_SUCCESS;
}
    62a8:	80 e0       	ldi	r24, 0x00	; 0
    62aa:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00004f24 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    4f24:	85 e5       	ldi	r24, 0x55	; 85
    4f26:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <uart0_hal_send_break>
	
	//Create watchdog
	cnt=0;
    4f2a:	10 92 ce 0e 	sts	0x0ECE, r1	; 0x800ece <cnt+0x1>
    4f2e:	10 92 cd 0e 	sts	0x0ECD, r1	; 0x800ecd <cnt>
	eventPointer=TC2_HAL_subscribe(&cb_counter);
    4f32:	85 e1       	ldi	r24, 0x15	; 21
    4f34:	97 e3       	ldi	r25, 0x37	; 55
    4f36:	0e 94 26 2b 	call	0x564c	; 0x564c <TC2_HAL_subscribe>
    4f3a:	80 93 e9 0e 	sts	0x0EE9, r24	; 0x800ee9 <eventPointer>
	
	//Expect ok from sleep
	while(uart0_hal_message_ready()==false && cnt<LM_SLEEP_WATCHDOG_CNT){}
    4f3e:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <uart0_hal_message_ready>
    4f42:	81 11       	cpse	r24, r1
    4f44:	06 c0       	rjmp	.+12     	; 0x4f52 <SC_wake_up+0x2e>
    4f46:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <cnt>
    4f4a:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <cnt+0x1>
    4f4e:	0a 97       	sbiw	r24, 0x0a	; 10
    4f50:	b0 f3       	brcs	.-20     	; 0x4f3e <SC_wake_up+0x1a>
		
	TC2_HAL_cancel(eventPointer);
    4f52:	80 91 e9 0e 	lds	r24, 0x0EE9	; 0x800ee9 <eventPointer>
    4f56:	0e 94 8d 30 	call	0x611a	; 0x611a <TC2_HAL_cancel>
		
	if(cnt>=LM_SLEEP_WATCHDOG_CNT){
    4f5a:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <cnt>
    4f5e:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <cnt+0x1>
    4f62:	0a 97       	sbiw	r24, 0x0a	; 10
    4f64:	20 f0       	brcs	.+8      	; 0x4f6e <SC_wake_up+0x4a>
		uart0_hal_clear_rx_buffer();
    4f66:	0e 94 92 38 	call	0x7124	; 0x7124 <uart0_hal_clear_rx_buffer>
		return LM_STATUS_FATAL_ERROR;
    4f6a:	81 e0       	ldi	r24, 0x01	; 1
    4f6c:	08 95       	ret
	}else{
		uart0_hal_read_message_as_str(lm_msg);
    4f6e:	80 e9       	ldi	r24, 0x90	; 144
    4f70:	92 e0       	ldi	r25, 0x02	; 2
    4f72:	0e 94 28 34 	call	0x6850	; 0x6850 <uart0_hal_read_message_as_str>
		
		if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    4f76:	60 e9       	ldi	r22, 0x90	; 144
    4f78:	72 e0       	ldi	r23, 0x02	; 2
    4f7a:	80 e8       	ldi	r24, 0x80	; 128
    4f7c:	2e ec       	ldi	r18, 0xCE	; 206
    4f7e:	39 e0       	ldi	r19, 0x09	; 9
    4f80:	40 e0       	ldi	r20, 0x00	; 0
    4f82:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    4f86:	89 2b       	or	r24, r25
    4f88:	11 f4       	brne	.+4      	; 0x4f8e <SC_wake_up+0x6a>
    4f8a:	80 e0       	ldi	r24, 0x00	; 0
    4f8c:	08 95       	ret
		return LM_STATUS_FATAL_ERROR;
    4f8e:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    4f90:	08 95       	ret

Disassembly of section .text.cb_watchdog_counter:

000070bc <cb_watchdog_counter>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    70bc:	80 91 eb 0e 	lds	r24, 0x0EEB	; 0x800eeb <wd_cnt>
    70c0:	8f 5f       	subi	r24, 0xFF	; 255
    70c2:	80 93 eb 0e 	sts	0x0EEB, r24	; 0x800eeb <wd_cnt>
    70c6:	08 95       	ret

Disassembly of section .text.util_set_pending_states:

000070c8 <util_set_pending_states>:
char lm_msg[250];

static void cb_watchdog_counter();

void util_set_pending_states(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    70c8:	fc 01       	movw	r30, r24
    70ca:	71 83       	std	Z+1, r23	; 0x01
    70cc:	60 83       	st	Z, r22
	sd->failure_state=failed;
    70ce:	53 83       	std	Z+3, r21	; 0x03
    70d0:	42 83       	std	Z+2, r20	; 0x02
    70d2:	08 95       	ret

Disassembly of section .text.util_set_match_case:

000070d4 <util_set_match_case>:
}

void util_set_match_case(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    70d4:	fc 01       	movw	r30, r24
    70d6:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    70d8:	25 83       	std	Z+5, r18	; 0x05
    70da:	36 83       	std	Z+6, r19	; 0x06
    70dc:	47 83       	std	Z+7, r20	; 0x07
    70de:	08 95       	ret

Disassembly of section .text.util_str_begins_with:

00005b80 <util_str_begins_with>:
		return sd->failure_state;
	}
}


bool util_str_begins_with(const char *s1, const char *s2){
    5b80:	6f 92       	push	r6
    5b82:	7f 92       	push	r7
    5b84:	8f 92       	push	r8
    5b86:	cf 92       	push	r12
    5b88:	df 92       	push	r13
    5b8a:	ef 92       	push	r14
    5b8c:	0f 93       	push	r16
    5b8e:	1f 93       	push	r17
    5b90:	3b 01       	movw	r6, r22
    5b92:	88 2e       	mov	r8, r24
    5b94:	69 01       	movw	r12, r18
    5b96:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    5b98:	84 2f       	mov	r24, r20
    5b9a:	b9 01       	movw	r22, r18
    5b9c:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    5ba0:	8c 01       	movw	r16, r24
    5ba2:	4e 2d       	mov	r20, r14
    5ba4:	96 01       	movw	r18, r12
    5ba6:	88 2d       	mov	r24, r8
    5ba8:	b3 01       	movw	r22, r6
    5baa:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <strncmp>
    5bae:	21 e0       	ldi	r18, 0x01	; 1
    5bb0:	89 2b       	or	r24, r25
    5bb2:	09 f0       	breq	.+2      	; 0x5bb6 <util_str_begins_with+0x36>
    5bb4:	20 e0       	ldi	r18, 0x00	; 0
}
    5bb6:	82 2f       	mov	r24, r18
    5bb8:	1f 91       	pop	r17
    5bba:	0f 91       	pop	r16
    5bbc:	ef 90       	pop	r14
    5bbe:	df 90       	pop	r13
    5bc0:	cf 90       	pop	r12
    5bc2:	8f 90       	pop	r8
    5bc4:	7f 90       	pop	r7
    5bc6:	6f 90       	pop	r6
    5bc8:	08 95       	ret

Disassembly of section .text.util_match_message:

00005384 <util_match_message>:
void util_set_match_case(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_match_message(LM_STATE_DATA *sd, char *msg){
    5384:	cf 93       	push	r28
    5386:	df 93       	push	r29
    5388:	ec 01       	movw	r28, r24
	switch(sd->matchCase){
    538a:	8c 81       	ldd	r24, Y+4	; 0x04
    538c:	81 30       	cpi	r24, 0x01	; 1
    538e:	91 f0       	breq	.+36     	; 0x53b4 <util_match_message+0x30>
    5390:	18 f0       	brcs	.+6      	; 0x5398 <util_match_message+0x14>
    5392:	82 30       	cpi	r24, 0x02	; 2
    5394:	e9 f0       	breq	.+58     	; 0x53d0 <util_match_message+0x4c>
    5396:	1f c0       	rjmp	.+62     	; 0x53d6 <util_match_message+0x52>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    5398:	2d 81       	ldd	r18, Y+5	; 0x05
    539a:	3e 81       	ldd	r19, Y+6	; 0x06
    539c:	4f 81       	ldd	r20, Y+7	; 0x07
    539e:	80 e8       	ldi	r24, 0x80	; 128
    53a0:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    53a4:	89 2b       	or	r24, r25
    53a6:	19 f4       	brne	.+6      	; 0x53ae <util_match_message+0x2a>
    53a8:	88 81       	ld	r24, Y
    53aa:	99 81       	ldd	r25, Y+1	; 0x01
    53ac:	16 c0       	rjmp	.+44     	; 0x53da <util_match_message+0x56>
    53ae:	8a 81       	ldd	r24, Y+2	; 0x02
    53b0:	9b 81       	ldd	r25, Y+3	; 0x03
    53b2:	13 c0       	rjmp	.+38     	; 0x53da <util_match_message+0x56>

		case LM_BEGINS_WITH:
		return util_str_begins_with(msg, sd->matchString)?sd->success_state:sd->failure_state;
    53b4:	2d 81       	ldd	r18, Y+5	; 0x05
    53b6:	3e 81       	ldd	r19, Y+6	; 0x06
    53b8:	4f 81       	ldd	r20, Y+7	; 0x07
    53ba:	80 e8       	ldi	r24, 0x80	; 128
    53bc:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <util_str_begins_with>
    53c0:	88 23       	and	r24, r24
    53c2:	19 f0       	breq	.+6      	; 0x53ca <util_match_message+0x46>
    53c4:	88 81       	ld	r24, Y
    53c6:	99 81       	ldd	r25, Y+1	; 0x01
    53c8:	08 c0       	rjmp	.+16     	; 0x53da <util_match_message+0x56>
    53ca:	8a 81       	ldd	r24, Y+2	; 0x02
    53cc:	9b 81       	ldd	r25, Y+3	; 0x03
    53ce:	05 c0       	rjmp	.+10     	; 0x53da <util_match_message+0x56>

		case LM_NO_TEST:
		return sd->success_state;
    53d0:	88 81       	ld	r24, Y
    53d2:	99 81       	ldd	r25, Y+1	; 0x01
    53d4:	02 c0       	rjmp	.+4      	; 0x53da <util_match_message+0x56>
		default:
		return sd->failure_state;
    53d6:	8a 81       	ldd	r24, Y+2	; 0x02
    53d8:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    53da:	df 91       	pop	r29
    53dc:	cf 91       	pop	r28
    53de:	08 95       	ret

Disassembly of section .text.util_reset_module:

00005e08 <util_reset_module>:
bool util_str_begins_with(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    5e08:	0e 94 cc 38 	call	0x7198	; 0x7198 <rn2483_reset_active>
    5e0c:	2f ef       	ldi	r18, 0xFF	; 255
    5e0e:	89 e6       	ldi	r24, 0x69	; 105
    5e10:	98 e1       	ldi	r25, 0x18	; 24
    5e12:	21 50       	subi	r18, 0x01	; 1
    5e14:	80 40       	sbci	r24, 0x00	; 0
    5e16:	90 40       	sbci	r25, 0x00	; 0
    5e18:	e1 f7       	brne	.-8      	; 0x5e12 <util_reset_module+0xa>
    5e1a:	00 c0       	rjmp	.+0      	; 0x5e1c <util_reset_module+0x14>
    5e1c:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    5e1e:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    5e22:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <uart0_hal_message_ready>
    5e26:	88 23       	and	r24, r24
    5e28:	e1 f3       	breq	.-8      	; 0x5e22 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    5e2a:	80 e9       	ldi	r24, 0x90	; 144
    5e2c:	92 e0       	ldi	r25, 0x02	; 2
    5e2e:	0e 94 28 34 	call	0x6850	; 0x6850 <uart0_hal_read_message_as_str>
	
	if(util_str_begins_with(lm_msg, RN2483)){
    5e32:	60 e9       	ldi	r22, 0x90	; 144
    5e34:	72 e0       	ldi	r23, 0x02	; 2
    5e36:	80 e8       	ldi	r24, 0x80	; 128
    5e38:	29 ea       	ldi	r18, 0xA9	; 169
    5e3a:	39 e0       	ldi	r19, 0x09	; 9
    5e3c:	40 e0       	ldi	r20, 0x00	; 0
    5e3e:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <util_str_begins_with>
    5e42:	88 23       	and	r24, r24
    5e44:	11 f0       	breq	.+4      	; 0x5e4a <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    5e46:	80 e0       	ldi	r24, 0x00	; 0
    5e48:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    5e4a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    5e4c:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00004a28 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    4a28:	cf 93       	push	r28
    4a2a:	df 93       	push	r29
    4a2c:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    4a2e:	ab 01       	movw	r20, r22
    4a30:	68 2f       	mov	r22, r24
    4a32:	80 e9       	ldi	r24, 0x90	; 144
    4a34:	92 e0       	ldi	r25, 0x02	; 2
    4a36:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <strcpy>
	attach_ending(lm_msg);
    4a3a:	80 e9       	ldi	r24, 0x90	; 144
    4a3c:	92 e0       	ldi	r25, 0x02	; 2
    4a3e:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <attach_ending>
	uart0_hal_send_string(lm_msg);
    4a42:	60 e9       	ldi	r22, 0x90	; 144
    4a44:	72 e0       	ldi	r23, 0x02	; 2
    4a46:	80 e8       	ldi	r24, 0x80	; 128
    4a48:	0e 94 1d 24 	call	0x483a	; 0x483a <uart0_hal_send_string>
	
	wd_cnt=0;
    4a4c:	10 92 eb 0e 	sts	0x0EEB, r1	; 0x800eeb <wd_cnt>
	wd_cb_pointer=TC2_HAL_subscribe(&cb_watchdog_counter);
    4a50:	8e e5       	ldi	r24, 0x5E	; 94
    4a52:	98 e3       	ldi	r25, 0x38	; 56
    4a54:	0e 94 26 2b 	call	0x564c	; 0x564c <TC2_HAL_subscribe>
    4a58:	80 93 ea 0e 	sts	0x0EEA, r24	; 0x800eea <wd_cb_pointer>
	
	while(!uart0_hal_message_ready() && wd_cnt<15);
    4a5c:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <uart0_hal_message_ready>
    4a60:	81 11       	cpse	r24, r1
    4a62:	04 c0       	rjmp	.+8      	; 0x4a6c <util_lora_forward_msg+0x44>
    4a64:	80 91 eb 0e 	lds	r24, 0x0EEB	; 0x800eeb <wd_cnt>
    4a68:	8f 30       	cpi	r24, 0x0F	; 15
    4a6a:	c0 f3       	brcs	.-16     	; 0x4a5c <util_lora_forward_msg+0x34>
	TC2_HAL_cancel(wd_cb_pointer);
    4a6c:	80 91 ea 0e 	lds	r24, 0x0EEA	; 0x800eea <wd_cb_pointer>
    4a70:	0e 94 8d 30 	call	0x611a	; 0x611a <TC2_HAL_cancel>
	if(wd_cnt>=15){
    4a74:	80 91 eb 0e 	lds	r24, 0x0EEB	; 0x800eeb <wd_cnt>
    4a78:	8f 30       	cpi	r24, 0x0F	; 15
    4a7a:	60 f0       	brcs	.+24     	; 0x4a94 <util_lora_forward_msg+0x6c>
		strcpy(res, "no reply...");
    4a7c:	2c e0       	ldi	r18, 0x0C	; 12
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	40 eb       	ldi	r20, 0xB0	; 176
    4a82:	59 e0       	ldi	r21, 0x09	; 9
    4a84:	60 e0       	ldi	r22, 0x00	; 0
    4a86:	ce 01       	movw	r24, r28
    4a88:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		uart0_hal_read_message_as_str(res);
    4a8c:	ce 01       	movw	r24, r28
    4a8e:	0e 94 28 34 	call	0x6850	; 0x6850 <uart0_hal_read_message_as_str>
    4a92:	03 c0       	rjmp	.+6      	; 0x4a9a <util_lora_forward_msg+0x72>
	}else{
		uart0_hal_read_message_as_str(res);
    4a94:	ce 01       	movw	r24, r28
    4a96:	0e 94 28 34 	call	0x6850	; 0x6850 <uart0_hal_read_message_as_str>
	}
}
    4a9a:	df 91       	pop	r29
    4a9c:	cf 91       	pop	r28
    4a9e:	08 95       	ret

Disassembly of section .text.util_send_break:

000071d0 <util_send_break>:

void util_send_break(){
	uart0_hal_send_break(0x55);
    71d0:	85 e5       	ldi	r24, 0x55	; 85
    71d2:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <uart0_hal_send_break>
    71d6:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00006c44 <MRPP_init_group>:
#include "mrpp.h"

static MRPP_STATE state;

uint8_t MRPP_init_group(COLLECTION collections[], uint8_t nCollections, uint8_t groupId){
    6c44:	cf 93       	push	r28
    6c46:	26 2f       	mov	r18, r22
    6c48:	c4 2f       	mov	r28, r20
    mrpp_state_init(&state, groupId, collections, nCollections);
    6c4a:	ac 01       	movw	r20, r24
    6c4c:	6c 2f       	mov	r22, r28
    6c4e:	84 e2       	ldi	r24, 0x24	; 36
    6c50:	9c e0       	ldi	r25, 0x0C	; 12
    6c52:	0e 94 0a 11 	call	0x2214	; 0x2214 <mrpp_state_init>

    return groupId+1;
}
    6c56:	81 e0       	ldi	r24, 0x01	; 1
    6c58:	8c 0f       	add	r24, r28
    6c5a:	cf 91       	pop	r28
    6c5c:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00004d68 <MRPP_add_collection_data_INT16>:


void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    4d68:	ef 92       	push	r14
    4d6a:	ff 92       	push	r15
    4d6c:	1f 93       	push	r17
    4d6e:	cf 93       	push	r28
    4d70:	df 93       	push	r29
    4d72:	cd b7       	in	r28, 0x3d	; 61
    4d74:	de b7       	in	r29, 0x3e	; 62
    4d76:	2a 97       	sbiw	r28, 0x0a	; 10
    4d78:	0f b6       	in	r0, 0x3f	; 63
    4d7a:	f8 94       	cli
    4d7c:	de bf       	out	0x3e, r29	; 62
    4d7e:	0f be       	out	0x3f, r0	; 63
    4d80:	cd bf       	out	0x3d, r28	; 61
    4d82:	18 2f       	mov	r17, r24
    4d84:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    4d86:	9e 01       	movw	r18, r28
    4d88:	2f 5f       	subi	r18, 0xFF	; 255
    4d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d8c:	ab 01       	movw	r20, r22
    4d8e:	68 2f       	mov	r22, r24
    4d90:	84 e2       	ldi	r24, 0x24	; 36
    4d92:	9c e0       	ldi	r25, 0x0C	; 12
    4d94:	0e 94 da 23 	call	0x47b4	; 0x47b4 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    4d98:	9e 01       	movw	r18, r28
    4d9a:	27 5f       	subi	r18, 0xF7	; 247
    4d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d9e:	ae 01       	movw	r20, r28
    4da0:	49 5f       	subi	r20, 0xF9	; 249
    4da2:	5f 4f       	sbci	r21, 0xFF	; 255
    4da4:	61 2f       	mov	r22, r17
    4da6:	84 e2       	ldi	r24, 0x24	; 36
    4da8:	9c e0       	ldi	r25, 0x0C	; 12
    4daa:	0e 94 a9 31 	call	0x6352	; 0x6352 <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    4dae:	29 85       	ldd	r18, Y+9	; 0x09
    4db0:	3a 85       	ldd	r19, Y+10	; 0x0a
    4db2:	4f 81       	ldd	r20, Y+7	; 0x07
    4db4:	58 85       	ldd	r21, Y+8	; 0x08
    4db6:	b7 01       	movw	r22, r14
    4db8:	ce 01       	movw	r24, r28
    4dba:	01 96       	adiw	r24, 0x01	; 1
    4dbc:	0e 94 93 23 	call	0x4726	; 0x4726 <mrpp_data_add_int16>
}
    4dc0:	2a 96       	adiw	r28, 0x0a	; 10
    4dc2:	0f b6       	in	r0, 0x3f	; 63
    4dc4:	f8 94       	cli
    4dc6:	de bf       	out	0x3e, r29	; 62
    4dc8:	0f be       	out	0x3f, r0	; 63
    4dca:	cd bf       	out	0x3d, r28	; 61
    4dcc:	df 91       	pop	r29
    4dce:	cf 91       	pop	r28
    4dd0:	1f 91       	pop	r17
    4dd2:	ff 90       	pop	r15
    4dd4:	ef 90       	pop	r14
    4dd6:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

000069a4 <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    69a4:	cf 93       	push	r28
    69a6:	df 93       	push	r29
    69a8:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    69aa:	84 e2       	ldi	r24, 0x24	; 36
    69ac:	9c e0       	ldi	r25, 0x0C	; 12
    69ae:	0e 94 70 33 	call	0x66e0	; 0x66e0 <mrpp_state_is_body_ready>
    69b2:	88 83       	st	Y, r24
    69b4:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    69b6:	89 2f       	mov	r24, r25
    69b8:	80 95       	com	r24
    
}
    69ba:	88 1f       	adc	r24, r24
    69bc:	88 27       	eor	r24, r24
    69be:	88 1f       	adc	r24, r24
    69c0:	df 91       	pop	r29
    69c2:	cf 91       	pop	r28
    69c4:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00004568 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    4568:	af 92       	push	r10
    456a:	bf 92       	push	r11
    456c:	cf 92       	push	r12
    456e:	df 92       	push	r13
    4570:	ef 92       	push	r14
    4572:	ff 92       	push	r15
    4574:	0f 93       	push	r16
    4576:	1f 93       	push	r17
    4578:	cf 93       	push	r28
    457a:	df 93       	push	r29
    457c:	00 d0       	rcall	.+0      	; 0x457e <MRPP_get_ready_body_package+0x16>
    457e:	00 d0       	rcall	.+0      	; 0x4580 <MRPP_get_ready_body_package+0x18>
    4580:	1f 92       	push	r1
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
    4586:	6b 01       	movw	r12, r22
    4588:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    458a:	9e 01       	movw	r18, r28
    458c:	2b 5f       	subi	r18, 0xFB	; 251
    458e:	3f 4f       	sbci	r19, 0xFF	; 255
    4590:	79 01       	movw	r14, r18
    4592:	8e 01       	movw	r16, r28
    4594:	0d 5f       	subi	r16, 0xFD	; 253
    4596:	1f 4f       	sbci	r17, 0xFF	; 255
    4598:	23 50       	subi	r18, 0x03	; 3
    459a:	31 09       	sbc	r19, r1
    459c:	ae 01       	movw	r20, r28
    459e:	4f 5f       	subi	r20, 0xFF	; 255
    45a0:	5f 4f       	sbci	r21, 0xFF	; 255
    45a2:	bc 01       	movw	r22, r24
    45a4:	84 e2       	ldi	r24, 0x24	; 36
    45a6:	9c e0       	ldi	r25, 0x0C	; 12
    45a8:	0e 94 16 1c 	call	0x382c	; 0x382c <mrpp_state_get_ready_body>
    
    if(!res) return false;
    45ac:	88 23       	and	r24, r24
    45ae:	b1 f0       	breq	.+44     	; 0x45dc <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    45b0:	4d 81       	ldd	r20, Y+5	; 0x05
    45b2:	83 e0       	ldi	r24, 0x03	; 3
    45b4:	84 0f       	add	r24, r20
    45b6:	f5 01       	movw	r30, r10
    45b8:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    45ba:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <state>
    45be:	f6 01       	movw	r30, r12
    45c0:	80 83       	st	Z, r24
    package[1]=subId;
    45c2:	89 81       	ldd	r24, Y+1	; 0x01
    45c4:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    45c6:	8a 81       	ldd	r24, Y+2	; 0x02
    45c8:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    45ca:	50 e0       	ldi	r21, 0x00	; 0
    45cc:	6b 81       	ldd	r22, Y+3	; 0x03
    45ce:	7c 81       	ldd	r23, Y+4	; 0x04
    45d0:	c6 01       	movw	r24, r12
    45d2:	03 96       	adiw	r24, 0x03	; 3
    45d4:	0e 94 58 33 	call	0x66b0	; 0x66b0 <mrpp_data_get>

    return true;
    45d8:	81 e0       	ldi	r24, 0x01	; 1
    45da:	01 c0       	rjmp	.+2      	; 0x45de <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    45dc:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    45de:	0f 90       	pop	r0
    45e0:	0f 90       	pop	r0
    45e2:	0f 90       	pop	r0
    45e4:	0f 90       	pop	r0
    45e6:	0f 90       	pop	r0
    45e8:	df 91       	pop	r29
    45ea:	cf 91       	pop	r28
    45ec:	1f 91       	pop	r17
    45ee:	0f 91       	pop	r16
    45f0:	ff 90       	pop	r15
    45f2:	ef 90       	pop	r14
    45f4:	df 90       	pop	r13
    45f6:	cf 90       	pop	r12
    45f8:	bf 90       	pop	r11
    45fa:	af 90       	pop	r10
    45fc:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

000070e0 <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    70e0:	bc 01       	movw	r22, r24
    70e2:	84 e2       	ldi	r24, 0x24	; 36
    70e4:	9c e0       	ldi	r25, 0x0C	; 12
    70e6:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <mrpp_state_set_body_sent>
    70ea:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

000069c6 <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    69c6:	cf 93       	push	r28
    69c8:	df 93       	push	r29
    69ca:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    69cc:	20 91 24 0c 	lds	r18, 0x0C24	; 0x800c24 <state>
    69d0:	fc 01       	movw	r30, r24
    69d2:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    69d4:	bf 01       	movw	r22, r30
    69d6:	84 e2       	ldi	r24, 0x24	; 36
    69d8:	9c e0       	ldi	r25, 0x0C	; 12
    69da:	0e 94 77 21 	call	0x42ee	; 0x42ee <mrpp_state_get_header>
    *package_length+=1;
    69de:	8f 5f       	subi	r24, 0xFF	; 255
    69e0:	88 83       	st	Y, r24
}
    69e2:	df 91       	pop	r29
    69e4:	cf 91       	pop	r28
    69e6:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

000069e8 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    69e8:	cf 93       	push	r28
    69ea:	df 93       	push	r29
    69ec:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    69ee:	20 91 24 0c 	lds	r18, 0x0C24	; 0x800c24 <state>
    69f2:	fc 01       	movw	r30, r24
    69f4:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    69f6:	bf 01       	movw	r22, r30
    69f8:	84 e2       	ldi	r24, 0x24	; 36
    69fa:	9c e0       	ldi	r25, 0x0C	; 12
    69fc:	0e 94 77 20 	call	0x40ee	; 0x40ee <mrpp_state_get_tail>
    *package_length+=1;
    6a00:	8f 5f       	subi	r24, 0xFF	; 255
    6a02:	88 83       	st	Y, r24
}
    6a04:	df 91       	pop	r29
    6a06:	cf 91       	pop	r28
    6a08:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00007156 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    7156:	84 e2       	ldi	r24, 0x24	; 36
    7158:	9c e0       	ldi	r25, 0x0C	; 12
    715a:	0e 94 13 34 	call	0x6826	; 0x6826 <mrpp_state_all_bodies_sent>
}
    715e:	08 95       	ret

Disassembly of section .text.MRPP_validate_collections_space:

00005206 <MRPP_validate_collections_space>:

bool MRPP_validate_collections_space(COLLECTION collections[], uint8_t nCollections){
    5206:	cf 93       	push	r28
    5208:	df 93       	push	r29
    520a:	ec 01       	movw	r28, r24
    //Check number of collections
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    520c:	86 2f       	mov	r24, r22
    520e:	88 0f       	add	r24, r24
    5210:	88 0f       	add	r24, r24
    5212:	85 5f       	subi	r24, 0xF5	; 245
    if(headerSize>MAX_PAYLOAD_SIZE) return false;
    5214:	85 36       	cpi	r24, 0x65	; 101
    5216:	18 f5       	brcc	.+70     	; 0x525e <MRPP_validate_collections_space+0x58>
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	20 e0       	ldi	r18, 0x00	; 0
    521c:	30 e0       	ldi	r19, 0x00	; 0
    521e:	18 c0       	rjmp	.+48     	; 0x5250 <MRPP_validate_collections_space+0x4a>

    //Check buffer size
    uint16_t size=0;
    for (uint8_t i = 0; i < nCollections; i++)
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    5220:	e9 2f       	mov	r30, r25
    5222:	f0 e0       	ldi	r31, 0x00	; 0
    5224:	af 01       	movw	r20, r30
    5226:	44 0f       	add	r20, r20
    5228:	55 1f       	adc	r21, r21
    522a:	44 0f       	add	r20, r20
    522c:	55 1f       	adc	r21, r21
    522e:	e4 0f       	add	r30, r20
    5230:	f5 1f       	adc	r31, r21
    5232:	ec 0f       	add	r30, r28
    5234:	fd 1f       	adc	r31, r29
    5236:	a0 81       	ld	r26, Z
    5238:	b1 81       	ldd	r27, Z+1	; 0x01
    523a:	74 81       	ldd	r23, Z+4	; 0x04
    523c:	7a 9f       	mul	r23, r26
    523e:	a0 01       	movw	r20, r0
    5240:	7b 9f       	mul	r23, r27
    5242:	50 0d       	add	r21, r0
    5244:	11 24       	eor	r1, r1
    5246:	24 0f       	add	r18, r20
    5248:	35 1f       	adc	r19, r21
    524a:	2a 5f       	subi	r18, 0xFA	; 250
    524c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    if(headerSize>MAX_PAYLOAD_SIZE) return false;

    //Check buffer size
    uint16_t size=0;
    for (uint8_t i = 0; i < nCollections; i++)
    524e:	9f 5f       	subi	r25, 0xFF	; 255
    5250:	96 17       	cp	r25, r22
    5252:	30 f3       	brcs	.-52     	; 0x5220 <MRPP_validate_collections_space+0x1a>
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    }
    
    if(size<=BODY_BUFFER_DATA_SIZE) return true;
    5254:	21 32       	cpi	r18, 0x21	; 33
    5256:	33 40       	sbci	r19, 0x03	; 3
    5258:	20 f4       	brcc	.+8      	; 0x5262 <MRPP_validate_collections_space+0x5c>
    525a:	81 e0       	ldi	r24, 0x01	; 1
    525c:	03 c0       	rjmp	.+6      	; 0x5264 <MRPP_validate_collections_space+0x5e>
}

bool MRPP_validate_collections_space(COLLECTION collections[], uint8_t nCollections){
    //Check number of collections
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    if(headerSize>MAX_PAYLOAD_SIZE) return false;
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	01 c0       	rjmp	.+2      	; 0x5264 <MRPP_validate_collections_space+0x5e>
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    }
    
    if(size<=BODY_BUFFER_DATA_SIZE) return true;
    return false;
    5262:	80 e0       	ldi	r24, 0x00	; 0
}
    5264:	df 91       	pop	r29
    5266:	cf 91       	pop	r28
    5268:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00004726 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    4726:	cf 92       	push	r12
    4728:	df 92       	push	r13
    472a:	ff 92       	push	r15
    472c:	0f 93       	push	r16
    472e:	1f 93       	push	r17
    4730:	cf 93       	push	r28
    4732:	df 93       	push	r29
    4734:	89 01       	movw	r16, r18
    
    //add meta
    for (uint16_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    4736:	fa 01       	movw	r30, r20
    4738:	0b c0       	rjmp	.+22     	; 0x4750 <mrpp_data_add_int16+0x2a>
    {
        storage[i]=metadata[i-begin];
    473a:	df 01       	movw	r26, r30
    473c:	a4 1b       	sub	r26, r20
    473e:	b5 0b       	sbc	r27, r21
    4740:	a8 0f       	add	r26, r24
    4742:	b9 1f       	adc	r27, r25
    4744:	3c 91       	ld	r19, X
    4746:	df 01       	movw	r26, r30
    4748:	a6 57       	subi	r26, 0x76	; 118
    474a:	bc 4f       	sbci	r27, 0xFC	; 252
    474c:	3c 93       	st	X, r19
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint16_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    474e:	31 96       	adiw	r30, 0x01	; 1
    4750:	6a 01       	movw	r12, r20
    4752:	26 e0       	ldi	r18, 0x06	; 6
    4754:	c2 0e       	add	r12, r18
    4756:	d1 1c       	adc	r13, r1
    4758:	ec 15       	cp	r30, r12
    475a:	fd 05       	cpc	r31, r13
    475c:	70 f3       	brcs	.-36     	; 0x473a <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    475e:	98 01       	movw	r18, r16
    4760:	26 50       	subi	r18, 0x06	; 6
    4762:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    4764:	36 95       	lsr	r19
    4766:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    4768:	49 5f       	subi	r20, 0xF9	; 249
    476a:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    476c:	a0 e0       	ldi	r26, 0x00	; 0
    476e:	b0 e0       	ldi	r27, 0x00	; 0
    4770:	16 c0       	rjmp	.+44     	; 0x479e <mrpp_data_add_int16+0x78>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    4772:	cd 01       	movw	r24, r26
    4774:	88 0f       	add	r24, r24
    4776:	99 1f       	adc	r25, r25
    4778:	f6 01       	movw	r30, r12
    477a:	e8 0f       	add	r30, r24
    477c:	f9 1f       	adc	r31, r25
    477e:	8b 01       	movw	r16, r22
    4780:	08 0f       	add	r16, r24
    4782:	19 1f       	adc	r17, r25
    4784:	e8 01       	movw	r28, r16
    4786:	f9 80       	ldd	r15, Y+1	; 0x01
    4788:	e6 57       	subi	r30, 0x76	; 118
    478a:	fc 4f       	sbci	r31, 0xFC	; 252
    478c:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    478e:	84 0f       	add	r24, r20
    4790:	95 1f       	adc	r25, r21
    4792:	18 81       	ld	r17, Y
    4794:	fc 01       	movw	r30, r24
    4796:	e6 57       	subi	r30, 0x76	; 118
    4798:	fc 4f       	sbci	r31, 0xFC	; 252
    479a:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    479c:	11 96       	adiw	r26, 0x01	; 1
    479e:	a2 17       	cp	r26, r18
    47a0:	b3 07       	cpc	r27, r19
    47a2:	38 f3       	brcs	.-50     	; 0x4772 <mrpp_data_add_int16+0x4c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    47a4:	df 91       	pop	r29
    47a6:	cf 91       	pop	r28
    47a8:	1f 91       	pop	r17
    47aa:	0f 91       	pop	r16
    47ac:	ff 90       	pop	r15
    47ae:	df 90       	pop	r13
    47b0:	cf 90       	pop	r12
    47b2:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

000066b0 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    66b0:	cf 93       	push	r28
    66b2:	df 93       	push	r29
    66b4:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    66b6:	20 e0       	ldi	r18, 0x00	; 0
    66b8:	30 e0       	ldi	r19, 0x00	; 0
    66ba:	0c c0       	rjmp	.+24     	; 0x66d4 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    66bc:	de 01       	movw	r26, r28
    66be:	a2 0f       	add	r26, r18
    66c0:	b3 1f       	adc	r27, r19
    66c2:	f9 01       	movw	r30, r18
    66c4:	e6 0f       	add	r30, r22
    66c6:	f7 1f       	adc	r31, r23
    66c8:	e6 57       	subi	r30, 0x76	; 118
    66ca:	fc 4f       	sbci	r31, 0xFC	; 252
    66cc:	90 81       	ld	r25, Z
    66ce:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    66d0:	2f 5f       	subi	r18, 0xFF	; 255
    66d2:	3f 4f       	sbci	r19, 0xFF	; 255
    66d4:	24 17       	cp	r18, r20
    66d6:	35 07       	cpc	r19, r21
    66d8:	88 f3       	brcs	.-30     	; 0x66bc <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    66da:	df 91       	pop	r29
    66dc:	cf 91       	pop	r28
    66de:	08 95       	ret

Disassembly of section .text.add_data_types:

00004244 <add_data_types>:
        package[i*4+13]=state->collections[i].length;
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    4244:	cf 93       	push	r28
    4246:	dc 01       	movw	r26, r24
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    4248:	80 e0       	ldi	r24, 0x00	; 0
    424a:	4d c0       	rjmp	.+154    	; 0x42e6 <add_data_types+0xa2>
    {
        uint8_t bitArray=0x00;
        for (uint8_t index = 0; index < 4; index++)
        {
            //If there is no more collection just skip and use default 0x00
            uint8_t nCol=bIndex*4+index;
    424c:	28 2f       	mov	r18, r24
    424e:	22 0f       	add	r18, r18
    4250:	22 0f       	add	r18, r18
    4252:	29 0f       	add	r18, r25
            if(nCol+1>state->nCollections) break;
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	f9 01       	movw	r30, r18
    4258:	31 96       	adiw	r30, 0x01	; 1
    425a:	12 96       	adiw	r26, 0x02	; 2
    425c:	4c 91       	ld	r20, X
    425e:	12 97       	sbiw	r26, 0x02	; 2
    4260:	50 e0       	ldi	r21, 0x00	; 0
    4262:	4e 17       	cp	r20, r30
    4264:	5f 07       	cpc	r21, r31
    4266:	bc f1       	brlt	.+110    	; 0x42d6 <add_data_types+0x92>

            uint8_t shifts=index*2;
    4268:	49 2f       	mov	r20, r25
    426a:	44 0f       	add	r20, r20
            switch (state->collections[nCol].type)
    426c:	f9 01       	movw	r30, r18
    426e:	ee 0f       	add	r30, r30
    4270:	ff 1f       	adc	r31, r31
    4272:	22 0f       	add	r18, r18
    4274:	33 1f       	adc	r19, r19
    4276:	22 0f       	add	r18, r18
    4278:	33 1f       	adc	r19, r19
    427a:	22 0f       	add	r18, r18
    427c:	33 1f       	adc	r19, r19
    427e:	e2 0f       	add	r30, r18
    4280:	f3 1f       	adc	r31, r19
    4282:	ea 0f       	add	r30, r26
    4284:	fb 1f       	adc	r31, r27
    4286:	27 81       	ldd	r18, Z+7	; 0x07
    4288:	22 30       	cpi	r18, 0x02	; 2
    428a:	69 f0       	breq	.+26     	; 0x42a6 <add_data_types+0x62>
    428c:	24 30       	cpi	r18, 0x04	; 4
    428e:	a1 f0       	breq	.+40     	; 0x42b8 <add_data_types+0x74>
    4290:	21 30       	cpi	r18, 0x01	; 1
    4292:	d1 f4       	brne	.+52     	; 0x42c8 <add_data_types+0x84>
            {
                case T_INT8:
                    bitArray |=1 << shifts;
    4294:	21 e0       	ldi	r18, 0x01	; 1
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	02 c0       	rjmp	.+4      	; 0x429e <add_data_types+0x5a>
    429a:	22 0f       	add	r18, r18
    429c:	33 1f       	adc	r19, r19
    429e:	4a 95       	dec	r20
    42a0:	e2 f7       	brpl	.-8      	; 0x429a <add_data_types+0x56>
    42a2:	c2 2b       	or	r28, r18
                    break;
    42a4:	11 c0       	rjmp	.+34     	; 0x42c8 <add_data_types+0x84>
                
                case T_INT16:
                    bitArray |= 2 << shifts;
    42a6:	22 e0       	ldi	r18, 0x02	; 2
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	02 c0       	rjmp	.+4      	; 0x42b0 <add_data_types+0x6c>
    42ac:	22 0f       	add	r18, r18
    42ae:	33 1f       	adc	r19, r19
    42b0:	4a 95       	dec	r20
    42b2:	e2 f7       	brpl	.-8      	; 0x42ac <add_data_types+0x68>
    42b4:	c2 2b       	or	r28, r18
                    break;
    42b6:	08 c0       	rjmp	.+16     	; 0x42c8 <add_data_types+0x84>

                case T_FLOAT:
                    bitArray |= 3 << shifts;
    42b8:	23 e0       	ldi	r18, 0x03	; 3
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	02 c0       	rjmp	.+4      	; 0x42c2 <add_data_types+0x7e>
    42be:	22 0f       	add	r18, r18
    42c0:	33 1f       	adc	r19, r19
    42c2:	4a 95       	dec	r20
    42c4:	e2 f7       	brpl	.-8      	; 0x42be <add_data_types+0x7a>
    42c6:	c2 2b       	or	r28, r18

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    {
        uint8_t bitArray=0x00;
        for (uint8_t index = 0; index < 4; index++)
    42c8:	9f 5f       	subi	r25, 0xFF	; 255
    42ca:	02 c0       	rjmp	.+4      	; 0x42d0 <add_data_types+0x8c>
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	c0 e0       	ldi	r28, 0x00	; 0
    42d0:	94 30       	cpi	r25, 0x04	; 4
    42d2:	08 f4       	brcc	.+2      	; 0x42d6 <add_data_types+0x92>
    42d4:	bb cf       	rjmp	.-138    	; 0x424c <add_data_types+0x8>
                    break;
            }

        }
        //set from the end
        dt[5-bIndex]=bitArray;
    42d6:	e5 e0       	ldi	r30, 0x05	; 5
    42d8:	f0 e0       	ldi	r31, 0x00	; 0
    42da:	e8 1b       	sub	r30, r24
    42dc:	f1 09       	sbc	r31, r1
    42de:	e6 0f       	add	r30, r22
    42e0:	f7 1f       	adc	r31, r23
    42e2:	c0 83       	st	Z, r28
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    42e4:	8f 5f       	subi	r24, 0xFF	; 255
    42e6:	86 30       	cpi	r24, 0x06	; 6
    42e8:	88 f3       	brcs	.-30     	; 0x42cc <add_data_types+0x88>
        //set from the end
        dt[5-bIndex]=bitArray;
        
    }
    
} 
    42ea:	cf 91       	pop	r28
    42ec:	08 95       	ret

Disassembly of section .text.update_bodies:

000027c2 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    27c2:	cf 93       	push	r28
    27c4:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    27c6:	26 2f       	mov	r18, r22
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	c9 01       	movw	r24, r18
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f9 01       	movw	r30, r18
    27d0:	ee 0f       	add	r30, r30
    27d2:	ff 1f       	adc	r31, r31
    27d4:	22 0f       	add	r18, r18
    27d6:	33 1f       	adc	r19, r19
    27d8:	22 0f       	add	r18, r18
    27da:	33 1f       	adc	r19, r19
    27dc:	22 0f       	add	r18, r18
    27de:	33 1f       	adc	r19, r19
    27e0:	e2 0f       	add	r30, r18
    27e2:	f3 1f       	adc	r31, r19
    27e4:	ea 0f       	add	r30, r26
    27e6:	fb 1f       	adc	r31, r27
    27e8:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    27ea:	c0 e0       	ldi	r28, 0x00	; 0
    27ec:	25 c0       	rjmp	.+74     	; 0x2838 <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    27ee:	82 17       	cp	r24, r18
    27f0:	93 07       	cpc	r25, r19
    27f2:	09 f1       	breq	.+66     	; 0x2836 <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    27f4:	a9 01       	movw	r20, r18
    27f6:	44 0f       	add	r20, r20
    27f8:	55 1f       	adc	r21, r21
    27fa:	44 0f       	add	r20, r20
    27fc:	55 1f       	adc	r21, r21
    27fe:	44 0f       	add	r20, r20
    2800:	55 1f       	adc	r21, r21
    2802:	f9 01       	movw	r30, r18
    2804:	ee 0f       	add	r30, r30
    2806:	ff 1f       	adc	r31, r31
    2808:	e4 0f       	add	r30, r20
    280a:	f5 1f       	adc	r31, r21
    280c:	ea 0f       	add	r30, r26
    280e:	fb 1f       	adc	r31, r27
    2810:	43 85       	ldd	r20, Z+11	; 0x0b
    2812:	74 13       	cpse	r23, r20
    2814:	10 c0       	rjmp	.+32     	; 0x2836 <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    2816:	f9 01       	movw	r30, r18
    2818:	ee 0f       	add	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	22 0f       	add	r18, r18
    281e:	33 1f       	adc	r19, r19
    2820:	22 0f       	add	r18, r18
    2822:	33 1f       	adc	r19, r19
    2824:	22 0f       	add	r18, r18
    2826:	33 1f       	adc	r19, r19
    2828:	e2 0f       	add	r30, r18
    282a:	f3 1f       	adc	r31, r19
    282c:	ea 0f       	add	r30, r26
    282e:	fb 1f       	adc	r31, r27
    2830:	24 85       	ldd	r18, Z+12	; 0x0c
    2832:	23 30       	cpi	r18, 0x03	; 3
    2834:	41 f4       	brne	.+16     	; 0x2846 <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    2836:	cf 5f       	subi	r28, 0xFF	; 255
    2838:	2c 2f       	mov	r18, r28
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	28 17       	cp	r18, r24
    283e:	39 07       	cpc	r19, r25
    2840:	b4 f2       	brlt	.-84     	; 0x27ee <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    2842:	21 e0       	ldi	r18, 0x01	; 1
    2844:	01 c0       	rjmp	.+2      	; 0x2848 <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    2846:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    2848:	22 23       	and	r18, r18
    284a:	39 f0       	breq	.+14     	; 0x285a <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    284c:	fd 01       	movw	r30, r26
    284e:	e7 0f       	add	r30, r23
    2850:	f1 1d       	adc	r31, r1
    2852:	ec 55       	subi	r30, 0x5C	; 92
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	21 e0       	ldi	r18, 0x01	; 1
    2858:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    285a:	9c 01       	movw	r18, r24
    285c:	22 0f       	add	r18, r18
    285e:	33 1f       	adc	r19, r19
    2860:	22 0f       	add	r18, r18
    2862:	33 1f       	adc	r19, r19
    2864:	22 0f       	add	r18, r18
    2866:	33 1f       	adc	r19, r19
    2868:	fc 01       	movw	r30, r24
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	e2 0f       	add	r30, r18
    2870:	f3 1f       	adc	r31, r19
    2872:	ea 0f       	add	r30, r26
    2874:	fb 1f       	adc	r31, r27
    2876:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    2878:	29 c0       	rjmp	.+82     	; 0x28cc <update_bodies+0x10a>
    {
        if(i==collectionId-1) continue;
    287a:	46 2f       	mov	r20, r22
    287c:	50 e0       	ldi	r21, 0x00	; 0
    287e:	84 17       	cp	r24, r20
    2880:	95 07       	cpc	r25, r21
    2882:	19 f1       	breq	.+70     	; 0x28ca <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    2884:	9a 01       	movw	r18, r20
    2886:	2f 5f       	subi	r18, 0xFF	; 255
    2888:	3f 4f       	sbci	r19, 0xFF	; 255
    288a:	f9 01       	movw	r30, r18
    288c:	ee 0f       	add	r30, r30
    288e:	ff 1f       	adc	r31, r31
    2890:	22 0f       	add	r18, r18
    2892:	33 1f       	adc	r19, r19
    2894:	22 0f       	add	r18, r18
    2896:	33 1f       	adc	r19, r19
    2898:	22 0f       	add	r18, r18
    289a:	33 1f       	adc	r19, r19
    289c:	e2 0f       	add	r30, r18
    289e:	f3 1f       	adc	r31, r19
    28a0:	ea 0f       	add	r30, r26
    28a2:	fb 1f       	adc	r31, r27
    28a4:	20 81       	ld	r18, Z
    28a6:	c2 13       	cpse	r28, r18
    28a8:	10 c0       	rjmp	.+32     	; 0x28ca <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    28aa:	fa 01       	movw	r30, r20
    28ac:	ee 0f       	add	r30, r30
    28ae:	ff 1f       	adc	r31, r31
    28b0:	44 0f       	add	r20, r20
    28b2:	55 1f       	adc	r21, r21
    28b4:	44 0f       	add	r20, r20
    28b6:	55 1f       	adc	r21, r21
    28b8:	44 0f       	add	r20, r20
    28ba:	55 1f       	adc	r21, r21
    28bc:	e4 0f       	add	r30, r20
    28be:	f5 1f       	adc	r31, r21
    28c0:	ea 0f       	add	r30, r26
    28c2:	fb 1f       	adc	r31, r27
    28c4:	24 85       	ldd	r18, Z+12	; 0x0c
    28c6:	23 30       	cpi	r18, 0x03	; 3
    28c8:	41 f4       	brne	.+16     	; 0x28da <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    28ca:	6f 5f       	subi	r22, 0xFF	; 255
    28cc:	12 96       	adiw	r26, 0x02	; 2
    28ce:	2c 91       	ld	r18, X
    28d0:	12 97       	sbiw	r26, 0x02	; 2
    28d2:	62 17       	cp	r22, r18
    28d4:	90 f2       	brcs	.-92     	; 0x287a <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <update_bodies+0x11a>
    {
        if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    28da:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    28dc:	88 23       	and	r24, r24
    28de:	41 f0       	breq	.+16     	; 0x28f0 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    28e0:	fd 01       	movw	r30, r26
    28e2:	ec 0f       	add	r30, r28
    28e4:	f1 1d       	adc	r31, r1
    28e6:	ec 55       	subi	r30, 0x5C	; 92
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	80 83       	st	Z, r24
    28ee:	06 c0       	rjmp	.+12     	; 0x28fc <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    28f0:	fd 01       	movw	r30, r26
    28f2:	ec 0f       	add	r30, r28
    28f4:	f1 1d       	adc	r31, r1
    28f6:	ec 55       	subi	r30, 0x5C	; 92
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    28fc:	8c 2f       	mov	r24, r28
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	87 1b       	sub	r24, r23
    2902:	91 09       	sbc	r25, r1
    2904:	02 97       	sbiw	r24, 0x02	; 2
    2906:	64 f0       	brlt	.+24     	; 0x2920 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    2908:	7f 5f       	subi	r23, 0xFF	; 255
    290a:	08 c0       	rjmp	.+16     	; 0x291c <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    290c:	fd 01       	movw	r30, r26
    290e:	e7 0f       	add	r30, r23
    2910:	f1 1d       	adc	r31, r1
    2912:	ec 55       	subi	r30, 0x5C	; 92
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    291a:	7f 5f       	subi	r23, 0xFF	; 255
    291c:	7c 17       	cp	r23, r28
    291e:	b0 f3       	brcs	.-20     	; 0x290c <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    2920:	cf 91       	pop	r28
    2922:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00002214 <mrpp_state_init>:


static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    2214:	af 92       	push	r10
    2216:	bf 92       	push	r11
    2218:	cf 92       	push	r12
    221a:	df 92       	push	r13
    221c:	ef 92       	push	r14
    221e:	ff 92       	push	r15
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	6c 01       	movw	r12, r24
    222a:	a2 2e       	mov	r10, r18
    state->groupId=groupId;
    222c:	fc 01       	movw	r30, r24
    222e:	60 83       	st	Z, r22
    state->nCollections=nCollections;
    2230:	22 83       	std	Z+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    2232:	b1 2c       	mov	r11, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    2234:	00 e0       	ldi	r16, 0x00	; 0
    2236:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    2238:	70 c0       	rjmp	.+224    	; 0x231a <mrpp_state_init+0x106>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    223a:	eb 2d       	mov	r30, r11
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	df 01       	movw	r26, r30
    2240:	aa 0f       	add	r26, r26
    2242:	bb 1f       	adc	r27, r27
    2244:	aa 0f       	add	r26, r26
    2246:	bb 1f       	adc	r27, r27
    2248:	ae 0f       	add	r26, r30
    224a:	bf 1f       	adc	r27, r31
    224c:	a4 0f       	add	r26, r20
    224e:	b5 1f       	adc	r27, r21
    2250:	12 96       	adiw	r26, 0x02	; 2
    2252:	2d 91       	ld	r18, X+
    2254:	3c 91       	ld	r19, X
    2256:	13 97       	sbiw	r26, 0x03	; 3
    2258:	ef 01       	movw	r28, r30
    225a:	cc 0f       	add	r28, r28
    225c:	dd 1f       	adc	r29, r29
    225e:	cf 01       	movw	r24, r30
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	c8 0f       	add	r28, r24
    226e:	d9 1f       	adc	r29, r25
    2270:	cc 0d       	add	r28, r12
    2272:	dd 1d       	adc	r29, r13
    2274:	39 87       	std	Y+9, r19	; 0x09
    2276:	28 87       	std	Y+8, r18	; 0x08

        //type
        state->collections[i].type=collections[i].type;
    2278:	14 96       	adiw	r26, 0x04	; 4
    227a:	8c 91       	ld	r24, X
    227c:	14 97       	sbiw	r26, 0x04	; 4
    227e:	8f 83       	std	Y+7, r24	; 0x07

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    2280:	1c 83       	std	Y+4, r17	; 0x04
    2282:	0b 83       	std	Y+3, r16	; 0x03
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    2284:	8d 91       	ld	r24, X+
    2286:	9c 91       	ld	r25, X
    2288:	11 97       	sbiw	r26, 0x01	; 1
    228a:	14 96       	adiw	r26, 0x04	; 4
    228c:	2c 91       	ld	r18, X
    228e:	28 9f       	mul	r18, r24
    2290:	70 01       	movw	r14, r0
    2292:	29 9f       	mul	r18, r25
    2294:	f0 0c       	add	r15, r0
    2296:	11 24       	eor	r1, r1
    2298:	86 e0       	ldi	r24, 0x06	; 6
    229a:	e8 0e       	add	r14, r24
    229c:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    229e:	fe 82       	std	Y+6, r15	; 0x06
    22a0:	ed 82       	std	Y+5, r14	; 0x05
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    22a2:	98 01       	movw	r18, r16
    22a4:	a1 ed       	ldi	r26, 0xD1	; 209
    22a6:	b1 e5       	ldi	r27, 0x51	; 81
    22a8:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__umulhisi3>
    22ac:	28 1b       	sub	r18, r24
    22ae:	39 0b       	sbc	r19, r25
    22b0:	36 95       	lsr	r19
    22b2:	27 95       	ror	r18
    22b4:	82 0f       	add	r24, r18
    22b6:	93 1f       	adc	r25, r19
    22b8:	00 24       	eor	r0, r0
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	00 1c       	adc	r0, r0
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	00 1c       	adc	r0, r0
    22c6:	89 2f       	mov	r24, r25
    22c8:	90 2d       	mov	r25, r0
    22ca:	31 96       	adiw	r30, 0x01	; 1
    22cc:	9f 01       	movw	r18, r30
    22ce:	22 0f       	add	r18, r18
    22d0:	33 1f       	adc	r19, r19
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	ee 0f       	add	r30, r30
    22d8:	ff 1f       	adc	r31, r31
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	e2 0f       	add	r30, r18
    22e0:	f3 1f       	adc	r31, r19
    22e2:	ec 0d       	add	r30, r12
    22e4:	fd 1d       	adc	r31, r13
    22e6:	80 83       	st	Z, r24
        uint8_t endsInBody=(startingIndex+len-1)/DR_BODY_PAYLOAD_SIZE;
    22e8:	0e 0d       	add	r16, r14
    22ea:	1f 1d       	adc	r17, r15
    22ec:	f8 01       	movw	r30, r16
    22ee:	31 97       	sbiw	r30, 0x01	; 1
    22f0:	9f 01       	movw	r18, r30
    22f2:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__umulhisi3>
    22f6:	e8 1b       	sub	r30, r24
    22f8:	f9 0b       	sbc	r31, r25
    22fa:	f6 95       	lsr	r31
    22fc:	e7 95       	ror	r30
    22fe:	8e 0f       	add	r24, r30
    2300:	9f 1f       	adc	r25, r31
    2302:	00 24       	eor	r0, r0
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	00 1c       	adc	r0, r0
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	00 1c       	adc	r0, r0
    2310:	89 2f       	mov	r24, r25
    2312:	90 2d       	mov	r25, r0

        //Simpler solution above
        state->collections[i].endsInBody=endsInBody;
    2314:	8b 87       	std	Y+11, r24	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    2316:	1c 86       	std	Y+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    2318:	b3 94       	inc	r11
    231a:	ba 14       	cp	r11, r10
    231c:	08 f4       	brcc	.+2      	; 0x2320 <mrpp_state_init+0x10c>
    231e:	8d cf       	rjmp	.-230    	; 0x223a <mrpp_state_init+0x26>
        startingIndex+=len;      
    }

    //Calculate lastSubId
    
    uint8_t lastSubId=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    2320:	01 50       	subi	r16, 0x01	; 1
    2322:	11 09       	sbc	r17, r1
    2324:	98 01       	movw	r18, r16
    2326:	a1 ed       	ldi	r26, 0xD1	; 209
    2328:	b1 e5       	ldi	r27, 0x51	; 81
    232a:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__umulhisi3>
    232e:	08 1b       	sub	r16, r24
    2330:	19 0b       	sbc	r17, r25
    2332:	16 95       	lsr	r17
    2334:	07 95       	ror	r16
    2336:	80 0f       	add	r24, r16
    2338:	91 1f       	adc	r25, r17
    233a:	00 24       	eor	r0, r0
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	00 1c       	adc	r0, r0
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	00 1c       	adc	r0, r0
    2348:	89 2f       	mov	r24, r25
    234a:	90 2d       	mov	r25, r0
    234c:	92 e0       	ldi	r25, 0x02	; 2
    234e:	98 0f       	add	r25, r24
    state->lastSubId=lastSubId;
    2350:	f6 01       	movw	r30, r12
    2352:	91 83       	std	Z+1, r25	; 0x01
    
    //calculate bodies
    uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    state->nBodies=nBodies;
    2356:	ed 55       	subi	r30, 0x5D	; 93
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 83       	st	Z, r24

    for (uint8_t i = 0; i < nBodies; i++)
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	07 c0       	rjmp	.+14     	; 0x236e <mrpp_state_init+0x15a>
    {
        state->bodies[i]=WAITING;
    2360:	f6 01       	movw	r30, r12
    2362:	e9 0f       	add	r30, r25
    2364:	f1 1d       	adc	r31, r1
    2366:	ec 55       	subi	r30, 0x5C	; 92
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	10 82       	st	Z, r1
    
    //calculate bodies
    uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    236c:	9f 5f       	subi	r25, 0xFF	; 255
    236e:	98 17       	cp	r25, r24
    2370:	b8 f3       	brcs	.-18     	; 0x2360 <mrpp_state_init+0x14c>
    {
        state->bodies[i]=WAITING;
    }
}
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	ff 90       	pop	r15
    237c:	ef 90       	pop	r14
    237e:	df 90       	pop	r13
    2380:	cf 90       	pop	r12
    2382:	bf 90       	pop	r11
    2384:	af 90       	pop	r10
    2386:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

000042ee <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    42ee:	0f 93       	push	r16
    42f0:	1f 93       	push	r17
    42f2:	cf 93       	push	r28
    42f4:	df 93       	push	r29
    42f6:	8c 01       	movw	r16, r24
    42f8:	eb 01       	movw	r28, r22
    package[0]=0;
    42fa:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    42fc:	fc 01       	movw	r30, r24
    42fe:	81 81       	ldd	r24, Z+1	; 0x01
    4300:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    4302:	1a 82       	std	Y+2, r1	; 0x02

    //N collections
    package[3]=state->nCollections;
    4304:	82 81       	ldd	r24, Z+2	; 0x02
    4306:	8b 83       	std	Y+3, r24	; 0x03

    //add data type
    add_data_types(state, &package[4]);
    4308:	6c 5f       	subi	r22, 0xFC	; 252
    430a:	7f 4f       	sbci	r23, 0xFF	; 255
    430c:	c8 01       	movw	r24, r16
    430e:	0e 94 22 21 	call	0x4244	; 0x4244 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    4312:	20 e0       	ldi	r18, 0x00	; 0
    4314:	35 c0       	rjmp	.+106    	; 0x4380 <mrpp_state_get_header+0x92>
    {
        package[i*4+10]=state->collections[i].startIndex >> 8;
    4316:	82 2f       	mov	r24, r18
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	dc 01       	movw	r26, r24
    431c:	aa 0f       	add	r26, r26
    431e:	bb 1f       	adc	r27, r27
    4320:	aa 0f       	add	r26, r26
    4322:	bb 1f       	adc	r27, r27
    4324:	ad 01       	movw	r20, r26
    4326:	46 5f       	subi	r20, 0xF6	; 246
    4328:	5f 4f       	sbci	r21, 0xFF	; 255
    432a:	4c 0f       	add	r20, r28
    432c:	5d 1f       	adc	r21, r29
    432e:	fc 01       	movw	r30, r24
    4330:	ee 0f       	add	r30, r30
    4332:	ff 1f       	adc	r31, r31
    4334:	88 0f       	add	r24, r24
    4336:	99 1f       	adc	r25, r25
    4338:	88 0f       	add	r24, r24
    433a:	99 1f       	adc	r25, r25
    433c:	88 0f       	add	r24, r24
    433e:	99 1f       	adc	r25, r25
    4340:	e8 0f       	add	r30, r24
    4342:	f9 1f       	adc	r31, r25
    4344:	bf 01       	movw	r22, r30
    4346:	60 0f       	add	r22, r16
    4348:	71 1f       	adc	r23, r17
    434a:	fb 01       	movw	r30, r22
    434c:	84 81       	ldd	r24, Z+4	; 0x04
    434e:	fa 01       	movw	r30, r20
    4350:	80 83       	st	Z, r24
        package[i*4+11]=state->collections[i].startIndex;
    4352:	cd 01       	movw	r24, r26
    4354:	0b 96       	adiw	r24, 0x0b	; 11
    4356:	8c 0f       	add	r24, r28
    4358:	9d 1f       	adc	r25, r29
    435a:	fb 01       	movw	r30, r22
    435c:	33 81       	ldd	r19, Z+3	; 0x03
    435e:	fc 01       	movw	r30, r24
    4360:	30 83       	st	Z, r19
        package[i*4+12]=state->collections[i].length>>8;
    4362:	cd 01       	movw	r24, r26
    4364:	0c 96       	adiw	r24, 0x0c	; 12
    4366:	8c 0f       	add	r24, r28
    4368:	9d 1f       	adc	r25, r29
    436a:	fb 01       	movw	r30, r22
    436c:	36 81       	ldd	r19, Z+6	; 0x06
    436e:	fc 01       	movw	r30, r24
    4370:	30 83       	st	Z, r19
        package[i*4+13]=state->collections[i].length;
    4372:	1d 96       	adiw	r26, 0x0d	; 13
    4374:	ac 0f       	add	r26, r28
    4376:	bd 1f       	adc	r27, r29
    4378:	fb 01       	movw	r30, r22
    437a:	85 81       	ldd	r24, Z+5	; 0x05
    437c:	8c 93       	st	X, r24
    package[3]=state->nCollections;

    //add data type
    add_data_types(state, &package[4]);

    for (uint8_t i = 0; i < state->nCollections; i++)
    437e:	2f 5f       	subi	r18, 0xFF	; 255
    4380:	f8 01       	movw	r30, r16
    4382:	82 81       	ldd	r24, Z+2	; 0x02
    4384:	28 17       	cp	r18, r24
    4386:	38 f2       	brcs	.-114    	; 0x4316 <mrpp_state_get_header+0x28>
        package[i*4+11]=state->collections[i].startIndex;
        package[i*4+12]=state->collections[i].length>>8;
        package[i*4+13]=state->collections[i].length;
    }
    
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    4388:	88 0f       	add	r24, r24
    438a:	88 0f       	add	r24, r24
}
    438c:	86 5f       	subi	r24, 0xF6	; 246
    438e:	df 91       	pop	r29
    4390:	cf 91       	pop	r28
    4392:	1f 91       	pop	r17
    4394:	0f 91       	pop	r16
    4396:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

000040ee <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    40ee:	0f 93       	push	r16
    40f0:	1f 93       	push	r17
    40f2:	cf 93       	push	r28
    40f4:	df 93       	push	r29
    40f6:	8c 01       	movw	r16, r24
    40f8:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    40fa:	fc 01       	movw	r30, r24
    40fc:	81 81       	ldd	r24, Z+1	; 0x01
    40fe:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    4100:	81 81       	ldd	r24, Z+1	; 0x01
    4102:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    4104:	1a 82       	std	Y+2, r1	; 0x02

    //N collections
    package[3]=state->nCollections;
    4106:	82 81       	ldd	r24, Z+2	; 0x02
    4108:	8b 83       	std	Y+3, r24	; 0x03

    //add data type
    add_data_types(state, &package[4]);
    410a:	6c 5f       	subi	r22, 0xFC	; 252
    410c:	7f 4f       	sbci	r23, 0xFF	; 255
    410e:	c8 01       	movw	r24, r16
    4110:	0e 94 22 21 	call	0x4244	; 0x4244 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	35 c0       	rjmp	.+106    	; 0x4182 <mrpp_state_get_tail+0x94>
    {
        package[i*4+10]=state->collections[i].startIndex >> 8;
    4118:	82 2f       	mov	r24, r18
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	dc 01       	movw	r26, r24
    411e:	aa 0f       	add	r26, r26
    4120:	bb 1f       	adc	r27, r27
    4122:	aa 0f       	add	r26, r26
    4124:	bb 1f       	adc	r27, r27
    4126:	ad 01       	movw	r20, r26
    4128:	46 5f       	subi	r20, 0xF6	; 246
    412a:	5f 4f       	sbci	r21, 0xFF	; 255
    412c:	4c 0f       	add	r20, r28
    412e:	5d 1f       	adc	r21, r29
    4130:	fc 01       	movw	r30, r24
    4132:	ee 0f       	add	r30, r30
    4134:	ff 1f       	adc	r31, r31
    4136:	88 0f       	add	r24, r24
    4138:	99 1f       	adc	r25, r25
    413a:	88 0f       	add	r24, r24
    413c:	99 1f       	adc	r25, r25
    413e:	88 0f       	add	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	e8 0f       	add	r30, r24
    4144:	f9 1f       	adc	r31, r25
    4146:	bf 01       	movw	r22, r30
    4148:	60 0f       	add	r22, r16
    414a:	71 1f       	adc	r23, r17
    414c:	fb 01       	movw	r30, r22
    414e:	84 81       	ldd	r24, Z+4	; 0x04
    4150:	fa 01       	movw	r30, r20
    4152:	80 83       	st	Z, r24
        package[i*4+11]=state->collections[i].startIndex;
    4154:	cd 01       	movw	r24, r26
    4156:	0b 96       	adiw	r24, 0x0b	; 11
    4158:	8c 0f       	add	r24, r28
    415a:	9d 1f       	adc	r25, r29
    415c:	fb 01       	movw	r30, r22
    415e:	33 81       	ldd	r19, Z+3	; 0x03
    4160:	fc 01       	movw	r30, r24
    4162:	30 83       	st	Z, r19
        package[i*4+12]=state->collections[i].length>>8;
    4164:	cd 01       	movw	r24, r26
    4166:	0c 96       	adiw	r24, 0x0c	; 12
    4168:	8c 0f       	add	r24, r28
    416a:	9d 1f       	adc	r25, r29
    416c:	fb 01       	movw	r30, r22
    416e:	36 81       	ldd	r19, Z+6	; 0x06
    4170:	fc 01       	movw	r30, r24
    4172:	30 83       	st	Z, r19
        package[i*4+13]=state->collections[i].length;
    4174:	1d 96       	adiw	r26, 0x0d	; 13
    4176:	ac 0f       	add	r26, r28
    4178:	bd 1f       	adc	r27, r29
    417a:	fb 01       	movw	r30, r22
    417c:	85 81       	ldd	r24, Z+5	; 0x05
    417e:	8c 93       	st	X, r24
    package[3]=state->nCollections;

    //add data type
    add_data_types(state, &package[4]);

    for (uint8_t i = 0; i < state->nCollections; i++)
    4180:	2f 5f       	subi	r18, 0xFF	; 255
    4182:	f8 01       	movw	r30, r16
    4184:	82 81       	ldd	r24, Z+2	; 0x02
    4186:	28 17       	cp	r18, r24
    4188:	38 f2       	brcs	.-114    	; 0x4118 <mrpp_state_get_tail+0x2a>
        package[i*4+10]=state->collections[i].startIndex >> 8;
        package[i*4+11]=state->collections[i].startIndex;
        package[i*4+12]=state->collections[i].length>>8;
        package[i*4+13]=state->collections[i].length;
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    418a:	88 0f       	add	r24, r24
    418c:	88 0f       	add	r24, r24
}
    418e:	86 5f       	subi	r24, 0xF6	; 246
    4190:	df 91       	pop	r29
    4192:	cf 91       	pop	r28
    4194:	1f 91       	pop	r17
    4196:	0f 91       	pop	r16
    4198:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

000047b4 <mrpp_state_set_collection>:
    }
    
} 


void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    47b4:	0f 93       	push	r16
    47b6:	1f 93       	push	r17
    47b8:	cf 93       	push	r28
    47ba:	df 93       	push	r29
    47bc:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    47be:	a6 2f       	mov	r26, r22
    47c0:	b0 e0       	ldi	r27, 0x00	; 0
    47c2:	11 97       	sbiw	r26, 0x01	; 1
    47c4:	fd 01       	movw	r30, r26
    47c6:	ee 0f       	add	r30, r30
    47c8:	ff 1f       	adc	r31, r31
    47ca:	cd 01       	movw	r24, r26
    47cc:	88 0f       	add	r24, r24
    47ce:	99 1f       	adc	r25, r25
    47d0:	88 0f       	add	r24, r24
    47d2:	99 1f       	adc	r25, r25
    47d4:	88 0f       	add	r24, r24
    47d6:	99 1f       	adc	r25, r25
    47d8:	e8 0f       	add	r30, r24
    47da:	f9 1f       	adc	r31, r25
    47dc:	e0 0f       	add	r30, r16
    47de:	f1 1f       	adc	r31, r17
    47e0:	83 e0       	ldi	r24, 0x03	; 3
    47e2:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	0a c0       	rjmp	.+20     	; 0x47fc <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    47e8:	e9 2f       	mov	r30, r25
    47ea:	f0 e0       	ldi	r31, 0x00	; 0
    47ec:	e9 01       	movw	r28, r18
    47ee:	ce 0f       	add	r28, r30
    47f0:	df 1f       	adc	r29, r31
    47f2:	e4 0f       	add	r30, r20
    47f4:	f5 1f       	adc	r31, r21
    47f6:	80 81       	ld	r24, Z
    47f8:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    47fa:	9f 5f       	subi	r25, 0xFF	; 255
    47fc:	94 30       	cpi	r25, 0x04	; 4
    47fe:	a0 f3       	brcs	.-24     	; 0x47e8 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    4800:	cd 01       	movw	r24, r26
    4802:	88 0f       	add	r24, r24
    4804:	99 1f       	adc	r25, r25
    4806:	aa 0f       	add	r26, r26
    4808:	bb 1f       	adc	r27, r27
    480a:	aa 0f       	add	r26, r26
    480c:	bb 1f       	adc	r27, r27
    480e:	aa 0f       	add	r26, r26
    4810:	bb 1f       	adc	r27, r27
    4812:	a8 0f       	add	r26, r24
    4814:	b9 1f       	adc	r27, r25
    4816:	a0 0f       	add	r26, r16
    4818:	b1 1f       	adc	r27, r17
    481a:	19 96       	adiw	r26, 0x09	; 9
    481c:	8c 91       	ld	r24, X
    481e:	19 97       	sbiw	r26, 0x09	; 9
    4820:	f9 01       	movw	r30, r18
    4822:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    4824:	18 96       	adiw	r26, 0x08	; 8
    4826:	8c 91       	ld	r24, X
    4828:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    482a:	c8 01       	movw	r24, r16
    482c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <update_bodies>
}
    4830:	df 91       	pop	r29
    4832:	cf 91       	pop	r28
    4834:	1f 91       	pop	r17
    4836:	0f 91       	pop	r16
    4838:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

000066e0 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    66e0:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    66e2:	90 e0       	ldi	r25, 0x00	; 0
    66e4:	0b c0       	rjmp	.+22     	; 0x66fc <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    66e6:	29 2f       	mov	r18, r25
    66e8:	30 e0       	ldi	r19, 0x00	; 0
    66ea:	fa 01       	movw	r30, r20
    66ec:	e2 0f       	add	r30, r18
    66ee:	f3 1f       	adc	r31, r19
    66f0:	ec 55       	subi	r30, 0x5C	; 92
    66f2:	ff 4f       	sbci	r31, 0xFF	; 255
    66f4:	80 81       	ld	r24, Z
    66f6:	81 30       	cpi	r24, 0x01	; 1
    66f8:	49 f0       	breq	.+18     	; 0x670c <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    66fa:	9f 5f       	subi	r25, 0xFF	; 255
    66fc:	fa 01       	movw	r30, r20
    66fe:	ed 55       	subi	r30, 0x5D	; 93
    6700:	ff 4f       	sbci	r31, 0xFF	; 255
    6702:	80 81       	ld	r24, Z
    6704:	98 17       	cp	r25, r24
    6706:	78 f3       	brcs	.-34     	; 0x66e6 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    6708:	2f ef       	ldi	r18, 0xFF	; 255
    670a:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    670c:	c9 01       	movw	r24, r18
    670e:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00006826 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    6826:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    6828:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    682a:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    682c:	0a c0       	rjmp	.+20     	; 0x6842 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    682e:	f9 01       	movw	r30, r18
    6830:	e9 0f       	add	r30, r25
    6832:	f1 1d       	adc	r31, r1
    6834:	ec 55       	subi	r30, 0x5C	; 92
    6836:	ff 4f       	sbci	r31, 0xFF	; 255
    6838:	40 81       	ld	r20, Z
    683a:	42 30       	cpi	r20, 0x02	; 2
    683c:	09 f0       	breq	.+2      	; 0x6840 <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    683e:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    6840:	9f 5f       	subi	r25, 0xFF	; 255
    6842:	f9 01       	movw	r30, r18
    6844:	ed 55       	subi	r30, 0x5D	; 93
    6846:	ff 4f       	sbci	r31, 0xFF	; 255
    6848:	40 81       	ld	r20, Z
    684a:	94 17       	cp	r25, r20
    684c:	80 f3       	brcs	.-32     	; 0x682e <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    684e:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

0000382c <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    382c:	8f 92       	push	r8
    382e:	9f 92       	push	r9
    3830:	af 92       	push	r10
    3832:	bf 92       	push	r11
    3834:	cf 92       	push	r12
    3836:	df 92       	push	r13
    3838:	ef 92       	push	r14
    383a:	ff 92       	push	r15
    383c:	0f 93       	push	r16
    383e:	1f 93       	push	r17
    3840:	cf 93       	push	r28
    3842:	df 93       	push	r29
    3844:	ec 01       	movw	r28, r24
    3846:	6b 01       	movw	r12, r22
    3848:	5a 01       	movw	r10, r20
    384a:	49 01       	movw	r8, r18
    int16_t res=mrpp_state_is_body_ready(state);
    384c:	0e 94 70 33 	call	0x66e0	; 0x66e0 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    3850:	8f 3f       	cpi	r24, 0xFF	; 255
    3852:	2f ef       	ldi	r18, 0xFF	; 255
    3854:	92 07       	cpc	r25, r18
    3856:	09 f4       	brne	.+2      	; 0x385a <mrpp_state_get_ready_body+0x2e>
    3858:	51 c0       	rjmp	.+162    	; 0x38fc <mrpp_state_get_ready_body+0xd0>
    385a:	8c 15       	cp	r24, r12
    385c:	9d 05       	cpc	r25, r13
    385e:	09 f0       	breq	.+2      	; 0x3862 <mrpp_state_get_ready_body+0x36>
    3860:	4f c0       	rjmp	.+158    	; 0x3900 <mrpp_state_get_ready_body+0xd4>
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	09 c0       	rjmp	.+18     	; 0x3878 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    3866:	fe 01       	movw	r30, r28
    3868:	e8 0f       	add	r30, r24
    386a:	f1 1d       	adc	r31, r1
    386c:	ec 55       	subi	r30, 0x5C	; 92
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	90 81       	ld	r25, Z
    3872:	91 30       	cpi	r25, 0x01	; 1
    3874:	41 f0       	breq	.+16     	; 0x3886 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3876:	8f 5f       	subi	r24, 0xFF	; 255
    3878:	fe 01       	movw	r30, r28
    387a:	ed 55       	subi	r30, 0x5D	; 93
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	90 81       	ld	r25, Z
    3880:	89 17       	cp	r24, r25
    3882:	88 f3       	brcs	.-30     	; 0x3866 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    3884:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    3886:	91 e0       	ldi	r25, 0x01	; 1
    3888:	98 0f       	add	r25, r24
    388a:	f5 01       	movw	r30, r10
    388c:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    388e:	99 81       	ldd	r25, Y+1	; 0x01
    3890:	f4 01       	movw	r30, r8
    3892:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	41 e6       	ldi	r20, 0x61	; 97
    3898:	48 9f       	mul	r20, r24
    389a:	90 01       	movw	r18, r0
    389c:	49 9f       	mul	r20, r25
    389e:	30 0d       	add	r19, r0
    38a0:	11 24       	eor	r1, r1
    38a2:	f8 01       	movw	r30, r16
    38a4:	31 83       	std	Z+1, r19	; 0x01
    38a6:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    38a8:	fe 01       	movw	r30, r28
    38aa:	ed 55       	subi	r30, 0x5D	; 93
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	20 81       	ld	r18, Z
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	21 50       	subi	r18, 0x01	; 1
    38b4:	31 09       	sbc	r19, r1
    38b6:	82 17       	cp	r24, r18
    38b8:	93 07       	cpc	r25, r19
    38ba:	2c f4       	brge	.+10     	; 0x38c6 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    38bc:	81 e6       	ldi	r24, 0x61	; 97
    38be:	f7 01       	movw	r30, r14
    38c0:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	1e c0       	rjmp	.+60     	; 0x3902 <mrpp_state_get_ready_body+0xd6>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    38c6:	8a 81       	ldd	r24, Y+2	; 0x02
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	ac 01       	movw	r20, r24
    38ce:	44 0f       	add	r20, r20
    38d0:	55 1f       	adc	r21, r21
    38d2:	88 0f       	add	r24, r24
    38d4:	99 1f       	adc	r25, r25
    38d6:	88 0f       	add	r24, r24
    38d8:	99 1f       	adc	r25, r25
    38da:	88 0f       	add	r24, r24
    38dc:	99 1f       	adc	r25, r25
    38de:	84 0f       	add	r24, r20
    38e0:	95 1f       	adc	r25, r21
    38e2:	c8 0f       	add	r28, r24
    38e4:	d9 1f       	adc	r29, r25
    38e6:	9b 81       	ldd	r25, Y+3	; 0x03
    38e8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ea:	89 0f       	add	r24, r25
    38ec:	f1 e6       	ldi	r31, 0x61	; 97
    38ee:	2f 9f       	mul	r18, r31
    38f0:	80 19       	sub	r24, r0
    38f2:	11 24       	eor	r1, r1
    38f4:	f7 01       	movw	r30, r14
    38f6:	80 83       	st	Z, r24
    } 
    return true; 
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	03 c0       	rjmp	.+6      	; 0x3902 <mrpp_state_get_ready_body+0xd6>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	01 c0       	rjmp	.+2      	; 0x3902 <mrpp_state_get_ready_body+0xd6>
    3900:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    3902:	df 91       	pop	r29
    3904:	cf 91       	pop	r28
    3906:	1f 91       	pop	r17
    3908:	0f 91       	pop	r16
    390a:	ff 90       	pop	r15
    390c:	ef 90       	pop	r14
    390e:	df 90       	pop	r13
    3910:	cf 90       	pop	r12
    3912:	bf 90       	pop	r11
    3914:	af 90       	pop	r10
    3916:	9f 90       	pop	r9
    3918:	8f 90       	pop	r8
    391a:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00006a8c <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    6a8c:	fc 01       	movw	r30, r24
    6a8e:	ed 55       	subi	r30, 0x5D	; 93
    6a90:	ff 4f       	sbci	r31, 0xFF	; 255
    6a92:	20 81       	ld	r18, Z
    6a94:	30 e0       	ldi	r19, 0x00	; 0
    6a96:	62 17       	cp	r22, r18
    6a98:	73 07       	cpc	r23, r19
    6a9a:	3c f4       	brge	.+14     	; 0x6aaa <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    6a9c:	68 0f       	add	r22, r24
    6a9e:	79 1f       	adc	r23, r25
    6aa0:	fb 01       	movw	r30, r22
    6aa2:	ec 55       	subi	r30, 0x5C	; 92
    6aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    6aa6:	82 e0       	ldi	r24, 0x02	; 2
    6aa8:	80 83       	st	Z, r24
    6aaa:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00006352 <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    6352:	70 e0       	ldi	r23, 0x00	; 0
    6354:	61 50       	subi	r22, 0x01	; 1
    6356:	71 09       	sbc	r23, r1
    6358:	fb 01       	movw	r30, r22
    635a:	ee 0f       	add	r30, r30
    635c:	ff 1f       	adc	r31, r31
    635e:	66 0f       	add	r22, r22
    6360:	77 1f       	adc	r23, r23
    6362:	66 0f       	add	r22, r22
    6364:	77 1f       	adc	r23, r23
    6366:	66 0f       	add	r22, r22
    6368:	77 1f       	adc	r23, r23
    636a:	e6 0f       	add	r30, r22
    636c:	f7 1f       	adc	r31, r23
    636e:	e8 0f       	add	r30, r24
    6370:	f9 1f       	adc	r31, r25
    6372:	83 81       	ldd	r24, Z+3	; 0x03
    6374:	94 81       	ldd	r25, Z+4	; 0x04
    6376:	da 01       	movw	r26, r20
    6378:	8d 93       	st	X+, r24
    637a:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    637c:	85 81       	ldd	r24, Z+5	; 0x05
    637e:	96 81       	ldd	r25, Z+6	; 0x06
    6380:	f9 01       	movw	r30, r18
    6382:	91 83       	std	Z+1, r25	; 0x01
    6384:	80 83       	st	Z, r24
    6386:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00006710 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    6710:	80 91 cf 0e 	lds	r24, 0x0ECF	; 0x800ecf <cnt>
    6714:	90 91 d0 0e 	lds	r25, 0x0ED0	; 0x800ed0 <cnt+0x1>
    6718:	01 96       	adiw	r24, 0x01	; 1
    671a:	90 93 d0 0e 	sts	0x0ED0, r25	; 0x800ed0 <cnt+0x1>
    671e:	80 93 cf 0e 	sts	0x0ECF, r24	; 0x800ecf <cnt>
	if(cnt>=_seconds){
    6722:	20 91 d1 0e 	lds	r18, 0x0ED1	; 0x800ed1 <_seconds>
    6726:	30 91 d2 0e 	lds	r19, 0x0ED2	; 0x800ed2 <_seconds+0x1>
    672a:	82 17       	cp	r24, r18
    672c:	93 07       	cpc	r25, r19
    672e:	38 f0       	brcs	.+14     	; 0x673e <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    6730:	80 91 ec 0e 	lds	r24, 0x0EEC	; 0x800eec <eventPointer>
    6734:	0e 94 8d 30 	call	0x611a	; 0x611a <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    6738:	80 e0       	ldi	r24, 0x00	; 0
    673a:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <PM_HAL_BC_power>
    673e:	08 95       	ret

Disassembly of section .text.PUMP_start:

00006916 <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    6916:	10 92 d0 0e 	sts	0x0ED0, r1	; 0x800ed0 <cnt+0x1>
    691a:	10 92 cf 0e 	sts	0x0ECF, r1	; 0x800ecf <cnt>
	_seconds=seconds;
    691e:	90 93 d2 0e 	sts	0x0ED2, r25	; 0x800ed2 <_seconds+0x1>
    6922:	80 93 d1 0e 	sts	0x0ED1, r24	; 0x800ed1 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    6926:	88 e8       	ldi	r24, 0x88	; 136
    6928:	93 e3       	ldi	r25, 0x33	; 51
    692a:	0e 94 26 2b 	call	0x564c	; 0x564c <TC2_HAL_subscribe>
    692e:	80 93 ec 0e 	sts	0x0EEC, r24	; 0x800eec <eventPointer>
	PM_HAL_BC_power(true);
    6932:	81 e0       	ldi	r24, 0x01	; 1
    6934:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <PM_HAL_BC_power>
    6938:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

00006bf2 <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    6bf2:	40 91 cf 0e 	lds	r20, 0x0ECF	; 0x800ecf <cnt>
    6bf6:	50 91 d0 0e 	lds	r21, 0x0ED0	; 0x800ed0 <cnt+0x1>
    6bfa:	20 91 d1 0e 	lds	r18, 0x0ED1	; 0x800ed1 <_seconds>
    6bfe:	30 91 d2 0e 	lds	r19, 0x0ED2	; 0x800ed2 <_seconds+0x1>
    6c02:	81 e0       	ldi	r24, 0x01	; 1
    6c04:	42 17       	cp	r20, r18
    6c06:	53 07       	cpc	r21, r19
    6c08:	08 f4       	brcc	.+2      	; 0x6c0c <PUMP_is_done+0x1a>
    6c0a:	80 e0       	ldi	r24, 0x00	; 0
}
    6c0c:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00003536 <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    3536:	1f 93       	push	r17
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
    353c:	00 d0       	rcall	.+0      	; 0x353e <datetime_to_BCD+0x8>
    353e:	00 d0       	rcall	.+0      	; 0x3540 <datetime_to_BCD+0xa>
    3540:	00 d0       	rcall	.+0      	; 0x3542 <datetime_to_BCD+0xc>
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	f9 01       	movw	r30, r18
    3548:	3d ec       	ldi	r19, 0xCD	; 205
    354a:	43 9f       	mul	r20, r19
    354c:	21 2d       	mov	r18, r1
    354e:	11 24       	eor	r1, r1
    3550:	26 95       	lsr	r18
    3552:	26 95       	lsr	r18
    3554:	26 95       	lsr	r18
    3556:	10 e1       	ldi	r17, 0x10	; 16
    3558:	21 9f       	mul	r18, r17
    355a:	d0 01       	movw	r26, r0
    355c:	11 24       	eor	r1, r1
    355e:	22 0f       	add	r18, r18
    3560:	b2 2f       	mov	r27, r18
    3562:	bb 0f       	add	r27, r27
    3564:	bb 0f       	add	r27, r27
    3566:	2b 0f       	add	r18, r27
    3568:	42 1b       	sub	r20, r18
    356a:	4a 2b       	or	r20, r26
    356c:	40 83       	st	Z, r20
    356e:	53 9f       	mul	r21, r19
    3570:	21 2d       	mov	r18, r1
    3572:	11 24       	eor	r1, r1
    3574:	26 95       	lsr	r18
    3576:	26 95       	lsr	r18
    3578:	26 95       	lsr	r18
    357a:	40 e1       	ldi	r20, 0x10	; 16
    357c:	24 9f       	mul	r18, r20
    357e:	d0 01       	movw	r26, r0
    3580:	11 24       	eor	r1, r1
    3582:	22 0f       	add	r18, r18
    3584:	42 2f       	mov	r20, r18
    3586:	44 0f       	add	r20, r20
    3588:	44 0f       	add	r20, r20
    358a:	24 0f       	add	r18, r20
    358c:	52 1b       	sub	r21, r18
    358e:	5a 2b       	or	r21, r26
    3590:	51 83       	std	Z+1, r21	; 0x01
    3592:	63 9f       	mul	r22, r19
    3594:	41 2d       	mov	r20, r1
    3596:	11 24       	eor	r1, r1
    3598:	46 95       	lsr	r20
    359a:	46 95       	lsr	r20
    359c:	46 95       	lsr	r20
    359e:	10 e1       	ldi	r17, 0x10	; 16
    35a0:	41 9f       	mul	r20, r17
    35a2:	d0 01       	movw	r26, r0
    35a4:	11 24       	eor	r1, r1
    35a6:	44 0f       	add	r20, r20
    35a8:	24 2f       	mov	r18, r20
    35aa:	22 0f       	add	r18, r18
    35ac:	22 0f       	add	r18, r18
    35ae:	42 0f       	add	r20, r18
    35b0:	64 1b       	sub	r22, r20
    35b2:	6a 2b       	or	r22, r26
    35b4:	62 83       	std	Z+2, r22	; 0x02
    35b6:	73 9f       	mul	r23, r19
    35b8:	41 2d       	mov	r20, r1
    35ba:	11 24       	eor	r1, r1
    35bc:	46 95       	lsr	r20
    35be:	46 95       	lsr	r20
    35c0:	46 95       	lsr	r20
    35c2:	20 e1       	ldi	r18, 0x10	; 16
    35c4:	42 9f       	mul	r20, r18
    35c6:	d0 01       	movw	r26, r0
    35c8:	11 24       	eor	r1, r1
    35ca:	44 0f       	add	r20, r20
    35cc:	24 2f       	mov	r18, r20
    35ce:	22 0f       	add	r18, r18
    35d0:	22 0f       	add	r18, r18
    35d2:	42 0f       	add	r20, r18
    35d4:	74 1b       	sub	r23, r20
    35d6:	7a 2b       	or	r23, r26
    35d8:	73 83       	std	Z+3, r23	; 0x03
    35da:	83 9f       	mul	r24, r19
    35dc:	41 2d       	mov	r20, r1
    35de:	11 24       	eor	r1, r1
    35e0:	46 95       	lsr	r20
    35e2:	46 95       	lsr	r20
    35e4:	46 95       	lsr	r20
    35e6:	10 e1       	ldi	r17, 0x10	; 16
    35e8:	41 9f       	mul	r20, r17
    35ea:	b0 01       	movw	r22, r0
    35ec:	11 24       	eor	r1, r1
    35ee:	44 0f       	add	r20, r20
    35f0:	24 2f       	mov	r18, r20
    35f2:	22 0f       	add	r18, r18
    35f4:	22 0f       	add	r18, r18
    35f6:	42 0f       	add	r20, r18
    35f8:	84 1b       	sub	r24, r20
    35fa:	86 2b       	or	r24, r22
    35fc:	84 83       	std	Z+4, r24	; 0x04
    35fe:	93 9f       	mul	r25, r19
    3600:	31 2d       	mov	r19, r1
    3602:	11 24       	eor	r1, r1
    3604:	36 95       	lsr	r19
    3606:	36 95       	lsr	r19
    3608:	36 95       	lsr	r19
    360a:	20 e1       	ldi	r18, 0x10	; 16
    360c:	32 9f       	mul	r19, r18
    360e:	a0 01       	movw	r20, r0
    3610:	11 24       	eor	r1, r1
    3612:	33 0f       	add	r19, r19
    3614:	83 2f       	mov	r24, r19
    3616:	88 0f       	add	r24, r24
    3618:	88 0f       	add	r24, r24
    361a:	38 0f       	add	r19, r24
    361c:	93 1b       	sub	r25, r19
    361e:	94 2b       	or	r25, r20
    3620:	95 83       	std	Z+5, r25	; 0x05
    3622:	26 96       	adiw	r28, 0x06	; 6
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	1f 91       	pop	r17
    3634:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00005746 <RTC_set_clock_out>:
    5746:	cf 93       	push	r28
    5748:	df 93       	push	r29
    574a:	00 d0       	rcall	.+0      	; 0x574c <RTC_set_clock_out+0x6>
    574c:	cd b7       	in	r28, 0x3d	; 61
    574e:	de b7       	in	r29, 0x3e	; 62
    5750:	9d e0       	ldi	r25, 0x0D	; 13
    5752:	99 83       	std	Y+1, r25	; 0x01
    5754:	81 30       	cpi	r24, 0x01	; 1
    5756:	31 f0       	breq	.+12     	; 0x5764 <RTC_set_clock_out+0x1e>
    5758:	18 f0       	brcs	.+6      	; 0x5760 <RTC_set_clock_out+0x1a>
    575a:	80 32       	cpi	r24, 0x20	; 32
    575c:	31 f0       	breq	.+12     	; 0x576a <RTC_set_clock_out+0x24>
    575e:	13 c0       	rjmp	.+38     	; 0x5786 <RTC_set_clock_out+0x40>
    5760:	1a 82       	std	Y+2, r1	; 0x02
    5762:	05 c0       	rjmp	.+10     	; 0x576e <RTC_set_clock_out+0x28>
    5764:	83 e8       	ldi	r24, 0x83	; 131
    5766:	8a 83       	std	Y+2, r24	; 0x02
    5768:	02 c0       	rjmp	.+4      	; 0x576e <RTC_set_clock_out+0x28>
    576a:	82 e8       	ldi	r24, 0x82	; 130
    576c:	8a 83       	std	Y+2, r24	; 0x02
    576e:	ae 01       	movw	r20, r28
    5770:	4f 5f       	subi	r20, 0xFF	; 255
    5772:	5f 4f       	sbci	r21, 0xFF	; 255
    5774:	60 e8       	ldi	r22, 0x80	; 128
    5776:	22 e0       	ldi	r18, 0x02	; 2
    5778:	81 e5       	ldi	r24, 0x51	; 81
    577a:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <TWI_API_write_data_stop>
    577e:	88 23       	and	r24, r24
    5780:	21 f0       	breq	.+8      	; 0x578a <RTC_set_clock_out+0x44>
    5782:	82 e0       	ldi	r24, 0x02	; 2
    5784:	03 c0       	rjmp	.+6      	; 0x578c <RTC_set_clock_out+0x46>
    5786:	81 e0       	ldi	r24, 0x01	; 1
    5788:	01 c0       	rjmp	.+2      	; 0x578c <RTC_set_clock_out+0x46>
    578a:	80 e0       	ldi	r24, 0x00	; 0
    578c:	0f 90       	pop	r0
    578e:	0f 90       	pop	r0
    5790:	df 91       	pop	r29
    5792:	cf 91       	pop	r28
    5794:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00002d1a <RTC_get_current_time>:
    2d1a:	0f 93       	push	r16
    2d1c:	1f 93       	push	r17
    2d1e:	cf 93       	push	r28
    2d20:	df 93       	push	r29
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	27 97       	sbiw	r28, 0x07	; 7
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	cd bf       	out	0x3d, r28	; 61
    2d32:	8c 01       	movw	r16, r24
    2d34:	21 e0       	ldi	r18, 0x01	; 1
    2d36:	43 ed       	ldi	r20, 0xD3	; 211
    2d38:	59 e0       	ldi	r21, 0x09	; 9
    2d3a:	60 e0       	ldi	r22, 0x00	; 0
    2d3c:	81 e5       	ldi	r24, 0x51	; 81
    2d3e:	0e 94 ed 36 	call	0x6dda	; 0x6dda <TWI_API_write_data>
    2d42:	81 11       	cpse	r24, r1
    2d44:	7c c0       	rjmp	.+248    	; 0x2e3e <RTC_get_current_time+0x124>
    2d46:	47 e0       	ldi	r20, 0x07	; 7
    2d48:	be 01       	movw	r22, r28
    2d4a:	6f 5f       	subi	r22, 0xFF	; 255
    2d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4e:	81 e5       	ldi	r24, 0x51	; 81
    2d50:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <TWI_API_repeat_read_data_stop>
    2d54:	81 11       	cpse	r24, r1
    2d56:	75 c0       	rjmp	.+234    	; 0x2e42 <RTC_get_current_time+0x128>
    2d58:	29 81       	ldd	r18, Y+1	; 0x01
    2d5a:	82 2f       	mov	r24, r18
    2d5c:	8f 77       	andi	r24, 0x7F	; 127
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	95 95       	asr	r25
    2d62:	87 95       	ror	r24
    2d64:	95 95       	asr	r25
    2d66:	87 95       	ror	r24
    2d68:	95 95       	asr	r25
    2d6a:	87 95       	ror	r24
    2d6c:	95 95       	asr	r25
    2d6e:	87 95       	ror	r24
    2d70:	88 0f       	add	r24, r24
    2d72:	98 2f       	mov	r25, r24
    2d74:	99 0f       	add	r25, r25
    2d76:	99 0f       	add	r25, r25
    2d78:	89 0f       	add	r24, r25
    2d7a:	2f 70       	andi	r18, 0x0F	; 15
    2d7c:	82 0f       	add	r24, r18
    2d7e:	f8 01       	movw	r30, r16
    2d80:	80 83       	st	Z, r24
    2d82:	2a 81       	ldd	r18, Y+2	; 0x02
    2d84:	82 2f       	mov	r24, r18
    2d86:	8f 77       	andi	r24, 0x7F	; 127
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	95 95       	asr	r25
    2d8c:	87 95       	ror	r24
    2d8e:	95 95       	asr	r25
    2d90:	87 95       	ror	r24
    2d92:	95 95       	asr	r25
    2d94:	87 95       	ror	r24
    2d96:	95 95       	asr	r25
    2d98:	87 95       	ror	r24
    2d9a:	88 0f       	add	r24, r24
    2d9c:	98 2f       	mov	r25, r24
    2d9e:	99 0f       	add	r25, r25
    2da0:	99 0f       	add	r25, r25
    2da2:	89 0f       	add	r24, r25
    2da4:	2f 70       	andi	r18, 0x0F	; 15
    2da6:	82 0f       	add	r24, r18
    2da8:	81 83       	std	Z+1, r24	; 0x01
    2daa:	2b 81       	ldd	r18, Y+3	; 0x03
    2dac:	82 2f       	mov	r24, r18
    2dae:	8f 73       	andi	r24, 0x3F	; 63
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	95 95       	asr	r25
    2db4:	87 95       	ror	r24
    2db6:	95 95       	asr	r25
    2db8:	87 95       	ror	r24
    2dba:	95 95       	asr	r25
    2dbc:	87 95       	ror	r24
    2dbe:	95 95       	asr	r25
    2dc0:	87 95       	ror	r24
    2dc2:	88 0f       	add	r24, r24
    2dc4:	98 2f       	mov	r25, r24
    2dc6:	99 0f       	add	r25, r25
    2dc8:	99 0f       	add	r25, r25
    2dca:	89 0f       	add	r24, r25
    2dcc:	2f 70       	andi	r18, 0x0F	; 15
    2dce:	82 0f       	add	r24, r18
    2dd0:	82 83       	std	Z+2, r24	; 0x02
    2dd2:	2c 81       	ldd	r18, Y+4	; 0x04
    2dd4:	82 2f       	mov	r24, r18
    2dd6:	8f 73       	andi	r24, 0x3F	; 63
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	95 95       	asr	r25
    2ddc:	87 95       	ror	r24
    2dde:	95 95       	asr	r25
    2de0:	87 95       	ror	r24
    2de2:	95 95       	asr	r25
    2de4:	87 95       	ror	r24
    2de6:	95 95       	asr	r25
    2de8:	87 95       	ror	r24
    2dea:	88 0f       	add	r24, r24
    2dec:	98 2f       	mov	r25, r24
    2dee:	99 0f       	add	r25, r25
    2df0:	99 0f       	add	r25, r25
    2df2:	89 0f       	add	r24, r25
    2df4:	2f 70       	andi	r18, 0x0F	; 15
    2df6:	82 0f       	add	r24, r18
    2df8:	83 83       	std	Z+3, r24	; 0x03
    2dfa:	2e 81       	ldd	r18, Y+6	; 0x06
    2dfc:	82 2f       	mov	r24, r18
    2dfe:	8f 71       	andi	r24, 0x1F	; 31
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	95 95       	asr	r25
    2e04:	87 95       	ror	r24
    2e06:	95 95       	asr	r25
    2e08:	87 95       	ror	r24
    2e0a:	95 95       	asr	r25
    2e0c:	87 95       	ror	r24
    2e0e:	95 95       	asr	r25
    2e10:	87 95       	ror	r24
    2e12:	88 0f       	add	r24, r24
    2e14:	98 2f       	mov	r25, r24
    2e16:	99 0f       	add	r25, r25
    2e18:	99 0f       	add	r25, r25
    2e1a:	89 0f       	add	r24, r25
    2e1c:	2f 70       	andi	r18, 0x0F	; 15
    2e1e:	82 0f       	add	r24, r18
    2e20:	84 83       	std	Z+4, r24	; 0x04
    2e22:	8f 81       	ldd	r24, Y+7	; 0x07
    2e24:	98 2f       	mov	r25, r24
    2e26:	92 95       	swap	r25
    2e28:	9f 70       	andi	r25, 0x0F	; 15
    2e2a:	99 0f       	add	r25, r25
    2e2c:	29 2f       	mov	r18, r25
    2e2e:	22 0f       	add	r18, r18
    2e30:	22 0f       	add	r18, r18
    2e32:	92 0f       	add	r25, r18
    2e34:	8f 70       	andi	r24, 0x0F	; 15
    2e36:	89 0f       	add	r24, r25
    2e38:	85 83       	std	Z+5, r24	; 0x05
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	03 c0       	rjmp	.+6      	; 0x2e44 <RTC_get_current_time+0x12a>
    2e3e:	82 e0       	ldi	r24, 0x02	; 2
    2e40:	01 c0       	rjmp	.+2      	; 0x2e44 <RTC_get_current_time+0x12a>
    2e42:	82 e0       	ldi	r24, 0x02	; 2
    2e44:	27 96       	adiw	r28, 0x07	; 7
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	1f 91       	pop	r17
    2e56:	0f 91       	pop	r16
    2e58:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

000050d0 <RTC_set_current_time>:
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
    50d4:	cd b7       	in	r28, 0x3d	; 61
    50d6:	de b7       	in	r29, 0x3e	; 62
    50d8:	64 97       	sbiw	r28, 0x14	; 20
    50da:	0f b6       	in	r0, 0x3f	; 63
    50dc:	f8 94       	cli
    50de:	de bf       	out	0x3e, r29	; 62
    50e0:	0f be       	out	0x3f, r0	; 63
    50e2:	cd bf       	out	0x3d, r28	; 61
    50e4:	9e 01       	movw	r18, r28
    50e6:	27 5f       	subi	r18, 0xF7	; 247
    50e8:	3f 4f       	sbci	r19, 0xFF	; 255
    50ea:	0e 94 9b 1a 	call	0x3536	; 0x3536 <datetime_to_BCD>
    50ee:	82 e0       	ldi	r24, 0x02	; 2
    50f0:	89 83       	std	Y+1, r24	; 0x01
    50f2:	89 85       	ldd	r24, Y+9	; 0x09
    50f4:	8a 83       	std	Y+2, r24	; 0x02
    50f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    50f8:	8b 83       	std	Y+3, r24	; 0x03
    50fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    50fc:	8c 83       	std	Y+4, r24	; 0x04
    50fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    5100:	8d 83       	std	Y+5, r24	; 0x05
    5102:	1e 82       	std	Y+6, r1	; 0x06
    5104:	8d 85       	ldd	r24, Y+13	; 0x0d
    5106:	8f 83       	std	Y+7, r24	; 0x07
    5108:	8e 85       	ldd	r24, Y+14	; 0x0e
    510a:	88 87       	std	Y+8, r24	; 0x08
    510c:	ae 01       	movw	r20, r28
    510e:	4f 5f       	subi	r20, 0xFF	; 255
    5110:	5f 4f       	sbci	r21, 0xFF	; 255
    5112:	60 e8       	ldi	r22, 0x80	; 128
    5114:	28 e0       	ldi	r18, 0x08	; 8
    5116:	81 e5       	ldi	r24, 0x51	; 81
    5118:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <TWI_API_write_data_stop>
    511c:	88 23       	and	r24, r24
    511e:	11 f0       	breq	.+4      	; 0x5124 <RTC_set_current_time+0x54>
    5120:	82 e0       	ldi	r24, 0x02	; 2
    5122:	01 c0       	rjmp	.+2      	; 0x5126 <RTC_set_current_time+0x56>
    5124:	80 e0       	ldi	r24, 0x00	; 0
    5126:	64 96       	adiw	r28, 0x14	; 20
    5128:	0f b6       	in	r0, 0x3f	; 63
    512a:	f8 94       	cli
    512c:	de bf       	out	0x3e, r29	; 62
    512e:	0f be       	out	0x3f, r0	; 63
    5130:	cd bf       	out	0x3d, r28	; 61
    5132:	df 91       	pop	r29
    5134:	cf 91       	pop	r28
    5136:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt:

00003d48 <RTC_set_wake_up_interrupt>:
    3d48:	1f 93       	push	r17
    3d4a:	cf 93       	push	r28
    3d4c:	df 93       	push	r29
    3d4e:	cd b7       	in	r28, 0x3d	; 61
    3d50:	de b7       	in	r29, 0x3e	; 62
    3d52:	2d 97       	sbiw	r28, 0x0d	; 13
    3d54:	0f b6       	in	r0, 0x3f	; 63
    3d56:	f8 94       	cli
    3d58:	de bf       	out	0x3e, r29	; 62
    3d5a:	0f be       	out	0x3f, r0	; 63
    3d5c:	cd bf       	out	0x3d, r28	; 61
    3d5e:	18 2f       	mov	r17, r24
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	89 83       	std	Y+1, r24	; 0x01
    3d64:	82 e0       	ldi	r24, 0x02	; 2
    3d66:	8a 83       	std	Y+2, r24	; 0x02
    3d68:	85 e0       	ldi	r24, 0x05	; 5
    3d6a:	ea e9       	ldi	r30, 0x9A	; 154
    3d6c:	fe e0       	ldi	r31, 0x0E	; 14
    3d6e:	de 01       	movw	r26, r28
    3d70:	13 96       	adiw	r26, 0x03	; 3
    3d72:	01 90       	ld	r0, Z+
    3d74:	0d 92       	st	X+, r0
    3d76:	8a 95       	dec	r24
    3d78:	e1 f7       	brne	.-8      	; 0x3d72 <RTC_set_wake_up_interrupt+0x2a>
    3d7a:	ce 01       	movw	r24, r28
    3d7c:	08 96       	adiw	r24, 0x08	; 8
    3d7e:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <RTC_get_current_time>
    3d82:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d84:	81 0f       	add	r24, r17
    3d86:	9b ea       	ldi	r25, 0xAB	; 171
    3d88:	89 9f       	mul	r24, r25
    3d8a:	91 2d       	mov	r25, r1
    3d8c:	11 24       	eor	r1, r1
    3d8e:	92 95       	swap	r25
    3d90:	9f 70       	andi	r25, 0x0F	; 15
    3d92:	28 e1       	ldi	r18, 0x18	; 24
    3d94:	92 9f       	mul	r25, r18
    3d96:	80 19       	sub	r24, r0
    3d98:	11 24       	eor	r1, r1
    3d9a:	8a 87       	std	Y+10, r24	; 0x0a
    3d9c:	ae 01       	movw	r20, r28
    3d9e:	4f 5f       	subi	r20, 0xFF	; 255
    3da0:	5f 4f       	sbci	r21, 0xFF	; 255
    3da2:	60 e8       	ldi	r22, 0x80	; 128
    3da4:	22 e0       	ldi	r18, 0x02	; 2
    3da6:	81 e5       	ldi	r24, 0x51	; 81
    3da8:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <TWI_API_write_data_stop>
    3dac:	81 11       	cpse	r24, r1
    3dae:	20 c0       	rjmp	.+64     	; 0x3df0 <RTC_set_wake_up_interrupt+0xa8>
    3db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db2:	8d ec       	ldi	r24, 0xCD	; 205
    3db4:	98 9f       	mul	r25, r24
    3db6:	81 2d       	mov	r24, r1
    3db8:	11 24       	eor	r1, r1
    3dba:	86 95       	lsr	r24
    3dbc:	86 95       	lsr	r24
    3dbe:	86 95       	lsr	r24
    3dc0:	40 e1       	ldi	r20, 0x10	; 16
    3dc2:	84 9f       	mul	r24, r20
    3dc4:	90 01       	movw	r18, r0
    3dc6:	11 24       	eor	r1, r1
    3dc8:	88 0f       	add	r24, r24
    3dca:	38 2f       	mov	r19, r24
    3dcc:	33 0f       	add	r19, r19
    3dce:	33 0f       	add	r19, r19
    3dd0:	83 0f       	add	r24, r19
    3dd2:	98 1b       	sub	r25, r24
    3dd4:	92 2b       	or	r25, r18
    3dd6:	9d 83       	std	Y+5, r25	; 0x05
    3dd8:	ae 01       	movw	r20, r28
    3dda:	4d 5f       	subi	r20, 0xFD	; 253
    3ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    3dde:	60 e8       	ldi	r22, 0x80	; 128
    3de0:	25 e0       	ldi	r18, 0x05	; 5
    3de2:	81 e5       	ldi	r24, 0x51	; 81
    3de4:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <TWI_API_write_data_stop>
    3de8:	88 23       	and	r24, r24
    3dea:	21 f0       	breq	.+8      	; 0x3df4 <RTC_set_wake_up_interrupt+0xac>
    3dec:	82 e0       	ldi	r24, 0x02	; 2
    3dee:	03 c0       	rjmp	.+6      	; 0x3df6 <RTC_set_wake_up_interrupt+0xae>
    3df0:	82 e0       	ldi	r24, 0x02	; 2
    3df2:	01 c0       	rjmp	.+2      	; 0x3df6 <RTC_set_wake_up_interrupt+0xae>
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	2d 96       	adiw	r28, 0x0d	; 13
    3df8:	0f b6       	in	r0, 0x3f	; 63
    3dfa:	f8 94       	cli
    3dfc:	de bf       	out	0x3e, r29	; 62
    3dfe:	0f be       	out	0x3f, r0	; 63
    3e00:	cd bf       	out	0x3d, r28	; 61
    3e02:	df 91       	pop	r29
    3e04:	cf 91       	pop	r28
    3e06:	1f 91       	pop	r17
    3e08:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

0000642a <RTC_clear_wake_up_interrupt>:

RTC_STATUS RTC_clear_wake_up_interrupt(){
    642a:	cf 93       	push	r28
    642c:	df 93       	push	r29
    642e:	00 d0       	rcall	.+0      	; 0x6430 <RTC_clear_wake_up_interrupt+0x6>
    6430:	cd b7       	in	r28, 0x3d	; 61
    6432:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    6434:	81 e0       	ldi	r24, 0x01	; 1
    6436:	89 83       	std	Y+1, r24	; 0x01
    6438:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    643a:	ae 01       	movw	r20, r28
    643c:	4f 5f       	subi	r20, 0xFF	; 255
    643e:	5f 4f       	sbci	r21, 0xFF	; 255
    6440:	60 e8       	ldi	r22, 0x80	; 128
    6442:	22 e0       	ldi	r18, 0x02	; 2
    6444:	81 e5       	ldi	r24, 0x51	; 81
    6446:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    644a:	88 23       	and	r24, r24
    644c:	11 f0       	breq	.+4      	; 0x6452 <RTC_clear_wake_up_interrupt+0x28>
    644e:	82 e0       	ldi	r24, 0x02	; 2
    6450:	01 c0       	rjmp	.+2      	; 0x6454 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    6452:	80 e0       	ldi	r24, 0x00	; 0
}
    6454:	0f 90       	pop	r0
    6456:	0f 90       	pop	r0
    6458:	df 91       	pop	r29
    645a:	cf 91       	pop	r28
    645c:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

000031e6 <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    31e6:	4f 92       	push	r4
    31e8:	5f 92       	push	r5
    31ea:	6f 92       	push	r6
    31ec:	7f 92       	push	r7
    31ee:	8f 92       	push	r8
    31f0:	9f 92       	push	r9
    31f2:	af 92       	push	r10
    31f4:	bf 92       	push	r11
    31f6:	cf 92       	push	r12
    31f8:	df 92       	push	r13
    31fa:	ef 92       	push	r14
    31fc:	ff 92       	push	r15
    31fe:	0f 93       	push	r16
    3200:	1f 93       	push	r17
    3202:	cf 93       	push	r28
    3204:	df 93       	push	r29
    3206:	00 d0       	rcall	.+0      	; 0x3208 <RTC_datetime_to_ts+0x22>
    3208:	00 d0       	rcall	.+0      	; 0x320a <RTC_datetime_to_ts+0x24>
    320a:	00 d0       	rcall	.+0      	; 0x320c <RTC_datetime_to_ts+0x26>
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
    3210:	f9 01       	movw	r30, r18
    3212:	49 2e       	mov	r4, r25
    3214:	51 2c       	mov	r5, r1
    3216:	61 2c       	mov	r6, r1
    3218:	71 2c       	mov	r7, r1
    321a:	03 2e       	mov	r0, r19
    321c:	3a e1       	ldi	r19, 0x1A	; 26
    321e:	44 0c       	add	r4, r4
    3220:	55 1c       	adc	r5, r5
    3222:	66 1c       	adc	r6, r6
    3224:	77 1c       	adc	r7, r7
    3226:	3a 95       	dec	r19
    3228:	d1 f7       	brne	.-12     	; 0x321e <RTC_datetime_to_ts+0x38>
    322a:	30 2d       	mov	r19, r0
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	a0 e0       	ldi	r26, 0x00	; 0
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	07 2e       	mov	r0, r23
    3234:	76 e1       	ldi	r23, 0x16	; 22
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	aa 1f       	adc	r26, r26
    323c:	bb 1f       	adc	r27, r27
    323e:	7a 95       	dec	r23
    3240:	d1 f7       	brne	.-12     	; 0x3236 <RTC_datetime_to_ts+0x50>
    3242:	70 2d       	mov	r23, r0
    3244:	84 29       	or	r24, r4
    3246:	95 29       	or	r25, r5
    3248:	a6 29       	or	r26, r6
    324a:	b7 29       	or	r27, r7
    324c:	87 2e       	mov	r8, r23
    324e:	91 2c       	mov	r9, r1
    3250:	a1 2c       	mov	r10, r1
    3252:	b1 2c       	mov	r11, r1
    3254:	07 2e       	mov	r0, r23
    3256:	71 e1       	ldi	r23, 0x11	; 17
    3258:	88 0c       	add	r8, r8
    325a:	99 1c       	adc	r9, r9
    325c:	aa 1c       	adc	r10, r10
    325e:	bb 1c       	adc	r11, r11
    3260:	7a 95       	dec	r23
    3262:	d1 f7       	brne	.-12     	; 0x3258 <RTC_datetime_to_ts+0x72>
    3264:	70 2d       	mov	r23, r0
    3266:	88 29       	or	r24, r8
    3268:	99 29       	or	r25, r9
    326a:	aa 29       	or	r26, r10
    326c:	bb 29       	or	r27, r11
    326e:	c6 2e       	mov	r12, r22
    3270:	d1 2c       	mov	r13, r1
    3272:	e1 2c       	mov	r14, r1
    3274:	f1 2c       	mov	r15, r1
    3276:	0b 2e       	mov	r0, r27
    3278:	bc e0       	ldi	r27, 0x0C	; 12
    327a:	cc 0c       	add	r12, r12
    327c:	dd 1c       	adc	r13, r13
    327e:	ee 1c       	adc	r14, r14
    3280:	ff 1c       	adc	r15, r15
    3282:	ba 95       	dec	r27
    3284:	d1 f7       	brne	.-12     	; 0x327a <RTC_datetime_to_ts+0x94>
    3286:	b0 2d       	mov	r27, r0
    3288:	8c 29       	or	r24, r12
    328a:	9d 29       	or	r25, r13
    328c:	ae 29       	or	r26, r14
    328e:	bf 29       	or	r27, r15
    3290:	05 2f       	mov	r16, r21
    3292:	10 e0       	ldi	r17, 0x00	; 0
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	00 0f       	add	r16, r16
    329a:	11 1f       	adc	r17, r17
    329c:	22 1f       	adc	r18, r18
    329e:	33 1f       	adc	r19, r19
    32a0:	00 0f       	add	r16, r16
    32a2:	11 1f       	adc	r17, r17
    32a4:	22 1f       	adc	r18, r18
    32a6:	33 1f       	adc	r19, r19
    32a8:	00 0f       	add	r16, r16
    32aa:	11 1f       	adc	r17, r17
    32ac:	22 1f       	adc	r18, r18
    32ae:	33 1f       	adc	r19, r19
    32b0:	00 0f       	add	r16, r16
    32b2:	11 1f       	adc	r17, r17
    32b4:	22 1f       	adc	r18, r18
    32b6:	33 1f       	adc	r19, r19
    32b8:	00 0f       	add	r16, r16
    32ba:	11 1f       	adc	r17, r17
    32bc:	22 1f       	adc	r18, r18
    32be:	33 1f       	adc	r19, r19
    32c0:	00 0f       	add	r16, r16
    32c2:	11 1f       	adc	r17, r17
    32c4:	22 1f       	adc	r18, r18
    32c6:	33 1f       	adc	r19, r19
    32c8:	80 2b       	or	r24, r16
    32ca:	91 2b       	or	r25, r17
    32cc:	a2 2b       	or	r26, r18
    32ce:	b3 2b       	or	r27, r19
    32d0:	84 2b       	or	r24, r20
    32d2:	b0 83       	st	Z, r27
    32d4:	a1 83       	std	Z+1, r26	; 0x01
    32d6:	92 83       	std	Z+2, r25	; 0x02
    32d8:	83 83       	std	Z+3, r24	; 0x03
    32da:	26 96       	adiw	r28, 0x06	; 6
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	ff 90       	pop	r15
    32f0:	ef 90       	pop	r14
    32f2:	df 90       	pop	r13
    32f4:	cf 90       	pop	r12
    32f6:	bf 90       	pop	r11
    32f8:	af 90       	pop	r10
    32fa:	9f 90       	pop	r9
    32fc:	8f 90       	pop	r8
    32fe:	7f 90       	pop	r7
    3300:	6f 90       	pop	r6
    3302:	5f 90       	pop	r5
    3304:	4f 90       	pop	r4
    3306:	08 95       	ret

Disassembly of section .text.clear_sampling_data:

00005bca <clear_sampling_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static void clear_sampling_data(){
	co2_pars.cntSamples=0;
    5bca:	ee e8       	ldi	r30, 0x8E	; 142
    5bcc:	fe e0       	ldi	r31, 0x0E	; 14
    5bce:	11 82       	std	Z+1, r1	; 0x01
	co2_pars.nSamples=0;
    5bd0:	10 82       	st	Z, r1
	co2_pars.samplingInterval=0;
    5bd2:	15 82       	std	Z+5, r1	; 0x05
    5bd4:	14 82       	std	Z+4, r1	; 0x04
	co2_pars.data=NULL;
    5bd6:	13 82       	std	Z+3, r1	; 0x03
    5bd8:	12 82       	std	Z+2, r1	; 0x02
	
	temp_pars.cntSamples=0;
    5bda:	e8 e8       	ldi	r30, 0x88	; 136
    5bdc:	fe e0       	ldi	r31, 0x0E	; 14
    5bde:	11 82       	std	Z+1, r1	; 0x01
	temp_pars.nSamples=0;
    5be0:	10 82       	st	Z, r1
	temp_pars.samplingInterval=0;
    5be2:	15 82       	std	Z+5, r1	; 0x05
    5be4:	14 82       	std	Z+4, r1	; 0x04
	temp_pars.data=NULL;
    5be6:	13 82       	std	Z+3, r1	; 0x03
    5be8:	12 82       	std	Z+2, r1	; 0x02

	hum_pars.cntSamples=0;
    5bea:	e2 e8       	ldi	r30, 0x82	; 130
    5bec:	fe e0       	ldi	r31, 0x0E	; 14
    5bee:	11 82       	std	Z+1, r1	; 0x01
	hum_pars.nSamples=0;
    5bf0:	10 82       	st	Z, r1
	hum_pars.samplingInterval=0;
    5bf2:	15 82       	std	Z+5, r1	; 0x05
    5bf4:	14 82       	std	Z+4, r1	; 0x04
	hum_pars.data=NULL;
    5bf6:	13 82       	std	Z+3, r1	; 0x03
    5bf8:	12 82       	std	Z+2, r1	; 0x02
	
	lowest_si=0;
    5bfa:	10 92 d8 0e 	sts	0x0ED8, r1	; 0x800ed8 <lowest_si+0x1>
    5bfe:	10 92 d7 0e 	sts	0x0ED7, r1	; 0x800ed7 <lowest_si>
	highest_si=0;
    5c02:	10 92 d6 0e 	sts	0x0ED6, r1	; 0x800ed6 <highest_si+0x1>
    5c06:	10 92 d5 0e 	sts	0x0ED5, r1	; 0x800ed5 <highest_si>
	si_counter=0;
    5c0a:	10 92 d4 0e 	sts	0x0ED4, r1	; 0x800ed4 <si_counter+0x1>
    5c0e:	10 92 d3 0e 	sts	0x0ED3, r1	; 0x800ed3 <si_counter>
    5c12:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00005138 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[], uint8_t scale){
    5138:	cf 92       	push	r12
    513a:	df 92       	push	r13
    513c:	ef 92       	push	r14
    513e:	ff 92       	push	r15
    5140:	0f 93       	push	r16
    5142:	1f 93       	push	r17
    5144:	cf 93       	push	r28
    5146:	df 93       	push	r29
    5148:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	float value=(float) f.f *scale;
    514a:	04 81       	ldd	r16, Z+4	; 0x04
    514c:	13 81       	ldd	r17, Z+3	; 0x03
    514e:	d1 81       	ldd	r29, Z+1	; 0x01
    5150:	c0 81       	ld	r28, Z
    5152:	70 e0       	ldi	r23, 0x00	; 0
    5154:	80 e0       	ldi	r24, 0x00	; 0
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <__floatsisf>
    515c:	9b 01       	movw	r18, r22
    515e:	ac 01       	movw	r20, r24
    5160:	60 2f       	mov	r22, r16
    5162:	71 2f       	mov	r23, r17
    5164:	8d 2f       	mov	r24, r29
    5166:	9c 2f       	mov	r25, r28
    5168:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <__mulsf3>
    516c:	6b 01       	movw	r12, r22
    516e:	7c 01       	movw	r14, r24
	if(value<0) return 0;
    5170:	20 e0       	ldi	r18, 0x00	; 0
    5172:	30 e0       	ldi	r19, 0x00	; 0
    5174:	a9 01       	movw	r20, r18
    5176:	0e 94 ba 38 	call	0x7174	; 0x7174 <__cmpsf2>
    517a:	88 23       	and	r24, r24
    517c:	34 f0       	brlt	.+12     	; 0x518a <bytes_2_uint+0x52>
	return (uint16_t) value;
    517e:	c7 01       	movw	r24, r14
    5180:	b6 01       	movw	r22, r12
    5182:	0e 94 93 29 	call	0x5326	; 0x5326 <__fixunssfsi>
    5186:	cb 01       	movw	r24, r22
    5188:	02 c0       	rjmp	.+4      	; 0x518e <bytes_2_uint+0x56>
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	float value=(float) f.f *scale;
	if(value<0) return 0;
    518a:	80 e0       	ldi	r24, 0x00	; 0
    518c:	90 e0       	ldi	r25, 0x00	; 0
	return (uint16_t) value;
}
    518e:	df 91       	pop	r29
    5190:	cf 91       	pop	r28
    5192:	1f 91       	pop	r17
    5194:	0f 91       	pop	r16
    5196:	ff 90       	pop	r15
    5198:	ef 90       	pop	r14
    519a:	df 90       	pop	r13
    519c:	cf 90       	pop	r12
    519e:	08 95       	ret

Disassembly of section .text.init_measurement:

000062ac <init_measurement>:
	si_counter=0;
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    62ac:	25 e0       	ldi	r18, 0x05	; 5
    62ae:	44 ec       	ldi	r20, 0xC4	; 196
    62b0:	59 e0       	ldi	r21, 0x09	; 9
    62b2:	60 e0       	ldi	r22, 0x00	; 0
    62b4:	81 e6       	ldi	r24, 0x61	; 97
    62b6:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    62ba:	81 11       	cpse	r24, r1
    62bc:	0f c0       	rjmp	.+30     	; 0x62dc <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    62be:	25 e0       	ldi	r18, 0x05	; 5
    62c0:	49 ec       	ldi	r20, 0xC9	; 201
    62c2:	59 e0       	ldi	r21, 0x09	; 9
    62c4:	60 e0       	ldi	r22, 0x00	; 0
    62c6:	81 e6       	ldi	r24, 0x61	; 97
    62c8:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    62cc:	81 11       	cpse	r24, r1
    62ce:	08 c0       	rjmp	.+16     	; 0x62e0 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    62d0:	0e 94 88 38 	call	0x7110	; 0x7110 <SCD30_HAL_data_ready>
    62d4:	88 23       	and	r24, r24
    62d6:	e1 f3       	breq	.-8      	; 0x62d0 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    62d8:	80 e0       	ldi	r24, 0x00	; 0
    62da:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    62dc:	82 e0       	ldi	r24, 0x02	; 2
    62de:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    62e0:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    62e2:	08 95       	ret

Disassembly of section .text.validate_data:

0000652a <validate_data>:
	*humidity=bytes_2_uint(&data[12], 10);
	
	return SCD30_STATUS_SUCCESS;
}

static bool validate_data(uint8_t data[]){
    652a:	cf 93       	push	r28
    652c:	df 93       	push	r29
    652e:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    6530:	62 e0       	ldi	r22, 0x02	; 2
    6532:	0e 94 c4 31 	call	0x6388	; 0x6388 <calc_crc8>
	if(data[2]!=crc) return false;
    6536:	9a 81       	ldd	r25, Y+2	; 0x02
    6538:	89 13       	cpse	r24, r25
    653a:	0a c0       	rjmp	.+20     	; 0x6550 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    653c:	62 e0       	ldi	r22, 0x02	; 2
    653e:	ce 01       	movw	r24, r28
    6540:	03 96       	adiw	r24, 0x03	; 3
    6542:	0e 94 c4 31 	call	0x6388	; 0x6388 <calc_crc8>
	if(data[5]!=crc) return false;
    6546:	9d 81       	ldd	r25, Y+5	; 0x05
    6548:	89 17       	cp	r24, r25
    654a:	21 f0       	breq	.+8      	; 0x6554 <validate_data+0x2a>
    654c:	80 e0       	ldi	r24, 0x00	; 0
    654e:	03 c0       	rjmp	.+6      	; 0x6556 <validate_data+0x2c>
	return SCD30_STATUS_SUCCESS;
}

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    6550:	80 e0       	ldi	r24, 0x00	; 0
    6552:	01 c0       	rjmp	.+2      	; 0x6556 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    6554:	81 e0       	ldi	r24, 0x01	; 1
}
    6556:	df 91       	pop	r29
    6558:	cf 91       	pop	r28
    655a:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

000068f0 <SCD30_sensor_on>:
/************************************************************************/
/* Definitions                                                          */
/************************************************************************/

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    68f0:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    68f4:	81 e0       	ldi	r24, 0x01	; 1
    68f6:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <PM_HAL_SCD30_power>
    68fa:	2f ef       	ldi	r18, 0xFF	; 255
    68fc:	83 ed       	ldi	r24, 0xD3	; 211
    68fe:	90 e3       	ldi	r25, 0x30	; 48
    6900:	21 50       	subi	r18, 0x01	; 1
    6902:	80 40       	sbci	r24, 0x00	; 0
    6904:	90 40       	sbci	r25, 0x00	; 0
    6906:	e1 f7       	brne	.-8      	; 0x6900 <SCD30_sensor_on+0x10>
    6908:	00 c0       	rjmp	.+0      	; 0x690a <SCD30_sensor_on+0x1a>
    690a:	00 00       	nop
	_delay_ms(2000);
	clear_sampling_data();
    690c:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <clear_sampling_data>
	return init_measurement();
    6910:	0e 94 56 31 	call	0x62ac	; 0x62ac <init_measurement>
}
    6914:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

000071d8 <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    71d8:	80 e0       	ldi	r24, 0x00	; 0
    71da:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <PM_HAL_SCD30_power>
    71de:	08 95       	ret

Disassembly of section .text.SCD30_init_c02_sampling:

00006e74 <SCD30_init_c02_sampling>:
}

void SCD30_init_c02_sampling(uint16_t samplingInterval, uint8_t nSamples, uint16_t data[]){
	co2_pars.cntSamples=0;
    6e74:	ee e8       	ldi	r30, 0x8E	; 142
    6e76:	fe e0       	ldi	r31, 0x0E	; 14
    6e78:	11 82       	std	Z+1, r1	; 0x01
	co2_pars.nSamples=nSamples;
    6e7a:	60 83       	st	Z, r22
	co2_pars.samplingInterval=samplingInterval;
    6e7c:	95 83       	std	Z+5, r25	; 0x05
    6e7e:	84 83       	std	Z+4, r24	; 0x04
	co2_pars.data=data;
    6e80:	53 83       	std	Z+3, r21	; 0x03
    6e82:	42 83       	std	Z+2, r20	; 0x02
    6e84:	08 95       	ret

Disassembly of section .text.SCD30_init_temp_sampling:

00006e86 <SCD30_init_temp_sampling>:
}

void SCD30_init_temp_sampling(uint16_t samplingInterval, uint8_t nSamples, uint16_t data[]){
	temp_pars.cntSamples=0;
    6e86:	e8 e8       	ldi	r30, 0x88	; 136
    6e88:	fe e0       	ldi	r31, 0x0E	; 14
    6e8a:	11 82       	std	Z+1, r1	; 0x01
	temp_pars.nSamples=nSamples;
    6e8c:	60 83       	st	Z, r22
	temp_pars.samplingInterval=samplingInterval;
    6e8e:	95 83       	std	Z+5, r25	; 0x05
    6e90:	84 83       	std	Z+4, r24	; 0x04
	temp_pars.data=data;
    6e92:	53 83       	std	Z+3, r21	; 0x03
    6e94:	42 83       	std	Z+2, r20	; 0x02
    6e96:	08 95       	ret

Disassembly of section .text.SCD30_init_humidity_sampling:

00006e98 <SCD30_init_humidity_sampling>:
}

void SCD30_init_humidity_sampling(uint16_t samplingInterval, uint8_t nSamples, uint16_t data[]){
	hum_pars.cntSamples=0;
    6e98:	e2 e8       	ldi	r30, 0x82	; 130
    6e9a:	fe e0       	ldi	r31, 0x0E	; 14
    6e9c:	11 82       	std	Z+1, r1	; 0x01
	hum_pars.nSamples=nSamples;
    6e9e:	60 83       	st	Z, r22
	hum_pars.samplingInterval=samplingInterval;
    6ea0:	95 83       	std	Z+5, r25	; 0x05
    6ea2:	84 83       	std	Z+4, r24	; 0x04
	hum_pars.data=data;
    6ea4:	53 83       	std	Z+3, r21	; 0x03
    6ea6:	42 83       	std	Z+2, r20	; 0x02
    6ea8:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

00007160 <SCD30_deinit_sampling>:
	TC1_HAL_start();
	return true;
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    7160:	0e 94 28 38 	call	0x7050	; 0x7050 <TC1_HAL_stop>
	clear_sampling_data();
    7164:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <clear_sampling_data>
    7168:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

0000645e <SCD30_is_sampling_done>:



bool SCD30_is_sampling_done(){
	return (
		co2_pars.nSamples==co2_pars.cntSamples && 
    645e:	ee e8       	ldi	r30, 0x8E	; 142
    6460:	fe e0       	ldi	r31, 0x0E	; 14
    6462:	90 81       	ld	r25, Z
    6464:	81 81       	ldd	r24, Z+1	; 0x01
		temp_pars.nSamples==temp_pars.cntSamples && 
    6466:	98 13       	cpse	r25, r24
    6468:	0e c0       	rjmp	.+28     	; 0x6486 <SCD30_is_sampling_done+0x28>
    646a:	e8 e8       	ldi	r30, 0x88	; 136
    646c:	fe e0       	ldi	r31, 0x0E	; 14
    646e:	90 81       	ld	r25, Z
    6470:	81 81       	ldd	r24, Z+1	; 0x01



bool SCD30_is_sampling_done(){
	return (
		co2_pars.nSamples==co2_pars.cntSamples && 
    6472:	98 13       	cpse	r25, r24
    6474:	0a c0       	rjmp	.+20     	; 0x648a <SCD30_is_sampling_done+0x2c>
		temp_pars.nSamples==temp_pars.cntSamples && 
		hum_pars.nSamples==hum_pars.cntSamples); 
    6476:	e2 e8       	ldi	r30, 0x82	; 130
    6478:	fe e0       	ldi	r31, 0x0E	; 14
    647a:	90 81       	ld	r25, Z
    647c:	81 81       	ldd	r24, Z+1	; 0x01


bool SCD30_is_sampling_done(){
	return (
		co2_pars.nSamples==co2_pars.cntSamples && 
		temp_pars.nSamples==temp_pars.cntSamples && 
    647e:	98 17       	cp	r25, r24
    6480:	31 f0       	breq	.+12     	; 0x648e <SCD30_is_sampling_done+0x30>
    6482:	80 e0       	ldi	r24, 0x00	; 0
    6484:	08 95       	ret
    6486:	80 e0       	ldi	r24, 0x00	; 0
    6488:	08 95       	ret
    648a:	80 e0       	ldi	r24, 0x00	; 0
    648c:	08 95       	ret
    648e:	81 e0       	ldi	r24, 0x01	; 1
		hum_pars.nSamples==hum_pars.cntSamples); 
}
    6490:	08 95       	ret

Disassembly of section .text.SCD30_calc_validate_SI:

00003c82 <SCD30_calc_validate_SI>:

bool SCD30_calc_validate_SI(uint16_t co2_SI, uint16_t temp_SI, uint16_t hum_SI, uint16_t *lowest, uint16_t *highest){
    3c82:	ef 92       	push	r14
    3c84:	ff 92       	push	r15
    3c86:	0f 93       	push	r16
    3c88:	1f 93       	push	r17
    3c8a:	cf 93       	push	r28
    3c8c:	df 93       	push	r29
    3c8e:	eb 01       	movw	r28, r22
    3c90:	7a 01       	movw	r14, r20
    3c92:	d9 01       	movw	r26, r18
    3c94:	f8 01       	movw	r30, r16
	*highest=0;
    3c96:	11 82       	std	Z+1, r1	; 0x01
    3c98:	10 82       	st	Z, r1
	if(co2_SI>(*highest)){
    3c9a:	00 97       	sbiw	r24, 0x00	; 0
    3c9c:	11 f0       	breq	.+4      	; 0x3ca2 <SCD30_calc_validate_SI+0x20>
		*highest=co2_SI;
    3c9e:	91 83       	std	Z+1, r25	; 0x01
    3ca0:	80 83       	st	Z, r24
	}
	if (temp_SI>(*highest)){
    3ca2:	20 81       	ld	r18, Z
    3ca4:	31 81       	ldd	r19, Z+1	; 0x01
    3ca6:	2c 17       	cp	r18, r28
    3ca8:	3d 07       	cpc	r19, r29
    3caa:	10 f4       	brcc	.+4      	; 0x3cb0 <SCD30_calc_validate_SI+0x2e>
		*highest=temp_SI;
    3cac:	d1 83       	std	Z+1, r29	; 0x01
    3cae:	c0 83       	st	Z, r28
	}
	if (hum_SI>(*highest)){
    3cb0:	20 81       	ld	r18, Z
    3cb2:	31 81       	ldd	r19, Z+1	; 0x01
    3cb4:	2e 15       	cp	r18, r14
    3cb6:	3f 05       	cpc	r19, r15
    3cb8:	10 f4       	brcc	.+4      	; 0x3cbe <SCD30_calc_validate_SI+0x3c>
		*highest=hum_SI;
    3cba:	f1 82       	std	Z+1, r15	; 0x01
    3cbc:	e0 82       	st	Z, r14
	}
	*lowest=*highest;
    3cbe:	20 81       	ld	r18, Z
    3cc0:	31 81       	ldd	r19, Z+1	; 0x01
    3cc2:	11 96       	adiw	r26, 0x01	; 1
    3cc4:	3c 93       	st	X, r19
    3cc6:	2e 93       	st	-X, r18
	if(co2_SI!=0 && co2_SI<(*lowest)){
    3cc8:	00 97       	sbiw	r24, 0x00	; 0
    3cca:	31 f0       	breq	.+12     	; 0x3cd8 <SCD30_calc_validate_SI+0x56>
    3ccc:	82 17       	cp	r24, r18
    3cce:	93 07       	cpc	r25, r19
    3cd0:	18 f4       	brcc	.+6      	; 0x3cd8 <SCD30_calc_validate_SI+0x56>
		*lowest=co2_SI;
    3cd2:	11 96       	adiw	r26, 0x01	; 1
    3cd4:	9c 93       	st	X, r25
    3cd6:	8e 93       	st	-X, r24
	}
	if (temp_SI!=0 && temp_SI<(*lowest)){
    3cd8:	20 97       	sbiw	r28, 0x00	; 0
    3cda:	49 f0       	breq	.+18     	; 0x3cee <SCD30_calc_validate_SI+0x6c>
    3cdc:	2d 91       	ld	r18, X+
    3cde:	3c 91       	ld	r19, X
    3ce0:	11 97       	sbiw	r26, 0x01	; 1
    3ce2:	c2 17       	cp	r28, r18
    3ce4:	d3 07       	cpc	r29, r19
    3ce6:	18 f4       	brcc	.+6      	; 0x3cee <SCD30_calc_validate_SI+0x6c>
		*lowest=temp_SI;
    3ce8:	11 96       	adiw	r26, 0x01	; 1
    3cea:	dc 93       	st	X, r29
    3cec:	ce 93       	st	-X, r28
	}
	if(hum_SI!=0 && hum_SI<(*lowest)){
    3cee:	e1 14       	cp	r14, r1
    3cf0:	f1 04       	cpc	r15, r1
    3cf2:	49 f0       	breq	.+18     	; 0x3d06 <SCD30_calc_validate_SI+0x84>
    3cf4:	2d 91       	ld	r18, X+
    3cf6:	3c 91       	ld	r19, X
    3cf8:	11 97       	sbiw	r26, 0x01	; 1
    3cfa:	e2 16       	cp	r14, r18
    3cfc:	f3 06       	cpc	r15, r19
    3cfe:	18 f4       	brcc	.+6      	; 0x3d06 <SCD30_calc_validate_SI+0x84>
		*lowest=hum_SI;
    3d00:	11 96       	adiw	r26, 0x01	; 1
    3d02:	fc 92       	st	X, r15
    3d04:	ee 92       	st	-X, r14
	}
	
	//Check that all sampling intervals are dividable with lowest si
	if(co2_SI % *lowest != 0) return false;
    3d06:	2d 91       	ld	r18, X+
    3d08:	3c 91       	ld	r19, X
    3d0a:	b9 01       	movw	r22, r18
    3d0c:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__udivmodhi4>
    3d10:	89 2b       	or	r24, r25
    3d12:	71 f4       	brne	.+28     	; 0x3d30 <SCD30_calc_validate_SI+0xae>
	if(temp_SI % *lowest != 0) return false;
    3d14:	ce 01       	movw	r24, r28
    3d16:	b9 01       	movw	r22, r18
    3d18:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__udivmodhi4>
    3d1c:	89 2b       	or	r24, r25
    3d1e:	51 f4       	brne	.+20     	; 0x3d34 <SCD30_calc_validate_SI+0xb2>
	if(hum_SI % *lowest != 0) return false;
    3d20:	c7 01       	movw	r24, r14
    3d22:	b9 01       	movw	r22, r18
    3d24:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__udivmodhi4>
    3d28:	89 2b       	or	r24, r25
    3d2a:	31 f0       	breq	.+12     	; 0x3d38 <SCD30_calc_validate_SI+0xb6>
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	05 c0       	rjmp	.+10     	; 0x3d3a <SCD30_calc_validate_SI+0xb8>
	if(hum_SI!=0 && hum_SI<(*lowest)){
		*lowest=hum_SI;
	}
	
	//Check that all sampling intervals are dividable with lowest si
	if(co2_SI % *lowest != 0) return false;
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	03 c0       	rjmp	.+6      	; 0x3d3a <SCD30_calc_validate_SI+0xb8>
	if(temp_SI % *lowest != 0) return false;
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	01 c0       	rjmp	.+2      	; 0x3d3a <SCD30_calc_validate_SI+0xb8>
	if(hum_SI % *lowest != 0) return false;
	return true;
    3d38:	81 e0       	ldi	r24, 0x01	; 1
}
    3d3a:	df 91       	pop	r29
    3d3c:	cf 91       	pop	r28
    3d3e:	1f 91       	pop	r17
    3d40:	0f 91       	pop	r16
    3d42:	ff 90       	pop	r15
    3d44:	ef 90       	pop	r14
    3d46:	08 95       	ret

Disassembly of section .text.read_all_values:

00003420 <read_all_values>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

SCD30_STATUS read_all_values(uint16_t *co2, uint16_t *temp, uint16_t *humidity){
    3420:	cf 92       	push	r12
    3422:	df 92       	push	r13
    3424:	ef 92       	push	r14
    3426:	ff 92       	push	r15
    3428:	0f 93       	push	r16
    342a:	1f 93       	push	r17
    342c:	cf 93       	push	r28
    342e:	df 93       	push	r29
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	62 97       	sbiw	r28, 0x12	; 18
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	8c 01       	movw	r16, r24
    3442:	7b 01       	movw	r14, r22
    3444:	6a 01       	movw	r12, r20
	uint8_t status;
	uint8_t data[18];
	*co2=0xffff;
    3446:	8f ef       	ldi	r24, 0xFF	; 255
    3448:	9f ef       	ldi	r25, 0xFF	; 255
    344a:	f8 01       	movw	r30, r16
    344c:	91 83       	std	Z+1, r25	; 0x01
    344e:	80 83       	st	Z, r24
	*temp=0xffff;
    3450:	fb 01       	movw	r30, r22
    3452:	91 83       	std	Z+1, r25	; 0x01
    3454:	80 83       	st	Z, r24
	*humidity=0xffff;
    3456:	fa 01       	movw	r30, r20
    3458:	91 83       	std	Z+1, r25	; 0x01
    345a:	80 83       	st	Z, r24
	
	//Check values are ready
	if(!SCD30_HAL_data_ready()){
    345c:	0e 94 88 38 	call	0x7110	; 0x7110 <SCD30_HAL_data_ready>
    3460:	81 11       	cpse	r24, r1
    3462:	0d c0       	rjmp	.+26     	; 0x347e <read_all_values+0x5e>
		*co2=0xfffe;
    3464:	8e ef       	ldi	r24, 0xFE	; 254
    3466:	9f ef       	ldi	r25, 0xFF	; 255
    3468:	f8 01       	movw	r30, r16
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	80 83       	st	Z, r24
		*temp=0xfffe;
    346e:	f7 01       	movw	r30, r14
    3470:	91 83       	std	Z+1, r25	; 0x01
    3472:	80 83       	st	Z, r24
		*humidity=0xfffe;
    3474:	f6 01       	movw	r30, r12
    3476:	91 83       	std	Z+1, r25	; 0x01
    3478:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    347a:	83 e0       	ldi	r24, 0x03	; 3
    347c:	4d c0       	rjmp	.+154    	; 0x3518 <read_all_values+0xf8>
	}
	
	//Set read pointer
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    347e:	22 e0       	ldi	r18, 0x02	; 2
    3480:	41 ed       	ldi	r20, 0xD1	; 209
    3482:	59 e0       	ldi	r21, 0x09	; 9
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	81 e6       	ldi	r24, 0x61	; 97
    3488:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    348c:	81 11       	cpse	r24, r1
    348e:	3b c0       	rjmp	.+118    	; 0x3506 <read_all_values+0xe6>
    3490:	8f e3       	ldi	r24, 0x3F	; 63
    3492:	9f e1       	ldi	r25, 0x1F	; 31
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	f1 f7       	brne	.-4      	; 0x3494 <read_all_values+0x74>
    3498:	00 c0       	rjmp	.+0      	; 0x349a <read_all_values+0x7a>
    349a:	00 00       	nop
	
	_delay_ms(4);
	
	//Read values
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 18);
    349c:	42 e1       	ldi	r20, 0x12	; 18
    349e:	be 01       	movw	r22, r28
    34a0:	6f 5f       	subi	r22, 0xFF	; 255
    34a2:	7f 4f       	sbci	r23, 0xFF	; 255
    34a4:	81 e6       	ldi	r24, 0x61	; 97
    34a6:	0e 94 63 32 	call	0x64c6	; 0x64c6 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    34aa:	81 11       	cpse	r24, r1
    34ac:	2e c0       	rjmp	.+92     	; 0x350a <read_all_values+0xea>
	
	//Validate co2
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    34ae:	ce 01       	movw	r24, r28
    34b0:	01 96       	adiw	r24, 0x01	; 1
    34b2:	0e 94 95 32 	call	0x652a	; 0x652a <validate_data>
    34b6:	88 23       	and	r24, r24
    34b8:	51 f1       	breq	.+84     	; 0x350e <read_all_values+0xee>
	*co2=bytes_2_uint(data, 1);
    34ba:	61 e0       	ldi	r22, 0x01	; 1
    34bc:	ce 01       	movw	r24, r28
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	0e 94 9c 28 	call	0x5138	; 0x5138 <bytes_2_uint>
    34c4:	f8 01       	movw	r30, r16
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	80 83       	st	Z, r24
	
	//Validate temp
	if(!validate_data(&data[6])) return SCD30_STATUS_ERROR;
    34ca:	ce 01       	movw	r24, r28
    34cc:	07 96       	adiw	r24, 0x07	; 7
    34ce:	0e 94 95 32 	call	0x652a	; 0x652a <validate_data>
    34d2:	88 23       	and	r24, r24
    34d4:	f1 f0       	breq	.+60     	; 0x3512 <read_all_values+0xf2>
	*temp=bytes_2_uint(&data[6], 10);
    34d6:	6a e0       	ldi	r22, 0x0A	; 10
    34d8:	ce 01       	movw	r24, r28
    34da:	07 96       	adiw	r24, 0x07	; 7
    34dc:	0e 94 9c 28 	call	0x5138	; 0x5138 <bytes_2_uint>
    34e0:	f7 01       	movw	r30, r14
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	80 83       	st	Z, r24
	
	//Validate humidity
	if(!validate_data(&data[12])) return SCD30_STATUS_ERROR;
    34e6:	ce 01       	movw	r24, r28
    34e8:	0d 96       	adiw	r24, 0x0d	; 13
    34ea:	0e 94 95 32 	call	0x652a	; 0x652a <validate_data>
    34ee:	88 23       	and	r24, r24
    34f0:	91 f0       	breq	.+36     	; 0x3516 <read_all_values+0xf6>
	*humidity=bytes_2_uint(&data[12], 10);
    34f2:	6a e0       	ldi	r22, 0x0A	; 10
    34f4:	ce 01       	movw	r24, r28
    34f6:	0d 96       	adiw	r24, 0x0d	; 13
    34f8:	0e 94 9c 28 	call	0x5138	; 0x5138 <bytes_2_uint>
    34fc:	f6 01       	movw	r30, r12
    34fe:	91 83       	std	Z+1, r25	; 0x01
    3500:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	09 c0       	rjmp	.+18     	; 0x3518 <read_all_values+0xf8>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	//Set read pointer
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	07 c0       	rjmp	.+14     	; 0x3518 <read_all_values+0xf8>
	
	_delay_ms(4);
	
	//Read values
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 18);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	05 c0       	rjmp	.+10     	; 0x3518 <read_all_values+0xf8>
	
	//Validate co2
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	03 c0       	rjmp	.+6      	; 0x3518 <read_all_values+0xf8>
	*co2=bytes_2_uint(data, 1);
	
	//Validate temp
	if(!validate_data(&data[6])) return SCD30_STATUS_ERROR;
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <read_all_values+0xf8>
	*temp=bytes_2_uint(&data[6], 10);
	
	//Validate humidity
	if(!validate_data(&data[12])) return SCD30_STATUS_ERROR;
    3516:	81 e0       	ldi	r24, 0x01	; 1
	*humidity=bytes_2_uint(&data[12], 10);
	
	return SCD30_STATUS_SUCCESS;
}
    3518:	62 96       	adiw	r28, 0x12	; 18
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	1f 91       	pop	r17
    352a:	0f 91       	pop	r16
    352c:	ff 90       	pop	r15
    352e:	ef 90       	pop	r14
    3530:	df 90       	pop	r13
    3532:	cf 90       	pop	r12
    3534:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00002bce <vect_SCD_do_sample>:
}

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <vect_SCD_do_sample+0x8>
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <vect_SCD_do_sample+0xa>
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <vect_SCD_do_sample+0xc>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
	uint16_t co2, temp, humidity;
	
	read_all_values(&co2, &temp, &humidity);
    2bde:	ae 01       	movw	r20, r28
    2be0:	4b 5f       	subi	r20, 0xFB	; 251
    2be2:	5f 4f       	sbci	r21, 0xFF	; 255
    2be4:	be 01       	movw	r22, r28
    2be6:	6d 5f       	subi	r22, 0xFD	; 253
    2be8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bea:	ce 01       	movw	r24, r28
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	0e 94 10 1a 	call	0x3420	; 0x3420 <read_all_values>
	
	//Set values 
	if(co2_pars.cntSamples<co2_pars.nSamples &&  si_counter % co2_pars.samplingInterval==0){
    2bf2:	ee e8       	ldi	r30, 0x8E	; 142
    2bf4:	fe e0       	ldi	r31, 0x0E	; 14
    2bf6:	21 81       	ldd	r18, Z+1	; 0x01
    2bf8:	30 81       	ld	r19, Z
    2bfa:	23 17       	cp	r18, r19
    2bfc:	d8 f4       	brcc	.+54     	; 0x2c34 <vect_SCD_do_sample+0x66>
    2bfe:	60 91 92 0e 	lds	r22, 0x0E92	; 0x800e92 <co2_pars+0x4>
    2c02:	70 91 93 0e 	lds	r23, 0x0E93	; 0x800e93 <co2_pars+0x5>
    2c06:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <si_counter>
    2c0a:	90 91 d4 0e 	lds	r25, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2c0e:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__udivmodhi4>
    2c12:	89 2b       	or	r24, r25
    2c14:	79 f4       	brne	.+30     	; 0x2c34 <vect_SCD_do_sample+0x66>
		co2_pars.data[co2_pars.cntSamples++]=co2;
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	41 e0       	ldi	r20, 0x01	; 1
    2c1c:	42 0f       	add	r20, r18
    2c1e:	41 83       	std	Z+1, r20	; 0x01
    2c20:	e2 2f       	mov	r30, r18
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	ee 0f       	add	r30, r30
    2c26:	ff 1f       	adc	r31, r31
    2c28:	e8 0f       	add	r30, r24
    2c2a:	f9 1f       	adc	r31, r25
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	80 83       	st	Z, r24
	}
	if(temp_pars.cntSamples<temp_pars.nSamples &&  si_counter % temp_pars.samplingInterval==0){
    2c34:	e8 e8       	ldi	r30, 0x88	; 136
    2c36:	fe e0       	ldi	r31, 0x0E	; 14
    2c38:	21 81       	ldd	r18, Z+1	; 0x01
    2c3a:	40 81       	ld	r20, Z
    2c3c:	24 17       	cp	r18, r20
    2c3e:	d8 f4       	brcc	.+54     	; 0x2c76 <vect_SCD_do_sample+0xa8>
    2c40:	60 91 8c 0e 	lds	r22, 0x0E8C	; 0x800e8c <temp_pars+0x4>
    2c44:	70 91 8d 0e 	lds	r23, 0x0E8D	; 0x800e8d <temp_pars+0x5>
    2c48:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <si_counter>
    2c4c:	90 91 d4 0e 	lds	r25, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2c50:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__udivmodhi4>
    2c54:	89 2b       	or	r24, r25
    2c56:	79 f4       	brne	.+30     	; 0x2c76 <vect_SCD_do_sample+0xa8>
		temp_pars.data[temp_pars.cntSamples++]=temp;
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	51 e0       	ldi	r21, 0x01	; 1
    2c5e:	52 0f       	add	r21, r18
    2c60:	51 83       	std	Z+1, r21	; 0x01
    2c62:	e2 2f       	mov	r30, r18
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	ee 0f       	add	r30, r30
    2c68:	ff 1f       	adc	r31, r31
    2c6a:	e8 0f       	add	r30, r24
    2c6c:	f9 1f       	adc	r31, r25
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	80 83       	st	Z, r24
	}
	if(hum_pars.cntSamples<hum_pars.nSamples &&  si_counter % hum_pars.samplingInterval==0){
    2c76:	e2 e8       	ldi	r30, 0x82	; 130
    2c78:	fe e0       	ldi	r31, 0x0E	; 14
    2c7a:	21 81       	ldd	r18, Z+1	; 0x01
    2c7c:	10 81       	ld	r17, Z
    2c7e:	21 17       	cp	r18, r17
    2c80:	d8 f4       	brcc	.+54     	; 0x2cb8 <vect_SCD_do_sample+0xea>
    2c82:	60 91 86 0e 	lds	r22, 0x0E86	; 0x800e86 <hum_pars+0x4>
    2c86:	70 91 87 0e 	lds	r23, 0x0E87	; 0x800e87 <hum_pars+0x5>
    2c8a:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <si_counter>
    2c8e:	90 91 d4 0e 	lds	r25, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2c92:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__udivmodhi4>
    2c96:	89 2b       	or	r24, r25
    2c98:	79 f4       	brne	.+30     	; 0x2cb8 <vect_SCD_do_sample+0xea>
		hum_pars.data[hum_pars.cntSamples++]=humidity;
    2c9a:	82 81       	ldd	r24, Z+2	; 0x02
    2c9c:	93 81       	ldd	r25, Z+3	; 0x03
    2c9e:	51 e0       	ldi	r21, 0x01	; 1
    2ca0:	52 0f       	add	r21, r18
    2ca2:	51 83       	std	Z+1, r21	; 0x01
    2ca4:	e2 2f       	mov	r30, r18
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	e8 0f       	add	r30, r24
    2cae:	f9 1f       	adc	r31, r25
    2cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb4:	91 83       	std	Z+1, r25	; 0x01
    2cb6:	80 83       	st	Z, r24
	}
	
	//Wrap si_counter if at max
	si_counter+=lowest_si;
    2cb8:	60 91 d3 0e 	lds	r22, 0x0ED3	; 0x800ed3 <si_counter>
    2cbc:	70 91 d4 0e 	lds	r23, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2cc0:	80 91 d7 0e 	lds	r24, 0x0ED7	; 0x800ed7 <lowest_si>
    2cc4:	90 91 d8 0e 	lds	r25, 0x0ED8	; 0x800ed8 <lowest_si+0x1>
    2cc8:	86 0f       	add	r24, r22
    2cca:	97 1f       	adc	r25, r23
    2ccc:	90 93 d4 0e 	sts	0x0ED4, r25	; 0x800ed4 <si_counter+0x1>
    2cd0:	80 93 d3 0e 	sts	0x0ED3, r24	; 0x800ed3 <si_counter>
	if(si_counter==highest_si){
    2cd4:	60 91 d5 0e 	lds	r22, 0x0ED5	; 0x800ed5 <highest_si>
    2cd8:	70 91 d6 0e 	lds	r23, 0x0ED6	; 0x800ed6 <highest_si+0x1>
    2cdc:	86 17       	cp	r24, r22
    2cde:	97 07       	cpc	r25, r23
    2ce0:	21 f4       	brne	.+8      	; 0x2cea <vect_SCD_do_sample+0x11c>
		si_counter=0;
    2ce2:	10 92 d4 0e 	sts	0x0ED4, r1	; 0x800ed4 <si_counter+0x1>
    2ce6:	10 92 d3 0e 	sts	0x0ED3, r1	; 0x800ed3 <si_counter>
	}
	
	//Stop sampling if all values are sampled
	if(
		co2_pars.cntSamples==co2_pars.nSamples && 
    2cea:	80 91 8f 0e 	lds	r24, 0x0E8F	; 0x800e8f <co2_pars+0x1>
	if(si_counter==highest_si){
		si_counter=0;
	}
	
	//Stop sampling if all values are sampled
	if(
    2cee:	38 13       	cpse	r19, r24
    2cf0:	0a c0       	rjmp	.+20     	; 0x2d06 <vect_SCD_do_sample+0x138>
		co2_pars.cntSamples==co2_pars.nSamples && 
		temp_pars.cntSamples==temp_pars.nSamples &&
    2cf2:	80 91 89 0e 	lds	r24, 0x0E89	; 0x800e89 <temp_pars+0x1>
		si_counter=0;
	}
	
	//Stop sampling if all values are sampled
	if(
		co2_pars.cntSamples==co2_pars.nSamples && 
    2cf6:	48 13       	cpse	r20, r24
    2cf8:	06 c0       	rjmp	.+12     	; 0x2d06 <vect_SCD_do_sample+0x138>
		temp_pars.cntSamples==temp_pars.nSamples &&
		hum_pars.cntSamples==hum_pars.nSamples
    2cfa:	80 91 83 0e 	lds	r24, 0x0E83	; 0x800e83 <hum_pars+0x1>
	}
	
	//Stop sampling if all values are sampled
	if(
		co2_pars.cntSamples==co2_pars.nSamples && 
		temp_pars.cntSamples==temp_pars.nSamples &&
    2cfe:	18 13       	cpse	r17, r24
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <vect_SCD_do_sample+0x138>
		hum_pars.cntSamples==hum_pars.nSamples
	){
		TC1_HAL_stop();			
    2d02:	0e 94 28 38 	call	0x7050	; 0x7050 <TC1_HAL_stop>
	}
}
    2d06:	26 96       	adiw	r28, 0x06	; 6
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	de bf       	out	0x3e, r29	; 62
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	cd bf       	out	0x3d, r28	; 61
    2d12:	df 91       	pop	r29
    2d14:	cf 91       	pop	r28
    2d16:	1f 91       	pop	r17
    2d18:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

000052c8 <SCD30_start_sampling>:
	hum_pars.nSamples=nSamples;
	hum_pars.samplingInterval=samplingInterval;
	hum_pars.data=data;
}

bool SCD30_start_sampling(){
    52c8:	0f 93       	push	r16
    52ca:	1f 93       	push	r17
    52cc:	cf 93       	push	r28
	//Calculate SIs
	bool valid=SCD30_calc_validate_SI(
    52ce:	40 91 86 0e 	lds	r20, 0x0E86	; 0x800e86 <hum_pars+0x4>
    52d2:	50 91 87 0e 	lds	r21, 0x0E87	; 0x800e87 <hum_pars+0x5>
    52d6:	60 91 8c 0e 	lds	r22, 0x0E8C	; 0x800e8c <temp_pars+0x4>
    52da:	70 91 8d 0e 	lds	r23, 0x0E8D	; 0x800e8d <temp_pars+0x5>
    52de:	05 ed       	ldi	r16, 0xD5	; 213
    52e0:	1e e0       	ldi	r17, 0x0E	; 14
    52e2:	27 ed       	ldi	r18, 0xD7	; 215
    52e4:	3e e0       	ldi	r19, 0x0E	; 14
    52e6:	80 91 92 0e 	lds	r24, 0x0E92	; 0x800e92 <co2_pars+0x4>
    52ea:	90 91 93 0e 	lds	r25, 0x0E93	; 0x800e93 <co2_pars+0x5>
    52ee:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SCD30_calc_validate_SI>
	temp_pars.samplingInterval,
	hum_pars.samplingInterval,
	&lowest_si,
	&highest_si
	);
	if(!valid) return false;
    52f2:	88 23       	and	r24, r24
    52f4:	91 f0       	breq	.+36     	; 0x531a <SCD30_start_sampling+0x52>
	
	//Wait for first sampling
	while(!SCD30_HAL_data_ready()){};
    52f6:	0e 94 88 38 	call	0x7110	; 0x7110 <SCD30_HAL_data_ready>
    52fa:	c8 2f       	mov	r28, r24
    52fc:	88 23       	and	r24, r24
    52fe:	d9 f3       	breq	.-10     	; 0x52f6 <SCD30_start_sampling+0x2e>
	
	//Set timer
	TC1_HAL_init(lowest_si, &vect_SCD_do_sample);
    5300:	67 ee       	ldi	r22, 0xE7	; 231
    5302:	75 e1       	ldi	r23, 0x15	; 21
    5304:	80 91 d7 0e 	lds	r24, 0x0ED7	; 0x800ed7 <lowest_si>
    5308:	90 91 d8 0e 	lds	r25, 0x0ED8	; 0x800ed8 <lowest_si+0x1>
    530c:	0e 94 8e 31 	call	0x631c	; 0x631c <TC1_HAL_init>
	
	//Take first sampling
	vect_SCD_do_sample();
    5310:	0e 94 e7 15 	call	0x2bce	; 0x2bce <vect_SCD_do_sample>
	
	//Start timer
	TC1_HAL_start();
    5314:	0e 94 22 38 	call	0x7044	; 0x7044 <TC1_HAL_start>
	return true;
    5318:	01 c0       	rjmp	.+2      	; 0x531c <SCD30_start_sampling+0x54>
	temp_pars.samplingInterval,
	hum_pars.samplingInterval,
	&lowest_si,
	&highest_si
	);
	if(!valid) return false;
    531a:	c0 e0       	ldi	r28, 0x00	; 0
	vect_SCD_do_sample();
	
	//Start timer
	TC1_HAL_start();
	return true;
}
    531c:	8c 2f       	mov	r24, r28
    531e:	cf 91       	pop	r28
    5320:	1f 91       	pop	r17
    5322:	0f 91       	pop	r16
    5324:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

0000655c <SCD30_get_reading>:
	if(temp_SI % *lowest != 0) return false;
	if(hum_SI % *lowest != 0) return false;
	return true;
}

SCD30_STATUS SCD30_get_reading(uint16_t *co2, uint16_t *temp, uint16_t *humidity){
    655c:	ef 92       	push	r14
    655e:	ff 92       	push	r15
    6560:	0f 93       	push	r16
    6562:	1f 93       	push	r17
    6564:	cf 93       	push	r28
    6566:	df 93       	push	r29
    6568:	ec 01       	movw	r28, r24
    656a:	8b 01       	movw	r16, r22
    656c:	7a 01       	movw	r14, r20
	while(!SCD30_HAL_data_ready()){};
    656e:	0e 94 88 38 	call	0x7110	; 0x7110 <SCD30_HAL_data_ready>
    6572:	88 23       	and	r24, r24
    6574:	e1 f3       	breq	.-8      	; 0x656e <SCD30_get_reading+0x12>
	
	return read_all_values(co2, temp, humidity);
    6576:	a7 01       	movw	r20, r14
    6578:	b8 01       	movw	r22, r16
    657a:	ce 01       	movw	r24, r28
    657c:	0e 94 10 1a 	call	0x3420	; 0x3420 <read_all_values>
}
    6580:	df 91       	pop	r29
    6582:	cf 91       	pop	r28
    6584:	1f 91       	pop	r17
    6586:	0f 91       	pop	r16
    6588:	ff 90       	pop	r15
    658a:	ef 90       	pop	r14
    658c:	08 95       	ret

Disassembly of section .text.parse_cmd:

00006740 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    6740:	fc 01       	movw	r30, r24
    6742:	80 81       	ld	r24, Z
    6744:	82 37       	cpi	r24, 0x72	; 114
    6746:	51 f0       	breq	.+20     	; 0x675c <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    6748:	87 37       	cpi	r24, 0x77	; 119
    674a:	51 f0       	breq	.+20     	; 0x6760 <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    674c:	83 36       	cpi	r24, 0x63	; 99
    674e:	51 f0       	breq	.+20     	; 0x6764 <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    6750:	83 37       	cpi	r24, 0x73	; 115
    6752:	51 f0       	breq	.+20     	; 0x6768 <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    6754:	81 37       	cpi	r24, 0x71	; 113
    6756:	51 f4       	brne	.+20     	; 0x676c <parse_cmd+0x2c>
    6758:	84 e0       	ldi	r24, 0x04	; 4
    675a:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    675c:	87 e0       	ldi	r24, 0x07	; 7
    675e:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    6760:	88 e0       	ldi	r24, 0x08	; 8
    6762:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    6764:	89 e0       	ldi	r24, 0x09	; 9
    6766:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    6768:	8a e0       	ldi	r24, 0x0A	; 10
    676a:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    676c:	85 e0       	ldi	r24, 0x05	; 5
}
    676e:	08 95       	ret

Disassembly of section .text.validate_cmd:

000055f6 <validate_cmd>:

static bool validate_cmd(char msg[]){
    55f6:	cf 93       	push	r28
    55f8:	df 93       	push	r29
    55fa:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    55fc:	bc 01       	movw	r22, r24
    55fe:	80 e8       	ldi	r24, 0x80	; 128
    5600:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    5604:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    5606:	fc 01       	movw	r30, r24
    5608:	31 97       	sbiw	r30, 0x01	; 1
    560a:	ec 0f       	add	r30, r28
    560c:	fd 1f       	adc	r31, r29
    560e:	80 81       	ld	r24, Z
    5610:	80 32       	cpi	r24, 0x20	; 32
    5612:	b1 f0       	breq	.+44     	; 0x5640 <validate_cmd+0x4a>
    5614:	20 e0       	ldi	r18, 0x00	; 0
    5616:	30 e0       	ldi	r19, 0x00	; 0
    5618:	40 e0       	ldi	r20, 0x00	; 0
    561a:	0d c0       	rjmp	.+26     	; 0x5636 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    561c:	fe 01       	movw	r30, r28
    561e:	e2 0f       	add	r30, r18
    5620:	f3 1f       	adc	r31, r19
    5622:	90 81       	ld	r25, Z
    5624:	90 32       	cpi	r25, 0x20	; 32
    5626:	21 f4       	brne	.+8      	; 0x5630 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    5628:	41 11       	cpse	r20, r1
    562a:	0c c0       	rjmp	.+24     	; 0x5644 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    562c:	41 e0       	ldi	r20, 0x01	; 1
    562e:	01 c0       	rjmp	.+2      	; 0x5632 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    5630:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    5632:	2f 5f       	subi	r18, 0xFF	; 255
    5634:	3f 4f       	sbci	r19, 0xFF	; 255
    5636:	26 17       	cp	r18, r22
    5638:	37 07       	cpc	r19, r23
    563a:	80 f3       	brcs	.-32     	; 0x561c <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	03 c0       	rjmp	.+6      	; 0x5646 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    5640:	80 e0       	ldi	r24, 0x00	; 0
    5642:	01 c0       	rjmp	.+2      	; 0x5646 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    5644:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    5646:	df 91       	pop	r29
    5648:	cf 91       	pop	r28
    564a:	08 95       	ret

Disassembly of section .text.CONF_enter:

00002e5a <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    2e5a:	cf 93       	push	r28
	uart1_hal_init();
    2e5c:	0e 94 6f 30 	call	0x60de	; 0x60de <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    2e60:	c0 e0       	ldi	r28, 0x00	; 0
    2e62:	0d c0       	rjmp	.+26     	; 0x2e7e <CONF_enter+0x24>
				TC2_HAL_init();
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    2e64:	c2 e0       	ldi	r28, 0x02	; 2
    2e66:	0b c0       	rjmp	.+22     	; 0x2e7e <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    2e68:	c5 e0       	ldi	r28, 0x05	; 5
    2e6a:	09 c0       	rjmp	.+18     	; 0x2e7e <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    2e6c:	c6 e0       	ldi	r28, 0x06	; 6
    2e6e:	07 c0       	rjmp	.+14     	; 0x2e7e <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2e70:	c5 e0       	ldi	r28, 0x05	; 5
    2e72:	05 c0       	rjmp	.+10     	; 0x2e7e <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2e74:	c5 e0       	ldi	r28, 0x05	; 5
    2e76:	03 c0       	rjmp	.+6      	; 0x2e7e <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    2e78:	c5 e0       	ldi	r28, 0x05	; 5
    2e7a:	01 c0       	rjmp	.+2      	; 0x2e7e <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2e7c:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    2e7e:	ec 2f       	mov	r30, r28
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	ec 30       	cpi	r30, 0x0C	; 12
    2e84:	f1 05       	cpc	r31, r1
    2e86:	d8 f7       	brcc	.-10     	; 0x2e7e <CONF_enter+0x24>
    2e88:	e5 5b       	subi	r30, 0xB5	; 181
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	0c 94 7c 38 	jmp	0x70f8	; 0x70f8 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    2e90:	69 e7       	ldi	r22, 0x79	; 121
    2e92:	77 e0       	ldi	r23, 0x07	; 7
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    2e9a:	6f e9       	ldi	r22, 0x9F	; 159
    2e9c:	77 e0       	ldi	r23, 0x07	; 7
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				TC2_HAL_init();
    2ea4:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <TC2_HAL_init>
				if(!init_methane_SCD30()){
    2ea8:	0e 94 50 34 	call	0x68a0	; 0x68a0 <init_methane_SCD30>
    2eac:	81 11       	cpse	r24, r1
    2eae:	da cf       	rjmp	.-76     	; 0x2e64 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    2eb0:	61 ec       	ldi	r22, 0xC1	; 193
    2eb2:	77 e0       	ldi	r23, 0x07	; 7
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
					state=CONF_EXIT;
    2eba:	c4 e0       	ldi	r28, 0x04	; 4
    2ebc:	e0 cf       	rjmp	.-64     	; 0x2e7e <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    2ebe:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <uart1_hal_message_ready>
    2ec2:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    2ec4:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    2ec6:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <uart1_hal_rx_full>
    2eca:	81 11       	cpse	r24, r1
    2ecc:	cd cf       	rjmp	.-102    	; 0x2e68 <CONF_enter+0xe>
    2ece:	d7 cf       	rjmp	.-82     	; 0x2e7e <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    2ed0:	82 e7       	ldi	r24, 0x72	; 114
    2ed2:	97 e0       	ldi	r25, 0x07	; 7
    2ed4:	0e 94 3c 34 	call	0x6878	; 0x6878 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    2ed8:	82 e7       	ldi	r24, 0x72	; 114
    2eda:	97 e0       	ldi	r25, 0x07	; 7
    2edc:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <validate_cmd>
    2ee0:	88 23       	and	r24, r24
    2ee2:	21 f2       	breq	.-120    	; 0x2e6c <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    2ee4:	82 e7       	ldi	r24, 0x72	; 114
    2ee6:	97 e0       	ldi	r25, 0x07	; 7
    2ee8:	0e 94 a0 33 	call	0x6740	; 0x6740 <parse_cmd>
    2eec:	c8 2f       	mov	r28, r24
    2eee:	c7 cf       	rjmp	.-114    	; 0x2e7e <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    2ef0:	62 e7       	ldi	r22, 0x72	; 114
    2ef2:	77 e0       	ldi	r23, 0x07	; 7
    2ef4:	80 e8       	ldi	r24, 0x80	; 128
    2ef6:	4a ea       	ldi	r20, 0xAA	; 170
    2ef8:	56 e0       	ldi	r21, 0x06	; 6
    2efa:	0e 94 be 0b 	call	0x177c	; 0x177c <handle_read>
    2efe:	88 23       	and	r24, r24
    2f00:	09 f4       	brne	.+2      	; 0x2f04 <CONF_enter+0xaa>
    2f02:	b6 cf       	rjmp	.-148    	; 0x2e70 <CONF_enter+0x16>
					state=CONF_REPLY;
    2f04:	cb e0       	ldi	r28, 0x0B	; 11
    2f06:	bb cf       	rjmp	.-138    	; 0x2e7e <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    2f08:	62 e7       	ldi	r22, 0x72	; 114
    2f0a:	77 e0       	ldi	r23, 0x07	; 7
    2f0c:	80 e8       	ldi	r24, 0x80	; 128
    2f0e:	4a ea       	ldi	r20, 0xAA	; 170
    2f10:	56 e0       	ldi	r21, 0x06	; 6
    2f12:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <handle_write>
    2f16:	88 23       	and	r24, r24
    2f18:	09 f4       	brne	.+2      	; 0x2f1c <CONF_enter+0xc2>
    2f1a:	ac cf       	rjmp	.-168    	; 0x2e74 <CONF_enter+0x1a>
					state=CONF_REPLY;
    2f1c:	cb e0       	ldi	r28, 0x0B	; 11
    2f1e:	af cf       	rjmp	.-162    	; 0x2e7e <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    2f20:	62 e7       	ldi	r22, 0x72	; 114
    2f22:	77 e0       	ldi	r23, 0x07	; 7
    2f24:	80 e8       	ldi	r24, 0x80	; 128
    2f26:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <CONNECT>
    2f2a:	88 23       	and	r24, r24
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <CONF_enter+0xd6>
    2f2e:	a4 cf       	rjmp	.-184    	; 0x2e78 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    2f30:	c2 e0       	ldi	r28, 0x02	; 2
    2f32:	a5 cf       	rjmp	.-182    	; 0x2e7e <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
    2f34:	62 e7       	ldi	r22, 0x72	; 114
    2f36:	77 e0       	ldi	r23, 0x07	; 7
    2f38:	80 e8       	ldi	r24, 0x80	; 128
    2f3a:	4a ea       	ldi	r20, 0xAA	; 170
    2f3c:	56 e0       	ldi	r21, 0x06	; 6
    2f3e:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <handle_sensor>
    2f42:	88 23       	and	r24, r24
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <CONF_enter+0xee>
    2f46:	9a cf       	rjmp	.-204    	; 0x2e7c <CONF_enter+0x22>
					state=CONF_REPLY;
    2f48:	cb e0       	ldi	r28, 0x0B	; 11
    2f4a:	99 cf       	rjmp	.-206    	; 0x2e7e <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    2f4c:	6a ea       	ldi	r22, 0xAA	; 170
    2f4e:	76 e0       	ldi	r23, 0x06	; 6
    2f50:	80 e8       	ldi	r24, 0x80	; 128
    2f52:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2f56:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2f58:	92 cf       	rjmp	.-220    	; 0x2e7e <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    2f5a:	60 ee       	ldi	r22, 0xE0	; 224
    2f5c:	77 e0       	ldi	r23, 0x07	; 7
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2f64:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2f66:	8b cf       	rjmp	.-234    	; 0x2e7e <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    2f68:	6a ee       	ldi	r22, 0xEA	; 234
    2f6a:	77 e0       	ldi	r23, 0x07	; 7
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2f72:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2f74:	84 cf       	rjmp	.-248    	; 0x2e7e <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    2f76:	0e 94 97 38 	call	0x712e	; 0x712e <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    2f7a:	67 ef       	ldi	r22, 0xF7	; 247
    2f7c:	77 e0       	ldi	r23, 0x07	; 7
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    2f84:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2f86:	7b cf       	rjmp	.-266    	; 0x2e7e <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    2f88:	6d e1       	ldi	r22, 0x1D	; 29
    2f8a:	78 e0       	ldi	r23, 0x08	; 8
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				return;
		}
	}
}
    2f92:	cf 91       	pop	r28
    2f94:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00004f92 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    4f92:	cf 92       	push	r12
    4f94:	df 92       	push	r13
    4f96:	ef 92       	push	r14
    4f98:	0f 93       	push	r16
    4f9a:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    4f9c:	6c 01       	movw	r12, r24
    4f9e:	20 e8       	ldi	r18, 0x80	; 128
    4fa0:	e2 2e       	mov	r14, r18
    4fa2:	04 e0       	ldi	r16, 0x04	; 4
    4fa4:	10 e0       	ldi	r17, 0x00	; 0
    4fa6:	25 e2       	ldi	r18, 0x25	; 37
    4fa8:	38 e0       	ldi	r19, 0x08	; 8
    4faa:	40 e0       	ldi	r20, 0x00	; 0
    4fac:	8e 2d       	mov	r24, r14
    4fae:	b6 01       	movw	r22, r12
    4fb0:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <strncmp>
    4fb4:	89 2b       	or	r24, r25
    4fb6:	c1 f0       	breq	.+48     	; 0x4fe8 <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    4fb8:	05 e0       	ldi	r16, 0x05	; 5
    4fba:	10 e0       	ldi	r17, 0x00	; 0
    4fbc:	2a e2       	ldi	r18, 0x2A	; 42
    4fbe:	38 e0       	ldi	r19, 0x08	; 8
    4fc0:	40 e0       	ldi	r20, 0x00	; 0
    4fc2:	8e 2d       	mov	r24, r14
    4fc4:	b6 01       	movw	r22, r12
    4fc6:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <strncmp>
    4fca:	89 2b       	or	r24, r25
    4fcc:	79 f0       	breq	.+30     	; 0x4fec <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    4fce:	04 e0       	ldi	r16, 0x04	; 4
    4fd0:	10 e0       	ldi	r17, 0x00	; 0
    4fd2:	20 e3       	ldi	r18, 0x30	; 48
    4fd4:	38 e0       	ldi	r19, 0x08	; 8
    4fd6:	40 e0       	ldi	r20, 0x00	; 0
    4fd8:	8e 2d       	mov	r24, r14
    4fda:	b6 01       	movw	r22, r12
    4fdc:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <strncmp>
    4fe0:	89 2b       	or	r24, r25
    4fe2:	31 f4       	brne	.+12     	; 0x4ff0 <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    4fe4:	85 e0       	ldi	r24, 0x05	; 5
    4fe6:	05 c0       	rjmp	.+10     	; 0x4ff2 <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    4fe8:	86 e0       	ldi	r24, 0x06	; 6
    4fea:	03 c0       	rjmp	.+6      	; 0x4ff2 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    4fec:	84 e0       	ldi	r24, 0x04	; 4
    4fee:	01 c0       	rjmp	.+2      	; 0x4ff2 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    4ff0:	83 e0       	ldi	r24, 0x03	; 3
    4ff2:	1f 91       	pop	r17
    4ff4:	0f 91       	pop	r16
    4ff6:	ef 90       	pop	r14
    4ff8:	df 90       	pop	r13
    4ffa:	cf 90       	pop	r12
    4ffc:	08 95       	ret

Disassembly of section .text.CON_RN2483:

0000265c <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    265c:	6f 92       	push	r6
    265e:	7f 92       	push	r7
    2660:	8f 92       	push	r8
    2662:	cf 92       	push	r12
    2664:	df 92       	push	r13
    2666:	ef 92       	push	r14
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    266c:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    266e:	ec 2f       	mov	r30, r28
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	e7 30       	cpi	r30, 0x07	; 7
    2674:	f1 05       	cpc	r31, r1
    2676:	d8 f7       	brcc	.-10     	; 0x266e <CON_RN2483+0x12>
    2678:	e9 5a       	subi	r30, 0xA9	; 169
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	0c 94 7c 38 	jmp	0x70f8	; 0x70f8 <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    2680:	0e 94 51 30 	call	0x60a2	; 0x60a2 <uart0_hal_init>
				rn2483_init();
    2684:	0e 94 c8 38 	call	0x7190	; 0x7190 <rn2483_init>
				LM_reset_module();
    2688:	0e 94 0b 39 	call	0x7216	; 0x7216 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    268c:	65 e3       	ldi	r22, 0x35	; 53
    268e:	78 e0       	ldi	r23, 0x08	; 8
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				state=CL_READ_MSG;
    2696:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2698:	ea cf       	rjmp	.-44     	; 0x266e <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    269a:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <uart1_hal_message_ready>
    269e:	88 23       	and	r24, r24
    26a0:	31 f3       	breq	.-52     	; 0x266e <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    26a2:	82 e7       	ldi	r24, 0x72	; 114
    26a4:	97 e0       	ldi	r25, 0x07	; 7
    26a6:	0e 94 3c 34 	call	0x6878	; 0x6878 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    26aa:	c2 e0       	ldi	r28, 0x02	; 2
    26ac:	e0 cf       	rjmp	.-64     	; 0x266e <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    26ae:	82 e7       	ldi	r24, 0x72	; 114
    26b0:	97 e0       	ldi	r25, 0x07	; 7
    26b2:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <CON_RN2483_parse>
    26b6:	c8 2f       	mov	r28, r24
			break;
    26b8:	da cf       	rjmp	.-76     	; 0x266e <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    26ba:	82 e7       	ldi	r24, 0x72	; 114
    26bc:	97 e0       	ldi	r25, 0x07	; 7
    26be:	6c 01       	movw	r12, r24
    26c0:	20 e8       	ldi	r18, 0x80	; 128
    26c2:	e2 2e       	mov	r14, r18
    26c4:	2f 93       	push	r18
    26c6:	df 92       	push	r13
    26c8:	8f 93       	push	r24
    26ca:	8b e6       	ldi	r24, 0x6B	; 107
    26cc:	98 e0       	ldi	r25, 0x08	; 8
    26ce:	a0 e0       	ldi	r26, 0x00	; 0
    26d0:	af 93       	push	r26
    26d2:	9f 93       	push	r25
    26d4:	8f 93       	push	r24
    26d6:	ca ea       	ldi	r28, 0xAA	; 170
    26d8:	d6 e0       	ldi	r29, 0x06	; 6
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
				uart1_hal_send_string(cnf_reply);
    26e2:	3e 01       	movw	r6, r28
    26e4:	20 e8       	ldi	r18, 0x80	; 128
    26e6:	82 2e       	mov	r8, r18
    26e8:	88 2d       	mov	r24, r8
    26ea:	b3 01       	movw	r22, r6
    26ec:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    26f0:	ae 01       	movw	r20, r28
    26f2:	6c 2d       	mov	r22, r12
    26f4:	7d 2d       	mov	r23, r13
    26f6:	8e 2d       	mov	r24, r14
    26f8:	0e 94 0e 39 	call	0x721c	; 0x721c <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    26fc:	88 2d       	mov	r24, r8
    26fe:	b3 01       	movw	r22, r6
    2700:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    2704:	8d b7       	in	r24, 0x3d	; 61
    2706:	9e b7       	in	r25, 0x3e	; 62
    2708:	08 96       	adiw	r24, 0x08	; 8
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	9e bf       	out	0x3e, r25	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    2714:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2716:	ab cf       	rjmp	.-170    	; 0x266e <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    2718:	81 e7       	ldi	r24, 0x71	; 113
    271a:	98 e0       	ldi	r25, 0x08	; 8
    271c:	a0 e0       	ldi	r26, 0x00	; 0
    271e:	af 93       	push	r26
    2720:	9f 93       	push	r25
    2722:	8f 93       	push	r24
    2724:	8b e6       	ldi	r24, 0x6B	; 107
    2726:	98 e0       	ldi	r25, 0x08	; 8
    2728:	a0 e0       	ldi	r26, 0x00	; 0
    272a:	af 93       	push	r26
    272c:	9f 93       	push	r25
    272e:	8f 93       	push	r24
    2730:	ca ea       	ldi	r28, 0xAA	; 170
    2732:	d6 e0       	ldi	r29, 0x06	; 6
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
				uart1_hal_send_string(cnf_reply);
    273c:	be 01       	movw	r22, r28
    273e:	80 e8       	ldi	r24, 0x80	; 128
    2740:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
    2744:	8f e7       	ldi	r24, 0x7F	; 127
    2746:	98 e3       	ldi	r25, 0x38	; 56
    2748:	21 e0       	ldi	r18, 0x01	; 1
    274a:	81 50       	subi	r24, 0x01	; 1
    274c:	90 40       	sbci	r25, 0x00	; 0
    274e:	20 40       	sbci	r18, 0x00	; 0
    2750:	e1 f7       	brne	.-8      	; 0x274a <CON_RN2483+0xee>
    2752:	00 c0       	rjmp	.+0      	; 0x2754 <CON_RN2483+0xf8>
    2754:	00 00       	nop
				_delay_ms(50);
				LM_send_break();
    2756:	0e 94 11 39 	call	0x7222	; 0x7222 <LM_send_break>
				state=CL_READ_MSG;
			break;
    275a:	8d b7       	in	r24, 0x3d	; 61
    275c:	9e b7       	in	r25, 0x3e	; 62
    275e:	08 96       	adiw	r24, 0x08	; 8
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	9e bf       	out	0x3e, r25	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	8d bf       	out	0x3d, r24	; 61
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break();
				state=CL_READ_MSG;
    276a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    276c:	80 cf       	rjmp	.-256    	; 0x266e <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    276e:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <uart0_hal_message_ready>
    2772:	88 23       	and	r24, r24
    2774:	29 f0       	breq	.+10     	; 0x2780 <CON_RN2483+0x124>
					uart0_hal_read_message_as_str(cnf_reply);
    2776:	8a ea       	ldi	r24, 0xAA	; 170
    2778:	96 e0       	ldi	r25, 0x06	; 6
    277a:	0e 94 28 34 	call	0x6850	; 0x6850 <uart0_hal_read_message_as_str>
    277e:	09 c0       	rjmp	.+18     	; 0x2792 <CON_RN2483+0x136>
				}else{
					strcpy(cnf_reply, "null");
    2780:	25 e0       	ldi	r18, 0x05	; 5
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4c e7       	ldi	r20, 0x7C	; 124
    2786:	58 e0       	ldi	r21, 0x08	; 8
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	8a ea       	ldi	r24, 0xAA	; 170
    278c:	96 e0       	ldi	r25, 0x06	; 6
    278e:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    2792:	6a ea       	ldi	r22, 0xAA	; 170
    2794:	76 e0       	ldi	r23, 0x06	; 6
    2796:	80 e8       	ldi	r24, 0x80	; 128
    2798:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				state=CL_READ_MSG;
    279c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    279e:	67 cf       	rjmp	.-306    	; 0x266e <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    27a0:	0e 94 92 38 	call	0x7124	; 0x7124 <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    27a4:	61 e8       	ldi	r22, 0x81	; 129
    27a6:	78 e0       	ldi	r23, 0x08	; 8
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	ef 90       	pop	r14
    27b6:	df 90       	pop	r13
    27b8:	cf 90       	pop	r12
    27ba:	8f 90       	pop	r8
    27bc:	7f 90       	pop	r7
    27be:	6f 90       	pop	r6
    27c0:	08 95       	ret

Disassembly of section .text.CONNECT:

000056a0 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    56a0:	cf 93       	push	r28
    56a2:	df 93       	push	r29
    56a4:	cd b7       	in	r28, 0x3d	; 61
    56a6:	de b7       	in	r29, 0x3e	; 62
    56a8:	64 97       	sbiw	r28, 0x14	; 20
    56aa:	0f b6       	in	r0, 0x3f	; 63
    56ac:	f8 94       	cli
    56ae:	de bf       	out	0x3e, r29	; 62
    56b0:	0f be       	out	0x3f, r0	; 63
    56b2:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    56b4:	21 e0       	ldi	r18, 0x01	; 1
    56b6:	ae 01       	movw	r20, r28
    56b8:	4f 5f       	subi	r20, 0xFF	; 255
    56ba:	5f 4f       	sbci	r21, 0xFF	; 255
    56bc:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    56c0:	88 23       	and	r24, r24
    56c2:	79 f0       	breq	.+30     	; 0x56e2 <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    56c4:	be 01       	movw	r22, r28
    56c6:	6f 5f       	subi	r22, 0xFF	; 255
    56c8:	7f 4f       	sbci	r23, 0xFF	; 255
    56ca:	80 e8       	ldi	r24, 0x80	; 128
    56cc:	21 ea       	ldi	r18, 0xA1	; 161
    56ce:	38 e0       	ldi	r19, 0x08	; 8
    56d0:	40 e0       	ldi	r20, 0x00	; 0
    56d2:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    56d6:	89 2b       	or	r24, r25
    56d8:	19 f4       	brne	.+6      	; 0x56e0 <CONNECT+0x40>
		return CON_RN2483();
    56da:	0e 94 2e 13 	call	0x265c	; 0x265c <CON_RN2483>
    56de:	01 c0       	rjmp	.+2      	; 0x56e2 <CONNECT+0x42>
	}else{
		return false;
    56e0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    56e2:	64 96       	adiw	r28, 0x14	; 20
    56e4:	0f b6       	in	r0, 0x3f	; 63
    56e6:	f8 94       	cli
    56e8:	de bf       	out	0x3e, r29	; 62
    56ea:	0f be       	out	0x3f, r0	; 63
    56ec:	cd bf       	out	0x3d, r28	; 61
    56ee:	df 91       	pop	r29
    56f0:	cf 91       	pop	r28
    56f2:	08 95       	ret

Disassembly of section .text.read_cols:

00003e0a <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    3e0a:	ff 92       	push	r15
    3e0c:	0f 93       	push	r16
    3e0e:	1f 93       	push	r17
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	cd b7       	in	r28, 0x3d	; 61
    3e16:	de b7       	in	r29, 0x3e	; 62
    3e18:	cb 54       	subi	r28, 0x4B	; 75
    3e1a:	d1 09       	sbc	r29, r1
    3e1c:	0f b6       	in	r0, 0x3f	; 63
    3e1e:	f8 94       	cli
    3e20:	de bf       	out	0x3e, r29	; 62
    3e22:	0f be       	out	0x3f, r0	; 63
    3e24:	cd bf       	out	0x3d, r28	; 61
    3e26:	8c 01       	movw	r16, r24
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    3e28:	6b e4       	ldi	r22, 0x4B	; 75
    3e2a:	ce 01       	movw	r24, r28
    3e2c:	01 96       	adiw	r24, 0x01	; 1
    3e2e:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <EM_get_collections>
	strcpy(res, "End of collections");
    3e32:	23 e1       	ldi	r18, 0x13	; 19
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	44 e6       	ldi	r20, 0x64	; 100
    3e38:	52 e0       	ldi	r21, 0x02	; 2
    3e3a:	60 e0       	ldi	r22, 0x00	; 0
    3e3c:	c8 01       	movw	r24, r16
    3e3e:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    3e42:	f1 2c       	mov	r15, r1
    3e44:	30 c0       	rjmp	.+96     	; 0x3ea6 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u", i+1, cols[i].samplings, cols[i].samplingInterval);
    3e46:	8f 2d       	mov	r24, r15
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	ee 0f       	add	r30, r30
    3e4e:	ff 1f       	adc	r31, r31
    3e50:	ee 0f       	add	r30, r30
    3e52:	ff 1f       	adc	r31, r31
    3e54:	e8 0f       	add	r30, r24
    3e56:	f9 1f       	adc	r31, r25
    3e58:	21 e0       	ldi	r18, 0x01	; 1
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	2c 0f       	add	r18, r28
    3e5e:	3d 1f       	adc	r19, r29
    3e60:	e2 0f       	add	r30, r18
    3e62:	f3 1f       	adc	r31, r19
    3e64:	23 81       	ldd	r18, Z+3	; 0x03
    3e66:	2f 93       	push	r18
    3e68:	22 81       	ldd	r18, Z+2	; 0x02
    3e6a:	2f 93       	push	r18
    3e6c:	21 81       	ldd	r18, Z+1	; 0x01
    3e6e:	2f 93       	push	r18
    3e70:	20 81       	ld	r18, Z
    3e72:	2f 93       	push	r18
    3e74:	01 96       	adiw	r24, 0x01	; 1
    3e76:	9f 93       	push	r25
    3e78:	8f 93       	push	r24
    3e7a:	87 e7       	ldi	r24, 0x77	; 119
    3e7c:	92 e0       	ldi	r25, 0x02	; 2
    3e7e:	a0 e0       	ldi	r26, 0x00	; 0
    3e80:	af 93       	push	r26
    3e82:	9f 93       	push	r25
    3e84:	8f 93       	push	r24
    3e86:	0b e3       	ldi	r16, 0x3B	; 59
    3e88:	1d e0       	ldi	r17, 0x0D	; 13
    3e8a:	1f 93       	push	r17
    3e8c:	0f 93       	push	r16
    3e8e:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
		uart1_hal_send_string(arg);
    3e92:	b8 01       	movw	r22, r16
    3e94:	80 e8       	ldi	r24, 0x80	; 128
    3e96:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
	strcpy(res, "End of collections");
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    3e9a:	f3 94       	inc	r15
    3e9c:	0f b6       	in	r0, 0x3f	; 63
    3e9e:	f8 94       	cli
    3ea0:	de bf       	out	0x3e, r29	; 62
    3ea2:	0f be       	out	0x3f, r0	; 63
    3ea4:	cd bf       	out	0x3d, r28	; 61
    3ea6:	9e e0       	ldi	r25, 0x0E	; 14
    3ea8:	9f 15       	cp	r25, r15
    3eaa:	68 f6       	brcc	.-102    	; 0x3e46 <read_cols+0x3c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u", i+1, cols[i].samplings, cols[i].samplingInterval);
		uart1_hal_send_string(arg);
	}
}
    3eac:	c5 5b       	subi	r28, 0xB5	; 181
    3eae:	df 4f       	sbci	r29, 0xFF	; 255
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
    3eba:	df 91       	pop	r29
    3ebc:	cf 91       	pop	r28
    3ebe:	1f 91       	pop	r17
    3ec0:	0f 91       	pop	r16
    3ec2:	ff 90       	pop	r15
    3ec4:	08 95       	ret

Disassembly of section .text.read_time:

00004694 <read_time>:

static void read_time(char res[]){
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
    469c:	00 d0       	rcall	.+0      	; 0x469e <read_time+0xa>
    469e:	00 d0       	rcall	.+0      	; 0x46a0 <read_time+0xc>
    46a0:	00 d0       	rcall	.+0      	; 0x46a2 <read_time+0xe>
    46a2:	cd b7       	in	r28, 0x3d	; 61
    46a4:	de b7       	in	r29, 0x3e	; 62
    46a6:	18 2f       	mov	r17, r24
    46a8:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    46aa:	0e 94 1f 37 	call	0x6e3e	; 0x6e3e <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    46ae:	ce 01       	movw	r24, r28
    46b0:	01 96       	adiw	r24, 0x01	; 1
    46b2:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    46b6:	88 23       	and	r24, r24
    46b8:	51 f0       	breq	.+20     	; 0x46ce <read_time+0x3a>
		strcpy(res, "Failed to read time");
    46ba:	24 e1       	ldi	r18, 0x14	; 20
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	4a e8       	ldi	r20, 0x8A	; 138
    46c0:	52 e0       	ldi	r21, 0x02	; 2
    46c2:	60 e0       	ldi	r22, 0x00	; 0
    46c4:	81 2f       	mov	r24, r17
    46c6:	90 2f       	mov	r25, r16
    46c8:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
    46cc:	21 c0       	rjmp	.+66     	; 0x4710 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    46ce:	59 81       	ldd	r21, Y+1	; 0x01
    46d0:	4a 81       	ldd	r20, Y+2	; 0x02
    46d2:	3b 81       	ldd	r19, Y+3	; 0x03
    46d4:	2c 81       	ldd	r18, Y+4	; 0x04
    46d6:	9d 81       	ldd	r25, Y+5	; 0x05
    46d8:	8e 81       	ldd	r24, Y+6	; 0x06
    46da:	1f 92       	push	r1
    46dc:	5f 93       	push	r21
    46de:	1f 92       	push	r1
    46e0:	4f 93       	push	r20
    46e2:	1f 92       	push	r1
    46e4:	3f 93       	push	r19
    46e6:	1f 92       	push	r1
    46e8:	2f 93       	push	r18
    46ea:	1f 92       	push	r1
    46ec:	9f 93       	push	r25
    46ee:	1f 92       	push	r1
    46f0:	8f 93       	push	r24
    46f2:	8e e9       	ldi	r24, 0x9E	; 158
    46f4:	92 e0       	ldi	r25, 0x02	; 2
    46f6:	a0 e0       	ldi	r26, 0x00	; 0
    46f8:	af 93       	push	r26
    46fa:	9f 93       	push	r25
    46fc:	8f 93       	push	r24
    46fe:	0f 93       	push	r16
    4700:	1f 93       	push	r17
    4702:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	f8 94       	cli
    470a:	de bf       	out	0x3e, r29	; 62
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	cd bf       	out	0x3d, r28	; 61
	}
}
    4710:	26 96       	adiw	r28, 0x06	; 6
    4712:	0f b6       	in	r0, 0x3f	; 63
    4714:	f8 94       	cli
    4716:	de bf       	out	0x3e, r29	; 62
    4718:	0f be       	out	0x3f, r0	; 63
    471a:	cd bf       	out	0x3d, r28	; 61
    471c:	df 91       	pop	r29
    471e:	cf 91       	pop	r28
    4720:	1f 91       	pop	r17
    4722:	0f 91       	pop	r16
    4724:	08 95       	ret

Disassembly of section .text.read_validate_SI:

00002f96 <read_validate_SI>:

static void read_validate_SI(char res[]){
    2f96:	ef 92       	push	r14
    2f98:	ff 92       	push	r15
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	cf 54       	subi	r28, 0x4F	; 79
    2fa8:	d1 09       	sbc	r29, r1
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	7c 01       	movw	r14, r24
	uint16_t lowest, highest;
	bool valid;
	COLLECTION cols[N_COLLECTIONS];
	
	//Get collections
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    2fb6:	6b e4       	ldi	r22, 0x4B	; 75
    2fb8:	ce 01       	movw	r24, r28
    2fba:	05 96       	adiw	r24, 0x05	; 5
    2fbc:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <EM_get_collections>
	
	valid=SCD30_calc_validate_SI(cols[0].samplingInterval, cols[1].samplingInterval, cols[2].samplingInterval, &lowest, &highest);
    2fc0:	49 89       	ldd	r20, Y+17	; 0x11
    2fc2:	5a 89       	ldd	r21, Y+18	; 0x12
    2fc4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fc6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fc8:	8e 01       	movw	r16, r28
    2fca:	0d 5f       	subi	r16, 0xFD	; 253
    2fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fce:	9e 01       	movw	r18, r28
    2fd0:	2f 5f       	subi	r18, 0xFF	; 255
    2fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd4:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd6:	98 85       	ldd	r25, Y+8	; 0x08
    2fd8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SCD30_calc_validate_SI>
	if(!valid){
    2fdc:	81 11       	cpse	r24, r1
    2fde:	09 c0       	rjmp	.+18     	; 0x2ff2 <read_validate_SI+0x5c>
		strcpy(res, "ID=1...ID=3 not valid");
    2fe0:	26 e1       	ldi	r18, 0x16	; 22
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	4c eb       	ldi	r20, 0xBC	; 188
    2fe6:	52 e0       	ldi	r21, 0x02	; 2
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	c7 01       	movw	r24, r14
    2fec:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return;
    2ff0:	59 c0       	rjmp	.+178    	; 0x30a4 <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[4].samplingInterval, cols[5].samplingInterval, cols[6].samplingInterval, &lowest, &highest);
    2ff2:	4d a1       	ldd	r20, Y+37	; 0x25
    2ff4:	5e a1       	ldd	r21, Y+38	; 0x26
    2ff6:	68 a1       	ldd	r22, Y+32	; 0x20
    2ff8:	79 a1       	ldd	r23, Y+33	; 0x21
    2ffa:	8e 01       	movw	r16, r28
    2ffc:	0d 5f       	subi	r16, 0xFD	; 253
    2ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    3000:	9e 01       	movw	r18, r28
    3002:	2f 5f       	subi	r18, 0xFF	; 255
    3004:	3f 4f       	sbci	r19, 0xFF	; 255
    3006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    300a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SCD30_calc_validate_SI>
	if(!valid){
    300e:	81 11       	cpse	r24, r1
    3010:	09 c0       	rjmp	.+18     	; 0x3024 <read_validate_SI+0x8e>
		strcpy(res, "ID=5...ID=7 not valid");
    3012:	26 e1       	ldi	r18, 0x16	; 22
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	42 ed       	ldi	r20, 0xD2	; 210
    3018:	52 e0       	ldi	r21, 0x02	; 2
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	c7 01       	movw	r24, r14
    301e:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return;
    3022:	40 c0       	rjmp	.+128    	; 0x30a4 <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[8].samplingInterval, cols[9].samplingInterval, cols[10].samplingInterval, &lowest, &highest);
    3024:	49 ad       	ldd	r20, Y+57	; 0x39
    3026:	5a ad       	ldd	r21, Y+58	; 0x3a
    3028:	6c a9       	ldd	r22, Y+52	; 0x34
    302a:	7d a9       	ldd	r23, Y+53	; 0x35
    302c:	8e 01       	movw	r16, r28
    302e:	0d 5f       	subi	r16, 0xFD	; 253
    3030:	1f 4f       	sbci	r17, 0xFF	; 255
    3032:	9e 01       	movw	r18, r28
    3034:	2f 5f       	subi	r18, 0xFF	; 255
    3036:	3f 4f       	sbci	r19, 0xFF	; 255
    3038:	8f a5       	ldd	r24, Y+47	; 0x2f
    303a:	98 a9       	ldd	r25, Y+48	; 0x30
    303c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SCD30_calc_validate_SI>
	if(!valid){
    3040:	81 11       	cpse	r24, r1
    3042:	09 c0       	rjmp	.+18     	; 0x3056 <read_validate_SI+0xc0>
		strcpy(res, "ID=9...ID=11 not valid");
    3044:	27 e1       	ldi	r18, 0x17	; 23
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	48 ee       	ldi	r20, 0xE8	; 232
    304a:	52 e0       	ldi	r21, 0x02	; 2
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	c7 01       	movw	r24, r14
    3050:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return;
    3054:	27 c0       	rjmp	.+78     	; 0x30a4 <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[12].samplingInterval, cols[13].samplingInterval, cols[14].samplingInterval, &lowest, &highest);
    3056:	2f 96       	adiw	r28, 0x0f	; 15
    3058:	4e ad       	ldd	r20, Y+62	; 0x3e
    305a:	5f ad       	ldd	r21, Y+63	; 0x3f
    305c:	2f 97       	sbiw	r28, 0x0f	; 15
    305e:	2a 96       	adiw	r28, 0x0a	; 10
    3060:	6e ad       	ldd	r22, Y+62	; 0x3e
    3062:	7f ad       	ldd	r23, Y+63	; 0x3f
    3064:	2a 97       	sbiw	r28, 0x0a	; 10
    3066:	8e 01       	movw	r16, r28
    3068:	0d 5f       	subi	r16, 0xFD	; 253
    306a:	1f 4f       	sbci	r17, 0xFF	; 255
    306c:	9e 01       	movw	r18, r28
    306e:	2f 5f       	subi	r18, 0xFF	; 255
    3070:	3f 4f       	sbci	r19, 0xFF	; 255
    3072:	25 96       	adiw	r28, 0x05	; 5
    3074:	8e ad       	ldd	r24, Y+62	; 0x3e
    3076:	9f ad       	ldd	r25, Y+63	; 0x3f
    3078:	25 97       	sbiw	r28, 0x05	; 5
    307a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <SCD30_calc_validate_SI>
	if(!valid){
    307e:	81 11       	cpse	r24, r1
    3080:	09 c0       	rjmp	.+18     	; 0x3094 <read_validate_SI+0xfe>
		strcpy(res, "ID=13...ID=15 not valid");
    3082:	28 e1       	ldi	r18, 0x18	; 24
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	4f ef       	ldi	r20, 0xFF	; 255
    3088:	52 e0       	ldi	r21, 0x02	; 2
    308a:	60 e0       	ldi	r22, 0x00	; 0
    308c:	c7 01       	movw	r24, r14
    308e:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return;
    3092:	08 c0       	rjmp	.+16     	; 0x30a4 <read_validate_SI+0x10e>
	}
	
	strcpy(res, "All valid");
    3094:	2a e0       	ldi	r18, 0x0A	; 10
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	47 e1       	ldi	r20, 0x17	; 23
    309a:	53 e0       	ldi	r21, 0x03	; 3
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	c7 01       	movw	r24, r14
    30a0:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
}
    30a4:	c1 5b       	subi	r28, 0xB1	; 177
    30a6:	df 4f       	sbci	r29, 0xFF	; 255
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	1f 91       	pop	r17
    30b8:	0f 91       	pop	r16
    30ba:	ff 90       	pop	r15
    30bc:	ef 90       	pop	r14
    30be:	08 95       	ret

Disassembly of section .text.write_deveui:

00004aa0 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    4aa0:	cf 92       	push	r12
    4aa2:	df 92       	push	r13
    4aa4:	ef 92       	push	r14
    4aa6:	0f 93       	push	r16
    4aa8:	1f 93       	push	r17
    4aaa:	cf 93       	push	r28
    4aac:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4aae:	22 e0       	ldi	r18, 0x02	; 2
    4ab0:	4b e3       	ldi	r20, 0x3B	; 59
    4ab2:	5d e0       	ldi	r21, 0x0D	; 13
    4ab4:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    4ab8:	c8 2f       	mov	r28, r24
    4aba:	88 23       	and	r24, r24
    4abc:	29 f1       	breq	.+74     	; 0x4b08 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    4abe:	8b e3       	ldi	r24, 0x3B	; 59
    4ac0:	9d e0       	ldi	r25, 0x0D	; 13
    4ac2:	6c 01       	movw	r12, r24
    4ac4:	20 e8       	ldi	r18, 0x80	; 128
    4ac6:	e2 2e       	mov	r14, r18
    4ac8:	8e 2d       	mov	r24, r14
    4aca:	b6 01       	movw	r22, r12
    4acc:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    4ad0:	40 97       	sbiw	r24, 0x10	; 16
    4ad2:	c9 f4       	brne	.+50     	; 0x4b06 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    4ad4:	8e 2d       	mov	r24, r14
    4ad6:	b6 01       	movw	r22, r12
    4ad8:	0e 94 c7 30 	call	0x618e	; 0x618e <EM_set_deveui>
    4adc:	c8 2f       	mov	r28, r24
    4ade:	81 11       	cpse	r24, r1
    4ae0:	09 c0       	rjmp	.+18     	; 0x4af4 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    4ae2:	27 e0       	ldi	r18, 0x07	; 7
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	41 e2       	ldi	r20, 0x21	; 33
    4ae8:	53 e0       	ldi	r21, 0x03	; 3
    4aea:	60 e0       	ldi	r22, 0x00	; 0
    4aec:	c8 01       	movw	r24, r16
    4aee:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return false;
    4af2:	0a c0       	rjmp	.+20     	; 0x4b08 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4af4:	28 e0       	ldi	r18, 0x08	; 8
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	48 e2       	ldi	r20, 0x28	; 40
    4afa:	53 e0       	ldi	r21, 0x03	; 3
    4afc:	60 e0       	ldi	r22, 0x00	; 0
    4afe:	c8 01       	movw	r24, r16
    4b00:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
    4b04:	01 c0       	rjmp	.+2      	; 0x4b08 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4b06:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4b08:	8c 2f       	mov	r24, r28
    4b0a:	cf 91       	pop	r28
    4b0c:	1f 91       	pop	r17
    4b0e:	0f 91       	pop	r16
    4b10:	ef 90       	pop	r14
    4b12:	df 90       	pop	r13
    4b14:	cf 90       	pop	r12
    4b16:	08 95       	ret

Disassembly of section .text.write_appeui:

00004b18 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    4b18:	cf 92       	push	r12
    4b1a:	df 92       	push	r13
    4b1c:	ef 92       	push	r14
    4b1e:	0f 93       	push	r16
    4b20:	1f 93       	push	r17
    4b22:	cf 93       	push	r28
    4b24:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4b26:	22 e0       	ldi	r18, 0x02	; 2
    4b28:	4b e3       	ldi	r20, 0x3B	; 59
    4b2a:	5d e0       	ldi	r21, 0x0D	; 13
    4b2c:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    4b30:	c8 2f       	mov	r28, r24
    4b32:	88 23       	and	r24, r24
    4b34:	29 f1       	breq	.+74     	; 0x4b80 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    4b36:	8b e3       	ldi	r24, 0x3B	; 59
    4b38:	9d e0       	ldi	r25, 0x0D	; 13
    4b3a:	6c 01       	movw	r12, r24
    4b3c:	20 e8       	ldi	r18, 0x80	; 128
    4b3e:	e2 2e       	mov	r14, r18
    4b40:	8e 2d       	mov	r24, r14
    4b42:	b6 01       	movw	r22, r12
    4b44:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    4b48:	40 97       	sbiw	r24, 0x10	; 16
    4b4a:	c9 f4       	brne	.+50     	; 0x4b7e <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    4b4c:	8e 2d       	mov	r24, r14
    4b4e:	b6 01       	movw	r22, r12
    4b50:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <EM_set_appeui>
    4b54:	c8 2f       	mov	r28, r24
    4b56:	81 11       	cpse	r24, r1
    4b58:	09 c0       	rjmp	.+18     	; 0x4b6c <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    4b5a:	27 e0       	ldi	r18, 0x07	; 7
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	41 e2       	ldi	r20, 0x21	; 33
    4b60:	53 e0       	ldi	r21, 0x03	; 3
    4b62:	60 e0       	ldi	r22, 0x00	; 0
    4b64:	c8 01       	movw	r24, r16
    4b66:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return false;
    4b6a:	0a c0       	rjmp	.+20     	; 0x4b80 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4b6c:	28 e0       	ldi	r18, 0x08	; 8
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	48 e2       	ldi	r20, 0x28	; 40
    4b72:	53 e0       	ldi	r21, 0x03	; 3
    4b74:	60 e0       	ldi	r22, 0x00	; 0
    4b76:	c8 01       	movw	r24, r16
    4b78:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
    4b7c:	01 c0       	rjmp	.+2      	; 0x4b80 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4b7e:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4b80:	8c 2f       	mov	r24, r28
    4b82:	cf 91       	pop	r28
    4b84:	1f 91       	pop	r17
    4b86:	0f 91       	pop	r16
    4b88:	ef 90       	pop	r14
    4b8a:	df 90       	pop	r13
    4b8c:	cf 90       	pop	r12
    4b8e:	08 95       	ret

Disassembly of section .text.write_appkey:

00004b90 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    4b90:	cf 92       	push	r12
    4b92:	df 92       	push	r13
    4b94:	ef 92       	push	r14
    4b96:	0f 93       	push	r16
    4b98:	1f 93       	push	r17
    4b9a:	cf 93       	push	r28
    4b9c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4b9e:	22 e0       	ldi	r18, 0x02	; 2
    4ba0:	4b e3       	ldi	r20, 0x3B	; 59
    4ba2:	5d e0       	ldi	r21, 0x0D	; 13
    4ba4:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    4ba8:	c8 2f       	mov	r28, r24
    4baa:	88 23       	and	r24, r24
    4bac:	29 f1       	breq	.+74     	; 0x4bf8 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    4bae:	8b e3       	ldi	r24, 0x3B	; 59
    4bb0:	9d e0       	ldi	r25, 0x0D	; 13
    4bb2:	6c 01       	movw	r12, r24
    4bb4:	20 e8       	ldi	r18, 0x80	; 128
    4bb6:	e2 2e       	mov	r14, r18
    4bb8:	8e 2d       	mov	r24, r14
    4bba:	b6 01       	movw	r22, r12
    4bbc:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    4bc0:	80 97       	sbiw	r24, 0x20	; 32
    4bc2:	c9 f4       	brne	.+50     	; 0x4bf6 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    4bc4:	8e 2d       	mov	r24, r14
    4bc6:	b6 01       	movw	r22, r12
    4bc8:	0e 94 01 31 	call	0x6202	; 0x6202 <EM_set_appkey>
    4bcc:	c8 2f       	mov	r28, r24
    4bce:	81 11       	cpse	r24, r1
    4bd0:	09 c0       	rjmp	.+18     	; 0x4be4 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    4bd2:	27 e0       	ldi	r18, 0x07	; 7
    4bd4:	30 e0       	ldi	r19, 0x00	; 0
    4bd6:	41 e2       	ldi	r20, 0x21	; 33
    4bd8:	53 e0       	ldi	r21, 0x03	; 3
    4bda:	60 e0       	ldi	r22, 0x00	; 0
    4bdc:	c8 01       	movw	r24, r16
    4bde:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return false;
    4be2:	0a c0       	rjmp	.+20     	; 0x4bf8 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4be4:	28 e0       	ldi	r18, 0x08	; 8
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	48 e2       	ldi	r20, 0x28	; 40
    4bea:	53 e0       	ldi	r21, 0x03	; 3
    4bec:	60 e0       	ldi	r22, 0x00	; 0
    4bee:	c8 01       	movw	r24, r16
    4bf0:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
    4bf4:	01 c0       	rjmp	.+2      	; 0x4bf8 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    4bf6:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4bf8:	8c 2f       	mov	r24, r28
    4bfa:	cf 91       	pop	r28
    4bfc:	1f 91       	pop	r17
    4bfe:	0f 91       	pop	r16
    4c00:	ef 90       	pop	r14
    4c02:	df 90       	pop	r13
    4c04:	cf 90       	pop	r12
    4c06:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00005a04 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    5a04:	0f 93       	push	r16
    5a06:	1f 93       	push	r17
    5a08:	cf 93       	push	r28
    5a0a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5a0c:	22 e0       	ldi	r18, 0x02	; 2
    5a0e:	4b e3       	ldi	r20, 0x3B	; 59
    5a10:	5d e0       	ldi	r21, 0x0D	; 13
    5a12:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    5a16:	c8 2f       	mov	r28, r24
    5a18:	88 23       	and	r24, r24
    5a1a:	a9 f0       	breq	.+42     	; 0x5a46 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    5a1c:	8b e3       	ldi	r24, 0x3B	; 59
    5a1e:	9d e0       	ldi	r25, 0x0D	; 13
    5a20:	0e 94 a4 2a 	call	0x5548	; 0x5548 <is_float>
    5a24:	c8 2f       	mov	r28, r24
    5a26:	88 23       	and	r24, r24
    5a28:	71 f0       	breq	.+28     	; 0x5a46 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    5a2a:	8b e3       	ldi	r24, 0x3B	; 59
    5a2c:	9d e0       	ldi	r25, 0x0D	; 13
    5a2e:	0e 94 8f 2c 	call	0x591e	; 0x591e <str2flaot>
	EM_set_ppmfactor(val);
    5a32:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    5a36:	28 e0       	ldi	r18, 0x08	; 8
    5a38:	30 e0       	ldi	r19, 0x00	; 0
    5a3a:	48 e2       	ldi	r20, 0x28	; 40
    5a3c:	53 e0       	ldi	r21, 0x03	; 3
    5a3e:	60 e0       	ldi	r22, 0x00	; 0
    5a40:	c8 01       	movw	r24, r16
    5a42:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	return true;
}
    5a46:	8c 2f       	mov	r24, r28
    5a48:	cf 91       	pop	r28
    5a4a:	1f 91       	pop	r17
    5a4c:	0f 91       	pop	r16
    5a4e:	08 95       	ret

Disassembly of section .text.write_RRL:

00005a50 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    5a50:	0f 93       	push	r16
    5a52:	1f 93       	push	r17
    5a54:	cf 93       	push	r28
    5a56:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5a58:	22 e0       	ldi	r18, 0x02	; 2
    5a5a:	4b e3       	ldi	r20, 0x3B	; 59
    5a5c:	5d e0       	ldi	r21, 0x0D	; 13
    5a5e:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    5a62:	c8 2f       	mov	r28, r24
    5a64:	88 23       	and	r24, r24
    5a66:	a9 f0       	breq	.+42     	; 0x5a92 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    5a68:	8b e3       	ldi	r24, 0x3B	; 59
    5a6a:	9d e0       	ldi	r25, 0x0D	; 13
    5a6c:	0e 94 a4 2a 	call	0x5548	; 0x5548 <is_float>
    5a70:	c8 2f       	mov	r28, r24
    5a72:	88 23       	and	r24, r24
    5a74:	71 f0       	breq	.+28     	; 0x5a92 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    5a76:	8b e3       	ldi	r24, 0x3B	; 59
    5a78:	9d e0       	ldi	r25, 0x0D	; 13
    5a7a:	0e 94 8f 2c 	call	0x591e	; 0x591e <str2flaot>
	EM_set_RRL(val);
    5a7e:	0e 94 d5 37 	call	0x6faa	; 0x6faa <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    5a82:	28 e0       	ldi	r18, 0x08	; 8
    5a84:	30 e0       	ldi	r19, 0x00	; 0
    5a86:	48 e2       	ldi	r20, 0x28	; 40
    5a88:	53 e0       	ldi	r21, 0x03	; 3
    5a8a:	60 e0       	ldi	r22, 0x00	; 0
    5a8c:	c8 01       	movw	r24, r16
    5a8e:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	return true;
}
    5a92:	8c 2f       	mov	r24, r28
    5a94:	cf 91       	pop	r28
    5a96:	1f 91       	pop	r17
    5a98:	0f 91       	pop	r16
    5a9a:	08 95       	ret

Disassembly of section .text.write_VCC:

00005a9c <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    5a9c:	0f 93       	push	r16
    5a9e:	1f 93       	push	r17
    5aa0:	cf 93       	push	r28
    5aa2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5aa4:	22 e0       	ldi	r18, 0x02	; 2
    5aa6:	4b e3       	ldi	r20, 0x3B	; 59
    5aa8:	5d e0       	ldi	r21, 0x0D	; 13
    5aaa:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    5aae:	c8 2f       	mov	r28, r24
    5ab0:	88 23       	and	r24, r24
    5ab2:	a9 f0       	breq	.+42     	; 0x5ade <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    5ab4:	8b e3       	ldi	r24, 0x3B	; 59
    5ab6:	9d e0       	ldi	r25, 0x0D	; 13
    5ab8:	0e 94 a4 2a 	call	0x5548	; 0x5548 <is_float>
    5abc:	c8 2f       	mov	r28, r24
    5abe:	88 23       	and	r24, r24
    5ac0:	71 f0       	breq	.+28     	; 0x5ade <write_VCC+0x42>
	
	float val=str2flaot(arg);
    5ac2:	8b e3       	ldi	r24, 0x3B	; 59
    5ac4:	9d e0       	ldi	r25, 0x0D	; 13
    5ac6:	0e 94 8f 2c 	call	0x591e	; 0x591e <str2flaot>
	EM_set_Vcc(val);
    5aca:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    5ace:	28 e0       	ldi	r18, 0x08	; 8
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	48 e2       	ldi	r20, 0x28	; 40
    5ad4:	53 e0       	ldi	r21, 0x03	; 3
    5ad6:	60 e0       	ldi	r22, 0x00	; 0
    5ad8:	c8 01       	movw	r24, r16
    5ada:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	return true;
}
    5ade:	8c 2f       	mov	r24, r28
    5ae0:	cf 91       	pop	r28
    5ae2:	1f 91       	pop	r17
    5ae4:	0f 91       	pop	r16
    5ae6:	08 95       	ret

Disassembly of section .text.get_time_par:

00006492 <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    6492:	cf 93       	push	r28
    6494:	df 93       	push	r29
    6496:	00 d0       	rcall	.+0      	; 0x6498 <get_time_par+0x6>
    6498:	1f 92       	push	r1
    649a:	cd b7       	in	r28, 0x3d	; 61
    649c:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    649e:	fc 01       	movw	r30, r24
    64a0:	e6 0f       	add	r30, r22
    64a2:	f1 1d       	adc	r31, r1
    64a4:	80 81       	ld	r24, Z
    64a6:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    64a8:	81 81       	ldd	r24, Z+1	; 0x01
    64aa:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    64ac:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    64ae:	be 01       	movw	r22, r28
    64b0:	6f 5f       	subi	r22, 0xFF	; 255
    64b2:	7f 4f       	sbci	r23, 0xFF	; 255
    64b4:	80 e8       	ldi	r24, 0x80	; 128
    64b6:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <atoi>
}
    64ba:	0f 90       	pop	r0
    64bc:	0f 90       	pop	r0
    64be:	0f 90       	pop	r0
    64c0:	df 91       	pop	r29
    64c2:	cf 91       	pop	r28
    64c4:	08 95       	ret

Disassembly of section .text.write_cols:

00002924 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    2924:	4f 92       	push	r4
    2926:	5f 92       	push	r5
    2928:	6f 92       	push	r6
    292a:	7f 92       	push	r7
    292c:	8f 92       	push	r8
    292e:	af 92       	push	r10
    2930:	bf 92       	push	r11
    2932:	cf 92       	push	r12
    2934:	df 92       	push	r13
    2936:	ef 92       	push	r14
    2938:	0f 93       	push	r16
    293a:	1f 93       	push	r17
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	cb 54       	subi	r28, 0x4B	; 75
    2946:	d1 09       	sbc	r29, r1
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	3b 01       	movw	r6, r22
    2954:	88 2e       	mov	r8, r24
    2956:	5a 01       	movw	r10, r20
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	bool valid;
	
	//Col ID
	if(!get_parameter(cmd, arg, 2)) return false;
    2958:	22 e0       	ldi	r18, 0x02	; 2
    295a:	4b e3       	ldi	r20, 0x3B	; 59
    295c:	5d e0       	ldi	r21, 0x0D	; 13
    295e:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    2962:	18 2f       	mov	r17, r24
    2964:	88 23       	and	r24, r24
    2966:	09 f4       	brne	.+2      	; 0x296a <write_cols+0x46>
    2968:	72 c0       	rjmp	.+228    	; 0x2a4e <write_cols+0x12a>
	index=atoi(arg);
    296a:	8b e3       	ldi	r24, 0x3B	; 59
    296c:	9d e0       	ldi	r25, 0x0D	; 13
    296e:	6c 01       	movw	r12, r24
    2970:	20 e8       	ldi	r18, 0x80	; 128
    2972:	e2 2e       	mov	r14, r18
    2974:	8e 2d       	mov	r24, r14
    2976:	b6 01       	movw	r22, r12
    2978:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <atoi>
	if(index<1 || index>N_COLLECTIONS) return false;
    297c:	0f ef       	ldi	r16, 0xFF	; 255
    297e:	08 0f       	add	r16, r24
    2980:	0f 30       	cpi	r16, 0x0F	; 15
    2982:	08 f0       	brcs	.+2      	; 0x2986 <write_cols+0x62>
    2984:	5f c0       	rjmp	.+190    	; 0x2a44 <write_cols+0x120>
	index--; //Offset index
	
	//Number of samples
	if(!get_parameter(cmd, arg, 3)) return false;
    2986:	23 e0       	ldi	r18, 0x03	; 3
    2988:	4b e3       	ldi	r20, 0x3B	; 59
    298a:	5d e0       	ldi	r21, 0x0D	; 13
    298c:	88 2d       	mov	r24, r8
    298e:	b3 01       	movw	r22, r6
    2990:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    2994:	18 2f       	mov	r17, r24
    2996:	88 23       	and	r24, r24
    2998:	09 f4       	brne	.+2      	; 0x299c <write_cols+0x78>
    299a:	59 c0       	rjmp	.+178    	; 0x2a4e <write_cols+0x12a>
	samplings=atoi(arg);
    299c:	8e 2d       	mov	r24, r14
    299e:	b6 01       	movw	r22, r12
    29a0:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <atoi>
    29a4:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>MAX_SAMPLES_ALL) return false;
    29a6:	02 97       	sbiw	r24, 0x02	; 2
    29a8:	83 36       	cpi	r24, 0x63	; 99
    29aa:	91 05       	cpc	r25, r1
    29ac:	08 f0       	brcs	.+2      	; 0x29b0 <write_cols+0x8c>
    29ae:	4c c0       	rjmp	.+152    	; 0x2a48 <write_cols+0x124>
	
	//Sampling interval
	if(!get_parameter(cmd, arg, 4)) return false;
    29b0:	24 e0       	ldi	r18, 0x04	; 4
    29b2:	4b e3       	ldi	r20, 0x3B	; 59
    29b4:	5d e0       	ldi	r21, 0x0D	; 13
    29b6:	88 2d       	mov	r24, r8
    29b8:	b3 01       	movw	r22, r6
    29ba:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    29be:	18 2f       	mov	r17, r24
    29c0:	88 23       	and	r24, r24
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <write_cols+0xa2>
    29c4:	44 c0       	rjmp	.+136    	; 0x2a4e <write_cols+0x12a>
	samplingInterval=atoi(arg);
    29c6:	8e 2d       	mov	r24, r14
    29c8:	b6 01       	movw	r22, r12
    29ca:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <atoi>
    29ce:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    29d0:	02 97       	sbiw	r24, 0x02	; 2
    29d2:	87 35       	cpi	r24, 0x57	; 87
    29d4:	92 40       	sbci	r25, 0x02	; 2
    29d6:	d0 f5       	brcc	.+116    	; 0x2a4c <write_cols+0x128>
	
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    29d8:	6b e4       	ldi	r22, 0x4B	; 75
    29da:	ce 01       	movw	r24, r28
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <EM_get_collections>
	
	cols[index].samplings=samplings;
    29e2:	80 2f       	mov	r24, r16
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	fc 01       	movw	r30, r24
    29e8:	ee 0f       	add	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	ee 0f       	add	r30, r30
    29ee:	ff 1f       	adc	r31, r31
    29f0:	e8 0f       	add	r30, r24
    29f2:	f9 1f       	adc	r31, r25
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	8c 0f       	add	r24, r28
    29fa:	9d 1f       	adc	r25, r29
    29fc:	e8 0f       	add	r30, r24
    29fe:	f9 1f       	adc	r31, r25
    2a00:	51 82       	std	Z+1, r5	; 0x01
    2a02:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    2a04:	d3 82       	std	Z+3, r13	; 0x03
    2a06:	c2 82       	std	Z+2, r12	; 0x02
	
	//Check for space in buffer
	valid=MRPP_validate_collections_space(cols, N_COLLECTIONS);
    2a08:	6f e0       	ldi	r22, 0x0F	; 15
    2a0a:	0e 94 03 29 	call	0x5206	; 0x5206 <MRPP_validate_collections_space>
	if(!valid){
    2a0e:	81 11       	cpse	r24, r1
    2a10:	09 c0       	rjmp	.+18     	; 0x2a24 <write_cols+0x100>
		strcpy(res, "Too much data to be in buffer!");
    2a12:	2f e1       	ldi	r18, 0x1F	; 31
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e3       	ldi	r20, 0x30	; 48
    2a18:	53 e0       	ldi	r21, 0x03	; 3
    2a1a:	60 e0       	ldi	r22, 0x00	; 0
    2a1c:	c5 01       	movw	r24, r10
    2a1e:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
    2a22:	15 c0       	rjmp	.+42     	; 0x2a4e <write_cols+0x12a>
	}
	
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    2a24:	be 01       	movw	r22, r28
    2a26:	6f 5f       	subi	r22, 0xFF	; 255
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	80 e8       	ldi	r24, 0x80	; 128
    2a2c:	4b e4       	ldi	r20, 0x4B	; 75
    2a2e:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    2a32:	28 e0       	ldi	r18, 0x08	; 8
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	48 e2       	ldi	r20, 0x28	; 40
    2a38:	53 e0       	ldi	r21, 0x03	; 3
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	c5 01       	movw	r24, r10
    2a3e:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	return true;	
    2a42:	05 c0       	rjmp	.+10     	; 0x2a4e <write_cols+0x12a>
	bool valid;
	
	//Col ID
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>N_COLLECTIONS) return false;
    2a44:	10 e0       	ldi	r17, 0x00	; 0
    2a46:	03 c0       	rjmp	.+6      	; 0x2a4e <write_cols+0x12a>
	index--; //Offset index
	
	//Number of samples
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>MAX_SAMPLES_ALL) return false;
    2a48:	10 e0       	ldi	r17, 0x00	; 0
    2a4a:	01 c0       	rjmp	.+2      	; 0x2a4e <write_cols+0x12a>
	
	//Sampling interval
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    2a4c:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    2a4e:	81 2f       	mov	r24, r17
    2a50:	c5 5b       	subi	r28, 0xB5	; 181
    2a52:	df 4f       	sbci	r29, 0xFF	; 255
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ef 90       	pop	r14
    2a68:	df 90       	pop	r13
    2a6a:	cf 90       	pop	r12
    2a6c:	bf 90       	pop	r11
    2a6e:	af 90       	pop	r10
    2a70:	8f 90       	pop	r8
    2a72:	7f 90       	pop	r7
    2a74:	6f 90       	pop	r6
    2a76:	5f 90       	pop	r5
    2a78:	4f 90       	pop	r4
    2a7a:	08 95       	ret

Disassembly of section .text.write_heat_up:

00005ae8 <write_heat_up>:



static bool write_heat_up(const char cmd[], char res[]){
    5ae8:	0f 93       	push	r16
    5aea:	1f 93       	push	r17
    5aec:	cf 93       	push	r28
    5aee:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5af0:	22 e0       	ldi	r18, 0x02	; 2
    5af2:	4b e3       	ldi	r20, 0x3B	; 59
    5af4:	5d e0       	ldi	r21, 0x0D	; 13
    5af6:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    5afa:	c8 2f       	mov	r28, r24
    5afc:	88 23       	and	r24, r24
    5afe:	a9 f0       	breq	.+42     	; 0x5b2a <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    5b00:	6b e3       	ldi	r22, 0x3B	; 59
    5b02:	7d e0       	ldi	r23, 0x0D	; 13
    5b04:	80 e8       	ldi	r24, 0x80	; 128
    5b06:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <atoi>
	
	if(val<1 || val>200) return false;
    5b0a:	9f ef       	ldi	r25, 0xFF	; 255
    5b0c:	98 0f       	add	r25, r24
    5b0e:	98 3c       	cpi	r25, 0xC8	; 200
    5b10:	58 f4       	brcc	.+22     	; 0x5b28 <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    5b12:	0e 94 2e 38 	call	0x705c	; 0x705c <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    5b16:	28 e0       	ldi	r18, 0x08	; 8
    5b18:	30 e0       	ldi	r19, 0x00	; 0
    5b1a:	48 e2       	ldi	r20, 0x28	; 40
    5b1c:	53 e0       	ldi	r21, 0x03	; 3
    5b1e:	60 e0       	ldi	r22, 0x00	; 0
    5b20:	c8 01       	movw	r24, r16
    5b22:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	return true;
    5b26:	01 c0       	rjmp	.+2      	; 0x5b2a <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    5b28:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5b2a:	8c 2f       	mov	r24, r28
    5b2c:	cf 91       	pop	r28
    5b2e:	1f 91       	pop	r17
    5b30:	0f 91       	pop	r16
    5b32:	08 95       	ret

Disassembly of section .text.write_air_pump:

00005796 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    5796:	0f 93       	push	r16
    5798:	1f 93       	push	r17
    579a:	cf 93       	push	r28
    579c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    579e:	22 e0       	ldi	r18, 0x02	; 2
    57a0:	4b e3       	ldi	r20, 0x3B	; 59
    57a2:	5d e0       	ldi	r21, 0x0D	; 13
    57a4:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    57a8:	c8 2f       	mov	r28, r24
    57aa:	88 23       	and	r24, r24
    57ac:	b9 f0       	breq	.+46     	; 0x57dc <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    57ae:	6b e3       	ldi	r22, 0x3B	; 59
    57b0:	7d e0       	ldi	r23, 0x0D	; 13
    57b2:	80 e8       	ldi	r24, 0x80	; 128
    57b4:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <atoi>
	
	if(val<5 || val>1000) return false;
    57b8:	9c 01       	movw	r18, r24
    57ba:	25 50       	subi	r18, 0x05	; 5
    57bc:	31 09       	sbc	r19, r1
    57be:	24 3e       	cpi	r18, 0xE4	; 228
    57c0:	33 40       	sbci	r19, 0x03	; 3
    57c2:	58 f4       	brcc	.+22     	; 0x57da <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    57c4:	0e 94 3a 38 	call	0x7074	; 0x7074 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    57c8:	28 e0       	ldi	r18, 0x08	; 8
    57ca:	30 e0       	ldi	r19, 0x00	; 0
    57cc:	48 e2       	ldi	r20, 0x28	; 40
    57ce:	53 e0       	ldi	r21, 0x03	; 3
    57d0:	60 e0       	ldi	r22, 0x00	; 0
    57d2:	c8 01       	movw	r24, r16
    57d4:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	return true;
    57d8:	01 c0       	rjmp	.+2      	; 0x57dc <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    57da:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    57dc:	8c 2f       	mov	r24, r28
    57de:	cf 91       	pop	r28
    57e0:	1f 91       	pop	r17
    57e2:	0f 91       	pop	r16
    57e4:	08 95       	ret

Disassembly of section .text.write_sp_interval:

00005b34 <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    5b34:	0f 93       	push	r16
    5b36:	1f 93       	push	r17
    5b38:	cf 93       	push	r28
    5b3a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5b3c:	22 e0       	ldi	r18, 0x02	; 2
    5b3e:	4b e3       	ldi	r20, 0x3B	; 59
    5b40:	5d e0       	ldi	r21, 0x0D	; 13
    5b42:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    5b46:	c8 2f       	mov	r28, r24
    5b48:	88 23       	and	r24, r24
    5b4a:	a9 f0       	breq	.+42     	; 0x5b76 <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    5b4c:	6b e3       	ldi	r22, 0x3B	; 59
    5b4e:	7d e0       	ldi	r23, 0x0D	; 13
    5b50:	80 e8       	ldi	r24, 0x80	; 128
    5b52:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <atoi>
	
	if(val<6 || val>24) return false;
    5b56:	9a ef       	ldi	r25, 0xFA	; 250
    5b58:	98 0f       	add	r25, r24
    5b5a:	93 31       	cpi	r25, 0x13	; 19
    5b5c:	58 f4       	brcc	.+22     	; 0x5b74 <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    5b5e:	0e 94 46 38 	call	0x708c	; 0x708c <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    5b62:	28 e0       	ldi	r18, 0x08	; 8
    5b64:	30 e0       	ldi	r19, 0x00	; 0
    5b66:	48 e2       	ldi	r20, 0x28	; 40
    5b68:	53 e0       	ldi	r21, 0x03	; 3
    5b6a:	60 e0       	ldi	r22, 0x00	; 0
    5b6c:	c8 01       	movw	r24, r16
    5b6e:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	return true;
    5b72:	01 c0       	rjmp	.+2      	; 0x5b76 <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    5b74:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5b76:	8c 2f       	mov	r24, r28
    5b78:	cf 91       	pop	r28
    5b7a:	1f 91       	pop	r17
    5b7c:	0f 91       	pop	r16
    5b7e:	08 95       	ret

Disassembly of section .text.write_reset:

0000391c <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    391c:	0f 93       	push	r16
    391e:	1f 93       	push	r17
    3920:	cf 93       	push	r28
    3922:	df 93       	push	r29
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	cb 54       	subi	r28, 0x4B	; 75
    392a:	d1 09       	sbc	r29, r1
    392c:	0f b6       	in	r0, 0x3f	; 63
    392e:	f8 94       	cli
    3930:	de bf       	out	0x3e, r29	; 62
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	cd bf       	out	0x3d, r28	; 61
    3936:	8a 01       	movw	r16, r20
	
	COLLECTION cols[N_COLLECTIONS];
	
	EM_set_deveui("0000000000000000");
    3938:	6f e4       	ldi	r22, 0x4F	; 79
    393a:	73 e0       	ldi	r23, 0x03	; 3
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	0e 94 c7 30 	call	0x618e	; 0x618e <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    3942:	6f e4       	ldi	r22, 0x4F	; 79
    3944:	73 e0       	ldi	r23, 0x03	; 3
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    394c:	60 e6       	ldi	r22, 0x60	; 96
    394e:	73 e0       	ldi	r23, 0x03	; 3
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	0e 94 01 31 	call	0x6202	; 0x6202 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    3956:	60 e0       	ldi	r22, 0x00	; 0
    3958:	70 e0       	ldi	r23, 0x00	; 0
    395a:	80 e8       	ldi	r24, 0x80	; 128
    395c:	9f e3       	ldi	r25, 0x3F	; 63
    395e:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    3962:	60 e0       	ldi	r22, 0x00	; 0
    3964:	70 e4       	ldi	r23, 0x40	; 64
    3966:	8c e1       	ldi	r24, 0x1C	; 28
    3968:	95 e4       	ldi	r25, 0x45	; 69
    396a:	0e 94 d5 37 	call	0x6faa	; 0x6faa <EM_set_RRL>
	EM_set_Vcc(5.00);
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	70 e0       	ldi	r23, 0x00	; 0
    3972:	80 ea       	ldi	r24, 0xA0	; 160
    3974:	90 e4       	ldi	r25, 0x40	; 64
    3976:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    397a:	82 e0       	ldi	r24, 0x02	; 2
    397c:	0e 94 2e 38 	call	0x705c	; 0x705c <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    3980:	85 e0       	ldi	r24, 0x05	; 5
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	0e 94 3a 38 	call	0x7074	; 0x7074 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    3988:	86 e0       	ldi	r24, 0x06	; 6
    398a:	0e 94 46 38 	call	0x708c	; 0x708c <EM_set_sp_interval>
	
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	1a c0       	rjmp	.+52     	; 0x39c6 <write_reset+0xaa>
	{
		cols[i].type=T_INT16;
    3992:	e8 2f       	mov	r30, r24
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	9f 01       	movw	r18, r30
    3998:	22 0f       	add	r18, r18
    399a:	33 1f       	adc	r19, r19
    399c:	22 0f       	add	r18, r18
    399e:	33 1f       	adc	r19, r19
    39a0:	e2 0f       	add	r30, r18
    39a2:	f3 1f       	adc	r31, r19
    39a4:	21 e0       	ldi	r18, 0x01	; 1
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	2c 0f       	add	r18, r28
    39aa:	3d 1f       	adc	r19, r29
    39ac:	e2 0f       	add	r30, r18
    39ae:	f3 1f       	adc	r31, r19
    39b0:	92 e0       	ldi	r25, 0x02	; 2
    39b2:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    39b4:	22 e0       	ldi	r18, 0x02	; 2
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	31 83       	std	Z+1, r19	; 0x01
    39ba:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    39bc:	23 e0       	ldi	r18, 0x03	; 3
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	33 83       	std	Z+3, r19	; 0x03
    39c2:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    39c4:	8f 5f       	subi	r24, 0xFF	; 255
    39c6:	8f 30       	cpi	r24, 0x0F	; 15
    39c8:	20 f3       	brcs	.-56     	; 0x3992 <write_reset+0x76>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    39ca:	be 01       	movw	r22, r28
    39cc:	6f 5f       	subi	r22, 0xFF	; 255
    39ce:	7f 4f       	sbci	r23, 0xFF	; 255
    39d0:	80 e8       	ldi	r24, 0x80	; 128
    39d2:	4b e4       	ldi	r20, 0x4B	; 75
    39d4:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    39d8:	23 e1       	ldi	r18, 0x13	; 19
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	41 e8       	ldi	r20, 0x81	; 129
    39de:	53 e0       	ldi	r21, 0x03	; 3
    39e0:	60 e0       	ldi	r22, 0x00	; 0
    39e2:	c8 01       	movw	r24, r16
    39e4:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	return true;
}
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	c5 5b       	subi	r28, 0xB5	; 181
    39ec:	df 4f       	sbci	r29, 0xFF	; 255
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	cd bf       	out	0x3d, r28	; 61
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	08 95       	ret

Disassembly of section .text.write_time:

00003636 <write_time>:

static bool write_time(const char cmd[], char res[]){
    3636:	6f 92       	push	r6
    3638:	7f 92       	push	r7
    363a:	8f 92       	push	r8
    363c:	df 92       	push	r13
    363e:	ef 92       	push	r14
    3640:	ff 92       	push	r15
    3642:	0f 93       	push	r16
    3644:	1f 93       	push	r17
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29
    364a:	00 d0       	rcall	.+0      	; 0x364c <write_time+0x16>
    364c:	00 d0       	rcall	.+0      	; 0x364e <write_time+0x18>
    364e:	00 d0       	rcall	.+0      	; 0x3650 <write_time+0x1a>
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	3b 01       	movw	r6, r22
    3656:	88 2e       	mov	r8, r24
    3658:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    365a:	0e 94 1f 37 	call	0x6e3e	; 0x6e3e <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    365e:	22 e0       	ldi	r18, 0x02	; 2
    3660:	4b e3       	ldi	r20, 0x3B	; 59
    3662:	5d e0       	ldi	r21, 0x0D	; 13
    3664:	88 2d       	mov	r24, r8
    3666:	b3 01       	movw	r22, r6
    3668:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    366c:	18 2f       	mov	r17, r24
    366e:	88 23       	and	r24, r24
    3670:	09 f4       	brne	.+2      	; 0x3674 <write_time+0x3e>
    3672:	4e c0       	rjmp	.+156    	; 0x3710 <write_time+0xda>
	if(strlen(arg)!=17){
    3674:	6b e3       	ldi	r22, 0x3B	; 59
    3676:	7d e0       	ldi	r23, 0x0D	; 13
    3678:	80 e8       	ldi	r24, 0x80	; 128
    367a:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    367e:	41 97       	sbiw	r24, 0x11	; 17
    3680:	49 f0       	breq	.+18     	; 0x3694 <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    3682:	25 e2       	ldi	r18, 0x25	; 37
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	44 e9       	ldi	r20, 0x94	; 148
    3688:	53 e0       	ldi	r21, 0x03	; 3
    368a:	60 e0       	ldi	r22, 0x00	; 0
    368c:	c7 01       	movw	r24, r14
    368e:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
    3692:	3e c0       	rjmp	.+124    	; 0x3710 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    3694:	60 e0       	ldi	r22, 0x00	; 0
    3696:	8b e3       	ldi	r24, 0x3B	; 59
    3698:	9d e0       	ldi	r25, 0x0D	; 13
    369a:	0e 94 49 32 	call	0x6492	; 0x6492 <get_time_par>
    369e:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    36a0:	63 e0       	ldi	r22, 0x03	; 3
    36a2:	8b e3       	ldi	r24, 0x3B	; 59
    36a4:	9d e0       	ldi	r25, 0x0D	; 13
    36a6:	0e 94 49 32 	call	0x6492	; 0x6492 <get_time_par>
    36aa:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    36ac:	66 e0       	ldi	r22, 0x06	; 6
    36ae:	8b e3       	ldi	r24, 0x3B	; 59
    36b0:	9d e0       	ldi	r25, 0x0D	; 13
    36b2:	0e 94 49 32 	call	0x6492	; 0x6492 <get_time_par>
    36b6:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    36b8:	69 e0       	ldi	r22, 0x09	; 9
    36ba:	8b e3       	ldi	r24, 0x3B	; 59
    36bc:	9d e0       	ldi	r25, 0x0D	; 13
    36be:	0e 94 49 32 	call	0x6492	; 0x6492 <get_time_par>
    36c2:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    36c4:	6c e0       	ldi	r22, 0x0C	; 12
    36c6:	8b e3       	ldi	r24, 0x3B	; 59
    36c8:	9d e0       	ldi	r25, 0x0D	; 13
    36ca:	0e 94 49 32 	call	0x6492	; 0x6492 <get_time_par>
    36ce:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    36d0:	6f e0       	ldi	r22, 0x0F	; 15
    36d2:	8b e3       	ldi	r24, 0x3B	; 59
    36d4:	9d e0       	ldi	r25, 0x0D	; 13
    36d6:	0e 94 49 32 	call	0x6492	; 0x6492 <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    36da:	48 2f       	mov	r20, r24
    36dc:	5d 2d       	mov	r21, r13
    36de:	60 2f       	mov	r22, r16
    36e0:	76 2d       	mov	r23, r6
    36e2:	87 2d       	mov	r24, r7
    36e4:	98 2d       	mov	r25, r8
    36e6:	0e 94 68 28 	call	0x50d0	; 0x50d0 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    36ea:	88 23       	and	r24, r24
    36ec:	49 f0       	breq	.+18     	; 0x3700 <write_time+0xca>
		strcpy(res, "Failed to set time");
    36ee:	23 e1       	ldi	r18, 0x13	; 19
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	49 eb       	ldi	r20, 0xB9	; 185
    36f4:	53 e0       	ldi	r21, 0x03	; 3
    36f6:	60 e0       	ldi	r22, 0x00	; 0
    36f8:	c7 01       	movw	r24, r14
    36fa:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
    36fe:	08 c0       	rjmp	.+16     	; 0x3710 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    3700:	28 e0       	ldi	r18, 0x08	; 8
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	48 e2       	ldi	r20, 0x28	; 40
    3706:	53 e0       	ldi	r21, 0x03	; 3
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	c7 01       	movw	r24, r14
    370c:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
	return true;
}
    3710:	81 2f       	mov	r24, r17
    3712:	26 96       	adiw	r28, 0x06	; 6
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	de bf       	out	0x3e, r29	; 62
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	cd bf       	out	0x3d, r28	; 61
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	1f 91       	pop	r17
    3724:	0f 91       	pop	r16
    3726:	ff 90       	pop	r15
    3728:	ef 90       	pop	r14
    372a:	df 90       	pop	r13
    372c:	8f 90       	pop	r8
    372e:	7f 90       	pop	r7
    3730:	6f 90       	pop	r6
    3732:	08 95       	ret

Disassembly of section .text.handle_read:

0000177c <handle_read>:
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);
static void read_validate_SI(char res[]);

bool handle_read(const char cmd[], char res[]){
    177c:	cf 92       	push	r12
    177e:	df 92       	push	r13
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	68 97       	sbiw	r28, 0x18	; 24
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	6b 01       	movw	r12, r22
    179e:	e8 2e       	mov	r14, r24
    17a0:	f4 2e       	mov	r15, r20
    17a2:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    17a4:	21 e0       	ldi	r18, 0x01	; 1
    17a6:	ae 01       	movw	r20, r28
    17a8:	4f 5f       	subi	r20, 0xFF	; 255
    17aa:	5f 4f       	sbci	r21, 0xFF	; 255
    17ac:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    17b0:	18 2f       	mov	r17, r24
    17b2:	88 23       	and	r24, r24
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <handle_read+0x3c>
    17b6:	31 c1       	rjmp	.+610    	; 0x1a1a <handle_read+0x29e>
    17b8:	8e 2d       	mov	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <count_parameters>
    17c0:	82 30       	cpi	r24, 0x02	; 2
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <handle_read+0x4a>
    17c4:	29 c1       	rjmp	.+594    	; 0x1a18 <handle_read+0x29c>
	
	if (strcmp(par, RW_DEVEUI)==0)
    17c6:	ce 01       	movw	r24, r28
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	6c 01       	movw	r12, r24
    17cc:	20 e8       	ldi	r18, 0x80	; 128
    17ce:	e2 2e       	mov	r14, r18
    17d0:	2c ec       	ldi	r18, 0xCC	; 204
    17d2:	33 e0       	ldi	r19, 0x03	; 3
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	8e 2d       	mov	r24, r14
    17d8:	b6 01       	movw	r22, r12
    17da:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    17de:	89 2b       	or	r24, r25
    17e0:	29 f4       	brne	.+10     	; 0x17ec <handle_read+0x70>
	{
		EM_get_deveui(res);
    17e2:	8f 2d       	mov	r24, r15
    17e4:	90 2f       	mov	r25, r16
    17e6:	0e 94 f8 32 	call	0x65f0	; 0x65f0 <EM_get_deveui>
    17ea:	17 c1       	rjmp	.+558    	; 0x1a1a <handle_read+0x29e>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    17ec:	23 ed       	ldi	r18, 0xD3	; 211
    17ee:	33 e0       	ldi	r19, 0x03	; 3
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	8e 2d       	mov	r24, r14
    17f4:	b6 01       	movw	r22, r12
    17f6:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    17fa:	89 2b       	or	r24, r25
    17fc:	29 f4       	brne	.+10     	; 0x1808 <handle_read+0x8c>
	{
		EM_get_appeui(res);
    17fe:	8f 2d       	mov	r24, r15
    1800:	90 2f       	mov	r25, r16
    1802:	0e 94 10 33 	call	0x6620	; 0x6620 <EM_get_appeui>
    1806:	09 c1       	rjmp	.+530    	; 0x1a1a <handle_read+0x29e>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    1808:	2a ed       	ldi	r18, 0xDA	; 218
    180a:	33 e0       	ldi	r19, 0x03	; 3
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	8e 2d       	mov	r24, r14
    1810:	b6 01       	movw	r22, r12
    1812:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1816:	89 2b       	or	r24, r25
    1818:	29 f4       	brne	.+10     	; 0x1824 <handle_read+0xa8>
	{
		EM_get_appkey(res);
    181a:	8f 2d       	mov	r24, r15
    181c:	90 2f       	mov	r25, r16
    181e:	0e 94 28 33 	call	0x6650	; 0x6650 <EM_get_appkey>
    1822:	fb c0       	rjmp	.+502    	; 0x1a1a <handle_read+0x29e>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1824:	21 ee       	ldi	r18, 0xE1	; 225
    1826:	33 e0       	ldi	r19, 0x03	; 3
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	8e 2d       	mov	r24, r14
    182c:	b6 01       	movw	r22, r12
    182e:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1832:	89 2b       	or	r24, r25
    1834:	e1 f4       	brne	.+56     	; 0x186e <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    1836:	ce 01       	movw	r24, r28
    1838:	45 96       	adiw	r24, 0x15	; 21
    183a:	0e 94 75 35 	call	0x6aea	; 0x6aea <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    183e:	88 8d       	ldd	r24, Y+24	; 0x18
    1840:	8f 93       	push	r24
    1842:	8f 89       	ldd	r24, Y+23	; 0x17
    1844:	8f 93       	push	r24
    1846:	8e 89       	ldd	r24, Y+22	; 0x16
    1848:	8f 93       	push	r24
    184a:	8d 89       	ldd	r24, Y+21	; 0x15
    184c:	8f 93       	push	r24
    184e:	86 ee       	ldi	r24, 0xE6	; 230
    1850:	93 e0       	ldi	r25, 0x03	; 3
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	af 93       	push	r26
    1856:	9f 93       	push	r25
    1858:	8f 93       	push	r24
    185a:	0f 93       	push	r16
    185c:	ff 92       	push	r15
    185e:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	d6 c0       	rjmp	.+428    	; 0x1a1a <handle_read+0x29e>
	}
	else if(strcmp(par, RW_RRL)==0)
    186e:	2b ee       	ldi	r18, 0xEB	; 235
    1870:	33 e0       	ldi	r19, 0x03	; 3
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	8e 2d       	mov	r24, r14
    1876:	b6 01       	movw	r22, r12
    1878:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    187c:	89 2b       	or	r24, r25
    187e:	e1 f4       	brne	.+56     	; 0x18b8 <handle_read+0x13c>
	{
		EM_get_RRL(&val);
    1880:	ce 01       	movw	r24, r28
    1882:	45 96       	adiw	r24, 0x15	; 21
    1884:	0e 94 84 35 	call	0x6b08	; 0x6b08 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    1888:	88 8d       	ldd	r24, Y+24	; 0x18
    188a:	8f 93       	push	r24
    188c:	8f 89       	ldd	r24, Y+23	; 0x17
    188e:	8f 93       	push	r24
    1890:	8e 89       	ldd	r24, Y+22	; 0x16
    1892:	8f 93       	push	r24
    1894:	8d 89       	ldd	r24, Y+21	; 0x15
    1896:	8f 93       	push	r24
    1898:	86 ee       	ldi	r24, 0xE6	; 230
    189a:	93 e0       	ldi	r25, 0x03	; 3
    189c:	a0 e0       	ldi	r26, 0x00	; 0
    189e:	af 93       	push	r26
    18a0:	9f 93       	push	r25
    18a2:	8f 93       	push	r24
    18a4:	0f 93       	push	r16
    18a6:	ff 92       	push	r15
    18a8:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	b1 c0       	rjmp	.+354    	; 0x1a1a <handle_read+0x29e>
	}
	else if(strcmp(par, RW_VCC)==0)
    18b8:	20 ef       	ldi	r18, 0xF0	; 240
    18ba:	33 e0       	ldi	r19, 0x03	; 3
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	8e 2d       	mov	r24, r14
    18c0:	b6 01       	movw	r22, r12
    18c2:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    18c6:	89 2b       	or	r24, r25
    18c8:	e1 f4       	brne	.+56     	; 0x1902 <handle_read+0x186>
	{
		EM_get_Vcc(&val);
    18ca:	ce 01       	movw	r24, r28
    18cc:	45 96       	adiw	r24, 0x15	; 21
    18ce:	0e 94 93 35 	call	0x6b26	; 0x6b26 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    18d2:	88 8d       	ldd	r24, Y+24	; 0x18
    18d4:	8f 93       	push	r24
    18d6:	8f 89       	ldd	r24, Y+23	; 0x17
    18d8:	8f 93       	push	r24
    18da:	8e 89       	ldd	r24, Y+22	; 0x16
    18dc:	8f 93       	push	r24
    18de:	8d 89       	ldd	r24, Y+21	; 0x15
    18e0:	8f 93       	push	r24
    18e2:	86 ee       	ldi	r24, 0xE6	; 230
    18e4:	93 e0       	ldi	r25, 0x03	; 3
    18e6:	a0 e0       	ldi	r26, 0x00	; 0
    18e8:	af 93       	push	r26
    18ea:	9f 93       	push	r25
    18ec:	8f 93       	push	r24
    18ee:	0f 93       	push	r16
    18f0:	ff 92       	push	r15
    18f2:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	8c c0       	rjmp	.+280    	; 0x1a1a <handle_read+0x29e>
	}
	else if(strcmp(par, RW_COLS)==0)
    1902:	25 ef       	ldi	r18, 0xF5	; 245
    1904:	33 e0       	ldi	r19, 0x03	; 3
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	8e 2d       	mov	r24, r14
    190a:	b6 01       	movw	r22, r12
    190c:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1910:	89 2b       	or	r24, r25
    1912:	29 f4       	brne	.+10     	; 0x191e <handle_read+0x1a2>
	{
		read_cols(res);
    1914:	8f 2d       	mov	r24, r15
    1916:	90 2f       	mov	r25, r16
    1918:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <read_cols>
    191c:	7e c0       	rjmp	.+252    	; 0x1a1a <handle_read+0x29e>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    191e:	2a ef       	ldi	r18, 0xFA	; 250
    1920:	33 e0       	ldi	r19, 0x03	; 3
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	8e 2d       	mov	r24, r14
    1926:	b6 01       	movw	r22, r12
    1928:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    192c:	89 2b       	or	r24, r25
    192e:	a1 f4       	brne	.+40     	; 0x1958 <handle_read+0x1dc>
	{
		uint8_t val=EM_get_heat_up_time();
    1930:	0e 94 34 38 	call	0x7068	; 0x7068 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    1934:	1f 92       	push	r1
    1936:	8f 93       	push	r24
    1938:	84 e0       	ldi	r24, 0x04	; 4
    193a:	94 e0       	ldi	r25, 0x04	; 4
    193c:	a0 e0       	ldi	r26, 0x00	; 0
    193e:	af 93       	push	r26
    1940:	9f 93       	push	r25
    1942:	8f 93       	push	r24
    1944:	0f 93       	push	r16
    1946:	ff 92       	push	r15
    1948:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	61 c0       	rjmp	.+194    	; 0x1a1a <handle_read+0x29e>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1958:	26 e1       	ldi	r18, 0x16	; 22
    195a:	34 e0       	ldi	r19, 0x04	; 4
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	8e 2d       	mov	r24, r14
    1960:	b6 01       	movw	r22, r12
    1962:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1966:	89 2b       	or	r24, r25
    1968:	a1 f4       	brne	.+40     	; 0x1992 <handle_read+0x216>
	{
		uint16_t val=EM_get_air_pump_time();
    196a:	0e 94 40 38 	call	0x7080	; 0x7080 <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    196e:	9f 93       	push	r25
    1970:	8f 93       	push	r24
    1972:	81 e2       	ldi	r24, 0x21	; 33
    1974:	94 e0       	ldi	r25, 0x04	; 4
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	af 93       	push	r26
    197a:	9f 93       	push	r25
    197c:	8f 93       	push	r24
    197e:	0f 93       	push	r16
    1980:	ff 92       	push	r15
    1982:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	44 c0       	rjmp	.+136    	; 0x1a1a <handle_read+0x29e>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1992:	24 e3       	ldi	r18, 0x34	; 52
    1994:	34 e0       	ldi	r19, 0x04	; 4
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	8e 2d       	mov	r24, r14
    199a:	b6 01       	movw	r22, r12
    199c:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    19a0:	89 2b       	or	r24, r25
    19a2:	a1 f4       	brne	.+40     	; 0x19cc <handle_read+0x250>
	{
		uint8_t val=EM_get_sp_interval();
    19a4:	0e 94 4c 38 	call	0x7098	; 0x7098 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    19a8:	1f 92       	push	r1
    19aa:	8f 93       	push	r24
    19ac:	80 e4       	ldi	r24, 0x40	; 64
    19ae:	94 e0       	ldi	r25, 0x04	; 4
    19b0:	a0 e0       	ldi	r26, 0x00	; 0
    19b2:	af 93       	push	r26
    19b4:	9f 93       	push	r25
    19b6:	8f 93       	push	r24
    19b8:	0f 93       	push	r16
    19ba:	ff 92       	push	r15
    19bc:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	27 c0       	rjmp	.+78     	; 0x1a1a <handle_read+0x29e>
	}
	else if(strcmp(par, RW_TIME)==0)
    19cc:	2f e5       	ldi	r18, 0x5F	; 95
    19ce:	34 e0       	ldi	r19, 0x04	; 4
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	8e 2d       	mov	r24, r14
    19d4:	b6 01       	movw	r22, r12
    19d6:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    19da:	89 2b       	or	r24, r25
    19dc:	29 f4       	brne	.+10     	; 0x19e8 <handle_read+0x26c>
	{
		read_time(res);
    19de:	8f 2d       	mov	r24, r15
    19e0:	90 2f       	mov	r25, r16
    19e2:	0e 94 4a 23 	call	0x4694	; 0x4694 <read_time>
    19e6:	19 c0       	rjmp	.+50     	; 0x1a1a <handle_read+0x29e>
	}
	else if(strcmp(par, RW_VALIDATE_SI)==0)
    19e8:	24 e6       	ldi	r18, 0x64	; 100
    19ea:	34 e0       	ldi	r19, 0x04	; 4
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	8e 2d       	mov	r24, r14
    19f0:	b6 01       	movw	r22, r12
    19f2:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    19f6:	89 2b       	or	r24, r25
    19f8:	29 f4       	brne	.+10     	; 0x1a04 <handle_read+0x288>
	{
		read_validate_SI(res);
    19fa:	8f 2d       	mov	r24, r15
    19fc:	90 2f       	mov	r25, r16
    19fe:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <read_validate_SI>
    1a02:	0b c0       	rjmp	.+22     	; 0x1a1a <handle_read+0x29e>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1a04:	26 e1       	ldi	r18, 0x16	; 22
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4d e6       	ldi	r20, 0x6D	; 109
    1a0a:	54 e0       	ldi	r21, 0x04	; 4
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	8f 2d       	mov	r24, r15
    1a10:	90 2f       	mov	r25, r16
    1a12:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
    1a16:	01 c0       	rjmp	.+2      	; 0x1a1a <handle_read+0x29e>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1a18:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1a1a:	81 2f       	mov	r24, r17
    1a1c:	68 96       	adiw	r28, 0x18	; 24
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	df 90       	pop	r13
    1a36:	cf 90       	pop	r12
    1a38:	08 95       	ret

Disassembly of section .text.handle_write:

00001cde <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1cde:	6f 92       	push	r6
    1ce0:	7f 92       	push	r7
    1ce2:	8f 92       	push	r8
    1ce4:	af 92       	push	r10
    1ce6:	bf 92       	push	r11
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	1f 93       	push	r17
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	64 97       	sbiw	r28, 0x14	; 20
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	3b 01       	movw	r6, r22
    1d06:	88 2e       	mov	r8, r24
    1d08:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1d0a:	21 e0       	ldi	r18, 0x01	; 1
    1d0c:	ae 01       	movw	r20, r28
    1d0e:	4f 5f       	subi	r20, 0xFF	; 255
    1d10:	5f 4f       	sbci	r21, 0xFF	; 255
    1d12:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    1d16:	18 2f       	mov	r17, r24
    1d18:	88 23       	and	r24, r24
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <handle_write+0x40>
    1d1c:	cd c0       	rjmp	.+410    	; 0x1eb8 <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1d1e:	ce 01       	movw	r24, r28
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	6c 01       	movw	r12, r24
    1d24:	20 e8       	ldi	r18, 0x80	; 128
    1d26:	e2 2e       	mov	r14, r18
    1d28:	2c ec       	ldi	r18, 0xCC	; 204
    1d2a:	33 e0       	ldi	r19, 0x03	; 3
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	8e 2d       	mov	r24, r14
    1d30:	b6 01       	movw	r22, r12
    1d32:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1d36:	89 2b       	or	r24, r25
    1d38:	39 f4       	brne	.+14     	; 0x1d48 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1d3a:	a5 01       	movw	r20, r10
    1d3c:	88 2d       	mov	r24, r8
    1d3e:	b3 01       	movw	r22, r6
    1d40:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <write_deveui>
    1d44:	18 2f       	mov	r17, r24
    1d46:	b8 c0       	rjmp	.+368    	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1d48:	23 ed       	ldi	r18, 0xD3	; 211
    1d4a:	33 e0       	ldi	r19, 0x03	; 3
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	8e 2d       	mov	r24, r14
    1d50:	b6 01       	movw	r22, r12
    1d52:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1d56:	89 2b       	or	r24, r25
    1d58:	39 f4       	brne	.+14     	; 0x1d68 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1d5a:	a5 01       	movw	r20, r10
    1d5c:	88 2d       	mov	r24, r8
    1d5e:	b3 01       	movw	r22, r6
    1d60:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <write_appeui>
    1d64:	18 2f       	mov	r17, r24
    1d66:	a8 c0       	rjmp	.+336    	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1d68:	2a ed       	ldi	r18, 0xDA	; 218
    1d6a:	33 e0       	ldi	r19, 0x03	; 3
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	8e 2d       	mov	r24, r14
    1d70:	b6 01       	movw	r22, r12
    1d72:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1d76:	89 2b       	or	r24, r25
    1d78:	39 f4       	brne	.+14     	; 0x1d88 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1d7a:	a5 01       	movw	r20, r10
    1d7c:	88 2d       	mov	r24, r8
    1d7e:	b3 01       	movw	r22, r6
    1d80:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <write_appkey>
    1d84:	18 2f       	mov	r17, r24
    1d86:	98 c0       	rjmp	.+304    	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1d88:	21 ee       	ldi	r18, 0xE1	; 225
    1d8a:	33 e0       	ldi	r19, 0x03	; 3
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	8e 2d       	mov	r24, r14
    1d90:	b6 01       	movw	r22, r12
    1d92:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1d96:	89 2b       	or	r24, r25
    1d98:	39 f4       	brne	.+14     	; 0x1da8 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1d9a:	a5 01       	movw	r20, r10
    1d9c:	88 2d       	mov	r24, r8
    1d9e:	b3 01       	movw	r22, r6
    1da0:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <write_PPM_factor>
    1da4:	18 2f       	mov	r17, r24
    1da6:	88 c0       	rjmp	.+272    	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1da8:	2b ee       	ldi	r18, 0xEB	; 235
    1daa:	33 e0       	ldi	r19, 0x03	; 3
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	8e 2d       	mov	r24, r14
    1db0:	b6 01       	movw	r22, r12
    1db2:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1db6:	89 2b       	or	r24, r25
    1db8:	39 f4       	brne	.+14     	; 0x1dc8 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1dba:	a5 01       	movw	r20, r10
    1dbc:	88 2d       	mov	r24, r8
    1dbe:	b3 01       	movw	r22, r6
    1dc0:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <write_RRL>
    1dc4:	18 2f       	mov	r17, r24
    1dc6:	78 c0       	rjmp	.+240    	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1dc8:	20 ef       	ldi	r18, 0xF0	; 240
    1dca:	33 e0       	ldi	r19, 0x03	; 3
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	8e 2d       	mov	r24, r14
    1dd0:	b6 01       	movw	r22, r12
    1dd2:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1dd6:	89 2b       	or	r24, r25
    1dd8:	39 f4       	brne	.+14     	; 0x1de8 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1dda:	a5 01       	movw	r20, r10
    1ddc:	88 2d       	mov	r24, r8
    1dde:	b3 01       	movw	r22, r6
    1de0:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <write_VCC>
    1de4:	18 2f       	mov	r17, r24
    1de6:	68 c0       	rjmp	.+208    	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    1de8:	25 ef       	ldi	r18, 0xF5	; 245
    1dea:	33 e0       	ldi	r19, 0x03	; 3
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	8e 2d       	mov	r24, r14
    1df0:	b6 01       	movw	r22, r12
    1df2:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1df6:	89 2b       	or	r24, r25
    1df8:	39 f4       	brne	.+14     	; 0x1e08 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1dfa:	a5 01       	movw	r20, r10
    1dfc:	88 2d       	mov	r24, r8
    1dfe:	b3 01       	movw	r22, r6
    1e00:	0e 94 92 14 	call	0x2924	; 0x2924 <write_cols>
    1e04:	18 2f       	mov	r17, r24
    1e06:	58 c0       	rjmp	.+176    	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1e08:	2a ef       	ldi	r18, 0xFA	; 250
    1e0a:	33 e0       	ldi	r19, 0x03	; 3
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	8e 2d       	mov	r24, r14
    1e10:	b6 01       	movw	r22, r12
    1e12:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1e16:	89 2b       	or	r24, r25
    1e18:	39 f4       	brne	.+14     	; 0x1e28 <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    1e1a:	a5 01       	movw	r20, r10
    1e1c:	88 2d       	mov	r24, r8
    1e1e:	b3 01       	movw	r22, r6
    1e20:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <write_heat_up>
    1e24:	18 2f       	mov	r17, r24
    1e26:	48 c0       	rjmp	.+144    	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1e28:	26 e1       	ldi	r18, 0x16	; 22
    1e2a:	34 e0       	ldi	r19, 0x04	; 4
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	8e 2d       	mov	r24, r14
    1e30:	b6 01       	movw	r22, r12
    1e32:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1e36:	89 2b       	or	r24, r25
    1e38:	39 f4       	brne	.+14     	; 0x1e48 <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1e3a:	a5 01       	movw	r20, r10
    1e3c:	88 2d       	mov	r24, r8
    1e3e:	b3 01       	movw	r22, r6
    1e40:	0e 94 cb 2b 	call	0x5796	; 0x5796 <write_air_pump>
    1e44:	18 2f       	mov	r17, r24
    1e46:	38 c0       	rjmp	.+112    	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1e48:	24 e3       	ldi	r18, 0x34	; 52
    1e4a:	34 e0       	ldi	r19, 0x04	; 4
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	8e 2d       	mov	r24, r14
    1e50:	b6 01       	movw	r22, r12
    1e52:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1e56:	89 2b       	or	r24, r25
    1e58:	39 f4       	brne	.+14     	; 0x1e68 <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1e5a:	a5 01       	movw	r20, r10
    1e5c:	88 2d       	mov	r24, r8
    1e5e:	b3 01       	movw	r22, r6
    1e60:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <write_sp_interval>
    1e64:	18 2f       	mov	r17, r24
    1e66:	28 c0       	rjmp	.+80     	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1e68:	23 e8       	ldi	r18, 0x83	; 131
    1e6a:	34 e0       	ldi	r19, 0x04	; 4
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	8e 2d       	mov	r24, r14
    1e70:	b6 01       	movw	r22, r12
    1e72:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1e76:	89 2b       	or	r24, r25
    1e78:	39 f4       	brne	.+14     	; 0x1e88 <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1e7a:	a5 01       	movw	r20, r10
    1e7c:	88 2d       	mov	r24, r8
    1e7e:	b3 01       	movw	r22, r6
    1e80:	0e 94 8e 1c 	call	0x391c	; 0x391c <write_reset>
    1e84:	18 2f       	mov	r17, r24
    1e86:	18 c0       	rjmp	.+48     	; 0x1eb8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1e88:	2f e5       	ldi	r18, 0x5F	; 95
    1e8a:	34 e0       	ldi	r19, 0x04	; 4
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	8e 2d       	mov	r24, r14
    1e90:	b6 01       	movw	r22, r12
    1e92:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    1e96:	89 2b       	or	r24, r25
    1e98:	39 f4       	brne	.+14     	; 0x1ea8 <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1e9a:	a5 01       	movw	r20, r10
    1e9c:	88 2d       	mov	r24, r8
    1e9e:	b3 01       	movw	r22, r6
    1ea0:	0e 94 1b 1b 	call	0x3636	; 0x3636 <write_time>
    1ea4:	18 2f       	mov	r17, r24
    1ea6:	08 c0       	rjmp	.+16     	; 0x1eb8 <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1ea8:	26 e1       	ldi	r18, 0x16	; 22
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4d e6       	ldi	r20, 0x6D	; 109
    1eae:	54 e0       	ldi	r21, 0x04	; 4
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	c5 01       	movw	r24, r10
    1eb4:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
	}
	
}
    1eb8:	81 2f       	mov	r24, r17
    1eba:	64 96       	adiw	r28, 0x14	; 20
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	1f 91       	pop	r17
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	cf 90       	pop	r12
    1ed2:	bf 90       	pop	r11
    1ed4:	af 90       	pop	r10
    1ed6:	8f 90       	pop	r8
    1ed8:	7f 90       	pop	r7
    1eda:	6f 90       	pop	r6
    1edc:	08 95       	ret

Disassembly of section .text.handle_methane:

0000208e <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    208e:	9f 92       	push	r9
    2090:	af 92       	push	r10
    2092:	bf 92       	push	r11
    2094:	cf 92       	push	r12
    2096:	df 92       	push	r13
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	2e 97       	sbiw	r28, 0x0e	; 14
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	94 2e       	mov	r9, r20
    20b6:	a5 2e       	mov	r10, r21
	if(!get_parameter(cmd, par, 2)) return false;
    20b8:	22 e0       	ldi	r18, 0x02	; 2
    20ba:	42 e4       	ldi	r20, 0x42	; 66
    20bc:	5e e0       	ldi	r21, 0x0E	; 14
    20be:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    20c2:	b8 2e       	mov	r11, r24
    20c4:	88 23       	and	r24, r24
    20c6:	09 f4       	brne	.+2      	; 0x20ca <handle_methane+0x3c>
    20c8:	92 c0       	rjmp	.+292    	; 0x21ee <handle_methane+0x160>
	
	if(strcmp(par, METH_POWER_ON)==0){
    20ca:	82 e4       	ldi	r24, 0x42	; 66
    20cc:	9e e0       	ldi	r25, 0x0E	; 14
    20ce:	6c 01       	movw	r12, r24
    20d0:	20 e8       	ldi	r18, 0x80	; 128
    20d2:	e2 2e       	mov	r14, r18
    20d4:	20 ea       	ldi	r18, 0xA0	; 160
    20d6:	36 e0       	ldi	r19, 0x06	; 6
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	8e 2d       	mov	r24, r14
    20dc:	b6 01       	movw	r22, r12
    20de:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    20e2:	89 2b       	or	r24, r25
    20e4:	79 f4       	brne	.+30     	; 0x2104 <handle_methane+0x76>
		PM_HAL_meth_power_init();
    20e6:	0e 94 8f 37 	call	0x6f1e	; 0x6f1e <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    20f0:	28 e1       	ldi	r18, 0x18	; 24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	43 ea       	ldi	r20, 0xA3	; 163
    20f6:	56 e0       	ldi	r21, 0x06	; 6
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	89 2d       	mov	r24, r9
    20fc:	9a 2d       	mov	r25, r10
    20fe:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
    2102:	75 c0       	rjmp	.+234    	; 0x21ee <handle_methane+0x160>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    2104:	2b eb       	ldi	r18, 0xBB	; 187
    2106:	36 e0       	ldi	r19, 0x06	; 6
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	8e 2d       	mov	r24, r14
    210c:	b6 01       	movw	r22, r12
    210e:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    2112:	89 2b       	or	r24, r25
    2114:	79 f4       	brne	.+30     	; 0x2134 <handle_methane+0xa6>
		PM_HAL_meth_power_init();
    2116:	0e 94 8f 37 	call	0x6f1e	; 0x6f1e <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    2120:	29 e1       	ldi	r18, 0x19	; 25
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4f eb       	ldi	r20, 0xBF	; 191
    2126:	56 e0       	ldi	r21, 0x06	; 6
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	89 2d       	mov	r24, r9
    212c:	9a 2d       	mov	r25, r10
    212e:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
    2132:	5d c0       	rjmp	.+186    	; 0x21ee <handle_methane+0x160>
	}
	else if(strcmp(par, METH_READ)==0)
    2134:	28 ed       	ldi	r18, 0xD8	; 216
    2136:	36 e0       	ldi	r19, 0x06	; 6
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	8e 2d       	mov	r24, r14
    213c:	b6 01       	movw	r22, r12
    213e:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    2142:	89 2b       	or	r24, r25
    2144:	09 f0       	breq	.+2      	; 0x2148 <handle_methane+0xba>
    2146:	4a c0       	rjmp	.+148    	; 0x21dc <handle_methane+0x14e>
	{
		//Set parameters
		float vccx=0.0;
    2148:	19 86       	std	Y+9, r1	; 0x09
    214a:	1a 86       	std	Y+10, r1	; 0x0a
    214c:	1b 86       	std	Y+11, r1	; 0x0b
    214e:	1c 86       	std	Y+12, r1	; 0x0c
		float rrlx=0.0;
    2150:	1d 82       	std	Y+5, r1	; 0x05
    2152:	1e 82       	std	Y+6, r1	; 0x06
    2154:	1f 82       	std	Y+7, r1	; 0x07
    2156:	18 86       	std	Y+8, r1	; 0x08
		float ppmx=0.0;
    2158:	19 82       	std	Y+1, r1	; 0x01
    215a:	1a 82       	std	Y+2, r1	; 0x02
    215c:	1b 82       	std	Y+3, r1	; 0x03
    215e:	1c 82       	std	Y+4, r1	; 0x04
		
		EM_get_Vcc(&vccx);
    2160:	ce 01       	movw	r24, r28
    2162:	09 96       	adiw	r24, 0x09	; 9
    2164:	0e 94 93 35 	call	0x6b26	; 0x6b26 <EM_get_Vcc>
		EM_get_RRL(&rrlx);
    2168:	ce 01       	movw	r24, r28
    216a:	05 96       	adiw	r24, 0x05	; 5
    216c:	0e 94 84 35 	call	0x6b08	; 0x6b08 <EM_get_RRL>
		EM_get_ppmfactor(&ppmx);
    2170:	ce 01       	movw	r24, r28
    2172:	01 96       	adiw	r24, 0x01	; 1
    2174:	0e 94 75 35 	call	0x6aea	; 0x6aea <EM_get_ppmfactor>
		
		ADC_set_conf_parameters(vccx, rrlx, ppmx);
    2178:	e9 80       	ldd	r14, Y+1	; 0x01
    217a:	fa 80       	ldd	r15, Y+2	; 0x02
    217c:	0b 81       	ldd	r16, Y+3	; 0x03
    217e:	1c 81       	ldd	r17, Y+4	; 0x04
    2180:	2d 81       	ldd	r18, Y+5	; 0x05
    2182:	3e 81       	ldd	r19, Y+6	; 0x06
    2184:	4f 81       	ldd	r20, Y+7	; 0x07
    2186:	58 85       	ldd	r21, Y+8	; 0x08
    2188:	69 85       	ldd	r22, Y+9	; 0x09
    218a:	7a 85       	ldd	r23, Y+10	; 0x0a
    218c:	8b 85       	ldd	r24, Y+11	; 0x0b
    218e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2190:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <ADC_set_conf_parameters>
		
		
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    2194:	ce 01       	movw	r24, r28
    2196:	0d 96       	adiw	r24, 0x0d	; 13
    2198:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <ADC_get_value>
    219c:	88 23       	and	r24, r24
    219e:	51 f0       	breq	.+20     	; 0x21b4 <handle_methane+0x126>
		{
			strcpy(res, "Error when reading data");
    21a0:	28 e1       	ldi	r18, 0x18	; 24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	4d ed       	ldi	r20, 0xDD	; 221
    21a6:	56 e0       	ldi	r21, 0x06	; 6
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	89 2d       	mov	r24, r9
    21ac:	9a 2d       	mov	r25, r10
    21ae:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
    21b2:	1d c0       	rjmp	.+58     	; 0x21ee <handle_methane+0x160>
		}else{
			sprintf(res, "PPM=%u", val);
    21b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    21b6:	8f 93       	push	r24
    21b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ba:	8f 93       	push	r24
    21bc:	85 ef       	ldi	r24, 0xF5	; 245
    21be:	96 e0       	ldi	r25, 0x06	; 6
    21c0:	a0 e0       	ldi	r26, 0x00	; 0
    21c2:	af 93       	push	r26
    21c4:	9f 93       	push	r25
    21c6:	8f 93       	push	r24
    21c8:	af 92       	push	r10
    21ca:	9f 92       	push	r9
    21cc:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	09 c0       	rjmp	.+18     	; 0x21ee <handle_methane+0x160>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    21dc:	26 e1       	ldi	r18, 0x16	; 22
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4c ef       	ldi	r20, 0xFC	; 252
    21e2:	56 e0       	ldi	r21, 0x06	; 6
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	89 2d       	mov	r24, r9
    21e8:	9a 2d       	mov	r25, r10
    21ea:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
	}
	return false;
}
    21ee:	8b 2d       	mov	r24, r11
    21f0:	2e 96       	adiw	r28, 0x0e	; 14
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	ff 90       	pop	r15
    2206:	ef 90       	pop	r14
    2208:	df 90       	pop	r13
    220a:	cf 90       	pop	r12
    220c:	bf 90       	pop	r11
    220e:	af 90       	pop	r10
    2210:	9f 90       	pop	r9
    2212:	08 95       	ret

Disassembly of section .text.handle_SCD30:

00003308 <handle_SCD30>:

static bool handle_SCD30(const char cmd[], char res[]){
    3308:	bf 92       	push	r11
    330a:	cf 92       	push	r12
    330c:	df 92       	push	r13
    330e:	ef 92       	push	r14
    3310:	ff 92       	push	r15
    3312:	0f 93       	push	r16
    3314:	1f 93       	push	r17
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	00 d0       	rcall	.+0      	; 0x331c <handle_SCD30+0x14>
    331c:	00 d0       	rcall	.+0      	; 0x331e <handle_SCD30+0x16>
    331e:	00 d0       	rcall	.+0      	; 0x3320 <handle_SCD30+0x18>
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	f4 2e       	mov	r15, r20
    3326:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    3328:	22 e0       	ldi	r18, 0x02	; 2
    332a:	42 e4       	ldi	r20, 0x42	; 66
    332c:	5e e0       	ldi	r21, 0x0E	; 14
    332e:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    3332:	18 2f       	mov	r17, r24
    3334:	88 23       	and	r24, r24
    3336:	09 f4       	brne	.+2      	; 0x333a <handle_SCD30+0x32>
    3338:	62 c0       	rjmp	.+196    	; 0x33fe <handle_SCD30+0xf6>
	
	if(strcmp(par, SCD30_READ)==0){
    333a:	62 e4       	ldi	r22, 0x42	; 66
    333c:	7e e0       	ldi	r23, 0x0E	; 14
    333e:	80 e8       	ldi	r24, 0x80	; 128
    3340:	28 ed       	ldi	r18, 0xD8	; 216
    3342:	36 e0       	ldi	r19, 0x06	; 6
    3344:	40 e0       	ldi	r20, 0x00	; 0
    3346:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    334a:	89 2b       	or	r24, r25
    334c:	09 f0       	breq	.+2      	; 0x3350 <handle_SCD30+0x48>
    334e:	4e c0       	rjmp	.+156    	; 0x33ec <handle_SCD30+0xe4>
		uint16_t co2, temp, humidity;
		if(SCD30_get_reading(&co2, &temp, &humidity)!=SCD30_STATUS_SUCCESS){
    3350:	ae 01       	movw	r20, r28
    3352:	4f 5f       	subi	r20, 0xFF	; 255
    3354:	5f 4f       	sbci	r21, 0xFF	; 255
    3356:	be 01       	movw	r22, r28
    3358:	6d 5f       	subi	r22, 0xFD	; 253
    335a:	7f 4f       	sbci	r23, 0xFF	; 255
    335c:	ce 01       	movw	r24, r28
    335e:	05 96       	adiw	r24, 0x05	; 5
    3360:	0e 94 ae 32 	call	0x655c	; 0x655c <SCD30_get_reading>
    3364:	88 23       	and	r24, r24
    3366:	51 f0       	breq	.+20     	; 0x337c <handle_SCD30+0x74>
			strcpy(res, "Error when reading data");
    3368:	28 e1       	ldi	r18, 0x18	; 24
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	4d ed       	ldi	r20, 0xDD	; 221
    336e:	56 e0       	ldi	r21, 0x06	; 6
    3370:	60 e0       	ldi	r22, 0x00	; 0
    3372:	8f 2d       	mov	r24, r15
    3374:	90 2f       	mov	r25, r16
    3376:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
    337a:	41 c0       	rjmp	.+130    	; 0x33fe <handle_SCD30+0xf6>
		}else{
			float temp_f=(float)temp/10.00;
    337c:	6b 81       	ldd	r22, Y+3	; 0x03
    337e:	7c 81       	ldd	r23, Y+4	; 0x04
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	0e 94 d7 24 	call	0x49ae	; 0x49ae <__floatunsisf>
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e2       	ldi	r20, 0x20	; 32
    338e:	51 e4       	ldi	r21, 0x41	; 65
    3390:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <__divsf3>
    3394:	e6 2e       	mov	r14, r22
    3396:	d7 2e       	mov	r13, r23
    3398:	c8 2e       	mov	r12, r24
    339a:	b9 2e       	mov	r11, r25
			float hum_f=(float)humidity/10.00;
    339c:	69 81       	ldd	r22, Y+1	; 0x01
    339e:	7a 81       	ldd	r23, Y+2	; 0x02
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0e 94 d7 24 	call	0x49ae	; 0x49ae <__floatunsisf>
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e2       	ldi	r20, 0x20	; 32
    33ae:	51 e4       	ldi	r21, 0x41	; 65
    33b0:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <__divsf3>
			sprintf(res, "CO2=%u ppm, temp=%.1f C, humidity=%.1f%% RH", co2, temp_f, hum_f);
    33b4:	9f 93       	push	r25
    33b6:	8f 93       	push	r24
    33b8:	7f 93       	push	r23
    33ba:	6f 93       	push	r22
    33bc:	bf 92       	push	r11
    33be:	cf 92       	push	r12
    33c0:	df 92       	push	r13
    33c2:	ef 92       	push	r14
    33c4:	8e 81       	ldd	r24, Y+6	; 0x06
    33c6:	8f 93       	push	r24
    33c8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ca:	8f 93       	push	r24
    33cc:	82 e1       	ldi	r24, 0x12	; 18
    33ce:	97 e0       	ldi	r25, 0x07	; 7
    33d0:	a0 e0       	ldi	r26, 0x00	; 0
    33d2:	af 93       	push	r26
    33d4:	9f 93       	push	r25
    33d6:	8f 93       	push	r24
    33d8:	0f 93       	push	r16
    33da:	ff 92       	push	r15
    33dc:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <sprintf>
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	de bf       	out	0x3e, r29	; 62
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	cd bf       	out	0x3d, r28	; 61
    33ea:	09 c0       	rjmp	.+18     	; 0x33fe <handle_SCD30+0xf6>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    33ec:	26 e1       	ldi	r18, 0x16	; 22
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	4c ef       	ldi	r20, 0xFC	; 252
    33f2:	56 e0       	ldi	r21, 0x06	; 6
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	8f 2d       	mov	r24, r15
    33f8:	90 2f       	mov	r25, r16
    33fa:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
	}
}
    33fe:	81 2f       	mov	r24, r17
    3400:	26 96       	adiw	r28, 0x06	; 6
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	1f 91       	pop	r17
    3412:	0f 91       	pop	r16
    3414:	ff 90       	pop	r15
    3416:	ef 90       	pop	r14
    3418:	df 90       	pop	r13
    341a:	cf 90       	pop	r12
    341c:	bf 90       	pop	r11
    341e:	08 95       	ret

Disassembly of section .text.handle_pump:

00004398 <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    4398:	cf 92       	push	r12
    439a:	df 92       	push	r13
    439c:	ef 92       	push	r14
    439e:	0f 93       	push	r16
    43a0:	1f 93       	push	r17
    43a2:	cf 93       	push	r28
    43a4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    43a6:	22 e0       	ldi	r18, 0x02	; 2
    43a8:	42 e4       	ldi	r20, 0x42	; 66
    43aa:	5e e0       	ldi	r21, 0x0E	; 14
    43ac:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    43b0:	c8 2f       	mov	r28, r24
    43b2:	88 23       	and	r24, r24
    43b4:	d9 f1       	breq	.+118    	; 0x442c <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    43b6:	82 e4       	ldi	r24, 0x42	; 66
    43b8:	9e e0       	ldi	r25, 0x0E	; 14
    43ba:	6c 01       	movw	r12, r24
    43bc:	20 e8       	ldi	r18, 0x80	; 128
    43be:	e2 2e       	mov	r14, r18
    43c0:	20 ea       	ldi	r18, 0xA0	; 160
    43c2:	36 e0       	ldi	r19, 0x06	; 6
    43c4:	40 e0       	ldi	r20, 0x00	; 0
    43c6:	8e 2d       	mov	r24, r14
    43c8:	b6 01       	movw	r22, r12
    43ca:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    43ce:	89 2b       	or	r24, r25
    43d0:	71 f4       	brne	.+28     	; 0x43ee <handle_pump+0x56>
		PM_HAL_BC_power_init();
    43d2:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    43d6:	81 e0       	ldi	r24, 0x01	; 1
    43d8:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    43dc:	25 e1       	ldi	r18, 0x15	; 21
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	4e e3       	ldi	r20, 0x3E	; 62
    43e2:	57 e0       	ldi	r21, 0x07	; 7
    43e4:	60 e0       	ldi	r22, 0x00	; 0
    43e6:	c8 01       	movw	r24, r16
    43e8:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
    43ec:	1f c0       	rjmp	.+62     	; 0x442c <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    43ee:	2b eb       	ldi	r18, 0xBB	; 187
    43f0:	36 e0       	ldi	r19, 0x06	; 6
    43f2:	40 e0       	ldi	r20, 0x00	; 0
    43f4:	8e 2d       	mov	r24, r14
    43f6:	b6 01       	movw	r22, r12
    43f8:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    43fc:	89 2b       	or	r24, r25
    43fe:	71 f4       	brne	.+28     	; 0x441c <handle_pump+0x84>
		PM_HAL_BC_power_init();
    4400:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    4404:	80 e0       	ldi	r24, 0x00	; 0
    4406:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    440a:	26 e1       	ldi	r18, 0x16	; 22
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	43 e5       	ldi	r20, 0x53	; 83
    4410:	57 e0       	ldi	r21, 0x07	; 7
    4412:	60 e0       	ldi	r22, 0x00	; 0
    4414:	c8 01       	movw	r24, r16
    4416:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
    441a:	08 c0       	rjmp	.+16     	; 0x442c <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    441c:	26 e1       	ldi	r18, 0x16	; 22
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	4c ef       	ldi	r20, 0xFC	; 252
    4422:	56 e0       	ldi	r21, 0x06	; 6
    4424:	60 e0       	ldi	r22, 0x00	; 0
    4426:	c8 01       	movw	r24, r16
    4428:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
	}
}
    442c:	8c 2f       	mov	r24, r28
    442e:	cf 91       	pop	r28
    4430:	1f 91       	pop	r17
    4432:	0f 91       	pop	r16
    4434:	ef 90       	pop	r14
    4436:	df 90       	pop	r13
    4438:	cf 90       	pop	r12
    443a:	08 95       	ret

Disassembly of section .text.handle_sensor:

00003f82 <handle_sensor>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_SCD30(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sensor(const char cmd[], char res[]){
    3f82:	6f 92       	push	r6
    3f84:	7f 92       	push	r7
    3f86:	8f 92       	push	r8
    3f88:	cf 92       	push	r12
    3f8a:	df 92       	push	r13
    3f8c:	ef 92       	push	r14
    3f8e:	0f 93       	push	r16
    3f90:	1f 93       	push	r17
    3f92:	cf 93       	push	r28
    3f94:	3b 01       	movw	r6, r22
    3f96:	88 2e       	mov	r8, r24
    3f98:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    3f9a:	21 e0       	ldi	r18, 0x01	; 1
    3f9c:	42 e4       	ldi	r20, 0x42	; 66
    3f9e:	5e e0       	ldi	r21, 0x0E	; 14
    3fa0:	0e 94 ff 22 	call	0x45fe	; 0x45fe <get_parameter>
    3fa4:	c8 2f       	mov	r28, r24
    3fa6:	88 23       	and	r24, r24
    3fa8:	e9 f1       	breq	.+122    	; 0x4024 <handle_sensor+0xa2>
	
	if(strcmp(par, S_METH)==0){
    3faa:	82 e4       	ldi	r24, 0x42	; 66
    3fac:	9e e0       	ldi	r25, 0x0E	; 14
    3fae:	6c 01       	movw	r12, r24
    3fb0:	20 e8       	ldi	r18, 0x80	; 128
    3fb2:	e2 2e       	mov	r14, r18
    3fb4:	29 e6       	ldi	r18, 0x69	; 105
    3fb6:	37 e0       	ldi	r19, 0x07	; 7
    3fb8:	40 e0       	ldi	r20, 0x00	; 0
    3fba:	8e 2d       	mov	r24, r14
    3fbc:	b6 01       	movw	r22, r12
    3fbe:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    3fc2:	89 2b       	or	r24, r25
    3fc4:	39 f4       	brne	.+14     	; 0x3fd4 <handle_sensor+0x52>
		return handle_methane(cmd, res);
    3fc6:	a8 01       	movw	r20, r16
    3fc8:	88 2d       	mov	r24, r8
    3fca:	b3 01       	movw	r22, r6
    3fcc:	0e 94 47 10 	call	0x208e	; 0x208e <handle_methane>
    3fd0:	c8 2f       	mov	r28, r24
    3fd2:	28 c0       	rjmp	.+80     	; 0x4024 <handle_sensor+0xa2>
	}else if(strcmp(par, S_SCD30)==0){
    3fd4:	2e e6       	ldi	r18, 0x6E	; 110
    3fd6:	37 e0       	ldi	r19, 0x07	; 7
    3fd8:	40 e0       	ldi	r20, 0x00	; 0
    3fda:	8e 2d       	mov	r24, r14
    3fdc:	b6 01       	movw	r22, r12
    3fde:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    3fe2:	89 2b       	or	r24, r25
    3fe4:	39 f4       	brne	.+14     	; 0x3ff4 <handle_sensor+0x72>
		return handle_SCD30(cmd, res);
    3fe6:	a8 01       	movw	r20, r16
    3fe8:	88 2d       	mov	r24, r8
    3fea:	b3 01       	movw	r22, r6
    3fec:	0e 94 84 19 	call	0x3308	; 0x3308 <handle_SCD30>
    3ff0:	c8 2f       	mov	r28, r24
    3ff2:	18 c0       	rjmp	.+48     	; 0x4024 <handle_sensor+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    3ff4:	24 e7       	ldi	r18, 0x74	; 116
    3ff6:	37 e0       	ldi	r19, 0x07	; 7
    3ff8:	40 e0       	ldi	r20, 0x00	; 0
    3ffa:	8e 2d       	mov	r24, r14
    3ffc:	b6 01       	movw	r22, r12
    3ffe:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <strcmp>
    4002:	89 2b       	or	r24, r25
    4004:	39 f4       	brne	.+14     	; 0x4014 <handle_sensor+0x92>
		return handle_pump(cmd, res);
    4006:	a8 01       	movw	r20, r16
    4008:	88 2d       	mov	r24, r8
    400a:	b3 01       	movw	r22, r6
    400c:	0e 94 cc 21 	call	0x4398	; 0x4398 <handle_pump>
    4010:	c8 2f       	mov	r28, r24
    4012:	08 c0       	rjmp	.+16     	; 0x4024 <handle_sensor+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    4014:	26 e1       	ldi	r18, 0x16	; 22
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	4c ef       	ldi	r20, 0xFC	; 252
    401a:	56 e0       	ldi	r21, 0x06	; 6
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	c8 01       	movw	r24, r16
    4020:	0e 94 c7 32 	call	0x658e	; 0x658e <memcpy>
		return true;
	}
}
    4024:	8c 2f       	mov	r24, r28
    4026:	cf 91       	pop	r28
    4028:	1f 91       	pop	r17
    402a:	0f 91       	pop	r16
    402c:	ef 90       	pop	r14
    402e:	df 90       	pop	r13
    4030:	cf 90       	pop	r12
    4032:	8f 90       	pop	r8
    4034:	7f 90       	pop	r7
    4036:	6f 90       	pop	r6
    4038:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

000068a0 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    68a0:	0e 94 1f 37 	call	0x6e3e	; 0x6e3e <TWI_HAL_init>
	PM_HAL_adc_power_init();
    68a4:	0e 94 88 37 	call	0x6f10	; 0x6f10 <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    68a8:	81 e0       	ldi	r24, 0x01	; 1
    68aa:	0e 94 b1 36 	call	0x6d62	; 0x6d62 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    68ae:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    68b2:	81 e0       	ldi	r24, 0x01	; 1
    68b4:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    68b8:	0e 94 78 34 	call	0x68f0	; 0x68f0 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    68bc:	88 23       	and	r24, r24
    68be:	11 f0       	breq	.+4      	; 0x68c4 <init_methane_SCD30+0x24>
    68c0:	80 e0       	ldi	r24, 0x00	; 0
    68c2:	08 95       	ret
	return true;
    68c4:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    68c6:	08 95       	ret

Disassembly of section .text.count_parameters:

000056f4 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    56f4:	6f 92       	push	r6
    56f6:	7f 92       	push	r7
    56f8:	8f 92       	push	r8
    56fa:	cf 92       	push	r12
    56fc:	df 92       	push	r13
    56fe:	ef 92       	push	r14
    5700:	3b 01       	movw	r6, r22
    5702:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    5704:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    5708:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    570a:	20 e0       	ldi	r18, 0x00	; 0
    570c:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    570e:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    5710:	10 c0       	rjmp	.+32     	; 0x5732 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    5712:	e8 2c       	mov	r14, r8
    5714:	63 01       	movw	r12, r6
    5716:	c2 0e       	add	r12, r18
    5718:	d3 1e       	adc	r13, r19
    571a:	e1 1c       	adc	r14, r1
    571c:	37 fd       	sbrc	r19, 7
    571e:	ea 94       	dec	r14
    5720:	f6 01       	movw	r30, r12
    5722:	94 91       	lpm	r25, Z
    5724:	e7 fc       	sbrc	r14, 7
    5726:	90 81       	ld	r25, Z
    5728:	90 32       	cpi	r25, 0x20	; 32
    572a:	09 f4       	brne	.+2      	; 0x572e <count_parameters+0x3a>
			cnt++;
    572c:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    572e:	2f 5f       	subi	r18, 0xFF	; 255
    5730:	3f 4f       	sbci	r19, 0xFF	; 255
    5732:	26 17       	cp	r18, r22
    5734:	37 07       	cpc	r19, r23
    5736:	68 f3       	brcs	.-38     	; 0x5712 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    5738:	ef 90       	pop	r14
    573a:	df 90       	pop	r13
    573c:	cf 90       	pop	r12
    573e:	8f 90       	pop	r8
    5740:	7f 90       	pop	r7
    5742:	6f 90       	pop	r6
    5744:	08 95       	ret

Disassembly of section .text.par_index:

00004dd8 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    4dd8:	cf 92       	push	r12
    4dda:	df 92       	push	r13
    4ddc:	ef 92       	push	r14
    4dde:	0f 93       	push	r16
    4de0:	1f 93       	push	r17
    4de2:	cf 93       	push	r28
    4de4:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4de6:	44 23       	and	r20, r20
    4de8:	29 f1       	breq	.+74     	; 0x4e34 <par_index+0x5c>
    4dea:	04 2f       	mov	r16, r20
    4dec:	6b 01       	movw	r12, r22
    4dee:	e8 2e       	mov	r14, r24
    4df0:	c0 e0       	ldi	r28, 0x00	; 0
    4df2:	d0 e0       	ldi	r29, 0x00	; 0
    4df4:	10 e0       	ldi	r17, 0x00	; 0
    4df6:	14 c0       	rjmp	.+40     	; 0x4e20 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    4df8:	ae 2d       	mov	r26, r14
    4dfa:	c6 01       	movw	r24, r12
    4dfc:	8c 0f       	add	r24, r28
    4dfe:	9d 1f       	adc	r25, r29
    4e00:	a1 1d       	adc	r26, r1
    4e02:	d7 fd       	sbrc	r29, 7
    4e04:	aa 95       	dec	r26
    4e06:	fc 01       	movw	r30, r24
    4e08:	84 91       	lpm	r24, Z
    4e0a:	a7 fd       	sbrc	r26, 7
    4e0c:	80 81       	ld	r24, Z
    4e0e:	80 32       	cpi	r24, 0x20	; 32
    4e10:	31 f4       	brne	.+12     	; 0x4e1e <par_index+0x46>
			cnt++;
    4e12:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    4e14:	01 13       	cpse	r16, r17
    4e16:	03 c0       	rjmp	.+6      	; 0x4e1e <par_index+0x46>
				return i+1;
    4e18:	ce 01       	movw	r24, r28
    4e1a:	01 96       	adiw	r24, 0x01	; 1
    4e1c:	0d c0       	rjmp	.+26     	; 0x4e38 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    4e1e:	21 96       	adiw	r28, 0x01	; 1
    4e20:	8e 2d       	mov	r24, r14
    4e22:	b6 01       	movw	r22, r12
    4e24:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    4e28:	c8 17       	cp	r28, r24
    4e2a:	d9 07       	cpc	r29, r25
    4e2c:	28 f3       	brcs	.-54     	; 0x4df8 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    4e2e:	80 e0       	ldi	r24, 0x00	; 0
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	02 c0       	rjmp	.+4      	; 0x4e38 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4e34:	80 e0       	ldi	r24, 0x00	; 0
    4e36:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    4e38:	df 91       	pop	r29
    4e3a:	cf 91       	pop	r28
    4e3c:	1f 91       	pop	r17
    4e3e:	0f 91       	pop	r16
    4e40:	ef 90       	pop	r14
    4e42:	df 90       	pop	r13
    4e44:	cf 90       	pop	r12
    4e46:	08 95       	ret

Disassembly of section .text.get_parameter:

000045fe <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    45fe:	8f 92       	push	r8
    4600:	9f 92       	push	r9
    4602:	af 92       	push	r10
    4604:	cf 92       	push	r12
    4606:	df 92       	push	r13
    4608:	ef 92       	push	r14
    460a:	ff 92       	push	r15
    460c:	0f 93       	push	r16
    460e:	1f 93       	push	r17
    4610:	cf 93       	push	r28
    4612:	df 93       	push	r29
    4614:	6b 01       	movw	r12, r22
    4616:	e8 2e       	mov	r14, r24
    4618:	ea 01       	movw	r28, r20
    461a:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    461c:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <count_parameters>
	if(pars<parNo) return false;
    4620:	8f 15       	cp	r24, r15
    4622:	58 f1       	brcs	.+86     	; 0x467a <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    4624:	8e 2d       	mov	r24, r14
    4626:	b6 01       	movw	r22, r12
    4628:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    462c:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    462e:	4f 2d       	mov	r20, r15
    4630:	8e 2d       	mov	r24, r14
    4632:	b6 01       	movw	r22, r12
    4634:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <par_index>
	uint8_t parLen=0;
    4638:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    463a:	15 c0       	rjmp	.+42     	; 0x4666 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    463c:	46 01       	movw	r8, r12
    463e:	ae 2c       	mov	r10, r14
    4640:	82 0e       	add	r8, r18
    4642:	93 1e       	adc	r9, r19
    4644:	a1 1c       	adc	r10, r1
    4646:	37 fd       	sbrc	r19, 7
    4648:	aa 94       	dec	r10
    464a:	4a 2d       	mov	r20, r10
    464c:	94 01       	movw	r18, r8
    464e:	f4 01       	movw	r30, r8
    4650:	24 91       	lpm	r18, Z
    4652:	47 fd       	sbrc	r20, 7
    4654:	20 81       	ld	r18, Z
    4656:	20 32       	cpi	r18, 0x20	; 32
    4658:	59 f0       	breq	.+22     	; 0x4670 <get_parameter+0x72>
		par[parLen++]=src[i];
    465a:	fe 01       	movw	r30, r28
    465c:	e9 0f       	add	r30, r25
    465e:	f1 1d       	adc	r31, r1
    4660:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    4662:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    4664:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    4666:	28 2f       	mov	r18, r24
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	20 17       	cp	r18, r16
    466c:	31 07       	cpc	r19, r17
    466e:	30 f3       	brcs	.-52     	; 0x463c <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    4670:	c9 0f       	add	r28, r25
    4672:	d1 1d       	adc	r29, r1
    4674:	18 82       	st	Y, r1
	
	return true;
    4676:	81 e0       	ldi	r24, 0x01	; 1
    4678:	01 c0       	rjmp	.+2      	; 0x467c <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    467a:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    467c:	df 91       	pop	r29
    467e:	cf 91       	pop	r28
    4680:	1f 91       	pop	r17
    4682:	0f 91       	pop	r16
    4684:	ff 90       	pop	r15
    4686:	ef 90       	pop	r14
    4688:	df 90       	pop	r13
    468a:	cf 90       	pop	r12
    468c:	af 90       	pop	r10
    468e:	9f 90       	pop	r9
    4690:	8f 90       	pop	r8
    4692:	08 95       	ret

Disassembly of section .text.decode_stage_response:

00006d36 <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    6d36:	88 23       	and	r24, r24
    6d38:	19 f0       	breq	.+6      	; 0x6d40 <decode_stage_response+0xa>
    6d3a:	81 30       	cpi	r24, 0x01	; 1
    6d3c:	29 f0       	breq	.+10     	; 0x6d48 <decode_stage_response+0x12>
    6d3e:	02 c0       	rjmp	.+4      	; 0x6d44 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    6d40:	81 e1       	ldi	r24, 0x11	; 17
    6d42:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    6d44:	86 e1       	ldi	r24, 0x16	; 22
    6d46:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    6d48:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6d4a:	08 95       	ret

Disassembly of section .text.decode_join_response:

00006c0e <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    6c0e:	82 30       	cpi	r24, 0x02	; 2
    6c10:	51 f0       	breq	.+20     	; 0x6c26 <decode_join_response+0x18>
    6c12:	83 30       	cpi	r24, 0x03	; 3
    6c14:	21 f0       	breq	.+8      	; 0x6c1e <decode_join_response+0x10>
    6c16:	81 11       	cpse	r24, r1
    6c18:	04 c0       	rjmp	.+8      	; 0x6c22 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    6c1a:	83 e0       	ldi	r24, 0x03	; 3
    6c1c:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    6c1e:	85 e0       	ldi	r24, 0x05	; 5
    6c20:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    6c22:	86 e1       	ldi	r24, 0x16	; 22
    6c24:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    6c26:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    6c28:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

00006b44 <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    6b44:	82 30       	cpi	r24, 0x02	; 2
    6b46:	49 f0       	breq	.+18     	; 0x6b5a <decode_header_tail_response+0x16>
    6b48:	18 f4       	brcc	.+6      	; 0x6b50 <decode_header_tail_response+0xc>
    6b4a:	88 23       	and	r24, r24
    6b4c:	41 f0       	breq	.+16     	; 0x6b5e <decode_header_tail_response+0x1a>
    6b4e:	03 c0       	rjmp	.+6      	; 0x6b56 <decode_header_tail_response+0x12>
    6b50:	84 50       	subi	r24, 0x04	; 4
    6b52:	82 30       	cpi	r24, 0x02	; 2
    6b54:	20 f0       	brcs	.+8      	; 0x6b5e <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    6b56:	86 e1       	ldi	r24, 0x16	; 22
    6b58:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    6b5a:	84 2f       	mov	r24, r20
    6b5c:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    6b5e:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6b60:	08 95       	ret

Disassembly of section .text.read_eeprom:

00005496 <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    5496:	87 e6       	ldi	r24, 0x67	; 103
    5498:	9e e0       	ldi	r25, 0x0E	; 14
    549a:	0e 94 f8 32 	call	0x65f0	; 0x65f0 <EM_get_deveui>
	EM_get_appeui(appeui);
    549e:	86 e5       	ldi	r24, 0x56	; 86
    54a0:	9e e0       	ldi	r25, 0x0E	; 14
    54a2:	0e 94 10 33 	call	0x6620	; 0x6620 <EM_get_appeui>
	EM_get_appkey(appkey);
    54a6:	81 e2       	ldi	r24, 0x21	; 33
    54a8:	9e e0       	ldi	r25, 0x0E	; 14
    54aa:	0e 94 28 33 	call	0x6650	; 0x6650 <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    54ae:	6b e4       	ldi	r22, 0x4B	; 75
    54b0:	86 ed       	ldi	r24, 0xD6	; 214
    54b2:	9d e0       	ldi	r25, 0x0D	; 13
    54b4:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <EM_get_collections>
	EM_get_Vcc(&vccx);
    54b8:	83 eb       	ldi	r24, 0xB3	; 179
    54ba:	9e e0       	ldi	r25, 0x0E	; 14
    54bc:	0e 94 93 35 	call	0x6b26	; 0x6b26 <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    54c0:	8f ea       	ldi	r24, 0xAF	; 175
    54c2:	9e e0       	ldi	r25, 0x0E	; 14
    54c4:	0e 94 84 35 	call	0x6b08	; 0x6b08 <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    54c8:	8b ea       	ldi	r24, 0xAB	; 171
    54ca:	9e e0       	ldi	r25, 0x0E	; 14
    54cc:	0e 94 75 35 	call	0x6aea	; 0x6aea <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    54d0:	0e 94 34 38 	call	0x7068	; 0x7068 <EM_get_heat_up_time>
    54d4:	80 93 ef 0e 	sts	0x0EEF, r24	; 0x800eef <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    54d8:	0e 94 40 38 	call	0x7080	; 0x7080 <EM_get_air_pump_time>
    54dc:	90 93 da 0e 	sts	0x0EDA, r25	; 0x800eda <airPumpTime+0x1>
    54e0:	80 93 d9 0e 	sts	0x0ED9, r24	; 0x800ed9 <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    54e4:	0e 94 4c 38 	call	0x7098	; 0x7098 <EM_get_sp_interval>
    54e8:	80 93 ee 0e 	sts	0x0EEE, r24	; 0x800eee <samplingProcessInterval>
	return true;
}
    54ec:	81 e0       	ldi	r24, 0x01	; 1
    54ee:	08 95       	ret

Disassembly of section .text.join_lora:

00006eaa <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    6eaa:	41 e2       	ldi	r20, 0x21	; 33
    6eac:	5e e0       	ldi	r21, 0x0E	; 14
    6eae:	66 e5       	ldi	r22, 0x56	; 86
    6eb0:	7e e0       	ldi	r23, 0x0E	; 14
    6eb2:	87 e6       	ldi	r24, 0x67	; 103
    6eb4:	9e e0       	ldi	r25, 0x0E	; 14
    6eb6:	0e 94 05 39 	call	0x720a	; 0x720a <LM_join_network>
}
    6eba:	08 95       	ret

Disassembly of section .text.set_wakeup:

0000716a <set_wakeup>:
			return MAINPG_FATAL_ERROR;
	}
}

static RTC_STATUS set_wakeup(){
	return RTC_set_wake_up_interrupt(samplingProcessInterval);
    716a:	80 91 ee 0e 	lds	r24, 0x0EEE	; 0x800eee <samplingProcessInterval>
    716e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <RTC_set_wake_up_interrupt>
	//return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
}
    7172:	08 95       	ret

Disassembly of section .text.send_header:

00006c5e <send_header>:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
	MRPP_get_header_package(package, &package_length);
    6c5e:	60 ef       	ldi	r22, 0xF0	; 240
    6c60:	7e e0       	ldi	r23, 0x0E	; 14
    6c62:	87 ed       	ldi	r24, 0xD7	; 215
    6c64:	9c e0       	ldi	r25, 0x0C	; 12
    6c66:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    6c6a:	60 91 f0 0e 	lds	r22, 0x0EF0	; 0x800ef0 <package_length>
    6c6e:	87 ed       	ldi	r24, 0xD7	; 215
    6c70:	9c e0       	ldi	r25, 0x0C	; 12
    6c72:	0e 94 e6 33 	call	0x67cc	; 0x67cc <LM_send_uplink>
}
    6c76:	08 95       	ret

Disassembly of section .text.send_body:

00006c78 <send_body>:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    6c78:	40 ef       	ldi	r20, 0xF0	; 240
    6c7a:	5e e0       	ldi	r21, 0x0E	; 14
    6c7c:	67 ed       	ldi	r22, 0xD7	; 215
    6c7e:	7c e0       	ldi	r23, 0x0C	; 12
    6c80:	0e 94 b4 22 	call	0x4568	; 0x4568 <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    6c84:	60 91 f0 0e 	lds	r22, 0x0EF0	; 0x800ef0 <package_length>
    6c88:	87 ed       	ldi	r24, 0xD7	; 215
    6c8a:	9c e0       	ldi	r25, 0x0C	; 12
    6c8c:	0e 94 e6 33 	call	0x67cc	; 0x67cc <LM_send_uplink>
}
    6c90:	08 95       	ret

Disassembly of section .text.send_tail:

00006c92 <send_tail>:
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
	MRPP_get_tail_package(package, &package_length);
    6c92:	60 ef       	ldi	r22, 0xF0	; 240
    6c94:	7e e0       	ldi	r23, 0x0E	; 14
    6c96:	87 ed       	ldi	r24, 0xD7	; 215
    6c98:	9c e0       	ldi	r25, 0x0C	; 12
    6c9a:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    6c9e:	60 91 f0 0e 	lds	r22, 0x0EF0	; 0x800ef0 <package_length>
    6ca2:	87 ed       	ldi	r24, 0xD7	; 215
    6ca4:	9c e0       	ldi	r25, 0x0C	; 12
    6ca6:	0e 94 e6 33 	call	0x67cc	; 0x67cc <LM_send_uplink>
}
    6caa:	08 95       	ret

Disassembly of section .text.send_msg:

00007228 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    7228:	0e 94 1e 22 	call	0x443c	; 0x443c <uart1_hal_send_string>
    722c:	08 95       	ret

Disassembly of section .text.stage_0:

000030c0 <stage_0>:


/************************************************************************/
/* Stage 0                                                              */
/************************************************************************/
static STAGE_STATUS stage_0(){
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
	RTC_STATUS rtcStatus;
	bool res;
	
	while(1){
		switch(state_s0){
    30c4:	80 91 f4 0e 	lds	r24, 0x0EF4	; 0x800ef4 <state_s0>
    30c8:	82 30       	cpi	r24, 0x02	; 2
    30ca:	71 f1       	breq	.+92     	; 0x3128 <stage_0+0x68>
    30cc:	28 f4       	brcc	.+10     	; 0x30d8 <stage_0+0x18>
    30ce:	88 23       	and	r24, r24
    30d0:	59 f0       	breq	.+22     	; 0x30e8 <stage_0+0x28>
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	b1 f1       	breq	.+108    	; 0x3142 <stage_0+0x82>
    30d6:	f6 cf       	rjmp	.-20     	; 0x30c4 <stage_0+0x4>
    30d8:	84 30       	cpi	r24, 0x04	; 4
    30da:	09 f4       	brne	.+2      	; 0x30de <stage_0+0x1e>
    30dc:	71 c0       	rjmp	.+226    	; 0x31c0 <stage_0+0x100>
    30de:	d8 f1       	brcs	.+118    	; 0x3156 <stage_0+0x96>
    30e0:	85 30       	cpi	r24, 0x05	; 5
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <stage_0+0x26>
    30e4:	44 c0       	rjmp	.+136    	; 0x316e <stage_0+0xae>
    30e6:	ee cf       	rjmp	.-36     	; 0x30c4 <stage_0+0x4>
			case STAGE_INIT:
				print_debug("State: S0 INIT");
    30e8:	69 e8       	ldi	r22, 0x89	; 137
    30ea:	74 e0       	ldi	r23, 0x04	; 4
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				SCD30_init_c02_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    30f2:	c6 ed       	ldi	r28, 0xD6	; 214
    30f4:	dd e0       	ldi	r29, 0x0D	; 13
    30f6:	68 81       	ld	r22, Y
    30f8:	4c e5       	ldi	r20, 0x5C	; 92
    30fa:	5b e0       	ldi	r21, 0x0B	; 11
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3100:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S0_TEMP].samplingInterval, cols[S0_TEMP].samplings, temp_data);
    3104:	6d 81       	ldd	r22, Y+5	; 0x05
    3106:	44 e9       	ldi	r20, 0x94	; 148
    3108:	5a e0       	ldi	r21, 0x0A	; 10
    310a:	8f 81       	ldd	r24, Y+7	; 0x07
    310c:	98 85       	ldd	r25, Y+8	; 0x08
    310e:	0e 94 43 37 	call	0x6e86	; 0x6e86 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S0_HUM].samplingInterval, cols[S0_HUM].samplings, hum_data);
    3112:	6a 85       	ldd	r22, Y+10	; 0x0a
    3114:	4c ec       	ldi	r20, 0xCC	; 204
    3116:	59 e0       	ldi	r21, 0x09	; 9
    3118:	8c 85       	ldd	r24, Y+12	; 0x0c
    311a:	9d 85       	ldd	r25, Y+13	; 0x0d
    311c:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <SCD30_init_humidity_sampling>
				state_s0=STAGE_START;
    3120:	82 e0       	ldi	r24, 0x02	; 2
    3122:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    3126:	ce cf       	rjmp	.-100    	; 0x30c4 <stage_0+0x4>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    3128:	80 91 ef 0e 	lds	r24, 0x0EEF	; 0x800eef <methHeatUpTime>
    312c:	0e 94 66 35 	call	0x6acc	; 0x6acc <ADC_meth_sens_power_on>
				res=SCD30_start_sampling();
    3130:	0e 94 64 29 	call	0x52c8	; 0x52c8 <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    3134:	88 23       	and	r24, r24
    3136:	09 f4       	brne	.+2      	; 0x313a <stage_0+0x7a>
    3138:	4c c0       	rjmp	.+152    	; 0x31d2 <stage_0+0x112>
				
				state_s0=STAGE_GET_TIME;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    3140:	c1 cf       	rjmp	.-126    	; 0x30c4 <stage_0+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    3142:	84 e9       	ldi	r24, 0x94	; 148
    3144:	9e e0       	ldi	r25, 0x0E	; 14
    3146:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    314a:	81 11       	cpse	r24, r1
    314c:	44 c0       	rjmp	.+136    	; 0x31d6 <stage_0+0x116>
				state_s0=STAGE_WAIT;
    314e:	83 e0       	ldi	r24, 0x03	; 3
    3150:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    3154:	b7 cf       	rjmp	.-146    	; 0x30c4 <stage_0+0x4>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    3156:	0e 94 28 37 	call	0x6e50	; 0x6e50 <ADC_meth_sens_ready>
    315a:	88 23       	and	r24, r24
    315c:	f1 f1       	breq	.+124    	; 0x31da <stage_0+0x11a>
    315e:	0e 94 2f 32 	call	0x645e	; 0x645e <SCD30_is_sampling_done>
    3162:	88 23       	and	r24, r24
    3164:	e1 f1       	breq	.+120    	; 0x31de <stage_0+0x11e>
				state_s0=STAGE_UPDATE_MRPP;
    3166:	85 e0       	ldi	r24, 0x05	; 5
    3168:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    316c:	ab cf       	rjmp	.-170    	; 0x30c4 <stage_0+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    316e:	27 eb       	ldi	r18, 0xB7	; 183
    3170:	3e e0       	ldi	r19, 0x0E	; 14
    3172:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    3176:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    317a:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    317e:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    3182:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    3186:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    318a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    318e:	4c e5       	ldi	r20, 0x5C	; 92
    3190:	5b e0       	ldi	r21, 0x0B	; 11
    3192:	67 eb       	ldi	r22, 0xB7	; 183
    3194:	7e e0       	ldi	r23, 0x0E	; 14
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S0_ID_TEMP, ts, temp_data);
    319c:	44 e9       	ldi	r20, 0x94	; 148
    319e:	5a e0       	ldi	r21, 0x0A	; 10
    31a0:	67 eb       	ldi	r22, 0xB7	; 183
    31a2:	7e e0       	ldi	r23, 0x0E	; 14
    31a4:	82 e0       	ldi	r24, 0x02	; 2
    31a6:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S0_ID_HUM, ts, hum_data);
    31aa:	4c ec       	ldi	r20, 0xCC	; 204
    31ac:	59 e0       	ldi	r21, 0x09	; 9
    31ae:	67 eb       	ldi	r22, 0xB7	; 183
    31b0:	7e e0       	ldi	r23, 0x0E	; 14
    31b2:	83 e0       	ldi	r24, 0x03	; 3
    31b4:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    31b8:	84 e0       	ldi	r24, 0x04	; 4
    31ba:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    31be:	82 cf       	rjmp	.-252    	; 0x30c4 <stage_0+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S0 DE-INIT");
    31c0:	68 e9       	ldi	r22, 0x98	; 152
    31c2:	74 e0       	ldi	r23, 0x04	; 4
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				SCD30_deinit_sampling();
    31ca:	0e 94 b0 38 	call	0x7160	; 0x7160 <SCD30_deinit_sampling>
				return STAGE_DONE;
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	07 c0       	rjmp	.+14     	; 0x31e0 <stage_0+0x120>
			break;
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    31d2:	82 e0       	ldi	r24, 0x02	; 2
    31d4:	05 c0       	rjmp	.+10     	; 0x31e0 <stage_0+0x120>
				state_s0=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	03 c0       	rjmp	.+6      	; 0x31e0 <stage_0+0x120>
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	01 c0       	rjmp	.+2      	; 0x31e0 <stage_0+0x120>
    31de:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	08 95       	ret

Disassembly of section .text.stage_1:

00002a7c <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	bool res;
	
	while(1){
		switch(state_s1){
    2a80:	80 91 f3 0e 	lds	r24, 0x0EF3	; 0x800ef3 <state_s1>
    2a84:	82 30       	cpi	r24, 0x02	; 2
    2a86:	c9 f1       	breq	.+114    	; 0x2afa <stage_1+0x7e>
    2a88:	30 f4       	brcc	.+12     	; 0x2a96 <stage_1+0x1a>
    2a8a:	88 23       	and	r24, r24
    2a8c:	69 f0       	breq	.+26     	; 0x2aa8 <stage_1+0x2c>
    2a8e:	81 30       	cpi	r24, 0x01	; 1
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <stage_1+0x18>
    2a92:	3e c0       	rjmp	.+124    	; 0x2b10 <stage_1+0x94>
    2a94:	f5 cf       	rjmp	.-22     	; 0x2a80 <stage_1+0x4>
    2a96:	84 30       	cpi	r24, 0x04	; 4
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <stage_1+0x20>
    2a9a:	82 c0       	rjmp	.+260    	; 0x2ba0 <stage_1+0x124>
    2a9c:	08 f4       	brcc	.+2      	; 0x2aa0 <stage_1+0x24>
    2a9e:	42 c0       	rjmp	.+132    	; 0x2b24 <stage_1+0xa8>
    2aa0:	85 30       	cpi	r24, 0x05	; 5
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <stage_1+0x2a>
    2aa4:	4d c0       	rjmp	.+154    	; 0x2b40 <stage_1+0xc4>
    2aa6:	ec cf       	rjmp	.-40     	; 0x2a80 <stage_1+0x4>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
    2aa8:	6a ea       	ldi	r22, 0xAA	; 170
    2aaa:	74 e0       	ldi	r23, 0x04	; 4
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				SCD30_init_c02_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    2ab2:	c6 ed       	ldi	r28, 0xD6	; 214
    2ab4:	dd e0       	ldi	r29, 0x0D	; 13
    2ab6:	6c 89       	ldd	r22, Y+20	; 0x14
    2ab8:	4c e5       	ldi	r20, 0x5C	; 92
    2aba:	5b e0       	ldi	r21, 0x0B	; 11
    2abc:	8e 89       	ldd	r24, Y+22	; 0x16
    2abe:	9f 89       	ldd	r25, Y+23	; 0x17
    2ac0:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S1_TEMP].samplingInterval, cols[S1_TEMP].samplings, temp_data);
    2ac4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac6:	44 e9       	ldi	r20, 0x94	; 148
    2ac8:	5a e0       	ldi	r21, 0x0A	; 10
    2aca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2acc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ace:	0e 94 43 37 	call	0x6e86	; 0x6e86 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S1_HUM].samplingInterval, cols[S1_HUM].samplings, hum_data);
    2ad2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2ad4:	4c ec       	ldi	r20, 0xCC	; 204
    2ad6:	59 e0       	ldi	r21, 0x09	; 9
    2ad8:	88 a1       	ldd	r24, Y+32	; 0x20
    2ada:	99 a1       	ldd	r25, Y+33	; 0x21
    2adc:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <SCD30_init_humidity_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    2ae0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ae2:	78 89       	ldd	r23, Y+16	; 0x10
    2ae4:	44 e0       	ldi	r20, 0x04	; 4
    2ae6:	59 e0       	ldi	r21, 0x09	; 9
    2ae8:	89 89       	ldd	r24, Y+17	; 0x11
    2aea:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2aee:	81 11       	cpse	r24, r1
    2af0:	62 c0       	rjmp	.+196    	; 0x2bb6 <stage_1+0x13a>
				
				state_s1=STAGE_START;
    2af2:	82 e0       	ldi	r24, 0x02	; 2
    2af4:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2af8:	c3 cf       	rjmp	.-122    	; 0x2a80 <stage_1+0x4>
			
			case STAGE_START:
				ADC_start_sampling();
    2afa:	0e 94 a1 38 	call	0x7142	; 0x7142 <ADC_start_sampling>
				res=SCD30_start_sampling();
    2afe:	0e 94 64 29 	call	0x52c8	; 0x52c8 <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    2b02:	88 23       	and	r24, r24
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <stage_1+0x8c>
    2b06:	59 c0       	rjmp	.+178    	; 0x2bba <stage_1+0x13e>
				
				state_s1=STAGE_GET_TIME;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2b0e:	b8 cf       	rjmp	.-144    	; 0x2a80 <stage_1+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    2b10:	84 e9       	ldi	r24, 0x94	; 148
    2b12:	9e e0       	ldi	r25, 0x0E	; 14
    2b14:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2b18:	81 11       	cpse	r24, r1
    2b1a:	51 c0       	rjmp	.+162    	; 0x2bbe <stage_1+0x142>
				state_s1=STAGE_WAIT;
    2b1c:	83 e0       	ldi	r24, 0x03	; 3
    2b1e:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2b22:	ae cf       	rjmp	.-164    	; 0x2a80 <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2b24:	0e 94 2f 32 	call	0x645e	; 0x645e <SCD30_is_sampling_done>
    2b28:	88 23       	and	r24, r24
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <stage_1+0xb2>
    2b2c:	4a c0       	rjmp	.+148    	; 0x2bc2 <stage_1+0x146>
    2b2e:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <ADC_is_sampling_done>
    2b32:	88 23       	and	r24, r24
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <stage_1+0xbc>
    2b36:	47 c0       	rjmp	.+142    	; 0x2bc6 <stage_1+0x14a>
				state_s1=STAGE_UPDATE_MRPP;
    2b38:	85 e0       	ldi	r24, 0x05	; 5
    2b3a:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2b3e:	a0 cf       	rjmp	.-192    	; 0x2a80 <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2b40:	27 eb       	ldi	r18, 0xB7	; 183
    2b42:	3e e0       	ldi	r19, 0x0E	; 14
    2b44:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    2b48:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    2b4c:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    2b50:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    2b54:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    2b58:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    2b5c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    2b60:	44 e0       	ldi	r20, 0x04	; 4
    2b62:	59 e0       	ldi	r21, 0x09	; 9
    2b64:	67 eb       	ldi	r22, 0xB7	; 183
    2b66:	7e e0       	ldi	r23, 0x0E	; 14
    2b68:	84 e0       	ldi	r24, 0x04	; 4
    2b6a:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    2b6e:	4c e5       	ldi	r20, 0x5C	; 92
    2b70:	5b e0       	ldi	r21, 0x0B	; 11
    2b72:	67 eb       	ldi	r22, 0xB7	; 183
    2b74:	7e e0       	ldi	r23, 0x0E	; 14
    2b76:	85 e0       	ldi	r24, 0x05	; 5
    2b78:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_TEMP, ts, temp_data);
    2b7c:	44 e9       	ldi	r20, 0x94	; 148
    2b7e:	5a e0       	ldi	r21, 0x0A	; 10
    2b80:	67 eb       	ldi	r22, 0xB7	; 183
    2b82:	7e e0       	ldi	r23, 0x0E	; 14
    2b84:	86 e0       	ldi	r24, 0x06	; 6
    2b86:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_HUM, ts, hum_data);
    2b8a:	4c ec       	ldi	r20, 0xCC	; 204
    2b8c:	59 e0       	ldi	r21, 0x09	; 9
    2b8e:	67 eb       	ldi	r22, 0xB7	; 183
    2b90:	7e e0       	ldi	r23, 0x0E	; 14
    2b92:	87 e0       	ldi	r24, 0x07	; 7
    2b94:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				
				state_s1=STAGE_DEINIT;
    2b98:	84 e0       	ldi	r24, 0x04	; 4
    2b9a:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2b9e:	70 cf       	rjmp	.-288    	; 0x2a80 <stage_1+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S1 DE-INIT");
    2ba0:	69 eb       	ldi	r22, 0xB9	; 185
    2ba2:	74 e0       	ldi	r23, 0x04	; 4
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				SCD30_deinit_sampling();
    2baa:	0e 94 b0 38 	call	0x7160	; 0x7160 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2bae:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <ADC_deinit_sampling>
				return STAGE_DONE;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	09 c0       	rjmp	.+18     	; 0x2bc8 <stage_1+0x14c>
				SCD30_init_c02_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				SCD30_init_temp_sampling(cols[S1_TEMP].samplingInterval, cols[S1_TEMP].samplings, temp_data);
				SCD30_init_humidity_sampling(cols[S1_HUM].samplingInterval, cols[S1_HUM].samplings, hum_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2bb6:	83 e0       	ldi	r24, 0x03	; 3
    2bb8:	07 c0       	rjmp	.+14     	; 0x2bc8 <stage_1+0x14c>
			break;
			
			case STAGE_START:
				ADC_start_sampling();
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    2bba:	82 e0       	ldi	r24, 0x02	; 2
    2bbc:	05 c0       	rjmp	.+10     	; 0x2bc8 <stage_1+0x14c>
				state_s1=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	03 c0       	rjmp	.+6      	; 0x2bc8 <stage_1+0x14c>
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	01 c0       	rjmp	.+2      	; 0x2bc8 <stage_1+0x14c>
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
    2bcc:	08 95       	ret

Disassembly of section .text.stage_2:

00002388 <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	bool res;

	while(1){
		switch(state_s2){
    238c:	80 91 f2 0e 	lds	r24, 0x0EF2	; 0x800ef2 <state_s2>
    2390:	82 30       	cpi	r24, 0x02	; 2
    2392:	c9 f1       	breq	.+114    	; 0x2406 <stage_2+0x7e>
    2394:	30 f4       	brcc	.+12     	; 0x23a2 <stage_2+0x1a>
    2396:	88 23       	and	r24, r24
    2398:	69 f0       	breq	.+26     	; 0x23b4 <stage_2+0x2c>
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	09 f4       	brne	.+2      	; 0x23a0 <stage_2+0x18>
    239e:	44 c0       	rjmp	.+136    	; 0x2428 <stage_2+0xa0>
    23a0:	f5 cf       	rjmp	.-22     	; 0x238c <stage_2+0x4>
    23a2:	84 30       	cpi	r24, 0x04	; 4
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <stage_2+0x20>
    23a6:	8d c0       	rjmp	.+282    	; 0x24c2 <stage_2+0x13a>
    23a8:	08 f4       	brcc	.+2      	; 0x23ac <stage_2+0x24>
    23aa:	48 c0       	rjmp	.+144    	; 0x243c <stage_2+0xb4>
    23ac:	85 30       	cpi	r24, 0x05	; 5
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <stage_2+0x2a>
    23b0:	58 c0       	rjmp	.+176    	; 0x2462 <stage_2+0xda>
    23b2:	ec cf       	rjmp	.-40     	; 0x238c <stage_2+0x4>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
    23b4:	6b ec       	ldi	r22, 0xCB	; 203
    23b6:	74 e0       	ldi	r23, 0x04	; 4
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				SCD30_init_c02_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    23be:	c6 ed       	ldi	r28, 0xD6	; 214
    23c0:	dd e0       	ldi	r29, 0x0D	; 13
    23c2:	68 a5       	ldd	r22, Y+40	; 0x28
    23c4:	4c e5       	ldi	r20, 0x5C	; 92
    23c6:	5b e0       	ldi	r21, 0x0B	; 11
    23c8:	8a a5       	ldd	r24, Y+42	; 0x2a
    23ca:	9b a5       	ldd	r25, Y+43	; 0x2b
    23cc:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S2_TEMP].samplingInterval, cols[S2_TEMP].samplings, temp_data);
    23d0:	6d a5       	ldd	r22, Y+45	; 0x2d
    23d2:	44 e9       	ldi	r20, 0x94	; 148
    23d4:	5a e0       	ldi	r21, 0x0A	; 10
    23d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d8:	98 a9       	ldd	r25, Y+48	; 0x30
    23da:	0e 94 43 37 	call	0x6e86	; 0x6e86 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S2_HUM].samplingInterval, cols[S2_HUM].samplings, hum_data);
    23de:	6a a9       	ldd	r22, Y+50	; 0x32
    23e0:	4c ec       	ldi	r20, 0xCC	; 204
    23e2:	59 e0       	ldi	r21, 0x09	; 9
    23e4:	8c a9       	ldd	r24, Y+52	; 0x34
    23e6:	9d a9       	ldd	r25, Y+53	; 0x35
    23e8:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <SCD30_init_humidity_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    23ec:	6b a1       	ldd	r22, Y+35	; 0x23
    23ee:	7c a1       	ldd	r23, Y+36	; 0x24
    23f0:	44 e0       	ldi	r20, 0x04	; 4
    23f2:	59 e0       	ldi	r21, 0x09	; 9
    23f4:	8d a1       	ldd	r24, Y+37	; 0x25
    23f6:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    23fa:	81 11       	cpse	r24, r1
    23fc:	6d c0       	rjmp	.+218    	; 0x24d8 <stage_2+0x150>
			
				state_s2=STAGE_START;
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    2404:	c3 cf       	rjmp	.-122    	; 0x238c <stage_2+0x4>
			
			case STAGE_START:
				res=SCD30_start_sampling();
    2406:	0e 94 64 29 	call	0x52c8	; 0x52c8 <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    240a:	88 23       	and	r24, r24
    240c:	09 f4       	brne	.+2      	; 0x2410 <stage_2+0x88>
    240e:	66 c0       	rjmp	.+204    	; 0x24dc <stage_2+0x154>
				
				ADC_start_sampling();
    2410:	0e 94 a1 38 	call	0x7142	; 0x7142 <ADC_start_sampling>
				PUMP_start(airPumpTime);
    2414:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <airPumpTime>
    2418:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <airPumpTime+0x1>
    241c:	0e 94 8b 34 	call	0x6916	; 0x6916 <PUMP_start>
				
				state_s2=STAGE_GET_TIME;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    2426:	b2 cf       	rjmp	.-156    	; 0x238c <stage_2+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    2428:	84 e9       	ldi	r24, 0x94	; 148
    242a:	9e e0       	ldi	r25, 0x0E	; 14
    242c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2430:	81 11       	cpse	r24, r1
    2432:	56 c0       	rjmp	.+172    	; 0x24e0 <stage_2+0x158>
				state_s2=STAGE_WAIT;
    2434:	83 e0       	ldi	r24, 0x03	; 3
    2436:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    243a:	a8 cf       	rjmp	.-176    	; 0x238c <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    243c:	0e 94 2f 32 	call	0x645e	; 0x645e <SCD30_is_sampling_done>
    2440:	88 23       	and	r24, r24
    2442:	09 f4       	brne	.+2      	; 0x2446 <stage_2+0xbe>
    2444:	4f c0       	rjmp	.+158    	; 0x24e4 <stage_2+0x15c>
    2446:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <ADC_is_sampling_done>
    244a:	88 23       	and	r24, r24
    244c:	09 f4       	brne	.+2      	; 0x2450 <stage_2+0xc8>
    244e:	4c c0       	rjmp	.+152    	; 0x24e8 <stage_2+0x160>
    2450:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <PUMP_is_done>
    2454:	88 23       	and	r24, r24
    2456:	09 f4       	brne	.+2      	; 0x245a <stage_2+0xd2>
    2458:	49 c0       	rjmp	.+146    	; 0x24ec <stage_2+0x164>
				state_s2=STAGE_UPDATE_MRPP;
    245a:	85 e0       	ldi	r24, 0x05	; 5
    245c:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    2460:	95 cf       	rjmp	.-214    	; 0x238c <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2462:	27 eb       	ldi	r18, 0xB7	; 183
    2464:	3e e0       	ldi	r19, 0x0E	; 14
    2466:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    246a:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    246e:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    2472:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    2476:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    247a:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    247e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    2482:	4c e5       	ldi	r20, 0x5C	; 92
    2484:	5b e0       	ldi	r21, 0x0B	; 11
    2486:	67 eb       	ldi	r22, 0xB7	; 183
    2488:	7e e0       	ldi	r23, 0x0E	; 14
    248a:	89 e0       	ldi	r24, 0x09	; 9
    248c:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_TEMP, ts, temp_data);
    2490:	44 e9       	ldi	r20, 0x94	; 148
    2492:	5a e0       	ldi	r21, 0x0A	; 10
    2494:	67 eb       	ldi	r22, 0xB7	; 183
    2496:	7e e0       	ldi	r23, 0x0E	; 14
    2498:	8a e0       	ldi	r24, 0x0A	; 10
    249a:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_HUM, ts, hum_data);
    249e:	4c ec       	ldi	r20, 0xCC	; 204
    24a0:	59 e0       	ldi	r21, 0x09	; 9
    24a2:	67 eb       	ldi	r22, 0xB7	; 183
    24a4:	7e e0       	ldi	r23, 0x0E	; 14
    24a6:	8b e0       	ldi	r24, 0x0B	; 11
    24a8:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    24ac:	44 e0       	ldi	r20, 0x04	; 4
    24ae:	59 e0       	ldi	r21, 0x09	; 9
    24b0:	67 eb       	ldi	r22, 0xB7	; 183
    24b2:	7e e0       	ldi	r23, 0x0E	; 14
    24b4:	88 e0       	ldi	r24, 0x08	; 8
    24b6:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    24ba:	84 e0       	ldi	r24, 0x04	; 4
    24bc:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    24c0:	65 cf       	rjmp	.-310    	; 0x238c <stage_2+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S2 DE-INIT");
    24c2:	6a ed       	ldi	r22, 0xDA	; 218
    24c4:	74 e0       	ldi	r23, 0x04	; 4
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				SCD30_deinit_sampling();
    24cc:	0e 94 b0 38 	call	0x7160	; 0x7160 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    24d0:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <ADC_deinit_sampling>
				return STAGE_DONE;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	0b c0       	rjmp	.+22     	; 0x24ee <stage_2+0x166>
				SCD30_init_c02_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				SCD30_init_temp_sampling(cols[S2_TEMP].samplingInterval, cols[S2_TEMP].samplings, temp_data);
				SCD30_init_humidity_sampling(cols[S2_HUM].samplingInterval, cols[S2_HUM].samplings, hum_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	09 c0       	rjmp	.+18     	; 0x24ee <stage_2+0x166>
				state_s2=STAGE_START;
			break;
			
			case STAGE_START:
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	07 c0       	rjmp	.+14     	; 0x24ee <stage_2+0x166>
				state_s2=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    24e0:	82 e0       	ldi	r24, 0x02	; 2
    24e2:	05 c0       	rjmp	.+10     	; 0x24ee <stage_2+0x166>
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	03 c0       	rjmp	.+6      	; 0x24ee <stage_2+0x166>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	01 c0       	rjmp	.+2      	; 0x24ee <stage_2+0x166>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	08 95       	ret

Disassembly of section .text.stage_3:

000024f4 <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	bool res;
	
	while(1){
		switch(state_s3){
    24f8:	80 91 f1 0e 	lds	r24, 0x0EF1	; 0x800ef1 <state_s3>
    24fc:	82 30       	cpi	r24, 0x02	; 2
    24fe:	09 f4       	brne	.+2      	; 0x2502 <stage_3+0xe>
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <stage_3+0x8c>
    2502:	30 f4       	brcc	.+12     	; 0x2510 <stage_3+0x1c>
    2504:	88 23       	and	r24, r24
    2506:	69 f0       	breq	.+26     	; 0x2522 <stage_3+0x2e>
    2508:	81 30       	cpi	r24, 0x01	; 1
    250a:	09 f4       	brne	.+2      	; 0x250e <stage_3+0x1a>
    250c:	44 c0       	rjmp	.+136    	; 0x2596 <stage_3+0xa2>
    250e:	f4 cf       	rjmp	.-24     	; 0x24f8 <stage_3+0x4>
    2510:	84 30       	cpi	r24, 0x04	; 4
    2512:	09 f4       	brne	.+2      	; 0x2516 <stage_3+0x22>
    2514:	88 c0       	rjmp	.+272    	; 0x2626 <stage_3+0x132>
    2516:	08 f4       	brcc	.+2      	; 0x251a <stage_3+0x26>
    2518:	48 c0       	rjmp	.+144    	; 0x25aa <stage_3+0xb6>
    251a:	85 30       	cpi	r24, 0x05	; 5
    251c:	09 f4       	brne	.+2      	; 0x2520 <stage_3+0x2c>
    251e:	53 c0       	rjmp	.+166    	; 0x25c6 <stage_3+0xd2>
    2520:	eb cf       	rjmp	.-42     	; 0x24f8 <stage_3+0x4>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
    2522:	6c ee       	ldi	r22, 0xEC	; 236
    2524:	74 e0       	ldi	r23, 0x04	; 4
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				SCD30_init_c02_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    252c:	c6 ed       	ldi	r28, 0xD6	; 214
    252e:	dd e0       	ldi	r29, 0x0D	; 13
    2530:	6c ad       	ldd	r22, Y+60	; 0x3c
    2532:	4c e5       	ldi	r20, 0x5C	; 92
    2534:	5b e0       	ldi	r21, 0x0B	; 11
    2536:	8e ad       	ldd	r24, Y+62	; 0x3e
    2538:	9f ad       	ldd	r25, Y+63	; 0x3f
    253a:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S3_TEMP].samplingInterval, cols[S3_TEMP].samplings, temp_data);
    253e:	60 91 17 0e 	lds	r22, 0x0E17	; 0x800e17 <cols+0x41>
    2542:	44 e9       	ldi	r20, 0x94	; 148
    2544:	5a e0       	ldi	r21, 0x0A	; 10
    2546:	80 91 19 0e 	lds	r24, 0x0E19	; 0x800e19 <cols+0x43>
    254a:	90 91 1a 0e 	lds	r25, 0x0E1A	; 0x800e1a <cols+0x44>
    254e:	0e 94 43 37 	call	0x6e86	; 0x6e86 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S3_HUM].samplingInterval, cols[S3_HUM].samplings, hum_data);
    2552:	60 91 1c 0e 	lds	r22, 0x0E1C	; 0x800e1c <cols+0x46>
    2556:	4c ec       	ldi	r20, 0xCC	; 204
    2558:	59 e0       	ldi	r21, 0x09	; 9
    255a:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <cols+0x48>
    255e:	90 91 1f 0e 	lds	r25, 0x0E1F	; 0x800e1f <cols+0x49>
    2562:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <SCD30_init_humidity_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    2566:	6f a9       	ldd	r22, Y+55	; 0x37
    2568:	78 ad       	ldd	r23, Y+56	; 0x38
    256a:	44 e0       	ldi	r20, 0x04	; 4
    256c:	59 e0       	ldi	r21, 0x09	; 9
    256e:	89 ad       	ldd	r24, Y+57	; 0x39
    2570:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2574:	81 11       	cpse	r24, r1
    2576:	66 c0       	rjmp	.+204    	; 0x2644 <stage_3+0x150>
			
				state_s3=STAGE_START;
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    257e:	bc cf       	rjmp	.-136    	; 0x24f8 <stage_3+0x4>
			
			case STAGE_START:
				ADC_start_sampling();
    2580:	0e 94 a1 38 	call	0x7142	; 0x7142 <ADC_start_sampling>
				res=SCD30_start_sampling();
    2584:	0e 94 64 29 	call	0x52c8	; 0x52c8 <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    2588:	88 23       	and	r24, r24
    258a:	09 f4       	brne	.+2      	; 0x258e <stage_3+0x9a>
    258c:	5d c0       	rjmp	.+186    	; 0x2648 <stage_3+0x154>
				
				state_s3=STAGE_GET_TIME;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    2594:	b1 cf       	rjmp	.-158    	; 0x24f8 <stage_3+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    2596:	84 e9       	ldi	r24, 0x94	; 148
    2598:	9e e0       	ldi	r25, 0x0E	; 14
    259a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    259e:	81 11       	cpse	r24, r1
    25a0:	55 c0       	rjmp	.+170    	; 0x264c <stage_3+0x158>
				state_s3=STAGE_WAIT;
    25a2:	83 e0       	ldi	r24, 0x03	; 3
    25a4:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    25a8:	a7 cf       	rjmp	.-178    	; 0x24f8 <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    25aa:	0e 94 2f 32 	call	0x645e	; 0x645e <SCD30_is_sampling_done>
    25ae:	88 23       	and	r24, r24
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <stage_3+0xc0>
    25b2:	4e c0       	rjmp	.+156    	; 0x2650 <stage_3+0x15c>
    25b4:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <ADC_is_sampling_done>
    25b8:	88 23       	and	r24, r24
    25ba:	09 f4       	brne	.+2      	; 0x25be <stage_3+0xca>
    25bc:	4b c0       	rjmp	.+150    	; 0x2654 <stage_3+0x160>
				state_s3=STAGE_UPDATE_MRPP;
    25be:	85 e0       	ldi	r24, 0x05	; 5
    25c0:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    25c4:	99 cf       	rjmp	.-206    	; 0x24f8 <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    25c6:	27 eb       	ldi	r18, 0xB7	; 183
    25c8:	3e e0       	ldi	r19, 0x0E	; 14
    25ca:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    25ce:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    25d2:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    25d6:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    25da:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    25de:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    25e2:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    25e6:	4c e5       	ldi	r20, 0x5C	; 92
    25e8:	5b e0       	ldi	r21, 0x0B	; 11
    25ea:	67 eb       	ldi	r22, 0xB7	; 183
    25ec:	7e e0       	ldi	r23, 0x0E	; 14
    25ee:	8d e0       	ldi	r24, 0x0D	; 13
    25f0:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_TEMP, ts, temp_data);
    25f4:	44 e9       	ldi	r20, 0x94	; 148
    25f6:	5a e0       	ldi	r21, 0x0A	; 10
    25f8:	67 eb       	ldi	r22, 0xB7	; 183
    25fa:	7e e0       	ldi	r23, 0x0E	; 14
    25fc:	8e e0       	ldi	r24, 0x0E	; 14
    25fe:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_HUM, ts, hum_data);
    2602:	4c ec       	ldi	r20, 0xCC	; 204
    2604:	59 e0       	ldi	r21, 0x09	; 9
    2606:	67 eb       	ldi	r22, 0xB7	; 183
    2608:	7e e0       	ldi	r23, 0x0E	; 14
    260a:	8f e0       	ldi	r24, 0x0F	; 15
    260c:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    2610:	44 e0       	ldi	r20, 0x04	; 4
    2612:	59 e0       	ldi	r21, 0x09	; 9
    2614:	67 eb       	ldi	r22, 0xB7	; 183
    2616:	7e e0       	ldi	r23, 0x0E	; 14
    2618:	8c e0       	ldi	r24, 0x0C	; 12
    261a:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    261e:	84 e0       	ldi	r24, 0x04	; 4
    2620:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    2624:	69 cf       	rjmp	.-302    	; 0x24f8 <stage_3+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S3 DE-INIT");
    2626:	6b ef       	ldi	r22, 0xFB	; 251
    2628:	74 e0       	ldi	r23, 0x04	; 4
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				SCD30_deinit_sampling();
    2630:	0e 94 b0 38 	call	0x7160	; 0x7160 <SCD30_deinit_sampling>
				SCD30_sensor_off();
    2634:	0e 94 ec 38 	call	0x71d8	; 0x71d8 <SCD30_sensor_off>
				ADC_deinit_sampling();
    2638:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    263c:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <ADC_meth_sens_power_off>
				return STAGE_DONE;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	09 c0       	rjmp	.+18     	; 0x2656 <stage_3+0x162>
				SCD30_init_c02_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				SCD30_init_temp_sampling(cols[S3_TEMP].samplingInterval, cols[S3_TEMP].samplings, temp_data);
				SCD30_init_humidity_sampling(cols[S3_HUM].samplingInterval, cols[S3_HUM].samplings, hum_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	07 c0       	rjmp	.+14     	; 0x2656 <stage_3+0x162>
			break;
			
			case STAGE_START:
				ADC_start_sampling();
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	05 c0       	rjmp	.+10     	; 0x2656 <stage_3+0x162>
				state_s3=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <stage_3+0x162>
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	01 c0       	rjmp	.+2      	; 0x2656 <stage_3+0x162>
    2654:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	08 95       	ret

Disassembly of section .text.decode_body_response:

000053e0 <decode_body_response>:
static LM_STATUS send_body(int16_t bodyIndex){
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    53e0:	0f 93       	push	r16
    53e2:	1f 93       	push	r17
    53e4:	cf 93       	push	r28
    53e6:	8c 01       	movw	r16, r24
    53e8:	c4 2f       	mov	r28, r20
	switch(status){
    53ea:	62 30       	cpi	r22, 0x02	; 2
    53ec:	d9 f0       	breq	.+54     	; 0x5424 <decode_body_response+0x44>
    53ee:	18 f4       	brcc	.+6      	; 0x53f6 <decode_body_response+0x16>
    53f0:	66 23       	and	r22, r22
    53f2:	29 f0       	breq	.+10     	; 0x53fe <decode_body_response+0x1e>
    53f4:	1e c0       	rjmp	.+60     	; 0x5432 <decode_body_response+0x52>
    53f6:	64 50       	subi	r22, 0x04	; 4
    53f8:	62 30       	cpi	r22, 0x02	; 2
    53fa:	50 f0       	brcs	.+20     	; 0x5410 <decode_body_response+0x30>
    53fc:	1a c0       	rjmp	.+52     	; 0x5432 <decode_body_response+0x52>
		case LM_STATUS_SUCCESS:
			MRPP_set_body_sent(bodyIndex);
    53fe:	0e 94 70 38 	call	0x70e0	; 0x70e0 <MRPP_set_body_sent>
			print_debug("res: success");
    5402:	6d e0       	ldi	r22, 0x0D	; 13
    5404:	75 e0       	ldi	r23, 0x05	; 5
    5406:	80 e0       	ldi	r24, 0x00	; 0
    5408:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
			return success;
    540c:	8c 2f       	mov	r24, r28
    540e:	12 c0       	rjmp	.+36     	; 0x5434 <decode_body_response+0x54>
		
		
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			print_debug("res: mac err");
    5410:	6a e1       	ldi	r22, 0x1A	; 26
    5412:	75 e0       	ldi	r23, 0x05	; 5
    5414:	80 e0       	ldi	r24, 0x00	; 0
    5416:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
			MRPP_set_body_sent(bodyIndex);
    541a:	c8 01       	movw	r24, r16
    541c:	0e 94 70 38 	call	0x70e0	; 0x70e0 <MRPP_set_body_sent>
			return success;
    5420:	8c 2f       	mov	r24, r28
    5422:	08 c0       	rjmp	.+16     	; 0x5434 <decode_body_response+0x54>
		
		case LM_STATUS_TRY_AGAIN:
			print_debug("res: try again");
    5424:	67 e2       	ldi	r22, 0x27	; 39
    5426:	75 e0       	ldi	r23, 0x05	; 5
    5428:	80 e0       	ldi	r24, 0x00	; 0
    542a:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
			return success;
    542e:	8c 2f       	mov	r24, r28
    5430:	01 c0       	rjmp	.+2      	; 0x5434 <decode_body_response+0x54>
		
		default:
			return MAINPG_FATAL_ERROR;
    5432:	86 e1       	ldi	r24, 0x16	; 22
	}
}
    5434:	cf 91       	pop	r28
    5436:	1f 91       	pop	r17
    5438:	0f 91       	pop	r16
    543a:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00001118 <MAINPG_start>:

static void send_msg(const char msg[]);

static bool fromSleep=false;

void MAINPG_start(){
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
    1124:	c0 e0       	ldi	r28, 0x00	; 0
    1126:	1a c0       	rjmp	.+52     	; 0x115c <MAINPG_start+0x44>
				PM_HAL_SCD30_power_init();
				PM_HAL_LED_power_init();
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    1128:	c6 e0       	ldi	r28, 0x06	; 6
    112a:	18 c0       	rjmp	.+48     	; 0x115c <MAINPG_start+0x44>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
    112c:	c5 e0       	ldi	r28, 0x05	; 5
    112e:	16 c0       	rjmp	.+44     	; 0x115c <MAINPG_start+0x44>
    1130:	c5 e0       	ldi	r28, 0x05	; 5
    1132:	14 c0       	rjmp	.+40     	; 0x115c <MAINPG_start+0x44>
    1134:	c5 e0       	ldi	r28, 0x05	; 5
    1136:	12 c0       	rjmp	.+36     	; 0x115c <MAINPG_start+0x44>
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
    1138:	c5 e0       	ldi	r28, 0x05	; 5
    113a:	10 c0       	rjmp	.+32     	; 0x115c <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    113c:	c6 e1       	ldi	r28, 0x16	; 22
    113e:	0e c0       	rjmp	.+28     	; 0x115c <MAINPG_start+0x44>
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    1140:	c6 e1       	ldi	r28, 0x16	; 22
    1142:	0c c0       	rjmp	.+24     	; 0x115c <MAINPG_start+0x44>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    1144:	c6 e1       	ldi	r28, 0x16	; 22
    1146:	0a c0       	rjmp	.+20     	; 0x115c <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    1148:	c6 e1       	ldi	r28, 0x16	; 22
    114a:	08 c0       	rjmp	.+16     	; 0x115c <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    114c:	c6 e1       	ldi	r28, 0x16	; 22
    114e:	06 c0       	rjmp	.+12     	; 0x115c <MAINPG_start+0x44>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
    1150:	cd 2f       	mov	r28, r29
    1152:	04 c0       	rjmp	.+8      	; 0x115c <MAINPG_start+0x44>
    1154:	cd 2f       	mov	r28, r29
    1156:	02 c0       	rjmp	.+4      	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
    1158:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
    115a:	c1 e1       	ldi	r28, 0x11	; 17
	STAGE_STATUS stageStatus;
	uint8_t groupId=0;
	

	while(1){
		switch(state){
    115c:	ec 2f       	mov	r30, r28
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	e8 31       	cpi	r30, 0x18	; 24
    1162:	f1 05       	cpc	r31, r1
    1164:	d8 f7       	brcc	.-10     	; 0x115c <MAINPG_start+0x44>
    1166:	e2 5a       	subi	r30, 0xA2	; 162
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	0c 94 7c 38 	jmp	0x70f8	; 0x70f8 <__tablejump2__>
			case MAINPG_INIT_HW:
				print_debug("State: INIT HW");
    116e:	66 e3       	ldi	r22, 0x36	; 54
    1170:	75 e0       	ldi	r23, 0x05	; 5
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				//Reset variables
				state_s0=STAGE_INIT;
    1178:	10 92 f4 0e 	sts	0x0EF4, r1	; 0x800ef4 <state_s0>
				state_s1=STAGE_INIT;
    117c:	10 92 f3 0e 	sts	0x0EF3, r1	; 0x800ef3 <state_s1>
				state_s2=STAGE_INIT;
    1180:	10 92 f2 0e 	sts	0x0EF2, r1	; 0x800ef2 <state_s2>
				state_s3=STAGE_INIT;
    1184:	10 92 f1 0e 	sts	0x0EF1, r1	; 0x800ef1 <state_s3>
				bodyIndex=-1;
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	9f ef       	ldi	r25, 0xFF	; 255
    118c:	90 93 dc 0e 	sts	0x0EDC, r25	; 0x800edc <bodyIndex+0x1>
    1190:	80 93 db 0e 	sts	0x0EDB, r24	; 0x800edb <bodyIndex>
				
				uart0_hal_init();
    1194:	0e 94 51 30 	call	0x60a2	; 0x60a2 <uart0_hal_init>
				uart1_hal_init();
    1198:	0e 94 6f 30 	call	0x60de	; 0x60de <uart1_hal_init>
				TWI_HAL_init();
    119c:	0e 94 1f 37 	call	0x6e3e	; 0x6e3e <TWI_HAL_init>
				TC2_HAL_init();
    11a0:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <TC2_HAL_init>
				rn2483_init();
    11a4:	0e 94 c8 38 	call	0x7190	; 0x7190 <rn2483_init>
				SCD30_HAL_init();
    11a8:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <SCD30_HAL_init>
				PM_HAL_adc_power_init();
    11ac:	0e 94 88 37 	call	0x6f10	; 0x6f10 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
    11b0:	0e 94 8f 37 	call	0x6f1e	; 0x6f1e <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
    11b4:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
    11b8:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
    11bc:	0e 94 a4 37 	call	0x6f48	; 0x6f48 <PM_HAL_LED_power_init>
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    11c0:	80 91 ed 0e 	lds	r24, 0x0EED	; 0x800eed <fromSleep>
    11c4:	81 11       	cpse	r24, r1
    11c6:	b0 cf       	rjmp	.-160    	; 0x1128 <MAINPG_start+0x10>
    11c8:	c1 e0       	ldi	r28, 0x01	; 1
    11ca:	c8 cf       	rjmp	.-112    	; 0x115c <MAINPG_start+0x44>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
    11cc:	65 e4       	ldi	r22, 0x45	; 69
    11ce:	75 e0       	ldi	r23, 0x05	; 5
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
    11d6:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <EM_has_deveui>
    11da:	88 23       	and	r24, r24
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <MAINPG_start+0xc8>
    11de:	a6 cf       	rjmp	.-180    	; 0x112c <MAINPG_start+0x14>
    11e0:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <EM_has_appeui>
    11e4:	88 23       	and	r24, r24
    11e6:	09 f4       	brne	.+2      	; 0x11ea <MAINPG_start+0xd2>
    11e8:	a3 cf       	rjmp	.-186    	; 0x1130 <MAINPG_start+0x18>
    11ea:	0e 94 90 36 	call	0x6d20	; 0x6d20 <EM_has_appkey>
    11ee:	88 23       	and	r24, r24
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <MAINPG_start+0xdc>
    11f2:	a0 cf       	rjmp	.-192    	; 0x1134 <MAINPG_start+0x1c>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
    11f4:	0e 94 4b 2a 	call	0x5496	; 0x5496 <read_eeprom>
    11f8:	88 23       	and	r24, r24
    11fa:	09 f4       	brne	.+2      	; 0x11fe <MAINPG_start+0xe6>
    11fc:	9d cf       	rjmp	.-198    	; 0x1138 <MAINPG_start+0x20>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
    11fe:	c2 e0       	ldi	r28, 0x02	; 2
    1200:	ad cf       	rjmp	.-166    	; 0x115c <MAINPG_start+0x44>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("State: JOIN LORA");
    1202:	63 e5       	ldi	r22, 0x53	; 83
    1204:	75 e0       	ldi	r23, 0x05	; 5
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				LED_start_try_join();
    120c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <LED_start_try_join>
				lmStatus=join_lora();
    1210:	0e 94 55 37 	call	0x6eaa	; 0x6eaa <join_lora>
    1214:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
    1216:	0e 94 80 37 	call	0x6f00	; 0x6f00 <LED_stop_try_join>
				state=decode_join_response(lmStatus);
    121a:	8c 2f       	mov	r24, r28
    121c:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <decode_join_response>
    1220:	c8 2f       	mov	r28, r24
			break;
    1222:	9c cf       	rjmp	.-200    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				print_debug("State: JOIN SUCCESS");
    1224:	64 e6       	ldi	r22, 0x64	; 100
    1226:	75 e0       	ldi	r23, 0x05	; 5
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				LED_join_success();
    122e:	0e 94 13 30 	call	0x6026	; 0x6026 <LED_join_success>
				state=MAINPG_INIT_MODULES;
    1232:	ca e0       	ldi	r28, 0x0A	; 10
			break;
    1234:	93 cf       	rjmp	.-218    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
    1236:	68 e7       	ldi	r22, 0x78	; 120
    1238:	75 e0       	ldi	r23, 0x05	; 5
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				lmStatus=LM_wake_up();
    1240:	0e 94 08 39 	call	0x7210	; 0x7210 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1244:	81 11       	cpse	r24, r1
    1246:	7a cf       	rjmp	.-268    	; 0x113c <MAINPG_start+0x24>
    1248:	ca e0       	ldi	r28, 0x0A	; 10
    124a:	88 cf       	rjmp	.-240    	; 0x115c <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("State: LORA TRY AGAIN");
    124c:	6c e8       	ldi	r22, 0x8C	; 140
    124e:	75 e0       	ldi	r23, 0x05	; 5
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				LED_join_denied();
    1256:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <LED_join_denied>
    125a:	2f ef       	ldi	r18, 0xFF	; 255
    125c:	33 eb       	ldi	r19, 0xB3	; 179
    125e:	84 ec       	ldi	r24, 0xC4	; 196
    1260:	94 e0       	ldi	r25, 0x04	; 4
    1262:	21 50       	subi	r18, 0x01	; 1
    1264:	30 40       	sbci	r19, 0x00	; 0
    1266:	80 40       	sbci	r24, 0x00	; 0
    1268:	90 40       	sbci	r25, 0x00	; 0
    126a:	d9 f7       	brne	.-10     	; 0x1262 <MAINPG_start+0x14a>
    126c:	00 c0       	rjmp	.+0      	; 0x126e <MAINPG_start+0x156>
    126e:	00 00       	nop
				_delay_ms(60000);
				state=MAINPG_LORA_JOIN_NETWORK;
    1270:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1272:	74 cf       	rjmp	.-280    	; 0x115c <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Initialize modules                                                   */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
    1274:	62 ea       	ldi	r22, 0xA2	; 162
    1276:	75 e0       	ldi	r23, 0x05	; 5
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    127e:	e0 90 ab 0e 	lds	r14, 0x0EAB	; 0x800eab <ppmx>
    1282:	f0 90 ac 0e 	lds	r15, 0x0EAC	; 0x800eac <ppmx+0x1>
    1286:	00 91 ad 0e 	lds	r16, 0x0EAD	; 0x800ead <ppmx+0x2>
    128a:	10 91 ae 0e 	lds	r17, 0x0EAE	; 0x800eae <ppmx+0x3>
    128e:	20 91 af 0e 	lds	r18, 0x0EAF	; 0x800eaf <rrlx>
    1292:	30 91 b0 0e 	lds	r19, 0x0EB0	; 0x800eb0 <rrlx+0x1>
    1296:	40 91 b1 0e 	lds	r20, 0x0EB1	; 0x800eb1 <rrlx+0x2>
    129a:	50 91 b2 0e 	lds	r21, 0x0EB2	; 0x800eb2 <rrlx+0x3>
    129e:	60 91 b3 0e 	lds	r22, 0x0EB3	; 0x800eb3 <vccx>
    12a2:	70 91 b4 0e 	lds	r23, 0x0EB4	; 0x800eb4 <vccx+0x1>
    12a6:	80 91 b5 0e 	lds	r24, 0x0EB5	; 0x800eb5 <vccx+0x2>
    12aa:	90 91 b6 0e 	lds	r25, 0x0EB6	; 0x800eb6 <vccx+0x3>
    12ae:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
    12b2:	0e 94 78 34 	call	0x68f0	; 0x68f0 <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    12b6:	81 11       	cpse	r24, r1
    12b8:	43 cf       	rjmp	.-378    	; 0x1140 <MAINPG_start+0x28>
    12ba:	c7 e0       	ldi	r28, 0x07	; 7
    12bc:	4f cf       	rjmp	.-354    	; 0x115c <MAINPG_start+0x44>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
    12be:	66 eb       	ldi	r22, 0xB6	; 182
    12c0:	75 e0       	ldi	r23, 0x05	; 5
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	0e 94 a3 2b 	call	0x5746	; 0x5746 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    12ce:	81 11       	cpse	r24, r1
    12d0:	39 cf       	rjmp	.-398    	; 0x1144 <MAINPG_start+0x2c>
    12d2:	c9 e0       	ldi	r28, 0x09	; 9
    12d4:	43 cf       	rjmp	.-378    	; 0x115c <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
    12d6:	66 ec       	ldi	r22, 0xC6	; 198
    12d8:	75 e0       	ldi	r23, 0x05	; 5
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
    12e0:	0e 94 15 32 	call	0x642a	; 0x642a <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    12e4:	81 11       	cpse	r24, r1
    12e6:	30 cf       	rjmp	.-416    	; 0x1148 <MAINPG_start+0x30>
    12e8:	c8 e0       	ldi	r28, 0x08	; 8
    12ea:	38 cf       	rjmp	.-400    	; 0x115c <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
    12ec:	67 ed       	ldi	r22, 0xD7	; 215
    12ee:	75 e0       	ldi	r23, 0x05	; 5
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				rtcStatus=set_wakeup();
    12f6:	0e 94 b5 38 	call	0x716a	; 0x716a <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    12fa:	81 11       	cpse	r24, r1
    12fc:	27 cf       	rjmp	.-434    	; 0x114c <MAINPG_start+0x34>
    12fe:	cb e0       	ldi	r28, 0x0B	; 11
    1300:	2d cf       	rjmp	.-422    	; 0x115c <MAINPG_start+0x44>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("State: MRPP INIT");
    1302:	6d ee       	ldi	r22, 0xED	; 237
    1304:	75 e0       	ldi	r23, 0x05	; 5
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				groupId=EM_get_group_id();
    130c:	0e 94 58 38 	call	0x70b0	; 0x70b0 <EM_get_group_id>
				groupId=MRPP_init_group(cols, N_COLLECTIONS, groupId);
    1310:	48 2f       	mov	r20, r24
    1312:	6f e0       	ldi	r22, 0x0F	; 15
    1314:	86 ed       	ldi	r24, 0xD6	; 214
    1316:	9d e0       	ldi	r25, 0x0D	; 13
    1318:	0e 94 22 36 	call	0x6c44	; 0x6c44 <MRPP_init_group>
				EM_set_group_id(groupId);
    131c:	0e 94 52 38 	call	0x70a4	; 0x70a4 <EM_set_group_id>
				state=MAINPG_SEND_HEADER;
    1320:	cc e0       	ldi	r28, 0x0C	; 12
			break;
    1322:	1c cf       	rjmp	.-456    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
    1324:	0e 94 a6 38 	call	0x714c	; 0x714c <LM_is_free>
    1328:	88 23       	and	r24, r24
    132a:	09 f4       	brne	.+2      	; 0x132e <MAINPG_start+0x216>
    132c:	17 cf       	rjmp	.-466    	; 0x115c <MAINPG_start+0x44>
					state=MAINPG_SEND_HEADER;
					break;
				}
				print_debug("State: SEND HEADER");
    132e:	6e ef       	ldi	r22, 0xFE	; 254
    1330:	75 e0       	ldi	r23, 0x05	; 5
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				lmStatus=send_header();
    1338:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
    133c:	4c e0       	ldi	r20, 0x0C	; 12
    133e:	6d e0       	ldi	r22, 0x0D	; 13
    1340:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <decode_header_tail_response>
    1344:	c8 2f       	mov	r28, r24
			break;
    1346:	0a cf       	rjmp	.-492    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
    1348:	0e 94 60 18 	call	0x30c0	; 0x30c0 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    134c:	6e e0       	ldi	r22, 0x0E	; 14
    134e:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
    1352:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1354:	c8 2f       	mov	r28, r24
			break;
    1356:	02 cf       	rjmp	.-508    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
    1358:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    135c:	6f e0       	ldi	r22, 0x0F	; 15
    135e:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
    1362:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    1364:	c8 2f       	mov	r28, r24
			break;
    1366:	fa ce       	rjmp	.-524    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
    1368:	0e 94 c4 11 	call	0x2388	; 0x2388 <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    136c:	60 e1       	ldi	r22, 0x10	; 16
    136e:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
    1372:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    1374:	c8 2f       	mov	r28, r24
			break;
    1376:	f2 ce       	rjmp	.-540    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
    1378:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    137c:	62 e1       	ldi	r22, 0x12	; 18
    137e:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
    1382:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    1384:	c8 2f       	mov	r28, r24
			break;
    1386:	ea ce       	rjmp	.-556    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
    1388:	8b ed       	ldi	r24, 0xDB	; 219
    138a:	9e e0       	ldi	r25, 0x0E	; 14
    138c:	0e 94 d2 34 	call	0x69a4	; 0x69a4 <MRPP_is_body_package_ready>
    1390:	88 23       	and	r24, r24
    1392:	09 f4       	brne	.+2      	; 0x1396 <MAINPG_start+0x27e>
    1394:	dd ce       	rjmp	.-582    	; 0x1150 <MAINPG_start+0x38>
    1396:	0e 94 a6 38 	call	0x714c	; 0x714c <LM_is_free>
    139a:	88 23       	and	r24, r24
    139c:	09 f4       	brne	.+2      	; 0x13a0 <MAINPG_start+0x288>
    139e:	da ce       	rjmp	.-588    	; 0x1154 <MAINPG_start+0x3c>
					print_debug("State: SEND DATA");
    13a0:	61 e1       	ldi	r22, 0x11	; 17
    13a2:	76 e0       	ldi	r23, 0x06	; 6
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
					lmStatus=send_body(bodyIndex);
    13aa:	80 91 db 0e 	lds	r24, 0x0EDB	; 0x800edb <bodyIndex>
    13ae:	90 91 dc 0e 	lds	r25, 0x0EDC	; 0x800edc <bodyIndex+0x1>
    13b2:	0e 94 3c 36 	call	0x6c78	; 0x6c78 <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
    13b6:	4d 2f       	mov	r20, r29
    13b8:	68 2f       	mov	r22, r24
    13ba:	80 91 db 0e 	lds	r24, 0x0EDB	; 0x800edb <bodyIndex>
    13be:	90 91 dc 0e 	lds	r25, 0x0EDC	; 0x800edc <bodyIndex+0x1>
    13c2:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <decode_body_response>
    13c6:	c8 2f       	mov	r28, r24
    13c8:	c9 ce       	rjmp	.-622    	; 0x115c <MAINPG_start+0x44>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
    13ca:	0e 94 ab 38 	call	0x7156	; 0x7156 <MRPP_all_body_package_sent>
    13ce:	88 23       	and	r24, r24
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <MAINPG_start+0x2bc>
    13d2:	c2 ce       	rjmp	.-636    	; 0x1158 <MAINPG_start+0x40>
					state=MAINPG_SEND_TAIL;
    13d4:	c3 e1       	ldi	r28, 0x13	; 19
    13d6:	c2 ce       	rjmp	.-636    	; 0x115c <MAINPG_start+0x44>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
    13d8:	0e 94 a6 38 	call	0x714c	; 0x714c <LM_is_free>
    13dc:	88 23       	and	r24, r24
    13de:	09 f4       	brne	.+2      	; 0x13e2 <MAINPG_start+0x2ca>
    13e0:	bd ce       	rjmp	.-646    	; 0x115c <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
					break;
				}
				print_debug("State: SEND TAIL");
    13e2:	62 e2       	ldi	r22, 0x22	; 34
    13e4:	76 e0       	ldi	r23, 0x06	; 6
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				lmStatus=send_tail();
    13ec:	0e 94 49 36 	call	0x6c92	; 0x6c92 <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
    13f0:	43 e1       	ldi	r20, 0x13	; 19
    13f2:	64 e1       	ldi	r22, 0x14	; 20
    13f4:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <decode_header_tail_response>
    13f8:	c8 2f       	mov	r28, r24
				
			break;
    13fa:	b0 ce       	rjmp	.-672    	; 0x115c <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				print_debug("State: SETUP SLEEP");
    13fc:	63 e3       	ldi	r22, 0x33	; 51
    13fe:	76 e0       	ldi	r23, 0x06	; 6
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				lmStatus=LM_put_to_sleep();
    1406:	0e 94 31 37 	call	0x6e62	; 0x6e62 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	81 11       	cpse	r24, r1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	90 93 ed 0e 	sts	0x0EED, r25	; 0x800eed <fromSleep>
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	0e 94 b1 36 	call	0x6d62	; 0x6d62 <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <PM_HAL_LED_power>
				TC2_HAL_kill();
    1432:	0e 94 8d 38 	call	0x711a	; 0x711a <TC2_HAL_kill>
				
				state=MAINPG_SLEEP;
    1436:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    1438:	91 ce       	rjmp	.-734    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_SLEEP:
				print_debug("State: SLEEP");
    143a:	66 e4       	ldi	r22, 0x46	; 70
    143c:	76 e0       	ldi	r23, 0x06	; 6
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				PM_HAL_enter_power_down();
    1444:	0e 94 33 30 	call	0x6066	; 0x6066 <PM_HAL_enter_power_down>
				print_debug("State: SLEEP -> AWAKE");
    1448:	63 e5       	ldi	r22, 0x53	; 83
    144a:	76 e0       	ldi	r23, 0x06	; 6
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				state=MAINPG_INIT_HW;
    1452:	c0 e0       	ldi	r28, 0x00	; 0
			break;
    1454:	83 ce       	rjmp	.-762    	; 0x115c <MAINPG_start+0x44>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_CONF_ERR:
				print_debug("State: CONF ERR");
    1456:	69 e6       	ldi	r22, 0x69	; 105
    1458:	76 e0       	ldi	r23, 0x06	; 6
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				LED_conf_err();
    1460:	0e 94 e0 38 	call	0x71c0	; 0x71c0 <LED_conf_err>
				print_debug("Conf err\n\r");
    1464:	69 e7       	ldi	r22, 0x79	; 121
    1466:	76 e0       	ldi	r23, 0x06	; 6
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				state=MAINPG_END;
    146e:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1470:	75 ce       	rjmp	.-790    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_FATAL_ERROR:
				print_debug("State: FATAL ERR");
    1472:	64 e8       	ldi	r22, 0x84	; 132
    1474:	76 e0       	ldi	r23, 0x06	; 6
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				LED_fatal_err();
    147c:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <LED_fatal_err>
				fromSleep=false;
    1480:	10 92 ed 0e 	sts	0x0EED, r1	; 0x800eed <fromSleep>
				state=MAINPG_END;
    1484:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1486:	6a ce       	rjmp	.-812    	; 0x115c <MAINPG_start+0x44>
			
			case MAINPG_END:
				print_debug("State: END");
    1488:	65 e9       	ldi	r22, 0x95	; 149
    148a:	76 e0       	ldi	r23, 0x06	; 6
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	0e 94 14 39 	call	0x7228	; 0x7228 <send_msg>
				return;
			break;	
		}
	}
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	08 95       	ret

Disassembly of section .text.calc_crc8:

00006388 <calc_crc8>:
 *  Author: Christopher S. Nielsen
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    6388:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    638a:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    638c:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    638e:	14 c0       	rjmp	.+40     	; 0x63b8 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    6390:	fa 01       	movw	r30, r20
    6392:	e3 0f       	add	r30, r19
    6394:	f1 1d       	adc	r31, r1
    6396:	90 81       	ld	r25, Z
    6398:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    639a:	28 e0       	ldi	r18, 0x08	; 8
    639c:	0a c0       	rjmp	.+20     	; 0x63b2 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    639e:	88 23       	and	r24, r24
    63a0:	34 f4       	brge	.+12     	; 0x63ae <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    63a2:	90 e0       	ldi	r25, 0x00	; 0
    63a4:	88 0f       	add	r24, r24
    63a6:	99 1f       	adc	r25, r25
    63a8:	91 e3       	ldi	r25, 0x31	; 49
    63aa:	89 27       	eor	r24, r25
    63ac:	01 c0       	rjmp	.+2      	; 0x63b0 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    63ae:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    63b0:	21 50       	subi	r18, 0x01	; 1
    63b2:	21 11       	cpse	r18, r1
    63b4:	f4 cf       	rjmp	.-24     	; 0x639e <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    63b6:	3f 5f       	subi	r19, 0xFF	; 255
    63b8:	36 17       	cp	r19, r22
    63ba:	50 f3       	brcs	.-44     	; 0x6390 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    63bc:	08 95       	ret

Disassembly of section .text.get_decimal:

0000403a <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    403a:	cf 92       	push	r12
    403c:	df 92       	push	r13
    403e:	ef 92       	push	r14
    4040:	ff 92       	push	r15
    4042:	0f 93       	push	r16
    4044:	1f 93       	push	r17
    4046:	cf 93       	push	r28
    4048:	df 93       	push	r29
    404a:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    404c:	10 e0       	ldi	r17, 0x00	; 0
    404e:	08 c0       	rjmp	.+16     	; 0x4060 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    4050:	cc 0d       	add	r28, r12
    4052:	dd 1d       	adc	r29, r13
    4054:	88 81       	ld	r24, Y
    4056:	8e 32       	cpi	r24, 0x2E	; 46
    4058:	11 f4       	brne	.+4      	; 0x405e <get_decimal+0x24>
			index=i+1;
    405a:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    405c:	0c c0       	rjmp	.+24     	; 0x4076 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    405e:	1f 5f       	subi	r17, 0xFF	; 255
    4060:	c1 2f       	mov	r28, r17
    4062:	d0 e0       	ldi	r29, 0x00	; 0
    4064:	b6 01       	movw	r22, r12
    4066:	80 e8       	ldi	r24, 0x80	; 128
    4068:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	c8 17       	cp	r28, r24
    4070:	d9 07       	cpc	r29, r25
    4072:	70 f3       	brcs	.-36     	; 0x4050 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    4074:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    4076:	11 23       	and	r17, r17
    4078:	71 f1       	breq	.+92     	; 0x40d6 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    407a:	c1 0e       	add	r12, r17
    407c:	d1 1c       	adc	r13, r1
    407e:	80 e8       	ldi	r24, 0x80	; 128
    4080:	e8 2e       	mov	r14, r24
    4082:	8e 2d       	mov	r24, r14
    4084:	b6 01       	movw	r22, r12
    4086:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    408a:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    408c:	8e 2d       	mov	r24, r14
    408e:	b6 01       	movw	r22, r12
    4090:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <atoi>
    4094:	8c 01       	movw	r16, r24
	float divisor=1;
    4096:	0f 2e       	mov	r0, r31
    4098:	c1 2c       	mov	r12, r1
    409a:	d1 2c       	mov	r13, r1
    409c:	f0 e8       	ldi	r31, 0x80	; 128
    409e:	ef 2e       	mov	r14, r31
    40a0:	ff e3       	ldi	r31, 0x3F	; 63
    40a2:	ff 2e       	mov	r15, r31
    40a4:	f0 2d       	mov	r31, r0
	
	while(len>0){
    40a6:	0b c0       	rjmp	.+22     	; 0x40be <get_decimal+0x84>
		divisor*=10;
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	40 e2       	ldi	r20, 0x20	; 32
    40ae:	51 e4       	ldi	r21, 0x41	; 65
    40b0:	c7 01       	movw	r24, r14
    40b2:	b6 01       	movw	r22, r12
    40b4:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <__mulsf3>
    40b8:	6b 01       	movw	r12, r22
    40ba:	7c 01       	movw	r14, r24
		len--;
    40bc:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    40be:	c1 11       	cpse	r28, r1
    40c0:	f3 cf       	rjmp	.-26     	; 0x40a8 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    40c2:	b8 01       	movw	r22, r16
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	0e 94 d7 24 	call	0x49ae	; 0x49ae <__floatunsisf>
    40cc:	a7 01       	movw	r20, r14
    40ce:	96 01       	movw	r18, r12
    40d0:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <__divsf3>
    40d4:	03 c0       	rjmp	.+6      	; 0x40dc <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    40d6:	60 e0       	ldi	r22, 0x00	; 0
    40d8:	70 e0       	ldi	r23, 0x00	; 0
    40da:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    40dc:	df 91       	pop	r29
    40de:	cf 91       	pop	r28
    40e0:	1f 91       	pop	r17
    40e2:	0f 91       	pop	r16
    40e4:	ff 90       	pop	r15
    40e6:	ef 90       	pop	r14
    40e8:	df 90       	pop	r13
    40ea:	cf 90       	pop	r12
    40ec:	08 95       	ret

Disassembly of section .text.str2flaot:

0000591e <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    591e:	cf 92       	push	r12
    5920:	df 92       	push	r13
    5922:	ef 92       	push	r14
    5924:	ff 92       	push	r15
    5926:	0f 93       	push	r16
    5928:	1f 93       	push	r17
    592a:	cf 93       	push	r28
    592c:	df 93       	push	r29
    592e:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    5930:	bc 01       	movw	r22, r24
    5932:	80 e8       	ldi	r24, 0x80	; 128
    5934:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <atoi>
    5938:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    593a:	c8 01       	movw	r24, r16
    593c:	0e 94 1d 20 	call	0x403a	; 0x403a <get_decimal>
    5940:	6b 01       	movw	r12, r22
    5942:	7c 01       	movw	r14, r24
	return intVal+deci;
    5944:	be 01       	movw	r22, r28
    5946:	80 e0       	ldi	r24, 0x00	; 0
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	0e 94 d7 24 	call	0x49ae	; 0x49ae <__floatunsisf>
    594e:	9b 01       	movw	r18, r22
    5950:	ac 01       	movw	r20, r24
    5952:	c7 01       	movw	r24, r14
    5954:	b6 01       	movw	r22, r12
    5956:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <__addsf3>
	
	
}
    595a:	df 91       	pop	r29
    595c:	cf 91       	pop	r28
    595e:	1f 91       	pop	r17
    5960:	0f 91       	pop	r16
    5962:	ff 90       	pop	r15
    5964:	ef 90       	pop	r14
    5966:	df 90       	pop	r13
    5968:	cf 90       	pop	r12
    596a:	08 95       	ret

Disassembly of section .text.is_float:

00005548 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    5548:	ef 92       	push	r14
    554a:	ff 92       	push	r15
    554c:	0f 93       	push	r16
    554e:	1f 93       	push	r17
    5550:	cf 93       	push	r28
    5552:	df 93       	push	r29
    5554:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    5556:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    5558:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    555a:	0d c0       	rjmp	.+26     	; 0x5576 <is_float+0x2e>
	{
		if(str[i]=='.'){
    555c:	ce 0d       	add	r28, r14
    555e:	df 1d       	adc	r29, r15
    5560:	88 81       	ld	r24, Y
    5562:	8e 32       	cpi	r24, 0x2E	; 46
    5564:	21 f4       	brne	.+8      	; 0x556e <is_float+0x26>
			if (got_dot)
    5566:	01 11       	cpse	r16, r1
    5568:	11 c0       	rjmp	.+34     	; 0x558c <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    556a:	01 e0       	ldi	r16, 0x01	; 1
    556c:	03 c0       	rjmp	.+6      	; 0x5574 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    556e:	80 53       	subi	r24, 0x30	; 48
    5570:	8a 30       	cpi	r24, 0x0A	; 10
    5572:	70 f4       	brcc	.+28     	; 0x5590 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    5574:	1f 5f       	subi	r17, 0xFF	; 255
    5576:	c1 2f       	mov	r28, r17
    5578:	d0 e0       	ldi	r29, 0x00	; 0
    557a:	b7 01       	movw	r22, r14
    557c:	80 e8       	ldi	r24, 0x80	; 128
    557e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <strlen>
    5582:	c8 17       	cp	r28, r24
    5584:	d9 07       	cpc	r29, r25
    5586:	50 f3       	brcs	.-44     	; 0x555c <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    5588:	81 e0       	ldi	r24, 0x01	; 1
    558a:	03 c0       	rjmp	.+6      	; 0x5592 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    558c:	80 e0       	ldi	r24, 0x00	; 0
    558e:	01 c0       	rjmp	.+2      	; 0x5592 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    5590:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    5592:	df 91       	pop	r29
    5594:	cf 91       	pop	r28
    5596:	1f 91       	pop	r17
    5598:	0f 91       	pop	r16
    559a:	ff 90       	pop	r15
    559c:	ef 90       	pop	r14
    559e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006fe2 <__subsf3>:
    6fe2:	50 58       	subi	r21, 0x80	; 128

00006fe4 <__addsf3>:
    6fe4:	bb 27       	eor	r27, r27
    6fe6:	aa 27       	eor	r26, r26
    6fe8:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__addsf3x>
    6fec:	0c 94 05 35 	jmp	0x6a0a	; 0x6a0a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003bb4 <__addsf3x>:
    3bb4:	11 c0       	rjmp	.+34     	; 0x3bd8 <__addsf3x+0x24>
    3bb6:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <__fp_pscA>
    3bba:	38 f0       	brcs	.+14     	; 0x3bca <__addsf3x+0x16>
    3bbc:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <__fp_pscB>
    3bc0:	20 f0       	brcs	.+8      	; 0x3bca <__addsf3x+0x16>
    3bc2:	39 f4       	brne	.+14     	; 0x3bd2 <__addsf3x+0x1e>
    3bc4:	9f 3f       	cpi	r25, 0xFF	; 255
    3bc6:	19 f4       	brne	.+6      	; 0x3bce <__addsf3x+0x1a>
    3bc8:	26 f4       	brtc	.+8      	; 0x3bd2 <__addsf3x+0x1e>
    3bca:	0c 94 17 39 	jmp	0x722e	; 0x722e <__fp_nan>
    3bce:	0e f4       	brtc	.+2      	; 0x3bd2 <__addsf3x+0x1e>
    3bd0:	e0 95       	com	r30
    3bd2:	e7 fb       	bst	r30, 7
    3bd4:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__fp_inf>
    3bd8:	e9 2f       	mov	r30, r25
    3bda:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__fp_split3>
    3bde:	58 f3       	brcs	.-42     	; 0x3bb6 <__addsf3x+0x2>
    3be0:	ba 17       	cp	r27, r26
    3be2:	62 07       	cpc	r22, r18
    3be4:	73 07       	cpc	r23, r19
    3be6:	84 07       	cpc	r24, r20
    3be8:	95 07       	cpc	r25, r21
    3bea:	20 f0       	brcs	.+8      	; 0x3bf4 <__addsf3x+0x40>
    3bec:	79 f4       	brne	.+30     	; 0x3c0c <__addsf3x+0x58>
    3bee:	a6 f5       	brtc	.+104    	; 0x3c58 <__addsf3x+0xa4>
    3bf0:	0c 94 06 38 	jmp	0x700c	; 0x700c <__fp_zero>
    3bf4:	0e f4       	brtc	.+2      	; 0x3bf8 <__addsf3x+0x44>
    3bf6:	e0 95       	com	r30
    3bf8:	0b 2e       	mov	r0, r27
    3bfa:	ba 2f       	mov	r27, r26
    3bfc:	a0 2d       	mov	r26, r0
    3bfe:	0b 01       	movw	r0, r22
    3c00:	b9 01       	movw	r22, r18
    3c02:	90 01       	movw	r18, r0
    3c04:	0c 01       	movw	r0, r24
    3c06:	ca 01       	movw	r24, r20
    3c08:	a0 01       	movw	r20, r0
    3c0a:	11 24       	eor	r1, r1
    3c0c:	ff 27       	eor	r31, r31
    3c0e:	59 1b       	sub	r21, r25
    3c10:	99 f0       	breq	.+38     	; 0x3c38 <__addsf3x+0x84>
    3c12:	59 3f       	cpi	r21, 0xF9	; 249
    3c14:	50 f4       	brcc	.+20     	; 0x3c2a <__addsf3x+0x76>
    3c16:	50 3e       	cpi	r21, 0xE0	; 224
    3c18:	68 f1       	brcs	.+90     	; 0x3c74 <__addsf3x+0xc0>
    3c1a:	1a 16       	cp	r1, r26
    3c1c:	f0 40       	sbci	r31, 0x00	; 0
    3c1e:	a2 2f       	mov	r26, r18
    3c20:	23 2f       	mov	r18, r19
    3c22:	34 2f       	mov	r19, r20
    3c24:	44 27       	eor	r20, r20
    3c26:	58 5f       	subi	r21, 0xF8	; 248
    3c28:	f3 cf       	rjmp	.-26     	; 0x3c10 <__addsf3x+0x5c>
    3c2a:	46 95       	lsr	r20
    3c2c:	37 95       	ror	r19
    3c2e:	27 95       	ror	r18
    3c30:	a7 95       	ror	r26
    3c32:	f0 40       	sbci	r31, 0x00	; 0
    3c34:	53 95       	inc	r21
    3c36:	c9 f7       	brne	.-14     	; 0x3c2a <__addsf3x+0x76>
    3c38:	7e f4       	brtc	.+30     	; 0x3c58 <__addsf3x+0xa4>
    3c3a:	1f 16       	cp	r1, r31
    3c3c:	ba 0b       	sbc	r27, r26
    3c3e:	62 0b       	sbc	r22, r18
    3c40:	73 0b       	sbc	r23, r19
    3c42:	84 0b       	sbc	r24, r20
    3c44:	ba f0       	brmi	.+46     	; 0x3c74 <__addsf3x+0xc0>
    3c46:	91 50       	subi	r25, 0x01	; 1
    3c48:	a1 f0       	breq	.+40     	; 0x3c72 <__addsf3x+0xbe>
    3c4a:	ff 0f       	add	r31, r31
    3c4c:	bb 1f       	adc	r27, r27
    3c4e:	66 1f       	adc	r22, r22
    3c50:	77 1f       	adc	r23, r23
    3c52:	88 1f       	adc	r24, r24
    3c54:	c2 f7       	brpl	.-16     	; 0x3c46 <__addsf3x+0x92>
    3c56:	0e c0       	rjmp	.+28     	; 0x3c74 <__addsf3x+0xc0>
    3c58:	ba 0f       	add	r27, r26
    3c5a:	62 1f       	adc	r22, r18
    3c5c:	73 1f       	adc	r23, r19
    3c5e:	84 1f       	adc	r24, r20
    3c60:	48 f4       	brcc	.+18     	; 0x3c74 <__addsf3x+0xc0>
    3c62:	87 95       	ror	r24
    3c64:	77 95       	ror	r23
    3c66:	67 95       	ror	r22
    3c68:	b7 95       	ror	r27
    3c6a:	f7 95       	ror	r31
    3c6c:	9e 3f       	cpi	r25, 0xFE	; 254
    3c6e:	08 f0       	brcs	.+2      	; 0x3c72 <__addsf3x+0xbe>
    3c70:	b0 cf       	rjmp	.-160    	; 0x3bd2 <__addsf3x+0x1e>
    3c72:	93 95       	inc	r25
    3c74:	88 0f       	add	r24, r24
    3c76:	08 f0       	brcs	.+2      	; 0x3c7a <__addsf3x+0xc6>
    3c78:	99 27       	eor	r25, r25
    3c7a:	ee 0f       	add	r30, r30
    3c7c:	97 95       	ror	r25
    3c7e:	87 95       	ror	r24
    3c80:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00007174 <__cmpsf2>:
    7174:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <__fp_cmp>
    7178:	08 f4       	brcc	.+2      	; 0x717c <__cmpsf2+0x8>
    717a:	81 e0       	ldi	r24, 0x01	; 1
    717c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000071e0 <__divsf3>:
    71e0:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__divsf3x>
    71e4:	0c 94 05 35 	jmp	0x6a0a	; 0x6a0a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003a02 <__divsf3x>:
    3a02:	10 c0       	rjmp	.+32     	; 0x3a24 <__divsf3x+0x22>
    3a04:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <__fp_pscB>
    3a08:	58 f0       	brcs	.+22     	; 0x3a20 <__divsf3x+0x1e>
    3a0a:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <__fp_pscA>
    3a0e:	40 f0       	brcs	.+16     	; 0x3a20 <__divsf3x+0x1e>
    3a10:	29 f4       	brne	.+10     	; 0x3a1c <__divsf3x+0x1a>
    3a12:	5f 3f       	cpi	r21, 0xFF	; 255
    3a14:	29 f0       	breq	.+10     	; 0x3a20 <__divsf3x+0x1e>
    3a16:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__fp_inf>
    3a1a:	51 11       	cpse	r21, r1
    3a1c:	0c 94 07 38 	jmp	0x700e	; 0x700e <__fp_szero>
    3a20:	0c 94 17 39 	jmp	0x722e	; 0x722e <__fp_nan>
    3a24:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__fp_split3>
    3a28:	68 f3       	brcs	.-38     	; 0x3a04 <__divsf3x+0x2>

00003a2a <__divsf3_pse>:
    3a2a:	99 23       	and	r25, r25
    3a2c:	b1 f3       	breq	.-20     	; 0x3a1a <__divsf3x+0x18>
    3a2e:	55 23       	and	r21, r21
    3a30:	91 f3       	breq	.-28     	; 0x3a16 <__divsf3x+0x14>
    3a32:	95 1b       	sub	r25, r21
    3a34:	55 0b       	sbc	r21, r21
    3a36:	bb 27       	eor	r27, r27
    3a38:	aa 27       	eor	r26, r26
    3a3a:	62 17       	cp	r22, r18
    3a3c:	73 07       	cpc	r23, r19
    3a3e:	84 07       	cpc	r24, r20
    3a40:	38 f0       	brcs	.+14     	; 0x3a50 <__divsf3_pse+0x26>
    3a42:	9f 5f       	subi	r25, 0xFF	; 255
    3a44:	5f 4f       	sbci	r21, 0xFF	; 255
    3a46:	22 0f       	add	r18, r18
    3a48:	33 1f       	adc	r19, r19
    3a4a:	44 1f       	adc	r20, r20
    3a4c:	aa 1f       	adc	r26, r26
    3a4e:	a9 f3       	breq	.-22     	; 0x3a3a <__divsf3_pse+0x10>
    3a50:	35 d0       	rcall	.+106    	; 0x3abc <__divsf3_pse+0x92>
    3a52:	0e 2e       	mov	r0, r30
    3a54:	3a f0       	brmi	.+14     	; 0x3a64 <__divsf3_pse+0x3a>
    3a56:	e0 e8       	ldi	r30, 0x80	; 128
    3a58:	32 d0       	rcall	.+100    	; 0x3abe <__divsf3_pse+0x94>
    3a5a:	91 50       	subi	r25, 0x01	; 1
    3a5c:	50 40       	sbci	r21, 0x00	; 0
    3a5e:	e6 95       	lsr	r30
    3a60:	00 1c       	adc	r0, r0
    3a62:	ca f7       	brpl	.-14     	; 0x3a56 <__divsf3_pse+0x2c>
    3a64:	2b d0       	rcall	.+86     	; 0x3abc <__divsf3_pse+0x92>
    3a66:	fe 2f       	mov	r31, r30
    3a68:	29 d0       	rcall	.+82     	; 0x3abc <__divsf3_pse+0x92>
    3a6a:	66 0f       	add	r22, r22
    3a6c:	77 1f       	adc	r23, r23
    3a6e:	88 1f       	adc	r24, r24
    3a70:	bb 1f       	adc	r27, r27
    3a72:	26 17       	cp	r18, r22
    3a74:	37 07       	cpc	r19, r23
    3a76:	48 07       	cpc	r20, r24
    3a78:	ab 07       	cpc	r26, r27
    3a7a:	b0 e8       	ldi	r27, 0x80	; 128
    3a7c:	09 f0       	breq	.+2      	; 0x3a80 <__divsf3_pse+0x56>
    3a7e:	bb 0b       	sbc	r27, r27
    3a80:	80 2d       	mov	r24, r0
    3a82:	bf 01       	movw	r22, r30
    3a84:	ff 27       	eor	r31, r31
    3a86:	93 58       	subi	r25, 0x83	; 131
    3a88:	5f 4f       	sbci	r21, 0xFF	; 255
    3a8a:	3a f0       	brmi	.+14     	; 0x3a9a <__divsf3_pse+0x70>
    3a8c:	9e 3f       	cpi	r25, 0xFE	; 254
    3a8e:	51 05       	cpc	r21, r1
    3a90:	78 f0       	brcs	.+30     	; 0x3ab0 <__divsf3_pse+0x86>
    3a92:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__fp_inf>
    3a96:	0c 94 07 38 	jmp	0x700e	; 0x700e <__fp_szero>
    3a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    3a9c:	e4 f3       	brlt	.-8      	; 0x3a96 <__divsf3_pse+0x6c>
    3a9e:	98 3e       	cpi	r25, 0xE8	; 232
    3aa0:	d4 f3       	brlt	.-12     	; 0x3a96 <__divsf3_pse+0x6c>
    3aa2:	86 95       	lsr	r24
    3aa4:	77 95       	ror	r23
    3aa6:	67 95       	ror	r22
    3aa8:	b7 95       	ror	r27
    3aaa:	f7 95       	ror	r31
    3aac:	9f 5f       	subi	r25, 0xFF	; 255
    3aae:	c9 f7       	brne	.-14     	; 0x3aa2 <__divsf3_pse+0x78>
    3ab0:	88 0f       	add	r24, r24
    3ab2:	91 1d       	adc	r25, r1
    3ab4:	96 95       	lsr	r25
    3ab6:	87 95       	ror	r24
    3ab8:	97 f9       	bld	r25, 7
    3aba:	08 95       	ret
    3abc:	e1 e0       	ldi	r30, 0x01	; 1
    3abe:	66 0f       	add	r22, r22
    3ac0:	77 1f       	adc	r23, r23
    3ac2:	88 1f       	adc	r24, r24
    3ac4:	bb 1f       	adc	r27, r27
    3ac6:	62 17       	cp	r22, r18
    3ac8:	73 07       	cpc	r23, r19
    3aca:	84 07       	cpc	r24, r20
    3acc:	ba 07       	cpc	r27, r26
    3ace:	20 f0       	brcs	.+8      	; 0x3ad8 <__divsf3_pse+0xae>
    3ad0:	62 1b       	sub	r22, r18
    3ad2:	73 0b       	sbc	r23, r19
    3ad4:	84 0b       	sbc	r24, r20
    3ad6:	ba 0b       	sbc	r27, r26
    3ad8:	ee 1f       	adc	r30, r30
    3ada:	88 f7       	brcc	.-30     	; 0x3abe <__divsf3_pse+0x94>
    3adc:	e0 95       	com	r30
    3ade:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005326 <__fixunssfsi>:
    5326:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <__fp_splitA>
    532a:	88 f0       	brcs	.+34     	; 0x534e <__fixunssfsi+0x28>
    532c:	9f 57       	subi	r25, 0x7F	; 127
    532e:	98 f0       	brcs	.+38     	; 0x5356 <__fixunssfsi+0x30>
    5330:	b9 2f       	mov	r27, r25
    5332:	99 27       	eor	r25, r25
    5334:	b7 51       	subi	r27, 0x17	; 23
    5336:	b0 f0       	brcs	.+44     	; 0x5364 <__fixunssfsi+0x3e>
    5338:	e1 f0       	breq	.+56     	; 0x5372 <__fixunssfsi+0x4c>
    533a:	66 0f       	add	r22, r22
    533c:	77 1f       	adc	r23, r23
    533e:	88 1f       	adc	r24, r24
    5340:	99 1f       	adc	r25, r25
    5342:	1a f0       	brmi	.+6      	; 0x534a <__fixunssfsi+0x24>
    5344:	ba 95       	dec	r27
    5346:	c9 f7       	brne	.-14     	; 0x533a <__fixunssfsi+0x14>
    5348:	14 c0       	rjmp	.+40     	; 0x5372 <__fixunssfsi+0x4c>
    534a:	b1 30       	cpi	r27, 0x01	; 1
    534c:	91 f0       	breq	.+36     	; 0x5372 <__fixunssfsi+0x4c>
    534e:	0e 94 06 38 	call	0x700c	; 0x700c <__fp_zero>
    5352:	b1 e0       	ldi	r27, 0x01	; 1
    5354:	08 95       	ret
    5356:	0c 94 06 38 	jmp	0x700c	; 0x700c <__fp_zero>
    535a:	67 2f       	mov	r22, r23
    535c:	78 2f       	mov	r23, r24
    535e:	88 27       	eor	r24, r24
    5360:	b8 5f       	subi	r27, 0xF8	; 248
    5362:	39 f0       	breq	.+14     	; 0x5372 <__fixunssfsi+0x4c>
    5364:	b9 3f       	cpi	r27, 0xF9	; 249
    5366:	cc f3       	brlt	.-14     	; 0x535a <__fixunssfsi+0x34>
    5368:	86 95       	lsr	r24
    536a:	77 95       	ror	r23
    536c:	67 95       	ror	r22
    536e:	b3 95       	inc	r27
    5370:	d9 f7       	brne	.-10     	; 0x5368 <__fixunssfsi+0x42>
    5372:	3e f4       	brtc	.+14     	; 0x5382 <__fixunssfsi+0x5c>
    5374:	90 95       	com	r25
    5376:	80 95       	com	r24
    5378:	70 95       	com	r23
    537a:	61 95       	neg	r22
    537c:	7f 4f       	sbci	r23, 0xFF	; 255
    537e:	8f 4f       	sbci	r24, 0xFF	; 255
    5380:	9f 4f       	sbci	r25, 0xFF	; 255
    5382:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000049ae <__floatunsisf>:
    49ae:	e8 94       	clt
    49b0:	09 c0       	rjmp	.+18     	; 0x49c4 <__floatsisf+0x12>

000049b2 <__floatsisf>:
    49b2:	97 fb       	bst	r25, 7
    49b4:	3e f4       	brtc	.+14     	; 0x49c4 <__floatsisf+0x12>
    49b6:	90 95       	com	r25
    49b8:	80 95       	com	r24
    49ba:	70 95       	com	r23
    49bc:	61 95       	neg	r22
    49be:	7f 4f       	sbci	r23, 0xFF	; 255
    49c0:	8f 4f       	sbci	r24, 0xFF	; 255
    49c2:	9f 4f       	sbci	r25, 0xFF	; 255
    49c4:	99 23       	and	r25, r25
    49c6:	a9 f0       	breq	.+42     	; 0x49f2 <__floatsisf+0x40>
    49c8:	f9 2f       	mov	r31, r25
    49ca:	96 e9       	ldi	r25, 0x96	; 150
    49cc:	bb 27       	eor	r27, r27
    49ce:	93 95       	inc	r25
    49d0:	f6 95       	lsr	r31
    49d2:	87 95       	ror	r24
    49d4:	77 95       	ror	r23
    49d6:	67 95       	ror	r22
    49d8:	b7 95       	ror	r27
    49da:	f1 11       	cpse	r31, r1
    49dc:	f8 cf       	rjmp	.-16     	; 0x49ce <__floatsisf+0x1c>
    49de:	fa f4       	brpl	.+62     	; 0x4a1e <__floatsisf+0x6c>
    49e0:	bb 0f       	add	r27, r27
    49e2:	11 f4       	brne	.+4      	; 0x49e8 <__floatsisf+0x36>
    49e4:	60 ff       	sbrs	r22, 0
    49e6:	1b c0       	rjmp	.+54     	; 0x4a1e <__floatsisf+0x6c>
    49e8:	6f 5f       	subi	r22, 0xFF	; 255
    49ea:	7f 4f       	sbci	r23, 0xFF	; 255
    49ec:	8f 4f       	sbci	r24, 0xFF	; 255
    49ee:	9f 4f       	sbci	r25, 0xFF	; 255
    49f0:	16 c0       	rjmp	.+44     	; 0x4a1e <__floatsisf+0x6c>
    49f2:	88 23       	and	r24, r24
    49f4:	11 f0       	breq	.+4      	; 0x49fa <__floatsisf+0x48>
    49f6:	96 e9       	ldi	r25, 0x96	; 150
    49f8:	11 c0       	rjmp	.+34     	; 0x4a1c <__floatsisf+0x6a>
    49fa:	77 23       	and	r23, r23
    49fc:	21 f0       	breq	.+8      	; 0x4a06 <__floatsisf+0x54>
    49fe:	9e e8       	ldi	r25, 0x8E	; 142
    4a00:	87 2f       	mov	r24, r23
    4a02:	76 2f       	mov	r23, r22
    4a04:	05 c0       	rjmp	.+10     	; 0x4a10 <__floatsisf+0x5e>
    4a06:	66 23       	and	r22, r22
    4a08:	71 f0       	breq	.+28     	; 0x4a26 <__floatsisf+0x74>
    4a0a:	96 e8       	ldi	r25, 0x86	; 134
    4a0c:	86 2f       	mov	r24, r22
    4a0e:	70 e0       	ldi	r23, 0x00	; 0
    4a10:	60 e0       	ldi	r22, 0x00	; 0
    4a12:	2a f0       	brmi	.+10     	; 0x4a1e <__floatsisf+0x6c>
    4a14:	9a 95       	dec	r25
    4a16:	66 0f       	add	r22, r22
    4a18:	77 1f       	adc	r23, r23
    4a1a:	88 1f       	adc	r24, r24
    4a1c:	da f7       	brpl	.-10     	; 0x4a14 <__floatsisf+0x62>
    4a1e:	88 0f       	add	r24, r24
    4a20:	96 95       	lsr	r25
    4a22:	87 95       	ror	r24
    4a24:	97 f9       	bld	r25, 7
    4a26:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005d34 <__fp_cmp>:
    5d34:	99 0f       	add	r25, r25
    5d36:	00 08       	sbc	r0, r0
    5d38:	55 0f       	add	r21, r21
    5d3a:	aa 0b       	sbc	r26, r26
    5d3c:	e0 e8       	ldi	r30, 0x80	; 128
    5d3e:	fe ef       	ldi	r31, 0xFE	; 254
    5d40:	16 16       	cp	r1, r22
    5d42:	17 06       	cpc	r1, r23
    5d44:	e8 07       	cpc	r30, r24
    5d46:	f9 07       	cpc	r31, r25
    5d48:	c0 f0       	brcs	.+48     	; 0x5d7a <__fp_cmp+0x46>
    5d4a:	12 16       	cp	r1, r18
    5d4c:	13 06       	cpc	r1, r19
    5d4e:	e4 07       	cpc	r30, r20
    5d50:	f5 07       	cpc	r31, r21
    5d52:	98 f0       	brcs	.+38     	; 0x5d7a <__fp_cmp+0x46>
    5d54:	62 1b       	sub	r22, r18
    5d56:	73 0b       	sbc	r23, r19
    5d58:	84 0b       	sbc	r24, r20
    5d5a:	95 0b       	sbc	r25, r21
    5d5c:	39 f4       	brne	.+14     	; 0x5d6c <__fp_cmp+0x38>
    5d5e:	0a 26       	eor	r0, r26
    5d60:	61 f0       	breq	.+24     	; 0x5d7a <__fp_cmp+0x46>
    5d62:	23 2b       	or	r18, r19
    5d64:	24 2b       	or	r18, r20
    5d66:	25 2b       	or	r18, r21
    5d68:	21 f4       	brne	.+8      	; 0x5d72 <__fp_cmp+0x3e>
    5d6a:	08 95       	ret
    5d6c:	0a 26       	eor	r0, r26
    5d6e:	09 f4       	brne	.+2      	; 0x5d72 <__fp_cmp+0x3e>
    5d70:	a1 40       	sbci	r26, 0x01	; 1
    5d72:	a6 95       	lsr	r26
    5d74:	8f ef       	ldi	r24, 0xFF	; 255
    5d76:	81 1d       	adc	r24, r1
    5d78:	81 1d       	adc	r24, r1
    5d7a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000070ec <__fp_inf>:
    70ec:	97 f9       	bld	r25, 7
    70ee:	9f 67       	ori	r25, 0x7F	; 127
    70f0:	80 e8       	ldi	r24, 0x80	; 128
    70f2:	70 e0       	ldi	r23, 0x00	; 0
    70f4:	60 e0       	ldi	r22, 0x00	; 0
    70f6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000722e <__fp_nan>:
    722e:	9f ef       	ldi	r25, 0xFF	; 255
    7230:	80 ec       	ldi	r24, 0xC0	; 192
    7232:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006ff0 <__fp_pscA>:
    6ff0:	00 24       	eor	r0, r0
    6ff2:	0a 94       	dec	r0
    6ff4:	16 16       	cp	r1, r22
    6ff6:	17 06       	cpc	r1, r23
    6ff8:	18 06       	cpc	r1, r24
    6ffa:	09 06       	cpc	r0, r25
    6ffc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006ffe <__fp_pscB>:
    6ffe:	00 24       	eor	r0, r0
    7000:	0a 94       	dec	r0
    7002:	12 16       	cp	r1, r18
    7004:	13 06       	cpc	r1, r19
    7006:	14 06       	cpc	r1, r20
    7008:	05 06       	cpc	r0, r21
    700a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006a0a <__fp_round>:
    6a0a:	09 2e       	mov	r0, r25
    6a0c:	03 94       	inc	r0
    6a0e:	00 0c       	add	r0, r0
    6a10:	11 f4       	brne	.+4      	; 0x6a16 <__fp_round+0xc>
    6a12:	88 23       	and	r24, r24
    6a14:	52 f0       	brmi	.+20     	; 0x6a2a <__fp_round+0x20>
    6a16:	bb 0f       	add	r27, r27
    6a18:	40 f4       	brcc	.+16     	; 0x6a2a <__fp_round+0x20>
    6a1a:	bf 2b       	or	r27, r31
    6a1c:	11 f4       	brne	.+4      	; 0x6a22 <__fp_round+0x18>
    6a1e:	60 ff       	sbrs	r22, 0
    6a20:	04 c0       	rjmp	.+8      	; 0x6a2a <__fp_round+0x20>
    6a22:	6f 5f       	subi	r22, 0xFF	; 255
    6a24:	7f 4f       	sbci	r23, 0xFF	; 255
    6a26:	8f 4f       	sbci	r24, 0xFF	; 255
    6a28:	9f 4f       	sbci	r25, 0xFF	; 255
    6a2a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005e94 <__fp_split3>:
    5e94:	57 fd       	sbrc	r21, 7
    5e96:	90 58       	subi	r25, 0x80	; 128
    5e98:	44 0f       	add	r20, r20
    5e9a:	55 1f       	adc	r21, r21
    5e9c:	59 f0       	breq	.+22     	; 0x5eb4 <__fp_splitA+0x10>
    5e9e:	5f 3f       	cpi	r21, 0xFF	; 255
    5ea0:	71 f0       	breq	.+28     	; 0x5ebe <__fp_splitA+0x1a>
    5ea2:	47 95       	ror	r20

00005ea4 <__fp_splitA>:
    5ea4:	88 0f       	add	r24, r24
    5ea6:	97 fb       	bst	r25, 7
    5ea8:	99 1f       	adc	r25, r25
    5eaa:	61 f0       	breq	.+24     	; 0x5ec4 <__fp_splitA+0x20>
    5eac:	9f 3f       	cpi	r25, 0xFF	; 255
    5eae:	79 f0       	breq	.+30     	; 0x5ece <__fp_splitA+0x2a>
    5eb0:	87 95       	ror	r24
    5eb2:	08 95       	ret
    5eb4:	12 16       	cp	r1, r18
    5eb6:	13 06       	cpc	r1, r19
    5eb8:	14 06       	cpc	r1, r20
    5eba:	55 1f       	adc	r21, r21
    5ebc:	f2 cf       	rjmp	.-28     	; 0x5ea2 <__fp_split3+0xe>
    5ebe:	46 95       	lsr	r20
    5ec0:	f1 df       	rcall	.-30     	; 0x5ea4 <__fp_splitA>
    5ec2:	08 c0       	rjmp	.+16     	; 0x5ed4 <__fp_splitA+0x30>
    5ec4:	16 16       	cp	r1, r22
    5ec6:	17 06       	cpc	r1, r23
    5ec8:	18 06       	cpc	r1, r24
    5eca:	99 1f       	adc	r25, r25
    5ecc:	f1 cf       	rjmp	.-30     	; 0x5eb0 <__fp_splitA+0xc>
    5ece:	86 95       	lsr	r24
    5ed0:	71 05       	cpc	r23, r1
    5ed2:	61 05       	cpc	r22, r1
    5ed4:	08 94       	sec
    5ed6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000700c <__fp_zero>:
    700c:	e8 94       	clt

0000700e <__fp_szero>:
    700e:	bb 27       	eor	r27, r27
    7010:	66 27       	eor	r22, r22
    7012:	77 27       	eor	r23, r23
    7014:	cb 01       	movw	r24, r22
    7016:	97 f9       	bld	r25, 7
    7018:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000071e8 <__mulsf3>:
    71e8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__mulsf3x>
    71ec:	0c 94 05 35 	jmp	0x6a0a	; 0x6a0a <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003ae0 <__mulsf3x>:
    3ae0:	0f c0       	rjmp	.+30     	; 0x3b00 <__mulsf3x+0x20>
    3ae2:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <__fp_pscA>
    3ae6:	38 f0       	brcs	.+14     	; 0x3af6 <__mulsf3x+0x16>
    3ae8:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <__fp_pscB>
    3aec:	20 f0       	brcs	.+8      	; 0x3af6 <__mulsf3x+0x16>
    3aee:	95 23       	and	r25, r21
    3af0:	11 f0       	breq	.+4      	; 0x3af6 <__mulsf3x+0x16>
    3af2:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__fp_inf>
    3af6:	0c 94 17 39 	jmp	0x722e	; 0x722e <__fp_nan>
    3afa:	11 24       	eor	r1, r1
    3afc:	0c 94 07 38 	jmp	0x700e	; 0x700e <__fp_szero>
    3b00:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <__fp_split3>
    3b04:	70 f3       	brcs	.-36     	; 0x3ae2 <__mulsf3x+0x2>

00003b06 <__mulsf3_pse>:
    3b06:	95 9f       	mul	r25, r21
    3b08:	c1 f3       	breq	.-16     	; 0x3afa <__mulsf3x+0x1a>
    3b0a:	95 0f       	add	r25, r21
    3b0c:	50 e0       	ldi	r21, 0x00	; 0
    3b0e:	55 1f       	adc	r21, r21
    3b10:	62 9f       	mul	r22, r18
    3b12:	f0 01       	movw	r30, r0
    3b14:	72 9f       	mul	r23, r18
    3b16:	bb 27       	eor	r27, r27
    3b18:	f0 0d       	add	r31, r0
    3b1a:	b1 1d       	adc	r27, r1
    3b1c:	63 9f       	mul	r22, r19
    3b1e:	aa 27       	eor	r26, r26
    3b20:	f0 0d       	add	r31, r0
    3b22:	b1 1d       	adc	r27, r1
    3b24:	aa 1f       	adc	r26, r26
    3b26:	64 9f       	mul	r22, r20
    3b28:	66 27       	eor	r22, r22
    3b2a:	b0 0d       	add	r27, r0
    3b2c:	a1 1d       	adc	r26, r1
    3b2e:	66 1f       	adc	r22, r22
    3b30:	82 9f       	mul	r24, r18
    3b32:	22 27       	eor	r18, r18
    3b34:	b0 0d       	add	r27, r0
    3b36:	a1 1d       	adc	r26, r1
    3b38:	62 1f       	adc	r22, r18
    3b3a:	73 9f       	mul	r23, r19
    3b3c:	b0 0d       	add	r27, r0
    3b3e:	a1 1d       	adc	r26, r1
    3b40:	62 1f       	adc	r22, r18
    3b42:	83 9f       	mul	r24, r19
    3b44:	a0 0d       	add	r26, r0
    3b46:	61 1d       	adc	r22, r1
    3b48:	22 1f       	adc	r18, r18
    3b4a:	74 9f       	mul	r23, r20
    3b4c:	33 27       	eor	r19, r19
    3b4e:	a0 0d       	add	r26, r0
    3b50:	61 1d       	adc	r22, r1
    3b52:	23 1f       	adc	r18, r19
    3b54:	84 9f       	mul	r24, r20
    3b56:	60 0d       	add	r22, r0
    3b58:	21 1d       	adc	r18, r1
    3b5a:	82 2f       	mov	r24, r18
    3b5c:	76 2f       	mov	r23, r22
    3b5e:	6a 2f       	mov	r22, r26
    3b60:	11 24       	eor	r1, r1
    3b62:	9f 57       	subi	r25, 0x7F	; 127
    3b64:	50 40       	sbci	r21, 0x00	; 0
    3b66:	9a f0       	brmi	.+38     	; 0x3b8e <__mulsf3_pse+0x88>
    3b68:	f1 f0       	breq	.+60     	; 0x3ba6 <__mulsf3_pse+0xa0>
    3b6a:	88 23       	and	r24, r24
    3b6c:	4a f0       	brmi	.+18     	; 0x3b80 <__mulsf3_pse+0x7a>
    3b6e:	ee 0f       	add	r30, r30
    3b70:	ff 1f       	adc	r31, r31
    3b72:	bb 1f       	adc	r27, r27
    3b74:	66 1f       	adc	r22, r22
    3b76:	77 1f       	adc	r23, r23
    3b78:	88 1f       	adc	r24, r24
    3b7a:	91 50       	subi	r25, 0x01	; 1
    3b7c:	50 40       	sbci	r21, 0x00	; 0
    3b7e:	a9 f7       	brne	.-22     	; 0x3b6a <__mulsf3_pse+0x64>
    3b80:	9e 3f       	cpi	r25, 0xFE	; 254
    3b82:	51 05       	cpc	r21, r1
    3b84:	80 f0       	brcs	.+32     	; 0x3ba6 <__mulsf3_pse+0xa0>
    3b86:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__fp_inf>
    3b8a:	0c 94 07 38 	jmp	0x700e	; 0x700e <__fp_szero>
    3b8e:	5f 3f       	cpi	r21, 0xFF	; 255
    3b90:	e4 f3       	brlt	.-8      	; 0x3b8a <__mulsf3_pse+0x84>
    3b92:	98 3e       	cpi	r25, 0xE8	; 232
    3b94:	d4 f3       	brlt	.-12     	; 0x3b8a <__mulsf3_pse+0x84>
    3b96:	86 95       	lsr	r24
    3b98:	77 95       	ror	r23
    3b9a:	67 95       	ror	r22
    3b9c:	b7 95       	ror	r27
    3b9e:	f7 95       	ror	r31
    3ba0:	e7 95       	ror	r30
    3ba2:	9f 5f       	subi	r25, 0xFF	; 255
    3ba4:	c1 f7       	brne	.-16     	; 0x3b96 <__mulsf3_pse+0x90>
    3ba6:	fe 2b       	or	r31, r30
    3ba8:	88 0f       	add	r24, r24
    3baa:	91 1d       	adc	r25, r1
    3bac:	96 95       	lsr	r25
    3bae:	87 95       	ror	r24
    3bb0:	97 f9       	bld	r25, 7
    3bb2:	08 95       	ret

Disassembly of section .text.avrlibc:

000009d4 <vfprintf>:
     9d4:	a4 e1       	ldi	r26, 0x14	; 20
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e0 ef       	ldi	r30, 0xF0	; 240
     9da:	f4 e0       	ldi	r31, 0x04	; 4
     9dc:	0c 94 72 31 	jmp	0x62e4	; 0x62e4 <__prologue_saves__>
     9e0:	6c 01       	movw	r12, r24
     9e2:	1a 01       	movw	r2, r20
     9e4:	46 2e       	mov	r4, r22
     9e6:	59 01       	movw	r10, r18
     9e8:	fc 01       	movw	r30, r24
     9ea:	10 86       	std	Z+8, r1	; 0x08
     9ec:	17 82       	std	Z+7, r1	; 0x07
     9ee:	84 81       	ldd	r24, Z+4	; 0x04
     9f0:	81 ff       	sbrs	r24, 1
     9f2:	62 c3       	rjmp	.+1732   	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	9d 87       	std	Y+13, r25	; 0x0d
     9fa:	8c 87       	std	Y+12, r24	; 0x0c
     9fc:	a0 e8       	ldi	r26, 0x80	; 128
     9fe:	8a 8b       	std	Y+18, r24	; 0x12
     a00:	9b 8b       	std	Y+19, r25	; 0x13
     a02:	ac 8b       	std	Y+20, r26	; 0x14
     a04:	f1 01       	movw	r30, r2
     a06:	84 91       	lpm	r24, Z
     a08:	47 fc       	sbrc	r4, 7
     a0a:	80 81       	ld	r24, Z
     a0c:	88 23       	and	r24, r24
     a0e:	09 f4       	brne	.+2      	; 0xa12 <vfprintf+0x3e>
     a10:	4f c3       	rjmp	.+1694   	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
     a12:	44 2d       	mov	r20, r4
     a14:	91 01       	movw	r18, r2
     a16:	2f 5f       	subi	r18, 0xFF	; 255
     a18:	3f 4f       	sbci	r19, 0xFF	; 255
     a1a:	4f 4f       	sbci	r20, 0xFF	; 255
     a1c:	85 32       	cpi	r24, 0x25	; 37
     a1e:	19 f0       	breq	.+6      	; 0xa26 <vfprintf+0x52>
     a20:	19 01       	movw	r2, r18
     a22:	44 2e       	mov	r4, r20
     a24:	0a c0       	rjmp	.+20     	; 0xa3a <vfprintf+0x66>
     a26:	f9 01       	movw	r30, r18
     a28:	84 91       	lpm	r24, Z
     a2a:	47 fd       	sbrc	r20, 7
     a2c:	80 81       	ld	r24, Z
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	29 0e       	add	r2, r25
     a32:	31 1c       	adc	r3, r1
     a34:	41 1c       	adc	r4, r1
     a36:	85 32       	cpi	r24, 0x25	; 37
     a38:	49 f4       	brne	.+18     	; 0xa4c <vfprintf+0x78>
     a3a:	b6 01       	movw	r22, r12
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     a42:	bf 86       	std	Y+15, r11	; 0x0f
     a44:	ae 86       	std	Y+14, r10	; 0x0e
     a46:	ae 84       	ldd	r10, Y+14	; 0x0e
     a48:	bf 84       	ldd	r11, Y+15	; 0x0f
     a4a:	dc cf       	rjmp	.-72     	; 0xa04 <vfprintf+0x30>
     a4c:	10 e0       	ldi	r17, 0x00	; 0
     a4e:	f1 2c       	mov	r15, r1
     a50:	00 e0       	ldi	r16, 0x00	; 0
     a52:	00 32       	cpi	r16, 0x20	; 32
     a54:	a0 f4       	brcc	.+40     	; 0xa7e <vfprintf+0xaa>
     a56:	8b 32       	cpi	r24, 0x2B	; 43
     a58:	69 f0       	breq	.+26     	; 0xa74 <vfprintf+0xa0>
     a5a:	30 f4       	brcc	.+12     	; 0xa68 <vfprintf+0x94>
     a5c:	80 32       	cpi	r24, 0x20	; 32
     a5e:	59 f0       	breq	.+22     	; 0xa76 <vfprintf+0xa2>
     a60:	83 32       	cpi	r24, 0x23	; 35
     a62:	69 f4       	brne	.+26     	; 0xa7e <vfprintf+0xaa>
     a64:	00 61       	ori	r16, 0x10	; 16
     a66:	2c c0       	rjmp	.+88     	; 0xac0 <vfprintf+0xec>
     a68:	8d 32       	cpi	r24, 0x2D	; 45
     a6a:	39 f0       	breq	.+14     	; 0xa7a <vfprintf+0xa6>
     a6c:	80 33       	cpi	r24, 0x30	; 48
     a6e:	39 f4       	brne	.+14     	; 0xa7e <vfprintf+0xaa>
     a70:	01 60       	ori	r16, 0x01	; 1
     a72:	26 c0       	rjmp	.+76     	; 0xac0 <vfprintf+0xec>
     a74:	02 60       	ori	r16, 0x02	; 2
     a76:	04 60       	ori	r16, 0x04	; 4
     a78:	23 c0       	rjmp	.+70     	; 0xac0 <vfprintf+0xec>
     a7a:	08 60       	ori	r16, 0x08	; 8
     a7c:	21 c0       	rjmp	.+66     	; 0xac0 <vfprintf+0xec>
     a7e:	07 fd       	sbrc	r16, 7
     a80:	29 c0       	rjmp	.+82     	; 0xad4 <vfprintf+0x100>
     a82:	90 ed       	ldi	r25, 0xD0	; 208
     a84:	98 0f       	add	r25, r24
     a86:	9a 30       	cpi	r25, 0x0A	; 10
     a88:	78 f4       	brcc	.+30     	; 0xaa8 <vfprintf+0xd4>
     a8a:	06 ff       	sbrs	r16, 6
     a8c:	06 c0       	rjmp	.+12     	; 0xa9a <vfprintf+0xc6>
     a8e:	aa e0       	ldi	r26, 0x0A	; 10
     a90:	1a 9f       	mul	r17, r26
     a92:	90 0d       	add	r25, r0
     a94:	11 24       	eor	r1, r1
     a96:	19 2f       	mov	r17, r25
     a98:	13 c0       	rjmp	.+38     	; 0xac0 <vfprintf+0xec>
     a9a:	ea e0       	ldi	r30, 0x0A	; 10
     a9c:	fe 9e       	mul	r15, r30
     a9e:	90 0d       	add	r25, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	f9 2e       	mov	r15, r25
     aa4:	00 62       	ori	r16, 0x20	; 32
     aa6:	0c c0       	rjmp	.+24     	; 0xac0 <vfprintf+0xec>
     aa8:	8e 32       	cpi	r24, 0x2E	; 46
     aaa:	21 f4       	brne	.+8      	; 0xab4 <vfprintf+0xe0>
     aac:	06 fd       	sbrc	r16, 6
     aae:	00 c3       	rjmp	.+1536   	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
     ab0:	00 64       	ori	r16, 0x40	; 64
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <vfprintf+0xec>
     ab4:	8c 36       	cpi	r24, 0x6C	; 108
     ab6:	11 f4       	brne	.+4      	; 0xabc <vfprintf+0xe8>
     ab8:	00 68       	ori	r16, 0x80	; 128
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <vfprintf+0xec>
     abc:	88 36       	cpi	r24, 0x68	; 104
     abe:	51 f4       	brne	.+20     	; 0xad4 <vfprintf+0x100>
     ac0:	f1 01       	movw	r30, r2
     ac2:	84 91       	lpm	r24, Z
     ac4:	47 fc       	sbrc	r4, 7
     ac6:	80 81       	ld	r24, Z
     ac8:	ff ef       	ldi	r31, 0xFF	; 255
     aca:	2f 1a       	sub	r2, r31
     acc:	3f 0a       	sbc	r3, r31
     ace:	4f 0a       	sbc	r4, r31
     ad0:	81 11       	cpse	r24, r1
     ad2:	bf cf       	rjmp	.-130    	; 0xa52 <vfprintf+0x7e>
     ad4:	9b eb       	ldi	r25, 0xBB	; 187
     ad6:	98 0f       	add	r25, r24
     ad8:	93 30       	cpi	r25, 0x03	; 3
     ada:	18 f4       	brcc	.+6      	; 0xae2 <vfprintf+0x10e>
     adc:	00 61       	ori	r16, 0x10	; 16
     ade:	80 5e       	subi	r24, 0xE0	; 224
     ae0:	06 c0       	rjmp	.+12     	; 0xaee <vfprintf+0x11a>
     ae2:	9b e9       	ldi	r25, 0x9B	; 155
     ae4:	98 0f       	add	r25, r24
     ae6:	93 30       	cpi	r25, 0x03	; 3
     ae8:	08 f0       	brcs	.+2      	; 0xaec <vfprintf+0x118>
     aea:	66 c1       	rjmp	.+716    	; 0xdb8 <vfprintf+0x3e4>
     aec:	0f 7e       	andi	r16, 0xEF	; 239
     aee:	06 ff       	sbrs	r16, 6
     af0:	16 e0       	ldi	r17, 0x06	; 6
     af2:	0f 73       	andi	r16, 0x3F	; 63
     af4:	70 2e       	mov	r7, r16
     af6:	85 36       	cpi	r24, 0x65	; 101
     af8:	21 f4       	brne	.+8      	; 0xb02 <vfprintf+0x12e>
     afa:	20 2f       	mov	r18, r16
     afc:	20 64       	ori	r18, 0x40	; 64
     afe:	72 2e       	mov	r7, r18
     b00:	08 c0       	rjmp	.+16     	; 0xb12 <vfprintf+0x13e>
     b02:	86 36       	cpi	r24, 0x66	; 102
     b04:	21 f4       	brne	.+8      	; 0xb0e <vfprintf+0x13a>
     b06:	80 2f       	mov	r24, r16
     b08:	80 68       	ori	r24, 0x80	; 128
     b0a:	78 2e       	mov	r7, r24
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <vfprintf+0x13e>
     b0e:	11 11       	cpse	r17, r1
     b10:	11 50       	subi	r17, 0x01	; 1
     b12:	77 fe       	sbrs	r7, 7
     b14:	07 c0       	rjmp	.+14     	; 0xb24 <vfprintf+0x150>
     b16:	1c 33       	cpi	r17, 0x3C	; 60
     b18:	50 f4       	brcc	.+20     	; 0xb2e <vfprintf+0x15a>
     b1a:	ee 24       	eor	r14, r14
     b1c:	e3 94       	inc	r14
     b1e:	e1 0e       	add	r14, r17
     b20:	27 e0       	ldi	r18, 0x07	; 7
     b22:	0b c0       	rjmp	.+22     	; 0xb3a <vfprintf+0x166>
     b24:	18 30       	cpi	r17, 0x08	; 8
     b26:	38 f0       	brcs	.+14     	; 0xb36 <vfprintf+0x162>
     b28:	27 e0       	ldi	r18, 0x07	; 7
     b2a:	17 e0       	ldi	r17, 0x07	; 7
     b2c:	05 c0       	rjmp	.+10     	; 0xb38 <vfprintf+0x164>
     b2e:	27 e0       	ldi	r18, 0x07	; 7
     b30:	6c e3       	ldi	r22, 0x3C	; 60
     b32:	e6 2e       	mov	r14, r22
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <vfprintf+0x166>
     b36:	21 2f       	mov	r18, r17
     b38:	e1 2c       	mov	r14, r1
     b3a:	f5 01       	movw	r30, r10
     b3c:	34 96       	adiw	r30, 0x04	; 4
     b3e:	ff 87       	std	Y+15, r31	; 0x0f
     b40:	ee 87       	std	Y+14, r30	; 0x0e
     b42:	f5 01       	movw	r30, r10
     b44:	60 81       	ld	r22, Z
     b46:	71 81       	ldd	r23, Z+1	; 0x01
     b48:	82 81       	ldd	r24, Z+2	; 0x02
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	0e 2d       	mov	r16, r14
     b4e:	ae 01       	movw	r20, r28
     b50:	4f 5f       	subi	r20, 0xFF	; 255
     b52:	5f 4f       	sbci	r21, 0xFF	; 255
     b54:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__ftoa_engine>
     b58:	5c 01       	movw	r10, r24
     b5a:	59 80       	ldd	r5, Y+1	; 0x01
     b5c:	50 fe       	sbrs	r5, 0
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <vfprintf+0x190>
     b60:	53 fe       	sbrs	r5, 3
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <vfprintf+0x19c>
     b64:	71 fc       	sbrc	r7, 1
     b66:	06 c0       	rjmp	.+12     	; 0xb74 <vfprintf+0x1a0>
     b68:	72 fe       	sbrs	r7, 2
     b6a:	06 c0       	rjmp	.+12     	; 0xb78 <vfprintf+0x1a4>
     b6c:	00 e2       	ldi	r16, 0x20	; 32
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <vfprintf+0x1a6>
     b70:	0d e2       	ldi	r16, 0x2D	; 45
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <vfprintf+0x1a6>
     b74:	0b e2       	ldi	r16, 0x2B	; 43
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <vfprintf+0x1a6>
     b78:	00 e0       	ldi	r16, 0x00	; 0
     b7a:	85 2d       	mov	r24, r5
     b7c:	8c 70       	andi	r24, 0x0C	; 12
     b7e:	19 f0       	breq	.+6      	; 0xb86 <vfprintf+0x1b2>
     b80:	01 11       	cpse	r16, r1
     b82:	73 c2       	rjmp	.+1254   	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
     b84:	be c2       	rjmp	.+1404   	; 0x1102 <__stack+0x3>
     b86:	77 fe       	sbrs	r7, 7
     b88:	0f c0       	rjmp	.+30     	; 0xba8 <vfprintf+0x1d4>
     b8a:	ea 0c       	add	r14, r10
     b8c:	54 fe       	sbrs	r5, 4
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <vfprintf+0x1c4>
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	81 33       	cpi	r24, 0x31	; 49
     b94:	09 f4       	brne	.+2      	; 0xb98 <vfprintf+0x1c4>
     b96:	ea 94       	dec	r14
     b98:	1e 14       	cp	r1, r14
     b9a:	74 f5       	brge	.+92     	; 0xbf8 <vfprintf+0x224>
     b9c:	28 e0       	ldi	r18, 0x08	; 8
     b9e:	2e 15       	cp	r18, r14
     ba0:	78 f5       	brcc	.+94     	; 0xc00 <vfprintf+0x22c>
     ba2:	38 e0       	ldi	r19, 0x08	; 8
     ba4:	e3 2e       	mov	r14, r19
     ba6:	2c c0       	rjmp	.+88     	; 0xc00 <vfprintf+0x22c>
     ba8:	76 fc       	sbrc	r7, 6
     baa:	2a c0       	rjmp	.+84     	; 0xc00 <vfprintf+0x22c>
     bac:	81 2f       	mov	r24, r17
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	8a 15       	cp	r24, r10
     bb2:	9b 05       	cpc	r25, r11
     bb4:	9c f0       	brlt	.+38     	; 0xbdc <vfprintf+0x208>
     bb6:	8c ef       	ldi	r24, 0xFC	; 252
     bb8:	a8 16       	cp	r10, r24
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	b8 06       	cpc	r11, r24
     bbe:	74 f0       	brlt	.+28     	; 0xbdc <vfprintf+0x208>
     bc0:	97 2d       	mov	r25, r7
     bc2:	90 68       	ori	r25, 0x80	; 128
     bc4:	79 2e       	mov	r7, r25
     bc6:	0a c0       	rjmp	.+20     	; 0xbdc <vfprintf+0x208>
     bc8:	e2 e0       	ldi	r30, 0x02	; 2
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	ec 0f       	add	r30, r28
     bce:	fd 1f       	adc	r31, r29
     bd0:	e1 0f       	add	r30, r17
     bd2:	f1 1d       	adc	r31, r1
     bd4:	80 81       	ld	r24, Z
     bd6:	80 33       	cpi	r24, 0x30	; 48
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <vfprintf+0x20c>
     bda:	11 50       	subi	r17, 0x01	; 1
     bdc:	11 11       	cpse	r17, r1
     bde:	f4 cf       	rjmp	.-24     	; 0xbc8 <vfprintf+0x1f4>
     be0:	77 fe       	sbrs	r7, 7
     be2:	0e c0       	rjmp	.+28     	; 0xc00 <vfprintf+0x22c>
     be4:	ee 24       	eor	r14, r14
     be6:	e3 94       	inc	r14
     be8:	e1 0e       	add	r14, r17
     bea:	81 2f       	mov	r24, r17
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	a8 16       	cp	r10, r24
     bf0:	b9 06       	cpc	r11, r25
     bf2:	2c f4       	brge	.+10     	; 0xbfe <vfprintf+0x22a>
     bf4:	1a 19       	sub	r17, r10
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <vfprintf+0x22c>
     bf8:	ee 24       	eor	r14, r14
     bfa:	e3 94       	inc	r14
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <vfprintf+0x22c>
     bfe:	10 e0       	ldi	r17, 0x00	; 0
     c00:	77 fe       	sbrs	r7, 7
     c02:	06 c0       	rjmp	.+12     	; 0xc10 <vfprintf+0x23c>
     c04:	1a 14       	cp	r1, r10
     c06:	1b 04       	cpc	r1, r11
     c08:	34 f4       	brge	.+12     	; 0xc16 <vfprintf+0x242>
     c0a:	c5 01       	movw	r24, r10
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <vfprintf+0x246>
     c10:	85 e0       	ldi	r24, 0x05	; 5
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <vfprintf+0x246>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	01 11       	cpse	r16, r1
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	11 23       	and	r17, r17
     c20:	31 f0       	breq	.+12     	; 0xc2e <vfprintf+0x25a>
     c22:	21 2f       	mov	r18, r17
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	2f 5f       	subi	r18, 0xFF	; 255
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
     c2e:	2f 2d       	mov	r18, r15
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	82 17       	cp	r24, r18
     c34:	93 07       	cpc	r25, r19
     c36:	14 f4       	brge	.+4      	; 0xc3c <vfprintf+0x268>
     c38:	f8 1a       	sub	r15, r24
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <vfprintf+0x26a>
     c3c:	f1 2c       	mov	r15, r1
     c3e:	87 2d       	mov	r24, r7
     c40:	89 70       	andi	r24, 0x09	; 9
     c42:	49 f4       	brne	.+18     	; 0xc56 <vfprintf+0x282>
     c44:	ff 20       	and	r15, r15
     c46:	39 f0       	breq	.+14     	; 0xc56 <vfprintf+0x282>
     c48:	b6 01       	movw	r22, r12
     c4a:	80 e2       	ldi	r24, 0x20	; 32
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     c52:	fa 94       	dec	r15
     c54:	f7 cf       	rjmp	.-18     	; 0xc44 <vfprintf+0x270>
     c56:	00 23       	and	r16, r16
     c58:	29 f0       	breq	.+10     	; 0xc64 <vfprintf+0x290>
     c5a:	b6 01       	movw	r22, r12
     c5c:	80 2f       	mov	r24, r16
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     c64:	73 fc       	sbrc	r7, 3
     c66:	09 c0       	rjmp	.+18     	; 0xc7a <vfprintf+0x2a6>
     c68:	ff 20       	and	r15, r15
     c6a:	39 f0       	breq	.+14     	; 0xc7a <vfprintf+0x2a6>
     c6c:	b6 01       	movw	r22, r12
     c6e:	80 e3       	ldi	r24, 0x30	; 48
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     c76:	fa 94       	dec	r15
     c78:	f7 cf       	rjmp	.-18     	; 0xc68 <vfprintf+0x294>
     c7a:	77 fe       	sbrs	r7, 7
     c7c:	49 c0       	rjmp	.+146    	; 0xd10 <vfprintf+0x33c>
     c7e:	35 01       	movw	r6, r10
     c80:	b7 fe       	sbrs	r11, 7
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0x2b4>
     c84:	61 2c       	mov	r6, r1
     c86:	71 2c       	mov	r7, r1
     c88:	c5 01       	movw	r24, r10
     c8a:	86 19       	sub	r24, r6
     c8c:	97 09       	sbc	r25, r7
     c8e:	88 24       	eor	r8, r8
     c90:	83 94       	inc	r8
     c92:	91 2c       	mov	r9, r1
     c94:	8c 0e       	add	r8, r28
     c96:	9d 1e       	adc	r9, r29
     c98:	88 0e       	add	r8, r24
     c9a:	99 1e       	adc	r9, r25
     c9c:	f5 01       	movw	r30, r10
     c9e:	ee 19       	sub	r30, r14
     ca0:	f1 09       	sbc	r31, r1
     ca2:	f9 8b       	std	Y+17, r31	; 0x11
     ca4:	e8 8b       	std	Y+16, r30	; 0x10
     ca6:	01 2f       	mov	r16, r17
     ca8:	10 e0       	ldi	r17, 0x00	; 0
     caa:	11 95       	neg	r17
     cac:	01 95       	neg	r16
     cae:	11 09       	sbc	r17, r1
     cb0:	ff ef       	ldi	r31, 0xFF	; 255
     cb2:	6f 16       	cp	r6, r31
     cb4:	7f 06       	cpc	r7, r31
     cb6:	29 f4       	brne	.+10     	; 0xcc2 <vfprintf+0x2ee>
     cb8:	b6 01       	movw	r22, r12
     cba:	8e e2       	ldi	r24, 0x2E	; 46
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     cc2:	a6 14       	cp	r10, r6
     cc4:	b7 04       	cpc	r11, r7
     cc6:	44 f0       	brlt	.+16     	; 0xcd8 <vfprintf+0x304>
     cc8:	88 89       	ldd	r24, Y+16	; 0x10
     cca:	99 89       	ldd	r25, Y+17	; 0x11
     ccc:	86 15       	cp	r24, r6
     cce:	97 05       	cpc	r25, r7
     cd0:	1c f4       	brge	.+6      	; 0xcd8 <vfprintf+0x304>
     cd2:	f4 01       	movw	r30, r8
     cd4:	81 81       	ldd	r24, Z+1	; 0x01
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <vfprintf+0x306>
     cd8:	80 e3       	ldi	r24, 0x30	; 48
     cda:	f1 e0       	ldi	r31, 0x01	; 1
     cdc:	6f 1a       	sub	r6, r31
     cde:	71 08       	sbc	r7, r1
     ce0:	2f ef       	ldi	r18, 0xFF	; 255
     ce2:	82 1a       	sub	r8, r18
     ce4:	92 0a       	sbc	r9, r18
     ce6:	60 16       	cp	r6, r16
     ce8:	71 06       	cpc	r7, r17
     cea:	2c f0       	brlt	.+10     	; 0xcf6 <vfprintf+0x322>
     cec:	b6 01       	movw	r22, r12
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     cf4:	dd cf       	rjmp	.-70     	; 0xcb0 <vfprintf+0x2dc>
     cf6:	a6 14       	cp	r10, r6
     cf8:	b7 04       	cpc	r11, r7
     cfa:	39 f4       	brne	.+14     	; 0xd0a <vfprintf+0x336>
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	96 33       	cpi	r25, 0x36	; 54
     d00:	18 f4       	brcc	.+6      	; 0xd08 <vfprintf+0x334>
     d02:	95 33       	cpi	r25, 0x35	; 53
     d04:	11 f4       	brne	.+4      	; 0xd0a <vfprintf+0x336>
     d06:	54 fe       	sbrs	r5, 4
     d08:	81 e3       	ldi	r24, 0x31	; 49
     d0a:	b6 01       	movw	r22, r12
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	51 c0       	rjmp	.+162    	; 0xdb2 <vfprintf+0x3de>
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	81 33       	cpi	r24, 0x31	; 49
     d14:	19 f0       	breq	.+6      	; 0xd1c <vfprintf+0x348>
     d16:	95 2d       	mov	r25, r5
     d18:	9f 7e       	andi	r25, 0xEF	; 239
     d1a:	59 2e       	mov	r5, r25
     d1c:	b6 01       	movw	r22, r12
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     d24:	11 11       	cpse	r17, r1
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <vfprintf+0x35e>
     d28:	74 fc       	sbrc	r7, 4
     d2a:	1c c0       	rjmp	.+56     	; 0xd64 <vfprintf+0x390>
     d2c:	85 e6       	ldi	r24, 0x65	; 101
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	1b c0       	rjmp	.+54     	; 0xd68 <vfprintf+0x394>
     d32:	b6 01       	movw	r22, r12
     d34:	8e e2       	ldi	r24, 0x2E	; 46
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     d3c:	02 e0       	ldi	r16, 0x02	; 2
     d3e:	01 0f       	add	r16, r17
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	11 e0       	ldi	r17, 0x01	; 1
     d44:	18 0f       	add	r17, r24
     d46:	e1 e0       	ldi	r30, 0x01	; 1
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	ec 0f       	add	r30, r28
     d4c:	fd 1f       	adc	r31, r29
     d4e:	e8 0f       	add	r30, r24
     d50:	f1 1d       	adc	r31, r1
     d52:	80 81       	ld	r24, Z
     d54:	b6 01       	movw	r22, r12
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     d5c:	81 2f       	mov	r24, r17
     d5e:	10 13       	cpse	r17, r16
     d60:	f0 cf       	rjmp	.-32     	; 0xd42 <vfprintf+0x36e>
     d62:	e2 cf       	rjmp	.-60     	; 0xd28 <vfprintf+0x354>
     d64:	85 e4       	ldi	r24, 0x45	; 69
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	b6 01       	movw	r22, r12
     d6a:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     d6e:	b7 fc       	sbrc	r11, 7
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <vfprintf+0x3a8>
     d72:	a1 14       	cp	r10, r1
     d74:	b1 04       	cpc	r11, r1
     d76:	39 f4       	brne	.+14     	; 0xd86 <vfprintf+0x3b2>
     d78:	54 fe       	sbrs	r5, 4
     d7a:	05 c0       	rjmp	.+10     	; 0xd86 <vfprintf+0x3b2>
     d7c:	b1 94       	neg	r11
     d7e:	a1 94       	neg	r10
     d80:	b1 08       	sbc	r11, r1
     d82:	8d e2       	ldi	r24, 0x2D	; 45
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <vfprintf+0x3b4>
     d86:	8b e2       	ldi	r24, 0x2B	; 43
     d88:	b6 01       	movw	r22, r12
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     d90:	80 e3       	ldi	r24, 0x30	; 48
     d92:	ea e0       	ldi	r30, 0x0A	; 10
     d94:	ae 16       	cp	r10, r30
     d96:	b1 04       	cpc	r11, r1
     d98:	2c f0       	brlt	.+10     	; 0xda4 <vfprintf+0x3d0>
     d9a:	8f 5f       	subi	r24, 0xFF	; 255
     d9c:	aa e0       	ldi	r26, 0x0A	; 10
     d9e:	aa 1a       	sub	r10, r26
     da0:	b1 08       	sbc	r11, r1
     da2:	f7 cf       	rjmp	.-18     	; 0xd92 <vfprintf+0x3be>
     da4:	b6 01       	movw	r22, r12
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     dac:	b6 01       	movw	r22, r12
     dae:	c5 01       	movw	r24, r10
     db0:	c0 96       	adiw	r24, 0x30	; 48
     db2:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     db6:	72 c1       	rjmp	.+740    	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
     db8:	83 36       	cpi	r24, 0x63	; 99
     dba:	31 f0       	breq	.+12     	; 0xdc8 <vfprintf+0x3f4>
     dbc:	83 37       	cpi	r24, 0x73	; 115
     dbe:	91 f0       	breq	.+36     	; 0xde4 <vfprintf+0x410>
     dc0:	83 35       	cpi	r24, 0x53	; 83
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <vfprintf+0x3f2>
     dc4:	5d c0       	rjmp	.+186    	; 0xe80 <vfprintf+0x4ac>
     dc6:	24 c0       	rjmp	.+72     	; 0xe10 <vfprintf+0x43c>
     dc8:	c5 01       	movw	r24, r10
     dca:	02 96       	adiw	r24, 0x02	; 2
     dcc:	9f 87       	std	Y+15, r25	; 0x0f
     dce:	8e 87       	std	Y+14, r24	; 0x0e
     dd0:	f5 01       	movw	r30, r10
     dd2:	80 81       	ld	r24, Z
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	6a 88       	ldd	r6, Y+18	; 0x12
     dd8:	7b 88       	ldd	r7, Y+19	; 0x13
     dda:	8c 88       	ldd	r8, Y+20	; 0x14
     ddc:	aa 24       	eor	r10, r10
     dde:	a3 94       	inc	r10
     de0:	b1 2c       	mov	r11, r1
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <vfprintf+0x438>
     de4:	c5 01       	movw	r24, r10
     de6:	03 96       	adiw	r24, 0x03	; 3
     de8:	9f 87       	std	Y+15, r25	; 0x0f
     dea:	8e 87       	std	Y+14, r24	; 0x0e
     dec:	f5 01       	movw	r30, r10
     dee:	60 80       	ld	r6, Z
     df0:	71 80       	ldd	r7, Z+1	; 0x01
     df2:	82 80       	ldd	r8, Z+2	; 0x02
     df4:	06 ff       	sbrs	r16, 6
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <vfprintf+0x42a>
     df8:	41 2f       	mov	r20, r17
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <vfprintf+0x42e>
     dfe:	4f ef       	ldi	r20, 0xFF	; 255
     e00:	5f ef       	ldi	r21, 0xFF	; 255
     e02:	88 2d       	mov	r24, r8
     e04:	b3 01       	movw	r22, r6
     e06:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <strnlen>
     e0a:	5c 01       	movw	r10, r24
     e0c:	0f 77       	andi	r16, 0x7F	; 127
     e0e:	15 c0       	rjmp	.+42     	; 0xe3a <vfprintf+0x466>
     e10:	c5 01       	movw	r24, r10
     e12:	03 96       	adiw	r24, 0x03	; 3
     e14:	9f 87       	std	Y+15, r25	; 0x0f
     e16:	8e 87       	std	Y+14, r24	; 0x0e
     e18:	f5 01       	movw	r30, r10
     e1a:	60 80       	ld	r6, Z
     e1c:	71 80       	ldd	r7, Z+1	; 0x01
     e1e:	82 80       	ldd	r8, Z+2	; 0x02
     e20:	06 ff       	sbrs	r16, 6
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <vfprintf+0x456>
     e24:	41 2f       	mov	r20, r17
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x45a>
     e2a:	4f ef       	ldi	r20, 0xFF	; 255
     e2c:	5f ef       	ldi	r21, 0xFF	; 255
     e2e:	88 2d       	mov	r24, r8
     e30:	b3 01       	movw	r22, r6
     e32:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <strnlen>
     e36:	5c 01       	movw	r10, r24
     e38:	00 68       	ori	r16, 0x80	; 128
     e3a:	03 fd       	sbrc	r16, 3
     e3c:	1d c0       	rjmp	.+58     	; 0xe78 <vfprintf+0x4a4>
     e3e:	8f 2d       	mov	r24, r15
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	a8 16       	cp	r10, r24
     e44:	b9 06       	cpc	r11, r25
     e46:	c0 f4       	brcc	.+48     	; 0xe78 <vfprintf+0x4a4>
     e48:	b6 01       	movw	r22, r12
     e4a:	80 e2       	ldi	r24, 0x20	; 32
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     e52:	fa 94       	dec	r15
     e54:	f4 cf       	rjmp	.-24     	; 0xe3e <vfprintf+0x46a>
     e56:	f3 01       	movw	r30, r6
     e58:	84 91       	lpm	r24, Z
     e5a:	87 fc       	sbrc	r8, 7
     e5c:	80 81       	ld	r24, Z
     e5e:	ff ef       	ldi	r31, 0xFF	; 255
     e60:	6f 1a       	sub	r6, r31
     e62:	7f 0a       	sbc	r7, r31
     e64:	8f 0a       	sbc	r8, r31
     e66:	b6 01       	movw	r22, r12
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     e6e:	f1 10       	cpse	r15, r1
     e70:	fa 94       	dec	r15
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	a2 1a       	sub	r10, r18
     e76:	b1 08       	sbc	r11, r1
     e78:	a1 14       	cp	r10, r1
     e7a:	b1 04       	cpc	r11, r1
     e7c:	61 f7       	brne	.-40     	; 0xe56 <vfprintf+0x482>
     e7e:	0e c1       	rjmp	.+540    	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
     e80:	84 36       	cpi	r24, 0x64	; 100
     e82:	11 f0       	breq	.+4      	; 0xe88 <vfprintf+0x4b4>
     e84:	89 36       	cpi	r24, 0x69	; 105
     e86:	79 f5       	brne	.+94     	; 0xee6 <vfprintf+0x512>
     e88:	c5 01       	movw	r24, r10
     e8a:	07 ff       	sbrs	r16, 7
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <vfprintf+0x4cc>
     e8e:	04 96       	adiw	r24, 0x04	; 4
     e90:	9f 87       	std	Y+15, r25	; 0x0f
     e92:	8e 87       	std	Y+14, r24	; 0x0e
     e94:	f5 01       	movw	r30, r10
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	0a c0       	rjmp	.+20     	; 0xeb4 <vfprintf+0x4e0>
     ea0:	02 96       	adiw	r24, 0x02	; 2
     ea2:	9f 87       	std	Y+15, r25	; 0x0f
     ea4:	8e 87       	std	Y+14, r24	; 0x0e
     ea6:	f5 01       	movw	r30, r10
     ea8:	60 81       	ld	r22, Z
     eaa:	71 81       	ldd	r23, Z+1	; 0x01
     eac:	07 2e       	mov	r0, r23
     eae:	00 0c       	add	r0, r0
     eb0:	88 0b       	sbc	r24, r24
     eb2:	99 0b       	sbc	r25, r25
     eb4:	0f 76       	andi	r16, 0x6F	; 111
     eb6:	e0 2e       	mov	r14, r16
     eb8:	97 ff       	sbrs	r25, 7
     eba:	0a c0       	rjmp	.+20     	; 0xed0 <vfprintf+0x4fc>
     ebc:	90 95       	com	r25
     ebe:	80 95       	com	r24
     ec0:	70 95       	com	r23
     ec2:	61 95       	neg	r22
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	f0 2f       	mov	r31, r16
     ecc:	f0 68       	ori	r31, 0x80	; 128
     ece:	ef 2e       	mov	r14, r31
     ed0:	2a e0       	ldi	r18, 0x0A	; 10
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	ae 01       	movw	r20, r28
     ed6:	4f 5f       	subi	r20, 0xFF	; 255
     ed8:	5f 4f       	sbci	r21, 0xFF	; 255
     eda:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__ultoa_invert>
     ede:	a8 2e       	mov	r10, r24
     ee0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee2:	a2 1a       	sub	r10, r18
     ee4:	4b c0       	rjmp	.+150    	; 0xf7c <vfprintf+0x5a8>
     ee6:	85 37       	cpi	r24, 0x75	; 117
     ee8:	29 f4       	brne	.+10     	; 0xef4 <vfprintf+0x520>
     eea:	0f 7e       	andi	r16, 0xEF	; 239
     eec:	e0 2e       	mov	r14, r16
     eee:	2a e0       	ldi	r18, 0x0A	; 10
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	25 c0       	rjmp	.+74     	; 0xf3e <vfprintf+0x56a>
     ef4:	90 2f       	mov	r25, r16
     ef6:	99 7f       	andi	r25, 0xF9	; 249
     ef8:	e9 2e       	mov	r14, r25
     efa:	8f 36       	cpi	r24, 0x6F	; 111
     efc:	c1 f0       	breq	.+48     	; 0xf2e <vfprintf+0x55a>
     efe:	18 f4       	brcc	.+6      	; 0xf06 <vfprintf+0x532>
     f00:	88 35       	cpi	r24, 0x58	; 88
     f02:	79 f0       	breq	.+30     	; 0xf22 <vfprintf+0x54e>
     f04:	d5 c0       	rjmp	.+426    	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
     f06:	80 37       	cpi	r24, 0x70	; 112
     f08:	19 f0       	breq	.+6      	; 0xf10 <vfprintf+0x53c>
     f0a:	88 37       	cpi	r24, 0x78	; 120
     f0c:	21 f0       	breq	.+8      	; 0xf16 <vfprintf+0x542>
     f0e:	d0 c0       	rjmp	.+416    	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
     f10:	a9 2f       	mov	r26, r25
     f12:	a0 61       	ori	r26, 0x10	; 16
     f14:	ea 2e       	mov	r14, r26
     f16:	e4 fe       	sbrs	r14, 4
     f18:	0d c0       	rjmp	.+26     	; 0xf34 <vfprintf+0x560>
     f1a:	ee 2d       	mov	r30, r14
     f1c:	e4 60       	ori	r30, 0x04	; 4
     f1e:	ee 2e       	mov	r14, r30
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <vfprintf+0x560>
     f22:	04 ff       	sbrs	r16, 4
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <vfprintf+0x566>
     f26:	f9 2f       	mov	r31, r25
     f28:	f6 60       	ori	r31, 0x06	; 6
     f2a:	ef 2e       	mov	r14, r31
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <vfprintf+0x566>
     f2e:	28 e0       	ldi	r18, 0x08	; 8
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <vfprintf+0x56a>
     f34:	20 e1       	ldi	r18, 0x10	; 16
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <vfprintf+0x56a>
     f3a:	20 e1       	ldi	r18, 0x10	; 16
     f3c:	32 e0       	ldi	r19, 0x02	; 2
     f3e:	c5 01       	movw	r24, r10
     f40:	e7 fe       	sbrs	r14, 7
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <vfprintf+0x582>
     f44:	04 96       	adiw	r24, 0x04	; 4
     f46:	9f 87       	std	Y+15, r25	; 0x0f
     f48:	8e 87       	std	Y+14, r24	; 0x0e
     f4a:	f5 01       	movw	r30, r10
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <vfprintf+0x592>
     f56:	02 96       	adiw	r24, 0x02	; 2
     f58:	9f 87       	std	Y+15, r25	; 0x0f
     f5a:	8e 87       	std	Y+14, r24	; 0x0e
     f5c:	f5 01       	movw	r30, r10
     f5e:	60 81       	ld	r22, Z
     f60:	71 81       	ldd	r23, Z+1	; 0x01
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	ae 01       	movw	r20, r28
     f68:	4f 5f       	subi	r20, 0xFF	; 255
     f6a:	5f 4f       	sbci	r21, 0xFF	; 255
     f6c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__ultoa_invert>
     f70:	a8 2e       	mov	r10, r24
     f72:	fc 85       	ldd	r31, Y+12	; 0x0c
     f74:	af 1a       	sub	r10, r31
     f76:	2e 2d       	mov	r18, r14
     f78:	2f 77       	andi	r18, 0x7F	; 127
     f7a:	e2 2e       	mov	r14, r18
     f7c:	e6 fe       	sbrs	r14, 6
     f7e:	0b c0       	rjmp	.+22     	; 0xf96 <vfprintf+0x5c2>
     f80:	0e 2d       	mov	r16, r14
     f82:	0e 7f       	andi	r16, 0xFE	; 254
     f84:	a1 16       	cp	r10, r17
     f86:	50 f4       	brcc	.+20     	; 0xf9c <vfprintf+0x5c8>
     f88:	e4 fe       	sbrs	r14, 4
     f8a:	0a c0       	rjmp	.+20     	; 0xfa0 <vfprintf+0x5cc>
     f8c:	e2 fc       	sbrc	r14, 2
     f8e:	08 c0       	rjmp	.+16     	; 0xfa0 <vfprintf+0x5cc>
     f90:	0e 2d       	mov	r16, r14
     f92:	0e 7e       	andi	r16, 0xEE	; 238
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <vfprintf+0x5cc>
     f96:	ba 2c       	mov	r11, r10
     f98:	0e 2d       	mov	r16, r14
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <vfprintf+0x5ce>
     f9c:	ba 2c       	mov	r11, r10
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <vfprintf+0x5ce>
     fa0:	b1 2e       	mov	r11, r17
     fa2:	04 ff       	sbrs	r16, 4
     fa4:	0d c0       	rjmp	.+26     	; 0xfc0 <vfprintf+0x5ec>
     fa6:	fe 01       	movw	r30, r28
     fa8:	ea 0d       	add	r30, r10
     faa:	f1 1d       	adc	r31, r1
     fac:	80 81       	ld	r24, Z
     fae:	80 33       	cpi	r24, 0x30	; 48
     fb0:	11 f4       	brne	.+4      	; 0xfb6 <vfprintf+0x5e2>
     fb2:	09 7e       	andi	r16, 0xE9	; 233
     fb4:	09 c0       	rjmp	.+18     	; 0xfc8 <vfprintf+0x5f4>
     fb6:	02 ff       	sbrs	r16, 2
     fb8:	06 c0       	rjmp	.+12     	; 0xfc6 <vfprintf+0x5f2>
     fba:	b3 94       	inc	r11
     fbc:	b3 94       	inc	r11
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <vfprintf+0x5f4>
     fc0:	80 2f       	mov	r24, r16
     fc2:	86 78       	andi	r24, 0x86	; 134
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <vfprintf+0x5f4>
     fc6:	b3 94       	inc	r11
     fc8:	03 fd       	sbrc	r16, 3
     fca:	11 c0       	rjmp	.+34     	; 0xfee <vfprintf+0x61a>
     fcc:	00 ff       	sbrs	r16, 0
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <vfprintf+0x608>
     fd0:	bf 14       	cp	r11, r15
     fd2:	88 f4       	brcc	.+34     	; 0xff6 <vfprintf+0x622>
     fd4:	fa 0c       	add	r15, r10
     fd6:	1f 2d       	mov	r17, r15
     fd8:	1b 19       	sub	r17, r11
     fda:	0e c0       	rjmp	.+28     	; 0xff8 <vfprintf+0x624>
     fdc:	bf 14       	cp	r11, r15
     fde:	60 f4       	brcc	.+24     	; 0xff8 <vfprintf+0x624>
     fe0:	b6 01       	movw	r22, r12
     fe2:	80 e2       	ldi	r24, 0x20	; 32
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
     fea:	b3 94       	inc	r11
     fec:	f7 cf       	rjmp	.-18     	; 0xfdc <vfprintf+0x608>
     fee:	bf 14       	cp	r11, r15
     ff0:	18 f4       	brcc	.+6      	; 0xff8 <vfprintf+0x624>
     ff2:	fb 18       	sub	r15, r11
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <vfprintf+0x626>
     ff6:	1a 2d       	mov	r17, r10
     ff8:	f1 2c       	mov	r15, r1
     ffa:	04 ff       	sbrs	r16, 4
     ffc:	10 c0       	rjmp	.+32     	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
     ffe:	b6 01       	movw	r22, r12
    1000:	80 e3       	ldi	r24, 0x30	; 48
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
    1008:	02 ff       	sbrs	r16, 2
    100a:	17 c0       	rjmp	.+46     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    100c:	01 fd       	sbrc	r16, 1
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <__DATA_REGION_LENGTH__+0x16>
    1010:	88 e7       	ldi	r24, 0x78	; 120
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 c0       	rjmp	.+4      	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
    1016:	88 e5       	ldi	r24, 0x58	; 88
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	b6 01       	movw	r22, r12
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
    101e:	80 2f       	mov	r24, r16
    1020:	86 78       	andi	r24, 0x86	; 134
    1022:	59 f0       	breq	.+22     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    1024:	01 ff       	sbrs	r16, 1
    1026:	02 c0       	rjmp	.+4      	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
    1028:	8b e2       	ldi	r24, 0x2B	; 43
    102a:	01 c0       	rjmp	.+2      	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
    102c:	80 e2       	ldi	r24, 0x20	; 32
    102e:	07 fd       	sbrc	r16, 7
    1030:	8d e2       	ldi	r24, 0x2D	; 45
    1032:	b6 01       	movw	r22, r12
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
    103a:	a1 16       	cp	r10, r17
    103c:	38 f4       	brcc	.+14     	; 0x104c <__DATA_REGION_LENGTH__+0x4c>
    103e:	b6 01       	movw	r22, r12
    1040:	80 e3       	ldi	r24, 0x30	; 48
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
    1048:	11 50       	subi	r17, 0x01	; 1
    104a:	f7 cf       	rjmp	.-18     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    104c:	aa 94       	dec	r10
    104e:	e1 e0       	ldi	r30, 0x01	; 1
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	ec 0f       	add	r30, r28
    1054:	fd 1f       	adc	r31, r29
    1056:	ea 0d       	add	r30, r10
    1058:	f1 1d       	adc	r31, r1
    105a:	80 81       	ld	r24, Z
    105c:	b6 01       	movw	r22, r12
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
    1064:	a1 10       	cpse	r10, r1
    1066:	f2 cf       	rjmp	.-28     	; 0x104c <__DATA_REGION_LENGTH__+0x4c>
    1068:	19 c0       	rjmp	.+50     	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    106a:	f4 e0       	ldi	r31, 0x04	; 4
    106c:	ff 15       	cp	r31, r15
    106e:	80 f5       	brcc	.+96     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	f8 1a       	sub	r15, r24
    1074:	73 fe       	sbrs	r7, 3
    1076:	23 c0       	rjmp	.+70     	; 0x10be <__DATA_REGION_LENGTH__+0xbe>
    1078:	01 11       	cpse	r16, r1
    107a:	2b c0       	rjmp	.+86     	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
    107c:	53 fe       	sbrs	r5, 3
    107e:	2f c0       	rjmp	.+94     	; 0x10de <__DATA_REGION_LENGTH__+0xde>
    1080:	50 ec       	ldi	r21, 0xC0	; 192
    1082:	85 2e       	mov	r8, r21
    1084:	59 e0       	ldi	r21, 0x09	; 9
    1086:	95 2e       	mov	r9, r21
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	a5 2e       	mov	r10, r21
    108c:	07 2d       	mov	r16, r7
    108e:	00 71       	andi	r16, 0x10	; 16
    1090:	f4 01       	movw	r30, r8
    1092:	84 91       	lpm	r24, Z
    1094:	a7 fc       	sbrc	r10, 7
    1096:	80 81       	ld	r24, Z
    1098:	81 11       	cpse	r24, r1
    109a:	28 c0       	rjmp	.+80     	; 0x10ec <__DATA_REGION_LENGTH__+0xec>
    109c:	ff 20       	and	r15, r15
    109e:	09 f4       	brne	.+2      	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
    10a0:	d2 cc       	rjmp	.-1628   	; 0xa46 <vfprintf+0x72>
    10a2:	b6 01       	movw	r22, r12
    10a4:	80 e2       	ldi	r24, 0x20	; 32
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
    10ac:	fa 94       	dec	r15
    10ae:	f6 cf       	rjmp	.-20     	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    10b0:	f6 01       	movw	r30, r12
    10b2:	87 81       	ldd	r24, Z+7	; 0x07
    10b4:	90 85       	ldd	r25, Z+8	; 0x08
    10b6:	2c c0       	rjmp	.+88     	; 0x1110 <__stack+0x11>
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	29 c0       	rjmp	.+82     	; 0x1110 <__stack+0x11>
    10be:	b6 01       	movw	r22, r12
    10c0:	80 e2       	ldi	r24, 0x20	; 32
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
    10c8:	fa 94       	dec	r15
    10ca:	f1 10       	cpse	r15, r1
    10cc:	f8 cf       	rjmp	.-16     	; 0x10be <__DATA_REGION_LENGTH__+0xbe>
    10ce:	d4 cf       	rjmp	.-88     	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    10d0:	f1 2c       	mov	r15, r1
    10d2:	b6 01       	movw	r22, r12
    10d4:	80 2f       	mov	r24, r16
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
    10dc:	cf cf       	rjmp	.-98     	; 0x107c <__DATA_REGION_LENGTH__+0x7c>
    10de:	4c eb       	ldi	r20, 0xBC	; 188
    10e0:	84 2e       	mov	r8, r20
    10e2:	49 e0       	ldi	r20, 0x09	; 9
    10e4:	94 2e       	mov	r9, r20
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	a4 2e       	mov	r10, r20
    10ea:	d0 cf       	rjmp	.-96     	; 0x108c <__DATA_REGION_LENGTH__+0x8c>
    10ec:	01 11       	cpse	r16, r1
    10ee:	80 52       	subi	r24, 0x20	; 32
    10f0:	b6 01       	movw	r22, r12
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 04 26 	call	0x4c08	; 0x4c08 <fputc>
    10f8:	ff ef       	ldi	r31, 0xFF	; 255
    10fa:	8f 1a       	sub	r8, r31
    10fc:	9f 0a       	sbc	r9, r31
    10fe:	af 0a       	sbc	r10, r31
    1100:	c7 cf       	rjmp	.-114    	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
    1102:	23 e0       	ldi	r18, 0x03	; 3
    1104:	2f 15       	cp	r18, r15
    1106:	10 f4       	brcc	.+4      	; 0x110c <__stack+0xd>
    1108:	83 e0       	ldi	r24, 0x03	; 3
    110a:	b3 cf       	rjmp	.-154    	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    110c:	f1 2c       	mov	r15, r1
    110e:	b6 cf       	rjmp	.-148    	; 0x107c <__DATA_REGION_LENGTH__+0x7c>
    1110:	64 96       	adiw	r28, 0x14	; 20
    1112:	e2 e1       	ldi	r30, 0x12	; 18
    1114:	0c 94 df 31 	jmp	0x63be	; 0x63be <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

000068c8 <__udivmodhi4>:
    68c8:	aa 1b       	sub	r26, r26
    68ca:	bb 1b       	sub	r27, r27
    68cc:	51 e1       	ldi	r21, 0x11	; 17
    68ce:	07 c0       	rjmp	.+14     	; 0x68de <__udivmodhi4_ep>

000068d0 <__udivmodhi4_loop>:
    68d0:	aa 1f       	adc	r26, r26
    68d2:	bb 1f       	adc	r27, r27
    68d4:	a6 17       	cp	r26, r22
    68d6:	b7 07       	cpc	r27, r23
    68d8:	10 f0       	brcs	.+4      	; 0x68de <__udivmodhi4_ep>
    68da:	a6 1b       	sub	r26, r22
    68dc:	b7 0b       	sbc	r27, r23

000068de <__udivmodhi4_ep>:
    68de:	88 1f       	adc	r24, r24
    68e0:	99 1f       	adc	r25, r25
    68e2:	5a 95       	dec	r21
    68e4:	a9 f7       	brne	.-22     	; 0x68d0 <__udivmodhi4_loop>
    68e6:	80 95       	com	r24
    68e8:	90 95       	com	r25
    68ea:	bc 01       	movw	r22, r24
    68ec:	cd 01       	movw	r24, r26
    68ee:	08 95       	ret

Disassembly of section .text.libgcc:

000070f8 <__tablejump2__>:
    70f8:	ee 0f       	add	r30, r30
    70fa:	ff 1f       	adc	r31, r31
    70fc:	05 90       	lpm	r0, Z+
    70fe:	f4 91       	lpm	r31, Z
    7100:	e0 2d       	mov	r30, r0
    7102:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00006b62 <__umulhisi3>:
    6b62:	a2 9f       	mul	r26, r18
    6b64:	b0 01       	movw	r22, r0
    6b66:	b3 9f       	mul	r27, r19
    6b68:	c0 01       	movw	r24, r0
    6b6a:	a3 9f       	mul	r26, r19
    6b6c:	70 0d       	add	r23, r0
    6b6e:	81 1d       	adc	r24, r1
    6b70:	11 24       	eor	r1, r1
    6b72:	91 1d       	adc	r25, r1
    6b74:	b2 9f       	mul	r27, r18
    6b76:	70 0d       	add	r23, r0
    6b78:	81 1d       	adc	r24, r1
    6b7a:	11 24       	eor	r1, r1
    6b7c:	91 1d       	adc	r25, r1
    6b7e:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000062e4 <__prologue_saves__>:
    62e4:	2f 92       	push	r2
    62e6:	3f 92       	push	r3
    62e8:	4f 92       	push	r4
    62ea:	5f 92       	push	r5
    62ec:	6f 92       	push	r6
    62ee:	7f 92       	push	r7
    62f0:	8f 92       	push	r8
    62f2:	9f 92       	push	r9
    62f4:	af 92       	push	r10
    62f6:	bf 92       	push	r11
    62f8:	cf 92       	push	r12
    62fa:	df 92       	push	r13
    62fc:	ef 92       	push	r14
    62fe:	ff 92       	push	r15
    6300:	0f 93       	push	r16
    6302:	1f 93       	push	r17
    6304:	cf 93       	push	r28
    6306:	df 93       	push	r29
    6308:	cd b7       	in	r28, 0x3d	; 61
    630a:	de b7       	in	r29, 0x3e	; 62
    630c:	ca 1b       	sub	r28, r26
    630e:	db 0b       	sbc	r29, r27
    6310:	0f b6       	in	r0, 0x3f	; 63
    6312:	f8 94       	cli
    6314:	de bf       	out	0x3e, r29	; 62
    6316:	0f be       	out	0x3f, r0	; 63
    6318:	cd bf       	out	0x3d, r28	; 61
    631a:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000063be <__epilogue_restores__>:
    63be:	2a 88       	ldd	r2, Y+18	; 0x12
    63c0:	39 88       	ldd	r3, Y+17	; 0x11
    63c2:	48 88       	ldd	r4, Y+16	; 0x10
    63c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    63c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    63c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    63ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    63cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    63ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    63d0:	b9 84       	ldd	r11, Y+9	; 0x09
    63d2:	c8 84       	ldd	r12, Y+8	; 0x08
    63d4:	df 80       	ldd	r13, Y+7	; 0x07
    63d6:	ee 80       	ldd	r14, Y+6	; 0x06
    63d8:	fd 80       	ldd	r15, Y+5	; 0x05
    63da:	0c 81       	ldd	r16, Y+4	; 0x04
    63dc:	1b 81       	ldd	r17, Y+3	; 0x03
    63de:	aa 81       	ldd	r26, Y+2	; 0x02
    63e0:	b9 81       	ldd	r27, Y+1	; 0x01
    63e2:	ce 0f       	add	r28, r30
    63e4:	d1 1d       	adc	r29, r1
    63e6:	0f b6       	in	r0, 0x3f	; 63
    63e8:	f8 94       	cli
    63ea:	de bf       	out	0x3e, r29	; 62
    63ec:	0f be       	out	0x3f, r0	; 63
    63ee:	cd bf       	out	0x3d, r28	; 61
    63f0:	ed 01       	movw	r28, r26
    63f2:	08 95       	ret

Disassembly of section .text.avrlibc:

000071f0 <atoi>:
    71f0:	0e 94 0d 38 	call	0x701a	; 0x701a <atol>
    71f4:	cb 01       	movw	r24, r22
    71f6:	08 95       	ret

Disassembly of section .text.avrlibc:

0000701a <atol>:
    701a:	2a e0       	ldi	r18, 0x0A	; 10
    701c:	30 e0       	ldi	r19, 0x00	; 0
    701e:	40 e0       	ldi	r20, 0x00	; 0
    7020:	50 e0       	ldi	r21, 0x00	; 0
    7022:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <strtol>
    7026:	08 95       	ret

Disassembly of section .text.avrlibc:

000014a0 <strtol>:
    14a0:	2f 92       	push	r2
    14a2:	3f 92       	push	r3
    14a4:	4f 92       	push	r4
    14a6:	5f 92       	push	r5
    14a8:	6f 92       	push	r6
    14aa:	7f 92       	push	r7
    14ac:	8f 92       	push	r8
    14ae:	af 92       	push	r10
    14b0:	bf 92       	push	r11
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <strtol+0x22>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <strtol+0x24>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <strtol+0x26>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	3b 01       	movw	r6, r22
    14cc:	88 2e       	mov	r8, r24
    14ce:	5a 01       	movw	r10, r20
    14d0:	19 01       	movw	r2, r18
    14d2:	41 15       	cp	r20, r1
    14d4:	51 05       	cpc	r21, r1
    14d6:	21 f0       	breq	.+8      	; 0x14e0 <strtol+0x40>
    14d8:	fa 01       	movw	r30, r20
    14da:	60 83       	st	Z, r22
    14dc:	71 83       	std	Z+1, r23	; 0x01
    14de:	82 83       	std	Z+2, r24	; 0x02
    14e0:	21 14       	cp	r2, r1
    14e2:	31 04       	cpc	r3, r1
    14e4:	29 f0       	breq	.+10     	; 0x14f0 <strtol+0x50>
    14e6:	c1 01       	movw	r24, r2
    14e8:	02 97       	sbiw	r24, 0x02	; 2
    14ea:	83 97       	sbiw	r24, 0x23	; 35
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <strtol+0x50>
    14ee:	1a c1       	rjmp	.+564    	; 0x1724 <strtol+0x284>
    14f0:	e8 2c       	mov	r14, r8
    14f2:	63 01       	movw	r12, r6
    14f4:	ff ef       	ldi	r31, 0xFF	; 255
    14f6:	cf 1a       	sub	r12, r31
    14f8:	df 0a       	sbc	r13, r31
    14fa:	ef 0a       	sbc	r14, r31
    14fc:	f3 01       	movw	r30, r6
    14fe:	14 91       	lpm	r17, Z
    1500:	87 fc       	sbrc	r8, 7
    1502:	10 81       	ld	r17, Z
    1504:	81 2f       	mov	r24, r17
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <isspace>
    150c:	4c 2d       	mov	r20, r12
    150e:	3d 2d       	mov	r19, r13
    1510:	2e 2d       	mov	r18, r14
    1512:	89 2b       	or	r24, r25
    1514:	19 f0       	breq	.+6      	; 0x151c <strtol+0x7c>
    1516:	36 01       	movw	r6, r12
    1518:	8e 2c       	mov	r8, r14
    151a:	ea cf       	rjmp	.-44     	; 0x14f0 <strtol+0x50>
    151c:	1d 32       	cpi	r17, 0x2D	; 45
    151e:	69 f4       	brne	.+26     	; 0x153a <strtol+0x9a>
    1520:	e8 2c       	mov	r14, r8
    1522:	63 01       	movw	r12, r6
    1524:	52 e0       	ldi	r21, 0x02	; 2
    1526:	c5 0e       	add	r12, r21
    1528:	d1 1c       	adc	r13, r1
    152a:	e1 1c       	adc	r14, r1
    152c:	e4 2f       	mov	r30, r20
    152e:	f3 2f       	mov	r31, r19
    1530:	14 91       	lpm	r17, Z
    1532:	27 fd       	sbrc	r18, 7
    1534:	10 81       	ld	r17, Z
    1536:	01 e0       	ldi	r16, 0x01	; 1
    1538:	0e c0       	rjmp	.+28     	; 0x1556 <strtol+0xb6>
    153a:	1b 32       	cpi	r17, 0x2B	; 43
    153c:	59 f4       	brne	.+22     	; 0x1554 <strtol+0xb4>
    153e:	e8 2c       	mov	r14, r8
    1540:	63 01       	movw	r12, r6
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	c8 0e       	add	r12, r24
    1546:	d1 1c       	adc	r13, r1
    1548:	e1 1c       	adc	r14, r1
    154a:	e4 2f       	mov	r30, r20
    154c:	f3 2f       	mov	r31, r19
    154e:	14 91       	lpm	r17, Z
    1550:	27 fd       	sbrc	r18, 7
    1552:	10 81       	ld	r17, Z
    1554:	00 e0       	ldi	r16, 0x00	; 0
    1556:	21 14       	cp	r2, r1
    1558:	31 04       	cpc	r3, r1
    155a:	09 f1       	breq	.+66     	; 0x159e <strtol+0xfe>
    155c:	90 e1       	ldi	r25, 0x10	; 16
    155e:	29 16       	cp	r2, r25
    1560:	31 04       	cpc	r3, r1
    1562:	29 f4       	brne	.+10     	; 0x156e <strtol+0xce>
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <strtol+0x144>
    1566:	10 e3       	ldi	r17, 0x30	; 48
    1568:	21 14       	cp	r2, r1
    156a:	31 04       	cpc	r3, r1
    156c:	21 f1       	breq	.+72     	; 0x15b6 <strtol+0x116>
    156e:	f8 e0       	ldi	r31, 0x08	; 8
    1570:	2f 16       	cp	r2, r31
    1572:	31 04       	cpc	r3, r1
    1574:	01 f1       	breq	.+64     	; 0x15b6 <strtol+0x116>
    1576:	54 f4       	brge	.+20     	; 0x158c <strtol+0xec>
    1578:	32 e0       	ldi	r19, 0x02	; 2
    157a:	23 16       	cp	r2, r19
    157c:	31 04       	cpc	r3, r1
    157e:	21 f5       	brne	.+72     	; 0x15c8 <strtol+0x128>
    1580:	41 2c       	mov	r4, r1
    1582:	51 2c       	mov	r5, r1
    1584:	61 2c       	mov	r6, r1
    1586:	50 e4       	ldi	r21, 0x40	; 64
    1588:	75 2e       	mov	r7, r21
    158a:	4b c0       	rjmp	.+150    	; 0x1622 <strtol+0x182>
    158c:	4a e0       	ldi	r20, 0x0A	; 10
    158e:	24 16       	cp	r2, r20
    1590:	31 04       	cpc	r3, r1
    1592:	39 f0       	breq	.+14     	; 0x15a2 <strtol+0x102>
    1594:	50 e1       	ldi	r21, 0x10	; 16
    1596:	25 16       	cp	r2, r21
    1598:	31 04       	cpc	r3, r1
    159a:	b1 f4       	brne	.+44     	; 0x15c8 <strtol+0x128>
    159c:	3d c0       	rjmp	.+122    	; 0x1618 <strtol+0x178>
    159e:	10 33       	cpi	r17, 0x30	; 48
    15a0:	19 f1       	breq	.+70     	; 0x15e8 <strtol+0x148>
    15a2:	3a e0       	ldi	r19, 0x0A	; 10
    15a4:	23 2e       	mov	r2, r19
    15a6:	31 2c       	mov	r3, r1
    15a8:	4c ec       	ldi	r20, 0xCC	; 204
    15aa:	44 2e       	mov	r4, r20
    15ac:	54 2c       	mov	r5, r4
    15ae:	64 2c       	mov	r6, r4
    15b0:	4c e0       	ldi	r20, 0x0C	; 12
    15b2:	74 2e       	mov	r7, r20
    15b4:	36 c0       	rjmp	.+108    	; 0x1622 <strtol+0x182>
    15b6:	98 e0       	ldi	r25, 0x08	; 8
    15b8:	29 2e       	mov	r2, r25
    15ba:	31 2c       	mov	r3, r1
    15bc:	41 2c       	mov	r4, r1
    15be:	51 2c       	mov	r5, r1
    15c0:	61 2c       	mov	r6, r1
    15c2:	20 e1       	ldi	r18, 0x10	; 16
    15c4:	72 2e       	mov	r7, r18
    15c6:	2d c0       	rjmp	.+90     	; 0x1622 <strtol+0x182>
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e8       	ldi	r25, 0x80	; 128
    15d0:	91 01       	movw	r18, r2
    15d2:	03 2c       	mov	r0, r3
    15d4:	00 0c       	add	r0, r0
    15d6:	44 0b       	sbc	r20, r20
    15d8:	55 0b       	sbc	r21, r21
    15da:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <__udivmodsi4>
    15de:	29 01       	movw	r4, r18
    15e0:	3a 01       	movw	r6, r20
    15e2:	1f c0       	rjmp	.+62     	; 0x1622 <strtol+0x182>
    15e4:	10 33       	cpi	r17, 0x30	; 48
    15e6:	c1 f4       	brne	.+48     	; 0x1618 <strtol+0x178>
    15e8:	f6 01       	movw	r30, r12
    15ea:	84 91       	lpm	r24, Z
    15ec:	e7 fc       	sbrc	r14, 7
    15ee:	80 81       	ld	r24, Z
    15f0:	8f 7d       	andi	r24, 0xDF	; 223
    15f2:	88 35       	cpi	r24, 0x58	; 88
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <strtol+0x158>
    15f6:	b7 cf       	rjmp	.-146    	; 0x1566 <strtol+0xc6>
    15f8:	ae 2d       	mov	r26, r14
    15fa:	c6 01       	movw	r24, r12
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	a1 1d       	adc	r26, r1
    1600:	fc 01       	movw	r30, r24
    1602:	14 91       	lpm	r17, Z
    1604:	a7 fd       	sbrc	r26, 7
    1606:	10 81       	ld	r17, Z
    1608:	e2 e0       	ldi	r30, 0x02	; 2
    160a:	ce 0e       	add	r12, r30
    160c:	d1 1c       	adc	r13, r1
    160e:	e1 1c       	adc	r14, r1
    1610:	02 60       	ori	r16, 0x02	; 2
    1612:	60 e1       	ldi	r22, 0x10	; 16
    1614:	26 2e       	mov	r2, r22
    1616:	31 2c       	mov	r3, r1
    1618:	41 2c       	mov	r4, r1
    161a:	51 2c       	mov	r5, r1
    161c:	61 2c       	mov	r6, r1
    161e:	88 e0       	ldi	r24, 0x08	; 8
    1620:	78 2e       	mov	r7, r24
    1622:	a0 e0       	ldi	r26, 0x00	; 0
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	cb 01       	movw	r24, r22
    162a:	91 01       	movw	r18, r2
    162c:	03 2c       	mov	r0, r3
    162e:	00 0c       	add	r0, r0
    1630:	44 0b       	sbc	r20, r20
    1632:	55 0b       	sbc	r21, r21
    1634:	29 83       	std	Y+1, r18	; 0x01
    1636:	3a 83       	std	Y+2, r19	; 0x02
    1638:	4b 83       	std	Y+3, r20	; 0x03
    163a:	5c 83       	std	Y+4, r21	; 0x04
    163c:	e0 ed       	ldi	r30, 0xD0	; 208
    163e:	e1 0f       	add	r30, r17
    1640:	ea 30       	cpi	r30, 0x0A	; 10
    1642:	60 f0       	brcs	.+24     	; 0x165c <strtol+0x1bc>
    1644:	2f eb       	ldi	r18, 0xBF	; 191
    1646:	21 0f       	add	r18, r17
    1648:	2a 31       	cpi	r18, 0x1A	; 26
    164a:	10 f4       	brcc	.+4      	; 0x1650 <strtol+0x1b0>
    164c:	e9 ec       	ldi	r30, 0xC9	; 201
    164e:	05 c0       	rjmp	.+10     	; 0x165a <strtol+0x1ba>
    1650:	2f e9       	ldi	r18, 0x9F	; 159
    1652:	21 0f       	add	r18, r17
    1654:	2a 31       	cpi	r18, 0x1A	; 26
    1656:	50 f5       	brcc	.+84     	; 0x16ac <strtol+0x20c>
    1658:	e9 ea       	ldi	r30, 0xA9	; 169
    165a:	e1 0f       	add	r30, r17
    165c:	2e 2f       	mov	r18, r30
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	22 15       	cp	r18, r2
    1662:	33 05       	cpc	r19, r3
    1664:	1c f5       	brge	.+70     	; 0x16ac <strtol+0x20c>
    1666:	a7 fd       	sbrc	r26, 7
    1668:	18 c0       	rjmp	.+48     	; 0x169a <strtol+0x1fa>
    166a:	46 16       	cp	r4, r22
    166c:	57 06       	cpc	r5, r23
    166e:	68 06       	cpc	r6, r24
    1670:	79 06       	cpc	r7, r25
    1672:	80 f0       	brcs	.+32     	; 0x1694 <strtol+0x1f4>
    1674:	29 81       	ldd	r18, Y+1	; 0x01
    1676:	3a 81       	ldd	r19, Y+2	; 0x02
    1678:	4b 81       	ldd	r20, Y+3	; 0x03
    167a:	5c 81       	ldd	r21, Y+4	; 0x04
    167c:	0e 94 56 35 	call	0x6aac	; 0x6aac <__mulsi3>
    1680:	6e 0f       	add	r22, r30
    1682:	71 1d       	adc	r23, r1
    1684:	81 1d       	adc	r24, r1
    1686:	91 1d       	adc	r25, r1
    1688:	61 30       	cpi	r22, 0x01	; 1
    168a:	71 05       	cpc	r23, r1
    168c:	81 05       	cpc	r24, r1
    168e:	30 e8       	ldi	r19, 0x80	; 128
    1690:	93 07       	cpc	r25, r19
    1692:	10 f0       	brcs	.+4      	; 0x1698 <strtol+0x1f8>
    1694:	af ef       	ldi	r26, 0xFF	; 255
    1696:	01 c0       	rjmp	.+2      	; 0x169a <strtol+0x1fa>
    1698:	a1 e0       	ldi	r26, 0x01	; 1
    169a:	f6 01       	movw	r30, r12
    169c:	14 91       	lpm	r17, Z
    169e:	e7 fc       	sbrc	r14, 7
    16a0:	10 81       	ld	r17, Z
    16a2:	4f ef       	ldi	r20, 0xFF	; 255
    16a4:	c4 1a       	sub	r12, r20
    16a6:	d4 0a       	sbc	r13, r20
    16a8:	e4 0a       	sbc	r14, r20
    16aa:	c8 cf       	rjmp	.-112    	; 0x163c <strtol+0x19c>
    16ac:	20 2f       	mov	r18, r16
    16ae:	21 70       	andi	r18, 0x01	; 1
    16b0:	a1 14       	cp	r10, r1
    16b2:	b1 04       	cpc	r11, r1
    16b4:	b1 f0       	breq	.+44     	; 0x16e2 <strtol+0x242>
    16b6:	aa 23       	and	r26, r26
    16b8:	49 f0       	breq	.+18     	; 0x16cc <strtol+0x22c>
    16ba:	51 e0       	ldi	r21, 0x01	; 1
    16bc:	c5 1a       	sub	r12, r21
    16be:	d1 08       	sbc	r13, r1
    16c0:	e1 08       	sbc	r14, r1
    16c2:	f5 01       	movw	r30, r10
    16c4:	c0 82       	st	Z, r12
    16c6:	d1 82       	std	Z+1, r13	; 0x01
    16c8:	e2 82       	std	Z+2, r14	; 0x02
    16ca:	0b c0       	rjmp	.+22     	; 0x16e2 <strtol+0x242>
    16cc:	01 ff       	sbrs	r16, 1
    16ce:	1d c0       	rjmp	.+58     	; 0x170a <strtol+0x26a>
    16d0:	f2 e0       	ldi	r31, 0x02	; 2
    16d2:	cf 1a       	sub	r12, r31
    16d4:	d1 08       	sbc	r13, r1
    16d6:	e1 08       	sbc	r14, r1
    16d8:	f5 01       	movw	r30, r10
    16da:	c0 82       	st	Z, r12
    16dc:	d1 82       	std	Z+1, r13	; 0x01
    16de:	e2 82       	std	Z+2, r14	; 0x02
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <strtol+0x26a>
    16e2:	a7 ff       	sbrs	r26, 7
    16e4:	12 c0       	rjmp	.+36     	; 0x170a <strtol+0x26a>
    16e6:	22 23       	and	r18, r18
    16e8:	29 f0       	breq	.+10     	; 0x16f4 <strtol+0x254>
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e8       	ldi	r25, 0x80	; 128
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <strtol+0x25c>
    16f4:	6f ef       	ldi	r22, 0xFF	; 255
    16f6:	7f ef       	ldi	r23, 0xFF	; 255
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	9f e7       	ldi	r25, 0x7F	; 127
    16fc:	22 e2       	ldi	r18, 0x22	; 34
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	30 93 d7 07 	sts	0x07D7, r19	; 0x8007d7 <errno+0x1>
    1704:	20 93 d6 07 	sts	0x07D6, r18	; 0x8007d6 <errno>
    1708:	09 c0       	rjmp	.+18     	; 0x171c <strtol+0x27c>
    170a:	22 23       	and	r18, r18
    170c:	81 f0       	breq	.+32     	; 0x172e <strtol+0x28e>
    170e:	90 95       	com	r25
    1710:	80 95       	com	r24
    1712:	70 95       	com	r23
    1714:	61 95       	neg	r22
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	8f 4f       	sbci	r24, 0xFF	; 255
    171a:	9f 4f       	sbci	r25, 0xFF	; 255
    171c:	46 2f       	mov	r20, r22
    171e:	37 2f       	mov	r19, r23
    1720:	28 2f       	mov	r18, r24
    1722:	12 c0       	rjmp	.+36     	; 0x1748 <strtol+0x2a8>
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0d c0       	rjmp	.+26     	; 0x1748 <strtol+0x2a8>
    172e:	97 ff       	sbrs	r25, 7
    1730:	f5 cf       	rjmp	.-22     	; 0x171c <strtol+0x27c>
    1732:	82 e2       	ldi	r24, 0x22	; 34
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <errno+0x1>
    173a:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <errno>
    173e:	6f ef       	ldi	r22, 0xFF	; 255
    1740:	7f ef       	ldi	r23, 0xFF	; 255
    1742:	8f ef       	ldi	r24, 0xFF	; 255
    1744:	9f e7       	ldi	r25, 0x7F	; 127
    1746:	ea cf       	rjmp	.-44     	; 0x171c <strtol+0x27c>
    1748:	64 2f       	mov	r22, r20
    174a:	73 2f       	mov	r23, r19
    174c:	82 2f       	mov	r24, r18
    174e:	26 96       	adiw	r28, 0x06	; 6
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ef 90       	pop	r14
    1764:	df 90       	pop	r13
    1766:	cf 90       	pop	r12
    1768:	bf 90       	pop	r11
    176a:	af 90       	pop	r10
    176c:	8f 90       	pop	r8
    176e:	7f 90       	pop	r7
    1770:	6f 90       	pop	r6
    1772:	5f 90       	pop	r5
    1774:	4f 90       	pop	r4
    1776:	3f 90       	pop	r3
    1778:	2f 90       	pop	r2
    177a:	08 95       	ret

Disassembly of section .text.avrlibc:

00001ede <__ftoa_engine>:
    1ede:	28 30       	cpi	r18, 0x08	; 8
    1ee0:	08 f0       	brcs	.+2      	; 0x1ee4 <__ftoa_engine+0x6>
    1ee2:	27 e0       	ldi	r18, 0x07	; 7
    1ee4:	33 27       	eor	r19, r19
    1ee6:	da 01       	movw	r26, r20
    1ee8:	99 0f       	add	r25, r25
    1eea:	31 1d       	adc	r19, r1
    1eec:	87 fd       	sbrc	r24, 7
    1eee:	91 60       	ori	r25, 0x01	; 1
    1ef0:	00 96       	adiw	r24, 0x00	; 0
    1ef2:	61 05       	cpc	r22, r1
    1ef4:	71 05       	cpc	r23, r1
    1ef6:	39 f4       	brne	.+14     	; 0x1f06 <__ftoa_engine+0x28>
    1ef8:	32 60       	ori	r19, 0x02	; 2
    1efa:	2e 5f       	subi	r18, 0xFE	; 254
    1efc:	3d 93       	st	X+, r19
    1efe:	30 e3       	ldi	r19, 0x30	; 48
    1f00:	2a 95       	dec	r18
    1f02:	e1 f7       	brne	.-8      	; 0x1efc <__ftoa_engine+0x1e>
    1f04:	08 95       	ret
    1f06:	9f 3f       	cpi	r25, 0xFF	; 255
    1f08:	30 f0       	brcs	.+12     	; 0x1f16 <__ftoa_engine+0x38>
    1f0a:	80 38       	cpi	r24, 0x80	; 128
    1f0c:	71 05       	cpc	r23, r1
    1f0e:	61 05       	cpc	r22, r1
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <__ftoa_engine+0x36>
    1f12:	3c 5f       	subi	r19, 0xFC	; 252
    1f14:	3c 5f       	subi	r19, 0xFC	; 252
    1f16:	3d 93       	st	X+, r19
    1f18:	91 30       	cpi	r25, 0x01	; 1
    1f1a:	08 f0       	brcs	.+2      	; 0x1f1e <__ftoa_engine+0x40>
    1f1c:	80 68       	ori	r24, 0x80	; 128
    1f1e:	91 1d       	adc	r25, r1
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	1f 93       	push	r17
    1f26:	0f 93       	push	r16
    1f28:	ff 92       	push	r15
    1f2a:	ef 92       	push	r14
    1f2c:	19 2f       	mov	r17, r25
    1f2e:	98 7f       	andi	r25, 0xF8	; 248
    1f30:	96 95       	lsr	r25
    1f32:	e9 2f       	mov	r30, r25
    1f34:	96 95       	lsr	r25
    1f36:	96 95       	lsr	r25
    1f38:	e9 0f       	add	r30, r25
    1f3a:	ff 27       	eor	r31, r31
    1f3c:	e0 59       	subi	r30, 0x90	; 144
    1f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f40:	99 27       	eor	r25, r25
    1f42:	33 27       	eor	r19, r19
    1f44:	ee 24       	eor	r14, r14
    1f46:	ff 24       	eor	r15, r15
    1f48:	a7 01       	movw	r20, r14
    1f4a:	e7 01       	movw	r28, r14
    1f4c:	05 90       	lpm	r0, Z+
    1f4e:	08 94       	sec
    1f50:	07 94       	ror	r0
    1f52:	28 f4       	brcc	.+10     	; 0x1f5e <__ftoa_engine+0x80>
    1f54:	36 0f       	add	r19, r22
    1f56:	e7 1e       	adc	r14, r23
    1f58:	f8 1e       	adc	r15, r24
    1f5a:	49 1f       	adc	r20, r25
    1f5c:	51 1d       	adc	r21, r1
    1f5e:	66 0f       	add	r22, r22
    1f60:	77 1f       	adc	r23, r23
    1f62:	88 1f       	adc	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	06 94       	lsr	r0
    1f68:	a1 f7       	brne	.-24     	; 0x1f52 <__ftoa_engine+0x74>
    1f6a:	05 90       	lpm	r0, Z+
    1f6c:	07 94       	ror	r0
    1f6e:	28 f4       	brcc	.+10     	; 0x1f7a <__ftoa_engine+0x9c>
    1f70:	e7 0e       	add	r14, r23
    1f72:	f8 1e       	adc	r15, r24
    1f74:	49 1f       	adc	r20, r25
    1f76:	56 1f       	adc	r21, r22
    1f78:	c1 1d       	adc	r28, r1
    1f7a:	77 0f       	add	r23, r23
    1f7c:	88 1f       	adc	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	66 1f       	adc	r22, r22
    1f82:	06 94       	lsr	r0
    1f84:	a1 f7       	brne	.-24     	; 0x1f6e <__ftoa_engine+0x90>
    1f86:	05 90       	lpm	r0, Z+
    1f88:	07 94       	ror	r0
    1f8a:	28 f4       	brcc	.+10     	; 0x1f96 <__ftoa_engine+0xb8>
    1f8c:	f8 0e       	add	r15, r24
    1f8e:	49 1f       	adc	r20, r25
    1f90:	56 1f       	adc	r21, r22
    1f92:	c7 1f       	adc	r28, r23
    1f94:	d1 1d       	adc	r29, r1
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	66 1f       	adc	r22, r22
    1f9c:	77 1f       	adc	r23, r23
    1f9e:	06 94       	lsr	r0
    1fa0:	a1 f7       	brne	.-24     	; 0x1f8a <__ftoa_engine+0xac>
    1fa2:	05 90       	lpm	r0, Z+
    1fa4:	07 94       	ror	r0
    1fa6:	20 f4       	brcc	.+8      	; 0x1fb0 <__ftoa_engine+0xd2>
    1fa8:	49 0f       	add	r20, r25
    1faa:	56 1f       	adc	r21, r22
    1fac:	c7 1f       	adc	r28, r23
    1fae:	d8 1f       	adc	r29, r24
    1fb0:	99 0f       	add	r25, r25
    1fb2:	66 1f       	adc	r22, r22
    1fb4:	77 1f       	adc	r23, r23
    1fb6:	88 1f       	adc	r24, r24
    1fb8:	06 94       	lsr	r0
    1fba:	a9 f7       	brne	.-22     	; 0x1fa6 <__ftoa_engine+0xc8>
    1fbc:	84 91       	lpm	r24, Z
    1fbe:	10 95       	com	r17
    1fc0:	17 70       	andi	r17, 0x07	; 7
    1fc2:	41 f0       	breq	.+16     	; 0x1fd4 <__ftoa_engine+0xf6>
    1fc4:	d6 95       	lsr	r29
    1fc6:	c7 95       	ror	r28
    1fc8:	57 95       	ror	r21
    1fca:	47 95       	ror	r20
    1fcc:	f7 94       	ror	r15
    1fce:	e7 94       	ror	r14
    1fd0:	1a 95       	dec	r17
    1fd2:	c1 f7       	brne	.-16     	; 0x1fc4 <__ftoa_engine+0xe6>
    1fd4:	e6 e1       	ldi	r30, 0x16	; 22
    1fd6:	f1 e0       	ldi	r31, 0x01	; 1
    1fd8:	68 94       	set
    1fda:	15 90       	lpm	r1, Z+
    1fdc:	15 91       	lpm	r17, Z+
    1fde:	35 91       	lpm	r19, Z+
    1fe0:	65 91       	lpm	r22, Z+
    1fe2:	95 91       	lpm	r25, Z+
    1fe4:	05 90       	lpm	r0, Z+
    1fe6:	7f e2       	ldi	r23, 0x2F	; 47
    1fe8:	73 95       	inc	r23
    1fea:	e1 18       	sub	r14, r1
    1fec:	f1 0a       	sbc	r15, r17
    1fee:	43 0b       	sbc	r20, r19
    1ff0:	56 0b       	sbc	r21, r22
    1ff2:	c9 0b       	sbc	r28, r25
    1ff4:	d0 09       	sbc	r29, r0
    1ff6:	c0 f7       	brcc	.-16     	; 0x1fe8 <__ftoa_engine+0x10a>
    1ff8:	e1 0c       	add	r14, r1
    1ffa:	f1 1e       	adc	r15, r17
    1ffc:	43 1f       	adc	r20, r19
    1ffe:	56 1f       	adc	r21, r22
    2000:	c9 1f       	adc	r28, r25
    2002:	d0 1d       	adc	r29, r0
    2004:	7e f4       	brtc	.+30     	; 0x2024 <__ftoa_engine+0x146>
    2006:	70 33       	cpi	r23, 0x30	; 48
    2008:	11 f4       	brne	.+4      	; 0x200e <__ftoa_engine+0x130>
    200a:	8a 95       	dec	r24
    200c:	e6 cf       	rjmp	.-52     	; 0x1fda <__ftoa_engine+0xfc>
    200e:	e8 94       	clt
    2010:	01 50       	subi	r16, 0x01	; 1
    2012:	30 f0       	brcs	.+12     	; 0x2020 <__ftoa_engine+0x142>
    2014:	08 0f       	add	r16, r24
    2016:	0a f4       	brpl	.+2      	; 0x201a <__ftoa_engine+0x13c>
    2018:	00 27       	eor	r16, r16
    201a:	02 17       	cp	r16, r18
    201c:	08 f4       	brcc	.+2      	; 0x2020 <__ftoa_engine+0x142>
    201e:	20 2f       	mov	r18, r16
    2020:	23 95       	inc	r18
    2022:	02 2f       	mov	r16, r18
    2024:	7a 33       	cpi	r23, 0x3A	; 58
    2026:	28 f0       	brcs	.+10     	; 0x2032 <__ftoa_engine+0x154>
    2028:	79 e3       	ldi	r23, 0x39	; 57
    202a:	7d 93       	st	X+, r23
    202c:	2a 95       	dec	r18
    202e:	e9 f7       	brne	.-6      	; 0x202a <__ftoa_engine+0x14c>
    2030:	10 c0       	rjmp	.+32     	; 0x2052 <__ftoa_engine+0x174>
    2032:	7d 93       	st	X+, r23
    2034:	2a 95       	dec	r18
    2036:	89 f6       	brne	.-94     	; 0x1fda <__ftoa_engine+0xfc>
    2038:	06 94       	lsr	r0
    203a:	97 95       	ror	r25
    203c:	67 95       	ror	r22
    203e:	37 95       	ror	r19
    2040:	17 95       	ror	r17
    2042:	17 94       	ror	r1
    2044:	e1 18       	sub	r14, r1
    2046:	f1 0a       	sbc	r15, r17
    2048:	43 0b       	sbc	r20, r19
    204a:	56 0b       	sbc	r21, r22
    204c:	c9 0b       	sbc	r28, r25
    204e:	d0 09       	sbc	r29, r0
    2050:	98 f0       	brcs	.+38     	; 0x2078 <__ftoa_engine+0x19a>
    2052:	23 95       	inc	r18
    2054:	7e 91       	ld	r23, -X
    2056:	73 95       	inc	r23
    2058:	7a 33       	cpi	r23, 0x3A	; 58
    205a:	08 f0       	brcs	.+2      	; 0x205e <__ftoa_engine+0x180>
    205c:	70 e3       	ldi	r23, 0x30	; 48
    205e:	7c 93       	st	X, r23
    2060:	20 13       	cpse	r18, r16
    2062:	b8 f7       	brcc	.-18     	; 0x2052 <__ftoa_engine+0x174>
    2064:	7e 91       	ld	r23, -X
    2066:	70 61       	ori	r23, 0x10	; 16
    2068:	7d 93       	st	X+, r23
    206a:	30 f0       	brcs	.+12     	; 0x2078 <__ftoa_engine+0x19a>
    206c:	83 95       	inc	r24
    206e:	71 e3       	ldi	r23, 0x31	; 49
    2070:	7d 93       	st	X+, r23
    2072:	70 e3       	ldi	r23, 0x30	; 48
    2074:	2a 95       	dec	r18
    2076:	e1 f7       	brne	.-8      	; 0x2070 <__ftoa_engine+0x192>
    2078:	11 24       	eor	r1, r1
    207a:	ef 90       	pop	r14
    207c:	ff 90       	pop	r15
    207e:	0f 91       	pop	r16
    2080:	1f 91       	pop	r17
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	99 27       	eor	r25, r25
    2088:	87 fd       	sbrc	r24, 7
    208a:	90 95       	com	r25
    208c:	08 95       	ret

Disassembly of section .text.avrlibc:

00006ebc <isspace>:
    6ebc:	91 11       	cpse	r25, r1
    6ebe:	0c 94 1a 39 	jmp	0x7234	; 0x7234 <__ctype_isfalse>
    6ec2:	80 32       	cpi	r24, 0x20	; 32
    6ec4:	19 f0       	breq	.+6      	; 0x6ecc <isspace+0x10>
    6ec6:	89 50       	subi	r24, 0x09	; 9
    6ec8:	85 50       	subi	r24, 0x05	; 5
    6eca:	c8 f7       	brcc	.-14     	; 0x6ebe <isspace+0x2>
    6ecc:	08 95       	ret

Disassembly of section .text.avrlibc:

0000658e <memcpy>:
    658e:	cf 92       	push	r12
    6590:	df 92       	push	r13
    6592:	ef 92       	push	r14
    6594:	dc 01       	movw	r26, r24
    6596:	6a 01       	movw	r12, r20
    6598:	e6 2e       	mov	r14, r22
    659a:	28 0f       	add	r18, r24
    659c:	39 1f       	adc	r19, r25
    659e:	a2 17       	cp	r26, r18
    65a0:	b3 07       	cpc	r27, r19
    65a2:	51 f0       	breq	.+20     	; 0x65b8 <memcpy+0x2a>
    65a4:	f6 01       	movw	r30, r12
    65a6:	44 91       	lpm	r20, Z
    65a8:	e7 fc       	sbrc	r14, 7
    65aa:	40 81       	ld	r20, Z
    65ac:	4d 93       	st	X+, r20
    65ae:	4f ef       	ldi	r20, 0xFF	; 255
    65b0:	c4 1a       	sub	r12, r20
    65b2:	d4 0a       	sbc	r13, r20
    65b4:	e4 0a       	sbc	r14, r20
    65b6:	f3 cf       	rjmp	.-26     	; 0x659e <memcpy+0x10>
    65b8:	ef 90       	pop	r14
    65ba:	df 90       	pop	r13
    65bc:	cf 90       	pop	r12
    65be:	08 95       	ret

Disassembly of section .text.avrlibc:

00005fe4 <strcmp>:
    5fe4:	cf 92       	push	r12
    5fe6:	df 92       	push	r13
    5fe8:	ef 92       	push	r14
    5fea:	6b 01       	movw	r12, r22
    5fec:	e8 2e       	mov	r14, r24
    5fee:	f6 01       	movw	r30, r12
    5ff0:	84 91       	lpm	r24, Z
    5ff2:	e7 fc       	sbrc	r14, 7
    5ff4:	80 81       	ld	r24, Z
    5ff6:	f9 01       	movw	r30, r18
    5ff8:	54 91       	lpm	r21, Z
    5ffa:	47 fd       	sbrc	r20, 7
    5ffc:	50 81       	ld	r21, Z
    5ffe:	85 13       	cpse	r24, r21
    6000:	0b c0       	rjmp	.+22     	; 0x6018 <strcmp+0x34>
    6002:	88 23       	and	r24, r24
    6004:	41 f0       	breq	.+16     	; 0x6016 <strcmp+0x32>
    6006:	8f ef       	ldi	r24, 0xFF	; 255
    6008:	c8 1a       	sub	r12, r24
    600a:	d8 0a       	sbc	r13, r24
    600c:	e8 0a       	sbc	r14, r24
    600e:	2f 5f       	subi	r18, 0xFF	; 255
    6010:	3f 4f       	sbci	r19, 0xFF	; 255
    6012:	4f 4f       	sbci	r20, 0xFF	; 255
    6014:	ec cf       	rjmp	.-40     	; 0x5fee <strcmp+0xa>
    6016:	58 2f       	mov	r21, r24
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	85 1b       	sub	r24, r21
    601c:	91 09       	sbc	r25, r1
    601e:	ef 90       	pop	r14
    6020:	df 90       	pop	r13
    6022:	cf 90       	pop	r12
    6024:	08 95       	ret

Disassembly of section .text.avrlibc:

00004ffe <strncmp>:
    4ffe:	cf 92       	push	r12
    5000:	df 92       	push	r13
    5002:	ef 92       	push	r14
    5004:	0f 93       	push	r16
    5006:	1f 93       	push	r17
    5008:	6b 01       	movw	r12, r22
    500a:	e8 2e       	mov	r14, r24
    500c:	01 15       	cp	r16, r1
    500e:	11 05       	cpc	r17, r1
    5010:	19 f1       	breq	.+70     	; 0x5058 <strncmp+0x5a>
    5012:	01 50       	subi	r16, 0x01	; 1
    5014:	11 09       	sbc	r17, r1
    5016:	f6 01       	movw	r30, r12
    5018:	84 91       	lpm	r24, Z
    501a:	e7 fc       	sbrc	r14, 7
    501c:	80 81       	ld	r24, Z
    501e:	88 23       	and	r24, r24
    5020:	99 f0       	breq	.+38     	; 0x5048 <strncmp+0x4a>
    5022:	f9 01       	movw	r30, r18
    5024:	94 91       	lpm	r25, Z
    5026:	47 fd       	sbrc	r20, 7
    5028:	90 81       	ld	r25, Z
    502a:	99 23       	and	r25, r25
    502c:	69 f0       	breq	.+26     	; 0x5048 <strncmp+0x4a>
    502e:	01 15       	cp	r16, r1
    5030:	11 05       	cpc	r17, r1
    5032:	51 f0       	breq	.+20     	; 0x5048 <strncmp+0x4a>
    5034:	89 13       	cpse	r24, r25
    5036:	08 c0       	rjmp	.+16     	; 0x5048 <strncmp+0x4a>
    5038:	8f ef       	ldi	r24, 0xFF	; 255
    503a:	c8 1a       	sub	r12, r24
    503c:	d8 0a       	sbc	r13, r24
    503e:	e8 0a       	sbc	r14, r24
    5040:	2f 5f       	subi	r18, 0xFF	; 255
    5042:	3f 4f       	sbci	r19, 0xFF	; 255
    5044:	4f 4f       	sbci	r20, 0xFF	; 255
    5046:	e5 cf       	rjmp	.-54     	; 0x5012 <strncmp+0x14>
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	f9 01       	movw	r30, r18
    504c:	24 91       	lpm	r18, Z
    504e:	47 fd       	sbrc	r20, 7
    5050:	20 81       	ld	r18, Z
    5052:	82 1b       	sub	r24, r18
    5054:	91 09       	sbc	r25, r1
    5056:	02 c0       	rjmp	.+4      	; 0x505c <strncmp+0x5e>
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	1f 91       	pop	r17
    505e:	0f 91       	pop	r16
    5060:	ef 90       	pop	r14
    5062:	df 90       	pop	r13
    5064:	cf 90       	pop	r12
    5066:	08 95       	ret

Disassembly of section .text.avrlibc:

000067fa <strlen>:
    67fa:	cf 92       	push	r12
    67fc:	df 92       	push	r13
    67fe:	ef 92       	push	r14
    6800:	6b 01       	movw	r12, r22
    6802:	e8 2e       	mov	r14, r24
    6804:	a8 2f       	mov	r26, r24
    6806:	cb 01       	movw	r24, r22
    6808:	fc 01       	movw	r30, r24
    680a:	24 91       	lpm	r18, Z
    680c:	a7 fd       	sbrc	r26, 7
    680e:	20 81       	ld	r18, Z
    6810:	22 23       	and	r18, r18
    6812:	19 f0       	breq	.+6      	; 0x681a <strlen+0x20>
    6814:	01 96       	adiw	r24, 0x01	; 1
    6816:	a1 1d       	adc	r26, r1
    6818:	f7 cf       	rjmp	.-18     	; 0x6808 <strlen+0xe>
    681a:	8c 19       	sub	r24, r12
    681c:	9d 09       	sbc	r25, r13
    681e:	ef 90       	pop	r14
    6820:	df 90       	pop	r13
    6822:	cf 90       	pop	r12
    6824:	08 95       	ret

Disassembly of section .text.avrlibc:

00006b80 <strcpy>:
    6b80:	9a 01       	movw	r18, r20
    6b82:	46 2f       	mov	r20, r22
    6b84:	dc 01       	movw	r26, r24
    6b86:	f9 01       	movw	r30, r18
    6b88:	54 91       	lpm	r21, Z
    6b8a:	47 fd       	sbrc	r20, 7
    6b8c:	50 81       	ld	r21, Z
    6b8e:	5d 93       	st	X+, r21
    6b90:	55 23       	and	r21, r21
    6b92:	21 f0       	breq	.+8      	; 0x6b9c <strcpy+0x1c>
    6b94:	2f 5f       	subi	r18, 0xFF	; 255
    6b96:	3f 4f       	sbci	r19, 0xFF	; 255
    6b98:	4f 4f       	sbci	r20, 0xFF	; 255
    6b9a:	f5 cf       	rjmp	.-22     	; 0x6b86 <strcpy+0x6>
    6b9c:	08 95       	ret

Disassembly of section .text.avrlibc:

000063f4 <strnlen>:
    63f4:	cf 92       	push	r12
    63f6:	df 92       	push	r13
    63f8:	ef 92       	push	r14
    63fa:	6b 01       	movw	r12, r22
    63fc:	e8 2e       	mov	r14, r24
    63fe:	a8 2f       	mov	r26, r24
    6400:	cb 01       	movw	r24, r22
    6402:	41 15       	cp	r20, r1
    6404:	51 05       	cpc	r21, r1
    6406:	31 f4       	brne	.+12     	; 0x6414 <strnlen+0x20>
    6408:	8c 19       	sub	r24, r12
    640a:	9d 09       	sbc	r25, r13
    640c:	ef 90       	pop	r14
    640e:	df 90       	pop	r13
    6410:	cf 90       	pop	r12
    6412:	08 95       	ret
    6414:	fc 01       	movw	r30, r24
    6416:	24 91       	lpm	r18, Z
    6418:	a7 fd       	sbrc	r26, 7
    641a:	20 81       	ld	r18, Z
    641c:	22 23       	and	r18, r18
    641e:	a1 f3       	breq	.-24     	; 0x6408 <strnlen+0x14>
    6420:	01 96       	adiw	r24, 0x01	; 1
    6422:	a1 1d       	adc	r26, r1
    6424:	41 50       	subi	r20, 0x01	; 1
    6426:	51 09       	sbc	r21, r1
    6428:	ec cf       	rjmp	.-40     	; 0x6402 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00004c08 <fputc>:
    4c08:	0f 93       	push	r16
    4c0a:	1f 93       	push	r17
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
    4c10:	fb 01       	movw	r30, r22
    4c12:	24 81       	ldd	r18, Z+4	; 0x04
    4c14:	21 fd       	sbrc	r18, 1
    4c16:	03 c0       	rjmp	.+6      	; 0x4c1e <fputc+0x16>
    4c18:	8f ef       	ldi	r24, 0xFF	; 255
    4c1a:	9f ef       	ldi	r25, 0xFF	; 255
    4c1c:	2c c0       	rjmp	.+88     	; 0x4c76 <fputc+0x6e>
    4c1e:	22 ff       	sbrs	r18, 2
    4c20:	16 c0       	rjmp	.+44     	; 0x4c4e <fputc+0x46>
    4c22:	47 81       	ldd	r20, Z+7	; 0x07
    4c24:	50 85       	ldd	r21, Z+8	; 0x08
    4c26:	25 81       	ldd	r18, Z+5	; 0x05
    4c28:	36 81       	ldd	r19, Z+6	; 0x06
    4c2a:	42 17       	cp	r20, r18
    4c2c:	53 07       	cpc	r21, r19
    4c2e:	44 f4       	brge	.+16     	; 0x4c40 <fputc+0x38>
    4c30:	a0 81       	ld	r26, Z
    4c32:	b1 81       	ldd	r27, Z+1	; 0x01
    4c34:	9d 01       	movw	r18, r26
    4c36:	2f 5f       	subi	r18, 0xFF	; 255
    4c38:	3f 4f       	sbci	r19, 0xFF	; 255
    4c3a:	31 83       	std	Z+1, r19	; 0x01
    4c3c:	20 83       	st	Z, r18
    4c3e:	8c 93       	st	X, r24
    4c40:	27 81       	ldd	r18, Z+7	; 0x07
    4c42:	30 85       	ldd	r19, Z+8	; 0x08
    4c44:	2f 5f       	subi	r18, 0xFF	; 255
    4c46:	3f 4f       	sbci	r19, 0xFF	; 255
    4c48:	30 87       	std	Z+8, r19	; 0x08
    4c4a:	27 83       	std	Z+7, r18	; 0x07
    4c4c:	14 c0       	rjmp	.+40     	; 0x4c76 <fputc+0x6e>
    4c4e:	8b 01       	movw	r16, r22
    4c50:	ec 01       	movw	r28, r24
    4c52:	fb 01       	movw	r30, r22
    4c54:	01 84       	ldd	r0, Z+9	; 0x09
    4c56:	f2 85       	ldd	r31, Z+10	; 0x0a
    4c58:	e0 2d       	mov	r30, r0
    4c5a:	09 95       	icall
    4c5c:	89 2b       	or	r24, r25
    4c5e:	e1 f6       	brne	.-72     	; 0x4c18 <fputc+0x10>
    4c60:	d8 01       	movw	r26, r16
    4c62:	17 96       	adiw	r26, 0x07	; 7
    4c64:	8d 91       	ld	r24, X+
    4c66:	9c 91       	ld	r25, X
    4c68:	18 97       	sbiw	r26, 0x08	; 8
    4c6a:	01 96       	adiw	r24, 0x01	; 1
    4c6c:	18 96       	adiw	r26, 0x08	; 8
    4c6e:	9c 93       	st	X, r25
    4c70:	8e 93       	st	-X, r24
    4c72:	17 97       	sbiw	r26, 0x07	; 7
    4c74:	ce 01       	movw	r24, r28
    4c76:	df 91       	pop	r29
    4c78:	cf 91       	pop	r28
    4c7a:	1f 91       	pop	r17
    4c7c:	0f 91       	pop	r16
    4c7e:	08 95       	ret

Disassembly of section .text.avrlibc:

00005e4e <sprintf>:
    5e4e:	af e0       	ldi	r26, 0x0F	; 15
    5e50:	b0 e0       	ldi	r27, 0x00	; 0
    5e52:	ed e2       	ldi	r30, 0x2D	; 45
    5e54:	ff e2       	ldi	r31, 0x2F	; 47
    5e56:	0c 94 80 31 	jmp	0x6300	; 0x6300 <__prologue_saves__+0x1c>
    5e5a:	0e 89       	ldd	r16, Y+22	; 0x16
    5e5c:	1f 89       	ldd	r17, Y+23	; 0x17
    5e5e:	86 e0       	ldi	r24, 0x06	; 6
    5e60:	8d 83       	std	Y+5, r24	; 0x05
    5e62:	1a 83       	std	Y+2, r17	; 0x02
    5e64:	09 83       	std	Y+1, r16	; 0x01
    5e66:	8f ef       	ldi	r24, 0xFF	; 255
    5e68:	9f e7       	ldi	r25, 0x7F	; 127
    5e6a:	9f 83       	std	Y+7, r25	; 0x07
    5e6c:	8e 83       	std	Y+6, r24	; 0x06
    5e6e:	9e 01       	movw	r18, r28
    5e70:	25 5e       	subi	r18, 0xE5	; 229
    5e72:	3f 4f       	sbci	r19, 0xFF	; 255
    5e74:	48 8d       	ldd	r20, Y+24	; 0x18
    5e76:	59 8d       	ldd	r21, Y+25	; 0x19
    5e78:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5e7a:	ce 01       	movw	r24, r28
    5e7c:	01 96       	adiw	r24, 0x01	; 1
    5e7e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vfprintf>
    5e82:	e8 85       	ldd	r30, Y+8	; 0x08
    5e84:	f9 85       	ldd	r31, Y+9	; 0x09
    5e86:	e0 0f       	add	r30, r16
    5e88:	f1 1f       	adc	r31, r17
    5e8a:	10 82       	st	Z, r1
    5e8c:	2f 96       	adiw	r28, 0x0f	; 15
    5e8e:	e4 e0       	ldi	r30, 0x04	; 4
    5e90:	0c 94 ed 31 	jmp	0x63da	; 0x63da <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00003ec6 <__ultoa_invert>:
    3ec6:	fa 01       	movw	r30, r20
    3ec8:	aa 27       	eor	r26, r26
    3eca:	28 30       	cpi	r18, 0x08	; 8
    3ecc:	51 f1       	breq	.+84     	; 0x3f22 <__ultoa_invert+0x5c>
    3ece:	20 31       	cpi	r18, 0x10	; 16
    3ed0:	81 f1       	breq	.+96     	; 0x3f32 <__ultoa_invert+0x6c>
    3ed2:	e8 94       	clt
    3ed4:	6f 93       	push	r22
    3ed6:	6e 7f       	andi	r22, 0xFE	; 254
    3ed8:	6e 5f       	subi	r22, 0xFE	; 254
    3eda:	7f 4f       	sbci	r23, 0xFF	; 255
    3edc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ede:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee0:	af 4f       	sbci	r26, 0xFF	; 255
    3ee2:	b1 e0       	ldi	r27, 0x01	; 1
    3ee4:	3e d0       	rcall	.+124    	; 0x3f62 <__ultoa_invert+0x9c>
    3ee6:	b4 e0       	ldi	r27, 0x04	; 4
    3ee8:	3c d0       	rcall	.+120    	; 0x3f62 <__ultoa_invert+0x9c>
    3eea:	67 0f       	add	r22, r23
    3eec:	78 1f       	adc	r23, r24
    3eee:	89 1f       	adc	r24, r25
    3ef0:	9a 1f       	adc	r25, r26
    3ef2:	a1 1d       	adc	r26, r1
    3ef4:	68 0f       	add	r22, r24
    3ef6:	79 1f       	adc	r23, r25
    3ef8:	8a 1f       	adc	r24, r26
    3efa:	91 1d       	adc	r25, r1
    3efc:	a1 1d       	adc	r26, r1
    3efe:	6a 0f       	add	r22, r26
    3f00:	71 1d       	adc	r23, r1
    3f02:	81 1d       	adc	r24, r1
    3f04:	91 1d       	adc	r25, r1
    3f06:	a1 1d       	adc	r26, r1
    3f08:	20 d0       	rcall	.+64     	; 0x3f4a <__ultoa_invert+0x84>
    3f0a:	09 f4       	brne	.+2      	; 0x3f0e <__ultoa_invert+0x48>
    3f0c:	68 94       	set
    3f0e:	3f 91       	pop	r19
    3f10:	2a e0       	ldi	r18, 0x0A	; 10
    3f12:	26 9f       	mul	r18, r22
    3f14:	11 24       	eor	r1, r1
    3f16:	30 19       	sub	r19, r0
    3f18:	30 5d       	subi	r19, 0xD0	; 208
    3f1a:	31 93       	st	Z+, r19
    3f1c:	de f6       	brtc	.-74     	; 0x3ed4 <__ultoa_invert+0xe>
    3f1e:	cf 01       	movw	r24, r30
    3f20:	08 95       	ret
    3f22:	46 2f       	mov	r20, r22
    3f24:	47 70       	andi	r20, 0x07	; 7
    3f26:	40 5d       	subi	r20, 0xD0	; 208
    3f28:	41 93       	st	Z+, r20
    3f2a:	b3 e0       	ldi	r27, 0x03	; 3
    3f2c:	0f d0       	rcall	.+30     	; 0x3f4c <__ultoa_invert+0x86>
    3f2e:	c9 f7       	brne	.-14     	; 0x3f22 <__ultoa_invert+0x5c>
    3f30:	f6 cf       	rjmp	.-20     	; 0x3f1e <__ultoa_invert+0x58>
    3f32:	46 2f       	mov	r20, r22
    3f34:	4f 70       	andi	r20, 0x0F	; 15
    3f36:	40 5d       	subi	r20, 0xD0	; 208
    3f38:	4a 33       	cpi	r20, 0x3A	; 58
    3f3a:	18 f0       	brcs	.+6      	; 0x3f42 <__ultoa_invert+0x7c>
    3f3c:	49 5d       	subi	r20, 0xD9	; 217
    3f3e:	31 fd       	sbrc	r19, 1
    3f40:	40 52       	subi	r20, 0x20	; 32
    3f42:	41 93       	st	Z+, r20
    3f44:	02 d0       	rcall	.+4      	; 0x3f4a <__ultoa_invert+0x84>
    3f46:	a9 f7       	brne	.-22     	; 0x3f32 <__ultoa_invert+0x6c>
    3f48:	ea cf       	rjmp	.-44     	; 0x3f1e <__ultoa_invert+0x58>
    3f4a:	b4 e0       	ldi	r27, 0x04	; 4
    3f4c:	a6 95       	lsr	r26
    3f4e:	97 95       	ror	r25
    3f50:	87 95       	ror	r24
    3f52:	77 95       	ror	r23
    3f54:	67 95       	ror	r22
    3f56:	ba 95       	dec	r27
    3f58:	c9 f7       	brne	.-14     	; 0x3f4c <__ultoa_invert+0x86>
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	61 05       	cpc	r22, r1
    3f5e:	71 05       	cpc	r23, r1
    3f60:	08 95       	ret
    3f62:	9b 01       	movw	r18, r22
    3f64:	ac 01       	movw	r20, r24
    3f66:	0a 2e       	mov	r0, r26
    3f68:	06 94       	lsr	r0
    3f6a:	57 95       	ror	r21
    3f6c:	47 95       	ror	r20
    3f6e:	37 95       	ror	r19
    3f70:	27 95       	ror	r18
    3f72:	ba 95       	dec	r27
    3f74:	c9 f7       	brne	.-14     	; 0x3f68 <__ultoa_invert+0xa2>
    3f76:	62 0f       	add	r22, r18
    3f78:	73 1f       	adc	r23, r19
    3f7a:	84 1f       	adc	r24, r20
    3f7c:	95 1f       	adc	r25, r21
    3f7e:	a0 1d       	adc	r26, r0
    3f80:	08 95       	ret

Disassembly of section .text.avrlibc:

00007234 <__ctype_isfalse>:
    7234:	99 27       	eor	r25, r25
    7236:	88 27       	eor	r24, r24

00007238 <__ctype_istrue>:
    7238:	08 95       	ret

Disassembly of section .text.avrlibc:

0000693a <eeprom_read_block>:
    693a:	ba 01       	movw	r22, r20
    693c:	a9 01       	movw	r20, r18
    693e:	dc 01       	movw	r26, r24
    6940:	cb 01       	movw	r24, r22

00006942 <eeprom_read_blraw>:
    6942:	fc 01       	movw	r30, r24
    6944:	f9 99       	sbic	0x1f, 1	; 31
    6946:	fe cf       	rjmp	.-4      	; 0x6944 <eeprom_read_blraw+0x2>
    6948:	06 c0       	rjmp	.+12     	; 0x6956 <eeprom_read_blraw+0x14>
    694a:	f2 bd       	out	0x22, r31	; 34
    694c:	e1 bd       	out	0x21, r30	; 33
    694e:	f8 9a       	sbi	0x1f, 0	; 31
    6950:	31 96       	adiw	r30, 0x01	; 1
    6952:	00 b4       	in	r0, 0x20	; 32
    6954:	0d 92       	st	X+, r0
    6956:	41 50       	subi	r20, 0x01	; 1
    6958:	50 40       	sbci	r21, 0x00	; 0
    695a:	b8 f7       	brcc	.-18     	; 0x694a <eeprom_read_blraw+0x8>
    695c:	08 95       	ret

Disassembly of section .text.avrlibc:

00006ece <eeprom_read_byte>:
    6ece:	cb 01       	movw	r24, r22
    6ed0:	f9 99       	sbic	0x1f, 1	; 31
    6ed2:	fe cf       	rjmp	.-4      	; 0x6ed0 <eeprom_read_byte+0x2>
    6ed4:	92 bd       	out	0x22, r25	; 34
    6ed6:	81 bd       	out	0x21, r24	; 33
    6ed8:	f8 9a       	sbi	0x1f, 0	; 31
    6eda:	99 27       	eor	r25, r25
    6edc:	80 b5       	in	r24, 0x20	; 32
    6ede:	08 95       	ret

Disassembly of section .text.avrlibc:

00007028 <eeprom_read_dword>:
    7028:	cb 01       	movw	r24, r22
    702a:	a6 e1       	ldi	r26, 0x16	; 22
    702c:	b0 e0       	ldi	r27, 0x00	; 0
    702e:	44 e0       	ldi	r20, 0x04	; 4
    7030:	50 e0       	ldi	r21, 0x00	; 0
    7032:	0c 94 a1 34 	jmp	0x6942	; 0x6942 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00007036 <eeprom_read_word>:
    7036:	cb 01       	movw	r24, r22
    7038:	a8 e1       	ldi	r26, 0x18	; 24
    703a:	b0 e0       	ldi	r27, 0x00	; 0
    703c:	42 e0       	ldi	r20, 0x02	; 2
    703e:	50 e0       	ldi	r21, 0x00	; 0
    7040:	0c 94 a1 34 	jmp	0x6942	; 0x6942 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00005ed8 <eeprom_update_block>:
    5ed8:	cf 92       	push	r12
    5eda:	df 92       	push	r13
    5edc:	ef 92       	push	r14
    5ede:	21 50       	subi	r18, 0x01	; 1
    5ee0:	31 09       	sbc	r19, r1
    5ee2:	c0 f0       	brcs	.+48     	; 0x5f14 <eeprom_update_block+0x3c>
    5ee4:	6b 01       	movw	r12, r22
    5ee6:	e8 2e       	mov	r14, r24
    5ee8:	c2 0e       	add	r12, r18
    5eea:	d3 1e       	adc	r13, r19
    5eec:	e1 1c       	adc	r14, r1
    5eee:	ca 01       	movw	r24, r20
    5ef0:	82 0f       	add	r24, r18
    5ef2:	93 1f       	adc	r25, r19
    5ef4:	42 2f       	mov	r20, r18
    5ef6:	73 2f       	mov	r23, r19
    5ef8:	f6 01       	movw	r30, r12
    5efa:	5e 2d       	mov	r21, r14
    5efc:	0e 94 bf 38 	call	0x717e	; 0x717e <__xload_1>
    5f00:	26 2f       	mov	r18, r22
    5f02:	0e 94 b0 34 	call	0x6960	; 0x6960 <eeprom_update_r18>
    5f06:	31 e0       	ldi	r19, 0x01	; 1
    5f08:	c3 1a       	sub	r12, r19
    5f0a:	d1 08       	sbc	r13, r1
    5f0c:	e1 08       	sbc	r14, r1
    5f0e:	41 50       	subi	r20, 0x01	; 1
    5f10:	70 40       	sbci	r23, 0x00	; 0
    5f12:	90 f7       	brcc	.-28     	; 0x5ef8 <eeprom_update_block+0x20>
    5f14:	ef 90       	pop	r14
    5f16:	df 90       	pop	r13
    5f18:	cf 90       	pop	r12
    5f1a:	08 95       	ret

Disassembly of section .text.avrlibc:

0000695e <eeprom_update_byte>:
    695e:	26 2f       	mov	r18, r22

00006960 <eeprom_update_r18>:
    6960:	f9 99       	sbic	0x1f, 1	; 31
    6962:	fe cf       	rjmp	.-4      	; 0x6960 <eeprom_update_r18>
    6964:	92 bd       	out	0x22, r25	; 34
    6966:	81 bd       	out	0x21, r24	; 33
    6968:	f8 9a       	sbi	0x1f, 0	; 31
    696a:	01 97       	sbiw	r24, 0x01	; 1
    696c:	00 b4       	in	r0, 0x20	; 32
    696e:	02 16       	cp	r0, r18
    6970:	39 f0       	breq	.+14     	; 0x6980 <eeprom_update_r18+0x20>
    6972:	1f ba       	out	0x1f, r1	; 31
    6974:	20 bd       	out	0x20, r18	; 32
    6976:	0f b6       	in	r0, 0x3f	; 63
    6978:	f8 94       	cli
    697a:	fa 9a       	sbi	0x1f, 2	; 31
    697c:	f9 9a       	sbi	0x1f, 1	; 31
    697e:	0f be       	out	0x3f, r0	; 63
    6980:	08 95       	ret

Disassembly of section .text.avrlibc:

00006cdc <eeprom_update_dword>:
    6cdc:	03 96       	adiw	r24, 0x03	; 3
    6cde:	27 2f       	mov	r18, r23
    6ce0:	0e 94 b0 34 	call	0x6960	; 0x6960 <eeprom_update_r18>
    6ce4:	0e 94 af 34 	call	0x695e	; 0x695e <eeprom_update_byte>
    6ce8:	25 2f       	mov	r18, r21
    6cea:	0e 94 b0 34 	call	0x6960	; 0x6960 <eeprom_update_r18>
    6cee:	24 2f       	mov	r18, r20
    6cf0:	0c 94 b0 34 	jmp	0x6960	; 0x6960 <eeprom_update_r18>

Disassembly of section .text.avrlibc:

00007104 <eeprom_update_word>:
    7104:	01 96       	adiw	r24, 0x01	; 1
    7106:	27 2f       	mov	r18, r23
    7108:	0e 94 b0 34 	call	0x6960	; 0x6960 <eeprom_update_r18>
    710c:	0c 94 af 34 	jmp	0x695e	; 0x695e <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00006aac <__mulsi3>:
    6aac:	db 01       	movw	r26, r22
    6aae:	8f 93       	push	r24
    6ab0:	9f 93       	push	r25
    6ab2:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <__muluhisi3>
    6ab6:	bf 91       	pop	r27
    6ab8:	af 91       	pop	r26
    6aba:	a2 9f       	mul	r26, r18
    6abc:	80 0d       	add	r24, r0
    6abe:	91 1d       	adc	r25, r1
    6ac0:	a3 9f       	mul	r26, r19
    6ac2:	90 0d       	add	r25, r0
    6ac4:	b2 9f       	mul	r27, r18
    6ac6:	90 0d       	add	r25, r0
    6ac8:	11 24       	eor	r1, r1
    6aca:	08 95       	ret

Disassembly of section .text.libgcc.div:

00005f1c <__udivmodsi4>:
    5f1c:	a1 e2       	ldi	r26, 0x21	; 33
    5f1e:	1a 2e       	mov	r1, r26
    5f20:	aa 1b       	sub	r26, r26
    5f22:	bb 1b       	sub	r27, r27
    5f24:	fd 01       	movw	r30, r26
    5f26:	0d c0       	rjmp	.+26     	; 0x5f42 <__udivmodsi4_ep>

00005f28 <__udivmodsi4_loop>:
    5f28:	aa 1f       	adc	r26, r26
    5f2a:	bb 1f       	adc	r27, r27
    5f2c:	ee 1f       	adc	r30, r30
    5f2e:	ff 1f       	adc	r31, r31
    5f30:	a2 17       	cp	r26, r18
    5f32:	b3 07       	cpc	r27, r19
    5f34:	e4 07       	cpc	r30, r20
    5f36:	f5 07       	cpc	r31, r21
    5f38:	20 f0       	brcs	.+8      	; 0x5f42 <__udivmodsi4_ep>
    5f3a:	a2 1b       	sub	r26, r18
    5f3c:	b3 0b       	sbc	r27, r19
    5f3e:	e4 0b       	sbc	r30, r20
    5f40:	f5 0b       	sbc	r31, r21

00005f42 <__udivmodsi4_ep>:
    5f42:	66 1f       	adc	r22, r22
    5f44:	77 1f       	adc	r23, r23
    5f46:	88 1f       	adc	r24, r24
    5f48:	99 1f       	adc	r25, r25
    5f4a:	1a 94       	dec	r1
    5f4c:	69 f7       	brne	.-38     	; 0x5f28 <__udivmodsi4_loop>
    5f4e:	60 95       	com	r22
    5f50:	70 95       	com	r23
    5f52:	80 95       	com	r24
    5f54:	90 95       	com	r25
    5f56:	9b 01       	movw	r18, r22
    5f58:	ac 01       	movw	r20, r24
    5f5a:	bd 01       	movw	r22, r26
    5f5c:	cf 01       	movw	r24, r30
    5f5e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00006d4c <__muluhisi3>:
    6d4c:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__umulhisi3>
    6d50:	a5 9f       	mul	r26, r21
    6d52:	90 0d       	add	r25, r0
    6d54:	b4 9f       	mul	r27, r20
    6d56:	90 0d       	add	r25, r0
    6d58:	a4 9f       	mul	r26, r20
    6d5a:	80 0d       	add	r24, r0
    6d5c:	91 1d       	adc	r25, r1
    6d5e:	11 24       	eor	r1, r1
    6d60:	08 95       	ret

Disassembly of section .text.libgcc:

0000717e <__xload_1>:
    717e:	57 fd       	sbrc	r21, 7
    7180:	60 81       	ld	r22, Z
    7182:	57 ff       	sbrs	r21, 7
    7184:	64 91       	lpm	r22, Z
    7186:	08 95       	ret
