
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000068a1  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000772  00800100  00800100  000068a1  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000068a1  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  000068fc  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000c08  00000000  00000000  00006970  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001232f  00000000  00000000  00007578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033c9  00000000  00000000  000198a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000069a3  00000000  00000000  0001cc70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f94  00000000  00000000  00023614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014b4  00000000  00000000  000255a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007581  00000000  00000000  00026a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009f0  00000000  00000000  0002dfdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00006730  00006730  00006884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0002e9d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  0000642c  0000642c  00006580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  000062da  000062da  0000642e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  0000643a  0000643a  0000658e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  000062ee  000062ee  00006442  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00006448  00006448  0000659c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00006302  00006302  00006456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  00006456  00006456  000065aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  00006316  00006316  0000646a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  00006464  00006464  000065b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  0000632a  0000632a  0000647e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  0000667a  0000667a  000067ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 0000003c  0000555c  0000555c  000056b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  0000633e  0000633e  00006492  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  00006682  00006682  000067d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  0000668a  0000668a  000067de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  00006692  00006692  000067e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  00006472  00006472  000065c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  00006616  00006616  0000676a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000020  00005f84  00005f84  000060d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  000066e2  000066e2  00006836  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  00006734  00006734  00006888  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  00004c26  00004c26  00004d7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800f7b  00800f7b  000068a1  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000034  00005926  00005926  00005a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  0000656e  0000656e  000066c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  0000657a  0000657a  000066ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  00004c74  00004c74  00004dc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800f7d  00800f7d  000068a1  2**0
                  ALLOC
 43 .text.start_timer 00000008  0000669a  0000669a  000067ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.stop_timer 00000006  000066e8  000066e8  0000683c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TC2_HAL_init 00000020  00005fa4  00005fa4  000060f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_subscribe 00000054  00004a8c  00004a8c  00004be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_cancel 0000003a  0000564c  0000564c  000057a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__vector_9 0000007c  00003fec  00003fec  00004140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .bss.cnt      00000001  00800f93  00800f93  000068a1  2**0
                  ALLOC
 50 .bss.cbCounter 00000001  00800f94  00800f94  000068a1  2**0
                  ALLOC
 51 .bss.callbacks 0000000a  00800f4a  00800f4a  000068a1  2**0
                  ALLOC
 52 .text.start_and_write_data 0000004c  00004d5e  00004d5e  00004eb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.read_and_stop 0000005a  0000487c  0000487c  000049d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_API_write_data 00000014  00006352  00006352  000064a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_API_write_data_stop 0000001a  000061be  000061be  00006312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_read_data_ack_end_nack_stop 00000032  000059c2  000059c2  00005b16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_repeat_read_data_stop 00000030  00005aee  00005aee  00005c42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_HAL_init 00000012  000063a2  000063a2  000064f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_HAL_start 00000048  00005050  00005050  000051a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_repeated_start 00000042  0000539a  0000539a  000054ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_write_byte 00000020  00005fc4  00005fc4  00006118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_read_byte_ack 00000014  00006366  00006366  000064ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_read_byte_nack 00000014  0000637a  0000637a  000064ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_stop 00000010  000063fc  000063fc  00006550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.copy_buffer 0000002e  00005c9e  00005c9e  00005df2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart0_hal_init 0000003c  00005598  00005598  000056ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart0_hal_send_message 0000003c  000055d4  000055d4  00005728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_send_string 0000006e  0000448a  0000448a  000045de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_message_ready 0000000e  00006480  00006480  000065d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_clear_rx_buffer 0000000a  00006620  00006620  00006774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_read_message_as_str 00000028  00005dac  00005dac  00005f00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_send_break 00000046  00005170  00005170  000052c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_22 0000004a  00004f72  00004f72  000050c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_20 00000074  000042c2  000042c2  00004416  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .bss.rx_buffer_has_message 00000001  00800f95  00800f95  000068a1  2**0
                  ALLOC
 76 .bss.rx_buffer_data_len 00000001  00800f96  00800f96  000068a1  2**0
                  ALLOC
 77 .bss.tx_buffer_cursor 00000001  00800f97  00800f97  000068a1  2**0
                  ALLOC
 78 .bss.tx_buffer_data_len 00000001  00800f98  00800f98  000068a1  2**0
                  ALLOC
 79 .text.copy_buffer 0000002e  00005ccc  00005ccc  00005e20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.uart1_hal_init 0000003c  00005610  00005610  00005764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.uart1_hal_send_string 0000008a  00003e58  00003e58  00003fac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.uart1_hal_message_ready 0000000e  0000648e  0000648e  000065e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.uart1_hal_rx_full 0000000e  0000649c  0000649c  000065f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.uart1_hal_clear_rx_buffer 0000000a  0000662a  0000662a  0000677e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.uart1_hal_read_message_as_str 00000028  00005dd4  00005dd4  00005f28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vector_30 0000004a  00004fbc  00004fbc  00005110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vector_28 00000074  00004336  00004336  0000448a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .bss.rx_buffer_has_message 00000001  00800f99  00800f99  000068a1  2**0
                  ALLOC
 89 .bss.rx_buffer_data_len 00000001  00800f9a  00800f9a  000068a1  2**0
                  ALLOC
 90 .bss.rx_buffer 00000096  00800dea  00800dea  000068a1  2**0
                  ALLOC
 91 .bss.tx_buffer_cursor 00000001  00800f9b  00800f9b  000068a1  2**0
                  ALLOC
 92 .bss.tx_buffer_data_len 00000001  00800f9c  00800f9c  000068a1  2**0
                  ALLOC
 93 .bss.tx_buffer 000000c8  00800d22  00800d22  000068a1  2**0
                  ALLOC
 94 .text.UI_HAL_jumper_init 0000000e  000064aa  000064aa  000065fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.UI_HAL_is_config_mode 0000000a  00006634  00006634  00006788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.main    0000003a  00005686  00005686  000057da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.calc_ppm_methane 00000096  00003b72  00003b72  00003cc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.vect_ADC_heat_timeout 00000018  0000620c  0000620c  00006360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.ADC_init_sampling 00000066  0000469e  0000469e  000047f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.ADC_deinit_sampling 00000014  0000638e  0000638e  000064e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.ADC_is_sampling_done 0000001c  00006116  00006116  0000626a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.ADC_get_value 00000056  000049e0  000049e0  00004b34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.vect_ADC_do_sample 00000046  000051b6  000051b6  0000530a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.ADC_start_sampling 0000000a  0000663e  0000663e  00006792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.ADC_meth_sens_power_on 0000001e  00006044  00006044  00006198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.ADC_meth_sens_power_off 00000008  000066a2  000066a2  000067f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ADC_meth_sens_ready 00000012  000063b4  000063b4  00006508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.ADC_set_conf_parameters 00000042  000053dc  000053dc  00005530  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .bss.cntPowerUpTime 00000001  00800f9d  00800f9d  000068a1  2**0
                  ALLOC
110 .bss._powerUpTime 00000001  00800f9e  00800f9e  000068a1  2**0
                  ALLOC
111 .bss.cntSamples 00000002  00800f7f  00800f7f  000068a1  2**0
                  ALLOC
112 .bss._data    00000002  00800f81  00800f81  000068a1  2**0
                  ALLOC
113 .bss._nSamples 00000002  00800f83  00800f83  000068a1  2**0
                  ALLOC
114 .data.PPM_factor 00000004  00800f5f  0000673d  00006891  2**0
                  CONTENTS, ALLOC, LOAD, DATA
115 .data.RRL     00000004  00800f63  00006741  00006895  2**0
                  CONTENTS, ALLOC, LOAD, DATA
116 .data.Vc      00000004  00800f67  00006745  00006899  2**0
                  CONTENTS, ALLOC, LOAD, DATA
117 .text.EM_has_deveui 00000016  0000626c  0000626c  000063c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.EM_has_appeui 00000016  00006282  00006282  000063d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.EM_has_appkey 00000016  00006298  00006298  000063ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_set_deveui 0000003a  000056c0  000056c0  00005814  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_get_deveui 00000030  00005b1e  00005b1e  00005c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_set_appeui 0000003a  000056fa  000056fa  0000584e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.EM_get_appeui 00000030  00005b4e  00005b4e  00005ca2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.EM_set_appkey 0000003a  00005734  00005734  00005888  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.EM_get_appkey 00000030  00005b7e  00005b7e  00005cd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.EM_set_ppmfactor 0000000e  000064b8  000064b8  0000660c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.EM_get_ppmfactor 0000001e  00006062  00006062  000061b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.EM_set_RRL 0000000e  000064c6  000064c6  0000661a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.EM_get_RRL 0000001e  00006080  00006080  000061d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.EM_set_Vcc 0000000e  000064d4  000064d4  00006628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.EM_get_Vcc 0000001e  0000609e  0000609e  000061f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.EM_set_collections 0000000e  000064e2  000064e2  00006636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.EM_get_collections 00000010  0000640c  0000640c  00006560  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.EM_set_heat_up_time 0000000c  00006586  00006586  000066da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.EM_get_heat_up_time 0000000c  00006592  00006592  000066e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.EM_set_air_pump_time 0000000c  0000659e  0000659e  000066f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.EM_get_air_pump_time 0000000c  000065aa  000065aa  000066fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.EM_set_sp_interval 0000000c  000065b6  000065b6  0000670a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.EM_get_sp_interval 0000000c  000065c2  000065c2  00006716  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.cb_blink 00000006  000066ee  000066ee  00006842  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.blink   0000004c  00004daa  00004daa  00004efe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.err_code 00000038  0000576e  0000576e  000058c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.LED_start_try_join 0000000e  000064f0  000064f0  00006644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.LED_stop_try_join 00000010  0000641c  0000641c  00006570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.LED_join_success 00000040  00005460  00005460  000055b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.LED_join_denied 00000008  000066aa  000066aa  000067fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.LED_conf_err 00000008  000066b2  000066b2  00006806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.LED_fatal_err 00000008  000066ba  000066ba  0000680e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .bss.cbPointer 00000001  00800f9f  00800f9f  000068a1  2**0
                  ALLOC
150 .progmemx.data 00000058  000006c6  000006c6  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
151 .text.parse_err 00000058  00004930  00004930  00004a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.JN_join_network 000002a4  00001490  00001490  000015e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.set_block_uplink 00000018  00006224  00006224  00006378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.cb_block_uplink 0000001c  00006132  00006132  00006286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.LM_join_network 00000006  000066f4  000066f4  00006848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.LM_send_uplink 0000002e  00005cfa  00005cfa  00005e4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.LM_put_to_sleep 00000006  000066fa  000066fa  0000684e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.LM_wake_up 00000006  00006700  00006700  00006854  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.LM_is_free 0000000a  00006648  00006648  0000679c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.LM_reset_module 00000006  00006706  00006706  0000685a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.LM_forward_msg 00000006  0000670c  0000670c  00006860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.LM_send_break 00000006  00006712  00006712  00006866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .bss.subPointer 00000001  00800fa0  00800fa0  000068a1  2**0
                  ALLOC
164 .bss.busy     00000001  00800fa1  00800fa1  000068a1  2**0
                  ALLOC
165 .bss.cnt      00000001  00800fa2  00800fa2  000068a1  2**0
                  ALLOC
166 .progmemx.data 00000073  00000653  00000653  000007a7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
167 .text.tohex   00000084  00003f68  00003f68  000040bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.attach_ending 0000001c  0000614e  0000614e  000062a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.cmd_with_ending 00000032  000059f4  000059f4  00005b48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.sys_sleep_cmd 0000005e  00004764  00004764  000048b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.mac_set_parameter 0000004e  00004cc2  00004cc2  00004e16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.mac_set_deveui 00000048  00005098  00005098  000051ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.mac_set_appeui 00000048  000050e0  000050e0  00005234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.mac_set_appkey 00000048  00005128  00005128  0000527c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.mac_set_ADR 00000030  00005bae  00005bae  00005d02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.mac_tx_confirmed 000000ac  00003796  00003796  000038ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .progmemx.data 00000038  0000071e  0000071e  00000872  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
178 .text.decode_tx_response 00000068  000045ce  000045ce  00004722  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.SU_send_uplink 000000f8  00002c1c  00002c1c  00002d70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .progmemx.data 00000003  0000076f  0000076f  000008c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
181 .text.SC_put_to_sleep 00000060  00004704  00004704  00004858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.SC_wake_up 00000032  00005a26  00005a26  00005b7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.util_setPendingStates 0000000c  000065ce  000065ce  00006722  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.util_setMatchCase 0000000c  000065da  000065da  0000672e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.util_strbeginswith 0000004a  00005006  00005006  0000515a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.util_matchMessage 0000005c  00004820  00004820  00004974  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .progmemx.data 00000007  0000075e  0000075e  000008b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
188 .text.util_reset_module 00000046  000051fc  000051fc  00005350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.util_lora_forward_msg 00000038  000057a6  000057a6  000058fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.util_send_break 00000020  00005fe4  00005fe4  00006138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.get_group_id 00000006  00006718  00006718  0000686c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.set_group_id 00000006  0000671e  0000671e  00006872  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.MRPP_init_group 00000032  00005a58  00005a58  00005bac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.MRPP_add_collection_data_INT16 00000070  000043aa  000043aa  000044fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.MRPP_is_body_package_ready 00000022  00005eb8  00005eb8  0000600c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.MRPP_get_ready_body_package 00000096  00003c08  00003c08  00003d5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.MRPP_set_body_sent 0000000c  000065e6  000065e6  0000673a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.MRPP_get_header_package 00000022  00005eda  00005eda  0000602e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.MRPP_get_tail_package 00000022  00005efc  00005efc  00006050  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.MRPP_all_body_package_sent 0000000a  00006652  00006652  000067a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .bss._groupId 00000001  00800fa3  00800fa3  000068a1  2**0
                  ALLOC
202 .text.mrpp_data_add_int16 00000092  00003d34  00003d34  00003e88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.mrpp_data_get 00000030  00005bde  00005bde  00005d32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.add_data_types 000000d8  000030b4  000030b4  00003208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.update_bodies 00000162  000020ba  000020ba  0000220e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.mrpp_state_init 000001be  00001bd6  00001bd6  00001d2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.mrpp_state_get_header 000000a2  00003a2e  00003a2e  00003b82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.mrpp_state_get_tail 000000a4  00003842  00003842  00003996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.mrpp_state_set_collection 00000086  00003ee2  00003ee2  00004036  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.mrpp_state_is_body_ready 00000030  00005c0e  00005c0e  00005d62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.mrpp_state_all_bodies_sent 0000002a  00005d82  00005d82  00005ed6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.mrpp_state_get_ready_body 0000011a  000026e4  000026e4  00002838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.mrpp_state_set_body_sent 00000020  00006004  00006004  00006158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.mrpp_state_get_collection_address 00000036  0000584e  0000584e  000059a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.cb_cnt_time 00000030  00005c3e  00005c3e  00005d92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.PUMP_start 00000024  00005e4c  00005e4c  00005fa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.PUMP_is_done 0000001c  0000616a  0000616a  000062be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .bss.eventPointer 00000001  00800fa4  00800fa4  000068a1  2**0
                  ALLOC
219 .bss.cnt      00000002  00800f85  00800f85  000068a1  2**0
                  ALLOC
220 .bss._seconds 00000002  00800f87  00800f87  000068a1  2**0
                  ALLOC
221 .text.datetime_to_BCD 00000100  00002a1e  00002a1e  00002b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.RTC_set_clock_out 00000050  00004b86  00004b86  00004cda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.RTC_clear_wake_up_interrupt 00000034  0000595a  0000595a  00005aae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.RTC_get_current_time 00000140  0000221c  0000221c  00002370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .rodata       00000005  00800f5a  00006738  0000688c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
226 .text.RTC_set_wake_up_interrupt_minutes 000000c4  0000332e  0000332e  00003482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.RTC_set_current_time 00000068  00004636  00004636  0000478a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.RTC_datetime_to_ts 00000122  000025c2  000025c2  00002716  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .progmemx.data.CMD_READ_TIME_POINTER 00000001  00000774  00000774  000008c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
230 .text.bytes_2_uint 0000001a  000061d8  000061d8  0000632c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.init_measurement 00000038  000057de  000057de  00005932  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.validate_data 00000032  00005a8a  00005a8a  00005bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.read_value 000000a2  00003ad0  00003ad0  00003c24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.vect_SCD_do_sample 00000046  00005242  00005242  00005396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.SCD30_sensor_on 00000022  00005f1e  00005f1e  00006072  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.SCD30_sensor_off 00000008  000066c2  000066c2  00006816  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.SCD30_init_sampling 00000022  00005f40  00005f40  00006094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.SCD30_deinit_sampling 0000000e  000064fe  000064fe  00006652  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.SCD30_start_sampling 0000000a  0000665c  0000665c  000067b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.SCD30_is_sampling_done 0000001c  00006186  00006186  000062da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.SCD30_get_reading 0000001a  000061f2  000061f2  00006346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .bss.cntSamples 00000002  00800f89  00800f89  000068a1  2**0
                  ALLOC
243 .bss._data    00000002  00800f8b  00800f8b  000068a1  2**0
                  ALLOC
244 .bss._nSamples 00000002  00800f8d  00800f8d  000068a1  2**0
                  ALLOC
245 .progmemx.data.READ_DATA_CMD 00000002  00000772  00000772  000008c6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
246 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000765  00000765  000008b9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
247 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  0000076a  0000076a  000008be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
248 .text.parse_cmd 00000030  00005c6e  00005c6e  00005dc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.validate_cmd 00000056  00004a36  00004a36  00004b8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .progmemx.data 000000ac  000003ec  000003ec  00000540  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
251 .text.CONF_enter 00000138  0000235c  0000235c  000024b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 .progmemx.data 00000081  000005d2  000005d2  00000726  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
253 .text.CON_RN2483_parse 0000006c  000044f8  000044f8  0000464c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
254 .text.CON_RN2483 00000176  00001f44  00001f44  00002098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
255 .text.CONNECT 00000054  00004ae0  00004ae0  00004c34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 .progmemx.data 00000188  00000264  00000264  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
257 .text.read_cols 000000bc  000034b2  000034b2  00003606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
258 .text.read_time 00000092  00003dc6  00003dc6  00003f1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
259 .text.write_deveui 00000078  000040e2  000040e2  00004236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
260 .text.write_appeui 00000078  0000415a  0000415a  000042ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
261 .text.write_appkey 00000078  000041d2  000041d2  00004326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 .text.write_PPM_factor 0000004c  00004df6  00004df6  00004f4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 .text.write_RRL 0000004c  00004e42  00004e42  00004f96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
264 .text.write_VCC 0000004c  00004e8e  00004e8e  00004fe2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.get_time_par 00000034  0000598e  0000598e  00005ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .text.write_cols 0000012e  00002494  00002494  000025e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
267 .text.write_heat_up 0000004c  00004eda  00004eda  0000502e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .text.write_air_pump 00000050  00004bd6  00004bd6  00004d2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 .text.write_sp_interval 0000004c  00004f26  00004f26  0000507a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.write_reset 000000e2  00002ef4  00002ef4  00003048  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.write_time 000000fe  00002b1e  00002b1e  00002c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .text.handle_read 000002a2  00001734  00001734  00001888  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 .text.handle_write 00000200  000019d6  000019d6  00001b2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .bss.arg      00000050  00800e80  00800e80  000068a1  2**0
                  ALLOC
275 .progmemx.data 000000ab  00000498  00000498  000005ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
276 .text.handle_methane 0000011a  000027fe  000027fe  00002952  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.handle_co2 000000a4  000038e6  000038e6  00003a3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.handle_pump 000000a4  0000398a  0000398a  00003ade  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.handle_sample 000000b8  0000362a  0000362a  0000377e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.init_methane_SCD30 00000028  00005dfc  00005dfc  00005f50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .bss.par      00000014  00800f14  00800f14  000068a1  2**0
                  ALLOC
282 .text.count_parameters 00000052  00004b34  00004b34  00004c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
283 .text.par_index 00000070  0000441a  0000441a  0000456e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 .text.get_parameter 00000096  00003c9e  00003c9e  00003df2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.decode_stage_response 00000016  000062ae  000062ae  00006402  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.decode_join_response 0000001c  000061a2  000061a2  000062f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.decode_header_tail_response 0000001e  000060bc  000060bc  00006210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .text.read_eeprom 0000005a  000048d6  000048d6  00004a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
289 .text.join_lora 00000012  000063c6  000063c6  0000651a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .text.set_wakeup 0000000a  00006666  00006666  000067ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .text.send_header 0000003e  000054e0  000054e0  00005634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 .text.stage_0 000000c0  000033f2  000033f2  00003546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
293 .text.stage_1 000000ec  00002e08  00002e08  00002f5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.stage_2 00000106  00002918  00002918  00002a6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.stage_3 000000f4  00002d14  00002d14  00002e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 .text.send_body 00000040  000054a0  000054a0  000055f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 .text.decode_body_response 00000028  00005e24  00005e24  00005f78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 .text.send_tail 0000003e  0000551e  0000551e  00005672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
299 .text.send_msg 00000018  0000623c  0000623c  00006390  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 .progmemx.data 0000008f  00000543  00000543  00000697  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
301 .text.MAINPG_start 000002fa  00000eba  00000eba  0000100e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 .bss.samplingProcessInterval 00000001  00800fa5  00800fa5  000068a1  2**0
                  ALLOC
303 .data.methHeatUpTime 00000001  00800fa6  00000775  000008c9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
304 .data.airPumpTime 00000002  00800f8f  00006749  0000689d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
305 .bss.ppmx     00000004  00800f6b  00800f6b  000068a1  2**0
                  ALLOC
306 .bss.rrlx     00000004  00800f6f  00800f6f  000068a1  2**0
                  ALLOC
307 .bss.vccx     00000004  00800f73  00800f73  000068a1  2**0
                  ALLOC
308 .bss.cols     00000023  00800ed0  00800ed0  000068a1  2**0
                  ALLOC
309 .bss.appkey   00000021  00800ef3  00800ef3  000068a1  2**0
                  ALLOC
310 .bss.appeui   00000011  00800f28  00800f28  000068a1  2**0
                  ALLOC
311 .bss.deveui   00000011  00800f39  00800f39  000068a1  2**0
                  ALLOC
312 .bss.dt       00000006  00800f54  00800f54  000068a1  2**0
                  ALLOC
313 .bss.ts       00000004  00800f77  00800f77  000068a1  2**0
                  ALLOC
314 .bss.meth_data 00000258  00800872  00800872  000068a1  2**0
                  ALLOC
315 .bss.co2_data 00000258  00800aca  00800aca  000068a1  2**0
                  ALLOC
316 .data.bodyIndex 00000002  00800f91  0000674b  0000689f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
317 .bss.state_s3 00000001  00800fa7  00800fa7  000068a1  2**0
                  ALLOC
318 .bss.state_s2 00000001  00800fa8  00800fa8  000068a1  2**0
                  ALLOC
319 .bss.state_s1 00000001  00800fa9  00800fa9  000068a1  2**0
                  ALLOC
320 .bss.state_s0 00000001  00800faa  00800faa  000068a1  2**0
                  ALLOC
321 .text.calc_crc8 00000036  00005884  00005884  000059d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
322 .text.get_decimal 000000b4  000036e2  000036e2  00003836  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
323 .text.str2flaot 0000004e  00004d10  00004d10  00004e64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
324 .text.is_float 00000058  00004988  00004988  00004adc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
325 .text.avrlibc.fplib 0000000e  0000650c  0000650c  00006660  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
326 .text.avrlibc.fplib 000000ce  00003260  00003260  000033b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
327 .text.avrlibc.fplib 00000008  000066ca  000066ca  0000681e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
328 .text.avrlibc.fplib 000000de  00002fd6  00002fd6  0000312a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
329 .text.avrlibc.fplib 0000005e  000047c2  000047c2  00004916  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
330 .text.avrlibc.fplib 0000007a  00004068  00004068  000041bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
331 .text.avrlibc.fplib 0000000c  000065f2  000065f2  00006746  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
332 .text.avrlibc.fplib 00000006  00006724  00006724  00006878  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
333 .text.avrlibc.fplib 0000000e  0000651a  0000651a  0000666e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
334 .text.avrlibc.fplib 0000000e  00006528  00006528  0000667c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
335 .text.avrlibc.fplib 00000022  00005f62  00005f62  000060b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
336 .text.avrlibc.fplib 00000044  000052ce  000052ce  00005422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
337 .text.avrlibc.fplib 0000000e  00006536  00006536  0000668a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
338 .text.avrlibc.fplib 00000008  000066d2  000066d2  00006826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
339 .text.avrlibc.fplib 000000d4  0000318c  0000318c  000032e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
340 .progmemx.data 00000008  00000756  00000756  000008aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
341 .text.avrlibc 00000744  00000776  00000776  000008ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
342 .text.libgcc  0000000c  000065fe  000065fe  00006752  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
343 .text.libgcc.mul 0000001e  000060da  000060da  0000622e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text.libgcc.prologue 00000038  00005816  00005816  0000596a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 .text.libgcc.prologue 00000036  000058ba  000058ba  00005a0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 .text.avrlibc 00000008  000066da  000066da  0000682e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 .text.avrlibc 0000000e  00006544  00006544  00006698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .text.avrlibc 000002dc  000011b4  000011b4  00001308  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
349 .text.avrlibc 000001b0  00001d94  00001d94  00001ee8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
350 .text.avrlibc 00000012  000063d8  000063d8  0000652c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 .text.avrlibc 00000032  00005abc  00005abc  00005c10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
352 .text.avrlibc 0000002e  00005d28  00005d28  00005e7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
353 .text.avrlibc 00000042  0000541e  0000541e  00005572  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
354 .text.avrlibc 0000006a  00004564  00004564  000046b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
355 .text.avrlibc 0000002c  00005d56  00005d56  00005eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
356 .text.avrlibc 0000001e  000060f8  000060f8  0000624c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 .text.avrlibc 00000036  000058f0  000058f0  00005a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
358 .text.avrlibc 00000078  0000424a  0000424a  0000439e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 .text.avrlibc 00000046  00005288  00005288  000053dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
360 .text.avrlibc 000000bc  0000356e  0000356e  000036c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
361 .text.avrlibc 00000006  0000672a  0000672a  0000687e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 .text.avrlibc 00000024  00005e70  00005e70  00005fc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
363 .text.avrlibc 00000012  000063ea  000063ea  0000653e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
364 .text.avrlibc 0000000e  00006552  00006552  000066a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
365 .text.avrlibc 0000000e  00006560  00006560  000066b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
366 .text.avrlibc 00000044  00005312  00005312  00005466  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
367 .text.avrlibc 00000024  00005e94  00005e94  00005fe8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
368 .text.avrlibc 00000018  00006254  00006254  000063a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
369 .text.avrlibc 0000000c  0000660a  0000660a  0000675e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 .text.libgcc.mul 00000020  00006024  00006024  00006178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
371 .text.libgcc.div 00000044  00005356  00005356  000054aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
372 .text.libgcc.mul 00000016  000062c4  000062c4  00006418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
373 .text.libgcc  0000000a  00006670  00006670  000067c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 08 01 	jmp	0x210	; 0x210 <__ctors_end>
   4:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
   8:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
   c:	0c 94 9f 31 	jmp	0x633e	; 0x633e <__vector_3>
  10:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  14:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  18:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  1c:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  20:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  24:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <__vector_9>
  28:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  2c:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  30:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  34:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__vector_13>
  38:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  3c:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  40:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__vector_16>
  44:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  48:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  4c:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  50:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__vector_20>
  54:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  58:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <__vector_22>
  5c:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  60:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  64:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  68:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  6c:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  70:	0c 94 9b 21 	jmp	0x4336	; 0x4336 <__vector_28>
  74:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__bad_interrupt>
  78:	0c 94 de 27 	jmp	0x4fbc	; 0x4fbc <__vector_30>
  7c:	66 0a       	sbc	r6, r22
  7e:	76 0b       	sbc	r23, r22
  80:	85 0a       	sbc	r8, r21
  82:	a3 0a       	sbc	r10, r19
  84:	c3 0a       	sbc	r12, r19
  86:	e3 0a       	sbc	r14, r19
  88:	03 0b       	sbc	r16, r19
  8a:	23 0b       	sbc	r18, r19
  8c:	41 0b       	sbc	r20, r17
  8e:	5f 0b       	sbc	r21, r31
  90:	71 0b       	sbc	r23, r17
  92:	87 0b       	sbc	r24, r23
  94:	89 0b       	sbc	r24, r25
  96:	c9 11       	cpse	r28, r9
  98:	de 11       	cpse	r29, r14
  9a:	3a 12       	cpse	r3, r26
  9c:	e7 11       	cpse	r30, r7
  9e:	43 12       	cpse	r4, r19
  a0:	2c 12       	cpse	r2, r28
  a2:	33 12       	cpse	r3, r19
  a4:	f7 11       	cpse	r31, r7
  a6:	03 12       	cpse	r0, r19
  a8:	0f 12       	cpse	r0, r31
  aa:	19 12       	cpse	r1, r25
  ac:	25 12       	cpse	r2, r21
  ae:	b4 0f       	add	r27, r20
  b0:	c1 0f       	add	r28, r17
  b2:	cb 0f       	add	r28, r27
  b4:	d1 0f       	add	r29, r17
  b6:	00 10       	cpse	r0, r0
  b8:	33 10       	cpse	r3, r3
  ba:	4c 10       	cpse	r4, r12
  bc:	8a 07       	cpc	r24, r26
  be:	a4 07       	cpc	r26, r20
  c0:	b9 07       	cpc	r27, r25
  c2:	ca 07       	cpc	r28, r26
  c4:	d9 07       	cpc	r29, r25
  c6:	bb 08       	sbc	r11, r11
  c8:	ce 07       	cpc	r28, r30
  ca:	0b 08       	sbc	r0, r11
  cc:	22 08       	sbc	r2, r2
  ce:	17 08       	sbc	r1, r7
  d0:	eb 07       	cpc	r30, r27
  d2:	2d 08       	sbc	r2, r13
  d4:	39 08       	sbc	r3, r9
  d6:	46 08       	sbc	r4, r6
  d8:	4e 08       	sbc	r4, r14
  da:	56 08       	sbc	r5, r6
  dc:	5e 08       	sbc	r5, r14
  de:	66 08       	sbc	r6, r6
  e0:	82 08       	sbc	r8, r2
  e2:	89 08       	sbc	r8, r9
  e4:	96 08       	sbc	r9, r6
  e6:	ad 08       	sbc	r10, r13
  e8:	c4 08       	sbc	r12, r4
  ea:	cd 08       	sbc	r12, r13

000000ec <.dinit>:
  ec:	01 00       	.word	0x0001	; ????
  ee:	0f 5a       	subi	r16, 0xAF	; 175
  f0:	80 0f       	add	r24, r16
  f2:	5a 0f       	add	r21, r26
  f4:	6b 00       	.word	0x006b	; ????
  f6:	67 38       	cpi	r22, 0x87	; 135
  f8:	0f 6b       	ori	r16, 0xBF	; 191
  fa:	0f 8f       	std	Y+31, r16	; 0x1f
  fc:	80 0f       	add	r24, r16
  fe:	8f 0f       	add	r24, r31
 100:	93 00       	.word	0x0093	; ????
 102:	67 49       	sbci	r22, 0x97	; 151
 104:	0f 93       	push	r16
 106:	0f a6       	std	Y+47, r0	; 0x2f
 108:	80 0f       	add	r24, r16
 10a:	a6 0f       	add	r26, r22
 10c:	a7 00       	.word	0x00a7	; ????
 10e:	07 75       	andi	r16, 0x57	; 87
 110:	0f a7       	std	Y+47, r16	; 0x2f
 112:	0f ab       	std	Y+55, r16	; 0x37
 114:	80 00       	.word	0x0080	; ????

00000116 <__trampolines_end>:
 116:	00 40       	sbci	r16, 0x00	; 0
 118:	7a 10       	cpse	r7, r10
 11a:	f3 5a       	subi	r31, 0xA3	; 163
 11c:	00 a0       	ldd	r0, Z+32	; 0x20
 11e:	72 4e       	sbci	r23, 0xE2	; 226
 120:	18 09       	sbc	r17, r8
 122:	00 10       	cpse	r0, r0
 124:	a5 d4       	rcall	.+2378   	; 0xa70 <__EEPROM_REGION_LENGTH__+0x270>
 126:	e8 00       	.word	0x00e8	; ????
 128:	00 e8       	ldi	r16, 0x80	; 128
 12a:	76 48       	sbci	r23, 0x86	; 134
 12c:	17 00       	.word	0x0017	; ????
 12e:	00 e4       	ldi	r16, 0x40	; 64
 130:	0b 54       	subi	r16, 0x4B	; 75
 132:	02 00       	.word	0x0002	; ????
 134:	00 ca       	rjmp	.-3072   	; 0xfffff536 <__eeprom_end+0xff7ef536>
 136:	9a 3b       	cpi	r25, 0xBA	; 186
 138:	00 00       	nop
 13a:	00 e1       	ldi	r16, 0x10	; 16
 13c:	f5 05       	cpc	r31, r5
 13e:	00 00       	nop
 140:	80 96       	adiw	r24, 0x20	; 32
 142:	98 00       	.word	0x0098	; ????
 144:	00 00       	nop
 146:	40 42       	sbci	r20, 0x20	; 32
 148:	0f 00       	.word	0x000f	; ????
 14a:	00 00       	nop
 14c:	a0 86       	std	Z+8, r10	; 0x08
 14e:	01 00       	.word	0x0001	; ????
 150:	00 00       	nop
 152:	10 27       	eor	r17, r16
 154:	00 00       	nop
 156:	00 00       	nop
 158:	e8 03       	fmulsu	r22, r16
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	64 00       	.word	0x0064	; ????
 160:	00 00       	nop
 162:	00 00       	nop
 164:	0a 00       	.word	0x000a	; ????
 166:	00 00       	nop
 168:	00 00       	nop
 16a:	01 00       	.word	0x0001	; ????
 16c:	00 00       	nop
 16e:	00 00       	nop
 170:	2c 76       	andi	r18, 0x6C	; 108
 172:	d8 88       	ldd	r13, Y+16	; 0x10
 174:	dc 67       	ori	r29, 0x7C	; 124
 176:	4f 08       	sbc	r4, r15
 178:	23 df       	rcall	.-442    	; 0xffffffc0 <__eeprom_end+0xff7effc0>
 17a:	c1 df       	rcall	.-126    	; 0xfe <.dinit+0x12>
 17c:	ae 59       	subi	r26, 0x9E	; 158
 17e:	e1 b1       	in	r30, 0x01	; 1
 180:	b7 96       	adiw	r30, 0x27	; 39
 182:	e5 e3       	ldi	r30, 0x35	; 53
 184:	e4 53       	subi	r30, 0x34	; 52
 186:	c6 3a       	cpi	r28, 0xA6	; 166
 188:	e6 51       	subi	r30, 0x16	; 22
 18a:	99 76       	andi	r25, 0x69	; 105
 18c:	96 e8       	ldi	r25, 0x86	; 134
 18e:	e6 c2       	rjmp	.+1484   	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 190:	84 26       	eor	r8, r20
 192:	eb 89       	ldd	r30, Y+19	; 0x13
 194:	8c 9b       	sbis	0x11, 4	; 17
 196:	62 ed       	ldi	r22, 0xD2	; 210
 198:	40 7c       	andi	r20, 0xC0	; 192
 19a:	6f fc       	.word	0xfc6f	; ????
 19c:	ef bc       	out	0x2f, r14	; 47
 19e:	9c 9f       	mul	r25, r28
 1a0:	40 f2       	brcs	.-112    	; 0x132 <__trampolines_end+0x1c>
 1a2:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a4:	6f a5       	ldd	r22, Y+47	; 0x2f
 1a6:	f4 90       	lpm	r15, Z
 1a8:	05 5a       	subi	r16, 0xA5	; 165
 1aa:	2a f7       	brpl	.-54     	; 0x176 <__trampolines_end+0x60>
 1ac:	5c 93       	st	X, r21
 1ae:	6b 6c       	ori	r22, 0xCB	; 203
 1b0:	f9 67       	ori	r31, 0x79	; 121
 1b2:	6d c1       	rjmp	.+730    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 1b4:	1b fc       	.word	0xfc1b	; ????
 1b6:	e0 e4       	ldi	r30, 0x40	; 64
 1b8:	0d 47       	sbci	r16, 0x7D	; 125
 1ba:	fe f5       	brtc	.+126    	; 0x23a <__do_copy_data+0x1e>
 1bc:	20 e6       	ldi	r18, 0x60	; 96
 1be:	b5 00       	.word	0x00b5	; ????
 1c0:	d0 ed       	ldi	r29, 0xD0	; 208
 1c2:	90 2e       	mov	r9, r16
 1c4:	03 00       	.word	0x0003	; ????
 1c6:	94 35       	cpi	r25, 0x54	; 84
 1c8:	77 05       	cpc	r23, r7
 1ca:	00 80       	ld	r0, Z
 1cc:	84 1e       	adc	r8, r20
 1ce:	08 00       	.word	0x0008	; ????
 1d0:	00 20       	and	r0, r0
 1d2:	4e 0a       	sbc	r4, r30
 1d4:	00 00       	nop
 1d6:	00 c8       	rjmp	.-4096   	; 0xfffff1d8 <__eeprom_end+0xff7ef1d8>
 1d8:	0c 33       	cpi	r16, 0x3C	; 60
 1da:	33 33       	cpi	r19, 0x33	; 51
 1dc:	33 0f       	add	r19, r19
 1de:	98 6e       	ori	r25, 0xE8	; 232
 1e0:	12 83       	std	Z+2, r17	; 0x02
 1e2:	11 41       	sbci	r17, 0x11	; 17
 1e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1e6:	21 14       	cp	r2, r1
 1e8:	89 3b       	cpi	r24, 0xB9	; 185
 1ea:	e6 55       	subi	r30, 0x56	; 86
 1ec:	16 cf       	rjmp	.-468    	; 0x1a <__FUSE_REGION_LENGTH__+0x17>
 1ee:	fe e6       	ldi	r31, 0x6E	; 110
 1f0:	db 18       	sub	r13, r11
 1f2:	d1 84       	ldd	r13, Z+9	; 0x09
 1f4:	4b 38       	cpi	r20, 0x8B	; 139
 1f6:	1b f7       	brvc	.-58     	; 0x1be <__trampolines_end+0xa8>
 1f8:	7c 1d       	adc	r23, r12
 1fa:	90 1d       	adc	r25, r0
 1fc:	a4 bb       	out	0x14, r26	; 20
 1fe:	e4 24       	eor	r14, r4
 200:	20 32       	cpi	r18, 0x20	; 32
 202:	84 72       	andi	r24, 0x24	; 36
 204:	5e 22       	and	r5, r30
 206:	81 00       	.word	0x0081	; ????
 208:	c9 f1       	breq	.+114    	; 0x27c <_etext+0x18>
 20a:	24 ec       	ldi	r18, 0xC4	; 196
 20c:	a1 e5       	ldi	r26, 0x51	; 81
 20e:	3d 27       	eor	r19, r29

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d0 e1       	ldi	r29, 0x10	; 16
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61

0000021c <__do_copy_data>:
 21c:	ec ee       	ldi	r30, 0xEC	; 236
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	17 c0       	rjmp	.+46     	; 0x252 <__do_clear_bss+0x8>
 224:	b5 91       	lpm	r27, Z+
 226:	a5 91       	lpm	r26, Z+
 228:	35 91       	lpm	r19, Z+
 22a:	25 91       	lpm	r18, Z+
 22c:	05 91       	lpm	r16, Z+
 22e:	07 fd       	sbrc	r16, 7
 230:	0c c0       	rjmp	.+24     	; 0x24a <__do_clear_bss>
 232:	95 91       	lpm	r25, Z+
 234:	85 91       	lpm	r24, Z+
 236:	ef 01       	movw	r28, r30
 238:	f9 2f       	mov	r31, r25
 23a:	e8 2f       	mov	r30, r24
 23c:	05 90       	lpm	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	a2 17       	cp	r26, r18
 242:	b3 07       	cpc	r27, r19
 244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x20>
 246:	fe 01       	movw	r30, r28
 248:	04 c0       	rjmp	.+8      	; 0x252 <__do_clear_bss+0x8>

0000024a <__do_clear_bss>:
 24a:	1d 92       	st	X+, r1
 24c:	a2 17       	cp	r26, r18
 24e:	b3 07       	cpc	r27, r19
 250:	e1 f7       	brne	.-8      	; 0x24a <__do_clear_bss>
 252:	e5 31       	cpi	r30, 0x15	; 21
 254:	f4 07       	cpc	r31, r20
 256:	31 f7       	brne	.-52     	; 0x224 <__do_copy_data+0x8>
 258:	0e 94 43 2b 	call	0x5686	; 0x5686 <main>
 25c:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>

Disassembly of section .text:

00006730 <__bad_interrupt>:
    6730:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

0000642c <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    642c:	81 b1       	in	r24, 0x01	; 1
    642e:	88 60       	ori	r24, 0x08	; 8
    6430:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    6432:	82 b1       	in	r24, 0x02	; 2
    6434:	87 7f       	andi	r24, 0xF7	; 247
    6436:	82 b9       	out	0x02, r24	; 2
    6438:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

000062da <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    62da:	88 23       	and	r24, r24
    62dc:	21 f0       	breq	.+8      	; 0x62e6 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    62de:	82 b1       	in	r24, 0x02	; 2
    62e0:	88 60       	ori	r24, 0x08	; 8
    62e2:	82 b9       	out	0x02, r24	; 2
    62e4:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    62e6:	82 b1       	in	r24, 0x02	; 2
    62e8:	87 7f       	andi	r24, 0xF7	; 247
    62ea:	82 b9       	out	0x02, r24	; 2
    62ec:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

0000643a <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    643a:	81 b1       	in	r24, 0x01	; 1
    643c:	80 62       	ori	r24, 0x20	; 32
    643e:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    6440:	82 b1       	in	r24, 0x02	; 2
    6442:	8f 7d       	andi	r24, 0xDF	; 223
    6444:	82 b9       	out	0x02, r24	; 2
    6446:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

000062ee <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    62ee:	88 23       	and	r24, r24
    62f0:	21 f0       	breq	.+8      	; 0x62fa <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    62f2:	82 b1       	in	r24, 0x02	; 2
    62f4:	80 62       	ori	r24, 0x20	; 32
    62f6:	82 b9       	out	0x02, r24	; 2
    62f8:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    62fa:	82 b1       	in	r24, 0x02	; 2
    62fc:	8f 7d       	andi	r24, 0xDF	; 223
    62fe:	82 b9       	out	0x02, r24	; 2
    6300:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00006448 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    6448:	81 b1       	in	r24, 0x01	; 1
    644a:	80 61       	ori	r24, 0x10	; 16
    644c:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    644e:	82 b1       	in	r24, 0x02	; 2
    6450:	8f 7e       	andi	r24, 0xEF	; 239
    6452:	82 b9       	out	0x02, r24	; 2
    6454:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00006302 <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    6302:	88 23       	and	r24, r24
    6304:	21 f0       	breq	.+8      	; 0x630e <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    6306:	82 b1       	in	r24, 0x02	; 2
    6308:	80 61       	ori	r24, 0x10	; 16
    630a:	82 b9       	out	0x02, r24	; 2
    630c:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    630e:	82 b1       	in	r24, 0x02	; 2
    6310:	8f 7e       	andi	r24, 0xEF	; 239
    6312:	82 b9       	out	0x02, r24	; 2
    6314:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00006456 <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    6456:	8a b1       	in	r24, 0x0a	; 10
    6458:	80 61       	ori	r24, 0x10	; 16
    645a:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    645c:	8b b1       	in	r24, 0x0b	; 11
    645e:	8f 7e       	andi	r24, 0xEF	; 239
    6460:	8b b9       	out	0x0b, r24	; 11
    6462:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00006316 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    6316:	88 23       	and	r24, r24
    6318:	21 f0       	breq	.+8      	; 0x6322 <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    631a:	8b b1       	in	r24, 0x0b	; 11
    631c:	80 61       	ori	r24, 0x10	; 16
    631e:	8b b9       	out	0x0b, r24	; 11
    6320:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    6322:	8b b1       	in	r24, 0x0b	; 11
    6324:	8f 7e       	andi	r24, 0xEF	; 239
    6326:	8b b9       	out	0x0b, r24	; 11
    6328:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

00006464 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    6464:	81 b1       	in	r24, 0x01	; 1
    6466:	80 68       	ori	r24, 0x80	; 128
    6468:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    646a:	82 b1       	in	r24, 0x02	; 2
    646c:	8f 77       	andi	r24, 0x7F	; 127
    646e:	82 b9       	out	0x02, r24	; 2
    6470:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

0000632a <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    632a:	88 23       	and	r24, r24
    632c:	21 f0       	breq	.+8      	; 0x6336 <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    632e:	82 b1       	in	r24, 0x02	; 2
    6330:	80 68       	ori	r24, 0x80	; 128
    6332:	82 b9       	out	0x02, r24	; 2
    6334:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    6336:	82 b1       	in	r24, 0x02	; 2
    6338:	8f 77       	andi	r24, 0x7F	; 127
    633a:	82 b9       	out	0x02, r24	; 2
    633c:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

0000667a <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    667a:	82 b1       	in	r24, 0x02	; 2
    667c:	80 58       	subi	r24, 0x80	; 128
    667e:	82 b9       	out	0x02, r24	; 2
    6680:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

0000555c <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    555c:	84 b1       	in	r24, 0x04	; 4
    555e:	8b 7f       	andi	r24, 0xFB	; 251
    5560:	84 b9       	out	0x04, r24	; 4
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    5562:	e9 e6       	ldi	r30, 0x69	; 105
    5564:	f0 e0       	ldi	r31, 0x00	; 0
    5566:	80 81       	ld	r24, Z
    5568:	8f 7e       	andi	r24, 0xEF	; 239
    556a:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    556c:	80 81       	ld	r24, Z
    556e:	80 62       	ori	r24, 0x20	; 32
    5570:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    5572:	8d b3       	in	r24, 0x1d	; 29
    5574:	84 60       	ori	r24, 0x04	; 4
    5576:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    5578:	83 b7       	in	r24, 0x33	; 51
    557a:	81 7f       	andi	r24, 0xF1	; 241
    557c:	84 60       	ori	r24, 0x04	; 4
    557e:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    5580:	83 b7       	in	r24, 0x33	; 51
    5582:	81 60       	ori	r24, 0x01	; 1
    5584:	83 bf       	out	0x33, r24	; 51
	sei();
    5586:	78 94       	sei
	sleep_cpu();
    5588:	88 95       	sleep
	sleep_disable();
    558a:	83 b7       	in	r24, 0x33	; 51
    558c:	8e 7f       	andi	r24, 0xFE	; 254
    558e:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    5590:	8d b3       	in	r24, 0x1d	; 29
    5592:	8b 7f       	andi	r24, 0xFB	; 251
    5594:	8d bb       	out	0x1d, r24	; 29
    5596:	08 95       	ret

Disassembly of section .text.__vector_3:

0000633e <__vector_3>:
}

ISR(INT2_vect){
    633e:	1f 92       	push	r1
    6340:	0f 92       	push	r0
    6342:	0f b6       	in	r0, 0x3f	; 63
    6344:	0f 92       	push	r0
    6346:	11 24       	eor	r1, r1
	
}
    6348:	0f 90       	pop	r0
    634a:	0f be       	out	0x3f, r0	; 63
    634c:	0f 90       	pop	r0
    634e:	1f 90       	pop	r1
    6350:	18 95       	reti

Disassembly of section .text.rn2483_init:

00006682 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    6682:	84 b1       	in	r24, 0x04	; 4
    6684:	80 61       	ori	r24, 0x10	; 16
    6686:	84 b9       	out	0x04, r24	; 4
    6688:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

0000668a <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    668a:	85 b1       	in	r24, 0x05	; 5
    668c:	8f 7e       	andi	r24, 0xEF	; 239
    668e:	85 b9       	out	0x05, r24	; 5
    6690:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00006692 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    6692:	85 b1       	in	r24, 0x05	; 5
    6694:	80 61       	ori	r24, 0x10	; 16
    6696:	85 b9       	out	0x05, r24	; 5
    6698:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00006472 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    6472:	87 b1       	in	r24, 0x07	; 7
    6474:	8f 7b       	andi	r24, 0xBF	; 191
    6476:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    6478:	88 b1       	in	r24, 0x08	; 8
    647a:	8f 7b       	andi	r24, 0xBF	; 191
    647c:	88 b9       	out	0x08, r24	; 8
    647e:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00006616 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    6616:	86 b1       	in	r24, 0x06	; 6
    6618:	86 fb       	bst	r24, 6
    661a:	88 27       	eor	r24, r24
    661c:	80 f9       	bld	r24, 0
    661e:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00005f84 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    5f84:	92 e0       	ldi	r25, 0x02	; 2
    5f86:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    5f88:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    5f8a:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    5f8c:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    5f8e:	ee e6       	ldi	r30, 0x6E	; 110
    5f90:	f0 e0       	ldi	r31, 0x00	; 0
    5f92:	80 81       	ld	r24, Z
    5f94:	82 60       	ori	r24, 0x02	; 2
    5f96:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    5f98:	78 94       	sei
	
	//Set callback
	_cb=cb;
    5f9a:	70 93 7c 0f 	sts	0x0F7C, r23	; 0x800f7c <_cb+0x1>
    5f9e:	60 93 7b 0f 	sts	0x0F7B, r22	; 0x800f7b <_cb>
    5fa2:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

000066e2 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    66e2:	86 e0       	ldi	r24, 0x06	; 6
    66e4:	85 bd       	out	0x25, r24	; 37
    66e6:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

00006734 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    6734:	15 bc       	out	0x25, r1	; 37
    6736:	08 95       	ret

Disassembly of section .text.__vector_16:

00004c26 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    4c26:	1f 92       	push	r1
    4c28:	0f 92       	push	r0
    4c2a:	0f b6       	in	r0, 0x3f	; 63
    4c2c:	0f 92       	push	r0
    4c2e:	11 24       	eor	r1, r1
    4c30:	2f 93       	push	r18
    4c32:	3f 93       	push	r19
    4c34:	4f 93       	push	r20
    4c36:	5f 93       	push	r21
    4c38:	6f 93       	push	r22
    4c3a:	7f 93       	push	r23
    4c3c:	8f 93       	push	r24
    4c3e:	9f 93       	push	r25
    4c40:	af 93       	push	r26
    4c42:	bf 93       	push	r27
    4c44:	ef 93       	push	r30
    4c46:	ff 93       	push	r31
	_cb();
    4c48:	e0 91 7b 0f 	lds	r30, 0x0F7B	; 0x800f7b <_cb>
    4c4c:	f0 91 7c 0f 	lds	r31, 0x0F7C	; 0x800f7c <_cb+0x1>
    4c50:	09 95       	icall
}
    4c52:	ff 91       	pop	r31
    4c54:	ef 91       	pop	r30
    4c56:	bf 91       	pop	r27
    4c58:	af 91       	pop	r26
    4c5a:	9f 91       	pop	r25
    4c5c:	8f 91       	pop	r24
    4c5e:	7f 91       	pop	r23
    4c60:	6f 91       	pop	r22
    4c62:	5f 91       	pop	r21
    4c64:	4f 91       	pop	r20
    4c66:	3f 91       	pop	r19
    4c68:	2f 91       	pop	r18
    4c6a:	0f 90       	pop	r0
    4c6c:	0f be       	out	0x3f, r0	; 63
    4c6e:	0f 90       	pop	r0
    4c70:	1f 90       	pop	r1
    4c72:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00005926 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    5926:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    592a:	28 e0       	ldi	r18, 0x08	; 8
    592c:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    5930:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    5934:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    5938:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    593c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    5940:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    5944:	ef e6       	ldi	r30, 0x6F	; 111
    5946:	f0 e0       	ldi	r31, 0x00	; 0
    5948:	80 81       	ld	r24, Z
    594a:	82 60       	ori	r24, 0x02	; 2
    594c:	80 83       	st	Z, r24
	sei();
    594e:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    5950:	70 93 7e 0f 	sts	0x0F7E, r23	; 0x800f7e <_cb+0x1>
    5954:	60 93 7d 0f 	sts	0x0F7D, r22	; 0x800f7d <_cb>
    5958:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

0000656e <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    656e:	e1 e8       	ldi	r30, 0x81	; 129
    6570:	f0 e0       	ldi	r31, 0x00	; 0
    6572:	80 81       	ld	r24, Z
    6574:	86 60       	ori	r24, 0x06	; 6
    6576:	80 83       	st	Z, r24
    6578:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

0000657a <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    657a:	e1 e8       	ldi	r30, 0x81	; 129
    657c:	f0 e0       	ldi	r31, 0x00	; 0
    657e:	80 81       	ld	r24, Z
    6580:	88 7f       	andi	r24, 0xF8	; 248
    6582:	80 83       	st	Z, r24
    6584:	08 95       	ret

Disassembly of section .text.__vector_13:

00004c74 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    4c74:	1f 92       	push	r1
    4c76:	0f 92       	push	r0
    4c78:	0f b6       	in	r0, 0x3f	; 63
    4c7a:	0f 92       	push	r0
    4c7c:	11 24       	eor	r1, r1
    4c7e:	2f 93       	push	r18
    4c80:	3f 93       	push	r19
    4c82:	4f 93       	push	r20
    4c84:	5f 93       	push	r21
    4c86:	6f 93       	push	r22
    4c88:	7f 93       	push	r23
    4c8a:	8f 93       	push	r24
    4c8c:	9f 93       	push	r25
    4c8e:	af 93       	push	r26
    4c90:	bf 93       	push	r27
    4c92:	ef 93       	push	r30
    4c94:	ff 93       	push	r31
	_cb();
    4c96:	e0 91 7d 0f 	lds	r30, 0x0F7D	; 0x800f7d <_cb>
    4c9a:	f0 91 7e 0f 	lds	r31, 0x0F7E	; 0x800f7e <_cb+0x1>
    4c9e:	09 95       	icall
    4ca0:	ff 91       	pop	r31
    4ca2:	ef 91       	pop	r30
    4ca4:	bf 91       	pop	r27
    4ca6:	af 91       	pop	r26
    4ca8:	9f 91       	pop	r25
    4caa:	8f 91       	pop	r24
    4cac:	7f 91       	pop	r23
    4cae:	6f 91       	pop	r22
    4cb0:	5f 91       	pop	r21
    4cb2:	4f 91       	pop	r20
    4cb4:	3f 91       	pop	r19
    4cb6:	2f 91       	pop	r18
    4cb8:	0f 90       	pop	r0
    4cba:	0f be       	out	0x3f, r0	; 63
    4cbc:	0f 90       	pop	r0
    4cbe:	1f 90       	pop	r1
    4cc0:	18 95       	reti

Disassembly of section .text.start_timer:

0000669a <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    669a:	87 e0       	ldi	r24, 0x07	; 7
    669c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    66a0:	08 95       	ret

Disassembly of section .text.stop_timer:

000066e8 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    66e8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    66ec:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00005fa4 <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    5fa4:	82 e0       	ldi	r24, 0x02	; 2
    5fa6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    5faa:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    5fae:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    5fb2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    5fb6:	93 ef       	ldi	r25, 0xF3	; 243
    5fb8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    5fbc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    5fc0:	78 94       	sei
    5fc2:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00004a8c <TC2_HAL_subscribe>:
    4a8c:	cf 93       	push	r28
    4a8e:	dc 01       	movw	r26, r24
    4a90:	60 91 94 0f 	lds	r22, 0x0F94	; 0x800f94 <cbCounter>
    4a94:	65 30       	cpi	r22, 0x05	; 5
    4a96:	00 f5       	brcc	.+64     	; 0x4ad8 <TC2_HAL_subscribe+0x4c>
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	15 c0       	rjmp	.+42     	; 0x4ac6 <TC2_HAL_subscribe+0x3a>
    4a9c:	29 2f       	mov	r18, r25
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	f9 01       	movw	r30, r18
    4aa2:	ee 0f       	add	r30, r30
    4aa4:	ff 1f       	adc	r31, r31
    4aa6:	e6 5b       	subi	r30, 0xB6	; 182
    4aa8:	f0 4f       	sbci	r31, 0xF0	; 240
    4aaa:	40 81       	ld	r20, Z
    4aac:	51 81       	ldd	r21, Z+1	; 0x01
    4aae:	45 2b       	or	r20, r21
    4ab0:	49 f4       	brne	.+18     	; 0x4ac4 <TC2_HAL_subscribe+0x38>
    4ab2:	22 0f       	add	r18, r18
    4ab4:	33 1f       	adc	r19, r19
    4ab6:	f9 01       	movw	r30, r18
    4ab8:	e6 5b       	subi	r30, 0xB6	; 182
    4aba:	f0 4f       	sbci	r31, 0xF0	; 240
    4abc:	b1 83       	std	Z+1, r27	; 0x01
    4abe:	a0 83       	st	Z, r26
    4ac0:	c9 2f       	mov	r28, r25
    4ac2:	04 c0       	rjmp	.+8      	; 0x4acc <TC2_HAL_subscribe+0x40>
    4ac4:	9f 5f       	subi	r25, 0xFF	; 255
    4ac6:	95 30       	cpi	r25, 0x05	; 5
    4ac8:	48 f3       	brcs	.-46     	; 0x4a9c <TC2_HAL_subscribe+0x10>
    4aca:	cf ef       	ldi	r28, 0xFF	; 255
    4acc:	6f 5f       	subi	r22, 0xFF	; 255
    4ace:	60 93 94 0f 	sts	0x0F94, r22	; 0x800f94 <cbCounter>
    4ad2:	0e 94 4d 33 	call	0x669a	; 0x669a <start_timer>
    4ad6:	01 c0       	rjmp	.+2      	; 0x4ada <TC2_HAL_subscribe+0x4e>
    4ad8:	cf ef       	ldi	r28, 0xFF	; 255
    4ada:	8c 2f       	mov	r24, r28
    4adc:	cf 91       	pop	r28
    4ade:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

0000564c <TC2_HAL_cancel>:
    564c:	08 2e       	mov	r0, r24
    564e:	00 0c       	add	r0, r0
    5650:	99 0b       	sbc	r25, r25
    5652:	fc 01       	movw	r30, r24
    5654:	ee 0f       	add	r30, r30
    5656:	ff 1f       	adc	r31, r31
    5658:	e6 5b       	subi	r30, 0xB6	; 182
    565a:	f0 4f       	sbci	r31, 0xF0	; 240
    565c:	20 81       	ld	r18, Z
    565e:	31 81       	ldd	r19, Z+1	; 0x01
    5660:	23 2b       	or	r18, r19
    5662:	81 f0       	breq	.+32     	; 0x5684 <TC2_HAL_cancel+0x38>
    5664:	88 0f       	add	r24, r24
    5666:	99 1f       	adc	r25, r25
    5668:	fc 01       	movw	r30, r24
    566a:	e6 5b       	subi	r30, 0xB6	; 182
    566c:	f0 4f       	sbci	r31, 0xF0	; 240
    566e:	11 82       	std	Z+1, r1	; 0x01
    5670:	10 82       	st	Z, r1
    5672:	80 91 94 0f 	lds	r24, 0x0F94	; 0x800f94 <cbCounter>
    5676:	81 50       	subi	r24, 0x01	; 1
    5678:	80 93 94 0f 	sts	0x0F94, r24	; 0x800f94 <cbCounter>
    567c:	81 11       	cpse	r24, r1
    567e:	02 c0       	rjmp	.+4      	; 0x5684 <TC2_HAL_cancel+0x38>
    5680:	0e 94 74 33 	call	0x66e8	; 0x66e8 <stop_timer>
    5684:	08 95       	ret

Disassembly of section .text.__vector_9:

00003fec <__vector_9>:
    3fec:	1f 92       	push	r1
    3fee:	0f 92       	push	r0
    3ff0:	0f b6       	in	r0, 0x3f	; 63
    3ff2:	0f 92       	push	r0
    3ff4:	11 24       	eor	r1, r1
    3ff6:	2f 93       	push	r18
    3ff8:	3f 93       	push	r19
    3ffa:	4f 93       	push	r20
    3ffc:	5f 93       	push	r21
    3ffe:	6f 93       	push	r22
    4000:	7f 93       	push	r23
    4002:	8f 93       	push	r24
    4004:	9f 93       	push	r25
    4006:	af 93       	push	r26
    4008:	bf 93       	push	r27
    400a:	cf 93       	push	r28
    400c:	ef 93       	push	r30
    400e:	ff 93       	push	r31
    4010:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <cnt>
    4014:	8f 5f       	subi	r24, 0xFF	; 255
    4016:	80 93 93 0f 	sts	0x0F93, r24	; 0x800f93 <cnt>
    401a:	80 32       	cpi	r24, 0x20	; 32
    401c:	99 f4       	brne	.+38     	; 0x4044 <__vector_9+0x58>
    401e:	10 92 93 0f 	sts	0x0F93, r1	; 0x800f93 <cnt>
    4022:	c0 e0       	ldi	r28, 0x00	; 0
    4024:	0d c0       	rjmp	.+26     	; 0x4040 <__vector_9+0x54>
    4026:	ec 2f       	mov	r30, r28
    4028:	f0 e0       	ldi	r31, 0x00	; 0
    402a:	ee 0f       	add	r30, r30
    402c:	ff 1f       	adc	r31, r31
    402e:	e6 5b       	subi	r30, 0xB6	; 182
    4030:	f0 4f       	sbci	r31, 0xF0	; 240
    4032:	01 90       	ld	r0, Z+
    4034:	f0 81       	ld	r31, Z
    4036:	e0 2d       	mov	r30, r0
    4038:	30 97       	sbiw	r30, 0x00	; 0
    403a:	09 f0       	breq	.+2      	; 0x403e <__vector_9+0x52>
    403c:	09 95       	icall
    403e:	cf 5f       	subi	r28, 0xFF	; 255
    4040:	c5 30       	cpi	r28, 0x05	; 5
    4042:	88 f3       	brcs	.-30     	; 0x4026 <__vector_9+0x3a>
    4044:	ff 91       	pop	r31
    4046:	ef 91       	pop	r30
    4048:	cf 91       	pop	r28
    404a:	bf 91       	pop	r27
    404c:	af 91       	pop	r26
    404e:	9f 91       	pop	r25
    4050:	8f 91       	pop	r24
    4052:	7f 91       	pop	r23
    4054:	6f 91       	pop	r22
    4056:	5f 91       	pop	r21
    4058:	4f 91       	pop	r20
    405a:	3f 91       	pop	r19
    405c:	2f 91       	pop	r18
    405e:	0f 90       	pop	r0
    4060:	0f be       	out	0x3f, r0	; 63
    4062:	0f 90       	pop	r0
    4064:	1f 90       	pop	r1
    4066:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00004d5e <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    4d5e:	cf 92       	push	r12
    4d60:	df 92       	push	r13
    4d62:	ef 92       	push	r14
    4d64:	cf 93       	push	r28
    4d66:	df 93       	push	r29
    4d68:	6a 01       	movw	r12, r20
    4d6a:	e6 2e       	mov	r14, r22
    4d6c:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    4d6e:	60 e0       	ldi	r22, 0x00	; 0
    4d70:	0e 94 28 28 	call	0x5050	; 0x5050 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    4d74:	81 11       	cpse	r24, r1
    4d76:	13 c0       	rjmp	.+38     	; 0x4d9e <start_and_write_data+0x40>
    4d78:	c0 e0       	ldi	r28, 0x00	; 0
    4d7a:	0e c0       	rjmp	.+28     	; 0x4d98 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    4d7c:	ae 2d       	mov	r26, r14
    4d7e:	c6 01       	movw	r24, r12
    4d80:	8c 0f       	add	r24, r28
    4d82:	91 1d       	adc	r25, r1
    4d84:	a1 1d       	adc	r26, r1
    4d86:	fc 01       	movw	r30, r24
    4d88:	84 91       	lpm	r24, Z
    4d8a:	a7 fd       	sbrc	r26, 7
    4d8c:	80 81       	ld	r24, Z
    4d8e:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    4d92:	81 11       	cpse	r24, r1
    4d94:	04 c0       	rjmp	.+8      	; 0x4d9e <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    4d96:	cf 5f       	subi	r28, 0xFF	; 255
    4d98:	cd 17       	cp	r28, r29
    4d9a:	80 f3       	brcs	.-32     	; 0x4d7c <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    4d9c:	80 e0       	ldi	r24, 0x00	; 0
}
    4d9e:	df 91       	pop	r29
    4da0:	cf 91       	pop	r28
    4da2:	ef 90       	pop	r14
    4da4:	df 90       	pop	r13
    4da6:	cf 90       	pop	r12
    4da8:	08 95       	ret

Disassembly of section .text.read_and_stop:

0000487c <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    487c:	ef 92       	push	r14
    487e:	ff 92       	push	r15
    4880:	0f 93       	push	r16
    4882:	1f 93       	push	r17
    4884:	cf 93       	push	r28
    4886:	df 93       	push	r29
    4888:	8c 01       	movw	r16, r24
    488a:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    488c:	c0 e0       	ldi	r28, 0x00	; 0
    488e:	08 c0       	rjmp	.+16     	; 0x48a0 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    4890:	78 01       	movw	r14, r16
    4892:	ec 0e       	add	r14, r28
    4894:	f1 1c       	adc	r15, r1
    4896:	0e 94 b3 31 	call	0x6366	; 0x6366 <TWI_HAL_read_byte_ack>
    489a:	f7 01       	movw	r30, r14
    489c:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    489e:	cf 5f       	subi	r28, 0xFF	; 255
    48a0:	2c 2f       	mov	r18, r28
    48a2:	30 e0       	ldi	r19, 0x00	; 0
    48a4:	8d 2f       	mov	r24, r29
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	01 97       	sbiw	r24, 0x01	; 1
    48aa:	28 17       	cp	r18, r24
    48ac:	39 07       	cpc	r19, r25
    48ae:	84 f3       	brlt	.-32     	; 0x4890 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    48b0:	8d 2f       	mov	r24, r29
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	01 97       	sbiw	r24, 0x01	; 1
    48b6:	e8 01       	movw	r28, r16
    48b8:	c8 0f       	add	r28, r24
    48ba:	d9 1f       	adc	r29, r25
    48bc:	0e 94 bd 31 	call	0x637a	; 0x637a <TWI_HAL_read_byte_nack>
    48c0:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    48c2:	0e 94 fe 31 	call	0x63fc	; 0x63fc <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	df 91       	pop	r29
    48ca:	cf 91       	pop	r28
    48cc:	1f 91       	pop	r17
    48ce:	0f 91       	pop	r16
    48d0:	ff 90       	pop	r15
    48d2:	ef 90       	pop	r14
    48d4:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00006352 <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6352:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6354:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <start_and_write_data>
    6358:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    635a:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    635c:	0e 94 fe 31 	call	0x63fc	; 0x63fc <TWI_HAL_stop>
	}
	return status;
}
    6360:	8c 2f       	mov	r24, r28
    6362:	cf 91       	pop	r28
    6364:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

000061be <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    61be:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    61c0:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <start_and_write_data>
    61c4:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    61c6:	0e 94 fe 31 	call	0x63fc	; 0x63fc <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    61ca:	c1 11       	cpse	r28, r1
    61cc:	02 c0       	rjmp	.+4      	; 0x61d2 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    61ce:	80 e0       	ldi	r24, 0x00	; 0
    61d0:	01 c0       	rjmp	.+2      	; 0x61d4 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    61d2:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    61d4:	cf 91       	pop	r28
    61d6:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000059c2 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    59c2:	0f 93       	push	r16
    59c4:	1f 93       	push	r17
    59c6:	cf 93       	push	r28
    59c8:	df 93       	push	r29
    59ca:	8b 01       	movw	r16, r22
    59cc:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    59ce:	61 e0       	ldi	r22, 0x01	; 1
    59d0:	0e 94 28 28 	call	0x5050	; 0x5050 <TWI_HAL_start>
    59d4:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    59d6:	88 23       	and	r24, r24
    59d8:	21 f0       	breq	.+8      	; 0x59e2 <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    59da:	0e 94 fe 31 	call	0x63fc	; 0x63fc <TWI_HAL_stop>
		return status;	
    59de:	8c 2f       	mov	r24, r28
    59e0:	04 c0       	rjmp	.+8      	; 0x59ea <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    59e2:	6d 2f       	mov	r22, r29
    59e4:	c8 01       	movw	r24, r16
    59e6:	0e 94 3e 24 	call	0x487c	; 0x487c <read_and_stop>
	
}
    59ea:	df 91       	pop	r29
    59ec:	cf 91       	pop	r28
    59ee:	1f 91       	pop	r17
    59f0:	0f 91       	pop	r16
    59f2:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00005aee <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5aee:	0f 93       	push	r16
    5af0:	1f 93       	push	r17
    5af2:	cf 93       	push	r28
    5af4:	df 93       	push	r29
    5af6:	8b 01       	movw	r16, r22
    5af8:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    5afa:	0e 94 cd 29 	call	0x539a	; 0x539a <TWI_HAL_repeated_start>
    5afe:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5b00:	88 23       	and	r24, r24
    5b02:	21 f0       	breq	.+8      	; 0x5b0c <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    5b04:	0e 94 fe 31 	call	0x63fc	; 0x63fc <TWI_HAL_stop>
		return status;
    5b08:	8c 2f       	mov	r24, r28
    5b0a:	04 c0       	rjmp	.+8      	; 0x5b14 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    5b0c:	6d 2f       	mov	r22, r29
    5b0e:	c8 01       	movw	r24, r16
    5b10:	0e 94 3e 24 	call	0x487c	; 0x487c <read_and_stop>
	
}
    5b14:	df 91       	pop	r29
    5b16:	cf 91       	pop	r28
    5b18:	1f 91       	pop	r17
    5b1a:	0f 91       	pop	r16
    5b1c:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

000063a2 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    63a2:	80 e2       	ldi	r24, 0x20	; 32
    63a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    63a8:	e9 eb       	ldi	r30, 0xB9	; 185
    63aa:	f0 e0       	ldi	r31, 0x00	; 0
    63ac:	80 81       	ld	r24, Z
    63ae:	8c 7f       	andi	r24, 0xFC	; 252
    63b0:	80 83       	st	Z, r24
    63b2:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00005050 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	88 0f       	add	r24, r24
    5054:	99 1f       	adc	r25, r25
    5056:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    5058:	84 ea       	ldi	r24, 0xA4	; 164
    505a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    505e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5062:	99 23       	and	r25, r25
    5064:	e4 f7       	brge	.-8      	; 0x505e <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    5066:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    506a:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    506c:	88 30       	cpi	r24, 0x08	; 8
    506e:	99 f4       	brne	.+38     	; 0x5096 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    5070:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    5074:	84 e8       	ldi	r24, 0x84	; 132
    5076:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    507a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    507e:	88 23       	and	r24, r24
    5080:	e4 f7       	brge	.-8      	; 0x507a <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    5082:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5086:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    5088:	88 31       	cpi	r24, 0x18	; 24
    508a:	21 f0       	breq	.+8      	; 0x5094 <TWI_HAL_start+0x44>
    508c:	80 34       	cpi	r24, 0x40	; 64
    508e:	19 f4       	brne	.+6      	; 0x5096 <TWI_HAL_start+0x46>
    5090:	80 e0       	ldi	r24, 0x00	; 0
    5092:	08 95       	ret
    5094:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    5096:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

0000539a <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    539a:	90 e0       	ldi	r25, 0x00	; 0
    539c:	88 0f       	add	r24, r24
    539e:	99 1f       	adc	r25, r25
    53a0:	28 2f       	mov	r18, r24
    53a2:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    53a4:	84 ea       	ldi	r24, 0xA4	; 164
    53a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    53aa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    53ae:	99 23       	and	r25, r25
    53b0:	e4 f7       	brge	.-8      	; 0x53aa <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    53b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    53b6:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    53b8:	80 31       	cpi	r24, 0x10	; 16
    53ba:	79 f4       	brne	.+30     	; 0x53da <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    53bc:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    53c0:	84 e8       	ldi	r24, 0x84	; 132
    53c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    53c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    53ca:	88 23       	and	r24, r24
    53cc:	e4 f7       	brge	.-8      	; 0x53c6 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    53ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    53d2:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    53d4:	80 34       	cpi	r24, 0x40	; 64
    53d6:	09 f4       	brne	.+2      	; 0x53da <TWI_HAL_repeated_start+0x40>
    53d8:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    53da:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00005fc4 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    5fc4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    5fc8:	84 e8       	ldi	r24, 0x84	; 132
    5fca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    5fce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5fd2:	88 23       	and	r24, r24
    5fd4:	e4 f7       	brge	.-8      	; 0x5fce <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    5fd6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5fda:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    5fdc:	88 32       	cpi	r24, 0x28	; 40
    5fde:	09 f4       	brne	.+2      	; 0x5fe2 <TWI_HAL_write_byte+0x1e>
    5fe0:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    5fe2:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00006366 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    6366:	84 ec       	ldi	r24, 0xC4	; 196
    6368:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    636c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6370:	88 23       	and	r24, r24
    6372:	e4 f7       	brge	.-8      	; 0x636c <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    6374:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6378:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

0000637a <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    637a:	84 e8       	ldi	r24, 0x84	; 132
    637c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    6380:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6384:	88 23       	and	r24, r24
    6386:	e4 f7       	brge	.-8      	; 0x6380 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    6388:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    638c:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

000063fc <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    63fc:	84 e9       	ldi	r24, 0x94	; 148
    63fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    6402:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6406:	84 fd       	sbrc	r24, 4
    6408:	fc cf       	rjmp	.-8      	; 0x6402 <TWI_HAL_stop+0x6>
}
    640a:	08 95       	ret

Disassembly of section .text.copy_buffer:

00005c9e <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5c9e:	bc 01       	movw	r22, r24
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	09 c0       	rjmp	.+18     	; 0x5cb6 <copy_buffer+0x18>
    5ca4:	fb 01       	movw	r30, r22
    5ca6:	e9 0f       	add	r30, r25
    5ca8:	f1 1d       	adc	r31, r1
    5caa:	da 01       	movw	r26, r20
    5cac:	a0 50       	subi	r26, 0x00	; 0
    5cae:	bf 4f       	sbci	r27, 0xFF	; 255
    5cb0:	2c 91       	ld	r18, X
    5cb2:	20 83       	st	Z, r18
    5cb4:	9f 5f       	subi	r25, 0xFF	; 255
    5cb6:	49 2f       	mov	r20, r25
    5cb8:	50 e0       	ldi	r21, 0x00	; 0
    5cba:	20 91 96 0f 	lds	r18, 0x0F96	; 0x800f96 <rx_buffer_data_len>
    5cbe:	30 e0       	ldi	r19, 0x00	; 0
    5cc0:	22 50       	subi	r18, 0x02	; 2
    5cc2:	31 09       	sbc	r19, r1
    5cc4:	42 17       	cp	r20, r18
    5cc6:	53 07       	cpc	r21, r19
    5cc8:	6c f3       	brlt	.-38     	; 0x5ca4 <copy_buffer+0x6>
    5cca:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00005598 <uart0_hal_init>:
    5598:	e1 ec       	ldi	r30, 0xC1	; 193
    559a:	f0 e0       	ldi	r31, 0x00	; 0
    559c:	80 81       	ld	r24, Z
    559e:	80 61       	ori	r24, 0x10	; 16
    55a0:	80 83       	st	Z, r24
    55a2:	80 81       	ld	r24, Z
    55a4:	88 60       	ori	r24, 0x08	; 8
    55a6:	80 83       	st	Z, r24
    55a8:	80 81       	ld	r24, Z
    55aa:	80 68       	ori	r24, 0x80	; 128
    55ac:	80 83       	st	Z, r24
    55ae:	80 81       	ld	r24, Z
    55b0:	80 64       	ori	r24, 0x40	; 64
    55b2:	80 83       	st	Z, r24
    55b4:	e0 ec       	ldi	r30, 0xC0	; 192
    55b6:	f0 e0       	ldi	r31, 0x00	; 0
    55b8:	80 81       	ld	r24, Z
    55ba:	82 60       	ori	r24, 0x02	; 2
    55bc:	80 83       	st	Z, r24
    55be:	86 e0       	ldi	r24, 0x06	; 6
    55c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    55c4:	80 e1       	ldi	r24, 0x10	; 16
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    55cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    55d0:	78 94       	sei
    55d2:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000055d4 <uart0_hal_send_message>:
    55d4:	dc 01       	movw	r26, r24
    55d6:	80 91 98 0f 	lds	r24, 0x0F98	; 0x800f98 <tx_buffer_data_len>
    55da:	81 11       	cpse	r24, r1
    55dc:	fc cf       	rjmp	.-8      	; 0x55d6 <uart0_hal_send_message+0x2>
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	0b c0       	rjmp	.+22     	; 0x55f8 <uart0_hal_send_message+0x24>
    55e2:	29 2f       	mov	r18, r25
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	fd 01       	movw	r30, r26
    55e8:	e2 0f       	add	r30, r18
    55ea:	f3 1f       	adc	r31, r19
    55ec:	40 81       	ld	r20, Z
    55ee:	f9 01       	movw	r30, r18
    55f0:	ea 56       	subi	r30, 0x6A	; 106
    55f2:	fe 4f       	sbci	r31, 0xFE	; 254
    55f4:	40 83       	st	Z, r20
    55f6:	9f 5f       	subi	r25, 0xFF	; 255
    55f8:	96 17       	cp	r25, r22
    55fa:	98 f3       	brcs	.-26     	; 0x55e2 <uart0_hal_send_message+0xe>
    55fc:	60 93 98 0f 	sts	0x0F98, r22	; 0x800f98 <tx_buffer_data_len>
    5600:	81 e0       	ldi	r24, 0x01	; 1
    5602:	80 93 97 0f 	sts	0x0F97, r24	; 0x800f97 <tx_buffer_cursor>
    5606:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    560a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    560e:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

0000448a <uart0_hal_send_string>:
    448a:	6f 92       	push	r6
    448c:	7f 92       	push	r7
    448e:	8f 92       	push	r8
    4490:	cf 92       	push	r12
    4492:	df 92       	push	r13
    4494:	ef 92       	push	r14
    4496:	3b 01       	movw	r6, r22
    4498:	88 2e       	mov	r8, r24
    449a:	80 91 98 0f 	lds	r24, 0x0F98	; 0x800f98 <tx_buffer_data_len>
    449e:	81 11       	cpse	r24, r1
    44a0:	fc cf       	rjmp	.-8      	; 0x449a <uart0_hal_send_string+0x10>
    44a2:	88 2d       	mov	r24, r8
    44a4:	b3 01       	movw	r22, r6
    44a6:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    44aa:	68 2f       	mov	r22, r24
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	12 c0       	rjmp	.+36     	; 0x44d4 <uart0_hal_send_string+0x4a>
    44b0:	29 2f       	mov	r18, r25
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	e8 2c       	mov	r14, r8
    44b6:	63 01       	movw	r12, r6
    44b8:	c2 0e       	add	r12, r18
    44ba:	d3 1e       	adc	r13, r19
    44bc:	e1 1c       	adc	r14, r1
    44be:	37 fd       	sbrc	r19, 7
    44c0:	ea 94       	dec	r14
    44c2:	f6 01       	movw	r30, r12
    44c4:	44 91       	lpm	r20, Z
    44c6:	e7 fc       	sbrc	r14, 7
    44c8:	40 81       	ld	r20, Z
    44ca:	f9 01       	movw	r30, r18
    44cc:	ea 56       	subi	r30, 0x6A	; 106
    44ce:	fe 4f       	sbci	r31, 0xFE	; 254
    44d0:	40 83       	st	Z, r20
    44d2:	9f 5f       	subi	r25, 0xFF	; 255
    44d4:	96 17       	cp	r25, r22
    44d6:	60 f3       	brcs	.-40     	; 0x44b0 <uart0_hal_send_string+0x26>
    44d8:	80 93 98 0f 	sts	0x0F98, r24	; 0x800f98 <tx_buffer_data_len>
    44dc:	81 e0       	ldi	r24, 0x01	; 1
    44de:	80 93 97 0f 	sts	0x0F97, r24	; 0x800f97 <tx_buffer_cursor>
    44e2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    44e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    44ea:	ef 90       	pop	r14
    44ec:	df 90       	pop	r13
    44ee:	cf 90       	pop	r12
    44f0:	8f 90       	pop	r8
    44f2:	7f 90       	pop	r7
    44f4:	6f 90       	pop	r6
    44f6:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00006480 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    6480:	90 91 95 0f 	lds	r25, 0x0F95	; 0x800f95 <rx_buffer_has_message>
    6484:	81 e0       	ldi	r24, 0x01	; 1
    6486:	91 11       	cpse	r25, r1
    6488:	01 c0       	rjmp	.+2      	; 0x648c <uart0_hal_message_ready+0xc>
    648a:	80 e0       	ldi	r24, 0x00	; 0
}
    648c:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00006620 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    6620:	10 92 95 0f 	sts	0x0F95, r1	; 0x800f95 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    6624:	10 92 96 0f 	sts	0x0F96, r1	; 0x800f96 <rx_buffer_data_len>
    6628:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00005dac <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    5dac:	0f 93       	push	r16
    5dae:	1f 93       	push	r17
    5db0:	cf 93       	push	r28
    5db2:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    5db4:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    5db8:	c0 91 96 0f 	lds	r28, 0x0F96	; 0x800f96 <rx_buffer_data_len>
    5dbc:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    5dbe:	f8 01       	movw	r30, r16
    5dc0:	ec 0f       	add	r30, r28
    5dc2:	f1 1d       	adc	r31, r1
    5dc4:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    5dc6:	0e 94 10 33 	call	0x6620	; 0x6620 <uart0_hal_clear_rx_buffer>
	return len;
}
    5dca:	8c 2f       	mov	r24, r28
    5dcc:	cf 91       	pop	r28
    5dce:	1f 91       	pop	r17
    5dd0:	0f 91       	pop	r16
    5dd2:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00005170 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5170:	cf 93       	push	r28
    5172:	df 93       	push	r29
    5174:	1f 92       	push	r1
    5176:	cd b7       	in	r28, 0x3d	; 61
    5178:	de b7       	in	r29, 0x3e	; 62
    517a:	9a b1       	in	r25, 0x0a	; 10
    517c:	92 60       	ori	r25, 0x02	; 2
    517e:	9a b9       	out	0x0a, r25	; 10
    5180:	e1 ec       	ldi	r30, 0xC1	; 193
    5182:	f0 e0       	ldi	r31, 0x00	; 0
    5184:	90 81       	ld	r25, Z
    5186:	97 7f       	andi	r25, 0xF7	; 247
    5188:	90 83       	st	Z, r25
    518a:	9b b1       	in	r25, 0x0b	; 11
    518c:	9d 7f       	andi	r25, 0xFD	; 253
    518e:	9b b9       	out	0x0b, r25	; 11
    5190:	af e9       	ldi	r26, 0x9F	; 159
    5192:	bf e0       	ldi	r27, 0x0F	; 15
    5194:	11 97       	sbiw	r26, 0x01	; 1
    5196:	f1 f7       	brne	.-4      	; 0x5194 <uart0_hal_send_break+0x24>
    5198:	00 c0       	rjmp	.+0      	; 0x519a <uart0_hal_send_break+0x2a>
    519a:	00 00       	nop
    519c:	90 81       	ld	r25, Z
    519e:	98 60       	ori	r25, 0x08	; 8
    51a0:	90 83       	st	Z, r25
    51a2:	89 83       	std	Y+1, r24	; 0x01
    51a4:	61 e0       	ldi	r22, 0x01	; 1
    51a6:	ce 01       	movw	r24, r28
    51a8:	01 96       	adiw	r24, 0x01	; 1
    51aa:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <uart0_hal_send_message>
    51ae:	0f 90       	pop	r0
    51b0:	df 91       	pop	r29
    51b2:	cf 91       	pop	r28
    51b4:	08 95       	ret

Disassembly of section .text.__vector_22:

00004f72 <__vector_22>:
    4f72:	1f 92       	push	r1
    4f74:	0f 92       	push	r0
    4f76:	0f b6       	in	r0, 0x3f	; 63
    4f78:	0f 92       	push	r0
    4f7a:	11 24       	eor	r1, r1
    4f7c:	8f 93       	push	r24
    4f7e:	ef 93       	push	r30
    4f80:	ff 93       	push	r31
    4f82:	e0 91 97 0f 	lds	r30, 0x0F97	; 0x800f97 <tx_buffer_cursor>
    4f86:	80 91 98 0f 	lds	r24, 0x0F98	; 0x800f98 <tx_buffer_data_len>
    4f8a:	e8 17       	cp	r30, r24
    4f8c:	58 f4       	brcc	.+22     	; 0x4fa4 <__vector_22+0x32>
    4f8e:	81 e0       	ldi	r24, 0x01	; 1
    4f90:	8e 0f       	add	r24, r30
    4f92:	80 93 97 0f 	sts	0x0F97, r24	; 0x800f97 <tx_buffer_cursor>
    4f96:	f0 e0       	ldi	r31, 0x00	; 0
    4f98:	ea 56       	subi	r30, 0x6A	; 106
    4f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f9c:	80 81       	ld	r24, Z
    4f9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4fa2:	04 c0       	rjmp	.+8      	; 0x4fac <__vector_22+0x3a>
    4fa4:	10 92 97 0f 	sts	0x0F97, r1	; 0x800f97 <tx_buffer_cursor>
    4fa8:	10 92 98 0f 	sts	0x0F98, r1	; 0x800f98 <tx_buffer_data_len>
    4fac:	ff 91       	pop	r31
    4fae:	ef 91       	pop	r30
    4fb0:	8f 91       	pop	r24
    4fb2:	0f 90       	pop	r0
    4fb4:	0f be       	out	0x3f, r0	; 63
    4fb6:	0f 90       	pop	r0
    4fb8:	1f 90       	pop	r1
    4fba:	18 95       	reti

Disassembly of section .text.__vector_20:

000042c2 <__vector_20>:
    42c2:	1f 92       	push	r1
    42c4:	0f 92       	push	r0
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	0f 92       	push	r0
    42ca:	11 24       	eor	r1, r1
    42cc:	2f 93       	push	r18
    42ce:	8f 93       	push	r24
    42d0:	9f 93       	push	r25
    42d2:	ef 93       	push	r30
    42d4:	ff 93       	push	r31
    42d6:	80 91 95 0f 	lds	r24, 0x0F95	; 0x800f95 <rx_buffer_has_message>
    42da:	81 11       	cpse	r24, r1
    42dc:	0e c0       	rjmp	.+28     	; 0x42fa <__vector_20+0x38>
    42de:	e0 91 96 0f 	lds	r30, 0x0F96	; 0x800f96 <rx_buffer_data_len>
    42e2:	e6 39       	cpi	r30, 0x96	; 150
    42e4:	50 f4       	brcc	.+20     	; 0x42fa <__vector_20+0x38>
    42e6:	81 e0       	ldi	r24, 0x01	; 1
    42e8:	8e 0f       	add	r24, r30
    42ea:	80 93 96 0f 	sts	0x0F96, r24	; 0x800f96 <rx_buffer_data_len>
    42ee:	f0 e0       	ldi	r31, 0x00	; 0
    42f0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    42f4:	e0 50       	subi	r30, 0x00	; 0
    42f6:	ff 4f       	sbci	r31, 0xFF	; 255
    42f8:	80 83       	st	Z, r24
    42fa:	80 91 96 0f 	lds	r24, 0x0F96	; 0x800f96 <rx_buffer_data_len>
    42fe:	83 30       	cpi	r24, 0x03	; 3
    4300:	80 f0       	brcs	.+32     	; 0x4322 <__vector_20+0x60>
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	fc 01       	movw	r30, r24
    4306:	e1 50       	subi	r30, 0x01	; 1
    4308:	ff 4f       	sbci	r31, 0xFF	; 255
    430a:	20 81       	ld	r18, Z
    430c:	2a 30       	cpi	r18, 0x0A	; 10
    430e:	49 f4       	brne	.+18     	; 0x4322 <__vector_20+0x60>
    4310:	fc 01       	movw	r30, r24
    4312:	e2 50       	subi	r30, 0x02	; 2
    4314:	ff 4f       	sbci	r31, 0xFF	; 255
    4316:	80 81       	ld	r24, Z
    4318:	8d 30       	cpi	r24, 0x0D	; 13
    431a:	19 f4       	brne	.+6      	; 0x4322 <__vector_20+0x60>
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	80 93 95 0f 	sts	0x0F95, r24	; 0x800f95 <rx_buffer_has_message>
    4322:	ff 91       	pop	r31
    4324:	ef 91       	pop	r30
    4326:	9f 91       	pop	r25
    4328:	8f 91       	pop	r24
    432a:	2f 91       	pop	r18
    432c:	0f 90       	pop	r0
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	0f 90       	pop	r0
    4332:	1f 90       	pop	r1
    4334:	18 95       	reti

Disassembly of section .text.copy_buffer:

00005ccc <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    5ccc:	bc 01       	movw	r22, r24
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	09 c0       	rjmp	.+18     	; 0x5ce4 <copy_buffer+0x18>
    5cd2:	fb 01       	movw	r30, r22
    5cd4:	e9 0f       	add	r30, r25
    5cd6:	f1 1d       	adc	r31, r1
    5cd8:	da 01       	movw	r26, r20
    5cda:	a6 51       	subi	r26, 0x16	; 22
    5cdc:	b2 4f       	sbci	r27, 0xF2	; 242
    5cde:	2c 91       	ld	r18, X
    5ce0:	20 83       	st	Z, r18
    5ce2:	9f 5f       	subi	r25, 0xFF	; 255
    5ce4:	49 2f       	mov	r20, r25
    5ce6:	50 e0       	ldi	r21, 0x00	; 0
    5ce8:	20 91 9a 0f 	lds	r18, 0x0F9A	; 0x800f9a <rx_buffer_data_len>
    5cec:	30 e0       	ldi	r19, 0x00	; 0
    5cee:	22 50       	subi	r18, 0x02	; 2
    5cf0:	31 09       	sbc	r19, r1
    5cf2:	42 17       	cp	r20, r18
    5cf4:	53 07       	cpc	r21, r19
    5cf6:	6c f3       	brlt	.-38     	; 0x5cd2 <copy_buffer+0x6>
    5cf8:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

00005610 <uart1_hal_init>:
    5610:	e9 ec       	ldi	r30, 0xC9	; 201
    5612:	f0 e0       	ldi	r31, 0x00	; 0
    5614:	80 81       	ld	r24, Z
    5616:	80 61       	ori	r24, 0x10	; 16
    5618:	80 83       	st	Z, r24
    561a:	80 81       	ld	r24, Z
    561c:	88 60       	ori	r24, 0x08	; 8
    561e:	80 83       	st	Z, r24
    5620:	80 81       	ld	r24, Z
    5622:	80 68       	ori	r24, 0x80	; 128
    5624:	80 83       	st	Z, r24
    5626:	80 81       	ld	r24, Z
    5628:	80 64       	ori	r24, 0x40	; 64
    562a:	80 83       	st	Z, r24
    562c:	e8 ec       	ldi	r30, 0xC8	; 200
    562e:	f0 e0       	ldi	r31, 0x00	; 0
    5630:	80 81       	ld	r24, Z
    5632:	82 60       	ori	r24, 0x02	; 2
    5634:	80 83       	st	Z, r24
    5636:	86 e0       	ldi	r24, 0x06	; 6
    5638:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    563c:	80 e1       	ldi	r24, 0x10	; 16
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    5644:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    5648:	78 94       	sei
    564a:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00003e58 <uart1_hal_send_string>:
    3e58:	6f 92       	push	r6
    3e5a:	7f 92       	push	r7
    3e5c:	8f 92       	push	r8
    3e5e:	cf 92       	push	r12
    3e60:	df 92       	push	r13
    3e62:	ef 92       	push	r14
    3e64:	3b 01       	movw	r6, r22
    3e66:	88 2e       	mov	r8, r24
    3e68:	80 91 9c 0f 	lds	r24, 0x0F9C	; 0x800f9c <tx_buffer_data_len>
    3e6c:	81 11       	cpse	r24, r1
    3e6e:	fc cf       	rjmp	.-8      	; 0x3e68 <uart1_hal_send_string+0x10>
    3e70:	88 2d       	mov	r24, r8
    3e72:	b3 01       	movw	r22, r6
    3e74:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    3e78:	bc 01       	movw	r22, r24
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	12 c0       	rjmp	.+36     	; 0x3ea2 <uart1_hal_send_string+0x4a>
    3e7e:	29 2f       	mov	r18, r25
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	e8 2c       	mov	r14, r8
    3e84:	63 01       	movw	r12, r6
    3e86:	c4 0e       	add	r12, r20
    3e88:	d5 1e       	adc	r13, r21
    3e8a:	e1 1c       	adc	r14, r1
    3e8c:	57 fd       	sbrc	r21, 7
    3e8e:	ea 94       	dec	r14
    3e90:	f6 01       	movw	r30, r12
    3e92:	44 91       	lpm	r20, Z
    3e94:	e7 fc       	sbrc	r14, 7
    3e96:	40 81       	ld	r20, Z
    3e98:	f9 01       	movw	r30, r18
    3e9a:	ee 5d       	subi	r30, 0xDE	; 222
    3e9c:	f2 4f       	sbci	r31, 0xF2	; 242
    3e9e:	40 83       	st	Z, r20
    3ea0:	9f 5f       	subi	r25, 0xFF	; 255
    3ea2:	49 2f       	mov	r20, r25
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	46 17       	cp	r20, r22
    3ea8:	57 07       	cpc	r21, r23
    3eaa:	48 f3       	brcs	.-46     	; 0x3e7e <uart1_hal_send_string+0x26>
    3eac:	fb 01       	movw	r30, r22
    3eae:	ee 5d       	subi	r30, 0xDE	; 222
    3eb0:	f2 4f       	sbci	r31, 0xF2	; 242
    3eb2:	8d e0       	ldi	r24, 0x0D	; 13
    3eb4:	80 83       	st	Z, r24
    3eb6:	fb 01       	movw	r30, r22
    3eb8:	ed 5d       	subi	r30, 0xDD	; 221
    3eba:	f2 4f       	sbci	r31, 0xF2	; 242
    3ebc:	8a e0       	ldi	r24, 0x0A	; 10
    3ebe:	80 83       	st	Z, r24
    3ec0:	6e 5f       	subi	r22, 0xFE	; 254
    3ec2:	60 93 9c 0f 	sts	0x0F9C, r22	; 0x800f9c <tx_buffer_data_len>
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	80 93 9b 0f 	sts	0x0F9B, r24	; 0x800f9b <tx_buffer_cursor>
    3ecc:	80 91 22 0d 	lds	r24, 0x0D22	; 0x800d22 <tx_buffer>
    3ed0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    3ed4:	ef 90       	pop	r14
    3ed6:	df 90       	pop	r13
    3ed8:	cf 90       	pop	r12
    3eda:	8f 90       	pop	r8
    3edc:	7f 90       	pop	r7
    3ede:	6f 90       	pop	r6
    3ee0:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

0000648e <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    648e:	90 91 99 0f 	lds	r25, 0x0F99	; 0x800f99 <rx_buffer_has_message>
    6492:	81 e0       	ldi	r24, 0x01	; 1
    6494:	91 11       	cpse	r25, r1
    6496:	01 c0       	rjmp	.+2      	; 0x649a <uart1_hal_message_ready+0xc>
    6498:	80 e0       	ldi	r24, 0x00	; 0
}
    649a:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

0000649c <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    649c:	90 91 9a 0f 	lds	r25, 0x0F9A	; 0x800f9a <rx_buffer_data_len>
    64a0:	81 e0       	ldi	r24, 0x01	; 1
    64a2:	95 39       	cpi	r25, 0x95	; 149
    64a4:	08 f4       	brcc	.+2      	; 0x64a8 <uart1_hal_rx_full+0xc>
    64a6:	80 e0       	ldi	r24, 0x00	; 0
}
    64a8:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

0000662a <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    662a:	10 92 99 0f 	sts	0x0F99, r1	; 0x800f99 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    662e:	10 92 9a 0f 	sts	0x0F9A, r1	; 0x800f9a <rx_buffer_data_len>
    6632:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00005dd4 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    5dd4:	0f 93       	push	r16
    5dd6:	1f 93       	push	r17
    5dd8:	cf 93       	push	r28
    5dda:	8c 01       	movw	r16, r24
    5ddc:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <copy_buffer>
    5de0:	c0 91 9a 0f 	lds	r28, 0x0F9A	; 0x800f9a <rx_buffer_data_len>
    5de4:	c2 50       	subi	r28, 0x02	; 2
    5de6:	f8 01       	movw	r30, r16
    5de8:	ec 0f       	add	r30, r28
    5dea:	f1 1d       	adc	r31, r1
    5dec:	10 82       	st	Z, r1
    5dee:	0e 94 15 33 	call	0x662a	; 0x662a <uart1_hal_clear_rx_buffer>
    5df2:	8c 2f       	mov	r24, r28
    5df4:	cf 91       	pop	r28
    5df6:	1f 91       	pop	r17
    5df8:	0f 91       	pop	r16
    5dfa:	08 95       	ret

Disassembly of section .text.__vector_30:

00004fbc <__vector_30>:
    4fbc:	1f 92       	push	r1
    4fbe:	0f 92       	push	r0
    4fc0:	0f b6       	in	r0, 0x3f	; 63
    4fc2:	0f 92       	push	r0
    4fc4:	11 24       	eor	r1, r1
    4fc6:	8f 93       	push	r24
    4fc8:	ef 93       	push	r30
    4fca:	ff 93       	push	r31
    4fcc:	e0 91 9b 0f 	lds	r30, 0x0F9B	; 0x800f9b <tx_buffer_cursor>
    4fd0:	80 91 9c 0f 	lds	r24, 0x0F9C	; 0x800f9c <tx_buffer_data_len>
    4fd4:	e8 17       	cp	r30, r24
    4fd6:	58 f4       	brcc	.+22     	; 0x4fee <__vector_30+0x32>
    4fd8:	81 e0       	ldi	r24, 0x01	; 1
    4fda:	8e 0f       	add	r24, r30
    4fdc:	80 93 9b 0f 	sts	0x0F9B, r24	; 0x800f9b <tx_buffer_cursor>
    4fe0:	f0 e0       	ldi	r31, 0x00	; 0
    4fe2:	ee 5d       	subi	r30, 0xDE	; 222
    4fe4:	f2 4f       	sbci	r31, 0xF2	; 242
    4fe6:	80 81       	ld	r24, Z
    4fe8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4fec:	04 c0       	rjmp	.+8      	; 0x4ff6 <__vector_30+0x3a>
    4fee:	10 92 9b 0f 	sts	0x0F9B, r1	; 0x800f9b <tx_buffer_cursor>
    4ff2:	10 92 9c 0f 	sts	0x0F9C, r1	; 0x800f9c <tx_buffer_data_len>
    4ff6:	ff 91       	pop	r31
    4ff8:	ef 91       	pop	r30
    4ffa:	8f 91       	pop	r24
    4ffc:	0f 90       	pop	r0
    4ffe:	0f be       	out	0x3f, r0	; 63
    5000:	0f 90       	pop	r0
    5002:	1f 90       	pop	r1
    5004:	18 95       	reti

Disassembly of section .text.__vector_28:

00004336 <__vector_28>:
    4336:	1f 92       	push	r1
    4338:	0f 92       	push	r0
    433a:	0f b6       	in	r0, 0x3f	; 63
    433c:	0f 92       	push	r0
    433e:	11 24       	eor	r1, r1
    4340:	2f 93       	push	r18
    4342:	8f 93       	push	r24
    4344:	9f 93       	push	r25
    4346:	ef 93       	push	r30
    4348:	ff 93       	push	r31
    434a:	80 91 99 0f 	lds	r24, 0x0F99	; 0x800f99 <rx_buffer_has_message>
    434e:	81 11       	cpse	r24, r1
    4350:	0e c0       	rjmp	.+28     	; 0x436e <__vector_28+0x38>
    4352:	e0 91 9a 0f 	lds	r30, 0x0F9A	; 0x800f9a <rx_buffer_data_len>
    4356:	e6 39       	cpi	r30, 0x96	; 150
    4358:	50 f4       	brcc	.+20     	; 0x436e <__vector_28+0x38>
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	8e 0f       	add	r24, r30
    435e:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <rx_buffer_data_len>
    4362:	f0 e0       	ldi	r31, 0x00	; 0
    4364:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4368:	e6 51       	subi	r30, 0x16	; 22
    436a:	f2 4f       	sbci	r31, 0xF2	; 242
    436c:	80 83       	st	Z, r24
    436e:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <rx_buffer_data_len>
    4372:	83 30       	cpi	r24, 0x03	; 3
    4374:	80 f0       	brcs	.+32     	; 0x4396 <__vector_28+0x60>
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	fc 01       	movw	r30, r24
    437a:	e7 51       	subi	r30, 0x17	; 23
    437c:	f2 4f       	sbci	r31, 0xF2	; 242
    437e:	20 81       	ld	r18, Z
    4380:	2a 30       	cpi	r18, 0x0A	; 10
    4382:	49 f4       	brne	.+18     	; 0x4396 <__vector_28+0x60>
    4384:	fc 01       	movw	r30, r24
    4386:	e8 51       	subi	r30, 0x18	; 24
    4388:	f2 4f       	sbci	r31, 0xF2	; 242
    438a:	80 81       	ld	r24, Z
    438c:	8d 30       	cpi	r24, 0x0D	; 13
    438e:	19 f4       	brne	.+6      	; 0x4396 <__vector_28+0x60>
    4390:	81 e0       	ldi	r24, 0x01	; 1
    4392:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <rx_buffer_has_message>
    4396:	ff 91       	pop	r31
    4398:	ef 91       	pop	r30
    439a:	9f 91       	pop	r25
    439c:	8f 91       	pop	r24
    439e:	2f 91       	pop	r18
    43a0:	0f 90       	pop	r0
    43a2:	0f be       	out	0x3f, r0	; 63
    43a4:	0f 90       	pop	r0
    43a6:	1f 90       	pop	r1
    43a8:	18 95       	reti

Disassembly of section .text.UI_HAL_jumper_init:

000064aa <UI_HAL_jumper_init>:

#include "UI_HAL.h"
#include "../../util/bit_operators.h"

void UI_HAL_jumper_init(){
	clear_bit(DDRA, 6);
    64aa:	81 b1       	in	r24, 0x01	; 1
    64ac:	8f 7b       	andi	r24, 0xBF	; 191
    64ae:	81 b9       	out	0x01, r24	; 1
	set_bit(PORTA, 6); //Pull up, default config mode
    64b0:	82 b1       	in	r24, 0x02	; 2
    64b2:	80 64       	ori	r24, 0x40	; 64
    64b4:	82 b9       	out	0x02, r24	; 2
    64b6:	08 95       	ret

Disassembly of section .text.UI_HAL_is_config_mode:

00006634 <UI_HAL_is_config_mode>:
}

bool UI_HAL_is_config_mode(){
	return get_bit(PINA, 6);
    6634:	80 b1       	in	r24, 0x00	; 0
}
    6636:	86 fb       	bst	r24, 6
    6638:	88 27       	eor	r24, r24
    663a:	80 f9       	bld	r24, 0
    663c:	08 95       	ret

Disassembly of section .text.main:

00005686 <main>:
#include "HAL/PM/PM_HAL.h"
#include "HAL/UI/UI_HAL.h"

int main(void)
{
	PM_HAL_LED_power_init();
    5686:	0e 94 32 32 	call	0x6464	; 0x6464 <PM_HAL_LED_power_init>
	UI_HAL_jumper_init();
    568a:	0e 94 55 32 	call	0x64aa	; 0x64aa <UI_HAL_jumper_init>
	//test_runner();
	
	while(1)
	{
		
		if(UI_HAL_is_config_mode()){
    568e:	0e 94 1a 33 	call	0x6634	; 0x6634 <UI_HAL_is_config_mode>
    5692:	88 23       	and	r24, r24
    5694:	49 f0       	breq	.+18     	; 0x56a8 <main+0x22>
			PM_HAL_LED_power(true);
    5696:	81 e0       	ldi	r24, 0x01	; 1
    5698:	0e 94 95 31 	call	0x632a	; 0x632a <PM_HAL_LED_power>
			CONF_enter();
    569c:	0e 94 ae 11 	call	0x235c	; 0x235c <CONF_enter>
			PM_HAL_LED_power(false);
    56a0:	80 e0       	ldi	r24, 0x00	; 0
    56a2:	0e 94 95 31 	call	0x632a	; 0x632a <PM_HAL_LED_power>
    56a6:	02 c0       	rjmp	.+4      	; 0x56ac <main+0x26>
		}else{
			MAINPG_start();
    56a8:	0e 94 5d 07 	call	0xeba	; 0xeba <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    56ac:	2f ef       	ldi	r18, 0xFF	; 255
    56ae:	81 e1       	ldi	r24, 0x11	; 17
    56b0:	9a e7       	ldi	r25, 0x7A	; 122
    56b2:	21 50       	subi	r18, 0x01	; 1
    56b4:	80 40       	sbci	r24, 0x00	; 0
    56b6:	90 40       	sbci	r25, 0x00	; 0
    56b8:	e1 f7       	brne	.-8      	; 0x56b2 <main+0x2c>
    56ba:	00 c0       	rjmp	.+0      	; 0x56bc <main+0x36>
    56bc:	00 00       	nop
    56be:	e7 cf       	rjmp	.-50     	; 0x568e <main+0x8>

Disassembly of section .text.calc_ppm_methane:

00003b72 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    3b72:	8f 92       	push	r8
    3b74:	9f 92       	push	r9
    3b76:	af 92       	push	r10
    3b78:	bf 92       	push	r11
    3b7a:	cf 92       	push	r12
    3b7c:	df 92       	push	r13
    3b7e:	ef 92       	push	r14
    3b80:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    3b82:	bc 01       	movw	r22, r24
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	0e 94 34 20 	call	0x4068	; 0x4068 <__floatunsisf>
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	40 e8       	ldi	r20, 0x80	; 128
    3b92:	59 e3       	ldi	r21, 0x39	; 57
    3b94:	0e 94 69 33 	call	0x66d2	; 0x66d2 <__mulsf3>
    3b98:	80 90 67 0f 	lds	r8, 0x0F67	; 0x800f67 <Vc>
    3b9c:	90 90 68 0f 	lds	r9, 0x0F68	; 0x800f68 <Vc+0x1>
    3ba0:	a0 90 69 0f 	lds	r10, 0x0F69	; 0x800f69 <Vc+0x2>
    3ba4:	b0 90 6a 0f 	lds	r11, 0x0F6A	; 0x800f6a <Vc+0x3>
    3ba8:	a5 01       	movw	r20, r10
    3baa:	94 01       	movw	r18, r8
    3bac:	0e 94 69 33 	call	0x66d2	; 0x66d2 <__mulsf3>
    3bb0:	6b 01       	movw	r12, r22
    3bb2:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    3bb4:	9b 01       	movw	r18, r22
    3bb6:	ac 01       	movw	r20, r24
    3bb8:	c5 01       	movw	r24, r10
    3bba:	b4 01       	movw	r22, r8
    3bbc:	0e 94 86 32 	call	0x650c	; 0x650c <__subsf3>
    3bc0:	a7 01       	movw	r20, r14
    3bc2:	96 01       	movw	r18, r12
    3bc4:	0e 94 65 33 	call	0x66ca	; 0x66ca <__divsf3>
    3bc8:	20 91 63 0f 	lds	r18, 0x0F63	; 0x800f63 <RRL>
    3bcc:	30 91 64 0f 	lds	r19, 0x0F64	; 0x800f64 <RRL+0x1>
    3bd0:	40 91 65 0f 	lds	r20, 0x0F65	; 0x800f65 <RRL+0x2>
    3bd4:	50 91 66 0f 	lds	r21, 0x0F66	; 0x800f66 <RRL+0x3>
    3bd8:	0e 94 69 33 	call	0x66d2	; 0x66d2 <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    3bdc:	20 91 5f 0f 	lds	r18, 0x0F5F	; 0x800f5f <PPM_factor>
    3be0:	30 91 60 0f 	lds	r19, 0x0F60	; 0x800f60 <PPM_factor+0x1>
    3be4:	40 91 61 0f 	lds	r20, 0x0F61	; 0x800f61 <PPM_factor+0x2>
    3be8:	50 91 62 0f 	lds	r21, 0x0F62	; 0x800f62 <PPM_factor+0x3>
    3bec:	0e 94 69 33 	call	0x66d2	; 0x66d2 <__mulsf3>
    3bf0:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__fixunssfsi>
	return PPM;
}
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	ff 90       	pop	r15
    3bf8:	ef 90       	pop	r14
    3bfa:	df 90       	pop	r13
    3bfc:	cf 90       	pop	r12
    3bfe:	bf 90       	pop	r11
    3c00:	af 90       	pop	r10
    3c02:	9f 90       	pop	r9
    3c04:	8f 90       	pop	r8
    3c06:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

0000620c <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    620c:	80 91 9d 0f 	lds	r24, 0x0F9D	; 0x800f9d <cntPowerUpTime>
    6210:	8f 5f       	subi	r24, 0xFF	; 255
    6212:	80 93 9d 0f 	sts	0x0F9D, r24	; 0x800f9d <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    6216:	90 91 9e 0f 	lds	r25, 0x0F9E	; 0x800f9e <_powerUpTime>
    621a:	89 17       	cp	r24, r25
    621c:	10 f0       	brcs	.+4      	; 0x6222 <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    621e:	0e 94 9a 33 	call	0x6734	; 0x6734 <TC0_HAL_stop>
    6222:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

0000469e <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    469e:	cf 93       	push	r28
	_data=data;
    46a0:	50 93 82 0f 	sts	0x0F82, r21	; 0x800f82 <_data+0x1>
    46a4:	40 93 81 0f 	sts	0x0F81, r20	; 0x800f81 <_data>
	_nSamples=nSamples;
    46a8:	70 93 84 0f 	sts	0x0F84, r23	; 0x800f84 <_nSamples+0x1>
    46ac:	60 93 83 0f 	sts	0x0F83, r22	; 0x800f83 <_nSamples>
	cntSamples=0;
    46b0:	10 92 80 0f 	sts	0x0F80, r1	; 0x800f80 <cntSamples+0x1>
    46b4:	10 92 7f 0f 	sts	0x0F7F, r1	; 0x800f7f <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    46b8:	6b ed       	ldi	r22, 0xDB	; 219
    46ba:	78 e2       	ldi	r23, 0x28	; 40
    46bc:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    46c0:	81 e0       	ldi	r24, 0x01	; 1
    46c2:	0e 94 6d 31 	call	0x62da	; 0x62da <PM_HAL_adc_power>
    46c6:	2f ef       	ldi	r18, 0xFF	; 255
    46c8:	83 ec       	ldi	r24, 0xC3	; 195
    46ca:	99 e0       	ldi	r25, 0x09	; 9
    46cc:	21 50       	subi	r18, 0x01	; 1
    46ce:	80 40       	sbci	r24, 0x00	; 0
    46d0:	90 40       	sbci	r25, 0x00	; 0
    46d2:	e1 f7       	brne	.-8      	; 0x46cc <ADC_init_sampling+0x2e>
    46d4:	00 c0       	rjmp	.+0      	; 0x46d6 <ADC_init_sampling+0x38>
    46d6:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    46d8:	60 e0       	ldi	r22, 0x00	; 0
    46da:	8d e4       	ldi	r24, 0x4D	; 77
    46dc:	0e 94 28 28 	call	0x5050	; 0x5050 <TWI_HAL_start>
    46e0:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    46e2:	0e 94 fe 31 	call	0x63fc	; 0x63fc <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    46e6:	cc 23       	and	r28, r28
    46e8:	51 f0       	breq	.+20     	; 0x46fe <ADC_init_sampling+0x60>
		_data=NULL;
    46ea:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <_data+0x1>
    46ee:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <_data>
		_nSamples=0;
    46f2:	10 92 84 0f 	sts	0x0F84, r1	; 0x800f84 <_nSamples+0x1>
    46f6:	10 92 83 0f 	sts	0x0F83, r1	; 0x800f83 <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    46fa:	82 e0       	ldi	r24, 0x02	; 2
    46fc:	01 c0       	rjmp	.+2      	; 0x4700 <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    46fe:	80 e0       	ldi	r24, 0x00	; 0
}
    4700:	cf 91       	pop	r28
    4702:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

0000638e <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    638e:	0e 94 9a 33 	call	0x6734	; 0x6734 <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    6392:	80 e0       	ldi	r24, 0x00	; 0
    6394:	0e 94 6d 31 	call	0x62da	; 0x62da <PM_HAL_adc_power>
	_data=NULL;
    6398:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <_data+0x1>
    639c:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <_data>
    63a0:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00006116 <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    6116:	40 91 7f 0f 	lds	r20, 0x0F7F	; 0x800f7f <cntSamples>
    611a:	50 91 80 0f 	lds	r21, 0x0F80	; 0x800f80 <cntSamples+0x1>
    611e:	20 91 83 0f 	lds	r18, 0x0F83	; 0x800f83 <_nSamples>
    6122:	30 91 84 0f 	lds	r19, 0x0F84	; 0x800f84 <_nSamples+0x1>
    6126:	81 e0       	ldi	r24, 0x01	; 1
    6128:	42 17       	cp	r20, r18
    612a:	53 07       	cpc	r21, r19
    612c:	08 f4       	brcc	.+2      	; 0x6130 <ADC_is_sampling_done+0x1a>
    612e:	80 e0       	ldi	r24, 0x00	; 0
}
    6130:	08 95       	ret

Disassembly of section .text.ADC_get_value:

000049e0 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    49e0:	0f 93       	push	r16
    49e2:	1f 93       	push	r17
    49e4:	cf 93       	push	r28
    49e6:	df 93       	push	r29
    49e8:	00 d0       	rcall	.+0      	; 0x49ea <ADC_get_value+0xa>
    49ea:	cd b7       	in	r28, 0x3d	; 61
    49ec:	de b7       	in	r29, 0x3e	; 62
    49ee:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    49f0:	8f ef       	ldi	r24, 0xFF	; 255
    49f2:	9f ef       	ldi	r25, 0xFF	; 255
    49f4:	f8 01       	movw	r30, r16
    49f6:	91 83       	std	Z+1, r25	; 0x01
    49f8:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    49fa:	42 e0       	ldi	r20, 0x02	; 2
    49fc:	be 01       	movw	r22, r28
    49fe:	6f 5f       	subi	r22, 0xFF	; 255
    4a00:	7f 4f       	sbci	r23, 0xFF	; 255
    4a02:	8d e4       	ldi	r24, 0x4D	; 77
    4a04:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4a08:	81 11       	cpse	r24, r1
    4a0a:	0d c0       	rjmp	.+26     	; 0x4a26 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    4a0c:	89 81       	ldd	r24, Y+1	; 0x01
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	98 2f       	mov	r25, r24
    4a12:	88 27       	eor	r24, r24
    4a14:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    4a16:	82 2b       	or	r24, r18
    4a18:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <calc_ppm_methane>
    4a1c:	f8 01       	movw	r30, r16
    4a1e:	91 83       	std	Z+1, r25	; 0x01
    4a20:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    4a22:	80 e0       	ldi	r24, 0x00	; 0
    4a24:	01 c0       	rjmp	.+2      	; 0x4a28 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4a26:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    4a28:	0f 90       	pop	r0
    4a2a:	0f 90       	pop	r0
    4a2c:	df 91       	pop	r29
    4a2e:	cf 91       	pop	r28
    4a30:	1f 91       	pop	r17
    4a32:	0f 91       	pop	r16
    4a34:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

000051b6 <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    51b6:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <_data>
    51ba:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <_data+0x1>
    51be:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <cntSamples>
    51c2:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <cntSamples+0x1>
    51c6:	a9 01       	movw	r20, r18
    51c8:	4f 5f       	subi	r20, 0xFF	; 255
    51ca:	5f 4f       	sbci	r21, 0xFF	; 255
    51cc:	50 93 80 0f 	sts	0x0F80, r21	; 0x800f80 <cntSamples+0x1>
    51d0:	40 93 7f 0f 	sts	0x0F7F, r20	; 0x800f7f <cntSamples>
    51d4:	22 0f       	add	r18, r18
    51d6:	33 1f       	adc	r19, r19
    51d8:	82 0f       	add	r24, r18
    51da:	93 1f       	adc	r25, r19
    51dc:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <ADC_get_value>
	if(cntSamples>=_nSamples){
    51e0:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <cntSamples>
    51e4:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <cntSamples+0x1>
    51e8:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <_nSamples>
    51ec:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <_nSamples+0x1>
    51f0:	28 17       	cp	r18, r24
    51f2:	39 07       	cpc	r19, r25
    51f4:	10 f0       	brcs	.+4      	; 0x51fa <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    51f6:	0e 94 9a 33 	call	0x6734	; 0x6734 <TC0_HAL_stop>
    51fa:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

0000663e <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    663e:	0e 94 71 33 	call	0x66e2	; 0x66e2 <TC0_HAL_start>
	vect_ADC_do_sample();
    6642:	0e 94 db 28 	call	0x51b6	; 0x51b6 <vect_ADC_do_sample>
    6646:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00006044 <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    6044:	80 93 9e 0f 	sts	0x0F9E, r24	; 0x800f9e <_powerUpTime>
	cntPowerUpTime=0;
    6048:	10 92 9d 0f 	sts	0x0F9D, r1	; 0x800f9d <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    604c:	81 e0       	ldi	r24, 0x01	; 1
    604e:	0e 94 77 31 	call	0x62ee	; 0x62ee <PM_HAL_meth_power>
	
	//Setup timer
	//TC0_HAL_init(60, &vect_ADC_heat_timeout);
	TC0_HAL_init(1, &vect_ADC_heat_timeout);
    6052:	66 e0       	ldi	r22, 0x06	; 6
    6054:	71 e3       	ldi	r23, 0x31	; 49
    6056:	81 e0       	ldi	r24, 0x01	; 1
    6058:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <TC0_HAL_init>
	TC0_HAL_start();
    605c:	0e 94 71 33 	call	0x66e2	; 0x66e2 <TC0_HAL_start>
    6060:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

000066a2 <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    66a2:	80 e0       	ldi	r24, 0x00	; 0
    66a4:	0e 94 77 31 	call	0x62ee	; 0x62ee <PM_HAL_meth_power>
    66a8:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

000063b4 <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    63b4:	20 91 9d 0f 	lds	r18, 0x0F9D	; 0x800f9d <cntPowerUpTime>
    63b8:	90 91 9e 0f 	lds	r25, 0x0F9E	; 0x800f9e <_powerUpTime>
    63bc:	81 e0       	ldi	r24, 0x01	; 1
    63be:	29 17       	cp	r18, r25
    63c0:	08 f4       	brcc	.+2      	; 0x63c4 <ADC_meth_sens_ready+0x10>
    63c2:	80 e0       	ldi	r24, 0x00	; 0
}
    63c4:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

000053dc <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    53dc:	ef 92       	push	r14
    53de:	ff 92       	push	r15
    53e0:	0f 93       	push	r16
    53e2:	1f 93       	push	r17
	Vc=Vcc;
    53e4:	60 93 67 0f 	sts	0x0F67, r22	; 0x800f67 <Vc>
    53e8:	70 93 68 0f 	sts	0x0F68, r23	; 0x800f68 <Vc+0x1>
    53ec:	80 93 69 0f 	sts	0x0F69, r24	; 0x800f69 <Vc+0x2>
    53f0:	90 93 6a 0f 	sts	0x0F6A, r25	; 0x800f6a <Vc+0x3>
	RRL=Rrl;
    53f4:	20 93 63 0f 	sts	0x0F63, r18	; 0x800f63 <RRL>
    53f8:	30 93 64 0f 	sts	0x0F64, r19	; 0x800f64 <RRL+0x1>
    53fc:	40 93 65 0f 	sts	0x0F65, r20	; 0x800f65 <RRL+0x2>
    5400:	50 93 66 0f 	sts	0x0F66, r21	; 0x800f66 <RRL+0x3>
	PPM_factor=PPMfactor;
    5404:	e0 92 5f 0f 	sts	0x0F5F, r14	; 0x800f5f <PPM_factor>
    5408:	f0 92 60 0f 	sts	0x0F60, r15	; 0x800f60 <PPM_factor+0x1>
    540c:	00 93 61 0f 	sts	0x0F61, r16	; 0x800f61 <PPM_factor+0x2>
    5410:	10 93 62 0f 	sts	0x0F62, r17	; 0x800f62 <PPM_factor+0x3>
}
    5414:	1f 91       	pop	r17
    5416:	0f 91       	pop	r16
    5418:	ff 90       	pop	r15
    541a:	ef 90       	pop	r14
    541c:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

0000626c <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    626c:	60 e4       	ldi	r22, 0x40	; 64
    626e:	70 e0       	ldi	r23, 0x00	; 0
    6270:	80 e8       	ldi	r24, 0x80	; 128
    6272:	0e 94 f5 31 	call	0x63ea	; 0x63ea <eeprom_read_byte>
    6276:	91 e0       	ldi	r25, 0x01	; 1
    6278:	81 11       	cpse	r24, r1
    627a:	01 c0       	rjmp	.+2      	; 0x627e <EM_has_deveui+0x12>
    627c:	90 e0       	ldi	r25, 0x00	; 0
}
    627e:	89 2f       	mov	r24, r25
    6280:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00006282 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    6282:	61 e4       	ldi	r22, 0x41	; 65
    6284:	70 e0       	ldi	r23, 0x00	; 0
    6286:	80 e8       	ldi	r24, 0x80	; 128
    6288:	0e 94 f5 31 	call	0x63ea	; 0x63ea <eeprom_read_byte>
    628c:	91 e0       	ldi	r25, 0x01	; 1
    628e:	81 11       	cpse	r24, r1
    6290:	01 c0       	rjmp	.+2      	; 0x6294 <EM_has_appeui+0x12>
    6292:	90 e0       	ldi	r25, 0x00	; 0
}
    6294:	89 2f       	mov	r24, r25
    6296:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00006298 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    6298:	62 e4       	ldi	r22, 0x42	; 66
    629a:	70 e0       	ldi	r23, 0x00	; 0
    629c:	80 e8       	ldi	r24, 0x80	; 128
    629e:	0e 94 f5 31 	call	0x63ea	; 0x63ea <eeprom_read_byte>
    62a2:	91 e0       	ldi	r25, 0x01	; 1
    62a4:	81 11       	cpse	r24, r1
    62a6:	01 c0       	rjmp	.+2      	; 0x62aa <EM_has_appkey+0x12>
    62a8:	90 e0       	ldi	r25, 0x00	; 0
}
    62aa:	89 2f       	mov	r24, r25
    62ac:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

000056c0 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    56c0:	cf 92       	push	r12
    56c2:	df 92       	push	r13
    56c4:	ef 92       	push	r14
    56c6:	6b 01       	movw	r12, r22
    56c8:	e8 2e       	mov	r14, r24
    56ca:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    56ce:	40 97       	sbiw	r24, 0x10	; 16
    56d0:	79 f4       	brne	.+30     	; 0x56f0 <EM_set_deveui+0x30>
    56d2:	20 e1       	ldi	r18, 0x10	; 16
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	40 e0       	ldi	r20, 0x00	; 0
    56d8:	50 e0       	ldi	r21, 0x00	; 0
    56da:	8e 2d       	mov	r24, r14
    56dc:	b6 01       	movw	r22, r12
    56de:	0e 94 89 29 	call	0x5312	; 0x5312 <eeprom_update_block>
    56e2:	61 e0       	ldi	r22, 0x01	; 1
    56e4:	80 e4       	ldi	r24, 0x40	; 64
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <eeprom_update_byte>
    56ec:	81 e0       	ldi	r24, 0x01	; 1
    56ee:	01 c0       	rjmp	.+2      	; 0x56f2 <EM_set_deveui+0x32>
    56f0:	80 e0       	ldi	r24, 0x00	; 0
    56f2:	ef 90       	pop	r14
    56f4:	df 90       	pop	r13
    56f6:	cf 90       	pop	r12
    56f8:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00005b1e <EM_get_deveui>:
    5b1e:	0f 93       	push	r16
    5b20:	1f 93       	push	r17
    5b22:	cf 93       	push	r28
    5b24:	8c 01       	movw	r16, r24
    5b26:	0e 94 36 31 	call	0x626c	; 0x626c <EM_has_deveui>
    5b2a:	c8 2f       	mov	r28, r24
    5b2c:	88 23       	and	r24, r24
    5b2e:	51 f0       	breq	.+20     	; 0x5b44 <EM_get_deveui+0x26>
    5b30:	20 e1       	ldi	r18, 0x10	; 16
    5b32:	30 e0       	ldi	r19, 0x00	; 0
    5b34:	40 e0       	ldi	r20, 0x00	; 0
    5b36:	50 e0       	ldi	r21, 0x00	; 0
    5b38:	60 e0       	ldi	r22, 0x00	; 0
    5b3a:	c8 01       	movw	r24, r16
    5b3c:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <eeprom_read_block>
    5b40:	f8 01       	movw	r30, r16
    5b42:	10 8a       	std	Z+16, r1	; 0x10
    5b44:	8c 2f       	mov	r24, r28
    5b46:	cf 91       	pop	r28
    5b48:	1f 91       	pop	r17
    5b4a:	0f 91       	pop	r16
    5b4c:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

000056fa <EM_set_appeui>:
    56fa:	cf 92       	push	r12
    56fc:	df 92       	push	r13
    56fe:	ef 92       	push	r14
    5700:	6b 01       	movw	r12, r22
    5702:	e8 2e       	mov	r14, r24
    5704:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    5708:	40 97       	sbiw	r24, 0x10	; 16
    570a:	79 f4       	brne	.+30     	; 0x572a <EM_set_appeui+0x30>
    570c:	20 e1       	ldi	r18, 0x10	; 16
    570e:	30 e0       	ldi	r19, 0x00	; 0
    5710:	40 e1       	ldi	r20, 0x10	; 16
    5712:	50 e0       	ldi	r21, 0x00	; 0
    5714:	8e 2d       	mov	r24, r14
    5716:	b6 01       	movw	r22, r12
    5718:	0e 94 89 29 	call	0x5312	; 0x5312 <eeprom_update_block>
    571c:	61 e0       	ldi	r22, 0x01	; 1
    571e:	81 e4       	ldi	r24, 0x41	; 65
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <eeprom_update_byte>
    5726:	81 e0       	ldi	r24, 0x01	; 1
    5728:	01 c0       	rjmp	.+2      	; 0x572c <EM_set_appeui+0x32>
    572a:	80 e0       	ldi	r24, 0x00	; 0
    572c:	ef 90       	pop	r14
    572e:	df 90       	pop	r13
    5730:	cf 90       	pop	r12
    5732:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00005b4e <EM_get_appeui>:
    5b4e:	0f 93       	push	r16
    5b50:	1f 93       	push	r17
    5b52:	cf 93       	push	r28
    5b54:	8c 01       	movw	r16, r24
    5b56:	0e 94 41 31 	call	0x6282	; 0x6282 <EM_has_appeui>
    5b5a:	c8 2f       	mov	r28, r24
    5b5c:	88 23       	and	r24, r24
    5b5e:	51 f0       	breq	.+20     	; 0x5b74 <EM_get_appeui+0x26>
    5b60:	20 e1       	ldi	r18, 0x10	; 16
    5b62:	30 e0       	ldi	r19, 0x00	; 0
    5b64:	40 e1       	ldi	r20, 0x10	; 16
    5b66:	50 e0       	ldi	r21, 0x00	; 0
    5b68:	60 e0       	ldi	r22, 0x00	; 0
    5b6a:	c8 01       	movw	r24, r16
    5b6c:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <eeprom_read_block>
    5b70:	f8 01       	movw	r30, r16
    5b72:	10 8a       	std	Z+16, r1	; 0x10
    5b74:	8c 2f       	mov	r24, r28
    5b76:	cf 91       	pop	r28
    5b78:	1f 91       	pop	r17
    5b7a:	0f 91       	pop	r16
    5b7c:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00005734 <EM_set_appkey>:
    5734:	cf 92       	push	r12
    5736:	df 92       	push	r13
    5738:	ef 92       	push	r14
    573a:	6b 01       	movw	r12, r22
    573c:	e8 2e       	mov	r14, r24
    573e:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    5742:	80 97       	sbiw	r24, 0x20	; 32
    5744:	79 f4       	brne	.+30     	; 0x5764 <EM_set_appkey+0x30>
    5746:	20 e2       	ldi	r18, 0x20	; 32
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	40 e2       	ldi	r20, 0x20	; 32
    574c:	50 e0       	ldi	r21, 0x00	; 0
    574e:	8e 2d       	mov	r24, r14
    5750:	b6 01       	movw	r22, r12
    5752:	0e 94 89 29 	call	0x5312	; 0x5312 <eeprom_update_block>
    5756:	61 e0       	ldi	r22, 0x01	; 1
    5758:	82 e4       	ldi	r24, 0x42	; 66
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <eeprom_update_byte>
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	01 c0       	rjmp	.+2      	; 0x5766 <EM_set_appkey+0x32>
    5764:	80 e0       	ldi	r24, 0x00	; 0
    5766:	ef 90       	pop	r14
    5768:	df 90       	pop	r13
    576a:	cf 90       	pop	r12
    576c:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00005b7e <EM_get_appkey>:
    5b7e:	0f 93       	push	r16
    5b80:	1f 93       	push	r17
    5b82:	cf 93       	push	r28
    5b84:	8c 01       	movw	r16, r24
    5b86:	0e 94 4c 31 	call	0x6298	; 0x6298 <EM_has_appkey>
    5b8a:	c8 2f       	mov	r28, r24
    5b8c:	88 23       	and	r24, r24
    5b8e:	51 f0       	breq	.+20     	; 0x5ba4 <EM_get_appkey+0x26>
    5b90:	20 e2       	ldi	r18, 0x20	; 32
    5b92:	30 e0       	ldi	r19, 0x00	; 0
    5b94:	40 e2       	ldi	r20, 0x20	; 32
    5b96:	50 e0       	ldi	r21, 0x00	; 0
    5b98:	60 e0       	ldi	r22, 0x00	; 0
    5b9a:	c8 01       	movw	r24, r16
    5b9c:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <eeprom_read_block>
    5ba0:	f8 01       	movw	r30, r16
    5ba2:	10 a2       	std	Z+32, r1	; 0x20
    5ba4:	8c 2f       	mov	r24, r28
    5ba6:	cf 91       	pop	r28
    5ba8:	1f 91       	pop	r17
    5baa:	0f 91       	pop	r16
    5bac:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

000064b8 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    64b8:	ab 01       	movw	r20, r22
    64ba:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    64bc:	83 e4       	ldi	r24, 0x43	; 67
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	0e 94 2a 31 	call	0x6254	; 0x6254 <eeprom_update_dword>
    64c4:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00006062 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6062:	cf 93       	push	r28
    6064:	df 93       	push	r29
    6066:	ec 01       	movw	r28, r24
    6068:	63 e4       	ldi	r22, 0x43	; 67
    606a:	70 e0       	ldi	r23, 0x00	; 0
    606c:	80 e0       	ldi	r24, 0x00	; 0
    606e:	0e 94 a9 32 	call	0x6552	; 0x6552 <eeprom_read_dword>
    6072:	68 83       	st	Y, r22
    6074:	79 83       	std	Y+1, r23	; 0x01
    6076:	8a 83       	std	Y+2, r24	; 0x02
    6078:	9b 83       	std	Y+3, r25	; 0x03
    607a:	df 91       	pop	r29
    607c:	cf 91       	pop	r28
    607e:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

000064c6 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    64c6:	ab 01       	movw	r20, r22
    64c8:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    64ca:	87 e4       	ldi	r24, 0x47	; 71
    64cc:	90 e0       	ldi	r25, 0x00	; 0
    64ce:	0e 94 2a 31 	call	0x6254	; 0x6254 <eeprom_update_dword>
    64d2:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00006080 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6080:	cf 93       	push	r28
    6082:	df 93       	push	r29
    6084:	ec 01       	movw	r28, r24
    6086:	67 e4       	ldi	r22, 0x47	; 71
    6088:	70 e0       	ldi	r23, 0x00	; 0
    608a:	80 e0       	ldi	r24, 0x00	; 0
    608c:	0e 94 a9 32 	call	0x6552	; 0x6552 <eeprom_read_dword>
    6090:	68 83       	st	Y, r22
    6092:	79 83       	std	Y+1, r23	; 0x01
    6094:	8a 83       	std	Y+2, r24	; 0x02
    6096:	9b 83       	std	Y+3, r25	; 0x03
    6098:	df 91       	pop	r29
    609a:	cf 91       	pop	r28
    609c:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

000064d4 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    64d4:	ab 01       	movw	r20, r22
    64d6:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    64d8:	8b e4       	ldi	r24, 0x4B	; 75
    64da:	90 e0       	ldi	r25, 0x00	; 0
    64dc:	0e 94 2a 31 	call	0x6254	; 0x6254 <eeprom_update_dword>
    64e0:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

0000609e <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    609e:	cf 93       	push	r28
    60a0:	df 93       	push	r29
    60a2:	ec 01       	movw	r28, r24
    60a4:	6b e4       	ldi	r22, 0x4B	; 75
    60a6:	70 e0       	ldi	r23, 0x00	; 0
    60a8:	80 e0       	ldi	r24, 0x00	; 0
    60aa:	0e 94 a9 32 	call	0x6552	; 0x6552 <eeprom_read_dword>
    60ae:	68 83       	st	Y, r22
    60b0:	79 83       	std	Y+1, r23	; 0x01
    60b2:	8a 83       	std	Y+2, r24	; 0x02
    60b4:	9b 83       	std	Y+3, r25	; 0x03
    60b6:	df 91       	pop	r29
    60b8:	cf 91       	pop	r28
    60ba:	08 95       	ret

Disassembly of section .text.EM_set_collections:

000064e2 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    64e2:	24 2f       	mov	r18, r20
    64e4:	30 e0       	ldi	r19, 0x00	; 0
    64e6:	44 e6       	ldi	r20, 0x64	; 100
    64e8:	50 e0       	ldi	r21, 0x00	; 0
    64ea:	0e 94 89 29 	call	0x5312	; 0x5312 <eeprom_update_block>
    64ee:	08 95       	ret

Disassembly of section .text.EM_get_collections:

0000640c <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    640c:	26 2f       	mov	r18, r22
    640e:	30 e0       	ldi	r19, 0x00	; 0
    6410:	44 e6       	ldi	r20, 0x64	; 100
    6412:	50 e0       	ldi	r21, 0x00	; 0
    6414:	60 e0       	ldi	r22, 0x00	; 0
    6416:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <eeprom_read_block>
    641a:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

00006586 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    6586:	68 2f       	mov	r22, r24
    6588:	8f e4       	ldi	r24, 0x4F	; 79
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <eeprom_update_byte>
    6590:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00006592 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    6592:	6f e4       	ldi	r22, 0x4F	; 79
    6594:	70 e0       	ldi	r23, 0x00	; 0
    6596:	80 e0       	ldi	r24, 0x00	; 0
    6598:	0e 94 f5 31 	call	0x63ea	; 0x63ea <eeprom_read_byte>
}
    659c:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

0000659e <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    659e:	bc 01       	movw	r22, r24
    65a0:	80 e5       	ldi	r24, 0x50	; 80
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	0e 94 05 33 	call	0x660a	; 0x660a <eeprom_update_word>
    65a8:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

000065aa <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    65aa:	60 e5       	ldi	r22, 0x50	; 80
    65ac:	70 e0       	ldi	r23, 0x00	; 0
    65ae:	80 e0       	ldi	r24, 0x00	; 0
    65b0:	0e 94 b0 32 	call	0x6560	; 0x6560 <eeprom_read_word>
}
    65b4:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

000065b6 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    65b6:	68 2f       	mov	r22, r24
    65b8:	82 e5       	ldi	r24, 0x52	; 82
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <eeprom_update_byte>
    65c0:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

000065c2 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    65c2:	62 e5       	ldi	r22, 0x52	; 82
    65c4:	70 e0       	ldi	r23, 0x00	; 0
    65c6:	80 e0       	ldi	r24, 0x00	; 0
    65c8:	0e 94 f5 31 	call	0x63ea	; 0x63ea <eeprom_read_byte>
    65cc:	08 95       	ret

Disassembly of section .text.cb_blink:

000066ee <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    66ee:	0e 94 3d 33 	call	0x667a	; 0x667a <PM_HAL_LED_toggle>
    66f2:	08 95       	ret

Disassembly of section .text.blink:

00004daa <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    4daa:	cf 93       	push	r28
    4dac:	df 93       	push	r29
    4dae:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    4db0:	c0 e0       	ldi	r28, 0x00	; 0
    4db2:	19 c0       	rjmp	.+50     	; 0x4de6 <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    4db4:	80 e0       	ldi	r24, 0x00	; 0
    4db6:	0e 94 95 31 	call	0x632a	; 0x632a <PM_HAL_LED_power>
    4dba:	2f ef       	ldi	r18, 0xFF	; 255
    4dbc:	82 e5       	ldi	r24, 0x52	; 82
    4dbe:	97 e0       	ldi	r25, 0x07	; 7
    4dc0:	21 50       	subi	r18, 0x01	; 1
    4dc2:	80 40       	sbci	r24, 0x00	; 0
    4dc4:	90 40       	sbci	r25, 0x00	; 0
    4dc6:	e1 f7       	brne	.-8      	; 0x4dc0 <blink+0x16>
    4dc8:	00 c0       	rjmp	.+0      	; 0x4dca <blink+0x20>
    4dca:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    4dcc:	81 e0       	ldi	r24, 0x01	; 1
    4dce:	0e 94 95 31 	call	0x632a	; 0x632a <PM_HAL_LED_power>
    4dd2:	2f ef       	ldi	r18, 0xFF	; 255
    4dd4:	82 e5       	ldi	r24, 0x52	; 82
    4dd6:	97 e0       	ldi	r25, 0x07	; 7
    4dd8:	21 50       	subi	r18, 0x01	; 1
    4dda:	80 40       	sbci	r24, 0x00	; 0
    4ddc:	90 40       	sbci	r25, 0x00	; 0
    4dde:	e1 f7       	brne	.-8      	; 0x4dd8 <blink+0x2e>
    4de0:	00 c0       	rjmp	.+0      	; 0x4de2 <blink+0x38>
    4de2:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    4de4:	cf 5f       	subi	r28, 0xFF	; 255
    4de6:	cd 17       	cp	r28, r29
    4de8:	28 f3       	brcs	.-54     	; 0x4db4 <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    4dea:	80 e0       	ldi	r24, 0x00	; 0
    4dec:	0e 94 95 31 	call	0x632a	; 0x632a <PM_HAL_LED_power>
}
    4df0:	df 91       	pop	r29
    4df2:	cf 91       	pop	r28
    4df4:	08 95       	ret

Disassembly of section .text.err_code:

0000576e <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    576e:	cf 93       	push	r28
    5770:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    5772:	81 e0       	ldi	r24, 0x01	; 1
    5774:	0e 94 95 31 	call	0x632a	; 0x632a <PM_HAL_LED_power>
    5778:	2f ef       	ldi	r18, 0xFF	; 255
    577a:	83 ed       	ldi	r24, 0xD3	; 211
    577c:	90 e3       	ldi	r25, 0x30	; 48
    577e:	21 50       	subi	r18, 0x01	; 1
    5780:	80 40       	sbci	r24, 0x00	; 0
    5782:	90 40       	sbci	r25, 0x00	; 0
    5784:	e1 f7       	brne	.-8      	; 0x577e <err_code+0x10>
    5786:	00 c0       	rjmp	.+0      	; 0x5788 <err_code+0x1a>
    5788:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    578a:	8c 2f       	mov	r24, r28
    578c:	0e 94 d5 26 	call	0x4daa	; 0x4daa <blink>
    5790:	2f ef       	ldi	r18, 0xFF	; 255
    5792:	89 e6       	ldi	r24, 0x69	; 105
    5794:	98 e1       	ldi	r25, 0x18	; 24
    5796:	21 50       	subi	r18, 0x01	; 1
    5798:	80 40       	sbci	r24, 0x00	; 0
    579a:	90 40       	sbci	r25, 0x00	; 0
    579c:	e1 f7       	brne	.-8      	; 0x5796 <err_code+0x28>
    579e:	00 c0       	rjmp	.+0      	; 0x57a0 <err_code+0x32>
    57a0:	00 00       	nop
	_delay_ms(1000);
}
    57a2:	cf 91       	pop	r28
    57a4:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

000064f0 <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    64f0:	87 e7       	ldi	r24, 0x77	; 119
    64f2:	93 e3       	ldi	r25, 0x33	; 51
    64f4:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <TC2_HAL_subscribe>
    64f8:	80 93 9f 0f 	sts	0x0F9F, r24	; 0x800f9f <cbPointer>
    64fc:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

0000641c <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    641c:	80 91 9f 0f 	lds	r24, 0x0F9F	; 0x800f9f <cbPointer>
    6420:	0e 94 26 2b 	call	0x564c	; 0x564c <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    6424:	80 e0       	ldi	r24, 0x00	; 0
    6426:	0e 94 95 31 	call	0x632a	; 0x632a <PM_HAL_LED_power>
    642a:	08 95       	ret

Disassembly of section .text.LED_join_success:

00005460 <LED_join_success>:
}

void LED_join_success(){
    5460:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    5462:	c0 e0       	ldi	r28, 0x00	; 0
    5464:	19 c0       	rjmp	.+50     	; 0x5498 <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	0e 94 95 31 	call	0x632a	; 0x632a <PM_HAL_LED_power>
    546c:	2f ef       	ldi	r18, 0xFF	; 255
    546e:	80 e7       	ldi	r24, 0x70	; 112
    5470:	92 e0       	ldi	r25, 0x02	; 2
    5472:	21 50       	subi	r18, 0x01	; 1
    5474:	80 40       	sbci	r24, 0x00	; 0
    5476:	90 40       	sbci	r25, 0x00	; 0
    5478:	e1 f7       	brne	.-8      	; 0x5472 <LED_join_success+0x12>
    547a:	00 c0       	rjmp	.+0      	; 0x547c <LED_join_success+0x1c>
    547c:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    547e:	80 e0       	ldi	r24, 0x00	; 0
    5480:	0e 94 95 31 	call	0x632a	; 0x632a <PM_HAL_LED_power>
    5484:	2f ef       	ldi	r18, 0xFF	; 255
    5486:	80 e7       	ldi	r24, 0x70	; 112
    5488:	92 e0       	ldi	r25, 0x02	; 2
    548a:	21 50       	subi	r18, 0x01	; 1
    548c:	80 40       	sbci	r24, 0x00	; 0
    548e:	90 40       	sbci	r25, 0x00	; 0
    5490:	e1 f7       	brne	.-8      	; 0x548a <LED_join_success+0x2a>
    5492:	00 c0       	rjmp	.+0      	; 0x5494 <LED_join_success+0x34>
    5494:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    5496:	cf 5f       	subi	r28, 0xFF	; 255
    5498:	ca 30       	cpi	r28, 0x0A	; 10
    549a:	28 f3       	brcs	.-54     	; 0x5466 <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    549c:	cf 91       	pop	r28
    549e:	08 95       	ret

Disassembly of section .text.LED_join_denied:

000066aa <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    66aa:	83 e0       	ldi	r24, 0x03	; 3
    66ac:	0e 94 b7 2b 	call	0x576e	; 0x576e <err_code>
    66b0:	08 95       	ret

Disassembly of section .text.LED_conf_err:

000066b2 <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    66b2:	85 e0       	ldi	r24, 0x05	; 5
    66b4:	0e 94 b7 2b 	call	0x576e	; 0x576e <err_code>
    66b8:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

000066ba <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    66ba:	87 e0       	ldi	r24, 0x07	; 7
    66bc:	0e 94 b7 2b 	call	0x576e	; 0x576e <err_code>
    66c0:	08 95       	ret

Disassembly of section .text.parse_err:

00004930 <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    4930:	cf 92       	push	r12
    4932:	df 92       	push	r13
    4934:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    4936:	6c 01       	movw	r12, r24
    4938:	20 e8       	ldi	r18, 0x80	; 128
    493a:	e2 2e       	mov	r14, r18
    493c:	26 ec       	ldi	r18, 0xC6	; 198
    493e:	36 e0       	ldi	r19, 0x06	; 6
    4940:	40 e0       	ldi	r20, 0x00	; 0
    4942:	8e 2d       	mov	r24, r14
    4944:	b6 01       	movw	r22, r12
    4946:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    494a:	89 2b       	or	r24, r25
    494c:	a1 f0       	breq	.+40     	; 0x4976 <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    494e:	21 ed       	ldi	r18, 0xD1	; 209
    4950:	36 e0       	ldi	r19, 0x06	; 6
    4952:	40 e0       	ldi	r20, 0x00	; 0
    4954:	8e 2d       	mov	r24, r14
    4956:	b6 01       	movw	r22, r12
    4958:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    495c:	89 2b       	or	r24, r25
    495e:	69 f0       	breq	.+26     	; 0x497a <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    4960:	28 ed       	ldi	r18, 0xD8	; 216
    4962:	36 e0       	ldi	r19, 0x06	; 6
    4964:	40 e0       	ldi	r20, 0x00	; 0
    4966:	8e 2d       	mov	r24, r14
    4968:	b6 01       	movw	r22, r12
    496a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    496e:	89 2b       	or	r24, r25
    4970:	31 f4       	brne	.+12     	; 0x497e <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    4972:	83 e0       	ldi	r24, 0x03	; 3
    4974:	05 c0       	rjmp	.+10     	; 0x4980 <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    4976:	82 e0       	ldi	r24, 0x02	; 2
    4978:	03 c0       	rjmp	.+6      	; 0x4980 <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    497a:	82 e0       	ldi	r24, 0x02	; 2
    497c:	01 c0       	rjmp	.+2      	; 0x4980 <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    497e:	81 e0       	ldi	r24, 0x01	; 1
}
    4980:	ef 90       	pop	r14
    4982:	df 90       	pop	r13
    4984:	cf 90       	pop	r12
    4986:	08 95       	ret

Disassembly of section .text.JN_join_network:

00001490 <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
    1490:	af 92       	push	r10
    1492:	bf 92       	push	r11
    1494:	cf 92       	push	r12
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	28 97       	sbiw	r28, 0x08	; 8
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	5c 01       	movw	r10, r24
    14b4:	6b 01       	movw	r12, r22
    14b6:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
    14b8:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    14ba:	e1 2f       	mov	r30, r17
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	ed 30       	cpi	r30, 0x0D	; 13
    14c0:	f1 05       	cpc	r31, r1
    14c2:	d8 f7       	brcc	.-10     	; 0x14ba <JN_join_network+0x2a>
    14c4:	e2 5c       	subi	r30, 0xC2	; 194
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	0c 94 ff 32 	jmp	0x65fe	; 0x65fe <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
    14cc:	0e 94 45 33 	call	0x668a	; 0x668a <rn2483_reset_active>
    14d0:	2f ef       	ldi	r18, 0xFF	; 255
    14d2:	89 e6       	ldi	r24, 0x69	; 105
    14d4:	98 e1       	ldi	r25, 0x18	; 24
    14d6:	21 50       	subi	r18, 0x01	; 1
    14d8:	80 40       	sbci	r24, 0x00	; 0
    14da:	90 40       	sbci	r25, 0x00	; 0
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <JN_join_network+0x46>
    14de:	00 c0       	rjmp	.+0      	; 0x14e0 <JN_join_network+0x50>
    14e0:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
    14e2:	0e 94 49 33 	call	0x6692	; 0x6692 <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
    14e6:	4c e0       	ldi	r20, 0x0C	; 12
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	62 e0       	ldi	r22, 0x02	; 2
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	ce 01       	movw	r24, r28
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
    14f6:	26 ee       	ldi	r18, 0xE6	; 230
    14f8:	36 e0       	ldi	r19, 0x06	; 6
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	ce 01       	movw	r24, r28
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
    1506:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1508:	d8 cf       	rjmp	.-80     	; 0x14ba <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
    150a:	4d ee       	ldi	r20, 0xED	; 237
    150c:	56 e0       	ldi	r21, 0x06	; 6
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	8e e5       	ldi	r24, 0x5E	; 94
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1518:	6e e5       	ldi	r22, 0x5E	; 94
    151a:	72 e0       	ldi	r23, 0x02	; 2
    151c:	80 e8       	ldi	r24, 0x80	; 128
    151e:	0e 94 45 22 	call	0x448a	; 0x448a <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
    1522:	4c e0       	ldi	r20, 0x0C	; 12
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	63 e0       	ldi	r22, 0x03	; 3
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	ce 01       	movw	r24, r28
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1532:	2b ef       	ldi	r18, 0xFB	; 251
    1534:	36 e0       	ldi	r19, 0x06	; 6
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1542:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1544:	ba cf       	rjmp	.-140    	; 0x14ba <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
    1546:	b5 01       	movw	r22, r10
    1548:	8e e5       	ldi	r24, 0x5E	; 94
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	0e 94 4c 28 	call	0x5098	; 0x5098 <mac_set_deveui>
				attach_ending(lm_msg);
    1550:	8e e5       	ldi	r24, 0x5E	; 94
    1552:	92 e0       	ldi	r25, 0x02	; 2
    1554:	0e 94 a7 30 	call	0x614e	; 0x614e <attach_ending>
				uart0_hal_send_string(lm_msg);
    1558:	6e e5       	ldi	r22, 0x5E	; 94
    155a:	72 e0       	ldi	r23, 0x02	; 2
    155c:	80 e8       	ldi	r24, 0x80	; 128
    155e:	0e 94 45 22 	call	0x448a	; 0x448a <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
    1562:	4c e0       	ldi	r20, 0x0C	; 12
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	64 e0       	ldi	r22, 0x04	; 4
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	ce 01       	movw	r24, r28
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1572:	2b ef       	ldi	r18, 0xFB	; 251
    1574:	36 e0       	ldi	r19, 0x06	; 6
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	ce 01       	movw	r24, r28
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1582:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1584:	9a cf       	rjmp	.-204    	; 0x14ba <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
    1586:	b7 01       	movw	r22, r14
    1588:	8e e5       	ldi	r24, 0x5E	; 94
    158a:	92 e0       	ldi	r25, 0x02	; 2
    158c:	0e 94 94 28 	call	0x5128	; 0x5128 <mac_set_appkey>
				attach_ending(lm_msg);
    1590:	8e e5       	ldi	r24, 0x5E	; 94
    1592:	92 e0       	ldi	r25, 0x02	; 2
    1594:	0e 94 a7 30 	call	0x614e	; 0x614e <attach_ending>
				uart0_hal_send_string(lm_msg);
    1598:	6e e5       	ldi	r22, 0x5E	; 94
    159a:	72 e0       	ldi	r23, 0x02	; 2
    159c:	80 e8       	ldi	r24, 0x80	; 128
    159e:	0e 94 45 22 	call	0x448a	; 0x448a <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
    15a2:	4c e0       	ldi	r20, 0x0C	; 12
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	65 e0       	ldi	r22, 0x05	; 5
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	ce 01       	movw	r24, r28
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    15b2:	2b ef       	ldi	r18, 0xFB	; 251
    15b4:	36 e0       	ldi	r19, 0x06	; 6
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    15c2:	11 e0       	ldi	r17, 0x01	; 1
			break;
    15c4:	7a cf       	rjmp	.-268    	; 0x14ba <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
    15c6:	b6 01       	movw	r22, r12
    15c8:	8e e5       	ldi	r24, 0x5E	; 94
    15ca:	92 e0       	ldi	r25, 0x02	; 2
    15cc:	0e 94 70 28 	call	0x50e0	; 0x50e0 <mac_set_appeui>
				attach_ending(lm_msg);
    15d0:	8e e5       	ldi	r24, 0x5E	; 94
    15d2:	92 e0       	ldi	r25, 0x02	; 2
    15d4:	0e 94 a7 30 	call	0x614e	; 0x614e <attach_ending>
				uart0_hal_send_string(lm_msg);
    15d8:	6e e5       	ldi	r22, 0x5E	; 94
    15da:	72 e0       	ldi	r23, 0x02	; 2
    15dc:	80 e8       	ldi	r24, 0x80	; 128
    15de:	0e 94 45 22 	call	0x448a	; 0x448a <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
    15e2:	4c e0       	ldi	r20, 0x0C	; 12
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	66 e0       	ldi	r22, 0x06	; 6
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	ce 01       	movw	r24, r28
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    15f2:	2b ef       	ldi	r18, 0xFB	; 251
    15f4:	36 e0       	ldi	r19, 0x06	; 6
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1602:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1604:	5a cf       	rjmp	.-332    	; 0x14ba <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	8e e5       	ldi	r24, 0x5E	; 94
    160a:	92 e0       	ldi	r25, 0x02	; 2
    160c:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <mac_set_ADR>
				attach_ending(lm_msg);
    1610:	8e e5       	ldi	r24, 0x5E	; 94
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	0e 94 a7 30 	call	0x614e	; 0x614e <attach_ending>
				uart0_hal_send_string(lm_msg);
    1618:	6e e5       	ldi	r22, 0x5E	; 94
    161a:	72 e0       	ldi	r23, 0x02	; 2
    161c:	80 e8       	ldi	r24, 0x80	; 128
    161e:	0e 94 45 22 	call	0x448a	; 0x448a <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
    1622:	4c e0       	ldi	r20, 0x0C	; 12
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	67 e0       	ldi	r22, 0x07	; 7
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	ce 01       	movw	r24, r28
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1632:	2b ef       	ldi	r18, 0xFB	; 251
    1634:	36 e0       	ldi	r19, 0x06	; 6
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	ce 01       	movw	r24, r28
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1642:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1644:	3a cf       	rjmp	.-396    	; 0x14ba <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
    1646:	4e ef       	ldi	r20, 0xFE	; 254
    1648:	56 e0       	ldi	r21, 0x06	; 6
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	8e e5       	ldi	r24, 0x5E	; 94
    164e:	92 e0       	ldi	r25, 0x02	; 2
    1650:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1654:	6e e5       	ldi	r22, 0x5E	; 94
    1656:	72 e0       	ldi	r23, 0x02	; 2
    1658:	80 e8       	ldi	r24, 0x80	; 128
    165a:	0e 94 45 22 	call	0x448a	; 0x448a <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    165e:	4c e0       	ldi	r20, 0x0C	; 12
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	68 e0       	ldi	r22, 0x08	; 8
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	ce 01       	movw	r24, r28
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    166e:	2b ef       	ldi	r18, 0xFB	; 251
    1670:	36 e0       	ldi	r19, 0x06	; 6
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	ce 01       	movw	r24, r28
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    167e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1680:	1c cf       	rjmp	.-456    	; 0x14ba <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    1682:	47 e0       	ldi	r20, 0x07	; 7
    1684:	57 e0       	ldi	r21, 0x07	; 7
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	8e e5       	ldi	r24, 0x5E	; 94
    168a:	92 e0       	ldi	r25, 0x02	; 2
    168c:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1690:	6e e5       	ldi	r22, 0x5E	; 94
    1692:	72 e0       	ldi	r23, 0x02	; 2
    1694:	80 e8       	ldi	r24, 0x80	; 128
    1696:	0e 94 45 22 	call	0x448a	; 0x448a <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    169a:	4a e0       	ldi	r20, 0x0A	; 10
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	69 e0       	ldi	r22, 0x09	; 9
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	ce 01       	movw	r24, r28
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    16aa:	2b ef       	ldi	r18, 0xFB	; 251
    16ac:	36 e0       	ldi	r19, 0x06	; 6
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	ce 01       	movw	r24, r28
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    16ba:	11 e0       	ldi	r17, 0x01	; 1
			break;
    16bc:	fe ce       	rjmp	.-516    	; 0x14ba <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    16be:	4a e0       	ldi	r20, 0x0A	; 10
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	6b e0       	ldi	r22, 0x0B	; 11
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	ce 01       	movw	r24, r28
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
    16ce:	25 e1       	ldi	r18, 0x15	; 21
    16d0:	37 e0       	ldi	r19, 0x07	; 7
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	ce 01       	movw	r24, r28
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    16de:	11 e0       	ldi	r17, 0x01	; 1
			break;
    16e0:	ec ce       	rjmp	.-552    	; 0x14ba <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
    16e2:	8e e5       	ldi	r24, 0x5E	; 94
    16e4:	92 e0       	ldi	r25, 0x02	; 2
    16e6:	0e 94 98 24 	call	0x4930	; 0x4930 <parse_err>
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <JN_join_network+0x284>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    16ec:	0e 94 40 32 	call	0x6480	; 0x6480 <uart0_hal_message_ready>
    16f0:	88 23       	and	r24, r24
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <JN_join_network+0x266>
    16f4:	e2 ce       	rjmp	.-572    	; 0x14ba <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
    16f6:	8e e5       	ldi	r24, 0x5E	; 94
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    16fe:	6e e5       	ldi	r22, 0x5E	; 94
    1700:	72 e0       	ldi	r23, 0x02	; 2
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	0e 94 10 24 	call	0x4820	; 0x4820 <util_matchMessage>
    170a:	18 2f       	mov	r17, r24
    170c:	d6 ce       	rjmp	.-596    	; 0x14ba <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <JN_join_network+0x284>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    1712:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    1714:	28 96       	adiw	r28, 0x08	; 8
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	08 95       	ret

Disassembly of section .text.set_block_uplink:

00006224 <set_block_uplink>:
	util_send_break(res);
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    6224:	89 e9       	ldi	r24, 0x99	; 153
    6226:	90 e3       	ldi	r25, 0x30	; 48
    6228:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <TC2_HAL_subscribe>
    622c:	80 93 a0 0f 	sts	0x0FA0, r24	; 0x800fa0 <subPointer>
	busy=true;
    6230:	81 e0       	ldi	r24, 0x01	; 1
    6232:	80 93 a1 0f 	sts	0x0FA1, r24	; 0x800fa1 <busy>
	cnt=0;
    6236:	10 92 a2 0f 	sts	0x0FA2, r1	; 0x800fa2 <cnt>
    623a:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

00006132 <cb_block_uplink>:
}

static void cb_block_uplink(){
	cnt++;
    6132:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <cnt>
    6136:	8f 5f       	subi	r24, 0xFF	; 255
    6138:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    613c:	86 30       	cpi	r24, 0x06	; 6
    613e:	30 f0       	brcs	.+12     	; 0x614c <cb_block_uplink+0x1a>
		busy=false;
    6140:	10 92 a1 0f 	sts	0x0FA1, r1	; 0x800fa1 <busy>
		TC2_HAL_cancel(subPointer);
    6144:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <subPointer>
    6148:	0e 94 26 2b 	call	0x564c	; 0x564c <TC2_HAL_cancel>
    614c:	08 95       	ret

Disassembly of section .text.LM_join_network:

000066f4 <LM_join_network>:

static void cb_block_uplink();
static void set_block_uplink();

LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    66f4:	0e 94 48 0a 	call	0x1490	; 0x1490 <JN_join_network>
}
    66f8:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00005cfa <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    5cfa:	1f 93       	push	r17
    5cfc:	cf 93       	push	r28
    5cfe:	df 93       	push	r29
    5d00:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    5d02:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <busy>
    5d06:	91 11       	cpse	r25, r1
    5d08:	0a c0       	rjmp	.+20     	; 0x5d1e <LM_send_uplink+0x24>
    5d0a:	16 2f       	mov	r17, r22
    5d0c:	e9 01       	movw	r28, r18
	set_block_uplink();
    5d0e:	0e 94 12 31 	call	0x6224	; 0x6224 <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    5d12:	41 2f       	mov	r20, r17
    5d14:	be 01       	movw	r22, r28
    5d16:	84 e6       	ldi	r24, 0x64	; 100
    5d18:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <SU_send_uplink>
    5d1c:	01 c0       	rjmp	.+2      	; 0x5d20 <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    5d1e:	82 e0       	ldi	r24, 0x02	; 2
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    5d20:	df 91       	pop	r29
    5d22:	cf 91       	pop	r28
    5d24:	1f 91       	pop	r17
    5d26:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

000066fa <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
    66fa:	0e 94 82 23 	call	0x4704	; 0x4704 <SC_put_to_sleep>
}
    66fe:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00006700 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    6700:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <SC_wake_up>
}
    6704:	08 95       	ret

Disassembly of section .text.LM_is_free:

00006648 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    6648:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <busy>
}
    664c:	81 e0       	ldi	r24, 0x01	; 1
    664e:	89 27       	eor	r24, r25
    6650:	08 95       	ret

Disassembly of section .text.LM_reset_module:

00006706 <LM_reset_module>:

LM_STATUS LM_reset_module(){
	return util_reset_module();
    6706:	0e 94 fe 28 	call	0x51fc	; 0x51fc <util_reset_module>
}
    670a:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

0000670c <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    670c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <util_lora_forward_msg>
    6710:	08 95       	ret

Disassembly of section .text.LM_send_break:

00006712 <LM_send_break>:
}

void LM_send_break(char res[]){
	util_send_break(res);
    6712:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <util_send_break>
    6716:	08 95       	ret

Disassembly of section .text.tohex:

00003f68 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    3f68:	6f 92       	push	r6
    3f6a:	7f 92       	push	r7
    3f6c:	8f 92       	push	r8
    3f6e:	ef 92       	push	r14
    3f70:	ff 92       	push	r15
    3f72:	0f 93       	push	r16
    3f74:	1f 93       	push	r17
    3f76:	cf 93       	push	r28
    3f78:	df 93       	push	r29
    3f7a:	7c 01       	movw	r14, r24
    3f7c:	3a 01       	movw	r6, r20
    3f7e:	86 2e       	mov	r8, r22
    3f80:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    3f82:	c0 e0       	ldi	r28, 0x00	; 0
    3f84:	d0 e0       	ldi	r29, 0x00	; 0
    3f86:	25 c0       	rjmp	.+74     	; 0x3fd2 <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    3f88:	a8 2d       	mov	r26, r8
    3f8a:	c3 01       	movw	r24, r6
    3f8c:	8c 0f       	add	r24, r28
    3f8e:	9d 1f       	adc	r25, r29
    3f90:	a1 1d       	adc	r26, r1
    3f92:	d7 fd       	sbrc	r29, 7
    3f94:	aa 95       	dec	r26
    3f96:	fc 01       	movw	r30, r24
    3f98:	24 91       	lpm	r18, Z
    3f9a:	a7 fd       	sbrc	r26, 7
    3f9c:	20 81       	ld	r18, Z
    3f9e:	ce 01       	movw	r24, r28
    3fa0:	88 0f       	add	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	1f 92       	push	r1
    3fa6:	2f 93       	push	r18
    3fa8:	23 e5       	ldi	r18, 0x53	; 83
    3faa:	36 e0       	ldi	r19, 0x06	; 6
    3fac:	40 e0       	ldi	r20, 0x00	; 0
    3fae:	4f 93       	push	r20
    3fb0:	3f 93       	push	r19
    3fb2:	2f 93       	push	r18
    3fb4:	8e 0d       	add	r24, r14
    3fb6:	9f 1d       	adc	r25, r15
    3fb8:	9f 93       	push	r25
    3fba:	8f 93       	push	r24
    3fbc:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    3fc0:	21 96       	adiw	r28, 0x01	; 1
    3fc2:	8d b7       	in	r24, 0x3d	; 61
    3fc4:	9e b7       	in	r25, 0x3e	; 62
    3fc6:	07 96       	adiw	r24, 0x07	; 7
    3fc8:	0f b6       	in	r0, 0x3f	; 63
    3fca:	f8 94       	cli
    3fcc:	9e bf       	out	0x3e, r25	; 62
    3fce:	0f be       	out	0x3f, r0	; 63
    3fd0:	8d bf       	out	0x3d, r24	; 61
    3fd2:	c0 17       	cp	r28, r16
    3fd4:	d1 07       	cpc	r29, r17
    3fd6:	c4 f2       	brlt	.-80     	; 0x3f88 <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	1f 91       	pop	r17
    3fde:	0f 91       	pop	r16
    3fe0:	ff 90       	pop	r15
    3fe2:	ef 90       	pop	r14
    3fe4:	8f 90       	pop	r8
    3fe6:	7f 90       	pop	r7
    3fe8:	6f 90       	pop	r6
    3fea:	08 95       	ret

Disassembly of section .text.attach_ending:

0000614e <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    614e:	fc 01       	movw	r30, r24
    6150:	01 90       	ld	r0, Z+
    6152:	00 20       	and	r0, r0
    6154:	e9 f7       	brne	.-6      	; 0x6150 <attach_ending+0x2>
    6156:	cf 01       	movw	r24, r30
    6158:	23 e0       	ldi	r18, 0x03	; 3
    615a:	30 e0       	ldi	r19, 0x00	; 0
    615c:	48 e5       	ldi	r20, 0x58	; 88
    615e:	56 e0       	ldi	r21, 0x06	; 6
    6160:	60 e0       	ldi	r22, 0x00	; 0
    6162:	01 97       	sbiw	r24, 0x01	; 1
    6164:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
    6168:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

000059f4 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    59f4:	cf 93       	push	r28
    59f6:	df 93       	push	r29
    59f8:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    59fa:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    59fe:	fe 01       	movw	r30, r28
    5a00:	01 90       	ld	r0, Z+
    5a02:	00 20       	and	r0, r0
    5a04:	e9 f7       	brne	.-6      	; 0x5a00 <cmd_with_ending+0xc>
    5a06:	cf 01       	movw	r24, r30
    5a08:	23 e0       	ldi	r18, 0x03	; 3
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	48 e5       	ldi	r20, 0x58	; 88
    5a0e:	56 e0       	ldi	r21, 0x06	; 6
    5a10:	60 e0       	ldi	r22, 0x00	; 0
    5a12:	01 97       	sbiw	r24, 0x01	; 1
    5a14:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
	return strlen(buffer);
    5a18:	be 01       	movw	r22, r28
    5a1a:	80 e8       	ldi	r24, 0x80	; 128
    5a1c:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
}
    5a20:	df 91       	pop	r29
    5a22:	cf 91       	pop	r28
    5a24:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

00004764 <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    4764:	cf 93       	push	r28
    4766:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    4768:	44 36       	cpi	r20, 0x64	; 100
    476a:	51 05       	cpc	r21, r1
    476c:	61 05       	cpc	r22, r1
    476e:	71 05       	cpc	r23, r1
    4770:	18 f1       	brcs	.+70     	; 0x47b8 <sys_sleep_cmd+0x54>
    4772:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    4774:	7f 93       	push	r23
    4776:	6f 93       	push	r22
    4778:	5f 93       	push	r21
    477a:	4f 93       	push	r20
    477c:	8b e5       	ldi	r24, 0x5B	; 91
    477e:	96 e0       	ldi	r25, 0x06	; 6
    4780:	a0 e0       	ldi	r26, 0x00	; 0
    4782:	af 93       	push	r26
    4784:	9f 93       	push	r25
    4786:	8f 93       	push	r24
    4788:	85 e6       	ldi	r24, 0x65	; 101
    478a:	96 e0       	ldi	r25, 0x06	; 6
    478c:	a0 e0       	ldi	r26, 0x00	; 0
    478e:	af 93       	push	r26
    4790:	9f 93       	push	r25
    4792:	8f 93       	push	r24
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    return strlen(buffer);
    479c:	be 01       	movw	r22, r28
    479e:	80 e8       	ldi	r24, 0x80	; 128
    47a0:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    47a4:	2d b7       	in	r18, 0x3d	; 61
    47a6:	3e b7       	in	r19, 0x3e	; 62
    47a8:	24 5f       	subi	r18, 0xF4	; 244
    47aa:	3f 4f       	sbci	r19, 0xFF	; 255
    47ac:	0f b6       	in	r0, 0x3f	; 63
    47ae:	f8 94       	cli
    47b0:	3e bf       	out	0x3e, r19	; 62
    47b2:	0f be       	out	0x3f, r0	; 63
    47b4:	2d bf       	out	0x3d, r18	; 61
    47b6:	02 c0       	rjmp	.+4      	; 0x47bc <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    47b8:	8f ef       	ldi	r24, 0xFF	; 255
    47ba:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    47bc:	df 91       	pop	r29
    47be:	cf 91       	pop	r28
    47c0:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00004cc2 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    4cc2:	0f 93       	push	r16
    4cc4:	1f 93       	push	r17
    4cc6:	cf 93       	push	r28
    4cc8:	df 93       	push	r29
    4cca:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    4ccc:	2f 93       	push	r18
    4cce:	1f 93       	push	r17
    4cd0:	0f 93       	push	r16
    4cd2:	6f 93       	push	r22
    4cd4:	5f 93       	push	r21
    4cd6:	4f 93       	push	r20
    4cd8:	8c e6       	ldi	r24, 0x6C	; 108
    4cda:	96 e0       	ldi	r25, 0x06	; 6
    4cdc:	a0 e0       	ldi	r26, 0x00	; 0
    4cde:	af 93       	push	r26
    4ce0:	9f 93       	push	r25
    4ce2:	8f 93       	push	r24
    4ce4:	df 93       	push	r29
    4ce6:	cf 93       	push	r28
    4ce8:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    return strlen(buffer);
    4cec:	be 01       	movw	r22, r28
    4cee:	80 e8       	ldi	r24, 0x80	; 128
    4cf0:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    4cf4:	2d b7       	in	r18, 0x3d	; 61
    4cf6:	3e b7       	in	r19, 0x3e	; 62
    4cf8:	25 5f       	subi	r18, 0xF5	; 245
    4cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    4cfc:	0f b6       	in	r0, 0x3f	; 63
    4cfe:	f8 94       	cli
    4d00:	3e bf       	out	0x3e, r19	; 62
    4d02:	0f be       	out	0x3f, r0	; 63
    4d04:	2d bf       	out	0x3d, r18	; 61
}
    4d06:	df 91       	pop	r29
    4d08:	cf 91       	pop	r28
    4d0a:	1f 91       	pop	r17
    4d0c:	0f 91       	pop	r16
    4d0e:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00005098 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    5098:	cf 92       	push	r12
    509a:	df 92       	push	r13
    509c:	ef 92       	push	r14
    509e:	0f 93       	push	r16
    50a0:	1f 93       	push	r17
    50a2:	cf 93       	push	r28
    50a4:	df 93       	push	r29
    50a6:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    50a8:	6b 01       	movw	r12, r22
    50aa:	80 e8       	ldi	r24, 0x80	; 128
    50ac:	e8 2e       	mov	r14, r24
    50ae:	8e 2d       	mov	r24, r14
    50b0:	b6 01       	movw	r22, r12
    50b2:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    50b6:	40 97       	sbiw	r24, 0x10	; 16
    50b8:	49 f4       	brne	.+18     	; 0x50cc <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    50ba:	2e 2d       	mov	r18, r14
    50bc:	86 01       	movw	r16, r12
    50be:	42 e7       	ldi	r20, 0x72	; 114
    50c0:	56 e0       	ldi	r21, 0x06	; 6
    50c2:	60 e0       	ldi	r22, 0x00	; 0
    50c4:	ce 01       	movw	r24, r28
    50c6:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <mac_set_parameter>
    50ca:	02 c0       	rjmp	.+4      	; 0x50d0 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    50cc:	8f ef       	ldi	r24, 0xFF	; 255
    50ce:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    50d0:	df 91       	pop	r29
    50d2:	cf 91       	pop	r28
    50d4:	1f 91       	pop	r17
    50d6:	0f 91       	pop	r16
    50d8:	ef 90       	pop	r14
    50da:	df 90       	pop	r13
    50dc:	cf 90       	pop	r12
    50de:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

000050e0 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    50e0:	cf 92       	push	r12
    50e2:	df 92       	push	r13
    50e4:	ef 92       	push	r14
    50e6:	0f 93       	push	r16
    50e8:	1f 93       	push	r17
    50ea:	cf 93       	push	r28
    50ec:	df 93       	push	r29
    50ee:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    50f0:	6b 01       	movw	r12, r22
    50f2:	80 e8       	ldi	r24, 0x80	; 128
    50f4:	e8 2e       	mov	r14, r24
    50f6:	8e 2d       	mov	r24, r14
    50f8:	b6 01       	movw	r22, r12
    50fa:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    50fe:	40 97       	sbiw	r24, 0x10	; 16
    5100:	49 f4       	brne	.+18     	; 0x5114 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    5102:	2e 2d       	mov	r18, r14
    5104:	86 01       	movw	r16, r12
    5106:	41 e8       	ldi	r20, 0x81	; 129
    5108:	56 e0       	ldi	r21, 0x06	; 6
    510a:	60 e0       	ldi	r22, 0x00	; 0
    510c:	ce 01       	movw	r24, r28
    510e:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <mac_set_parameter>
    5112:	02 c0       	rjmp	.+4      	; 0x5118 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    5114:	8f ef       	ldi	r24, 0xFF	; 255
    5116:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    5118:	df 91       	pop	r29
    511a:	cf 91       	pop	r28
    511c:	1f 91       	pop	r17
    511e:	0f 91       	pop	r16
    5120:	ef 90       	pop	r14
    5122:	df 90       	pop	r13
    5124:	cf 90       	pop	r12
    5126:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00005128 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    5128:	cf 92       	push	r12
    512a:	df 92       	push	r13
    512c:	ef 92       	push	r14
    512e:	0f 93       	push	r16
    5130:	1f 93       	push	r17
    5132:	cf 93       	push	r28
    5134:	df 93       	push	r29
    5136:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    5138:	6b 01       	movw	r12, r22
    513a:	80 e8       	ldi	r24, 0x80	; 128
    513c:	e8 2e       	mov	r14, r24
    513e:	8e 2d       	mov	r24, r14
    5140:	b6 01       	movw	r22, r12
    5142:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    5146:	80 97       	sbiw	r24, 0x20	; 32
    5148:	49 f4       	brne	.+18     	; 0x515c <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    514a:	2e 2d       	mov	r18, r14
    514c:	86 01       	movw	r16, r12
    514e:	40 e9       	ldi	r20, 0x90	; 144
    5150:	56 e0       	ldi	r21, 0x06	; 6
    5152:	60 e0       	ldi	r22, 0x00	; 0
    5154:	ce 01       	movw	r24, r28
    5156:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <mac_set_parameter>
    515a:	02 c0       	rjmp	.+4      	; 0x5160 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    515c:	8f ef       	ldi	r24, 0xFF	; 255
    515e:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    5160:	df 91       	pop	r29
    5162:	cf 91       	pop	r28
    5164:	1f 91       	pop	r17
    5166:	0f 91       	pop	r16
    5168:	ef 90       	pop	r14
    516a:	df 90       	pop	r13
    516c:	cf 90       	pop	r12
    516e:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00005bae <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    5bae:	0f 93       	push	r16
    5bb0:	1f 93       	push	r17
	if(state==0){
    5bb2:	61 11       	cpse	r22, r1
    5bb4:	09 c0       	rjmp	.+18     	; 0x5bc8 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    5bb6:	0f e9       	ldi	r16, 0x9F	; 159
    5bb8:	16 e0       	ldi	r17, 0x06	; 6
    5bba:	20 e0       	ldi	r18, 0x00	; 0
    5bbc:	43 ea       	ldi	r20, 0xA3	; 163
    5bbe:	56 e0       	ldi	r21, 0x06	; 6
    5bc0:	60 e0       	ldi	r22, 0x00	; 0
    5bc2:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <mac_set_parameter>
    5bc6:	08 c0       	rjmp	.+16     	; 0x5bd8 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    5bc8:	0f ea       	ldi	r16, 0xAF	; 175
    5bca:	16 e0       	ldi	r17, 0x06	; 6
    5bcc:	20 e0       	ldi	r18, 0x00	; 0
    5bce:	43 ea       	ldi	r20, 0xA3	; 163
    5bd0:	56 e0       	ldi	r21, 0x06	; 6
    5bd2:	60 e0       	ldi	r22, 0x00	; 0
    5bd4:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <mac_set_parameter>
	}
}
    5bd8:	1f 91       	pop	r17
    5bda:	0f 91       	pop	r16
    5bdc:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00003796 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    3796:	df 92       	push	r13
    3798:	ef 92       	push	r14
    379a:	ff 92       	push	r15
    379c:	0f 93       	push	r16
    379e:	1f 93       	push	r17
    37a0:	cf 93       	push	r28
    37a2:	df 93       	push	r29
    37a4:	cd b7       	in	r28, 0x3d	; 61
    37a6:	de b7       	in	r29, 0x3e	; 62
    37a8:	c7 56       	subi	r28, 0x67	; 103
    37aa:	d1 09       	sbc	r29, r1
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    37b8:	9f ef       	ldi	r25, 0xFF	; 255
    37ba:	96 0f       	add	r25, r22
    37bc:	9f 3d       	cpi	r25, 0xDF	; 223
    37be:	68 f5       	brcc	.+90     	; 0x381a <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    37c0:	9f ef       	ldi	r25, 0xFF	; 255
    37c2:	92 0f       	add	r25, r18
    37c4:	93 33       	cpi	r25, 0x33	; 51
    37c6:	60 f5       	brcc	.+88     	; 0x3820 <mac_tx_confirmed+0x8a>
    37c8:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	60 e8       	ldi	r22, 0x80	; 128
    37ce:	ce 01       	movw	r24, r28
    37d0:	01 96       	adiw	r24, 0x01	; 1
    37d2:	7c 01       	movw	r14, r24
    37d4:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    37d8:	c7 01       	movw	r24, r14
    37da:	a0 e8       	ldi	r26, 0x80	; 128
    37dc:	af 93       	push	r26
    37de:	9f 93       	push	r25
    37e0:	ef 92       	push	r14
    37e2:	1f 92       	push	r1
    37e4:	df 92       	push	r13
    37e6:	82 eb       	ldi	r24, 0xB2	; 178
    37e8:	96 e0       	ldi	r25, 0x06	; 6
    37ea:	a0 e0       	ldi	r26, 0x00	; 0
    37ec:	af 93       	push	r26
    37ee:	9f 93       	push	r25
    37f0:	8f 93       	push	r24
    37f2:	8d eb       	ldi	r24, 0xBD	; 189
    37f4:	96 e0       	ldi	r25, 0x06	; 6
    37f6:	a0 e0       	ldi	r26, 0x00	; 0
    37f8:	af 93       	push	r26
    37fa:	9f 93       	push	r25
    37fc:	8f 93       	push	r24
    37fe:	1f 93       	push	r17
    3800:	0f 93       	push	r16
    3802:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    
	
    return strlen(buffer);
    3806:	b8 01       	movw	r22, r16
    3808:	80 e8       	ldi	r24, 0x80	; 128
    380a:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	f8 94       	cli
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	05 c0       	rjmp	.+10     	; 0x3824 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    381a:	8f ef       	ldi	r24, 0xFF	; 255
    381c:	9f ef       	ldi	r25, 0xFF	; 255
    381e:	02 c0       	rjmp	.+4      	; 0x3824 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    3820:	8f ef       	ldi	r24, 0xFF	; 255
    3822:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    3824:	c9 59       	subi	r28, 0x99	; 153
    3826:	df 4f       	sbci	r29, 0xFF	; 255
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	de bf       	out	0x3e, r29	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	cd bf       	out	0x3d, r28	; 61
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	ff 90       	pop	r15
    383c:	ef 90       	pop	r14
    383e:	df 90       	pop	r13
    3840:	08 95       	ret

Disassembly of section .text.decode_tx_response:

000045ce <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    45ce:	cf 92       	push	r12
    45d0:	df 92       	push	r13
    45d2:	ef 92       	push	r14
    45d4:	6b 01       	movw	r12, r22
    45d6:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    45d8:	2e e1       	ldi	r18, 0x1E	; 30
    45da:	37 e0       	ldi	r19, 0x07	; 7
    45dc:	40 e0       	ldi	r20, 0x00	; 0
    45de:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    45e2:	89 2b       	or	r24, r25
    45e4:	e9 f0       	breq	.+58     	; 0x4620 <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    45e6:	29 e2       	ldi	r18, 0x29	; 41
    45e8:	37 e0       	ldi	r19, 0x07	; 7
    45ea:	40 e0       	ldi	r20, 0x00	; 0
    45ec:	8e 2d       	mov	r24, r14
    45ee:	b6 01       	movw	r22, r12
    45f0:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    45f4:	89 2b       	or	r24, r25
    45f6:	b1 f0       	breq	.+44     	; 0x4624 <decode_tx_response+0x56>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    45f8:	21 e3       	ldi	r18, 0x31	; 49
    45fa:	37 e0       	ldi	r19, 0x07	; 7
    45fc:	40 e0       	ldi	r20, 0x00	; 0
    45fe:	8e 2d       	mov	r24, r14
    4600:	b6 01       	movw	r22, r12
    4602:	0e 94 03 28 	call	0x5006	; 0x5006 <util_strbeginswith>
    4606:	81 11       	cpse	r24, r1
    4608:	0f c0       	rjmp	.+30     	; 0x4628 <decode_tx_response+0x5a>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    460a:	28 e3       	ldi	r18, 0x38	; 56
    460c:	37 e0       	ldi	r19, 0x07	; 7
    460e:	40 e0       	ldi	r20, 0x00	; 0
    4610:	8e 2d       	mov	r24, r14
    4612:	b6 01       	movw	r22, r12
    4614:	0e 94 03 28 	call	0x5006	; 0x5006 <util_strbeginswith>
    4618:	88 23       	and	r24, r24
    461a:	41 f0       	breq	.+16     	; 0x462c <decode_tx_response+0x5e>
    461c:	85 e0       	ldi	r24, 0x05	; 5
    461e:	07 c0       	rjmp	.+14     	; 0x462e <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    4620:	82 e0       	ldi	r24, 0x02	; 2
    4622:	05 c0       	rjmp	.+10     	; 0x462e <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    4624:	84 e0       	ldi	r24, 0x04	; 4
    4626:	03 c0       	rjmp	.+6      	; 0x462e <decode_tx_response+0x60>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	01 c0       	rjmp	.+2      	; 0x462e <decode_tx_response+0x60>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    462c:	81 e0       	ldi	r24, 0x01	; 1
}
    462e:	ef 90       	pop	r14
    4630:	df 90       	pop	r13
    4632:	cf 90       	pop	r12
    4634:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00002c1c <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    2c1c:	df 92       	push	r13
    2c1e:	ef 92       	push	r14
    2c20:	ff 92       	push	r15
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	28 97       	sbiw	r28, 0x08	; 8
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	d8 2e       	mov	r13, r24
    2c3c:	7b 01       	movw	r14, r22
    2c3e:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    2c40:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    2c42:	12 30       	cpi	r17, 0x02	; 2
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <SU_send_uplink+0x2c>
    2c46:	40 c0       	rjmp	.+128    	; 0x2cc8 <SU_send_uplink+0xac>
    2c48:	28 f4       	brcc	.+10     	; 0x2c54 <SU_send_uplink+0x38>
    2c4a:	11 23       	and	r17, r17
    2c4c:	49 f0       	breq	.+18     	; 0x2c60 <SU_send_uplink+0x44>
    2c4e:	11 30       	cpi	r17, 0x01	; 1
    2c50:	49 f1       	breq	.+82     	; 0x2ca4 <SU_send_uplink+0x88>
    2c52:	f7 cf       	rjmp	.-18     	; 0x2c42 <SU_send_uplink+0x26>
    2c54:	13 30       	cpi	r17, 0x03	; 3
    2c56:	09 f4       	brne	.+2      	; 0x2c5a <SU_send_uplink+0x3e>
    2c58:	4e c0       	rjmp	.+156    	; 0x2cf6 <SU_send_uplink+0xda>
    2c5a:	14 30       	cpi	r17, 0x04	; 4
    2c5c:	d9 f1       	breq	.+118    	; 0x2cd4 <SU_send_uplink+0xb8>
    2c5e:	f1 cf       	rjmp	.-30     	; 0x2c42 <SU_send_uplink+0x26>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    2c60:	20 2f       	mov	r18, r16
    2c62:	a7 01       	movw	r20, r14
    2c64:	6d 2d       	mov	r22, r13
    2c66:	8e e5       	ldi	r24, 0x5E	; 94
    2c68:	92 e0       	ldi	r25, 0x02	; 2
    2c6a:	0e 94 cb 1b 	call	0x3796	; 0x3796 <mac_tx_confirmed>
				attach_ending(lm_msg);
    2c6e:	8e e5       	ldi	r24, 0x5E	; 94
    2c70:	92 e0       	ldi	r25, 0x02	; 2
    2c72:	0e 94 a7 30 	call	0x614e	; 0x614e <attach_ending>
				uart0_hal_send_string(lm_msg);
    2c76:	6e e5       	ldi	r22, 0x5E	; 94
    2c78:	72 e0       	ldi	r23, 0x02	; 2
    2c7a:	80 e8       	ldi	r24, 0x80	; 128
    2c7c:	0e 94 45 22 	call	0x448a	; 0x448a <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    2c80:	42 e0       	ldi	r20, 0x02	; 2
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	61 e0       	ldi	r22, 0x01	; 1
    2c86:	70 e0       	ldi	r23, 0x00	; 0
    2c88:	ce 01       	movw	r24, r28
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    2c90:	29 e4       	ldi	r18, 0x49	; 73
    2c92:	37 e0       	ldi	r19, 0x07	; 7
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	60 e0       	ldi	r22, 0x00	; 0
    2c98:	ce 01       	movw	r24, r28
    2c9a:	01 96       	adiw	r24, 0x01	; 1
    2c9c:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    2ca0:	14 e0       	ldi	r17, 0x04	; 4
			break;
    2ca2:	cf cf       	rjmp	.-98     	; 0x2c42 <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    2ca4:	42 e0       	ldi	r20, 0x02	; 2
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	63 e0       	ldi	r22, 0x03	; 3
    2caa:	70 e0       	ldi	r23, 0x00	; 0
    2cac:	ce 01       	movw	r24, r28
    2cae:	01 96       	adiw	r24, 0x01	; 1
    2cb0:	0e 94 e7 32 	call	0x65ce	; 0x65ce <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    2cb4:	2c e4       	ldi	r18, 0x4C	; 76
    2cb6:	37 e0       	ldi	r19, 0x07	; 7
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	60 e0       	ldi	r22, 0x00	; 0
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	0e 94 ed 32 	call	0x65da	; 0x65da <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    2cc4:	14 e0       	ldi	r17, 0x04	; 4
			break;
    2cc6:	bd cf       	rjmp	.-134    	; 0x2c42 <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    2cc8:	6e e5       	ldi	r22, 0x5E	; 94
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	80 e8       	ldi	r24, 0x80	; 128
    2cce:	0e 94 e7 22 	call	0x45ce	; 0x45ce <decode_tx_response>
    2cd2:	12 c0       	rjmp	.+36     	; 0x2cf8 <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    2cd4:	0e 94 40 32 	call	0x6480	; 0x6480 <uart0_hal_message_ready>
    2cd8:	88 23       	and	r24, r24
    2cda:	09 f4       	brne	.+2      	; 0x2cde <SU_send_uplink+0xc2>
    2cdc:	b2 cf       	rjmp	.-156    	; 0x2c42 <SU_send_uplink+0x26>
					uart0_hal_read_message_as_str(lm_msg);
    2cde:	8e e5       	ldi	r24, 0x5E	; 94
    2ce0:	92 e0       	ldi	r25, 0x02	; 2
    2ce2:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    2ce6:	6e e5       	ldi	r22, 0x5E	; 94
    2ce8:	72 e0       	ldi	r23, 0x02	; 2
    2cea:	ce 01       	movw	r24, r28
    2cec:	01 96       	adiw	r24, 0x01	; 1
    2cee:	0e 94 10 24 	call	0x4820	; 0x4820 <util_matchMessage>
    2cf2:	18 2f       	mov	r17, r24
    2cf4:	a6 cf       	rjmp	.-180    	; 0x2c42 <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    2cf8:	28 96       	adiw	r28, 0x08	; 8
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	1f 91       	pop	r17
    2d0a:	0f 91       	pop	r16
    2d0c:	ff 90       	pop	r15
    2d0e:	ef 90       	pop	r14
    2d10:	df 90       	pop	r13
    2d12:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00004704 <SC_put_to_sleep>:
#include "sleep_controller.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
    4704:	cf 92       	push	r12
    4706:	df 92       	push	r13
    4708:	ef 92       	push	r14
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    470a:	40 e0       	ldi	r20, 0x00	; 0
    470c:	5c e5       	ldi	r21, 0x5C	; 92
    470e:	66 e2       	ldi	r22, 0x26	; 38
    4710:	75 e0       	ldi	r23, 0x05	; 5
    4712:	8e e5       	ldi	r24, 0x5E	; 94
    4714:	92 e0       	ldi	r25, 0x02	; 2
    4716:	0e 94 b2 23 	call	0x4764	; 0x4764 <sys_sleep_cmd>
	attach_ending(lm_msg);
    471a:	8e e5       	ldi	r24, 0x5E	; 94
    471c:	92 e0       	ldi	r25, 0x02	; 2
    471e:	0e 94 a7 30 	call	0x614e	; 0x614e <attach_ending>
	uart0_hal_send_string(lm_msg);
    4722:	8e e5       	ldi	r24, 0x5E	; 94
    4724:	92 e0       	ldi	r25, 0x02	; 2
    4726:	6c 01       	movw	r12, r24
    4728:	20 e8       	ldi	r18, 0x80	; 128
    472a:	e2 2e       	mov	r14, r18
    472c:	8e 2d       	mov	r24, r14
    472e:	b6 01       	movw	r22, r12
    4730:	0e 94 45 22 	call	0x448a	; 0x448a <uart0_hal_send_string>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    4734:	0e 94 40 32 	call	0x6480	; 0x6480 <uart0_hal_message_ready>
    4738:	88 23       	and	r24, r24
    473a:	e1 f3       	breq	.-8      	; 0x4734 <SC_put_to_sleep+0x30>
	
	uart0_hal_read_message_as_str(lm_msg);
    473c:	8e e5       	ldi	r24, 0x5E	; 94
    473e:	92 e0       	ldi	r25, 0x02	; 2
    4740:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <uart0_hal_read_message_as_str>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    4744:	2f e6       	ldi	r18, 0x6F	; 111
    4746:	37 e0       	ldi	r19, 0x07	; 7
    4748:	40 e0       	ldi	r20, 0x00	; 0
    474a:	8e 2d       	mov	r24, r14
    474c:	b6 01       	movw	r22, r12
    474e:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    4752:	89 2b       	or	r24, r25
    4754:	11 f4       	brne	.+4      	; 0x475a <SC_put_to_sleep+0x56>
    4756:	80 e0       	ldi	r24, 0x00	; 0
    4758:	01 c0       	rjmp	.+2      	; 0x475c <SC_put_to_sleep+0x58>
	return LM_STATUS_FATAL_ERROR;
    475a:	81 e0       	ldi	r24, 0x01	; 1
}
    475c:	ef 90       	pop	r14
    475e:	df 90       	pop	r13
    4760:	cf 90       	pop	r12
    4762:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00005a26 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    5a26:	85 e5       	ldi	r24, 0x55	; 85
    5a28:	0e 94 b8 28 	call	0x5170	; 0x5170 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    5a2c:	0e 94 40 32 	call	0x6480	; 0x6480 <uart0_hal_message_ready>
    5a30:	88 23       	and	r24, r24
    5a32:	e1 f3       	breq	.-8      	; 0x5a2c <SC_wake_up+0x6>
	
	uart0_hal_read_message_as_str(lm_msg);
    5a34:	8e e5       	ldi	r24, 0x5E	; 94
    5a36:	92 e0       	ldi	r25, 0x02	; 2
    5a38:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <uart0_hal_read_message_as_str>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    5a3c:	6e e5       	ldi	r22, 0x5E	; 94
    5a3e:	72 e0       	ldi	r23, 0x02	; 2
    5a40:	80 e8       	ldi	r24, 0x80	; 128
    5a42:	2f e6       	ldi	r18, 0x6F	; 111
    5a44:	37 e0       	ldi	r19, 0x07	; 7
    5a46:	40 e0       	ldi	r20, 0x00	; 0
    5a48:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    5a4c:	89 2b       	or	r24, r25
    5a4e:	11 f4       	brne	.+4      	; 0x5a54 <SC_wake_up+0x2e>
    5a50:	80 e0       	ldi	r24, 0x00	; 0
    5a52:	08 95       	ret
	return LM_STATUS_FATAL_ERROR;
    5a54:	81 e0       	ldi	r24, 0x01	; 1
    5a56:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

000065ce <util_setPendingStates>:


char lm_msg[200];

void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    65ce:	fc 01       	movw	r30, r24
    65d0:	71 83       	std	Z+1, r23	; 0x01
    65d2:	60 83       	st	Z, r22
	sd->failure_state=failed;
    65d4:	53 83       	std	Z+3, r21	; 0x03
    65d6:	42 83       	std	Z+2, r20	; 0x02
    65d8:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

000065da <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    65da:	fc 01       	movw	r30, r24
    65dc:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    65de:	25 83       	std	Z+5, r18	; 0x05
    65e0:	36 83       	std	Z+6, r19	; 0x06
    65e2:	47 83       	std	Z+7, r20	; 0x07
    65e4:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

00005006 <util_strbeginswith>:
		return sd->failure_state;
	}
}


bool util_strbeginswith(const char *s1, const char *s2){
    5006:	6f 92       	push	r6
    5008:	7f 92       	push	r7
    500a:	8f 92       	push	r8
    500c:	cf 92       	push	r12
    500e:	df 92       	push	r13
    5010:	ef 92       	push	r14
    5012:	0f 93       	push	r16
    5014:	1f 93       	push	r17
    5016:	3b 01       	movw	r6, r22
    5018:	88 2e       	mov	r8, r24
    501a:	69 01       	movw	r12, r18
    501c:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    501e:	84 2f       	mov	r24, r20
    5020:	b9 01       	movw	r22, r18
    5022:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    5026:	8c 01       	movw	r16, r24
    5028:	4e 2d       	mov	r20, r14
    502a:	96 01       	movw	r18, r12
    502c:	88 2d       	mov	r24, r8
    502e:	b3 01       	movw	r22, r6
    5030:	0e 94 b2 22 	call	0x4564	; 0x4564 <strncmp>
    5034:	21 e0       	ldi	r18, 0x01	; 1
    5036:	89 2b       	or	r24, r25
    5038:	09 f0       	breq	.+2      	; 0x503c <util_strbeginswith+0x36>
    503a:	20 e0       	ldi	r18, 0x00	; 0
}
    503c:	82 2f       	mov	r24, r18
    503e:	1f 91       	pop	r17
    5040:	0f 91       	pop	r16
    5042:	ef 90       	pop	r14
    5044:	df 90       	pop	r13
    5046:	cf 90       	pop	r12
    5048:	8f 90       	pop	r8
    504a:	7f 90       	pop	r7
    504c:	6f 90       	pop	r6
    504e:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00004820 <util_matchMessage>:
void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    4820:	cf 93       	push	r28
    4822:	df 93       	push	r29
    4824:	ec 01       	movw	r28, r24
	switch(sd->matchCase){
    4826:	8c 81       	ldd	r24, Y+4	; 0x04
    4828:	81 30       	cpi	r24, 0x01	; 1
    482a:	91 f0       	breq	.+36     	; 0x4850 <util_matchMessage+0x30>
    482c:	18 f0       	brcs	.+6      	; 0x4834 <util_matchMessage+0x14>
    482e:	82 30       	cpi	r24, 0x02	; 2
    4830:	e9 f0       	breq	.+58     	; 0x486c <util_matchMessage+0x4c>
    4832:	1f c0       	rjmp	.+62     	; 0x4872 <util_matchMessage+0x52>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    4834:	2d 81       	ldd	r18, Y+5	; 0x05
    4836:	3e 81       	ldd	r19, Y+6	; 0x06
    4838:	4f 81       	ldd	r20, Y+7	; 0x07
    483a:	80 e8       	ldi	r24, 0x80	; 128
    483c:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    4840:	89 2b       	or	r24, r25
    4842:	19 f4       	brne	.+6      	; 0x484a <util_matchMessage+0x2a>
    4844:	88 81       	ld	r24, Y
    4846:	99 81       	ldd	r25, Y+1	; 0x01
    4848:	16 c0       	rjmp	.+44     	; 0x4876 <util_matchMessage+0x56>
    484a:	8a 81       	ldd	r24, Y+2	; 0x02
    484c:	9b 81       	ldd	r25, Y+3	; 0x03
    484e:	13 c0       	rjmp	.+38     	; 0x4876 <util_matchMessage+0x56>

		case LM_BEGINS_WITH:
		return util_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    4850:	2d 81       	ldd	r18, Y+5	; 0x05
    4852:	3e 81       	ldd	r19, Y+6	; 0x06
    4854:	4f 81       	ldd	r20, Y+7	; 0x07
    4856:	80 e8       	ldi	r24, 0x80	; 128
    4858:	0e 94 03 28 	call	0x5006	; 0x5006 <util_strbeginswith>
    485c:	88 23       	and	r24, r24
    485e:	19 f0       	breq	.+6      	; 0x4866 <util_matchMessage+0x46>
    4860:	88 81       	ld	r24, Y
    4862:	99 81       	ldd	r25, Y+1	; 0x01
    4864:	08 c0       	rjmp	.+16     	; 0x4876 <util_matchMessage+0x56>
    4866:	8a 81       	ldd	r24, Y+2	; 0x02
    4868:	9b 81       	ldd	r25, Y+3	; 0x03
    486a:	05 c0       	rjmp	.+10     	; 0x4876 <util_matchMessage+0x56>

		case LM_NO_TEST:
		return sd->success_state;
    486c:	88 81       	ld	r24, Y
    486e:	99 81       	ldd	r25, Y+1	; 0x01
    4870:	02 c0       	rjmp	.+4      	; 0x4876 <util_matchMessage+0x56>
		default:
		return sd->failure_state;
    4872:	8a 81       	ldd	r24, Y+2	; 0x02
    4874:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	08 95       	ret

Disassembly of section .text.util_reset_module:

000051fc <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    51fc:	0e 94 45 33 	call	0x668a	; 0x668a <rn2483_reset_active>
    5200:	2f ef       	ldi	r18, 0xFF	; 255
    5202:	89 e6       	ldi	r24, 0x69	; 105
    5204:	98 e1       	ldi	r25, 0x18	; 24
    5206:	21 50       	subi	r18, 0x01	; 1
    5208:	80 40       	sbci	r24, 0x00	; 0
    520a:	90 40       	sbci	r25, 0x00	; 0
    520c:	e1 f7       	brne	.-8      	; 0x5206 <util_reset_module+0xa>
    520e:	00 c0       	rjmp	.+0      	; 0x5210 <util_reset_module+0x14>
    5210:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    5212:	0e 94 49 33 	call	0x6692	; 0x6692 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    5216:	0e 94 40 32 	call	0x6480	; 0x6480 <uart0_hal_message_ready>
    521a:	88 23       	and	r24, r24
    521c:	e1 f3       	breq	.-8      	; 0x5216 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    521e:	8e e5       	ldi	r24, 0x5E	; 94
    5220:	92 e0       	ldi	r25, 0x02	; 2
    5222:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    5226:	6e e5       	ldi	r22, 0x5E	; 94
    5228:	72 e0       	ldi	r23, 0x02	; 2
    522a:	80 e8       	ldi	r24, 0x80	; 128
    522c:	2e e5       	ldi	r18, 0x5E	; 94
    522e:	37 e0       	ldi	r19, 0x07	; 7
    5230:	40 e0       	ldi	r20, 0x00	; 0
    5232:	0e 94 03 28 	call	0x5006	; 0x5006 <util_strbeginswith>
    5236:	88 23       	and	r24, r24
    5238:	11 f0       	breq	.+4      	; 0x523e <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    523a:	80 e0       	ldi	r24, 0x00	; 0
    523c:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    523e:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    5240:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

000057a6 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    57a6:	cf 93       	push	r28
    57a8:	df 93       	push	r29
    57aa:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    57ac:	ab 01       	movw	r20, r22
    57ae:	68 2f       	mov	r22, r24
    57b0:	8e e5       	ldi	r24, 0x5E	; 94
    57b2:	92 e0       	ldi	r25, 0x02	; 2
    57b4:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcpy>
	attach_ending(lm_msg);
    57b8:	8e e5       	ldi	r24, 0x5E	; 94
    57ba:	92 e0       	ldi	r25, 0x02	; 2
    57bc:	0e 94 a7 30 	call	0x614e	; 0x614e <attach_ending>
	uart0_hal_send_string(lm_msg);
    57c0:	6e e5       	ldi	r22, 0x5E	; 94
    57c2:	72 e0       	ldi	r23, 0x02	; 2
    57c4:	80 e8       	ldi	r24, 0x80	; 128
    57c6:	0e 94 45 22 	call	0x448a	; 0x448a <uart0_hal_send_string>
	
	while(!uart0_hal_message_ready());
    57ca:	0e 94 40 32 	call	0x6480	; 0x6480 <uart0_hal_message_ready>
    57ce:	88 23       	and	r24, r24
    57d0:	e1 f3       	breq	.-8      	; 0x57ca <util_lora_forward_msg+0x24>
	uart0_hal_read_message_as_str(res);
    57d2:	ce 01       	movw	r24, r28
    57d4:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <uart0_hal_read_message_as_str>
}
    57d8:	df 91       	pop	r29
    57da:	cf 91       	pop	r28
    57dc:	08 95       	ret

Disassembly of section .text.util_send_break:

00005fe4 <util_send_break>:

void util_send_break(char res[]){
    5fe4:	cf 93       	push	r28
    5fe6:	df 93       	push	r29
    5fe8:	ec 01       	movw	r28, r24
	uart0_hal_send_break(0x55);
    5fea:	85 e5       	ldi	r24, 0x55	; 85
    5fec:	0e 94 b8 28 	call	0x5170	; 0x5170 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    5ff0:	0e 94 40 32 	call	0x6480	; 0x6480 <uart0_hal_message_ready>
    5ff4:	88 23       	and	r24, r24
    5ff6:	e1 f3       	breq	.-8      	; 0x5ff0 <util_send_break+0xc>
	
	uart0_hal_read_message_as_str(res);
    5ff8:	ce 01       	movw	r24, r28
    5ffa:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <uart0_hal_read_message_as_str>
    5ffe:	df 91       	pop	r29
    6000:	cf 91       	pop	r28
    6002:	08 95       	ret

Disassembly of section .text.get_group_id:

00006718 <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    6718:	80 91 a3 0f 	lds	r24, 0x0FA3	; 0x800fa3 <_groupId>
    671c:	08 95       	ret

Disassembly of section .text.set_group_id:

0000671e <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    671e:	80 93 a3 0f 	sts	0x0FA3, r24	; 0x800fa3 <_groupId>
    6722:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00005a58 <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    5a58:	0f 93       	push	r16
    5a5a:	1f 93       	push	r17
    5a5c:	cf 93       	push	r28
    5a5e:	df 93       	push	r29
    5a60:	8c 01       	movw	r16, r24
    5a62:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    5a64:	0e 94 8c 33 	call	0x6718	; 0x6718 <get_group_id>
    5a68:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    5a6a:	2d 2f       	mov	r18, r29
    5a6c:	a8 01       	movw	r20, r16
    5a6e:	68 2f       	mov	r22, r24
    5a70:	86 e2       	ldi	r24, 0x26	; 38
    5a72:	93 e0       	ldi	r25, 0x03	; 3
    5a74:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    5a78:	81 e0       	ldi	r24, 0x01	; 1
    5a7a:	8c 0f       	add	r24, r28
    5a7c:	0e 94 8f 33 	call	0x671e	; 0x671e <set_group_id>
}
    5a80:	df 91       	pop	r29
    5a82:	cf 91       	pop	r28
    5a84:	1f 91       	pop	r17
    5a86:	0f 91       	pop	r16
    5a88:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

000043aa <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    43aa:	ef 92       	push	r14
    43ac:	ff 92       	push	r15
    43ae:	1f 93       	push	r17
    43b0:	cf 93       	push	r28
    43b2:	df 93       	push	r29
    43b4:	cd b7       	in	r28, 0x3d	; 61
    43b6:	de b7       	in	r29, 0x3e	; 62
    43b8:	2a 97       	sbiw	r28, 0x0a	; 10
    43ba:	0f b6       	in	r0, 0x3f	; 63
    43bc:	f8 94       	cli
    43be:	de bf       	out	0x3e, r29	; 62
    43c0:	0f be       	out	0x3f, r0	; 63
    43c2:	cd bf       	out	0x3d, r28	; 61
    43c4:	18 2f       	mov	r17, r24
    43c6:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    43c8:	9e 01       	movw	r18, r28
    43ca:	2f 5f       	subi	r18, 0xFF	; 255
    43cc:	3f 4f       	sbci	r19, 0xFF	; 255
    43ce:	ab 01       	movw	r20, r22
    43d0:	68 2f       	mov	r22, r24
    43d2:	86 e2       	ldi	r24, 0x26	; 38
    43d4:	93 e0       	ldi	r25, 0x03	; 3
    43d6:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    43da:	9e 01       	movw	r18, r28
    43dc:	27 5f       	subi	r18, 0xF7	; 247
    43de:	3f 4f       	sbci	r19, 0xFF	; 255
    43e0:	ae 01       	movw	r20, r28
    43e2:	49 5f       	subi	r20, 0xF9	; 249
    43e4:	5f 4f       	sbci	r21, 0xFF	; 255
    43e6:	61 2f       	mov	r22, r17
    43e8:	86 e2       	ldi	r24, 0x26	; 38
    43ea:	93 e0       	ldi	r25, 0x03	; 3
    43ec:	0e 94 27 2c 	call	0x584e	; 0x584e <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    43f0:	29 85       	ldd	r18, Y+9	; 0x09
    43f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    43f4:	4f 81       	ldd	r20, Y+7	; 0x07
    43f6:	58 85       	ldd	r21, Y+8	; 0x08
    43f8:	b7 01       	movw	r22, r14
    43fa:	ce 01       	movw	r24, r28
    43fc:	01 96       	adiw	r24, 0x01	; 1
    43fe:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <mrpp_data_add_int16>
}
    4402:	2a 96       	adiw	r28, 0x0a	; 10
    4404:	0f b6       	in	r0, 0x3f	; 63
    4406:	f8 94       	cli
    4408:	de bf       	out	0x3e, r29	; 62
    440a:	0f be       	out	0x3f, r0	; 63
    440c:	cd bf       	out	0x3d, r28	; 61
    440e:	df 91       	pop	r29
    4410:	cf 91       	pop	r28
    4412:	1f 91       	pop	r17
    4414:	ff 90       	pop	r15
    4416:	ef 90       	pop	r14
    4418:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00005eb8 <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    5eb8:	cf 93       	push	r28
    5eba:	df 93       	push	r29
    5ebc:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    5ebe:	86 e2       	ldi	r24, 0x26	; 38
    5ec0:	93 e0       	ldi	r25, 0x03	; 3
    5ec2:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <mrpp_state_is_body_ready>
    5ec6:	88 83       	st	Y, r24
    5ec8:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    5eca:	89 2f       	mov	r24, r25
    5ecc:	80 95       	com	r24
    
}
    5ece:	88 1f       	adc	r24, r24
    5ed0:	88 27       	eor	r24, r24
    5ed2:	88 1f       	adc	r24, r24
    5ed4:	df 91       	pop	r29
    5ed6:	cf 91       	pop	r28
    5ed8:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00003c08 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    3c08:	af 92       	push	r10
    3c0a:	bf 92       	push	r11
    3c0c:	cf 92       	push	r12
    3c0e:	df 92       	push	r13
    3c10:	ef 92       	push	r14
    3c12:	ff 92       	push	r15
    3c14:	0f 93       	push	r16
    3c16:	1f 93       	push	r17
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	00 d0       	rcall	.+0      	; 0x3c1e <MRPP_get_ready_body_package+0x16>
    3c1e:	00 d0       	rcall	.+0      	; 0x3c20 <MRPP_get_ready_body_package+0x18>
    3c20:	1f 92       	push	r1
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	6b 01       	movw	r12, r22
    3c28:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    3c2a:	9e 01       	movw	r18, r28
    3c2c:	2b 5f       	subi	r18, 0xFB	; 251
    3c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c30:	79 01       	movw	r14, r18
    3c32:	8e 01       	movw	r16, r28
    3c34:	0d 5f       	subi	r16, 0xFD	; 253
    3c36:	1f 4f       	sbci	r17, 0xFF	; 255
    3c38:	23 50       	subi	r18, 0x03	; 3
    3c3a:	31 09       	sbc	r19, r1
    3c3c:	ae 01       	movw	r20, r28
    3c3e:	4f 5f       	subi	r20, 0xFF	; 255
    3c40:	5f 4f       	sbci	r21, 0xFF	; 255
    3c42:	bc 01       	movw	r22, r24
    3c44:	86 e2       	ldi	r24, 0x26	; 38
    3c46:	93 e0       	ldi	r25, 0x03	; 3
    3c48:	0e 94 72 13 	call	0x26e4	; 0x26e4 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    3c4c:	88 23       	and	r24, r24
    3c4e:	b1 f0       	breq	.+44     	; 0x3c7c <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    3c50:	4d 81       	ldd	r20, Y+5	; 0x05
    3c52:	83 e0       	ldi	r24, 0x03	; 3
    3c54:	84 0f       	add	r24, r20
    3c56:	f5 01       	movw	r30, r10
    3c58:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    3c5a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <state>
    3c5e:	f6 01       	movw	r30, r12
    3c60:	80 83       	st	Z, r24
    package[1]=subId;
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    3c66:	8a 81       	ldd	r24, Y+2	; 0x02
    3c68:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	6b 81       	ldd	r22, Y+3	; 0x03
    3c6e:	7c 81       	ldd	r23, Y+4	; 0x04
    3c70:	c6 01       	movw	r24, r12
    3c72:	03 96       	adiw	r24, 0x03	; 3
    3c74:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <mrpp_data_get>

    return true;
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	01 c0       	rjmp	.+2      	; 0x3c7e <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    3c7c:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
    3c86:	0f 90       	pop	r0
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	1f 91       	pop	r17
    3c8e:	0f 91       	pop	r16
    3c90:	ff 90       	pop	r15
    3c92:	ef 90       	pop	r14
    3c94:	df 90       	pop	r13
    3c96:	cf 90       	pop	r12
    3c98:	bf 90       	pop	r11
    3c9a:	af 90       	pop	r10
    3c9c:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

000065e6 <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    65e6:	bc 01       	movw	r22, r24
    65e8:	86 e2       	ldi	r24, 0x26	; 38
    65ea:	93 e0       	ldi	r25, 0x03	; 3
    65ec:	0e 94 02 30 	call	0x6004	; 0x6004 <mrpp_state_set_body_sent>
    65f0:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00005eda <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    5eda:	cf 93       	push	r28
    5edc:	df 93       	push	r29
    5ede:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    5ee0:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    5ee4:	fc 01       	movw	r30, r24
    5ee6:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    5ee8:	bf 01       	movw	r22, r30
    5eea:	86 e2       	ldi	r24, 0x26	; 38
    5eec:	93 e0       	ldi	r25, 0x03	; 3
    5eee:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <mrpp_state_get_header>
    *package_length+=1;
    5ef2:	8f 5f       	subi	r24, 0xFF	; 255
    5ef4:	88 83       	st	Y, r24
}
    5ef6:	df 91       	pop	r29
    5ef8:	cf 91       	pop	r28
    5efa:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00005efc <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    5efc:	cf 93       	push	r28
    5efe:	df 93       	push	r29
    5f00:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    5f02:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    5f06:	fc 01       	movw	r30, r24
    5f08:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    5f0a:	bf 01       	movw	r22, r30
    5f0c:	86 e2       	ldi	r24, 0x26	; 38
    5f0e:	93 e0       	ldi	r25, 0x03	; 3
    5f10:	0e 94 21 1c 	call	0x3842	; 0x3842 <mrpp_state_get_tail>
    *package_length+=1;
    5f14:	8f 5f       	subi	r24, 0xFF	; 255
    5f16:	88 83       	st	Y, r24
}
    5f18:	df 91       	pop	r29
    5f1a:	cf 91       	pop	r28
    5f1c:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00006652 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    6652:	86 e2       	ldi	r24, 0x26	; 38
    6654:	93 e0       	ldi	r25, 0x03	; 3
    6656:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <mrpp_state_all_bodies_sent>
}
    665a:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00003d34 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    3d34:	cf 92       	push	r12
    3d36:	df 92       	push	r13
    3d38:	ff 92       	push	r15
    3d3a:	0f 93       	push	r16
    3d3c:	1f 93       	push	r17
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    3d42:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    3d44:	94 2f       	mov	r25, r20
    3d46:	0c c0       	rjmp	.+24     	; 0x3d60 <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    3d48:	c9 2f       	mov	r28, r25
    3d4a:	d0 e0       	ldi	r29, 0x00	; 0
    3d4c:	e4 1b       	sub	r30, r20
    3d4e:	f5 0b       	sbc	r31, r21
    3d50:	ea 0f       	add	r30, r26
    3d52:	fb 1f       	adc	r31, r27
    3d54:	80 81       	ld	r24, Z
    3d56:	fe 01       	movw	r30, r28
    3d58:	e0 54       	subi	r30, 0x40	; 64
    3d5a:	fc 4f       	sbci	r31, 0xFC	; 252
    3d5c:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    3d5e:	9f 5f       	subi	r25, 0xFF	; 255
    3d60:	e9 2f       	mov	r30, r25
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	6a 01       	movw	r12, r20
    3d66:	86 e0       	ldi	r24, 0x06	; 6
    3d68:	c8 0e       	add	r12, r24
    3d6a:	d1 1c       	adc	r13, r1
    3d6c:	ec 15       	cp	r30, r12
    3d6e:	fd 05       	cpc	r31, r13
    3d70:	58 f3       	brcs	.-42     	; 0x3d48 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    3d72:	26 50       	subi	r18, 0x06	; 6
    3d74:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    3d76:	36 95       	lsr	r19
    3d78:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    3d7a:	49 5f       	subi	r20, 0xF9	; 249
    3d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    3d7e:	a0 e0       	ldi	r26, 0x00	; 0
    3d80:	b0 e0       	ldi	r27, 0x00	; 0
    3d82:	16 c0       	rjmp	.+44     	; 0x3db0 <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    3d84:	cd 01       	movw	r24, r26
    3d86:	88 0f       	add	r24, r24
    3d88:	99 1f       	adc	r25, r25
    3d8a:	f6 01       	movw	r30, r12
    3d8c:	e8 0f       	add	r30, r24
    3d8e:	f9 1f       	adc	r31, r25
    3d90:	8b 01       	movw	r16, r22
    3d92:	08 0f       	add	r16, r24
    3d94:	19 1f       	adc	r17, r25
    3d96:	e8 01       	movw	r28, r16
    3d98:	f9 80       	ldd	r15, Y+1	; 0x01
    3d9a:	e0 54       	subi	r30, 0x40	; 64
    3d9c:	fc 4f       	sbci	r31, 0xFC	; 252
    3d9e:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    3da0:	84 0f       	add	r24, r20
    3da2:	95 1f       	adc	r25, r21
    3da4:	18 81       	ld	r17, Y
    3da6:	fc 01       	movw	r30, r24
    3da8:	e0 54       	subi	r30, 0x40	; 64
    3daa:	fc 4f       	sbci	r31, 0xFC	; 252
    3dac:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    3dae:	11 96       	adiw	r26, 0x01	; 1
    3db0:	a2 17       	cp	r26, r18
    3db2:	b3 07       	cpc	r27, r19
    3db4:	38 f3       	brcs	.-50     	; 0x3d84 <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    3db6:	df 91       	pop	r29
    3db8:	cf 91       	pop	r28
    3dba:	1f 91       	pop	r17
    3dbc:	0f 91       	pop	r16
    3dbe:	ff 90       	pop	r15
    3dc0:	df 90       	pop	r13
    3dc2:	cf 90       	pop	r12
    3dc4:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00005bde <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    5bde:	cf 93       	push	r28
    5be0:	df 93       	push	r29
    5be2:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    5be4:	20 e0       	ldi	r18, 0x00	; 0
    5be6:	30 e0       	ldi	r19, 0x00	; 0
    5be8:	0c c0       	rjmp	.+24     	; 0x5c02 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    5bea:	de 01       	movw	r26, r28
    5bec:	a2 0f       	add	r26, r18
    5bee:	b3 1f       	adc	r27, r19
    5bf0:	f9 01       	movw	r30, r18
    5bf2:	e6 0f       	add	r30, r22
    5bf4:	f7 1f       	adc	r31, r23
    5bf6:	e0 54       	subi	r30, 0x40	; 64
    5bf8:	fc 4f       	sbci	r31, 0xFC	; 252
    5bfa:	90 81       	ld	r25, Z
    5bfc:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    5bfe:	2f 5f       	subi	r18, 0xFF	; 255
    5c00:	3f 4f       	sbci	r19, 0xFF	; 255
    5c02:	24 17       	cp	r18, r20
    5c04:	35 07       	cpc	r19, r21
    5c06:	88 f3       	brcs	.-30     	; 0x5bea <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    5c08:	df 91       	pop	r29
    5c0a:	cf 91       	pop	r28
    5c0c:	08 95       	ret

Disassembly of section .text.add_data_types:

000030b4 <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    30b4:	cf 92       	push	r12
    30b6:	df 92       	push	r13
    30b8:	ef 92       	push	r14
    30ba:	ff 92       	push	r15
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	dc 01       	movw	r26, r24
    30c6:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    30ca:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    30cc:	c1 2c       	mov	r12, r1
    30ce:	d1 2c       	mov	r13, r1
    30d0:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    30d2:	4a c0       	rjmp	.+148    	; 0x3168 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    30d4:	29 2f       	mov	r18, r25
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	f9 01       	movw	r30, r18
    30da:	ee 0f       	add	r30, r30
    30dc:	ff 1f       	adc	r31, r31
    30de:	22 0f       	add	r18, r18
    30e0:	33 1f       	adc	r19, r19
    30e2:	22 0f       	add	r18, r18
    30e4:	33 1f       	adc	r19, r19
    30e6:	22 0f       	add	r18, r18
    30e8:	33 1f       	adc	r19, r19
    30ea:	e2 0f       	add	r30, r18
    30ec:	f3 1f       	adc	r31, r19
    30ee:	ea 0f       	add	r30, r26
    30f0:	fb 1f       	adc	r31, r27
    30f2:	27 81       	ldd	r18, Z+7	; 0x07
    30f4:	22 30       	cpi	r18, 0x02	; 2
    30f6:	a9 f0       	breq	.+42     	; 0x3122 <add_data_types+0x6e>
    30f8:	24 30       	cpi	r18, 0x04	; 4
    30fa:	21 f1       	breq	.+72     	; 0x3144 <add_data_types+0x90>
    30fc:	21 30       	cpi	r18, 0x01	; 1
    30fe:	91 f5       	brne	.+100    	; 0x3164 <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    3100:	01 e0       	ldi	r16, 0x01	; 1
    3102:	10 e0       	ldi	r17, 0x00	; 0
    3104:	04 2e       	mov	r0, r20
    3106:	02 c0       	rjmp	.+4      	; 0x310c <add_data_types+0x58>
    3108:	00 0f       	add	r16, r16
    310a:	11 1f       	adc	r17, r17
    310c:	0a 94       	dec	r0
    310e:	e2 f7       	brpl	.-8      	; 0x3108 <add_data_types+0x54>
    3110:	01 2e       	mov	r0, r17
    3112:	00 0c       	add	r0, r0
    3114:	22 0b       	sbc	r18, r18
    3116:	33 0b       	sbc	r19, r19
    3118:	c0 2a       	or	r12, r16
    311a:	d1 2a       	or	r13, r17
    311c:	e2 2a       	or	r14, r18
    311e:	f3 2a       	or	r15, r19
                break;
    3120:	21 c0       	rjmp	.+66     	; 0x3164 <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    3122:	02 e0       	ldi	r16, 0x02	; 2
    3124:	10 e0       	ldi	r17, 0x00	; 0
    3126:	04 2e       	mov	r0, r20
    3128:	02 c0       	rjmp	.+4      	; 0x312e <add_data_types+0x7a>
    312a:	00 0f       	add	r16, r16
    312c:	11 1f       	adc	r17, r17
    312e:	0a 94       	dec	r0
    3130:	e2 f7       	brpl	.-8      	; 0x312a <add_data_types+0x76>
    3132:	01 2e       	mov	r0, r17
    3134:	00 0c       	add	r0, r0
    3136:	22 0b       	sbc	r18, r18
    3138:	33 0b       	sbc	r19, r19
    313a:	c0 2a       	or	r12, r16
    313c:	d1 2a       	or	r13, r17
    313e:	e2 2a       	or	r14, r18
    3140:	f3 2a       	or	r15, r19
                break;
    3142:	10 c0       	rjmp	.+32     	; 0x3164 <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    3144:	03 e0       	ldi	r16, 0x03	; 3
    3146:	10 e0       	ldi	r17, 0x00	; 0
    3148:	04 2e       	mov	r0, r20
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <add_data_types+0x9c>
    314c:	00 0f       	add	r16, r16
    314e:	11 1f       	adc	r17, r17
    3150:	0a 94       	dec	r0
    3152:	e2 f7       	brpl	.-8      	; 0x314c <add_data_types+0x98>
    3154:	01 2e       	mov	r0, r17
    3156:	00 0c       	add	r0, r0
    3158:	22 0b       	sbc	r18, r18
    315a:	33 0b       	sbc	r19, r19
    315c:	c0 2a       	or	r12, r16
    315e:	d1 2a       	or	r13, r17
    3160:	e2 2a       	or	r14, r18
    3162:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    3164:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    3166:	9f 5f       	subi	r25, 0xFF	; 255
    3168:	12 96       	adiw	r26, 0x02	; 2
    316a:	8c 91       	ld	r24, X
    316c:	12 97       	sbiw	r26, 0x02	; 2
    316e:	98 17       	cp	r25, r24
    3170:	08 f4       	brcc	.+2      	; 0x3174 <add_data_types+0xc0>
    3172:	b0 cf       	rjmp	.-160    	; 0x30d4 <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    3174:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    3176:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    3178:	cd 82       	std	Y+5, r12	; 0x05
} 
    317a:	df 91       	pop	r29
    317c:	cf 91       	pop	r28
    317e:	1f 91       	pop	r17
    3180:	0f 91       	pop	r16
    3182:	ff 90       	pop	r15
    3184:	ef 90       	pop	r14
    3186:	df 90       	pop	r13
    3188:	cf 90       	pop	r12
    318a:	08 95       	ret

Disassembly of section .text.update_bodies:

000020ba <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    20ba:	cf 93       	push	r28
    20bc:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    20be:	26 2f       	mov	r18, r22
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	c9 01       	movw	r24, r18
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f9 01       	movw	r30, r18
    20c8:	ee 0f       	add	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	22 0f       	add	r18, r18
    20d2:	33 1f       	adc	r19, r19
    20d4:	22 0f       	add	r18, r18
    20d6:	33 1f       	adc	r19, r19
    20d8:	e2 0f       	add	r30, r18
    20da:	f3 1f       	adc	r31, r19
    20dc:	ea 0f       	add	r30, r26
    20de:	fb 1f       	adc	r31, r27
    20e0:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    20e2:	c0 e0       	ldi	r28, 0x00	; 0
    20e4:	25 c0       	rjmp	.+74     	; 0x2130 <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    20e6:	82 17       	cp	r24, r18
    20e8:	93 07       	cpc	r25, r19
    20ea:	09 f1       	breq	.+66     	; 0x212e <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    20ec:	a9 01       	movw	r20, r18
    20ee:	44 0f       	add	r20, r20
    20f0:	55 1f       	adc	r21, r21
    20f2:	44 0f       	add	r20, r20
    20f4:	55 1f       	adc	r21, r21
    20f6:	44 0f       	add	r20, r20
    20f8:	55 1f       	adc	r21, r21
    20fa:	f9 01       	movw	r30, r18
    20fc:	ee 0f       	add	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	e4 0f       	add	r30, r20
    2102:	f5 1f       	adc	r31, r21
    2104:	ea 0f       	add	r30, r26
    2106:	fb 1f       	adc	r31, r27
    2108:	43 85       	ldd	r20, Z+11	; 0x0b
    210a:	74 13       	cpse	r23, r20
    210c:	10 c0       	rjmp	.+32     	; 0x212e <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    210e:	f9 01       	movw	r30, r18
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	22 0f       	add	r18, r18
    2116:	33 1f       	adc	r19, r19
    2118:	22 0f       	add	r18, r18
    211a:	33 1f       	adc	r19, r19
    211c:	22 0f       	add	r18, r18
    211e:	33 1f       	adc	r19, r19
    2120:	e2 0f       	add	r30, r18
    2122:	f3 1f       	adc	r31, r19
    2124:	ea 0f       	add	r30, r26
    2126:	fb 1f       	adc	r31, r27
    2128:	24 85       	ldd	r18, Z+12	; 0x0c
    212a:	23 30       	cpi	r18, 0x03	; 3
    212c:	41 f4       	brne	.+16     	; 0x213e <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    212e:	cf 5f       	subi	r28, 0xFF	; 255
    2130:	2c 2f       	mov	r18, r28
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	28 17       	cp	r18, r24
    2136:	39 07       	cpc	r19, r25
    2138:	b4 f2       	brlt	.-84     	; 0x20e6 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    213a:	21 e0       	ldi	r18, 0x01	; 1
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    213e:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    2140:	22 23       	and	r18, r18
    2142:	39 f0       	breq	.+14     	; 0x2152 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    2144:	fd 01       	movw	r30, r26
    2146:	e7 0f       	add	r30, r23
    2148:	f1 1d       	adc	r31, r1
    214a:	e4 58       	subi	r30, 0x84	; 132
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	21 e0       	ldi	r18, 0x01	; 1
    2150:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    2152:	9c 01       	movw	r18, r24
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	22 0f       	add	r18, r18
    215a:	33 1f       	adc	r19, r19
    215c:	22 0f       	add	r18, r18
    215e:	33 1f       	adc	r19, r19
    2160:	fc 01       	movw	r30, r24
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	ea 0f       	add	r30, r26
    216c:	fb 1f       	adc	r31, r27
    216e:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    2170:	29 c0       	rjmp	.+82     	; 0x21c4 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
    2172:	46 2f       	mov	r20, r22
    2174:	50 e0       	ldi	r21, 0x00	; 0
    2176:	84 17       	cp	r24, r20
    2178:	95 07       	cpc	r25, r21
    217a:	19 f1       	breq	.+70     	; 0x21c2 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    217c:	9a 01       	movw	r18, r20
    217e:	2f 5f       	subi	r18, 0xFF	; 255
    2180:	3f 4f       	sbci	r19, 0xFF	; 255
    2182:	f9 01       	movw	r30, r18
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	22 0f       	add	r18, r18
    218a:	33 1f       	adc	r19, r19
    218c:	22 0f       	add	r18, r18
    218e:	33 1f       	adc	r19, r19
    2190:	22 0f       	add	r18, r18
    2192:	33 1f       	adc	r19, r19
    2194:	e2 0f       	add	r30, r18
    2196:	f3 1f       	adc	r31, r19
    2198:	ea 0f       	add	r30, r26
    219a:	fb 1f       	adc	r31, r27
    219c:	20 81       	ld	r18, Z
    219e:	c2 13       	cpse	r28, r18
    21a0:	10 c0       	rjmp	.+32     	; 0x21c2 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    21a2:	fa 01       	movw	r30, r20
    21a4:	ee 0f       	add	r30, r30
    21a6:	ff 1f       	adc	r31, r31
    21a8:	44 0f       	add	r20, r20
    21aa:	55 1f       	adc	r21, r21
    21ac:	44 0f       	add	r20, r20
    21ae:	55 1f       	adc	r21, r21
    21b0:	44 0f       	add	r20, r20
    21b2:	55 1f       	adc	r21, r21
    21b4:	e4 0f       	add	r30, r20
    21b6:	f5 1f       	adc	r31, r21
    21b8:	ea 0f       	add	r30, r26
    21ba:	fb 1f       	adc	r31, r27
    21bc:	24 85       	ldd	r18, Z+12	; 0x0c
    21be:	23 30       	cpi	r18, 0x03	; 3
    21c0:	41 f4       	brne	.+16     	; 0x21d2 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    21c2:	6f 5f       	subi	r22, 0xFF	; 255
    21c4:	12 96       	adiw	r26, 0x02	; 2
    21c6:	2c 91       	ld	r18, X
    21c8:	12 97       	sbiw	r26, 0x02	; 2
    21ca:	62 17       	cp	r22, r18
    21cc:	90 f2       	brcs	.-92     	; 0x2172 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    21d2:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    21d4:	88 23       	and	r24, r24
    21d6:	41 f0       	breq	.+16     	; 0x21e8 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    21d8:	fd 01       	movw	r30, r26
    21da:	ec 0f       	add	r30, r28
    21dc:	f1 1d       	adc	r31, r1
    21de:	e4 58       	subi	r30, 0x84	; 132
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	80 83       	st	Z, r24
    21e6:	06 c0       	rjmp	.+12     	; 0x21f4 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    21e8:	fd 01       	movw	r30, r26
    21ea:	ec 0f       	add	r30, r28
    21ec:	f1 1d       	adc	r31, r1
    21ee:	e4 58       	subi	r30, 0x84	; 132
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    21f4:	8c 2f       	mov	r24, r28
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	87 1b       	sub	r24, r23
    21fa:	91 09       	sbc	r25, r1
    21fc:	02 97       	sbiw	r24, 0x02	; 2
    21fe:	64 f0       	brlt	.+24     	; 0x2218 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    2200:	7f 5f       	subi	r23, 0xFF	; 255
    2202:	08 c0       	rjmp	.+16     	; 0x2214 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    2204:	fd 01       	movw	r30, r26
    2206:	e7 0f       	add	r30, r23
    2208:	f1 1d       	adc	r31, r1
    220a:	e4 58       	subi	r30, 0x84	; 132
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    2212:	7f 5f       	subi	r23, 0xFF	; 255
    2214:	7c 17       	cp	r23, r28
    2216:	b0 f3       	brcs	.-20     	; 0x2204 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    2218:	cf 91       	pop	r28
    221a:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00001bd6 <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    1bd6:	af 92       	push	r10
    1bd8:	bf 92       	push	r11
    1bda:	cf 92       	push	r12
    1bdc:	df 92       	push	r13
    1bde:	ef 92       	push	r14
    1be0:	ff 92       	push	r15
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	ec 01       	movw	r28, r24
    1bec:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
    1bee:	68 83       	st	Y, r22
    state->nCollections=nCollections;
    1bf0:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    1bf2:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    1bf4:	00 e0       	ldi	r16, 0x00	; 0
    1bf6:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    1bf8:	8f c0       	rjmp	.+286    	; 0x1d18 <mrpp_state_init+0x142>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    1bfa:	ed 2d       	mov	r30, r13
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	cf 01       	movw	r24, r30
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	8e 0f       	add	r24, r30
    1c0a:	9f 1f       	adc	r25, r31
    1c0c:	84 0f       	add	r24, r20
    1c0e:	95 1f       	adc	r25, r21
    1c10:	dc 01       	movw	r26, r24
    1c12:	12 96       	adiw	r26, 0x02	; 2
    1c14:	6d 91       	ld	r22, X+
    1c16:	7c 91       	ld	r23, X
    1c18:	13 97       	sbiw	r26, 0x03	; 3
    1c1a:	df 01       	movw	r26, r30
    1c1c:	aa 0f       	add	r26, r26
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	9f 01       	movw	r18, r30
    1c22:	22 0f       	add	r18, r18
    1c24:	33 1f       	adc	r19, r19
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	22 0f       	add	r18, r18
    1c2c:	33 1f       	adc	r19, r19
    1c2e:	a2 0f       	add	r26, r18
    1c30:	b3 1f       	adc	r27, r19
    1c32:	5d 01       	movw	r10, r26
    1c34:	ac 0e       	add	r10, r28
    1c36:	bd 1e       	adc	r11, r29
    1c38:	d5 01       	movw	r26, r10
    1c3a:	19 96       	adiw	r26, 0x09	; 9
    1c3c:	7c 93       	st	X, r23
    1c3e:	6e 93       	st	-X, r22
    1c40:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
    1c42:	dc 01       	movw	r26, r24
    1c44:	14 96       	adiw	r26, 0x04	; 4
    1c46:	2c 91       	ld	r18, X
    1c48:	d5 01       	movw	r26, r10
    1c4a:	17 96       	adiw	r26, 0x07	; 7
    1c4c:	2c 93       	st	X, r18
    1c4e:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    1c50:	14 96       	adiw	r26, 0x04	; 4
    1c52:	1c 93       	st	X, r17
    1c54:	0e 93       	st	-X, r16
    1c56:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    1c58:	dc 01       	movw	r26, r24
    1c5a:	2d 91       	ld	r18, X+
    1c5c:	3c 91       	ld	r19, X
    1c5e:	11 97       	sbiw	r26, 0x01	; 1
    1c60:	14 96       	adiw	r26, 0x04	; 4
    1c62:	8c 91       	ld	r24, X
    1c64:	82 9f       	mul	r24, r18
    1c66:	70 01       	movw	r14, r0
    1c68:	83 9f       	mul	r24, r19
    1c6a:	f0 0c       	add	r15, r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	b6 e0       	ldi	r27, 0x06	; 6
    1c70:	eb 0e       	add	r14, r27
    1c72:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    1c74:	d5 01       	movw	r26, r10
    1c76:	16 96       	adiw	r26, 0x06	; 6
    1c78:	fc 92       	st	X, r15
    1c7a:	ee 92       	st	-X, r14
    1c7c:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    1c7e:	98 01       	movw	r18, r16
    1c80:	ab ea       	ldi	r26, 0xAB	; 171
    1c82:	ba ea       	ldi	r27, 0xAA	; 170
    1c84:	0e 94 6d 30 	call	0x60da	; 0x60da <__umulhisi3>
    1c88:	96 95       	lsr	r25
    1c8a:	87 95       	ror	r24
    1c8c:	92 95       	swap	r25
    1c8e:	82 95       	swap	r24
    1c90:	8f 70       	andi	r24, 0x0F	; 15
    1c92:	89 27       	eor	r24, r25
    1c94:	9f 70       	andi	r25, 0x0F	; 15
    1c96:	89 27       	eor	r24, r25
    1c98:	9f 01       	movw	r18, r30
    1c9a:	2f 5f       	subi	r18, 0xFF	; 255
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	d9 01       	movw	r26, r18
    1ca0:	aa 0f       	add	r26, r26
    1ca2:	bb 1f       	adc	r27, r27
    1ca4:	22 0f       	add	r18, r18
    1ca6:	33 1f       	adc	r19, r19
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	22 0f       	add	r18, r18
    1cae:	33 1f       	adc	r19, r19
    1cb0:	a2 0f       	add	r26, r18
    1cb2:	b3 1f       	adc	r27, r19
    1cb4:	ac 0f       	add	r26, r28
    1cb6:	bd 1f       	adc	r27, r29
    1cb8:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
    1cba:	0e 0d       	add	r16, r14
    1cbc:	1f 1d       	adc	r17, r15
    1cbe:	98 01       	movw	r18, r16
    1cc0:	ab ea       	ldi	r26, 0xAB	; 171
    1cc2:	ba ea       	ldi	r27, 0xAA	; 170
    1cc4:	0e 94 6d 30 	call	0x60da	; 0x60da <__umulhisi3>
    1cc8:	7c 01       	movw	r14, r24
    1cca:	f6 94       	lsr	r15
    1ccc:	e7 94       	ror	r14
    1cce:	f6 94       	lsr	r15
    1cd0:	e7 94       	ror	r14
    1cd2:	f6 94       	lsr	r15
    1cd4:	e7 94       	ror	r14
    1cd6:	f6 94       	lsr	r15
    1cd8:	e7 94       	ror	r14
    1cda:	f6 94       	lsr	r15
    1cdc:	e7 94       	ror	r14
    1cde:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
    1ce0:	20 e3       	ldi	r18, 0x30	; 48
    1ce2:	2e 9d       	mul	r18, r14
    1ce4:	c0 01       	movw	r24, r0
    1ce6:	2f 9d       	mul	r18, r15
    1ce8:	90 0d       	add	r25, r0
    1cea:	11 24       	eor	r1, r1
    1cec:	08 17       	cp	r16, r24
    1cee:	19 07       	cpc	r17, r25
    1cf0:	19 f4       	brne	.+6      	; 0x1cf8 <mrpp_state_init+0x122>
    1cf2:	bb 24       	eor	r11, r11
    1cf4:	ba 94       	dec	r11
    1cf6:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
    1cf8:	cf 01       	movw	r24, r30
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	ee 0f       	add	r30, r30
    1d00:	ff 1f       	adc	r31, r31
    1d02:	ee 0f       	add	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	ee 0f       	add	r30, r30
    1d08:	ff 1f       	adc	r31, r31
    1d0a:	e8 0f       	add	r30, r24
    1d0c:	f9 1f       	adc	r31, r25
    1d0e:	ec 0f       	add	r30, r28
    1d10:	fd 1f       	adc	r31, r29
    1d12:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    1d14:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    1d16:	d3 94       	inc	r13
    1d18:	dc 14       	cp	r13, r12
    1d1a:	08 f4       	brcc	.+2      	; 0x1d1e <mrpp_state_init+0x148>
    1d1c:	6e cf       	rjmp	.-292    	; 0x1bfa <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    1d1e:	98 01       	movw	r18, r16
    1d20:	ab ea       	ldi	r26, 0xAB	; 171
    1d22:	ba ea       	ldi	r27, 0xAA	; 170
    1d24:	0e 94 6d 30 	call	0x60da	; 0x60da <__umulhisi3>
    1d28:	fc 01       	movw	r30, r24
    1d2a:	f6 95       	lsr	r31
    1d2c:	e7 95       	ror	r30
    1d2e:	f2 95       	swap	r31
    1d30:	e2 95       	swap	r30
    1d32:	ef 70       	andi	r30, 0x0F	; 15
    1d34:	ef 27       	eor	r30, r31
    1d36:	ff 70       	andi	r31, 0x0F	; 15
    1d38:	ef 27       	eor	r30, r31
    1d3a:	4e 2f       	mov	r20, r30
    1d3c:	52 e0       	ldi	r21, 0x02	; 2
    1d3e:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
    1d40:	20 e3       	ldi	r18, 0x30	; 48
    1d42:	2e 9f       	mul	r18, r30
    1d44:	c0 01       	movw	r24, r0
    1d46:	2f 9f       	mul	r18, r31
    1d48:	90 0d       	add	r25, r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	08 1b       	sub	r16, r24
    1d4e:	19 0b       	sbc	r17, r25
    1d50:	11 f4       	brne	.+4      	; 0x1d56 <mrpp_state_init+0x180>
    1d52:	51 e0       	ldi	r21, 0x01	; 1
    1d54:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
    1d56:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    1d58:	01 2b       	or	r16, r17
    1d5a:	11 f0       	breq	.+4      	; 0x1d60 <mrpp_state_init+0x18a>
    1d5c:	41 e0       	ldi	r20, 0x01	; 1
    1d5e:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
    1d60:	fe 01       	movw	r30, r28
    1d62:	e5 58       	subi	r30, 0x85	; 133
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	07 c0       	rjmp	.+14     	; 0x1d7a <mrpp_state_init+0x1a4>
    {
        state->bodies[i]=WAITING;
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e8 0f       	add	r30, r24
    1d70:	f1 1d       	adc	r31, r1
    1d72:	e4 58       	subi	r30, 0x84	; 132
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    1d78:	8f 5f       	subi	r24, 0xFF	; 255
    1d7a:	84 17       	cp	r24, r20
    1d7c:	b8 f3       	brcs	.-18     	; 0x1d6c <mrpp_state_init+0x196>
    {
        state->bodies[i]=WAITING;
    }
}
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	df 90       	pop	r13
    1d8c:	cf 90       	pop	r12
    1d8e:	bf 90       	pop	r11
    1d90:	af 90       	pop	r10
    1d92:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00003a2e <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    3a2e:	0f 93       	push	r16
    3a30:	1f 93       	push	r17
    3a32:	cf 93       	push	r28
    3a34:	df 93       	push	r29
    3a36:	8c 01       	movw	r16, r24
    3a38:	eb 01       	movw	r28, r22
    package[0]=0;
    3a3a:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	81 81       	ldd	r24, Z+1	; 0x01
    3a40:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3a42:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    3a44:	c8 01       	movw	r24, r16
    3a46:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	35 c0       	rjmp	.+106    	; 0x3ab8 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    3a4e:	82 2f       	mov	r24, r18
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	dc 01       	movw	r26, r24
    3a54:	aa 0f       	add	r26, r26
    3a56:	bb 1f       	adc	r27, r27
    3a58:	aa 0f       	add	r26, r26
    3a5a:	bb 1f       	adc	r27, r27
    3a5c:	ad 01       	movw	r20, r26
    3a5e:	4a 5f       	subi	r20, 0xFA	; 250
    3a60:	5f 4f       	sbci	r21, 0xFF	; 255
    3a62:	4c 0f       	add	r20, r28
    3a64:	5d 1f       	adc	r21, r29
    3a66:	fc 01       	movw	r30, r24
    3a68:	ee 0f       	add	r30, r30
    3a6a:	ff 1f       	adc	r31, r31
    3a6c:	88 0f       	add	r24, r24
    3a6e:	99 1f       	adc	r25, r25
    3a70:	88 0f       	add	r24, r24
    3a72:	99 1f       	adc	r25, r25
    3a74:	88 0f       	add	r24, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	e8 0f       	add	r30, r24
    3a7a:	f9 1f       	adc	r31, r25
    3a7c:	bf 01       	movw	r22, r30
    3a7e:	60 0f       	add	r22, r16
    3a80:	71 1f       	adc	r23, r17
    3a82:	fb 01       	movw	r30, r22
    3a84:	84 81       	ldd	r24, Z+4	; 0x04
    3a86:	fa 01       	movw	r30, r20
    3a88:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	07 96       	adiw	r24, 0x07	; 7
    3a8e:	8c 0f       	add	r24, r28
    3a90:	9d 1f       	adc	r25, r29
    3a92:	fb 01       	movw	r30, r22
    3a94:	33 81       	ldd	r19, Z+3	; 0x03
    3a96:	fc 01       	movw	r30, r24
    3a98:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	08 96       	adiw	r24, 0x08	; 8
    3a9e:	8c 0f       	add	r24, r28
    3aa0:	9d 1f       	adc	r25, r29
    3aa2:	fb 01       	movw	r30, r22
    3aa4:	36 81       	ldd	r19, Z+6	; 0x06
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    3aaa:	19 96       	adiw	r26, 0x09	; 9
    3aac:	ac 0f       	add	r26, r28
    3aae:	bd 1f       	adc	r27, r29
    3ab0:	fb 01       	movw	r30, r22
    3ab2:	85 81       	ldd	r24, Z+5	; 0x05
    3ab4:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3ab6:	2f 5f       	subi	r18, 0xFF	; 255
    3ab8:	f8 01       	movw	r30, r16
    3aba:	82 81       	ldd	r24, Z+2	; 0x02
    3abc:	28 17       	cp	r18, r24
    3abe:	38 f2       	brcs	.-114    	; 0x3a4e <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3ac0:	88 0f       	add	r24, r24
    3ac2:	88 0f       	add	r24, r24
}
    3ac4:	8a 5f       	subi	r24, 0xFA	; 250
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	1f 91       	pop	r17
    3acc:	0f 91       	pop	r16
    3ace:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00003842 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    3842:	0f 93       	push	r16
    3844:	1f 93       	push	r17
    3846:	cf 93       	push	r28
    3848:	df 93       	push	r29
    384a:	8c 01       	movw	r16, r24
    384c:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    384e:	fc 01       	movw	r30, r24
    3850:	81 81       	ldd	r24, Z+1	; 0x01
    3852:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    3854:	81 81       	ldd	r24, Z+1	; 0x01
    3856:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3858:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    385a:	c8 01       	movw	r24, r16
    385c:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	35 c0       	rjmp	.+106    	; 0x38ce <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    3864:	82 2f       	mov	r24, r18
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	dc 01       	movw	r26, r24
    386a:	aa 0f       	add	r26, r26
    386c:	bb 1f       	adc	r27, r27
    386e:	aa 0f       	add	r26, r26
    3870:	bb 1f       	adc	r27, r27
    3872:	ad 01       	movw	r20, r26
    3874:	4a 5f       	subi	r20, 0xFA	; 250
    3876:	5f 4f       	sbci	r21, 0xFF	; 255
    3878:	4c 0f       	add	r20, r28
    387a:	5d 1f       	adc	r21, r29
    387c:	fc 01       	movw	r30, r24
    387e:	ee 0f       	add	r30, r30
    3880:	ff 1f       	adc	r31, r31
    3882:	88 0f       	add	r24, r24
    3884:	99 1f       	adc	r25, r25
    3886:	88 0f       	add	r24, r24
    3888:	99 1f       	adc	r25, r25
    388a:	88 0f       	add	r24, r24
    388c:	99 1f       	adc	r25, r25
    388e:	e8 0f       	add	r30, r24
    3890:	f9 1f       	adc	r31, r25
    3892:	bf 01       	movw	r22, r30
    3894:	60 0f       	add	r22, r16
    3896:	71 1f       	adc	r23, r17
    3898:	fb 01       	movw	r30, r22
    389a:	84 81       	ldd	r24, Z+4	; 0x04
    389c:	fa 01       	movw	r30, r20
    389e:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    38a0:	cd 01       	movw	r24, r26
    38a2:	07 96       	adiw	r24, 0x07	; 7
    38a4:	8c 0f       	add	r24, r28
    38a6:	9d 1f       	adc	r25, r29
    38a8:	fb 01       	movw	r30, r22
    38aa:	33 81       	ldd	r19, Z+3	; 0x03
    38ac:	fc 01       	movw	r30, r24
    38ae:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    38b0:	cd 01       	movw	r24, r26
    38b2:	08 96       	adiw	r24, 0x08	; 8
    38b4:	8c 0f       	add	r24, r28
    38b6:	9d 1f       	adc	r25, r29
    38b8:	fb 01       	movw	r30, r22
    38ba:	36 81       	ldd	r19, Z+6	; 0x06
    38bc:	fc 01       	movw	r30, r24
    38be:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    38c0:	19 96       	adiw	r26, 0x09	; 9
    38c2:	ac 0f       	add	r26, r28
    38c4:	bd 1f       	adc	r27, r29
    38c6:	fb 01       	movw	r30, r22
    38c8:	85 81       	ldd	r24, Z+5	; 0x05
    38ca:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    38cc:	2f 5f       	subi	r18, 0xFF	; 255
    38ce:	f8 01       	movw	r30, r16
    38d0:	82 81       	ldd	r24, Z+2	; 0x02
    38d2:	28 17       	cp	r18, r24
    38d4:	38 f2       	brcs	.-114    	; 0x3864 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    38d6:	88 0f       	add	r24, r24
    38d8:	88 0f       	add	r24, r24
}
    38da:	8a 5f       	subi	r24, 0xFA	; 250
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	1f 91       	pop	r17
    38e2:	0f 91       	pop	r16
    38e4:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00003ee2 <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    3ee2:	0f 93       	push	r16
    3ee4:	1f 93       	push	r17
    3ee6:	cf 93       	push	r28
    3ee8:	df 93       	push	r29
    3eea:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    3eec:	a6 2f       	mov	r26, r22
    3eee:	b0 e0       	ldi	r27, 0x00	; 0
    3ef0:	11 97       	sbiw	r26, 0x01	; 1
    3ef2:	fd 01       	movw	r30, r26
    3ef4:	ee 0f       	add	r30, r30
    3ef6:	ff 1f       	adc	r31, r31
    3ef8:	cd 01       	movw	r24, r26
    3efa:	88 0f       	add	r24, r24
    3efc:	99 1f       	adc	r25, r25
    3efe:	88 0f       	add	r24, r24
    3f00:	99 1f       	adc	r25, r25
    3f02:	88 0f       	add	r24, r24
    3f04:	99 1f       	adc	r25, r25
    3f06:	e8 0f       	add	r30, r24
    3f08:	f9 1f       	adc	r31, r25
    3f0a:	e0 0f       	add	r30, r16
    3f0c:	f1 1f       	adc	r31, r17
    3f0e:	83 e0       	ldi	r24, 0x03	; 3
    3f10:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	0a c0       	rjmp	.+20     	; 0x3f2a <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    3f16:	e9 2f       	mov	r30, r25
    3f18:	f0 e0       	ldi	r31, 0x00	; 0
    3f1a:	e9 01       	movw	r28, r18
    3f1c:	ce 0f       	add	r28, r30
    3f1e:	df 1f       	adc	r29, r31
    3f20:	e4 0f       	add	r30, r20
    3f22:	f5 1f       	adc	r31, r21
    3f24:	80 81       	ld	r24, Z
    3f26:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    3f28:	9f 5f       	subi	r25, 0xFF	; 255
    3f2a:	94 30       	cpi	r25, 0x04	; 4
    3f2c:	a0 f3       	brcs	.-24     	; 0x3f16 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    3f2e:	cd 01       	movw	r24, r26
    3f30:	88 0f       	add	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	aa 0f       	add	r26, r26
    3f36:	bb 1f       	adc	r27, r27
    3f38:	aa 0f       	add	r26, r26
    3f3a:	bb 1f       	adc	r27, r27
    3f3c:	aa 0f       	add	r26, r26
    3f3e:	bb 1f       	adc	r27, r27
    3f40:	a8 0f       	add	r26, r24
    3f42:	b9 1f       	adc	r27, r25
    3f44:	a0 0f       	add	r26, r16
    3f46:	b1 1f       	adc	r27, r17
    3f48:	19 96       	adiw	r26, 0x09	; 9
    3f4a:	8c 91       	ld	r24, X
    3f4c:	19 97       	sbiw	r26, 0x09	; 9
    3f4e:	f9 01       	movw	r30, r18
    3f50:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    3f52:	18 96       	adiw	r26, 0x08	; 8
    3f54:	8c 91       	ld	r24, X
    3f56:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    3f58:	c8 01       	movw	r24, r16
    3f5a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <update_bodies>
}
    3f5e:	df 91       	pop	r29
    3f60:	cf 91       	pop	r28
    3f62:	1f 91       	pop	r17
    3f64:	0f 91       	pop	r16
    3f66:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00005c0e <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    5c0e:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	0b c0       	rjmp	.+22     	; 0x5c2a <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    5c14:	29 2f       	mov	r18, r25
    5c16:	30 e0       	ldi	r19, 0x00	; 0
    5c18:	fa 01       	movw	r30, r20
    5c1a:	e2 0f       	add	r30, r18
    5c1c:	f3 1f       	adc	r31, r19
    5c1e:	e4 58       	subi	r30, 0x84	; 132
    5c20:	ff 4f       	sbci	r31, 0xFF	; 255
    5c22:	80 81       	ld	r24, Z
    5c24:	81 30       	cpi	r24, 0x01	; 1
    5c26:	49 f0       	breq	.+18     	; 0x5c3a <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5c28:	9f 5f       	subi	r25, 0xFF	; 255
    5c2a:	fa 01       	movw	r30, r20
    5c2c:	e5 58       	subi	r30, 0x85	; 133
    5c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c30:	80 81       	ld	r24, Z
    5c32:	98 17       	cp	r25, r24
    5c34:	78 f3       	brcs	.-34     	; 0x5c14 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    5c36:	2f ef       	ldi	r18, 0xFF	; 255
    5c38:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    5c3a:	c9 01       	movw	r24, r18
    5c3c:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00005d82 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    5d82:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5d84:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    5d86:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    5d88:	0a c0       	rjmp	.+20     	; 0x5d9e <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    5d8a:	f9 01       	movw	r30, r18
    5d8c:	e9 0f       	add	r30, r25
    5d8e:	f1 1d       	adc	r31, r1
    5d90:	e4 58       	subi	r30, 0x84	; 132
    5d92:	ff 4f       	sbci	r31, 0xFF	; 255
    5d94:	40 81       	ld	r20, Z
    5d96:	42 30       	cpi	r20, 0x02	; 2
    5d98:	09 f0       	breq	.+2      	; 0x5d9c <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    5d9a:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5d9c:	9f 5f       	subi	r25, 0xFF	; 255
    5d9e:	f9 01       	movw	r30, r18
    5da0:	e5 58       	subi	r30, 0x85	; 133
    5da2:	ff 4f       	sbci	r31, 0xFF	; 255
    5da4:	40 81       	ld	r20, Z
    5da6:	94 17       	cp	r25, r20
    5da8:	80 f3       	brcs	.-32     	; 0x5d8a <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    5daa:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

000026e4 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    26e4:	8f 92       	push	r8
    26e6:	9f 92       	push	r9
    26e8:	af 92       	push	r10
    26ea:	bf 92       	push	r11
    26ec:	cf 92       	push	r12
    26ee:	df 92       	push	r13
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	ec 01       	movw	r28, r24
    26fe:	6b 01       	movw	r12, r22
    2700:	4a 01       	movw	r8, r20
    2702:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    2704:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    2708:	8f 3f       	cpi	r24, 0xFF	; 255
    270a:	2f ef       	ldi	r18, 0xFF	; 255
    270c:	92 07       	cpc	r25, r18
    270e:	09 f4       	brne	.+2      	; 0x2712 <mrpp_state_get_ready_body+0x2e>
    2710:	66 c0       	rjmp	.+204    	; 0x27de <mrpp_state_get_ready_body+0xfa>
    2712:	8c 15       	cp	r24, r12
    2714:	9d 05       	cpc	r25, r13
    2716:	09 f0       	breq	.+2      	; 0x271a <mrpp_state_get_ready_body+0x36>
    2718:	64 c0       	rjmp	.+200    	; 0x27e2 <mrpp_state_get_ready_body+0xfe>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	09 c0       	rjmp	.+18     	; 0x2730 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    271e:	fe 01       	movw	r30, r28
    2720:	e8 0f       	add	r30, r24
    2722:	f1 1d       	adc	r31, r1
    2724:	e4 58       	subi	r30, 0x84	; 132
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	90 81       	ld	r25, Z
    272a:	91 30       	cpi	r25, 0x01	; 1
    272c:	41 f0       	breq	.+16     	; 0x273e <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    272e:	8f 5f       	subi	r24, 0xFF	; 255
    2730:	fe 01       	movw	r30, r28
    2732:	e5 58       	subi	r30, 0x85	; 133
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	90 81       	ld	r25, Z
    2738:	89 17       	cp	r24, r25
    273a:	88 f3       	brcs	.-30     	; 0x271e <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    273c:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	98 0f       	add	r25, r24
    2742:	f4 01       	movw	r30, r8
    2744:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    2746:	99 81       	ldd	r25, Y+1	; 0x01
    2748:	f5 01       	movw	r30, r10
    274a:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	40 e3       	ldi	r20, 0x30	; 48
    2750:	48 9f       	mul	r20, r24
    2752:	90 01       	movw	r18, r0
    2754:	49 9f       	mul	r20, r25
    2756:	30 0d       	add	r19, r0
    2758:	11 24       	eor	r1, r1
    275a:	f8 01       	movw	r30, r16
    275c:	31 83       	std	Z+1, r19	; 0x01
    275e:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    2760:	fe 01       	movw	r30, r28
    2762:	e5 58       	subi	r30, 0x85	; 133
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	20 81       	ld	r18, Z
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	21 50       	subi	r18, 0x01	; 1
    276c:	31 09       	sbc	r19, r1
    276e:	82 17       	cp	r24, r18
    2770:	93 07       	cpc	r25, r19
    2772:	2c f4       	brge	.+10     	; 0x277e <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    2774:	80 e3       	ldi	r24, 0x30	; 48
    2776:	f7 01       	movw	r30, r14
    2778:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	33 c0       	rjmp	.+102    	; 0x27e4 <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9c 01       	movw	r18, r24
    2786:	22 0f       	add	r18, r18
    2788:	33 1f       	adc	r19, r19
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	82 0f       	add	r24, r18
    2798:	93 1f       	adc	r25, r19
    279a:	c8 0f       	add	r28, r24
    279c:	d9 1f       	adc	r29, r25
    279e:	4b 81       	ldd	r20, Y+3	; 0x03
    27a0:	5c 81       	ldd	r21, Y+4	; 0x04
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	48 0f       	add	r20, r24
    27a8:	59 1f       	adc	r21, r25
    27aa:	9a 01       	movw	r18, r20
    27ac:	ab ea       	ldi	r26, 0xAB	; 171
    27ae:	ba ea       	ldi	r27, 0xAA	; 170
    27b0:	0e 94 6d 30 	call	0x60da	; 0x60da <__umulhisi3>
    27b4:	96 95       	lsr	r25
    27b6:	87 95       	ror	r24
    27b8:	92 95       	swap	r25
    27ba:	82 95       	swap	r24
    27bc:	8f 70       	andi	r24, 0x0F	; 15
    27be:	89 27       	eor	r24, r25
    27c0:	9f 70       	andi	r25, 0x0F	; 15
    27c2:	89 27       	eor	r24, r25
    27c4:	60 e3       	ldi	r22, 0x30	; 48
    27c6:	68 9f       	mul	r22, r24
    27c8:	90 01       	movw	r18, r0
    27ca:	69 9f       	mul	r22, r25
    27cc:	30 0d       	add	r19, r0
    27ce:	11 24       	eor	r1, r1
    27d0:	ca 01       	movw	r24, r20
    27d2:	82 1b       	sub	r24, r18
    27d4:	93 0b       	sbc	r25, r19
    27d6:	f7 01       	movw	r30, r14
    27d8:	80 83       	st	Z, r24
    } 
    return true; 
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	03 c0       	rjmp	.+6      	; 0x27e4 <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	01 c0       	rjmp	.+2      	; 0x27e4 <mrpp_state_get_ready_body+0x100>
    27e2:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	ff 90       	pop	r15
    27ee:	ef 90       	pop	r14
    27f0:	df 90       	pop	r13
    27f2:	cf 90       	pop	r12
    27f4:	bf 90       	pop	r11
    27f6:	af 90       	pop	r10
    27f8:	9f 90       	pop	r9
    27fa:	8f 90       	pop	r8
    27fc:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00006004 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    6004:	fc 01       	movw	r30, r24
    6006:	e5 58       	subi	r30, 0x85	; 133
    6008:	ff 4f       	sbci	r31, 0xFF	; 255
    600a:	20 81       	ld	r18, Z
    600c:	30 e0       	ldi	r19, 0x00	; 0
    600e:	62 17       	cp	r22, r18
    6010:	73 07       	cpc	r23, r19
    6012:	3c f4       	brge	.+14     	; 0x6022 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    6014:	68 0f       	add	r22, r24
    6016:	79 1f       	adc	r23, r25
    6018:	fb 01       	movw	r30, r22
    601a:	e4 58       	subi	r30, 0x84	; 132
    601c:	ff 4f       	sbci	r31, 0xFF	; 255
    601e:	82 e0       	ldi	r24, 0x02	; 2
    6020:	80 83       	st	Z, r24
    6022:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

0000584e <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    584e:	70 e0       	ldi	r23, 0x00	; 0
    5850:	61 50       	subi	r22, 0x01	; 1
    5852:	71 09       	sbc	r23, r1
    5854:	fb 01       	movw	r30, r22
    5856:	ee 0f       	add	r30, r30
    5858:	ff 1f       	adc	r31, r31
    585a:	66 0f       	add	r22, r22
    585c:	77 1f       	adc	r23, r23
    585e:	66 0f       	add	r22, r22
    5860:	77 1f       	adc	r23, r23
    5862:	66 0f       	add	r22, r22
    5864:	77 1f       	adc	r23, r23
    5866:	e6 0f       	add	r30, r22
    5868:	f7 1f       	adc	r31, r23
    586a:	e8 0f       	add	r30, r24
    586c:	f9 1f       	adc	r31, r25
    586e:	83 81       	ldd	r24, Z+3	; 0x03
    5870:	94 81       	ldd	r25, Z+4	; 0x04
    5872:	da 01       	movw	r26, r20
    5874:	8d 93       	st	X+, r24
    5876:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    5878:	85 81       	ldd	r24, Z+5	; 0x05
    587a:	96 81       	ldd	r25, Z+6	; 0x06
    587c:	f9 01       	movw	r30, r18
    587e:	91 83       	std	Z+1, r25	; 0x01
    5880:	80 83       	st	Z, r24
    5882:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00005c3e <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    5c3e:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    5c42:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    5c46:	01 96       	adiw	r24, 0x01	; 1
    5c48:	90 93 86 0f 	sts	0x0F86, r25	; 0x800f86 <cnt+0x1>
    5c4c:	80 93 85 0f 	sts	0x0F85, r24	; 0x800f85 <cnt>
	if(cnt>=_seconds){
    5c50:	20 91 87 0f 	lds	r18, 0x0F87	; 0x800f87 <_seconds>
    5c54:	30 91 88 0f 	lds	r19, 0x0F88	; 0x800f88 <_seconds+0x1>
    5c58:	82 17       	cp	r24, r18
    5c5a:	93 07       	cpc	r25, r19
    5c5c:	38 f0       	brcs	.+14     	; 0x5c6c <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    5c5e:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <eventPointer>
    5c62:	0e 94 26 2b 	call	0x564c	; 0x564c <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    5c66:	80 e0       	ldi	r24, 0x00	; 0
    5c68:	0e 94 8b 31 	call	0x6316	; 0x6316 <PM_HAL_BC_power>
    5c6c:	08 95       	ret

Disassembly of section .text.PUMP_start:

00005e4c <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    5e4c:	10 92 86 0f 	sts	0x0F86, r1	; 0x800f86 <cnt+0x1>
    5e50:	10 92 85 0f 	sts	0x0F85, r1	; 0x800f85 <cnt>
	_seconds=seconds;
    5e54:	90 93 88 0f 	sts	0x0F88, r25	; 0x800f88 <_seconds+0x1>
    5e58:	80 93 87 0f 	sts	0x0F87, r24	; 0x800f87 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    5e5c:	8f e1       	ldi	r24, 0x1F	; 31
    5e5e:	9e e2       	ldi	r25, 0x2E	; 46
    5e60:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <TC2_HAL_subscribe>
    5e64:	80 93 a4 0f 	sts	0x0FA4, r24	; 0x800fa4 <eventPointer>
	PM_HAL_BC_power(true);
    5e68:	81 e0       	ldi	r24, 0x01	; 1
    5e6a:	0e 94 8b 31 	call	0x6316	; 0x6316 <PM_HAL_BC_power>
    5e6e:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

0000616a <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    616a:	40 91 85 0f 	lds	r20, 0x0F85	; 0x800f85 <cnt>
    616e:	50 91 86 0f 	lds	r21, 0x0F86	; 0x800f86 <cnt+0x1>
    6172:	20 91 87 0f 	lds	r18, 0x0F87	; 0x800f87 <_seconds>
    6176:	30 91 88 0f 	lds	r19, 0x0F88	; 0x800f88 <_seconds+0x1>
    617a:	81 e0       	ldi	r24, 0x01	; 1
    617c:	42 17       	cp	r20, r18
    617e:	53 07       	cpc	r21, r19
    6180:	08 f4       	brcc	.+2      	; 0x6184 <PUMP_is_done+0x1a>
    6182:	80 e0       	ldi	r24, 0x00	; 0
}
    6184:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00002a1e <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2a1e:	1f 93       	push	r17
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <datetime_to_BCD+0x8>
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <datetime_to_BCD+0xa>
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <datetime_to_BCD+0xc>
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	f9 01       	movw	r30, r18
    2a30:	3d ec       	ldi	r19, 0xCD	; 205
    2a32:	43 9f       	mul	r20, r19
    2a34:	21 2d       	mov	r18, r1
    2a36:	11 24       	eor	r1, r1
    2a38:	26 95       	lsr	r18
    2a3a:	26 95       	lsr	r18
    2a3c:	26 95       	lsr	r18
    2a3e:	10 e1       	ldi	r17, 0x10	; 16
    2a40:	21 9f       	mul	r18, r17
    2a42:	d0 01       	movw	r26, r0
    2a44:	11 24       	eor	r1, r1
    2a46:	22 0f       	add	r18, r18
    2a48:	b2 2f       	mov	r27, r18
    2a4a:	bb 0f       	add	r27, r27
    2a4c:	bb 0f       	add	r27, r27
    2a4e:	2b 0f       	add	r18, r27
    2a50:	42 1b       	sub	r20, r18
    2a52:	4a 2b       	or	r20, r26
    2a54:	40 83       	st	Z, r20
    2a56:	53 9f       	mul	r21, r19
    2a58:	21 2d       	mov	r18, r1
    2a5a:	11 24       	eor	r1, r1
    2a5c:	26 95       	lsr	r18
    2a5e:	26 95       	lsr	r18
    2a60:	26 95       	lsr	r18
    2a62:	40 e1       	ldi	r20, 0x10	; 16
    2a64:	24 9f       	mul	r18, r20
    2a66:	d0 01       	movw	r26, r0
    2a68:	11 24       	eor	r1, r1
    2a6a:	22 0f       	add	r18, r18
    2a6c:	42 2f       	mov	r20, r18
    2a6e:	44 0f       	add	r20, r20
    2a70:	44 0f       	add	r20, r20
    2a72:	24 0f       	add	r18, r20
    2a74:	52 1b       	sub	r21, r18
    2a76:	5a 2b       	or	r21, r26
    2a78:	51 83       	std	Z+1, r21	; 0x01
    2a7a:	63 9f       	mul	r22, r19
    2a7c:	41 2d       	mov	r20, r1
    2a7e:	11 24       	eor	r1, r1
    2a80:	46 95       	lsr	r20
    2a82:	46 95       	lsr	r20
    2a84:	46 95       	lsr	r20
    2a86:	10 e1       	ldi	r17, 0x10	; 16
    2a88:	41 9f       	mul	r20, r17
    2a8a:	d0 01       	movw	r26, r0
    2a8c:	11 24       	eor	r1, r1
    2a8e:	44 0f       	add	r20, r20
    2a90:	24 2f       	mov	r18, r20
    2a92:	22 0f       	add	r18, r18
    2a94:	22 0f       	add	r18, r18
    2a96:	42 0f       	add	r20, r18
    2a98:	64 1b       	sub	r22, r20
    2a9a:	6a 2b       	or	r22, r26
    2a9c:	62 83       	std	Z+2, r22	; 0x02
    2a9e:	73 9f       	mul	r23, r19
    2aa0:	41 2d       	mov	r20, r1
    2aa2:	11 24       	eor	r1, r1
    2aa4:	46 95       	lsr	r20
    2aa6:	46 95       	lsr	r20
    2aa8:	46 95       	lsr	r20
    2aaa:	20 e1       	ldi	r18, 0x10	; 16
    2aac:	42 9f       	mul	r20, r18
    2aae:	d0 01       	movw	r26, r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	44 0f       	add	r20, r20
    2ab4:	24 2f       	mov	r18, r20
    2ab6:	22 0f       	add	r18, r18
    2ab8:	22 0f       	add	r18, r18
    2aba:	42 0f       	add	r20, r18
    2abc:	74 1b       	sub	r23, r20
    2abe:	7a 2b       	or	r23, r26
    2ac0:	73 83       	std	Z+3, r23	; 0x03
    2ac2:	83 9f       	mul	r24, r19
    2ac4:	41 2d       	mov	r20, r1
    2ac6:	11 24       	eor	r1, r1
    2ac8:	46 95       	lsr	r20
    2aca:	46 95       	lsr	r20
    2acc:	46 95       	lsr	r20
    2ace:	10 e1       	ldi	r17, 0x10	; 16
    2ad0:	41 9f       	mul	r20, r17
    2ad2:	b0 01       	movw	r22, r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	44 0f       	add	r20, r20
    2ad8:	24 2f       	mov	r18, r20
    2ada:	22 0f       	add	r18, r18
    2adc:	22 0f       	add	r18, r18
    2ade:	42 0f       	add	r20, r18
    2ae0:	84 1b       	sub	r24, r20
    2ae2:	86 2b       	or	r24, r22
    2ae4:	84 83       	std	Z+4, r24	; 0x04
    2ae6:	93 9f       	mul	r25, r19
    2ae8:	31 2d       	mov	r19, r1
    2aea:	11 24       	eor	r1, r1
    2aec:	36 95       	lsr	r19
    2aee:	36 95       	lsr	r19
    2af0:	36 95       	lsr	r19
    2af2:	20 e1       	ldi	r18, 0x10	; 16
    2af4:	32 9f       	mul	r19, r18
    2af6:	a0 01       	movw	r20, r0
    2af8:	11 24       	eor	r1, r1
    2afa:	33 0f       	add	r19, r19
    2afc:	83 2f       	mov	r24, r19
    2afe:	88 0f       	add	r24, r24
    2b00:	88 0f       	add	r24, r24
    2b02:	38 0f       	add	r19, r24
    2b04:	93 1b       	sub	r25, r19
    2b06:	94 2b       	or	r25, r20
    2b08:	95 83       	std	Z+5, r25	; 0x05
    2b0a:	26 96       	adiw	r28, 0x06	; 6
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00004b86 <RTC_set_clock_out>:



const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    4b86:	cf 93       	push	r28
    4b88:	df 93       	push	r29
    4b8a:	00 d0       	rcall	.+0      	; 0x4b8c <RTC_set_clock_out+0x6>
    4b8c:	cd b7       	in	r28, 0x3d	; 61
    4b8e:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    4b90:	9d e0       	ldi	r25, 0x0D	; 13
    4b92:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    4b94:	81 30       	cpi	r24, 0x01	; 1
    4b96:	31 f0       	breq	.+12     	; 0x4ba4 <RTC_set_clock_out+0x1e>
    4b98:	18 f0       	brcs	.+6      	; 0x4ba0 <RTC_set_clock_out+0x1a>
    4b9a:	80 32       	cpi	r24, 0x20	; 32
    4b9c:	31 f0       	breq	.+12     	; 0x4baa <RTC_set_clock_out+0x24>
    4b9e:	13 c0       	rjmp	.+38     	; 0x4bc6 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    4ba0:	1a 82       	std	Y+2, r1	; 0x02
			break;
    4ba2:	05 c0       	rjmp	.+10     	; 0x4bae <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    4ba4:	83 e8       	ldi	r24, 0x83	; 131
    4ba6:	8a 83       	std	Y+2, r24	; 0x02
			break;
    4ba8:	02 c0       	rjmp	.+4      	; 0x4bae <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    4baa:	82 e8       	ldi	r24, 0x82	; 130
    4bac:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    4bae:	ae 01       	movw	r20, r28
    4bb0:	4f 5f       	subi	r20, 0xFF	; 255
    4bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    4bb4:	60 e8       	ldi	r22, 0x80	; 128
    4bb6:	22 e0       	ldi	r18, 0x02	; 2
    4bb8:	81 e5       	ldi	r24, 0x51	; 81
    4bba:	0e 94 df 30 	call	0x61be	; 0x61be <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    4bbe:	88 23       	and	r24, r24
    4bc0:	21 f0       	breq	.+8      	; 0x4bca <RTC_set_clock_out+0x44>
    4bc2:	82 e0       	ldi	r24, 0x02	; 2
    4bc4:	03 c0       	rjmp	.+6      	; 0x4bcc <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	01 c0       	rjmp	.+2      	; 0x4bcc <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    4bca:	80 e0       	ldi	r24, 0x00	; 0
}
    4bcc:	0f 90       	pop	r0
    4bce:	0f 90       	pop	r0
    4bd0:	df 91       	pop	r29
    4bd2:	cf 91       	pop	r28
    4bd4:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

0000595a <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    595a:	cf 93       	push	r28
    595c:	df 93       	push	r29
    595e:	00 d0       	rcall	.+0      	; 0x5960 <RTC_clear_wake_up_interrupt+0x6>
    5960:	cd b7       	in	r28, 0x3d	; 61
    5962:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    5964:	81 e0       	ldi	r24, 0x01	; 1
    5966:	89 83       	std	Y+1, r24	; 0x01
    5968:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    596a:	ae 01       	movw	r20, r28
    596c:	4f 5f       	subi	r20, 0xFF	; 255
    596e:	5f 4f       	sbci	r21, 0xFF	; 255
    5970:	60 e8       	ldi	r22, 0x80	; 128
    5972:	22 e0       	ldi	r18, 0x02	; 2
    5974:	81 e5       	ldi	r24, 0x51	; 81
    5976:	0e 94 df 30 	call	0x61be	; 0x61be <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    597a:	88 23       	and	r24, r24
    597c:	11 f0       	breq	.+4      	; 0x5982 <RTC_clear_wake_up_interrupt+0x28>
    597e:	82 e0       	ldi	r24, 0x02	; 2
    5980:	01 c0       	rjmp	.+2      	; 0x5984 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    5982:	80 e0       	ldi	r24, 0x00	; 0
}
    5984:	0f 90       	pop	r0
    5986:	0f 90       	pop	r0
    5988:	df 91       	pop	r29
    598a:	cf 91       	pop	r28
    598c:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

0000221c <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	27 97       	sbiw	r28, 0x07	; 7
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	8c 01       	movw	r16, r24
    2236:	21 e0       	ldi	r18, 0x01	; 1
    2238:	44 e7       	ldi	r20, 0x74	; 116
    223a:	57 e0       	ldi	r21, 0x07	; 7
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	81 e5       	ldi	r24, 0x51	; 81
    2240:	0e 94 a9 31 	call	0x6352	; 0x6352 <TWI_API_write_data>
    2244:	81 11       	cpse	r24, r1
    2246:	7c c0       	rjmp	.+248    	; 0x2340 <RTC_get_current_time+0x124>
    2248:	47 e0       	ldi	r20, 0x07	; 7
    224a:	be 01       	movw	r22, r28
    224c:	6f 5f       	subi	r22, 0xFF	; 255
    224e:	7f 4f       	sbci	r23, 0xFF	; 255
    2250:	81 e5       	ldi	r24, 0x51	; 81
    2252:	0e 94 77 2d 	call	0x5aee	; 0x5aee <TWI_API_repeat_read_data_stop>
    2256:	81 11       	cpse	r24, r1
    2258:	75 c0       	rjmp	.+234    	; 0x2344 <RTC_get_current_time+0x128>
    225a:	29 81       	ldd	r18, Y+1	; 0x01
    225c:	82 2f       	mov	r24, r18
    225e:	8f 77       	andi	r24, 0x7F	; 127
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	95 95       	asr	r25
    2264:	87 95       	ror	r24
    2266:	95 95       	asr	r25
    2268:	87 95       	ror	r24
    226a:	95 95       	asr	r25
    226c:	87 95       	ror	r24
    226e:	95 95       	asr	r25
    2270:	87 95       	ror	r24
    2272:	88 0f       	add	r24, r24
    2274:	98 2f       	mov	r25, r24
    2276:	99 0f       	add	r25, r25
    2278:	99 0f       	add	r25, r25
    227a:	89 0f       	add	r24, r25
    227c:	2f 70       	andi	r18, 0x0F	; 15
    227e:	82 0f       	add	r24, r18
    2280:	f8 01       	movw	r30, r16
    2282:	80 83       	st	Z, r24
    2284:	2a 81       	ldd	r18, Y+2	; 0x02
    2286:	82 2f       	mov	r24, r18
    2288:	8f 77       	andi	r24, 0x7F	; 127
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	95 95       	asr	r25
    228e:	87 95       	ror	r24
    2290:	95 95       	asr	r25
    2292:	87 95       	ror	r24
    2294:	95 95       	asr	r25
    2296:	87 95       	ror	r24
    2298:	95 95       	asr	r25
    229a:	87 95       	ror	r24
    229c:	88 0f       	add	r24, r24
    229e:	98 2f       	mov	r25, r24
    22a0:	99 0f       	add	r25, r25
    22a2:	99 0f       	add	r25, r25
    22a4:	89 0f       	add	r24, r25
    22a6:	2f 70       	andi	r18, 0x0F	; 15
    22a8:	82 0f       	add	r24, r18
    22aa:	81 83       	std	Z+1, r24	; 0x01
    22ac:	2b 81       	ldd	r18, Y+3	; 0x03
    22ae:	82 2f       	mov	r24, r18
    22b0:	8f 73       	andi	r24, 0x3F	; 63
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	95 95       	asr	r25
    22b6:	87 95       	ror	r24
    22b8:	95 95       	asr	r25
    22ba:	87 95       	ror	r24
    22bc:	95 95       	asr	r25
    22be:	87 95       	ror	r24
    22c0:	95 95       	asr	r25
    22c2:	87 95       	ror	r24
    22c4:	88 0f       	add	r24, r24
    22c6:	98 2f       	mov	r25, r24
    22c8:	99 0f       	add	r25, r25
    22ca:	99 0f       	add	r25, r25
    22cc:	89 0f       	add	r24, r25
    22ce:	2f 70       	andi	r18, 0x0F	; 15
    22d0:	82 0f       	add	r24, r18
    22d2:	82 83       	std	Z+2, r24	; 0x02
    22d4:	2c 81       	ldd	r18, Y+4	; 0x04
    22d6:	82 2f       	mov	r24, r18
    22d8:	8f 73       	andi	r24, 0x3F	; 63
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	95 95       	asr	r25
    22de:	87 95       	ror	r24
    22e0:	95 95       	asr	r25
    22e2:	87 95       	ror	r24
    22e4:	95 95       	asr	r25
    22e6:	87 95       	ror	r24
    22e8:	95 95       	asr	r25
    22ea:	87 95       	ror	r24
    22ec:	88 0f       	add	r24, r24
    22ee:	98 2f       	mov	r25, r24
    22f0:	99 0f       	add	r25, r25
    22f2:	99 0f       	add	r25, r25
    22f4:	89 0f       	add	r24, r25
    22f6:	2f 70       	andi	r18, 0x0F	; 15
    22f8:	82 0f       	add	r24, r18
    22fa:	83 83       	std	Z+3, r24	; 0x03
    22fc:	2e 81       	ldd	r18, Y+6	; 0x06
    22fe:	82 2f       	mov	r24, r18
    2300:	8f 71       	andi	r24, 0x1F	; 31
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	95 95       	asr	r25
    2306:	87 95       	ror	r24
    2308:	95 95       	asr	r25
    230a:	87 95       	ror	r24
    230c:	95 95       	asr	r25
    230e:	87 95       	ror	r24
    2310:	95 95       	asr	r25
    2312:	87 95       	ror	r24
    2314:	88 0f       	add	r24, r24
    2316:	98 2f       	mov	r25, r24
    2318:	99 0f       	add	r25, r25
    231a:	99 0f       	add	r25, r25
    231c:	89 0f       	add	r24, r25
    231e:	2f 70       	andi	r18, 0x0F	; 15
    2320:	82 0f       	add	r24, r18
    2322:	84 83       	std	Z+4, r24	; 0x04
    2324:	8f 81       	ldd	r24, Y+7	; 0x07
    2326:	98 2f       	mov	r25, r24
    2328:	92 95       	swap	r25
    232a:	9f 70       	andi	r25, 0x0F	; 15
    232c:	99 0f       	add	r25, r25
    232e:	29 2f       	mov	r18, r25
    2330:	22 0f       	add	r18, r18
    2332:	22 0f       	add	r18, r18
    2334:	92 0f       	add	r25, r18
    2336:	8f 70       	andi	r24, 0x0F	; 15
    2338:	89 0f       	add	r24, r25
    233a:	85 83       	std	Z+5, r24	; 0x05
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <RTC_get_current_time+0x12a>
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <RTC_get_current_time+0x12a>
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	27 96       	adiw	r28, 0x07	; 7
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

0000332e <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	2d 97       	sbiw	r28, 0x0d	; 13
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	89 83       	std	Y+1, r24	; 0x01
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    334e:	85 e0       	ldi	r24, 0x05	; 5
    3350:	ea e5       	ldi	r30, 0x5A	; 90
    3352:	ff e0       	ldi	r31, 0x0F	; 15
    3354:	de 01       	movw	r26, r28
    3356:	13 96       	adiw	r26, 0x03	; 3
    3358:	01 90       	ld	r0, Z+
    335a:	0d 92       	st	X+, r0
    335c:	8a 95       	dec	r24
    335e:	e1 f7       	brne	.-8      	; 0x3358 <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    3360:	ce 01       	movw	r24, r28
    3362:	08 96       	adiw	r24, 0x08	; 8
    3364:	0e 94 0e 11 	call	0x221c	; 0x221c <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    3368:	89 85       	ldd	r24, Y+9	; 0x09
    336a:	81 0f       	add	r24, r17
	dt.minute %= 60;
    336c:	99 e8       	ldi	r25, 0x89	; 137
    336e:	89 9f       	mul	r24, r25
    3370:	91 2d       	mov	r25, r1
    3372:	11 24       	eor	r1, r1
    3374:	92 95       	swap	r25
    3376:	96 95       	lsr	r25
    3378:	97 70       	andi	r25, 0x07	; 7
    337a:	2c e3       	ldi	r18, 0x3C	; 60
    337c:	92 9f       	mul	r25, r18
    337e:	80 19       	sub	r24, r0
    3380:	11 24       	eor	r1, r1
    3382:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    3384:	ae 01       	movw	r20, r28
    3386:	4f 5f       	subi	r20, 0xFF	; 255
    3388:	5f 4f       	sbci	r21, 0xFF	; 255
    338a:	60 e8       	ldi	r22, 0x80	; 128
    338c:	22 e0       	ldi	r18, 0x02	; 2
    338e:	81 e5       	ldi	r24, 0x51	; 81
    3390:	0e 94 df 30 	call	0x61be	; 0x61be <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    3394:	81 11       	cpse	r24, r1
    3396:	20 c0       	rjmp	.+64     	; 0x33d8 <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    3398:	99 85       	ldd	r25, Y+9	; 0x09
    339a:	8d ec       	ldi	r24, 0xCD	; 205
    339c:	98 9f       	mul	r25, r24
    339e:	81 2d       	mov	r24, r1
    33a0:	11 24       	eor	r1, r1
    33a2:	86 95       	lsr	r24
    33a4:	86 95       	lsr	r24
    33a6:	86 95       	lsr	r24
    33a8:	40 e1       	ldi	r20, 0x10	; 16
    33aa:	84 9f       	mul	r24, r20
    33ac:	90 01       	movw	r18, r0
    33ae:	11 24       	eor	r1, r1
    33b0:	88 0f       	add	r24, r24
    33b2:	38 2f       	mov	r19, r24
    33b4:	33 0f       	add	r19, r19
    33b6:	33 0f       	add	r19, r19
    33b8:	83 0f       	add	r24, r19
    33ba:	98 1b       	sub	r25, r24
    33bc:	92 2b       	or	r25, r18
    33be:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    33c0:	ae 01       	movw	r20, r28
    33c2:	4d 5f       	subi	r20, 0xFD	; 253
    33c4:	5f 4f       	sbci	r21, 0xFF	; 255
    33c6:	60 e8       	ldi	r22, 0x80	; 128
    33c8:	25 e0       	ldi	r18, 0x05	; 5
    33ca:	81 e5       	ldi	r24, 0x51	; 81
    33cc:	0e 94 df 30 	call	0x61be	; 0x61be <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    33d0:	88 23       	and	r24, r24
    33d2:	21 f0       	breq	.+8      	; 0x33dc <RTC_set_wake_up_interrupt_minutes+0xae>
    33d4:	82 e0       	ldi	r24, 0x02	; 2
    33d6:	03 c0       	rjmp	.+6      	; 0x33de <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    33d8:	82 e0       	ldi	r24, 0x02	; 2
    33da:	01 c0       	rjmp	.+2      	; 0x33de <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    33dc:	80 e0       	ldi	r24, 0x00	; 0
}
    33de:	2d 96       	adiw	r28, 0x0d	; 13
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	de bf       	out	0x3e, r29	; 62
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	cd bf       	out	0x3d, r28	; 61
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	1f 91       	pop	r17
    33f0:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

00004636 <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    4636:	cf 93       	push	r28
    4638:	df 93       	push	r29
    463a:	cd b7       	in	r28, 0x3d	; 61
    463c:	de b7       	in	r29, 0x3e	; 62
    463e:	64 97       	sbiw	r28, 0x14	; 20
    4640:	0f b6       	in	r0, 0x3f	; 63
    4642:	f8 94       	cli
    4644:	de bf       	out	0x3e, r29	; 62
    4646:	0f be       	out	0x3f, r0	; 63
    4648:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    464a:	9e 01       	movw	r18, r28
    464c:	27 5f       	subi	r18, 0xF7	; 247
    464e:	3f 4f       	sbci	r19, 0xFF	; 255
    4650:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <datetime_to_BCD>
	
	data[0]=0x02;
    4654:	82 e0       	ldi	r24, 0x02	; 2
    4656:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    4658:	89 85       	ldd	r24, Y+9	; 0x09
    465a:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    465c:	8a 85       	ldd	r24, Y+10	; 0x0a
    465e:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    4660:	8b 85       	ldd	r24, Y+11	; 0x0b
    4662:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    4664:	8c 85       	ldd	r24, Y+12	; 0x0c
    4666:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    4668:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    466a:	8d 85       	ldd	r24, Y+13	; 0x0d
    466c:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    466e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4670:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    4672:	ae 01       	movw	r20, r28
    4674:	4f 5f       	subi	r20, 0xFF	; 255
    4676:	5f 4f       	sbci	r21, 0xFF	; 255
    4678:	60 e8       	ldi	r22, 0x80	; 128
    467a:	28 e0       	ldi	r18, 0x08	; 8
    467c:	81 e5       	ldi	r24, 0x51	; 81
    467e:	0e 94 df 30 	call	0x61be	; 0x61be <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    4682:	88 23       	and	r24, r24
    4684:	11 f0       	breq	.+4      	; 0x468a <RTC_set_current_time+0x54>
    4686:	82 e0       	ldi	r24, 0x02	; 2
    4688:	01 c0       	rjmp	.+2      	; 0x468c <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    468a:	80 e0       	ldi	r24, 0x00	; 0
}
    468c:	64 96       	adiw	r28, 0x14	; 20
    468e:	0f b6       	in	r0, 0x3f	; 63
    4690:	f8 94       	cli
    4692:	de bf       	out	0x3e, r29	; 62
    4694:	0f be       	out	0x3f, r0	; 63
    4696:	cd bf       	out	0x3d, r28	; 61
    4698:	df 91       	pop	r29
    469a:	cf 91       	pop	r28
    469c:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

000025c2 <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    25c2:	4f 92       	push	r4
    25c4:	5f 92       	push	r5
    25c6:	6f 92       	push	r6
    25c8:	7f 92       	push	r7
    25ca:	8f 92       	push	r8
    25cc:	9f 92       	push	r9
    25ce:	af 92       	push	r10
    25d0:	bf 92       	push	r11
    25d2:	cf 92       	push	r12
    25d4:	df 92       	push	r13
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <RTC_datetime_to_ts+0x22>
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <RTC_datetime_to_ts+0x24>
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <RTC_datetime_to_ts+0x26>
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	f9 01       	movw	r30, r18
    25ee:	49 2e       	mov	r4, r25
    25f0:	51 2c       	mov	r5, r1
    25f2:	61 2c       	mov	r6, r1
    25f4:	71 2c       	mov	r7, r1
    25f6:	03 2e       	mov	r0, r19
    25f8:	3a e1       	ldi	r19, 0x1A	; 26
    25fa:	44 0c       	add	r4, r4
    25fc:	55 1c       	adc	r5, r5
    25fe:	66 1c       	adc	r6, r6
    2600:	77 1c       	adc	r7, r7
    2602:	3a 95       	dec	r19
    2604:	d1 f7       	brne	.-12     	; 0x25fa <RTC_datetime_to_ts+0x38>
    2606:	30 2d       	mov	r19, r0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a0 e0       	ldi	r26, 0x00	; 0
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	07 2e       	mov	r0, r23
    2610:	76 e1       	ldi	r23, 0x16	; 22
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	aa 1f       	adc	r26, r26
    2618:	bb 1f       	adc	r27, r27
    261a:	7a 95       	dec	r23
    261c:	d1 f7       	brne	.-12     	; 0x2612 <RTC_datetime_to_ts+0x50>
    261e:	70 2d       	mov	r23, r0
    2620:	84 29       	or	r24, r4
    2622:	95 29       	or	r25, r5
    2624:	a6 29       	or	r26, r6
    2626:	b7 29       	or	r27, r7
    2628:	87 2e       	mov	r8, r23
    262a:	91 2c       	mov	r9, r1
    262c:	a1 2c       	mov	r10, r1
    262e:	b1 2c       	mov	r11, r1
    2630:	07 2e       	mov	r0, r23
    2632:	71 e1       	ldi	r23, 0x11	; 17
    2634:	88 0c       	add	r8, r8
    2636:	99 1c       	adc	r9, r9
    2638:	aa 1c       	adc	r10, r10
    263a:	bb 1c       	adc	r11, r11
    263c:	7a 95       	dec	r23
    263e:	d1 f7       	brne	.-12     	; 0x2634 <RTC_datetime_to_ts+0x72>
    2640:	70 2d       	mov	r23, r0
    2642:	88 29       	or	r24, r8
    2644:	99 29       	or	r25, r9
    2646:	aa 29       	or	r26, r10
    2648:	bb 29       	or	r27, r11
    264a:	c6 2e       	mov	r12, r22
    264c:	d1 2c       	mov	r13, r1
    264e:	e1 2c       	mov	r14, r1
    2650:	f1 2c       	mov	r15, r1
    2652:	0b 2e       	mov	r0, r27
    2654:	bc e0       	ldi	r27, 0x0C	; 12
    2656:	cc 0c       	add	r12, r12
    2658:	dd 1c       	adc	r13, r13
    265a:	ee 1c       	adc	r14, r14
    265c:	ff 1c       	adc	r15, r15
    265e:	ba 95       	dec	r27
    2660:	d1 f7       	brne	.-12     	; 0x2656 <RTC_datetime_to_ts+0x94>
    2662:	b0 2d       	mov	r27, r0
    2664:	8c 29       	or	r24, r12
    2666:	9d 29       	or	r25, r13
    2668:	ae 29       	or	r26, r14
    266a:	bf 29       	or	r27, r15
    266c:	05 2f       	mov	r16, r21
    266e:	10 e0       	ldi	r17, 0x00	; 0
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	00 0f       	add	r16, r16
    2676:	11 1f       	adc	r17, r17
    2678:	22 1f       	adc	r18, r18
    267a:	33 1f       	adc	r19, r19
    267c:	00 0f       	add	r16, r16
    267e:	11 1f       	adc	r17, r17
    2680:	22 1f       	adc	r18, r18
    2682:	33 1f       	adc	r19, r19
    2684:	00 0f       	add	r16, r16
    2686:	11 1f       	adc	r17, r17
    2688:	22 1f       	adc	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	00 0f       	add	r16, r16
    268e:	11 1f       	adc	r17, r17
    2690:	22 1f       	adc	r18, r18
    2692:	33 1f       	adc	r19, r19
    2694:	00 0f       	add	r16, r16
    2696:	11 1f       	adc	r17, r17
    2698:	22 1f       	adc	r18, r18
    269a:	33 1f       	adc	r19, r19
    269c:	00 0f       	add	r16, r16
    269e:	11 1f       	adc	r17, r17
    26a0:	22 1f       	adc	r18, r18
    26a2:	33 1f       	adc	r19, r19
    26a4:	80 2b       	or	r24, r16
    26a6:	91 2b       	or	r25, r17
    26a8:	a2 2b       	or	r26, r18
    26aa:	b3 2b       	or	r27, r19
    26ac:	84 2b       	or	r24, r20
    26ae:	b0 83       	st	Z, r27
    26b0:	a1 83       	std	Z+1, r26	; 0x01
    26b2:	92 83       	std	Z+2, r25	; 0x02
    26b4:	83 83       	std	Z+3, r24	; 0x03
    26b6:	26 96       	adiw	r28, 0x06	; 6
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	1f 91       	pop	r17
    26c8:	0f 91       	pop	r16
    26ca:	ff 90       	pop	r15
    26cc:	ef 90       	pop	r14
    26ce:	df 90       	pop	r13
    26d0:	cf 90       	pop	r12
    26d2:	bf 90       	pop	r11
    26d4:	af 90       	pop	r10
    26d6:	9f 90       	pop	r9
    26d8:	8f 90       	pop	r8
    26da:	7f 90       	pop	r7
    26dc:	6f 90       	pop	r6
    26de:	5f 90       	pop	r5
    26e0:	4f 90       	pop	r4
    26e2:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

000061d8 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    61d8:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    61da:	54 81       	ldd	r21, Z+4	; 0x04
    61dc:	43 81       	ldd	r20, Z+3	; 0x03
    61de:	31 81       	ldd	r19, Z+1	; 0x01
    61e0:	20 81       	ld	r18, Z
    61e2:	65 2f       	mov	r22, r21
    61e4:	74 2f       	mov	r23, r20
    61e6:	83 2f       	mov	r24, r19
    61e8:	92 2f       	mov	r25, r18
    61ea:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__fixunssfsi>
}
    61ee:	cb 01       	movw	r24, r22
    61f0:	08 95       	ret

Disassembly of section .text.init_measurement:

000057de <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    57de:	25 e0       	ldi	r18, 0x05	; 5
    57e0:	45 e6       	ldi	r20, 0x65	; 101
    57e2:	57 e0       	ldi	r21, 0x07	; 7
    57e4:	60 e0       	ldi	r22, 0x00	; 0
    57e6:	81 e6       	ldi	r24, 0x61	; 97
    57e8:	0e 94 df 30 	call	0x61be	; 0x61be <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    57ec:	81 11       	cpse	r24, r1
    57ee:	0f c0       	rjmp	.+30     	; 0x580e <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    57f0:	25 e0       	ldi	r18, 0x05	; 5
    57f2:	4a e6       	ldi	r20, 0x6A	; 106
    57f4:	57 e0       	ldi	r21, 0x07	; 7
    57f6:	60 e0       	ldi	r22, 0x00	; 0
    57f8:	81 e6       	ldi	r24, 0x61	; 97
    57fa:	0e 94 df 30 	call	0x61be	; 0x61be <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    57fe:	81 11       	cpse	r24, r1
    5800:	08 c0       	rjmp	.+16     	; 0x5812 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    5802:	0e 94 0b 33 	call	0x6616	; 0x6616 <SCD30_HAL_data_ready>
    5806:	88 23       	and	r24, r24
    5808:	e1 f3       	breq	.-8      	; 0x5802 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    580e:	82 e0       	ldi	r24, 0x02	; 2
    5810:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5812:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    5814:	08 95       	ret

Disassembly of section .text.validate_data:

00005a8a <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    5a8a:	cf 93       	push	r28
    5a8c:	df 93       	push	r29
    5a8e:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    5a90:	62 e0       	ldi	r22, 0x02	; 2
    5a92:	0e 94 42 2c 	call	0x5884	; 0x5884 <calc_crc8>
	if(data[2]!=crc) return false;
    5a96:	9a 81       	ldd	r25, Y+2	; 0x02
    5a98:	89 13       	cpse	r24, r25
    5a9a:	0a c0       	rjmp	.+20     	; 0x5ab0 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    5a9c:	62 e0       	ldi	r22, 0x02	; 2
    5a9e:	ce 01       	movw	r24, r28
    5aa0:	03 96       	adiw	r24, 0x03	; 3
    5aa2:	0e 94 42 2c 	call	0x5884	; 0x5884 <calc_crc8>
	if(data[5]!=crc) return false;
    5aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    5aa8:	89 17       	cp	r24, r25
    5aaa:	21 f0       	breq	.+8      	; 0x5ab4 <validate_data+0x2a>
    5aac:	80 e0       	ldi	r24, 0x00	; 0
    5aae:	03 c0       	rjmp	.+6      	; 0x5ab6 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    5ab0:	80 e0       	ldi	r24, 0x00	; 0
    5ab2:	01 c0       	rjmp	.+2      	; 0x5ab6 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    5ab4:	81 e0       	ldi	r24, 0x01	; 1
}
    5ab6:	df 91       	pop	r29
    5ab8:	cf 91       	pop	r28
    5aba:	08 95       	ret

Disassembly of section .text.read_value:

00003ad0 <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    3ad0:	0f 93       	push	r16
    3ad2:	1f 93       	push	r17
    3ad4:	cf 93       	push	r28
    3ad6:	df 93       	push	r29
    3ad8:	00 d0       	rcall	.+0      	; 0x3ada <read_value+0xa>
    3ada:	00 d0       	rcall	.+0      	; 0x3adc <read_value+0xc>
    3adc:	00 d0       	rcall	.+0      	; 0x3ade <read_value+0xe>
    3ade:	cd b7       	in	r28, 0x3d	; 61
    3ae0:	de b7       	in	r29, 0x3e	; 62
    3ae2:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    3ae4:	8f ef       	ldi	r24, 0xFF	; 255
    3ae6:	9f ef       	ldi	r25, 0xFF	; 255
    3ae8:	f8 01       	movw	r30, r16
    3aea:	91 83       	std	Z+1, r25	; 0x01
    3aec:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    3aee:	0e 94 0b 33 	call	0x6616	; 0x6616 <SCD30_HAL_data_ready>
    3af2:	81 11       	cpse	r24, r1
    3af4:	07 c0       	rjmp	.+14     	; 0x3b04 <read_value+0x34>
		*value=0xfffe;
    3af6:	8e ef       	ldi	r24, 0xFE	; 254
    3af8:	9f ef       	ldi	r25, 0xFF	; 255
    3afa:	f8 01       	movw	r30, r16
    3afc:	91 83       	std	Z+1, r25	; 0x01
    3afe:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    3b00:	83 e0       	ldi	r24, 0x03	; 3
    3b02:	2c c0       	rjmp	.+88     	; 0x3b5c <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    3b04:	22 e0       	ldi	r18, 0x02	; 2
    3b06:	42 e7       	ldi	r20, 0x72	; 114
    3b08:	57 e0       	ldi	r21, 0x07	; 7
    3b0a:	60 e0       	ldi	r22, 0x00	; 0
    3b0c:	81 e6       	ldi	r24, 0x61	; 97
    3b0e:	0e 94 df 30 	call	0x61be	; 0x61be <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3b12:	81 11       	cpse	r24, r1
    3b14:	1e c0       	rjmp	.+60     	; 0x3b52 <read_value+0x82>
    3b16:	8f e3       	ldi	r24, 0x3F	; 63
    3b18:	9f e1       	ldi	r25, 0x1F	; 31
    3b1a:	01 97       	sbiw	r24, 0x01	; 1
    3b1c:	f1 f7       	brne	.-4      	; 0x3b1a <read_value+0x4a>
    3b1e:	00 c0       	rjmp	.+0      	; 0x3b20 <read_value+0x50>
    3b20:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    3b22:	46 e0       	ldi	r20, 0x06	; 6
    3b24:	be 01       	movw	r22, r28
    3b26:	6f 5f       	subi	r22, 0xFF	; 255
    3b28:	7f 4f       	sbci	r23, 0xFF	; 255
    3b2a:	81 e6       	ldi	r24, 0x61	; 97
    3b2c:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3b30:	81 11       	cpse	r24, r1
    3b32:	11 c0       	rjmp	.+34     	; 0x3b56 <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3b34:	ce 01       	movw	r24, r28
    3b36:	01 96       	adiw	r24, 0x01	; 1
    3b38:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <validate_data>
    3b3c:	88 23       	and	r24, r24
    3b3e:	69 f0       	breq	.+26     	; 0x3b5a <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    3b40:	ce 01       	movw	r24, r28
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <bytes_2_uint>
    3b48:	f8 01       	movw	r30, r16
    3b4a:	91 83       	std	Z+1, r25	; 0x01
    3b4c:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	05 c0       	rjmp	.+10     	; 0x3b5c <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	03 c0       	rjmp	.+6      	; 0x3b5c <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	01 c0       	rjmp	.+2      	; 0x3b5c <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    3b5c:	26 96       	adiw	r28, 0x06	; 6
    3b5e:	0f b6       	in	r0, 0x3f	; 63
    3b60:	f8 94       	cli
    3b62:	de bf       	out	0x3e, r29	; 62
    3b64:	0f be       	out	0x3f, r0	; 63
    3b66:	cd bf       	out	0x3d, r28	; 61
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00005242 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    5242:	80 91 8b 0f 	lds	r24, 0x0F8B	; 0x800f8b <_data>
    5246:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <_data+0x1>
    524a:	20 91 89 0f 	lds	r18, 0x0F89	; 0x800f89 <cntSamples>
    524e:	30 91 8a 0f 	lds	r19, 0x0F8A	; 0x800f8a <cntSamples+0x1>
    5252:	a9 01       	movw	r20, r18
    5254:	4f 5f       	subi	r20, 0xFF	; 255
    5256:	5f 4f       	sbci	r21, 0xFF	; 255
    5258:	50 93 8a 0f 	sts	0x0F8A, r21	; 0x800f8a <cntSamples+0x1>
    525c:	40 93 89 0f 	sts	0x0F89, r20	; 0x800f89 <cntSamples>
    5260:	22 0f       	add	r18, r18
    5262:	33 1f       	adc	r19, r19
    5264:	82 0f       	add	r24, r18
    5266:	93 1f       	adc	r25, r19
    5268:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <read_value>
	if(cntSamples>=_nSamples){
    526c:	20 91 89 0f 	lds	r18, 0x0F89	; 0x800f89 <cntSamples>
    5270:	30 91 8a 0f 	lds	r19, 0x0F8A	; 0x800f8a <cntSamples+0x1>
    5274:	80 91 8d 0f 	lds	r24, 0x0F8D	; 0x800f8d <_nSamples>
    5278:	90 91 8e 0f 	lds	r25, 0x0F8E	; 0x800f8e <_nSamples+0x1>
    527c:	28 17       	cp	r18, r24
    527e:	39 07       	cpc	r19, r25
    5280:	10 f0       	brcs	.+4      	; 0x5286 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    5282:	0e 94 bd 32 	call	0x657a	; 0x657a <TC1_HAL_stop>
    5286:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00005f1e <SCD30_sensor_on>:
static void vect_SCD_do_sample();
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    5f1e:	0e 94 39 32 	call	0x6472	; 0x6472 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    5f22:	81 e0       	ldi	r24, 0x01	; 1
    5f24:	0e 94 81 31 	call	0x6302	; 0x6302 <PM_HAL_SCD30_power>
    5f28:	2f ef       	ldi	r18, 0xFF	; 255
    5f2a:	83 ed       	ldi	r24, 0xD3	; 211
    5f2c:	90 e3       	ldi	r25, 0x30	; 48
    5f2e:	21 50       	subi	r18, 0x01	; 1
    5f30:	80 40       	sbci	r24, 0x00	; 0
    5f32:	90 40       	sbci	r25, 0x00	; 0
    5f34:	e1 f7       	brne	.-8      	; 0x5f2e <SCD30_sensor_on+0x10>
    5f36:	00 c0       	rjmp	.+0      	; 0x5f38 <SCD30_sensor_on+0x1a>
    5f38:	00 00       	nop
	_delay_ms(2000);
	return init_measurement();
    5f3a:	0e 94 ef 2b 	call	0x57de	; 0x57de <init_measurement>
}
    5f3e:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

000066c2 <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    66c2:	80 e0       	ldi	r24, 0x00	; 0
    66c4:	0e 94 81 31 	call	0x6302	; 0x6302 <PM_HAL_SCD30_power>
    66c8:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00005f40 <SCD30_init_sampling>:
}

void SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
	_nSamples=nSamples;
    5f40:	70 93 8e 0f 	sts	0x0F8E, r23	; 0x800f8e <_nSamples+0x1>
    5f44:	60 93 8d 0f 	sts	0x0F8D, r22	; 0x800f8d <_nSamples>
	cntSamples=0;
    5f48:	10 92 8a 0f 	sts	0x0F8A, r1	; 0x800f8a <cntSamples+0x1>
    5f4c:	10 92 89 0f 	sts	0x0F89, r1	; 0x800f89 <cntSamples>
	_data=data;
    5f50:	50 93 8c 0f 	sts	0x0F8C, r21	; 0x800f8c <_data+0x1>
    5f54:	40 93 8b 0f 	sts	0x0F8B, r20	; 0x800f8b <_data>

	//Init
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    5f58:	61 e2       	ldi	r22, 0x21	; 33
    5f5a:	79 e2       	ldi	r23, 0x29	; 41
    5f5c:	0e 94 93 2c 	call	0x5926	; 0x5926 <TC1_HAL_init>
    5f60:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

000064fe <SCD30_deinit_sampling>:
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    64fe:	0e 94 bd 32 	call	0x657a	; 0x657a <TC1_HAL_stop>
	_data=NULL;
    6502:	10 92 8c 0f 	sts	0x0F8C, r1	; 0x800f8c <_data+0x1>
    6506:	10 92 8b 0f 	sts	0x0F8B, r1	; 0x800f8b <_data>
    650a:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

0000665c <SCD30_start_sampling>:
}

void SCD30_start_sampling(){
	vect_SCD_do_sample();
    665c:	0e 94 21 29 	call	0x5242	; 0x5242 <vect_SCD_do_sample>
	TC1_HAL_start();
    6660:	0e 94 b7 32 	call	0x656e	; 0x656e <TC1_HAL_start>
    6664:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00006186 <SCD30_is_sampling_done>:
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    6186:	40 91 89 0f 	lds	r20, 0x0F89	; 0x800f89 <cntSamples>
    618a:	50 91 8a 0f 	lds	r21, 0x0F8A	; 0x800f8a <cntSamples+0x1>
    618e:	20 91 8d 0f 	lds	r18, 0x0F8D	; 0x800f8d <_nSamples>
    6192:	30 91 8e 0f 	lds	r19, 0x0F8E	; 0x800f8e <_nSamples+0x1>
    6196:	81 e0       	ldi	r24, 0x01	; 1
    6198:	42 17       	cp	r20, r18
    619a:	53 07       	cpc	r21, r19
    619c:	08 f4       	brcc	.+2      	; 0x61a0 <SCD30_is_sampling_done+0x1a>
    619e:	80 e0       	ldi	r24, 0x00	; 0
}
    61a0:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

000061f2 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    61f2:	cf 93       	push	r28
    61f4:	df 93       	push	r29
    61f6:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    61f8:	0e 94 0b 33 	call	0x6616	; 0x6616 <SCD30_HAL_data_ready>
    61fc:	88 23       	and	r24, r24
    61fe:	e1 f3       	breq	.-8      	; 0x61f8 <SCD30_get_reading+0x6>
	
	return read_value(value);
    6200:	ce 01       	movw	r24, r28
    6202:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <read_value>
}
    6206:	df 91       	pop	r29
    6208:	cf 91       	pop	r28
    620a:	08 95       	ret

Disassembly of section .text.parse_cmd:

00005c6e <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5c6e:	fc 01       	movw	r30, r24
    5c70:	80 81       	ld	r24, Z
    5c72:	82 37       	cpi	r24, 0x72	; 114
    5c74:	51 f0       	breq	.+20     	; 0x5c8a <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    5c76:	87 37       	cpi	r24, 0x77	; 119
    5c78:	51 f0       	breq	.+20     	; 0x5c8e <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    5c7a:	83 36       	cpi	r24, 0x63	; 99
    5c7c:	51 f0       	breq	.+20     	; 0x5c92 <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    5c7e:	83 37       	cpi	r24, 0x73	; 115
    5c80:	51 f0       	breq	.+20     	; 0x5c96 <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    5c82:	81 37       	cpi	r24, 0x71	; 113
    5c84:	51 f4       	brne	.+20     	; 0x5c9a <parse_cmd+0x2c>
    5c86:	84 e0       	ldi	r24, 0x04	; 4
    5c88:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5c8a:	87 e0       	ldi	r24, 0x07	; 7
    5c8c:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    5c8e:	88 e0       	ldi	r24, 0x08	; 8
    5c90:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    5c92:	89 e0       	ldi	r24, 0x09	; 9
    5c94:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    5c96:	8a e0       	ldi	r24, 0x0A	; 10
    5c98:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    5c9a:	85 e0       	ldi	r24, 0x05	; 5
}
    5c9c:	08 95       	ret

Disassembly of section .text.validate_cmd:

00004a36 <validate_cmd>:

static bool validate_cmd(char msg[]){
    4a36:	cf 93       	push	r28
    4a38:	df 93       	push	r29
    4a3a:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    4a3c:	bc 01       	movw	r22, r24
    4a3e:	80 e8       	ldi	r24, 0x80	; 128
    4a40:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    4a44:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4a46:	fc 01       	movw	r30, r24
    4a48:	31 97       	sbiw	r30, 0x01	; 1
    4a4a:	ec 0f       	add	r30, r28
    4a4c:	fd 1f       	adc	r31, r29
    4a4e:	80 81       	ld	r24, Z
    4a50:	80 32       	cpi	r24, 0x20	; 32
    4a52:	b1 f0       	breq	.+44     	; 0x4a80 <validate_cmd+0x4a>
    4a54:	20 e0       	ldi	r18, 0x00	; 0
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	40 e0       	ldi	r20, 0x00	; 0
    4a5a:	0d c0       	rjmp	.+26     	; 0x4a76 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    4a5c:	fe 01       	movw	r30, r28
    4a5e:	e2 0f       	add	r30, r18
    4a60:	f3 1f       	adc	r31, r19
    4a62:	90 81       	ld	r25, Z
    4a64:	90 32       	cpi	r25, 0x20	; 32
    4a66:	21 f4       	brne	.+8      	; 0x4a70 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    4a68:	41 11       	cpse	r20, r1
    4a6a:	0c c0       	rjmp	.+24     	; 0x4a84 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    4a6c:	41 e0       	ldi	r20, 0x01	; 1
    4a6e:	01 c0       	rjmp	.+2      	; 0x4a72 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    4a70:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    4a72:	2f 5f       	subi	r18, 0xFF	; 255
    4a74:	3f 4f       	sbci	r19, 0xFF	; 255
    4a76:	26 17       	cp	r18, r22
    4a78:	37 07       	cpc	r19, r23
    4a7a:	80 f3       	brcs	.-32     	; 0x4a5c <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    4a7c:	81 e0       	ldi	r24, 0x01	; 1
    4a7e:	03 c0       	rjmp	.+6      	; 0x4a86 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4a80:	80 e0       	ldi	r24, 0x00	; 0
    4a82:	01 c0       	rjmp	.+2      	; 0x4a86 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    4a84:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    4a86:	df 91       	pop	r29
    4a88:	cf 91       	pop	r28
    4a8a:	08 95       	ret

Disassembly of section .text.CONF_enter:

0000235c <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    235c:	cf 93       	push	r28
	uart1_hal_init();
    235e:	0e 94 08 2b 	call	0x5610	; 0x5610 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    2362:	c0 e0       	ldi	r28, 0x00	; 0
    2364:	0d c0       	rjmp	.+26     	; 0x2380 <CONF_enter+0x24>
				
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    2366:	c2 e0       	ldi	r28, 0x02	; 2
    2368:	0b c0       	rjmp	.+22     	; 0x2380 <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    236a:	c5 e0       	ldi	r28, 0x05	; 5
    236c:	09 c0       	rjmp	.+18     	; 0x2380 <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    236e:	c6 e0       	ldi	r28, 0x06	; 6
    2370:	07 c0       	rjmp	.+14     	; 0x2380 <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2372:	c5 e0       	ldi	r28, 0x05	; 5
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2376:	c5 e0       	ldi	r28, 0x05	; 5
    2378:	03 c0       	rjmp	.+6      	; 0x2380 <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    237a:	c5 e0       	ldi	r28, 0x05	; 5
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    237e:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    2380:	ec 2f       	mov	r30, r28
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	ec 30       	cpi	r30, 0x0C	; 12
    2386:	f1 05       	cpc	r31, r1
    2388:	d8 f7       	brcc	.-10     	; 0x2380 <CONF_enter+0x24>
    238a:	e5 5b       	subi	r30, 0xB5	; 181
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	0c 94 ff 32 	jmp	0x65fe	; 0x65fe <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    2392:	6c ee       	ldi	r22, 0xEC	; 236
    2394:	73 e0       	ldi	r23, 0x03	; 3
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    239c:	62 e1       	ldi	r22, 0x12	; 18
    239e:	74 e0       	ldi	r23, 0x04	; 4
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				
				if(!init_methane_SCD30()){
    23a6:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <init_methane_SCD30>
    23aa:	81 11       	cpse	r24, r1
    23ac:	dc cf       	rjmp	.-72     	; 0x2366 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    23ae:	64 e3       	ldi	r22, 0x34	; 52
    23b0:	74 e0       	ldi	r23, 0x04	; 4
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
					state=CONF_EXIT;
    23b8:	c4 e0       	ldi	r28, 0x04	; 4
    23ba:	e2 cf       	rjmp	.-60     	; 0x2380 <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    23bc:	0e 94 47 32 	call	0x648e	; 0x648e <uart1_hal_message_ready>
    23c0:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    23c2:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    23c4:	0e 94 4e 32 	call	0x649c	; 0x649c <uart1_hal_rx_full>
    23c8:	81 11       	cpse	r24, r1
    23ca:	cf cf       	rjmp	.-98     	; 0x236a <CONF_enter+0xe>
    23cc:	d9 cf       	rjmp	.-78     	; 0x2380 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    23ce:	88 ea       	ldi	r24, 0xA8	; 168
    23d0:	97 e0       	ldi	r25, 0x07	; 7
    23d2:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    23d6:	88 ea       	ldi	r24, 0xA8	; 168
    23d8:	97 e0       	ldi	r25, 0x07	; 7
    23da:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <validate_cmd>
    23de:	88 23       	and	r24, r24
    23e0:	31 f2       	breq	.-116    	; 0x236e <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    23e2:	88 ea       	ldi	r24, 0xA8	; 168
    23e4:	97 e0       	ldi	r25, 0x07	; 7
    23e6:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <parse_cmd>
    23ea:	c8 2f       	mov	r28, r24
    23ec:	c9 cf       	rjmp	.-110    	; 0x2380 <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    23ee:	68 ea       	ldi	r22, 0xA8	; 168
    23f0:	77 e0       	ldi	r23, 0x07	; 7
    23f2:	80 e8       	ldi	r24, 0x80	; 128
    23f4:	40 ee       	ldi	r20, 0xE0	; 224
    23f6:	56 e0       	ldi	r21, 0x06	; 6
    23f8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <handle_read>
    23fc:	88 23       	and	r24, r24
    23fe:	09 f4       	brne	.+2      	; 0x2402 <CONF_enter+0xa6>
    2400:	b8 cf       	rjmp	.-144    	; 0x2372 <CONF_enter+0x16>
					state=CONF_REPLY;
    2402:	cb e0       	ldi	r28, 0x0B	; 11
    2404:	bd cf       	rjmp	.-134    	; 0x2380 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    2406:	68 ea       	ldi	r22, 0xA8	; 168
    2408:	77 e0       	ldi	r23, 0x07	; 7
    240a:	80 e8       	ldi	r24, 0x80	; 128
    240c:	40 ee       	ldi	r20, 0xE0	; 224
    240e:	56 e0       	ldi	r21, 0x06	; 6
    2410:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <handle_write>
    2414:	88 23       	and	r24, r24
    2416:	09 f4       	brne	.+2      	; 0x241a <CONF_enter+0xbe>
    2418:	ae cf       	rjmp	.-164    	; 0x2376 <CONF_enter+0x1a>
					state=CONF_REPLY;
    241a:	cb e0       	ldi	r28, 0x0B	; 11
    241c:	b1 cf       	rjmp	.-158    	; 0x2380 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    241e:	68 ea       	ldi	r22, 0xA8	; 168
    2420:	77 e0       	ldi	r23, 0x07	; 7
    2422:	80 e8       	ldi	r24, 0x80	; 128
    2424:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <CONNECT>
    2428:	88 23       	and	r24, r24
    242a:	09 f4       	brne	.+2      	; 0x242e <CONF_enter+0xd2>
    242c:	a6 cf       	rjmp	.-180    	; 0x237a <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    242e:	c2 e0       	ldi	r28, 0x02	; 2
    2430:	a7 cf       	rjmp	.-178    	; 0x2380 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    2432:	68 ea       	ldi	r22, 0xA8	; 168
    2434:	77 e0       	ldi	r23, 0x07	; 7
    2436:	80 e8       	ldi	r24, 0x80	; 128
    2438:	40 ee       	ldi	r20, 0xE0	; 224
    243a:	56 e0       	ldi	r21, 0x06	; 6
    243c:	0e 94 15 1b 	call	0x362a	; 0x362a <handle_sample>
    2440:	88 23       	and	r24, r24
    2442:	09 f4       	brne	.+2      	; 0x2446 <CONF_enter+0xea>
    2444:	9c cf       	rjmp	.-200    	; 0x237e <CONF_enter+0x22>
					state=CONF_REPLY;
    2446:	cb e0       	ldi	r28, 0x0B	; 11
    2448:	9b cf       	rjmp	.-202    	; 0x2380 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    244a:	60 ee       	ldi	r22, 0xE0	; 224
    244c:	76 e0       	ldi	r23, 0x06	; 6
    244e:	80 e8       	ldi	r24, 0x80	; 128
    2450:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2454:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2456:	94 cf       	rjmp	.-216    	; 0x2380 <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    2458:	63 e5       	ldi	r22, 0x53	; 83
    245a:	74 e0       	ldi	r23, 0x04	; 4
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2462:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2464:	8d cf       	rjmp	.-230    	; 0x2380 <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    2466:	6d e5       	ldi	r22, 0x5D	; 93
    2468:	74 e0       	ldi	r23, 0x04	; 4
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2470:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2472:	86 cf       	rjmp	.-244    	; 0x2380 <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    2474:	0e 94 15 33 	call	0x662a	; 0x662a <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    2478:	6a e6       	ldi	r22, 0x6A	; 106
    247a:	74 e0       	ldi	r23, 0x04	; 4
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    2482:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2484:	7d cf       	rjmp	.-262    	; 0x2380 <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    2486:	60 e9       	ldi	r22, 0x90	; 144
    2488:	74 e0       	ldi	r23, 0x04	; 4
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				return;
		}
	}
}
    2490:	cf 91       	pop	r28
    2492:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

000044f8 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    44f8:	cf 92       	push	r12
    44fa:	df 92       	push	r13
    44fc:	ef 92       	push	r14
    44fe:	0f 93       	push	r16
    4500:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    4502:	6c 01       	movw	r12, r24
    4504:	20 e8       	ldi	r18, 0x80	; 128
    4506:	e2 2e       	mov	r14, r18
    4508:	04 e0       	ldi	r16, 0x04	; 4
    450a:	10 e0       	ldi	r17, 0x00	; 0
    450c:	22 ed       	ldi	r18, 0xD2	; 210
    450e:	35 e0       	ldi	r19, 0x05	; 5
    4510:	40 e0       	ldi	r20, 0x00	; 0
    4512:	8e 2d       	mov	r24, r14
    4514:	b6 01       	movw	r22, r12
    4516:	0e 94 b2 22 	call	0x4564	; 0x4564 <strncmp>
    451a:	89 2b       	or	r24, r25
    451c:	c1 f0       	breq	.+48     	; 0x454e <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    451e:	05 e0       	ldi	r16, 0x05	; 5
    4520:	10 e0       	ldi	r17, 0x00	; 0
    4522:	27 ed       	ldi	r18, 0xD7	; 215
    4524:	35 e0       	ldi	r19, 0x05	; 5
    4526:	40 e0       	ldi	r20, 0x00	; 0
    4528:	8e 2d       	mov	r24, r14
    452a:	b6 01       	movw	r22, r12
    452c:	0e 94 b2 22 	call	0x4564	; 0x4564 <strncmp>
    4530:	89 2b       	or	r24, r25
    4532:	79 f0       	breq	.+30     	; 0x4552 <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    4534:	04 e0       	ldi	r16, 0x04	; 4
    4536:	10 e0       	ldi	r17, 0x00	; 0
    4538:	2d ed       	ldi	r18, 0xDD	; 221
    453a:	35 e0       	ldi	r19, 0x05	; 5
    453c:	40 e0       	ldi	r20, 0x00	; 0
    453e:	8e 2d       	mov	r24, r14
    4540:	b6 01       	movw	r22, r12
    4542:	0e 94 b2 22 	call	0x4564	; 0x4564 <strncmp>
    4546:	89 2b       	or	r24, r25
    4548:	31 f4       	brne	.+12     	; 0x4556 <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    454a:	85 e0       	ldi	r24, 0x05	; 5
    454c:	05 c0       	rjmp	.+10     	; 0x4558 <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    454e:	86 e0       	ldi	r24, 0x06	; 6
    4550:	03 c0       	rjmp	.+6      	; 0x4558 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    4552:	84 e0       	ldi	r24, 0x04	; 4
    4554:	01 c0       	rjmp	.+2      	; 0x4558 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    4556:	83 e0       	ldi	r24, 0x03	; 3
    4558:	1f 91       	pop	r17
    455a:	0f 91       	pop	r16
    455c:	ef 90       	pop	r14
    455e:	df 90       	pop	r13
    4560:	cf 90       	pop	r12
    4562:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001f44 <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    1f44:	6f 92       	push	r6
    1f46:	7f 92       	push	r7
    1f48:	8f 92       	push	r8
    1f4a:	cf 92       	push	r12
    1f4c:	df 92       	push	r13
    1f4e:	ef 92       	push	r14
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1f54:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1f56:	ec 2f       	mov	r30, r28
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	e7 30       	cpi	r30, 0x07	; 7
    1f5c:	f1 05       	cpc	r31, r1
    1f5e:	d8 f7       	brcc	.-10     	; 0x1f56 <CON_RN2483+0x12>
    1f60:	e9 5a       	subi	r30, 0xA9	; 169
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	0c 94 ff 32 	jmp	0x65fe	; 0x65fe <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    1f68:	0e 94 cc 2a 	call	0x5598	; 0x5598 <uart0_hal_init>
				rn2483_init();
    1f6c:	0e 94 41 33 	call	0x6682	; 0x6682 <rn2483_init>
				LM_reset_module();
    1f70:	0e 94 83 33 	call	0x6706	; 0x6706 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1f74:	62 ee       	ldi	r22, 0xE2	; 226
    1f76:	75 e0       	ldi	r23, 0x05	; 5
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				state=CL_READ_MSG;
    1f7e:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1f80:	ea cf       	rjmp	.-44     	; 0x1f56 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1f82:	0e 94 47 32 	call	0x648e	; 0x648e <uart1_hal_message_ready>
    1f86:	88 23       	and	r24, r24
    1f88:	31 f3       	breq	.-52     	; 0x1f56 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    1f8a:	88 ea       	ldi	r24, 0xA8	; 168
    1f8c:	97 e0       	ldi	r25, 0x07	; 7
    1f8e:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1f92:	c2 e0       	ldi	r28, 0x02	; 2
    1f94:	e0 cf       	rjmp	.-64     	; 0x1f56 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    1f96:	88 ea       	ldi	r24, 0xA8	; 168
    1f98:	97 e0       	ldi	r25, 0x07	; 7
    1f9a:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <CON_RN2483_parse>
    1f9e:	c8 2f       	mov	r28, r24
			break;
    1fa0:	da cf       	rjmp	.-76     	; 0x1f56 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1fa2:	88 ea       	ldi	r24, 0xA8	; 168
    1fa4:	97 e0       	ldi	r25, 0x07	; 7
    1fa6:	6c 01       	movw	r12, r24
    1fa8:	20 e8       	ldi	r18, 0x80	; 128
    1faa:	e2 2e       	mov	r14, r18
    1fac:	2f 93       	push	r18
    1fae:	df 92       	push	r13
    1fb0:	8f 93       	push	r24
    1fb2:	88 e1       	ldi	r24, 0x18	; 24
    1fb4:	96 e0       	ldi	r25, 0x06	; 6
    1fb6:	a0 e0       	ldi	r26, 0x00	; 0
    1fb8:	af 93       	push	r26
    1fba:	9f 93       	push	r25
    1fbc:	8f 93       	push	r24
    1fbe:	c0 ee       	ldi	r28, 0xE0	; 224
    1fc0:	d6 e0       	ldi	r29, 0x06	; 6
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
				uart1_hal_send_string(cnf_reply);
    1fca:	3e 01       	movw	r6, r28
    1fcc:	20 e8       	ldi	r18, 0x80	; 128
    1fce:	82 2e       	mov	r8, r18
    1fd0:	88 2d       	mov	r24, r8
    1fd2:	b3 01       	movw	r22, r6
    1fd4:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    1fd8:	ae 01       	movw	r20, r28
    1fda:	6c 2d       	mov	r22, r12
    1fdc:	7d 2d       	mov	r23, r13
    1fde:	8e 2d       	mov	r24, r14
    1fe0:	0e 94 86 33 	call	0x670c	; 0x670c <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    1fe4:	88 2d       	mov	r24, r8
    1fe6:	b3 01       	movw	r22, r6
    1fe8:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    1fec:	8d b7       	in	r24, 0x3d	; 61
    1fee:	9e b7       	in	r25, 0x3e	; 62
    1ff0:	08 96       	adiw	r24, 0x08	; 8
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	9e bf       	out	0x3e, r25	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    1ffc:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1ffe:	ab cf       	rjmp	.-170    	; 0x1f56 <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    2000:	8e e1       	ldi	r24, 0x1E	; 30
    2002:	96 e0       	ldi	r25, 0x06	; 6
    2004:	a0 e0       	ldi	r26, 0x00	; 0
    2006:	af 93       	push	r26
    2008:	9f 93       	push	r25
    200a:	8f 93       	push	r24
    200c:	88 e1       	ldi	r24, 0x18	; 24
    200e:	96 e0       	ldi	r25, 0x06	; 6
    2010:	a0 e0       	ldi	r26, 0x00	; 0
    2012:	af 93       	push	r26
    2014:	9f 93       	push	r25
    2016:	8f 93       	push	r24
    2018:	c0 ee       	ldi	r28, 0xE0	; 224
    201a:	d6 e0       	ldi	r29, 0x06	; 6
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
				uart1_hal_send_string(cnf_reply);
    2024:	6e 01       	movw	r12, r28
    2026:	80 e8       	ldi	r24, 0x80	; 128
    2028:	e8 2e       	mov	r14, r24
    202a:	8e 2d       	mov	r24, r14
    202c:	b6 01       	movw	r22, r12
    202e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
    2032:	9f e7       	ldi	r25, 0x7F	; 127
    2034:	28 e3       	ldi	r18, 0x38	; 56
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	91 50       	subi	r25, 0x01	; 1
    203a:	20 40       	sbci	r18, 0x00	; 0
    203c:	80 40       	sbci	r24, 0x00	; 0
    203e:	e1 f7       	brne	.-8      	; 0x2038 <CON_RN2483+0xf4>
    2040:	00 c0       	rjmp	.+0      	; 0x2042 <CON_RN2483+0xfe>
    2042:	00 00       	nop
				_delay_ms(50);
				LM_send_break(cnf_reply);
    2044:	ce 01       	movw	r24, r28
    2046:	0e 94 89 33 	call	0x6712	; 0x6712 <LM_send_break>
				uart1_hal_send_string(cnf_reply);
    204a:	8e 2d       	mov	r24, r14
    204c:	b6 01       	movw	r22, r12
    204e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    2052:	8d b7       	in	r24, 0x3d	; 61
    2054:	9e b7       	in	r25, 0x3e	; 62
    2056:	08 96       	adiw	r24, 0x08	; 8
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	9e bf       	out	0x3e, r25	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	8d bf       	out	0x3d, r24	; 61
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break(cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    2062:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2064:	78 cf       	rjmp	.-272    	; 0x1f56 <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    2066:	0e 94 40 32 	call	0x6480	; 0x6480 <uart0_hal_message_ready>
    206a:	88 23       	and	r24, r24
    206c:	29 f0       	breq	.+10     	; 0x2078 <CON_RN2483+0x134>
					uart0_hal_read_message_as_str(cnf_reply);
    206e:	80 ee       	ldi	r24, 0xE0	; 224
    2070:	96 e0       	ldi	r25, 0x06	; 6
    2072:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <uart0_hal_read_message_as_str>
    2076:	09 c0       	rjmp	.+18     	; 0x208a <CON_RN2483+0x146>
				}else{
					strcpy(cnf_reply, "null");
    2078:	25 e0       	ldi	r18, 0x05	; 5
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	49 e2       	ldi	r20, 0x29	; 41
    207e:	56 e0       	ldi	r21, 0x06	; 6
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	80 ee       	ldi	r24, 0xE0	; 224
    2084:	96 e0       	ldi	r25, 0x06	; 6
    2086:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    208a:	60 ee       	ldi	r22, 0xE0	; 224
    208c:	76 e0       	ldi	r23, 0x06	; 6
    208e:	80 e8       	ldi	r24, 0x80	; 128
    2090:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				state=CL_READ_MSG;
    2094:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2096:	5f cf       	rjmp	.-322    	; 0x1f56 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    2098:	0e 94 10 33 	call	0x6620	; 0x6620 <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    209c:	6e e2       	ldi	r22, 0x2E	; 46
    209e:	76 e0       	ldi	r23, 0x06	; 6
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	ef 90       	pop	r14
    20ae:	df 90       	pop	r13
    20b0:	cf 90       	pop	r12
    20b2:	8f 90       	pop	r8
    20b4:	7f 90       	pop	r7
    20b6:	6f 90       	pop	r6
    20b8:	08 95       	ret

Disassembly of section .text.CONNECT:

00004ae0 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    4ae0:	cf 93       	push	r28
    4ae2:	df 93       	push	r29
    4ae4:	cd b7       	in	r28, 0x3d	; 61
    4ae6:	de b7       	in	r29, 0x3e	; 62
    4ae8:	64 97       	sbiw	r28, 0x14	; 20
    4aea:	0f b6       	in	r0, 0x3f	; 63
    4aec:	f8 94       	cli
    4aee:	de bf       	out	0x3e, r29	; 62
    4af0:	0f be       	out	0x3f, r0	; 63
    4af2:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    4af4:	21 e0       	ldi	r18, 0x01	; 1
    4af6:	ae 01       	movw	r20, r28
    4af8:	4f 5f       	subi	r20, 0xFF	; 255
    4afa:	5f 4f       	sbci	r21, 0xFF	; 255
    4afc:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    4b00:	88 23       	and	r24, r24
    4b02:	79 f0       	breq	.+30     	; 0x4b22 <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    4b04:	be 01       	movw	r22, r28
    4b06:	6f 5f       	subi	r22, 0xFF	; 255
    4b08:	7f 4f       	sbci	r23, 0xFF	; 255
    4b0a:	80 e8       	ldi	r24, 0x80	; 128
    4b0c:	2e e4       	ldi	r18, 0x4E	; 78
    4b0e:	36 e0       	ldi	r19, 0x06	; 6
    4b10:	40 e0       	ldi	r20, 0x00	; 0
    4b12:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    4b16:	89 2b       	or	r24, r25
    4b18:	19 f4       	brne	.+6      	; 0x4b20 <CONNECT+0x40>
		return CON_RN2483();
    4b1a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <CON_RN2483>
    4b1e:	01 c0       	rjmp	.+2      	; 0x4b22 <CONNECT+0x42>
	}else{
		return false;
    4b20:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4b22:	64 96       	adiw	r28, 0x14	; 20
    4b24:	0f b6       	in	r0, 0x3f	; 63
    4b26:	f8 94       	cli
    4b28:	de bf       	out	0x3e, r29	; 62
    4b2a:	0f be       	out	0x3f, r0	; 63
    4b2c:	cd bf       	out	0x3d, r28	; 61
    4b2e:	df 91       	pop	r29
    4b30:	cf 91       	pop	r28
    4b32:	08 95       	ret

Disassembly of section .text.read_cols:

000034b2 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    34b2:	cf 92       	push	r12
    34b4:	df 92       	push	r13
    34b6:	ef 92       	push	r14
    34b8:	ff 92       	push	r15
    34ba:	1f 93       	push	r17
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
    34c4:	a3 97       	sbiw	r28, 0x23	; 35
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    34d2:	63 e2       	ldi	r22, 0x23	; 35
    34d4:	ce 01       	movw	r24, r28
    34d6:	01 96       	adiw	r24, 0x01	; 1
    34d8:	0e 94 06 32 	call	0x640c	; 0x640c <EM_get_collections>
	res[0]='\0';
    34dc:	f7 01       	movw	r30, r14
    34de:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    34e0:	10 e0       	ldi	r17, 0x00	; 0
    34e2:	35 c0       	rjmp	.+106    	; 0x354e <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    34e4:	81 2f       	mov	r24, r17
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	fc 01       	movw	r30, r24
    34ea:	ee 0f       	add	r30, r30
    34ec:	ff 1f       	adc	r31, r31
    34ee:	ee 0f       	add	r30, r30
    34f0:	ff 1f       	adc	r31, r31
    34f2:	e8 0f       	add	r30, r24
    34f4:	f9 1f       	adc	r31, r25
    34f6:	21 e0       	ldi	r18, 0x01	; 1
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	2c 0f       	add	r18, r28
    34fc:	3d 1f       	adc	r19, r29
    34fe:	e2 0f       	add	r30, r18
    3500:	f3 1f       	adc	r31, r19
    3502:	23 81       	ldd	r18, Z+3	; 0x03
    3504:	2f 93       	push	r18
    3506:	22 81       	ldd	r18, Z+2	; 0x02
    3508:	2f 93       	push	r18
    350a:	21 81       	ldd	r18, Z+1	; 0x01
    350c:	2f 93       	push	r18
    350e:	20 81       	ld	r18, Z
    3510:	2f 93       	push	r18
    3512:	01 96       	adiw	r24, 0x01	; 1
    3514:	9f 93       	push	r25
    3516:	8f 93       	push	r24
    3518:	84 e6       	ldi	r24, 0x64	; 100
    351a:	92 e0       	ldi	r25, 0x02	; 2
    351c:	a0 e0       	ldi	r26, 0x00	; 0
    351e:	af 93       	push	r26
    3520:	9f 93       	push	r25
    3522:	8f 93       	push	r24
    3524:	0f 2e       	mov	r0, r31
    3526:	f0 e8       	ldi	r31, 0x80	; 128
    3528:	cf 2e       	mov	r12, r31
    352a:	fe e0       	ldi	r31, 0x0E	; 14
    352c:	df 2e       	mov	r13, r31
    352e:	f0 2d       	mov	r31, r0
    3530:	df 92       	push	r13
    3532:	cf 92       	push	r12
    3534:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
		strcat(res, arg);
    3538:	a6 01       	movw	r20, r12
    353a:	60 e8       	ldi	r22, 0x80	; 128
    353c:	c7 01       	movw	r24, r14
    353e:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    3542:	1f 5f       	subi	r17, 0xFF	; 255
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	17 30       	cpi	r17, 0x07	; 7
    3550:	48 f2       	brcs	.-110    	; 0x34e4 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    3552:	a3 96       	adiw	r28, 0x23	; 35
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	1f 91       	pop	r17
    3564:	ff 90       	pop	r15
    3566:	ef 90       	pop	r14
    3568:	df 90       	pop	r13
    356a:	cf 90       	pop	r12
    356c:	08 95       	ret

Disassembly of section .text.read_time:

00003dc6 <read_time>:

static void read_time(char res[]){
    3dc6:	0f 93       	push	r16
    3dc8:	1f 93       	push	r17
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <read_time+0xa>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <read_time+0xc>
    3dd2:	00 d0       	rcall	.+0      	; 0x3dd4 <read_time+0xe>
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
    3dd8:	18 2f       	mov	r17, r24
    3dda:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    3ddc:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    3de0:	ce 01       	movw	r24, r28
    3de2:	01 96       	adiw	r24, 0x01	; 1
    3de4:	0e 94 0e 11 	call	0x221c	; 0x221c <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    3de8:	88 23       	and	r24, r24
    3dea:	51 f0       	breq	.+20     	; 0x3e00 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    3dec:	24 e1       	ldi	r18, 0x14	; 20
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	4a e7       	ldi	r20, 0x7A	; 122
    3df2:	52 e0       	ldi	r21, 0x02	; 2
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	81 2f       	mov	r24, r17
    3df8:	90 2f       	mov	r25, r16
    3dfa:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
    3dfe:	21 c0       	rjmp	.+66     	; 0x3e42 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    3e00:	59 81       	ldd	r21, Y+1	; 0x01
    3e02:	4a 81       	ldd	r20, Y+2	; 0x02
    3e04:	3b 81       	ldd	r19, Y+3	; 0x03
    3e06:	2c 81       	ldd	r18, Y+4	; 0x04
    3e08:	9d 81       	ldd	r25, Y+5	; 0x05
    3e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    3e0c:	1f 92       	push	r1
    3e0e:	5f 93       	push	r21
    3e10:	1f 92       	push	r1
    3e12:	4f 93       	push	r20
    3e14:	1f 92       	push	r1
    3e16:	3f 93       	push	r19
    3e18:	1f 92       	push	r1
    3e1a:	2f 93       	push	r18
    3e1c:	1f 92       	push	r1
    3e1e:	9f 93       	push	r25
    3e20:	1f 92       	push	r1
    3e22:	8f 93       	push	r24
    3e24:	8e e8       	ldi	r24, 0x8E	; 142
    3e26:	92 e0       	ldi	r25, 0x02	; 2
    3e28:	a0 e0       	ldi	r26, 0x00	; 0
    3e2a:	af 93       	push	r26
    3e2c:	9f 93       	push	r25
    3e2e:	8f 93       	push	r24
    3e30:	0f 93       	push	r16
    3e32:	1f 93       	push	r17
    3e34:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	f8 94       	cli
    3e3c:	de bf       	out	0x3e, r29	; 62
    3e3e:	0f be       	out	0x3f, r0	; 63
    3e40:	cd bf       	out	0x3d, r28	; 61
	}
}
    3e42:	26 96       	adiw	r28, 0x06	; 6
    3e44:	0f b6       	in	r0, 0x3f	; 63
    3e46:	f8 94       	cli
    3e48:	de bf       	out	0x3e, r29	; 62
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	cd bf       	out	0x3d, r28	; 61
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	08 95       	ret

Disassembly of section .text.write_deveui:

000040e2 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    40e2:	cf 92       	push	r12
    40e4:	df 92       	push	r13
    40e6:	ef 92       	push	r14
    40e8:	0f 93       	push	r16
    40ea:	1f 93       	push	r17
    40ec:	cf 93       	push	r28
    40ee:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    40f0:	22 e0       	ldi	r18, 0x02	; 2
    40f2:	40 e8       	ldi	r20, 0x80	; 128
    40f4:	5e e0       	ldi	r21, 0x0E	; 14
    40f6:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    40fa:	c8 2f       	mov	r28, r24
    40fc:	88 23       	and	r24, r24
    40fe:	29 f1       	breq	.+74     	; 0x414a <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    4100:	80 e8       	ldi	r24, 0x80	; 128
    4102:	9e e0       	ldi	r25, 0x0E	; 14
    4104:	6c 01       	movw	r12, r24
    4106:	20 e8       	ldi	r18, 0x80	; 128
    4108:	e2 2e       	mov	r14, r18
    410a:	8e 2d       	mov	r24, r14
    410c:	b6 01       	movw	r22, r12
    410e:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    4112:	40 97       	sbiw	r24, 0x10	; 16
    4114:	c9 f4       	brne	.+50     	; 0x4148 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    4116:	8e 2d       	mov	r24, r14
    4118:	b6 01       	movw	r22, r12
    411a:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <EM_set_deveui>
    411e:	c8 2f       	mov	r28, r24
    4120:	81 11       	cpse	r24, r1
    4122:	09 c0       	rjmp	.+18     	; 0x4136 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    4124:	27 e0       	ldi	r18, 0x07	; 7
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	4c ea       	ldi	r20, 0xAC	; 172
    412a:	52 e0       	ldi	r21, 0x02	; 2
    412c:	60 e0       	ldi	r22, 0x00	; 0
    412e:	c8 01       	movw	r24, r16
    4130:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return false;
    4134:	0a c0       	rjmp	.+20     	; 0x414a <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4136:	28 e0       	ldi	r18, 0x08	; 8
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	43 eb       	ldi	r20, 0xB3	; 179
    413c:	52 e0       	ldi	r21, 0x02	; 2
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	c8 01       	movw	r24, r16
    4142:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
    4146:	01 c0       	rjmp	.+2      	; 0x414a <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4148:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    414a:	8c 2f       	mov	r24, r28
    414c:	cf 91       	pop	r28
    414e:	1f 91       	pop	r17
    4150:	0f 91       	pop	r16
    4152:	ef 90       	pop	r14
    4154:	df 90       	pop	r13
    4156:	cf 90       	pop	r12
    4158:	08 95       	ret

Disassembly of section .text.write_appeui:

0000415a <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    415a:	cf 92       	push	r12
    415c:	df 92       	push	r13
    415e:	ef 92       	push	r14
    4160:	0f 93       	push	r16
    4162:	1f 93       	push	r17
    4164:	cf 93       	push	r28
    4166:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4168:	22 e0       	ldi	r18, 0x02	; 2
    416a:	40 e8       	ldi	r20, 0x80	; 128
    416c:	5e e0       	ldi	r21, 0x0E	; 14
    416e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    4172:	c8 2f       	mov	r28, r24
    4174:	88 23       	and	r24, r24
    4176:	29 f1       	breq	.+74     	; 0x41c2 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    4178:	80 e8       	ldi	r24, 0x80	; 128
    417a:	9e e0       	ldi	r25, 0x0E	; 14
    417c:	6c 01       	movw	r12, r24
    417e:	20 e8       	ldi	r18, 0x80	; 128
    4180:	e2 2e       	mov	r14, r18
    4182:	8e 2d       	mov	r24, r14
    4184:	b6 01       	movw	r22, r12
    4186:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    418a:	40 97       	sbiw	r24, 0x10	; 16
    418c:	c9 f4       	brne	.+50     	; 0x41c0 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    418e:	8e 2d       	mov	r24, r14
    4190:	b6 01       	movw	r22, r12
    4192:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <EM_set_appeui>
    4196:	c8 2f       	mov	r28, r24
    4198:	81 11       	cpse	r24, r1
    419a:	09 c0       	rjmp	.+18     	; 0x41ae <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    419c:	27 e0       	ldi	r18, 0x07	; 7
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	4c ea       	ldi	r20, 0xAC	; 172
    41a2:	52 e0       	ldi	r21, 0x02	; 2
    41a4:	60 e0       	ldi	r22, 0x00	; 0
    41a6:	c8 01       	movw	r24, r16
    41a8:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return false;
    41ac:	0a c0       	rjmp	.+20     	; 0x41c2 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    41ae:	28 e0       	ldi	r18, 0x08	; 8
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	43 eb       	ldi	r20, 0xB3	; 179
    41b4:	52 e0       	ldi	r21, 0x02	; 2
    41b6:	60 e0       	ldi	r22, 0x00	; 0
    41b8:	c8 01       	movw	r24, r16
    41ba:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
    41be:	01 c0       	rjmp	.+2      	; 0x41c2 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    41c0:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    41c2:	8c 2f       	mov	r24, r28
    41c4:	cf 91       	pop	r28
    41c6:	1f 91       	pop	r17
    41c8:	0f 91       	pop	r16
    41ca:	ef 90       	pop	r14
    41cc:	df 90       	pop	r13
    41ce:	cf 90       	pop	r12
    41d0:	08 95       	ret

Disassembly of section .text.write_appkey:

000041d2 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    41d2:	cf 92       	push	r12
    41d4:	df 92       	push	r13
    41d6:	ef 92       	push	r14
    41d8:	0f 93       	push	r16
    41da:	1f 93       	push	r17
    41dc:	cf 93       	push	r28
    41de:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    41e0:	22 e0       	ldi	r18, 0x02	; 2
    41e2:	40 e8       	ldi	r20, 0x80	; 128
    41e4:	5e e0       	ldi	r21, 0x0E	; 14
    41e6:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    41ea:	c8 2f       	mov	r28, r24
    41ec:	88 23       	and	r24, r24
    41ee:	29 f1       	breq	.+74     	; 0x423a <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    41f0:	80 e8       	ldi	r24, 0x80	; 128
    41f2:	9e e0       	ldi	r25, 0x0E	; 14
    41f4:	6c 01       	movw	r12, r24
    41f6:	20 e8       	ldi	r18, 0x80	; 128
    41f8:	e2 2e       	mov	r14, r18
    41fa:	8e 2d       	mov	r24, r14
    41fc:	b6 01       	movw	r22, r12
    41fe:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    4202:	80 97       	sbiw	r24, 0x20	; 32
    4204:	c9 f4       	brne	.+50     	; 0x4238 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    4206:	8e 2d       	mov	r24, r14
    4208:	b6 01       	movw	r22, r12
    420a:	0e 94 9a 2b 	call	0x5734	; 0x5734 <EM_set_appkey>
    420e:	c8 2f       	mov	r28, r24
    4210:	81 11       	cpse	r24, r1
    4212:	09 c0       	rjmp	.+18     	; 0x4226 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    4214:	27 e0       	ldi	r18, 0x07	; 7
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	4c ea       	ldi	r20, 0xAC	; 172
    421a:	52 e0       	ldi	r21, 0x02	; 2
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	c8 01       	movw	r24, r16
    4220:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return false;
    4224:	0a c0       	rjmp	.+20     	; 0x423a <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4226:	28 e0       	ldi	r18, 0x08	; 8
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	43 eb       	ldi	r20, 0xB3	; 179
    422c:	52 e0       	ldi	r21, 0x02	; 2
    422e:	60 e0       	ldi	r22, 0x00	; 0
    4230:	c8 01       	movw	r24, r16
    4232:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
    4236:	01 c0       	rjmp	.+2      	; 0x423a <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    4238:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    423a:	8c 2f       	mov	r24, r28
    423c:	cf 91       	pop	r28
    423e:	1f 91       	pop	r17
    4240:	0f 91       	pop	r16
    4242:	ef 90       	pop	r14
    4244:	df 90       	pop	r13
    4246:	cf 90       	pop	r12
    4248:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00004df6 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    4df6:	0f 93       	push	r16
    4df8:	1f 93       	push	r17
    4dfa:	cf 93       	push	r28
    4dfc:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4dfe:	22 e0       	ldi	r18, 0x02	; 2
    4e00:	40 e8       	ldi	r20, 0x80	; 128
    4e02:	5e e0       	ldi	r21, 0x0E	; 14
    4e04:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    4e08:	c8 2f       	mov	r28, r24
    4e0a:	88 23       	and	r24, r24
    4e0c:	a9 f0       	breq	.+42     	; 0x4e38 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    4e0e:	80 e8       	ldi	r24, 0x80	; 128
    4e10:	9e e0       	ldi	r25, 0x0E	; 14
    4e12:	0e 94 c4 24 	call	0x4988	; 0x4988 <is_float>
    4e16:	c8 2f       	mov	r28, r24
    4e18:	88 23       	and	r24, r24
    4e1a:	71 f0       	breq	.+28     	; 0x4e38 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    4e1c:	80 e8       	ldi	r24, 0x80	; 128
    4e1e:	9e e0       	ldi	r25, 0x0E	; 14
    4e20:	0e 94 88 26 	call	0x4d10	; 0x4d10 <str2flaot>
	EM_set_ppmfactor(val);
    4e24:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    4e28:	28 e0       	ldi	r18, 0x08	; 8
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	43 eb       	ldi	r20, 0xB3	; 179
    4e2e:	52 e0       	ldi	r21, 0x02	; 2
    4e30:	60 e0       	ldi	r22, 0x00	; 0
    4e32:	c8 01       	movw	r24, r16
    4e34:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
	return true;
}
    4e38:	8c 2f       	mov	r24, r28
    4e3a:	cf 91       	pop	r28
    4e3c:	1f 91       	pop	r17
    4e3e:	0f 91       	pop	r16
    4e40:	08 95       	ret

Disassembly of section .text.write_RRL:

00004e42 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    4e42:	0f 93       	push	r16
    4e44:	1f 93       	push	r17
    4e46:	cf 93       	push	r28
    4e48:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4e4a:	22 e0       	ldi	r18, 0x02	; 2
    4e4c:	40 e8       	ldi	r20, 0x80	; 128
    4e4e:	5e e0       	ldi	r21, 0x0E	; 14
    4e50:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    4e54:	c8 2f       	mov	r28, r24
    4e56:	88 23       	and	r24, r24
    4e58:	a9 f0       	breq	.+42     	; 0x4e84 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    4e5a:	80 e8       	ldi	r24, 0x80	; 128
    4e5c:	9e e0       	ldi	r25, 0x0E	; 14
    4e5e:	0e 94 c4 24 	call	0x4988	; 0x4988 <is_float>
    4e62:	c8 2f       	mov	r28, r24
    4e64:	88 23       	and	r24, r24
    4e66:	71 f0       	breq	.+28     	; 0x4e84 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    4e68:	80 e8       	ldi	r24, 0x80	; 128
    4e6a:	9e e0       	ldi	r25, 0x0E	; 14
    4e6c:	0e 94 88 26 	call	0x4d10	; 0x4d10 <str2flaot>
	EM_set_RRL(val);
    4e70:	0e 94 63 32 	call	0x64c6	; 0x64c6 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    4e74:	28 e0       	ldi	r18, 0x08	; 8
    4e76:	30 e0       	ldi	r19, 0x00	; 0
    4e78:	43 eb       	ldi	r20, 0xB3	; 179
    4e7a:	52 e0       	ldi	r21, 0x02	; 2
    4e7c:	60 e0       	ldi	r22, 0x00	; 0
    4e7e:	c8 01       	movw	r24, r16
    4e80:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
	return true;
}
    4e84:	8c 2f       	mov	r24, r28
    4e86:	cf 91       	pop	r28
    4e88:	1f 91       	pop	r17
    4e8a:	0f 91       	pop	r16
    4e8c:	08 95       	ret

Disassembly of section .text.write_VCC:

00004e8e <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    4e8e:	0f 93       	push	r16
    4e90:	1f 93       	push	r17
    4e92:	cf 93       	push	r28
    4e94:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4e96:	22 e0       	ldi	r18, 0x02	; 2
    4e98:	40 e8       	ldi	r20, 0x80	; 128
    4e9a:	5e e0       	ldi	r21, 0x0E	; 14
    4e9c:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    4ea0:	c8 2f       	mov	r28, r24
    4ea2:	88 23       	and	r24, r24
    4ea4:	a9 f0       	breq	.+42     	; 0x4ed0 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    4ea6:	80 e8       	ldi	r24, 0x80	; 128
    4ea8:	9e e0       	ldi	r25, 0x0E	; 14
    4eaa:	0e 94 c4 24 	call	0x4988	; 0x4988 <is_float>
    4eae:	c8 2f       	mov	r28, r24
    4eb0:	88 23       	and	r24, r24
    4eb2:	71 f0       	breq	.+28     	; 0x4ed0 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    4eb4:	80 e8       	ldi	r24, 0x80	; 128
    4eb6:	9e e0       	ldi	r25, 0x0E	; 14
    4eb8:	0e 94 88 26 	call	0x4d10	; 0x4d10 <str2flaot>
	EM_set_Vcc(val);
    4ebc:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    4ec0:	28 e0       	ldi	r18, 0x08	; 8
    4ec2:	30 e0       	ldi	r19, 0x00	; 0
    4ec4:	43 eb       	ldi	r20, 0xB3	; 179
    4ec6:	52 e0       	ldi	r21, 0x02	; 2
    4ec8:	60 e0       	ldi	r22, 0x00	; 0
    4eca:	c8 01       	movw	r24, r16
    4ecc:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
	return true;
}
    4ed0:	8c 2f       	mov	r24, r28
    4ed2:	cf 91       	pop	r28
    4ed4:	1f 91       	pop	r17
    4ed6:	0f 91       	pop	r16
    4ed8:	08 95       	ret

Disassembly of section .text.get_time_par:

0000598e <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    598e:	cf 93       	push	r28
    5990:	df 93       	push	r29
    5992:	00 d0       	rcall	.+0      	; 0x5994 <get_time_par+0x6>
    5994:	1f 92       	push	r1
    5996:	cd b7       	in	r28, 0x3d	; 61
    5998:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    599a:	fc 01       	movw	r30, r24
    599c:	e6 0f       	add	r30, r22
    599e:	f1 1d       	adc	r31, r1
    59a0:	80 81       	ld	r24, Z
    59a2:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    59a4:	81 81       	ldd	r24, Z+1	; 0x01
    59a6:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    59a8:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    59aa:	be 01       	movw	r22, r28
    59ac:	6f 5f       	subi	r22, 0xFF	; 255
    59ae:	7f 4f       	sbci	r23, 0xFF	; 255
    59b0:	80 e8       	ldi	r24, 0x80	; 128
    59b2:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
}
    59b6:	0f 90       	pop	r0
    59b8:	0f 90       	pop	r0
    59ba:	0f 90       	pop	r0
    59bc:	df 91       	pop	r29
    59be:	cf 91       	pop	r28
    59c0:	08 95       	ret

Disassembly of section .text.write_cols:

00002494 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    2494:	4f 92       	push	r4
    2496:	5f 92       	push	r5
    2498:	6f 92       	push	r6
    249a:	7f 92       	push	r7
    249c:	8f 92       	push	r8
    249e:	af 92       	push	r10
    24a0:	bf 92       	push	r11
    24a2:	cf 92       	push	r12
    24a4:	df 92       	push	r13
    24a6:	ef 92       	push	r14
    24a8:	ff 92       	push	r15
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	a3 97       	sbiw	r28, 0x23	; 35
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	3b 01       	movw	r6, r22
    24c4:	88 2e       	mov	r8, r24
    24c6:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    24c8:	22 e0       	ldi	r18, 0x02	; 2
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5e e0       	ldi	r21, 0x0E	; 14
    24ce:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    24d2:	18 2f       	mov	r17, r24
    24d4:	88 23       	and	r24, r24
    24d6:	09 f4       	brne	.+2      	; 0x24da <write_cols+0x46>
    24d8:	5d c0       	rjmp	.+186    	; 0x2594 <write_cols+0x100>
	index=atoi(arg);
    24da:	80 e8       	ldi	r24, 0x80	; 128
    24dc:	9e e0       	ldi	r25, 0x0E	; 14
    24de:	6c 01       	movw	r12, r24
    24e0:	20 e8       	ldi	r18, 0x80	; 128
    24e2:	e2 2e       	mov	r14, r18
    24e4:	8e 2d       	mov	r24, r14
    24e6:	b6 01       	movw	r22, r12
    24e8:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
	if(index<1 || index>7) return false;
    24ec:	0f ef       	ldi	r16, 0xFF	; 255
    24ee:	08 0f       	add	r16, r24
    24f0:	07 30       	cpi	r16, 0x07	; 7
    24f2:	08 f0       	brcs	.+2      	; 0x24f6 <write_cols+0x62>
    24f4:	4a c0       	rjmp	.+148    	; 0x258a <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    24f6:	23 e0       	ldi	r18, 0x03	; 3
    24f8:	40 e8       	ldi	r20, 0x80	; 128
    24fa:	5e e0       	ldi	r21, 0x0E	; 14
    24fc:	88 2d       	mov	r24, r8
    24fe:	b3 01       	movw	r22, r6
    2500:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    2504:	18 2f       	mov	r17, r24
    2506:	88 23       	and	r24, r24
    2508:	09 f4       	brne	.+2      	; 0x250c <write_cols+0x78>
    250a:	44 c0       	rjmp	.+136    	; 0x2594 <write_cols+0x100>
	samplings=atoi(arg);
    250c:	8e 2d       	mov	r24, r14
    250e:	b6 01       	movw	r22, r12
    2510:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
    2514:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    2516:	02 97       	sbiw	r24, 0x02	; 2
    2518:	8b 32       	cpi	r24, 0x2B	; 43
    251a:	91 40       	sbci	r25, 0x01	; 1
    251c:	c0 f5       	brcc	.+112    	; 0x258e <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    251e:	24 e0       	ldi	r18, 0x04	; 4
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5e e0       	ldi	r21, 0x0E	; 14
    2524:	88 2d       	mov	r24, r8
    2526:	b3 01       	movw	r22, r6
    2528:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    252c:	18 2f       	mov	r17, r24
    252e:	88 23       	and	r24, r24
    2530:	89 f1       	breq	.+98     	; 0x2594 <write_cols+0x100>
	samplingInterval=atoi(arg);
    2532:	8e 2d       	mov	r24, r14
    2534:	b6 01       	movw	r22, r12
    2536:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
    253a:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    253c:	02 97       	sbiw	r24, 0x02	; 2
    253e:	87 35       	cpi	r24, 0x57	; 87
    2540:	92 40       	sbci	r25, 0x02	; 2
    2542:	38 f5       	brcc	.+78     	; 0x2592 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    2544:	63 e2       	ldi	r22, 0x23	; 35
    2546:	ce 01       	movw	r24, r28
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	7c 01       	movw	r14, r24
    254c:	0e 94 06 32 	call	0x640c	; 0x640c <EM_get_collections>
	
	cols[index].samplings=samplings;
    2550:	80 2f       	mov	r24, r16
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	fc 01       	movw	r30, r24
    2556:	ee 0f       	add	r30, r30
    2558:	ff 1f       	adc	r31, r31
    255a:	ee 0f       	add	r30, r30
    255c:	ff 1f       	adc	r31, r31
    255e:	e8 0f       	add	r30, r24
    2560:	f9 1f       	adc	r31, r25
    2562:	ee 0d       	add	r30, r14
    2564:	ff 1d       	adc	r31, r15
    2566:	51 82       	std	Z+1, r5	; 0x01
    2568:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    256a:	d3 82       	std	Z+3, r13	; 0x03
    256c:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    256e:	b7 01       	movw	r22, r14
    2570:	80 e8       	ldi	r24, 0x80	; 128
    2572:	43 e2       	ldi	r20, 0x23	; 35
    2574:	0e 94 71 32 	call	0x64e2	; 0x64e2 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    2578:	28 e0       	ldi	r18, 0x08	; 8
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	43 eb       	ldi	r20, 0xB3	; 179
    257e:	52 e0       	ldi	r21, 0x02	; 2
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	c5 01       	movw	r24, r10
    2584:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
	return true;	
    2588:	05 c0       	rjmp	.+10     	; 0x2594 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    258a:	10 e0       	ldi	r17, 0x00	; 0
    258c:	03 c0       	rjmp	.+6      	; 0x2594 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    258e:	10 e0       	ldi	r17, 0x00	; 0
    2590:	01 c0       	rjmp	.+2      	; 0x2594 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    2592:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    2594:	81 2f       	mov	r24, r17
    2596:	a3 96       	adiw	r28, 0x23	; 35
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	ff 90       	pop	r15
    25ac:	ef 90       	pop	r14
    25ae:	df 90       	pop	r13
    25b0:	cf 90       	pop	r12
    25b2:	bf 90       	pop	r11
    25b4:	af 90       	pop	r10
    25b6:	8f 90       	pop	r8
    25b8:	7f 90       	pop	r7
    25ba:	6f 90       	pop	r6
    25bc:	5f 90       	pop	r5
    25be:	4f 90       	pop	r4
    25c0:	08 95       	ret

Disassembly of section .text.write_heat_up:

00004eda <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    4eda:	0f 93       	push	r16
    4edc:	1f 93       	push	r17
    4ede:	cf 93       	push	r28
    4ee0:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4ee2:	22 e0       	ldi	r18, 0x02	; 2
    4ee4:	40 e8       	ldi	r20, 0x80	; 128
    4ee6:	5e e0       	ldi	r21, 0x0E	; 14
    4ee8:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    4eec:	c8 2f       	mov	r28, r24
    4eee:	88 23       	and	r24, r24
    4ef0:	a9 f0       	breq	.+42     	; 0x4f1c <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    4ef2:	60 e8       	ldi	r22, 0x80	; 128
    4ef4:	7e e0       	ldi	r23, 0x0E	; 14
    4ef6:	80 e8       	ldi	r24, 0x80	; 128
    4ef8:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
	
	if(val<1 || val>200) return false;
    4efc:	9f ef       	ldi	r25, 0xFF	; 255
    4efe:	98 0f       	add	r25, r24
    4f00:	98 3c       	cpi	r25, 0xC8	; 200
    4f02:	58 f4       	brcc	.+22     	; 0x4f1a <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    4f04:	0e 94 c3 32 	call	0x6586	; 0x6586 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    4f08:	28 e0       	ldi	r18, 0x08	; 8
    4f0a:	30 e0       	ldi	r19, 0x00	; 0
    4f0c:	43 eb       	ldi	r20, 0xB3	; 179
    4f0e:	52 e0       	ldi	r21, 0x02	; 2
    4f10:	60 e0       	ldi	r22, 0x00	; 0
    4f12:	c8 01       	movw	r24, r16
    4f14:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
	return true;
    4f18:	01 c0       	rjmp	.+2      	; 0x4f1c <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    4f1a:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    4f1c:	8c 2f       	mov	r24, r28
    4f1e:	cf 91       	pop	r28
    4f20:	1f 91       	pop	r17
    4f22:	0f 91       	pop	r16
    4f24:	08 95       	ret

Disassembly of section .text.write_air_pump:

00004bd6 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    4bd6:	0f 93       	push	r16
    4bd8:	1f 93       	push	r17
    4bda:	cf 93       	push	r28
    4bdc:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4bde:	22 e0       	ldi	r18, 0x02	; 2
    4be0:	40 e8       	ldi	r20, 0x80	; 128
    4be2:	5e e0       	ldi	r21, 0x0E	; 14
    4be4:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    4be8:	c8 2f       	mov	r28, r24
    4bea:	88 23       	and	r24, r24
    4bec:	b9 f0       	breq	.+46     	; 0x4c1c <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    4bee:	60 e8       	ldi	r22, 0x80	; 128
    4bf0:	7e e0       	ldi	r23, 0x0E	; 14
    4bf2:	80 e8       	ldi	r24, 0x80	; 128
    4bf4:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
	
	if(val<5 || val>1000) return false;
    4bf8:	9c 01       	movw	r18, r24
    4bfa:	25 50       	subi	r18, 0x05	; 5
    4bfc:	31 09       	sbc	r19, r1
    4bfe:	24 3e       	cpi	r18, 0xE4	; 228
    4c00:	33 40       	sbci	r19, 0x03	; 3
    4c02:	58 f4       	brcc	.+22     	; 0x4c1a <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    4c04:	0e 94 cf 32 	call	0x659e	; 0x659e <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    4c08:	28 e0       	ldi	r18, 0x08	; 8
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	43 eb       	ldi	r20, 0xB3	; 179
    4c0e:	52 e0       	ldi	r21, 0x02	; 2
    4c10:	60 e0       	ldi	r22, 0x00	; 0
    4c12:	c8 01       	movw	r24, r16
    4c14:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
	return true;
    4c18:	01 c0       	rjmp	.+2      	; 0x4c1c <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    4c1a:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    4c1c:	8c 2f       	mov	r24, r28
    4c1e:	cf 91       	pop	r28
    4c20:	1f 91       	pop	r17
    4c22:	0f 91       	pop	r16
    4c24:	08 95       	ret

Disassembly of section .text.write_sp_interval:

00004f26 <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    4f26:	0f 93       	push	r16
    4f28:	1f 93       	push	r17
    4f2a:	cf 93       	push	r28
    4f2c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4f2e:	22 e0       	ldi	r18, 0x02	; 2
    4f30:	40 e8       	ldi	r20, 0x80	; 128
    4f32:	5e e0       	ldi	r21, 0x0E	; 14
    4f34:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    4f38:	c8 2f       	mov	r28, r24
    4f3a:	88 23       	and	r24, r24
    4f3c:	a9 f0       	breq	.+42     	; 0x4f68 <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    4f3e:	60 e8       	ldi	r22, 0x80	; 128
    4f40:	7e e0       	ldi	r23, 0x0E	; 14
    4f42:	80 e8       	ldi	r24, 0x80	; 128
    4f44:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
	
	if(val<6 || val>24) return false;
    4f48:	9a ef       	ldi	r25, 0xFA	; 250
    4f4a:	98 0f       	add	r25, r24
    4f4c:	93 31       	cpi	r25, 0x13	; 19
    4f4e:	58 f4       	brcc	.+22     	; 0x4f66 <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    4f50:	0e 94 db 32 	call	0x65b6	; 0x65b6 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    4f54:	28 e0       	ldi	r18, 0x08	; 8
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	43 eb       	ldi	r20, 0xB3	; 179
    4f5a:	52 e0       	ldi	r21, 0x02	; 2
    4f5c:	60 e0       	ldi	r22, 0x00	; 0
    4f5e:	c8 01       	movw	r24, r16
    4f60:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
	return true;
    4f64:	01 c0       	rjmp	.+2      	; 0x4f68 <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    4f66:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    4f68:	8c 2f       	mov	r24, r28
    4f6a:	cf 91       	pop	r28
    4f6c:	1f 91       	pop	r17
    4f6e:	0f 91       	pop	r16
    4f70:	08 95       	ret

Disassembly of section .text.write_reset:

00002ef4 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    2ef4:	0f 93       	push	r16
    2ef6:	1f 93       	push	r17
    2ef8:	cf 93       	push	r28
    2efa:	df 93       	push	r29
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	a3 97       	sbiw	r28, 0x23	; 35
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
    2f0c:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    2f0e:	6b eb       	ldi	r22, 0xBB	; 187
    2f10:	72 e0       	ldi	r23, 0x02	; 2
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    2f18:	6b eb       	ldi	r22, 0xBB	; 187
    2f1a:	72 e0       	ldi	r23, 0x02	; 2
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    2f22:	6c ec       	ldi	r22, 0xCC	; 204
    2f24:	72 e0       	ldi	r23, 0x02	; 2
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	0e 94 9a 2b 	call	0x5734	; 0x5734 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	70 e0       	ldi	r23, 0x00	; 0
    2f30:	80 e8       	ldi	r24, 0x80	; 128
    2f32:	9f e3       	ldi	r25, 0x3F	; 63
    2f34:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    2f38:	60 e0       	ldi	r22, 0x00	; 0
    2f3a:	70 e4       	ldi	r23, 0x40	; 64
    2f3c:	8c e1       	ldi	r24, 0x1C	; 28
    2f3e:	95 e4       	ldi	r25, 0x45	; 69
    2f40:	0e 94 63 32 	call	0x64c6	; 0x64c6 <EM_set_RRL>
	EM_set_Vcc(5.00);
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	80 ea       	ldi	r24, 0xA0	; 160
    2f4a:	90 e4       	ldi	r25, 0x40	; 64
    2f4c:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    2f50:	82 e0       	ldi	r24, 0x02	; 2
    2f52:	0e 94 c3 32 	call	0x6586	; 0x6586 <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    2f56:	85 e0       	ldi	r24, 0x05	; 5
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 94 cf 32 	call	0x659e	; 0x659e <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    2f5e:	86 e0       	ldi	r24, 0x06	; 6
    2f60:	0e 94 db 32 	call	0x65b6	; 0x65b6 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	1a c0       	rjmp	.+52     	; 0x2f9c <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    2f68:	e8 2f       	mov	r30, r24
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	9f 01       	movw	r18, r30
    2f6e:	22 0f       	add	r18, r18
    2f70:	33 1f       	adc	r19, r19
    2f72:	22 0f       	add	r18, r18
    2f74:	33 1f       	adc	r19, r19
    2f76:	e2 0f       	add	r30, r18
    2f78:	f3 1f       	adc	r31, r19
    2f7a:	21 e0       	ldi	r18, 0x01	; 1
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	2c 0f       	add	r18, r28
    2f80:	3d 1f       	adc	r19, r29
    2f82:	e2 0f       	add	r30, r18
    2f84:	f3 1f       	adc	r31, r19
    2f86:	92 e0       	ldi	r25, 0x02	; 2
    2f88:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    2f8a:	22 e0       	ldi	r18, 0x02	; 2
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	31 83       	std	Z+1, r19	; 0x01
    2f90:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    2f92:	23 e0       	ldi	r18, 0x03	; 3
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	33 83       	std	Z+3, r19	; 0x03
    2f98:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    2f9a:	8f 5f       	subi	r24, 0xFF	; 255
    2f9c:	87 30       	cpi	r24, 0x07	; 7
    2f9e:	20 f3       	brcs	.-56     	; 0x2f68 <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    2fa0:	be 01       	movw	r22, r28
    2fa2:	6f 5f       	subi	r22, 0xFF	; 255
    2fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa6:	80 e8       	ldi	r24, 0x80	; 128
    2fa8:	43 e2       	ldi	r20, 0x23	; 35
    2faa:	0e 94 71 32 	call	0x64e2	; 0x64e2 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    2fae:	23 e1       	ldi	r18, 0x13	; 19
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	4d ee       	ldi	r20, 0xED	; 237
    2fb4:	52 e0       	ldi	r21, 0x02	; 2
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	c8 01       	movw	r24, r16
    2fba:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
	return true;
}
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	a3 96       	adiw	r28, 0x23	; 35
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	08 95       	ret

Disassembly of section .text.write_time:

00002b1e <write_time>:

static bool write_time(const char cmd[], char res[]){
    2b1e:	6f 92       	push	r6
    2b20:	7f 92       	push	r7
    2b22:	8f 92       	push	r8
    2b24:	df 92       	push	r13
    2b26:	ef 92       	push	r14
    2b28:	ff 92       	push	r15
    2b2a:	0f 93       	push	r16
    2b2c:	1f 93       	push	r17
    2b2e:	cf 93       	push	r28
    2b30:	df 93       	push	r29
    2b32:	00 d0       	rcall	.+0      	; 0x2b34 <write_time+0x16>
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <write_time+0x18>
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <write_time+0x1a>
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	3b 01       	movw	r6, r22
    2b3e:	88 2e       	mov	r8, r24
    2b40:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    2b42:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    2b46:	22 e0       	ldi	r18, 0x02	; 2
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5e e0       	ldi	r21, 0x0E	; 14
    2b4c:	88 2d       	mov	r24, r8
    2b4e:	b3 01       	movw	r22, r6
    2b50:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    2b54:	18 2f       	mov	r17, r24
    2b56:	88 23       	and	r24, r24
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <write_time+0x3e>
    2b5a:	4e c0       	rjmp	.+156    	; 0x2bf8 <write_time+0xda>
	if(strlen(arg)!=17){
    2b5c:	60 e8       	ldi	r22, 0x80	; 128
    2b5e:	7e e0       	ldi	r23, 0x0E	; 14
    2b60:	80 e8       	ldi	r24, 0x80	; 128
    2b62:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    2b66:	41 97       	sbiw	r24, 0x11	; 17
    2b68:	49 f0       	breq	.+18     	; 0x2b7c <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    2b6a:	25 e2       	ldi	r18, 0x25	; 37
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	53 e0       	ldi	r21, 0x03	; 3
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	c7 01       	movw	r24, r14
    2b76:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
    2b7a:	3e c0       	rjmp	.+124    	; 0x2bf8 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	80 e8       	ldi	r24, 0x80	; 128
    2b80:	9e e0       	ldi	r25, 0x0E	; 14
    2b82:	0e 94 c7 2c 	call	0x598e	; 0x598e <get_time_par>
    2b86:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    2b88:	63 e0       	ldi	r22, 0x03	; 3
    2b8a:	80 e8       	ldi	r24, 0x80	; 128
    2b8c:	9e e0       	ldi	r25, 0x0E	; 14
    2b8e:	0e 94 c7 2c 	call	0x598e	; 0x598e <get_time_par>
    2b92:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    2b94:	66 e0       	ldi	r22, 0x06	; 6
    2b96:	80 e8       	ldi	r24, 0x80	; 128
    2b98:	9e e0       	ldi	r25, 0x0E	; 14
    2b9a:	0e 94 c7 2c 	call	0x598e	; 0x598e <get_time_par>
    2b9e:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    2ba0:	69 e0       	ldi	r22, 0x09	; 9
    2ba2:	80 e8       	ldi	r24, 0x80	; 128
    2ba4:	9e e0       	ldi	r25, 0x0E	; 14
    2ba6:	0e 94 c7 2c 	call	0x598e	; 0x598e <get_time_par>
    2baa:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    2bac:	6c e0       	ldi	r22, 0x0C	; 12
    2bae:	80 e8       	ldi	r24, 0x80	; 128
    2bb0:	9e e0       	ldi	r25, 0x0E	; 14
    2bb2:	0e 94 c7 2c 	call	0x598e	; 0x598e <get_time_par>
    2bb6:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    2bb8:	6f e0       	ldi	r22, 0x0F	; 15
    2bba:	80 e8       	ldi	r24, 0x80	; 128
    2bbc:	9e e0       	ldi	r25, 0x0E	; 14
    2bbe:	0e 94 c7 2c 	call	0x598e	; 0x598e <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    2bc2:	48 2f       	mov	r20, r24
    2bc4:	5d 2d       	mov	r21, r13
    2bc6:	60 2f       	mov	r22, r16
    2bc8:	76 2d       	mov	r23, r6
    2bca:	87 2d       	mov	r24, r7
    2bcc:	98 2d       	mov	r25, r8
    2bce:	0e 94 1b 23 	call	0x4636	; 0x4636 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2bd2:	88 23       	and	r24, r24
    2bd4:	49 f0       	breq	.+18     	; 0x2be8 <write_time+0xca>
		strcpy(res, "Failed to set time");
    2bd6:	23 e1       	ldi	r18, 0x13	; 19
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	45 e2       	ldi	r20, 0x25	; 37
    2bdc:	53 e0       	ldi	r21, 0x03	; 3
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	c7 01       	movw	r24, r14
    2be2:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
    2be6:	08 c0       	rjmp	.+16     	; 0x2bf8 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    2be8:	28 e0       	ldi	r18, 0x08	; 8
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	43 eb       	ldi	r20, 0xB3	; 179
    2bee:	52 e0       	ldi	r21, 0x02	; 2
    2bf0:	60 e0       	ldi	r22, 0x00	; 0
    2bf2:	c7 01       	movw	r24, r14
    2bf4:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
	return true;
}
    2bf8:	81 2f       	mov	r24, r17
    2bfa:	26 96       	adiw	r28, 0x06	; 6
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	1f 91       	pop	r17
    2c0c:	0f 91       	pop	r16
    2c0e:	ff 90       	pop	r15
    2c10:	ef 90       	pop	r14
    2c12:	df 90       	pop	r13
    2c14:	8f 90       	pop	r8
    2c16:	7f 90       	pop	r7
    2c18:	6f 90       	pop	r6
    2c1a:	08 95       	ret

Disassembly of section .text.handle_read:

00001734 <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
    1734:	cf 92       	push	r12
    1736:	df 92       	push	r13
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	68 97       	sbiw	r28, 0x18	; 24
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	6b 01       	movw	r12, r22
    1756:	e8 2e       	mov	r14, r24
    1758:	f4 2e       	mov	r15, r20
    175a:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	ae 01       	movw	r20, r28
    1760:	4f 5f       	subi	r20, 0xFF	; 255
    1762:	5f 4f       	sbci	r21, 0xFF	; 255
    1764:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    1768:	18 2f       	mov	r17, r24
    176a:	88 23       	and	r24, r24
    176c:	09 f4       	brne	.+2      	; 0x1770 <handle_read+0x3c>
    176e:	23 c1       	rjmp	.+582    	; 0x19b6 <handle_read+0x282>
    1770:	8e 2d       	mov	r24, r14
    1772:	b6 01       	movw	r22, r12
    1774:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <count_parameters>
    1778:	82 30       	cpi	r24, 0x02	; 2
    177a:	09 f4       	brne	.+2      	; 0x177e <handle_read+0x4a>
    177c:	1b c1       	rjmp	.+566    	; 0x19b4 <handle_read+0x280>
	
	if (strcmp(par, RW_DEVEUI)==0)
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	6c 01       	movw	r12, r24
    1784:	20 e8       	ldi	r18, 0x80	; 128
    1786:	e2 2e       	mov	r14, r18
    1788:	28 e3       	ldi	r18, 0x38	; 56
    178a:	33 e0       	ldi	r19, 0x03	; 3
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	8e 2d       	mov	r24, r14
    1790:	b6 01       	movw	r22, r12
    1792:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1796:	89 2b       	or	r24, r25
    1798:	29 f4       	brne	.+10     	; 0x17a4 <handle_read+0x70>
	{
		EM_get_deveui(res);
    179a:	8f 2d       	mov	r24, r15
    179c:	90 2f       	mov	r25, r16
    179e:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <EM_get_deveui>
    17a2:	09 c1       	rjmp	.+530    	; 0x19b6 <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    17a4:	2f e3       	ldi	r18, 0x3F	; 63
    17a6:	33 e0       	ldi	r19, 0x03	; 3
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	8e 2d       	mov	r24, r14
    17ac:	b6 01       	movw	r22, r12
    17ae:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    17b2:	89 2b       	or	r24, r25
    17b4:	29 f4       	brne	.+10     	; 0x17c0 <handle_read+0x8c>
	{
		EM_get_appeui(res);
    17b6:	8f 2d       	mov	r24, r15
    17b8:	90 2f       	mov	r25, r16
    17ba:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <EM_get_appeui>
    17be:	fb c0       	rjmp	.+502    	; 0x19b6 <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    17c0:	26 e4       	ldi	r18, 0x46	; 70
    17c2:	33 e0       	ldi	r19, 0x03	; 3
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	8e 2d       	mov	r24, r14
    17c8:	b6 01       	movw	r22, r12
    17ca:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    17ce:	89 2b       	or	r24, r25
    17d0:	29 f4       	brne	.+10     	; 0x17dc <handle_read+0xa8>
	{
		EM_get_appkey(res);
    17d2:	8f 2d       	mov	r24, r15
    17d4:	90 2f       	mov	r25, r16
    17d6:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <EM_get_appkey>
    17da:	ed c0       	rjmp	.+474    	; 0x19b6 <handle_read+0x282>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    17dc:	2d e4       	ldi	r18, 0x4D	; 77
    17de:	33 e0       	ldi	r19, 0x03	; 3
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	8e 2d       	mov	r24, r14
    17e4:	b6 01       	movw	r22, r12
    17e6:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    17ea:	89 2b       	or	r24, r25
    17ec:	e1 f4       	brne	.+56     	; 0x1826 <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    17ee:	ce 01       	movw	r24, r28
    17f0:	45 96       	adiw	r24, 0x15	; 21
    17f2:	0e 94 31 30 	call	0x6062	; 0x6062 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    17f6:	88 8d       	ldd	r24, Y+24	; 0x18
    17f8:	8f 93       	push	r24
    17fa:	8f 89       	ldd	r24, Y+23	; 0x17
    17fc:	8f 93       	push	r24
    17fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1800:	8f 93       	push	r24
    1802:	8d 89       	ldd	r24, Y+21	; 0x15
    1804:	8f 93       	push	r24
    1806:	82 e5       	ldi	r24, 0x52	; 82
    1808:	93 e0       	ldi	r25, 0x03	; 3
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	af 93       	push	r26
    180e:	9f 93       	push	r25
    1810:	8f 93       	push	r24
    1812:	0f 93       	push	r16
    1814:	ff 92       	push	r15
    1816:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	c8 c0       	rjmp	.+400    	; 0x19b6 <handle_read+0x282>
	}
	else if(strcmp(par, RW_RRL)==0)
    1826:	27 e5       	ldi	r18, 0x57	; 87
    1828:	33 e0       	ldi	r19, 0x03	; 3
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	8e 2d       	mov	r24, r14
    182e:	b6 01       	movw	r22, r12
    1830:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1834:	89 2b       	or	r24, r25
    1836:	e1 f4       	brne	.+56     	; 0x1870 <handle_read+0x13c>
	{
		EM_get_RRL(&val);
    1838:	ce 01       	movw	r24, r28
    183a:	45 96       	adiw	r24, 0x15	; 21
    183c:	0e 94 40 30 	call	0x6080	; 0x6080 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    1840:	88 8d       	ldd	r24, Y+24	; 0x18
    1842:	8f 93       	push	r24
    1844:	8f 89       	ldd	r24, Y+23	; 0x17
    1846:	8f 93       	push	r24
    1848:	8e 89       	ldd	r24, Y+22	; 0x16
    184a:	8f 93       	push	r24
    184c:	8d 89       	ldd	r24, Y+21	; 0x15
    184e:	8f 93       	push	r24
    1850:	82 e5       	ldi	r24, 0x52	; 82
    1852:	93 e0       	ldi	r25, 0x03	; 3
    1854:	a0 e0       	ldi	r26, 0x00	; 0
    1856:	af 93       	push	r26
    1858:	9f 93       	push	r25
    185a:	8f 93       	push	r24
    185c:	0f 93       	push	r16
    185e:	ff 92       	push	r15
    1860:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	a3 c0       	rjmp	.+326    	; 0x19b6 <handle_read+0x282>
	}
	else if(strcmp(par, RW_VCC)==0)
    1870:	2c e5       	ldi	r18, 0x5C	; 92
    1872:	33 e0       	ldi	r19, 0x03	; 3
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	8e 2d       	mov	r24, r14
    1878:	b6 01       	movw	r22, r12
    187a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    187e:	89 2b       	or	r24, r25
    1880:	e1 f4       	brne	.+56     	; 0x18ba <handle_read+0x186>
	{
		EM_get_Vcc(&val);
    1882:	ce 01       	movw	r24, r28
    1884:	45 96       	adiw	r24, 0x15	; 21
    1886:	0e 94 4f 30 	call	0x609e	; 0x609e <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    188a:	88 8d       	ldd	r24, Y+24	; 0x18
    188c:	8f 93       	push	r24
    188e:	8f 89       	ldd	r24, Y+23	; 0x17
    1890:	8f 93       	push	r24
    1892:	8e 89       	ldd	r24, Y+22	; 0x16
    1894:	8f 93       	push	r24
    1896:	8d 89       	ldd	r24, Y+21	; 0x15
    1898:	8f 93       	push	r24
    189a:	82 e5       	ldi	r24, 0x52	; 82
    189c:	93 e0       	ldi	r25, 0x03	; 3
    189e:	a0 e0       	ldi	r26, 0x00	; 0
    18a0:	af 93       	push	r26
    18a2:	9f 93       	push	r25
    18a4:	8f 93       	push	r24
    18a6:	0f 93       	push	r16
    18a8:	ff 92       	push	r15
    18aa:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	7e c0       	rjmp	.+252    	; 0x19b6 <handle_read+0x282>
	}
	else if(strcmp(par, RW_COLS)==0)
    18ba:	21 e6       	ldi	r18, 0x61	; 97
    18bc:	33 e0       	ldi	r19, 0x03	; 3
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	8e 2d       	mov	r24, r14
    18c2:	b6 01       	movw	r22, r12
    18c4:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    18c8:	89 2b       	or	r24, r25
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <handle_read+0x1a2>
	{
		read_cols(res);
    18cc:	8f 2d       	mov	r24, r15
    18ce:	90 2f       	mov	r25, r16
    18d0:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <read_cols>
    18d4:	70 c0       	rjmp	.+224    	; 0x19b6 <handle_read+0x282>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    18d6:	26 e6       	ldi	r18, 0x66	; 102
    18d8:	33 e0       	ldi	r19, 0x03	; 3
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	8e 2d       	mov	r24, r14
    18de:	b6 01       	movw	r22, r12
    18e0:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    18e4:	89 2b       	or	r24, r25
    18e6:	a1 f4       	brne	.+40     	; 0x1910 <handle_read+0x1dc>
	{
		uint8_t val=EM_get_heat_up_time();
    18e8:	0e 94 c9 32 	call	0x6592	; 0x6592 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    18ec:	1f 92       	push	r1
    18ee:	8f 93       	push	r24
    18f0:	80 e7       	ldi	r24, 0x70	; 112
    18f2:	93 e0       	ldi	r25, 0x03	; 3
    18f4:	a0 e0       	ldi	r26, 0x00	; 0
    18f6:	af 93       	push	r26
    18f8:	9f 93       	push	r25
    18fa:	8f 93       	push	r24
    18fc:	0f 93       	push	r16
    18fe:	ff 92       	push	r15
    1900:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	53 c0       	rjmp	.+166    	; 0x19b6 <handle_read+0x282>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1910:	22 e8       	ldi	r18, 0x82	; 130
    1912:	33 e0       	ldi	r19, 0x03	; 3
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	8e 2d       	mov	r24, r14
    1918:	b6 01       	movw	r22, r12
    191a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    191e:	89 2b       	or	r24, r25
    1920:	a1 f4       	brne	.+40     	; 0x194a <handle_read+0x216>
	{
		uint16_t val=EM_get_air_pump_time();
    1922:	0e 94 d5 32 	call	0x65aa	; 0x65aa <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    1926:	9f 93       	push	r25
    1928:	8f 93       	push	r24
    192a:	8d e8       	ldi	r24, 0x8D	; 141
    192c:	93 e0       	ldi	r25, 0x03	; 3
    192e:	a0 e0       	ldi	r26, 0x00	; 0
    1930:	af 93       	push	r26
    1932:	9f 93       	push	r25
    1934:	8f 93       	push	r24
    1936:	0f 93       	push	r16
    1938:	ff 92       	push	r15
    193a:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	36 c0       	rjmp	.+108    	; 0x19b6 <handle_read+0x282>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    194a:	20 ea       	ldi	r18, 0xA0	; 160
    194c:	33 e0       	ldi	r19, 0x03	; 3
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	8e 2d       	mov	r24, r14
    1952:	b6 01       	movw	r22, r12
    1954:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1958:	89 2b       	or	r24, r25
    195a:	a1 f4       	brne	.+40     	; 0x1984 <handle_read+0x250>
	{
		uint8_t val=EM_get_sp_interval();
    195c:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1960:	1f 92       	push	r1
    1962:	8f 93       	push	r24
    1964:	8c ea       	ldi	r24, 0xAC	; 172
    1966:	93 e0       	ldi	r25, 0x03	; 3
    1968:	a0 e0       	ldi	r26, 0x00	; 0
    196a:	af 93       	push	r26
    196c:	9f 93       	push	r25
    196e:	8f 93       	push	r24
    1970:	0f 93       	push	r16
    1972:	ff 92       	push	r15
    1974:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	19 c0       	rjmp	.+50     	; 0x19b6 <handle_read+0x282>
	}
	else if(strcmp(par, RW_TIME)==0)
    1984:	2b ec       	ldi	r18, 0xCB	; 203
    1986:	33 e0       	ldi	r19, 0x03	; 3
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	8e 2d       	mov	r24, r14
    198c:	b6 01       	movw	r22, r12
    198e:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1992:	89 2b       	or	r24, r25
    1994:	29 f4       	brne	.+10     	; 0x19a0 <handle_read+0x26c>
	{
		read_time(res);
    1996:	8f 2d       	mov	r24, r15
    1998:	90 2f       	mov	r25, r16
    199a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <read_time>
    199e:	0b c0       	rjmp	.+22     	; 0x19b6 <handle_read+0x282>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    19a0:	26 e1       	ldi	r18, 0x16	; 22
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 ed       	ldi	r20, 0xD0	; 208
    19a6:	53 e0       	ldi	r21, 0x03	; 3
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	8f 2d       	mov	r24, r15
    19ac:	90 2f       	mov	r25, r16
    19ae:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <handle_read+0x282>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    19b4:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    19b6:	81 2f       	mov	r24, r17
    19b8:	68 96       	adiw	r28, 0x18	; 24
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	08 95       	ret

Disassembly of section .text.handle_write:

000019d6 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    19d6:	6f 92       	push	r6
    19d8:	7f 92       	push	r7
    19da:	8f 92       	push	r8
    19dc:	af 92       	push	r10
    19de:	bf 92       	push	r11
    19e0:	cf 92       	push	r12
    19e2:	df 92       	push	r13
    19e4:	ef 92       	push	r14
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	64 97       	sbiw	r28, 0x14	; 20
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	3b 01       	movw	r6, r22
    19fe:	88 2e       	mov	r8, r24
    1a00:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1a02:	21 e0       	ldi	r18, 0x01	; 1
    1a04:	ae 01       	movw	r20, r28
    1a06:	4f 5f       	subi	r20, 0xFF	; 255
    1a08:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0a:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    1a0e:	18 2f       	mov	r17, r24
    1a10:	88 23       	and	r24, r24
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <handle_write+0x40>
    1a14:	cd c0       	rjmp	.+410    	; 0x1bb0 <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1a16:	ce 01       	movw	r24, r28
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	6c 01       	movw	r12, r24
    1a1c:	20 e8       	ldi	r18, 0x80	; 128
    1a1e:	e2 2e       	mov	r14, r18
    1a20:	28 e3       	ldi	r18, 0x38	; 56
    1a22:	33 e0       	ldi	r19, 0x03	; 3
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	8e 2d       	mov	r24, r14
    1a28:	b6 01       	movw	r22, r12
    1a2a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1a2e:	89 2b       	or	r24, r25
    1a30:	39 f4       	brne	.+14     	; 0x1a40 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1a32:	a5 01       	movw	r20, r10
    1a34:	88 2d       	mov	r24, r8
    1a36:	b3 01       	movw	r22, r6
    1a38:	0e 94 71 20 	call	0x40e2	; 0x40e2 <write_deveui>
    1a3c:	18 2f       	mov	r17, r24
    1a3e:	b8 c0       	rjmp	.+368    	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1a40:	2f e3       	ldi	r18, 0x3F	; 63
    1a42:	33 e0       	ldi	r19, 0x03	; 3
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	8e 2d       	mov	r24, r14
    1a48:	b6 01       	movw	r22, r12
    1a4a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1a4e:	89 2b       	or	r24, r25
    1a50:	39 f4       	brne	.+14     	; 0x1a60 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1a52:	a5 01       	movw	r20, r10
    1a54:	88 2d       	mov	r24, r8
    1a56:	b3 01       	movw	r22, r6
    1a58:	0e 94 ad 20 	call	0x415a	; 0x415a <write_appeui>
    1a5c:	18 2f       	mov	r17, r24
    1a5e:	a8 c0       	rjmp	.+336    	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1a60:	26 e4       	ldi	r18, 0x46	; 70
    1a62:	33 e0       	ldi	r19, 0x03	; 3
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	8e 2d       	mov	r24, r14
    1a68:	b6 01       	movw	r22, r12
    1a6a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1a6e:	89 2b       	or	r24, r25
    1a70:	39 f4       	brne	.+14     	; 0x1a80 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1a72:	a5 01       	movw	r20, r10
    1a74:	88 2d       	mov	r24, r8
    1a76:	b3 01       	movw	r22, r6
    1a78:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <write_appkey>
    1a7c:	18 2f       	mov	r17, r24
    1a7e:	98 c0       	rjmp	.+304    	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1a80:	2d e4       	ldi	r18, 0x4D	; 77
    1a82:	33 e0       	ldi	r19, 0x03	; 3
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	8e 2d       	mov	r24, r14
    1a88:	b6 01       	movw	r22, r12
    1a8a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1a8e:	89 2b       	or	r24, r25
    1a90:	39 f4       	brne	.+14     	; 0x1aa0 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1a92:	a5 01       	movw	r20, r10
    1a94:	88 2d       	mov	r24, r8
    1a96:	b3 01       	movw	r22, r6
    1a98:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <write_PPM_factor>
    1a9c:	18 2f       	mov	r17, r24
    1a9e:	88 c0       	rjmp	.+272    	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1aa0:	27 e5       	ldi	r18, 0x57	; 87
    1aa2:	33 e0       	ldi	r19, 0x03	; 3
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	8e 2d       	mov	r24, r14
    1aa8:	b6 01       	movw	r22, r12
    1aaa:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1aae:	89 2b       	or	r24, r25
    1ab0:	39 f4       	brne	.+14     	; 0x1ac0 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1ab2:	a5 01       	movw	r20, r10
    1ab4:	88 2d       	mov	r24, r8
    1ab6:	b3 01       	movw	r22, r6
    1ab8:	0e 94 21 27 	call	0x4e42	; 0x4e42 <write_RRL>
    1abc:	18 2f       	mov	r17, r24
    1abe:	78 c0       	rjmp	.+240    	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1ac0:	2c e5       	ldi	r18, 0x5C	; 92
    1ac2:	33 e0       	ldi	r19, 0x03	; 3
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	8e 2d       	mov	r24, r14
    1ac8:	b6 01       	movw	r22, r12
    1aca:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1ace:	89 2b       	or	r24, r25
    1ad0:	39 f4       	brne	.+14     	; 0x1ae0 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1ad2:	a5 01       	movw	r20, r10
    1ad4:	88 2d       	mov	r24, r8
    1ad6:	b3 01       	movw	r22, r6
    1ad8:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <write_VCC>
    1adc:	18 2f       	mov	r17, r24
    1ade:	68 c0       	rjmp	.+208    	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    1ae0:	21 e6       	ldi	r18, 0x61	; 97
    1ae2:	33 e0       	ldi	r19, 0x03	; 3
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	8e 2d       	mov	r24, r14
    1ae8:	b6 01       	movw	r22, r12
    1aea:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1aee:	89 2b       	or	r24, r25
    1af0:	39 f4       	brne	.+14     	; 0x1b00 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1af2:	a5 01       	movw	r20, r10
    1af4:	88 2d       	mov	r24, r8
    1af6:	b3 01       	movw	r22, r6
    1af8:	0e 94 4a 12 	call	0x2494	; 0x2494 <write_cols>
    1afc:	18 2f       	mov	r17, r24
    1afe:	58 c0       	rjmp	.+176    	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1b00:	26 e6       	ldi	r18, 0x66	; 102
    1b02:	33 e0       	ldi	r19, 0x03	; 3
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	8e 2d       	mov	r24, r14
    1b08:	b6 01       	movw	r22, r12
    1b0a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1b0e:	89 2b       	or	r24, r25
    1b10:	39 f4       	brne	.+14     	; 0x1b20 <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    1b12:	a5 01       	movw	r20, r10
    1b14:	88 2d       	mov	r24, r8
    1b16:	b3 01       	movw	r22, r6
    1b18:	0e 94 6d 27 	call	0x4eda	; 0x4eda <write_heat_up>
    1b1c:	18 2f       	mov	r17, r24
    1b1e:	48 c0       	rjmp	.+144    	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1b20:	22 e8       	ldi	r18, 0x82	; 130
    1b22:	33 e0       	ldi	r19, 0x03	; 3
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	8e 2d       	mov	r24, r14
    1b28:	b6 01       	movw	r22, r12
    1b2a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1b2e:	89 2b       	or	r24, r25
    1b30:	39 f4       	brne	.+14     	; 0x1b40 <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1b32:	a5 01       	movw	r20, r10
    1b34:	88 2d       	mov	r24, r8
    1b36:	b3 01       	movw	r22, r6
    1b38:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <write_air_pump>
    1b3c:	18 2f       	mov	r17, r24
    1b3e:	38 c0       	rjmp	.+112    	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1b40:	20 ea       	ldi	r18, 0xA0	; 160
    1b42:	33 e0       	ldi	r19, 0x03	; 3
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	8e 2d       	mov	r24, r14
    1b48:	b6 01       	movw	r22, r12
    1b4a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1b4e:	89 2b       	or	r24, r25
    1b50:	39 f4       	brne	.+14     	; 0x1b60 <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1b52:	a5 01       	movw	r20, r10
    1b54:	88 2d       	mov	r24, r8
    1b56:	b3 01       	movw	r22, r6
    1b58:	0e 94 93 27 	call	0x4f26	; 0x4f26 <write_sp_interval>
    1b5c:	18 2f       	mov	r17, r24
    1b5e:	28 c0       	rjmp	.+80     	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1b60:	26 ee       	ldi	r18, 0xE6	; 230
    1b62:	33 e0       	ldi	r19, 0x03	; 3
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	8e 2d       	mov	r24, r14
    1b68:	b6 01       	movw	r22, r12
    1b6a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1b6e:	89 2b       	or	r24, r25
    1b70:	39 f4       	brne	.+14     	; 0x1b80 <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1b72:	a5 01       	movw	r20, r10
    1b74:	88 2d       	mov	r24, r8
    1b76:	b3 01       	movw	r22, r6
    1b78:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <write_reset>
    1b7c:	18 2f       	mov	r17, r24
    1b7e:	18 c0       	rjmp	.+48     	; 0x1bb0 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1b80:	2b ec       	ldi	r18, 0xCB	; 203
    1b82:	33 e0       	ldi	r19, 0x03	; 3
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	8e 2d       	mov	r24, r14
    1b88:	b6 01       	movw	r22, r12
    1b8a:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    1b8e:	89 2b       	or	r24, r25
    1b90:	39 f4       	brne	.+14     	; 0x1ba0 <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1b92:	a5 01       	movw	r20, r10
    1b94:	88 2d       	mov	r24, r8
    1b96:	b3 01       	movw	r22, r6
    1b98:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <write_time>
    1b9c:	18 2f       	mov	r17, r24
    1b9e:	08 c0       	rjmp	.+16     	; 0x1bb0 <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1ba0:	26 e1       	ldi	r18, 0x16	; 22
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 ed       	ldi	r20, 0xD0	; 208
    1ba6:	53 e0       	ldi	r21, 0x03	; 3
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	c5 01       	movw	r24, r10
    1bac:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
	}
	
}
    1bb0:	81 2f       	mov	r24, r17
    1bb2:	64 96       	adiw	r28, 0x14	; 20
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	8f 90       	pop	r8
    1bd0:	7f 90       	pop	r7
    1bd2:	6f 90       	pop	r6
    1bd4:	08 95       	ret

Disassembly of section .text.handle_methane:

000027fe <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    27fe:	cf 92       	push	r12
    2800:	df 92       	push	r13
    2802:	ef 92       	push	r14
    2804:	ff 92       	push	r15
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	00 d0       	rcall	.+0      	; 0x2810 <handle_methane+0x12>
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	f4 2e       	mov	r15, r20
    2816:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    2818:	22 e0       	ldi	r18, 0x02	; 2
    281a:	44 e1       	ldi	r20, 0x14	; 20
    281c:	5f e0       	ldi	r21, 0x0F	; 15
    281e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    2822:	18 2f       	mov	r17, r24
    2824:	88 23       	and	r24, r24
    2826:	09 f4       	brne	.+2      	; 0x282a <handle_methane+0x2c>
    2828:	6b c0       	rjmp	.+214    	; 0x2900 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    282a:	84 e1       	ldi	r24, 0x14	; 20
    282c:	9f e0       	ldi	r25, 0x0F	; 15
    282e:	6c 01       	movw	r12, r24
    2830:	20 e8       	ldi	r18, 0x80	; 128
    2832:	e2 2e       	mov	r14, r18
    2834:	28 e9       	ldi	r18, 0x98	; 152
    2836:	34 e0       	ldi	r19, 0x04	; 4
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	8e 2d       	mov	r24, r14
    283c:	b6 01       	movw	r22, r12
    283e:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    2842:	89 2b       	or	r24, r25
    2844:	79 f4       	brne	.+30     	; 0x2864 <handle_methane+0x66>
		PM_HAL_meth_power_init();
    2846:	0e 94 1d 32 	call	0x643a	; 0x643a <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	0e 94 77 31 	call	0x62ee	; 0x62ee <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    2850:	28 e1       	ldi	r18, 0x18	; 24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	4b e9       	ldi	r20, 0x9B	; 155
    2856:	54 e0       	ldi	r21, 0x04	; 4
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	8f 2d       	mov	r24, r15
    285c:	90 2f       	mov	r25, r16
    285e:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
    2862:	4e c0       	rjmp	.+156    	; 0x2900 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    2864:	23 eb       	ldi	r18, 0xB3	; 179
    2866:	34 e0       	ldi	r19, 0x04	; 4
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	8e 2d       	mov	r24, r14
    286c:	b6 01       	movw	r22, r12
    286e:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    2872:	89 2b       	or	r24, r25
    2874:	79 f4       	brne	.+30     	; 0x2894 <handle_methane+0x96>
		PM_HAL_meth_power_init();
    2876:	0e 94 1d 32 	call	0x643a	; 0x643a <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	0e 94 77 31 	call	0x62ee	; 0x62ee <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    2880:	29 e1       	ldi	r18, 0x19	; 25
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	47 eb       	ldi	r20, 0xB7	; 183
    2886:	54 e0       	ldi	r21, 0x04	; 4
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	8f 2d       	mov	r24, r15
    288c:	90 2f       	mov	r25, r16
    288e:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
    2892:	36 c0       	rjmp	.+108    	; 0x2900 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    2894:	20 ed       	ldi	r18, 0xD0	; 208
    2896:	34 e0       	ldi	r19, 0x04	; 4
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	8e 2d       	mov	r24, r14
    289c:	b6 01       	movw	r22, r12
    289e:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    28a2:	89 2b       	or	r24, r25
    28a4:	21 f5       	brne	.+72     	; 0x28ee <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    28a6:	ce 01       	movw	r24, r28
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <ADC_get_value>
    28ae:	88 23       	and	r24, r24
    28b0:	51 f0       	breq	.+20     	; 0x28c6 <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    28b2:	28 e1       	ldi	r18, 0x18	; 24
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	45 ed       	ldi	r20, 0xD5	; 213
    28b8:	54 e0       	ldi	r21, 0x04	; 4
    28ba:	60 e0       	ldi	r22, 0x00	; 0
    28bc:	8f 2d       	mov	r24, r15
    28be:	90 2f       	mov	r25, r16
    28c0:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
    28c4:	1d c0       	rjmp	.+58     	; 0x2900 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	8f 93       	push	r24
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	8f 93       	push	r24
    28ce:	8d ee       	ldi	r24, 0xED	; 237
    28d0:	94 e0       	ldi	r25, 0x04	; 4
    28d2:	a0 e0       	ldi	r26, 0x00	; 0
    28d4:	af 93       	push	r26
    28d6:	9f 93       	push	r25
    28d8:	8f 93       	push	r24
    28da:	0f 93       	push	r16
    28dc:	ff 92       	push	r15
    28de:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	09 c0       	rjmp	.+18     	; 0x2900 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    28ee:	26 e1       	ldi	r18, 0x16	; 22
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	44 ef       	ldi	r20, 0xF4	; 244
    28f4:	54 e0       	ldi	r21, 0x04	; 4
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	8f 2d       	mov	r24, r15
    28fa:	90 2f       	mov	r25, r16
    28fc:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
	}
	return false;
}
    2900:	81 2f       	mov	r24, r17
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	ff 90       	pop	r15
    2910:	ef 90       	pop	r14
    2912:	df 90       	pop	r13
    2914:	cf 90       	pop	r12
    2916:	08 95       	ret

Disassembly of section .text.handle_co2:

000038e6 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    38e6:	ff 92       	push	r15
    38e8:	0f 93       	push	r16
    38ea:	1f 93       	push	r17
    38ec:	cf 93       	push	r28
    38ee:	df 93       	push	r29
    38f0:	00 d0       	rcall	.+0      	; 0x38f2 <handle_co2+0xc>
    38f2:	cd b7       	in	r28, 0x3d	; 61
    38f4:	de b7       	in	r29, 0x3e	; 62
    38f6:	f4 2e       	mov	r15, r20
    38f8:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    38fa:	22 e0       	ldi	r18, 0x02	; 2
    38fc:	44 e1       	ldi	r20, 0x14	; 20
    38fe:	5f e0       	ldi	r21, 0x0F	; 15
    3900:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    3904:	18 2f       	mov	r17, r24
    3906:	88 23       	and	r24, r24
    3908:	b9 f1       	breq	.+110    	; 0x3978 <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    390a:	64 e1       	ldi	r22, 0x14	; 20
    390c:	7f e0       	ldi	r23, 0x0F	; 15
    390e:	80 e8       	ldi	r24, 0x80	; 128
    3910:	20 ed       	ldi	r18, 0xD0	; 208
    3912:	34 e0       	ldi	r19, 0x04	; 4
    3914:	40 e0       	ldi	r20, 0x00	; 0
    3916:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    391a:	89 2b       	or	r24, r25
    391c:	21 f5       	brne	.+72     	; 0x3966 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <SCD30_get_reading>
    3926:	88 23       	and	r24, r24
    3928:	51 f0       	breq	.+20     	; 0x393e <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    392a:	28 e1       	ldi	r18, 0x18	; 24
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	45 ed       	ldi	r20, 0xD5	; 213
    3930:	54 e0       	ldi	r21, 0x04	; 4
    3932:	60 e0       	ldi	r22, 0x00	; 0
    3934:	8f 2d       	mov	r24, r15
    3936:	90 2f       	mov	r25, r16
    3938:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
    393c:	1d c0       	rjmp	.+58     	; 0x3978 <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    393e:	8a 81       	ldd	r24, Y+2	; 0x02
    3940:	8f 93       	push	r24
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	8f 93       	push	r24
    3946:	8d ee       	ldi	r24, 0xED	; 237
    3948:	94 e0       	ldi	r25, 0x04	; 4
    394a:	a0 e0       	ldi	r26, 0x00	; 0
    394c:	af 93       	push	r26
    394e:	9f 93       	push	r25
    3950:	8f 93       	push	r24
    3952:	0f 93       	push	r16
    3954:	ff 92       	push	r15
    3956:	0e 94 44 29 	call	0x5288	; 0x5288 <sprintf>
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	09 c0       	rjmp	.+18     	; 0x3978 <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3966:	26 e1       	ldi	r18, 0x16	; 22
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	44 ef       	ldi	r20, 0xF4	; 244
    396c:	54 e0       	ldi	r21, 0x04	; 4
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	8f 2d       	mov	r24, r15
    3972:	90 2f       	mov	r25, r16
    3974:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
	}
}
    3978:	81 2f       	mov	r24, r17
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	df 91       	pop	r29
    3980:	cf 91       	pop	r28
    3982:	1f 91       	pop	r17
    3984:	0f 91       	pop	r16
    3986:	ff 90       	pop	r15
    3988:	08 95       	ret

Disassembly of section .text.handle_pump:

0000398a <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    398a:	cf 92       	push	r12
    398c:	df 92       	push	r13
    398e:	ef 92       	push	r14
    3990:	0f 93       	push	r16
    3992:	1f 93       	push	r17
    3994:	cf 93       	push	r28
    3996:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    3998:	22 e0       	ldi	r18, 0x02	; 2
    399a:	44 e1       	ldi	r20, 0x14	; 20
    399c:	5f e0       	ldi	r21, 0x0F	; 15
    399e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    39a2:	c8 2f       	mov	r28, r24
    39a4:	88 23       	and	r24, r24
    39a6:	d9 f1       	breq	.+118    	; 0x3a1e <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    39a8:	84 e1       	ldi	r24, 0x14	; 20
    39aa:	9f e0       	ldi	r25, 0x0F	; 15
    39ac:	6c 01       	movw	r12, r24
    39ae:	20 e8       	ldi	r18, 0x80	; 128
    39b0:	e2 2e       	mov	r14, r18
    39b2:	28 e9       	ldi	r18, 0x98	; 152
    39b4:	34 e0       	ldi	r19, 0x04	; 4
    39b6:	40 e0       	ldi	r20, 0x00	; 0
    39b8:	8e 2d       	mov	r24, r14
    39ba:	b6 01       	movw	r22, r12
    39bc:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    39c0:	89 2b       	or	r24, r25
    39c2:	71 f4       	brne	.+28     	; 0x39e0 <handle_pump+0x56>
		PM_HAL_BC_power_init();
    39c4:	0e 94 2b 32 	call	0x6456	; 0x6456 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	0e 94 8b 31 	call	0x6316	; 0x6316 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    39ce:	25 e1       	ldi	r18, 0x15	; 21
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	4a e0       	ldi	r20, 0x0A	; 10
    39d4:	55 e0       	ldi	r21, 0x05	; 5
    39d6:	60 e0       	ldi	r22, 0x00	; 0
    39d8:	c8 01       	movw	r24, r16
    39da:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
    39de:	1f c0       	rjmp	.+62     	; 0x3a1e <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    39e0:	23 eb       	ldi	r18, 0xB3	; 179
    39e2:	34 e0       	ldi	r19, 0x04	; 4
    39e4:	40 e0       	ldi	r20, 0x00	; 0
    39e6:	8e 2d       	mov	r24, r14
    39e8:	b6 01       	movw	r22, r12
    39ea:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    39ee:	89 2b       	or	r24, r25
    39f0:	71 f4       	brne	.+28     	; 0x3a0e <handle_pump+0x84>
		PM_HAL_BC_power_init();
    39f2:	0e 94 2b 32 	call	0x6456	; 0x6456 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	0e 94 8b 31 	call	0x6316	; 0x6316 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    39fc:	26 e1       	ldi	r18, 0x16	; 22
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	4f e1       	ldi	r20, 0x1F	; 31
    3a02:	55 e0       	ldi	r21, 0x05	; 5
    3a04:	60 e0       	ldi	r22, 0x00	; 0
    3a06:	c8 01       	movw	r24, r16
    3a08:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
    3a0c:	08 c0       	rjmp	.+16     	; 0x3a1e <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3a0e:	26 e1       	ldi	r18, 0x16	; 22
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	44 ef       	ldi	r20, 0xF4	; 244
    3a14:	54 e0       	ldi	r21, 0x04	; 4
    3a16:	60 e0       	ldi	r22, 0x00	; 0
    3a18:	c8 01       	movw	r24, r16
    3a1a:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
	}
}
    3a1e:	8c 2f       	mov	r24, r28
    3a20:	cf 91       	pop	r28
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	ef 90       	pop	r14
    3a28:	df 90       	pop	r13
    3a2a:	cf 90       	pop	r12
    3a2c:	08 95       	ret

Disassembly of section .text.handle_sample:

0000362a <handle_sample>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    362a:	6f 92       	push	r6
    362c:	7f 92       	push	r7
    362e:	8f 92       	push	r8
    3630:	cf 92       	push	r12
    3632:	df 92       	push	r13
    3634:	ef 92       	push	r14
    3636:	0f 93       	push	r16
    3638:	1f 93       	push	r17
    363a:	cf 93       	push	r28
    363c:	3b 01       	movw	r6, r22
    363e:	88 2e       	mov	r8, r24
    3640:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    3642:	21 e0       	ldi	r18, 0x01	; 1
    3644:	44 e1       	ldi	r20, 0x14	; 20
    3646:	5f e0       	ldi	r21, 0x0F	; 15
    3648:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <get_parameter>
    364c:	c8 2f       	mov	r28, r24
    364e:	88 23       	and	r24, r24
    3650:	e9 f1       	breq	.+122    	; 0x36cc <handle_sample+0xa2>
	
	if(strcmp(par, S_METH)==0){
    3652:	84 e1       	ldi	r24, 0x14	; 20
    3654:	9f e0       	ldi	r25, 0x0F	; 15
    3656:	6c 01       	movw	r12, r24
    3658:	20 e8       	ldi	r18, 0x80	; 128
    365a:	e2 2e       	mov	r14, r18
    365c:	25 e3       	ldi	r18, 0x35	; 53
    365e:	35 e0       	ldi	r19, 0x05	; 5
    3660:	40 e0       	ldi	r20, 0x00	; 0
    3662:	8e 2d       	mov	r24, r14
    3664:	b6 01       	movw	r22, r12
    3666:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    366a:	89 2b       	or	r24, r25
    366c:	39 f4       	brne	.+14     	; 0x367c <handle_sample+0x52>
		return handle_methane(cmd, res);
    366e:	a8 01       	movw	r20, r16
    3670:	88 2d       	mov	r24, r8
    3672:	b3 01       	movw	r22, r6
    3674:	0e 94 ff 13 	call	0x27fe	; 0x27fe <handle_methane>
    3678:	c8 2f       	mov	r28, r24
    367a:	28 c0       	rjmp	.+80     	; 0x36cc <handle_sample+0xa2>
	}else if(strcmp(par, S_CO2)==0){
    367c:	2a e3       	ldi	r18, 0x3A	; 58
    367e:	35 e0       	ldi	r19, 0x05	; 5
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	8e 2d       	mov	r24, r14
    3684:	b6 01       	movw	r22, r12
    3686:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    368a:	89 2b       	or	r24, r25
    368c:	39 f4       	brne	.+14     	; 0x369c <handle_sample+0x72>
		return handle_co2(cmd, res);
    368e:	a8 01       	movw	r20, r16
    3690:	88 2d       	mov	r24, r8
    3692:	b3 01       	movw	r22, r6
    3694:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <handle_co2>
    3698:	c8 2f       	mov	r28, r24
    369a:	18 c0       	rjmp	.+48     	; 0x36cc <handle_sample+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    369c:	2e e3       	ldi	r18, 0x3E	; 62
    369e:	35 e0       	ldi	r19, 0x05	; 5
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	8e 2d       	mov	r24, r14
    36a4:	b6 01       	movw	r22, r12
    36a6:	0e 94 0f 2a 	call	0x541e	; 0x541e <strcmp>
    36aa:	89 2b       	or	r24, r25
    36ac:	39 f4       	brne	.+14     	; 0x36bc <handle_sample+0x92>
		return handle_pump(cmd, res);
    36ae:	a8 01       	movw	r20, r16
    36b0:	88 2d       	mov	r24, r8
    36b2:	b3 01       	movw	r22, r6
    36b4:	0e 94 c5 1c 	call	0x398a	; 0x398a <handle_pump>
    36b8:	c8 2f       	mov	r28, r24
    36ba:	08 c0       	rjmp	.+16     	; 0x36cc <handle_sample+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    36bc:	26 e1       	ldi	r18, 0x16	; 22
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	44 ef       	ldi	r20, 0xF4	; 244
    36c2:	54 e0       	ldi	r21, 0x04	; 4
    36c4:	60 e0       	ldi	r22, 0x00	; 0
    36c6:	c8 01       	movw	r24, r16
    36c8:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <memcpy>
		return true;
	}
}
    36cc:	8c 2f       	mov	r24, r28
    36ce:	cf 91       	pop	r28
    36d0:	1f 91       	pop	r17
    36d2:	0f 91       	pop	r16
    36d4:	ef 90       	pop	r14
    36d6:	df 90       	pop	r13
    36d8:	cf 90       	pop	r12
    36da:	8f 90       	pop	r8
    36dc:	7f 90       	pop	r7
    36de:	6f 90       	pop	r6
    36e0:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00005dfc <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    5dfc:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    5e00:	0e 94 16 32 	call	0x642c	; 0x642c <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    5e04:	81 e0       	ldi	r24, 0x01	; 1
    5e06:	0e 94 6d 31 	call	0x62da	; 0x62da <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    5e0a:	0e 94 24 32 	call	0x6448	; 0x6448 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    5e0e:	81 e0       	ldi	r24, 0x01	; 1
    5e10:	0e 94 81 31 	call	0x6302	; 0x6302 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    5e14:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    5e18:	88 23       	and	r24, r24
    5e1a:	11 f0       	breq	.+4      	; 0x5e20 <init_methane_SCD30+0x24>
    5e1c:	80 e0       	ldi	r24, 0x00	; 0
    5e1e:	08 95       	ret
	return true;
    5e20:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    5e22:	08 95       	ret

Disassembly of section .text.count_parameters:

00004b34 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    4b34:	6f 92       	push	r6
    4b36:	7f 92       	push	r7
    4b38:	8f 92       	push	r8
    4b3a:	cf 92       	push	r12
    4b3c:	df 92       	push	r13
    4b3e:	ef 92       	push	r14
    4b40:	3b 01       	movw	r6, r22
    4b42:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    4b44:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    4b48:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4b4a:	20 e0       	ldi	r18, 0x00	; 0
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    4b4e:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    4b50:	10 c0       	rjmp	.+32     	; 0x4b72 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    4b52:	e8 2c       	mov	r14, r8
    4b54:	63 01       	movw	r12, r6
    4b56:	c2 0e       	add	r12, r18
    4b58:	d3 1e       	adc	r13, r19
    4b5a:	e1 1c       	adc	r14, r1
    4b5c:	37 fd       	sbrc	r19, 7
    4b5e:	ea 94       	dec	r14
    4b60:	f6 01       	movw	r30, r12
    4b62:	94 91       	lpm	r25, Z
    4b64:	e7 fc       	sbrc	r14, 7
    4b66:	90 81       	ld	r25, Z
    4b68:	90 32       	cpi	r25, 0x20	; 32
    4b6a:	09 f4       	brne	.+2      	; 0x4b6e <count_parameters+0x3a>
			cnt++;
    4b6c:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4b6e:	2f 5f       	subi	r18, 0xFF	; 255
    4b70:	3f 4f       	sbci	r19, 0xFF	; 255
    4b72:	26 17       	cp	r18, r22
    4b74:	37 07       	cpc	r19, r23
    4b76:	68 f3       	brcs	.-38     	; 0x4b52 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    4b78:	ef 90       	pop	r14
    4b7a:	df 90       	pop	r13
    4b7c:	cf 90       	pop	r12
    4b7e:	8f 90       	pop	r8
    4b80:	7f 90       	pop	r7
    4b82:	6f 90       	pop	r6
    4b84:	08 95       	ret

Disassembly of section .text.par_index:

0000441a <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    441a:	cf 92       	push	r12
    441c:	df 92       	push	r13
    441e:	ef 92       	push	r14
    4420:	0f 93       	push	r16
    4422:	1f 93       	push	r17
    4424:	cf 93       	push	r28
    4426:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4428:	44 23       	and	r20, r20
    442a:	29 f1       	breq	.+74     	; 0x4476 <par_index+0x5c>
    442c:	04 2f       	mov	r16, r20
    442e:	6b 01       	movw	r12, r22
    4430:	e8 2e       	mov	r14, r24
    4432:	c0 e0       	ldi	r28, 0x00	; 0
    4434:	d0 e0       	ldi	r29, 0x00	; 0
    4436:	10 e0       	ldi	r17, 0x00	; 0
    4438:	14 c0       	rjmp	.+40     	; 0x4462 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    443a:	ae 2d       	mov	r26, r14
    443c:	c6 01       	movw	r24, r12
    443e:	8c 0f       	add	r24, r28
    4440:	9d 1f       	adc	r25, r29
    4442:	a1 1d       	adc	r26, r1
    4444:	d7 fd       	sbrc	r29, 7
    4446:	aa 95       	dec	r26
    4448:	fc 01       	movw	r30, r24
    444a:	84 91       	lpm	r24, Z
    444c:	a7 fd       	sbrc	r26, 7
    444e:	80 81       	ld	r24, Z
    4450:	80 32       	cpi	r24, 0x20	; 32
    4452:	31 f4       	brne	.+12     	; 0x4460 <par_index+0x46>
			cnt++;
    4454:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    4456:	01 13       	cpse	r16, r17
    4458:	03 c0       	rjmp	.+6      	; 0x4460 <par_index+0x46>
				return i+1;
    445a:	ce 01       	movw	r24, r28
    445c:	01 96       	adiw	r24, 0x01	; 1
    445e:	0d c0       	rjmp	.+26     	; 0x447a <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    4460:	21 96       	adiw	r28, 0x01	; 1
    4462:	8e 2d       	mov	r24, r14
    4464:	b6 01       	movw	r22, r12
    4466:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    446a:	c8 17       	cp	r28, r24
    446c:	d9 07       	cpc	r29, r25
    446e:	28 f3       	brcs	.-54     	; 0x443a <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    4470:	80 e0       	ldi	r24, 0x00	; 0
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	02 c0       	rjmp	.+4      	; 0x447a <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	1f 91       	pop	r17
    4480:	0f 91       	pop	r16
    4482:	ef 90       	pop	r14
    4484:	df 90       	pop	r13
    4486:	cf 90       	pop	r12
    4488:	08 95       	ret

Disassembly of section .text.get_parameter:

00003c9e <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    3c9e:	8f 92       	push	r8
    3ca0:	9f 92       	push	r9
    3ca2:	af 92       	push	r10
    3ca4:	cf 92       	push	r12
    3ca6:	df 92       	push	r13
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	6b 01       	movw	r12, r22
    3cb6:	e8 2e       	mov	r14, r24
    3cb8:	ea 01       	movw	r28, r20
    3cba:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    3cbc:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <count_parameters>
	if(pars<parNo) return false;
    3cc0:	8f 15       	cp	r24, r15
    3cc2:	58 f1       	brcs	.+86     	; 0x3d1a <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    3cc4:	8e 2d       	mov	r24, r14
    3cc6:	b6 01       	movw	r22, r12
    3cc8:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    3ccc:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    3cce:	4f 2d       	mov	r20, r15
    3cd0:	8e 2d       	mov	r24, r14
    3cd2:	b6 01       	movw	r22, r12
    3cd4:	0e 94 0d 22 	call	0x441a	; 0x441a <par_index>
	uint8_t parLen=0;
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    3cda:	15 c0       	rjmp	.+42     	; 0x3d06 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    3cdc:	46 01       	movw	r8, r12
    3cde:	ae 2c       	mov	r10, r14
    3ce0:	82 0e       	add	r8, r18
    3ce2:	93 1e       	adc	r9, r19
    3ce4:	a1 1c       	adc	r10, r1
    3ce6:	37 fd       	sbrc	r19, 7
    3ce8:	aa 94       	dec	r10
    3cea:	4a 2d       	mov	r20, r10
    3cec:	94 01       	movw	r18, r8
    3cee:	f4 01       	movw	r30, r8
    3cf0:	24 91       	lpm	r18, Z
    3cf2:	47 fd       	sbrc	r20, 7
    3cf4:	20 81       	ld	r18, Z
    3cf6:	20 32       	cpi	r18, 0x20	; 32
    3cf8:	59 f0       	breq	.+22     	; 0x3d10 <get_parameter+0x72>
		par[parLen++]=src[i];
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e9 0f       	add	r30, r25
    3cfe:	f1 1d       	adc	r31, r1
    3d00:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3d02:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    3d04:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3d06:	28 2f       	mov	r18, r24
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	20 17       	cp	r18, r16
    3d0c:	31 07       	cpc	r19, r17
    3d0e:	30 f3       	brcs	.-52     	; 0x3cdc <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    3d10:	c9 0f       	add	r28, r25
    3d12:	d1 1d       	adc	r29, r1
    3d14:	18 82       	st	Y, r1
	
	return true;
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	01 c0       	rjmp	.+2      	; 0x3d1c <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	1f 91       	pop	r17
    3d22:	0f 91       	pop	r16
    3d24:	ff 90       	pop	r15
    3d26:	ef 90       	pop	r14
    3d28:	df 90       	pop	r13
    3d2a:	cf 90       	pop	r12
    3d2c:	af 90       	pop	r10
    3d2e:	9f 90       	pop	r9
    3d30:	8f 90       	pop	r8
    3d32:	08 95       	ret

Disassembly of section .text.decode_stage_response:

000062ae <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    62ae:	88 23       	and	r24, r24
    62b0:	19 f0       	breq	.+6      	; 0x62b8 <decode_stage_response+0xa>
    62b2:	81 30       	cpi	r24, 0x01	; 1
    62b4:	29 f0       	breq	.+10     	; 0x62c0 <decode_stage_response+0x12>
    62b6:	02 c0       	rjmp	.+4      	; 0x62bc <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    62b8:	81 e1       	ldi	r24, 0x11	; 17
    62ba:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    62bc:	86 e1       	ldi	r24, 0x16	; 22
    62be:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    62c0:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    62c2:	08 95       	ret

Disassembly of section .text.decode_join_response:

000061a2 <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    61a2:	82 30       	cpi	r24, 0x02	; 2
    61a4:	51 f0       	breq	.+20     	; 0x61ba <decode_join_response+0x18>
    61a6:	83 30       	cpi	r24, 0x03	; 3
    61a8:	21 f0       	breq	.+8      	; 0x61b2 <decode_join_response+0x10>
    61aa:	81 11       	cpse	r24, r1
    61ac:	04 c0       	rjmp	.+8      	; 0x61b6 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    61ae:	83 e0       	ldi	r24, 0x03	; 3
    61b0:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    61b2:	85 e0       	ldi	r24, 0x05	; 5
    61b4:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    61b6:	86 e1       	ldi	r24, 0x16	; 22
    61b8:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    61ba:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    61bc:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

000060bc <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    60bc:	82 30       	cpi	r24, 0x02	; 2
    60be:	49 f0       	breq	.+18     	; 0x60d2 <decode_header_tail_response+0x16>
    60c0:	18 f4       	brcc	.+6      	; 0x60c8 <decode_header_tail_response+0xc>
    60c2:	88 23       	and	r24, r24
    60c4:	41 f0       	breq	.+16     	; 0x60d6 <decode_header_tail_response+0x1a>
    60c6:	03 c0       	rjmp	.+6      	; 0x60ce <decode_header_tail_response+0x12>
    60c8:	84 50       	subi	r24, 0x04	; 4
    60ca:	82 30       	cpi	r24, 0x02	; 2
    60cc:	20 f0       	brcs	.+8      	; 0x60d6 <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    60ce:	86 e1       	ldi	r24, 0x16	; 22
    60d0:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    60d2:	84 2f       	mov	r24, r20
    60d4:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    60d6:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    60d8:	08 95       	ret

Disassembly of section .text.read_eeprom:

000048d6 <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    48d6:	89 e3       	ldi	r24, 0x39	; 57
    48d8:	9f e0       	ldi	r25, 0x0F	; 15
    48da:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <EM_get_deveui>
	EM_get_appeui(appeui);
    48de:	88 e2       	ldi	r24, 0x28	; 40
    48e0:	9f e0       	ldi	r25, 0x0F	; 15
    48e2:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <EM_get_appeui>
	EM_get_appkey(appkey);
    48e6:	83 ef       	ldi	r24, 0xF3	; 243
    48e8:	9e e0       	ldi	r25, 0x0E	; 14
    48ea:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    48ee:	63 e2       	ldi	r22, 0x23	; 35
    48f0:	80 ed       	ldi	r24, 0xD0	; 208
    48f2:	9e e0       	ldi	r25, 0x0E	; 14
    48f4:	0e 94 06 32 	call	0x640c	; 0x640c <EM_get_collections>
	EM_get_Vcc(&vccx);
    48f8:	83 e7       	ldi	r24, 0x73	; 115
    48fa:	9f e0       	ldi	r25, 0x0F	; 15
    48fc:	0e 94 4f 30 	call	0x609e	; 0x609e <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    4900:	8f e6       	ldi	r24, 0x6F	; 111
    4902:	9f e0       	ldi	r25, 0x0F	; 15
    4904:	0e 94 40 30 	call	0x6080	; 0x6080 <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    4908:	8b e6       	ldi	r24, 0x6B	; 107
    490a:	9f e0       	ldi	r25, 0x0F	; 15
    490c:	0e 94 31 30 	call	0x6062	; 0x6062 <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    4910:	0e 94 c9 32 	call	0x6592	; 0x6592 <EM_get_heat_up_time>
    4914:	80 93 a6 0f 	sts	0x0FA6, r24	; 0x800fa6 <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    4918:	0e 94 d5 32 	call	0x65aa	; 0x65aa <EM_get_air_pump_time>
    491c:	90 93 90 0f 	sts	0x0F90, r25	; 0x800f90 <airPumpTime+0x1>
    4920:	80 93 8f 0f 	sts	0x0F8F, r24	; 0x800f8f <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    4924:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <EM_get_sp_interval>
    4928:	80 93 a5 0f 	sts	0x0FA5, r24	; 0x800fa5 <samplingProcessInterval>
	return true;
}
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	08 95       	ret

Disassembly of section .text.join_lora:

000063c6 <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    63c6:	43 ef       	ldi	r20, 0xF3	; 243
    63c8:	5e e0       	ldi	r21, 0x0E	; 14
    63ca:	68 e2       	ldi	r22, 0x28	; 40
    63cc:	7f e0       	ldi	r23, 0x0F	; 15
    63ce:	89 e3       	ldi	r24, 0x39	; 57
    63d0:	9f e0       	ldi	r25, 0x0F	; 15
    63d2:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <LM_join_network>
}
    63d6:	08 95       	ret

Disassembly of section .text.set_wakeup:

00006666 <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
    6666:	80 91 a5 0f 	lds	r24, 0x0FA5	; 0x800fa5 <samplingProcessInterval>
    666a:	0e 94 97 19 	call	0x332e	; 0x332e <RTC_set_wake_up_interrupt_minutes>
}
    666e:	08 95       	ret

Disassembly of section .text.send_header:

000054e0 <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    54e0:	cf 93       	push	r28
    54e2:	df 93       	push	r29
    54e4:	cd b7       	in	r28, 0x3d	; 61
    54e6:	de b7       	in	r29, 0x3e	; 62
    54e8:	e4 97       	sbiw	r28, 0x34	; 52
    54ea:	0f b6       	in	r0, 0x3f	; 63
    54ec:	f8 94       	cli
    54ee:	de bf       	out	0x3e, r29	; 62
    54f0:	0f be       	out	0x3f, r0	; 63
    54f2:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    54f4:	be 01       	movw	r22, r28
    54f6:	6c 5c       	subi	r22, 0xCC	; 204
    54f8:	7f 4f       	sbci	r23, 0xFF	; 255
    54fa:	ce 01       	movw	r24, r28
    54fc:	01 96       	adiw	r24, 0x01	; 1
    54fe:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    5502:	6c a9       	ldd	r22, Y+52	; 0x34
    5504:	ce 01       	movw	r24, r28
    5506:	01 96       	adiw	r24, 0x01	; 1
    5508:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <LM_send_uplink>
}
    550c:	e4 96       	adiw	r28, 0x34	; 52
    550e:	0f b6       	in	r0, 0x3f	; 63
    5510:	f8 94       	cli
    5512:	de bf       	out	0x3e, r29	; 62
    5514:	0f be       	out	0x3f, r0	; 63
    5516:	cd bf       	out	0x3d, r28	; 61
    5518:	df 91       	pop	r29
    551a:	cf 91       	pop	r28
    551c:	08 95       	ret

Disassembly of section .text.stage_0:

000033f2 <stage_0>:
/* Stage 0                                                              */
/************************************************************************/
static STAGE_STATUS stage_0(){
	
	while(1){
		switch(state_s0){
    33f2:	80 91 aa 0f 	lds	r24, 0x0FAA	; 0x800faa <state_s0>
    33f6:	82 30       	cpi	r24, 0x02	; 2
    33f8:	19 f1       	breq	.+70     	; 0x3440 <stage_0+0x4e>
    33fa:	28 f4       	brcc	.+10     	; 0x3406 <stage_0+0x14>
    33fc:	88 23       	and	r24, r24
    33fe:	51 f0       	breq	.+20     	; 0x3414 <stage_0+0x22>
    3400:	81 30       	cpi	r24, 0x01	; 1
    3402:	b1 f0       	breq	.+44     	; 0x3430 <stage_0+0x3e>
    3404:	f6 cf       	rjmp	.-20     	; 0x33f2 <stage_0>
    3406:	84 30       	cpi	r24, 0x04	; 4
    3408:	09 f4       	brne	.+2      	; 0x340c <stage_0+0x1a>
    340a:	4b c0       	rjmp	.+150    	; 0x34a2 <stage_0+0xb0>
    340c:	18 f1       	brcs	.+70     	; 0x3454 <stage_0+0x62>
    340e:	85 30       	cpi	r24, 0x05	; 5
    3410:	69 f1       	breq	.+90     	; 0x346c <stage_0+0x7a>
    3412:	ef cf       	rjmp	.-34     	; 0x33f2 <stage_0>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    3414:	e0 ed       	ldi	r30, 0xD0	; 208
    3416:	fe e0       	ldi	r31, 0x0E	; 14
    3418:	60 81       	ld	r22, Z
    341a:	71 81       	ldd	r23, Z+1	; 0x01
    341c:	4a ec       	ldi	r20, 0xCA	; 202
    341e:	5a e0       	ldi	r21, 0x0A	; 10
    3420:	82 81       	ldd	r24, Z+2	; 0x02
    3422:	93 81       	ldd	r25, Z+3	; 0x03
    3424:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <SCD30_init_sampling>
				
			
				state_s0=STAGE_GET_TIME;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	80 93 aa 0f 	sts	0x0FAA, r24	; 0x800faa <state_s0>
			break;
    342e:	e1 cf       	rjmp	.-62     	; 0x33f2 <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    3430:	84 e5       	ldi	r24, 0x54	; 84
    3432:	9f e0       	ldi	r25, 0x0F	; 15
    3434:	0e 94 0e 11 	call	0x221c	; 0x221c <RTC_get_current_time>
				state_s0=STAGE_START;
    3438:	82 e0       	ldi	r24, 0x02	; 2
    343a:	80 93 aa 0f 	sts	0x0FAA, r24	; 0x800faa <state_s0>
			break;
    343e:	d9 cf       	rjmp	.-78     	; 0x33f2 <stage_0>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    3440:	80 91 a6 0f 	lds	r24, 0x0FA6	; 0x800fa6 <methHeatUpTime>
    3444:	0e 94 22 30 	call	0x6044	; 0x6044 <ADC_meth_sens_power_on>
				SCD30_start_sampling();
    3448:	0e 94 2e 33 	call	0x665c	; 0x665c <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    344c:	83 e0       	ldi	r24, 0x03	; 3
    344e:	80 93 aa 0f 	sts	0x0FAA, r24	; 0x800faa <state_s0>
			break;
    3452:	cf cf       	rjmp	.-98     	; 0x33f2 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    3454:	0e 94 da 31 	call	0x63b4	; 0x63b4 <ADC_meth_sens_ready>
    3458:	88 23       	and	r24, r24
    345a:	39 f1       	breq	.+78     	; 0x34aa <stage_0+0xb8>
    345c:	0e 94 c3 30 	call	0x6186	; 0x6186 <SCD30_is_sampling_done>
    3460:	88 23       	and	r24, r24
    3462:	29 f1       	breq	.+74     	; 0x34ae <stage_0+0xbc>
				state_s0=STAGE_UPDATE_MRPP;
    3464:	85 e0       	ldi	r24, 0x05	; 5
    3466:	80 93 aa 0f 	sts	0x0FAA, r24	; 0x800faa <state_s0>
			break;
    346a:	c3 cf       	rjmp	.-122    	; 0x33f2 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    346c:	27 e7       	ldi	r18, 0x77	; 119
    346e:	3f e0       	ldi	r19, 0x0F	; 15
    3470:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    3474:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    3478:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    347c:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    3480:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    3484:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    3488:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    348c:	4a ec       	ldi	r20, 0xCA	; 202
    348e:	5a e0       	ldi	r21, 0x0A	; 10
    3490:	67 e7       	ldi	r22, 0x77	; 119
    3492:	7f e0       	ldi	r23, 0x0F	; 15
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	0e 94 d5 21 	call	0x43aa	; 0x43aa <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    349a:	84 e0       	ldi	r24, 0x04	; 4
    349c:	80 93 aa 0f 	sts	0x0FAA, r24	; 0x800faa <state_s0>
			break;
    34a0:	a8 cf       	rjmp	.-176    	; 0x33f2 <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    34a2:	0e 94 7f 32 	call	0x64fe	; 0x64fe <SCD30_deinit_sampling>
				return STAGE_DONE;
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	08 95       	ret
    34ae:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    34b0:	08 95       	ret

Disassembly of section .text.stage_1:

00002e08 <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s1){
    2e0c:	80 91 a9 0f 	lds	r24, 0x0FA9	; 0x800fa9 <state_s1>
    2e10:	82 30       	cpi	r24, 0x02	; 2
    2e12:	61 f1       	breq	.+88     	; 0x2e6c <stage_1+0x64>
    2e14:	28 f4       	brcc	.+10     	; 0x2e20 <stage_1+0x18>
    2e16:	88 23       	and	r24, r24
    2e18:	51 f0       	breq	.+20     	; 0x2e2e <stage_1+0x26>
    2e1a:	81 30       	cpi	r24, 0x01	; 1
    2e1c:	f9 f0       	breq	.+62     	; 0x2e5c <stage_1+0x54>
    2e1e:	f6 cf       	rjmp	.-20     	; 0x2e0c <stage_1+0x4>
    2e20:	84 30       	cpi	r24, 0x04	; 4
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <stage_1+0x1e>
    2e24:	59 c0       	rjmp	.+178    	; 0x2ed8 <stage_1+0xd0>
    2e26:	50 f1       	brcs	.+84     	; 0x2e7c <stage_1+0x74>
    2e28:	85 30       	cpi	r24, 0x05	; 5
    2e2a:	a1 f1       	breq	.+104    	; 0x2e94 <stage_1+0x8c>
    2e2c:	ef cf       	rjmp	.-34     	; 0x2e0c <stage_1+0x4>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    2e2e:	c0 ed       	ldi	r28, 0xD0	; 208
    2e30:	de e0       	ldi	r29, 0x0E	; 14
    2e32:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e34:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e36:	4a ec       	ldi	r20, 0xCA	; 202
    2e38:	5a e0       	ldi	r21, 0x0A	; 10
    2e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e3e:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    2e42:	6d 81       	ldd	r22, Y+5	; 0x05
    2e44:	7e 81       	ldd	r23, Y+6	; 0x06
    2e46:	42 e7       	ldi	r20, 0x72	; 114
    2e48:	58 e0       	ldi	r21, 0x08	; 8
    2e4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e4c:	0e 94 4f 23 	call	0x469e	; 0x469e <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2e50:	81 11       	cpse	r24, r1
    2e52:	48 c0       	rjmp	.+144    	; 0x2ee4 <stage_1+0xdc>
				
				state_s1=STAGE_GET_TIME;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	80 93 a9 0f 	sts	0x0FA9, r24	; 0x800fa9 <state_s1>
			break;
    2e5a:	d8 cf       	rjmp	.-80     	; 0x2e0c <stage_1+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2e5c:	84 e5       	ldi	r24, 0x54	; 84
    2e5e:	9f e0       	ldi	r25, 0x0F	; 15
    2e60:	0e 94 0e 11 	call	0x221c	; 0x221c <RTC_get_current_time>
				
				state_s1=STAGE_START;
    2e64:	82 e0       	ldi	r24, 0x02	; 2
    2e66:	80 93 a9 0f 	sts	0x0FA9, r24	; 0x800fa9 <state_s1>
			break;
    2e6a:	d0 cf       	rjmp	.-96     	; 0x2e0c <stage_1+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2e6c:	0e 94 2e 33 	call	0x665c	; 0x665c <SCD30_start_sampling>
				ADC_start_sampling();
    2e70:	0e 94 1f 33 	call	0x663e	; 0x663e <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    2e74:	83 e0       	ldi	r24, 0x03	; 3
    2e76:	80 93 a9 0f 	sts	0x0FA9, r24	; 0x800fa9 <state_s1>
			break;
    2e7a:	c8 cf       	rjmp	.-112    	; 0x2e0c <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2e7c:	0e 94 c3 30 	call	0x6186	; 0x6186 <SCD30_is_sampling_done>
    2e80:	88 23       	and	r24, r24
    2e82:	91 f1       	breq	.+100    	; 0x2ee8 <stage_1+0xe0>
    2e84:	0e 94 8b 30 	call	0x6116	; 0x6116 <ADC_is_sampling_done>
    2e88:	88 23       	and	r24, r24
    2e8a:	81 f1       	breq	.+96     	; 0x2eec <stage_1+0xe4>
				state_s1=STAGE_UPDATE_MRPP;
    2e8c:	85 e0       	ldi	r24, 0x05	; 5
    2e8e:	80 93 a9 0f 	sts	0x0FA9, r24	; 0x800fa9 <state_s1>
			break;
    2e92:	bc cf       	rjmp	.-136    	; 0x2e0c <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2e94:	27 e7       	ldi	r18, 0x77	; 119
    2e96:	3f e0       	ldi	r19, 0x0F	; 15
    2e98:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2e9c:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2ea0:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2ea4:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2ea8:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2eac:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2eb0:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    2eb4:	4a ec       	ldi	r20, 0xCA	; 202
    2eb6:	5a e0       	ldi	r21, 0x0A	; 10
    2eb8:	67 e7       	ldi	r22, 0x77	; 119
    2eba:	7f e0       	ldi	r23, 0x0F	; 15
    2ebc:	83 e0       	ldi	r24, 0x03	; 3
    2ebe:	0e 94 d5 21 	call	0x43aa	; 0x43aa <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    2ec2:	42 e7       	ldi	r20, 0x72	; 114
    2ec4:	58 e0       	ldi	r21, 0x08	; 8
    2ec6:	67 e7       	ldi	r22, 0x77	; 119
    2ec8:	7f e0       	ldi	r23, 0x0F	; 15
    2eca:	82 e0       	ldi	r24, 0x02	; 2
    2ecc:	0e 94 d5 21 	call	0x43aa	; 0x43aa <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    2ed0:	84 e0       	ldi	r24, 0x04	; 4
    2ed2:	80 93 a9 0f 	sts	0x0FA9, r24	; 0x800fa9 <state_s1>
			break;
    2ed6:	9a cf       	rjmp	.-204    	; 0x2e0c <stage_1+0x4>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    2ed8:	0e 94 7f 32 	call	0x64fe	; 0x64fe <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2edc:	0e 94 c7 31 	call	0x638e	; 0x638e <ADC_deinit_sampling>
				return STAGE_DONE;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	05 c0       	rjmp	.+10     	; 0x2eee <stage_1+0xe6>
		switch(state_s1){
			case STAGE_INIT:
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2ee4:	83 e0       	ldi	r24, 0x03	; 3
    2ee6:	03 c0       	rjmp	.+6      	; 0x2eee <stage_1+0xe6>
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	01 c0       	rjmp	.+2      	; 0x2eee <stage_1+0xe6>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	08 95       	ret

Disassembly of section .text.stage_2:

00002918 <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
	ADC_STATUS adcStatus;
	

	while(1){
		switch(state_s2){
    291c:	80 91 a8 0f 	lds	r24, 0x0FA8	; 0x800fa8 <state_s2>
    2920:	82 30       	cpi	r24, 0x02	; 2
    2922:	69 f1       	breq	.+90     	; 0x297e <stage_2+0x66>
    2924:	28 f4       	brcc	.+10     	; 0x2930 <stage_2+0x18>
    2926:	88 23       	and	r24, r24
    2928:	59 f0       	breq	.+22     	; 0x2940 <stage_2+0x28>
    292a:	81 30       	cpi	r24, 0x01	; 1
    292c:	01 f1       	breq	.+64     	; 0x296e <stage_2+0x56>
    292e:	f6 cf       	rjmp	.-20     	; 0x291c <stage_2+0x4>
    2930:	84 30       	cpi	r24, 0x04	; 4
    2932:	09 f4       	brne	.+2      	; 0x2936 <stage_2+0x1e>
    2934:	64 c0       	rjmp	.+200    	; 0x29fe <stage_2+0xe6>
    2936:	88 f1       	brcs	.+98     	; 0x299a <stage_2+0x82>
    2938:	85 30       	cpi	r24, 0x05	; 5
    293a:	09 f4       	brne	.+2      	; 0x293e <stage_2+0x26>
    293c:	3e c0       	rjmp	.+124    	; 0x29ba <stage_2+0xa2>
    293e:	ee cf       	rjmp	.-36     	; 0x291c <stage_2+0x4>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    2940:	c0 ed       	ldi	r28, 0xD0	; 208
    2942:	de e0       	ldi	r29, 0x0E	; 14
    2944:	6c 89       	ldd	r22, Y+20	; 0x14
    2946:	7d 89       	ldd	r23, Y+21	; 0x15
    2948:	4a ec       	ldi	r20, 0xCA	; 202
    294a:	5a e0       	ldi	r21, 0x0A	; 10
    294c:	8e 89       	ldd	r24, Y+22	; 0x16
    294e:	9f 89       	ldd	r25, Y+23	; 0x17
    2950:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    2954:	6f 85       	ldd	r22, Y+15	; 0x0f
    2956:	78 89       	ldd	r23, Y+16	; 0x10
    2958:	42 e7       	ldi	r20, 0x72	; 114
    295a:	58 e0       	ldi	r21, 0x08	; 8
    295c:	89 89       	ldd	r24, Y+17	; 0x11
    295e:	0e 94 4f 23 	call	0x469e	; 0x469e <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2962:	81 11       	cpse	r24, r1
    2964:	52 c0       	rjmp	.+164    	; 0x2a0a <stage_2+0xf2>
			
				state_s2=STAGE_GET_TIME;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <state_s2>
			break;
    296c:	d7 cf       	rjmp	.-82     	; 0x291c <stage_2+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    296e:	84 e5       	ldi	r24, 0x54	; 84
    2970:	9f e0       	ldi	r25, 0x0F	; 15
    2972:	0e 94 0e 11 	call	0x221c	; 0x221c <RTC_get_current_time>
			
				state_s2=STAGE_START;
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <state_s2>
			break;
    297c:	cf cf       	rjmp	.-98     	; 0x291c <stage_2+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    297e:	0e 94 2e 33 	call	0x665c	; 0x665c <SCD30_start_sampling>
				ADC_start_sampling();
    2982:	0e 94 1f 33 	call	0x663e	; 0x663e <ADC_start_sampling>
				PUMP_start(airPumpTime);
    2986:	80 91 8f 0f 	lds	r24, 0x0F8F	; 0x800f8f <airPumpTime>
    298a:	90 91 90 0f 	lds	r25, 0x0F90	; 0x800f90 <airPumpTime+0x1>
    298e:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <PUMP_start>
			
				state_s2=STAGE_WAIT;
    2992:	83 e0       	ldi	r24, 0x03	; 3
    2994:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <state_s2>
			break;
    2998:	c1 cf       	rjmp	.-126    	; 0x291c <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    299a:	0e 94 c3 30 	call	0x6186	; 0x6186 <SCD30_is_sampling_done>
    299e:	88 23       	and	r24, r24
    29a0:	b1 f1       	breq	.+108    	; 0x2a0e <stage_2+0xf6>
    29a2:	0e 94 8b 30 	call	0x6116	; 0x6116 <ADC_is_sampling_done>
    29a6:	88 23       	and	r24, r24
    29a8:	a1 f1       	breq	.+104    	; 0x2a12 <stage_2+0xfa>
    29aa:	0e 94 b5 30 	call	0x616a	; 0x616a <PUMP_is_done>
    29ae:	88 23       	and	r24, r24
    29b0:	91 f1       	breq	.+100    	; 0x2a16 <stage_2+0xfe>
				state_s2=STAGE_UPDATE_MRPP;
    29b2:	85 e0       	ldi	r24, 0x05	; 5
    29b4:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <state_s2>
			break;
    29b8:	b1 cf       	rjmp	.-158    	; 0x291c <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    29ba:	27 e7       	ldi	r18, 0x77	; 119
    29bc:	3f e0       	ldi	r19, 0x0F	; 15
    29be:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    29c2:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    29c6:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    29ca:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    29ce:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    29d2:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    29d6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    29da:	4a ec       	ldi	r20, 0xCA	; 202
    29dc:	5a e0       	ldi	r21, 0x0A	; 10
    29de:	67 e7       	ldi	r22, 0x77	; 119
    29e0:	7f e0       	ldi	r23, 0x0F	; 15
    29e2:	85 e0       	ldi	r24, 0x05	; 5
    29e4:	0e 94 d5 21 	call	0x43aa	; 0x43aa <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    29e8:	42 e7       	ldi	r20, 0x72	; 114
    29ea:	58 e0       	ldi	r21, 0x08	; 8
    29ec:	67 e7       	ldi	r22, 0x77	; 119
    29ee:	7f e0       	ldi	r23, 0x0F	; 15
    29f0:	84 e0       	ldi	r24, 0x04	; 4
    29f2:	0e 94 d5 21 	call	0x43aa	; 0x43aa <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    29f6:	84 e0       	ldi	r24, 0x04	; 4
    29f8:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <state_s2>
			break;
    29fc:	8f cf       	rjmp	.-226    	; 0x291c <stage_2+0x4>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    29fe:	0e 94 7f 32 	call	0x64fe	; 0x64fe <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2a02:	0e 94 c7 31 	call	0x638e	; 0x638e <ADC_deinit_sampling>
				return STAGE_DONE;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <stage_2+0x100>
		switch(state_s2){
			case STAGE_INIT:
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2a0a:	83 e0       	ldi	r24, 0x03	; 3
    2a0c:	05 c0       	rjmp	.+10     	; 0x2a18 <stage_2+0x100>
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	03 c0       	rjmp	.+6      	; 0x2a18 <stage_2+0x100>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	01 c0       	rjmp	.+2      	; 0x2a18 <stage_2+0x100>
    2a16:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	08 95       	ret

Disassembly of section .text.stage_3:

00002d14 <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s3){
    2d18:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <state_s3>
    2d1c:	82 30       	cpi	r24, 0x02	; 2
    2d1e:	61 f1       	breq	.+88     	; 0x2d78 <stage_3+0x64>
    2d20:	28 f4       	brcc	.+10     	; 0x2d2c <stage_3+0x18>
    2d22:	88 23       	and	r24, r24
    2d24:	51 f0       	breq	.+20     	; 0x2d3a <stage_3+0x26>
    2d26:	81 30       	cpi	r24, 0x01	; 1
    2d28:	f9 f0       	breq	.+62     	; 0x2d68 <stage_3+0x54>
    2d2a:	f6 cf       	rjmp	.-20     	; 0x2d18 <stage_3+0x4>
    2d2c:	84 30       	cpi	r24, 0x04	; 4
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <stage_3+0x1e>
    2d30:	59 c0       	rjmp	.+178    	; 0x2de4 <stage_3+0xd0>
    2d32:	50 f1       	brcs	.+84     	; 0x2d88 <stage_3+0x74>
    2d34:	85 30       	cpi	r24, 0x05	; 5
    2d36:	a1 f1       	breq	.+104    	; 0x2da0 <stage_3+0x8c>
    2d38:	ef cf       	rjmp	.-34     	; 0x2d18 <stage_3+0x4>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    2d3a:	c0 ed       	ldi	r28, 0xD0	; 208
    2d3c:	de e0       	ldi	r29, 0x0E	; 14
    2d3e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2d40:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2d42:	4a ec       	ldi	r20, 0xCA	; 202
    2d44:	5a e0       	ldi	r21, 0x0A	; 10
    2d46:	88 a1       	ldd	r24, Y+32	; 0x20
    2d48:	99 a1       	ldd	r25, Y+33	; 0x21
    2d4a:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    2d4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d52:	42 e7       	ldi	r20, 0x72	; 114
    2d54:	58 e0       	ldi	r21, 0x08	; 8
    2d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d58:	0e 94 4f 23 	call	0x469e	; 0x469e <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2d5c:	81 11       	cpse	r24, r1
    2d5e:	4c c0       	rjmp	.+152    	; 0x2df8 <stage_3+0xe4>
			
				state_s3=STAGE_GET_TIME;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	80 93 a7 0f 	sts	0x0FA7, r24	; 0x800fa7 <state_s3>
			break;
    2d66:	d8 cf       	rjmp	.-80     	; 0x2d18 <stage_3+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2d68:	84 e5       	ldi	r24, 0x54	; 84
    2d6a:	9f e0       	ldi	r25, 0x0F	; 15
    2d6c:	0e 94 0e 11 	call	0x221c	; 0x221c <RTC_get_current_time>
				
				state_s3=STAGE_START;
    2d70:	82 e0       	ldi	r24, 0x02	; 2
    2d72:	80 93 a7 0f 	sts	0x0FA7, r24	; 0x800fa7 <state_s3>
			break;
    2d76:	d0 cf       	rjmp	.-96     	; 0x2d18 <stage_3+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2d78:	0e 94 2e 33 	call	0x665c	; 0x665c <SCD30_start_sampling>
				ADC_start_sampling();
    2d7c:	0e 94 1f 33 	call	0x663e	; 0x663e <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    2d80:	83 e0       	ldi	r24, 0x03	; 3
    2d82:	80 93 a7 0f 	sts	0x0FA7, r24	; 0x800fa7 <state_s3>
			break;
    2d86:	c8 cf       	rjmp	.-112    	; 0x2d18 <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2d88:	0e 94 c3 30 	call	0x6186	; 0x6186 <SCD30_is_sampling_done>
    2d8c:	88 23       	and	r24, r24
    2d8e:	b1 f1       	breq	.+108    	; 0x2dfc <stage_3+0xe8>
    2d90:	0e 94 8b 30 	call	0x6116	; 0x6116 <ADC_is_sampling_done>
    2d94:	88 23       	and	r24, r24
    2d96:	a1 f1       	breq	.+104    	; 0x2e00 <stage_3+0xec>
				state_s3=STAGE_UPDATE_MRPP;
    2d98:	85 e0       	ldi	r24, 0x05	; 5
    2d9a:	80 93 a7 0f 	sts	0x0FA7, r24	; 0x800fa7 <state_s3>
			break;
    2d9e:	bc cf       	rjmp	.-136    	; 0x2d18 <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2da0:	27 e7       	ldi	r18, 0x77	; 119
    2da2:	3f e0       	ldi	r19, 0x0F	; 15
    2da4:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2da8:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2dac:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2db0:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2db4:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2db8:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2dbc:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    2dc0:	4a ec       	ldi	r20, 0xCA	; 202
    2dc2:	5a e0       	ldi	r21, 0x0A	; 10
    2dc4:	67 e7       	ldi	r22, 0x77	; 119
    2dc6:	7f e0       	ldi	r23, 0x0F	; 15
    2dc8:	87 e0       	ldi	r24, 0x07	; 7
    2dca:	0e 94 d5 21 	call	0x43aa	; 0x43aa <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    2dce:	42 e7       	ldi	r20, 0x72	; 114
    2dd0:	58 e0       	ldi	r21, 0x08	; 8
    2dd2:	67 e7       	ldi	r22, 0x77	; 119
    2dd4:	7f e0       	ldi	r23, 0x0F	; 15
    2dd6:	86 e0       	ldi	r24, 0x06	; 6
    2dd8:	0e 94 d5 21 	call	0x43aa	; 0x43aa <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    2ddc:	84 e0       	ldi	r24, 0x04	; 4
    2dde:	80 93 a7 0f 	sts	0x0FA7, r24	; 0x800fa7 <state_s3>
			break;
    2de2:	9a cf       	rjmp	.-204    	; 0x2d18 <stage_3+0x4>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    2de4:	0e 94 7f 32 	call	0x64fe	; 0x64fe <SCD30_deinit_sampling>
				SCD30_sensor_off();
    2de8:	0e 94 61 33 	call	0x66c2	; 0x66c2 <SCD30_sensor_off>
				ADC_deinit_sampling();
    2dec:	0e 94 c7 31 	call	0x638e	; 0x638e <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    2df0:	0e 94 51 33 	call	0x66a2	; 0x66a2 <ADC_meth_sens_power_off>
				return STAGE_DONE;
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	05 c0       	rjmp	.+10     	; 0x2e02 <stage_3+0xee>
		switch(state_s3){
			case STAGE_INIT:
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2df8:	83 e0       	ldi	r24, 0x03	; 3
    2dfa:	03 c0       	rjmp	.+6      	; 0x2e02 <stage_3+0xee>
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	01 c0       	rjmp	.+2      	; 0x2e02 <stage_3+0xee>
    2e00:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	08 95       	ret

Disassembly of section .text.send_body:

000054a0 <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    54a0:	cf 93       	push	r28
    54a2:	df 93       	push	r29
    54a4:	cd b7       	in	r28, 0x3d	; 61
    54a6:	de b7       	in	r29, 0x3e	; 62
    54a8:	e4 97       	sbiw	r28, 0x34	; 52
    54aa:	0f b6       	in	r0, 0x3f	; 63
    54ac:	f8 94       	cli
    54ae:	de bf       	out	0x3e, r29	; 62
    54b0:	0f be       	out	0x3f, r0	; 63
    54b2:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    54b4:	ae 01       	movw	r20, r28
    54b6:	4c 5c       	subi	r20, 0xCC	; 204
    54b8:	5f 4f       	sbci	r21, 0xFF	; 255
    54ba:	be 01       	movw	r22, r28
    54bc:	6f 5f       	subi	r22, 0xFF	; 255
    54be:	7f 4f       	sbci	r23, 0xFF	; 255
    54c0:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    54c4:	6c a9       	ldd	r22, Y+52	; 0x34
    54c6:	ce 01       	movw	r24, r28
    54c8:	01 96       	adiw	r24, 0x01	; 1
    54ca:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <LM_send_uplink>
}
    54ce:	e4 96       	adiw	r28, 0x34	; 52
    54d0:	0f b6       	in	r0, 0x3f	; 63
    54d2:	f8 94       	cli
    54d4:	de bf       	out	0x3e, r29	; 62
    54d6:	0f be       	out	0x3f, r0	; 63
    54d8:	cd bf       	out	0x3d, r28	; 61
    54da:	df 91       	pop	r29
    54dc:	cf 91       	pop	r28
    54de:	08 95       	ret

Disassembly of section .text.decode_body_response:

00005e24 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    5e24:	cf 93       	push	r28
	switch(status){
    5e26:	62 30       	cpi	r22, 0x02	; 2
    5e28:	71 f0       	breq	.+28     	; 0x5e46 <decode_body_response+0x22>
    5e2a:	18 f4       	brcc	.+6      	; 0x5e32 <decode_body_response+0xe>
    5e2c:	66 23       	and	r22, r22
    5e2e:	31 f0       	breq	.+12     	; 0x5e3c <decode_body_response+0x18>
    5e30:	03 c0       	rjmp	.+6      	; 0x5e38 <decode_body_response+0x14>
    5e32:	64 50       	subi	r22, 0x04	; 4
    5e34:	62 30       	cpi	r22, 0x02	; 2
    5e36:	10 f0       	brcs	.+4      	; 0x5e3c <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    5e38:	86 e1       	ldi	r24, 0x16	; 22
    5e3a:	06 c0       	rjmp	.+12     	; 0x5e48 <decode_body_response+0x24>
    5e3c:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    5e3e:	0e 94 f3 32 	call	0x65e6	; 0x65e6 <MRPP_set_body_sent>
			return success;
    5e42:	8c 2f       	mov	r24, r28
    5e44:	01 c0       	rjmp	.+2      	; 0x5e48 <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    5e46:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    5e48:	cf 91       	pop	r28
    5e4a:	08 95       	ret

Disassembly of section .text.send_tail:

0000551e <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    551e:	cf 93       	push	r28
    5520:	df 93       	push	r29
    5522:	cd b7       	in	r28, 0x3d	; 61
    5524:	de b7       	in	r29, 0x3e	; 62
    5526:	e4 97       	sbiw	r28, 0x34	; 52
    5528:	0f b6       	in	r0, 0x3f	; 63
    552a:	f8 94       	cli
    552c:	de bf       	out	0x3e, r29	; 62
    552e:	0f be       	out	0x3f, r0	; 63
    5530:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    5532:	be 01       	movw	r22, r28
    5534:	6c 5c       	subi	r22, 0xCC	; 204
    5536:	7f 4f       	sbci	r23, 0xFF	; 255
    5538:	ce 01       	movw	r24, r28
    553a:	01 96       	adiw	r24, 0x01	; 1
    553c:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    5540:	6c a9       	ldd	r22, Y+52	; 0x34
    5542:	ce 01       	movw	r24, r28
    5544:	01 96       	adiw	r24, 0x01	; 1
    5546:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <LM_send_uplink>
}
    554a:	e4 96       	adiw	r28, 0x34	; 52
    554c:	0f b6       	in	r0, 0x3f	; 63
    554e:	f8 94       	cli
    5550:	de bf       	out	0x3e, r29	; 62
    5552:	0f be       	out	0x3f, r0	; 63
    5554:	cd bf       	out	0x3d, r28	; 61
    5556:	df 91       	pop	r29
    5558:	cf 91       	pop	r28
    555a:	08 95       	ret

Disassembly of section .text.send_msg:

0000623c <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    623c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <uart1_hal_send_string>
    6240:	2f ef       	ldi	r18, 0xFF	; 255
    6242:	80 e7       	ldi	r24, 0x70	; 112
    6244:	92 e0       	ldi	r25, 0x02	; 2
    6246:	21 50       	subi	r18, 0x01	; 1
    6248:	80 40       	sbci	r24, 0x00	; 0
    624a:	90 40       	sbci	r25, 0x00	; 0
    624c:	e1 f7       	brne	.-8      	; 0x6246 <send_msg+0xa>
    624e:	00 c0       	rjmp	.+0      	; 0x6250 <send_msg+0x14>
    6250:	00 00       	nop
    6252:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00000eba <MAINPG_start>:


static void send_msg(const char msg[]);


void MAINPG_start(){
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	SCD30_STATUS scd30Status;
	STAGE_STATUS stageStatus;
	bool fromSleep=false;
     ec8:	d1 2c       	mov	r13, r1

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
     eca:	c0 e0       	ldi	r28, 0x00	; 0
     ecc:	1a c0       	rjmp	.+52     	; 0xf02 <MAINPG_start+0x48>
				PM_HAL_SCD30_power_init();
				PM_HAL_LED_power_init();
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
     ece:	c6 e0       	ldi	r28, 0x06	; 6
     ed0:	18 c0       	rjmp	.+48     	; 0xf02 <MAINPG_start+0x48>
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
     ed2:	c5 e0       	ldi	r28, 0x05	; 5
     ed4:	16 c0       	rjmp	.+44     	; 0xf02 <MAINPG_start+0x48>
     ed6:	c5 e0       	ldi	r28, 0x05	; 5
     ed8:	14 c0       	rjmp	.+40     	; 0xf02 <MAINPG_start+0x48>
     eda:	c5 e0       	ldi	r28, 0x05	; 5
     edc:	12 c0       	rjmp	.+36     	; 0xf02 <MAINPG_start+0x48>
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
     ede:	c5 e0       	ldi	r28, 0x05	; 5
     ee0:	10 c0       	rjmp	.+32     	; 0xf02 <MAINPG_start+0x48>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
     ee2:	c6 e1       	ldi	r28, 0x16	; 22
     ee4:	0e c0       	rjmp	.+28     	; 0xf02 <MAINPG_start+0x48>
			/*                                                                      */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
     ee6:	c6 e1       	ldi	r28, 0x16	; 22
     ee8:	0c c0       	rjmp	.+24     	; 0xf02 <MAINPG_start+0x48>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
     eea:	c6 e1       	ldi	r28, 0x16	; 22
     eec:	0a c0       	rjmp	.+20     	; 0xf02 <MAINPG_start+0x48>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
     eee:	c6 e1       	ldi	r28, 0x16	; 22
     ef0:	08 c0       	rjmp	.+16     	; 0xf02 <MAINPG_start+0x48>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
     ef2:	c6 e1       	ldi	r28, 0x16	; 22
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <MAINPG_start+0x48>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
     ef6:	cd 2f       	mov	r28, r29
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <MAINPG_start+0x48>
     efa:	cd 2f       	mov	r28, r29
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
     efe:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
     f00:	c1 e1       	ldi	r28, 0x11	; 17
	STAGE_STATUS stageStatus;
	bool fromSleep=false;
	

	while(1){
		switch(state){
     f02:	ec 2f       	mov	r30, r28
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	e8 31       	cpi	r30, 0x18	; 24
     f08:	f1 05       	cpc	r31, r1
     f0a:	d8 f7       	brcc	.-10     	; 0xf02 <MAINPG_start+0x48>
     f0c:	e2 5a       	subi	r30, 0xA2	; 162
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	0c 94 ff 32 	jmp	0x65fe	; 0x65fe <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
     f14:	0e 94 cc 2a 	call	0x5598	; 0x5598 <uart0_hal_init>
				uart1_hal_init();
     f18:	0e 94 08 2b 	call	0x5610	; 0x5610 <uart1_hal_init>
				TWI_HAL_init();
     f1c:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <TWI_HAL_init>
				TC2_HAL_init();
     f20:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <TC2_HAL_init>
				rn2483_init();
     f24:	0e 94 41 33 	call	0x6682	; 0x6682 <rn2483_init>
				SCD30_HAL_init();
     f28:	0e 94 39 32 	call	0x6472	; 0x6472 <SCD30_HAL_init>
				PM_HAL_adc_power_init();
     f2c:	0e 94 16 32 	call	0x642c	; 0x642c <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
     f30:	0e 94 1d 32 	call	0x643a	; 0x643a <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
     f34:	0e 94 2b 32 	call	0x6456	; 0x6456 <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
     f38:	0e 94 24 32 	call	0x6448	; 0x6448 <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
     f3c:	0e 94 32 32 	call	0x6464	; 0x6464 <PM_HAL_LED_power_init>
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
     f40:	d1 10       	cpse	r13, r1
     f42:	c5 cf       	rjmp	.-118    	; 0xece <MAINPG_start+0x14>
     f44:	c1 e0       	ldi	r28, 0x01	; 1
     f46:	dd cf       	rjmp	.-70     	; 0xf02 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
     f48:	0e 94 36 31 	call	0x626c	; 0x626c <EM_has_deveui>
     f4c:	88 23       	and	r24, r24
     f4e:	09 f2       	breq	.-126    	; 0xed2 <MAINPG_start+0x18>
     f50:	0e 94 41 31 	call	0x6282	; 0x6282 <EM_has_appeui>
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <MAINPG_start+0xa0>
     f58:	be cf       	rjmp	.-132    	; 0xed6 <MAINPG_start+0x1c>
     f5a:	0e 94 4c 31 	call	0x6298	; 0x6298 <EM_has_appkey>
     f5e:	88 23       	and	r24, r24
     f60:	09 f4       	brne	.+2      	; 0xf64 <MAINPG_start+0xaa>
     f62:	bb cf       	rjmp	.-138    	; 0xeda <MAINPG_start+0x20>
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
     f64:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <read_eeprom>
     f68:	88 23       	and	r24, r24
     f6a:	09 f4       	brne	.+2      	; 0xf6e <MAINPG_start+0xb4>
     f6c:	b8 cf       	rjmp	.-144    	; 0xede <MAINPG_start+0x24>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
     f6e:	c6 e0       	ldi	r28, 0x06	; 6
     f70:	c8 cf       	rjmp	.-112    	; 0xf02 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
     f72:	63 e4       	ldi	r22, 0x43	; 67
     f74:	75 e0       	ldi	r23, 0x05	; 5
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				LED_start_try_join();
     f7c:	0e 94 78 32 	call	0x64f0	; 0x64f0 <LED_start_try_join>
				lmStatus=join_lora();
     f80:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <join_lora>
     f84:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
     f86:	0e 94 0e 32 	call	0x641c	; 0x641c <LED_stop_try_join>
				state=decode_join_response(lmStatus);
     f8a:	8c 2f       	mov	r24, r28
     f8c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <decode_join_response>
     f90:	c8 2f       	mov	r28, r24
			break;
     f92:	b7 cf       	rjmp	.-146    	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				LED_join_success();
     f94:	0e 94 30 2a 	call	0x5460	; 0x5460 <LED_join_success>
				state=MAINPG_INIT_MODULES;
     f98:	ca e0       	ldi	r28, 0x0A	; 10
			break;
     f9a:	b3 cf       	rjmp	.-154    	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
     f9c:	6a e4       	ldi	r22, 0x4A	; 74
     f9e:	75 e0       	ldi	r23, 0x05	; 5
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				lmStatus=LM_wake_up();
     fa6:	0e 94 80 33 	call	0x6700	; 0x6700 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
     faa:	81 11       	cpse	r24, r1
     fac:	9a cf       	rjmp	.-204    	; 0xee2 <MAINPG_start+0x28>
     fae:	ca e0       	ldi	r28, 0x0A	; 10
     fb0:	a8 cf       	rjmp	.-176    	; 0xf02 <MAINPG_start+0x48>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
     fb2:	69 e5       	ldi	r22, 0x59	; 89
     fb4:	75 e0       	ldi	r23, 0x05	; 5
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				LED_join_denied();
     fbc:	0e 94 55 33 	call	0x66aa	; 0x66aa <LED_join_denied>
     fc0:	2f ef       	ldi	r18, 0xFF	; 255
     fc2:	81 e1       	ldi	r24, 0x11	; 17
     fc4:	9a e7       	ldi	r25, 0x7A	; 122
     fc6:	21 50       	subi	r18, 0x01	; 1
     fc8:	80 40       	sbci	r24, 0x00	; 0
     fca:	90 40       	sbci	r25, 0x00	; 0
     fcc:	e1 f7       	brne	.-8      	; 0xfc6 <MAINPG_start+0x10c>
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <MAINPG_start+0x116>
     fd0:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
     fd2:	c2 e0       	ldi	r28, 0x02	; 2
			break;
     fd4:	96 cf       	rjmp	.-212    	; 0xf02 <MAINPG_start+0x48>
			
			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
     fd6:	e0 90 6b 0f 	lds	r14, 0x0F6B	; 0x800f6b <ppmx>
     fda:	f0 90 6c 0f 	lds	r15, 0x0F6C	; 0x800f6c <ppmx+0x1>
     fde:	00 91 6d 0f 	lds	r16, 0x0F6D	; 0x800f6d <ppmx+0x2>
     fe2:	10 91 6e 0f 	lds	r17, 0x0F6E	; 0x800f6e <ppmx+0x3>
     fe6:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <rrlx>
     fea:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <rrlx+0x1>
     fee:	40 91 71 0f 	lds	r20, 0x0F71	; 0x800f71 <rrlx+0x2>
     ff2:	50 91 72 0f 	lds	r21, 0x0F72	; 0x800f72 <rrlx+0x3>
     ff6:	60 91 73 0f 	lds	r22, 0x0F73	; 0x800f73 <vccx>
     ffa:	70 91 74 0f 	lds	r23, 0x0F74	; 0x800f74 <vccx+0x1>
     ffe:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <vccx+0x2>
    1002:	90 91 76 0f 	lds	r25, 0x0F76	; 0x800f76 <vccx+0x3>
    1006:	0e 94 ee 29 	call	0x53dc	; 0x53dc <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
    100a:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    100e:	81 11       	cpse	r24, r1
    1010:	6a cf       	rjmp	.-300    	; 0xee6 <MAINPG_start+0x2c>
    1012:	c7 e0       	ldi	r28, 0x07	; 7
    1014:	76 cf       	rjmp	.-276    	; 0xf02 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
    1016:	65 e6       	ldi	r22, 0x65	; 101
    1018:	75 e0       	ldi	r23, 0x05	; 5
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				rtcStatus=RTC_set_clock_out(1);
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    1026:	81 11       	cpse	r24, r1
    1028:	60 cf       	rjmp	.-320    	; 0xeea <MAINPG_start+0x30>
    102a:	c9 e0       	ldi	r28, 0x09	; 9
    102c:	6a cf       	rjmp	.-300    	; 0xf02 <MAINPG_start+0x48>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
    102e:	60 e7       	ldi	r22, 0x70	; 112
    1030:	75 e0       	ldi	r23, 0x05	; 5
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
    1038:	0e 94 ad 2c 	call	0x595a	; 0x595a <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    103c:	81 11       	cpse	r24, r1
    103e:	57 cf       	rjmp	.-338    	; 0xeee <MAINPG_start+0x34>
    1040:	c8 e0       	ldi	r28, 0x08	; 8
    1042:	5f cf       	rjmp	.-322    	; 0xf02 <MAINPG_start+0x48>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
    1044:	62 e8       	ldi	r22, 0x82	; 130
    1046:	75 e0       	ldi	r23, 0x05	; 5
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				rtcStatus=set_wakeup();
    104e:	0e 94 33 33 	call	0x6666	; 0x6666 <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1052:	81 11       	cpse	r24, r1
    1054:	4e cf       	rjmp	.-356    	; 0xef2 <MAINPG_start+0x38>
    1056:	cb e0       	ldi	r28, 0x0B	; 11
    1058:	54 cf       	rjmp	.-344    	; 0xf02 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
    105a:	67 e9       	ldi	r22, 0x97	; 151
    105c:	75 e0       	ldi	r23, 0x05	; 5
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				MRPP_init_group(cols, N_COLLECTIONS);
    1064:	67 e0       	ldi	r22, 0x07	; 7
    1066:	80 ed       	ldi	r24, 0xD0	; 208
    1068:	9e e0       	ldi	r25, 0x0E	; 14
    106a:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
    106e:	cc e0       	ldi	r28, 0x0C	; 12
			break;
    1070:	48 cf       	rjmp	.-368    	; 0xf02 <MAINPG_start+0x48>
				//scd30Status=SCD30_sensor_on();
				//state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_SEND_HEADER:MAINPG_FATAL_ERROR;
			//break;
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
    1072:	0e 94 24 33 	call	0x6648	; 0x6648 <LM_is_free>
    1076:	88 23       	and	r24, r24
    1078:	09 f4       	brne	.+2      	; 0x107c <__DATA_REGION_LENGTH__+0x7c>
    107a:	43 cf       	rjmp	.-378    	; 0xf02 <MAINPG_start+0x48>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
    107c:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
    1080:	4c e0       	ldi	r20, 0x0C	; 12
    1082:	6d e0       	ldi	r22, 0x0D	; 13
    1084:	0e 94 5e 30 	call	0x60bc	; 0x60bc <decode_header_tail_response>
    1088:	c8 2f       	mov	r28, r24
			break;
    108a:	3b cf       	rjmp	.-394    	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
    108c:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1090:	6e e0       	ldi	r22, 0x0E	; 14
    1092:	0e 94 57 31 	call	0x62ae	; 0x62ae <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
    1096:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1098:	c8 2f       	mov	r28, r24
			break;
    109a:	33 cf       	rjmp	.-410    	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
    109c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    10a0:	6f e0       	ldi	r22, 0x0F	; 15
    10a2:	0e 94 57 31 	call	0x62ae	; 0x62ae <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
    10a6:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    10a8:	c8 2f       	mov	r28, r24
			break;
    10aa:	2b cf       	rjmp	.-426    	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
    10ac:	0e 94 8c 14 	call	0x2918	; 0x2918 <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    10b0:	60 e1       	ldi	r22, 0x10	; 16
    10b2:	0e 94 57 31 	call	0x62ae	; 0x62ae <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
    10b6:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    10b8:	c8 2f       	mov	r28, r24
			break;
    10ba:	23 cf       	rjmp	.-442    	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
    10bc:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    10c0:	62 e1       	ldi	r22, 0x12	; 18
    10c2:	0e 94 57 31 	call	0x62ae	; 0x62ae <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
    10c6:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    10c8:	c8 2f       	mov	r28, r24
			break;
    10ca:	1b cf       	rjmp	.-458    	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
    10cc:	81 e9       	ldi	r24, 0x91	; 145
    10ce:	9f e0       	ldi	r25, 0x0F	; 15
    10d0:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <MRPP_is_body_package_ready>
    10d4:	88 23       	and	r24, r24
    10d6:	09 f4       	brne	.+2      	; 0x10da <__DATA_REGION_LENGTH__+0xda>
    10d8:	0e cf       	rjmp	.-484    	; 0xef6 <MAINPG_start+0x3c>
    10da:	0e 94 24 33 	call	0x6648	; 0x6648 <LM_is_free>
    10de:	88 23       	and	r24, r24
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <__DATA_REGION_LENGTH__+0xe4>
    10e2:	0b cf       	rjmp	.-490    	; 0xefa <MAINPG_start+0x40>
					lmStatus=send_body(bodyIndex);
    10e4:	80 91 91 0f 	lds	r24, 0x0F91	; 0x800f91 <bodyIndex>
    10e8:	90 91 92 0f 	lds	r25, 0x0F92	; 0x800f92 <bodyIndex+0x1>
    10ec:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
    10f0:	4d 2f       	mov	r20, r29
    10f2:	68 2f       	mov	r22, r24
    10f4:	80 91 91 0f 	lds	r24, 0x0F91	; 0x800f91 <bodyIndex>
    10f8:	90 91 92 0f 	lds	r25, 0x0F92	; 0x800f92 <bodyIndex+0x1>
    10fc:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <decode_body_response>
    1100:	c8 2f       	mov	r28, r24
    1102:	ff ce       	rjmp	.-514    	; 0xf02 <MAINPG_start+0x48>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
    1104:	0e 94 29 33 	call	0x6652	; 0x6652 <MRPP_all_body_package_sent>
    1108:	88 23       	and	r24, r24
    110a:	09 f4       	brne	.+2      	; 0x110e <__stack+0xf>
    110c:	f8 ce       	rjmp	.-528    	; 0xefe <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
    110e:	c3 e1       	ldi	r28, 0x13	; 19
    1110:	f8 ce       	rjmp	.-528    	; 0xf02 <MAINPG_start+0x48>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
    1112:	0e 94 24 33 	call	0x6648	; 0x6648 <LM_is_free>
    1116:	88 23       	and	r24, r24
    1118:	09 f4       	brne	.+2      	; 0x111c <__stack+0x1d>
    111a:	f3 ce       	rjmp	.-538    	; 0xf02 <MAINPG_start+0x48>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
    111c:	0e 94 8f 2a 	call	0x551e	; 0x551e <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
    1120:	43 e1       	ldi	r20, 0x13	; 19
    1122:	64 e1       	ldi	r22, 0x14	; 20
    1124:	0e 94 5e 30 	call	0x60bc	; 0x60bc <decode_header_tail_response>
    1128:	c8 2f       	mov	r28, r24
				
			break;
    112a:	eb ce       	rjmp	.-554    	; 0xf02 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
    112c:	0e 94 7d 33 	call	0x66fa	; 0x66fa <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
    1130:	dd 24       	eor	r13, r13
    1132:	d3 94       	inc	r13
    1134:	81 11       	cpse	r24, r1
    1136:	d1 2c       	mov	r13, r1
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	0e 94 6d 31 	call	0x62da	; 0x62da <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0e 94 81 31 	call	0x6302	; 0x6302 <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	0e 94 8b 31 	call	0x6316	; 0x6316 <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	0e 94 77 31 	call	0x62ee	; 0x62ee <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	0e 94 95 31 	call	0x632a	; 0x632a <PM_HAL_LED_power>
				
				state=MAINPG_SLEEP;
    1156:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    1158:	d4 ce       	rjmp	.-600    	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
    115a:	63 ea       	ldi	r22, 0xA3	; 163
    115c:	75 e0       	ldi	r23, 0x05	; 5
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				PM_HAL_enter_power_down();
    1164:	0e 94 ae 2a 	call	0x555c	; 0x555c <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
    1168:	6b ea       	ldi	r22, 0xAB	; 171
    116a:	75 e0       	ldi	r23, 0x05	; 5
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				state=MAINPG_INIT_HW;
    1172:	c0 e0       	ldi	r28, 0x00	; 0
			break;
    1174:	c6 ce       	rjmp	.-628    	; 0xf02 <MAINPG_start+0x48>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_CONF_ERR:
				LED_conf_err();
    1176:	0e 94 59 33 	call	0x66b2	; 0x66b2 <LED_conf_err>
				print_debug("Conf err\n\r");
    117a:	63 eb       	ldi	r22, 0xB3	; 179
    117c:	75 e0       	ldi	r23, 0x05	; 5
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				state=MAINPG_END;
    1184:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1186:	bd ce       	rjmp	.-646    	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
    1188:	6e eb       	ldi	r22, 0xBE	; 190
    118a:	75 e0       	ldi	r23, 0x05	; 5
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				LED_fatal_err();
    1192:	0e 94 5d 33 	call	0x66ba	; 0x66ba <LED_fatal_err>
				state=MAINPG_END;
    1196:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1198:	b4 ce       	rjmp	.-664    	; 0xf02 <MAINPG_start+0x48>
			
			case MAINPG_END:
				print_debug("END\n\r");
    119a:	6c ec       	ldi	r22, 0xCC	; 204
    119c:	75 e0       	ldi	r23, 0x05	; 5
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0e 94 1e 31 	call	0x623c	; 0x623c <send_msg>
				return;
			break;	
		}
	}
}
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	08 95       	ret

Disassembly of section .text.calc_crc8:

00005884 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    5884:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5886:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    5888:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    588a:	14 c0       	rjmp	.+40     	; 0x58b4 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    588c:	fa 01       	movw	r30, r20
    588e:	e3 0f       	add	r30, r19
    5890:	f1 1d       	adc	r31, r1
    5892:	90 81       	ld	r25, Z
    5894:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    5896:	28 e0       	ldi	r18, 0x08	; 8
    5898:	0a c0       	rjmp	.+20     	; 0x58ae <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    589a:	88 23       	and	r24, r24
    589c:	34 f4       	brge	.+12     	; 0x58aa <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	88 0f       	add	r24, r24
    58a2:	99 1f       	adc	r25, r25
    58a4:	91 e3       	ldi	r25, 0x31	; 49
    58a6:	89 27       	eor	r24, r25
    58a8:	01 c0       	rjmp	.+2      	; 0x58ac <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    58aa:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    58ac:	21 50       	subi	r18, 0x01	; 1
    58ae:	21 11       	cpse	r18, r1
    58b0:	f4 cf       	rjmp	.-24     	; 0x589a <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    58b2:	3f 5f       	subi	r19, 0xFF	; 255
    58b4:	36 17       	cp	r19, r22
    58b6:	50 f3       	brcs	.-44     	; 0x588c <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    58b8:	08 95       	ret

Disassembly of section .text.get_decimal:

000036e2 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    36e2:	cf 92       	push	r12
    36e4:	df 92       	push	r13
    36e6:	ef 92       	push	r14
    36e8:	ff 92       	push	r15
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	cf 93       	push	r28
    36f0:	df 93       	push	r29
    36f2:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    36f4:	10 e0       	ldi	r17, 0x00	; 0
    36f6:	08 c0       	rjmp	.+16     	; 0x3708 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    36f8:	cc 0d       	add	r28, r12
    36fa:	dd 1d       	adc	r29, r13
    36fc:	88 81       	ld	r24, Y
    36fe:	8e 32       	cpi	r24, 0x2E	; 46
    3700:	11 f4       	brne	.+4      	; 0x3706 <get_decimal+0x24>
			index=i+1;
    3702:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    3704:	0c c0       	rjmp	.+24     	; 0x371e <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    3706:	1f 5f       	subi	r17, 0xFF	; 255
    3708:	c1 2f       	mov	r28, r17
    370a:	d0 e0       	ldi	r29, 0x00	; 0
    370c:	b6 01       	movw	r22, r12
    370e:	80 e8       	ldi	r24, 0x80	; 128
    3710:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	c8 17       	cp	r28, r24
    3718:	d9 07       	cpc	r29, r25
    371a:	70 f3       	brcs	.-36     	; 0x36f8 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    371c:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    371e:	11 23       	and	r17, r17
    3720:	71 f1       	breq	.+92     	; 0x377e <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    3722:	c1 0e       	add	r12, r17
    3724:	d1 1c       	adc	r13, r1
    3726:	80 e8       	ldi	r24, 0x80	; 128
    3728:	e8 2e       	mov	r14, r24
    372a:	8e 2d       	mov	r24, r14
    372c:	b6 01       	movw	r22, r12
    372e:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    3732:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    3734:	8e 2d       	mov	r24, r14
    3736:	b6 01       	movw	r22, r12
    3738:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
    373c:	8c 01       	movw	r16, r24
	float divisor=1;
    373e:	0f 2e       	mov	r0, r31
    3740:	c1 2c       	mov	r12, r1
    3742:	d1 2c       	mov	r13, r1
    3744:	f0 e8       	ldi	r31, 0x80	; 128
    3746:	ef 2e       	mov	r14, r31
    3748:	ff e3       	ldi	r31, 0x3F	; 63
    374a:	ff 2e       	mov	r15, r31
    374c:	f0 2d       	mov	r31, r0
	
	while(len>0){
    374e:	0b c0       	rjmp	.+22     	; 0x3766 <get_decimal+0x84>
		divisor*=10;
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	40 e2       	ldi	r20, 0x20	; 32
    3756:	51 e4       	ldi	r21, 0x41	; 65
    3758:	c7 01       	movw	r24, r14
    375a:	b6 01       	movw	r22, r12
    375c:	0e 94 69 33 	call	0x66d2	; 0x66d2 <__mulsf3>
    3760:	6b 01       	movw	r12, r22
    3762:	7c 01       	movw	r14, r24
		len--;
    3764:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    3766:	c1 11       	cpse	r28, r1
    3768:	f3 cf       	rjmp	.-26     	; 0x3750 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    376a:	b8 01       	movw	r22, r16
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	0e 94 34 20 	call	0x4068	; 0x4068 <__floatunsisf>
    3774:	a7 01       	movw	r20, r14
    3776:	96 01       	movw	r18, r12
    3778:	0e 94 65 33 	call	0x66ca	; 0x66ca <__divsf3>
    377c:	03 c0       	rjmp	.+6      	; 0x3784 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	70 e0       	ldi	r23, 0x00	; 0
    3782:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    3784:	df 91       	pop	r29
    3786:	cf 91       	pop	r28
    3788:	1f 91       	pop	r17
    378a:	0f 91       	pop	r16
    378c:	ff 90       	pop	r15
    378e:	ef 90       	pop	r14
    3790:	df 90       	pop	r13
    3792:	cf 90       	pop	r12
    3794:	08 95       	ret

Disassembly of section .text.str2flaot:

00004d10 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    4d10:	cf 92       	push	r12
    4d12:	df 92       	push	r13
    4d14:	ef 92       	push	r14
    4d16:	ff 92       	push	r15
    4d18:	0f 93       	push	r16
    4d1a:	1f 93       	push	r17
    4d1c:	cf 93       	push	r28
    4d1e:	df 93       	push	r29
    4d20:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    4d22:	bc 01       	movw	r22, r24
    4d24:	80 e8       	ldi	r24, 0x80	; 128
    4d26:	0e 94 6d 33 	call	0x66da	; 0x66da <atoi>
    4d2a:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    4d2c:	c8 01       	movw	r24, r16
    4d2e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <get_decimal>
    4d32:	6b 01       	movw	r12, r22
    4d34:	7c 01       	movw	r14, r24
	return intVal+deci;
    4d36:	be 01       	movw	r22, r28
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	0e 94 34 20 	call	0x4068	; 0x4068 <__floatunsisf>
    4d40:	9b 01       	movw	r18, r22
    4d42:	ac 01       	movw	r20, r24
    4d44:	c7 01       	movw	r24, r14
    4d46:	b6 01       	movw	r22, r12
    4d48:	0e 94 87 32 	call	0x650e	; 0x650e <__addsf3>
	
	
}
    4d4c:	df 91       	pop	r29
    4d4e:	cf 91       	pop	r28
    4d50:	1f 91       	pop	r17
    4d52:	0f 91       	pop	r16
    4d54:	ff 90       	pop	r15
    4d56:	ef 90       	pop	r14
    4d58:	df 90       	pop	r13
    4d5a:	cf 90       	pop	r12
    4d5c:	08 95       	ret

Disassembly of section .text.is_float:

00004988 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    4988:	ef 92       	push	r14
    498a:	ff 92       	push	r15
    498c:	0f 93       	push	r16
    498e:	1f 93       	push	r17
    4990:	cf 93       	push	r28
    4992:	df 93       	push	r29
    4994:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4996:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    4998:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    499a:	0d c0       	rjmp	.+26     	; 0x49b6 <is_float+0x2e>
	{
		if(str[i]=='.'){
    499c:	ce 0d       	add	r28, r14
    499e:	df 1d       	adc	r29, r15
    49a0:	88 81       	ld	r24, Y
    49a2:	8e 32       	cpi	r24, 0x2E	; 46
    49a4:	21 f4       	brne	.+8      	; 0x49ae <is_float+0x26>
			if (got_dot)
    49a6:	01 11       	cpse	r16, r1
    49a8:	11 c0       	rjmp	.+34     	; 0x49cc <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    49aa:	01 e0       	ldi	r16, 0x01	; 1
    49ac:	03 c0       	rjmp	.+6      	; 0x49b4 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    49ae:	80 53       	subi	r24, 0x30	; 48
    49b0:	8a 30       	cpi	r24, 0x0A	; 10
    49b2:	70 f4       	brcc	.+28     	; 0x49d0 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    49b4:	1f 5f       	subi	r17, 0xFF	; 255
    49b6:	c1 2f       	mov	r28, r17
    49b8:	d0 e0       	ldi	r29, 0x00	; 0
    49ba:	b7 01       	movw	r22, r14
    49bc:	80 e8       	ldi	r24, 0x80	; 128
    49be:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <strlen>
    49c2:	c8 17       	cp	r28, r24
    49c4:	d9 07       	cpc	r29, r25
    49c6:	50 f3       	brcs	.-44     	; 0x499c <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    49c8:	81 e0       	ldi	r24, 0x01	; 1
    49ca:	03 c0       	rjmp	.+6      	; 0x49d2 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    49cc:	80 e0       	ldi	r24, 0x00	; 0
    49ce:	01 c0       	rjmp	.+2      	; 0x49d2 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    49d0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    49d2:	df 91       	pop	r29
    49d4:	cf 91       	pop	r28
    49d6:	1f 91       	pop	r17
    49d8:	0f 91       	pop	r16
    49da:	ff 90       	pop	r15
    49dc:	ef 90       	pop	r14
    49de:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000650c <__subsf3>:
    650c:	50 58       	subi	r21, 0x80	; 128

0000650e <__addsf3>:
    650e:	bb 27       	eor	r27, r27
    6510:	aa 27       	eor	r26, r26
    6512:	0e 94 30 19 	call	0x3260	; 0x3260 <__addsf3x>
    6516:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003260 <__addsf3x>:
    3260:	11 c0       	rjmp	.+34     	; 0x3284 <__addsf3x+0x24>
    3262:	0e 94 8d 32 	call	0x651a	; 0x651a <__fp_pscA>
    3266:	38 f0       	brcs	.+14     	; 0x3276 <__addsf3x+0x16>
    3268:	0e 94 94 32 	call	0x6528	; 0x6528 <__fp_pscB>
    326c:	20 f0       	brcs	.+8      	; 0x3276 <__addsf3x+0x16>
    326e:	39 f4       	brne	.+14     	; 0x327e <__addsf3x+0x1e>
    3270:	9f 3f       	cpi	r25, 0xFF	; 255
    3272:	19 f4       	brne	.+6      	; 0x327a <__addsf3x+0x1a>
    3274:	26 f4       	brtc	.+8      	; 0x327e <__addsf3x+0x1e>
    3276:	0c 94 92 33 	jmp	0x6724	; 0x6724 <__fp_nan>
    327a:	0e f4       	brtc	.+2      	; 0x327e <__addsf3x+0x1e>
    327c:	e0 95       	com	r30
    327e:	e7 fb       	bst	r30, 7
    3280:	0c 94 f9 32 	jmp	0x65f2	; 0x65f2 <__fp_inf>
    3284:	e9 2f       	mov	r30, r25
    3286:	0e 94 67 29 	call	0x52ce	; 0x52ce <__fp_split3>
    328a:	58 f3       	brcs	.-42     	; 0x3262 <__addsf3x+0x2>
    328c:	ba 17       	cp	r27, r26
    328e:	62 07       	cpc	r22, r18
    3290:	73 07       	cpc	r23, r19
    3292:	84 07       	cpc	r24, r20
    3294:	95 07       	cpc	r25, r21
    3296:	20 f0       	brcs	.+8      	; 0x32a0 <__addsf3x+0x40>
    3298:	79 f4       	brne	.+30     	; 0x32b8 <__addsf3x+0x58>
    329a:	a6 f5       	brtc	.+104    	; 0x3304 <__addsf3x+0xa4>
    329c:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <__fp_zero>
    32a0:	0e f4       	brtc	.+2      	; 0x32a4 <__addsf3x+0x44>
    32a2:	e0 95       	com	r30
    32a4:	0b 2e       	mov	r0, r27
    32a6:	ba 2f       	mov	r27, r26
    32a8:	a0 2d       	mov	r26, r0
    32aa:	0b 01       	movw	r0, r22
    32ac:	b9 01       	movw	r22, r18
    32ae:	90 01       	movw	r18, r0
    32b0:	0c 01       	movw	r0, r24
    32b2:	ca 01       	movw	r24, r20
    32b4:	a0 01       	movw	r20, r0
    32b6:	11 24       	eor	r1, r1
    32b8:	ff 27       	eor	r31, r31
    32ba:	59 1b       	sub	r21, r25
    32bc:	99 f0       	breq	.+38     	; 0x32e4 <__addsf3x+0x84>
    32be:	59 3f       	cpi	r21, 0xF9	; 249
    32c0:	50 f4       	brcc	.+20     	; 0x32d6 <__addsf3x+0x76>
    32c2:	50 3e       	cpi	r21, 0xE0	; 224
    32c4:	68 f1       	brcs	.+90     	; 0x3320 <__addsf3x+0xc0>
    32c6:	1a 16       	cp	r1, r26
    32c8:	f0 40       	sbci	r31, 0x00	; 0
    32ca:	a2 2f       	mov	r26, r18
    32cc:	23 2f       	mov	r18, r19
    32ce:	34 2f       	mov	r19, r20
    32d0:	44 27       	eor	r20, r20
    32d2:	58 5f       	subi	r21, 0xF8	; 248
    32d4:	f3 cf       	rjmp	.-26     	; 0x32bc <__addsf3x+0x5c>
    32d6:	46 95       	lsr	r20
    32d8:	37 95       	ror	r19
    32da:	27 95       	ror	r18
    32dc:	a7 95       	ror	r26
    32de:	f0 40       	sbci	r31, 0x00	; 0
    32e0:	53 95       	inc	r21
    32e2:	c9 f7       	brne	.-14     	; 0x32d6 <__addsf3x+0x76>
    32e4:	7e f4       	brtc	.+30     	; 0x3304 <__addsf3x+0xa4>
    32e6:	1f 16       	cp	r1, r31
    32e8:	ba 0b       	sbc	r27, r26
    32ea:	62 0b       	sbc	r22, r18
    32ec:	73 0b       	sbc	r23, r19
    32ee:	84 0b       	sbc	r24, r20
    32f0:	ba f0       	brmi	.+46     	; 0x3320 <__addsf3x+0xc0>
    32f2:	91 50       	subi	r25, 0x01	; 1
    32f4:	a1 f0       	breq	.+40     	; 0x331e <__addsf3x+0xbe>
    32f6:	ff 0f       	add	r31, r31
    32f8:	bb 1f       	adc	r27, r27
    32fa:	66 1f       	adc	r22, r22
    32fc:	77 1f       	adc	r23, r23
    32fe:	88 1f       	adc	r24, r24
    3300:	c2 f7       	brpl	.-16     	; 0x32f2 <__addsf3x+0x92>
    3302:	0e c0       	rjmp	.+28     	; 0x3320 <__addsf3x+0xc0>
    3304:	ba 0f       	add	r27, r26
    3306:	62 1f       	adc	r22, r18
    3308:	73 1f       	adc	r23, r19
    330a:	84 1f       	adc	r24, r20
    330c:	48 f4       	brcc	.+18     	; 0x3320 <__addsf3x+0xc0>
    330e:	87 95       	ror	r24
    3310:	77 95       	ror	r23
    3312:	67 95       	ror	r22
    3314:	b7 95       	ror	r27
    3316:	f7 95       	ror	r31
    3318:	9e 3f       	cpi	r25, 0xFE	; 254
    331a:	08 f0       	brcs	.+2      	; 0x331e <__addsf3x+0xbe>
    331c:	b0 cf       	rjmp	.-160    	; 0x327e <__addsf3x+0x1e>
    331e:	93 95       	inc	r25
    3320:	88 0f       	add	r24, r24
    3322:	08 f0       	brcs	.+2      	; 0x3326 <__addsf3x+0xc6>
    3324:	99 27       	eor	r25, r25
    3326:	ee 0f       	add	r30, r30
    3328:	97 95       	ror	r25
    332a:	87 95       	ror	r24
    332c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000066ca <__divsf3>:
    66ca:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__divsf3x>
    66ce:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002fd6 <__divsf3x>:
    2fd6:	10 c0       	rjmp	.+32     	; 0x2ff8 <__divsf3x+0x22>
    2fd8:	0e 94 94 32 	call	0x6528	; 0x6528 <__fp_pscB>
    2fdc:	58 f0       	brcs	.+22     	; 0x2ff4 <__divsf3x+0x1e>
    2fde:	0e 94 8d 32 	call	0x651a	; 0x651a <__fp_pscA>
    2fe2:	40 f0       	brcs	.+16     	; 0x2ff4 <__divsf3x+0x1e>
    2fe4:	29 f4       	brne	.+10     	; 0x2ff0 <__divsf3x+0x1a>
    2fe6:	5f 3f       	cpi	r21, 0xFF	; 255
    2fe8:	29 f0       	breq	.+10     	; 0x2ff4 <__divsf3x+0x1e>
    2fea:	0c 94 f9 32 	jmp	0x65f2	; 0x65f2 <__fp_inf>
    2fee:	51 11       	cpse	r21, r1
    2ff0:	0c 94 9c 32 	jmp	0x6538	; 0x6538 <__fp_szero>
    2ff4:	0c 94 92 33 	jmp	0x6724	; 0x6724 <__fp_nan>
    2ff8:	0e 94 67 29 	call	0x52ce	; 0x52ce <__fp_split3>
    2ffc:	68 f3       	brcs	.-38     	; 0x2fd8 <__divsf3x+0x2>

00002ffe <__divsf3_pse>:
    2ffe:	99 23       	and	r25, r25
    3000:	b1 f3       	breq	.-20     	; 0x2fee <__divsf3x+0x18>
    3002:	55 23       	and	r21, r21
    3004:	91 f3       	breq	.-28     	; 0x2fea <__divsf3x+0x14>
    3006:	95 1b       	sub	r25, r21
    3008:	55 0b       	sbc	r21, r21
    300a:	bb 27       	eor	r27, r27
    300c:	aa 27       	eor	r26, r26
    300e:	62 17       	cp	r22, r18
    3010:	73 07       	cpc	r23, r19
    3012:	84 07       	cpc	r24, r20
    3014:	38 f0       	brcs	.+14     	; 0x3024 <__divsf3_pse+0x26>
    3016:	9f 5f       	subi	r25, 0xFF	; 255
    3018:	5f 4f       	sbci	r21, 0xFF	; 255
    301a:	22 0f       	add	r18, r18
    301c:	33 1f       	adc	r19, r19
    301e:	44 1f       	adc	r20, r20
    3020:	aa 1f       	adc	r26, r26
    3022:	a9 f3       	breq	.-22     	; 0x300e <__divsf3_pse+0x10>
    3024:	35 d0       	rcall	.+106    	; 0x3090 <__divsf3_pse+0x92>
    3026:	0e 2e       	mov	r0, r30
    3028:	3a f0       	brmi	.+14     	; 0x3038 <__divsf3_pse+0x3a>
    302a:	e0 e8       	ldi	r30, 0x80	; 128
    302c:	32 d0       	rcall	.+100    	; 0x3092 <__divsf3_pse+0x94>
    302e:	91 50       	subi	r25, 0x01	; 1
    3030:	50 40       	sbci	r21, 0x00	; 0
    3032:	e6 95       	lsr	r30
    3034:	00 1c       	adc	r0, r0
    3036:	ca f7       	brpl	.-14     	; 0x302a <__divsf3_pse+0x2c>
    3038:	2b d0       	rcall	.+86     	; 0x3090 <__divsf3_pse+0x92>
    303a:	fe 2f       	mov	r31, r30
    303c:	29 d0       	rcall	.+82     	; 0x3090 <__divsf3_pse+0x92>
    303e:	66 0f       	add	r22, r22
    3040:	77 1f       	adc	r23, r23
    3042:	88 1f       	adc	r24, r24
    3044:	bb 1f       	adc	r27, r27
    3046:	26 17       	cp	r18, r22
    3048:	37 07       	cpc	r19, r23
    304a:	48 07       	cpc	r20, r24
    304c:	ab 07       	cpc	r26, r27
    304e:	b0 e8       	ldi	r27, 0x80	; 128
    3050:	09 f0       	breq	.+2      	; 0x3054 <__divsf3_pse+0x56>
    3052:	bb 0b       	sbc	r27, r27
    3054:	80 2d       	mov	r24, r0
    3056:	bf 01       	movw	r22, r30
    3058:	ff 27       	eor	r31, r31
    305a:	93 58       	subi	r25, 0x83	; 131
    305c:	5f 4f       	sbci	r21, 0xFF	; 255
    305e:	3a f0       	brmi	.+14     	; 0x306e <__divsf3_pse+0x70>
    3060:	9e 3f       	cpi	r25, 0xFE	; 254
    3062:	51 05       	cpc	r21, r1
    3064:	78 f0       	brcs	.+30     	; 0x3084 <__divsf3_pse+0x86>
    3066:	0c 94 f9 32 	jmp	0x65f2	; 0x65f2 <__fp_inf>
    306a:	0c 94 9c 32 	jmp	0x6538	; 0x6538 <__fp_szero>
    306e:	5f 3f       	cpi	r21, 0xFF	; 255
    3070:	e4 f3       	brlt	.-8      	; 0x306a <__divsf3_pse+0x6c>
    3072:	98 3e       	cpi	r25, 0xE8	; 232
    3074:	d4 f3       	brlt	.-12     	; 0x306a <__divsf3_pse+0x6c>
    3076:	86 95       	lsr	r24
    3078:	77 95       	ror	r23
    307a:	67 95       	ror	r22
    307c:	b7 95       	ror	r27
    307e:	f7 95       	ror	r31
    3080:	9f 5f       	subi	r25, 0xFF	; 255
    3082:	c9 f7       	brne	.-14     	; 0x3076 <__divsf3_pse+0x78>
    3084:	88 0f       	add	r24, r24
    3086:	91 1d       	adc	r25, r1
    3088:	96 95       	lsr	r25
    308a:	87 95       	ror	r24
    308c:	97 f9       	bld	r25, 7
    308e:	08 95       	ret
    3090:	e1 e0       	ldi	r30, 0x01	; 1
    3092:	66 0f       	add	r22, r22
    3094:	77 1f       	adc	r23, r23
    3096:	88 1f       	adc	r24, r24
    3098:	bb 1f       	adc	r27, r27
    309a:	62 17       	cp	r22, r18
    309c:	73 07       	cpc	r23, r19
    309e:	84 07       	cpc	r24, r20
    30a0:	ba 07       	cpc	r27, r26
    30a2:	20 f0       	brcs	.+8      	; 0x30ac <__divsf3_pse+0xae>
    30a4:	62 1b       	sub	r22, r18
    30a6:	73 0b       	sbc	r23, r19
    30a8:	84 0b       	sbc	r24, r20
    30aa:	ba 0b       	sbc	r27, r26
    30ac:	ee 1f       	adc	r30, r30
    30ae:	88 f7       	brcc	.-30     	; 0x3092 <__divsf3_pse+0x94>
    30b0:	e0 95       	com	r30
    30b2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000047c2 <__fixunssfsi>:
    47c2:	0e 94 6f 29 	call	0x52de	; 0x52de <__fp_splitA>
    47c6:	88 f0       	brcs	.+34     	; 0x47ea <__fixunssfsi+0x28>
    47c8:	9f 57       	subi	r25, 0x7F	; 127
    47ca:	98 f0       	brcs	.+38     	; 0x47f2 <__fixunssfsi+0x30>
    47cc:	b9 2f       	mov	r27, r25
    47ce:	99 27       	eor	r25, r25
    47d0:	b7 51       	subi	r27, 0x17	; 23
    47d2:	b0 f0       	brcs	.+44     	; 0x4800 <__fixunssfsi+0x3e>
    47d4:	e1 f0       	breq	.+56     	; 0x480e <__fixunssfsi+0x4c>
    47d6:	66 0f       	add	r22, r22
    47d8:	77 1f       	adc	r23, r23
    47da:	88 1f       	adc	r24, r24
    47dc:	99 1f       	adc	r25, r25
    47de:	1a f0       	brmi	.+6      	; 0x47e6 <__fixunssfsi+0x24>
    47e0:	ba 95       	dec	r27
    47e2:	c9 f7       	brne	.-14     	; 0x47d6 <__fixunssfsi+0x14>
    47e4:	14 c0       	rjmp	.+40     	; 0x480e <__fixunssfsi+0x4c>
    47e6:	b1 30       	cpi	r27, 0x01	; 1
    47e8:	91 f0       	breq	.+36     	; 0x480e <__fixunssfsi+0x4c>
    47ea:	0e 94 9b 32 	call	0x6536	; 0x6536 <__fp_zero>
    47ee:	b1 e0       	ldi	r27, 0x01	; 1
    47f0:	08 95       	ret
    47f2:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <__fp_zero>
    47f6:	67 2f       	mov	r22, r23
    47f8:	78 2f       	mov	r23, r24
    47fa:	88 27       	eor	r24, r24
    47fc:	b8 5f       	subi	r27, 0xF8	; 248
    47fe:	39 f0       	breq	.+14     	; 0x480e <__fixunssfsi+0x4c>
    4800:	b9 3f       	cpi	r27, 0xF9	; 249
    4802:	cc f3       	brlt	.-14     	; 0x47f6 <__fixunssfsi+0x34>
    4804:	86 95       	lsr	r24
    4806:	77 95       	ror	r23
    4808:	67 95       	ror	r22
    480a:	b3 95       	inc	r27
    480c:	d9 f7       	brne	.-10     	; 0x4804 <__fixunssfsi+0x42>
    480e:	3e f4       	brtc	.+14     	; 0x481e <__fixunssfsi+0x5c>
    4810:	90 95       	com	r25
    4812:	80 95       	com	r24
    4814:	70 95       	com	r23
    4816:	61 95       	neg	r22
    4818:	7f 4f       	sbci	r23, 0xFF	; 255
    481a:	8f 4f       	sbci	r24, 0xFF	; 255
    481c:	9f 4f       	sbci	r25, 0xFF	; 255
    481e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004068 <__floatunsisf>:
    4068:	e8 94       	clt
    406a:	09 c0       	rjmp	.+18     	; 0x407e <__floatsisf+0x12>

0000406c <__floatsisf>:
    406c:	97 fb       	bst	r25, 7
    406e:	3e f4       	brtc	.+14     	; 0x407e <__floatsisf+0x12>
    4070:	90 95       	com	r25
    4072:	80 95       	com	r24
    4074:	70 95       	com	r23
    4076:	61 95       	neg	r22
    4078:	7f 4f       	sbci	r23, 0xFF	; 255
    407a:	8f 4f       	sbci	r24, 0xFF	; 255
    407c:	9f 4f       	sbci	r25, 0xFF	; 255
    407e:	99 23       	and	r25, r25
    4080:	a9 f0       	breq	.+42     	; 0x40ac <__floatsisf+0x40>
    4082:	f9 2f       	mov	r31, r25
    4084:	96 e9       	ldi	r25, 0x96	; 150
    4086:	bb 27       	eor	r27, r27
    4088:	93 95       	inc	r25
    408a:	f6 95       	lsr	r31
    408c:	87 95       	ror	r24
    408e:	77 95       	ror	r23
    4090:	67 95       	ror	r22
    4092:	b7 95       	ror	r27
    4094:	f1 11       	cpse	r31, r1
    4096:	f8 cf       	rjmp	.-16     	; 0x4088 <__floatsisf+0x1c>
    4098:	fa f4       	brpl	.+62     	; 0x40d8 <__floatsisf+0x6c>
    409a:	bb 0f       	add	r27, r27
    409c:	11 f4       	brne	.+4      	; 0x40a2 <__floatsisf+0x36>
    409e:	60 ff       	sbrs	r22, 0
    40a0:	1b c0       	rjmp	.+54     	; 0x40d8 <__floatsisf+0x6c>
    40a2:	6f 5f       	subi	r22, 0xFF	; 255
    40a4:	7f 4f       	sbci	r23, 0xFF	; 255
    40a6:	8f 4f       	sbci	r24, 0xFF	; 255
    40a8:	9f 4f       	sbci	r25, 0xFF	; 255
    40aa:	16 c0       	rjmp	.+44     	; 0x40d8 <__floatsisf+0x6c>
    40ac:	88 23       	and	r24, r24
    40ae:	11 f0       	breq	.+4      	; 0x40b4 <__floatsisf+0x48>
    40b0:	96 e9       	ldi	r25, 0x96	; 150
    40b2:	11 c0       	rjmp	.+34     	; 0x40d6 <__floatsisf+0x6a>
    40b4:	77 23       	and	r23, r23
    40b6:	21 f0       	breq	.+8      	; 0x40c0 <__floatsisf+0x54>
    40b8:	9e e8       	ldi	r25, 0x8E	; 142
    40ba:	87 2f       	mov	r24, r23
    40bc:	76 2f       	mov	r23, r22
    40be:	05 c0       	rjmp	.+10     	; 0x40ca <__floatsisf+0x5e>
    40c0:	66 23       	and	r22, r22
    40c2:	71 f0       	breq	.+28     	; 0x40e0 <__floatsisf+0x74>
    40c4:	96 e8       	ldi	r25, 0x86	; 134
    40c6:	86 2f       	mov	r24, r22
    40c8:	70 e0       	ldi	r23, 0x00	; 0
    40ca:	60 e0       	ldi	r22, 0x00	; 0
    40cc:	2a f0       	brmi	.+10     	; 0x40d8 <__floatsisf+0x6c>
    40ce:	9a 95       	dec	r25
    40d0:	66 0f       	add	r22, r22
    40d2:	77 1f       	adc	r23, r23
    40d4:	88 1f       	adc	r24, r24
    40d6:	da f7       	brpl	.-10     	; 0x40ce <__floatsisf+0x62>
    40d8:	88 0f       	add	r24, r24
    40da:	96 95       	lsr	r25
    40dc:	87 95       	ror	r24
    40de:	97 f9       	bld	r25, 7
    40e0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000065f2 <__fp_inf>:
    65f2:	97 f9       	bld	r25, 7
    65f4:	9f 67       	ori	r25, 0x7F	; 127
    65f6:	80 e8       	ldi	r24, 0x80	; 128
    65f8:	70 e0       	ldi	r23, 0x00	; 0
    65fa:	60 e0       	ldi	r22, 0x00	; 0
    65fc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006724 <__fp_nan>:
    6724:	9f ef       	ldi	r25, 0xFF	; 255
    6726:	80 ec       	ldi	r24, 0xC0	; 192
    6728:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000651a <__fp_pscA>:
    651a:	00 24       	eor	r0, r0
    651c:	0a 94       	dec	r0
    651e:	16 16       	cp	r1, r22
    6520:	17 06       	cpc	r1, r23
    6522:	18 06       	cpc	r1, r24
    6524:	09 06       	cpc	r0, r25
    6526:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006528 <__fp_pscB>:
    6528:	00 24       	eor	r0, r0
    652a:	0a 94       	dec	r0
    652c:	12 16       	cp	r1, r18
    652e:	13 06       	cpc	r1, r19
    6530:	14 06       	cpc	r1, r20
    6532:	05 06       	cpc	r0, r21
    6534:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005f62 <__fp_round>:
    5f62:	09 2e       	mov	r0, r25
    5f64:	03 94       	inc	r0
    5f66:	00 0c       	add	r0, r0
    5f68:	11 f4       	brne	.+4      	; 0x5f6e <__fp_round+0xc>
    5f6a:	88 23       	and	r24, r24
    5f6c:	52 f0       	brmi	.+20     	; 0x5f82 <__fp_round+0x20>
    5f6e:	bb 0f       	add	r27, r27
    5f70:	40 f4       	brcc	.+16     	; 0x5f82 <__fp_round+0x20>
    5f72:	bf 2b       	or	r27, r31
    5f74:	11 f4       	brne	.+4      	; 0x5f7a <__fp_round+0x18>
    5f76:	60 ff       	sbrs	r22, 0
    5f78:	04 c0       	rjmp	.+8      	; 0x5f82 <__fp_round+0x20>
    5f7a:	6f 5f       	subi	r22, 0xFF	; 255
    5f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    5f7e:	8f 4f       	sbci	r24, 0xFF	; 255
    5f80:	9f 4f       	sbci	r25, 0xFF	; 255
    5f82:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000052ce <__fp_split3>:
    52ce:	57 fd       	sbrc	r21, 7
    52d0:	90 58       	subi	r25, 0x80	; 128
    52d2:	44 0f       	add	r20, r20
    52d4:	55 1f       	adc	r21, r21
    52d6:	59 f0       	breq	.+22     	; 0x52ee <__fp_splitA+0x10>
    52d8:	5f 3f       	cpi	r21, 0xFF	; 255
    52da:	71 f0       	breq	.+28     	; 0x52f8 <__fp_splitA+0x1a>
    52dc:	47 95       	ror	r20

000052de <__fp_splitA>:
    52de:	88 0f       	add	r24, r24
    52e0:	97 fb       	bst	r25, 7
    52e2:	99 1f       	adc	r25, r25
    52e4:	61 f0       	breq	.+24     	; 0x52fe <__fp_splitA+0x20>
    52e6:	9f 3f       	cpi	r25, 0xFF	; 255
    52e8:	79 f0       	breq	.+30     	; 0x5308 <__fp_splitA+0x2a>
    52ea:	87 95       	ror	r24
    52ec:	08 95       	ret
    52ee:	12 16       	cp	r1, r18
    52f0:	13 06       	cpc	r1, r19
    52f2:	14 06       	cpc	r1, r20
    52f4:	55 1f       	adc	r21, r21
    52f6:	f2 cf       	rjmp	.-28     	; 0x52dc <__fp_split3+0xe>
    52f8:	46 95       	lsr	r20
    52fa:	f1 df       	rcall	.-30     	; 0x52de <__fp_splitA>
    52fc:	08 c0       	rjmp	.+16     	; 0x530e <__fp_splitA+0x30>
    52fe:	16 16       	cp	r1, r22
    5300:	17 06       	cpc	r1, r23
    5302:	18 06       	cpc	r1, r24
    5304:	99 1f       	adc	r25, r25
    5306:	f1 cf       	rjmp	.-30     	; 0x52ea <__fp_splitA+0xc>
    5308:	86 95       	lsr	r24
    530a:	71 05       	cpc	r23, r1
    530c:	61 05       	cpc	r22, r1
    530e:	08 94       	sec
    5310:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006536 <__fp_zero>:
    6536:	e8 94       	clt

00006538 <__fp_szero>:
    6538:	bb 27       	eor	r27, r27
    653a:	66 27       	eor	r22, r22
    653c:	77 27       	eor	r23, r23
    653e:	cb 01       	movw	r24, r22
    6540:	97 f9       	bld	r25, 7
    6542:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000066d2 <__mulsf3>:
    66d2:	0e 94 c6 18 	call	0x318c	; 0x318c <__mulsf3x>
    66d6:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000318c <__mulsf3x>:
    318c:	0f c0       	rjmp	.+30     	; 0x31ac <__mulsf3x+0x20>
    318e:	0e 94 8d 32 	call	0x651a	; 0x651a <__fp_pscA>
    3192:	38 f0       	brcs	.+14     	; 0x31a2 <__mulsf3x+0x16>
    3194:	0e 94 94 32 	call	0x6528	; 0x6528 <__fp_pscB>
    3198:	20 f0       	brcs	.+8      	; 0x31a2 <__mulsf3x+0x16>
    319a:	95 23       	and	r25, r21
    319c:	11 f0       	breq	.+4      	; 0x31a2 <__mulsf3x+0x16>
    319e:	0c 94 f9 32 	jmp	0x65f2	; 0x65f2 <__fp_inf>
    31a2:	0c 94 92 33 	jmp	0x6724	; 0x6724 <__fp_nan>
    31a6:	11 24       	eor	r1, r1
    31a8:	0c 94 9c 32 	jmp	0x6538	; 0x6538 <__fp_szero>
    31ac:	0e 94 67 29 	call	0x52ce	; 0x52ce <__fp_split3>
    31b0:	70 f3       	brcs	.-36     	; 0x318e <__mulsf3x+0x2>

000031b2 <__mulsf3_pse>:
    31b2:	95 9f       	mul	r25, r21
    31b4:	c1 f3       	breq	.-16     	; 0x31a6 <__mulsf3x+0x1a>
    31b6:	95 0f       	add	r25, r21
    31b8:	50 e0       	ldi	r21, 0x00	; 0
    31ba:	55 1f       	adc	r21, r21
    31bc:	62 9f       	mul	r22, r18
    31be:	f0 01       	movw	r30, r0
    31c0:	72 9f       	mul	r23, r18
    31c2:	bb 27       	eor	r27, r27
    31c4:	f0 0d       	add	r31, r0
    31c6:	b1 1d       	adc	r27, r1
    31c8:	63 9f       	mul	r22, r19
    31ca:	aa 27       	eor	r26, r26
    31cc:	f0 0d       	add	r31, r0
    31ce:	b1 1d       	adc	r27, r1
    31d0:	aa 1f       	adc	r26, r26
    31d2:	64 9f       	mul	r22, r20
    31d4:	66 27       	eor	r22, r22
    31d6:	b0 0d       	add	r27, r0
    31d8:	a1 1d       	adc	r26, r1
    31da:	66 1f       	adc	r22, r22
    31dc:	82 9f       	mul	r24, r18
    31de:	22 27       	eor	r18, r18
    31e0:	b0 0d       	add	r27, r0
    31e2:	a1 1d       	adc	r26, r1
    31e4:	62 1f       	adc	r22, r18
    31e6:	73 9f       	mul	r23, r19
    31e8:	b0 0d       	add	r27, r0
    31ea:	a1 1d       	adc	r26, r1
    31ec:	62 1f       	adc	r22, r18
    31ee:	83 9f       	mul	r24, r19
    31f0:	a0 0d       	add	r26, r0
    31f2:	61 1d       	adc	r22, r1
    31f4:	22 1f       	adc	r18, r18
    31f6:	74 9f       	mul	r23, r20
    31f8:	33 27       	eor	r19, r19
    31fa:	a0 0d       	add	r26, r0
    31fc:	61 1d       	adc	r22, r1
    31fe:	23 1f       	adc	r18, r19
    3200:	84 9f       	mul	r24, r20
    3202:	60 0d       	add	r22, r0
    3204:	21 1d       	adc	r18, r1
    3206:	82 2f       	mov	r24, r18
    3208:	76 2f       	mov	r23, r22
    320a:	6a 2f       	mov	r22, r26
    320c:	11 24       	eor	r1, r1
    320e:	9f 57       	subi	r25, 0x7F	; 127
    3210:	50 40       	sbci	r21, 0x00	; 0
    3212:	9a f0       	brmi	.+38     	; 0x323a <__mulsf3_pse+0x88>
    3214:	f1 f0       	breq	.+60     	; 0x3252 <__mulsf3_pse+0xa0>
    3216:	88 23       	and	r24, r24
    3218:	4a f0       	brmi	.+18     	; 0x322c <__mulsf3_pse+0x7a>
    321a:	ee 0f       	add	r30, r30
    321c:	ff 1f       	adc	r31, r31
    321e:	bb 1f       	adc	r27, r27
    3220:	66 1f       	adc	r22, r22
    3222:	77 1f       	adc	r23, r23
    3224:	88 1f       	adc	r24, r24
    3226:	91 50       	subi	r25, 0x01	; 1
    3228:	50 40       	sbci	r21, 0x00	; 0
    322a:	a9 f7       	brne	.-22     	; 0x3216 <__mulsf3_pse+0x64>
    322c:	9e 3f       	cpi	r25, 0xFE	; 254
    322e:	51 05       	cpc	r21, r1
    3230:	80 f0       	brcs	.+32     	; 0x3252 <__mulsf3_pse+0xa0>
    3232:	0c 94 f9 32 	jmp	0x65f2	; 0x65f2 <__fp_inf>
    3236:	0c 94 9c 32 	jmp	0x6538	; 0x6538 <__fp_szero>
    323a:	5f 3f       	cpi	r21, 0xFF	; 255
    323c:	e4 f3       	brlt	.-8      	; 0x3236 <__mulsf3_pse+0x84>
    323e:	98 3e       	cpi	r25, 0xE8	; 232
    3240:	d4 f3       	brlt	.-12     	; 0x3236 <__mulsf3_pse+0x84>
    3242:	86 95       	lsr	r24
    3244:	77 95       	ror	r23
    3246:	67 95       	ror	r22
    3248:	b7 95       	ror	r27
    324a:	f7 95       	ror	r31
    324c:	e7 95       	ror	r30
    324e:	9f 5f       	subi	r25, 0xFF	; 255
    3250:	c1 f7       	brne	.-16     	; 0x3242 <__mulsf3_pse+0x90>
    3252:	fe 2b       	or	r31, r30
    3254:	88 0f       	add	r24, r24
    3256:	91 1d       	adc	r25, r1
    3258:	96 95       	lsr	r25
    325a:	87 95       	ror	r24
    325c:	97 f9       	bld	r25, 7
    325e:	08 95       	ret

Disassembly of section .text.avrlibc:

00000776 <vfprintf>:
 776:	a4 e1       	ldi	r26, 0x14	; 20
 778:	b0 e0       	ldi	r27, 0x00	; 0
 77a:	e1 ec       	ldi	r30, 0xC1	; 193
 77c:	f3 e0       	ldi	r31, 0x03	; 3
 77e:	0c 94 0b 2c 	jmp	0x5816	; 0x5816 <__prologue_saves__>
 782:	6c 01       	movw	r12, r24
 784:	1a 01       	movw	r2, r20
 786:	46 2e       	mov	r4, r22
 788:	59 01       	movw	r10, r18
 78a:	fc 01       	movw	r30, r24
 78c:	10 86       	std	Z+8, r1	; 0x08
 78e:	17 82       	std	Z+7, r1	; 0x07
 790:	84 81       	ldd	r24, Z+4	; 0x04
 792:	81 ff       	sbrs	r24, 1
 794:	62 c3       	rjmp	.+1732   	; 0xe5a <__EEPROM_REGION_LENGTH__+0x65a>
 796:	ce 01       	movw	r24, r28
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	9d 87       	std	Y+13, r25	; 0x0d
 79c:	8c 87       	std	Y+12, r24	; 0x0c
 79e:	a0 e8       	ldi	r26, 0x80	; 128
 7a0:	8a 8b       	std	Y+18, r24	; 0x12
 7a2:	9b 8b       	std	Y+19, r25	; 0x13
 7a4:	ac 8b       	std	Y+20, r26	; 0x14
 7a6:	f1 01       	movw	r30, r2
 7a8:	84 91       	lpm	r24, Z
 7aa:	47 fc       	sbrc	r4, 7
 7ac:	80 81       	ld	r24, Z
 7ae:	88 23       	and	r24, r24
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <vfprintf+0x3e>
 7b2:	4f c3       	rjmp	.+1694   	; 0xe52 <__EEPROM_REGION_LENGTH__+0x652>
 7b4:	44 2d       	mov	r20, r4
 7b6:	91 01       	movw	r18, r2
 7b8:	2f 5f       	subi	r18, 0xFF	; 255
 7ba:	3f 4f       	sbci	r19, 0xFF	; 255
 7bc:	4f 4f       	sbci	r20, 0xFF	; 255
 7be:	85 32       	cpi	r24, 0x25	; 37
 7c0:	19 f0       	breq	.+6      	; 0x7c8 <vfprintf+0x52>
 7c2:	19 01       	movw	r2, r18
 7c4:	44 2e       	mov	r4, r20
 7c6:	0a c0       	rjmp	.+20     	; 0x7dc <vfprintf+0x66>
 7c8:	f9 01       	movw	r30, r18
 7ca:	84 91       	lpm	r24, Z
 7cc:	47 fd       	sbrc	r20, 7
 7ce:	80 81       	ld	r24, Z
 7d0:	92 e0       	ldi	r25, 0x02	; 2
 7d2:	29 0e       	add	r2, r25
 7d4:	31 1c       	adc	r3, r1
 7d6:	41 1c       	adc	r4, r1
 7d8:	85 32       	cpi	r24, 0x25	; 37
 7da:	49 f4       	brne	.+18     	; 0x7ee <vfprintf+0x78>
 7dc:	b6 01       	movw	r22, r12
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 7e4:	bf 86       	std	Y+15, r11	; 0x0f
 7e6:	ae 86       	std	Y+14, r10	; 0x0e
 7e8:	ae 84       	ldd	r10, Y+14	; 0x0e
 7ea:	bf 84       	ldd	r11, Y+15	; 0x0f
 7ec:	dc cf       	rjmp	.-72     	; 0x7a6 <vfprintf+0x30>
 7ee:	10 e0       	ldi	r17, 0x00	; 0
 7f0:	f1 2c       	mov	r15, r1
 7f2:	00 e0       	ldi	r16, 0x00	; 0
 7f4:	00 32       	cpi	r16, 0x20	; 32
 7f6:	a0 f4       	brcc	.+40     	; 0x820 <__EEPROM_REGION_LENGTH__+0x20>
 7f8:	8b 32       	cpi	r24, 0x2B	; 43
 7fa:	69 f0       	breq	.+26     	; 0x816 <__EEPROM_REGION_LENGTH__+0x16>
 7fc:	30 f4       	brcc	.+12     	; 0x80a <__EEPROM_REGION_LENGTH__+0xa>
 7fe:	80 32       	cpi	r24, 0x20	; 32
 800:	59 f0       	breq	.+22     	; 0x818 <__EEPROM_REGION_LENGTH__+0x18>
 802:	83 32       	cpi	r24, 0x23	; 35
 804:	69 f4       	brne	.+26     	; 0x820 <__EEPROM_REGION_LENGTH__+0x20>
 806:	00 61       	ori	r16, 0x10	; 16
 808:	2c c0       	rjmp	.+88     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 80a:	8d 32       	cpi	r24, 0x2D	; 45
 80c:	39 f0       	breq	.+14     	; 0x81c <__EEPROM_REGION_LENGTH__+0x1c>
 80e:	80 33       	cpi	r24, 0x30	; 48
 810:	39 f4       	brne	.+14     	; 0x820 <__EEPROM_REGION_LENGTH__+0x20>
 812:	01 60       	ori	r16, 0x01	; 1
 814:	26 c0       	rjmp	.+76     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 816:	02 60       	ori	r16, 0x02	; 2
 818:	04 60       	ori	r16, 0x04	; 4
 81a:	23 c0       	rjmp	.+70     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 81c:	08 60       	ori	r16, 0x08	; 8
 81e:	21 c0       	rjmp	.+66     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 820:	07 fd       	sbrc	r16, 7
 822:	29 c0       	rjmp	.+82     	; 0x876 <__EEPROM_REGION_LENGTH__+0x76>
 824:	90 ed       	ldi	r25, 0xD0	; 208
 826:	98 0f       	add	r25, r24
 828:	9a 30       	cpi	r25, 0x0A	; 10
 82a:	78 f4       	brcc	.+30     	; 0x84a <__EEPROM_REGION_LENGTH__+0x4a>
 82c:	06 ff       	sbrs	r16, 6
 82e:	06 c0       	rjmp	.+12     	; 0x83c <__EEPROM_REGION_LENGTH__+0x3c>
 830:	aa e0       	ldi	r26, 0x0A	; 10
 832:	1a 9f       	mul	r17, r26
 834:	90 0d       	add	r25, r0
 836:	11 24       	eor	r1, r1
 838:	19 2f       	mov	r17, r25
 83a:	13 c0       	rjmp	.+38     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 83c:	ea e0       	ldi	r30, 0x0A	; 10
 83e:	fe 9e       	mul	r15, r30
 840:	90 0d       	add	r25, r0
 842:	11 24       	eor	r1, r1
 844:	f9 2e       	mov	r15, r25
 846:	00 62       	ori	r16, 0x20	; 32
 848:	0c c0       	rjmp	.+24     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 84a:	8e 32       	cpi	r24, 0x2E	; 46
 84c:	21 f4       	brne	.+8      	; 0x856 <__EEPROM_REGION_LENGTH__+0x56>
 84e:	06 fd       	sbrc	r16, 6
 850:	00 c3       	rjmp	.+1536   	; 0xe52 <__EEPROM_REGION_LENGTH__+0x652>
 852:	00 64       	ori	r16, 0x40	; 64
 854:	06 c0       	rjmp	.+12     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 856:	8c 36       	cpi	r24, 0x6C	; 108
 858:	11 f4       	brne	.+4      	; 0x85e <__EEPROM_REGION_LENGTH__+0x5e>
 85a:	00 68       	ori	r16, 0x80	; 128
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 85e:	88 36       	cpi	r24, 0x68	; 104
 860:	51 f4       	brne	.+20     	; 0x876 <__EEPROM_REGION_LENGTH__+0x76>
 862:	f1 01       	movw	r30, r2
 864:	84 91       	lpm	r24, Z
 866:	47 fc       	sbrc	r4, 7
 868:	80 81       	ld	r24, Z
 86a:	ff ef       	ldi	r31, 0xFF	; 255
 86c:	2f 1a       	sub	r2, r31
 86e:	3f 0a       	sbc	r3, r31
 870:	4f 0a       	sbc	r4, r31
 872:	81 11       	cpse	r24, r1
 874:	bf cf       	rjmp	.-130    	; 0x7f4 <vfprintf+0x7e>
 876:	9b eb       	ldi	r25, 0xBB	; 187
 878:	98 0f       	add	r25, r24
 87a:	93 30       	cpi	r25, 0x03	; 3
 87c:	18 f4       	brcc	.+6      	; 0x884 <__EEPROM_REGION_LENGTH__+0x84>
 87e:	00 61       	ori	r16, 0x10	; 16
 880:	80 5e       	subi	r24, 0xE0	; 224
 882:	06 c0       	rjmp	.+12     	; 0x890 <__EEPROM_REGION_LENGTH__+0x90>
 884:	9b e9       	ldi	r25, 0x9B	; 155
 886:	98 0f       	add	r25, r24
 888:	93 30       	cpi	r25, 0x03	; 3
 88a:	08 f0       	brcs	.+2      	; 0x88e <__EEPROM_REGION_LENGTH__+0x8e>
 88c:	66 c1       	rjmp	.+716    	; 0xb5a <__EEPROM_REGION_LENGTH__+0x35a>
 88e:	0f 7e       	andi	r16, 0xEF	; 239
 890:	06 ff       	sbrs	r16, 6
 892:	16 e0       	ldi	r17, 0x06	; 6
 894:	0f 73       	andi	r16, 0x3F	; 63
 896:	70 2e       	mov	r7, r16
 898:	85 36       	cpi	r24, 0x65	; 101
 89a:	21 f4       	brne	.+8      	; 0x8a4 <__EEPROM_REGION_LENGTH__+0xa4>
 89c:	20 2f       	mov	r18, r16
 89e:	20 64       	ori	r18, 0x40	; 64
 8a0:	72 2e       	mov	r7, r18
 8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <__EEPROM_REGION_LENGTH__+0xb4>
 8a4:	86 36       	cpi	r24, 0x66	; 102
 8a6:	21 f4       	brne	.+8      	; 0x8b0 <__EEPROM_REGION_LENGTH__+0xb0>
 8a8:	80 2f       	mov	r24, r16
 8aa:	80 68       	ori	r24, 0x80	; 128
 8ac:	78 2e       	mov	r7, r24
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__EEPROM_REGION_LENGTH__+0xb4>
 8b0:	11 11       	cpse	r17, r1
 8b2:	11 50       	subi	r17, 0x01	; 1
 8b4:	77 fe       	sbrs	r7, 7
 8b6:	07 c0       	rjmp	.+14     	; 0x8c6 <__EEPROM_REGION_LENGTH__+0xc6>
 8b8:	1c 33       	cpi	r17, 0x3C	; 60
 8ba:	50 f4       	brcc	.+20     	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 8bc:	ee 24       	eor	r14, r14
 8be:	e3 94       	inc	r14
 8c0:	e1 0e       	add	r14, r17
 8c2:	27 e0       	ldi	r18, 0x07	; 7
 8c4:	0b c0       	rjmp	.+22     	; 0x8dc <__EEPROM_REGION_LENGTH__+0xdc>
 8c6:	18 30       	cpi	r17, 0x08	; 8
 8c8:	38 f0       	brcs	.+14     	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 8ca:	27 e0       	ldi	r18, 0x07	; 7
 8cc:	17 e0       	ldi	r17, 0x07	; 7
 8ce:	05 c0       	rjmp	.+10     	; 0x8da <__EEPROM_REGION_LENGTH__+0xda>
 8d0:	27 e0       	ldi	r18, 0x07	; 7
 8d2:	6c e3       	ldi	r22, 0x3C	; 60
 8d4:	e6 2e       	mov	r14, r22
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__EEPROM_REGION_LENGTH__+0xdc>
 8d8:	21 2f       	mov	r18, r17
 8da:	e1 2c       	mov	r14, r1
 8dc:	f5 01       	movw	r30, r10
 8de:	34 96       	adiw	r30, 0x04	; 4
 8e0:	ff 87       	std	Y+15, r31	; 0x0f
 8e2:	ee 87       	std	Y+14, r30	; 0x0e
 8e4:	f5 01       	movw	r30, r10
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	82 81       	ldd	r24, Z+2	; 0x02
 8ec:	93 81       	ldd	r25, Z+3	; 0x03
 8ee:	0e 2d       	mov	r16, r14
 8f0:	ae 01       	movw	r20, r28
 8f2:	4f 5f       	subi	r20, 0xFF	; 255
 8f4:	5f 4f       	sbci	r21, 0xFF	; 255
 8f6:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__ftoa_engine>
 8fa:	5c 01       	movw	r10, r24
 8fc:	59 80       	ldd	r5, Y+1	; 0x01
 8fe:	50 fe       	sbrs	r5, 0
 900:	02 c0       	rjmp	.+4      	; 0x906 <__EEPROM_REGION_LENGTH__+0x106>
 902:	53 fe       	sbrs	r5, 3
 904:	06 c0       	rjmp	.+12     	; 0x912 <__EEPROM_REGION_LENGTH__+0x112>
 906:	71 fc       	sbrc	r7, 1
 908:	06 c0       	rjmp	.+12     	; 0x916 <__EEPROM_REGION_LENGTH__+0x116>
 90a:	72 fe       	sbrs	r7, 2
 90c:	06 c0       	rjmp	.+12     	; 0x91a <__EEPROM_REGION_LENGTH__+0x11a>
 90e:	00 e2       	ldi	r16, 0x20	; 32
 910:	05 c0       	rjmp	.+10     	; 0x91c <__EEPROM_REGION_LENGTH__+0x11c>
 912:	0d e2       	ldi	r16, 0x2D	; 45
 914:	03 c0       	rjmp	.+6      	; 0x91c <__EEPROM_REGION_LENGTH__+0x11c>
 916:	0b e2       	ldi	r16, 0x2B	; 43
 918:	01 c0       	rjmp	.+2      	; 0x91c <__EEPROM_REGION_LENGTH__+0x11c>
 91a:	00 e0       	ldi	r16, 0x00	; 0
 91c:	85 2d       	mov	r24, r5
 91e:	8c 70       	andi	r24, 0x0C	; 12
 920:	19 f0       	breq	.+6      	; 0x928 <__EEPROM_REGION_LENGTH__+0x128>
 922:	01 11       	cpse	r16, r1
 924:	73 c2       	rjmp	.+1254   	; 0xe0c <__EEPROM_REGION_LENGTH__+0x60c>
 926:	be c2       	rjmp	.+1404   	; 0xea4 <__EEPROM_REGION_LENGTH__+0x6a4>
 928:	77 fe       	sbrs	r7, 7
 92a:	0f c0       	rjmp	.+30     	; 0x94a <__EEPROM_REGION_LENGTH__+0x14a>
 92c:	ea 0c       	add	r14, r10
 92e:	54 fe       	sbrs	r5, 4
 930:	04 c0       	rjmp	.+8      	; 0x93a <__EEPROM_REGION_LENGTH__+0x13a>
 932:	8a 81       	ldd	r24, Y+2	; 0x02
 934:	81 33       	cpi	r24, 0x31	; 49
 936:	09 f4       	brne	.+2      	; 0x93a <__EEPROM_REGION_LENGTH__+0x13a>
 938:	ea 94       	dec	r14
 93a:	1e 14       	cp	r1, r14
 93c:	74 f5       	brge	.+92     	; 0x99a <__EEPROM_REGION_LENGTH__+0x19a>
 93e:	28 e0       	ldi	r18, 0x08	; 8
 940:	2e 15       	cp	r18, r14
 942:	78 f5       	brcc	.+94     	; 0x9a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 944:	38 e0       	ldi	r19, 0x08	; 8
 946:	e3 2e       	mov	r14, r19
 948:	2c c0       	rjmp	.+88     	; 0x9a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 94a:	76 fc       	sbrc	r7, 6
 94c:	2a c0       	rjmp	.+84     	; 0x9a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 94e:	81 2f       	mov	r24, r17
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	8a 15       	cp	r24, r10
 954:	9b 05       	cpc	r25, r11
 956:	9c f0       	brlt	.+38     	; 0x97e <__EEPROM_REGION_LENGTH__+0x17e>
 958:	8c ef       	ldi	r24, 0xFC	; 252
 95a:	a8 16       	cp	r10, r24
 95c:	8f ef       	ldi	r24, 0xFF	; 255
 95e:	b8 06       	cpc	r11, r24
 960:	74 f0       	brlt	.+28     	; 0x97e <__EEPROM_REGION_LENGTH__+0x17e>
 962:	97 2d       	mov	r25, r7
 964:	90 68       	ori	r25, 0x80	; 128
 966:	79 2e       	mov	r7, r25
 968:	0a c0       	rjmp	.+20     	; 0x97e <__EEPROM_REGION_LENGTH__+0x17e>
 96a:	e2 e0       	ldi	r30, 0x02	; 2
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	ec 0f       	add	r30, r28
 970:	fd 1f       	adc	r31, r29
 972:	e1 0f       	add	r30, r17
 974:	f1 1d       	adc	r31, r1
 976:	80 81       	ld	r24, Z
 978:	80 33       	cpi	r24, 0x30	; 48
 97a:	19 f4       	brne	.+6      	; 0x982 <__EEPROM_REGION_LENGTH__+0x182>
 97c:	11 50       	subi	r17, 0x01	; 1
 97e:	11 11       	cpse	r17, r1
 980:	f4 cf       	rjmp	.-24     	; 0x96a <__EEPROM_REGION_LENGTH__+0x16a>
 982:	77 fe       	sbrs	r7, 7
 984:	0e c0       	rjmp	.+28     	; 0x9a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 986:	ee 24       	eor	r14, r14
 988:	e3 94       	inc	r14
 98a:	e1 0e       	add	r14, r17
 98c:	81 2f       	mov	r24, r17
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	a8 16       	cp	r10, r24
 992:	b9 06       	cpc	r11, r25
 994:	2c f4       	brge	.+10     	; 0x9a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 996:	1a 19       	sub	r17, r10
 998:	04 c0       	rjmp	.+8      	; 0x9a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 99a:	ee 24       	eor	r14, r14
 99c:	e3 94       	inc	r14
 99e:	01 c0       	rjmp	.+2      	; 0x9a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 9a0:	10 e0       	ldi	r17, 0x00	; 0
 9a2:	77 fe       	sbrs	r7, 7
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <__EEPROM_REGION_LENGTH__+0x1b2>
 9a6:	1a 14       	cp	r1, r10
 9a8:	1b 04       	cpc	r1, r11
 9aa:	34 f4       	brge	.+12     	; 0x9b8 <__EEPROM_REGION_LENGTH__+0x1b8>
 9ac:	c5 01       	movw	r24, r10
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	05 c0       	rjmp	.+10     	; 0x9bc <__EEPROM_REGION_LENGTH__+0x1bc>
 9b2:	85 e0       	ldi	r24, 0x05	; 5
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <__EEPROM_REGION_LENGTH__+0x1bc>
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	01 11       	cpse	r16, r1
 9be:	01 96       	adiw	r24, 0x01	; 1
 9c0:	11 23       	and	r17, r17
 9c2:	31 f0       	breq	.+12     	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9c4:	21 2f       	mov	r18, r17
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	2f 5f       	subi	r18, 0xFF	; 255
 9ca:	3f 4f       	sbci	r19, 0xFF	; 255
 9cc:	82 0f       	add	r24, r18
 9ce:	93 1f       	adc	r25, r19
 9d0:	2f 2d       	mov	r18, r15
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	82 17       	cp	r24, r18
 9d6:	93 07       	cpc	r25, r19
 9d8:	14 f4       	brge	.+4      	; 0x9de <__EEPROM_REGION_LENGTH__+0x1de>
 9da:	f8 1a       	sub	r15, r24
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 9de:	f1 2c       	mov	r15, r1
 9e0:	87 2d       	mov	r24, r7
 9e2:	89 70       	andi	r24, 0x09	; 9
 9e4:	49 f4       	brne	.+18     	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 9e6:	ff 20       	and	r15, r15
 9e8:	39 f0       	breq	.+14     	; 0x9f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 9ea:	b6 01       	movw	r22, r12
 9ec:	80 e2       	ldi	r24, 0x20	; 32
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 9f4:	fa 94       	dec	r15
 9f6:	f7 cf       	rjmp	.-18     	; 0x9e6 <__EEPROM_REGION_LENGTH__+0x1e6>
 9f8:	00 23       	and	r16, r16
 9fa:	29 f0       	breq	.+10     	; 0xa06 <__EEPROM_REGION_LENGTH__+0x206>
 9fc:	b6 01       	movw	r22, r12
 9fe:	80 2f       	mov	r24, r16
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 a06:	73 fc       	sbrc	r7, 3
 a08:	09 c0       	rjmp	.+18     	; 0xa1c <__EEPROM_REGION_LENGTH__+0x21c>
 a0a:	ff 20       	and	r15, r15
 a0c:	39 f0       	breq	.+14     	; 0xa1c <__EEPROM_REGION_LENGTH__+0x21c>
 a0e:	b6 01       	movw	r22, r12
 a10:	80 e3       	ldi	r24, 0x30	; 48
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 a18:	fa 94       	dec	r15
 a1a:	f7 cf       	rjmp	.-18     	; 0xa0a <__EEPROM_REGION_LENGTH__+0x20a>
 a1c:	77 fe       	sbrs	r7, 7
 a1e:	49 c0       	rjmp	.+146    	; 0xab2 <__EEPROM_REGION_LENGTH__+0x2b2>
 a20:	35 01       	movw	r6, r10
 a22:	b7 fe       	sbrs	r11, 7
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <__EEPROM_REGION_LENGTH__+0x22a>
 a26:	61 2c       	mov	r6, r1
 a28:	71 2c       	mov	r7, r1
 a2a:	c5 01       	movw	r24, r10
 a2c:	86 19       	sub	r24, r6
 a2e:	97 09       	sbc	r25, r7
 a30:	88 24       	eor	r8, r8
 a32:	83 94       	inc	r8
 a34:	91 2c       	mov	r9, r1
 a36:	8c 0e       	add	r8, r28
 a38:	9d 1e       	adc	r9, r29
 a3a:	88 0e       	add	r8, r24
 a3c:	99 1e       	adc	r9, r25
 a3e:	f5 01       	movw	r30, r10
 a40:	ee 19       	sub	r30, r14
 a42:	f1 09       	sbc	r31, r1
 a44:	f9 8b       	std	Y+17, r31	; 0x11
 a46:	e8 8b       	std	Y+16, r30	; 0x10
 a48:	01 2f       	mov	r16, r17
 a4a:	10 e0       	ldi	r17, 0x00	; 0
 a4c:	11 95       	neg	r17
 a4e:	01 95       	neg	r16
 a50:	11 09       	sbc	r17, r1
 a52:	ff ef       	ldi	r31, 0xFF	; 255
 a54:	6f 16       	cp	r6, r31
 a56:	7f 06       	cpc	r7, r31
 a58:	29 f4       	brne	.+10     	; 0xa64 <__EEPROM_REGION_LENGTH__+0x264>
 a5a:	b6 01       	movw	r22, r12
 a5c:	8e e2       	ldi	r24, 0x2E	; 46
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 a64:	a6 14       	cp	r10, r6
 a66:	b7 04       	cpc	r11, r7
 a68:	44 f0       	brlt	.+16     	; 0xa7a <__EEPROM_REGION_LENGTH__+0x27a>
 a6a:	88 89       	ldd	r24, Y+16	; 0x10
 a6c:	99 89       	ldd	r25, Y+17	; 0x11
 a6e:	86 15       	cp	r24, r6
 a70:	97 05       	cpc	r25, r7
 a72:	1c f4       	brge	.+6      	; 0xa7a <__EEPROM_REGION_LENGTH__+0x27a>
 a74:	f4 01       	movw	r30, r8
 a76:	81 81       	ldd	r24, Z+1	; 0x01
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <__EEPROM_REGION_LENGTH__+0x27c>
 a7a:	80 e3       	ldi	r24, 0x30	; 48
 a7c:	f1 e0       	ldi	r31, 0x01	; 1
 a7e:	6f 1a       	sub	r6, r31
 a80:	71 08       	sbc	r7, r1
 a82:	2f ef       	ldi	r18, 0xFF	; 255
 a84:	82 1a       	sub	r8, r18
 a86:	92 0a       	sbc	r9, r18
 a88:	60 16       	cp	r6, r16
 a8a:	71 06       	cpc	r7, r17
 a8c:	2c f0       	brlt	.+10     	; 0xa98 <__EEPROM_REGION_LENGTH__+0x298>
 a8e:	b6 01       	movw	r22, r12
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 a96:	dd cf       	rjmp	.-70     	; 0xa52 <__EEPROM_REGION_LENGTH__+0x252>
 a98:	a6 14       	cp	r10, r6
 a9a:	b7 04       	cpc	r11, r7
 a9c:	39 f4       	brne	.+14     	; 0xaac <__EEPROM_REGION_LENGTH__+0x2ac>
 a9e:	9a 81       	ldd	r25, Y+2	; 0x02
 aa0:	96 33       	cpi	r25, 0x36	; 54
 aa2:	18 f4       	brcc	.+6      	; 0xaaa <__EEPROM_REGION_LENGTH__+0x2aa>
 aa4:	95 33       	cpi	r25, 0x35	; 53
 aa6:	11 f4       	brne	.+4      	; 0xaac <__EEPROM_REGION_LENGTH__+0x2ac>
 aa8:	54 fe       	sbrs	r5, 4
 aaa:	81 e3       	ldi	r24, 0x31	; 49
 aac:	b6 01       	movw	r22, r12
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	51 c0       	rjmp	.+162    	; 0xb54 <__EEPROM_REGION_LENGTH__+0x354>
 ab2:	8a 81       	ldd	r24, Y+2	; 0x02
 ab4:	81 33       	cpi	r24, 0x31	; 49
 ab6:	19 f0       	breq	.+6      	; 0xabe <__EEPROM_REGION_LENGTH__+0x2be>
 ab8:	95 2d       	mov	r25, r5
 aba:	9f 7e       	andi	r25, 0xEF	; 239
 abc:	59 2e       	mov	r5, r25
 abe:	b6 01       	movw	r22, r12
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 ac6:	11 11       	cpse	r17, r1
 ac8:	05 c0       	rjmp	.+10     	; 0xad4 <__EEPROM_REGION_LENGTH__+0x2d4>
 aca:	74 fc       	sbrc	r7, 4
 acc:	1c c0       	rjmp	.+56     	; 0xb06 <__EEPROM_REGION_LENGTH__+0x306>
 ace:	85 e6       	ldi	r24, 0x65	; 101
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	1b c0       	rjmp	.+54     	; 0xb0a <__EEPROM_REGION_LENGTH__+0x30a>
 ad4:	b6 01       	movw	r22, r12
 ad6:	8e e2       	ldi	r24, 0x2E	; 46
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 ade:	02 e0       	ldi	r16, 0x02	; 2
 ae0:	01 0f       	add	r16, r17
 ae2:	82 e0       	ldi	r24, 0x02	; 2
 ae4:	11 e0       	ldi	r17, 0x01	; 1
 ae6:	18 0f       	add	r17, r24
 ae8:	e1 e0       	ldi	r30, 0x01	; 1
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	ec 0f       	add	r30, r28
 aee:	fd 1f       	adc	r31, r29
 af0:	e8 0f       	add	r30, r24
 af2:	f1 1d       	adc	r31, r1
 af4:	80 81       	ld	r24, Z
 af6:	b6 01       	movw	r22, r12
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 afe:	81 2f       	mov	r24, r17
 b00:	10 13       	cpse	r17, r16
 b02:	f0 cf       	rjmp	.-32     	; 0xae4 <__EEPROM_REGION_LENGTH__+0x2e4>
 b04:	e2 cf       	rjmp	.-60     	; 0xaca <__EEPROM_REGION_LENGTH__+0x2ca>
 b06:	85 e4       	ldi	r24, 0x45	; 69
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	b6 01       	movw	r22, r12
 b0c:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 b10:	b7 fc       	sbrc	r11, 7
 b12:	05 c0       	rjmp	.+10     	; 0xb1e <__EEPROM_REGION_LENGTH__+0x31e>
 b14:	a1 14       	cp	r10, r1
 b16:	b1 04       	cpc	r11, r1
 b18:	39 f4       	brne	.+14     	; 0xb28 <__EEPROM_REGION_LENGTH__+0x328>
 b1a:	54 fe       	sbrs	r5, 4
 b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__EEPROM_REGION_LENGTH__+0x328>
 b1e:	b1 94       	neg	r11
 b20:	a1 94       	neg	r10
 b22:	b1 08       	sbc	r11, r1
 b24:	8d e2       	ldi	r24, 0x2D	; 45
 b26:	01 c0       	rjmp	.+2      	; 0xb2a <__EEPROM_REGION_LENGTH__+0x32a>
 b28:	8b e2       	ldi	r24, 0x2B	; 43
 b2a:	b6 01       	movw	r22, r12
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 b32:	80 e3       	ldi	r24, 0x30	; 48
 b34:	ea e0       	ldi	r30, 0x0A	; 10
 b36:	ae 16       	cp	r10, r30
 b38:	b1 04       	cpc	r11, r1
 b3a:	2c f0       	brlt	.+10     	; 0xb46 <__EEPROM_REGION_LENGTH__+0x346>
 b3c:	8f 5f       	subi	r24, 0xFF	; 255
 b3e:	aa e0       	ldi	r26, 0x0A	; 10
 b40:	aa 1a       	sub	r10, r26
 b42:	b1 08       	sbc	r11, r1
 b44:	f7 cf       	rjmp	.-18     	; 0xb34 <__EEPROM_REGION_LENGTH__+0x334>
 b46:	b6 01       	movw	r22, r12
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 b4e:	b6 01       	movw	r22, r12
 b50:	c5 01       	movw	r24, r10
 b52:	c0 96       	adiw	r24, 0x30	; 48
 b54:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 b58:	72 c1       	rjmp	.+740    	; 0xe3e <__EEPROM_REGION_LENGTH__+0x63e>
 b5a:	83 36       	cpi	r24, 0x63	; 99
 b5c:	31 f0       	breq	.+12     	; 0xb6a <__EEPROM_REGION_LENGTH__+0x36a>
 b5e:	83 37       	cpi	r24, 0x73	; 115
 b60:	91 f0       	breq	.+36     	; 0xb86 <__EEPROM_REGION_LENGTH__+0x386>
 b62:	83 35       	cpi	r24, 0x53	; 83
 b64:	09 f0       	breq	.+2      	; 0xb68 <__EEPROM_REGION_LENGTH__+0x368>
 b66:	5d c0       	rjmp	.+186    	; 0xc22 <__EEPROM_REGION_LENGTH__+0x422>
 b68:	24 c0       	rjmp	.+72     	; 0xbb2 <__EEPROM_REGION_LENGTH__+0x3b2>
 b6a:	c5 01       	movw	r24, r10
 b6c:	02 96       	adiw	r24, 0x02	; 2
 b6e:	9f 87       	std	Y+15, r25	; 0x0f
 b70:	8e 87       	std	Y+14, r24	; 0x0e
 b72:	f5 01       	movw	r30, r10
 b74:	80 81       	ld	r24, Z
 b76:	89 83       	std	Y+1, r24	; 0x01
 b78:	6a 88       	ldd	r6, Y+18	; 0x12
 b7a:	7b 88       	ldd	r7, Y+19	; 0x13
 b7c:	8c 88       	ldd	r8, Y+20	; 0x14
 b7e:	aa 24       	eor	r10, r10
 b80:	a3 94       	inc	r10
 b82:	b1 2c       	mov	r11, r1
 b84:	14 c0       	rjmp	.+40     	; 0xbae <__EEPROM_REGION_LENGTH__+0x3ae>
 b86:	c5 01       	movw	r24, r10
 b88:	03 96       	adiw	r24, 0x03	; 3
 b8a:	9f 87       	std	Y+15, r25	; 0x0f
 b8c:	8e 87       	std	Y+14, r24	; 0x0e
 b8e:	f5 01       	movw	r30, r10
 b90:	60 80       	ld	r6, Z
 b92:	71 80       	ldd	r7, Z+1	; 0x01
 b94:	82 80       	ldd	r8, Z+2	; 0x02
 b96:	06 ff       	sbrs	r16, 6
 b98:	03 c0       	rjmp	.+6      	; 0xba0 <__EEPROM_REGION_LENGTH__+0x3a0>
 b9a:	41 2f       	mov	r20, r17
 b9c:	50 e0       	ldi	r21, 0x00	; 0
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <__EEPROM_REGION_LENGTH__+0x3a4>
 ba0:	4f ef       	ldi	r20, 0xFF	; 255
 ba2:	5f ef       	ldi	r21, 0xFF	; 255
 ba4:	88 2d       	mov	r24, r8
 ba6:	b3 01       	movw	r22, r6
 ba8:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <strnlen>
 bac:	5c 01       	movw	r10, r24
 bae:	0f 77       	andi	r16, 0x7F	; 127
 bb0:	15 c0       	rjmp	.+42     	; 0xbdc <__EEPROM_REGION_LENGTH__+0x3dc>
 bb2:	c5 01       	movw	r24, r10
 bb4:	03 96       	adiw	r24, 0x03	; 3
 bb6:	9f 87       	std	Y+15, r25	; 0x0f
 bb8:	8e 87       	std	Y+14, r24	; 0x0e
 bba:	f5 01       	movw	r30, r10
 bbc:	60 80       	ld	r6, Z
 bbe:	71 80       	ldd	r7, Z+1	; 0x01
 bc0:	82 80       	ldd	r8, Z+2	; 0x02
 bc2:	06 ff       	sbrs	r16, 6
 bc4:	03 c0       	rjmp	.+6      	; 0xbcc <__EEPROM_REGION_LENGTH__+0x3cc>
 bc6:	41 2f       	mov	r20, r17
 bc8:	50 e0       	ldi	r21, 0x00	; 0
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <__EEPROM_REGION_LENGTH__+0x3d0>
 bcc:	4f ef       	ldi	r20, 0xFF	; 255
 bce:	5f ef       	ldi	r21, 0xFF	; 255
 bd0:	88 2d       	mov	r24, r8
 bd2:	b3 01       	movw	r22, r6
 bd4:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <strnlen>
 bd8:	5c 01       	movw	r10, r24
 bda:	00 68       	ori	r16, 0x80	; 128
 bdc:	03 fd       	sbrc	r16, 3
 bde:	1d c0       	rjmp	.+58     	; 0xc1a <__EEPROM_REGION_LENGTH__+0x41a>
 be0:	8f 2d       	mov	r24, r15
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	a8 16       	cp	r10, r24
 be6:	b9 06       	cpc	r11, r25
 be8:	c0 f4       	brcc	.+48     	; 0xc1a <__EEPROM_REGION_LENGTH__+0x41a>
 bea:	b6 01       	movw	r22, r12
 bec:	80 e2       	ldi	r24, 0x20	; 32
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 bf4:	fa 94       	dec	r15
 bf6:	f4 cf       	rjmp	.-24     	; 0xbe0 <__EEPROM_REGION_LENGTH__+0x3e0>
 bf8:	f3 01       	movw	r30, r6
 bfa:	84 91       	lpm	r24, Z
 bfc:	87 fc       	sbrc	r8, 7
 bfe:	80 81       	ld	r24, Z
 c00:	ff ef       	ldi	r31, 0xFF	; 255
 c02:	6f 1a       	sub	r6, r31
 c04:	7f 0a       	sbc	r7, r31
 c06:	8f 0a       	sbc	r8, r31
 c08:	b6 01       	movw	r22, r12
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 c10:	f1 10       	cpse	r15, r1
 c12:	fa 94       	dec	r15
 c14:	21 e0       	ldi	r18, 0x01	; 1
 c16:	a2 1a       	sub	r10, r18
 c18:	b1 08       	sbc	r11, r1
 c1a:	a1 14       	cp	r10, r1
 c1c:	b1 04       	cpc	r11, r1
 c1e:	61 f7       	brne	.-40     	; 0xbf8 <__EEPROM_REGION_LENGTH__+0x3f8>
 c20:	0e c1       	rjmp	.+540    	; 0xe3e <__EEPROM_REGION_LENGTH__+0x63e>
 c22:	84 36       	cpi	r24, 0x64	; 100
 c24:	11 f0       	breq	.+4      	; 0xc2a <__EEPROM_REGION_LENGTH__+0x42a>
 c26:	89 36       	cpi	r24, 0x69	; 105
 c28:	79 f5       	brne	.+94     	; 0xc88 <__EEPROM_REGION_LENGTH__+0x488>
 c2a:	c5 01       	movw	r24, r10
 c2c:	07 ff       	sbrs	r16, 7
 c2e:	09 c0       	rjmp	.+18     	; 0xc42 <__EEPROM_REGION_LENGTH__+0x442>
 c30:	04 96       	adiw	r24, 0x04	; 4
 c32:	9f 87       	std	Y+15, r25	; 0x0f
 c34:	8e 87       	std	Y+14, r24	; 0x0e
 c36:	f5 01       	movw	r30, r10
 c38:	60 81       	ld	r22, Z
 c3a:	71 81       	ldd	r23, Z+1	; 0x01
 c3c:	82 81       	ldd	r24, Z+2	; 0x02
 c3e:	93 81       	ldd	r25, Z+3	; 0x03
 c40:	0a c0       	rjmp	.+20     	; 0xc56 <__EEPROM_REGION_LENGTH__+0x456>
 c42:	02 96       	adiw	r24, 0x02	; 2
 c44:	9f 87       	std	Y+15, r25	; 0x0f
 c46:	8e 87       	std	Y+14, r24	; 0x0e
 c48:	f5 01       	movw	r30, r10
 c4a:	60 81       	ld	r22, Z
 c4c:	71 81       	ldd	r23, Z+1	; 0x01
 c4e:	07 2e       	mov	r0, r23
 c50:	00 0c       	add	r0, r0
 c52:	88 0b       	sbc	r24, r24
 c54:	99 0b       	sbc	r25, r25
 c56:	0f 76       	andi	r16, 0x6F	; 111
 c58:	e0 2e       	mov	r14, r16
 c5a:	97 ff       	sbrs	r25, 7
 c5c:	0a c0       	rjmp	.+20     	; 0xc72 <__EEPROM_REGION_LENGTH__+0x472>
 c5e:	90 95       	com	r25
 c60:	80 95       	com	r24
 c62:	70 95       	com	r23
 c64:	61 95       	neg	r22
 c66:	7f 4f       	sbci	r23, 0xFF	; 255
 c68:	8f 4f       	sbci	r24, 0xFF	; 255
 c6a:	9f 4f       	sbci	r25, 0xFF	; 255
 c6c:	f0 2f       	mov	r31, r16
 c6e:	f0 68       	ori	r31, 0x80	; 128
 c70:	ef 2e       	mov	r14, r31
 c72:	2a e0       	ldi	r18, 0x0A	; 10
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	ae 01       	movw	r20, r28
 c78:	4f 5f       	subi	r20, 0xFF	; 255
 c7a:	5f 4f       	sbci	r21, 0xFF	; 255
 c7c:	0e 94 b7 1a 	call	0x356e	; 0x356e <__ultoa_invert>
 c80:	a8 2e       	mov	r10, r24
 c82:	2c 85       	ldd	r18, Y+12	; 0x0c
 c84:	a2 1a       	sub	r10, r18
 c86:	4b c0       	rjmp	.+150    	; 0xd1e <__EEPROM_REGION_LENGTH__+0x51e>
 c88:	85 37       	cpi	r24, 0x75	; 117
 c8a:	29 f4       	brne	.+10     	; 0xc96 <__EEPROM_REGION_LENGTH__+0x496>
 c8c:	0f 7e       	andi	r16, 0xEF	; 239
 c8e:	e0 2e       	mov	r14, r16
 c90:	2a e0       	ldi	r18, 0x0A	; 10
 c92:	30 e0       	ldi	r19, 0x00	; 0
 c94:	25 c0       	rjmp	.+74     	; 0xce0 <__EEPROM_REGION_LENGTH__+0x4e0>
 c96:	90 2f       	mov	r25, r16
 c98:	99 7f       	andi	r25, 0xF9	; 249
 c9a:	e9 2e       	mov	r14, r25
 c9c:	8f 36       	cpi	r24, 0x6F	; 111
 c9e:	c1 f0       	breq	.+48     	; 0xcd0 <__EEPROM_REGION_LENGTH__+0x4d0>
 ca0:	18 f4       	brcc	.+6      	; 0xca8 <__EEPROM_REGION_LENGTH__+0x4a8>
 ca2:	88 35       	cpi	r24, 0x58	; 88
 ca4:	79 f0       	breq	.+30     	; 0xcc4 <__EEPROM_REGION_LENGTH__+0x4c4>
 ca6:	d5 c0       	rjmp	.+426    	; 0xe52 <__EEPROM_REGION_LENGTH__+0x652>
 ca8:	80 37       	cpi	r24, 0x70	; 112
 caa:	19 f0       	breq	.+6      	; 0xcb2 <__EEPROM_REGION_LENGTH__+0x4b2>
 cac:	88 37       	cpi	r24, 0x78	; 120
 cae:	21 f0       	breq	.+8      	; 0xcb8 <__EEPROM_REGION_LENGTH__+0x4b8>
 cb0:	d0 c0       	rjmp	.+416    	; 0xe52 <__EEPROM_REGION_LENGTH__+0x652>
 cb2:	a9 2f       	mov	r26, r25
 cb4:	a0 61       	ori	r26, 0x10	; 16
 cb6:	ea 2e       	mov	r14, r26
 cb8:	e4 fe       	sbrs	r14, 4
 cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__EEPROM_REGION_LENGTH__+0x4d6>
 cbc:	ee 2d       	mov	r30, r14
 cbe:	e4 60       	ori	r30, 0x04	; 4
 cc0:	ee 2e       	mov	r14, r30
 cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <__EEPROM_REGION_LENGTH__+0x4d6>
 cc4:	04 ff       	sbrs	r16, 4
 cc6:	0a c0       	rjmp	.+20     	; 0xcdc <__EEPROM_REGION_LENGTH__+0x4dc>
 cc8:	f9 2f       	mov	r31, r25
 cca:	f6 60       	ori	r31, 0x06	; 6
 ccc:	ef 2e       	mov	r14, r31
 cce:	06 c0       	rjmp	.+12     	; 0xcdc <__EEPROM_REGION_LENGTH__+0x4dc>
 cd0:	28 e0       	ldi	r18, 0x08	; 8
 cd2:	30 e0       	ldi	r19, 0x00	; 0
 cd4:	05 c0       	rjmp	.+10     	; 0xce0 <__EEPROM_REGION_LENGTH__+0x4e0>
 cd6:	20 e1       	ldi	r18, 0x10	; 16
 cd8:	30 e0       	ldi	r19, 0x00	; 0
 cda:	02 c0       	rjmp	.+4      	; 0xce0 <__EEPROM_REGION_LENGTH__+0x4e0>
 cdc:	20 e1       	ldi	r18, 0x10	; 16
 cde:	32 e0       	ldi	r19, 0x02	; 2
 ce0:	c5 01       	movw	r24, r10
 ce2:	e7 fe       	sbrs	r14, 7
 ce4:	09 c0       	rjmp	.+18     	; 0xcf8 <__EEPROM_REGION_LENGTH__+0x4f8>
 ce6:	04 96       	adiw	r24, 0x04	; 4
 ce8:	9f 87       	std	Y+15, r25	; 0x0f
 cea:	8e 87       	std	Y+14, r24	; 0x0e
 cec:	f5 01       	movw	r30, r10
 cee:	60 81       	ld	r22, Z
 cf0:	71 81       	ldd	r23, Z+1	; 0x01
 cf2:	82 81       	ldd	r24, Z+2	; 0x02
 cf4:	93 81       	ldd	r25, Z+3	; 0x03
 cf6:	08 c0       	rjmp	.+16     	; 0xd08 <__EEPROM_REGION_LENGTH__+0x508>
 cf8:	02 96       	adiw	r24, 0x02	; 2
 cfa:	9f 87       	std	Y+15, r25	; 0x0f
 cfc:	8e 87       	std	Y+14, r24	; 0x0e
 cfe:	f5 01       	movw	r30, r10
 d00:	60 81       	ld	r22, Z
 d02:	71 81       	ldd	r23, Z+1	; 0x01
 d04:	80 e0       	ldi	r24, 0x00	; 0
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	ae 01       	movw	r20, r28
 d0a:	4f 5f       	subi	r20, 0xFF	; 255
 d0c:	5f 4f       	sbci	r21, 0xFF	; 255
 d0e:	0e 94 b7 1a 	call	0x356e	; 0x356e <__ultoa_invert>
 d12:	a8 2e       	mov	r10, r24
 d14:	fc 85       	ldd	r31, Y+12	; 0x0c
 d16:	af 1a       	sub	r10, r31
 d18:	2e 2d       	mov	r18, r14
 d1a:	2f 77       	andi	r18, 0x7F	; 127
 d1c:	e2 2e       	mov	r14, r18
 d1e:	e6 fe       	sbrs	r14, 6
 d20:	0b c0       	rjmp	.+22     	; 0xd38 <__EEPROM_REGION_LENGTH__+0x538>
 d22:	0e 2d       	mov	r16, r14
 d24:	0e 7f       	andi	r16, 0xFE	; 254
 d26:	a1 16       	cp	r10, r17
 d28:	50 f4       	brcc	.+20     	; 0xd3e <__EEPROM_REGION_LENGTH__+0x53e>
 d2a:	e4 fe       	sbrs	r14, 4
 d2c:	0a c0       	rjmp	.+20     	; 0xd42 <__EEPROM_REGION_LENGTH__+0x542>
 d2e:	e2 fc       	sbrc	r14, 2
 d30:	08 c0       	rjmp	.+16     	; 0xd42 <__EEPROM_REGION_LENGTH__+0x542>
 d32:	0e 2d       	mov	r16, r14
 d34:	0e 7e       	andi	r16, 0xEE	; 238
 d36:	05 c0       	rjmp	.+10     	; 0xd42 <__EEPROM_REGION_LENGTH__+0x542>
 d38:	ba 2c       	mov	r11, r10
 d3a:	0e 2d       	mov	r16, r14
 d3c:	03 c0       	rjmp	.+6      	; 0xd44 <__EEPROM_REGION_LENGTH__+0x544>
 d3e:	ba 2c       	mov	r11, r10
 d40:	01 c0       	rjmp	.+2      	; 0xd44 <__EEPROM_REGION_LENGTH__+0x544>
 d42:	b1 2e       	mov	r11, r17
 d44:	04 ff       	sbrs	r16, 4
 d46:	0d c0       	rjmp	.+26     	; 0xd62 <__EEPROM_REGION_LENGTH__+0x562>
 d48:	fe 01       	movw	r30, r28
 d4a:	ea 0d       	add	r30, r10
 d4c:	f1 1d       	adc	r31, r1
 d4e:	80 81       	ld	r24, Z
 d50:	80 33       	cpi	r24, 0x30	; 48
 d52:	11 f4       	brne	.+4      	; 0xd58 <__EEPROM_REGION_LENGTH__+0x558>
 d54:	09 7e       	andi	r16, 0xE9	; 233
 d56:	09 c0       	rjmp	.+18     	; 0xd6a <__EEPROM_REGION_LENGTH__+0x56a>
 d58:	02 ff       	sbrs	r16, 2
 d5a:	06 c0       	rjmp	.+12     	; 0xd68 <__EEPROM_REGION_LENGTH__+0x568>
 d5c:	b3 94       	inc	r11
 d5e:	b3 94       	inc	r11
 d60:	04 c0       	rjmp	.+8      	; 0xd6a <__EEPROM_REGION_LENGTH__+0x56a>
 d62:	80 2f       	mov	r24, r16
 d64:	86 78       	andi	r24, 0x86	; 134
 d66:	09 f0       	breq	.+2      	; 0xd6a <__EEPROM_REGION_LENGTH__+0x56a>
 d68:	b3 94       	inc	r11
 d6a:	03 fd       	sbrc	r16, 3
 d6c:	11 c0       	rjmp	.+34     	; 0xd90 <__EEPROM_REGION_LENGTH__+0x590>
 d6e:	00 ff       	sbrs	r16, 0
 d70:	06 c0       	rjmp	.+12     	; 0xd7e <__EEPROM_REGION_LENGTH__+0x57e>
 d72:	bf 14       	cp	r11, r15
 d74:	88 f4       	brcc	.+34     	; 0xd98 <__EEPROM_REGION_LENGTH__+0x598>
 d76:	fa 0c       	add	r15, r10
 d78:	1f 2d       	mov	r17, r15
 d7a:	1b 19       	sub	r17, r11
 d7c:	0e c0       	rjmp	.+28     	; 0xd9a <__EEPROM_REGION_LENGTH__+0x59a>
 d7e:	bf 14       	cp	r11, r15
 d80:	60 f4       	brcc	.+24     	; 0xd9a <__EEPROM_REGION_LENGTH__+0x59a>
 d82:	b6 01       	movw	r22, r12
 d84:	80 e2       	ldi	r24, 0x20	; 32
 d86:	90 e0       	ldi	r25, 0x00	; 0
 d88:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 d8c:	b3 94       	inc	r11
 d8e:	f7 cf       	rjmp	.-18     	; 0xd7e <__EEPROM_REGION_LENGTH__+0x57e>
 d90:	bf 14       	cp	r11, r15
 d92:	18 f4       	brcc	.+6      	; 0xd9a <__EEPROM_REGION_LENGTH__+0x59a>
 d94:	fb 18       	sub	r15, r11
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <__EEPROM_REGION_LENGTH__+0x59c>
 d98:	1a 2d       	mov	r17, r10
 d9a:	f1 2c       	mov	r15, r1
 d9c:	04 ff       	sbrs	r16, 4
 d9e:	10 c0       	rjmp	.+32     	; 0xdc0 <__EEPROM_REGION_LENGTH__+0x5c0>
 da0:	b6 01       	movw	r22, r12
 da2:	80 e3       	ldi	r24, 0x30	; 48
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 daa:	02 ff       	sbrs	r16, 2
 dac:	17 c0       	rjmp	.+46     	; 0xddc <__EEPROM_REGION_LENGTH__+0x5dc>
 dae:	01 fd       	sbrc	r16, 1
 db0:	03 c0       	rjmp	.+6      	; 0xdb8 <__EEPROM_REGION_LENGTH__+0x5b8>
 db2:	88 e7       	ldi	r24, 0x78	; 120
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	02 c0       	rjmp	.+4      	; 0xdbc <__EEPROM_REGION_LENGTH__+0x5bc>
 db8:	88 e5       	ldi	r24, 0x58	; 88
 dba:	90 e0       	ldi	r25, 0x00	; 0
 dbc:	b6 01       	movw	r22, r12
 dbe:	0c c0       	rjmp	.+24     	; 0xdd8 <__EEPROM_REGION_LENGTH__+0x5d8>
 dc0:	80 2f       	mov	r24, r16
 dc2:	86 78       	andi	r24, 0x86	; 134
 dc4:	59 f0       	breq	.+22     	; 0xddc <__EEPROM_REGION_LENGTH__+0x5dc>
 dc6:	01 ff       	sbrs	r16, 1
 dc8:	02 c0       	rjmp	.+4      	; 0xdce <__EEPROM_REGION_LENGTH__+0x5ce>
 dca:	8b e2       	ldi	r24, 0x2B	; 43
 dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <__EEPROM_REGION_LENGTH__+0x5d0>
 dce:	80 e2       	ldi	r24, 0x20	; 32
 dd0:	07 fd       	sbrc	r16, 7
 dd2:	8d e2       	ldi	r24, 0x2D	; 45
 dd4:	b6 01       	movw	r22, r12
 dd6:	90 e0       	ldi	r25, 0x00	; 0
 dd8:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 ddc:	a1 16       	cp	r10, r17
 dde:	38 f4       	brcc	.+14     	; 0xdee <__EEPROM_REGION_LENGTH__+0x5ee>
 de0:	b6 01       	movw	r22, r12
 de2:	80 e3       	ldi	r24, 0x30	; 48
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 dea:	11 50       	subi	r17, 0x01	; 1
 dec:	f7 cf       	rjmp	.-18     	; 0xddc <__EEPROM_REGION_LENGTH__+0x5dc>
 dee:	aa 94       	dec	r10
 df0:	e1 e0       	ldi	r30, 0x01	; 1
 df2:	f0 e0       	ldi	r31, 0x00	; 0
 df4:	ec 0f       	add	r30, r28
 df6:	fd 1f       	adc	r31, r29
 df8:	ea 0d       	add	r30, r10
 dfa:	f1 1d       	adc	r31, r1
 dfc:	80 81       	ld	r24, Z
 dfe:	b6 01       	movw	r22, r12
 e00:	90 e0       	ldi	r25, 0x00	; 0
 e02:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 e06:	a1 10       	cpse	r10, r1
 e08:	f2 cf       	rjmp	.-28     	; 0xdee <__EEPROM_REGION_LENGTH__+0x5ee>
 e0a:	19 c0       	rjmp	.+50     	; 0xe3e <__EEPROM_REGION_LENGTH__+0x63e>
 e0c:	f4 e0       	ldi	r31, 0x04	; 4
 e0e:	ff 15       	cp	r31, r15
 e10:	80 f5       	brcc	.+96     	; 0xe72 <__EEPROM_REGION_LENGTH__+0x672>
 e12:	84 e0       	ldi	r24, 0x04	; 4
 e14:	f8 1a       	sub	r15, r24
 e16:	73 fe       	sbrs	r7, 3
 e18:	23 c0       	rjmp	.+70     	; 0xe60 <__EEPROM_REGION_LENGTH__+0x660>
 e1a:	01 11       	cpse	r16, r1
 e1c:	2b c0       	rjmp	.+86     	; 0xe74 <__EEPROM_REGION_LENGTH__+0x674>
 e1e:	53 fe       	sbrs	r5, 3
 e20:	2f c0       	rjmp	.+94     	; 0xe80 <__EEPROM_REGION_LENGTH__+0x680>
 e22:	5a e5       	ldi	r21, 0x5A	; 90
 e24:	85 2e       	mov	r8, r21
 e26:	57 e0       	ldi	r21, 0x07	; 7
 e28:	95 2e       	mov	r9, r21
 e2a:	50 e0       	ldi	r21, 0x00	; 0
 e2c:	a5 2e       	mov	r10, r21
 e2e:	07 2d       	mov	r16, r7
 e30:	00 71       	andi	r16, 0x10	; 16
 e32:	f4 01       	movw	r30, r8
 e34:	84 91       	lpm	r24, Z
 e36:	a7 fc       	sbrc	r10, 7
 e38:	80 81       	ld	r24, Z
 e3a:	81 11       	cpse	r24, r1
 e3c:	28 c0       	rjmp	.+80     	; 0xe8e <__EEPROM_REGION_LENGTH__+0x68e>
 e3e:	ff 20       	and	r15, r15
 e40:	09 f4       	brne	.+2      	; 0xe44 <__EEPROM_REGION_LENGTH__+0x644>
 e42:	d2 cc       	rjmp	.-1628   	; 0x7e8 <vfprintf+0x72>
 e44:	b6 01       	movw	r22, r12
 e46:	80 e2       	ldi	r24, 0x20	; 32
 e48:	90 e0       	ldi	r25, 0x00	; 0
 e4a:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 e4e:	fa 94       	dec	r15
 e50:	f6 cf       	rjmp	.-20     	; 0xe3e <__EEPROM_REGION_LENGTH__+0x63e>
 e52:	f6 01       	movw	r30, r12
 e54:	87 81       	ldd	r24, Z+7	; 0x07
 e56:	90 85       	ldd	r25, Z+8	; 0x08
 e58:	2c c0       	rjmp	.+88     	; 0xeb2 <__EEPROM_REGION_LENGTH__+0x6b2>
 e5a:	8f ef       	ldi	r24, 0xFF	; 255
 e5c:	9f ef       	ldi	r25, 0xFF	; 255
 e5e:	29 c0       	rjmp	.+82     	; 0xeb2 <__EEPROM_REGION_LENGTH__+0x6b2>
 e60:	b6 01       	movw	r22, r12
 e62:	80 e2       	ldi	r24, 0x20	; 32
 e64:	90 e0       	ldi	r25, 0x00	; 0
 e66:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 e6a:	fa 94       	dec	r15
 e6c:	f1 10       	cpse	r15, r1
 e6e:	f8 cf       	rjmp	.-16     	; 0xe60 <__EEPROM_REGION_LENGTH__+0x660>
 e70:	d4 cf       	rjmp	.-88     	; 0xe1a <__EEPROM_REGION_LENGTH__+0x61a>
 e72:	f1 2c       	mov	r15, r1
 e74:	b6 01       	movw	r22, r12
 e76:	80 2f       	mov	r24, r16
 e78:	90 e0       	ldi	r25, 0x00	; 0
 e7a:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 e7e:	cf cf       	rjmp	.-98     	; 0xe1e <__EEPROM_REGION_LENGTH__+0x61e>
 e80:	46 e5       	ldi	r20, 0x56	; 86
 e82:	84 2e       	mov	r8, r20
 e84:	47 e0       	ldi	r20, 0x07	; 7
 e86:	94 2e       	mov	r9, r20
 e88:	40 e0       	ldi	r20, 0x00	; 0
 e8a:	a4 2e       	mov	r10, r20
 e8c:	d0 cf       	rjmp	.-96     	; 0xe2e <__EEPROM_REGION_LENGTH__+0x62e>
 e8e:	01 11       	cpse	r16, r1
 e90:	80 52       	subi	r24, 0x20	; 32
 e92:	b6 01       	movw	r22, r12
 e94:	90 e0       	ldi	r25, 0x00	; 0
 e96:	0e 94 25 21 	call	0x424a	; 0x424a <fputc>
 e9a:	ff ef       	ldi	r31, 0xFF	; 255
 e9c:	8f 1a       	sub	r8, r31
 e9e:	9f 0a       	sbc	r9, r31
 ea0:	af 0a       	sbc	r10, r31
 ea2:	c7 cf       	rjmp	.-114    	; 0xe32 <__EEPROM_REGION_LENGTH__+0x632>
 ea4:	23 e0       	ldi	r18, 0x03	; 3
 ea6:	2f 15       	cp	r18, r15
 ea8:	10 f4       	brcc	.+4      	; 0xeae <__EEPROM_REGION_LENGTH__+0x6ae>
 eaa:	83 e0       	ldi	r24, 0x03	; 3
 eac:	b3 cf       	rjmp	.-154    	; 0xe14 <__EEPROM_REGION_LENGTH__+0x614>
 eae:	f1 2c       	mov	r15, r1
 eb0:	b6 cf       	rjmp	.-148    	; 0xe1e <__EEPROM_REGION_LENGTH__+0x61e>
 eb2:	64 96       	adiw	r28, 0x14	; 20
 eb4:	e2 e1       	ldi	r30, 0x12	; 18
 eb6:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <__epilogue_restores__>

Disassembly of section .text.libgcc:

000065fe <__tablejump2__>:
    65fe:	ee 0f       	add	r30, r30
    6600:	ff 1f       	adc	r31, r31
    6602:	05 90       	lpm	r0, Z+
    6604:	f4 91       	lpm	r31, Z
    6606:	e0 2d       	mov	r30, r0
    6608:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

000060da <__umulhisi3>:
    60da:	a2 9f       	mul	r26, r18
    60dc:	b0 01       	movw	r22, r0
    60de:	b3 9f       	mul	r27, r19
    60e0:	c0 01       	movw	r24, r0
    60e2:	a3 9f       	mul	r26, r19
    60e4:	70 0d       	add	r23, r0
    60e6:	81 1d       	adc	r24, r1
    60e8:	11 24       	eor	r1, r1
    60ea:	91 1d       	adc	r25, r1
    60ec:	b2 9f       	mul	r27, r18
    60ee:	70 0d       	add	r23, r0
    60f0:	81 1d       	adc	r24, r1
    60f2:	11 24       	eor	r1, r1
    60f4:	91 1d       	adc	r25, r1
    60f6:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00005816 <__prologue_saves__>:
    5816:	2f 92       	push	r2
    5818:	3f 92       	push	r3
    581a:	4f 92       	push	r4
    581c:	5f 92       	push	r5
    581e:	6f 92       	push	r6
    5820:	7f 92       	push	r7
    5822:	8f 92       	push	r8
    5824:	9f 92       	push	r9
    5826:	af 92       	push	r10
    5828:	bf 92       	push	r11
    582a:	cf 92       	push	r12
    582c:	df 92       	push	r13
    582e:	ef 92       	push	r14
    5830:	ff 92       	push	r15
    5832:	0f 93       	push	r16
    5834:	1f 93       	push	r17
    5836:	cf 93       	push	r28
    5838:	df 93       	push	r29
    583a:	cd b7       	in	r28, 0x3d	; 61
    583c:	de b7       	in	r29, 0x3e	; 62
    583e:	ca 1b       	sub	r28, r26
    5840:	db 0b       	sbc	r29, r27
    5842:	0f b6       	in	r0, 0x3f	; 63
    5844:	f8 94       	cli
    5846:	de bf       	out	0x3e, r29	; 62
    5848:	0f be       	out	0x3f, r0	; 63
    584a:	cd bf       	out	0x3d, r28	; 61
    584c:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000058ba <__epilogue_restores__>:
    58ba:	2a 88       	ldd	r2, Y+18	; 0x12
    58bc:	39 88       	ldd	r3, Y+17	; 0x11
    58be:	48 88       	ldd	r4, Y+16	; 0x10
    58c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    58c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    58c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    58c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    58c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    58ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    58cc:	b9 84       	ldd	r11, Y+9	; 0x09
    58ce:	c8 84       	ldd	r12, Y+8	; 0x08
    58d0:	df 80       	ldd	r13, Y+7	; 0x07
    58d2:	ee 80       	ldd	r14, Y+6	; 0x06
    58d4:	fd 80       	ldd	r15, Y+5	; 0x05
    58d6:	0c 81       	ldd	r16, Y+4	; 0x04
    58d8:	1b 81       	ldd	r17, Y+3	; 0x03
    58da:	aa 81       	ldd	r26, Y+2	; 0x02
    58dc:	b9 81       	ldd	r27, Y+1	; 0x01
    58de:	ce 0f       	add	r28, r30
    58e0:	d1 1d       	adc	r29, r1
    58e2:	0f b6       	in	r0, 0x3f	; 63
    58e4:	f8 94       	cli
    58e6:	de bf       	out	0x3e, r29	; 62
    58e8:	0f be       	out	0x3f, r0	; 63
    58ea:	cd bf       	out	0x3d, r28	; 61
    58ec:	ed 01       	movw	r28, r26
    58ee:	08 95       	ret

Disassembly of section .text.avrlibc:

000066da <atoi>:
    66da:	0e 94 a2 32 	call	0x6544	; 0x6544 <atol>
    66de:	cb 01       	movw	r24, r22
    66e0:	08 95       	ret

Disassembly of section .text.avrlibc:

00006544 <atol>:
    6544:	2a e0       	ldi	r18, 0x0A	; 10
    6546:	30 e0       	ldi	r19, 0x00	; 0
    6548:	40 e0       	ldi	r20, 0x00	; 0
    654a:	50 e0       	ldi	r21, 0x00	; 0
    654c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <strtol>
    6550:	08 95       	ret

Disassembly of section .text.avrlibc:

000011b4 <strtol>:
    11b4:	2f 92       	push	r2
    11b6:	3f 92       	push	r3
    11b8:	4f 92       	push	r4
    11ba:	5f 92       	push	r5
    11bc:	6f 92       	push	r6
    11be:	7f 92       	push	r7
    11c0:	8f 92       	push	r8
    11c2:	af 92       	push	r10
    11c4:	bf 92       	push	r11
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <strtol+0x22>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <strtol+0x24>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <strtol+0x26>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	3b 01       	movw	r6, r22
    11e0:	88 2e       	mov	r8, r24
    11e2:	5a 01       	movw	r10, r20
    11e4:	19 01       	movw	r2, r18
    11e6:	41 15       	cp	r20, r1
    11e8:	51 05       	cpc	r21, r1
    11ea:	21 f0       	breq	.+8      	; 0x11f4 <strtol+0x40>
    11ec:	fa 01       	movw	r30, r20
    11ee:	60 83       	st	Z, r22
    11f0:	71 83       	std	Z+1, r23	; 0x01
    11f2:	82 83       	std	Z+2, r24	; 0x02
    11f4:	21 14       	cp	r2, r1
    11f6:	31 04       	cpc	r3, r1
    11f8:	29 f0       	breq	.+10     	; 0x1204 <strtol+0x50>
    11fa:	c1 01       	movw	r24, r2
    11fc:	02 97       	sbiw	r24, 0x02	; 2
    11fe:	83 97       	sbiw	r24, 0x23	; 35
    1200:	08 f0       	brcs	.+2      	; 0x1204 <strtol+0x50>
    1202:	1a c1       	rjmp	.+564    	; 0x1438 <strtol+0x284>
    1204:	e8 2c       	mov	r14, r8
    1206:	63 01       	movw	r12, r6
    1208:	ff ef       	ldi	r31, 0xFF	; 255
    120a:	cf 1a       	sub	r12, r31
    120c:	df 0a       	sbc	r13, r31
    120e:	ef 0a       	sbc	r14, r31
    1210:	f3 01       	movw	r30, r6
    1212:	14 91       	lpm	r17, Z
    1214:	87 fc       	sbrc	r8, 7
    1216:	10 81       	ld	r17, Z
    1218:	81 2f       	mov	r24, r17
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <isspace>
    1220:	4c 2d       	mov	r20, r12
    1222:	3d 2d       	mov	r19, r13
    1224:	2e 2d       	mov	r18, r14
    1226:	89 2b       	or	r24, r25
    1228:	19 f0       	breq	.+6      	; 0x1230 <strtol+0x7c>
    122a:	36 01       	movw	r6, r12
    122c:	8e 2c       	mov	r8, r14
    122e:	ea cf       	rjmp	.-44     	; 0x1204 <strtol+0x50>
    1230:	1d 32       	cpi	r17, 0x2D	; 45
    1232:	69 f4       	brne	.+26     	; 0x124e <strtol+0x9a>
    1234:	e8 2c       	mov	r14, r8
    1236:	63 01       	movw	r12, r6
    1238:	52 e0       	ldi	r21, 0x02	; 2
    123a:	c5 0e       	add	r12, r21
    123c:	d1 1c       	adc	r13, r1
    123e:	e1 1c       	adc	r14, r1
    1240:	e4 2f       	mov	r30, r20
    1242:	f3 2f       	mov	r31, r19
    1244:	14 91       	lpm	r17, Z
    1246:	27 fd       	sbrc	r18, 7
    1248:	10 81       	ld	r17, Z
    124a:	01 e0       	ldi	r16, 0x01	; 1
    124c:	0e c0       	rjmp	.+28     	; 0x126a <strtol+0xb6>
    124e:	1b 32       	cpi	r17, 0x2B	; 43
    1250:	59 f4       	brne	.+22     	; 0x1268 <strtol+0xb4>
    1252:	e8 2c       	mov	r14, r8
    1254:	63 01       	movw	r12, r6
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	c8 0e       	add	r12, r24
    125a:	d1 1c       	adc	r13, r1
    125c:	e1 1c       	adc	r14, r1
    125e:	e4 2f       	mov	r30, r20
    1260:	f3 2f       	mov	r31, r19
    1262:	14 91       	lpm	r17, Z
    1264:	27 fd       	sbrc	r18, 7
    1266:	10 81       	ld	r17, Z
    1268:	00 e0       	ldi	r16, 0x00	; 0
    126a:	21 14       	cp	r2, r1
    126c:	31 04       	cpc	r3, r1
    126e:	09 f1       	breq	.+66     	; 0x12b2 <strtol+0xfe>
    1270:	90 e1       	ldi	r25, 0x10	; 16
    1272:	29 16       	cp	r2, r25
    1274:	31 04       	cpc	r3, r1
    1276:	29 f4       	brne	.+10     	; 0x1282 <strtol+0xce>
    1278:	3f c0       	rjmp	.+126    	; 0x12f8 <strtol+0x144>
    127a:	10 e3       	ldi	r17, 0x30	; 48
    127c:	21 14       	cp	r2, r1
    127e:	31 04       	cpc	r3, r1
    1280:	21 f1       	breq	.+72     	; 0x12ca <strtol+0x116>
    1282:	f8 e0       	ldi	r31, 0x08	; 8
    1284:	2f 16       	cp	r2, r31
    1286:	31 04       	cpc	r3, r1
    1288:	01 f1       	breq	.+64     	; 0x12ca <strtol+0x116>
    128a:	54 f4       	brge	.+20     	; 0x12a0 <strtol+0xec>
    128c:	32 e0       	ldi	r19, 0x02	; 2
    128e:	23 16       	cp	r2, r19
    1290:	31 04       	cpc	r3, r1
    1292:	21 f5       	brne	.+72     	; 0x12dc <strtol+0x128>
    1294:	41 2c       	mov	r4, r1
    1296:	51 2c       	mov	r5, r1
    1298:	61 2c       	mov	r6, r1
    129a:	50 e4       	ldi	r21, 0x40	; 64
    129c:	75 2e       	mov	r7, r21
    129e:	4b c0       	rjmp	.+150    	; 0x1336 <strtol+0x182>
    12a0:	4a e0       	ldi	r20, 0x0A	; 10
    12a2:	24 16       	cp	r2, r20
    12a4:	31 04       	cpc	r3, r1
    12a6:	39 f0       	breq	.+14     	; 0x12b6 <strtol+0x102>
    12a8:	50 e1       	ldi	r21, 0x10	; 16
    12aa:	25 16       	cp	r2, r21
    12ac:	31 04       	cpc	r3, r1
    12ae:	b1 f4       	brne	.+44     	; 0x12dc <strtol+0x128>
    12b0:	3d c0       	rjmp	.+122    	; 0x132c <strtol+0x178>
    12b2:	10 33       	cpi	r17, 0x30	; 48
    12b4:	19 f1       	breq	.+70     	; 0x12fc <strtol+0x148>
    12b6:	3a e0       	ldi	r19, 0x0A	; 10
    12b8:	23 2e       	mov	r2, r19
    12ba:	31 2c       	mov	r3, r1
    12bc:	4c ec       	ldi	r20, 0xCC	; 204
    12be:	44 2e       	mov	r4, r20
    12c0:	54 2c       	mov	r5, r4
    12c2:	64 2c       	mov	r6, r4
    12c4:	4c e0       	ldi	r20, 0x0C	; 12
    12c6:	74 2e       	mov	r7, r20
    12c8:	36 c0       	rjmp	.+108    	; 0x1336 <strtol+0x182>
    12ca:	98 e0       	ldi	r25, 0x08	; 8
    12cc:	29 2e       	mov	r2, r25
    12ce:	31 2c       	mov	r3, r1
    12d0:	41 2c       	mov	r4, r1
    12d2:	51 2c       	mov	r5, r1
    12d4:	61 2c       	mov	r6, r1
    12d6:	20 e1       	ldi	r18, 0x10	; 16
    12d8:	72 2e       	mov	r7, r18
    12da:	2d c0       	rjmp	.+90     	; 0x1336 <strtol+0x182>
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e8       	ldi	r25, 0x80	; 128
    12e4:	91 01       	movw	r18, r2
    12e6:	03 2c       	mov	r0, r3
    12e8:	00 0c       	add	r0, r0
    12ea:	44 0b       	sbc	r20, r20
    12ec:	55 0b       	sbc	r21, r21
    12ee:	0e 94 ab 29 	call	0x5356	; 0x5356 <__udivmodsi4>
    12f2:	29 01       	movw	r4, r18
    12f4:	3a 01       	movw	r6, r20
    12f6:	1f c0       	rjmp	.+62     	; 0x1336 <strtol+0x182>
    12f8:	10 33       	cpi	r17, 0x30	; 48
    12fa:	c1 f4       	brne	.+48     	; 0x132c <strtol+0x178>
    12fc:	f6 01       	movw	r30, r12
    12fe:	84 91       	lpm	r24, Z
    1300:	e7 fc       	sbrc	r14, 7
    1302:	80 81       	ld	r24, Z
    1304:	8f 7d       	andi	r24, 0xDF	; 223
    1306:	88 35       	cpi	r24, 0x58	; 88
    1308:	09 f0       	breq	.+2      	; 0x130c <strtol+0x158>
    130a:	b7 cf       	rjmp	.-146    	; 0x127a <strtol+0xc6>
    130c:	ae 2d       	mov	r26, r14
    130e:	c6 01       	movw	r24, r12
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	a1 1d       	adc	r26, r1
    1314:	fc 01       	movw	r30, r24
    1316:	14 91       	lpm	r17, Z
    1318:	a7 fd       	sbrc	r26, 7
    131a:	10 81       	ld	r17, Z
    131c:	e2 e0       	ldi	r30, 0x02	; 2
    131e:	ce 0e       	add	r12, r30
    1320:	d1 1c       	adc	r13, r1
    1322:	e1 1c       	adc	r14, r1
    1324:	02 60       	ori	r16, 0x02	; 2
    1326:	60 e1       	ldi	r22, 0x10	; 16
    1328:	26 2e       	mov	r2, r22
    132a:	31 2c       	mov	r3, r1
    132c:	41 2c       	mov	r4, r1
    132e:	51 2c       	mov	r5, r1
    1330:	61 2c       	mov	r6, r1
    1332:	88 e0       	ldi	r24, 0x08	; 8
    1334:	78 2e       	mov	r7, r24
    1336:	a0 e0       	ldi	r26, 0x00	; 0
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	cb 01       	movw	r24, r22
    133e:	91 01       	movw	r18, r2
    1340:	03 2c       	mov	r0, r3
    1342:	00 0c       	add	r0, r0
    1344:	44 0b       	sbc	r20, r20
    1346:	55 0b       	sbc	r21, r21
    1348:	29 83       	std	Y+1, r18	; 0x01
    134a:	3a 83       	std	Y+2, r19	; 0x02
    134c:	4b 83       	std	Y+3, r20	; 0x03
    134e:	5c 83       	std	Y+4, r21	; 0x04
    1350:	e0 ed       	ldi	r30, 0xD0	; 208
    1352:	e1 0f       	add	r30, r17
    1354:	ea 30       	cpi	r30, 0x0A	; 10
    1356:	60 f0       	brcs	.+24     	; 0x1370 <strtol+0x1bc>
    1358:	2f eb       	ldi	r18, 0xBF	; 191
    135a:	21 0f       	add	r18, r17
    135c:	2a 31       	cpi	r18, 0x1A	; 26
    135e:	10 f4       	brcc	.+4      	; 0x1364 <strtol+0x1b0>
    1360:	e9 ec       	ldi	r30, 0xC9	; 201
    1362:	05 c0       	rjmp	.+10     	; 0x136e <strtol+0x1ba>
    1364:	2f e9       	ldi	r18, 0x9F	; 159
    1366:	21 0f       	add	r18, r17
    1368:	2a 31       	cpi	r18, 0x1A	; 26
    136a:	50 f5       	brcc	.+84     	; 0x13c0 <strtol+0x20c>
    136c:	e9 ea       	ldi	r30, 0xA9	; 169
    136e:	e1 0f       	add	r30, r17
    1370:	2e 2f       	mov	r18, r30
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	22 15       	cp	r18, r2
    1376:	33 05       	cpc	r19, r3
    1378:	1c f5       	brge	.+70     	; 0x13c0 <strtol+0x20c>
    137a:	a7 fd       	sbrc	r26, 7
    137c:	18 c0       	rjmp	.+48     	; 0x13ae <strtol+0x1fa>
    137e:	46 16       	cp	r4, r22
    1380:	57 06       	cpc	r5, r23
    1382:	68 06       	cpc	r6, r24
    1384:	79 06       	cpc	r7, r25
    1386:	80 f0       	brcs	.+32     	; 0x13a8 <strtol+0x1f4>
    1388:	29 81       	ldd	r18, Y+1	; 0x01
    138a:	3a 81       	ldd	r19, Y+2	; 0x02
    138c:	4b 81       	ldd	r20, Y+3	; 0x03
    138e:	5c 81       	ldd	r21, Y+4	; 0x04
    1390:	0e 94 12 30 	call	0x6024	; 0x6024 <__mulsi3>
    1394:	6e 0f       	add	r22, r30
    1396:	71 1d       	adc	r23, r1
    1398:	81 1d       	adc	r24, r1
    139a:	91 1d       	adc	r25, r1
    139c:	61 30       	cpi	r22, 0x01	; 1
    139e:	71 05       	cpc	r23, r1
    13a0:	81 05       	cpc	r24, r1
    13a2:	30 e8       	ldi	r19, 0x80	; 128
    13a4:	93 07       	cpc	r25, r19
    13a6:	10 f0       	brcs	.+4      	; 0x13ac <strtol+0x1f8>
    13a8:	af ef       	ldi	r26, 0xFF	; 255
    13aa:	01 c0       	rjmp	.+2      	; 0x13ae <strtol+0x1fa>
    13ac:	a1 e0       	ldi	r26, 0x01	; 1
    13ae:	f6 01       	movw	r30, r12
    13b0:	14 91       	lpm	r17, Z
    13b2:	e7 fc       	sbrc	r14, 7
    13b4:	10 81       	ld	r17, Z
    13b6:	4f ef       	ldi	r20, 0xFF	; 255
    13b8:	c4 1a       	sub	r12, r20
    13ba:	d4 0a       	sbc	r13, r20
    13bc:	e4 0a       	sbc	r14, r20
    13be:	c8 cf       	rjmp	.-112    	; 0x1350 <strtol+0x19c>
    13c0:	20 2f       	mov	r18, r16
    13c2:	21 70       	andi	r18, 0x01	; 1
    13c4:	a1 14       	cp	r10, r1
    13c6:	b1 04       	cpc	r11, r1
    13c8:	b1 f0       	breq	.+44     	; 0x13f6 <strtol+0x242>
    13ca:	aa 23       	and	r26, r26
    13cc:	49 f0       	breq	.+18     	; 0x13e0 <strtol+0x22c>
    13ce:	51 e0       	ldi	r21, 0x01	; 1
    13d0:	c5 1a       	sub	r12, r21
    13d2:	d1 08       	sbc	r13, r1
    13d4:	e1 08       	sbc	r14, r1
    13d6:	f5 01       	movw	r30, r10
    13d8:	c0 82       	st	Z, r12
    13da:	d1 82       	std	Z+1, r13	; 0x01
    13dc:	e2 82       	std	Z+2, r14	; 0x02
    13de:	0b c0       	rjmp	.+22     	; 0x13f6 <strtol+0x242>
    13e0:	01 ff       	sbrs	r16, 1
    13e2:	1d c0       	rjmp	.+58     	; 0x141e <strtol+0x26a>
    13e4:	f2 e0       	ldi	r31, 0x02	; 2
    13e6:	cf 1a       	sub	r12, r31
    13e8:	d1 08       	sbc	r13, r1
    13ea:	e1 08       	sbc	r14, r1
    13ec:	f5 01       	movw	r30, r10
    13ee:	c0 82       	st	Z, r12
    13f0:	d1 82       	std	Z+1, r13	; 0x01
    13f2:	e2 82       	std	Z+2, r14	; 0x02
    13f4:	14 c0       	rjmp	.+40     	; 0x141e <strtol+0x26a>
    13f6:	a7 ff       	sbrs	r26, 7
    13f8:	12 c0       	rjmp	.+36     	; 0x141e <strtol+0x26a>
    13fa:	22 23       	and	r18, r18
    13fc:	29 f0       	breq	.+10     	; 0x1408 <strtol+0x254>
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e8       	ldi	r25, 0x80	; 128
    1406:	04 c0       	rjmp	.+8      	; 0x1410 <strtol+0x25c>
    1408:	6f ef       	ldi	r22, 0xFF	; 255
    140a:	7f ef       	ldi	r23, 0xFF	; 255
    140c:	8f ef       	ldi	r24, 0xFF	; 255
    140e:	9f e7       	ldi	r25, 0x7F	; 127
    1410:	22 e2       	ldi	r18, 0x22	; 34
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	30 93 71 08 	sts	0x0871, r19	; 0x800871 <errno+0x1>
    1418:	20 93 70 08 	sts	0x0870, r18	; 0x800870 <errno>
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <strtol+0x27c>
    141e:	22 23       	and	r18, r18
    1420:	81 f0       	breq	.+32     	; 0x1442 <strtol+0x28e>
    1422:	90 95       	com	r25
    1424:	80 95       	com	r24
    1426:	70 95       	com	r23
    1428:	61 95       	neg	r22
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	8f 4f       	sbci	r24, 0xFF	; 255
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	46 2f       	mov	r20, r22
    1432:	37 2f       	mov	r19, r23
    1434:	28 2f       	mov	r18, r24
    1436:	12 c0       	rjmp	.+36     	; 0x145c <strtol+0x2a8>
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0d c0       	rjmp	.+26     	; 0x145c <strtol+0x2a8>
    1442:	97 ff       	sbrs	r25, 7
    1444:	f5 cf       	rjmp	.-22     	; 0x1430 <strtol+0x27c>
    1446:	82 e2       	ldi	r24, 0x22	; 34
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <errno+0x1>
    144e:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <errno>
    1452:	6f ef       	ldi	r22, 0xFF	; 255
    1454:	7f ef       	ldi	r23, 0xFF	; 255
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	9f e7       	ldi	r25, 0x7F	; 127
    145a:	ea cf       	rjmp	.-44     	; 0x1430 <strtol+0x27c>
    145c:	64 2f       	mov	r22, r20
    145e:	73 2f       	mov	r23, r19
    1460:	82 2f       	mov	r24, r18
    1462:	26 96       	adiw	r28, 0x06	; 6
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	bf 90       	pop	r11
    147e:	af 90       	pop	r10
    1480:	8f 90       	pop	r8
    1482:	7f 90       	pop	r7
    1484:	6f 90       	pop	r6
    1486:	5f 90       	pop	r5
    1488:	4f 90       	pop	r4
    148a:	3f 90       	pop	r3
    148c:	2f 90       	pop	r2
    148e:	08 95       	ret

Disassembly of section .text.avrlibc:

00001d94 <__ftoa_engine>:
    1d94:	28 30       	cpi	r18, 0x08	; 8
    1d96:	08 f0       	brcs	.+2      	; 0x1d9a <__ftoa_engine+0x6>
    1d98:	27 e0       	ldi	r18, 0x07	; 7
    1d9a:	33 27       	eor	r19, r19
    1d9c:	da 01       	movw	r26, r20
    1d9e:	99 0f       	add	r25, r25
    1da0:	31 1d       	adc	r19, r1
    1da2:	87 fd       	sbrc	r24, 7
    1da4:	91 60       	ori	r25, 0x01	; 1
    1da6:	00 96       	adiw	r24, 0x00	; 0
    1da8:	61 05       	cpc	r22, r1
    1daa:	71 05       	cpc	r23, r1
    1dac:	39 f4       	brne	.+14     	; 0x1dbc <__ftoa_engine+0x28>
    1dae:	32 60       	ori	r19, 0x02	; 2
    1db0:	2e 5f       	subi	r18, 0xFE	; 254
    1db2:	3d 93       	st	X+, r19
    1db4:	30 e3       	ldi	r19, 0x30	; 48
    1db6:	2a 95       	dec	r18
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <__ftoa_engine+0x1e>
    1dba:	08 95       	ret
    1dbc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dbe:	30 f0       	brcs	.+12     	; 0x1dcc <__ftoa_engine+0x38>
    1dc0:	80 38       	cpi	r24, 0x80	; 128
    1dc2:	71 05       	cpc	r23, r1
    1dc4:	61 05       	cpc	r22, r1
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <__ftoa_engine+0x36>
    1dc8:	3c 5f       	subi	r19, 0xFC	; 252
    1dca:	3c 5f       	subi	r19, 0xFC	; 252
    1dcc:	3d 93       	st	X+, r19
    1dce:	91 30       	cpi	r25, 0x01	; 1
    1dd0:	08 f0       	brcs	.+2      	; 0x1dd4 <__ftoa_engine+0x40>
    1dd2:	80 68       	ori	r24, 0x80	; 128
    1dd4:	91 1d       	adc	r25, r1
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	1f 93       	push	r17
    1ddc:	0f 93       	push	r16
    1dde:	ff 92       	push	r15
    1de0:	ef 92       	push	r14
    1de2:	19 2f       	mov	r17, r25
    1de4:	98 7f       	andi	r25, 0xF8	; 248
    1de6:	96 95       	lsr	r25
    1de8:	e9 2f       	mov	r30, r25
    1dea:	96 95       	lsr	r25
    1dec:	96 95       	lsr	r25
    1dee:	e9 0f       	add	r30, r25
    1df0:	ff 27       	eor	r31, r31
    1df2:	e0 59       	subi	r30, 0x90	; 144
    1df4:	fe 4f       	sbci	r31, 0xFE	; 254
    1df6:	99 27       	eor	r25, r25
    1df8:	33 27       	eor	r19, r19
    1dfa:	ee 24       	eor	r14, r14
    1dfc:	ff 24       	eor	r15, r15
    1dfe:	a7 01       	movw	r20, r14
    1e00:	e7 01       	movw	r28, r14
    1e02:	05 90       	lpm	r0, Z+
    1e04:	08 94       	sec
    1e06:	07 94       	ror	r0
    1e08:	28 f4       	brcc	.+10     	; 0x1e14 <__ftoa_engine+0x80>
    1e0a:	36 0f       	add	r19, r22
    1e0c:	e7 1e       	adc	r14, r23
    1e0e:	f8 1e       	adc	r15, r24
    1e10:	49 1f       	adc	r20, r25
    1e12:	51 1d       	adc	r21, r1
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	06 94       	lsr	r0
    1e1e:	a1 f7       	brne	.-24     	; 0x1e08 <__ftoa_engine+0x74>
    1e20:	05 90       	lpm	r0, Z+
    1e22:	07 94       	ror	r0
    1e24:	28 f4       	brcc	.+10     	; 0x1e30 <__ftoa_engine+0x9c>
    1e26:	e7 0e       	add	r14, r23
    1e28:	f8 1e       	adc	r15, r24
    1e2a:	49 1f       	adc	r20, r25
    1e2c:	56 1f       	adc	r21, r22
    1e2e:	c1 1d       	adc	r28, r1
    1e30:	77 0f       	add	r23, r23
    1e32:	88 1f       	adc	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	66 1f       	adc	r22, r22
    1e38:	06 94       	lsr	r0
    1e3a:	a1 f7       	brne	.-24     	; 0x1e24 <__ftoa_engine+0x90>
    1e3c:	05 90       	lpm	r0, Z+
    1e3e:	07 94       	ror	r0
    1e40:	28 f4       	brcc	.+10     	; 0x1e4c <__ftoa_engine+0xb8>
    1e42:	f8 0e       	add	r15, r24
    1e44:	49 1f       	adc	r20, r25
    1e46:	56 1f       	adc	r21, r22
    1e48:	c7 1f       	adc	r28, r23
    1e4a:	d1 1d       	adc	r29, r1
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	66 1f       	adc	r22, r22
    1e52:	77 1f       	adc	r23, r23
    1e54:	06 94       	lsr	r0
    1e56:	a1 f7       	brne	.-24     	; 0x1e40 <__ftoa_engine+0xac>
    1e58:	05 90       	lpm	r0, Z+
    1e5a:	07 94       	ror	r0
    1e5c:	20 f4       	brcc	.+8      	; 0x1e66 <__ftoa_engine+0xd2>
    1e5e:	49 0f       	add	r20, r25
    1e60:	56 1f       	adc	r21, r22
    1e62:	c7 1f       	adc	r28, r23
    1e64:	d8 1f       	adc	r29, r24
    1e66:	99 0f       	add	r25, r25
    1e68:	66 1f       	adc	r22, r22
    1e6a:	77 1f       	adc	r23, r23
    1e6c:	88 1f       	adc	r24, r24
    1e6e:	06 94       	lsr	r0
    1e70:	a9 f7       	brne	.-22     	; 0x1e5c <__ftoa_engine+0xc8>
    1e72:	84 91       	lpm	r24, Z
    1e74:	10 95       	com	r17
    1e76:	17 70       	andi	r17, 0x07	; 7
    1e78:	41 f0       	breq	.+16     	; 0x1e8a <__ftoa_engine+0xf6>
    1e7a:	d6 95       	lsr	r29
    1e7c:	c7 95       	ror	r28
    1e7e:	57 95       	ror	r21
    1e80:	47 95       	ror	r20
    1e82:	f7 94       	ror	r15
    1e84:	e7 94       	ror	r14
    1e86:	1a 95       	dec	r17
    1e88:	c1 f7       	brne	.-16     	; 0x1e7a <__ftoa_engine+0xe6>
    1e8a:	e6 e1       	ldi	r30, 0x16	; 22
    1e8c:	f1 e0       	ldi	r31, 0x01	; 1
    1e8e:	68 94       	set
    1e90:	15 90       	lpm	r1, Z+
    1e92:	15 91       	lpm	r17, Z+
    1e94:	35 91       	lpm	r19, Z+
    1e96:	65 91       	lpm	r22, Z+
    1e98:	95 91       	lpm	r25, Z+
    1e9a:	05 90       	lpm	r0, Z+
    1e9c:	7f e2       	ldi	r23, 0x2F	; 47
    1e9e:	73 95       	inc	r23
    1ea0:	e1 18       	sub	r14, r1
    1ea2:	f1 0a       	sbc	r15, r17
    1ea4:	43 0b       	sbc	r20, r19
    1ea6:	56 0b       	sbc	r21, r22
    1ea8:	c9 0b       	sbc	r28, r25
    1eaa:	d0 09       	sbc	r29, r0
    1eac:	c0 f7       	brcc	.-16     	; 0x1e9e <__ftoa_engine+0x10a>
    1eae:	e1 0c       	add	r14, r1
    1eb0:	f1 1e       	adc	r15, r17
    1eb2:	43 1f       	adc	r20, r19
    1eb4:	56 1f       	adc	r21, r22
    1eb6:	c9 1f       	adc	r28, r25
    1eb8:	d0 1d       	adc	r29, r0
    1eba:	7e f4       	brtc	.+30     	; 0x1eda <__ftoa_engine+0x146>
    1ebc:	70 33       	cpi	r23, 0x30	; 48
    1ebe:	11 f4       	brne	.+4      	; 0x1ec4 <__ftoa_engine+0x130>
    1ec0:	8a 95       	dec	r24
    1ec2:	e6 cf       	rjmp	.-52     	; 0x1e90 <__ftoa_engine+0xfc>
    1ec4:	e8 94       	clt
    1ec6:	01 50       	subi	r16, 0x01	; 1
    1ec8:	30 f0       	brcs	.+12     	; 0x1ed6 <__ftoa_engine+0x142>
    1eca:	08 0f       	add	r16, r24
    1ecc:	0a f4       	brpl	.+2      	; 0x1ed0 <__ftoa_engine+0x13c>
    1ece:	00 27       	eor	r16, r16
    1ed0:	02 17       	cp	r16, r18
    1ed2:	08 f4       	brcc	.+2      	; 0x1ed6 <__ftoa_engine+0x142>
    1ed4:	20 2f       	mov	r18, r16
    1ed6:	23 95       	inc	r18
    1ed8:	02 2f       	mov	r16, r18
    1eda:	7a 33       	cpi	r23, 0x3A	; 58
    1edc:	28 f0       	brcs	.+10     	; 0x1ee8 <__ftoa_engine+0x154>
    1ede:	79 e3       	ldi	r23, 0x39	; 57
    1ee0:	7d 93       	st	X+, r23
    1ee2:	2a 95       	dec	r18
    1ee4:	e9 f7       	brne	.-6      	; 0x1ee0 <__ftoa_engine+0x14c>
    1ee6:	10 c0       	rjmp	.+32     	; 0x1f08 <__ftoa_engine+0x174>
    1ee8:	7d 93       	st	X+, r23
    1eea:	2a 95       	dec	r18
    1eec:	89 f6       	brne	.-94     	; 0x1e90 <__ftoa_engine+0xfc>
    1eee:	06 94       	lsr	r0
    1ef0:	97 95       	ror	r25
    1ef2:	67 95       	ror	r22
    1ef4:	37 95       	ror	r19
    1ef6:	17 95       	ror	r17
    1ef8:	17 94       	ror	r1
    1efa:	e1 18       	sub	r14, r1
    1efc:	f1 0a       	sbc	r15, r17
    1efe:	43 0b       	sbc	r20, r19
    1f00:	56 0b       	sbc	r21, r22
    1f02:	c9 0b       	sbc	r28, r25
    1f04:	d0 09       	sbc	r29, r0
    1f06:	98 f0       	brcs	.+38     	; 0x1f2e <__ftoa_engine+0x19a>
    1f08:	23 95       	inc	r18
    1f0a:	7e 91       	ld	r23, -X
    1f0c:	73 95       	inc	r23
    1f0e:	7a 33       	cpi	r23, 0x3A	; 58
    1f10:	08 f0       	brcs	.+2      	; 0x1f14 <__ftoa_engine+0x180>
    1f12:	70 e3       	ldi	r23, 0x30	; 48
    1f14:	7c 93       	st	X, r23
    1f16:	20 13       	cpse	r18, r16
    1f18:	b8 f7       	brcc	.-18     	; 0x1f08 <__ftoa_engine+0x174>
    1f1a:	7e 91       	ld	r23, -X
    1f1c:	70 61       	ori	r23, 0x10	; 16
    1f1e:	7d 93       	st	X+, r23
    1f20:	30 f0       	brcs	.+12     	; 0x1f2e <__ftoa_engine+0x19a>
    1f22:	83 95       	inc	r24
    1f24:	71 e3       	ldi	r23, 0x31	; 49
    1f26:	7d 93       	st	X+, r23
    1f28:	70 e3       	ldi	r23, 0x30	; 48
    1f2a:	2a 95       	dec	r18
    1f2c:	e1 f7       	brne	.-8      	; 0x1f26 <__ftoa_engine+0x192>
    1f2e:	11 24       	eor	r1, r1
    1f30:	ef 90       	pop	r14
    1f32:	ff 90       	pop	r15
    1f34:	0f 91       	pop	r16
    1f36:	1f 91       	pop	r17
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	99 27       	eor	r25, r25
    1f3e:	87 fd       	sbrc	r24, 7
    1f40:	90 95       	com	r25
    1f42:	08 95       	ret

Disassembly of section .text.avrlibc:

000063d8 <isspace>:
    63d8:	91 11       	cpse	r25, r1
    63da:	0c 94 95 33 	jmp	0x672a	; 0x672a <__ctype_isfalse>
    63de:	80 32       	cpi	r24, 0x20	; 32
    63e0:	19 f0       	breq	.+6      	; 0x63e8 <isspace+0x10>
    63e2:	89 50       	subi	r24, 0x09	; 9
    63e4:	85 50       	subi	r24, 0x05	; 5
    63e6:	c8 f7       	brcc	.-14     	; 0x63da <isspace+0x2>
    63e8:	08 95       	ret

Disassembly of section .text.avrlibc:

00005abc <memcpy>:
    5abc:	cf 92       	push	r12
    5abe:	df 92       	push	r13
    5ac0:	ef 92       	push	r14
    5ac2:	dc 01       	movw	r26, r24
    5ac4:	6a 01       	movw	r12, r20
    5ac6:	e6 2e       	mov	r14, r22
    5ac8:	28 0f       	add	r18, r24
    5aca:	39 1f       	adc	r19, r25
    5acc:	a2 17       	cp	r26, r18
    5ace:	b3 07       	cpc	r27, r19
    5ad0:	51 f0       	breq	.+20     	; 0x5ae6 <memcpy+0x2a>
    5ad2:	f6 01       	movw	r30, r12
    5ad4:	44 91       	lpm	r20, Z
    5ad6:	e7 fc       	sbrc	r14, 7
    5ad8:	40 81       	ld	r20, Z
    5ada:	4d 93       	st	X+, r20
    5adc:	4f ef       	ldi	r20, 0xFF	; 255
    5ade:	c4 1a       	sub	r12, r20
    5ae0:	d4 0a       	sbc	r13, r20
    5ae2:	e4 0a       	sbc	r14, r20
    5ae4:	f3 cf       	rjmp	.-26     	; 0x5acc <memcpy+0x10>
    5ae6:	ef 90       	pop	r14
    5ae8:	df 90       	pop	r13
    5aea:	cf 90       	pop	r12
    5aec:	08 95       	ret

Disassembly of section .text.avrlibc:

00005d28 <strcat>:
    5d28:	9a 01       	movw	r18, r20
    5d2a:	46 2f       	mov	r20, r22
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	bd 01       	movw	r22, r26
    5d30:	6f 5f       	subi	r22, 0xFF	; 255
    5d32:	7f 4f       	sbci	r23, 0xFF	; 255
    5d34:	5c 91       	ld	r21, X
    5d36:	55 23       	and	r21, r21
    5d38:	11 f0       	breq	.+4      	; 0x5d3e <strcat+0x16>
    5d3a:	db 01       	movw	r26, r22
    5d3c:	f8 cf       	rjmp	.-16     	; 0x5d2e <strcat+0x6>
    5d3e:	f9 01       	movw	r30, r18
    5d40:	54 91       	lpm	r21, Z
    5d42:	47 fd       	sbrc	r20, 7
    5d44:	50 81       	ld	r21, Z
    5d46:	5d 93       	st	X+, r21
    5d48:	55 23       	and	r21, r21
    5d4a:	21 f0       	breq	.+8      	; 0x5d54 <strcat+0x2c>
    5d4c:	2f 5f       	subi	r18, 0xFF	; 255
    5d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d50:	4f 4f       	sbci	r20, 0xFF	; 255
    5d52:	f5 cf       	rjmp	.-22     	; 0x5d3e <strcat+0x16>
    5d54:	08 95       	ret

Disassembly of section .text.avrlibc:

0000541e <strcmp>:
    541e:	cf 92       	push	r12
    5420:	df 92       	push	r13
    5422:	ef 92       	push	r14
    5424:	6b 01       	movw	r12, r22
    5426:	e8 2e       	mov	r14, r24
    5428:	f6 01       	movw	r30, r12
    542a:	84 91       	lpm	r24, Z
    542c:	e7 fc       	sbrc	r14, 7
    542e:	80 81       	ld	r24, Z
    5430:	f9 01       	movw	r30, r18
    5432:	54 91       	lpm	r21, Z
    5434:	47 fd       	sbrc	r20, 7
    5436:	50 81       	ld	r21, Z
    5438:	85 13       	cpse	r24, r21
    543a:	0b c0       	rjmp	.+22     	; 0x5452 <strcmp+0x34>
    543c:	88 23       	and	r24, r24
    543e:	41 f0       	breq	.+16     	; 0x5450 <strcmp+0x32>
    5440:	8f ef       	ldi	r24, 0xFF	; 255
    5442:	c8 1a       	sub	r12, r24
    5444:	d8 0a       	sbc	r13, r24
    5446:	e8 0a       	sbc	r14, r24
    5448:	2f 5f       	subi	r18, 0xFF	; 255
    544a:	3f 4f       	sbci	r19, 0xFF	; 255
    544c:	4f 4f       	sbci	r20, 0xFF	; 255
    544e:	ec cf       	rjmp	.-40     	; 0x5428 <strcmp+0xa>
    5450:	58 2f       	mov	r21, r24
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	85 1b       	sub	r24, r21
    5456:	91 09       	sbc	r25, r1
    5458:	ef 90       	pop	r14
    545a:	df 90       	pop	r13
    545c:	cf 90       	pop	r12
    545e:	08 95       	ret

Disassembly of section .text.avrlibc:

00004564 <strncmp>:
    4564:	cf 92       	push	r12
    4566:	df 92       	push	r13
    4568:	ef 92       	push	r14
    456a:	0f 93       	push	r16
    456c:	1f 93       	push	r17
    456e:	6b 01       	movw	r12, r22
    4570:	e8 2e       	mov	r14, r24
    4572:	01 15       	cp	r16, r1
    4574:	11 05       	cpc	r17, r1
    4576:	19 f1       	breq	.+70     	; 0x45be <strncmp+0x5a>
    4578:	01 50       	subi	r16, 0x01	; 1
    457a:	11 09       	sbc	r17, r1
    457c:	f6 01       	movw	r30, r12
    457e:	84 91       	lpm	r24, Z
    4580:	e7 fc       	sbrc	r14, 7
    4582:	80 81       	ld	r24, Z
    4584:	88 23       	and	r24, r24
    4586:	99 f0       	breq	.+38     	; 0x45ae <strncmp+0x4a>
    4588:	f9 01       	movw	r30, r18
    458a:	94 91       	lpm	r25, Z
    458c:	47 fd       	sbrc	r20, 7
    458e:	90 81       	ld	r25, Z
    4590:	99 23       	and	r25, r25
    4592:	69 f0       	breq	.+26     	; 0x45ae <strncmp+0x4a>
    4594:	01 15       	cp	r16, r1
    4596:	11 05       	cpc	r17, r1
    4598:	51 f0       	breq	.+20     	; 0x45ae <strncmp+0x4a>
    459a:	89 13       	cpse	r24, r25
    459c:	08 c0       	rjmp	.+16     	; 0x45ae <strncmp+0x4a>
    459e:	8f ef       	ldi	r24, 0xFF	; 255
    45a0:	c8 1a       	sub	r12, r24
    45a2:	d8 0a       	sbc	r13, r24
    45a4:	e8 0a       	sbc	r14, r24
    45a6:	2f 5f       	subi	r18, 0xFF	; 255
    45a8:	3f 4f       	sbci	r19, 0xFF	; 255
    45aa:	4f 4f       	sbci	r20, 0xFF	; 255
    45ac:	e5 cf       	rjmp	.-54     	; 0x4578 <strncmp+0x14>
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	f9 01       	movw	r30, r18
    45b2:	24 91       	lpm	r18, Z
    45b4:	47 fd       	sbrc	r20, 7
    45b6:	20 81       	ld	r18, Z
    45b8:	82 1b       	sub	r24, r18
    45ba:	91 09       	sbc	r25, r1
    45bc:	02 c0       	rjmp	.+4      	; 0x45c2 <strncmp+0x5e>
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	1f 91       	pop	r17
    45c4:	0f 91       	pop	r16
    45c6:	ef 90       	pop	r14
    45c8:	df 90       	pop	r13
    45ca:	cf 90       	pop	r12
    45cc:	08 95       	ret

Disassembly of section .text.avrlibc:

00005d56 <strlen>:
    5d56:	cf 92       	push	r12
    5d58:	df 92       	push	r13
    5d5a:	ef 92       	push	r14
    5d5c:	6b 01       	movw	r12, r22
    5d5e:	e8 2e       	mov	r14, r24
    5d60:	a8 2f       	mov	r26, r24
    5d62:	cb 01       	movw	r24, r22
    5d64:	fc 01       	movw	r30, r24
    5d66:	24 91       	lpm	r18, Z
    5d68:	a7 fd       	sbrc	r26, 7
    5d6a:	20 81       	ld	r18, Z
    5d6c:	22 23       	and	r18, r18
    5d6e:	19 f0       	breq	.+6      	; 0x5d76 <strlen+0x20>
    5d70:	01 96       	adiw	r24, 0x01	; 1
    5d72:	a1 1d       	adc	r26, r1
    5d74:	f7 cf       	rjmp	.-18     	; 0x5d64 <strlen+0xe>
    5d76:	8c 19       	sub	r24, r12
    5d78:	9d 09       	sbc	r25, r13
    5d7a:	ef 90       	pop	r14
    5d7c:	df 90       	pop	r13
    5d7e:	cf 90       	pop	r12
    5d80:	08 95       	ret

Disassembly of section .text.avrlibc:

000060f8 <strcpy>:
    60f8:	9a 01       	movw	r18, r20
    60fa:	46 2f       	mov	r20, r22
    60fc:	dc 01       	movw	r26, r24
    60fe:	f9 01       	movw	r30, r18
    6100:	54 91       	lpm	r21, Z
    6102:	47 fd       	sbrc	r20, 7
    6104:	50 81       	ld	r21, Z
    6106:	5d 93       	st	X+, r21
    6108:	55 23       	and	r21, r21
    610a:	21 f0       	breq	.+8      	; 0x6114 <strcpy+0x1c>
    610c:	2f 5f       	subi	r18, 0xFF	; 255
    610e:	3f 4f       	sbci	r19, 0xFF	; 255
    6110:	4f 4f       	sbci	r20, 0xFF	; 255
    6112:	f5 cf       	rjmp	.-22     	; 0x60fe <strcpy+0x6>
    6114:	08 95       	ret

Disassembly of section .text.avrlibc:

000058f0 <strnlen>:
    58f0:	cf 92       	push	r12
    58f2:	df 92       	push	r13
    58f4:	ef 92       	push	r14
    58f6:	6b 01       	movw	r12, r22
    58f8:	e8 2e       	mov	r14, r24
    58fa:	a8 2f       	mov	r26, r24
    58fc:	cb 01       	movw	r24, r22
    58fe:	41 15       	cp	r20, r1
    5900:	51 05       	cpc	r21, r1
    5902:	31 f4       	brne	.+12     	; 0x5910 <strnlen+0x20>
    5904:	8c 19       	sub	r24, r12
    5906:	9d 09       	sbc	r25, r13
    5908:	ef 90       	pop	r14
    590a:	df 90       	pop	r13
    590c:	cf 90       	pop	r12
    590e:	08 95       	ret
    5910:	fc 01       	movw	r30, r24
    5912:	24 91       	lpm	r18, Z
    5914:	a7 fd       	sbrc	r26, 7
    5916:	20 81       	ld	r18, Z
    5918:	22 23       	and	r18, r18
    591a:	a1 f3       	breq	.-24     	; 0x5904 <strnlen+0x14>
    591c:	01 96       	adiw	r24, 0x01	; 1
    591e:	a1 1d       	adc	r26, r1
    5920:	41 50       	subi	r20, 0x01	; 1
    5922:	51 09       	sbc	r21, r1
    5924:	ec cf       	rjmp	.-40     	; 0x58fe <strnlen+0xe>

Disassembly of section .text.avrlibc:

0000424a <fputc>:
    424a:	0f 93       	push	r16
    424c:	1f 93       	push	r17
    424e:	cf 93       	push	r28
    4250:	df 93       	push	r29
    4252:	fb 01       	movw	r30, r22
    4254:	24 81       	ldd	r18, Z+4	; 0x04
    4256:	21 fd       	sbrc	r18, 1
    4258:	03 c0       	rjmp	.+6      	; 0x4260 <fputc+0x16>
    425a:	8f ef       	ldi	r24, 0xFF	; 255
    425c:	9f ef       	ldi	r25, 0xFF	; 255
    425e:	2c c0       	rjmp	.+88     	; 0x42b8 <fputc+0x6e>
    4260:	22 ff       	sbrs	r18, 2
    4262:	16 c0       	rjmp	.+44     	; 0x4290 <fputc+0x46>
    4264:	47 81       	ldd	r20, Z+7	; 0x07
    4266:	50 85       	ldd	r21, Z+8	; 0x08
    4268:	25 81       	ldd	r18, Z+5	; 0x05
    426a:	36 81       	ldd	r19, Z+6	; 0x06
    426c:	42 17       	cp	r20, r18
    426e:	53 07       	cpc	r21, r19
    4270:	44 f4       	brge	.+16     	; 0x4282 <fputc+0x38>
    4272:	a0 81       	ld	r26, Z
    4274:	b1 81       	ldd	r27, Z+1	; 0x01
    4276:	9d 01       	movw	r18, r26
    4278:	2f 5f       	subi	r18, 0xFF	; 255
    427a:	3f 4f       	sbci	r19, 0xFF	; 255
    427c:	31 83       	std	Z+1, r19	; 0x01
    427e:	20 83       	st	Z, r18
    4280:	8c 93       	st	X, r24
    4282:	27 81       	ldd	r18, Z+7	; 0x07
    4284:	30 85       	ldd	r19, Z+8	; 0x08
    4286:	2f 5f       	subi	r18, 0xFF	; 255
    4288:	3f 4f       	sbci	r19, 0xFF	; 255
    428a:	30 87       	std	Z+8, r19	; 0x08
    428c:	27 83       	std	Z+7, r18	; 0x07
    428e:	14 c0       	rjmp	.+40     	; 0x42b8 <fputc+0x6e>
    4290:	8b 01       	movw	r16, r22
    4292:	ec 01       	movw	r28, r24
    4294:	fb 01       	movw	r30, r22
    4296:	01 84       	ldd	r0, Z+9	; 0x09
    4298:	f2 85       	ldd	r31, Z+10	; 0x0a
    429a:	e0 2d       	mov	r30, r0
    429c:	09 95       	icall
    429e:	89 2b       	or	r24, r25
    42a0:	e1 f6       	brne	.-72     	; 0x425a <fputc+0x10>
    42a2:	d8 01       	movw	r26, r16
    42a4:	17 96       	adiw	r26, 0x07	; 7
    42a6:	8d 91       	ld	r24, X+
    42a8:	9c 91       	ld	r25, X
    42aa:	18 97       	sbiw	r26, 0x08	; 8
    42ac:	01 96       	adiw	r24, 0x01	; 1
    42ae:	18 96       	adiw	r26, 0x08	; 8
    42b0:	9c 93       	st	X, r25
    42b2:	8e 93       	st	-X, r24
    42b4:	17 97       	sbiw	r26, 0x07	; 7
    42b6:	ce 01       	movw	r24, r28
    42b8:	df 91       	pop	r29
    42ba:	cf 91       	pop	r28
    42bc:	1f 91       	pop	r17
    42be:	0f 91       	pop	r16
    42c0:	08 95       	ret

Disassembly of section .text.avrlibc:

00005288 <sprintf>:
    5288:	af e0       	ldi	r26, 0x0F	; 15
    528a:	b0 e0       	ldi	r27, 0x00	; 0
    528c:	ea e4       	ldi	r30, 0x4A	; 74
    528e:	f9 e2       	ldi	r31, 0x29	; 41
    5290:	0c 94 19 2c 	jmp	0x5832	; 0x5832 <__prologue_saves__+0x1c>
    5294:	0e 89       	ldd	r16, Y+22	; 0x16
    5296:	1f 89       	ldd	r17, Y+23	; 0x17
    5298:	86 e0       	ldi	r24, 0x06	; 6
    529a:	8d 83       	std	Y+5, r24	; 0x05
    529c:	1a 83       	std	Y+2, r17	; 0x02
    529e:	09 83       	std	Y+1, r16	; 0x01
    52a0:	8f ef       	ldi	r24, 0xFF	; 255
    52a2:	9f e7       	ldi	r25, 0x7F	; 127
    52a4:	9f 83       	std	Y+7, r25	; 0x07
    52a6:	8e 83       	std	Y+6, r24	; 0x06
    52a8:	9e 01       	movw	r18, r28
    52aa:	25 5e       	subi	r18, 0xE5	; 229
    52ac:	3f 4f       	sbci	r19, 0xFF	; 255
    52ae:	48 8d       	ldd	r20, Y+24	; 0x18
    52b0:	59 8d       	ldd	r21, Y+25	; 0x19
    52b2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    52b4:	ce 01       	movw	r24, r28
    52b6:	01 96       	adiw	r24, 0x01	; 1
    52b8:	0e 94 bb 03 	call	0x776	; 0x776 <vfprintf>
    52bc:	e8 85       	ldd	r30, Y+8	; 0x08
    52be:	f9 85       	ldd	r31, Y+9	; 0x09
    52c0:	e0 0f       	add	r30, r16
    52c2:	f1 1f       	adc	r31, r17
    52c4:	10 82       	st	Z, r1
    52c6:	2f 96       	adiw	r28, 0x0f	; 15
    52c8:	e4 e0       	ldi	r30, 0x04	; 4
    52ca:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

0000356e <__ultoa_invert>:
    356e:	fa 01       	movw	r30, r20
    3570:	aa 27       	eor	r26, r26
    3572:	28 30       	cpi	r18, 0x08	; 8
    3574:	51 f1       	breq	.+84     	; 0x35ca <__ultoa_invert+0x5c>
    3576:	20 31       	cpi	r18, 0x10	; 16
    3578:	81 f1       	breq	.+96     	; 0x35da <__ultoa_invert+0x6c>
    357a:	e8 94       	clt
    357c:	6f 93       	push	r22
    357e:	6e 7f       	andi	r22, 0xFE	; 254
    3580:	6e 5f       	subi	r22, 0xFE	; 254
    3582:	7f 4f       	sbci	r23, 0xFF	; 255
    3584:	8f 4f       	sbci	r24, 0xFF	; 255
    3586:	9f 4f       	sbci	r25, 0xFF	; 255
    3588:	af 4f       	sbci	r26, 0xFF	; 255
    358a:	b1 e0       	ldi	r27, 0x01	; 1
    358c:	3e d0       	rcall	.+124    	; 0x360a <__ultoa_invert+0x9c>
    358e:	b4 e0       	ldi	r27, 0x04	; 4
    3590:	3c d0       	rcall	.+120    	; 0x360a <__ultoa_invert+0x9c>
    3592:	67 0f       	add	r22, r23
    3594:	78 1f       	adc	r23, r24
    3596:	89 1f       	adc	r24, r25
    3598:	9a 1f       	adc	r25, r26
    359a:	a1 1d       	adc	r26, r1
    359c:	68 0f       	add	r22, r24
    359e:	79 1f       	adc	r23, r25
    35a0:	8a 1f       	adc	r24, r26
    35a2:	91 1d       	adc	r25, r1
    35a4:	a1 1d       	adc	r26, r1
    35a6:	6a 0f       	add	r22, r26
    35a8:	71 1d       	adc	r23, r1
    35aa:	81 1d       	adc	r24, r1
    35ac:	91 1d       	adc	r25, r1
    35ae:	a1 1d       	adc	r26, r1
    35b0:	20 d0       	rcall	.+64     	; 0x35f2 <__ultoa_invert+0x84>
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <__ultoa_invert+0x48>
    35b4:	68 94       	set
    35b6:	3f 91       	pop	r19
    35b8:	2a e0       	ldi	r18, 0x0A	; 10
    35ba:	26 9f       	mul	r18, r22
    35bc:	11 24       	eor	r1, r1
    35be:	30 19       	sub	r19, r0
    35c0:	30 5d       	subi	r19, 0xD0	; 208
    35c2:	31 93       	st	Z+, r19
    35c4:	de f6       	brtc	.-74     	; 0x357c <__ultoa_invert+0xe>
    35c6:	cf 01       	movw	r24, r30
    35c8:	08 95       	ret
    35ca:	46 2f       	mov	r20, r22
    35cc:	47 70       	andi	r20, 0x07	; 7
    35ce:	40 5d       	subi	r20, 0xD0	; 208
    35d0:	41 93       	st	Z+, r20
    35d2:	b3 e0       	ldi	r27, 0x03	; 3
    35d4:	0f d0       	rcall	.+30     	; 0x35f4 <__ultoa_invert+0x86>
    35d6:	c9 f7       	brne	.-14     	; 0x35ca <__ultoa_invert+0x5c>
    35d8:	f6 cf       	rjmp	.-20     	; 0x35c6 <__ultoa_invert+0x58>
    35da:	46 2f       	mov	r20, r22
    35dc:	4f 70       	andi	r20, 0x0F	; 15
    35de:	40 5d       	subi	r20, 0xD0	; 208
    35e0:	4a 33       	cpi	r20, 0x3A	; 58
    35e2:	18 f0       	brcs	.+6      	; 0x35ea <__ultoa_invert+0x7c>
    35e4:	49 5d       	subi	r20, 0xD9	; 217
    35e6:	31 fd       	sbrc	r19, 1
    35e8:	40 52       	subi	r20, 0x20	; 32
    35ea:	41 93       	st	Z+, r20
    35ec:	02 d0       	rcall	.+4      	; 0x35f2 <__ultoa_invert+0x84>
    35ee:	a9 f7       	brne	.-22     	; 0x35da <__ultoa_invert+0x6c>
    35f0:	ea cf       	rjmp	.-44     	; 0x35c6 <__ultoa_invert+0x58>
    35f2:	b4 e0       	ldi	r27, 0x04	; 4
    35f4:	a6 95       	lsr	r26
    35f6:	97 95       	ror	r25
    35f8:	87 95       	ror	r24
    35fa:	77 95       	ror	r23
    35fc:	67 95       	ror	r22
    35fe:	ba 95       	dec	r27
    3600:	c9 f7       	brne	.-14     	; 0x35f4 <__ultoa_invert+0x86>
    3602:	00 97       	sbiw	r24, 0x00	; 0
    3604:	61 05       	cpc	r22, r1
    3606:	71 05       	cpc	r23, r1
    3608:	08 95       	ret
    360a:	9b 01       	movw	r18, r22
    360c:	ac 01       	movw	r20, r24
    360e:	0a 2e       	mov	r0, r26
    3610:	06 94       	lsr	r0
    3612:	57 95       	ror	r21
    3614:	47 95       	ror	r20
    3616:	37 95       	ror	r19
    3618:	27 95       	ror	r18
    361a:	ba 95       	dec	r27
    361c:	c9 f7       	brne	.-14     	; 0x3610 <__ultoa_invert+0xa2>
    361e:	62 0f       	add	r22, r18
    3620:	73 1f       	adc	r23, r19
    3622:	84 1f       	adc	r24, r20
    3624:	95 1f       	adc	r25, r21
    3626:	a0 1d       	adc	r26, r0
    3628:	08 95       	ret

Disassembly of section .text.avrlibc:

0000672a <__ctype_isfalse>:
    672a:	99 27       	eor	r25, r25
    672c:	88 27       	eor	r24, r24

0000672e <__ctype_istrue>:
    672e:	08 95       	ret

Disassembly of section .text.avrlibc:

00005e70 <eeprom_read_block>:
    5e70:	ba 01       	movw	r22, r20
    5e72:	a9 01       	movw	r20, r18
    5e74:	dc 01       	movw	r26, r24
    5e76:	cb 01       	movw	r24, r22

00005e78 <eeprom_read_blraw>:
    5e78:	fc 01       	movw	r30, r24
    5e7a:	f9 99       	sbic	0x1f, 1	; 31
    5e7c:	fe cf       	rjmp	.-4      	; 0x5e7a <eeprom_read_blraw+0x2>
    5e7e:	06 c0       	rjmp	.+12     	; 0x5e8c <eeprom_read_blraw+0x14>
    5e80:	f2 bd       	out	0x22, r31	; 34
    5e82:	e1 bd       	out	0x21, r30	; 33
    5e84:	f8 9a       	sbi	0x1f, 0	; 31
    5e86:	31 96       	adiw	r30, 0x01	; 1
    5e88:	00 b4       	in	r0, 0x20	; 32
    5e8a:	0d 92       	st	X+, r0
    5e8c:	41 50       	subi	r20, 0x01	; 1
    5e8e:	50 40       	sbci	r21, 0x00	; 0
    5e90:	b8 f7       	brcc	.-18     	; 0x5e80 <eeprom_read_blraw+0x8>
    5e92:	08 95       	ret

Disassembly of section .text.avrlibc:

000063ea <eeprom_read_byte>:
    63ea:	cb 01       	movw	r24, r22
    63ec:	f9 99       	sbic	0x1f, 1	; 31
    63ee:	fe cf       	rjmp	.-4      	; 0x63ec <eeprom_read_byte+0x2>
    63f0:	92 bd       	out	0x22, r25	; 34
    63f2:	81 bd       	out	0x21, r24	; 33
    63f4:	f8 9a       	sbi	0x1f, 0	; 31
    63f6:	99 27       	eor	r25, r25
    63f8:	80 b5       	in	r24, 0x20	; 32
    63fa:	08 95       	ret

Disassembly of section .text.avrlibc:

00006552 <eeprom_read_dword>:
    6552:	cb 01       	movw	r24, r22
    6554:	a6 e1       	ldi	r26, 0x16	; 22
    6556:	b0 e0       	ldi	r27, 0x00	; 0
    6558:	44 e0       	ldi	r20, 0x04	; 4
    655a:	50 e0       	ldi	r21, 0x00	; 0
    655c:	0c 94 3c 2f 	jmp	0x5e78	; 0x5e78 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00006560 <eeprom_read_word>:
    6560:	cb 01       	movw	r24, r22
    6562:	a8 e1       	ldi	r26, 0x18	; 24
    6564:	b0 e0       	ldi	r27, 0x00	; 0
    6566:	42 e0       	ldi	r20, 0x02	; 2
    6568:	50 e0       	ldi	r21, 0x00	; 0
    656a:	0c 94 3c 2f 	jmp	0x5e78	; 0x5e78 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00005312 <eeprom_update_block>:
    5312:	cf 92       	push	r12
    5314:	df 92       	push	r13
    5316:	ef 92       	push	r14
    5318:	21 50       	subi	r18, 0x01	; 1
    531a:	31 09       	sbc	r19, r1
    531c:	c0 f0       	brcs	.+48     	; 0x534e <eeprom_update_block+0x3c>
    531e:	6b 01       	movw	r12, r22
    5320:	e8 2e       	mov	r14, r24
    5322:	c2 0e       	add	r12, r18
    5324:	d3 1e       	adc	r13, r19
    5326:	e1 1c       	adc	r14, r1
    5328:	ca 01       	movw	r24, r20
    532a:	82 0f       	add	r24, r18
    532c:	93 1f       	adc	r25, r19
    532e:	42 2f       	mov	r20, r18
    5330:	73 2f       	mov	r23, r19
    5332:	f6 01       	movw	r30, r12
    5334:	5e 2d       	mov	r21, r14
    5336:	0e 94 38 33 	call	0x6670	; 0x6670 <__xload_1>
    533a:	26 2f       	mov	r18, r22
    533c:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <eeprom_update_r18>
    5340:	31 e0       	ldi	r19, 0x01	; 1
    5342:	c3 1a       	sub	r12, r19
    5344:	d1 08       	sbc	r13, r1
    5346:	e1 08       	sbc	r14, r1
    5348:	41 50       	subi	r20, 0x01	; 1
    534a:	70 40       	sbci	r23, 0x00	; 0
    534c:	90 f7       	brcc	.-28     	; 0x5332 <eeprom_update_block+0x20>
    534e:	ef 90       	pop	r14
    5350:	df 90       	pop	r13
    5352:	cf 90       	pop	r12
    5354:	08 95       	ret

Disassembly of section .text.avrlibc:

00005e94 <eeprom_update_byte>:
    5e94:	26 2f       	mov	r18, r22

00005e96 <eeprom_update_r18>:
    5e96:	f9 99       	sbic	0x1f, 1	; 31
    5e98:	fe cf       	rjmp	.-4      	; 0x5e96 <eeprom_update_r18>
    5e9a:	92 bd       	out	0x22, r25	; 34
    5e9c:	81 bd       	out	0x21, r24	; 33
    5e9e:	f8 9a       	sbi	0x1f, 0	; 31
    5ea0:	01 97       	sbiw	r24, 0x01	; 1
    5ea2:	00 b4       	in	r0, 0x20	; 32
    5ea4:	02 16       	cp	r0, r18
    5ea6:	39 f0       	breq	.+14     	; 0x5eb6 <eeprom_update_r18+0x20>
    5ea8:	1f ba       	out	0x1f, r1	; 31
    5eaa:	20 bd       	out	0x20, r18	; 32
    5eac:	0f b6       	in	r0, 0x3f	; 63
    5eae:	f8 94       	cli
    5eb0:	fa 9a       	sbi	0x1f, 2	; 31
    5eb2:	f9 9a       	sbi	0x1f, 1	; 31
    5eb4:	0f be       	out	0x3f, r0	; 63
    5eb6:	08 95       	ret

Disassembly of section .text.avrlibc:

00006254 <eeprom_update_dword>:
    6254:	03 96       	adiw	r24, 0x03	; 3
    6256:	27 2f       	mov	r18, r23
    6258:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <eeprom_update_r18>
    625c:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <eeprom_update_byte>
    6260:	25 2f       	mov	r18, r21
    6262:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <eeprom_update_r18>
    6266:	24 2f       	mov	r18, r20
    6268:	0c 94 4b 2f 	jmp	0x5e96	; 0x5e96 <eeprom_update_r18>

Disassembly of section .text.avrlibc:

0000660a <eeprom_update_word>:
    660a:	01 96       	adiw	r24, 0x01	; 1
    660c:	27 2f       	mov	r18, r23
    660e:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <eeprom_update_r18>
    6612:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00006024 <__mulsi3>:
    6024:	db 01       	movw	r26, r22
    6026:	8f 93       	push	r24
    6028:	9f 93       	push	r25
    602a:	0e 94 62 31 	call	0x62c4	; 0x62c4 <__muluhisi3>
    602e:	bf 91       	pop	r27
    6030:	af 91       	pop	r26
    6032:	a2 9f       	mul	r26, r18
    6034:	80 0d       	add	r24, r0
    6036:	91 1d       	adc	r25, r1
    6038:	a3 9f       	mul	r26, r19
    603a:	90 0d       	add	r25, r0
    603c:	b2 9f       	mul	r27, r18
    603e:	90 0d       	add	r25, r0
    6040:	11 24       	eor	r1, r1
    6042:	08 95       	ret

Disassembly of section .text.libgcc.div:

00005356 <__udivmodsi4>:
    5356:	a1 e2       	ldi	r26, 0x21	; 33
    5358:	1a 2e       	mov	r1, r26
    535a:	aa 1b       	sub	r26, r26
    535c:	bb 1b       	sub	r27, r27
    535e:	fd 01       	movw	r30, r26
    5360:	0d c0       	rjmp	.+26     	; 0x537c <__udivmodsi4_ep>

00005362 <__udivmodsi4_loop>:
    5362:	aa 1f       	adc	r26, r26
    5364:	bb 1f       	adc	r27, r27
    5366:	ee 1f       	adc	r30, r30
    5368:	ff 1f       	adc	r31, r31
    536a:	a2 17       	cp	r26, r18
    536c:	b3 07       	cpc	r27, r19
    536e:	e4 07       	cpc	r30, r20
    5370:	f5 07       	cpc	r31, r21
    5372:	20 f0       	brcs	.+8      	; 0x537c <__udivmodsi4_ep>
    5374:	a2 1b       	sub	r26, r18
    5376:	b3 0b       	sbc	r27, r19
    5378:	e4 0b       	sbc	r30, r20
    537a:	f5 0b       	sbc	r31, r21

0000537c <__udivmodsi4_ep>:
    537c:	66 1f       	adc	r22, r22
    537e:	77 1f       	adc	r23, r23
    5380:	88 1f       	adc	r24, r24
    5382:	99 1f       	adc	r25, r25
    5384:	1a 94       	dec	r1
    5386:	69 f7       	brne	.-38     	; 0x5362 <__udivmodsi4_loop>
    5388:	60 95       	com	r22
    538a:	70 95       	com	r23
    538c:	80 95       	com	r24
    538e:	90 95       	com	r25
    5390:	9b 01       	movw	r18, r22
    5392:	ac 01       	movw	r20, r24
    5394:	bd 01       	movw	r22, r26
    5396:	cf 01       	movw	r24, r30
    5398:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000062c4 <__muluhisi3>:
    62c4:	0e 94 6d 30 	call	0x60da	; 0x60da <__umulhisi3>
    62c8:	a5 9f       	mul	r26, r21
    62ca:	90 0d       	add	r25, r0
    62cc:	b4 9f       	mul	r27, r20
    62ce:	90 0d       	add	r25, r0
    62d0:	a4 9f       	mul	r26, r20
    62d2:	80 0d       	add	r24, r0
    62d4:	91 1d       	adc	r25, r1
    62d6:	11 24       	eor	r1, r1
    62d8:	08 95       	ret

Disassembly of section .text.libgcc:

00006670 <__xload_1>:
    6670:	57 fd       	sbrc	r21, 7
    6672:	60 81       	ld	r22, Z
    6674:	57 ff       	sbrs	r21, 7
    6676:	64 91       	lpm	r22, Z
    6678:	08 95       	ret
