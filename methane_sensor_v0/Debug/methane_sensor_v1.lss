
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000eec  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800100  00800100  00000eec  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d18  00000000  00000000  000011bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001139  00000000  00000000  00004ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013c2  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a4  00000000  00000000  000073d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045c  00000000  00000000  00007978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011da  00000000  00000000  00007dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  00008fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000e54  00000e54  00000ee8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000091a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_1 00000014  00000dcc  00000dcc  00000e60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.SCD30_HAL_init 0000000e  00000e28  00000e28  00000ebc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.SCD30_HAL_data_ready 0000000a  00000e44  00000e44  00000ed8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.start_and_write_data 0000004c  000009c2  000009c2  00000a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TWI_API_write_data_stop 00000010  00000e08  00000e08  00000e9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.TWI_API_read_data_ack_end_nack_stop 00000064  00000900  00000900  00000994  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.TWI_HAL_start 00000048  00000aa2  00000aa2  00000b36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.TWI_HAL_write_byte 00000020  00000d58  00000d58  00000dec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.TWI_HAL_read_byte_ack 00000014  00000de0  00000de0  00000e74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.TWI_HAL_read_byte_nack 00000014  00000df4  00000df4  00000e88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.TWI_HAL_stop 00000010  00000e18  00000e18  00000eac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_22 0000004a  00000a0e  00000a0e  00000aa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_20 00000074  0000081c  0000081c  000008b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .bss.rx_buffer_has_message 00000001  00800358  00800358  00000eec  2**0
                  ALLOC
 28 .bss.rx_buffer_data_len 00000001  00800359  00800359  00000eec  2**0
                  ALLOC
 29 .bss.tx_buffer_cursor 00000001  0080035a  0080035a  00000eec  2**0
                  ALLOC
 30 .bss.tx_buffer_data_len 00000001  0080035b  0080035b  00000eec  2**0
                  ALLOC
 31 .text.uart1_hal_init 0000003c  00000b74  00000b74  00000c08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.uart1_hal_send_message 00000034  00000cc6  00000cc6  00000d5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_30 0000004a  00000a58  00000a58  00000aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_28 00000070  00000890  00000890  00000924  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .bss.rx_buffer_has_message 00000001  0080035c  0080035c  00000eec  2**0
                  ALLOC
 36 .bss.rx_buffer_data_len 00000001  0080035d  0080035d  00000eec  2**0
                  ALLOC
 37 .bss.rx_buffer 00000064  008002f4  008002f4  00000eec  2**0
                  ALLOC
 38 .bss.tx_buffer_cursor 00000001  0080035e  0080035e  00000eec  2**0
                  ALLOC
 39 .bss.tx_buffer_data_len 00000001  0080035f  0080035f  00000eec  2**0
                  ALLOC
 40 .bss.tx_buffer 000000c8  0080022c  0080022c  00000eec  2**0
                  ALLOC
 41 .text.main    00000006  00000e4e  00000e4e  00000ee2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.bytes_2_uint 0000001a  00000d98  00000d98  00000e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.validate_data 00000032  00000cfa  00000cfa  00000d8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.SCD30_init 0000003c  00000bb0  00000bb0  00000c44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.SCD30_get_reading 00000098  0000068e  0000068e  00000722  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .progmemx.data.READ_DATA_CMD 00000002  000000e9  000000e9  0000017d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 47 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000000df  000000df  00000173  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 48 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000000e4  000000e4  00000178  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 49 .progmemx.data 00000009  000000d6  000000d6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 50 .text.test_init 0000007e  00000726  00000726  000007ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.test_get_reading 0000009e  000005f0  000005f0  00000684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.test_SCD30_module_start 00000020  00000d78  00000d78  00000e0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.calc_crc8 00000036  00000c24  00000c24  00000cb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.avrlibc.fplib 0000005e  00000964  00000964  000009f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.avrlibc.fplib 00000044  00000b30  00000b30  00000bc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.avrlibc.fplib 0000000e  00000e36  00000e36  00000eca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.libgcc  0000001a  00000db2  00000db2  00000e46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.avrlibc 0000002c  00000d2c  00000d2c  00000dc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.avrlibc 00000046  00000aea  00000aea  00000b7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.avrlibc 00000448  000000ec  000000ec  00000180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.avrlibc 00000036  00000c5a  00000c5a  00000cee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.avrlibc 00000078  000007a4  000007a4  00000838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.avrlibc 000000bc  00000534  00000534  000005c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.libgcc.prologue 00000038  00000bec  00000bec  00000c80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.libgcc.prologue 00000036  00000c90  00000c90  00000d24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__vector_1>
   8:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
   c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  10:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  14:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  18:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  1c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  20:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  24:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  28:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  2c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  30:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  34:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  38:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  3c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  40:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  44:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  48:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  4c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  50:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_20>
  54:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  58:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_22>
  5c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  60:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  64:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  68:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  6c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  70:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_28>
  74:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__bad_interrupt>
  78:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	03 60       	ori	r16, 0x03	; 3
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d0 e1       	ldi	r29, 0x10	; 16
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 27 07 	call	0xe4e	; 0xe4e <main>
  ce:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

00000e54 <__bad_interrupt>:
 e54:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_1:

00000dcc <__vector_1>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 0);
}

ISR(INT0_vect){
 dcc:	1f 92       	push	r1
 dce:	0f 92       	push	r0
 dd0:	0f b6       	in	r0, 0x3f	; 63
 dd2:	0f 92       	push	r0
 dd4:	11 24       	eor	r1, r1
	
}
 dd6:	0f 90       	pop	r0
 dd8:	0f be       	out	0x3f, r0	; 63
 dda:	0f 90       	pop	r0
 ddc:	1f 90       	pop	r1
 dde:	18 95       	reti

Disassembly of section .text.SCD30_HAL_init:

00000e28 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRD, 3);
 e28:	8a b1       	in	r24, 0x0a	; 10
 e2a:	87 7f       	andi	r24, 0xF7	; 247
 e2c:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 3);
 e2e:	8b b1       	in	r24, 0x0b	; 11
 e30:	87 7f       	andi	r24, 0xF7	; 247
 e32:	8b b9       	out	0x0b, r24	; 11
 e34:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00000e44 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PIND, 3);
 e44:	89 b1       	in	r24, 0x09	; 9
 e46:	83 fb       	bst	r24, 3
 e48:	88 27       	eor	r24, r24
 e4a:	80 f9       	bld	r24, 0
 e4c:	08 95       	ret

Disassembly of section .text.start_and_write_data:

000009c2 <start_and_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
}
 9c2:	cf 92       	push	r12
 9c4:	df 92       	push	r13
 9c6:	ef 92       	push	r14
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	6a 01       	movw	r12, r20
 9ce:	e6 2e       	mov	r14, r22
 9d0:	d2 2f       	mov	r29, r18
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <TWI_HAL_start>
 9d8:	81 11       	cpse	r24, r1
 9da:	13 c0       	rjmp	.+38     	; 0xa02 <start_and_write_data+0x40>
 9dc:	c0 e0       	ldi	r28, 0x00	; 0
 9de:	0e c0       	rjmp	.+28     	; 0x9fc <start_and_write_data+0x3a>
 9e0:	ae 2d       	mov	r26, r14
 9e2:	c6 01       	movw	r24, r12
 9e4:	8c 0f       	add	r24, r28
 9e6:	91 1d       	adc	r25, r1
 9e8:	a1 1d       	adc	r26, r1
 9ea:	fc 01       	movw	r30, r24
 9ec:	84 91       	lpm	r24, Z
 9ee:	a7 fd       	sbrc	r26, 7
 9f0:	80 81       	ld	r24, Z
 9f2:	0e 94 ac 06 	call	0xd58	; 0xd58 <TWI_HAL_write_byte>
 9f6:	81 11       	cpse	r24, r1
 9f8:	04 c0       	rjmp	.+8      	; 0xa02 <start_and_write_data+0x40>
 9fa:	cf 5f       	subi	r28, 0xFF	; 255
 9fc:	cd 17       	cp	r28, r29
 9fe:	80 f3       	brcs	.-32     	; 0x9e0 <start_and_write_data+0x1e>
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	ef 90       	pop	r14
 a08:	df 90       	pop	r13
 a0a:	cf 90       	pop	r12
 a0c:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00000e08 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
 e08:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
 e0c:	81 11       	cpse	r24, r1
 e0e:	03 c0       	rjmp	.+6      	; 0xe16 <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
 e10:	0e 94 0c 07 	call	0xe18	; 0xe18 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
 e14:	80 e0       	ldi	r24, 0x00	; 0
}
 e16:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00000900 <TWI_API_read_data_ack_end_nack_stop>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
}
 900:	ef 92       	push	r14
 902:	ff 92       	push	r15
 904:	0f 93       	push	r16
 906:	1f 93       	push	r17
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
 90c:	8b 01       	movw	r16, r22
 90e:	d4 2f       	mov	r29, r20
 910:	61 e0       	ldi	r22, 0x01	; 1
 912:	0e 94 51 05 	call	0xaa2	; 0xaa2 <TWI_HAL_start>
 916:	81 11       	cpse	r24, r1
 918:	1e c0       	rjmp	.+60     	; 0x956 <TWI_API_read_data_ack_end_nack_stop+0x56>
 91a:	c0 e0       	ldi	r28, 0x00	; 0
 91c:	08 c0       	rjmp	.+16     	; 0x92e <TWI_API_read_data_ack_end_nack_stop+0x2e>
 91e:	78 01       	movw	r14, r16
 920:	ec 0e       	add	r14, r28
 922:	f1 1c       	adc	r15, r1
 924:	0e 94 f0 06 	call	0xde0	; 0xde0 <TWI_HAL_read_byte_ack>
 928:	f7 01       	movw	r30, r14
 92a:	80 83       	st	Z, r24
 92c:	cf 5f       	subi	r28, 0xFF	; 255
 92e:	2c 2f       	mov	r18, r28
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	8d 2f       	mov	r24, r29
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	01 97       	sbiw	r24, 0x01	; 1
 938:	28 17       	cp	r18, r24
 93a:	39 07       	cpc	r19, r25
 93c:	84 f3       	brlt	.-32     	; 0x91e <TWI_API_read_data_ack_end_nack_stop+0x1e>
 93e:	8d 2f       	mov	r24, r29
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	01 97       	sbiw	r24, 0x01	; 1
 944:	e8 01       	movw	r28, r16
 946:	c8 0f       	add	r28, r24
 948:	d9 1f       	adc	r29, r25
 94a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <TWI_HAL_read_byte_nack>
 94e:	88 83       	st	Y, r24
 950:	0e 94 0c 07 	call	0xe18	; 0xe18 <TWI_HAL_stop>
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	df 91       	pop	r29
 958:	cf 91       	pop	r28
 95a:	1f 91       	pop	r17
 95c:	0f 91       	pop	r16
 95e:	ff 90       	pop	r15
 960:	ef 90       	pop	r14
 962:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00000aa2 <TWI_HAL_start>:
		clear_byte(TWSR, 0b00000011); //set prescale to 1
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	88 0f       	add	r24, r24
 aa6:	99 1f       	adc	r25, r25
 aa8:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
 aaa:	84 ea       	ldi	r24, 0xA4	; 164
 aac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
 ab0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 ab4:	99 23       	and	r25, r25
 ab6:	e4 f7       	brge	.-8      	; 0xab0 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
 ab8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 abc:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
 abe:	88 30       	cpi	r24, 0x08	; 8
 ac0:	99 f4       	brne	.+38     	; 0xae8 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
 ac2:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
 ac6:	84 e8       	ldi	r24, 0x84	; 132
 ac8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
 acc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 ad0:	88 23       	and	r24, r24
 ad2:	e4 f7       	brge	.-8      	; 0xacc <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
 ad4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 ad8:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
 ada:	88 31       	cpi	r24, 0x18	; 24
 adc:	21 f0       	breq	.+8      	; 0xae6 <TWI_HAL_start+0x44>
 ade:	80 34       	cpi	r24, 0x40	; 64
 ae0:	19 f4       	brne	.+6      	; 0xae8 <TWI_HAL_start+0x46>
 ae2:	80 e0       	ldi	r24, 0x00	; 0
 ae4:	08 95       	ret
 ae6:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
 ae8:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00000d58 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
 d58:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
 d5c:	84 e8       	ldi	r24, 0x84	; 132
 d5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
 d62:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 d66:	88 23       	and	r24, r24
 d68:	e4 f7       	brge	.-8      	; 0xd62 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
 d6a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
 d6e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
 d70:	88 32       	cpi	r24, 0x28	; 40
 d72:	09 f4       	brne	.+2      	; 0xd76 <TWI_HAL_write_byte+0x1e>
 d74:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
 d76:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00000de0 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
 de0:	84 ec       	ldi	r24, 0xC4	; 196
 de2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
 de6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 dea:	88 23       	and	r24, r24
 dec:	e4 f7       	brge	.-8      	; 0xde6 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
 dee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
 df2:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00000df4 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
 df4:	84 e8       	ldi	r24, 0x84	; 132
 df6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
 dfa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 dfe:	88 23       	and	r24, r24
 e00:	e4 f7       	brge	.-8      	; 0xdfa <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
 e02:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
 e06:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00000e18 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
 e18:	84 e9       	ldi	r24, 0x94	; 148
 e1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
 e1e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
 e22:	84 fd       	sbrc	r24, 4
 e24:	fc cf       	rjmp	.-8      	; 0xe1e <TWI_HAL_stop+0x6>
}
 e26:	08 95       	ret

Disassembly of section .text.__vector_22:

00000a0e <__vector_22>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART0_TX_vect){
 a0e:	1f 92       	push	r1
 a10:	0f 92       	push	r0
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	0f 92       	push	r0
 a16:	11 24       	eor	r1, r1
 a18:	8f 93       	push	r24
 a1a:	ef 93       	push	r30
 a1c:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 a1e:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <tx_buffer_cursor>
 a22:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <tx_buffer_data_len>
 a26:	e8 17       	cp	r30, r24
 a28:	58 f4       	brcc	.+22     	; 0xa40 <__vector_22+0x32>
		UDR0=tx_buffer[tx_buffer_cursor++];
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	8e 0f       	add	r24, r30
 a2e:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <tx_buffer_cursor>
 a32:	f0 e0       	ldi	r31, 0x00	; 0
 a34:	ec 59       	subi	r30, 0x9C	; 156
 a36:	fe 4f       	sbci	r31, 0xFE	; 254
 a38:	80 81       	ld	r24, Z
 a3a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__vector_22+0x3a>
	}else{
		tx_buffer_cursor=0;
 a40:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <tx_buffer_cursor>
		tx_buffer_data_len=0;
 a44:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <tx_buffer_data_len>
	}
}
 a48:	ff 91       	pop	r31
 a4a:	ef 91       	pop	r30
 a4c:	8f 91       	pop	r24
 a4e:	0f 90       	pop	r0
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	0f 90       	pop	r0
 a54:	1f 90       	pop	r1
 a56:	18 95       	reti

Disassembly of section .text.__vector_20:

0000081c <__vector_20>:
	set_bit(UCSR0B, 3); //Enable Tx
	
	uint8_t data[1];
	data[0]=followUpByte;
	uart0_hal_send_message(data, 1);
}
 81c:	1f 92       	push	r1
 81e:	0f 92       	push	r0
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	0f 92       	push	r0
 824:	11 24       	eor	r1, r1
 826:	2f 93       	push	r18
 828:	8f 93       	push	r24
 82a:	9f 93       	push	r25
 82c:	ef 93       	push	r30
 82e:	ff 93       	push	r31
 830:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <rx_buffer_has_message>
 834:	81 11       	cpse	r24, r1
 836:	0e c0       	rjmp	.+28     	; 0x854 <__vector_20+0x38>
 838:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <rx_buffer_data_len>
 83c:	e4 36       	cpi	r30, 0x64	; 100
 83e:	50 f4       	brcc	.+20     	; 0x854 <__vector_20+0x38>
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	8e 0f       	add	r24, r30
 844:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <rx_buffer_data_len>
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 84e:	e0 50       	subi	r30, 0x00	; 0
 850:	ff 4f       	sbci	r31, 0xFF	; 255
 852:	80 83       	st	Z, r24
 854:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <rx_buffer_data_len>
 858:	83 30       	cpi	r24, 0x03	; 3
 85a:	80 f0       	brcs	.+32     	; 0x87c <__vector_20+0x60>
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	fc 01       	movw	r30, r24
 860:	e1 50       	subi	r30, 0x01	; 1
 862:	ff 4f       	sbci	r31, 0xFF	; 255
 864:	20 81       	ld	r18, Z
 866:	2a 30       	cpi	r18, 0x0A	; 10
 868:	49 f4       	brne	.+18     	; 0x87c <__vector_20+0x60>
 86a:	fc 01       	movw	r30, r24
 86c:	e2 50       	subi	r30, 0x02	; 2
 86e:	ff 4f       	sbci	r31, 0xFF	; 255
 870:	80 81       	ld	r24, Z
 872:	8d 30       	cpi	r24, 0x0D	; 13
 874:	19 f4       	brne	.+6      	; 0x87c <__vector_20+0x60>
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <rx_buffer_has_message>
 87c:	ff 91       	pop	r31
 87e:	ef 91       	pop	r30
 880:	9f 91       	pop	r25
 882:	8f 91       	pop	r24
 884:	2f 91       	pop	r18
 886:	0f 90       	pop	r0
 888:	0f be       	out	0x3f, r0	; 63
 88a:	0f 90       	pop	r0
 88c:	1f 90       	pop	r1
 88e:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00000b74 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
 b74:	e9 ec       	ldi	r30, 0xC9	; 201
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	80 81       	ld	r24, Z
 b7a:	80 61       	ori	r24, 0x10	; 16
 b7c:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
 b7e:	80 81       	ld	r24, Z
 b80:	88 60       	ori	r24, 0x08	; 8
 b82:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
 b84:	80 81       	ld	r24, Z
 b86:	80 68       	ori	r24, 0x80	; 128
 b88:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
 b8a:	80 81       	ld	r24, Z
 b8c:	80 64       	ori	r24, 0x40	; 64
 b8e:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
 b90:	e8 ec       	ldi	r30, 0xC8	; 200
 b92:	f0 e0       	ldi	r31, 0x00	; 0
 b94:	80 81       	ld	r24, Z
 b96:	82 60       	ori	r24, 0x02	; 2
 b98:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 b9a:	86 e0       	ldi	r24, 0x06	; 6
 b9c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
 ba0:	80 e1       	ldi	r24, 0x10	; 16
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
 ba8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
 bac:	78 94       	sei
 bae:	08 95       	ret

Disassembly of section .text.uart1_hal_send_message:

00000cc6 <uart1_hal_send_message>:
}


void uart1_hal_send_message(uint8_t msg[], uint8_t length){
 cc6:	dc 01       	movw	r26, r24
	for (uint8_t i=0; i<length; i++)
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	0b c0       	rjmp	.+22     	; 0xce2 <uart1_hal_send_message+0x1c>
	{
		tx_buffer[i]=msg[i];
 ccc:	29 2f       	mov	r18, r25
 cce:	30 e0       	ldi	r19, 0x00	; 0
 cd0:	fd 01       	movw	r30, r26
 cd2:	e2 0f       	add	r30, r18
 cd4:	f3 1f       	adc	r31, r19
 cd6:	40 81       	ld	r20, Z
 cd8:	f9 01       	movw	r30, r18
 cda:	e4 5d       	subi	r30, 0xD4	; 212
 cdc:	fd 4f       	sbci	r31, 0xFD	; 253
 cde:	40 83       	st	Z, r20
	sei();
}


void uart1_hal_send_message(uint8_t msg[], uint8_t length){
	for (uint8_t i=0; i<length; i++)
 ce0:	9f 5f       	subi	r25, 0xFF	; 255
 ce2:	96 17       	cp	r25, r22
 ce4:	98 f3       	brcs	.-26     	; 0xccc <uart1_hal_send_message+0x6>
	{
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
 ce6:	60 93 5f 03 	sts	0x035F, r22	; 0x80035f <tx_buffer_data_len>
	tx_buffer_cursor=1;
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <tx_buffer_cursor>
	UDR1=tx_buffer[0];
 cf0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <_end>
 cf4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 cf8:	08 95       	ret

Disassembly of section .text.__vector_30:

00000a58 <__vector_30>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
 a58:	1f 92       	push	r1
 a5a:	0f 92       	push	r0
 a5c:	0f b6       	in	r0, 0x3f	; 63
 a5e:	0f 92       	push	r0
 a60:	11 24       	eor	r1, r1
 a62:	8f 93       	push	r24
 a64:	ef 93       	push	r30
 a66:	ff 93       	push	r31
 a68:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <tx_buffer_cursor>
 a6c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <tx_buffer_data_len>
 a70:	e8 17       	cp	r30, r24
 a72:	58 f4       	brcc	.+22     	; 0xa8a <__vector_30+0x32>
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	8e 0f       	add	r24, r30
 a78:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <tx_buffer_cursor>
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	e4 5d       	subi	r30, 0xD4	; 212
 a80:	fd 4f       	sbci	r31, 0xFD	; 253
 a82:	80 81       	ld	r24, Z
 a84:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 a88:	04 c0       	rjmp	.+8      	; 0xa92 <__vector_30+0x3a>
 a8a:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <tx_buffer_cursor>
 a8e:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <tx_buffer_data_len>
 a92:	ff 91       	pop	r31
 a94:	ef 91       	pop	r30
 a96:	8f 91       	pop	r24
 a98:	0f 90       	pop	r0
 a9a:	0f be       	out	0x3f, r0	; 63
 a9c:	0f 90       	pop	r0
 a9e:	1f 90       	pop	r1
 aa0:	18 95       	reti

Disassembly of section .text.__vector_28:

00000890 <__vector_28>:
 890:	1f 92       	push	r1
 892:	0f 92       	push	r0
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	0f 92       	push	r0
 898:	11 24       	eor	r1, r1
 89a:	2f 93       	push	r18
 89c:	8f 93       	push	r24
 89e:	9f 93       	push	r25
 8a0:	ef 93       	push	r30
 8a2:	ff 93       	push	r31
 8a4:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <rx_buffer_has_message>
 8a8:	81 11       	cpse	r24, r1
 8aa:	0e c0       	rjmp	.+28     	; 0x8c8 <__vector_28+0x38>
 8ac:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <rx_buffer_data_len>
 8b0:	e4 36       	cpi	r30, 0x64	; 100
 8b2:	50 f4       	brcc	.+20     	; 0x8c8 <__vector_28+0x38>
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	8e 0f       	add	r24, r30
 8b8:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <rx_buffer_data_len>
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 8c2:	ec 50       	subi	r30, 0x0C	; 12
 8c4:	fd 4f       	sbci	r31, 0xFD	; 253
 8c6:	80 83       	st	Z, r24
 8c8:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <rx_buffer_data_len>
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	fc 01       	movw	r30, r24
 8d0:	ed 50       	subi	r30, 0x0D	; 13
 8d2:	fd 4f       	sbci	r31, 0xFD	; 253
 8d4:	20 81       	ld	r18, Z
 8d6:	2a 30       	cpi	r18, 0x0A	; 10
 8d8:	49 f4       	brne	.+18     	; 0x8ec <__vector_28+0x5c>
 8da:	fc 01       	movw	r30, r24
 8dc:	ee 50       	subi	r30, 0x0E	; 14
 8de:	fd 4f       	sbci	r31, 0xFD	; 253
 8e0:	80 81       	ld	r24, Z
 8e2:	8d 30       	cpi	r24, 0x0D	; 13
 8e4:	19 f4       	brne	.+6      	; 0x8ec <__vector_28+0x5c>
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <rx_buffer_has_message>
 8ec:	ff 91       	pop	r31
 8ee:	ef 91       	pop	r30
 8f0:	9f 91       	pop	r25
 8f2:	8f 91       	pop	r24
 8f4:	2f 91       	pop	r18
 8f6:	0f 90       	pop	r0
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	0f 90       	pop	r0
 8fc:	1f 90       	pop	r1
 8fe:	18 95       	reti

Disassembly of section .text.main:

00000e4e <main>:
#include "TEST/ADC_module/test_ADC_module.h"

int main(void)
{
	//test_lora_module_start();
	test_SCD30_module_start();
 e4e:	0e 94 bc 06 	call	0xd78	; 0xd78 <test_SCD30_module_start>
 e52:	ff cf       	rjmp	.-2      	; 0xe52 <main+0x4>

Disassembly of section .text.bytes_2_uint:

00000d98 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
 d98:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
 d9a:	54 81       	ldd	r21, Z+4	; 0x04
 d9c:	43 81       	ldd	r20, Z+3	; 0x03
 d9e:	31 81       	ldd	r19, Z+1	; 0x01
 da0:	20 81       	ld	r18, Z
 da2:	65 2f       	mov	r22, r21
 da4:	74 2f       	mov	r23, r20
 da6:	83 2f       	mov	r24, r19
 da8:	92 2f       	mov	r25, r18
 daa:	0e 94 b2 04 	call	0x964	; 0x964 <__fixunssfsi>
}
 dae:	cb 01       	movw	r24, r22
 db0:	08 95       	ret

Disassembly of section .text.validate_data:

00000cfa <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
 cfa:	cf 93       	push	r28
 cfc:	df 93       	push	r29
 cfe:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
 d00:	62 e0       	ldi	r22, 0x02	; 2
 d02:	0e 94 12 06 	call	0xc24	; 0xc24 <calc_crc8>
	if(data[2]!=crc) return false;
 d06:	9a 81       	ldd	r25, Y+2	; 0x02
 d08:	89 13       	cpse	r24, r25
 d0a:	0a c0       	rjmp	.+20     	; 0xd20 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
 d0c:	62 e0       	ldi	r22, 0x02	; 2
 d0e:	ce 01       	movw	r24, r28
 d10:	03 96       	adiw	r24, 0x03	; 3
 d12:	0e 94 12 06 	call	0xc24	; 0xc24 <calc_crc8>
	if(data[5]!=crc) return false;
 d16:	9d 81       	ldd	r25, Y+5	; 0x05
 d18:	89 17       	cp	r24, r25
 d1a:	21 f0       	breq	.+8      	; 0xd24 <validate_data+0x2a>
 d1c:	80 e0       	ldi	r24, 0x00	; 0
 d1e:	03 c0       	rjmp	.+6      	; 0xd26 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
 d20:	80 e0       	ldi	r24, 0x00	; 0
 d22:	01 c0       	rjmp	.+2      	; 0xd26 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
 d24:	81 e0       	ldi	r24, 0x01	; 1
}
 d26:	df 91       	pop	r29
 d28:	cf 91       	pop	r28
 d2a:	08 95       	ret

Disassembly of section .text.SCD30_init:

00000bb0 <SCD30_init>:
static bool validate_data(uint8_t data[]);
static uint16_t bytes_2_uint(uint8_t data[]);

SCD30_STATUS SCD30_init(uint16_t interval){
	uint8_t status;
	SCD30_HAL_init();
 bb0:	0e 94 14 07 	call	0xe28	; 0xe28 <SCD30_HAL_init>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
 bb4:	25 e0       	ldi	r18, 0x05	; 5
 bb6:	4f ed       	ldi	r20, 0xDF	; 223
 bb8:	50 e0       	ldi	r21, 0x00	; 0
 bba:	60 e0       	ldi	r22, 0x00	; 0
 bbc:	81 e6       	ldi	r24, 0x61	; 97
 bbe:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
 bc2:	81 11       	cpse	r24, r1
 bc4:	0f c0       	rjmp	.+30     	; 0xbe4 <SCD30_init+0x34>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
 bc6:	25 e0       	ldi	r18, 0x05	; 5
 bc8:	44 ee       	ldi	r20, 0xE4	; 228
 bca:	50 e0       	ldi	r21, 0x00	; 0
 bcc:	60 e0       	ldi	r22, 0x00	; 0
 bce:	81 e6       	ldi	r24, 0x61	; 97
 bd0:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
 bd4:	81 11       	cpse	r24, r1
 bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <SCD30_init+0x38>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
 bd8:	0e 94 22 07 	call	0xe44	; 0xe44 <SCD30_HAL_data_ready>
 bdc:	88 23       	and	r24, r24
 bde:	e1 f3       	breq	.-8      	; 0xbd8 <SCD30_init+0x28>
		
	return SCD30_STATUS_SUCCESS;
 be0:	80 e0       	ldi	r24, 0x00	; 0
 be2:	08 95       	ret
SCD30_STATUS SCD30_init(uint16_t interval){
	uint8_t status;
	SCD30_HAL_init();
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
 be4:	82 e0       	ldi	r24, 0x02	; 2
 be6:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
 be8:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
		
	return SCD30_STATUS_SUCCESS;
}
 bea:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

0000068e <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	00 d0       	rcall	.+0      	; 0x698 <SCD30_get_reading+0xa>
 698:	00 d0       	rcall	.+0      	; 0x69a <SCD30_get_reading+0xc>
 69a:	00 d0       	rcall	.+0      	; 0x69c <SCD30_get_reading+0xe>
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62
 6a0:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	9f ef       	ldi	r25, 0xFF	; 255
 6a6:	f8 01       	movw	r30, r16
 6a8:	91 83       	std	Z+1, r25	; 0x01
 6aa:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()) return SCD30_STATUS_TRY_AGAIN;	
 6ac:	0e 94 22 07 	call	0xe44	; 0xe44 <SCD30_HAL_data_ready>
 6b0:	88 23       	and	r24, r24
 6b2:	39 f1       	breq	.+78     	; 0x702 <SCD30_get_reading+0x74>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
 6b4:	22 e0       	ldi	r18, 0x02	; 2
 6b6:	49 ee       	ldi	r20, 0xE9	; 233
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	81 e6       	ldi	r24, 0x61	; 97
 6be:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
 6c2:	81 11       	cpse	r24, r1
 6c4:	20 c0       	rjmp	.+64     	; 0x706 <SCD30_get_reading+0x78>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c6:	87 ee       	ldi	r24, 0xE7	; 231
 6c8:	93 e0       	ldi	r25, 0x03	; 3
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <SCD30_get_reading+0x3c>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <SCD30_get_reading+0x42>
 6d0:	00 00       	nop
	
	_delay_ms(4); 
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
 6d2:	46 e0       	ldi	r20, 0x06	; 6
 6d4:	be 01       	movw	r22, r28
 6d6:	6f 5f       	subi	r22, 0xFF	; 255
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	81 e6       	ldi	r24, 0x61	; 97
 6dc:	0e 94 80 04 	call	0x900	; 0x900 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
 6e0:	81 11       	cpse	r24, r1
 6e2:	13 c0       	rjmp	.+38     	; 0x70a <SCD30_get_reading+0x7c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
 6e4:	ce 01       	movw	r24, r28
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <validate_data>
 6ec:	88 23       	and	r24, r24
 6ee:	79 f0       	breq	.+30     	; 0x70e <SCD30_get_reading+0x80>
	
	*value=bytes_2_uint(data);
 6f0:	ce 01       	movw	r24, r28
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	0e 94 cc 06 	call	0xd98	; 0xd98 <bytes_2_uint>
 6f8:	f8 01       	movw	r30, r16
 6fa:	91 83       	std	Z+1, r25	; 0x01
 6fc:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	07 c0       	rjmp	.+14     	; 0x710 <SCD30_get_reading+0x82>
SCD30_STATUS SCD30_get_reading(uint16_t *value){
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;

	if(!SCD30_HAL_data_ready()) return SCD30_STATUS_TRY_AGAIN;	
 702:	83 e0       	ldi	r24, 0x03	; 3
 704:	05 c0       	rjmp	.+10     	; 0x710 <SCD30_get_reading+0x82>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	03 c0       	rjmp	.+6      	; 0x710 <SCD30_get_reading+0x82>
	
	_delay_ms(4); 
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	01 c0       	rjmp	.+2      	; 0x710 <SCD30_get_reading+0x82>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
 70e:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
 710:	26 96       	adiw	r28, 0x06	; 6
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	f8 94       	cli
 716:	de bf       	out	0x3e, r29	; 62
 718:	0f be       	out	0x3f, r0	; 63
 71a:	cd bf       	out	0x3d, r28	; 61
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	1f 91       	pop	r17
 722:	0f 91       	pop	r16
 724:	08 95       	ret

Disassembly of section .text.test_init:

00000726 <test_init>:
		char msg[]="FAIL";
		uart1_hal_send_message((uint8_t*)msg, 5);
	}
}

void test_init(){
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	00 d0       	rcall	.+0      	; 0x72c <test_init+0x6>
 72c:	00 d0       	rcall	.+0      	; 0x72e <test_init+0x8>
 72e:	1f 92       	push	r1
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
		SCD30_STATUS status=SCD30_init(2);
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <SCD30_init>
		if(status==SCD30_STATUS_SUCCESS){
 73c:	81 11       	cpse	r24, r1
 73e:	0b c0       	rjmp	.+22     	; 0x756 <test_init+0x30>
			char msg[]="OK";
 740:	8f e4       	ldi	r24, 0x4F	; 79
 742:	9b e4       	ldi	r25, 0x4B	; 75
 744:	9a 83       	std	Y+2, r25	; 0x02
 746:	89 83       	std	Y+1, r24	; 0x01
 748:	1b 82       	std	Y+3, r1	; 0x03
			uart1_hal_send_message((uint8_t*)msg, 3);
 74a:	63 e0       	ldi	r22, 0x03	; 3
 74c:	ce 01       	movw	r24, r28
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	0e 94 63 06 	call	0xcc6	; 0xcc6 <uart1_hal_send_message>
 754:	1f c0       	rjmp	.+62     	; 0x794 <test_init+0x6e>
		}else if(status==SCD30_STATUS_TRY_AGAIN){
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	71 f4       	brne	.+28     	; 0x776 <test_init+0x50>
			char msg[]="TRY";
 75a:	84 e5       	ldi	r24, 0x54	; 84
 75c:	92 e5       	ldi	r25, 0x52	; 82
 75e:	9a 83       	std	Y+2, r25	; 0x02
 760:	89 83       	std	Y+1, r24	; 0x01
 762:	89 e5       	ldi	r24, 0x59	; 89
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	9c 83       	std	Y+4, r25	; 0x04
 768:	8b 83       	std	Y+3, r24	; 0x03
			uart1_hal_send_message((uint8_t*)msg, 4);
 76a:	64 e0       	ldi	r22, 0x04	; 4
 76c:	ce 01       	movw	r24, r28
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	0e 94 63 06 	call	0xcc6	; 0xcc6 <uart1_hal_send_message>
 774:	0f c0       	rjmp	.+30     	; 0x794 <test_init+0x6e>
		}else{
			char msg[]="FAIL";
 776:	26 ed       	ldi	r18, 0xD6	; 214
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	85 e0       	ldi	r24, 0x05	; 5
 77e:	f9 01       	movw	r30, r18
 780:	de 01       	movw	r26, r28
 782:	11 96       	adiw	r26, 0x01	; 1
 784:	74 2f       	mov	r23, r20
 786:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__movmemx_qi>
			uart1_hal_send_message((uint8_t*)msg, 5);
 78a:	65 e0       	ldi	r22, 0x05	; 5
 78c:	ce 01       	movw	r24, r28
 78e:	01 96       	adiw	r24, 0x01	; 1
 790:	0e 94 63 06 	call	0xcc6	; 0xcc6 <uart1_hal_send_message>
		}
}
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	0f 90       	pop	r0
 79a:	0f 90       	pop	r0
 79c:	0f 90       	pop	r0
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	08 95       	ret

Disassembly of section .text.test_get_reading:

000005f0 <test_get_reading>:
		uart1_hal_send_message((uint8_t*)msg, 3);
	}else{
		char msg[]="FAIL";
		uart1_hal_send_message((uint8_t*)msg, 5);
	}
}
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	68 97       	sbiw	r28, 0x18	; 24
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	f8 94       	cli
 602:	de bf       	out	0x3e, r29	; 62
 604:	0f be       	out	0x3f, r0	; 63
 606:	cd bf       	out	0x3d, r28	; 61
 608:	ce 01       	movw	r24, r28
 60a:	45 96       	adiw	r24, 0x15	; 21
 60c:	0e 94 47 03 	call	0x68e	; 0x68e <SCD30_get_reading>
 610:	81 11       	cpse	r24, r1
 612:	1f c0       	rjmp	.+62     	; 0x652 <test_get_reading+0x62>
 614:	8e 89       	ldd	r24, Y+22	; 0x16
 616:	8f 93       	push	r24
 618:	8d 89       	ldd	r24, Y+21	; 0x15
 61a:	8f 93       	push	r24
 61c:	8b ed       	ldi	r24, 0xDB	; 219
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	a0 e0       	ldi	r26, 0x00	; 0
 622:	af 93       	push	r26
 624:	9f 93       	push	r25
 626:	8f 93       	push	r24
 628:	8e 01       	movw	r16, r28
 62a:	0f 5f       	subi	r16, 0xFF	; 255
 62c:	1f 4f       	sbci	r17, 0xFF	; 255
 62e:	1f 93       	push	r17
 630:	0f 93       	push	r16
 632:	0e 94 75 05 	call	0xaea	; 0xaea <sprintf>
 636:	b8 01       	movw	r22, r16
 638:	80 e8       	ldi	r24, 0x80	; 128
 63a:	0e 94 96 06 	call	0xd2c	; 0xd2c <strlen>
 63e:	68 2f       	mov	r22, r24
 640:	c8 01       	movw	r24, r16
 642:	0e 94 63 06 	call	0xcc6	; 0xcc6 <uart1_hal_send_message>
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
 650:	13 c0       	rjmp	.+38     	; 0x678 <test_get_reading+0x88>
 652:	83 30       	cpi	r24, 0x03	; 3
 654:	49 f4       	brne	.+18     	; 0x668 <test_get_reading+0x78>
 656:	8e ee       	ldi	r24, 0xEE	; 238
 658:	8f 8b       	std	Y+23, r24	; 0x17
 65a:	88 8f       	std	Y+24, r24	; 0x18
 65c:	62 e0       	ldi	r22, 0x02	; 2
 65e:	ce 01       	movw	r24, r28
 660:	47 96       	adiw	r24, 0x17	; 23
 662:	0e 94 63 06 	call	0xcc6	; 0xcc6 <uart1_hal_send_message>
 666:	08 c0       	rjmp	.+16     	; 0x678 <test_get_reading+0x88>
 668:	8f ef       	ldi	r24, 0xFF	; 255
 66a:	8f 8b       	std	Y+23, r24	; 0x17
 66c:	88 8f       	std	Y+24, r24	; 0x18
 66e:	62 e0       	ldi	r22, 0x02	; 2
 670:	ce 01       	movw	r24, r28
 672:	47 96       	adiw	r24, 0x17	; 23
 674:	0e 94 63 06 	call	0xcc6	; 0xcc6 <uart1_hal_send_message>
 678:	68 96       	adiw	r28, 0x18	; 24
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	f8 94       	cli
 67e:	de bf       	out	0x3e, r29	; 62
 680:	0f be       	out	0x3f, r0	; 63
 682:	cd bf       	out	0x3d, r28	; 61
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	1f 91       	pop	r17
 68a:	0f 91       	pop	r16
 68c:	08 95       	ret

Disassembly of section .text.test_SCD30_module_start:

00000d78 <test_SCD30_module_start>:
void test_get_reading();
void test_data_ready();
void read_measure_interval();

void test_SCD30_module_start(){
		uart1_hal_init();
 d78:	0e 94 ba 05 	call	0xb74	; 0xb74 <uart1_hal_init>
		test_init();
 d7c:	0e 94 93 03 	call	0x726	; 0x726 <test_init>
		while(1){
			//test_HAL();
			//read_firmware();
			//read_firmware_api();
			
			test_get_reading();
 d80:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <test_get_reading>
 d84:	2f ef       	ldi	r18, 0xFF	; 255
 d86:	8e e9       	ldi	r24, 0x9E	; 158
 d88:	94 e2       	ldi	r25, 0x24	; 36
 d8a:	21 50       	subi	r18, 0x01	; 1
 d8c:	80 40       	sbci	r24, 0x00	; 0
 d8e:	90 40       	sbci	r25, 0x00	; 0
 d90:	e1 f7       	brne	.-8      	; 0xd8a <test_SCD30_module_start+0x12>
 d92:	00 c0       	rjmp	.+0      	; 0xd94 <test_SCD30_module_start+0x1c>
 d94:	00 00       	nop
 d96:	f4 cf       	rjmp	.-24     	; 0xd80 <test_SCD30_module_start+0x8>

Disassembly of section .text.calc_crc8:

00000c24 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
 c24:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
 c26:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
 c28:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
 c2a:	14 c0       	rjmp	.+40     	; 0xc54 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
 c2c:	fa 01       	movw	r30, r20
 c2e:	e3 0f       	add	r30, r19
 c30:	f1 1d       	adc	r31, r1
 c32:	90 81       	ld	r25, Z
 c34:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
 c36:	28 e0       	ldi	r18, 0x08	; 8
 c38:	0a c0       	rjmp	.+20     	; 0xc4e <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
 c3a:	88 23       	and	r24, r24
 c3c:	34 f4       	brge	.+12     	; 0xc4a <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	88 0f       	add	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	91 e3       	ldi	r25, 0x31	; 49
 c46:	89 27       	eor	r24, r25
 c48:	01 c0       	rjmp	.+2      	; 0xc4c <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
 c4a:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
 c4c:	21 50       	subi	r18, 0x01	; 1
 c4e:	21 11       	cpse	r18, r1
 c50:	f4 cf       	rjmp	.-24     	; 0xc3a <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
 c52:	3f 5f       	subi	r19, 0xFF	; 255
 c54:	36 17       	cp	r19, r22
 c56:	50 f3       	brcs	.-44     	; 0xc2c <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
 c58:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000964 <__fixunssfsi>:
 964:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fp_splitA>
 968:	88 f0       	brcs	.+34     	; 0x98c <__fixunssfsi+0x28>
 96a:	9f 57       	subi	r25, 0x7F	; 127
 96c:	98 f0       	brcs	.+38     	; 0x994 <__fixunssfsi+0x30>
 96e:	b9 2f       	mov	r27, r25
 970:	99 27       	eor	r25, r25
 972:	b7 51       	subi	r27, 0x17	; 23
 974:	b0 f0       	brcs	.+44     	; 0x9a2 <__fixunssfsi+0x3e>
 976:	e1 f0       	breq	.+56     	; 0x9b0 <__fixunssfsi+0x4c>
 978:	66 0f       	add	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	1a f0       	brmi	.+6      	; 0x988 <__fixunssfsi+0x24>
 982:	ba 95       	dec	r27
 984:	c9 f7       	brne	.-14     	; 0x978 <__fixunssfsi+0x14>
 986:	14 c0       	rjmp	.+40     	; 0x9b0 <__fixunssfsi+0x4c>
 988:	b1 30       	cpi	r27, 0x01	; 1
 98a:	91 f0       	breq	.+36     	; 0x9b0 <__fixunssfsi+0x4c>
 98c:	0e 94 1b 07 	call	0xe36	; 0xe36 <__fp_zero>
 990:	b1 e0       	ldi	r27, 0x01	; 1
 992:	08 95       	ret
 994:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_zero>
 998:	67 2f       	mov	r22, r23
 99a:	78 2f       	mov	r23, r24
 99c:	88 27       	eor	r24, r24
 99e:	b8 5f       	subi	r27, 0xF8	; 248
 9a0:	39 f0       	breq	.+14     	; 0x9b0 <__fixunssfsi+0x4c>
 9a2:	b9 3f       	cpi	r27, 0xF9	; 249
 9a4:	cc f3       	brlt	.-14     	; 0x998 <__fixunssfsi+0x34>
 9a6:	86 95       	lsr	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	b3 95       	inc	r27
 9ae:	d9 f7       	brne	.-10     	; 0x9a6 <__fixunssfsi+0x42>
 9b0:	3e f4       	brtc	.+14     	; 0x9c0 <__fixunssfsi+0x5c>
 9b2:	90 95       	com	r25
 9b4:	80 95       	com	r24
 9b6:	70 95       	com	r23
 9b8:	61 95       	neg	r22
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255
 9bc:	8f 4f       	sbci	r24, 0xFF	; 255
 9be:	9f 4f       	sbci	r25, 0xFF	; 255
 9c0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000b30 <__fp_split3>:
 b30:	57 fd       	sbrc	r21, 7
 b32:	90 58       	subi	r25, 0x80	; 128
 b34:	44 0f       	add	r20, r20
 b36:	55 1f       	adc	r21, r21
 b38:	59 f0       	breq	.+22     	; 0xb50 <__fp_splitA+0x10>
 b3a:	5f 3f       	cpi	r21, 0xFF	; 255
 b3c:	71 f0       	breq	.+28     	; 0xb5a <__fp_splitA+0x1a>
 b3e:	47 95       	ror	r20

00000b40 <__fp_splitA>:
 b40:	88 0f       	add	r24, r24
 b42:	97 fb       	bst	r25, 7
 b44:	99 1f       	adc	r25, r25
 b46:	61 f0       	breq	.+24     	; 0xb60 <__fp_splitA+0x20>
 b48:	9f 3f       	cpi	r25, 0xFF	; 255
 b4a:	79 f0       	breq	.+30     	; 0xb6a <__fp_splitA+0x2a>
 b4c:	87 95       	ror	r24
 b4e:	08 95       	ret
 b50:	12 16       	cp	r1, r18
 b52:	13 06       	cpc	r1, r19
 b54:	14 06       	cpc	r1, r20
 b56:	55 1f       	adc	r21, r21
 b58:	f2 cf       	rjmp	.-28     	; 0xb3e <__fp_split3+0xe>
 b5a:	46 95       	lsr	r20
 b5c:	f1 df       	rcall	.-30     	; 0xb40 <__fp_splitA>
 b5e:	08 c0       	rjmp	.+16     	; 0xb70 <__fp_splitA+0x30>
 b60:	16 16       	cp	r1, r22
 b62:	17 06       	cpc	r1, r23
 b64:	18 06       	cpc	r1, r24
 b66:	99 1f       	adc	r25, r25
 b68:	f1 cf       	rjmp	.-30     	; 0xb4c <__fp_splitA+0xc>
 b6a:	86 95       	lsr	r24
 b6c:	71 05       	cpc	r23, r1
 b6e:	61 05       	cpc	r22, r1
 b70:	08 94       	sec
 b72:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000e36 <__fp_zero>:
 e36:	e8 94       	clt

00000e38 <__fp_szero>:
 e38:	bb 27       	eor	r27, r27
 e3a:	66 27       	eor	r22, r22
 e3c:	77 27       	eor	r23, r23
 e3e:	cb 01       	movw	r24, r22
 e40:	97 f9       	bld	r25, 7
 e42:	08 95       	ret

Disassembly of section .text.libgcc:

00000db2 <__movmemx_qi>:
 db2:	99 27       	eor	r25, r25

00000db4 <__movmemx_hi>:
 db4:	77 fd       	sbrc	r23, 7
 db6:	05 c0       	rjmp	.+10     	; 0xdc2 <__movmemx_hi+0xe>
 db8:	05 90       	lpm	r0, Z+
 dba:	0d 92       	st	X+, r0
 dbc:	01 97       	sbiw	r24, 0x01	; 1
 dbe:	e1 f7       	brne	.-8      	; 0xdb8 <__movmemx_hi+0x4>
 dc0:	08 95       	ret
 dc2:	01 90       	ld	r0, Z+
 dc4:	0d 92       	st	X+, r0
 dc6:	01 97       	sbiw	r24, 0x01	; 1
 dc8:	e1 f7       	brne	.-8      	; 0xdc2 <__movmemx_hi+0xe>
 dca:	08 95       	ret

Disassembly of section .text.avrlibc:

00000d2c <strlen>:
 d2c:	cf 92       	push	r12
 d2e:	df 92       	push	r13
 d30:	ef 92       	push	r14
 d32:	6b 01       	movw	r12, r22
 d34:	e8 2e       	mov	r14, r24
 d36:	a8 2f       	mov	r26, r24
 d38:	cb 01       	movw	r24, r22
 d3a:	fc 01       	movw	r30, r24
 d3c:	24 91       	lpm	r18, Z
 d3e:	a7 fd       	sbrc	r26, 7
 d40:	20 81       	ld	r18, Z
 d42:	22 23       	and	r18, r18
 d44:	19 f0       	breq	.+6      	; 0xd4c <strlen+0x20>
 d46:	01 96       	adiw	r24, 0x01	; 1
 d48:	a1 1d       	adc	r26, r1
 d4a:	f7 cf       	rjmp	.-18     	; 0xd3a <strlen+0xe>
 d4c:	8c 19       	sub	r24, r12
 d4e:	9d 09       	sbc	r25, r13
 d50:	ef 90       	pop	r14
 d52:	df 90       	pop	r13
 d54:	cf 90       	pop	r12
 d56:	08 95       	ret

Disassembly of section .text.avrlibc:

00000aea <sprintf>:
 aea:	af e0       	ldi	r26, 0x0F	; 15
 aec:	b0 e0       	ldi	r27, 0x00	; 0
 aee:	eb e7       	ldi	r30, 0x7B	; 123
 af0:	f5 e0       	ldi	r31, 0x05	; 5
 af2:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__prologue_saves__+0x1c>
 af6:	0e 89       	ldd	r16, Y+22	; 0x16
 af8:	1f 89       	ldd	r17, Y+23	; 0x17
 afa:	86 e0       	ldi	r24, 0x06	; 6
 afc:	8d 83       	std	Y+5, r24	; 0x05
 afe:	1a 83       	std	Y+2, r17	; 0x02
 b00:	09 83       	std	Y+1, r16	; 0x01
 b02:	8f ef       	ldi	r24, 0xFF	; 255
 b04:	9f e7       	ldi	r25, 0x7F	; 127
 b06:	9f 83       	std	Y+7, r25	; 0x07
 b08:	8e 83       	std	Y+6, r24	; 0x06
 b0a:	9e 01       	movw	r18, r28
 b0c:	25 5e       	subi	r18, 0xE5	; 229
 b0e:	3f 4f       	sbci	r19, 0xFF	; 255
 b10:	48 8d       	ldd	r20, Y+24	; 0x18
 b12:	59 8d       	ldd	r21, Y+25	; 0x19
 b14:	6a 8d       	ldd	r22, Y+26	; 0x1a
 b16:	ce 01       	movw	r24, r28
 b18:	01 96       	adiw	r24, 0x01	; 1
 b1a:	0e 94 76 00 	call	0xec	; 0xec <vfprintf>
 b1e:	e8 85       	ldd	r30, Y+8	; 0x08
 b20:	f9 85       	ldd	r31, Y+9	; 0x09
 b22:	e0 0f       	add	r30, r16
 b24:	f1 1f       	adc	r31, r17
 b26:	10 82       	st	Z, r1
 b28:	2f 96       	adiw	r28, 0x0f	; 15
 b2a:	e4 e0       	ldi	r30, 0x04	; 4
 b2c:	0c 94 56 06 	jmp	0xcac	; 0xcac <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000000ec <vfprintf>:
  ec:	2f 92       	push	r2
  ee:	3f 92       	push	r3
  f0:	4f 92       	push	r4
  f2:	6f 92       	push	r6
  f4:	7f 92       	push	r7
  f6:	8f 92       	push	r8
  f8:	9f 92       	push	r9
  fa:	af 92       	push	r10
  fc:	bf 92       	push	r11
  fe:	cf 92       	push	r12
 100:	df 92       	push	r13
 102:	ef 92       	push	r14
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	62 97       	sbiw	r28, 0x12	; 18
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	6c 01       	movw	r12, r24
 120:	3a 01       	movw	r6, r20
 122:	86 2e       	mov	r8, r22
 124:	79 01       	movw	r14, r18
 126:	fc 01       	movw	r30, r24
 128:	10 86       	std	Z+8, r1	; 0x08
 12a:	17 82       	std	Z+7, r1	; 0x07
 12c:	84 81       	ldd	r24, Z+4	; 0x04
 12e:	81 ff       	sbrs	r24, 1
 130:	e7 c1       	rjmp	.+974    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 132:	9e 01       	movw	r18, r28
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	3f 4f       	sbci	r19, 0xFF	; 255
 138:	3d 87       	std	Y+13, r19	; 0x0d
 13a:	2c 87       	std	Y+12, r18	; 0x0c
 13c:	c9 01       	movw	r24, r18
 13e:	a0 e8       	ldi	r26, 0x80	; 128
 140:	88 8b       	std	Y+16, r24	; 0x10
 142:	99 8b       	std	Y+17, r25	; 0x11
 144:	aa 8b       	std	Y+18, r26	; 0x12
 146:	9f e3       	ldi	r25, 0x3F	; 63
 148:	99 2e       	mov	r9, r25
 14a:	f3 01       	movw	r30, r6
 14c:	84 91       	lpm	r24, Z
 14e:	87 fc       	sbrc	r8, 7
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	09 f4       	brne	.+2      	; 0x158 <vfprintf+0x6c>
 156:	d0 c1       	rjmp	.+928    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 158:	48 2d       	mov	r20, r8
 15a:	93 01       	movw	r18, r6
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	4f 4f       	sbci	r20, 0xFF	; 255
 162:	85 32       	cpi	r24, 0x25	; 37
 164:	19 f0       	breq	.+6      	; 0x16c <vfprintf+0x80>
 166:	39 01       	movw	r6, r18
 168:	84 2e       	mov	r8, r20
 16a:	0a c0       	rjmp	.+20     	; 0x180 <vfprintf+0x94>
 16c:	f9 01       	movw	r30, r18
 16e:	84 91       	lpm	r24, Z
 170:	47 fd       	sbrc	r20, 7
 172:	80 81       	ld	r24, Z
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	69 0e       	add	r6, r25
 178:	71 1c       	adc	r7, r1
 17a:	81 1c       	adc	r8, r1
 17c:	85 32       	cpi	r24, 0x25	; 37
 17e:	29 f4       	brne	.+10     	; 0x18a <vfprintf+0x9e>
 180:	b6 01       	movw	r22, r12
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 188:	e0 cf       	rjmp	.-64     	; 0x14a <vfprintf+0x5e>
 18a:	b1 2c       	mov	r11, r1
 18c:	00 e0       	ldi	r16, 0x00	; 0
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	10 32       	cpi	r17, 0x20	; 32
 192:	a0 f4       	brcc	.+40     	; 0x1bc <vfprintf+0xd0>
 194:	8b 32       	cpi	r24, 0x2B	; 43
 196:	69 f0       	breq	.+26     	; 0x1b2 <vfprintf+0xc6>
 198:	30 f4       	brcc	.+12     	; 0x1a6 <vfprintf+0xba>
 19a:	80 32       	cpi	r24, 0x20	; 32
 19c:	59 f0       	breq	.+22     	; 0x1b4 <vfprintf+0xc8>
 19e:	83 32       	cpi	r24, 0x23	; 35
 1a0:	69 f4       	brne	.+26     	; 0x1bc <vfprintf+0xd0>
 1a2:	10 61       	ori	r17, 0x10	; 16
 1a4:	2c c0       	rjmp	.+88     	; 0x1fe <vfprintf+0x112>
 1a6:	8d 32       	cpi	r24, 0x2D	; 45
 1a8:	39 f0       	breq	.+14     	; 0x1b8 <vfprintf+0xcc>
 1aa:	80 33       	cpi	r24, 0x30	; 48
 1ac:	39 f4       	brne	.+14     	; 0x1bc <vfprintf+0xd0>
 1ae:	11 60       	ori	r17, 0x01	; 1
 1b0:	26 c0       	rjmp	.+76     	; 0x1fe <vfprintf+0x112>
 1b2:	12 60       	ori	r17, 0x02	; 2
 1b4:	14 60       	ori	r17, 0x04	; 4
 1b6:	23 c0       	rjmp	.+70     	; 0x1fe <vfprintf+0x112>
 1b8:	18 60       	ori	r17, 0x08	; 8
 1ba:	21 c0       	rjmp	.+66     	; 0x1fe <vfprintf+0x112>
 1bc:	17 fd       	sbrc	r17, 7
 1be:	29 c0       	rjmp	.+82     	; 0x212 <vfprintf+0x126>
 1c0:	90 ed       	ldi	r25, 0xD0	; 208
 1c2:	98 0f       	add	r25, r24
 1c4:	9a 30       	cpi	r25, 0x0A	; 10
 1c6:	78 f4       	brcc	.+30     	; 0x1e6 <vfprintf+0xfa>
 1c8:	16 ff       	sbrs	r17, 6
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <vfprintf+0xec>
 1cc:	aa e0       	ldi	r26, 0x0A	; 10
 1ce:	ba 9e       	mul	r11, r26
 1d0:	90 0d       	add	r25, r0
 1d2:	11 24       	eor	r1, r1
 1d4:	b9 2e       	mov	r11, r25
 1d6:	13 c0       	rjmp	.+38     	; 0x1fe <vfprintf+0x112>
 1d8:	ea e0       	ldi	r30, 0x0A	; 10
 1da:	0e 9f       	mul	r16, r30
 1dc:	90 0d       	add	r25, r0
 1de:	11 24       	eor	r1, r1
 1e0:	09 2f       	mov	r16, r25
 1e2:	10 62       	ori	r17, 0x20	; 32
 1e4:	0c c0       	rjmp	.+24     	; 0x1fe <vfprintf+0x112>
 1e6:	8e 32       	cpi	r24, 0x2E	; 46
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <vfprintf+0x106>
 1ea:	16 fd       	sbrc	r17, 6
 1ec:	85 c1       	rjmp	.+778    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 1ee:	10 64       	ori	r17, 0x40	; 64
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <vfprintf+0x112>
 1f2:	8c 36       	cpi	r24, 0x6C	; 108
 1f4:	11 f4       	brne	.+4      	; 0x1fa <vfprintf+0x10e>
 1f6:	10 68       	ori	r17, 0x80	; 128
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <vfprintf+0x112>
 1fa:	88 36       	cpi	r24, 0x68	; 104
 1fc:	51 f4       	brne	.+20     	; 0x212 <vfprintf+0x126>
 1fe:	f3 01       	movw	r30, r6
 200:	84 91       	lpm	r24, Z
 202:	87 fc       	sbrc	r8, 7
 204:	80 81       	ld	r24, Z
 206:	ff ef       	ldi	r31, 0xFF	; 255
 208:	6f 1a       	sub	r6, r31
 20a:	7f 0a       	sbc	r7, r31
 20c:	8f 0a       	sbc	r8, r31
 20e:	81 11       	cpse	r24, r1
 210:	bf cf       	rjmp	.-130    	; 0x190 <vfprintf+0xa4>
 212:	98 2f       	mov	r25, r24
 214:	9f 7d       	andi	r25, 0xDF	; 223
 216:	95 54       	subi	r25, 0x45	; 69
 218:	93 30       	cpi	r25, 0x03	; 3
 21a:	28 f4       	brcc	.+10     	; 0x226 <vfprintf+0x13a>
 21c:	24 e0       	ldi	r18, 0x04	; 4
 21e:	e2 0e       	add	r14, r18
 220:	f1 1c       	adc	r15, r1
 222:	99 82       	std	Y+1, r9	; 0x01
 224:	0f c0       	rjmp	.+30     	; 0x244 <vfprintf+0x158>
 226:	83 36       	cpi	r24, 0x63	; 99
 228:	31 f0       	breq	.+12     	; 0x236 <vfprintf+0x14a>
 22a:	83 37       	cpi	r24, 0x73	; 115
 22c:	91 f0       	breq	.+36     	; 0x252 <vfprintf+0x166>
 22e:	83 35       	cpi	r24, 0x53	; 83
 230:	09 f0       	breq	.+2      	; 0x234 <vfprintf+0x148>
 232:	63 c0       	rjmp	.+198    	; 0x2fa <vfprintf+0x20e>
 234:	27 c0       	rjmp	.+78     	; 0x284 <vfprintf+0x198>
 236:	f7 01       	movw	r30, r14
 238:	80 81       	ld	r24, Z
 23a:	89 83       	std	Y+1, r24	; 0x01
 23c:	97 01       	movw	r18, r14
 23e:	2e 5f       	subi	r18, 0xFE	; 254
 240:	3f 4f       	sbci	r19, 0xFF	; 255
 242:	79 01       	movw	r14, r18
 244:	28 88       	ldd	r2, Y+16	; 0x10
 246:	39 88       	ldd	r3, Y+17	; 0x11
 248:	4a 88       	ldd	r4, Y+18	; 0x12
 24a:	aa 24       	eor	r10, r10
 24c:	a3 94       	inc	r10
 24e:	b1 2c       	mov	r11, r1
 250:	17 c0       	rjmp	.+46     	; 0x280 <vfprintf+0x194>
 252:	a7 01       	movw	r20, r14
 254:	4d 5f       	subi	r20, 0xFD	; 253
 256:	5f 4f       	sbci	r21, 0xFF	; 255
 258:	5f 87       	std	Y+15, r21	; 0x0f
 25a:	4e 87       	std	Y+14, r20	; 0x0e
 25c:	f7 01       	movw	r30, r14
 25e:	20 80       	ld	r2, Z
 260:	31 80       	ldd	r3, Z+1	; 0x01
 262:	42 80       	ldd	r4, Z+2	; 0x02
 264:	16 ff       	sbrs	r17, 6
 266:	03 c0       	rjmp	.+6      	; 0x26e <vfprintf+0x182>
 268:	4b 2d       	mov	r20, r11
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <vfprintf+0x186>
 26e:	4f ef       	ldi	r20, 0xFF	; 255
 270:	5f ef       	ldi	r21, 0xFF	; 255
 272:	84 2d       	mov	r24, r4
 274:	b1 01       	movw	r22, r2
 276:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strnlen>
 27a:	5c 01       	movw	r10, r24
 27c:	ee 84       	ldd	r14, Y+14	; 0x0e
 27e:	ff 84       	ldd	r15, Y+15	; 0x0f
 280:	1f 77       	andi	r17, 0x7F	; 127
 282:	18 c0       	rjmp	.+48     	; 0x2b4 <vfprintf+0x1c8>
 284:	97 01       	movw	r18, r14
 286:	2d 5f       	subi	r18, 0xFD	; 253
 288:	3f 4f       	sbci	r19, 0xFF	; 255
 28a:	3f 87       	std	Y+15, r19	; 0x0f
 28c:	2e 87       	std	Y+14, r18	; 0x0e
 28e:	f7 01       	movw	r30, r14
 290:	20 80       	ld	r2, Z
 292:	31 80       	ldd	r3, Z+1	; 0x01
 294:	42 80       	ldd	r4, Z+2	; 0x02
 296:	16 ff       	sbrs	r17, 6
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <vfprintf+0x1b4>
 29a:	4b 2d       	mov	r20, r11
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <vfprintf+0x1b8>
 2a0:	4f ef       	ldi	r20, 0xFF	; 255
 2a2:	5f ef       	ldi	r21, 0xFF	; 255
 2a4:	84 2d       	mov	r24, r4
 2a6:	b1 01       	movw	r22, r2
 2a8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strnlen>
 2ac:	5c 01       	movw	r10, r24
 2ae:	10 68       	ori	r17, 0x80	; 128
 2b0:	ee 84       	ldd	r14, Y+14	; 0x0e
 2b2:	ff 84       	ldd	r15, Y+15	; 0x0f
 2b4:	13 fd       	sbrc	r17, 3
 2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <vfprintf+0x206>
 2b8:	80 2f       	mov	r24, r16
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	a8 16       	cp	r10, r24
 2be:	b9 06       	cpc	r11, r25
 2c0:	c0 f4       	brcc	.+48     	; 0x2f2 <vfprintf+0x206>
 2c2:	b6 01       	movw	r22, r12
 2c4:	80 e2       	ldi	r24, 0x20	; 32
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 2cc:	01 50       	subi	r16, 0x01	; 1
 2ce:	f4 cf       	rjmp	.-24     	; 0x2b8 <vfprintf+0x1cc>
 2d0:	f1 01       	movw	r30, r2
 2d2:	84 91       	lpm	r24, Z
 2d4:	47 fc       	sbrc	r4, 7
 2d6:	80 81       	ld	r24, Z
 2d8:	ff ef       	ldi	r31, 0xFF	; 255
 2da:	2f 1a       	sub	r2, r31
 2dc:	3f 0a       	sbc	r3, r31
 2de:	4f 0a       	sbc	r4, r31
 2e0:	b6 01       	movw	r22, r12
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 2e8:	01 11       	cpse	r16, r1
 2ea:	01 50       	subi	r16, 0x01	; 1
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	a2 1a       	sub	r10, r18
 2f0:	b1 08       	sbc	r11, r1
 2f2:	a1 14       	cp	r10, r1
 2f4:	b1 04       	cpc	r11, r1
 2f6:	61 f7       	brne	.-40     	; 0x2d0 <vfprintf+0x1e4>
 2f8:	f5 c0       	rjmp	.+490    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 2fa:	84 36       	cpi	r24, 0x64	; 100
 2fc:	11 f0       	breq	.+4      	; 0x302 <vfprintf+0x216>
 2fe:	89 36       	cpi	r24, 0x69	; 105
 300:	71 f5       	brne	.+92     	; 0x35e <vfprintf+0x272>
 302:	f7 01       	movw	r30, r14
 304:	17 ff       	sbrs	r17, 7
 306:	08 c0       	rjmp	.+16     	; 0x318 <vfprintf+0x22c>
 308:	60 81       	ld	r22, Z
 30a:	71 81       	ldd	r23, Z+1	; 0x01
 30c:	82 81       	ldd	r24, Z+2	; 0x02
 30e:	93 81       	ldd	r25, Z+3	; 0x03
 310:	97 01       	movw	r18, r14
 312:	2c 5f       	subi	r18, 0xFC	; 252
 314:	3f 4f       	sbci	r19, 0xFF	; 255
 316:	09 c0       	rjmp	.+18     	; 0x32a <vfprintf+0x23e>
 318:	60 81       	ld	r22, Z
 31a:	71 81       	ldd	r23, Z+1	; 0x01
 31c:	07 2e       	mov	r0, r23
 31e:	00 0c       	add	r0, r0
 320:	88 0b       	sbc	r24, r24
 322:	99 0b       	sbc	r25, r25
 324:	97 01       	movw	r18, r14
 326:	2e 5f       	subi	r18, 0xFE	; 254
 328:	3f 4f       	sbci	r19, 0xFF	; 255
 32a:	79 01       	movw	r14, r18
 32c:	1f 76       	andi	r17, 0x6F	; 111
 32e:	31 2e       	mov	r3, r17
 330:	97 ff       	sbrs	r25, 7
 332:	0a c0       	rjmp	.+20     	; 0x348 <vfprintf+0x25c>
 334:	90 95       	com	r25
 336:	80 95       	com	r24
 338:	70 95       	com	r23
 33a:	61 95       	neg	r22
 33c:	7f 4f       	sbci	r23, 0xFF	; 255
 33e:	8f 4f       	sbci	r24, 0xFF	; 255
 340:	9f 4f       	sbci	r25, 0xFF	; 255
 342:	31 2f       	mov	r19, r17
 344:	30 68       	ori	r19, 0x80	; 128
 346:	33 2e       	mov	r3, r19
 348:	2a e0       	ldi	r18, 0x0A	; 10
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	ae 01       	movw	r20, r28
 34e:	4f 5f       	subi	r20, 0xFF	; 255
 350:	5f 4f       	sbci	r21, 0xFF	; 255
 352:	0e 94 9a 02 	call	0x534	; 0x534 <__ultoa_invert>
 356:	48 2e       	mov	r4, r24
 358:	4c 85       	ldd	r20, Y+12	; 0x0c
 35a:	44 1a       	sub	r4, r20
 35c:	4a c0       	rjmp	.+148    	; 0x3f2 <vfprintf+0x306>
 35e:	85 37       	cpi	r24, 0x75	; 117
 360:	29 f4       	brne	.+10     	; 0x36c <vfprintf+0x280>
 362:	1f 7e       	andi	r17, 0xEF	; 239
 364:	a1 2e       	mov	r10, r17
 366:	2a e0       	ldi	r18, 0x0A	; 10
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	25 c0       	rjmp	.+74     	; 0x3b6 <vfprintf+0x2ca>
 36c:	51 2f       	mov	r21, r17
 36e:	59 7f       	andi	r21, 0xF9	; 249
 370:	a5 2e       	mov	r10, r21
 372:	8f 36       	cpi	r24, 0x6F	; 111
 374:	c1 f0       	breq	.+48     	; 0x3a6 <vfprintf+0x2ba>
 376:	18 f4       	brcc	.+6      	; 0x37e <vfprintf+0x292>
 378:	88 35       	cpi	r24, 0x58	; 88
 37a:	79 f0       	breq	.+30     	; 0x39a <vfprintf+0x2ae>
 37c:	bd c0       	rjmp	.+378    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 37e:	80 37       	cpi	r24, 0x70	; 112
 380:	19 f0       	breq	.+6      	; 0x388 <vfprintf+0x29c>
 382:	88 37       	cpi	r24, 0x78	; 120
 384:	21 f0       	breq	.+8      	; 0x38e <vfprintf+0x2a2>
 386:	b8 c0       	rjmp	.+368    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 388:	85 2f       	mov	r24, r21
 38a:	80 61       	ori	r24, 0x10	; 16
 38c:	a8 2e       	mov	r10, r24
 38e:	a4 fe       	sbrs	r10, 4
 390:	0d c0       	rjmp	.+26     	; 0x3ac <vfprintf+0x2c0>
 392:	9a 2d       	mov	r25, r10
 394:	94 60       	ori	r25, 0x04	; 4
 396:	a9 2e       	mov	r10, r25
 398:	09 c0       	rjmp	.+18     	; 0x3ac <vfprintf+0x2c0>
 39a:	14 ff       	sbrs	r17, 4
 39c:	0a c0       	rjmp	.+20     	; 0x3b2 <vfprintf+0x2c6>
 39e:	a5 2f       	mov	r26, r21
 3a0:	a6 60       	ori	r26, 0x06	; 6
 3a2:	aa 2e       	mov	r10, r26
 3a4:	06 c0       	rjmp	.+12     	; 0x3b2 <vfprintf+0x2c6>
 3a6:	28 e0       	ldi	r18, 0x08	; 8
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <vfprintf+0x2ca>
 3ac:	20 e1       	ldi	r18, 0x10	; 16
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <vfprintf+0x2ca>
 3b2:	20 e1       	ldi	r18, 0x10	; 16
 3b4:	32 e0       	ldi	r19, 0x02	; 2
 3b6:	f7 01       	movw	r30, r14
 3b8:	a7 fe       	sbrs	r10, 7
 3ba:	08 c0       	rjmp	.+16     	; 0x3cc <vfprintf+0x2e0>
 3bc:	60 81       	ld	r22, Z
 3be:	71 81       	ldd	r23, Z+1	; 0x01
 3c0:	82 81       	ldd	r24, Z+2	; 0x02
 3c2:	93 81       	ldd	r25, Z+3	; 0x03
 3c4:	a7 01       	movw	r20, r14
 3c6:	4c 5f       	subi	r20, 0xFC	; 252
 3c8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ca:	07 c0       	rjmp	.+14     	; 0x3da <vfprintf+0x2ee>
 3cc:	60 81       	ld	r22, Z
 3ce:	71 81       	ldd	r23, Z+1	; 0x01
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	a7 01       	movw	r20, r14
 3d6:	4e 5f       	subi	r20, 0xFE	; 254
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255
 3da:	7a 01       	movw	r14, r20
 3dc:	ae 01       	movw	r20, r28
 3de:	4f 5f       	subi	r20, 0xFF	; 255
 3e0:	5f 4f       	sbci	r21, 0xFF	; 255
 3e2:	0e 94 9a 02 	call	0x534	; 0x534 <__ultoa_invert>
 3e6:	48 2e       	mov	r4, r24
 3e8:	5c 85       	ldd	r21, Y+12	; 0x0c
 3ea:	45 1a       	sub	r4, r21
 3ec:	8a 2d       	mov	r24, r10
 3ee:	8f 77       	andi	r24, 0x7F	; 127
 3f0:	38 2e       	mov	r3, r24
 3f2:	36 fe       	sbrs	r3, 6
 3f4:	0d c0       	rjmp	.+26     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f6:	93 2d       	mov	r25, r3
 3f8:	9e 7f       	andi	r25, 0xFE	; 254
 3fa:	a9 2e       	mov	r10, r25
 3fc:	4b 14       	cp	r4, r11
 3fe:	58 f4       	brcc	.+22     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 400:	34 fe       	sbrs	r3, 4
 402:	0b c0       	rjmp	.+22     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 404:	32 fc       	sbrc	r3, 2
 406:	09 c0       	rjmp	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 408:	a3 2d       	mov	r26, r3
 40a:	ae 7e       	andi	r26, 0xEE	; 238
 40c:	aa 2e       	mov	r10, r26
 40e:	05 c0       	rjmp	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 410:	14 2d       	mov	r17, r4
 412:	a3 2c       	mov	r10, r3
 414:	03 c0       	rjmp	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 416:	14 2d       	mov	r17, r4
 418:	01 c0       	rjmp	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	1b 2d       	mov	r17, r11
 41c:	a4 fe       	sbrs	r10, 4
 41e:	0e c0       	rjmp	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 420:	fe 01       	movw	r30, r28
 422:	e4 0d       	add	r30, r4
 424:	f1 1d       	adc	r31, r1
 426:	80 81       	ld	r24, Z
 428:	80 33       	cpi	r24, 0x30	; 48
 42a:	21 f4       	brne	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42c:	ea 2d       	mov	r30, r10
 42e:	e9 7e       	andi	r30, 0xE9	; 233
 430:	ae 2e       	mov	r10, r30
 432:	08 c0       	rjmp	.+16     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 434:	a2 fe       	sbrs	r10, 2
 436:	05 c0       	rjmp	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 438:	1e 5f       	subi	r17, 0xFE	; 254
 43a:	04 c0       	rjmp	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43c:	8a 2d       	mov	r24, r10
 43e:	86 78       	andi	r24, 0x86	; 134
 440:	09 f0       	breq	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	1f 5f       	subi	r17, 0xFF	; 255
 444:	a3 fc       	sbrc	r10, 3
 446:	11 c0       	rjmp	.+34     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 448:	a0 fe       	sbrs	r10, 0
 44a:	06 c0       	rjmp	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44c:	10 17       	cp	r17, r16
 44e:	88 f4       	brcc	.+34     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 450:	04 0d       	add	r16, r4
 452:	b0 2e       	mov	r11, r16
 454:	b1 1a       	sub	r11, r17
 456:	0e c0       	rjmp	.+28     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 458:	10 17       	cp	r17, r16
 45a:	60 f4       	brcc	.+24     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 45c:	b6 01       	movw	r22, r12
 45e:	80 e2       	ldi	r24, 0x20	; 32
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 466:	1f 5f       	subi	r17, 0xFF	; 255
 468:	f7 cf       	rjmp	.-18     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 46a:	10 17       	cp	r17, r16
 46c:	18 f4       	brcc	.+6      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 46e:	01 1b       	sub	r16, r17
 470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	b4 2c       	mov	r11, r4
 474:	00 e0       	ldi	r16, 0x00	; 0
 476:	a4 fe       	sbrs	r10, 4
 478:	10 c0       	rjmp	.+32     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 47a:	b6 01       	movw	r22, r12
 47c:	80 e3       	ldi	r24, 0x30	; 48
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 484:	a2 fe       	sbrs	r10, 2
 486:	17 c0       	rjmp	.+46     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 488:	a1 fc       	sbrc	r10, 1
 48a:	03 c0       	rjmp	.+6      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48c:	88 e7       	ldi	r24, 0x78	; 120
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 492:	88 e5       	ldi	r24, 0x58	; 88
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	b6 01       	movw	r22, r12
 498:	0c c0       	rjmp	.+24     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 49a:	8a 2d       	mov	r24, r10
 49c:	86 78       	andi	r24, 0x86	; 134
 49e:	59 f0       	breq	.+22     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4a0:	a1 fe       	sbrs	r10, 1
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a4:	8b e2       	ldi	r24, 0x2B	; 43
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a8:	80 e2       	ldi	r24, 0x20	; 32
 4aa:	a7 fc       	sbrc	r10, 7
 4ac:	8d e2       	ldi	r24, 0x2D	; 45
 4ae:	b6 01       	movw	r22, r12
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 4b6:	4b 14       	cp	r4, r11
 4b8:	38 f4       	brcc	.+14     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4ba:	b6 01       	movw	r22, r12
 4bc:	80 e3       	ldi	r24, 0x30	; 48
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 4c4:	ba 94       	dec	r11
 4c6:	f7 cf       	rjmp	.-18     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4c8:	4a 94       	dec	r4
 4ca:	e1 e0       	ldi	r30, 0x01	; 1
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ec 0f       	add	r30, r28
 4d0:	fd 1f       	adc	r31, r29
 4d2:	e4 0d       	add	r30, r4
 4d4:	f1 1d       	adc	r31, r1
 4d6:	80 81       	ld	r24, Z
 4d8:	b6 01       	movw	r22, r12
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 4e0:	41 10       	cpse	r4, r1
 4e2:	f2 cf       	rjmp	.-28     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4e4:	00 23       	and	r16, r16
 4e6:	09 f4       	brne	.+2      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e8:	30 ce       	rjmp	.-928    	; 0x14a <vfprintf+0x5e>
 4ea:	b6 01       	movw	r22, r12
 4ec:	80 e2       	ldi	r24, 0x20	; 32
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 4f4:	01 50       	subi	r16, 0x01	; 1
 4f6:	f6 cf       	rjmp	.-20     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4f8:	f6 01       	movw	r30, r12
 4fa:	87 81       	ldd	r24, Z+7	; 0x07
 4fc:	90 85       	ldd	r25, Z+8	; 0x08
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	9f ef       	ldi	r25, 0xFF	; 255
 504:	62 96       	adiw	r28, 0x12	; 18
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	df 90       	pop	r13
 51e:	cf 90       	pop	r12
 520:	bf 90       	pop	r11
 522:	af 90       	pop	r10
 524:	9f 90       	pop	r9
 526:	8f 90       	pop	r8
 528:	7f 90       	pop	r7
 52a:	6f 90       	pop	r6
 52c:	4f 90       	pop	r4
 52e:	3f 90       	pop	r3
 530:	2f 90       	pop	r2
 532:	08 95       	ret

Disassembly of section .text.avrlibc:

00000c5a <strnlen>:
 c5a:	cf 92       	push	r12
 c5c:	df 92       	push	r13
 c5e:	ef 92       	push	r14
 c60:	6b 01       	movw	r12, r22
 c62:	e8 2e       	mov	r14, r24
 c64:	a8 2f       	mov	r26, r24
 c66:	cb 01       	movw	r24, r22
 c68:	41 15       	cp	r20, r1
 c6a:	51 05       	cpc	r21, r1
 c6c:	31 f4       	brne	.+12     	; 0xc7a <strnlen+0x20>
 c6e:	8c 19       	sub	r24, r12
 c70:	9d 09       	sbc	r25, r13
 c72:	ef 90       	pop	r14
 c74:	df 90       	pop	r13
 c76:	cf 90       	pop	r12
 c78:	08 95       	ret
 c7a:	fc 01       	movw	r30, r24
 c7c:	24 91       	lpm	r18, Z
 c7e:	a7 fd       	sbrc	r26, 7
 c80:	20 81       	ld	r18, Z
 c82:	22 23       	and	r18, r18
 c84:	a1 f3       	breq	.-24     	; 0xc6e <strnlen+0x14>
 c86:	01 96       	adiw	r24, 0x01	; 1
 c88:	a1 1d       	adc	r26, r1
 c8a:	41 50       	subi	r20, 0x01	; 1
 c8c:	51 09       	sbc	r21, r1
 c8e:	ec cf       	rjmp	.-40     	; 0xc68 <strnlen+0xe>

Disassembly of section .text.avrlibc:

000007a4 <fputc>:
 7a4:	0f 93       	push	r16
 7a6:	1f 93       	push	r17
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	fb 01       	movw	r30, r22
 7ae:	24 81       	ldd	r18, Z+4	; 0x04
 7b0:	21 fd       	sbrc	r18, 1
 7b2:	03 c0       	rjmp	.+6      	; 0x7ba <fputc+0x16>
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	9f ef       	ldi	r25, 0xFF	; 255
 7b8:	2c c0       	rjmp	.+88     	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
 7ba:	22 ff       	sbrs	r18, 2
 7bc:	16 c0       	rjmp	.+44     	; 0x7ea <fputc+0x46>
 7be:	47 81       	ldd	r20, Z+7	; 0x07
 7c0:	50 85       	ldd	r21, Z+8	; 0x08
 7c2:	25 81       	ldd	r18, Z+5	; 0x05
 7c4:	36 81       	ldd	r19, Z+6	; 0x06
 7c6:	42 17       	cp	r20, r18
 7c8:	53 07       	cpc	r21, r19
 7ca:	44 f4       	brge	.+16     	; 0x7dc <fputc+0x38>
 7cc:	a0 81       	ld	r26, Z
 7ce:	b1 81       	ldd	r27, Z+1	; 0x01
 7d0:	9d 01       	movw	r18, r26
 7d2:	2f 5f       	subi	r18, 0xFF	; 255
 7d4:	3f 4f       	sbci	r19, 0xFF	; 255
 7d6:	31 83       	std	Z+1, r19	; 0x01
 7d8:	20 83       	st	Z, r18
 7da:	8c 93       	st	X, r24
 7dc:	27 81       	ldd	r18, Z+7	; 0x07
 7de:	30 85       	ldd	r19, Z+8	; 0x08
 7e0:	2f 5f       	subi	r18, 0xFF	; 255
 7e2:	3f 4f       	sbci	r19, 0xFF	; 255
 7e4:	30 87       	std	Z+8, r19	; 0x08
 7e6:	27 83       	std	Z+7, r18	; 0x07
 7e8:	14 c0       	rjmp	.+40     	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
 7ea:	8b 01       	movw	r16, r22
 7ec:	ec 01       	movw	r28, r24
 7ee:	fb 01       	movw	r30, r22
 7f0:	01 84       	ldd	r0, Z+9	; 0x09
 7f2:	f2 85       	ldd	r31, Z+10	; 0x0a
 7f4:	e0 2d       	mov	r30, r0
 7f6:	09 95       	icall
 7f8:	89 2b       	or	r24, r25
 7fa:	e1 f6       	brne	.-72     	; 0x7b4 <fputc+0x10>
 7fc:	d8 01       	movw	r26, r16
 7fe:	17 96       	adiw	r26, 0x07	; 7
 800:	8d 91       	ld	r24, X+
 802:	9c 91       	ld	r25, X
 804:	18 97       	sbiw	r26, 0x08	; 8
 806:	01 96       	adiw	r24, 0x01	; 1
 808:	18 96       	adiw	r26, 0x08	; 8
 80a:	9c 93       	st	X, r25
 80c:	8e 93       	st	-X, r24
 80e:	17 97       	sbiw	r26, 0x07	; 7
 810:	ce 01       	movw	r24, r28
 812:	df 91       	pop	r29
 814:	cf 91       	pop	r28
 816:	1f 91       	pop	r17
 818:	0f 91       	pop	r16
 81a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000534 <__ultoa_invert>:
 534:	fa 01       	movw	r30, r20
 536:	aa 27       	eor	r26, r26
 538:	28 30       	cpi	r18, 0x08	; 8
 53a:	51 f1       	breq	.+84     	; 0x590 <__ultoa_invert+0x5c>
 53c:	20 31       	cpi	r18, 0x10	; 16
 53e:	81 f1       	breq	.+96     	; 0x5a0 <__ultoa_invert+0x6c>
 540:	e8 94       	clt
 542:	6f 93       	push	r22
 544:	6e 7f       	andi	r22, 0xFE	; 254
 546:	6e 5f       	subi	r22, 0xFE	; 254
 548:	7f 4f       	sbci	r23, 0xFF	; 255
 54a:	8f 4f       	sbci	r24, 0xFF	; 255
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	af 4f       	sbci	r26, 0xFF	; 255
 550:	b1 e0       	ldi	r27, 0x01	; 1
 552:	3e d0       	rcall	.+124    	; 0x5d0 <__ultoa_invert+0x9c>
 554:	b4 e0       	ldi	r27, 0x04	; 4
 556:	3c d0       	rcall	.+120    	; 0x5d0 <__ultoa_invert+0x9c>
 558:	67 0f       	add	r22, r23
 55a:	78 1f       	adc	r23, r24
 55c:	89 1f       	adc	r24, r25
 55e:	9a 1f       	adc	r25, r26
 560:	a1 1d       	adc	r26, r1
 562:	68 0f       	add	r22, r24
 564:	79 1f       	adc	r23, r25
 566:	8a 1f       	adc	r24, r26
 568:	91 1d       	adc	r25, r1
 56a:	a1 1d       	adc	r26, r1
 56c:	6a 0f       	add	r22, r26
 56e:	71 1d       	adc	r23, r1
 570:	81 1d       	adc	r24, r1
 572:	91 1d       	adc	r25, r1
 574:	a1 1d       	adc	r26, r1
 576:	20 d0       	rcall	.+64     	; 0x5b8 <__ultoa_invert+0x84>
 578:	09 f4       	brne	.+2      	; 0x57c <__ultoa_invert+0x48>
 57a:	68 94       	set
 57c:	3f 91       	pop	r19
 57e:	2a e0       	ldi	r18, 0x0A	; 10
 580:	26 9f       	mul	r18, r22
 582:	11 24       	eor	r1, r1
 584:	30 19       	sub	r19, r0
 586:	30 5d       	subi	r19, 0xD0	; 208
 588:	31 93       	st	Z+, r19
 58a:	de f6       	brtc	.-74     	; 0x542 <__ultoa_invert+0xe>
 58c:	cf 01       	movw	r24, r30
 58e:	08 95       	ret
 590:	46 2f       	mov	r20, r22
 592:	47 70       	andi	r20, 0x07	; 7
 594:	40 5d       	subi	r20, 0xD0	; 208
 596:	41 93       	st	Z+, r20
 598:	b3 e0       	ldi	r27, 0x03	; 3
 59a:	0f d0       	rcall	.+30     	; 0x5ba <__ultoa_invert+0x86>
 59c:	c9 f7       	brne	.-14     	; 0x590 <__ultoa_invert+0x5c>
 59e:	f6 cf       	rjmp	.-20     	; 0x58c <__ultoa_invert+0x58>
 5a0:	46 2f       	mov	r20, r22
 5a2:	4f 70       	andi	r20, 0x0F	; 15
 5a4:	40 5d       	subi	r20, 0xD0	; 208
 5a6:	4a 33       	cpi	r20, 0x3A	; 58
 5a8:	18 f0       	brcs	.+6      	; 0x5b0 <__ultoa_invert+0x7c>
 5aa:	49 5d       	subi	r20, 0xD9	; 217
 5ac:	31 fd       	sbrc	r19, 1
 5ae:	40 52       	subi	r20, 0x20	; 32
 5b0:	41 93       	st	Z+, r20
 5b2:	02 d0       	rcall	.+4      	; 0x5b8 <__ultoa_invert+0x84>
 5b4:	a9 f7       	brne	.-22     	; 0x5a0 <__ultoa_invert+0x6c>
 5b6:	ea cf       	rjmp	.-44     	; 0x58c <__ultoa_invert+0x58>
 5b8:	b4 e0       	ldi	r27, 0x04	; 4
 5ba:	a6 95       	lsr	r26
 5bc:	97 95       	ror	r25
 5be:	87 95       	ror	r24
 5c0:	77 95       	ror	r23
 5c2:	67 95       	ror	r22
 5c4:	ba 95       	dec	r27
 5c6:	c9 f7       	brne	.-14     	; 0x5ba <__ultoa_invert+0x86>
 5c8:	00 97       	sbiw	r24, 0x00	; 0
 5ca:	61 05       	cpc	r22, r1
 5cc:	71 05       	cpc	r23, r1
 5ce:	08 95       	ret
 5d0:	9b 01       	movw	r18, r22
 5d2:	ac 01       	movw	r20, r24
 5d4:	0a 2e       	mov	r0, r26
 5d6:	06 94       	lsr	r0
 5d8:	57 95       	ror	r21
 5da:	47 95       	ror	r20
 5dc:	37 95       	ror	r19
 5de:	27 95       	ror	r18
 5e0:	ba 95       	dec	r27
 5e2:	c9 f7       	brne	.-14     	; 0x5d6 <__ultoa_invert+0xa2>
 5e4:	62 0f       	add	r22, r18
 5e6:	73 1f       	adc	r23, r19
 5e8:	84 1f       	adc	r24, r20
 5ea:	95 1f       	adc	r25, r21
 5ec:	a0 1d       	adc	r26, r0
 5ee:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000bec <__prologue_saves__>:
 bec:	2f 92       	push	r2
 bee:	3f 92       	push	r3
 bf0:	4f 92       	push	r4
 bf2:	5f 92       	push	r5
 bf4:	6f 92       	push	r6
 bf6:	7f 92       	push	r7
 bf8:	8f 92       	push	r8
 bfa:	9f 92       	push	r9
 bfc:	af 92       	push	r10
 bfe:	bf 92       	push	r11
 c00:	cf 92       	push	r12
 c02:	df 92       	push	r13
 c04:	ef 92       	push	r14
 c06:	ff 92       	push	r15
 c08:	0f 93       	push	r16
 c0a:	1f 93       	push	r17
 c0c:	cf 93       	push	r28
 c0e:	df 93       	push	r29
 c10:	cd b7       	in	r28, 0x3d	; 61
 c12:	de b7       	in	r29, 0x3e	; 62
 c14:	ca 1b       	sub	r28, r26
 c16:	db 0b       	sbc	r29, r27
 c18:	0f b6       	in	r0, 0x3f	; 63
 c1a:	f8 94       	cli
 c1c:	de bf       	out	0x3e, r29	; 62
 c1e:	0f be       	out	0x3f, r0	; 63
 c20:	cd bf       	out	0x3d, r28	; 61
 c22:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000c90 <__epilogue_restores__>:
 c90:	2a 88       	ldd	r2, Y+18	; 0x12
 c92:	39 88       	ldd	r3, Y+17	; 0x11
 c94:	48 88       	ldd	r4, Y+16	; 0x10
 c96:	5f 84       	ldd	r5, Y+15	; 0x0f
 c98:	6e 84       	ldd	r6, Y+14	; 0x0e
 c9a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c9c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c9e:	9b 84       	ldd	r9, Y+11	; 0x0b
 ca0:	aa 84       	ldd	r10, Y+10	; 0x0a
 ca2:	b9 84       	ldd	r11, Y+9	; 0x09
 ca4:	c8 84       	ldd	r12, Y+8	; 0x08
 ca6:	df 80       	ldd	r13, Y+7	; 0x07
 ca8:	ee 80       	ldd	r14, Y+6	; 0x06
 caa:	fd 80       	ldd	r15, Y+5	; 0x05
 cac:	0c 81       	ldd	r16, Y+4	; 0x04
 cae:	1b 81       	ldd	r17, Y+3	; 0x03
 cb0:	aa 81       	ldd	r26, Y+2	; 0x02
 cb2:	b9 81       	ldd	r27, Y+1	; 0x01
 cb4:	ce 0f       	add	r28, r30
 cb6:	d1 1d       	adc	r29, r1
 cb8:	0f b6       	in	r0, 0x3f	; 63
 cba:	f8 94       	cli
 cbc:	de bf       	out	0x3e, r29	; 62
 cbe:	0f be       	out	0x3f, r0	; 63
 cc0:	cd bf       	out	0x3d, r28	; 61
 cc2:	ed 01       	movw	r28, r26
 cc4:	08 95       	ret
