
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006c8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  00800100  00800100  000006c8  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000258  00000000  00000000  00000723  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b3f  00000000  00000000  0000097b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ede  00000000  00000000  000034ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f5e  00000000  00000000  00004398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005c8  00000000  00000000  000052f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b8  00000000  00000000  000058c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c57  00000000  00000000  00005b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  000067cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000005ee  000005ee  000006c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000069a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_3 00000014  000005ba  000005ba  0000068e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_16 00000094  000000f0  000000f0  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .data.cnt     00000002  00800364  000005f2  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .text.__vector_13 0000004e  000003a2  000003a2  00000476  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.start_timer 00000008  000005da  000005da  000006ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.stop_timer 00000006  000005e2  000005e2  000006b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.TC2_HAL_init 00000020  00000560  00000560  00000634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.TC2_HAL_subscribe 00000054  0000034e  0000034e  00000422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.TC2_HAL_cancel 0000003a  000004c0  000004c0  00000594  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_9 0000007c  00000184  00000184  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.cnt      00000001  00800366  00800366  000006c8  2**0
                  ALLOC
 25 .bss.cbCounter 00000001  00800367  00800367  000006c8  2**0
                  ALLOC
 26 .bss.callbacks 0000000a  0080035a  0080035a  000006c8  2**0
                  ALLOC
 27 .text.__vector_22 0000004a  000003f0  000003f0  000004c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_20 00000074  00000200  00000200  000002d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .bss.rx_buffer_has_message 00000001  00800368  00800368  000006c8  2**0
                  ALLOC
 30 .bss.rx_buffer_data_len 00000001  00800369  00800369  000006c8  2**0
                  ALLOC
 31 .bss.tx_buffer_cursor 00000001  0080036a  0080036a  000006c8  2**0
                  ALLOC
 32 .bss.tx_buffer_data_len 00000001  0080036b  0080036b  000006c8  2**0
                  ALLOC
 33 .text.uart1_hal_init 0000003c  00000484  00000484  00000558  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.uart1_hal_send_string 0000006a  000002e4  000002e4  000003b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_30 0000004a  0000043a  0000043a  0000050e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_28 00000070  00000274  00000274  00000348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss.rx_buffer_has_message 00000001  0080036c  0080036c  000006c8  2**0
                  ALLOC
 38 .bss.rx_buffer_data_len 00000001  0080036d  0080036d  000006c8  2**0
                  ALLOC
 39 .bss.rx_buffer 00000064  008002f6  008002f6  000006c8  2**0
                  ALLOC
 40 .bss.tx_buffer_cursor 00000001  0080036e  0080036e  000006c8  2**0
                  ALLOC
 41 .bss.tx_buffer_data_len 00000001  0080036f  0080036f  000006c8  2**0
                  ALLOC
 42 .bss.tx_buffer 000000c8  0080022e  0080022e  000006c8  2**0
                  ALLOC
 43 .text.main    00000006  000005e8  000005e8  000006bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.f1      0000000c  000005ce  000005ce  000006a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .progmemx.data 0000000d  000000e2  000000e2  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 46 .text.test_timing 0000003a  000004fa  000004fa  000005ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.test_TC2_HAL_start 0000001c  0000059e  0000059e  00000672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .bss.f1Cnt    00000001  00800370  00800370  000006c8  2**0
                  ALLOC
 49 .text.libgcc.mul 0000001e  00000580  00000580  00000654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.avrlibc 0000002c  00000534  00000534  00000608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
   8:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
   c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_3>
  10:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  14:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  18:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  1c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  20:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  24:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_9>
  28:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  2c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  30:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_13>
  38:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  3c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_16>
  44:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  48:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  4c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  50:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_20>
  54:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  58:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_22>
  5c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  60:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  64:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  68:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  6c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  70:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_28>
  74:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  78:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	03 64       	ori	r16, 0x43	; 67
  80:	80 03       	fmuls	r16, r16
  82:	64 03       	mulsu	r22, r20
  84:	66 00       	.word	0x0066	; ????
  86:	05 f2       	brhs	.-128    	; 0x8 <__FUSE_REGION_LENGTH__+0x5>
  88:	03 66       	ori	r16, 0x63	; 99
  8a:	03 71       	andi	r16, 0x13	; 19
  8c:	80 00       	.word	0x0080	; ????

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e1       	ldi	r29, 0x10	; 16
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	ec e7       	ldi	r30, 0x7C	; 124
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	17 c0       	rjmp	.+46     	; 0xd0 <__do_clear_bss+0x8>
  a2:	b5 91       	lpm	r27, Z+
  a4:	a5 91       	lpm	r26, Z+
  a6:	35 91       	lpm	r19, Z+
  a8:	25 91       	lpm	r18, Z+
  aa:	05 91       	lpm	r16, Z+
  ac:	07 fd       	sbrc	r16, 7
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <__do_clear_bss>
  b0:	95 91       	lpm	r25, Z+
  b2:	85 91       	lpm	r24, Z+
  b4:	ef 01       	movw	r28, r30
  b6:	f9 2f       	mov	r31, r25
  b8:	e8 2f       	mov	r30, r24
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x20>
  c4:	fe 01       	movw	r30, r28
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <__do_clear_bss+0x8>

000000c8 <__do_clear_bss>:
  c8:	1d 92       	st	X+, r1
  ca:	a2 17       	cp	r26, r18
  cc:	b3 07       	cpc	r27, r19
  ce:	e1 f7       	brne	.-8      	; 0xc8 <__do_clear_bss>
  d0:	ed 38       	cpi	r30, 0x8D	; 141
  d2:	f4 07       	cpc	r31, r20
  d4:	31 f7       	brne	.-52     	; 0xa2 <__do_copy_data+0x8>
  d6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <main>
  da:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>

Disassembly of section .text:

000005ee <__bad_interrupt>:
 5ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_3:

000005ba <__vector_3>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
}

ISR(INT2_vect){
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
	
}
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

Disassembly of section .text.__vector_16:

000000f0 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; //Set clock NOTE, this should be changed!
}

ISR(TIMER0_COMPA_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	//Only for test
	cnt++;
 112:	40 91 64 03 	lds	r20, 0x0364	; 0x800364 <cnt>
 116:	50 91 65 03 	lds	r21, 0x0365	; 0x800365 <cnt+0x1>
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	50 93 65 03 	sts	0x0365, r21	; 0x800365 <cnt+0x1>
 122:	40 93 64 03 	sts	0x0364, r20	; 0x800364 <cnt>
	if(cnt%10==0){
 126:	9a 01       	movw	r18, r20
 128:	ad ec       	ldi	r26, 0xCD	; 205
 12a:	bc ec       	ldi	r27, 0xCC	; 204
 12c:	0e 94 c0 02 	call	0x580	; 0x580 <__umulhisi3>
 130:	96 95       	lsr	r25
 132:	87 95       	ror	r24
 134:	96 95       	lsr	r25
 136:	87 95       	ror	r24
 138:	96 95       	lsr	r25
 13a:	87 95       	ror	r24
 13c:	9c 01       	movw	r18, r24
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	82 0f       	add	r24, r18
 150:	93 1f       	adc	r25, r19
 152:	48 17       	cp	r20, r24
 154:	59 07       	cpc	r21, r25
 156:	29 f4       	brne	.+10     	; 0x162 <__vector_16+0x72>
		_cb();		
 158:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 15c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 160:	09 95       	icall
	}
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

Disassembly of section .text.__vector_13:

000003a2 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	_cb();
 3c4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 3c8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 3cc:	09 95       	icall
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

Disassembly of section .text.start_timer:

000005da <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
 5da:	87 e0       	ldi	r24, 0x07	; 7
 5dc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
 5e0:	08 95       	ret

Disassembly of section .text.stop_timer:

000005e2 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
 5e2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
 5e6:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00000560 <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
 566:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
 56a:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
 56e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
 572:	9b ef       	ldi	r25, 0xFB	; 251
 574:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
 578:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
 57c:	78 94       	sei
 57e:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

0000034e <TC2_HAL_subscribe>:
 34e:	cf 93       	push	r28
 350:	dc 01       	movw	r26, r24
 352:	60 91 67 03 	lds	r22, 0x0367	; 0x800367 <cbCounter>
 356:	65 30       	cpi	r22, 0x05	; 5
 358:	00 f5       	brcc	.+64     	; 0x39a <TC2_HAL_subscribe+0x4c>
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	15 c0       	rjmp	.+42     	; 0x388 <TC2_HAL_subscribe+0x3a>
 35e:	29 2f       	mov	r18, r25
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	f9 01       	movw	r30, r18
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	e6 5a       	subi	r30, 0xA6	; 166
 36a:	fc 4f       	sbci	r31, 0xFC	; 252
 36c:	40 81       	ld	r20, Z
 36e:	51 81       	ldd	r21, Z+1	; 0x01
 370:	45 2b       	or	r20, r21
 372:	49 f4       	brne	.+18     	; 0x386 <TC2_HAL_subscribe+0x38>
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	f9 01       	movw	r30, r18
 37a:	e6 5a       	subi	r30, 0xA6	; 166
 37c:	fc 4f       	sbci	r31, 0xFC	; 252
 37e:	b1 83       	std	Z+1, r27	; 0x01
 380:	a0 83       	st	Z, r26
 382:	c9 2f       	mov	r28, r25
 384:	04 c0       	rjmp	.+8      	; 0x38e <TC2_HAL_subscribe+0x40>
 386:	9f 5f       	subi	r25, 0xFF	; 255
 388:	95 30       	cpi	r25, 0x05	; 5
 38a:	48 f3       	brcs	.-46     	; 0x35e <TC2_HAL_subscribe+0x10>
 38c:	cf ef       	ldi	r28, 0xFF	; 255
 38e:	6f 5f       	subi	r22, 0xFF	; 255
 390:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <cbCounter>
 394:	0e 94 ed 02 	call	0x5da	; 0x5da <start_timer>
 398:	01 c0       	rjmp	.+2      	; 0x39c <TC2_HAL_subscribe+0x4e>
 39a:	cf ef       	ldi	r28, 0xFF	; 255
 39c:	8c 2f       	mov	r24, r28
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

000004c0 <TC2_HAL_cancel>:
 4c0:	08 2e       	mov	r0, r24
 4c2:	00 0c       	add	r0, r0
 4c4:	99 0b       	sbc	r25, r25
 4c6:	fc 01       	movw	r30, r24
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	e6 5a       	subi	r30, 0xA6	; 166
 4ce:	fc 4f       	sbci	r31, 0xFC	; 252
 4d0:	20 81       	ld	r18, Z
 4d2:	31 81       	ldd	r19, Z+1	; 0x01
 4d4:	23 2b       	or	r18, r19
 4d6:	81 f0       	breq	.+32     	; 0x4f8 <TC2_HAL_cancel+0x38>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	fc 01       	movw	r30, r24
 4de:	e6 5a       	subi	r30, 0xA6	; 166
 4e0:	fc 4f       	sbci	r31, 0xFC	; 252
 4e2:	11 82       	std	Z+1, r1	; 0x01
 4e4:	10 82       	st	Z, r1
 4e6:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <cbCounter>
 4ea:	81 50       	subi	r24, 0x01	; 1
 4ec:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <cbCounter>
 4f0:	81 11       	cpse	r24, r1
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <TC2_HAL_cancel+0x38>
 4f4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <stop_timer>
 4f8:	08 95       	ret

Disassembly of section .text.__vector_9:

00000184 <__vector_9>:
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	cf 93       	push	r28
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
 1a8:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <cnt>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <cnt>
 1b2:	8f 71       	andi	r24, 0x1F	; 31
 1b4:	99 f4       	brne	.+38     	; 0x1dc <__vector_9+0x58>
 1b6:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <cnt>
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <__vector_9+0x54>
 1be:	ec 2f       	mov	r30, r28
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	ee 0f       	add	r30, r30
 1c4:	ff 1f       	adc	r31, r31
 1c6:	e6 5a       	subi	r30, 0xA6	; 166
 1c8:	fc 4f       	sbci	r31, 0xFC	; 252
 1ca:	01 90       	ld	r0, Z+
 1cc:	f0 81       	ld	r31, Z
 1ce:	e0 2d       	mov	r30, r0
 1d0:	30 97       	sbiw	r30, 0x00	; 0
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <__vector_9+0x52>
 1d4:	09 95       	icall
 1d6:	cf 5f       	subi	r28, 0xFF	; 255
 1d8:	c5 30       	cpi	r28, 0x05	; 5
 1da:	88 f3       	brcs	.-30     	; 0x1be <__vector_9+0x3a>
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	cf 91       	pop	r28
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

Disassembly of section .text.__vector_22:

000003f0 <__vector_22>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART0_TX_vect){
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	8f 93       	push	r24
 3fc:	ef 93       	push	r30
 3fe:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 400:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <tx_buffer_cursor>
 404:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <tx_buffer_data_len>
 408:	e8 17       	cp	r30, r24
 40a:	58 f4       	brcc	.+22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		UDR0=tx_buffer[tx_buffer_cursor++];
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	8e 0f       	add	r24, r30
 410:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <tx_buffer_cursor>
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	ea 59       	subi	r30, 0x9A	; 154
 418:	fe 4f       	sbci	r31, 0xFE	; 254
 41a:	80 81       	ld	r24, Z
 41c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 420:	04 c0       	rjmp	.+8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	}else{
		tx_buffer_cursor=0;
 422:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <tx_buffer_cursor>
		tx_buffer_data_len=0;
 426:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <tx_buffer_data_len>
	}
}
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	8f 91       	pop	r24
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

Disassembly of section .text.__vector_20:

00000200 <__vector_20>:
	set_bit(UCSR0B, 3); //Enable Tx
	
	uint8_t data[1];
	data[0]=followUpByte;
	uart0_hal_send_message(data, 1);
}
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
 214:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <rx_buffer_has_message>
 218:	81 11       	cpse	r24, r1
 21a:	0e c0       	rjmp	.+28     	; 0x238 <__vector_20+0x38>
 21c:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <rx_buffer_data_len>
 220:	e4 36       	cpi	r30, 0x64	; 100
 222:	50 f4       	brcc	.+20     	; 0x238 <__vector_20+0x38>
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	8e 0f       	add	r24, r30
 228:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <rx_buffer_data_len>
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 232:	ee 5f       	subi	r30, 0xFE	; 254
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	80 83       	st	Z, r24
 238:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <rx_buffer_data_len>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	80 f0       	brcs	.+32     	; 0x260 <__vector_20+0x60>
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	ef 5f       	subi	r30, 0xFF	; 255
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	20 81       	ld	r18, Z
 24a:	2a 30       	cpi	r18, 0x0A	; 10
 24c:	49 f4       	brne	.+18     	; 0x260 <__vector_20+0x60>
 24e:	fc 01       	movw	r30, r24
 250:	e0 50       	subi	r30, 0x00	; 0
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	80 81       	ld	r24, Z
 256:	8d 30       	cpi	r24, 0x0D	; 13
 258:	19 f4       	brne	.+6      	; 0x260 <__vector_20+0x60>
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <rx_buffer_has_message>
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00000484 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
 484:	e9 ec       	ldi	r30, 0xC9	; 201
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	80 61       	ori	r24, 0x10	; 16
 48c:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
 48e:	80 81       	ld	r24, Z
 490:	88 60       	ori	r24, 0x08	; 8
 492:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
 494:	80 81       	ld	r24, Z
 496:	80 68       	ori	r24, 0x80	; 128
 498:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
 49a:	80 81       	ld	r24, Z
 49c:	80 64       	ori	r24, 0x40	; 64
 49e:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
 4a0:	e8 ec       	ldi	r30, 0xC8	; 200
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
 4aa:	86 e0       	ldi	r24, 0x06	; 6
 4ac:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
 4b0:	80 e1       	ldi	r24, 0x10	; 16
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
 4b8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
 4bc:	78 94       	sei
 4be:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

000002e4 <uart1_hal_send_string>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
 2e4:	cf 92       	push	r12
 2e6:	df 92       	push	r13
 2e8:	ef 92       	push	r14
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	6b 01       	movw	r12, r22
 2f2:	e8 2e       	mov	r14, r24
 2f4:	c0 e0       	ldi	r28, 0x00	; 0
 2f6:	12 c0       	rjmp	.+36     	; 0x31c <uart1_hal_send_string+0x38>
 2f8:	8c 2f       	mov	r24, r28
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	4e 2d       	mov	r20, r14
 2fe:	96 01       	movw	r18, r12
 300:	20 0f       	add	r18, r16
 302:	31 1f       	adc	r19, r17
 304:	41 1d       	adc	r20, r1
 306:	17 fd       	sbrc	r17, 7
 308:	4a 95       	dec	r20
 30a:	f9 01       	movw	r30, r18
 30c:	24 91       	lpm	r18, Z
 30e:	47 fd       	sbrc	r20, 7
 310:	20 81       	ld	r18, Z
 312:	fc 01       	movw	r30, r24
 314:	e2 5d       	subi	r30, 0xD2	; 210
 316:	fd 4f       	sbci	r31, 0xFD	; 253
 318:	20 83       	st	Z, r18
 31a:	cf 5f       	subi	r28, 0xFF	; 255
 31c:	0c 2f       	mov	r16, r28
 31e:	10 e0       	ldi	r17, 0x00	; 0
 320:	8e 2d       	mov	r24, r14
 322:	b6 01       	movw	r22, r12
 324:	0e 94 9a 02 	call	0x534	; 0x534 <strlen>
 328:	08 17       	cp	r16, r24
 32a:	19 07       	cpc	r17, r25
 32c:	28 f3       	brcs	.-54     	; 0x2f8 <uart1_hal_send_string+0x14>
 32e:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <tx_buffer_data_len>
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <tx_buffer_cursor>
 338:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <_end>
 33c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ef 90       	pop	r14
 348:	df 90       	pop	r13
 34a:	cf 90       	pop	r12
 34c:	08 95       	ret

Disassembly of section .text.__vector_30:

0000043a <__vector_30>:
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	8f 93       	push	r24
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
 44a:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <tx_buffer_cursor>
 44e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <tx_buffer_data_len>
 452:	e8 17       	cp	r30, r24
 454:	58 f4       	brcc	.+22     	; 0x46c <__vector_30+0x32>
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	8e 0f       	add	r24, r30
 45a:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <tx_buffer_cursor>
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	e2 5d       	subi	r30, 0xD2	; 210
 462:	fd 4f       	sbci	r31, 0xFD	; 253
 464:	80 81       	ld	r24, Z
 466:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 46a:	04 c0       	rjmp	.+8      	; 0x474 <__vector_30+0x3a>
 46c:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <tx_buffer_cursor>
 470:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <tx_buffer_data_len>
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	8f 91       	pop	r24
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

Disassembly of section .text.__vector_28:

00000274 <__vector_28>:
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
 288:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <rx_buffer_has_message>
 28c:	81 11       	cpse	r24, r1
 28e:	0e c0       	rjmp	.+28     	; 0x2ac <__vector_28+0x38>
 290:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <rx_buffer_data_len>
 294:	e4 36       	cpi	r30, 0x64	; 100
 296:	50 f4       	brcc	.+20     	; 0x2ac <__vector_28+0x38>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	8e 0f       	add	r24, r30
 29c:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <rx_buffer_data_len>
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 2a6:	ea 50       	subi	r30, 0x0A	; 10
 2a8:	fd 4f       	sbci	r31, 0xFD	; 253
 2aa:	80 83       	st	Z, r24
 2ac:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <rx_buffer_data_len>
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	fc 01       	movw	r30, r24
 2b4:	eb 50       	subi	r30, 0x0B	; 11
 2b6:	fd 4f       	sbci	r31, 0xFD	; 253
 2b8:	20 81       	ld	r18, Z
 2ba:	2a 30       	cpi	r18, 0x0A	; 10
 2bc:	49 f4       	brne	.+18     	; 0x2d0 <__vector_28+0x5c>
 2be:	fc 01       	movw	r30, r24
 2c0:	ec 50       	subi	r30, 0x0C	; 12
 2c2:	fd 4f       	sbci	r31, 0xFD	; 253
 2c4:	80 81       	ld	r24, Z
 2c6:	8d 30       	cpi	r24, 0x0D	; 13
 2c8:	19 f4       	brne	.+6      	; 0x2d0 <__vector_28+0x5c>
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <rx_buffer_has_message>
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

Disassembly of section .text.main:

000005e8 <main>:
	//test_RTC_module_start();
	//test_TC0_HAL_start();
	//test_TC1_HAL_start();
	//test_RTC_module_start();
	//test_UART0_HAL_start();
	test_TC2_HAL_start();
 5e8:	0e 94 cf 02 	call	0x59e	; 0x59e <test_TC2_HAL_start>
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <main+0x4>

Disassembly of section .text.f1:

000005ce <f1>:
	
}


static void f1(){
	f1Cnt++;
 5ce:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <f1Cnt>
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <f1Cnt>
 5d8:	08 95       	ret

Disassembly of section .text.test_timing:

000004fa <test_timing>:
		
		_delay_ms(1000);
	}
}

static void test_timing(){
 4fa:	cf 93       	push	r28
	uart1_hal_send_string("Start ");
 4fc:	62 ee       	ldi	r22, 0xE2	; 226
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 72 01 	call	0x2e4	; 0x2e4 <uart1_hal_send_string>
	f1Cnt=0;
 506:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <f1Cnt>
	
	TC2_HAL_init();
 50a:	0e 94 b0 02 	call	0x560	; 0x560 <TC2_HAL_init>
	int8_t p1=TC2_HAL_subscribe(&f1);
 50e:	87 ee       	ldi	r24, 0xE7	; 231
 510:	92 e0       	ldi	r25, 0x02	; 2
 512:	0e 94 a7 01 	call	0x34e	; 0x34e <TC2_HAL_subscribe>
 516:	c8 2f       	mov	r28, r24
	
	while(f1Cnt<5){};
 518:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <f1Cnt>
 51c:	85 30       	cpi	r24, 0x05	; 5
 51e:	e0 f3       	brcs	.-8      	; 0x518 <test_timing+0x1e>
	
	uart1_hal_send_string("Stop ");
 520:	69 ee       	ldi	r22, 0xE9	; 233
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	0e 94 72 01 	call	0x2e4	; 0x2e4 <uart1_hal_send_string>
	TC2_HAL_cancel(p1);
 52a:	8c 2f       	mov	r24, r28
 52c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <TC2_HAL_cancel>
}
 530:	cf 91       	pop	r28
 532:	08 95       	ret

Disassembly of section .text.test_TC2_HAL_start:

0000059e <test_TC2_HAL_start>:

static uint8_t f1Cnt=0;
static uint8_t f2Cnt=0;

void test_TC2_HAL_start(){
	uart1_hal_init();
 59e:	0e 94 42 02 	call	0x484	; 0x484 <uart1_hal_init>
	
	while(1){
		//test_sub();
		test_timing();
 5a2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <test_timing>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a6:	2f ef       	ldi	r18, 0xFF	; 255
 5a8:	89 e6       	ldi	r24, 0x69	; 105
 5aa:	98 e1       	ldi	r25, 0x18	; 24
 5ac:	21 50       	subi	r18, 0x01	; 1
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <test_TC2_HAL_start+0xe>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <test_TC2_HAL_start+0x18>
 5b6:	00 00       	nop
 5b8:	f4 cf       	rjmp	.-24     	; 0x5a2 <test_TC2_HAL_start+0x4>

Disassembly of section .text.libgcc.mul:

00000580 <__umulhisi3>:
 580:	a2 9f       	mul	r26, r18
 582:	b0 01       	movw	r22, r0
 584:	b3 9f       	mul	r27, r19
 586:	c0 01       	movw	r24, r0
 588:	a3 9f       	mul	r26, r19
 58a:	70 0d       	add	r23, r0
 58c:	81 1d       	adc	r24, r1
 58e:	11 24       	eor	r1, r1
 590:	91 1d       	adc	r25, r1
 592:	b2 9f       	mul	r27, r18
 594:	70 0d       	add	r23, r0
 596:	81 1d       	adc	r24, r1
 598:	11 24       	eor	r1, r1
 59a:	91 1d       	adc	r25, r1
 59c:	08 95       	ret

Disassembly of section .text.avrlibc:

00000534 <strlen>:
 534:	cf 92       	push	r12
 536:	df 92       	push	r13
 538:	ef 92       	push	r14
 53a:	6b 01       	movw	r12, r22
 53c:	e8 2e       	mov	r14, r24
 53e:	a8 2f       	mov	r26, r24
 540:	cb 01       	movw	r24, r22
 542:	fc 01       	movw	r30, r24
 544:	24 91       	lpm	r18, Z
 546:	a7 fd       	sbrc	r26, 7
 548:	20 81       	ld	r18, Z
 54a:	22 23       	and	r18, r18
 54c:	19 f0       	breq	.+6      	; 0x554 <strlen+0x20>
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	a1 1d       	adc	r26, r1
 552:	f7 cf       	rjmp	.-18     	; 0x542 <strlen+0xe>
 554:	8c 19       	sub	r24, r12
 556:	9d 09       	sbc	r25, r13
 558:	ef 90       	pop	r14
 55a:	df 90       	pop	r13
 55c:	cf 90       	pop	r12
 55e:	08 95       	ret
