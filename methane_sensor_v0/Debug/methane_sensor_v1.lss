
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00003374  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005b4  00800100  00800100  00003374  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00003374  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000780  00000000  00000000  000033cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b684  00000000  00000000  00003b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000261f  00000000  00000000  0000f1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004079  00000000  00000000  000117f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001488  00000000  00000000  0001586c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c75  00000000  00000000  00016cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004b55  00000000  00000000  00017969  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000698  00000000  00000000  0001c4be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000326c  0000326c  00003360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001cb58  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.PM_HAL_adc_power_init 0000000e  00003138  00003138  0000322c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.PM_HAL_meth_power_init 0000000e  00003146  00003146  0000323a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_meth_power 00000014  0000307c  0000307c  00003170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_SCD30_power_init 0000000e  00003154  00003154  00003248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_SCD30_power 00000014  00003090  00003090  00003184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_BC_power_init 0000000e  00003162  00003162  00003256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_enter_power_down 00000042  00002708  00002708  000027fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_3 00000014  000030a4  000030a4  00003198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.rn2483_reset_active 00000008  00003216  00003216  0000330a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.rn2483_reset_deactive 00000008  0000321e  0000321e  00003312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.SCD30_HAL_init 0000000e  00003170  00003170  00003264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SCD30_HAL_data_ready 0000000a  000031ee  000031ee  000032e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.TC0_HAL_init 00000020  00002e52  00002e52  00002f46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.TC0_HAL_start 00000006  00003236  00003236  0000332a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.TC0_HAL_stop 00000004  00003270  00003270  00003364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_16 0000004e  000021e0  000021e0  000022d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss._cb      00000002  0080092a  0080092a  00003374  2**0
                  ALLOC
 31 .text.TC1_HAL_init 00000034  00002a84  00002a84  00002b78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.TC1_HAL_start 0000000c  0000319a  0000319a  0000328e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC1_HAL_stop 0000000c  000031a6  000031a6  0000329a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_13 0000004e  0000222e  0000222e  00002322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .bss._cb      00000002  0080092c  0080092c  00003374  2**0
                  ALLOC
 36 .text.start_timer 00000008  00003226  00003226  0000331a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.stop_timer 00000006  0000323c  0000323c  00003330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TC2_HAL_init 00000020  00002e72  00002e72  00002f66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC2_HAL_subscribe 00000054  000020ea  000020ea  000021de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC2_HAL_cancel 0000003a  00002902  00002902  000029f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_9 00000098  0000193a  0000193a  00001a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss.cnt      00000001  00800930  00800930  00003374  2**0
                  ALLOC
 43 .bss.cbCounter 00000001  00800931  00800931  00003374  2**0
                  ALLOC
 44 .bss.callbacks 0000000a  0080090c  0080090c  00003374  2**0
                  ALLOC
 45 .text.start_and_write_data 0000004c  00002318  00002318  0000240c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.read_and_stop 0000005a  00002038  00002038  0000212c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TWI_API_write_data 00000006  00003242  00003242  00003336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TWI_API_write_data_stop 00000010  00003118  00003118  0000320c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TWI_API_read_data_ack_end_nack_stop 00000024  00002d84  00002d84  00002e78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.TWI_API_repeat_read_data_stop 00000022  00002da8  00002da8  00002e9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.TWI_HAL_init 00000012  000030f4  000030f4  000031e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.TWI_HAL_start 00000048  0000248e  0000248e  00002582  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.TWI_HAL_repeated_start 00000042  0000274a  0000274a  0000283e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_HAL_write_byte 00000020  00002e92  00002e92  00002f86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_HAL_read_byte_ack 00000014  000030b8  000030b8  000031ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_HAL_read_byte_nack 00000014  000030cc  000030cc  000031c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_HAL_stop 00000010  00003128  00003128  0000321c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.copy_buffer 0000002e  00002caa  00002caa  00002d9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.uart0_hal_init 0000003c  0000288a  0000288a  0000297e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.uart0_hal_send_message 00000034  00002ab8  00002ab8  00002bac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.uart0_hal_send_string 0000006a  00001e4a  00001e4a  00001f3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uart0_hal_message_ready 0000000e  0000317e  0000317e  00003272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart0_hal_clear_rx_buffer 0000000a  000031f8  000031f8  000032ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart0_hal_read_message_as_str 00000028  00002d5c  00002d5c  00002e50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart0_hal_send_break 00000046  000025ae  000025ae  000026a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.__vector_22 0000004a  000023b0  000023b0  000024a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.__vector_20 00000074  00001cf6  00001cf6  00001dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .bss.rx_buffer_has_message 00000001  00800932  00800932  00003374  2**0
                  ALLOC
 69 .bss.rx_buffer_data_len 00000001  00800933  00800933  00003374  2**0
                  ALLOC
 70 .bss.tx_buffer_cursor 00000001  00800934  00800934  00003374  2**0
                  ALLOC
 71 .bss.tx_buffer_data_len 00000001  00800935  00800935  00003374  2**0
                  ALLOC
 72 .text.uart1_hal_init 0000003c  000028c6  000028c6  000029ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_30 0000004a  000023fa  000023fa  000024ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_28 00000070  00001d6a  00001d6a  00001e5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .bss.rx_buffer_has_message 00000001  00800936  00800936  00003374  2**0
                  ALLOC
 76 .bss.rx_buffer_data_len 00000001  00800937  00800937  00003374  2**0
                  ALLOC
 77 .bss.rx_buffer 00000064  008008a8  008008a8  00003374  2**0
                  ALLOC
 78 .bss.tx_buffer_cursor 00000001  00800938  00800938  00003374  2**0
                  ALLOC
 79 .bss.tx_buffer_data_len 00000001  00800939  00800939  00003374  2**0
                  ALLOC
 80 .bss.tx_buffer 0000012c  008006b4  008006b4  00003374  2**0
                  ALLOC
 81 .text.main    00000018  00002fee  00002fee  000030e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.vect_ADC_heat_timeout 00000018  00003006  00003006  000030fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.ADC_meth_sens_power_on 00000020  00002eb2  00002eb2  00002fa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.ADC_meth_sens_ready 00000012  00003106  00003106  000031fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .bss.cntPowerUpTime 00000001  0080093a  0080093a  00003374  2**0
                  ALLOC
 86 .bss._powerUpTime 00000001  0080093b  0080093b  00003374  2**0
                  ALLOC
 87 .progmemx.data 00000038  00000283  00000283  00000377  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 88 .text.JN_join_network 00000296  0000075a  0000075a  0000084e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.set_block_uplink 00000018  0000301e  0000301e  00003112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.block_uplink 0000001c  00002f2e  00002f2e  00003022  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.LM_join_network 00000006  00003248  00003248  0000333c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.LM_send_uplink 0000002e  00002cd8  00002cd8  00002dcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.LM_put_to_sleep 00000006  0000324e  0000324e  00003342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.LM_wake_up 00000006  00003254  00003254  00003348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.LM_is_free 0000000a  00003202  00003202  000032f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .bss.subPointer 00000001  0080093c  0080093c  00003374  2**0
                  ALLOC
 97 .bss.busy     00000001  0080093d  0080093d  00003374  2**0
                  ALLOC
 98 .bss.cnt      00000001  0080093e  0080093e  00003374  2**0
                  ALLOC
 99 .progmemx.data 00000073  00000210  00000210  00000304  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
100 .text.tohex   00000084  00001b80  00001b80  00001c74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.attach_ending 0000001c  00002f4a  00002f4a  0000303e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.cmd_with_ending 00000032  00002b20  00002b20  00002c14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.sys_sleep_cmd 0000005e  00001f1e  00001f1e  00002012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.mac_set_parameter 0000004e  0000227c  0000227c  00002370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.mac_set_deveui 00000048  000024d6  000024d6  000025ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.mac_set_appeui 00000048  0000251e  0000251e  00002612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.mac_set_appkey 00000048  00002566  00002566  0000265a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.mac_set_ADR 00000030  00002c1a  00002c1a  00002d0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.mac_tx_confirmed 000000ac  000016a6  000016a6  0000179a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.beginsWidth 0000004a  00002444  00002444  00002538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .progmemx.data 00000027  000002bb  000002bb  000003af  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
112 .text.decode_tx_response 00000052  0000213e  0000213e  00002232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.SU_send_uplink 000000f8  00001288  00001288  0000137c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .progmemx.data 00000003  0000030c  0000030c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
115 .text.SC_put_to_sleep 0000004c  00002364  00002364  00002458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.SC_wake_up 00000032  00002b52  00002b52  00002c46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.LM_strbeginswith 00000044  00002680  00002680  00002774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.util_setPendingStates 0000000c  000031b2  000031b2  000032a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.util_setMatchCase 0000000c  000031be  000031be  000032b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.util_matchMessage 0000005e  00001f7c  00001f7c  00002070  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.util_transmit_msg 0000001c  00002f66  00002f66  0000305a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.util_read_msg 00000006  0000325a  0000325a  0000334e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .progmemx.data 00000020  000002e2  000002e2  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
124 .text.util_parse_err 00000058  00002092  00002092  00002186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.get_group_id 00000006  00003260  00003260  00003354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.set_group_id 00000006  00003266  00003266  0000335a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.MRPP_init_group 00000032  00002b84  00002b84  00002c78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.MRPP_add_collection_data_INT16 00000070  00001dda  00001dda  00001ece  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.MRPP_is_body_package_ready 00000022  00002dca  00002dca  00002ebe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.MRPP_get_ready_body_package 00000096  000019d2  000019d2  00001ac6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.MRPP_set_body_sent 0000000c  000031ca  000031ca  000032be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.MRPP_get_header_package 00000022  00002dec  00002dec  00002ee0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.MRPP_get_tail_package 00000022  00002e0e  00002e0e  00002f02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.MRPP_all_body_package_sent 0000000a  0000320c  0000320c  00003300  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .bss._groupId 00000001  0080093f  0080093f  00003374  2**0
                  ALLOC
136 .text.mrpp_data_add_int16 00000092  00001a68  00001a68  00001b5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.mrpp_data_get 00000030  00002c4a  00002c4a  00002d3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.add_data_types 000000d8  00001380  00001380  00001474  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.update_bodies 00000162  00000daa  00000daa  00000e9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.mrpp_state_init 000001be  00000bec  00000bec  00000ce0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.mrpp_state_get_header 000000a2  000017f6  000017f6  000018ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.mrpp_state_get_tail 000000a4  00001752  00001752  00001846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.mrpp_state_set_collection 00000086  00001afa  00001afa  00001bee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.mrpp_state_is_body_ready 00000030  00002c7a  00002c7a  00002d6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.mrpp_state_all_bodies_sent 0000002a  00002d32  00002d32  00002e26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.mrpp_state_get_ready_body 0000011a  0000116e  0000116e  00001262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.mrpp_state_set_body_sent 00000020  00002ed2  00002ed2  00002fc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.mrpp_state_get_collection_address 00000036  000029ac  000029ac  00002aa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.RTC_set_clock_out 00000050  00002190  00002190  00002284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.RTC_clear_wake_up_interrupt 00000034  00002aec  00002aec  00002be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.RTC_get_current_time 00000140  00000f0c  00000f0c  00001000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .rodata       00000005  0080091c  00003274  00003368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
153 .text.RTC_set_wake_up_interrupt_minutes 000000c4  00001526  00001526  0000161a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.RTC_datetime_to_ts 00000122  0000104c  0000104c  00001140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .progmemx.data.CMD_READ_TIME_POINTER 00000001  00000311  00000311  00000405  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
156 .text.bytes_2_uint 0000001a  00002fba  00002fba  000030ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.init_measurement 00000038  0000293c  0000293c  00002a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.validate_data 00000032  00002bb6  00002bb6  00002caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.read_value 000000a2  00001898  00001898  0000198c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.vect_SCD_do_sample 00000046  000025f4  000025f4  000026e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.SCD30_init_sampling 0000004e  000022ca  000022ca  000023be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SCD30_deinit 00000014  000030e0  000030e0  000031d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.SCD30_start_sampling 0000000c  000031d6  000031d6  000032ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.SCD30_is_sampling_done 0000001c  00002f82  00002f82  00003076  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .progmemx.data.READ_DATA_CMD 00000002  0000030f  0000030f  00000403  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
166 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000302  00000302  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
167 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  00000307  00000307  000003fb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
168 .text.decode_stage_response 00000016  00003066  00003066  0000315a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.decode_join_response 0000001c  00002f9e  00002f9e  00003092  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.decode_header_tail_response 00000018  00003036  00003036  0000312a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .progmemx.data 000000d2  0000013e  0000013e  00000232  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
172 .text.join_lora 0000007a  00001c04  00001c04  00001cf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.set_wakeup 00000008  0000322e  0000322e  00003322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.send_header 0000003e  0000280e  0000280e  00002902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.stage_0 000000ce  00001458  00001458  0000154c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.send_body 00000040  000027ce  000027ce  000028c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.decode_body_response 00000022  00002e30  00002e30  00002f24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.send_tail 0000003e  0000284c  0000284c  00002940  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.send_msg 00000018  0000304e  0000304e  00003142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.MAINPG_start 000001fc  000009f0  000009f0  00000ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .bss.dt       00000006  00800916  00800916  00003374  2**0
                  ALLOC
182 .bss.ts       00000004  00800926  00800926  00003374  2**0
                  ALLOC
183 .bss.co2_data 000000c8  008007e0  008007e0  00003374  2**0
                  ALLOC
184 .data.bodyIndex 00000002  0080092e  0000327e  00003372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
185 .data.cols    00000005  00800921  00003279  0000336d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
186 .bss.state_s0 00000001  00800940  00800940  00003374  2**0
                  ALLOC
187 .text.calc_crc8 00000036  000029e2  000029e2  00002ad6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.avrlibc.fplib 0000005e  00001fda  00001fda  000020ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.avrlibc.fplib 00000044  000026c4  000026c4  000027b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.avrlibc.fplib 0000000e  0000318c  0000318c  00003280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.libgcc  0000000c  000031e2  000031e2  000032d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.libgcc.mul 0000001e  00002ef2  00002ef2  00002fe6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.libgcc  0000001a  00002fd4  00002fd4  000030c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.avrlibc 00000032  00002be8  00002be8  00002cdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.avrlibc 00000042  0000278c  0000278c  00002880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.avrlibc 0000006a  00001eb4  00001eb4  00001fa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.avrlibc 0000002c  00002d06  00002d06  00002dfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.avrlibc 0000001e  00002f10  00002f10  00003004  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.avrlibc 00000046  0000263a  0000263a  0000272e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.avrlibc 00000448  00000312  00000312  00000406  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.avrlibc 00000036  00002a18  00002a18  00002b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.avrlibc 00000078  00001c7e  00001c7e  00001d72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.avrlibc 000000bc  000015ea  000015ea  000016de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.libgcc.prologue 00000038  00002974  00002974  00002a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.libgcc.prologue 00000036  00002a4e  00002a4e  00002b42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
   8:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
   c:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__vector_3>
  10:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  14:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  18:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  1c:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  20:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  24:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__vector_9>
  28:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  2c:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  30:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  34:	0c 94 17 11 	jmp	0x222e	; 0x222e <__vector_13>
  38:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  3c:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  40:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__vector_16>
  44:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  48:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  4c:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  50:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__vector_20>
  54:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  58:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__vector_22>
  5c:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  60:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  64:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  68:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  6c:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  70:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__vector_28>
  74:	0c 94 36 19 	jmp	0x326c	; 0x326c <__bad_interrupt>
  78:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__vector_30>
  7c:	cb 03       	fmulsu	r20, r19
  7e:	d4 04       	cpc	r13, r4
  80:	ea 03       	fmulsu	r22, r18
  82:	07 04       	cpc	r0, r7
  84:	26 04       	cpc	r2, r6
  86:	45 04       	cpc	r4, r5
  88:	64 04       	cpc	r6, r4
  8a:	83 04       	cpc	r8, r3
  8c:	a0 04       	cpc	r10, r0
  8e:	bd 04       	cpc	r11, r13
  90:	cf 04       	cpc	r12, r15
  92:	e5 04       	cpc	r14, r5
  94:	e7 04       	cpc	r14, r7
  96:	60 09       	sbc	r22, r0
  98:	93 09       	sbc	r25, r3
  9a:	81 09       	sbc	r24, r1
  9c:	af 09       	sbc	r26, r15
  9e:	af 09       	sbc	r26, r15
  a0:	9e 09       	sbc	r25, r14
  a2:	9c 09       	sbc	r25, r12
  a4:	b1 09       	sbc	r27, r1
  a6:	9a 09       	sbc	r25, r10
  a8:	17 05       	cpc	r17, r7
  aa:	31 05       	cpc	r19, r1
  ac:	47 05       	cpc	r20, r7
  ae:	57 05       	cpc	r21, r7
  b0:	3c 05       	cpc	r19, r12
  b2:	5e 05       	cpc	r21, r14
  b4:	75 05       	cpc	r23, r5
  b6:	6a 05       	cpc	r22, r10
  b8:	80 05       	cpc	r24, r0
  ba:	99 05       	cpc	r25, r9
  bc:	a1 05       	cpc	r26, r1
  be:	bd 05       	cpc	r27, r13
  c0:	8c 05       	cpc	r24, r12
  c2:	c4 05       	cpc	r28, r4
  c4:	d1 05       	cpc	r29, r1
  c6:	d8 05       	cpc	r29, r8
  c8:	e6 05       	cpc	r30, r6
  ca:	ed 05       	cpc	r30, r13

000000cc <.dinit>:
  cc:	01 00       	.word	0x0001	; ????
  ce:	09 1c       	adc	r0, r9
  d0:	80 09       	sbc	r24, r0
  d2:	1c 09       	sbc	r17, r12
  d4:	26 00       	.word	0x0026	; ????
  d6:	32 74       	andi	r19, 0x42	; 66
  d8:	09 26       	eor	r0, r25
  da:	09 2e       	mov	r0, r25
  dc:	80 09       	sbc	r24, r0
  de:	2e 09       	sbc	r18, r14
  e0:	30 00       	.word	0x0030	; ????
  e2:	32 7e       	andi	r19, 0xE2	; 226
  e4:	09 30       	cpi	r16, 0x09	; 9
  e6:	09 41       	sbci	r16, 0x19	; 25
  e8:	80 00       	.word	0x0080	; ????

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d0 e1       	ldi	r29, 0x10	; 16
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	ec ec       	ldi	r30, 0xCC	; 204
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	17 c0       	rjmp	.+46     	; 0x12c <__do_clear_bss+0x8>
  fe:	b5 91       	lpm	r27, Z+
 100:	a5 91       	lpm	r26, Z+
 102:	35 91       	lpm	r19, Z+
 104:	25 91       	lpm	r18, Z+
 106:	05 91       	lpm	r16, Z+
 108:	07 fd       	sbrc	r16, 7
 10a:	0c c0       	rjmp	.+24     	; 0x124 <__do_clear_bss>
 10c:	95 91       	lpm	r25, Z+
 10e:	85 91       	lpm	r24, Z+
 110:	ef 01       	movw	r28, r30
 112:	f9 2f       	mov	r31, r25
 114:	e8 2f       	mov	r30, r24
 116:	05 90       	lpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	a2 17       	cp	r26, r18
 11c:	b3 07       	cpc	r27, r19
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x20>
 120:	fe 01       	movw	r30, r28
 122:	04 c0       	rjmp	.+8      	; 0x12c <__do_clear_bss+0x8>

00000124 <__do_clear_bss>:
 124:	1d 92       	st	X+, r1
 126:	a2 17       	cp	r26, r18
 128:	b3 07       	cpc	r27, r19
 12a:	e1 f7       	brne	.-8      	; 0x124 <__do_clear_bss>
 12c:	e9 3e       	cpi	r30, 0xE9	; 233
 12e:	f4 07       	cpc	r31, r20
 130:	31 f7       	brne	.-52     	; 0xfe <__do_copy_data+0x8>
 132:	0e 94 f7 17 	call	0x2fee	; 0x2fee <main>
 136:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>

Disassembly of section .text:

0000326c <__bad_interrupt>:
    326c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

00003138 <PM_HAL_adc_power_init>:

void PM_HAL_adc_power(bool on){
	if(on){
		set_bit(PORTA, 3);
	}else{
		clear_bit(PORTA, 3);
    3138:	81 b1       	in	r24, 0x01	; 1
    313a:	88 60       	ori	r24, 0x08	; 8
    313c:	81 b9       	out	0x01, r24	; 1
    313e:	82 b1       	in	r24, 0x02	; 2
    3140:	87 7f       	andi	r24, 0xF7	; 247
    3142:	82 b9       	out	0x02, r24	; 2
    3144:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00003146 <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    3146:	81 b1       	in	r24, 0x01	; 1
    3148:	80 62       	ori	r24, 0x20	; 32
    314a:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    314c:	82 b1       	in	r24, 0x02	; 2
    314e:	8f 7d       	andi	r24, 0xDF	; 223
    3150:	82 b9       	out	0x02, r24	; 2
    3152:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

0000307c <PM_HAL_meth_power>:

void PM_HAL_adc_power(bool on){
	if(on){
		set_bit(PORTA, 3);
	}else{
		clear_bit(PORTA, 3);
    307c:	88 23       	and	r24, r24
    307e:	21 f0       	breq	.+8      	; 0x3088 <PM_HAL_meth_power+0xc>
    3080:	82 b1       	in	r24, 0x02	; 2
    3082:	80 62       	ori	r24, 0x20	; 32
    3084:	82 b9       	out	0x02, r24	; 2
    3086:	08 95       	ret
    3088:	82 b1       	in	r24, 0x02	; 2
    308a:	8f 7d       	andi	r24, 0xDF	; 223
    308c:	82 b9       	out	0x02, r24	; 2
    308e:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00003154 <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    3154:	81 b1       	in	r24, 0x01	; 1
    3156:	80 61       	ori	r24, 0x10	; 16
    3158:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    315a:	82 b1       	in	r24, 0x02	; 2
    315c:	8f 7e       	andi	r24, 0xEF	; 239
    315e:	82 b9       	out	0x02, r24	; 2
    3160:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003090 <PM_HAL_SCD30_power>:

void PM_HAL_adc_power(bool on){
	if(on){
		set_bit(PORTA, 3);
	}else{
		clear_bit(PORTA, 3);
    3090:	88 23       	and	r24, r24
    3092:	21 f0       	breq	.+8      	; 0x309c <PM_HAL_SCD30_power+0xc>
    3094:	82 b1       	in	r24, 0x02	; 2
    3096:	80 61       	ori	r24, 0x10	; 16
    3098:	82 b9       	out	0x02, r24	; 2
    309a:	08 95       	ret
    309c:	82 b1       	in	r24, 0x02	; 2
    309e:	8f 7e       	andi	r24, 0xEF	; 239
    30a0:	82 b9       	out	0x02, r24	; 2
    30a2:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00003162 <PM_HAL_BC_power_init>:
		clear_bit(PORTA, 4);
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    3162:	8a b1       	in	r24, 0x0a	; 10
    3164:	80 61       	ori	r24, 0x10	; 16
    3166:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    3168:	8b b1       	in	r24, 0x0b	; 11
    316a:	8f 7e       	andi	r24, 0xEF	; 239
    316c:	8b b9       	out	0x0b, r24	; 11
    316e:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00002708 <PM_HAL_enter_power_down>:

void PM_HAL_adc_power(bool on){
	if(on){
		set_bit(PORTA, 3);
	}else{
		clear_bit(PORTA, 3);
    2708:	84 b1       	in	r24, 0x04	; 4
    270a:	8b 7f       	andi	r24, 0xFB	; 251
    270c:	84 b9       	out	0x04, r24	; 4
    270e:	85 b1       	in	r24, 0x05	; 5
    2710:	84 60       	ori	r24, 0x04	; 4
    2712:	85 b9       	out	0x05, r24	; 5
    2714:	e9 e6       	ldi	r30, 0x69	; 105
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8f 7e       	andi	r24, 0xEF	; 239
    271c:	80 83       	st	Z, r24
    271e:	80 81       	ld	r24, Z
    2720:	80 62       	ori	r24, 0x20	; 32
    2722:	80 83       	st	Z, r24
    2724:	8d b3       	in	r24, 0x1d	; 29
    2726:	84 60       	ori	r24, 0x04	; 4
    2728:	8d bb       	out	0x1d, r24	; 29
    272a:	83 b7       	in	r24, 0x33	; 51
    272c:	81 7f       	andi	r24, 0xF1	; 241
    272e:	84 60       	ori	r24, 0x04	; 4
    2730:	83 bf       	out	0x33, r24	; 51
    2732:	83 b7       	in	r24, 0x33	; 51
    2734:	81 60       	ori	r24, 0x01	; 1
    2736:	83 bf       	out	0x33, r24	; 51
    2738:	78 94       	sei
    273a:	88 95       	sleep
    273c:	83 b7       	in	r24, 0x33	; 51
    273e:	8e 7f       	andi	r24, 0xFE	; 254
    2740:	83 bf       	out	0x33, r24	; 51
    2742:	8d b3       	in	r24, 0x1d	; 29
    2744:	8b 7f       	andi	r24, 0xFB	; 251
    2746:	8d bb       	out	0x1d, r24	; 29
    2748:	08 95       	ret

Disassembly of section .text.__vector_3:

000030a4 <__vector_3>:
    30a4:	1f 92       	push	r1
    30a6:	0f 92       	push	r0
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	0f 92       	push	r0
    30ac:	11 24       	eor	r1, r1
    30ae:	0f 90       	pop	r0
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	0f 90       	pop	r0
    30b4:	1f 90       	pop	r1
    30b6:	18 95       	reti

Disassembly of section .text.rn2483_reset_active:

00003216 <rn2483_reset_active>:
void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    3216:	85 b1       	in	r24, 0x05	; 5
    3218:	8f 7e       	andi	r24, 0xEF	; 239
    321a:	85 b9       	out	0x05, r24	; 5
    321c:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

0000321e <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    321e:	85 b1       	in	r24, 0x05	; 5
    3220:	80 61       	ori	r24, 0x10	; 16
    3222:	85 b9       	out	0x05, r24	; 5
    3224:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00003170 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    3170:	87 b1       	in	r24, 0x07	; 7
    3172:	8f 7b       	andi	r24, 0xBF	; 191
    3174:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    3176:	88 b1       	in	r24, 0x08	; 8
    3178:	8f 7b       	andi	r24, 0xBF	; 191
    317a:	88 b9       	out	0x08, r24	; 8
    317c:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

000031ee <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    31ee:	86 b1       	in	r24, 0x06	; 6
    31f0:	86 fb       	bst	r24, 6
    31f2:	88 27       	eor	r24, r24
    31f4:	80 f9       	bld	r24, 0
    31f6:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00002e52 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    2e52:	92 e0       	ldi	r25, 0x02	; 2
    2e54:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    2e56:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    2e58:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    2e5a:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    2e5c:	ee e6       	ldi	r30, 0x6E	; 110
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	82 60       	ori	r24, 0x02	; 2
    2e64:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    2e66:	78 94       	sei
	
	//Set callback
	_cb=cb;
    2e68:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <_cb+0x1>
    2e6c:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <_cb>
    2e70:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00003236 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    3236:	86 e0       	ldi	r24, 0x06	; 6
    3238:	85 bd       	out	0x25, r24	; 37
    323a:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

00003270 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    3270:	15 bc       	out	0x25, r1	; 37
    3272:	08 95       	ret

Disassembly of section .text.__vector_16:

000021e0 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    21e0:	1f 92       	push	r1
    21e2:	0f 92       	push	r0
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	0f 92       	push	r0
    21e8:	11 24       	eor	r1, r1
    21ea:	2f 93       	push	r18
    21ec:	3f 93       	push	r19
    21ee:	4f 93       	push	r20
    21f0:	5f 93       	push	r21
    21f2:	6f 93       	push	r22
    21f4:	7f 93       	push	r23
    21f6:	8f 93       	push	r24
    21f8:	9f 93       	push	r25
    21fa:	af 93       	push	r26
    21fc:	bf 93       	push	r27
    21fe:	ef 93       	push	r30
    2200:	ff 93       	push	r31
	_cb();
    2202:	e0 91 2a 09 	lds	r30, 0x092A	; 0x80092a <_cb>
    2206:	f0 91 2b 09 	lds	r31, 0x092B	; 0x80092b <_cb+0x1>
    220a:	09 95       	icall
}
    220c:	ff 91       	pop	r31
    220e:	ef 91       	pop	r30
    2210:	bf 91       	pop	r27
    2212:	af 91       	pop	r26
    2214:	9f 91       	pop	r25
    2216:	8f 91       	pop	r24
    2218:	7f 91       	pop	r23
    221a:	6f 91       	pop	r22
    221c:	5f 91       	pop	r21
    221e:	4f 91       	pop	r20
    2220:	3f 91       	pop	r19
    2222:	2f 91       	pop	r18
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00002a84 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    2a84:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    2a88:	28 e0       	ldi	r18, 0x08	; 8
    2a8a:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    2a8e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    2a92:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    2a96:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    2a9a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    2a9e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    2aa2:	ef e6       	ldi	r30, 0x6F	; 111
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	82 60       	ori	r24, 0x02	; 2
    2aaa:	80 83       	st	Z, r24
	sei();
    2aac:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    2aae:	70 93 2d 09 	sts	0x092D, r23	; 0x80092d <_cb+0x1>
    2ab2:	60 93 2c 09 	sts	0x092C, r22	; 0x80092c <_cb>
    2ab6:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

0000319a <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    319a:	e1 e8       	ldi	r30, 0x81	; 129
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	86 60       	ori	r24, 0x06	; 6
    31a2:	80 83       	st	Z, r24
    31a4:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

000031a6 <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    31a6:	e1 e8       	ldi	r30, 0x81	; 129
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	88 7f       	andi	r24, 0xF8	; 248
    31ae:	80 83       	st	Z, r24
    31b0:	08 95       	ret

Disassembly of section .text.__vector_13:

0000222e <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    222e:	1f 92       	push	r1
    2230:	0f 92       	push	r0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	0f 92       	push	r0
    2236:	11 24       	eor	r1, r1
    2238:	2f 93       	push	r18
    223a:	3f 93       	push	r19
    223c:	4f 93       	push	r20
    223e:	5f 93       	push	r21
    2240:	6f 93       	push	r22
    2242:	7f 93       	push	r23
    2244:	8f 93       	push	r24
    2246:	9f 93       	push	r25
    2248:	af 93       	push	r26
    224a:	bf 93       	push	r27
    224c:	ef 93       	push	r30
    224e:	ff 93       	push	r31
	_cb();
    2250:	e0 91 2c 09 	lds	r30, 0x092C	; 0x80092c <_cb>
    2254:	f0 91 2d 09 	lds	r31, 0x092D	; 0x80092d <_cb+0x1>
    2258:	09 95       	icall
    225a:	ff 91       	pop	r31
    225c:	ef 91       	pop	r30
    225e:	bf 91       	pop	r27
    2260:	af 91       	pop	r26
    2262:	9f 91       	pop	r25
    2264:	8f 91       	pop	r24
    2266:	7f 91       	pop	r23
    2268:	6f 91       	pop	r22
    226a:	5f 91       	pop	r21
    226c:	4f 91       	pop	r20
    226e:	3f 91       	pop	r19
    2270:	2f 91       	pop	r18
    2272:	0f 90       	pop	r0
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	0f 90       	pop	r0
    2278:	1f 90       	pop	r1
    227a:	18 95       	reti

Disassembly of section .text.start_timer:

00003226 <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    3226:	87 e0       	ldi	r24, 0x07	; 7
    3228:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    322c:	08 95       	ret

Disassembly of section .text.stop_timer:

0000323c <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    323c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3240:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00002e72 <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    2e72:	82 e0       	ldi	r24, 0x02	; 2
    2e74:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    2e78:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    2e7c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    2e80:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    2e84:	9b ef       	ldi	r25, 0xFB	; 251
    2e86:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    2e8a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    2e8e:	78 94       	sei
    2e90:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

000020ea <TC2_HAL_subscribe>:
    20ea:	cf 93       	push	r28
    20ec:	dc 01       	movw	r26, r24
    20ee:	60 91 31 09 	lds	r22, 0x0931	; 0x800931 <cbCounter>
    20f2:	65 30       	cpi	r22, 0x05	; 5
    20f4:	00 f5       	brcc	.+64     	; 0x2136 <TC2_HAL_subscribe+0x4c>
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	15 c0       	rjmp	.+42     	; 0x2124 <TC2_HAL_subscribe+0x3a>
    20fa:	29 2f       	mov	r18, r25
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	f9 01       	movw	r30, r18
    2100:	ee 0f       	add	r30, r30
    2102:	ff 1f       	adc	r31, r31
    2104:	e4 5f       	subi	r30, 0xF4	; 244
    2106:	f6 4f       	sbci	r31, 0xF6	; 246
    2108:	40 81       	ld	r20, Z
    210a:	51 81       	ldd	r21, Z+1	; 0x01
    210c:	45 2b       	or	r20, r21
    210e:	49 f4       	brne	.+18     	; 0x2122 <TC2_HAL_subscribe+0x38>
    2110:	22 0f       	add	r18, r18
    2112:	33 1f       	adc	r19, r19
    2114:	f9 01       	movw	r30, r18
    2116:	e4 5f       	subi	r30, 0xF4	; 244
    2118:	f6 4f       	sbci	r31, 0xF6	; 246
    211a:	b1 83       	std	Z+1, r27	; 0x01
    211c:	a0 83       	st	Z, r26
    211e:	c9 2f       	mov	r28, r25
    2120:	04 c0       	rjmp	.+8      	; 0x212a <TC2_HAL_subscribe+0x40>
    2122:	9f 5f       	subi	r25, 0xFF	; 255
    2124:	95 30       	cpi	r25, 0x05	; 5
    2126:	48 f3       	brcs	.-46     	; 0x20fa <TC2_HAL_subscribe+0x10>
    2128:	cf ef       	ldi	r28, 0xFF	; 255
    212a:	6f 5f       	subi	r22, 0xFF	; 255
    212c:	60 93 31 09 	sts	0x0931, r22	; 0x800931 <cbCounter>
    2130:	0e 94 13 19 	call	0x3226	; 0x3226 <start_timer>
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <TC2_HAL_subscribe+0x4e>
    2136:	cf ef       	ldi	r28, 0xFF	; 255
    2138:	8c 2f       	mov	r24, r28
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00002902 <TC2_HAL_cancel>:
    2902:	08 2e       	mov	r0, r24
    2904:	00 0c       	add	r0, r0
    2906:	99 0b       	sbc	r25, r25
    2908:	fc 01       	movw	r30, r24
    290a:	ee 0f       	add	r30, r30
    290c:	ff 1f       	adc	r31, r31
    290e:	e4 5f       	subi	r30, 0xF4	; 244
    2910:	f6 4f       	sbci	r31, 0xF6	; 246
    2912:	20 81       	ld	r18, Z
    2914:	31 81       	ldd	r19, Z+1	; 0x01
    2916:	23 2b       	or	r18, r19
    2918:	81 f0       	breq	.+32     	; 0x293a <TC2_HAL_cancel+0x38>
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	fc 01       	movw	r30, r24
    2920:	e4 5f       	subi	r30, 0xF4	; 244
    2922:	f6 4f       	sbci	r31, 0xF6	; 246
    2924:	11 82       	std	Z+1, r1	; 0x01
    2926:	10 82       	st	Z, r1
    2928:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <cbCounter>
    292c:	81 50       	subi	r24, 0x01	; 1
    292e:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <cbCounter>
    2932:	81 11       	cpse	r24, r1
    2934:	02 c0       	rjmp	.+4      	; 0x293a <TC2_HAL_cancel+0x38>
    2936:	0e 94 1e 19 	call	0x323c	; 0x323c <stop_timer>
    293a:	08 95       	ret

Disassembly of section .text.__vector_9:

0000193a <__vector_9>:
    193a:	1f 92       	push	r1
    193c:	0f 92       	push	r0
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	0f 92       	push	r0
    1942:	11 24       	eor	r1, r1
    1944:	2f 93       	push	r18
    1946:	3f 93       	push	r19
    1948:	4f 93       	push	r20
    194a:	5f 93       	push	r21
    194c:	6f 93       	push	r22
    194e:	7f 93       	push	r23
    1950:	8f 93       	push	r24
    1952:	9f 93       	push	r25
    1954:	af 93       	push	r26
    1956:	bf 93       	push	r27
    1958:	cf 93       	push	r28
    195a:	ef 93       	push	r30
    195c:	ff 93       	push	r31
    195e:	90 91 30 09 	lds	r25, 0x0930	; 0x800930 <cnt>
    1962:	9f 5f       	subi	r25, 0xFF	; 255
    1964:	90 93 30 09 	sts	0x0930, r25	; 0x800930 <cnt>
    1968:	89 e0       	ldi	r24, 0x09	; 9
    196a:	98 9f       	mul	r25, r24
    196c:	21 2d       	mov	r18, r1
    196e:	11 24       	eor	r1, r1
    1970:	89 2f       	mov	r24, r25
    1972:	82 1b       	sub	r24, r18
    1974:	86 95       	lsr	r24
    1976:	82 0f       	add	r24, r18
    1978:	82 95       	swap	r24
    197a:	8f 70       	andi	r24, 0x0F	; 15
    197c:	2f e1       	ldi	r18, 0x1F	; 31
    197e:	82 9f       	mul	r24, r18
    1980:	90 19       	sub	r25, r0
    1982:	11 24       	eor	r1, r1
    1984:	91 11       	cpse	r25, r1
    1986:	13 c0       	rjmp	.+38     	; 0x19ae <__vector_9+0x74>
    1988:	10 92 30 09 	sts	0x0930, r1	; 0x800930 <cnt>
    198c:	c0 e0       	ldi	r28, 0x00	; 0
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <__vector_9+0x70>
    1990:	ec 2f       	mov	r30, r28
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	ee 0f       	add	r30, r30
    1996:	ff 1f       	adc	r31, r31
    1998:	e4 5f       	subi	r30, 0xF4	; 244
    199a:	f6 4f       	sbci	r31, 0xF6	; 246
    199c:	01 90       	ld	r0, Z+
    199e:	f0 81       	ld	r31, Z
    19a0:	e0 2d       	mov	r30, r0
    19a2:	30 97       	sbiw	r30, 0x00	; 0
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <__vector_9+0x6e>
    19a6:	09 95       	icall
    19a8:	cf 5f       	subi	r28, 0xFF	; 255
    19aa:	c5 30       	cpi	r28, 0x05	; 5
    19ac:	88 f3       	brcs	.-30     	; 0x1990 <__vector_9+0x56>
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	cf 91       	pop	r28
    19b4:	bf 91       	pop	r27
    19b6:	af 91       	pop	r26
    19b8:	9f 91       	pop	r25
    19ba:	8f 91       	pop	r24
    19bc:	7f 91       	pop	r23
    19be:	6f 91       	pop	r22
    19c0:	5f 91       	pop	r21
    19c2:	4f 91       	pop	r20
    19c4:	3f 91       	pop	r19
    19c6:	2f 91       	pop	r18
    19c8:	0f 90       	pop	r0
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	0f 90       	pop	r0
    19ce:	1f 90       	pop	r1
    19d0:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00002318 <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	6a 01       	movw	r12, r20
    2324:	e6 2e       	mov	r14, r22
    2326:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	0e 94 47 12 	call	0x248e	; 0x248e <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    232e:	81 11       	cpse	r24, r1
    2330:	13 c0       	rjmp	.+38     	; 0x2358 <start_and_write_data+0x40>
    2332:	c0 e0       	ldi	r28, 0x00	; 0
    2334:	0e c0       	rjmp	.+28     	; 0x2352 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    2336:	ae 2d       	mov	r26, r14
    2338:	c6 01       	movw	r24, r12
    233a:	8c 0f       	add	r24, r28
    233c:	91 1d       	adc	r25, r1
    233e:	a1 1d       	adc	r26, r1
    2340:	fc 01       	movw	r30, r24
    2342:	84 91       	lpm	r24, Z
    2344:	a7 fd       	sbrc	r26, 7
    2346:	80 81       	ld	r24, Z
    2348:	0e 94 49 17 	call	0x2e92	; 0x2e92 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    234c:	81 11       	cpse	r24, r1
    234e:	04 c0       	rjmp	.+8      	; 0x2358 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    2350:	cf 5f       	subi	r28, 0xFF	; 255
    2352:	cd 17       	cp	r28, r29
    2354:	80 f3       	brcs	.-32     	; 0x2336 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    2356:	80 e0       	ldi	r24, 0x00	; 0
}
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	ef 90       	pop	r14
    235e:	df 90       	pop	r13
    2360:	cf 90       	pop	r12
    2362:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002038 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2038:	ef 92       	push	r14
    203a:	ff 92       	push	r15
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	8c 01       	movw	r16, r24
    2046:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2048:	c0 e0       	ldi	r28, 0x00	; 0
    204a:	08 c0       	rjmp	.+16     	; 0x205c <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    204c:	78 01       	movw	r14, r16
    204e:	ec 0e       	add	r14, r28
    2050:	f1 1c       	adc	r15, r1
    2052:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <TWI_HAL_read_byte_ack>
    2056:	f7 01       	movw	r30, r14
    2058:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    205a:	cf 5f       	subi	r28, 0xFF	; 255
    205c:	2c 2f       	mov	r18, r28
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	8d 2f       	mov	r24, r29
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	28 17       	cp	r18, r24
    2068:	39 07       	cpc	r19, r25
    206a:	84 f3       	brlt	.-32     	; 0x204c <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    206c:	8d 2f       	mov	r24, r29
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	e8 01       	movw	r28, r16
    2074:	c8 0f       	add	r28, r24
    2076:	d9 1f       	adc	r29, r25
    2078:	0e 94 66 18 	call	0x30cc	; 0x30cc <TWI_HAL_read_byte_nack>
    207c:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    207e:	0e 94 94 18 	call	0x3128	; 0x3128 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	ff 90       	pop	r15
    208e:	ef 90       	pop	r14
    2090:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003242 <TWI_API_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
    3242:	0e 94 8c 11 	call	0x2318	; 0x2318 <start_and_write_data>
}
    3246:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00003118 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3118:	0e 94 8c 11 	call	0x2318	; 0x2318 <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    311c:	81 11       	cpse	r24, r1
    311e:	03 c0       	rjmp	.+6      	; 0x3126 <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    3120:	0e 94 94 18 	call	0x3128	; 0x3128 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    3124:	80 e0       	ldi	r24, 0x00	; 0
}
    3126:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00002d84 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    2d84:	1f 93       	push	r17
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	eb 01       	movw	r28, r22
    2d8c:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    2d8e:	61 e0       	ldi	r22, 0x01	; 1
    2d90:	0e 94 47 12 	call	0x248e	; 0x248e <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    2d94:	81 11       	cpse	r24, r1
    2d96:	04 c0       	rjmp	.+8      	; 0x2da0 <TWI_API_read_data_ack_end_nack_stop+0x1c>
	
	return read_and_stop(data, length);
    2d98:	61 2f       	mov	r22, r17
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	0e 94 1c 10 	call	0x2038	; 0x2038 <read_and_stop>
	//}
	//data[length-1]=TWI_HAL_read_byte_nack();
	//
	//TWI_HAL_stop();
	//return TWI_CODE_SUCCESS;
}
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	1f 91       	pop	r17
    2da6:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00002da8 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    2da8:	1f 93       	push	r17
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	eb 01       	movw	r28, r22
    2db0:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    2db2:	0e 94 a5 13 	call	0x274a	; 0x274a <TWI_HAL_repeated_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    2db6:	81 11       	cpse	r24, r1
    2db8:	04 c0       	rjmp	.+8      	; 0x2dc2 <TWI_API_repeat_read_data_stop+0x1a>
	
	return read_and_stop(data, length);
    2dba:	61 2f       	mov	r22, r17
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	0e 94 1c 10 	call	0x2038	; 0x2038 <read_and_stop>
	
}
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	1f 91       	pop	r17
    2dc8:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

000030f4 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    30f4:	80 e2       	ldi	r24, 0x20	; 32
    30f6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    30fa:	e9 eb       	ldi	r30, 0xB9	; 185
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	8c 7f       	andi	r24, 0xFC	; 252
    3102:	80 83       	st	Z, r24
    3104:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

0000248e <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2496:	84 ea       	ldi	r24, 0xA4	; 164
    2498:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    249c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    24a0:	99 23       	and	r25, r25
    24a2:	e4 f7       	brge	.-8      	; 0x249c <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    24a4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    24a8:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    24aa:	88 30       	cpi	r24, 0x08	; 8
    24ac:	99 f4       	brne	.+38     	; 0x24d4 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    24ae:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    24b2:	84 e8       	ldi	r24, 0x84	; 132
    24b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    24b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    24bc:	88 23       	and	r24, r24
    24be:	e4 f7       	brge	.-8      	; 0x24b8 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    24c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    24c4:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    24c6:	88 31       	cpi	r24, 0x18	; 24
    24c8:	21 f0       	breq	.+8      	; 0x24d2 <TWI_HAL_start+0x44>
    24ca:	80 34       	cpi	r24, 0x40	; 64
    24cc:	19 f4       	brne	.+6      	; 0x24d4 <TWI_HAL_start+0x46>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	08 95       	ret
    24d2:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    24d4:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

0000274a <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	28 2f       	mov	r18, r24
    2752:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2754:	84 ea       	ldi	r24, 0xA4	; 164
    2756:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    275a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    275e:	99 23       	and	r25, r25
    2760:	e4 f7       	brge	.-8      	; 0x275a <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    2762:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2766:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    2768:	80 31       	cpi	r24, 0x10	; 16
    276a:	79 f4       	brne	.+30     	; 0x278a <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    276c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2770:	84 e8       	ldi	r24, 0x84	; 132
    2772:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2776:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    277a:	88 23       	and	r24, r24
    277c:	e4 f7       	brge	.-8      	; 0x2776 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    277e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2782:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    2784:	80 34       	cpi	r24, 0x40	; 64
    2786:	09 f4       	brne	.+2      	; 0x278a <TWI_HAL_repeated_start+0x40>
    2788:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    278a:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00002e92 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    2e92:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    2e96:	84 e8       	ldi	r24, 0x84	; 132
    2e98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    2e9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2ea0:	88 23       	and	r24, r24
    2ea2:	e4 f7       	brge	.-8      	; 0x2e9c <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    2ea4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2ea8:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    2eaa:	88 32       	cpi	r24, 0x28	; 40
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <TWI_HAL_write_byte+0x1e>
    2eae:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    2eb0:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

000030b8 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    30b8:	84 ec       	ldi	r24, 0xC4	; 196
    30ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    30be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    30c2:	88 23       	and	r24, r24
    30c4:	e4 f7       	brge	.-8      	; 0x30be <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    30c6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    30ca:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

000030cc <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    30cc:	84 e8       	ldi	r24, 0x84	; 132
    30ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    30d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    30d6:	88 23       	and	r24, r24
    30d8:	e4 f7       	brge	.-8      	; 0x30d2 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    30da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    30de:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00003128 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    3128:	84 e9       	ldi	r24, 0x94	; 148
    312a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    312e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3132:	84 fd       	sbrc	r24, 4
    3134:	fc cf       	rjmp	.-8      	; 0x312e <TWI_HAL_stop+0x6>
}
    3136:	08 95       	ret

Disassembly of section .text.copy_buffer:

00002caa <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    2caa:	bc 01       	movw	r22, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	09 c0       	rjmp	.+18     	; 0x2cc2 <copy_buffer+0x18>
    2cb0:	fb 01       	movw	r30, r22
    2cb2:	e9 0f       	add	r30, r25
    2cb4:	f1 1d       	adc	r31, r1
    2cb6:	da 01       	movw	r26, r20
    2cb8:	a0 50       	subi	r26, 0x00	; 0
    2cba:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbc:	2c 91       	ld	r18, X
    2cbe:	20 83       	st	Z, r18
    2cc0:	9f 5f       	subi	r25, 0xFF	; 255
    2cc2:	49 2f       	mov	r20, r25
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	20 91 33 09 	lds	r18, 0x0933	; 0x800933 <rx_buffer_data_len>
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	22 50       	subi	r18, 0x02	; 2
    2cce:	31 09       	sbc	r19, r1
    2cd0:	42 17       	cp	r20, r18
    2cd2:	53 07       	cpc	r21, r19
    2cd4:	6c f3       	brlt	.-38     	; 0x2cb0 <copy_buffer+0x6>
    2cd6:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

0000288a <uart0_hal_init>:
    288a:	e1 ec       	ldi	r30, 0xC1	; 193
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	80 61       	ori	r24, 0x10	; 16
    2892:	80 83       	st	Z, r24
    2894:	80 81       	ld	r24, Z
    2896:	88 60       	ori	r24, 0x08	; 8
    2898:	80 83       	st	Z, r24
    289a:	80 81       	ld	r24, Z
    289c:	80 68       	ori	r24, 0x80	; 128
    289e:	80 83       	st	Z, r24
    28a0:	80 81       	ld	r24, Z
    28a2:	80 64       	ori	r24, 0x40	; 64
    28a4:	80 83       	st	Z, r24
    28a6:	e0 ec       	ldi	r30, 0xC0	; 192
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	82 60       	ori	r24, 0x02	; 2
    28ae:	80 83       	st	Z, r24
    28b0:	86 e0       	ldi	r24, 0x06	; 6
    28b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    28b6:	80 e1       	ldi	r24, 0x10	; 16
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    28be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    28c2:	78 94       	sei
    28c4:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00002ab8 <uart0_hal_send_message>:
    2ab8:	dc 01       	movw	r26, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0b c0       	rjmp	.+22     	; 0x2ad4 <uart0_hal_send_message+0x1c>
    2abe:	29 2f       	mov	r18, r25
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	fd 01       	movw	r30, r26
    2ac4:	e2 0f       	add	r30, r18
    2ac6:	f3 1f       	adc	r31, r19
    2ac8:	40 81       	ld	r20, Z
    2aca:	f9 01       	movw	r30, r18
    2acc:	ec 59       	subi	r30, 0x9C	; 156
    2ace:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad0:	40 83       	st	Z, r20
    2ad2:	9f 5f       	subi	r25, 0xFF	; 255
    2ad4:	96 17       	cp	r25, r22
    2ad6:	98 f3       	brcs	.-26     	; 0x2abe <uart0_hal_send_message+0x6>
    2ad8:	60 93 35 09 	sts	0x0935, r22	; 0x800935 <tx_buffer_data_len>
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <tx_buffer_cursor>
    2ae2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2ae6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2aea:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00001e4a <uart0_hal_send_string>:
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	0f 93       	push	r16
    1e52:	1f 93       	push	r17
    1e54:	cf 93       	push	r28
    1e56:	6b 01       	movw	r12, r22
    1e58:	e8 2e       	mov	r14, r24
    1e5a:	c0 e0       	ldi	r28, 0x00	; 0
    1e5c:	12 c0       	rjmp	.+36     	; 0x1e82 <uart0_hal_send_string+0x38>
    1e5e:	8c 2f       	mov	r24, r28
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	4e 2d       	mov	r20, r14
    1e64:	96 01       	movw	r18, r12
    1e66:	20 0f       	add	r18, r16
    1e68:	31 1f       	adc	r19, r17
    1e6a:	41 1d       	adc	r20, r1
    1e6c:	17 fd       	sbrc	r17, 7
    1e6e:	4a 95       	dec	r20
    1e70:	f9 01       	movw	r30, r18
    1e72:	24 91       	lpm	r18, Z
    1e74:	47 fd       	sbrc	r20, 7
    1e76:	20 81       	ld	r18, Z
    1e78:	fc 01       	movw	r30, r24
    1e7a:	ec 59       	subi	r30, 0x9C	; 156
    1e7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e7e:	20 83       	st	Z, r18
    1e80:	cf 5f       	subi	r28, 0xFF	; 255
    1e82:	0c 2f       	mov	r16, r28
    1e84:	10 e0       	ldi	r17, 0x00	; 0
    1e86:	8e 2d       	mov	r24, r14
    1e88:	b6 01       	movw	r22, r12
    1e8a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
    1e8e:	08 17       	cp	r16, r24
    1e90:	19 07       	cpc	r17, r25
    1e92:	28 f3       	brcs	.-54     	; 0x1e5e <uart0_hal_send_string+0x14>
    1e94:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <tx_buffer_data_len>
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <tx_buffer_cursor>
    1e9e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    1ea2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	ef 90       	pop	r14
    1eae:	df 90       	pop	r13
    1eb0:	cf 90       	pop	r12
    1eb2:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

0000317e <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    317e:	90 91 32 09 	lds	r25, 0x0932	; 0x800932 <rx_buffer_has_message>
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	91 11       	cpse	r25, r1
    3186:	01 c0       	rjmp	.+2      	; 0x318a <uart0_hal_message_ready+0xc>
    3188:	80 e0       	ldi	r24, 0x00	; 0
}
    318a:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000031f8 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    31f8:	10 92 32 09 	sts	0x0932, r1	; 0x800932 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    31fc:	10 92 33 09 	sts	0x0933, r1	; 0x800933 <rx_buffer_data_len>
    3200:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00002d5c <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(uint8_t msg[]){
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	8c 01       	movw	r16, r24
	copy_buffer(msg);
    2d64:	0e 94 55 16 	call	0x2caa	; 0x2caa <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    2d68:	c0 91 33 09 	lds	r28, 0x0933	; 0x800933 <rx_buffer_data_len>
    2d6c:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    2d6e:	f8 01       	movw	r30, r16
    2d70:	ec 0f       	add	r30, r28
    2d72:	f1 1d       	adc	r31, r1
    2d74:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    2d76:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <uart0_hal_clear_rx_buffer>
	return len;
}
    2d7a:	8c 2f       	mov	r24, r28
    2d7c:	cf 91       	pop	r28
    2d7e:	1f 91       	pop	r17
    2d80:	0f 91       	pop	r16
    2d82:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

000025ae <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	1f 92       	push	r1
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	9a b1       	in	r25, 0x0a	; 10
    25ba:	92 60       	ori	r25, 0x02	; 2
    25bc:	9a b9       	out	0x0a, r25	; 10
    25be:	e1 ec       	ldi	r30, 0xC1	; 193
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	90 81       	ld	r25, Z
    25c4:	97 7f       	andi	r25, 0xF7	; 247
    25c6:	90 83       	st	Z, r25
    25c8:	9b b1       	in	r25, 0x0b	; 11
    25ca:	9d 7f       	andi	r25, 0xFD	; 253
    25cc:	9b b9       	out	0x0b, r25	; 11
    25ce:	af e9       	ldi	r26, 0x9F	; 159
    25d0:	bf e0       	ldi	r27, 0x0F	; 15
    25d2:	11 97       	sbiw	r26, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <uart0_hal_send_break+0x24>
    25d6:	00 c0       	rjmp	.+0      	; 0x25d8 <uart0_hal_send_break+0x2a>
    25d8:	00 00       	nop
    25da:	90 81       	ld	r25, Z
    25dc:	98 60       	ori	r25, 0x08	; 8
    25de:	90 83       	st	Z, r25
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	61 e0       	ldi	r22, 0x01	; 1
    25e4:	ce 01       	movw	r24, r28
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <uart0_hal_send_message>
    25ec:	0f 90       	pop	r0
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	08 95       	ret

Disassembly of section .text.__vector_22:

000023b0 <__vector_22>:
    23b0:	1f 92       	push	r1
    23b2:	0f 92       	push	r0
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	0f 92       	push	r0
    23b8:	11 24       	eor	r1, r1
    23ba:	8f 93       	push	r24
    23bc:	ef 93       	push	r30
    23be:	ff 93       	push	r31
    23c0:	e0 91 34 09 	lds	r30, 0x0934	; 0x800934 <tx_buffer_cursor>
    23c4:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <tx_buffer_data_len>
    23c8:	e8 17       	cp	r30, r24
    23ca:	58 f4       	brcc	.+22     	; 0x23e2 <__vector_22+0x32>
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	8e 0f       	add	r24, r30
    23d0:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <tx_buffer_cursor>
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	ec 59       	subi	r30, 0x9C	; 156
    23d8:	fe 4f       	sbci	r31, 0xFE	; 254
    23da:	80 81       	ld	r24, Z
    23dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    23e0:	04 c0       	rjmp	.+8      	; 0x23ea <__vector_22+0x3a>
    23e2:	10 92 34 09 	sts	0x0934, r1	; 0x800934 <tx_buffer_cursor>
    23e6:	10 92 35 09 	sts	0x0935, r1	; 0x800935 <tx_buffer_data_len>
    23ea:	ff 91       	pop	r31
    23ec:	ef 91       	pop	r30
    23ee:	8f 91       	pop	r24
    23f0:	0f 90       	pop	r0
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	0f 90       	pop	r0
    23f6:	1f 90       	pop	r1
    23f8:	18 95       	reti

Disassembly of section .text.__vector_20:

00001cf6 <__vector_20>:
    1cf6:	1f 92       	push	r1
    1cf8:	0f 92       	push	r0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	0f 92       	push	r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	2f 93       	push	r18
    1d02:	8f 93       	push	r24
    1d04:	9f 93       	push	r25
    1d06:	ef 93       	push	r30
    1d08:	ff 93       	push	r31
    1d0a:	80 91 32 09 	lds	r24, 0x0932	; 0x800932 <rx_buffer_has_message>
    1d0e:	81 11       	cpse	r24, r1
    1d10:	0e c0       	rjmp	.+28     	; 0x1d2e <__vector_20+0x38>
    1d12:	e0 91 33 09 	lds	r30, 0x0933	; 0x800933 <rx_buffer_data_len>
    1d16:	e4 36       	cpi	r30, 0x64	; 100
    1d18:	50 f4       	brcc	.+20     	; 0x1d2e <__vector_20+0x38>
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	8e 0f       	add	r24, r30
    1d1e:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <rx_buffer_data_len>
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    1d28:	e0 50       	subi	r30, 0x00	; 0
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 83       	st	Z, r24
    1d2e:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <rx_buffer_data_len>
    1d32:	83 30       	cpi	r24, 0x03	; 3
    1d34:	80 f0       	brcs	.+32     	; 0x1d56 <__vector_20+0x60>
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	fc 01       	movw	r30, r24
    1d3a:	e1 50       	subi	r30, 0x01	; 1
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	20 81       	ld	r18, Z
    1d40:	2a 30       	cpi	r18, 0x0A	; 10
    1d42:	49 f4       	brne	.+18     	; 0x1d56 <__vector_20+0x60>
    1d44:	fc 01       	movw	r30, r24
    1d46:	e2 50       	subi	r30, 0x02	; 2
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8d 30       	cpi	r24, 0x0D	; 13
    1d4e:	19 f4       	brne	.+6      	; 0x1d56 <__vector_20+0x60>
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <rx_buffer_has_message>
    1d56:	ff 91       	pop	r31
    1d58:	ef 91       	pop	r30
    1d5a:	9f 91       	pop	r25
    1d5c:	8f 91       	pop	r24
    1d5e:	2f 91       	pop	r18
    1d60:	0f 90       	pop	r0
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	0f 90       	pop	r0
    1d66:	1f 90       	pop	r1
    1d68:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

000028c6 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    28c6:	e9 ec       	ldi	r30, 0xC9	; 201
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	80 61       	ori	r24, 0x10	; 16
    28ce:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    28d0:	80 81       	ld	r24, Z
    28d2:	88 60       	ori	r24, 0x08	; 8
    28d4:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    28d6:	80 81       	ld	r24, Z
    28d8:	80 68       	ori	r24, 0x80	; 128
    28da:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    28dc:	80 81       	ld	r24, Z
    28de:	80 64       	ori	r24, 0x40	; 64
    28e0:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    28e2:	e8 ec       	ldi	r30, 0xC8	; 200
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	82 60       	ori	r24, 0x02	; 2
    28ea:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    28ec:	86 e0       	ldi	r24, 0x06	; 6
    28ee:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
    28f2:	80 e1       	ldi	r24, 0x10	; 16
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    28fa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    28fe:	78 94       	sei
    2900:	08 95       	ret

Disassembly of section .text.__vector_30:

000023fa <__vector_30>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    23fa:	1f 92       	push	r1
    23fc:	0f 92       	push	r0
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	0f 92       	push	r0
    2402:	11 24       	eor	r1, r1
    2404:	8f 93       	push	r24
    2406:	ef 93       	push	r30
    2408:	ff 93       	push	r31
    240a:	e0 91 38 09 	lds	r30, 0x0938	; 0x800938 <tx_buffer_cursor>
    240e:	80 91 39 09 	lds	r24, 0x0939	; 0x800939 <tx_buffer_data_len>
    2412:	e8 17       	cp	r30, r24
    2414:	58 f4       	brcc	.+22     	; 0x242c <__vector_30+0x32>
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	8e 0f       	add	r24, r30
    241a:	80 93 38 09 	sts	0x0938, r24	; 0x800938 <tx_buffer_cursor>
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	ec 54       	subi	r30, 0x4C	; 76
    2422:	f9 4f       	sbci	r31, 0xF9	; 249
    2424:	80 81       	ld	r24, Z
    2426:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    242a:	04 c0       	rjmp	.+8      	; 0x2434 <__vector_30+0x3a>
    242c:	10 92 38 09 	sts	0x0938, r1	; 0x800938 <tx_buffer_cursor>
    2430:	10 92 39 09 	sts	0x0939, r1	; 0x800939 <tx_buffer_data_len>
    2434:	ff 91       	pop	r31
    2436:	ef 91       	pop	r30
    2438:	8f 91       	pop	r24
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	0f 90       	pop	r0
    2440:	1f 90       	pop	r1
    2442:	18 95       	reti

Disassembly of section .text.__vector_28:

00001d6a <__vector_28>:
    1d6a:	1f 92       	push	r1
    1d6c:	0f 92       	push	r0
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	0f 92       	push	r0
    1d72:	11 24       	eor	r1, r1
    1d74:	2f 93       	push	r18
    1d76:	8f 93       	push	r24
    1d78:	9f 93       	push	r25
    1d7a:	ef 93       	push	r30
    1d7c:	ff 93       	push	r31
    1d7e:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <rx_buffer_has_message>
    1d82:	81 11       	cpse	r24, r1
    1d84:	0e c0       	rjmp	.+28     	; 0x1da2 <__vector_28+0x38>
    1d86:	e0 91 37 09 	lds	r30, 0x0937	; 0x800937 <rx_buffer_data_len>
    1d8a:	e4 36       	cpi	r30, 0x64	; 100
    1d8c:	50 f4       	brcc	.+20     	; 0x1da2 <__vector_28+0x38>
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	8e 0f       	add	r24, r30
    1d92:	80 93 37 09 	sts	0x0937, r24	; 0x800937 <rx_buffer_data_len>
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    1d9c:	e8 55       	subi	r30, 0x58	; 88
    1d9e:	f7 4f       	sbci	r31, 0xF7	; 247
    1da0:	80 83       	st	Z, r24
    1da2:	80 91 37 09 	lds	r24, 0x0937	; 0x800937 <rx_buffer_data_len>
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	fc 01       	movw	r30, r24
    1daa:	e9 55       	subi	r30, 0x59	; 89
    1dac:	f7 4f       	sbci	r31, 0xF7	; 247
    1dae:	20 81       	ld	r18, Z
    1db0:	2a 30       	cpi	r18, 0x0A	; 10
    1db2:	49 f4       	brne	.+18     	; 0x1dc6 <__vector_28+0x5c>
    1db4:	fc 01       	movw	r30, r24
    1db6:	ea 55       	subi	r30, 0x5A	; 90
    1db8:	f7 4f       	sbci	r31, 0xF7	; 247
    1dba:	80 81       	ld	r24, Z
    1dbc:	8d 30       	cpi	r24, 0x0D	; 13
    1dbe:	19 f4       	brne	.+6      	; 0x1dc6 <__vector_28+0x5c>
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <rx_buffer_has_message>
    1dc6:	ff 91       	pop	r31
    1dc8:	ef 91       	pop	r30
    1dca:	9f 91       	pop	r25
    1dcc:	8f 91       	pop	r24
    1dce:	2f 91       	pop	r18
    1dd0:	0f 90       	pop	r0
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	0f 90       	pop	r0
    1dd6:	1f 90       	pop	r1
    1dd8:	18 95       	reti

Disassembly of section .text.main:

00002fee <main>:
{
	//test_runner();
	
	while(1)
    {
		MAINPG_start();
    2fee:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ff2:	2f ef       	ldi	r18, 0xFF	; 255
    2ff4:	8d e3       	ldi	r24, 0x3D	; 61
    2ff6:	99 e4       	ldi	r25, 0x49	; 73
    2ff8:	21 50       	subi	r18, 0x01	; 1
    2ffa:	80 40       	sbci	r24, 0x00	; 0
    2ffc:	90 40       	sbci	r25, 0x00	; 0
    2ffe:	e1 f7       	brne	.-8      	; 0x2ff8 <main+0xa>
    3000:	00 c0       	rjmp	.+0      	; 0x3002 <main+0x14>
    3002:	00 00       	nop
    3004:	f4 cf       	rjmp	.-24     	; 0x2fee <main>

Disassembly of section .text.vect_ADC_heat_timeout:

00003006 <vect_ADC_heat_timeout>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    3006:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <cntPowerUpTime>
    300a:	8f 5f       	subi	r24, 0xFF	; 255
    300c:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <cntPowerUpTime>
    3010:	90 91 3b 09 	lds	r25, 0x093B	; 0x80093b <_powerUpTime>
    3014:	89 17       	cp	r24, r25
    3016:	10 f0       	brcs	.+4      	; 0x301c <vect_ADC_heat_timeout+0x16>
    3018:	0e 94 38 19 	call	0x3270	; 0x3270 <TC0_HAL_stop>
    301c:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00002eb2 <ADC_meth_sens_power_on>:
    2eb2:	80 93 3b 09 	sts	0x093B, r24	; 0x80093b <_powerUpTime>
    2eb6:	10 92 3a 09 	sts	0x093A, r1	; 0x80093a <cntPowerUpTime>
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	0e 94 3e 18 	call	0x307c	; 0x307c <PM_HAL_meth_power>
    2ec0:	63 e0       	ldi	r22, 0x03	; 3
    2ec2:	78 e1       	ldi	r23, 0x18	; 24
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	0e 94 29 17 	call	0x2e52	; 0x2e52 <TC0_HAL_init>
    2eca:	0e 94 1b 19 	call	0x3236	; 0x3236 <TC0_HAL_start>
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00003106 <ADC_meth_sens_ready>:

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    3106:	20 91 3a 09 	lds	r18, 0x093A	; 0x80093a <cntPowerUpTime>
    310a:	90 91 3b 09 	lds	r25, 0x093B	; 0x80093b <_powerUpTime>
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	29 17       	cp	r18, r25
    3112:	08 f4       	brcc	.+2      	; 0x3116 <ADC_meth_sens_ready+0x10>
    3114:	80 e0       	ldi	r24, 0x00	; 0
}
    3116:	08 95       	ret

Disassembly of section .text.JN_join_network:

0000075a <JN_join_network>:
#include "../../../HAL/RN2483/RN2483_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
 75a:	af 92       	push	r10
 75c:	bf 92       	push	r11
 75e:	cf 92       	push	r12
 760:	df 92       	push	r13
 762:	ef 92       	push	r14
 764:	ff 92       	push	r15
 766:	1f 93       	push	r17
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
 770:	28 97       	sbiw	r28, 0x08	; 8
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	de bf       	out	0x3e, r29	; 62
 778:	0f be       	out	0x3f, r0	; 63
 77a:	cd bf       	out	0x3d, r28	; 61
 77c:	5c 01       	movw	r10, r24
 77e:	6b 01       	movw	r12, r22
 780:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
 782:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	
	
	while(1){
		switch(state){
 784:	e1 2f       	mov	r30, r17
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	ed 30       	cpi	r30, 0x0D	; 13
 78a:	f1 05       	cpc	r31, r1
 78c:	d8 f7       	brcc	.-10     	; 0x784 <JN_join_network+0x2a>
 78e:	e2 5c       	subi	r30, 0xC2	; 194
 790:	ff 4f       	sbci	r31, 0xFF	; 255
 792:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
 796:	0e 94 0b 19 	call	0x3216	; 0x3216 <rn2483_reset_active>
 79a:	2f ef       	ldi	r18, 0xFF	; 255
 79c:	89 e6       	ldi	r24, 0x69	; 105
 79e:	98 e1       	ldi	r25, 0x18	; 24
 7a0:	21 50       	subi	r18, 0x01	; 1
 7a2:	80 40       	sbci	r24, 0x00	; 0
 7a4:	90 40       	sbci	r25, 0x00	; 0
 7a6:	e1 f7       	brne	.-8      	; 0x7a0 <JN_join_network+0x46>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <JN_join_network+0x50>
 7aa:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
 7ac:	0e 94 0f 19 	call	0x321e	; 0x321e <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
 7b0:	4c e0       	ldi	r20, 0x0C	; 12
 7b2:	50 e0       	ldi	r21, 0x00	; 0
 7b4:	62 e0       	ldi	r22, 0x02	; 2
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	ce 01       	movw	r24, r28
 7ba:	01 96       	adiw	r24, 0x01	; 1
 7bc:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
 7c0:	23 e8       	ldi	r18, 0x83	; 131
 7c2:	32 e0       	ldi	r19, 0x02	; 2
 7c4:	40 e0       	ldi	r20, 0x00	; 0
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	ce 01       	movw	r24, r28
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
 7d0:	11 e0       	ldi	r17, 0x01	; 1
			break;
 7d2:	d8 cf       	rjmp	.-80     	; 0x784 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
 7d4:	4a e8       	ldi	r20, 0x8A	; 138
 7d6:	52 e0       	ldi	r21, 0x02	; 2
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	82 e3       	ldi	r24, 0x32	; 50
 7dc:	92 e0       	ldi	r25, 0x02	; 2
 7de:	0e 94 90 15 	call	0x2b20	; 0x2b20 <cmd_with_ending>
				util_transmit_msg(lm_msg);
 7e2:	82 e3       	ldi	r24, 0x32	; 50
 7e4:	92 e0       	ldi	r25, 0x02	; 2
 7e6:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
 7ea:	4c e0       	ldi	r20, 0x0C	; 12
 7ec:	50 e0       	ldi	r21, 0x00	; 0
 7ee:	63 e0       	ldi	r22, 0x03	; 3
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	ce 01       	movw	r24, r28
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 7fa:	28 e9       	ldi	r18, 0x98	; 152
 7fc:	32 e0       	ldi	r19, 0x02	; 2
 7fe:	40 e0       	ldi	r20, 0x00	; 0
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	ce 01       	movw	r24, r28
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 80a:	11 e0       	ldi	r17, 0x01	; 1
			break;
 80c:	bb cf       	rjmp	.-138    	; 0x784 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
 80e:	b5 01       	movw	r22, r10
 810:	82 e3       	ldi	r24, 0x32	; 50
 812:	92 e0       	ldi	r25, 0x02	; 2
 814:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <mac_set_deveui>
				attach_ending(lm_msg);
 818:	82 e3       	ldi	r24, 0x32	; 50
 81a:	92 e0       	ldi	r25, 0x02	; 2
 81c:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <attach_ending>
				util_transmit_msg(lm_msg);
 820:	82 e3       	ldi	r24, 0x32	; 50
 822:	92 e0       	ldi	r25, 0x02	; 2
 824:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
 828:	4c e0       	ldi	r20, 0x0C	; 12
 82a:	50 e0       	ldi	r21, 0x00	; 0
 82c:	64 e0       	ldi	r22, 0x04	; 4
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	ce 01       	movw	r24, r28
 832:	01 96       	adiw	r24, 0x01	; 1
 834:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 838:	28 e9       	ldi	r18, 0x98	; 152
 83a:	32 e0       	ldi	r19, 0x02	; 2
 83c:	40 e0       	ldi	r20, 0x00	; 0
 83e:	60 e0       	ldi	r22, 0x00	; 0
 840:	ce 01       	movw	r24, r28
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 848:	11 e0       	ldi	r17, 0x01	; 1
			break;
 84a:	9c cf       	rjmp	.-200    	; 0x784 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
 84c:	b7 01       	movw	r22, r14
 84e:	82 e3       	ldi	r24, 0x32	; 50
 850:	92 e0       	ldi	r25, 0x02	; 2
 852:	0e 94 b3 12 	call	0x2566	; 0x2566 <mac_set_appkey>
				attach_ending(lm_msg);
 856:	82 e3       	ldi	r24, 0x32	; 50
 858:	92 e0       	ldi	r25, 0x02	; 2
 85a:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <attach_ending>
				util_transmit_msg(lm_msg);
 85e:	82 e3       	ldi	r24, 0x32	; 50
 860:	92 e0       	ldi	r25, 0x02	; 2
 862:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
 866:	4c e0       	ldi	r20, 0x0C	; 12
 868:	50 e0       	ldi	r21, 0x00	; 0
 86a:	65 e0       	ldi	r22, 0x05	; 5
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	ce 01       	movw	r24, r28
 870:	01 96       	adiw	r24, 0x01	; 1
 872:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 876:	28 e9       	ldi	r18, 0x98	; 152
 878:	32 e0       	ldi	r19, 0x02	; 2
 87a:	40 e0       	ldi	r20, 0x00	; 0
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	ce 01       	movw	r24, r28
 880:	01 96       	adiw	r24, 0x01	; 1
 882:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 886:	11 e0       	ldi	r17, 0x01	; 1
			break;
 888:	7d cf       	rjmp	.-262    	; 0x784 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
 88a:	b6 01       	movw	r22, r12
 88c:	82 e3       	ldi	r24, 0x32	; 50
 88e:	92 e0       	ldi	r25, 0x02	; 2
 890:	0e 94 8f 12 	call	0x251e	; 0x251e <mac_set_appeui>
				attach_ending(lm_msg);
 894:	82 e3       	ldi	r24, 0x32	; 50
 896:	92 e0       	ldi	r25, 0x02	; 2
 898:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <attach_ending>
				util_transmit_msg(lm_msg);
 89c:	82 e3       	ldi	r24, 0x32	; 50
 89e:	92 e0       	ldi	r25, 0x02	; 2
 8a0:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
 8a4:	4c e0       	ldi	r20, 0x0C	; 12
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	66 e0       	ldi	r22, 0x06	; 6
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	ce 01       	movw	r24, r28
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 8b4:	28 e9       	ldi	r18, 0x98	; 152
 8b6:	32 e0       	ldi	r19, 0x02	; 2
 8b8:	40 e0       	ldi	r20, 0x00	; 0
 8ba:	60 e0       	ldi	r22, 0x00	; 0
 8bc:	ce 01       	movw	r24, r28
 8be:	01 96       	adiw	r24, 0x01	; 1
 8c0:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 8c4:	11 e0       	ldi	r17, 0x01	; 1
			break;
 8c6:	5e cf       	rjmp	.-324    	; 0x784 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
 8c8:	61 e0       	ldi	r22, 0x01	; 1
 8ca:	82 e3       	ldi	r24, 0x32	; 50
 8cc:	92 e0       	ldi	r25, 0x02	; 2
 8ce:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <mac_set_ADR>
				attach_ending(lm_msg);
 8d2:	82 e3       	ldi	r24, 0x32	; 50
 8d4:	92 e0       	ldi	r25, 0x02	; 2
 8d6:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <attach_ending>
				util_transmit_msg(lm_msg);
 8da:	82 e3       	ldi	r24, 0x32	; 50
 8dc:	92 e0       	ldi	r25, 0x02	; 2
 8de:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
 8e2:	4c e0       	ldi	r20, 0x0C	; 12
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	67 e0       	ldi	r22, 0x07	; 7
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	ce 01       	movw	r24, r28
 8ec:	01 96       	adiw	r24, 0x01	; 1
 8ee:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 8f2:	28 e9       	ldi	r18, 0x98	; 152
 8f4:	32 e0       	ldi	r19, 0x02	; 2
 8f6:	40 e0       	ldi	r20, 0x00	; 0
 8f8:	60 e0       	ldi	r22, 0x00	; 0
 8fa:	ce 01       	movw	r24, r28
 8fc:	01 96       	adiw	r24, 0x01	; 1
 8fe:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 902:	11 e0       	ldi	r17, 0x01	; 1
			break;
 904:	3f cf       	rjmp	.-386    	; 0x784 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
 906:	4b e9       	ldi	r20, 0x9B	; 155
 908:	52 e0       	ldi	r21, 0x02	; 2
 90a:	60 e0       	ldi	r22, 0x00	; 0
 90c:	82 e3       	ldi	r24, 0x32	; 50
 90e:	92 e0       	ldi	r25, 0x02	; 2
 910:	0e 94 90 15 	call	0x2b20	; 0x2b20 <cmd_with_ending>
				util_transmit_msg(lm_msg);
 914:	82 e3       	ldi	r24, 0x32	; 50
 916:	92 e0       	ldi	r25, 0x02	; 2
 918:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
 91c:	4c e0       	ldi	r20, 0x0C	; 12
 91e:	50 e0       	ldi	r21, 0x00	; 0
 920:	68 e0       	ldi	r22, 0x08	; 8
 922:	70 e0       	ldi	r23, 0x00	; 0
 924:	ce 01       	movw	r24, r28
 926:	01 96       	adiw	r24, 0x01	; 1
 928:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 92c:	28 e9       	ldi	r18, 0x98	; 152
 92e:	32 e0       	ldi	r19, 0x02	; 2
 930:	40 e0       	ldi	r20, 0x00	; 0
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	ce 01       	movw	r24, r28
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 93c:	11 e0       	ldi	r17, 0x01	; 1
			break;
 93e:	22 cf       	rjmp	.-444    	; 0x784 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
 940:	44 ea       	ldi	r20, 0xA4	; 164
 942:	52 e0       	ldi	r21, 0x02	; 2
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	82 e3       	ldi	r24, 0x32	; 50
 948:	92 e0       	ldi	r25, 0x02	; 2
 94a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <cmd_with_ending>
				util_transmit_msg(lm_msg);
 94e:	82 e3       	ldi	r24, 0x32	; 50
 950:	92 e0       	ldi	r25, 0x02	; 2
 952:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
 956:	4a e0       	ldi	r20, 0x0A	; 10
 958:	50 e0       	ldi	r21, 0x00	; 0
 95a:	69 e0       	ldi	r22, 0x09	; 9
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	ce 01       	movw	r24, r28
 960:	01 96       	adiw	r24, 0x01	; 1
 962:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 966:	28 e9       	ldi	r18, 0x98	; 152
 968:	32 e0       	ldi	r19, 0x02	; 2
 96a:	40 e0       	ldi	r20, 0x00	; 0
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	ce 01       	movw	r24, r28
 970:	01 96       	adiw	r24, 0x01	; 1
 972:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 976:	11 e0       	ldi	r17, 0x01	; 1
			break;
 978:	05 cf       	rjmp	.-502    	; 0x784 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
 97a:	4a e0       	ldi	r20, 0x0A	; 10
 97c:	50 e0       	ldi	r21, 0x00	; 0
 97e:	6b e0       	ldi	r22, 0x0B	; 11
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	ce 01       	movw	r24, r28
 984:	01 96       	adiw	r24, 0x01	; 1
 986:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
 98a:	22 eb       	ldi	r18, 0xB2	; 178
 98c:	32 e0       	ldi	r19, 0x02	; 2
 98e:	40 e0       	ldi	r20, 0x00	; 0
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	ce 01       	movw	r24, r28
 994:	01 96       	adiw	r24, 0x01	; 1
 996:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 99a:	11 e0       	ldi	r17, 0x01	; 1
			break;
 99c:	f3 ce       	rjmp	.-538    	; 0x784 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return util_parse_err(lm_msg);
 99e:	82 e3       	ldi	r24, 0x32	; 50
 9a0:	92 e0       	ldi	r25, 0x02	; 2
 9a2:	0e 94 49 10 	call	0x2092	; 0x2092 <util_parse_err>
 9a6:	14 c0       	rjmp	.+40     	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
 9a8:	0e 94 bf 18 	call	0x317e	; 0x317e <uart0_hal_message_ready>
 9ac:	88 23       	and	r24, r24
 9ae:	09 f4       	brne	.+2      	; 0x9b2 <__EEPROM_REGION_LENGTH__+0x1b2>
 9b0:	e9 ce       	rjmp	.-558    	; 0x784 <JN_join_network+0x2a>
					util_read_msg(lm_msg);
 9b2:	82 e3       	ldi	r24, 0x32	; 50
 9b4:	92 e0       	ldi	r25, 0x02	; 2
 9b6:	0e 94 2d 19 	call	0x325a	; 0x325a <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
 9ba:	62 e3       	ldi	r22, 0x32	; 50
 9bc:	72 e0       	ldi	r23, 0x02	; 2
 9be:	ce 01       	movw	r24, r28
 9c0:	01 96       	adiw	r24, 0x01	; 1
 9c2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <util_matchMessage>
 9c6:	18 2f       	mov	r17, r24
 9c8:	dd ce       	rjmp	.-582    	; 0x784 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
 9ce:	82 e0       	ldi	r24, 0x02	; 2
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
 9d0:	28 96       	adiw	r28, 0x08	; 8
 9d2:	0f b6       	in	r0, 0x3f	; 63
 9d4:	f8 94       	cli
 9d6:	de bf       	out	0x3e, r29	; 62
 9d8:	0f be       	out	0x3f, r0	; 63
 9da:	cd bf       	out	0x3d, r28	; 61
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	1f 91       	pop	r17
 9e2:	ff 90       	pop	r15
 9e4:	ef 90       	pop	r14
 9e6:	df 90       	pop	r13
 9e8:	cf 90       	pop	r12
 9ea:	bf 90       	pop	r11
 9ec:	af 90       	pop	r10
 9ee:	08 95       	ret

Disassembly of section .text.set_block_uplink:

0000301e <set_block_uplink>:
bool LM_is_free(){
	return busy==false;
}

static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&block_uplink);
    301e:	87 e9       	ldi	r24, 0x97	; 151
    3020:	97 e1       	ldi	r25, 0x17	; 23
    3022:	0e 94 75 10 	call	0x20ea	; 0x20ea <TC2_HAL_subscribe>
    3026:	80 93 3c 09 	sts	0x093C, r24	; 0x80093c <subPointer>
	busy=true;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <busy>
	cnt=0;
    3030:	10 92 3e 09 	sts	0x093E, r1	; 0x80093e <cnt>
    3034:	08 95       	ret

Disassembly of section .text.block_uplink:

00002f2e <block_uplink>:
}

static void block_uplink(){
	cnt++;
    2f2e:	80 91 3e 09 	lds	r24, 0x093E	; 0x80093e <cnt>
    2f32:	8f 5f       	subi	r24, 0xFF	; 255
    2f34:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    2f38:	86 30       	cpi	r24, 0x06	; 6
    2f3a:	30 f0       	brcs	.+12     	; 0x2f48 <block_uplink+0x1a>
		busy=false;
    2f3c:	10 92 3d 09 	sts	0x093D, r1	; 0x80093d <busy>
		TC2_HAL_cancel(subPointer);
    2f40:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <subPointer>
    2f44:	0e 94 81 14 	call	0x2902	; 0x2902 <TC2_HAL_cancel>
    2f48:	08 95       	ret

Disassembly of section .text.LM_join_network:

00003248 <LM_join_network>:

static void block_uplink();
static void set_block_uplink();

LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    3248:	0e 94 ad 03 	call	0x75a	; 0x75a <JN_join_network>
}
    324c:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00002cd8 <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    2cd8:	1f 93       	push	r17
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    2ce0:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <busy>
    2ce4:	91 11       	cpse	r25, r1
    2ce6:	0a c0       	rjmp	.+20     	; 0x2cfc <LM_send_uplink+0x24>
    2ce8:	16 2f       	mov	r17, r22
    2cea:	e9 01       	movw	r28, r18
	set_block_uplink();
    2cec:	0e 94 0f 18 	call	0x301e	; 0x301e <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    2cf0:	41 2f       	mov	r20, r17
    2cf2:	be 01       	movw	r22, r28
    2cf4:	84 e6       	ldi	r24, 0x64	; 100
    2cf6:	0e 94 44 09 	call	0x1288	; 0x1288 <SU_send_uplink>
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    2cfc:	83 e0       	ldi	r24, 0x03	; 3
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	1f 91       	pop	r17
    2d04:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

0000324e <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
    324e:	0e 94 b2 11 	call	0x2364	; 0x2364 <SC_put_to_sleep>
}
    3252:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00003254 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    3254:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <SC_wake_up>
}
    3258:	08 95       	ret

Disassembly of section .text.LM_is_free:

00003202 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    3202:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <busy>
}
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	89 27       	eor	r24, r25
    320a:	08 95       	ret

Disassembly of section .text.tohex:

00001b80 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    1b80:	6f 92       	push	r6
    1b82:	7f 92       	push	r7
    1b84:	8f 92       	push	r8
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	7c 01       	movw	r14, r24
    1b94:	3a 01       	movw	r6, r20
    1b96:	86 2e       	mov	r8, r22
    1b98:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    1b9a:	c0 e0       	ldi	r28, 0x00	; 0
    1b9c:	d0 e0       	ldi	r29, 0x00	; 0
    1b9e:	25 c0       	rjmp	.+74     	; 0x1bea <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    1ba0:	a8 2d       	mov	r26, r8
    1ba2:	c3 01       	movw	r24, r6
    1ba4:	8c 0f       	add	r24, r28
    1ba6:	9d 1f       	adc	r25, r29
    1ba8:	a1 1d       	adc	r26, r1
    1baa:	d7 fd       	sbrc	r29, 7
    1bac:	aa 95       	dec	r26
    1bae:	fc 01       	movw	r30, r24
    1bb0:	24 91       	lpm	r18, Z
    1bb2:	a7 fd       	sbrc	r26, 7
    1bb4:	20 81       	ld	r18, Z
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	1f 92       	push	r1
    1bbe:	2f 93       	push	r18
    1bc0:	20 e1       	ldi	r18, 0x10	; 16
    1bc2:	32 e0       	ldi	r19, 0x02	; 2
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	4f 93       	push	r20
    1bc8:	3f 93       	push	r19
    1bca:	2f 93       	push	r18
    1bcc:	8e 0d       	add	r24, r14
    1bce:	9f 1d       	adc	r25, r15
    1bd0:	9f 93       	push	r25
    1bd2:	8f 93       	push	r24
    1bd4:	0e 94 1d 13 	call	0x263a	; 0x263a <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    1bd8:	21 96       	adiw	r28, 0x01	; 1
    1bda:	8d b7       	in	r24, 0x3d	; 61
    1bdc:	9e b7       	in	r25, 0x3e	; 62
    1bde:	07 96       	adiw	r24, 0x07	; 7
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	9e bf       	out	0x3e, r25	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	8d bf       	out	0x3d, r24	; 61
    1bea:	c0 17       	cp	r28, r16
    1bec:	d1 07       	cpc	r29, r17
    1bee:	c4 f2       	brlt	.-80     	; 0x1ba0 <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	ff 90       	pop	r15
    1bfa:	ef 90       	pop	r14
    1bfc:	8f 90       	pop	r8
    1bfe:	7f 90       	pop	r7
    1c00:	6f 90       	pop	r6
    1c02:	08 95       	ret

Disassembly of section .text.attach_ending:

00002f4a <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	01 90       	ld	r0, Z+
    2f4e:	00 20       	and	r0, r0
    2f50:	e9 f7       	brne	.-6      	; 0x2f4c <attach_ending+0x2>
    2f52:	cf 01       	movw	r24, r30
    2f54:	23 e0       	ldi	r18, 0x03	; 3
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	45 e1       	ldi	r20, 0x15	; 21
    2f5a:	52 e0       	ldi	r21, 0x02	; 2
    2f5c:	60 e0       	ldi	r22, 0x00	; 0
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <memcpy>
    2f64:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00002b20 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    2b26:	0e 94 88 17 	call	0x2f10	; 0x2f10 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	01 90       	ld	r0, Z+
    2b2e:	00 20       	and	r0, r0
    2b30:	e9 f7       	brne	.-6      	; 0x2b2c <cmd_with_ending+0xc>
    2b32:	cf 01       	movw	r24, r30
    2b34:	23 e0       	ldi	r18, 0x03	; 3
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	45 e1       	ldi	r20, 0x15	; 21
    2b3a:	52 e0       	ldi	r21, 0x02	; 2
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <memcpy>
	return strlen(buffer);
    2b44:	be 01       	movw	r22, r28
    2b46:	80 e8       	ldi	r24, 0x80	; 128
    2b48:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
}
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

00001f1e <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    1f22:	44 36       	cpi	r20, 0x64	; 100
    1f24:	51 05       	cpc	r21, r1
    1f26:	61 05       	cpc	r22, r1
    1f28:	71 05       	cpc	r23, r1
    1f2a:	18 f1       	brcs	.+70     	; 0x1f72 <sys_sleep_cmd+0x54>
    1f2c:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    1f2e:	7f 93       	push	r23
    1f30:	6f 93       	push	r22
    1f32:	5f 93       	push	r21
    1f34:	4f 93       	push	r20
    1f36:	88 e1       	ldi	r24, 0x18	; 24
    1f38:	92 e0       	ldi	r25, 0x02	; 2
    1f3a:	a0 e0       	ldi	r26, 0x00	; 0
    1f3c:	af 93       	push	r26
    1f3e:	9f 93       	push	r25
    1f40:	8f 93       	push	r24
    1f42:	82 e2       	ldi	r24, 0x22	; 34
    1f44:	92 e0       	ldi	r25, 0x02	; 2
    1f46:	a0 e0       	ldi	r26, 0x00	; 0
    1f48:	af 93       	push	r26
    1f4a:	9f 93       	push	r25
    1f4c:	8f 93       	push	r24
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	0e 94 1d 13 	call	0x263a	; 0x263a <sprintf>
    return strlen(buffer);
    1f56:	be 01       	movw	r22, r28
    1f58:	80 e8       	ldi	r24, 0x80	; 128
    1f5a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
    1f5e:	2d b7       	in	r18, 0x3d	; 61
    1f60:	3e b7       	in	r19, 0x3e	; 62
    1f62:	24 5f       	subi	r18, 0xF4	; 244
    1f64:	3f 4f       	sbci	r19, 0xFF	; 255
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	3e bf       	out	0x3e, r19	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	2d bf       	out	0x3d, r18	; 61
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

0000227c <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    2286:	2f 93       	push	r18
    2288:	1f 93       	push	r17
    228a:	0f 93       	push	r16
    228c:	6f 93       	push	r22
    228e:	5f 93       	push	r21
    2290:	4f 93       	push	r20
    2292:	89 e2       	ldi	r24, 0x29	; 41
    2294:	92 e0       	ldi	r25, 0x02	; 2
    2296:	a0 e0       	ldi	r26, 0x00	; 0
    2298:	af 93       	push	r26
    229a:	9f 93       	push	r25
    229c:	8f 93       	push	r24
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	0e 94 1d 13 	call	0x263a	; 0x263a <sprintf>
    return strlen(buffer);
    22a6:	be 01       	movw	r22, r28
    22a8:	80 e8       	ldi	r24, 0x80	; 128
    22aa:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
    22ae:	2d b7       	in	r18, 0x3d	; 61
    22b0:	3e b7       	in	r19, 0x3e	; 62
    22b2:	25 5f       	subi	r18, 0xF5	; 245
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	3e bf       	out	0x3e, r19	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	2d bf       	out	0x3d, r18	; 61
}
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

000024d6 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    24d6:	cf 92       	push	r12
    24d8:	df 92       	push	r13
    24da:	ef 92       	push	r14
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    24e6:	6b 01       	movw	r12, r22
    24e8:	80 e8       	ldi	r24, 0x80	; 128
    24ea:	e8 2e       	mov	r14, r24
    24ec:	8e 2d       	mov	r24, r14
    24ee:	b6 01       	movw	r22, r12
    24f0:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
    24f4:	40 97       	sbiw	r24, 0x10	; 16
    24f6:	49 f4       	brne	.+18     	; 0x250a <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    24f8:	2e 2d       	mov	r18, r14
    24fa:	86 01       	movw	r16, r12
    24fc:	4f e2       	ldi	r20, 0x2F	; 47
    24fe:	52 e0       	ldi	r21, 0x02	; 2
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	ce 01       	movw	r24, r28
    2504:	0e 94 3e 11 	call	0x227c	; 0x227c <mac_set_parameter>
    2508:	02 c0       	rjmp	.+4      	; 0x250e <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    250a:	8f ef       	ldi	r24, 0xFF	; 255
    250c:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	ef 90       	pop	r14
    2518:	df 90       	pop	r13
    251a:	cf 90       	pop	r12
    251c:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

0000251e <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    251e:	cf 92       	push	r12
    2520:	df 92       	push	r13
    2522:	ef 92       	push	r14
    2524:	0f 93       	push	r16
    2526:	1f 93       	push	r17
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    252e:	6b 01       	movw	r12, r22
    2530:	80 e8       	ldi	r24, 0x80	; 128
    2532:	e8 2e       	mov	r14, r24
    2534:	8e 2d       	mov	r24, r14
    2536:	b6 01       	movw	r22, r12
    2538:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
    253c:	40 97       	sbiw	r24, 0x10	; 16
    253e:	49 f4       	brne	.+18     	; 0x2552 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    2540:	2e 2d       	mov	r18, r14
    2542:	86 01       	movw	r16, r12
    2544:	4e e3       	ldi	r20, 0x3E	; 62
    2546:	52 e0       	ldi	r21, 0x02	; 2
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	ce 01       	movw	r24, r28
    254c:	0e 94 3e 11 	call	0x227c	; 0x227c <mac_set_parameter>
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    2552:	8f ef       	ldi	r24, 0xFF	; 255
    2554:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	ef 90       	pop	r14
    2560:	df 90       	pop	r13
    2562:	cf 90       	pop	r12
    2564:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00002566 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    2566:	cf 92       	push	r12
    2568:	df 92       	push	r13
    256a:	ef 92       	push	r14
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    2576:	6b 01       	movw	r12, r22
    2578:	80 e8       	ldi	r24, 0x80	; 128
    257a:	e8 2e       	mov	r14, r24
    257c:	8e 2d       	mov	r24, r14
    257e:	b6 01       	movw	r22, r12
    2580:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
    2584:	80 97       	sbiw	r24, 0x20	; 32
    2586:	49 f4       	brne	.+18     	; 0x259a <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    2588:	2e 2d       	mov	r18, r14
    258a:	86 01       	movw	r16, r12
    258c:	4d e4       	ldi	r20, 0x4D	; 77
    258e:	52 e0       	ldi	r21, 0x02	; 2
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	ce 01       	movw	r24, r28
    2594:	0e 94 3e 11 	call	0x227c	; 0x227c <mac_set_parameter>
    2598:	02 c0       	rjmp	.+4      	; 0x259e <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    259a:	8f ef       	ldi	r24, 0xFF	; 255
    259c:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	1f 91       	pop	r17
    25a4:	0f 91       	pop	r16
    25a6:	ef 90       	pop	r14
    25a8:	df 90       	pop	r13
    25aa:	cf 90       	pop	r12
    25ac:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00002c1a <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
	if(state==0){
    2c1e:	61 11       	cpse	r22, r1
    2c20:	09 c0       	rjmp	.+18     	; 0x2c34 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    2c22:	0c e5       	ldi	r16, 0x5C	; 92
    2c24:	12 e0       	ldi	r17, 0x02	; 2
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	40 e6       	ldi	r20, 0x60	; 96
    2c2a:	52 e0       	ldi	r21, 0x02	; 2
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	0e 94 3e 11 	call	0x227c	; 0x227c <mac_set_parameter>
    2c32:	08 c0       	rjmp	.+16     	; 0x2c44 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    2c34:	0c e6       	ldi	r16, 0x6C	; 108
    2c36:	12 e0       	ldi	r17, 0x02	; 2
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	40 e6       	ldi	r20, 0x60	; 96
    2c3c:	52 e0       	ldi	r21, 0x02	; 2
    2c3e:	60 e0       	ldi	r22, 0x00	; 0
    2c40:	0e 94 3e 11 	call	0x227c	; 0x227c <mac_set_parameter>
	}
}
    2c44:	1f 91       	pop	r17
    2c46:	0f 91       	pop	r16
    2c48:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

000016a6 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	c5 56       	subi	r28, 0x65	; 101
    16ba:	d1 09       	sbc	r29, r1
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    16c8:	9f ef       	ldi	r25, 0xFF	; 255
    16ca:	96 0f       	add	r25, r22
    16cc:	9f 3d       	cpi	r25, 0xDF	; 223
    16ce:	68 f5       	brcc	.+90     	; 0x172a <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    16d0:	9f ef       	ldi	r25, 0xFF	; 255
    16d2:	92 0f       	add	r25, r18
    16d4:	92 33       	cpi	r25, 0x32	; 50
    16d6:	60 f5       	brcc	.+88     	; 0x1730 <mac_tx_confirmed+0x8a>
    16d8:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	60 e8       	ldi	r22, 0x80	; 128
    16de:	ce 01       	movw	r24, r28
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	7c 01       	movw	r14, r24
    16e4:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    16e8:	c7 01       	movw	r24, r14
    16ea:	a0 e8       	ldi	r26, 0x80	; 128
    16ec:	af 93       	push	r26
    16ee:	9f 93       	push	r25
    16f0:	ef 92       	push	r14
    16f2:	1f 92       	push	r1
    16f4:	df 92       	push	r13
    16f6:	8f e6       	ldi	r24, 0x6F	; 111
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	a0 e0       	ldi	r26, 0x00	; 0
    16fc:	af 93       	push	r26
    16fe:	9f 93       	push	r25
    1700:	8f 93       	push	r24
    1702:	8a e7       	ldi	r24, 0x7A	; 122
    1704:	92 e0       	ldi	r25, 0x02	; 2
    1706:	a0 e0       	ldi	r26, 0x00	; 0
    1708:	af 93       	push	r26
    170a:	9f 93       	push	r25
    170c:	8f 93       	push	r24
    170e:	1f 93       	push	r17
    1710:	0f 93       	push	r16
    1712:	0e 94 1d 13 	call	0x263a	; 0x263a <sprintf>
    
	
    return strlen(buffer);
    1716:	b8 01       	movw	r22, r16
    1718:	80 e8       	ldi	r24, 0x80	; 128
    171a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    172a:	8f ef       	ldi	r24, 0xFF	; 255
    172c:	9f ef       	ldi	r25, 0xFF	; 255
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    1730:	8f ef       	ldi	r24, 0xFF	; 255
    1732:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    1734:	cb 59       	subi	r28, 0x9B	; 155
    1736:	df 4f       	sbci	r29, 0xFF	; 255
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	08 95       	ret

Disassembly of section .text.beginsWidth:

00002444 <beginsWidth>:
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
	
	return SU_FATAL_ERROR;
}

static bool beginsWidth(const char *s1, const char *s2){
    2444:	6f 92       	push	r6
    2446:	7f 92       	push	r7
    2448:	8f 92       	push	r8
    244a:	cf 92       	push	r12
    244c:	df 92       	push	r13
    244e:	ef 92       	push	r14
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	3b 01       	movw	r6, r22
    2456:	88 2e       	mov	r8, r24
    2458:	69 01       	movw	r12, r18
    245a:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    245c:	84 2f       	mov	r24, r20
    245e:	b9 01       	movw	r22, r18
    2460:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
    2464:	8c 01       	movw	r16, r24
    2466:	4e 2d       	mov	r20, r14
    2468:	96 01       	movw	r18, r12
    246a:	88 2d       	mov	r24, r8
    246c:	b3 01       	movw	r22, r6
    246e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <strncmp>
    2472:	21 e0       	ldi	r18, 0x01	; 1
    2474:	89 2b       	or	r24, r25
    2476:	09 f0       	breq	.+2      	; 0x247a <beginsWidth+0x36>
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	82 2f       	mov	r24, r18
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	ef 90       	pop	r14
    2482:	df 90       	pop	r13
    2484:	cf 90       	pop	r12
    2486:	8f 90       	pop	r8
    2488:	7f 90       	pop	r7
    248a:	6f 90       	pop	r6
    248c:	08 95       	ret

Disassembly of section .text.decode_tx_response:

0000213e <decode_tx_response>:
			break;
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	6b 01       	movw	r12, r22
    2146:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    2148:	2b eb       	ldi	r18, 0xBB	; 187
    214a:	32 e0       	ldi	r19, 0x02	; 2
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	0e 94 c6 13 	call	0x278c	; 0x278c <strcmp>
    2152:	89 2b       	or	r24, r25
    2154:	a1 f0       	breq	.+40     	; 0x217e <decode_tx_response+0x40>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2156:	26 ec       	ldi	r18, 0xC6	; 198
    2158:	32 e0       	ldi	r19, 0x02	; 2
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	8e 2d       	mov	r24, r14
    215e:	b6 01       	movw	r22, r12
    2160:	0e 94 c6 13 	call	0x278c	; 0x278c <strcmp>
    2164:	89 2b       	or	r24, r25
    2166:	69 f0       	breq	.+26     	; 0x2182 <decode_tx_response+0x44>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    2168:	2e ec       	ldi	r18, 0xCE	; 206
    216a:	32 e0       	ldi	r19, 0x02	; 2
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	8e 2d       	mov	r24, r14
    2170:	b6 01       	movw	r22, r12
    2172:	0e 94 22 12 	call	0x2444	; 0x2444 <beginsWidth>
    2176:	88 23       	and	r24, r24
    2178:	31 f0       	breq	.+12     	; 0x2186 <decode_tx_response+0x48>
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	05 c0       	rjmp	.+10     	; 0x2188 <decode_tx_response+0x4a>
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    217e:	87 e0       	ldi	r24, 0x07	; 7
    2180:	03 c0       	rjmp	.+6      	; 0x2188 <decode_tx_response+0x4a>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2182:	88 e0       	ldi	r24, 0x08	; 8
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <decode_tx_response+0x4a>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
	
	return SU_FATAL_ERROR;
    2186:	86 e0       	ldi	r24, 0x06	; 6
}
    2188:	ef 90       	pop	r14
    218a:	df 90       	pop	r13
    218c:	cf 90       	pop	r12
    218e:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00001288 <SU_send_uplink>:

static SU_STATES decode_tx_response(const char msg[]);
static bool beginsWidth(const char *s1, const char *s2);


LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	28 97       	sbiw	r28, 0x08	; 8
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	d8 2e       	mov	r13, r24
    12a8:	7b 01       	movw	r14, r22
    12aa:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    12ac:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    12ae:	e1 2f       	mov	r30, r17
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	e9 30       	cpi	r30, 0x09	; 9
    12b4:	f1 05       	cpc	r31, r1
    12b6:	d8 f7       	brcc	.-10     	; 0x12ae <SU_send_uplink+0x26>
    12b8:	e5 5b       	subi	r30, 0xB5	; 181
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <__tablejump2__>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    12c0:	20 2f       	mov	r18, r16
    12c2:	a7 01       	movw	r20, r14
    12c4:	6d 2d       	mov	r22, r13
    12c6:	82 e3       	ldi	r24, 0x32	; 50
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <mac_tx_confirmed>
				attach_ending(lm_msg);
    12ce:	82 e3       	ldi	r24, 0x32	; 50
    12d0:	92 e0       	ldi	r25, 0x02	; 2
    12d2:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <attach_ending>
				util_transmit_msg(lm_msg);
    12d6:	82 e3       	ldi	r24, 0x32	; 50
    12d8:	92 e0       	ldi	r25, 0x02	; 2
    12da:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <util_transmit_msg>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    12de:	41 e0       	ldi	r20, 0x01	; 1
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	62 e0       	ldi	r22, 0x02	; 2
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	ce 01       	movw	r24, r28
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    12ee:	25 ed       	ldi	r18, 0xD5	; 213
    12f0:	32 e0       	ldi	r19, 0x02	; 2
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	ce 01       	movw	r24, r28
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    12fe:	15 e0       	ldi	r17, 0x05	; 5
			break;
    1300:	d6 cf       	rjmp	.-84     	; 0x12ae <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	64 e0       	ldi	r22, 0x04	; 4
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    1312:	28 ed       	ldi	r18, 0xD8	; 216
    1314:	32 e0       	ldi	r19, 0x02	; 2
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	ce 01       	movw	r24, r28
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	0e 94 df 18 	call	0x31be	; 0x31be <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1322:	15 e0       	ldi	r17, 0x05	; 5
			break;
    1324:	c4 cf       	rjmp	.-120    	; 0x12ae <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
    1326:	62 e3       	ldi	r22, 0x32	; 50
    1328:	72 e0       	ldi	r23, 0x02	; 2
    132a:	80 e8       	ldi	r24, 0x80	; 128
    132c:	0e 94 9f 10 	call	0x213e	; 0x213e <decode_tx_response>
    1330:	18 2f       	mov	r17, r24
			break;
    1332:	bd cf       	rjmp	.-134    	; 0x12ae <SU_send_uplink+0x26>
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
			
			case SU_NO_ACK:
				return LM_STATUS_MAC_ERR;
    1334:	85 e0       	ldi	r24, 0x05	; 5
    1336:	16 c0       	rjmp	.+44     	; 0x1364 <SU_send_uplink+0xdc>
			
			case SU_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;	
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	14 c0       	rjmp	.+40     	; 0x1364 <SU_send_uplink+0xdc>
			
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    133c:	0e 94 bf 18 	call	0x317e	; 0x317e <uart0_hal_message_ready>
    1340:	88 23       	and	r24, r24
    1342:	09 f4       	brne	.+2      	; 0x1346 <SU_send_uplink+0xbe>
    1344:	b4 cf       	rjmp	.-152    	; 0x12ae <SU_send_uplink+0x26>
					util_read_msg(lm_msg);
    1346:	82 e3       	ldi	r24, 0x32	; 50
    1348:	92 e0       	ldi	r25, 0x02	; 2
    134a:	0e 94 2d 19 	call	0x325a	; 0x325a <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    134e:	62 e3       	ldi	r22, 0x32	; 50
    1350:	72 e0       	ldi	r23, 0x02	; 2
    1352:	ce 01       	movw	r24, r28
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <util_matchMessage>
    135a:	18 2f       	mov	r17, r24
    135c:	a8 cf       	rjmp	.-176    	; 0x12ae <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
			break;
			
			case SU_HANDLE_DOWNLINK:
				return LM_STATUS_SUCCESS;
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
    1362:	83 e0       	ldi	r24, 0x03	; 3
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    1364:	28 96       	adiw	r28, 0x08	; 8
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00002364 <SC_put_to_sleep>:
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	5c e5       	ldi	r21, 0x5C	; 92
    2368:	66 e2       	ldi	r22, 0x26	; 38
    236a:	75 e0       	ldi	r23, 0x05	; 5
    236c:	82 e3       	ldi	r24, 0x32	; 50
    236e:	92 e0       	ldi	r25, 0x02	; 2
    2370:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <sys_sleep_cmd>
	attach_ending(lm_msg);
    2374:	82 e3       	ldi	r24, 0x32	; 50
    2376:	92 e0       	ldi	r25, 0x02	; 2
    2378:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <attach_ending>
	util_transmit_msg(lm_msg);
    237c:	82 e3       	ldi	r24, 0x32	; 50
    237e:	92 e0       	ldi	r25, 0x02	; 2
    2380:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <util_transmit_msg>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    2384:	0e 94 bf 18 	call	0x317e	; 0x317e <uart0_hal_message_ready>
    2388:	88 23       	and	r24, r24
    238a:	e1 f3       	breq	.-8      	; 0x2384 <SC_put_to_sleep+0x20>
	
	util_read_msg(lm_msg);
    238c:	82 e3       	ldi	r24, 0x32	; 50
    238e:	92 e0       	ldi	r25, 0x02	; 2
    2390:	0e 94 2d 19 	call	0x325a	; 0x325a <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    2394:	62 e3       	ldi	r22, 0x32	; 50
    2396:	72 e0       	ldi	r23, 0x02	; 2
    2398:	80 e8       	ldi	r24, 0x80	; 128
    239a:	2c e0       	ldi	r18, 0x0C	; 12
    239c:	33 e0       	ldi	r19, 0x03	; 3
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 c6 13 	call	0x278c	; 0x278c <strcmp>
    23a4:	89 2b       	or	r24, r25
    23a6:	11 f4       	brne	.+4      	; 0x23ac <SC_put_to_sleep+0x48>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	08 95       	ret
	return LM_STATUS_ERROR;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
}
    23ae:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00002b52 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    2b52:	85 e5       	ldi	r24, 0x55	; 85
    2b54:	0e 94 d7 12 	call	0x25ae	; 0x25ae <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    2b58:	0e 94 bf 18 	call	0x317e	; 0x317e <uart0_hal_message_ready>
    2b5c:	88 23       	and	r24, r24
    2b5e:	e1 f3       	breq	.-8      	; 0x2b58 <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
    2b60:	82 e3       	ldi	r24, 0x32	; 50
    2b62:	92 e0       	ldi	r25, 0x02	; 2
    2b64:	0e 94 2d 19 	call	0x325a	; 0x325a <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    2b68:	62 e3       	ldi	r22, 0x32	; 50
    2b6a:	72 e0       	ldi	r23, 0x02	; 2
    2b6c:	80 e8       	ldi	r24, 0x80	; 128
    2b6e:	2c e0       	ldi	r18, 0x0C	; 12
    2b70:	33 e0       	ldi	r19, 0x03	; 3
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	0e 94 c6 13 	call	0x278c	; 0x278c <strcmp>
    2b78:	89 2b       	or	r24, r25
    2b7a:	11 f4       	brne	.+4      	; 0x2b80 <SC_wake_up+0x2e>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	08 95       	ret
	return LM_STATUS_ERROR;
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	08 95       	ret

Disassembly of section .text.LM_strbeginswith:

00002680 <LM_strbeginswith>:
	}
	
	return LM_STATUS_FATAL_ERROR;
}

static bool LM_strbeginswith(char *s1, const char *s2){
    2680:	cf 92       	push	r12
    2682:	df 92       	push	r13
    2684:	ef 92       	push	r14
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	ec 01       	movw	r28, r24
    2690:	6a 01       	movw	r12, r20
    2692:	e6 2e       	mov	r14, r22
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    2694:	86 2f       	mov	r24, r22
    2696:	ba 01       	movw	r22, r20
    2698:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
    269c:	8c 01       	movw	r16, r24
    269e:	be 01       	movw	r22, r28
    26a0:	80 e8       	ldi	r24, 0x80	; 128
    26a2:	4e 2d       	mov	r20, r14
    26a4:	96 01       	movw	r18, r12
    26a6:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <strncmp>
    26aa:	21 e0       	ldi	r18, 0x01	; 1
    26ac:	89 2b       	or	r24, r25
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <LM_strbeginswith+0x32>
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	82 2f       	mov	r24, r18
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	ef 90       	pop	r14
    26be:	df 90       	pop	r13
    26c0:	cf 90       	pop	r12
    26c2:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

000031b2 <util_setPendingStates>:




void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    31b2:	fc 01       	movw	r30, r24
    31b4:	71 83       	std	Z+1, r23	; 0x01
    31b6:	60 83       	st	Z, r22
	sd->failure_state=failed;
    31b8:	53 83       	std	Z+3, r21	; 0x03
    31ba:	42 83       	std	Z+2, r20	; 0x02
    31bc:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

000031be <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    31be:	fc 01       	movw	r30, r24
    31c0:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    31c2:	25 83       	std	Z+5, r18	; 0x05
    31c4:	36 83       	std	Z+6, r19	; 0x06
    31c6:	47 83       	std	Z+7, r20	; 0x07
    31c8:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00001f7c <util_matchMessage>:
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	ec 01       	movw	r28, r24
    1f82:	fb 01       	movw	r30, r22
	switch(sd->matchCase){
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	91 30       	cpi	r25, 0x01	; 1
    1f88:	91 f0       	breq	.+36     	; 0x1fae <util_matchMessage+0x32>
    1f8a:	18 f0       	brcs	.+6      	; 0x1f92 <util_matchMessage+0x16>
    1f8c:	92 30       	cpi	r25, 0x02	; 2
    1f8e:	e9 f0       	breq	.+58     	; 0x1fca <util_matchMessage+0x4e>
    1f90:	1f c0       	rjmp	.+62     	; 0x1fd0 <util_matchMessage+0x54>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    1f92:	2d 81       	ldd	r18, Y+5	; 0x05
    1f94:	3e 81       	ldd	r19, Y+6	; 0x06
    1f96:	4f 81       	ldd	r20, Y+7	; 0x07
    1f98:	80 e8       	ldi	r24, 0x80	; 128
    1f9a:	0e 94 c6 13 	call	0x278c	; 0x278c <strcmp>
    1f9e:	89 2b       	or	r24, r25
    1fa0:	19 f4       	brne	.+6      	; 0x1fa8 <util_matchMessage+0x2c>
    1fa2:	88 81       	ld	r24, Y
    1fa4:	99 81       	ldd	r25, Y+1	; 0x01
    1fa6:	16 c0       	rjmp	.+44     	; 0x1fd4 <util_matchMessage+0x58>
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	9b 81       	ldd	r25, Y+3	; 0x03
    1fac:	13 c0       	rjmp	.+38     	; 0x1fd4 <util_matchMessage+0x58>

		case LM_BEGINS_WITH:
		return LM_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    1fae:	4d 81       	ldd	r20, Y+5	; 0x05
    1fb0:	5e 81       	ldd	r21, Y+6	; 0x06
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	cf 01       	movw	r24, r30
    1fb6:	0e 94 40 13 	call	0x2680	; 0x2680 <LM_strbeginswith>
    1fba:	88 23       	and	r24, r24
    1fbc:	19 f0       	breq	.+6      	; 0x1fc4 <util_matchMessage+0x48>
    1fbe:	88 81       	ld	r24, Y
    1fc0:	99 81       	ldd	r25, Y+1	; 0x01
    1fc2:	08 c0       	rjmp	.+16     	; 0x1fd4 <util_matchMessage+0x58>
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	05 c0       	rjmp	.+10     	; 0x1fd4 <util_matchMessage+0x58>

		case LM_NO_TEST:
		return sd->success_state;
    1fca:	88 81       	ld	r24, Y
    1fcc:	99 81       	ldd	r25, Y+1	; 0x01
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <util_matchMessage+0x58>
		default:
		return sd->failure_state;
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

00002f66 <util_transmit_msg>:

void util_transmit_msg(char msg[]){
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	80 e8       	ldi	r24, 0x80	; 128
    2f70:	0e 94 83 16 	call	0x2d06	; 0x2d06 <strlen>
    2f74:	68 2f       	mov	r22, r24
    2f76:	ce 01       	movw	r24, r28
    2f78:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <uart0_hal_send_message>
}
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	08 95       	ret

Disassembly of section .text.util_read_msg:

0000325a <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str((uint8_t*) msg);
    325a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <uart0_hal_read_message_as_str>
    325e:	08 95       	ret

Disassembly of section .text.util_parse_err:

00002092 <util_parse_err>:
}

LM_STATUS util_parse_err(char *msg){
    2092:	cf 92       	push	r12
    2094:	df 92       	push	r13
    2096:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    2098:	6c 01       	movw	r12, r24
    209a:	20 e8       	ldi	r18, 0x80	; 128
    209c:	e2 2e       	mov	r14, r18
    209e:	22 ee       	ldi	r18, 0xE2	; 226
    20a0:	32 e0       	ldi	r19, 0x02	; 2
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	8e 2d       	mov	r24, r14
    20a6:	b6 01       	movw	r22, r12
    20a8:	0e 94 c6 13 	call	0x278c	; 0x278c <strcmp>
    20ac:	89 2b       	or	r24, r25
    20ae:	a1 f0       	breq	.+40     	; 0x20d8 <util_parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    20b0:	2d ee       	ldi	r18, 0xED	; 237
    20b2:	32 e0       	ldi	r19, 0x02	; 2
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	8e 2d       	mov	r24, r14
    20b8:	b6 01       	movw	r22, r12
    20ba:	0e 94 c6 13 	call	0x278c	; 0x278c <strcmp>
    20be:	89 2b       	or	r24, r25
    20c0:	69 f0       	breq	.+26     	; 0x20dc <util_parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    20c2:	24 ef       	ldi	r18, 0xF4	; 244
    20c4:	32 e0       	ldi	r19, 0x02	; 2
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	8e 2d       	mov	r24, r14
    20ca:	b6 01       	movw	r22, r12
    20cc:	0e 94 c6 13 	call	0x278c	; 0x278c <strcmp>
    20d0:	89 2b       	or	r24, r25
    20d2:	31 f4       	brne	.+12     	; 0x20e0 <util_parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    20d4:	84 e0       	ldi	r24, 0x04	; 4
    20d6:	05 c0       	rjmp	.+10     	; 0x20e2 <util_parse_err+0x50>
	uart0_hal_read_message_as_str((uint8_t*) msg);
}

LM_STATUS util_parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    20d8:	83 e0       	ldi	r24, 0x03	; 3
    20da:	03 c0       	rjmp	.+6      	; 0x20e2 <util_parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <util_parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    20e0:	82 e0       	ldi	r24, 0x02	; 2
}
    20e2:	ef 90       	pop	r14
    20e4:	df 90       	pop	r13
    20e6:	cf 90       	pop	r12
    20e8:	08 95       	ret

Disassembly of section .text.get_group_id:

00003260 <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    3260:	80 91 3f 09 	lds	r24, 0x093F	; 0x80093f <_groupId>
    3264:	08 95       	ret

Disassembly of section .text.set_group_id:

00003266 <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    3266:	80 93 3f 09 	sts	0x093F, r24	; 0x80093f <_groupId>
    326a:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00002b84 <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	8c 01       	movw	r16, r24
    2b8e:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    2b90:	0e 94 30 19 	call	0x3260	; 0x3260 <get_group_id>
    2b94:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    2b96:	2d 2f       	mov	r18, r29
    2b98:	a8 01       	movw	r20, r16
    2b9a:	68 2f       	mov	r22, r24
    2b9c:	8a ef       	ldi	r24, 0xFA	; 250
    2b9e:	92 e0       	ldi	r25, 0x02	; 2
    2ba0:	0e 94 f6 05 	call	0xbec	; 0xbec <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	8c 0f       	add	r24, r28
    2ba8:	0e 94 33 19 	call	0x3266	; 0x3266 <set_group_id>
}
    2bac:	df 91       	pop	r29
    2bae:	cf 91       	pop	r28
    2bb0:	1f 91       	pop	r17
    2bb2:	0f 91       	pop	r16
    2bb4:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00001dda <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	2a 97       	sbiw	r28, 0x0a	; 10
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	18 2f       	mov	r17, r24
    1df6:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    1df8:	9e 01       	movw	r18, r28
    1dfa:	2f 5f       	subi	r18, 0xFF	; 255
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfe:	ab 01       	movw	r20, r22
    1e00:	68 2f       	mov	r22, r24
    1e02:	8a ef       	ldi	r24, 0xFA	; 250
    1e04:	92 e0       	ldi	r25, 0x02	; 2
    1e06:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    1e0a:	9e 01       	movw	r18, r28
    1e0c:	27 5f       	subi	r18, 0xF7	; 247
    1e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e10:	ae 01       	movw	r20, r28
    1e12:	49 5f       	subi	r20, 0xF9	; 249
    1e14:	5f 4f       	sbci	r21, 0xFF	; 255
    1e16:	61 2f       	mov	r22, r17
    1e18:	8a ef       	ldi	r24, 0xFA	; 250
    1e1a:	92 e0       	ldi	r25, 0x02	; 2
    1e1c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    1e20:	29 85       	ldd	r18, Y+9	; 0x09
    1e22:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e24:	4f 81       	ldd	r20, Y+7	; 0x07
    1e26:	58 85       	ldd	r21, Y+8	; 0x08
    1e28:	b7 01       	movw	r22, r14
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <mrpp_data_add_int16>
}
    1e32:	2a 96       	adiw	r28, 0x0a	; 10
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	ff 90       	pop	r15
    1e46:	ef 90       	pop	r14
    1e48:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00002dca <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    2dd0:	8a ef       	ldi	r24, 0xFA	; 250
    2dd2:	92 e0       	ldi	r25, 0x02	; 2
    2dd4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <mrpp_state_is_body_ready>
    2dd8:	88 83       	st	Y, r24
    2dda:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    2ddc:	89 2f       	mov	r24, r25
    2dde:	80 95       	com	r24
    
}
    2de0:	88 1f       	adc	r24, r24
    2de2:	88 27       	eor	r24, r24
    2de4:	88 1f       	adc	r24, r24
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

000019d2 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    19d2:	af 92       	push	r10
    19d4:	bf 92       	push	r11
    19d6:	cf 92       	push	r12
    19d8:	df 92       	push	r13
    19da:	ef 92       	push	r14
    19dc:	ff 92       	push	r15
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <MRPP_get_ready_body_package+0x16>
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <MRPP_get_ready_body_package+0x18>
    19ea:	1f 92       	push	r1
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	6b 01       	movw	r12, r22
    19f2:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    19f4:	9e 01       	movw	r18, r28
    19f6:	2b 5f       	subi	r18, 0xFB	; 251
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	79 01       	movw	r14, r18
    19fc:	8e 01       	movw	r16, r28
    19fe:	0d 5f       	subi	r16, 0xFD	; 253
    1a00:	1f 4f       	sbci	r17, 0xFF	; 255
    1a02:	23 50       	subi	r18, 0x03	; 3
    1a04:	31 09       	sbc	r19, r1
    1a06:	ae 01       	movw	r20, r28
    1a08:	4f 5f       	subi	r20, 0xFF	; 255
    1a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	8a ef       	ldi	r24, 0xFA	; 250
    1a10:	92 e0       	ldi	r25, 0x02	; 2
    1a12:	0e 94 b7 08 	call	0x116e	; 0x116e <mrpp_state_get_ready_body>
    
    if(!res) return false;
    1a16:	88 23       	and	r24, r24
    1a18:	b1 f0       	breq	.+44     	; 0x1a46 <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    1a1a:	4d 81       	ldd	r20, Y+5	; 0x05
    1a1c:	83 e0       	ldi	r24, 0x03	; 3
    1a1e:	84 0f       	add	r24, r20
    1a20:	f5 01       	movw	r30, r10
    1a22:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    1a24:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <state>
    1a28:	f6 01       	movw	r30, r12
    1a2a:	80 83       	st	Z, r24
    package[1]=subId;
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	6b 81       	ldd	r22, Y+3	; 0x03
    1a38:	7c 81       	ldd	r23, Y+4	; 0x04
    1a3a:	c6 01       	movw	r24, r12
    1a3c:	03 96       	adiw	r24, 0x03	; 3
    1a3e:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <mrpp_data_get>

    return true;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    1a46:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	df 90       	pop	r13
    1a60:	cf 90       	pop	r12
    1a62:	bf 90       	pop	r11
    1a64:	af 90       	pop	r10
    1a66:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

000031ca <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    31ca:	bc 01       	movw	r22, r24
    31cc:	8a ef       	ldi	r24, 0xFA	; 250
    31ce:	92 e0       	ldi	r25, 0x02	; 2
    31d0:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <mrpp_state_set_body_sent>
    31d4:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00002dec <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    2df2:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <state>
    2df6:	fc 01       	movw	r30, r24
    2df8:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    2dfa:	bf 01       	movw	r22, r30
    2dfc:	8a ef       	ldi	r24, 0xFA	; 250
    2dfe:	92 e0       	ldi	r25, 0x02	; 2
    2e00:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <mrpp_state_get_header>
    *package_length+=1;
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	88 83       	st	Y, r24
}
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00002e0e <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    2e14:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <state>
    2e18:	fc 01       	movw	r30, r24
    2e1a:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    2e1c:	bf 01       	movw	r22, r30
    2e1e:	8a ef       	ldi	r24, 0xFA	; 250
    2e20:	92 e0       	ldi	r25, 0x02	; 2
    2e22:	0e 94 a9 0b 	call	0x1752	; 0x1752 <mrpp_state_get_tail>
    *package_length+=1;
    2e26:	8f 5f       	subi	r24, 0xFF	; 255
    2e28:	88 83       	st	Y, r24
}
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

0000320c <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    320c:	8a ef       	ldi	r24, 0xFA	; 250
    320e:	92 e0       	ldi	r25, 0x02	; 2
    3210:	0e 94 99 16 	call	0x2d32	; 0x2d32 <mrpp_state_all_bodies_sent>
}
    3214:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00001a68 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    1a68:	cf 92       	push	r12
    1a6a:	df 92       	push	r13
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    1a78:	94 2f       	mov	r25, r20
    1a7a:	0c c0       	rjmp	.+24     	; 0x1a94 <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    1a7c:	c9 2f       	mov	r28, r25
    1a7e:	d0 e0       	ldi	r29, 0x00	; 0
    1a80:	e4 1b       	sub	r30, r20
    1a82:	f5 0b       	sbc	r31, r21
    1a84:	ea 0f       	add	r30, r26
    1a86:	fb 1f       	adc	r31, r27
    1a88:	80 81       	ld	r24, Z
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ec 56       	subi	r30, 0x6C	; 108
    1a8e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a90:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    1a92:	9f 5f       	subi	r25, 0xFF	; 255
    1a94:	e9 2f       	mov	r30, r25
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	6a 01       	movw	r12, r20
    1a9a:	86 e0       	ldi	r24, 0x06	; 6
    1a9c:	c8 0e       	add	r12, r24
    1a9e:	d1 1c       	adc	r13, r1
    1aa0:	ec 15       	cp	r30, r12
    1aa2:	fd 05       	cpc	r31, r13
    1aa4:	58 f3       	brcs	.-42     	; 0x1a7c <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    1aa6:	26 50       	subi	r18, 0x06	; 6
    1aa8:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    1aaa:	36 95       	lsr	r19
    1aac:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    1aae:	49 5f       	subi	r20, 0xF9	; 249
    1ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    1ab2:	a0 e0       	ldi	r26, 0x00	; 0
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	16 c0       	rjmp	.+44     	; 0x1ae4 <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    1ab8:	cd 01       	movw	r24, r26
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	f6 01       	movw	r30, r12
    1ac0:	e8 0f       	add	r30, r24
    1ac2:	f9 1f       	adc	r31, r25
    1ac4:	8b 01       	movw	r16, r22
    1ac6:	08 0f       	add	r16, r24
    1ac8:	19 1f       	adc	r17, r25
    1aca:	e8 01       	movw	r28, r16
    1acc:	f9 80       	ldd	r15, Y+1	; 0x01
    1ace:	ec 56       	subi	r30, 0x6C	; 108
    1ad0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ad2:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    1ad4:	84 0f       	add	r24, r20
    1ad6:	95 1f       	adc	r25, r21
    1ad8:	18 81       	ld	r17, Y
    1ada:	fc 01       	movw	r30, r24
    1adc:	ec 56       	subi	r30, 0x6C	; 108
    1ade:	fc 4f       	sbci	r31, 0xFC	; 252
    1ae0:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	a2 17       	cp	r26, r18
    1ae6:	b3 07       	cpc	r27, r19
    1ae8:	38 f3       	brcs	.-50     	; 0x1ab8 <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	ff 90       	pop	r15
    1af4:	df 90       	pop	r13
    1af6:	cf 90       	pop	r12
    1af8:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00002c4a <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	0c c0       	rjmp	.+24     	; 0x2c6e <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    2c56:	de 01       	movw	r26, r28
    2c58:	a2 0f       	add	r26, r18
    2c5a:	b3 1f       	adc	r27, r19
    2c5c:	f9 01       	movw	r30, r18
    2c5e:	e6 0f       	add	r30, r22
    2c60:	f7 1f       	adc	r31, r23
    2c62:	ec 56       	subi	r30, 0x6C	; 108
    2c64:	fc 4f       	sbci	r31, 0xFC	; 252
    2c66:	90 81       	ld	r25, Z
    2c68:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    2c6a:	2f 5f       	subi	r18, 0xFF	; 255
    2c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6e:	24 17       	cp	r18, r20
    2c70:	35 07       	cpc	r19, r21
    2c72:	88 f3       	brcs	.-30     	; 0x2c56 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	08 95       	ret

Disassembly of section .text.add_data_types:

00001380 <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	dc 01       	movw	r26, r24
    1392:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1394:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    1396:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    1398:	c1 2c       	mov	r12, r1
    139a:	d1 2c       	mov	r13, r1
    139c:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    139e:	4a c0       	rjmp	.+148    	; 0x1434 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    13a0:	29 2f       	mov	r18, r25
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	f9 01       	movw	r30, r18
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	22 0f       	add	r18, r18
    13ac:	33 1f       	adc	r19, r19
    13ae:	22 0f       	add	r18, r18
    13b0:	33 1f       	adc	r19, r19
    13b2:	22 0f       	add	r18, r18
    13b4:	33 1f       	adc	r19, r19
    13b6:	e2 0f       	add	r30, r18
    13b8:	f3 1f       	adc	r31, r19
    13ba:	ea 0f       	add	r30, r26
    13bc:	fb 1f       	adc	r31, r27
    13be:	27 81       	ldd	r18, Z+7	; 0x07
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	a9 f0       	breq	.+42     	; 0x13ee <add_data_types+0x6e>
    13c4:	24 30       	cpi	r18, 0x04	; 4
    13c6:	21 f1       	breq	.+72     	; 0x1410 <add_data_types+0x90>
    13c8:	21 30       	cpi	r18, 0x01	; 1
    13ca:	91 f5       	brne	.+100    	; 0x1430 <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    13cc:	01 e0       	ldi	r16, 0x01	; 1
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	04 2e       	mov	r0, r20
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <add_data_types+0x58>
    13d4:	00 0f       	add	r16, r16
    13d6:	11 1f       	adc	r17, r17
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <add_data_types+0x54>
    13dc:	01 2e       	mov	r0, r17
    13de:	00 0c       	add	r0, r0
    13e0:	22 0b       	sbc	r18, r18
    13e2:	33 0b       	sbc	r19, r19
    13e4:	c0 2a       	or	r12, r16
    13e6:	d1 2a       	or	r13, r17
    13e8:	e2 2a       	or	r14, r18
    13ea:	f3 2a       	or	r15, r19
                break;
    13ec:	21 c0       	rjmp	.+66     	; 0x1430 <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    13ee:	02 e0       	ldi	r16, 0x02	; 2
    13f0:	10 e0       	ldi	r17, 0x00	; 0
    13f2:	04 2e       	mov	r0, r20
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <add_data_types+0x7a>
    13f6:	00 0f       	add	r16, r16
    13f8:	11 1f       	adc	r17, r17
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <add_data_types+0x76>
    13fe:	01 2e       	mov	r0, r17
    1400:	00 0c       	add	r0, r0
    1402:	22 0b       	sbc	r18, r18
    1404:	33 0b       	sbc	r19, r19
    1406:	c0 2a       	or	r12, r16
    1408:	d1 2a       	or	r13, r17
    140a:	e2 2a       	or	r14, r18
    140c:	f3 2a       	or	r15, r19
                break;
    140e:	10 c0       	rjmp	.+32     	; 0x1430 <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    1410:	03 e0       	ldi	r16, 0x03	; 3
    1412:	10 e0       	ldi	r17, 0x00	; 0
    1414:	04 2e       	mov	r0, r20
    1416:	02 c0       	rjmp	.+4      	; 0x141c <add_data_types+0x9c>
    1418:	00 0f       	add	r16, r16
    141a:	11 1f       	adc	r17, r17
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <add_data_types+0x98>
    1420:	01 2e       	mov	r0, r17
    1422:	00 0c       	add	r0, r0
    1424:	22 0b       	sbc	r18, r18
    1426:	33 0b       	sbc	r19, r19
    1428:	c0 2a       	or	r12, r16
    142a:	d1 2a       	or	r13, r17
    142c:	e2 2a       	or	r14, r18
    142e:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    1430:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1432:	9f 5f       	subi	r25, 0xFF	; 255
    1434:	12 96       	adiw	r26, 0x02	; 2
    1436:	8c 91       	ld	r24, X
    1438:	12 97       	sbiw	r26, 0x02	; 2
    143a:	98 17       	cp	r25, r24
    143c:	08 f4       	brcc	.+2      	; 0x1440 <add_data_types+0xc0>
    143e:	b0 cf       	rjmp	.-160    	; 0x13a0 <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    1440:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    1442:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    1444:	cd 82       	std	Y+5, r12	; 0x05
} 
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	df 90       	pop	r13
    1454:	cf 90       	pop	r12
    1456:	08 95       	ret

Disassembly of section .text.update_bodies:

00000daa <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
 daa:	cf 93       	push	r28
 dac:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
 dae:	26 2f       	mov	r18, r22
 db0:	30 e0       	ldi	r19, 0x00	; 0
 db2:	c9 01       	movw	r24, r18
 db4:	01 97       	sbiw	r24, 0x01	; 1
 db6:	f9 01       	movw	r30, r18
 db8:	ee 0f       	add	r30, r30
 dba:	ff 1f       	adc	r31, r31
 dbc:	22 0f       	add	r18, r18
 dbe:	33 1f       	adc	r19, r19
 dc0:	22 0f       	add	r18, r18
 dc2:	33 1f       	adc	r19, r19
 dc4:	22 0f       	add	r18, r18
 dc6:	33 1f       	adc	r19, r19
 dc8:	e2 0f       	add	r30, r18
 dca:	f3 1f       	adc	r31, r19
 dcc:	ea 0f       	add	r30, r26
 dce:	fb 1f       	adc	r31, r27
 dd0:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
 dd2:	c0 e0       	ldi	r28, 0x00	; 0
 dd4:	25 c0       	rjmp	.+74     	; 0xe20 <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
 dd6:	82 17       	cp	r24, r18
 dd8:	93 07       	cpc	r25, r19
 dda:	09 f1       	breq	.+66     	; 0xe1e <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
 ddc:	a9 01       	movw	r20, r18
 dde:	44 0f       	add	r20, r20
 de0:	55 1f       	adc	r21, r21
 de2:	44 0f       	add	r20, r20
 de4:	55 1f       	adc	r21, r21
 de6:	44 0f       	add	r20, r20
 de8:	55 1f       	adc	r21, r21
 dea:	f9 01       	movw	r30, r18
 dec:	ee 0f       	add	r30, r30
 dee:	ff 1f       	adc	r31, r31
 df0:	e4 0f       	add	r30, r20
 df2:	f5 1f       	adc	r31, r21
 df4:	ea 0f       	add	r30, r26
 df6:	fb 1f       	adc	r31, r27
 df8:	43 85       	ldd	r20, Z+11	; 0x0b
 dfa:	74 13       	cpse	r23, r20
 dfc:	10 c0       	rjmp	.+32     	; 0xe1e <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
 dfe:	f9 01       	movw	r30, r18
 e00:	ee 0f       	add	r30, r30
 e02:	ff 1f       	adc	r31, r31
 e04:	22 0f       	add	r18, r18
 e06:	33 1f       	adc	r19, r19
 e08:	22 0f       	add	r18, r18
 e0a:	33 1f       	adc	r19, r19
 e0c:	22 0f       	add	r18, r18
 e0e:	33 1f       	adc	r19, r19
 e10:	e2 0f       	add	r30, r18
 e12:	f3 1f       	adc	r31, r19
 e14:	ea 0f       	add	r30, r26
 e16:	fb 1f       	adc	r31, r27
 e18:	24 85       	ldd	r18, Z+12	; 0x0c
 e1a:	23 30       	cpi	r18, 0x03	; 3
 e1c:	41 f4       	brne	.+16     	; 0xe2e <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
 e1e:	cf 5f       	subi	r28, 0xFF	; 255
 e20:	2c 2f       	mov	r18, r28
 e22:	30 e0       	ldi	r19, 0x00	; 0
 e24:	28 17       	cp	r18, r24
 e26:	39 07       	cpc	r19, r25
 e28:	b4 f2       	brlt	.-84     	; 0xdd6 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
 e2a:	21 e0       	ldi	r18, 0x01	; 1
 e2c:	01 c0       	rjmp	.+2      	; 0xe30 <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
 e2e:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
 e30:	22 23       	and	r18, r18
 e32:	39 f0       	breq	.+14     	; 0xe42 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
 e34:	fd 01       	movw	r30, r26
 e36:	e7 0f       	add	r30, r23
 e38:	f1 1d       	adc	r31, r1
 e3a:	e4 58       	subi	r30, 0x84	; 132
 e3c:	ff 4f       	sbci	r31, 0xFF	; 255
 e3e:	21 e0       	ldi	r18, 0x01	; 1
 e40:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
 e42:	9c 01       	movw	r18, r24
 e44:	22 0f       	add	r18, r18
 e46:	33 1f       	adc	r19, r19
 e48:	22 0f       	add	r18, r18
 e4a:	33 1f       	adc	r19, r19
 e4c:	22 0f       	add	r18, r18
 e4e:	33 1f       	adc	r19, r19
 e50:	fc 01       	movw	r30, r24
 e52:	ee 0f       	add	r30, r30
 e54:	ff 1f       	adc	r31, r31
 e56:	e2 0f       	add	r30, r18
 e58:	f3 1f       	adc	r31, r19
 e5a:	ea 0f       	add	r30, r26
 e5c:	fb 1f       	adc	r31, r27
 e5e:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 e60:	29 c0       	rjmp	.+82     	; 0xeb4 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
 e62:	46 2f       	mov	r20, r22
 e64:	50 e0       	ldi	r21, 0x00	; 0
 e66:	84 17       	cp	r24, r20
 e68:	95 07       	cpc	r25, r21
 e6a:	19 f1       	breq	.+70     	; 0xeb2 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
 e6c:	9a 01       	movw	r18, r20
 e6e:	2f 5f       	subi	r18, 0xFF	; 255
 e70:	3f 4f       	sbci	r19, 0xFF	; 255
 e72:	f9 01       	movw	r30, r18
 e74:	ee 0f       	add	r30, r30
 e76:	ff 1f       	adc	r31, r31
 e78:	22 0f       	add	r18, r18
 e7a:	33 1f       	adc	r19, r19
 e7c:	22 0f       	add	r18, r18
 e7e:	33 1f       	adc	r19, r19
 e80:	22 0f       	add	r18, r18
 e82:	33 1f       	adc	r19, r19
 e84:	e2 0f       	add	r30, r18
 e86:	f3 1f       	adc	r31, r19
 e88:	ea 0f       	add	r30, r26
 e8a:	fb 1f       	adc	r31, r27
 e8c:	20 81       	ld	r18, Z
 e8e:	c2 13       	cpse	r28, r18
 e90:	10 c0       	rjmp	.+32     	; 0xeb2 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
 e92:	fa 01       	movw	r30, r20
 e94:	ee 0f       	add	r30, r30
 e96:	ff 1f       	adc	r31, r31
 e98:	44 0f       	add	r20, r20
 e9a:	55 1f       	adc	r21, r21
 e9c:	44 0f       	add	r20, r20
 e9e:	55 1f       	adc	r21, r21
 ea0:	44 0f       	add	r20, r20
 ea2:	55 1f       	adc	r21, r21
 ea4:	e4 0f       	add	r30, r20
 ea6:	f5 1f       	adc	r31, r21
 ea8:	ea 0f       	add	r30, r26
 eaa:	fb 1f       	adc	r31, r27
 eac:	24 85       	ldd	r18, Z+12	; 0x0c
 eae:	23 30       	cpi	r18, 0x03	; 3
 eb0:	41 f4       	brne	.+16     	; 0xec2 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 eb2:	6f 5f       	subi	r22, 0xFF	; 255
 eb4:	12 96       	adiw	r26, 0x02	; 2
 eb6:	2c 91       	ld	r18, X
 eb8:	12 97       	sbiw	r26, 0x02	; 2
 eba:	62 17       	cp	r22, r18
 ebc:	90 f2       	brcs	.-92     	; 0xe62 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
 ebe:	81 e0       	ldi	r24, 0x01	; 1
 ec0:	01 c0       	rjmp	.+2      	; 0xec4 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
 ec2:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
 ec4:	88 23       	and	r24, r24
 ec6:	41 f0       	breq	.+16     	; 0xed8 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
 ec8:	fd 01       	movw	r30, r26
 eca:	ec 0f       	add	r30, r28
 ecc:	f1 1d       	adc	r31, r1
 ece:	e4 58       	subi	r30, 0x84	; 132
 ed0:	ff 4f       	sbci	r31, 0xFF	; 255
 ed2:	81 e0       	ldi	r24, 0x01	; 1
 ed4:	80 83       	st	Z, r24
 ed6:	06 c0       	rjmp	.+12     	; 0xee4 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
 ed8:	fd 01       	movw	r30, r26
 eda:	ec 0f       	add	r30, r28
 edc:	f1 1d       	adc	r31, r1
 ede:	e4 58       	subi	r30, 0x84	; 132
 ee0:	ff 4f       	sbci	r31, 0xFF	; 255
 ee2:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
 ee4:	8c 2f       	mov	r24, r28
 ee6:	90 e0       	ldi	r25, 0x00	; 0
 ee8:	87 1b       	sub	r24, r23
 eea:	91 09       	sbc	r25, r1
 eec:	02 97       	sbiw	r24, 0x02	; 2
 eee:	64 f0       	brlt	.+24     	; 0xf08 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 ef0:	7f 5f       	subi	r23, 0xFF	; 255
 ef2:	08 c0       	rjmp	.+16     	; 0xf04 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
 ef4:	fd 01       	movw	r30, r26
 ef6:	e7 0f       	add	r30, r23
 ef8:	f1 1d       	adc	r31, r1
 efa:	e4 58       	subi	r30, 0x84	; 132
 efc:	ff 4f       	sbci	r31, 0xFF	; 255
 efe:	81 e0       	ldi	r24, 0x01	; 1
 f00:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f02:	7f 5f       	subi	r23, 0xFF	; 255
 f04:	7c 17       	cp	r23, r28
 f06:	b0 f3       	brcs	.-20     	; 0xef4 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
 f08:	cf 91       	pop	r28
 f0a:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00000bec <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
 bec:	af 92       	push	r10
 bee:	bf 92       	push	r11
 bf0:	cf 92       	push	r12
 bf2:	df 92       	push	r13
 bf4:	ef 92       	push	r14
 bf6:	ff 92       	push	r15
 bf8:	0f 93       	push	r16
 bfa:	1f 93       	push	r17
 bfc:	cf 93       	push	r28
 bfe:	df 93       	push	r29
 c00:	ec 01       	movw	r28, r24
 c02:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
 c04:	68 83       	st	Y, r22
    state->nCollections=nCollections;
 c06:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 c08:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
 c0a:	00 e0       	ldi	r16, 0x00	; 0
 c0c:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
 c0e:	8f c0       	rjmp	.+286    	; 0xd2e <mrpp_state_init+0x142>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
 c10:	ed 2d       	mov	r30, r13
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	cf 01       	movw	r24, r30
 c16:	88 0f       	add	r24, r24
 c18:	99 1f       	adc	r25, r25
 c1a:	88 0f       	add	r24, r24
 c1c:	99 1f       	adc	r25, r25
 c1e:	8e 0f       	add	r24, r30
 c20:	9f 1f       	adc	r25, r31
 c22:	84 0f       	add	r24, r20
 c24:	95 1f       	adc	r25, r21
 c26:	dc 01       	movw	r26, r24
 c28:	12 96       	adiw	r26, 0x02	; 2
 c2a:	6d 91       	ld	r22, X+
 c2c:	7c 91       	ld	r23, X
 c2e:	13 97       	sbiw	r26, 0x03	; 3
 c30:	df 01       	movw	r26, r30
 c32:	aa 0f       	add	r26, r26
 c34:	bb 1f       	adc	r27, r27
 c36:	9f 01       	movw	r18, r30
 c38:	22 0f       	add	r18, r18
 c3a:	33 1f       	adc	r19, r19
 c3c:	22 0f       	add	r18, r18
 c3e:	33 1f       	adc	r19, r19
 c40:	22 0f       	add	r18, r18
 c42:	33 1f       	adc	r19, r19
 c44:	a2 0f       	add	r26, r18
 c46:	b3 1f       	adc	r27, r19
 c48:	5d 01       	movw	r10, r26
 c4a:	ac 0e       	add	r10, r28
 c4c:	bd 1e       	adc	r11, r29
 c4e:	d5 01       	movw	r26, r10
 c50:	19 96       	adiw	r26, 0x09	; 9
 c52:	7c 93       	st	X, r23
 c54:	6e 93       	st	-X, r22
 c56:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
 c58:	dc 01       	movw	r26, r24
 c5a:	14 96       	adiw	r26, 0x04	; 4
 c5c:	2c 91       	ld	r18, X
 c5e:	d5 01       	movw	r26, r10
 c60:	17 96       	adiw	r26, 0x07	; 7
 c62:	2c 93       	st	X, r18
 c64:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
 c66:	14 96       	adiw	r26, 0x04	; 4
 c68:	1c 93       	st	X, r17
 c6a:	0e 93       	st	-X, r16
 c6c:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
 c6e:	dc 01       	movw	r26, r24
 c70:	2d 91       	ld	r18, X+
 c72:	3c 91       	ld	r19, X
 c74:	11 97       	sbiw	r26, 0x01	; 1
 c76:	14 96       	adiw	r26, 0x04	; 4
 c78:	8c 91       	ld	r24, X
 c7a:	82 9f       	mul	r24, r18
 c7c:	70 01       	movw	r14, r0
 c7e:	83 9f       	mul	r24, r19
 c80:	f0 0c       	add	r15, r0
 c82:	11 24       	eor	r1, r1
 c84:	b6 e0       	ldi	r27, 0x06	; 6
 c86:	eb 0e       	add	r14, r27
 c88:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
 c8a:	d5 01       	movw	r26, r10
 c8c:	16 96       	adiw	r26, 0x06	; 6
 c8e:	fc 92       	st	X, r15
 c90:	ee 92       	st	-X, r14
 c92:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
 c94:	98 01       	movw	r18, r16
 c96:	ab ea       	ldi	r26, 0xAB	; 171
 c98:	ba ea       	ldi	r27, 0xAA	; 170
 c9a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__umulhisi3>
 c9e:	96 95       	lsr	r25
 ca0:	87 95       	ror	r24
 ca2:	92 95       	swap	r25
 ca4:	82 95       	swap	r24
 ca6:	8f 70       	andi	r24, 0x0F	; 15
 ca8:	89 27       	eor	r24, r25
 caa:	9f 70       	andi	r25, 0x0F	; 15
 cac:	89 27       	eor	r24, r25
 cae:	9f 01       	movw	r18, r30
 cb0:	2f 5f       	subi	r18, 0xFF	; 255
 cb2:	3f 4f       	sbci	r19, 0xFF	; 255
 cb4:	d9 01       	movw	r26, r18
 cb6:	aa 0f       	add	r26, r26
 cb8:	bb 1f       	adc	r27, r27
 cba:	22 0f       	add	r18, r18
 cbc:	33 1f       	adc	r19, r19
 cbe:	22 0f       	add	r18, r18
 cc0:	33 1f       	adc	r19, r19
 cc2:	22 0f       	add	r18, r18
 cc4:	33 1f       	adc	r19, r19
 cc6:	a2 0f       	add	r26, r18
 cc8:	b3 1f       	adc	r27, r19
 cca:	ac 0f       	add	r26, r28
 ccc:	bd 1f       	adc	r27, r29
 cce:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
 cd0:	0e 0d       	add	r16, r14
 cd2:	1f 1d       	adc	r17, r15
 cd4:	98 01       	movw	r18, r16
 cd6:	ab ea       	ldi	r26, 0xAB	; 171
 cd8:	ba ea       	ldi	r27, 0xAA	; 170
 cda:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__umulhisi3>
 cde:	7c 01       	movw	r14, r24
 ce0:	f6 94       	lsr	r15
 ce2:	e7 94       	ror	r14
 ce4:	f6 94       	lsr	r15
 ce6:	e7 94       	ror	r14
 ce8:	f6 94       	lsr	r15
 cea:	e7 94       	ror	r14
 cec:	f6 94       	lsr	r15
 cee:	e7 94       	ror	r14
 cf0:	f6 94       	lsr	r15
 cf2:	e7 94       	ror	r14
 cf4:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
 cf6:	20 e3       	ldi	r18, 0x30	; 48
 cf8:	2e 9d       	mul	r18, r14
 cfa:	c0 01       	movw	r24, r0
 cfc:	2f 9d       	mul	r18, r15
 cfe:	90 0d       	add	r25, r0
 d00:	11 24       	eor	r1, r1
 d02:	08 17       	cp	r16, r24
 d04:	19 07       	cpc	r17, r25
 d06:	19 f4       	brne	.+6      	; 0xd0e <mrpp_state_init+0x122>
 d08:	bb 24       	eor	r11, r11
 d0a:	ba 94       	dec	r11
 d0c:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
 d0e:	cf 01       	movw	r24, r30
 d10:	88 0f       	add	r24, r24
 d12:	99 1f       	adc	r25, r25
 d14:	ee 0f       	add	r30, r30
 d16:	ff 1f       	adc	r31, r31
 d18:	ee 0f       	add	r30, r30
 d1a:	ff 1f       	adc	r31, r31
 d1c:	ee 0f       	add	r30, r30
 d1e:	ff 1f       	adc	r31, r31
 d20:	e8 0f       	add	r30, r24
 d22:	f9 1f       	adc	r31, r25
 d24:	ec 0f       	add	r30, r28
 d26:	fd 1f       	adc	r31, r29
 d28:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
 d2a:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 d2c:	d3 94       	inc	r13
 d2e:	dc 14       	cp	r13, r12
 d30:	08 f4       	brcc	.+2      	; 0xd34 <mrpp_state_init+0x148>
 d32:	6e cf       	rjmp	.-292    	; 0xc10 <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
 d34:	98 01       	movw	r18, r16
 d36:	ab ea       	ldi	r26, 0xAB	; 171
 d38:	ba ea       	ldi	r27, 0xAA	; 170
 d3a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__umulhisi3>
 d3e:	fc 01       	movw	r30, r24
 d40:	f6 95       	lsr	r31
 d42:	e7 95       	ror	r30
 d44:	f2 95       	swap	r31
 d46:	e2 95       	swap	r30
 d48:	ef 70       	andi	r30, 0x0F	; 15
 d4a:	ef 27       	eor	r30, r31
 d4c:	ff 70       	andi	r31, 0x0F	; 15
 d4e:	ef 27       	eor	r30, r31
 d50:	4e 2f       	mov	r20, r30
 d52:	52 e0       	ldi	r21, 0x02	; 2
 d54:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
 d56:	20 e3       	ldi	r18, 0x30	; 48
 d58:	2e 9f       	mul	r18, r30
 d5a:	c0 01       	movw	r24, r0
 d5c:	2f 9f       	mul	r18, r31
 d5e:	90 0d       	add	r25, r0
 d60:	11 24       	eor	r1, r1
 d62:	08 1b       	sub	r16, r24
 d64:	19 0b       	sbc	r17, r25
 d66:	11 f4       	brne	.+4      	; 0xd6c <mrpp_state_init+0x180>
 d68:	51 e0       	ldi	r21, 0x01	; 1
 d6a:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
 d6c:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
 d6e:	01 2b       	or	r16, r17
 d70:	11 f0       	breq	.+4      	; 0xd76 <mrpp_state_init+0x18a>
 d72:	41 e0       	ldi	r20, 0x01	; 1
 d74:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
 d76:	fe 01       	movw	r30, r28
 d78:	e5 58       	subi	r30, 0x85	; 133
 d7a:	ff 4f       	sbci	r31, 0xFF	; 255
 d7c:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
 d7e:	80 e0       	ldi	r24, 0x00	; 0
 d80:	07 c0       	rjmp	.+14     	; 0xd90 <mrpp_state_init+0x1a4>
    {
        state->bodies[i]=WAITING;
 d82:	fe 01       	movw	r30, r28
 d84:	e8 0f       	add	r30, r24
 d86:	f1 1d       	adc	r31, r1
 d88:	e4 58       	subi	r30, 0x84	; 132
 d8a:	ff 4f       	sbci	r31, 0xFF	; 255
 d8c:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
 d8e:	8f 5f       	subi	r24, 0xFF	; 255
 d90:	84 17       	cp	r24, r20
 d92:	b8 f3       	brcs	.-18     	; 0xd82 <mrpp_state_init+0x196>
    {
        state->bodies[i]=WAITING;
    }
}
 d94:	df 91       	pop	r29
 d96:	cf 91       	pop	r28
 d98:	1f 91       	pop	r17
 d9a:	0f 91       	pop	r16
 d9c:	ff 90       	pop	r15
 d9e:	ef 90       	pop	r14
 da0:	df 90       	pop	r13
 da2:	cf 90       	pop	r12
 da4:	bf 90       	pop	r11
 da6:	af 90       	pop	r10
 da8:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

000017f6 <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	8c 01       	movw	r16, r24
    1800:	eb 01       	movw	r28, r22
    package[0]=0;
    1802:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    1804:	fc 01       	movw	r30, r24
    1806:	81 81       	ldd	r24, Z+1	; 0x01
    1808:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    180a:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    180c:	c8 01       	movw	r24, r16
    180e:	0e 94 c0 09 	call	0x1380	; 0x1380 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	35 c0       	rjmp	.+106    	; 0x1880 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1816:	82 2f       	mov	r24, r18
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	dc 01       	movw	r26, r24
    181c:	aa 0f       	add	r26, r26
    181e:	bb 1f       	adc	r27, r27
    1820:	aa 0f       	add	r26, r26
    1822:	bb 1f       	adc	r27, r27
    1824:	ad 01       	movw	r20, r26
    1826:	4a 5f       	subi	r20, 0xFA	; 250
    1828:	5f 4f       	sbci	r21, 0xFF	; 255
    182a:	4c 0f       	add	r20, r28
    182c:	5d 1f       	adc	r21, r29
    182e:	fc 01       	movw	r30, r24
    1830:	ee 0f       	add	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	e8 0f       	add	r30, r24
    1842:	f9 1f       	adc	r31, r25
    1844:	bf 01       	movw	r22, r30
    1846:	60 0f       	add	r22, r16
    1848:	71 1f       	adc	r23, r17
    184a:	fb 01       	movw	r30, r22
    184c:	84 81       	ldd	r24, Z+4	; 0x04
    184e:	fa 01       	movw	r30, r20
    1850:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1852:	cd 01       	movw	r24, r26
    1854:	07 96       	adiw	r24, 0x07	; 7
    1856:	8c 0f       	add	r24, r28
    1858:	9d 1f       	adc	r25, r29
    185a:	fb 01       	movw	r30, r22
    185c:	33 81       	ldd	r19, Z+3	; 0x03
    185e:	fc 01       	movw	r30, r24
    1860:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1862:	cd 01       	movw	r24, r26
    1864:	08 96       	adiw	r24, 0x08	; 8
    1866:	8c 0f       	add	r24, r28
    1868:	9d 1f       	adc	r25, r29
    186a:	fb 01       	movw	r30, r22
    186c:	36 81       	ldd	r19, Z+6	; 0x06
    186e:	fc 01       	movw	r30, r24
    1870:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1872:	19 96       	adiw	r26, 0x09	; 9
    1874:	ac 0f       	add	r26, r28
    1876:	bd 1f       	adc	r27, r29
    1878:	fb 01       	movw	r30, r22
    187a:	85 81       	ldd	r24, Z+5	; 0x05
    187c:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    187e:	2f 5f       	subi	r18, 0xFF	; 255
    1880:	f8 01       	movw	r30, r16
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	28 17       	cp	r18, r24
    1886:	38 f2       	brcs	.-114    	; 0x1816 <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1888:	88 0f       	add	r24, r24
    188a:	88 0f       	add	r24, r24
}
    188c:	8a 5f       	subi	r24, 0xFA	; 250
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00001752 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	8c 01       	movw	r16, r24
    175c:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    175e:	fc 01       	movw	r30, r24
    1760:	81 81       	ldd	r24, Z+1	; 0x01
    1762:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    1764:	81 81       	ldd	r24, Z+1	; 0x01
    1766:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1768:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    176a:	c8 01       	movw	r24, r16
    176c:	0e 94 c0 09 	call	0x1380	; 0x1380 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	35 c0       	rjmp	.+106    	; 0x17de <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1774:	82 2f       	mov	r24, r18
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	dc 01       	movw	r26, r24
    177a:	aa 0f       	add	r26, r26
    177c:	bb 1f       	adc	r27, r27
    177e:	aa 0f       	add	r26, r26
    1780:	bb 1f       	adc	r27, r27
    1782:	ad 01       	movw	r20, r26
    1784:	4a 5f       	subi	r20, 0xFA	; 250
    1786:	5f 4f       	sbci	r21, 0xFF	; 255
    1788:	4c 0f       	add	r20, r28
    178a:	5d 1f       	adc	r21, r29
    178c:	fc 01       	movw	r30, r24
    178e:	ee 0f       	add	r30, r30
    1790:	ff 1f       	adc	r31, r31
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	e8 0f       	add	r30, r24
    17a0:	f9 1f       	adc	r31, r25
    17a2:	bf 01       	movw	r22, r30
    17a4:	60 0f       	add	r22, r16
    17a6:	71 1f       	adc	r23, r17
    17a8:	fb 01       	movw	r30, r22
    17aa:	84 81       	ldd	r24, Z+4	; 0x04
    17ac:	fa 01       	movw	r30, r20
    17ae:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    17b0:	cd 01       	movw	r24, r26
    17b2:	07 96       	adiw	r24, 0x07	; 7
    17b4:	8c 0f       	add	r24, r28
    17b6:	9d 1f       	adc	r25, r29
    17b8:	fb 01       	movw	r30, r22
    17ba:	33 81       	ldd	r19, Z+3	; 0x03
    17bc:	fc 01       	movw	r30, r24
    17be:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    17c0:	cd 01       	movw	r24, r26
    17c2:	08 96       	adiw	r24, 0x08	; 8
    17c4:	8c 0f       	add	r24, r28
    17c6:	9d 1f       	adc	r25, r29
    17c8:	fb 01       	movw	r30, r22
    17ca:	36 81       	ldd	r19, Z+6	; 0x06
    17cc:	fc 01       	movw	r30, r24
    17ce:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    17d0:	19 96       	adiw	r26, 0x09	; 9
    17d2:	ac 0f       	add	r26, r28
    17d4:	bd 1f       	adc	r27, r29
    17d6:	fb 01       	movw	r30, r22
    17d8:	85 81       	ldd	r24, Z+5	; 0x05
    17da:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    17dc:	2f 5f       	subi	r18, 0xFF	; 255
    17de:	f8 01       	movw	r30, r16
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	28 17       	cp	r18, r24
    17e4:	38 f2       	brcs	.-114    	; 0x1774 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    17e6:	88 0f       	add	r24, r24
    17e8:	88 0f       	add	r24, r24
}
    17ea:	8a 5f       	subi	r24, 0xFA	; 250
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00001afa <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    1b04:	a6 2f       	mov	r26, r22
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	11 97       	sbiw	r26, 0x01	; 1
    1b0a:	fd 01       	movw	r30, r26
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	cd 01       	movw	r24, r26
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	e8 0f       	add	r30, r24
    1b20:	f9 1f       	adc	r31, r25
    1b22:	e0 0f       	add	r30, r16
    1b24:	f1 1f       	adc	r31, r17
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0a c0       	rjmp	.+20     	; 0x1b42 <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    1b2e:	e9 2f       	mov	r30, r25
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	e9 01       	movw	r28, r18
    1b34:	ce 0f       	add	r28, r30
    1b36:	df 1f       	adc	r29, r31
    1b38:	e4 0f       	add	r30, r20
    1b3a:	f5 1f       	adc	r31, r21
    1b3c:	80 81       	ld	r24, Z
    1b3e:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    1b40:	9f 5f       	subi	r25, 0xFF	; 255
    1b42:	94 30       	cpi	r25, 0x04	; 4
    1b44:	a0 f3       	brcs	.-24     	; 0x1b2e <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    1b46:	cd 01       	movw	r24, r26
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	aa 0f       	add	r26, r26
    1b4e:	bb 1f       	adc	r27, r27
    1b50:	aa 0f       	add	r26, r26
    1b52:	bb 1f       	adc	r27, r27
    1b54:	aa 0f       	add	r26, r26
    1b56:	bb 1f       	adc	r27, r27
    1b58:	a8 0f       	add	r26, r24
    1b5a:	b9 1f       	adc	r27, r25
    1b5c:	a0 0f       	add	r26, r16
    1b5e:	b1 1f       	adc	r27, r17
    1b60:	19 96       	adiw	r26, 0x09	; 9
    1b62:	8c 91       	ld	r24, X
    1b64:	19 97       	sbiw	r26, 0x09	; 9
    1b66:	f9 01       	movw	r30, r18
    1b68:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    1b6a:	18 96       	adiw	r26, 0x08	; 8
    1b6c:	8c 91       	ld	r24, X
    1b6e:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    1b70:	c8 01       	movw	r24, r16
    1b72:	0e 94 d5 06 	call	0xdaa	; 0xdaa <update_bodies>
}
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00002c7a <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    2c7a:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0b c0       	rjmp	.+22     	; 0x2c96 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    2c80:	29 2f       	mov	r18, r25
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	fa 01       	movw	r30, r20
    2c86:	e2 0f       	add	r30, r18
    2c88:	f3 1f       	adc	r31, r19
    2c8a:	e4 58       	subi	r30, 0x84	; 132
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	80 81       	ld	r24, Z
    2c90:	81 30       	cpi	r24, 0x01	; 1
    2c92:	49 f0       	breq	.+18     	; 0x2ca6 <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    2c94:	9f 5f       	subi	r25, 0xFF	; 255
    2c96:	fa 01       	movw	r30, r20
    2c98:	e5 58       	subi	r30, 0x85	; 133
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	80 81       	ld	r24, Z
    2c9e:	98 17       	cp	r25, r24
    2ca0:	78 f3       	brcs	.-34     	; 0x2c80 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    2ca2:	2f ef       	ldi	r18, 0xFF	; 255
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    2ca6:	c9 01       	movw	r24, r18
    2ca8:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00002d32 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    2d32:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    2d36:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    2d38:	0a c0       	rjmp	.+20     	; 0x2d4e <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    2d3a:	f9 01       	movw	r30, r18
    2d3c:	e9 0f       	add	r30, r25
    2d3e:	f1 1d       	adc	r31, r1
    2d40:	e4 58       	subi	r30, 0x84	; 132
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	40 81       	ld	r20, Z
    2d46:	42 30       	cpi	r20, 0x02	; 2
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    2d4c:	9f 5f       	subi	r25, 0xFF	; 255
    2d4e:	f9 01       	movw	r30, r18
    2d50:	e5 58       	subi	r30, 0x85	; 133
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	40 81       	ld	r20, Z
    2d56:	94 17       	cp	r25, r20
    2d58:	80 f3       	brcs	.-32     	; 0x2d3a <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    2d5a:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

0000116e <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    116e:	8f 92       	push	r8
    1170:	9f 92       	push	r9
    1172:	af 92       	push	r10
    1174:	bf 92       	push	r11
    1176:	cf 92       	push	r12
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	ec 01       	movw	r28, r24
    1188:	6b 01       	movw	r12, r22
    118a:	4a 01       	movw	r8, r20
    118c:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    118e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    1192:	8f 3f       	cpi	r24, 0xFF	; 255
    1194:	2f ef       	ldi	r18, 0xFF	; 255
    1196:	92 07       	cpc	r25, r18
    1198:	09 f4       	brne	.+2      	; 0x119c <mrpp_state_get_ready_body+0x2e>
    119a:	66 c0       	rjmp	.+204    	; 0x1268 <mrpp_state_get_ready_body+0xfa>
    119c:	8c 15       	cp	r24, r12
    119e:	9d 05       	cpc	r25, r13
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <mrpp_state_get_ready_body+0x36>
    11a2:	64 c0       	rjmp	.+200    	; 0x126c <mrpp_state_get_ready_body+0xfe>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	09 c0       	rjmp	.+18     	; 0x11ba <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    11a8:	fe 01       	movw	r30, r28
    11aa:	e8 0f       	add	r30, r24
    11ac:	f1 1d       	adc	r31, r1
    11ae:	e4 58       	subi	r30, 0x84	; 132
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	90 81       	ld	r25, Z
    11b4:	91 30       	cpi	r25, 0x01	; 1
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	fe 01       	movw	r30, r28
    11bc:	e5 58       	subi	r30, 0x85	; 133
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	90 81       	ld	r25, Z
    11c2:	89 17       	cp	r24, r25
    11c4:	88 f3       	brcs	.-30     	; 0x11a8 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	98 0f       	add	r25, r24
    11cc:	f4 01       	movw	r30, r8
    11ce:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    11d0:	99 81       	ldd	r25, Y+1	; 0x01
    11d2:	f5 01       	movw	r30, r10
    11d4:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	40 e3       	ldi	r20, 0x30	; 48
    11da:	48 9f       	mul	r20, r24
    11dc:	90 01       	movw	r18, r0
    11de:	49 9f       	mul	r20, r25
    11e0:	30 0d       	add	r19, r0
    11e2:	11 24       	eor	r1, r1
    11e4:	f8 01       	movw	r30, r16
    11e6:	31 83       	std	Z+1, r19	; 0x01
    11e8:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    11ea:	fe 01       	movw	r30, r28
    11ec:	e5 58       	subi	r30, 0x85	; 133
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	20 81       	ld	r18, Z
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	21 50       	subi	r18, 0x01	; 1
    11f6:	31 09       	sbc	r19, r1
    11f8:	82 17       	cp	r24, r18
    11fa:	93 07       	cpc	r25, r19
    11fc:	2c f4       	brge	.+10     	; 0x1208 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    11fe:	80 e3       	ldi	r24, 0x30	; 48
    1200:	f7 01       	movw	r30, r14
    1202:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	33 c0       	rjmp	.+102    	; 0x126e <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	9c 01       	movw	r18, r24
    1210:	22 0f       	add	r18, r18
    1212:	33 1f       	adc	r19, r19
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	82 0f       	add	r24, r18
    1222:	93 1f       	adc	r25, r19
    1224:	c8 0f       	add	r28, r24
    1226:	d9 1f       	adc	r29, r25
    1228:	4b 81       	ldd	r20, Y+3	; 0x03
    122a:	5c 81       	ldd	r21, Y+4	; 0x04
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	48 0f       	add	r20, r24
    1232:	59 1f       	adc	r21, r25
    1234:	9a 01       	movw	r18, r20
    1236:	ab ea       	ldi	r26, 0xAB	; 171
    1238:	ba ea       	ldi	r27, 0xAA	; 170
    123a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__umulhisi3>
    123e:	96 95       	lsr	r25
    1240:	87 95       	ror	r24
    1242:	92 95       	swap	r25
    1244:	82 95       	swap	r24
    1246:	8f 70       	andi	r24, 0x0F	; 15
    1248:	89 27       	eor	r24, r25
    124a:	9f 70       	andi	r25, 0x0F	; 15
    124c:	89 27       	eor	r24, r25
    124e:	60 e3       	ldi	r22, 0x30	; 48
    1250:	68 9f       	mul	r22, r24
    1252:	90 01       	movw	r18, r0
    1254:	69 9f       	mul	r22, r25
    1256:	30 0d       	add	r19, r0
    1258:	11 24       	eor	r1, r1
    125a:	ca 01       	movw	r24, r20
    125c:	82 1b       	sub	r24, r18
    125e:	93 0b       	sbc	r25, r19
    1260:	f7 01       	movw	r30, r14
    1262:	80 83       	st	Z, r24
    } 
    return true; 
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	03 c0       	rjmp	.+6      	; 0x126e <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	01 c0       	rjmp	.+2      	; 0x126e <mrpp_state_get_ready_body+0x100>
    126c:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	bf 90       	pop	r11
    1280:	af 90       	pop	r10
    1282:	9f 90       	pop	r9
    1284:	8f 90       	pop	r8
    1286:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00002ed2 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	e5 58       	subi	r30, 0x85	; 133
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	20 81       	ld	r18, Z
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	62 17       	cp	r22, r18
    2ede:	73 07       	cpc	r23, r19
    2ee0:	3c f4       	brge	.+14     	; 0x2ef0 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    2ee2:	68 0f       	add	r22, r24
    2ee4:	79 1f       	adc	r23, r25
    2ee6:	fb 01       	movw	r30, r22
    2ee8:	e4 58       	subi	r30, 0x84	; 132
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	82 e0       	ldi	r24, 0x02	; 2
    2eee:	80 83       	st	Z, r24
    2ef0:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

000029ac <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	61 50       	subi	r22, 0x01	; 1
    29b0:	71 09       	sbc	r23, r1
    29b2:	fb 01       	movw	r30, r22
    29b4:	ee 0f       	add	r30, r30
    29b6:	ff 1f       	adc	r31, r31
    29b8:	66 0f       	add	r22, r22
    29ba:	77 1f       	adc	r23, r23
    29bc:	66 0f       	add	r22, r22
    29be:	77 1f       	adc	r23, r23
    29c0:	66 0f       	add	r22, r22
    29c2:	77 1f       	adc	r23, r23
    29c4:	e6 0f       	add	r30, r22
    29c6:	f7 1f       	adc	r31, r23
    29c8:	e8 0f       	add	r30, r24
    29ca:	f9 1f       	adc	r31, r25
    29cc:	83 81       	ldd	r24, Z+3	; 0x03
    29ce:	94 81       	ldd	r25, Z+4	; 0x04
    29d0:	da 01       	movw	r26, r20
    29d2:	8d 93       	st	X+, r24
    29d4:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    29d6:	85 81       	ldd	r24, Z+5	; 0x05
    29d8:	96 81       	ldd	r25, Z+6	; 0x06
    29da:	f9 01       	movw	r30, r18
    29dc:	91 83       	std	Z+1, r25	; 0x01
    29de:	80 83       	st	Z, r24
    29e0:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00002190 <RTC_set_clock_out>:
	uint32_t tsbit;
} tsbit;

const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	00 d0       	rcall	.+0      	; 0x2196 <RTC_set_clock_out+0x6>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    219a:	9d e0       	ldi	r25, 0x0D	; 13
    219c:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	31 f0       	breq	.+12     	; 0x21ae <RTC_set_clock_out+0x1e>
    21a2:	18 f0       	brcs	.+6      	; 0x21aa <RTC_set_clock_out+0x1a>
    21a4:	80 32       	cpi	r24, 0x20	; 32
    21a6:	31 f0       	breq	.+12     	; 0x21b4 <RTC_set_clock_out+0x24>
    21a8:	13 c0       	rjmp	.+38     	; 0x21d0 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    21aa:	1a 82       	std	Y+2, r1	; 0x02
			break;
    21ac:	05 c0       	rjmp	.+10     	; 0x21b8 <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    21ae:	83 e8       	ldi	r24, 0x83	; 131
    21b0:	8a 83       	std	Y+2, r24	; 0x02
			break;
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    21b4:	82 e8       	ldi	r24, 0x82	; 130
    21b6:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    21b8:	ae 01       	movw	r20, r28
    21ba:	4f 5f       	subi	r20, 0xFF	; 255
    21bc:	5f 4f       	sbci	r21, 0xFF	; 255
    21be:	60 e8       	ldi	r22, 0x80	; 128
    21c0:	22 e0       	ldi	r18, 0x02	; 2
    21c2:	81 e5       	ldi	r24, 0x51	; 81
    21c4:	0e 94 8c 18 	call	0x3118	; 0x3118 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    21c8:	88 23       	and	r24, r24
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <RTC_set_clock_out+0x44>
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    21d4:	80 e0       	ldi	r24, 0x00	; 0
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

00002aec <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <RTC_clear_wake_up_interrupt+0x6>
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    2afc:	ae 01       	movw	r20, r28
    2afe:	4f 5f       	subi	r20, 0xFF	; 255
    2b00:	5f 4f       	sbci	r21, 0xFF	; 255
    2b02:	60 e8       	ldi	r22, 0x80	; 128
    2b04:	22 e0       	ldi	r18, 0x02	; 2
    2b06:	81 e5       	ldi	r24, 0x51	; 81
    2b08:	0e 94 8c 18 	call	0x3118	; 0x3118 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2b0c:	88 23       	and	r24, r24
    2b0e:	11 f0       	breq	.+4      	; 0x2b14 <RTC_clear_wake_up_interrupt+0x28>
    2b10:	82 e0       	ldi	r24, 0x02	; 2
    2b12:	01 c0       	rjmp	.+2      	; 0x2b16 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    2b14:	80 e0       	ldi	r24, 0x00	; 0
}
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00000f0c <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	27 97       	sbiw	r28, 0x07	; 7
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	8c 01       	movw	r16, r24
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	41 e1       	ldi	r20, 0x11	; 17
     f2a:	53 e0       	ldi	r21, 0x03	; 3
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	81 e5       	ldi	r24, 0x51	; 81
     f30:	0e 94 21 19 	call	0x3242	; 0x3242 <TWI_API_write_data>
     f34:	81 11       	cpse	r24, r1
     f36:	7c c0       	rjmp	.+248    	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
     f38:	47 e0       	ldi	r20, 0x07	; 7
     f3a:	be 01       	movw	r22, r28
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	81 e5       	ldi	r24, 0x51	; 81
     f42:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <TWI_API_repeat_read_data_stop>
     f46:	81 11       	cpse	r24, r1
     f48:	75 c0       	rjmp	.+234    	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
     f4a:	29 81       	ldd	r18, Y+1	; 0x01
     f4c:	82 2f       	mov	r24, r18
     f4e:	8f 77       	andi	r24, 0x7F	; 127
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	95 95       	asr	r25
     f54:	87 95       	ror	r24
     f56:	95 95       	asr	r25
     f58:	87 95       	ror	r24
     f5a:	95 95       	asr	r25
     f5c:	87 95       	ror	r24
     f5e:	95 95       	asr	r25
     f60:	87 95       	ror	r24
     f62:	88 0f       	add	r24, r24
     f64:	98 2f       	mov	r25, r24
     f66:	99 0f       	add	r25, r25
     f68:	99 0f       	add	r25, r25
     f6a:	89 0f       	add	r24, r25
     f6c:	2f 70       	andi	r18, 0x0F	; 15
     f6e:	82 0f       	add	r24, r18
     f70:	f8 01       	movw	r30, r16
     f72:	80 83       	st	Z, r24
     f74:	2a 81       	ldd	r18, Y+2	; 0x02
     f76:	82 2f       	mov	r24, r18
     f78:	8f 77       	andi	r24, 0x7F	; 127
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	95 95       	asr	r25
     f7e:	87 95       	ror	r24
     f80:	95 95       	asr	r25
     f82:	87 95       	ror	r24
     f84:	95 95       	asr	r25
     f86:	87 95       	ror	r24
     f88:	95 95       	asr	r25
     f8a:	87 95       	ror	r24
     f8c:	88 0f       	add	r24, r24
     f8e:	98 2f       	mov	r25, r24
     f90:	99 0f       	add	r25, r25
     f92:	99 0f       	add	r25, r25
     f94:	89 0f       	add	r24, r25
     f96:	2f 70       	andi	r18, 0x0F	; 15
     f98:	82 0f       	add	r24, r18
     f9a:	81 83       	std	Z+1, r24	; 0x01
     f9c:	2b 81       	ldd	r18, Y+3	; 0x03
     f9e:	82 2f       	mov	r24, r18
     fa0:	8f 73       	andi	r24, 0x3F	; 63
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	95 95       	asr	r25
     fa6:	87 95       	ror	r24
     fa8:	95 95       	asr	r25
     faa:	87 95       	ror	r24
     fac:	95 95       	asr	r25
     fae:	87 95       	ror	r24
     fb0:	95 95       	asr	r25
     fb2:	87 95       	ror	r24
     fb4:	88 0f       	add	r24, r24
     fb6:	98 2f       	mov	r25, r24
     fb8:	99 0f       	add	r25, r25
     fba:	99 0f       	add	r25, r25
     fbc:	89 0f       	add	r24, r25
     fbe:	2f 70       	andi	r18, 0x0F	; 15
     fc0:	82 0f       	add	r24, r18
     fc2:	82 83       	std	Z+2, r24	; 0x02
     fc4:	2c 81       	ldd	r18, Y+4	; 0x04
     fc6:	82 2f       	mov	r24, r18
     fc8:	8f 73       	andi	r24, 0x3F	; 63
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	95 95       	asr	r25
     fce:	87 95       	ror	r24
     fd0:	95 95       	asr	r25
     fd2:	87 95       	ror	r24
     fd4:	95 95       	asr	r25
     fd6:	87 95       	ror	r24
     fd8:	95 95       	asr	r25
     fda:	87 95       	ror	r24
     fdc:	88 0f       	add	r24, r24
     fde:	98 2f       	mov	r25, r24
     fe0:	99 0f       	add	r25, r25
     fe2:	99 0f       	add	r25, r25
     fe4:	89 0f       	add	r24, r25
     fe6:	2f 70       	andi	r18, 0x0F	; 15
     fe8:	82 0f       	add	r24, r18
     fea:	83 83       	std	Z+3, r24	; 0x03
     fec:	2e 81       	ldd	r18, Y+6	; 0x06
     fee:	82 2f       	mov	r24, r18
     ff0:	8f 71       	andi	r24, 0x1F	; 31
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	95 95       	asr	r25
     ff6:	87 95       	ror	r24
     ff8:	95 95       	asr	r25
     ffa:	87 95       	ror	r24
     ffc:	95 95       	asr	r25
     ffe:	87 95       	ror	r24
    1000:	95 95       	asr	r25
    1002:	87 95       	ror	r24
    1004:	88 0f       	add	r24, r24
    1006:	98 2f       	mov	r25, r24
    1008:	99 0f       	add	r25, r25
    100a:	99 0f       	add	r25, r25
    100c:	89 0f       	add	r24, r25
    100e:	2f 70       	andi	r18, 0x0F	; 15
    1010:	82 0f       	add	r24, r18
    1012:	84 83       	std	Z+4, r24	; 0x04
    1014:	8f 81       	ldd	r24, Y+7	; 0x07
    1016:	98 2f       	mov	r25, r24
    1018:	92 95       	swap	r25
    101a:	9f 70       	andi	r25, 0x0F	; 15
    101c:	99 0f       	add	r25, r25
    101e:	29 2f       	mov	r18, r25
    1020:	22 0f       	add	r18, r18
    1022:	22 0f       	add	r18, r18
    1024:	92 0f       	add	r25, r18
    1026:	8f 70       	andi	r24, 0x0F	; 15
    1028:	89 0f       	add	r24, r25
    102a:	85 83       	std	Z+5, r24	; 0x05
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	27 96       	adiw	r28, 0x07	; 7
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

00001526 <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	2d 97       	sbiw	r28, 0x0d	; 13
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    1546:	85 e0       	ldi	r24, 0x05	; 5
    1548:	ec e1       	ldi	r30, 0x1C	; 28
    154a:	f9 e0       	ldi	r31, 0x09	; 9
    154c:	de 01       	movw	r26, r28
    154e:	13 96       	adiw	r26, 0x03	; 3
    1550:	01 90       	ld	r0, Z+
    1552:	0d 92       	st	X+, r0
    1554:	8a 95       	dec	r24
    1556:	e1 f7       	brne	.-8      	; 0x1550 <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    1558:	ce 01       	movw	r24, r28
    155a:	08 96       	adiw	r24, 0x08	; 8
    155c:	0e 94 86 07 	call	0xf0c	; 0xf0c <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    1560:	89 85       	ldd	r24, Y+9	; 0x09
    1562:	81 0f       	add	r24, r17
	dt.minute %= 60;
    1564:	99 e8       	ldi	r25, 0x89	; 137
    1566:	89 9f       	mul	r24, r25
    1568:	91 2d       	mov	r25, r1
    156a:	11 24       	eor	r1, r1
    156c:	92 95       	swap	r25
    156e:	96 95       	lsr	r25
    1570:	97 70       	andi	r25, 0x07	; 7
    1572:	2c e3       	ldi	r18, 0x3C	; 60
    1574:	92 9f       	mul	r25, r18
    1576:	80 19       	sub	r24, r0
    1578:	11 24       	eor	r1, r1
    157a:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    157c:	ae 01       	movw	r20, r28
    157e:	4f 5f       	subi	r20, 0xFF	; 255
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	60 e8       	ldi	r22, 0x80	; 128
    1584:	22 e0       	ldi	r18, 0x02	; 2
    1586:	81 e5       	ldi	r24, 0x51	; 81
    1588:	0e 94 8c 18 	call	0x3118	; 0x3118 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    158c:	81 11       	cpse	r24, r1
    158e:	20 c0       	rjmp	.+64     	; 0x15d0 <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    1590:	99 85       	ldd	r25, Y+9	; 0x09
    1592:	8d ec       	ldi	r24, 0xCD	; 205
    1594:	98 9f       	mul	r25, r24
    1596:	81 2d       	mov	r24, r1
    1598:	11 24       	eor	r1, r1
    159a:	86 95       	lsr	r24
    159c:	86 95       	lsr	r24
    159e:	86 95       	lsr	r24
    15a0:	40 e1       	ldi	r20, 0x10	; 16
    15a2:	84 9f       	mul	r24, r20
    15a4:	90 01       	movw	r18, r0
    15a6:	11 24       	eor	r1, r1
    15a8:	88 0f       	add	r24, r24
    15aa:	38 2f       	mov	r19, r24
    15ac:	33 0f       	add	r19, r19
    15ae:	33 0f       	add	r19, r19
    15b0:	83 0f       	add	r24, r19
    15b2:	98 1b       	sub	r25, r24
    15b4:	92 2b       	or	r25, r18
    15b6:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    15b8:	ae 01       	movw	r20, r28
    15ba:	4d 5f       	subi	r20, 0xFD	; 253
    15bc:	5f 4f       	sbci	r21, 0xFF	; 255
    15be:	60 e8       	ldi	r22, 0x80	; 128
    15c0:	25 e0       	ldi	r18, 0x05	; 5
    15c2:	81 e5       	ldi	r24, 0x51	; 81
    15c4:	0e 94 8c 18 	call	0x3118	; 0x3118 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    15c8:	88 23       	and	r24, r24
    15ca:	21 f0       	breq	.+8      	; 0x15d4 <RTC_set_wake_up_interrupt_minutes+0xae>
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	03 c0       	rjmp	.+6      	; 0x15d6 <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
}
    15d6:	2d 96       	adiw	r28, 0x0d	; 13
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

0000104c <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    104c:	4f 92       	push	r4
    104e:	5f 92       	push	r5
    1050:	6f 92       	push	r6
    1052:	7f 92       	push	r7
    1054:	8f 92       	push	r8
    1056:	9f 92       	push	r9
    1058:	af 92       	push	r10
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	00 d0       	rcall	.+0      	; 0x106e <RTC_datetime_to_ts+0x22>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <RTC_datetime_to_ts+0x24>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <RTC_datetime_to_ts+0x26>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	f9 01       	movw	r30, r18
    1078:	49 2e       	mov	r4, r25
    107a:	51 2c       	mov	r5, r1
    107c:	61 2c       	mov	r6, r1
    107e:	71 2c       	mov	r7, r1
    1080:	03 2e       	mov	r0, r19
    1082:	3a e1       	ldi	r19, 0x1A	; 26
    1084:	44 0c       	add	r4, r4
    1086:	55 1c       	adc	r5, r5
    1088:	66 1c       	adc	r6, r6
    108a:	77 1c       	adc	r7, r7
    108c:	3a 95       	dec	r19
    108e:	d1 f7       	brne	.-12     	; 0x1084 <RTC_datetime_to_ts+0x38>
    1090:	30 2d       	mov	r19, r0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a0 e0       	ldi	r26, 0x00	; 0
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	07 2e       	mov	r0, r23
    109a:	76 e1       	ldi	r23, 0x16	; 22
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	aa 1f       	adc	r26, r26
    10a2:	bb 1f       	adc	r27, r27
    10a4:	7a 95       	dec	r23
    10a6:	d1 f7       	brne	.-12     	; 0x109c <RTC_datetime_to_ts+0x50>
    10a8:	70 2d       	mov	r23, r0
    10aa:	84 29       	or	r24, r4
    10ac:	95 29       	or	r25, r5
    10ae:	a6 29       	or	r26, r6
    10b0:	b7 29       	or	r27, r7
    10b2:	87 2e       	mov	r8, r23
    10b4:	91 2c       	mov	r9, r1
    10b6:	a1 2c       	mov	r10, r1
    10b8:	b1 2c       	mov	r11, r1
    10ba:	07 2e       	mov	r0, r23
    10bc:	71 e1       	ldi	r23, 0x11	; 17
    10be:	88 0c       	add	r8, r8
    10c0:	99 1c       	adc	r9, r9
    10c2:	aa 1c       	adc	r10, r10
    10c4:	bb 1c       	adc	r11, r11
    10c6:	7a 95       	dec	r23
    10c8:	d1 f7       	brne	.-12     	; 0x10be <RTC_datetime_to_ts+0x72>
    10ca:	70 2d       	mov	r23, r0
    10cc:	88 29       	or	r24, r8
    10ce:	99 29       	or	r25, r9
    10d0:	aa 29       	or	r26, r10
    10d2:	bb 29       	or	r27, r11
    10d4:	c6 2e       	mov	r12, r22
    10d6:	d1 2c       	mov	r13, r1
    10d8:	e1 2c       	mov	r14, r1
    10da:	f1 2c       	mov	r15, r1
    10dc:	0b 2e       	mov	r0, r27
    10de:	bc e0       	ldi	r27, 0x0C	; 12
    10e0:	cc 0c       	add	r12, r12
    10e2:	dd 1c       	adc	r13, r13
    10e4:	ee 1c       	adc	r14, r14
    10e6:	ff 1c       	adc	r15, r15
    10e8:	ba 95       	dec	r27
    10ea:	d1 f7       	brne	.-12     	; 0x10e0 <RTC_datetime_to_ts+0x94>
    10ec:	b0 2d       	mov	r27, r0
    10ee:	8c 29       	or	r24, r12
    10f0:	9d 29       	or	r25, r13
    10f2:	ae 29       	or	r26, r14
    10f4:	bf 29       	or	r27, r15
    10f6:	05 2f       	mov	r16, r21
    10f8:	10 e0       	ldi	r17, 0x00	; 0
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	00 0f       	add	r16, r16
    1100:	11 1f       	adc	r17, r17
    1102:	22 1f       	adc	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	00 0f       	add	r16, r16
    1108:	11 1f       	adc	r17, r17
    110a:	22 1f       	adc	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	00 0f       	add	r16, r16
    1110:	11 1f       	adc	r17, r17
    1112:	22 1f       	adc	r18, r18
    1114:	33 1f       	adc	r19, r19
    1116:	00 0f       	add	r16, r16
    1118:	11 1f       	adc	r17, r17
    111a:	22 1f       	adc	r18, r18
    111c:	33 1f       	adc	r19, r19
    111e:	00 0f       	add	r16, r16
    1120:	11 1f       	adc	r17, r17
    1122:	22 1f       	adc	r18, r18
    1124:	33 1f       	adc	r19, r19
    1126:	00 0f       	add	r16, r16
    1128:	11 1f       	adc	r17, r17
    112a:	22 1f       	adc	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	80 2b       	or	r24, r16
    1130:	91 2b       	or	r25, r17
    1132:	a2 2b       	or	r26, r18
    1134:	b3 2b       	or	r27, r19
    1136:	84 2b       	or	r24, r20
    1138:	b0 83       	st	Z, r27
    113a:	a1 83       	std	Z+1, r26	; 0x01
    113c:	92 83       	std	Z+2, r25	; 0x02
    113e:	83 83       	std	Z+3, r24	; 0x03
    1140:	26 96       	adiw	r28, 0x06	; 6
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
    115c:	bf 90       	pop	r11
    115e:	af 90       	pop	r10
    1160:	9f 90       	pop	r9
    1162:	8f 90       	pop	r8
    1164:	7f 90       	pop	r7
    1166:	6f 90       	pop	r6
    1168:	5f 90       	pop	r5
    116a:	4f 90       	pop	r4
    116c:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00002fba <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    2fba:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    2fbc:	54 81       	ldd	r21, Z+4	; 0x04
    2fbe:	43 81       	ldd	r20, Z+3	; 0x03
    2fc0:	31 81       	ldd	r19, Z+1	; 0x01
    2fc2:	20 81       	ld	r18, Z
    2fc4:	65 2f       	mov	r22, r21
    2fc6:	74 2f       	mov	r23, r20
    2fc8:	83 2f       	mov	r24, r19
    2fca:	92 2f       	mov	r25, r18
    2fcc:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fixunssfsi>
}
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	08 95       	ret

Disassembly of section .text.init_measurement:

0000293c <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    293c:	25 e0       	ldi	r18, 0x05	; 5
    293e:	42 e0       	ldi	r20, 0x02	; 2
    2940:	53 e0       	ldi	r21, 0x03	; 3
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	81 e6       	ldi	r24, 0x61	; 97
    2946:	0e 94 8c 18 	call	0x3118	; 0x3118 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    294a:	81 11       	cpse	r24, r1
    294c:	0f c0       	rjmp	.+30     	; 0x296c <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    294e:	25 e0       	ldi	r18, 0x05	; 5
    2950:	47 e0       	ldi	r20, 0x07	; 7
    2952:	53 e0       	ldi	r21, 0x03	; 3
    2954:	60 e0       	ldi	r22, 0x00	; 0
    2956:	81 e6       	ldi	r24, 0x61	; 97
    2958:	0e 94 8c 18 	call	0x3118	; 0x3118 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    295c:	81 11       	cpse	r24, r1
    295e:	08 c0       	rjmp	.+16     	; 0x2970 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    2960:	0e 94 f7 18 	call	0x31ee	; 0x31ee <SCD30_HAL_data_ready>
    2964:	88 23       	and	r24, r24
    2966:	e1 f3       	breq	.-8      	; 0x2960 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    2970:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    2972:	08 95       	ret

Disassembly of section .text.validate_data:

00002bb6 <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    2bbc:	62 e0       	ldi	r22, 0x02	; 2
    2bbe:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <calc_crc8>
	if(data[2]!=crc) return false;
    2bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc4:	89 13       	cpse	r24, r25
    2bc6:	0a c0       	rjmp	.+20     	; 0x2bdc <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    2bc8:	62 e0       	ldi	r22, 0x02	; 2
    2bca:	ce 01       	movw	r24, r28
    2bcc:	03 96       	adiw	r24, 0x03	; 3
    2bce:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <calc_crc8>
	if(data[5]!=crc) return false;
    2bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd4:	89 17       	cp	r24, r25
    2bd6:	21 f0       	breq	.+8      	; 0x2be0 <validate_data+0x2a>
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	03 c0       	rjmp	.+6      	; 0x2be2 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	01 c0       	rjmp	.+2      	; 0x2be2 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
}
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	08 95       	ret

Disassembly of section .text.read_value:

00001898 <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <read_value+0xa>
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <read_value+0xc>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <read_value+0xe>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    18ac:	8f ef       	ldi	r24, 0xFF	; 255
    18ae:	9f ef       	ldi	r25, 0xFF	; 255
    18b0:	f8 01       	movw	r30, r16
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    18b6:	0e 94 f7 18 	call	0x31ee	; 0x31ee <SCD30_HAL_data_ready>
    18ba:	81 11       	cpse	r24, r1
    18bc:	07 c0       	rjmp	.+14     	; 0x18cc <read_value+0x34>
		*value=0xfffe;
    18be:	8e ef       	ldi	r24, 0xFE	; 254
    18c0:	9f ef       	ldi	r25, 0xFF	; 255
    18c2:	f8 01       	movw	r30, r16
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    18c8:	83 e0       	ldi	r24, 0x03	; 3
    18ca:	2c c0       	rjmp	.+88     	; 0x1924 <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    18cc:	22 e0       	ldi	r18, 0x02	; 2
    18ce:	4f e0       	ldi	r20, 0x0F	; 15
    18d0:	53 e0       	ldi	r21, 0x03	; 3
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	81 e6       	ldi	r24, 0x61	; 97
    18d6:	0e 94 8c 18 	call	0x3118	; 0x3118 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    18da:	81 11       	cpse	r24, r1
    18dc:	1e c0       	rjmp	.+60     	; 0x191a <read_value+0x82>
    18de:	8f e3       	ldi	r24, 0x3F	; 63
    18e0:	9f e1       	ldi	r25, 0x1F	; 31
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <read_value+0x4a>
    18e6:	00 c0       	rjmp	.+0      	; 0x18e8 <read_value+0x50>
    18e8:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    18ea:	46 e0       	ldi	r20, 0x06	; 6
    18ec:	be 01       	movw	r22, r28
    18ee:	6f 5f       	subi	r22, 0xFF	; 255
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	81 e6       	ldi	r24, 0x61	; 97
    18f4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    18f8:	81 11       	cpse	r24, r1
    18fa:	11 c0       	rjmp	.+34     	; 0x191e <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    18fc:	ce 01       	movw	r24, r28
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <validate_data>
    1904:	88 23       	and	r24, r24
    1906:	69 f0       	breq	.+26     	; 0x1922 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    1908:	ce 01       	movw	r24, r28
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <bytes_2_uint>
    1910:	f8 01       	movw	r30, r16
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1922:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    1924:	26 96       	adiw	r28, 0x06	; 6
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

000025f4 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    25f4:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <_data>
    25f8:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <_data+0x1>
    25fc:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <cntSamples>
    2600:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <cntSamples+0x1>
    2604:	a9 01       	movw	r20, r18
    2606:	4f 5f       	subi	r20, 0xFF	; 255
    2608:	5f 4f       	sbci	r21, 0xFF	; 255
    260a:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <cntSamples+0x1>
    260e:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <cntSamples>
    2612:	22 0f       	add	r18, r18
    2614:	33 1f       	adc	r19, r19
    2616:	82 0f       	add	r24, r18
    2618:	93 1f       	adc	r25, r19
    261a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <read_value>
	if(cntSamples>=_nSamples){
    261e:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <cntSamples>
    2622:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <cntSamples+0x1>
    2626:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <_nSamples>
    262a:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <_nSamples+0x1>
    262e:	28 17       	cp	r18, r24
    2630:	39 07       	cpc	r19, r25
    2632:	10 f0       	brcs	.+4      	; 0x2638 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    2634:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <TC1_HAL_stop>
    2638:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

000022ca <SCD30_init_sampling>:
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();



SCD30_STATUS SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	ec 01       	movw	r28, r24
	_nSamples=nSamples;
    22d0:	70 93 31 02 	sts	0x0231, r23	; 0x800231 <_nSamples+0x1>
    22d4:	60 93 30 02 	sts	0x0230, r22	; 0x800230 <_nSamples>
	cntSamples=0;
    22d8:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <cntSamples+0x1>
    22dc:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <cntSamples>
	_data=data;
    22e0:	50 93 2f 02 	sts	0x022F, r21	; 0x80022f <_data+0x1>
    22e4:	40 93 2e 02 	sts	0x022E, r20	; 0x80022e <_data>
	
	//Init
	SCD30_HAL_init();
    22e8:	0e 94 b8 18 	call	0x3170	; 0x3170 <SCD30_HAL_init>
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    22ec:	6a ef       	ldi	r22, 0xFA	; 250
    22ee:	72 e1       	ldi	r23, 0x12	; 18
    22f0:	ce 01       	movw	r24, r28
    22f2:	0e 94 42 15 	call	0x2a84	; 0x2a84 <TC1_HAL_init>
	PM_HAL_SCD30_power(true);
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	0e 94 48 18 	call	0x3090	; 0x3090 <PM_HAL_SCD30_power>
    22fc:	2f ef       	ldi	r18, 0xFF	; 255
    22fe:	83 ed       	ldi	r24, 0xD3	; 211
    2300:	90 e3       	ldi	r25, 0x30	; 48
    2302:	21 50       	subi	r18, 0x01	; 1
    2304:	80 40       	sbci	r24, 0x00	; 0
    2306:	90 40       	sbci	r25, 0x00	; 0
    2308:	e1 f7       	brne	.-8      	; 0x2302 <SCD30_init_sampling+0x38>
    230a:	00 c0       	rjmp	.+0      	; 0x230c <SCD30_init_sampling+0x42>
    230c:	00 00       	nop
	_delay_ms(2000);
	
	return init_measurement();
    230e:	0e 94 9e 14 	call	0x293c	; 0x293c <init_measurement>
}
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	08 95       	ret

Disassembly of section .text.SCD30_deinit:

000030e0 <SCD30_deinit>:

void SCD30_deinit(){
	TC1_HAL_stop();
    30e0:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <TC1_HAL_stop>
	PM_HAL_SCD30_power(false);
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	0e 94 48 18 	call	0x3090	; 0x3090 <PM_HAL_SCD30_power>
	_data=NULL;
    30ea:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <_data+0x1>
    30ee:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <_data>
    30f2:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

000031d6 <SCD30_start_sampling>:
	
}

SCD30_STATUS SCD30_start_sampling(){
	vect_SCD_do_sample();
    31d6:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <vect_SCD_do_sample>
	TC1_HAL_start();
    31da:	0e 94 cd 18 	call	0x319a	; 0x319a <TC1_HAL_start>
	return SCD30_STATUS_SUCCESS;
}
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00002f82 <SCD30_is_sampling_done>:

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    2f82:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <cntSamples>
    2f86:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <cntSamples+0x1>
    2f8a:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <_nSamples>
    2f8e:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <_nSamples+0x1>
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	42 17       	cp	r20, r18
    2f96:	53 07       	cpc	r21, r19
    2f98:	08 f4       	brcc	.+2      	; 0x2f9c <SCD30_is_sampling_done+0x1a>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
}
    2f9c:	08 95       	ret

Disassembly of section .text.decode_stage_response:

00003066 <decode_stage_response>:
}
/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    3066:	88 23       	and	r24, r24
    3068:	19 f0       	breq	.+6      	; 0x3070 <decode_stage_response+0xa>
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	29 f0       	breq	.+10     	; 0x3078 <decode_stage_response+0x12>
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    3070:	8a e0       	ldi	r24, 0x0A	; 10
    3072:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    3074:	80 e1       	ldi	r24, 0x10	; 16
    3076:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    3078:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    307a:	08 95       	ret

Disassembly of section .text.decode_join_response:

00002f9e <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    2f9e:	83 30       	cpi	r24, 0x03	; 3
    2fa0:	51 f0       	breq	.+20     	; 0x2fb6 <decode_join_response+0x18>
    2fa2:	84 30       	cpi	r24, 0x04	; 4
    2fa4:	21 f0       	breq	.+8      	; 0x2fae <decode_join_response+0x10>
    2fa6:	81 11       	cpse	r24, r1
    2fa8:	04 c0       	rjmp	.+8      	; 0x2fb2 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_INIT_RTC;
    2faa:	85 e0       	ldi	r24, 0x05	; 5
    2fac:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    2fb2:	80 e1       	ldi	r24, 0x10	; 16
    2fb4:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_INIT_RTC;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    2fb6:	82 e0       	ldi	r24, 0x02	; 2
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    2fb8:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

00003036 <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    3036:	83 30       	cpi	r24, 0x03	; 3
    3038:	31 f0       	breq	.+12     	; 0x3046 <decode_header_tail_response+0x10>
    303a:	85 30       	cpi	r24, 0x05	; 5
    303c:	31 f0       	breq	.+12     	; 0x304a <decode_header_tail_response+0x14>
    303e:	88 23       	and	r24, r24
    3040:	21 f0       	breq	.+8      	; 0x304a <decode_header_tail_response+0x14>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    3042:	80 e1       	ldi	r24, 0x10	; 16
    3044:	08 95       	ret
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    3046:	84 2f       	mov	r24, r20
    3048:	08 95       	ret

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
    304a:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    304c:	08 95       	ret

Disassembly of section .text.join_lora:

00001c04 <join_lora>:
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(4);
}

static LM_STATUS join_lora(){
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	c3 54       	subi	r28, 0x43	; 67
    1c0e:	d1 09       	sbc	r29, r1
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
	char deveui[]="0004A30B00F4547A";
    1c1a:	2e e3       	ldi	r18, 0x3E	; 62
    1c1c:	31 e0       	ldi	r19, 0x01	; 1
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	81 e1       	ldi	r24, 0x11	; 17
    1c22:	f9 01       	movw	r30, r18
    1c24:	de 01       	movw	r26, r28
    1c26:	11 96       	adiw	r26, 0x01	; 1
    1c28:	74 2f       	mov	r23, r20
    1c2a:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__movmemx_qi>
	char appeui[]="70B3D57ED003F844";
    1c2e:	2f e4       	ldi	r18, 0x4F	; 79
    1c30:	31 e0       	ldi	r19, 0x01	; 1
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	81 e1       	ldi	r24, 0x11	; 17
    1c36:	f9 01       	movw	r30, r18
    1c38:	de 01       	movw	r26, r28
    1c3a:	52 96       	adiw	r26, 0x12	; 18
    1c3c:	74 2f       	mov	r23, r20
    1c3e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__movmemx_qi>
	char appkey[]="B88AD6D25A3B27C69A01F74C53F9A179";
    1c42:	20 e6       	ldi	r18, 0x60	; 96
    1c44:	31 e0       	ldi	r19, 0x01	; 1
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	81 e2       	ldi	r24, 0x21	; 33
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	de 01       	movw	r26, r28
    1c4e:	93 96       	adiw	r26, 0x23	; 35
    1c50:	74 2f       	mov	r23, r20
    1c52:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__movmemx_qi>
	
	return LM_join_network(deveui, appeui, appkey);
    1c56:	ae 01       	movw	r20, r28
    1c58:	4d 5d       	subi	r20, 0xDD	; 221
    1c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5c:	be 01       	movw	r22, r28
    1c5e:	6e 5e       	subi	r22, 0xEE	; 238
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	ce 01       	movw	r24, r28
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	0e 94 24 19 	call	0x3248	; 0x3248 <LM_join_network>
}
    1c6a:	cd 5b       	subi	r28, 0xBD	; 189
    1c6c:	df 4f       	sbci	r29, 0xFF	; 255
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

Disassembly of section .text.set_wakeup:

0000322e <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(4);
    322e:	84 e0       	ldi	r24, 0x04	; 4
    3230:	0e 94 93 0a 	call	0x1526	; 0x1526 <RTC_set_wake_up_interrupt_minutes>
}
    3234:	08 95       	ret

Disassembly of section .text.send_header:

0000280e <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    280e:	cf 93       	push	r28
    2810:	df 93       	push	r29
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	e4 97       	sbiw	r28, 0x34	; 52
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    2822:	be 01       	movw	r22, r28
    2824:	6c 5c       	subi	r22, 0xCC	; 204
    2826:	7f 4f       	sbci	r23, 0xFF	; 255
    2828:	ce 01       	movw	r24, r28
    282a:	01 96       	adiw	r24, 0x01	; 1
    282c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    2830:	6c a9       	ldd	r22, Y+52	; 0x34
    2832:	ce 01       	movw	r24, r28
    2834:	01 96       	adiw	r24, 0x01	; 1
    2836:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LM_send_uplink>
}
    283a:	e4 96       	adiw	r28, 0x34	; 52
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

Disassembly of section .text.stage_0:

00001458 <stage_0>:
/************************************************************************/
static STAGE_STATUS stage_0(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
    1458:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <state_s0>
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	29 f1       	breq	.+74     	; 0x14aa <stage_0+0x52>
    1460:	28 f4       	brcc	.+10     	; 0x146c <stage_0+0x14>
    1462:	88 23       	and	r24, r24
    1464:	51 f0       	breq	.+20     	; 0x147a <stage_0+0x22>
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	c1 f0       	breq	.+48     	; 0x149a <stage_0+0x42>
    146a:	f6 cf       	rjmp	.-20     	; 0x1458 <stage_0>
    146c:	84 30       	cpi	r24, 0x04	; 4
    146e:	09 f4       	brne	.+2      	; 0x1472 <stage_0+0x1a>
    1470:	4e c0       	rjmp	.+156    	; 0x150e <stage_0+0xb6>
    1472:	30 f1       	brcs	.+76     	; 0x14c0 <stage_0+0x68>
    1474:	85 30       	cpi	r24, 0x05	; 5
    1476:	81 f1       	breq	.+96     	; 0x14d8 <stage_0+0x80>
    1478:	ef cf       	rjmp	.-34     	; 0x1458 <stage_0>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
    147a:	e1 e2       	ldi	r30, 0x21	; 33
    147c:	f9 e0       	ldi	r31, 0x09	; 9
    147e:	60 81       	ld	r22, Z
    1480:	71 81       	ldd	r23, Z+1	; 0x01
    1482:	40 ee       	ldi	r20, 0xE0	; 224
    1484:	57 e0       	ldi	r21, 0x07	; 7
    1486:	82 81       	ldd	r24, Z+2	; 0x02
    1488:	93 81       	ldd	r25, Z+3	; 0x03
    148a:	0e 94 65 11 	call	0x22ca	; 0x22ca <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    148e:	81 11       	cpse	r24, r1
    1490:	42 c0       	rjmp	.+132    	; 0x1516 <stage_0+0xbe>
			
				state_s0=STAGE_GET_TIME;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <state_s0>
			break;
    1498:	df cf       	rjmp	.-66     	; 0x1458 <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    149a:	86 e1       	ldi	r24, 0x16	; 22
    149c:	99 e0       	ldi	r25, 0x09	; 9
    149e:	0e 94 86 07 	call	0xf0c	; 0xf0c <RTC_get_current_time>
				state_s0=STAGE_START;
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <state_s0>
			break;
    14a8:	d7 cf       	rjmp	.-82     	; 0x1458 <stage_0>
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <ADC_meth_sens_power_on>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    14b0:	81 11       	cpse	r24, r1
    14b2:	33 c0       	rjmp	.+102    	; 0x151a <stage_0+0xc2>
			
				SCD30_start_sampling();
    14b4:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <state_s0>
			break;
    14be:	cc cf       	rjmp	.-104    	; 0x1458 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    14c0:	0e 94 83 18 	call	0x3106	; 0x3106 <ADC_meth_sens_ready>
    14c4:	88 23       	and	r24, r24
    14c6:	59 f1       	breq	.+86     	; 0x151e <stage_0+0xc6>
    14c8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <SCD30_is_sampling_done>
    14cc:	88 23       	and	r24, r24
    14ce:	49 f1       	breq	.+82     	; 0x1522 <stage_0+0xca>
				state_s0=STAGE_UPDATE_MRPP;
    14d0:	85 e0       	ldi	r24, 0x05	; 5
    14d2:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <state_s0>
			break;
    14d6:	c0 cf       	rjmp	.-128    	; 0x1458 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    14d8:	26 e2       	ldi	r18, 0x26	; 38
    14da:	39 e0       	ldi	r19, 0x09	; 9
    14dc:	40 91 16 09 	lds	r20, 0x0916	; 0x800916 <dt>
    14e0:	50 91 17 09 	lds	r21, 0x0917	; 0x800917 <dt+0x1>
    14e4:	60 91 18 09 	lds	r22, 0x0918	; 0x800918 <dt+0x2>
    14e8:	70 91 19 09 	lds	r23, 0x0919	; 0x800919 <dt+0x3>
    14ec:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <dt+0x4>
    14f0:	90 91 1b 09 	lds	r25, 0x091B	; 0x80091b <dt+0x5>
    14f4:	0e 94 26 08 	call	0x104c	; 0x104c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(1, ts, co2_data);
    14f8:	40 ee       	ldi	r20, 0xE0	; 224
    14fa:	57 e0       	ldi	r21, 0x07	; 7
    14fc:	66 e2       	ldi	r22, 0x26	; 38
    14fe:	79 e0       	ldi	r23, 0x09	; 9
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    1506:	84 e0       	ldi	r24, 0x04	; 4
    1508:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <state_s0>
			break;
    150c:	a5 cf       	rjmp	.-182    	; 0x1458 <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit();
    150e:	0e 94 70 18 	call	0x30e0	; 0x30e0 <SCD30_deinit>
				return STAGE_DONE;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	08 95       	ret
				state_s0=STAGE_START;
			break;
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	08 95       	ret
    1522:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit();
				return STAGE_DONE;
			break;
		}
	}
}
    1524:	08 95       	ret

Disassembly of section .text.send_body:

000027ce <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	e4 97       	sbiw	r28, 0x34	; 52
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    27e2:	ae 01       	movw	r20, r28
    27e4:	4c 5c       	subi	r20, 0xCC	; 204
    27e6:	5f 4f       	sbci	r21, 0xFF	; 255
    27e8:	be 01       	movw	r22, r28
    27ea:	6f 5f       	subi	r22, 0xFF	; 255
    27ec:	7f 4f       	sbci	r23, 0xFF	; 255
    27ee:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    27f2:	6c a9       	ldd	r22, Y+52	; 0x34
    27f4:	ce 01       	movw	r24, r28
    27f6:	01 96       	adiw	r24, 0x01	; 1
    27f8:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LM_send_uplink>
}
    27fc:	e4 96       	adiw	r28, 0x34	; 52
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	08 95       	ret

Disassembly of section .text.decode_body_response:

00002e30 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    2e30:	cf 93       	push	r28
	switch(status){
    2e32:	63 30       	cpi	r22, 0x03	; 3
    2e34:	59 f0       	breq	.+22     	; 0x2e4c <decode_body_response+0x1c>
    2e36:	65 30       	cpi	r22, 0x05	; 5
    2e38:	21 f0       	breq	.+8      	; 0x2e42 <decode_body_response+0x12>
    2e3a:	66 23       	and	r22, r22
    2e3c:	11 f0       	breq	.+4      	; 0x2e42 <decode_body_response+0x12>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    2e3e:	80 e1       	ldi	r24, 0x10	; 16
    2e40:	06 c0       	rjmp	.+12     	; 0x2e4e <decode_body_response+0x1e>
    2e42:	c4 2f       	mov	r28, r20

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			MRPP_set_body_sent(bodyIndex);
    2e44:	0e 94 e5 18 	call	0x31ca	; 0x31ca <MRPP_set_body_sent>
			return success;
    2e48:	8c 2f       	mov	r24, r28
    2e4a:	01 c0       	rjmp	.+2      	; 0x2e4e <decode_body_response+0x1e>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    2e4c:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    2e4e:	cf 91       	pop	r28
    2e50:	08 95       	ret

Disassembly of section .text.send_tail:

0000284c <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	e4 97       	sbiw	r28, 0x34	; 52
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    2860:	be 01       	movw	r22, r28
    2862:	6c 5c       	subi	r22, 0xCC	; 204
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	ce 01       	movw	r24, r28
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    286e:	6c a9       	ldd	r22, Y+52	; 0x34
    2870:	ce 01       	movw	r24, r28
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LM_send_uplink>
}
    2878:	e4 96       	adiw	r28, 0x34	; 52
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	08 95       	ret

Disassembly of section .text.send_msg:

0000304e <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart0_hal_send_string(msg);
    304e:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uart0_hal_send_string>
    3052:	2f ef       	ldi	r18, 0xFF	; 255
    3054:	80 e7       	ldi	r24, 0x70	; 112
    3056:	92 e0       	ldi	r25, 0x02	; 2
    3058:	21 50       	subi	r18, 0x01	; 1
    305a:	80 40       	sbci	r24, 0x00	; 0
    305c:	90 40       	sbci	r25, 0x00	; 0
    305e:	e1 f7       	brne	.-8      	; 0x3058 <send_msg+0xa>
    3060:	00 c0       	rjmp	.+0      	; 0x3062 <send_msg+0x14>
    3062:	00 00       	nop
    3064:	08 95       	ret

Disassembly of section .text.MAINPG_start:

000009f0 <MAINPG_start>:
static Datetime dt;

static void send_msg(const char msg[]);


void MAINPG_start(){
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	STAGE_STATUS stageStatus;
	//bool fromSleep=false;
	bool fromSleep=true;
 9f6:	d1 e0       	ldi	r29, 0x01	; 1

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
 9f8:	c0 e0       	ldi	r28, 0x00	; 0
 9fa:	10 c0       	rjmp	.+32     	; 0xa1c <MAINPG_start+0x2c>
				
				//Set pull up
				set_bit(PORTB, 0);
				set_bit(PORTB, 1);
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 9fc:	c4 e0       	ldi	r28, 0x04	; 4
 9fe:	0e c0       	rjmp	.+28     	; 0xa1c <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 a00:	c0 e1       	ldi	r28, 0x10	; 16
 a02:	0c c0       	rjmp	.+24     	; 0xa1c <MAINPG_start+0x2c>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 a04:	c0 e1       	ldi	r28, 0x10	; 16
 a06:	0a c0       	rjmp	.+20     	; 0xa1c <MAINPG_start+0x2c>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 a08:	c0 e1       	ldi	r28, 0x10	; 16
 a0a:	08 c0       	rjmp	.+16     	; 0xa1c <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 a0c:	c0 e1       	ldi	r28, 0x10	; 16
 a0e:	06 c0       	rjmp	.+12     	; 0xa1c <MAINPG_start+0x2c>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
 a10:	c1 2f       	mov	r28, r17
 a12:	04 c0       	rjmp	.+8      	; 0xa1c <MAINPG_start+0x2c>
 a14:	c1 2f       	mov	r28, r17
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <MAINPG_start+0x2c>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
 a18:	1c 2f       	mov	r17, r28
					state=MAINPG_SEND_DATA;
 a1a:	ca e0       	ldi	r28, 0x0A	; 10
	//bool fromSleep=false;
	bool fromSleep=true;
	
	
	while(1){
		switch(state){
 a1c:	ec 2f       	mov	r30, r28
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	e2 31       	cpi	r30, 0x12	; 18
 a22:	f1 05       	cpc	r31, r1
 a24:	d8 f7       	brcc	.-10     	; 0xa1c <MAINPG_start+0x2c>
 a26:	ec 5a       	subi	r30, 0xAC	; 172
 a28:	ff 4f       	sbci	r31, 0xFF	; 255
 a2a:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
 a2e:	0e 94 45 14 	call	0x288a	; 0x288a <uart0_hal_init>
				uart1_hal_init();
 a32:	0e 94 63 14 	call	0x28c6	; 0x28c6 <uart1_hal_init>
				TWI_HAL_init();
 a36:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <TWI_HAL_init>
				TC2_HAL_init();
 a3a:	0e 94 39 17 	call	0x2e72	; 0x2e72 <TC2_HAL_init>
				PM_HAL_adc_power_init();
 a3e:	0e 94 9c 18 	call	0x3138	; 0x3138 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
 a42:	0e 94 a3 18 	call	0x3146	; 0x3146 <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
 a46:	0e 94 b1 18 	call	0x3162	; 0x3162 <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
 a4a:	0e 94 aa 18 	call	0x3154	; 0x3154 <PM_HAL_SCD30_power_init>
				
				//Set pull up
				set_bit(PORTB, 0);
 a4e:	85 b1       	in	r24, 0x05	; 5
 a50:	81 60       	ori	r24, 0x01	; 1
 a52:	85 b9       	out	0x05, r24	; 5
				set_bit(PORTB, 1);
 a54:	85 b1       	in	r24, 0x05	; 5
 a56:	82 60       	ori	r24, 0x02	; 2
 a58:	85 b9       	out	0x05, r24	; 5
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a5a:	d1 11       	cpse	r29, r1
 a5c:	cf cf       	rjmp	.-98     	; 0x9fc <MAINPG_start+0xc>
 a5e:	c1 e0       	ldi	r28, 0x01	; 1
 a60:	dd cf       	rjmp	.-70     	; 0xa1c <MAINPG_start+0x2c>
			break;
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
 a62:	61 e8       	ldi	r22, 0x81	; 129
 a64:	71 e0       	ldi	r23, 0x01	; 1
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				lmStatus=join_lora();
 a6c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <join_lora>
				state=decode_join_response(lmStatus);
 a70:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <decode_join_response>
 a74:	c8 2f       	mov	r28, r24
			break;
 a76:	d2 cf       	rjmp	.-92     	; 0xa1c <MAINPG_start+0x2c>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
 a78:	68 e8       	ldi	r22, 0x88	; 136
 a7a:	71 e0       	ldi	r23, 0x01	; 1
 a7c:	80 e0       	ldi	r24, 0x00	; 0
 a7e:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				lmStatus=LM_wake_up();
 a82:	0e 94 2a 19 	call	0x3254	; 0x3254 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 a86:	81 11       	cpse	r24, r1
 a88:	bb cf       	rjmp	.-138    	; 0xa00 <MAINPG_start+0x10>
 a8a:	c5 e0       	ldi	r28, 0x05	; 5
 a8c:	c7 cf       	rjmp	.-114    	; 0xa1c <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
 a8e:	67 e9       	ldi	r22, 0x97	; 151
 a90:	71 e0       	ldi	r23, 0x01	; 1
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
 a98:	2f ef       	ldi	r18, 0xFF	; 255
 a9a:	81 e1       	ldi	r24, 0x11	; 17
 a9c:	9a e7       	ldi	r25, 0x7A	; 122
 a9e:	21 50       	subi	r18, 0x01	; 1
 aa0:	80 40       	sbci	r24, 0x00	; 0
 aa2:	90 40       	sbci	r25, 0x00	; 0
 aa4:	e1 f7       	brne	.-8      	; 0xa9e <MAINPG_start+0xae>
 aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <MAINPG_start+0xb8>
 aa8:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
 aaa:	c1 e0       	ldi	r28, 0x01	; 1
			break;
 aac:	b7 cf       	rjmp	.-146    	; 0xa1c <MAINPG_start+0x2c>
			
			case MAINPG_LORA_JOIN_CONF_ERR:
				print_debug("Conf err\n\r");
 aae:	63 ea       	ldi	r22, 0xA3	; 163
 ab0:	71 e0       	ldi	r23, 0x01	; 1
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				state=MAINPG_END;
 ab8:	c1 e1       	ldi	r28, 0x11	; 17
			break;
 aba:	b0 cf       	rjmp	.-160    	; 0xa1c <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
 abc:	6e ea       	ldi	r22, 0xAE	; 174
 abe:	71 e0       	ldi	r23, 0x01	; 1
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				rtcStatus=RTC_set_clock_out(1);
 ac6:	81 e0       	ldi	r24, 0x01	; 1
 ac8:	0e 94 c8 10 	call	0x2190	; 0x2190 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 acc:	81 11       	cpse	r24, r1
 ace:	9a cf       	rjmp	.-204    	; 0xa04 <MAINPG_start+0x14>
 ad0:	c7 e0       	ldi	r28, 0x07	; 7
 ad2:	a4 cf       	rjmp	.-184    	; 0xa1c <MAINPG_start+0x2c>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
 ad4:	69 eb       	ldi	r22, 0xB9	; 185
 ad6:	71 e0       	ldi	r23, 0x01	; 1
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
 ade:	0e 94 76 15 	call	0x2aec	; 0x2aec <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 ae2:	81 11       	cpse	r24, r1
 ae4:	91 cf       	rjmp	.-222    	; 0xa08 <MAINPG_start+0x18>
 ae6:	c6 e0       	ldi	r28, 0x06	; 6
 ae8:	99 cf       	rjmp	.-206    	; 0xa1c <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
 aea:	6b ec       	ldi	r22, 0xCB	; 203
 aec:	71 e0       	ldi	r23, 0x01	; 1
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				rtcStatus=set_wakeup();
 af4:	0e 94 17 19 	call	0x322e	; 0x322e <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 af8:	81 11       	cpse	r24, r1
 afa:	88 cf       	rjmp	.-240    	; 0xa0c <MAINPG_start+0x1c>
 afc:	c8 e0       	ldi	r28, 0x08	; 8
 afe:	8e cf       	rjmp	.-228    	; 0xa1c <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
 b00:	60 ee       	ldi	r22, 0xE0	; 224
 b02:	71 e0       	ldi	r23, 0x01	; 1
 b04:	80 e0       	ldi	r24, 0x00	; 0
 b06:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				MRPP_init_group(cols, 1);
 b0a:	61 e0       	ldi	r22, 0x01	; 1
 b0c:	81 e2       	ldi	r24, 0x21	; 33
 b0e:	99 e0       	ldi	r25, 0x09	; 9
 b10:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
 b14:	cc e0       	ldi	r28, 0x0C	; 12
			break;
 b16:	82 cf       	rjmp	.-252    	; 0xa1c <MAINPG_start+0x2c>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
 b18:	0e 94 01 19 	call	0x3202	; 0x3202 <LM_is_free>
 b1c:	88 23       	and	r24, r24
 b1e:	09 f4       	brne	.+2      	; 0xb22 <MAINPG_start+0x132>
 b20:	7d cf       	rjmp	.-262    	; 0xa1c <MAINPG_start+0x2c>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
 b22:	0e 94 07 14 	call	0x280e	; 0x280e <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
 b26:	4c e0       	ldi	r20, 0x0C	; 12
 b28:	69 e0       	ldi	r22, 0x09	; 9
 b2a:	0e 94 1b 18 	call	0x3036	; 0x3036 <decode_header_tail_response>
 b2e:	c8 2f       	mov	r28, r24
			break;
 b30:	75 cf       	rjmp	.-278    	; 0xa1c <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
 b32:	0e 94 2c 0a 	call	0x1458	; 0x1458 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 b36:	6b e0       	ldi	r22, 0x0B	; 11
 b38:	0e 94 33 18 	call	0x3066	; 0x3066 <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
 b3c:	1c 2f       	mov	r17, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 b3e:	c8 2f       	mov	r28, r24
			break;
 b40:	6d cf       	rjmp	.-294    	; 0xa1c <MAINPG_start+0x2c>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
 b42:	8e e2       	ldi	r24, 0x2E	; 46
 b44:	99 e0       	ldi	r25, 0x09	; 9
 b46:	0e 94 e5 16 	call	0x2dca	; 0x2dca <MRPP_is_body_package_ready>
 b4a:	88 23       	and	r24, r24
 b4c:	09 f4       	brne	.+2      	; 0xb50 <MAINPG_start+0x160>
 b4e:	60 cf       	rjmp	.-320    	; 0xa10 <MAINPG_start+0x20>
 b50:	0e 94 01 19 	call	0x3202	; 0x3202 <LM_is_free>
 b54:	88 23       	and	r24, r24
 b56:	09 f4       	brne	.+2      	; 0xb5a <MAINPG_start+0x16a>
 b58:	5d cf       	rjmp	.-326    	; 0xa14 <MAINPG_start+0x24>
					lmStatus=send_body(bodyIndex);
 b5a:	80 91 2e 09 	lds	r24, 0x092E	; 0x80092e <bodyIndex>
 b5e:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <bodyIndex+0x1>
 b62:	0e 94 e7 13 	call	0x27ce	; 0x27ce <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
 b66:	41 2f       	mov	r20, r17
 b68:	68 2f       	mov	r22, r24
 b6a:	80 91 2e 09 	lds	r24, 0x092E	; 0x80092e <bodyIndex>
 b6e:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <bodyIndex+0x1>
 b72:	0e 94 18 17 	call	0x2e30	; 0x2e30 <decode_body_response>
 b76:	c8 2f       	mov	r28, r24
 b78:	51 cf       	rjmp	.-350    	; 0xa1c <MAINPG_start+0x2c>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
 b7a:	0e 94 06 19 	call	0x320c	; 0x320c <MRPP_all_body_package_sent>
 b7e:	88 23       	and	r24, r24
 b80:	09 f4       	brne	.+2      	; 0xb84 <MAINPG_start+0x194>
 b82:	4a cf       	rjmp	.-364    	; 0xa18 <MAINPG_start+0x28>
					state=MAINPG_SEND_TAIL;
 b84:	cd e0       	ldi	r28, 0x0D	; 13
 b86:	4a cf       	rjmp	.-364    	; 0xa1c <MAINPG_start+0x2c>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
 b88:	0e 94 01 19 	call	0x3202	; 0x3202 <LM_is_free>
 b8c:	88 23       	and	r24, r24
 b8e:	09 f4       	brne	.+2      	; 0xb92 <MAINPG_start+0x1a2>
 b90:	45 cf       	rjmp	.-374    	; 0xa1c <MAINPG_start+0x2c>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
 b92:	0e 94 26 14 	call	0x284c	; 0x284c <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
 b96:	4d e0       	ldi	r20, 0x0D	; 13
 b98:	6e e0       	ldi	r22, 0x0E	; 14
 b9a:	0e 94 1b 18 	call	0x3036	; 0x3036 <decode_header_tail_response>
 b9e:	c8 2f       	mov	r28, r24
				
			break;
 ba0:	3d cf       	rjmp	.-390    	; 0xa1c <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
 ba2:	0e 94 27 19 	call	0x324e	; 0x324e <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
 ba6:	d1 e0       	ldi	r29, 0x01	; 1
 ba8:	81 11       	cpse	r24, r1
 baa:	d0 e0       	ldi	r29, 0x00	; 0
				
				state=MAINPG_SLEEP;
 bac:	cf e0       	ldi	r28, 0x0F	; 15
			break;
 bae:	36 cf       	rjmp	.-404    	; 0xa1c <MAINPG_start+0x2c>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
 bb0:	6c ee       	ldi	r22, 0xEC	; 236
 bb2:	71 e0       	ldi	r23, 0x01	; 1
 bb4:	80 e0       	ldi	r24, 0x00	; 0
 bb6:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				PM_HAL_enter_power_down();
 bba:	0e 94 84 13 	call	0x2708	; 0x2708 <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
 bbe:	64 ef       	ldi	r22, 0xF4	; 244
 bc0:	71 e0       	ldi	r23, 0x01	; 1
 bc2:	80 e0       	ldi	r24, 0x00	; 0
 bc4:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				state=MAINPG_INIT_HW;
 bc8:	c0 e0       	ldi	r28, 0x00	; 0
			break;
 bca:	28 cf       	rjmp	.-432    	; 0xa1c <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
 bcc:	6c ef       	ldi	r22, 0xFC	; 252
 bce:	71 e0       	ldi	r23, 0x01	; 1
 bd0:	80 e0       	ldi	r24, 0x00	; 0
 bd2:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				state=MAINPG_END;
 bd6:	c1 e1       	ldi	r28, 0x11	; 17
			break;
 bd8:	21 cf       	rjmp	.-446    	; 0xa1c <MAINPG_start+0x2c>
			
			case MAINPG_END:
				print_debug("END\n\r");
 bda:	6a e0       	ldi	r22, 0x0A	; 10
 bdc:	72 e0       	ldi	r23, 0x02	; 2
 bde:	80 e0       	ldi	r24, 0x00	; 0
 be0:	0e 94 27 18 	call	0x304e	; 0x304e <send_msg>
				return;
			break;	
		}
	}
}
 be4:	df 91       	pop	r29
 be6:	cf 91       	pop	r28
 be8:	1f 91       	pop	r17
 bea:	08 95       	ret

Disassembly of section .text.calc_crc8:

000029e2 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    29e2:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    29e4:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    29e6:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    29e8:	14 c0       	rjmp	.+40     	; 0x2a12 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    29ea:	fa 01       	movw	r30, r20
    29ec:	e3 0f       	add	r30, r19
    29ee:	f1 1d       	adc	r31, r1
    29f0:	90 81       	ld	r25, Z
    29f2:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    29f4:	28 e0       	ldi	r18, 0x08	; 8
    29f6:	0a c0       	rjmp	.+20     	; 0x2a0c <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    29f8:	88 23       	and	r24, r24
    29fa:	34 f4       	brge	.+12     	; 0x2a08 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	91 e3       	ldi	r25, 0x31	; 49
    2a04:	89 27       	eor	r24, r25
    2a06:	01 c0       	rjmp	.+2      	; 0x2a0a <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    2a08:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    2a0a:	21 50       	subi	r18, 0x01	; 1
    2a0c:	21 11       	cpse	r18, r1
    2a0e:	f4 cf       	rjmp	.-24     	; 0x29f8 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    2a10:	3f 5f       	subi	r19, 0xFF	; 255
    2a12:	36 17       	cp	r19, r22
    2a14:	50 f3       	brcs	.-44     	; 0x29ea <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    2a16:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001fda <__fixunssfsi>:
    1fda:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__fp_splitA>
    1fde:	88 f0       	brcs	.+34     	; 0x2002 <__fixunssfsi+0x28>
    1fe0:	9f 57       	subi	r25, 0x7F	; 127
    1fe2:	98 f0       	brcs	.+38     	; 0x200a <__fixunssfsi+0x30>
    1fe4:	b9 2f       	mov	r27, r25
    1fe6:	99 27       	eor	r25, r25
    1fe8:	b7 51       	subi	r27, 0x17	; 23
    1fea:	b0 f0       	brcs	.+44     	; 0x2018 <__fixunssfsi+0x3e>
    1fec:	e1 f0       	breq	.+56     	; 0x2026 <__fixunssfsi+0x4c>
    1fee:	66 0f       	add	r22, r22
    1ff0:	77 1f       	adc	r23, r23
    1ff2:	88 1f       	adc	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	1a f0       	brmi	.+6      	; 0x1ffe <__fixunssfsi+0x24>
    1ff8:	ba 95       	dec	r27
    1ffa:	c9 f7       	brne	.-14     	; 0x1fee <__fixunssfsi+0x14>
    1ffc:	14 c0       	rjmp	.+40     	; 0x2026 <__fixunssfsi+0x4c>
    1ffe:	b1 30       	cpi	r27, 0x01	; 1
    2000:	91 f0       	breq	.+36     	; 0x2026 <__fixunssfsi+0x4c>
    2002:	0e 94 c6 18 	call	0x318c	; 0x318c <__fp_zero>
    2006:	b1 e0       	ldi	r27, 0x01	; 1
    2008:	08 95       	ret
    200a:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__fp_zero>
    200e:	67 2f       	mov	r22, r23
    2010:	78 2f       	mov	r23, r24
    2012:	88 27       	eor	r24, r24
    2014:	b8 5f       	subi	r27, 0xF8	; 248
    2016:	39 f0       	breq	.+14     	; 0x2026 <__fixunssfsi+0x4c>
    2018:	b9 3f       	cpi	r27, 0xF9	; 249
    201a:	cc f3       	brlt	.-14     	; 0x200e <__fixunssfsi+0x34>
    201c:	86 95       	lsr	r24
    201e:	77 95       	ror	r23
    2020:	67 95       	ror	r22
    2022:	b3 95       	inc	r27
    2024:	d9 f7       	brne	.-10     	; 0x201c <__fixunssfsi+0x42>
    2026:	3e f4       	brtc	.+14     	; 0x2036 <__fixunssfsi+0x5c>
    2028:	90 95       	com	r25
    202a:	80 95       	com	r24
    202c:	70 95       	com	r23
    202e:	61 95       	neg	r22
    2030:	7f 4f       	sbci	r23, 0xFF	; 255
    2032:	8f 4f       	sbci	r24, 0xFF	; 255
    2034:	9f 4f       	sbci	r25, 0xFF	; 255
    2036:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000026c4 <__fp_split3>:
    26c4:	57 fd       	sbrc	r21, 7
    26c6:	90 58       	subi	r25, 0x80	; 128
    26c8:	44 0f       	add	r20, r20
    26ca:	55 1f       	adc	r21, r21
    26cc:	59 f0       	breq	.+22     	; 0x26e4 <__fp_splitA+0x10>
    26ce:	5f 3f       	cpi	r21, 0xFF	; 255
    26d0:	71 f0       	breq	.+28     	; 0x26ee <__fp_splitA+0x1a>
    26d2:	47 95       	ror	r20

000026d4 <__fp_splitA>:
    26d4:	88 0f       	add	r24, r24
    26d6:	97 fb       	bst	r25, 7
    26d8:	99 1f       	adc	r25, r25
    26da:	61 f0       	breq	.+24     	; 0x26f4 <__fp_splitA+0x20>
    26dc:	9f 3f       	cpi	r25, 0xFF	; 255
    26de:	79 f0       	breq	.+30     	; 0x26fe <__fp_splitA+0x2a>
    26e0:	87 95       	ror	r24
    26e2:	08 95       	ret
    26e4:	12 16       	cp	r1, r18
    26e6:	13 06       	cpc	r1, r19
    26e8:	14 06       	cpc	r1, r20
    26ea:	55 1f       	adc	r21, r21
    26ec:	f2 cf       	rjmp	.-28     	; 0x26d2 <__fp_split3+0xe>
    26ee:	46 95       	lsr	r20
    26f0:	f1 df       	rcall	.-30     	; 0x26d4 <__fp_splitA>
    26f2:	08 c0       	rjmp	.+16     	; 0x2704 <__fp_splitA+0x30>
    26f4:	16 16       	cp	r1, r22
    26f6:	17 06       	cpc	r1, r23
    26f8:	18 06       	cpc	r1, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	f1 cf       	rjmp	.-30     	; 0x26e0 <__fp_splitA+0xc>
    26fe:	86 95       	lsr	r24
    2700:	71 05       	cpc	r23, r1
    2702:	61 05       	cpc	r22, r1
    2704:	08 94       	sec
    2706:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000318c <__fp_zero>:
    318c:	e8 94       	clt

0000318e <__fp_szero>:
    318e:	bb 27       	eor	r27, r27
    3190:	66 27       	eor	r22, r22
    3192:	77 27       	eor	r23, r23
    3194:	cb 01       	movw	r24, r22
    3196:	97 f9       	bld	r25, 7
    3198:	08 95       	ret

Disassembly of section .text.libgcc:

000031e2 <__tablejump2__>:
    31e2:	ee 0f       	add	r30, r30
    31e4:	ff 1f       	adc	r31, r31
    31e6:	05 90       	lpm	r0, Z+
    31e8:	f4 91       	lpm	r31, Z
    31ea:	e0 2d       	mov	r30, r0
    31ec:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00002ef2 <__umulhisi3>:
    2ef2:	a2 9f       	mul	r26, r18
    2ef4:	b0 01       	movw	r22, r0
    2ef6:	b3 9f       	mul	r27, r19
    2ef8:	c0 01       	movw	r24, r0
    2efa:	a3 9f       	mul	r26, r19
    2efc:	70 0d       	add	r23, r0
    2efe:	81 1d       	adc	r24, r1
    2f00:	11 24       	eor	r1, r1
    2f02:	91 1d       	adc	r25, r1
    2f04:	b2 9f       	mul	r27, r18
    2f06:	70 0d       	add	r23, r0
    2f08:	81 1d       	adc	r24, r1
    2f0a:	11 24       	eor	r1, r1
    2f0c:	91 1d       	adc	r25, r1
    2f0e:	08 95       	ret

Disassembly of section .text.libgcc:

00002fd4 <__movmemx_qi>:
    2fd4:	99 27       	eor	r25, r25

00002fd6 <__movmemx_hi>:
    2fd6:	77 fd       	sbrc	r23, 7
    2fd8:	05 c0       	rjmp	.+10     	; 0x2fe4 <__movmemx_hi+0xe>
    2fda:	05 90       	lpm	r0, Z+
    2fdc:	0d 92       	st	X+, r0
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	e1 f7       	brne	.-8      	; 0x2fda <__movmemx_hi+0x4>
    2fe2:	08 95       	ret
    2fe4:	01 90       	ld	r0, Z+
    2fe6:	0d 92       	st	X+, r0
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	e1 f7       	brne	.-8      	; 0x2fe4 <__movmemx_hi+0xe>
    2fec:	08 95       	ret

Disassembly of section .text.avrlibc:

00002be8 <memcpy>:
    2be8:	cf 92       	push	r12
    2bea:	df 92       	push	r13
    2bec:	ef 92       	push	r14
    2bee:	dc 01       	movw	r26, r24
    2bf0:	6a 01       	movw	r12, r20
    2bf2:	e6 2e       	mov	r14, r22
    2bf4:	28 0f       	add	r18, r24
    2bf6:	39 1f       	adc	r19, r25
    2bf8:	a2 17       	cp	r26, r18
    2bfa:	b3 07       	cpc	r27, r19
    2bfc:	51 f0       	breq	.+20     	; 0x2c12 <memcpy+0x2a>
    2bfe:	f6 01       	movw	r30, r12
    2c00:	44 91       	lpm	r20, Z
    2c02:	e7 fc       	sbrc	r14, 7
    2c04:	40 81       	ld	r20, Z
    2c06:	4d 93       	st	X+, r20
    2c08:	4f ef       	ldi	r20, 0xFF	; 255
    2c0a:	c4 1a       	sub	r12, r20
    2c0c:	d4 0a       	sbc	r13, r20
    2c0e:	e4 0a       	sbc	r14, r20
    2c10:	f3 cf       	rjmp	.-26     	; 0x2bf8 <memcpy+0x10>
    2c12:	ef 90       	pop	r14
    2c14:	df 90       	pop	r13
    2c16:	cf 90       	pop	r12
    2c18:	08 95       	ret

Disassembly of section .text.avrlibc:

0000278c <strcmp>:
    278c:	cf 92       	push	r12
    278e:	df 92       	push	r13
    2790:	ef 92       	push	r14
    2792:	6b 01       	movw	r12, r22
    2794:	e8 2e       	mov	r14, r24
    2796:	f6 01       	movw	r30, r12
    2798:	84 91       	lpm	r24, Z
    279a:	e7 fc       	sbrc	r14, 7
    279c:	80 81       	ld	r24, Z
    279e:	f9 01       	movw	r30, r18
    27a0:	54 91       	lpm	r21, Z
    27a2:	47 fd       	sbrc	r20, 7
    27a4:	50 81       	ld	r21, Z
    27a6:	85 13       	cpse	r24, r21
    27a8:	0b c0       	rjmp	.+22     	; 0x27c0 <strcmp+0x34>
    27aa:	88 23       	and	r24, r24
    27ac:	41 f0       	breq	.+16     	; 0x27be <strcmp+0x32>
    27ae:	8f ef       	ldi	r24, 0xFF	; 255
    27b0:	c8 1a       	sub	r12, r24
    27b2:	d8 0a       	sbc	r13, r24
    27b4:	e8 0a       	sbc	r14, r24
    27b6:	2f 5f       	subi	r18, 0xFF	; 255
    27b8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ba:	4f 4f       	sbci	r20, 0xFF	; 255
    27bc:	ec cf       	rjmp	.-40     	; 0x2796 <strcmp+0xa>
    27be:	58 2f       	mov	r21, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	85 1b       	sub	r24, r21
    27c4:	91 09       	sbc	r25, r1
    27c6:	ef 90       	pop	r14
    27c8:	df 90       	pop	r13
    27ca:	cf 90       	pop	r12
    27cc:	08 95       	ret

Disassembly of section .text.avrlibc:

00001eb4 <strncmp>:
    1eb4:	cf 92       	push	r12
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	6b 01       	movw	r12, r22
    1ec0:	e8 2e       	mov	r14, r24
    1ec2:	01 15       	cp	r16, r1
    1ec4:	11 05       	cpc	r17, r1
    1ec6:	19 f1       	breq	.+70     	; 0x1f0e <strncmp+0x5a>
    1ec8:	01 50       	subi	r16, 0x01	; 1
    1eca:	11 09       	sbc	r17, r1
    1ecc:	f6 01       	movw	r30, r12
    1ece:	84 91       	lpm	r24, Z
    1ed0:	e7 fc       	sbrc	r14, 7
    1ed2:	80 81       	ld	r24, Z
    1ed4:	88 23       	and	r24, r24
    1ed6:	99 f0       	breq	.+38     	; 0x1efe <strncmp+0x4a>
    1ed8:	f9 01       	movw	r30, r18
    1eda:	94 91       	lpm	r25, Z
    1edc:	47 fd       	sbrc	r20, 7
    1ede:	90 81       	ld	r25, Z
    1ee0:	99 23       	and	r25, r25
    1ee2:	69 f0       	breq	.+26     	; 0x1efe <strncmp+0x4a>
    1ee4:	01 15       	cp	r16, r1
    1ee6:	11 05       	cpc	r17, r1
    1ee8:	51 f0       	breq	.+20     	; 0x1efe <strncmp+0x4a>
    1eea:	89 13       	cpse	r24, r25
    1eec:	08 c0       	rjmp	.+16     	; 0x1efe <strncmp+0x4a>
    1eee:	8f ef       	ldi	r24, 0xFF	; 255
    1ef0:	c8 1a       	sub	r12, r24
    1ef2:	d8 0a       	sbc	r13, r24
    1ef4:	e8 0a       	sbc	r14, r24
    1ef6:	2f 5f       	subi	r18, 0xFF	; 255
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	4f 4f       	sbci	r20, 0xFF	; 255
    1efc:	e5 cf       	rjmp	.-54     	; 0x1ec8 <strncmp+0x14>
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	f9 01       	movw	r30, r18
    1f02:	24 91       	lpm	r18, Z
    1f04:	47 fd       	sbrc	r20, 7
    1f06:	20 81       	ld	r18, Z
    1f08:	82 1b       	sub	r24, r18
    1f0a:	91 09       	sbc	r25, r1
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <strncmp+0x5e>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	08 95       	ret

Disassembly of section .text.avrlibc:

00002d06 <strlen>:
    2d06:	cf 92       	push	r12
    2d08:	df 92       	push	r13
    2d0a:	ef 92       	push	r14
    2d0c:	6b 01       	movw	r12, r22
    2d0e:	e8 2e       	mov	r14, r24
    2d10:	a8 2f       	mov	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	fc 01       	movw	r30, r24
    2d16:	24 91       	lpm	r18, Z
    2d18:	a7 fd       	sbrc	r26, 7
    2d1a:	20 81       	ld	r18, Z
    2d1c:	22 23       	and	r18, r18
    2d1e:	19 f0       	breq	.+6      	; 0x2d26 <strlen+0x20>
    2d20:	01 96       	adiw	r24, 0x01	; 1
    2d22:	a1 1d       	adc	r26, r1
    2d24:	f7 cf       	rjmp	.-18     	; 0x2d14 <strlen+0xe>
    2d26:	8c 19       	sub	r24, r12
    2d28:	9d 09       	sbc	r25, r13
    2d2a:	ef 90       	pop	r14
    2d2c:	df 90       	pop	r13
    2d2e:	cf 90       	pop	r12
    2d30:	08 95       	ret

Disassembly of section .text.avrlibc:

00002f10 <strcpy>:
    2f10:	9a 01       	movw	r18, r20
    2f12:	46 2f       	mov	r20, r22
    2f14:	dc 01       	movw	r26, r24
    2f16:	f9 01       	movw	r30, r18
    2f18:	54 91       	lpm	r21, Z
    2f1a:	47 fd       	sbrc	r20, 7
    2f1c:	50 81       	ld	r21, Z
    2f1e:	5d 93       	st	X+, r21
    2f20:	55 23       	and	r21, r21
    2f22:	21 f0       	breq	.+8      	; 0x2f2c <strcpy+0x1c>
    2f24:	2f 5f       	subi	r18, 0xFF	; 255
    2f26:	3f 4f       	sbci	r19, 0xFF	; 255
    2f28:	4f 4f       	sbci	r20, 0xFF	; 255
    2f2a:	f5 cf       	rjmp	.-22     	; 0x2f16 <strcpy+0x6>
    2f2c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000263a <sprintf>:
    263a:	af e0       	ldi	r26, 0x0F	; 15
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e3 e2       	ldi	r30, 0x23	; 35
    2640:	f3 e1       	ldi	r31, 0x13	; 19
    2642:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x1c>
    2646:	0e 89       	ldd	r16, Y+22	; 0x16
    2648:	1f 89       	ldd	r17, Y+23	; 0x17
    264a:	86 e0       	ldi	r24, 0x06	; 6
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	1a 83       	std	Y+2, r17	; 0x02
    2650:	09 83       	std	Y+1, r16	; 0x01
    2652:	8f ef       	ldi	r24, 0xFF	; 255
    2654:	9f e7       	ldi	r25, 0x7F	; 127
    2656:	9f 83       	std	Y+7, r25	; 0x07
    2658:	8e 83       	std	Y+6, r24	; 0x06
    265a:	9e 01       	movw	r18, r28
    265c:	25 5e       	subi	r18, 0xE5	; 229
    265e:	3f 4f       	sbci	r19, 0xFF	; 255
    2660:	48 8d       	ldd	r20, Y+24	; 0x18
    2662:	59 8d       	ldd	r21, Y+25	; 0x19
    2664:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2666:	ce 01       	movw	r24, r28
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	0e 94 89 01 	call	0x312	; 0x312 <vfprintf>
    266e:	e8 85       	ldd	r30, Y+8	; 0x08
    2670:	f9 85       	ldd	r31, Y+9	; 0x09
    2672:	e0 0f       	add	r30, r16
    2674:	f1 1f       	adc	r31, r17
    2676:	10 82       	st	Z, r1
    2678:	2f 96       	adiw	r28, 0x0f	; 15
    267a:	e4 e0       	ldi	r30, 0x04	; 4
    267c:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000312 <vfprintf>:
 312:	2f 92       	push	r2
 314:	3f 92       	push	r3
 316:	4f 92       	push	r4
 318:	6f 92       	push	r6
 31a:	7f 92       	push	r7
 31c:	8f 92       	push	r8
 31e:	9f 92       	push	r9
 320:	af 92       	push	r10
 322:	bf 92       	push	r11
 324:	cf 92       	push	r12
 326:	df 92       	push	r13
 328:	ef 92       	push	r14
 32a:	ff 92       	push	r15
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	62 97       	sbiw	r28, 0x12	; 18
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	6c 01       	movw	r12, r24
 346:	3a 01       	movw	r6, r20
 348:	86 2e       	mov	r8, r22
 34a:	79 01       	movw	r14, r18
 34c:	fc 01       	movw	r30, r24
 34e:	10 86       	std	Z+8, r1	; 0x08
 350:	17 82       	std	Z+7, r1	; 0x07
 352:	84 81       	ldd	r24, Z+4	; 0x04
 354:	81 ff       	sbrs	r24, 1
 356:	e7 c1       	rjmp	.+974    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 358:	9e 01       	movw	r18, r28
 35a:	2f 5f       	subi	r18, 0xFF	; 255
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	3d 87       	std	Y+13, r19	; 0x0d
 360:	2c 87       	std	Y+12, r18	; 0x0c
 362:	c9 01       	movw	r24, r18
 364:	a0 e8       	ldi	r26, 0x80	; 128
 366:	88 8b       	std	Y+16, r24	; 0x10
 368:	99 8b       	std	Y+17, r25	; 0x11
 36a:	aa 8b       	std	Y+18, r26	; 0x12
 36c:	9f e3       	ldi	r25, 0x3F	; 63
 36e:	99 2e       	mov	r9, r25
 370:	f3 01       	movw	r30, r6
 372:	84 91       	lpm	r24, Z
 374:	87 fc       	sbrc	r8, 7
 376:	80 81       	ld	r24, Z
 378:	88 23       	and	r24, r24
 37a:	09 f4       	brne	.+2      	; 0x37e <vfprintf+0x6c>
 37c:	d0 c1       	rjmp	.+928    	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 37e:	48 2d       	mov	r20, r8
 380:	93 01       	movw	r18, r6
 382:	2f 5f       	subi	r18, 0xFF	; 255
 384:	3f 4f       	sbci	r19, 0xFF	; 255
 386:	4f 4f       	sbci	r20, 0xFF	; 255
 388:	85 32       	cpi	r24, 0x25	; 37
 38a:	19 f0       	breq	.+6      	; 0x392 <vfprintf+0x80>
 38c:	39 01       	movw	r6, r18
 38e:	84 2e       	mov	r8, r20
 390:	0a c0       	rjmp	.+20     	; 0x3a6 <vfprintf+0x94>
 392:	f9 01       	movw	r30, r18
 394:	84 91       	lpm	r24, Z
 396:	47 fd       	sbrc	r20, 7
 398:	80 81       	ld	r24, Z
 39a:	92 e0       	ldi	r25, 0x02	; 2
 39c:	69 0e       	add	r6, r25
 39e:	71 1c       	adc	r7, r1
 3a0:	81 1c       	adc	r8, r1
 3a2:	85 32       	cpi	r24, 0x25	; 37
 3a4:	29 f4       	brne	.+10     	; 0x3b0 <vfprintf+0x9e>
 3a6:	b6 01       	movw	r22, r12
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <fputc>
 3ae:	e0 cf       	rjmp	.-64     	; 0x370 <vfprintf+0x5e>
 3b0:	b1 2c       	mov	r11, r1
 3b2:	00 e0       	ldi	r16, 0x00	; 0
 3b4:	10 e0       	ldi	r17, 0x00	; 0
 3b6:	10 32       	cpi	r17, 0x20	; 32
 3b8:	a0 f4       	brcc	.+40     	; 0x3e2 <vfprintf+0xd0>
 3ba:	8b 32       	cpi	r24, 0x2B	; 43
 3bc:	69 f0       	breq	.+26     	; 0x3d8 <vfprintf+0xc6>
 3be:	30 f4       	brcc	.+12     	; 0x3cc <vfprintf+0xba>
 3c0:	80 32       	cpi	r24, 0x20	; 32
 3c2:	59 f0       	breq	.+22     	; 0x3da <vfprintf+0xc8>
 3c4:	83 32       	cpi	r24, 0x23	; 35
 3c6:	69 f4       	brne	.+26     	; 0x3e2 <vfprintf+0xd0>
 3c8:	10 61       	ori	r17, 0x10	; 16
 3ca:	2c c0       	rjmp	.+88     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3cc:	8d 32       	cpi	r24, 0x2D	; 45
 3ce:	39 f0       	breq	.+14     	; 0x3de <vfprintf+0xcc>
 3d0:	80 33       	cpi	r24, 0x30	; 48
 3d2:	39 f4       	brne	.+14     	; 0x3e2 <vfprintf+0xd0>
 3d4:	11 60       	ori	r17, 0x01	; 1
 3d6:	26 c0       	rjmp	.+76     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3d8:	12 60       	ori	r17, 0x02	; 2
 3da:	14 60       	ori	r17, 0x04	; 4
 3dc:	23 c0       	rjmp	.+70     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3de:	18 60       	ori	r17, 0x08	; 8
 3e0:	21 c0       	rjmp	.+66     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3e2:	17 fd       	sbrc	r17, 7
 3e4:	29 c0       	rjmp	.+82     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3e6:	90 ed       	ldi	r25, 0xD0	; 208
 3e8:	98 0f       	add	r25, r24
 3ea:	9a 30       	cpi	r25, 0x0A	; 10
 3ec:	78 f4       	brcc	.+30     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3ee:	16 ff       	sbrs	r17, 6
 3f0:	06 c0       	rjmp	.+12     	; 0x3fe <vfprintf+0xec>
 3f2:	aa e0       	ldi	r26, 0x0A	; 10
 3f4:	ba 9e       	mul	r11, r26
 3f6:	90 0d       	add	r25, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	b9 2e       	mov	r11, r25
 3fc:	13 c0       	rjmp	.+38     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3fe:	ea e0       	ldi	r30, 0x0A	; 10
 400:	0e 9f       	mul	r16, r30
 402:	90 0d       	add	r25, r0
 404:	11 24       	eor	r1, r1
 406:	09 2f       	mov	r16, r25
 408:	10 62       	ori	r17, 0x20	; 32
 40a:	0c c0       	rjmp	.+24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 40c:	8e 32       	cpi	r24, 0x2E	; 46
 40e:	21 f4       	brne	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 410:	16 fd       	sbrc	r17, 6
 412:	85 c1       	rjmp	.+778    	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 414:	10 64       	ori	r17, 0x40	; 64
 416:	06 c0       	rjmp	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 418:	8c 36       	cpi	r24, 0x6C	; 108
 41a:	11 f4       	brne	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	10 68       	ori	r17, 0x80	; 128
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 420:	88 36       	cpi	r24, 0x68	; 104
 422:	51 f4       	brne	.+20     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 424:	f3 01       	movw	r30, r6
 426:	84 91       	lpm	r24, Z
 428:	87 fc       	sbrc	r8, 7
 42a:	80 81       	ld	r24, Z
 42c:	ff ef       	ldi	r31, 0xFF	; 255
 42e:	6f 1a       	sub	r6, r31
 430:	7f 0a       	sbc	r7, r31
 432:	8f 0a       	sbc	r8, r31
 434:	81 11       	cpse	r24, r1
 436:	bf cf       	rjmp	.-130    	; 0x3b6 <vfprintf+0xa4>
 438:	98 2f       	mov	r25, r24
 43a:	9f 7d       	andi	r25, 0xDF	; 223
 43c:	95 54       	subi	r25, 0x45	; 69
 43e:	93 30       	cpi	r25, 0x03	; 3
 440:	28 f4       	brcc	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 442:	24 e0       	ldi	r18, 0x04	; 4
 444:	e2 0e       	add	r14, r18
 446:	f1 1c       	adc	r15, r1
 448:	99 82       	std	Y+1, r9	; 0x01
 44a:	0f c0       	rjmp	.+30     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 44c:	83 36       	cpi	r24, 0x63	; 99
 44e:	31 f0       	breq	.+12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 450:	83 37       	cpi	r24, 0x73	; 115
 452:	91 f0       	breq	.+36     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 454:	83 35       	cpi	r24, 0x53	; 83
 456:	09 f0       	breq	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	63 c0       	rjmp	.+198    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 45a:	27 c0       	rjmp	.+78     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 45c:	f7 01       	movw	r30, r14
 45e:	80 81       	ld	r24, Z
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	97 01       	movw	r18, r14
 464:	2e 5f       	subi	r18, 0xFE	; 254
 466:	3f 4f       	sbci	r19, 0xFF	; 255
 468:	79 01       	movw	r14, r18
 46a:	28 88       	ldd	r2, Y+16	; 0x10
 46c:	39 88       	ldd	r3, Y+17	; 0x11
 46e:	4a 88       	ldd	r4, Y+18	; 0x12
 470:	aa 24       	eor	r10, r10
 472:	a3 94       	inc	r10
 474:	b1 2c       	mov	r11, r1
 476:	17 c0       	rjmp	.+46     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 478:	a7 01       	movw	r20, r14
 47a:	4d 5f       	subi	r20, 0xFD	; 253
 47c:	5f 4f       	sbci	r21, 0xFF	; 255
 47e:	5f 87       	std	Y+15, r21	; 0x0f
 480:	4e 87       	std	Y+14, r20	; 0x0e
 482:	f7 01       	movw	r30, r14
 484:	20 80       	ld	r2, Z
 486:	31 80       	ldd	r3, Z+1	; 0x01
 488:	42 80       	ldd	r4, Z+2	; 0x02
 48a:	16 ff       	sbrs	r17, 6
 48c:	03 c0       	rjmp	.+6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 48e:	4b 2d       	mov	r20, r11
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 494:	4f ef       	ldi	r20, 0xFF	; 255
 496:	5f ef       	ldi	r21, 0xFF	; 255
 498:	84 2d       	mov	r24, r4
 49a:	b1 01       	movw	r22, r2
 49c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <strnlen>
 4a0:	5c 01       	movw	r10, r24
 4a2:	ee 84       	ldd	r14, Y+14	; 0x0e
 4a4:	ff 84       	ldd	r15, Y+15	; 0x0f
 4a6:	1f 77       	andi	r17, 0x7F	; 127
 4a8:	18 c0       	rjmp	.+48     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4aa:	97 01       	movw	r18, r14
 4ac:	2d 5f       	subi	r18, 0xFD	; 253
 4ae:	3f 4f       	sbci	r19, 0xFF	; 255
 4b0:	3f 87       	std	Y+15, r19	; 0x0f
 4b2:	2e 87       	std	Y+14, r18	; 0x0e
 4b4:	f7 01       	movw	r30, r14
 4b6:	20 80       	ld	r2, Z
 4b8:	31 80       	ldd	r3, Z+1	; 0x01
 4ba:	42 80       	ldd	r4, Z+2	; 0x02
 4bc:	16 ff       	sbrs	r17, 6
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c0:	4b 2d       	mov	r20, r11
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c6:	4f ef       	ldi	r20, 0xFF	; 255
 4c8:	5f ef       	ldi	r21, 0xFF	; 255
 4ca:	84 2d       	mov	r24, r4
 4cc:	b1 01       	movw	r22, r2
 4ce:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <strnlen>
 4d2:	5c 01       	movw	r10, r24
 4d4:	10 68       	ori	r17, 0x80	; 128
 4d6:	ee 84       	ldd	r14, Y+14	; 0x0e
 4d8:	ff 84       	ldd	r15, Y+15	; 0x0f
 4da:	13 fd       	sbrc	r17, 3
 4dc:	1d c0       	rjmp	.+58     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 4de:	80 2f       	mov	r24, r16
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	a8 16       	cp	r10, r24
 4e4:	b9 06       	cpc	r11, r25
 4e6:	c0 f4       	brcc	.+48     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 4e8:	b6 01       	movw	r22, r12
 4ea:	80 e2       	ldi	r24, 0x20	; 32
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <fputc>
 4f2:	01 50       	subi	r16, 0x01	; 1
 4f4:	f4 cf       	rjmp	.-24     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4f6:	f1 01       	movw	r30, r2
 4f8:	84 91       	lpm	r24, Z
 4fa:	47 fc       	sbrc	r4, 7
 4fc:	80 81       	ld	r24, Z
 4fe:	ff ef       	ldi	r31, 0xFF	; 255
 500:	2f 1a       	sub	r2, r31
 502:	3f 0a       	sbc	r3, r31
 504:	4f 0a       	sbc	r4, r31
 506:	b6 01       	movw	r22, r12
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <fputc>
 50e:	01 11       	cpse	r16, r1
 510:	01 50       	subi	r16, 0x01	; 1
 512:	21 e0       	ldi	r18, 0x01	; 1
 514:	a2 1a       	sub	r10, r18
 516:	b1 08       	sbc	r11, r1
 518:	a1 14       	cp	r10, r1
 51a:	b1 04       	cpc	r11, r1
 51c:	61 f7       	brne	.-40     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 51e:	f5 c0       	rjmp	.+490    	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 520:	84 36       	cpi	r24, 0x64	; 100
 522:	11 f0       	breq	.+4      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 524:	89 36       	cpi	r24, 0x69	; 105
 526:	71 f5       	brne	.+92     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 528:	f7 01       	movw	r30, r14
 52a:	17 ff       	sbrs	r17, 7
 52c:	08 c0       	rjmp	.+16     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 52e:	60 81       	ld	r22, Z
 530:	71 81       	ldd	r23, Z+1	; 0x01
 532:	82 81       	ldd	r24, Z+2	; 0x02
 534:	93 81       	ldd	r25, Z+3	; 0x03
 536:	97 01       	movw	r18, r14
 538:	2c 5f       	subi	r18, 0xFC	; 252
 53a:	3f 4f       	sbci	r19, 0xFF	; 255
 53c:	09 c0       	rjmp	.+18     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 53e:	60 81       	ld	r22, Z
 540:	71 81       	ldd	r23, Z+1	; 0x01
 542:	07 2e       	mov	r0, r23
 544:	00 0c       	add	r0, r0
 546:	88 0b       	sbc	r24, r24
 548:	99 0b       	sbc	r25, r25
 54a:	97 01       	movw	r18, r14
 54c:	2e 5f       	subi	r18, 0xFE	; 254
 54e:	3f 4f       	sbci	r19, 0xFF	; 255
 550:	79 01       	movw	r14, r18
 552:	1f 76       	andi	r17, 0x6F	; 111
 554:	31 2e       	mov	r3, r17
 556:	97 ff       	sbrs	r25, 7
 558:	0a c0       	rjmp	.+20     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 55a:	90 95       	com	r25
 55c:	80 95       	com	r24
 55e:	70 95       	com	r23
 560:	61 95       	neg	r22
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	31 2f       	mov	r19, r17
 56a:	30 68       	ori	r19, 0x80	; 128
 56c:	33 2e       	mov	r3, r19
 56e:	2a e0       	ldi	r18, 0x0A	; 10
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	ae 01       	movw	r20, r28
 574:	4f 5f       	subi	r20, 0xFF	; 255
 576:	5f 4f       	sbci	r21, 0xFF	; 255
 578:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__ultoa_invert>
 57c:	48 2e       	mov	r4, r24
 57e:	4c 85       	ldd	r20, Y+12	; 0x0c
 580:	44 1a       	sub	r4, r20
 582:	4a c0       	rjmp	.+148    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 584:	85 37       	cpi	r24, 0x75	; 117
 586:	29 f4       	brne	.+10     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 588:	1f 7e       	andi	r17, 0xEF	; 239
 58a:	a1 2e       	mov	r10, r17
 58c:	2a e0       	ldi	r18, 0x0A	; 10
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	25 c0       	rjmp	.+74     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 592:	51 2f       	mov	r21, r17
 594:	59 7f       	andi	r21, 0xF9	; 249
 596:	a5 2e       	mov	r10, r21
 598:	8f 36       	cpi	r24, 0x6F	; 111
 59a:	c1 f0       	breq	.+48     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 59c:	18 f4       	brcc	.+6      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 59e:	88 35       	cpi	r24, 0x58	; 88
 5a0:	79 f0       	breq	.+30     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5a2:	bd c0       	rjmp	.+378    	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 5a4:	80 37       	cpi	r24, 0x70	; 112
 5a6:	19 f0       	breq	.+6      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 5a8:	88 37       	cpi	r24, 0x78	; 120
 5aa:	21 f0       	breq	.+8      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5ac:	b8 c0       	rjmp	.+368    	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 5ae:	85 2f       	mov	r24, r21
 5b0:	80 61       	ori	r24, 0x10	; 16
 5b2:	a8 2e       	mov	r10, r24
 5b4:	a4 fe       	sbrs	r10, 4
 5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5b8:	9a 2d       	mov	r25, r10
 5ba:	94 60       	ori	r25, 0x04	; 4
 5bc:	a9 2e       	mov	r10, r25
 5be:	09 c0       	rjmp	.+18     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5c0:	14 ff       	sbrs	r17, 4
 5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5c4:	a5 2f       	mov	r26, r21
 5c6:	a6 60       	ori	r26, 0x06	; 6
 5c8:	aa 2e       	mov	r10, r26
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5cc:	28 e0       	ldi	r18, 0x08	; 8
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5d2:	20 e1       	ldi	r18, 0x10	; 16
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5d8:	20 e1       	ldi	r18, 0x10	; 16
 5da:	32 e0       	ldi	r19, 0x02	; 2
 5dc:	f7 01       	movw	r30, r14
 5de:	a7 fe       	sbrs	r10, 7
 5e0:	08 c0       	rjmp	.+16     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5e2:	60 81       	ld	r22, Z
 5e4:	71 81       	ldd	r23, Z+1	; 0x01
 5e6:	82 81       	ldd	r24, Z+2	; 0x02
 5e8:	93 81       	ldd	r25, Z+3	; 0x03
 5ea:	a7 01       	movw	r20, r14
 5ec:	4c 5f       	subi	r20, 0xFC	; 252
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5f2:	60 81       	ld	r22, Z
 5f4:	71 81       	ldd	r23, Z+1	; 0x01
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	a7 01       	movw	r20, r14
 5fc:	4e 5f       	subi	r20, 0xFE	; 254
 5fe:	5f 4f       	sbci	r21, 0xFF	; 255
 600:	7a 01       	movw	r14, r20
 602:	ae 01       	movw	r20, r28
 604:	4f 5f       	subi	r20, 0xFF	; 255
 606:	5f 4f       	sbci	r21, 0xFF	; 255
 608:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__ultoa_invert>
 60c:	48 2e       	mov	r4, r24
 60e:	5c 85       	ldd	r21, Y+12	; 0x0c
 610:	45 1a       	sub	r4, r21
 612:	8a 2d       	mov	r24, r10
 614:	8f 77       	andi	r24, 0x7F	; 127
 616:	38 2e       	mov	r3, r24
 618:	36 fe       	sbrs	r3, 6
 61a:	0d c0       	rjmp	.+26     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 61c:	93 2d       	mov	r25, r3
 61e:	9e 7f       	andi	r25, 0xFE	; 254
 620:	a9 2e       	mov	r10, r25
 622:	4b 14       	cp	r4, r11
 624:	58 f4       	brcc	.+22     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 626:	34 fe       	sbrs	r3, 4
 628:	0b c0       	rjmp	.+22     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 62a:	32 fc       	sbrc	r3, 2
 62c:	09 c0       	rjmp	.+18     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 62e:	a3 2d       	mov	r26, r3
 630:	ae 7e       	andi	r26, 0xEE	; 238
 632:	aa 2e       	mov	r10, r26
 634:	05 c0       	rjmp	.+10     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 636:	14 2d       	mov	r17, r4
 638:	a3 2c       	mov	r10, r3
 63a:	03 c0       	rjmp	.+6      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 63c:	14 2d       	mov	r17, r4
 63e:	01 c0       	rjmp	.+2      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 640:	1b 2d       	mov	r17, r11
 642:	a4 fe       	sbrs	r10, 4
 644:	0e c0       	rjmp	.+28     	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 646:	fe 01       	movw	r30, r28
 648:	e4 0d       	add	r30, r4
 64a:	f1 1d       	adc	r31, r1
 64c:	80 81       	ld	r24, Z
 64e:	80 33       	cpi	r24, 0x30	; 48
 650:	21 f4       	brne	.+8      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 652:	ea 2d       	mov	r30, r10
 654:	e9 7e       	andi	r30, 0xE9	; 233
 656:	ae 2e       	mov	r10, r30
 658:	08 c0       	rjmp	.+16     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 65a:	a2 fe       	sbrs	r10, 2
 65c:	05 c0       	rjmp	.+10     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 65e:	1e 5f       	subi	r17, 0xFE	; 254
 660:	04 c0       	rjmp	.+8      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 662:	8a 2d       	mov	r24, r10
 664:	86 78       	andi	r24, 0x86	; 134
 666:	09 f0       	breq	.+2      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 668:	1f 5f       	subi	r17, 0xFF	; 255
 66a:	a3 fc       	sbrc	r10, 3
 66c:	11 c0       	rjmp	.+34     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 66e:	a0 fe       	sbrs	r10, 0
 670:	06 c0       	rjmp	.+12     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 672:	10 17       	cp	r17, r16
 674:	88 f4       	brcc	.+34     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 676:	04 0d       	add	r16, r4
 678:	b0 2e       	mov	r11, r16
 67a:	b1 1a       	sub	r11, r17
 67c:	0e c0       	rjmp	.+28     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 67e:	10 17       	cp	r17, r16
 680:	60 f4       	brcc	.+24     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 682:	b6 01       	movw	r22, r12
 684:	80 e2       	ldi	r24, 0x20	; 32
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <fputc>
 68c:	1f 5f       	subi	r17, 0xFF	; 255
 68e:	f7 cf       	rjmp	.-18     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 690:	10 17       	cp	r17, r16
 692:	18 f4       	brcc	.+6      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 694:	01 1b       	sub	r16, r17
 696:	02 c0       	rjmp	.+4      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 698:	b4 2c       	mov	r11, r4
 69a:	00 e0       	ldi	r16, 0x00	; 0
 69c:	a4 fe       	sbrs	r10, 4
 69e:	10 c0       	rjmp	.+32     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6a0:	b6 01       	movw	r22, r12
 6a2:	80 e3       	ldi	r24, 0x30	; 48
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <fputc>
 6aa:	a2 fe       	sbrs	r10, 2
 6ac:	17 c0       	rjmp	.+46     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6ae:	a1 fc       	sbrc	r10, 1
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6b2:	88 e7       	ldi	r24, 0x78	; 120
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6b8:	88 e5       	ldi	r24, 0x58	; 88
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	b6 01       	movw	r22, r12
 6be:	0c c0       	rjmp	.+24     	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
 6c0:	8a 2d       	mov	r24, r10
 6c2:	86 78       	andi	r24, 0x86	; 134
 6c4:	59 f0       	breq	.+22     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6c6:	a1 fe       	sbrs	r10, 1
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6ca:	8b e2       	ldi	r24, 0x2B	; 43
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6ce:	80 e2       	ldi	r24, 0x20	; 32
 6d0:	a7 fc       	sbrc	r10, 7
 6d2:	8d e2       	ldi	r24, 0x2D	; 45
 6d4:	b6 01       	movw	r22, r12
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <fputc>
 6dc:	4b 14       	cp	r4, r11
 6de:	38 f4       	brcc	.+14     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6e0:	b6 01       	movw	r22, r12
 6e2:	80 e3       	ldi	r24, 0x30	; 48
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <fputc>
 6ea:	ba 94       	dec	r11
 6ec:	f7 cf       	rjmp	.-18     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6ee:	4a 94       	dec	r4
 6f0:	e1 e0       	ldi	r30, 0x01	; 1
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	ec 0f       	add	r30, r28
 6f6:	fd 1f       	adc	r31, r29
 6f8:	e4 0d       	add	r30, r4
 6fa:	f1 1d       	adc	r31, r1
 6fc:	80 81       	ld	r24, Z
 6fe:	b6 01       	movw	r22, r12
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <fputc>
 706:	41 10       	cpse	r4, r1
 708:	f2 cf       	rjmp	.-28     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 70a:	00 23       	and	r16, r16
 70c:	09 f4       	brne	.+2      	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 70e:	30 ce       	rjmp	.-928    	; 0x370 <vfprintf+0x5e>
 710:	b6 01       	movw	r22, r12
 712:	80 e2       	ldi	r24, 0x20	; 32
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <fputc>
 71a:	01 50       	subi	r16, 0x01	; 1
 71c:	f6 cf       	rjmp	.-20     	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 71e:	f6 01       	movw	r30, r12
 720:	87 81       	ldd	r24, Z+7	; 0x07
 722:	90 85       	ldd	r25, Z+8	; 0x08
 724:	02 c0       	rjmp	.+4      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
 726:	8f ef       	ldi	r24, 0xFF	; 255
 728:	9f ef       	ldi	r25, 0xFF	; 255
 72a:	62 96       	adiw	r28, 0x12	; 18
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	de bf       	out	0x3e, r29	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	cd bf       	out	0x3d, r28	; 61
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	1f 91       	pop	r17
 73c:	0f 91       	pop	r16
 73e:	ff 90       	pop	r15
 740:	ef 90       	pop	r14
 742:	df 90       	pop	r13
 744:	cf 90       	pop	r12
 746:	bf 90       	pop	r11
 748:	af 90       	pop	r10
 74a:	9f 90       	pop	r9
 74c:	8f 90       	pop	r8
 74e:	7f 90       	pop	r7
 750:	6f 90       	pop	r6
 752:	4f 90       	pop	r4
 754:	3f 90       	pop	r3
 756:	2f 90       	pop	r2
 758:	08 95       	ret

Disassembly of section .text.avrlibc:

00002a18 <strnlen>:
    2a18:	cf 92       	push	r12
    2a1a:	df 92       	push	r13
    2a1c:	ef 92       	push	r14
    2a1e:	6b 01       	movw	r12, r22
    2a20:	e8 2e       	mov	r14, r24
    2a22:	a8 2f       	mov	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	41 15       	cp	r20, r1
    2a28:	51 05       	cpc	r21, r1
    2a2a:	31 f4       	brne	.+12     	; 0x2a38 <strnlen+0x20>
    2a2c:	8c 19       	sub	r24, r12
    2a2e:	9d 09       	sbc	r25, r13
    2a30:	ef 90       	pop	r14
    2a32:	df 90       	pop	r13
    2a34:	cf 90       	pop	r12
    2a36:	08 95       	ret
    2a38:	fc 01       	movw	r30, r24
    2a3a:	24 91       	lpm	r18, Z
    2a3c:	a7 fd       	sbrc	r26, 7
    2a3e:	20 81       	ld	r18, Z
    2a40:	22 23       	and	r18, r18
    2a42:	a1 f3       	breq	.-24     	; 0x2a2c <strnlen+0x14>
    2a44:	01 96       	adiw	r24, 0x01	; 1
    2a46:	a1 1d       	adc	r26, r1
    2a48:	41 50       	subi	r20, 0x01	; 1
    2a4a:	51 09       	sbc	r21, r1
    2a4c:	ec cf       	rjmp	.-40     	; 0x2a26 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00001c7e <fputc>:
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	fb 01       	movw	r30, r22
    1c88:	24 81       	ldd	r18, Z+4	; 0x04
    1c8a:	21 fd       	sbrc	r18, 1
    1c8c:	03 c0       	rjmp	.+6      	; 0x1c94 <fputc+0x16>
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	9f ef       	ldi	r25, 0xFF	; 255
    1c92:	2c c0       	rjmp	.+88     	; 0x1cec <fputc+0x6e>
    1c94:	22 ff       	sbrs	r18, 2
    1c96:	16 c0       	rjmp	.+44     	; 0x1cc4 <fputc+0x46>
    1c98:	47 81       	ldd	r20, Z+7	; 0x07
    1c9a:	50 85       	ldd	r21, Z+8	; 0x08
    1c9c:	25 81       	ldd	r18, Z+5	; 0x05
    1c9e:	36 81       	ldd	r19, Z+6	; 0x06
    1ca0:	42 17       	cp	r20, r18
    1ca2:	53 07       	cpc	r21, r19
    1ca4:	44 f4       	brge	.+16     	; 0x1cb6 <fputc+0x38>
    1ca6:	a0 81       	ld	r26, Z
    1ca8:	b1 81       	ldd	r27, Z+1	; 0x01
    1caa:	9d 01       	movw	r18, r26
    1cac:	2f 5f       	subi	r18, 0xFF	; 255
    1cae:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb0:	31 83       	std	Z+1, r19	; 0x01
    1cb2:	20 83       	st	Z, r18
    1cb4:	8c 93       	st	X, r24
    1cb6:	27 81       	ldd	r18, Z+7	; 0x07
    1cb8:	30 85       	ldd	r19, Z+8	; 0x08
    1cba:	2f 5f       	subi	r18, 0xFF	; 255
    1cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbe:	30 87       	std	Z+8, r19	; 0x08
    1cc0:	27 83       	std	Z+7, r18	; 0x07
    1cc2:	14 c0       	rjmp	.+40     	; 0x1cec <fputc+0x6e>
    1cc4:	8b 01       	movw	r16, r22
    1cc6:	ec 01       	movw	r28, r24
    1cc8:	fb 01       	movw	r30, r22
    1cca:	01 84       	ldd	r0, Z+9	; 0x09
    1ccc:	f2 85       	ldd	r31, Z+10	; 0x0a
    1cce:	e0 2d       	mov	r30, r0
    1cd0:	09 95       	icall
    1cd2:	89 2b       	or	r24, r25
    1cd4:	e1 f6       	brne	.-72     	; 0x1c8e <fputc+0x10>
    1cd6:	d8 01       	movw	r26, r16
    1cd8:	17 96       	adiw	r26, 0x07	; 7
    1cda:	8d 91       	ld	r24, X+
    1cdc:	9c 91       	ld	r25, X
    1cde:	18 97       	sbiw	r26, 0x08	; 8
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	18 96       	adiw	r26, 0x08	; 8
    1ce4:	9c 93       	st	X, r25
    1ce6:	8e 93       	st	-X, r24
    1ce8:	17 97       	sbiw	r26, 0x07	; 7
    1cea:	ce 01       	movw	r24, r28
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	08 95       	ret

Disassembly of section .text.avrlibc:

000015ea <__ultoa_invert>:
    15ea:	fa 01       	movw	r30, r20
    15ec:	aa 27       	eor	r26, r26
    15ee:	28 30       	cpi	r18, 0x08	; 8
    15f0:	51 f1       	breq	.+84     	; 0x1646 <__ultoa_invert+0x5c>
    15f2:	20 31       	cpi	r18, 0x10	; 16
    15f4:	81 f1       	breq	.+96     	; 0x1656 <__ultoa_invert+0x6c>
    15f6:	e8 94       	clt
    15f8:	6f 93       	push	r22
    15fa:	6e 7f       	andi	r22, 0xFE	; 254
    15fc:	6e 5f       	subi	r22, 0xFE	; 254
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	8f 4f       	sbci	r24, 0xFF	; 255
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	af 4f       	sbci	r26, 0xFF	; 255
    1606:	b1 e0       	ldi	r27, 0x01	; 1
    1608:	3e d0       	rcall	.+124    	; 0x1686 <__ultoa_invert+0x9c>
    160a:	b4 e0       	ldi	r27, 0x04	; 4
    160c:	3c d0       	rcall	.+120    	; 0x1686 <__ultoa_invert+0x9c>
    160e:	67 0f       	add	r22, r23
    1610:	78 1f       	adc	r23, r24
    1612:	89 1f       	adc	r24, r25
    1614:	9a 1f       	adc	r25, r26
    1616:	a1 1d       	adc	r26, r1
    1618:	68 0f       	add	r22, r24
    161a:	79 1f       	adc	r23, r25
    161c:	8a 1f       	adc	r24, r26
    161e:	91 1d       	adc	r25, r1
    1620:	a1 1d       	adc	r26, r1
    1622:	6a 0f       	add	r22, r26
    1624:	71 1d       	adc	r23, r1
    1626:	81 1d       	adc	r24, r1
    1628:	91 1d       	adc	r25, r1
    162a:	a1 1d       	adc	r26, r1
    162c:	20 d0       	rcall	.+64     	; 0x166e <__ultoa_invert+0x84>
    162e:	09 f4       	brne	.+2      	; 0x1632 <__ultoa_invert+0x48>
    1630:	68 94       	set
    1632:	3f 91       	pop	r19
    1634:	2a e0       	ldi	r18, 0x0A	; 10
    1636:	26 9f       	mul	r18, r22
    1638:	11 24       	eor	r1, r1
    163a:	30 19       	sub	r19, r0
    163c:	30 5d       	subi	r19, 0xD0	; 208
    163e:	31 93       	st	Z+, r19
    1640:	de f6       	brtc	.-74     	; 0x15f8 <__ultoa_invert+0xe>
    1642:	cf 01       	movw	r24, r30
    1644:	08 95       	ret
    1646:	46 2f       	mov	r20, r22
    1648:	47 70       	andi	r20, 0x07	; 7
    164a:	40 5d       	subi	r20, 0xD0	; 208
    164c:	41 93       	st	Z+, r20
    164e:	b3 e0       	ldi	r27, 0x03	; 3
    1650:	0f d0       	rcall	.+30     	; 0x1670 <__ultoa_invert+0x86>
    1652:	c9 f7       	brne	.-14     	; 0x1646 <__ultoa_invert+0x5c>
    1654:	f6 cf       	rjmp	.-20     	; 0x1642 <__ultoa_invert+0x58>
    1656:	46 2f       	mov	r20, r22
    1658:	4f 70       	andi	r20, 0x0F	; 15
    165a:	40 5d       	subi	r20, 0xD0	; 208
    165c:	4a 33       	cpi	r20, 0x3A	; 58
    165e:	18 f0       	brcs	.+6      	; 0x1666 <__ultoa_invert+0x7c>
    1660:	49 5d       	subi	r20, 0xD9	; 217
    1662:	31 fd       	sbrc	r19, 1
    1664:	40 52       	subi	r20, 0x20	; 32
    1666:	41 93       	st	Z+, r20
    1668:	02 d0       	rcall	.+4      	; 0x166e <__ultoa_invert+0x84>
    166a:	a9 f7       	brne	.-22     	; 0x1656 <__ultoa_invert+0x6c>
    166c:	ea cf       	rjmp	.-44     	; 0x1642 <__ultoa_invert+0x58>
    166e:	b4 e0       	ldi	r27, 0x04	; 4
    1670:	a6 95       	lsr	r26
    1672:	97 95       	ror	r25
    1674:	87 95       	ror	r24
    1676:	77 95       	ror	r23
    1678:	67 95       	ror	r22
    167a:	ba 95       	dec	r27
    167c:	c9 f7       	brne	.-14     	; 0x1670 <__ultoa_invert+0x86>
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	61 05       	cpc	r22, r1
    1682:	71 05       	cpc	r23, r1
    1684:	08 95       	ret
    1686:	9b 01       	movw	r18, r22
    1688:	ac 01       	movw	r20, r24
    168a:	0a 2e       	mov	r0, r26
    168c:	06 94       	lsr	r0
    168e:	57 95       	ror	r21
    1690:	47 95       	ror	r20
    1692:	37 95       	ror	r19
    1694:	27 95       	ror	r18
    1696:	ba 95       	dec	r27
    1698:	c9 f7       	brne	.-14     	; 0x168c <__ultoa_invert+0xa2>
    169a:	62 0f       	add	r22, r18
    169c:	73 1f       	adc	r23, r19
    169e:	84 1f       	adc	r24, r20
    16a0:	95 1f       	adc	r25, r21
    16a2:	a0 1d       	adc	r26, r0
    16a4:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00002974 <__prologue_saves__>:
    2974:	2f 92       	push	r2
    2976:	3f 92       	push	r3
    2978:	4f 92       	push	r4
    297a:	5f 92       	push	r5
    297c:	6f 92       	push	r6
    297e:	7f 92       	push	r7
    2980:	8f 92       	push	r8
    2982:	9f 92       	push	r9
    2984:	af 92       	push	r10
    2986:	bf 92       	push	r11
    2988:	cf 92       	push	r12
    298a:	df 92       	push	r13
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	ca 1b       	sub	r28, r26
    299e:	db 0b       	sbc	r29, r27
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00002a4e <__epilogue_restores__>:
    2a4e:	2a 88       	ldd	r2, Y+18	; 0x12
    2a50:	39 88       	ldd	r3, Y+17	; 0x11
    2a52:	48 88       	ldd	r4, Y+16	; 0x10
    2a54:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a56:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a58:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a60:	b9 84       	ldd	r11, Y+9	; 0x09
    2a62:	c8 84       	ldd	r12, Y+8	; 0x08
    2a64:	df 80       	ldd	r13, Y+7	; 0x07
    2a66:	ee 80       	ldd	r14, Y+6	; 0x06
    2a68:	fd 80       	ldd	r15, Y+5	; 0x05
    2a6a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a6c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a6e:	aa 81       	ldd	r26, Y+2	; 0x02
    2a70:	b9 81       	ldd	r27, Y+1	; 0x01
    2a72:	ce 0f       	add	r28, r30
    2a74:	d1 1d       	adc	r29, r1
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	ed 01       	movw	r28, r26
    2a82:	08 95       	ret
