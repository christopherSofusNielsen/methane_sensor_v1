
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001c5c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000691  00800100  00800100  00001c5c  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c0  00000000  00000000  00001cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005129  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000150e  00000000  00000000  000071a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b5c  00000000  00000000  000086ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a0c  00000000  00000000  0000a20c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005aa  00000000  00000000  0000ac18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021d1  00000000  00000000  0000b1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000380  00000000  00000000  0000d393  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00001b9a  00001b9a  00001c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d714  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_3 00000014  00001b46  00001b46  00001bfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_16 0000004e  000017a0  000017a0  00001854  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss._cb      00000002  0080091c  0080091c  00001c5c  2**0
                  ALLOC
 17 .text.__vector_13 0000004e  000017ee  000017ee  000018a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss._cb      00000002  0080091e  0080091e  00001c5c  2**0
                  ALLOC
 19 .text.__vector_9 0000007c  0000133c  0000133c  000013f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.cnt      00000001  00800928  00800928  00001c5c  2**0
                  ALLOC
 21 .bss.callbacks 0000000a  00800908  00800908  00001c5c  2**0
                  ALLOC
 22 .text.__vector_22 0000006e  000015fe  000015fe  000016b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_20 00000074  000014a6  000014a6  0000155a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.rx_buffer_has_message 00000001  00800929  00800929  00001c5c  2**0
                  ALLOC
 25 .bss.rx_buffer_data_len 00000001  0080092a  0080092a  00001c5c  2**0
                  ALLOC
 26 .bss.tx_buffer_cursor 00000002  00800920  00800920  00001c5c  2**0
                  ALLOC
 27 .bss.tx_buffer_data_len 00000002  00800922  00800922  00001c5c  2**0
                  ALLOC
 28 .text.uart1_hal_init 0000003c  00001882  00001882  00001936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.uart1_hal_send_string 00000096  00001182  00001182  00001236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_30 0000006e  0000166c  0000166c  00001720  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_28 00000074  0000151a  0000151a  000015ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.rx_buffer_has_message 00000001  0080092b  0080092b  00001c5c  2**0
                  ALLOC
 33 .bss.rx_buffer_data_len 00000001  0080092c  0080092c  00001c5c  2**0
                  ALLOC
 34 .bss.rx_buffer 0000004b  008008bd  008008bd  00001c5c  2**0
                  ALLOC
 35 .bss.tx_buffer_cursor 00000002  00800924  00800924  00001c5c  2**0
                  ALLOC
 36 .bss.tx_buffer_data_len 00000002  00800926  00800926  00001c5c  2**0
                  ALLOC
 37 .bss.tx_buffer 0000012c  00800791  00800791  00001c5c  2**0
                  ALLOC
 38 .text.main    0000000a  00001b66  00001b66  00001c1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.MRPP_init_group 00000018  00001b2e  00001b2e  00001be2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.MRPP_add_collection_data_INT16 00000070  0000158e  0000158e  00001642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.MRPP_is_body_package_ready 00000022  00001a6a  00001a6a  00001b1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.MRPP_get_ready_body_package 00000096  00001218  00001218  000012cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.MRPP_set_body_sent 0000000c  00001b5a  00001b5a  00001c0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.MRPP_get_header_package 00000022  00001a8c  00001a8c  00001b40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.MRPP_get_tail_package 00000022  00001aae  00001aae  00001b62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.MRPP_all_body_package_sent 0000000a  00001b70  00001b70  00001c24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.mrpp_data_add_int16 0000008e  000012ae  000012ae  00001362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.mrpp_data_get 00000030  00001962  00001962  00001a16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.dynamic_data_type_length 00000008  00001b84  00001b84  00001c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.add_dynamic_data_types 000000b0  000010d2  000010d2  00001186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.generator_header_tail 00000068  000016da  000016da  0000178e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.update_bodies 0000012a  00000e06  00000e06  00000eba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.mrpp_state_init 00000162  00000ca4  00000ca4  00000d58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.mrpp_state_get_header 00000008  00001b8c  00001b8c  00001c40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.mrpp_state_get_tail 0000000a  00001b7a  00001b7a  00001c2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.mrpp_state_set_collection 00000076  00001430  00001430  000014e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.mrpp_state_is_body_ready 00000030  00001992  00001992  00001a46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.mrpp_state_all_bodies_sent 0000002a  00001a1a  00001a1a  00001ace  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.mrpp_state_get_ready_body 000000e6  00000f30  00000f30  00000fe4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.mrpp_state_set_body_sent 00000020  00001ad0  00001ad0  00001b84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.mrpp_state_get_collection_address 0000002c  000019c2  000019c2  00001a76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.util_fill_data 00000020  00001af0  00001af0  00001ba4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .progmemx.data 00000005  0000020b  0000020b  000002bf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 64 .text.util_2_hex_str 0000005e  00001742  00001742  000017f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .progmemx.data 00000027  000001dc  000001dc  00000290  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 66 .rodata       0000000a  00800912  00001b9e  00001c52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 67 .text.test_report_example_2 000001a0  00000b04  00000b04  00000bb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.test_MRPP_module_start 00000026  00001a44  00001a44  00001af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.test_runner 00000006  00001b94  00001b94  00001c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .progmemx.data 00000008  00000203  00000203  000002b7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 71 .text.avrlibc 00000744  00000210  00000210  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.libgcc.mul 0000001e  00001b10  00001b10  00001bc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.libgcc.prologue 00000038  000018be  000018be  00001972  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.libgcc.prologue 00000036  000018f6  000018f6  000019aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.avrlibc 000001b0  00000954  00000954  00000a08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.avrlibc 0000002c  000019ee  000019ee  00001aa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.avrlibc 00000036  0000192c  0000192c  000019e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.avrlibc 00000078  000013b8  000013b8  0000146c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.avrlibc 00000046  0000183c  0000183c  000018f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.avrlibc 000000bc  00001016  00001016  000010ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__ctors_end>
   4:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
   8:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
   c:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__vector_3>
  10:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  14:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  18:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  1c:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  20:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  24:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_9>
  28:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  2c:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  30:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  34:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_13>
  38:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  3c:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  40:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__vector_16>
  44:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  48:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  4c:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  50:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_20>
  54:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  58:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__vector_22>
  5c:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  60:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  64:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  68:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  6c:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  70:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__vector_28>
  74:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__bad_interrupt>
  78:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	09 12       	cpse	r0, r25
  80:	80 09       	sbc	r24, r0
  82:	12 09       	sbc	r17, r2
  84:	1c 00       	.word	0x001c	; ????
  86:	1b 9e       	mul	r1, r27
  88:	09 1c       	adc	r0, r9
  8a:	09 2d       	mov	r16, r9
  8c:	80 00       	.word	0x0080	; ????

0000008e <__trampolines_end>:
  8e:	00 40       	sbci	r16, 0x00	; 0
  90:	7a 10       	cpse	r7, r10
  92:	f3 5a       	subi	r31, 0xA3	; 163
  94:	00 a0       	ldd	r0, Z+32	; 0x20
  96:	72 4e       	sbci	r23, 0xE2	; 226
  98:	18 09       	sbc	r17, r8
  9a:	00 10       	cpse	r0, r0
  9c:	a5 d4       	rcall	.+2378   	; 0x9e8 <__ftoa_engine+0x94>
  9e:	e8 00       	.word	0x00e8	; ????
  a0:	00 e8       	ldi	r16, 0x80	; 128
  a2:	76 48       	sbci	r23, 0x86	; 134
  a4:	17 00       	.word	0x0017	; ????
  a6:	00 e4       	ldi	r16, 0x40	; 64
  a8:	0b 54       	subi	r16, 0x4B	; 75
  aa:	02 00       	.word	0x0002	; ????
  ac:	00 ca       	rjmp	.-3072   	; 0xfffff4ae <__eeprom_end+0xff7ef4ae>
  ae:	9a 3b       	cpi	r25, 0xBA	; 186
  b0:	00 00       	nop
  b2:	00 e1       	ldi	r16, 0x10	; 16
  b4:	f5 05       	cpc	r31, r5
  b6:	00 00       	nop
  b8:	80 96       	adiw	r24, 0x20	; 32
  ba:	98 00       	.word	0x0098	; ????
  bc:	00 00       	nop
  be:	40 42       	sbci	r20, 0x20	; 32
  c0:	0f 00       	.word	0x000f	; ????
  c2:	00 00       	nop
  c4:	a0 86       	std	Z+8, r10	; 0x08
  c6:	01 00       	.word	0x0001	; ????
  c8:	00 00       	nop
  ca:	10 27       	eor	r17, r16
  cc:	00 00       	nop
  ce:	00 00       	nop
  d0:	e8 03       	fmulsu	r22, r16
  d2:	00 00       	nop
  d4:	00 00       	nop
  d6:	64 00       	.word	0x0064	; ????
  d8:	00 00       	nop
  da:	00 00       	nop
  dc:	0a 00       	.word	0x000a	; ????
  de:	00 00       	nop
  e0:	00 00       	nop
  e2:	01 00       	.word	0x0001	; ????
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	2c 76       	andi	r18, 0x6C	; 108
  ea:	d8 88       	ldd	r13, Y+16	; 0x10
  ec:	dc 67       	ori	r29, 0x7C	; 124
  ee:	4f 08       	sbc	r4, r15
  f0:	23 df       	rcall	.-442    	; 0xffffff38 <__eeprom_end+0xff7eff38>
  f2:	c1 df       	rcall	.-126    	; 0x76 <__SREG__+0x37>
  f4:	ae 59       	subi	r26, 0x9E	; 158
  f6:	e1 b1       	in	r30, 0x01	; 1
  f8:	b7 96       	adiw	r30, 0x27	; 39
  fa:	e5 e3       	ldi	r30, 0x35	; 53
  fc:	e4 53       	subi	r30, 0x34	; 52
  fe:	c6 3a       	cpi	r28, 0xA6	; 166
 100:	e6 51       	subi	r30, 0x16	; 22
 102:	99 76       	andi	r25, 0x69	; 105
 104:	96 e8       	ldi	r25, 0x86	; 134
 106:	e6 c2       	rjmp	.+1484   	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
 108:	84 26       	eor	r8, r20
 10a:	eb 89       	ldd	r30, Y+19	; 0x13
 10c:	8c 9b       	sbis	0x11, 4	; 17
 10e:	62 ed       	ldi	r22, 0xD2	; 210
 110:	40 7c       	andi	r20, 0xC0	; 192
 112:	6f fc       	.word	0xfc6f	; ????
 114:	ef bc       	out	0x2f, r14	; 47
 116:	9c 9f       	mul	r25, r28
 118:	40 f2       	brcs	.-112    	; 0xaa <__trampolines_end+0x1c>
 11a:	ba a5       	ldd	r27, Y+42	; 0x2a
 11c:	6f a5       	ldd	r22, Y+47	; 0x2f
 11e:	f4 90       	lpm	r15, Z
 120:	05 5a       	subi	r16, 0xA5	; 165
 122:	2a f7       	brpl	.-54     	; 0xee <__trampolines_end+0x60>
 124:	5c 93       	st	X, r21
 126:	6b 6c       	ori	r22, 0xCB	; 203
 128:	f9 67       	ori	r31, 0x79	; 121
 12a:	6d c1       	rjmp	.+730    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 12c:	1b fc       	.word	0xfc1b	; ????
 12e:	e0 e4       	ldi	r30, 0x40	; 64
 130:	0d 47       	sbci	r16, 0x7D	; 125
 132:	fe f5       	brtc	.+126    	; 0x1b2 <__do_copy_data+0x1e>
 134:	20 e6       	ldi	r18, 0x60	; 96
 136:	b5 00       	.word	0x00b5	; ????
 138:	d0 ed       	ldi	r29, 0xD0	; 208
 13a:	90 2e       	mov	r9, r16
 13c:	03 00       	.word	0x0003	; ????
 13e:	94 35       	cpi	r25, 0x54	; 84
 140:	77 05       	cpc	r23, r7
 142:	00 80       	ld	r0, Z
 144:	84 1e       	adc	r8, r20
 146:	08 00       	.word	0x0008	; ????
 148:	00 20       	and	r0, r0
 14a:	4e 0a       	sbc	r4, r30
 14c:	00 00       	nop
 14e:	00 c8       	rjmp	.-4096   	; 0xfffff150 <__eeprom_end+0xff7ef150>
 150:	0c 33       	cpi	r16, 0x3C	; 60
 152:	33 33       	cpi	r19, 0x33	; 51
 154:	33 0f       	add	r19, r19
 156:	98 6e       	ori	r25, 0xE8	; 232
 158:	12 83       	std	Z+2, r17	; 0x02
 15a:	11 41       	sbci	r17, 0x11	; 17
 15c:	ef 8d       	ldd	r30, Y+31	; 0x1f
 15e:	21 14       	cp	r2, r1
 160:	89 3b       	cpi	r24, 0xB9	; 185
 162:	e6 55       	subi	r30, 0x56	; 86
 164:	16 cf       	rjmp	.-468    	; 0xffffff92 <__eeprom_end+0xff7eff92>
 166:	fe e6       	ldi	r31, 0x6E	; 110
 168:	db 18       	sub	r13, r11
 16a:	d1 84       	ldd	r13, Z+9	; 0x09
 16c:	4b 38       	cpi	r20, 0x8B	; 139
 16e:	1b f7       	brvc	.-58     	; 0x136 <__trampolines_end+0xa8>
 170:	7c 1d       	adc	r23, r12
 172:	90 1d       	adc	r25, r0
 174:	a4 bb       	out	0x14, r26	; 20
 176:	e4 24       	eor	r14, r4
 178:	20 32       	cpi	r18, 0x20	; 32
 17a:	84 72       	andi	r24, 0x24	; 36
 17c:	5e 22       	and	r5, r30
 17e:	81 00       	.word	0x0081	; ????
 180:	c9 f1       	breq	.+114    	; 0x1f4 <_etext+0x18>
 182:	24 ec       	ldi	r18, 0xC4	; 196
 184:	a1 e5       	ldi	r26, 0x51	; 81
 186:	3d 27       	eor	r19, r29

00000188 <__ctors_end>:
 188:	11 24       	eor	r1, r1
 18a:	1f be       	out	0x3f, r1	; 63
 18c:	cf ef       	ldi	r28, 0xFF	; 255
 18e:	d0 e1       	ldi	r29, 0x10	; 16
 190:	de bf       	out	0x3e, r29	; 62
 192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
 194:	ec e7       	ldi	r30, 0x7C	; 124
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	17 c0       	rjmp	.+46     	; 0x1ca <__do_clear_bss+0x8>
 19c:	b5 91       	lpm	r27, Z+
 19e:	a5 91       	lpm	r26, Z+
 1a0:	35 91       	lpm	r19, Z+
 1a2:	25 91       	lpm	r18, Z+
 1a4:	05 91       	lpm	r16, Z+
 1a6:	07 fd       	sbrc	r16, 7
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <__do_clear_bss>
 1aa:	95 91       	lpm	r25, Z+
 1ac:	85 91       	lpm	r24, Z+
 1ae:	ef 01       	movw	r28, r30
 1b0:	f9 2f       	mov	r31, r25
 1b2:	e8 2f       	mov	r30, r24
 1b4:	05 90       	lpm	r0, Z+
 1b6:	0d 92       	st	X+, r0
 1b8:	a2 17       	cp	r26, r18
 1ba:	b3 07       	cpc	r27, r19
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <__do_copy_data+0x20>
 1be:	fe 01       	movw	r30, r28
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <__do_clear_bss+0x8>

000001c2 <__do_clear_bss>:
 1c2:	1d 92       	st	X+, r1
 1c4:	a2 17       	cp	r26, r18
 1c6:	b3 07       	cpc	r27, r19
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <__do_clear_bss>
 1ca:	ed 38       	cpi	r30, 0x8D	; 141
 1cc:	f4 07       	cpc	r31, r20
 1ce:	31 f7       	brne	.-52     	; 0x19c <__do_copy_data+0x8>
 1d0:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <main>
 1d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>

Disassembly of section .text:

00001b9a <__bad_interrupt>:
    1b9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_3:

00001b46 <__vector_3>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
}

ISR(INT2_vect){
    1b46:	1f 92       	push	r1
    1b48:	0f 92       	push	r0
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	0f 92       	push	r0
    1b4e:	11 24       	eor	r1, r1
	
}
    1b50:	0f 90       	pop	r0
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	0f 90       	pop	r0
    1b56:	1f 90       	pop	r1
    1b58:	18 95       	reti

Disassembly of section .text.__vector_16:

000017a0 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    17a0:	1f 92       	push	r1
    17a2:	0f 92       	push	r0
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	0f 92       	push	r0
    17a8:	11 24       	eor	r1, r1
    17aa:	2f 93       	push	r18
    17ac:	3f 93       	push	r19
    17ae:	4f 93       	push	r20
    17b0:	5f 93       	push	r21
    17b2:	6f 93       	push	r22
    17b4:	7f 93       	push	r23
    17b6:	8f 93       	push	r24
    17b8:	9f 93       	push	r25
    17ba:	af 93       	push	r26
    17bc:	bf 93       	push	r27
    17be:	ef 93       	push	r30
    17c0:	ff 93       	push	r31
	_cb();
    17c2:	e0 91 1c 09 	lds	r30, 0x091C	; 0x80091c <_cb>
    17c6:	f0 91 1d 09 	lds	r31, 0x091D	; 0x80091d <_cb+0x1>
    17ca:	09 95       	icall
}
    17cc:	ff 91       	pop	r31
    17ce:	ef 91       	pop	r30
    17d0:	bf 91       	pop	r27
    17d2:	af 91       	pop	r26
    17d4:	9f 91       	pop	r25
    17d6:	8f 91       	pop	r24
    17d8:	7f 91       	pop	r23
    17da:	6f 91       	pop	r22
    17dc:	5f 91       	pop	r21
    17de:	4f 91       	pop	r20
    17e0:	3f 91       	pop	r19
    17e2:	2f 91       	pop	r18
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

Disassembly of section .text.__vector_13:

000017ee <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	ef 93       	push	r30
    180e:	ff 93       	push	r31
	_cb();
    1810:	e0 91 1e 09 	lds	r30, 0x091E	; 0x80091e <_cb>
    1814:	f0 91 1f 09 	lds	r31, 0x091F	; 0x80091f <_cb+0x1>
    1818:	09 95       	icall
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
    181e:	bf 91       	pop	r27
    1820:	af 91       	pop	r26
    1822:	9f 91       	pop	r25
    1824:	8f 91       	pop	r24
    1826:	7f 91       	pop	r23
    1828:	6f 91       	pop	r22
    182a:	5f 91       	pop	r21
    182c:	4f 91       	pop	r20
    182e:	3f 91       	pop	r19
    1830:	2f 91       	pop	r18
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	0f 90       	pop	r0
    1838:	1f 90       	pop	r1
    183a:	18 95       	reti

Disassembly of section .text.__vector_9:

0000133c <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	2f 93       	push	r18
    1348:	3f 93       	push	r19
    134a:	4f 93       	push	r20
    134c:	5f 93       	push	r21
    134e:	6f 93       	push	r22
    1350:	7f 93       	push	r23
    1352:	8f 93       	push	r24
    1354:	9f 93       	push	r25
    1356:	af 93       	push	r26
    1358:	bf 93       	push	r27
    135a:	cf 93       	push	r28
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
	cnt++;
    1360:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <cnt>
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    136a:	80 32       	cpi	r24, 0x20	; 32
    136c:	99 f4       	brne	.+38     	; 0x1394 <__vector_9+0x58>
		cnt=0;
    136e:	10 92 28 09 	sts	0x0928, r1	; 0x800928 <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    1372:	c0 e0       	ldi	r28, 0x00	; 0
    1374:	0d c0       	rjmp	.+26     	; 0x1390 <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    1376:	ec 2f       	mov	r30, r28
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	e8 5f       	subi	r30, 0xF8	; 248
    1380:	f6 4f       	sbci	r31, 0xF6	; 246
    1382:	01 90       	ld	r0, Z+
    1384:	f0 81       	ld	r31, Z
    1386:	e0 2d       	mov	r30, r0
    1388:	30 97       	sbiw	r30, 0x00	; 0
    138a:	09 f0       	breq	.+2      	; 0x138e <__vector_9+0x52>
				callbacks[i]();
    138c:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    138e:	cf 5f       	subi	r28, 0xFF	; 255
    1390:	c5 30       	cpi	r28, 0x05	; 5
    1392:	88 f3       	brcs	.-30     	; 0x1376 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    1394:	ff 91       	pop	r31
    1396:	ef 91       	pop	r30
    1398:	cf 91       	pop	r28
    139a:	bf 91       	pop	r27
    139c:	af 91       	pop	r26
    139e:	9f 91       	pop	r25
    13a0:	8f 91       	pop	r24
    13a2:	7f 91       	pop	r23
    13a4:	6f 91       	pop	r22
    13a6:	5f 91       	pop	r21
    13a8:	4f 91       	pop	r20
    13aa:	3f 91       	pop	r19
    13ac:	2f 91       	pop	r18
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0
    13b4:	1f 90       	pop	r1
    13b6:	18 95       	reti

Disassembly of section .text.__vector_22:

000015fe <__vector_22>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART0_TX_vect){
    15fe:	1f 92       	push	r1
    1600:	0f 92       	push	r0
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	0f 92       	push	r0
    1606:	11 24       	eor	r1, r1
    1608:	2f 93       	push	r18
    160a:	3f 93       	push	r19
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	ef 93       	push	r30
    1612:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
    1614:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <tx_buffer_cursor>
    1618:	90 91 21 09 	lds	r25, 0x0921	; 0x800921 <tx_buffer_cursor+0x1>
    161c:	20 91 22 09 	lds	r18, 0x0922	; 0x800922 <tx_buffer_data_len>
    1620:	30 91 23 09 	lds	r19, 0x0923	; 0x800923 <tx_buffer_data_len+0x1>
    1624:	82 17       	cp	r24, r18
    1626:	93 07       	cpc	r25, r19
    1628:	70 f4       	brcc	.+28     	; 0x1646 <__vector_22+0x48>
		UDR0=tx_buffer[tx_buffer_cursor++];
    162a:	9c 01       	movw	r18, r24
    162c:	2f 5f       	subi	r18, 0xFF	; 255
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	30 93 21 09 	sts	0x0921, r19	; 0x800921 <tx_buffer_cursor+0x1>
    1634:	20 93 20 09 	sts	0x0920, r18	; 0x800920 <tx_buffer_cursor>
    1638:	fc 01       	movw	r30, r24
    163a:	ea 56       	subi	r30, 0x6A	; 106
    163c:	fe 4f       	sbci	r31, 0xFE	; 254
    163e:	80 81       	ld	r24, Z
    1640:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    1644:	08 c0       	rjmp	.+16     	; 0x1656 <__vector_22+0x58>
	}else{
		tx_buffer_cursor=0;
    1646:	10 92 21 09 	sts	0x0921, r1	; 0x800921 <tx_buffer_cursor+0x1>
    164a:	10 92 20 09 	sts	0x0920, r1	; 0x800920 <tx_buffer_cursor>
		tx_buffer_data_len=0;
    164e:	10 92 23 09 	sts	0x0923, r1	; 0x800923 <tx_buffer_data_len+0x1>
    1652:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <tx_buffer_data_len>
	}
}
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	3f 91       	pop	r19
    1660:	2f 91       	pop	r18
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	0f 90       	pop	r0
    1668:	1f 90       	pop	r1
    166a:	18 95       	reti

Disassembly of section .text.__vector_20:

000014a6 <__vector_20>:
	set_bit(UCSR0B, 3); //Enable Tx
	
	uint8_t data[1];
	data[0]=followUpByte;
	uart0_hal_send_message(data, 1);
}
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	0f 92       	push	r0
    14ae:	11 24       	eor	r1, r1
    14b0:	2f 93       	push	r18
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	ef 93       	push	r30
    14b8:	ff 93       	push	r31
    14ba:	80 91 29 09 	lds	r24, 0x0929	; 0x800929 <rx_buffer_has_message>
    14be:	81 11       	cpse	r24, r1
    14c0:	0e c0       	rjmp	.+28     	; 0x14de <__vector_20+0x38>
    14c2:	e0 91 2a 09 	lds	r30, 0x092A	; 0x80092a <rx_buffer_data_len>
    14c6:	e6 39       	cpi	r30, 0x96	; 150
    14c8:	50 f4       	brcc	.+20     	; 0x14de <__vector_20+0x38>
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	8e 0f       	add	r24, r30
    14ce:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <rx_buffer_data_len>
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    14d8:	e0 50       	subi	r30, 0x00	; 0
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 83       	st	Z, r24
    14de:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <rx_buffer_data_len>
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	80 f0       	brcs	.+32     	; 0x1506 <__vector_20+0x60>
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	fc 01       	movw	r30, r24
    14ea:	e1 50       	subi	r30, 0x01	; 1
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	20 81       	ld	r18, Z
    14f0:	2a 30       	cpi	r18, 0x0A	; 10
    14f2:	49 f4       	brne	.+18     	; 0x1506 <__vector_20+0x60>
    14f4:	fc 01       	movw	r30, r24
    14f6:	e2 50       	subi	r30, 0x02	; 2
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 81       	ld	r24, Z
    14fc:	8d 30       	cpi	r24, 0x0D	; 13
    14fe:	19 f4       	brne	.+6      	; 0x1506 <__vector_20+0x60>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <rx_buffer_has_message>
    1506:	ff 91       	pop	r31
    1508:	ef 91       	pop	r30
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	2f 91       	pop	r18
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00001882 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    1882:	e9 ec       	ldi	r30, 0xC9	; 201
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	80 61       	ori	r24, 0x10	; 16
    188a:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    188c:	80 81       	ld	r24, Z
    188e:	88 60       	ori	r24, 0x08	; 8
    1890:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    1892:	80 81       	ld	r24, Z
    1894:	80 68       	ori	r24, 0x80	; 128
    1896:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    1898:	80 81       	ld	r24, Z
    189a:	80 64       	ori	r24, 0x40	; 64
    189c:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    189e:	e8 ec       	ldi	r30, 0xC8	; 200
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	82 60       	ori	r24, 0x02	; 2
    18a6:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    18a8:	86 e0       	ldi	r24, 0x06	; 6
    18aa:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=UART1_BAUDRATE; //set baudrate
    18ae:	80 e1       	ldi	r24, 0x10	; 16
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    18b6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    18ba:	78 94       	sei
    18bc:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00001182 <uart1_hal_send_string>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    1182:	6f 92       	push	r6
    1184:	7f 92       	push	r7
    1186:	8f 92       	push	r8
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	3b 01       	movw	r6, r22
    1190:	88 2e       	mov	r8, r24
    1192:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <tx_buffer_data_len>
    1196:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <tx_buffer_data_len+0x1>
    119a:	89 2b       	or	r24, r25
    119c:	d1 f7       	brne	.-12     	; 0x1192 <uart1_hal_send_string+0x10>
    119e:	88 2d       	mov	r24, r8
    11a0:	b3 01       	movw	r22, r6
    11a2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <strlen>
    11a6:	bc 01       	movw	r22, r24
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	11 c0       	rjmp	.+34     	; 0x11d0 <uart1_hal_send_string+0x4e>
    11ae:	e8 2c       	mov	r14, r8
    11b0:	63 01       	movw	r12, r6
    11b2:	c2 0e       	add	r12, r18
    11b4:	d3 1e       	adc	r13, r19
    11b6:	e1 1c       	adc	r14, r1
    11b8:	37 fd       	sbrc	r19, 7
    11ba:	ea 94       	dec	r14
    11bc:	f6 01       	movw	r30, r12
    11be:	94 91       	lpm	r25, Z
    11c0:	e7 fc       	sbrc	r14, 7
    11c2:	90 81       	ld	r25, Z
    11c4:	f9 01       	movw	r30, r18
    11c6:	ef 56       	subi	r30, 0x6F	; 111
    11c8:	f8 4f       	sbci	r31, 0xF8	; 248
    11ca:	90 83       	st	Z, r25
    11cc:	2f 5f       	subi	r18, 0xFF	; 255
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	26 17       	cp	r18, r22
    11d2:	37 07       	cpc	r19, r23
    11d4:	60 f3       	brcs	.-40     	; 0x11ae <uart1_hal_send_string+0x2c>
    11d6:	fb 01       	movw	r30, r22
    11d8:	ef 56       	subi	r30, 0x6F	; 111
    11da:	f8 4f       	sbci	r31, 0xF8	; 248
    11dc:	8d e0       	ldi	r24, 0x0D	; 13
    11de:	80 83       	st	Z, r24
    11e0:	fb 01       	movw	r30, r22
    11e2:	ee 56       	subi	r30, 0x6E	; 110
    11e4:	f8 4f       	sbci	r31, 0xF8	; 248
    11e6:	8a e0       	ldi	r24, 0x0A	; 10
    11e8:	80 83       	st	Z, r24
    11ea:	6e 5f       	subi	r22, 0xFE	; 254
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	70 93 27 09 	sts	0x0927, r23	; 0x800927 <tx_buffer_data_len+0x1>
    11f2:	60 93 26 09 	sts	0x0926, r22	; 0x800926 <tx_buffer_data_len>
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	90 93 25 09 	sts	0x0925, r25	; 0x800925 <tx_buffer_cursor+0x1>
    11fe:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <tx_buffer_cursor>
    1202:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <_end>
    1206:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	8f 90       	pop	r8
    1212:	7f 90       	pop	r7
    1214:	6f 90       	pop	r6
    1216:	08 95       	ret

Disassembly of section .text.__vector_30:

0000166c <__vector_30>:
    166c:	1f 92       	push	r1
    166e:	0f 92       	push	r0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
    1682:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <tx_buffer_cursor>
    1686:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <tx_buffer_cursor+0x1>
    168a:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <tx_buffer_data_len>
    168e:	30 91 27 09 	lds	r19, 0x0927	; 0x800927 <tx_buffer_data_len+0x1>
    1692:	82 17       	cp	r24, r18
    1694:	93 07       	cpc	r25, r19
    1696:	70 f4       	brcc	.+28     	; 0x16b4 <__vector_30+0x48>
    1698:	9c 01       	movw	r18, r24
    169a:	2f 5f       	subi	r18, 0xFF	; 255
    169c:	3f 4f       	sbci	r19, 0xFF	; 255
    169e:	30 93 25 09 	sts	0x0925, r19	; 0x800925 <tx_buffer_cursor+0x1>
    16a2:	20 93 24 09 	sts	0x0924, r18	; 0x800924 <tx_buffer_cursor>
    16a6:	fc 01       	movw	r30, r24
    16a8:	ef 56       	subi	r30, 0x6F	; 111
    16aa:	f8 4f       	sbci	r31, 0xF8	; 248
    16ac:	80 81       	ld	r24, Z
    16ae:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    16b2:	08 c0       	rjmp	.+16     	; 0x16c4 <__vector_30+0x58>
    16b4:	10 92 25 09 	sts	0x0925, r1	; 0x800925 <tx_buffer_cursor+0x1>
    16b8:	10 92 24 09 	sts	0x0924, r1	; 0x800924 <tx_buffer_cursor>
    16bc:	10 92 27 09 	sts	0x0927, r1	; 0x800927 <tx_buffer_data_len+0x1>
    16c0:	10 92 26 09 	sts	0x0926, r1	; 0x800926 <tx_buffer_data_len>
    16c4:	ff 91       	pop	r31
    16c6:	ef 91       	pop	r30
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	3f 91       	pop	r19
    16ce:	2f 91       	pop	r18
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	0f 90       	pop	r0
    16d6:	1f 90       	pop	r1
    16d8:	18 95       	reti

Disassembly of section .text.__vector_28:

0000151a <__vector_28>:
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	0f 92       	push	r0
    1522:	11 24       	eor	r1, r1
    1524:	2f 93       	push	r18
    1526:	8f 93       	push	r24
    1528:	9f 93       	push	r25
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
    152e:	80 91 2b 09 	lds	r24, 0x092B	; 0x80092b <rx_buffer_has_message>
    1532:	81 11       	cpse	r24, r1
    1534:	0e c0       	rjmp	.+28     	; 0x1552 <__vector_28+0x38>
    1536:	e0 91 2c 09 	lds	r30, 0x092C	; 0x80092c <rx_buffer_data_len>
    153a:	eb 34       	cpi	r30, 0x4B	; 75
    153c:	50 f4       	brcc	.+20     	; 0x1552 <__vector_28+0x38>
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	8e 0f       	add	r24, r30
    1542:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <rx_buffer_data_len>
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    154c:	e3 54       	subi	r30, 0x43	; 67
    154e:	f7 4f       	sbci	r31, 0xF7	; 247
    1550:	80 83       	st	Z, r24
    1552:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <rx_buffer_data_len>
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	80 f0       	brcs	.+32     	; 0x157a <__vector_28+0x60>
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	fc 01       	movw	r30, r24
    155e:	e4 54       	subi	r30, 0x44	; 68
    1560:	f7 4f       	sbci	r31, 0xF7	; 247
    1562:	20 81       	ld	r18, Z
    1564:	2a 30       	cpi	r18, 0x0A	; 10
    1566:	49 f4       	brne	.+18     	; 0x157a <__vector_28+0x60>
    1568:	fc 01       	movw	r30, r24
    156a:	e5 54       	subi	r30, 0x45	; 69
    156c:	f7 4f       	sbci	r31, 0xF7	; 247
    156e:	80 81       	ld	r24, Z
    1570:	8d 30       	cpi	r24, 0x0D	; 13
    1572:	19 f4       	brne	.+6      	; 0x157a <__vector_28+0x60>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	80 93 2b 09 	sts	0x092B, r24	; 0x80092b <rx_buffer_has_message>
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
    157e:	9f 91       	pop	r25
    1580:	8f 91       	pop	r24
    1582:	2f 91       	pop	r18
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	0f 90       	pop	r0
    158a:	1f 90       	pop	r1
    158c:	18 95       	reti

Disassembly of section .text.main:

00001b66 <main>:
#define _RUN_TEST

int main(void)
{
	#ifdef _RUN_TEST
		test_runner();
    1b66:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <test_runner>
			MAINPG_start();
		}
		_delay_ms(5000);
	}
	#endif
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00001b2e <MRPP_init_group>:
#include "mrpp.h"
#include <stdio.h>

MRPP_STATE state;

uint8_t MRPP_init_group(COLLECTION collections[], uint8_t nCollections, uint8_t groupId){
    1b2e:	cf 93       	push	r28
    1b30:	26 2f       	mov	r18, r22
    1b32:	c4 2f       	mov	r28, r20
    mrpp_state_init(&state, groupId, collections, nCollections);
    1b34:	ac 01       	movw	r20, r24
    1b36:	6c 2f       	mov	r22, r28
    1b38:	80 e9       	ldi	r24, 0x90	; 144
    1b3a:	92 e0       	ldi	r25, 0x02	; 2
    1b3c:	0e 94 52 06 	call	0xca4	; 0xca4 <mrpp_state_init>

    return groupId++;
}
    1b40:	8c 2f       	mov	r24, r28
    1b42:	cf 91       	pop	r28
    1b44:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

0000158e <MRPP_add_collection_data_INT16>:


void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	2a 97       	sbiw	r28, 0x0a	; 10
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	18 2f       	mov	r17, r24
    15aa:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    15ac:	9e 01       	movw	r18, r28
    15ae:	2f 5f       	subi	r18, 0xFF	; 255
    15b0:	3f 4f       	sbci	r19, 0xFF	; 255
    15b2:	ab 01       	movw	r20, r22
    15b4:	68 2f       	mov	r22, r24
    15b6:	80 e9       	ldi	r24, 0x90	; 144
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	0e 94 18 0a 	call	0x1430	; 0x1430 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    15be:	9e 01       	movw	r18, r28
    15c0:	27 5f       	subi	r18, 0xF7	; 247
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	ae 01       	movw	r20, r28
    15c6:	49 5f       	subi	r20, 0xF9	; 249
    15c8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ca:	61 2f       	mov	r22, r17
    15cc:	80 e9       	ldi	r24, 0x90	; 144
    15ce:	92 e0       	ldi	r25, 0x02	; 2
    15d0:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    15d4:	29 85       	ldd	r18, Y+9	; 0x09
    15d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    15d8:	4f 81       	ldd	r20, Y+7	; 0x07
    15da:	58 85       	ldd	r21, Y+8	; 0x08
    15dc:	b7 01       	movw	r22, r14
    15de:	ce 01       	movw	r24, r28
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	0e 94 57 09 	call	0x12ae	; 0x12ae <mrpp_data_add_int16>
}
    15e6:	2a 96       	adiw	r28, 0x0a	; 10
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00001a6a <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    1a70:	80 e9       	ldi	r24, 0x90	; 144
    1a72:	92 e0       	ldi	r25, 0x02	; 2
    1a74:	0e 94 c9 0c 	call	0x1992	; 0x1992 <mrpp_state_is_body_ready>
    1a78:	88 83       	st	Y, r24
    1a7a:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    1a7c:	89 2f       	mov	r24, r25
    1a7e:	80 95       	com	r24
    
}
    1a80:	88 1f       	adc	r24, r24
    1a82:	88 27       	eor	r24, r24
    1a84:	88 1f       	adc	r24, r24
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00001218 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	00 d0       	rcall	.+0      	; 0x122e <MRPP_get_ready_body_package+0x16>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <MRPP_get_ready_body_package+0x18>
    1230:	1f 92       	push	r1
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	6b 01       	movw	r12, r22
    1238:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    123a:	9e 01       	movw	r18, r28
    123c:	2b 5f       	subi	r18, 0xFB	; 251
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
    1240:	79 01       	movw	r14, r18
    1242:	8e 01       	movw	r16, r28
    1244:	0d 5f       	subi	r16, 0xFD	; 253
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	23 50       	subi	r18, 0x03	; 3
    124a:	31 09       	sbc	r19, r1
    124c:	ae 01       	movw	r20, r28
    124e:	4f 5f       	subi	r20, 0xFF	; 255
    1250:	5f 4f       	sbci	r21, 0xFF	; 255
    1252:	bc 01       	movw	r22, r24
    1254:	80 e9       	ldi	r24, 0x90	; 144
    1256:	92 e0       	ldi	r25, 0x02	; 2
    1258:	0e 94 98 07 	call	0xf30	; 0xf30 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    125c:	88 23       	and	r24, r24
    125e:	b1 f0       	breq	.+44     	; 0x128c <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    1260:	4d 81       	ldd	r20, Y+5	; 0x05
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	84 0f       	add	r24, r20
    1266:	f5 01       	movw	r30, r10
    1268:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    126a:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <state>
    126e:	f6 01       	movw	r30, r12
    1270:	80 83       	st	Z, r24
    package[1]=subId;
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	6b 81       	ldd	r22, Y+3	; 0x03
    127e:	7c 81       	ldd	r23, Y+4	; 0x04
    1280:	c6 01       	movw	r24, r12
    1282:	03 96       	adiw	r24, 0x03	; 3
    1284:	0e 94 b1 0c 	call	0x1962	; 0x1962 <mrpp_data_get>

    return true;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	01 c0       	rjmp	.+2      	; 0x128e <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    128c:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

00001b5a <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	80 e9       	ldi	r24, 0x90	; 144
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <mrpp_state_set_body_sent>
    1b64:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00001a8c <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    1a92:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <state>
    1a96:	fc 01       	movw	r30, r24
    1a98:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    1a9a:	bf 01       	movw	r22, r30
    1a9c:	80 e9       	ldi	r24, 0x90	; 144
    1a9e:	92 e0       	ldi	r25, 0x02	; 2
    1aa0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <mrpp_state_get_header>
    *package_length+=1;
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	88 83       	st	Y, r24
}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00001aae <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    1ab4:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <state>
    1ab8:	fc 01       	movw	r30, r24
    1aba:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    1abc:	bf 01       	movw	r22, r30
    1abe:	80 e9       	ldi	r24, 0x90	; 144
    1ac0:	92 e0       	ldi	r25, 0x02	; 2
    1ac2:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <mrpp_state_get_tail>
    *package_length+=1;
    1ac6:	8f 5f       	subi	r24, 0xFF	; 255
    1ac8:	88 83       	st	Y, r24
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00001b70 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    1b70:	80 e9       	ldi	r24, 0x90	; 144
    1b72:	92 e0       	ldi	r25, 0x02	; 2
    1b74:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <mrpp_state_all_bodies_sent>
}
    1b78:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

000012ae <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	89 01       	movw	r16, r18
    
    //add meta
    for (uint16_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    12be:	fa 01       	movw	r30, r20
    12c0:	0b c0       	rjmp	.+22     	; 0x12d8 <mrpp_data_add_int16+0x2a>
    {
        storage[i]=metadata[i-begin];
    12c2:	df 01       	movw	r26, r30
    12c4:	a4 1b       	sub	r26, r20
    12c6:	b5 0b       	sbc	r27, r21
    12c8:	a8 0f       	add	r26, r24
    12ca:	b9 1f       	adc	r27, r25
    12cc:	3c 91       	ld	r19, X
    12ce:	df 01       	movw	r26, r30
    12d0:	ab 56       	subi	r26, 0x6B	; 107
    12d2:	bc 4f       	sbci	r27, 0xFC	; 252
    12d4:	3c 93       	st	X, r19
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint16_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    12d6:	31 96       	adiw	r30, 0x01	; 1
    12d8:	6a 01       	movw	r12, r20
    12da:	26 e0       	ldi	r18, 0x06	; 6
    12dc:	c2 0e       	add	r12, r18
    12de:	d1 1c       	adc	r13, r1
    12e0:	ec 15       	cp	r30, r12
    12e2:	fd 05       	cpc	r31, r13
    12e4:	70 f3       	brcs	.-36     	; 0x12c2 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    12e6:	98 01       	movw	r18, r16
    12e8:	26 50       	subi	r18, 0x06	; 6
    12ea:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    12ec:	36 95       	lsr	r19
    12ee:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    12f0:	49 5f       	subi	r20, 0xF9	; 249
    12f2:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	16 c0       	rjmp	.+44     	; 0x1326 <mrpp_data_add_int16+0x78>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    12fa:	cd 01       	movw	r24, r26
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	f6 01       	movw	r30, r12
    1302:	e8 0f       	add	r30, r24
    1304:	f9 1f       	adc	r31, r25
    1306:	8b 01       	movw	r16, r22
    1308:	08 0f       	add	r16, r24
    130a:	19 1f       	adc	r17, r25
    130c:	e8 01       	movw	r28, r16
    130e:	f9 80       	ldd	r15, Y+1	; 0x01
    1310:	eb 56       	subi	r30, 0x6B	; 107
    1312:	fc 4f       	sbci	r31, 0xFC	; 252
    1314:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    1316:	84 0f       	add	r24, r20
    1318:	95 1f       	adc	r25, r21
    131a:	18 81       	ld	r17, Y
    131c:	fc 01       	movw	r30, r24
    131e:	eb 56       	subi	r30, 0x6B	; 107
    1320:	fc 4f       	sbci	r31, 0xFC	; 252
    1322:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    1324:	11 96       	adiw	r26, 0x01	; 1
    1326:	a2 17       	cp	r26, r18
    1328:	b3 07       	cpc	r27, r19
    132a:	38 f3       	brcs	.-50     	; 0x12fa <mrpp_data_add_int16+0x4c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00001962 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	0c c0       	rjmp	.+24     	; 0x1986 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    196e:	de 01       	movw	r26, r28
    1970:	a2 0f       	add	r26, r18
    1972:	b3 1f       	adc	r27, r19
    1974:	f9 01       	movw	r30, r18
    1976:	e6 0f       	add	r30, r22
    1978:	f7 1f       	adc	r31, r23
    197a:	eb 56       	subi	r30, 0x6B	; 107
    197c:	fc 4f       	sbci	r31, 0xFC	; 252
    197e:	90 81       	ld	r25, Z
    1980:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    1982:	2f 5f       	subi	r18, 0xFF	; 255
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	24 17       	cp	r18, r20
    1988:	35 07       	cpc	r19, r21
    198a:	88 f3       	brcs	.-30     	; 0x196e <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	08 95       	ret

Disassembly of section .text.dynamic_data_type_length:

00001b84 <dynamic_data_type_length>:
    
    return offset+state->nCollections;
}

static uint8_t dynamic_data_type_length(uint8_t nCollections){
    return (nCollections/4)+1;
    1b84:	86 95       	lsr	r24
    1b86:	86 95       	lsr	r24
}
    1b88:	8f 5f       	subi	r24, 0xFF	; 255
    1b8a:	08 95       	ret

Disassembly of section .text.add_dynamic_data_types:

000010d2 <add_dynamic_data_types>:

static void add_dynamic_data_types(MRPP_STATE *state, uint8_t dt[]){
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
    10dc:	8b 01       	movw	r16, r22
    uint8_t dataTypesLen=dynamic_data_type_length(state->nCollections);
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <dynamic_data_type_length>

    for (uint8_t bIndex = 0; bIndex < dataTypesLen; bIndex++)
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	46 c0       	rjmp	.+140    	; 0x1174 <__stack+0x75>
    {
        uint8_t bitArray=0x00;
        for (uint8_t index = 0; index < 4; index++)
        {
            //If there is no more collection just skip and use default 0x00
            uint8_t nCol=bIndex*4+index;
    10e8:	26 2f       	mov	r18, r22
    10ea:	22 0f       	add	r18, r18
    10ec:	22 0f       	add	r18, r18
    10ee:	29 0f       	add	r18, r25
            if(nCol+1>state->nCollections) break;
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	f9 01       	movw	r30, r18
    10f4:	31 96       	adiw	r30, 0x01	; 1
    10f6:	4a 81       	ldd	r20, Y+2	; 0x02
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	4e 17       	cp	r20, r30
    10fc:	5f 07       	cpc	r21, r31
    10fe:	8c f1       	brlt	.+98     	; 0x1162 <__stack+0x63>

            uint8_t shifts=index*2;
    1100:	59 2f       	mov	r21, r25
    1102:	55 0f       	add	r21, r21
            switch (state->collections[nCol].type)
    1104:	4b e0       	ldi	r20, 0x0B	; 11
    1106:	42 9f       	mul	r20, r18
    1108:	f0 01       	movw	r30, r0
    110a:	43 9f       	mul	r20, r19
    110c:	f0 0d       	add	r31, r0
    110e:	11 24       	eor	r1, r1
    1110:	ec 0f       	add	r30, r28
    1112:	fd 1f       	adc	r31, r29
    1114:	20 85       	ldd	r18, Z+8	; 0x08
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	69 f0       	breq	.+26     	; 0x1134 <__stack+0x35>
    111a:	24 30       	cpi	r18, 0x04	; 4
    111c:	a1 f0       	breq	.+40     	; 0x1146 <__stack+0x47>
    111e:	21 30       	cpi	r18, 0x01	; 1
    1120:	d1 f4       	brne	.+52     	; 0x1156 <__stack+0x57>
            {
                case T_INT8:
                    bitArray |=1 << shifts;
    1122:	21 e0       	ldi	r18, 0x01	; 1
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	02 c0       	rjmp	.+4      	; 0x112c <__stack+0x2d>
    1128:	22 0f       	add	r18, r18
    112a:	33 1f       	adc	r19, r19
    112c:	5a 95       	dec	r21
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <__stack+0x29>
    1130:	72 2b       	or	r23, r18
                    break;
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <__stack+0x57>
                
                case T_INT16:
                    bitArray |= 2 << shifts;
    1134:	22 e0       	ldi	r18, 0x02	; 2
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <__stack+0x3f>
    113a:	22 0f       	add	r18, r18
    113c:	33 1f       	adc	r19, r19
    113e:	5a 95       	dec	r21
    1140:	e2 f7       	brpl	.-8      	; 0x113a <__stack+0x3b>
    1142:	72 2b       	or	r23, r18
                    break;
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <__stack+0x57>

                case T_FLOAT:
                    bitArray |= 3 << shifts;
    1146:	23 e0       	ldi	r18, 0x03	; 3
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <__stack+0x51>
    114c:	22 0f       	add	r18, r18
    114e:	33 1f       	adc	r19, r19
    1150:	5a 95       	dec	r21
    1152:	e2 f7       	brpl	.-8      	; 0x114c <__stack+0x4d>
    1154:	72 2b       	or	r23, r18
    uint8_t dataTypesLen=dynamic_data_type_length(state->nCollections);

    for (uint8_t bIndex = 0; bIndex < dataTypesLen; bIndex++)
    {
        uint8_t bitArray=0x00;
        for (uint8_t index = 0; index < 4; index++)
    1156:	9f 5f       	subi	r25, 0xFF	; 255
    1158:	02 c0       	rjmp	.+4      	; 0x115e <__stack+0x5f>
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	94 30       	cpi	r25, 0x04	; 4
    1160:	18 f2       	brcs	.-122    	; 0x10e8 <add_dynamic_data_types+0x16>
                    break;
            }

        }
        //set from the end
        dt[dataTypesLen-bIndex-1]=bitArray;
    1162:	e8 2f       	mov	r30, r24
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	e6 1b       	sub	r30, r22
    1168:	f1 09       	sbc	r31, r1
    116a:	31 97       	sbiw	r30, 0x01	; 1
    116c:	e0 0f       	add	r30, r16
    116e:	f1 1f       	adc	r31, r17
    1170:	70 83       	st	Z, r23
}

static void add_dynamic_data_types(MRPP_STATE *state, uint8_t dt[]){
    uint8_t dataTypesLen=dynamic_data_type_length(state->nCollections);

    for (uint8_t bIndex = 0; bIndex < dataTypesLen; bIndex++)
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	68 17       	cp	r22, r24
    1176:	88 f3       	brcs	.-30     	; 0x115a <__stack+0x5b>
        //set from the end
        dt[dataTypesLen-bIndex-1]=bitArray;
        
    }
    
} 
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	08 95       	ret

Disassembly of section .text.generator_header_tail:

000016da <generator_header_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    return generator_header_tail(state, package, state->lastSubId);
}

static uint8_t generator_header_tail(MRPP_STATE *state, uint8_t package[], uint8_t subId){
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	ec 01       	movw	r28, r24
    16e4:	8b 01       	movw	r16, r22
    package[0]=subId;
    16e6:	fb 01       	movw	r30, r22
    16e8:	40 83       	st	Z, r20
    package[1]=state->lastSubId;
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	81 83       	std	Z+1, r24	; 0x01

    //status bit
    package[2]=0;
    16ee:	12 82       	std	Z+2, r1	; 0x02

    //N collections
    package[3]=state->nCollections;
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	83 83       	std	Z+3, r24	; 0x03

    //add data type
    add_dynamic_data_types(state, &package[4]);
    16f4:	6c 5f       	subi	r22, 0xFC	; 252
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	ce 01       	movw	r24, r28
    16fa:	0e 94 69 08 	call	0x10d2	; 0x10d2 <add_dynamic_data_types>

    //Calculate collection offset
    uint8_t offset=dynamic_data_type_length(state->nCollections);
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <dynamic_data_type_length>
    offset+=4; //subId+lastSubId+statusBit
    1704:	8c 5f       	subi	r24, 0xFC	; 252

    for (uint8_t i = 0; i < state->nCollections; i++)
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	13 c0       	rjmp	.+38     	; 0x1730 <generator_header_tail+0x56>
    {
        package[i+offset]=state->collections[i].nSamples;
    170a:	29 2f       	mov	r18, r25
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	f9 01       	movw	r30, r18
    1710:	e8 0f       	add	r30, r24
    1712:	f1 1d       	adc	r31, r1
    1714:	e0 0f       	add	r30, r16
    1716:	f1 1f       	adc	r31, r17
    1718:	4b e0       	ldi	r20, 0x0B	; 11
    171a:	42 9f       	mul	r20, r18
    171c:	d0 01       	movw	r26, r0
    171e:	43 9f       	mul	r20, r19
    1720:	b0 0d       	add	r27, r0
    1722:	11 24       	eor	r1, r1
    1724:	ac 0f       	add	r26, r28
    1726:	bd 1f       	adc	r27, r29
    1728:	17 96       	adiw	r26, 0x07	; 7
    172a:	2c 91       	ld	r18, X
    172c:	20 83       	st	Z, r18

    //Calculate collection offset
    uint8_t offset=dynamic_data_type_length(state->nCollections);
    offset+=4; //subId+lastSubId+statusBit

    for (uint8_t i = 0; i < state->nCollections; i++)
    172e:	9f 5f       	subi	r25, 0xFF	; 255
    1730:	2a 81       	ldd	r18, Y+2	; 0x02
    1732:	92 17       	cp	r25, r18
    1734:	50 f3       	brcs	.-44     	; 0x170a <generator_header_tail+0x30>
    {
        package[i+offset]=state->collections[i].nSamples;
    }
    
    return offset+state->nCollections;
}
    1736:	82 0f       	add	r24, r18
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

Disassembly of section .text.update_bodies:

00000e06 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
 e06:	cf 93       	push	r28
 e08:	df 93       	push	r29
 e0a:	fc 01       	movw	r30, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
 e0c:	26 2f       	mov	r18, r22
 e0e:	30 e0       	ldi	r19, 0x00	; 0
 e10:	c9 01       	movw	r24, r18
 e12:	01 97       	sbiw	r24, 0x01	; 1
 e14:	4b e0       	ldi	r20, 0x0B	; 11
 e16:	42 9f       	mul	r20, r18
 e18:	d0 01       	movw	r26, r0
 e1a:	43 9f       	mul	r20, r19
 e1c:	b0 0d       	add	r27, r0
 e1e:	11 24       	eor	r1, r1
 e20:	ae 0f       	add	r26, r30
 e22:	bf 1f       	adc	r27, r31
 e24:	5c 91       	ld	r21, X
    for (uint8_t i = 0; i < collectionId-1; i++)
 e26:	40 e0       	ldi	r20, 0x00	; 0
 e28:	1c c0       	rjmp	.+56     	; 0xe62 <update_bodies+0x5c>
    {
        if(i==collectionId-1) continue;
 e2a:	82 17       	cp	r24, r18
 e2c:	93 07       	cpc	r25, r19
 e2e:	c1 f0       	breq	.+48     	; 0xe60 <update_bodies+0x5a>

        if( state->collections[i].endsInBody==beginsInBody){
 e30:	7b e0       	ldi	r23, 0x0B	; 11
 e32:	72 9f       	mul	r23, r18
 e34:	d0 01       	movw	r26, r0
 e36:	73 9f       	mul	r23, r19
 e38:	b0 0d       	add	r27, r0
 e3a:	11 24       	eor	r1, r1
 e3c:	ae 0f       	add	r26, r30
 e3e:	bf 1f       	adc	r27, r31
 e40:	1c 96       	adiw	r26, 0x0c	; 12
 e42:	7c 91       	ld	r23, X
 e44:	57 13       	cpse	r21, r23
 e46:	0c c0       	rjmp	.+24     	; 0xe60 <update_bodies+0x5a>
            if(state->collections[i].status!=DONE){
 e48:	7b e0       	ldi	r23, 0x0B	; 11
 e4a:	72 9f       	mul	r23, r18
 e4c:	d0 01       	movw	r26, r0
 e4e:	73 9f       	mul	r23, r19
 e50:	b0 0d       	add	r27, r0
 e52:	11 24       	eor	r1, r1
 e54:	ae 0f       	add	r26, r30
 e56:	bf 1f       	adc	r27, r31
 e58:	1d 96       	adiw	r26, 0x0d	; 13
 e5a:	2c 91       	ld	r18, X
 e5c:	23 30       	cpi	r18, 0x03	; 3
 e5e:	41 f4       	brne	.+16     	; 0xe70 <update_bodies+0x6a>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
 e60:	4f 5f       	subi	r20, 0xFF	; 255
 e62:	24 2f       	mov	r18, r20
 e64:	30 e0       	ldi	r19, 0x00	; 0
 e66:	28 17       	cp	r18, r24
 e68:	39 07       	cpc	r19, r25
 e6a:	fc f2       	brlt	.-66     	; 0xe2a <update_bodies+0x24>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
 e6c:	21 e0       	ldi	r18, 0x01	; 1
 e6e:	01 c0       	rjmp	.+2      	; 0xe72 <update_bodies+0x6c>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
 e70:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
 e72:	22 23       	and	r18, r18
 e74:	39 f0       	breq	.+14     	; 0xe84 <update_bodies+0x7e>
        state->bodies[beginsInBody]=READY;
 e76:	df 01       	movw	r26, r30
 e78:	a5 0f       	add	r26, r21
 e7a:	b1 1d       	adc	r27, r1
 e7c:	aa 50       	subi	r26, 0x0A	; 10
 e7e:	bf 4f       	sbci	r27, 0xFF	; 255
 e80:	21 e0       	ldi	r18, 0x01	; 1
 e82:	2c 93       	st	X, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
 e84:	2b e0       	ldi	r18, 0x0B	; 11
 e86:	28 9f       	mul	r18, r24
 e88:	d0 01       	movw	r26, r0
 e8a:	29 9f       	mul	r18, r25
 e8c:	b0 0d       	add	r27, r0
 e8e:	11 24       	eor	r1, r1
 e90:	ae 0f       	add	r26, r30
 e92:	bf 1f       	adc	r27, r31
 e94:	1c 96       	adiw	r26, 0x0c	; 12
 e96:	7c 91       	ld	r23, X
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 e98:	1f c0       	rjmp	.+62     	; 0xed8 <update_bodies+0xd2>
    {
        if(i==collectionId-1) continue;
 e9a:	26 2f       	mov	r18, r22
 e9c:	30 e0       	ldi	r19, 0x00	; 0
 e9e:	82 17       	cp	r24, r18
 ea0:	93 07       	cpc	r25, r19
 ea2:	c9 f0       	breq	.+50     	; 0xed6 <update_bodies+0xd0>

        if(state->collections[i].beginsInBody==endsInBody){
 ea4:	e9 01       	movw	r28, r18
 ea6:	21 96       	adiw	r28, 0x01	; 1
 ea8:	4b e0       	ldi	r20, 0x0B	; 11
 eaa:	4c 9f       	mul	r20, r28
 eac:	d0 01       	movw	r26, r0
 eae:	4d 9f       	mul	r20, r29
 eb0:	b0 0d       	add	r27, r0
 eb2:	11 24       	eor	r1, r1
 eb4:	ae 0f       	add	r26, r30
 eb6:	bf 1f       	adc	r27, r31
 eb8:	4c 91       	ld	r20, X
 eba:	74 13       	cpse	r23, r20
 ebc:	0c c0       	rjmp	.+24     	; 0xed6 <update_bodies+0xd0>
            if(state->collections[i].status!=DONE){
 ebe:	4b e0       	ldi	r20, 0x0B	; 11
 ec0:	42 9f       	mul	r20, r18
 ec2:	d0 01       	movw	r26, r0
 ec4:	43 9f       	mul	r20, r19
 ec6:	b0 0d       	add	r27, r0
 ec8:	11 24       	eor	r1, r1
 eca:	ae 0f       	add	r26, r30
 ecc:	bf 1f       	adc	r27, r31
 ece:	1d 96       	adiw	r26, 0x0d	; 13
 ed0:	2c 91       	ld	r18, X
 ed2:	23 30       	cpi	r18, 0x03	; 3
 ed4:	31 f4       	brne	.+12     	; 0xee2 <update_bodies+0xdc>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 ed6:	6f 5f       	subi	r22, 0xFF	; 255
 ed8:	22 81       	ldd	r18, Z+2	; 0x02
 eda:	62 17       	cp	r22, r18
 edc:	f0 f2       	brcs	.-68     	; 0xe9a <update_bodies+0x94>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
 ede:	81 e0       	ldi	r24, 0x01	; 1
 ee0:	01 c0       	rjmp	.+2      	; 0xee4 <update_bodies+0xde>
    {
        if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
 ee2:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
 ee4:	88 23       	and	r24, r24
 ee6:	41 f0       	breq	.+16     	; 0xef8 <update_bodies+0xf2>
        state->bodies[endsInBody]=READY;
 ee8:	df 01       	movw	r26, r30
 eea:	a7 0f       	add	r26, r23
 eec:	b1 1d       	adc	r27, r1
 eee:	aa 50       	subi	r26, 0x0A	; 10
 ef0:	bf 4f       	sbci	r27, 0xFF	; 255
 ef2:	81 e0       	ldi	r24, 0x01	; 1
 ef4:	8c 93       	st	X, r24
 ef6:	06 c0       	rjmp	.+12     	; 0xf04 <update_bodies+0xfe>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
 ef8:	df 01       	movw	r26, r30
 efa:	a7 0f       	add	r26, r23
 efc:	b1 1d       	adc	r27, r1
 efe:	aa 50       	subi	r26, 0x0A	; 10
 f00:	bf 4f       	sbci	r27, 0xFF	; 255
 f02:	1c 92       	st	X, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
 f04:	87 2f       	mov	r24, r23
 f06:	90 e0       	ldi	r25, 0x00	; 0
 f08:	85 1b       	sub	r24, r21
 f0a:	91 09       	sbc	r25, r1
 f0c:	02 97       	sbiw	r24, 0x02	; 2
 f0e:	6c f0       	brlt	.+26     	; 0xf2a <update_bodies+0x124>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f10:	81 e0       	ldi	r24, 0x01	; 1
 f12:	85 0f       	add	r24, r21
 f14:	08 c0       	rjmp	.+16     	; 0xf26 <update_bodies+0x120>
    {
        state->bodies[i]=READY;
 f16:	df 01       	movw	r26, r30
 f18:	a8 0f       	add	r26, r24
 f1a:	b1 1d       	adc	r27, r1
 f1c:	aa 50       	subi	r26, 0x0A	; 10
 f1e:	bf 4f       	sbci	r27, 0xFF	; 255
 f20:	91 e0       	ldi	r25, 0x01	; 1
 f22:	9c 93       	st	X, r25
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f24:	8f 5f       	subi	r24, 0xFF	; 255
 f26:	87 17       	cp	r24, r23
 f28:	b0 f3       	brcs	.-20     	; 0xf16 <update_bodies+0x110>
    {
        state->bodies[i]=READY;
    }
    
}
 f2a:	df 91       	pop	r29
 f2c:	cf 91       	pop	r28
 f2e:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00000ca4 <mrpp_state_init>:
static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_dynamic_data_types(MRPP_STATE *state, uint8_t package[]);
static uint8_t dynamic_data_type_length(uint8_t nCollections);
static uint8_t generator_header_tail(MRPP_STATE *state, uint8_t package[], uint8_t subId);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
 ca4:	9f 92       	push	r9
 ca6:	af 92       	push	r10
 ca8:	bf 92       	push	r11
 caa:	cf 92       	push	r12
 cac:	df 92       	push	r13
 cae:	ef 92       	push	r14
 cb0:	ff 92       	push	r15
 cb2:	0f 93       	push	r16
 cb4:	1f 93       	push	r17
 cb6:	cf 93       	push	r28
 cb8:	df 93       	push	r29
 cba:	7c 01       	movw	r14, r24
 cbc:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
 cbe:	fc 01       	movw	r30, r24
 cc0:	60 83       	st	Z, r22
    state->nCollections=nCollections;
 cc2:	22 83       	std	Z+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 cc4:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
 cc6:	00 e0       	ldi	r16, 0x00	; 0
 cc8:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
 cca:	65 c0       	rjmp	.+202    	; 0xd96 <mrpp_state_init+0xf2>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
 ccc:	ad 2c       	mov	r10, r13
 cce:	b1 2c       	mov	r11, r1
 cd0:	f5 01       	movw	r30, r10
 cd2:	ee 0f       	add	r30, r30
 cd4:	ff 1f       	adc	r31, r31
 cd6:	ee 0f       	add	r30, r30
 cd8:	ff 1f       	adc	r31, r31
 cda:	ea 0d       	add	r30, r10
 cdc:	fb 1d       	adc	r31, r11
 cde:	e4 0f       	add	r30, r20
 ce0:	f5 1f       	adc	r31, r21
 ce2:	82 81       	ldd	r24, Z+2	; 0x02
 ce4:	93 81       	ldd	r25, Z+3	; 0x03
 ce6:	0f 2e       	mov	r0, r31
 ce8:	fb e0       	ldi	r31, 0x0B	; 11
 cea:	9f 2e       	mov	r9, r31
 cec:	f0 2d       	mov	r31, r0
 cee:	9a 9c       	mul	r9, r10
 cf0:	e0 01       	movw	r28, r0
 cf2:	9b 9c       	mul	r9, r11
 cf4:	d0 0d       	add	r29, r0
 cf6:	11 24       	eor	r1, r1
 cf8:	ce 0d       	add	r28, r14
 cfa:	df 1d       	adc	r29, r15
 cfc:	9a 87       	std	Y+10, r25	; 0x0a
 cfe:	89 87       	std	Y+9, r24	; 0x09

        //type
        state->collections[i].type=collections[i].type;
 d00:	84 81       	ldd	r24, Z+4	; 0x04
 d02:	88 87       	std	Y+8, r24	; 0x08

        //Samples
        state->collections[i].nSamples=collections[i].samplings;
 d04:	80 81       	ld	r24, Z
 d06:	8f 83       	std	Y+7, r24	; 0x07

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
 d08:	1c 83       	std	Y+4, r17	; 0x04
 d0a:	0b 83       	std	Y+3, r16	; 0x03
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
 d0c:	80 81       	ld	r24, Z
 d0e:	91 81       	ldd	r25, Z+1	; 0x01
 d10:	24 81       	ldd	r18, Z+4	; 0x04
 d12:	28 9f       	mul	r18, r24
 d14:	f0 01       	movw	r30, r0
 d16:	29 9f       	mul	r18, r25
 d18:	f0 0d       	add	r31, r0
 d1a:	11 24       	eor	r1, r1
 d1c:	36 96       	adiw	r30, 0x06	; 6
        state->collections[i].length=len;
 d1e:	fe 83       	std	Y+6, r31	; 0x06
 d20:	ed 83       	std	Y+5, r30	; 0x05
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
 d22:	98 01       	movw	r18, r16
 d24:	a1 ed       	ldi	r26, 0xD1	; 209
 d26:	b1 e5       	ldi	r27, 0x51	; 81
 d28:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__umulhisi3>
 d2c:	28 1b       	sub	r18, r24
 d2e:	39 0b       	sbc	r19, r25
 d30:	36 95       	lsr	r19
 d32:	27 95       	ror	r18
 d34:	82 0f       	add	r24, r18
 d36:	93 1f       	adc	r25, r19
 d38:	00 24       	eor	r0, r0
 d3a:	88 0f       	add	r24, r24
 d3c:	99 1f       	adc	r25, r25
 d3e:	00 1c       	adc	r0, r0
 d40:	88 0f       	add	r24, r24
 d42:	99 1f       	adc	r25, r25
 d44:	00 1c       	adc	r0, r0
 d46:	89 2f       	mov	r24, r25
 d48:	90 2d       	mov	r25, r0
 d4a:	2f ef       	ldi	r18, 0xFF	; 255
 d4c:	a2 1a       	sub	r10, r18
 d4e:	b2 0a       	sbc	r11, r18
 d50:	9a 9c       	mul	r9, r10
 d52:	d0 01       	movw	r26, r0
 d54:	9b 9c       	mul	r9, r11
 d56:	b0 0d       	add	r27, r0
 d58:	11 24       	eor	r1, r1
 d5a:	ae 0d       	add	r26, r14
 d5c:	bf 1d       	adc	r27, r15
 d5e:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len-1)/DR_BODY_PAYLOAD_SIZE;
 d60:	0e 0f       	add	r16, r30
 d62:	1f 1f       	adc	r17, r31
 d64:	f8 01       	movw	r30, r16
 d66:	31 97       	sbiw	r30, 0x01	; 1
 d68:	9f 01       	movw	r18, r30
 d6a:	a1 ed       	ldi	r26, 0xD1	; 209
 d6c:	b1 e5       	ldi	r27, 0x51	; 81
 d6e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__umulhisi3>
 d72:	e8 1b       	sub	r30, r24
 d74:	f9 0b       	sbc	r31, r25
 d76:	f6 95       	lsr	r31
 d78:	e7 95       	ror	r30
 d7a:	8e 0f       	add	r24, r30
 d7c:	9f 1f       	adc	r25, r31
 d7e:	00 24       	eor	r0, r0
 d80:	88 0f       	add	r24, r24
 d82:	99 1f       	adc	r25, r25
 d84:	00 1c       	adc	r0, r0
 d86:	88 0f       	add	r24, r24
 d88:	99 1f       	adc	r25, r25
 d8a:	00 1c       	adc	r0, r0
 d8c:	89 2f       	mov	r24, r25
 d8e:	90 2d       	mov	r25, r0

        //Simpler solution above
        state->collections[i].endsInBody=endsInBody;
 d90:	8c 87       	std	Y+12, r24	; 0x0c
        

        //set status
        state->collections[i].status=WAITING;
 d92:	1d 86       	std	Y+13, r1	; 0x0d
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 d94:	d3 94       	inc	r13
 d96:	dc 14       	cp	r13, r12
 d98:	08 f4       	brcc	.+2      	; 0xd9c <mrpp_state_init+0xf8>
 d9a:	98 cf       	rjmp	.-208    	; 0xccc <mrpp_state_init+0x28>
        startingIndex+=len;      
    }

    //Calculate lastSubId
    
    uint8_t lastSubId=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
 d9c:	01 50       	subi	r16, 0x01	; 1
 d9e:	11 09       	sbc	r17, r1
 da0:	98 01       	movw	r18, r16
 da2:	a1 ed       	ldi	r26, 0xD1	; 209
 da4:	b1 e5       	ldi	r27, 0x51	; 81
 da6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__umulhisi3>
 daa:	08 1b       	sub	r16, r24
 dac:	19 0b       	sbc	r17, r25
 dae:	16 95       	lsr	r17
 db0:	07 95       	ror	r16
 db2:	80 0f       	add	r24, r16
 db4:	91 1f       	adc	r25, r17
 db6:	00 24       	eor	r0, r0
 db8:	88 0f       	add	r24, r24
 dba:	99 1f       	adc	r25, r25
 dbc:	00 1c       	adc	r0, r0
 dbe:	88 0f       	add	r24, r24
 dc0:	99 1f       	adc	r25, r25
 dc2:	00 1c       	adc	r0, r0
 dc4:	89 2f       	mov	r24, r25
 dc6:	90 2d       	mov	r25, r0
 dc8:	92 e0       	ldi	r25, 0x02	; 2
 dca:	98 0f       	add	r25, r24
    state->lastSubId=lastSubId;
 dcc:	f7 01       	movw	r30, r14
 dce:	91 83       	std	Z+1, r25	; 0x01
    
    //calculate bodies
    uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
 dd0:	8f 5f       	subi	r24, 0xFF	; 255
    state->nBodies=nBodies;
 dd2:	eb 50       	subi	r30, 0x0B	; 11
 dd4:	ff 4f       	sbci	r31, 0xFF	; 255
 dd6:	80 83       	st	Z, r24

    for (uint8_t i = 0; i < nBodies; i++)
 dd8:	90 e0       	ldi	r25, 0x00	; 0
 dda:	07 c0       	rjmp	.+14     	; 0xdea <mrpp_state_init+0x146>
    {
        state->bodies[i]=WAITING;
 ddc:	f7 01       	movw	r30, r14
 dde:	e9 0f       	add	r30, r25
 de0:	f1 1d       	adc	r31, r1
 de2:	ea 50       	subi	r30, 0x0A	; 10
 de4:	ff 4f       	sbci	r31, 0xFF	; 255
 de6:	10 82       	st	Z, r1
    
    //calculate bodies
    uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
 de8:	9f 5f       	subi	r25, 0xFF	; 255
 dea:	98 17       	cp	r25, r24
 dec:	b8 f3       	brcs	.-18     	; 0xddc <mrpp_state_init+0x138>
    {
        state->bodies[i]=WAITING;
    }
}
 dee:	df 91       	pop	r29
 df0:	cf 91       	pop	r28
 df2:	1f 91       	pop	r17
 df4:	0f 91       	pop	r16
 df6:	ff 90       	pop	r15
 df8:	ef 90       	pop	r14
 dfa:	df 90       	pop	r13
 dfc:	cf 90       	pop	r12
 dfe:	bf 90       	pop	r11
 e00:	af 90       	pop	r10
 e02:	9f 90       	pop	r9
 e04:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00001b8c <mrpp_state_get_header>:

uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    return generator_header_tail(state, package, 0);
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 6d 0b 	call	0x16da	; 0x16da <generator_header_tail>
}
    1b92:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00001b7a <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    return generator_header_tail(state, package, state->lastSubId);
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	41 81       	ldd	r20, Z+1	; 0x01
    1b7e:	0e 94 6d 0b 	call	0x16da	; 0x16da <generator_header_tail>
}
    1b82:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00001430 <mrpp_state_set_collection>:
    }
    
} 


void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    1430:	ef 92       	push	r14
    1432:	ff 92       	push	r15
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	8c 01       	movw	r16, r24
    143e:	e9 01       	movw	r28, r18
    state->collections[collectionId-1].status=DONE;
    1440:	e6 2e       	mov	r14, r22
    1442:	f1 2c       	mov	r15, r1
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	e8 1a       	sub	r14, r24
    1448:	f1 08       	sbc	r15, r1
    144a:	8b e0       	ldi	r24, 0x0B	; 11
    144c:	8e 9d       	mul	r24, r14
    144e:	f0 01       	movw	r30, r0
    1450:	8f 9d       	mul	r24, r15
    1452:	f0 0d       	add	r31, r0
    1454:	11 24       	eor	r1, r1
    1456:	e0 0f       	add	r30, r16
    1458:	f1 1f       	adc	r31, r17
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	85 87       	std	Z+13, r24	; 0x0d

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <mrpp_state_set_collection+0x46>
    {
        metadata[i]=timestamp[i];
    1462:	e9 2f       	mov	r30, r25
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	de 01       	movw	r26, r28
    1468:	ae 0f       	add	r26, r30
    146a:	bf 1f       	adc	r27, r31
    146c:	e4 0f       	add	r30, r20
    146e:	f5 1f       	adc	r31, r21
    1470:	30 81       	ld	r19, Z
    1472:	3c 93       	st	X, r19

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    1474:	9f 5f       	subi	r25, 0xFF	; 255
    1476:	94 30       	cpi	r25, 0x04	; 4
    1478:	a0 f3       	brcs	.-24     	; 0x1462 <mrpp_state_set_collection+0x32>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    147a:	8b e0       	ldi	r24, 0x0B	; 11
    147c:	8e 9d       	mul	r24, r14
    147e:	f0 01       	movw	r30, r0
    1480:	8f 9d       	mul	r24, r15
    1482:	f0 0d       	add	r31, r0
    1484:	11 24       	eor	r1, r1
    1486:	e0 0f       	add	r30, r16
    1488:	f1 1f       	adc	r31, r17
    148a:	82 85       	ldd	r24, Z+10	; 0x0a
    148c:	8c 83       	std	Y+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    148e:	81 85       	ldd	r24, Z+9	; 0x09
    1490:	8d 83       	std	Y+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    1492:	c8 01       	movw	r24, r16
    1494:	0e 94 03 07 	call	0xe06	; 0xe06 <update_bodies>
}
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	ff 90       	pop	r15
    14a2:	ef 90       	pop	r14
    14a4:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00001992 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    1992:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0b c0       	rjmp	.+22     	; 0x19ae <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    1998:	29 2f       	mov	r18, r25
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	fa 01       	movw	r30, r20
    199e:	e2 0f       	add	r30, r18
    19a0:	f3 1f       	adc	r31, r19
    19a2:	ea 50       	subi	r30, 0x0A	; 10
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	49 f0       	breq	.+18     	; 0x19be <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    19ac:	9f 5f       	subi	r25, 0xFF	; 255
    19ae:	fa 01       	movw	r30, r20
    19b0:	eb 50       	subi	r30, 0x0B	; 11
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	98 17       	cp	r25, r24
    19b8:	78 f3       	brcs	.-34     	; 0x1998 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    19ba:	2f ef       	ldi	r18, 0xFF	; 255
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    19be:	c9 01       	movw	r24, r18
    19c0:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00001a1a <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    1a1a:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    1a20:	0a c0       	rjmp	.+20     	; 0x1a36 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    1a22:	f9 01       	movw	r30, r18
    1a24:	e9 0f       	add	r30, r25
    1a26:	f1 1d       	adc	r31, r1
    1a28:	ea 50       	subi	r30, 0x0A	; 10
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	40 81       	ld	r20, Z
    1a2e:	42 30       	cpi	r20, 0x02	; 2
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    1a32:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    1a34:	9f 5f       	subi	r25, 0xFF	; 255
    1a36:	f9 01       	movw	r30, r18
    1a38:	eb 50       	subi	r30, 0x0B	; 11
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	40 81       	ld	r20, Z
    1a3e:	94 17       	cp	r25, r20
    1a40:	80 f3       	brcs	.-32     	; 0x1a22 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    1a42:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

00000f30 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
     f30:	8f 92       	push	r8
     f32:	9f 92       	push	r9
     f34:	af 92       	push	r10
     f36:	bf 92       	push	r11
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	ec 01       	movw	r28, r24
     f4a:	6b 01       	movw	r12, r22
     f4c:	5a 01       	movw	r10, r20
     f4e:	49 01       	movw	r8, r18
    int16_t res=mrpp_state_is_body_ready(state);
     f50:	0e 94 c9 0c 	call	0x1992	; 0x1992 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
     f54:	8f 3f       	cpi	r24, 0xFF	; 255
     f56:	2f ef       	ldi	r18, 0xFF	; 255
     f58:	92 07       	cpc	r25, r18
     f5a:	09 f4       	brne	.+2      	; 0xf5e <mrpp_state_get_ready_body+0x2e>
     f5c:	4c c0       	rjmp	.+152    	; 0xff6 <mrpp_state_get_ready_body+0xc6>
     f5e:	8c 15       	cp	r24, r12
     f60:	9d 05       	cpc	r25, r13
     f62:	09 f0       	breq	.+2      	; 0xf66 <mrpp_state_get_ready_body+0x36>
     f64:	4a c0       	rjmp	.+148    	; 0xffa <mrpp_state_get_ready_body+0xca>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
     f6a:	fe 01       	movw	r30, r28
     f6c:	e8 0f       	add	r30, r24
     f6e:	f1 1d       	adc	r31, r1
     f70:	ea 50       	subi	r30, 0x0A	; 10
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	90 81       	ld	r25, Z
     f76:	91 30       	cpi	r25, 0x01	; 1
     f78:	41 f0       	breq	.+16     	; 0xf8a <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	fe 01       	movw	r30, r28
     f7e:	eb 50       	subi	r30, 0x0B	; 11
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	90 81       	ld	r25, Z
     f84:	89 17       	cp	r24, r25
     f86:	88 f3       	brcs	.-30     	; 0xf6a <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
     f88:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	98 0f       	add	r25, r24
     f8e:	f5 01       	movw	r30, r10
     f90:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
     f92:	99 81       	ldd	r25, Y+1	; 0x01
     f94:	f4 01       	movw	r30, r8
     f96:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	41 e6       	ldi	r20, 0x61	; 97
     f9c:	48 9f       	mul	r20, r24
     f9e:	90 01       	movw	r18, r0
     fa0:	49 9f       	mul	r20, r25
     fa2:	30 0d       	add	r19, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	f8 01       	movw	r30, r16
     fa8:	31 83       	std	Z+1, r19	; 0x01
     faa:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
     fac:	fe 01       	movw	r30, r28
     fae:	eb 50       	subi	r30, 0x0B	; 11
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	20 81       	ld	r18, Z
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	21 50       	subi	r18, 0x01	; 1
     fb8:	31 09       	sbc	r19, r1
     fba:	82 17       	cp	r24, r18
     fbc:	93 07       	cpc	r25, r19
     fbe:	2c f4       	brge	.+10     	; 0xfca <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
     fc0:	81 e6       	ldi	r24, 0x61	; 97
     fc2:	f7 01       	movw	r30, r14
     fc4:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	19 c0       	rjmp	.+50     	; 0xffc <mrpp_state_get_ready_body+0xcc>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	3b e0       	ldi	r19, 0x0B	; 11
     fd2:	38 9f       	mul	r19, r24
     fd4:	a0 01       	movw	r20, r0
     fd6:	39 9f       	mul	r19, r25
     fd8:	50 0d       	add	r21, r0
     fda:	11 24       	eor	r1, r1
     fdc:	c4 0f       	add	r28, r20
     fde:	d5 1f       	adc	r29, r21
     fe0:	9b 81       	ldd	r25, Y+3	; 0x03
     fe2:	8d 81       	ldd	r24, Y+5	; 0x05
     fe4:	89 0f       	add	r24, r25
     fe6:	f1 e6       	ldi	r31, 0x61	; 97
     fe8:	2f 9f       	mul	r18, r31
     fea:	80 19       	sub	r24, r0
     fec:	11 24       	eor	r1, r1
     fee:	f7 01       	movw	r30, r14
     ff0:	80 83       	st	Z, r24
    } 
    return true; 
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <mrpp_state_get_ready_body+0xcc>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <mrpp_state_get_ready_body+0xcc>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	bf 90       	pop	r11
    100e:	af 90       	pop	r10
    1010:	9f 90       	pop	r9
    1012:	8f 90       	pop	r8
    1014:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00001ad0 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	eb 50       	subi	r30, 0x0B	; 11
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	20 81       	ld	r18, Z
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	62 17       	cp	r22, r18
    1adc:	73 07       	cpc	r23, r19
    1ade:	3c f4       	brge	.+14     	; 0x1aee <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    1ae0:	68 0f       	add	r22, r24
    1ae2:	79 1f       	adc	r23, r25
    1ae4:	fb 01       	movw	r30, r22
    1ae6:	ea 50       	subi	r30, 0x0A	; 10
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	80 83       	st	Z, r24
    1aee:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

000019c2 <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	61 50       	subi	r22, 0x01	; 1
    19c6:	71 09       	sbc	r23, r1
    19c8:	ab e0       	ldi	r26, 0x0B	; 11
    19ca:	a6 9f       	mul	r26, r22
    19cc:	f0 01       	movw	r30, r0
    19ce:	a7 9f       	mul	r26, r23
    19d0:	f0 0d       	add	r31, r0
    19d2:	11 24       	eor	r1, r1
    19d4:	e8 0f       	add	r30, r24
    19d6:	f9 1f       	adc	r31, r25
    19d8:	83 81       	ldd	r24, Z+3	; 0x03
    19da:	94 81       	ldd	r25, Z+4	; 0x04
    19dc:	da 01       	movw	r26, r20
    19de:	8d 93       	st	X+, r24
    19e0:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    19e2:	85 81       	ldd	r24, Z+5	; 0x05
    19e4:	96 81       	ldd	r25, Z+6	; 0x06
    19e6:	f9 01       	movw	r30, r18
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
    19ec:	08 95       	ret

Disassembly of section .text.util_fill_data:

00001af0 <util_fill_data>:
#include "util.h"
#include <stdint.h>
#include <stdio.h>

void util_fill_data(uint16_t arr[], uint16_t data, uint16_t length){
	for (uint16_t i = 0; i < length; i++)
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <util_fill_data+0x18>
	{
		arr[i]=data;
    1af6:	f9 01       	movw	r30, r18
    1af8:	ee 0f       	add	r30, r30
    1afa:	ff 1f       	adc	r31, r31
    1afc:	e8 0f       	add	r30, r24
    1afe:	f9 1f       	adc	r31, r25
    1b00:	71 83       	std	Z+1, r23	; 0x01
    1b02:	60 83       	st	Z, r22
#include "util.h"
#include <stdint.h>
#include <stdio.h>

void util_fill_data(uint16_t arr[], uint16_t data, uint16_t length){
	for (uint16_t i = 0; i < length; i++)
    1b04:	2f 5f       	subi	r18, 0xFF	; 255
    1b06:	3f 4f       	sbci	r19, 0xFF	; 255
    1b08:	24 17       	cp	r18, r20
    1b0a:	35 07       	cpc	r19, r21
    1b0c:	a0 f3       	brcs	.-24     	; 0x1af6 <util_fill_data+0x6>
	{
		arr[i]=data;
	}
}
    1b0e:	08 95       	ret

Disassembly of section .text.util_2_hex_str:

00001742 <util_2_hex_str>:


void util_2_hex_str(char str[], uint8_t data[], uint8_t length){
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	8c 01       	movw	r16, r24
    1750:	7b 01       	movw	r14, r22
    1752:	d4 2f       	mov	r29, r20
	for (uint8_t i = 0; i < length; i++)
    1754:	c0 e0       	ldi	r28, 0x00	; 0
    1756:	1b c0       	rjmp	.+54     	; 0x178e <util_2_hex_str+0x4c>
	{
		sprintf(str, "%02X", data[i]);
    1758:	f7 01       	movw	r30, r14
    175a:	ec 0f       	add	r30, r28
    175c:	f1 1d       	adc	r31, r1
    175e:	80 81       	ld	r24, Z
    1760:	1f 92       	push	r1
    1762:	8f 93       	push	r24
    1764:	8b e0       	ldi	r24, 0x0B	; 11
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	a0 e0       	ldi	r26, 0x00	; 0
    176a:	af 93       	push	r26
    176c:	9f 93       	push	r25
    176e:	8f 93       	push	r24
    1770:	1f 93       	push	r17
    1772:	0f 93       	push	r16
    1774:	0e 94 1e 0c 	call	0x183c	; 0x183c <sprintf>
		str+=2;
    1778:	0e 5f       	subi	r16, 0xFE	; 254
    177a:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}


void util_2_hex_str(char str[], uint8_t data[], uint8_t length){
	for (uint8_t i = 0; i < length; i++)
    177c:	cf 5f       	subi	r28, 0xFF	; 255
    177e:	8d b7       	in	r24, 0x3d	; 61
    1780:	9e b7       	in	r25, 0x3e	; 62
    1782:	07 96       	adiw	r24, 0x07	; 7
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	9e bf       	out	0x3e, r25	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	8d bf       	out	0x3d, r24	; 61
    178e:	cd 17       	cp	r28, r29
    1790:	18 f3       	brcs	.-58     	; 0x1758 <util_2_hex_str+0x16>
	{
		sprintf(str, "%02X", data[i]);
		str+=2;
	}
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	08 95       	ret

Disassembly of section .text.test_report_example_2:

00000b04 <test_report_example_2>:
		_delay_ms(2000);
	}
}
char str[320]; //For some reason it can not be 400 

static void test_report_example_2(){
 b04:	cf 92       	push	r12
 b06:	df 92       	push	r13
 b08:	ef 92       	push	r14
 b0a:	ff 92       	push	r15
 b0c:	0f 93       	push	r16
 b0e:	1f 93       	push	r17
 b10:	cf 93       	push	r28
 b12:	df 93       	push	r29
 b14:	cd b7       	in	r28, 0x3d	; 61
 b16:	de b7       	in	r29, 0x3e	; 62
 b18:	c1 5b       	subi	r28, 0xB1	; 177
 b1a:	d1 09       	sbc	r29, r1
 b1c:	0f b6       	in	r0, 0x3f	; 63
 b1e:	f8 94       	cli
 b20:	de bf       	out	0x3e, r29	; 62
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	cd bf       	out	0x3d, r28	; 61
	COLLECTION collections[]={
 b26:	8a e0       	ldi	r24, 0x0A	; 10
 b28:	e2 e1       	ldi	r30, 0x12	; 18
 b2a:	f9 e0       	ldi	r31, 0x09	; 9
 b2c:	de 01       	movw	r26, r28
 b2e:	11 96       	adiw	r26, 0x01	; 1
 b30:	01 90       	ld	r0, Z+
 b32:	0d 92       	st	X+, r0
 b34:	8a 95       	dec	r24
 b36:	e1 f7       	brne	.-8      	; 0xb30 <test_report_example_2+0x2c>
		{.samplingInterval=30, .samplings=30, .type=T_INT16},
		{.samplingInterval=120, .samplings=10, .type=T_INT16},
	};
	uint8_t fake_ts[]={0xAA, 0xBB, 0xCC, 0xDD};
 b38:	8a ea       	ldi	r24, 0xAA	; 170
 b3a:	8b 87       	std	Y+11, r24	; 0x0b
 b3c:	8b eb       	ldi	r24, 0xBB	; 187
 b3e:	8c 87       	std	Y+12, r24	; 0x0c
 b40:	8c ec       	ldi	r24, 0xCC	; 204
 b42:	8d 87       	std	Y+13, r24	; 0x0d
 b44:	8d ed       	ldi	r24, 0xDD	; 221
 b46:	8e 87       	std	Y+14, r24	; 0x0e
	int16_t bodyIndex;
	uint8_t package[100];
	uint8_t package_length;
	
	
	MRPP_init_group(collections, 2, 0);
 b48:	40 e0       	ldi	r20, 0x00	; 0
 b4a:	62 e0       	ldi	r22, 0x02	; 2
 b4c:	ce 01       	movw	r24, r28
 b4e:	01 96       	adiw	r24, 0x01	; 1
 b50:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <MRPP_init_group>
	
	//Add data for collection 1
	util_fill_data(data, 0xAAAA, 30 );
 b54:	4e e1       	ldi	r20, 0x1E	; 30
 b56:	50 e0       	ldi	r21, 0x00	; 0
 b58:	6a ea       	ldi	r22, 0xAA	; 170
 b5a:	7a ea       	ldi	r23, 0xAA	; 170
 b5c:	ce 01       	movw	r24, r28
 b5e:	0f 96       	adiw	r24, 0x0f	; 15
 b60:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <util_fill_data>
	MRPP_add_collection_data_INT16(1, fake_ts, data);
 b64:	ae 01       	movw	r20, r28
 b66:	41 5f       	subi	r20, 0xF1	; 241
 b68:	5f 4f       	sbci	r21, 0xFF	; 255
 b6a:	be 01       	movw	r22, r28
 b6c:	65 5f       	subi	r22, 0xF5	; 245
 b6e:	7f 4f       	sbci	r23, 0xFF	; 255
 b70:	81 e0       	ldi	r24, 0x01	; 1
 b72:	0e 94 c7 0a 	call	0x158e	; 0x158e <MRPP_add_collection_data_INT16>

	//Add data for collection 2
	util_fill_data(data, 0xBBBB, 10 );
 b76:	4a e0       	ldi	r20, 0x0A	; 10
 b78:	50 e0       	ldi	r21, 0x00	; 0
 b7a:	6b eb       	ldi	r22, 0xBB	; 187
 b7c:	7b eb       	ldi	r23, 0xBB	; 187
 b7e:	ce 01       	movw	r24, r28
 b80:	0f 96       	adiw	r24, 0x0f	; 15
 b82:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <util_fill_data>
	MRPP_add_collection_data_INT16(2, fake_ts, data);
 b86:	ae 01       	movw	r20, r28
 b88:	41 5f       	subi	r20, 0xF1	; 241
 b8a:	5f 4f       	sbci	r21, 0xFF	; 255
 b8c:	be 01       	movw	r22, r28
 b8e:	65 5f       	subi	r22, 0xF5	; 245
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	82 e0       	ldi	r24, 0x02	; 2
 b94:	0e 94 c7 0a 	call	0x158e	; 0x158e <MRPP_add_collection_data_INT16>
	 
	//Header
	MRPP_get_header_package(package, &package_length);
 b98:	be 01       	movw	r22, r28
 b9a:	6f 54       	subi	r22, 0x4F	; 79
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255
 b9e:	ce 01       	movw	r24, r28
 ba0:	83 5b       	subi	r24, 0xB3	; 179
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <MRPP_get_header_package>
	util_2_hex_str(str, package, package_length);
 ba8:	cf 54       	subi	r28, 0x4F	; 79
 baa:	df 4f       	sbci	r29, 0xFF	; 255
 bac:	48 81       	ld	r20, Y
 bae:	c1 5b       	subi	r28, 0xB1	; 177
 bb0:	d0 40       	sbci	r29, 0x00	; 0
 bb2:	be 01       	movw	r22, r28
 bb4:	63 5b       	subi	r22, 0xB3	; 179
 bb6:	7f 4f       	sbci	r23, 0xFF	; 255
 bb8:	81 e5       	ldi	r24, 0x51	; 81
 bba:	96 e0       	ldi	r25, 0x06	; 6
 bbc:	0e 94 a1 0b 	call	0x1742	; 0x1742 <util_2_hex_str>
	uart1_hal_send_string(str);
 bc0:	81 e5       	ldi	r24, 0x51	; 81
 bc2:	96 e0       	ldi	r25, 0x06	; 6
 bc4:	6c 01       	movw	r12, r24
 bc6:	20 e8       	ldi	r18, 0x80	; 128
 bc8:	e2 2e       	mov	r14, r18
 bca:	f8 2e       	mov	r15, r24
 bcc:	0d 2d       	mov	r16, r13
 bce:	12 2f       	mov	r17, r18
 bd0:	8e 2d       	mov	r24, r14
 bd2:	b6 01       	movw	r22, r12
 bd4:	0e 94 c1 08 	call	0x1182	; 0x1182 <uart1_hal_send_string>
	
	while (MRPP_is_body_package_ready(&bodyIndex)==1)
 bd8:	2c c0       	rjmp	.+88     	; 0xc32 <test_report_example_2+0x12e>
	{
		//Write body
		
		MRPP_get_ready_body_package(bodyIndex, package, &package_length);
 bda:	ae 01       	movw	r20, r28
 bdc:	4f 54       	subi	r20, 0x4F	; 79
 bde:	5f 4f       	sbci	r21, 0xFF	; 255
 be0:	be 01       	movw	r22, r28
 be2:	63 5b       	subi	r22, 0xB3	; 179
 be4:	7f 4f       	sbci	r23, 0xFF	; 255
 be6:	2d 96       	adiw	r28, 0x0d	; 13
 be8:	8e ad       	ldd	r24, Y+62	; 0x3e
 bea:	9f ad       	ldd	r25, Y+63	; 0x3f
 bec:	2d 97       	sbiw	r28, 0x0d	; 13
 bee:	0e 94 0c 09 	call	0x1218	; 0x1218 <MRPP_get_ready_body_package>
		util_2_hex_str(str, package, package_length);
 bf2:	cf 54       	subi	r28, 0x4F	; 79
 bf4:	df 4f       	sbci	r29, 0xFF	; 255
 bf6:	48 81       	ld	r20, Y
 bf8:	c1 5b       	subi	r28, 0xB1	; 177
 bfa:	d0 40       	sbci	r29, 0x00	; 0
 bfc:	be 01       	movw	r22, r28
 bfe:	63 5b       	subi	r22, 0xB3	; 179
 c00:	7f 4f       	sbci	r23, 0xFF	; 255
 c02:	81 e5       	ldi	r24, 0x51	; 81
 c04:	96 e0       	ldi	r25, 0x06	; 6
 c06:	0e 94 a1 0b 	call	0x1742	; 0x1742 <util_2_hex_str>
		uart1_hal_send_string(str);
 c0a:	6f 2d       	mov	r22, r15
 c0c:	70 2f       	mov	r23, r16
 c0e:	81 2f       	mov	r24, r17
 c10:	0e 94 c1 08 	call	0x1182	; 0x1182 <uart1_hal_send_string>
		 
		//Set package as sent
		MRPP_set_body_sent(bodyIndex);
 c14:	2d 96       	adiw	r28, 0x0d	; 13
 c16:	8e ad       	ldd	r24, Y+62	; 0x3e
 c18:	9f ad       	ldd	r25, Y+63	; 0x3f
 c1a:	2d 97       	sbiw	r28, 0x0d	; 13
 c1c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <MRPP_set_body_sent>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c20:	8f ef       	ldi	r24, 0xFF	; 255
 c22:	99 e6       	ldi	r25, 0x69	; 105
 c24:	28 e1       	ldi	r18, 0x18	; 24
 c26:	81 50       	subi	r24, 0x01	; 1
 c28:	90 40       	sbci	r25, 0x00	; 0
 c2a:	20 40       	sbci	r18, 0x00	; 0
 c2c:	e1 f7       	brne	.-8      	; 0xc26 <test_report_example_2+0x122>
 c2e:	00 c0       	rjmp	.+0      	; 0xc30 <test_report_example_2+0x12c>
 c30:	00 00       	nop
	//Header
	MRPP_get_header_package(package, &package_length);
	util_2_hex_str(str, package, package_length);
	uart1_hal_send_string(str);
	
	while (MRPP_is_body_package_ready(&bodyIndex)==1)
 c32:	ce 01       	movw	r24, r28
 c34:	85 5b       	subi	r24, 0xB5	; 181
 c36:	9f 4f       	sbci	r25, 0xFF	; 255
 c38:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <MRPP_is_body_package_ready>
 c3c:	81 11       	cpse	r24, r1
 c3e:	cd cf       	rjmp	.-102    	; 0xbda <test_report_example_2+0xd6>
		//Set package as sent
		MRPP_set_body_sent(bodyIndex);
		_delay_ms(1000);
	}
		 
	if(!MRPP_all_body_package_sent()){
 c40:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <MRPP_all_body_package_sent>
 c44:	81 11       	cpse	r24, r1
 c46:	06 c0       	rjmp	.+12     	; 0xc54 <test_report_example_2+0x150>
		uart1_hal_send_string("ERROR, not all bodies is sent");
 c48:	6c ed       	ldi	r22, 0xDC	; 220
 c4a:	71 e0       	ldi	r23, 0x01	; 1
 c4c:	80 e0       	ldi	r24, 0x00	; 0
 c4e:	0e 94 c1 08 	call	0x1182	; 0x1182 <uart1_hal_send_string>
 c52:	18 c0       	rjmp	.+48     	; 0xc84 <test_report_example_2+0x180>
		return;
	}
	
	//Write tail
	MRPP_get_tail_package(package, &package_length);
 c54:	be 01       	movw	r22, r28
 c56:	6f 54       	subi	r22, 0x4F	; 79
 c58:	7f 4f       	sbci	r23, 0xFF	; 255
 c5a:	ce 01       	movw	r24, r28
 c5c:	83 5b       	subi	r24, 0xB3	; 179
 c5e:	9f 4f       	sbci	r25, 0xFF	; 255
 c60:	0e 94 57 0d 	call	0x1aae	; 0x1aae <MRPP_get_tail_package>
	util_2_hex_str(str, package, package_length);
 c64:	cf 54       	subi	r28, 0x4F	; 79
 c66:	df 4f       	sbci	r29, 0xFF	; 255
 c68:	48 81       	ld	r20, Y
 c6a:	c1 5b       	subi	r28, 0xB1	; 177
 c6c:	d0 40       	sbci	r29, 0x00	; 0
 c6e:	be 01       	movw	r22, r28
 c70:	63 5b       	subi	r22, 0xB3	; 179
 c72:	7f 4f       	sbci	r23, 0xFF	; 255
 c74:	81 e5       	ldi	r24, 0x51	; 81
 c76:	96 e0       	ldi	r25, 0x06	; 6
 c78:	0e 94 a1 0b 	call	0x1742	; 0x1742 <util_2_hex_str>
	uart1_hal_send_string(str);
 c7c:	8e 2d       	mov	r24, r14
 c7e:	b6 01       	movw	r22, r12
 c80:	0e 94 c1 08 	call	0x1182	; 0x1182 <uart1_hal_send_string>
}
 c84:	cf 54       	subi	r28, 0x4F	; 79
 c86:	df 4f       	sbci	r29, 0xFF	; 255
 c88:	0f b6       	in	r0, 0x3f	; 63
 c8a:	f8 94       	cli
 c8c:	de bf       	out	0x3e, r29	; 62
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	cd bf       	out	0x3d, r28	; 61
 c92:	df 91       	pop	r29
 c94:	cf 91       	pop	r28
 c96:	1f 91       	pop	r17
 c98:	0f 91       	pop	r16
 c9a:	ff 90       	pop	r15
 c9c:	ef 90       	pop	r14
 c9e:	df 90       	pop	r13
 ca0:	cf 90       	pop	r12
 ca2:	08 95       	ret

Disassembly of section .text.test_MRPP_module_start:

00001a44 <test_MRPP_module_start>:
static void test_groupid();



void test_MRPP_module_start(){
	uart1_hal_init();
    1a44:	0e 94 41 0c 	call	0x1882	; 0x1882 <uart1_hal_init>
	uart1_hal_send_string("Working ");
    1a48:	6a ef       	ldi	r22, 0xFA	; 250
    1a4a:	71 e0       	ldi	r23, 0x01	; 1
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	0e 94 c1 08 	call	0x1182	; 0x1182 <uart1_hal_send_string>
		
	while(1){
		//test_report_example();
		test_report_example_2();
    1a52:	0e 94 82 05 	call	0xb04	; 0xb04 <test_report_example_2>
    1a56:	2f ef       	ldi	r18, 0xFF	; 255
    1a58:	83 ed       	ldi	r24, 0xD3	; 211
    1a5a:	90 e3       	ldi	r25, 0x30	; 48
    1a5c:	21 50       	subi	r18, 0x01	; 1
    1a5e:	80 40       	sbci	r24, 0x00	; 0
    1a60:	90 40       	sbci	r25, 0x00	; 0
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <test_MRPP_module_start+0x18>
    1a64:	00 c0       	rjmp	.+0      	; 0x1a66 <test_MRPP_module_start+0x22>
    1a66:	00 00       	nop
    1a68:	f4 cf       	rjmp	.-24     	; 0x1a52 <test_MRPP_module_start+0xe>

Disassembly of section .text.test_runner:

00001b94 <test_runner>:
	//test_TC0_HAL_start();
	//test_TC1_HAL_start();
	//test_RTC_module_start();
	//test_UART0_HAL_start();
	//test_TC2_HAL_start();
	test_MRPP_module_start();
    1b94:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <test_MRPP_module_start>
    1b98:	08 95       	ret

Disassembly of section .text.avrlibc:

00000210 <vfprintf>:
 210:	a4 e1       	ldi	r26, 0x14	; 20
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	ee e0       	ldi	r30, 0x0E	; 14
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__prologue_saves__>
 21c:	6c 01       	movw	r12, r24
 21e:	1a 01       	movw	r2, r20
 220:	46 2e       	mov	r4, r22
 222:	59 01       	movw	r10, r18
 224:	fc 01       	movw	r30, r24
 226:	10 86       	std	Z+8, r1	; 0x08
 228:	17 82       	std	Z+7, r1	; 0x07
 22a:	84 81       	ldd	r24, Z+4	; 0x04
 22c:	81 ff       	sbrs	r24, 1
 22e:	62 c3       	rjmp	.+1732   	; 0x8f4 <__EEPROM_REGION_LENGTH__+0xf4>
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	9d 87       	std	Y+13, r25	; 0x0d
 236:	8c 87       	std	Y+12, r24	; 0x0c
 238:	a0 e8       	ldi	r26, 0x80	; 128
 23a:	8a 8b       	std	Y+18, r24	; 0x12
 23c:	9b 8b       	std	Y+19, r25	; 0x13
 23e:	ac 8b       	std	Y+20, r26	; 0x14
 240:	f1 01       	movw	r30, r2
 242:	84 91       	lpm	r24, Z
 244:	47 fc       	sbrc	r4, 7
 246:	80 81       	ld	r24, Z
 248:	88 23       	and	r24, r24
 24a:	09 f4       	brne	.+2      	; 0x24e <vfprintf+0x3e>
 24c:	4f c3       	rjmp	.+1694   	; 0x8ec <__EEPROM_REGION_LENGTH__+0xec>
 24e:	44 2d       	mov	r20, r4
 250:	91 01       	movw	r18, r2
 252:	2f 5f       	subi	r18, 0xFF	; 255
 254:	3f 4f       	sbci	r19, 0xFF	; 255
 256:	4f 4f       	sbci	r20, 0xFF	; 255
 258:	85 32       	cpi	r24, 0x25	; 37
 25a:	19 f0       	breq	.+6      	; 0x262 <vfprintf+0x52>
 25c:	19 01       	movw	r2, r18
 25e:	44 2e       	mov	r4, r20
 260:	0a c0       	rjmp	.+20     	; 0x276 <vfprintf+0x66>
 262:	f9 01       	movw	r30, r18
 264:	84 91       	lpm	r24, Z
 266:	47 fd       	sbrc	r20, 7
 268:	80 81       	ld	r24, Z
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	29 0e       	add	r2, r25
 26e:	31 1c       	adc	r3, r1
 270:	41 1c       	adc	r4, r1
 272:	85 32       	cpi	r24, 0x25	; 37
 274:	49 f4       	brne	.+18     	; 0x288 <vfprintf+0x78>
 276:	b6 01       	movw	r22, r12
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 27e:	bf 86       	std	Y+15, r11	; 0x0f
 280:	ae 86       	std	Y+14, r10	; 0x0e
 282:	ae 84       	ldd	r10, Y+14	; 0x0e
 284:	bf 84       	ldd	r11, Y+15	; 0x0f
 286:	dc cf       	rjmp	.-72     	; 0x240 <vfprintf+0x30>
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	f1 2c       	mov	r15, r1
 28c:	00 e0       	ldi	r16, 0x00	; 0
 28e:	00 32       	cpi	r16, 0x20	; 32
 290:	a0 f4       	brcc	.+40     	; 0x2ba <vfprintf+0xaa>
 292:	8b 32       	cpi	r24, 0x2B	; 43
 294:	69 f0       	breq	.+26     	; 0x2b0 <vfprintf+0xa0>
 296:	30 f4       	brcc	.+12     	; 0x2a4 <vfprintf+0x94>
 298:	80 32       	cpi	r24, 0x20	; 32
 29a:	59 f0       	breq	.+22     	; 0x2b2 <vfprintf+0xa2>
 29c:	83 32       	cpi	r24, 0x23	; 35
 29e:	69 f4       	brne	.+26     	; 0x2ba <vfprintf+0xaa>
 2a0:	00 61       	ori	r16, 0x10	; 16
 2a2:	2c c0       	rjmp	.+88     	; 0x2fc <vfprintf+0xec>
 2a4:	8d 32       	cpi	r24, 0x2D	; 45
 2a6:	39 f0       	breq	.+14     	; 0x2b6 <vfprintf+0xa6>
 2a8:	80 33       	cpi	r24, 0x30	; 48
 2aa:	39 f4       	brne	.+14     	; 0x2ba <vfprintf+0xaa>
 2ac:	01 60       	ori	r16, 0x01	; 1
 2ae:	26 c0       	rjmp	.+76     	; 0x2fc <vfprintf+0xec>
 2b0:	02 60       	ori	r16, 0x02	; 2
 2b2:	04 60       	ori	r16, 0x04	; 4
 2b4:	23 c0       	rjmp	.+70     	; 0x2fc <vfprintf+0xec>
 2b6:	08 60       	ori	r16, 0x08	; 8
 2b8:	21 c0       	rjmp	.+66     	; 0x2fc <vfprintf+0xec>
 2ba:	07 fd       	sbrc	r16, 7
 2bc:	29 c0       	rjmp	.+82     	; 0x310 <vfprintf+0x100>
 2be:	90 ed       	ldi	r25, 0xD0	; 208
 2c0:	98 0f       	add	r25, r24
 2c2:	9a 30       	cpi	r25, 0x0A	; 10
 2c4:	78 f4       	brcc	.+30     	; 0x2e4 <vfprintf+0xd4>
 2c6:	06 ff       	sbrs	r16, 6
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <vfprintf+0xc6>
 2ca:	aa e0       	ldi	r26, 0x0A	; 10
 2cc:	1a 9f       	mul	r17, r26
 2ce:	90 0d       	add	r25, r0
 2d0:	11 24       	eor	r1, r1
 2d2:	19 2f       	mov	r17, r25
 2d4:	13 c0       	rjmp	.+38     	; 0x2fc <vfprintf+0xec>
 2d6:	ea e0       	ldi	r30, 0x0A	; 10
 2d8:	fe 9e       	mul	r15, r30
 2da:	90 0d       	add	r25, r0
 2dc:	11 24       	eor	r1, r1
 2de:	f9 2e       	mov	r15, r25
 2e0:	00 62       	ori	r16, 0x20	; 32
 2e2:	0c c0       	rjmp	.+24     	; 0x2fc <vfprintf+0xec>
 2e4:	8e 32       	cpi	r24, 0x2E	; 46
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <vfprintf+0xe0>
 2e8:	06 fd       	sbrc	r16, 6
 2ea:	00 c3       	rjmp	.+1536   	; 0x8ec <__EEPROM_REGION_LENGTH__+0xec>
 2ec:	00 64       	ori	r16, 0x40	; 64
 2ee:	06 c0       	rjmp	.+12     	; 0x2fc <vfprintf+0xec>
 2f0:	8c 36       	cpi	r24, 0x6C	; 108
 2f2:	11 f4       	brne	.+4      	; 0x2f8 <vfprintf+0xe8>
 2f4:	00 68       	ori	r16, 0x80	; 128
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <vfprintf+0xec>
 2f8:	88 36       	cpi	r24, 0x68	; 104
 2fa:	51 f4       	brne	.+20     	; 0x310 <vfprintf+0x100>
 2fc:	f1 01       	movw	r30, r2
 2fe:	84 91       	lpm	r24, Z
 300:	47 fc       	sbrc	r4, 7
 302:	80 81       	ld	r24, Z
 304:	ff ef       	ldi	r31, 0xFF	; 255
 306:	2f 1a       	sub	r2, r31
 308:	3f 0a       	sbc	r3, r31
 30a:	4f 0a       	sbc	r4, r31
 30c:	81 11       	cpse	r24, r1
 30e:	bf cf       	rjmp	.-130    	; 0x28e <vfprintf+0x7e>
 310:	9b eb       	ldi	r25, 0xBB	; 187
 312:	98 0f       	add	r25, r24
 314:	93 30       	cpi	r25, 0x03	; 3
 316:	18 f4       	brcc	.+6      	; 0x31e <vfprintf+0x10e>
 318:	00 61       	ori	r16, 0x10	; 16
 31a:	80 5e       	subi	r24, 0xE0	; 224
 31c:	06 c0       	rjmp	.+12     	; 0x32a <vfprintf+0x11a>
 31e:	9b e9       	ldi	r25, 0x9B	; 155
 320:	98 0f       	add	r25, r24
 322:	93 30       	cpi	r25, 0x03	; 3
 324:	08 f0       	brcs	.+2      	; 0x328 <vfprintf+0x118>
 326:	66 c1       	rjmp	.+716    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 328:	0f 7e       	andi	r16, 0xEF	; 239
 32a:	06 ff       	sbrs	r16, 6
 32c:	16 e0       	ldi	r17, 0x06	; 6
 32e:	0f 73       	andi	r16, 0x3F	; 63
 330:	70 2e       	mov	r7, r16
 332:	85 36       	cpi	r24, 0x65	; 101
 334:	21 f4       	brne	.+8      	; 0x33e <vfprintf+0x12e>
 336:	20 2f       	mov	r18, r16
 338:	20 64       	ori	r18, 0x40	; 64
 33a:	72 2e       	mov	r7, r18
 33c:	08 c0       	rjmp	.+16     	; 0x34e <vfprintf+0x13e>
 33e:	86 36       	cpi	r24, 0x66	; 102
 340:	21 f4       	brne	.+8      	; 0x34a <vfprintf+0x13a>
 342:	80 2f       	mov	r24, r16
 344:	80 68       	ori	r24, 0x80	; 128
 346:	78 2e       	mov	r7, r24
 348:	02 c0       	rjmp	.+4      	; 0x34e <vfprintf+0x13e>
 34a:	11 11       	cpse	r17, r1
 34c:	11 50       	subi	r17, 0x01	; 1
 34e:	77 fe       	sbrs	r7, 7
 350:	07 c0       	rjmp	.+14     	; 0x360 <vfprintf+0x150>
 352:	1c 33       	cpi	r17, 0x3C	; 60
 354:	50 f4       	brcc	.+20     	; 0x36a <vfprintf+0x15a>
 356:	ee 24       	eor	r14, r14
 358:	e3 94       	inc	r14
 35a:	e1 0e       	add	r14, r17
 35c:	27 e0       	ldi	r18, 0x07	; 7
 35e:	0b c0       	rjmp	.+22     	; 0x376 <vfprintf+0x166>
 360:	18 30       	cpi	r17, 0x08	; 8
 362:	38 f0       	brcs	.+14     	; 0x372 <vfprintf+0x162>
 364:	27 e0       	ldi	r18, 0x07	; 7
 366:	17 e0       	ldi	r17, 0x07	; 7
 368:	05 c0       	rjmp	.+10     	; 0x374 <vfprintf+0x164>
 36a:	27 e0       	ldi	r18, 0x07	; 7
 36c:	6c e3       	ldi	r22, 0x3C	; 60
 36e:	e6 2e       	mov	r14, r22
 370:	02 c0       	rjmp	.+4      	; 0x376 <vfprintf+0x166>
 372:	21 2f       	mov	r18, r17
 374:	e1 2c       	mov	r14, r1
 376:	f5 01       	movw	r30, r10
 378:	34 96       	adiw	r30, 0x04	; 4
 37a:	ff 87       	std	Y+15, r31	; 0x0f
 37c:	ee 87       	std	Y+14, r30	; 0x0e
 37e:	f5 01       	movw	r30, r10
 380:	60 81       	ld	r22, Z
 382:	71 81       	ldd	r23, Z+1	; 0x01
 384:	82 81       	ldd	r24, Z+2	; 0x02
 386:	93 81       	ldd	r25, Z+3	; 0x03
 388:	0e 2d       	mov	r16, r14
 38a:	ae 01       	movw	r20, r28
 38c:	4f 5f       	subi	r20, 0xFF	; 255
 38e:	5f 4f       	sbci	r21, 0xFF	; 255
 390:	0e 94 aa 04 	call	0x954	; 0x954 <__ftoa_engine>
 394:	5c 01       	movw	r10, r24
 396:	59 80       	ldd	r5, Y+1	; 0x01
 398:	50 fe       	sbrs	r5, 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <vfprintf+0x190>
 39c:	53 fe       	sbrs	r5, 3
 39e:	06 c0       	rjmp	.+12     	; 0x3ac <vfprintf+0x19c>
 3a0:	71 fc       	sbrc	r7, 1
 3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <vfprintf+0x1a0>
 3a4:	72 fe       	sbrs	r7, 2
 3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <vfprintf+0x1a4>
 3a8:	00 e2       	ldi	r16, 0x20	; 32
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <vfprintf+0x1a6>
 3ac:	0d e2       	ldi	r16, 0x2D	; 45
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <vfprintf+0x1a6>
 3b0:	0b e2       	ldi	r16, 0x2B	; 43
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <vfprintf+0x1a6>
 3b4:	00 e0       	ldi	r16, 0x00	; 0
 3b6:	85 2d       	mov	r24, r5
 3b8:	8c 70       	andi	r24, 0x0C	; 12
 3ba:	19 f0       	breq	.+6      	; 0x3c2 <vfprintf+0x1b2>
 3bc:	01 11       	cpse	r16, r1
 3be:	73 c2       	rjmp	.+1254   	; 0x8a6 <__EEPROM_REGION_LENGTH__+0xa6>
 3c0:	be c2       	rjmp	.+1404   	; 0x93e <__EEPROM_REGION_LENGTH__+0x13e>
 3c2:	77 fe       	sbrs	r7, 7
 3c4:	0f c0       	rjmp	.+30     	; 0x3e4 <vfprintf+0x1d4>
 3c6:	ea 0c       	add	r14, r10
 3c8:	54 fe       	sbrs	r5, 4
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <vfprintf+0x1c4>
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	81 33       	cpi	r24, 0x31	; 49
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <vfprintf+0x1c4>
 3d2:	ea 94       	dec	r14
 3d4:	1e 14       	cp	r1, r14
 3d6:	74 f5       	brge	.+92     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3d8:	28 e0       	ldi	r18, 0x08	; 8
 3da:	2e 15       	cp	r18, r14
 3dc:	78 f5       	brcc	.+94     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3de:	38 e0       	ldi	r19, 0x08	; 8
 3e0:	e3 2e       	mov	r14, r19
 3e2:	2c c0       	rjmp	.+88     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3e4:	76 fc       	sbrc	r7, 6
 3e6:	2a c0       	rjmp	.+84     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3e8:	81 2f       	mov	r24, r17
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	8a 15       	cp	r24, r10
 3ee:	9b 05       	cpc	r25, r11
 3f0:	9c f0       	brlt	.+38     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3f2:	8c ef       	ldi	r24, 0xFC	; 252
 3f4:	a8 16       	cp	r10, r24
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	b8 06       	cpc	r11, r24
 3fa:	74 f0       	brlt	.+28     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3fc:	97 2d       	mov	r25, r7
 3fe:	90 68       	ori	r25, 0x80	; 128
 400:	79 2e       	mov	r7, r25
 402:	0a c0       	rjmp	.+20     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 404:	e2 e0       	ldi	r30, 0x02	; 2
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	ec 0f       	add	r30, r28
 40a:	fd 1f       	adc	r31, r29
 40c:	e1 0f       	add	r30, r17
 40e:	f1 1d       	adc	r31, r1
 410:	80 81       	ld	r24, Z
 412:	80 33       	cpi	r24, 0x30	; 48
 414:	19 f4       	brne	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 416:	11 50       	subi	r17, 0x01	; 1
 418:	11 11       	cpse	r17, r1
 41a:	f4 cf       	rjmp	.-24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 41c:	77 fe       	sbrs	r7, 7
 41e:	0e c0       	rjmp	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 420:	ee 24       	eor	r14, r14
 422:	e3 94       	inc	r14
 424:	e1 0e       	add	r14, r17
 426:	81 2f       	mov	r24, r17
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	a8 16       	cp	r10, r24
 42c:	b9 06       	cpc	r11, r25
 42e:	2c f4       	brge	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 430:	1a 19       	sub	r17, r10
 432:	04 c0       	rjmp	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 434:	ee 24       	eor	r14, r14
 436:	e3 94       	inc	r14
 438:	01 c0       	rjmp	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	77 fe       	sbrs	r7, 7
 43e:	06 c0       	rjmp	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 440:	1a 14       	cp	r1, r10
 442:	1b 04       	cpc	r1, r11
 444:	34 f4       	brge	.+12     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 446:	c5 01       	movw	r24, r10
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	05 c0       	rjmp	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	01 11       	cpse	r16, r1
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	11 23       	and	r17, r17
 45c:	31 f0       	breq	.+12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 45e:	21 2f       	mov	r18, r17
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	2f 5f       	subi	r18, 0xFF	; 255
 464:	3f 4f       	sbci	r19, 0xFF	; 255
 466:	82 0f       	add	r24, r18
 468:	93 1f       	adc	r25, r19
 46a:	2f 2d       	mov	r18, r15
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	82 17       	cp	r24, r18
 470:	93 07       	cpc	r25, r19
 472:	14 f4       	brge	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 474:	f8 1a       	sub	r15, r24
 476:	01 c0       	rjmp	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 478:	f1 2c       	mov	r15, r1
 47a:	87 2d       	mov	r24, r7
 47c:	89 70       	andi	r24, 0x09	; 9
 47e:	49 f4       	brne	.+18     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 480:	ff 20       	and	r15, r15
 482:	39 f0       	breq	.+14     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 484:	b6 01       	movw	r22, r12
 486:	80 e2       	ldi	r24, 0x20	; 32
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 48e:	fa 94       	dec	r15
 490:	f7 cf       	rjmp	.-18     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 492:	00 23       	and	r16, r16
 494:	29 f0       	breq	.+10     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 496:	b6 01       	movw	r22, r12
 498:	80 2f       	mov	r24, r16
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 4a0:	73 fc       	sbrc	r7, 3
 4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4a4:	ff 20       	and	r15, r15
 4a6:	39 f0       	breq	.+14     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4a8:	b6 01       	movw	r22, r12
 4aa:	80 e3       	ldi	r24, 0x30	; 48
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 4b2:	fa 94       	dec	r15
 4b4:	f7 cf       	rjmp	.-18     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4b6:	77 fe       	sbrs	r7, 7
 4b8:	49 c0       	rjmp	.+146    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 4ba:	35 01       	movw	r6, r10
 4bc:	b7 fe       	sbrs	r11, 7
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c0:	61 2c       	mov	r6, r1
 4c2:	71 2c       	mov	r7, r1
 4c4:	c5 01       	movw	r24, r10
 4c6:	86 19       	sub	r24, r6
 4c8:	97 09       	sbc	r25, r7
 4ca:	88 24       	eor	r8, r8
 4cc:	83 94       	inc	r8
 4ce:	91 2c       	mov	r9, r1
 4d0:	8c 0e       	add	r8, r28
 4d2:	9d 1e       	adc	r9, r29
 4d4:	88 0e       	add	r8, r24
 4d6:	99 1e       	adc	r9, r25
 4d8:	f5 01       	movw	r30, r10
 4da:	ee 19       	sub	r30, r14
 4dc:	f1 09       	sbc	r31, r1
 4de:	f9 8b       	std	Y+17, r31	; 0x11
 4e0:	e8 8b       	std	Y+16, r30	; 0x10
 4e2:	01 2f       	mov	r16, r17
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	11 95       	neg	r17
 4e8:	01 95       	neg	r16
 4ea:	11 09       	sbc	r17, r1
 4ec:	ff ef       	ldi	r31, 0xFF	; 255
 4ee:	6f 16       	cp	r6, r31
 4f0:	7f 06       	cpc	r7, r31
 4f2:	29 f4       	brne	.+10     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4f4:	b6 01       	movw	r22, r12
 4f6:	8e e2       	ldi	r24, 0x2E	; 46
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 4fe:	a6 14       	cp	r10, r6
 500:	b7 04       	cpc	r11, r7
 502:	44 f0       	brlt	.+16     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 504:	88 89       	ldd	r24, Y+16	; 0x10
 506:	99 89       	ldd	r25, Y+17	; 0x11
 508:	86 15       	cp	r24, r6
 50a:	97 05       	cpc	r25, r7
 50c:	1c f4       	brge	.+6      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 50e:	f4 01       	movw	r30, r8
 510:	81 81       	ldd	r24, Z+1	; 0x01
 512:	01 c0       	rjmp	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 514:	80 e3       	ldi	r24, 0x30	; 48
 516:	f1 e0       	ldi	r31, 0x01	; 1
 518:	6f 1a       	sub	r6, r31
 51a:	71 08       	sbc	r7, r1
 51c:	2f ef       	ldi	r18, 0xFF	; 255
 51e:	82 1a       	sub	r8, r18
 520:	92 0a       	sbc	r9, r18
 522:	60 16       	cp	r6, r16
 524:	71 06       	cpc	r7, r17
 526:	2c f0       	brlt	.+10     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 528:	b6 01       	movw	r22, r12
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 530:	dd cf       	rjmp	.-70     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 532:	a6 14       	cp	r10, r6
 534:	b7 04       	cpc	r11, r7
 536:	39 f4       	brne	.+14     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 538:	9a 81       	ldd	r25, Y+2	; 0x02
 53a:	96 33       	cpi	r25, 0x36	; 54
 53c:	18 f4       	brcc	.+6      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 53e:	95 33       	cpi	r25, 0x35	; 53
 540:	11 f4       	brne	.+4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 542:	54 fe       	sbrs	r5, 4
 544:	81 e3       	ldi	r24, 0x31	; 49
 546:	b6 01       	movw	r22, r12
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	51 c0       	rjmp	.+162    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	81 33       	cpi	r24, 0x31	; 49
 550:	19 f0       	breq	.+6      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 552:	95 2d       	mov	r25, r5
 554:	9f 7e       	andi	r25, 0xEF	; 239
 556:	59 2e       	mov	r5, r25
 558:	b6 01       	movw	r22, r12
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 560:	11 11       	cpse	r17, r1
 562:	05 c0       	rjmp	.+10     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 564:	74 fc       	sbrc	r7, 4
 566:	1c c0       	rjmp	.+56     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 568:	85 e6       	ldi	r24, 0x65	; 101
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	1b c0       	rjmp	.+54     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 56e:	b6 01       	movw	r22, r12
 570:	8e e2       	ldi	r24, 0x2E	; 46
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 578:	02 e0       	ldi	r16, 0x02	; 2
 57a:	01 0f       	add	r16, r17
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	11 e0       	ldi	r17, 0x01	; 1
 580:	18 0f       	add	r17, r24
 582:	e1 e0       	ldi	r30, 0x01	; 1
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	ec 0f       	add	r30, r28
 588:	fd 1f       	adc	r31, r29
 58a:	e8 0f       	add	r30, r24
 58c:	f1 1d       	adc	r31, r1
 58e:	80 81       	ld	r24, Z
 590:	b6 01       	movw	r22, r12
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 598:	81 2f       	mov	r24, r17
 59a:	10 13       	cpse	r17, r16
 59c:	f0 cf       	rjmp	.-32     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 59e:	e2 cf       	rjmp	.-60     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 5a0:	85 e4       	ldi	r24, 0x45	; 69
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	b6 01       	movw	r22, r12
 5a6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 5aa:	b7 fc       	sbrc	r11, 7
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5ae:	a1 14       	cp	r10, r1
 5b0:	b1 04       	cpc	r11, r1
 5b2:	39 f4       	brne	.+14     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5b4:	54 fe       	sbrs	r5, 4
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5b8:	b1 94       	neg	r11
 5ba:	a1 94       	neg	r10
 5bc:	b1 08       	sbc	r11, r1
 5be:	8d e2       	ldi	r24, 0x2D	; 45
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5c2:	8b e2       	ldi	r24, 0x2B	; 43
 5c4:	b6 01       	movw	r22, r12
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 5cc:	80 e3       	ldi	r24, 0x30	; 48
 5ce:	ea e0       	ldi	r30, 0x0A	; 10
 5d0:	ae 16       	cp	r10, r30
 5d2:	b1 04       	cpc	r11, r1
 5d4:	2c f0       	brlt	.+10     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5d6:	8f 5f       	subi	r24, 0xFF	; 255
 5d8:	aa e0       	ldi	r26, 0x0A	; 10
 5da:	aa 1a       	sub	r10, r26
 5dc:	b1 08       	sbc	r11, r1
 5de:	f7 cf       	rjmp	.-18     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5e0:	b6 01       	movw	r22, r12
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 5e8:	b6 01       	movw	r22, r12
 5ea:	c5 01       	movw	r24, r10
 5ec:	c0 96       	adiw	r24, 0x30	; 48
 5ee:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 5f2:	72 c1       	rjmp	.+740    	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 5f4:	83 36       	cpi	r24, 0x63	; 99
 5f6:	31 f0       	breq	.+12     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5f8:	83 37       	cpi	r24, 0x73	; 115
 5fa:	91 f0       	breq	.+36     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 5fc:	83 35       	cpi	r24, 0x53	; 83
 5fe:	09 f0       	breq	.+2      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 600:	5d c0       	rjmp	.+186    	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 602:	24 c0       	rjmp	.+72     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 604:	c5 01       	movw	r24, r10
 606:	02 96       	adiw	r24, 0x02	; 2
 608:	9f 87       	std	Y+15, r25	; 0x0f
 60a:	8e 87       	std	Y+14, r24	; 0x0e
 60c:	f5 01       	movw	r30, r10
 60e:	80 81       	ld	r24, Z
 610:	89 83       	std	Y+1, r24	; 0x01
 612:	6a 88       	ldd	r6, Y+18	; 0x12
 614:	7b 88       	ldd	r7, Y+19	; 0x13
 616:	8c 88       	ldd	r8, Y+20	; 0x14
 618:	aa 24       	eor	r10, r10
 61a:	a3 94       	inc	r10
 61c:	b1 2c       	mov	r11, r1
 61e:	14 c0       	rjmp	.+40     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 620:	c5 01       	movw	r24, r10
 622:	03 96       	adiw	r24, 0x03	; 3
 624:	9f 87       	std	Y+15, r25	; 0x0f
 626:	8e 87       	std	Y+14, r24	; 0x0e
 628:	f5 01       	movw	r30, r10
 62a:	60 80       	ld	r6, Z
 62c:	71 80       	ldd	r7, Z+1	; 0x01
 62e:	82 80       	ldd	r8, Z+2	; 0x02
 630:	06 ff       	sbrs	r16, 6
 632:	03 c0       	rjmp	.+6      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 634:	41 2f       	mov	r20, r17
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 63a:	4f ef       	ldi	r20, 0xFF	; 255
 63c:	5f ef       	ldi	r21, 0xFF	; 255
 63e:	88 2d       	mov	r24, r8
 640:	b3 01       	movw	r22, r6
 642:	0e 94 96 0c 	call	0x192c	; 0x192c <strnlen>
 646:	5c 01       	movw	r10, r24
 648:	0f 77       	andi	r16, 0x7F	; 127
 64a:	15 c0       	rjmp	.+42     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 64c:	c5 01       	movw	r24, r10
 64e:	03 96       	adiw	r24, 0x03	; 3
 650:	9f 87       	std	Y+15, r25	; 0x0f
 652:	8e 87       	std	Y+14, r24	; 0x0e
 654:	f5 01       	movw	r30, r10
 656:	60 80       	ld	r6, Z
 658:	71 80       	ldd	r7, Z+1	; 0x01
 65a:	82 80       	ldd	r8, Z+2	; 0x02
 65c:	06 ff       	sbrs	r16, 6
 65e:	03 c0       	rjmp	.+6      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 660:	41 2f       	mov	r20, r17
 662:	50 e0       	ldi	r21, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 666:	4f ef       	ldi	r20, 0xFF	; 255
 668:	5f ef       	ldi	r21, 0xFF	; 255
 66a:	88 2d       	mov	r24, r8
 66c:	b3 01       	movw	r22, r6
 66e:	0e 94 96 0c 	call	0x192c	; 0x192c <strnlen>
 672:	5c 01       	movw	r10, r24
 674:	00 68       	ori	r16, 0x80	; 128
 676:	03 fd       	sbrc	r16, 3
 678:	1d c0       	rjmp	.+58     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 67a:	8f 2d       	mov	r24, r15
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	a8 16       	cp	r10, r24
 680:	b9 06       	cpc	r11, r25
 682:	c0 f4       	brcc	.+48     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 684:	b6 01       	movw	r22, r12
 686:	80 e2       	ldi	r24, 0x20	; 32
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 68e:	fa 94       	dec	r15
 690:	f4 cf       	rjmp	.-24     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 692:	f3 01       	movw	r30, r6
 694:	84 91       	lpm	r24, Z
 696:	87 fc       	sbrc	r8, 7
 698:	80 81       	ld	r24, Z
 69a:	ff ef       	ldi	r31, 0xFF	; 255
 69c:	6f 1a       	sub	r6, r31
 69e:	7f 0a       	sbc	r7, r31
 6a0:	8f 0a       	sbc	r8, r31
 6a2:	b6 01       	movw	r22, r12
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 6aa:	f1 10       	cpse	r15, r1
 6ac:	fa 94       	dec	r15
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	a2 1a       	sub	r10, r18
 6b2:	b1 08       	sbc	r11, r1
 6b4:	a1 14       	cp	r10, r1
 6b6:	b1 04       	cpc	r11, r1
 6b8:	61 f7       	brne	.-40     	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 6ba:	0e c1       	rjmp	.+540    	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 6bc:	84 36       	cpi	r24, 0x64	; 100
 6be:	11 f0       	breq	.+4      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6c0:	89 36       	cpi	r24, 0x69	; 105
 6c2:	79 f5       	brne	.+94     	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
 6c4:	c5 01       	movw	r24, r10
 6c6:	07 ff       	sbrs	r16, 7
 6c8:	09 c0       	rjmp	.+18     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6ca:	04 96       	adiw	r24, 0x04	; 4
 6cc:	9f 87       	std	Y+15, r25	; 0x0f
 6ce:	8e 87       	std	Y+14, r24	; 0x0e
 6d0:	f5 01       	movw	r30, r10
 6d2:	60 81       	ld	r22, Z
 6d4:	71 81       	ldd	r23, Z+1	; 0x01
 6d6:	82 81       	ldd	r24, Z+2	; 0x02
 6d8:	93 81       	ldd	r25, Z+3	; 0x03
 6da:	0a c0       	rjmp	.+20     	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
 6dc:	02 96       	adiw	r24, 0x02	; 2
 6de:	9f 87       	std	Y+15, r25	; 0x0f
 6e0:	8e 87       	std	Y+14, r24	; 0x0e
 6e2:	f5 01       	movw	r30, r10
 6e4:	60 81       	ld	r22, Z
 6e6:	71 81       	ldd	r23, Z+1	; 0x01
 6e8:	07 2e       	mov	r0, r23
 6ea:	00 0c       	add	r0, r0
 6ec:	88 0b       	sbc	r24, r24
 6ee:	99 0b       	sbc	r25, r25
 6f0:	0f 76       	andi	r16, 0x6F	; 111
 6f2:	e0 2e       	mov	r14, r16
 6f4:	97 ff       	sbrs	r25, 7
 6f6:	0a c0       	rjmp	.+20     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
 6f8:	90 95       	com	r25
 6fa:	80 95       	com	r24
 6fc:	70 95       	com	r23
 6fe:	61 95       	neg	r22
 700:	7f 4f       	sbci	r23, 0xFF	; 255
 702:	8f 4f       	sbci	r24, 0xFF	; 255
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	f0 2f       	mov	r31, r16
 708:	f0 68       	ori	r31, 0x80	; 128
 70a:	ef 2e       	mov	r14, r31
 70c:	2a e0       	ldi	r18, 0x0A	; 10
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	ae 01       	movw	r20, r28
 712:	4f 5f       	subi	r20, 0xFF	; 255
 714:	5f 4f       	sbci	r21, 0xFF	; 255
 716:	0e 94 0b 08 	call	0x1016	; 0x1016 <__ultoa_invert>
 71a:	a8 2e       	mov	r10, r24
 71c:	2c 85       	ldd	r18, Y+12	; 0x0c
 71e:	a2 1a       	sub	r10, r18
 720:	4b c0       	rjmp	.+150    	; 0x7b8 <__LOCK_REGION_LENGTH__+0x3b8>
 722:	85 37       	cpi	r24, 0x75	; 117
 724:	29 f4       	brne	.+10     	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 726:	0f 7e       	andi	r16, 0xEF	; 239
 728:	e0 2e       	mov	r14, r16
 72a:	2a e0       	ldi	r18, 0x0A	; 10
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	25 c0       	rjmp	.+74     	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 730:	90 2f       	mov	r25, r16
 732:	99 7f       	andi	r25, 0xF9	; 249
 734:	e9 2e       	mov	r14, r25
 736:	8f 36       	cpi	r24, 0x6F	; 111
 738:	c1 f0       	breq	.+48     	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
 73a:	18 f4       	brcc	.+6      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 73c:	88 35       	cpi	r24, 0x58	; 88
 73e:	79 f0       	breq	.+30     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 740:	d5 c0       	rjmp	.+426    	; 0x8ec <__EEPROM_REGION_LENGTH__+0xec>
 742:	80 37       	cpi	r24, 0x70	; 112
 744:	19 f0       	breq	.+6      	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 746:	88 37       	cpi	r24, 0x78	; 120
 748:	21 f0       	breq	.+8      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
 74a:	d0 c0       	rjmp	.+416    	; 0x8ec <__EEPROM_REGION_LENGTH__+0xec>
 74c:	a9 2f       	mov	r26, r25
 74e:	a0 61       	ori	r26, 0x10	; 16
 750:	ea 2e       	mov	r14, r26
 752:	e4 fe       	sbrs	r14, 4
 754:	0d c0       	rjmp	.+26     	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 756:	ee 2d       	mov	r30, r14
 758:	e4 60       	ori	r30, 0x04	; 4
 75a:	ee 2e       	mov	r14, r30
 75c:	09 c0       	rjmp	.+18     	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 75e:	04 ff       	sbrs	r16, 4
 760:	0a c0       	rjmp	.+20     	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 762:	f9 2f       	mov	r31, r25
 764:	f6 60       	ori	r31, 0x06	; 6
 766:	ef 2e       	mov	r14, r31
 768:	06 c0       	rjmp	.+12     	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 76a:	28 e0       	ldi	r18, 0x08	; 8
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	05 c0       	rjmp	.+10     	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 770:	20 e1       	ldi	r18, 0x10	; 16
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
 776:	20 e1       	ldi	r18, 0x10	; 16
 778:	32 e0       	ldi	r19, 0x02	; 2
 77a:	c5 01       	movw	r24, r10
 77c:	e7 fe       	sbrs	r14, 7
 77e:	09 c0       	rjmp	.+18     	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
 780:	04 96       	adiw	r24, 0x04	; 4
 782:	9f 87       	std	Y+15, r25	; 0x0f
 784:	8e 87       	std	Y+14, r24	; 0x0e
 786:	f5 01       	movw	r30, r10
 788:	60 81       	ld	r22, Z
 78a:	71 81       	ldd	r23, Z+1	; 0x01
 78c:	82 81       	ldd	r24, Z+2	; 0x02
 78e:	93 81       	ldd	r25, Z+3	; 0x03
 790:	08 c0       	rjmp	.+16     	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
 792:	02 96       	adiw	r24, 0x02	; 2
 794:	9f 87       	std	Y+15, r25	; 0x0f
 796:	8e 87       	std	Y+14, r24	; 0x0e
 798:	f5 01       	movw	r30, r10
 79a:	60 81       	ld	r22, Z
 79c:	71 81       	ldd	r23, Z+1	; 0x01
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	ae 01       	movw	r20, r28
 7a4:	4f 5f       	subi	r20, 0xFF	; 255
 7a6:	5f 4f       	sbci	r21, 0xFF	; 255
 7a8:	0e 94 0b 08 	call	0x1016	; 0x1016 <__ultoa_invert>
 7ac:	a8 2e       	mov	r10, r24
 7ae:	fc 85       	ldd	r31, Y+12	; 0x0c
 7b0:	af 1a       	sub	r10, r31
 7b2:	2e 2d       	mov	r18, r14
 7b4:	2f 77       	andi	r18, 0x7F	; 127
 7b6:	e2 2e       	mov	r14, r18
 7b8:	e6 fe       	sbrs	r14, 6
 7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
 7bc:	0e 2d       	mov	r16, r14
 7be:	0e 7f       	andi	r16, 0xFE	; 254
 7c0:	a1 16       	cp	r10, r17
 7c2:	50 f4       	brcc	.+20     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
 7c4:	e4 fe       	sbrs	r14, 4
 7c6:	0a c0       	rjmp	.+20     	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
 7c8:	e2 fc       	sbrc	r14, 2
 7ca:	08 c0       	rjmp	.+16     	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
 7cc:	0e 2d       	mov	r16, r14
 7ce:	0e 7e       	andi	r16, 0xEE	; 238
 7d0:	05 c0       	rjmp	.+10     	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
 7d2:	ba 2c       	mov	r11, r10
 7d4:	0e 2d       	mov	r16, r14
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
 7d8:	ba 2c       	mov	r11, r10
 7da:	01 c0       	rjmp	.+2      	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
 7dc:	b1 2e       	mov	r11, r17
 7de:	04 ff       	sbrs	r16, 4
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
 7e2:	fe 01       	movw	r30, r28
 7e4:	ea 0d       	add	r30, r10
 7e6:	f1 1d       	adc	r31, r1
 7e8:	80 81       	ld	r24, Z
 7ea:	80 33       	cpi	r24, 0x30	; 48
 7ec:	11 f4       	brne	.+4      	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
 7ee:	09 7e       	andi	r16, 0xE9	; 233
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 7f2:	02 ff       	sbrs	r16, 2
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <__EEPROM_REGION_LENGTH__+0x2>
 7f6:	b3 94       	inc	r11
 7f8:	b3 94       	inc	r11
 7fa:	04 c0       	rjmp	.+8      	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 7fc:	80 2f       	mov	r24, r16
 7fe:	86 78       	andi	r24, 0x86	; 134
 800:	09 f0       	breq	.+2      	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 802:	b3 94       	inc	r11
 804:	03 fd       	sbrc	r16, 3
 806:	11 c0       	rjmp	.+34     	; 0x82a <__EEPROM_REGION_LENGTH__+0x2a>
 808:	00 ff       	sbrs	r16, 0
 80a:	06 c0       	rjmp	.+12     	; 0x818 <__EEPROM_REGION_LENGTH__+0x18>
 80c:	bf 14       	cp	r11, r15
 80e:	88 f4       	brcc	.+34     	; 0x832 <__EEPROM_REGION_LENGTH__+0x32>
 810:	fa 0c       	add	r15, r10
 812:	1f 2d       	mov	r17, r15
 814:	1b 19       	sub	r17, r11
 816:	0e c0       	rjmp	.+28     	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
 818:	bf 14       	cp	r11, r15
 81a:	60 f4       	brcc	.+24     	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
 81c:	b6 01       	movw	r22, r12
 81e:	80 e2       	ldi	r24, 0x20	; 32
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 826:	b3 94       	inc	r11
 828:	f7 cf       	rjmp	.-18     	; 0x818 <__EEPROM_REGION_LENGTH__+0x18>
 82a:	bf 14       	cp	r11, r15
 82c:	18 f4       	brcc	.+6      	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
 82e:	fb 18       	sub	r15, r11
 830:	02 c0       	rjmp	.+4      	; 0x836 <__EEPROM_REGION_LENGTH__+0x36>
 832:	1a 2d       	mov	r17, r10
 834:	f1 2c       	mov	r15, r1
 836:	04 ff       	sbrs	r16, 4
 838:	10 c0       	rjmp	.+32     	; 0x85a <__EEPROM_REGION_LENGTH__+0x5a>
 83a:	b6 01       	movw	r22, r12
 83c:	80 e3       	ldi	r24, 0x30	; 48
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 844:	02 ff       	sbrs	r16, 2
 846:	17 c0       	rjmp	.+46     	; 0x876 <__EEPROM_REGION_LENGTH__+0x76>
 848:	01 fd       	sbrc	r16, 1
 84a:	03 c0       	rjmp	.+6      	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
 84c:	88 e7       	ldi	r24, 0x78	; 120
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <__EEPROM_REGION_LENGTH__+0x56>
 852:	88 e5       	ldi	r24, 0x58	; 88
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	b6 01       	movw	r22, r12
 858:	0c c0       	rjmp	.+24     	; 0x872 <__EEPROM_REGION_LENGTH__+0x72>
 85a:	80 2f       	mov	r24, r16
 85c:	86 78       	andi	r24, 0x86	; 134
 85e:	59 f0       	breq	.+22     	; 0x876 <__EEPROM_REGION_LENGTH__+0x76>
 860:	01 ff       	sbrs	r16, 1
 862:	02 c0       	rjmp	.+4      	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
 864:	8b e2       	ldi	r24, 0x2B	; 43
 866:	01 c0       	rjmp	.+2      	; 0x86a <__EEPROM_REGION_LENGTH__+0x6a>
 868:	80 e2       	ldi	r24, 0x20	; 32
 86a:	07 fd       	sbrc	r16, 7
 86c:	8d e2       	ldi	r24, 0x2D	; 45
 86e:	b6 01       	movw	r22, r12
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 876:	a1 16       	cp	r10, r17
 878:	38 f4       	brcc	.+14     	; 0x888 <__EEPROM_REGION_LENGTH__+0x88>
 87a:	b6 01       	movw	r22, r12
 87c:	80 e3       	ldi	r24, 0x30	; 48
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 884:	11 50       	subi	r17, 0x01	; 1
 886:	f7 cf       	rjmp	.-18     	; 0x876 <__EEPROM_REGION_LENGTH__+0x76>
 888:	aa 94       	dec	r10
 88a:	e1 e0       	ldi	r30, 0x01	; 1
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	ec 0f       	add	r30, r28
 890:	fd 1f       	adc	r31, r29
 892:	ea 0d       	add	r30, r10
 894:	f1 1d       	adc	r31, r1
 896:	80 81       	ld	r24, Z
 898:	b6 01       	movw	r22, r12
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 8a0:	a1 10       	cpse	r10, r1
 8a2:	f2 cf       	rjmp	.-28     	; 0x888 <__EEPROM_REGION_LENGTH__+0x88>
 8a4:	19 c0       	rjmp	.+50     	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 8a6:	f4 e0       	ldi	r31, 0x04	; 4
 8a8:	ff 15       	cp	r31, r15
 8aa:	80 f5       	brcc	.+96     	; 0x90c <__EEPROM_REGION_LENGTH__+0x10c>
 8ac:	84 e0       	ldi	r24, 0x04	; 4
 8ae:	f8 1a       	sub	r15, r24
 8b0:	73 fe       	sbrs	r7, 3
 8b2:	23 c0       	rjmp	.+70     	; 0x8fa <__EEPROM_REGION_LENGTH__+0xfa>
 8b4:	01 11       	cpse	r16, r1
 8b6:	2b c0       	rjmp	.+86     	; 0x90e <__EEPROM_REGION_LENGTH__+0x10e>
 8b8:	53 fe       	sbrs	r5, 3
 8ba:	2f c0       	rjmp	.+94     	; 0x91a <__EEPROM_REGION_LENGTH__+0x11a>
 8bc:	57 e0       	ldi	r21, 0x07	; 7
 8be:	85 2e       	mov	r8, r21
 8c0:	52 e0       	ldi	r21, 0x02	; 2
 8c2:	95 2e       	mov	r9, r21
 8c4:	50 e0       	ldi	r21, 0x00	; 0
 8c6:	a5 2e       	mov	r10, r21
 8c8:	07 2d       	mov	r16, r7
 8ca:	00 71       	andi	r16, 0x10	; 16
 8cc:	f4 01       	movw	r30, r8
 8ce:	84 91       	lpm	r24, Z
 8d0:	a7 fc       	sbrc	r10, 7
 8d2:	80 81       	ld	r24, Z
 8d4:	81 11       	cpse	r24, r1
 8d6:	28 c0       	rjmp	.+80     	; 0x928 <__EEPROM_REGION_LENGTH__+0x128>
 8d8:	ff 20       	and	r15, r15
 8da:	09 f4       	brne	.+2      	; 0x8de <__EEPROM_REGION_LENGTH__+0xde>
 8dc:	d2 cc       	rjmp	.-1628   	; 0x282 <vfprintf+0x72>
 8de:	b6 01       	movw	r22, r12
 8e0:	80 e2       	ldi	r24, 0x20	; 32
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 8e8:	fa 94       	dec	r15
 8ea:	f6 cf       	rjmp	.-20     	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 8ec:	f6 01       	movw	r30, r12
 8ee:	87 81       	ldd	r24, Z+7	; 0x07
 8f0:	90 85       	ldd	r25, Z+8	; 0x08
 8f2:	2c c0       	rjmp	.+88     	; 0x94c <__EEPROM_REGION_LENGTH__+0x14c>
 8f4:	8f ef       	ldi	r24, 0xFF	; 255
 8f6:	9f ef       	ldi	r25, 0xFF	; 255
 8f8:	29 c0       	rjmp	.+82     	; 0x94c <__EEPROM_REGION_LENGTH__+0x14c>
 8fa:	b6 01       	movw	r22, r12
 8fc:	80 e2       	ldi	r24, 0x20	; 32
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 904:	fa 94       	dec	r15
 906:	f1 10       	cpse	r15, r1
 908:	f8 cf       	rjmp	.-16     	; 0x8fa <__EEPROM_REGION_LENGTH__+0xfa>
 90a:	d4 cf       	rjmp	.-88     	; 0x8b4 <__EEPROM_REGION_LENGTH__+0xb4>
 90c:	f1 2c       	mov	r15, r1
 90e:	b6 01       	movw	r22, r12
 910:	80 2f       	mov	r24, r16
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 918:	cf cf       	rjmp	.-98     	; 0x8b8 <__EEPROM_REGION_LENGTH__+0xb8>
 91a:	43 e0       	ldi	r20, 0x03	; 3
 91c:	84 2e       	mov	r8, r20
 91e:	42 e0       	ldi	r20, 0x02	; 2
 920:	94 2e       	mov	r9, r20
 922:	40 e0       	ldi	r20, 0x00	; 0
 924:	a4 2e       	mov	r10, r20
 926:	d0 cf       	rjmp	.-96     	; 0x8c8 <__EEPROM_REGION_LENGTH__+0xc8>
 928:	01 11       	cpse	r16, r1
 92a:	80 52       	subi	r24, 0x20	; 32
 92c:	b6 01       	movw	r22, r12
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <fputc>
 934:	ff ef       	ldi	r31, 0xFF	; 255
 936:	8f 1a       	sub	r8, r31
 938:	9f 0a       	sbc	r9, r31
 93a:	af 0a       	sbc	r10, r31
 93c:	c7 cf       	rjmp	.-114    	; 0x8cc <__EEPROM_REGION_LENGTH__+0xcc>
 93e:	23 e0       	ldi	r18, 0x03	; 3
 940:	2f 15       	cp	r18, r15
 942:	10 f4       	brcc	.+4      	; 0x948 <__EEPROM_REGION_LENGTH__+0x148>
 944:	83 e0       	ldi	r24, 0x03	; 3
 946:	b3 cf       	rjmp	.-154    	; 0x8ae <__EEPROM_REGION_LENGTH__+0xae>
 948:	f1 2c       	mov	r15, r1
 94a:	b6 cf       	rjmp	.-148    	; 0x8b8 <__EEPROM_REGION_LENGTH__+0xb8>
 94c:	64 96       	adiw	r28, 0x14	; 20
 94e:	e2 e1       	ldi	r30, 0x12	; 18
 950:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__epilogue_restores__>

Disassembly of section .text.libgcc.mul:

00001b10 <__umulhisi3>:
    1b10:	a2 9f       	mul	r26, r18
    1b12:	b0 01       	movw	r22, r0
    1b14:	b3 9f       	mul	r27, r19
    1b16:	c0 01       	movw	r24, r0
    1b18:	a3 9f       	mul	r26, r19
    1b1a:	70 0d       	add	r23, r0
    1b1c:	81 1d       	adc	r24, r1
    1b1e:	11 24       	eor	r1, r1
    1b20:	91 1d       	adc	r25, r1
    1b22:	b2 9f       	mul	r27, r18
    1b24:	70 0d       	add	r23, r0
    1b26:	81 1d       	adc	r24, r1
    1b28:	11 24       	eor	r1, r1
    1b2a:	91 1d       	adc	r25, r1
    1b2c:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000018be <__prologue_saves__>:
    18be:	2f 92       	push	r2
    18c0:	3f 92       	push	r3
    18c2:	4f 92       	push	r4
    18c4:	5f 92       	push	r5
    18c6:	6f 92       	push	r6
    18c8:	7f 92       	push	r7
    18ca:	8f 92       	push	r8
    18cc:	9f 92       	push	r9
    18ce:	af 92       	push	r10
    18d0:	bf 92       	push	r11
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	ca 1b       	sub	r28, r26
    18e8:	db 0b       	sbc	r29, r27
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000018f6 <__epilogue_restores__>:
    18f6:	2a 88       	ldd	r2, Y+18	; 0x12
    18f8:	39 88       	ldd	r3, Y+17	; 0x11
    18fa:	48 88       	ldd	r4, Y+16	; 0x10
    18fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    18fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1900:	7d 84       	ldd	r7, Y+13	; 0x0d
    1902:	8c 84       	ldd	r8, Y+12	; 0x0c
    1904:	9b 84       	ldd	r9, Y+11	; 0x0b
    1906:	aa 84       	ldd	r10, Y+10	; 0x0a
    1908:	b9 84       	ldd	r11, Y+9	; 0x09
    190a:	c8 84       	ldd	r12, Y+8	; 0x08
    190c:	df 80       	ldd	r13, Y+7	; 0x07
    190e:	ee 80       	ldd	r14, Y+6	; 0x06
    1910:	fd 80       	ldd	r15, Y+5	; 0x05
    1912:	0c 81       	ldd	r16, Y+4	; 0x04
    1914:	1b 81       	ldd	r17, Y+3	; 0x03
    1916:	aa 81       	ldd	r26, Y+2	; 0x02
    1918:	b9 81       	ldd	r27, Y+1	; 0x01
    191a:	ce 0f       	add	r28, r30
    191c:	d1 1d       	adc	r29, r1
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
    1928:	ed 01       	movw	r28, r26
    192a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000954 <__ftoa_engine>:
 954:	28 30       	cpi	r18, 0x08	; 8
 956:	08 f0       	brcs	.+2      	; 0x95a <__ftoa_engine+0x6>
 958:	27 e0       	ldi	r18, 0x07	; 7
 95a:	33 27       	eor	r19, r19
 95c:	da 01       	movw	r26, r20
 95e:	99 0f       	add	r25, r25
 960:	31 1d       	adc	r19, r1
 962:	87 fd       	sbrc	r24, 7
 964:	91 60       	ori	r25, 0x01	; 1
 966:	00 96       	adiw	r24, 0x00	; 0
 968:	61 05       	cpc	r22, r1
 96a:	71 05       	cpc	r23, r1
 96c:	39 f4       	brne	.+14     	; 0x97c <__ftoa_engine+0x28>
 96e:	32 60       	ori	r19, 0x02	; 2
 970:	2e 5f       	subi	r18, 0xFE	; 254
 972:	3d 93       	st	X+, r19
 974:	30 e3       	ldi	r19, 0x30	; 48
 976:	2a 95       	dec	r18
 978:	e1 f7       	brne	.-8      	; 0x972 <__ftoa_engine+0x1e>
 97a:	08 95       	ret
 97c:	9f 3f       	cpi	r25, 0xFF	; 255
 97e:	30 f0       	brcs	.+12     	; 0x98c <__ftoa_engine+0x38>
 980:	80 38       	cpi	r24, 0x80	; 128
 982:	71 05       	cpc	r23, r1
 984:	61 05       	cpc	r22, r1
 986:	09 f0       	breq	.+2      	; 0x98a <__ftoa_engine+0x36>
 988:	3c 5f       	subi	r19, 0xFC	; 252
 98a:	3c 5f       	subi	r19, 0xFC	; 252
 98c:	3d 93       	st	X+, r19
 98e:	91 30       	cpi	r25, 0x01	; 1
 990:	08 f0       	brcs	.+2      	; 0x994 <__ftoa_engine+0x40>
 992:	80 68       	ori	r24, 0x80	; 128
 994:	91 1d       	adc	r25, r1
 996:	df 93       	push	r29
 998:	cf 93       	push	r28
 99a:	1f 93       	push	r17
 99c:	0f 93       	push	r16
 99e:	ff 92       	push	r15
 9a0:	ef 92       	push	r14
 9a2:	19 2f       	mov	r17, r25
 9a4:	98 7f       	andi	r25, 0xF8	; 248
 9a6:	96 95       	lsr	r25
 9a8:	e9 2f       	mov	r30, r25
 9aa:	96 95       	lsr	r25
 9ac:	96 95       	lsr	r25
 9ae:	e9 0f       	add	r30, r25
 9b0:	ff 27       	eor	r31, r31
 9b2:	e8 51       	subi	r30, 0x18	; 24
 9b4:	ff 4f       	sbci	r31, 0xFF	; 255
 9b6:	99 27       	eor	r25, r25
 9b8:	33 27       	eor	r19, r19
 9ba:	ee 24       	eor	r14, r14
 9bc:	ff 24       	eor	r15, r15
 9be:	a7 01       	movw	r20, r14
 9c0:	e7 01       	movw	r28, r14
 9c2:	05 90       	lpm	r0, Z+
 9c4:	08 94       	sec
 9c6:	07 94       	ror	r0
 9c8:	28 f4       	brcc	.+10     	; 0x9d4 <__ftoa_engine+0x80>
 9ca:	36 0f       	add	r19, r22
 9cc:	e7 1e       	adc	r14, r23
 9ce:	f8 1e       	adc	r15, r24
 9d0:	49 1f       	adc	r20, r25
 9d2:	51 1d       	adc	r21, r1
 9d4:	66 0f       	add	r22, r22
 9d6:	77 1f       	adc	r23, r23
 9d8:	88 1f       	adc	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	06 94       	lsr	r0
 9de:	a1 f7       	brne	.-24     	; 0x9c8 <__ftoa_engine+0x74>
 9e0:	05 90       	lpm	r0, Z+
 9e2:	07 94       	ror	r0
 9e4:	28 f4       	brcc	.+10     	; 0x9f0 <__ftoa_engine+0x9c>
 9e6:	e7 0e       	add	r14, r23
 9e8:	f8 1e       	adc	r15, r24
 9ea:	49 1f       	adc	r20, r25
 9ec:	56 1f       	adc	r21, r22
 9ee:	c1 1d       	adc	r28, r1
 9f0:	77 0f       	add	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	66 1f       	adc	r22, r22
 9f8:	06 94       	lsr	r0
 9fa:	a1 f7       	brne	.-24     	; 0x9e4 <__ftoa_engine+0x90>
 9fc:	05 90       	lpm	r0, Z+
 9fe:	07 94       	ror	r0
 a00:	28 f4       	brcc	.+10     	; 0xa0c <__ftoa_engine+0xb8>
 a02:	f8 0e       	add	r15, r24
 a04:	49 1f       	adc	r20, r25
 a06:	56 1f       	adc	r21, r22
 a08:	c7 1f       	adc	r28, r23
 a0a:	d1 1d       	adc	r29, r1
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	66 1f       	adc	r22, r22
 a12:	77 1f       	adc	r23, r23
 a14:	06 94       	lsr	r0
 a16:	a1 f7       	brne	.-24     	; 0xa00 <__ftoa_engine+0xac>
 a18:	05 90       	lpm	r0, Z+
 a1a:	07 94       	ror	r0
 a1c:	20 f4       	brcc	.+8      	; 0xa26 <__ftoa_engine+0xd2>
 a1e:	49 0f       	add	r20, r25
 a20:	56 1f       	adc	r21, r22
 a22:	c7 1f       	adc	r28, r23
 a24:	d8 1f       	adc	r29, r24
 a26:	99 0f       	add	r25, r25
 a28:	66 1f       	adc	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	06 94       	lsr	r0
 a30:	a9 f7       	brne	.-22     	; 0xa1c <__ftoa_engine+0xc8>
 a32:	84 91       	lpm	r24, Z
 a34:	10 95       	com	r17
 a36:	17 70       	andi	r17, 0x07	; 7
 a38:	41 f0       	breq	.+16     	; 0xa4a <__ftoa_engine+0xf6>
 a3a:	d6 95       	lsr	r29
 a3c:	c7 95       	ror	r28
 a3e:	57 95       	ror	r21
 a40:	47 95       	ror	r20
 a42:	f7 94       	ror	r15
 a44:	e7 94       	ror	r14
 a46:	1a 95       	dec	r17
 a48:	c1 f7       	brne	.-16     	; 0xa3a <__ftoa_engine+0xe6>
 a4a:	ee e8       	ldi	r30, 0x8E	; 142
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	68 94       	set
 a50:	15 90       	lpm	r1, Z+
 a52:	15 91       	lpm	r17, Z+
 a54:	35 91       	lpm	r19, Z+
 a56:	65 91       	lpm	r22, Z+
 a58:	95 91       	lpm	r25, Z+
 a5a:	05 90       	lpm	r0, Z+
 a5c:	7f e2       	ldi	r23, 0x2F	; 47
 a5e:	73 95       	inc	r23
 a60:	e1 18       	sub	r14, r1
 a62:	f1 0a       	sbc	r15, r17
 a64:	43 0b       	sbc	r20, r19
 a66:	56 0b       	sbc	r21, r22
 a68:	c9 0b       	sbc	r28, r25
 a6a:	d0 09       	sbc	r29, r0
 a6c:	c0 f7       	brcc	.-16     	; 0xa5e <__ftoa_engine+0x10a>
 a6e:	e1 0c       	add	r14, r1
 a70:	f1 1e       	adc	r15, r17
 a72:	43 1f       	adc	r20, r19
 a74:	56 1f       	adc	r21, r22
 a76:	c9 1f       	adc	r28, r25
 a78:	d0 1d       	adc	r29, r0
 a7a:	7e f4       	brtc	.+30     	; 0xa9a <__ftoa_engine+0x146>
 a7c:	70 33       	cpi	r23, 0x30	; 48
 a7e:	11 f4       	brne	.+4      	; 0xa84 <__ftoa_engine+0x130>
 a80:	8a 95       	dec	r24
 a82:	e6 cf       	rjmp	.-52     	; 0xa50 <__ftoa_engine+0xfc>
 a84:	e8 94       	clt
 a86:	01 50       	subi	r16, 0x01	; 1
 a88:	30 f0       	brcs	.+12     	; 0xa96 <__ftoa_engine+0x142>
 a8a:	08 0f       	add	r16, r24
 a8c:	0a f4       	brpl	.+2      	; 0xa90 <__ftoa_engine+0x13c>
 a8e:	00 27       	eor	r16, r16
 a90:	02 17       	cp	r16, r18
 a92:	08 f4       	brcc	.+2      	; 0xa96 <__ftoa_engine+0x142>
 a94:	20 2f       	mov	r18, r16
 a96:	23 95       	inc	r18
 a98:	02 2f       	mov	r16, r18
 a9a:	7a 33       	cpi	r23, 0x3A	; 58
 a9c:	28 f0       	brcs	.+10     	; 0xaa8 <__ftoa_engine+0x154>
 a9e:	79 e3       	ldi	r23, 0x39	; 57
 aa0:	7d 93       	st	X+, r23
 aa2:	2a 95       	dec	r18
 aa4:	e9 f7       	brne	.-6      	; 0xaa0 <__ftoa_engine+0x14c>
 aa6:	10 c0       	rjmp	.+32     	; 0xac8 <__ftoa_engine+0x174>
 aa8:	7d 93       	st	X+, r23
 aaa:	2a 95       	dec	r18
 aac:	89 f6       	brne	.-94     	; 0xa50 <__ftoa_engine+0xfc>
 aae:	06 94       	lsr	r0
 ab0:	97 95       	ror	r25
 ab2:	67 95       	ror	r22
 ab4:	37 95       	ror	r19
 ab6:	17 95       	ror	r17
 ab8:	17 94       	ror	r1
 aba:	e1 18       	sub	r14, r1
 abc:	f1 0a       	sbc	r15, r17
 abe:	43 0b       	sbc	r20, r19
 ac0:	56 0b       	sbc	r21, r22
 ac2:	c9 0b       	sbc	r28, r25
 ac4:	d0 09       	sbc	r29, r0
 ac6:	98 f0       	brcs	.+38     	; 0xaee <__ftoa_engine+0x19a>
 ac8:	23 95       	inc	r18
 aca:	7e 91       	ld	r23, -X
 acc:	73 95       	inc	r23
 ace:	7a 33       	cpi	r23, 0x3A	; 58
 ad0:	08 f0       	brcs	.+2      	; 0xad4 <__ftoa_engine+0x180>
 ad2:	70 e3       	ldi	r23, 0x30	; 48
 ad4:	7c 93       	st	X, r23
 ad6:	20 13       	cpse	r18, r16
 ad8:	b8 f7       	brcc	.-18     	; 0xac8 <__ftoa_engine+0x174>
 ada:	7e 91       	ld	r23, -X
 adc:	70 61       	ori	r23, 0x10	; 16
 ade:	7d 93       	st	X+, r23
 ae0:	30 f0       	brcs	.+12     	; 0xaee <__ftoa_engine+0x19a>
 ae2:	83 95       	inc	r24
 ae4:	71 e3       	ldi	r23, 0x31	; 49
 ae6:	7d 93       	st	X+, r23
 ae8:	70 e3       	ldi	r23, 0x30	; 48
 aea:	2a 95       	dec	r18
 aec:	e1 f7       	brne	.-8      	; 0xae6 <__ftoa_engine+0x192>
 aee:	11 24       	eor	r1, r1
 af0:	ef 90       	pop	r14
 af2:	ff 90       	pop	r15
 af4:	0f 91       	pop	r16
 af6:	1f 91       	pop	r17
 af8:	cf 91       	pop	r28
 afa:	df 91       	pop	r29
 afc:	99 27       	eor	r25, r25
 afe:	87 fd       	sbrc	r24, 7
 b00:	90 95       	com	r25
 b02:	08 95       	ret

Disassembly of section .text.avrlibc:

000019ee <strlen>:
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	6b 01       	movw	r12, r22
    19f6:	e8 2e       	mov	r14, r24
    19f8:	a8 2f       	mov	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	fc 01       	movw	r30, r24
    19fe:	24 91       	lpm	r18, Z
    1a00:	a7 fd       	sbrc	r26, 7
    1a02:	20 81       	ld	r18, Z
    1a04:	22 23       	and	r18, r18
    1a06:	19 f0       	breq	.+6      	; 0x1a0e <strlen+0x20>
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	a1 1d       	adc	r26, r1
    1a0c:	f7 cf       	rjmp	.-18     	; 0x19fc <strlen+0xe>
    1a0e:	8c 19       	sub	r24, r12
    1a10:	9d 09       	sbc	r25, r13
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	cf 90       	pop	r12
    1a18:	08 95       	ret

Disassembly of section .text.avrlibc:

0000192c <strnlen>:
    192c:	cf 92       	push	r12
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	6b 01       	movw	r12, r22
    1934:	e8 2e       	mov	r14, r24
    1936:	a8 2f       	mov	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	41 15       	cp	r20, r1
    193c:	51 05       	cpc	r21, r1
    193e:	31 f4       	brne	.+12     	; 0x194c <strnlen+0x20>
    1940:	8c 19       	sub	r24, r12
    1942:	9d 09       	sbc	r25, r13
    1944:	ef 90       	pop	r14
    1946:	df 90       	pop	r13
    1948:	cf 90       	pop	r12
    194a:	08 95       	ret
    194c:	fc 01       	movw	r30, r24
    194e:	24 91       	lpm	r18, Z
    1950:	a7 fd       	sbrc	r26, 7
    1952:	20 81       	ld	r18, Z
    1954:	22 23       	and	r18, r18
    1956:	a1 f3       	breq	.-24     	; 0x1940 <strnlen+0x14>
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	a1 1d       	adc	r26, r1
    195c:	41 50       	subi	r20, 0x01	; 1
    195e:	51 09       	sbc	r21, r1
    1960:	ec cf       	rjmp	.-40     	; 0x193a <strnlen+0xe>

Disassembly of section .text.avrlibc:

000013b8 <fputc>:
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	fb 01       	movw	r30, r22
    13c2:	24 81       	ldd	r18, Z+4	; 0x04
    13c4:	21 fd       	sbrc	r18, 1
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <fputc+0x16>
    13c8:	8f ef       	ldi	r24, 0xFF	; 255
    13ca:	9f ef       	ldi	r25, 0xFF	; 255
    13cc:	2c c0       	rjmp	.+88     	; 0x1426 <fputc+0x6e>
    13ce:	22 ff       	sbrs	r18, 2
    13d0:	16 c0       	rjmp	.+44     	; 0x13fe <fputc+0x46>
    13d2:	47 81       	ldd	r20, Z+7	; 0x07
    13d4:	50 85       	ldd	r21, Z+8	; 0x08
    13d6:	25 81       	ldd	r18, Z+5	; 0x05
    13d8:	36 81       	ldd	r19, Z+6	; 0x06
    13da:	42 17       	cp	r20, r18
    13dc:	53 07       	cpc	r21, r19
    13de:	44 f4       	brge	.+16     	; 0x13f0 <fputc+0x38>
    13e0:	a0 81       	ld	r26, Z
    13e2:	b1 81       	ldd	r27, Z+1	; 0x01
    13e4:	9d 01       	movw	r18, r26
    13e6:	2f 5f       	subi	r18, 0xFF	; 255
    13e8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ea:	31 83       	std	Z+1, r19	; 0x01
    13ec:	20 83       	st	Z, r18
    13ee:	8c 93       	st	X, r24
    13f0:	27 81       	ldd	r18, Z+7	; 0x07
    13f2:	30 85       	ldd	r19, Z+8	; 0x08
    13f4:	2f 5f       	subi	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	30 87       	std	Z+8, r19	; 0x08
    13fa:	27 83       	std	Z+7, r18	; 0x07
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <fputc+0x6e>
    13fe:	8b 01       	movw	r16, r22
    1400:	ec 01       	movw	r28, r24
    1402:	fb 01       	movw	r30, r22
    1404:	01 84       	ldd	r0, Z+9	; 0x09
    1406:	f2 85       	ldd	r31, Z+10	; 0x0a
    1408:	e0 2d       	mov	r30, r0
    140a:	09 95       	icall
    140c:	89 2b       	or	r24, r25
    140e:	e1 f6       	brne	.-72     	; 0x13c8 <fputc+0x10>
    1410:	d8 01       	movw	r26, r16
    1412:	17 96       	adiw	r26, 0x07	; 7
    1414:	8d 91       	ld	r24, X+
    1416:	9c 91       	ld	r25, X
    1418:	18 97       	sbiw	r26, 0x08	; 8
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	18 96       	adiw	r26, 0x08	; 8
    141e:	9c 93       	st	X, r25
    1420:	8e 93       	st	-X, r24
    1422:	17 97       	sbiw	r26, 0x07	; 7
    1424:	ce 01       	movw	r24, r28
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000183c <sprintf>:
    183c:	af e0       	ldi	r26, 0x0F	; 15
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e4 e2       	ldi	r30, 0x24	; 36
    1842:	fc e0       	ldi	r31, 0x0C	; 12
    1844:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__prologue_saves__+0x1c>
    1848:	0e 89       	ldd	r16, Y+22	; 0x16
    184a:	1f 89       	ldd	r17, Y+23	; 0x17
    184c:	86 e0       	ldi	r24, 0x06	; 6
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	1a 83       	std	Y+2, r17	; 0x02
    1852:	09 83       	std	Y+1, r16	; 0x01
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	9f e7       	ldi	r25, 0x7F	; 127
    1858:	9f 83       	std	Y+7, r25	; 0x07
    185a:	8e 83       	std	Y+6, r24	; 0x06
    185c:	9e 01       	movw	r18, r28
    185e:	25 5e       	subi	r18, 0xE5	; 229
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	48 8d       	ldd	r20, Y+24	; 0x18
    1864:	59 8d       	ldd	r21, Y+25	; 0x19
    1866:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1868:	ce 01       	movw	r24, r28
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	0e 94 08 01 	call	0x210	; 0x210 <vfprintf>
    1870:	e8 85       	ldd	r30, Y+8	; 0x08
    1872:	f9 85       	ldd	r31, Y+9	; 0x09
    1874:	e0 0f       	add	r30, r16
    1876:	f1 1f       	adc	r31, r17
    1878:	10 82       	st	Z, r1
    187a:	2f 96       	adiw	r28, 0x0f	; 15
    187c:	e4 e0       	ldi	r30, 0x04	; 4
    187e:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00001016 <__ultoa_invert>:
    1016:	fa 01       	movw	r30, r20
    1018:	aa 27       	eor	r26, r26
    101a:	28 30       	cpi	r18, 0x08	; 8
    101c:	51 f1       	breq	.+84     	; 0x1072 <__ultoa_invert+0x5c>
    101e:	20 31       	cpi	r18, 0x10	; 16
    1020:	81 f1       	breq	.+96     	; 0x1082 <__ultoa_invert+0x6c>
    1022:	e8 94       	clt
    1024:	6f 93       	push	r22
    1026:	6e 7f       	andi	r22, 0xFE	; 254
    1028:	6e 5f       	subi	r22, 0xFE	; 254
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8f 4f       	sbci	r24, 0xFF	; 255
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	af 4f       	sbci	r26, 0xFF	; 255
    1032:	b1 e0       	ldi	r27, 0x01	; 1
    1034:	3e d0       	rcall	.+124    	; 0x10b2 <__ultoa_invert+0x9c>
    1036:	b4 e0       	ldi	r27, 0x04	; 4
    1038:	3c d0       	rcall	.+120    	; 0x10b2 <__ultoa_invert+0x9c>
    103a:	67 0f       	add	r22, r23
    103c:	78 1f       	adc	r23, r24
    103e:	89 1f       	adc	r24, r25
    1040:	9a 1f       	adc	r25, r26
    1042:	a1 1d       	adc	r26, r1
    1044:	68 0f       	add	r22, r24
    1046:	79 1f       	adc	r23, r25
    1048:	8a 1f       	adc	r24, r26
    104a:	91 1d       	adc	r25, r1
    104c:	a1 1d       	adc	r26, r1
    104e:	6a 0f       	add	r22, r26
    1050:	71 1d       	adc	r23, r1
    1052:	81 1d       	adc	r24, r1
    1054:	91 1d       	adc	r25, r1
    1056:	a1 1d       	adc	r26, r1
    1058:	20 d0       	rcall	.+64     	; 0x109a <__ultoa_invert+0x84>
    105a:	09 f4       	brne	.+2      	; 0x105e <__ultoa_invert+0x48>
    105c:	68 94       	set
    105e:	3f 91       	pop	r19
    1060:	2a e0       	ldi	r18, 0x0A	; 10
    1062:	26 9f       	mul	r18, r22
    1064:	11 24       	eor	r1, r1
    1066:	30 19       	sub	r19, r0
    1068:	30 5d       	subi	r19, 0xD0	; 208
    106a:	31 93       	st	Z+, r19
    106c:	de f6       	brtc	.-74     	; 0x1024 <__ultoa_invert+0xe>
    106e:	cf 01       	movw	r24, r30
    1070:	08 95       	ret
    1072:	46 2f       	mov	r20, r22
    1074:	47 70       	andi	r20, 0x07	; 7
    1076:	40 5d       	subi	r20, 0xD0	; 208
    1078:	41 93       	st	Z+, r20
    107a:	b3 e0       	ldi	r27, 0x03	; 3
    107c:	0f d0       	rcall	.+30     	; 0x109c <__ultoa_invert+0x86>
    107e:	c9 f7       	brne	.-14     	; 0x1072 <__ultoa_invert+0x5c>
    1080:	f6 cf       	rjmp	.-20     	; 0x106e <__ultoa_invert+0x58>
    1082:	46 2f       	mov	r20, r22
    1084:	4f 70       	andi	r20, 0x0F	; 15
    1086:	40 5d       	subi	r20, 0xD0	; 208
    1088:	4a 33       	cpi	r20, 0x3A	; 58
    108a:	18 f0       	brcs	.+6      	; 0x1092 <__ultoa_invert+0x7c>
    108c:	49 5d       	subi	r20, 0xD9	; 217
    108e:	31 fd       	sbrc	r19, 1
    1090:	40 52       	subi	r20, 0x20	; 32
    1092:	41 93       	st	Z+, r20
    1094:	02 d0       	rcall	.+4      	; 0x109a <__ultoa_invert+0x84>
    1096:	a9 f7       	brne	.-22     	; 0x1082 <__ultoa_invert+0x6c>
    1098:	ea cf       	rjmp	.-44     	; 0x106e <__ultoa_invert+0x58>
    109a:	b4 e0       	ldi	r27, 0x04	; 4
    109c:	a6 95       	lsr	r26
    109e:	97 95       	ror	r25
    10a0:	87 95       	ror	r24
    10a2:	77 95       	ror	r23
    10a4:	67 95       	ror	r22
    10a6:	ba 95       	dec	r27
    10a8:	c9 f7       	brne	.-14     	; 0x109c <__ultoa_invert+0x86>
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	61 05       	cpc	r22, r1
    10ae:	71 05       	cpc	r23, r1
    10b0:	08 95       	ret
    10b2:	9b 01       	movw	r18, r22
    10b4:	ac 01       	movw	r20, r24
    10b6:	0a 2e       	mov	r0, r26
    10b8:	06 94       	lsr	r0
    10ba:	57 95       	ror	r21
    10bc:	47 95       	ror	r20
    10be:	37 95       	ror	r19
    10c0:	27 95       	ror	r18
    10c2:	ba 95       	dec	r27
    10c4:	c9 f7       	brne	.-14     	; 0x10b8 <__ultoa_invert+0xa2>
    10c6:	62 0f       	add	r22, r18
    10c8:	73 1f       	adc	r23, r19
    10ca:	84 1f       	adc	r24, r20
    10cc:	95 1f       	adc	r25, r21
    10ce:	a0 1d       	adc	r26, r0
    10d0:	08 95       	ret
