
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00003a2e  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ae  00800100  00800100  00003a2e  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00003a2e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000788  00000000  00000000  00003a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b862  00000000  00000000  00004211  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002644  00000000  00000000  0000fa73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004162  00000000  00000000  000120b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001498  00000000  00000000  0001621c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ce2  00000000  00000000  000176b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004bbe  00000000  00000000  00018396  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006a0  00000000  00000000  0001cf54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000038d0  000038d0  00003a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001d5f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.PM_HAL_adc_power_init 0000000e  00003744  00003744  00003878  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.PM_HAL_adc_power 00000014  00003660  00003660  00003794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_meth_power_init 0000000e  00003752  00003752  00003886  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power 00000014  00003674  00003674  000037a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_SCD30_power_init 0000000e  00003760  00003760  00003894  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power 00000014  00003688  00003688  000037bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_BC_power_init 0000000e  0000376e  0000376e  000038a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_enter_power_down 00000042  00002cae  00002cae  00002de2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_3 00000014  0000369c  0000369c  000037d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.rn2483_reset_active 00000008  00003864  00003864  00003998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_reset_deactive 00000008  0000386c  0000386c  000039a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SCD30_HAL_init 0000000e  0000377c  0000377c  000038b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SCD30_HAL_data_ready 0000000a  0000383c  0000383c  00003970  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.TC0_HAL_init 00000020  0000341a  0000341a  0000354e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.TC0_HAL_start 00000006  00003894  00003894  000039c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.TC0_HAL_stop 00000004  000038d4  000038d4  00003a08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_16 0000004e  00002740  00002740  00002874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss._cb      00000002  00800d22  00800d22  00003a2e  2**0
                  ALLOC
 32 .text.TC1_HAL_init 00000034  0000302a  0000302a  0000315e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC1_HAL_start 0000000c  000037d0  000037d0  00003904  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC1_HAL_stop 0000000c  000037dc  000037dc  00003910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_13 0000004e  0000278e  0000278e  000028c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .bss._cb      00000002  00800d24  00800d24  00003a2e  2**0
                  ALLOC
 37 .text.start_timer 00000008  00003874  00003874  000039a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.stop_timer 00000006  0000389a  0000389a  000039ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC2_HAL_init 00000020  0000343a  0000343a  0000356e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC2_HAL_subscribe 00000054  0000264a  0000264a  0000277e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TC2_HAL_cancel 0000003a  00002ea8  00002ea8  00002fdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__vector_9 00000098  00001cc8  00001cc8  00001dfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .bss.cnt      00000001  00800d34  00800d34  00003a2e  2**0
                  ALLOC
 44 .bss.cbCounter 00000001  00800d35  00800d35  00003a2e  2**0
                  ALLOC
 45 .bss.callbacks 0000000a  00800cfd  00800cfd  00003a2e  2**0
                  ALLOC
 46 .text.start_and_write_data 0000004c  00002878  00002878  000029ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.read_and_stop 0000005a  00002598  00002598  000026cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TWI_API_write_data 00000006  000038a0  000038a0  000039d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TWI_API_write_data_stop 00000010  00003724  00003724  00003858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.TWI_API_read_data_ack_end_nack_stop 00000024  0000332a  0000332a  0000345e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.TWI_API_repeat_read_data_stop 00000022  0000334e  0000334e  00003482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.TWI_HAL_init 00000012  00003700  00003700  00003834  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.TWI_HAL_start 00000048  000029ee  000029ee  00002b22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_HAL_repeated_start 00000042  00002cf0  00002cf0  00002e24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_HAL_write_byte 00000020  0000345a  0000345a  0000358e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_HAL_read_byte_ack 00000014  000036b0  000036b0  000037e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_HAL_read_byte_nack 00000014  000036c4  000036c4  000037f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_HAL_stop 00000010  00003734  00003734  00003868  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.copy_buffer 0000002e  00003250  00003250  00003384  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.uart0_hal_init 0000003c  00002e30  00002e30  00002f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.uart0_hal_send_message 00000034  0000305e  0000305e  00003192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uart0_hal_send_string 0000006a  000022e8  000022e8  0000241c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart0_hal_message_ready 0000000e  0000378a  0000378a  000038be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart0_hal_clear_rx_buffer 0000000a  00003846  00003846  0000397a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart0_hal_read_message_as_str 00000028  00003302  00003302  00003436  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart0_hal_send_break 00000046  00002b0e  00002b0e  00002c42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.__vector_22 0000004a  00002910  00002910  00002a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.__vector_20 00000074  00002194  00002194  000022c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .bss.rx_buffer_has_message 00000001  00800d36  00800d36  00003a2e  2**0
                  ALLOC
 70 .bss.rx_buffer_data_len 00000001  00800d37  00800d37  00003a2e  2**0
                  ALLOC
 71 .bss.tx_buffer_cursor 00000001  00800d38  00800d38  00003a2e  2**0
                  ALLOC
 72 .bss.tx_buffer_data_len 00000001  00800d39  00800d39  00003a2e  2**0
                  ALLOC
 73 .text.uart1_hal_init 0000003c  00002e6c  00002e6c  00002fa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_30 0000004a  0000295a  0000295a  00002a8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_28 00000070  00002208  00002208  0000233c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .bss.rx_buffer_has_message 00000001  00800d3a  00800d3a  00003a2e  2**0
                  ALLOC
 77 .bss.rx_buffer_data_len 00000001  00800d3b  00800d3b  00003a2e  2**0
                  ALLOC
 78 .bss.rx_buffer 00000064  00800c8a  00800c8a  00003a2e  2**0
                  ALLOC
 79 .bss.tx_buffer_cursor 00000001  00800d3c  00800d3c  00003a2e  2**0
                  ALLOC
 80 .bss.tx_buffer_data_len 00000001  00800d3d  00800d3d  00003a2e  2**0
                  ALLOC
 81 .bss.tx_buffer 0000012c  00800b5e  00800b5e  00003a2e  2**0
                  ALLOC
 82 .text.main    00000018  000035d2  000035d2  00003706  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.vect_ADC_heat_timeout 00000018  000035ea  000035ea  0000371e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.ADC_init_sampling 00000066  000023bc  000023bc  000024f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.ADC_deinit_sampling 00000014  000036d8  000036d8  0000380c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.ADC_is_sampling_done 0000001c  000034f6  000034f6  0000362a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.ADC_meth_sens_power_on 00000020  0000347a  0000347a  000035ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.ADC_meth_sens_ready 00000012  00003712  00003712  00003846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.calc_ppm_methane 00000096  00001d60  00001d60  00001e94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.ADC_get_value 0000005c  0000253c  0000253c  00002670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.vect_ADC_do_sample 00000046  00002b54  00002b54  00002c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.ADC_start_sampling 0000000c  000037e8  000037e8  0000391c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .bss.cntPowerUpTime 00000001  00800d3e  00800d3e  00003a2e  2**0
                  ALLOC
 94 .bss._powerUpTime 00000001  00800d3f  00800d3f  00003a2e  2**0
                  ALLOC
 95 .bss.cntSamples 00000002  00800d26  00800d26  00003a2e  2**0
                  ALLOC
 96 .bss._data    00000002  00800d28  00800d28  00003a2e  2**0
                  ALLOC
 97 .bss._nSamples 00000002  00800d2a  00800d2a  00003a2e  2**0
                  ALLOC
 98 .data.PPM_factor 00000004  00800d12  000038ec  00003a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 99 .data.RRL     00000004  00800d16  000038f0  00003a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
100 .data.Vc      00000004  00800d1a  000038f4  00003a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
101 .progmemx.data 00000038  00000291  00000291  000003c5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
102 .text.JN_join_network 00000296  00000768  00000768  0000089c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.set_block_uplink 00000018  00003602  00003602  00003736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.block_uplink 0000001c  00003512  00003512  00003646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.LM_join_network 00000006  000038a6  000038a6  000039da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.LM_send_uplink 0000002e  0000327e  0000327e  000033b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.LM_put_to_sleep 00000006  000038ac  000038ac  000039e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.LM_wake_up 00000006  000038b2  000038b2  000039e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.LM_is_free 0000000a  00003850  00003850  00003984  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .bss.subPointer 00000001  00800d40  00800d40  00003a2e  2**0
                  ALLOC
111 .bss.busy     00000001  00800d41  00800d41  00003a2e  2**0
                  ALLOC
112 .bss.cnt      00000001  00800d42  00800d42  00003a2e  2**0
                  ALLOC
113 .progmemx.data 00000073  0000021e  0000021e  00000352  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
114 .text.tohex   00000084  00001fa4  00001fa4  000020d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.attach_ending 0000001c  0000352e  0000352e  00003662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.cmd_with_ending 00000032  000030c6  000030c6  000031fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.sys_sleep_cmd 0000005e  00002422  00002422  00002556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.mac_set_parameter 0000004e  000027dc  000027dc  00002910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.mac_set_deveui 00000048  00002a36  00002a36  00002b6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.mac_set_appeui 00000048  00002a7e  00002a7e  00002bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.mac_set_appkey 00000048  00002ac6  00002ac6  00002bfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.mac_set_ADR 00000030  000031c0  000031c0  000032f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.mac_tx_confirmed 000000ac  00001a34  00001a34  00001b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.beginsWidth 0000004a  000029a4  000029a4  00002ad8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .progmemx.data 00000027  000002c9  000002c9  000003fd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
126 .text.decode_tx_response 00000052  0000269e  0000269e  000027d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.SU_send_uplink 000000f8  000012a6  000012a6  000013da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .progmemx.data 00000003  0000031a  0000031a  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
129 .text.SC_put_to_sleep 0000004c  000028c4  000028c4  000029f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.SC_wake_up 00000032  000030f8  000030f8  0000322c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.LM_strbeginswith 00000044  00002c26  00002c26  00002d5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.util_setPendingStates 0000000c  000037f4  000037f4  00003928  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.util_setMatchCase 0000000c  00003800  00003800  00003934  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.util_matchMessage 0000005e  00002480  00002480  000025b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.util_transmit_msg 0000001c  0000354a  0000354a  0000367e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.util_read_msg 00000006  000038b8  000038b8  000039ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .progmemx.data 00000020  000002f0  000002f0  00000424  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
138 .text.util_parse_err 00000058  000025f2  000025f2  00002726  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.get_group_id 00000006  000038be  000038be  000039f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.set_group_id 00000006  000038c4  000038c4  000039f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.MRPP_init_group 00000032  0000312a  0000312a  0000325e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.MRPP_add_collection_data_INT16 00000070  00002278  00002278  000023ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.MRPP_is_body_package_ready 00000022  00003370  00003370  000034a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.MRPP_get_ready_body_package 00000096  00001df6  00001df6  00001f2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.MRPP_set_body_sent 0000000c  0000380c  0000380c  00003940  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.MRPP_get_header_package 00000022  00003392  00003392  000034c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.MRPP_get_tail_package 00000022  000033b4  000033b4  000034e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.MRPP_all_body_package_sent 0000000a  0000385a  0000385a  0000398e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .bss._groupId 00000001  00800d43  00800d43  00003a2e  2**0
                  ALLOC
150 .text.mrpp_data_add_int16 00000092  00001e8c  00001e8c  00001fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.mrpp_data_get 00000030  000031f0  000031f0  00003324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.add_data_types 000000d8  0000156c  0000156c  000016a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.update_bodies 00000162  00000dc8  00000dc8  00000efc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.mrpp_state_init 000001be  00000c0a  00000c0a  00000d3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.mrpp_state_get_header 000000a2  00001b84  00001b84  00001cb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.mrpp_state_get_tail 000000a4  00001ae0  00001ae0  00001c14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.mrpp_state_set_collection 00000086  00001f1e  00001f1e  00002052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.mrpp_state_is_body_ready 00000030  00003220  00003220  00003354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.mrpp_state_all_bodies_sent 0000002a  000032d8  000032d8  0000340c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.mrpp_state_get_ready_body 0000011a  0000118c  0000118c  000012c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.mrpp_state_set_body_sent 00000020  0000349a  0000349a  000035ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.mrpp_state_get_collection_address 00000036  00002f52  00002f52  00003086  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.RTC_set_clock_out 00000050  000026f0  000026f0  00002824  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.RTC_clear_wake_up_interrupt 00000034  00003092  00003092  000031c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.RTC_get_current_time 00000140  00000f2a  00000f2a  0000105e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .rodata       00000005  00800d0d  000038e7  00003a1b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
167 .text.RTC_set_wake_up_interrupt_minutes 000000c4  000018b4  000018b4  000019e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.RTC_datetime_to_ts 00000122  0000106a  0000106a  0000119e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .progmemx.data.CMD_READ_TIME_POINTER 00000001  0000031f  0000031f  00000453  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
170 .text.bytes_2_uint 0000001a  0000359e  0000359e  000036d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.init_measurement 00000038  00002ee2  00002ee2  00003016  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.validate_data 00000032  0000315c  0000315c  00003290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.read_value 000000a2  00001c26  00001c26  00001d5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.vect_SCD_do_sample 00000046  00002b9a  00002b9a  00002cce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.SCD30_init_sampling 0000004e  0000282a  0000282a  0000295e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.SCD30_deinit_sampling 00000014  000036ec  000036ec  00003820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.SCD30_start_sampling 0000000c  00003818  00003818  0000394c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.SCD30_is_sampling_done 0000001c  00003566  00003566  0000369a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .bss.cntSamples 00000002  00800d2c  00800d2c  00003a2e  2**0
                  ALLOC
180 .bss._data    00000002  00800d2e  00800d2e  00003a2e  2**0
                  ALLOC
181 .bss._nSamples 00000002  00800d30  00800d30  00003a2e  2**0
                  ALLOC
182 .progmemx.data.READ_DATA_CMD 00000002  0000031d  0000031d  00000451  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
183 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000310  00000310  00000444  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
184 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  00000315  00000315  00000449  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
185 .text.decode_stage_response 00000016  0000364a  0000364a  0000377e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.decode_join_response 0000001c  00003582  00003582  000036b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.decode_header_tail_response 00000018  0000361a  0000361a  0000374e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .progmemx.data 000000d2  0000014c  0000014c  00000280  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
189 .text.join_lora 0000007a  00002028  00002028  0000215c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.set_wakeup 00000008  0000387c  0000387c  000039b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.send_header 0000003e  00002db4  00002db4  00002ee8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.stage_0 000000ce  00001718  00001718  0000184c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.stage_1 000000f0  0000139e  0000139e  000014d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.send_body 00000040  00002d74  00002d74  00002ea8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.decode_body_response 00000022  000033d6  000033d6  0000350a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.send_tail 0000003e  00002df2  00002df2  00002f26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.send_msg 00000018  00003632  00003632  00003766  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.MAINPG_start 0000020c  000009fe  000009fe  00000b32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .data.cols    0000000f  00800cee  000038d8  00003a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
200 .bss.dt       00000006  00800d07  00800d07  00003a2e  2**0
                  ALLOC
201 .bss.ts       00000004  00800d1e  00800d1e  00003a2e  2**0
                  ALLOC
202 .bss.meth_data 00000258  008006ae  008006ae  00003a2e  2**0
                  ALLOC
203 .bss.co2_data 00000258  00800906  00800906  00003a2e  2**0
                  ALLOC
204 .data.bodyIndex 00000002  00800d32  000038f8  00003a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
205 .bss.state_s1 00000001  00800d44  00800d44  00003a2e  2**0
                  ALLOC
206 .bss.state_s0 00000001  00800d45  00800d45  00003a2e  2**0
                  ALLOC
207 .text.calc_crc8 00000036  00002f88  00002f88  000030bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.avrlibc.fplib 0000000e  00003798  00003798  000038cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.avrlibc.fplib 000000ce  000017e6  000017e6  0000191a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.avrlibc.fplib 00000008  00003884  00003884  000039b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.avrlibc.fplib 000000de  0000148e  0000148e  000015c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.avrlibc.fplib 0000005e  000024de  000024de  00002612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.avrlibc.fplib 0000007a  000020a2  000020a2  000021d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.avrlibc.fplib 0000000c  00003824  00003824  00003958  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.avrlibc.fplib 00000006  000038ca  000038ca  000039fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.avrlibc.fplib 0000000e  000037a6  000037a6  000038da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.avrlibc.fplib 0000000e  000037b4  000037b4  000038e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.avrlibc.fplib 00000022  000033f8  000033f8  0000352c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.avrlibc.fplib 00000044  00002c6a  00002c6a  00002d9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.avrlibc.fplib 0000000e  000037c2  000037c2  000038f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.avrlibc.fplib 00000008  0000388c  0000388c  000039c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.avrlibc.fplib 000000d4  00001644  00001644  00001778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.libgcc  0000000c  00003830  00003830  00003964  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.libgcc.mul 0000001e  000034ba  000034ba  000035ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.libgcc  0000001a  000035b8  000035b8  000036ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.avrlibc 00000032  0000318e  0000318e  000032c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.avrlibc 00000042  00002d32  00002d32  00002e66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.avrlibc 0000006a  00002352  00002352  00002486  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.avrlibc 0000002c  000032ac  000032ac  000033e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.avrlibc 0000001e  000034d8  000034d8  0000360c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.avrlibc 00000046  00002be0  00002be0  00002d14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.avrlibc 00000448  00000320  00000320  00000454  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.avrlibc 00000036  00002fbe  00002fbe  000030f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.avrlibc 00000078  0000211c  0000211c  00002250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.avrlibc 000000bc  00001978  00001978  00001aac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.libgcc.prologue 00000038  00002f1a  00002f1a  0000304e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc.prologue 00000036  00002ff4  00002ff4  00003128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
   4:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
   8:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
   c:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__vector_3>
  10:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  14:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  18:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  1c:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  20:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  24:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__vector_9>
  28:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  2c:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  30:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  34:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__vector_13>
  38:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  3c:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  40:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__vector_16>
  44:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  48:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  4c:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  50:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__vector_20>
  54:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  58:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__vector_22>
  5c:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  60:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  64:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  68:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  6c:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  70:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__vector_28>
  74:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__bad_interrupt>
  78:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__vector_30>
  7c:	d2 03       	fmuls	r21, r18
  7e:	db 04       	cpc	r13, r11
  80:	f1 03       	fmuls	r23, r17
  82:	0e 04       	cpc	r0, r14
  84:	2d 04       	cpc	r2, r13
  86:	4c 04       	cpc	r4, r12
  88:	6b 04       	cpc	r6, r11
  8a:	8a 04       	cpc	r8, r10
  8c:	a7 04       	cpc	r10, r7
  8e:	c4 04       	cpc	r12, r4
  90:	d6 04       	cpc	r13, r6
  92:	ec 04       	cpc	r14, r12
  94:	ee 04       	cpc	r14, r14
  96:	6f 09       	sbc	r22, r15
  98:	a2 09       	sbc	r26, r2
  9a:	90 09       	sbc	r25, r0
  9c:	be 09       	sbc	r27, r14
  9e:	be 09       	sbc	r27, r14
  a0:	ad 09       	sbc	r26, r13
  a2:	ab 09       	sbc	r26, r11
  a4:	c0 09       	sbc	r28, r0
  a6:	a9 09       	sbc	r26, r9
  a8:	1e 05       	cpc	r17, r14
  aa:	38 05       	cpc	r19, r8
  ac:	4e 05       	cpc	r20, r14
  ae:	5e 05       	cpc	r21, r14
  b0:	43 05       	cpc	r20, r3
  b2:	65 05       	cpc	r22, r5
  b4:	7c 05       	cpc	r23, r12
  b6:	71 05       	cpc	r23, r1
  b8:	87 05       	cpc	r24, r7
  ba:	93 05       	cpc	r25, r3
  bc:	a0 05       	cpc	r26, r0
  be:	a8 05       	cpc	r26, r8
  c0:	b0 05       	cpc	r27, r0
  c2:	cc 05       	cpc	r28, r12
  c4:	d3 05       	cpc	r29, r3
  c6:	e0 05       	cpc	r30, r0
  c8:	e7 05       	cpc	r30, r7
  ca:	f5 05       	cpc	r31, r5
  cc:	fc 05       	cpc	r31, r12

000000ce <.dinit>:
  ce:	01 00       	.word	0x0001	; ????
  d0:	0c ee       	ldi	r16, 0xEC	; 236
  d2:	80 0c       	add	r8, r0
  d4:	ee 0c       	add	r14, r14
  d6:	fd 00       	.word	0x00fd	; ????
  d8:	38 d8       	rcall	.-3984   	; 0xfffff14a <__eeprom_end+0xff7ef14a>
  da:	0c fd       	.word	0xfd0c	; ????
  dc:	0d 0d       	add	r16, r13
  de:	80 0d       	add	r24, r0
  e0:	0d 0d       	add	r16, r13
  e2:	1e 00       	.word	0x001e	; ????
  e4:	38 e7       	ldi	r19, 0x78	; 120
  e6:	0d 1e       	adc	r0, r29
  e8:	0d 32       	cpi	r16, 0x2D	; 45
  ea:	80 0d       	add	r24, r0
  ec:	32 0d       	add	r19, r2
  ee:	34 00       	.word	0x0034	; ????
  f0:	38 f8       	.word	0xf838	; ????
  f2:	0d 34       	cpi	r16, 0x4D	; 77
  f4:	0d 46       	sbci	r16, 0x6D	; 109
  f6:	80 00       	.word	0x0080	; ????

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d0 e1       	ldi	r29, 0x10	; 16
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
 104:	ee ec       	ldi	r30, 0xCE	; 206
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	17 c0       	rjmp	.+46     	; 0x13a <__do_clear_bss+0x8>
 10c:	b5 91       	lpm	r27, Z+
 10e:	a5 91       	lpm	r26, Z+
 110:	35 91       	lpm	r19, Z+
 112:	25 91       	lpm	r18, Z+
 114:	05 91       	lpm	r16, Z+
 116:	07 fd       	sbrc	r16, 7
 118:	0c c0       	rjmp	.+24     	; 0x132 <__do_clear_bss>
 11a:	95 91       	lpm	r25, Z+
 11c:	85 91       	lpm	r24, Z+
 11e:	ef 01       	movw	r28, r30
 120:	f9 2f       	mov	r31, r25
 122:	e8 2f       	mov	r30, r24
 124:	05 90       	lpm	r0, Z+
 126:	0d 92       	st	X+, r0
 128:	a2 17       	cp	r26, r18
 12a:	b3 07       	cpc	r27, r19
 12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x20>
 12e:	fe 01       	movw	r30, r28
 130:	04 c0       	rjmp	.+8      	; 0x13a <__do_clear_bss+0x8>

00000132 <__do_clear_bss>:
 132:	1d 92       	st	X+, r1
 134:	a2 17       	cp	r26, r18
 136:	b3 07       	cpc	r27, r19
 138:	e1 f7       	brne	.-8      	; 0x132 <__do_clear_bss>
 13a:	e7 3f       	cpi	r30, 0xF7	; 247
 13c:	f4 07       	cpc	r31, r20
 13e:	31 f7       	brne	.-52     	; 0x10c <__do_copy_data+0x8>
 140:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <main>
 144:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>

Disassembly of section .text:

000038d0 <__bad_interrupt>:
    38d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

00003744 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    3744:	81 b1       	in	r24, 0x01	; 1
    3746:	88 60       	ori	r24, 0x08	; 8
    3748:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    374a:	82 b1       	in	r24, 0x02	; 2
    374c:	87 7f       	andi	r24, 0xF7	; 247
    374e:	82 b9       	out	0x02, r24	; 2
    3750:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00003660 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    3660:	88 23       	and	r24, r24
    3662:	21 f0       	breq	.+8      	; 0x366c <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    3664:	82 b1       	in	r24, 0x02	; 2
    3666:	88 60       	ori	r24, 0x08	; 8
    3668:	82 b9       	out	0x02, r24	; 2
    366a:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    366c:	82 b1       	in	r24, 0x02	; 2
    366e:	87 7f       	andi	r24, 0xF7	; 247
    3670:	82 b9       	out	0x02, r24	; 2
    3672:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00003752 <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    3752:	81 b1       	in	r24, 0x01	; 1
    3754:	80 62       	ori	r24, 0x20	; 32
    3756:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    3758:	82 b1       	in	r24, 0x02	; 2
    375a:	8f 7d       	andi	r24, 0xDF	; 223
    375c:	82 b9       	out	0x02, r24	; 2
    375e:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003674 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    3674:	88 23       	and	r24, r24
    3676:	21 f0       	breq	.+8      	; 0x3680 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    3678:	82 b1       	in	r24, 0x02	; 2
    367a:	80 62       	ori	r24, 0x20	; 32
    367c:	82 b9       	out	0x02, r24	; 2
    367e:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    3680:	82 b1       	in	r24, 0x02	; 2
    3682:	8f 7d       	andi	r24, 0xDF	; 223
    3684:	82 b9       	out	0x02, r24	; 2
    3686:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00003760 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    3760:	81 b1       	in	r24, 0x01	; 1
    3762:	80 61       	ori	r24, 0x10	; 16
    3764:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    3766:	82 b1       	in	r24, 0x02	; 2
    3768:	8f 7e       	andi	r24, 0xEF	; 239
    376a:	82 b9       	out	0x02, r24	; 2
    376c:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003688 <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    3688:	88 23       	and	r24, r24
    368a:	21 f0       	breq	.+8      	; 0x3694 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    368c:	82 b1       	in	r24, 0x02	; 2
    368e:	80 61       	ori	r24, 0x10	; 16
    3690:	82 b9       	out	0x02, r24	; 2
    3692:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    3694:	82 b1       	in	r24, 0x02	; 2
    3696:	8f 7e       	andi	r24, 0xEF	; 239
    3698:	82 b9       	out	0x02, r24	; 2
    369a:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

0000376e <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    376e:	8a b1       	in	r24, 0x0a	; 10
    3770:	80 61       	ori	r24, 0x10	; 16
    3772:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    3774:	8b b1       	in	r24, 0x0b	; 11
    3776:	8f 7e       	andi	r24, 0xEF	; 239
    3778:	8b b9       	out	0x0b, r24	; 11
    377a:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00002cae <PM_HAL_enter_power_down>:
		clear_bit(PORTD, 4);
	}
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    2cae:	84 b1       	in	r24, 0x04	; 4
    2cb0:	8b 7f       	andi	r24, 0xFB	; 251
    2cb2:	84 b9       	out	0x04, r24	; 4
	set_bit(PORTB, 2); //Enbale pull up
    2cb4:	85 b1       	in	r24, 0x05	; 5
    2cb6:	84 60       	ori	r24, 0x04	; 4
    2cb8:	85 b9       	out	0x05, r24	; 5
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    2cba:	e9 e6       	ldi	r30, 0x69	; 105
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	8f 7e       	andi	r24, 0xEF	; 239
    2cc2:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    2cc4:	80 81       	ld	r24, Z
    2cc6:	80 62       	ori	r24, 0x20	; 32
    2cc8:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    2cca:	8d b3       	in	r24, 0x1d	; 29
    2ccc:	84 60       	ori	r24, 0x04	; 4
    2cce:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2cd0:	83 b7       	in	r24, 0x33	; 51
    2cd2:	81 7f       	andi	r24, 0xF1	; 241
    2cd4:	84 60       	ori	r24, 0x04	; 4
    2cd6:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    2cd8:	83 b7       	in	r24, 0x33	; 51
    2cda:	81 60       	ori	r24, 0x01	; 1
    2cdc:	83 bf       	out	0x33, r24	; 51
	sei();
    2cde:	78 94       	sei
	sleep_cpu();
    2ce0:	88 95       	sleep
	sleep_disable();
    2ce2:	83 b7       	in	r24, 0x33	; 51
    2ce4:	8e 7f       	andi	r24, 0xFE	; 254
    2ce6:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    2ce8:	8d b3       	in	r24, 0x1d	; 29
    2cea:	8b 7f       	andi	r24, 0xFB	; 251
    2cec:	8d bb       	out	0x1d, r24	; 29
    2cee:	08 95       	ret

Disassembly of section .text.__vector_3:

0000369c <__vector_3>:
}

ISR(INT2_vect){
    369c:	1f 92       	push	r1
    369e:	0f 92       	push	r0
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	0f 92       	push	r0
    36a4:	11 24       	eor	r1, r1
	
}
    36a6:	0f 90       	pop	r0
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	0f 90       	pop	r0
    36ac:	1f 90       	pop	r1
    36ae:	18 95       	reti

Disassembly of section .text.rn2483_reset_active:

00003864 <rn2483_reset_active>:
void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    3864:	85 b1       	in	r24, 0x05	; 5
    3866:	8f 7e       	andi	r24, 0xEF	; 239
    3868:	85 b9       	out	0x05, r24	; 5
    386a:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

0000386c <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    386c:	85 b1       	in	r24, 0x05	; 5
    386e:	80 61       	ori	r24, 0x10	; 16
    3870:	85 b9       	out	0x05, r24	; 5
    3872:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

0000377c <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    377c:	87 b1       	in	r24, 0x07	; 7
    377e:	8f 7b       	andi	r24, 0xBF	; 191
    3780:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    3782:	88 b1       	in	r24, 0x08	; 8
    3784:	8f 7b       	andi	r24, 0xBF	; 191
    3786:	88 b9       	out	0x08, r24	; 8
    3788:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

0000383c <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    383c:	86 b1       	in	r24, 0x06	; 6
    383e:	86 fb       	bst	r24, 6
    3840:	88 27       	eor	r24, r24
    3842:	80 f9       	bld	r24, 0
    3844:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

0000341a <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    341a:	92 e0       	ldi	r25, 0x02	; 2
    341c:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    341e:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    3420:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    3422:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    3424:	ee e6       	ldi	r30, 0x6E	; 110
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	82 60       	ori	r24, 0x02	; 2
    342c:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    342e:	78 94       	sei
	
	//Set callback
	_cb=cb;
    3430:	70 93 23 0d 	sts	0x0D23, r23	; 0x800d23 <_cb+0x1>
    3434:	60 93 22 0d 	sts	0x0D22, r22	; 0x800d22 <_cb>
    3438:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00003894 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    3894:	86 e0       	ldi	r24, 0x06	; 6
    3896:	85 bd       	out	0x25, r24	; 37
    3898:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

000038d4 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    38d4:	15 bc       	out	0x25, r1	; 37
    38d6:	08 95       	ret

Disassembly of section .text.__vector_16:

00002740 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    2740:	1f 92       	push	r1
    2742:	0f 92       	push	r0
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	0f 92       	push	r0
    2748:	11 24       	eor	r1, r1
    274a:	2f 93       	push	r18
    274c:	3f 93       	push	r19
    274e:	4f 93       	push	r20
    2750:	5f 93       	push	r21
    2752:	6f 93       	push	r22
    2754:	7f 93       	push	r23
    2756:	8f 93       	push	r24
    2758:	9f 93       	push	r25
    275a:	af 93       	push	r26
    275c:	bf 93       	push	r27
    275e:	ef 93       	push	r30
    2760:	ff 93       	push	r31
	_cb();
    2762:	e0 91 22 0d 	lds	r30, 0x0D22	; 0x800d22 <_cb>
    2766:	f0 91 23 0d 	lds	r31, 0x0D23	; 0x800d23 <_cb+0x1>
    276a:	09 95       	icall
}
    276c:	ff 91       	pop	r31
    276e:	ef 91       	pop	r30
    2770:	bf 91       	pop	r27
    2772:	af 91       	pop	r26
    2774:	9f 91       	pop	r25
    2776:	8f 91       	pop	r24
    2778:	7f 91       	pop	r23
    277a:	6f 91       	pop	r22
    277c:	5f 91       	pop	r21
    277e:	4f 91       	pop	r20
    2780:	3f 91       	pop	r19
    2782:	2f 91       	pop	r18
    2784:	0f 90       	pop	r0
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	0f 90       	pop	r0
    278a:	1f 90       	pop	r1
    278c:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

0000302a <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    302a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    302e:	28 e0       	ldi	r18, 0x08	; 8
    3030:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    3034:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    3038:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    303c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    3040:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    3044:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    3048:	ef e6       	ldi	r30, 0x6F	; 111
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	82 60       	ori	r24, 0x02	; 2
    3050:	80 83       	st	Z, r24
	sei();
    3052:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    3054:	70 93 25 0d 	sts	0x0D25, r23	; 0x800d25 <_cb+0x1>
    3058:	60 93 24 0d 	sts	0x0D24, r22	; 0x800d24 <_cb>
    305c:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

000037d0 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    37d0:	e1 e8       	ldi	r30, 0x81	; 129
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	80 81       	ld	r24, Z
    37d6:	86 60       	ori	r24, 0x06	; 6
    37d8:	80 83       	st	Z, r24
    37da:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

000037dc <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    37dc:	e1 e8       	ldi	r30, 0x81	; 129
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	80 81       	ld	r24, Z
    37e2:	88 7f       	andi	r24, 0xF8	; 248
    37e4:	80 83       	st	Z, r24
    37e6:	08 95       	ret

Disassembly of section .text.__vector_13:

0000278e <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    278e:	1f 92       	push	r1
    2790:	0f 92       	push	r0
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	0f 92       	push	r0
    2796:	11 24       	eor	r1, r1
    2798:	2f 93       	push	r18
    279a:	3f 93       	push	r19
    279c:	4f 93       	push	r20
    279e:	5f 93       	push	r21
    27a0:	6f 93       	push	r22
    27a2:	7f 93       	push	r23
    27a4:	8f 93       	push	r24
    27a6:	9f 93       	push	r25
    27a8:	af 93       	push	r26
    27aa:	bf 93       	push	r27
    27ac:	ef 93       	push	r30
    27ae:	ff 93       	push	r31
	_cb();
    27b0:	e0 91 24 0d 	lds	r30, 0x0D24	; 0x800d24 <_cb>
    27b4:	f0 91 25 0d 	lds	r31, 0x0D25	; 0x800d25 <_cb+0x1>
    27b8:	09 95       	icall
    27ba:	ff 91       	pop	r31
    27bc:	ef 91       	pop	r30
    27be:	bf 91       	pop	r27
    27c0:	af 91       	pop	r26
    27c2:	9f 91       	pop	r25
    27c4:	8f 91       	pop	r24
    27c6:	7f 91       	pop	r23
    27c8:	6f 91       	pop	r22
    27ca:	5f 91       	pop	r21
    27cc:	4f 91       	pop	r20
    27ce:	3f 91       	pop	r19
    27d0:	2f 91       	pop	r18
    27d2:	0f 90       	pop	r0
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	0f 90       	pop	r0
    27d8:	1f 90       	pop	r1
    27da:	18 95       	reti

Disassembly of section .text.start_timer:

00003874 <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    3874:	87 e0       	ldi	r24, 0x07	; 7
    3876:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    387a:	08 95       	ret

Disassembly of section .text.stop_timer:

0000389a <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    389a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    389e:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

0000343a <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    343a:	82 e0       	ldi	r24, 0x02	; 2
    343c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    3440:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3444:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    3448:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    344c:	9b ef       	ldi	r25, 0xFB	; 251
    344e:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    3452:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    3456:	78 94       	sei
    3458:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

0000264a <TC2_HAL_subscribe>:
    264a:	cf 93       	push	r28
    264c:	dc 01       	movw	r26, r24
    264e:	60 91 35 0d 	lds	r22, 0x0D35	; 0x800d35 <cbCounter>
    2652:	65 30       	cpi	r22, 0x05	; 5
    2654:	00 f5       	brcc	.+64     	; 0x2696 <TC2_HAL_subscribe+0x4c>
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	15 c0       	rjmp	.+42     	; 0x2684 <TC2_HAL_subscribe+0x3a>
    265a:	29 2f       	mov	r18, r25
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	f9 01       	movw	r30, r18
    2660:	ee 0f       	add	r30, r30
    2662:	ff 1f       	adc	r31, r31
    2664:	e3 50       	subi	r30, 0x03	; 3
    2666:	f3 4f       	sbci	r31, 0xF3	; 243
    2668:	40 81       	ld	r20, Z
    266a:	51 81       	ldd	r21, Z+1	; 0x01
    266c:	45 2b       	or	r20, r21
    266e:	49 f4       	brne	.+18     	; 0x2682 <TC2_HAL_subscribe+0x38>
    2670:	22 0f       	add	r18, r18
    2672:	33 1f       	adc	r19, r19
    2674:	f9 01       	movw	r30, r18
    2676:	e3 50       	subi	r30, 0x03	; 3
    2678:	f3 4f       	sbci	r31, 0xF3	; 243
    267a:	b1 83       	std	Z+1, r27	; 0x01
    267c:	a0 83       	st	Z, r26
    267e:	c9 2f       	mov	r28, r25
    2680:	04 c0       	rjmp	.+8      	; 0x268a <TC2_HAL_subscribe+0x40>
    2682:	9f 5f       	subi	r25, 0xFF	; 255
    2684:	95 30       	cpi	r25, 0x05	; 5
    2686:	48 f3       	brcs	.-46     	; 0x265a <TC2_HAL_subscribe+0x10>
    2688:	cf ef       	ldi	r28, 0xFF	; 255
    268a:	6f 5f       	subi	r22, 0xFF	; 255
    268c:	60 93 35 0d 	sts	0x0D35, r22	; 0x800d35 <cbCounter>
    2690:	0e 94 3a 1c 	call	0x3874	; 0x3874 <start_timer>
    2694:	01 c0       	rjmp	.+2      	; 0x2698 <TC2_HAL_subscribe+0x4e>
    2696:	cf ef       	ldi	r28, 0xFF	; 255
    2698:	8c 2f       	mov	r24, r28
    269a:	cf 91       	pop	r28
    269c:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00002ea8 <TC2_HAL_cancel>:
    2ea8:	08 2e       	mov	r0, r24
    2eaa:	00 0c       	add	r0, r0
    2eac:	99 0b       	sbc	r25, r25
    2eae:	fc 01       	movw	r30, r24
    2eb0:	ee 0f       	add	r30, r30
    2eb2:	ff 1f       	adc	r31, r31
    2eb4:	e3 50       	subi	r30, 0x03	; 3
    2eb6:	f3 4f       	sbci	r31, 0xF3	; 243
    2eb8:	20 81       	ld	r18, Z
    2eba:	31 81       	ldd	r19, Z+1	; 0x01
    2ebc:	23 2b       	or	r18, r19
    2ebe:	81 f0       	breq	.+32     	; 0x2ee0 <TC2_HAL_cancel+0x38>
    2ec0:	88 0f       	add	r24, r24
    2ec2:	99 1f       	adc	r25, r25
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	e3 50       	subi	r30, 0x03	; 3
    2ec8:	f3 4f       	sbci	r31, 0xF3	; 243
    2eca:	11 82       	std	Z+1, r1	; 0x01
    2ecc:	10 82       	st	Z, r1
    2ece:	80 91 35 0d 	lds	r24, 0x0D35	; 0x800d35 <cbCounter>
    2ed2:	81 50       	subi	r24, 0x01	; 1
    2ed4:	80 93 35 0d 	sts	0x0D35, r24	; 0x800d35 <cbCounter>
    2ed8:	81 11       	cpse	r24, r1
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <TC2_HAL_cancel+0x38>
    2edc:	0e 94 4d 1c 	call	0x389a	; 0x389a <stop_timer>
    2ee0:	08 95       	ret

Disassembly of section .text.__vector_9:

00001cc8 <__vector_9>:
    1cc8:	1f 92       	push	r1
    1cca:	0f 92       	push	r0
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	0f 92       	push	r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	2f 93       	push	r18
    1cd4:	3f 93       	push	r19
    1cd6:	4f 93       	push	r20
    1cd8:	5f 93       	push	r21
    1cda:	6f 93       	push	r22
    1cdc:	7f 93       	push	r23
    1cde:	8f 93       	push	r24
    1ce0:	9f 93       	push	r25
    1ce2:	af 93       	push	r26
    1ce4:	bf 93       	push	r27
    1ce6:	cf 93       	push	r28
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	90 91 34 0d 	lds	r25, 0x0D34	; 0x800d34 <cnt>
    1cf0:	9f 5f       	subi	r25, 0xFF	; 255
    1cf2:	90 93 34 0d 	sts	0x0D34, r25	; 0x800d34 <cnt>
    1cf6:	89 e0       	ldi	r24, 0x09	; 9
    1cf8:	98 9f       	mul	r25, r24
    1cfa:	21 2d       	mov	r18, r1
    1cfc:	11 24       	eor	r1, r1
    1cfe:	89 2f       	mov	r24, r25
    1d00:	82 1b       	sub	r24, r18
    1d02:	86 95       	lsr	r24
    1d04:	82 0f       	add	r24, r18
    1d06:	82 95       	swap	r24
    1d08:	8f 70       	andi	r24, 0x0F	; 15
    1d0a:	2f e1       	ldi	r18, 0x1F	; 31
    1d0c:	82 9f       	mul	r24, r18
    1d0e:	90 19       	sub	r25, r0
    1d10:	11 24       	eor	r1, r1
    1d12:	91 11       	cpse	r25, r1
    1d14:	13 c0       	rjmp	.+38     	; 0x1d3c <__vector_9+0x74>
    1d16:	10 92 34 0d 	sts	0x0D34, r1	; 0x800d34 <cnt>
    1d1a:	c0 e0       	ldi	r28, 0x00	; 0
    1d1c:	0d c0       	rjmp	.+26     	; 0x1d38 <__vector_9+0x70>
    1d1e:	ec 2f       	mov	r30, r28
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	ee 0f       	add	r30, r30
    1d24:	ff 1f       	adc	r31, r31
    1d26:	e3 50       	subi	r30, 0x03	; 3
    1d28:	f3 4f       	sbci	r31, 0xF3	; 243
    1d2a:	01 90       	ld	r0, Z+
    1d2c:	f0 81       	ld	r31, Z
    1d2e:	e0 2d       	mov	r30, r0
    1d30:	30 97       	sbiw	r30, 0x00	; 0
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <__vector_9+0x6e>
    1d34:	09 95       	icall
    1d36:	cf 5f       	subi	r28, 0xFF	; 255
    1d38:	c5 30       	cpi	r28, 0x05	; 5
    1d3a:	88 f3       	brcs	.-30     	; 0x1d1e <__vector_9+0x56>
    1d3c:	ff 91       	pop	r31
    1d3e:	ef 91       	pop	r30
    1d40:	cf 91       	pop	r28
    1d42:	bf 91       	pop	r27
    1d44:	af 91       	pop	r26
    1d46:	9f 91       	pop	r25
    1d48:	8f 91       	pop	r24
    1d4a:	7f 91       	pop	r23
    1d4c:	6f 91       	pop	r22
    1d4e:	5f 91       	pop	r21
    1d50:	4f 91       	pop	r20
    1d52:	3f 91       	pop	r19
    1d54:	2f 91       	pop	r18
    1d56:	0f 90       	pop	r0
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	0f 90       	pop	r0
    1d5c:	1f 90       	pop	r1
    1d5e:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00002878 <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    2878:	cf 92       	push	r12
    287a:	df 92       	push	r13
    287c:	ef 92       	push	r14
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	6a 01       	movw	r12, r20
    2884:	e6 2e       	mov	r14, r22
    2886:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    288e:	81 11       	cpse	r24, r1
    2890:	13 c0       	rjmp	.+38     	; 0x28b8 <start_and_write_data+0x40>
    2892:	c0 e0       	ldi	r28, 0x00	; 0
    2894:	0e c0       	rjmp	.+28     	; 0x28b2 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    2896:	ae 2d       	mov	r26, r14
    2898:	c6 01       	movw	r24, r12
    289a:	8c 0f       	add	r24, r28
    289c:	91 1d       	adc	r25, r1
    289e:	a1 1d       	adc	r26, r1
    28a0:	fc 01       	movw	r30, r24
    28a2:	84 91       	lpm	r24, Z
    28a4:	a7 fd       	sbrc	r26, 7
    28a6:	80 81       	ld	r24, Z
    28a8:	0e 94 2d 1a 	call	0x345a	; 0x345a <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    28ac:	81 11       	cpse	r24, r1
    28ae:	04 c0       	rjmp	.+8      	; 0x28b8 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    28b0:	cf 5f       	subi	r28, 0xFF	; 255
    28b2:	cd 17       	cp	r28, r29
    28b4:	80 f3       	brcs	.-32     	; 0x2896 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    28b6:	80 e0       	ldi	r24, 0x00	; 0
}
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	ef 90       	pop	r14
    28be:	df 90       	pop	r13
    28c0:	cf 90       	pop	r12
    28c2:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002598 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2598:	ef 92       	push	r14
    259a:	ff 92       	push	r15
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	8c 01       	movw	r16, r24
    25a6:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    25a8:	c0 e0       	ldi	r28, 0x00	; 0
    25aa:	08 c0       	rjmp	.+16     	; 0x25bc <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    25ac:	78 01       	movw	r14, r16
    25ae:	ec 0e       	add	r14, r28
    25b0:	f1 1c       	adc	r15, r1
    25b2:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <TWI_HAL_read_byte_ack>
    25b6:	f7 01       	movw	r30, r14
    25b8:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    25ba:	cf 5f       	subi	r28, 0xFF	; 255
    25bc:	2c 2f       	mov	r18, r28
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	8d 2f       	mov	r24, r29
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	28 17       	cp	r18, r24
    25c8:	39 07       	cpc	r19, r25
    25ca:	84 f3       	brlt	.-32     	; 0x25ac <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    25cc:	8d 2f       	mov	r24, r29
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	e8 01       	movw	r28, r16
    25d4:	c8 0f       	add	r28, r24
    25d6:	d9 1f       	adc	r29, r25
    25d8:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <TWI_HAL_read_byte_nack>
    25dc:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    25de:	0e 94 9a 1b 	call	0x3734	; 0x3734 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	ff 90       	pop	r15
    25ee:	ef 90       	pop	r14
    25f0:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

000038a0 <TWI_API_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
    38a0:	0e 94 3c 14 	call	0x2878	; 0x2878 <start_and_write_data>
}
    38a4:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00003724 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3724:	0e 94 3c 14 	call	0x2878	; 0x2878 <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    3728:	81 11       	cpse	r24, r1
    372a:	03 c0       	rjmp	.+6      	; 0x3732 <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    372c:	0e 94 9a 1b 	call	0x3734	; 0x3734 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    3730:	80 e0       	ldi	r24, 0x00	; 0
}
    3732:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

0000332a <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	eb 01       	movw	r28, r22
    3332:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    3334:	61 e0       	ldi	r22, 0x01	; 1
    3336:	0e 94 f7 14 	call	0x29ee	; 0x29ee <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    333a:	81 11       	cpse	r24, r1
    333c:	04 c0       	rjmp	.+8      	; 0x3346 <TWI_API_read_data_ack_end_nack_stop+0x1c>
	
	return read_and_stop(data, length);
    333e:	61 2f       	mov	r22, r17
    3340:	ce 01       	movw	r24, r28
    3342:	0e 94 cc 12 	call	0x2598	; 0x2598 <read_and_stop>
	//}
	//data[length-1]=TWI_HAL_read_byte_nack();
	//
	//TWI_HAL_stop();
	//return TWI_CODE_SUCCESS;
}
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	1f 91       	pop	r17
    334c:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

0000334e <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    334e:	1f 93       	push	r17
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	eb 01       	movw	r28, r22
    3356:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    3358:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <TWI_HAL_repeated_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    335c:	81 11       	cpse	r24, r1
    335e:	04 c0       	rjmp	.+8      	; 0x3368 <TWI_API_repeat_read_data_stop+0x1a>
	
	return read_and_stop(data, length);
    3360:	61 2f       	mov	r22, r17
    3362:	ce 01       	movw	r24, r28
    3364:	0e 94 cc 12 	call	0x2598	; 0x2598 <read_and_stop>
	
}
    3368:	df 91       	pop	r29
    336a:	cf 91       	pop	r28
    336c:	1f 91       	pop	r17
    336e:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00003700 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    3700:	80 e2       	ldi	r24, 0x20	; 32
    3702:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    3706:	e9 eb       	ldi	r30, 0xB9	; 185
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	80 81       	ld	r24, Z
    370c:	8c 7f       	andi	r24, 0xFC	; 252
    370e:	80 83       	st	Z, r24
    3710:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

000029ee <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    29f6:	84 ea       	ldi	r24, 0xA4	; 164
    29f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    29fc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2a00:	99 23       	and	r25, r25
    2a02:	e4 f7       	brge	.-8      	; 0x29fc <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    2a04:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2a08:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    2a0a:	88 30       	cpi	r24, 0x08	; 8
    2a0c:	99 f4       	brne	.+38     	; 0x2a34 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    2a0e:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2a12:	84 e8       	ldi	r24, 0x84	; 132
    2a14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2a18:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2a1c:	88 23       	and	r24, r24
    2a1e:	e4 f7       	brge	.-8      	; 0x2a18 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    2a20:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2a24:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    2a26:	88 31       	cpi	r24, 0x18	; 24
    2a28:	21 f0       	breq	.+8      	; 0x2a32 <TWI_HAL_start+0x44>
    2a2a:	80 34       	cpi	r24, 0x40	; 64
    2a2c:	19 f4       	brne	.+6      	; 0x2a34 <TWI_HAL_start+0x46>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	08 95       	ret
    2a32:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    2a34:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00002cf0 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2cfa:	84 ea       	ldi	r24, 0xA4	; 164
    2cfc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2d00:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2d04:	99 23       	and	r25, r25
    2d06:	e4 f7       	brge	.-8      	; 0x2d00 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    2d08:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2d0c:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    2d0e:	80 31       	cpi	r24, 0x10	; 16
    2d10:	79 f4       	brne	.+30     	; 0x2d30 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    2d12:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2d16:	84 e8       	ldi	r24, 0x84	; 132
    2d18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2d1c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2d20:	88 23       	and	r24, r24
    2d22:	e4 f7       	brge	.-8      	; 0x2d1c <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    2d24:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2d28:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    2d2a:	80 34       	cpi	r24, 0x40	; 64
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <TWI_HAL_repeated_start+0x40>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    2d30:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

0000345a <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    345a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    345e:	84 e8       	ldi	r24, 0x84	; 132
    3460:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3464:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3468:	88 23       	and	r24, r24
    346a:	e4 f7       	brge	.-8      	; 0x3464 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    346c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3470:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3472:	88 32       	cpi	r24, 0x28	; 40
    3474:	09 f4       	brne	.+2      	; 0x3478 <TWI_HAL_write_byte+0x1e>
    3476:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3478:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

000036b0 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    36b0:	84 ec       	ldi	r24, 0xC4	; 196
    36b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    36b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    36ba:	88 23       	and	r24, r24
    36bc:	e4 f7       	brge	.-8      	; 0x36b6 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    36be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    36c2:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

000036c4 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    36c4:	84 e8       	ldi	r24, 0x84	; 132
    36c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    36ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    36ce:	88 23       	and	r24, r24
    36d0:	e4 f7       	brge	.-8      	; 0x36ca <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    36d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    36d6:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00003734 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    3734:	84 e9       	ldi	r24, 0x94	; 148
    3736:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    373a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    373e:	84 fd       	sbrc	r24, 4
    3740:	fc cf       	rjmp	.-8      	; 0x373a <TWI_HAL_stop+0x6>
}
    3742:	08 95       	ret

Disassembly of section .text.copy_buffer:

00003250 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3250:	bc 01       	movw	r22, r24
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	09 c0       	rjmp	.+18     	; 0x3268 <copy_buffer+0x18>
    3256:	fb 01       	movw	r30, r22
    3258:	e9 0f       	add	r30, r25
    325a:	f1 1d       	adc	r31, r1
    325c:	da 01       	movw	r26, r20
    325e:	a0 50       	subi	r26, 0x00	; 0
    3260:	bf 4f       	sbci	r27, 0xFF	; 255
    3262:	2c 91       	ld	r18, X
    3264:	20 83       	st	Z, r18
    3266:	9f 5f       	subi	r25, 0xFF	; 255
    3268:	49 2f       	mov	r20, r25
    326a:	50 e0       	ldi	r21, 0x00	; 0
    326c:	20 91 37 0d 	lds	r18, 0x0D37	; 0x800d37 <rx_buffer_data_len>
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	22 50       	subi	r18, 0x02	; 2
    3274:	31 09       	sbc	r19, r1
    3276:	42 17       	cp	r20, r18
    3278:	53 07       	cpc	r21, r19
    327a:	6c f3       	brlt	.-38     	; 0x3256 <copy_buffer+0x6>
    327c:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00002e30 <uart0_hal_init>:
    2e30:	e1 ec       	ldi	r30, 0xC1	; 193
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	80 61       	ori	r24, 0x10	; 16
    2e38:	80 83       	st	Z, r24
    2e3a:	80 81       	ld	r24, Z
    2e3c:	88 60       	ori	r24, 0x08	; 8
    2e3e:	80 83       	st	Z, r24
    2e40:	80 81       	ld	r24, Z
    2e42:	80 68       	ori	r24, 0x80	; 128
    2e44:	80 83       	st	Z, r24
    2e46:	80 81       	ld	r24, Z
    2e48:	80 64       	ori	r24, 0x40	; 64
    2e4a:	80 83       	st	Z, r24
    2e4c:	e0 ec       	ldi	r30, 0xC0	; 192
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	82 60       	ori	r24, 0x02	; 2
    2e54:	80 83       	st	Z, r24
    2e56:	86 e0       	ldi	r24, 0x06	; 6
    2e58:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    2e5c:	80 e1       	ldi	r24, 0x10	; 16
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    2e64:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    2e68:	78 94       	sei
    2e6a:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

0000305e <uart0_hal_send_message>:
    305e:	dc 01       	movw	r26, r24
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	0b c0       	rjmp	.+22     	; 0x307a <uart0_hal_send_message+0x1c>
    3064:	29 2f       	mov	r18, r25
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	fd 01       	movw	r30, r26
    306a:	e2 0f       	add	r30, r18
    306c:	f3 1f       	adc	r31, r19
    306e:	40 81       	ld	r20, Z
    3070:	f9 01       	movw	r30, r18
    3072:	ec 59       	subi	r30, 0x9C	; 156
    3074:	fe 4f       	sbci	r31, 0xFE	; 254
    3076:	40 83       	st	Z, r20
    3078:	9f 5f       	subi	r25, 0xFF	; 255
    307a:	96 17       	cp	r25, r22
    307c:	98 f3       	brcs	.-26     	; 0x3064 <uart0_hal_send_message+0x6>
    307e:	60 93 39 0d 	sts	0x0D39, r22	; 0x800d39 <tx_buffer_data_len>
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	80 93 38 0d 	sts	0x0D38, r24	; 0x800d38 <tx_buffer_cursor>
    3088:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    308c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3090:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

000022e8 <uart0_hal_send_string>:
    22e8:	cf 92       	push	r12
    22ea:	df 92       	push	r13
    22ec:	ef 92       	push	r14
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	cf 93       	push	r28
    22f4:	6b 01       	movw	r12, r22
    22f6:	e8 2e       	mov	r14, r24
    22f8:	c0 e0       	ldi	r28, 0x00	; 0
    22fa:	12 c0       	rjmp	.+36     	; 0x2320 <uart0_hal_send_string+0x38>
    22fc:	8c 2f       	mov	r24, r28
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	4e 2d       	mov	r20, r14
    2302:	96 01       	movw	r18, r12
    2304:	20 0f       	add	r18, r16
    2306:	31 1f       	adc	r19, r17
    2308:	41 1d       	adc	r20, r1
    230a:	17 fd       	sbrc	r17, 7
    230c:	4a 95       	dec	r20
    230e:	f9 01       	movw	r30, r18
    2310:	24 91       	lpm	r18, Z
    2312:	47 fd       	sbrc	r20, 7
    2314:	20 81       	ld	r18, Z
    2316:	fc 01       	movw	r30, r24
    2318:	ec 59       	subi	r30, 0x9C	; 156
    231a:	fe 4f       	sbci	r31, 0xFE	; 254
    231c:	20 83       	st	Z, r18
    231e:	cf 5f       	subi	r28, 0xFF	; 255
    2320:	0c 2f       	mov	r16, r28
    2322:	10 e0       	ldi	r17, 0x00	; 0
    2324:	8e 2d       	mov	r24, r14
    2326:	b6 01       	movw	r22, r12
    2328:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
    232c:	08 17       	cp	r16, r24
    232e:	19 07       	cpc	r17, r25
    2330:	28 f3       	brcs	.-54     	; 0x22fc <uart0_hal_send_string+0x14>
    2332:	80 93 39 0d 	sts	0x0D39, r24	; 0x800d39 <tx_buffer_data_len>
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	80 93 38 0d 	sts	0x0D38, r24	; 0x800d38 <tx_buffer_cursor>
    233c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2340:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2344:	cf 91       	pop	r28
    2346:	1f 91       	pop	r17
    2348:	0f 91       	pop	r16
    234a:	ef 90       	pop	r14
    234c:	df 90       	pop	r13
    234e:	cf 90       	pop	r12
    2350:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

0000378a <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    378a:	90 91 36 0d 	lds	r25, 0x0D36	; 0x800d36 <rx_buffer_has_message>
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	91 11       	cpse	r25, r1
    3792:	01 c0       	rjmp	.+2      	; 0x3796 <uart0_hal_message_ready+0xc>
    3794:	80 e0       	ldi	r24, 0x00	; 0
}
    3796:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00003846 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    3846:	10 92 36 0d 	sts	0x0D36, r1	; 0x800d36 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    384a:	10 92 37 0d 	sts	0x0D37, r1	; 0x800d37 <rx_buffer_data_len>
    384e:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003302 <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(uint8_t msg[]){
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	8c 01       	movw	r16, r24
	copy_buffer(msg);
    330a:	0e 94 28 19 	call	0x3250	; 0x3250 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    330e:	c0 91 37 0d 	lds	r28, 0x0D37	; 0x800d37 <rx_buffer_data_len>
    3312:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    3314:	f8 01       	movw	r30, r16
    3316:	ec 0f       	add	r30, r28
    3318:	f1 1d       	adc	r31, r1
    331a:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    331c:	0e 94 23 1c 	call	0x3846	; 0x3846 <uart0_hal_clear_rx_buffer>
	return len;
}
    3320:	8c 2f       	mov	r24, r28
    3322:	cf 91       	pop	r28
    3324:	1f 91       	pop	r17
    3326:	0f 91       	pop	r16
    3328:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00002b0e <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	1f 92       	push	r1
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	9a b1       	in	r25, 0x0a	; 10
    2b1a:	92 60       	ori	r25, 0x02	; 2
    2b1c:	9a b9       	out	0x0a, r25	; 10
    2b1e:	e1 ec       	ldi	r30, 0xC1	; 193
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	90 81       	ld	r25, Z
    2b24:	97 7f       	andi	r25, 0xF7	; 247
    2b26:	90 83       	st	Z, r25
    2b28:	9b b1       	in	r25, 0x0b	; 11
    2b2a:	9d 7f       	andi	r25, 0xFD	; 253
    2b2c:	9b b9       	out	0x0b, r25	; 11
    2b2e:	af e9       	ldi	r26, 0x9F	; 159
    2b30:	bf e0       	ldi	r27, 0x0F	; 15
    2b32:	11 97       	sbiw	r26, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <uart0_hal_send_break+0x24>
    2b36:	00 c0       	rjmp	.+0      	; 0x2b38 <uart0_hal_send_break+0x2a>
    2b38:	00 00       	nop
    2b3a:	90 81       	ld	r25, Z
    2b3c:	98 60       	ori	r25, 0x08	; 8
    2b3e:	90 83       	st	Z, r25
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	ce 01       	movw	r24, r28
    2b46:	01 96       	adiw	r24, 0x01	; 1
    2b48:	0e 94 2f 18 	call	0x305e	; 0x305e <uart0_hal_send_message>
    2b4c:	0f 90       	pop	r0
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	08 95       	ret

Disassembly of section .text.__vector_22:

00002910 <__vector_22>:
    2910:	1f 92       	push	r1
    2912:	0f 92       	push	r0
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	0f 92       	push	r0
    2918:	11 24       	eor	r1, r1
    291a:	8f 93       	push	r24
    291c:	ef 93       	push	r30
    291e:	ff 93       	push	r31
    2920:	e0 91 38 0d 	lds	r30, 0x0D38	; 0x800d38 <tx_buffer_cursor>
    2924:	80 91 39 0d 	lds	r24, 0x0D39	; 0x800d39 <tx_buffer_data_len>
    2928:	e8 17       	cp	r30, r24
    292a:	58 f4       	brcc	.+22     	; 0x2942 <__vector_22+0x32>
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	8e 0f       	add	r24, r30
    2930:	80 93 38 0d 	sts	0x0D38, r24	; 0x800d38 <tx_buffer_cursor>
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	ec 59       	subi	r30, 0x9C	; 156
    2938:	fe 4f       	sbci	r31, 0xFE	; 254
    293a:	80 81       	ld	r24, Z
    293c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2940:	04 c0       	rjmp	.+8      	; 0x294a <__vector_22+0x3a>
    2942:	10 92 38 0d 	sts	0x0D38, r1	; 0x800d38 <tx_buffer_cursor>
    2946:	10 92 39 0d 	sts	0x0D39, r1	; 0x800d39 <tx_buffer_data_len>
    294a:	ff 91       	pop	r31
    294c:	ef 91       	pop	r30
    294e:	8f 91       	pop	r24
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	0f 90       	pop	r0
    2956:	1f 90       	pop	r1
    2958:	18 95       	reti

Disassembly of section .text.__vector_20:

00002194 <__vector_20>:
    2194:	1f 92       	push	r1
    2196:	0f 92       	push	r0
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	0f 92       	push	r0
    219c:	11 24       	eor	r1, r1
    219e:	2f 93       	push	r18
    21a0:	8f 93       	push	r24
    21a2:	9f 93       	push	r25
    21a4:	ef 93       	push	r30
    21a6:	ff 93       	push	r31
    21a8:	80 91 36 0d 	lds	r24, 0x0D36	; 0x800d36 <rx_buffer_has_message>
    21ac:	81 11       	cpse	r24, r1
    21ae:	0e c0       	rjmp	.+28     	; 0x21cc <__vector_20+0x38>
    21b0:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <rx_buffer_data_len>
    21b4:	e4 36       	cpi	r30, 0x64	; 100
    21b6:	50 f4       	brcc	.+20     	; 0x21cc <__vector_20+0x38>
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	8e 0f       	add	r24, r30
    21bc:	80 93 37 0d 	sts	0x0D37, r24	; 0x800d37 <rx_buffer_data_len>
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    21c6:	e0 50       	subi	r30, 0x00	; 0
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	80 83       	st	Z, r24
    21cc:	80 91 37 0d 	lds	r24, 0x0D37	; 0x800d37 <rx_buffer_data_len>
    21d0:	83 30       	cpi	r24, 0x03	; 3
    21d2:	80 f0       	brcs	.+32     	; 0x21f4 <__vector_20+0x60>
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	fc 01       	movw	r30, r24
    21d8:	e1 50       	subi	r30, 0x01	; 1
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	20 81       	ld	r18, Z
    21de:	2a 30       	cpi	r18, 0x0A	; 10
    21e0:	49 f4       	brne	.+18     	; 0x21f4 <__vector_20+0x60>
    21e2:	fc 01       	movw	r30, r24
    21e4:	e2 50       	subi	r30, 0x02	; 2
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	80 81       	ld	r24, Z
    21ea:	8d 30       	cpi	r24, 0x0D	; 13
    21ec:	19 f4       	brne	.+6      	; 0x21f4 <__vector_20+0x60>
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	80 93 36 0d 	sts	0x0D36, r24	; 0x800d36 <rx_buffer_has_message>
    21f4:	ff 91       	pop	r31
    21f6:	ef 91       	pop	r30
    21f8:	9f 91       	pop	r25
    21fa:	8f 91       	pop	r24
    21fc:	2f 91       	pop	r18
    21fe:	0f 90       	pop	r0
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	0f 90       	pop	r0
    2204:	1f 90       	pop	r1
    2206:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00002e6c <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    2e6c:	e9 ec       	ldi	r30, 0xC9	; 201
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	80 61       	ori	r24, 0x10	; 16
    2e74:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    2e76:	80 81       	ld	r24, Z
    2e78:	88 60       	ori	r24, 0x08	; 8
    2e7a:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    2e7c:	80 81       	ld	r24, Z
    2e7e:	80 68       	ori	r24, 0x80	; 128
    2e80:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    2e82:	80 81       	ld	r24, Z
    2e84:	80 64       	ori	r24, 0x40	; 64
    2e86:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    2e88:	e8 ec       	ldi	r30, 0xC8	; 200
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	82 60       	ori	r24, 0x02	; 2
    2e90:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    2e92:	86 e0       	ldi	r24, 0x06	; 6
    2e94:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
    2e98:	80 e1       	ldi	r24, 0x10	; 16
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    2ea0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    2ea4:	78 94       	sei
    2ea6:	08 95       	ret

Disassembly of section .text.__vector_30:

0000295a <__vector_30>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    295a:	1f 92       	push	r1
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	0f 92       	push	r0
    2962:	11 24       	eor	r1, r1
    2964:	8f 93       	push	r24
    2966:	ef 93       	push	r30
    2968:	ff 93       	push	r31
    296a:	e0 91 3c 0d 	lds	r30, 0x0D3C	; 0x800d3c <tx_buffer_cursor>
    296e:	80 91 3d 0d 	lds	r24, 0x0D3D	; 0x800d3d <tx_buffer_data_len>
    2972:	e8 17       	cp	r30, r24
    2974:	58 f4       	brcc	.+22     	; 0x298c <__vector_30+0x32>
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	8e 0f       	add	r24, r30
    297a:	80 93 3c 0d 	sts	0x0D3C, r24	; 0x800d3c <tx_buffer_cursor>
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	e2 5a       	subi	r30, 0xA2	; 162
    2982:	f4 4f       	sbci	r31, 0xF4	; 244
    2984:	80 81       	ld	r24, Z
    2986:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    298a:	04 c0       	rjmp	.+8      	; 0x2994 <__vector_30+0x3a>
    298c:	10 92 3c 0d 	sts	0x0D3C, r1	; 0x800d3c <tx_buffer_cursor>
    2990:	10 92 3d 0d 	sts	0x0D3D, r1	; 0x800d3d <tx_buffer_data_len>
    2994:	ff 91       	pop	r31
    2996:	ef 91       	pop	r30
    2998:	8f 91       	pop	r24
    299a:	0f 90       	pop	r0
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	0f 90       	pop	r0
    29a0:	1f 90       	pop	r1
    29a2:	18 95       	reti

Disassembly of section .text.__vector_28:

00002208 <__vector_28>:
    2208:	1f 92       	push	r1
    220a:	0f 92       	push	r0
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	0f 92       	push	r0
    2210:	11 24       	eor	r1, r1
    2212:	2f 93       	push	r18
    2214:	8f 93       	push	r24
    2216:	9f 93       	push	r25
    2218:	ef 93       	push	r30
    221a:	ff 93       	push	r31
    221c:	80 91 3a 0d 	lds	r24, 0x0D3A	; 0x800d3a <rx_buffer_has_message>
    2220:	81 11       	cpse	r24, r1
    2222:	0e c0       	rjmp	.+28     	; 0x2240 <__vector_28+0x38>
    2224:	e0 91 3b 0d 	lds	r30, 0x0D3B	; 0x800d3b <rx_buffer_data_len>
    2228:	e4 36       	cpi	r30, 0x64	; 100
    222a:	50 f4       	brcc	.+20     	; 0x2240 <__vector_28+0x38>
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	8e 0f       	add	r24, r30
    2230:	80 93 3b 0d 	sts	0x0D3B, r24	; 0x800d3b <rx_buffer_data_len>
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    223a:	e6 57       	subi	r30, 0x76	; 118
    223c:	f3 4f       	sbci	r31, 0xF3	; 243
    223e:	80 83       	st	Z, r24
    2240:	80 91 3b 0d 	lds	r24, 0x0D3B	; 0x800d3b <rx_buffer_data_len>
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	fc 01       	movw	r30, r24
    2248:	e7 57       	subi	r30, 0x77	; 119
    224a:	f3 4f       	sbci	r31, 0xF3	; 243
    224c:	20 81       	ld	r18, Z
    224e:	2a 30       	cpi	r18, 0x0A	; 10
    2250:	49 f4       	brne	.+18     	; 0x2264 <__vector_28+0x5c>
    2252:	fc 01       	movw	r30, r24
    2254:	e8 57       	subi	r30, 0x78	; 120
    2256:	f3 4f       	sbci	r31, 0xF3	; 243
    2258:	80 81       	ld	r24, Z
    225a:	8d 30       	cpi	r24, 0x0D	; 13
    225c:	19 f4       	brne	.+6      	; 0x2264 <__vector_28+0x5c>
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	80 93 3a 0d 	sts	0x0D3A, r24	; 0x800d3a <rx_buffer_has_message>
    2264:	ff 91       	pop	r31
    2266:	ef 91       	pop	r30
    2268:	9f 91       	pop	r25
    226a:	8f 91       	pop	r24
    226c:	2f 91       	pop	r18
    226e:	0f 90       	pop	r0
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	0f 90       	pop	r0
    2274:	1f 90       	pop	r1
    2276:	18 95       	reti

Disassembly of section .text.main:

000035d2 <main>:
{
	//test_runner();
	
	while(1)
    {
		MAINPG_start();
    35d2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    35d6:	2f ef       	ldi	r18, 0xFF	; 255
    35d8:	8d e3       	ldi	r24, 0x3D	; 61
    35da:	99 e4       	ldi	r25, 0x49	; 73
    35dc:	21 50       	subi	r18, 0x01	; 1
    35de:	80 40       	sbci	r24, 0x00	; 0
    35e0:	90 40       	sbci	r25, 0x00	; 0
    35e2:	e1 f7       	brne	.-8      	; 0x35dc <main+0xa>
    35e4:	00 c0       	rjmp	.+0      	; 0x35e6 <main+0x14>
    35e6:	00 00       	nop
    35e8:	f4 cf       	rjmp	.-24     	; 0x35d2 <main>

Disassembly of section .text.vect_ADC_heat_timeout:

000035ea <vect_ADC_heat_timeout>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    35ea:	80 91 3e 0d 	lds	r24, 0x0D3E	; 0x800d3e <cntPowerUpTime>
    35ee:	8f 5f       	subi	r24, 0xFF	; 255
    35f0:	80 93 3e 0d 	sts	0x0D3E, r24	; 0x800d3e <cntPowerUpTime>
    35f4:	90 91 3f 0d 	lds	r25, 0x0D3F	; 0x800d3f <_powerUpTime>
    35f8:	89 17       	cp	r24, r25
    35fa:	10 f0       	brcs	.+4      	; 0x3600 <vect_ADC_heat_timeout+0x16>
    35fc:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <TC0_HAL_stop>
    3600:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

000023bc <ADC_init_sampling>:
    23bc:	cf 93       	push	r28
    23be:	50 93 29 0d 	sts	0x0D29, r21	; 0x800d29 <_data+0x1>
    23c2:	40 93 28 0d 	sts	0x0D28, r20	; 0x800d28 <_data>
    23c6:	70 93 2b 0d 	sts	0x0D2B, r23	; 0x800d2b <_nSamples+0x1>
    23ca:	60 93 2a 0d 	sts	0x0D2A, r22	; 0x800d2a <_nSamples>
    23ce:	10 92 27 0d 	sts	0x0D27, r1	; 0x800d27 <cntSamples+0x1>
    23d2:	10 92 26 0d 	sts	0x0D26, r1	; 0x800d26 <cntSamples>
    23d6:	6a ea       	ldi	r22, 0xAA	; 170
    23d8:	75 e1       	ldi	r23, 0x15	; 21
    23da:	0e 94 0d 1a 	call	0x341a	; 0x341a <TC0_HAL_init>
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	0e 94 30 1b 	call	0x3660	; 0x3660 <PM_HAL_adc_power>
    23e4:	2f ef       	ldi	r18, 0xFF	; 255
    23e6:	83 ec       	ldi	r24, 0xC3	; 195
    23e8:	99 e0       	ldi	r25, 0x09	; 9
    23ea:	21 50       	subi	r18, 0x01	; 1
    23ec:	80 40       	sbci	r24, 0x00	; 0
    23ee:	90 40       	sbci	r25, 0x00	; 0
    23f0:	e1 f7       	brne	.-8      	; 0x23ea <ADC_init_sampling+0x2e>
    23f2:	00 c0       	rjmp	.+0      	; 0x23f4 <ADC_init_sampling+0x38>
    23f4:	00 00       	nop
    23f6:	60 e0       	ldi	r22, 0x00	; 0
    23f8:	8d e4       	ldi	r24, 0x4D	; 77
    23fa:	0e 94 f7 14 	call	0x29ee	; 0x29ee <TWI_HAL_start>
    23fe:	c8 2f       	mov	r28, r24
    2400:	0e 94 9a 1b 	call	0x3734	; 0x3734 <TWI_HAL_stop>
    2404:	cc 23       	and	r28, r28
    2406:	51 f0       	breq	.+20     	; 0x241c <ADC_init_sampling+0x60>
    2408:	10 92 29 0d 	sts	0x0D29, r1	; 0x800d29 <_data+0x1>
    240c:	10 92 28 0d 	sts	0x0D28, r1	; 0x800d28 <_data>
    2410:	10 92 2b 0d 	sts	0x0D2B, r1	; 0x800d2b <_nSamples+0x1>
    2414:	10 92 2a 0d 	sts	0x0D2A, r1	; 0x800d2a <_nSamples>
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	01 c0       	rjmp	.+2      	; 0x241e <ADC_init_sampling+0x62>
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	cf 91       	pop	r28
    2420:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

000036d8 <ADC_deinit_sampling>:
    36d8:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <TC0_HAL_stop>
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	0e 94 30 1b 	call	0x3660	; 0x3660 <PM_HAL_adc_power>
    36e2:	10 92 29 0d 	sts	0x0D29, r1	; 0x800d29 <_data+0x1>
    36e6:	10 92 28 0d 	sts	0x0D28, r1	; 0x800d28 <_data>
    36ea:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

000034f6 <ADC_is_sampling_done>:
    34f6:	40 91 26 0d 	lds	r20, 0x0D26	; 0x800d26 <cntSamples>
    34fa:	50 91 27 0d 	lds	r21, 0x0D27	; 0x800d27 <cntSamples+0x1>
    34fe:	20 91 2a 0d 	lds	r18, 0x0D2A	; 0x800d2a <_nSamples>
    3502:	30 91 2b 0d 	lds	r19, 0x0D2B	; 0x800d2b <_nSamples+0x1>
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	42 17       	cp	r20, r18
    350a:	53 07       	cpc	r21, r19
    350c:	08 f4       	brcc	.+2      	; 0x3510 <ADC_is_sampling_done+0x1a>
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

0000347a <ADC_meth_sens_power_on>:
    347a:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <_powerUpTime>
    347e:	10 92 3e 0d 	sts	0x0D3E, r1	; 0x800d3e <cntPowerUpTime>
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	0e 94 3a 1b 	call	0x3674	; 0x3674 <PM_HAL_meth_power>
    3488:	65 ef       	ldi	r22, 0xF5	; 245
    348a:	7a e1       	ldi	r23, 0x1A	; 26
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	0e 94 0d 1a 	call	0x341a	; 0x341a <TC0_HAL_init>
    3492:	0e 94 4a 1c 	call	0x3894	; 0x3894 <TC0_HAL_start>
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00003712 <ADC_meth_sens_ready>:

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    3712:	20 91 3e 0d 	lds	r18, 0x0D3E	; 0x800d3e <cntPowerUpTime>
    3716:	90 91 3f 0d 	lds	r25, 0x0D3F	; 0x800d3f <_powerUpTime>
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	29 17       	cp	r18, r25
    371e:	08 f4       	brcc	.+2      	; 0x3722 <ADC_meth_sens_ready+0x10>
    3720:	80 e0       	ldi	r24, 0x00	; 0
}
    3722:	08 95       	ret

Disassembly of section .text.calc_ppm_methane:

00001d60 <calc_ppm_methane>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    1d60:	8f 92       	push	r8
    1d62:	9f 92       	push	r9
    1d64:	af 92       	push	r10
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	bc 01       	movw	r22, r24
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__floatunsisf>
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	59 e3       	ldi	r21, 0x39	; 57
    1d82:	0e 94 46 1c 	call	0x388c	; 0x388c <__mulsf3>
    1d86:	80 90 1a 0d 	lds	r8, 0x0D1A	; 0x800d1a <Vc>
    1d8a:	90 90 1b 0d 	lds	r9, 0x0D1B	; 0x800d1b <Vc+0x1>
    1d8e:	a0 90 1c 0d 	lds	r10, 0x0D1C	; 0x800d1c <Vc+0x2>
    1d92:	b0 90 1d 0d 	lds	r11, 0x0D1D	; 0x800d1d <Vc+0x3>
    1d96:	a5 01       	movw	r20, r10
    1d98:	94 01       	movw	r18, r8
    1d9a:	0e 94 46 1c 	call	0x388c	; 0x388c <__mulsf3>
    1d9e:	6b 01       	movw	r12, r22
    1da0:	7c 01       	movw	r14, r24
    1da2:	9b 01       	movw	r18, r22
    1da4:	ac 01       	movw	r20, r24
    1da6:	c5 01       	movw	r24, r10
    1da8:	b4 01       	movw	r22, r8
    1daa:	0e 94 cc 1b 	call	0x3798	; 0x3798 <__subsf3>
    1dae:	a7 01       	movw	r20, r14
    1db0:	96 01       	movw	r18, r12
    1db2:	0e 94 42 1c 	call	0x3884	; 0x3884 <__divsf3>
    1db6:	20 91 16 0d 	lds	r18, 0x0D16	; 0x800d16 <RRL>
    1dba:	30 91 17 0d 	lds	r19, 0x0D17	; 0x800d17 <RRL+0x1>
    1dbe:	40 91 18 0d 	lds	r20, 0x0D18	; 0x800d18 <RRL+0x2>
    1dc2:	50 91 19 0d 	lds	r21, 0x0D19	; 0x800d19 <RRL+0x3>
    1dc6:	0e 94 46 1c 	call	0x388c	; 0x388c <__mulsf3>
    1dca:	20 91 12 0d 	lds	r18, 0x0D12	; 0x800d12 <PPM_factor>
    1dce:	30 91 13 0d 	lds	r19, 0x0D13	; 0x800d13 <PPM_factor+0x1>
    1dd2:	40 91 14 0d 	lds	r20, 0x0D14	; 0x800d14 <PPM_factor+0x2>
    1dd6:	50 91 15 0d 	lds	r21, 0x0D15	; 0x800d15 <PPM_factor+0x3>
    1dda:	0e 94 46 1c 	call	0x388c	; 0x388c <__mulsf3>
    1dde:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
    1de2:	cb 01       	movw	r24, r22
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	bf 90       	pop	r11
    1dee:	af 90       	pop	r10
    1df0:	9f 90       	pop	r9
    1df2:	8f 90       	pop	r8
    1df4:	08 95       	ret

Disassembly of section .text.ADC_get_value:

0000253c <ADC_get_value>:
    253c:	ef 92       	push	r14
    253e:	ff 92       	push	r15
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	00 d0       	rcall	.+0      	; 0x2548 <ADC_get_value+0xc>
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	7c 01       	movw	r14, r24
    254e:	8f ef       	ldi	r24, 0xFF	; 255
    2550:	9f ef       	ldi	r25, 0xFF	; 255
    2552:	f7 01       	movw	r30, r14
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
    2558:	42 e0       	ldi	r20, 0x02	; 2
    255a:	be 01       	movw	r22, r28
    255c:	6f 5f       	subi	r22, 0xFF	; 255
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	8d e4       	ldi	r24, 0x4D	; 77
    2562:	0e 94 95 19 	call	0x332a	; 0x332a <TWI_API_read_data_ack_end_nack_stop>
    2566:	18 2f       	mov	r17, r24
    2568:	81 11       	cpse	r24, r1
    256a:	0d c0       	rjmp	.+26     	; 0x2586 <ADC_get_value+0x4a>
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	98 2f       	mov	r25, r24
    2572:	88 27       	eor	r24, r24
    2574:	2a 81       	ldd	r18, Y+2	; 0x02
    2576:	82 2b       	or	r24, r18
    2578:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <calc_ppm_methane>
    257c:	f7 01       	movw	r30, r14
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
    2582:	81 2f       	mov	r24, r17
    2584:	01 c0       	rjmp	.+2      	; 0x2588 <ADC_get_value+0x4c>
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	ff 90       	pop	r15
    2594:	ef 90       	pop	r14
    2596:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00002b54 <vect_ADC_do_sample>:
    2b54:	80 91 28 0d 	lds	r24, 0x0D28	; 0x800d28 <_data>
    2b58:	90 91 29 0d 	lds	r25, 0x0D29	; 0x800d29 <_data+0x1>
    2b5c:	20 91 26 0d 	lds	r18, 0x0D26	; 0x800d26 <cntSamples>
    2b60:	30 91 27 0d 	lds	r19, 0x0D27	; 0x800d27 <cntSamples+0x1>
    2b64:	a9 01       	movw	r20, r18
    2b66:	4f 5f       	subi	r20, 0xFF	; 255
    2b68:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6a:	50 93 27 0d 	sts	0x0D27, r21	; 0x800d27 <cntSamples+0x1>
    2b6e:	40 93 26 0d 	sts	0x0D26, r20	; 0x800d26 <cntSamples>
    2b72:	22 0f       	add	r18, r18
    2b74:	33 1f       	adc	r19, r19
    2b76:	82 0f       	add	r24, r18
    2b78:	93 1f       	adc	r25, r19
    2b7a:	0e 94 9e 12 	call	0x253c	; 0x253c <ADC_get_value>
    2b7e:	20 91 26 0d 	lds	r18, 0x0D26	; 0x800d26 <cntSamples>
    2b82:	30 91 27 0d 	lds	r19, 0x0D27	; 0x800d27 <cntSamples+0x1>
    2b86:	80 91 2a 0d 	lds	r24, 0x0D2A	; 0x800d2a <_nSamples>
    2b8a:	90 91 2b 0d 	lds	r25, 0x0D2B	; 0x800d2b <_nSamples+0x1>
    2b8e:	28 17       	cp	r18, r24
    2b90:	39 07       	cpc	r19, r25
    2b92:	10 f0       	brcs	.+4      	; 0x2b98 <vect_ADC_do_sample+0x44>
    2b94:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <TC0_HAL_stop>
    2b98:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

000037e8 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

ADC_STATUS ADC_start_sampling(){
	TC0_HAL_start();
    37e8:	0e 94 4a 1c 	call	0x3894	; 0x3894 <TC0_HAL_start>
	vect_ADC_do_sample();
    37ec:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <vect_ADC_do_sample>
	return ADC_STATUS_SUCCESS;
}
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	08 95       	ret

Disassembly of section .text.JN_join_network:

00000768 <JN_join_network>:
#include "../../../HAL/RN2483/RN2483_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
 768:	af 92       	push	r10
 76a:	bf 92       	push	r11
 76c:	cf 92       	push	r12
 76e:	df 92       	push	r13
 770:	ef 92       	push	r14
 772:	ff 92       	push	r15
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
 77e:	28 97       	sbiw	r28, 0x08	; 8
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	f8 94       	cli
 784:	de bf       	out	0x3e, r29	; 62
 786:	0f be       	out	0x3f, r0	; 63
 788:	cd bf       	out	0x3d, r28	; 61
 78a:	5c 01       	movw	r10, r24
 78c:	6b 01       	movw	r12, r22
 78e:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
 790:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	
	
	while(1){
		switch(state){
 792:	e1 2f       	mov	r30, r17
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	ed 30       	cpi	r30, 0x0D	; 13
 798:	f1 05       	cpc	r31, r1
 79a:	d8 f7       	brcc	.-10     	; 0x792 <JN_join_network+0x2a>
 79c:	e2 5c       	subi	r30, 0xC2	; 194
 79e:	ff 4f       	sbci	r31, 0xFF	; 255
 7a0:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
 7a4:	0e 94 32 1c 	call	0x3864	; 0x3864 <rn2483_reset_active>
 7a8:	2f ef       	ldi	r18, 0xFF	; 255
 7aa:	89 e6       	ldi	r24, 0x69	; 105
 7ac:	98 e1       	ldi	r25, 0x18	; 24
 7ae:	21 50       	subi	r18, 0x01	; 1
 7b0:	80 40       	sbci	r24, 0x00	; 0
 7b2:	90 40       	sbci	r25, 0x00	; 0
 7b4:	e1 f7       	brne	.-8      	; 0x7ae <JN_join_network+0x46>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <JN_join_network+0x50>
 7b8:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
 7ba:	0e 94 36 1c 	call	0x386c	; 0x386c <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
 7be:	4c e0       	ldi	r20, 0x0C	; 12
 7c0:	50 e0       	ldi	r21, 0x00	; 0
 7c2:	62 e0       	ldi	r22, 0x02	; 2
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	ce 01       	movw	r24, r28
 7c8:	01 96       	adiw	r24, 0x01	; 1
 7ca:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
 7ce:	21 e9       	ldi	r18, 0x91	; 145
 7d0:	32 e0       	ldi	r19, 0x02	; 2
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	61 e0       	ldi	r22, 0x01	; 1
 7d6:	ce 01       	movw	r24, r28
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
 7de:	11 e0       	ldi	r17, 0x01	; 1
			break;
 7e0:	d8 cf       	rjmp	.-80     	; 0x792 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
 7e2:	48 e9       	ldi	r20, 0x98	; 152
 7e4:	52 e0       	ldi	r21, 0x02	; 2
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	8c e2       	ldi	r24, 0x2C	; 44
 7ea:	92 e0       	ldi	r25, 0x02	; 2
 7ec:	0e 94 63 18 	call	0x30c6	; 0x30c6 <cmd_with_ending>
				util_transmit_msg(lm_msg);
 7f0:	8c e2       	ldi	r24, 0x2C	; 44
 7f2:	92 e0       	ldi	r25, 0x02	; 2
 7f4:	0e 94 a5 1a 	call	0x354a	; 0x354a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
 7f8:	4c e0       	ldi	r20, 0x0C	; 12
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	63 e0       	ldi	r22, 0x03	; 3
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	ce 01       	movw	r24, r28
 802:	01 96       	adiw	r24, 0x01	; 1
 804:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 808:	26 ea       	ldi	r18, 0xA6	; 166
 80a:	32 e0       	ldi	r19, 0x02	; 2
 80c:	40 e0       	ldi	r20, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	ce 01       	movw	r24, r28
 812:	01 96       	adiw	r24, 0x01	; 1
 814:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 818:	11 e0       	ldi	r17, 0x01	; 1
			break;
 81a:	bb cf       	rjmp	.-138    	; 0x792 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
 81c:	b5 01       	movw	r22, r10
 81e:	8c e2       	ldi	r24, 0x2C	; 44
 820:	92 e0       	ldi	r25, 0x02	; 2
 822:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <mac_set_deveui>
				attach_ending(lm_msg);
 826:	8c e2       	ldi	r24, 0x2C	; 44
 828:	92 e0       	ldi	r25, 0x02	; 2
 82a:	0e 94 97 1a 	call	0x352e	; 0x352e <attach_ending>
				util_transmit_msg(lm_msg);
 82e:	8c e2       	ldi	r24, 0x2C	; 44
 830:	92 e0       	ldi	r25, 0x02	; 2
 832:	0e 94 a5 1a 	call	0x354a	; 0x354a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
 836:	4c e0       	ldi	r20, 0x0C	; 12
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	64 e0       	ldi	r22, 0x04	; 4
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	ce 01       	movw	r24, r28
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 846:	26 ea       	ldi	r18, 0xA6	; 166
 848:	32 e0       	ldi	r19, 0x02	; 2
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	ce 01       	movw	r24, r28
 850:	01 96       	adiw	r24, 0x01	; 1
 852:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 856:	11 e0       	ldi	r17, 0x01	; 1
			break;
 858:	9c cf       	rjmp	.-200    	; 0x792 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
 85a:	b7 01       	movw	r22, r14
 85c:	8c e2       	ldi	r24, 0x2C	; 44
 85e:	92 e0       	ldi	r25, 0x02	; 2
 860:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <mac_set_appkey>
				attach_ending(lm_msg);
 864:	8c e2       	ldi	r24, 0x2C	; 44
 866:	92 e0       	ldi	r25, 0x02	; 2
 868:	0e 94 97 1a 	call	0x352e	; 0x352e <attach_ending>
				util_transmit_msg(lm_msg);
 86c:	8c e2       	ldi	r24, 0x2C	; 44
 86e:	92 e0       	ldi	r25, 0x02	; 2
 870:	0e 94 a5 1a 	call	0x354a	; 0x354a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
 874:	4c e0       	ldi	r20, 0x0C	; 12
 876:	50 e0       	ldi	r21, 0x00	; 0
 878:	65 e0       	ldi	r22, 0x05	; 5
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	ce 01       	movw	r24, r28
 87e:	01 96       	adiw	r24, 0x01	; 1
 880:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 884:	26 ea       	ldi	r18, 0xA6	; 166
 886:	32 e0       	ldi	r19, 0x02	; 2
 888:	40 e0       	ldi	r20, 0x00	; 0
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	ce 01       	movw	r24, r28
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 894:	11 e0       	ldi	r17, 0x01	; 1
			break;
 896:	7d cf       	rjmp	.-262    	; 0x792 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
 898:	b6 01       	movw	r22, r12
 89a:	8c e2       	ldi	r24, 0x2C	; 44
 89c:	92 e0       	ldi	r25, 0x02	; 2
 89e:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <mac_set_appeui>
				attach_ending(lm_msg);
 8a2:	8c e2       	ldi	r24, 0x2C	; 44
 8a4:	92 e0       	ldi	r25, 0x02	; 2
 8a6:	0e 94 97 1a 	call	0x352e	; 0x352e <attach_ending>
				util_transmit_msg(lm_msg);
 8aa:	8c e2       	ldi	r24, 0x2C	; 44
 8ac:	92 e0       	ldi	r25, 0x02	; 2
 8ae:	0e 94 a5 1a 	call	0x354a	; 0x354a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
 8b2:	4c e0       	ldi	r20, 0x0C	; 12
 8b4:	50 e0       	ldi	r21, 0x00	; 0
 8b6:	66 e0       	ldi	r22, 0x06	; 6
 8b8:	70 e0       	ldi	r23, 0x00	; 0
 8ba:	ce 01       	movw	r24, r28
 8bc:	01 96       	adiw	r24, 0x01	; 1
 8be:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 8c2:	26 ea       	ldi	r18, 0xA6	; 166
 8c4:	32 e0       	ldi	r19, 0x02	; 2
 8c6:	40 e0       	ldi	r20, 0x00	; 0
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	ce 01       	movw	r24, r28
 8cc:	01 96       	adiw	r24, 0x01	; 1
 8ce:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 8d2:	11 e0       	ldi	r17, 0x01	; 1
			break;
 8d4:	5e cf       	rjmp	.-324    	; 0x792 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
 8d6:	61 e0       	ldi	r22, 0x01	; 1
 8d8:	8c e2       	ldi	r24, 0x2C	; 44
 8da:	92 e0       	ldi	r25, 0x02	; 2
 8dc:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <mac_set_ADR>
				attach_ending(lm_msg);
 8e0:	8c e2       	ldi	r24, 0x2C	; 44
 8e2:	92 e0       	ldi	r25, 0x02	; 2
 8e4:	0e 94 97 1a 	call	0x352e	; 0x352e <attach_ending>
				util_transmit_msg(lm_msg);
 8e8:	8c e2       	ldi	r24, 0x2C	; 44
 8ea:	92 e0       	ldi	r25, 0x02	; 2
 8ec:	0e 94 a5 1a 	call	0x354a	; 0x354a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
 8f0:	4c e0       	ldi	r20, 0x0C	; 12
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	67 e0       	ldi	r22, 0x07	; 7
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	ce 01       	movw	r24, r28
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 900:	26 ea       	ldi	r18, 0xA6	; 166
 902:	32 e0       	ldi	r19, 0x02	; 2
 904:	40 e0       	ldi	r20, 0x00	; 0
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	ce 01       	movw	r24, r28
 90a:	01 96       	adiw	r24, 0x01	; 1
 90c:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 910:	11 e0       	ldi	r17, 0x01	; 1
			break;
 912:	3f cf       	rjmp	.-386    	; 0x792 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
 914:	49 ea       	ldi	r20, 0xA9	; 169
 916:	52 e0       	ldi	r21, 0x02	; 2
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	8c e2       	ldi	r24, 0x2C	; 44
 91c:	92 e0       	ldi	r25, 0x02	; 2
 91e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <cmd_with_ending>
				util_transmit_msg(lm_msg);
 922:	8c e2       	ldi	r24, 0x2C	; 44
 924:	92 e0       	ldi	r25, 0x02	; 2
 926:	0e 94 a5 1a 	call	0x354a	; 0x354a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
 92a:	4c e0       	ldi	r20, 0x0C	; 12
 92c:	50 e0       	ldi	r21, 0x00	; 0
 92e:	68 e0       	ldi	r22, 0x08	; 8
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	ce 01       	movw	r24, r28
 934:	01 96       	adiw	r24, 0x01	; 1
 936:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 93a:	26 ea       	ldi	r18, 0xA6	; 166
 93c:	32 e0       	ldi	r19, 0x02	; 2
 93e:	40 e0       	ldi	r20, 0x00	; 0
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	ce 01       	movw	r24, r28
 944:	01 96       	adiw	r24, 0x01	; 1
 946:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 94a:	11 e0       	ldi	r17, 0x01	; 1
			break;
 94c:	22 cf       	rjmp	.-444    	; 0x792 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
 94e:	42 eb       	ldi	r20, 0xB2	; 178
 950:	52 e0       	ldi	r21, 0x02	; 2
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	8c e2       	ldi	r24, 0x2C	; 44
 956:	92 e0       	ldi	r25, 0x02	; 2
 958:	0e 94 63 18 	call	0x30c6	; 0x30c6 <cmd_with_ending>
				util_transmit_msg(lm_msg);
 95c:	8c e2       	ldi	r24, 0x2C	; 44
 95e:	92 e0       	ldi	r25, 0x02	; 2
 960:	0e 94 a5 1a 	call	0x354a	; 0x354a <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
 964:	4a e0       	ldi	r20, 0x0A	; 10
 966:	50 e0       	ldi	r21, 0x00	; 0
 968:	69 e0       	ldi	r22, 0x09	; 9
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	ce 01       	movw	r24, r28
 96e:	01 96       	adiw	r24, 0x01	; 1
 970:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 974:	26 ea       	ldi	r18, 0xA6	; 166
 976:	32 e0       	ldi	r19, 0x02	; 2
 978:	40 e0       	ldi	r20, 0x00	; 0
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	ce 01       	movw	r24, r28
 97e:	01 96       	adiw	r24, 0x01	; 1
 980:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 984:	11 e0       	ldi	r17, 0x01	; 1
			break;
 986:	05 cf       	rjmp	.-502    	; 0x792 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
 988:	4a e0       	ldi	r20, 0x0A	; 10
 98a:	50 e0       	ldi	r21, 0x00	; 0
 98c:	6b e0       	ldi	r22, 0x0B	; 11
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	ce 01       	movw	r24, r28
 992:	01 96       	adiw	r24, 0x01	; 1
 994:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
 998:	20 ec       	ldi	r18, 0xC0	; 192
 99a:	32 e0       	ldi	r19, 0x02	; 2
 99c:	40 e0       	ldi	r20, 0x00	; 0
 99e:	60 e0       	ldi	r22, 0x00	; 0
 9a0:	ce 01       	movw	r24, r28
 9a2:	01 96       	adiw	r24, 0x01	; 1
 9a4:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 9a8:	11 e0       	ldi	r17, 0x01	; 1
			break;
 9aa:	f3 ce       	rjmp	.-538    	; 0x792 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return util_parse_err(lm_msg);
 9ac:	8c e2       	ldi	r24, 0x2C	; 44
 9ae:	92 e0       	ldi	r25, 0x02	; 2
 9b0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <util_parse_err>
 9b4:	14 c0       	rjmp	.+40     	; 0x9de <__EEPROM_REGION_LENGTH__+0x1de>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
 9b6:	0e 94 c5 1b 	call	0x378a	; 0x378a <uart0_hal_message_ready>
 9ba:	88 23       	and	r24, r24
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 9be:	e9 ce       	rjmp	.-558    	; 0x792 <JN_join_network+0x2a>
					util_read_msg(lm_msg);
 9c0:	8c e2       	ldi	r24, 0x2C	; 44
 9c2:	92 e0       	ldi	r25, 0x02	; 2
 9c4:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
 9c8:	6c e2       	ldi	r22, 0x2C	; 44
 9ca:	72 e0       	ldi	r23, 0x02	; 2
 9cc:	ce 01       	movw	r24, r28
 9ce:	01 96       	adiw	r24, 0x01	; 1
 9d0:	0e 94 40 12 	call	0x2480	; 0x2480 <util_matchMessage>
 9d4:	18 2f       	mov	r17, r24
 9d6:	dd ce       	rjmp	.-582    	; 0x792 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
 9d8:	80 e0       	ldi	r24, 0x00	; 0
 9da:	01 c0       	rjmp	.+2      	; 0x9de <__EEPROM_REGION_LENGTH__+0x1de>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
 9dc:	82 e0       	ldi	r24, 0x02	; 2
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
 9de:	28 96       	adiw	r28, 0x08	; 8
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	f8 94       	cli
 9e4:	de bf       	out	0x3e, r29	; 62
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	cd bf       	out	0x3d, r28	; 61
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	1f 91       	pop	r17
 9f0:	ff 90       	pop	r15
 9f2:	ef 90       	pop	r14
 9f4:	df 90       	pop	r13
 9f6:	cf 90       	pop	r12
 9f8:	bf 90       	pop	r11
 9fa:	af 90       	pop	r10
 9fc:	08 95       	ret

Disassembly of section .text.set_block_uplink:

00003602 <set_block_uplink>:
bool LM_is_free(){
	return busy==false;
}

static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&block_uplink);
    3602:	89 e8       	ldi	r24, 0x89	; 137
    3604:	9a e1       	ldi	r25, 0x1A	; 26
    3606:	0e 94 25 13 	call	0x264a	; 0x264a <TC2_HAL_subscribe>
    360a:	80 93 40 0d 	sts	0x0D40, r24	; 0x800d40 <subPointer>
	busy=true;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	80 93 41 0d 	sts	0x0D41, r24	; 0x800d41 <busy>
	cnt=0;
    3614:	10 92 42 0d 	sts	0x0D42, r1	; 0x800d42 <cnt>
    3618:	08 95       	ret

Disassembly of section .text.block_uplink:

00003512 <block_uplink>:
}

static void block_uplink(){
	cnt++;
    3512:	80 91 42 0d 	lds	r24, 0x0D42	; 0x800d42 <cnt>
    3516:	8f 5f       	subi	r24, 0xFF	; 255
    3518:	80 93 42 0d 	sts	0x0D42, r24	; 0x800d42 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    351c:	86 30       	cpi	r24, 0x06	; 6
    351e:	30 f0       	brcs	.+12     	; 0x352c <block_uplink+0x1a>
		busy=false;
    3520:	10 92 41 0d 	sts	0x0D41, r1	; 0x800d41 <busy>
		TC2_HAL_cancel(subPointer);
    3524:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <subPointer>
    3528:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <TC2_HAL_cancel>
    352c:	08 95       	ret

Disassembly of section .text.LM_join_network:

000038a6 <LM_join_network>:

static void block_uplink();
static void set_block_uplink();

LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    38a6:	0e 94 b4 03 	call	0x768	; 0x768 <JN_join_network>
}
    38aa:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

0000327e <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    327e:	1f 93       	push	r17
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    3286:	90 91 41 0d 	lds	r25, 0x0D41	; 0x800d41 <busy>
    328a:	91 11       	cpse	r25, r1
    328c:	0a c0       	rjmp	.+20     	; 0x32a2 <LM_send_uplink+0x24>
    328e:	16 2f       	mov	r17, r22
    3290:	e9 01       	movw	r28, r18
	set_block_uplink();
    3292:	0e 94 01 1b 	call	0x3602	; 0x3602 <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    3296:	41 2f       	mov	r20, r17
    3298:	be 01       	movw	r22, r28
    329a:	84 e6       	ldi	r24, 0x64	; 100
    329c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SU_send_uplink>
    32a0:	01 c0       	rjmp	.+2      	; 0x32a4 <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    32a2:	83 e0       	ldi	r24, 0x03	; 3
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	1f 91       	pop	r17
    32aa:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

000038ac <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
    38ac:	0e 94 62 14 	call	0x28c4	; 0x28c4 <SC_put_to_sleep>
}
    38b0:	08 95       	ret

Disassembly of section .text.LM_wake_up:

000038b2 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    38b2:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <SC_wake_up>
}
    38b6:	08 95       	ret

Disassembly of section .text.LM_is_free:

00003850 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    3850:	90 91 41 0d 	lds	r25, 0x0D41	; 0x800d41 <busy>
}
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	89 27       	eor	r24, r25
    3858:	08 95       	ret

Disassembly of section .text.tohex:

00001fa4 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    1fa4:	6f 92       	push	r6
    1fa6:	7f 92       	push	r7
    1fa8:	8f 92       	push	r8
    1faa:	ef 92       	push	r14
    1fac:	ff 92       	push	r15
    1fae:	0f 93       	push	r16
    1fb0:	1f 93       	push	r17
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	7c 01       	movw	r14, r24
    1fb8:	3a 01       	movw	r6, r20
    1fba:	86 2e       	mov	r8, r22
    1fbc:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    1fbe:	c0 e0       	ldi	r28, 0x00	; 0
    1fc0:	d0 e0       	ldi	r29, 0x00	; 0
    1fc2:	25 c0       	rjmp	.+74     	; 0x200e <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    1fc4:	a8 2d       	mov	r26, r8
    1fc6:	c3 01       	movw	r24, r6
    1fc8:	8c 0f       	add	r24, r28
    1fca:	9d 1f       	adc	r25, r29
    1fcc:	a1 1d       	adc	r26, r1
    1fce:	d7 fd       	sbrc	r29, 7
    1fd0:	aa 95       	dec	r26
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	24 91       	lpm	r18, Z
    1fd6:	a7 fd       	sbrc	r26, 7
    1fd8:	20 81       	ld	r18, Z
    1fda:	ce 01       	movw	r24, r28
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	1f 92       	push	r1
    1fe2:	2f 93       	push	r18
    1fe4:	2e e1       	ldi	r18, 0x1E	; 30
    1fe6:	32 e0       	ldi	r19, 0x02	; 2
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	4f 93       	push	r20
    1fec:	3f 93       	push	r19
    1fee:	2f 93       	push	r18
    1ff0:	8e 0d       	add	r24, r14
    1ff2:	9f 1d       	adc	r25, r15
    1ff4:	9f 93       	push	r25
    1ff6:	8f 93       	push	r24
    1ff8:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    1ffc:	21 96       	adiw	r28, 0x01	; 1
    1ffe:	8d b7       	in	r24, 0x3d	; 61
    2000:	9e b7       	in	r25, 0x3e	; 62
    2002:	07 96       	adiw	r24, 0x07	; 7
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	9e bf       	out	0x3e, r25	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	8d bf       	out	0x3d, r24	; 61
    200e:	c0 17       	cp	r28, r16
    2010:	d1 07       	cpc	r29, r17
    2012:	c4 f2       	brlt	.-80     	; 0x1fc4 <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	8f 90       	pop	r8
    2022:	7f 90       	pop	r7
    2024:	6f 90       	pop	r6
    2026:	08 95       	ret

Disassembly of section .text.attach_ending:

0000352e <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    352e:	fc 01       	movw	r30, r24
    3530:	01 90       	ld	r0, Z+
    3532:	00 20       	and	r0, r0
    3534:	e9 f7       	brne	.-6      	; 0x3530 <attach_ending+0x2>
    3536:	cf 01       	movw	r24, r30
    3538:	23 e0       	ldi	r18, 0x03	; 3
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	43 e2       	ldi	r20, 0x23	; 35
    353e:	52 e0       	ldi	r21, 0x02	; 2
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	0e 94 c7 18 	call	0x318e	; 0x318e <memcpy>
    3548:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

000030c6 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    30c6:	cf 93       	push	r28
    30c8:	df 93       	push	r29
    30ca:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    30cc:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    30d0:	fe 01       	movw	r30, r28
    30d2:	01 90       	ld	r0, Z+
    30d4:	00 20       	and	r0, r0
    30d6:	e9 f7       	brne	.-6      	; 0x30d2 <cmd_with_ending+0xc>
    30d8:	cf 01       	movw	r24, r30
    30da:	23 e0       	ldi	r18, 0x03	; 3
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	43 e2       	ldi	r20, 0x23	; 35
    30e0:	52 e0       	ldi	r21, 0x02	; 2
    30e2:	60 e0       	ldi	r22, 0x00	; 0
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	0e 94 c7 18 	call	0x318e	; 0x318e <memcpy>
	return strlen(buffer);
    30ea:	be 01       	movw	r22, r28
    30ec:	80 e8       	ldi	r24, 0x80	; 128
    30ee:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
}
    30f2:	df 91       	pop	r29
    30f4:	cf 91       	pop	r28
    30f6:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

00002422 <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    2426:	44 36       	cpi	r20, 0x64	; 100
    2428:	51 05       	cpc	r21, r1
    242a:	61 05       	cpc	r22, r1
    242c:	71 05       	cpc	r23, r1
    242e:	18 f1       	brcs	.+70     	; 0x2476 <sys_sleep_cmd+0x54>
    2430:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    2432:	7f 93       	push	r23
    2434:	6f 93       	push	r22
    2436:	5f 93       	push	r21
    2438:	4f 93       	push	r20
    243a:	86 e2       	ldi	r24, 0x26	; 38
    243c:	92 e0       	ldi	r25, 0x02	; 2
    243e:	a0 e0       	ldi	r26, 0x00	; 0
    2440:	af 93       	push	r26
    2442:	9f 93       	push	r25
    2444:	8f 93       	push	r24
    2446:	80 e3       	ldi	r24, 0x30	; 48
    2448:	92 e0       	ldi	r25, 0x02	; 2
    244a:	a0 e0       	ldi	r26, 0x00	; 0
    244c:	af 93       	push	r26
    244e:	9f 93       	push	r25
    2450:	8f 93       	push	r24
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <sprintf>
    return strlen(buffer);
    245a:	be 01       	movw	r22, r28
    245c:	80 e8       	ldi	r24, 0x80	; 128
    245e:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
    2462:	2d b7       	in	r18, 0x3d	; 61
    2464:	3e b7       	in	r19, 0x3e	; 62
    2466:	24 5f       	subi	r18, 0xF4	; 244
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	3e bf       	out	0x3e, r19	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	2d bf       	out	0x3d, r18	; 61
    2474:	02 c0       	rjmp	.+4      	; 0x247a <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    2476:	8f ef       	ldi	r24, 0xFF	; 255
    2478:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

000027dc <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    27dc:	0f 93       	push	r16
    27de:	1f 93       	push	r17
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    27e6:	2f 93       	push	r18
    27e8:	1f 93       	push	r17
    27ea:	0f 93       	push	r16
    27ec:	6f 93       	push	r22
    27ee:	5f 93       	push	r21
    27f0:	4f 93       	push	r20
    27f2:	87 e3       	ldi	r24, 0x37	; 55
    27f4:	92 e0       	ldi	r25, 0x02	; 2
    27f6:	a0 e0       	ldi	r26, 0x00	; 0
    27f8:	af 93       	push	r26
    27fa:	9f 93       	push	r25
    27fc:	8f 93       	push	r24
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <sprintf>
    return strlen(buffer);
    2806:	be 01       	movw	r22, r28
    2808:	80 e8       	ldi	r24, 0x80	; 128
    280a:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
    280e:	2d b7       	in	r18, 0x3d	; 61
    2810:	3e b7       	in	r19, 0x3e	; 62
    2812:	25 5f       	subi	r18, 0xF5	; 245
    2814:	3f 4f       	sbci	r19, 0xFF	; 255
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	3e bf       	out	0x3e, r19	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	2d bf       	out	0x3d, r18	; 61
}
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00002a36 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    2a36:	cf 92       	push	r12
    2a38:	df 92       	push	r13
    2a3a:	ef 92       	push	r14
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    2a46:	6b 01       	movw	r12, r22
    2a48:	80 e8       	ldi	r24, 0x80	; 128
    2a4a:	e8 2e       	mov	r14, r24
    2a4c:	8e 2d       	mov	r24, r14
    2a4e:	b6 01       	movw	r22, r12
    2a50:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
    2a54:	40 97       	sbiw	r24, 0x10	; 16
    2a56:	49 f4       	brne	.+18     	; 0x2a6a <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    2a58:	2e 2d       	mov	r18, r14
    2a5a:	86 01       	movw	r16, r12
    2a5c:	4d e3       	ldi	r20, 0x3D	; 61
    2a5e:	52 e0       	ldi	r21, 0x02	; 2
    2a60:	60 e0       	ldi	r22, 0x00	; 0
    2a62:	ce 01       	movw	r24, r28
    2a64:	0e 94 ee 13 	call	0x27dc	; 0x27dc <mac_set_parameter>
    2a68:	02 c0       	rjmp	.+4      	; 0x2a6e <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    2a6a:	8f ef       	ldi	r24, 0xFF	; 255
    2a6c:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	ef 90       	pop	r14
    2a78:	df 90       	pop	r13
    2a7a:	cf 90       	pop	r12
    2a7c:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00002a7e <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    2a7e:	cf 92       	push	r12
    2a80:	df 92       	push	r13
    2a82:	ef 92       	push	r14
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    2a8e:	6b 01       	movw	r12, r22
    2a90:	80 e8       	ldi	r24, 0x80	; 128
    2a92:	e8 2e       	mov	r14, r24
    2a94:	8e 2d       	mov	r24, r14
    2a96:	b6 01       	movw	r22, r12
    2a98:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
    2a9c:	40 97       	sbiw	r24, 0x10	; 16
    2a9e:	49 f4       	brne	.+18     	; 0x2ab2 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    2aa0:	2e 2d       	mov	r18, r14
    2aa2:	86 01       	movw	r16, r12
    2aa4:	4c e4       	ldi	r20, 0x4C	; 76
    2aa6:	52 e0       	ldi	r21, 0x02	; 2
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	ce 01       	movw	r24, r28
    2aac:	0e 94 ee 13 	call	0x27dc	; 0x27dc <mac_set_parameter>
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    2ab2:	8f ef       	ldi	r24, 0xFF	; 255
    2ab4:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
    2ac4:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00002ac6 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    2ac6:	cf 92       	push	r12
    2ac8:	df 92       	push	r13
    2aca:	ef 92       	push	r14
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    2ad6:	6b 01       	movw	r12, r22
    2ad8:	80 e8       	ldi	r24, 0x80	; 128
    2ada:	e8 2e       	mov	r14, r24
    2adc:	8e 2d       	mov	r24, r14
    2ade:	b6 01       	movw	r22, r12
    2ae0:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
    2ae4:	80 97       	sbiw	r24, 0x20	; 32
    2ae6:	49 f4       	brne	.+18     	; 0x2afa <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    2ae8:	2e 2d       	mov	r18, r14
    2aea:	86 01       	movw	r16, r12
    2aec:	4b e5       	ldi	r20, 0x5B	; 91
    2aee:	52 e0       	ldi	r21, 0x02	; 2
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	ce 01       	movw	r24, r28
    2af4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <mac_set_parameter>
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    2afa:	8f ef       	ldi	r24, 0xFF	; 255
    2afc:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	1f 91       	pop	r17
    2b04:	0f 91       	pop	r16
    2b06:	ef 90       	pop	r14
    2b08:	df 90       	pop	r13
    2b0a:	cf 90       	pop	r12
    2b0c:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

000031c0 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    31c0:	0f 93       	push	r16
    31c2:	1f 93       	push	r17
	if(state==0){
    31c4:	61 11       	cpse	r22, r1
    31c6:	09 c0       	rjmp	.+18     	; 0x31da <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    31c8:	0a e6       	ldi	r16, 0x6A	; 106
    31ca:	12 e0       	ldi	r17, 0x02	; 2
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	4e e6       	ldi	r20, 0x6E	; 110
    31d0:	52 e0       	ldi	r21, 0x02	; 2
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <mac_set_parameter>
    31d8:	08 c0       	rjmp	.+16     	; 0x31ea <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    31da:	0a e7       	ldi	r16, 0x7A	; 122
    31dc:	12 e0       	ldi	r17, 0x02	; 2
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	4e e6       	ldi	r20, 0x6E	; 110
    31e2:	52 e0       	ldi	r21, 0x02	; 2
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <mac_set_parameter>
	}
}
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00001a34 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    1a34:	df 92       	push	r13
    1a36:	ef 92       	push	r14
    1a38:	ff 92       	push	r15
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	c5 56       	subi	r28, 0x65	; 101
    1a48:	d1 09       	sbc	r29, r1
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    1a56:	9f ef       	ldi	r25, 0xFF	; 255
    1a58:	96 0f       	add	r25, r22
    1a5a:	9f 3d       	cpi	r25, 0xDF	; 223
    1a5c:	68 f5       	brcc	.+90     	; 0x1ab8 <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    1a5e:	9f ef       	ldi	r25, 0xFF	; 255
    1a60:	92 0f       	add	r25, r18
    1a62:	92 33       	cpi	r25, 0x32	; 50
    1a64:	60 f5       	brcc	.+88     	; 0x1abe <mac_tx_confirmed+0x8a>
    1a66:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	60 e8       	ldi	r22, 0x80	; 128
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	7c 01       	movw	r14, r24
    1a72:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    1a76:	c7 01       	movw	r24, r14
    1a78:	a0 e8       	ldi	r26, 0x80	; 128
    1a7a:	af 93       	push	r26
    1a7c:	9f 93       	push	r25
    1a7e:	ef 92       	push	r14
    1a80:	1f 92       	push	r1
    1a82:	df 92       	push	r13
    1a84:	8d e7       	ldi	r24, 0x7D	; 125
    1a86:	92 e0       	ldi	r25, 0x02	; 2
    1a88:	a0 e0       	ldi	r26, 0x00	; 0
    1a8a:	af 93       	push	r26
    1a8c:	9f 93       	push	r25
    1a8e:	8f 93       	push	r24
    1a90:	88 e8       	ldi	r24, 0x88	; 136
    1a92:	92 e0       	ldi	r25, 0x02	; 2
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	af 93       	push	r26
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	1f 93       	push	r17
    1a9e:	0f 93       	push	r16
    1aa0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <sprintf>
    
	
    return strlen(buffer);
    1aa4:	b8 01       	movw	r22, r16
    1aa6:	80 e8       	ldi	r24, 0x80	; 128
    1aa8:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    1ab8:	8f ef       	ldi	r24, 0xFF	; 255
    1aba:	9f ef       	ldi	r25, 0xFF	; 255
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    1ac2:	cb 59       	subi	r28, 0x9B	; 155
    1ac4:	df 4f       	sbci	r29, 0xFF	; 255
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	ff 90       	pop	r15
    1ada:	ef 90       	pop	r14
    1adc:	df 90       	pop	r13
    1ade:	08 95       	ret

Disassembly of section .text.beginsWidth:

000029a4 <beginsWidth>:
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
	
	return SU_FATAL_ERROR;
}

static bool beginsWidth(const char *s1, const char *s2){
    29a4:	6f 92       	push	r6
    29a6:	7f 92       	push	r7
    29a8:	8f 92       	push	r8
    29aa:	cf 92       	push	r12
    29ac:	df 92       	push	r13
    29ae:	ef 92       	push	r14
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	3b 01       	movw	r6, r22
    29b6:	88 2e       	mov	r8, r24
    29b8:	69 01       	movw	r12, r18
    29ba:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    29bc:	84 2f       	mov	r24, r20
    29be:	b9 01       	movw	r22, r18
    29c0:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
    29c4:	8c 01       	movw	r16, r24
    29c6:	4e 2d       	mov	r20, r14
    29c8:	96 01       	movw	r18, r12
    29ca:	88 2d       	mov	r24, r8
    29cc:	b3 01       	movw	r22, r6
    29ce:	0e 94 a9 11 	call	0x2352	; 0x2352 <strncmp>
    29d2:	21 e0       	ldi	r18, 0x01	; 1
    29d4:	89 2b       	or	r24, r25
    29d6:	09 f0       	breq	.+2      	; 0x29da <beginsWidth+0x36>
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	82 2f       	mov	r24, r18
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	ef 90       	pop	r14
    29e2:	df 90       	pop	r13
    29e4:	cf 90       	pop	r12
    29e6:	8f 90       	pop	r8
    29e8:	7f 90       	pop	r7
    29ea:	6f 90       	pop	r6
    29ec:	08 95       	ret

Disassembly of section .text.decode_tx_response:

0000269e <decode_tx_response>:
			break;
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
    269e:	cf 92       	push	r12
    26a0:	df 92       	push	r13
    26a2:	ef 92       	push	r14
    26a4:	6b 01       	movw	r12, r22
    26a6:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    26a8:	29 ec       	ldi	r18, 0xC9	; 201
    26aa:	32 e0       	ldi	r19, 0x02	; 2
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strcmp>
    26b2:	89 2b       	or	r24, r25
    26b4:	a1 f0       	breq	.+40     	; 0x26de <decode_tx_response+0x40>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    26b6:	24 ed       	ldi	r18, 0xD4	; 212
    26b8:	32 e0       	ldi	r19, 0x02	; 2
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	8e 2d       	mov	r24, r14
    26be:	b6 01       	movw	r22, r12
    26c0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strcmp>
    26c4:	89 2b       	or	r24, r25
    26c6:	69 f0       	breq	.+26     	; 0x26e2 <decode_tx_response+0x44>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    26c8:	2c ed       	ldi	r18, 0xDC	; 220
    26ca:	32 e0       	ldi	r19, 0x02	; 2
    26cc:	40 e0       	ldi	r20, 0x00	; 0
    26ce:	8e 2d       	mov	r24, r14
    26d0:	b6 01       	movw	r22, r12
    26d2:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <beginsWidth>
    26d6:	88 23       	and	r24, r24
    26d8:	31 f0       	breq	.+12     	; 0x26e6 <decode_tx_response+0x48>
    26da:	83 e0       	ldi	r24, 0x03	; 3
    26dc:	05 c0       	rjmp	.+10     	; 0x26e8 <decode_tx_response+0x4a>
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    26de:	87 e0       	ldi	r24, 0x07	; 7
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <decode_tx_response+0x4a>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    26e2:	88 e0       	ldi	r24, 0x08	; 8
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <decode_tx_response+0x4a>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
	
	return SU_FATAL_ERROR;
    26e6:	86 e0       	ldi	r24, 0x06	; 6
}
    26e8:	ef 90       	pop	r14
    26ea:	df 90       	pop	r13
    26ec:	cf 90       	pop	r12
    26ee:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

000012a6 <SU_send_uplink>:

static SU_STATES decode_tx_response(const char msg[]);
static bool beginsWidth(const char *s1, const char *s2);


LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    12a6:	df 92       	push	r13
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	28 97       	sbiw	r28, 0x08	; 8
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	d8 2e       	mov	r13, r24
    12c6:	7b 01       	movw	r14, r22
    12c8:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    12ca:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    12cc:	e1 2f       	mov	r30, r17
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	e9 30       	cpi	r30, 0x09	; 9
    12d2:	f1 05       	cpc	r31, r1
    12d4:	d8 f7       	brcc	.-10     	; 0x12cc <SU_send_uplink+0x26>
    12d6:	e5 5b       	subi	r30, 0xB5	; 181
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__tablejump2__>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    12de:	20 2f       	mov	r18, r16
    12e0:	a7 01       	movw	r20, r14
    12e2:	6d 2d       	mov	r22, r13
    12e4:	8c e2       	ldi	r24, 0x2C	; 44
    12e6:	92 e0       	ldi	r25, 0x02	; 2
    12e8:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <mac_tx_confirmed>
				attach_ending(lm_msg);
    12ec:	8c e2       	ldi	r24, 0x2C	; 44
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	0e 94 97 1a 	call	0x352e	; 0x352e <attach_ending>
				util_transmit_msg(lm_msg);
    12f4:	8c e2       	ldi	r24, 0x2C	; 44
    12f6:	92 e0       	ldi	r25, 0x02	; 2
    12f8:	0e 94 a5 1a 	call	0x354a	; 0x354a <util_transmit_msg>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    12fc:	41 e0       	ldi	r20, 0x01	; 1
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	62 e0       	ldi	r22, 0x02	; 2
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    130c:	23 ee       	ldi	r18, 0xE3	; 227
    130e:	32 e0       	ldi	r19, 0x02	; 2
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	ce 01       	movw	r24, r28
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    131c:	15 e0       	ldi	r17, 0x05	; 5
			break;
    131e:	d6 cf       	rjmp	.-84     	; 0x12cc <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	64 e0       	ldi	r22, 0x04	; 4
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	ce 01       	movw	r24, r28
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    1330:	26 ee       	ldi	r18, 0xE6	; 230
    1332:	32 e0       	ldi	r19, 0x02	; 2
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	ce 01       	movw	r24, r28
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	0e 94 00 1c 	call	0x3800	; 0x3800 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1340:	15 e0       	ldi	r17, 0x05	; 5
			break;
    1342:	c4 cf       	rjmp	.-120    	; 0x12cc <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
    1344:	6c e2       	ldi	r22, 0x2C	; 44
    1346:	72 e0       	ldi	r23, 0x02	; 2
    1348:	80 e8       	ldi	r24, 0x80	; 128
    134a:	0e 94 4f 13 	call	0x269e	; 0x269e <decode_tx_response>
    134e:	18 2f       	mov	r17, r24
			break;
    1350:	bd cf       	rjmp	.-134    	; 0x12cc <SU_send_uplink+0x26>
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
			
			case SU_NO_ACK:
				return LM_STATUS_MAC_ERR;
    1352:	85 e0       	ldi	r24, 0x05	; 5
    1354:	16 c0       	rjmp	.+44     	; 0x1382 <SU_send_uplink+0xdc>
			
			case SU_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;	
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <SU_send_uplink+0xdc>
			
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    135a:	0e 94 c5 1b 	call	0x378a	; 0x378a <uart0_hal_message_ready>
    135e:	88 23       	and	r24, r24
    1360:	09 f4       	brne	.+2      	; 0x1364 <SU_send_uplink+0xbe>
    1362:	b4 cf       	rjmp	.-152    	; 0x12cc <SU_send_uplink+0x26>
					util_read_msg(lm_msg);
    1364:	8c e2       	ldi	r24, 0x2C	; 44
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    136c:	6c e2       	ldi	r22, 0x2C	; 44
    136e:	72 e0       	ldi	r23, 0x02	; 2
    1370:	ce 01       	movw	r24, r28
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	0e 94 40 12 	call	0x2480	; 0x2480 <util_matchMessage>
    1378:	18 2f       	mov	r17, r24
    137a:	a8 cf       	rjmp	.-176    	; 0x12cc <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
			break;
			
			case SU_HANDLE_DOWNLINK:
				return LM_STATUS_SUCCESS;
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
    1380:	83 e0       	ldi	r24, 0x03	; 3
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    1382:	28 96       	adiw	r28, 0x08	; 8
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	df 90       	pop	r13
    139c:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

000028c4 <SC_put_to_sleep>:
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	5c e5       	ldi	r21, 0x5C	; 92
    28c8:	66 e2       	ldi	r22, 0x26	; 38
    28ca:	75 e0       	ldi	r23, 0x05	; 5
    28cc:	8c e2       	ldi	r24, 0x2C	; 44
    28ce:	92 e0       	ldi	r25, 0x02	; 2
    28d0:	0e 94 11 12 	call	0x2422	; 0x2422 <sys_sleep_cmd>
	attach_ending(lm_msg);
    28d4:	8c e2       	ldi	r24, 0x2C	; 44
    28d6:	92 e0       	ldi	r25, 0x02	; 2
    28d8:	0e 94 97 1a 	call	0x352e	; 0x352e <attach_ending>
	util_transmit_msg(lm_msg);
    28dc:	8c e2       	ldi	r24, 0x2C	; 44
    28de:	92 e0       	ldi	r25, 0x02	; 2
    28e0:	0e 94 a5 1a 	call	0x354a	; 0x354a <util_transmit_msg>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    28e4:	0e 94 c5 1b 	call	0x378a	; 0x378a <uart0_hal_message_ready>
    28e8:	88 23       	and	r24, r24
    28ea:	e1 f3       	breq	.-8      	; 0x28e4 <SC_put_to_sleep+0x20>
	
	util_read_msg(lm_msg);
    28ec:	8c e2       	ldi	r24, 0x2C	; 44
    28ee:	92 e0       	ldi	r25, 0x02	; 2
    28f0:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    28f4:	6c e2       	ldi	r22, 0x2C	; 44
    28f6:	72 e0       	ldi	r23, 0x02	; 2
    28f8:	80 e8       	ldi	r24, 0x80	; 128
    28fa:	2a e1       	ldi	r18, 0x1A	; 26
    28fc:	33 e0       	ldi	r19, 0x03	; 3
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strcmp>
    2904:	89 2b       	or	r24, r25
    2906:	11 f4       	brne	.+4      	; 0x290c <SC_put_to_sleep+0x48>
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	08 95       	ret
	return LM_STATUS_ERROR;
    290c:	81 e0       	ldi	r24, 0x01	; 1
}
    290e:	08 95       	ret

Disassembly of section .text.SC_wake_up:

000030f8 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    30f8:	85 e5       	ldi	r24, 0x55	; 85
    30fa:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    30fe:	0e 94 c5 1b 	call	0x378a	; 0x378a <uart0_hal_message_ready>
    3102:	88 23       	and	r24, r24
    3104:	e1 f3       	breq	.-8      	; 0x30fe <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
    3106:	8c e2       	ldi	r24, 0x2C	; 44
    3108:	92 e0       	ldi	r25, 0x02	; 2
    310a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    310e:	6c e2       	ldi	r22, 0x2C	; 44
    3110:	72 e0       	ldi	r23, 0x02	; 2
    3112:	80 e8       	ldi	r24, 0x80	; 128
    3114:	2a e1       	ldi	r18, 0x1A	; 26
    3116:	33 e0       	ldi	r19, 0x03	; 3
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strcmp>
    311e:	89 2b       	or	r24, r25
    3120:	11 f4       	brne	.+4      	; 0x3126 <SC_wake_up+0x2e>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	08 95       	ret
	return LM_STATUS_ERROR;
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	08 95       	ret

Disassembly of section .text.LM_strbeginswith:

00002c26 <LM_strbeginswith>:
	}
	
	return LM_STATUS_FATAL_ERROR;
}

static bool LM_strbeginswith(char *s1, const char *s2){
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	ec 01       	movw	r28, r24
    2c36:	6a 01       	movw	r12, r20
    2c38:	e6 2e       	mov	r14, r22
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    2c3a:	86 2f       	mov	r24, r22
    2c3c:	ba 01       	movw	r22, r20
    2c3e:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
    2c42:	8c 01       	movw	r16, r24
    2c44:	be 01       	movw	r22, r28
    2c46:	80 e8       	ldi	r24, 0x80	; 128
    2c48:	4e 2d       	mov	r20, r14
    2c4a:	96 01       	movw	r18, r12
    2c4c:	0e 94 a9 11 	call	0x2352	; 0x2352 <strncmp>
    2c50:	21 e0       	ldi	r18, 0x01	; 1
    2c52:	89 2b       	or	r24, r25
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <LM_strbeginswith+0x32>
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	82 2f       	mov	r24, r18
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	ef 90       	pop	r14
    2c64:	df 90       	pop	r13
    2c66:	cf 90       	pop	r12
    2c68:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

000037f4 <util_setPendingStates>:




void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    37f4:	fc 01       	movw	r30, r24
    37f6:	71 83       	std	Z+1, r23	; 0x01
    37f8:	60 83       	st	Z, r22
	sd->failure_state=failed;
    37fa:	53 83       	std	Z+3, r21	; 0x03
    37fc:	42 83       	std	Z+2, r20	; 0x02
    37fe:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

00003800 <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    3800:	fc 01       	movw	r30, r24
    3802:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    3804:	25 83       	std	Z+5, r18	; 0x05
    3806:	36 83       	std	Z+6, r19	; 0x06
    3808:	47 83       	std	Z+7, r20	; 0x07
    380a:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00002480 <util_matchMessage>:
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	ec 01       	movw	r28, r24
    2486:	fb 01       	movw	r30, r22
	switch(sd->matchCase){
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	91 30       	cpi	r25, 0x01	; 1
    248c:	91 f0       	breq	.+36     	; 0x24b2 <util_matchMessage+0x32>
    248e:	18 f0       	brcs	.+6      	; 0x2496 <util_matchMessage+0x16>
    2490:	92 30       	cpi	r25, 0x02	; 2
    2492:	e9 f0       	breq	.+58     	; 0x24ce <util_matchMessage+0x4e>
    2494:	1f c0       	rjmp	.+62     	; 0x24d4 <util_matchMessage+0x54>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    2496:	2d 81       	ldd	r18, Y+5	; 0x05
    2498:	3e 81       	ldd	r19, Y+6	; 0x06
    249a:	4f 81       	ldd	r20, Y+7	; 0x07
    249c:	80 e8       	ldi	r24, 0x80	; 128
    249e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strcmp>
    24a2:	89 2b       	or	r24, r25
    24a4:	19 f4       	brne	.+6      	; 0x24ac <util_matchMessage+0x2c>
    24a6:	88 81       	ld	r24, Y
    24a8:	99 81       	ldd	r25, Y+1	; 0x01
    24aa:	16 c0       	rjmp	.+44     	; 0x24d8 <util_matchMessage+0x58>
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	9b 81       	ldd	r25, Y+3	; 0x03
    24b0:	13 c0       	rjmp	.+38     	; 0x24d8 <util_matchMessage+0x58>

		case LM_BEGINS_WITH:
		return LM_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    24b2:	4d 81       	ldd	r20, Y+5	; 0x05
    24b4:	5e 81       	ldd	r21, Y+6	; 0x06
    24b6:	6f 81       	ldd	r22, Y+7	; 0x07
    24b8:	cf 01       	movw	r24, r30
    24ba:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LM_strbeginswith>
    24be:	88 23       	and	r24, r24
    24c0:	19 f0       	breq	.+6      	; 0x24c8 <util_matchMessage+0x48>
    24c2:	88 81       	ld	r24, Y
    24c4:	99 81       	ldd	r25, Y+1	; 0x01
    24c6:	08 c0       	rjmp	.+16     	; 0x24d8 <util_matchMessage+0x58>
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	9b 81       	ldd	r25, Y+3	; 0x03
    24cc:	05 c0       	rjmp	.+10     	; 0x24d8 <util_matchMessage+0x58>

		case LM_NO_TEST:
		return sd->success_state;
    24ce:	88 81       	ld	r24, Y
    24d0:	99 81       	ldd	r25, Y+1	; 0x01
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <util_matchMessage+0x58>
		default:
		return sd->failure_state;
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

0000354a <util_transmit_msg>:

void util_transmit_msg(char msg[]){
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    3550:	bc 01       	movw	r22, r24
    3552:	80 e8       	ldi	r24, 0x80	; 128
    3554:	0e 94 56 19 	call	0x32ac	; 0x32ac <strlen>
    3558:	68 2f       	mov	r22, r24
    355a:	ce 01       	movw	r24, r28
    355c:	0e 94 2f 18 	call	0x305e	; 0x305e <uart0_hal_send_message>
}
    3560:	df 91       	pop	r29
    3562:	cf 91       	pop	r28
    3564:	08 95       	ret

Disassembly of section .text.util_read_msg:

000038b8 <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str((uint8_t*) msg);
    38b8:	0e 94 81 19 	call	0x3302	; 0x3302 <uart0_hal_read_message_as_str>
    38bc:	08 95       	ret

Disassembly of section .text.util_parse_err:

000025f2 <util_parse_err>:
}

LM_STATUS util_parse_err(char *msg){
    25f2:	cf 92       	push	r12
    25f4:	df 92       	push	r13
    25f6:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    25f8:	6c 01       	movw	r12, r24
    25fa:	20 e8       	ldi	r18, 0x80	; 128
    25fc:	e2 2e       	mov	r14, r18
    25fe:	20 ef       	ldi	r18, 0xF0	; 240
    2600:	32 e0       	ldi	r19, 0x02	; 2
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	8e 2d       	mov	r24, r14
    2606:	b6 01       	movw	r22, r12
    2608:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strcmp>
    260c:	89 2b       	or	r24, r25
    260e:	a1 f0       	breq	.+40     	; 0x2638 <util_parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    2610:	2b ef       	ldi	r18, 0xFB	; 251
    2612:	32 e0       	ldi	r19, 0x02	; 2
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	8e 2d       	mov	r24, r14
    2618:	b6 01       	movw	r22, r12
    261a:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strcmp>
    261e:	89 2b       	or	r24, r25
    2620:	69 f0       	breq	.+26     	; 0x263c <util_parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    2622:	22 e0       	ldi	r18, 0x02	; 2
    2624:	33 e0       	ldi	r19, 0x03	; 3
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	8e 2d       	mov	r24, r14
    262a:	b6 01       	movw	r22, r12
    262c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strcmp>
    2630:	89 2b       	or	r24, r25
    2632:	31 f4       	brne	.+12     	; 0x2640 <util_parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    2634:	84 e0       	ldi	r24, 0x04	; 4
    2636:	05 c0       	rjmp	.+10     	; 0x2642 <util_parse_err+0x50>
	uart0_hal_read_message_as_str((uint8_t*) msg);
}

LM_STATUS util_parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    2638:	83 e0       	ldi	r24, 0x03	; 3
    263a:	03 c0       	rjmp	.+6      	; 0x2642 <util_parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    263c:	83 e0       	ldi	r24, 0x03	; 3
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <util_parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    2640:	82 e0       	ldi	r24, 0x02	; 2
}
    2642:	ef 90       	pop	r14
    2644:	df 90       	pop	r13
    2646:	cf 90       	pop	r12
    2648:	08 95       	ret

Disassembly of section .text.get_group_id:

000038be <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    38be:	80 91 43 0d 	lds	r24, 0x0D43	; 0x800d43 <_groupId>
    38c2:	08 95       	ret

Disassembly of section .text.set_group_id:

000038c4 <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    38c4:	80 93 43 0d 	sts	0x0D43, r24	; 0x800d43 <_groupId>
    38c8:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

0000312a <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	cf 93       	push	r28
    3130:	df 93       	push	r29
    3132:	8c 01       	movw	r16, r24
    3134:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    3136:	0e 94 5f 1c 	call	0x38be	; 0x38be <get_group_id>
    313a:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    313c:	2d 2f       	mov	r18, r29
    313e:	a8 01       	movw	r20, r16
    3140:	68 2f       	mov	r22, r24
    3142:	84 ef       	ldi	r24, 0xF4	; 244
    3144:	92 e0       	ldi	r25, 0x02	; 2
    3146:	0e 94 05 06 	call	0xc0a	; 0xc0a <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	8c 0f       	add	r24, r28
    314e:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <set_group_id>
}
    3152:	df 91       	pop	r29
    3154:	cf 91       	pop	r28
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00002278 <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    2278:	ef 92       	push	r14
    227a:	ff 92       	push	r15
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	2a 97       	sbiw	r28, 0x0a	; 10
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	18 2f       	mov	r17, r24
    2294:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    2296:	9e 01       	movw	r18, r28
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	ab 01       	movw	r20, r22
    229e:	68 2f       	mov	r22, r24
    22a0:	84 ef       	ldi	r24, 0xF4	; 244
    22a2:	92 e0       	ldi	r25, 0x02	; 2
    22a4:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    22a8:	9e 01       	movw	r18, r28
    22aa:	27 5f       	subi	r18, 0xF7	; 247
    22ac:	3f 4f       	sbci	r19, 0xFF	; 255
    22ae:	ae 01       	movw	r20, r28
    22b0:	49 5f       	subi	r20, 0xF9	; 249
    22b2:	5f 4f       	sbci	r21, 0xFF	; 255
    22b4:	61 2f       	mov	r22, r17
    22b6:	84 ef       	ldi	r24, 0xF4	; 244
    22b8:	92 e0       	ldi	r25, 0x02	; 2
    22ba:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    22be:	29 85       	ldd	r18, Y+9	; 0x09
    22c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    22c2:	4f 81       	ldd	r20, Y+7	; 0x07
    22c4:	58 85       	ldd	r21, Y+8	; 0x08
    22c6:	b7 01       	movw	r22, r14
    22c8:	ce 01       	movw	r24, r28
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <mrpp_data_add_int16>
}
    22d0:	2a 96       	adiw	r28, 0x0a	; 10
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00003370 <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    3376:	84 ef       	ldi	r24, 0xF4	; 244
    3378:	92 e0       	ldi	r25, 0x02	; 2
    337a:	0e 94 10 19 	call	0x3220	; 0x3220 <mrpp_state_is_body_ready>
    337e:	88 83       	st	Y, r24
    3380:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    3382:	89 2f       	mov	r24, r25
    3384:	80 95       	com	r24
    
}
    3386:	88 1f       	adc	r24, r24
    3388:	88 27       	eor	r24, r24
    338a:	88 1f       	adc	r24, r24
    338c:	df 91       	pop	r29
    338e:	cf 91       	pop	r28
    3390:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00001df6 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    1df6:	af 92       	push	r10
    1df8:	bf 92       	push	r11
    1dfa:	cf 92       	push	r12
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <MRPP_get_ready_body_package+0x16>
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <MRPP_get_ready_body_package+0x18>
    1e0e:	1f 92       	push	r1
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	6b 01       	movw	r12, r22
    1e16:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    1e18:	9e 01       	movw	r18, r28
    1e1a:	2b 5f       	subi	r18, 0xFB	; 251
    1e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1e:	79 01       	movw	r14, r18
    1e20:	8e 01       	movw	r16, r28
    1e22:	0d 5f       	subi	r16, 0xFD	; 253
    1e24:	1f 4f       	sbci	r17, 0xFF	; 255
    1e26:	23 50       	subi	r18, 0x03	; 3
    1e28:	31 09       	sbc	r19, r1
    1e2a:	ae 01       	movw	r20, r28
    1e2c:	4f 5f       	subi	r20, 0xFF	; 255
    1e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e30:	bc 01       	movw	r22, r24
    1e32:	84 ef       	ldi	r24, 0xF4	; 244
    1e34:	92 e0       	ldi	r25, 0x02	; 2
    1e36:	0e 94 c6 08 	call	0x118c	; 0x118c <mrpp_state_get_ready_body>
    
    if(!res) return false;
    1e3a:	88 23       	and	r24, r24
    1e3c:	b1 f0       	breq	.+44     	; 0x1e6a <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    1e3e:	4d 81       	ldd	r20, Y+5	; 0x05
    1e40:	83 e0       	ldi	r24, 0x03	; 3
    1e42:	84 0f       	add	r24, r20
    1e44:	f5 01       	movw	r30, r10
    1e46:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    1e48:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <state>
    1e4c:	f6 01       	movw	r30, r12
    1e4e:	80 83       	st	Z, r24
    package[1]=subId;
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	6b 81       	ldd	r22, Y+3	; 0x03
    1e5c:	7c 81       	ldd	r23, Y+4	; 0x04
    1e5e:	c6 01       	movw	r24, r12
    1e60:	03 96       	adiw	r24, 0x03	; 3
    1e62:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <mrpp_data_get>

    return true;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    1e6a:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	bf 90       	pop	r11
    1e88:	af 90       	pop	r10
    1e8a:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

0000380c <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    380c:	bc 01       	movw	r22, r24
    380e:	84 ef       	ldi	r24, 0xF4	; 244
    3810:	92 e0       	ldi	r25, 0x02	; 2
    3812:	0e 94 4d 1a 	call	0x349a	; 0x349a <mrpp_state_set_body_sent>
    3816:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00003392 <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3398:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <state>
    339c:	fc 01       	movw	r30, r24
    339e:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    33a0:	bf 01       	movw	r22, r30
    33a2:	84 ef       	ldi	r24, 0xF4	; 244
    33a4:	92 e0       	ldi	r25, 0x02	; 2
    33a6:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <mrpp_state_get_header>
    *package_length+=1;
    33aa:	8f 5f       	subi	r24, 0xFF	; 255
    33ac:	88 83       	st	Y, r24
}
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

000033b4 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    33b4:	cf 93       	push	r28
    33b6:	df 93       	push	r29
    33b8:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    33ba:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <state>
    33be:	fc 01       	movw	r30, r24
    33c0:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    33c2:	bf 01       	movw	r22, r30
    33c4:	84 ef       	ldi	r24, 0xF4	; 244
    33c6:	92 e0       	ldi	r25, 0x02	; 2
    33c8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <mrpp_state_get_tail>
    *package_length+=1;
    33cc:	8f 5f       	subi	r24, 0xFF	; 255
    33ce:	88 83       	st	Y, r24
}
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

0000385a <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    385a:	84 ef       	ldi	r24, 0xF4	; 244
    385c:	92 e0       	ldi	r25, 0x02	; 2
    385e:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <mrpp_state_all_bodies_sent>
}
    3862:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00001e8c <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    1e8c:	cf 92       	push	r12
    1e8e:	df 92       	push	r13
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    1e9c:	94 2f       	mov	r25, r20
    1e9e:	0c c0       	rjmp	.+24     	; 0x1eb8 <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    1ea0:	c9 2f       	mov	r28, r25
    1ea2:	d0 e0       	ldi	r29, 0x00	; 0
    1ea4:	e4 1b       	sub	r30, r20
    1ea6:	f5 0b       	sbc	r31, r21
    1ea8:	ea 0f       	add	r30, r26
    1eaa:	fb 1f       	adc	r31, r27
    1eac:	80 81       	ld	r24, Z
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e2 57       	subi	r30, 0x72	; 114
    1eb2:	fc 4f       	sbci	r31, 0xFC	; 252
    1eb4:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    1eb6:	9f 5f       	subi	r25, 0xFF	; 255
    1eb8:	e9 2f       	mov	r30, r25
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	6a 01       	movw	r12, r20
    1ebe:	86 e0       	ldi	r24, 0x06	; 6
    1ec0:	c8 0e       	add	r12, r24
    1ec2:	d1 1c       	adc	r13, r1
    1ec4:	ec 15       	cp	r30, r12
    1ec6:	fd 05       	cpc	r31, r13
    1ec8:	58 f3       	brcs	.-42     	; 0x1ea0 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    1eca:	26 50       	subi	r18, 0x06	; 6
    1ecc:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    1ece:	36 95       	lsr	r19
    1ed0:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    1ed2:	49 5f       	subi	r20, 0xF9	; 249
    1ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    1ed6:	a0 e0       	ldi	r26, 0x00	; 0
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	16 c0       	rjmp	.+44     	; 0x1f08 <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    1edc:	cd 01       	movw	r24, r26
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	f6 01       	movw	r30, r12
    1ee4:	e8 0f       	add	r30, r24
    1ee6:	f9 1f       	adc	r31, r25
    1ee8:	8b 01       	movw	r16, r22
    1eea:	08 0f       	add	r16, r24
    1eec:	19 1f       	adc	r17, r25
    1eee:	e8 01       	movw	r28, r16
    1ef0:	f9 80       	ldd	r15, Y+1	; 0x01
    1ef2:	e2 57       	subi	r30, 0x72	; 114
    1ef4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ef6:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    1ef8:	84 0f       	add	r24, r20
    1efa:	95 1f       	adc	r25, r21
    1efc:	18 81       	ld	r17, Y
    1efe:	fc 01       	movw	r30, r24
    1f00:	e2 57       	subi	r30, 0x72	; 114
    1f02:	fc 4f       	sbci	r31, 0xFC	; 252
    1f04:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    1f06:	11 96       	adiw	r26, 0x01	; 1
    1f08:	a2 17       	cp	r26, r18
    1f0a:	b3 07       	cpc	r27, r19
    1f0c:	38 f3       	brcs	.-50     	; 0x1edc <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	ff 90       	pop	r15
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

000031f0 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	0c c0       	rjmp	.+24     	; 0x3214 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    31fc:	de 01       	movw	r26, r28
    31fe:	a2 0f       	add	r26, r18
    3200:	b3 1f       	adc	r27, r19
    3202:	f9 01       	movw	r30, r18
    3204:	e6 0f       	add	r30, r22
    3206:	f7 1f       	adc	r31, r23
    3208:	e2 57       	subi	r30, 0x72	; 114
    320a:	fc 4f       	sbci	r31, 0xFC	; 252
    320c:	90 81       	ld	r25, Z
    320e:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    3210:	2f 5f       	subi	r18, 0xFF	; 255
    3212:	3f 4f       	sbci	r19, 0xFF	; 255
    3214:	24 17       	cp	r18, r20
    3216:	35 07       	cpc	r19, r21
    3218:	88 f3       	brcs	.-30     	; 0x31fc <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	08 95       	ret

Disassembly of section .text.add_data_types:

0000156c <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	dc 01       	movw	r26, r24
    157e:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1580:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    1582:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    1584:	c1 2c       	mov	r12, r1
    1586:	d1 2c       	mov	r13, r1
    1588:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    158a:	4a c0       	rjmp	.+148    	; 0x1620 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    158c:	29 2f       	mov	r18, r25
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	f9 01       	movw	r30, r18
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	22 0f       	add	r18, r18
    1598:	33 1f       	adc	r19, r19
    159a:	22 0f       	add	r18, r18
    159c:	33 1f       	adc	r19, r19
    159e:	22 0f       	add	r18, r18
    15a0:	33 1f       	adc	r19, r19
    15a2:	e2 0f       	add	r30, r18
    15a4:	f3 1f       	adc	r31, r19
    15a6:	ea 0f       	add	r30, r26
    15a8:	fb 1f       	adc	r31, r27
    15aa:	27 81       	ldd	r18, Z+7	; 0x07
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	a9 f0       	breq	.+42     	; 0x15da <add_data_types+0x6e>
    15b0:	24 30       	cpi	r18, 0x04	; 4
    15b2:	21 f1       	breq	.+72     	; 0x15fc <add_data_types+0x90>
    15b4:	21 30       	cpi	r18, 0x01	; 1
    15b6:	91 f5       	brne	.+100    	; 0x161c <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    15b8:	01 e0       	ldi	r16, 0x01	; 1
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	04 2e       	mov	r0, r20
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <add_data_types+0x58>
    15c0:	00 0f       	add	r16, r16
    15c2:	11 1f       	adc	r17, r17
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <add_data_types+0x54>
    15c8:	01 2e       	mov	r0, r17
    15ca:	00 0c       	add	r0, r0
    15cc:	22 0b       	sbc	r18, r18
    15ce:	33 0b       	sbc	r19, r19
    15d0:	c0 2a       	or	r12, r16
    15d2:	d1 2a       	or	r13, r17
    15d4:	e2 2a       	or	r14, r18
    15d6:	f3 2a       	or	r15, r19
                break;
    15d8:	21 c0       	rjmp	.+66     	; 0x161c <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    15da:	02 e0       	ldi	r16, 0x02	; 2
    15dc:	10 e0       	ldi	r17, 0x00	; 0
    15de:	04 2e       	mov	r0, r20
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <add_data_types+0x7a>
    15e2:	00 0f       	add	r16, r16
    15e4:	11 1f       	adc	r17, r17
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <add_data_types+0x76>
    15ea:	01 2e       	mov	r0, r17
    15ec:	00 0c       	add	r0, r0
    15ee:	22 0b       	sbc	r18, r18
    15f0:	33 0b       	sbc	r19, r19
    15f2:	c0 2a       	or	r12, r16
    15f4:	d1 2a       	or	r13, r17
    15f6:	e2 2a       	or	r14, r18
    15f8:	f3 2a       	or	r15, r19
                break;
    15fa:	10 c0       	rjmp	.+32     	; 0x161c <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    15fc:	03 e0       	ldi	r16, 0x03	; 3
    15fe:	10 e0       	ldi	r17, 0x00	; 0
    1600:	04 2e       	mov	r0, r20
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <add_data_types+0x9c>
    1604:	00 0f       	add	r16, r16
    1606:	11 1f       	adc	r17, r17
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <add_data_types+0x98>
    160c:	01 2e       	mov	r0, r17
    160e:	00 0c       	add	r0, r0
    1610:	22 0b       	sbc	r18, r18
    1612:	33 0b       	sbc	r19, r19
    1614:	c0 2a       	or	r12, r16
    1616:	d1 2a       	or	r13, r17
    1618:	e2 2a       	or	r14, r18
    161a:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    161c:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    161e:	9f 5f       	subi	r25, 0xFF	; 255
    1620:	12 96       	adiw	r26, 0x02	; 2
    1622:	8c 91       	ld	r24, X
    1624:	12 97       	sbiw	r26, 0x02	; 2
    1626:	98 17       	cp	r25, r24
    1628:	08 f4       	brcc	.+2      	; 0x162c <add_data_types+0xc0>
    162a:	b0 cf       	rjmp	.-160    	; 0x158c <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    162c:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    162e:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    1630:	cd 82       	std	Y+5, r12	; 0x05
} 
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	08 95       	ret

Disassembly of section .text.update_bodies:

00000dc8 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
 dc8:	cf 93       	push	r28
 dca:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
 dcc:	26 2f       	mov	r18, r22
 dce:	30 e0       	ldi	r19, 0x00	; 0
 dd0:	c9 01       	movw	r24, r18
 dd2:	01 97       	sbiw	r24, 0x01	; 1
 dd4:	f9 01       	movw	r30, r18
 dd6:	ee 0f       	add	r30, r30
 dd8:	ff 1f       	adc	r31, r31
 dda:	22 0f       	add	r18, r18
 ddc:	33 1f       	adc	r19, r19
 dde:	22 0f       	add	r18, r18
 de0:	33 1f       	adc	r19, r19
 de2:	22 0f       	add	r18, r18
 de4:	33 1f       	adc	r19, r19
 de6:	e2 0f       	add	r30, r18
 de8:	f3 1f       	adc	r31, r19
 dea:	ea 0f       	add	r30, r26
 dec:	fb 1f       	adc	r31, r27
 dee:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
 df0:	c0 e0       	ldi	r28, 0x00	; 0
 df2:	25 c0       	rjmp	.+74     	; 0xe3e <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
 df4:	82 17       	cp	r24, r18
 df6:	93 07       	cpc	r25, r19
 df8:	09 f1       	breq	.+66     	; 0xe3c <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
 dfa:	a9 01       	movw	r20, r18
 dfc:	44 0f       	add	r20, r20
 dfe:	55 1f       	adc	r21, r21
 e00:	44 0f       	add	r20, r20
 e02:	55 1f       	adc	r21, r21
 e04:	44 0f       	add	r20, r20
 e06:	55 1f       	adc	r21, r21
 e08:	f9 01       	movw	r30, r18
 e0a:	ee 0f       	add	r30, r30
 e0c:	ff 1f       	adc	r31, r31
 e0e:	e4 0f       	add	r30, r20
 e10:	f5 1f       	adc	r31, r21
 e12:	ea 0f       	add	r30, r26
 e14:	fb 1f       	adc	r31, r27
 e16:	43 85       	ldd	r20, Z+11	; 0x0b
 e18:	74 13       	cpse	r23, r20
 e1a:	10 c0       	rjmp	.+32     	; 0xe3c <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
 e1c:	f9 01       	movw	r30, r18
 e1e:	ee 0f       	add	r30, r30
 e20:	ff 1f       	adc	r31, r31
 e22:	22 0f       	add	r18, r18
 e24:	33 1f       	adc	r19, r19
 e26:	22 0f       	add	r18, r18
 e28:	33 1f       	adc	r19, r19
 e2a:	22 0f       	add	r18, r18
 e2c:	33 1f       	adc	r19, r19
 e2e:	e2 0f       	add	r30, r18
 e30:	f3 1f       	adc	r31, r19
 e32:	ea 0f       	add	r30, r26
 e34:	fb 1f       	adc	r31, r27
 e36:	24 85       	ldd	r18, Z+12	; 0x0c
 e38:	23 30       	cpi	r18, 0x03	; 3
 e3a:	41 f4       	brne	.+16     	; 0xe4c <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
 e3c:	cf 5f       	subi	r28, 0xFF	; 255
 e3e:	2c 2f       	mov	r18, r28
 e40:	30 e0       	ldi	r19, 0x00	; 0
 e42:	28 17       	cp	r18, r24
 e44:	39 07       	cpc	r19, r25
 e46:	b4 f2       	brlt	.-84     	; 0xdf4 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
 e48:	21 e0       	ldi	r18, 0x01	; 1
 e4a:	01 c0       	rjmp	.+2      	; 0xe4e <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
 e4c:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
 e4e:	22 23       	and	r18, r18
 e50:	39 f0       	breq	.+14     	; 0xe60 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
 e52:	fd 01       	movw	r30, r26
 e54:	e7 0f       	add	r30, r23
 e56:	f1 1d       	adc	r31, r1
 e58:	e4 58       	subi	r30, 0x84	; 132
 e5a:	ff 4f       	sbci	r31, 0xFF	; 255
 e5c:	21 e0       	ldi	r18, 0x01	; 1
 e5e:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
 e60:	9c 01       	movw	r18, r24
 e62:	22 0f       	add	r18, r18
 e64:	33 1f       	adc	r19, r19
 e66:	22 0f       	add	r18, r18
 e68:	33 1f       	adc	r19, r19
 e6a:	22 0f       	add	r18, r18
 e6c:	33 1f       	adc	r19, r19
 e6e:	fc 01       	movw	r30, r24
 e70:	ee 0f       	add	r30, r30
 e72:	ff 1f       	adc	r31, r31
 e74:	e2 0f       	add	r30, r18
 e76:	f3 1f       	adc	r31, r19
 e78:	ea 0f       	add	r30, r26
 e7a:	fb 1f       	adc	r31, r27
 e7c:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 e7e:	29 c0       	rjmp	.+82     	; 0xed2 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
 e80:	46 2f       	mov	r20, r22
 e82:	50 e0       	ldi	r21, 0x00	; 0
 e84:	84 17       	cp	r24, r20
 e86:	95 07       	cpc	r25, r21
 e88:	19 f1       	breq	.+70     	; 0xed0 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
 e8a:	9a 01       	movw	r18, r20
 e8c:	2f 5f       	subi	r18, 0xFF	; 255
 e8e:	3f 4f       	sbci	r19, 0xFF	; 255
 e90:	f9 01       	movw	r30, r18
 e92:	ee 0f       	add	r30, r30
 e94:	ff 1f       	adc	r31, r31
 e96:	22 0f       	add	r18, r18
 e98:	33 1f       	adc	r19, r19
 e9a:	22 0f       	add	r18, r18
 e9c:	33 1f       	adc	r19, r19
 e9e:	22 0f       	add	r18, r18
 ea0:	33 1f       	adc	r19, r19
 ea2:	e2 0f       	add	r30, r18
 ea4:	f3 1f       	adc	r31, r19
 ea6:	ea 0f       	add	r30, r26
 ea8:	fb 1f       	adc	r31, r27
 eaa:	20 81       	ld	r18, Z
 eac:	c2 13       	cpse	r28, r18
 eae:	10 c0       	rjmp	.+32     	; 0xed0 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
 eb0:	fa 01       	movw	r30, r20
 eb2:	ee 0f       	add	r30, r30
 eb4:	ff 1f       	adc	r31, r31
 eb6:	44 0f       	add	r20, r20
 eb8:	55 1f       	adc	r21, r21
 eba:	44 0f       	add	r20, r20
 ebc:	55 1f       	adc	r21, r21
 ebe:	44 0f       	add	r20, r20
 ec0:	55 1f       	adc	r21, r21
 ec2:	e4 0f       	add	r30, r20
 ec4:	f5 1f       	adc	r31, r21
 ec6:	ea 0f       	add	r30, r26
 ec8:	fb 1f       	adc	r31, r27
 eca:	24 85       	ldd	r18, Z+12	; 0x0c
 ecc:	23 30       	cpi	r18, 0x03	; 3
 ece:	41 f4       	brne	.+16     	; 0xee0 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 ed0:	6f 5f       	subi	r22, 0xFF	; 255
 ed2:	12 96       	adiw	r26, 0x02	; 2
 ed4:	2c 91       	ld	r18, X
 ed6:	12 97       	sbiw	r26, 0x02	; 2
 ed8:	62 17       	cp	r22, r18
 eda:	90 f2       	brcs	.-92     	; 0xe80 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
 edc:	81 e0       	ldi	r24, 0x01	; 1
 ede:	01 c0       	rjmp	.+2      	; 0xee2 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
 ee0:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
 ee2:	88 23       	and	r24, r24
 ee4:	41 f0       	breq	.+16     	; 0xef6 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
 ee6:	fd 01       	movw	r30, r26
 ee8:	ec 0f       	add	r30, r28
 eea:	f1 1d       	adc	r31, r1
 eec:	e4 58       	subi	r30, 0x84	; 132
 eee:	ff 4f       	sbci	r31, 0xFF	; 255
 ef0:	81 e0       	ldi	r24, 0x01	; 1
 ef2:	80 83       	st	Z, r24
 ef4:	06 c0       	rjmp	.+12     	; 0xf02 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
 ef6:	fd 01       	movw	r30, r26
 ef8:	ec 0f       	add	r30, r28
 efa:	f1 1d       	adc	r31, r1
 efc:	e4 58       	subi	r30, 0x84	; 132
 efe:	ff 4f       	sbci	r31, 0xFF	; 255
 f00:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
 f02:	8c 2f       	mov	r24, r28
 f04:	90 e0       	ldi	r25, 0x00	; 0
 f06:	87 1b       	sub	r24, r23
 f08:	91 09       	sbc	r25, r1
 f0a:	02 97       	sbiw	r24, 0x02	; 2
 f0c:	64 f0       	brlt	.+24     	; 0xf26 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f0e:	7f 5f       	subi	r23, 0xFF	; 255
 f10:	08 c0       	rjmp	.+16     	; 0xf22 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
 f12:	fd 01       	movw	r30, r26
 f14:	e7 0f       	add	r30, r23
 f16:	f1 1d       	adc	r31, r1
 f18:	e4 58       	subi	r30, 0x84	; 132
 f1a:	ff 4f       	sbci	r31, 0xFF	; 255
 f1c:	81 e0       	ldi	r24, 0x01	; 1
 f1e:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f20:	7f 5f       	subi	r23, 0xFF	; 255
 f22:	7c 17       	cp	r23, r28
 f24:	b0 f3       	brcs	.-20     	; 0xf12 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
 f26:	cf 91       	pop	r28
 f28:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00000c0a <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
 c0a:	af 92       	push	r10
 c0c:	bf 92       	push	r11
 c0e:	cf 92       	push	r12
 c10:	df 92       	push	r13
 c12:	ef 92       	push	r14
 c14:	ff 92       	push	r15
 c16:	0f 93       	push	r16
 c18:	1f 93       	push	r17
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	ec 01       	movw	r28, r24
 c20:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
 c22:	68 83       	st	Y, r22
    state->nCollections=nCollections;
 c24:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 c26:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
 c28:	00 e0       	ldi	r16, 0x00	; 0
 c2a:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
 c2c:	8f c0       	rjmp	.+286    	; 0xd4c <mrpp_state_init+0x142>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
 c2e:	ed 2d       	mov	r30, r13
 c30:	f0 e0       	ldi	r31, 0x00	; 0
 c32:	cf 01       	movw	r24, r30
 c34:	88 0f       	add	r24, r24
 c36:	99 1f       	adc	r25, r25
 c38:	88 0f       	add	r24, r24
 c3a:	99 1f       	adc	r25, r25
 c3c:	8e 0f       	add	r24, r30
 c3e:	9f 1f       	adc	r25, r31
 c40:	84 0f       	add	r24, r20
 c42:	95 1f       	adc	r25, r21
 c44:	dc 01       	movw	r26, r24
 c46:	12 96       	adiw	r26, 0x02	; 2
 c48:	6d 91       	ld	r22, X+
 c4a:	7c 91       	ld	r23, X
 c4c:	13 97       	sbiw	r26, 0x03	; 3
 c4e:	df 01       	movw	r26, r30
 c50:	aa 0f       	add	r26, r26
 c52:	bb 1f       	adc	r27, r27
 c54:	9f 01       	movw	r18, r30
 c56:	22 0f       	add	r18, r18
 c58:	33 1f       	adc	r19, r19
 c5a:	22 0f       	add	r18, r18
 c5c:	33 1f       	adc	r19, r19
 c5e:	22 0f       	add	r18, r18
 c60:	33 1f       	adc	r19, r19
 c62:	a2 0f       	add	r26, r18
 c64:	b3 1f       	adc	r27, r19
 c66:	5d 01       	movw	r10, r26
 c68:	ac 0e       	add	r10, r28
 c6a:	bd 1e       	adc	r11, r29
 c6c:	d5 01       	movw	r26, r10
 c6e:	19 96       	adiw	r26, 0x09	; 9
 c70:	7c 93       	st	X, r23
 c72:	6e 93       	st	-X, r22
 c74:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
 c76:	dc 01       	movw	r26, r24
 c78:	14 96       	adiw	r26, 0x04	; 4
 c7a:	2c 91       	ld	r18, X
 c7c:	d5 01       	movw	r26, r10
 c7e:	17 96       	adiw	r26, 0x07	; 7
 c80:	2c 93       	st	X, r18
 c82:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
 c84:	14 96       	adiw	r26, 0x04	; 4
 c86:	1c 93       	st	X, r17
 c88:	0e 93       	st	-X, r16
 c8a:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
 c8c:	dc 01       	movw	r26, r24
 c8e:	2d 91       	ld	r18, X+
 c90:	3c 91       	ld	r19, X
 c92:	11 97       	sbiw	r26, 0x01	; 1
 c94:	14 96       	adiw	r26, 0x04	; 4
 c96:	8c 91       	ld	r24, X
 c98:	82 9f       	mul	r24, r18
 c9a:	70 01       	movw	r14, r0
 c9c:	83 9f       	mul	r24, r19
 c9e:	f0 0c       	add	r15, r0
 ca0:	11 24       	eor	r1, r1
 ca2:	b6 e0       	ldi	r27, 0x06	; 6
 ca4:	eb 0e       	add	r14, r27
 ca6:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
 ca8:	d5 01       	movw	r26, r10
 caa:	16 96       	adiw	r26, 0x06	; 6
 cac:	fc 92       	st	X, r15
 cae:	ee 92       	st	-X, r14
 cb0:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
 cb2:	98 01       	movw	r18, r16
 cb4:	ab ea       	ldi	r26, 0xAB	; 171
 cb6:	ba ea       	ldi	r27, 0xAA	; 170
 cb8:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__umulhisi3>
 cbc:	96 95       	lsr	r25
 cbe:	87 95       	ror	r24
 cc0:	92 95       	swap	r25
 cc2:	82 95       	swap	r24
 cc4:	8f 70       	andi	r24, 0x0F	; 15
 cc6:	89 27       	eor	r24, r25
 cc8:	9f 70       	andi	r25, 0x0F	; 15
 cca:	89 27       	eor	r24, r25
 ccc:	9f 01       	movw	r18, r30
 cce:	2f 5f       	subi	r18, 0xFF	; 255
 cd0:	3f 4f       	sbci	r19, 0xFF	; 255
 cd2:	d9 01       	movw	r26, r18
 cd4:	aa 0f       	add	r26, r26
 cd6:	bb 1f       	adc	r27, r27
 cd8:	22 0f       	add	r18, r18
 cda:	33 1f       	adc	r19, r19
 cdc:	22 0f       	add	r18, r18
 cde:	33 1f       	adc	r19, r19
 ce0:	22 0f       	add	r18, r18
 ce2:	33 1f       	adc	r19, r19
 ce4:	a2 0f       	add	r26, r18
 ce6:	b3 1f       	adc	r27, r19
 ce8:	ac 0f       	add	r26, r28
 cea:	bd 1f       	adc	r27, r29
 cec:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
 cee:	0e 0d       	add	r16, r14
 cf0:	1f 1d       	adc	r17, r15
 cf2:	98 01       	movw	r18, r16
 cf4:	ab ea       	ldi	r26, 0xAB	; 171
 cf6:	ba ea       	ldi	r27, 0xAA	; 170
 cf8:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__umulhisi3>
 cfc:	7c 01       	movw	r14, r24
 cfe:	f6 94       	lsr	r15
 d00:	e7 94       	ror	r14
 d02:	f6 94       	lsr	r15
 d04:	e7 94       	ror	r14
 d06:	f6 94       	lsr	r15
 d08:	e7 94       	ror	r14
 d0a:	f6 94       	lsr	r15
 d0c:	e7 94       	ror	r14
 d0e:	f6 94       	lsr	r15
 d10:	e7 94       	ror	r14
 d12:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
 d14:	20 e3       	ldi	r18, 0x30	; 48
 d16:	2e 9d       	mul	r18, r14
 d18:	c0 01       	movw	r24, r0
 d1a:	2f 9d       	mul	r18, r15
 d1c:	90 0d       	add	r25, r0
 d1e:	11 24       	eor	r1, r1
 d20:	08 17       	cp	r16, r24
 d22:	19 07       	cpc	r17, r25
 d24:	19 f4       	brne	.+6      	; 0xd2c <mrpp_state_init+0x122>
 d26:	bb 24       	eor	r11, r11
 d28:	ba 94       	dec	r11
 d2a:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
 d2c:	cf 01       	movw	r24, r30
 d2e:	88 0f       	add	r24, r24
 d30:	99 1f       	adc	r25, r25
 d32:	ee 0f       	add	r30, r30
 d34:	ff 1f       	adc	r31, r31
 d36:	ee 0f       	add	r30, r30
 d38:	ff 1f       	adc	r31, r31
 d3a:	ee 0f       	add	r30, r30
 d3c:	ff 1f       	adc	r31, r31
 d3e:	e8 0f       	add	r30, r24
 d40:	f9 1f       	adc	r31, r25
 d42:	ec 0f       	add	r30, r28
 d44:	fd 1f       	adc	r31, r29
 d46:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
 d48:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 d4a:	d3 94       	inc	r13
 d4c:	dc 14       	cp	r13, r12
 d4e:	08 f4       	brcc	.+2      	; 0xd52 <mrpp_state_init+0x148>
 d50:	6e cf       	rjmp	.-292    	; 0xc2e <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
 d52:	98 01       	movw	r18, r16
 d54:	ab ea       	ldi	r26, 0xAB	; 171
 d56:	ba ea       	ldi	r27, 0xAA	; 170
 d58:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__umulhisi3>
 d5c:	fc 01       	movw	r30, r24
 d5e:	f6 95       	lsr	r31
 d60:	e7 95       	ror	r30
 d62:	f2 95       	swap	r31
 d64:	e2 95       	swap	r30
 d66:	ef 70       	andi	r30, 0x0F	; 15
 d68:	ef 27       	eor	r30, r31
 d6a:	ff 70       	andi	r31, 0x0F	; 15
 d6c:	ef 27       	eor	r30, r31
 d6e:	4e 2f       	mov	r20, r30
 d70:	52 e0       	ldi	r21, 0x02	; 2
 d72:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
 d74:	20 e3       	ldi	r18, 0x30	; 48
 d76:	2e 9f       	mul	r18, r30
 d78:	c0 01       	movw	r24, r0
 d7a:	2f 9f       	mul	r18, r31
 d7c:	90 0d       	add	r25, r0
 d7e:	11 24       	eor	r1, r1
 d80:	08 1b       	sub	r16, r24
 d82:	19 0b       	sbc	r17, r25
 d84:	11 f4       	brne	.+4      	; 0xd8a <mrpp_state_init+0x180>
 d86:	51 e0       	ldi	r21, 0x01	; 1
 d88:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
 d8a:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
 d8c:	01 2b       	or	r16, r17
 d8e:	11 f0       	breq	.+4      	; 0xd94 <mrpp_state_init+0x18a>
 d90:	41 e0       	ldi	r20, 0x01	; 1
 d92:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
 d94:	fe 01       	movw	r30, r28
 d96:	e5 58       	subi	r30, 0x85	; 133
 d98:	ff 4f       	sbci	r31, 0xFF	; 255
 d9a:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
 d9c:	80 e0       	ldi	r24, 0x00	; 0
 d9e:	07 c0       	rjmp	.+14     	; 0xdae <mrpp_state_init+0x1a4>
    {
        state->bodies[i]=WAITING;
 da0:	fe 01       	movw	r30, r28
 da2:	e8 0f       	add	r30, r24
 da4:	f1 1d       	adc	r31, r1
 da6:	e4 58       	subi	r30, 0x84	; 132
 da8:	ff 4f       	sbci	r31, 0xFF	; 255
 daa:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
 dac:	8f 5f       	subi	r24, 0xFF	; 255
 dae:	84 17       	cp	r24, r20
 db0:	b8 f3       	brcs	.-18     	; 0xda0 <mrpp_state_init+0x196>
    {
        state->bodies[i]=WAITING;
    }
}
 db2:	df 91       	pop	r29
 db4:	cf 91       	pop	r28
 db6:	1f 91       	pop	r17
 db8:	0f 91       	pop	r16
 dba:	ff 90       	pop	r15
 dbc:	ef 90       	pop	r14
 dbe:	df 90       	pop	r13
 dc0:	cf 90       	pop	r12
 dc2:	bf 90       	pop	r11
 dc4:	af 90       	pop	r10
 dc6:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00001b84 <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    1b84:	0f 93       	push	r16
    1b86:	1f 93       	push	r17
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	8c 01       	movw	r16, r24
    1b8e:	eb 01       	movw	r28, r22
    package[0]=0;
    1b90:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    1b92:	fc 01       	movw	r30, r24
    1b94:	81 81       	ldd	r24, Z+1	; 0x01
    1b96:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1b98:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    1b9a:	c8 01       	movw	r24, r16
    1b9c:	0e 94 b6 0a 	call	0x156c	; 0x156c <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	35 c0       	rjmp	.+106    	; 0x1c0e <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1ba4:	82 2f       	mov	r24, r18
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	dc 01       	movw	r26, r24
    1baa:	aa 0f       	add	r26, r26
    1bac:	bb 1f       	adc	r27, r27
    1bae:	aa 0f       	add	r26, r26
    1bb0:	bb 1f       	adc	r27, r27
    1bb2:	ad 01       	movw	r20, r26
    1bb4:	4a 5f       	subi	r20, 0xFA	; 250
    1bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb8:	4c 0f       	add	r20, r28
    1bba:	5d 1f       	adc	r21, r29
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	e8 0f       	add	r30, r24
    1bd0:	f9 1f       	adc	r31, r25
    1bd2:	bf 01       	movw	r22, r30
    1bd4:	60 0f       	add	r22, r16
    1bd6:	71 1f       	adc	r23, r17
    1bd8:	fb 01       	movw	r30, r22
    1bda:	84 81       	ldd	r24, Z+4	; 0x04
    1bdc:	fa 01       	movw	r30, r20
    1bde:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1be0:	cd 01       	movw	r24, r26
    1be2:	07 96       	adiw	r24, 0x07	; 7
    1be4:	8c 0f       	add	r24, r28
    1be6:	9d 1f       	adc	r25, r29
    1be8:	fb 01       	movw	r30, r22
    1bea:	33 81       	ldd	r19, Z+3	; 0x03
    1bec:	fc 01       	movw	r30, r24
    1bee:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	08 96       	adiw	r24, 0x08	; 8
    1bf4:	8c 0f       	add	r24, r28
    1bf6:	9d 1f       	adc	r25, r29
    1bf8:	fb 01       	movw	r30, r22
    1bfa:	36 81       	ldd	r19, Z+6	; 0x06
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1c00:	19 96       	adiw	r26, 0x09	; 9
    1c02:	ac 0f       	add	r26, r28
    1c04:	bd 1f       	adc	r27, r29
    1c06:	fb 01       	movw	r30, r22
    1c08:	85 81       	ldd	r24, Z+5	; 0x05
    1c0a:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    1c0c:	2f 5f       	subi	r18, 0xFF	; 255
    1c0e:	f8 01       	movw	r30, r16
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	28 17       	cp	r18, r24
    1c14:	38 f2       	brcs	.-114    	; 0x1ba4 <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1c16:	88 0f       	add	r24, r24
    1c18:	88 0f       	add	r24, r24
}
    1c1a:	8a 5f       	subi	r24, 0xFA	; 250
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00001ae0 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	8c 01       	movw	r16, r24
    1aea:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    1aec:	fc 01       	movw	r30, r24
    1aee:	81 81       	ldd	r24, Z+1	; 0x01
    1af0:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    1af2:	81 81       	ldd	r24, Z+1	; 0x01
    1af4:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1af6:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    1af8:	c8 01       	movw	r24, r16
    1afa:	0e 94 b6 0a 	call	0x156c	; 0x156c <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	35 c0       	rjmp	.+106    	; 0x1b6c <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1b02:	82 2f       	mov	r24, r18
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	dc 01       	movw	r26, r24
    1b08:	aa 0f       	add	r26, r26
    1b0a:	bb 1f       	adc	r27, r27
    1b0c:	aa 0f       	add	r26, r26
    1b0e:	bb 1f       	adc	r27, r27
    1b10:	ad 01       	movw	r20, r26
    1b12:	4a 5f       	subi	r20, 0xFA	; 250
    1b14:	5f 4f       	sbci	r21, 0xFF	; 255
    1b16:	4c 0f       	add	r20, r28
    1b18:	5d 1f       	adc	r21, r29
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	ee 0f       	add	r30, r30
    1b1e:	ff 1f       	adc	r31, r31
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	e8 0f       	add	r30, r24
    1b2e:	f9 1f       	adc	r31, r25
    1b30:	bf 01       	movw	r22, r30
    1b32:	60 0f       	add	r22, r16
    1b34:	71 1f       	adc	r23, r17
    1b36:	fb 01       	movw	r30, r22
    1b38:	84 81       	ldd	r24, Z+4	; 0x04
    1b3a:	fa 01       	movw	r30, r20
    1b3c:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1b3e:	cd 01       	movw	r24, r26
    1b40:	07 96       	adiw	r24, 0x07	; 7
    1b42:	8c 0f       	add	r24, r28
    1b44:	9d 1f       	adc	r25, r29
    1b46:	fb 01       	movw	r30, r22
    1b48:	33 81       	ldd	r19, Z+3	; 0x03
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1b4e:	cd 01       	movw	r24, r26
    1b50:	08 96       	adiw	r24, 0x08	; 8
    1b52:	8c 0f       	add	r24, r28
    1b54:	9d 1f       	adc	r25, r29
    1b56:	fb 01       	movw	r30, r22
    1b58:	36 81       	ldd	r19, Z+6	; 0x06
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1b5e:	19 96       	adiw	r26, 0x09	; 9
    1b60:	ac 0f       	add	r26, r28
    1b62:	bd 1f       	adc	r27, r29
    1b64:	fb 01       	movw	r30, r22
    1b66:	85 81       	ldd	r24, Z+5	; 0x05
    1b68:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    1b6a:	2f 5f       	subi	r18, 0xFF	; 255
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	28 17       	cp	r18, r24
    1b72:	38 f2       	brcs	.-114    	; 0x1b02 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1b74:	88 0f       	add	r24, r24
    1b76:	88 0f       	add	r24, r24
}
    1b78:	8a 5f       	subi	r24, 0xFA	; 250
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00001f1e <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    1f28:	a6 2f       	mov	r26, r22
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	11 97       	sbiw	r26, 0x01	; 1
    1f2e:	fd 01       	movw	r30, r26
    1f30:	ee 0f       	add	r30, r30
    1f32:	ff 1f       	adc	r31, r31
    1f34:	cd 01       	movw	r24, r26
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	e8 0f       	add	r30, r24
    1f44:	f9 1f       	adc	r31, r25
    1f46:	e0 0f       	add	r30, r16
    1f48:	f1 1f       	adc	r31, r17
    1f4a:	83 e0       	ldi	r24, 0x03	; 3
    1f4c:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	0a c0       	rjmp	.+20     	; 0x1f66 <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    1f52:	e9 2f       	mov	r30, r25
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	e9 01       	movw	r28, r18
    1f58:	ce 0f       	add	r28, r30
    1f5a:	df 1f       	adc	r29, r31
    1f5c:	e4 0f       	add	r30, r20
    1f5e:	f5 1f       	adc	r31, r21
    1f60:	80 81       	ld	r24, Z
    1f62:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    1f64:	9f 5f       	subi	r25, 0xFF	; 255
    1f66:	94 30       	cpi	r25, 0x04	; 4
    1f68:	a0 f3       	brcs	.-24     	; 0x1f52 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	aa 0f       	add	r26, r26
    1f72:	bb 1f       	adc	r27, r27
    1f74:	aa 0f       	add	r26, r26
    1f76:	bb 1f       	adc	r27, r27
    1f78:	aa 0f       	add	r26, r26
    1f7a:	bb 1f       	adc	r27, r27
    1f7c:	a8 0f       	add	r26, r24
    1f7e:	b9 1f       	adc	r27, r25
    1f80:	a0 0f       	add	r26, r16
    1f82:	b1 1f       	adc	r27, r17
    1f84:	19 96       	adiw	r26, 0x09	; 9
    1f86:	8c 91       	ld	r24, X
    1f88:	19 97       	sbiw	r26, 0x09	; 9
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    1f8e:	18 96       	adiw	r26, 0x08	; 8
    1f90:	8c 91       	ld	r24, X
    1f92:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    1f94:	c8 01       	movw	r24, r16
    1f96:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <update_bodies>
}
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00003220 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    3220:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0b c0       	rjmp	.+22     	; 0x323c <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    3226:	29 2f       	mov	r18, r25
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	fa 01       	movw	r30, r20
    322c:	e2 0f       	add	r30, r18
    322e:	f3 1f       	adc	r31, r19
    3230:	e4 58       	subi	r30, 0x84	; 132
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 81       	ld	r24, Z
    3236:	81 30       	cpi	r24, 0x01	; 1
    3238:	49 f0       	breq	.+18     	; 0x324c <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    323a:	9f 5f       	subi	r25, 0xFF	; 255
    323c:	fa 01       	movw	r30, r20
    323e:	e5 58       	subi	r30, 0x85	; 133
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 81       	ld	r24, Z
    3244:	98 17       	cp	r25, r24
    3246:	78 f3       	brcs	.-34     	; 0x3226 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    3248:	2f ef       	ldi	r18, 0xFF	; 255
    324a:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    324c:	c9 01       	movw	r24, r18
    324e:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

000032d8 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    32d8:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    32da:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    32dc:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    32de:	0a c0       	rjmp	.+20     	; 0x32f4 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    32e0:	f9 01       	movw	r30, r18
    32e2:	e9 0f       	add	r30, r25
    32e4:	f1 1d       	adc	r31, r1
    32e6:	e4 58       	subi	r30, 0x84	; 132
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	40 81       	ld	r20, Z
    32ec:	42 30       	cpi	r20, 0x02	; 2
    32ee:	09 f0       	breq	.+2      	; 0x32f2 <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    32f0:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    32f2:	9f 5f       	subi	r25, 0xFF	; 255
    32f4:	f9 01       	movw	r30, r18
    32f6:	e5 58       	subi	r30, 0x85	; 133
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	40 81       	ld	r20, Z
    32fc:	94 17       	cp	r25, r20
    32fe:	80 f3       	brcs	.-32     	; 0x32e0 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    3300:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

0000118c <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    118c:	8f 92       	push	r8
    118e:	9f 92       	push	r9
    1190:	af 92       	push	r10
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	ec 01       	movw	r28, r24
    11a6:	6b 01       	movw	r12, r22
    11a8:	4a 01       	movw	r8, r20
    11aa:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    11ac:	0e 94 10 19 	call	0x3220	; 0x3220 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    11b0:	8f 3f       	cpi	r24, 0xFF	; 255
    11b2:	2f ef       	ldi	r18, 0xFF	; 255
    11b4:	92 07       	cpc	r25, r18
    11b6:	09 f4       	brne	.+2      	; 0x11ba <mrpp_state_get_ready_body+0x2e>
    11b8:	66 c0       	rjmp	.+204    	; 0x1286 <mrpp_state_get_ready_body+0xfa>
    11ba:	8c 15       	cp	r24, r12
    11bc:	9d 05       	cpc	r25, r13
    11be:	09 f0       	breq	.+2      	; 0x11c2 <mrpp_state_get_ready_body+0x36>
    11c0:	64 c0       	rjmp	.+200    	; 0x128a <mrpp_state_get_ready_body+0xfe>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	09 c0       	rjmp	.+18     	; 0x11d8 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    11c6:	fe 01       	movw	r30, r28
    11c8:	e8 0f       	add	r30, r24
    11ca:	f1 1d       	adc	r31, r1
    11cc:	e4 58       	subi	r30, 0x84	; 132
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	90 81       	ld	r25, Z
    11d2:	91 30       	cpi	r25, 0x01	; 1
    11d4:	41 f0       	breq	.+16     	; 0x11e6 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	fe 01       	movw	r30, r28
    11da:	e5 58       	subi	r30, 0x85	; 133
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	90 81       	ld	r25, Z
    11e0:	89 17       	cp	r24, r25
    11e2:	88 f3       	brcs	.-30     	; 0x11c6 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    11e4:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	98 0f       	add	r25, r24
    11ea:	f4 01       	movw	r30, r8
    11ec:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    11ee:	99 81       	ldd	r25, Y+1	; 0x01
    11f0:	f5 01       	movw	r30, r10
    11f2:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	40 e3       	ldi	r20, 0x30	; 48
    11f8:	48 9f       	mul	r20, r24
    11fa:	90 01       	movw	r18, r0
    11fc:	49 9f       	mul	r20, r25
    11fe:	30 0d       	add	r19, r0
    1200:	11 24       	eor	r1, r1
    1202:	f8 01       	movw	r30, r16
    1204:	31 83       	std	Z+1, r19	; 0x01
    1206:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    1208:	fe 01       	movw	r30, r28
    120a:	e5 58       	subi	r30, 0x85	; 133
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	20 81       	ld	r18, Z
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	21 50       	subi	r18, 0x01	; 1
    1214:	31 09       	sbc	r19, r1
    1216:	82 17       	cp	r24, r18
    1218:	93 07       	cpc	r25, r19
    121a:	2c f4       	brge	.+10     	; 0x1226 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    121c:	80 e3       	ldi	r24, 0x30	; 48
    121e:	f7 01       	movw	r30, r14
    1220:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	33 c0       	rjmp	.+102    	; 0x128c <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9c 01       	movw	r18, r24
    122e:	22 0f       	add	r18, r18
    1230:	33 1f       	adc	r19, r19
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	c8 0f       	add	r28, r24
    1244:	d9 1f       	adc	r29, r25
    1246:	4b 81       	ldd	r20, Y+3	; 0x03
    1248:	5c 81       	ldd	r21, Y+4	; 0x04
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	48 0f       	add	r20, r24
    1250:	59 1f       	adc	r21, r25
    1252:	9a 01       	movw	r18, r20
    1254:	ab ea       	ldi	r26, 0xAB	; 171
    1256:	ba ea       	ldi	r27, 0xAA	; 170
    1258:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__umulhisi3>
    125c:	96 95       	lsr	r25
    125e:	87 95       	ror	r24
    1260:	92 95       	swap	r25
    1262:	82 95       	swap	r24
    1264:	8f 70       	andi	r24, 0x0F	; 15
    1266:	89 27       	eor	r24, r25
    1268:	9f 70       	andi	r25, 0x0F	; 15
    126a:	89 27       	eor	r24, r25
    126c:	60 e3       	ldi	r22, 0x30	; 48
    126e:	68 9f       	mul	r22, r24
    1270:	90 01       	movw	r18, r0
    1272:	69 9f       	mul	r22, r25
    1274:	30 0d       	add	r19, r0
    1276:	11 24       	eor	r1, r1
    1278:	ca 01       	movw	r24, r20
    127a:	82 1b       	sub	r24, r18
    127c:	93 0b       	sbc	r25, r19
    127e:	f7 01       	movw	r30, r14
    1280:	80 83       	st	Z, r24
    } 
    return true; 
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	03 c0       	rjmp	.+6      	; 0x128c <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	01 c0       	rjmp	.+2      	; 0x128c <mrpp_state_get_ready_body+0x100>
    128a:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	bf 90       	pop	r11
    129e:	af 90       	pop	r10
    12a0:	9f 90       	pop	r9
    12a2:	8f 90       	pop	r8
    12a4:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

0000349a <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    349a:	fc 01       	movw	r30, r24
    349c:	e5 58       	subi	r30, 0x85	; 133
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	20 81       	ld	r18, Z
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	62 17       	cp	r22, r18
    34a6:	73 07       	cpc	r23, r19
    34a8:	3c f4       	brge	.+14     	; 0x34b8 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    34aa:	68 0f       	add	r22, r24
    34ac:	79 1f       	adc	r23, r25
    34ae:	fb 01       	movw	r30, r22
    34b0:	e4 58       	subi	r30, 0x84	; 132
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	82 e0       	ldi	r24, 0x02	; 2
    34b6:	80 83       	st	Z, r24
    34b8:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00002f52 <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    2f52:	70 e0       	ldi	r23, 0x00	; 0
    2f54:	61 50       	subi	r22, 0x01	; 1
    2f56:	71 09       	sbc	r23, r1
    2f58:	fb 01       	movw	r30, r22
    2f5a:	ee 0f       	add	r30, r30
    2f5c:	ff 1f       	adc	r31, r31
    2f5e:	66 0f       	add	r22, r22
    2f60:	77 1f       	adc	r23, r23
    2f62:	66 0f       	add	r22, r22
    2f64:	77 1f       	adc	r23, r23
    2f66:	66 0f       	add	r22, r22
    2f68:	77 1f       	adc	r23, r23
    2f6a:	e6 0f       	add	r30, r22
    2f6c:	f7 1f       	adc	r31, r23
    2f6e:	e8 0f       	add	r30, r24
    2f70:	f9 1f       	adc	r31, r25
    2f72:	83 81       	ldd	r24, Z+3	; 0x03
    2f74:	94 81       	ldd	r25, Z+4	; 0x04
    2f76:	da 01       	movw	r26, r20
    2f78:	8d 93       	st	X+, r24
    2f7a:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    2f7c:	85 81       	ldd	r24, Z+5	; 0x05
    2f7e:	96 81       	ldd	r25, Z+6	; 0x06
    2f80:	f9 01       	movw	r30, r18
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
    2f86:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

000026f0 <RTC_set_clock_out>:
	uint32_t tsbit;
} tsbit;

const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <RTC_set_clock_out+0x6>
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    26fa:	9d e0       	ldi	r25, 0x0D	; 13
    26fc:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	31 f0       	breq	.+12     	; 0x270e <RTC_set_clock_out+0x1e>
    2702:	18 f0       	brcs	.+6      	; 0x270a <RTC_set_clock_out+0x1a>
    2704:	80 32       	cpi	r24, 0x20	; 32
    2706:	31 f0       	breq	.+12     	; 0x2714 <RTC_set_clock_out+0x24>
    2708:	13 c0       	rjmp	.+38     	; 0x2730 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    270a:	1a 82       	std	Y+2, r1	; 0x02
			break;
    270c:	05 c0       	rjmp	.+10     	; 0x2718 <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    270e:	83 e8       	ldi	r24, 0x83	; 131
    2710:	8a 83       	std	Y+2, r24	; 0x02
			break;
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    2714:	82 e8       	ldi	r24, 0x82	; 130
    2716:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    2718:	ae 01       	movw	r20, r28
    271a:	4f 5f       	subi	r20, 0xFF	; 255
    271c:	5f 4f       	sbci	r21, 0xFF	; 255
    271e:	60 e8       	ldi	r22, 0x80	; 128
    2720:	22 e0       	ldi	r18, 0x02	; 2
    2722:	81 e5       	ldi	r24, 0x51	; 81
    2724:	0e 94 92 1b 	call	0x3724	; 0x3724 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2728:	88 23       	and	r24, r24
    272a:	21 f0       	breq	.+8      	; 0x2734 <RTC_set_clock_out+0x44>
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	03 c0       	rjmp	.+6      	; 0x2736 <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    2734:	80 e0       	ldi	r24, 0x00	; 0
}
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
    273e:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

00003092 <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	00 d0       	rcall	.+0      	; 0x3098 <RTC_clear_wake_up_interrupt+0x6>
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    30a2:	ae 01       	movw	r20, r28
    30a4:	4f 5f       	subi	r20, 0xFF	; 255
    30a6:	5f 4f       	sbci	r21, 0xFF	; 255
    30a8:	60 e8       	ldi	r22, 0x80	; 128
    30aa:	22 e0       	ldi	r18, 0x02	; 2
    30ac:	81 e5       	ldi	r24, 0x51	; 81
    30ae:	0e 94 92 1b 	call	0x3724	; 0x3724 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    30b2:	88 23       	and	r24, r24
    30b4:	11 f0       	breq	.+4      	; 0x30ba <RTC_clear_wake_up_interrupt+0x28>
    30b6:	82 e0       	ldi	r24, 0x02	; 2
    30b8:	01 c0       	rjmp	.+2      	; 0x30bc <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    30ba:	80 e0       	ldi	r24, 0x00	; 0
}
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	df 91       	pop	r29
    30c2:	cf 91       	pop	r28
    30c4:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00000f2a <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	27 97       	sbiw	r28, 0x07	; 7
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	8c 01       	movw	r16, r24
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	4f e1       	ldi	r20, 0x1F	; 31
     f48:	53 e0       	ldi	r21, 0x03	; 3
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	81 e5       	ldi	r24, 0x51	; 81
     f4e:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <TWI_API_write_data>
     f52:	81 11       	cpse	r24, r1
     f54:	7c c0       	rjmp	.+248    	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
     f56:	47 e0       	ldi	r20, 0x07	; 7
     f58:	be 01       	movw	r22, r28
     f5a:	6f 5f       	subi	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	81 e5       	ldi	r24, 0x51	; 81
     f60:	0e 94 a7 19 	call	0x334e	; 0x334e <TWI_API_repeat_read_data_stop>
     f64:	81 11       	cpse	r24, r1
     f66:	75 c0       	rjmp	.+234    	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
     f68:	29 81       	ldd	r18, Y+1	; 0x01
     f6a:	82 2f       	mov	r24, r18
     f6c:	8f 77       	andi	r24, 0x7F	; 127
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	95 95       	asr	r25
     f72:	87 95       	ror	r24
     f74:	95 95       	asr	r25
     f76:	87 95       	ror	r24
     f78:	95 95       	asr	r25
     f7a:	87 95       	ror	r24
     f7c:	95 95       	asr	r25
     f7e:	87 95       	ror	r24
     f80:	88 0f       	add	r24, r24
     f82:	98 2f       	mov	r25, r24
     f84:	99 0f       	add	r25, r25
     f86:	99 0f       	add	r25, r25
     f88:	89 0f       	add	r24, r25
     f8a:	2f 70       	andi	r18, 0x0F	; 15
     f8c:	82 0f       	add	r24, r18
     f8e:	f8 01       	movw	r30, r16
     f90:	80 83       	st	Z, r24
     f92:	2a 81       	ldd	r18, Y+2	; 0x02
     f94:	82 2f       	mov	r24, r18
     f96:	8f 77       	andi	r24, 0x7F	; 127
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	95 95       	asr	r25
     f9c:	87 95       	ror	r24
     f9e:	95 95       	asr	r25
     fa0:	87 95       	ror	r24
     fa2:	95 95       	asr	r25
     fa4:	87 95       	ror	r24
     fa6:	95 95       	asr	r25
     fa8:	87 95       	ror	r24
     faa:	88 0f       	add	r24, r24
     fac:	98 2f       	mov	r25, r24
     fae:	99 0f       	add	r25, r25
     fb0:	99 0f       	add	r25, r25
     fb2:	89 0f       	add	r24, r25
     fb4:	2f 70       	andi	r18, 0x0F	; 15
     fb6:	82 0f       	add	r24, r18
     fb8:	81 83       	std	Z+1, r24	; 0x01
     fba:	2b 81       	ldd	r18, Y+3	; 0x03
     fbc:	82 2f       	mov	r24, r18
     fbe:	8f 73       	andi	r24, 0x3F	; 63
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	95 95       	asr	r25
     fc4:	87 95       	ror	r24
     fc6:	95 95       	asr	r25
     fc8:	87 95       	ror	r24
     fca:	95 95       	asr	r25
     fcc:	87 95       	ror	r24
     fce:	95 95       	asr	r25
     fd0:	87 95       	ror	r24
     fd2:	88 0f       	add	r24, r24
     fd4:	98 2f       	mov	r25, r24
     fd6:	99 0f       	add	r25, r25
     fd8:	99 0f       	add	r25, r25
     fda:	89 0f       	add	r24, r25
     fdc:	2f 70       	andi	r18, 0x0F	; 15
     fde:	82 0f       	add	r24, r18
     fe0:	82 83       	std	Z+2, r24	; 0x02
     fe2:	2c 81       	ldd	r18, Y+4	; 0x04
     fe4:	82 2f       	mov	r24, r18
     fe6:	8f 73       	andi	r24, 0x3F	; 63
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	95 95       	asr	r25
     fec:	87 95       	ror	r24
     fee:	95 95       	asr	r25
     ff0:	87 95       	ror	r24
     ff2:	95 95       	asr	r25
     ff4:	87 95       	ror	r24
     ff6:	95 95       	asr	r25
     ff8:	87 95       	ror	r24
     ffa:	88 0f       	add	r24, r24
     ffc:	98 2f       	mov	r25, r24
     ffe:	99 0f       	add	r25, r25
    1000:	99 0f       	add	r25, r25
    1002:	89 0f       	add	r24, r25
    1004:	2f 70       	andi	r18, 0x0F	; 15
    1006:	82 0f       	add	r24, r18
    1008:	83 83       	std	Z+3, r24	; 0x03
    100a:	2e 81       	ldd	r18, Y+6	; 0x06
    100c:	82 2f       	mov	r24, r18
    100e:	8f 71       	andi	r24, 0x1F	; 31
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	95 95       	asr	r25
    1014:	87 95       	ror	r24
    1016:	95 95       	asr	r25
    1018:	87 95       	ror	r24
    101a:	95 95       	asr	r25
    101c:	87 95       	ror	r24
    101e:	95 95       	asr	r25
    1020:	87 95       	ror	r24
    1022:	88 0f       	add	r24, r24
    1024:	98 2f       	mov	r25, r24
    1026:	99 0f       	add	r25, r25
    1028:	99 0f       	add	r25, r25
    102a:	89 0f       	add	r24, r25
    102c:	2f 70       	andi	r18, 0x0F	; 15
    102e:	82 0f       	add	r24, r18
    1030:	84 83       	std	Z+4, r24	; 0x04
    1032:	8f 81       	ldd	r24, Y+7	; 0x07
    1034:	98 2f       	mov	r25, r24
    1036:	92 95       	swap	r25
    1038:	9f 70       	andi	r25, 0x0F	; 15
    103a:	99 0f       	add	r25, r25
    103c:	29 2f       	mov	r18, r25
    103e:	22 0f       	add	r18, r18
    1040:	22 0f       	add	r18, r18
    1042:	92 0f       	add	r25, r18
    1044:	8f 70       	andi	r24, 0x0F	; 15
    1046:	89 0f       	add	r24, r25
    1048:	85 83       	std	Z+5, r24	; 0x05
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	27 96       	adiw	r28, 0x07	; 7
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

000018b4 <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	2d 97       	sbiw	r28, 0x0d	; 13
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    18d4:	85 e0       	ldi	r24, 0x05	; 5
    18d6:	ed e0       	ldi	r30, 0x0D	; 13
    18d8:	fd e0       	ldi	r31, 0x0D	; 13
    18da:	de 01       	movw	r26, r28
    18dc:	13 96       	adiw	r26, 0x03	; 3
    18de:	01 90       	ld	r0, Z+
    18e0:	0d 92       	st	X+, r0
    18e2:	8a 95       	dec	r24
    18e4:	e1 f7       	brne	.-8      	; 0x18de <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    18e6:	ce 01       	movw	r24, r28
    18e8:	08 96       	adiw	r24, 0x08	; 8
    18ea:	0e 94 95 07 	call	0xf2a	; 0xf2a <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    18ee:	89 85       	ldd	r24, Y+9	; 0x09
    18f0:	81 0f       	add	r24, r17
	dt.minute %= 60;
    18f2:	99 e8       	ldi	r25, 0x89	; 137
    18f4:	89 9f       	mul	r24, r25
    18f6:	91 2d       	mov	r25, r1
    18f8:	11 24       	eor	r1, r1
    18fa:	92 95       	swap	r25
    18fc:	96 95       	lsr	r25
    18fe:	97 70       	andi	r25, 0x07	; 7
    1900:	2c e3       	ldi	r18, 0x3C	; 60
    1902:	92 9f       	mul	r25, r18
    1904:	80 19       	sub	r24, r0
    1906:	11 24       	eor	r1, r1
    1908:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    190a:	ae 01       	movw	r20, r28
    190c:	4f 5f       	subi	r20, 0xFF	; 255
    190e:	5f 4f       	sbci	r21, 0xFF	; 255
    1910:	60 e8       	ldi	r22, 0x80	; 128
    1912:	22 e0       	ldi	r18, 0x02	; 2
    1914:	81 e5       	ldi	r24, 0x51	; 81
    1916:	0e 94 92 1b 	call	0x3724	; 0x3724 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    191a:	81 11       	cpse	r24, r1
    191c:	20 c0       	rjmp	.+64     	; 0x195e <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    191e:	99 85       	ldd	r25, Y+9	; 0x09
    1920:	8d ec       	ldi	r24, 0xCD	; 205
    1922:	98 9f       	mul	r25, r24
    1924:	81 2d       	mov	r24, r1
    1926:	11 24       	eor	r1, r1
    1928:	86 95       	lsr	r24
    192a:	86 95       	lsr	r24
    192c:	86 95       	lsr	r24
    192e:	40 e1       	ldi	r20, 0x10	; 16
    1930:	84 9f       	mul	r24, r20
    1932:	90 01       	movw	r18, r0
    1934:	11 24       	eor	r1, r1
    1936:	88 0f       	add	r24, r24
    1938:	38 2f       	mov	r19, r24
    193a:	33 0f       	add	r19, r19
    193c:	33 0f       	add	r19, r19
    193e:	83 0f       	add	r24, r19
    1940:	98 1b       	sub	r25, r24
    1942:	92 2b       	or	r25, r18
    1944:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    1946:	ae 01       	movw	r20, r28
    1948:	4d 5f       	subi	r20, 0xFD	; 253
    194a:	5f 4f       	sbci	r21, 0xFF	; 255
    194c:	60 e8       	ldi	r22, 0x80	; 128
    194e:	25 e0       	ldi	r18, 0x05	; 5
    1950:	81 e5       	ldi	r24, 0x51	; 81
    1952:	0e 94 92 1b 	call	0x3724	; 0x3724 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1956:	88 23       	and	r24, r24
    1958:	21 f0       	breq	.+8      	; 0x1962 <RTC_set_wake_up_interrupt_minutes+0xae>
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	01 c0       	rjmp	.+2      	; 0x1964 <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    1962:	80 e0       	ldi	r24, 0x00	; 0
}
    1964:	2d 96       	adiw	r28, 0x0d	; 13
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

0000106a <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    106a:	4f 92       	push	r4
    106c:	5f 92       	push	r5
    106e:	6f 92       	push	r6
    1070:	7f 92       	push	r7
    1072:	8f 92       	push	r8
    1074:	9f 92       	push	r9
    1076:	af 92       	push	r10
    1078:	bf 92       	push	r11
    107a:	cf 92       	push	r12
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	00 d0       	rcall	.+0      	; 0x108c <RTC_datetime_to_ts+0x22>
    108c:	00 d0       	rcall	.+0      	; 0x108e <RTC_datetime_to_ts+0x24>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <RTC_datetime_to_ts+0x26>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	f9 01       	movw	r30, r18
    1096:	49 2e       	mov	r4, r25
    1098:	51 2c       	mov	r5, r1
    109a:	61 2c       	mov	r6, r1
    109c:	71 2c       	mov	r7, r1
    109e:	03 2e       	mov	r0, r19
    10a0:	3a e1       	ldi	r19, 0x1A	; 26
    10a2:	44 0c       	add	r4, r4
    10a4:	55 1c       	adc	r5, r5
    10a6:	66 1c       	adc	r6, r6
    10a8:	77 1c       	adc	r7, r7
    10aa:	3a 95       	dec	r19
    10ac:	d1 f7       	brne	.-12     	; 0x10a2 <RTC_datetime_to_ts+0x38>
    10ae:	30 2d       	mov	r19, r0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a0 e0       	ldi	r26, 0x00	; 0
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	07 2e       	mov	r0, r23
    10b8:	76 e1       	ldi	r23, 0x16	; 22
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	aa 1f       	adc	r26, r26
    10c0:	bb 1f       	adc	r27, r27
    10c2:	7a 95       	dec	r23
    10c4:	d1 f7       	brne	.-12     	; 0x10ba <RTC_datetime_to_ts+0x50>
    10c6:	70 2d       	mov	r23, r0
    10c8:	84 29       	or	r24, r4
    10ca:	95 29       	or	r25, r5
    10cc:	a6 29       	or	r26, r6
    10ce:	b7 29       	or	r27, r7
    10d0:	87 2e       	mov	r8, r23
    10d2:	91 2c       	mov	r9, r1
    10d4:	a1 2c       	mov	r10, r1
    10d6:	b1 2c       	mov	r11, r1
    10d8:	07 2e       	mov	r0, r23
    10da:	71 e1       	ldi	r23, 0x11	; 17
    10dc:	88 0c       	add	r8, r8
    10de:	99 1c       	adc	r9, r9
    10e0:	aa 1c       	adc	r10, r10
    10e2:	bb 1c       	adc	r11, r11
    10e4:	7a 95       	dec	r23
    10e6:	d1 f7       	brne	.-12     	; 0x10dc <RTC_datetime_to_ts+0x72>
    10e8:	70 2d       	mov	r23, r0
    10ea:	88 29       	or	r24, r8
    10ec:	99 29       	or	r25, r9
    10ee:	aa 29       	or	r26, r10
    10f0:	bb 29       	or	r27, r11
    10f2:	c6 2e       	mov	r12, r22
    10f4:	d1 2c       	mov	r13, r1
    10f6:	e1 2c       	mov	r14, r1
    10f8:	f1 2c       	mov	r15, r1
    10fa:	0b 2e       	mov	r0, r27
    10fc:	bc e0       	ldi	r27, 0x0C	; 12
    10fe:	cc 0c       	add	r12, r12
    1100:	dd 1c       	adc	r13, r13
    1102:	ee 1c       	adc	r14, r14
    1104:	ff 1c       	adc	r15, r15
    1106:	ba 95       	dec	r27
    1108:	d1 f7       	brne	.-12     	; 0x10fe <RTC_datetime_to_ts+0x94>
    110a:	b0 2d       	mov	r27, r0
    110c:	8c 29       	or	r24, r12
    110e:	9d 29       	or	r25, r13
    1110:	ae 29       	or	r26, r14
    1112:	bf 29       	or	r27, r15
    1114:	05 2f       	mov	r16, r21
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	00 0f       	add	r16, r16
    111e:	11 1f       	adc	r17, r17
    1120:	22 1f       	adc	r18, r18
    1122:	33 1f       	adc	r19, r19
    1124:	00 0f       	add	r16, r16
    1126:	11 1f       	adc	r17, r17
    1128:	22 1f       	adc	r18, r18
    112a:	33 1f       	adc	r19, r19
    112c:	00 0f       	add	r16, r16
    112e:	11 1f       	adc	r17, r17
    1130:	22 1f       	adc	r18, r18
    1132:	33 1f       	adc	r19, r19
    1134:	00 0f       	add	r16, r16
    1136:	11 1f       	adc	r17, r17
    1138:	22 1f       	adc	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	00 0f       	add	r16, r16
    113e:	11 1f       	adc	r17, r17
    1140:	22 1f       	adc	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	00 0f       	add	r16, r16
    1146:	11 1f       	adc	r17, r17
    1148:	22 1f       	adc	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	80 2b       	or	r24, r16
    114e:	91 2b       	or	r25, r17
    1150:	a2 2b       	or	r26, r18
    1152:	b3 2b       	or	r27, r19
    1154:	84 2b       	or	r24, r20
    1156:	b0 83       	st	Z, r27
    1158:	a1 83       	std	Z+1, r26	; 0x01
    115a:	92 83       	std	Z+2, r25	; 0x02
    115c:	83 83       	std	Z+3, r24	; 0x03
    115e:	26 96       	adiw	r28, 0x06	; 6
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	7f 90       	pop	r7
    1184:	6f 90       	pop	r6
    1186:	5f 90       	pop	r5
    1188:	4f 90       	pop	r4
    118a:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

0000359e <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    359e:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    35a0:	54 81       	ldd	r21, Z+4	; 0x04
    35a2:	43 81       	ldd	r20, Z+3	; 0x03
    35a4:	31 81       	ldd	r19, Z+1	; 0x01
    35a6:	20 81       	ld	r18, Z
    35a8:	65 2f       	mov	r22, r21
    35aa:	74 2f       	mov	r23, r20
    35ac:	83 2f       	mov	r24, r19
    35ae:	92 2f       	mov	r25, r18
    35b0:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
}
    35b4:	cb 01       	movw	r24, r22
    35b6:	08 95       	ret

Disassembly of section .text.init_measurement:

00002ee2 <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    2ee2:	25 e0       	ldi	r18, 0x05	; 5
    2ee4:	40 e1       	ldi	r20, 0x10	; 16
    2ee6:	53 e0       	ldi	r21, 0x03	; 3
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	81 e6       	ldi	r24, 0x61	; 97
    2eec:	0e 94 92 1b 	call	0x3724	; 0x3724 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    2ef0:	81 11       	cpse	r24, r1
    2ef2:	0f c0       	rjmp	.+30     	; 0x2f12 <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    2ef4:	25 e0       	ldi	r18, 0x05	; 5
    2ef6:	45 e1       	ldi	r20, 0x15	; 21
    2ef8:	53 e0       	ldi	r21, 0x03	; 3
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	81 e6       	ldi	r24, 0x61	; 97
    2efe:	0e 94 92 1b 	call	0x3724	; 0x3724 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    2f02:	81 11       	cpse	r24, r1
    2f04:	08 c0       	rjmp	.+16     	; 0x2f16 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    2f06:	0e 94 1e 1c 	call	0x383c	; 0x383c <SCD30_HAL_data_ready>
    2f0a:	88 23       	and	r24, r24
    2f0c:	e1 f3       	breq	.-8      	; 0x2f06 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    2f12:	82 e0       	ldi	r24, 0x02	; 2
    2f14:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    2f16:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    2f18:	08 95       	ret

Disassembly of section .text.validate_data:

0000315c <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
    3160:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    3162:	62 e0       	ldi	r22, 0x02	; 2
    3164:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <calc_crc8>
	if(data[2]!=crc) return false;
    3168:	9a 81       	ldd	r25, Y+2	; 0x02
    316a:	89 13       	cpse	r24, r25
    316c:	0a c0       	rjmp	.+20     	; 0x3182 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    316e:	62 e0       	ldi	r22, 0x02	; 2
    3170:	ce 01       	movw	r24, r28
    3172:	03 96       	adiw	r24, 0x03	; 3
    3174:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <calc_crc8>
	if(data[5]!=crc) return false;
    3178:	9d 81       	ldd	r25, Y+5	; 0x05
    317a:	89 17       	cp	r24, r25
    317c:	21 f0       	breq	.+8      	; 0x3186 <validate_data+0x2a>
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	03 c0       	rjmp	.+6      	; 0x3188 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	01 c0       	rjmp	.+2      	; 0x3188 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    3186:	81 e0       	ldi	r24, 0x01	; 1
}
    3188:	df 91       	pop	r29
    318a:	cf 91       	pop	r28
    318c:	08 95       	ret

Disassembly of section .text.read_value:

00001c26 <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <read_value+0xa>
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <read_value+0xc>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <read_value+0xe>
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	9f ef       	ldi	r25, 0xFF	; 255
    1c3e:	f8 01       	movw	r30, r16
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    1c44:	0e 94 1e 1c 	call	0x383c	; 0x383c <SCD30_HAL_data_ready>
    1c48:	81 11       	cpse	r24, r1
    1c4a:	07 c0       	rjmp	.+14     	; 0x1c5a <read_value+0x34>
		*value=0xfffe;
    1c4c:	8e ef       	ldi	r24, 0xFE	; 254
    1c4e:	9f ef       	ldi	r25, 0xFF	; 255
    1c50:	f8 01       	movw	r30, r16
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	2c c0       	rjmp	.+88     	; 0x1cb2 <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    1c5a:	22 e0       	ldi	r18, 0x02	; 2
    1c5c:	4d e1       	ldi	r20, 0x1D	; 29
    1c5e:	53 e0       	ldi	r21, 0x03	; 3
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	81 e6       	ldi	r24, 0x61	; 97
    1c64:	0e 94 92 1b 	call	0x3724	; 0x3724 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1c68:	81 11       	cpse	r24, r1
    1c6a:	1e c0       	rjmp	.+60     	; 0x1ca8 <read_value+0x82>
    1c6c:	8f e3       	ldi	r24, 0x3F	; 63
    1c6e:	9f e1       	ldi	r25, 0x1F	; 31
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <read_value+0x4a>
    1c74:	00 c0       	rjmp	.+0      	; 0x1c76 <read_value+0x50>
    1c76:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    1c78:	46 e0       	ldi	r20, 0x06	; 6
    1c7a:	be 01       	movw	r22, r28
    1c7c:	6f 5f       	subi	r22, 0xFF	; 255
    1c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c80:	81 e6       	ldi	r24, 0x61	; 97
    1c82:	0e 94 95 19 	call	0x332a	; 0x332a <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1c86:	81 11       	cpse	r24, r1
    1c88:	11 c0       	rjmp	.+34     	; 0x1cac <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	0e 94 ae 18 	call	0x315c	; 0x315c <validate_data>
    1c92:	88 23       	and	r24, r24
    1c94:	69 f0       	breq	.+26     	; 0x1cb0 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    1c96:	ce 01       	movw	r24, r28
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	0e 94 cf 1a 	call	0x359e	; 0x359e <bytes_2_uint>
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	05 c0       	rjmp	.+10     	; 0x1cb2 <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    1cb2:	26 96       	adiw	r28, 0x06	; 6
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00002b9a <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    2b9a:	80 91 2e 0d 	lds	r24, 0x0D2E	; 0x800d2e <_data>
    2b9e:	90 91 2f 0d 	lds	r25, 0x0D2F	; 0x800d2f <_data+0x1>
    2ba2:	20 91 2c 0d 	lds	r18, 0x0D2C	; 0x800d2c <cntSamples>
    2ba6:	30 91 2d 0d 	lds	r19, 0x0D2D	; 0x800d2d <cntSamples+0x1>
    2baa:	a9 01       	movw	r20, r18
    2bac:	4f 5f       	subi	r20, 0xFF	; 255
    2bae:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb0:	50 93 2d 0d 	sts	0x0D2D, r21	; 0x800d2d <cntSamples+0x1>
    2bb4:	40 93 2c 0d 	sts	0x0D2C, r20	; 0x800d2c <cntSamples>
    2bb8:	22 0f       	add	r18, r18
    2bba:	33 1f       	adc	r19, r19
    2bbc:	82 0f       	add	r24, r18
    2bbe:	93 1f       	adc	r25, r19
    2bc0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <read_value>
	if(cntSamples>=_nSamples){
    2bc4:	20 91 2c 0d 	lds	r18, 0x0D2C	; 0x800d2c <cntSamples>
    2bc8:	30 91 2d 0d 	lds	r19, 0x0D2D	; 0x800d2d <cntSamples+0x1>
    2bcc:	80 91 30 0d 	lds	r24, 0x0D30	; 0x800d30 <_nSamples>
    2bd0:	90 91 31 0d 	lds	r25, 0x0D31	; 0x800d31 <_nSamples+0x1>
    2bd4:	28 17       	cp	r18, r24
    2bd6:	39 07       	cpc	r19, r25
    2bd8:	10 f0       	brcs	.+4      	; 0x2bde <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    2bda:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <TC1_HAL_stop>
    2bde:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

0000282a <SCD30_init_sampling>:
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();



SCD30_STATUS SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
    282e:	ec 01       	movw	r28, r24
	_nSamples=nSamples;
    2830:	70 93 31 0d 	sts	0x0D31, r23	; 0x800d31 <_nSamples+0x1>
    2834:	60 93 30 0d 	sts	0x0D30, r22	; 0x800d30 <_nSamples>
	cntSamples=0;
    2838:	10 92 2d 0d 	sts	0x0D2D, r1	; 0x800d2d <cntSamples+0x1>
    283c:	10 92 2c 0d 	sts	0x0D2C, r1	; 0x800d2c <cntSamples>
	_data=data;
    2840:	50 93 2f 0d 	sts	0x0D2F, r21	; 0x800d2f <_data+0x1>
    2844:	40 93 2e 0d 	sts	0x0D2E, r20	; 0x800d2e <_data>
	
	//Init
	SCD30_HAL_init();
    2848:	0e 94 be 1b 	call	0x377c	; 0x377c <SCD30_HAL_init>
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    284c:	6d ec       	ldi	r22, 0xCD	; 205
    284e:	75 e1       	ldi	r23, 0x15	; 21
    2850:	ce 01       	movw	r24, r28
    2852:	0e 94 15 18 	call	0x302a	; 0x302a <TC1_HAL_init>
	PM_HAL_SCD30_power(true);
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	0e 94 44 1b 	call	0x3688	; 0x3688 <PM_HAL_SCD30_power>
    285c:	2f ef       	ldi	r18, 0xFF	; 255
    285e:	83 ed       	ldi	r24, 0xD3	; 211
    2860:	90 e3       	ldi	r25, 0x30	; 48
    2862:	21 50       	subi	r18, 0x01	; 1
    2864:	80 40       	sbci	r24, 0x00	; 0
    2866:	90 40       	sbci	r25, 0x00	; 0
    2868:	e1 f7       	brne	.-8      	; 0x2862 <SCD30_init_sampling+0x38>
    286a:	00 c0       	rjmp	.+0      	; 0x286c <SCD30_init_sampling+0x42>
    286c:	00 00       	nop
	_delay_ms(2000);
	
	return init_measurement();
    286e:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <init_measurement>
}
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

000036ec <SCD30_deinit_sampling>:

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    36ec:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <TC1_HAL_stop>
	PM_HAL_SCD30_power(false);
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	0e 94 44 1b 	call	0x3688	; 0x3688 <PM_HAL_SCD30_power>
	_data=NULL;
    36f6:	10 92 2f 0d 	sts	0x0D2F, r1	; 0x800d2f <_data+0x1>
    36fa:	10 92 2e 0d 	sts	0x0D2E, r1	; 0x800d2e <_data>
    36fe:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

00003818 <SCD30_start_sampling>:
	
}

SCD30_STATUS SCD30_start_sampling(){
	vect_SCD_do_sample();
    3818:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <vect_SCD_do_sample>
	TC1_HAL_start();
    381c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <TC1_HAL_start>
	return SCD30_STATUS_SUCCESS;
}
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00003566 <SCD30_is_sampling_done>:

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    3566:	40 91 2c 0d 	lds	r20, 0x0D2C	; 0x800d2c <cntSamples>
    356a:	50 91 2d 0d 	lds	r21, 0x0D2D	; 0x800d2d <cntSamples+0x1>
    356e:	20 91 30 0d 	lds	r18, 0x0D30	; 0x800d30 <_nSamples>
    3572:	30 91 31 0d 	lds	r19, 0x0D31	; 0x800d31 <_nSamples+0x1>
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	42 17       	cp	r20, r18
    357a:	53 07       	cpc	r21, r19
    357c:	08 f4       	brcc	.+2      	; 0x3580 <SCD30_is_sampling_done+0x1a>
    357e:	80 e0       	ldi	r24, 0x00	; 0
}
    3580:	08 95       	ret

Disassembly of section .text.decode_stage_response:

0000364a <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    364a:	88 23       	and	r24, r24
    364c:	19 f0       	breq	.+6      	; 0x3654 <decode_stage_response+0xa>
    364e:	81 30       	cpi	r24, 0x01	; 1
    3650:	29 f0       	breq	.+10     	; 0x365c <decode_stage_response+0x12>
    3652:	02 c0       	rjmp	.+4      	; 0x3658 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    3654:	8c e0       	ldi	r24, 0x0C	; 12
    3656:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    3658:	81 e1       	ldi	r24, 0x11	; 17
    365a:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    365c:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    365e:	08 95       	ret

Disassembly of section .text.decode_join_response:

00003582 <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    3582:	83 30       	cpi	r24, 0x03	; 3
    3584:	51 f0       	breq	.+20     	; 0x359a <decode_join_response+0x18>
    3586:	84 30       	cpi	r24, 0x04	; 4
    3588:	21 f0       	breq	.+8      	; 0x3592 <decode_join_response+0x10>
    358a:	81 11       	cpse	r24, r1
    358c:	04 c0       	rjmp	.+8      	; 0x3596 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_INIT_RTC;
    358e:	85 e0       	ldi	r24, 0x05	; 5
    3590:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
    3592:	83 e0       	ldi	r24, 0x03	; 3
    3594:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    3596:	81 e1       	ldi	r24, 0x11	; 17
    3598:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_INIT_RTC;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    359a:	82 e0       	ldi	r24, 0x02	; 2
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    359c:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

0000361a <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    361a:	83 30       	cpi	r24, 0x03	; 3
    361c:	31 f0       	breq	.+12     	; 0x362a <decode_header_tail_response+0x10>
    361e:	85 30       	cpi	r24, 0x05	; 5
    3620:	31 f0       	breq	.+12     	; 0x362e <decode_header_tail_response+0x14>
    3622:	88 23       	and	r24, r24
    3624:	21 f0       	breq	.+8      	; 0x362e <decode_header_tail_response+0x14>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    3626:	81 e1       	ldi	r24, 0x11	; 17
    3628:	08 95       	ret
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    362a:	84 2f       	mov	r24, r20
    362c:	08 95       	ret

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
    362e:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3630:	08 95       	ret

Disassembly of section .text.join_lora:

00002028 <join_lora>:
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(4);
}

static LM_STATUS join_lora(){
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	c3 54       	subi	r28, 0x43	; 67
    2032:	d1 09       	sbc	r29, r1
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
	char deveui[]="0004A30B00F4547A";
    203e:	2c e4       	ldi	r18, 0x4C	; 76
    2040:	31 e0       	ldi	r19, 0x01	; 1
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	81 e1       	ldi	r24, 0x11	; 17
    2046:	f9 01       	movw	r30, r18
    2048:	de 01       	movw	r26, r28
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	74 2f       	mov	r23, r20
    204e:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__movmemx_qi>
	char appeui[]="70B3D57ED003F844";
    2052:	2d e5       	ldi	r18, 0x5D	; 93
    2054:	31 e0       	ldi	r19, 0x01	; 1
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	81 e1       	ldi	r24, 0x11	; 17
    205a:	f9 01       	movw	r30, r18
    205c:	de 01       	movw	r26, r28
    205e:	52 96       	adiw	r26, 0x12	; 18
    2060:	74 2f       	mov	r23, r20
    2062:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__movmemx_qi>
	char appkey[]="B88AD6D25A3B27C69A01F74C53F9A179";
    2066:	2e e6       	ldi	r18, 0x6E	; 110
    2068:	31 e0       	ldi	r19, 0x01	; 1
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	81 e2       	ldi	r24, 0x21	; 33
    206e:	f9 01       	movw	r30, r18
    2070:	de 01       	movw	r26, r28
    2072:	93 96       	adiw	r26, 0x23	; 35
    2074:	74 2f       	mov	r23, r20
    2076:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__movmemx_qi>
	
	return LM_join_network(deveui, appeui, appkey);
    207a:	ae 01       	movw	r20, r28
    207c:	4d 5d       	subi	r20, 0xDD	; 221
    207e:	5f 4f       	sbci	r21, 0xFF	; 255
    2080:	be 01       	movw	r22, r28
    2082:	6e 5e       	subi	r22, 0xEE	; 238
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	ce 01       	movw	r24, r28
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LM_join_network>
}
    208e:	cd 5b       	subi	r28, 0xBD	; 189
    2090:	df 4f       	sbci	r29, 0xFF	; 255
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	08 95       	ret

Disassembly of section .text.set_wakeup:

0000387c <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(4);
    387c:	84 e0       	ldi	r24, 0x04	; 4
    387e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <RTC_set_wake_up_interrupt_minutes>
}
    3882:	08 95       	ret

Disassembly of section .text.send_header:

00002db4 <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    2db4:	cf 93       	push	r28
    2db6:	df 93       	push	r29
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	e4 97       	sbiw	r28, 0x34	; 52
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    2dc8:	be 01       	movw	r22, r28
    2dca:	6c 5c       	subi	r22, 0xCC	; 204
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	ce 01       	movw	r24, r28
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	0e 94 c9 19 	call	0x3392	; 0x3392 <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    2dd6:	6c a9       	ldd	r22, Y+52	; 0x34
    2dd8:	ce 01       	movw	r24, r28
    2dda:	01 96       	adiw	r24, 0x01	; 1
    2ddc:	0e 94 3f 19 	call	0x327e	; 0x327e <LM_send_uplink>
}
    2de0:	e4 96       	adiw	r28, 0x34	; 52
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	08 95       	ret

Disassembly of section .text.stage_0:

00001718 <stage_0>:
/************************************************************************/
static STAGE_STATUS stage_0(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
    1718:	80 91 45 0d 	lds	r24, 0x0D45	; 0x800d45 <state_s0>
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	29 f1       	breq	.+74     	; 0x176a <stage_0+0x52>
    1720:	28 f4       	brcc	.+10     	; 0x172c <stage_0+0x14>
    1722:	88 23       	and	r24, r24
    1724:	51 f0       	breq	.+20     	; 0x173a <stage_0+0x22>
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	c1 f0       	breq	.+48     	; 0x175a <stage_0+0x42>
    172a:	f6 cf       	rjmp	.-20     	; 0x1718 <stage_0>
    172c:	84 30       	cpi	r24, 0x04	; 4
    172e:	09 f4       	brne	.+2      	; 0x1732 <stage_0+0x1a>
    1730:	4e c0       	rjmp	.+156    	; 0x17ce <stage_0+0xb6>
    1732:	30 f1       	brcs	.+76     	; 0x1780 <stage_0+0x68>
    1734:	85 30       	cpi	r24, 0x05	; 5
    1736:	81 f1       	breq	.+96     	; 0x1798 <stage_0+0x80>
    1738:	ef cf       	rjmp	.-34     	; 0x1718 <stage_0>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
    173a:	ee ee       	ldi	r30, 0xEE	; 238
    173c:	fc e0       	ldi	r31, 0x0C	; 12
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	46 e0       	ldi	r20, 0x06	; 6
    1744:	59 e0       	ldi	r21, 0x09	; 9
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	0e 94 15 14 	call	0x282a	; 0x282a <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    174e:	81 11       	cpse	r24, r1
    1750:	42 c0       	rjmp	.+132    	; 0x17d6 <stage_0+0xbe>
			
				state_s0=STAGE_GET_TIME;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	80 93 45 0d 	sts	0x0D45, r24	; 0x800d45 <state_s0>
			break;
    1758:	df cf       	rjmp	.-66     	; 0x1718 <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    175a:	87 e0       	ldi	r24, 0x07	; 7
    175c:	9d e0       	ldi	r25, 0x0D	; 13
    175e:	0e 94 95 07 	call	0xf2a	; 0xf2a <RTC_get_current_time>
				state_s0=STAGE_START;
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	80 93 45 0d 	sts	0x0D45, r24	; 0x800d45 <state_s0>
			break;
    1768:	d7 cf       	rjmp	.-82     	; 0x1718 <stage_0>
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 3d 1a 	call	0x347a	; 0x347a <ADC_meth_sens_power_on>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1770:	81 11       	cpse	r24, r1
    1772:	33 c0       	rjmp	.+102    	; 0x17da <stage_0+0xc2>
			
				SCD30_start_sampling();
    1774:	0e 94 0c 1c 	call	0x3818	; 0x3818 <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    1778:	83 e0       	ldi	r24, 0x03	; 3
    177a:	80 93 45 0d 	sts	0x0D45, r24	; 0x800d45 <state_s0>
			break;
    177e:	cc cf       	rjmp	.-104    	; 0x1718 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    1780:	0e 94 89 1b 	call	0x3712	; 0x3712 <ADC_meth_sens_ready>
    1784:	88 23       	and	r24, r24
    1786:	59 f1       	breq	.+86     	; 0x17de <stage_0+0xc6>
    1788:	0e 94 b3 1a 	call	0x3566	; 0x3566 <SCD30_is_sampling_done>
    178c:	88 23       	and	r24, r24
    178e:	49 f1       	breq	.+82     	; 0x17e2 <stage_0+0xca>
				state_s0=STAGE_UPDATE_MRPP;
    1790:	85 e0       	ldi	r24, 0x05	; 5
    1792:	80 93 45 0d 	sts	0x0D45, r24	; 0x800d45 <state_s0>
			break;
    1796:	c0 cf       	rjmp	.-128    	; 0x1718 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1798:	2e e1       	ldi	r18, 0x1E	; 30
    179a:	3d e0       	ldi	r19, 0x0D	; 13
    179c:	40 91 07 0d 	lds	r20, 0x0D07	; 0x800d07 <dt>
    17a0:	50 91 08 0d 	lds	r21, 0x0D08	; 0x800d08 <dt+0x1>
    17a4:	60 91 09 0d 	lds	r22, 0x0D09	; 0x800d09 <dt+0x2>
    17a8:	70 91 0a 0d 	lds	r23, 0x0D0A	; 0x800d0a <dt+0x3>
    17ac:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <dt+0x4>
    17b0:	90 91 0c 0d 	lds	r25, 0x0D0C	; 0x800d0c <dt+0x5>
    17b4:	0e 94 35 08 	call	0x106a	; 0x106a <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(1, ts, co2_data);
    17b8:	46 e0       	ldi	r20, 0x06	; 6
    17ba:	59 e0       	ldi	r21, 0x09	; 9
    17bc:	6e e1       	ldi	r22, 0x1E	; 30
    17be:	7d e0       	ldi	r23, 0x0D	; 13
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	0e 94 3c 11 	call	0x2278	; 0x2278 <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    17c6:	84 e0       	ldi	r24, 0x04	; 4
    17c8:	80 93 45 0d 	sts	0x0D45, r24	; 0x800d45 <state_s0>
			break;
    17cc:	a5 cf       	rjmp	.-182    	; 0x1718 <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    17ce:	0e 94 76 1b 	call	0x36ec	; 0x36ec <SCD30_deinit_sampling>
				return STAGE_DONE;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	08 95       	ret
				state_s0=STAGE_START;
			break;
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	08 95       	ret
    17e2:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    17e4:	08 95       	ret

Disassembly of section .text.stage_1:

0000139e <stage_1>:
/************************************************************************/
static STAGE_STATUS stage_1(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
    139e:	80 91 44 0d 	lds	r24, 0x0D44	; 0x800d44 <state_s1>
    13a2:	82 30       	cpi	r24, 0x02	; 2
    13a4:	81 f1       	breq	.+96     	; 0x1406 <stage_1+0x68>
    13a6:	28 f4       	brcc	.+10     	; 0x13b2 <stage_1+0x14>
    13a8:	88 23       	and	r24, r24
    13aa:	51 f0       	breq	.+20     	; 0x13c0 <stage_1+0x22>
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	19 f1       	breq	.+70     	; 0x13f6 <stage_1+0x58>
    13b0:	f6 cf       	rjmp	.-20     	; 0x139e <stage_1>
    13b2:	84 30       	cpi	r24, 0x04	; 4
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <stage_1+0x1a>
    13b6:	5d c0       	rjmp	.+186    	; 0x1472 <stage_1+0xd4>
    13b8:	70 f1       	brcs	.+92     	; 0x1416 <stage_1+0x78>
    13ba:	85 30       	cpi	r24, 0x05	; 5
    13bc:	c1 f1       	breq	.+112    	; 0x142e <stage_1+0x90>
    13be:	ef cf       	rjmp	.-34     	; 0x139e <stage_1>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
    13c0:	ee ee       	ldi	r30, 0xEE	; 238
    13c2:	fc e0       	ldi	r31, 0x0C	; 12
    13c4:	65 81       	ldd	r22, Z+5	; 0x05
    13c6:	76 81       	ldd	r23, Z+6	; 0x06
    13c8:	46 e0       	ldi	r20, 0x06	; 6
    13ca:	59 e0       	ldi	r21, 0x09	; 9
    13cc:	87 81       	ldd	r24, Z+7	; 0x07
    13ce:	90 85       	ldd	r25, Z+8	; 0x08
    13d0:	0e 94 15 14 	call	0x282a	; 0x282a <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    13d4:	81 11       	cpse	r24, r1
    13d6:	53 c0       	rjmp	.+166    	; 0x147e <stage_1+0xe0>
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
    13d8:	ee ee       	ldi	r30, 0xEE	; 238
    13da:	fc e0       	ldi	r31, 0x0C	; 12
    13dc:	62 85       	ldd	r22, Z+10	; 0x0a
    13de:	73 85       	ldd	r23, Z+11	; 0x0b
    13e0:	4e ea       	ldi	r20, 0xAE	; 174
    13e2:	56 e0       	ldi	r21, 0x06	; 6
    13e4:	84 85       	ldd	r24, Z+12	; 0x0c
    13e6:	0e 94 de 11 	call	0x23bc	; 0x23bc <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    13ea:	81 11       	cpse	r24, r1
    13ec:	4a c0       	rjmp	.+148    	; 0x1482 <stage_1+0xe4>
				
				state_s1=STAGE_GET_TIME;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 93 44 0d 	sts	0x0D44, r24	; 0x800d44 <state_s1>
			break;
    13f4:	d4 cf       	rjmp	.-88     	; 0x139e <stage_1>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    13f6:	87 e0       	ldi	r24, 0x07	; 7
    13f8:	9d e0       	ldi	r25, 0x0D	; 13
    13fa:	0e 94 95 07 	call	0xf2a	; 0xf2a <RTC_get_current_time>
				
				state_s1=STAGE_START;
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	80 93 44 0d 	sts	0x0D44, r24	; 0x800d44 <state_s1>
			break;
    1404:	cc cf       	rjmp	.-104    	; 0x139e <stage_1>
			
			case STAGE_START:
				SCD30_start_sampling();
    1406:	0e 94 0c 1c 	call	0x3818	; 0x3818 <SCD30_start_sampling>
				ADC_start_sampling();
    140a:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    140e:	83 e0       	ldi	r24, 0x03	; 3
    1410:	80 93 44 0d 	sts	0x0D44, r24	; 0x800d44 <state_s1>
			break;
    1414:	c4 cf       	rjmp	.-120    	; 0x139e <stage_1>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1416:	0e 94 b3 1a 	call	0x3566	; 0x3566 <SCD30_is_sampling_done>
    141a:	88 23       	and	r24, r24
    141c:	a1 f1       	breq	.+104    	; 0x1486 <stage_1+0xe8>
    141e:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <ADC_is_sampling_done>
    1422:	88 23       	and	r24, r24
    1424:	91 f1       	breq	.+100    	; 0x148a <stage_1+0xec>
				state_s1=STAGE_UPDATE_MRPP;
    1426:	85 e0       	ldi	r24, 0x05	; 5
    1428:	80 93 44 0d 	sts	0x0D44, r24	; 0x800d44 <state_s1>
			break;
    142c:	b8 cf       	rjmp	.-144    	; 0x139e <stage_1>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    142e:	2e e1       	ldi	r18, 0x1E	; 30
    1430:	3d e0       	ldi	r19, 0x0D	; 13
    1432:	40 91 07 0d 	lds	r20, 0x0D07	; 0x800d07 <dt>
    1436:	50 91 08 0d 	lds	r21, 0x0D08	; 0x800d08 <dt+0x1>
    143a:	60 91 09 0d 	lds	r22, 0x0D09	; 0x800d09 <dt+0x2>
    143e:	70 91 0a 0d 	lds	r23, 0x0D0A	; 0x800d0a <dt+0x3>
    1442:	80 91 0b 0d 	lds	r24, 0x0D0B	; 0x800d0b <dt+0x4>
    1446:	90 91 0c 0d 	lds	r25, 0x0D0C	; 0x800d0c <dt+0x5>
    144a:	0e 94 35 08 	call	0x106a	; 0x106a <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(2, ts, co2_data);
    144e:	46 e0       	ldi	r20, 0x06	; 6
    1450:	59 e0       	ldi	r21, 0x09	; 9
    1452:	6e e1       	ldi	r22, 0x1E	; 30
    1454:	7d e0       	ldi	r23, 0x0D	; 13
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	0e 94 3c 11 	call	0x2278	; 0x2278 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(3, ts, meth_data);
    145c:	4e ea       	ldi	r20, 0xAE	; 174
    145e:	56 e0       	ldi	r21, 0x06	; 6
    1460:	6e e1       	ldi	r22, 0x1E	; 30
    1462:	7d e0       	ldi	r23, 0x0D	; 13
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	0e 94 3c 11 	call	0x2278	; 0x2278 <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    146a:	84 e0       	ldi	r24, 0x04	; 4
    146c:	80 93 44 0d 	sts	0x0D44, r24	; 0x800d44 <state_s1>
			break;
    1470:	96 cf       	rjmp	.-212    	; 0x139e <stage_1>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    1472:	0e 94 76 1b 	call	0x36ec	; 0x36ec <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    1476:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <ADC_deinit_sampling>
				return STAGE_DONE;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	08 95       	ret
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	08 95       	ret
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	08 95       	ret
    148a:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    148c:	08 95       	ret

Disassembly of section .text.send_body:

00002d74 <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	e4 97       	sbiw	r28, 0x34	; 52
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    2d88:	ae 01       	movw	r20, r28
    2d8a:	4c 5c       	subi	r20, 0xCC	; 204
    2d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d8e:	be 01       	movw	r22, r28
    2d90:	6f 5f       	subi	r22, 0xFF	; 255
    2d92:	7f 4f       	sbci	r23, 0xFF	; 255
    2d94:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    2d98:	6c a9       	ldd	r22, Y+52	; 0x34
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	0e 94 3f 19 	call	0x327e	; 0x327e <LM_send_uplink>
}
    2da2:	e4 96       	adiw	r28, 0x34	; 52
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	df 91       	pop	r29
    2db0:	cf 91       	pop	r28
    2db2:	08 95       	ret

Disassembly of section .text.decode_body_response:

000033d6 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    33d6:	cf 93       	push	r28
	switch(status){
    33d8:	63 30       	cpi	r22, 0x03	; 3
    33da:	59 f0       	breq	.+22     	; 0x33f2 <decode_body_response+0x1c>
    33dc:	65 30       	cpi	r22, 0x05	; 5
    33de:	21 f0       	breq	.+8      	; 0x33e8 <decode_body_response+0x12>
    33e0:	66 23       	and	r22, r22
    33e2:	11 f0       	breq	.+4      	; 0x33e8 <decode_body_response+0x12>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    33e4:	81 e1       	ldi	r24, 0x11	; 17
    33e6:	06 c0       	rjmp	.+12     	; 0x33f4 <decode_body_response+0x1e>
    33e8:	c4 2f       	mov	r28, r20

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			MRPP_set_body_sent(bodyIndex);
    33ea:	0e 94 06 1c 	call	0x380c	; 0x380c <MRPP_set_body_sent>
			return success;
    33ee:	8c 2f       	mov	r24, r28
    33f0:	01 c0       	rjmp	.+2      	; 0x33f4 <decode_body_response+0x1e>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    33f2:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    33f4:	cf 91       	pop	r28
    33f6:	08 95       	ret

Disassembly of section .text.send_tail:

00002df2 <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	e4 97       	sbiw	r28, 0x34	; 52
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    2e06:	be 01       	movw	r22, r28
    2e08:	6c 5c       	subi	r22, 0xCC	; 204
    2e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	01 96       	adiw	r24, 0x01	; 1
    2e10:	0e 94 da 19 	call	0x33b4	; 0x33b4 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    2e14:	6c a9       	ldd	r22, Y+52	; 0x34
    2e16:	ce 01       	movw	r24, r28
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	0e 94 3f 19 	call	0x327e	; 0x327e <LM_send_uplink>
}
    2e1e:	e4 96       	adiw	r28, 0x34	; 52
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	08 95       	ret

Disassembly of section .text.send_msg:

00003632 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart0_hal_send_string(msg);
    3632:	0e 94 74 11 	call	0x22e8	; 0x22e8 <uart0_hal_send_string>
    3636:	2f ef       	ldi	r18, 0xFF	; 255
    3638:	80 e7       	ldi	r24, 0x70	; 112
    363a:	92 e0       	ldi	r25, 0x02	; 2
    363c:	21 50       	subi	r18, 0x01	; 1
    363e:	80 40       	sbci	r24, 0x00	; 0
    3640:	90 40       	sbci	r25, 0x00	; 0
    3642:	e1 f7       	brne	.-8      	; 0x363c <send_msg+0xa>
    3644:	00 c0       	rjmp	.+0      	; 0x3646 <send_msg+0x14>
    3646:	00 00       	nop
    3648:	08 95       	ret

Disassembly of section .text.MAINPG_start:

000009fe <MAINPG_start>:
static uint8_t colsNumber=3;

static void send_msg(const char msg[]);


void MAINPG_start(){
 9fe:	1f 93       	push	r17
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	STAGE_STATUS stageStatus;
	//bool fromSleep=false;
	bool fromSleep=true;
 a04:	d1 e0       	ldi	r29, 0x01	; 1

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
 a06:	c0 e0       	ldi	r28, 0x00	; 0
 a08:	10 c0       	rjmp	.+32     	; 0xa2a <MAINPG_start+0x2c>
				
				//Set pull up
				set_bit(PORTB, 0);
				set_bit(PORTB, 1);
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a0a:	c4 e0       	ldi	r28, 0x04	; 4
 a0c:	0e c0       	rjmp	.+28     	; 0xa2a <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 a0e:	c1 e1       	ldi	r28, 0x11	; 17
 a10:	0c c0       	rjmp	.+24     	; 0xa2a <MAINPG_start+0x2c>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 a12:	c1 e1       	ldi	r28, 0x11	; 17
 a14:	0a c0       	rjmp	.+20     	; 0xa2a <MAINPG_start+0x2c>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 a16:	c1 e1       	ldi	r28, 0x11	; 17
 a18:	08 c0       	rjmp	.+16     	; 0xa2a <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 a1a:	c1 e1       	ldi	r28, 0x11	; 17
 a1c:	06 c0       	rjmp	.+12     	; 0xa2a <MAINPG_start+0x2c>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
 a1e:	c1 2f       	mov	r28, r17
 a20:	04 c0       	rjmp	.+8      	; 0xa2a <MAINPG_start+0x2c>
 a22:	c1 2f       	mov	r28, r17
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <MAINPG_start+0x2c>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
 a26:	1c 2f       	mov	r17, r28
					state=MAINPG_SEND_DATA;
 a28:	cc e0       	ldi	r28, 0x0C	; 12
	//bool fromSleep=false;
	bool fromSleep=true;
	
	
	while(1){
		switch(state){
 a2a:	ec 2f       	mov	r30, r28
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	e3 31       	cpi	r30, 0x13	; 19
 a30:	f1 05       	cpc	r31, r1
 a32:	d8 f7       	brcc	.-10     	; 0xa2a <MAINPG_start+0x2c>
 a34:	ec 5a       	subi	r30, 0xAC	; 172
 a36:	ff 4f       	sbci	r31, 0xFF	; 255
 a38:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
 a3c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <uart0_hal_init>
				uart1_hal_init();
 a40:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <uart1_hal_init>
				TWI_HAL_init();
 a44:	0e 94 80 1b 	call	0x3700	; 0x3700 <TWI_HAL_init>
				TC2_HAL_init();
 a48:	0e 94 1d 1a 	call	0x343a	; 0x343a <TC2_HAL_init>
				PM_HAL_adc_power_init();
 a4c:	0e 94 a2 1b 	call	0x3744	; 0x3744 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
 a50:	0e 94 a9 1b 	call	0x3752	; 0x3752 <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
 a54:	0e 94 b7 1b 	call	0x376e	; 0x376e <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
 a58:	0e 94 b0 1b 	call	0x3760	; 0x3760 <PM_HAL_SCD30_power_init>
				
				//Set pull up
				set_bit(PORTB, 0);
 a5c:	85 b1       	in	r24, 0x05	; 5
 a5e:	81 60       	ori	r24, 0x01	; 1
 a60:	85 b9       	out	0x05, r24	; 5
				set_bit(PORTB, 1);
 a62:	85 b1       	in	r24, 0x05	; 5
 a64:	82 60       	ori	r24, 0x02	; 2
 a66:	85 b9       	out	0x05, r24	; 5
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a68:	d1 11       	cpse	r29, r1
 a6a:	cf cf       	rjmp	.-98     	; 0xa0a <MAINPG_start+0xc>
 a6c:	c1 e0       	ldi	r28, 0x01	; 1
 a6e:	dd cf       	rjmp	.-70     	; 0xa2a <MAINPG_start+0x2c>
			break;
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
 a70:	6f e8       	ldi	r22, 0x8F	; 143
 a72:	71 e0       	ldi	r23, 0x01	; 1
 a74:	80 e0       	ldi	r24, 0x00	; 0
 a76:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				lmStatus=join_lora();
 a7a:	0e 94 14 10 	call	0x2028	; 0x2028 <join_lora>
				state=decode_join_response(lmStatus);
 a7e:	0e 94 c1 1a 	call	0x3582	; 0x3582 <decode_join_response>
 a82:	c8 2f       	mov	r28, r24
			break;
 a84:	d2 cf       	rjmp	.-92     	; 0xa2a <MAINPG_start+0x2c>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
 a86:	66 e9       	ldi	r22, 0x96	; 150
 a88:	71 e0       	ldi	r23, 0x01	; 1
 a8a:	80 e0       	ldi	r24, 0x00	; 0
 a8c:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				lmStatus=LM_wake_up();
 a90:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 a94:	81 11       	cpse	r24, r1
 a96:	bb cf       	rjmp	.-138    	; 0xa0e <MAINPG_start+0x10>
 a98:	c5 e0       	ldi	r28, 0x05	; 5
 a9a:	c7 cf       	rjmp	.-114    	; 0xa2a <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
 a9c:	65 ea       	ldi	r22, 0xA5	; 165
 a9e:	71 e0       	ldi	r23, 0x01	; 1
 aa0:	80 e0       	ldi	r24, 0x00	; 0
 aa2:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
 aa6:	2f ef       	ldi	r18, 0xFF	; 255
 aa8:	81 e1       	ldi	r24, 0x11	; 17
 aaa:	9a e7       	ldi	r25, 0x7A	; 122
 aac:	21 50       	subi	r18, 0x01	; 1
 aae:	80 40       	sbci	r24, 0x00	; 0
 ab0:	90 40       	sbci	r25, 0x00	; 0
 ab2:	e1 f7       	brne	.-8      	; 0xaac <MAINPG_start+0xae>
 ab4:	00 c0       	rjmp	.+0      	; 0xab6 <MAINPG_start+0xb8>
 ab6:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
 ab8:	c1 e0       	ldi	r28, 0x01	; 1
			break;
 aba:	b7 cf       	rjmp	.-146    	; 0xa2a <MAINPG_start+0x2c>
			
			case MAINPG_LORA_JOIN_CONF_ERR:
				print_debug("Conf err\n\r");
 abc:	61 eb       	ldi	r22, 0xB1	; 177
 abe:	71 e0       	ldi	r23, 0x01	; 1
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				state=MAINPG_END;
 ac6:	c2 e1       	ldi	r28, 0x12	; 18
			break;
 ac8:	b0 cf       	rjmp	.-160    	; 0xa2a <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
 aca:	6c eb       	ldi	r22, 0xBC	; 188
 acc:	71 e0       	ldi	r23, 0x01	; 1
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	0e 94 78 13 	call	0x26f0	; 0x26f0 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 ada:	81 11       	cpse	r24, r1
 adc:	9a cf       	rjmp	.-204    	; 0xa12 <MAINPG_start+0x14>
 ade:	c7 e0       	ldi	r28, 0x07	; 7
 ae0:	a4 cf       	rjmp	.-184    	; 0xa2a <MAINPG_start+0x2c>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
 ae2:	67 ec       	ldi	r22, 0xC7	; 199
 ae4:	71 e0       	ldi	r23, 0x01	; 1
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
 aec:	0e 94 49 18 	call	0x3092	; 0x3092 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 af0:	81 11       	cpse	r24, r1
 af2:	91 cf       	rjmp	.-222    	; 0xa16 <MAINPG_start+0x18>
 af4:	c6 e0       	ldi	r28, 0x06	; 6
 af6:	99 cf       	rjmp	.-206    	; 0xa2a <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
 af8:	69 ed       	ldi	r22, 0xD9	; 217
 afa:	71 e0       	ldi	r23, 0x01	; 1
 afc:	80 e0       	ldi	r24, 0x00	; 0
 afe:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				rtcStatus=set_wakeup();
 b02:	0e 94 3e 1c 	call	0x387c	; 0x387c <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 b06:	81 11       	cpse	r24, r1
 b08:	88 cf       	rjmp	.-240    	; 0xa1a <MAINPG_start+0x1c>
 b0a:	c8 e0       	ldi	r28, 0x08	; 8
 b0c:	8e cf       	rjmp	.-228    	; 0xa2a <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
 b0e:	6e ee       	ldi	r22, 0xEE	; 238
 b10:	71 e0       	ldi	r23, 0x01	; 1
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				MRPP_init_group(cols, colsNumber);
 b18:	63 e0       	ldi	r22, 0x03	; 3
 b1a:	8e ee       	ldi	r24, 0xEE	; 238
 b1c:	9c e0       	ldi	r25, 0x0C	; 12
 b1e:	0e 94 95 18 	call	0x312a	; 0x312a <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
 b22:	c9 e0       	ldi	r28, 0x09	; 9
			break;
 b24:	82 cf       	rjmp	.-252    	; 0xa2a <MAINPG_start+0x2c>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
 b26:	0e 94 28 1c 	call	0x3850	; 0x3850 <LM_is_free>
 b2a:	88 23       	and	r24, r24
 b2c:	09 f4       	brne	.+2      	; 0xb30 <MAINPG_start+0x132>
 b2e:	7d cf       	rjmp	.-262    	; 0xa2a <MAINPG_start+0x2c>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
 b30:	0e 94 da 16 	call	0x2db4	; 0x2db4 <send_header>
				//state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
 b34:	49 e0       	ldi	r20, 0x09	; 9
 b36:	6a e0       	ldi	r22, 0x0A	; 10
 b38:	0e 94 0d 1b 	call	0x361a	; 0x361a <decode_header_tail_response>
 b3c:	c8 2f       	mov	r28, r24
			break;
 b3e:	75 cf       	rjmp	.-278    	; 0xa2a <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
 b40:	0e 94 8c 0b 	call	0x1718	; 0x1718 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 b44:	6b e0       	ldi	r22, 0x0B	; 11
 b46:	0e 94 25 1b 	call	0x364a	; 0x364a <decode_stage_response>
				//state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
 b4a:	1c 2f       	mov	r17, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 b4c:	c8 2f       	mov	r28, r24
				//state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
 b4e:	6d cf       	rjmp	.-294    	; 0xa2a <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
 b50:	0e 94 cf 09 	call	0x139e	; 0x139e <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 b54:	6d e0       	ldi	r22, 0x0D	; 13
 b56:	0e 94 25 1b 	call	0x364a	; 0x364a <decode_stage_response>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
				//state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
 b5a:	1c 2f       	mov	r17, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 b5c:	c8 2f       	mov	r28, r24
			break;
 b5e:	65 cf       	rjmp	.-310    	; 0xa2a <MAINPG_start+0x2c>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
 b60:	82 e3       	ldi	r24, 0x32	; 50
 b62:	9d e0       	ldi	r25, 0x0D	; 13
 b64:	0e 94 b8 19 	call	0x3370	; 0x3370 <MRPP_is_body_package_ready>
 b68:	88 23       	and	r24, r24
 b6a:	09 f4       	brne	.+2      	; 0xb6e <MAINPG_start+0x170>
 b6c:	58 cf       	rjmp	.-336    	; 0xa1e <MAINPG_start+0x20>
 b6e:	0e 94 28 1c 	call	0x3850	; 0x3850 <LM_is_free>
 b72:	88 23       	and	r24, r24
 b74:	09 f4       	brne	.+2      	; 0xb78 <MAINPG_start+0x17a>
 b76:	55 cf       	rjmp	.-342    	; 0xa22 <MAINPG_start+0x24>
					lmStatus=send_body(bodyIndex);
 b78:	80 91 32 0d 	lds	r24, 0x0D32	; 0x800d32 <bodyIndex>
 b7c:	90 91 33 0d 	lds	r25, 0x0D33	; 0x800d33 <bodyIndex+0x1>
 b80:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
 b84:	41 2f       	mov	r20, r17
 b86:	68 2f       	mov	r22, r24
 b88:	80 91 32 0d 	lds	r24, 0x0D32	; 0x800d32 <bodyIndex>
 b8c:	90 91 33 0d 	lds	r25, 0x0D33	; 0x800d33 <bodyIndex+0x1>
 b90:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <decode_body_response>
 b94:	c8 2f       	mov	r28, r24
 b96:	49 cf       	rjmp	.-366    	; 0xa2a <MAINPG_start+0x2c>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
 b98:	0e 94 2d 1c 	call	0x385a	; 0x385a <MRPP_all_body_package_sent>
 b9c:	88 23       	and	r24, r24
 b9e:	09 f4       	brne	.+2      	; 0xba2 <MAINPG_start+0x1a4>
 ba0:	42 cf       	rjmp	.-380    	; 0xa26 <MAINPG_start+0x28>
					state=MAINPG_SEND_TAIL;
 ba2:	ce e0       	ldi	r28, 0x0E	; 14
 ba4:	42 cf       	rjmp	.-380    	; 0xa2a <MAINPG_start+0x2c>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
 ba6:	0e 94 28 1c 	call	0x3850	; 0x3850 <LM_is_free>
 baa:	88 23       	and	r24, r24
 bac:	09 f4       	brne	.+2      	; 0xbb0 <MAINPG_start+0x1b2>
 bae:	3d cf       	rjmp	.-390    	; 0xa2a <MAINPG_start+0x2c>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
 bb0:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
 bb4:	4e e0       	ldi	r20, 0x0E	; 14
 bb6:	6f e0       	ldi	r22, 0x0F	; 15
 bb8:	0e 94 0d 1b 	call	0x361a	; 0x361a <decode_header_tail_response>
 bbc:	c8 2f       	mov	r28, r24
				
			break;
 bbe:	35 cf       	rjmp	.-406    	; 0xa2a <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
 bc0:	0e 94 56 1c 	call	0x38ac	; 0x38ac <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
 bc4:	d1 e0       	ldi	r29, 0x01	; 1
 bc6:	81 11       	cpse	r24, r1
 bc8:	d0 e0       	ldi	r29, 0x00	; 0
				
				state=MAINPG_SLEEP;
 bca:	c0 e1       	ldi	r28, 0x10	; 16
			break;
 bcc:	2e cf       	rjmp	.-420    	; 0xa2a <MAINPG_start+0x2c>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
 bce:	6a ef       	ldi	r22, 0xFA	; 250
 bd0:	71 e0       	ldi	r23, 0x01	; 1
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				PM_HAL_enter_power_down();
 bd8:	0e 94 57 16 	call	0x2cae	; 0x2cae <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
 bdc:	62 e0       	ldi	r22, 0x02	; 2
 bde:	72 e0       	ldi	r23, 0x02	; 2
 be0:	80 e0       	ldi	r24, 0x00	; 0
 be2:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				state=MAINPG_INIT_HW;
 be6:	c0 e0       	ldi	r28, 0x00	; 0
			break;
 be8:	20 cf       	rjmp	.-448    	; 0xa2a <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
 bea:	6a e0       	ldi	r22, 0x0A	; 10
 bec:	72 e0       	ldi	r23, 0x02	; 2
 bee:	80 e0       	ldi	r24, 0x00	; 0
 bf0:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				state=MAINPG_END;
 bf4:	c2 e1       	ldi	r28, 0x12	; 18
			break;
 bf6:	19 cf       	rjmp	.-462    	; 0xa2a <MAINPG_start+0x2c>
			
			case MAINPG_END:
				print_debug("END\n\r");
 bf8:	68 e1       	ldi	r22, 0x18	; 24
 bfa:	72 e0       	ldi	r23, 0x02	; 2
 bfc:	80 e0       	ldi	r24, 0x00	; 0
 bfe:	0e 94 19 1b 	call	0x3632	; 0x3632 <send_msg>
				return;
			break;	
		}
	}
}
 c02:	df 91       	pop	r29
 c04:	cf 91       	pop	r28
 c06:	1f 91       	pop	r17
 c08:	08 95       	ret

Disassembly of section .text.calc_crc8:

00002f88 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    2f88:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    2f8c:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    2f8e:	14 c0       	rjmp	.+40     	; 0x2fb8 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    2f90:	fa 01       	movw	r30, r20
    2f92:	e3 0f       	add	r30, r19
    2f94:	f1 1d       	adc	r31, r1
    2f96:	90 81       	ld	r25, Z
    2f98:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    2f9a:	28 e0       	ldi	r18, 0x08	; 8
    2f9c:	0a c0       	rjmp	.+20     	; 0x2fb2 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    2f9e:	88 23       	and	r24, r24
    2fa0:	34 f4       	brge	.+12     	; 0x2fae <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	91 e3       	ldi	r25, 0x31	; 49
    2faa:	89 27       	eor	r24, r25
    2fac:	01 c0       	rjmp	.+2      	; 0x2fb0 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    2fae:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    2fb0:	21 50       	subi	r18, 0x01	; 1
    2fb2:	21 11       	cpse	r18, r1
    2fb4:	f4 cf       	rjmp	.-24     	; 0x2f9e <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    2fb6:	3f 5f       	subi	r19, 0xFF	; 255
    2fb8:	36 17       	cp	r19, r22
    2fba:	50 f3       	brcs	.-44     	; 0x2f90 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    2fbc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003798 <__subsf3>:
    3798:	50 58       	subi	r21, 0x80	; 128

0000379a <__addsf3>:
    379a:	bb 27       	eor	r27, r27
    379c:	aa 27       	eor	r26, r26
    379e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__addsf3x>
    37a2:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000017e6 <__addsf3x>:
    17e6:	11 c0       	rjmp	.+34     	; 0x180a <__addsf3x+0x24>
    17e8:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__fp_pscA>
    17ec:	38 f0       	brcs	.+14     	; 0x17fc <__addsf3x+0x16>
    17ee:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fp_pscB>
    17f2:	20 f0       	brcs	.+8      	; 0x17fc <__addsf3x+0x16>
    17f4:	39 f4       	brne	.+14     	; 0x1804 <__addsf3x+0x1e>
    17f6:	9f 3f       	cpi	r25, 0xFF	; 255
    17f8:	19 f4       	brne	.+6      	; 0x1800 <__addsf3x+0x1a>
    17fa:	26 f4       	brtc	.+8      	; 0x1804 <__addsf3x+0x1e>
    17fc:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__fp_nan>
    1800:	0e f4       	brtc	.+2      	; 0x1804 <__addsf3x+0x1e>
    1802:	e0 95       	com	r30
    1804:	e7 fb       	bst	r30, 7
    1806:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__fp_inf>
    180a:	e9 2f       	mov	r30, r25
    180c:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_split3>
    1810:	58 f3       	brcs	.-42     	; 0x17e8 <__addsf3x+0x2>
    1812:	ba 17       	cp	r27, r26
    1814:	62 07       	cpc	r22, r18
    1816:	73 07       	cpc	r23, r19
    1818:	84 07       	cpc	r24, r20
    181a:	95 07       	cpc	r25, r21
    181c:	20 f0       	brcs	.+8      	; 0x1826 <__addsf3x+0x40>
    181e:	79 f4       	brne	.+30     	; 0x183e <__addsf3x+0x58>
    1820:	a6 f5       	brtc	.+104    	; 0x188a <__addsf3x+0xa4>
    1822:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__fp_zero>
    1826:	0e f4       	brtc	.+2      	; 0x182a <__addsf3x+0x44>
    1828:	e0 95       	com	r30
    182a:	0b 2e       	mov	r0, r27
    182c:	ba 2f       	mov	r27, r26
    182e:	a0 2d       	mov	r26, r0
    1830:	0b 01       	movw	r0, r22
    1832:	b9 01       	movw	r22, r18
    1834:	90 01       	movw	r18, r0
    1836:	0c 01       	movw	r0, r24
    1838:	ca 01       	movw	r24, r20
    183a:	a0 01       	movw	r20, r0
    183c:	11 24       	eor	r1, r1
    183e:	ff 27       	eor	r31, r31
    1840:	59 1b       	sub	r21, r25
    1842:	99 f0       	breq	.+38     	; 0x186a <__addsf3x+0x84>
    1844:	59 3f       	cpi	r21, 0xF9	; 249
    1846:	50 f4       	brcc	.+20     	; 0x185c <__addsf3x+0x76>
    1848:	50 3e       	cpi	r21, 0xE0	; 224
    184a:	68 f1       	brcs	.+90     	; 0x18a6 <__addsf3x+0xc0>
    184c:	1a 16       	cp	r1, r26
    184e:	f0 40       	sbci	r31, 0x00	; 0
    1850:	a2 2f       	mov	r26, r18
    1852:	23 2f       	mov	r18, r19
    1854:	34 2f       	mov	r19, r20
    1856:	44 27       	eor	r20, r20
    1858:	58 5f       	subi	r21, 0xF8	; 248
    185a:	f3 cf       	rjmp	.-26     	; 0x1842 <__addsf3x+0x5c>
    185c:	46 95       	lsr	r20
    185e:	37 95       	ror	r19
    1860:	27 95       	ror	r18
    1862:	a7 95       	ror	r26
    1864:	f0 40       	sbci	r31, 0x00	; 0
    1866:	53 95       	inc	r21
    1868:	c9 f7       	brne	.-14     	; 0x185c <__addsf3x+0x76>
    186a:	7e f4       	brtc	.+30     	; 0x188a <__addsf3x+0xa4>
    186c:	1f 16       	cp	r1, r31
    186e:	ba 0b       	sbc	r27, r26
    1870:	62 0b       	sbc	r22, r18
    1872:	73 0b       	sbc	r23, r19
    1874:	84 0b       	sbc	r24, r20
    1876:	ba f0       	brmi	.+46     	; 0x18a6 <__addsf3x+0xc0>
    1878:	91 50       	subi	r25, 0x01	; 1
    187a:	a1 f0       	breq	.+40     	; 0x18a4 <__addsf3x+0xbe>
    187c:	ff 0f       	add	r31, r31
    187e:	bb 1f       	adc	r27, r27
    1880:	66 1f       	adc	r22, r22
    1882:	77 1f       	adc	r23, r23
    1884:	88 1f       	adc	r24, r24
    1886:	c2 f7       	brpl	.-16     	; 0x1878 <__addsf3x+0x92>
    1888:	0e c0       	rjmp	.+28     	; 0x18a6 <__addsf3x+0xc0>
    188a:	ba 0f       	add	r27, r26
    188c:	62 1f       	adc	r22, r18
    188e:	73 1f       	adc	r23, r19
    1890:	84 1f       	adc	r24, r20
    1892:	48 f4       	brcc	.+18     	; 0x18a6 <__addsf3x+0xc0>
    1894:	87 95       	ror	r24
    1896:	77 95       	ror	r23
    1898:	67 95       	ror	r22
    189a:	b7 95       	ror	r27
    189c:	f7 95       	ror	r31
    189e:	9e 3f       	cpi	r25, 0xFE	; 254
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <__addsf3x+0xbe>
    18a2:	b0 cf       	rjmp	.-160    	; 0x1804 <__addsf3x+0x1e>
    18a4:	93 95       	inc	r25
    18a6:	88 0f       	add	r24, r24
    18a8:	08 f0       	brcs	.+2      	; 0x18ac <__addsf3x+0xc6>
    18aa:	99 27       	eor	r25, r25
    18ac:	ee 0f       	add	r30, r30
    18ae:	97 95       	ror	r25
    18b0:	87 95       	ror	r24
    18b2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003884 <__divsf3>:
    3884:	0e 94 47 0a 	call	0x148e	; 0x148e <__divsf3x>
    3888:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

0000148e <__divsf3x>:
    148e:	10 c0       	rjmp	.+32     	; 0x14b0 <__divsf3x+0x22>
    1490:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fp_pscB>
    1494:	58 f0       	brcs	.+22     	; 0x14ac <__divsf3x+0x1e>
    1496:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__fp_pscA>
    149a:	40 f0       	brcs	.+16     	; 0x14ac <__divsf3x+0x1e>
    149c:	29 f4       	brne	.+10     	; 0x14a8 <__divsf3x+0x1a>
    149e:	5f 3f       	cpi	r21, 0xFF	; 255
    14a0:	29 f0       	breq	.+10     	; 0x14ac <__divsf3x+0x1e>
    14a2:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__fp_inf>
    14a6:	51 11       	cpse	r21, r1
    14a8:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__fp_szero>
    14ac:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__fp_nan>
    14b0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_split3>
    14b4:	68 f3       	brcs	.-38     	; 0x1490 <__divsf3x+0x2>

000014b6 <__divsf3_pse>:
    14b6:	99 23       	and	r25, r25
    14b8:	b1 f3       	breq	.-20     	; 0x14a6 <__divsf3x+0x18>
    14ba:	55 23       	and	r21, r21
    14bc:	91 f3       	breq	.-28     	; 0x14a2 <__divsf3x+0x14>
    14be:	95 1b       	sub	r25, r21
    14c0:	55 0b       	sbc	r21, r21
    14c2:	bb 27       	eor	r27, r27
    14c4:	aa 27       	eor	r26, r26
    14c6:	62 17       	cp	r22, r18
    14c8:	73 07       	cpc	r23, r19
    14ca:	84 07       	cpc	r24, r20
    14cc:	38 f0       	brcs	.+14     	; 0x14dc <__divsf3_pse+0x26>
    14ce:	9f 5f       	subi	r25, 0xFF	; 255
    14d0:	5f 4f       	sbci	r21, 0xFF	; 255
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	44 1f       	adc	r20, r20
    14d8:	aa 1f       	adc	r26, r26
    14da:	a9 f3       	breq	.-22     	; 0x14c6 <__divsf3_pse+0x10>
    14dc:	35 d0       	rcall	.+106    	; 0x1548 <__divsf3_pse+0x92>
    14de:	0e 2e       	mov	r0, r30
    14e0:	3a f0       	brmi	.+14     	; 0x14f0 <__divsf3_pse+0x3a>
    14e2:	e0 e8       	ldi	r30, 0x80	; 128
    14e4:	32 d0       	rcall	.+100    	; 0x154a <__divsf3_pse+0x94>
    14e6:	91 50       	subi	r25, 0x01	; 1
    14e8:	50 40       	sbci	r21, 0x00	; 0
    14ea:	e6 95       	lsr	r30
    14ec:	00 1c       	adc	r0, r0
    14ee:	ca f7       	brpl	.-14     	; 0x14e2 <__divsf3_pse+0x2c>
    14f0:	2b d0       	rcall	.+86     	; 0x1548 <__divsf3_pse+0x92>
    14f2:	fe 2f       	mov	r31, r30
    14f4:	29 d0       	rcall	.+82     	; 0x1548 <__divsf3_pse+0x92>
    14f6:	66 0f       	add	r22, r22
    14f8:	77 1f       	adc	r23, r23
    14fa:	88 1f       	adc	r24, r24
    14fc:	bb 1f       	adc	r27, r27
    14fe:	26 17       	cp	r18, r22
    1500:	37 07       	cpc	r19, r23
    1502:	48 07       	cpc	r20, r24
    1504:	ab 07       	cpc	r26, r27
    1506:	b0 e8       	ldi	r27, 0x80	; 128
    1508:	09 f0       	breq	.+2      	; 0x150c <__divsf3_pse+0x56>
    150a:	bb 0b       	sbc	r27, r27
    150c:	80 2d       	mov	r24, r0
    150e:	bf 01       	movw	r22, r30
    1510:	ff 27       	eor	r31, r31
    1512:	93 58       	subi	r25, 0x83	; 131
    1514:	5f 4f       	sbci	r21, 0xFF	; 255
    1516:	3a f0       	brmi	.+14     	; 0x1526 <__divsf3_pse+0x70>
    1518:	9e 3f       	cpi	r25, 0xFE	; 254
    151a:	51 05       	cpc	r21, r1
    151c:	78 f0       	brcs	.+30     	; 0x153c <__divsf3_pse+0x86>
    151e:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__fp_inf>
    1522:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__fp_szero>
    1526:	5f 3f       	cpi	r21, 0xFF	; 255
    1528:	e4 f3       	brlt	.-8      	; 0x1522 <__divsf3_pse+0x6c>
    152a:	98 3e       	cpi	r25, 0xE8	; 232
    152c:	d4 f3       	brlt	.-12     	; 0x1522 <__divsf3_pse+0x6c>
    152e:	86 95       	lsr	r24
    1530:	77 95       	ror	r23
    1532:	67 95       	ror	r22
    1534:	b7 95       	ror	r27
    1536:	f7 95       	ror	r31
    1538:	9f 5f       	subi	r25, 0xFF	; 255
    153a:	c9 f7       	brne	.-14     	; 0x152e <__divsf3_pse+0x78>
    153c:	88 0f       	add	r24, r24
    153e:	91 1d       	adc	r25, r1
    1540:	96 95       	lsr	r25
    1542:	87 95       	ror	r24
    1544:	97 f9       	bld	r25, 7
    1546:	08 95       	ret
    1548:	e1 e0       	ldi	r30, 0x01	; 1
    154a:	66 0f       	add	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	88 1f       	adc	r24, r24
    1550:	bb 1f       	adc	r27, r27
    1552:	62 17       	cp	r22, r18
    1554:	73 07       	cpc	r23, r19
    1556:	84 07       	cpc	r24, r20
    1558:	ba 07       	cpc	r27, r26
    155a:	20 f0       	brcs	.+8      	; 0x1564 <__divsf3_pse+0xae>
    155c:	62 1b       	sub	r22, r18
    155e:	73 0b       	sbc	r23, r19
    1560:	84 0b       	sbc	r24, r20
    1562:	ba 0b       	sbc	r27, r26
    1564:	ee 1f       	adc	r30, r30
    1566:	88 f7       	brcc	.-30     	; 0x154a <__divsf3_pse+0x94>
    1568:	e0 95       	com	r30
    156a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000024de <__fixunssfsi>:
    24de:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__fp_splitA>
    24e2:	88 f0       	brcs	.+34     	; 0x2506 <__fixunssfsi+0x28>
    24e4:	9f 57       	subi	r25, 0x7F	; 127
    24e6:	98 f0       	brcs	.+38     	; 0x250e <__fixunssfsi+0x30>
    24e8:	b9 2f       	mov	r27, r25
    24ea:	99 27       	eor	r25, r25
    24ec:	b7 51       	subi	r27, 0x17	; 23
    24ee:	b0 f0       	brcs	.+44     	; 0x251c <__fixunssfsi+0x3e>
    24f0:	e1 f0       	breq	.+56     	; 0x252a <__fixunssfsi+0x4c>
    24f2:	66 0f       	add	r22, r22
    24f4:	77 1f       	adc	r23, r23
    24f6:	88 1f       	adc	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	1a f0       	brmi	.+6      	; 0x2502 <__fixunssfsi+0x24>
    24fc:	ba 95       	dec	r27
    24fe:	c9 f7       	brne	.-14     	; 0x24f2 <__fixunssfsi+0x14>
    2500:	14 c0       	rjmp	.+40     	; 0x252a <__fixunssfsi+0x4c>
    2502:	b1 30       	cpi	r27, 0x01	; 1
    2504:	91 f0       	breq	.+36     	; 0x252a <__fixunssfsi+0x4c>
    2506:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <__fp_zero>
    250a:	b1 e0       	ldi	r27, 0x01	; 1
    250c:	08 95       	ret
    250e:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__fp_zero>
    2512:	67 2f       	mov	r22, r23
    2514:	78 2f       	mov	r23, r24
    2516:	88 27       	eor	r24, r24
    2518:	b8 5f       	subi	r27, 0xF8	; 248
    251a:	39 f0       	breq	.+14     	; 0x252a <__fixunssfsi+0x4c>
    251c:	b9 3f       	cpi	r27, 0xF9	; 249
    251e:	cc f3       	brlt	.-14     	; 0x2512 <__fixunssfsi+0x34>
    2520:	86 95       	lsr	r24
    2522:	77 95       	ror	r23
    2524:	67 95       	ror	r22
    2526:	b3 95       	inc	r27
    2528:	d9 f7       	brne	.-10     	; 0x2520 <__fixunssfsi+0x42>
    252a:	3e f4       	brtc	.+14     	; 0x253a <__fixunssfsi+0x5c>
    252c:	90 95       	com	r25
    252e:	80 95       	com	r24
    2530:	70 95       	com	r23
    2532:	61 95       	neg	r22
    2534:	7f 4f       	sbci	r23, 0xFF	; 255
    2536:	8f 4f       	sbci	r24, 0xFF	; 255
    2538:	9f 4f       	sbci	r25, 0xFF	; 255
    253a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000020a2 <__floatunsisf>:
    20a2:	e8 94       	clt
    20a4:	09 c0       	rjmp	.+18     	; 0x20b8 <__floatsisf+0x12>

000020a6 <__floatsisf>:
    20a6:	97 fb       	bst	r25, 7
    20a8:	3e f4       	brtc	.+14     	; 0x20b8 <__floatsisf+0x12>
    20aa:	90 95       	com	r25
    20ac:	80 95       	com	r24
    20ae:	70 95       	com	r23
    20b0:	61 95       	neg	r22
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255
    20b4:	8f 4f       	sbci	r24, 0xFF	; 255
    20b6:	9f 4f       	sbci	r25, 0xFF	; 255
    20b8:	99 23       	and	r25, r25
    20ba:	a9 f0       	breq	.+42     	; 0x20e6 <__floatsisf+0x40>
    20bc:	f9 2f       	mov	r31, r25
    20be:	96 e9       	ldi	r25, 0x96	; 150
    20c0:	bb 27       	eor	r27, r27
    20c2:	93 95       	inc	r25
    20c4:	f6 95       	lsr	r31
    20c6:	87 95       	ror	r24
    20c8:	77 95       	ror	r23
    20ca:	67 95       	ror	r22
    20cc:	b7 95       	ror	r27
    20ce:	f1 11       	cpse	r31, r1
    20d0:	f8 cf       	rjmp	.-16     	; 0x20c2 <__floatsisf+0x1c>
    20d2:	fa f4       	brpl	.+62     	; 0x2112 <__floatsisf+0x6c>
    20d4:	bb 0f       	add	r27, r27
    20d6:	11 f4       	brne	.+4      	; 0x20dc <__floatsisf+0x36>
    20d8:	60 ff       	sbrs	r22, 0
    20da:	1b c0       	rjmp	.+54     	; 0x2112 <__floatsisf+0x6c>
    20dc:	6f 5f       	subi	r22, 0xFF	; 255
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	8f 4f       	sbci	r24, 0xFF	; 255
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	16 c0       	rjmp	.+44     	; 0x2112 <__floatsisf+0x6c>
    20e6:	88 23       	and	r24, r24
    20e8:	11 f0       	breq	.+4      	; 0x20ee <__floatsisf+0x48>
    20ea:	96 e9       	ldi	r25, 0x96	; 150
    20ec:	11 c0       	rjmp	.+34     	; 0x2110 <__floatsisf+0x6a>
    20ee:	77 23       	and	r23, r23
    20f0:	21 f0       	breq	.+8      	; 0x20fa <__floatsisf+0x54>
    20f2:	9e e8       	ldi	r25, 0x8E	; 142
    20f4:	87 2f       	mov	r24, r23
    20f6:	76 2f       	mov	r23, r22
    20f8:	05 c0       	rjmp	.+10     	; 0x2104 <__floatsisf+0x5e>
    20fa:	66 23       	and	r22, r22
    20fc:	71 f0       	breq	.+28     	; 0x211a <__floatsisf+0x74>
    20fe:	96 e8       	ldi	r25, 0x86	; 134
    2100:	86 2f       	mov	r24, r22
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	2a f0       	brmi	.+10     	; 0x2112 <__floatsisf+0x6c>
    2108:	9a 95       	dec	r25
    210a:	66 0f       	add	r22, r22
    210c:	77 1f       	adc	r23, r23
    210e:	88 1f       	adc	r24, r24
    2110:	da f7       	brpl	.-10     	; 0x2108 <__floatsisf+0x62>
    2112:	88 0f       	add	r24, r24
    2114:	96 95       	lsr	r25
    2116:	87 95       	ror	r24
    2118:	97 f9       	bld	r25, 7
    211a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003824 <__fp_inf>:
    3824:	97 f9       	bld	r25, 7
    3826:	9f 67       	ori	r25, 0x7F	; 127
    3828:	80 e8       	ldi	r24, 0x80	; 128
    382a:	70 e0       	ldi	r23, 0x00	; 0
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000038ca <__fp_nan>:
    38ca:	9f ef       	ldi	r25, 0xFF	; 255
    38cc:	80 ec       	ldi	r24, 0xC0	; 192
    38ce:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000037a6 <__fp_pscA>:
    37a6:	00 24       	eor	r0, r0
    37a8:	0a 94       	dec	r0
    37aa:	16 16       	cp	r1, r22
    37ac:	17 06       	cpc	r1, r23
    37ae:	18 06       	cpc	r1, r24
    37b0:	09 06       	cpc	r0, r25
    37b2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000037b4 <__fp_pscB>:
    37b4:	00 24       	eor	r0, r0
    37b6:	0a 94       	dec	r0
    37b8:	12 16       	cp	r1, r18
    37ba:	13 06       	cpc	r1, r19
    37bc:	14 06       	cpc	r1, r20
    37be:	05 06       	cpc	r0, r21
    37c0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000033f8 <__fp_round>:
    33f8:	09 2e       	mov	r0, r25
    33fa:	03 94       	inc	r0
    33fc:	00 0c       	add	r0, r0
    33fe:	11 f4       	brne	.+4      	; 0x3404 <__fp_round+0xc>
    3400:	88 23       	and	r24, r24
    3402:	52 f0       	brmi	.+20     	; 0x3418 <__fp_round+0x20>
    3404:	bb 0f       	add	r27, r27
    3406:	40 f4       	brcc	.+16     	; 0x3418 <__fp_round+0x20>
    3408:	bf 2b       	or	r27, r31
    340a:	11 f4       	brne	.+4      	; 0x3410 <__fp_round+0x18>
    340c:	60 ff       	sbrs	r22, 0
    340e:	04 c0       	rjmp	.+8      	; 0x3418 <__fp_round+0x20>
    3410:	6f 5f       	subi	r22, 0xFF	; 255
    3412:	7f 4f       	sbci	r23, 0xFF	; 255
    3414:	8f 4f       	sbci	r24, 0xFF	; 255
    3416:	9f 4f       	sbci	r25, 0xFF	; 255
    3418:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002c6a <__fp_split3>:
    2c6a:	57 fd       	sbrc	r21, 7
    2c6c:	90 58       	subi	r25, 0x80	; 128
    2c6e:	44 0f       	add	r20, r20
    2c70:	55 1f       	adc	r21, r21
    2c72:	59 f0       	breq	.+22     	; 0x2c8a <__fp_splitA+0x10>
    2c74:	5f 3f       	cpi	r21, 0xFF	; 255
    2c76:	71 f0       	breq	.+28     	; 0x2c94 <__fp_splitA+0x1a>
    2c78:	47 95       	ror	r20

00002c7a <__fp_splitA>:
    2c7a:	88 0f       	add	r24, r24
    2c7c:	97 fb       	bst	r25, 7
    2c7e:	99 1f       	adc	r25, r25
    2c80:	61 f0       	breq	.+24     	; 0x2c9a <__fp_splitA+0x20>
    2c82:	9f 3f       	cpi	r25, 0xFF	; 255
    2c84:	79 f0       	breq	.+30     	; 0x2ca4 <__fp_splitA+0x2a>
    2c86:	87 95       	ror	r24
    2c88:	08 95       	ret
    2c8a:	12 16       	cp	r1, r18
    2c8c:	13 06       	cpc	r1, r19
    2c8e:	14 06       	cpc	r1, r20
    2c90:	55 1f       	adc	r21, r21
    2c92:	f2 cf       	rjmp	.-28     	; 0x2c78 <__fp_split3+0xe>
    2c94:	46 95       	lsr	r20
    2c96:	f1 df       	rcall	.-30     	; 0x2c7a <__fp_splitA>
    2c98:	08 c0       	rjmp	.+16     	; 0x2caa <__fp_splitA+0x30>
    2c9a:	16 16       	cp	r1, r22
    2c9c:	17 06       	cpc	r1, r23
    2c9e:	18 06       	cpc	r1, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	f1 cf       	rjmp	.-30     	; 0x2c86 <__fp_splitA+0xc>
    2ca4:	86 95       	lsr	r24
    2ca6:	71 05       	cpc	r23, r1
    2ca8:	61 05       	cpc	r22, r1
    2caa:	08 94       	sec
    2cac:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000037c2 <__fp_zero>:
    37c2:	e8 94       	clt

000037c4 <__fp_szero>:
    37c4:	bb 27       	eor	r27, r27
    37c6:	66 27       	eor	r22, r22
    37c8:	77 27       	eor	r23, r23
    37ca:	cb 01       	movw	r24, r22
    37cc:	97 f9       	bld	r25, 7
    37ce:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000388c <__mulsf3>:
    388c:	0e 94 22 0b 	call	0x1644	; 0x1644 <__mulsf3x>
    3890:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001644 <__mulsf3x>:
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <__mulsf3x+0x20>
    1646:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__fp_pscA>
    164a:	38 f0       	brcs	.+14     	; 0x165a <__mulsf3x+0x16>
    164c:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__fp_pscB>
    1650:	20 f0       	brcs	.+8      	; 0x165a <__mulsf3x+0x16>
    1652:	95 23       	and	r25, r21
    1654:	11 f0       	breq	.+4      	; 0x165a <__mulsf3x+0x16>
    1656:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__fp_inf>
    165a:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__fp_nan>
    165e:	11 24       	eor	r1, r1
    1660:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__fp_szero>
    1664:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__fp_split3>
    1668:	70 f3       	brcs	.-36     	; 0x1646 <__mulsf3x+0x2>

0000166a <__mulsf3_pse>:
    166a:	95 9f       	mul	r25, r21
    166c:	c1 f3       	breq	.-16     	; 0x165e <__mulsf3x+0x1a>
    166e:	95 0f       	add	r25, r21
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	55 1f       	adc	r21, r21
    1674:	62 9f       	mul	r22, r18
    1676:	f0 01       	movw	r30, r0
    1678:	72 9f       	mul	r23, r18
    167a:	bb 27       	eor	r27, r27
    167c:	f0 0d       	add	r31, r0
    167e:	b1 1d       	adc	r27, r1
    1680:	63 9f       	mul	r22, r19
    1682:	aa 27       	eor	r26, r26
    1684:	f0 0d       	add	r31, r0
    1686:	b1 1d       	adc	r27, r1
    1688:	aa 1f       	adc	r26, r26
    168a:	64 9f       	mul	r22, r20
    168c:	66 27       	eor	r22, r22
    168e:	b0 0d       	add	r27, r0
    1690:	a1 1d       	adc	r26, r1
    1692:	66 1f       	adc	r22, r22
    1694:	82 9f       	mul	r24, r18
    1696:	22 27       	eor	r18, r18
    1698:	b0 0d       	add	r27, r0
    169a:	a1 1d       	adc	r26, r1
    169c:	62 1f       	adc	r22, r18
    169e:	73 9f       	mul	r23, r19
    16a0:	b0 0d       	add	r27, r0
    16a2:	a1 1d       	adc	r26, r1
    16a4:	62 1f       	adc	r22, r18
    16a6:	83 9f       	mul	r24, r19
    16a8:	a0 0d       	add	r26, r0
    16aa:	61 1d       	adc	r22, r1
    16ac:	22 1f       	adc	r18, r18
    16ae:	74 9f       	mul	r23, r20
    16b0:	33 27       	eor	r19, r19
    16b2:	a0 0d       	add	r26, r0
    16b4:	61 1d       	adc	r22, r1
    16b6:	23 1f       	adc	r18, r19
    16b8:	84 9f       	mul	r24, r20
    16ba:	60 0d       	add	r22, r0
    16bc:	21 1d       	adc	r18, r1
    16be:	82 2f       	mov	r24, r18
    16c0:	76 2f       	mov	r23, r22
    16c2:	6a 2f       	mov	r22, r26
    16c4:	11 24       	eor	r1, r1
    16c6:	9f 57       	subi	r25, 0x7F	; 127
    16c8:	50 40       	sbci	r21, 0x00	; 0
    16ca:	9a f0       	brmi	.+38     	; 0x16f2 <__mulsf3_pse+0x88>
    16cc:	f1 f0       	breq	.+60     	; 0x170a <__mulsf3_pse+0xa0>
    16ce:	88 23       	and	r24, r24
    16d0:	4a f0       	brmi	.+18     	; 0x16e4 <__mulsf3_pse+0x7a>
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	bb 1f       	adc	r27, r27
    16d8:	66 1f       	adc	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	88 1f       	adc	r24, r24
    16de:	91 50       	subi	r25, 0x01	; 1
    16e0:	50 40       	sbci	r21, 0x00	; 0
    16e2:	a9 f7       	brne	.-22     	; 0x16ce <__mulsf3_pse+0x64>
    16e4:	9e 3f       	cpi	r25, 0xFE	; 254
    16e6:	51 05       	cpc	r21, r1
    16e8:	80 f0       	brcs	.+32     	; 0x170a <__mulsf3_pse+0xa0>
    16ea:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__fp_inf>
    16ee:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__fp_szero>
    16f2:	5f 3f       	cpi	r21, 0xFF	; 255
    16f4:	e4 f3       	brlt	.-8      	; 0x16ee <__mulsf3_pse+0x84>
    16f6:	98 3e       	cpi	r25, 0xE8	; 232
    16f8:	d4 f3       	brlt	.-12     	; 0x16ee <__mulsf3_pse+0x84>
    16fa:	86 95       	lsr	r24
    16fc:	77 95       	ror	r23
    16fe:	67 95       	ror	r22
    1700:	b7 95       	ror	r27
    1702:	f7 95       	ror	r31
    1704:	e7 95       	ror	r30
    1706:	9f 5f       	subi	r25, 0xFF	; 255
    1708:	c1 f7       	brne	.-16     	; 0x16fa <__mulsf3_pse+0x90>
    170a:	fe 2b       	or	r31, r30
    170c:	88 0f       	add	r24, r24
    170e:	91 1d       	adc	r25, r1
    1710:	96 95       	lsr	r25
    1712:	87 95       	ror	r24
    1714:	97 f9       	bld	r25, 7
    1716:	08 95       	ret

Disassembly of section .text.libgcc:

00003830 <__tablejump2__>:
    3830:	ee 0f       	add	r30, r30
    3832:	ff 1f       	adc	r31, r31
    3834:	05 90       	lpm	r0, Z+
    3836:	f4 91       	lpm	r31, Z
    3838:	e0 2d       	mov	r30, r0
    383a:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

000034ba <__umulhisi3>:
    34ba:	a2 9f       	mul	r26, r18
    34bc:	b0 01       	movw	r22, r0
    34be:	b3 9f       	mul	r27, r19
    34c0:	c0 01       	movw	r24, r0
    34c2:	a3 9f       	mul	r26, r19
    34c4:	70 0d       	add	r23, r0
    34c6:	81 1d       	adc	r24, r1
    34c8:	11 24       	eor	r1, r1
    34ca:	91 1d       	adc	r25, r1
    34cc:	b2 9f       	mul	r27, r18
    34ce:	70 0d       	add	r23, r0
    34d0:	81 1d       	adc	r24, r1
    34d2:	11 24       	eor	r1, r1
    34d4:	91 1d       	adc	r25, r1
    34d6:	08 95       	ret

Disassembly of section .text.libgcc:

000035b8 <__movmemx_qi>:
    35b8:	99 27       	eor	r25, r25

000035ba <__movmemx_hi>:
    35ba:	77 fd       	sbrc	r23, 7
    35bc:	05 c0       	rjmp	.+10     	; 0x35c8 <__movmemx_hi+0xe>
    35be:	05 90       	lpm	r0, Z+
    35c0:	0d 92       	st	X+, r0
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	e1 f7       	brne	.-8      	; 0x35be <__movmemx_hi+0x4>
    35c6:	08 95       	ret
    35c8:	01 90       	ld	r0, Z+
    35ca:	0d 92       	st	X+, r0
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	e1 f7       	brne	.-8      	; 0x35c8 <__movmemx_hi+0xe>
    35d0:	08 95       	ret

Disassembly of section .text.avrlibc:

0000318e <memcpy>:
    318e:	cf 92       	push	r12
    3190:	df 92       	push	r13
    3192:	ef 92       	push	r14
    3194:	dc 01       	movw	r26, r24
    3196:	6a 01       	movw	r12, r20
    3198:	e6 2e       	mov	r14, r22
    319a:	28 0f       	add	r18, r24
    319c:	39 1f       	adc	r19, r25
    319e:	a2 17       	cp	r26, r18
    31a0:	b3 07       	cpc	r27, r19
    31a2:	51 f0       	breq	.+20     	; 0x31b8 <memcpy+0x2a>
    31a4:	f6 01       	movw	r30, r12
    31a6:	44 91       	lpm	r20, Z
    31a8:	e7 fc       	sbrc	r14, 7
    31aa:	40 81       	ld	r20, Z
    31ac:	4d 93       	st	X+, r20
    31ae:	4f ef       	ldi	r20, 0xFF	; 255
    31b0:	c4 1a       	sub	r12, r20
    31b2:	d4 0a       	sbc	r13, r20
    31b4:	e4 0a       	sbc	r14, r20
    31b6:	f3 cf       	rjmp	.-26     	; 0x319e <memcpy+0x10>
    31b8:	ef 90       	pop	r14
    31ba:	df 90       	pop	r13
    31bc:	cf 90       	pop	r12
    31be:	08 95       	ret

Disassembly of section .text.avrlibc:

00002d32 <strcmp>:
    2d32:	cf 92       	push	r12
    2d34:	df 92       	push	r13
    2d36:	ef 92       	push	r14
    2d38:	6b 01       	movw	r12, r22
    2d3a:	e8 2e       	mov	r14, r24
    2d3c:	f6 01       	movw	r30, r12
    2d3e:	84 91       	lpm	r24, Z
    2d40:	e7 fc       	sbrc	r14, 7
    2d42:	80 81       	ld	r24, Z
    2d44:	f9 01       	movw	r30, r18
    2d46:	54 91       	lpm	r21, Z
    2d48:	47 fd       	sbrc	r20, 7
    2d4a:	50 81       	ld	r21, Z
    2d4c:	85 13       	cpse	r24, r21
    2d4e:	0b c0       	rjmp	.+22     	; 0x2d66 <strcmp+0x34>
    2d50:	88 23       	and	r24, r24
    2d52:	41 f0       	breq	.+16     	; 0x2d64 <strcmp+0x32>
    2d54:	8f ef       	ldi	r24, 0xFF	; 255
    2d56:	c8 1a       	sub	r12, r24
    2d58:	d8 0a       	sbc	r13, r24
    2d5a:	e8 0a       	sbc	r14, r24
    2d5c:	2f 5f       	subi	r18, 0xFF	; 255
    2d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d60:	4f 4f       	sbci	r20, 0xFF	; 255
    2d62:	ec cf       	rjmp	.-40     	; 0x2d3c <strcmp+0xa>
    2d64:	58 2f       	mov	r21, r24
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	85 1b       	sub	r24, r21
    2d6a:	91 09       	sbc	r25, r1
    2d6c:	ef 90       	pop	r14
    2d6e:	df 90       	pop	r13
    2d70:	cf 90       	pop	r12
    2d72:	08 95       	ret

Disassembly of section .text.avrlibc:

00002352 <strncmp>:
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	6b 01       	movw	r12, r22
    235e:	e8 2e       	mov	r14, r24
    2360:	01 15       	cp	r16, r1
    2362:	11 05       	cpc	r17, r1
    2364:	19 f1       	breq	.+70     	; 0x23ac <strncmp+0x5a>
    2366:	01 50       	subi	r16, 0x01	; 1
    2368:	11 09       	sbc	r17, r1
    236a:	f6 01       	movw	r30, r12
    236c:	84 91       	lpm	r24, Z
    236e:	e7 fc       	sbrc	r14, 7
    2370:	80 81       	ld	r24, Z
    2372:	88 23       	and	r24, r24
    2374:	99 f0       	breq	.+38     	; 0x239c <strncmp+0x4a>
    2376:	f9 01       	movw	r30, r18
    2378:	94 91       	lpm	r25, Z
    237a:	47 fd       	sbrc	r20, 7
    237c:	90 81       	ld	r25, Z
    237e:	99 23       	and	r25, r25
    2380:	69 f0       	breq	.+26     	; 0x239c <strncmp+0x4a>
    2382:	01 15       	cp	r16, r1
    2384:	11 05       	cpc	r17, r1
    2386:	51 f0       	breq	.+20     	; 0x239c <strncmp+0x4a>
    2388:	89 13       	cpse	r24, r25
    238a:	08 c0       	rjmp	.+16     	; 0x239c <strncmp+0x4a>
    238c:	8f ef       	ldi	r24, 0xFF	; 255
    238e:	c8 1a       	sub	r12, r24
    2390:	d8 0a       	sbc	r13, r24
    2392:	e8 0a       	sbc	r14, r24
    2394:	2f 5f       	subi	r18, 0xFF	; 255
    2396:	3f 4f       	sbci	r19, 0xFF	; 255
    2398:	4f 4f       	sbci	r20, 0xFF	; 255
    239a:	e5 cf       	rjmp	.-54     	; 0x2366 <strncmp+0x14>
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	f9 01       	movw	r30, r18
    23a0:	24 91       	lpm	r18, Z
    23a2:	47 fd       	sbrc	r20, 7
    23a4:	20 81       	ld	r18, Z
    23a6:	82 1b       	sub	r24, r18
    23a8:	91 09       	sbc	r25, r1
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <strncmp+0x5e>
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	ef 90       	pop	r14
    23b6:	df 90       	pop	r13
    23b8:	cf 90       	pop	r12
    23ba:	08 95       	ret

Disassembly of section .text.avrlibc:

000032ac <strlen>:
    32ac:	cf 92       	push	r12
    32ae:	df 92       	push	r13
    32b0:	ef 92       	push	r14
    32b2:	6b 01       	movw	r12, r22
    32b4:	e8 2e       	mov	r14, r24
    32b6:	a8 2f       	mov	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	fc 01       	movw	r30, r24
    32bc:	24 91       	lpm	r18, Z
    32be:	a7 fd       	sbrc	r26, 7
    32c0:	20 81       	ld	r18, Z
    32c2:	22 23       	and	r18, r18
    32c4:	19 f0       	breq	.+6      	; 0x32cc <strlen+0x20>
    32c6:	01 96       	adiw	r24, 0x01	; 1
    32c8:	a1 1d       	adc	r26, r1
    32ca:	f7 cf       	rjmp	.-18     	; 0x32ba <strlen+0xe>
    32cc:	8c 19       	sub	r24, r12
    32ce:	9d 09       	sbc	r25, r13
    32d0:	ef 90       	pop	r14
    32d2:	df 90       	pop	r13
    32d4:	cf 90       	pop	r12
    32d6:	08 95       	ret

Disassembly of section .text.avrlibc:

000034d8 <strcpy>:
    34d8:	9a 01       	movw	r18, r20
    34da:	46 2f       	mov	r20, r22
    34dc:	dc 01       	movw	r26, r24
    34de:	f9 01       	movw	r30, r18
    34e0:	54 91       	lpm	r21, Z
    34e2:	47 fd       	sbrc	r20, 7
    34e4:	50 81       	ld	r21, Z
    34e6:	5d 93       	st	X+, r21
    34e8:	55 23       	and	r21, r21
    34ea:	21 f0       	breq	.+8      	; 0x34f4 <strcpy+0x1c>
    34ec:	2f 5f       	subi	r18, 0xFF	; 255
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	4f 4f       	sbci	r20, 0xFF	; 255
    34f2:	f5 cf       	rjmp	.-22     	; 0x34de <strcpy+0x6>
    34f4:	08 95       	ret

Disassembly of section .text.avrlibc:

00002be0 <sprintf>:
    2be0:	af e0       	ldi	r26, 0x0F	; 15
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e6 ef       	ldi	r30, 0xF6	; 246
    2be6:	f5 e1       	ldi	r31, 0x15	; 21
    2be8:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__prologue_saves__+0x1c>
    2bec:	0e 89       	ldd	r16, Y+22	; 0x16
    2bee:	1f 89       	ldd	r17, Y+23	; 0x17
    2bf0:	86 e0       	ldi	r24, 0x06	; 6
    2bf2:	8d 83       	std	Y+5, r24	; 0x05
    2bf4:	1a 83       	std	Y+2, r17	; 0x02
    2bf6:	09 83       	std	Y+1, r16	; 0x01
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	9f e7       	ldi	r25, 0x7F	; 127
    2bfc:	9f 83       	std	Y+7, r25	; 0x07
    2bfe:	8e 83       	std	Y+6, r24	; 0x06
    2c00:	9e 01       	movw	r18, r28
    2c02:	25 5e       	subi	r18, 0xE5	; 229
    2c04:	3f 4f       	sbci	r19, 0xFF	; 255
    2c06:	48 8d       	ldd	r20, Y+24	; 0x18
    2c08:	59 8d       	ldd	r21, Y+25	; 0x19
    2c0a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	01 96       	adiw	r24, 0x01	; 1
    2c10:	0e 94 90 01 	call	0x320	; 0x320 <vfprintf>
    2c14:	e8 85       	ldd	r30, Y+8	; 0x08
    2c16:	f9 85       	ldd	r31, Y+9	; 0x09
    2c18:	e0 0f       	add	r30, r16
    2c1a:	f1 1f       	adc	r31, r17
    2c1c:	10 82       	st	Z, r1
    2c1e:	2f 96       	adiw	r28, 0x0f	; 15
    2c20:	e4 e0       	ldi	r30, 0x04	; 4
    2c22:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000320 <vfprintf>:
 320:	2f 92       	push	r2
 322:	3f 92       	push	r3
 324:	4f 92       	push	r4
 326:	6f 92       	push	r6
 328:	7f 92       	push	r7
 32a:	8f 92       	push	r8
 32c:	9f 92       	push	r9
 32e:	af 92       	push	r10
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	62 97       	sbiw	r28, 0x12	; 18
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
 352:	6c 01       	movw	r12, r24
 354:	3a 01       	movw	r6, r20
 356:	86 2e       	mov	r8, r22
 358:	79 01       	movw	r14, r18
 35a:	fc 01       	movw	r30, r24
 35c:	10 86       	std	Z+8, r1	; 0x08
 35e:	17 82       	std	Z+7, r1	; 0x07
 360:	84 81       	ldd	r24, Z+4	; 0x04
 362:	81 ff       	sbrs	r24, 1
 364:	e7 c1       	rjmp	.+974    	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 366:	9e 01       	movw	r18, r28
 368:	2f 5f       	subi	r18, 0xFF	; 255
 36a:	3f 4f       	sbci	r19, 0xFF	; 255
 36c:	3d 87       	std	Y+13, r19	; 0x0d
 36e:	2c 87       	std	Y+12, r18	; 0x0c
 370:	c9 01       	movw	r24, r18
 372:	a0 e8       	ldi	r26, 0x80	; 128
 374:	88 8b       	std	Y+16, r24	; 0x10
 376:	99 8b       	std	Y+17, r25	; 0x11
 378:	aa 8b       	std	Y+18, r26	; 0x12
 37a:	9f e3       	ldi	r25, 0x3F	; 63
 37c:	99 2e       	mov	r9, r25
 37e:	f3 01       	movw	r30, r6
 380:	84 91       	lpm	r24, Z
 382:	87 fc       	sbrc	r8, 7
 384:	80 81       	ld	r24, Z
 386:	88 23       	and	r24, r24
 388:	09 f4       	brne	.+2      	; 0x38c <vfprintf+0x6c>
 38a:	d0 c1       	rjmp	.+928    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 38c:	48 2d       	mov	r20, r8
 38e:	93 01       	movw	r18, r6
 390:	2f 5f       	subi	r18, 0xFF	; 255
 392:	3f 4f       	sbci	r19, 0xFF	; 255
 394:	4f 4f       	sbci	r20, 0xFF	; 255
 396:	85 32       	cpi	r24, 0x25	; 37
 398:	19 f0       	breq	.+6      	; 0x3a0 <vfprintf+0x80>
 39a:	39 01       	movw	r6, r18
 39c:	84 2e       	mov	r8, r20
 39e:	0a c0       	rjmp	.+20     	; 0x3b4 <vfprintf+0x94>
 3a0:	f9 01       	movw	r30, r18
 3a2:	84 91       	lpm	r24, Z
 3a4:	47 fd       	sbrc	r20, 7
 3a6:	80 81       	ld	r24, Z
 3a8:	92 e0       	ldi	r25, 0x02	; 2
 3aa:	69 0e       	add	r6, r25
 3ac:	71 1c       	adc	r7, r1
 3ae:	81 1c       	adc	r8, r1
 3b0:	85 32       	cpi	r24, 0x25	; 37
 3b2:	29 f4       	brne	.+10     	; 0x3be <vfprintf+0x9e>
 3b4:	b6 01       	movw	r22, r12
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
 3bc:	e0 cf       	rjmp	.-64     	; 0x37e <vfprintf+0x5e>
 3be:	b1 2c       	mov	r11, r1
 3c0:	00 e0       	ldi	r16, 0x00	; 0
 3c2:	10 e0       	ldi	r17, 0x00	; 0
 3c4:	10 32       	cpi	r17, 0x20	; 32
 3c6:	a0 f4       	brcc	.+40     	; 0x3f0 <vfprintf+0xd0>
 3c8:	8b 32       	cpi	r24, 0x2B	; 43
 3ca:	69 f0       	breq	.+26     	; 0x3e6 <vfprintf+0xc6>
 3cc:	30 f4       	brcc	.+12     	; 0x3da <vfprintf+0xba>
 3ce:	80 32       	cpi	r24, 0x20	; 32
 3d0:	59 f0       	breq	.+22     	; 0x3e8 <vfprintf+0xc8>
 3d2:	83 32       	cpi	r24, 0x23	; 35
 3d4:	69 f4       	brne	.+26     	; 0x3f0 <vfprintf+0xd0>
 3d6:	10 61       	ori	r17, 0x10	; 16
 3d8:	2c c0       	rjmp	.+88     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3da:	8d 32       	cpi	r24, 0x2D	; 45
 3dc:	39 f0       	breq	.+14     	; 0x3ec <vfprintf+0xcc>
 3de:	80 33       	cpi	r24, 0x30	; 48
 3e0:	39 f4       	brne	.+14     	; 0x3f0 <vfprintf+0xd0>
 3e2:	11 60       	ori	r17, 0x01	; 1
 3e4:	26 c0       	rjmp	.+76     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3e6:	12 60       	ori	r17, 0x02	; 2
 3e8:	14 60       	ori	r17, 0x04	; 4
 3ea:	23 c0       	rjmp	.+70     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3ec:	18 60       	ori	r17, 0x08	; 8
 3ee:	21 c0       	rjmp	.+66     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3f0:	17 fd       	sbrc	r17, 7
 3f2:	29 c0       	rjmp	.+82     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3f4:	90 ed       	ldi	r25, 0xD0	; 208
 3f6:	98 0f       	add	r25, r24
 3f8:	9a 30       	cpi	r25, 0x0A	; 10
 3fa:	78 f4       	brcc	.+30     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3fc:	16 ff       	sbrs	r17, 6
 3fe:	06 c0       	rjmp	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 400:	aa e0       	ldi	r26, 0x0A	; 10
 402:	ba 9e       	mul	r11, r26
 404:	90 0d       	add	r25, r0
 406:	11 24       	eor	r1, r1
 408:	b9 2e       	mov	r11, r25
 40a:	13 c0       	rjmp	.+38     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 40c:	ea e0       	ldi	r30, 0x0A	; 10
 40e:	0e 9f       	mul	r16, r30
 410:	90 0d       	add	r25, r0
 412:	11 24       	eor	r1, r1
 414:	09 2f       	mov	r16, r25
 416:	10 62       	ori	r17, 0x20	; 32
 418:	0c c0       	rjmp	.+24     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 41a:	8e 32       	cpi	r24, 0x2E	; 46
 41c:	21 f4       	brne	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41e:	16 fd       	sbrc	r17, 6
 420:	85 c1       	rjmp	.+778    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 422:	10 64       	ori	r17, 0x40	; 64
 424:	06 c0       	rjmp	.+12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 426:	8c 36       	cpi	r24, 0x6C	; 108
 428:	11 f4       	brne	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	10 68       	ori	r17, 0x80	; 128
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	88 36       	cpi	r24, 0x68	; 104
 430:	51 f4       	brne	.+20     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 432:	f3 01       	movw	r30, r6
 434:	84 91       	lpm	r24, Z
 436:	87 fc       	sbrc	r8, 7
 438:	80 81       	ld	r24, Z
 43a:	ff ef       	ldi	r31, 0xFF	; 255
 43c:	6f 1a       	sub	r6, r31
 43e:	7f 0a       	sbc	r7, r31
 440:	8f 0a       	sbc	r8, r31
 442:	81 11       	cpse	r24, r1
 444:	bf cf       	rjmp	.-130    	; 0x3c4 <vfprintf+0xa4>
 446:	98 2f       	mov	r25, r24
 448:	9f 7d       	andi	r25, 0xDF	; 223
 44a:	95 54       	subi	r25, 0x45	; 69
 44c:	93 30       	cpi	r25, 0x03	; 3
 44e:	28 f4       	brcc	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 450:	24 e0       	ldi	r18, 0x04	; 4
 452:	e2 0e       	add	r14, r18
 454:	f1 1c       	adc	r15, r1
 456:	99 82       	std	Y+1, r9	; 0x01
 458:	0f c0       	rjmp	.+30     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	31 f0       	breq	.+12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 45e:	83 37       	cpi	r24, 0x73	; 115
 460:	91 f0       	breq	.+36     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 462:	83 35       	cpi	r24, 0x53	; 83
 464:	09 f0       	breq	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 466:	63 c0       	rjmp	.+198    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 468:	27 c0       	rjmp	.+78     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 46a:	f7 01       	movw	r30, r14
 46c:	80 81       	ld	r24, Z
 46e:	89 83       	std	Y+1, r24	; 0x01
 470:	97 01       	movw	r18, r14
 472:	2e 5f       	subi	r18, 0xFE	; 254
 474:	3f 4f       	sbci	r19, 0xFF	; 255
 476:	79 01       	movw	r14, r18
 478:	28 88       	ldd	r2, Y+16	; 0x10
 47a:	39 88       	ldd	r3, Y+17	; 0x11
 47c:	4a 88       	ldd	r4, Y+18	; 0x12
 47e:	aa 24       	eor	r10, r10
 480:	a3 94       	inc	r10
 482:	b1 2c       	mov	r11, r1
 484:	17 c0       	rjmp	.+46     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 486:	a7 01       	movw	r20, r14
 488:	4d 5f       	subi	r20, 0xFD	; 253
 48a:	5f 4f       	sbci	r21, 0xFF	; 255
 48c:	5f 87       	std	Y+15, r21	; 0x0f
 48e:	4e 87       	std	Y+14, r20	; 0x0e
 490:	f7 01       	movw	r30, r14
 492:	20 80       	ld	r2, Z
 494:	31 80       	ldd	r3, Z+1	; 0x01
 496:	42 80       	ldd	r4, Z+2	; 0x02
 498:	16 ff       	sbrs	r17, 6
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49c:	4b 2d       	mov	r20, r11
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	4f ef       	ldi	r20, 0xFF	; 255
 4a4:	5f ef       	ldi	r21, 0xFF	; 255
 4a6:	84 2d       	mov	r24, r4
 4a8:	b1 01       	movw	r22, r2
 4aa:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <strnlen>
 4ae:	5c 01       	movw	r10, r24
 4b0:	ee 84       	ldd	r14, Y+14	; 0x0e
 4b2:	ff 84       	ldd	r15, Y+15	; 0x0f
 4b4:	1f 77       	andi	r17, 0x7F	; 127
 4b6:	18 c0       	rjmp	.+48     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4b8:	97 01       	movw	r18, r14
 4ba:	2d 5f       	subi	r18, 0xFD	; 253
 4bc:	3f 4f       	sbci	r19, 0xFF	; 255
 4be:	3f 87       	std	Y+15, r19	; 0x0f
 4c0:	2e 87       	std	Y+14, r18	; 0x0e
 4c2:	f7 01       	movw	r30, r14
 4c4:	20 80       	ld	r2, Z
 4c6:	31 80       	ldd	r3, Z+1	; 0x01
 4c8:	42 80       	ldd	r4, Z+2	; 0x02
 4ca:	16 ff       	sbrs	r17, 6
 4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4ce:	4b 2d       	mov	r20, r11
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d4:	4f ef       	ldi	r20, 0xFF	; 255
 4d6:	5f ef       	ldi	r21, 0xFF	; 255
 4d8:	84 2d       	mov	r24, r4
 4da:	b1 01       	movw	r22, r2
 4dc:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <strnlen>
 4e0:	5c 01       	movw	r10, r24
 4e2:	10 68       	ori	r17, 0x80	; 128
 4e4:	ee 84       	ldd	r14, Y+14	; 0x0e
 4e6:	ff 84       	ldd	r15, Y+15	; 0x0f
 4e8:	13 fd       	sbrc	r17, 3
 4ea:	1d c0       	rjmp	.+58     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 4ec:	80 2f       	mov	r24, r16
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	a8 16       	cp	r10, r24
 4f2:	b9 06       	cpc	r11, r25
 4f4:	c0 f4       	brcc	.+48     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 4f6:	b6 01       	movw	r22, r12
 4f8:	80 e2       	ldi	r24, 0x20	; 32
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
 500:	01 50       	subi	r16, 0x01	; 1
 502:	f4 cf       	rjmp	.-24     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 504:	f1 01       	movw	r30, r2
 506:	84 91       	lpm	r24, Z
 508:	47 fc       	sbrc	r4, 7
 50a:	80 81       	ld	r24, Z
 50c:	ff ef       	ldi	r31, 0xFF	; 255
 50e:	2f 1a       	sub	r2, r31
 510:	3f 0a       	sbc	r3, r31
 512:	4f 0a       	sbc	r4, r31
 514:	b6 01       	movw	r22, r12
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
 51c:	01 11       	cpse	r16, r1
 51e:	01 50       	subi	r16, 0x01	; 1
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	a2 1a       	sub	r10, r18
 524:	b1 08       	sbc	r11, r1
 526:	a1 14       	cp	r10, r1
 528:	b1 04       	cpc	r11, r1
 52a:	61 f7       	brne	.-40     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 52c:	f5 c0       	rjmp	.+490    	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 52e:	84 36       	cpi	r24, 0x64	; 100
 530:	11 f0       	breq	.+4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 532:	89 36       	cpi	r24, 0x69	; 105
 534:	71 f5       	brne	.+92     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 536:	f7 01       	movw	r30, r14
 538:	17 ff       	sbrs	r17, 7
 53a:	08 c0       	rjmp	.+16     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 53c:	60 81       	ld	r22, Z
 53e:	71 81       	ldd	r23, Z+1	; 0x01
 540:	82 81       	ldd	r24, Z+2	; 0x02
 542:	93 81       	ldd	r25, Z+3	; 0x03
 544:	97 01       	movw	r18, r14
 546:	2c 5f       	subi	r18, 0xFC	; 252
 548:	3f 4f       	sbci	r19, 0xFF	; 255
 54a:	09 c0       	rjmp	.+18     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 54c:	60 81       	ld	r22, Z
 54e:	71 81       	ldd	r23, Z+1	; 0x01
 550:	07 2e       	mov	r0, r23
 552:	00 0c       	add	r0, r0
 554:	88 0b       	sbc	r24, r24
 556:	99 0b       	sbc	r25, r25
 558:	97 01       	movw	r18, r14
 55a:	2e 5f       	subi	r18, 0xFE	; 254
 55c:	3f 4f       	sbci	r19, 0xFF	; 255
 55e:	79 01       	movw	r14, r18
 560:	1f 76       	andi	r17, 0x6F	; 111
 562:	31 2e       	mov	r3, r17
 564:	97 ff       	sbrs	r25, 7
 566:	0a c0       	rjmp	.+20     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 568:	90 95       	com	r25
 56a:	80 95       	com	r24
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	31 2f       	mov	r19, r17
 578:	30 68       	ori	r19, 0x80	; 128
 57a:	33 2e       	mov	r3, r19
 57c:	2a e0       	ldi	r18, 0x0A	; 10
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	ae 01       	movw	r20, r28
 582:	4f 5f       	subi	r20, 0xFF	; 255
 584:	5f 4f       	sbci	r21, 0xFF	; 255
 586:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__ultoa_invert>
 58a:	48 2e       	mov	r4, r24
 58c:	4c 85       	ldd	r20, Y+12	; 0x0c
 58e:	44 1a       	sub	r4, r20
 590:	4a c0       	rjmp	.+148    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 592:	85 37       	cpi	r24, 0x75	; 117
 594:	29 f4       	brne	.+10     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 596:	1f 7e       	andi	r17, 0xEF	; 239
 598:	a1 2e       	mov	r10, r17
 59a:	2a e0       	ldi	r18, 0x0A	; 10
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	25 c0       	rjmp	.+74     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5a0:	51 2f       	mov	r21, r17
 5a2:	59 7f       	andi	r21, 0xF9	; 249
 5a4:	a5 2e       	mov	r10, r21
 5a6:	8f 36       	cpi	r24, 0x6F	; 111
 5a8:	c1 f0       	breq	.+48     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5aa:	18 f4       	brcc	.+6      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5ac:	88 35       	cpi	r24, 0x58	; 88
 5ae:	79 f0       	breq	.+30     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5b0:	bd c0       	rjmp	.+378    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 5b2:	80 37       	cpi	r24, 0x70	; 112
 5b4:	19 f0       	breq	.+6      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5b6:	88 37       	cpi	r24, 0x78	; 120
 5b8:	21 f0       	breq	.+8      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5ba:	b8 c0       	rjmp	.+368    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 5bc:	85 2f       	mov	r24, r21
 5be:	80 61       	ori	r24, 0x10	; 16
 5c0:	a8 2e       	mov	r10, r24
 5c2:	a4 fe       	sbrs	r10, 4
 5c4:	0d c0       	rjmp	.+26     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5c6:	9a 2d       	mov	r25, r10
 5c8:	94 60       	ori	r25, 0x04	; 4
 5ca:	a9 2e       	mov	r10, r25
 5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5ce:	14 ff       	sbrs	r17, 4
 5d0:	0a c0       	rjmp	.+20     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5d2:	a5 2f       	mov	r26, r21
 5d4:	a6 60       	ori	r26, 0x06	; 6
 5d6:	aa 2e       	mov	r10, r26
 5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5da:	28 e0       	ldi	r18, 0x08	; 8
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	05 c0       	rjmp	.+10     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e0:	20 e1       	ldi	r18, 0x10	; 16
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e6:	20 e1       	ldi	r18, 0x10	; 16
 5e8:	32 e0       	ldi	r19, 0x02	; 2
 5ea:	f7 01       	movw	r30, r14
 5ec:	a7 fe       	sbrs	r10, 7
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5f0:	60 81       	ld	r22, Z
 5f2:	71 81       	ldd	r23, Z+1	; 0x01
 5f4:	82 81       	ldd	r24, Z+2	; 0x02
 5f6:	93 81       	ldd	r25, Z+3	; 0x03
 5f8:	a7 01       	movw	r20, r14
 5fa:	4c 5f       	subi	r20, 0xFC	; 252
 5fc:	5f 4f       	sbci	r21, 0xFF	; 255
 5fe:	07 c0       	rjmp	.+14     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 600:	60 81       	ld	r22, Z
 602:	71 81       	ldd	r23, Z+1	; 0x01
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	a7 01       	movw	r20, r14
 60a:	4e 5f       	subi	r20, 0xFE	; 254
 60c:	5f 4f       	sbci	r21, 0xFF	; 255
 60e:	7a 01       	movw	r14, r20
 610:	ae 01       	movw	r20, r28
 612:	4f 5f       	subi	r20, 0xFF	; 255
 614:	5f 4f       	sbci	r21, 0xFF	; 255
 616:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__ultoa_invert>
 61a:	48 2e       	mov	r4, r24
 61c:	5c 85       	ldd	r21, Y+12	; 0x0c
 61e:	45 1a       	sub	r4, r21
 620:	8a 2d       	mov	r24, r10
 622:	8f 77       	andi	r24, 0x7F	; 127
 624:	38 2e       	mov	r3, r24
 626:	36 fe       	sbrs	r3, 6
 628:	0d c0       	rjmp	.+26     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 62a:	93 2d       	mov	r25, r3
 62c:	9e 7f       	andi	r25, 0xFE	; 254
 62e:	a9 2e       	mov	r10, r25
 630:	4b 14       	cp	r4, r11
 632:	58 f4       	brcc	.+22     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 634:	34 fe       	sbrs	r3, 4
 636:	0b c0       	rjmp	.+22     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 638:	32 fc       	sbrc	r3, 2
 63a:	09 c0       	rjmp	.+18     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 63c:	a3 2d       	mov	r26, r3
 63e:	ae 7e       	andi	r26, 0xEE	; 238
 640:	aa 2e       	mov	r10, r26
 642:	05 c0       	rjmp	.+10     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 644:	14 2d       	mov	r17, r4
 646:	a3 2c       	mov	r10, r3
 648:	03 c0       	rjmp	.+6      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64a:	14 2d       	mov	r17, r4
 64c:	01 c0       	rjmp	.+2      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64e:	1b 2d       	mov	r17, r11
 650:	a4 fe       	sbrs	r10, 4
 652:	0e c0       	rjmp	.+28     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 654:	fe 01       	movw	r30, r28
 656:	e4 0d       	add	r30, r4
 658:	f1 1d       	adc	r31, r1
 65a:	80 81       	ld	r24, Z
 65c:	80 33       	cpi	r24, 0x30	; 48
 65e:	21 f4       	brne	.+8      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 660:	ea 2d       	mov	r30, r10
 662:	e9 7e       	andi	r30, 0xE9	; 233
 664:	ae 2e       	mov	r10, r30
 666:	08 c0       	rjmp	.+16     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 668:	a2 fe       	sbrs	r10, 2
 66a:	05 c0       	rjmp	.+10     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 66c:	1e 5f       	subi	r17, 0xFE	; 254
 66e:	04 c0       	rjmp	.+8      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 670:	8a 2d       	mov	r24, r10
 672:	86 78       	andi	r24, 0x86	; 134
 674:	09 f0       	breq	.+2      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 676:	1f 5f       	subi	r17, 0xFF	; 255
 678:	a3 fc       	sbrc	r10, 3
 67a:	11 c0       	rjmp	.+34     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 67c:	a0 fe       	sbrs	r10, 0
 67e:	06 c0       	rjmp	.+12     	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 680:	10 17       	cp	r17, r16
 682:	88 f4       	brcc	.+34     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 684:	04 0d       	add	r16, r4
 686:	b0 2e       	mov	r11, r16
 688:	b1 1a       	sub	r11, r17
 68a:	0e c0       	rjmp	.+28     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 68c:	10 17       	cp	r17, r16
 68e:	60 f4       	brcc	.+24     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 690:	b6 01       	movw	r22, r12
 692:	80 e2       	ldi	r24, 0x20	; 32
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
 69a:	1f 5f       	subi	r17, 0xFF	; 255
 69c:	f7 cf       	rjmp	.-18     	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 69e:	10 17       	cp	r17, r16
 6a0:	18 f4       	brcc	.+6      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 6a2:	01 1b       	sub	r16, r17
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 6a6:	b4 2c       	mov	r11, r4
 6a8:	00 e0       	ldi	r16, 0x00	; 0
 6aa:	a4 fe       	sbrs	r10, 4
 6ac:	10 c0       	rjmp	.+32     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6ae:	b6 01       	movw	r22, r12
 6b0:	80 e3       	ldi	r24, 0x30	; 48
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
 6b8:	a2 fe       	sbrs	r10, 2
 6ba:	17 c0       	rjmp	.+46     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6bc:	a1 fc       	sbrc	r10, 1
 6be:	03 c0       	rjmp	.+6      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6c0:	88 e7       	ldi	r24, 0x78	; 120
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6c6:	88 e5       	ldi	r24, 0x58	; 88
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	b6 01       	movw	r22, r12
 6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6ce:	8a 2d       	mov	r24, r10
 6d0:	86 78       	andi	r24, 0x86	; 134
 6d2:	59 f0       	breq	.+22     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6d4:	a1 fe       	sbrs	r10, 1
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6d8:	8b e2       	ldi	r24, 0x2B	; 43
 6da:	01 c0       	rjmp	.+2      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6dc:	80 e2       	ldi	r24, 0x20	; 32
 6de:	a7 fc       	sbrc	r10, 7
 6e0:	8d e2       	ldi	r24, 0x2D	; 45
 6e2:	b6 01       	movw	r22, r12
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
 6ea:	4b 14       	cp	r4, r11
 6ec:	38 f4       	brcc	.+14     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6ee:	b6 01       	movw	r22, r12
 6f0:	80 e3       	ldi	r24, 0x30	; 48
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
 6f8:	ba 94       	dec	r11
 6fa:	f7 cf       	rjmp	.-18     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6fc:	4a 94       	dec	r4
 6fe:	e1 e0       	ldi	r30, 0x01	; 1
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	ec 0f       	add	r30, r28
 704:	fd 1f       	adc	r31, r29
 706:	e4 0d       	add	r30, r4
 708:	f1 1d       	adc	r31, r1
 70a:	80 81       	ld	r24, Z
 70c:	b6 01       	movw	r22, r12
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
 714:	41 10       	cpse	r4, r1
 716:	f2 cf       	rjmp	.-28     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 718:	00 23       	and	r16, r16
 71a:	09 f4       	brne	.+2      	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 71c:	30 ce       	rjmp	.-928    	; 0x37e <vfprintf+0x5e>
 71e:	b6 01       	movw	r22, r12
 720:	80 e2       	ldi	r24, 0x20	; 32
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
 728:	01 50       	subi	r16, 0x01	; 1
 72a:	f6 cf       	rjmp	.-20     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 72c:	f6 01       	movw	r30, r12
 72e:	87 81       	ldd	r24, Z+7	; 0x07
 730:	90 85       	ldd	r25, Z+8	; 0x08
 732:	02 c0       	rjmp	.+4      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 734:	8f ef       	ldi	r24, 0xFF	; 255
 736:	9f ef       	ldi	r25, 0xFF	; 255
 738:	62 96       	adiw	r28, 0x12	; 18
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	de bf       	out	0x3e, r29	; 62
 740:	0f be       	out	0x3f, r0	; 63
 742:	cd bf       	out	0x3d, r28	; 61
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	ff 90       	pop	r15
 74e:	ef 90       	pop	r14
 750:	df 90       	pop	r13
 752:	cf 90       	pop	r12
 754:	bf 90       	pop	r11
 756:	af 90       	pop	r10
 758:	9f 90       	pop	r9
 75a:	8f 90       	pop	r8
 75c:	7f 90       	pop	r7
 75e:	6f 90       	pop	r6
 760:	4f 90       	pop	r4
 762:	3f 90       	pop	r3
 764:	2f 90       	pop	r2
 766:	08 95       	ret

Disassembly of section .text.avrlibc:

00002fbe <strnlen>:
    2fbe:	cf 92       	push	r12
    2fc0:	df 92       	push	r13
    2fc2:	ef 92       	push	r14
    2fc4:	6b 01       	movw	r12, r22
    2fc6:	e8 2e       	mov	r14, r24
    2fc8:	a8 2f       	mov	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	41 15       	cp	r20, r1
    2fce:	51 05       	cpc	r21, r1
    2fd0:	31 f4       	brne	.+12     	; 0x2fde <strnlen+0x20>
    2fd2:	8c 19       	sub	r24, r12
    2fd4:	9d 09       	sbc	r25, r13
    2fd6:	ef 90       	pop	r14
    2fd8:	df 90       	pop	r13
    2fda:	cf 90       	pop	r12
    2fdc:	08 95       	ret
    2fde:	fc 01       	movw	r30, r24
    2fe0:	24 91       	lpm	r18, Z
    2fe2:	a7 fd       	sbrc	r26, 7
    2fe4:	20 81       	ld	r18, Z
    2fe6:	22 23       	and	r18, r18
    2fe8:	a1 f3       	breq	.-24     	; 0x2fd2 <strnlen+0x14>
    2fea:	01 96       	adiw	r24, 0x01	; 1
    2fec:	a1 1d       	adc	r26, r1
    2fee:	41 50       	subi	r20, 0x01	; 1
    2ff0:	51 09       	sbc	r21, r1
    2ff2:	ec cf       	rjmp	.-40     	; 0x2fcc <strnlen+0xe>

Disassembly of section .text.avrlibc:

0000211c <fputc>:
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	fb 01       	movw	r30, r22
    2126:	24 81       	ldd	r18, Z+4	; 0x04
    2128:	21 fd       	sbrc	r18, 1
    212a:	03 c0       	rjmp	.+6      	; 0x2132 <fputc+0x16>
    212c:	8f ef       	ldi	r24, 0xFF	; 255
    212e:	9f ef       	ldi	r25, 0xFF	; 255
    2130:	2c c0       	rjmp	.+88     	; 0x218a <fputc+0x6e>
    2132:	22 ff       	sbrs	r18, 2
    2134:	16 c0       	rjmp	.+44     	; 0x2162 <fputc+0x46>
    2136:	47 81       	ldd	r20, Z+7	; 0x07
    2138:	50 85       	ldd	r21, Z+8	; 0x08
    213a:	25 81       	ldd	r18, Z+5	; 0x05
    213c:	36 81       	ldd	r19, Z+6	; 0x06
    213e:	42 17       	cp	r20, r18
    2140:	53 07       	cpc	r21, r19
    2142:	44 f4       	brge	.+16     	; 0x2154 <fputc+0x38>
    2144:	a0 81       	ld	r26, Z
    2146:	b1 81       	ldd	r27, Z+1	; 0x01
    2148:	9d 01       	movw	r18, r26
    214a:	2f 5f       	subi	r18, 0xFF	; 255
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	31 83       	std	Z+1, r19	; 0x01
    2150:	20 83       	st	Z, r18
    2152:	8c 93       	st	X, r24
    2154:	27 81       	ldd	r18, Z+7	; 0x07
    2156:	30 85       	ldd	r19, Z+8	; 0x08
    2158:	2f 5f       	subi	r18, 0xFF	; 255
    215a:	3f 4f       	sbci	r19, 0xFF	; 255
    215c:	30 87       	std	Z+8, r19	; 0x08
    215e:	27 83       	std	Z+7, r18	; 0x07
    2160:	14 c0       	rjmp	.+40     	; 0x218a <fputc+0x6e>
    2162:	8b 01       	movw	r16, r22
    2164:	ec 01       	movw	r28, r24
    2166:	fb 01       	movw	r30, r22
    2168:	01 84       	ldd	r0, Z+9	; 0x09
    216a:	f2 85       	ldd	r31, Z+10	; 0x0a
    216c:	e0 2d       	mov	r30, r0
    216e:	09 95       	icall
    2170:	89 2b       	or	r24, r25
    2172:	e1 f6       	brne	.-72     	; 0x212c <fputc+0x10>
    2174:	d8 01       	movw	r26, r16
    2176:	17 96       	adiw	r26, 0x07	; 7
    2178:	8d 91       	ld	r24, X+
    217a:	9c 91       	ld	r25, X
    217c:	18 97       	sbiw	r26, 0x08	; 8
    217e:	01 96       	adiw	r24, 0x01	; 1
    2180:	18 96       	adiw	r26, 0x08	; 8
    2182:	9c 93       	st	X, r25
    2184:	8e 93       	st	-X, r24
    2186:	17 97       	sbiw	r26, 0x07	; 7
    2188:	ce 01       	movw	r24, r28
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	0f 91       	pop	r16
    2192:	08 95       	ret

Disassembly of section .text.avrlibc:

00001978 <__ultoa_invert>:
    1978:	fa 01       	movw	r30, r20
    197a:	aa 27       	eor	r26, r26
    197c:	28 30       	cpi	r18, 0x08	; 8
    197e:	51 f1       	breq	.+84     	; 0x19d4 <__ultoa_invert+0x5c>
    1980:	20 31       	cpi	r18, 0x10	; 16
    1982:	81 f1       	breq	.+96     	; 0x19e4 <__ultoa_invert+0x6c>
    1984:	e8 94       	clt
    1986:	6f 93       	push	r22
    1988:	6e 7f       	andi	r22, 0xFE	; 254
    198a:	6e 5f       	subi	r22, 0xFE	; 254
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	8f 4f       	sbci	r24, 0xFF	; 255
    1990:	9f 4f       	sbci	r25, 0xFF	; 255
    1992:	af 4f       	sbci	r26, 0xFF	; 255
    1994:	b1 e0       	ldi	r27, 0x01	; 1
    1996:	3e d0       	rcall	.+124    	; 0x1a14 <__ultoa_invert+0x9c>
    1998:	b4 e0       	ldi	r27, 0x04	; 4
    199a:	3c d0       	rcall	.+120    	; 0x1a14 <__ultoa_invert+0x9c>
    199c:	67 0f       	add	r22, r23
    199e:	78 1f       	adc	r23, r24
    19a0:	89 1f       	adc	r24, r25
    19a2:	9a 1f       	adc	r25, r26
    19a4:	a1 1d       	adc	r26, r1
    19a6:	68 0f       	add	r22, r24
    19a8:	79 1f       	adc	r23, r25
    19aa:	8a 1f       	adc	r24, r26
    19ac:	91 1d       	adc	r25, r1
    19ae:	a1 1d       	adc	r26, r1
    19b0:	6a 0f       	add	r22, r26
    19b2:	71 1d       	adc	r23, r1
    19b4:	81 1d       	adc	r24, r1
    19b6:	91 1d       	adc	r25, r1
    19b8:	a1 1d       	adc	r26, r1
    19ba:	20 d0       	rcall	.+64     	; 0x19fc <__ultoa_invert+0x84>
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <__ultoa_invert+0x48>
    19be:	68 94       	set
    19c0:	3f 91       	pop	r19
    19c2:	2a e0       	ldi	r18, 0x0A	; 10
    19c4:	26 9f       	mul	r18, r22
    19c6:	11 24       	eor	r1, r1
    19c8:	30 19       	sub	r19, r0
    19ca:	30 5d       	subi	r19, 0xD0	; 208
    19cc:	31 93       	st	Z+, r19
    19ce:	de f6       	brtc	.-74     	; 0x1986 <__ultoa_invert+0xe>
    19d0:	cf 01       	movw	r24, r30
    19d2:	08 95       	ret
    19d4:	46 2f       	mov	r20, r22
    19d6:	47 70       	andi	r20, 0x07	; 7
    19d8:	40 5d       	subi	r20, 0xD0	; 208
    19da:	41 93       	st	Z+, r20
    19dc:	b3 e0       	ldi	r27, 0x03	; 3
    19de:	0f d0       	rcall	.+30     	; 0x19fe <__ultoa_invert+0x86>
    19e0:	c9 f7       	brne	.-14     	; 0x19d4 <__ultoa_invert+0x5c>
    19e2:	f6 cf       	rjmp	.-20     	; 0x19d0 <__ultoa_invert+0x58>
    19e4:	46 2f       	mov	r20, r22
    19e6:	4f 70       	andi	r20, 0x0F	; 15
    19e8:	40 5d       	subi	r20, 0xD0	; 208
    19ea:	4a 33       	cpi	r20, 0x3A	; 58
    19ec:	18 f0       	brcs	.+6      	; 0x19f4 <__ultoa_invert+0x7c>
    19ee:	49 5d       	subi	r20, 0xD9	; 217
    19f0:	31 fd       	sbrc	r19, 1
    19f2:	40 52       	subi	r20, 0x20	; 32
    19f4:	41 93       	st	Z+, r20
    19f6:	02 d0       	rcall	.+4      	; 0x19fc <__ultoa_invert+0x84>
    19f8:	a9 f7       	brne	.-22     	; 0x19e4 <__ultoa_invert+0x6c>
    19fa:	ea cf       	rjmp	.-44     	; 0x19d0 <__ultoa_invert+0x58>
    19fc:	b4 e0       	ldi	r27, 0x04	; 4
    19fe:	a6 95       	lsr	r26
    1a00:	97 95       	ror	r25
    1a02:	87 95       	ror	r24
    1a04:	77 95       	ror	r23
    1a06:	67 95       	ror	r22
    1a08:	ba 95       	dec	r27
    1a0a:	c9 f7       	brne	.-14     	; 0x19fe <__ultoa_invert+0x86>
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	61 05       	cpc	r22, r1
    1a10:	71 05       	cpc	r23, r1
    1a12:	08 95       	ret
    1a14:	9b 01       	movw	r18, r22
    1a16:	ac 01       	movw	r20, r24
    1a18:	0a 2e       	mov	r0, r26
    1a1a:	06 94       	lsr	r0
    1a1c:	57 95       	ror	r21
    1a1e:	47 95       	ror	r20
    1a20:	37 95       	ror	r19
    1a22:	27 95       	ror	r18
    1a24:	ba 95       	dec	r27
    1a26:	c9 f7       	brne	.-14     	; 0x1a1a <__ultoa_invert+0xa2>
    1a28:	62 0f       	add	r22, r18
    1a2a:	73 1f       	adc	r23, r19
    1a2c:	84 1f       	adc	r24, r20
    1a2e:	95 1f       	adc	r25, r21
    1a30:	a0 1d       	adc	r26, r0
    1a32:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00002f1a <__prologue_saves__>:
    2f1a:	2f 92       	push	r2
    2f1c:	3f 92       	push	r3
    2f1e:	4f 92       	push	r4
    2f20:	5f 92       	push	r5
    2f22:	6f 92       	push	r6
    2f24:	7f 92       	push	r7
    2f26:	8f 92       	push	r8
    2f28:	9f 92       	push	r9
    2f2a:	af 92       	push	r10
    2f2c:	bf 92       	push	r11
    2f2e:	cf 92       	push	r12
    2f30:	df 92       	push	r13
    2f32:	ef 92       	push	r14
    2f34:	ff 92       	push	r15
    2f36:	0f 93       	push	r16
    2f38:	1f 93       	push	r17
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	ca 1b       	sub	r28, r26
    2f44:	db 0b       	sbc	r29, r27
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00002ff4 <__epilogue_restores__>:
    2ff4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ff6:	39 88       	ldd	r3, Y+17	; 0x11
    2ff8:	48 88       	ldd	r4, Y+16	; 0x10
    2ffa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ffc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ffe:	7d 84       	ldd	r7, Y+13	; 0x0d
    3000:	8c 84       	ldd	r8, Y+12	; 0x0c
    3002:	9b 84       	ldd	r9, Y+11	; 0x0b
    3004:	aa 84       	ldd	r10, Y+10	; 0x0a
    3006:	b9 84       	ldd	r11, Y+9	; 0x09
    3008:	c8 84       	ldd	r12, Y+8	; 0x08
    300a:	df 80       	ldd	r13, Y+7	; 0x07
    300c:	ee 80       	ldd	r14, Y+6	; 0x06
    300e:	fd 80       	ldd	r15, Y+5	; 0x05
    3010:	0c 81       	ldd	r16, Y+4	; 0x04
    3012:	1b 81       	ldd	r17, Y+3	; 0x03
    3014:	aa 81       	ldd	r26, Y+2	; 0x02
    3016:	b9 81       	ldd	r27, Y+1	; 0x01
    3018:	ce 0f       	add	r28, r30
    301a:	d1 1d       	adc	r29, r1
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	ed 01       	movw	r28, r26
    3028:	08 95       	ret
