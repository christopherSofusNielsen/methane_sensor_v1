
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00007446  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006d8  00800100  00800100  00007446  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00007446  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  000074a1  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000c30  00000000  00000000  00007518  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013425  00000000  00000000  00008148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003559  00000000  00000000  0001b56d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007137  00000000  00000000  0001eac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002058  00000000  00000000  00025c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001630  00000000  00000000  00027c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d66  00000000  00000000  00029288  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a18  00000000  00000000  00030fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000072f4  000072f4  00007428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00031a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00006fca  00006fca  000070fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00006e1c  00006e1c  00006f50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00006fd8  00006fd8  0000710c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00006e30  00006e30  00006f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00006fe6  00006fe6  0000711a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00006e44  00006e44  00006f78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  00006ff4  00006ff4  00007128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  00006e58  00006e58  00006f8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  00007002  00007002  00007136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  00006e6c  00006e6c  00006fa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  00007242  00007242  00007376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 0000003c  0000616a  0000616a  0000629e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  00006e80  00006e80  00006fb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  0000724a  0000724a  0000737e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  00007252  00007252  00007386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  0000725a  0000725a  0000738e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  00007010  00007010  00007144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  000071ca  000071ca  000072fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000022  00006aa8  00006aa8  00006bdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  000072b2  000072b2  000073e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  000072f8  000072f8  0000742c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  000058ac  000058ac  000059e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800ebb  00800ebb  00007446  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000036  00006420  00006420  00006554  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  000070fe  000070fe  00007232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  0000710a  0000710a  0000723e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  000058fa  000058fa  00005a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800ebd  00800ebd  00007446  2**0
                  ALLOC
 43 .text.clear_callbacks 00000020  00006b52  00006b52  00006c86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.start_timer 00000008  00007262  00007262  00007396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.stop_timer 00000006  000072b8  000072b8  000073ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_init 00000020  00006b72  00006b72  00006ca6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_kill 0000000a  000071d4  000071d4  00007308  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TC2_HAL_subscribe 00000054  00005712  00005712  00005846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TC2_HAL_cancel 0000003a  0000621e  0000621e  00006352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_9 0000007c  00004968  00004968  00004a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .bss.cnt      00000001  00800edd  00800edd  00007446  2**0
                  ALLOC
 52 .bss.cbCounter 00000001  00800ede  00800ede  00007446  2**0
                  ALLOC
 53 .bss.callbacks 0000000a  00800e78  00800e78  00007446  2**0
                  ALLOC
 54 .text.start_and_write_data 0000004c  00005a32  00005a32  00005b66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.read_and_stop 0000005a  00005502  00005502  00005636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_write_data 00000014  00006e94  00006e94  00006fc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_write_data_stop 0000001a  00006d32  00006d32  00006e66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_API_read_data_ack_end_nack_stop 00000032  000065ca  000065ca  000066fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_API_repeat_read_data_stop 00000030  000066c4  000066c4  000067f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_init 00000012  00006ef8  00006ef8  0000702c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_start 00000048  00005cda  00005cda  00005e0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_repeated_start 00000042  00006026  00006026  0000615a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_write_byte 00000020  00006b92  00006b92  00006cc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_read_byte_ack 00000014  00006ea8  00006ea8  00006fdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.TWI_HAL_read_byte_nack 00000014  00006ebc  00006ebc  00006ff0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.TWI_HAL_stop 00000010  00006f9a  00006f9a  000070ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.copy_buffer 0000002e  00006874  00006874  000069a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_init 0000003c  000061a6  000061a6  000062da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_send_message 0000004e  00005948  00005948  00005a7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_send_string 0000007e  000048ea  000048ea  00004a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_message_ready 0000000e  0000701e  0000701e  00007152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_clear_rx_buffer 0000000a  000071de  000071de  00007312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart0_hal_read_message_as_str 00000028  00006952  00006952  00006a86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uart0_hal_send_break 00000046  00005e42  00005e42  00005f76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_22 0000006e  00004f6a  00004f6a  0000509e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_20 00000074  00004d30  00004d30  00004e64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800edf  00800edf  00007446  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800ee0  00800ee0  00007446  2**0
                  ALLOC
 79 .bss.tx_buffer_cursor 00000002  00800ebf  00800ebf  00007446  2**0
                  ALLOC
 80 .bss.tx_buffer_data_len 00000002  00800ec1  00800ec1  00007446  2**0
                  ALLOC
 81 .text.copy_buffer 0000002e  000068a2  000068a2  000069d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.uart1_hal_init 0000003c  000061e2  000061e2  00006316  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.uart1_hal_send_string 00000096  000044ec  000044ec  00004620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.uart1_hal_message_ready 0000000e  0000702c  0000702c  00007160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.uart1_hal_rx_full 0000000e  0000703a  0000703a  0000716e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.uart1_hal_clear_rx_buffer 0000000a  000071e8  000071e8  0000731c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.uart1_hal_read_message_as_str 00000028  0000697a  0000697a  00006aae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 0000006e  00004fd8  00004fd8  0000510c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_28 00000074  00004da4  00004da4  00004ed8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .bss.rx_buffer_has_message 00000001  00800ee1  00800ee1  00007446  2**0
                  ALLOC
 91 .bss.rx_buffer_data_len 00000001  00800ee2  00800ee2  00007446  2**0
                  ALLOC
 92 .bss.rx_buffer 0000004b  00800d8b  00800d8b  00007446  2**0
                  ALLOC
 93 .bss.tx_buffer_cursor 00000002  00800ec3  00800ec3  00007446  2**0
                  ALLOC
 94 .bss.tx_buffer_data_len 00000002  00800ec5  00800ec5  00007446  2**0
                  ALLOC
 95 .bss.tx_buffer 0000012c  008007d8  008007d8  00007446  2**0
                  ALLOC
 96 .text.UI_HAL_jumper_init 0000000e  00007048  00007048  0000717c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.UI_HAL_is_config_mode 0000000a  000071f2  000071f2  00007326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.main    0000003a  00006258  00006258  0000638c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.calc_ppm_methane 00000096  00004582  00004582  000046b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vect_ADC_heat_timeout 00000018  00006d66  00006d66  00006e9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.ADC_init_sampling 00000066  000052c2  000052c2  000053f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.ADC_deinit_sampling 00000014  00006ed0  00006ed0  00007004  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ADC_is_sampling_done 0000001c  00006ca6  00006ca6  00006dda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.ADC_get_value 00000056  00005666  00005666  0000579a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.vect_ADC_do_sample 00000046  00005e88  00005e88  00005fbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.ADC_start_sampling 0000000a  000071fc  000071fc  00007330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ADC_meth_sens_power_on 0000001e  00006bf2  00006bf2  00006d26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.ADC_meth_sens_power_off 00000008  0000726a  0000726a  0000739e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.ADC_meth_sens_ready 00000012  00006f0a  00006f0a  0000703e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADC_set_conf_parameters 00000042  00006068  00006068  0000619c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.cntPowerUpTime 00000001  00800ee3  00800ee3  00007446  2**0
                  ALLOC
112 .bss._powerUpTime 00000001  00800ee4  00800ee4  00007446  2**0
                  ALLOC
113 .bss.cntSamples 00000002  00800ec7  00800ec7  00007446  2**0
                  ALLOC
114 .bss._data    00000002  00800ec9  00800ec9  00007446  2**0
                  ALLOC
115 .bss._nSamples 00000002  00800ecb  00800ecb  00007446  2**0
                  ALLOC
116 .data.PPM_factor 00000004  00800e9f  00007301  00007435  2**0
                  CONTENTS, ALLOC, LOAD, DATA
117 .data.RRL     00000004  00800ea3  00007305  00007439  2**0
                  CONTENTS, ALLOC, LOAD, DATA
118 .data.Vc      00000004  00800ea7  00007309  0000743d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
119 .text.EM_has_deveui 00000016  00006dae  00006dae  00006ee2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_has_appeui 00000016  00006dc4  00006dc4  00006ef8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_has_appkey 00000016  00006dda  00006dda  00006f0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_set_deveui 0000003a  00006292  00006292  000063c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.EM_get_deveui 00000030  000066f4  000066f4  00006828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.EM_set_appeui 0000003a  000062cc  000062cc  00006400  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.EM_get_appeui 00000030  00006724  00006724  00006858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.EM_set_appkey 0000003a  00006306  00006306  0000643a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.EM_get_appkey 00000030  00006754  00006754  00006888  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.EM_set_ppmfactor 0000000e  00007056  00007056  0000718a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.EM_get_ppmfactor 0000001e  00006c10  00006c10  00006d44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.EM_set_RRL 0000000e  00007064  00007064  00007198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.EM_get_RRL 0000001e  00006c2e  00006c2e  00006d62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.EM_set_Vcc 0000000e  00007072  00007072  000071a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.EM_get_Vcc 0000001e  00006c4c  00006c4c  00006d80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.EM_set_collections 0000000e  00007080  00007080  000071b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.EM_get_collections 00000010  00006faa  00006faa  000070de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.EM_set_heat_up_time 0000000c  00007116  00007116  0000724a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.EM_get_heat_up_time 0000000c  00007122  00007122  00007256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.EM_set_air_pump_time 0000000c  0000712e  0000712e  00007262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.EM_get_air_pump_time 0000000c  0000713a  0000713a  0000726e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.EM_set_sp_interval 0000000c  00007146  00007146  0000727a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.EM_get_sp_interval 0000000c  00007152  00007152  00007286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.EM_set_group_id 0000000c  0000715e  0000715e  00007292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.EM_get_group_id 0000000c  0000716a  0000716a  0000729e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.cb_blink 00000006  000072be  000072be  000073f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.blink   0000004c  00005a7e  00005a7e  00005bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.err_code 00000038  00006340  00006340  00006474  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.LED_start_try_join 0000000e  0000708e  0000708e  000071c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.LED_stop_try_join 00000010  00006fba  00006fba  000070ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.LED_join_success 00000040  000060ec  000060ec  00006220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.LED_join_denied 00000008  00007272  00007272  000073a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.LED_conf_err 00000008  0000727a  0000727a  000073ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.LED_fatal_err 00000008  00007282  00007282  000073b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .bss.cbPointer 00000001  00800ee5  00800ee5  00007446  2**0
                  ALLOC
154 .progmemx.data 00000058  0000095f  0000095f  00000a93  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
155 .text.parse_err 00000058  000055b6  000055b6  000056ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.JN_join_network 000002a4  00001aea  00001aea  00001c1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.set_block_uplink 00000018  00006d7e  00006d7e  00006eb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.cb_block_uplink 0000001c  00006cc2  00006cc2  00006df6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.LM_join_network 00000006  000072c4  000072c4  000073f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.LM_send_uplink 0000002c  000068d0  000068d0  00006a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.LM_put_to_sleep 00000012  00006f1c  00006f1c  00007050  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.LM_wake_up 00000006  000072ca  000072ca  000073fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.LM_is_free 0000000a  00007206  00007206  0000733a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.LM_reset_module 00000006  000072d0  000072d0  00007404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.LM_forward_msg 00000006  000072d6  000072d6  0000740a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.LM_send_break 00000006  000072dc  000072dc  00007410  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.subPointer 00000001  00800ee6  00800ee6  00007446  2**0
                  ALLOC
168 .bss.busy     00000001  00800ee7  00800ee7  00007446  2**0
                  ALLOC
169 .bss.cnt      00000001  00800ee8  00800ee8  00007446  2**0
                  ALLOC
170 .progmemx.data 00000073  000008ec  000008ec  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
171 .text.tohex   0000007a  000049e4  000049e4  00004b18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.attach_ending 0000001c  00006cde  00006cde  00006e12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.cmd_with_ending 00000032  000065fc  000065fc  00006730  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.sys_sleep_cmd 0000005e  0000538c  0000538c  000054c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.mac_set_parameter 0000004e  00005996  00005996  00005aca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.mac_set_deveui 00000048  00005d22  00005d22  00005e56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.mac_set_appeui 00000048  00005d6a  00005d6a  00005e9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.mac_set_appkey 00000048  00005db2  00005db2  00005ee6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.mac_set_ADR 00000030  00006784  00006784  000068b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.mac_tx_confirmed 000000aa  0000424a  0000424a  0000437e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data 00000038  000009b7  000009b7  00000aeb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.decode_tx_response 00000068  0000518a  0000518a  000052be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SU_send_uplink 000000f8  000037e4  000037e4  00003918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.cb_counter 00000014  00006ee4  00006ee4  00007018  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.SC_put_to_sleep 00000038  00006378  00006378  000064ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .progmemx.data 00000003  00000a14  00000a14  00000b48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
187 .text.SC_wake_up 0000006e  00005046  00005046  0000517a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .bss.eventPointer 00000001  00800ee9  00800ee9  00007446  2**0
                  ALLOC
189 .bss.cnt      00000002  00800ecd  00800ecd  00007446  2**0
                  ALLOC
190 .text.cb_watchdog_counter 0000000c  00007176  00007176  000072aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.util_set_pending_states 0000000c  00007182  00007182  000072b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.util_set_match_case 0000000c  0000718e  0000718e  000072c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.util_str_begins_with 0000004a  00005c46  00005c46  00005d7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.util_match_message 0000005c  000054a6  000054a6  000055da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .progmemx.data 00000013  000009ef  000009ef  00000b23  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
196 .text.util_reset_module 00000046  00005ece  00005ece  00006002  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.util_lora_forward_msg 00000078  00004ad8  00004ad8  00004c0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.util_send_break 00000008  0000728a  0000728a  000073be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .bss.wd_cb_pointer 00000001  00800eea  00800eea  00007446  2**0
                  ALLOC
200 .bss.wd_cnt   00000001  00800eeb  00800eeb  00007446  2**0
                  ALLOC
201 .text.MRPP_init_group 0000001a  00006d4c  00006d4c  00006e80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.MRPP_add_collection_data_INT16 00000070  00004e8a  00004e8a  00004fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.MRPP_is_body_package_ready 00000022  00006aca  00006aca  00006bfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.MRPP_get_ready_body_package 00000096  00004618  00004618  0000474c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.MRPP_set_body_sent 0000000c  0000719a  0000719a  000072ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.MRPP_get_header_package 00000022  00006aec  00006aec  00006c20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.MRPP_get_tail_package 00000022  00006b0e  00006b0e  00006c42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.MRPP_all_body_package_sent 0000000a  00007210  00007210  00007344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.MRPP_validate_collections_space 00000064  00005328  00005328  0000545c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .bss.state    000000b3  00800c24  00800c24  00007446  2**0
                  ALLOC
211 .text.mrpp_data_add_int16 0000008e  000047d6  000047d6  0000490a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.mrpp_data_get 00000030  000067b4  000067b4  000068e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.add_data_types 000000aa  000042f4  000042f4  00004428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.update_bodies 00000162  00002872  00002872  000029a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.mrpp_state_init 00000174  000022c4  000022c4  000023f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.mrpp_state_get_header 000000aa  0000439e  0000439e  000044d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.mrpp_state_get_tail 000000ac  0000419e  0000419e  000042d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.mrpp_state_set_collection 00000086  00004864  00004864  00004998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.mrpp_state_is_body_ready 00000030  000067e4  000067e4  00006918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.mrpp_state_all_bodies_sent 0000002a  00006928  00006928  00006a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.mrpp_state_get_ready_body 000000f0  000038dc  000038dc  00003a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.mrpp_state_set_body_sent 00000020  00006bb2  00006bb2  00006ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.mrpp_state_get_collection_address 00000036  00006456  00006456  0000658a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.cb_cnt_time 00000030  00006814  00006814  00006948  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.PUMP_start 00000024  00006a18  00006a18  00006b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.PUMP_is_done 0000001c  00006cfa  00006cfa  00006e2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .bss.eventPointer 00000001  00800eec  00800eec  00007446  2**0
                  ALLOC
228 .bss.cnt      00000002  00800ecf  00800ecf  00007446  2**0
                  ALLOC
229 .bss._seconds 00000002  00800ed1  00800ed1  00007446  2**0
                  ALLOC
230 .text.datetime_to_BCD 00000100  000035e6  000035e6  0000371a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.RTC_set_clock_out 00000050  0000580c  0000580c  00005940  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.RTC_get_current_time 00000140  00002dca  00002dca  00002efe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.RTC_set_current_time 00000068  000051f2  000051f2  00005326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .rodata       00000005  00800e9a  000072fc  00007430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
235 .text.RTC_set_wake_up_interrupt 000000c2  00003df8  00003df8  00003f2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.RTC_clear_wake_up_interrupt 00000034  0000652e  0000652e  00006662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.RTC_datetime_to_ts 00000122  00003296  00003296  000033ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .progmemx.data.CMD_READ_TIME_POINTER 00000001  00000a19  00000a19  00000b4d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
239 .text.clear_sampling_data 0000004a  00005c90  00005c90  00005dc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.bytes_2_uint 00000068  0000525a  0000525a  0000538e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.init_measurement 00000038  000063b0  000063b0  000064e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.validate_data 00000032  0000662e  0000662e  00006762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.SCD30_sensor_on 00000026  000069f2  000069f2  00006b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.SCD30_sensor_off 00000008  00007292  00007292  000073c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.SCD30_init_c02_sampling 00000012  00006f2e  00006f2e  00007062  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.SCD30_init_temp_sampling 00000012  00006f40  00006f40  00007074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.SCD30_init_humidity_sampling 00000012  00006f52  00006f52  00007086  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.SCD30_deinit_sampling 0000000a  0000721a  0000721a  0000734e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.SCD30_is_sampling_done 00000034  00006562  00006562  00006696  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .text.SCD30_calc_validate_SI 000000c6  00003d32  00003d32  00003e66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
251 .text.read_all_values 00000116  000034d0  000034d0  00003604  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 .text.vect_SCD_do_sample 0000014c  00002c7e  00002c7e  00002db2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
253 .text.SCD30_start_sampling 0000005e  000053ea  000053ea  0000551e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
254 .text.SCD30_get_reading 00000032  00006660  00006660  00006794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
255 .bss.si_counter 00000002  00800ed3  00800ed3  00007446  2**0
                  ALLOC
256 .bss.highest_si 00000002  00800ed5  00800ed5  00007446  2**0
                  ALLOC
257 .bss.lowest_si 00000002  00800ed7  00800ed7  00007446  2**0
                  ALLOC
258 .bss.hum_pars 00000006  00800e82  00800e82  00007446  2**0
                  ALLOC
259 .bss.temp_pars 00000006  00800e88  00800e88  00007446  2**0
                  ALLOC
260 .bss.co2_pars 00000006  00800e8e  00800e8e  00007446  2**0
                  ALLOC
261 .progmemx.data.READ_DATA_CMD 00000002  00000a17  00000a17  00000b4b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
262 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000a0a  00000a0a  00000b3e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
263 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  00000a0f  00000a0f  00000b43  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
264 .text.parse_cmd 00000030  00006844  00006844  00006978  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.validate_cmd 00000056  000056bc  000056bc  000057f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .progmemx.data 000000ac  000007bf  000007bf  000008f3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
267 .text.CONF_enter 0000013c  00002f0a  00002f0a  0000303e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .progmemx.data 00000081  0000086b  0000086b  0000099f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
269 .text.CON_RN2483_parse 0000006c  000050b4  000050b4  000051e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.CON_RN2483 00000166  0000270c  0000270c  00002840  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.CONNECT 00000054  00005766  00005766  0000589a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .progmemx.data 00000225  000004c1  000004c1  000005f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
273 .text.read_cols 000000bc  00003eba  00003eba  00003fee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .text.read_time 00000092  00004744  00004744  00004878  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.read_validate_SI 0000012a  00003046  00003046  0000317a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.write_deveui 00000078  00004b50  00004b50  00004c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.write_appeui 00000078  00004bc8  00004bc8  00004cfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.write_appkey 00000078  00004c40  00004c40  00004d74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.write_PPM_factor 0000004c  00005aca  00005aca  00005bfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.write_RRL 0000004c  00005b16  00005b16  00005c4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .text.write_VCC 0000004c  00005b62  00005b62  00005c96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
282 .text.get_time_par 00000034  00006596  00006596  000066ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
283 .text.write_cols 00000158  000029d4  000029d4  00002b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 .text.write_heat_up 0000004c  00005bae  00005bae  00005ce2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.write_air_pump 00000050  0000585c  0000585c  00005990  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.write_sp_interval 0000004c  00005bfa  00005bfa  00005d2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.write_reset 000000e6  000039cc  000039cc  00003b00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .text.write_time 000000fe  000036e6  000036e6  0000381a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
289 .text.handle_read 000002be  0000182c  0000182c  00001960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .text.handle_write 00000200  00001d8e  00001d8e  00001ec2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .bss.arg      00000050  00800d3b  00800d3b  00007446  2**0
                  ALLOC
292 .progmemx.data 000000d9  000006e6  000006e6  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
293 .text.handle_methane 00000186  0000213e  0000213e  00002272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.handle_SCD30 00000118  000033b8  000033b8  000034ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.handle_pump 000000a4  00004448  00004448  0000457c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 .text.handle_sensor 000000b8  00004032  00004032  00004166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 .text.init_methane_SCD30 00000028  000069a2  000069a2  00006ad6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 .bss.par      00000014  00800e42  00800e42  00007446  2**0
                  ALLOC
299 .text.count_parameters 00000052  000057ba  000057ba  000058ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 .text.par_index 00000070  00004efa  00004efa  0000502e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
301 .text.get_parameter 00000096  000046ae  000046ae  000047e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 .text.decode_stage_response 00000016  00006df0  00006df0  00006f24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
303 .text.decode_join_response 0000001c  00006d16  00006d16  00006e4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
304 .text.decode_header_tail_response 00000024  00006a3c  00006a3c  00006b70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
305 .text.read_eeprom 0000005a  0000555c  0000555c  00005690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
306 .text.join_lora 00000012  00006f64  00006f64  00007098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
307 .text.set_wakeup 0000000a  00007224  00007224  00007358  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
308 .text.send_msg 00000006  000072e2  000072e2  00007416  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
309 .progmemx.data 0000025b  00000266  00000266  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
310 .text.stage_0 00000126  00003170  00003170  000032a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
311 .text.stage_1 00000152  00002b2c  00002b2c  00002c60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
312 .text.stage_2 0000016c  00002438  00002438  0000256c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
313 .text.stage_3 00000168  000025a4  000025a4  000026d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
314 .text.decode_body_response 00000072  00004e18  00004e18  00004f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
315 .text.decode_payload_inv_len_response 0000003e  0000612c  0000612c  00006260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
316 .text.MAINPG_start 000003f2  0000115e  0000115e  00001292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
317 .bss.fromSleep 00000001  00800eed  00800eed  00007446  2**0
                  ALLOC
318 .bss.samplingProcessInterval 00000001  00800eee  00800eee  00007446  2**0
                  ALLOC
319 .data.methHeatUpTime 00000001  00800eef  00007311  00007445  2**0
                  CONTENTS, ALLOC, LOAD, DATA
320 .data.airPumpTime 00000002  00800ed9  0000730d  00007441  2**0
                  CONTENTS, ALLOC, LOAD, DATA
321 .bss.ppmx     00000004  00800eab  00800eab  00007446  2**0
                  ALLOC
322 .bss.rrlx     00000004  00800eaf  00800eaf  00007446  2**0
                  ALLOC
323 .bss.vccx     00000004  00800eb3  00800eb3  00007446  2**0
                  ALLOC
324 .bss.cols     0000004b  00800dd6  00800dd6  00007446  2**0
                  ALLOC
325 .bss.appkey   00000021  00800e21  00800e21  00007446  2**0
                  ALLOC
326 .bss.appeui   00000011  00800e56  00800e56  00007446  2**0
                  ALLOC
327 .bss.deveui   00000011  00800e67  00800e67  00007446  2**0
                  ALLOC
328 .bss.package_length 00000001  00800ef0  00800ef0  00007446  2**0
                  ALLOC
329 .bss.package  00000064  00800cd7  00800cd7  00007446  2**0
                  ALLOC
330 .bss.dt       00000006  00800e94  00800e94  00007446  2**0
                  ALLOC
331 .bss.ts       00000004  00800eb7  00800eb7  00007446  2**0
                  ALLOC
332 .bss.meth_data 000000c8  00800904  00800904  00007446  2**0
                  ALLOC
333 .bss.hum_data 000000c8  008009cc  008009cc  00007446  2**0
                  ALLOC
334 .bss.temp_data 000000c8  00800a94  00800a94  00007446  2**0
                  ALLOC
335 .bss.co2_data 000000c8  00800b5c  00800b5c  00007446  2**0
                  ALLOC
336 .data.bodyIndex 00000002  00800edb  0000730f  00007443  2**0
                  CONTENTS, ALLOC, LOAD, DATA
337 .bss.state_s3 00000001  00800ef1  00800ef1  00007446  2**0
                  ALLOC
338 .bss.state_s2 00000001  00800ef2  00800ef2  00007446  2**0
                  ALLOC
339 .bss.state_s1 00000001  00800ef3  00800ef3  00007446  2**0
                  ALLOC
340 .bss.state_s0 00000001  00800ef4  00800ef4  00007446  2**0
                  ALLOC
341 .text.calc_crc8 00000036  0000648c  0000648c  000065c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
342 .text.get_decimal 000000b4  000040ea  000040ea  0000421e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
343 .text.str2flaot 0000004e  000059e4  000059e4  00005b18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text.is_float 00000058  0000560e  0000560e  00005742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 .text.avrlibc.fplib 0000000e  0000709c  0000709c  000071d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 .text.avrlibc.fplib 000000ce  00003c64  00003c64  00003d98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 .text.avrlibc.fplib 0000000a  0000722e  0000722e  00007362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .text.avrlibc.fplib 00000008  0000729a  0000729a  000073ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
349 .text.avrlibc.fplib 000000de  00003ab2  00003ab2  00003be6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
350 .text.avrlibc.fplib 0000005e  00005448  00005448  0000557c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 .text.avrlibc.fplib 0000007a  00004a5e  00004a5e  00004b92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
352 .text.avrlibc.fplib 00000048  00005dfa  00005dfa  00005f2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
353 .text.avrlibc.fplib 0000000c  000071a6  000071a6  000072da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
354 .text.avrlibc.fplib 00000006  000072e8  000072e8  0000741c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
355 .text.avrlibc.fplib 0000000e  000070aa  000070aa  000071de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
356 .text.avrlibc.fplib 0000000e  000070b8  000070b8  000071ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 .text.avrlibc.fplib 00000022  00006b30  00006b30  00006c64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
358 .text.avrlibc.fplib 00000044  00005f5a  00005f5a  0000608e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 .text.avrlibc.fplib 0000000e  000070c6  000070c6  000071fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
360 .text.avrlibc.fplib 00000008  000072a2  000072a2  000073d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
361 .text.avrlibc.fplib 000000d4  00003b90  00003b90  00003cc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 .progmemx.data 00000008  00000a02  00000a02  00000b36  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
363 .text.avrlibc 00000744  00000a1a  00000a1a  00000b4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
364 .text.libgcc.div 00000028  000069ca  000069ca  00006afe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
365 .text.libgcc  0000000c  000071b2  000071b2  000072e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
366 .text.libgcc.mul 0000001e  00006c6a  00006c6a  00006d9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
367 .text.libgcc.prologue 00000038  000063e8  000063e8  0000651c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
368 .text.libgcc.prologue 00000036  000064c2  000064c2  000065f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
369 .text.avrlibc 00000008  000072aa  000072aa  000073de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 .text.avrlibc 0000000e  000070d4  000070d4  00007208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
371 .text.avrlibc 000002dc  00001550  00001550  00001684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
372 .text.avrlibc 000001b0  00001f8e  00001f8e  000020c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
373 .text.avrlibc 00000012  00006f76  00006f76  000070aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
374 .text.avrlibc 00000032  00006692  00006692  000067c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
375 .text.avrlibc 00000042  000060aa  000060aa  000061de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
376 .text.avrlibc 0000006a  00005120  00005120  00005254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
377 .text.avrlibc 0000002c  000068fc  000068fc  00006a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
378 .text.avrlibc 0000001e  00006c88  00006c88  00006dbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
379 .text.avrlibc 00000036  000064f8  000064f8  0000662c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
380 .text.avrlibc 00000078  00004cb8  00004cb8  00004dec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
381 .text.avrlibc 00000046  00005f14  00005f14  00006048  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
382 .text.avrlibc 000000bc  00003f76  00003f76  000040aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
383 .text.avrlibc 00000006  000072ee  000072ee  00007422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
384 .text.avrlibc 00000024  00006a60  00006a60  00006b94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
385 .text.avrlibc 00000012  00006f88  00006f88  000070bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
386 .text.avrlibc 0000000e  000070e2  000070e2  00007216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
387 .text.avrlibc 0000000e  000070f0  000070f0  00007224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
388 .text.avrlibc 00000044  00005f9e  00005f9e  000060d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
389 .text.avrlibc 00000024  00006a84  00006a84  00006bb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
390 .text.avrlibc 00000018  00006d96  00006d96  00006eca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
391 .text.avrlibc 0000000c  000071be  000071be  000072f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
392 .text.libgcc.mul 00000020  00006bd2  00006bd2  00006d06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
393 .text.libgcc.div 00000044  00005fe2  00005fe2  00006116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
394 .text.libgcc.mul 00000016  00006e06  00006e06  00006f3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
395 .text.libgcc  0000000a  00007238  00007238  0000736c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 09 01 	jmp	0x212	; 0x212 <__ctors_end>
   4:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
   8:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
   c:	0c 94 40 37 	jmp	0x6e80	; 0x6e80 <__vector_3>
  10:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  14:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  18:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  1c:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  20:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  24:	0c 94 b4 24 	jmp	0x4968	; 0x4968 <__vector_9>
  28:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  2c:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  30:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  34:	0c 94 7d 2c 	jmp	0x58fa	; 0x58fa <__vector_13>
  38:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  3c:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  40:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <__vector_16>
  44:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  48:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  4c:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  50:	0c 94 98 26 	jmp	0x4d30	; 0x4d30 <__vector_20>
  54:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  58:	0c 94 b5 27 	jmp	0x4f6a	; 0x4f6a <__vector_22>
  5c:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  60:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  64:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  68:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  6c:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  70:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__vector_28>
  74:	0c 94 7a 39 	jmp	0x72f4	; 0x72f4 <__bad_interrupt>
  78:	0c 94 ec 27 	jmp	0x4fd8	; 0x4fd8 <__vector_30>
  7c:	93 0d       	add	r25, r3
  7e:	a3 0e       	add	r10, r19
  80:	b2 0d       	add	r27, r2
  82:	d0 0d       	add	r29, r0
  84:	f0 0d       	add	r31, r0
  86:	10 0e       	add	r1, r16
  88:	30 0e       	add	r3, r16
  8a:	50 0e       	add	r5, r16
  8c:	6e 0e       	add	r6, r30
  8e:	8c 0e       	add	r8, r28
  90:	9e 0e       	add	r9, r30
  92:	b4 0e       	add	r11, r20
  94:	b6 0e       	add	r11, r22
  96:	a0 17       	cp	r26, r16
  98:	b7 17       	cp	r27, r23
  9a:	13 18       	sub	r1, r3
  9c:	c0 17       	cp	r28, r16
  9e:	1c 18       	sub	r1, r12
  a0:	05 18       	sub	r0, r5
  a2:	0c 18       	sub	r0, r12
  a4:	d0 17       	cp	r29, r16
  a6:	dc 17       	cp	r29, r28
  a8:	e8 17       	cp	r30, r24
  aa:	f2 17       	cp	r31, r18
  ac:	fe 17       	cp	r31, r30
  ae:	98 13       	cpse	r25, r24
  b0:	a5 13       	cpse	r26, r21
  b2:	af 13       	cpse	r26, r31
  b4:	b5 13       	cpse	r27, r21
  b6:	e4 13       	cpse	r30, r20
  b8:	0f 14       	cp	r0, r15
  ba:	28 14       	cp	r2, r8
  bc:	da 08       	sbc	r13, r10
  be:	09 09       	sbc	r16, r9
  c0:	24 09       	sbc	r18, r4
  c2:	35 09       	sbc	r19, r5
  c4:	49 09       	sbc	r20, r9
  c6:	83 0a       	sbc	r8, r19
  c8:	3e 09       	sbc	r19, r14
  ca:	82 09       	sbc	r24, r2
  cc:	99 09       	sbc	r25, r9
  ce:	8e 09       	sbc	r24, r14
  d0:	5d 09       	sbc	r21, r13
  d2:	a4 09       	sbc	r26, r4
  d4:	b5 09       	sbc	r27, r5
  d6:	d2 09       	sbc	r29, r2
  d8:	da 09       	sbc	r29, r10
  da:	e2 09       	sbc	r30, r2
  dc:	ea 09       	sbc	r30, r10
  de:	f2 09       	sbc	r31, r2
  e0:	1d 0a       	sbc	r1, r29
  e2:	24 0a       	sbc	r2, r20
  e4:	41 0a       	sbc	r4, r17
  e6:	60 0a       	sbc	r6, r16
  e8:	6e 0a       	sbc	r6, r30
  ea:	91 0a       	sbc	r9, r17
  ec:	9c 0a       	sbc	r9, r28

000000ee <.dinit>:
  ee:	01 00       	.word	0x0001	; ????
  f0:	0e 9a       	sbi	0x01, 6	; 1
  f2:	80 0e       	add	r8, r16
  f4:	9a 0e       	add	r9, r26
  f6:	ab 00       	.word	0x00ab	; ????
  f8:	72 fc       	sbrc	r7, 2
  fa:	0e ab       	std	Y+54, r16	; 0x36
  fc:	0e d9       	rcall	.-3556   	; 0xfffff31a <__eeprom_end+0xff7ef31a>
  fe:	80 0e       	add	r8, r16
 100:	d9 0e       	add	r13, r25
 102:	dd 00       	.word	0x00dd	; ????
 104:	73 0d       	add	r23, r3
 106:	0e dd       	rcall	.-1508   	; 0xfffffb24 <__eeprom_end+0xff7efb24>
 108:	0e ef       	ldi	r16, 0xFE	; 254
 10a:	80 0e       	add	r8, r16
 10c:	ef 0e       	add	r14, r31
 10e:	f0 00       	.word	0x00f0	; ????
 110:	73 11       	cpse	r23, r3
 112:	0e f0       	brts	.+2      	; 0x116 <.dinit+0x28>
 114:	0e f5       	brtc	.+66     	; 0x158 <__trampolines_end+0x40>
 116:	80 00       	.word	0x0080	; ????

00000118 <__trampolines_end>:
 118:	00 40       	sbci	r16, 0x00	; 0
 11a:	7a 10       	cpse	r7, r10
 11c:	f3 5a       	subi	r31, 0xA3	; 163
 11e:	00 a0       	ldd	r0, Z+32	; 0x20
 120:	72 4e       	sbci	r23, 0xE2	; 226
 122:	18 09       	sbc	r17, r8
 124:	00 10       	cpse	r0, r0
 126:	a5 d4       	rcall	.+2378   	; 0xa72 <vfprintf+0x58>
 128:	e8 00       	.word	0x00e8	; ????
 12a:	00 e8       	ldi	r16, 0x80	; 128
 12c:	76 48       	sbci	r23, 0x86	; 134
 12e:	17 00       	.word	0x0017	; ????
 130:	00 e4       	ldi	r16, 0x40	; 64
 132:	0b 54       	subi	r16, 0x4B	; 75
 134:	02 00       	.word	0x0002	; ????
 136:	00 ca       	rjmp	.-3072   	; 0xfffff538 <__eeprom_end+0xff7ef538>
 138:	9a 3b       	cpi	r25, 0xBA	; 186
 13a:	00 00       	nop
 13c:	00 e1       	ldi	r16, 0x10	; 16
 13e:	f5 05       	cpc	r31, r5
 140:	00 00       	nop
 142:	80 96       	adiw	r24, 0x20	; 32
 144:	98 00       	.word	0x0098	; ????
 146:	00 00       	nop
 148:	40 42       	sbci	r20, 0x20	; 32
 14a:	0f 00       	.word	0x000f	; ????
 14c:	00 00       	nop
 14e:	a0 86       	std	Z+8, r10	; 0x08
 150:	01 00       	.word	0x0001	; ????
 152:	00 00       	nop
 154:	10 27       	eor	r17, r16
 156:	00 00       	nop
 158:	00 00       	nop
 15a:	e8 03       	fmulsu	r22, r16
 15c:	00 00       	nop
 15e:	00 00       	nop
 160:	64 00       	.word	0x0064	; ????
 162:	00 00       	nop
 164:	00 00       	nop
 166:	0a 00       	.word	0x000a	; ????
 168:	00 00       	nop
 16a:	00 00       	nop
 16c:	01 00       	.word	0x0001	; ????
 16e:	00 00       	nop
 170:	00 00       	nop
 172:	2c 76       	andi	r18, 0x6C	; 108
 174:	d8 88       	ldd	r13, Y+16	; 0x10
 176:	dc 67       	ori	r29, 0x7C	; 124
 178:	4f 08       	sbc	r4, r15
 17a:	23 df       	rcall	.-442    	; 0xffffffc2 <__eeprom_end+0xff7effc2>
 17c:	c1 df       	rcall	.-126    	; 0x100 <.dinit+0x12>
 17e:	ae 59       	subi	r26, 0x9E	; 158
 180:	e1 b1       	in	r30, 0x01	; 1
 182:	b7 96       	adiw	r30, 0x27	; 39
 184:	e5 e3       	ldi	r30, 0x35	; 53
 186:	e4 53       	subi	r30, 0x34	; 52
 188:	c6 3a       	cpi	r28, 0xA6	; 166
 18a:	e6 51       	subi	r30, 0x16	; 22
 18c:	99 76       	andi	r25, 0x69	; 105
 18e:	96 e8       	ldi	r25, 0x86	; 134
 190:	e6 c2       	rjmp	.+1484   	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 192:	84 26       	eor	r8, r20
 194:	eb 89       	ldd	r30, Y+19	; 0x13
 196:	8c 9b       	sbis	0x11, 4	; 17
 198:	62 ed       	ldi	r22, 0xD2	; 210
 19a:	40 7c       	andi	r20, 0xC0	; 192
 19c:	6f fc       	.word	0xfc6f	; ????
 19e:	ef bc       	out	0x2f, r14	; 47
 1a0:	9c 9f       	mul	r25, r28
 1a2:	40 f2       	brcs	.-112    	; 0x134 <__trampolines_end+0x1c>
 1a4:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a6:	6f a5       	ldd	r22, Y+47	; 0x2f
 1a8:	f4 90       	lpm	r15, Z
 1aa:	05 5a       	subi	r16, 0xA5	; 165
 1ac:	2a f7       	brpl	.-54     	; 0x178 <__trampolines_end+0x60>
 1ae:	5c 93       	st	X, r21
 1b0:	6b 6c       	ori	r22, 0xCB	; 203
 1b2:	f9 67       	ori	r31, 0x79	; 121
 1b4:	6d c1       	rjmp	.+730    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 1b6:	1b fc       	.word	0xfc1b	; ????
 1b8:	e0 e4       	ldi	r30, 0x40	; 64
 1ba:	0d 47       	sbci	r16, 0x7D	; 125
 1bc:	fe f5       	brtc	.+126    	; 0x23c <__do_copy_data+0x1e>
 1be:	20 e6       	ldi	r18, 0x60	; 96
 1c0:	b5 00       	.word	0x00b5	; ????
 1c2:	d0 ed       	ldi	r29, 0xD0	; 208
 1c4:	90 2e       	mov	r9, r16
 1c6:	03 00       	.word	0x0003	; ????
 1c8:	94 35       	cpi	r25, 0x54	; 84
 1ca:	77 05       	cpc	r23, r7
 1cc:	00 80       	ld	r0, Z
 1ce:	84 1e       	adc	r8, r20
 1d0:	08 00       	.word	0x0008	; ????
 1d2:	00 20       	and	r0, r0
 1d4:	4e 0a       	sbc	r4, r30
 1d6:	00 00       	nop
 1d8:	00 c8       	rjmp	.-4096   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
 1da:	0c 33       	cpi	r16, 0x3C	; 60
 1dc:	33 33       	cpi	r19, 0x33	; 51
 1de:	33 0f       	add	r19, r19
 1e0:	98 6e       	ori	r25, 0xE8	; 232
 1e2:	12 83       	std	Z+2, r17	; 0x02
 1e4:	11 41       	sbci	r17, 0x11	; 17
 1e6:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1e8:	21 14       	cp	r2, r1
 1ea:	89 3b       	cpi	r24, 0xB9	; 185
 1ec:	e6 55       	subi	r30, 0x56	; 86
 1ee:	16 cf       	rjmp	.-468    	; 0x1c <__FUSE_REGION_LENGTH__+0x19>
 1f0:	fe e6       	ldi	r31, 0x6E	; 110
 1f2:	db 18       	sub	r13, r11
 1f4:	d1 84       	ldd	r13, Z+9	; 0x09
 1f6:	4b 38       	cpi	r20, 0x8B	; 139
 1f8:	1b f7       	brvc	.-58     	; 0x1c0 <__trampolines_end+0xa8>
 1fa:	7c 1d       	adc	r23, r12
 1fc:	90 1d       	adc	r25, r0
 1fe:	a4 bb       	out	0x14, r26	; 20
 200:	e4 24       	eor	r14, r4
 202:	20 32       	cpi	r18, 0x20	; 32
 204:	84 72       	andi	r24, 0x24	; 36
 206:	5e 22       	and	r5, r30
 208:	81 00       	.word	0x0081	; ????
 20a:	c9 f1       	breq	.+114    	; 0x27e <_etext+0x18>
 20c:	24 ec       	ldi	r18, 0xC4	; 196
 20e:	a1 e5       	ldi	r26, 0x51	; 81
 210:	3d 27       	eor	r19, r29

00000212 <__ctors_end>:
 212:	11 24       	eor	r1, r1
 214:	1f be       	out	0x3f, r1	; 63
 216:	cf ef       	ldi	r28, 0xFF	; 255
 218:	d0 e1       	ldi	r29, 0x10	; 16
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	cd bf       	out	0x3d, r28	; 61

0000021e <__do_copy_data>:
 21e:	ee ee       	ldi	r30, 0xEE	; 238
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	17 c0       	rjmp	.+46     	; 0x254 <__do_clear_bss+0x8>
 226:	b5 91       	lpm	r27, Z+
 228:	a5 91       	lpm	r26, Z+
 22a:	35 91       	lpm	r19, Z+
 22c:	25 91       	lpm	r18, Z+
 22e:	05 91       	lpm	r16, Z+
 230:	07 fd       	sbrc	r16, 7
 232:	0c c0       	rjmp	.+24     	; 0x24c <__do_clear_bss>
 234:	95 91       	lpm	r25, Z+
 236:	85 91       	lpm	r24, Z+
 238:	ef 01       	movw	r28, r30
 23a:	f9 2f       	mov	r31, r25
 23c:	e8 2f       	mov	r30, r24
 23e:	05 90       	lpm	r0, Z+
 240:	0d 92       	st	X+, r0
 242:	a2 17       	cp	r26, r18
 244:	b3 07       	cpc	r27, r19
 246:	d9 f7       	brne	.-10     	; 0x23e <__do_copy_data+0x20>
 248:	fe 01       	movw	r30, r28
 24a:	04 c0       	rjmp	.+8      	; 0x254 <__do_clear_bss+0x8>

0000024c <__do_clear_bss>:
 24c:	1d 92       	st	X+, r1
 24e:	a2 17       	cp	r26, r18
 250:	b3 07       	cpc	r27, r19
 252:	e1 f7       	brne	.-8      	; 0x24c <__do_clear_bss>
 254:	e7 31       	cpi	r30, 0x17	; 23
 256:	f4 07       	cpc	r31, r20
 258:	31 f7       	brne	.-52     	; 0x226 <__do_copy_data+0x8>
 25a:	0e 94 2c 31 	call	0x6258	; 0x6258 <main>
 25e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>

Disassembly of section .text:

000072f4 <__bad_interrupt>:
    72f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

00006fca <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    6fca:	81 b1       	in	r24, 0x01	; 1
    6fcc:	88 60       	ori	r24, 0x08	; 8
    6fce:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    6fd0:	82 b1       	in	r24, 0x02	; 2
    6fd2:	87 7f       	andi	r24, 0xF7	; 247
    6fd4:	82 b9       	out	0x02, r24	; 2
    6fd6:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00006e1c <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    6e1c:	88 23       	and	r24, r24
    6e1e:	21 f0       	breq	.+8      	; 0x6e28 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    6e20:	82 b1       	in	r24, 0x02	; 2
    6e22:	88 60       	ori	r24, 0x08	; 8
    6e24:	82 b9       	out	0x02, r24	; 2
    6e26:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    6e28:	82 b1       	in	r24, 0x02	; 2
    6e2a:	87 7f       	andi	r24, 0xF7	; 247
    6e2c:	82 b9       	out	0x02, r24	; 2
    6e2e:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00006fd8 <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    6fd8:	81 b1       	in	r24, 0x01	; 1
    6fda:	80 62       	ori	r24, 0x20	; 32
    6fdc:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    6fde:	82 b1       	in	r24, 0x02	; 2
    6fe0:	8f 7d       	andi	r24, 0xDF	; 223
    6fe2:	82 b9       	out	0x02, r24	; 2
    6fe4:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00006e30 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    6e30:	88 23       	and	r24, r24
    6e32:	21 f0       	breq	.+8      	; 0x6e3c <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    6e34:	82 b1       	in	r24, 0x02	; 2
    6e36:	80 62       	ori	r24, 0x20	; 32
    6e38:	82 b9       	out	0x02, r24	; 2
    6e3a:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    6e3c:	82 b1       	in	r24, 0x02	; 2
    6e3e:	8f 7d       	andi	r24, 0xDF	; 223
    6e40:	82 b9       	out	0x02, r24	; 2
    6e42:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00006fe6 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    6fe6:	81 b1       	in	r24, 0x01	; 1
    6fe8:	80 61       	ori	r24, 0x10	; 16
    6fea:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    6fec:	82 b1       	in	r24, 0x02	; 2
    6fee:	8f 7e       	andi	r24, 0xEF	; 239
    6ff0:	82 b9       	out	0x02, r24	; 2
    6ff2:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00006e44 <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    6e44:	88 23       	and	r24, r24
    6e46:	21 f0       	breq	.+8      	; 0x6e50 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    6e48:	82 b1       	in	r24, 0x02	; 2
    6e4a:	80 61       	ori	r24, 0x10	; 16
    6e4c:	82 b9       	out	0x02, r24	; 2
    6e4e:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    6e50:	82 b1       	in	r24, 0x02	; 2
    6e52:	8f 7e       	andi	r24, 0xEF	; 239
    6e54:	82 b9       	out	0x02, r24	; 2
    6e56:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00006ff4 <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    6ff4:	8a b1       	in	r24, 0x0a	; 10
    6ff6:	80 61       	ori	r24, 0x10	; 16
    6ff8:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    6ffa:	8b b1       	in	r24, 0x0b	; 11
    6ffc:	8f 7e       	andi	r24, 0xEF	; 239
    6ffe:	8b b9       	out	0x0b, r24	; 11
    7000:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00006e58 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    6e58:	88 23       	and	r24, r24
    6e5a:	21 f0       	breq	.+8      	; 0x6e64 <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    6e5c:	8b b1       	in	r24, 0x0b	; 11
    6e5e:	80 61       	ori	r24, 0x10	; 16
    6e60:	8b b9       	out	0x0b, r24	; 11
    6e62:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    6e64:	8b b1       	in	r24, 0x0b	; 11
    6e66:	8f 7e       	andi	r24, 0xEF	; 239
    6e68:	8b b9       	out	0x0b, r24	; 11
    6e6a:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

00007002 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    7002:	81 b1       	in	r24, 0x01	; 1
    7004:	80 68       	ori	r24, 0x80	; 128
    7006:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    7008:	82 b1       	in	r24, 0x02	; 2
    700a:	8f 77       	andi	r24, 0x7F	; 127
    700c:	82 b9       	out	0x02, r24	; 2
    700e:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

00006e6c <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    6e6c:	88 23       	and	r24, r24
    6e6e:	21 f0       	breq	.+8      	; 0x6e78 <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    6e70:	82 b1       	in	r24, 0x02	; 2
    6e72:	80 68       	ori	r24, 0x80	; 128
    6e74:	82 b9       	out	0x02, r24	; 2
    6e76:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    6e78:	82 b1       	in	r24, 0x02	; 2
    6e7a:	8f 77       	andi	r24, 0x7F	; 127
    6e7c:	82 b9       	out	0x02, r24	; 2
    6e7e:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00007242 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    7242:	82 b1       	in	r24, 0x02	; 2
    7244:	80 58       	subi	r24, 0x80	; 128
    7246:	82 b9       	out	0x02, r24	; 2
    7248:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

0000616a <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    616a:	84 b1       	in	r24, 0x04	; 4
    616c:	8b 7f       	andi	r24, 0xFB	; 251
    616e:	84 b9       	out	0x04, r24	; 4
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    6170:	e9 e6       	ldi	r30, 0x69	; 105
    6172:	f0 e0       	ldi	r31, 0x00	; 0
    6174:	80 81       	ld	r24, Z
    6176:	8f 7e       	andi	r24, 0xEF	; 239
    6178:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    617a:	80 81       	ld	r24, Z
    617c:	80 62       	ori	r24, 0x20	; 32
    617e:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    6180:	8d b3       	in	r24, 0x1d	; 29
    6182:	84 60       	ori	r24, 0x04	; 4
    6184:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    6186:	83 b7       	in	r24, 0x33	; 51
    6188:	81 7f       	andi	r24, 0xF1	; 241
    618a:	84 60       	ori	r24, 0x04	; 4
    618c:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    618e:	83 b7       	in	r24, 0x33	; 51
    6190:	81 60       	ori	r24, 0x01	; 1
    6192:	83 bf       	out	0x33, r24	; 51
	sei();
    6194:	78 94       	sei
	sleep_cpu();
    6196:	88 95       	sleep
	sleep_disable();
    6198:	83 b7       	in	r24, 0x33	; 51
    619a:	8e 7f       	andi	r24, 0xFE	; 254
    619c:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    619e:	8d b3       	in	r24, 0x1d	; 29
    61a0:	8b 7f       	andi	r24, 0xFB	; 251
    61a2:	8d bb       	out	0x1d, r24	; 29
    61a4:	08 95       	ret

Disassembly of section .text.__vector_3:

00006e80 <__vector_3>:
}

ISR(INT2_vect){
    6e80:	1f 92       	push	r1
    6e82:	0f 92       	push	r0
    6e84:	0f b6       	in	r0, 0x3f	; 63
    6e86:	0f 92       	push	r0
    6e88:	11 24       	eor	r1, r1
	
}
    6e8a:	0f 90       	pop	r0
    6e8c:	0f be       	out	0x3f, r0	; 63
    6e8e:	0f 90       	pop	r0
    6e90:	1f 90       	pop	r1
    6e92:	18 95       	reti

Disassembly of section .text.rn2483_init:

0000724a <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    724a:	84 b1       	in	r24, 0x04	; 4
    724c:	80 61       	ori	r24, 0x10	; 16
    724e:	84 b9       	out	0x04, r24	; 4
    7250:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00007252 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    7252:	85 b1       	in	r24, 0x05	; 5
    7254:	8f 7e       	andi	r24, 0xEF	; 239
    7256:	85 b9       	out	0x05, r24	; 5
    7258:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

0000725a <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    725a:	85 b1       	in	r24, 0x05	; 5
    725c:	80 61       	ori	r24, 0x10	; 16
    725e:	85 b9       	out	0x05, r24	; 5
    7260:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00007010 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    7010:	87 b1       	in	r24, 0x07	; 7
    7012:	8f 7b       	andi	r24, 0xBF	; 191
    7014:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    7016:	88 b1       	in	r24, 0x08	; 8
    7018:	8f 7b       	andi	r24, 0xBF	; 191
    701a:	88 b9       	out	0x08, r24	; 8
    701c:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

000071ca <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    71ca:	86 b1       	in	r24, 0x06	; 6
    71cc:	86 fb       	bst	r24, 6
    71ce:	88 27       	eor	r24, r24
    71d0:	80 f9       	bld	r24, 0
    71d2:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00006aa8 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    6aa8:	92 e0       	ldi	r25, 0x02	; 2
    6aaa:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    6aac:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match-1; //Set match value
    6aae:	81 50       	subi	r24, 0x01	; 1
    6ab0:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    6ab2:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    6ab4:	ee e6       	ldi	r30, 0x6E	; 110
    6ab6:	f0 e0       	ldi	r31, 0x00	; 0
    6ab8:	80 81       	ld	r24, Z
    6aba:	82 60       	ori	r24, 0x02	; 2
    6abc:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    6abe:	78 94       	sei
	
	//Set callback
	_cb=cb;
    6ac0:	70 93 bc 0e 	sts	0x0EBC, r23	; 0x800ebc <_cb+0x1>
    6ac4:	60 93 bb 0e 	sts	0x0EBB, r22	; 0x800ebb <_cb>
    6ac8:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

000072b2 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    72b2:	86 e0       	ldi	r24, 0x06	; 6
    72b4:	85 bd       	out	0x25, r24	; 37
    72b6:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

000072f8 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    72f8:	15 bc       	out	0x25, r1	; 37
    72fa:	08 95       	ret

Disassembly of section .text.__vector_16:

000058ac <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    58ac:	1f 92       	push	r1
    58ae:	0f 92       	push	r0
    58b0:	0f b6       	in	r0, 0x3f	; 63
    58b2:	0f 92       	push	r0
    58b4:	11 24       	eor	r1, r1
    58b6:	2f 93       	push	r18
    58b8:	3f 93       	push	r19
    58ba:	4f 93       	push	r20
    58bc:	5f 93       	push	r21
    58be:	6f 93       	push	r22
    58c0:	7f 93       	push	r23
    58c2:	8f 93       	push	r24
    58c4:	9f 93       	push	r25
    58c6:	af 93       	push	r26
    58c8:	bf 93       	push	r27
    58ca:	ef 93       	push	r30
    58cc:	ff 93       	push	r31
	_cb();
    58ce:	e0 91 bb 0e 	lds	r30, 0x0EBB	; 0x800ebb <_cb>
    58d2:	f0 91 bc 0e 	lds	r31, 0x0EBC	; 0x800ebc <_cb+0x1>
    58d6:	09 95       	icall
}
    58d8:	ff 91       	pop	r31
    58da:	ef 91       	pop	r30
    58dc:	bf 91       	pop	r27
    58de:	af 91       	pop	r26
    58e0:	9f 91       	pop	r25
    58e2:	8f 91       	pop	r24
    58e4:	7f 91       	pop	r23
    58e6:	6f 91       	pop	r22
    58e8:	5f 91       	pop	r21
    58ea:	4f 91       	pop	r20
    58ec:	3f 91       	pop	r19
    58ee:	2f 91       	pop	r18
    58f0:	0f 90       	pop	r0
    58f2:	0f be       	out	0x3f, r0	; 63
    58f4:	0f 90       	pop	r0
    58f6:	1f 90       	pop	r1
    58f8:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00006420 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    6420:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    6424:	28 e0       	ldi	r18, 0x08	; 8
    6426:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    642a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match-1; //Set compare value
    642e:	01 97       	sbiw	r24, 0x01	; 1
    6430:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    6434:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    6438:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    643c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    6440:	ef e6       	ldi	r30, 0x6F	; 111
    6442:	f0 e0       	ldi	r31, 0x00	; 0
    6444:	80 81       	ld	r24, Z
    6446:	82 60       	ori	r24, 0x02	; 2
    6448:	80 83       	st	Z, r24
	sei();
    644a:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    644c:	70 93 be 0e 	sts	0x0EBE, r23	; 0x800ebe <_cb+0x1>
    6450:	60 93 bd 0e 	sts	0x0EBD, r22	; 0x800ebd <_cb>
    6454:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

000070fe <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    70fe:	e1 e8       	ldi	r30, 0x81	; 129
    7100:	f0 e0       	ldi	r31, 0x00	; 0
    7102:	80 81       	ld	r24, Z
    7104:	86 60       	ori	r24, 0x06	; 6
    7106:	80 83       	st	Z, r24
    7108:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

0000710a <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    710a:	e1 e8       	ldi	r30, 0x81	; 129
    710c:	f0 e0       	ldi	r31, 0x00	; 0
    710e:	80 81       	ld	r24, Z
    7110:	88 7f       	andi	r24, 0xF8	; 248
    7112:	80 83       	st	Z, r24
    7114:	08 95       	ret

Disassembly of section .text.__vector_13:

000058fa <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    58fa:	1f 92       	push	r1
    58fc:	0f 92       	push	r0
    58fe:	0f b6       	in	r0, 0x3f	; 63
    5900:	0f 92       	push	r0
    5902:	11 24       	eor	r1, r1
    5904:	2f 93       	push	r18
    5906:	3f 93       	push	r19
    5908:	4f 93       	push	r20
    590a:	5f 93       	push	r21
    590c:	6f 93       	push	r22
    590e:	7f 93       	push	r23
    5910:	8f 93       	push	r24
    5912:	9f 93       	push	r25
    5914:	af 93       	push	r26
    5916:	bf 93       	push	r27
    5918:	ef 93       	push	r30
    591a:	ff 93       	push	r31
	_cb();
    591c:	e0 91 bd 0e 	lds	r30, 0x0EBD	; 0x800ebd <_cb>
    5920:	f0 91 be 0e 	lds	r31, 0x0EBE	; 0x800ebe <_cb+0x1>
    5924:	09 95       	icall
    5926:	ff 91       	pop	r31
    5928:	ef 91       	pop	r30
    592a:	bf 91       	pop	r27
    592c:	af 91       	pop	r26
    592e:	9f 91       	pop	r25
    5930:	8f 91       	pop	r24
    5932:	7f 91       	pop	r23
    5934:	6f 91       	pop	r22
    5936:	5f 91       	pop	r21
    5938:	4f 91       	pop	r20
    593a:	3f 91       	pop	r19
    593c:	2f 91       	pop	r18
    593e:	0f 90       	pop	r0
    5940:	0f be       	out	0x3f, r0	; 63
    5942:	0f 90       	pop	r0
    5944:	1f 90       	pop	r1
    5946:	18 95       	reti

Disassembly of section .text.clear_callbacks:

00006b52 <clear_callbacks>:
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    6b52:	80 e0       	ldi	r24, 0x00	; 0
    6b54:	09 c0       	rjmp	.+18     	; 0x6b68 <clear_callbacks+0x16>
	{
		callbacks[i]=NULL;
    6b56:	e8 2f       	mov	r30, r24
    6b58:	f0 e0       	ldi	r31, 0x00	; 0
    6b5a:	ee 0f       	add	r30, r30
    6b5c:	ff 1f       	adc	r31, r31
    6b5e:	e8 58       	subi	r30, 0x88	; 136
    6b60:	f1 4f       	sbci	r31, 0xF1	; 241
    6b62:	11 82       	std	Z+1, r1	; 0x01
    6b64:	10 82       	st	Z, r1
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    6b66:	8f 5f       	subi	r24, 0xFF	; 255
    6b68:	85 30       	cpi	r24, 0x05	; 5
    6b6a:	a8 f3       	brcs	.-22     	; 0x6b56 <clear_callbacks+0x4>
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    6b6c:	10 92 de 0e 	sts	0x0EDE, r1	; 0x800ede <cbCounter>
    6b70:	08 95       	ret

Disassembly of section .text.start_timer:

00007262 <start_timer>:
}

static void start_timer(){
	TCCR2B=0x07;
    7262:	87 e0       	ldi	r24, 0x07	; 7
    7264:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    7268:	08 95       	ret

Disassembly of section .text.stop_timer:

000072b8 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    72b8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    72bc:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00006b72 <TC2_HAL_init>:
static callback_ptr callbacks[MAX_CALLBACKS];
static uint8_t cbCounter=0;
static uint8_t cnt=0;

void TC2_HAL_init(){
	TCCR2A=0x02; //Set mode=CTC
    6b72:	82 e0       	ldi	r24, 0x02	; 2
    6b74:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	TCCR2B=0x00; //Stop timer
    6b78:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
	
	//Disable async
	ASSR=0x00;
    6b7c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
	
	TCNT2=0; //Set counter to 0
    6b80:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
	OCR2A=243; //16 Hz, 32 event pr s
    6b84:	93 ef       	ldi	r25, 0xF3	; 243
    6b86:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	
	//Enable interrupt
	TIMSK2=0x02;
    6b8a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
	sei();
    6b8e:	78 94       	sei
    6b90:	08 95       	ret

Disassembly of section .text.TC2_HAL_kill:

000071d4 <TC2_HAL_kill>:
static void stop_timer(){
	TCCR2B=0x00;
}

void TC2_HAL_kill(){
	stop_timer();
    71d4:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <stop_timer>
	clear_callbacks();
    71d8:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <clear_callbacks>
    71dc:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00005712 <TC2_HAL_subscribe>:
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
    5712:	cf 93       	push	r28
    5714:	dc 01       	movw	r26, r24
	int8_t pointer=-1;
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    5716:	60 91 de 0e 	lds	r22, 0x0EDE	; 0x800ede <cbCounter>
    571a:	65 30       	cpi	r22, 0x05	; 5
    571c:	00 f5       	brcc	.+64     	; 0x575e <TC2_HAL_subscribe+0x4c>
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	15 c0       	rjmp	.+42     	; 0x574c <TC2_HAL_subscribe+0x3a>
	
	//Find a free spot in the array to store the cb
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		if(callbacks[i]==NULL){
    5722:	29 2f       	mov	r18, r25
    5724:	30 e0       	ldi	r19, 0x00	; 0
    5726:	f9 01       	movw	r30, r18
    5728:	ee 0f       	add	r30, r30
    572a:	ff 1f       	adc	r31, r31
    572c:	e8 58       	subi	r30, 0x88	; 136
    572e:	f1 4f       	sbci	r31, 0xF1	; 241
    5730:	40 81       	ld	r20, Z
    5732:	51 81       	ldd	r21, Z+1	; 0x01
    5734:	45 2b       	or	r20, r21
    5736:	49 f4       	brne	.+18     	; 0x574a <TC2_HAL_subscribe+0x38>
			callbacks[i]=cb;
    5738:	22 0f       	add	r18, r18
    573a:	33 1f       	adc	r19, r19
    573c:	f9 01       	movw	r30, r18
    573e:	e8 58       	subi	r30, 0x88	; 136
    5740:	f1 4f       	sbci	r31, 0xF1	; 241
    5742:	b1 83       	std	Z+1, r27	; 0x01
    5744:	a0 83       	st	Z, r26
			pointer=i;
    5746:	c9 2f       	mov	r28, r25
			break;
    5748:	04 c0       	rjmp	.+8      	; 0x5752 <TC2_HAL_subscribe+0x40>
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
	
	//Find a free spot in the array to store the cb
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    574a:	9f 5f       	subi	r25, 0xFF	; 255
    574c:	95 30       	cpi	r25, 0x05	; 5
    574e:	48 f3       	brcs	.-46     	; 0x5722 <TC2_HAL_subscribe+0x10>
	stop_timer();
	clear_callbacks();
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
    5750:	cf ef       	ldi	r28, 0xFF	; 255
			break;
		}
	}
	
	//Increment the number of cbs and (re)start the timer
	cbCounter++;
    5752:	6f 5f       	subi	r22, 0xFF	; 255
    5754:	60 93 de 0e 	sts	0x0EDE, r22	; 0x800ede <cbCounter>
	start_timer();
    5758:	0e 94 31 39 	call	0x7262	; 0x7262 <start_timer>
	return pointer;
    575c:	01 c0       	rjmp	.+2      	; 0x5760 <TC2_HAL_subscribe+0x4e>

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    575e:	cf ef       	ldi	r28, 0xFF	; 255
	
	//Increment the number of cbs and (re)start the timer
	cbCounter++;
	start_timer();
	return pointer;
}
    5760:	8c 2f       	mov	r24, r28
    5762:	cf 91       	pop	r28
    5764:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

0000621e <TC2_HAL_cancel>:

void TC2_HAL_cancel(int8_t pointer){
	//Just return if cb not exist
	if(callbacks[pointer]==NULL) return;
    621e:	08 2e       	mov	r0, r24
    6220:	00 0c       	add	r0, r0
    6222:	99 0b       	sbc	r25, r25
    6224:	fc 01       	movw	r30, r24
    6226:	ee 0f       	add	r30, r30
    6228:	ff 1f       	adc	r31, r31
    622a:	e8 58       	subi	r30, 0x88	; 136
    622c:	f1 4f       	sbci	r31, 0xF1	; 241
    622e:	20 81       	ld	r18, Z
    6230:	31 81       	ldd	r19, Z+1	; 0x01
    6232:	23 2b       	or	r18, r19
    6234:	81 f0       	breq	.+32     	; 0x6256 <TC2_HAL_cancel+0x38>
	
	//Otherwise remove cb, stop timer if no cb is back
	callbacks[pointer]=NULL;
    6236:	88 0f       	add	r24, r24
    6238:	99 1f       	adc	r25, r25
    623a:	fc 01       	movw	r30, r24
    623c:	e8 58       	subi	r30, 0x88	; 136
    623e:	f1 4f       	sbci	r31, 0xF1	; 241
    6240:	11 82       	std	Z+1, r1	; 0x01
    6242:	10 82       	st	Z, r1
	cbCounter--;
    6244:	80 91 de 0e 	lds	r24, 0x0EDE	; 0x800ede <cbCounter>
    6248:	81 50       	subi	r24, 0x01	; 1
    624a:	80 93 de 0e 	sts	0x0EDE, r24	; 0x800ede <cbCounter>
	if(cbCounter==0){
    624e:	81 11       	cpse	r24, r1
    6250:	02 c0       	rjmp	.+4      	; 0x6256 <TC2_HAL_cancel+0x38>
		stop_timer();		
    6252:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <stop_timer>
    6256:	08 95       	ret

Disassembly of section .text.__vector_9:

00004968 <__vector_9>:
	}
}

ISR(TIMER2_COMPA_vect){
    4968:	1f 92       	push	r1
    496a:	0f 92       	push	r0
    496c:	0f b6       	in	r0, 0x3f	; 63
    496e:	0f 92       	push	r0
    4970:	11 24       	eor	r1, r1
    4972:	2f 93       	push	r18
    4974:	3f 93       	push	r19
    4976:	4f 93       	push	r20
    4978:	5f 93       	push	r21
    497a:	6f 93       	push	r22
    497c:	7f 93       	push	r23
    497e:	8f 93       	push	r24
    4980:	9f 93       	push	r25
    4982:	af 93       	push	r26
    4984:	bf 93       	push	r27
    4986:	cf 93       	push	r28
    4988:	ef 93       	push	r30
    498a:	ff 93       	push	r31
	cnt++;
    498c:	80 91 dd 0e 	lds	r24, 0x0EDD	; 0x800edd <cnt>
    4990:	8f 5f       	subi	r24, 0xFF	; 255
    4992:	80 93 dd 0e 	sts	0x0EDD, r24	; 0x800edd <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    4996:	80 32       	cpi	r24, 0x20	; 32
    4998:	99 f4       	brne	.+38     	; 0x49c0 <__vector_9+0x58>
		cnt=0;
    499a:	10 92 dd 0e 	sts	0x0EDD, r1	; 0x800edd <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    499e:	c0 e0       	ldi	r28, 0x00	; 0
    49a0:	0d c0       	rjmp	.+26     	; 0x49bc <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    49a2:	ec 2f       	mov	r30, r28
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	ee 0f       	add	r30, r30
    49a8:	ff 1f       	adc	r31, r31
    49aa:	e8 58       	subi	r30, 0x88	; 136
    49ac:	f1 4f       	sbci	r31, 0xF1	; 241
    49ae:	01 90       	ld	r0, Z+
    49b0:	f0 81       	ld	r31, Z
    49b2:	e0 2d       	mov	r30, r0
    49b4:	30 97       	sbiw	r30, 0x00	; 0
    49b6:	09 f0       	breq	.+2      	; 0x49ba <__vector_9+0x52>
				callbacks[i]();
    49b8:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    49ba:	cf 5f       	subi	r28, 0xFF	; 255
    49bc:	c5 30       	cpi	r28, 0x05	; 5
    49be:	88 f3       	brcs	.-30     	; 0x49a2 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    49c0:	ff 91       	pop	r31
    49c2:	ef 91       	pop	r30
    49c4:	cf 91       	pop	r28
    49c6:	bf 91       	pop	r27
    49c8:	af 91       	pop	r26
    49ca:	9f 91       	pop	r25
    49cc:	8f 91       	pop	r24
    49ce:	7f 91       	pop	r23
    49d0:	6f 91       	pop	r22
    49d2:	5f 91       	pop	r21
    49d4:	4f 91       	pop	r20
    49d6:	3f 91       	pop	r19
    49d8:	2f 91       	pop	r18
    49da:	0f 90       	pop	r0
    49dc:	0f be       	out	0x3f, r0	; 63
    49de:	0f 90       	pop	r0
    49e0:	1f 90       	pop	r1
    49e2:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00005a32 <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    5a32:	cf 92       	push	r12
    5a34:	df 92       	push	r13
    5a36:	ef 92       	push	r14
    5a38:	cf 93       	push	r28
    5a3a:	df 93       	push	r29
    5a3c:	6a 01       	movw	r12, r20
    5a3e:	e6 2e       	mov	r14, r22
    5a40:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    5a42:	60 e0       	ldi	r22, 0x00	; 0
    5a44:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    5a48:	81 11       	cpse	r24, r1
    5a4a:	13 c0       	rjmp	.+38     	; 0x5a72 <start_and_write_data+0x40>
    5a4c:	c0 e0       	ldi	r28, 0x00	; 0
    5a4e:	0e c0       	rjmp	.+28     	; 0x5a6c <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    5a50:	ae 2d       	mov	r26, r14
    5a52:	c6 01       	movw	r24, r12
    5a54:	8c 0f       	add	r24, r28
    5a56:	91 1d       	adc	r25, r1
    5a58:	a1 1d       	adc	r26, r1
    5a5a:	fc 01       	movw	r30, r24
    5a5c:	84 91       	lpm	r24, Z
    5a5e:	a7 fd       	sbrc	r26, 7
    5a60:	80 81       	ld	r24, Z
    5a62:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    5a66:	81 11       	cpse	r24, r1
    5a68:	04 c0       	rjmp	.+8      	; 0x5a72 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    5a6a:	cf 5f       	subi	r28, 0xFF	; 255
    5a6c:	cd 17       	cp	r28, r29
    5a6e:	80 f3       	brcs	.-32     	; 0x5a50 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    5a70:	80 e0       	ldi	r24, 0x00	; 0
}
    5a72:	df 91       	pop	r29
    5a74:	cf 91       	pop	r28
    5a76:	ef 90       	pop	r14
    5a78:	df 90       	pop	r13
    5a7a:	cf 90       	pop	r12
    5a7c:	08 95       	ret

Disassembly of section .text.read_and_stop:

00005502 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    5502:	ef 92       	push	r14
    5504:	ff 92       	push	r15
    5506:	0f 93       	push	r16
    5508:	1f 93       	push	r17
    550a:	cf 93       	push	r28
    550c:	df 93       	push	r29
    550e:	8c 01       	movw	r16, r24
    5510:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    5512:	c0 e0       	ldi	r28, 0x00	; 0
    5514:	08 c0       	rjmp	.+16     	; 0x5526 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    5516:	78 01       	movw	r14, r16
    5518:	ec 0e       	add	r14, r28
    551a:	f1 1c       	adc	r15, r1
    551c:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <TWI_HAL_read_byte_ack>
    5520:	f7 01       	movw	r30, r14
    5522:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    5524:	cf 5f       	subi	r28, 0xFF	; 255
    5526:	2c 2f       	mov	r18, r28
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	8d 2f       	mov	r24, r29
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	01 97       	sbiw	r24, 0x01	; 1
    5530:	28 17       	cp	r18, r24
    5532:	39 07       	cpc	r19, r25
    5534:	84 f3       	brlt	.-32     	; 0x5516 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    5536:	8d 2f       	mov	r24, r29
    5538:	90 e0       	ldi	r25, 0x00	; 0
    553a:	01 97       	sbiw	r24, 0x01	; 1
    553c:	e8 01       	movw	r28, r16
    553e:	c8 0f       	add	r28, r24
    5540:	d9 1f       	adc	r29, r25
    5542:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <TWI_HAL_read_byte_nack>
    5546:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    5548:	0e 94 cd 37 	call	0x6f9a	; 0x6f9a <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	df 91       	pop	r29
    5550:	cf 91       	pop	r28
    5552:	1f 91       	pop	r17
    5554:	0f 91       	pop	r16
    5556:	ff 90       	pop	r15
    5558:	ef 90       	pop	r14
    555a:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00006e94 <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6e94:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6e96:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <start_and_write_data>
    6e9a:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    6e9c:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    6e9e:	0e 94 cd 37 	call	0x6f9a	; 0x6f9a <TWI_HAL_stop>
	}
	return status;
}
    6ea2:	8c 2f       	mov	r24, r28
    6ea4:	cf 91       	pop	r28
    6ea6:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00006d32 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6d32:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6d34:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <start_and_write_data>
    6d38:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    6d3a:	0e 94 cd 37 	call	0x6f9a	; 0x6f9a <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    6d3e:	c1 11       	cpse	r28, r1
    6d40:	02 c0       	rjmp	.+4      	; 0x6d46 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    6d42:	80 e0       	ldi	r24, 0x00	; 0
    6d44:	01 c0       	rjmp	.+2      	; 0x6d48 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    6d46:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    6d48:	cf 91       	pop	r28
    6d4a:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000065ca <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    65ca:	0f 93       	push	r16
    65cc:	1f 93       	push	r17
    65ce:	cf 93       	push	r28
    65d0:	df 93       	push	r29
    65d2:	8b 01       	movw	r16, r22
    65d4:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    65d6:	61 e0       	ldi	r22, 0x01	; 1
    65d8:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <TWI_HAL_start>
    65dc:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    65de:	88 23       	and	r24, r24
    65e0:	21 f0       	breq	.+8      	; 0x65ea <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    65e2:	0e 94 cd 37 	call	0x6f9a	; 0x6f9a <TWI_HAL_stop>
		return status;	
    65e6:	8c 2f       	mov	r24, r28
    65e8:	04 c0       	rjmp	.+8      	; 0x65f2 <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    65ea:	6d 2f       	mov	r22, r29
    65ec:	c8 01       	movw	r24, r16
    65ee:	0e 94 81 2a 	call	0x5502	; 0x5502 <read_and_stop>
	
}
    65f2:	df 91       	pop	r29
    65f4:	cf 91       	pop	r28
    65f6:	1f 91       	pop	r17
    65f8:	0f 91       	pop	r16
    65fa:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

000066c4 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    66c4:	0f 93       	push	r16
    66c6:	1f 93       	push	r17
    66c8:	cf 93       	push	r28
    66ca:	df 93       	push	r29
    66cc:	8b 01       	movw	r16, r22
    66ce:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    66d0:	0e 94 13 30 	call	0x6026	; 0x6026 <TWI_HAL_repeated_start>
    66d4:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    66d6:	88 23       	and	r24, r24
    66d8:	21 f0       	breq	.+8      	; 0x66e2 <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    66da:	0e 94 cd 37 	call	0x6f9a	; 0x6f9a <TWI_HAL_stop>
		return status;
    66de:	8c 2f       	mov	r24, r28
    66e0:	04 c0       	rjmp	.+8      	; 0x66ea <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    66e2:	6d 2f       	mov	r22, r29
    66e4:	c8 01       	movw	r24, r16
    66e6:	0e 94 81 2a 	call	0x5502	; 0x5502 <read_and_stop>
	
}
    66ea:	df 91       	pop	r29
    66ec:	cf 91       	pop	r28
    66ee:	1f 91       	pop	r17
    66f0:	0f 91       	pop	r16
    66f2:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00006ef8 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    6ef8:	80 e2       	ldi	r24, 0x20	; 32
    6efa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    6efe:	e9 eb       	ldi	r30, 0xB9	; 185
    6f00:	f0 e0       	ldi	r31, 0x00	; 0
    6f02:	80 81       	ld	r24, Z
    6f04:	8c 7f       	andi	r24, 0xFC	; 252
    6f06:	80 83       	st	Z, r24
    6f08:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00005cda <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	88 0f       	add	r24, r24
    5cde:	99 1f       	adc	r25, r25
    5ce0:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    5ce2:	84 ea       	ldi	r24, 0xA4	; 164
    5ce4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5ce8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5cec:	99 23       	and	r25, r25
    5cee:	e4 f7       	brge	.-8      	; 0x5ce8 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    5cf0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5cf4:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    5cf6:	88 30       	cpi	r24, 0x08	; 8
    5cf8:	99 f4       	brne	.+38     	; 0x5d20 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    5cfa:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    5cfe:	84 e8       	ldi	r24, 0x84	; 132
    5d00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5d04:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5d08:	88 23       	and	r24, r24
    5d0a:	e4 f7       	brge	.-8      	; 0x5d04 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    5d0c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5d10:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    5d12:	88 31       	cpi	r24, 0x18	; 24
    5d14:	21 f0       	breq	.+8      	; 0x5d1e <TWI_HAL_start+0x44>
    5d16:	80 34       	cpi	r24, 0x40	; 64
    5d18:	19 f4       	brne	.+6      	; 0x5d20 <TWI_HAL_start+0x46>
    5d1a:	80 e0       	ldi	r24, 0x00	; 0
    5d1c:	08 95       	ret
    5d1e:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    5d20:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00006026 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	88 0f       	add	r24, r24
    602a:	99 1f       	adc	r25, r25
    602c:	28 2f       	mov	r18, r24
    602e:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    6030:	84 ea       	ldi	r24, 0xA4	; 164
    6032:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    6036:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    603a:	99 23       	and	r25, r25
    603c:	e4 f7       	brge	.-8      	; 0x6036 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    603e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    6042:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    6044:	80 31       	cpi	r24, 0x10	; 16
    6046:	79 f4       	brne	.+30     	; 0x6066 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    6048:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    604c:	84 e8       	ldi	r24, 0x84	; 132
    604e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    6052:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6056:	88 23       	and	r24, r24
    6058:	e4 f7       	brge	.-8      	; 0x6052 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    605a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    605e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    6060:	80 34       	cpi	r24, 0x40	; 64
    6062:	09 f4       	brne	.+2      	; 0x6066 <TWI_HAL_repeated_start+0x40>
    6064:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    6066:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00006b92 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    6b92:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    6b96:	84 e8       	ldi	r24, 0x84	; 132
    6b98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    6b9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6ba0:	88 23       	and	r24, r24
    6ba2:	e4 f7       	brge	.-8      	; 0x6b9c <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    6ba4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    6ba8:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    6baa:	88 32       	cpi	r24, 0x28	; 40
    6bac:	09 f4       	brne	.+2      	; 0x6bb0 <TWI_HAL_write_byte+0x1e>
    6bae:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    6bb0:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00006ea8 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    6ea8:	84 ec       	ldi	r24, 0xC4	; 196
    6eaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    6eae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6eb2:	88 23       	and	r24, r24
    6eb4:	e4 f7       	brge	.-8      	; 0x6eae <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    6eb6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6eba:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00006ebc <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    6ebc:	84 e8       	ldi	r24, 0x84	; 132
    6ebe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    6ec2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6ec6:	88 23       	and	r24, r24
    6ec8:	e4 f7       	brge	.-8      	; 0x6ec2 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    6eca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6ece:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00006f9a <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    6f9a:	84 e9       	ldi	r24, 0x94	; 148
    6f9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    6fa0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6fa4:	84 fd       	sbrc	r24, 4
    6fa6:	fc cf       	rjmp	.-8      	; 0x6fa0 <TWI_HAL_stop+0x6>
}
    6fa8:	08 95       	ret

Disassembly of section .text.copy_buffer:

00006874 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    6874:	bc 01       	movw	r22, r24
    6876:	90 e0       	ldi	r25, 0x00	; 0
    6878:	09 c0       	rjmp	.+18     	; 0x688c <copy_buffer+0x18>
    687a:	fb 01       	movw	r30, r22
    687c:	e9 0f       	add	r30, r25
    687e:	f1 1d       	adc	r31, r1
    6880:	da 01       	movw	r26, r20
    6882:	a0 50       	subi	r26, 0x00	; 0
    6884:	bf 4f       	sbci	r27, 0xFF	; 255
    6886:	2c 91       	ld	r18, X
    6888:	20 83       	st	Z, r18
    688a:	9f 5f       	subi	r25, 0xFF	; 255
    688c:	49 2f       	mov	r20, r25
    688e:	50 e0       	ldi	r21, 0x00	; 0
    6890:	20 91 e0 0e 	lds	r18, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    6894:	30 e0       	ldi	r19, 0x00	; 0
    6896:	22 50       	subi	r18, 0x02	; 2
    6898:	31 09       	sbc	r19, r1
    689a:	42 17       	cp	r20, r18
    689c:	53 07       	cpc	r21, r19
    689e:	6c f3       	brlt	.-38     	; 0x687a <copy_buffer+0x6>
    68a0:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

000061a6 <uart0_hal_init>:
    61a6:	e1 ec       	ldi	r30, 0xC1	; 193
    61a8:	f0 e0       	ldi	r31, 0x00	; 0
    61aa:	80 81       	ld	r24, Z
    61ac:	80 61       	ori	r24, 0x10	; 16
    61ae:	80 83       	st	Z, r24
    61b0:	80 81       	ld	r24, Z
    61b2:	88 60       	ori	r24, 0x08	; 8
    61b4:	80 83       	st	Z, r24
    61b6:	80 81       	ld	r24, Z
    61b8:	80 68       	ori	r24, 0x80	; 128
    61ba:	80 83       	st	Z, r24
    61bc:	80 81       	ld	r24, Z
    61be:	80 64       	ori	r24, 0x40	; 64
    61c0:	80 83       	st	Z, r24
    61c2:	e0 ec       	ldi	r30, 0xC0	; 192
    61c4:	f0 e0       	ldi	r31, 0x00	; 0
    61c6:	80 81       	ld	r24, Z
    61c8:	82 60       	ori	r24, 0x02	; 2
    61ca:	80 83       	st	Z, r24
    61cc:	86 e0       	ldi	r24, 0x06	; 6
    61ce:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    61d2:	80 e1       	ldi	r24, 0x10	; 16
    61d4:	90 e0       	ldi	r25, 0x00	; 0
    61d6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    61da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    61de:	78 94       	sei
    61e0:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00005948 <uart0_hal_send_message>:
    5948:	dc 01       	movw	r26, r24
    594a:	80 91 c1 0e 	lds	r24, 0x0EC1	; 0x800ec1 <tx_buffer_data_len>
    594e:	90 91 c2 0e 	lds	r25, 0x0EC2	; 0x800ec2 <tx_buffer_data_len+0x1>
    5952:	89 2b       	or	r24, r25
    5954:	d1 f7       	brne	.-12     	; 0x594a <uart0_hal_send_message+0x2>
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	0b c0       	rjmp	.+22     	; 0x5970 <uart0_hal_send_message+0x28>
    595a:	29 2f       	mov	r18, r25
    595c:	30 e0       	ldi	r19, 0x00	; 0
    595e:	fd 01       	movw	r30, r26
    5960:	e2 0f       	add	r30, r18
    5962:	f3 1f       	adc	r31, r19
    5964:	40 81       	ld	r20, Z
    5966:	f9 01       	movw	r30, r18
    5968:	ea 56       	subi	r30, 0x6A	; 106
    596a:	fe 4f       	sbci	r31, 0xFE	; 254
    596c:	40 83       	st	Z, r20
    596e:	9f 5f       	subi	r25, 0xFF	; 255
    5970:	96 17       	cp	r25, r22
    5972:	98 f3       	brcs	.-26     	; 0x595a <uart0_hal_send_message+0x12>
    5974:	86 2f       	mov	r24, r22
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	90 93 c2 0e 	sts	0x0EC2, r25	; 0x800ec2 <tx_buffer_data_len+0x1>
    597c:	80 93 c1 0e 	sts	0x0EC1, r24	; 0x800ec1 <tx_buffer_data_len>
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	90 e0       	ldi	r25, 0x00	; 0
    5984:	90 93 c0 0e 	sts	0x0EC0, r25	; 0x800ec0 <tx_buffer_cursor+0x1>
    5988:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <tx_buffer_cursor>
    598c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    5990:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    5994:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

000048ea <uart0_hal_send_string>:
    48ea:	6f 92       	push	r6
    48ec:	7f 92       	push	r7
    48ee:	8f 92       	push	r8
    48f0:	cf 92       	push	r12
    48f2:	df 92       	push	r13
    48f4:	ef 92       	push	r14
    48f6:	3b 01       	movw	r6, r22
    48f8:	88 2e       	mov	r8, r24
    48fa:	80 91 c1 0e 	lds	r24, 0x0EC1	; 0x800ec1 <tx_buffer_data_len>
    48fe:	90 91 c2 0e 	lds	r25, 0x0EC2	; 0x800ec2 <tx_buffer_data_len+0x1>
    4902:	89 2b       	or	r24, r25
    4904:	d1 f7       	brne	.-12     	; 0x48fa <uart0_hal_send_string+0x10>
    4906:	88 2d       	mov	r24, r8
    4908:	b3 01       	movw	r22, r6
    490a:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    490e:	bc 01       	movw	r22, r24
    4910:	20 e0       	ldi	r18, 0x00	; 0
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	11 c0       	rjmp	.+34     	; 0x4938 <uart0_hal_send_string+0x4e>
    4916:	e8 2c       	mov	r14, r8
    4918:	63 01       	movw	r12, r6
    491a:	c2 0e       	add	r12, r18
    491c:	d3 1e       	adc	r13, r19
    491e:	e1 1c       	adc	r14, r1
    4920:	37 fd       	sbrc	r19, 7
    4922:	ea 94       	dec	r14
    4924:	f6 01       	movw	r30, r12
    4926:	94 91       	lpm	r25, Z
    4928:	e7 fc       	sbrc	r14, 7
    492a:	90 81       	ld	r25, Z
    492c:	f9 01       	movw	r30, r18
    492e:	ea 56       	subi	r30, 0x6A	; 106
    4930:	fe 4f       	sbci	r31, 0xFE	; 254
    4932:	90 83       	st	Z, r25
    4934:	2f 5f       	subi	r18, 0xFF	; 255
    4936:	3f 4f       	sbci	r19, 0xFF	; 255
    4938:	26 17       	cp	r18, r22
    493a:	37 07       	cpc	r19, r23
    493c:	60 f3       	brcs	.-40     	; 0x4916 <uart0_hal_send_string+0x2c>
    493e:	70 93 c2 0e 	sts	0x0EC2, r23	; 0x800ec2 <tx_buffer_data_len+0x1>
    4942:	60 93 c1 0e 	sts	0x0EC1, r22	; 0x800ec1 <tx_buffer_data_len>
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	90 93 c0 0e 	sts	0x0EC0, r25	; 0x800ec0 <tx_buffer_cursor+0x1>
    494e:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <tx_buffer_cursor>
    4952:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    4956:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    495a:	ef 90       	pop	r14
    495c:	df 90       	pop	r13
    495e:	cf 90       	pop	r12
    4960:	8f 90       	pop	r8
    4962:	7f 90       	pop	r7
    4964:	6f 90       	pop	r6
    4966:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

0000701e <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    701e:	90 91 df 0e 	lds	r25, 0x0EDF	; 0x800edf <rx_buffer_has_message>
    7022:	81 e0       	ldi	r24, 0x01	; 1
    7024:	91 11       	cpse	r25, r1
    7026:	01 c0       	rjmp	.+2      	; 0x702a <uart0_hal_message_ready+0xc>
    7028:	80 e0       	ldi	r24, 0x00	; 0
}
    702a:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000071de <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    71de:	10 92 df 0e 	sts	0x0EDF, r1	; 0x800edf <rx_buffer_has_message>
	rx_buffer_data_len=0;
    71e2:	10 92 e0 0e 	sts	0x0EE0, r1	; 0x800ee0 <rx_buffer_data_len>
    71e6:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00006952 <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    6952:	0f 93       	push	r16
    6954:	1f 93       	push	r17
    6956:	cf 93       	push	r28
    6958:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    695a:	0e 94 3a 34 	call	0x6874	; 0x6874 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    695e:	c0 91 e0 0e 	lds	r28, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    6962:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    6964:	f8 01       	movw	r30, r16
    6966:	ec 0f       	add	r30, r28
    6968:	f1 1d       	adc	r31, r1
    696a:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    696c:	0e 94 ef 38 	call	0x71de	; 0x71de <uart0_hal_clear_rx_buffer>
	return len;
}
    6970:	8c 2f       	mov	r24, r28
    6972:	cf 91       	pop	r28
    6974:	1f 91       	pop	r17
    6976:	0f 91       	pop	r16
    6978:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00005e42 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5e42:	cf 93       	push	r28
    5e44:	df 93       	push	r29
    5e46:	1f 92       	push	r1
    5e48:	cd b7       	in	r28, 0x3d	; 61
    5e4a:	de b7       	in	r29, 0x3e	; 62
    5e4c:	9a b1       	in	r25, 0x0a	; 10
    5e4e:	92 60       	ori	r25, 0x02	; 2
    5e50:	9a b9       	out	0x0a, r25	; 10
    5e52:	e1 ec       	ldi	r30, 0xC1	; 193
    5e54:	f0 e0       	ldi	r31, 0x00	; 0
    5e56:	90 81       	ld	r25, Z
    5e58:	97 7f       	andi	r25, 0xF7	; 247
    5e5a:	90 83       	st	Z, r25
    5e5c:	9b b1       	in	r25, 0x0b	; 11
    5e5e:	9d 7f       	andi	r25, 0xFD	; 253
    5e60:	9b b9       	out	0x0b, r25	; 11
    5e62:	af e9       	ldi	r26, 0x9F	; 159
    5e64:	bf e0       	ldi	r27, 0x0F	; 15
    5e66:	11 97       	sbiw	r26, 0x01	; 1
    5e68:	f1 f7       	brne	.-4      	; 0x5e66 <uart0_hal_send_break+0x24>
    5e6a:	00 c0       	rjmp	.+0      	; 0x5e6c <uart0_hal_send_break+0x2a>
    5e6c:	00 00       	nop
    5e6e:	90 81       	ld	r25, Z
    5e70:	98 60       	ori	r25, 0x08	; 8
    5e72:	90 83       	st	Z, r25
    5e74:	89 83       	std	Y+1, r24	; 0x01
    5e76:	61 e0       	ldi	r22, 0x01	; 1
    5e78:	ce 01       	movw	r24, r28
    5e7a:	01 96       	adiw	r24, 0x01	; 1
    5e7c:	0e 94 a4 2c 	call	0x5948	; 0x5948 <uart0_hal_send_message>
    5e80:	0f 90       	pop	r0
    5e82:	df 91       	pop	r29
    5e84:	cf 91       	pop	r28
    5e86:	08 95       	ret

Disassembly of section .text.__vector_22:

00004f6a <__vector_22>:
    4f6a:	1f 92       	push	r1
    4f6c:	0f 92       	push	r0
    4f6e:	0f b6       	in	r0, 0x3f	; 63
    4f70:	0f 92       	push	r0
    4f72:	11 24       	eor	r1, r1
    4f74:	2f 93       	push	r18
    4f76:	3f 93       	push	r19
    4f78:	8f 93       	push	r24
    4f7a:	9f 93       	push	r25
    4f7c:	ef 93       	push	r30
    4f7e:	ff 93       	push	r31
    4f80:	80 91 bf 0e 	lds	r24, 0x0EBF	; 0x800ebf <tx_buffer_cursor>
    4f84:	90 91 c0 0e 	lds	r25, 0x0EC0	; 0x800ec0 <tx_buffer_cursor+0x1>
    4f88:	20 91 c1 0e 	lds	r18, 0x0EC1	; 0x800ec1 <tx_buffer_data_len>
    4f8c:	30 91 c2 0e 	lds	r19, 0x0EC2	; 0x800ec2 <tx_buffer_data_len+0x1>
    4f90:	82 17       	cp	r24, r18
    4f92:	93 07       	cpc	r25, r19
    4f94:	70 f4       	brcc	.+28     	; 0x4fb2 <__vector_22+0x48>
    4f96:	9c 01       	movw	r18, r24
    4f98:	2f 5f       	subi	r18, 0xFF	; 255
    4f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f9c:	30 93 c0 0e 	sts	0x0EC0, r19	; 0x800ec0 <tx_buffer_cursor+0x1>
    4fa0:	20 93 bf 0e 	sts	0x0EBF, r18	; 0x800ebf <tx_buffer_cursor>
    4fa4:	fc 01       	movw	r30, r24
    4fa6:	ea 56       	subi	r30, 0x6A	; 106
    4fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    4faa:	80 81       	ld	r24, Z
    4fac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4fb0:	08 c0       	rjmp	.+16     	; 0x4fc2 <__vector_22+0x58>
    4fb2:	10 92 c0 0e 	sts	0x0EC0, r1	; 0x800ec0 <tx_buffer_cursor+0x1>
    4fb6:	10 92 bf 0e 	sts	0x0EBF, r1	; 0x800ebf <tx_buffer_cursor>
    4fba:	10 92 c2 0e 	sts	0x0EC2, r1	; 0x800ec2 <tx_buffer_data_len+0x1>
    4fbe:	10 92 c1 0e 	sts	0x0EC1, r1	; 0x800ec1 <tx_buffer_data_len>
    4fc2:	ff 91       	pop	r31
    4fc4:	ef 91       	pop	r30
    4fc6:	9f 91       	pop	r25
    4fc8:	8f 91       	pop	r24
    4fca:	3f 91       	pop	r19
    4fcc:	2f 91       	pop	r18
    4fce:	0f 90       	pop	r0
    4fd0:	0f be       	out	0x3f, r0	; 63
    4fd2:	0f 90       	pop	r0
    4fd4:	1f 90       	pop	r1
    4fd6:	18 95       	reti

Disassembly of section .text.__vector_20:

00004d30 <__vector_20>:
    4d30:	1f 92       	push	r1
    4d32:	0f 92       	push	r0
    4d34:	0f b6       	in	r0, 0x3f	; 63
    4d36:	0f 92       	push	r0
    4d38:	11 24       	eor	r1, r1
    4d3a:	2f 93       	push	r18
    4d3c:	8f 93       	push	r24
    4d3e:	9f 93       	push	r25
    4d40:	ef 93       	push	r30
    4d42:	ff 93       	push	r31
    4d44:	80 91 df 0e 	lds	r24, 0x0EDF	; 0x800edf <rx_buffer_has_message>
    4d48:	81 11       	cpse	r24, r1
    4d4a:	0e c0       	rjmp	.+28     	; 0x4d68 <__vector_20+0x38>
    4d4c:	e0 91 e0 0e 	lds	r30, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    4d50:	e6 39       	cpi	r30, 0x96	; 150
    4d52:	50 f4       	brcc	.+20     	; 0x4d68 <__vector_20+0x38>
    4d54:	81 e0       	ldi	r24, 0x01	; 1
    4d56:	8e 0f       	add	r24, r30
    4d58:	80 93 e0 0e 	sts	0x0EE0, r24	; 0x800ee0 <rx_buffer_data_len>
    4d5c:	f0 e0       	ldi	r31, 0x00	; 0
    4d5e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4d62:	e0 50       	subi	r30, 0x00	; 0
    4d64:	ff 4f       	sbci	r31, 0xFF	; 255
    4d66:	80 83       	st	Z, r24
    4d68:	80 91 e0 0e 	lds	r24, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    4d6c:	83 30       	cpi	r24, 0x03	; 3
    4d6e:	80 f0       	brcs	.+32     	; 0x4d90 <__vector_20+0x60>
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	fc 01       	movw	r30, r24
    4d74:	e1 50       	subi	r30, 0x01	; 1
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	20 81       	ld	r18, Z
    4d7a:	2a 30       	cpi	r18, 0x0A	; 10
    4d7c:	49 f4       	brne	.+18     	; 0x4d90 <__vector_20+0x60>
    4d7e:	fc 01       	movw	r30, r24
    4d80:	e2 50       	subi	r30, 0x02	; 2
    4d82:	ff 4f       	sbci	r31, 0xFF	; 255
    4d84:	80 81       	ld	r24, Z
    4d86:	8d 30       	cpi	r24, 0x0D	; 13
    4d88:	19 f4       	brne	.+6      	; 0x4d90 <__vector_20+0x60>
    4d8a:	81 e0       	ldi	r24, 0x01	; 1
    4d8c:	80 93 df 0e 	sts	0x0EDF, r24	; 0x800edf <rx_buffer_has_message>
    4d90:	ff 91       	pop	r31
    4d92:	ef 91       	pop	r30
    4d94:	9f 91       	pop	r25
    4d96:	8f 91       	pop	r24
    4d98:	2f 91       	pop	r18
    4d9a:	0f 90       	pop	r0
    4d9c:	0f be       	out	0x3f, r0	; 63
    4d9e:	0f 90       	pop	r0
    4da0:	1f 90       	pop	r1
    4da2:	18 95       	reti

Disassembly of section .text.copy_buffer:

000068a2 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    68a2:	bc 01       	movw	r22, r24
    68a4:	90 e0       	ldi	r25, 0x00	; 0
    68a6:	09 c0       	rjmp	.+18     	; 0x68ba <copy_buffer+0x18>
    68a8:	fb 01       	movw	r30, r22
    68aa:	e9 0f       	add	r30, r25
    68ac:	f1 1d       	adc	r31, r1
    68ae:	da 01       	movw	r26, r20
    68b0:	a5 57       	subi	r26, 0x75	; 117
    68b2:	b2 4f       	sbci	r27, 0xF2	; 242
    68b4:	2c 91       	ld	r18, X
    68b6:	20 83       	st	Z, r18
    68b8:	9f 5f       	subi	r25, 0xFF	; 255
    68ba:	49 2f       	mov	r20, r25
    68bc:	50 e0       	ldi	r21, 0x00	; 0
    68be:	20 91 e2 0e 	lds	r18, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    68c2:	30 e0       	ldi	r19, 0x00	; 0
    68c4:	22 50       	subi	r18, 0x02	; 2
    68c6:	31 09       	sbc	r19, r1
    68c8:	42 17       	cp	r20, r18
    68ca:	53 07       	cpc	r21, r19
    68cc:	6c f3       	brlt	.-38     	; 0x68a8 <copy_buffer+0x6>
    68ce:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

000061e2 <uart1_hal_init>:
    61e2:	e9 ec       	ldi	r30, 0xC9	; 201
    61e4:	f0 e0       	ldi	r31, 0x00	; 0
    61e6:	80 81       	ld	r24, Z
    61e8:	80 61       	ori	r24, 0x10	; 16
    61ea:	80 83       	st	Z, r24
    61ec:	80 81       	ld	r24, Z
    61ee:	88 60       	ori	r24, 0x08	; 8
    61f0:	80 83       	st	Z, r24
    61f2:	80 81       	ld	r24, Z
    61f4:	80 68       	ori	r24, 0x80	; 128
    61f6:	80 83       	st	Z, r24
    61f8:	80 81       	ld	r24, Z
    61fa:	80 64       	ori	r24, 0x40	; 64
    61fc:	80 83       	st	Z, r24
    61fe:	e8 ec       	ldi	r30, 0xC8	; 200
    6200:	f0 e0       	ldi	r31, 0x00	; 0
    6202:	80 81       	ld	r24, Z
    6204:	82 60       	ori	r24, 0x02	; 2
    6206:	80 83       	st	Z, r24
    6208:	86 e0       	ldi	r24, 0x06	; 6
    620a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    620e:	80 e1       	ldi	r24, 0x10	; 16
    6210:	90 e0       	ldi	r25, 0x00	; 0
    6212:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    6216:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    621a:	78 94       	sei
    621c:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

000044ec <uart1_hal_send_string>:
    44ec:	6f 92       	push	r6
    44ee:	7f 92       	push	r7
    44f0:	8f 92       	push	r8
    44f2:	cf 92       	push	r12
    44f4:	df 92       	push	r13
    44f6:	ef 92       	push	r14
    44f8:	3b 01       	movw	r6, r22
    44fa:	88 2e       	mov	r8, r24
    44fc:	80 91 c5 0e 	lds	r24, 0x0EC5	; 0x800ec5 <tx_buffer_data_len>
    4500:	90 91 c6 0e 	lds	r25, 0x0EC6	; 0x800ec6 <tx_buffer_data_len+0x1>
    4504:	89 2b       	or	r24, r25
    4506:	d1 f7       	brne	.-12     	; 0x44fc <uart1_hal_send_string+0x10>
    4508:	88 2d       	mov	r24, r8
    450a:	b3 01       	movw	r22, r6
    450c:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    4510:	bc 01       	movw	r22, r24
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	11 c0       	rjmp	.+34     	; 0x453a <uart1_hal_send_string+0x4e>
    4518:	e8 2c       	mov	r14, r8
    451a:	63 01       	movw	r12, r6
    451c:	c2 0e       	add	r12, r18
    451e:	d3 1e       	adc	r13, r19
    4520:	e1 1c       	adc	r14, r1
    4522:	37 fd       	sbrc	r19, 7
    4524:	ea 94       	dec	r14
    4526:	f6 01       	movw	r30, r12
    4528:	94 91       	lpm	r25, Z
    452a:	e7 fc       	sbrc	r14, 7
    452c:	90 81       	ld	r25, Z
    452e:	f9 01       	movw	r30, r18
    4530:	e8 52       	subi	r30, 0x28	; 40
    4532:	f8 4f       	sbci	r31, 0xF8	; 248
    4534:	90 83       	st	Z, r25
    4536:	2f 5f       	subi	r18, 0xFF	; 255
    4538:	3f 4f       	sbci	r19, 0xFF	; 255
    453a:	26 17       	cp	r18, r22
    453c:	37 07       	cpc	r19, r23
    453e:	60 f3       	brcs	.-40     	; 0x4518 <uart1_hal_send_string+0x2c>
    4540:	fb 01       	movw	r30, r22
    4542:	e8 52       	subi	r30, 0x28	; 40
    4544:	f8 4f       	sbci	r31, 0xF8	; 248
    4546:	8d e0       	ldi	r24, 0x0D	; 13
    4548:	80 83       	st	Z, r24
    454a:	fb 01       	movw	r30, r22
    454c:	e7 52       	subi	r30, 0x27	; 39
    454e:	f8 4f       	sbci	r31, 0xF8	; 248
    4550:	8a e0       	ldi	r24, 0x0A	; 10
    4552:	80 83       	st	Z, r24
    4554:	6e 5f       	subi	r22, 0xFE	; 254
    4556:	7f 4f       	sbci	r23, 0xFF	; 255
    4558:	70 93 c6 0e 	sts	0x0EC6, r23	; 0x800ec6 <tx_buffer_data_len+0x1>
    455c:	60 93 c5 0e 	sts	0x0EC5, r22	; 0x800ec5 <tx_buffer_data_len>
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	90 93 c4 0e 	sts	0x0EC4, r25	; 0x800ec4 <tx_buffer_cursor+0x1>
    4568:	80 93 c3 0e 	sts	0x0EC3, r24	; 0x800ec3 <tx_buffer_cursor>
    456c:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <_end>
    4570:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4574:	ef 90       	pop	r14
    4576:	df 90       	pop	r13
    4578:	cf 90       	pop	r12
    457a:	8f 90       	pop	r8
    457c:	7f 90       	pop	r7
    457e:	6f 90       	pop	r6
    4580:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

0000702c <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    702c:	90 91 e1 0e 	lds	r25, 0x0EE1	; 0x800ee1 <rx_buffer_has_message>
    7030:	81 e0       	ldi	r24, 0x01	; 1
    7032:	91 11       	cpse	r25, r1
    7034:	01 c0       	rjmp	.+2      	; 0x7038 <uart1_hal_message_ready+0xc>
    7036:	80 e0       	ldi	r24, 0x00	; 0
}
    7038:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

0000703a <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    703a:	90 91 e2 0e 	lds	r25, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    703e:	81 e0       	ldi	r24, 0x01	; 1
    7040:	9a 34       	cpi	r25, 0x4A	; 74
    7042:	08 f4       	brcc	.+2      	; 0x7046 <uart1_hal_rx_full+0xc>
    7044:	80 e0       	ldi	r24, 0x00	; 0
}
    7046:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

000071e8 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    71e8:	10 92 e1 0e 	sts	0x0EE1, r1	; 0x800ee1 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    71ec:	10 92 e2 0e 	sts	0x0EE2, r1	; 0x800ee2 <rx_buffer_data_len>
    71f0:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

0000697a <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    697a:	0f 93       	push	r16
    697c:	1f 93       	push	r17
    697e:	cf 93       	push	r28
    6980:	8c 01       	movw	r16, r24
    6982:	0e 94 51 34 	call	0x68a2	; 0x68a2 <copy_buffer>
    6986:	c0 91 e2 0e 	lds	r28, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    698a:	c2 50       	subi	r28, 0x02	; 2
    698c:	f8 01       	movw	r30, r16
    698e:	ec 0f       	add	r30, r28
    6990:	f1 1d       	adc	r31, r1
    6992:	10 82       	st	Z, r1
    6994:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <uart1_hal_clear_rx_buffer>
    6998:	8c 2f       	mov	r24, r28
    699a:	cf 91       	pop	r28
    699c:	1f 91       	pop	r17
    699e:	0f 91       	pop	r16
    69a0:	08 95       	ret

Disassembly of section .text.__vector_30:

00004fd8 <__vector_30>:
    4fd8:	1f 92       	push	r1
    4fda:	0f 92       	push	r0
    4fdc:	0f b6       	in	r0, 0x3f	; 63
    4fde:	0f 92       	push	r0
    4fe0:	11 24       	eor	r1, r1
    4fe2:	2f 93       	push	r18
    4fe4:	3f 93       	push	r19
    4fe6:	8f 93       	push	r24
    4fe8:	9f 93       	push	r25
    4fea:	ef 93       	push	r30
    4fec:	ff 93       	push	r31
    4fee:	80 91 c3 0e 	lds	r24, 0x0EC3	; 0x800ec3 <tx_buffer_cursor>
    4ff2:	90 91 c4 0e 	lds	r25, 0x0EC4	; 0x800ec4 <tx_buffer_cursor+0x1>
    4ff6:	20 91 c5 0e 	lds	r18, 0x0EC5	; 0x800ec5 <tx_buffer_data_len>
    4ffa:	30 91 c6 0e 	lds	r19, 0x0EC6	; 0x800ec6 <tx_buffer_data_len+0x1>
    4ffe:	82 17       	cp	r24, r18
    5000:	93 07       	cpc	r25, r19
    5002:	70 f4       	brcc	.+28     	; 0x5020 <__vector_30+0x48>
    5004:	9c 01       	movw	r18, r24
    5006:	2f 5f       	subi	r18, 0xFF	; 255
    5008:	3f 4f       	sbci	r19, 0xFF	; 255
    500a:	30 93 c4 0e 	sts	0x0EC4, r19	; 0x800ec4 <tx_buffer_cursor+0x1>
    500e:	20 93 c3 0e 	sts	0x0EC3, r18	; 0x800ec3 <tx_buffer_cursor>
    5012:	fc 01       	movw	r30, r24
    5014:	e8 52       	subi	r30, 0x28	; 40
    5016:	f8 4f       	sbci	r31, 0xF8	; 248
    5018:	80 81       	ld	r24, Z
    501a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    501e:	08 c0       	rjmp	.+16     	; 0x5030 <__vector_30+0x58>
    5020:	10 92 c4 0e 	sts	0x0EC4, r1	; 0x800ec4 <tx_buffer_cursor+0x1>
    5024:	10 92 c3 0e 	sts	0x0EC3, r1	; 0x800ec3 <tx_buffer_cursor>
    5028:	10 92 c6 0e 	sts	0x0EC6, r1	; 0x800ec6 <tx_buffer_data_len+0x1>
    502c:	10 92 c5 0e 	sts	0x0EC5, r1	; 0x800ec5 <tx_buffer_data_len>
    5030:	ff 91       	pop	r31
    5032:	ef 91       	pop	r30
    5034:	9f 91       	pop	r25
    5036:	8f 91       	pop	r24
    5038:	3f 91       	pop	r19
    503a:	2f 91       	pop	r18
    503c:	0f 90       	pop	r0
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	0f 90       	pop	r0
    5042:	1f 90       	pop	r1
    5044:	18 95       	reti

Disassembly of section .text.__vector_28:

00004da4 <__vector_28>:
    4da4:	1f 92       	push	r1
    4da6:	0f 92       	push	r0
    4da8:	0f b6       	in	r0, 0x3f	; 63
    4daa:	0f 92       	push	r0
    4dac:	11 24       	eor	r1, r1
    4dae:	2f 93       	push	r18
    4db0:	8f 93       	push	r24
    4db2:	9f 93       	push	r25
    4db4:	ef 93       	push	r30
    4db6:	ff 93       	push	r31
    4db8:	80 91 e1 0e 	lds	r24, 0x0EE1	; 0x800ee1 <rx_buffer_has_message>
    4dbc:	81 11       	cpse	r24, r1
    4dbe:	0e c0       	rjmp	.+28     	; 0x4ddc <__vector_28+0x38>
    4dc0:	e0 91 e2 0e 	lds	r30, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    4dc4:	eb 34       	cpi	r30, 0x4B	; 75
    4dc6:	50 f4       	brcc	.+20     	; 0x4ddc <__vector_28+0x38>
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	8e 0f       	add	r24, r30
    4dcc:	80 93 e2 0e 	sts	0x0EE2, r24	; 0x800ee2 <rx_buffer_data_len>
    4dd0:	f0 e0       	ldi	r31, 0x00	; 0
    4dd2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4dd6:	e5 57       	subi	r30, 0x75	; 117
    4dd8:	f2 4f       	sbci	r31, 0xF2	; 242
    4dda:	80 83       	st	Z, r24
    4ddc:	80 91 e2 0e 	lds	r24, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    4de0:	83 30       	cpi	r24, 0x03	; 3
    4de2:	80 f0       	brcs	.+32     	; 0x4e04 <__vector_28+0x60>
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	fc 01       	movw	r30, r24
    4de8:	e6 57       	subi	r30, 0x76	; 118
    4dea:	f2 4f       	sbci	r31, 0xF2	; 242
    4dec:	20 81       	ld	r18, Z
    4dee:	2a 30       	cpi	r18, 0x0A	; 10
    4df0:	49 f4       	brne	.+18     	; 0x4e04 <__vector_28+0x60>
    4df2:	fc 01       	movw	r30, r24
    4df4:	e7 57       	subi	r30, 0x77	; 119
    4df6:	f2 4f       	sbci	r31, 0xF2	; 242
    4df8:	80 81       	ld	r24, Z
    4dfa:	8d 30       	cpi	r24, 0x0D	; 13
    4dfc:	19 f4       	brne	.+6      	; 0x4e04 <__vector_28+0x60>
    4dfe:	81 e0       	ldi	r24, 0x01	; 1
    4e00:	80 93 e1 0e 	sts	0x0EE1, r24	; 0x800ee1 <rx_buffer_has_message>
    4e04:	ff 91       	pop	r31
    4e06:	ef 91       	pop	r30
    4e08:	9f 91       	pop	r25
    4e0a:	8f 91       	pop	r24
    4e0c:	2f 91       	pop	r18
    4e0e:	0f 90       	pop	r0
    4e10:	0f be       	out	0x3f, r0	; 63
    4e12:	0f 90       	pop	r0
    4e14:	1f 90       	pop	r1
    4e16:	18 95       	reti

Disassembly of section .text.UI_HAL_jumper_init:

00007048 <UI_HAL_jumper_init>:

#include "UI_HAL.h"
#include "../../util/bit_operators.h"

void UI_HAL_jumper_init(){
	clear_bit(DDRA, 6);
    7048:	81 b1       	in	r24, 0x01	; 1
    704a:	8f 7b       	andi	r24, 0xBF	; 191
    704c:	81 b9       	out	0x01, r24	; 1
	set_bit(PORTA, 6); //Pull up, default config mode
    704e:	82 b1       	in	r24, 0x02	; 2
    7050:	80 64       	ori	r24, 0x40	; 64
    7052:	82 b9       	out	0x02, r24	; 2
    7054:	08 95       	ret

Disassembly of section .text.UI_HAL_is_config_mode:

000071f2 <UI_HAL_is_config_mode>:
}

bool UI_HAL_is_config_mode(){
	return get_bit(PINA, 6);
    71f2:	80 b1       	in	r24, 0x00	; 0
}
    71f4:	86 fb       	bst	r24, 6
    71f6:	88 27       	eor	r24, r24
    71f8:	80 f9       	bld	r24, 0
    71fa:	08 95       	ret

Disassembly of section .text.main:

00006258 <main>:
		test_runner();
	#endif // _RUN_TEST
	
	#ifndef _RUN_TEST 

	PM_HAL_LED_power_init();
    6258:	0e 94 01 38 	call	0x7002	; 0x7002 <PM_HAL_LED_power_init>
	UI_HAL_jumper_init();
    625c:	0e 94 24 38 	call	0x7048	; 0x7048 <UI_HAL_jumper_init>
	
	while(1)
	{
		
		if(UI_HAL_is_config_mode()){
    6260:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <UI_HAL_is_config_mode>
    6264:	88 23       	and	r24, r24
    6266:	49 f0       	breq	.+18     	; 0x627a <main+0x22>
			PM_HAL_LED_power(true);
    6268:	81 e0       	ldi	r24, 0x01	; 1
    626a:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <PM_HAL_LED_power>
			CONF_enter();
    626e:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <CONF_enter>
			PM_HAL_LED_power(false);
    6272:	80 e0       	ldi	r24, 0x00	; 0
    6274:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <PM_HAL_LED_power>
    6278:	02 c0       	rjmp	.+4      	; 0x627e <main+0x26>
		}else{
			MAINPG_start();
    627a:	0e 94 af 08 	call	0x115e	; 0x115e <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    627e:	2f ef       	ldi	r18, 0xFF	; 255
    6280:	81 e1       	ldi	r24, 0x11	; 17
    6282:	9a e7       	ldi	r25, 0x7A	; 122
    6284:	21 50       	subi	r18, 0x01	; 1
    6286:	80 40       	sbci	r24, 0x00	; 0
    6288:	90 40       	sbci	r25, 0x00	; 0
    628a:	e1 f7       	brne	.-8      	; 0x6284 <main+0x2c>
    628c:	00 c0       	rjmp	.+0      	; 0x628e <main+0x36>
    628e:	00 00       	nop
    6290:	e7 cf       	rjmp	.-50     	; 0x6260 <main+0x8>

Disassembly of section .text.calc_ppm_methane:

00004582 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    4582:	8f 92       	push	r8
    4584:	9f 92       	push	r9
    4586:	af 92       	push	r10
    4588:	bf 92       	push	r11
    458a:	cf 92       	push	r12
    458c:	df 92       	push	r13
    458e:	ef 92       	push	r14
    4590:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    4592:	bc 01       	movw	r22, r24
    4594:	80 e0       	ldi	r24, 0x00	; 0
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__floatunsisf>
    459c:	20 e0       	ldi	r18, 0x00	; 0
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	40 e8       	ldi	r20, 0x80	; 128
    45a2:	59 e3       	ldi	r21, 0x39	; 57
    45a4:	0e 94 51 39 	call	0x72a2	; 0x72a2 <__mulsf3>
    45a8:	80 90 a7 0e 	lds	r8, 0x0EA7	; 0x800ea7 <Vc>
    45ac:	90 90 a8 0e 	lds	r9, 0x0EA8	; 0x800ea8 <Vc+0x1>
    45b0:	a0 90 a9 0e 	lds	r10, 0x0EA9	; 0x800ea9 <Vc+0x2>
    45b4:	b0 90 aa 0e 	lds	r11, 0x0EAA	; 0x800eaa <Vc+0x3>
    45b8:	a5 01       	movw	r20, r10
    45ba:	94 01       	movw	r18, r8
    45bc:	0e 94 51 39 	call	0x72a2	; 0x72a2 <__mulsf3>
    45c0:	6b 01       	movw	r12, r22
    45c2:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    45c4:	9b 01       	movw	r18, r22
    45c6:	ac 01       	movw	r20, r24
    45c8:	c5 01       	movw	r24, r10
    45ca:	b4 01       	movw	r22, r8
    45cc:	0e 94 4e 38 	call	0x709c	; 0x709c <__subsf3>
    45d0:	a7 01       	movw	r20, r14
    45d2:	96 01       	movw	r18, r12
    45d4:	0e 94 4d 39 	call	0x729a	; 0x729a <__divsf3>
    45d8:	20 91 a3 0e 	lds	r18, 0x0EA3	; 0x800ea3 <RRL>
    45dc:	30 91 a4 0e 	lds	r19, 0x0EA4	; 0x800ea4 <RRL+0x1>
    45e0:	40 91 a5 0e 	lds	r20, 0x0EA5	; 0x800ea5 <RRL+0x2>
    45e4:	50 91 a6 0e 	lds	r21, 0x0EA6	; 0x800ea6 <RRL+0x3>
    45e8:	0e 94 51 39 	call	0x72a2	; 0x72a2 <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    45ec:	20 91 9f 0e 	lds	r18, 0x0E9F	; 0x800e9f <PPM_factor>
    45f0:	30 91 a0 0e 	lds	r19, 0x0EA0	; 0x800ea0 <PPM_factor+0x1>
    45f4:	40 91 a1 0e 	lds	r20, 0x0EA1	; 0x800ea1 <PPM_factor+0x2>
    45f8:	50 91 a2 0e 	lds	r21, 0x0EA2	; 0x800ea2 <PPM_factor+0x3>
    45fc:	0e 94 51 39 	call	0x72a2	; 0x72a2 <__mulsf3>
    4600:	0e 94 24 2a 	call	0x5448	; 0x5448 <__fixunssfsi>
	return PPM;
}
    4604:	cb 01       	movw	r24, r22
    4606:	ff 90       	pop	r15
    4608:	ef 90       	pop	r14
    460a:	df 90       	pop	r13
    460c:	cf 90       	pop	r12
    460e:	bf 90       	pop	r11
    4610:	af 90       	pop	r10
    4612:	9f 90       	pop	r9
    4614:	8f 90       	pop	r8
    4616:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

00006d66 <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    6d66:	80 91 e3 0e 	lds	r24, 0x0EE3	; 0x800ee3 <cntPowerUpTime>
    6d6a:	8f 5f       	subi	r24, 0xFF	; 255
    6d6c:	80 93 e3 0e 	sts	0x0EE3, r24	; 0x800ee3 <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    6d70:	90 91 e4 0e 	lds	r25, 0x0EE4	; 0x800ee4 <_powerUpTime>
    6d74:	89 17       	cp	r24, r25
    6d76:	10 f0       	brcs	.+4      	; 0x6d7c <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    6d78:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <TC0_HAL_stop>
    6d7c:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

000052c2 <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    52c2:	cf 93       	push	r28
	_data=data;
    52c4:	50 93 ca 0e 	sts	0x0ECA, r21	; 0x800eca <_data+0x1>
    52c8:	40 93 c9 0e 	sts	0x0EC9, r20	; 0x800ec9 <_data>
	_nSamples=nSamples;
    52cc:	70 93 cc 0e 	sts	0x0ECC, r23	; 0x800ecc <_nSamples+0x1>
    52d0:	60 93 cb 0e 	sts	0x0ECB, r22	; 0x800ecb <_nSamples>
	cntSamples=0;
    52d4:	10 92 c8 0e 	sts	0x0EC8, r1	; 0x800ec8 <cntSamples+0x1>
    52d8:	10 92 c7 0e 	sts	0x0EC7, r1	; 0x800ec7 <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    52dc:	64 e4       	ldi	r22, 0x44	; 68
    52de:	7f e2       	ldi	r23, 0x2F	; 47
    52e0:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    52e4:	81 e0       	ldi	r24, 0x01	; 1
    52e6:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <PM_HAL_adc_power>
    52ea:	2f ef       	ldi	r18, 0xFF	; 255
    52ec:	83 ec       	ldi	r24, 0xC3	; 195
    52ee:	99 e0       	ldi	r25, 0x09	; 9
    52f0:	21 50       	subi	r18, 0x01	; 1
    52f2:	80 40       	sbci	r24, 0x00	; 0
    52f4:	90 40       	sbci	r25, 0x00	; 0
    52f6:	e1 f7       	brne	.-8      	; 0x52f0 <ADC_init_sampling+0x2e>
    52f8:	00 c0       	rjmp	.+0      	; 0x52fa <ADC_init_sampling+0x38>
    52fa:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    52fc:	60 e0       	ldi	r22, 0x00	; 0
    52fe:	8d e4       	ldi	r24, 0x4D	; 77
    5300:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <TWI_HAL_start>
    5304:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    5306:	0e 94 cd 37 	call	0x6f9a	; 0x6f9a <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    530a:	cc 23       	and	r28, r28
    530c:	51 f0       	breq	.+20     	; 0x5322 <ADC_init_sampling+0x60>
		_data=NULL;
    530e:	10 92 ca 0e 	sts	0x0ECA, r1	; 0x800eca <_data+0x1>
    5312:	10 92 c9 0e 	sts	0x0EC9, r1	; 0x800ec9 <_data>
		_nSamples=0;
    5316:	10 92 cc 0e 	sts	0x0ECC, r1	; 0x800ecc <_nSamples+0x1>
    531a:	10 92 cb 0e 	sts	0x0ECB, r1	; 0x800ecb <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    531e:	82 e0       	ldi	r24, 0x02	; 2
    5320:	01 c0       	rjmp	.+2      	; 0x5324 <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    5322:	80 e0       	ldi	r24, 0x00	; 0
}
    5324:	cf 91       	pop	r28
    5326:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

00006ed0 <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    6ed0:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    6ed4:	80 e0       	ldi	r24, 0x00	; 0
    6ed6:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <PM_HAL_adc_power>
	_data=NULL;
    6eda:	10 92 ca 0e 	sts	0x0ECA, r1	; 0x800eca <_data+0x1>
    6ede:	10 92 c9 0e 	sts	0x0EC9, r1	; 0x800ec9 <_data>
    6ee2:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00006ca6 <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    6ca6:	40 91 c7 0e 	lds	r20, 0x0EC7	; 0x800ec7 <cntSamples>
    6caa:	50 91 c8 0e 	lds	r21, 0x0EC8	; 0x800ec8 <cntSamples+0x1>
    6cae:	20 91 cb 0e 	lds	r18, 0x0ECB	; 0x800ecb <_nSamples>
    6cb2:	30 91 cc 0e 	lds	r19, 0x0ECC	; 0x800ecc <_nSamples+0x1>
    6cb6:	81 e0       	ldi	r24, 0x01	; 1
    6cb8:	42 17       	cp	r20, r18
    6cba:	53 07       	cpc	r21, r19
    6cbc:	08 f4       	brcc	.+2      	; 0x6cc0 <ADC_is_sampling_done+0x1a>
    6cbe:	80 e0       	ldi	r24, 0x00	; 0
}
    6cc0:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00005666 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    5666:	0f 93       	push	r16
    5668:	1f 93       	push	r17
    566a:	cf 93       	push	r28
    566c:	df 93       	push	r29
    566e:	00 d0       	rcall	.+0      	; 0x5670 <ADC_get_value+0xa>
    5670:	cd b7       	in	r28, 0x3d	; 61
    5672:	de b7       	in	r29, 0x3e	; 62
    5674:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    5676:	8f ef       	ldi	r24, 0xFF	; 255
    5678:	9f ef       	ldi	r25, 0xFF	; 255
    567a:	f8 01       	movw	r30, r16
    567c:	91 83       	std	Z+1, r25	; 0x01
    567e:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    5680:	42 e0       	ldi	r20, 0x02	; 2
    5682:	be 01       	movw	r22, r28
    5684:	6f 5f       	subi	r22, 0xFF	; 255
    5686:	7f 4f       	sbci	r23, 0xFF	; 255
    5688:	8d e4       	ldi	r24, 0x4D	; 77
    568a:	0e 94 e5 32 	call	0x65ca	; 0x65ca <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    568e:	81 11       	cpse	r24, r1
    5690:	0d c0       	rjmp	.+26     	; 0x56ac <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    5692:	89 81       	ldd	r24, Y+1	; 0x01
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	98 2f       	mov	r25, r24
    5698:	88 27       	eor	r24, r24
    569a:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    569c:	82 2b       	or	r24, r18
    569e:	0e 94 c1 22 	call	0x4582	; 0x4582 <calc_ppm_methane>
    56a2:	f8 01       	movw	r30, r16
    56a4:	91 83       	std	Z+1, r25	; 0x01
    56a6:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    56a8:	80 e0       	ldi	r24, 0x00	; 0
    56aa:	01 c0       	rjmp	.+2      	; 0x56ae <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    56ac:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    56ae:	0f 90       	pop	r0
    56b0:	0f 90       	pop	r0
    56b2:	df 91       	pop	r29
    56b4:	cf 91       	pop	r28
    56b6:	1f 91       	pop	r17
    56b8:	0f 91       	pop	r16
    56ba:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00005e88 <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    5e88:	80 91 c9 0e 	lds	r24, 0x0EC9	; 0x800ec9 <_data>
    5e8c:	90 91 ca 0e 	lds	r25, 0x0ECA	; 0x800eca <_data+0x1>
    5e90:	20 91 c7 0e 	lds	r18, 0x0EC7	; 0x800ec7 <cntSamples>
    5e94:	30 91 c8 0e 	lds	r19, 0x0EC8	; 0x800ec8 <cntSamples+0x1>
    5e98:	a9 01       	movw	r20, r18
    5e9a:	4f 5f       	subi	r20, 0xFF	; 255
    5e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    5e9e:	50 93 c8 0e 	sts	0x0EC8, r21	; 0x800ec8 <cntSamples+0x1>
    5ea2:	40 93 c7 0e 	sts	0x0EC7, r20	; 0x800ec7 <cntSamples>
    5ea6:	22 0f       	add	r18, r18
    5ea8:	33 1f       	adc	r19, r19
    5eaa:	82 0f       	add	r24, r18
    5eac:	93 1f       	adc	r25, r19
    5eae:	0e 94 33 2b 	call	0x5666	; 0x5666 <ADC_get_value>
	if(cntSamples>=_nSamples){
    5eb2:	20 91 c7 0e 	lds	r18, 0x0EC7	; 0x800ec7 <cntSamples>
    5eb6:	30 91 c8 0e 	lds	r19, 0x0EC8	; 0x800ec8 <cntSamples+0x1>
    5eba:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <_nSamples>
    5ebe:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <_nSamples+0x1>
    5ec2:	28 17       	cp	r18, r24
    5ec4:	39 07       	cpc	r19, r25
    5ec6:	10 f0       	brcs	.+4      	; 0x5ecc <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    5ec8:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <TC0_HAL_stop>
    5ecc:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

000071fc <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    71fc:	0e 94 59 39 	call	0x72b2	; 0x72b2 <TC0_HAL_start>
	vect_ADC_do_sample();
    7200:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <vect_ADC_do_sample>
    7204:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00006bf2 <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    6bf2:	80 93 e4 0e 	sts	0x0EE4, r24	; 0x800ee4 <_powerUpTime>
	cntPowerUpTime=0;
    6bf6:	10 92 e3 0e 	sts	0x0EE3, r1	; 0x800ee3 <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    6bfa:	81 e0       	ldi	r24, 0x01	; 1
    6bfc:	0e 94 18 37 	call	0x6e30	; 0x6e30 <PM_HAL_meth_power>
	
	//Setup timer
	TC0_HAL_init(ADC_HEAT_TIME_INTERVAL, &vect_ADC_heat_timeout);
    6c00:	63 eb       	ldi	r22, 0xB3	; 179
    6c02:	76 e3       	ldi	r23, 0x36	; 54
    6c04:	8c e3       	ldi	r24, 0x3C	; 60
    6c06:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <TC0_HAL_init>
	TC0_HAL_start();
    6c0a:	0e 94 59 39 	call	0x72b2	; 0x72b2 <TC0_HAL_start>
    6c0e:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

0000726a <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    726a:	80 e0       	ldi	r24, 0x00	; 0
    726c:	0e 94 18 37 	call	0x6e30	; 0x6e30 <PM_HAL_meth_power>
    7270:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00006f0a <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    6f0a:	20 91 e3 0e 	lds	r18, 0x0EE3	; 0x800ee3 <cntPowerUpTime>
    6f0e:	90 91 e4 0e 	lds	r25, 0x0EE4	; 0x800ee4 <_powerUpTime>
    6f12:	81 e0       	ldi	r24, 0x01	; 1
    6f14:	29 17       	cp	r18, r25
    6f16:	08 f4       	brcc	.+2      	; 0x6f1a <ADC_meth_sens_ready+0x10>
    6f18:	80 e0       	ldi	r24, 0x00	; 0
}
    6f1a:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

00006068 <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    6068:	ef 92       	push	r14
    606a:	ff 92       	push	r15
    606c:	0f 93       	push	r16
    606e:	1f 93       	push	r17
	Vc=Vcc;
    6070:	60 93 a7 0e 	sts	0x0EA7, r22	; 0x800ea7 <Vc>
    6074:	70 93 a8 0e 	sts	0x0EA8, r23	; 0x800ea8 <Vc+0x1>
    6078:	80 93 a9 0e 	sts	0x0EA9, r24	; 0x800ea9 <Vc+0x2>
    607c:	90 93 aa 0e 	sts	0x0EAA, r25	; 0x800eaa <Vc+0x3>
	RRL=Rrl;
    6080:	20 93 a3 0e 	sts	0x0EA3, r18	; 0x800ea3 <RRL>
    6084:	30 93 a4 0e 	sts	0x0EA4, r19	; 0x800ea4 <RRL+0x1>
    6088:	40 93 a5 0e 	sts	0x0EA5, r20	; 0x800ea5 <RRL+0x2>
    608c:	50 93 a6 0e 	sts	0x0EA6, r21	; 0x800ea6 <RRL+0x3>
	PPM_factor=PPMfactor;
    6090:	e0 92 9f 0e 	sts	0x0E9F, r14	; 0x800e9f <PPM_factor>
    6094:	f0 92 a0 0e 	sts	0x0EA0, r15	; 0x800ea0 <PPM_factor+0x1>
    6098:	00 93 a1 0e 	sts	0x0EA1, r16	; 0x800ea1 <PPM_factor+0x2>
    609c:	10 93 a2 0e 	sts	0x0EA2, r17	; 0x800ea2 <PPM_factor+0x3>
}
    60a0:	1f 91       	pop	r17
    60a2:	0f 91       	pop	r16
    60a4:	ff 90       	pop	r15
    60a6:	ef 90       	pop	r14
    60a8:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00006dae <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    6dae:	60 e4       	ldi	r22, 0x40	; 64
    6db0:	70 e0       	ldi	r23, 0x00	; 0
    6db2:	80 e8       	ldi	r24, 0x80	; 128
    6db4:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <eeprom_read_byte>
    6db8:	91 e0       	ldi	r25, 0x01	; 1
    6dba:	81 11       	cpse	r24, r1
    6dbc:	01 c0       	rjmp	.+2      	; 0x6dc0 <EM_has_deveui+0x12>
    6dbe:	90 e0       	ldi	r25, 0x00	; 0
}
    6dc0:	89 2f       	mov	r24, r25
    6dc2:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00006dc4 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    6dc4:	61 e4       	ldi	r22, 0x41	; 65
    6dc6:	70 e0       	ldi	r23, 0x00	; 0
    6dc8:	80 e8       	ldi	r24, 0x80	; 128
    6dca:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <eeprom_read_byte>
    6dce:	91 e0       	ldi	r25, 0x01	; 1
    6dd0:	81 11       	cpse	r24, r1
    6dd2:	01 c0       	rjmp	.+2      	; 0x6dd6 <EM_has_appeui+0x12>
    6dd4:	90 e0       	ldi	r25, 0x00	; 0
}
    6dd6:	89 2f       	mov	r24, r25
    6dd8:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00006dda <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    6dda:	62 e4       	ldi	r22, 0x42	; 66
    6ddc:	70 e0       	ldi	r23, 0x00	; 0
    6dde:	80 e8       	ldi	r24, 0x80	; 128
    6de0:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <eeprom_read_byte>
    6de4:	91 e0       	ldi	r25, 0x01	; 1
    6de6:	81 11       	cpse	r24, r1
    6de8:	01 c0       	rjmp	.+2      	; 0x6dec <EM_has_appkey+0x12>
    6dea:	90 e0       	ldi	r25, 0x00	; 0
}
    6dec:	89 2f       	mov	r24, r25
    6dee:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

00006292 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6292:	cf 92       	push	r12
    6294:	df 92       	push	r13
    6296:	ef 92       	push	r14
    6298:	6b 01       	movw	r12, r22
    629a:	e8 2e       	mov	r14, r24
    629c:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    62a0:	40 97       	sbiw	r24, 0x10	; 16
    62a2:	79 f4       	brne	.+30     	; 0x62c2 <EM_set_deveui+0x30>
    62a4:	20 e1       	ldi	r18, 0x10	; 16
    62a6:	30 e0       	ldi	r19, 0x00	; 0
    62a8:	40 e0       	ldi	r20, 0x00	; 0
    62aa:	50 e0       	ldi	r21, 0x00	; 0
    62ac:	8e 2d       	mov	r24, r14
    62ae:	b6 01       	movw	r22, r12
    62b0:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <eeprom_update_block>
    62b4:	61 e0       	ldi	r22, 0x01	; 1
    62b6:	80 e4       	ldi	r24, 0x40	; 64
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	0e 94 42 35 	call	0x6a84	; 0x6a84 <eeprom_update_byte>
    62be:	81 e0       	ldi	r24, 0x01	; 1
    62c0:	01 c0       	rjmp	.+2      	; 0x62c4 <EM_set_deveui+0x32>
    62c2:	80 e0       	ldi	r24, 0x00	; 0
    62c4:	ef 90       	pop	r14
    62c6:	df 90       	pop	r13
    62c8:	cf 90       	pop	r12
    62ca:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

000066f4 <EM_get_deveui>:
    66f4:	0f 93       	push	r16
    66f6:	1f 93       	push	r17
    66f8:	cf 93       	push	r28
    66fa:	8c 01       	movw	r16, r24
    66fc:	0e 94 d7 36 	call	0x6dae	; 0x6dae <EM_has_deveui>
    6700:	c8 2f       	mov	r28, r24
    6702:	88 23       	and	r24, r24
    6704:	51 f0       	breq	.+20     	; 0x671a <EM_get_deveui+0x26>
    6706:	20 e1       	ldi	r18, 0x10	; 16
    6708:	30 e0       	ldi	r19, 0x00	; 0
    670a:	40 e0       	ldi	r20, 0x00	; 0
    670c:	50 e0       	ldi	r21, 0x00	; 0
    670e:	60 e0       	ldi	r22, 0x00	; 0
    6710:	c8 01       	movw	r24, r16
    6712:	0e 94 30 35 	call	0x6a60	; 0x6a60 <eeprom_read_block>
    6716:	f8 01       	movw	r30, r16
    6718:	10 8a       	std	Z+16, r1	; 0x10
    671a:	8c 2f       	mov	r24, r28
    671c:	cf 91       	pop	r28
    671e:	1f 91       	pop	r17
    6720:	0f 91       	pop	r16
    6722:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

000062cc <EM_set_appeui>:
    62cc:	cf 92       	push	r12
    62ce:	df 92       	push	r13
    62d0:	ef 92       	push	r14
    62d2:	6b 01       	movw	r12, r22
    62d4:	e8 2e       	mov	r14, r24
    62d6:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    62da:	40 97       	sbiw	r24, 0x10	; 16
    62dc:	79 f4       	brne	.+30     	; 0x62fc <EM_set_appeui+0x30>
    62de:	20 e1       	ldi	r18, 0x10	; 16
    62e0:	30 e0       	ldi	r19, 0x00	; 0
    62e2:	40 e1       	ldi	r20, 0x10	; 16
    62e4:	50 e0       	ldi	r21, 0x00	; 0
    62e6:	8e 2d       	mov	r24, r14
    62e8:	b6 01       	movw	r22, r12
    62ea:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <eeprom_update_block>
    62ee:	61 e0       	ldi	r22, 0x01	; 1
    62f0:	81 e4       	ldi	r24, 0x41	; 65
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	0e 94 42 35 	call	0x6a84	; 0x6a84 <eeprom_update_byte>
    62f8:	81 e0       	ldi	r24, 0x01	; 1
    62fa:	01 c0       	rjmp	.+2      	; 0x62fe <EM_set_appeui+0x32>
    62fc:	80 e0       	ldi	r24, 0x00	; 0
    62fe:	ef 90       	pop	r14
    6300:	df 90       	pop	r13
    6302:	cf 90       	pop	r12
    6304:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00006724 <EM_get_appeui>:
    6724:	0f 93       	push	r16
    6726:	1f 93       	push	r17
    6728:	cf 93       	push	r28
    672a:	8c 01       	movw	r16, r24
    672c:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <EM_has_appeui>
    6730:	c8 2f       	mov	r28, r24
    6732:	88 23       	and	r24, r24
    6734:	51 f0       	breq	.+20     	; 0x674a <EM_get_appeui+0x26>
    6736:	20 e1       	ldi	r18, 0x10	; 16
    6738:	30 e0       	ldi	r19, 0x00	; 0
    673a:	40 e1       	ldi	r20, 0x10	; 16
    673c:	50 e0       	ldi	r21, 0x00	; 0
    673e:	60 e0       	ldi	r22, 0x00	; 0
    6740:	c8 01       	movw	r24, r16
    6742:	0e 94 30 35 	call	0x6a60	; 0x6a60 <eeprom_read_block>
    6746:	f8 01       	movw	r30, r16
    6748:	10 8a       	std	Z+16, r1	; 0x10
    674a:	8c 2f       	mov	r24, r28
    674c:	cf 91       	pop	r28
    674e:	1f 91       	pop	r17
    6750:	0f 91       	pop	r16
    6752:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00006306 <EM_set_appkey>:
    6306:	cf 92       	push	r12
    6308:	df 92       	push	r13
    630a:	ef 92       	push	r14
    630c:	6b 01       	movw	r12, r22
    630e:	e8 2e       	mov	r14, r24
    6310:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    6314:	80 97       	sbiw	r24, 0x20	; 32
    6316:	79 f4       	brne	.+30     	; 0x6336 <EM_set_appkey+0x30>
    6318:	20 e2       	ldi	r18, 0x20	; 32
    631a:	30 e0       	ldi	r19, 0x00	; 0
    631c:	40 e2       	ldi	r20, 0x20	; 32
    631e:	50 e0       	ldi	r21, 0x00	; 0
    6320:	8e 2d       	mov	r24, r14
    6322:	b6 01       	movw	r22, r12
    6324:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <eeprom_update_block>
    6328:	61 e0       	ldi	r22, 0x01	; 1
    632a:	82 e4       	ldi	r24, 0x42	; 66
    632c:	90 e0       	ldi	r25, 0x00	; 0
    632e:	0e 94 42 35 	call	0x6a84	; 0x6a84 <eeprom_update_byte>
    6332:	81 e0       	ldi	r24, 0x01	; 1
    6334:	01 c0       	rjmp	.+2      	; 0x6338 <EM_set_appkey+0x32>
    6336:	80 e0       	ldi	r24, 0x00	; 0
    6338:	ef 90       	pop	r14
    633a:	df 90       	pop	r13
    633c:	cf 90       	pop	r12
    633e:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00006754 <EM_get_appkey>:
    6754:	0f 93       	push	r16
    6756:	1f 93       	push	r17
    6758:	cf 93       	push	r28
    675a:	8c 01       	movw	r16, r24
    675c:	0e 94 ed 36 	call	0x6dda	; 0x6dda <EM_has_appkey>
    6760:	c8 2f       	mov	r28, r24
    6762:	88 23       	and	r24, r24
    6764:	51 f0       	breq	.+20     	; 0x677a <EM_get_appkey+0x26>
    6766:	20 e2       	ldi	r18, 0x20	; 32
    6768:	30 e0       	ldi	r19, 0x00	; 0
    676a:	40 e2       	ldi	r20, 0x20	; 32
    676c:	50 e0       	ldi	r21, 0x00	; 0
    676e:	60 e0       	ldi	r22, 0x00	; 0
    6770:	c8 01       	movw	r24, r16
    6772:	0e 94 30 35 	call	0x6a60	; 0x6a60 <eeprom_read_block>
    6776:	f8 01       	movw	r30, r16
    6778:	10 a2       	std	Z+32, r1	; 0x20
    677a:	8c 2f       	mov	r24, r28
    677c:	cf 91       	pop	r28
    677e:	1f 91       	pop	r17
    6780:	0f 91       	pop	r16
    6782:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00007056 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    7056:	ab 01       	movw	r20, r22
    7058:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    705a:	83 e4       	ldi	r24, 0x43	; 67
    705c:	90 e0       	ldi	r25, 0x00	; 0
    705e:	0e 94 cb 36 	call	0x6d96	; 0x6d96 <eeprom_update_dword>
    7062:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00006c10 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6c10:	cf 93       	push	r28
    6c12:	df 93       	push	r29
    6c14:	ec 01       	movw	r28, r24
    6c16:	63 e4       	ldi	r22, 0x43	; 67
    6c18:	70 e0       	ldi	r23, 0x00	; 0
    6c1a:	80 e0       	ldi	r24, 0x00	; 0
    6c1c:	0e 94 71 38 	call	0x70e2	; 0x70e2 <eeprom_read_dword>
    6c20:	68 83       	st	Y, r22
    6c22:	79 83       	std	Y+1, r23	; 0x01
    6c24:	8a 83       	std	Y+2, r24	; 0x02
    6c26:	9b 83       	std	Y+3, r25	; 0x03
    6c28:	df 91       	pop	r29
    6c2a:	cf 91       	pop	r28
    6c2c:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00007064 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    7064:	ab 01       	movw	r20, r22
    7066:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    7068:	87 e4       	ldi	r24, 0x47	; 71
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	0e 94 cb 36 	call	0x6d96	; 0x6d96 <eeprom_update_dword>
    7070:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00006c2e <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6c2e:	cf 93       	push	r28
    6c30:	df 93       	push	r29
    6c32:	ec 01       	movw	r28, r24
    6c34:	67 e4       	ldi	r22, 0x47	; 71
    6c36:	70 e0       	ldi	r23, 0x00	; 0
    6c38:	80 e0       	ldi	r24, 0x00	; 0
    6c3a:	0e 94 71 38 	call	0x70e2	; 0x70e2 <eeprom_read_dword>
    6c3e:	68 83       	st	Y, r22
    6c40:	79 83       	std	Y+1, r23	; 0x01
    6c42:	8a 83       	std	Y+2, r24	; 0x02
    6c44:	9b 83       	std	Y+3, r25	; 0x03
    6c46:	df 91       	pop	r29
    6c48:	cf 91       	pop	r28
    6c4a:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00007072 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    7072:	ab 01       	movw	r20, r22
    7074:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    7076:	8b e4       	ldi	r24, 0x4B	; 75
    7078:	90 e0       	ldi	r25, 0x00	; 0
    707a:	0e 94 cb 36 	call	0x6d96	; 0x6d96 <eeprom_update_dword>
    707e:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00006c4c <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6c4c:	cf 93       	push	r28
    6c4e:	df 93       	push	r29
    6c50:	ec 01       	movw	r28, r24
    6c52:	6b e4       	ldi	r22, 0x4B	; 75
    6c54:	70 e0       	ldi	r23, 0x00	; 0
    6c56:	80 e0       	ldi	r24, 0x00	; 0
    6c58:	0e 94 71 38 	call	0x70e2	; 0x70e2 <eeprom_read_dword>
    6c5c:	68 83       	st	Y, r22
    6c5e:	79 83       	std	Y+1, r23	; 0x01
    6c60:	8a 83       	std	Y+2, r24	; 0x02
    6c62:	9b 83       	std	Y+3, r25	; 0x03
    6c64:	df 91       	pop	r29
    6c66:	cf 91       	pop	r28
    6c68:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00007080 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    7080:	24 2f       	mov	r18, r20
    7082:	30 e0       	ldi	r19, 0x00	; 0
    7084:	44 e6       	ldi	r20, 0x64	; 100
    7086:	50 e0       	ldi	r21, 0x00	; 0
    7088:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <eeprom_update_block>
    708c:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00006faa <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    6faa:	26 2f       	mov	r18, r22
    6fac:	30 e0       	ldi	r19, 0x00	; 0
    6fae:	44 e6       	ldi	r20, 0x64	; 100
    6fb0:	50 e0       	ldi	r21, 0x00	; 0
    6fb2:	60 e0       	ldi	r22, 0x00	; 0
    6fb4:	0e 94 30 35 	call	0x6a60	; 0x6a60 <eeprom_read_block>
    6fb8:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

00007116 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    7116:	68 2f       	mov	r22, r24
    7118:	8f e4       	ldi	r24, 0x4F	; 79
    711a:	90 e0       	ldi	r25, 0x00	; 0
    711c:	0e 94 42 35 	call	0x6a84	; 0x6a84 <eeprom_update_byte>
    7120:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

00007122 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    7122:	6f e4       	ldi	r22, 0x4F	; 79
    7124:	70 e0       	ldi	r23, 0x00	; 0
    7126:	80 e0       	ldi	r24, 0x00	; 0
    7128:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <eeprom_read_byte>
}
    712c:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

0000712e <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    712e:	bc 01       	movw	r22, r24
    7130:	80 e5       	ldi	r24, 0x50	; 80
    7132:	90 e0       	ldi	r25, 0x00	; 0
    7134:	0e 94 df 38 	call	0x71be	; 0x71be <eeprom_update_word>
    7138:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

0000713a <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    713a:	60 e5       	ldi	r22, 0x50	; 80
    713c:	70 e0       	ldi	r23, 0x00	; 0
    713e:	80 e0       	ldi	r24, 0x00	; 0
    7140:	0e 94 78 38 	call	0x70f0	; 0x70f0 <eeprom_read_word>
}
    7144:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

00007146 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    7146:	68 2f       	mov	r22, r24
    7148:	82 e5       	ldi	r24, 0x52	; 82
    714a:	90 e0       	ldi	r25, 0x00	; 0
    714c:	0e 94 42 35 	call	0x6a84	; 0x6a84 <eeprom_update_byte>
    7150:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

00007152 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    7152:	62 e5       	ldi	r22, 0x52	; 82
    7154:	70 e0       	ldi	r23, 0x00	; 0
    7156:	80 e0       	ldi	r24, 0x00	; 0
    7158:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <eeprom_read_byte>
}
    715c:	08 95       	ret

Disassembly of section .text.EM_set_group_id:

0000715e <EM_set_group_id>:

void EM_set_group_id(uint8_t groupId){
	eeprom_update_byte((uint8_t *) EEPROM_GROUP_ID_ADDR, groupId);
    715e:	68 2f       	mov	r22, r24
    7160:	83 e6       	ldi	r24, 0x63	; 99
    7162:	90 e0       	ldi	r25, 0x00	; 0
    7164:	0e 94 42 35 	call	0x6a84	; 0x6a84 <eeprom_update_byte>
    7168:	08 95       	ret

Disassembly of section .text.EM_get_group_id:

0000716a <EM_get_group_id>:
}

uint8_t EM_get_group_id(){
	return eeprom_read_byte((const uint8_t *) EEPROM_GROUP_ID_ADDR);
    716a:	63 e6       	ldi	r22, 0x63	; 99
    716c:	70 e0       	ldi	r23, 0x00	; 0
    716e:	80 e0       	ldi	r24, 0x00	; 0
    7170:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <eeprom_read_byte>
    7174:	08 95       	ret

Disassembly of section .text.cb_blink:

000072be <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    72be:	0e 94 21 39 	call	0x7242	; 0x7242 <PM_HAL_LED_toggle>
    72c2:	08 95       	ret

Disassembly of section .text.blink:

00005a7e <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    5a7e:	cf 93       	push	r28
    5a80:	df 93       	push	r29
    5a82:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    5a84:	c0 e0       	ldi	r28, 0x00	; 0
    5a86:	19 c0       	rjmp	.+50     	; 0x5aba <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    5a88:	80 e0       	ldi	r24, 0x00	; 0
    5a8a:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <PM_HAL_LED_power>
    5a8e:	2f ef       	ldi	r18, 0xFF	; 255
    5a90:	82 e5       	ldi	r24, 0x52	; 82
    5a92:	97 e0       	ldi	r25, 0x07	; 7
    5a94:	21 50       	subi	r18, 0x01	; 1
    5a96:	80 40       	sbci	r24, 0x00	; 0
    5a98:	90 40       	sbci	r25, 0x00	; 0
    5a9a:	e1 f7       	brne	.-8      	; 0x5a94 <blink+0x16>
    5a9c:	00 c0       	rjmp	.+0      	; 0x5a9e <blink+0x20>
    5a9e:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    5aa0:	81 e0       	ldi	r24, 0x01	; 1
    5aa2:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <PM_HAL_LED_power>
    5aa6:	2f ef       	ldi	r18, 0xFF	; 255
    5aa8:	82 e5       	ldi	r24, 0x52	; 82
    5aaa:	97 e0       	ldi	r25, 0x07	; 7
    5aac:	21 50       	subi	r18, 0x01	; 1
    5aae:	80 40       	sbci	r24, 0x00	; 0
    5ab0:	90 40       	sbci	r25, 0x00	; 0
    5ab2:	e1 f7       	brne	.-8      	; 0x5aac <blink+0x2e>
    5ab4:	00 c0       	rjmp	.+0      	; 0x5ab6 <blink+0x38>
    5ab6:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    5ab8:	cf 5f       	subi	r28, 0xFF	; 255
    5aba:	cd 17       	cp	r28, r29
    5abc:	28 f3       	brcs	.-54     	; 0x5a88 <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    5abe:	80 e0       	ldi	r24, 0x00	; 0
    5ac0:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <PM_HAL_LED_power>
}
    5ac4:	df 91       	pop	r29
    5ac6:	cf 91       	pop	r28
    5ac8:	08 95       	ret

Disassembly of section .text.err_code:

00006340 <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    6340:	cf 93       	push	r28
    6342:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    6344:	81 e0       	ldi	r24, 0x01	; 1
    6346:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <PM_HAL_LED_power>
    634a:	2f ef       	ldi	r18, 0xFF	; 255
    634c:	83 ed       	ldi	r24, 0xD3	; 211
    634e:	90 e3       	ldi	r25, 0x30	; 48
    6350:	21 50       	subi	r18, 0x01	; 1
    6352:	80 40       	sbci	r24, 0x00	; 0
    6354:	90 40       	sbci	r25, 0x00	; 0
    6356:	e1 f7       	brne	.-8      	; 0x6350 <err_code+0x10>
    6358:	00 c0       	rjmp	.+0      	; 0x635a <err_code+0x1a>
    635a:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    635c:	8c 2f       	mov	r24, r28
    635e:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <blink>
    6362:	2f ef       	ldi	r18, 0xFF	; 255
    6364:	89 e6       	ldi	r24, 0x69	; 105
    6366:	98 e1       	ldi	r25, 0x18	; 24
    6368:	21 50       	subi	r18, 0x01	; 1
    636a:	80 40       	sbci	r24, 0x00	; 0
    636c:	90 40       	sbci	r25, 0x00	; 0
    636e:	e1 f7       	brne	.-8      	; 0x6368 <err_code+0x28>
    6370:	00 c0       	rjmp	.+0      	; 0x6372 <err_code+0x32>
    6372:	00 00       	nop
	_delay_ms(1000);
}
    6374:	cf 91       	pop	r28
    6376:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

0000708e <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    708e:	8f e5       	ldi	r24, 0x5F	; 95
    7090:	99 e3       	ldi	r25, 0x39	; 57
    7092:	0e 94 89 2b 	call	0x5712	; 0x5712 <TC2_HAL_subscribe>
    7096:	80 93 e5 0e 	sts	0x0EE5, r24	; 0x800ee5 <cbPointer>
    709a:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

00006fba <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    6fba:	80 91 e5 0e 	lds	r24, 0x0EE5	; 0x800ee5 <cbPointer>
    6fbe:	0e 94 0f 31 	call	0x621e	; 0x621e <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    6fc2:	80 e0       	ldi	r24, 0x00	; 0
    6fc4:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <PM_HAL_LED_power>
    6fc8:	08 95       	ret

Disassembly of section .text.LED_join_success:

000060ec <LED_join_success>:
}

void LED_join_success(){
    60ec:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    60ee:	c0 e0       	ldi	r28, 0x00	; 0
    60f0:	19 c0       	rjmp	.+50     	; 0x6124 <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    60f2:	81 e0       	ldi	r24, 0x01	; 1
    60f4:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <PM_HAL_LED_power>
    60f8:	2f ef       	ldi	r18, 0xFF	; 255
    60fa:	80 e7       	ldi	r24, 0x70	; 112
    60fc:	92 e0       	ldi	r25, 0x02	; 2
    60fe:	21 50       	subi	r18, 0x01	; 1
    6100:	80 40       	sbci	r24, 0x00	; 0
    6102:	90 40       	sbci	r25, 0x00	; 0
    6104:	e1 f7       	brne	.-8      	; 0x60fe <LED_join_success+0x12>
    6106:	00 c0       	rjmp	.+0      	; 0x6108 <LED_join_success+0x1c>
    6108:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    610a:	80 e0       	ldi	r24, 0x00	; 0
    610c:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <PM_HAL_LED_power>
    6110:	2f ef       	ldi	r18, 0xFF	; 255
    6112:	80 e7       	ldi	r24, 0x70	; 112
    6114:	92 e0       	ldi	r25, 0x02	; 2
    6116:	21 50       	subi	r18, 0x01	; 1
    6118:	80 40       	sbci	r24, 0x00	; 0
    611a:	90 40       	sbci	r25, 0x00	; 0
    611c:	e1 f7       	brne	.-8      	; 0x6116 <LED_join_success+0x2a>
    611e:	00 c0       	rjmp	.+0      	; 0x6120 <LED_join_success+0x34>
    6120:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    6122:	cf 5f       	subi	r28, 0xFF	; 255
    6124:	ca 30       	cpi	r28, 0x0A	; 10
    6126:	28 f3       	brcs	.-54     	; 0x60f2 <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    6128:	cf 91       	pop	r28
    612a:	08 95       	ret

Disassembly of section .text.LED_join_denied:

00007272 <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    7272:	83 e0       	ldi	r24, 0x03	; 3
    7274:	0e 94 a0 31 	call	0x6340	; 0x6340 <err_code>
    7278:	08 95       	ret

Disassembly of section .text.LED_conf_err:

0000727a <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    727a:	85 e0       	ldi	r24, 0x05	; 5
    727c:	0e 94 a0 31 	call	0x6340	; 0x6340 <err_code>
    7280:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

00007282 <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    7282:	87 e0       	ldi	r24, 0x07	; 7
    7284:	0e 94 a0 31 	call	0x6340	; 0x6340 <err_code>
    7288:	08 95       	ret

Disassembly of section .text.parse_err:

000055b6 <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    55b6:	cf 92       	push	r12
    55b8:	df 92       	push	r13
    55ba:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    55bc:	6c 01       	movw	r12, r24
    55be:	20 e8       	ldi	r18, 0x80	; 128
    55c0:	e2 2e       	mov	r14, r18
    55c2:	2f e5       	ldi	r18, 0x5F	; 95
    55c4:	39 e0       	ldi	r19, 0x09	; 9
    55c6:	40 e0       	ldi	r20, 0x00	; 0
    55c8:	8e 2d       	mov	r24, r14
    55ca:	b6 01       	movw	r22, r12
    55cc:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    55d0:	89 2b       	or	r24, r25
    55d2:	a1 f0       	breq	.+40     	; 0x55fc <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    55d4:	2a e6       	ldi	r18, 0x6A	; 106
    55d6:	39 e0       	ldi	r19, 0x09	; 9
    55d8:	40 e0       	ldi	r20, 0x00	; 0
    55da:	8e 2d       	mov	r24, r14
    55dc:	b6 01       	movw	r22, r12
    55de:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    55e2:	89 2b       	or	r24, r25
    55e4:	69 f0       	breq	.+26     	; 0x5600 <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    55e6:	21 e7       	ldi	r18, 0x71	; 113
    55e8:	39 e0       	ldi	r19, 0x09	; 9
    55ea:	40 e0       	ldi	r20, 0x00	; 0
    55ec:	8e 2d       	mov	r24, r14
    55ee:	b6 01       	movw	r22, r12
    55f0:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    55f4:	89 2b       	or	r24, r25
    55f6:	31 f4       	brne	.+12     	; 0x5604 <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    55f8:	83 e0       	ldi	r24, 0x03	; 3
    55fa:	05 c0       	rjmp	.+10     	; 0x5606 <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    55fc:	82 e0       	ldi	r24, 0x02	; 2
    55fe:	03 c0       	rjmp	.+6      	; 0x5606 <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    5600:	82 e0       	ldi	r24, 0x02	; 2
    5602:	01 c0       	rjmp	.+2      	; 0x5606 <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    5604:	81 e0       	ldi	r24, 0x01	; 1
}
    5606:	ef 90       	pop	r14
    5608:	df 90       	pop	r13
    560a:	cf 90       	pop	r12
    560c:	08 95       	ret

Disassembly of section .text.JN_join_network:

00001aea <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
    1aea:	af 92       	push	r10
    1aec:	bf 92       	push	r11
    1aee:	cf 92       	push	r12
    1af0:	df 92       	push	r13
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	28 97       	sbiw	r28, 0x08	; 8
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	5c 01       	movw	r10, r24
    1b0e:	6b 01       	movw	r12, r22
    1b10:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
    1b12:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    1b14:	e1 2f       	mov	r30, r17
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	ed 30       	cpi	r30, 0x0D	; 13
    1b1a:	f1 05       	cpc	r31, r1
    1b1c:	d8 f7       	brcc	.-10     	; 0x1b14 <JN_join_network+0x2a>
    1b1e:	e2 5c       	subi	r30, 0xC2	; 194
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	0c 94 d9 38 	jmp	0x71b2	; 0x71b2 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
    1b26:	0e 94 29 39 	call	0x7252	; 0x7252 <rn2483_reset_active>
    1b2a:	2f ef       	ldi	r18, 0xFF	; 255
    1b2c:	89 e6       	ldi	r24, 0x69	; 105
    1b2e:	98 e1       	ldi	r25, 0x18	; 24
    1b30:	21 50       	subi	r18, 0x01	; 1
    1b32:	80 40       	sbci	r24, 0x00	; 0
    1b34:	90 40       	sbci	r25, 0x00	; 0
    1b36:	e1 f7       	brne	.-8      	; 0x1b30 <JN_join_network+0x46>
    1b38:	00 c0       	rjmp	.+0      	; 0x1b3a <JN_join_network+0x50>
    1b3a:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
    1b3c:	0e 94 2d 39 	call	0x725a	; 0x725a <rn2483_reset_deactive>
				
				util_set_pending_states(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
    1b40:	4c e0       	ldi	r20, 0x0C	; 12
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	ce 01       	movw	r24, r28
    1b4a:	01 96       	adiw	r24, 0x01	; 1
    1b4c:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_BEGINS_WITH, RN2483);
    1b50:	2f e7       	ldi	r18, 0x7F	; 127
    1b52:	39 e0       	ldi	r19, 0x09	; 9
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	ce 01       	movw	r24, r28
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				
				state=JN_WAIT_FOR_INCOMMING;
    1b60:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1b62:	d8 cf       	rjmp	.-80     	; 0x1b14 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
    1b64:	46 e8       	ldi	r20, 0x86	; 134
    1b66:	59 e0       	ldi	r21, 0x09	; 9
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	80 e9       	ldi	r24, 0x90	; 144
    1b6c:	92 e0       	ldi	r25, 0x02	; 2
    1b6e:	0e 94 fe 32 	call	0x65fc	; 0x65fc <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1b72:	60 e9       	ldi	r22, 0x90	; 144
    1b74:	72 e0       	ldi	r23, 0x02	; 2
    1b76:	80 e8       	ldi	r24, 0x80	; 128
    1b78:	0e 94 75 24 	call	0x48ea	; 0x48ea <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
    1b7c:	4c e0       	ldi	r20, 0x0C	; 12
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	63 e0       	ldi	r22, 0x03	; 3
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	ce 01       	movw	r24, r28
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1b8c:	24 e9       	ldi	r18, 0x94	; 148
    1b8e:	39 e0       	ldi	r19, 0x09	; 9
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	ce 01       	movw	r24, r28
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1b9c:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1b9e:	ba cf       	rjmp	.-140    	; 0x1b14 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
    1ba0:	b5 01       	movw	r22, r10
    1ba2:	80 e9       	ldi	r24, 0x90	; 144
    1ba4:	92 e0       	ldi	r25, 0x02	; 2
    1ba6:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <mac_set_deveui>
				attach_ending(lm_msg);
    1baa:	80 e9       	ldi	r24, 0x90	; 144
    1bac:	92 e0       	ldi	r25, 0x02	; 2
    1bae:	0e 94 6f 36 	call	0x6cde	; 0x6cde <attach_ending>
				uart0_hal_send_string(lm_msg);
    1bb2:	60 e9       	ldi	r22, 0x90	; 144
    1bb4:	72 e0       	ldi	r23, 0x02	; 2
    1bb6:	80 e8       	ldi	r24, 0x80	; 128
    1bb8:	0e 94 75 24 	call	0x48ea	; 0x48ea <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
    1bbc:	4c e0       	ldi	r20, 0x0C	; 12
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	64 e0       	ldi	r22, 0x04	; 4
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1bcc:	24 e9       	ldi	r18, 0x94	; 148
    1bce:	39 e0       	ldi	r19, 0x09	; 9
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1bdc:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1bde:	9a cf       	rjmp	.-204    	; 0x1b14 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
    1be0:	b7 01       	movw	r22, r14
    1be2:	80 e9       	ldi	r24, 0x90	; 144
    1be4:	92 e0       	ldi	r25, 0x02	; 2
    1be6:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <mac_set_appkey>
				attach_ending(lm_msg);
    1bea:	80 e9       	ldi	r24, 0x90	; 144
    1bec:	92 e0       	ldi	r25, 0x02	; 2
    1bee:	0e 94 6f 36 	call	0x6cde	; 0x6cde <attach_ending>
				uart0_hal_send_string(lm_msg);
    1bf2:	60 e9       	ldi	r22, 0x90	; 144
    1bf4:	72 e0       	ldi	r23, 0x02	; 2
    1bf6:	80 e8       	ldi	r24, 0x80	; 128
    1bf8:	0e 94 75 24 	call	0x48ea	; 0x48ea <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
    1bfc:	4c e0       	ldi	r20, 0x0C	; 12
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	65 e0       	ldi	r22, 0x05	; 5
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	ce 01       	movw	r24, r28
    1c06:	01 96       	adiw	r24, 0x01	; 1
    1c08:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1c0c:	24 e9       	ldi	r18, 0x94	; 148
    1c0e:	39 e0       	ldi	r19, 0x09	; 9
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	ce 01       	movw	r24, r28
    1c16:	01 96       	adiw	r24, 0x01	; 1
    1c18:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1c1c:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1c1e:	7a cf       	rjmp	.-268    	; 0x1b14 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
    1c20:	b6 01       	movw	r22, r12
    1c22:	80 e9       	ldi	r24, 0x90	; 144
    1c24:	92 e0       	ldi	r25, 0x02	; 2
    1c26:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <mac_set_appeui>
				attach_ending(lm_msg);
    1c2a:	80 e9       	ldi	r24, 0x90	; 144
    1c2c:	92 e0       	ldi	r25, 0x02	; 2
    1c2e:	0e 94 6f 36 	call	0x6cde	; 0x6cde <attach_ending>
				uart0_hal_send_string(lm_msg);
    1c32:	60 e9       	ldi	r22, 0x90	; 144
    1c34:	72 e0       	ldi	r23, 0x02	; 2
    1c36:	80 e8       	ldi	r24, 0x80	; 128
    1c38:	0e 94 75 24 	call	0x48ea	; 0x48ea <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
    1c3c:	4c e0       	ldi	r20, 0x0C	; 12
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	66 e0       	ldi	r22, 0x06	; 6
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	ce 01       	movw	r24, r28
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1c4c:	24 e9       	ldi	r18, 0x94	; 148
    1c4e:	39 e0       	ldi	r19, 0x09	; 9
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	ce 01       	movw	r24, r28
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1c5c:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1c5e:	5a cf       	rjmp	.-332    	; 0x1b14 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	80 e9       	ldi	r24, 0x90	; 144
    1c64:	92 e0       	ldi	r25, 0x02	; 2
    1c66:	0e 94 c2 33 	call	0x6784	; 0x6784 <mac_set_ADR>
				attach_ending(lm_msg);
    1c6a:	80 e9       	ldi	r24, 0x90	; 144
    1c6c:	92 e0       	ldi	r25, 0x02	; 2
    1c6e:	0e 94 6f 36 	call	0x6cde	; 0x6cde <attach_ending>
				uart0_hal_send_string(lm_msg);
    1c72:	60 e9       	ldi	r22, 0x90	; 144
    1c74:	72 e0       	ldi	r23, 0x02	; 2
    1c76:	80 e8       	ldi	r24, 0x80	; 128
    1c78:	0e 94 75 24 	call	0x48ea	; 0x48ea <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
    1c7c:	4c e0       	ldi	r20, 0x0C	; 12
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	67 e0       	ldi	r22, 0x07	; 7
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	ce 01       	movw	r24, r28
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1c8c:	24 e9       	ldi	r18, 0x94	; 148
    1c8e:	39 e0       	ldi	r19, 0x09	; 9
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	ce 01       	movw	r24, r28
    1c96:	01 96       	adiw	r24, 0x01	; 1
    1c98:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1c9c:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1c9e:	3a cf       	rjmp	.-396    	; 0x1b14 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
    1ca0:	47 e9       	ldi	r20, 0x97	; 151
    1ca2:	59 e0       	ldi	r21, 0x09	; 9
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	80 e9       	ldi	r24, 0x90	; 144
    1ca8:	92 e0       	ldi	r25, 0x02	; 2
    1caa:	0e 94 fe 32 	call	0x65fc	; 0x65fc <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1cae:	60 e9       	ldi	r22, 0x90	; 144
    1cb0:	72 e0       	ldi	r23, 0x02	; 2
    1cb2:	80 e8       	ldi	r24, 0x80	; 128
    1cb4:	0e 94 75 24 	call	0x48ea	; 0x48ea <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    1cb8:	4c e0       	ldi	r20, 0x0C	; 12
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	68 e0       	ldi	r22, 0x08	; 8
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1cc8:	24 e9       	ldi	r18, 0x94	; 148
    1cca:	39 e0       	ldi	r19, 0x09	; 9
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1cd8:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1cda:	1c cf       	rjmp	.-456    	; 0x1b14 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    1cdc:	40 ea       	ldi	r20, 0xA0	; 160
    1cde:	59 e0       	ldi	r21, 0x09	; 9
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	80 e9       	ldi	r24, 0x90	; 144
    1ce4:	92 e0       	ldi	r25, 0x02	; 2
    1ce6:	0e 94 fe 32 	call	0x65fc	; 0x65fc <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1cea:	60 e9       	ldi	r22, 0x90	; 144
    1cec:	72 e0       	ldi	r23, 0x02	; 2
    1cee:	80 e8       	ldi	r24, 0x80	; 128
    1cf0:	0e 94 75 24 	call	0x48ea	; 0x48ea <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    1cf4:	4a e0       	ldi	r20, 0x0A	; 10
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	69 e0       	ldi	r22, 0x09	; 9
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1d04:	24 e9       	ldi	r18, 0x94	; 148
    1d06:	39 e0       	ldi	r19, 0x09	; 9
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1d14:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1d16:	fe ce       	rjmp	.-516    	; 0x1b14 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_set_pending_states(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    1d18:	4a e0       	ldi	r20, 0x0A	; 10
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	6b e0       	ldi	r22, 0x0B	; 11
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	ce 01       	movw	r24, r28
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, ACCEPTED);
    1d28:	2e ea       	ldi	r18, 0xAE	; 174
    1d2a:	39 e0       	ldi	r19, 0x09	; 9
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	ce 01       	movw	r24, r28
    1d32:	01 96       	adiw	r24, 0x01	; 1
    1d34:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1d38:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1d3a:	ec ce       	rjmp	.-552    	; 0x1b14 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
    1d3c:	80 e9       	ldi	r24, 0x90	; 144
    1d3e:	92 e0       	ldi	r25, 0x02	; 2
    1d40:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <parse_err>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <JN_join_network+0x284>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    1d46:	0e 94 0f 38 	call	0x701e	; 0x701e <uart0_hal_message_ready>
    1d4a:	88 23       	and	r24, r24
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <JN_join_network+0x266>
    1d4e:	e2 ce       	rjmp	.-572    	; 0x1b14 <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
    1d50:	80 e9       	ldi	r24, 0x90	; 144
    1d52:	92 e0       	ldi	r25, 0x02	; 2
    1d54:	0e 94 a9 34 	call	0x6952	; 0x6952 <uart0_hal_read_message_as_str>
					state=util_match_message(&stateData, lm_msg);
    1d58:	60 e9       	ldi	r22, 0x90	; 144
    1d5a:	72 e0       	ldi	r23, 0x02	; 2
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <util_match_message>
    1d64:	18 2f       	mov	r17, r24
    1d66:	d6 ce       	rjmp	.-596    	; 0x1b14 <JN_join_network+0x2a>
				util_set_match_case(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <JN_join_network+0x284>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    1d6e:	28 96       	adiw	r28, 0x08	; 8
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	1f 91       	pop	r17
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	df 90       	pop	r13
    1d86:	cf 90       	pop	r12
    1d88:	bf 90       	pop	r11
    1d8a:	af 90       	pop	r10
    1d8c:	08 95       	ret

Disassembly of section .text.set_block_uplink:

00006d7e <set_block_uplink>:
	util_send_break();
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    6d7e:	81 e6       	ldi	r24, 0x61	; 97
    6d80:	96 e3       	ldi	r25, 0x36	; 54
    6d82:	0e 94 89 2b 	call	0x5712	; 0x5712 <TC2_HAL_subscribe>
    6d86:	80 93 e6 0e 	sts	0x0EE6, r24	; 0x800ee6 <subPointer>
	busy=true;
    6d8a:	81 e0       	ldi	r24, 0x01	; 1
    6d8c:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <busy>
	cnt=0;
    6d90:	10 92 e8 0e 	sts	0x0EE8, r1	; 0x800ee8 <cnt>
    6d94:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

00006cc2 <cb_block_uplink>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void cb_block_uplink(){
	cnt++;
    6cc2:	80 91 e8 0e 	lds	r24, 0x0EE8	; 0x800ee8 <cnt>
    6cc6:	8f 5f       	subi	r24, 0xFF	; 255
    6cc8:	80 93 e8 0e 	sts	0x0EE8, r24	; 0x800ee8 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    6ccc:	8d 33       	cpi	r24, 0x3D	; 61
    6cce:	30 f0       	brcs	.+12     	; 0x6cdc <cb_block_uplink+0x1a>
		busy=false;
    6cd0:	10 92 e7 0e 	sts	0x0EE7, r1	; 0x800ee7 <busy>
		TC2_HAL_cancel(subPointer);
    6cd4:	80 91 e6 0e 	lds	r24, 0x0EE6	; 0x800ee6 <subPointer>
    6cd8:	0e 94 0f 31 	call	0x621e	; 0x621e <TC2_HAL_cancel>
    6cdc:	08 95       	ret

Disassembly of section .text.LM_join_network:

000072c4 <LM_join_network>:
static void cb_block_uplink();
static void set_block_uplink();


LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    72c4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <JN_join_network>
}
    72c8:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

000068d0 <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    68d0:	cf 93       	push	r28
    68d2:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    68d4:	90 91 e7 0e 	lds	r25, 0x0EE7	; 0x800ee7 <busy>
    68d8:	91 11       	cpse	r25, r1
    68da:	0c c0       	rjmp	.+24     	; 0x68f4 <LM_send_uplink+0x24>
    68dc:	46 2f       	mov	r20, r22
    68de:	b9 01       	movw	r22, r18
	LM_STATUS status=SU_send_uplink(LORA_PORT, data, length);
    68e0:	84 e6       	ldi	r24, 0x64	; 100
    68e2:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <SU_send_uplink>
    68e6:	c8 2f       	mov	r28, r24
	//Don't block if invalid length - no package was sent!
	if(status!=LM_STATUS_INV_DATA_LEN){
    68e8:	85 30       	cpi	r24, 0x05	; 5
    68ea:	31 f0       	breq	.+12     	; 0x68f8 <LM_send_uplink+0x28>
		set_block_uplink();
    68ec:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <set_block_uplink>
	}
	return status;
    68f0:	8c 2f       	mov	r24, r28
    68f2:	02 c0       	rjmp	.+4      	; 0x68f8 <LM_send_uplink+0x28>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    68f4:	82 e0       	ldi	r24, 0x02	; 2
    68f6:	00 c0       	rjmp	.+0      	; 0x68f8 <LM_send_uplink+0x28>
	//Don't block if invalid length - no package was sent!
	if(status!=LM_STATUS_INV_DATA_LEN){
		set_block_uplink();
	}
	return status;
}
    68f8:	cf 91       	pop	r28
    68fa:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00006f1c <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	busy=false;
    6f1c:	10 92 e7 0e 	sts	0x0EE7, r1	; 0x800ee7 <busy>
	TC2_HAL_cancel(subPointer);
    6f20:	80 91 e6 0e 	lds	r24, 0x0EE6	; 0x800ee6 <subPointer>
    6f24:	0e 94 0f 31 	call	0x621e	; 0x621e <TC2_HAL_cancel>
	return SC_put_to_sleep();
    6f28:	0e 94 bc 31 	call	0x6378	; 0x6378 <SC_put_to_sleep>
}
    6f2c:	08 95       	ret

Disassembly of section .text.LM_wake_up:

000072ca <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    72ca:	0e 94 23 28 	call	0x5046	; 0x5046 <SC_wake_up>
}
    72ce:	08 95       	ret

Disassembly of section .text.LM_is_free:

00007206 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    7206:	90 91 e7 0e 	lds	r25, 0x0EE7	; 0x800ee7 <busy>
}
    720a:	81 e0       	ldi	r24, 0x01	; 1
    720c:	89 27       	eor	r24, r25
    720e:	08 95       	ret

Disassembly of section .text.LM_reset_module:

000072d0 <LM_reset_module>:

LM_STATUS LM_reset_module(){
	return util_reset_module();
    72d0:	0e 94 67 2f 	call	0x5ece	; 0x5ece <util_reset_module>
}
    72d4:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

000072d6 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    72d6:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <util_lora_forward_msg>
    72da:	08 95       	ret

Disassembly of section .text.LM_send_break:

000072dc <LM_send_break>:
}

void LM_send_break(){
	util_send_break();
    72dc:	0e 94 45 39 	call	0x728a	; 0x728a <util_send_break>
    72e0:	08 95       	ret

Disassembly of section .text.tohex:

000049e4 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], uint8_t bytes)
{
    49e4:	cf 92       	push	r12
    49e6:	df 92       	push	r13
    49e8:	ef 92       	push	r14
    49ea:	0f 93       	push	r16
    49ec:	1f 93       	push	r17
    49ee:	cf 93       	push	r28
    49f0:	df 93       	push	r29
    49f2:	8c 01       	movw	r16, r24
    49f4:	6a 01       	movw	r12, r20
    49f6:	e6 2e       	mov	r14, r22
    49f8:	d2 2f       	mov	r29, r18
    for (uint8_t i = 0; i < bytes; i++){
    49fa:	c0 e0       	ldi	r28, 0x00	; 0
    49fc:	26 c0       	rjmp	.+76     	; 0x4a4a <tohex+0x66>
        sprintf(str + i * 2, "%02x", data[i]);
    49fe:	8c 2f       	mov	r24, r28
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	4e 2d       	mov	r20, r14
    4a04:	96 01       	movw	r18, r12
    4a06:	28 0f       	add	r18, r24
    4a08:	39 1f       	adc	r19, r25
    4a0a:	41 1d       	adc	r20, r1
    4a0c:	97 fd       	sbrc	r25, 7
    4a0e:	4a 95       	dec	r20
    4a10:	f9 01       	movw	r30, r18
    4a12:	24 91       	lpm	r18, Z
    4a14:	47 fd       	sbrc	r20, 7
    4a16:	20 81       	ld	r18, Z
    4a18:	88 0f       	add	r24, r24
    4a1a:	99 1f       	adc	r25, r25
    4a1c:	1f 92       	push	r1
    4a1e:	2f 93       	push	r18
    4a20:	2c ee       	ldi	r18, 0xEC	; 236
    4a22:	38 e0       	ldi	r19, 0x08	; 8
    4a24:	40 e0       	ldi	r20, 0x00	; 0
    4a26:	4f 93       	push	r20
    4a28:	3f 93       	push	r19
    4a2a:	2f 93       	push	r18
    4a2c:	80 0f       	add	r24, r16
    4a2e:	91 1f       	adc	r25, r17
    4a30:	9f 93       	push	r25
    4a32:	8f 93       	push	r24
    4a34:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], uint8_t bytes)
{
    for (uint8_t i = 0; i < bytes; i++){
    4a38:	cf 5f       	subi	r28, 0xFF	; 255
    4a3a:	8d b7       	in	r24, 0x3d	; 61
    4a3c:	9e b7       	in	r25, 0x3e	; 62
    4a3e:	07 96       	adiw	r24, 0x07	; 7
    4a40:	0f b6       	in	r0, 0x3f	; 63
    4a42:	f8 94       	cli
    4a44:	9e bf       	out	0x3e, r25	; 62
    4a46:	0f be       	out	0x3f, r0	; 63
    4a48:	8d bf       	out	0x3d, r24	; 61
    4a4a:	cd 17       	cp	r28, r29
    4a4c:	c0 f2       	brcs	.-80     	; 0x49fe <tohex+0x1a>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    4a4e:	df 91       	pop	r29
    4a50:	cf 91       	pop	r28
    4a52:	1f 91       	pop	r17
    4a54:	0f 91       	pop	r16
    4a56:	ef 90       	pop	r14
    4a58:	df 90       	pop	r13
    4a5a:	cf 90       	pop	r12
    4a5c:	08 95       	ret

Disassembly of section .text.attach_ending:

00006cde <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    6cde:	fc 01       	movw	r30, r24
    6ce0:	01 90       	ld	r0, Z+
    6ce2:	00 20       	and	r0, r0
    6ce4:	e9 f7       	brne	.-6      	; 0x6ce0 <attach_ending+0x2>
    6ce6:	cf 01       	movw	r24, r30
    6ce8:	23 e0       	ldi	r18, 0x03	; 3
    6cea:	30 e0       	ldi	r19, 0x00	; 0
    6cec:	41 ef       	ldi	r20, 0xF1	; 241
    6cee:	58 e0       	ldi	r21, 0x08	; 8
    6cf0:	60 e0       	ldi	r22, 0x00	; 0
    6cf2:	01 97       	sbiw	r24, 0x01	; 1
    6cf4:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
    6cf8:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

000065fc <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    65fc:	cf 93       	push	r28
    65fe:	df 93       	push	r29
    6600:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    6602:	0e 94 44 36 	call	0x6c88	; 0x6c88 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    6606:	fe 01       	movw	r30, r28
    6608:	01 90       	ld	r0, Z+
    660a:	00 20       	and	r0, r0
    660c:	e9 f7       	brne	.-6      	; 0x6608 <cmd_with_ending+0xc>
    660e:	cf 01       	movw	r24, r30
    6610:	23 e0       	ldi	r18, 0x03	; 3
    6612:	30 e0       	ldi	r19, 0x00	; 0
    6614:	41 ef       	ldi	r20, 0xF1	; 241
    6616:	58 e0       	ldi	r21, 0x08	; 8
    6618:	60 e0       	ldi	r22, 0x00	; 0
    661a:	01 97       	sbiw	r24, 0x01	; 1
    661c:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	return strlen(buffer);
    6620:	be 01       	movw	r22, r28
    6622:	80 e8       	ldi	r24, 0x80	; 128
    6624:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
}
    6628:	df 91       	pop	r29
    662a:	cf 91       	pop	r28
    662c:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

0000538c <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    538c:	cf 93       	push	r28
    538e:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    5390:	44 36       	cpi	r20, 0x64	; 100
    5392:	51 05       	cpc	r21, r1
    5394:	61 05       	cpc	r22, r1
    5396:	71 05       	cpc	r23, r1
    5398:	18 f1       	brcs	.+70     	; 0x53e0 <sys_sleep_cmd+0x54>
    539a:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    539c:	7f 93       	push	r23
    539e:	6f 93       	push	r22
    53a0:	5f 93       	push	r21
    53a2:	4f 93       	push	r20
    53a4:	84 ef       	ldi	r24, 0xF4	; 244
    53a6:	98 e0       	ldi	r25, 0x08	; 8
    53a8:	a0 e0       	ldi	r26, 0x00	; 0
    53aa:	af 93       	push	r26
    53ac:	9f 93       	push	r25
    53ae:	8f 93       	push	r24
    53b0:	8e ef       	ldi	r24, 0xFE	; 254
    53b2:	98 e0       	ldi	r25, 0x08	; 8
    53b4:	a0 e0       	ldi	r26, 0x00	; 0
    53b6:	af 93       	push	r26
    53b8:	9f 93       	push	r25
    53ba:	8f 93       	push	r24
    53bc:	df 93       	push	r29
    53be:	cf 93       	push	r28
    53c0:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    return strlen(buffer);
    53c4:	be 01       	movw	r22, r28
    53c6:	80 e8       	ldi	r24, 0x80	; 128
    53c8:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    53cc:	2d b7       	in	r18, 0x3d	; 61
    53ce:	3e b7       	in	r19, 0x3e	; 62
    53d0:	24 5f       	subi	r18, 0xF4	; 244
    53d2:	3f 4f       	sbci	r19, 0xFF	; 255
    53d4:	0f b6       	in	r0, 0x3f	; 63
    53d6:	f8 94       	cli
    53d8:	3e bf       	out	0x3e, r19	; 62
    53da:	0f be       	out	0x3f, r0	; 63
    53dc:	2d bf       	out	0x3d, r18	; 61
    53de:	02 c0       	rjmp	.+4      	; 0x53e4 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    53e0:	8f ef       	ldi	r24, 0xFF	; 255
    53e2:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    53e4:	df 91       	pop	r29
    53e6:	cf 91       	pop	r28
    53e8:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00005996 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    5996:	0f 93       	push	r16
    5998:	1f 93       	push	r17
    599a:	cf 93       	push	r28
    599c:	df 93       	push	r29
    599e:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    59a0:	2f 93       	push	r18
    59a2:	1f 93       	push	r17
    59a4:	0f 93       	push	r16
    59a6:	6f 93       	push	r22
    59a8:	5f 93       	push	r21
    59aa:	4f 93       	push	r20
    59ac:	85 e0       	ldi	r24, 0x05	; 5
    59ae:	99 e0       	ldi	r25, 0x09	; 9
    59b0:	a0 e0       	ldi	r26, 0x00	; 0
    59b2:	af 93       	push	r26
    59b4:	9f 93       	push	r25
    59b6:	8f 93       	push	r24
    59b8:	df 93       	push	r29
    59ba:	cf 93       	push	r28
    59bc:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    return strlen(buffer);
    59c0:	be 01       	movw	r22, r28
    59c2:	80 e8       	ldi	r24, 0x80	; 128
    59c4:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    59c8:	2d b7       	in	r18, 0x3d	; 61
    59ca:	3e b7       	in	r19, 0x3e	; 62
    59cc:	25 5f       	subi	r18, 0xF5	; 245
    59ce:	3f 4f       	sbci	r19, 0xFF	; 255
    59d0:	0f b6       	in	r0, 0x3f	; 63
    59d2:	f8 94       	cli
    59d4:	3e bf       	out	0x3e, r19	; 62
    59d6:	0f be       	out	0x3f, r0	; 63
    59d8:	2d bf       	out	0x3d, r18	; 61
}
    59da:	df 91       	pop	r29
    59dc:	cf 91       	pop	r28
    59de:	1f 91       	pop	r17
    59e0:	0f 91       	pop	r16
    59e2:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00005d22 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    5d22:	cf 92       	push	r12
    5d24:	df 92       	push	r13
    5d26:	ef 92       	push	r14
    5d28:	0f 93       	push	r16
    5d2a:	1f 93       	push	r17
    5d2c:	cf 93       	push	r28
    5d2e:	df 93       	push	r29
    5d30:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    5d32:	6b 01       	movw	r12, r22
    5d34:	80 e8       	ldi	r24, 0x80	; 128
    5d36:	e8 2e       	mov	r14, r24
    5d38:	8e 2d       	mov	r24, r14
    5d3a:	b6 01       	movw	r22, r12
    5d3c:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    5d40:	40 97       	sbiw	r24, 0x10	; 16
    5d42:	49 f4       	brne	.+18     	; 0x5d56 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    5d44:	2e 2d       	mov	r18, r14
    5d46:	86 01       	movw	r16, r12
    5d48:	4b e0       	ldi	r20, 0x0B	; 11
    5d4a:	59 e0       	ldi	r21, 0x09	; 9
    5d4c:	60 e0       	ldi	r22, 0x00	; 0
    5d4e:	ce 01       	movw	r24, r28
    5d50:	0e 94 cb 2c 	call	0x5996	; 0x5996 <mac_set_parameter>
    5d54:	02 c0       	rjmp	.+4      	; 0x5d5a <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    5d56:	8f ef       	ldi	r24, 0xFF	; 255
    5d58:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    5d5a:	df 91       	pop	r29
    5d5c:	cf 91       	pop	r28
    5d5e:	1f 91       	pop	r17
    5d60:	0f 91       	pop	r16
    5d62:	ef 90       	pop	r14
    5d64:	df 90       	pop	r13
    5d66:	cf 90       	pop	r12
    5d68:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00005d6a <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    5d6a:	cf 92       	push	r12
    5d6c:	df 92       	push	r13
    5d6e:	ef 92       	push	r14
    5d70:	0f 93       	push	r16
    5d72:	1f 93       	push	r17
    5d74:	cf 93       	push	r28
    5d76:	df 93       	push	r29
    5d78:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    5d7a:	6b 01       	movw	r12, r22
    5d7c:	80 e8       	ldi	r24, 0x80	; 128
    5d7e:	e8 2e       	mov	r14, r24
    5d80:	8e 2d       	mov	r24, r14
    5d82:	b6 01       	movw	r22, r12
    5d84:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    5d88:	40 97       	sbiw	r24, 0x10	; 16
    5d8a:	49 f4       	brne	.+18     	; 0x5d9e <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    5d8c:	2e 2d       	mov	r18, r14
    5d8e:	86 01       	movw	r16, r12
    5d90:	4a e1       	ldi	r20, 0x1A	; 26
    5d92:	59 e0       	ldi	r21, 0x09	; 9
    5d94:	60 e0       	ldi	r22, 0x00	; 0
    5d96:	ce 01       	movw	r24, r28
    5d98:	0e 94 cb 2c 	call	0x5996	; 0x5996 <mac_set_parameter>
    5d9c:	02 c0       	rjmp	.+4      	; 0x5da2 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    5d9e:	8f ef       	ldi	r24, 0xFF	; 255
    5da0:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    5da2:	df 91       	pop	r29
    5da4:	cf 91       	pop	r28
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	ef 90       	pop	r14
    5dac:	df 90       	pop	r13
    5dae:	cf 90       	pop	r12
    5db0:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00005db2 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    5db2:	cf 92       	push	r12
    5db4:	df 92       	push	r13
    5db6:	ef 92       	push	r14
    5db8:	0f 93       	push	r16
    5dba:	1f 93       	push	r17
    5dbc:	cf 93       	push	r28
    5dbe:	df 93       	push	r29
    5dc0:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    5dc2:	6b 01       	movw	r12, r22
    5dc4:	80 e8       	ldi	r24, 0x80	; 128
    5dc6:	e8 2e       	mov	r14, r24
    5dc8:	8e 2d       	mov	r24, r14
    5dca:	b6 01       	movw	r22, r12
    5dcc:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    5dd0:	80 97       	sbiw	r24, 0x20	; 32
    5dd2:	49 f4       	brne	.+18     	; 0x5de6 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    5dd4:	2e 2d       	mov	r18, r14
    5dd6:	86 01       	movw	r16, r12
    5dd8:	49 e2       	ldi	r20, 0x29	; 41
    5dda:	59 e0       	ldi	r21, 0x09	; 9
    5ddc:	60 e0       	ldi	r22, 0x00	; 0
    5dde:	ce 01       	movw	r24, r28
    5de0:	0e 94 cb 2c 	call	0x5996	; 0x5996 <mac_set_parameter>
    5de4:	02 c0       	rjmp	.+4      	; 0x5dea <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    5de6:	8f ef       	ldi	r24, 0xFF	; 255
    5de8:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    5dea:	df 91       	pop	r29
    5dec:	cf 91       	pop	r28
    5dee:	1f 91       	pop	r17
    5df0:	0f 91       	pop	r16
    5df2:	ef 90       	pop	r14
    5df4:	df 90       	pop	r13
    5df6:	cf 90       	pop	r12
    5df8:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00006784 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    6784:	0f 93       	push	r16
    6786:	1f 93       	push	r17
	if(state==0){
    6788:	61 11       	cpse	r22, r1
    678a:	09 c0       	rjmp	.+18     	; 0x679e <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    678c:	08 e3       	ldi	r16, 0x38	; 56
    678e:	19 e0       	ldi	r17, 0x09	; 9
    6790:	20 e0       	ldi	r18, 0x00	; 0
    6792:	4c e3       	ldi	r20, 0x3C	; 60
    6794:	59 e0       	ldi	r21, 0x09	; 9
    6796:	60 e0       	ldi	r22, 0x00	; 0
    6798:	0e 94 cb 2c 	call	0x5996	; 0x5996 <mac_set_parameter>
    679c:	08 c0       	rjmp	.+16     	; 0x67ae <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    679e:	08 e4       	ldi	r16, 0x48	; 72
    67a0:	19 e0       	ldi	r17, 0x09	; 9
    67a2:	20 e0       	ldi	r18, 0x00	; 0
    67a4:	4c e3       	ldi	r20, 0x3C	; 60
    67a6:	59 e0       	ldi	r21, 0x09	; 9
    67a8:	60 e0       	ldi	r22, 0x00	; 0
    67aa:	0e 94 cb 2c 	call	0x5996	; 0x5996 <mac_set_parameter>
	}
}
    67ae:	1f 91       	pop	r17
    67b0:	0f 91       	pop	r16
    67b2:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

0000424a <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    424a:	df 92       	push	r13
    424c:	ef 92       	push	r14
    424e:	ff 92       	push	r15
    4250:	0f 93       	push	r16
    4252:	1f 93       	push	r17
    4254:	cf 93       	push	r28
    4256:	df 93       	push	r29
    4258:	cd b7       	in	r28, 0x3d	; 61
    425a:	de b7       	in	r29, 0x3e	; 62
    425c:	c9 5c       	subi	r28, 0xC9	; 201
    425e:	d1 09       	sbc	r29, r1
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    426c:	9f ef       	ldi	r25, 0xFF	; 255
    426e:	96 0f       	add	r25, r22
    4270:	9f 3d       	cpi	r25, 0xDF	; 223
    4272:	60 f5       	brcc	.+88     	; 0x42cc <mac_tx_confirmed+0x82>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    4274:	9f ef       	ldi	r25, 0xFF	; 255
    4276:	92 0f       	add	r25, r18
    4278:	94 36       	cpi	r25, 0x64	; 100
    427a:	58 f5       	brcc	.+86     	; 0x42d2 <mac_tx_confirmed+0x88>
    427c:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    427e:	60 e8       	ldi	r22, 0x80	; 128
    4280:	ce 01       	movw	r24, r28
    4282:	01 96       	adiw	r24, 0x01	; 1
    4284:	7c 01       	movw	r14, r24
    4286:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    428a:	c7 01       	movw	r24, r14
    428c:	a0 e8       	ldi	r26, 0x80	; 128
    428e:	af 93       	push	r26
    4290:	9f 93       	push	r25
    4292:	ef 92       	push	r14
    4294:	1f 92       	push	r1
    4296:	df 92       	push	r13
    4298:	8b e4       	ldi	r24, 0x4B	; 75
    429a:	99 e0       	ldi	r25, 0x09	; 9
    429c:	a0 e0       	ldi	r26, 0x00	; 0
    429e:	af 93       	push	r26
    42a0:	9f 93       	push	r25
    42a2:	8f 93       	push	r24
    42a4:	86 e5       	ldi	r24, 0x56	; 86
    42a6:	99 e0       	ldi	r25, 0x09	; 9
    42a8:	a0 e0       	ldi	r26, 0x00	; 0
    42aa:	af 93       	push	r26
    42ac:	9f 93       	push	r25
    42ae:	8f 93       	push	r24
    42b0:	1f 93       	push	r17
    42b2:	0f 93       	push	r16
    42b4:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    
	
    return strlen(buffer);
    42b8:	b8 01       	movw	r22, r16
    42ba:	80 e8       	ldi	r24, 0x80	; 128
    42bc:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    42c0:	0f b6       	in	r0, 0x3f	; 63
    42c2:	f8 94       	cli
    42c4:	de bf       	out	0x3e, r29	; 62
    42c6:	0f be       	out	0x3f, r0	; 63
    42c8:	cd bf       	out	0x3d, r28	; 61
    42ca:	05 c0       	rjmp	.+10     	; 0x42d6 <mac_tx_confirmed+0x8c>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    42cc:	8f ef       	ldi	r24, 0xFF	; 255
    42ce:	9f ef       	ldi	r25, 0xFF	; 255
    42d0:	02 c0       	rjmp	.+4      	; 0x42d6 <mac_tx_confirmed+0x8c>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    42d2:	8f ef       	ldi	r24, 0xFF	; 255
    42d4:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    42d6:	c7 53       	subi	r28, 0x37	; 55
    42d8:	df 4f       	sbci	r29, 0xFF	; 255
    42da:	0f b6       	in	r0, 0x3f	; 63
    42dc:	f8 94       	cli
    42de:	de bf       	out	0x3e, r29	; 62
    42e0:	0f be       	out	0x3f, r0	; 63
    42e2:	cd bf       	out	0x3d, r28	; 61
    42e4:	df 91       	pop	r29
    42e6:	cf 91       	pop	r28
    42e8:	1f 91       	pop	r17
    42ea:	0f 91       	pop	r16
    42ec:	ff 90       	pop	r15
    42ee:	ef 90       	pop	r14
    42f0:	df 90       	pop	r13
    42f2:	08 95       	ret

Disassembly of section .text.decode_tx_response:

0000518a <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    518a:	cf 92       	push	r12
    518c:	df 92       	push	r13
    518e:	ef 92       	push	r14
    5190:	6b 01       	movw	r12, r22
    5192:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    5194:	27 eb       	ldi	r18, 0xB7	; 183
    5196:	39 e0       	ldi	r19, 0x09	; 9
    5198:	40 e0       	ldi	r20, 0x00	; 0
    519a:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    519e:	89 2b       	or	r24, r25
    51a0:	e9 f0       	breq	.+58     	; 0x51dc <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    51a2:	22 ec       	ldi	r18, 0xC2	; 194
    51a4:	39 e0       	ldi	r19, 0x09	; 9
    51a6:	40 e0       	ldi	r20, 0x00	; 0
    51a8:	8e 2d       	mov	r24, r14
    51aa:	b6 01       	movw	r22, r12
    51ac:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    51b0:	89 2b       	or	r24, r25
    51b2:	b1 f0       	breq	.+44     	; 0x51e0 <decode_tx_response+0x56>
	if(util_str_begins_with(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    51b4:	2a ec       	ldi	r18, 0xCA	; 202
    51b6:	39 e0       	ldi	r19, 0x09	; 9
    51b8:	40 e0       	ldi	r20, 0x00	; 0
    51ba:	8e 2d       	mov	r24, r14
    51bc:	b6 01       	movw	r22, r12
    51be:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <util_str_begins_with>
    51c2:	81 11       	cpse	r24, r1
    51c4:	0f c0       	rjmp	.+30     	; 0x51e4 <decode_tx_response+0x5a>
	if(util_str_begins_with(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    51c6:	21 ed       	ldi	r18, 0xD1	; 209
    51c8:	39 e0       	ldi	r19, 0x09	; 9
    51ca:	40 e0       	ldi	r20, 0x00	; 0
    51cc:	8e 2d       	mov	r24, r14
    51ce:	b6 01       	movw	r22, r12
    51d0:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <util_str_begins_with>
    51d4:	88 23       	and	r24, r24
    51d6:	41 f0       	breq	.+16     	; 0x51e8 <decode_tx_response+0x5e>
    51d8:	85 e0       	ldi	r24, 0x05	; 5
    51da:	07 c0       	rjmp	.+14     	; 0x51ea <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    51dc:	82 e0       	ldi	r24, 0x02	; 2
    51de:	05 c0       	rjmp	.+10     	; 0x51ea <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    51e0:	84 e0       	ldi	r24, 0x04	; 4
    51e2:	03 c0       	rjmp	.+6      	; 0x51ea <decode_tx_response+0x60>
	if(util_str_begins_with(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    51e4:	80 e0       	ldi	r24, 0x00	; 0
    51e6:	01 c0       	rjmp	.+2      	; 0x51ea <decode_tx_response+0x60>
	if(util_str_begins_with(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    51e8:	81 e0       	ldi	r24, 0x01	; 1
}
    51ea:	ef 90       	pop	r14
    51ec:	df 90       	pop	r13
    51ee:	cf 90       	pop	r12
    51f0:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

000037e4 <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    37e4:	df 92       	push	r13
    37e6:	ef 92       	push	r14
    37e8:	ff 92       	push	r15
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	28 97       	sbiw	r28, 0x08	; 8
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	d8 2e       	mov	r13, r24
    3804:	7b 01       	movw	r14, r22
    3806:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    3808:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    380a:	12 30       	cpi	r17, 0x02	; 2
    380c:	09 f4       	brne	.+2      	; 0x3810 <SU_send_uplink+0x2c>
    380e:	40 c0       	rjmp	.+128    	; 0x3890 <SU_send_uplink+0xac>
    3810:	28 f4       	brcc	.+10     	; 0x381c <SU_send_uplink+0x38>
    3812:	11 23       	and	r17, r17
    3814:	49 f0       	breq	.+18     	; 0x3828 <SU_send_uplink+0x44>
    3816:	11 30       	cpi	r17, 0x01	; 1
    3818:	49 f1       	breq	.+82     	; 0x386c <SU_send_uplink+0x88>
    381a:	f7 cf       	rjmp	.-18     	; 0x380a <SU_send_uplink+0x26>
    381c:	13 30       	cpi	r17, 0x03	; 3
    381e:	09 f4       	brne	.+2      	; 0x3822 <SU_send_uplink+0x3e>
    3820:	4e c0       	rjmp	.+156    	; 0x38be <SU_send_uplink+0xda>
    3822:	14 30       	cpi	r17, 0x04	; 4
    3824:	d9 f1       	breq	.+118    	; 0x389c <SU_send_uplink+0xb8>
    3826:	f1 cf       	rjmp	.-30     	; 0x380a <SU_send_uplink+0x26>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    3828:	20 2f       	mov	r18, r16
    382a:	a7 01       	movw	r20, r14
    382c:	6d 2d       	mov	r22, r13
    382e:	80 e9       	ldi	r24, 0x90	; 144
    3830:	92 e0       	ldi	r25, 0x02	; 2
    3832:	0e 94 25 21 	call	0x424a	; 0x424a <mac_tx_confirmed>
				attach_ending(lm_msg);
    3836:	80 e9       	ldi	r24, 0x90	; 144
    3838:	92 e0       	ldi	r25, 0x02	; 2
    383a:	0e 94 6f 36 	call	0x6cde	; 0x6cde <attach_ending>
				uart0_hal_send_string(lm_msg);
    383e:	60 e9       	ldi	r22, 0x90	; 144
    3840:	72 e0       	ldi	r23, 0x02	; 2
    3842:	80 e8       	ldi	r24, 0x80	; 128
    3844:	0e 94 75 24 	call	0x48ea	; 0x48ea <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    3848:	42 e0       	ldi	r20, 0x02	; 2
    384a:	50 e0       	ldi	r21, 0x00	; 0
    384c:	61 e0       	ldi	r22, 0x01	; 1
    384e:	70 e0       	ldi	r23, 0x00	; 0
    3850:	ce 01       	movw	r24, r28
    3852:	01 96       	adiw	r24, 0x01	; 1
    3854:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    3858:	22 ee       	ldi	r18, 0xE2	; 226
    385a:	39 e0       	ldi	r19, 0x09	; 9
    385c:	40 e0       	ldi	r20, 0x00	; 0
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	ce 01       	movw	r24, r28
    3862:	01 96       	adiw	r24, 0x01	; 1
    3864:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				state=SU_WAIT_FOR_INCOMMING;
    3868:	14 e0       	ldi	r17, 0x04	; 4
			break;
    386a:	cf cf       	rjmp	.-98     	; 0x380a <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_set_pending_states(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    386c:	42 e0       	ldi	r20, 0x02	; 2
    386e:	50 e0       	ldi	r21, 0x00	; 0
    3870:	63 e0       	ldi	r22, 0x03	; 3
    3872:	70 e0       	ldi	r23, 0x00	; 0
    3874:	ce 01       	movw	r24, r28
    3876:	01 96       	adiw	r24, 0x01	; 1
    3878:	0e 94 c1 38 	call	0x7182	; 0x7182 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, MAC_TX_OK);
    387c:	25 ee       	ldi	r18, 0xE5	; 229
    387e:	39 e0       	ldi	r19, 0x09	; 9
    3880:	40 e0       	ldi	r20, 0x00	; 0
    3882:	60 e0       	ldi	r22, 0x00	; 0
    3884:	ce 01       	movw	r24, r28
    3886:	01 96       	adiw	r24, 0x01	; 1
    3888:	0e 94 c7 38 	call	0x718e	; 0x718e <util_set_match_case>
				state=SU_WAIT_FOR_INCOMMING;
    388c:	14 e0       	ldi	r17, 0x04	; 4
			break;
    388e:	bd cf       	rjmp	.-134    	; 0x380a <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    3890:	60 e9       	ldi	r22, 0x90	; 144
    3892:	72 e0       	ldi	r23, 0x02	; 2
    3894:	80 e8       	ldi	r24, 0x80	; 128
    3896:	0e 94 c5 28 	call	0x518a	; 0x518a <decode_tx_response>
    389a:	12 c0       	rjmp	.+36     	; 0x38c0 <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    389c:	0e 94 0f 38 	call	0x701e	; 0x701e <uart0_hal_message_ready>
    38a0:	88 23       	and	r24, r24
    38a2:	09 f4       	brne	.+2      	; 0x38a6 <SU_send_uplink+0xc2>
    38a4:	b2 cf       	rjmp	.-156    	; 0x380a <SU_send_uplink+0x26>
					uart0_hal_read_message_as_str(lm_msg);
    38a6:	80 e9       	ldi	r24, 0x90	; 144
    38a8:	92 e0       	ldi	r25, 0x02	; 2
    38aa:	0e 94 a9 34 	call	0x6952	; 0x6952 <uart0_hal_read_message_as_str>
					state=util_match_message(&stateData, lm_msg);
    38ae:	60 e9       	ldi	r22, 0x90	; 144
    38b0:	72 e0       	ldi	r23, 0x02	; 2
    38b2:	ce 01       	movw	r24, r28
    38b4:	01 96       	adiw	r24, 0x01	; 1
    38b6:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <util_match_message>
    38ba:	18 2f       	mov	r17, r24
    38bc:	a6 cf       	rjmp	.-180    	; 0x380a <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    38be:	80 e0       	ldi	r24, 0x00	; 0
					state=util_match_message(&stateData, lm_msg);
				}
			break;
		}
	}
}
    38c0:	28 96       	adiw	r28, 0x08	; 8
    38c2:	0f b6       	in	r0, 0x3f	; 63
    38c4:	f8 94       	cli
    38c6:	de bf       	out	0x3e, r29	; 62
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	cd bf       	out	0x3d, r28	; 61
    38cc:	df 91       	pop	r29
    38ce:	cf 91       	pop	r28
    38d0:	1f 91       	pop	r17
    38d2:	0f 91       	pop	r16
    38d4:	ff 90       	pop	r15
    38d6:	ef 90       	pop	r14
    38d8:	df 90       	pop	r13
    38da:	08 95       	ret

Disassembly of section .text.cb_counter:

00006ee4 <cb_counter>:
		return LM_STATUS_FATAL_ERROR;
	}
}

static void cb_counter(){
	cnt++;
    6ee4:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <cnt>
    6ee8:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <cnt+0x1>
    6eec:	01 96       	adiw	r24, 0x01	; 1
    6eee:	90 93 ce 0e 	sts	0x0ECE, r25	; 0x800ece <cnt+0x1>
    6ef2:	80 93 cd 0e 	sts	0x0ECD, r24	; 0x800ecd <cnt>
    6ef6:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00006378 <SC_put_to_sleep>:
static uint16_t cnt=0;
static int8_t eventPointer;

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    6378:	40 e0       	ldi	r20, 0x00	; 0
    637a:	5c e5       	ldi	r21, 0x5C	; 92
    637c:	66 e2       	ldi	r22, 0x26	; 38
    637e:	75 e0       	ldi	r23, 0x05	; 5
    6380:	80 e9       	ldi	r24, 0x90	; 144
    6382:	92 e0       	ldi	r25, 0x02	; 2
    6384:	0e 94 c6 29 	call	0x538c	; 0x538c <sys_sleep_cmd>
	attach_ending(lm_msg);
    6388:	80 e9       	ldi	r24, 0x90	; 144
    638a:	92 e0       	ldi	r25, 0x02	; 2
    638c:	0e 94 6f 36 	call	0x6cde	; 0x6cde <attach_ending>
	uart0_hal_send_string(lm_msg);
    6390:	60 e9       	ldi	r22, 0x90	; 144
    6392:	72 e0       	ldi	r23, 0x02	; 2
    6394:	80 e8       	ldi	r24, 0x80	; 128
    6396:	0e 94 75 24 	call	0x48ea	; 0x48ea <uart0_hal_send_string>
    639a:	2f ef       	ldi	r18, 0xFF	; 255
    639c:	81 ee       	ldi	r24, 0xE1	; 225
    639e:	94 e0       	ldi	r25, 0x04	; 4
    63a0:	21 50       	subi	r18, 0x01	; 1
    63a2:	80 40       	sbci	r24, 0x00	; 0
    63a4:	90 40       	sbci	r25, 0x00	; 0
    63a6:	e1 f7       	brne	.-8      	; 0x63a0 <SC_put_to_sleep+0x28>
    63a8:	00 c0       	rjmp	.+0      	; 0x63aa <SC_put_to_sleep+0x32>
    63aa:	00 00       	nop
	_delay_ms(200);
	return LM_STATUS_SUCCESS;
}
    63ac:	80 e0       	ldi	r24, 0x00	; 0
    63ae:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00005046 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    5046:	85 e5       	ldi	r24, 0x55	; 85
    5048:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <uart0_hal_send_break>
	
	//Create watchdog
	cnt=0;
    504c:	10 92 ce 0e 	sts	0x0ECE, r1	; 0x800ece <cnt+0x1>
    5050:	10 92 cd 0e 	sts	0x0ECD, r1	; 0x800ecd <cnt>
	eventPointer=TC2_HAL_subscribe(&cb_counter);
    5054:	82 e7       	ldi	r24, 0x72	; 114
    5056:	97 e3       	ldi	r25, 0x37	; 55
    5058:	0e 94 89 2b 	call	0x5712	; 0x5712 <TC2_HAL_subscribe>
    505c:	80 93 e9 0e 	sts	0x0EE9, r24	; 0x800ee9 <eventPointer>
	
	//Expect ok from sleep
	while(uart0_hal_message_ready()==false && cnt<LM_SLEEP_WATCHDOG_CNT){}
    5060:	0e 94 0f 38 	call	0x701e	; 0x701e <uart0_hal_message_ready>
    5064:	81 11       	cpse	r24, r1
    5066:	06 c0       	rjmp	.+12     	; 0x5074 <SC_wake_up+0x2e>
    5068:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <cnt>
    506c:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <cnt+0x1>
    5070:	0a 97       	sbiw	r24, 0x0a	; 10
    5072:	b0 f3       	brcs	.-20     	; 0x5060 <SC_wake_up+0x1a>
		
	TC2_HAL_cancel(eventPointer);
    5074:	80 91 e9 0e 	lds	r24, 0x0EE9	; 0x800ee9 <eventPointer>
    5078:	0e 94 0f 31 	call	0x621e	; 0x621e <TC2_HAL_cancel>
		
	if(cnt>=LM_SLEEP_WATCHDOG_CNT){
    507c:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <cnt>
    5080:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <cnt+0x1>
    5084:	0a 97       	sbiw	r24, 0x0a	; 10
    5086:	20 f0       	brcs	.+8      	; 0x5090 <SC_wake_up+0x4a>
		uart0_hal_clear_rx_buffer();
    5088:	0e 94 ef 38 	call	0x71de	; 0x71de <uart0_hal_clear_rx_buffer>
		return LM_STATUS_FATAL_ERROR;
    508c:	81 e0       	ldi	r24, 0x01	; 1
    508e:	08 95       	ret
	}else{
		uart0_hal_read_message_as_str(lm_msg);
    5090:	80 e9       	ldi	r24, 0x90	; 144
    5092:	92 e0       	ldi	r25, 0x02	; 2
    5094:	0e 94 a9 34 	call	0x6952	; 0x6952 <uart0_hal_read_message_as_str>
		
		if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    5098:	60 e9       	ldi	r22, 0x90	; 144
    509a:	72 e0       	ldi	r23, 0x02	; 2
    509c:	80 e8       	ldi	r24, 0x80	; 128
    509e:	24 e1       	ldi	r18, 0x14	; 20
    50a0:	3a e0       	ldi	r19, 0x0A	; 10
    50a2:	40 e0       	ldi	r20, 0x00	; 0
    50a4:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    50a8:	89 2b       	or	r24, r25
    50aa:	11 f4       	brne	.+4      	; 0x50b0 <SC_wake_up+0x6a>
    50ac:	80 e0       	ldi	r24, 0x00	; 0
    50ae:	08 95       	ret
		return LM_STATUS_FATAL_ERROR;
    50b0:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    50b2:	08 95       	ret

Disassembly of section .text.cb_watchdog_counter:

00007176 <cb_watchdog_counter>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    7176:	80 91 eb 0e 	lds	r24, 0x0EEB	; 0x800eeb <wd_cnt>
    717a:	8f 5f       	subi	r24, 0xFF	; 255
    717c:	80 93 eb 0e 	sts	0x0EEB, r24	; 0x800eeb <wd_cnt>
    7180:	08 95       	ret

Disassembly of section .text.util_set_pending_states:

00007182 <util_set_pending_states>:
char lm_msg[250];

static void cb_watchdog_counter();

void util_set_pending_states(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    7182:	fc 01       	movw	r30, r24
    7184:	71 83       	std	Z+1, r23	; 0x01
    7186:	60 83       	st	Z, r22
	sd->failure_state=failed;
    7188:	53 83       	std	Z+3, r21	; 0x03
    718a:	42 83       	std	Z+2, r20	; 0x02
    718c:	08 95       	ret

Disassembly of section .text.util_set_match_case:

0000718e <util_set_match_case>:
}

void util_set_match_case(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    718e:	fc 01       	movw	r30, r24
    7190:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    7192:	25 83       	std	Z+5, r18	; 0x05
    7194:	36 83       	std	Z+6, r19	; 0x06
    7196:	47 83       	std	Z+7, r20	; 0x07
    7198:	08 95       	ret

Disassembly of section .text.util_str_begins_with:

00005c46 <util_str_begins_with>:
		return sd->failure_state;
	}
}


bool util_str_begins_with(const char *s1, const char *s2){
    5c46:	6f 92       	push	r6
    5c48:	7f 92       	push	r7
    5c4a:	8f 92       	push	r8
    5c4c:	cf 92       	push	r12
    5c4e:	df 92       	push	r13
    5c50:	ef 92       	push	r14
    5c52:	0f 93       	push	r16
    5c54:	1f 93       	push	r17
    5c56:	3b 01       	movw	r6, r22
    5c58:	88 2e       	mov	r8, r24
    5c5a:	69 01       	movw	r12, r18
    5c5c:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    5c5e:	84 2f       	mov	r24, r20
    5c60:	b9 01       	movw	r22, r18
    5c62:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    5c66:	8c 01       	movw	r16, r24
    5c68:	4e 2d       	mov	r20, r14
    5c6a:	96 01       	movw	r18, r12
    5c6c:	88 2d       	mov	r24, r8
    5c6e:	b3 01       	movw	r22, r6
    5c70:	0e 94 90 28 	call	0x5120	; 0x5120 <strncmp>
    5c74:	21 e0       	ldi	r18, 0x01	; 1
    5c76:	89 2b       	or	r24, r25
    5c78:	09 f0       	breq	.+2      	; 0x5c7c <util_str_begins_with+0x36>
    5c7a:	20 e0       	ldi	r18, 0x00	; 0
}
    5c7c:	82 2f       	mov	r24, r18
    5c7e:	1f 91       	pop	r17
    5c80:	0f 91       	pop	r16
    5c82:	ef 90       	pop	r14
    5c84:	df 90       	pop	r13
    5c86:	cf 90       	pop	r12
    5c88:	8f 90       	pop	r8
    5c8a:	7f 90       	pop	r7
    5c8c:	6f 90       	pop	r6
    5c8e:	08 95       	ret

Disassembly of section .text.util_match_message:

000054a6 <util_match_message>:
void util_set_match_case(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_match_message(LM_STATE_DATA *sd, char *msg){
    54a6:	cf 93       	push	r28
    54a8:	df 93       	push	r29
    54aa:	ec 01       	movw	r28, r24
	switch(sd->matchCase){
    54ac:	8c 81       	ldd	r24, Y+4	; 0x04
    54ae:	81 30       	cpi	r24, 0x01	; 1
    54b0:	91 f0       	breq	.+36     	; 0x54d6 <util_match_message+0x30>
    54b2:	18 f0       	brcs	.+6      	; 0x54ba <util_match_message+0x14>
    54b4:	82 30       	cpi	r24, 0x02	; 2
    54b6:	e9 f0       	breq	.+58     	; 0x54f2 <util_match_message+0x4c>
    54b8:	1f c0       	rjmp	.+62     	; 0x54f8 <util_match_message+0x52>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    54ba:	2d 81       	ldd	r18, Y+5	; 0x05
    54bc:	3e 81       	ldd	r19, Y+6	; 0x06
    54be:	4f 81       	ldd	r20, Y+7	; 0x07
    54c0:	80 e8       	ldi	r24, 0x80	; 128
    54c2:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    54c6:	89 2b       	or	r24, r25
    54c8:	19 f4       	brne	.+6      	; 0x54d0 <util_match_message+0x2a>
    54ca:	88 81       	ld	r24, Y
    54cc:	99 81       	ldd	r25, Y+1	; 0x01
    54ce:	16 c0       	rjmp	.+44     	; 0x54fc <util_match_message+0x56>
    54d0:	8a 81       	ldd	r24, Y+2	; 0x02
    54d2:	9b 81       	ldd	r25, Y+3	; 0x03
    54d4:	13 c0       	rjmp	.+38     	; 0x54fc <util_match_message+0x56>

		case LM_BEGINS_WITH:
		return util_str_begins_with(msg, sd->matchString)?sd->success_state:sd->failure_state;
    54d6:	2d 81       	ldd	r18, Y+5	; 0x05
    54d8:	3e 81       	ldd	r19, Y+6	; 0x06
    54da:	4f 81       	ldd	r20, Y+7	; 0x07
    54dc:	80 e8       	ldi	r24, 0x80	; 128
    54de:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <util_str_begins_with>
    54e2:	88 23       	and	r24, r24
    54e4:	19 f0       	breq	.+6      	; 0x54ec <util_match_message+0x46>
    54e6:	88 81       	ld	r24, Y
    54e8:	99 81       	ldd	r25, Y+1	; 0x01
    54ea:	08 c0       	rjmp	.+16     	; 0x54fc <util_match_message+0x56>
    54ec:	8a 81       	ldd	r24, Y+2	; 0x02
    54ee:	9b 81       	ldd	r25, Y+3	; 0x03
    54f0:	05 c0       	rjmp	.+10     	; 0x54fc <util_match_message+0x56>

		case LM_NO_TEST:
		return sd->success_state;
    54f2:	88 81       	ld	r24, Y
    54f4:	99 81       	ldd	r25, Y+1	; 0x01
    54f6:	02 c0       	rjmp	.+4      	; 0x54fc <util_match_message+0x56>
		default:
		return sd->failure_state;
    54f8:	8a 81       	ldd	r24, Y+2	; 0x02
    54fa:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    54fc:	df 91       	pop	r29
    54fe:	cf 91       	pop	r28
    5500:	08 95       	ret

Disassembly of section .text.util_reset_module:

00005ece <util_reset_module>:
bool util_str_begins_with(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    5ece:	0e 94 29 39 	call	0x7252	; 0x7252 <rn2483_reset_active>
    5ed2:	2f ef       	ldi	r18, 0xFF	; 255
    5ed4:	89 e6       	ldi	r24, 0x69	; 105
    5ed6:	98 e1       	ldi	r25, 0x18	; 24
    5ed8:	21 50       	subi	r18, 0x01	; 1
    5eda:	80 40       	sbci	r24, 0x00	; 0
    5edc:	90 40       	sbci	r25, 0x00	; 0
    5ede:	e1 f7       	brne	.-8      	; 0x5ed8 <util_reset_module+0xa>
    5ee0:	00 c0       	rjmp	.+0      	; 0x5ee2 <util_reset_module+0x14>
    5ee2:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    5ee4:	0e 94 2d 39 	call	0x725a	; 0x725a <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    5ee8:	0e 94 0f 38 	call	0x701e	; 0x701e <uart0_hal_message_ready>
    5eec:	88 23       	and	r24, r24
    5eee:	e1 f3       	breq	.-8      	; 0x5ee8 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    5ef0:	80 e9       	ldi	r24, 0x90	; 144
    5ef2:	92 e0       	ldi	r25, 0x02	; 2
    5ef4:	0e 94 a9 34 	call	0x6952	; 0x6952 <uart0_hal_read_message_as_str>
	
	if(util_str_begins_with(lm_msg, RN2483)){
    5ef8:	60 e9       	ldi	r22, 0x90	; 144
    5efa:	72 e0       	ldi	r23, 0x02	; 2
    5efc:	80 e8       	ldi	r24, 0x80	; 128
    5efe:	2f ee       	ldi	r18, 0xEF	; 239
    5f00:	39 e0       	ldi	r19, 0x09	; 9
    5f02:	40 e0       	ldi	r20, 0x00	; 0
    5f04:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <util_str_begins_with>
    5f08:	88 23       	and	r24, r24
    5f0a:	11 f0       	breq	.+4      	; 0x5f10 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    5f0c:	80 e0       	ldi	r24, 0x00	; 0
    5f0e:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    5f10:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    5f12:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00004ad8 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    4ad8:	cf 93       	push	r28
    4ada:	df 93       	push	r29
    4adc:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    4ade:	ab 01       	movw	r20, r22
    4ae0:	68 2f       	mov	r22, r24
    4ae2:	80 e9       	ldi	r24, 0x90	; 144
    4ae4:	92 e0       	ldi	r25, 0x02	; 2
    4ae6:	0e 94 44 36 	call	0x6c88	; 0x6c88 <strcpy>
	attach_ending(lm_msg);
    4aea:	80 e9       	ldi	r24, 0x90	; 144
    4aec:	92 e0       	ldi	r25, 0x02	; 2
    4aee:	0e 94 6f 36 	call	0x6cde	; 0x6cde <attach_ending>
	uart0_hal_send_string(lm_msg);
    4af2:	60 e9       	ldi	r22, 0x90	; 144
    4af4:	72 e0       	ldi	r23, 0x02	; 2
    4af6:	80 e8       	ldi	r24, 0x80	; 128
    4af8:	0e 94 75 24 	call	0x48ea	; 0x48ea <uart0_hal_send_string>
	
	wd_cnt=0;
    4afc:	10 92 eb 0e 	sts	0x0EEB, r1	; 0x800eeb <wd_cnt>
	wd_cb_pointer=TC2_HAL_subscribe(&cb_watchdog_counter);
    4b00:	8b eb       	ldi	r24, 0xBB	; 187
    4b02:	98 e3       	ldi	r25, 0x38	; 56
    4b04:	0e 94 89 2b 	call	0x5712	; 0x5712 <TC2_HAL_subscribe>
    4b08:	80 93 ea 0e 	sts	0x0EEA, r24	; 0x800eea <wd_cb_pointer>
	
	while(!uart0_hal_message_ready() && wd_cnt<15);
    4b0c:	0e 94 0f 38 	call	0x701e	; 0x701e <uart0_hal_message_ready>
    4b10:	81 11       	cpse	r24, r1
    4b12:	04 c0       	rjmp	.+8      	; 0x4b1c <util_lora_forward_msg+0x44>
    4b14:	80 91 eb 0e 	lds	r24, 0x0EEB	; 0x800eeb <wd_cnt>
    4b18:	8f 30       	cpi	r24, 0x0F	; 15
    4b1a:	c0 f3       	brcs	.-16     	; 0x4b0c <util_lora_forward_msg+0x34>
	TC2_HAL_cancel(wd_cb_pointer);
    4b1c:	80 91 ea 0e 	lds	r24, 0x0EEA	; 0x800eea <wd_cb_pointer>
    4b20:	0e 94 0f 31 	call	0x621e	; 0x621e <TC2_HAL_cancel>
	if(wd_cnt>=15){
    4b24:	80 91 eb 0e 	lds	r24, 0x0EEB	; 0x800eeb <wd_cnt>
    4b28:	8f 30       	cpi	r24, 0x0F	; 15
    4b2a:	60 f0       	brcs	.+24     	; 0x4b44 <util_lora_forward_msg+0x6c>
		strcpy(res, "no reply...");
    4b2c:	2c e0       	ldi	r18, 0x0C	; 12
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	46 ef       	ldi	r20, 0xF6	; 246
    4b32:	59 e0       	ldi	r21, 0x09	; 9
    4b34:	60 e0       	ldi	r22, 0x00	; 0
    4b36:	ce 01       	movw	r24, r28
    4b38:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		uart0_hal_read_message_as_str(res);
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	0e 94 a9 34 	call	0x6952	; 0x6952 <uart0_hal_read_message_as_str>
    4b42:	03 c0       	rjmp	.+6      	; 0x4b4a <util_lora_forward_msg+0x72>
	}else{
		uart0_hal_read_message_as_str(res);
    4b44:	ce 01       	movw	r24, r28
    4b46:	0e 94 a9 34 	call	0x6952	; 0x6952 <uart0_hal_read_message_as_str>
	}
}
    4b4a:	df 91       	pop	r29
    4b4c:	cf 91       	pop	r28
    4b4e:	08 95       	ret

Disassembly of section .text.util_send_break:

0000728a <util_send_break>:

void util_send_break(){
	uart0_hal_send_break(0x55);
    728a:	85 e5       	ldi	r24, 0x55	; 85
    728c:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <uart0_hal_send_break>
    7290:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00006d4c <MRPP_init_group>:
#include "mrpp.h"

static MRPP_STATE state;

uint8_t MRPP_init_group(COLLECTION collections[], uint8_t nCollections, uint8_t groupId){
    6d4c:	cf 93       	push	r28
    6d4e:	26 2f       	mov	r18, r22
    6d50:	c4 2f       	mov	r28, r20
    mrpp_state_init(&state, groupId, collections, nCollections);
    6d52:	ac 01       	movw	r20, r24
    6d54:	6c 2f       	mov	r22, r28
    6d56:	84 e2       	ldi	r24, 0x24	; 36
    6d58:	9c e0       	ldi	r25, 0x0C	; 12
    6d5a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <mrpp_state_init>

    return groupId+1;
}
    6d5e:	81 e0       	ldi	r24, 0x01	; 1
    6d60:	8c 0f       	add	r24, r28
    6d62:	cf 91       	pop	r28
    6d64:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00004e8a <MRPP_add_collection_data_INT16>:


void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    4e8a:	ef 92       	push	r14
    4e8c:	ff 92       	push	r15
    4e8e:	1f 93       	push	r17
    4e90:	cf 93       	push	r28
    4e92:	df 93       	push	r29
    4e94:	cd b7       	in	r28, 0x3d	; 61
    4e96:	de b7       	in	r29, 0x3e	; 62
    4e98:	2a 97       	sbiw	r28, 0x0a	; 10
    4e9a:	0f b6       	in	r0, 0x3f	; 63
    4e9c:	f8 94       	cli
    4e9e:	de bf       	out	0x3e, r29	; 62
    4ea0:	0f be       	out	0x3f, r0	; 63
    4ea2:	cd bf       	out	0x3d, r28	; 61
    4ea4:	18 2f       	mov	r17, r24
    4ea6:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    4ea8:	9e 01       	movw	r18, r28
    4eaa:	2f 5f       	subi	r18, 0xFF	; 255
    4eac:	3f 4f       	sbci	r19, 0xFF	; 255
    4eae:	ab 01       	movw	r20, r22
    4eb0:	68 2f       	mov	r22, r24
    4eb2:	84 e2       	ldi	r24, 0x24	; 36
    4eb4:	9c e0       	ldi	r25, 0x0C	; 12
    4eb6:	0e 94 32 24 	call	0x4864	; 0x4864 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    4eba:	9e 01       	movw	r18, r28
    4ebc:	27 5f       	subi	r18, 0xF7	; 247
    4ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec0:	ae 01       	movw	r20, r28
    4ec2:	49 5f       	subi	r20, 0xF9	; 249
    4ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ec6:	61 2f       	mov	r22, r17
    4ec8:	84 e2       	ldi	r24, 0x24	; 36
    4eca:	9c e0       	ldi	r25, 0x0C	; 12
    4ecc:	0e 94 2b 32 	call	0x6456	; 0x6456 <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    4ed0:	29 85       	ldd	r18, Y+9	; 0x09
    4ed2:	3a 85       	ldd	r19, Y+10	; 0x0a
    4ed4:	4f 81       	ldd	r20, Y+7	; 0x07
    4ed6:	58 85       	ldd	r21, Y+8	; 0x08
    4ed8:	b7 01       	movw	r22, r14
    4eda:	ce 01       	movw	r24, r28
    4edc:	01 96       	adiw	r24, 0x01	; 1
    4ede:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <mrpp_data_add_int16>
}
    4ee2:	2a 96       	adiw	r28, 0x0a	; 10
    4ee4:	0f b6       	in	r0, 0x3f	; 63
    4ee6:	f8 94       	cli
    4ee8:	de bf       	out	0x3e, r29	; 62
    4eea:	0f be       	out	0x3f, r0	; 63
    4eec:	cd bf       	out	0x3d, r28	; 61
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	1f 91       	pop	r17
    4ef4:	ff 90       	pop	r15
    4ef6:	ef 90       	pop	r14
    4ef8:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00006aca <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    6aca:	cf 93       	push	r28
    6acc:	df 93       	push	r29
    6ace:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    6ad0:	84 e2       	ldi	r24, 0x24	; 36
    6ad2:	9c e0       	ldi	r25, 0x0C	; 12
    6ad4:	0e 94 f2 33 	call	0x67e4	; 0x67e4 <mrpp_state_is_body_ready>
    6ad8:	88 83       	st	Y, r24
    6ada:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    6adc:	89 2f       	mov	r24, r25
    6ade:	80 95       	com	r24
    
}
    6ae0:	88 1f       	adc	r24, r24
    6ae2:	88 27       	eor	r24, r24
    6ae4:	88 1f       	adc	r24, r24
    6ae6:	df 91       	pop	r29
    6ae8:	cf 91       	pop	r28
    6aea:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00004618 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    4618:	af 92       	push	r10
    461a:	bf 92       	push	r11
    461c:	cf 92       	push	r12
    461e:	df 92       	push	r13
    4620:	ef 92       	push	r14
    4622:	ff 92       	push	r15
    4624:	0f 93       	push	r16
    4626:	1f 93       	push	r17
    4628:	cf 93       	push	r28
    462a:	df 93       	push	r29
    462c:	00 d0       	rcall	.+0      	; 0x462e <MRPP_get_ready_body_package+0x16>
    462e:	00 d0       	rcall	.+0      	; 0x4630 <MRPP_get_ready_body_package+0x18>
    4630:	1f 92       	push	r1
    4632:	cd b7       	in	r28, 0x3d	; 61
    4634:	de b7       	in	r29, 0x3e	; 62
    4636:	6b 01       	movw	r12, r22
    4638:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    463a:	9e 01       	movw	r18, r28
    463c:	2b 5f       	subi	r18, 0xFB	; 251
    463e:	3f 4f       	sbci	r19, 0xFF	; 255
    4640:	79 01       	movw	r14, r18
    4642:	8e 01       	movw	r16, r28
    4644:	0d 5f       	subi	r16, 0xFD	; 253
    4646:	1f 4f       	sbci	r17, 0xFF	; 255
    4648:	23 50       	subi	r18, 0x03	; 3
    464a:	31 09       	sbc	r19, r1
    464c:	ae 01       	movw	r20, r28
    464e:	4f 5f       	subi	r20, 0xFF	; 255
    4650:	5f 4f       	sbci	r21, 0xFF	; 255
    4652:	bc 01       	movw	r22, r24
    4654:	84 e2       	ldi	r24, 0x24	; 36
    4656:	9c e0       	ldi	r25, 0x0C	; 12
    4658:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <mrpp_state_get_ready_body>
    
    if(!res) return false;
    465c:	88 23       	and	r24, r24
    465e:	b1 f0       	breq	.+44     	; 0x468c <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    4660:	4d 81       	ldd	r20, Y+5	; 0x05
    4662:	83 e0       	ldi	r24, 0x03	; 3
    4664:	84 0f       	add	r24, r20
    4666:	f5 01       	movw	r30, r10
    4668:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    466a:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <state>
    466e:	f6 01       	movw	r30, r12
    4670:	80 83       	st	Z, r24
    package[1]=subId;
    4672:	89 81       	ldd	r24, Y+1	; 0x01
    4674:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    4676:	8a 81       	ldd	r24, Y+2	; 0x02
    4678:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    467a:	50 e0       	ldi	r21, 0x00	; 0
    467c:	6b 81       	ldd	r22, Y+3	; 0x03
    467e:	7c 81       	ldd	r23, Y+4	; 0x04
    4680:	c6 01       	movw	r24, r12
    4682:	03 96       	adiw	r24, 0x03	; 3
    4684:	0e 94 da 33 	call	0x67b4	; 0x67b4 <mrpp_data_get>

    return true;
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	01 c0       	rjmp	.+2      	; 0x468e <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    468c:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    468e:	0f 90       	pop	r0
    4690:	0f 90       	pop	r0
    4692:	0f 90       	pop	r0
    4694:	0f 90       	pop	r0
    4696:	0f 90       	pop	r0
    4698:	df 91       	pop	r29
    469a:	cf 91       	pop	r28
    469c:	1f 91       	pop	r17
    469e:	0f 91       	pop	r16
    46a0:	ff 90       	pop	r15
    46a2:	ef 90       	pop	r14
    46a4:	df 90       	pop	r13
    46a6:	cf 90       	pop	r12
    46a8:	bf 90       	pop	r11
    46aa:	af 90       	pop	r10
    46ac:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

0000719a <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    719a:	bc 01       	movw	r22, r24
    719c:	84 e2       	ldi	r24, 0x24	; 36
    719e:	9c e0       	ldi	r25, 0x0C	; 12
    71a0:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <mrpp_state_set_body_sent>
    71a4:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00006aec <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    6aec:	cf 93       	push	r28
    6aee:	df 93       	push	r29
    6af0:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    6af2:	20 91 24 0c 	lds	r18, 0x0C24	; 0x800c24 <state>
    6af6:	fc 01       	movw	r30, r24
    6af8:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    6afa:	bf 01       	movw	r22, r30
    6afc:	84 e2       	ldi	r24, 0x24	; 36
    6afe:	9c e0       	ldi	r25, 0x0C	; 12
    6b00:	0e 94 cf 21 	call	0x439e	; 0x439e <mrpp_state_get_header>
    *package_length+=1;
    6b04:	8f 5f       	subi	r24, 0xFF	; 255
    6b06:	88 83       	st	Y, r24
}
    6b08:	df 91       	pop	r29
    6b0a:	cf 91       	pop	r28
    6b0c:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00006b0e <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    6b0e:	cf 93       	push	r28
    6b10:	df 93       	push	r29
    6b12:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    6b14:	20 91 24 0c 	lds	r18, 0x0C24	; 0x800c24 <state>
    6b18:	fc 01       	movw	r30, r24
    6b1a:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    6b1c:	bf 01       	movw	r22, r30
    6b1e:	84 e2       	ldi	r24, 0x24	; 36
    6b20:	9c e0       	ldi	r25, 0x0C	; 12
    6b22:	0e 94 cf 20 	call	0x419e	; 0x419e <mrpp_state_get_tail>
    *package_length+=1;
    6b26:	8f 5f       	subi	r24, 0xFF	; 255
    6b28:	88 83       	st	Y, r24
}
    6b2a:	df 91       	pop	r29
    6b2c:	cf 91       	pop	r28
    6b2e:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00007210 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    7210:	84 e2       	ldi	r24, 0x24	; 36
    7212:	9c e0       	ldi	r25, 0x0C	; 12
    7214:	0e 94 94 34 	call	0x6928	; 0x6928 <mrpp_state_all_bodies_sent>
}
    7218:	08 95       	ret

Disassembly of section .text.MRPP_validate_collections_space:

00005328 <MRPP_validate_collections_space>:

bool MRPP_validate_collections_space(COLLECTION collections[], uint8_t nCollections){
    5328:	cf 93       	push	r28
    532a:	df 93       	push	r29
    532c:	ec 01       	movw	r28, r24
    //Check number of collections
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    532e:	86 2f       	mov	r24, r22
    5330:	88 0f       	add	r24, r24
    5332:	88 0f       	add	r24, r24
    5334:	85 5f       	subi	r24, 0xF5	; 245
    if(headerSize>MAX_PAYLOAD_SIZE) return false;
    5336:	85 36       	cpi	r24, 0x65	; 101
    5338:	18 f5       	brcc	.+70     	; 0x5380 <MRPP_validate_collections_space+0x58>
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	20 e0       	ldi	r18, 0x00	; 0
    533e:	30 e0       	ldi	r19, 0x00	; 0
    5340:	18 c0       	rjmp	.+48     	; 0x5372 <MRPP_validate_collections_space+0x4a>

    //Check buffer size
    uint16_t size=0;
    for (uint8_t i = 0; i < nCollections; i++)
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    5342:	e9 2f       	mov	r30, r25
    5344:	f0 e0       	ldi	r31, 0x00	; 0
    5346:	af 01       	movw	r20, r30
    5348:	44 0f       	add	r20, r20
    534a:	55 1f       	adc	r21, r21
    534c:	44 0f       	add	r20, r20
    534e:	55 1f       	adc	r21, r21
    5350:	e4 0f       	add	r30, r20
    5352:	f5 1f       	adc	r31, r21
    5354:	ec 0f       	add	r30, r28
    5356:	fd 1f       	adc	r31, r29
    5358:	a0 81       	ld	r26, Z
    535a:	b1 81       	ldd	r27, Z+1	; 0x01
    535c:	74 81       	ldd	r23, Z+4	; 0x04
    535e:	7a 9f       	mul	r23, r26
    5360:	a0 01       	movw	r20, r0
    5362:	7b 9f       	mul	r23, r27
    5364:	50 0d       	add	r21, r0
    5366:	11 24       	eor	r1, r1
    5368:	24 0f       	add	r18, r20
    536a:	35 1f       	adc	r19, r21
    536c:	2a 5f       	subi	r18, 0xFA	; 250
    536e:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    if(headerSize>MAX_PAYLOAD_SIZE) return false;

    //Check buffer size
    uint16_t size=0;
    for (uint8_t i = 0; i < nCollections; i++)
    5370:	9f 5f       	subi	r25, 0xFF	; 255
    5372:	96 17       	cp	r25, r22
    5374:	30 f3       	brcs	.-52     	; 0x5342 <MRPP_validate_collections_space+0x1a>
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    }
    
    if(size<=BODY_BUFFER_DATA_SIZE) return true;
    5376:	21 32       	cpi	r18, 0x21	; 33
    5378:	33 40       	sbci	r19, 0x03	; 3
    537a:	20 f4       	brcc	.+8      	; 0x5384 <MRPP_validate_collections_space+0x5c>
    537c:	81 e0       	ldi	r24, 0x01	; 1
    537e:	03 c0       	rjmp	.+6      	; 0x5386 <MRPP_validate_collections_space+0x5e>
}

bool MRPP_validate_collections_space(COLLECTION collections[], uint8_t nCollections){
    //Check number of collections
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    if(headerSize>MAX_PAYLOAD_SIZE) return false;
    5380:	80 e0       	ldi	r24, 0x00	; 0
    5382:	01 c0       	rjmp	.+2      	; 0x5386 <MRPP_validate_collections_space+0x5e>
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    }
    
    if(size<=BODY_BUFFER_DATA_SIZE) return true;
    return false;
    5384:	80 e0       	ldi	r24, 0x00	; 0
}
    5386:	df 91       	pop	r29
    5388:	cf 91       	pop	r28
    538a:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

000047d6 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    47d6:	cf 92       	push	r12
    47d8:	df 92       	push	r13
    47da:	ff 92       	push	r15
    47dc:	0f 93       	push	r16
    47de:	1f 93       	push	r17
    47e0:	cf 93       	push	r28
    47e2:	df 93       	push	r29
    47e4:	89 01       	movw	r16, r18
    
    //add meta
    for (uint16_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    47e6:	fa 01       	movw	r30, r20
    47e8:	0b c0       	rjmp	.+22     	; 0x4800 <mrpp_data_add_int16+0x2a>
    {
        storage[i]=metadata[i-begin];
    47ea:	df 01       	movw	r26, r30
    47ec:	a4 1b       	sub	r26, r20
    47ee:	b5 0b       	sbc	r27, r21
    47f0:	a8 0f       	add	r26, r24
    47f2:	b9 1f       	adc	r27, r25
    47f4:	3c 91       	ld	r19, X
    47f6:	df 01       	movw	r26, r30
    47f8:	a6 57       	subi	r26, 0x76	; 118
    47fa:	bc 4f       	sbci	r27, 0xFC	; 252
    47fc:	3c 93       	st	X, r19
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint16_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    47fe:	31 96       	adiw	r30, 0x01	; 1
    4800:	6a 01       	movw	r12, r20
    4802:	26 e0       	ldi	r18, 0x06	; 6
    4804:	c2 0e       	add	r12, r18
    4806:	d1 1c       	adc	r13, r1
    4808:	ec 15       	cp	r30, r12
    480a:	fd 05       	cpc	r31, r13
    480c:	70 f3       	brcs	.-36     	; 0x47ea <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    480e:	98 01       	movw	r18, r16
    4810:	26 50       	subi	r18, 0x06	; 6
    4812:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    4814:	36 95       	lsr	r19
    4816:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    4818:	49 5f       	subi	r20, 0xF9	; 249
    481a:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    481c:	a0 e0       	ldi	r26, 0x00	; 0
    481e:	b0 e0       	ldi	r27, 0x00	; 0
    4820:	16 c0       	rjmp	.+44     	; 0x484e <mrpp_data_add_int16+0x78>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    4822:	cd 01       	movw	r24, r26
    4824:	88 0f       	add	r24, r24
    4826:	99 1f       	adc	r25, r25
    4828:	f6 01       	movw	r30, r12
    482a:	e8 0f       	add	r30, r24
    482c:	f9 1f       	adc	r31, r25
    482e:	8b 01       	movw	r16, r22
    4830:	08 0f       	add	r16, r24
    4832:	19 1f       	adc	r17, r25
    4834:	e8 01       	movw	r28, r16
    4836:	f9 80       	ldd	r15, Y+1	; 0x01
    4838:	e6 57       	subi	r30, 0x76	; 118
    483a:	fc 4f       	sbci	r31, 0xFC	; 252
    483c:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    483e:	84 0f       	add	r24, r20
    4840:	95 1f       	adc	r25, r21
    4842:	18 81       	ld	r17, Y
    4844:	fc 01       	movw	r30, r24
    4846:	e6 57       	subi	r30, 0x76	; 118
    4848:	fc 4f       	sbci	r31, 0xFC	; 252
    484a:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    484c:	11 96       	adiw	r26, 0x01	; 1
    484e:	a2 17       	cp	r26, r18
    4850:	b3 07       	cpc	r27, r19
    4852:	38 f3       	brcs	.-50     	; 0x4822 <mrpp_data_add_int16+0x4c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    4854:	df 91       	pop	r29
    4856:	cf 91       	pop	r28
    4858:	1f 91       	pop	r17
    485a:	0f 91       	pop	r16
    485c:	ff 90       	pop	r15
    485e:	df 90       	pop	r13
    4860:	cf 90       	pop	r12
    4862:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

000067b4 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    67b4:	cf 93       	push	r28
    67b6:	df 93       	push	r29
    67b8:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    67ba:	20 e0       	ldi	r18, 0x00	; 0
    67bc:	30 e0       	ldi	r19, 0x00	; 0
    67be:	0c c0       	rjmp	.+24     	; 0x67d8 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    67c0:	de 01       	movw	r26, r28
    67c2:	a2 0f       	add	r26, r18
    67c4:	b3 1f       	adc	r27, r19
    67c6:	f9 01       	movw	r30, r18
    67c8:	e6 0f       	add	r30, r22
    67ca:	f7 1f       	adc	r31, r23
    67cc:	e6 57       	subi	r30, 0x76	; 118
    67ce:	fc 4f       	sbci	r31, 0xFC	; 252
    67d0:	90 81       	ld	r25, Z
    67d2:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    67d4:	2f 5f       	subi	r18, 0xFF	; 255
    67d6:	3f 4f       	sbci	r19, 0xFF	; 255
    67d8:	24 17       	cp	r18, r20
    67da:	35 07       	cpc	r19, r21
    67dc:	88 f3       	brcs	.-30     	; 0x67c0 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    67de:	df 91       	pop	r29
    67e0:	cf 91       	pop	r28
    67e2:	08 95       	ret

Disassembly of section .text.add_data_types:

000042f4 <add_data_types>:
        package[i*4+13]=state->collections[i].length;
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    42f4:	cf 93       	push	r28
    42f6:	dc 01       	movw	r26, r24
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	4d c0       	rjmp	.+154    	; 0x4396 <add_data_types+0xa2>
    {
        uint8_t bitArray=0x00;
        for (uint8_t index = 0; index < 4; index++)
        {
            //If there is no more collection just skip and use default 0x00
            uint8_t nCol=bIndex*4+index;
    42fc:	28 2f       	mov	r18, r24
    42fe:	22 0f       	add	r18, r18
    4300:	22 0f       	add	r18, r18
    4302:	29 0f       	add	r18, r25
            if(nCol+1>state->nCollections) break;
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	f9 01       	movw	r30, r18
    4308:	31 96       	adiw	r30, 0x01	; 1
    430a:	12 96       	adiw	r26, 0x02	; 2
    430c:	4c 91       	ld	r20, X
    430e:	12 97       	sbiw	r26, 0x02	; 2
    4310:	50 e0       	ldi	r21, 0x00	; 0
    4312:	4e 17       	cp	r20, r30
    4314:	5f 07       	cpc	r21, r31
    4316:	bc f1       	brlt	.+110    	; 0x4386 <add_data_types+0x92>

            uint8_t shifts=index*2;
    4318:	49 2f       	mov	r20, r25
    431a:	44 0f       	add	r20, r20
            switch (state->collections[nCol].type)
    431c:	f9 01       	movw	r30, r18
    431e:	ee 0f       	add	r30, r30
    4320:	ff 1f       	adc	r31, r31
    4322:	22 0f       	add	r18, r18
    4324:	33 1f       	adc	r19, r19
    4326:	22 0f       	add	r18, r18
    4328:	33 1f       	adc	r19, r19
    432a:	22 0f       	add	r18, r18
    432c:	33 1f       	adc	r19, r19
    432e:	e2 0f       	add	r30, r18
    4330:	f3 1f       	adc	r31, r19
    4332:	ea 0f       	add	r30, r26
    4334:	fb 1f       	adc	r31, r27
    4336:	27 81       	ldd	r18, Z+7	; 0x07
    4338:	22 30       	cpi	r18, 0x02	; 2
    433a:	69 f0       	breq	.+26     	; 0x4356 <add_data_types+0x62>
    433c:	24 30       	cpi	r18, 0x04	; 4
    433e:	a1 f0       	breq	.+40     	; 0x4368 <add_data_types+0x74>
    4340:	21 30       	cpi	r18, 0x01	; 1
    4342:	d1 f4       	brne	.+52     	; 0x4378 <add_data_types+0x84>
            {
                case T_INT8:
                    bitArray |=1 << shifts;
    4344:	21 e0       	ldi	r18, 0x01	; 1
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	02 c0       	rjmp	.+4      	; 0x434e <add_data_types+0x5a>
    434a:	22 0f       	add	r18, r18
    434c:	33 1f       	adc	r19, r19
    434e:	4a 95       	dec	r20
    4350:	e2 f7       	brpl	.-8      	; 0x434a <add_data_types+0x56>
    4352:	c2 2b       	or	r28, r18
                    break;
    4354:	11 c0       	rjmp	.+34     	; 0x4378 <add_data_types+0x84>
                
                case T_INT16:
                    bitArray |= 2 << shifts;
    4356:	22 e0       	ldi	r18, 0x02	; 2
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	02 c0       	rjmp	.+4      	; 0x4360 <add_data_types+0x6c>
    435c:	22 0f       	add	r18, r18
    435e:	33 1f       	adc	r19, r19
    4360:	4a 95       	dec	r20
    4362:	e2 f7       	brpl	.-8      	; 0x435c <add_data_types+0x68>
    4364:	c2 2b       	or	r28, r18
                    break;
    4366:	08 c0       	rjmp	.+16     	; 0x4378 <add_data_types+0x84>

                case T_FLOAT:
                    bitArray |= 3 << shifts;
    4368:	23 e0       	ldi	r18, 0x03	; 3
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	02 c0       	rjmp	.+4      	; 0x4372 <add_data_types+0x7e>
    436e:	22 0f       	add	r18, r18
    4370:	33 1f       	adc	r19, r19
    4372:	4a 95       	dec	r20
    4374:	e2 f7       	brpl	.-8      	; 0x436e <add_data_types+0x7a>
    4376:	c2 2b       	or	r28, r18

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    {
        uint8_t bitArray=0x00;
        for (uint8_t index = 0; index < 4; index++)
    4378:	9f 5f       	subi	r25, 0xFF	; 255
    437a:	02 c0       	rjmp	.+4      	; 0x4380 <add_data_types+0x8c>
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	c0 e0       	ldi	r28, 0x00	; 0
    4380:	94 30       	cpi	r25, 0x04	; 4
    4382:	08 f4       	brcc	.+2      	; 0x4386 <add_data_types+0x92>
    4384:	bb cf       	rjmp	.-138    	; 0x42fc <add_data_types+0x8>
                    break;
            }

        }
        //set from the end
        dt[5-bIndex]=bitArray;
    4386:	e5 e0       	ldi	r30, 0x05	; 5
    4388:	f0 e0       	ldi	r31, 0x00	; 0
    438a:	e8 1b       	sub	r30, r24
    438c:	f1 09       	sbc	r31, r1
    438e:	e6 0f       	add	r30, r22
    4390:	f7 1f       	adc	r31, r23
    4392:	c0 83       	st	Z, r28
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    4394:	8f 5f       	subi	r24, 0xFF	; 255
    4396:	86 30       	cpi	r24, 0x06	; 6
    4398:	88 f3       	brcs	.-30     	; 0x437c <add_data_types+0x88>
        //set from the end
        dt[5-bIndex]=bitArray;
        
    }
    
} 
    439a:	cf 91       	pop	r28
    439c:	08 95       	ret

Disassembly of section .text.update_bodies:

00002872 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    2872:	cf 93       	push	r28
    2874:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    2876:	26 2f       	mov	r18, r22
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	c9 01       	movw	r24, r18
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f9 01       	movw	r30, r18
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	22 0f       	add	r18, r18
    2886:	33 1f       	adc	r19, r19
    2888:	22 0f       	add	r18, r18
    288a:	33 1f       	adc	r19, r19
    288c:	22 0f       	add	r18, r18
    288e:	33 1f       	adc	r19, r19
    2890:	e2 0f       	add	r30, r18
    2892:	f3 1f       	adc	r31, r19
    2894:	ea 0f       	add	r30, r26
    2896:	fb 1f       	adc	r31, r27
    2898:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    289a:	c0 e0       	ldi	r28, 0x00	; 0
    289c:	25 c0       	rjmp	.+74     	; 0x28e8 <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    289e:	82 17       	cp	r24, r18
    28a0:	93 07       	cpc	r25, r19
    28a2:	09 f1       	breq	.+66     	; 0x28e6 <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    28a4:	a9 01       	movw	r20, r18
    28a6:	44 0f       	add	r20, r20
    28a8:	55 1f       	adc	r21, r21
    28aa:	44 0f       	add	r20, r20
    28ac:	55 1f       	adc	r21, r21
    28ae:	44 0f       	add	r20, r20
    28b0:	55 1f       	adc	r21, r21
    28b2:	f9 01       	movw	r30, r18
    28b4:	ee 0f       	add	r30, r30
    28b6:	ff 1f       	adc	r31, r31
    28b8:	e4 0f       	add	r30, r20
    28ba:	f5 1f       	adc	r31, r21
    28bc:	ea 0f       	add	r30, r26
    28be:	fb 1f       	adc	r31, r27
    28c0:	43 85       	ldd	r20, Z+11	; 0x0b
    28c2:	74 13       	cpse	r23, r20
    28c4:	10 c0       	rjmp	.+32     	; 0x28e6 <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    28c6:	f9 01       	movw	r30, r18
    28c8:	ee 0f       	add	r30, r30
    28ca:	ff 1f       	adc	r31, r31
    28cc:	22 0f       	add	r18, r18
    28ce:	33 1f       	adc	r19, r19
    28d0:	22 0f       	add	r18, r18
    28d2:	33 1f       	adc	r19, r19
    28d4:	22 0f       	add	r18, r18
    28d6:	33 1f       	adc	r19, r19
    28d8:	e2 0f       	add	r30, r18
    28da:	f3 1f       	adc	r31, r19
    28dc:	ea 0f       	add	r30, r26
    28de:	fb 1f       	adc	r31, r27
    28e0:	24 85       	ldd	r18, Z+12	; 0x0c
    28e2:	23 30       	cpi	r18, 0x03	; 3
    28e4:	41 f4       	brne	.+16     	; 0x28f6 <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    28e6:	cf 5f       	subi	r28, 0xFF	; 255
    28e8:	2c 2f       	mov	r18, r28
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	28 17       	cp	r18, r24
    28ee:	39 07       	cpc	r19, r25
    28f0:	b4 f2       	brlt	.-84     	; 0x289e <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    28f2:	21 e0       	ldi	r18, 0x01	; 1
    28f4:	01 c0       	rjmp	.+2      	; 0x28f8 <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    28f6:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    28f8:	22 23       	and	r18, r18
    28fa:	39 f0       	breq	.+14     	; 0x290a <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    28fc:	fd 01       	movw	r30, r26
    28fe:	e7 0f       	add	r30, r23
    2900:	f1 1d       	adc	r31, r1
    2902:	ec 55       	subi	r30, 0x5C	; 92
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	21 e0       	ldi	r18, 0x01	; 1
    2908:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    290a:	9c 01       	movw	r18, r24
    290c:	22 0f       	add	r18, r18
    290e:	33 1f       	adc	r19, r19
    2910:	22 0f       	add	r18, r18
    2912:	33 1f       	adc	r19, r19
    2914:	22 0f       	add	r18, r18
    2916:	33 1f       	adc	r19, r19
    2918:	fc 01       	movw	r30, r24
    291a:	ee 0f       	add	r30, r30
    291c:	ff 1f       	adc	r31, r31
    291e:	e2 0f       	add	r30, r18
    2920:	f3 1f       	adc	r31, r19
    2922:	ea 0f       	add	r30, r26
    2924:	fb 1f       	adc	r31, r27
    2926:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    2928:	29 c0       	rjmp	.+82     	; 0x297c <update_bodies+0x10a>
    {
        if(i==collectionId-1) continue;
    292a:	46 2f       	mov	r20, r22
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	84 17       	cp	r24, r20
    2930:	95 07       	cpc	r25, r21
    2932:	19 f1       	breq	.+70     	; 0x297a <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    2934:	9a 01       	movw	r18, r20
    2936:	2f 5f       	subi	r18, 0xFF	; 255
    2938:	3f 4f       	sbci	r19, 0xFF	; 255
    293a:	f9 01       	movw	r30, r18
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	22 0f       	add	r18, r18
    2942:	33 1f       	adc	r19, r19
    2944:	22 0f       	add	r18, r18
    2946:	33 1f       	adc	r19, r19
    2948:	22 0f       	add	r18, r18
    294a:	33 1f       	adc	r19, r19
    294c:	e2 0f       	add	r30, r18
    294e:	f3 1f       	adc	r31, r19
    2950:	ea 0f       	add	r30, r26
    2952:	fb 1f       	adc	r31, r27
    2954:	20 81       	ld	r18, Z
    2956:	c2 13       	cpse	r28, r18
    2958:	10 c0       	rjmp	.+32     	; 0x297a <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    295a:	fa 01       	movw	r30, r20
    295c:	ee 0f       	add	r30, r30
    295e:	ff 1f       	adc	r31, r31
    2960:	44 0f       	add	r20, r20
    2962:	55 1f       	adc	r21, r21
    2964:	44 0f       	add	r20, r20
    2966:	55 1f       	adc	r21, r21
    2968:	44 0f       	add	r20, r20
    296a:	55 1f       	adc	r21, r21
    296c:	e4 0f       	add	r30, r20
    296e:	f5 1f       	adc	r31, r21
    2970:	ea 0f       	add	r30, r26
    2972:	fb 1f       	adc	r31, r27
    2974:	24 85       	ldd	r18, Z+12	; 0x0c
    2976:	23 30       	cpi	r18, 0x03	; 3
    2978:	41 f4       	brne	.+16     	; 0x298a <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    297a:	6f 5f       	subi	r22, 0xFF	; 255
    297c:	12 96       	adiw	r26, 0x02	; 2
    297e:	2c 91       	ld	r18, X
    2980:	12 97       	sbiw	r26, 0x02	; 2
    2982:	62 17       	cp	r22, r18
    2984:	90 f2       	brcs	.-92     	; 0x292a <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	01 c0       	rjmp	.+2      	; 0x298c <update_bodies+0x11a>
    {
        if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    298a:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    298c:	88 23       	and	r24, r24
    298e:	41 f0       	breq	.+16     	; 0x29a0 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    2990:	fd 01       	movw	r30, r26
    2992:	ec 0f       	add	r30, r28
    2994:	f1 1d       	adc	r31, r1
    2996:	ec 55       	subi	r30, 0x5C	; 92
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	80 83       	st	Z, r24
    299e:	06 c0       	rjmp	.+12     	; 0x29ac <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    29a0:	fd 01       	movw	r30, r26
    29a2:	ec 0f       	add	r30, r28
    29a4:	f1 1d       	adc	r31, r1
    29a6:	ec 55       	subi	r30, 0x5C	; 92
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    29ac:	8c 2f       	mov	r24, r28
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	87 1b       	sub	r24, r23
    29b2:	91 09       	sbc	r25, r1
    29b4:	02 97       	sbiw	r24, 0x02	; 2
    29b6:	64 f0       	brlt	.+24     	; 0x29d0 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    29b8:	7f 5f       	subi	r23, 0xFF	; 255
    29ba:	08 c0       	rjmp	.+16     	; 0x29cc <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    29bc:	fd 01       	movw	r30, r26
    29be:	e7 0f       	add	r30, r23
    29c0:	f1 1d       	adc	r31, r1
    29c2:	ec 55       	subi	r30, 0x5C	; 92
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    29ca:	7f 5f       	subi	r23, 0xFF	; 255
    29cc:	7c 17       	cp	r23, r28
    29ce:	b0 f3       	brcs	.-20     	; 0x29bc <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    29d0:	cf 91       	pop	r28
    29d2:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

000022c4 <mrpp_state_init>:


static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    22c4:	af 92       	push	r10
    22c6:	bf 92       	push	r11
    22c8:	cf 92       	push	r12
    22ca:	df 92       	push	r13
    22cc:	ef 92       	push	r14
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	6c 01       	movw	r12, r24
    22da:	a2 2e       	mov	r10, r18
    state->groupId=groupId;
    22dc:	fc 01       	movw	r30, r24
    22de:	60 83       	st	Z, r22
    state->nCollections=nCollections;
    22e0:	22 83       	std	Z+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    22e2:	b1 2c       	mov	r11, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    22e4:	00 e0       	ldi	r16, 0x00	; 0
    22e6:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    22e8:	70 c0       	rjmp	.+224    	; 0x23ca <mrpp_state_init+0x106>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    22ea:	eb 2d       	mov	r30, r11
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	df 01       	movw	r26, r30
    22f0:	aa 0f       	add	r26, r26
    22f2:	bb 1f       	adc	r27, r27
    22f4:	aa 0f       	add	r26, r26
    22f6:	bb 1f       	adc	r27, r27
    22f8:	ae 0f       	add	r26, r30
    22fa:	bf 1f       	adc	r27, r31
    22fc:	a4 0f       	add	r26, r20
    22fe:	b5 1f       	adc	r27, r21
    2300:	12 96       	adiw	r26, 0x02	; 2
    2302:	2d 91       	ld	r18, X+
    2304:	3c 91       	ld	r19, X
    2306:	13 97       	sbiw	r26, 0x03	; 3
    2308:	ef 01       	movw	r28, r30
    230a:	cc 0f       	add	r28, r28
    230c:	dd 1f       	adc	r29, r29
    230e:	cf 01       	movw	r24, r30
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	c8 0f       	add	r28, r24
    231e:	d9 1f       	adc	r29, r25
    2320:	cc 0d       	add	r28, r12
    2322:	dd 1d       	adc	r29, r13
    2324:	39 87       	std	Y+9, r19	; 0x09
    2326:	28 87       	std	Y+8, r18	; 0x08

        //type
        state->collections[i].type=collections[i].type;
    2328:	14 96       	adiw	r26, 0x04	; 4
    232a:	8c 91       	ld	r24, X
    232c:	14 97       	sbiw	r26, 0x04	; 4
    232e:	8f 83       	std	Y+7, r24	; 0x07

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    2330:	1c 83       	std	Y+4, r17	; 0x04
    2332:	0b 83       	std	Y+3, r16	; 0x03
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    2334:	8d 91       	ld	r24, X+
    2336:	9c 91       	ld	r25, X
    2338:	11 97       	sbiw	r26, 0x01	; 1
    233a:	14 96       	adiw	r26, 0x04	; 4
    233c:	2c 91       	ld	r18, X
    233e:	28 9f       	mul	r18, r24
    2340:	70 01       	movw	r14, r0
    2342:	29 9f       	mul	r18, r25
    2344:	f0 0c       	add	r15, r0
    2346:	11 24       	eor	r1, r1
    2348:	86 e0       	ldi	r24, 0x06	; 6
    234a:	e8 0e       	add	r14, r24
    234c:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    234e:	fe 82       	std	Y+6, r15	; 0x06
    2350:	ed 82       	std	Y+5, r14	; 0x05
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    2352:	98 01       	movw	r18, r16
    2354:	a1 ed       	ldi	r26, 0xD1	; 209
    2356:	b1 e5       	ldi	r27, 0x51	; 81
    2358:	0e 94 35 36 	call	0x6c6a	; 0x6c6a <__umulhisi3>
    235c:	28 1b       	sub	r18, r24
    235e:	39 0b       	sbc	r19, r25
    2360:	36 95       	lsr	r19
    2362:	27 95       	ror	r18
    2364:	82 0f       	add	r24, r18
    2366:	93 1f       	adc	r25, r19
    2368:	00 24       	eor	r0, r0
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	00 1c       	adc	r0, r0
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	00 1c       	adc	r0, r0
    2376:	89 2f       	mov	r24, r25
    2378:	90 2d       	mov	r25, r0
    237a:	31 96       	adiw	r30, 0x01	; 1
    237c:	9f 01       	movw	r18, r30
    237e:	22 0f       	add	r18, r18
    2380:	33 1f       	adc	r19, r19
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	ee 0f       	add	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	ee 0f       	add	r30, r30
    238c:	ff 1f       	adc	r31, r31
    238e:	e2 0f       	add	r30, r18
    2390:	f3 1f       	adc	r31, r19
    2392:	ec 0d       	add	r30, r12
    2394:	fd 1d       	adc	r31, r13
    2396:	80 83       	st	Z, r24
        uint8_t endsInBody=(startingIndex+len-1)/DR_BODY_PAYLOAD_SIZE;
    2398:	0e 0d       	add	r16, r14
    239a:	1f 1d       	adc	r17, r15
    239c:	f8 01       	movw	r30, r16
    239e:	31 97       	sbiw	r30, 0x01	; 1
    23a0:	9f 01       	movw	r18, r30
    23a2:	0e 94 35 36 	call	0x6c6a	; 0x6c6a <__umulhisi3>
    23a6:	e8 1b       	sub	r30, r24
    23a8:	f9 0b       	sbc	r31, r25
    23aa:	f6 95       	lsr	r31
    23ac:	e7 95       	ror	r30
    23ae:	8e 0f       	add	r24, r30
    23b0:	9f 1f       	adc	r25, r31
    23b2:	00 24       	eor	r0, r0
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	00 1c       	adc	r0, r0
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	00 1c       	adc	r0, r0
    23c0:	89 2f       	mov	r24, r25
    23c2:	90 2d       	mov	r25, r0

        //Simpler solution above
        state->collections[i].endsInBody=endsInBody;
    23c4:	8b 87       	std	Y+11, r24	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    23c6:	1c 86       	std	Y+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    23c8:	b3 94       	inc	r11
    23ca:	ba 14       	cp	r11, r10
    23cc:	08 f4       	brcc	.+2      	; 0x23d0 <mrpp_state_init+0x10c>
    23ce:	8d cf       	rjmp	.-230    	; 0x22ea <mrpp_state_init+0x26>
        startingIndex+=len;      
    }

    //Calculate lastSubId
    
    uint8_t lastSubId=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    23d0:	01 50       	subi	r16, 0x01	; 1
    23d2:	11 09       	sbc	r17, r1
    23d4:	98 01       	movw	r18, r16
    23d6:	a1 ed       	ldi	r26, 0xD1	; 209
    23d8:	b1 e5       	ldi	r27, 0x51	; 81
    23da:	0e 94 35 36 	call	0x6c6a	; 0x6c6a <__umulhisi3>
    23de:	08 1b       	sub	r16, r24
    23e0:	19 0b       	sbc	r17, r25
    23e2:	16 95       	lsr	r17
    23e4:	07 95       	ror	r16
    23e6:	80 0f       	add	r24, r16
    23e8:	91 1f       	adc	r25, r17
    23ea:	00 24       	eor	r0, r0
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	00 1c       	adc	r0, r0
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	00 1c       	adc	r0, r0
    23f8:	89 2f       	mov	r24, r25
    23fa:	90 2d       	mov	r25, r0
    23fc:	92 e0       	ldi	r25, 0x02	; 2
    23fe:	98 0f       	add	r25, r24
    state->lastSubId=lastSubId;
    2400:	f6 01       	movw	r30, r12
    2402:	91 83       	std	Z+1, r25	; 0x01
    
    //calculate bodies
    uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    2404:	8f 5f       	subi	r24, 0xFF	; 255
    state->nBodies=nBodies;
    2406:	ed 55       	subi	r30, 0x5D	; 93
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 83       	st	Z, r24

    for (uint8_t i = 0; i < nBodies; i++)
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	07 c0       	rjmp	.+14     	; 0x241e <mrpp_state_init+0x15a>
    {
        state->bodies[i]=WAITING;
    2410:	f6 01       	movw	r30, r12
    2412:	e9 0f       	add	r30, r25
    2414:	f1 1d       	adc	r31, r1
    2416:	ec 55       	subi	r30, 0x5C	; 92
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	10 82       	st	Z, r1
    
    //calculate bodies
    uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    241c:	9f 5f       	subi	r25, 0xFF	; 255
    241e:	98 17       	cp	r25, r24
    2420:	b8 f3       	brcs	.-18     	; 0x2410 <mrpp_state_init+0x14c>
    {
        state->bodies[i]=WAITING;
    }
}
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	df 90       	pop	r13
    2430:	cf 90       	pop	r12
    2432:	bf 90       	pop	r11
    2434:	af 90       	pop	r10
    2436:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

0000439e <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    439e:	0f 93       	push	r16
    43a0:	1f 93       	push	r17
    43a2:	cf 93       	push	r28
    43a4:	df 93       	push	r29
    43a6:	8c 01       	movw	r16, r24
    43a8:	eb 01       	movw	r28, r22
    package[0]=0;
    43aa:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    43ac:	fc 01       	movw	r30, r24
    43ae:	81 81       	ldd	r24, Z+1	; 0x01
    43b0:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    43b2:	1a 82       	std	Y+2, r1	; 0x02

    //N collections
    package[3]=state->nCollections;
    43b4:	82 81       	ldd	r24, Z+2	; 0x02
    43b6:	8b 83       	std	Y+3, r24	; 0x03

    //add data type
    add_data_types(state, &package[4]);
    43b8:	6c 5f       	subi	r22, 0xFC	; 252
    43ba:	7f 4f       	sbci	r23, 0xFF	; 255
    43bc:	c8 01       	movw	r24, r16
    43be:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	35 c0       	rjmp	.+106    	; 0x4430 <mrpp_state_get_header+0x92>
    {
        package[i*4+10]=state->collections[i].startIndex >> 8;
    43c6:	82 2f       	mov	r24, r18
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	dc 01       	movw	r26, r24
    43cc:	aa 0f       	add	r26, r26
    43ce:	bb 1f       	adc	r27, r27
    43d0:	aa 0f       	add	r26, r26
    43d2:	bb 1f       	adc	r27, r27
    43d4:	ad 01       	movw	r20, r26
    43d6:	46 5f       	subi	r20, 0xF6	; 246
    43d8:	5f 4f       	sbci	r21, 0xFF	; 255
    43da:	4c 0f       	add	r20, r28
    43dc:	5d 1f       	adc	r21, r29
    43de:	fc 01       	movw	r30, r24
    43e0:	ee 0f       	add	r30, r30
    43e2:	ff 1f       	adc	r31, r31
    43e4:	88 0f       	add	r24, r24
    43e6:	99 1f       	adc	r25, r25
    43e8:	88 0f       	add	r24, r24
    43ea:	99 1f       	adc	r25, r25
    43ec:	88 0f       	add	r24, r24
    43ee:	99 1f       	adc	r25, r25
    43f0:	e8 0f       	add	r30, r24
    43f2:	f9 1f       	adc	r31, r25
    43f4:	bf 01       	movw	r22, r30
    43f6:	60 0f       	add	r22, r16
    43f8:	71 1f       	adc	r23, r17
    43fa:	fb 01       	movw	r30, r22
    43fc:	84 81       	ldd	r24, Z+4	; 0x04
    43fe:	fa 01       	movw	r30, r20
    4400:	80 83       	st	Z, r24
        package[i*4+11]=state->collections[i].startIndex;
    4402:	cd 01       	movw	r24, r26
    4404:	0b 96       	adiw	r24, 0x0b	; 11
    4406:	8c 0f       	add	r24, r28
    4408:	9d 1f       	adc	r25, r29
    440a:	fb 01       	movw	r30, r22
    440c:	33 81       	ldd	r19, Z+3	; 0x03
    440e:	fc 01       	movw	r30, r24
    4410:	30 83       	st	Z, r19
        package[i*4+12]=state->collections[i].length>>8;
    4412:	cd 01       	movw	r24, r26
    4414:	0c 96       	adiw	r24, 0x0c	; 12
    4416:	8c 0f       	add	r24, r28
    4418:	9d 1f       	adc	r25, r29
    441a:	fb 01       	movw	r30, r22
    441c:	36 81       	ldd	r19, Z+6	; 0x06
    441e:	fc 01       	movw	r30, r24
    4420:	30 83       	st	Z, r19
        package[i*4+13]=state->collections[i].length;
    4422:	1d 96       	adiw	r26, 0x0d	; 13
    4424:	ac 0f       	add	r26, r28
    4426:	bd 1f       	adc	r27, r29
    4428:	fb 01       	movw	r30, r22
    442a:	85 81       	ldd	r24, Z+5	; 0x05
    442c:	8c 93       	st	X, r24
    package[3]=state->nCollections;

    //add data type
    add_data_types(state, &package[4]);

    for (uint8_t i = 0; i < state->nCollections; i++)
    442e:	2f 5f       	subi	r18, 0xFF	; 255
    4430:	f8 01       	movw	r30, r16
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	28 17       	cp	r18, r24
    4436:	38 f2       	brcs	.-114    	; 0x43c6 <mrpp_state_get_header+0x28>
        package[i*4+11]=state->collections[i].startIndex;
        package[i*4+12]=state->collections[i].length>>8;
        package[i*4+13]=state->collections[i].length;
    }
    
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    4438:	88 0f       	add	r24, r24
    443a:	88 0f       	add	r24, r24
}
    443c:	86 5f       	subi	r24, 0xF6	; 246
    443e:	df 91       	pop	r29
    4440:	cf 91       	pop	r28
    4442:	1f 91       	pop	r17
    4444:	0f 91       	pop	r16
    4446:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

0000419e <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    419e:	0f 93       	push	r16
    41a0:	1f 93       	push	r17
    41a2:	cf 93       	push	r28
    41a4:	df 93       	push	r29
    41a6:	8c 01       	movw	r16, r24
    41a8:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    41aa:	fc 01       	movw	r30, r24
    41ac:	81 81       	ldd	r24, Z+1	; 0x01
    41ae:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    41b0:	81 81       	ldd	r24, Z+1	; 0x01
    41b2:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    41b4:	1a 82       	std	Y+2, r1	; 0x02

    //N collections
    package[3]=state->nCollections;
    41b6:	82 81       	ldd	r24, Z+2	; 0x02
    41b8:	8b 83       	std	Y+3, r24	; 0x03

    //add data type
    add_data_types(state, &package[4]);
    41ba:	6c 5f       	subi	r22, 0xFC	; 252
    41bc:	7f 4f       	sbci	r23, 0xFF	; 255
    41be:	c8 01       	movw	r24, r16
    41c0:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    41c4:	20 e0       	ldi	r18, 0x00	; 0
    41c6:	35 c0       	rjmp	.+106    	; 0x4232 <mrpp_state_get_tail+0x94>
    {
        package[i*4+10]=state->collections[i].startIndex >> 8;
    41c8:	82 2f       	mov	r24, r18
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	dc 01       	movw	r26, r24
    41ce:	aa 0f       	add	r26, r26
    41d0:	bb 1f       	adc	r27, r27
    41d2:	aa 0f       	add	r26, r26
    41d4:	bb 1f       	adc	r27, r27
    41d6:	ad 01       	movw	r20, r26
    41d8:	46 5f       	subi	r20, 0xF6	; 246
    41da:	5f 4f       	sbci	r21, 0xFF	; 255
    41dc:	4c 0f       	add	r20, r28
    41de:	5d 1f       	adc	r21, r29
    41e0:	fc 01       	movw	r30, r24
    41e2:	ee 0f       	add	r30, r30
    41e4:	ff 1f       	adc	r31, r31
    41e6:	88 0f       	add	r24, r24
    41e8:	99 1f       	adc	r25, r25
    41ea:	88 0f       	add	r24, r24
    41ec:	99 1f       	adc	r25, r25
    41ee:	88 0f       	add	r24, r24
    41f0:	99 1f       	adc	r25, r25
    41f2:	e8 0f       	add	r30, r24
    41f4:	f9 1f       	adc	r31, r25
    41f6:	bf 01       	movw	r22, r30
    41f8:	60 0f       	add	r22, r16
    41fa:	71 1f       	adc	r23, r17
    41fc:	fb 01       	movw	r30, r22
    41fe:	84 81       	ldd	r24, Z+4	; 0x04
    4200:	fa 01       	movw	r30, r20
    4202:	80 83       	st	Z, r24
        package[i*4+11]=state->collections[i].startIndex;
    4204:	cd 01       	movw	r24, r26
    4206:	0b 96       	adiw	r24, 0x0b	; 11
    4208:	8c 0f       	add	r24, r28
    420a:	9d 1f       	adc	r25, r29
    420c:	fb 01       	movw	r30, r22
    420e:	33 81       	ldd	r19, Z+3	; 0x03
    4210:	fc 01       	movw	r30, r24
    4212:	30 83       	st	Z, r19
        package[i*4+12]=state->collections[i].length>>8;
    4214:	cd 01       	movw	r24, r26
    4216:	0c 96       	adiw	r24, 0x0c	; 12
    4218:	8c 0f       	add	r24, r28
    421a:	9d 1f       	adc	r25, r29
    421c:	fb 01       	movw	r30, r22
    421e:	36 81       	ldd	r19, Z+6	; 0x06
    4220:	fc 01       	movw	r30, r24
    4222:	30 83       	st	Z, r19
        package[i*4+13]=state->collections[i].length;
    4224:	1d 96       	adiw	r26, 0x0d	; 13
    4226:	ac 0f       	add	r26, r28
    4228:	bd 1f       	adc	r27, r29
    422a:	fb 01       	movw	r30, r22
    422c:	85 81       	ldd	r24, Z+5	; 0x05
    422e:	8c 93       	st	X, r24
    package[3]=state->nCollections;

    //add data type
    add_data_types(state, &package[4]);

    for (uint8_t i = 0; i < state->nCollections; i++)
    4230:	2f 5f       	subi	r18, 0xFF	; 255
    4232:	f8 01       	movw	r30, r16
    4234:	82 81       	ldd	r24, Z+2	; 0x02
    4236:	28 17       	cp	r18, r24
    4238:	38 f2       	brcs	.-114    	; 0x41c8 <mrpp_state_get_tail+0x2a>
        package[i*4+10]=state->collections[i].startIndex >> 8;
        package[i*4+11]=state->collections[i].startIndex;
        package[i*4+12]=state->collections[i].length>>8;
        package[i*4+13]=state->collections[i].length;
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    423a:	88 0f       	add	r24, r24
    423c:	88 0f       	add	r24, r24
}
    423e:	86 5f       	subi	r24, 0xF6	; 246
    4240:	df 91       	pop	r29
    4242:	cf 91       	pop	r28
    4244:	1f 91       	pop	r17
    4246:	0f 91       	pop	r16
    4248:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00004864 <mrpp_state_set_collection>:
    }
    
} 


void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    4864:	0f 93       	push	r16
    4866:	1f 93       	push	r17
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
    486c:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    486e:	a6 2f       	mov	r26, r22
    4870:	b0 e0       	ldi	r27, 0x00	; 0
    4872:	11 97       	sbiw	r26, 0x01	; 1
    4874:	fd 01       	movw	r30, r26
    4876:	ee 0f       	add	r30, r30
    4878:	ff 1f       	adc	r31, r31
    487a:	cd 01       	movw	r24, r26
    487c:	88 0f       	add	r24, r24
    487e:	99 1f       	adc	r25, r25
    4880:	88 0f       	add	r24, r24
    4882:	99 1f       	adc	r25, r25
    4884:	88 0f       	add	r24, r24
    4886:	99 1f       	adc	r25, r25
    4888:	e8 0f       	add	r30, r24
    488a:	f9 1f       	adc	r31, r25
    488c:	e0 0f       	add	r30, r16
    488e:	f1 1f       	adc	r31, r17
    4890:	83 e0       	ldi	r24, 0x03	; 3
    4892:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	0a c0       	rjmp	.+20     	; 0x48ac <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    4898:	e9 2f       	mov	r30, r25
    489a:	f0 e0       	ldi	r31, 0x00	; 0
    489c:	e9 01       	movw	r28, r18
    489e:	ce 0f       	add	r28, r30
    48a0:	df 1f       	adc	r29, r31
    48a2:	e4 0f       	add	r30, r20
    48a4:	f5 1f       	adc	r31, r21
    48a6:	80 81       	ld	r24, Z
    48a8:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    48aa:	9f 5f       	subi	r25, 0xFF	; 255
    48ac:	94 30       	cpi	r25, 0x04	; 4
    48ae:	a0 f3       	brcs	.-24     	; 0x4898 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    48b0:	cd 01       	movw	r24, r26
    48b2:	88 0f       	add	r24, r24
    48b4:	99 1f       	adc	r25, r25
    48b6:	aa 0f       	add	r26, r26
    48b8:	bb 1f       	adc	r27, r27
    48ba:	aa 0f       	add	r26, r26
    48bc:	bb 1f       	adc	r27, r27
    48be:	aa 0f       	add	r26, r26
    48c0:	bb 1f       	adc	r27, r27
    48c2:	a8 0f       	add	r26, r24
    48c4:	b9 1f       	adc	r27, r25
    48c6:	a0 0f       	add	r26, r16
    48c8:	b1 1f       	adc	r27, r17
    48ca:	19 96       	adiw	r26, 0x09	; 9
    48cc:	8c 91       	ld	r24, X
    48ce:	19 97       	sbiw	r26, 0x09	; 9
    48d0:	f9 01       	movw	r30, r18
    48d2:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    48d4:	18 96       	adiw	r26, 0x08	; 8
    48d6:	8c 91       	ld	r24, X
    48d8:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    48da:	c8 01       	movw	r24, r16
    48dc:	0e 94 39 14 	call	0x2872	; 0x2872 <update_bodies>
}
    48e0:	df 91       	pop	r29
    48e2:	cf 91       	pop	r28
    48e4:	1f 91       	pop	r17
    48e6:	0f 91       	pop	r16
    48e8:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

000067e4 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    67e4:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	0b c0       	rjmp	.+22     	; 0x6800 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    67ea:	29 2f       	mov	r18, r25
    67ec:	30 e0       	ldi	r19, 0x00	; 0
    67ee:	fa 01       	movw	r30, r20
    67f0:	e2 0f       	add	r30, r18
    67f2:	f3 1f       	adc	r31, r19
    67f4:	ec 55       	subi	r30, 0x5C	; 92
    67f6:	ff 4f       	sbci	r31, 0xFF	; 255
    67f8:	80 81       	ld	r24, Z
    67fa:	81 30       	cpi	r24, 0x01	; 1
    67fc:	49 f0       	breq	.+18     	; 0x6810 <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    67fe:	9f 5f       	subi	r25, 0xFF	; 255
    6800:	fa 01       	movw	r30, r20
    6802:	ed 55       	subi	r30, 0x5D	; 93
    6804:	ff 4f       	sbci	r31, 0xFF	; 255
    6806:	80 81       	ld	r24, Z
    6808:	98 17       	cp	r25, r24
    680a:	78 f3       	brcs	.-34     	; 0x67ea <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    680c:	2f ef       	ldi	r18, 0xFF	; 255
    680e:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    6810:	c9 01       	movw	r24, r18
    6812:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00006928 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    6928:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    692a:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    692c:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    692e:	0a c0       	rjmp	.+20     	; 0x6944 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    6930:	f9 01       	movw	r30, r18
    6932:	e9 0f       	add	r30, r25
    6934:	f1 1d       	adc	r31, r1
    6936:	ec 55       	subi	r30, 0x5C	; 92
    6938:	ff 4f       	sbci	r31, 0xFF	; 255
    693a:	40 81       	ld	r20, Z
    693c:	42 30       	cpi	r20, 0x02	; 2
    693e:	09 f0       	breq	.+2      	; 0x6942 <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    6940:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    6942:	9f 5f       	subi	r25, 0xFF	; 255
    6944:	f9 01       	movw	r30, r18
    6946:	ed 55       	subi	r30, 0x5D	; 93
    6948:	ff 4f       	sbci	r31, 0xFF	; 255
    694a:	40 81       	ld	r20, Z
    694c:	94 17       	cp	r25, r20
    694e:	80 f3       	brcs	.-32     	; 0x6930 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    6950:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

000038dc <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    38dc:	8f 92       	push	r8
    38de:	9f 92       	push	r9
    38e0:	af 92       	push	r10
    38e2:	bf 92       	push	r11
    38e4:	cf 92       	push	r12
    38e6:	df 92       	push	r13
    38e8:	ef 92       	push	r14
    38ea:	ff 92       	push	r15
    38ec:	0f 93       	push	r16
    38ee:	1f 93       	push	r17
    38f0:	cf 93       	push	r28
    38f2:	df 93       	push	r29
    38f4:	ec 01       	movw	r28, r24
    38f6:	6b 01       	movw	r12, r22
    38f8:	5a 01       	movw	r10, r20
    38fa:	49 01       	movw	r8, r18
    int16_t res=mrpp_state_is_body_ready(state);
    38fc:	0e 94 f2 33 	call	0x67e4	; 0x67e4 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    3900:	8f 3f       	cpi	r24, 0xFF	; 255
    3902:	2f ef       	ldi	r18, 0xFF	; 255
    3904:	92 07       	cpc	r25, r18
    3906:	09 f4       	brne	.+2      	; 0x390a <mrpp_state_get_ready_body+0x2e>
    3908:	51 c0       	rjmp	.+162    	; 0x39ac <mrpp_state_get_ready_body+0xd0>
    390a:	8c 15       	cp	r24, r12
    390c:	9d 05       	cpc	r25, r13
    390e:	09 f0       	breq	.+2      	; 0x3912 <mrpp_state_get_ready_body+0x36>
    3910:	4f c0       	rjmp	.+158    	; 0x39b0 <mrpp_state_get_ready_body+0xd4>
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	09 c0       	rjmp	.+18     	; 0x3928 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    3916:	fe 01       	movw	r30, r28
    3918:	e8 0f       	add	r30, r24
    391a:	f1 1d       	adc	r31, r1
    391c:	ec 55       	subi	r30, 0x5C	; 92
    391e:	ff 4f       	sbci	r31, 0xFF	; 255
    3920:	90 81       	ld	r25, Z
    3922:	91 30       	cpi	r25, 0x01	; 1
    3924:	41 f0       	breq	.+16     	; 0x3936 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3926:	8f 5f       	subi	r24, 0xFF	; 255
    3928:	fe 01       	movw	r30, r28
    392a:	ed 55       	subi	r30, 0x5D	; 93
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	90 81       	ld	r25, Z
    3930:	89 17       	cp	r24, r25
    3932:	88 f3       	brcs	.-30     	; 0x3916 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    3934:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    3936:	91 e0       	ldi	r25, 0x01	; 1
    3938:	98 0f       	add	r25, r24
    393a:	f5 01       	movw	r30, r10
    393c:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    393e:	99 81       	ldd	r25, Y+1	; 0x01
    3940:	f4 01       	movw	r30, r8
    3942:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	41 e6       	ldi	r20, 0x61	; 97
    3948:	48 9f       	mul	r20, r24
    394a:	90 01       	movw	r18, r0
    394c:	49 9f       	mul	r20, r25
    394e:	30 0d       	add	r19, r0
    3950:	11 24       	eor	r1, r1
    3952:	f8 01       	movw	r30, r16
    3954:	31 83       	std	Z+1, r19	; 0x01
    3956:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    3958:	fe 01       	movw	r30, r28
    395a:	ed 55       	subi	r30, 0x5D	; 93
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	20 81       	ld	r18, Z
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	21 50       	subi	r18, 0x01	; 1
    3964:	31 09       	sbc	r19, r1
    3966:	82 17       	cp	r24, r18
    3968:	93 07       	cpc	r25, r19
    396a:	2c f4       	brge	.+10     	; 0x3976 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    396c:	81 e6       	ldi	r24, 0x61	; 97
    396e:	f7 01       	movw	r30, r14
    3970:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	1e c0       	rjmp	.+60     	; 0x39b2 <mrpp_state_get_ready_body+0xd6>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    3976:	8a 81       	ldd	r24, Y+2	; 0x02
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	ac 01       	movw	r20, r24
    397e:	44 0f       	add	r20, r20
    3980:	55 1f       	adc	r21, r21
    3982:	88 0f       	add	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	88 0f       	add	r24, r24
    3988:	99 1f       	adc	r25, r25
    398a:	88 0f       	add	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	84 0f       	add	r24, r20
    3990:	95 1f       	adc	r25, r21
    3992:	c8 0f       	add	r28, r24
    3994:	d9 1f       	adc	r29, r25
    3996:	9b 81       	ldd	r25, Y+3	; 0x03
    3998:	8d 81       	ldd	r24, Y+5	; 0x05
    399a:	89 0f       	add	r24, r25
    399c:	f1 e6       	ldi	r31, 0x61	; 97
    399e:	2f 9f       	mul	r18, r31
    39a0:	80 19       	sub	r24, r0
    39a2:	11 24       	eor	r1, r1
    39a4:	f7 01       	movw	r30, r14
    39a6:	80 83       	st	Z, r24
    } 
    return true; 
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	03 c0       	rjmp	.+6      	; 0x39b2 <mrpp_state_get_ready_body+0xd6>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	01 c0       	rjmp	.+2      	; 0x39b2 <mrpp_state_get_ready_body+0xd6>
    39b0:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    39b2:	df 91       	pop	r29
    39b4:	cf 91       	pop	r28
    39b6:	1f 91       	pop	r17
    39b8:	0f 91       	pop	r16
    39ba:	ff 90       	pop	r15
    39bc:	ef 90       	pop	r14
    39be:	df 90       	pop	r13
    39c0:	cf 90       	pop	r12
    39c2:	bf 90       	pop	r11
    39c4:	af 90       	pop	r10
    39c6:	9f 90       	pop	r9
    39c8:	8f 90       	pop	r8
    39ca:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00006bb2 <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    6bb2:	fc 01       	movw	r30, r24
    6bb4:	ed 55       	subi	r30, 0x5D	; 93
    6bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    6bb8:	20 81       	ld	r18, Z
    6bba:	30 e0       	ldi	r19, 0x00	; 0
    6bbc:	62 17       	cp	r22, r18
    6bbe:	73 07       	cpc	r23, r19
    6bc0:	3c f4       	brge	.+14     	; 0x6bd0 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    6bc2:	68 0f       	add	r22, r24
    6bc4:	79 1f       	adc	r23, r25
    6bc6:	fb 01       	movw	r30, r22
    6bc8:	ec 55       	subi	r30, 0x5C	; 92
    6bca:	ff 4f       	sbci	r31, 0xFF	; 255
    6bcc:	82 e0       	ldi	r24, 0x02	; 2
    6bce:	80 83       	st	Z, r24
    6bd0:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00006456 <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    6456:	70 e0       	ldi	r23, 0x00	; 0
    6458:	61 50       	subi	r22, 0x01	; 1
    645a:	71 09       	sbc	r23, r1
    645c:	fb 01       	movw	r30, r22
    645e:	ee 0f       	add	r30, r30
    6460:	ff 1f       	adc	r31, r31
    6462:	66 0f       	add	r22, r22
    6464:	77 1f       	adc	r23, r23
    6466:	66 0f       	add	r22, r22
    6468:	77 1f       	adc	r23, r23
    646a:	66 0f       	add	r22, r22
    646c:	77 1f       	adc	r23, r23
    646e:	e6 0f       	add	r30, r22
    6470:	f7 1f       	adc	r31, r23
    6472:	e8 0f       	add	r30, r24
    6474:	f9 1f       	adc	r31, r25
    6476:	83 81       	ldd	r24, Z+3	; 0x03
    6478:	94 81       	ldd	r25, Z+4	; 0x04
    647a:	da 01       	movw	r26, r20
    647c:	8d 93       	st	X+, r24
    647e:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    6480:	85 81       	ldd	r24, Z+5	; 0x05
    6482:	96 81       	ldd	r25, Z+6	; 0x06
    6484:	f9 01       	movw	r30, r18
    6486:	91 83       	std	Z+1, r25	; 0x01
    6488:	80 83       	st	Z, r24
    648a:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00006814 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    6814:	80 91 cf 0e 	lds	r24, 0x0ECF	; 0x800ecf <cnt>
    6818:	90 91 d0 0e 	lds	r25, 0x0ED0	; 0x800ed0 <cnt+0x1>
    681c:	01 96       	adiw	r24, 0x01	; 1
    681e:	90 93 d0 0e 	sts	0x0ED0, r25	; 0x800ed0 <cnt+0x1>
    6822:	80 93 cf 0e 	sts	0x0ECF, r24	; 0x800ecf <cnt>
	if(cnt>=_seconds){
    6826:	20 91 d1 0e 	lds	r18, 0x0ED1	; 0x800ed1 <_seconds>
    682a:	30 91 d2 0e 	lds	r19, 0x0ED2	; 0x800ed2 <_seconds+0x1>
    682e:	82 17       	cp	r24, r18
    6830:	93 07       	cpc	r25, r19
    6832:	38 f0       	brcs	.+14     	; 0x6842 <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    6834:	80 91 ec 0e 	lds	r24, 0x0EEC	; 0x800eec <eventPointer>
    6838:	0e 94 0f 31 	call	0x621e	; 0x621e <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    683c:	80 e0       	ldi	r24, 0x00	; 0
    683e:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <PM_HAL_BC_power>
    6842:	08 95       	ret

Disassembly of section .text.PUMP_start:

00006a18 <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    6a18:	10 92 d0 0e 	sts	0x0ED0, r1	; 0x800ed0 <cnt+0x1>
    6a1c:	10 92 cf 0e 	sts	0x0ECF, r1	; 0x800ecf <cnt>
	_seconds=seconds;
    6a20:	90 93 d2 0e 	sts	0x0ED2, r25	; 0x800ed2 <_seconds+0x1>
    6a24:	80 93 d1 0e 	sts	0x0ED1, r24	; 0x800ed1 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    6a28:	8a e0       	ldi	r24, 0x0A	; 10
    6a2a:	94 e3       	ldi	r25, 0x34	; 52
    6a2c:	0e 94 89 2b 	call	0x5712	; 0x5712 <TC2_HAL_subscribe>
    6a30:	80 93 ec 0e 	sts	0x0EEC, r24	; 0x800eec <eventPointer>
	PM_HAL_BC_power(true);
    6a34:	81 e0       	ldi	r24, 0x01	; 1
    6a36:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <PM_HAL_BC_power>
    6a3a:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

00006cfa <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    6cfa:	40 91 cf 0e 	lds	r20, 0x0ECF	; 0x800ecf <cnt>
    6cfe:	50 91 d0 0e 	lds	r21, 0x0ED0	; 0x800ed0 <cnt+0x1>
    6d02:	20 91 d1 0e 	lds	r18, 0x0ED1	; 0x800ed1 <_seconds>
    6d06:	30 91 d2 0e 	lds	r19, 0x0ED2	; 0x800ed2 <_seconds+0x1>
    6d0a:	81 e0       	ldi	r24, 0x01	; 1
    6d0c:	42 17       	cp	r20, r18
    6d0e:	53 07       	cpc	r21, r19
    6d10:	08 f4       	brcc	.+2      	; 0x6d14 <PUMP_is_done+0x1a>
    6d12:	80 e0       	ldi	r24, 0x00	; 0
}
    6d14:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

000035e6 <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	00 d0       	rcall	.+0      	; 0x35ee <datetime_to_BCD+0x8>
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <datetime_to_BCD+0xa>
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <datetime_to_BCD+0xc>
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	f9 01       	movw	r30, r18
    35f8:	3d ec       	ldi	r19, 0xCD	; 205
    35fa:	43 9f       	mul	r20, r19
    35fc:	21 2d       	mov	r18, r1
    35fe:	11 24       	eor	r1, r1
    3600:	26 95       	lsr	r18
    3602:	26 95       	lsr	r18
    3604:	26 95       	lsr	r18
    3606:	10 e1       	ldi	r17, 0x10	; 16
    3608:	21 9f       	mul	r18, r17
    360a:	d0 01       	movw	r26, r0
    360c:	11 24       	eor	r1, r1
    360e:	22 0f       	add	r18, r18
    3610:	b2 2f       	mov	r27, r18
    3612:	bb 0f       	add	r27, r27
    3614:	bb 0f       	add	r27, r27
    3616:	2b 0f       	add	r18, r27
    3618:	42 1b       	sub	r20, r18
    361a:	4a 2b       	or	r20, r26
    361c:	40 83       	st	Z, r20
    361e:	53 9f       	mul	r21, r19
    3620:	21 2d       	mov	r18, r1
    3622:	11 24       	eor	r1, r1
    3624:	26 95       	lsr	r18
    3626:	26 95       	lsr	r18
    3628:	26 95       	lsr	r18
    362a:	40 e1       	ldi	r20, 0x10	; 16
    362c:	24 9f       	mul	r18, r20
    362e:	d0 01       	movw	r26, r0
    3630:	11 24       	eor	r1, r1
    3632:	22 0f       	add	r18, r18
    3634:	42 2f       	mov	r20, r18
    3636:	44 0f       	add	r20, r20
    3638:	44 0f       	add	r20, r20
    363a:	24 0f       	add	r18, r20
    363c:	52 1b       	sub	r21, r18
    363e:	5a 2b       	or	r21, r26
    3640:	51 83       	std	Z+1, r21	; 0x01
    3642:	63 9f       	mul	r22, r19
    3644:	41 2d       	mov	r20, r1
    3646:	11 24       	eor	r1, r1
    3648:	46 95       	lsr	r20
    364a:	46 95       	lsr	r20
    364c:	46 95       	lsr	r20
    364e:	10 e1       	ldi	r17, 0x10	; 16
    3650:	41 9f       	mul	r20, r17
    3652:	d0 01       	movw	r26, r0
    3654:	11 24       	eor	r1, r1
    3656:	44 0f       	add	r20, r20
    3658:	24 2f       	mov	r18, r20
    365a:	22 0f       	add	r18, r18
    365c:	22 0f       	add	r18, r18
    365e:	42 0f       	add	r20, r18
    3660:	64 1b       	sub	r22, r20
    3662:	6a 2b       	or	r22, r26
    3664:	62 83       	std	Z+2, r22	; 0x02
    3666:	73 9f       	mul	r23, r19
    3668:	41 2d       	mov	r20, r1
    366a:	11 24       	eor	r1, r1
    366c:	46 95       	lsr	r20
    366e:	46 95       	lsr	r20
    3670:	46 95       	lsr	r20
    3672:	20 e1       	ldi	r18, 0x10	; 16
    3674:	42 9f       	mul	r20, r18
    3676:	d0 01       	movw	r26, r0
    3678:	11 24       	eor	r1, r1
    367a:	44 0f       	add	r20, r20
    367c:	24 2f       	mov	r18, r20
    367e:	22 0f       	add	r18, r18
    3680:	22 0f       	add	r18, r18
    3682:	42 0f       	add	r20, r18
    3684:	74 1b       	sub	r23, r20
    3686:	7a 2b       	or	r23, r26
    3688:	73 83       	std	Z+3, r23	; 0x03
    368a:	83 9f       	mul	r24, r19
    368c:	41 2d       	mov	r20, r1
    368e:	11 24       	eor	r1, r1
    3690:	46 95       	lsr	r20
    3692:	46 95       	lsr	r20
    3694:	46 95       	lsr	r20
    3696:	10 e1       	ldi	r17, 0x10	; 16
    3698:	41 9f       	mul	r20, r17
    369a:	b0 01       	movw	r22, r0
    369c:	11 24       	eor	r1, r1
    369e:	44 0f       	add	r20, r20
    36a0:	24 2f       	mov	r18, r20
    36a2:	22 0f       	add	r18, r18
    36a4:	22 0f       	add	r18, r18
    36a6:	42 0f       	add	r20, r18
    36a8:	84 1b       	sub	r24, r20
    36aa:	86 2b       	or	r24, r22
    36ac:	84 83       	std	Z+4, r24	; 0x04
    36ae:	93 9f       	mul	r25, r19
    36b0:	31 2d       	mov	r19, r1
    36b2:	11 24       	eor	r1, r1
    36b4:	36 95       	lsr	r19
    36b6:	36 95       	lsr	r19
    36b8:	36 95       	lsr	r19
    36ba:	20 e1       	ldi	r18, 0x10	; 16
    36bc:	32 9f       	mul	r19, r18
    36be:	a0 01       	movw	r20, r0
    36c0:	11 24       	eor	r1, r1
    36c2:	33 0f       	add	r19, r19
    36c4:	83 2f       	mov	r24, r19
    36c6:	88 0f       	add	r24, r24
    36c8:	88 0f       	add	r24, r24
    36ca:	38 0f       	add	r19, r24
    36cc:	93 1b       	sub	r25, r19
    36ce:	94 2b       	or	r25, r20
    36d0:	95 83       	std	Z+5, r25	; 0x05
    36d2:	26 96       	adiw	r28, 0x06	; 6
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	df 91       	pop	r29
    36e0:	cf 91       	pop	r28
    36e2:	1f 91       	pop	r17
    36e4:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

0000580c <RTC_set_clock_out>:
    580c:	cf 93       	push	r28
    580e:	df 93       	push	r29
    5810:	00 d0       	rcall	.+0      	; 0x5812 <RTC_set_clock_out+0x6>
    5812:	cd b7       	in	r28, 0x3d	; 61
    5814:	de b7       	in	r29, 0x3e	; 62
    5816:	9d e0       	ldi	r25, 0x0D	; 13
    5818:	99 83       	std	Y+1, r25	; 0x01
    581a:	81 30       	cpi	r24, 0x01	; 1
    581c:	31 f0       	breq	.+12     	; 0x582a <RTC_set_clock_out+0x1e>
    581e:	18 f0       	brcs	.+6      	; 0x5826 <RTC_set_clock_out+0x1a>
    5820:	80 32       	cpi	r24, 0x20	; 32
    5822:	31 f0       	breq	.+12     	; 0x5830 <RTC_set_clock_out+0x24>
    5824:	13 c0       	rjmp	.+38     	; 0x584c <RTC_set_clock_out+0x40>
    5826:	1a 82       	std	Y+2, r1	; 0x02
    5828:	05 c0       	rjmp	.+10     	; 0x5834 <RTC_set_clock_out+0x28>
    582a:	83 e8       	ldi	r24, 0x83	; 131
    582c:	8a 83       	std	Y+2, r24	; 0x02
    582e:	02 c0       	rjmp	.+4      	; 0x5834 <RTC_set_clock_out+0x28>
    5830:	82 e8       	ldi	r24, 0x82	; 130
    5832:	8a 83       	std	Y+2, r24	; 0x02
    5834:	ae 01       	movw	r20, r28
    5836:	4f 5f       	subi	r20, 0xFF	; 255
    5838:	5f 4f       	sbci	r21, 0xFF	; 255
    583a:	60 e8       	ldi	r22, 0x80	; 128
    583c:	22 e0       	ldi	r18, 0x02	; 2
    583e:	81 e5       	ldi	r24, 0x51	; 81
    5840:	0e 94 99 36 	call	0x6d32	; 0x6d32 <TWI_API_write_data_stop>
    5844:	88 23       	and	r24, r24
    5846:	21 f0       	breq	.+8      	; 0x5850 <RTC_set_clock_out+0x44>
    5848:	82 e0       	ldi	r24, 0x02	; 2
    584a:	03 c0       	rjmp	.+6      	; 0x5852 <RTC_set_clock_out+0x46>
    584c:	81 e0       	ldi	r24, 0x01	; 1
    584e:	01 c0       	rjmp	.+2      	; 0x5852 <RTC_set_clock_out+0x46>
    5850:	80 e0       	ldi	r24, 0x00	; 0
    5852:	0f 90       	pop	r0
    5854:	0f 90       	pop	r0
    5856:	df 91       	pop	r29
    5858:	cf 91       	pop	r28
    585a:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00002dca <RTC_get_current_time>:
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	27 97       	sbiw	r28, 0x07	; 7
    2dd8:	0f b6       	in	r0, 0x3f	; 63
    2dda:	f8 94       	cli
    2ddc:	de bf       	out	0x3e, r29	; 62
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	cd bf       	out	0x3d, r28	; 61
    2de2:	8c 01       	movw	r16, r24
    2de4:	21 e0       	ldi	r18, 0x01	; 1
    2de6:	49 e1       	ldi	r20, 0x19	; 25
    2de8:	5a e0       	ldi	r21, 0x0A	; 10
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	81 e5       	ldi	r24, 0x51	; 81
    2dee:	0e 94 4a 37 	call	0x6e94	; 0x6e94 <TWI_API_write_data>
    2df2:	81 11       	cpse	r24, r1
    2df4:	7c c0       	rjmp	.+248    	; 0x2eee <RTC_get_current_time+0x124>
    2df6:	47 e0       	ldi	r20, 0x07	; 7
    2df8:	be 01       	movw	r22, r28
    2dfa:	6f 5f       	subi	r22, 0xFF	; 255
    2dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfe:	81 e5       	ldi	r24, 0x51	; 81
    2e00:	0e 94 62 33 	call	0x66c4	; 0x66c4 <TWI_API_repeat_read_data_stop>
    2e04:	81 11       	cpse	r24, r1
    2e06:	75 c0       	rjmp	.+234    	; 0x2ef2 <RTC_get_current_time+0x128>
    2e08:	29 81       	ldd	r18, Y+1	; 0x01
    2e0a:	82 2f       	mov	r24, r18
    2e0c:	8f 77       	andi	r24, 0x7F	; 127
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	95 95       	asr	r25
    2e12:	87 95       	ror	r24
    2e14:	95 95       	asr	r25
    2e16:	87 95       	ror	r24
    2e18:	95 95       	asr	r25
    2e1a:	87 95       	ror	r24
    2e1c:	95 95       	asr	r25
    2e1e:	87 95       	ror	r24
    2e20:	88 0f       	add	r24, r24
    2e22:	98 2f       	mov	r25, r24
    2e24:	99 0f       	add	r25, r25
    2e26:	99 0f       	add	r25, r25
    2e28:	89 0f       	add	r24, r25
    2e2a:	2f 70       	andi	r18, 0x0F	; 15
    2e2c:	82 0f       	add	r24, r18
    2e2e:	f8 01       	movw	r30, r16
    2e30:	80 83       	st	Z, r24
    2e32:	2a 81       	ldd	r18, Y+2	; 0x02
    2e34:	82 2f       	mov	r24, r18
    2e36:	8f 77       	andi	r24, 0x7F	; 127
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	95 95       	asr	r25
    2e3c:	87 95       	ror	r24
    2e3e:	95 95       	asr	r25
    2e40:	87 95       	ror	r24
    2e42:	95 95       	asr	r25
    2e44:	87 95       	ror	r24
    2e46:	95 95       	asr	r25
    2e48:	87 95       	ror	r24
    2e4a:	88 0f       	add	r24, r24
    2e4c:	98 2f       	mov	r25, r24
    2e4e:	99 0f       	add	r25, r25
    2e50:	99 0f       	add	r25, r25
    2e52:	89 0f       	add	r24, r25
    2e54:	2f 70       	andi	r18, 0x0F	; 15
    2e56:	82 0f       	add	r24, r18
    2e58:	81 83       	std	Z+1, r24	; 0x01
    2e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e5c:	82 2f       	mov	r24, r18
    2e5e:	8f 73       	andi	r24, 0x3F	; 63
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	95 95       	asr	r25
    2e64:	87 95       	ror	r24
    2e66:	95 95       	asr	r25
    2e68:	87 95       	ror	r24
    2e6a:	95 95       	asr	r25
    2e6c:	87 95       	ror	r24
    2e6e:	95 95       	asr	r25
    2e70:	87 95       	ror	r24
    2e72:	88 0f       	add	r24, r24
    2e74:	98 2f       	mov	r25, r24
    2e76:	99 0f       	add	r25, r25
    2e78:	99 0f       	add	r25, r25
    2e7a:	89 0f       	add	r24, r25
    2e7c:	2f 70       	andi	r18, 0x0F	; 15
    2e7e:	82 0f       	add	r24, r18
    2e80:	82 83       	std	Z+2, r24	; 0x02
    2e82:	2c 81       	ldd	r18, Y+4	; 0x04
    2e84:	82 2f       	mov	r24, r18
    2e86:	8f 73       	andi	r24, 0x3F	; 63
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	95 95       	asr	r25
    2e8c:	87 95       	ror	r24
    2e8e:	95 95       	asr	r25
    2e90:	87 95       	ror	r24
    2e92:	95 95       	asr	r25
    2e94:	87 95       	ror	r24
    2e96:	95 95       	asr	r25
    2e98:	87 95       	ror	r24
    2e9a:	88 0f       	add	r24, r24
    2e9c:	98 2f       	mov	r25, r24
    2e9e:	99 0f       	add	r25, r25
    2ea0:	99 0f       	add	r25, r25
    2ea2:	89 0f       	add	r24, r25
    2ea4:	2f 70       	andi	r18, 0x0F	; 15
    2ea6:	82 0f       	add	r24, r18
    2ea8:	83 83       	std	Z+3, r24	; 0x03
    2eaa:	2e 81       	ldd	r18, Y+6	; 0x06
    2eac:	82 2f       	mov	r24, r18
    2eae:	8f 71       	andi	r24, 0x1F	; 31
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	95 95       	asr	r25
    2eb4:	87 95       	ror	r24
    2eb6:	95 95       	asr	r25
    2eb8:	87 95       	ror	r24
    2eba:	95 95       	asr	r25
    2ebc:	87 95       	ror	r24
    2ebe:	95 95       	asr	r25
    2ec0:	87 95       	ror	r24
    2ec2:	88 0f       	add	r24, r24
    2ec4:	98 2f       	mov	r25, r24
    2ec6:	99 0f       	add	r25, r25
    2ec8:	99 0f       	add	r25, r25
    2eca:	89 0f       	add	r24, r25
    2ecc:	2f 70       	andi	r18, 0x0F	; 15
    2ece:	82 0f       	add	r24, r18
    2ed0:	84 83       	std	Z+4, r24	; 0x04
    2ed2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed4:	98 2f       	mov	r25, r24
    2ed6:	92 95       	swap	r25
    2ed8:	9f 70       	andi	r25, 0x0F	; 15
    2eda:	99 0f       	add	r25, r25
    2edc:	29 2f       	mov	r18, r25
    2ede:	22 0f       	add	r18, r18
    2ee0:	22 0f       	add	r18, r18
    2ee2:	92 0f       	add	r25, r18
    2ee4:	8f 70       	andi	r24, 0x0F	; 15
    2ee6:	89 0f       	add	r24, r25
    2ee8:	85 83       	std	Z+5, r24	; 0x05
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	03 c0       	rjmp	.+6      	; 0x2ef4 <RTC_get_current_time+0x12a>
    2eee:	82 e0       	ldi	r24, 0x02	; 2
    2ef0:	01 c0       	rjmp	.+2      	; 0x2ef4 <RTC_get_current_time+0x12a>
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	27 96       	adiw	r28, 0x07	; 7
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	1f 91       	pop	r17
    2f06:	0f 91       	pop	r16
    2f08:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

000051f2 <RTC_set_current_time>:
    51f2:	cf 93       	push	r28
    51f4:	df 93       	push	r29
    51f6:	cd b7       	in	r28, 0x3d	; 61
    51f8:	de b7       	in	r29, 0x3e	; 62
    51fa:	64 97       	sbiw	r28, 0x14	; 20
    51fc:	0f b6       	in	r0, 0x3f	; 63
    51fe:	f8 94       	cli
    5200:	de bf       	out	0x3e, r29	; 62
    5202:	0f be       	out	0x3f, r0	; 63
    5204:	cd bf       	out	0x3d, r28	; 61
    5206:	9e 01       	movw	r18, r28
    5208:	27 5f       	subi	r18, 0xF7	; 247
    520a:	3f 4f       	sbci	r19, 0xFF	; 255
    520c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <datetime_to_BCD>
    5210:	82 e0       	ldi	r24, 0x02	; 2
    5212:	89 83       	std	Y+1, r24	; 0x01
    5214:	89 85       	ldd	r24, Y+9	; 0x09
    5216:	8a 83       	std	Y+2, r24	; 0x02
    5218:	8a 85       	ldd	r24, Y+10	; 0x0a
    521a:	8b 83       	std	Y+3, r24	; 0x03
    521c:	8b 85       	ldd	r24, Y+11	; 0x0b
    521e:	8c 83       	std	Y+4, r24	; 0x04
    5220:	8c 85       	ldd	r24, Y+12	; 0x0c
    5222:	8d 83       	std	Y+5, r24	; 0x05
    5224:	1e 82       	std	Y+6, r1	; 0x06
    5226:	8d 85       	ldd	r24, Y+13	; 0x0d
    5228:	8f 83       	std	Y+7, r24	; 0x07
    522a:	8e 85       	ldd	r24, Y+14	; 0x0e
    522c:	88 87       	std	Y+8, r24	; 0x08
    522e:	ae 01       	movw	r20, r28
    5230:	4f 5f       	subi	r20, 0xFF	; 255
    5232:	5f 4f       	sbci	r21, 0xFF	; 255
    5234:	60 e8       	ldi	r22, 0x80	; 128
    5236:	28 e0       	ldi	r18, 0x08	; 8
    5238:	81 e5       	ldi	r24, 0x51	; 81
    523a:	0e 94 99 36 	call	0x6d32	; 0x6d32 <TWI_API_write_data_stop>
    523e:	88 23       	and	r24, r24
    5240:	11 f0       	breq	.+4      	; 0x5246 <RTC_set_current_time+0x54>
    5242:	82 e0       	ldi	r24, 0x02	; 2
    5244:	01 c0       	rjmp	.+2      	; 0x5248 <RTC_set_current_time+0x56>
    5246:	80 e0       	ldi	r24, 0x00	; 0
    5248:	64 96       	adiw	r28, 0x14	; 20
    524a:	0f b6       	in	r0, 0x3f	; 63
    524c:	f8 94       	cli
    524e:	de bf       	out	0x3e, r29	; 62
    5250:	0f be       	out	0x3f, r0	; 63
    5252:	cd bf       	out	0x3d, r28	; 61
    5254:	df 91       	pop	r29
    5256:	cf 91       	pop	r28
    5258:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt:

00003df8 <RTC_set_wake_up_interrupt>:
    3df8:	1f 93       	push	r17
    3dfa:	cf 93       	push	r28
    3dfc:	df 93       	push	r29
    3dfe:	cd b7       	in	r28, 0x3d	; 61
    3e00:	de b7       	in	r29, 0x3e	; 62
    3e02:	2d 97       	sbiw	r28, 0x0d	; 13
    3e04:	0f b6       	in	r0, 0x3f	; 63
    3e06:	f8 94       	cli
    3e08:	de bf       	out	0x3e, r29	; 62
    3e0a:	0f be       	out	0x3f, r0	; 63
    3e0c:	cd bf       	out	0x3d, r28	; 61
    3e0e:	18 2f       	mov	r17, r24
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	89 83       	std	Y+1, r24	; 0x01
    3e14:	82 e0       	ldi	r24, 0x02	; 2
    3e16:	8a 83       	std	Y+2, r24	; 0x02
    3e18:	85 e0       	ldi	r24, 0x05	; 5
    3e1a:	ea e9       	ldi	r30, 0x9A	; 154
    3e1c:	fe e0       	ldi	r31, 0x0E	; 14
    3e1e:	de 01       	movw	r26, r28
    3e20:	13 96       	adiw	r26, 0x03	; 3
    3e22:	01 90       	ld	r0, Z+
    3e24:	0d 92       	st	X+, r0
    3e26:	8a 95       	dec	r24
    3e28:	e1 f7       	brne	.-8      	; 0x3e22 <RTC_set_wake_up_interrupt+0x2a>
    3e2a:	ce 01       	movw	r24, r28
    3e2c:	08 96       	adiw	r24, 0x08	; 8
    3e2e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <RTC_get_current_time>
    3e32:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e34:	81 0f       	add	r24, r17
    3e36:	9b ea       	ldi	r25, 0xAB	; 171
    3e38:	89 9f       	mul	r24, r25
    3e3a:	91 2d       	mov	r25, r1
    3e3c:	11 24       	eor	r1, r1
    3e3e:	92 95       	swap	r25
    3e40:	9f 70       	andi	r25, 0x0F	; 15
    3e42:	28 e1       	ldi	r18, 0x18	; 24
    3e44:	92 9f       	mul	r25, r18
    3e46:	80 19       	sub	r24, r0
    3e48:	11 24       	eor	r1, r1
    3e4a:	8a 87       	std	Y+10, r24	; 0x0a
    3e4c:	ae 01       	movw	r20, r28
    3e4e:	4f 5f       	subi	r20, 0xFF	; 255
    3e50:	5f 4f       	sbci	r21, 0xFF	; 255
    3e52:	60 e8       	ldi	r22, 0x80	; 128
    3e54:	22 e0       	ldi	r18, 0x02	; 2
    3e56:	81 e5       	ldi	r24, 0x51	; 81
    3e58:	0e 94 99 36 	call	0x6d32	; 0x6d32 <TWI_API_write_data_stop>
    3e5c:	81 11       	cpse	r24, r1
    3e5e:	20 c0       	rjmp	.+64     	; 0x3ea0 <RTC_set_wake_up_interrupt+0xa8>
    3e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e62:	8d ec       	ldi	r24, 0xCD	; 205
    3e64:	98 9f       	mul	r25, r24
    3e66:	81 2d       	mov	r24, r1
    3e68:	11 24       	eor	r1, r1
    3e6a:	86 95       	lsr	r24
    3e6c:	86 95       	lsr	r24
    3e6e:	86 95       	lsr	r24
    3e70:	40 e1       	ldi	r20, 0x10	; 16
    3e72:	84 9f       	mul	r24, r20
    3e74:	90 01       	movw	r18, r0
    3e76:	11 24       	eor	r1, r1
    3e78:	88 0f       	add	r24, r24
    3e7a:	38 2f       	mov	r19, r24
    3e7c:	33 0f       	add	r19, r19
    3e7e:	33 0f       	add	r19, r19
    3e80:	83 0f       	add	r24, r19
    3e82:	98 1b       	sub	r25, r24
    3e84:	92 2b       	or	r25, r18
    3e86:	9d 83       	std	Y+5, r25	; 0x05
    3e88:	ae 01       	movw	r20, r28
    3e8a:	4d 5f       	subi	r20, 0xFD	; 253
    3e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e8e:	60 e8       	ldi	r22, 0x80	; 128
    3e90:	25 e0       	ldi	r18, 0x05	; 5
    3e92:	81 e5       	ldi	r24, 0x51	; 81
    3e94:	0e 94 99 36 	call	0x6d32	; 0x6d32 <TWI_API_write_data_stop>
    3e98:	88 23       	and	r24, r24
    3e9a:	21 f0       	breq	.+8      	; 0x3ea4 <RTC_set_wake_up_interrupt+0xac>
    3e9c:	82 e0       	ldi	r24, 0x02	; 2
    3e9e:	03 c0       	rjmp	.+6      	; 0x3ea6 <RTC_set_wake_up_interrupt+0xae>
    3ea0:	82 e0       	ldi	r24, 0x02	; 2
    3ea2:	01 c0       	rjmp	.+2      	; 0x3ea6 <RTC_set_wake_up_interrupt+0xae>
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	2d 96       	adiw	r28, 0x0d	; 13
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	f8 94       	cli
    3eac:	de bf       	out	0x3e, r29	; 62
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	cd bf       	out	0x3d, r28	; 61
    3eb2:	df 91       	pop	r29
    3eb4:	cf 91       	pop	r28
    3eb6:	1f 91       	pop	r17
    3eb8:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

0000652e <RTC_clear_wake_up_interrupt>:

RTC_STATUS RTC_clear_wake_up_interrupt(){
    652e:	cf 93       	push	r28
    6530:	df 93       	push	r29
    6532:	00 d0       	rcall	.+0      	; 0x6534 <RTC_clear_wake_up_interrupt+0x6>
    6534:	cd b7       	in	r28, 0x3d	; 61
    6536:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    6538:	81 e0       	ldi	r24, 0x01	; 1
    653a:	89 83       	std	Y+1, r24	; 0x01
    653c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    653e:	ae 01       	movw	r20, r28
    6540:	4f 5f       	subi	r20, 0xFF	; 255
    6542:	5f 4f       	sbci	r21, 0xFF	; 255
    6544:	60 e8       	ldi	r22, 0x80	; 128
    6546:	22 e0       	ldi	r18, 0x02	; 2
    6548:	81 e5       	ldi	r24, 0x51	; 81
    654a:	0e 94 99 36 	call	0x6d32	; 0x6d32 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    654e:	88 23       	and	r24, r24
    6550:	11 f0       	breq	.+4      	; 0x6556 <RTC_clear_wake_up_interrupt+0x28>
    6552:	82 e0       	ldi	r24, 0x02	; 2
    6554:	01 c0       	rjmp	.+2      	; 0x6558 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    6556:	80 e0       	ldi	r24, 0x00	; 0
}
    6558:	0f 90       	pop	r0
    655a:	0f 90       	pop	r0
    655c:	df 91       	pop	r29
    655e:	cf 91       	pop	r28
    6560:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

00003296 <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    3296:	4f 92       	push	r4
    3298:	5f 92       	push	r5
    329a:	6f 92       	push	r6
    329c:	7f 92       	push	r7
    329e:	8f 92       	push	r8
    32a0:	9f 92       	push	r9
    32a2:	af 92       	push	r10
    32a4:	bf 92       	push	r11
    32a6:	cf 92       	push	r12
    32a8:	df 92       	push	r13
    32aa:	ef 92       	push	r14
    32ac:	ff 92       	push	r15
    32ae:	0f 93       	push	r16
    32b0:	1f 93       	push	r17
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <RTC_datetime_to_ts+0x22>
    32b8:	00 d0       	rcall	.+0      	; 0x32ba <RTC_datetime_to_ts+0x24>
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <RTC_datetime_to_ts+0x26>
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	f9 01       	movw	r30, r18
    32c2:	49 2e       	mov	r4, r25
    32c4:	51 2c       	mov	r5, r1
    32c6:	61 2c       	mov	r6, r1
    32c8:	71 2c       	mov	r7, r1
    32ca:	03 2e       	mov	r0, r19
    32cc:	3a e1       	ldi	r19, 0x1A	; 26
    32ce:	44 0c       	add	r4, r4
    32d0:	55 1c       	adc	r5, r5
    32d2:	66 1c       	adc	r6, r6
    32d4:	77 1c       	adc	r7, r7
    32d6:	3a 95       	dec	r19
    32d8:	d1 f7       	brne	.-12     	; 0x32ce <RTC_datetime_to_ts+0x38>
    32da:	30 2d       	mov	r19, r0
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	a0 e0       	ldi	r26, 0x00	; 0
    32e0:	b0 e0       	ldi	r27, 0x00	; 0
    32e2:	07 2e       	mov	r0, r23
    32e4:	76 e1       	ldi	r23, 0x16	; 22
    32e6:	88 0f       	add	r24, r24
    32e8:	99 1f       	adc	r25, r25
    32ea:	aa 1f       	adc	r26, r26
    32ec:	bb 1f       	adc	r27, r27
    32ee:	7a 95       	dec	r23
    32f0:	d1 f7       	brne	.-12     	; 0x32e6 <RTC_datetime_to_ts+0x50>
    32f2:	70 2d       	mov	r23, r0
    32f4:	84 29       	or	r24, r4
    32f6:	95 29       	or	r25, r5
    32f8:	a6 29       	or	r26, r6
    32fa:	b7 29       	or	r27, r7
    32fc:	87 2e       	mov	r8, r23
    32fe:	91 2c       	mov	r9, r1
    3300:	a1 2c       	mov	r10, r1
    3302:	b1 2c       	mov	r11, r1
    3304:	07 2e       	mov	r0, r23
    3306:	71 e1       	ldi	r23, 0x11	; 17
    3308:	88 0c       	add	r8, r8
    330a:	99 1c       	adc	r9, r9
    330c:	aa 1c       	adc	r10, r10
    330e:	bb 1c       	adc	r11, r11
    3310:	7a 95       	dec	r23
    3312:	d1 f7       	brne	.-12     	; 0x3308 <RTC_datetime_to_ts+0x72>
    3314:	70 2d       	mov	r23, r0
    3316:	88 29       	or	r24, r8
    3318:	99 29       	or	r25, r9
    331a:	aa 29       	or	r26, r10
    331c:	bb 29       	or	r27, r11
    331e:	c6 2e       	mov	r12, r22
    3320:	d1 2c       	mov	r13, r1
    3322:	e1 2c       	mov	r14, r1
    3324:	f1 2c       	mov	r15, r1
    3326:	0b 2e       	mov	r0, r27
    3328:	bc e0       	ldi	r27, 0x0C	; 12
    332a:	cc 0c       	add	r12, r12
    332c:	dd 1c       	adc	r13, r13
    332e:	ee 1c       	adc	r14, r14
    3330:	ff 1c       	adc	r15, r15
    3332:	ba 95       	dec	r27
    3334:	d1 f7       	brne	.-12     	; 0x332a <RTC_datetime_to_ts+0x94>
    3336:	b0 2d       	mov	r27, r0
    3338:	8c 29       	or	r24, r12
    333a:	9d 29       	or	r25, r13
    333c:	ae 29       	or	r26, r14
    333e:	bf 29       	or	r27, r15
    3340:	05 2f       	mov	r16, r21
    3342:	10 e0       	ldi	r17, 0x00	; 0
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	00 0f       	add	r16, r16
    334a:	11 1f       	adc	r17, r17
    334c:	22 1f       	adc	r18, r18
    334e:	33 1f       	adc	r19, r19
    3350:	00 0f       	add	r16, r16
    3352:	11 1f       	adc	r17, r17
    3354:	22 1f       	adc	r18, r18
    3356:	33 1f       	adc	r19, r19
    3358:	00 0f       	add	r16, r16
    335a:	11 1f       	adc	r17, r17
    335c:	22 1f       	adc	r18, r18
    335e:	33 1f       	adc	r19, r19
    3360:	00 0f       	add	r16, r16
    3362:	11 1f       	adc	r17, r17
    3364:	22 1f       	adc	r18, r18
    3366:	33 1f       	adc	r19, r19
    3368:	00 0f       	add	r16, r16
    336a:	11 1f       	adc	r17, r17
    336c:	22 1f       	adc	r18, r18
    336e:	33 1f       	adc	r19, r19
    3370:	00 0f       	add	r16, r16
    3372:	11 1f       	adc	r17, r17
    3374:	22 1f       	adc	r18, r18
    3376:	33 1f       	adc	r19, r19
    3378:	80 2b       	or	r24, r16
    337a:	91 2b       	or	r25, r17
    337c:	a2 2b       	or	r26, r18
    337e:	b3 2b       	or	r27, r19
    3380:	84 2b       	or	r24, r20
    3382:	b0 83       	st	Z, r27
    3384:	a1 83       	std	Z+1, r26	; 0x01
    3386:	92 83       	std	Z+2, r25	; 0x02
    3388:	83 83       	std	Z+3, r24	; 0x03
    338a:	26 96       	adiw	r28, 0x06	; 6
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	df 91       	pop	r29
    3398:	cf 91       	pop	r28
    339a:	1f 91       	pop	r17
    339c:	0f 91       	pop	r16
    339e:	ff 90       	pop	r15
    33a0:	ef 90       	pop	r14
    33a2:	df 90       	pop	r13
    33a4:	cf 90       	pop	r12
    33a6:	bf 90       	pop	r11
    33a8:	af 90       	pop	r10
    33aa:	9f 90       	pop	r9
    33ac:	8f 90       	pop	r8
    33ae:	7f 90       	pop	r7
    33b0:	6f 90       	pop	r6
    33b2:	5f 90       	pop	r5
    33b4:	4f 90       	pop	r4
    33b6:	08 95       	ret

Disassembly of section .text.clear_sampling_data:

00005c90 <clear_sampling_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static void clear_sampling_data(){
	co2_pars.cntSamples=0;
    5c90:	ee e8       	ldi	r30, 0x8E	; 142
    5c92:	fe e0       	ldi	r31, 0x0E	; 14
    5c94:	11 82       	std	Z+1, r1	; 0x01
	co2_pars.nSamples=0;
    5c96:	10 82       	st	Z, r1
	co2_pars.samplingInterval=0;
    5c98:	15 82       	std	Z+5, r1	; 0x05
    5c9a:	14 82       	std	Z+4, r1	; 0x04
	co2_pars.data=NULL;
    5c9c:	13 82       	std	Z+3, r1	; 0x03
    5c9e:	12 82       	std	Z+2, r1	; 0x02
	
	temp_pars.cntSamples=0;
    5ca0:	e8 e8       	ldi	r30, 0x88	; 136
    5ca2:	fe e0       	ldi	r31, 0x0E	; 14
    5ca4:	11 82       	std	Z+1, r1	; 0x01
	temp_pars.nSamples=0;
    5ca6:	10 82       	st	Z, r1
	temp_pars.samplingInterval=0;
    5ca8:	15 82       	std	Z+5, r1	; 0x05
    5caa:	14 82       	std	Z+4, r1	; 0x04
	temp_pars.data=NULL;
    5cac:	13 82       	std	Z+3, r1	; 0x03
    5cae:	12 82       	std	Z+2, r1	; 0x02

	hum_pars.cntSamples=0;
    5cb0:	e2 e8       	ldi	r30, 0x82	; 130
    5cb2:	fe e0       	ldi	r31, 0x0E	; 14
    5cb4:	11 82       	std	Z+1, r1	; 0x01
	hum_pars.nSamples=0;
    5cb6:	10 82       	st	Z, r1
	hum_pars.samplingInterval=0;
    5cb8:	15 82       	std	Z+5, r1	; 0x05
    5cba:	14 82       	std	Z+4, r1	; 0x04
	hum_pars.data=NULL;
    5cbc:	13 82       	std	Z+3, r1	; 0x03
    5cbe:	12 82       	std	Z+2, r1	; 0x02
	
	lowest_si=0;
    5cc0:	10 92 d8 0e 	sts	0x0ED8, r1	; 0x800ed8 <lowest_si+0x1>
    5cc4:	10 92 d7 0e 	sts	0x0ED7, r1	; 0x800ed7 <lowest_si>
	highest_si=0;
    5cc8:	10 92 d6 0e 	sts	0x0ED6, r1	; 0x800ed6 <highest_si+0x1>
    5ccc:	10 92 d5 0e 	sts	0x0ED5, r1	; 0x800ed5 <highest_si>
	si_counter=0;
    5cd0:	10 92 d4 0e 	sts	0x0ED4, r1	; 0x800ed4 <si_counter+0x1>
    5cd4:	10 92 d3 0e 	sts	0x0ED3, r1	; 0x800ed3 <si_counter>
    5cd8:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

0000525a <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[], uint8_t scale){
    525a:	cf 92       	push	r12
    525c:	df 92       	push	r13
    525e:	ef 92       	push	r14
    5260:	ff 92       	push	r15
    5262:	0f 93       	push	r16
    5264:	1f 93       	push	r17
    5266:	cf 93       	push	r28
    5268:	df 93       	push	r29
    526a:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	float value=(float) f.f *scale;
    526c:	04 81       	ldd	r16, Z+4	; 0x04
    526e:	13 81       	ldd	r17, Z+3	; 0x03
    5270:	d1 81       	ldd	r29, Z+1	; 0x01
    5272:	c0 81       	ld	r28, Z
    5274:	70 e0       	ldi	r23, 0x00	; 0
    5276:	80 e0       	ldi	r24, 0x00	; 0
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	0e 94 31 25 	call	0x4a62	; 0x4a62 <__floatsisf>
    527e:	9b 01       	movw	r18, r22
    5280:	ac 01       	movw	r20, r24
    5282:	60 2f       	mov	r22, r16
    5284:	71 2f       	mov	r23, r17
    5286:	8d 2f       	mov	r24, r29
    5288:	9c 2f       	mov	r25, r28
    528a:	0e 94 51 39 	call	0x72a2	; 0x72a2 <__mulsf3>
    528e:	6b 01       	movw	r12, r22
    5290:	7c 01       	movw	r14, r24
	if(value<0) return 0;
    5292:	20 e0       	ldi	r18, 0x00	; 0
    5294:	30 e0       	ldi	r19, 0x00	; 0
    5296:	a9 01       	movw	r20, r18
    5298:	0e 94 17 39 	call	0x722e	; 0x722e <__cmpsf2>
    529c:	88 23       	and	r24, r24
    529e:	34 f0       	brlt	.+12     	; 0x52ac <bytes_2_uint+0x52>
	return (uint16_t) value;
    52a0:	c7 01       	movw	r24, r14
    52a2:	b6 01       	movw	r22, r12
    52a4:	0e 94 24 2a 	call	0x5448	; 0x5448 <__fixunssfsi>
    52a8:	cb 01       	movw	r24, r22
    52aa:	02 c0       	rjmp	.+4      	; 0x52b0 <bytes_2_uint+0x56>
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	float value=(float) f.f *scale;
	if(value<0) return 0;
    52ac:	80 e0       	ldi	r24, 0x00	; 0
    52ae:	90 e0       	ldi	r25, 0x00	; 0
	return (uint16_t) value;
}
    52b0:	df 91       	pop	r29
    52b2:	cf 91       	pop	r28
    52b4:	1f 91       	pop	r17
    52b6:	0f 91       	pop	r16
    52b8:	ff 90       	pop	r15
    52ba:	ef 90       	pop	r14
    52bc:	df 90       	pop	r13
    52be:	cf 90       	pop	r12
    52c0:	08 95       	ret

Disassembly of section .text.init_measurement:

000063b0 <init_measurement>:
	si_counter=0;
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    63b0:	25 e0       	ldi	r18, 0x05	; 5
    63b2:	4a e0       	ldi	r20, 0x0A	; 10
    63b4:	5a e0       	ldi	r21, 0x0A	; 10
    63b6:	60 e0       	ldi	r22, 0x00	; 0
    63b8:	81 e6       	ldi	r24, 0x61	; 97
    63ba:	0e 94 99 36 	call	0x6d32	; 0x6d32 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    63be:	81 11       	cpse	r24, r1
    63c0:	0f c0       	rjmp	.+30     	; 0x63e0 <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    63c2:	25 e0       	ldi	r18, 0x05	; 5
    63c4:	4f e0       	ldi	r20, 0x0F	; 15
    63c6:	5a e0       	ldi	r21, 0x0A	; 10
    63c8:	60 e0       	ldi	r22, 0x00	; 0
    63ca:	81 e6       	ldi	r24, 0x61	; 97
    63cc:	0e 94 99 36 	call	0x6d32	; 0x6d32 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    63d0:	81 11       	cpse	r24, r1
    63d2:	08 c0       	rjmp	.+16     	; 0x63e4 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    63d4:	0e 94 e5 38 	call	0x71ca	; 0x71ca <SCD30_HAL_data_ready>
    63d8:	88 23       	and	r24, r24
    63da:	e1 f3       	breq	.-8      	; 0x63d4 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    63dc:	80 e0       	ldi	r24, 0x00	; 0
    63de:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    63e0:	82 e0       	ldi	r24, 0x02	; 2
    63e2:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    63e4:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    63e6:	08 95       	ret

Disassembly of section .text.validate_data:

0000662e <validate_data>:
	*humidity=bytes_2_uint(&data[12], 10);
	
	return SCD30_STATUS_SUCCESS;
}

static bool validate_data(uint8_t data[]){
    662e:	cf 93       	push	r28
    6630:	df 93       	push	r29
    6632:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    6634:	62 e0       	ldi	r22, 0x02	; 2
    6636:	0e 94 46 32 	call	0x648c	; 0x648c <calc_crc8>
	if(data[2]!=crc) return false;
    663a:	9a 81       	ldd	r25, Y+2	; 0x02
    663c:	89 13       	cpse	r24, r25
    663e:	0a c0       	rjmp	.+20     	; 0x6654 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    6640:	62 e0       	ldi	r22, 0x02	; 2
    6642:	ce 01       	movw	r24, r28
    6644:	03 96       	adiw	r24, 0x03	; 3
    6646:	0e 94 46 32 	call	0x648c	; 0x648c <calc_crc8>
	if(data[5]!=crc) return false;
    664a:	9d 81       	ldd	r25, Y+5	; 0x05
    664c:	89 17       	cp	r24, r25
    664e:	21 f0       	breq	.+8      	; 0x6658 <validate_data+0x2a>
    6650:	80 e0       	ldi	r24, 0x00	; 0
    6652:	03 c0       	rjmp	.+6      	; 0x665a <validate_data+0x2c>
	return SCD30_STATUS_SUCCESS;
}

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    6654:	80 e0       	ldi	r24, 0x00	; 0
    6656:	01 c0       	rjmp	.+2      	; 0x665a <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    6658:	81 e0       	ldi	r24, 0x01	; 1
}
    665a:	df 91       	pop	r29
    665c:	cf 91       	pop	r28
    665e:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

000069f2 <SCD30_sensor_on>:
/************************************************************************/
/* Definitions                                                          */
/************************************************************************/

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    69f2:	0e 94 08 38 	call	0x7010	; 0x7010 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    69f6:	81 e0       	ldi	r24, 0x01	; 1
    69f8:	0e 94 22 37 	call	0x6e44	; 0x6e44 <PM_HAL_SCD30_power>
    69fc:	2f ef       	ldi	r18, 0xFF	; 255
    69fe:	83 ed       	ldi	r24, 0xD3	; 211
    6a00:	90 e3       	ldi	r25, 0x30	; 48
    6a02:	21 50       	subi	r18, 0x01	; 1
    6a04:	80 40       	sbci	r24, 0x00	; 0
    6a06:	90 40       	sbci	r25, 0x00	; 0
    6a08:	e1 f7       	brne	.-8      	; 0x6a02 <SCD30_sensor_on+0x10>
    6a0a:	00 c0       	rjmp	.+0      	; 0x6a0c <SCD30_sensor_on+0x1a>
    6a0c:	00 00       	nop
	_delay_ms(2000);
	clear_sampling_data();
    6a0e:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <clear_sampling_data>
	return init_measurement();
    6a12:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <init_measurement>
}
    6a16:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

00007292 <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    7292:	80 e0       	ldi	r24, 0x00	; 0
    7294:	0e 94 22 37 	call	0x6e44	; 0x6e44 <PM_HAL_SCD30_power>
    7298:	08 95       	ret

Disassembly of section .text.SCD30_init_c02_sampling:

00006f2e <SCD30_init_c02_sampling>:
}

void SCD30_init_c02_sampling(uint16_t samplingInterval, uint8_t nSamples, uint16_t data[]){
	co2_pars.cntSamples=0;
    6f2e:	ee e8       	ldi	r30, 0x8E	; 142
    6f30:	fe e0       	ldi	r31, 0x0E	; 14
    6f32:	11 82       	std	Z+1, r1	; 0x01
	co2_pars.nSamples=nSamples;
    6f34:	60 83       	st	Z, r22
	co2_pars.samplingInterval=samplingInterval;
    6f36:	95 83       	std	Z+5, r25	; 0x05
    6f38:	84 83       	std	Z+4, r24	; 0x04
	co2_pars.data=data;
    6f3a:	53 83       	std	Z+3, r21	; 0x03
    6f3c:	42 83       	std	Z+2, r20	; 0x02
    6f3e:	08 95       	ret

Disassembly of section .text.SCD30_init_temp_sampling:

00006f40 <SCD30_init_temp_sampling>:
}

void SCD30_init_temp_sampling(uint16_t samplingInterval, uint8_t nSamples, uint16_t data[]){
	temp_pars.cntSamples=0;
    6f40:	e8 e8       	ldi	r30, 0x88	; 136
    6f42:	fe e0       	ldi	r31, 0x0E	; 14
    6f44:	11 82       	std	Z+1, r1	; 0x01
	temp_pars.nSamples=nSamples;
    6f46:	60 83       	st	Z, r22
	temp_pars.samplingInterval=samplingInterval;
    6f48:	95 83       	std	Z+5, r25	; 0x05
    6f4a:	84 83       	std	Z+4, r24	; 0x04
	temp_pars.data=data;
    6f4c:	53 83       	std	Z+3, r21	; 0x03
    6f4e:	42 83       	std	Z+2, r20	; 0x02
    6f50:	08 95       	ret

Disassembly of section .text.SCD30_init_humidity_sampling:

00006f52 <SCD30_init_humidity_sampling>:
}

void SCD30_init_humidity_sampling(uint16_t samplingInterval, uint8_t nSamples, uint16_t data[]){
	hum_pars.cntSamples=0;
    6f52:	e2 e8       	ldi	r30, 0x82	; 130
    6f54:	fe e0       	ldi	r31, 0x0E	; 14
    6f56:	11 82       	std	Z+1, r1	; 0x01
	hum_pars.nSamples=nSamples;
    6f58:	60 83       	st	Z, r22
	hum_pars.samplingInterval=samplingInterval;
    6f5a:	95 83       	std	Z+5, r25	; 0x05
    6f5c:	84 83       	std	Z+4, r24	; 0x04
	hum_pars.data=data;
    6f5e:	53 83       	std	Z+3, r21	; 0x03
    6f60:	42 83       	std	Z+2, r20	; 0x02
    6f62:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

0000721a <SCD30_deinit_sampling>:
	TC1_HAL_start();
	return true;
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    721a:	0e 94 85 38 	call	0x710a	; 0x710a <TC1_HAL_stop>
	clear_sampling_data();
    721e:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <clear_sampling_data>
    7222:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00006562 <SCD30_is_sampling_done>:



bool SCD30_is_sampling_done(){
	return (
		co2_pars.nSamples==co2_pars.cntSamples && 
    6562:	ee e8       	ldi	r30, 0x8E	; 142
    6564:	fe e0       	ldi	r31, 0x0E	; 14
    6566:	90 81       	ld	r25, Z
    6568:	81 81       	ldd	r24, Z+1	; 0x01
		temp_pars.nSamples==temp_pars.cntSamples && 
    656a:	98 13       	cpse	r25, r24
    656c:	0e c0       	rjmp	.+28     	; 0x658a <SCD30_is_sampling_done+0x28>
    656e:	e8 e8       	ldi	r30, 0x88	; 136
    6570:	fe e0       	ldi	r31, 0x0E	; 14
    6572:	90 81       	ld	r25, Z
    6574:	81 81       	ldd	r24, Z+1	; 0x01



bool SCD30_is_sampling_done(){
	return (
		co2_pars.nSamples==co2_pars.cntSamples && 
    6576:	98 13       	cpse	r25, r24
    6578:	0a c0       	rjmp	.+20     	; 0x658e <SCD30_is_sampling_done+0x2c>
		temp_pars.nSamples==temp_pars.cntSamples && 
		hum_pars.nSamples==hum_pars.cntSamples); 
    657a:	e2 e8       	ldi	r30, 0x82	; 130
    657c:	fe e0       	ldi	r31, 0x0E	; 14
    657e:	90 81       	ld	r25, Z
    6580:	81 81       	ldd	r24, Z+1	; 0x01


bool SCD30_is_sampling_done(){
	return (
		co2_pars.nSamples==co2_pars.cntSamples && 
		temp_pars.nSamples==temp_pars.cntSamples && 
    6582:	98 17       	cp	r25, r24
    6584:	31 f0       	breq	.+12     	; 0x6592 <SCD30_is_sampling_done+0x30>
    6586:	80 e0       	ldi	r24, 0x00	; 0
    6588:	08 95       	ret
    658a:	80 e0       	ldi	r24, 0x00	; 0
    658c:	08 95       	ret
    658e:	80 e0       	ldi	r24, 0x00	; 0
    6590:	08 95       	ret
    6592:	81 e0       	ldi	r24, 0x01	; 1
		hum_pars.nSamples==hum_pars.cntSamples); 
}
    6594:	08 95       	ret

Disassembly of section .text.SCD30_calc_validate_SI:

00003d32 <SCD30_calc_validate_SI>:

bool SCD30_calc_validate_SI(uint16_t co2_SI, uint16_t temp_SI, uint16_t hum_SI, uint16_t *lowest, uint16_t *highest){
    3d32:	ef 92       	push	r14
    3d34:	ff 92       	push	r15
    3d36:	0f 93       	push	r16
    3d38:	1f 93       	push	r17
    3d3a:	cf 93       	push	r28
    3d3c:	df 93       	push	r29
    3d3e:	eb 01       	movw	r28, r22
    3d40:	7a 01       	movw	r14, r20
    3d42:	d9 01       	movw	r26, r18
    3d44:	f8 01       	movw	r30, r16
	*highest=0;
    3d46:	11 82       	std	Z+1, r1	; 0x01
    3d48:	10 82       	st	Z, r1
	if(co2_SI>(*highest)){
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	11 f0       	breq	.+4      	; 0x3d52 <SCD30_calc_validate_SI+0x20>
		*highest=co2_SI;
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	80 83       	st	Z, r24
	}
	if (temp_SI>(*highest)){
    3d52:	20 81       	ld	r18, Z
    3d54:	31 81       	ldd	r19, Z+1	; 0x01
    3d56:	2c 17       	cp	r18, r28
    3d58:	3d 07       	cpc	r19, r29
    3d5a:	10 f4       	brcc	.+4      	; 0x3d60 <SCD30_calc_validate_SI+0x2e>
		*highest=temp_SI;
    3d5c:	d1 83       	std	Z+1, r29	; 0x01
    3d5e:	c0 83       	st	Z, r28
	}
	if (hum_SI>(*highest)){
    3d60:	20 81       	ld	r18, Z
    3d62:	31 81       	ldd	r19, Z+1	; 0x01
    3d64:	2e 15       	cp	r18, r14
    3d66:	3f 05       	cpc	r19, r15
    3d68:	10 f4       	brcc	.+4      	; 0x3d6e <SCD30_calc_validate_SI+0x3c>
		*highest=hum_SI;
    3d6a:	f1 82       	std	Z+1, r15	; 0x01
    3d6c:	e0 82       	st	Z, r14
	}
	*lowest=*highest;
    3d6e:	20 81       	ld	r18, Z
    3d70:	31 81       	ldd	r19, Z+1	; 0x01
    3d72:	11 96       	adiw	r26, 0x01	; 1
    3d74:	3c 93       	st	X, r19
    3d76:	2e 93       	st	-X, r18
	if(co2_SI!=0 && co2_SI<(*lowest)){
    3d78:	00 97       	sbiw	r24, 0x00	; 0
    3d7a:	31 f0       	breq	.+12     	; 0x3d88 <SCD30_calc_validate_SI+0x56>
    3d7c:	82 17       	cp	r24, r18
    3d7e:	93 07       	cpc	r25, r19
    3d80:	18 f4       	brcc	.+6      	; 0x3d88 <SCD30_calc_validate_SI+0x56>
		*lowest=co2_SI;
    3d82:	11 96       	adiw	r26, 0x01	; 1
    3d84:	9c 93       	st	X, r25
    3d86:	8e 93       	st	-X, r24
	}
	if (temp_SI!=0 && temp_SI<(*lowest)){
    3d88:	20 97       	sbiw	r28, 0x00	; 0
    3d8a:	49 f0       	breq	.+18     	; 0x3d9e <SCD30_calc_validate_SI+0x6c>
    3d8c:	2d 91       	ld	r18, X+
    3d8e:	3c 91       	ld	r19, X
    3d90:	11 97       	sbiw	r26, 0x01	; 1
    3d92:	c2 17       	cp	r28, r18
    3d94:	d3 07       	cpc	r29, r19
    3d96:	18 f4       	brcc	.+6      	; 0x3d9e <SCD30_calc_validate_SI+0x6c>
		*lowest=temp_SI;
    3d98:	11 96       	adiw	r26, 0x01	; 1
    3d9a:	dc 93       	st	X, r29
    3d9c:	ce 93       	st	-X, r28
	}
	if(hum_SI!=0 && hum_SI<(*lowest)){
    3d9e:	e1 14       	cp	r14, r1
    3da0:	f1 04       	cpc	r15, r1
    3da2:	49 f0       	breq	.+18     	; 0x3db6 <SCD30_calc_validate_SI+0x84>
    3da4:	2d 91       	ld	r18, X+
    3da6:	3c 91       	ld	r19, X
    3da8:	11 97       	sbiw	r26, 0x01	; 1
    3daa:	e2 16       	cp	r14, r18
    3dac:	f3 06       	cpc	r15, r19
    3dae:	18 f4       	brcc	.+6      	; 0x3db6 <SCD30_calc_validate_SI+0x84>
		*lowest=hum_SI;
    3db0:	11 96       	adiw	r26, 0x01	; 1
    3db2:	fc 92       	st	X, r15
    3db4:	ee 92       	st	-X, r14
	}
	
	//Check that all sampling intervals are dividable with lowest si
	if(co2_SI % *lowest != 0) return false;
    3db6:	2d 91       	ld	r18, X+
    3db8:	3c 91       	ld	r19, X
    3dba:	b9 01       	movw	r22, r18
    3dbc:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodhi4>
    3dc0:	89 2b       	or	r24, r25
    3dc2:	71 f4       	brne	.+28     	; 0x3de0 <SCD30_calc_validate_SI+0xae>
	if(temp_SI % *lowest != 0) return false;
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	b9 01       	movw	r22, r18
    3dc8:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodhi4>
    3dcc:	89 2b       	or	r24, r25
    3dce:	51 f4       	brne	.+20     	; 0x3de4 <SCD30_calc_validate_SI+0xb2>
	if(hum_SI % *lowest != 0) return false;
    3dd0:	c7 01       	movw	r24, r14
    3dd2:	b9 01       	movw	r22, r18
    3dd4:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodhi4>
    3dd8:	89 2b       	or	r24, r25
    3dda:	31 f0       	breq	.+12     	; 0x3de8 <SCD30_calc_validate_SI+0xb6>
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
    3dde:	05 c0       	rjmp	.+10     	; 0x3dea <SCD30_calc_validate_SI+0xb8>
	if(hum_SI!=0 && hum_SI<(*lowest)){
		*lowest=hum_SI;
	}
	
	//Check that all sampling intervals are dividable with lowest si
	if(co2_SI % *lowest != 0) return false;
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	03 c0       	rjmp	.+6      	; 0x3dea <SCD30_calc_validate_SI+0xb8>
	if(temp_SI % *lowest != 0) return false;
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	01 c0       	rjmp	.+2      	; 0x3dea <SCD30_calc_validate_SI+0xb8>
	if(hum_SI % *lowest != 0) return false;
	return true;
    3de8:	81 e0       	ldi	r24, 0x01	; 1
}
    3dea:	df 91       	pop	r29
    3dec:	cf 91       	pop	r28
    3dee:	1f 91       	pop	r17
    3df0:	0f 91       	pop	r16
    3df2:	ff 90       	pop	r15
    3df4:	ef 90       	pop	r14
    3df6:	08 95       	ret

Disassembly of section .text.read_all_values:

000034d0 <read_all_values>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

SCD30_STATUS read_all_values(uint16_t *co2, uint16_t *temp, uint16_t *humidity){
    34d0:	cf 92       	push	r12
    34d2:	df 92       	push	r13
    34d4:	ef 92       	push	r14
    34d6:	ff 92       	push	r15
    34d8:	0f 93       	push	r16
    34da:	1f 93       	push	r17
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
    34e4:	62 97       	sbiw	r28, 0x12	; 18
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	8c 01       	movw	r16, r24
    34f2:	7b 01       	movw	r14, r22
    34f4:	6a 01       	movw	r12, r20
	uint8_t status;
	uint8_t data[18];
	*co2=0xffff;
    34f6:	8f ef       	ldi	r24, 0xFF	; 255
    34f8:	9f ef       	ldi	r25, 0xFF	; 255
    34fa:	f8 01       	movw	r30, r16
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	80 83       	st	Z, r24
	*temp=0xffff;
    3500:	fb 01       	movw	r30, r22
    3502:	91 83       	std	Z+1, r25	; 0x01
    3504:	80 83       	st	Z, r24
	*humidity=0xffff;
    3506:	fa 01       	movw	r30, r20
    3508:	91 83       	std	Z+1, r25	; 0x01
    350a:	80 83       	st	Z, r24
	
	//Check values are ready
	if(!SCD30_HAL_data_ready()){
    350c:	0e 94 e5 38 	call	0x71ca	; 0x71ca <SCD30_HAL_data_ready>
    3510:	81 11       	cpse	r24, r1
    3512:	0d c0       	rjmp	.+26     	; 0x352e <read_all_values+0x5e>
		*co2=0xfffe;
    3514:	8e ef       	ldi	r24, 0xFE	; 254
    3516:	9f ef       	ldi	r25, 0xFF	; 255
    3518:	f8 01       	movw	r30, r16
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	80 83       	st	Z, r24
		*temp=0xfffe;
    351e:	f7 01       	movw	r30, r14
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	80 83       	st	Z, r24
		*humidity=0xfffe;
    3524:	f6 01       	movw	r30, r12
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    352a:	83 e0       	ldi	r24, 0x03	; 3
    352c:	4d c0       	rjmp	.+154    	; 0x35c8 <read_all_values+0xf8>
	}
	
	//Set read pointer
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    352e:	22 e0       	ldi	r18, 0x02	; 2
    3530:	47 e1       	ldi	r20, 0x17	; 23
    3532:	5a e0       	ldi	r21, 0x0A	; 10
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	81 e6       	ldi	r24, 0x61	; 97
    3538:	0e 94 99 36 	call	0x6d32	; 0x6d32 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    353c:	81 11       	cpse	r24, r1
    353e:	3b c0       	rjmp	.+118    	; 0x35b6 <read_all_values+0xe6>
    3540:	8f e3       	ldi	r24, 0x3F	; 63
    3542:	9f e1       	ldi	r25, 0x1F	; 31
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	f1 f7       	brne	.-4      	; 0x3544 <read_all_values+0x74>
    3548:	00 c0       	rjmp	.+0      	; 0x354a <read_all_values+0x7a>
    354a:	00 00       	nop
	
	_delay_ms(4);
	
	//Read values
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 18);
    354c:	42 e1       	ldi	r20, 0x12	; 18
    354e:	be 01       	movw	r22, r28
    3550:	6f 5f       	subi	r22, 0xFF	; 255
    3552:	7f 4f       	sbci	r23, 0xFF	; 255
    3554:	81 e6       	ldi	r24, 0x61	; 97
    3556:	0e 94 e5 32 	call	0x65ca	; 0x65ca <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    355a:	81 11       	cpse	r24, r1
    355c:	2e c0       	rjmp	.+92     	; 0x35ba <read_all_values+0xea>
	
	//Validate co2
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    355e:	ce 01       	movw	r24, r28
    3560:	01 96       	adiw	r24, 0x01	; 1
    3562:	0e 94 17 33 	call	0x662e	; 0x662e <validate_data>
    3566:	88 23       	and	r24, r24
    3568:	51 f1       	breq	.+84     	; 0x35be <read_all_values+0xee>
	*co2=bytes_2_uint(data, 1);
    356a:	61 e0       	ldi	r22, 0x01	; 1
    356c:	ce 01       	movw	r24, r28
    356e:	01 96       	adiw	r24, 0x01	; 1
    3570:	0e 94 2d 29 	call	0x525a	; 0x525a <bytes_2_uint>
    3574:	f8 01       	movw	r30, r16
    3576:	91 83       	std	Z+1, r25	; 0x01
    3578:	80 83       	st	Z, r24
	
	//Validate temp
	if(!validate_data(&data[6])) return SCD30_STATUS_ERROR;
    357a:	ce 01       	movw	r24, r28
    357c:	07 96       	adiw	r24, 0x07	; 7
    357e:	0e 94 17 33 	call	0x662e	; 0x662e <validate_data>
    3582:	88 23       	and	r24, r24
    3584:	f1 f0       	breq	.+60     	; 0x35c2 <read_all_values+0xf2>
	*temp=bytes_2_uint(&data[6], 10);
    3586:	6a e0       	ldi	r22, 0x0A	; 10
    3588:	ce 01       	movw	r24, r28
    358a:	07 96       	adiw	r24, 0x07	; 7
    358c:	0e 94 2d 29 	call	0x525a	; 0x525a <bytes_2_uint>
    3590:	f7 01       	movw	r30, r14
    3592:	91 83       	std	Z+1, r25	; 0x01
    3594:	80 83       	st	Z, r24
	
	//Validate humidity
	if(!validate_data(&data[12])) return SCD30_STATUS_ERROR;
    3596:	ce 01       	movw	r24, r28
    3598:	0d 96       	adiw	r24, 0x0d	; 13
    359a:	0e 94 17 33 	call	0x662e	; 0x662e <validate_data>
    359e:	88 23       	and	r24, r24
    35a0:	91 f0       	breq	.+36     	; 0x35c6 <read_all_values+0xf6>
	*humidity=bytes_2_uint(&data[12], 10);
    35a2:	6a e0       	ldi	r22, 0x0A	; 10
    35a4:	ce 01       	movw	r24, r28
    35a6:	0d 96       	adiw	r24, 0x0d	; 13
    35a8:	0e 94 2d 29 	call	0x525a	; 0x525a <bytes_2_uint>
    35ac:	f6 01       	movw	r30, r12
    35ae:	91 83       	std	Z+1, r25	; 0x01
    35b0:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	09 c0       	rjmp	.+18     	; 0x35c8 <read_all_values+0xf8>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	//Set read pointer
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	07 c0       	rjmp	.+14     	; 0x35c8 <read_all_values+0xf8>
	
	_delay_ms(4);
	
	//Read values
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 18);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	05 c0       	rjmp	.+10     	; 0x35c8 <read_all_values+0xf8>
	
	//Validate co2
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	03 c0       	rjmp	.+6      	; 0x35c8 <read_all_values+0xf8>
	*co2=bytes_2_uint(data, 1);
	
	//Validate temp
	if(!validate_data(&data[6])) return SCD30_STATUS_ERROR;
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	01 c0       	rjmp	.+2      	; 0x35c8 <read_all_values+0xf8>
	*temp=bytes_2_uint(&data[6], 10);
	
	//Validate humidity
	if(!validate_data(&data[12])) return SCD30_STATUS_ERROR;
    35c6:	81 e0       	ldi	r24, 0x01	; 1
	*humidity=bytes_2_uint(&data[12], 10);
	
	return SCD30_STATUS_SUCCESS;
}
    35c8:	62 96       	adiw	r28, 0x12	; 18
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	de bf       	out	0x3e, r29	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	cd bf       	out	0x3d, r28	; 61
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	1f 91       	pop	r17
    35da:	0f 91       	pop	r16
    35dc:	ff 90       	pop	r15
    35de:	ef 90       	pop	r14
    35e0:	df 90       	pop	r13
    35e2:	cf 90       	pop	r12
    35e4:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00002c7e <vect_SCD_do_sample>:
}

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
    2c7e:	1f 93       	push	r17
    2c80:	cf 93       	push	r28
    2c82:	df 93       	push	r29
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <vect_SCD_do_sample+0x8>
    2c86:	00 d0       	rcall	.+0      	; 0x2c88 <vect_SCD_do_sample+0xa>
    2c88:	00 d0       	rcall	.+0      	; 0x2c8a <vect_SCD_do_sample+0xc>
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
	uint16_t co2, temp, humidity;
	
	read_all_values(&co2, &temp, &humidity);
    2c8e:	ae 01       	movw	r20, r28
    2c90:	4b 5f       	subi	r20, 0xFB	; 251
    2c92:	5f 4f       	sbci	r21, 0xFF	; 255
    2c94:	be 01       	movw	r22, r28
    2c96:	6d 5f       	subi	r22, 0xFD	; 253
    2c98:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9a:	ce 01       	movw	r24, r28
    2c9c:	01 96       	adiw	r24, 0x01	; 1
    2c9e:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <read_all_values>
	
	//Set values 
	if(co2_pars.cntSamples<co2_pars.nSamples &&  si_counter % co2_pars.samplingInterval==0){
    2ca2:	ee e8       	ldi	r30, 0x8E	; 142
    2ca4:	fe e0       	ldi	r31, 0x0E	; 14
    2ca6:	21 81       	ldd	r18, Z+1	; 0x01
    2ca8:	30 81       	ld	r19, Z
    2caa:	23 17       	cp	r18, r19
    2cac:	d8 f4       	brcc	.+54     	; 0x2ce4 <vect_SCD_do_sample+0x66>
    2cae:	60 91 92 0e 	lds	r22, 0x0E92	; 0x800e92 <co2_pars+0x4>
    2cb2:	70 91 93 0e 	lds	r23, 0x0E93	; 0x800e93 <co2_pars+0x5>
    2cb6:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <si_counter>
    2cba:	90 91 d4 0e 	lds	r25, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2cbe:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodhi4>
    2cc2:	89 2b       	or	r24, r25
    2cc4:	79 f4       	brne	.+30     	; 0x2ce4 <vect_SCD_do_sample+0x66>
		co2_pars.data[co2_pars.cntSamples++]=co2;
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	41 e0       	ldi	r20, 0x01	; 1
    2ccc:	42 0f       	add	r20, r18
    2cce:	41 83       	std	Z+1, r20	; 0x01
    2cd0:	e2 2f       	mov	r30, r18
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	ee 0f       	add	r30, r30
    2cd6:	ff 1f       	adc	r31, r31
    2cd8:	e8 0f       	add	r30, r24
    2cda:	f9 1f       	adc	r31, r25
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce0:	91 83       	std	Z+1, r25	; 0x01
    2ce2:	80 83       	st	Z, r24
	}
	if(temp_pars.cntSamples<temp_pars.nSamples &&  si_counter % temp_pars.samplingInterval==0){
    2ce4:	e8 e8       	ldi	r30, 0x88	; 136
    2ce6:	fe e0       	ldi	r31, 0x0E	; 14
    2ce8:	21 81       	ldd	r18, Z+1	; 0x01
    2cea:	40 81       	ld	r20, Z
    2cec:	24 17       	cp	r18, r20
    2cee:	d8 f4       	brcc	.+54     	; 0x2d26 <vect_SCD_do_sample+0xa8>
    2cf0:	60 91 8c 0e 	lds	r22, 0x0E8C	; 0x800e8c <temp_pars+0x4>
    2cf4:	70 91 8d 0e 	lds	r23, 0x0E8D	; 0x800e8d <temp_pars+0x5>
    2cf8:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <si_counter>
    2cfc:	90 91 d4 0e 	lds	r25, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2d00:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodhi4>
    2d04:	89 2b       	or	r24, r25
    2d06:	79 f4       	brne	.+30     	; 0x2d26 <vect_SCD_do_sample+0xa8>
		temp_pars.data[temp_pars.cntSamples++]=temp;
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	51 e0       	ldi	r21, 0x01	; 1
    2d0e:	52 0f       	add	r21, r18
    2d10:	51 83       	std	Z+1, r21	; 0x01
    2d12:	e2 2f       	mov	r30, r18
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	ee 0f       	add	r30, r30
    2d18:	ff 1f       	adc	r31, r31
    2d1a:	e8 0f       	add	r30, r24
    2d1c:	f9 1f       	adc	r31, r25
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
	}
	if(hum_pars.cntSamples<hum_pars.nSamples &&  si_counter % hum_pars.samplingInterval==0){
    2d26:	e2 e8       	ldi	r30, 0x82	; 130
    2d28:	fe e0       	ldi	r31, 0x0E	; 14
    2d2a:	21 81       	ldd	r18, Z+1	; 0x01
    2d2c:	10 81       	ld	r17, Z
    2d2e:	21 17       	cp	r18, r17
    2d30:	d8 f4       	brcc	.+54     	; 0x2d68 <vect_SCD_do_sample+0xea>
    2d32:	60 91 86 0e 	lds	r22, 0x0E86	; 0x800e86 <hum_pars+0x4>
    2d36:	70 91 87 0e 	lds	r23, 0x0E87	; 0x800e87 <hum_pars+0x5>
    2d3a:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <si_counter>
    2d3e:	90 91 d4 0e 	lds	r25, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2d42:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodhi4>
    2d46:	89 2b       	or	r24, r25
    2d48:	79 f4       	brne	.+30     	; 0x2d68 <vect_SCD_do_sample+0xea>
		hum_pars.data[hum_pars.cntSamples++]=humidity;
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	51 e0       	ldi	r21, 0x01	; 1
    2d50:	52 0f       	add	r21, r18
    2d52:	51 83       	std	Z+1, r21	; 0x01
    2d54:	e2 2f       	mov	r30, r18
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	ee 0f       	add	r30, r30
    2d5a:	ff 1f       	adc	r31, r31
    2d5c:	e8 0f       	add	r30, r24
    2d5e:	f9 1f       	adc	r31, r25
    2d60:	8d 81       	ldd	r24, Y+5	; 0x05
    2d62:	9e 81       	ldd	r25, Y+6	; 0x06
    2d64:	91 83       	std	Z+1, r25	; 0x01
    2d66:	80 83       	st	Z, r24
	}
	
	//Wrap si_counter if at max
	si_counter+=lowest_si;
    2d68:	60 91 d3 0e 	lds	r22, 0x0ED3	; 0x800ed3 <si_counter>
    2d6c:	70 91 d4 0e 	lds	r23, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2d70:	80 91 d7 0e 	lds	r24, 0x0ED7	; 0x800ed7 <lowest_si>
    2d74:	90 91 d8 0e 	lds	r25, 0x0ED8	; 0x800ed8 <lowest_si+0x1>
    2d78:	86 0f       	add	r24, r22
    2d7a:	97 1f       	adc	r25, r23
    2d7c:	90 93 d4 0e 	sts	0x0ED4, r25	; 0x800ed4 <si_counter+0x1>
    2d80:	80 93 d3 0e 	sts	0x0ED3, r24	; 0x800ed3 <si_counter>
	if(si_counter==highest_si){
    2d84:	60 91 d5 0e 	lds	r22, 0x0ED5	; 0x800ed5 <highest_si>
    2d88:	70 91 d6 0e 	lds	r23, 0x0ED6	; 0x800ed6 <highest_si+0x1>
    2d8c:	86 17       	cp	r24, r22
    2d8e:	97 07       	cpc	r25, r23
    2d90:	21 f4       	brne	.+8      	; 0x2d9a <vect_SCD_do_sample+0x11c>
		si_counter=0;
    2d92:	10 92 d4 0e 	sts	0x0ED4, r1	; 0x800ed4 <si_counter+0x1>
    2d96:	10 92 d3 0e 	sts	0x0ED3, r1	; 0x800ed3 <si_counter>
	}
	
	//Stop sampling if all values are sampled
	if(
		co2_pars.cntSamples==co2_pars.nSamples && 
    2d9a:	80 91 8f 0e 	lds	r24, 0x0E8F	; 0x800e8f <co2_pars+0x1>
	if(si_counter==highest_si){
		si_counter=0;
	}
	
	//Stop sampling if all values are sampled
	if(
    2d9e:	38 13       	cpse	r19, r24
    2da0:	0a c0       	rjmp	.+20     	; 0x2db6 <vect_SCD_do_sample+0x138>
		co2_pars.cntSamples==co2_pars.nSamples && 
		temp_pars.cntSamples==temp_pars.nSamples &&
    2da2:	80 91 89 0e 	lds	r24, 0x0E89	; 0x800e89 <temp_pars+0x1>
		si_counter=0;
	}
	
	//Stop sampling if all values are sampled
	if(
		co2_pars.cntSamples==co2_pars.nSamples && 
    2da6:	48 13       	cpse	r20, r24
    2da8:	06 c0       	rjmp	.+12     	; 0x2db6 <vect_SCD_do_sample+0x138>
		temp_pars.cntSamples==temp_pars.nSamples &&
		hum_pars.cntSamples==hum_pars.nSamples
    2daa:	80 91 83 0e 	lds	r24, 0x0E83	; 0x800e83 <hum_pars+0x1>
	}
	
	//Stop sampling if all values are sampled
	if(
		co2_pars.cntSamples==co2_pars.nSamples && 
		temp_pars.cntSamples==temp_pars.nSamples &&
    2dae:	18 13       	cpse	r17, r24
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <vect_SCD_do_sample+0x138>
		hum_pars.cntSamples==hum_pars.nSamples
	){
		TC1_HAL_stop();			
    2db2:	0e 94 85 38 	call	0x710a	; 0x710a <TC1_HAL_stop>
	}
}
    2db6:	26 96       	adiw	r28, 0x06	; 6
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	1f 91       	pop	r17
    2dc8:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

000053ea <SCD30_start_sampling>:
	hum_pars.nSamples=nSamples;
	hum_pars.samplingInterval=samplingInterval;
	hum_pars.data=data;
}

bool SCD30_start_sampling(){
    53ea:	0f 93       	push	r16
    53ec:	1f 93       	push	r17
    53ee:	cf 93       	push	r28
	//Calculate SIs
	bool valid=SCD30_calc_validate_SI(
    53f0:	40 91 86 0e 	lds	r20, 0x0E86	; 0x800e86 <hum_pars+0x4>
    53f4:	50 91 87 0e 	lds	r21, 0x0E87	; 0x800e87 <hum_pars+0x5>
    53f8:	60 91 8c 0e 	lds	r22, 0x0E8C	; 0x800e8c <temp_pars+0x4>
    53fc:	70 91 8d 0e 	lds	r23, 0x0E8D	; 0x800e8d <temp_pars+0x5>
    5400:	05 ed       	ldi	r16, 0xD5	; 213
    5402:	1e e0       	ldi	r17, 0x0E	; 14
    5404:	27 ed       	ldi	r18, 0xD7	; 215
    5406:	3e e0       	ldi	r19, 0x0E	; 14
    5408:	80 91 92 0e 	lds	r24, 0x0E92	; 0x800e92 <co2_pars+0x4>
    540c:	90 91 93 0e 	lds	r25, 0x0E93	; 0x800e93 <co2_pars+0x5>
    5410:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <SCD30_calc_validate_SI>
	temp_pars.samplingInterval,
	hum_pars.samplingInterval,
	&lowest_si,
	&highest_si
	);
	if(!valid) return false;
    5414:	88 23       	and	r24, r24
    5416:	91 f0       	breq	.+36     	; 0x543c <SCD30_start_sampling+0x52>
	
	//Wait for first sampling
	while(!SCD30_HAL_data_ready()){};
    5418:	0e 94 e5 38 	call	0x71ca	; 0x71ca <SCD30_HAL_data_ready>
    541c:	c8 2f       	mov	r28, r24
    541e:	88 23       	and	r24, r24
    5420:	d9 f3       	breq	.-10     	; 0x5418 <SCD30_start_sampling+0x2e>
	
	//Set timer
	TC1_HAL_init(lowest_si, &vect_SCD_do_sample);
    5422:	6f e3       	ldi	r22, 0x3F	; 63
    5424:	76 e1       	ldi	r23, 0x16	; 22
    5426:	80 91 d7 0e 	lds	r24, 0x0ED7	; 0x800ed7 <lowest_si>
    542a:	90 91 d8 0e 	lds	r25, 0x0ED8	; 0x800ed8 <lowest_si+0x1>
    542e:	0e 94 10 32 	call	0x6420	; 0x6420 <TC1_HAL_init>
	
	//Take first sampling
	vect_SCD_do_sample();
    5432:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <vect_SCD_do_sample>
	
	//Start timer
	TC1_HAL_start();
    5436:	0e 94 7f 38 	call	0x70fe	; 0x70fe <TC1_HAL_start>
	return true;
    543a:	01 c0       	rjmp	.+2      	; 0x543e <SCD30_start_sampling+0x54>
	temp_pars.samplingInterval,
	hum_pars.samplingInterval,
	&lowest_si,
	&highest_si
	);
	if(!valid) return false;
    543c:	c0 e0       	ldi	r28, 0x00	; 0
	vect_SCD_do_sample();
	
	//Start timer
	TC1_HAL_start();
	return true;
}
    543e:	8c 2f       	mov	r24, r28
    5440:	cf 91       	pop	r28
    5442:	1f 91       	pop	r17
    5444:	0f 91       	pop	r16
    5446:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00006660 <SCD30_get_reading>:
	if(temp_SI % *lowest != 0) return false;
	if(hum_SI % *lowest != 0) return false;
	return true;
}

SCD30_STATUS SCD30_get_reading(uint16_t *co2, uint16_t *temp, uint16_t *humidity){
    6660:	ef 92       	push	r14
    6662:	ff 92       	push	r15
    6664:	0f 93       	push	r16
    6666:	1f 93       	push	r17
    6668:	cf 93       	push	r28
    666a:	df 93       	push	r29
    666c:	ec 01       	movw	r28, r24
    666e:	8b 01       	movw	r16, r22
    6670:	7a 01       	movw	r14, r20
	while(!SCD30_HAL_data_ready()){};
    6672:	0e 94 e5 38 	call	0x71ca	; 0x71ca <SCD30_HAL_data_ready>
    6676:	88 23       	and	r24, r24
    6678:	e1 f3       	breq	.-8      	; 0x6672 <SCD30_get_reading+0x12>
	
	return read_all_values(co2, temp, humidity);
    667a:	a7 01       	movw	r20, r14
    667c:	b8 01       	movw	r22, r16
    667e:	ce 01       	movw	r24, r28
    6680:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <read_all_values>
}
    6684:	df 91       	pop	r29
    6686:	cf 91       	pop	r28
    6688:	1f 91       	pop	r17
    668a:	0f 91       	pop	r16
    668c:	ff 90       	pop	r15
    668e:	ef 90       	pop	r14
    6690:	08 95       	ret

Disassembly of section .text.parse_cmd:

00006844 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    6844:	fc 01       	movw	r30, r24
    6846:	80 81       	ld	r24, Z
    6848:	82 37       	cpi	r24, 0x72	; 114
    684a:	51 f0       	breq	.+20     	; 0x6860 <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    684c:	87 37       	cpi	r24, 0x77	; 119
    684e:	51 f0       	breq	.+20     	; 0x6864 <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    6850:	83 36       	cpi	r24, 0x63	; 99
    6852:	51 f0       	breq	.+20     	; 0x6868 <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    6854:	83 37       	cpi	r24, 0x73	; 115
    6856:	51 f0       	breq	.+20     	; 0x686c <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    6858:	81 37       	cpi	r24, 0x71	; 113
    685a:	51 f4       	brne	.+20     	; 0x6870 <parse_cmd+0x2c>
    685c:	84 e0       	ldi	r24, 0x04	; 4
    685e:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    6860:	87 e0       	ldi	r24, 0x07	; 7
    6862:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    6864:	88 e0       	ldi	r24, 0x08	; 8
    6866:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    6868:	89 e0       	ldi	r24, 0x09	; 9
    686a:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    686c:	8a e0       	ldi	r24, 0x0A	; 10
    686e:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    6870:	85 e0       	ldi	r24, 0x05	; 5
}
    6872:	08 95       	ret

Disassembly of section .text.validate_cmd:

000056bc <validate_cmd>:

static bool validate_cmd(char msg[]){
    56bc:	cf 93       	push	r28
    56be:	df 93       	push	r29
    56c0:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    56c2:	bc 01       	movw	r22, r24
    56c4:	80 e8       	ldi	r24, 0x80	; 128
    56c6:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    56ca:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    56cc:	fc 01       	movw	r30, r24
    56ce:	31 97       	sbiw	r30, 0x01	; 1
    56d0:	ec 0f       	add	r30, r28
    56d2:	fd 1f       	adc	r31, r29
    56d4:	80 81       	ld	r24, Z
    56d6:	80 32       	cpi	r24, 0x20	; 32
    56d8:	b1 f0       	breq	.+44     	; 0x5706 <validate_cmd+0x4a>
    56da:	20 e0       	ldi	r18, 0x00	; 0
    56dc:	30 e0       	ldi	r19, 0x00	; 0
    56de:	40 e0       	ldi	r20, 0x00	; 0
    56e0:	0d c0       	rjmp	.+26     	; 0x56fc <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    56e2:	fe 01       	movw	r30, r28
    56e4:	e2 0f       	add	r30, r18
    56e6:	f3 1f       	adc	r31, r19
    56e8:	90 81       	ld	r25, Z
    56ea:	90 32       	cpi	r25, 0x20	; 32
    56ec:	21 f4       	brne	.+8      	; 0x56f6 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    56ee:	41 11       	cpse	r20, r1
    56f0:	0c c0       	rjmp	.+24     	; 0x570a <validate_cmd+0x4e>
			lastCharWasSpace=true;
    56f2:	41 e0       	ldi	r20, 0x01	; 1
    56f4:	01 c0       	rjmp	.+2      	; 0x56f8 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    56f6:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    56f8:	2f 5f       	subi	r18, 0xFF	; 255
    56fa:	3f 4f       	sbci	r19, 0xFF	; 255
    56fc:	26 17       	cp	r18, r22
    56fe:	37 07       	cpc	r19, r23
    5700:	80 f3       	brcs	.-32     	; 0x56e2 <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    5702:	81 e0       	ldi	r24, 0x01	; 1
    5704:	03 c0       	rjmp	.+6      	; 0x570c <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    5706:	80 e0       	ldi	r24, 0x00	; 0
    5708:	01 c0       	rjmp	.+2      	; 0x570c <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    570a:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    570c:	df 91       	pop	r29
    570e:	cf 91       	pop	r28
    5710:	08 95       	ret

Disassembly of section .text.CONF_enter:

00002f0a <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    2f0a:	cf 93       	push	r28
	uart1_hal_init();
    2f0c:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    2f10:	c0 e0       	ldi	r28, 0x00	; 0
    2f12:	0d c0       	rjmp	.+26     	; 0x2f2e <CONF_enter+0x24>
				TC2_HAL_init();
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    2f14:	c2 e0       	ldi	r28, 0x02	; 2
    2f16:	0b c0       	rjmp	.+22     	; 0x2f2e <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    2f18:	c5 e0       	ldi	r28, 0x05	; 5
    2f1a:	09 c0       	rjmp	.+18     	; 0x2f2e <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    2f1c:	c6 e0       	ldi	r28, 0x06	; 6
    2f1e:	07 c0       	rjmp	.+14     	; 0x2f2e <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2f20:	c5 e0       	ldi	r28, 0x05	; 5
    2f22:	05 c0       	rjmp	.+10     	; 0x2f2e <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2f24:	c5 e0       	ldi	r28, 0x05	; 5
    2f26:	03 c0       	rjmp	.+6      	; 0x2f2e <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    2f28:	c5 e0       	ldi	r28, 0x05	; 5
    2f2a:	01 c0       	rjmp	.+2      	; 0x2f2e <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2f2c:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    2f2e:	ec 2f       	mov	r30, r28
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	ec 30       	cpi	r30, 0x0C	; 12
    2f34:	f1 05       	cpc	r31, r1
    2f36:	d8 f7       	brcc	.-10     	; 0x2f2e <CONF_enter+0x24>
    2f38:	e5 5b       	subi	r30, 0xB5	; 181
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	0c 94 d9 38 	jmp	0x71b2	; 0x71b2 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    2f40:	6f eb       	ldi	r22, 0xBF	; 191
    2f42:	77 e0       	ldi	r23, 0x07	; 7
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    2f4a:	65 ee       	ldi	r22, 0xE5	; 229
    2f4c:	77 e0       	ldi	r23, 0x07	; 7
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				TC2_HAL_init();
    2f54:	0e 94 b9 35 	call	0x6b72	; 0x6b72 <TC2_HAL_init>
				if(!init_methane_SCD30()){
    2f58:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <init_methane_SCD30>
    2f5c:	81 11       	cpse	r24, r1
    2f5e:	da cf       	rjmp	.-76     	; 0x2f14 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    2f60:	67 e0       	ldi	r22, 0x07	; 7
    2f62:	78 e0       	ldi	r23, 0x08	; 8
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
					state=CONF_EXIT;
    2f6a:	c4 e0       	ldi	r28, 0x04	; 4
    2f6c:	e0 cf       	rjmp	.-64     	; 0x2f2e <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    2f6e:	0e 94 16 38 	call	0x702c	; 0x702c <uart1_hal_message_ready>
    2f72:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    2f74:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    2f76:	0e 94 1d 38 	call	0x703a	; 0x703a <uart1_hal_rx_full>
    2f7a:	81 11       	cpse	r24, r1
    2f7c:	cd cf       	rjmp	.-102    	; 0x2f18 <CONF_enter+0xe>
    2f7e:	d7 cf       	rjmp	.-82     	; 0x2f2e <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    2f80:	82 e7       	ldi	r24, 0x72	; 114
    2f82:	97 e0       	ldi	r25, 0x07	; 7
    2f84:	0e 94 bd 34 	call	0x697a	; 0x697a <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    2f88:	82 e7       	ldi	r24, 0x72	; 114
    2f8a:	97 e0       	ldi	r25, 0x07	; 7
    2f8c:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <validate_cmd>
    2f90:	88 23       	and	r24, r24
    2f92:	21 f2       	breq	.-120    	; 0x2f1c <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    2f94:	82 e7       	ldi	r24, 0x72	; 114
    2f96:	97 e0       	ldi	r25, 0x07	; 7
    2f98:	0e 94 22 34 	call	0x6844	; 0x6844 <parse_cmd>
    2f9c:	c8 2f       	mov	r28, r24
    2f9e:	c7 cf       	rjmp	.-114    	; 0x2f2e <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    2fa0:	62 e7       	ldi	r22, 0x72	; 114
    2fa2:	77 e0       	ldi	r23, 0x07	; 7
    2fa4:	80 e8       	ldi	r24, 0x80	; 128
    2fa6:	4a ea       	ldi	r20, 0xAA	; 170
    2fa8:	56 e0       	ldi	r21, 0x06	; 6
    2faa:	0e 94 16 0c 	call	0x182c	; 0x182c <handle_read>
    2fae:	88 23       	and	r24, r24
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <CONF_enter+0xaa>
    2fb2:	b6 cf       	rjmp	.-148    	; 0x2f20 <CONF_enter+0x16>
					state=CONF_REPLY;
    2fb4:	cb e0       	ldi	r28, 0x0B	; 11
    2fb6:	bb cf       	rjmp	.-138    	; 0x2f2e <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    2fb8:	62 e7       	ldi	r22, 0x72	; 114
    2fba:	77 e0       	ldi	r23, 0x07	; 7
    2fbc:	80 e8       	ldi	r24, 0x80	; 128
    2fbe:	4a ea       	ldi	r20, 0xAA	; 170
    2fc0:	56 e0       	ldi	r21, 0x06	; 6
    2fc2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <handle_write>
    2fc6:	88 23       	and	r24, r24
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <CONF_enter+0xc2>
    2fca:	ac cf       	rjmp	.-168    	; 0x2f24 <CONF_enter+0x1a>
					state=CONF_REPLY;
    2fcc:	cb e0       	ldi	r28, 0x0B	; 11
    2fce:	af cf       	rjmp	.-162    	; 0x2f2e <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    2fd0:	62 e7       	ldi	r22, 0x72	; 114
    2fd2:	77 e0       	ldi	r23, 0x07	; 7
    2fd4:	80 e8       	ldi	r24, 0x80	; 128
    2fd6:	0e 94 b3 2b 	call	0x5766	; 0x5766 <CONNECT>
    2fda:	88 23       	and	r24, r24
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <CONF_enter+0xd6>
    2fde:	a4 cf       	rjmp	.-184    	; 0x2f28 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    2fe0:	c2 e0       	ldi	r28, 0x02	; 2
    2fe2:	a5 cf       	rjmp	.-182    	; 0x2f2e <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
    2fe4:	62 e7       	ldi	r22, 0x72	; 114
    2fe6:	77 e0       	ldi	r23, 0x07	; 7
    2fe8:	80 e8       	ldi	r24, 0x80	; 128
    2fea:	4a ea       	ldi	r20, 0xAA	; 170
    2fec:	56 e0       	ldi	r21, 0x06	; 6
    2fee:	0e 94 19 20 	call	0x4032	; 0x4032 <handle_sensor>
    2ff2:	88 23       	and	r24, r24
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <CONF_enter+0xee>
    2ff6:	9a cf       	rjmp	.-204    	; 0x2f2c <CONF_enter+0x22>
					state=CONF_REPLY;
    2ff8:	cb e0       	ldi	r28, 0x0B	; 11
    2ffa:	99 cf       	rjmp	.-206    	; 0x2f2e <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    2ffc:	6a ea       	ldi	r22, 0xAA	; 170
    2ffe:	76 e0       	ldi	r23, 0x06	; 6
    3000:	80 e8       	ldi	r24, 0x80	; 128
    3002:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    3006:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    3008:	92 cf       	rjmp	.-220    	; 0x2f2e <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    300a:	66 e2       	ldi	r22, 0x26	; 38
    300c:	78 e0       	ldi	r23, 0x08	; 8
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    3014:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    3016:	8b cf       	rjmp	.-234    	; 0x2f2e <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    3018:	60 e3       	ldi	r22, 0x30	; 48
    301a:	78 e0       	ldi	r23, 0x08	; 8
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    3022:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    3024:	84 cf       	rjmp	.-248    	; 0x2f2e <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    3026:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    302a:	6d e3       	ldi	r22, 0x3D	; 61
    302c:	78 e0       	ldi	r23, 0x08	; 8
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    3034:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    3036:	7b cf       	rjmp	.-266    	; 0x2f2e <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    3038:	63 e6       	ldi	r22, 0x63	; 99
    303a:	78 e0       	ldi	r23, 0x08	; 8
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				return;
		}
	}
}
    3042:	cf 91       	pop	r28
    3044:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

000050b4 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    50b4:	cf 92       	push	r12
    50b6:	df 92       	push	r13
    50b8:	ef 92       	push	r14
    50ba:	0f 93       	push	r16
    50bc:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    50be:	6c 01       	movw	r12, r24
    50c0:	20 e8       	ldi	r18, 0x80	; 128
    50c2:	e2 2e       	mov	r14, r18
    50c4:	04 e0       	ldi	r16, 0x04	; 4
    50c6:	10 e0       	ldi	r17, 0x00	; 0
    50c8:	2b e6       	ldi	r18, 0x6B	; 107
    50ca:	38 e0       	ldi	r19, 0x08	; 8
    50cc:	40 e0       	ldi	r20, 0x00	; 0
    50ce:	8e 2d       	mov	r24, r14
    50d0:	b6 01       	movw	r22, r12
    50d2:	0e 94 90 28 	call	0x5120	; 0x5120 <strncmp>
    50d6:	89 2b       	or	r24, r25
    50d8:	c1 f0       	breq	.+48     	; 0x510a <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    50da:	05 e0       	ldi	r16, 0x05	; 5
    50dc:	10 e0       	ldi	r17, 0x00	; 0
    50de:	20 e7       	ldi	r18, 0x70	; 112
    50e0:	38 e0       	ldi	r19, 0x08	; 8
    50e2:	40 e0       	ldi	r20, 0x00	; 0
    50e4:	8e 2d       	mov	r24, r14
    50e6:	b6 01       	movw	r22, r12
    50e8:	0e 94 90 28 	call	0x5120	; 0x5120 <strncmp>
    50ec:	89 2b       	or	r24, r25
    50ee:	79 f0       	breq	.+30     	; 0x510e <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    50f0:	04 e0       	ldi	r16, 0x04	; 4
    50f2:	10 e0       	ldi	r17, 0x00	; 0
    50f4:	26 e7       	ldi	r18, 0x76	; 118
    50f6:	38 e0       	ldi	r19, 0x08	; 8
    50f8:	40 e0       	ldi	r20, 0x00	; 0
    50fa:	8e 2d       	mov	r24, r14
    50fc:	b6 01       	movw	r22, r12
    50fe:	0e 94 90 28 	call	0x5120	; 0x5120 <strncmp>
    5102:	89 2b       	or	r24, r25
    5104:	31 f4       	brne	.+12     	; 0x5112 <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    5106:	85 e0       	ldi	r24, 0x05	; 5
    5108:	05 c0       	rjmp	.+10     	; 0x5114 <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    510a:	86 e0       	ldi	r24, 0x06	; 6
    510c:	03 c0       	rjmp	.+6      	; 0x5114 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    510e:	84 e0       	ldi	r24, 0x04	; 4
    5110:	01 c0       	rjmp	.+2      	; 0x5114 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    5112:	83 e0       	ldi	r24, 0x03	; 3
    5114:	1f 91       	pop	r17
    5116:	0f 91       	pop	r16
    5118:	ef 90       	pop	r14
    511a:	df 90       	pop	r13
    511c:	cf 90       	pop	r12
    511e:	08 95       	ret

Disassembly of section .text.CON_RN2483:

0000270c <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    270c:	6f 92       	push	r6
    270e:	7f 92       	push	r7
    2710:	8f 92       	push	r8
    2712:	cf 92       	push	r12
    2714:	df 92       	push	r13
    2716:	ef 92       	push	r14
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    271c:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    271e:	ec 2f       	mov	r30, r28
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	e7 30       	cpi	r30, 0x07	; 7
    2724:	f1 05       	cpc	r31, r1
    2726:	d8 f7       	brcc	.-10     	; 0x271e <CON_RN2483+0x12>
    2728:	e9 5a       	subi	r30, 0xA9	; 169
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	0c 94 d9 38 	jmp	0x71b2	; 0x71b2 <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    2730:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <uart0_hal_init>
				rn2483_init();
    2734:	0e 94 25 39 	call	0x724a	; 0x724a <rn2483_init>
				LM_reset_module();
    2738:	0e 94 68 39 	call	0x72d0	; 0x72d0 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    273c:	6b e7       	ldi	r22, 0x7B	; 123
    273e:	78 e0       	ldi	r23, 0x08	; 8
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				state=CL_READ_MSG;
    2746:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2748:	ea cf       	rjmp	.-44     	; 0x271e <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    274a:	0e 94 16 38 	call	0x702c	; 0x702c <uart1_hal_message_ready>
    274e:	88 23       	and	r24, r24
    2750:	31 f3       	breq	.-52     	; 0x271e <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    2752:	82 e7       	ldi	r24, 0x72	; 114
    2754:	97 e0       	ldi	r25, 0x07	; 7
    2756:	0e 94 bd 34 	call	0x697a	; 0x697a <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    275a:	c2 e0       	ldi	r28, 0x02	; 2
    275c:	e0 cf       	rjmp	.-64     	; 0x271e <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    275e:	82 e7       	ldi	r24, 0x72	; 114
    2760:	97 e0       	ldi	r25, 0x07	; 7
    2762:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <CON_RN2483_parse>
    2766:	c8 2f       	mov	r28, r24
			break;
    2768:	da cf       	rjmp	.-76     	; 0x271e <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    276a:	82 e7       	ldi	r24, 0x72	; 114
    276c:	97 e0       	ldi	r25, 0x07	; 7
    276e:	6c 01       	movw	r12, r24
    2770:	20 e8       	ldi	r18, 0x80	; 128
    2772:	e2 2e       	mov	r14, r18
    2774:	2f 93       	push	r18
    2776:	df 92       	push	r13
    2778:	8f 93       	push	r24
    277a:	81 eb       	ldi	r24, 0xB1	; 177
    277c:	98 e0       	ldi	r25, 0x08	; 8
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	af 93       	push	r26
    2782:	9f 93       	push	r25
    2784:	8f 93       	push	r24
    2786:	ca ea       	ldi	r28, 0xAA	; 170
    2788:	d6 e0       	ldi	r29, 0x06	; 6
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
				uart1_hal_send_string(cnf_reply);
    2792:	3e 01       	movw	r6, r28
    2794:	20 e8       	ldi	r18, 0x80	; 128
    2796:	82 2e       	mov	r8, r18
    2798:	88 2d       	mov	r24, r8
    279a:	b3 01       	movw	r22, r6
    279c:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    27a0:	ae 01       	movw	r20, r28
    27a2:	6c 2d       	mov	r22, r12
    27a4:	7d 2d       	mov	r23, r13
    27a6:	8e 2d       	mov	r24, r14
    27a8:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    27ac:	88 2d       	mov	r24, r8
    27ae:	b3 01       	movw	r22, r6
    27b0:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    27b4:	8d b7       	in	r24, 0x3d	; 61
    27b6:	9e b7       	in	r25, 0x3e	; 62
    27b8:	08 96       	adiw	r24, 0x08	; 8
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	9e bf       	out	0x3e, r25	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    27c4:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    27c6:	ab cf       	rjmp	.-170    	; 0x271e <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    27c8:	87 eb       	ldi	r24, 0xB7	; 183
    27ca:	98 e0       	ldi	r25, 0x08	; 8
    27cc:	a0 e0       	ldi	r26, 0x00	; 0
    27ce:	af 93       	push	r26
    27d0:	9f 93       	push	r25
    27d2:	8f 93       	push	r24
    27d4:	81 eb       	ldi	r24, 0xB1	; 177
    27d6:	98 e0       	ldi	r25, 0x08	; 8
    27d8:	a0 e0       	ldi	r26, 0x00	; 0
    27da:	af 93       	push	r26
    27dc:	9f 93       	push	r25
    27de:	8f 93       	push	r24
    27e0:	ca ea       	ldi	r28, 0xAA	; 170
    27e2:	d6 e0       	ldi	r29, 0x06	; 6
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
				uart1_hal_send_string(cnf_reply);
    27ec:	be 01       	movw	r22, r28
    27ee:	80 e8       	ldi	r24, 0x80	; 128
    27f0:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
    27f4:	8f e7       	ldi	r24, 0x7F	; 127
    27f6:	98 e3       	ldi	r25, 0x38	; 56
    27f8:	21 e0       	ldi	r18, 0x01	; 1
    27fa:	81 50       	subi	r24, 0x01	; 1
    27fc:	90 40       	sbci	r25, 0x00	; 0
    27fe:	20 40       	sbci	r18, 0x00	; 0
    2800:	e1 f7       	brne	.-8      	; 0x27fa <CON_RN2483+0xee>
    2802:	00 c0       	rjmp	.+0      	; 0x2804 <CON_RN2483+0xf8>
    2804:	00 00       	nop
				_delay_ms(50);
				LM_send_break();
    2806:	0e 94 6e 39 	call	0x72dc	; 0x72dc <LM_send_break>
				state=CL_READ_MSG;
			break;
    280a:	8d b7       	in	r24, 0x3d	; 61
    280c:	9e b7       	in	r25, 0x3e	; 62
    280e:	08 96       	adiw	r24, 0x08	; 8
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	9e bf       	out	0x3e, r25	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	8d bf       	out	0x3d, r24	; 61
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break();
				state=CL_READ_MSG;
    281a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    281c:	80 cf       	rjmp	.-256    	; 0x271e <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    281e:	0e 94 0f 38 	call	0x701e	; 0x701e <uart0_hal_message_ready>
    2822:	88 23       	and	r24, r24
    2824:	29 f0       	breq	.+10     	; 0x2830 <CON_RN2483+0x124>
					uart0_hal_read_message_as_str(cnf_reply);
    2826:	8a ea       	ldi	r24, 0xAA	; 170
    2828:	96 e0       	ldi	r25, 0x06	; 6
    282a:	0e 94 a9 34 	call	0x6952	; 0x6952 <uart0_hal_read_message_as_str>
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <CON_RN2483+0x136>
				}else{
					strcpy(cnf_reply, "null");
    2830:	25 e0       	ldi	r18, 0x05	; 5
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	42 ec       	ldi	r20, 0xC2	; 194
    2836:	58 e0       	ldi	r21, 0x08	; 8
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	8a ea       	ldi	r24, 0xAA	; 170
    283c:	96 e0       	ldi	r25, 0x06	; 6
    283e:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    2842:	6a ea       	ldi	r22, 0xAA	; 170
    2844:	76 e0       	ldi	r23, 0x06	; 6
    2846:	80 e8       	ldi	r24, 0x80	; 128
    2848:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				state=CL_READ_MSG;
    284c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    284e:	67 cf       	rjmp	.-306    	; 0x271e <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    2850:	0e 94 ef 38 	call	0x71de	; 0x71de <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    2854:	67 ec       	ldi	r22, 0xC7	; 199
    2856:	78 e0       	ldi	r23, 0x08	; 8
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	ef 90       	pop	r14
    2866:	df 90       	pop	r13
    2868:	cf 90       	pop	r12
    286a:	8f 90       	pop	r8
    286c:	7f 90       	pop	r7
    286e:	6f 90       	pop	r6
    2870:	08 95       	ret

Disassembly of section .text.CONNECT:

00005766 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    5766:	cf 93       	push	r28
    5768:	df 93       	push	r29
    576a:	cd b7       	in	r28, 0x3d	; 61
    576c:	de b7       	in	r29, 0x3e	; 62
    576e:	64 97       	sbiw	r28, 0x14	; 20
    5770:	0f b6       	in	r0, 0x3f	; 63
    5772:	f8 94       	cli
    5774:	de bf       	out	0x3e, r29	; 62
    5776:	0f be       	out	0x3f, r0	; 63
    5778:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    577a:	21 e0       	ldi	r18, 0x01	; 1
    577c:	ae 01       	movw	r20, r28
    577e:	4f 5f       	subi	r20, 0xFF	; 255
    5780:	5f 4f       	sbci	r21, 0xFF	; 255
    5782:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    5786:	88 23       	and	r24, r24
    5788:	79 f0       	breq	.+30     	; 0x57a8 <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    578a:	be 01       	movw	r22, r28
    578c:	6f 5f       	subi	r22, 0xFF	; 255
    578e:	7f 4f       	sbci	r23, 0xFF	; 255
    5790:	80 e8       	ldi	r24, 0x80	; 128
    5792:	27 ee       	ldi	r18, 0xE7	; 231
    5794:	38 e0       	ldi	r19, 0x08	; 8
    5796:	40 e0       	ldi	r20, 0x00	; 0
    5798:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    579c:	89 2b       	or	r24, r25
    579e:	19 f4       	brne	.+6      	; 0x57a6 <CONNECT+0x40>
		return CON_RN2483();
    57a0:	0e 94 86 13 	call	0x270c	; 0x270c <CON_RN2483>
    57a4:	01 c0       	rjmp	.+2      	; 0x57a8 <CONNECT+0x42>
	}else{
		return false;
    57a6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    57a8:	64 96       	adiw	r28, 0x14	; 20
    57aa:	0f b6       	in	r0, 0x3f	; 63
    57ac:	f8 94       	cli
    57ae:	de bf       	out	0x3e, r29	; 62
    57b0:	0f be       	out	0x3f, r0	; 63
    57b2:	cd bf       	out	0x3d, r28	; 61
    57b4:	df 91       	pop	r29
    57b6:	cf 91       	pop	r28
    57b8:	08 95       	ret

Disassembly of section .text.read_cols:

00003eba <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    3eba:	ff 92       	push	r15
    3ebc:	0f 93       	push	r16
    3ebe:	1f 93       	push	r17
    3ec0:	cf 93       	push	r28
    3ec2:	df 93       	push	r29
    3ec4:	cd b7       	in	r28, 0x3d	; 61
    3ec6:	de b7       	in	r29, 0x3e	; 62
    3ec8:	cb 54       	subi	r28, 0x4B	; 75
    3eca:	d1 09       	sbc	r29, r1
    3ecc:	0f b6       	in	r0, 0x3f	; 63
    3ece:	f8 94       	cli
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	0f be       	out	0x3f, r0	; 63
    3ed4:	cd bf       	out	0x3d, r28	; 61
    3ed6:	8c 01       	movw	r16, r24
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    3ed8:	6b e4       	ldi	r22, 0x4B	; 75
    3eda:	ce 01       	movw	r24, r28
    3edc:	01 96       	adiw	r24, 0x01	; 1
    3ede:	0e 94 d5 37 	call	0x6faa	; 0x6faa <EM_get_collections>
	strcpy(res, "End of collections");
    3ee2:	23 e1       	ldi	r18, 0x13	; 19
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	41 ec       	ldi	r20, 0xC1	; 193
    3ee8:	54 e0       	ldi	r21, 0x04	; 4
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	c8 01       	movw	r24, r16
    3eee:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    3ef2:	f1 2c       	mov	r15, r1
    3ef4:	30 c0       	rjmp	.+96     	; 0x3f56 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u", i+1, cols[i].samplings, cols[i].samplingInterval);
    3ef6:	8f 2d       	mov	r24, r15
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	fc 01       	movw	r30, r24
    3efc:	ee 0f       	add	r30, r30
    3efe:	ff 1f       	adc	r31, r31
    3f00:	ee 0f       	add	r30, r30
    3f02:	ff 1f       	adc	r31, r31
    3f04:	e8 0f       	add	r30, r24
    3f06:	f9 1f       	adc	r31, r25
    3f08:	21 e0       	ldi	r18, 0x01	; 1
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	2c 0f       	add	r18, r28
    3f0e:	3d 1f       	adc	r19, r29
    3f10:	e2 0f       	add	r30, r18
    3f12:	f3 1f       	adc	r31, r19
    3f14:	23 81       	ldd	r18, Z+3	; 0x03
    3f16:	2f 93       	push	r18
    3f18:	22 81       	ldd	r18, Z+2	; 0x02
    3f1a:	2f 93       	push	r18
    3f1c:	21 81       	ldd	r18, Z+1	; 0x01
    3f1e:	2f 93       	push	r18
    3f20:	20 81       	ld	r18, Z
    3f22:	2f 93       	push	r18
    3f24:	01 96       	adiw	r24, 0x01	; 1
    3f26:	9f 93       	push	r25
    3f28:	8f 93       	push	r24
    3f2a:	84 ed       	ldi	r24, 0xD4	; 212
    3f2c:	94 e0       	ldi	r25, 0x04	; 4
    3f2e:	a0 e0       	ldi	r26, 0x00	; 0
    3f30:	af 93       	push	r26
    3f32:	9f 93       	push	r25
    3f34:	8f 93       	push	r24
    3f36:	0b e3       	ldi	r16, 0x3B	; 59
    3f38:	1d e0       	ldi	r17, 0x0D	; 13
    3f3a:	1f 93       	push	r17
    3f3c:	0f 93       	push	r16
    3f3e:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
		uart1_hal_send_string(arg);
    3f42:	b8 01       	movw	r22, r16
    3f44:	80 e8       	ldi	r24, 0x80	; 128
    3f46:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
	strcpy(res, "End of collections");
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    3f4a:	f3 94       	inc	r15
    3f4c:	0f b6       	in	r0, 0x3f	; 63
    3f4e:	f8 94       	cli
    3f50:	de bf       	out	0x3e, r29	; 62
    3f52:	0f be       	out	0x3f, r0	; 63
    3f54:	cd bf       	out	0x3d, r28	; 61
    3f56:	9e e0       	ldi	r25, 0x0E	; 14
    3f58:	9f 15       	cp	r25, r15
    3f5a:	68 f6       	brcc	.-102    	; 0x3ef6 <read_cols+0x3c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u", i+1, cols[i].samplings, cols[i].samplingInterval);
		uart1_hal_send_string(arg);
	}
}
    3f5c:	c5 5b       	subi	r28, 0xB5	; 181
    3f5e:	df 4f       	sbci	r29, 0xFF	; 255
    3f60:	0f b6       	in	r0, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	de bf       	out	0x3e, r29	; 62
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	cd bf       	out	0x3d, r28	; 61
    3f6a:	df 91       	pop	r29
    3f6c:	cf 91       	pop	r28
    3f6e:	1f 91       	pop	r17
    3f70:	0f 91       	pop	r16
    3f72:	ff 90       	pop	r15
    3f74:	08 95       	ret

Disassembly of section .text.read_time:

00004744 <read_time>:

static void read_time(char res[]){
    4744:	0f 93       	push	r16
    4746:	1f 93       	push	r17
    4748:	cf 93       	push	r28
    474a:	df 93       	push	r29
    474c:	00 d0       	rcall	.+0      	; 0x474e <read_time+0xa>
    474e:	00 d0       	rcall	.+0      	; 0x4750 <read_time+0xc>
    4750:	00 d0       	rcall	.+0      	; 0x4752 <read_time+0xe>
    4752:	cd b7       	in	r28, 0x3d	; 61
    4754:	de b7       	in	r29, 0x3e	; 62
    4756:	18 2f       	mov	r17, r24
    4758:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    475a:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    475e:	ce 01       	movw	r24, r28
    4760:	01 96       	adiw	r24, 0x01	; 1
    4762:	0e 94 e5 16 	call	0x2dca	; 0x2dca <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    4766:	88 23       	and	r24, r24
    4768:	51 f0       	breq	.+20     	; 0x477e <read_time+0x3a>
		strcpy(res, "Failed to read time");
    476a:	24 e1       	ldi	r18, 0x14	; 20
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	47 ee       	ldi	r20, 0xE7	; 231
    4770:	54 e0       	ldi	r21, 0x04	; 4
    4772:	60 e0       	ldi	r22, 0x00	; 0
    4774:	81 2f       	mov	r24, r17
    4776:	90 2f       	mov	r25, r16
    4778:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
    477c:	21 c0       	rjmp	.+66     	; 0x47c0 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    477e:	59 81       	ldd	r21, Y+1	; 0x01
    4780:	4a 81       	ldd	r20, Y+2	; 0x02
    4782:	3b 81       	ldd	r19, Y+3	; 0x03
    4784:	2c 81       	ldd	r18, Y+4	; 0x04
    4786:	9d 81       	ldd	r25, Y+5	; 0x05
    4788:	8e 81       	ldd	r24, Y+6	; 0x06
    478a:	1f 92       	push	r1
    478c:	5f 93       	push	r21
    478e:	1f 92       	push	r1
    4790:	4f 93       	push	r20
    4792:	1f 92       	push	r1
    4794:	3f 93       	push	r19
    4796:	1f 92       	push	r1
    4798:	2f 93       	push	r18
    479a:	1f 92       	push	r1
    479c:	9f 93       	push	r25
    479e:	1f 92       	push	r1
    47a0:	8f 93       	push	r24
    47a2:	8b ef       	ldi	r24, 0xFB	; 251
    47a4:	94 e0       	ldi	r25, 0x04	; 4
    47a6:	a0 e0       	ldi	r26, 0x00	; 0
    47a8:	af 93       	push	r26
    47aa:	9f 93       	push	r25
    47ac:	8f 93       	push	r24
    47ae:	0f 93       	push	r16
    47b0:	1f 93       	push	r17
    47b2:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    47b6:	0f b6       	in	r0, 0x3f	; 63
    47b8:	f8 94       	cli
    47ba:	de bf       	out	0x3e, r29	; 62
    47bc:	0f be       	out	0x3f, r0	; 63
    47be:	cd bf       	out	0x3d, r28	; 61
	}
}
    47c0:	26 96       	adiw	r28, 0x06	; 6
    47c2:	0f b6       	in	r0, 0x3f	; 63
    47c4:	f8 94       	cli
    47c6:	de bf       	out	0x3e, r29	; 62
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	cd bf       	out	0x3d, r28	; 61
    47cc:	df 91       	pop	r29
    47ce:	cf 91       	pop	r28
    47d0:	1f 91       	pop	r17
    47d2:	0f 91       	pop	r16
    47d4:	08 95       	ret

Disassembly of section .text.read_validate_SI:

00003046 <read_validate_SI>:

static void read_validate_SI(char res[]){
    3046:	ef 92       	push	r14
    3048:	ff 92       	push	r15
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	cf 54       	subi	r28, 0x4F	; 79
    3058:	d1 09       	sbc	r29, r1
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	cd bf       	out	0x3d, r28	; 61
    3064:	7c 01       	movw	r14, r24
	uint16_t lowest, highest;
	bool valid;
	COLLECTION cols[N_COLLECTIONS];
	
	//Get collections
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    3066:	6b e4       	ldi	r22, 0x4B	; 75
    3068:	ce 01       	movw	r24, r28
    306a:	05 96       	adiw	r24, 0x05	; 5
    306c:	0e 94 d5 37 	call	0x6faa	; 0x6faa <EM_get_collections>
	
	valid=SCD30_calc_validate_SI(cols[0].samplingInterval, cols[1].samplingInterval, cols[2].samplingInterval, &lowest, &highest);
    3070:	49 89       	ldd	r20, Y+17	; 0x11
    3072:	5a 89       	ldd	r21, Y+18	; 0x12
    3074:	6c 85       	ldd	r22, Y+12	; 0x0c
    3076:	7d 85       	ldd	r23, Y+13	; 0x0d
    3078:	8e 01       	movw	r16, r28
    307a:	0d 5f       	subi	r16, 0xFD	; 253
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	9e 01       	movw	r18, r28
    3080:	2f 5f       	subi	r18, 0xFF	; 255
    3082:	3f 4f       	sbci	r19, 0xFF	; 255
    3084:	8f 81       	ldd	r24, Y+7	; 0x07
    3086:	98 85       	ldd	r25, Y+8	; 0x08
    3088:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <SCD30_calc_validate_SI>
	if(!valid){
    308c:	81 11       	cpse	r24, r1
    308e:	09 c0       	rjmp	.+18     	; 0x30a2 <read_validate_SI+0x5c>
		strcpy(res, "ID=1...ID=3 not valid");
    3090:	26 e1       	ldi	r18, 0x16	; 22
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	49 e1       	ldi	r20, 0x19	; 25
    3096:	55 e0       	ldi	r21, 0x05	; 5
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	c7 01       	movw	r24, r14
    309c:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return;
    30a0:	59 c0       	rjmp	.+178    	; 0x3154 <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[4].samplingInterval, cols[5].samplingInterval, cols[6].samplingInterval, &lowest, &highest);
    30a2:	4d a1       	ldd	r20, Y+37	; 0x25
    30a4:	5e a1       	ldd	r21, Y+38	; 0x26
    30a6:	68 a1       	ldd	r22, Y+32	; 0x20
    30a8:	79 a1       	ldd	r23, Y+33	; 0x21
    30aa:	8e 01       	movw	r16, r28
    30ac:	0d 5f       	subi	r16, 0xFD	; 253
    30ae:	1f 4f       	sbci	r17, 0xFF	; 255
    30b0:	9e 01       	movw	r18, r28
    30b2:	2f 5f       	subi	r18, 0xFF	; 255
    30b4:	3f 4f       	sbci	r19, 0xFF	; 255
    30b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ba:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <SCD30_calc_validate_SI>
	if(!valid){
    30be:	81 11       	cpse	r24, r1
    30c0:	09 c0       	rjmp	.+18     	; 0x30d4 <read_validate_SI+0x8e>
		strcpy(res, "ID=5...ID=7 not valid");
    30c2:	26 e1       	ldi	r18, 0x16	; 22
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	4f e2       	ldi	r20, 0x2F	; 47
    30c8:	55 e0       	ldi	r21, 0x05	; 5
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	c7 01       	movw	r24, r14
    30ce:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return;
    30d2:	40 c0       	rjmp	.+128    	; 0x3154 <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[8].samplingInterval, cols[9].samplingInterval, cols[10].samplingInterval, &lowest, &highest);
    30d4:	49 ad       	ldd	r20, Y+57	; 0x39
    30d6:	5a ad       	ldd	r21, Y+58	; 0x3a
    30d8:	6c a9       	ldd	r22, Y+52	; 0x34
    30da:	7d a9       	ldd	r23, Y+53	; 0x35
    30dc:	8e 01       	movw	r16, r28
    30de:	0d 5f       	subi	r16, 0xFD	; 253
    30e0:	1f 4f       	sbci	r17, 0xFF	; 255
    30e2:	9e 01       	movw	r18, r28
    30e4:	2f 5f       	subi	r18, 0xFF	; 255
    30e6:	3f 4f       	sbci	r19, 0xFF	; 255
    30e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ea:	98 a9       	ldd	r25, Y+48	; 0x30
    30ec:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <SCD30_calc_validate_SI>
	if(!valid){
    30f0:	81 11       	cpse	r24, r1
    30f2:	09 c0       	rjmp	.+18     	; 0x3106 <read_validate_SI+0xc0>
		strcpy(res, "ID=9...ID=11 not valid");
    30f4:	27 e1       	ldi	r18, 0x17	; 23
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	45 e4       	ldi	r20, 0x45	; 69
    30fa:	55 e0       	ldi	r21, 0x05	; 5
    30fc:	60 e0       	ldi	r22, 0x00	; 0
    30fe:	c7 01       	movw	r24, r14
    3100:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return;
    3104:	27 c0       	rjmp	.+78     	; 0x3154 <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[12].samplingInterval, cols[13].samplingInterval, cols[14].samplingInterval, &lowest, &highest);
    3106:	2f 96       	adiw	r28, 0x0f	; 15
    3108:	4e ad       	ldd	r20, Y+62	; 0x3e
    310a:	5f ad       	ldd	r21, Y+63	; 0x3f
    310c:	2f 97       	sbiw	r28, 0x0f	; 15
    310e:	2a 96       	adiw	r28, 0x0a	; 10
    3110:	6e ad       	ldd	r22, Y+62	; 0x3e
    3112:	7f ad       	ldd	r23, Y+63	; 0x3f
    3114:	2a 97       	sbiw	r28, 0x0a	; 10
    3116:	8e 01       	movw	r16, r28
    3118:	0d 5f       	subi	r16, 0xFD	; 253
    311a:	1f 4f       	sbci	r17, 0xFF	; 255
    311c:	9e 01       	movw	r18, r28
    311e:	2f 5f       	subi	r18, 0xFF	; 255
    3120:	3f 4f       	sbci	r19, 0xFF	; 255
    3122:	25 96       	adiw	r28, 0x05	; 5
    3124:	8e ad       	ldd	r24, Y+62	; 0x3e
    3126:	9f ad       	ldd	r25, Y+63	; 0x3f
    3128:	25 97       	sbiw	r28, 0x05	; 5
    312a:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <SCD30_calc_validate_SI>
	if(!valid){
    312e:	81 11       	cpse	r24, r1
    3130:	09 c0       	rjmp	.+18     	; 0x3144 <read_validate_SI+0xfe>
		strcpy(res, "ID=13...ID=15 not valid");
    3132:	28 e1       	ldi	r18, 0x18	; 24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	4c e5       	ldi	r20, 0x5C	; 92
    3138:	55 e0       	ldi	r21, 0x05	; 5
    313a:	60 e0       	ldi	r22, 0x00	; 0
    313c:	c7 01       	movw	r24, r14
    313e:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return;
    3142:	08 c0       	rjmp	.+16     	; 0x3154 <read_validate_SI+0x10e>
	}
	
	strcpy(res, "All valid");
    3144:	2a e0       	ldi	r18, 0x0A	; 10
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	44 e7       	ldi	r20, 0x74	; 116
    314a:	55 e0       	ldi	r21, 0x05	; 5
    314c:	60 e0       	ldi	r22, 0x00	; 0
    314e:	c7 01       	movw	r24, r14
    3150:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
}
    3154:	c1 5b       	subi	r28, 0xB1	; 177
    3156:	df 4f       	sbci	r29, 0xFF	; 255
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	f8 94       	cli
    315c:	de bf       	out	0x3e, r29	; 62
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	cd bf       	out	0x3d, r28	; 61
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	ff 90       	pop	r15
    316c:	ef 90       	pop	r14
    316e:	08 95       	ret

Disassembly of section .text.write_deveui:

00004b50 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    4b50:	cf 92       	push	r12
    4b52:	df 92       	push	r13
    4b54:	ef 92       	push	r14
    4b56:	0f 93       	push	r16
    4b58:	1f 93       	push	r17
    4b5a:	cf 93       	push	r28
    4b5c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4b5e:	22 e0       	ldi	r18, 0x02	; 2
    4b60:	4b e3       	ldi	r20, 0x3B	; 59
    4b62:	5d e0       	ldi	r21, 0x0D	; 13
    4b64:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    4b68:	c8 2f       	mov	r28, r24
    4b6a:	88 23       	and	r24, r24
    4b6c:	29 f1       	breq	.+74     	; 0x4bb8 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    4b6e:	8b e3       	ldi	r24, 0x3B	; 59
    4b70:	9d e0       	ldi	r25, 0x0D	; 13
    4b72:	6c 01       	movw	r12, r24
    4b74:	20 e8       	ldi	r18, 0x80	; 128
    4b76:	e2 2e       	mov	r14, r18
    4b78:	8e 2d       	mov	r24, r14
    4b7a:	b6 01       	movw	r22, r12
    4b7c:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    4b80:	40 97       	sbiw	r24, 0x10	; 16
    4b82:	c9 f4       	brne	.+50     	; 0x4bb6 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    4b84:	8e 2d       	mov	r24, r14
    4b86:	b6 01       	movw	r22, r12
    4b88:	0e 94 49 31 	call	0x6292	; 0x6292 <EM_set_deveui>
    4b8c:	c8 2f       	mov	r28, r24
    4b8e:	81 11       	cpse	r24, r1
    4b90:	09 c0       	rjmp	.+18     	; 0x4ba4 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    4b92:	27 e0       	ldi	r18, 0x07	; 7
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	4e e7       	ldi	r20, 0x7E	; 126
    4b98:	55 e0       	ldi	r21, 0x05	; 5
    4b9a:	60 e0       	ldi	r22, 0x00	; 0
    4b9c:	c8 01       	movw	r24, r16
    4b9e:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return false;
    4ba2:	0a c0       	rjmp	.+20     	; 0x4bb8 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4ba4:	28 e0       	ldi	r18, 0x08	; 8
    4ba6:	30 e0       	ldi	r19, 0x00	; 0
    4ba8:	45 e8       	ldi	r20, 0x85	; 133
    4baa:	55 e0       	ldi	r21, 0x05	; 5
    4bac:	60 e0       	ldi	r22, 0x00	; 0
    4bae:	c8 01       	movw	r24, r16
    4bb0:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
    4bb4:	01 c0       	rjmp	.+2      	; 0x4bb8 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4bb6:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4bb8:	8c 2f       	mov	r24, r28
    4bba:	cf 91       	pop	r28
    4bbc:	1f 91       	pop	r17
    4bbe:	0f 91       	pop	r16
    4bc0:	ef 90       	pop	r14
    4bc2:	df 90       	pop	r13
    4bc4:	cf 90       	pop	r12
    4bc6:	08 95       	ret

Disassembly of section .text.write_appeui:

00004bc8 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    4bc8:	cf 92       	push	r12
    4bca:	df 92       	push	r13
    4bcc:	ef 92       	push	r14
    4bce:	0f 93       	push	r16
    4bd0:	1f 93       	push	r17
    4bd2:	cf 93       	push	r28
    4bd4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4bd6:	22 e0       	ldi	r18, 0x02	; 2
    4bd8:	4b e3       	ldi	r20, 0x3B	; 59
    4bda:	5d e0       	ldi	r21, 0x0D	; 13
    4bdc:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    4be0:	c8 2f       	mov	r28, r24
    4be2:	88 23       	and	r24, r24
    4be4:	29 f1       	breq	.+74     	; 0x4c30 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    4be6:	8b e3       	ldi	r24, 0x3B	; 59
    4be8:	9d e0       	ldi	r25, 0x0D	; 13
    4bea:	6c 01       	movw	r12, r24
    4bec:	20 e8       	ldi	r18, 0x80	; 128
    4bee:	e2 2e       	mov	r14, r18
    4bf0:	8e 2d       	mov	r24, r14
    4bf2:	b6 01       	movw	r22, r12
    4bf4:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    4bf8:	40 97       	sbiw	r24, 0x10	; 16
    4bfa:	c9 f4       	brne	.+50     	; 0x4c2e <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    4bfc:	8e 2d       	mov	r24, r14
    4bfe:	b6 01       	movw	r22, r12
    4c00:	0e 94 66 31 	call	0x62cc	; 0x62cc <EM_set_appeui>
    4c04:	c8 2f       	mov	r28, r24
    4c06:	81 11       	cpse	r24, r1
    4c08:	09 c0       	rjmp	.+18     	; 0x4c1c <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    4c0a:	27 e0       	ldi	r18, 0x07	; 7
    4c0c:	30 e0       	ldi	r19, 0x00	; 0
    4c0e:	4e e7       	ldi	r20, 0x7E	; 126
    4c10:	55 e0       	ldi	r21, 0x05	; 5
    4c12:	60 e0       	ldi	r22, 0x00	; 0
    4c14:	c8 01       	movw	r24, r16
    4c16:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return false;
    4c1a:	0a c0       	rjmp	.+20     	; 0x4c30 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4c1c:	28 e0       	ldi	r18, 0x08	; 8
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	45 e8       	ldi	r20, 0x85	; 133
    4c22:	55 e0       	ldi	r21, 0x05	; 5
    4c24:	60 e0       	ldi	r22, 0x00	; 0
    4c26:	c8 01       	movw	r24, r16
    4c28:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
    4c2c:	01 c0       	rjmp	.+2      	; 0x4c30 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4c2e:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4c30:	8c 2f       	mov	r24, r28
    4c32:	cf 91       	pop	r28
    4c34:	1f 91       	pop	r17
    4c36:	0f 91       	pop	r16
    4c38:	ef 90       	pop	r14
    4c3a:	df 90       	pop	r13
    4c3c:	cf 90       	pop	r12
    4c3e:	08 95       	ret

Disassembly of section .text.write_appkey:

00004c40 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    4c40:	cf 92       	push	r12
    4c42:	df 92       	push	r13
    4c44:	ef 92       	push	r14
    4c46:	0f 93       	push	r16
    4c48:	1f 93       	push	r17
    4c4a:	cf 93       	push	r28
    4c4c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4c4e:	22 e0       	ldi	r18, 0x02	; 2
    4c50:	4b e3       	ldi	r20, 0x3B	; 59
    4c52:	5d e0       	ldi	r21, 0x0D	; 13
    4c54:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    4c58:	c8 2f       	mov	r28, r24
    4c5a:	88 23       	and	r24, r24
    4c5c:	29 f1       	breq	.+74     	; 0x4ca8 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    4c5e:	8b e3       	ldi	r24, 0x3B	; 59
    4c60:	9d e0       	ldi	r25, 0x0D	; 13
    4c62:	6c 01       	movw	r12, r24
    4c64:	20 e8       	ldi	r18, 0x80	; 128
    4c66:	e2 2e       	mov	r14, r18
    4c68:	8e 2d       	mov	r24, r14
    4c6a:	b6 01       	movw	r22, r12
    4c6c:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    4c70:	80 97       	sbiw	r24, 0x20	; 32
    4c72:	c9 f4       	brne	.+50     	; 0x4ca6 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    4c74:	8e 2d       	mov	r24, r14
    4c76:	b6 01       	movw	r22, r12
    4c78:	0e 94 83 31 	call	0x6306	; 0x6306 <EM_set_appkey>
    4c7c:	c8 2f       	mov	r28, r24
    4c7e:	81 11       	cpse	r24, r1
    4c80:	09 c0       	rjmp	.+18     	; 0x4c94 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    4c82:	27 e0       	ldi	r18, 0x07	; 7
    4c84:	30 e0       	ldi	r19, 0x00	; 0
    4c86:	4e e7       	ldi	r20, 0x7E	; 126
    4c88:	55 e0       	ldi	r21, 0x05	; 5
    4c8a:	60 e0       	ldi	r22, 0x00	; 0
    4c8c:	c8 01       	movw	r24, r16
    4c8e:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return false;
    4c92:	0a c0       	rjmp	.+20     	; 0x4ca8 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4c94:	28 e0       	ldi	r18, 0x08	; 8
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	45 e8       	ldi	r20, 0x85	; 133
    4c9a:	55 e0       	ldi	r21, 0x05	; 5
    4c9c:	60 e0       	ldi	r22, 0x00	; 0
    4c9e:	c8 01       	movw	r24, r16
    4ca0:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
    4ca4:	01 c0       	rjmp	.+2      	; 0x4ca8 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    4ca6:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4ca8:	8c 2f       	mov	r24, r28
    4caa:	cf 91       	pop	r28
    4cac:	1f 91       	pop	r17
    4cae:	0f 91       	pop	r16
    4cb0:	ef 90       	pop	r14
    4cb2:	df 90       	pop	r13
    4cb4:	cf 90       	pop	r12
    4cb6:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00005aca <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    5aca:	0f 93       	push	r16
    5acc:	1f 93       	push	r17
    5ace:	cf 93       	push	r28
    5ad0:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5ad2:	22 e0       	ldi	r18, 0x02	; 2
    5ad4:	4b e3       	ldi	r20, 0x3B	; 59
    5ad6:	5d e0       	ldi	r21, 0x0D	; 13
    5ad8:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    5adc:	c8 2f       	mov	r28, r24
    5ade:	88 23       	and	r24, r24
    5ae0:	a9 f0       	breq	.+42     	; 0x5b0c <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    5ae2:	8b e3       	ldi	r24, 0x3B	; 59
    5ae4:	9d e0       	ldi	r25, 0x0D	; 13
    5ae6:	0e 94 07 2b 	call	0x560e	; 0x560e <is_float>
    5aea:	c8 2f       	mov	r28, r24
    5aec:	88 23       	and	r24, r24
    5aee:	71 f0       	breq	.+28     	; 0x5b0c <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    5af0:	8b e3       	ldi	r24, 0x3B	; 59
    5af2:	9d e0       	ldi	r25, 0x0D	; 13
    5af4:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <str2flaot>
	EM_set_ppmfactor(val);
    5af8:	0e 94 2b 38 	call	0x7056	; 0x7056 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    5afc:	28 e0       	ldi	r18, 0x08	; 8
    5afe:	30 e0       	ldi	r19, 0x00	; 0
    5b00:	45 e8       	ldi	r20, 0x85	; 133
    5b02:	55 e0       	ldi	r21, 0x05	; 5
    5b04:	60 e0       	ldi	r22, 0x00	; 0
    5b06:	c8 01       	movw	r24, r16
    5b08:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	return true;
}
    5b0c:	8c 2f       	mov	r24, r28
    5b0e:	cf 91       	pop	r28
    5b10:	1f 91       	pop	r17
    5b12:	0f 91       	pop	r16
    5b14:	08 95       	ret

Disassembly of section .text.write_RRL:

00005b16 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    5b16:	0f 93       	push	r16
    5b18:	1f 93       	push	r17
    5b1a:	cf 93       	push	r28
    5b1c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5b1e:	22 e0       	ldi	r18, 0x02	; 2
    5b20:	4b e3       	ldi	r20, 0x3B	; 59
    5b22:	5d e0       	ldi	r21, 0x0D	; 13
    5b24:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    5b28:	c8 2f       	mov	r28, r24
    5b2a:	88 23       	and	r24, r24
    5b2c:	a9 f0       	breq	.+42     	; 0x5b58 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    5b2e:	8b e3       	ldi	r24, 0x3B	; 59
    5b30:	9d e0       	ldi	r25, 0x0D	; 13
    5b32:	0e 94 07 2b 	call	0x560e	; 0x560e <is_float>
    5b36:	c8 2f       	mov	r28, r24
    5b38:	88 23       	and	r24, r24
    5b3a:	71 f0       	breq	.+28     	; 0x5b58 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    5b3c:	8b e3       	ldi	r24, 0x3B	; 59
    5b3e:	9d e0       	ldi	r25, 0x0D	; 13
    5b40:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <str2flaot>
	EM_set_RRL(val);
    5b44:	0e 94 32 38 	call	0x7064	; 0x7064 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    5b48:	28 e0       	ldi	r18, 0x08	; 8
    5b4a:	30 e0       	ldi	r19, 0x00	; 0
    5b4c:	45 e8       	ldi	r20, 0x85	; 133
    5b4e:	55 e0       	ldi	r21, 0x05	; 5
    5b50:	60 e0       	ldi	r22, 0x00	; 0
    5b52:	c8 01       	movw	r24, r16
    5b54:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	return true;
}
    5b58:	8c 2f       	mov	r24, r28
    5b5a:	cf 91       	pop	r28
    5b5c:	1f 91       	pop	r17
    5b5e:	0f 91       	pop	r16
    5b60:	08 95       	ret

Disassembly of section .text.write_VCC:

00005b62 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    5b62:	0f 93       	push	r16
    5b64:	1f 93       	push	r17
    5b66:	cf 93       	push	r28
    5b68:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5b6a:	22 e0       	ldi	r18, 0x02	; 2
    5b6c:	4b e3       	ldi	r20, 0x3B	; 59
    5b6e:	5d e0       	ldi	r21, 0x0D	; 13
    5b70:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    5b74:	c8 2f       	mov	r28, r24
    5b76:	88 23       	and	r24, r24
    5b78:	a9 f0       	breq	.+42     	; 0x5ba4 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    5b7a:	8b e3       	ldi	r24, 0x3B	; 59
    5b7c:	9d e0       	ldi	r25, 0x0D	; 13
    5b7e:	0e 94 07 2b 	call	0x560e	; 0x560e <is_float>
    5b82:	c8 2f       	mov	r28, r24
    5b84:	88 23       	and	r24, r24
    5b86:	71 f0       	breq	.+28     	; 0x5ba4 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    5b88:	8b e3       	ldi	r24, 0x3B	; 59
    5b8a:	9d e0       	ldi	r25, 0x0D	; 13
    5b8c:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <str2flaot>
	EM_set_Vcc(val);
    5b90:	0e 94 39 38 	call	0x7072	; 0x7072 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    5b94:	28 e0       	ldi	r18, 0x08	; 8
    5b96:	30 e0       	ldi	r19, 0x00	; 0
    5b98:	45 e8       	ldi	r20, 0x85	; 133
    5b9a:	55 e0       	ldi	r21, 0x05	; 5
    5b9c:	60 e0       	ldi	r22, 0x00	; 0
    5b9e:	c8 01       	movw	r24, r16
    5ba0:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	return true;
}
    5ba4:	8c 2f       	mov	r24, r28
    5ba6:	cf 91       	pop	r28
    5ba8:	1f 91       	pop	r17
    5baa:	0f 91       	pop	r16
    5bac:	08 95       	ret

Disassembly of section .text.get_time_par:

00006596 <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    6596:	cf 93       	push	r28
    6598:	df 93       	push	r29
    659a:	00 d0       	rcall	.+0      	; 0x659c <get_time_par+0x6>
    659c:	1f 92       	push	r1
    659e:	cd b7       	in	r28, 0x3d	; 61
    65a0:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    65a2:	fc 01       	movw	r30, r24
    65a4:	e6 0f       	add	r30, r22
    65a6:	f1 1d       	adc	r31, r1
    65a8:	80 81       	ld	r24, Z
    65aa:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    65ac:	81 81       	ldd	r24, Z+1	; 0x01
    65ae:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    65b0:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    65b2:	be 01       	movw	r22, r28
    65b4:	6f 5f       	subi	r22, 0xFF	; 255
    65b6:	7f 4f       	sbci	r23, 0xFF	; 255
    65b8:	80 e8       	ldi	r24, 0x80	; 128
    65ba:	0e 94 55 39 	call	0x72aa	; 0x72aa <atoi>
}
    65be:	0f 90       	pop	r0
    65c0:	0f 90       	pop	r0
    65c2:	0f 90       	pop	r0
    65c4:	df 91       	pop	r29
    65c6:	cf 91       	pop	r28
    65c8:	08 95       	ret

Disassembly of section .text.write_cols:

000029d4 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    29d4:	4f 92       	push	r4
    29d6:	5f 92       	push	r5
    29d8:	6f 92       	push	r6
    29da:	7f 92       	push	r7
    29dc:	8f 92       	push	r8
    29de:	af 92       	push	r10
    29e0:	bf 92       	push	r11
    29e2:	cf 92       	push	r12
    29e4:	df 92       	push	r13
    29e6:	ef 92       	push	r14
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	cb 54       	subi	r28, 0x4B	; 75
    29f6:	d1 09       	sbc	r29, r1
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	3b 01       	movw	r6, r22
    2a04:	88 2e       	mov	r8, r24
    2a06:	5a 01       	movw	r10, r20
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	bool valid;
	
	//Col ID
	if(!get_parameter(cmd, arg, 2)) return false;
    2a08:	22 e0       	ldi	r18, 0x02	; 2
    2a0a:	4b e3       	ldi	r20, 0x3B	; 59
    2a0c:	5d e0       	ldi	r21, 0x0D	; 13
    2a0e:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    2a12:	18 2f       	mov	r17, r24
    2a14:	88 23       	and	r24, r24
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <write_cols+0x46>
    2a18:	72 c0       	rjmp	.+228    	; 0x2afe <write_cols+0x12a>
	index=atoi(arg);
    2a1a:	8b e3       	ldi	r24, 0x3B	; 59
    2a1c:	9d e0       	ldi	r25, 0x0D	; 13
    2a1e:	6c 01       	movw	r12, r24
    2a20:	20 e8       	ldi	r18, 0x80	; 128
    2a22:	e2 2e       	mov	r14, r18
    2a24:	8e 2d       	mov	r24, r14
    2a26:	b6 01       	movw	r22, r12
    2a28:	0e 94 55 39 	call	0x72aa	; 0x72aa <atoi>
	if(index<1 || index>N_COLLECTIONS) return false;
    2a2c:	0f ef       	ldi	r16, 0xFF	; 255
    2a2e:	08 0f       	add	r16, r24
    2a30:	0f 30       	cpi	r16, 0x0F	; 15
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <write_cols+0x62>
    2a34:	5f c0       	rjmp	.+190    	; 0x2af4 <write_cols+0x120>
	index--; //Offset index
	
	//Number of samples
	if(!get_parameter(cmd, arg, 3)) return false;
    2a36:	23 e0       	ldi	r18, 0x03	; 3
    2a38:	4b e3       	ldi	r20, 0x3B	; 59
    2a3a:	5d e0       	ldi	r21, 0x0D	; 13
    2a3c:	88 2d       	mov	r24, r8
    2a3e:	b3 01       	movw	r22, r6
    2a40:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    2a44:	18 2f       	mov	r17, r24
    2a46:	88 23       	and	r24, r24
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <write_cols+0x78>
    2a4a:	59 c0       	rjmp	.+178    	; 0x2afe <write_cols+0x12a>
	samplings=atoi(arg);
    2a4c:	8e 2d       	mov	r24, r14
    2a4e:	b6 01       	movw	r22, r12
    2a50:	0e 94 55 39 	call	0x72aa	; 0x72aa <atoi>
    2a54:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>MAX_SAMPLES_ALL) return false;
    2a56:	02 97       	sbiw	r24, 0x02	; 2
    2a58:	83 36       	cpi	r24, 0x63	; 99
    2a5a:	91 05       	cpc	r25, r1
    2a5c:	08 f0       	brcs	.+2      	; 0x2a60 <write_cols+0x8c>
    2a5e:	4c c0       	rjmp	.+152    	; 0x2af8 <write_cols+0x124>
	
	//Sampling interval
	if(!get_parameter(cmd, arg, 4)) return false;
    2a60:	24 e0       	ldi	r18, 0x04	; 4
    2a62:	4b e3       	ldi	r20, 0x3B	; 59
    2a64:	5d e0       	ldi	r21, 0x0D	; 13
    2a66:	88 2d       	mov	r24, r8
    2a68:	b3 01       	movw	r22, r6
    2a6a:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    2a6e:	18 2f       	mov	r17, r24
    2a70:	88 23       	and	r24, r24
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <write_cols+0xa2>
    2a74:	44 c0       	rjmp	.+136    	; 0x2afe <write_cols+0x12a>
	samplingInterval=atoi(arg);
    2a76:	8e 2d       	mov	r24, r14
    2a78:	b6 01       	movw	r22, r12
    2a7a:	0e 94 55 39 	call	0x72aa	; 0x72aa <atoi>
    2a7e:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    2a80:	02 97       	sbiw	r24, 0x02	; 2
    2a82:	87 35       	cpi	r24, 0x57	; 87
    2a84:	92 40       	sbci	r25, 0x02	; 2
    2a86:	d0 f5       	brcc	.+116    	; 0x2afc <write_cols+0x128>
	
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    2a88:	6b e4       	ldi	r22, 0x4B	; 75
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	01 96       	adiw	r24, 0x01	; 1
    2a8e:	0e 94 d5 37 	call	0x6faa	; 0x6faa <EM_get_collections>
	
	cols[index].samplings=samplings;
    2a92:	80 2f       	mov	r24, r16
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	fc 01       	movw	r30, r24
    2a98:	ee 0f       	add	r30, r30
    2a9a:	ff 1f       	adc	r31, r31
    2a9c:	ee 0f       	add	r30, r30
    2a9e:	ff 1f       	adc	r31, r31
    2aa0:	e8 0f       	add	r30, r24
    2aa2:	f9 1f       	adc	r31, r25
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	8c 0f       	add	r24, r28
    2aaa:	9d 1f       	adc	r25, r29
    2aac:	e8 0f       	add	r30, r24
    2aae:	f9 1f       	adc	r31, r25
    2ab0:	51 82       	std	Z+1, r5	; 0x01
    2ab2:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    2ab4:	d3 82       	std	Z+3, r13	; 0x03
    2ab6:	c2 82       	std	Z+2, r12	; 0x02
	
	//Check for space in buffer
	valid=MRPP_validate_collections_space(cols, N_COLLECTIONS);
    2ab8:	6f e0       	ldi	r22, 0x0F	; 15
    2aba:	0e 94 94 29 	call	0x5328	; 0x5328 <MRPP_validate_collections_space>
	if(!valid){
    2abe:	81 11       	cpse	r24, r1
    2ac0:	09 c0       	rjmp	.+18     	; 0x2ad4 <write_cols+0x100>
		strcpy(res, "Too much data to be in buffer!");
    2ac2:	2f e1       	ldi	r18, 0x1F	; 31
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4d e8       	ldi	r20, 0x8D	; 141
    2ac8:	55 e0       	ldi	r21, 0x05	; 5
    2aca:	60 e0       	ldi	r22, 0x00	; 0
    2acc:	c5 01       	movw	r24, r10
    2ace:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
    2ad2:	15 c0       	rjmp	.+42     	; 0x2afe <write_cols+0x12a>
	}
	
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    2ad4:	be 01       	movw	r22, r28
    2ad6:	6f 5f       	subi	r22, 0xFF	; 255
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	80 e8       	ldi	r24, 0x80	; 128
    2adc:	4b e4       	ldi	r20, 0x4B	; 75
    2ade:	0e 94 40 38 	call	0x7080	; 0x7080 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    2ae2:	28 e0       	ldi	r18, 0x08	; 8
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	45 e8       	ldi	r20, 0x85	; 133
    2ae8:	55 e0       	ldi	r21, 0x05	; 5
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	c5 01       	movw	r24, r10
    2aee:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	return true;	
    2af2:	05 c0       	rjmp	.+10     	; 0x2afe <write_cols+0x12a>
	bool valid;
	
	//Col ID
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>N_COLLECTIONS) return false;
    2af4:	10 e0       	ldi	r17, 0x00	; 0
    2af6:	03 c0       	rjmp	.+6      	; 0x2afe <write_cols+0x12a>
	index--; //Offset index
	
	//Number of samples
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>MAX_SAMPLES_ALL) return false;
    2af8:	10 e0       	ldi	r17, 0x00	; 0
    2afa:	01 c0       	rjmp	.+2      	; 0x2afe <write_cols+0x12a>
	
	//Sampling interval
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    2afc:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    2afe:	81 2f       	mov	r24, r17
    2b00:	c5 5b       	subi	r28, 0xB5	; 181
    2b02:	df 4f       	sbci	r29, 0xFF	; 255
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	cd bf       	out	0x3d, r28	; 61
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	1f 91       	pop	r17
    2b14:	0f 91       	pop	r16
    2b16:	ef 90       	pop	r14
    2b18:	df 90       	pop	r13
    2b1a:	cf 90       	pop	r12
    2b1c:	bf 90       	pop	r11
    2b1e:	af 90       	pop	r10
    2b20:	8f 90       	pop	r8
    2b22:	7f 90       	pop	r7
    2b24:	6f 90       	pop	r6
    2b26:	5f 90       	pop	r5
    2b28:	4f 90       	pop	r4
    2b2a:	08 95       	ret

Disassembly of section .text.write_heat_up:

00005bae <write_heat_up>:



static bool write_heat_up(const char cmd[], char res[]){
    5bae:	0f 93       	push	r16
    5bb0:	1f 93       	push	r17
    5bb2:	cf 93       	push	r28
    5bb4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5bb6:	22 e0       	ldi	r18, 0x02	; 2
    5bb8:	4b e3       	ldi	r20, 0x3B	; 59
    5bba:	5d e0       	ldi	r21, 0x0D	; 13
    5bbc:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    5bc0:	c8 2f       	mov	r28, r24
    5bc2:	88 23       	and	r24, r24
    5bc4:	a9 f0       	breq	.+42     	; 0x5bf0 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    5bc6:	6b e3       	ldi	r22, 0x3B	; 59
    5bc8:	7d e0       	ldi	r23, 0x0D	; 13
    5bca:	80 e8       	ldi	r24, 0x80	; 128
    5bcc:	0e 94 55 39 	call	0x72aa	; 0x72aa <atoi>
	
	if(val<1 || val>200) return false;
    5bd0:	9f ef       	ldi	r25, 0xFF	; 255
    5bd2:	98 0f       	add	r25, r24
    5bd4:	98 3c       	cpi	r25, 0xC8	; 200
    5bd6:	58 f4       	brcc	.+22     	; 0x5bee <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    5bd8:	0e 94 8b 38 	call	0x7116	; 0x7116 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    5bdc:	28 e0       	ldi	r18, 0x08	; 8
    5bde:	30 e0       	ldi	r19, 0x00	; 0
    5be0:	45 e8       	ldi	r20, 0x85	; 133
    5be2:	55 e0       	ldi	r21, 0x05	; 5
    5be4:	60 e0       	ldi	r22, 0x00	; 0
    5be6:	c8 01       	movw	r24, r16
    5be8:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	return true;
    5bec:	01 c0       	rjmp	.+2      	; 0x5bf0 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    5bee:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5bf0:	8c 2f       	mov	r24, r28
    5bf2:	cf 91       	pop	r28
    5bf4:	1f 91       	pop	r17
    5bf6:	0f 91       	pop	r16
    5bf8:	08 95       	ret

Disassembly of section .text.write_air_pump:

0000585c <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    585c:	0f 93       	push	r16
    585e:	1f 93       	push	r17
    5860:	cf 93       	push	r28
    5862:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5864:	22 e0       	ldi	r18, 0x02	; 2
    5866:	4b e3       	ldi	r20, 0x3B	; 59
    5868:	5d e0       	ldi	r21, 0x0D	; 13
    586a:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    586e:	c8 2f       	mov	r28, r24
    5870:	88 23       	and	r24, r24
    5872:	b9 f0       	breq	.+46     	; 0x58a2 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    5874:	6b e3       	ldi	r22, 0x3B	; 59
    5876:	7d e0       	ldi	r23, 0x0D	; 13
    5878:	80 e8       	ldi	r24, 0x80	; 128
    587a:	0e 94 55 39 	call	0x72aa	; 0x72aa <atoi>
	
	if(val<5 || val>1000) return false;
    587e:	9c 01       	movw	r18, r24
    5880:	25 50       	subi	r18, 0x05	; 5
    5882:	31 09       	sbc	r19, r1
    5884:	24 3e       	cpi	r18, 0xE4	; 228
    5886:	33 40       	sbci	r19, 0x03	; 3
    5888:	58 f4       	brcc	.+22     	; 0x58a0 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    588a:	0e 94 97 38 	call	0x712e	; 0x712e <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    588e:	28 e0       	ldi	r18, 0x08	; 8
    5890:	30 e0       	ldi	r19, 0x00	; 0
    5892:	45 e8       	ldi	r20, 0x85	; 133
    5894:	55 e0       	ldi	r21, 0x05	; 5
    5896:	60 e0       	ldi	r22, 0x00	; 0
    5898:	c8 01       	movw	r24, r16
    589a:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	return true;
    589e:	01 c0       	rjmp	.+2      	; 0x58a2 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    58a0:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    58a2:	8c 2f       	mov	r24, r28
    58a4:	cf 91       	pop	r28
    58a6:	1f 91       	pop	r17
    58a8:	0f 91       	pop	r16
    58aa:	08 95       	ret

Disassembly of section .text.write_sp_interval:

00005bfa <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    5bfa:	0f 93       	push	r16
    5bfc:	1f 93       	push	r17
    5bfe:	cf 93       	push	r28
    5c00:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5c02:	22 e0       	ldi	r18, 0x02	; 2
    5c04:	4b e3       	ldi	r20, 0x3B	; 59
    5c06:	5d e0       	ldi	r21, 0x0D	; 13
    5c08:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    5c0c:	c8 2f       	mov	r28, r24
    5c0e:	88 23       	and	r24, r24
    5c10:	a9 f0       	breq	.+42     	; 0x5c3c <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    5c12:	6b e3       	ldi	r22, 0x3B	; 59
    5c14:	7d e0       	ldi	r23, 0x0D	; 13
    5c16:	80 e8       	ldi	r24, 0x80	; 128
    5c18:	0e 94 55 39 	call	0x72aa	; 0x72aa <atoi>
	
	if(val<6 || val>24) return false;
    5c1c:	9a ef       	ldi	r25, 0xFA	; 250
    5c1e:	98 0f       	add	r25, r24
    5c20:	93 31       	cpi	r25, 0x13	; 19
    5c22:	58 f4       	brcc	.+22     	; 0x5c3a <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    5c24:	0e 94 a3 38 	call	0x7146	; 0x7146 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    5c28:	28 e0       	ldi	r18, 0x08	; 8
    5c2a:	30 e0       	ldi	r19, 0x00	; 0
    5c2c:	45 e8       	ldi	r20, 0x85	; 133
    5c2e:	55 e0       	ldi	r21, 0x05	; 5
    5c30:	60 e0       	ldi	r22, 0x00	; 0
    5c32:	c8 01       	movw	r24, r16
    5c34:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	return true;
    5c38:	01 c0       	rjmp	.+2      	; 0x5c3c <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    5c3a:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5c3c:	8c 2f       	mov	r24, r28
    5c3e:	cf 91       	pop	r28
    5c40:	1f 91       	pop	r17
    5c42:	0f 91       	pop	r16
    5c44:	08 95       	ret

Disassembly of section .text.write_reset:

000039cc <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
    39d8:	cb 54       	subi	r28, 0x4B	; 75
    39da:	d1 09       	sbc	r29, r1
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	de bf       	out	0x3e, r29	; 62
    39e2:	0f be       	out	0x3f, r0	; 63
    39e4:	cd bf       	out	0x3d, r28	; 61
    39e6:	8a 01       	movw	r16, r20
	
	COLLECTION cols[N_COLLECTIONS];
	
	EM_set_deveui("0000000000000000");
    39e8:	6c ea       	ldi	r22, 0xAC	; 172
    39ea:	75 e0       	ldi	r23, 0x05	; 5
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	0e 94 49 31 	call	0x6292	; 0x6292 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    39f2:	6c ea       	ldi	r22, 0xAC	; 172
    39f4:	75 e0       	ldi	r23, 0x05	; 5
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	0e 94 66 31 	call	0x62cc	; 0x62cc <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    39fc:	6d eb       	ldi	r22, 0xBD	; 189
    39fe:	75 e0       	ldi	r23, 0x05	; 5
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	0e 94 83 31 	call	0x6306	; 0x6306 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    3a06:	60 e0       	ldi	r22, 0x00	; 0
    3a08:	70 e0       	ldi	r23, 0x00	; 0
    3a0a:	80 e8       	ldi	r24, 0x80	; 128
    3a0c:	9f e3       	ldi	r25, 0x3F	; 63
    3a0e:	0e 94 2b 38 	call	0x7056	; 0x7056 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	70 e4       	ldi	r23, 0x40	; 64
    3a16:	8c e1       	ldi	r24, 0x1C	; 28
    3a18:	95 e4       	ldi	r25, 0x45	; 69
    3a1a:	0e 94 32 38 	call	0x7064	; 0x7064 <EM_set_RRL>
	EM_set_Vcc(5.00);
    3a1e:	60 e0       	ldi	r22, 0x00	; 0
    3a20:	70 e0       	ldi	r23, 0x00	; 0
    3a22:	80 ea       	ldi	r24, 0xA0	; 160
    3a24:	90 e4       	ldi	r25, 0x40	; 64
    3a26:	0e 94 39 38 	call	0x7072	; 0x7072 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    3a2a:	82 e0       	ldi	r24, 0x02	; 2
    3a2c:	0e 94 8b 38 	call	0x7116	; 0x7116 <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    3a30:	85 e0       	ldi	r24, 0x05	; 5
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	0e 94 97 38 	call	0x712e	; 0x712e <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    3a38:	86 e0       	ldi	r24, 0x06	; 6
    3a3a:	0e 94 a3 38 	call	0x7146	; 0x7146 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	1a c0       	rjmp	.+52     	; 0x3a76 <write_reset+0xaa>
	{
		cols[i].type=T_INT16;
    3a42:	e8 2f       	mov	r30, r24
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	9f 01       	movw	r18, r30
    3a48:	22 0f       	add	r18, r18
    3a4a:	33 1f       	adc	r19, r19
    3a4c:	22 0f       	add	r18, r18
    3a4e:	33 1f       	adc	r19, r19
    3a50:	e2 0f       	add	r30, r18
    3a52:	f3 1f       	adc	r31, r19
    3a54:	21 e0       	ldi	r18, 0x01	; 1
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	2c 0f       	add	r18, r28
    3a5a:	3d 1f       	adc	r19, r29
    3a5c:	e2 0f       	add	r30, r18
    3a5e:	f3 1f       	adc	r31, r19
    3a60:	92 e0       	ldi	r25, 0x02	; 2
    3a62:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    3a64:	22 e0       	ldi	r18, 0x02	; 2
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	31 83       	std	Z+1, r19	; 0x01
    3a6a:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    3a6c:	23 e0       	ldi	r18, 0x03	; 3
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	33 83       	std	Z+3, r19	; 0x03
    3a72:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    3a74:	8f 5f       	subi	r24, 0xFF	; 255
    3a76:	8f 30       	cpi	r24, 0x0F	; 15
    3a78:	20 f3       	brcs	.-56     	; 0x3a42 <write_reset+0x76>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    3a7a:	be 01       	movw	r22, r28
    3a7c:	6f 5f       	subi	r22, 0xFF	; 255
    3a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a80:	80 e8       	ldi	r24, 0x80	; 128
    3a82:	4b e4       	ldi	r20, 0x4B	; 75
    3a84:	0e 94 40 38 	call	0x7080	; 0x7080 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    3a88:	23 e1       	ldi	r18, 0x13	; 19
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	4e ed       	ldi	r20, 0xDE	; 222
    3a8e:	55 e0       	ldi	r21, 0x05	; 5
    3a90:	60 e0       	ldi	r22, 0x00	; 0
    3a92:	c8 01       	movw	r24, r16
    3a94:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	return true;
}
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	c5 5b       	subi	r28, 0xB5	; 181
    3a9c:	df 4f       	sbci	r29, 0xFF	; 255
    3a9e:	0f b6       	in	r0, 0x3f	; 63
    3aa0:	f8 94       	cli
    3aa2:	de bf       	out	0x3e, r29	; 62
    3aa4:	0f be       	out	0x3f, r0	; 63
    3aa6:	cd bf       	out	0x3d, r28	; 61
    3aa8:	df 91       	pop	r29
    3aaa:	cf 91       	pop	r28
    3aac:	1f 91       	pop	r17
    3aae:	0f 91       	pop	r16
    3ab0:	08 95       	ret

Disassembly of section .text.write_time:

000036e6 <write_time>:

static bool write_time(const char cmd[], char res[]){
    36e6:	6f 92       	push	r6
    36e8:	7f 92       	push	r7
    36ea:	8f 92       	push	r8
    36ec:	df 92       	push	r13
    36ee:	ef 92       	push	r14
    36f0:	ff 92       	push	r15
    36f2:	0f 93       	push	r16
    36f4:	1f 93       	push	r17
    36f6:	cf 93       	push	r28
    36f8:	df 93       	push	r29
    36fa:	00 d0       	rcall	.+0      	; 0x36fc <write_time+0x16>
    36fc:	00 d0       	rcall	.+0      	; 0x36fe <write_time+0x18>
    36fe:	00 d0       	rcall	.+0      	; 0x3700 <write_time+0x1a>
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
    3704:	3b 01       	movw	r6, r22
    3706:	88 2e       	mov	r8, r24
    3708:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    370a:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    370e:	22 e0       	ldi	r18, 0x02	; 2
    3710:	4b e3       	ldi	r20, 0x3B	; 59
    3712:	5d e0       	ldi	r21, 0x0D	; 13
    3714:	88 2d       	mov	r24, r8
    3716:	b3 01       	movw	r22, r6
    3718:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    371c:	18 2f       	mov	r17, r24
    371e:	88 23       	and	r24, r24
    3720:	09 f4       	brne	.+2      	; 0x3724 <write_time+0x3e>
    3722:	4e c0       	rjmp	.+156    	; 0x37c0 <write_time+0xda>
	if(strlen(arg)!=17){
    3724:	6b e3       	ldi	r22, 0x3B	; 59
    3726:	7d e0       	ldi	r23, 0x0D	; 13
    3728:	80 e8       	ldi	r24, 0x80	; 128
    372a:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    372e:	41 97       	sbiw	r24, 0x11	; 17
    3730:	49 f0       	breq	.+18     	; 0x3744 <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    3732:	25 e2       	ldi	r18, 0x25	; 37
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	41 ef       	ldi	r20, 0xF1	; 241
    3738:	55 e0       	ldi	r21, 0x05	; 5
    373a:	60 e0       	ldi	r22, 0x00	; 0
    373c:	c7 01       	movw	r24, r14
    373e:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
    3742:	3e c0       	rjmp	.+124    	; 0x37c0 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	8b e3       	ldi	r24, 0x3B	; 59
    3748:	9d e0       	ldi	r25, 0x0D	; 13
    374a:	0e 94 cb 32 	call	0x6596	; 0x6596 <get_time_par>
    374e:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    3750:	63 e0       	ldi	r22, 0x03	; 3
    3752:	8b e3       	ldi	r24, 0x3B	; 59
    3754:	9d e0       	ldi	r25, 0x0D	; 13
    3756:	0e 94 cb 32 	call	0x6596	; 0x6596 <get_time_par>
    375a:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    375c:	66 e0       	ldi	r22, 0x06	; 6
    375e:	8b e3       	ldi	r24, 0x3B	; 59
    3760:	9d e0       	ldi	r25, 0x0D	; 13
    3762:	0e 94 cb 32 	call	0x6596	; 0x6596 <get_time_par>
    3766:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    3768:	69 e0       	ldi	r22, 0x09	; 9
    376a:	8b e3       	ldi	r24, 0x3B	; 59
    376c:	9d e0       	ldi	r25, 0x0D	; 13
    376e:	0e 94 cb 32 	call	0x6596	; 0x6596 <get_time_par>
    3772:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    3774:	6c e0       	ldi	r22, 0x0C	; 12
    3776:	8b e3       	ldi	r24, 0x3B	; 59
    3778:	9d e0       	ldi	r25, 0x0D	; 13
    377a:	0e 94 cb 32 	call	0x6596	; 0x6596 <get_time_par>
    377e:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    3780:	6f e0       	ldi	r22, 0x0F	; 15
    3782:	8b e3       	ldi	r24, 0x3B	; 59
    3784:	9d e0       	ldi	r25, 0x0D	; 13
    3786:	0e 94 cb 32 	call	0x6596	; 0x6596 <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    378a:	48 2f       	mov	r20, r24
    378c:	5d 2d       	mov	r21, r13
    378e:	60 2f       	mov	r22, r16
    3790:	76 2d       	mov	r23, r6
    3792:	87 2d       	mov	r24, r7
    3794:	98 2d       	mov	r25, r8
    3796:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    379a:	88 23       	and	r24, r24
    379c:	49 f0       	breq	.+18     	; 0x37b0 <write_time+0xca>
		strcpy(res, "Failed to set time");
    379e:	23 e1       	ldi	r18, 0x13	; 19
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	46 e1       	ldi	r20, 0x16	; 22
    37a4:	56 e0       	ldi	r21, 0x06	; 6
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	c7 01       	movw	r24, r14
    37aa:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
    37ae:	08 c0       	rjmp	.+16     	; 0x37c0 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    37b0:	28 e0       	ldi	r18, 0x08	; 8
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	45 e8       	ldi	r20, 0x85	; 133
    37b6:	55 e0       	ldi	r21, 0x05	; 5
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	c7 01       	movw	r24, r14
    37bc:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
	return true;
}
    37c0:	81 2f       	mov	r24, r17
    37c2:	26 96       	adiw	r28, 0x06	; 6
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	df 91       	pop	r29
    37d0:	cf 91       	pop	r28
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	ff 90       	pop	r15
    37d8:	ef 90       	pop	r14
    37da:	df 90       	pop	r13
    37dc:	8f 90       	pop	r8
    37de:	7f 90       	pop	r7
    37e0:	6f 90       	pop	r6
    37e2:	08 95       	ret

Disassembly of section .text.handle_read:

0000182c <handle_read>:
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);
static void read_validate_SI(char res[]);

bool handle_read(const char cmd[], char res[]){
    182c:	cf 92       	push	r12
    182e:	df 92       	push	r13
    1830:	ef 92       	push	r14
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	68 97       	sbiw	r28, 0x18	; 24
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	6b 01       	movw	r12, r22
    184e:	e8 2e       	mov	r14, r24
    1850:	f4 2e       	mov	r15, r20
    1852:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1854:	21 e0       	ldi	r18, 0x01	; 1
    1856:	ae 01       	movw	r20, r28
    1858:	4f 5f       	subi	r20, 0xFF	; 255
    185a:	5f 4f       	sbci	r21, 0xFF	; 255
    185c:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    1860:	18 2f       	mov	r17, r24
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <handle_read+0x3c>
    1866:	31 c1       	rjmp	.+610    	; 0x1aca <handle_read+0x29e>
    1868:	8e 2d       	mov	r24, r14
    186a:	b6 01       	movw	r22, r12
    186c:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <count_parameters>
    1870:	82 30       	cpi	r24, 0x02	; 2
    1872:	09 f4       	brne	.+2      	; 0x1876 <handle_read+0x4a>
    1874:	29 c1       	rjmp	.+594    	; 0x1ac8 <handle_read+0x29c>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1876:	ce 01       	movw	r24, r28
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	6c 01       	movw	r12, r24
    187c:	20 e8       	ldi	r18, 0x80	; 128
    187e:	e2 2e       	mov	r14, r18
    1880:	29 e2       	ldi	r18, 0x29	; 41
    1882:	36 e0       	ldi	r19, 0x06	; 6
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	8e 2d       	mov	r24, r14
    1888:	b6 01       	movw	r22, r12
    188a:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    188e:	89 2b       	or	r24, r25
    1890:	29 f4       	brne	.+10     	; 0x189c <handle_read+0x70>
	{
		EM_get_deveui(res);
    1892:	8f 2d       	mov	r24, r15
    1894:	90 2f       	mov	r25, r16
    1896:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <EM_get_deveui>
    189a:	17 c1       	rjmp	.+558    	; 0x1aca <handle_read+0x29e>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    189c:	20 e3       	ldi	r18, 0x30	; 48
    189e:	36 e0       	ldi	r19, 0x06	; 6
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	8e 2d       	mov	r24, r14
    18a4:	b6 01       	movw	r22, r12
    18a6:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    18aa:	89 2b       	or	r24, r25
    18ac:	29 f4       	brne	.+10     	; 0x18b8 <handle_read+0x8c>
	{
		EM_get_appeui(res);
    18ae:	8f 2d       	mov	r24, r15
    18b0:	90 2f       	mov	r25, r16
    18b2:	0e 94 92 33 	call	0x6724	; 0x6724 <EM_get_appeui>
    18b6:	09 c1       	rjmp	.+530    	; 0x1aca <handle_read+0x29e>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    18b8:	27 e3       	ldi	r18, 0x37	; 55
    18ba:	36 e0       	ldi	r19, 0x06	; 6
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	8e 2d       	mov	r24, r14
    18c0:	b6 01       	movw	r22, r12
    18c2:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    18c6:	89 2b       	or	r24, r25
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <handle_read+0xa8>
	{
		EM_get_appkey(res);
    18ca:	8f 2d       	mov	r24, r15
    18cc:	90 2f       	mov	r25, r16
    18ce:	0e 94 aa 33 	call	0x6754	; 0x6754 <EM_get_appkey>
    18d2:	fb c0       	rjmp	.+502    	; 0x1aca <handle_read+0x29e>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    18d4:	2e e3       	ldi	r18, 0x3E	; 62
    18d6:	36 e0       	ldi	r19, 0x06	; 6
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	8e 2d       	mov	r24, r14
    18dc:	b6 01       	movw	r22, r12
    18de:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    18e2:	89 2b       	or	r24, r25
    18e4:	e1 f4       	brne	.+56     	; 0x191e <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    18e6:	ce 01       	movw	r24, r28
    18e8:	45 96       	adiw	r24, 0x15	; 21
    18ea:	0e 94 08 36 	call	0x6c10	; 0x6c10 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    18ee:	88 8d       	ldd	r24, Y+24	; 0x18
    18f0:	8f 93       	push	r24
    18f2:	8f 89       	ldd	r24, Y+23	; 0x17
    18f4:	8f 93       	push	r24
    18f6:	8e 89       	ldd	r24, Y+22	; 0x16
    18f8:	8f 93       	push	r24
    18fa:	8d 89       	ldd	r24, Y+21	; 0x15
    18fc:	8f 93       	push	r24
    18fe:	83 e4       	ldi	r24, 0x43	; 67
    1900:	96 e0       	ldi	r25, 0x06	; 6
    1902:	a0 e0       	ldi	r26, 0x00	; 0
    1904:	af 93       	push	r26
    1906:	9f 93       	push	r25
    1908:	8f 93       	push	r24
    190a:	0f 93       	push	r16
    190c:	ff 92       	push	r15
    190e:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	d6 c0       	rjmp	.+428    	; 0x1aca <handle_read+0x29e>
	}
	else if(strcmp(par, RW_RRL)==0)
    191e:	28 e4       	ldi	r18, 0x48	; 72
    1920:	36 e0       	ldi	r19, 0x06	; 6
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	8e 2d       	mov	r24, r14
    1926:	b6 01       	movw	r22, r12
    1928:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    192c:	89 2b       	or	r24, r25
    192e:	e1 f4       	brne	.+56     	; 0x1968 <handle_read+0x13c>
	{
		EM_get_RRL(&val);
    1930:	ce 01       	movw	r24, r28
    1932:	45 96       	adiw	r24, 0x15	; 21
    1934:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <EM_get_RRL>
		sprintf(res, "%.2f", val);
    1938:	88 8d       	ldd	r24, Y+24	; 0x18
    193a:	8f 93       	push	r24
    193c:	8f 89       	ldd	r24, Y+23	; 0x17
    193e:	8f 93       	push	r24
    1940:	8e 89       	ldd	r24, Y+22	; 0x16
    1942:	8f 93       	push	r24
    1944:	8d 89       	ldd	r24, Y+21	; 0x15
    1946:	8f 93       	push	r24
    1948:	83 e4       	ldi	r24, 0x43	; 67
    194a:	96 e0       	ldi	r25, 0x06	; 6
    194c:	a0 e0       	ldi	r26, 0x00	; 0
    194e:	af 93       	push	r26
    1950:	9f 93       	push	r25
    1952:	8f 93       	push	r24
    1954:	0f 93       	push	r16
    1956:	ff 92       	push	r15
    1958:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	b1 c0       	rjmp	.+354    	; 0x1aca <handle_read+0x29e>
	}
	else if(strcmp(par, RW_VCC)==0)
    1968:	2d e4       	ldi	r18, 0x4D	; 77
    196a:	36 e0       	ldi	r19, 0x06	; 6
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	8e 2d       	mov	r24, r14
    1970:	b6 01       	movw	r22, r12
    1972:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1976:	89 2b       	or	r24, r25
    1978:	e1 f4       	brne	.+56     	; 0x19b2 <handle_read+0x186>
	{
		EM_get_Vcc(&val);
    197a:	ce 01       	movw	r24, r28
    197c:	45 96       	adiw	r24, 0x15	; 21
    197e:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1982:	88 8d       	ldd	r24, Y+24	; 0x18
    1984:	8f 93       	push	r24
    1986:	8f 89       	ldd	r24, Y+23	; 0x17
    1988:	8f 93       	push	r24
    198a:	8e 89       	ldd	r24, Y+22	; 0x16
    198c:	8f 93       	push	r24
    198e:	8d 89       	ldd	r24, Y+21	; 0x15
    1990:	8f 93       	push	r24
    1992:	83 e4       	ldi	r24, 0x43	; 67
    1994:	96 e0       	ldi	r25, 0x06	; 6
    1996:	a0 e0       	ldi	r26, 0x00	; 0
    1998:	af 93       	push	r26
    199a:	9f 93       	push	r25
    199c:	8f 93       	push	r24
    199e:	0f 93       	push	r16
    19a0:	ff 92       	push	r15
    19a2:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	8c c0       	rjmp	.+280    	; 0x1aca <handle_read+0x29e>
	}
	else if(strcmp(par, RW_COLS)==0)
    19b2:	22 e5       	ldi	r18, 0x52	; 82
    19b4:	36 e0       	ldi	r19, 0x06	; 6
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	8e 2d       	mov	r24, r14
    19ba:	b6 01       	movw	r22, r12
    19bc:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    19c0:	89 2b       	or	r24, r25
    19c2:	29 f4       	brne	.+10     	; 0x19ce <handle_read+0x1a2>
	{
		read_cols(res);
    19c4:	8f 2d       	mov	r24, r15
    19c6:	90 2f       	mov	r25, r16
    19c8:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <read_cols>
    19cc:	7e c0       	rjmp	.+252    	; 0x1aca <handle_read+0x29e>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    19ce:	27 e5       	ldi	r18, 0x57	; 87
    19d0:	36 e0       	ldi	r19, 0x06	; 6
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	8e 2d       	mov	r24, r14
    19d6:	b6 01       	movw	r22, r12
    19d8:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    19dc:	89 2b       	or	r24, r25
    19de:	a1 f4       	brne	.+40     	; 0x1a08 <handle_read+0x1dc>
	{
		uint8_t val=EM_get_heat_up_time();
    19e0:	0e 94 91 38 	call	0x7122	; 0x7122 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    19e4:	1f 92       	push	r1
    19e6:	8f 93       	push	r24
    19e8:	81 e6       	ldi	r24, 0x61	; 97
    19ea:	96 e0       	ldi	r25, 0x06	; 6
    19ec:	a0 e0       	ldi	r26, 0x00	; 0
    19ee:	af 93       	push	r26
    19f0:	9f 93       	push	r25
    19f2:	8f 93       	push	r24
    19f4:	0f 93       	push	r16
    19f6:	ff 92       	push	r15
    19f8:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	61 c0       	rjmp	.+194    	; 0x1aca <handle_read+0x29e>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1a08:	23 e7       	ldi	r18, 0x73	; 115
    1a0a:	36 e0       	ldi	r19, 0x06	; 6
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	8e 2d       	mov	r24, r14
    1a10:	b6 01       	movw	r22, r12
    1a12:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1a16:	89 2b       	or	r24, r25
    1a18:	a1 f4       	brne	.+40     	; 0x1a42 <handle_read+0x216>
	{
		uint16_t val=EM_get_air_pump_time();
    1a1a:	0e 94 9d 38 	call	0x713a	; 0x713a <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    1a1e:	9f 93       	push	r25
    1a20:	8f 93       	push	r24
    1a22:	8e e7       	ldi	r24, 0x7E	; 126
    1a24:	96 e0       	ldi	r25, 0x06	; 6
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	af 93       	push	r26
    1a2a:	9f 93       	push	r25
    1a2c:	8f 93       	push	r24
    1a2e:	0f 93       	push	r16
    1a30:	ff 92       	push	r15
    1a32:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	44 c0       	rjmp	.+136    	; 0x1aca <handle_read+0x29e>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1a42:	21 e9       	ldi	r18, 0x91	; 145
    1a44:	36 e0       	ldi	r19, 0x06	; 6
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	8e 2d       	mov	r24, r14
    1a4a:	b6 01       	movw	r22, r12
    1a4c:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1a50:	89 2b       	or	r24, r25
    1a52:	a1 f4       	brne	.+40     	; 0x1a7c <handle_read+0x250>
	{
		uint8_t val=EM_get_sp_interval();
    1a54:	0e 94 a9 38 	call	0x7152	; 0x7152 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1a58:	1f 92       	push	r1
    1a5a:	8f 93       	push	r24
    1a5c:	8d e9       	ldi	r24, 0x9D	; 157
    1a5e:	96 e0       	ldi	r25, 0x06	; 6
    1a60:	a0 e0       	ldi	r26, 0x00	; 0
    1a62:	af 93       	push	r26
    1a64:	9f 93       	push	r25
    1a66:	8f 93       	push	r24
    1a68:	0f 93       	push	r16
    1a6a:	ff 92       	push	r15
    1a6c:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	27 c0       	rjmp	.+78     	; 0x1aca <handle_read+0x29e>
	}
	else if(strcmp(par, RW_TIME)==0)
    1a7c:	2c eb       	ldi	r18, 0xBC	; 188
    1a7e:	36 e0       	ldi	r19, 0x06	; 6
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	8e 2d       	mov	r24, r14
    1a84:	b6 01       	movw	r22, r12
    1a86:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1a8a:	89 2b       	or	r24, r25
    1a8c:	29 f4       	brne	.+10     	; 0x1a98 <handle_read+0x26c>
	{
		read_time(res);
    1a8e:	8f 2d       	mov	r24, r15
    1a90:	90 2f       	mov	r25, r16
    1a92:	0e 94 a2 23 	call	0x4744	; 0x4744 <read_time>
    1a96:	19 c0       	rjmp	.+50     	; 0x1aca <handle_read+0x29e>
	}
	else if(strcmp(par, RW_VALIDATE_SI)==0)
    1a98:	21 ec       	ldi	r18, 0xC1	; 193
    1a9a:	36 e0       	ldi	r19, 0x06	; 6
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	8e 2d       	mov	r24, r14
    1aa0:	b6 01       	movw	r22, r12
    1aa2:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1aa6:	89 2b       	or	r24, r25
    1aa8:	29 f4       	brne	.+10     	; 0x1ab4 <handle_read+0x288>
	{
		read_validate_SI(res);
    1aaa:	8f 2d       	mov	r24, r15
    1aac:	90 2f       	mov	r25, r16
    1aae:	0e 94 23 18 	call	0x3046	; 0x3046 <read_validate_SI>
    1ab2:	0b c0       	rjmp	.+22     	; 0x1aca <handle_read+0x29e>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1ab4:	26 e1       	ldi	r18, 0x16	; 22
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4a ec       	ldi	r20, 0xCA	; 202
    1aba:	56 e0       	ldi	r21, 0x06	; 6
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	8f 2d       	mov	r24, r15
    1ac0:	90 2f       	mov	r25, r16
    1ac2:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <handle_read+0x29e>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1ac8:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1aca:	81 2f       	mov	r24, r17
    1acc:	68 96       	adiw	r28, 0x18	; 24
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	08 95       	ret

Disassembly of section .text.handle_write:

00001d8e <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1d8e:	6f 92       	push	r6
    1d90:	7f 92       	push	r7
    1d92:	8f 92       	push	r8
    1d94:	af 92       	push	r10
    1d96:	bf 92       	push	r11
    1d98:	cf 92       	push	r12
    1d9a:	df 92       	push	r13
    1d9c:	ef 92       	push	r14
    1d9e:	1f 93       	push	r17
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	64 97       	sbiw	r28, 0x14	; 20
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	3b 01       	movw	r6, r22
    1db6:	88 2e       	mov	r8, r24
    1db8:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1dba:	21 e0       	ldi	r18, 0x01	; 1
    1dbc:	ae 01       	movw	r20, r28
    1dbe:	4f 5f       	subi	r20, 0xFF	; 255
    1dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc2:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    1dc6:	18 2f       	mov	r17, r24
    1dc8:	88 23       	and	r24, r24
    1dca:	09 f4       	brne	.+2      	; 0x1dce <handle_write+0x40>
    1dcc:	cd c0       	rjmp	.+410    	; 0x1f68 <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1dce:	ce 01       	movw	r24, r28
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	6c 01       	movw	r12, r24
    1dd4:	20 e8       	ldi	r18, 0x80	; 128
    1dd6:	e2 2e       	mov	r14, r18
    1dd8:	29 e2       	ldi	r18, 0x29	; 41
    1dda:	36 e0       	ldi	r19, 0x06	; 6
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	8e 2d       	mov	r24, r14
    1de0:	b6 01       	movw	r22, r12
    1de2:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1de6:	89 2b       	or	r24, r25
    1de8:	39 f4       	brne	.+14     	; 0x1df8 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1dea:	a5 01       	movw	r20, r10
    1dec:	88 2d       	mov	r24, r8
    1dee:	b3 01       	movw	r22, r6
    1df0:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <write_deveui>
    1df4:	18 2f       	mov	r17, r24
    1df6:	b8 c0       	rjmp	.+368    	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1df8:	20 e3       	ldi	r18, 0x30	; 48
    1dfa:	36 e0       	ldi	r19, 0x06	; 6
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	8e 2d       	mov	r24, r14
    1e00:	b6 01       	movw	r22, r12
    1e02:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1e06:	89 2b       	or	r24, r25
    1e08:	39 f4       	brne	.+14     	; 0x1e18 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1e0a:	a5 01       	movw	r20, r10
    1e0c:	88 2d       	mov	r24, r8
    1e0e:	b3 01       	movw	r22, r6
    1e10:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <write_appeui>
    1e14:	18 2f       	mov	r17, r24
    1e16:	a8 c0       	rjmp	.+336    	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1e18:	27 e3       	ldi	r18, 0x37	; 55
    1e1a:	36 e0       	ldi	r19, 0x06	; 6
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	8e 2d       	mov	r24, r14
    1e20:	b6 01       	movw	r22, r12
    1e22:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1e26:	89 2b       	or	r24, r25
    1e28:	39 f4       	brne	.+14     	; 0x1e38 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1e2a:	a5 01       	movw	r20, r10
    1e2c:	88 2d       	mov	r24, r8
    1e2e:	b3 01       	movw	r22, r6
    1e30:	0e 94 20 26 	call	0x4c40	; 0x4c40 <write_appkey>
    1e34:	18 2f       	mov	r17, r24
    1e36:	98 c0       	rjmp	.+304    	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1e38:	2e e3       	ldi	r18, 0x3E	; 62
    1e3a:	36 e0       	ldi	r19, 0x06	; 6
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	8e 2d       	mov	r24, r14
    1e40:	b6 01       	movw	r22, r12
    1e42:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1e46:	89 2b       	or	r24, r25
    1e48:	39 f4       	brne	.+14     	; 0x1e58 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1e4a:	a5 01       	movw	r20, r10
    1e4c:	88 2d       	mov	r24, r8
    1e4e:	b3 01       	movw	r22, r6
    1e50:	0e 94 65 2d 	call	0x5aca	; 0x5aca <write_PPM_factor>
    1e54:	18 2f       	mov	r17, r24
    1e56:	88 c0       	rjmp	.+272    	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1e58:	28 e4       	ldi	r18, 0x48	; 72
    1e5a:	36 e0       	ldi	r19, 0x06	; 6
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	8e 2d       	mov	r24, r14
    1e60:	b6 01       	movw	r22, r12
    1e62:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1e66:	89 2b       	or	r24, r25
    1e68:	39 f4       	brne	.+14     	; 0x1e78 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1e6a:	a5 01       	movw	r20, r10
    1e6c:	88 2d       	mov	r24, r8
    1e6e:	b3 01       	movw	r22, r6
    1e70:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <write_RRL>
    1e74:	18 2f       	mov	r17, r24
    1e76:	78 c0       	rjmp	.+240    	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1e78:	2d e4       	ldi	r18, 0x4D	; 77
    1e7a:	36 e0       	ldi	r19, 0x06	; 6
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	8e 2d       	mov	r24, r14
    1e80:	b6 01       	movw	r22, r12
    1e82:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1e86:	89 2b       	or	r24, r25
    1e88:	39 f4       	brne	.+14     	; 0x1e98 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1e8a:	a5 01       	movw	r20, r10
    1e8c:	88 2d       	mov	r24, r8
    1e8e:	b3 01       	movw	r22, r6
    1e90:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <write_VCC>
    1e94:	18 2f       	mov	r17, r24
    1e96:	68 c0       	rjmp	.+208    	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    1e98:	22 e5       	ldi	r18, 0x52	; 82
    1e9a:	36 e0       	ldi	r19, 0x06	; 6
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	8e 2d       	mov	r24, r14
    1ea0:	b6 01       	movw	r22, r12
    1ea2:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1ea6:	89 2b       	or	r24, r25
    1ea8:	39 f4       	brne	.+14     	; 0x1eb8 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1eaa:	a5 01       	movw	r20, r10
    1eac:	88 2d       	mov	r24, r8
    1eae:	b3 01       	movw	r22, r6
    1eb0:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <write_cols>
    1eb4:	18 2f       	mov	r17, r24
    1eb6:	58 c0       	rjmp	.+176    	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1eb8:	27 e5       	ldi	r18, 0x57	; 87
    1eba:	36 e0       	ldi	r19, 0x06	; 6
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	8e 2d       	mov	r24, r14
    1ec0:	b6 01       	movw	r22, r12
    1ec2:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1ec6:	89 2b       	or	r24, r25
    1ec8:	39 f4       	brne	.+14     	; 0x1ed8 <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    1eca:	a5 01       	movw	r20, r10
    1ecc:	88 2d       	mov	r24, r8
    1ece:	b3 01       	movw	r22, r6
    1ed0:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <write_heat_up>
    1ed4:	18 2f       	mov	r17, r24
    1ed6:	48 c0       	rjmp	.+144    	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1ed8:	23 e7       	ldi	r18, 0x73	; 115
    1eda:	36 e0       	ldi	r19, 0x06	; 6
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	8e 2d       	mov	r24, r14
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1ee6:	89 2b       	or	r24, r25
    1ee8:	39 f4       	brne	.+14     	; 0x1ef8 <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1eea:	a5 01       	movw	r20, r10
    1eec:	88 2d       	mov	r24, r8
    1eee:	b3 01       	movw	r22, r6
    1ef0:	0e 94 2e 2c 	call	0x585c	; 0x585c <write_air_pump>
    1ef4:	18 2f       	mov	r17, r24
    1ef6:	38 c0       	rjmp	.+112    	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1ef8:	21 e9       	ldi	r18, 0x91	; 145
    1efa:	36 e0       	ldi	r19, 0x06	; 6
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	8e 2d       	mov	r24, r14
    1f00:	b6 01       	movw	r22, r12
    1f02:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1f06:	89 2b       	or	r24, r25
    1f08:	39 f4       	brne	.+14     	; 0x1f18 <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1f0a:	a5 01       	movw	r20, r10
    1f0c:	88 2d       	mov	r24, r8
    1f0e:	b3 01       	movw	r22, r6
    1f10:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <write_sp_interval>
    1f14:	18 2f       	mov	r17, r24
    1f16:	28 c0       	rjmp	.+80     	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1f18:	20 ee       	ldi	r18, 0xE0	; 224
    1f1a:	36 e0       	ldi	r19, 0x06	; 6
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	8e 2d       	mov	r24, r14
    1f20:	b6 01       	movw	r22, r12
    1f22:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1f26:	89 2b       	or	r24, r25
    1f28:	39 f4       	brne	.+14     	; 0x1f38 <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1f2a:	a5 01       	movw	r20, r10
    1f2c:	88 2d       	mov	r24, r8
    1f2e:	b3 01       	movw	r22, r6
    1f30:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <write_reset>
    1f34:	18 2f       	mov	r17, r24
    1f36:	18 c0       	rjmp	.+48     	; 0x1f68 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1f38:	2c eb       	ldi	r18, 0xBC	; 188
    1f3a:	36 e0       	ldi	r19, 0x06	; 6
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	8e 2d       	mov	r24, r14
    1f40:	b6 01       	movw	r22, r12
    1f42:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    1f46:	89 2b       	or	r24, r25
    1f48:	39 f4       	brne	.+14     	; 0x1f58 <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1f4a:	a5 01       	movw	r20, r10
    1f4c:	88 2d       	mov	r24, r8
    1f4e:	b3 01       	movw	r22, r6
    1f50:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <write_time>
    1f54:	18 2f       	mov	r17, r24
    1f56:	08 c0       	rjmp	.+16     	; 0x1f68 <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1f58:	26 e1       	ldi	r18, 0x16	; 22
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a ec       	ldi	r20, 0xCA	; 202
    1f5e:	56 e0       	ldi	r21, 0x06	; 6
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	c5 01       	movw	r24, r10
    1f64:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
	}
	
}
    1f68:	81 2f       	mov	r24, r17
    1f6a:	64 96       	adiw	r28, 0x14	; 20
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	ef 90       	pop	r14
    1f7e:	df 90       	pop	r13
    1f80:	cf 90       	pop	r12
    1f82:	bf 90       	pop	r11
    1f84:	af 90       	pop	r10
    1f86:	8f 90       	pop	r8
    1f88:	7f 90       	pop	r7
    1f8a:	6f 90       	pop	r6
    1f8c:	08 95       	ret

Disassembly of section .text.handle_methane:

0000213e <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    213e:	9f 92       	push	r9
    2140:	af 92       	push	r10
    2142:	bf 92       	push	r11
    2144:	cf 92       	push	r12
    2146:	df 92       	push	r13
    2148:	ef 92       	push	r14
    214a:	ff 92       	push	r15
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	2e 97       	sbiw	r28, 0x0e	; 14
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	94 2e       	mov	r9, r20
    2166:	a5 2e       	mov	r10, r21
	if(!get_parameter(cmd, par, 2)) return false;
    2168:	22 e0       	ldi	r18, 0x02	; 2
    216a:	42 e4       	ldi	r20, 0x42	; 66
    216c:	5e e0       	ldi	r21, 0x0E	; 14
    216e:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    2172:	b8 2e       	mov	r11, r24
    2174:	88 23       	and	r24, r24
    2176:	09 f4       	brne	.+2      	; 0x217a <handle_methane+0x3c>
    2178:	92 c0       	rjmp	.+292    	; 0x229e <handle_methane+0x160>
	
	if(strcmp(par, METH_POWER_ON)==0){
    217a:	82 e4       	ldi	r24, 0x42	; 66
    217c:	9e e0       	ldi	r25, 0x0E	; 14
    217e:	6c 01       	movw	r12, r24
    2180:	20 e8       	ldi	r18, 0x80	; 128
    2182:	e2 2e       	mov	r14, r18
    2184:	26 ee       	ldi	r18, 0xE6	; 230
    2186:	36 e0       	ldi	r19, 0x06	; 6
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	8e 2d       	mov	r24, r14
    218c:	b6 01       	movw	r22, r12
    218e:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    2192:	89 2b       	or	r24, r25
    2194:	79 f4       	brne	.+30     	; 0x21b4 <handle_methane+0x76>
		PM_HAL_meth_power_init();
    2196:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	0e 94 18 37 	call	0x6e30	; 0x6e30 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    21a0:	28 e1       	ldi	r18, 0x18	; 24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	49 ee       	ldi	r20, 0xE9	; 233
    21a6:	56 e0       	ldi	r21, 0x06	; 6
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	89 2d       	mov	r24, r9
    21ac:	9a 2d       	mov	r25, r10
    21ae:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
    21b2:	75 c0       	rjmp	.+234    	; 0x229e <handle_methane+0x160>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    21b4:	21 e0       	ldi	r18, 0x01	; 1
    21b6:	37 e0       	ldi	r19, 0x07	; 7
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	8e 2d       	mov	r24, r14
    21bc:	b6 01       	movw	r22, r12
    21be:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    21c2:	89 2b       	or	r24, r25
    21c4:	79 f4       	brne	.+30     	; 0x21e4 <handle_methane+0xa6>
		PM_HAL_meth_power_init();
    21c6:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	0e 94 18 37 	call	0x6e30	; 0x6e30 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    21d0:	29 e1       	ldi	r18, 0x19	; 25
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	45 e0       	ldi	r20, 0x05	; 5
    21d6:	57 e0       	ldi	r21, 0x07	; 7
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	89 2d       	mov	r24, r9
    21dc:	9a 2d       	mov	r25, r10
    21de:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
    21e2:	5d c0       	rjmp	.+186    	; 0x229e <handle_methane+0x160>
	}
	else if(strcmp(par, METH_READ)==0)
    21e4:	2e e1       	ldi	r18, 0x1E	; 30
    21e6:	37 e0       	ldi	r19, 0x07	; 7
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	8e 2d       	mov	r24, r14
    21ec:	b6 01       	movw	r22, r12
    21ee:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    21f2:	89 2b       	or	r24, r25
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <handle_methane+0xba>
    21f6:	4a c0       	rjmp	.+148    	; 0x228c <handle_methane+0x14e>
	{
		//Set parameters
		float vccx=0.0;
    21f8:	19 86       	std	Y+9, r1	; 0x09
    21fa:	1a 86       	std	Y+10, r1	; 0x0a
    21fc:	1b 86       	std	Y+11, r1	; 0x0b
    21fe:	1c 86       	std	Y+12, r1	; 0x0c
		float rrlx=0.0;
    2200:	1d 82       	std	Y+5, r1	; 0x05
    2202:	1e 82       	std	Y+6, r1	; 0x06
    2204:	1f 82       	std	Y+7, r1	; 0x07
    2206:	18 86       	std	Y+8, r1	; 0x08
		float ppmx=0.0;
    2208:	19 82       	std	Y+1, r1	; 0x01
    220a:	1a 82       	std	Y+2, r1	; 0x02
    220c:	1b 82       	std	Y+3, r1	; 0x03
    220e:	1c 82       	std	Y+4, r1	; 0x04
		
		EM_get_Vcc(&vccx);
    2210:	ce 01       	movw	r24, r28
    2212:	09 96       	adiw	r24, 0x09	; 9
    2214:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <EM_get_Vcc>
		EM_get_RRL(&rrlx);
    2218:	ce 01       	movw	r24, r28
    221a:	05 96       	adiw	r24, 0x05	; 5
    221c:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <EM_get_RRL>
		EM_get_ppmfactor(&ppmx);
    2220:	ce 01       	movw	r24, r28
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	0e 94 08 36 	call	0x6c10	; 0x6c10 <EM_get_ppmfactor>
		
		ADC_set_conf_parameters(vccx, rrlx, ppmx);
    2228:	e9 80       	ldd	r14, Y+1	; 0x01
    222a:	fa 80       	ldd	r15, Y+2	; 0x02
    222c:	0b 81       	ldd	r16, Y+3	; 0x03
    222e:	1c 81       	ldd	r17, Y+4	; 0x04
    2230:	2d 81       	ldd	r18, Y+5	; 0x05
    2232:	3e 81       	ldd	r19, Y+6	; 0x06
    2234:	4f 81       	ldd	r20, Y+7	; 0x07
    2236:	58 85       	ldd	r21, Y+8	; 0x08
    2238:	69 85       	ldd	r22, Y+9	; 0x09
    223a:	7a 85       	ldd	r23, Y+10	; 0x0a
    223c:	8b 85       	ldd	r24, Y+11	; 0x0b
    223e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2240:	0e 94 34 30 	call	0x6068	; 0x6068 <ADC_set_conf_parameters>
		
		
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    2244:	ce 01       	movw	r24, r28
    2246:	0d 96       	adiw	r24, 0x0d	; 13
    2248:	0e 94 33 2b 	call	0x5666	; 0x5666 <ADC_get_value>
    224c:	88 23       	and	r24, r24
    224e:	51 f0       	breq	.+20     	; 0x2264 <handle_methane+0x126>
		{
			strcpy(res, "Error when reading data");
    2250:	28 e1       	ldi	r18, 0x18	; 24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	43 e2       	ldi	r20, 0x23	; 35
    2256:	57 e0       	ldi	r21, 0x07	; 7
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	89 2d       	mov	r24, r9
    225c:	9a 2d       	mov	r25, r10
    225e:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
    2262:	1d c0       	rjmp	.+58     	; 0x229e <handle_methane+0x160>
		}else{
			sprintf(res, "PPM=%u", val);
    2264:	8e 85       	ldd	r24, Y+14	; 0x0e
    2266:	8f 93       	push	r24
    2268:	8d 85       	ldd	r24, Y+13	; 0x0d
    226a:	8f 93       	push	r24
    226c:	8b e3       	ldi	r24, 0x3B	; 59
    226e:	97 e0       	ldi	r25, 0x07	; 7
    2270:	a0 e0       	ldi	r26, 0x00	; 0
    2272:	af 93       	push	r26
    2274:	9f 93       	push	r25
    2276:	8f 93       	push	r24
    2278:	af 92       	push	r10
    227a:	9f 92       	push	r9
    227c:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	09 c0       	rjmp	.+18     	; 0x229e <handle_methane+0x160>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    228c:	26 e1       	ldi	r18, 0x16	; 22
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	42 e4       	ldi	r20, 0x42	; 66
    2292:	57 e0       	ldi	r21, 0x07	; 7
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	89 2d       	mov	r24, r9
    2298:	9a 2d       	mov	r25, r10
    229a:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
	}
	return false;
}
    229e:	8b 2d       	mov	r24, r11
    22a0:	2e 96       	adiw	r28, 0x0e	; 14
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	ff 90       	pop	r15
    22b6:	ef 90       	pop	r14
    22b8:	df 90       	pop	r13
    22ba:	cf 90       	pop	r12
    22bc:	bf 90       	pop	r11
    22be:	af 90       	pop	r10
    22c0:	9f 90       	pop	r9
    22c2:	08 95       	ret

Disassembly of section .text.handle_SCD30:

000033b8 <handle_SCD30>:

static bool handle_SCD30(const char cmd[], char res[]){
    33b8:	bf 92       	push	r11
    33ba:	cf 92       	push	r12
    33bc:	df 92       	push	r13
    33be:	ef 92       	push	r14
    33c0:	ff 92       	push	r15
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	00 d0       	rcall	.+0      	; 0x33cc <handle_SCD30+0x14>
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <handle_SCD30+0x16>
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <handle_SCD30+0x18>
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	f4 2e       	mov	r15, r20
    33d6:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    33d8:	22 e0       	ldi	r18, 0x02	; 2
    33da:	42 e4       	ldi	r20, 0x42	; 66
    33dc:	5e e0       	ldi	r21, 0x0E	; 14
    33de:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    33e2:	18 2f       	mov	r17, r24
    33e4:	88 23       	and	r24, r24
    33e6:	09 f4       	brne	.+2      	; 0x33ea <handle_SCD30+0x32>
    33e8:	62 c0       	rjmp	.+196    	; 0x34ae <handle_SCD30+0xf6>
	
	if(strcmp(par, SCD30_READ)==0){
    33ea:	62 e4       	ldi	r22, 0x42	; 66
    33ec:	7e e0       	ldi	r23, 0x0E	; 14
    33ee:	80 e8       	ldi	r24, 0x80	; 128
    33f0:	2e e1       	ldi	r18, 0x1E	; 30
    33f2:	37 e0       	ldi	r19, 0x07	; 7
    33f4:	40 e0       	ldi	r20, 0x00	; 0
    33f6:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    33fa:	89 2b       	or	r24, r25
    33fc:	09 f0       	breq	.+2      	; 0x3400 <handle_SCD30+0x48>
    33fe:	4e c0       	rjmp	.+156    	; 0x349c <handle_SCD30+0xe4>
		uint16_t co2, temp, humidity;
		if(SCD30_get_reading(&co2, &temp, &humidity)!=SCD30_STATUS_SUCCESS){
    3400:	ae 01       	movw	r20, r28
    3402:	4f 5f       	subi	r20, 0xFF	; 255
    3404:	5f 4f       	sbci	r21, 0xFF	; 255
    3406:	be 01       	movw	r22, r28
    3408:	6d 5f       	subi	r22, 0xFD	; 253
    340a:	7f 4f       	sbci	r23, 0xFF	; 255
    340c:	ce 01       	movw	r24, r28
    340e:	05 96       	adiw	r24, 0x05	; 5
    3410:	0e 94 30 33 	call	0x6660	; 0x6660 <SCD30_get_reading>
    3414:	88 23       	and	r24, r24
    3416:	51 f0       	breq	.+20     	; 0x342c <handle_SCD30+0x74>
			strcpy(res, "Error when reading data");
    3418:	28 e1       	ldi	r18, 0x18	; 24
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	43 e2       	ldi	r20, 0x23	; 35
    341e:	57 e0       	ldi	r21, 0x07	; 7
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	8f 2d       	mov	r24, r15
    3424:	90 2f       	mov	r25, r16
    3426:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
    342a:	41 c0       	rjmp	.+130    	; 0x34ae <handle_SCD30+0xf6>
		}else{
			float temp_f=(float)temp/10.00;
    342c:	6b 81       	ldd	r22, Y+3	; 0x03
    342e:	7c 81       	ldd	r23, Y+4	; 0x04
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__floatunsisf>
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	40 e2       	ldi	r20, 0x20	; 32
    343e:	51 e4       	ldi	r21, 0x41	; 65
    3440:	0e 94 4d 39 	call	0x729a	; 0x729a <__divsf3>
    3444:	e6 2e       	mov	r14, r22
    3446:	d7 2e       	mov	r13, r23
    3448:	c8 2e       	mov	r12, r24
    344a:	b9 2e       	mov	r11, r25
			float hum_f=(float)humidity/10.00;
    344c:	69 81       	ldd	r22, Y+1	; 0x01
    344e:	7a 81       	ldd	r23, Y+2	; 0x02
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__floatunsisf>
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e2       	ldi	r20, 0x20	; 32
    345e:	51 e4       	ldi	r21, 0x41	; 65
    3460:	0e 94 4d 39 	call	0x729a	; 0x729a <__divsf3>
			sprintf(res, "CO2=%u ppm, temp=%.1f C, humidity=%.1f%% RH", co2, temp_f, hum_f);
    3464:	9f 93       	push	r25
    3466:	8f 93       	push	r24
    3468:	7f 93       	push	r23
    346a:	6f 93       	push	r22
    346c:	bf 92       	push	r11
    346e:	cf 92       	push	r12
    3470:	df 92       	push	r13
    3472:	ef 92       	push	r14
    3474:	8e 81       	ldd	r24, Y+6	; 0x06
    3476:	8f 93       	push	r24
    3478:	8d 81       	ldd	r24, Y+5	; 0x05
    347a:	8f 93       	push	r24
    347c:	88 e5       	ldi	r24, 0x58	; 88
    347e:	97 e0       	ldi	r25, 0x07	; 7
    3480:	a0 e0       	ldi	r26, 0x00	; 0
    3482:	af 93       	push	r26
    3484:	9f 93       	push	r25
    3486:	8f 93       	push	r24
    3488:	0f 93       	push	r16
    348a:	ff 92       	push	r15
    348c:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sprintf>
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	09 c0       	rjmp	.+18     	; 0x34ae <handle_SCD30+0xf6>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    349c:	26 e1       	ldi	r18, 0x16	; 22
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	42 e4       	ldi	r20, 0x42	; 66
    34a2:	57 e0       	ldi	r21, 0x07	; 7
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	8f 2d       	mov	r24, r15
    34a8:	90 2f       	mov	r25, r16
    34aa:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
	}
}
    34ae:	81 2f       	mov	r24, r17
    34b0:	26 96       	adiw	r28, 0x06	; 6
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	1f 91       	pop	r17
    34c2:	0f 91       	pop	r16
    34c4:	ff 90       	pop	r15
    34c6:	ef 90       	pop	r14
    34c8:	df 90       	pop	r13
    34ca:	cf 90       	pop	r12
    34cc:	bf 90       	pop	r11
    34ce:	08 95       	ret

Disassembly of section .text.handle_pump:

00004448 <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    4448:	cf 92       	push	r12
    444a:	df 92       	push	r13
    444c:	ef 92       	push	r14
    444e:	0f 93       	push	r16
    4450:	1f 93       	push	r17
    4452:	cf 93       	push	r28
    4454:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    4456:	22 e0       	ldi	r18, 0x02	; 2
    4458:	42 e4       	ldi	r20, 0x42	; 66
    445a:	5e e0       	ldi	r21, 0x0E	; 14
    445c:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    4460:	c8 2f       	mov	r28, r24
    4462:	88 23       	and	r24, r24
    4464:	d9 f1       	breq	.+118    	; 0x44dc <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    4466:	82 e4       	ldi	r24, 0x42	; 66
    4468:	9e e0       	ldi	r25, 0x0E	; 14
    446a:	6c 01       	movw	r12, r24
    446c:	20 e8       	ldi	r18, 0x80	; 128
    446e:	e2 2e       	mov	r14, r18
    4470:	26 ee       	ldi	r18, 0xE6	; 230
    4472:	36 e0       	ldi	r19, 0x06	; 6
    4474:	40 e0       	ldi	r20, 0x00	; 0
    4476:	8e 2d       	mov	r24, r14
    4478:	b6 01       	movw	r22, r12
    447a:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    447e:	89 2b       	or	r24, r25
    4480:	71 f4       	brne	.+28     	; 0x449e <handle_pump+0x56>
		PM_HAL_BC_power_init();
    4482:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    4486:	81 e0       	ldi	r24, 0x01	; 1
    4488:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    448c:	25 e1       	ldi	r18, 0x15	; 21
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	44 e8       	ldi	r20, 0x84	; 132
    4492:	57 e0       	ldi	r21, 0x07	; 7
    4494:	60 e0       	ldi	r22, 0x00	; 0
    4496:	c8 01       	movw	r24, r16
    4498:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
    449c:	1f c0       	rjmp	.+62     	; 0x44dc <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    449e:	21 e0       	ldi	r18, 0x01	; 1
    44a0:	37 e0       	ldi	r19, 0x07	; 7
    44a2:	40 e0       	ldi	r20, 0x00	; 0
    44a4:	8e 2d       	mov	r24, r14
    44a6:	b6 01       	movw	r22, r12
    44a8:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    44ac:	89 2b       	or	r24, r25
    44ae:	71 f4       	brne	.+28     	; 0x44cc <handle_pump+0x84>
		PM_HAL_BC_power_init();
    44b0:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    44ba:	26 e1       	ldi	r18, 0x16	; 22
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	49 e9       	ldi	r20, 0x99	; 153
    44c0:	57 e0       	ldi	r21, 0x07	; 7
    44c2:	60 e0       	ldi	r22, 0x00	; 0
    44c4:	c8 01       	movw	r24, r16
    44c6:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
    44ca:	08 c0       	rjmp	.+16     	; 0x44dc <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    44cc:	26 e1       	ldi	r18, 0x16	; 22
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	42 e4       	ldi	r20, 0x42	; 66
    44d2:	57 e0       	ldi	r21, 0x07	; 7
    44d4:	60 e0       	ldi	r22, 0x00	; 0
    44d6:	c8 01       	movw	r24, r16
    44d8:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
	}
}
    44dc:	8c 2f       	mov	r24, r28
    44de:	cf 91       	pop	r28
    44e0:	1f 91       	pop	r17
    44e2:	0f 91       	pop	r16
    44e4:	ef 90       	pop	r14
    44e6:	df 90       	pop	r13
    44e8:	cf 90       	pop	r12
    44ea:	08 95       	ret

Disassembly of section .text.handle_sensor:

00004032 <handle_sensor>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_SCD30(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sensor(const char cmd[], char res[]){
    4032:	6f 92       	push	r6
    4034:	7f 92       	push	r7
    4036:	8f 92       	push	r8
    4038:	cf 92       	push	r12
    403a:	df 92       	push	r13
    403c:	ef 92       	push	r14
    403e:	0f 93       	push	r16
    4040:	1f 93       	push	r17
    4042:	cf 93       	push	r28
    4044:	3b 01       	movw	r6, r22
    4046:	88 2e       	mov	r8, r24
    4048:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    404a:	21 e0       	ldi	r18, 0x01	; 1
    404c:	42 e4       	ldi	r20, 0x42	; 66
    404e:	5e e0       	ldi	r21, 0x0E	; 14
    4050:	0e 94 57 23 	call	0x46ae	; 0x46ae <get_parameter>
    4054:	c8 2f       	mov	r28, r24
    4056:	88 23       	and	r24, r24
    4058:	e9 f1       	breq	.+122    	; 0x40d4 <handle_sensor+0xa2>
	
	if(strcmp(par, S_METH)==0){
    405a:	82 e4       	ldi	r24, 0x42	; 66
    405c:	9e e0       	ldi	r25, 0x0E	; 14
    405e:	6c 01       	movw	r12, r24
    4060:	20 e8       	ldi	r18, 0x80	; 128
    4062:	e2 2e       	mov	r14, r18
    4064:	2f ea       	ldi	r18, 0xAF	; 175
    4066:	37 e0       	ldi	r19, 0x07	; 7
    4068:	40 e0       	ldi	r20, 0x00	; 0
    406a:	8e 2d       	mov	r24, r14
    406c:	b6 01       	movw	r22, r12
    406e:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    4072:	89 2b       	or	r24, r25
    4074:	39 f4       	brne	.+14     	; 0x4084 <handle_sensor+0x52>
		return handle_methane(cmd, res);
    4076:	a8 01       	movw	r20, r16
    4078:	88 2d       	mov	r24, r8
    407a:	b3 01       	movw	r22, r6
    407c:	0e 94 9f 10 	call	0x213e	; 0x213e <handle_methane>
    4080:	c8 2f       	mov	r28, r24
    4082:	28 c0       	rjmp	.+80     	; 0x40d4 <handle_sensor+0xa2>
	}else if(strcmp(par, S_SCD30)==0){
    4084:	24 eb       	ldi	r18, 0xB4	; 180
    4086:	37 e0       	ldi	r19, 0x07	; 7
    4088:	40 e0       	ldi	r20, 0x00	; 0
    408a:	8e 2d       	mov	r24, r14
    408c:	b6 01       	movw	r22, r12
    408e:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    4092:	89 2b       	or	r24, r25
    4094:	39 f4       	brne	.+14     	; 0x40a4 <handle_sensor+0x72>
		return handle_SCD30(cmd, res);
    4096:	a8 01       	movw	r20, r16
    4098:	88 2d       	mov	r24, r8
    409a:	b3 01       	movw	r22, r6
    409c:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <handle_SCD30>
    40a0:	c8 2f       	mov	r28, r24
    40a2:	18 c0       	rjmp	.+48     	; 0x40d4 <handle_sensor+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    40a4:	2a eb       	ldi	r18, 0xBA	; 186
    40a6:	37 e0       	ldi	r19, 0x07	; 7
    40a8:	40 e0       	ldi	r20, 0x00	; 0
    40aa:	8e 2d       	mov	r24, r14
    40ac:	b6 01       	movw	r22, r12
    40ae:	0e 94 55 30 	call	0x60aa	; 0x60aa <strcmp>
    40b2:	89 2b       	or	r24, r25
    40b4:	39 f4       	brne	.+14     	; 0x40c4 <handle_sensor+0x92>
		return handle_pump(cmd, res);
    40b6:	a8 01       	movw	r20, r16
    40b8:	88 2d       	mov	r24, r8
    40ba:	b3 01       	movw	r22, r6
    40bc:	0e 94 24 22 	call	0x4448	; 0x4448 <handle_pump>
    40c0:	c8 2f       	mov	r28, r24
    40c2:	08 c0       	rjmp	.+16     	; 0x40d4 <handle_sensor+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    40c4:	26 e1       	ldi	r18, 0x16	; 22
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	42 e4       	ldi	r20, 0x42	; 66
    40ca:	57 e0       	ldi	r21, 0x07	; 7
    40cc:	60 e0       	ldi	r22, 0x00	; 0
    40ce:	c8 01       	movw	r24, r16
    40d0:	0e 94 49 33 	call	0x6692	; 0x6692 <memcpy>
		return true;
	}
}
    40d4:	8c 2f       	mov	r24, r28
    40d6:	cf 91       	pop	r28
    40d8:	1f 91       	pop	r17
    40da:	0f 91       	pop	r16
    40dc:	ef 90       	pop	r14
    40de:	df 90       	pop	r13
    40e0:	cf 90       	pop	r12
    40e2:	8f 90       	pop	r8
    40e4:	7f 90       	pop	r7
    40e6:	6f 90       	pop	r6
    40e8:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

000069a2 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    69a2:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    69a6:	0e 94 e5 37 	call	0x6fca	; 0x6fca <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    69aa:	81 e0       	ldi	r24, 0x01	; 1
    69ac:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    69b0:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    69b4:	81 e0       	ldi	r24, 0x01	; 1
    69b6:	0e 94 22 37 	call	0x6e44	; 0x6e44 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    69ba:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    69be:	88 23       	and	r24, r24
    69c0:	11 f0       	breq	.+4      	; 0x69c6 <init_methane_SCD30+0x24>
    69c2:	80 e0       	ldi	r24, 0x00	; 0
    69c4:	08 95       	ret
	return true;
    69c6:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    69c8:	08 95       	ret

Disassembly of section .text.count_parameters:

000057ba <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    57ba:	6f 92       	push	r6
    57bc:	7f 92       	push	r7
    57be:	8f 92       	push	r8
    57c0:	cf 92       	push	r12
    57c2:	df 92       	push	r13
    57c4:	ef 92       	push	r14
    57c6:	3b 01       	movw	r6, r22
    57c8:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    57ca:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    57ce:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    57d0:	20 e0       	ldi	r18, 0x00	; 0
    57d2:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    57d4:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    57d6:	10 c0       	rjmp	.+32     	; 0x57f8 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    57d8:	e8 2c       	mov	r14, r8
    57da:	63 01       	movw	r12, r6
    57dc:	c2 0e       	add	r12, r18
    57de:	d3 1e       	adc	r13, r19
    57e0:	e1 1c       	adc	r14, r1
    57e2:	37 fd       	sbrc	r19, 7
    57e4:	ea 94       	dec	r14
    57e6:	f6 01       	movw	r30, r12
    57e8:	94 91       	lpm	r25, Z
    57ea:	e7 fc       	sbrc	r14, 7
    57ec:	90 81       	ld	r25, Z
    57ee:	90 32       	cpi	r25, 0x20	; 32
    57f0:	09 f4       	brne	.+2      	; 0x57f4 <count_parameters+0x3a>
			cnt++;
    57f2:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    57f4:	2f 5f       	subi	r18, 0xFF	; 255
    57f6:	3f 4f       	sbci	r19, 0xFF	; 255
    57f8:	26 17       	cp	r18, r22
    57fa:	37 07       	cpc	r19, r23
    57fc:	68 f3       	brcs	.-38     	; 0x57d8 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    57fe:	ef 90       	pop	r14
    5800:	df 90       	pop	r13
    5802:	cf 90       	pop	r12
    5804:	8f 90       	pop	r8
    5806:	7f 90       	pop	r7
    5808:	6f 90       	pop	r6
    580a:	08 95       	ret

Disassembly of section .text.par_index:

00004efa <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    4efa:	cf 92       	push	r12
    4efc:	df 92       	push	r13
    4efe:	ef 92       	push	r14
    4f00:	0f 93       	push	r16
    4f02:	1f 93       	push	r17
    4f04:	cf 93       	push	r28
    4f06:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4f08:	44 23       	and	r20, r20
    4f0a:	29 f1       	breq	.+74     	; 0x4f56 <par_index+0x5c>
    4f0c:	04 2f       	mov	r16, r20
    4f0e:	6b 01       	movw	r12, r22
    4f10:	e8 2e       	mov	r14, r24
    4f12:	c0 e0       	ldi	r28, 0x00	; 0
    4f14:	d0 e0       	ldi	r29, 0x00	; 0
    4f16:	10 e0       	ldi	r17, 0x00	; 0
    4f18:	14 c0       	rjmp	.+40     	; 0x4f42 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    4f1a:	ae 2d       	mov	r26, r14
    4f1c:	c6 01       	movw	r24, r12
    4f1e:	8c 0f       	add	r24, r28
    4f20:	9d 1f       	adc	r25, r29
    4f22:	a1 1d       	adc	r26, r1
    4f24:	d7 fd       	sbrc	r29, 7
    4f26:	aa 95       	dec	r26
    4f28:	fc 01       	movw	r30, r24
    4f2a:	84 91       	lpm	r24, Z
    4f2c:	a7 fd       	sbrc	r26, 7
    4f2e:	80 81       	ld	r24, Z
    4f30:	80 32       	cpi	r24, 0x20	; 32
    4f32:	31 f4       	brne	.+12     	; 0x4f40 <par_index+0x46>
			cnt++;
    4f34:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    4f36:	01 13       	cpse	r16, r17
    4f38:	03 c0       	rjmp	.+6      	; 0x4f40 <par_index+0x46>
				return i+1;
    4f3a:	ce 01       	movw	r24, r28
    4f3c:	01 96       	adiw	r24, 0x01	; 1
    4f3e:	0d c0       	rjmp	.+26     	; 0x4f5a <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    4f40:	21 96       	adiw	r28, 0x01	; 1
    4f42:	8e 2d       	mov	r24, r14
    4f44:	b6 01       	movw	r22, r12
    4f46:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    4f4a:	c8 17       	cp	r28, r24
    4f4c:	d9 07       	cpc	r29, r25
    4f4e:	28 f3       	brcs	.-54     	; 0x4f1a <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    4f50:	80 e0       	ldi	r24, 0x00	; 0
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	02 c0       	rjmp	.+4      	; 0x4f5a <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4f56:	80 e0       	ldi	r24, 0x00	; 0
    4f58:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    4f5a:	df 91       	pop	r29
    4f5c:	cf 91       	pop	r28
    4f5e:	1f 91       	pop	r17
    4f60:	0f 91       	pop	r16
    4f62:	ef 90       	pop	r14
    4f64:	df 90       	pop	r13
    4f66:	cf 90       	pop	r12
    4f68:	08 95       	ret

Disassembly of section .text.get_parameter:

000046ae <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    46ae:	8f 92       	push	r8
    46b0:	9f 92       	push	r9
    46b2:	af 92       	push	r10
    46b4:	cf 92       	push	r12
    46b6:	df 92       	push	r13
    46b8:	ef 92       	push	r14
    46ba:	ff 92       	push	r15
    46bc:	0f 93       	push	r16
    46be:	1f 93       	push	r17
    46c0:	cf 93       	push	r28
    46c2:	df 93       	push	r29
    46c4:	6b 01       	movw	r12, r22
    46c6:	e8 2e       	mov	r14, r24
    46c8:	ea 01       	movw	r28, r20
    46ca:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    46cc:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <count_parameters>
	if(pars<parNo) return false;
    46d0:	8f 15       	cp	r24, r15
    46d2:	58 f1       	brcs	.+86     	; 0x472a <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    46d4:	8e 2d       	mov	r24, r14
    46d6:	b6 01       	movw	r22, r12
    46d8:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    46dc:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    46de:	4f 2d       	mov	r20, r15
    46e0:	8e 2d       	mov	r24, r14
    46e2:	b6 01       	movw	r22, r12
    46e4:	0e 94 7d 27 	call	0x4efa	; 0x4efa <par_index>
	uint8_t parLen=0;
    46e8:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    46ea:	15 c0       	rjmp	.+42     	; 0x4716 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    46ec:	46 01       	movw	r8, r12
    46ee:	ae 2c       	mov	r10, r14
    46f0:	82 0e       	add	r8, r18
    46f2:	93 1e       	adc	r9, r19
    46f4:	a1 1c       	adc	r10, r1
    46f6:	37 fd       	sbrc	r19, 7
    46f8:	aa 94       	dec	r10
    46fa:	4a 2d       	mov	r20, r10
    46fc:	94 01       	movw	r18, r8
    46fe:	f4 01       	movw	r30, r8
    4700:	24 91       	lpm	r18, Z
    4702:	47 fd       	sbrc	r20, 7
    4704:	20 81       	ld	r18, Z
    4706:	20 32       	cpi	r18, 0x20	; 32
    4708:	59 f0       	breq	.+22     	; 0x4720 <get_parameter+0x72>
		par[parLen++]=src[i];
    470a:	fe 01       	movw	r30, r28
    470c:	e9 0f       	add	r30, r25
    470e:	f1 1d       	adc	r31, r1
    4710:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    4712:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    4714:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    4716:	28 2f       	mov	r18, r24
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	20 17       	cp	r18, r16
    471c:	31 07       	cpc	r19, r17
    471e:	30 f3       	brcs	.-52     	; 0x46ec <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    4720:	c9 0f       	add	r28, r25
    4722:	d1 1d       	adc	r29, r1
    4724:	18 82       	st	Y, r1
	
	return true;
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	01 c0       	rjmp	.+2      	; 0x472c <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    472a:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    472c:	df 91       	pop	r29
    472e:	cf 91       	pop	r28
    4730:	1f 91       	pop	r17
    4732:	0f 91       	pop	r16
    4734:	ff 90       	pop	r15
    4736:	ef 90       	pop	r14
    4738:	df 90       	pop	r13
    473a:	cf 90       	pop	r12
    473c:	af 90       	pop	r10
    473e:	9f 90       	pop	r9
    4740:	8f 90       	pop	r8
    4742:	08 95       	ret

Disassembly of section .text.decode_stage_response:

00006df0 <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    6df0:	88 23       	and	r24, r24
    6df2:	19 f0       	breq	.+6      	; 0x6dfa <decode_stage_response+0xa>
    6df4:	81 30       	cpi	r24, 0x01	; 1
    6df6:	29 f0       	breq	.+10     	; 0x6e02 <decode_stage_response+0x12>
    6df8:	02 c0       	rjmp	.+4      	; 0x6dfe <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    6dfa:	81 e1       	ldi	r24, 0x11	; 17
    6dfc:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    6dfe:	87 e1       	ldi	r24, 0x17	; 23
    6e00:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    6e02:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6e04:	08 95       	ret

Disassembly of section .text.decode_join_response:

00006d16 <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    6d16:	82 30       	cpi	r24, 0x02	; 2
    6d18:	51 f0       	breq	.+20     	; 0x6d2e <decode_join_response+0x18>
    6d1a:	83 30       	cpi	r24, 0x03	; 3
    6d1c:	21 f0       	breq	.+8      	; 0x6d26 <decode_join_response+0x10>
    6d1e:	81 11       	cpse	r24, r1
    6d20:	04 c0       	rjmp	.+8      	; 0x6d2a <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    6d22:	83 e0       	ldi	r24, 0x03	; 3
    6d24:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    6d26:	85 e0       	ldi	r24, 0x05	; 5
    6d28:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    6d2a:	87 e1       	ldi	r24, 0x17	; 23
    6d2c:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    6d2e:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    6d30:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

00006a3c <decode_header_tail_response>:
			return MAINPG_FATAL_ERROR;
	}
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    6a3c:	82 30       	cpi	r24, 0x02	; 2
    6a3e:	51 f0       	breq	.+20     	; 0x6a54 <decode_header_tail_response+0x18>
    6a40:	18 f4       	brcc	.+6      	; 0x6a48 <decode_header_tail_response+0xc>
    6a42:	88 23       	and	r24, r24
    6a44:	59 f0       	breq	.+22     	; 0x6a5c <decode_header_tail_response+0x20>
    6a46:	08 c0       	rjmp	.+16     	; 0x6a58 <decode_header_tail_response+0x1c>
    6a48:	84 30       	cpi	r24, 0x04	; 4
    6a4a:	41 f0       	breq	.+16     	; 0x6a5c <decode_header_tail_response+0x20>
    6a4c:	85 30       	cpi	r24, 0x05	; 5
    6a4e:	21 f4       	brne	.+8      	; 0x6a58 <decode_header_tail_response+0x1c>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		case LM_STATUS_INV_DATA_LEN:
			return MAINPG_PAYLOAD_INV_LEN;
    6a50:	86 e1       	ldi	r24, 0x16	; 22
    6a52:	08 95       	ret
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    6a54:	84 2f       	mov	r24, r20
    6a56:	08 95       	ret
			
		case LM_STATUS_INV_DATA_LEN:
			return MAINPG_PAYLOAD_INV_LEN;
			
		default:
			return MAINPG_FATAL_ERROR;
    6a58:	87 e1       	ldi	r24, 0x17	; 23
    6a5a:	08 95       	ret

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
    6a5c:	86 2f       	mov	r24, r22
			return MAINPG_PAYLOAD_INV_LEN;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6a5e:	08 95       	ret

Disassembly of section .text.read_eeprom:

0000555c <read_eeprom>:
			return MAINPG_FATAL_ERROR;
	}
}

static bool read_eeprom(){
	EM_get_deveui(deveui);
    555c:	87 e6       	ldi	r24, 0x67	; 103
    555e:	9e e0       	ldi	r25, 0x0E	; 14
    5560:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <EM_get_deveui>
	EM_get_appeui(appeui);
    5564:	86 e5       	ldi	r24, 0x56	; 86
    5566:	9e e0       	ldi	r25, 0x0E	; 14
    5568:	0e 94 92 33 	call	0x6724	; 0x6724 <EM_get_appeui>
	EM_get_appkey(appkey);
    556c:	81 e2       	ldi	r24, 0x21	; 33
    556e:	9e e0       	ldi	r25, 0x0E	; 14
    5570:	0e 94 aa 33 	call	0x6754	; 0x6754 <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    5574:	6b e4       	ldi	r22, 0x4B	; 75
    5576:	86 ed       	ldi	r24, 0xD6	; 214
    5578:	9d e0       	ldi	r25, 0x0D	; 13
    557a:	0e 94 d5 37 	call	0x6faa	; 0x6faa <EM_get_collections>
	EM_get_Vcc(&vccx);
    557e:	83 eb       	ldi	r24, 0xB3	; 179
    5580:	9e e0       	ldi	r25, 0x0E	; 14
    5582:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    5586:	8f ea       	ldi	r24, 0xAF	; 175
    5588:	9e e0       	ldi	r25, 0x0E	; 14
    558a:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    558e:	8b ea       	ldi	r24, 0xAB	; 171
    5590:	9e e0       	ldi	r25, 0x0E	; 14
    5592:	0e 94 08 36 	call	0x6c10	; 0x6c10 <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    5596:	0e 94 91 38 	call	0x7122	; 0x7122 <EM_get_heat_up_time>
    559a:	80 93 ef 0e 	sts	0x0EEF, r24	; 0x800eef <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    559e:	0e 94 9d 38 	call	0x713a	; 0x713a <EM_get_air_pump_time>
    55a2:	90 93 da 0e 	sts	0x0EDA, r25	; 0x800eda <airPumpTime+0x1>
    55a6:	80 93 d9 0e 	sts	0x0ED9, r24	; 0x800ed9 <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    55aa:	0e 94 a9 38 	call	0x7152	; 0x7152 <EM_get_sp_interval>
    55ae:	80 93 ee 0e 	sts	0x0EEE, r24	; 0x800eee <samplingProcessInterval>
	return true;
}
    55b2:	81 e0       	ldi	r24, 0x01	; 1
    55b4:	08 95       	ret

Disassembly of section .text.join_lora:

00006f64 <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    6f64:	41 e2       	ldi	r20, 0x21	; 33
    6f66:	5e e0       	ldi	r21, 0x0E	; 14
    6f68:	66 e5       	ldi	r22, 0x56	; 86
    6f6a:	7e e0       	ldi	r23, 0x0E	; 14
    6f6c:	87 e6       	ldi	r24, 0x67	; 103
    6f6e:	9e e0       	ldi	r25, 0x0E	; 14
    6f70:	0e 94 62 39 	call	0x72c4	; 0x72c4 <LM_join_network>
}
    6f74:	08 95       	ret

Disassembly of section .text.set_wakeup:

00007224 <set_wakeup>:
			return MAINPG_FATAL_ERROR;
	}
}

static RTC_STATUS set_wakeup(){
	return RTC_set_wake_up_interrupt(samplingProcessInterval);
    7224:	80 91 ee 0e 	lds	r24, 0x0EEE	; 0x800eee <samplingProcessInterval>
    7228:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <RTC_set_wake_up_interrupt>
	//return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
}
    722c:	08 95       	ret

Disassembly of section .text.send_msg:

000072e2 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    72e2:	0e 94 76 22 	call	0x44ec	; 0x44ec <uart1_hal_send_string>
    72e6:	08 95       	ret

Disassembly of section .text.stage_0:

00003170 <stage_0>:


/************************************************************************/
/* Stage 0                                                              */
/************************************************************************/
static STAGE_STATUS stage_0(){
    3170:	cf 93       	push	r28
    3172:	df 93       	push	r29
	RTC_STATUS rtcStatus;
	bool res;
	
	while(1){
		switch(state_s0){
    3174:	80 91 f4 0e 	lds	r24, 0x0EF4	; 0x800ef4 <state_s0>
    3178:	82 30       	cpi	r24, 0x02	; 2
    317a:	71 f1       	breq	.+92     	; 0x31d8 <stage_0+0x68>
    317c:	28 f4       	brcc	.+10     	; 0x3188 <stage_0+0x18>
    317e:	88 23       	and	r24, r24
    3180:	59 f0       	breq	.+22     	; 0x3198 <stage_0+0x28>
    3182:	81 30       	cpi	r24, 0x01	; 1
    3184:	b1 f1       	breq	.+108    	; 0x31f2 <stage_0+0x82>
    3186:	f6 cf       	rjmp	.-20     	; 0x3174 <stage_0+0x4>
    3188:	84 30       	cpi	r24, 0x04	; 4
    318a:	09 f4       	brne	.+2      	; 0x318e <stage_0+0x1e>
    318c:	71 c0       	rjmp	.+226    	; 0x3270 <stage_0+0x100>
    318e:	d8 f1       	brcs	.+118    	; 0x3206 <stage_0+0x96>
    3190:	85 30       	cpi	r24, 0x05	; 5
    3192:	09 f4       	brne	.+2      	; 0x3196 <stage_0+0x26>
    3194:	44 c0       	rjmp	.+136    	; 0x321e <stage_0+0xae>
    3196:	ee cf       	rjmp	.-36     	; 0x3174 <stage_0+0x4>
			case STAGE_INIT:
				print_debug("State: S0 INIT");
    3198:	66 e6       	ldi	r22, 0x66	; 102
    319a:	72 e0       	ldi	r23, 0x02	; 2
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				SCD30_init_c02_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    31a2:	c6 ed       	ldi	r28, 0xD6	; 214
    31a4:	dd e0       	ldi	r29, 0x0D	; 13
    31a6:	68 81       	ld	r22, Y
    31a8:	4c e5       	ldi	r20, 0x5C	; 92
    31aa:	5b e0       	ldi	r21, 0x0B	; 11
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	9b 81       	ldd	r25, Y+3	; 0x03
    31b0:	0e 94 97 37 	call	0x6f2e	; 0x6f2e <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S0_TEMP].samplingInterval, cols[S0_TEMP].samplings, temp_data);
    31b4:	6d 81       	ldd	r22, Y+5	; 0x05
    31b6:	44 e9       	ldi	r20, 0x94	; 148
    31b8:	5a e0       	ldi	r21, 0x0A	; 10
    31ba:	8f 81       	ldd	r24, Y+7	; 0x07
    31bc:	98 85       	ldd	r25, Y+8	; 0x08
    31be:	0e 94 a0 37 	call	0x6f40	; 0x6f40 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S0_HUM].samplingInterval, cols[S0_HUM].samplings, hum_data);
    31c2:	6a 85       	ldd	r22, Y+10	; 0x0a
    31c4:	4c ec       	ldi	r20, 0xCC	; 204
    31c6:	59 e0       	ldi	r21, 0x09	; 9
    31c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    31ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    31cc:	0e 94 a9 37 	call	0x6f52	; 0x6f52 <SCD30_init_humidity_sampling>
				state_s0=STAGE_START;
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    31d6:	ce cf       	rjmp	.-100    	; 0x3174 <stage_0+0x4>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    31d8:	80 91 ef 0e 	lds	r24, 0x0EEF	; 0x800eef <methHeatUpTime>
    31dc:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <ADC_meth_sens_power_on>
				res=SCD30_start_sampling();
    31e0:	0e 94 f5 29 	call	0x53ea	; 0x53ea <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    31e4:	88 23       	and	r24, r24
    31e6:	09 f4       	brne	.+2      	; 0x31ea <stage_0+0x7a>
    31e8:	4c c0       	rjmp	.+152    	; 0x3282 <stage_0+0x112>
				
				state_s0=STAGE_GET_TIME;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    31f0:	c1 cf       	rjmp	.-126    	; 0x3174 <stage_0+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    31f2:	84 e9       	ldi	r24, 0x94	; 148
    31f4:	9e e0       	ldi	r25, 0x0E	; 14
    31f6:	0e 94 e5 16 	call	0x2dca	; 0x2dca <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    31fa:	81 11       	cpse	r24, r1
    31fc:	44 c0       	rjmp	.+136    	; 0x3286 <stage_0+0x116>
				state_s0=STAGE_WAIT;
    31fe:	83 e0       	ldi	r24, 0x03	; 3
    3200:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    3204:	b7 cf       	rjmp	.-146    	; 0x3174 <stage_0+0x4>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    3206:	0e 94 85 37 	call	0x6f0a	; 0x6f0a <ADC_meth_sens_ready>
    320a:	88 23       	and	r24, r24
    320c:	f1 f1       	breq	.+124    	; 0x328a <stage_0+0x11a>
    320e:	0e 94 b1 32 	call	0x6562	; 0x6562 <SCD30_is_sampling_done>
    3212:	88 23       	and	r24, r24
    3214:	e1 f1       	breq	.+120    	; 0x328e <stage_0+0x11e>
				state_s0=STAGE_UPDATE_MRPP;
    3216:	85 e0       	ldi	r24, 0x05	; 5
    3218:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    321c:	ab cf       	rjmp	.-170    	; 0x3174 <stage_0+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    321e:	27 eb       	ldi	r18, 0xB7	; 183
    3220:	3e e0       	ldi	r19, 0x0E	; 14
    3222:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    3226:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    322a:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    322e:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    3232:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    3236:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    323a:	0e 94 4b 19 	call	0x3296	; 0x3296 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    323e:	4c e5       	ldi	r20, 0x5C	; 92
    3240:	5b e0       	ldi	r21, 0x0B	; 11
    3242:	67 eb       	ldi	r22, 0xB7	; 183
    3244:	7e e0       	ldi	r23, 0x0E	; 14
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S0_ID_TEMP, ts, temp_data);
    324c:	44 e9       	ldi	r20, 0x94	; 148
    324e:	5a e0       	ldi	r21, 0x0A	; 10
    3250:	67 eb       	ldi	r22, 0xB7	; 183
    3252:	7e e0       	ldi	r23, 0x0E	; 14
    3254:	82 e0       	ldi	r24, 0x02	; 2
    3256:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S0_ID_HUM, ts, hum_data);
    325a:	4c ec       	ldi	r20, 0xCC	; 204
    325c:	59 e0       	ldi	r21, 0x09	; 9
    325e:	67 eb       	ldi	r22, 0xB7	; 183
    3260:	7e e0       	ldi	r23, 0x0E	; 14
    3262:	83 e0       	ldi	r24, 0x03	; 3
    3264:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    3268:	84 e0       	ldi	r24, 0x04	; 4
    326a:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    326e:	82 cf       	rjmp	.-252    	; 0x3174 <stage_0+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S0 DE-INIT");
    3270:	65 e7       	ldi	r22, 0x75	; 117
    3272:	72 e0       	ldi	r23, 0x02	; 2
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				SCD30_deinit_sampling();
    327a:	0e 94 0d 39 	call	0x721a	; 0x721a <SCD30_deinit_sampling>
				return STAGE_DONE;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	07 c0       	rjmp	.+14     	; 0x3290 <stage_0+0x120>
			break;
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    3282:	82 e0       	ldi	r24, 0x02	; 2
    3284:	05 c0       	rjmp	.+10     	; 0x3290 <stage_0+0x120>
				state_s0=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    3286:	82 e0       	ldi	r24, 0x02	; 2
    3288:	03 c0       	rjmp	.+6      	; 0x3290 <stage_0+0x120>
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	01 c0       	rjmp	.+2      	; 0x3290 <stage_0+0x120>
    328e:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	08 95       	ret

Disassembly of section .text.stage_1:

00002b2c <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	bool res;
	
	while(1){
		switch(state_s1){
    2b30:	80 91 f3 0e 	lds	r24, 0x0EF3	; 0x800ef3 <state_s1>
    2b34:	82 30       	cpi	r24, 0x02	; 2
    2b36:	c9 f1       	breq	.+114    	; 0x2baa <stage_1+0x7e>
    2b38:	30 f4       	brcc	.+12     	; 0x2b46 <stage_1+0x1a>
    2b3a:	88 23       	and	r24, r24
    2b3c:	69 f0       	breq	.+26     	; 0x2b58 <stage_1+0x2c>
    2b3e:	81 30       	cpi	r24, 0x01	; 1
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <stage_1+0x18>
    2b42:	3e c0       	rjmp	.+124    	; 0x2bc0 <stage_1+0x94>
    2b44:	f5 cf       	rjmp	.-22     	; 0x2b30 <stage_1+0x4>
    2b46:	84 30       	cpi	r24, 0x04	; 4
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <stage_1+0x20>
    2b4a:	82 c0       	rjmp	.+260    	; 0x2c50 <stage_1+0x124>
    2b4c:	08 f4       	brcc	.+2      	; 0x2b50 <stage_1+0x24>
    2b4e:	42 c0       	rjmp	.+132    	; 0x2bd4 <stage_1+0xa8>
    2b50:	85 30       	cpi	r24, 0x05	; 5
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <stage_1+0x2a>
    2b54:	4d c0       	rjmp	.+154    	; 0x2bf0 <stage_1+0xc4>
    2b56:	ec cf       	rjmp	.-40     	; 0x2b30 <stage_1+0x4>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
    2b58:	67 e8       	ldi	r22, 0x87	; 135
    2b5a:	72 e0       	ldi	r23, 0x02	; 2
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				SCD30_init_c02_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    2b62:	c6 ed       	ldi	r28, 0xD6	; 214
    2b64:	dd e0       	ldi	r29, 0x0D	; 13
    2b66:	6c 89       	ldd	r22, Y+20	; 0x14
    2b68:	4c e5       	ldi	r20, 0x5C	; 92
    2b6a:	5b e0       	ldi	r21, 0x0B	; 11
    2b6c:	8e 89       	ldd	r24, Y+22	; 0x16
    2b6e:	9f 89       	ldd	r25, Y+23	; 0x17
    2b70:	0e 94 97 37 	call	0x6f2e	; 0x6f2e <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S1_TEMP].samplingInterval, cols[S1_TEMP].samplings, temp_data);
    2b74:	69 8d       	ldd	r22, Y+25	; 0x19
    2b76:	44 e9       	ldi	r20, 0x94	; 148
    2b78:	5a e0       	ldi	r21, 0x0A	; 10
    2b7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b7e:	0e 94 a0 37 	call	0x6f40	; 0x6f40 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S1_HUM].samplingInterval, cols[S1_HUM].samplings, hum_data);
    2b82:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2b84:	4c ec       	ldi	r20, 0xCC	; 204
    2b86:	59 e0       	ldi	r21, 0x09	; 9
    2b88:	88 a1       	ldd	r24, Y+32	; 0x20
    2b8a:	99 a1       	ldd	r25, Y+33	; 0x21
    2b8c:	0e 94 a9 37 	call	0x6f52	; 0x6f52 <SCD30_init_humidity_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    2b90:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b92:	78 89       	ldd	r23, Y+16	; 0x10
    2b94:	44 e0       	ldi	r20, 0x04	; 4
    2b96:	59 e0       	ldi	r21, 0x09	; 9
    2b98:	89 89       	ldd	r24, Y+17	; 0x11
    2b9a:	0e 94 61 29 	call	0x52c2	; 0x52c2 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2b9e:	81 11       	cpse	r24, r1
    2ba0:	62 c0       	rjmp	.+196    	; 0x2c66 <stage_1+0x13a>
				
				state_s1=STAGE_START;
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2ba8:	c3 cf       	rjmp	.-122    	; 0x2b30 <stage_1+0x4>
			
			case STAGE_START:
				ADC_start_sampling();
    2baa:	0e 94 fe 38 	call	0x71fc	; 0x71fc <ADC_start_sampling>
				res=SCD30_start_sampling();
    2bae:	0e 94 f5 29 	call	0x53ea	; 0x53ea <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    2bb2:	88 23       	and	r24, r24
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <stage_1+0x8c>
    2bb6:	59 c0       	rjmp	.+178    	; 0x2c6a <stage_1+0x13e>
				
				state_s1=STAGE_GET_TIME;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2bbe:	b8 cf       	rjmp	.-144    	; 0x2b30 <stage_1+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    2bc0:	84 e9       	ldi	r24, 0x94	; 148
    2bc2:	9e e0       	ldi	r25, 0x0E	; 14
    2bc4:	0e 94 e5 16 	call	0x2dca	; 0x2dca <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2bc8:	81 11       	cpse	r24, r1
    2bca:	51 c0       	rjmp	.+162    	; 0x2c6e <stage_1+0x142>
				state_s1=STAGE_WAIT;
    2bcc:	83 e0       	ldi	r24, 0x03	; 3
    2bce:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2bd2:	ae cf       	rjmp	.-164    	; 0x2b30 <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2bd4:	0e 94 b1 32 	call	0x6562	; 0x6562 <SCD30_is_sampling_done>
    2bd8:	88 23       	and	r24, r24
    2bda:	09 f4       	brne	.+2      	; 0x2bde <stage_1+0xb2>
    2bdc:	4a c0       	rjmp	.+148    	; 0x2c72 <stage_1+0x146>
    2bde:	0e 94 53 36 	call	0x6ca6	; 0x6ca6 <ADC_is_sampling_done>
    2be2:	88 23       	and	r24, r24
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <stage_1+0xbc>
    2be6:	47 c0       	rjmp	.+142    	; 0x2c76 <stage_1+0x14a>
				state_s1=STAGE_UPDATE_MRPP;
    2be8:	85 e0       	ldi	r24, 0x05	; 5
    2bea:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2bee:	a0 cf       	rjmp	.-192    	; 0x2b30 <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2bf0:	27 eb       	ldi	r18, 0xB7	; 183
    2bf2:	3e e0       	ldi	r19, 0x0E	; 14
    2bf4:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    2bf8:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    2bfc:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    2c00:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    2c04:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    2c08:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    2c0c:	0e 94 4b 19 	call	0x3296	; 0x3296 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    2c10:	44 e0       	ldi	r20, 0x04	; 4
    2c12:	59 e0       	ldi	r21, 0x09	; 9
    2c14:	67 eb       	ldi	r22, 0xB7	; 183
    2c16:	7e e0       	ldi	r23, 0x0E	; 14
    2c18:	84 e0       	ldi	r24, 0x04	; 4
    2c1a:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    2c1e:	4c e5       	ldi	r20, 0x5C	; 92
    2c20:	5b e0       	ldi	r21, 0x0B	; 11
    2c22:	67 eb       	ldi	r22, 0xB7	; 183
    2c24:	7e e0       	ldi	r23, 0x0E	; 14
    2c26:	85 e0       	ldi	r24, 0x05	; 5
    2c28:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_TEMP, ts, temp_data);
    2c2c:	44 e9       	ldi	r20, 0x94	; 148
    2c2e:	5a e0       	ldi	r21, 0x0A	; 10
    2c30:	67 eb       	ldi	r22, 0xB7	; 183
    2c32:	7e e0       	ldi	r23, 0x0E	; 14
    2c34:	86 e0       	ldi	r24, 0x06	; 6
    2c36:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_HUM, ts, hum_data);
    2c3a:	4c ec       	ldi	r20, 0xCC	; 204
    2c3c:	59 e0       	ldi	r21, 0x09	; 9
    2c3e:	67 eb       	ldi	r22, 0xB7	; 183
    2c40:	7e e0       	ldi	r23, 0x0E	; 14
    2c42:	87 e0       	ldi	r24, 0x07	; 7
    2c44:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				
				state_s1=STAGE_DEINIT;
    2c48:	84 e0       	ldi	r24, 0x04	; 4
    2c4a:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2c4e:	70 cf       	rjmp	.-288    	; 0x2b30 <stage_1+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S1 DE-INIT");
    2c50:	66 e9       	ldi	r22, 0x96	; 150
    2c52:	72 e0       	ldi	r23, 0x02	; 2
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				SCD30_deinit_sampling();
    2c5a:	0e 94 0d 39 	call	0x721a	; 0x721a <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2c5e:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <ADC_deinit_sampling>
				return STAGE_DONE;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	09 c0       	rjmp	.+18     	; 0x2c78 <stage_1+0x14c>
				SCD30_init_c02_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				SCD30_init_temp_sampling(cols[S1_TEMP].samplingInterval, cols[S1_TEMP].samplings, temp_data);
				SCD30_init_humidity_sampling(cols[S1_HUM].samplingInterval, cols[S1_HUM].samplings, hum_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2c66:	83 e0       	ldi	r24, 0x03	; 3
    2c68:	07 c0       	rjmp	.+14     	; 0x2c78 <stage_1+0x14c>
			break;
			
			case STAGE_START:
				ADC_start_sampling();
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	05 c0       	rjmp	.+10     	; 0x2c78 <stage_1+0x14c>
				state_s1=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2c6e:	82 e0       	ldi	r24, 0x02	; 2
    2c70:	03 c0       	rjmp	.+6      	; 0x2c78 <stage_1+0x14c>
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	01 c0       	rjmp	.+2      	; 0x2c78 <stage_1+0x14c>
    2c76:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2c78:	df 91       	pop	r29
    2c7a:	cf 91       	pop	r28
    2c7c:	08 95       	ret

Disassembly of section .text.stage_2:

00002438 <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	bool res;

	while(1){
		switch(state_s2){
    243c:	80 91 f2 0e 	lds	r24, 0x0EF2	; 0x800ef2 <state_s2>
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	c9 f1       	breq	.+114    	; 0x24b6 <stage_2+0x7e>
    2444:	30 f4       	brcc	.+12     	; 0x2452 <stage_2+0x1a>
    2446:	88 23       	and	r24, r24
    2448:	69 f0       	breq	.+26     	; 0x2464 <stage_2+0x2c>
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	09 f4       	brne	.+2      	; 0x2450 <stage_2+0x18>
    244e:	44 c0       	rjmp	.+136    	; 0x24d8 <stage_2+0xa0>
    2450:	f5 cf       	rjmp	.-22     	; 0x243c <stage_2+0x4>
    2452:	84 30       	cpi	r24, 0x04	; 4
    2454:	09 f4       	brne	.+2      	; 0x2458 <stage_2+0x20>
    2456:	8d c0       	rjmp	.+282    	; 0x2572 <stage_2+0x13a>
    2458:	08 f4       	brcc	.+2      	; 0x245c <stage_2+0x24>
    245a:	48 c0       	rjmp	.+144    	; 0x24ec <stage_2+0xb4>
    245c:	85 30       	cpi	r24, 0x05	; 5
    245e:	09 f4       	brne	.+2      	; 0x2462 <stage_2+0x2a>
    2460:	58 c0       	rjmp	.+176    	; 0x2512 <stage_2+0xda>
    2462:	ec cf       	rjmp	.-40     	; 0x243c <stage_2+0x4>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
    2464:	68 ea       	ldi	r22, 0xA8	; 168
    2466:	72 e0       	ldi	r23, 0x02	; 2
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				SCD30_init_c02_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    246e:	c6 ed       	ldi	r28, 0xD6	; 214
    2470:	dd e0       	ldi	r29, 0x0D	; 13
    2472:	68 a5       	ldd	r22, Y+40	; 0x28
    2474:	4c e5       	ldi	r20, 0x5C	; 92
    2476:	5b e0       	ldi	r21, 0x0B	; 11
    2478:	8a a5       	ldd	r24, Y+42	; 0x2a
    247a:	9b a5       	ldd	r25, Y+43	; 0x2b
    247c:	0e 94 97 37 	call	0x6f2e	; 0x6f2e <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S2_TEMP].samplingInterval, cols[S2_TEMP].samplings, temp_data);
    2480:	6d a5       	ldd	r22, Y+45	; 0x2d
    2482:	44 e9       	ldi	r20, 0x94	; 148
    2484:	5a e0       	ldi	r21, 0x0A	; 10
    2486:	8f a5       	ldd	r24, Y+47	; 0x2f
    2488:	98 a9       	ldd	r25, Y+48	; 0x30
    248a:	0e 94 a0 37 	call	0x6f40	; 0x6f40 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S2_HUM].samplingInterval, cols[S2_HUM].samplings, hum_data);
    248e:	6a a9       	ldd	r22, Y+50	; 0x32
    2490:	4c ec       	ldi	r20, 0xCC	; 204
    2492:	59 e0       	ldi	r21, 0x09	; 9
    2494:	8c a9       	ldd	r24, Y+52	; 0x34
    2496:	9d a9       	ldd	r25, Y+53	; 0x35
    2498:	0e 94 a9 37 	call	0x6f52	; 0x6f52 <SCD30_init_humidity_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    249c:	6b a1       	ldd	r22, Y+35	; 0x23
    249e:	7c a1       	ldd	r23, Y+36	; 0x24
    24a0:	44 e0       	ldi	r20, 0x04	; 4
    24a2:	59 e0       	ldi	r21, 0x09	; 9
    24a4:	8d a1       	ldd	r24, Y+37	; 0x25
    24a6:	0e 94 61 29 	call	0x52c2	; 0x52c2 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    24aa:	81 11       	cpse	r24, r1
    24ac:	6d c0       	rjmp	.+218    	; 0x2588 <stage_2+0x150>
			
				state_s2=STAGE_START;
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    24b4:	c3 cf       	rjmp	.-122    	; 0x243c <stage_2+0x4>
			
			case STAGE_START:
				res=SCD30_start_sampling();
    24b6:	0e 94 f5 29 	call	0x53ea	; 0x53ea <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    24ba:	88 23       	and	r24, r24
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <stage_2+0x88>
    24be:	66 c0       	rjmp	.+204    	; 0x258c <stage_2+0x154>
				
				ADC_start_sampling();
    24c0:	0e 94 fe 38 	call	0x71fc	; 0x71fc <ADC_start_sampling>
				PUMP_start(airPumpTime);
    24c4:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <airPumpTime>
    24c8:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <airPumpTime+0x1>
    24cc:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <PUMP_start>
				
				state_s2=STAGE_GET_TIME;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    24d6:	b2 cf       	rjmp	.-156    	; 0x243c <stage_2+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    24d8:	84 e9       	ldi	r24, 0x94	; 148
    24da:	9e e0       	ldi	r25, 0x0E	; 14
    24dc:	0e 94 e5 16 	call	0x2dca	; 0x2dca <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    24e0:	81 11       	cpse	r24, r1
    24e2:	56 c0       	rjmp	.+172    	; 0x2590 <stage_2+0x158>
				state_s2=STAGE_WAIT;
    24e4:	83 e0       	ldi	r24, 0x03	; 3
    24e6:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    24ea:	a8 cf       	rjmp	.-176    	; 0x243c <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    24ec:	0e 94 b1 32 	call	0x6562	; 0x6562 <SCD30_is_sampling_done>
    24f0:	88 23       	and	r24, r24
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <stage_2+0xbe>
    24f4:	4f c0       	rjmp	.+158    	; 0x2594 <stage_2+0x15c>
    24f6:	0e 94 53 36 	call	0x6ca6	; 0x6ca6 <ADC_is_sampling_done>
    24fa:	88 23       	and	r24, r24
    24fc:	09 f4       	brne	.+2      	; 0x2500 <stage_2+0xc8>
    24fe:	4c c0       	rjmp	.+152    	; 0x2598 <stage_2+0x160>
    2500:	0e 94 7d 36 	call	0x6cfa	; 0x6cfa <PUMP_is_done>
    2504:	88 23       	and	r24, r24
    2506:	09 f4       	brne	.+2      	; 0x250a <stage_2+0xd2>
    2508:	49 c0       	rjmp	.+146    	; 0x259c <stage_2+0x164>
				state_s2=STAGE_UPDATE_MRPP;
    250a:	85 e0       	ldi	r24, 0x05	; 5
    250c:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    2510:	95 cf       	rjmp	.-214    	; 0x243c <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2512:	27 eb       	ldi	r18, 0xB7	; 183
    2514:	3e e0       	ldi	r19, 0x0E	; 14
    2516:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    251a:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    251e:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    2522:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    2526:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    252a:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    252e:	0e 94 4b 19 	call	0x3296	; 0x3296 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    2532:	4c e5       	ldi	r20, 0x5C	; 92
    2534:	5b e0       	ldi	r21, 0x0B	; 11
    2536:	67 eb       	ldi	r22, 0xB7	; 183
    2538:	7e e0       	ldi	r23, 0x0E	; 14
    253a:	89 e0       	ldi	r24, 0x09	; 9
    253c:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_TEMP, ts, temp_data);
    2540:	44 e9       	ldi	r20, 0x94	; 148
    2542:	5a e0       	ldi	r21, 0x0A	; 10
    2544:	67 eb       	ldi	r22, 0xB7	; 183
    2546:	7e e0       	ldi	r23, 0x0E	; 14
    2548:	8a e0       	ldi	r24, 0x0A	; 10
    254a:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_HUM, ts, hum_data);
    254e:	4c ec       	ldi	r20, 0xCC	; 204
    2550:	59 e0       	ldi	r21, 0x09	; 9
    2552:	67 eb       	ldi	r22, 0xB7	; 183
    2554:	7e e0       	ldi	r23, 0x0E	; 14
    2556:	8b e0       	ldi	r24, 0x0B	; 11
    2558:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    255c:	44 e0       	ldi	r20, 0x04	; 4
    255e:	59 e0       	ldi	r21, 0x09	; 9
    2560:	67 eb       	ldi	r22, 0xB7	; 183
    2562:	7e e0       	ldi	r23, 0x0E	; 14
    2564:	88 e0       	ldi	r24, 0x08	; 8
    2566:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    256a:	84 e0       	ldi	r24, 0x04	; 4
    256c:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    2570:	65 cf       	rjmp	.-310    	; 0x243c <stage_2+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S2 DE-INIT");
    2572:	67 eb       	ldi	r22, 0xB7	; 183
    2574:	72 e0       	ldi	r23, 0x02	; 2
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				SCD30_deinit_sampling();
    257c:	0e 94 0d 39 	call	0x721a	; 0x721a <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2580:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <ADC_deinit_sampling>
				return STAGE_DONE;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	0b c0       	rjmp	.+22     	; 0x259e <stage_2+0x166>
				SCD30_init_c02_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				SCD30_init_temp_sampling(cols[S2_TEMP].samplingInterval, cols[S2_TEMP].samplings, temp_data);
				SCD30_init_humidity_sampling(cols[S2_HUM].samplingInterval, cols[S2_HUM].samplings, hum_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	09 c0       	rjmp	.+18     	; 0x259e <stage_2+0x166>
				state_s2=STAGE_START;
			break;
			
			case STAGE_START:
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	07 c0       	rjmp	.+14     	; 0x259e <stage_2+0x166>
				state_s2=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	05 c0       	rjmp	.+10     	; 0x259e <stage_2+0x166>
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	03 c0       	rjmp	.+6      	; 0x259e <stage_2+0x166>
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	01 c0       	rjmp	.+2      	; 0x259e <stage_2+0x166>
    259c:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	08 95       	ret

Disassembly of section .text.stage_3:

000025a4 <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	bool res;
	
	while(1){
		switch(state_s3){
    25a8:	80 91 f1 0e 	lds	r24, 0x0EF1	; 0x800ef1 <state_s3>
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <stage_3+0xe>
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <stage_3+0x8c>
    25b2:	30 f4       	brcc	.+12     	; 0x25c0 <stage_3+0x1c>
    25b4:	88 23       	and	r24, r24
    25b6:	69 f0       	breq	.+26     	; 0x25d2 <stage_3+0x2e>
    25b8:	81 30       	cpi	r24, 0x01	; 1
    25ba:	09 f4       	brne	.+2      	; 0x25be <stage_3+0x1a>
    25bc:	44 c0       	rjmp	.+136    	; 0x2646 <stage_3+0xa2>
    25be:	f4 cf       	rjmp	.-24     	; 0x25a8 <stage_3+0x4>
    25c0:	84 30       	cpi	r24, 0x04	; 4
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <stage_3+0x22>
    25c4:	88 c0       	rjmp	.+272    	; 0x26d6 <stage_3+0x132>
    25c6:	08 f4       	brcc	.+2      	; 0x25ca <stage_3+0x26>
    25c8:	48 c0       	rjmp	.+144    	; 0x265a <stage_3+0xb6>
    25ca:	85 30       	cpi	r24, 0x05	; 5
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <stage_3+0x2c>
    25ce:	53 c0       	rjmp	.+166    	; 0x2676 <stage_3+0xd2>
    25d0:	eb cf       	rjmp	.-42     	; 0x25a8 <stage_3+0x4>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
    25d2:	69 ec       	ldi	r22, 0xC9	; 201
    25d4:	72 e0       	ldi	r23, 0x02	; 2
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				SCD30_init_c02_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    25dc:	c6 ed       	ldi	r28, 0xD6	; 214
    25de:	dd e0       	ldi	r29, 0x0D	; 13
    25e0:	6c ad       	ldd	r22, Y+60	; 0x3c
    25e2:	4c e5       	ldi	r20, 0x5C	; 92
    25e4:	5b e0       	ldi	r21, 0x0B	; 11
    25e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    25e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    25ea:	0e 94 97 37 	call	0x6f2e	; 0x6f2e <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S3_TEMP].samplingInterval, cols[S3_TEMP].samplings, temp_data);
    25ee:	60 91 17 0e 	lds	r22, 0x0E17	; 0x800e17 <cols+0x41>
    25f2:	44 e9       	ldi	r20, 0x94	; 148
    25f4:	5a e0       	ldi	r21, 0x0A	; 10
    25f6:	80 91 19 0e 	lds	r24, 0x0E19	; 0x800e19 <cols+0x43>
    25fa:	90 91 1a 0e 	lds	r25, 0x0E1A	; 0x800e1a <cols+0x44>
    25fe:	0e 94 a0 37 	call	0x6f40	; 0x6f40 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S3_HUM].samplingInterval, cols[S3_HUM].samplings, hum_data);
    2602:	60 91 1c 0e 	lds	r22, 0x0E1C	; 0x800e1c <cols+0x46>
    2606:	4c ec       	ldi	r20, 0xCC	; 204
    2608:	59 e0       	ldi	r21, 0x09	; 9
    260a:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <cols+0x48>
    260e:	90 91 1f 0e 	lds	r25, 0x0E1F	; 0x800e1f <cols+0x49>
    2612:	0e 94 a9 37 	call	0x6f52	; 0x6f52 <SCD30_init_humidity_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    2616:	6f a9       	ldd	r22, Y+55	; 0x37
    2618:	78 ad       	ldd	r23, Y+56	; 0x38
    261a:	44 e0       	ldi	r20, 0x04	; 4
    261c:	59 e0       	ldi	r21, 0x09	; 9
    261e:	89 ad       	ldd	r24, Y+57	; 0x39
    2620:	0e 94 61 29 	call	0x52c2	; 0x52c2 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2624:	81 11       	cpse	r24, r1
    2626:	66 c0       	rjmp	.+204    	; 0x26f4 <stage_3+0x150>
			
				state_s3=STAGE_START;
    2628:	82 e0       	ldi	r24, 0x02	; 2
    262a:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    262e:	bc cf       	rjmp	.-136    	; 0x25a8 <stage_3+0x4>
			
			case STAGE_START:
				ADC_start_sampling();
    2630:	0e 94 fe 38 	call	0x71fc	; 0x71fc <ADC_start_sampling>
				res=SCD30_start_sampling();
    2634:	0e 94 f5 29 	call	0x53ea	; 0x53ea <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    2638:	88 23       	and	r24, r24
    263a:	09 f4       	brne	.+2      	; 0x263e <stage_3+0x9a>
    263c:	5d c0       	rjmp	.+186    	; 0x26f8 <stage_3+0x154>
				
				state_s3=STAGE_GET_TIME;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    2644:	b1 cf       	rjmp	.-158    	; 0x25a8 <stage_3+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    2646:	84 e9       	ldi	r24, 0x94	; 148
    2648:	9e e0       	ldi	r25, 0x0E	; 14
    264a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    264e:	81 11       	cpse	r24, r1
    2650:	55 c0       	rjmp	.+170    	; 0x26fc <stage_3+0x158>
				state_s3=STAGE_WAIT;
    2652:	83 e0       	ldi	r24, 0x03	; 3
    2654:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    2658:	a7 cf       	rjmp	.-178    	; 0x25a8 <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    265a:	0e 94 b1 32 	call	0x6562	; 0x6562 <SCD30_is_sampling_done>
    265e:	88 23       	and	r24, r24
    2660:	09 f4       	brne	.+2      	; 0x2664 <stage_3+0xc0>
    2662:	4e c0       	rjmp	.+156    	; 0x2700 <stage_3+0x15c>
    2664:	0e 94 53 36 	call	0x6ca6	; 0x6ca6 <ADC_is_sampling_done>
    2668:	88 23       	and	r24, r24
    266a:	09 f4       	brne	.+2      	; 0x266e <stage_3+0xca>
    266c:	4b c0       	rjmp	.+150    	; 0x2704 <stage_3+0x160>
				state_s3=STAGE_UPDATE_MRPP;
    266e:	85 e0       	ldi	r24, 0x05	; 5
    2670:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    2674:	99 cf       	rjmp	.-206    	; 0x25a8 <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2676:	27 eb       	ldi	r18, 0xB7	; 183
    2678:	3e e0       	ldi	r19, 0x0E	; 14
    267a:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    267e:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    2682:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    2686:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    268a:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    268e:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    2692:	0e 94 4b 19 	call	0x3296	; 0x3296 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    2696:	4c e5       	ldi	r20, 0x5C	; 92
    2698:	5b e0       	ldi	r21, 0x0B	; 11
    269a:	67 eb       	ldi	r22, 0xB7	; 183
    269c:	7e e0       	ldi	r23, 0x0E	; 14
    269e:	8d e0       	ldi	r24, 0x0D	; 13
    26a0:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_TEMP, ts, temp_data);
    26a4:	44 e9       	ldi	r20, 0x94	; 148
    26a6:	5a e0       	ldi	r21, 0x0A	; 10
    26a8:	67 eb       	ldi	r22, 0xB7	; 183
    26aa:	7e e0       	ldi	r23, 0x0E	; 14
    26ac:	8e e0       	ldi	r24, 0x0E	; 14
    26ae:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_HUM, ts, hum_data);
    26b2:	4c ec       	ldi	r20, 0xCC	; 204
    26b4:	59 e0       	ldi	r21, 0x09	; 9
    26b6:	67 eb       	ldi	r22, 0xB7	; 183
    26b8:	7e e0       	ldi	r23, 0x0E	; 14
    26ba:	8f e0       	ldi	r24, 0x0F	; 15
    26bc:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    26c0:	44 e0       	ldi	r20, 0x04	; 4
    26c2:	59 e0       	ldi	r21, 0x09	; 9
    26c4:	67 eb       	ldi	r22, 0xB7	; 183
    26c6:	7e e0       	ldi	r23, 0x0E	; 14
    26c8:	8c e0       	ldi	r24, 0x0C	; 12
    26ca:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    26ce:	84 e0       	ldi	r24, 0x04	; 4
    26d0:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    26d4:	69 cf       	rjmp	.-302    	; 0x25a8 <stage_3+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S3 DE-INIT");
    26d6:	68 ed       	ldi	r22, 0xD8	; 216
    26d8:	72 e0       	ldi	r23, 0x02	; 2
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				SCD30_deinit_sampling();
    26e0:	0e 94 0d 39 	call	0x721a	; 0x721a <SCD30_deinit_sampling>
				SCD30_sensor_off();
    26e4:	0e 94 49 39 	call	0x7292	; 0x7292 <SCD30_sensor_off>
				ADC_deinit_sampling();
    26e8:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    26ec:	0e 94 35 39 	call	0x726a	; 0x726a <ADC_meth_sens_power_off>
				return STAGE_DONE;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	09 c0       	rjmp	.+18     	; 0x2706 <stage_3+0x162>
				SCD30_init_c02_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				SCD30_init_temp_sampling(cols[S3_TEMP].samplingInterval, cols[S3_TEMP].samplings, temp_data);
				SCD30_init_humidity_sampling(cols[S3_HUM].samplingInterval, cols[S3_HUM].samplings, hum_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    26f4:	83 e0       	ldi	r24, 0x03	; 3
    26f6:	07 c0       	rjmp	.+14     	; 0x2706 <stage_3+0x162>
			break;
			
			case STAGE_START:
				ADC_start_sampling();
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	05 c0       	rjmp	.+10     	; 0x2706 <stage_3+0x162>
				state_s3=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	03 c0       	rjmp	.+6      	; 0x2706 <stage_3+0x162>
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <stage_3+0x162>
    2704:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	08 95       	ret

Disassembly of section .text.decode_body_response:

00004e18 <decode_body_response>:
			return MAINPG_FATAL_ERROR;		
	}	
}


static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    4e18:	0f 93       	push	r16
    4e1a:	1f 93       	push	r17
    4e1c:	cf 93       	push	r28
    4e1e:	8c 01       	movw	r16, r24
    4e20:	c4 2f       	mov	r28, r20
	switch(status){
    4e22:	62 30       	cpi	r22, 0x02	; 2
    4e24:	31 f1       	breq	.+76     	; 0x4e72 <decode_body_response+0x5a>
    4e26:	18 f4       	brcc	.+6      	; 0x4e2e <decode_body_response+0x16>
    4e28:	66 23       	and	r22, r22
    4e2a:	31 f0       	breq	.+12     	; 0x4e38 <decode_body_response+0x20>
    4e2c:	29 c0       	rjmp	.+82     	; 0x4e80 <decode_body_response+0x68>
    4e2e:	64 30       	cpi	r22, 0x04	; 4
    4e30:	61 f0       	breq	.+24     	; 0x4e4a <decode_body_response+0x32>
    4e32:	65 30       	cpi	r22, 0x05	; 5
    4e34:	a1 f0       	breq	.+40     	; 0x4e5e <decode_body_response+0x46>
    4e36:	24 c0       	rjmp	.+72     	; 0x4e80 <decode_body_response+0x68>
		case LM_STATUS_SUCCESS:
			MRPP_set_body_sent(bodyIndex);
    4e38:	0e 94 cd 38 	call	0x719a	; 0x719a <MRPP_set_body_sent>
			print_debug("res: success");
    4e3c:	6a ee       	ldi	r22, 0xEA	; 234
    4e3e:	72 e0       	ldi	r23, 0x02	; 2
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
			return success;
    4e46:	8c 2f       	mov	r24, r28
    4e48:	1c c0       	rjmp	.+56     	; 0x4e82 <decode_body_response+0x6a>
		
		
		case LM_STATUS_MAC_ERR:
			print_debug("res: mac err");
    4e4a:	67 ef       	ldi	r22, 0xF7	; 247
    4e4c:	72 e0       	ldi	r23, 0x02	; 2
    4e4e:	80 e0       	ldi	r24, 0x00	; 0
    4e50:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
			MRPP_set_body_sent(bodyIndex);
    4e54:	c8 01       	movw	r24, r16
    4e56:	0e 94 cd 38 	call	0x719a	; 0x719a <MRPP_set_body_sent>
			return success;
    4e5a:	8c 2f       	mov	r24, r28
    4e5c:	12 c0       	rjmp	.+36     	; 0x4e82 <decode_body_response+0x6a>
			
		case LM_STATUS_INV_DATA_LEN:
			print_debug("res: inv len");
    4e5e:	64 e0       	ldi	r22, 0x04	; 4
    4e60:	73 e0       	ldi	r23, 0x03	; 3
    4e62:	80 e0       	ldi	r24, 0x00	; 0
    4e64:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
			MRPP_set_body_sent(bodyIndex);
    4e68:	c8 01       	movw	r24, r16
    4e6a:	0e 94 cd 38 	call	0x719a	; 0x719a <MRPP_set_body_sent>
			return MAINPG_PAYLOAD_INV_LEN;
    4e6e:	86 e1       	ldi	r24, 0x16	; 22
    4e70:	08 c0       	rjmp	.+16     	; 0x4e82 <decode_body_response+0x6a>
		
		case LM_STATUS_TRY_AGAIN:
			print_debug("res: try again");
    4e72:	61 e1       	ldi	r22, 0x11	; 17
    4e74:	73 e0       	ldi	r23, 0x03	; 3
    4e76:	80 e0       	ldi	r24, 0x00	; 0
    4e78:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
			return success;
    4e7c:	8c 2f       	mov	r24, r28
    4e7e:	01 c0       	rjmp	.+2      	; 0x4e82 <decode_body_response+0x6a>
		
		default:
			return MAINPG_FATAL_ERROR;
    4e80:	87 e1       	ldi	r24, 0x17	; 23
	}
}
    4e82:	cf 91       	pop	r28
    4e84:	1f 91       	pop	r17
    4e86:	0f 91       	pop	r16
    4e88:	08 95       	ret

Disassembly of section .text.decode_payload_inv_len_response:

0000612c <decode_payload_inv_len_response>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static MAINPG_STATES decode_payload_inv_len_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
    612c:	cf 93       	push	r28
    612e:	df 93       	push	r29
    6130:	d6 2f       	mov	r29, r22
    6132:	c4 2f       	mov	r28, r20
	switch(status){
    6134:	82 30       	cpi	r24, 0x02	; 2
    6136:	71 f0       	breq	.+28     	; 0x6154 <decode_payload_inv_len_response+0x28>
    6138:	18 f4       	brcc	.+6      	; 0x6140 <decode_payload_inv_len_response+0x14>
    613a:	88 23       	and	r24, r24
    613c:	21 f0       	breq	.+8      	; 0x6146 <decode_payload_inv_len_response+0x1a>
    613e:	11 c0       	rjmp	.+34     	; 0x6162 <decode_payload_inv_len_response+0x36>
    6140:	84 50       	subi	r24, 0x04	; 4
    6142:	82 30       	cpi	r24, 0x02	; 2
    6144:	70 f4       	brcc	.+28     	; 0x6162 <decode_payload_inv_len_response+0x36>
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			print_debug("res: success, macc_err, inv_len");
    6146:	60 e2       	ldi	r22, 0x20	; 32
    6148:	73 e0       	ldi	r23, 0x03	; 3
    614a:	80 e0       	ldi	r24, 0x00	; 0
    614c:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
			return success;
    6150:	8d 2f       	mov	r24, r29
    6152:	08 c0       	rjmp	.+16     	; 0x6164 <decode_payload_inv_len_response+0x38>
		
		case LM_STATUS_TRY_AGAIN:
			print_debug("res: try again");
    6154:	61 e1       	ldi	r22, 0x11	; 17
    6156:	73 e0       	ldi	r23, 0x03	; 3
    6158:	80 e0       	ldi	r24, 0x00	; 0
    615a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
			return tryAgain;
    615e:	8c 2f       	mov	r24, r28
    6160:	01 c0       	rjmp	.+2      	; 0x6164 <decode_payload_inv_len_response+0x38>
		
		default:
			return MAINPG_FATAL_ERROR;
    6162:	87 e1       	ldi	r24, 0x17	; 23
	}
}
    6164:	df 91       	pop	r29
    6166:	cf 91       	pop	r28
    6168:	08 95       	ret

Disassembly of section .text.MAINPG_start:

0000115e <MAINPG_start>:

static void send_msg(const char msg[]);

static bool fromSleep=false;

void MAINPG_start(){
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
    116a:	c0 e0       	ldi	r28, 0x00	; 0
    116c:	1a c0       	rjmp	.+52     	; 0x11a2 <MAINPG_start+0x44>
				PM_HAL_SCD30_power_init();
				PM_HAL_LED_power_init();
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    116e:	c6 e0       	ldi	r28, 0x06	; 6
    1170:	18 c0       	rjmp	.+48     	; 0x11a2 <MAINPG_start+0x44>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
    1172:	c5 e0       	ldi	r28, 0x05	; 5
    1174:	16 c0       	rjmp	.+44     	; 0x11a2 <MAINPG_start+0x44>
    1176:	c5 e0       	ldi	r28, 0x05	; 5
    1178:	14 c0       	rjmp	.+40     	; 0x11a2 <MAINPG_start+0x44>
    117a:	c5 e0       	ldi	r28, 0x05	; 5
    117c:	12 c0       	rjmp	.+36     	; 0x11a2 <MAINPG_start+0x44>
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
    117e:	c5 e0       	ldi	r28, 0x05	; 5
    1180:	10 c0       	rjmp	.+32     	; 0x11a2 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1182:	c7 e1       	ldi	r28, 0x17	; 23
    1184:	0e c0       	rjmp	.+28     	; 0x11a2 <MAINPG_start+0x44>
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    1186:	c7 e1       	ldi	r28, 0x17	; 23
    1188:	0c c0       	rjmp	.+24     	; 0x11a2 <MAINPG_start+0x44>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    118a:	c7 e1       	ldi	r28, 0x17	; 23
    118c:	0a c0       	rjmp	.+20     	; 0x11a2 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    118e:	c7 e1       	ldi	r28, 0x17	; 23
    1190:	08 c0       	rjmp	.+16     	; 0x11a2 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1192:	c7 e1       	ldi	r28, 0x17	; 23
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <MAINPG_start+0x44>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
    1196:	cd 2f       	mov	r28, r29
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <MAINPG_start+0x44>
    119a:	cd 2f       	mov	r28, r29
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
    119e:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
    11a0:	c1 e1       	ldi	r28, 0x11	; 17
	STAGE_STATUS stageStatus;
	uint8_t groupId=0;
	

	while(1){
		switch(state){
    11a2:	ec 2f       	mov	r30, r28
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	e9 31       	cpi	r30, 0x19	; 25
    11a8:	f1 05       	cpc	r31, r1
    11aa:	d8 f7       	brcc	.-10     	; 0x11a2 <MAINPG_start+0x44>
    11ac:	e2 5a       	subi	r30, 0xA2	; 162
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	0c 94 d9 38 	jmp	0x71b2	; 0x71b2 <__tablejump2__>
			case MAINPG_INIT_HW:
				print_debug("State: INIT HW");
    11b4:	60 e4       	ldi	r22, 0x40	; 64
    11b6:	73 e0       	ldi	r23, 0x03	; 3
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				//Reset variables
				state_s0=STAGE_INIT;
    11be:	10 92 f4 0e 	sts	0x0EF4, r1	; 0x800ef4 <state_s0>
				state_s1=STAGE_INIT;
    11c2:	10 92 f3 0e 	sts	0x0EF3, r1	; 0x800ef3 <state_s1>
				state_s2=STAGE_INIT;
    11c6:	10 92 f2 0e 	sts	0x0EF2, r1	; 0x800ef2 <state_s2>
				state_s3=STAGE_INIT;
    11ca:	10 92 f1 0e 	sts	0x0EF1, r1	; 0x800ef1 <state_s3>
				bodyIndex=-1;
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
    11d2:	90 93 dc 0e 	sts	0x0EDC, r25	; 0x800edc <bodyIndex+0x1>
    11d6:	80 93 db 0e 	sts	0x0EDB, r24	; 0x800edb <bodyIndex>
				
				uart0_hal_init();
    11da:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <uart0_hal_init>
				uart1_hal_init();
    11de:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <uart1_hal_init>
				TWI_HAL_init();
    11e2:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <TWI_HAL_init>
				TC2_HAL_init();
    11e6:	0e 94 b9 35 	call	0x6b72	; 0x6b72 <TC2_HAL_init>
				rn2483_init();
    11ea:	0e 94 25 39 	call	0x724a	; 0x724a <rn2483_init>
				SCD30_HAL_init();
    11ee:	0e 94 08 38 	call	0x7010	; 0x7010 <SCD30_HAL_init>
				PM_HAL_adc_power_init();
    11f2:	0e 94 e5 37 	call	0x6fca	; 0x6fca <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
    11f6:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
    11fa:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
    11fe:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
    1202:	0e 94 01 38 	call	0x7002	; 0x7002 <PM_HAL_LED_power_init>
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    1206:	80 91 ed 0e 	lds	r24, 0x0EED	; 0x800eed <fromSleep>
    120a:	81 11       	cpse	r24, r1
    120c:	b0 cf       	rjmp	.-160    	; 0x116e <MAINPG_start+0x10>
    120e:	c1 e0       	ldi	r28, 0x01	; 1
    1210:	c8 cf       	rjmp	.-112    	; 0x11a2 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
    1212:	6f e4       	ldi	r22, 0x4F	; 79
    1214:	73 e0       	ldi	r23, 0x03	; 3
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
    121c:	0e 94 d7 36 	call	0x6dae	; 0x6dae <EM_has_deveui>
    1220:	88 23       	and	r24, r24
    1222:	09 f4       	brne	.+2      	; 0x1226 <MAINPG_start+0xc8>
    1224:	a6 cf       	rjmp	.-180    	; 0x1172 <MAINPG_start+0x14>
    1226:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <EM_has_appeui>
    122a:	88 23       	and	r24, r24
    122c:	09 f4       	brne	.+2      	; 0x1230 <MAINPG_start+0xd2>
    122e:	a3 cf       	rjmp	.-186    	; 0x1176 <MAINPG_start+0x18>
    1230:	0e 94 ed 36 	call	0x6dda	; 0x6dda <EM_has_appkey>
    1234:	88 23       	and	r24, r24
    1236:	09 f4       	brne	.+2      	; 0x123a <MAINPG_start+0xdc>
    1238:	a0 cf       	rjmp	.-192    	; 0x117a <MAINPG_start+0x1c>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
    123a:	0e 94 ae 2a 	call	0x555c	; 0x555c <read_eeprom>
    123e:	88 23       	and	r24, r24
    1240:	09 f4       	brne	.+2      	; 0x1244 <MAINPG_start+0xe6>
    1242:	9d cf       	rjmp	.-198    	; 0x117e <MAINPG_start+0x20>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
    1244:	c2 e0       	ldi	r28, 0x02	; 2
    1246:	ad cf       	rjmp	.-166    	; 0x11a2 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("State: JOIN LORA");
    1248:	6d e5       	ldi	r22, 0x5D	; 93
    124a:	73 e0       	ldi	r23, 0x03	; 3
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				LED_start_try_join();
    1252:	0e 94 47 38 	call	0x708e	; 0x708e <LED_start_try_join>
				lmStatus=join_lora();
    1256:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <join_lora>
    125a:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
    125c:	0e 94 dd 37 	call	0x6fba	; 0x6fba <LED_stop_try_join>
				state=decode_join_response(lmStatus);
    1260:	8c 2f       	mov	r24, r28
    1262:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <decode_join_response>
    1266:	c8 2f       	mov	r28, r24
			break;
    1268:	9c cf       	rjmp	.-200    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				print_debug("State: JOIN SUCCESS");
    126a:	6e e6       	ldi	r22, 0x6E	; 110
    126c:	73 e0       	ldi	r23, 0x03	; 3
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				LED_join_success();
    1274:	0e 94 76 30 	call	0x60ec	; 0x60ec <LED_join_success>
				state=MAINPG_INIT_MODULES;
    1278:	ca e0       	ldi	r28, 0x0A	; 10
			break;
    127a:	93 cf       	rjmp	.-218    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
    127c:	62 e8       	ldi	r22, 0x82	; 130
    127e:	73 e0       	ldi	r23, 0x03	; 3
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				lmStatus=LM_wake_up();
    1286:	0e 94 65 39 	call	0x72ca	; 0x72ca <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    128a:	81 11       	cpse	r24, r1
    128c:	7a cf       	rjmp	.-268    	; 0x1182 <MAINPG_start+0x24>
    128e:	ca e0       	ldi	r28, 0x0A	; 10
    1290:	88 cf       	rjmp	.-240    	; 0x11a2 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("State: LORA TRY AGAIN");
    1292:	66 e9       	ldi	r22, 0x96	; 150
    1294:	73 e0       	ldi	r23, 0x03	; 3
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				LED_join_denied();
    129c:	0e 94 39 39 	call	0x7272	; 0x7272 <LED_join_denied>
    12a0:	2f ef       	ldi	r18, 0xFF	; 255
    12a2:	33 eb       	ldi	r19, 0xB3	; 179
    12a4:	84 ec       	ldi	r24, 0xC4	; 196
    12a6:	94 e0       	ldi	r25, 0x04	; 4
    12a8:	21 50       	subi	r18, 0x01	; 1
    12aa:	30 40       	sbci	r19, 0x00	; 0
    12ac:	80 40       	sbci	r24, 0x00	; 0
    12ae:	90 40       	sbci	r25, 0x00	; 0
    12b0:	d9 f7       	brne	.-10     	; 0x12a8 <MAINPG_start+0x14a>
    12b2:	00 c0       	rjmp	.+0      	; 0x12b4 <MAINPG_start+0x156>
    12b4:	00 00       	nop
				_delay_ms(60000);
				state=MAINPG_LORA_JOIN_NETWORK;
    12b6:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    12b8:	74 cf       	rjmp	.-280    	; 0x11a2 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Initialize modules                                                   */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
    12ba:	6c ea       	ldi	r22, 0xAC	; 172
    12bc:	73 e0       	ldi	r23, 0x03	; 3
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    12c4:	e0 90 ab 0e 	lds	r14, 0x0EAB	; 0x800eab <ppmx>
    12c8:	f0 90 ac 0e 	lds	r15, 0x0EAC	; 0x800eac <ppmx+0x1>
    12cc:	00 91 ad 0e 	lds	r16, 0x0EAD	; 0x800ead <ppmx+0x2>
    12d0:	10 91 ae 0e 	lds	r17, 0x0EAE	; 0x800eae <ppmx+0x3>
    12d4:	20 91 af 0e 	lds	r18, 0x0EAF	; 0x800eaf <rrlx>
    12d8:	30 91 b0 0e 	lds	r19, 0x0EB0	; 0x800eb0 <rrlx+0x1>
    12dc:	40 91 b1 0e 	lds	r20, 0x0EB1	; 0x800eb1 <rrlx+0x2>
    12e0:	50 91 b2 0e 	lds	r21, 0x0EB2	; 0x800eb2 <rrlx+0x3>
    12e4:	60 91 b3 0e 	lds	r22, 0x0EB3	; 0x800eb3 <vccx>
    12e8:	70 91 b4 0e 	lds	r23, 0x0EB4	; 0x800eb4 <vccx+0x1>
    12ec:	80 91 b5 0e 	lds	r24, 0x0EB5	; 0x800eb5 <vccx+0x2>
    12f0:	90 91 b6 0e 	lds	r25, 0x0EB6	; 0x800eb6 <vccx+0x3>
    12f4:	0e 94 34 30 	call	0x6068	; 0x6068 <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
    12f8:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    12fc:	81 11       	cpse	r24, r1
    12fe:	43 cf       	rjmp	.-378    	; 0x1186 <MAINPG_start+0x28>
    1300:	c7 e0       	ldi	r28, 0x07	; 7
    1302:	4f cf       	rjmp	.-354    	; 0x11a2 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
    1304:	60 ec       	ldi	r22, 0xC0	; 192
    1306:	73 e0       	ldi	r23, 0x03	; 3
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	0e 94 06 2c 	call	0x580c	; 0x580c <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    1314:	81 11       	cpse	r24, r1
    1316:	39 cf       	rjmp	.-398    	; 0x118a <MAINPG_start+0x2c>
    1318:	c9 e0       	ldi	r28, 0x09	; 9
    131a:	43 cf       	rjmp	.-378    	; 0x11a2 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
    131c:	60 ed       	ldi	r22, 0xD0	; 208
    131e:	73 e0       	ldi	r23, 0x03	; 3
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
    1326:	0e 94 97 32 	call	0x652e	; 0x652e <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    132a:	81 11       	cpse	r24, r1
    132c:	30 cf       	rjmp	.-416    	; 0x118e <MAINPG_start+0x30>
    132e:	c8 e0       	ldi	r28, 0x08	; 8
    1330:	38 cf       	rjmp	.-400    	; 0x11a2 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
    1332:	61 ee       	ldi	r22, 0xE1	; 225
    1334:	73 e0       	ldi	r23, 0x03	; 3
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				rtcStatus=set_wakeup();
    133c:	0e 94 12 39 	call	0x7224	; 0x7224 <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1340:	81 11       	cpse	r24, r1
    1342:	27 cf       	rjmp	.-434    	; 0x1192 <MAINPG_start+0x34>
    1344:	cb e0       	ldi	r28, 0x0B	; 11
    1346:	2d cf       	rjmp	.-422    	; 0x11a2 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("State: MRPP INIT");
    1348:	67 ef       	ldi	r22, 0xF7	; 247
    134a:	73 e0       	ldi	r23, 0x03	; 3
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				groupId=EM_get_group_id();
    1352:	0e 94 b5 38 	call	0x716a	; 0x716a <EM_get_group_id>
				groupId=MRPP_init_group(cols, N_COLLECTIONS, groupId);
    1356:	48 2f       	mov	r20, r24
    1358:	6f e0       	ldi	r22, 0x0F	; 15
    135a:	86 ed       	ldi	r24, 0xD6	; 214
    135c:	9d e0       	ldi	r25, 0x0D	; 13
    135e:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <MRPP_init_group>
				EM_set_group_id(groupId);
    1362:	0e 94 af 38 	call	0x715e	; 0x715e <EM_set_group_id>
				state=MAINPG_SEND_HEADER;
    1366:	cc e0       	ldi	r28, 0x0C	; 12
			break;
    1368:	1c cf       	rjmp	.-456    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
    136a:	0e 94 03 39 	call	0x7206	; 0x7206 <LM_is_free>
    136e:	88 23       	and	r24, r24
    1370:	09 f4       	brne	.+2      	; 0x1374 <MAINPG_start+0x216>
    1372:	17 cf       	rjmp	.-466    	; 0x11a2 <MAINPG_start+0x44>
					state=MAINPG_SEND_HEADER;
					break;
				}
				print_debug("State: SEND HEADER");
    1374:	68 e0       	ldi	r22, 0x08	; 8
    1376:	74 e0       	ldi	r23, 0x04	; 4
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				comeBackToState=MAINPG_STAGE_0;
				MRPP_get_header_package(package, &package_length);
    137e:	60 ef       	ldi	r22, 0xF0	; 240
    1380:	7e e0       	ldi	r23, 0x0E	; 14
    1382:	87 ed       	ldi	r24, 0xD7	; 215
    1384:	9c e0       	ldi	r25, 0x0C	; 12
    1386:	0e 94 76 35 	call	0x6aec	; 0x6aec <MRPP_get_header_package>
				lmStatus=LM_send_uplink(package, package_length);
    138a:	60 91 f0 0e 	lds	r22, 0x0EF0	; 0x800ef0 <package_length>
    138e:	87 ed       	ldi	r24, 0xD7	; 215
    1390:	9c e0       	ldi	r25, 0x0C	; 12
    1392:	0e 94 68 34 	call	0x68d0	; 0x68d0 <LM_send_uplink>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
    1396:	4c e0       	ldi	r20, 0x0C	; 12
    1398:	6d e0       	ldi	r22, 0x0D	; 13
    139a:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <decode_header_tail_response>
    139e:	c8 2f       	mov	r28, r24
				if(!LM_is_free()){
					state=MAINPG_SEND_HEADER;
					break;
				}
				print_debug("State: SEND HEADER");
				comeBackToState=MAINPG_STAGE_0;
    13a0:	dd e0       	ldi	r29, 0x0D	; 13
				MRPP_get_header_package(package, &package_length);
				lmStatus=LM_send_uplink(package, package_length);
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
    13a2:	ff ce       	rjmp	.-514    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
    13a4:	0e 94 b8 18 	call	0x3170	; 0x3170 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    13a8:	6e e0       	ldi	r22, 0x0E	; 14
    13aa:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <decode_stage_response>
				lmStatus=LM_send_uplink(package, package_length);
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
    13ae:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    13b0:	c8 2f       	mov	r28, r24
			break;
    13b2:	f7 ce       	rjmp	.-530    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
    13b4:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    13b8:	6f e0       	ldi	r22, 0x0F	; 15
    13ba:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
    13be:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    13c0:	c8 2f       	mov	r28, r24
			break;
    13c2:	ef ce       	rjmp	.-546    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
    13c4:	0e 94 1c 12 	call	0x2438	; 0x2438 <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    13c8:	60 e1       	ldi	r22, 0x10	; 16
    13ca:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
    13ce:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    13d0:	c8 2f       	mov	r28, r24
			break;
    13d2:	e7 ce       	rjmp	.-562    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
    13d4:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    13d8:	62 e1       	ldi	r22, 0x12	; 18
    13da:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
    13de:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    13e0:	c8 2f       	mov	r28, r24
			break;
    13e2:	df ce       	rjmp	.-578    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
    13e4:	8b ed       	ldi	r24, 0xDB	; 219
    13e6:	9e e0       	ldi	r25, 0x0E	; 14
    13e8:	0e 94 65 35 	call	0x6aca	; 0x6aca <MRPP_is_body_package_ready>
    13ec:	88 23       	and	r24, r24
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <MAINPG_start+0x294>
    13f0:	d2 ce       	rjmp	.-604    	; 0x1196 <MAINPG_start+0x38>
    13f2:	0e 94 03 39 	call	0x7206	; 0x7206 <LM_is_free>
    13f6:	88 23       	and	r24, r24
    13f8:	09 f4       	brne	.+2      	; 0x13fc <MAINPG_start+0x29e>
    13fa:	cf ce       	rjmp	.-610    	; 0x119a <MAINPG_start+0x3c>
					print_debug("State: SEND DATA");
    13fc:	6b e1       	ldi	r22, 0x1B	; 27
    13fe:	74 e0       	ldi	r23, 0x04	; 4
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
					MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    1406:	40 ef       	ldi	r20, 0xF0	; 240
    1408:	5e e0       	ldi	r21, 0x0E	; 14
    140a:	67 ed       	ldi	r22, 0xD7	; 215
    140c:	7c e0       	ldi	r23, 0x0C	; 12
    140e:	80 91 db 0e 	lds	r24, 0x0EDB	; 0x800edb <bodyIndex>
    1412:	90 91 dc 0e 	lds	r25, 0x0EDC	; 0x800edc <bodyIndex+0x1>
    1416:	0e 94 0c 23 	call	0x4618	; 0x4618 <MRPP_get_ready_body_package>
					lmStatus=LM_send_uplink(package, package_length);
    141a:	60 91 f0 0e 	lds	r22, 0x0EF0	; 0x800ef0 <package_length>
    141e:	87 ed       	ldi	r24, 0xD7	; 215
    1420:	9c e0       	ldi	r25, 0x0C	; 12
    1422:	0e 94 68 34 	call	0x68d0	; 0x68d0 <LM_send_uplink>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
    1426:	4d 2f       	mov	r20, r29
    1428:	68 2f       	mov	r22, r24
    142a:	80 91 db 0e 	lds	r24, 0x0EDB	; 0x800edb <bodyIndex>
    142e:	90 91 dc 0e 	lds	r25, 0x0EDC	; 0x800edc <bodyIndex+0x1>
    1432:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <decode_body_response>
    1436:	c8 2f       	mov	r28, r24
    1438:	b4 ce       	rjmp	.-664    	; 0x11a2 <MAINPG_start+0x44>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
    143a:	0e 94 08 39 	call	0x7210	; 0x7210 <MRPP_all_body_package_sent>
    143e:	88 23       	and	r24, r24
    1440:	09 f4       	brne	.+2      	; 0x1444 <MAINPG_start+0x2e6>
    1442:	ad ce       	rjmp	.-678    	; 0x119e <MAINPG_start+0x40>
					state=MAINPG_SEND_TAIL;
    1444:	c3 e1       	ldi	r28, 0x13	; 19
    1446:	ad ce       	rjmp	.-678    	; 0x11a2 <MAINPG_start+0x44>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
    1448:	0e 94 03 39 	call	0x7206	; 0x7206 <LM_is_free>
    144c:	88 23       	and	r24, r24
    144e:	09 f4       	brne	.+2      	; 0x1452 <MAINPG_start+0x2f4>
    1450:	a8 ce       	rjmp	.-688    	; 0x11a2 <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
					break;
				}
				print_debug("State: SEND TAIL");
    1452:	6c e2       	ldi	r22, 0x2C	; 44
    1454:	74 e0       	ldi	r23, 0x04	; 4
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				comeBackToState=MAINPG_SETUP_SLEEP;
				MRPP_get_tail_package(package, &package_length);
    145c:	60 ef       	ldi	r22, 0xF0	; 240
    145e:	7e e0       	ldi	r23, 0x0E	; 14
    1460:	87 ed       	ldi	r24, 0xD7	; 215
    1462:	9c e0       	ldi	r25, 0x0C	; 12
    1464:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <MRPP_get_tail_package>
				lmStatus=LM_send_uplink(package, package_length);
    1468:	60 91 f0 0e 	lds	r22, 0x0EF0	; 0x800ef0 <package_length>
    146c:	87 ed       	ldi	r24, 0xD7	; 215
    146e:	9c e0       	ldi	r25, 0x0C	; 12
    1470:	0e 94 68 34 	call	0x68d0	; 0x68d0 <LM_send_uplink>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
    1474:	43 e1       	ldi	r20, 0x13	; 19
    1476:	64 e1       	ldi	r22, 0x14	; 20
    1478:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <decode_header_tail_response>
    147c:	c8 2f       	mov	r28, r24
				if(!LM_is_free()){
					state=MAINPG_SEND_TAIL;
					break;
				}
				print_debug("State: SEND TAIL");
				comeBackToState=MAINPG_SETUP_SLEEP;
    147e:	d4 e1       	ldi	r29, 0x14	; 20
				MRPP_get_tail_package(package, &package_length);
				lmStatus=LM_send_uplink(package, package_length);
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
				
			break;
    1480:	90 ce       	rjmp	.-736    	; 0x11a2 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				print_debug("State: SETUP SLEEP");
    1482:	6d e3       	ldi	r22, 0x3D	; 61
    1484:	74 e0       	ldi	r23, 0x04	; 4
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				lmStatus=LM_put_to_sleep();
    148c:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	81 11       	cpse	r24, r1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	90 93 ed 0e 	sts	0x0EED, r25	; 0x800eed <fromSleep>
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	0e 94 22 37 	call	0x6e44	; 0x6e44 <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0e 94 18 37 	call	0x6e30	; 0x6e30 <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <PM_HAL_LED_power>
				TC2_HAL_kill();
    14b8:	0e 94 ea 38 	call	0x71d4	; 0x71d4 <TC2_HAL_kill>
				
				state=MAINPG_SLEEP;
    14bc:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    14be:	71 ce       	rjmp	.-798    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_SLEEP:
				print_debug("State: SLEEP");
    14c0:	60 e5       	ldi	r22, 0x50	; 80
    14c2:	74 e0       	ldi	r23, 0x04	; 4
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				PM_HAL_enter_power_down();
    14ca:	0e 94 b5 30 	call	0x616a	; 0x616a <PM_HAL_enter_power_down>
				print_debug("State: SLEEP -> AWAKE");
    14ce:	6d e5       	ldi	r22, 0x5D	; 93
    14d0:	74 e0       	ldi	r23, 0x04	; 4
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				state=MAINPG_INIT_HW;
    14d8:	c0 e0       	ldi	r28, 0x00	; 0
			break;
    14da:	63 ce       	rjmp	.-826    	; 0x11a2 <MAINPG_start+0x44>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_PAYLOAD_INV_LEN:
				if(LM_is_free()){
    14dc:	0e 94 03 39 	call	0x7206	; 0x7206 <LM_is_free>
    14e0:	88 23       	and	r24, r24
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <MAINPG_start+0x388>
    14e4:	5e ce       	rjmp	.-836    	; 0x11a2 <MAINPG_start+0x44>
					print_debug("State: PAYLOAD INV LEN");
    14e6:	63 e7       	ldi	r22, 0x73	; 115
    14e8:	74 e0       	ldi	r23, 0x04	; 4
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
					lmStatus=LM_send_uplink(package, 3);
    14f0:	63 e0       	ldi	r22, 0x03	; 3
    14f2:	87 ed       	ldi	r24, 0xD7	; 215
    14f4:	9c e0       	ldi	r25, 0x0C	; 12
    14f6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <LM_send_uplink>
					state=decode_payload_inv_len_response(lmStatus, comeBackToState, MAINPG_PAYLOAD_INV_LEN);	
    14fa:	46 e1       	ldi	r20, 0x16	; 22
    14fc:	6d 2f       	mov	r22, r29
    14fe:	0e 94 96 30 	call	0x612c	; 0x612c <decode_payload_inv_len_response>
    1502:	c8 2f       	mov	r28, r24
    1504:	4e ce       	rjmp	.-868    	; 0x11a2 <MAINPG_start+0x44>
				}
			break;
			
			case MAINPG_CONF_ERR:
				print_debug("State: CONF ERR");
    1506:	6a e8       	ldi	r22, 0x8A	; 138
    1508:	74 e0       	ldi	r23, 0x04	; 4
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				LED_conf_err();
    1510:	0e 94 3d 39 	call	0x727a	; 0x727a <LED_conf_err>
				print_debug("Conf err\n\r");
    1514:	6a e9       	ldi	r22, 0x9A	; 154
    1516:	74 e0       	ldi	r23, 0x04	; 4
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				state=MAINPG_END;
    151e:	c8 e1       	ldi	r28, 0x18	; 24
			break;
    1520:	40 ce       	rjmp	.-896    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_FATAL_ERROR:
				print_debug("State: FATAL ERR");
    1522:	65 ea       	ldi	r22, 0xA5	; 165
    1524:	74 e0       	ldi	r23, 0x04	; 4
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				LED_fatal_err();
    152c:	0e 94 41 39 	call	0x7282	; 0x7282 <LED_fatal_err>
				fromSleep=false;
    1530:	10 92 ed 0e 	sts	0x0EED, r1	; 0x800eed <fromSleep>
				state=MAINPG_END;
    1534:	c8 e1       	ldi	r28, 0x18	; 24
			break;
    1536:	35 ce       	rjmp	.-918    	; 0x11a2 <MAINPG_start+0x44>
			
			case MAINPG_END:
				print_debug("State: END");
    1538:	66 eb       	ldi	r22, 0xB6	; 182
    153a:	74 e0       	ldi	r23, 0x04	; 4
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	0e 94 71 39 	call	0x72e2	; 0x72e2 <send_msg>
				return;
			break;	
		}
	}
}
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	08 95       	ret

Disassembly of section .text.calc_crc8:

0000648c <calc_crc8>:
 *  Author: Christopher S. Nielsen
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    648c:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    648e:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    6490:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    6492:	14 c0       	rjmp	.+40     	; 0x64bc <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    6494:	fa 01       	movw	r30, r20
    6496:	e3 0f       	add	r30, r19
    6498:	f1 1d       	adc	r31, r1
    649a:	90 81       	ld	r25, Z
    649c:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    649e:	28 e0       	ldi	r18, 0x08	; 8
    64a0:	0a c0       	rjmp	.+20     	; 0x64b6 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    64a2:	88 23       	and	r24, r24
    64a4:	34 f4       	brge	.+12     	; 0x64b2 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	88 0f       	add	r24, r24
    64aa:	99 1f       	adc	r25, r25
    64ac:	91 e3       	ldi	r25, 0x31	; 49
    64ae:	89 27       	eor	r24, r25
    64b0:	01 c0       	rjmp	.+2      	; 0x64b4 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    64b2:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    64b4:	21 50       	subi	r18, 0x01	; 1
    64b6:	21 11       	cpse	r18, r1
    64b8:	f4 cf       	rjmp	.-24     	; 0x64a2 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    64ba:	3f 5f       	subi	r19, 0xFF	; 255
    64bc:	36 17       	cp	r19, r22
    64be:	50 f3       	brcs	.-44     	; 0x6494 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    64c0:	08 95       	ret

Disassembly of section .text.get_decimal:

000040ea <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    40ea:	cf 92       	push	r12
    40ec:	df 92       	push	r13
    40ee:	ef 92       	push	r14
    40f0:	ff 92       	push	r15
    40f2:	0f 93       	push	r16
    40f4:	1f 93       	push	r17
    40f6:	cf 93       	push	r28
    40f8:	df 93       	push	r29
    40fa:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    40fc:	10 e0       	ldi	r17, 0x00	; 0
    40fe:	08 c0       	rjmp	.+16     	; 0x4110 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    4100:	cc 0d       	add	r28, r12
    4102:	dd 1d       	adc	r29, r13
    4104:	88 81       	ld	r24, Y
    4106:	8e 32       	cpi	r24, 0x2E	; 46
    4108:	11 f4       	brne	.+4      	; 0x410e <get_decimal+0x24>
			index=i+1;
    410a:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    410c:	0c c0       	rjmp	.+24     	; 0x4126 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    410e:	1f 5f       	subi	r17, 0xFF	; 255
    4110:	c1 2f       	mov	r28, r17
    4112:	d0 e0       	ldi	r29, 0x00	; 0
    4114:	b6 01       	movw	r22, r12
    4116:	80 e8       	ldi	r24, 0x80	; 128
    4118:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    411c:	01 97       	sbiw	r24, 0x01	; 1
    411e:	c8 17       	cp	r28, r24
    4120:	d9 07       	cpc	r29, r25
    4122:	70 f3       	brcs	.-36     	; 0x4100 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    4124:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    4126:	11 23       	and	r17, r17
    4128:	71 f1       	breq	.+92     	; 0x4186 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    412a:	c1 0e       	add	r12, r17
    412c:	d1 1c       	adc	r13, r1
    412e:	80 e8       	ldi	r24, 0x80	; 128
    4130:	e8 2e       	mov	r14, r24
    4132:	8e 2d       	mov	r24, r14
    4134:	b6 01       	movw	r22, r12
    4136:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    413a:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    413c:	8e 2d       	mov	r24, r14
    413e:	b6 01       	movw	r22, r12
    4140:	0e 94 55 39 	call	0x72aa	; 0x72aa <atoi>
    4144:	8c 01       	movw	r16, r24
	float divisor=1;
    4146:	0f 2e       	mov	r0, r31
    4148:	c1 2c       	mov	r12, r1
    414a:	d1 2c       	mov	r13, r1
    414c:	f0 e8       	ldi	r31, 0x80	; 128
    414e:	ef 2e       	mov	r14, r31
    4150:	ff e3       	ldi	r31, 0x3F	; 63
    4152:	ff 2e       	mov	r15, r31
    4154:	f0 2d       	mov	r31, r0
	
	while(len>0){
    4156:	0b c0       	rjmp	.+22     	; 0x416e <get_decimal+0x84>
		divisor*=10;
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	40 e2       	ldi	r20, 0x20	; 32
    415e:	51 e4       	ldi	r21, 0x41	; 65
    4160:	c7 01       	movw	r24, r14
    4162:	b6 01       	movw	r22, r12
    4164:	0e 94 51 39 	call	0x72a2	; 0x72a2 <__mulsf3>
    4168:	6b 01       	movw	r12, r22
    416a:	7c 01       	movw	r14, r24
		len--;
    416c:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    416e:	c1 11       	cpse	r28, r1
    4170:	f3 cf       	rjmp	.-26     	; 0x4158 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    4172:	b8 01       	movw	r22, r16
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__floatunsisf>
    417c:	a7 01       	movw	r20, r14
    417e:	96 01       	movw	r18, r12
    4180:	0e 94 4d 39 	call	0x729a	; 0x729a <__divsf3>
    4184:	03 c0       	rjmp	.+6      	; 0x418c <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    4186:	60 e0       	ldi	r22, 0x00	; 0
    4188:	70 e0       	ldi	r23, 0x00	; 0
    418a:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    418c:	df 91       	pop	r29
    418e:	cf 91       	pop	r28
    4190:	1f 91       	pop	r17
    4192:	0f 91       	pop	r16
    4194:	ff 90       	pop	r15
    4196:	ef 90       	pop	r14
    4198:	df 90       	pop	r13
    419a:	cf 90       	pop	r12
    419c:	08 95       	ret

Disassembly of section .text.str2flaot:

000059e4 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    59e4:	cf 92       	push	r12
    59e6:	df 92       	push	r13
    59e8:	ef 92       	push	r14
    59ea:	ff 92       	push	r15
    59ec:	0f 93       	push	r16
    59ee:	1f 93       	push	r17
    59f0:	cf 93       	push	r28
    59f2:	df 93       	push	r29
    59f4:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    59f6:	bc 01       	movw	r22, r24
    59f8:	80 e8       	ldi	r24, 0x80	; 128
    59fa:	0e 94 55 39 	call	0x72aa	; 0x72aa <atoi>
    59fe:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    5a00:	c8 01       	movw	r24, r16
    5a02:	0e 94 75 20 	call	0x40ea	; 0x40ea <get_decimal>
    5a06:	6b 01       	movw	r12, r22
    5a08:	7c 01       	movw	r14, r24
	return intVal+deci;
    5a0a:	be 01       	movw	r22, r28
    5a0c:	80 e0       	ldi	r24, 0x00	; 0
    5a0e:	90 e0       	ldi	r25, 0x00	; 0
    5a10:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__floatunsisf>
    5a14:	9b 01       	movw	r18, r22
    5a16:	ac 01       	movw	r20, r24
    5a18:	c7 01       	movw	r24, r14
    5a1a:	b6 01       	movw	r22, r12
    5a1c:	0e 94 4f 38 	call	0x709e	; 0x709e <__addsf3>
	
	
}
    5a20:	df 91       	pop	r29
    5a22:	cf 91       	pop	r28
    5a24:	1f 91       	pop	r17
    5a26:	0f 91       	pop	r16
    5a28:	ff 90       	pop	r15
    5a2a:	ef 90       	pop	r14
    5a2c:	df 90       	pop	r13
    5a2e:	cf 90       	pop	r12
    5a30:	08 95       	ret

Disassembly of section .text.is_float:

0000560e <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    560e:	ef 92       	push	r14
    5610:	ff 92       	push	r15
    5612:	0f 93       	push	r16
    5614:	1f 93       	push	r17
    5616:	cf 93       	push	r28
    5618:	df 93       	push	r29
    561a:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    561c:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    561e:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    5620:	0d c0       	rjmp	.+26     	; 0x563c <is_float+0x2e>
	{
		if(str[i]=='.'){
    5622:	ce 0d       	add	r28, r14
    5624:	df 1d       	adc	r29, r15
    5626:	88 81       	ld	r24, Y
    5628:	8e 32       	cpi	r24, 0x2E	; 46
    562a:	21 f4       	brne	.+8      	; 0x5634 <is_float+0x26>
			if (got_dot)
    562c:	01 11       	cpse	r16, r1
    562e:	11 c0       	rjmp	.+34     	; 0x5652 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    5630:	01 e0       	ldi	r16, 0x01	; 1
    5632:	03 c0       	rjmp	.+6      	; 0x563a <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    5634:	80 53       	subi	r24, 0x30	; 48
    5636:	8a 30       	cpi	r24, 0x0A	; 10
    5638:	70 f4       	brcc	.+28     	; 0x5656 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    563a:	1f 5f       	subi	r17, 0xFF	; 255
    563c:	c1 2f       	mov	r28, r17
    563e:	d0 e0       	ldi	r29, 0x00	; 0
    5640:	b7 01       	movw	r22, r14
    5642:	80 e8       	ldi	r24, 0x80	; 128
    5644:	0e 94 7e 34 	call	0x68fc	; 0x68fc <strlen>
    5648:	c8 17       	cp	r28, r24
    564a:	d9 07       	cpc	r29, r25
    564c:	50 f3       	brcs	.-44     	; 0x5622 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    564e:	81 e0       	ldi	r24, 0x01	; 1
    5650:	03 c0       	rjmp	.+6      	; 0x5658 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    5652:	80 e0       	ldi	r24, 0x00	; 0
    5654:	01 c0       	rjmp	.+2      	; 0x5658 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    5656:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    5658:	df 91       	pop	r29
    565a:	cf 91       	pop	r28
    565c:	1f 91       	pop	r17
    565e:	0f 91       	pop	r16
    5660:	ff 90       	pop	r15
    5662:	ef 90       	pop	r14
    5664:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000709c <__subsf3>:
    709c:	50 58       	subi	r21, 0x80	; 128

0000709e <__addsf3>:
    709e:	bb 27       	eor	r27, r27
    70a0:	aa 27       	eor	r26, r26
    70a2:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <__addsf3x>
    70a6:	0c 94 98 35 	jmp	0x6b30	; 0x6b30 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003c64 <__addsf3x>:
    3c64:	11 c0       	rjmp	.+34     	; 0x3c88 <__addsf3x+0x24>
    3c66:	0e 94 55 38 	call	0x70aa	; 0x70aa <__fp_pscA>
    3c6a:	38 f0       	brcs	.+14     	; 0x3c7a <__addsf3x+0x16>
    3c6c:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <__fp_pscB>
    3c70:	20 f0       	brcs	.+8      	; 0x3c7a <__addsf3x+0x16>
    3c72:	39 f4       	brne	.+14     	; 0x3c82 <__addsf3x+0x1e>
    3c74:	9f 3f       	cpi	r25, 0xFF	; 255
    3c76:	19 f4       	brne	.+6      	; 0x3c7e <__addsf3x+0x1a>
    3c78:	26 f4       	brtc	.+8      	; 0x3c82 <__addsf3x+0x1e>
    3c7a:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <__fp_nan>
    3c7e:	0e f4       	brtc	.+2      	; 0x3c82 <__addsf3x+0x1e>
    3c80:	e0 95       	com	r30
    3c82:	e7 fb       	bst	r30, 7
    3c84:	0c 94 d3 38 	jmp	0x71a6	; 0x71a6 <__fp_inf>
    3c88:	e9 2f       	mov	r30, r25
    3c8a:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <__fp_split3>
    3c8e:	58 f3       	brcs	.-42     	; 0x3c66 <__addsf3x+0x2>
    3c90:	ba 17       	cp	r27, r26
    3c92:	62 07       	cpc	r22, r18
    3c94:	73 07       	cpc	r23, r19
    3c96:	84 07       	cpc	r24, r20
    3c98:	95 07       	cpc	r25, r21
    3c9a:	20 f0       	brcs	.+8      	; 0x3ca4 <__addsf3x+0x40>
    3c9c:	79 f4       	brne	.+30     	; 0x3cbc <__addsf3x+0x58>
    3c9e:	a6 f5       	brtc	.+104    	; 0x3d08 <__addsf3x+0xa4>
    3ca0:	0c 94 63 38 	jmp	0x70c6	; 0x70c6 <__fp_zero>
    3ca4:	0e f4       	brtc	.+2      	; 0x3ca8 <__addsf3x+0x44>
    3ca6:	e0 95       	com	r30
    3ca8:	0b 2e       	mov	r0, r27
    3caa:	ba 2f       	mov	r27, r26
    3cac:	a0 2d       	mov	r26, r0
    3cae:	0b 01       	movw	r0, r22
    3cb0:	b9 01       	movw	r22, r18
    3cb2:	90 01       	movw	r18, r0
    3cb4:	0c 01       	movw	r0, r24
    3cb6:	ca 01       	movw	r24, r20
    3cb8:	a0 01       	movw	r20, r0
    3cba:	11 24       	eor	r1, r1
    3cbc:	ff 27       	eor	r31, r31
    3cbe:	59 1b       	sub	r21, r25
    3cc0:	99 f0       	breq	.+38     	; 0x3ce8 <__addsf3x+0x84>
    3cc2:	59 3f       	cpi	r21, 0xF9	; 249
    3cc4:	50 f4       	brcc	.+20     	; 0x3cda <__addsf3x+0x76>
    3cc6:	50 3e       	cpi	r21, 0xE0	; 224
    3cc8:	68 f1       	brcs	.+90     	; 0x3d24 <__addsf3x+0xc0>
    3cca:	1a 16       	cp	r1, r26
    3ccc:	f0 40       	sbci	r31, 0x00	; 0
    3cce:	a2 2f       	mov	r26, r18
    3cd0:	23 2f       	mov	r18, r19
    3cd2:	34 2f       	mov	r19, r20
    3cd4:	44 27       	eor	r20, r20
    3cd6:	58 5f       	subi	r21, 0xF8	; 248
    3cd8:	f3 cf       	rjmp	.-26     	; 0x3cc0 <__addsf3x+0x5c>
    3cda:	46 95       	lsr	r20
    3cdc:	37 95       	ror	r19
    3cde:	27 95       	ror	r18
    3ce0:	a7 95       	ror	r26
    3ce2:	f0 40       	sbci	r31, 0x00	; 0
    3ce4:	53 95       	inc	r21
    3ce6:	c9 f7       	brne	.-14     	; 0x3cda <__addsf3x+0x76>
    3ce8:	7e f4       	brtc	.+30     	; 0x3d08 <__addsf3x+0xa4>
    3cea:	1f 16       	cp	r1, r31
    3cec:	ba 0b       	sbc	r27, r26
    3cee:	62 0b       	sbc	r22, r18
    3cf0:	73 0b       	sbc	r23, r19
    3cf2:	84 0b       	sbc	r24, r20
    3cf4:	ba f0       	brmi	.+46     	; 0x3d24 <__addsf3x+0xc0>
    3cf6:	91 50       	subi	r25, 0x01	; 1
    3cf8:	a1 f0       	breq	.+40     	; 0x3d22 <__addsf3x+0xbe>
    3cfa:	ff 0f       	add	r31, r31
    3cfc:	bb 1f       	adc	r27, r27
    3cfe:	66 1f       	adc	r22, r22
    3d00:	77 1f       	adc	r23, r23
    3d02:	88 1f       	adc	r24, r24
    3d04:	c2 f7       	brpl	.-16     	; 0x3cf6 <__addsf3x+0x92>
    3d06:	0e c0       	rjmp	.+28     	; 0x3d24 <__addsf3x+0xc0>
    3d08:	ba 0f       	add	r27, r26
    3d0a:	62 1f       	adc	r22, r18
    3d0c:	73 1f       	adc	r23, r19
    3d0e:	84 1f       	adc	r24, r20
    3d10:	48 f4       	brcc	.+18     	; 0x3d24 <__addsf3x+0xc0>
    3d12:	87 95       	ror	r24
    3d14:	77 95       	ror	r23
    3d16:	67 95       	ror	r22
    3d18:	b7 95       	ror	r27
    3d1a:	f7 95       	ror	r31
    3d1c:	9e 3f       	cpi	r25, 0xFE	; 254
    3d1e:	08 f0       	brcs	.+2      	; 0x3d22 <__addsf3x+0xbe>
    3d20:	b0 cf       	rjmp	.-160    	; 0x3c82 <__addsf3x+0x1e>
    3d22:	93 95       	inc	r25
    3d24:	88 0f       	add	r24, r24
    3d26:	08 f0       	brcs	.+2      	; 0x3d2a <__addsf3x+0xc6>
    3d28:	99 27       	eor	r25, r25
    3d2a:	ee 0f       	add	r30, r30
    3d2c:	97 95       	ror	r25
    3d2e:	87 95       	ror	r24
    3d30:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000722e <__cmpsf2>:
    722e:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__fp_cmp>
    7232:	08 f4       	brcc	.+2      	; 0x7236 <__cmpsf2+0x8>
    7234:	81 e0       	ldi	r24, 0x01	; 1
    7236:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000729a <__divsf3>:
    729a:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__divsf3x>
    729e:	0c 94 98 35 	jmp	0x6b30	; 0x6b30 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003ab2 <__divsf3x>:
    3ab2:	10 c0       	rjmp	.+32     	; 0x3ad4 <__divsf3x+0x22>
    3ab4:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <__fp_pscB>
    3ab8:	58 f0       	brcs	.+22     	; 0x3ad0 <__divsf3x+0x1e>
    3aba:	0e 94 55 38 	call	0x70aa	; 0x70aa <__fp_pscA>
    3abe:	40 f0       	brcs	.+16     	; 0x3ad0 <__divsf3x+0x1e>
    3ac0:	29 f4       	brne	.+10     	; 0x3acc <__divsf3x+0x1a>
    3ac2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ac4:	29 f0       	breq	.+10     	; 0x3ad0 <__divsf3x+0x1e>
    3ac6:	0c 94 d3 38 	jmp	0x71a6	; 0x71a6 <__fp_inf>
    3aca:	51 11       	cpse	r21, r1
    3acc:	0c 94 64 38 	jmp	0x70c8	; 0x70c8 <__fp_szero>
    3ad0:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <__fp_nan>
    3ad4:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <__fp_split3>
    3ad8:	68 f3       	brcs	.-38     	; 0x3ab4 <__divsf3x+0x2>

00003ada <__divsf3_pse>:
    3ada:	99 23       	and	r25, r25
    3adc:	b1 f3       	breq	.-20     	; 0x3aca <__divsf3x+0x18>
    3ade:	55 23       	and	r21, r21
    3ae0:	91 f3       	breq	.-28     	; 0x3ac6 <__divsf3x+0x14>
    3ae2:	95 1b       	sub	r25, r21
    3ae4:	55 0b       	sbc	r21, r21
    3ae6:	bb 27       	eor	r27, r27
    3ae8:	aa 27       	eor	r26, r26
    3aea:	62 17       	cp	r22, r18
    3aec:	73 07       	cpc	r23, r19
    3aee:	84 07       	cpc	r24, r20
    3af0:	38 f0       	brcs	.+14     	; 0x3b00 <__divsf3_pse+0x26>
    3af2:	9f 5f       	subi	r25, 0xFF	; 255
    3af4:	5f 4f       	sbci	r21, 0xFF	; 255
    3af6:	22 0f       	add	r18, r18
    3af8:	33 1f       	adc	r19, r19
    3afa:	44 1f       	adc	r20, r20
    3afc:	aa 1f       	adc	r26, r26
    3afe:	a9 f3       	breq	.-22     	; 0x3aea <__divsf3_pse+0x10>
    3b00:	35 d0       	rcall	.+106    	; 0x3b6c <__divsf3_pse+0x92>
    3b02:	0e 2e       	mov	r0, r30
    3b04:	3a f0       	brmi	.+14     	; 0x3b14 <__divsf3_pse+0x3a>
    3b06:	e0 e8       	ldi	r30, 0x80	; 128
    3b08:	32 d0       	rcall	.+100    	; 0x3b6e <__divsf3_pse+0x94>
    3b0a:	91 50       	subi	r25, 0x01	; 1
    3b0c:	50 40       	sbci	r21, 0x00	; 0
    3b0e:	e6 95       	lsr	r30
    3b10:	00 1c       	adc	r0, r0
    3b12:	ca f7       	brpl	.-14     	; 0x3b06 <__divsf3_pse+0x2c>
    3b14:	2b d0       	rcall	.+86     	; 0x3b6c <__divsf3_pse+0x92>
    3b16:	fe 2f       	mov	r31, r30
    3b18:	29 d0       	rcall	.+82     	; 0x3b6c <__divsf3_pse+0x92>
    3b1a:	66 0f       	add	r22, r22
    3b1c:	77 1f       	adc	r23, r23
    3b1e:	88 1f       	adc	r24, r24
    3b20:	bb 1f       	adc	r27, r27
    3b22:	26 17       	cp	r18, r22
    3b24:	37 07       	cpc	r19, r23
    3b26:	48 07       	cpc	r20, r24
    3b28:	ab 07       	cpc	r26, r27
    3b2a:	b0 e8       	ldi	r27, 0x80	; 128
    3b2c:	09 f0       	breq	.+2      	; 0x3b30 <__divsf3_pse+0x56>
    3b2e:	bb 0b       	sbc	r27, r27
    3b30:	80 2d       	mov	r24, r0
    3b32:	bf 01       	movw	r22, r30
    3b34:	ff 27       	eor	r31, r31
    3b36:	93 58       	subi	r25, 0x83	; 131
    3b38:	5f 4f       	sbci	r21, 0xFF	; 255
    3b3a:	3a f0       	brmi	.+14     	; 0x3b4a <__divsf3_pse+0x70>
    3b3c:	9e 3f       	cpi	r25, 0xFE	; 254
    3b3e:	51 05       	cpc	r21, r1
    3b40:	78 f0       	brcs	.+30     	; 0x3b60 <__divsf3_pse+0x86>
    3b42:	0c 94 d3 38 	jmp	0x71a6	; 0x71a6 <__fp_inf>
    3b46:	0c 94 64 38 	jmp	0x70c8	; 0x70c8 <__fp_szero>
    3b4a:	5f 3f       	cpi	r21, 0xFF	; 255
    3b4c:	e4 f3       	brlt	.-8      	; 0x3b46 <__divsf3_pse+0x6c>
    3b4e:	98 3e       	cpi	r25, 0xE8	; 232
    3b50:	d4 f3       	brlt	.-12     	; 0x3b46 <__divsf3_pse+0x6c>
    3b52:	86 95       	lsr	r24
    3b54:	77 95       	ror	r23
    3b56:	67 95       	ror	r22
    3b58:	b7 95       	ror	r27
    3b5a:	f7 95       	ror	r31
    3b5c:	9f 5f       	subi	r25, 0xFF	; 255
    3b5e:	c9 f7       	brne	.-14     	; 0x3b52 <__divsf3_pse+0x78>
    3b60:	88 0f       	add	r24, r24
    3b62:	91 1d       	adc	r25, r1
    3b64:	96 95       	lsr	r25
    3b66:	87 95       	ror	r24
    3b68:	97 f9       	bld	r25, 7
    3b6a:	08 95       	ret
    3b6c:	e1 e0       	ldi	r30, 0x01	; 1
    3b6e:	66 0f       	add	r22, r22
    3b70:	77 1f       	adc	r23, r23
    3b72:	88 1f       	adc	r24, r24
    3b74:	bb 1f       	adc	r27, r27
    3b76:	62 17       	cp	r22, r18
    3b78:	73 07       	cpc	r23, r19
    3b7a:	84 07       	cpc	r24, r20
    3b7c:	ba 07       	cpc	r27, r26
    3b7e:	20 f0       	brcs	.+8      	; 0x3b88 <__divsf3_pse+0xae>
    3b80:	62 1b       	sub	r22, r18
    3b82:	73 0b       	sbc	r23, r19
    3b84:	84 0b       	sbc	r24, r20
    3b86:	ba 0b       	sbc	r27, r26
    3b88:	ee 1f       	adc	r30, r30
    3b8a:	88 f7       	brcc	.-30     	; 0x3b6e <__divsf3_pse+0x94>
    3b8c:	e0 95       	com	r30
    3b8e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005448 <__fixunssfsi>:
    5448:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <__fp_splitA>
    544c:	88 f0       	brcs	.+34     	; 0x5470 <__fixunssfsi+0x28>
    544e:	9f 57       	subi	r25, 0x7F	; 127
    5450:	98 f0       	brcs	.+38     	; 0x5478 <__fixunssfsi+0x30>
    5452:	b9 2f       	mov	r27, r25
    5454:	99 27       	eor	r25, r25
    5456:	b7 51       	subi	r27, 0x17	; 23
    5458:	b0 f0       	brcs	.+44     	; 0x5486 <__fixunssfsi+0x3e>
    545a:	e1 f0       	breq	.+56     	; 0x5494 <__fixunssfsi+0x4c>
    545c:	66 0f       	add	r22, r22
    545e:	77 1f       	adc	r23, r23
    5460:	88 1f       	adc	r24, r24
    5462:	99 1f       	adc	r25, r25
    5464:	1a f0       	brmi	.+6      	; 0x546c <__fixunssfsi+0x24>
    5466:	ba 95       	dec	r27
    5468:	c9 f7       	brne	.-14     	; 0x545c <__fixunssfsi+0x14>
    546a:	14 c0       	rjmp	.+40     	; 0x5494 <__fixunssfsi+0x4c>
    546c:	b1 30       	cpi	r27, 0x01	; 1
    546e:	91 f0       	breq	.+36     	; 0x5494 <__fixunssfsi+0x4c>
    5470:	0e 94 63 38 	call	0x70c6	; 0x70c6 <__fp_zero>
    5474:	b1 e0       	ldi	r27, 0x01	; 1
    5476:	08 95       	ret
    5478:	0c 94 63 38 	jmp	0x70c6	; 0x70c6 <__fp_zero>
    547c:	67 2f       	mov	r22, r23
    547e:	78 2f       	mov	r23, r24
    5480:	88 27       	eor	r24, r24
    5482:	b8 5f       	subi	r27, 0xF8	; 248
    5484:	39 f0       	breq	.+14     	; 0x5494 <__fixunssfsi+0x4c>
    5486:	b9 3f       	cpi	r27, 0xF9	; 249
    5488:	cc f3       	brlt	.-14     	; 0x547c <__fixunssfsi+0x34>
    548a:	86 95       	lsr	r24
    548c:	77 95       	ror	r23
    548e:	67 95       	ror	r22
    5490:	b3 95       	inc	r27
    5492:	d9 f7       	brne	.-10     	; 0x548a <__fixunssfsi+0x42>
    5494:	3e f4       	brtc	.+14     	; 0x54a4 <__fixunssfsi+0x5c>
    5496:	90 95       	com	r25
    5498:	80 95       	com	r24
    549a:	70 95       	com	r23
    549c:	61 95       	neg	r22
    549e:	7f 4f       	sbci	r23, 0xFF	; 255
    54a0:	8f 4f       	sbci	r24, 0xFF	; 255
    54a2:	9f 4f       	sbci	r25, 0xFF	; 255
    54a4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004a5e <__floatunsisf>:
    4a5e:	e8 94       	clt
    4a60:	09 c0       	rjmp	.+18     	; 0x4a74 <__floatsisf+0x12>

00004a62 <__floatsisf>:
    4a62:	97 fb       	bst	r25, 7
    4a64:	3e f4       	brtc	.+14     	; 0x4a74 <__floatsisf+0x12>
    4a66:	90 95       	com	r25
    4a68:	80 95       	com	r24
    4a6a:	70 95       	com	r23
    4a6c:	61 95       	neg	r22
    4a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a70:	8f 4f       	sbci	r24, 0xFF	; 255
    4a72:	9f 4f       	sbci	r25, 0xFF	; 255
    4a74:	99 23       	and	r25, r25
    4a76:	a9 f0       	breq	.+42     	; 0x4aa2 <__floatsisf+0x40>
    4a78:	f9 2f       	mov	r31, r25
    4a7a:	96 e9       	ldi	r25, 0x96	; 150
    4a7c:	bb 27       	eor	r27, r27
    4a7e:	93 95       	inc	r25
    4a80:	f6 95       	lsr	r31
    4a82:	87 95       	ror	r24
    4a84:	77 95       	ror	r23
    4a86:	67 95       	ror	r22
    4a88:	b7 95       	ror	r27
    4a8a:	f1 11       	cpse	r31, r1
    4a8c:	f8 cf       	rjmp	.-16     	; 0x4a7e <__floatsisf+0x1c>
    4a8e:	fa f4       	brpl	.+62     	; 0x4ace <__floatsisf+0x6c>
    4a90:	bb 0f       	add	r27, r27
    4a92:	11 f4       	brne	.+4      	; 0x4a98 <__floatsisf+0x36>
    4a94:	60 ff       	sbrs	r22, 0
    4a96:	1b c0       	rjmp	.+54     	; 0x4ace <__floatsisf+0x6c>
    4a98:	6f 5f       	subi	r22, 0xFF	; 255
    4a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa0:	16 c0       	rjmp	.+44     	; 0x4ace <__floatsisf+0x6c>
    4aa2:	88 23       	and	r24, r24
    4aa4:	11 f0       	breq	.+4      	; 0x4aaa <__floatsisf+0x48>
    4aa6:	96 e9       	ldi	r25, 0x96	; 150
    4aa8:	11 c0       	rjmp	.+34     	; 0x4acc <__floatsisf+0x6a>
    4aaa:	77 23       	and	r23, r23
    4aac:	21 f0       	breq	.+8      	; 0x4ab6 <__floatsisf+0x54>
    4aae:	9e e8       	ldi	r25, 0x8E	; 142
    4ab0:	87 2f       	mov	r24, r23
    4ab2:	76 2f       	mov	r23, r22
    4ab4:	05 c0       	rjmp	.+10     	; 0x4ac0 <__floatsisf+0x5e>
    4ab6:	66 23       	and	r22, r22
    4ab8:	71 f0       	breq	.+28     	; 0x4ad6 <__floatsisf+0x74>
    4aba:	96 e8       	ldi	r25, 0x86	; 134
    4abc:	86 2f       	mov	r24, r22
    4abe:	70 e0       	ldi	r23, 0x00	; 0
    4ac0:	60 e0       	ldi	r22, 0x00	; 0
    4ac2:	2a f0       	brmi	.+10     	; 0x4ace <__floatsisf+0x6c>
    4ac4:	9a 95       	dec	r25
    4ac6:	66 0f       	add	r22, r22
    4ac8:	77 1f       	adc	r23, r23
    4aca:	88 1f       	adc	r24, r24
    4acc:	da f7       	brpl	.-10     	; 0x4ac4 <__floatsisf+0x62>
    4ace:	88 0f       	add	r24, r24
    4ad0:	96 95       	lsr	r25
    4ad2:	87 95       	ror	r24
    4ad4:	97 f9       	bld	r25, 7
    4ad6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005dfa <__fp_cmp>:
    5dfa:	99 0f       	add	r25, r25
    5dfc:	00 08       	sbc	r0, r0
    5dfe:	55 0f       	add	r21, r21
    5e00:	aa 0b       	sbc	r26, r26
    5e02:	e0 e8       	ldi	r30, 0x80	; 128
    5e04:	fe ef       	ldi	r31, 0xFE	; 254
    5e06:	16 16       	cp	r1, r22
    5e08:	17 06       	cpc	r1, r23
    5e0a:	e8 07       	cpc	r30, r24
    5e0c:	f9 07       	cpc	r31, r25
    5e0e:	c0 f0       	brcs	.+48     	; 0x5e40 <__fp_cmp+0x46>
    5e10:	12 16       	cp	r1, r18
    5e12:	13 06       	cpc	r1, r19
    5e14:	e4 07       	cpc	r30, r20
    5e16:	f5 07       	cpc	r31, r21
    5e18:	98 f0       	brcs	.+38     	; 0x5e40 <__fp_cmp+0x46>
    5e1a:	62 1b       	sub	r22, r18
    5e1c:	73 0b       	sbc	r23, r19
    5e1e:	84 0b       	sbc	r24, r20
    5e20:	95 0b       	sbc	r25, r21
    5e22:	39 f4       	brne	.+14     	; 0x5e32 <__fp_cmp+0x38>
    5e24:	0a 26       	eor	r0, r26
    5e26:	61 f0       	breq	.+24     	; 0x5e40 <__fp_cmp+0x46>
    5e28:	23 2b       	or	r18, r19
    5e2a:	24 2b       	or	r18, r20
    5e2c:	25 2b       	or	r18, r21
    5e2e:	21 f4       	brne	.+8      	; 0x5e38 <__fp_cmp+0x3e>
    5e30:	08 95       	ret
    5e32:	0a 26       	eor	r0, r26
    5e34:	09 f4       	brne	.+2      	; 0x5e38 <__fp_cmp+0x3e>
    5e36:	a1 40       	sbci	r26, 0x01	; 1
    5e38:	a6 95       	lsr	r26
    5e3a:	8f ef       	ldi	r24, 0xFF	; 255
    5e3c:	81 1d       	adc	r24, r1
    5e3e:	81 1d       	adc	r24, r1
    5e40:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000071a6 <__fp_inf>:
    71a6:	97 f9       	bld	r25, 7
    71a8:	9f 67       	ori	r25, 0x7F	; 127
    71aa:	80 e8       	ldi	r24, 0x80	; 128
    71ac:	70 e0       	ldi	r23, 0x00	; 0
    71ae:	60 e0       	ldi	r22, 0x00	; 0
    71b0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000072e8 <__fp_nan>:
    72e8:	9f ef       	ldi	r25, 0xFF	; 255
    72ea:	80 ec       	ldi	r24, 0xC0	; 192
    72ec:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000070aa <__fp_pscA>:
    70aa:	00 24       	eor	r0, r0
    70ac:	0a 94       	dec	r0
    70ae:	16 16       	cp	r1, r22
    70b0:	17 06       	cpc	r1, r23
    70b2:	18 06       	cpc	r1, r24
    70b4:	09 06       	cpc	r0, r25
    70b6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000070b8 <__fp_pscB>:
    70b8:	00 24       	eor	r0, r0
    70ba:	0a 94       	dec	r0
    70bc:	12 16       	cp	r1, r18
    70be:	13 06       	cpc	r1, r19
    70c0:	14 06       	cpc	r1, r20
    70c2:	05 06       	cpc	r0, r21
    70c4:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006b30 <__fp_round>:
    6b30:	09 2e       	mov	r0, r25
    6b32:	03 94       	inc	r0
    6b34:	00 0c       	add	r0, r0
    6b36:	11 f4       	brne	.+4      	; 0x6b3c <__fp_round+0xc>
    6b38:	88 23       	and	r24, r24
    6b3a:	52 f0       	brmi	.+20     	; 0x6b50 <__fp_round+0x20>
    6b3c:	bb 0f       	add	r27, r27
    6b3e:	40 f4       	brcc	.+16     	; 0x6b50 <__fp_round+0x20>
    6b40:	bf 2b       	or	r27, r31
    6b42:	11 f4       	brne	.+4      	; 0x6b48 <__fp_round+0x18>
    6b44:	60 ff       	sbrs	r22, 0
    6b46:	04 c0       	rjmp	.+8      	; 0x6b50 <__fp_round+0x20>
    6b48:	6f 5f       	subi	r22, 0xFF	; 255
    6b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    6b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6b50:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005f5a <__fp_split3>:
    5f5a:	57 fd       	sbrc	r21, 7
    5f5c:	90 58       	subi	r25, 0x80	; 128
    5f5e:	44 0f       	add	r20, r20
    5f60:	55 1f       	adc	r21, r21
    5f62:	59 f0       	breq	.+22     	; 0x5f7a <__fp_splitA+0x10>
    5f64:	5f 3f       	cpi	r21, 0xFF	; 255
    5f66:	71 f0       	breq	.+28     	; 0x5f84 <__fp_splitA+0x1a>
    5f68:	47 95       	ror	r20

00005f6a <__fp_splitA>:
    5f6a:	88 0f       	add	r24, r24
    5f6c:	97 fb       	bst	r25, 7
    5f6e:	99 1f       	adc	r25, r25
    5f70:	61 f0       	breq	.+24     	; 0x5f8a <__fp_splitA+0x20>
    5f72:	9f 3f       	cpi	r25, 0xFF	; 255
    5f74:	79 f0       	breq	.+30     	; 0x5f94 <__fp_splitA+0x2a>
    5f76:	87 95       	ror	r24
    5f78:	08 95       	ret
    5f7a:	12 16       	cp	r1, r18
    5f7c:	13 06       	cpc	r1, r19
    5f7e:	14 06       	cpc	r1, r20
    5f80:	55 1f       	adc	r21, r21
    5f82:	f2 cf       	rjmp	.-28     	; 0x5f68 <__fp_split3+0xe>
    5f84:	46 95       	lsr	r20
    5f86:	f1 df       	rcall	.-30     	; 0x5f6a <__fp_splitA>
    5f88:	08 c0       	rjmp	.+16     	; 0x5f9a <__fp_splitA+0x30>
    5f8a:	16 16       	cp	r1, r22
    5f8c:	17 06       	cpc	r1, r23
    5f8e:	18 06       	cpc	r1, r24
    5f90:	99 1f       	adc	r25, r25
    5f92:	f1 cf       	rjmp	.-30     	; 0x5f76 <__fp_splitA+0xc>
    5f94:	86 95       	lsr	r24
    5f96:	71 05       	cpc	r23, r1
    5f98:	61 05       	cpc	r22, r1
    5f9a:	08 94       	sec
    5f9c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000070c6 <__fp_zero>:
    70c6:	e8 94       	clt

000070c8 <__fp_szero>:
    70c8:	bb 27       	eor	r27, r27
    70ca:	66 27       	eor	r22, r22
    70cc:	77 27       	eor	r23, r23
    70ce:	cb 01       	movw	r24, r22
    70d0:	97 f9       	bld	r25, 7
    70d2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000072a2 <__mulsf3>:
    72a2:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <__mulsf3x>
    72a6:	0c 94 98 35 	jmp	0x6b30	; 0x6b30 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003b90 <__mulsf3x>:
    3b90:	0f c0       	rjmp	.+30     	; 0x3bb0 <__mulsf3x+0x20>
    3b92:	0e 94 55 38 	call	0x70aa	; 0x70aa <__fp_pscA>
    3b96:	38 f0       	brcs	.+14     	; 0x3ba6 <__mulsf3x+0x16>
    3b98:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <__fp_pscB>
    3b9c:	20 f0       	brcs	.+8      	; 0x3ba6 <__mulsf3x+0x16>
    3b9e:	95 23       	and	r25, r21
    3ba0:	11 f0       	breq	.+4      	; 0x3ba6 <__mulsf3x+0x16>
    3ba2:	0c 94 d3 38 	jmp	0x71a6	; 0x71a6 <__fp_inf>
    3ba6:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <__fp_nan>
    3baa:	11 24       	eor	r1, r1
    3bac:	0c 94 64 38 	jmp	0x70c8	; 0x70c8 <__fp_szero>
    3bb0:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <__fp_split3>
    3bb4:	70 f3       	brcs	.-36     	; 0x3b92 <__mulsf3x+0x2>

00003bb6 <__mulsf3_pse>:
    3bb6:	95 9f       	mul	r25, r21
    3bb8:	c1 f3       	breq	.-16     	; 0x3baa <__mulsf3x+0x1a>
    3bba:	95 0f       	add	r25, r21
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	55 1f       	adc	r21, r21
    3bc0:	62 9f       	mul	r22, r18
    3bc2:	f0 01       	movw	r30, r0
    3bc4:	72 9f       	mul	r23, r18
    3bc6:	bb 27       	eor	r27, r27
    3bc8:	f0 0d       	add	r31, r0
    3bca:	b1 1d       	adc	r27, r1
    3bcc:	63 9f       	mul	r22, r19
    3bce:	aa 27       	eor	r26, r26
    3bd0:	f0 0d       	add	r31, r0
    3bd2:	b1 1d       	adc	r27, r1
    3bd4:	aa 1f       	adc	r26, r26
    3bd6:	64 9f       	mul	r22, r20
    3bd8:	66 27       	eor	r22, r22
    3bda:	b0 0d       	add	r27, r0
    3bdc:	a1 1d       	adc	r26, r1
    3bde:	66 1f       	adc	r22, r22
    3be0:	82 9f       	mul	r24, r18
    3be2:	22 27       	eor	r18, r18
    3be4:	b0 0d       	add	r27, r0
    3be6:	a1 1d       	adc	r26, r1
    3be8:	62 1f       	adc	r22, r18
    3bea:	73 9f       	mul	r23, r19
    3bec:	b0 0d       	add	r27, r0
    3bee:	a1 1d       	adc	r26, r1
    3bf0:	62 1f       	adc	r22, r18
    3bf2:	83 9f       	mul	r24, r19
    3bf4:	a0 0d       	add	r26, r0
    3bf6:	61 1d       	adc	r22, r1
    3bf8:	22 1f       	adc	r18, r18
    3bfa:	74 9f       	mul	r23, r20
    3bfc:	33 27       	eor	r19, r19
    3bfe:	a0 0d       	add	r26, r0
    3c00:	61 1d       	adc	r22, r1
    3c02:	23 1f       	adc	r18, r19
    3c04:	84 9f       	mul	r24, r20
    3c06:	60 0d       	add	r22, r0
    3c08:	21 1d       	adc	r18, r1
    3c0a:	82 2f       	mov	r24, r18
    3c0c:	76 2f       	mov	r23, r22
    3c0e:	6a 2f       	mov	r22, r26
    3c10:	11 24       	eor	r1, r1
    3c12:	9f 57       	subi	r25, 0x7F	; 127
    3c14:	50 40       	sbci	r21, 0x00	; 0
    3c16:	9a f0       	brmi	.+38     	; 0x3c3e <__mulsf3_pse+0x88>
    3c18:	f1 f0       	breq	.+60     	; 0x3c56 <__mulsf3_pse+0xa0>
    3c1a:	88 23       	and	r24, r24
    3c1c:	4a f0       	brmi	.+18     	; 0x3c30 <__mulsf3_pse+0x7a>
    3c1e:	ee 0f       	add	r30, r30
    3c20:	ff 1f       	adc	r31, r31
    3c22:	bb 1f       	adc	r27, r27
    3c24:	66 1f       	adc	r22, r22
    3c26:	77 1f       	adc	r23, r23
    3c28:	88 1f       	adc	r24, r24
    3c2a:	91 50       	subi	r25, 0x01	; 1
    3c2c:	50 40       	sbci	r21, 0x00	; 0
    3c2e:	a9 f7       	brne	.-22     	; 0x3c1a <__mulsf3_pse+0x64>
    3c30:	9e 3f       	cpi	r25, 0xFE	; 254
    3c32:	51 05       	cpc	r21, r1
    3c34:	80 f0       	brcs	.+32     	; 0x3c56 <__mulsf3_pse+0xa0>
    3c36:	0c 94 d3 38 	jmp	0x71a6	; 0x71a6 <__fp_inf>
    3c3a:	0c 94 64 38 	jmp	0x70c8	; 0x70c8 <__fp_szero>
    3c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c40:	e4 f3       	brlt	.-8      	; 0x3c3a <__mulsf3_pse+0x84>
    3c42:	98 3e       	cpi	r25, 0xE8	; 232
    3c44:	d4 f3       	brlt	.-12     	; 0x3c3a <__mulsf3_pse+0x84>
    3c46:	86 95       	lsr	r24
    3c48:	77 95       	ror	r23
    3c4a:	67 95       	ror	r22
    3c4c:	b7 95       	ror	r27
    3c4e:	f7 95       	ror	r31
    3c50:	e7 95       	ror	r30
    3c52:	9f 5f       	subi	r25, 0xFF	; 255
    3c54:	c1 f7       	brne	.-16     	; 0x3c46 <__mulsf3_pse+0x90>
    3c56:	fe 2b       	or	r31, r30
    3c58:	88 0f       	add	r24, r24
    3c5a:	91 1d       	adc	r25, r1
    3c5c:	96 95       	lsr	r25
    3c5e:	87 95       	ror	r24
    3c60:	97 f9       	bld	r25, 7
    3c62:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a1a <vfprintf>:
     a1a:	a4 e1       	ldi	r26, 0x14	; 20
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	e3 e1       	ldi	r30, 0x13	; 19
     a20:	f5 e0       	ldi	r31, 0x05	; 5
     a22:	0c 94 f4 31 	jmp	0x63e8	; 0x63e8 <__prologue_saves__>
     a26:	6c 01       	movw	r12, r24
     a28:	1a 01       	movw	r2, r20
     a2a:	46 2e       	mov	r4, r22
     a2c:	59 01       	movw	r10, r18
     a2e:	fc 01       	movw	r30, r24
     a30:	10 86       	std	Z+8, r1	; 0x08
     a32:	17 82       	std	Z+7, r1	; 0x07
     a34:	84 81       	ldd	r24, Z+4	; 0x04
     a36:	81 ff       	sbrs	r24, 1
     a38:	62 c3       	rjmp	.+1732   	; 0x10fe <__DATA_REGION_LENGTH__+0xfe>
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	9d 87       	std	Y+13, r25	; 0x0d
     a40:	8c 87       	std	Y+12, r24	; 0x0c
     a42:	a0 e8       	ldi	r26, 0x80	; 128
     a44:	8a 8b       	std	Y+18, r24	; 0x12
     a46:	9b 8b       	std	Y+19, r25	; 0x13
     a48:	ac 8b       	std	Y+20, r26	; 0x14
     a4a:	f1 01       	movw	r30, r2
     a4c:	84 91       	lpm	r24, Z
     a4e:	47 fc       	sbrc	r4, 7
     a50:	80 81       	ld	r24, Z
     a52:	88 23       	and	r24, r24
     a54:	09 f4       	brne	.+2      	; 0xa58 <vfprintf+0x3e>
     a56:	4f c3       	rjmp	.+1694   	; 0x10f6 <__DATA_REGION_LENGTH__+0xf6>
     a58:	44 2d       	mov	r20, r4
     a5a:	91 01       	movw	r18, r2
     a5c:	2f 5f       	subi	r18, 0xFF	; 255
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	4f 4f       	sbci	r20, 0xFF	; 255
     a62:	85 32       	cpi	r24, 0x25	; 37
     a64:	19 f0       	breq	.+6      	; 0xa6c <vfprintf+0x52>
     a66:	19 01       	movw	r2, r18
     a68:	44 2e       	mov	r4, r20
     a6a:	0a c0       	rjmp	.+20     	; 0xa80 <vfprintf+0x66>
     a6c:	f9 01       	movw	r30, r18
     a6e:	84 91       	lpm	r24, Z
     a70:	47 fd       	sbrc	r20, 7
     a72:	80 81       	ld	r24, Z
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	29 0e       	add	r2, r25
     a78:	31 1c       	adc	r3, r1
     a7a:	41 1c       	adc	r4, r1
     a7c:	85 32       	cpi	r24, 0x25	; 37
     a7e:	49 f4       	brne	.+18     	; 0xa92 <vfprintf+0x78>
     a80:	b6 01       	movw	r22, r12
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     a88:	bf 86       	std	Y+15, r11	; 0x0f
     a8a:	ae 86       	std	Y+14, r10	; 0x0e
     a8c:	ae 84       	ldd	r10, Y+14	; 0x0e
     a8e:	bf 84       	ldd	r11, Y+15	; 0x0f
     a90:	dc cf       	rjmp	.-72     	; 0xa4a <vfprintf+0x30>
     a92:	10 e0       	ldi	r17, 0x00	; 0
     a94:	f1 2c       	mov	r15, r1
     a96:	00 e0       	ldi	r16, 0x00	; 0
     a98:	00 32       	cpi	r16, 0x20	; 32
     a9a:	a0 f4       	brcc	.+40     	; 0xac4 <vfprintf+0xaa>
     a9c:	8b 32       	cpi	r24, 0x2B	; 43
     a9e:	69 f0       	breq	.+26     	; 0xaba <vfprintf+0xa0>
     aa0:	30 f4       	brcc	.+12     	; 0xaae <vfprintf+0x94>
     aa2:	80 32       	cpi	r24, 0x20	; 32
     aa4:	59 f0       	breq	.+22     	; 0xabc <vfprintf+0xa2>
     aa6:	83 32       	cpi	r24, 0x23	; 35
     aa8:	69 f4       	brne	.+26     	; 0xac4 <vfprintf+0xaa>
     aaa:	00 61       	ori	r16, 0x10	; 16
     aac:	2c c0       	rjmp	.+88     	; 0xb06 <vfprintf+0xec>
     aae:	8d 32       	cpi	r24, 0x2D	; 45
     ab0:	39 f0       	breq	.+14     	; 0xac0 <vfprintf+0xa6>
     ab2:	80 33       	cpi	r24, 0x30	; 48
     ab4:	39 f4       	brne	.+14     	; 0xac4 <vfprintf+0xaa>
     ab6:	01 60       	ori	r16, 0x01	; 1
     ab8:	26 c0       	rjmp	.+76     	; 0xb06 <vfprintf+0xec>
     aba:	02 60       	ori	r16, 0x02	; 2
     abc:	04 60       	ori	r16, 0x04	; 4
     abe:	23 c0       	rjmp	.+70     	; 0xb06 <vfprintf+0xec>
     ac0:	08 60       	ori	r16, 0x08	; 8
     ac2:	21 c0       	rjmp	.+66     	; 0xb06 <vfprintf+0xec>
     ac4:	07 fd       	sbrc	r16, 7
     ac6:	29 c0       	rjmp	.+82     	; 0xb1a <vfprintf+0x100>
     ac8:	90 ed       	ldi	r25, 0xD0	; 208
     aca:	98 0f       	add	r25, r24
     acc:	9a 30       	cpi	r25, 0x0A	; 10
     ace:	78 f4       	brcc	.+30     	; 0xaee <vfprintf+0xd4>
     ad0:	06 ff       	sbrs	r16, 6
     ad2:	06 c0       	rjmp	.+12     	; 0xae0 <vfprintf+0xc6>
     ad4:	aa e0       	ldi	r26, 0x0A	; 10
     ad6:	1a 9f       	mul	r17, r26
     ad8:	90 0d       	add	r25, r0
     ada:	11 24       	eor	r1, r1
     adc:	19 2f       	mov	r17, r25
     ade:	13 c0       	rjmp	.+38     	; 0xb06 <vfprintf+0xec>
     ae0:	ea e0       	ldi	r30, 0x0A	; 10
     ae2:	fe 9e       	mul	r15, r30
     ae4:	90 0d       	add	r25, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	f9 2e       	mov	r15, r25
     aea:	00 62       	ori	r16, 0x20	; 32
     aec:	0c c0       	rjmp	.+24     	; 0xb06 <vfprintf+0xec>
     aee:	8e 32       	cpi	r24, 0x2E	; 46
     af0:	21 f4       	brne	.+8      	; 0xafa <vfprintf+0xe0>
     af2:	06 fd       	sbrc	r16, 6
     af4:	00 c3       	rjmp	.+1536   	; 0x10f6 <__DATA_REGION_LENGTH__+0xf6>
     af6:	00 64       	ori	r16, 0x40	; 64
     af8:	06 c0       	rjmp	.+12     	; 0xb06 <vfprintf+0xec>
     afa:	8c 36       	cpi	r24, 0x6C	; 108
     afc:	11 f4       	brne	.+4      	; 0xb02 <vfprintf+0xe8>
     afe:	00 68       	ori	r16, 0x80	; 128
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <vfprintf+0xec>
     b02:	88 36       	cpi	r24, 0x68	; 104
     b04:	51 f4       	brne	.+20     	; 0xb1a <vfprintf+0x100>
     b06:	f1 01       	movw	r30, r2
     b08:	84 91       	lpm	r24, Z
     b0a:	47 fc       	sbrc	r4, 7
     b0c:	80 81       	ld	r24, Z
     b0e:	ff ef       	ldi	r31, 0xFF	; 255
     b10:	2f 1a       	sub	r2, r31
     b12:	3f 0a       	sbc	r3, r31
     b14:	4f 0a       	sbc	r4, r31
     b16:	81 11       	cpse	r24, r1
     b18:	bf cf       	rjmp	.-130    	; 0xa98 <vfprintf+0x7e>
     b1a:	9b eb       	ldi	r25, 0xBB	; 187
     b1c:	98 0f       	add	r25, r24
     b1e:	93 30       	cpi	r25, 0x03	; 3
     b20:	18 f4       	brcc	.+6      	; 0xb28 <vfprintf+0x10e>
     b22:	00 61       	ori	r16, 0x10	; 16
     b24:	80 5e       	subi	r24, 0xE0	; 224
     b26:	06 c0       	rjmp	.+12     	; 0xb34 <vfprintf+0x11a>
     b28:	9b e9       	ldi	r25, 0x9B	; 155
     b2a:	98 0f       	add	r25, r24
     b2c:	93 30       	cpi	r25, 0x03	; 3
     b2e:	08 f0       	brcs	.+2      	; 0xb32 <vfprintf+0x118>
     b30:	66 c1       	rjmp	.+716    	; 0xdfe <vfprintf+0x3e4>
     b32:	0f 7e       	andi	r16, 0xEF	; 239
     b34:	06 ff       	sbrs	r16, 6
     b36:	16 e0       	ldi	r17, 0x06	; 6
     b38:	0f 73       	andi	r16, 0x3F	; 63
     b3a:	70 2e       	mov	r7, r16
     b3c:	85 36       	cpi	r24, 0x65	; 101
     b3e:	21 f4       	brne	.+8      	; 0xb48 <vfprintf+0x12e>
     b40:	20 2f       	mov	r18, r16
     b42:	20 64       	ori	r18, 0x40	; 64
     b44:	72 2e       	mov	r7, r18
     b46:	08 c0       	rjmp	.+16     	; 0xb58 <vfprintf+0x13e>
     b48:	86 36       	cpi	r24, 0x66	; 102
     b4a:	21 f4       	brne	.+8      	; 0xb54 <vfprintf+0x13a>
     b4c:	80 2f       	mov	r24, r16
     b4e:	80 68       	ori	r24, 0x80	; 128
     b50:	78 2e       	mov	r7, r24
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0x13e>
     b54:	11 11       	cpse	r17, r1
     b56:	11 50       	subi	r17, 0x01	; 1
     b58:	77 fe       	sbrs	r7, 7
     b5a:	07 c0       	rjmp	.+14     	; 0xb6a <vfprintf+0x150>
     b5c:	1c 33       	cpi	r17, 0x3C	; 60
     b5e:	50 f4       	brcc	.+20     	; 0xb74 <vfprintf+0x15a>
     b60:	ee 24       	eor	r14, r14
     b62:	e3 94       	inc	r14
     b64:	e1 0e       	add	r14, r17
     b66:	27 e0       	ldi	r18, 0x07	; 7
     b68:	0b c0       	rjmp	.+22     	; 0xb80 <vfprintf+0x166>
     b6a:	18 30       	cpi	r17, 0x08	; 8
     b6c:	38 f0       	brcs	.+14     	; 0xb7c <vfprintf+0x162>
     b6e:	27 e0       	ldi	r18, 0x07	; 7
     b70:	17 e0       	ldi	r17, 0x07	; 7
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <vfprintf+0x164>
     b74:	27 e0       	ldi	r18, 0x07	; 7
     b76:	6c e3       	ldi	r22, 0x3C	; 60
     b78:	e6 2e       	mov	r14, r22
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <vfprintf+0x166>
     b7c:	21 2f       	mov	r18, r17
     b7e:	e1 2c       	mov	r14, r1
     b80:	f5 01       	movw	r30, r10
     b82:	34 96       	adiw	r30, 0x04	; 4
     b84:	ff 87       	std	Y+15, r31	; 0x0f
     b86:	ee 87       	std	Y+14, r30	; 0x0e
     b88:	f5 01       	movw	r30, r10
     b8a:	60 81       	ld	r22, Z
     b8c:	71 81       	ldd	r23, Z+1	; 0x01
     b8e:	82 81       	ldd	r24, Z+2	; 0x02
     b90:	93 81       	ldd	r25, Z+3	; 0x03
     b92:	0e 2d       	mov	r16, r14
     b94:	ae 01       	movw	r20, r28
     b96:	4f 5f       	subi	r20, 0xFF	; 255
     b98:	5f 4f       	sbci	r21, 0xFF	; 255
     b9a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ftoa_engine>
     b9e:	5c 01       	movw	r10, r24
     ba0:	59 80       	ldd	r5, Y+1	; 0x01
     ba2:	50 fe       	sbrs	r5, 0
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <vfprintf+0x190>
     ba6:	53 fe       	sbrs	r5, 3
     ba8:	06 c0       	rjmp	.+12     	; 0xbb6 <vfprintf+0x19c>
     baa:	71 fc       	sbrc	r7, 1
     bac:	06 c0       	rjmp	.+12     	; 0xbba <vfprintf+0x1a0>
     bae:	72 fe       	sbrs	r7, 2
     bb0:	06 c0       	rjmp	.+12     	; 0xbbe <vfprintf+0x1a4>
     bb2:	00 e2       	ldi	r16, 0x20	; 32
     bb4:	05 c0       	rjmp	.+10     	; 0xbc0 <vfprintf+0x1a6>
     bb6:	0d e2       	ldi	r16, 0x2D	; 45
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <vfprintf+0x1a6>
     bba:	0b e2       	ldi	r16, 0x2B	; 43
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <vfprintf+0x1a6>
     bbe:	00 e0       	ldi	r16, 0x00	; 0
     bc0:	85 2d       	mov	r24, r5
     bc2:	8c 70       	andi	r24, 0x0C	; 12
     bc4:	19 f0       	breq	.+6      	; 0xbcc <vfprintf+0x1b2>
     bc6:	01 11       	cpse	r16, r1
     bc8:	73 c2       	rjmp	.+1254   	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
     bca:	be c2       	rjmp	.+1404   	; 0x1148 <__stack+0x49>
     bcc:	77 fe       	sbrs	r7, 7
     bce:	0f c0       	rjmp	.+30     	; 0xbee <vfprintf+0x1d4>
     bd0:	ea 0c       	add	r14, r10
     bd2:	54 fe       	sbrs	r5, 4
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <vfprintf+0x1c4>
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	81 33       	cpi	r24, 0x31	; 49
     bda:	09 f4       	brne	.+2      	; 0xbde <vfprintf+0x1c4>
     bdc:	ea 94       	dec	r14
     bde:	1e 14       	cp	r1, r14
     be0:	74 f5       	brge	.+92     	; 0xc3e <vfprintf+0x224>
     be2:	28 e0       	ldi	r18, 0x08	; 8
     be4:	2e 15       	cp	r18, r14
     be6:	78 f5       	brcc	.+94     	; 0xc46 <vfprintf+0x22c>
     be8:	38 e0       	ldi	r19, 0x08	; 8
     bea:	e3 2e       	mov	r14, r19
     bec:	2c c0       	rjmp	.+88     	; 0xc46 <vfprintf+0x22c>
     bee:	76 fc       	sbrc	r7, 6
     bf0:	2a c0       	rjmp	.+84     	; 0xc46 <vfprintf+0x22c>
     bf2:	81 2f       	mov	r24, r17
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	8a 15       	cp	r24, r10
     bf8:	9b 05       	cpc	r25, r11
     bfa:	9c f0       	brlt	.+38     	; 0xc22 <vfprintf+0x208>
     bfc:	8c ef       	ldi	r24, 0xFC	; 252
     bfe:	a8 16       	cp	r10, r24
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	b8 06       	cpc	r11, r24
     c04:	74 f0       	brlt	.+28     	; 0xc22 <vfprintf+0x208>
     c06:	97 2d       	mov	r25, r7
     c08:	90 68       	ori	r25, 0x80	; 128
     c0a:	79 2e       	mov	r7, r25
     c0c:	0a c0       	rjmp	.+20     	; 0xc22 <vfprintf+0x208>
     c0e:	e2 e0       	ldi	r30, 0x02	; 2
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	ec 0f       	add	r30, r28
     c14:	fd 1f       	adc	r31, r29
     c16:	e1 0f       	add	r30, r17
     c18:	f1 1d       	adc	r31, r1
     c1a:	80 81       	ld	r24, Z
     c1c:	80 33       	cpi	r24, 0x30	; 48
     c1e:	19 f4       	brne	.+6      	; 0xc26 <vfprintf+0x20c>
     c20:	11 50       	subi	r17, 0x01	; 1
     c22:	11 11       	cpse	r17, r1
     c24:	f4 cf       	rjmp	.-24     	; 0xc0e <vfprintf+0x1f4>
     c26:	77 fe       	sbrs	r7, 7
     c28:	0e c0       	rjmp	.+28     	; 0xc46 <vfprintf+0x22c>
     c2a:	ee 24       	eor	r14, r14
     c2c:	e3 94       	inc	r14
     c2e:	e1 0e       	add	r14, r17
     c30:	81 2f       	mov	r24, r17
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a8 16       	cp	r10, r24
     c36:	b9 06       	cpc	r11, r25
     c38:	2c f4       	brge	.+10     	; 0xc44 <vfprintf+0x22a>
     c3a:	1a 19       	sub	r17, r10
     c3c:	04 c0       	rjmp	.+8      	; 0xc46 <vfprintf+0x22c>
     c3e:	ee 24       	eor	r14, r14
     c40:	e3 94       	inc	r14
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <vfprintf+0x22c>
     c44:	10 e0       	ldi	r17, 0x00	; 0
     c46:	77 fe       	sbrs	r7, 7
     c48:	06 c0       	rjmp	.+12     	; 0xc56 <vfprintf+0x23c>
     c4a:	1a 14       	cp	r1, r10
     c4c:	1b 04       	cpc	r1, r11
     c4e:	34 f4       	brge	.+12     	; 0xc5c <vfprintf+0x242>
     c50:	c5 01       	movw	r24, r10
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <vfprintf+0x246>
     c56:	85 e0       	ldi	r24, 0x05	; 5
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <vfprintf+0x246>
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	01 11       	cpse	r16, r1
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	11 23       	and	r17, r17
     c66:	31 f0       	breq	.+12     	; 0xc74 <vfprintf+0x25a>
     c68:	21 2f       	mov	r18, r17
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	2f 5f       	subi	r18, 0xFF	; 255
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
     c70:	82 0f       	add	r24, r18
     c72:	93 1f       	adc	r25, r19
     c74:	2f 2d       	mov	r18, r15
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	82 17       	cp	r24, r18
     c7a:	93 07       	cpc	r25, r19
     c7c:	14 f4       	brge	.+4      	; 0xc82 <vfprintf+0x268>
     c7e:	f8 1a       	sub	r15, r24
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <vfprintf+0x26a>
     c82:	f1 2c       	mov	r15, r1
     c84:	87 2d       	mov	r24, r7
     c86:	89 70       	andi	r24, 0x09	; 9
     c88:	49 f4       	brne	.+18     	; 0xc9c <vfprintf+0x282>
     c8a:	ff 20       	and	r15, r15
     c8c:	39 f0       	breq	.+14     	; 0xc9c <vfprintf+0x282>
     c8e:	b6 01       	movw	r22, r12
     c90:	80 e2       	ldi	r24, 0x20	; 32
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     c98:	fa 94       	dec	r15
     c9a:	f7 cf       	rjmp	.-18     	; 0xc8a <vfprintf+0x270>
     c9c:	00 23       	and	r16, r16
     c9e:	29 f0       	breq	.+10     	; 0xcaa <vfprintf+0x290>
     ca0:	b6 01       	movw	r22, r12
     ca2:	80 2f       	mov	r24, r16
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     caa:	73 fc       	sbrc	r7, 3
     cac:	09 c0       	rjmp	.+18     	; 0xcc0 <vfprintf+0x2a6>
     cae:	ff 20       	and	r15, r15
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <vfprintf+0x2a6>
     cb2:	b6 01       	movw	r22, r12
     cb4:	80 e3       	ldi	r24, 0x30	; 48
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     cbc:	fa 94       	dec	r15
     cbe:	f7 cf       	rjmp	.-18     	; 0xcae <vfprintf+0x294>
     cc0:	77 fe       	sbrs	r7, 7
     cc2:	49 c0       	rjmp	.+146    	; 0xd56 <vfprintf+0x33c>
     cc4:	35 01       	movw	r6, r10
     cc6:	b7 fe       	sbrs	r11, 7
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <vfprintf+0x2b4>
     cca:	61 2c       	mov	r6, r1
     ccc:	71 2c       	mov	r7, r1
     cce:	c5 01       	movw	r24, r10
     cd0:	86 19       	sub	r24, r6
     cd2:	97 09       	sbc	r25, r7
     cd4:	88 24       	eor	r8, r8
     cd6:	83 94       	inc	r8
     cd8:	91 2c       	mov	r9, r1
     cda:	8c 0e       	add	r8, r28
     cdc:	9d 1e       	adc	r9, r29
     cde:	88 0e       	add	r8, r24
     ce0:	99 1e       	adc	r9, r25
     ce2:	f5 01       	movw	r30, r10
     ce4:	ee 19       	sub	r30, r14
     ce6:	f1 09       	sbc	r31, r1
     ce8:	f9 8b       	std	Y+17, r31	; 0x11
     cea:	e8 8b       	std	Y+16, r30	; 0x10
     cec:	01 2f       	mov	r16, r17
     cee:	10 e0       	ldi	r17, 0x00	; 0
     cf0:	11 95       	neg	r17
     cf2:	01 95       	neg	r16
     cf4:	11 09       	sbc	r17, r1
     cf6:	ff ef       	ldi	r31, 0xFF	; 255
     cf8:	6f 16       	cp	r6, r31
     cfa:	7f 06       	cpc	r7, r31
     cfc:	29 f4       	brne	.+10     	; 0xd08 <vfprintf+0x2ee>
     cfe:	b6 01       	movw	r22, r12
     d00:	8e e2       	ldi	r24, 0x2E	; 46
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     d08:	a6 14       	cp	r10, r6
     d0a:	b7 04       	cpc	r11, r7
     d0c:	44 f0       	brlt	.+16     	; 0xd1e <vfprintf+0x304>
     d0e:	88 89       	ldd	r24, Y+16	; 0x10
     d10:	99 89       	ldd	r25, Y+17	; 0x11
     d12:	86 15       	cp	r24, r6
     d14:	97 05       	cpc	r25, r7
     d16:	1c f4       	brge	.+6      	; 0xd1e <vfprintf+0x304>
     d18:	f4 01       	movw	r30, r8
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <vfprintf+0x306>
     d1e:	80 e3       	ldi	r24, 0x30	; 48
     d20:	f1 e0       	ldi	r31, 0x01	; 1
     d22:	6f 1a       	sub	r6, r31
     d24:	71 08       	sbc	r7, r1
     d26:	2f ef       	ldi	r18, 0xFF	; 255
     d28:	82 1a       	sub	r8, r18
     d2a:	92 0a       	sbc	r9, r18
     d2c:	60 16       	cp	r6, r16
     d2e:	71 06       	cpc	r7, r17
     d30:	2c f0       	brlt	.+10     	; 0xd3c <vfprintf+0x322>
     d32:	b6 01       	movw	r22, r12
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     d3a:	dd cf       	rjmp	.-70     	; 0xcf6 <vfprintf+0x2dc>
     d3c:	a6 14       	cp	r10, r6
     d3e:	b7 04       	cpc	r11, r7
     d40:	39 f4       	brne	.+14     	; 0xd50 <vfprintf+0x336>
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	96 33       	cpi	r25, 0x36	; 54
     d46:	18 f4       	brcc	.+6      	; 0xd4e <vfprintf+0x334>
     d48:	95 33       	cpi	r25, 0x35	; 53
     d4a:	11 f4       	brne	.+4      	; 0xd50 <vfprintf+0x336>
     d4c:	54 fe       	sbrs	r5, 4
     d4e:	81 e3       	ldi	r24, 0x31	; 49
     d50:	b6 01       	movw	r22, r12
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	51 c0       	rjmp	.+162    	; 0xdf8 <vfprintf+0x3de>
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	81 33       	cpi	r24, 0x31	; 49
     d5a:	19 f0       	breq	.+6      	; 0xd62 <vfprintf+0x348>
     d5c:	95 2d       	mov	r25, r5
     d5e:	9f 7e       	andi	r25, 0xEF	; 239
     d60:	59 2e       	mov	r5, r25
     d62:	b6 01       	movw	r22, r12
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     d6a:	11 11       	cpse	r17, r1
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <vfprintf+0x35e>
     d6e:	74 fc       	sbrc	r7, 4
     d70:	1c c0       	rjmp	.+56     	; 0xdaa <vfprintf+0x390>
     d72:	85 e6       	ldi	r24, 0x65	; 101
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	1b c0       	rjmp	.+54     	; 0xdae <vfprintf+0x394>
     d78:	b6 01       	movw	r22, r12
     d7a:	8e e2       	ldi	r24, 0x2E	; 46
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     d82:	02 e0       	ldi	r16, 0x02	; 2
     d84:	01 0f       	add	r16, r17
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	11 e0       	ldi	r17, 0x01	; 1
     d8a:	18 0f       	add	r17, r24
     d8c:	e1 e0       	ldi	r30, 0x01	; 1
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	ec 0f       	add	r30, r28
     d92:	fd 1f       	adc	r31, r29
     d94:	e8 0f       	add	r30, r24
     d96:	f1 1d       	adc	r31, r1
     d98:	80 81       	ld	r24, Z
     d9a:	b6 01       	movw	r22, r12
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     da2:	81 2f       	mov	r24, r17
     da4:	10 13       	cpse	r17, r16
     da6:	f0 cf       	rjmp	.-32     	; 0xd88 <vfprintf+0x36e>
     da8:	e2 cf       	rjmp	.-60     	; 0xd6e <vfprintf+0x354>
     daa:	85 e4       	ldi	r24, 0x45	; 69
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	b6 01       	movw	r22, r12
     db0:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     db4:	b7 fc       	sbrc	r11, 7
     db6:	05 c0       	rjmp	.+10     	; 0xdc2 <vfprintf+0x3a8>
     db8:	a1 14       	cp	r10, r1
     dba:	b1 04       	cpc	r11, r1
     dbc:	39 f4       	brne	.+14     	; 0xdcc <vfprintf+0x3b2>
     dbe:	54 fe       	sbrs	r5, 4
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <vfprintf+0x3b2>
     dc2:	b1 94       	neg	r11
     dc4:	a1 94       	neg	r10
     dc6:	b1 08       	sbc	r11, r1
     dc8:	8d e2       	ldi	r24, 0x2D	; 45
     dca:	01 c0       	rjmp	.+2      	; 0xdce <vfprintf+0x3b4>
     dcc:	8b e2       	ldi	r24, 0x2B	; 43
     dce:	b6 01       	movw	r22, r12
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     dd6:	80 e3       	ldi	r24, 0x30	; 48
     dd8:	ea e0       	ldi	r30, 0x0A	; 10
     dda:	ae 16       	cp	r10, r30
     ddc:	b1 04       	cpc	r11, r1
     dde:	2c f0       	brlt	.+10     	; 0xdea <vfprintf+0x3d0>
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	aa e0       	ldi	r26, 0x0A	; 10
     de4:	aa 1a       	sub	r10, r26
     de6:	b1 08       	sbc	r11, r1
     de8:	f7 cf       	rjmp	.-18     	; 0xdd8 <vfprintf+0x3be>
     dea:	b6 01       	movw	r22, r12
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     df2:	b6 01       	movw	r22, r12
     df4:	c5 01       	movw	r24, r10
     df6:	c0 96       	adiw	r24, 0x30	; 48
     df8:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     dfc:	72 c1       	rjmp	.+740    	; 0x10e2 <__DATA_REGION_LENGTH__+0xe2>
     dfe:	83 36       	cpi	r24, 0x63	; 99
     e00:	31 f0       	breq	.+12     	; 0xe0e <vfprintf+0x3f4>
     e02:	83 37       	cpi	r24, 0x73	; 115
     e04:	91 f0       	breq	.+36     	; 0xe2a <vfprintf+0x410>
     e06:	83 35       	cpi	r24, 0x53	; 83
     e08:	09 f0       	breq	.+2      	; 0xe0c <vfprintf+0x3f2>
     e0a:	5d c0       	rjmp	.+186    	; 0xec6 <vfprintf+0x4ac>
     e0c:	24 c0       	rjmp	.+72     	; 0xe56 <vfprintf+0x43c>
     e0e:	c5 01       	movw	r24, r10
     e10:	02 96       	adiw	r24, 0x02	; 2
     e12:	9f 87       	std	Y+15, r25	; 0x0f
     e14:	8e 87       	std	Y+14, r24	; 0x0e
     e16:	f5 01       	movw	r30, r10
     e18:	80 81       	ld	r24, Z
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	6a 88       	ldd	r6, Y+18	; 0x12
     e1e:	7b 88       	ldd	r7, Y+19	; 0x13
     e20:	8c 88       	ldd	r8, Y+20	; 0x14
     e22:	aa 24       	eor	r10, r10
     e24:	a3 94       	inc	r10
     e26:	b1 2c       	mov	r11, r1
     e28:	14 c0       	rjmp	.+40     	; 0xe52 <vfprintf+0x438>
     e2a:	c5 01       	movw	r24, r10
     e2c:	03 96       	adiw	r24, 0x03	; 3
     e2e:	9f 87       	std	Y+15, r25	; 0x0f
     e30:	8e 87       	std	Y+14, r24	; 0x0e
     e32:	f5 01       	movw	r30, r10
     e34:	60 80       	ld	r6, Z
     e36:	71 80       	ldd	r7, Z+1	; 0x01
     e38:	82 80       	ldd	r8, Z+2	; 0x02
     e3a:	06 ff       	sbrs	r16, 6
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <vfprintf+0x42a>
     e3e:	41 2f       	mov	r20, r17
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x42e>
     e44:	4f ef       	ldi	r20, 0xFF	; 255
     e46:	5f ef       	ldi	r21, 0xFF	; 255
     e48:	88 2d       	mov	r24, r8
     e4a:	b3 01       	movw	r22, r6
     e4c:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <strnlen>
     e50:	5c 01       	movw	r10, r24
     e52:	0f 77       	andi	r16, 0x7F	; 127
     e54:	15 c0       	rjmp	.+42     	; 0xe80 <vfprintf+0x466>
     e56:	c5 01       	movw	r24, r10
     e58:	03 96       	adiw	r24, 0x03	; 3
     e5a:	9f 87       	std	Y+15, r25	; 0x0f
     e5c:	8e 87       	std	Y+14, r24	; 0x0e
     e5e:	f5 01       	movw	r30, r10
     e60:	60 80       	ld	r6, Z
     e62:	71 80       	ldd	r7, Z+1	; 0x01
     e64:	82 80       	ldd	r8, Z+2	; 0x02
     e66:	06 ff       	sbrs	r16, 6
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <vfprintf+0x456>
     e6a:	41 2f       	mov	r20, r17
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <vfprintf+0x45a>
     e70:	4f ef       	ldi	r20, 0xFF	; 255
     e72:	5f ef       	ldi	r21, 0xFF	; 255
     e74:	88 2d       	mov	r24, r8
     e76:	b3 01       	movw	r22, r6
     e78:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <strnlen>
     e7c:	5c 01       	movw	r10, r24
     e7e:	00 68       	ori	r16, 0x80	; 128
     e80:	03 fd       	sbrc	r16, 3
     e82:	1d c0       	rjmp	.+58     	; 0xebe <vfprintf+0x4a4>
     e84:	8f 2d       	mov	r24, r15
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a8 16       	cp	r10, r24
     e8a:	b9 06       	cpc	r11, r25
     e8c:	c0 f4       	brcc	.+48     	; 0xebe <vfprintf+0x4a4>
     e8e:	b6 01       	movw	r22, r12
     e90:	80 e2       	ldi	r24, 0x20	; 32
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     e98:	fa 94       	dec	r15
     e9a:	f4 cf       	rjmp	.-24     	; 0xe84 <vfprintf+0x46a>
     e9c:	f3 01       	movw	r30, r6
     e9e:	84 91       	lpm	r24, Z
     ea0:	87 fc       	sbrc	r8, 7
     ea2:	80 81       	ld	r24, Z
     ea4:	ff ef       	ldi	r31, 0xFF	; 255
     ea6:	6f 1a       	sub	r6, r31
     ea8:	7f 0a       	sbc	r7, r31
     eaa:	8f 0a       	sbc	r8, r31
     eac:	b6 01       	movw	r22, r12
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
     eb4:	f1 10       	cpse	r15, r1
     eb6:	fa 94       	dec	r15
     eb8:	21 e0       	ldi	r18, 0x01	; 1
     eba:	a2 1a       	sub	r10, r18
     ebc:	b1 08       	sbc	r11, r1
     ebe:	a1 14       	cp	r10, r1
     ec0:	b1 04       	cpc	r11, r1
     ec2:	61 f7       	brne	.-40     	; 0xe9c <vfprintf+0x482>
     ec4:	0e c1       	rjmp	.+540    	; 0x10e2 <__DATA_REGION_LENGTH__+0xe2>
     ec6:	84 36       	cpi	r24, 0x64	; 100
     ec8:	11 f0       	breq	.+4      	; 0xece <vfprintf+0x4b4>
     eca:	89 36       	cpi	r24, 0x69	; 105
     ecc:	79 f5       	brne	.+94     	; 0xf2c <vfprintf+0x512>
     ece:	c5 01       	movw	r24, r10
     ed0:	07 ff       	sbrs	r16, 7
     ed2:	09 c0       	rjmp	.+18     	; 0xee6 <vfprintf+0x4cc>
     ed4:	04 96       	adiw	r24, 0x04	; 4
     ed6:	9f 87       	std	Y+15, r25	; 0x0f
     ed8:	8e 87       	std	Y+14, r24	; 0x0e
     eda:	f5 01       	movw	r30, r10
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	0a c0       	rjmp	.+20     	; 0xefa <vfprintf+0x4e0>
     ee6:	02 96       	adiw	r24, 0x02	; 2
     ee8:	9f 87       	std	Y+15, r25	; 0x0f
     eea:	8e 87       	std	Y+14, r24	; 0x0e
     eec:	f5 01       	movw	r30, r10
     eee:	60 81       	ld	r22, Z
     ef0:	71 81       	ldd	r23, Z+1	; 0x01
     ef2:	07 2e       	mov	r0, r23
     ef4:	00 0c       	add	r0, r0
     ef6:	88 0b       	sbc	r24, r24
     ef8:	99 0b       	sbc	r25, r25
     efa:	0f 76       	andi	r16, 0x6F	; 111
     efc:	e0 2e       	mov	r14, r16
     efe:	97 ff       	sbrs	r25, 7
     f00:	0a c0       	rjmp	.+20     	; 0xf16 <vfprintf+0x4fc>
     f02:	90 95       	com	r25
     f04:	80 95       	com	r24
     f06:	70 95       	com	r23
     f08:	61 95       	neg	r22
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8f 4f       	sbci	r24, 0xFF	; 255
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	f0 2f       	mov	r31, r16
     f12:	f0 68       	ori	r31, 0x80	; 128
     f14:	ef 2e       	mov	r14, r31
     f16:	2a e0       	ldi	r18, 0x0A	; 10
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	ae 01       	movw	r20, r28
     f1c:	4f 5f       	subi	r20, 0xFF	; 255
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
     f20:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <__ultoa_invert>
     f24:	a8 2e       	mov	r10, r24
     f26:	2c 85       	ldd	r18, Y+12	; 0x0c
     f28:	a2 1a       	sub	r10, r18
     f2a:	4b c0       	rjmp	.+150    	; 0xfc2 <vfprintf+0x5a8>
     f2c:	85 37       	cpi	r24, 0x75	; 117
     f2e:	29 f4       	brne	.+10     	; 0xf3a <vfprintf+0x520>
     f30:	0f 7e       	andi	r16, 0xEF	; 239
     f32:	e0 2e       	mov	r14, r16
     f34:	2a e0       	ldi	r18, 0x0A	; 10
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	25 c0       	rjmp	.+74     	; 0xf84 <vfprintf+0x56a>
     f3a:	90 2f       	mov	r25, r16
     f3c:	99 7f       	andi	r25, 0xF9	; 249
     f3e:	e9 2e       	mov	r14, r25
     f40:	8f 36       	cpi	r24, 0x6F	; 111
     f42:	c1 f0       	breq	.+48     	; 0xf74 <vfprintf+0x55a>
     f44:	18 f4       	brcc	.+6      	; 0xf4c <vfprintf+0x532>
     f46:	88 35       	cpi	r24, 0x58	; 88
     f48:	79 f0       	breq	.+30     	; 0xf68 <vfprintf+0x54e>
     f4a:	d5 c0       	rjmp	.+426    	; 0x10f6 <__DATA_REGION_LENGTH__+0xf6>
     f4c:	80 37       	cpi	r24, 0x70	; 112
     f4e:	19 f0       	breq	.+6      	; 0xf56 <vfprintf+0x53c>
     f50:	88 37       	cpi	r24, 0x78	; 120
     f52:	21 f0       	breq	.+8      	; 0xf5c <vfprintf+0x542>
     f54:	d0 c0       	rjmp	.+416    	; 0x10f6 <__DATA_REGION_LENGTH__+0xf6>
     f56:	a9 2f       	mov	r26, r25
     f58:	a0 61       	ori	r26, 0x10	; 16
     f5a:	ea 2e       	mov	r14, r26
     f5c:	e4 fe       	sbrs	r14, 4
     f5e:	0d c0       	rjmp	.+26     	; 0xf7a <vfprintf+0x560>
     f60:	ee 2d       	mov	r30, r14
     f62:	e4 60       	ori	r30, 0x04	; 4
     f64:	ee 2e       	mov	r14, r30
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <vfprintf+0x560>
     f68:	04 ff       	sbrs	r16, 4
     f6a:	0a c0       	rjmp	.+20     	; 0xf80 <vfprintf+0x566>
     f6c:	f9 2f       	mov	r31, r25
     f6e:	f6 60       	ori	r31, 0x06	; 6
     f70:	ef 2e       	mov	r14, r31
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <vfprintf+0x566>
     f74:	28 e0       	ldi	r18, 0x08	; 8
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <vfprintf+0x56a>
     f7a:	20 e1       	ldi	r18, 0x10	; 16
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <vfprintf+0x56a>
     f80:	20 e1       	ldi	r18, 0x10	; 16
     f82:	32 e0       	ldi	r19, 0x02	; 2
     f84:	c5 01       	movw	r24, r10
     f86:	e7 fe       	sbrs	r14, 7
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <vfprintf+0x582>
     f8a:	04 96       	adiw	r24, 0x04	; 4
     f8c:	9f 87       	std	Y+15, r25	; 0x0f
     f8e:	8e 87       	std	Y+14, r24	; 0x0e
     f90:	f5 01       	movw	r30, r10
     f92:	60 81       	ld	r22, Z
     f94:	71 81       	ldd	r23, Z+1	; 0x01
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <vfprintf+0x592>
     f9c:	02 96       	adiw	r24, 0x02	; 2
     f9e:	9f 87       	std	Y+15, r25	; 0x0f
     fa0:	8e 87       	std	Y+14, r24	; 0x0e
     fa2:	f5 01       	movw	r30, r10
     fa4:	60 81       	ld	r22, Z
     fa6:	71 81       	ldd	r23, Z+1	; 0x01
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	ae 01       	movw	r20, r28
     fae:	4f 5f       	subi	r20, 0xFF	; 255
     fb0:	5f 4f       	sbci	r21, 0xFF	; 255
     fb2:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <__ultoa_invert>
     fb6:	a8 2e       	mov	r10, r24
     fb8:	fc 85       	ldd	r31, Y+12	; 0x0c
     fba:	af 1a       	sub	r10, r31
     fbc:	2e 2d       	mov	r18, r14
     fbe:	2f 77       	andi	r18, 0x7F	; 127
     fc0:	e2 2e       	mov	r14, r18
     fc2:	e6 fe       	sbrs	r14, 6
     fc4:	0b c0       	rjmp	.+22     	; 0xfdc <vfprintf+0x5c2>
     fc6:	0e 2d       	mov	r16, r14
     fc8:	0e 7f       	andi	r16, 0xFE	; 254
     fca:	a1 16       	cp	r10, r17
     fcc:	50 f4       	brcc	.+20     	; 0xfe2 <vfprintf+0x5c8>
     fce:	e4 fe       	sbrs	r14, 4
     fd0:	0a c0       	rjmp	.+20     	; 0xfe6 <vfprintf+0x5cc>
     fd2:	e2 fc       	sbrc	r14, 2
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <vfprintf+0x5cc>
     fd6:	0e 2d       	mov	r16, r14
     fd8:	0e 7e       	andi	r16, 0xEE	; 238
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <vfprintf+0x5cc>
     fdc:	ba 2c       	mov	r11, r10
     fde:	0e 2d       	mov	r16, r14
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <vfprintf+0x5ce>
     fe2:	ba 2c       	mov	r11, r10
     fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <vfprintf+0x5ce>
     fe6:	b1 2e       	mov	r11, r17
     fe8:	04 ff       	sbrs	r16, 4
     fea:	0d c0       	rjmp	.+26     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     fec:	fe 01       	movw	r30, r28
     fee:	ea 0d       	add	r30, r10
     ff0:	f1 1d       	adc	r31, r1
     ff2:	80 81       	ld	r24, Z
     ff4:	80 33       	cpi	r24, 0x30	; 48
     ff6:	11 f4       	brne	.+4      	; 0xffc <vfprintf+0x5e2>
     ff8:	09 7e       	andi	r16, 0xE9	; 233
     ffa:	09 c0       	rjmp	.+18     	; 0x100e <__DATA_REGION_LENGTH__+0xe>
     ffc:	02 ff       	sbrs	r16, 2
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
    1000:	b3 94       	inc	r11
    1002:	b3 94       	inc	r11
    1004:	04 c0       	rjmp	.+8      	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    1006:	80 2f       	mov	r24, r16
    1008:	86 78       	andi	r24, 0x86	; 134
    100a:	09 f0       	breq	.+2      	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    100c:	b3 94       	inc	r11
    100e:	03 fd       	sbrc	r16, 3
    1010:	11 c0       	rjmp	.+34     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    1012:	00 ff       	sbrs	r16, 0
    1014:	06 c0       	rjmp	.+12     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1016:	bf 14       	cp	r11, r15
    1018:	88 f4       	brcc	.+34     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    101a:	fa 0c       	add	r15, r10
    101c:	1f 2d       	mov	r17, r15
    101e:	1b 19       	sub	r17, r11
    1020:	0e c0       	rjmp	.+28     	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
    1022:	bf 14       	cp	r11, r15
    1024:	60 f4       	brcc	.+24     	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
    1026:	b6 01       	movw	r22, r12
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
    1030:	b3 94       	inc	r11
    1032:	f7 cf       	rjmp	.-18     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1034:	bf 14       	cp	r11, r15
    1036:	18 f4       	brcc	.+6      	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
    1038:	fb 18       	sub	r15, r11
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    103c:	1a 2d       	mov	r17, r10
    103e:	f1 2c       	mov	r15, r1
    1040:	04 ff       	sbrs	r16, 4
    1042:	10 c0       	rjmp	.+32     	; 0x1064 <__DATA_REGION_LENGTH__+0x64>
    1044:	b6 01       	movw	r22, r12
    1046:	80 e3       	ldi	r24, 0x30	; 48
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
    104e:	02 ff       	sbrs	r16, 2
    1050:	17 c0       	rjmp	.+46     	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
    1052:	01 fd       	sbrc	r16, 1
    1054:	03 c0       	rjmp	.+6      	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
    1056:	88 e7       	ldi	r24, 0x78	; 120
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    105c:	88 e5       	ldi	r24, 0x58	; 88
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	b6 01       	movw	r22, r12
    1062:	0c c0       	rjmp	.+24     	; 0x107c <__DATA_REGION_LENGTH__+0x7c>
    1064:	80 2f       	mov	r24, r16
    1066:	86 78       	andi	r24, 0x86	; 134
    1068:	59 f0       	breq	.+22     	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
    106a:	01 ff       	sbrs	r16, 1
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    106e:	8b e2       	ldi	r24, 0x2B	; 43
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
    1072:	80 e2       	ldi	r24, 0x20	; 32
    1074:	07 fd       	sbrc	r16, 7
    1076:	8d e2       	ldi	r24, 0x2D	; 45
    1078:	b6 01       	movw	r22, r12
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
    1080:	a1 16       	cp	r10, r17
    1082:	38 f4       	brcc	.+14     	; 0x1092 <__DATA_REGION_LENGTH__+0x92>
    1084:	b6 01       	movw	r22, r12
    1086:	80 e3       	ldi	r24, 0x30	; 48
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
    108e:	11 50       	subi	r17, 0x01	; 1
    1090:	f7 cf       	rjmp	.-18     	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
    1092:	aa 94       	dec	r10
    1094:	e1 e0       	ldi	r30, 0x01	; 1
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	ec 0f       	add	r30, r28
    109a:	fd 1f       	adc	r31, r29
    109c:	ea 0d       	add	r30, r10
    109e:	f1 1d       	adc	r31, r1
    10a0:	80 81       	ld	r24, Z
    10a2:	b6 01       	movw	r22, r12
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
    10aa:	a1 10       	cpse	r10, r1
    10ac:	f2 cf       	rjmp	.-28     	; 0x1092 <__DATA_REGION_LENGTH__+0x92>
    10ae:	19 c0       	rjmp	.+50     	; 0x10e2 <__DATA_REGION_LENGTH__+0xe2>
    10b0:	f4 e0       	ldi	r31, 0x04	; 4
    10b2:	ff 15       	cp	r31, r15
    10b4:	80 f5       	brcc	.+96     	; 0x1116 <__stack+0x17>
    10b6:	84 e0       	ldi	r24, 0x04	; 4
    10b8:	f8 1a       	sub	r15, r24
    10ba:	73 fe       	sbrs	r7, 3
    10bc:	23 c0       	rjmp	.+70     	; 0x1104 <__stack+0x5>
    10be:	01 11       	cpse	r16, r1
    10c0:	2b c0       	rjmp	.+86     	; 0x1118 <__stack+0x19>
    10c2:	53 fe       	sbrs	r5, 3
    10c4:	2f c0       	rjmp	.+94     	; 0x1124 <__stack+0x25>
    10c6:	56 e0       	ldi	r21, 0x06	; 6
    10c8:	85 2e       	mov	r8, r21
    10ca:	5a e0       	ldi	r21, 0x0A	; 10
    10cc:	95 2e       	mov	r9, r21
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	a5 2e       	mov	r10, r21
    10d2:	07 2d       	mov	r16, r7
    10d4:	00 71       	andi	r16, 0x10	; 16
    10d6:	f4 01       	movw	r30, r8
    10d8:	84 91       	lpm	r24, Z
    10da:	a7 fc       	sbrc	r10, 7
    10dc:	80 81       	ld	r24, Z
    10de:	81 11       	cpse	r24, r1
    10e0:	28 c0       	rjmp	.+80     	; 0x1132 <__stack+0x33>
    10e2:	ff 20       	and	r15, r15
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <__DATA_REGION_LENGTH__+0xe8>
    10e6:	d2 cc       	rjmp	.-1628   	; 0xa8c <vfprintf+0x72>
    10e8:	b6 01       	movw	r22, r12
    10ea:	80 e2       	ldi	r24, 0x20	; 32
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
    10f2:	fa 94       	dec	r15
    10f4:	f6 cf       	rjmp	.-20     	; 0x10e2 <__DATA_REGION_LENGTH__+0xe2>
    10f6:	f6 01       	movw	r30, r12
    10f8:	87 81       	ldd	r24, Z+7	; 0x07
    10fa:	90 85       	ldd	r25, Z+8	; 0x08
    10fc:	2c c0       	rjmp	.+88     	; 0x1156 <__stack+0x57>
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	9f ef       	ldi	r25, 0xFF	; 255
    1102:	29 c0       	rjmp	.+82     	; 0x1156 <__stack+0x57>
    1104:	b6 01       	movw	r22, r12
    1106:	80 e2       	ldi	r24, 0x20	; 32
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
    110e:	fa 94       	dec	r15
    1110:	f1 10       	cpse	r15, r1
    1112:	f8 cf       	rjmp	.-16     	; 0x1104 <__stack+0x5>
    1114:	d4 cf       	rjmp	.-88     	; 0x10be <__DATA_REGION_LENGTH__+0xbe>
    1116:	f1 2c       	mov	r15, r1
    1118:	b6 01       	movw	r22, r12
    111a:	80 2f       	mov	r24, r16
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
    1122:	cf cf       	rjmp	.-98     	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
    1124:	42 e0       	ldi	r20, 0x02	; 2
    1126:	84 2e       	mov	r8, r20
    1128:	4a e0       	ldi	r20, 0x0A	; 10
    112a:	94 2e       	mov	r9, r20
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	a4 2e       	mov	r10, r20
    1130:	d0 cf       	rjmp	.-96     	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
    1132:	01 11       	cpse	r16, r1
    1134:	80 52       	subi	r24, 0x20	; 32
    1136:	b6 01       	movw	r22, r12
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <fputc>
    113e:	ff ef       	ldi	r31, 0xFF	; 255
    1140:	8f 1a       	sub	r8, r31
    1142:	9f 0a       	sbc	r9, r31
    1144:	af 0a       	sbc	r10, r31
    1146:	c7 cf       	rjmp	.-114    	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
    1148:	23 e0       	ldi	r18, 0x03	; 3
    114a:	2f 15       	cp	r18, r15
    114c:	10 f4       	brcc	.+4      	; 0x1152 <__stack+0x53>
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	b3 cf       	rjmp	.-154    	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    1152:	f1 2c       	mov	r15, r1
    1154:	b6 cf       	rjmp	.-148    	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
    1156:	64 96       	adiw	r28, 0x14	; 20
    1158:	e2 e1       	ldi	r30, 0x12	; 18
    115a:	0c 94 61 32 	jmp	0x64c2	; 0x64c2 <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

000069ca <__udivmodhi4>:
    69ca:	aa 1b       	sub	r26, r26
    69cc:	bb 1b       	sub	r27, r27
    69ce:	51 e1       	ldi	r21, 0x11	; 17
    69d0:	07 c0       	rjmp	.+14     	; 0x69e0 <__udivmodhi4_ep>

000069d2 <__udivmodhi4_loop>:
    69d2:	aa 1f       	adc	r26, r26
    69d4:	bb 1f       	adc	r27, r27
    69d6:	a6 17       	cp	r26, r22
    69d8:	b7 07       	cpc	r27, r23
    69da:	10 f0       	brcs	.+4      	; 0x69e0 <__udivmodhi4_ep>
    69dc:	a6 1b       	sub	r26, r22
    69de:	b7 0b       	sbc	r27, r23

000069e0 <__udivmodhi4_ep>:
    69e0:	88 1f       	adc	r24, r24
    69e2:	99 1f       	adc	r25, r25
    69e4:	5a 95       	dec	r21
    69e6:	a9 f7       	brne	.-22     	; 0x69d2 <__udivmodhi4_loop>
    69e8:	80 95       	com	r24
    69ea:	90 95       	com	r25
    69ec:	bc 01       	movw	r22, r24
    69ee:	cd 01       	movw	r24, r26
    69f0:	08 95       	ret

Disassembly of section .text.libgcc:

000071b2 <__tablejump2__>:
    71b2:	ee 0f       	add	r30, r30
    71b4:	ff 1f       	adc	r31, r31
    71b6:	05 90       	lpm	r0, Z+
    71b8:	f4 91       	lpm	r31, Z
    71ba:	e0 2d       	mov	r30, r0
    71bc:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00006c6a <__umulhisi3>:
    6c6a:	a2 9f       	mul	r26, r18
    6c6c:	b0 01       	movw	r22, r0
    6c6e:	b3 9f       	mul	r27, r19
    6c70:	c0 01       	movw	r24, r0
    6c72:	a3 9f       	mul	r26, r19
    6c74:	70 0d       	add	r23, r0
    6c76:	81 1d       	adc	r24, r1
    6c78:	11 24       	eor	r1, r1
    6c7a:	91 1d       	adc	r25, r1
    6c7c:	b2 9f       	mul	r27, r18
    6c7e:	70 0d       	add	r23, r0
    6c80:	81 1d       	adc	r24, r1
    6c82:	11 24       	eor	r1, r1
    6c84:	91 1d       	adc	r25, r1
    6c86:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000063e8 <__prologue_saves__>:
    63e8:	2f 92       	push	r2
    63ea:	3f 92       	push	r3
    63ec:	4f 92       	push	r4
    63ee:	5f 92       	push	r5
    63f0:	6f 92       	push	r6
    63f2:	7f 92       	push	r7
    63f4:	8f 92       	push	r8
    63f6:	9f 92       	push	r9
    63f8:	af 92       	push	r10
    63fa:	bf 92       	push	r11
    63fc:	cf 92       	push	r12
    63fe:	df 92       	push	r13
    6400:	ef 92       	push	r14
    6402:	ff 92       	push	r15
    6404:	0f 93       	push	r16
    6406:	1f 93       	push	r17
    6408:	cf 93       	push	r28
    640a:	df 93       	push	r29
    640c:	cd b7       	in	r28, 0x3d	; 61
    640e:	de b7       	in	r29, 0x3e	; 62
    6410:	ca 1b       	sub	r28, r26
    6412:	db 0b       	sbc	r29, r27
    6414:	0f b6       	in	r0, 0x3f	; 63
    6416:	f8 94       	cli
    6418:	de bf       	out	0x3e, r29	; 62
    641a:	0f be       	out	0x3f, r0	; 63
    641c:	cd bf       	out	0x3d, r28	; 61
    641e:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000064c2 <__epilogue_restores__>:
    64c2:	2a 88       	ldd	r2, Y+18	; 0x12
    64c4:	39 88       	ldd	r3, Y+17	; 0x11
    64c6:	48 88       	ldd	r4, Y+16	; 0x10
    64c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    64ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    64cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    64ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    64d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    64d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    64d4:	b9 84       	ldd	r11, Y+9	; 0x09
    64d6:	c8 84       	ldd	r12, Y+8	; 0x08
    64d8:	df 80       	ldd	r13, Y+7	; 0x07
    64da:	ee 80       	ldd	r14, Y+6	; 0x06
    64dc:	fd 80       	ldd	r15, Y+5	; 0x05
    64de:	0c 81       	ldd	r16, Y+4	; 0x04
    64e0:	1b 81       	ldd	r17, Y+3	; 0x03
    64e2:	aa 81       	ldd	r26, Y+2	; 0x02
    64e4:	b9 81       	ldd	r27, Y+1	; 0x01
    64e6:	ce 0f       	add	r28, r30
    64e8:	d1 1d       	adc	r29, r1
    64ea:	0f b6       	in	r0, 0x3f	; 63
    64ec:	f8 94       	cli
    64ee:	de bf       	out	0x3e, r29	; 62
    64f0:	0f be       	out	0x3f, r0	; 63
    64f2:	cd bf       	out	0x3d, r28	; 61
    64f4:	ed 01       	movw	r28, r26
    64f6:	08 95       	ret

Disassembly of section .text.avrlibc:

000072aa <atoi>:
    72aa:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <atol>
    72ae:	cb 01       	movw	r24, r22
    72b0:	08 95       	ret

Disassembly of section .text.avrlibc:

000070d4 <atol>:
    70d4:	2a e0       	ldi	r18, 0x0A	; 10
    70d6:	30 e0       	ldi	r19, 0x00	; 0
    70d8:	40 e0       	ldi	r20, 0x00	; 0
    70da:	50 e0       	ldi	r21, 0x00	; 0
    70dc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <strtol>
    70e0:	08 95       	ret

Disassembly of section .text.avrlibc:

00001550 <strtol>:
    1550:	2f 92       	push	r2
    1552:	3f 92       	push	r3
    1554:	4f 92       	push	r4
    1556:	5f 92       	push	r5
    1558:	6f 92       	push	r6
    155a:	7f 92       	push	r7
    155c:	8f 92       	push	r8
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	00 d0       	rcall	.+0      	; 0x1572 <strtol+0x22>
    1572:	00 d0       	rcall	.+0      	; 0x1574 <strtol+0x24>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <strtol+0x26>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	3b 01       	movw	r6, r22
    157c:	88 2e       	mov	r8, r24
    157e:	5a 01       	movw	r10, r20
    1580:	19 01       	movw	r2, r18
    1582:	41 15       	cp	r20, r1
    1584:	51 05       	cpc	r21, r1
    1586:	21 f0       	breq	.+8      	; 0x1590 <strtol+0x40>
    1588:	fa 01       	movw	r30, r20
    158a:	60 83       	st	Z, r22
    158c:	71 83       	std	Z+1, r23	; 0x01
    158e:	82 83       	std	Z+2, r24	; 0x02
    1590:	21 14       	cp	r2, r1
    1592:	31 04       	cpc	r3, r1
    1594:	29 f0       	breq	.+10     	; 0x15a0 <strtol+0x50>
    1596:	c1 01       	movw	r24, r2
    1598:	02 97       	sbiw	r24, 0x02	; 2
    159a:	83 97       	sbiw	r24, 0x23	; 35
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <strtol+0x50>
    159e:	1a c1       	rjmp	.+564    	; 0x17d4 <strtol+0x284>
    15a0:	e8 2c       	mov	r14, r8
    15a2:	63 01       	movw	r12, r6
    15a4:	ff ef       	ldi	r31, 0xFF	; 255
    15a6:	cf 1a       	sub	r12, r31
    15a8:	df 0a       	sbc	r13, r31
    15aa:	ef 0a       	sbc	r14, r31
    15ac:	f3 01       	movw	r30, r6
    15ae:	14 91       	lpm	r17, Z
    15b0:	87 fc       	sbrc	r8, 7
    15b2:	10 81       	ld	r17, Z
    15b4:	81 2f       	mov	r24, r17
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <isspace>
    15bc:	4c 2d       	mov	r20, r12
    15be:	3d 2d       	mov	r19, r13
    15c0:	2e 2d       	mov	r18, r14
    15c2:	89 2b       	or	r24, r25
    15c4:	19 f0       	breq	.+6      	; 0x15cc <strtol+0x7c>
    15c6:	36 01       	movw	r6, r12
    15c8:	8e 2c       	mov	r8, r14
    15ca:	ea cf       	rjmp	.-44     	; 0x15a0 <strtol+0x50>
    15cc:	1d 32       	cpi	r17, 0x2D	; 45
    15ce:	69 f4       	brne	.+26     	; 0x15ea <strtol+0x9a>
    15d0:	e8 2c       	mov	r14, r8
    15d2:	63 01       	movw	r12, r6
    15d4:	52 e0       	ldi	r21, 0x02	; 2
    15d6:	c5 0e       	add	r12, r21
    15d8:	d1 1c       	adc	r13, r1
    15da:	e1 1c       	adc	r14, r1
    15dc:	e4 2f       	mov	r30, r20
    15de:	f3 2f       	mov	r31, r19
    15e0:	14 91       	lpm	r17, Z
    15e2:	27 fd       	sbrc	r18, 7
    15e4:	10 81       	ld	r17, Z
    15e6:	01 e0       	ldi	r16, 0x01	; 1
    15e8:	0e c0       	rjmp	.+28     	; 0x1606 <strtol+0xb6>
    15ea:	1b 32       	cpi	r17, 0x2B	; 43
    15ec:	59 f4       	brne	.+22     	; 0x1604 <strtol+0xb4>
    15ee:	e8 2c       	mov	r14, r8
    15f0:	63 01       	movw	r12, r6
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	c8 0e       	add	r12, r24
    15f6:	d1 1c       	adc	r13, r1
    15f8:	e1 1c       	adc	r14, r1
    15fa:	e4 2f       	mov	r30, r20
    15fc:	f3 2f       	mov	r31, r19
    15fe:	14 91       	lpm	r17, Z
    1600:	27 fd       	sbrc	r18, 7
    1602:	10 81       	ld	r17, Z
    1604:	00 e0       	ldi	r16, 0x00	; 0
    1606:	21 14       	cp	r2, r1
    1608:	31 04       	cpc	r3, r1
    160a:	09 f1       	breq	.+66     	; 0x164e <strtol+0xfe>
    160c:	90 e1       	ldi	r25, 0x10	; 16
    160e:	29 16       	cp	r2, r25
    1610:	31 04       	cpc	r3, r1
    1612:	29 f4       	brne	.+10     	; 0x161e <strtol+0xce>
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <strtol+0x144>
    1616:	10 e3       	ldi	r17, 0x30	; 48
    1618:	21 14       	cp	r2, r1
    161a:	31 04       	cpc	r3, r1
    161c:	21 f1       	breq	.+72     	; 0x1666 <strtol+0x116>
    161e:	f8 e0       	ldi	r31, 0x08	; 8
    1620:	2f 16       	cp	r2, r31
    1622:	31 04       	cpc	r3, r1
    1624:	01 f1       	breq	.+64     	; 0x1666 <strtol+0x116>
    1626:	54 f4       	brge	.+20     	; 0x163c <strtol+0xec>
    1628:	32 e0       	ldi	r19, 0x02	; 2
    162a:	23 16       	cp	r2, r19
    162c:	31 04       	cpc	r3, r1
    162e:	21 f5       	brne	.+72     	; 0x1678 <strtol+0x128>
    1630:	41 2c       	mov	r4, r1
    1632:	51 2c       	mov	r5, r1
    1634:	61 2c       	mov	r6, r1
    1636:	50 e4       	ldi	r21, 0x40	; 64
    1638:	75 2e       	mov	r7, r21
    163a:	4b c0       	rjmp	.+150    	; 0x16d2 <strtol+0x182>
    163c:	4a e0       	ldi	r20, 0x0A	; 10
    163e:	24 16       	cp	r2, r20
    1640:	31 04       	cpc	r3, r1
    1642:	39 f0       	breq	.+14     	; 0x1652 <strtol+0x102>
    1644:	50 e1       	ldi	r21, 0x10	; 16
    1646:	25 16       	cp	r2, r21
    1648:	31 04       	cpc	r3, r1
    164a:	b1 f4       	brne	.+44     	; 0x1678 <strtol+0x128>
    164c:	3d c0       	rjmp	.+122    	; 0x16c8 <strtol+0x178>
    164e:	10 33       	cpi	r17, 0x30	; 48
    1650:	19 f1       	breq	.+70     	; 0x1698 <strtol+0x148>
    1652:	3a e0       	ldi	r19, 0x0A	; 10
    1654:	23 2e       	mov	r2, r19
    1656:	31 2c       	mov	r3, r1
    1658:	4c ec       	ldi	r20, 0xCC	; 204
    165a:	44 2e       	mov	r4, r20
    165c:	54 2c       	mov	r5, r4
    165e:	64 2c       	mov	r6, r4
    1660:	4c e0       	ldi	r20, 0x0C	; 12
    1662:	74 2e       	mov	r7, r20
    1664:	36 c0       	rjmp	.+108    	; 0x16d2 <strtol+0x182>
    1666:	98 e0       	ldi	r25, 0x08	; 8
    1668:	29 2e       	mov	r2, r25
    166a:	31 2c       	mov	r3, r1
    166c:	41 2c       	mov	r4, r1
    166e:	51 2c       	mov	r5, r1
    1670:	61 2c       	mov	r6, r1
    1672:	20 e1       	ldi	r18, 0x10	; 16
    1674:	72 2e       	mov	r7, r18
    1676:	2d c0       	rjmp	.+90     	; 0x16d2 <strtol+0x182>
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e8       	ldi	r25, 0x80	; 128
    1680:	91 01       	movw	r18, r2
    1682:	03 2c       	mov	r0, r3
    1684:	00 0c       	add	r0, r0
    1686:	44 0b       	sbc	r20, r20
    1688:	55 0b       	sbc	r21, r21
    168a:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <__udivmodsi4>
    168e:	29 01       	movw	r4, r18
    1690:	3a 01       	movw	r6, r20
    1692:	1f c0       	rjmp	.+62     	; 0x16d2 <strtol+0x182>
    1694:	10 33       	cpi	r17, 0x30	; 48
    1696:	c1 f4       	brne	.+48     	; 0x16c8 <strtol+0x178>
    1698:	f6 01       	movw	r30, r12
    169a:	84 91       	lpm	r24, Z
    169c:	e7 fc       	sbrc	r14, 7
    169e:	80 81       	ld	r24, Z
    16a0:	8f 7d       	andi	r24, 0xDF	; 223
    16a2:	88 35       	cpi	r24, 0x58	; 88
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <strtol+0x158>
    16a6:	b7 cf       	rjmp	.-146    	; 0x1616 <strtol+0xc6>
    16a8:	ae 2d       	mov	r26, r14
    16aa:	c6 01       	movw	r24, r12
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	a1 1d       	adc	r26, r1
    16b0:	fc 01       	movw	r30, r24
    16b2:	14 91       	lpm	r17, Z
    16b4:	a7 fd       	sbrc	r26, 7
    16b6:	10 81       	ld	r17, Z
    16b8:	e2 e0       	ldi	r30, 0x02	; 2
    16ba:	ce 0e       	add	r12, r30
    16bc:	d1 1c       	adc	r13, r1
    16be:	e1 1c       	adc	r14, r1
    16c0:	02 60       	ori	r16, 0x02	; 2
    16c2:	60 e1       	ldi	r22, 0x10	; 16
    16c4:	26 2e       	mov	r2, r22
    16c6:	31 2c       	mov	r3, r1
    16c8:	41 2c       	mov	r4, r1
    16ca:	51 2c       	mov	r5, r1
    16cc:	61 2c       	mov	r6, r1
    16ce:	88 e0       	ldi	r24, 0x08	; 8
    16d0:	78 2e       	mov	r7, r24
    16d2:	a0 e0       	ldi	r26, 0x00	; 0
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	cb 01       	movw	r24, r22
    16da:	91 01       	movw	r18, r2
    16dc:	03 2c       	mov	r0, r3
    16de:	00 0c       	add	r0, r0
    16e0:	44 0b       	sbc	r20, r20
    16e2:	55 0b       	sbc	r21, r21
    16e4:	29 83       	std	Y+1, r18	; 0x01
    16e6:	3a 83       	std	Y+2, r19	; 0x02
    16e8:	4b 83       	std	Y+3, r20	; 0x03
    16ea:	5c 83       	std	Y+4, r21	; 0x04
    16ec:	e0 ed       	ldi	r30, 0xD0	; 208
    16ee:	e1 0f       	add	r30, r17
    16f0:	ea 30       	cpi	r30, 0x0A	; 10
    16f2:	60 f0       	brcs	.+24     	; 0x170c <strtol+0x1bc>
    16f4:	2f eb       	ldi	r18, 0xBF	; 191
    16f6:	21 0f       	add	r18, r17
    16f8:	2a 31       	cpi	r18, 0x1A	; 26
    16fa:	10 f4       	brcc	.+4      	; 0x1700 <strtol+0x1b0>
    16fc:	e9 ec       	ldi	r30, 0xC9	; 201
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <strtol+0x1ba>
    1700:	2f e9       	ldi	r18, 0x9F	; 159
    1702:	21 0f       	add	r18, r17
    1704:	2a 31       	cpi	r18, 0x1A	; 26
    1706:	50 f5       	brcc	.+84     	; 0x175c <strtol+0x20c>
    1708:	e9 ea       	ldi	r30, 0xA9	; 169
    170a:	e1 0f       	add	r30, r17
    170c:	2e 2f       	mov	r18, r30
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	22 15       	cp	r18, r2
    1712:	33 05       	cpc	r19, r3
    1714:	1c f5       	brge	.+70     	; 0x175c <strtol+0x20c>
    1716:	a7 fd       	sbrc	r26, 7
    1718:	18 c0       	rjmp	.+48     	; 0x174a <strtol+0x1fa>
    171a:	46 16       	cp	r4, r22
    171c:	57 06       	cpc	r5, r23
    171e:	68 06       	cpc	r6, r24
    1720:	79 06       	cpc	r7, r25
    1722:	80 f0       	brcs	.+32     	; 0x1744 <strtol+0x1f4>
    1724:	29 81       	ldd	r18, Y+1	; 0x01
    1726:	3a 81       	ldd	r19, Y+2	; 0x02
    1728:	4b 81       	ldd	r20, Y+3	; 0x03
    172a:	5c 81       	ldd	r21, Y+4	; 0x04
    172c:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <__mulsi3>
    1730:	6e 0f       	add	r22, r30
    1732:	71 1d       	adc	r23, r1
    1734:	81 1d       	adc	r24, r1
    1736:	91 1d       	adc	r25, r1
    1738:	61 30       	cpi	r22, 0x01	; 1
    173a:	71 05       	cpc	r23, r1
    173c:	81 05       	cpc	r24, r1
    173e:	30 e8       	ldi	r19, 0x80	; 128
    1740:	93 07       	cpc	r25, r19
    1742:	10 f0       	brcs	.+4      	; 0x1748 <strtol+0x1f8>
    1744:	af ef       	ldi	r26, 0xFF	; 255
    1746:	01 c0       	rjmp	.+2      	; 0x174a <strtol+0x1fa>
    1748:	a1 e0       	ldi	r26, 0x01	; 1
    174a:	f6 01       	movw	r30, r12
    174c:	14 91       	lpm	r17, Z
    174e:	e7 fc       	sbrc	r14, 7
    1750:	10 81       	ld	r17, Z
    1752:	4f ef       	ldi	r20, 0xFF	; 255
    1754:	c4 1a       	sub	r12, r20
    1756:	d4 0a       	sbc	r13, r20
    1758:	e4 0a       	sbc	r14, r20
    175a:	c8 cf       	rjmp	.-112    	; 0x16ec <strtol+0x19c>
    175c:	20 2f       	mov	r18, r16
    175e:	21 70       	andi	r18, 0x01	; 1
    1760:	a1 14       	cp	r10, r1
    1762:	b1 04       	cpc	r11, r1
    1764:	b1 f0       	breq	.+44     	; 0x1792 <strtol+0x242>
    1766:	aa 23       	and	r26, r26
    1768:	49 f0       	breq	.+18     	; 0x177c <strtol+0x22c>
    176a:	51 e0       	ldi	r21, 0x01	; 1
    176c:	c5 1a       	sub	r12, r21
    176e:	d1 08       	sbc	r13, r1
    1770:	e1 08       	sbc	r14, r1
    1772:	f5 01       	movw	r30, r10
    1774:	c0 82       	st	Z, r12
    1776:	d1 82       	std	Z+1, r13	; 0x01
    1778:	e2 82       	std	Z+2, r14	; 0x02
    177a:	0b c0       	rjmp	.+22     	; 0x1792 <strtol+0x242>
    177c:	01 ff       	sbrs	r16, 1
    177e:	1d c0       	rjmp	.+58     	; 0x17ba <strtol+0x26a>
    1780:	f2 e0       	ldi	r31, 0x02	; 2
    1782:	cf 1a       	sub	r12, r31
    1784:	d1 08       	sbc	r13, r1
    1786:	e1 08       	sbc	r14, r1
    1788:	f5 01       	movw	r30, r10
    178a:	c0 82       	st	Z, r12
    178c:	d1 82       	std	Z+1, r13	; 0x01
    178e:	e2 82       	std	Z+2, r14	; 0x02
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <strtol+0x26a>
    1792:	a7 ff       	sbrs	r26, 7
    1794:	12 c0       	rjmp	.+36     	; 0x17ba <strtol+0x26a>
    1796:	22 23       	and	r18, r18
    1798:	29 f0       	breq	.+10     	; 0x17a4 <strtol+0x254>
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e8       	ldi	r25, 0x80	; 128
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <strtol+0x25c>
    17a4:	6f ef       	ldi	r22, 0xFF	; 255
    17a6:	7f ef       	ldi	r23, 0xFF	; 255
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	9f e7       	ldi	r25, 0x7F	; 127
    17ac:	22 e2       	ldi	r18, 0x22	; 34
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	30 93 d7 07 	sts	0x07D7, r19	; 0x8007d7 <errno+0x1>
    17b4:	20 93 d6 07 	sts	0x07D6, r18	; 0x8007d6 <errno>
    17b8:	09 c0       	rjmp	.+18     	; 0x17cc <strtol+0x27c>
    17ba:	22 23       	and	r18, r18
    17bc:	81 f0       	breq	.+32     	; 0x17de <strtol+0x28e>
    17be:	90 95       	com	r25
    17c0:	80 95       	com	r24
    17c2:	70 95       	com	r23
    17c4:	61 95       	neg	r22
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	46 2f       	mov	r20, r22
    17ce:	37 2f       	mov	r19, r23
    17d0:	28 2f       	mov	r18, r24
    17d2:	12 c0       	rjmp	.+36     	; 0x17f8 <strtol+0x2a8>
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	0d c0       	rjmp	.+26     	; 0x17f8 <strtol+0x2a8>
    17de:	97 ff       	sbrs	r25, 7
    17e0:	f5 cf       	rjmp	.-22     	; 0x17cc <strtol+0x27c>
    17e2:	82 e2       	ldi	r24, 0x22	; 34
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <errno+0x1>
    17ea:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <errno>
    17ee:	6f ef       	ldi	r22, 0xFF	; 255
    17f0:	7f ef       	ldi	r23, 0xFF	; 255
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	9f e7       	ldi	r25, 0x7F	; 127
    17f6:	ea cf       	rjmp	.-44     	; 0x17cc <strtol+0x27c>
    17f8:	64 2f       	mov	r22, r20
    17fa:	73 2f       	mov	r23, r19
    17fc:	82 2f       	mov	r24, r18
    17fe:	26 96       	adiw	r28, 0x06	; 6
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	af 90       	pop	r10
    181c:	8f 90       	pop	r8
    181e:	7f 90       	pop	r7
    1820:	6f 90       	pop	r6
    1822:	5f 90       	pop	r5
    1824:	4f 90       	pop	r4
    1826:	3f 90       	pop	r3
    1828:	2f 90       	pop	r2
    182a:	08 95       	ret

Disassembly of section .text.avrlibc:

00001f8e <__ftoa_engine>:
    1f8e:	28 30       	cpi	r18, 0x08	; 8
    1f90:	08 f0       	brcs	.+2      	; 0x1f94 <__ftoa_engine+0x6>
    1f92:	27 e0       	ldi	r18, 0x07	; 7
    1f94:	33 27       	eor	r19, r19
    1f96:	da 01       	movw	r26, r20
    1f98:	99 0f       	add	r25, r25
    1f9a:	31 1d       	adc	r19, r1
    1f9c:	87 fd       	sbrc	r24, 7
    1f9e:	91 60       	ori	r25, 0x01	; 1
    1fa0:	00 96       	adiw	r24, 0x00	; 0
    1fa2:	61 05       	cpc	r22, r1
    1fa4:	71 05       	cpc	r23, r1
    1fa6:	39 f4       	brne	.+14     	; 0x1fb6 <__ftoa_engine+0x28>
    1fa8:	32 60       	ori	r19, 0x02	; 2
    1faa:	2e 5f       	subi	r18, 0xFE	; 254
    1fac:	3d 93       	st	X+, r19
    1fae:	30 e3       	ldi	r19, 0x30	; 48
    1fb0:	2a 95       	dec	r18
    1fb2:	e1 f7       	brne	.-8      	; 0x1fac <__ftoa_engine+0x1e>
    1fb4:	08 95       	ret
    1fb6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fb8:	30 f0       	brcs	.+12     	; 0x1fc6 <__ftoa_engine+0x38>
    1fba:	80 38       	cpi	r24, 0x80	; 128
    1fbc:	71 05       	cpc	r23, r1
    1fbe:	61 05       	cpc	r22, r1
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <__ftoa_engine+0x36>
    1fc2:	3c 5f       	subi	r19, 0xFC	; 252
    1fc4:	3c 5f       	subi	r19, 0xFC	; 252
    1fc6:	3d 93       	st	X+, r19
    1fc8:	91 30       	cpi	r25, 0x01	; 1
    1fca:	08 f0       	brcs	.+2      	; 0x1fce <__ftoa_engine+0x40>
    1fcc:	80 68       	ori	r24, 0x80	; 128
    1fce:	91 1d       	adc	r25, r1
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	1f 93       	push	r17
    1fd6:	0f 93       	push	r16
    1fd8:	ff 92       	push	r15
    1fda:	ef 92       	push	r14
    1fdc:	19 2f       	mov	r17, r25
    1fde:	98 7f       	andi	r25, 0xF8	; 248
    1fe0:	96 95       	lsr	r25
    1fe2:	e9 2f       	mov	r30, r25
    1fe4:	96 95       	lsr	r25
    1fe6:	96 95       	lsr	r25
    1fe8:	e9 0f       	add	r30, r25
    1fea:	ff 27       	eor	r31, r31
    1fec:	ee 58       	subi	r30, 0x8E	; 142
    1fee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff0:	99 27       	eor	r25, r25
    1ff2:	33 27       	eor	r19, r19
    1ff4:	ee 24       	eor	r14, r14
    1ff6:	ff 24       	eor	r15, r15
    1ff8:	a7 01       	movw	r20, r14
    1ffa:	e7 01       	movw	r28, r14
    1ffc:	05 90       	lpm	r0, Z+
    1ffe:	08 94       	sec
    2000:	07 94       	ror	r0
    2002:	28 f4       	brcc	.+10     	; 0x200e <__ftoa_engine+0x80>
    2004:	36 0f       	add	r19, r22
    2006:	e7 1e       	adc	r14, r23
    2008:	f8 1e       	adc	r15, r24
    200a:	49 1f       	adc	r20, r25
    200c:	51 1d       	adc	r21, r1
    200e:	66 0f       	add	r22, r22
    2010:	77 1f       	adc	r23, r23
    2012:	88 1f       	adc	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	06 94       	lsr	r0
    2018:	a1 f7       	brne	.-24     	; 0x2002 <__ftoa_engine+0x74>
    201a:	05 90       	lpm	r0, Z+
    201c:	07 94       	ror	r0
    201e:	28 f4       	brcc	.+10     	; 0x202a <__ftoa_engine+0x9c>
    2020:	e7 0e       	add	r14, r23
    2022:	f8 1e       	adc	r15, r24
    2024:	49 1f       	adc	r20, r25
    2026:	56 1f       	adc	r21, r22
    2028:	c1 1d       	adc	r28, r1
    202a:	77 0f       	add	r23, r23
    202c:	88 1f       	adc	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	66 1f       	adc	r22, r22
    2032:	06 94       	lsr	r0
    2034:	a1 f7       	brne	.-24     	; 0x201e <__ftoa_engine+0x90>
    2036:	05 90       	lpm	r0, Z+
    2038:	07 94       	ror	r0
    203a:	28 f4       	brcc	.+10     	; 0x2046 <__ftoa_engine+0xb8>
    203c:	f8 0e       	add	r15, r24
    203e:	49 1f       	adc	r20, r25
    2040:	56 1f       	adc	r21, r22
    2042:	c7 1f       	adc	r28, r23
    2044:	d1 1d       	adc	r29, r1
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	66 1f       	adc	r22, r22
    204c:	77 1f       	adc	r23, r23
    204e:	06 94       	lsr	r0
    2050:	a1 f7       	brne	.-24     	; 0x203a <__ftoa_engine+0xac>
    2052:	05 90       	lpm	r0, Z+
    2054:	07 94       	ror	r0
    2056:	20 f4       	brcc	.+8      	; 0x2060 <__ftoa_engine+0xd2>
    2058:	49 0f       	add	r20, r25
    205a:	56 1f       	adc	r21, r22
    205c:	c7 1f       	adc	r28, r23
    205e:	d8 1f       	adc	r29, r24
    2060:	99 0f       	add	r25, r25
    2062:	66 1f       	adc	r22, r22
    2064:	77 1f       	adc	r23, r23
    2066:	88 1f       	adc	r24, r24
    2068:	06 94       	lsr	r0
    206a:	a9 f7       	brne	.-22     	; 0x2056 <__ftoa_engine+0xc8>
    206c:	84 91       	lpm	r24, Z
    206e:	10 95       	com	r17
    2070:	17 70       	andi	r17, 0x07	; 7
    2072:	41 f0       	breq	.+16     	; 0x2084 <__ftoa_engine+0xf6>
    2074:	d6 95       	lsr	r29
    2076:	c7 95       	ror	r28
    2078:	57 95       	ror	r21
    207a:	47 95       	ror	r20
    207c:	f7 94       	ror	r15
    207e:	e7 94       	ror	r14
    2080:	1a 95       	dec	r17
    2082:	c1 f7       	brne	.-16     	; 0x2074 <__ftoa_engine+0xe6>
    2084:	e8 e1       	ldi	r30, 0x18	; 24
    2086:	f1 e0       	ldi	r31, 0x01	; 1
    2088:	68 94       	set
    208a:	15 90       	lpm	r1, Z+
    208c:	15 91       	lpm	r17, Z+
    208e:	35 91       	lpm	r19, Z+
    2090:	65 91       	lpm	r22, Z+
    2092:	95 91       	lpm	r25, Z+
    2094:	05 90       	lpm	r0, Z+
    2096:	7f e2       	ldi	r23, 0x2F	; 47
    2098:	73 95       	inc	r23
    209a:	e1 18       	sub	r14, r1
    209c:	f1 0a       	sbc	r15, r17
    209e:	43 0b       	sbc	r20, r19
    20a0:	56 0b       	sbc	r21, r22
    20a2:	c9 0b       	sbc	r28, r25
    20a4:	d0 09       	sbc	r29, r0
    20a6:	c0 f7       	brcc	.-16     	; 0x2098 <__ftoa_engine+0x10a>
    20a8:	e1 0c       	add	r14, r1
    20aa:	f1 1e       	adc	r15, r17
    20ac:	43 1f       	adc	r20, r19
    20ae:	56 1f       	adc	r21, r22
    20b0:	c9 1f       	adc	r28, r25
    20b2:	d0 1d       	adc	r29, r0
    20b4:	7e f4       	brtc	.+30     	; 0x20d4 <__ftoa_engine+0x146>
    20b6:	70 33       	cpi	r23, 0x30	; 48
    20b8:	11 f4       	brne	.+4      	; 0x20be <__ftoa_engine+0x130>
    20ba:	8a 95       	dec	r24
    20bc:	e6 cf       	rjmp	.-52     	; 0x208a <__ftoa_engine+0xfc>
    20be:	e8 94       	clt
    20c0:	01 50       	subi	r16, 0x01	; 1
    20c2:	30 f0       	brcs	.+12     	; 0x20d0 <__ftoa_engine+0x142>
    20c4:	08 0f       	add	r16, r24
    20c6:	0a f4       	brpl	.+2      	; 0x20ca <__ftoa_engine+0x13c>
    20c8:	00 27       	eor	r16, r16
    20ca:	02 17       	cp	r16, r18
    20cc:	08 f4       	brcc	.+2      	; 0x20d0 <__ftoa_engine+0x142>
    20ce:	20 2f       	mov	r18, r16
    20d0:	23 95       	inc	r18
    20d2:	02 2f       	mov	r16, r18
    20d4:	7a 33       	cpi	r23, 0x3A	; 58
    20d6:	28 f0       	brcs	.+10     	; 0x20e2 <__ftoa_engine+0x154>
    20d8:	79 e3       	ldi	r23, 0x39	; 57
    20da:	7d 93       	st	X+, r23
    20dc:	2a 95       	dec	r18
    20de:	e9 f7       	brne	.-6      	; 0x20da <__ftoa_engine+0x14c>
    20e0:	10 c0       	rjmp	.+32     	; 0x2102 <__ftoa_engine+0x174>
    20e2:	7d 93       	st	X+, r23
    20e4:	2a 95       	dec	r18
    20e6:	89 f6       	brne	.-94     	; 0x208a <__ftoa_engine+0xfc>
    20e8:	06 94       	lsr	r0
    20ea:	97 95       	ror	r25
    20ec:	67 95       	ror	r22
    20ee:	37 95       	ror	r19
    20f0:	17 95       	ror	r17
    20f2:	17 94       	ror	r1
    20f4:	e1 18       	sub	r14, r1
    20f6:	f1 0a       	sbc	r15, r17
    20f8:	43 0b       	sbc	r20, r19
    20fa:	56 0b       	sbc	r21, r22
    20fc:	c9 0b       	sbc	r28, r25
    20fe:	d0 09       	sbc	r29, r0
    2100:	98 f0       	brcs	.+38     	; 0x2128 <__ftoa_engine+0x19a>
    2102:	23 95       	inc	r18
    2104:	7e 91       	ld	r23, -X
    2106:	73 95       	inc	r23
    2108:	7a 33       	cpi	r23, 0x3A	; 58
    210a:	08 f0       	brcs	.+2      	; 0x210e <__ftoa_engine+0x180>
    210c:	70 e3       	ldi	r23, 0x30	; 48
    210e:	7c 93       	st	X, r23
    2110:	20 13       	cpse	r18, r16
    2112:	b8 f7       	brcc	.-18     	; 0x2102 <__ftoa_engine+0x174>
    2114:	7e 91       	ld	r23, -X
    2116:	70 61       	ori	r23, 0x10	; 16
    2118:	7d 93       	st	X+, r23
    211a:	30 f0       	brcs	.+12     	; 0x2128 <__ftoa_engine+0x19a>
    211c:	83 95       	inc	r24
    211e:	71 e3       	ldi	r23, 0x31	; 49
    2120:	7d 93       	st	X+, r23
    2122:	70 e3       	ldi	r23, 0x30	; 48
    2124:	2a 95       	dec	r18
    2126:	e1 f7       	brne	.-8      	; 0x2120 <__ftoa_engine+0x192>
    2128:	11 24       	eor	r1, r1
    212a:	ef 90       	pop	r14
    212c:	ff 90       	pop	r15
    212e:	0f 91       	pop	r16
    2130:	1f 91       	pop	r17
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	99 27       	eor	r25, r25
    2138:	87 fd       	sbrc	r24, 7
    213a:	90 95       	com	r25
    213c:	08 95       	ret

Disassembly of section .text.avrlibc:

00006f76 <isspace>:
    6f76:	91 11       	cpse	r25, r1
    6f78:	0c 94 77 39 	jmp	0x72ee	; 0x72ee <__ctype_isfalse>
    6f7c:	80 32       	cpi	r24, 0x20	; 32
    6f7e:	19 f0       	breq	.+6      	; 0x6f86 <isspace+0x10>
    6f80:	89 50       	subi	r24, 0x09	; 9
    6f82:	85 50       	subi	r24, 0x05	; 5
    6f84:	c8 f7       	brcc	.-14     	; 0x6f78 <isspace+0x2>
    6f86:	08 95       	ret

Disassembly of section .text.avrlibc:

00006692 <memcpy>:
    6692:	cf 92       	push	r12
    6694:	df 92       	push	r13
    6696:	ef 92       	push	r14
    6698:	dc 01       	movw	r26, r24
    669a:	6a 01       	movw	r12, r20
    669c:	e6 2e       	mov	r14, r22
    669e:	28 0f       	add	r18, r24
    66a0:	39 1f       	adc	r19, r25
    66a2:	a2 17       	cp	r26, r18
    66a4:	b3 07       	cpc	r27, r19
    66a6:	51 f0       	breq	.+20     	; 0x66bc <memcpy+0x2a>
    66a8:	f6 01       	movw	r30, r12
    66aa:	44 91       	lpm	r20, Z
    66ac:	e7 fc       	sbrc	r14, 7
    66ae:	40 81       	ld	r20, Z
    66b0:	4d 93       	st	X+, r20
    66b2:	4f ef       	ldi	r20, 0xFF	; 255
    66b4:	c4 1a       	sub	r12, r20
    66b6:	d4 0a       	sbc	r13, r20
    66b8:	e4 0a       	sbc	r14, r20
    66ba:	f3 cf       	rjmp	.-26     	; 0x66a2 <memcpy+0x10>
    66bc:	ef 90       	pop	r14
    66be:	df 90       	pop	r13
    66c0:	cf 90       	pop	r12
    66c2:	08 95       	ret

Disassembly of section .text.avrlibc:

000060aa <strcmp>:
    60aa:	cf 92       	push	r12
    60ac:	df 92       	push	r13
    60ae:	ef 92       	push	r14
    60b0:	6b 01       	movw	r12, r22
    60b2:	e8 2e       	mov	r14, r24
    60b4:	f6 01       	movw	r30, r12
    60b6:	84 91       	lpm	r24, Z
    60b8:	e7 fc       	sbrc	r14, 7
    60ba:	80 81       	ld	r24, Z
    60bc:	f9 01       	movw	r30, r18
    60be:	54 91       	lpm	r21, Z
    60c0:	47 fd       	sbrc	r20, 7
    60c2:	50 81       	ld	r21, Z
    60c4:	85 13       	cpse	r24, r21
    60c6:	0b c0       	rjmp	.+22     	; 0x60de <strcmp+0x34>
    60c8:	88 23       	and	r24, r24
    60ca:	41 f0       	breq	.+16     	; 0x60dc <strcmp+0x32>
    60cc:	8f ef       	ldi	r24, 0xFF	; 255
    60ce:	c8 1a       	sub	r12, r24
    60d0:	d8 0a       	sbc	r13, r24
    60d2:	e8 0a       	sbc	r14, r24
    60d4:	2f 5f       	subi	r18, 0xFF	; 255
    60d6:	3f 4f       	sbci	r19, 0xFF	; 255
    60d8:	4f 4f       	sbci	r20, 0xFF	; 255
    60da:	ec cf       	rjmp	.-40     	; 0x60b4 <strcmp+0xa>
    60dc:	58 2f       	mov	r21, r24
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	85 1b       	sub	r24, r21
    60e2:	91 09       	sbc	r25, r1
    60e4:	ef 90       	pop	r14
    60e6:	df 90       	pop	r13
    60e8:	cf 90       	pop	r12
    60ea:	08 95       	ret

Disassembly of section .text.avrlibc:

00005120 <strncmp>:
    5120:	cf 92       	push	r12
    5122:	df 92       	push	r13
    5124:	ef 92       	push	r14
    5126:	0f 93       	push	r16
    5128:	1f 93       	push	r17
    512a:	6b 01       	movw	r12, r22
    512c:	e8 2e       	mov	r14, r24
    512e:	01 15       	cp	r16, r1
    5130:	11 05       	cpc	r17, r1
    5132:	19 f1       	breq	.+70     	; 0x517a <strncmp+0x5a>
    5134:	01 50       	subi	r16, 0x01	; 1
    5136:	11 09       	sbc	r17, r1
    5138:	f6 01       	movw	r30, r12
    513a:	84 91       	lpm	r24, Z
    513c:	e7 fc       	sbrc	r14, 7
    513e:	80 81       	ld	r24, Z
    5140:	88 23       	and	r24, r24
    5142:	99 f0       	breq	.+38     	; 0x516a <strncmp+0x4a>
    5144:	f9 01       	movw	r30, r18
    5146:	94 91       	lpm	r25, Z
    5148:	47 fd       	sbrc	r20, 7
    514a:	90 81       	ld	r25, Z
    514c:	99 23       	and	r25, r25
    514e:	69 f0       	breq	.+26     	; 0x516a <strncmp+0x4a>
    5150:	01 15       	cp	r16, r1
    5152:	11 05       	cpc	r17, r1
    5154:	51 f0       	breq	.+20     	; 0x516a <strncmp+0x4a>
    5156:	89 13       	cpse	r24, r25
    5158:	08 c0       	rjmp	.+16     	; 0x516a <strncmp+0x4a>
    515a:	8f ef       	ldi	r24, 0xFF	; 255
    515c:	c8 1a       	sub	r12, r24
    515e:	d8 0a       	sbc	r13, r24
    5160:	e8 0a       	sbc	r14, r24
    5162:	2f 5f       	subi	r18, 0xFF	; 255
    5164:	3f 4f       	sbci	r19, 0xFF	; 255
    5166:	4f 4f       	sbci	r20, 0xFF	; 255
    5168:	e5 cf       	rjmp	.-54     	; 0x5134 <strncmp+0x14>
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	f9 01       	movw	r30, r18
    516e:	24 91       	lpm	r18, Z
    5170:	47 fd       	sbrc	r20, 7
    5172:	20 81       	ld	r18, Z
    5174:	82 1b       	sub	r24, r18
    5176:	91 09       	sbc	r25, r1
    5178:	02 c0       	rjmp	.+4      	; 0x517e <strncmp+0x5e>
    517a:	80 e0       	ldi	r24, 0x00	; 0
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	1f 91       	pop	r17
    5180:	0f 91       	pop	r16
    5182:	ef 90       	pop	r14
    5184:	df 90       	pop	r13
    5186:	cf 90       	pop	r12
    5188:	08 95       	ret

Disassembly of section .text.avrlibc:

000068fc <strlen>:
    68fc:	cf 92       	push	r12
    68fe:	df 92       	push	r13
    6900:	ef 92       	push	r14
    6902:	6b 01       	movw	r12, r22
    6904:	e8 2e       	mov	r14, r24
    6906:	a8 2f       	mov	r26, r24
    6908:	cb 01       	movw	r24, r22
    690a:	fc 01       	movw	r30, r24
    690c:	24 91       	lpm	r18, Z
    690e:	a7 fd       	sbrc	r26, 7
    6910:	20 81       	ld	r18, Z
    6912:	22 23       	and	r18, r18
    6914:	19 f0       	breq	.+6      	; 0x691c <strlen+0x20>
    6916:	01 96       	adiw	r24, 0x01	; 1
    6918:	a1 1d       	adc	r26, r1
    691a:	f7 cf       	rjmp	.-18     	; 0x690a <strlen+0xe>
    691c:	8c 19       	sub	r24, r12
    691e:	9d 09       	sbc	r25, r13
    6920:	ef 90       	pop	r14
    6922:	df 90       	pop	r13
    6924:	cf 90       	pop	r12
    6926:	08 95       	ret

Disassembly of section .text.avrlibc:

00006c88 <strcpy>:
    6c88:	9a 01       	movw	r18, r20
    6c8a:	46 2f       	mov	r20, r22
    6c8c:	dc 01       	movw	r26, r24
    6c8e:	f9 01       	movw	r30, r18
    6c90:	54 91       	lpm	r21, Z
    6c92:	47 fd       	sbrc	r20, 7
    6c94:	50 81       	ld	r21, Z
    6c96:	5d 93       	st	X+, r21
    6c98:	55 23       	and	r21, r21
    6c9a:	21 f0       	breq	.+8      	; 0x6ca4 <strcpy+0x1c>
    6c9c:	2f 5f       	subi	r18, 0xFF	; 255
    6c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    6ca0:	4f 4f       	sbci	r20, 0xFF	; 255
    6ca2:	f5 cf       	rjmp	.-22     	; 0x6c8e <strcpy+0x6>
    6ca4:	08 95       	ret

Disassembly of section .text.avrlibc:

000064f8 <strnlen>:
    64f8:	cf 92       	push	r12
    64fa:	df 92       	push	r13
    64fc:	ef 92       	push	r14
    64fe:	6b 01       	movw	r12, r22
    6500:	e8 2e       	mov	r14, r24
    6502:	a8 2f       	mov	r26, r24
    6504:	cb 01       	movw	r24, r22
    6506:	41 15       	cp	r20, r1
    6508:	51 05       	cpc	r21, r1
    650a:	31 f4       	brne	.+12     	; 0x6518 <strnlen+0x20>
    650c:	8c 19       	sub	r24, r12
    650e:	9d 09       	sbc	r25, r13
    6510:	ef 90       	pop	r14
    6512:	df 90       	pop	r13
    6514:	cf 90       	pop	r12
    6516:	08 95       	ret
    6518:	fc 01       	movw	r30, r24
    651a:	24 91       	lpm	r18, Z
    651c:	a7 fd       	sbrc	r26, 7
    651e:	20 81       	ld	r18, Z
    6520:	22 23       	and	r18, r18
    6522:	a1 f3       	breq	.-24     	; 0x650c <strnlen+0x14>
    6524:	01 96       	adiw	r24, 0x01	; 1
    6526:	a1 1d       	adc	r26, r1
    6528:	41 50       	subi	r20, 0x01	; 1
    652a:	51 09       	sbc	r21, r1
    652c:	ec cf       	rjmp	.-40     	; 0x6506 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00004cb8 <fputc>:
    4cb8:	0f 93       	push	r16
    4cba:	1f 93       	push	r17
    4cbc:	cf 93       	push	r28
    4cbe:	df 93       	push	r29
    4cc0:	fb 01       	movw	r30, r22
    4cc2:	24 81       	ldd	r18, Z+4	; 0x04
    4cc4:	21 fd       	sbrc	r18, 1
    4cc6:	03 c0       	rjmp	.+6      	; 0x4cce <fputc+0x16>
    4cc8:	8f ef       	ldi	r24, 0xFF	; 255
    4cca:	9f ef       	ldi	r25, 0xFF	; 255
    4ccc:	2c c0       	rjmp	.+88     	; 0x4d26 <fputc+0x6e>
    4cce:	22 ff       	sbrs	r18, 2
    4cd0:	16 c0       	rjmp	.+44     	; 0x4cfe <fputc+0x46>
    4cd2:	47 81       	ldd	r20, Z+7	; 0x07
    4cd4:	50 85       	ldd	r21, Z+8	; 0x08
    4cd6:	25 81       	ldd	r18, Z+5	; 0x05
    4cd8:	36 81       	ldd	r19, Z+6	; 0x06
    4cda:	42 17       	cp	r20, r18
    4cdc:	53 07       	cpc	r21, r19
    4cde:	44 f4       	brge	.+16     	; 0x4cf0 <fputc+0x38>
    4ce0:	a0 81       	ld	r26, Z
    4ce2:	b1 81       	ldd	r27, Z+1	; 0x01
    4ce4:	9d 01       	movw	r18, r26
    4ce6:	2f 5f       	subi	r18, 0xFF	; 255
    4ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cea:	31 83       	std	Z+1, r19	; 0x01
    4cec:	20 83       	st	Z, r18
    4cee:	8c 93       	st	X, r24
    4cf0:	27 81       	ldd	r18, Z+7	; 0x07
    4cf2:	30 85       	ldd	r19, Z+8	; 0x08
    4cf4:	2f 5f       	subi	r18, 0xFF	; 255
    4cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf8:	30 87       	std	Z+8, r19	; 0x08
    4cfa:	27 83       	std	Z+7, r18	; 0x07
    4cfc:	14 c0       	rjmp	.+40     	; 0x4d26 <fputc+0x6e>
    4cfe:	8b 01       	movw	r16, r22
    4d00:	ec 01       	movw	r28, r24
    4d02:	fb 01       	movw	r30, r22
    4d04:	01 84       	ldd	r0, Z+9	; 0x09
    4d06:	f2 85       	ldd	r31, Z+10	; 0x0a
    4d08:	e0 2d       	mov	r30, r0
    4d0a:	09 95       	icall
    4d0c:	89 2b       	or	r24, r25
    4d0e:	e1 f6       	brne	.-72     	; 0x4cc8 <fputc+0x10>
    4d10:	d8 01       	movw	r26, r16
    4d12:	17 96       	adiw	r26, 0x07	; 7
    4d14:	8d 91       	ld	r24, X+
    4d16:	9c 91       	ld	r25, X
    4d18:	18 97       	sbiw	r26, 0x08	; 8
    4d1a:	01 96       	adiw	r24, 0x01	; 1
    4d1c:	18 96       	adiw	r26, 0x08	; 8
    4d1e:	9c 93       	st	X, r25
    4d20:	8e 93       	st	-X, r24
    4d22:	17 97       	sbiw	r26, 0x07	; 7
    4d24:	ce 01       	movw	r24, r28
    4d26:	df 91       	pop	r29
    4d28:	cf 91       	pop	r28
    4d2a:	1f 91       	pop	r17
    4d2c:	0f 91       	pop	r16
    4d2e:	08 95       	ret

Disassembly of section .text.avrlibc:

00005f14 <sprintf>:
    5f14:	af e0       	ldi	r26, 0x0F	; 15
    5f16:	b0 e0       	ldi	r27, 0x00	; 0
    5f18:	e0 e9       	ldi	r30, 0x90	; 144
    5f1a:	ff e2       	ldi	r31, 0x2F	; 47
    5f1c:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__prologue_saves__+0x1c>
    5f20:	0e 89       	ldd	r16, Y+22	; 0x16
    5f22:	1f 89       	ldd	r17, Y+23	; 0x17
    5f24:	86 e0       	ldi	r24, 0x06	; 6
    5f26:	8d 83       	std	Y+5, r24	; 0x05
    5f28:	1a 83       	std	Y+2, r17	; 0x02
    5f2a:	09 83       	std	Y+1, r16	; 0x01
    5f2c:	8f ef       	ldi	r24, 0xFF	; 255
    5f2e:	9f e7       	ldi	r25, 0x7F	; 127
    5f30:	9f 83       	std	Y+7, r25	; 0x07
    5f32:	8e 83       	std	Y+6, r24	; 0x06
    5f34:	9e 01       	movw	r18, r28
    5f36:	25 5e       	subi	r18, 0xE5	; 229
    5f38:	3f 4f       	sbci	r19, 0xFF	; 255
    5f3a:	48 8d       	ldd	r20, Y+24	; 0x18
    5f3c:	59 8d       	ldd	r21, Y+25	; 0x19
    5f3e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5f40:	ce 01       	movw	r24, r28
    5f42:	01 96       	adiw	r24, 0x01	; 1
    5f44:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vfprintf>
    5f48:	e8 85       	ldd	r30, Y+8	; 0x08
    5f4a:	f9 85       	ldd	r31, Y+9	; 0x09
    5f4c:	e0 0f       	add	r30, r16
    5f4e:	f1 1f       	adc	r31, r17
    5f50:	10 82       	st	Z, r1
    5f52:	2f 96       	adiw	r28, 0x0f	; 15
    5f54:	e4 e0       	ldi	r30, 0x04	; 4
    5f56:	0c 94 6f 32 	jmp	0x64de	; 0x64de <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00003f76 <__ultoa_invert>:
    3f76:	fa 01       	movw	r30, r20
    3f78:	aa 27       	eor	r26, r26
    3f7a:	28 30       	cpi	r18, 0x08	; 8
    3f7c:	51 f1       	breq	.+84     	; 0x3fd2 <__ultoa_invert+0x5c>
    3f7e:	20 31       	cpi	r18, 0x10	; 16
    3f80:	81 f1       	breq	.+96     	; 0x3fe2 <__ultoa_invert+0x6c>
    3f82:	e8 94       	clt
    3f84:	6f 93       	push	r22
    3f86:	6e 7f       	andi	r22, 0xFE	; 254
    3f88:	6e 5f       	subi	r22, 0xFE	; 254
    3f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f90:	af 4f       	sbci	r26, 0xFF	; 255
    3f92:	b1 e0       	ldi	r27, 0x01	; 1
    3f94:	3e d0       	rcall	.+124    	; 0x4012 <__ultoa_invert+0x9c>
    3f96:	b4 e0       	ldi	r27, 0x04	; 4
    3f98:	3c d0       	rcall	.+120    	; 0x4012 <__ultoa_invert+0x9c>
    3f9a:	67 0f       	add	r22, r23
    3f9c:	78 1f       	adc	r23, r24
    3f9e:	89 1f       	adc	r24, r25
    3fa0:	9a 1f       	adc	r25, r26
    3fa2:	a1 1d       	adc	r26, r1
    3fa4:	68 0f       	add	r22, r24
    3fa6:	79 1f       	adc	r23, r25
    3fa8:	8a 1f       	adc	r24, r26
    3faa:	91 1d       	adc	r25, r1
    3fac:	a1 1d       	adc	r26, r1
    3fae:	6a 0f       	add	r22, r26
    3fb0:	71 1d       	adc	r23, r1
    3fb2:	81 1d       	adc	r24, r1
    3fb4:	91 1d       	adc	r25, r1
    3fb6:	a1 1d       	adc	r26, r1
    3fb8:	20 d0       	rcall	.+64     	; 0x3ffa <__ultoa_invert+0x84>
    3fba:	09 f4       	brne	.+2      	; 0x3fbe <__ultoa_invert+0x48>
    3fbc:	68 94       	set
    3fbe:	3f 91       	pop	r19
    3fc0:	2a e0       	ldi	r18, 0x0A	; 10
    3fc2:	26 9f       	mul	r18, r22
    3fc4:	11 24       	eor	r1, r1
    3fc6:	30 19       	sub	r19, r0
    3fc8:	30 5d       	subi	r19, 0xD0	; 208
    3fca:	31 93       	st	Z+, r19
    3fcc:	de f6       	brtc	.-74     	; 0x3f84 <__ultoa_invert+0xe>
    3fce:	cf 01       	movw	r24, r30
    3fd0:	08 95       	ret
    3fd2:	46 2f       	mov	r20, r22
    3fd4:	47 70       	andi	r20, 0x07	; 7
    3fd6:	40 5d       	subi	r20, 0xD0	; 208
    3fd8:	41 93       	st	Z+, r20
    3fda:	b3 e0       	ldi	r27, 0x03	; 3
    3fdc:	0f d0       	rcall	.+30     	; 0x3ffc <__ultoa_invert+0x86>
    3fde:	c9 f7       	brne	.-14     	; 0x3fd2 <__ultoa_invert+0x5c>
    3fe0:	f6 cf       	rjmp	.-20     	; 0x3fce <__ultoa_invert+0x58>
    3fe2:	46 2f       	mov	r20, r22
    3fe4:	4f 70       	andi	r20, 0x0F	; 15
    3fe6:	40 5d       	subi	r20, 0xD0	; 208
    3fe8:	4a 33       	cpi	r20, 0x3A	; 58
    3fea:	18 f0       	brcs	.+6      	; 0x3ff2 <__ultoa_invert+0x7c>
    3fec:	49 5d       	subi	r20, 0xD9	; 217
    3fee:	31 fd       	sbrc	r19, 1
    3ff0:	40 52       	subi	r20, 0x20	; 32
    3ff2:	41 93       	st	Z+, r20
    3ff4:	02 d0       	rcall	.+4      	; 0x3ffa <__ultoa_invert+0x84>
    3ff6:	a9 f7       	brne	.-22     	; 0x3fe2 <__ultoa_invert+0x6c>
    3ff8:	ea cf       	rjmp	.-44     	; 0x3fce <__ultoa_invert+0x58>
    3ffa:	b4 e0       	ldi	r27, 0x04	; 4
    3ffc:	a6 95       	lsr	r26
    3ffe:	97 95       	ror	r25
    4000:	87 95       	ror	r24
    4002:	77 95       	ror	r23
    4004:	67 95       	ror	r22
    4006:	ba 95       	dec	r27
    4008:	c9 f7       	brne	.-14     	; 0x3ffc <__ultoa_invert+0x86>
    400a:	00 97       	sbiw	r24, 0x00	; 0
    400c:	61 05       	cpc	r22, r1
    400e:	71 05       	cpc	r23, r1
    4010:	08 95       	ret
    4012:	9b 01       	movw	r18, r22
    4014:	ac 01       	movw	r20, r24
    4016:	0a 2e       	mov	r0, r26
    4018:	06 94       	lsr	r0
    401a:	57 95       	ror	r21
    401c:	47 95       	ror	r20
    401e:	37 95       	ror	r19
    4020:	27 95       	ror	r18
    4022:	ba 95       	dec	r27
    4024:	c9 f7       	brne	.-14     	; 0x4018 <__ultoa_invert+0xa2>
    4026:	62 0f       	add	r22, r18
    4028:	73 1f       	adc	r23, r19
    402a:	84 1f       	adc	r24, r20
    402c:	95 1f       	adc	r25, r21
    402e:	a0 1d       	adc	r26, r0
    4030:	08 95       	ret

Disassembly of section .text.avrlibc:

000072ee <__ctype_isfalse>:
    72ee:	99 27       	eor	r25, r25
    72f0:	88 27       	eor	r24, r24

000072f2 <__ctype_istrue>:
    72f2:	08 95       	ret

Disassembly of section .text.avrlibc:

00006a60 <eeprom_read_block>:
    6a60:	ba 01       	movw	r22, r20
    6a62:	a9 01       	movw	r20, r18
    6a64:	dc 01       	movw	r26, r24
    6a66:	cb 01       	movw	r24, r22

00006a68 <eeprom_read_blraw>:
    6a68:	fc 01       	movw	r30, r24
    6a6a:	f9 99       	sbic	0x1f, 1	; 31
    6a6c:	fe cf       	rjmp	.-4      	; 0x6a6a <eeprom_read_blraw+0x2>
    6a6e:	06 c0       	rjmp	.+12     	; 0x6a7c <eeprom_read_blraw+0x14>
    6a70:	f2 bd       	out	0x22, r31	; 34
    6a72:	e1 bd       	out	0x21, r30	; 33
    6a74:	f8 9a       	sbi	0x1f, 0	; 31
    6a76:	31 96       	adiw	r30, 0x01	; 1
    6a78:	00 b4       	in	r0, 0x20	; 32
    6a7a:	0d 92       	st	X+, r0
    6a7c:	41 50       	subi	r20, 0x01	; 1
    6a7e:	50 40       	sbci	r21, 0x00	; 0
    6a80:	b8 f7       	brcc	.-18     	; 0x6a70 <eeprom_read_blraw+0x8>
    6a82:	08 95       	ret

Disassembly of section .text.avrlibc:

00006f88 <eeprom_read_byte>:
    6f88:	cb 01       	movw	r24, r22
    6f8a:	f9 99       	sbic	0x1f, 1	; 31
    6f8c:	fe cf       	rjmp	.-4      	; 0x6f8a <eeprom_read_byte+0x2>
    6f8e:	92 bd       	out	0x22, r25	; 34
    6f90:	81 bd       	out	0x21, r24	; 33
    6f92:	f8 9a       	sbi	0x1f, 0	; 31
    6f94:	99 27       	eor	r25, r25
    6f96:	80 b5       	in	r24, 0x20	; 32
    6f98:	08 95       	ret

Disassembly of section .text.avrlibc:

000070e2 <eeprom_read_dword>:
    70e2:	cb 01       	movw	r24, r22
    70e4:	a6 e1       	ldi	r26, 0x16	; 22
    70e6:	b0 e0       	ldi	r27, 0x00	; 0
    70e8:	44 e0       	ldi	r20, 0x04	; 4
    70ea:	50 e0       	ldi	r21, 0x00	; 0
    70ec:	0c 94 34 35 	jmp	0x6a68	; 0x6a68 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000070f0 <eeprom_read_word>:
    70f0:	cb 01       	movw	r24, r22
    70f2:	a8 e1       	ldi	r26, 0x18	; 24
    70f4:	b0 e0       	ldi	r27, 0x00	; 0
    70f6:	42 e0       	ldi	r20, 0x02	; 2
    70f8:	50 e0       	ldi	r21, 0x00	; 0
    70fa:	0c 94 34 35 	jmp	0x6a68	; 0x6a68 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00005f9e <eeprom_update_block>:
    5f9e:	cf 92       	push	r12
    5fa0:	df 92       	push	r13
    5fa2:	ef 92       	push	r14
    5fa4:	21 50       	subi	r18, 0x01	; 1
    5fa6:	31 09       	sbc	r19, r1
    5fa8:	c0 f0       	brcs	.+48     	; 0x5fda <eeprom_update_block+0x3c>
    5faa:	6b 01       	movw	r12, r22
    5fac:	e8 2e       	mov	r14, r24
    5fae:	c2 0e       	add	r12, r18
    5fb0:	d3 1e       	adc	r13, r19
    5fb2:	e1 1c       	adc	r14, r1
    5fb4:	ca 01       	movw	r24, r20
    5fb6:	82 0f       	add	r24, r18
    5fb8:	93 1f       	adc	r25, r19
    5fba:	42 2f       	mov	r20, r18
    5fbc:	73 2f       	mov	r23, r19
    5fbe:	f6 01       	movw	r30, r12
    5fc0:	5e 2d       	mov	r21, r14
    5fc2:	0e 94 1c 39 	call	0x7238	; 0x7238 <__xload_1>
    5fc6:	26 2f       	mov	r18, r22
    5fc8:	0e 94 43 35 	call	0x6a86	; 0x6a86 <eeprom_update_r18>
    5fcc:	31 e0       	ldi	r19, 0x01	; 1
    5fce:	c3 1a       	sub	r12, r19
    5fd0:	d1 08       	sbc	r13, r1
    5fd2:	e1 08       	sbc	r14, r1
    5fd4:	41 50       	subi	r20, 0x01	; 1
    5fd6:	70 40       	sbci	r23, 0x00	; 0
    5fd8:	90 f7       	brcc	.-28     	; 0x5fbe <eeprom_update_block+0x20>
    5fda:	ef 90       	pop	r14
    5fdc:	df 90       	pop	r13
    5fde:	cf 90       	pop	r12
    5fe0:	08 95       	ret

Disassembly of section .text.avrlibc:

00006a84 <eeprom_update_byte>:
    6a84:	26 2f       	mov	r18, r22

00006a86 <eeprom_update_r18>:
    6a86:	f9 99       	sbic	0x1f, 1	; 31
    6a88:	fe cf       	rjmp	.-4      	; 0x6a86 <eeprom_update_r18>
    6a8a:	92 bd       	out	0x22, r25	; 34
    6a8c:	81 bd       	out	0x21, r24	; 33
    6a8e:	f8 9a       	sbi	0x1f, 0	; 31
    6a90:	01 97       	sbiw	r24, 0x01	; 1
    6a92:	00 b4       	in	r0, 0x20	; 32
    6a94:	02 16       	cp	r0, r18
    6a96:	39 f0       	breq	.+14     	; 0x6aa6 <eeprom_update_r18+0x20>
    6a98:	1f ba       	out	0x1f, r1	; 31
    6a9a:	20 bd       	out	0x20, r18	; 32
    6a9c:	0f b6       	in	r0, 0x3f	; 63
    6a9e:	f8 94       	cli
    6aa0:	fa 9a       	sbi	0x1f, 2	; 31
    6aa2:	f9 9a       	sbi	0x1f, 1	; 31
    6aa4:	0f be       	out	0x3f, r0	; 63
    6aa6:	08 95       	ret

Disassembly of section .text.avrlibc:

00006d96 <eeprom_update_dword>:
    6d96:	03 96       	adiw	r24, 0x03	; 3
    6d98:	27 2f       	mov	r18, r23
    6d9a:	0e 94 43 35 	call	0x6a86	; 0x6a86 <eeprom_update_r18>
    6d9e:	0e 94 42 35 	call	0x6a84	; 0x6a84 <eeprom_update_byte>
    6da2:	25 2f       	mov	r18, r21
    6da4:	0e 94 43 35 	call	0x6a86	; 0x6a86 <eeprom_update_r18>
    6da8:	24 2f       	mov	r18, r20
    6daa:	0c 94 43 35 	jmp	0x6a86	; 0x6a86 <eeprom_update_r18>

Disassembly of section .text.avrlibc:

000071be <eeprom_update_word>:
    71be:	01 96       	adiw	r24, 0x01	; 1
    71c0:	27 2f       	mov	r18, r23
    71c2:	0e 94 43 35 	call	0x6a86	; 0x6a86 <eeprom_update_r18>
    71c6:	0c 94 42 35 	jmp	0x6a84	; 0x6a84 <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00006bd2 <__mulsi3>:
    6bd2:	db 01       	movw	r26, r22
    6bd4:	8f 93       	push	r24
    6bd6:	9f 93       	push	r25
    6bd8:	0e 94 03 37 	call	0x6e06	; 0x6e06 <__muluhisi3>
    6bdc:	bf 91       	pop	r27
    6bde:	af 91       	pop	r26
    6be0:	a2 9f       	mul	r26, r18
    6be2:	80 0d       	add	r24, r0
    6be4:	91 1d       	adc	r25, r1
    6be6:	a3 9f       	mul	r26, r19
    6be8:	90 0d       	add	r25, r0
    6bea:	b2 9f       	mul	r27, r18
    6bec:	90 0d       	add	r25, r0
    6bee:	11 24       	eor	r1, r1
    6bf0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00005fe2 <__udivmodsi4>:
    5fe2:	a1 e2       	ldi	r26, 0x21	; 33
    5fe4:	1a 2e       	mov	r1, r26
    5fe6:	aa 1b       	sub	r26, r26
    5fe8:	bb 1b       	sub	r27, r27
    5fea:	fd 01       	movw	r30, r26
    5fec:	0d c0       	rjmp	.+26     	; 0x6008 <__udivmodsi4_ep>

00005fee <__udivmodsi4_loop>:
    5fee:	aa 1f       	adc	r26, r26
    5ff0:	bb 1f       	adc	r27, r27
    5ff2:	ee 1f       	adc	r30, r30
    5ff4:	ff 1f       	adc	r31, r31
    5ff6:	a2 17       	cp	r26, r18
    5ff8:	b3 07       	cpc	r27, r19
    5ffa:	e4 07       	cpc	r30, r20
    5ffc:	f5 07       	cpc	r31, r21
    5ffe:	20 f0       	brcs	.+8      	; 0x6008 <__udivmodsi4_ep>
    6000:	a2 1b       	sub	r26, r18
    6002:	b3 0b       	sbc	r27, r19
    6004:	e4 0b       	sbc	r30, r20
    6006:	f5 0b       	sbc	r31, r21

00006008 <__udivmodsi4_ep>:
    6008:	66 1f       	adc	r22, r22
    600a:	77 1f       	adc	r23, r23
    600c:	88 1f       	adc	r24, r24
    600e:	99 1f       	adc	r25, r25
    6010:	1a 94       	dec	r1
    6012:	69 f7       	brne	.-38     	; 0x5fee <__udivmodsi4_loop>
    6014:	60 95       	com	r22
    6016:	70 95       	com	r23
    6018:	80 95       	com	r24
    601a:	90 95       	com	r25
    601c:	9b 01       	movw	r18, r22
    601e:	ac 01       	movw	r20, r24
    6020:	bd 01       	movw	r22, r26
    6022:	cf 01       	movw	r24, r30
    6024:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00006e06 <__muluhisi3>:
    6e06:	0e 94 35 36 	call	0x6c6a	; 0x6c6a <__umulhisi3>
    6e0a:	a5 9f       	mul	r26, r21
    6e0c:	90 0d       	add	r25, r0
    6e0e:	b4 9f       	mul	r27, r20
    6e10:	90 0d       	add	r25, r0
    6e12:	a4 9f       	mul	r26, r20
    6e14:	80 0d       	add	r24, r0
    6e16:	91 1d       	adc	r25, r1
    6e18:	11 24       	eor	r1, r1
    6e1a:	08 95       	ret

Disassembly of section .text.libgcc:

00007238 <__xload_1>:
    7238:	57 fd       	sbrc	r21, 7
    723a:	60 81       	ld	r22, Z
    723c:	57 ff       	sbrs	r21, 7
    723e:	64 91       	lpm	r22, Z
    7240:	08 95       	ret
