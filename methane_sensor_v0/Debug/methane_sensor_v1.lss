
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00003c28  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000612  00800100  00800100  00003c28  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007c0  00000000  00000000  00003c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000bec4  00000000  00000000  00004443  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000272f  00000000  00000000  00010307  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000043fd  00000000  00000000  00012a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000014ec  00000000  00000000  00016e34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d2b  00000000  00000000  00018320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004c69  00000000  00000000  0001904b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006c8  00000000  00000000  0001dcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00003aa0  00003aa0  00003bf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e37c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.PM_HAL_adc_power_init 0000000e  00003914  00003914  00003a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.PM_HAL_adc_power 00000014  0000381c  0000381c  00003970  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_meth_power_init 0000000e  00003922  00003922  00003a76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power 00000014  00003830  00003830  00003984  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_SCD30_power_init 0000000e  00003930  00003930  00003a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power 00000014  00003844  00003844  00003998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_BC_power_init 0000000e  0000393e  0000393e  00003a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power 00000014  00003858  00003858  000039ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_enter_power_down 00000042  00002df4  00002df4  00002f48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_3 00000014  0000386c  0000386c  000039c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_reset_active 00000008  00003a34  00003a34  00003b88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.rn2483_reset_deactive 00000008  00003a3c  00003a3c  00003b90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SCD30_HAL_init 0000000e  0000394c  0000394c  00003aa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.SCD30_HAL_data_ready 0000000a  00003a0c  00003a0c  00003b60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.TC0_HAL_init 00000020  000035ba  000035ba  0000370e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.TC0_HAL_start 00000006  00003a64  00003a64  00003bb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.TC0_HAL_stop 00000004  00003aa4  00003aa4  00003bf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_16 0000004e  00002886  00002886  000029da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss._cb      00000002  00800d90  00800d90  00003c28  2**0
                  ALLOC
 33 .text.TC1_HAL_init 00000034  00003170  00003170  000032c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC1_HAL_start 0000000c  000039a0  000039a0  00003af4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC1_HAL_stop 0000000c  000039ac  000039ac  00003b00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_13 0000004e  000028d4  000028d4  00002a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800d92  00800d92  00003c28  2**0
                  ALLOC
 38 .text.start_timer 00000008  00003a44  00003a44  00003b98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.stop_timer 00000006  00003a6a  00003a6a  00003bbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC2_HAL_init 00000020  000035da  000035da  0000372e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TC2_HAL_subscribe 00000054  000027e2  000027e2  00002936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TC2_HAL_cancel 0000003a  00002fee  00002fee  00003142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_9 00000098  00001df8  00001df8  00001f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .bss.cnt      00000001  00800da6  00800da6  00003c28  2**0
                  ALLOC
 45 .bss.cbCounter 00000001  00800da7  00800da7  00003c28  2**0
                  ALLOC
 46 .bss.callbacks 0000000a  00800d6b  00800d6b  00003c28  2**0
                  ALLOC
 47 .text.start_and_write_data 0000004c  000029be  000029be  00002b12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.read_and_stop 0000005a  00002730  00002730  00002884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TWI_API_write_data 00000006  00003a70  00003a70  00003bc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.TWI_API_write_data_stop 00000010  000038f4  000038f4  00003a48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.TWI_API_read_data_ack_end_nack_stop 00000024  000034c8  000034c8  0000361c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.TWI_API_repeat_read_data_stop 00000022  00003510  00003510  00003664  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.TWI_HAL_init 00000012  000038d0  000038d0  00003a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_HAL_start 00000048  00002b34  00002b34  00002c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_HAL_repeated_start 00000042  00002e36  00002e36  00002f8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_HAL_write_byte 00000020  000035fa  000035fa  0000374e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_HAL_read_byte_ack 00000014  00003880  00003880  000039d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_HAL_read_byte_nack 00000014  00003894  00003894  000039e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_HAL_stop 00000010  00003904  00003904  00003a58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.copy_buffer 0000002e  000033c6  000033c6  0000351a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.uart0_hal_init 0000003c  00002f76  00002f76  000030ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uart0_hal_send_message 00000034  000031a4  000031a4  000032f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart0_hal_send_string 0000006a  00002418  00002418  0000256c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart0_hal_message_ready 0000000e  0000395a  0000395a  00003aae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart0_hal_clear_rx_buffer 0000000a  00003a16  00003a16  00003b6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart0_hal_read_message_as_str 00000028  00003478  00003478  000035cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart0_hal_send_break 00000046  00002c54  00002c54  00002da8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.__vector_22 0000004a  00002a56  00002a56  00002baa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__vector_20 00000074  000022c4  000022c4  00002418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .bss.rx_buffer_has_message 00000001  00800da8  00800da8  00003c28  2**0
                  ALLOC
 71 .bss.rx_buffer_data_len 00000001  00800da9  00800da9  00003c28  2**0
                  ALLOC
 72 .bss.tx_buffer_cursor 00000001  00800daa  00800daa  00003c28  2**0
                  ALLOC
 73 .bss.tx_buffer_data_len 00000001  00800dab  00800dab  00003c28  2**0
                  ALLOC
 74 .text.uart1_hal_init 0000003c  00002fb2  00002fb2  00003106  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_30 0000004a  00002aa0  00002aa0  00002bf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_28 00000070  00002338  00002338  0000248c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800dac  00800dac  00003c28  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800dad  00800dad  00003c28  2**0
                  ALLOC
 79 .bss.rx_buffer 00000064  00800cee  00800cee  00003c28  2**0
                  ALLOC
 80 .bss.tx_buffer_cursor 00000001  00800dae  00800dae  00003c28  2**0
                  ALLOC
 81 .bss.tx_buffer_data_len 00000001  00800daf  00800daf  00003c28  2**0
                  ALLOC
 82 .bss.tx_buffer 0000012c  00800bc2  00800bc2  00003c28  2**0
                  ALLOC
 83 .text.main    00000018  0000378e  0000378e  000038e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.vect_ADC_heat_timeout 00000018  000037a6  000037a6  000038fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.ADC_init_sampling 00000066  00002554  00002554  000026a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.ADC_deinit_sampling 00000014  000038a8  000038a8  000039fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.ADC_is_sampling_done 0000001c  00003696  00003696  000037ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.ADC_meth_sens_power_on 00000020  0000361a  0000361a  0000376e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.ADC_meth_sens_ready 00000012  000038e2  000038e2  00003a36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.calc_ppm_methane 00000096  00001e90  00001e90  00001fe4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.ADC_get_value 0000005c  000026d4  000026d4  00002828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.vect_ADC_do_sample 00000046  00002c9a  00002c9a  00002dee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.ADC_start_sampling 0000000c  000039b8  000039b8  00003b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .bss.cntPowerUpTime 00000001  00800db0  00800db0  00003c28  2**0
                  ALLOC
 95 .bss._powerUpTime 00000001  00800db1  00800db1  00003c28  2**0
                  ALLOC
 96 .bss.cntSamples 00000002  00800d94  00800d94  00003c28  2**0
                  ALLOC
 97 .bss._data    00000002  00800d96  00800d96  00003c28  2**0
                  ALLOC
 98 .bss._nSamples 00000002  00800d98  00800d98  00003c28  2**0
                  ALLOC
 99 .data.PPM_factor 00000004  00800d80  00003ac6  00003c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
100 .data.RRL     00000004  00800d84  00003aca  00003c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
101 .data.Vc      00000004  00800d88  00003ace  00003c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
102 .progmemx.data 00000038  00000295  00000295  000003e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
103 .text.JN_join_network 00000296  0000077e  0000077e  000008d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.set_block_uplink 00000018  000037be  000037be  00003912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.block_uplink 0000001c  000036b2  000036b2  00003806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.LM_join_network 00000006  00003a76  00003a76  00003bca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.LM_send_uplink 0000002e  000033f4  000033f4  00003548  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.LM_put_to_sleep 00000006  00003a7c  00003a7c  00003bd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.LM_wake_up 00000006  00003a82  00003a82  00003bd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.LM_is_free 0000000a  00003a20  00003a20  00003b74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.subPointer 00000001  00800db2  00800db2  00003c28  2**0
                  ALLOC
112 .bss.busy     00000001  00800db3  00800db3  00003c28  2**0
                  ALLOC
113 .bss.cnt      00000001  00800db4  00800db4  00003c28  2**0
                  ALLOC
114 .progmemx.data 00000073  00000222  00000222  00000376  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
115 .text.tohex   00000084  000020d4  000020d4  00002228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.attach_ending 0000001c  000036ce  000036ce  00003822  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.cmd_with_ending 00000032  0000320c  0000320c  00003360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.sys_sleep_cmd 0000005e  000025ba  000025ba  0000270e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.mac_set_parameter 0000004e  00002922  00002922  00002a76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.mac_set_deveui 00000048  00002b7c  00002b7c  00002cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.mac_set_appeui 00000048  00002bc4  00002bc4  00002d18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.mac_set_appkey 00000048  00002c0c  00002c0c  00002d60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.mac_set_ADR 00000030  00003306  00003306  0000345a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.mac_tx_confirmed 000000ac  00001b64  00001b64  00001cb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.beginsWidth 0000004a  00002aea  00002aea  00002c3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .progmemx.data 00000038  000002cd  000002cd  00000421  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
127 .text.decode_tx_response 00000068  000024ec  000024ec  00002640  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.SU_send_uplink 000000fc  000013d2  000013d2  00001526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .progmemx.data 00000003  0000032f  0000032f  00000483  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
130 .text.SC_put_to_sleep 0000004c  00002a0a  00002a0a  00002b5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.SC_wake_up 00000032  0000323e  0000323e  00003392  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.LM_strbeginswith 00000044  00002d6c  00002d6c  00002ec0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.util_setPendingStates 0000000c  000039c4  000039c4  00003b18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.util_setMatchCase 0000000c  000039d0  000039d0  00003b24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.util_matchMessage 0000005e  00002618  00002618  0000276c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.util_transmit_msg 0000001c  000036ea  000036ea  0000383e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.util_read_msg 00000006  00003a88  00003a88  00003bdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .progmemx.data 00000020  00000305  00000305  00000459  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
139 .text.util_parse_err 00000058  0000278a  0000278a  000028de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.get_group_id 00000006  00003a8e  00003a8e  00003be2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.set_group_id 00000006  00003a94  00003a94  00003be8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.MRPP_init_group 00000032  00003270  00003270  000033c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.MRPP_add_collection_data_INT16 00000070  000023a8  000023a8  000024fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.MRPP_is_body_package_ready 00000022  00003532  00003532  00003686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.MRPP_get_ready_body_package 00000096  00001f26  00001f26  0000207a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.MRPP_set_body_sent 0000000c  000039dc  000039dc  00003b30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.MRPP_get_header_package 00000022  00003554  00003554  000036a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.MRPP_get_tail_package 00000022  00003576  00003576  000036ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.MRPP_all_body_package_sent 0000000a  00003a2a  00003a2a  00003b7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .bss._groupId 00000001  00800db5  00800db5  00003c28  2**0
                  ALLOC
151 .text.mrpp_data_add_int16 00000092  00001fbc  00001fbc  00002110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.mrpp_data_get 00000030  00003336  00003336  0000348a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.add_data_types 000000d8  0000169c  0000169c  000017f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.update_bodies 00000162  00000dee  00000dee  00000f42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.mrpp_state_init 000001be  00000c30  00000c30  00000d84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.mrpp_state_get_header 000000a2  00001cb4  00001cb4  00001e08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.mrpp_state_get_tail 000000a4  00001c10  00001c10  00001d64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.mrpp_state_set_collection 00000086  0000204e  0000204e  000021a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.mrpp_state_is_body_ready 00000030  00003366  00003366  000034ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.mrpp_state_all_bodies_sent 0000002a  0000344e  0000344e  000035a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.mrpp_state_get_ready_body 0000011a  000011b2  000011b2  00001306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.mrpp_state_set_body_sent 00000020  0000363a  0000363a  0000378e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.mrpp_state_get_collection_address 00000036  00003098  00003098  000031ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.cb_cnt_time 00000030  00003396  00003396  000034ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.PUMP_start 00000024  000034ec  000034ec  00003640  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.PUMP_is_done 0000001c  00003706  00003706  0000385a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.eventPointer 00000001  00800db6  00800db6  00003c28  2**0
                  ALLOC
168 .bss.cnt      00000002  00800d9a  00800d9a  00003c28  2**0
                  ALLOC
169 .bss._seconds 00000002  00800d9c  00800d9c  00003c28  2**0
                  ALLOC
170 .text.RTC_set_clock_out 00000050  00002836  00002836  0000298a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.RTC_clear_wake_up_interrupt 00000034  000031d8  000031d8  0000332c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.RTC_get_current_time 00000140  00000f50  00000f50  000010a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .rodata       00000005  00800d7b  00003ac1  00003c15  2**0
                  CONTENTS, ALLOC, LOAD, DATA
174 .text.RTC_set_wake_up_interrupt_minutes 000000c4  000019e4  000019e4  00001b38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.RTC_datetime_to_ts 00000122  00001090  00001090  000011e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .progmemx.data.CMD_READ_TIME_POINTER 00000001  00000334  00000334  00000488  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
177 .text.bytes_2_uint 0000001a  0000375a  0000375a  000038ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.init_measurement 00000038  00003028  00003028  0000317c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.validate_data 00000032  000032a2  000032a2  000033f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.read_value 000000a2  00001d56  00001d56  00001eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.vect_SCD_do_sample 00000046  00002ce0  00002ce0  00002e34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.SCD30_init_sampling 0000004e  00002970  00002970  00002ac4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SCD30_deinit_sampling 00000014  000038bc  000038bc  00003a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.SCD30_start_sampling 0000000c  000039e8  000039e8  00003b3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.SCD30_is_sampling_done 0000001c  00003722  00003722  00003876  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .bss.cntSamples 00000002  00800d9e  00800d9e  00003c28  2**0
                  ALLOC
187 .bss._data    00000002  00800da0  00800da0  00003c28  2**0
                  ALLOC
188 .bss._nSamples 00000002  00800da2  00800da2  00003c28  2**0
                  ALLOC
189 .progmemx.data.READ_DATA_CMD 00000002  00000332  00000332  00000486  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
190 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000325  00000325  00000479  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
191 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  0000032a  0000032a  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
192 .text.decode_stage_response 00000016  00003806  00003806  0000395a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.decode_join_response 0000001c  0000373e  0000373e  00003892  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.decode_header_tail_response 00000018  000037d6  000037d6  0000392a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .progmemx.data 000000d2  00000150  00000150  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
196 .text.join_lora 0000007a  00002158  00002158  000022ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.set_wakeup 00000008  00003a4c  00003a4c  00003ba0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.send_header 0000003e  00002efa  00002efa  0000304e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.stage_0 000000ce  00001848  00001848  0000199c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.stage_1 000000f0  000014ce  000014ce  00001622  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.stage_2 00000106  000012cc  000012cc  00001420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.send_body 00000040  00002eba  00002eba  0000300e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.decode_body_response 00000028  000034a0  000034a0  000035f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.send_tail 0000003e  00002f38  00002f38  0000308c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.send_msg 00000018  000037ee  000037ee  00003942  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.MAINPG_start 0000021c  00000a14  00000a14  00000b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .data.cols    00000019  00800d52  00003aa8  00003bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
208 .bss.dt       00000006  00800d75  00800d75  00003c28  2**0
                  ALLOC
209 .bss.ts       00000004  00800d8c  00800d8c  00003c28  2**0
                  ALLOC
210 .bss.meth_data 00000258  00800712  00800712  00003c28  2**0
                  ALLOC
211 .bss.co2_data 00000258  0080096a  0080096a  00003c28  2**0
                  ALLOC
212 .data.bodyIndex 00000002  00800da4  00003ad2  00003c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
213 .bss.state_s2 00000001  00800db7  00800db7  00003c28  2**0
                  ALLOC
214 .bss.state_s1 00000001  00800db8  00800db8  00003c28  2**0
                  ALLOC
215 .bss.state_s0 00000001  00800db9  00800db9  00003c28  2**0
                  ALLOC
216 .text.calc_crc8 00000036  000030ce  000030ce  00003222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.avrlibc.fplib 0000000e  00003968  00003968  00003abc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.avrlibc.fplib 000000ce  00001916  00001916  00001a6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.avrlibc.fplib 00000008  00003a54  00003a54  00003ba8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.avrlibc.fplib 000000de  000015be  000015be  00001712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.avrlibc.fplib 0000005e  00002676  00002676  000027ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.avrlibc.fplib 0000007a  000021d2  000021d2  00002326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.avrlibc.fplib 0000000c  000039f4  000039f4  00003b48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.avrlibc.fplib 00000006  00003a9a  00003a9a  00003bee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.avrlibc.fplib 0000000e  00003976  00003976  00003aca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.avrlibc.fplib 0000000e  00003984  00003984  00003ad8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.avrlibc.fplib 00000022  00003598  00003598  000036ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.avrlibc.fplib 00000044  00002db0  00002db0  00002f04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.avrlibc.fplib 0000000e  00003992  00003992  00003ae6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.avrlibc.fplib 00000008  00003a5c  00003a5c  00003bb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.avrlibc.fplib 000000d4  00001774  00001774  000018c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.libgcc  0000000c  00003a00  00003a00  00003b54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.libgcc.mul 0000001e  0000365a  0000365a  000037ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.libgcc  0000001a  00003774  00003774  000038c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.avrlibc 00000032  000032d4  000032d4  00003428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.avrlibc 00000042  00002e78  00002e78  00002fcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.avrlibc 0000006a  00002482  00002482  000025d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.avrlibc 0000002c  00003422  00003422  00003576  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.avrlibc 0000001e  00003678  00003678  000037cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.avrlibc 00000046  00002d26  00002d26  00002e7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.avrlibc 00000448  00000336  00000336  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.avrlibc 00000036  00003104  00003104  00003258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.avrlibc 00000078  0000224c  0000224c  000023a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.avrlibc 000000bc  00001aa8  00001aa8  00001bfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.libgcc.prologue 00000038  00003060  00003060  000031b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.libgcc.prologue 00000036  0000313a  0000313a  0000328e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
   4:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
   8:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
   c:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__vector_3>
  10:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  14:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  18:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  1c:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  20:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  24:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__vector_9>
  28:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  2c:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  30:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  34:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__vector_13>
  38:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  3c:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  40:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__vector_16>
  44:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  48:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  4c:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  50:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__vector_20>
  54:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  58:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <__vector_22>
  5c:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  60:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  64:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  68:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  6c:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  70:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__vector_28>
  74:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__bad_interrupt>
  78:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__vector_30>
  7c:	dd 03       	fmulsu	r21, r21
  7e:	e6 04       	cpc	r14, r6
  80:	fc 03       	fmulsu	r23, r20
  82:	19 04       	cpc	r1, r9
  84:	38 04       	cpc	r3, r8
  86:	57 04       	cpc	r5, r7
  88:	76 04       	cpc	r7, r6
  8a:	95 04       	cpc	r9, r5
  8c:	b2 04       	cpc	r11, r2
  8e:	cf 04       	cpc	r12, r15
  90:	e1 04       	cpc	r14, r1
  92:	f7 04       	cpc	r15, r7
  94:	f9 04       	cpc	r15, r9
  96:	05 0a       	sbc	r0, r21
  98:	38 0a       	sbc	r3, r24
  9a:	26 0a       	sbc	r2, r22
  9c:	56 0a       	sbc	r5, r22
  9e:	56 0a       	sbc	r5, r22
  a0:	45 0a       	sbc	r4, r21
  a2:	43 0a       	sbc	r4, r19
  a4:	58 0a       	sbc	r5, r24
  a6:	3f 0a       	sbc	r3, r31
  a8:	41 0a       	sbc	r4, r17
  aa:	29 05       	cpc	r18, r9
  ac:	43 05       	cpc	r20, r3
  ae:	59 05       	cpc	r21, r9
  b0:	69 05       	cpc	r22, r9
  b2:	4e 05       	cpc	r20, r14
  b4:	70 05       	cpc	r23, r0
  b6:	87 05       	cpc	r24, r7
  b8:	7c 05       	cpc	r23, r12
  ba:	92 05       	cpc	r25, r2
  bc:	9e 05       	cpc	r25, r14
  be:	ab 05       	cpc	r26, r11
  c0:	b3 05       	cpc	r27, r3
  c2:	bb 05       	cpc	r27, r11
  c4:	c3 05       	cpc	r28, r3
  c6:	df 05       	cpc	r29, r15
  c8:	e6 05       	cpc	r30, r6
  ca:	f3 05       	cpc	r31, r3
  cc:	fa 05       	cpc	r31, r10
  ce:	08 06       	cpc	r0, r24
  d0:	0f 06       	cpc	r0, r31

000000d2 <.dinit>:
  d2:	01 00       	.word	0x0001	; ????
  d4:	0d 52       	subi	r16, 0x2D	; 45
  d6:	80 0d       	add	r24, r0
  d8:	52 0d       	add	r21, r2
  da:	6b 00       	.word	0x006b	; ????
  dc:	3a a8       	ldd	r3, Y+50	; 0x32
  de:	0d 6b       	ori	r16, 0xBD	; 189
  e0:	0d 7b       	andi	r16, 0xBD	; 189
  e2:	80 0d       	add	r24, r0
  e4:	7b 0d       	add	r23, r11
  e6:	8c 00       	.word	0x008c	; ????
  e8:	3a c1       	rjmp	.+628    	; 0x35e <vfprintf+0x28>
  ea:	0d 8c       	ldd	r0, Y+29	; 0x1d
  ec:	0d a4       	ldd	r0, Y+45	; 0x2d
  ee:	80 0d       	add	r24, r0
  f0:	a4 0d       	add	r26, r4
  f2:	a6 00       	.word	0x00a6	; ????
  f4:	3a d2       	rcall	.+1140   	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
  f6:	0d a6       	std	Y+45, r0	; 0x2d
  f8:	0d ba       	out	0x1d, r0	; 29
  fa:	80 00       	.word	0x0080	; ????

000000fc <__ctors_end>:
  fc:	11 24       	eor	r1, r1
  fe:	1f be       	out	0x3f, r1	; 63
 100:	cf ef       	ldi	r28, 0xFF	; 255
 102:	d0 e1       	ldi	r29, 0x10	; 16
 104:	de bf       	out	0x3e, r29	; 62
 106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
 108:	e2 ed       	ldi	r30, 0xD2	; 210
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	17 c0       	rjmp	.+46     	; 0x13e <__do_clear_bss+0x8>
 110:	b5 91       	lpm	r27, Z+
 112:	a5 91       	lpm	r26, Z+
 114:	35 91       	lpm	r19, Z+
 116:	25 91       	lpm	r18, Z+
 118:	05 91       	lpm	r16, Z+
 11a:	07 fd       	sbrc	r16, 7
 11c:	0c c0       	rjmp	.+24     	; 0x136 <__do_clear_bss>
 11e:	95 91       	lpm	r25, Z+
 120:	85 91       	lpm	r24, Z+
 122:	ef 01       	movw	r28, r30
 124:	f9 2f       	mov	r31, r25
 126:	e8 2f       	mov	r30, r24
 128:	05 90       	lpm	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	a2 17       	cp	r26, r18
 12e:	b3 07       	cpc	r27, r19
 130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0x20>
 132:	fe 01       	movw	r30, r28
 134:	04 c0       	rjmp	.+8      	; 0x13e <__do_clear_bss+0x8>

00000136 <__do_clear_bss>:
 136:	1d 92       	st	X+, r1
 138:	a2 17       	cp	r26, r18
 13a:	b3 07       	cpc	r27, r19
 13c:	e1 f7       	brne	.-8      	; 0x136 <__do_clear_bss>
 13e:	eb 3f       	cpi	r30, 0xFB	; 251
 140:	f4 07       	cpc	r31, r20
 142:	31 f7       	brne	.-52     	; 0x110 <__do_copy_data+0x8>
 144:	0e 94 c7 1b 	call	0x378e	; 0x378e <main>
 148:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>

Disassembly of section .text:

00003aa0 <__bad_interrupt>:
    3aa0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

00003914 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    3914:	81 b1       	in	r24, 0x01	; 1
    3916:	88 60       	ori	r24, 0x08	; 8
    3918:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    391a:	82 b1       	in	r24, 0x02	; 2
    391c:	87 7f       	andi	r24, 0xF7	; 247
    391e:	82 b9       	out	0x02, r24	; 2
    3920:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

0000381c <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    381c:	88 23       	and	r24, r24
    381e:	21 f0       	breq	.+8      	; 0x3828 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    3820:	82 b1       	in	r24, 0x02	; 2
    3822:	88 60       	ori	r24, 0x08	; 8
    3824:	82 b9       	out	0x02, r24	; 2
    3826:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    3828:	82 b1       	in	r24, 0x02	; 2
    382a:	87 7f       	andi	r24, 0xF7	; 247
    382c:	82 b9       	out	0x02, r24	; 2
    382e:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00003922 <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    3922:	81 b1       	in	r24, 0x01	; 1
    3924:	80 62       	ori	r24, 0x20	; 32
    3926:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    3928:	82 b1       	in	r24, 0x02	; 2
    392a:	8f 7d       	andi	r24, 0xDF	; 223
    392c:	82 b9       	out	0x02, r24	; 2
    392e:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003830 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    3830:	88 23       	and	r24, r24
    3832:	21 f0       	breq	.+8      	; 0x383c <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    3834:	82 b1       	in	r24, 0x02	; 2
    3836:	80 62       	ori	r24, 0x20	; 32
    3838:	82 b9       	out	0x02, r24	; 2
    383a:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    383c:	82 b1       	in	r24, 0x02	; 2
    383e:	8f 7d       	andi	r24, 0xDF	; 223
    3840:	82 b9       	out	0x02, r24	; 2
    3842:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00003930 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    3930:	81 b1       	in	r24, 0x01	; 1
    3932:	80 61       	ori	r24, 0x10	; 16
    3934:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    3936:	82 b1       	in	r24, 0x02	; 2
    3938:	8f 7e       	andi	r24, 0xEF	; 239
    393a:	82 b9       	out	0x02, r24	; 2
    393c:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003844 <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    3844:	88 23       	and	r24, r24
    3846:	21 f0       	breq	.+8      	; 0x3850 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    3848:	82 b1       	in	r24, 0x02	; 2
    384a:	80 61       	ori	r24, 0x10	; 16
    384c:	82 b9       	out	0x02, r24	; 2
    384e:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    3850:	82 b1       	in	r24, 0x02	; 2
    3852:	8f 7e       	andi	r24, 0xEF	; 239
    3854:	82 b9       	out	0x02, r24	; 2
    3856:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

0000393e <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    393e:	8a b1       	in	r24, 0x0a	; 10
    3940:	80 61       	ori	r24, 0x10	; 16
    3942:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    3944:	8b b1       	in	r24, 0x0b	; 11
    3946:	8f 7e       	andi	r24, 0xEF	; 239
    3948:	8b b9       	out	0x0b, r24	; 11
    394a:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00003858 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    3858:	88 23       	and	r24, r24
    385a:	21 f0       	breq	.+8      	; 0x3864 <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    385c:	8b b1       	in	r24, 0x0b	; 11
    385e:	80 61       	ori	r24, 0x10	; 16
    3860:	8b b9       	out	0x0b, r24	; 11
    3862:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    3864:	8b b1       	in	r24, 0x0b	; 11
    3866:	8f 7e       	andi	r24, 0xEF	; 239
    3868:	8b b9       	out	0x0b, r24	; 11
    386a:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00002df4 <PM_HAL_enter_power_down>:
	}
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    2df4:	84 b1       	in	r24, 0x04	; 4
    2df6:	8b 7f       	andi	r24, 0xFB	; 251
    2df8:	84 b9       	out	0x04, r24	; 4
	set_bit(PORTB, 2); //Enbale pull up
    2dfa:	85 b1       	in	r24, 0x05	; 5
    2dfc:	84 60       	ori	r24, 0x04	; 4
    2dfe:	85 b9       	out	0x05, r24	; 5
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    2e00:	e9 e6       	ldi	r30, 0x69	; 105
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	8f 7e       	andi	r24, 0xEF	; 239
    2e08:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    2e0a:	80 81       	ld	r24, Z
    2e0c:	80 62       	ori	r24, 0x20	; 32
    2e0e:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    2e10:	8d b3       	in	r24, 0x1d	; 29
    2e12:	84 60       	ori	r24, 0x04	; 4
    2e14:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2e16:	83 b7       	in	r24, 0x33	; 51
    2e18:	81 7f       	andi	r24, 0xF1	; 241
    2e1a:	84 60       	ori	r24, 0x04	; 4
    2e1c:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    2e1e:	83 b7       	in	r24, 0x33	; 51
    2e20:	81 60       	ori	r24, 0x01	; 1
    2e22:	83 bf       	out	0x33, r24	; 51
	sei();
    2e24:	78 94       	sei
	sleep_cpu();
    2e26:	88 95       	sleep
	sleep_disable();
    2e28:	83 b7       	in	r24, 0x33	; 51
    2e2a:	8e 7f       	andi	r24, 0xFE	; 254
    2e2c:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    2e2e:	8d b3       	in	r24, 0x1d	; 29
    2e30:	8b 7f       	andi	r24, 0xFB	; 251
    2e32:	8d bb       	out	0x1d, r24	; 29
    2e34:	08 95       	ret

Disassembly of section .text.__vector_3:

0000386c <__vector_3>:
}

ISR(INT2_vect){
    386c:	1f 92       	push	r1
    386e:	0f 92       	push	r0
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	0f 92       	push	r0
    3874:	11 24       	eor	r1, r1
	
}
    3876:	0f 90       	pop	r0
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	0f 90       	pop	r0
    387c:	1f 90       	pop	r1
    387e:	18 95       	reti

Disassembly of section .text.rn2483_reset_active:

00003a34 <rn2483_reset_active>:
void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    3a34:	85 b1       	in	r24, 0x05	; 5
    3a36:	8f 7e       	andi	r24, 0xEF	; 239
    3a38:	85 b9       	out	0x05, r24	; 5
    3a3a:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00003a3c <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    3a3c:	85 b1       	in	r24, 0x05	; 5
    3a3e:	80 61       	ori	r24, 0x10	; 16
    3a40:	85 b9       	out	0x05, r24	; 5
    3a42:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

0000394c <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    394c:	87 b1       	in	r24, 0x07	; 7
    394e:	8f 7b       	andi	r24, 0xBF	; 191
    3950:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    3952:	88 b1       	in	r24, 0x08	; 8
    3954:	8f 7b       	andi	r24, 0xBF	; 191
    3956:	88 b9       	out	0x08, r24	; 8
    3958:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00003a0c <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    3a0c:	86 b1       	in	r24, 0x06	; 6
    3a0e:	86 fb       	bst	r24, 6
    3a10:	88 27       	eor	r24, r24
    3a12:	80 f9       	bld	r24, 0
    3a14:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

000035ba <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    35ba:	92 e0       	ldi	r25, 0x02	; 2
    35bc:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    35be:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    35c0:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    35c2:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    35c4:	ee e6       	ldi	r30, 0x6E	; 110
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	80 81       	ld	r24, Z
    35ca:	82 60       	ori	r24, 0x02	; 2
    35cc:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    35ce:	78 94       	sei
	
	//Set callback
	_cb=cb;
    35d0:	70 93 91 0d 	sts	0x0D91, r23	; 0x800d91 <_cb+0x1>
    35d4:	60 93 90 0d 	sts	0x0D90, r22	; 0x800d90 <_cb>
    35d8:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00003a64 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    3a64:	86 e0       	ldi	r24, 0x06	; 6
    3a66:	85 bd       	out	0x25, r24	; 37
    3a68:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

00003aa4 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    3aa4:	15 bc       	out	0x25, r1	; 37
    3aa6:	08 95       	ret

Disassembly of section .text.__vector_16:

00002886 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    2886:	1f 92       	push	r1
    2888:	0f 92       	push	r0
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	0f 92       	push	r0
    288e:	11 24       	eor	r1, r1
    2890:	2f 93       	push	r18
    2892:	3f 93       	push	r19
    2894:	4f 93       	push	r20
    2896:	5f 93       	push	r21
    2898:	6f 93       	push	r22
    289a:	7f 93       	push	r23
    289c:	8f 93       	push	r24
    289e:	9f 93       	push	r25
    28a0:	af 93       	push	r26
    28a2:	bf 93       	push	r27
    28a4:	ef 93       	push	r30
    28a6:	ff 93       	push	r31
	_cb();
    28a8:	e0 91 90 0d 	lds	r30, 0x0D90	; 0x800d90 <_cb>
    28ac:	f0 91 91 0d 	lds	r31, 0x0D91	; 0x800d91 <_cb+0x1>
    28b0:	09 95       	icall
}
    28b2:	ff 91       	pop	r31
    28b4:	ef 91       	pop	r30
    28b6:	bf 91       	pop	r27
    28b8:	af 91       	pop	r26
    28ba:	9f 91       	pop	r25
    28bc:	8f 91       	pop	r24
    28be:	7f 91       	pop	r23
    28c0:	6f 91       	pop	r22
    28c2:	5f 91       	pop	r21
    28c4:	4f 91       	pop	r20
    28c6:	3f 91       	pop	r19
    28c8:	2f 91       	pop	r18
    28ca:	0f 90       	pop	r0
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	0f 90       	pop	r0
    28d0:	1f 90       	pop	r1
    28d2:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00003170 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    3170:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    3174:	28 e0       	ldi	r18, 0x08	; 8
    3176:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    317a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    317e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    3182:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    3186:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    318a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    318e:	ef e6       	ldi	r30, 0x6F	; 111
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	82 60       	ori	r24, 0x02	; 2
    3196:	80 83       	st	Z, r24
	sei();
    3198:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    319a:	70 93 93 0d 	sts	0x0D93, r23	; 0x800d93 <_cb+0x1>
    319e:	60 93 92 0d 	sts	0x0D92, r22	; 0x800d92 <_cb>
    31a2:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

000039a0 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    39a0:	e1 e8       	ldi	r30, 0x81	; 129
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	80 81       	ld	r24, Z
    39a6:	86 60       	ori	r24, 0x06	; 6
    39a8:	80 83       	st	Z, r24
    39aa:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

000039ac <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    39ac:	e1 e8       	ldi	r30, 0x81	; 129
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	80 81       	ld	r24, Z
    39b2:	88 7f       	andi	r24, 0xF8	; 248
    39b4:	80 83       	st	Z, r24
    39b6:	08 95       	ret

Disassembly of section .text.__vector_13:

000028d4 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    28d4:	1f 92       	push	r1
    28d6:	0f 92       	push	r0
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	0f 92       	push	r0
    28dc:	11 24       	eor	r1, r1
    28de:	2f 93       	push	r18
    28e0:	3f 93       	push	r19
    28e2:	4f 93       	push	r20
    28e4:	5f 93       	push	r21
    28e6:	6f 93       	push	r22
    28e8:	7f 93       	push	r23
    28ea:	8f 93       	push	r24
    28ec:	9f 93       	push	r25
    28ee:	af 93       	push	r26
    28f0:	bf 93       	push	r27
    28f2:	ef 93       	push	r30
    28f4:	ff 93       	push	r31
	_cb();
    28f6:	e0 91 92 0d 	lds	r30, 0x0D92	; 0x800d92 <_cb>
    28fa:	f0 91 93 0d 	lds	r31, 0x0D93	; 0x800d93 <_cb+0x1>
    28fe:	09 95       	icall
    2900:	ff 91       	pop	r31
    2902:	ef 91       	pop	r30
    2904:	bf 91       	pop	r27
    2906:	af 91       	pop	r26
    2908:	9f 91       	pop	r25
    290a:	8f 91       	pop	r24
    290c:	7f 91       	pop	r23
    290e:	6f 91       	pop	r22
    2910:	5f 91       	pop	r21
    2912:	4f 91       	pop	r20
    2914:	3f 91       	pop	r19
    2916:	2f 91       	pop	r18
    2918:	0f 90       	pop	r0
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	0f 90       	pop	r0
    291e:	1f 90       	pop	r1
    2920:	18 95       	reti

Disassembly of section .text.start_timer:

00003a44 <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    3a44:	87 e0       	ldi	r24, 0x07	; 7
    3a46:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3a4a:	08 95       	ret

Disassembly of section .text.stop_timer:

00003a6a <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    3a6a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3a6e:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

000035da <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    35da:	82 e0       	ldi	r24, 0x02	; 2
    35dc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    35e0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    35e4:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    35e8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    35ec:	9b ef       	ldi	r25, 0xFB	; 251
    35ee:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    35f2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    35f6:	78 94       	sei
    35f8:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

000027e2 <TC2_HAL_subscribe>:
    27e2:	cf 93       	push	r28
    27e4:	dc 01       	movw	r26, r24
    27e6:	60 91 a7 0d 	lds	r22, 0x0DA7	; 0x800da7 <cbCounter>
    27ea:	65 30       	cpi	r22, 0x05	; 5
    27ec:	00 f5       	brcc	.+64     	; 0x282e <TC2_HAL_subscribe+0x4c>
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	15 c0       	rjmp	.+42     	; 0x281c <TC2_HAL_subscribe+0x3a>
    27f2:	29 2f       	mov	r18, r25
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	f9 01       	movw	r30, r18
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	e5 59       	subi	r30, 0x95	; 149
    27fe:	f2 4f       	sbci	r31, 0xF2	; 242
    2800:	40 81       	ld	r20, Z
    2802:	51 81       	ldd	r21, Z+1	; 0x01
    2804:	45 2b       	or	r20, r21
    2806:	49 f4       	brne	.+18     	; 0x281a <TC2_HAL_subscribe+0x38>
    2808:	22 0f       	add	r18, r18
    280a:	33 1f       	adc	r19, r19
    280c:	f9 01       	movw	r30, r18
    280e:	e5 59       	subi	r30, 0x95	; 149
    2810:	f2 4f       	sbci	r31, 0xF2	; 242
    2812:	b1 83       	std	Z+1, r27	; 0x01
    2814:	a0 83       	st	Z, r26
    2816:	c9 2f       	mov	r28, r25
    2818:	04 c0       	rjmp	.+8      	; 0x2822 <TC2_HAL_subscribe+0x40>
    281a:	9f 5f       	subi	r25, 0xFF	; 255
    281c:	95 30       	cpi	r25, 0x05	; 5
    281e:	48 f3       	brcs	.-46     	; 0x27f2 <TC2_HAL_subscribe+0x10>
    2820:	cf ef       	ldi	r28, 0xFF	; 255
    2822:	6f 5f       	subi	r22, 0xFF	; 255
    2824:	60 93 a7 0d 	sts	0x0DA7, r22	; 0x800da7 <cbCounter>
    2828:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <start_timer>
    282c:	01 c0       	rjmp	.+2      	; 0x2830 <TC2_HAL_subscribe+0x4e>
    282e:	cf ef       	ldi	r28, 0xFF	; 255
    2830:	8c 2f       	mov	r24, r28
    2832:	cf 91       	pop	r28
    2834:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00002fee <TC2_HAL_cancel>:
    2fee:	08 2e       	mov	r0, r24
    2ff0:	00 0c       	add	r0, r0
    2ff2:	99 0b       	sbc	r25, r25
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	ee 0f       	add	r30, r30
    2ff8:	ff 1f       	adc	r31, r31
    2ffa:	e5 59       	subi	r30, 0x95	; 149
    2ffc:	f2 4f       	sbci	r31, 0xF2	; 242
    2ffe:	20 81       	ld	r18, Z
    3000:	31 81       	ldd	r19, Z+1	; 0x01
    3002:	23 2b       	or	r18, r19
    3004:	81 f0       	breq	.+32     	; 0x3026 <TC2_HAL_cancel+0x38>
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	fc 01       	movw	r30, r24
    300c:	e5 59       	subi	r30, 0x95	; 149
    300e:	f2 4f       	sbci	r31, 0xF2	; 242
    3010:	11 82       	std	Z+1, r1	; 0x01
    3012:	10 82       	st	Z, r1
    3014:	80 91 a7 0d 	lds	r24, 0x0DA7	; 0x800da7 <cbCounter>
    3018:	81 50       	subi	r24, 0x01	; 1
    301a:	80 93 a7 0d 	sts	0x0DA7, r24	; 0x800da7 <cbCounter>
    301e:	81 11       	cpse	r24, r1
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <TC2_HAL_cancel+0x38>
    3022:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <stop_timer>
    3026:	08 95       	ret

Disassembly of section .text.__vector_9:

00001df8 <__vector_9>:
    1df8:	1f 92       	push	r1
    1dfa:	0f 92       	push	r0
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	0f 92       	push	r0
    1e00:	11 24       	eor	r1, r1
    1e02:	2f 93       	push	r18
    1e04:	3f 93       	push	r19
    1e06:	4f 93       	push	r20
    1e08:	5f 93       	push	r21
    1e0a:	6f 93       	push	r22
    1e0c:	7f 93       	push	r23
    1e0e:	8f 93       	push	r24
    1e10:	9f 93       	push	r25
    1e12:	af 93       	push	r26
    1e14:	bf 93       	push	r27
    1e16:	cf 93       	push	r28
    1e18:	ef 93       	push	r30
    1e1a:	ff 93       	push	r31
    1e1c:	90 91 a6 0d 	lds	r25, 0x0DA6	; 0x800da6 <cnt>
    1e20:	9f 5f       	subi	r25, 0xFF	; 255
    1e22:	90 93 a6 0d 	sts	0x0DA6, r25	; 0x800da6 <cnt>
    1e26:	89 e0       	ldi	r24, 0x09	; 9
    1e28:	98 9f       	mul	r25, r24
    1e2a:	21 2d       	mov	r18, r1
    1e2c:	11 24       	eor	r1, r1
    1e2e:	89 2f       	mov	r24, r25
    1e30:	82 1b       	sub	r24, r18
    1e32:	86 95       	lsr	r24
    1e34:	82 0f       	add	r24, r18
    1e36:	82 95       	swap	r24
    1e38:	8f 70       	andi	r24, 0x0F	; 15
    1e3a:	2f e1       	ldi	r18, 0x1F	; 31
    1e3c:	82 9f       	mul	r24, r18
    1e3e:	90 19       	sub	r25, r0
    1e40:	11 24       	eor	r1, r1
    1e42:	91 11       	cpse	r25, r1
    1e44:	13 c0       	rjmp	.+38     	; 0x1e6c <__vector_9+0x74>
    1e46:	10 92 a6 0d 	sts	0x0DA6, r1	; 0x800da6 <cnt>
    1e4a:	c0 e0       	ldi	r28, 0x00	; 0
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <__vector_9+0x70>
    1e4e:	ec 2f       	mov	r30, r28
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	ee 0f       	add	r30, r30
    1e54:	ff 1f       	adc	r31, r31
    1e56:	e5 59       	subi	r30, 0x95	; 149
    1e58:	f2 4f       	sbci	r31, 0xF2	; 242
    1e5a:	01 90       	ld	r0, Z+
    1e5c:	f0 81       	ld	r31, Z
    1e5e:	e0 2d       	mov	r30, r0
    1e60:	30 97       	sbiw	r30, 0x00	; 0
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <__vector_9+0x6e>
    1e64:	09 95       	icall
    1e66:	cf 5f       	subi	r28, 0xFF	; 255
    1e68:	c5 30       	cpi	r28, 0x05	; 5
    1e6a:	88 f3       	brcs	.-30     	; 0x1e4e <__vector_9+0x56>
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	cf 91       	pop	r28
    1e72:	bf 91       	pop	r27
    1e74:	af 91       	pop	r26
    1e76:	9f 91       	pop	r25
    1e78:	8f 91       	pop	r24
    1e7a:	7f 91       	pop	r23
    1e7c:	6f 91       	pop	r22
    1e7e:	5f 91       	pop	r21
    1e80:	4f 91       	pop	r20
    1e82:	3f 91       	pop	r19
    1e84:	2f 91       	pop	r18
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	0f 90       	pop	r0
    1e8c:	1f 90       	pop	r1
    1e8e:	18 95       	reti

Disassembly of section .text.start_and_write_data:

000029be <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    29be:	cf 92       	push	r12
    29c0:	df 92       	push	r13
    29c2:	ef 92       	push	r14
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	6a 01       	movw	r12, r20
    29ca:	e6 2e       	mov	r14, r22
    29cc:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    29d4:	81 11       	cpse	r24, r1
    29d6:	13 c0       	rjmp	.+38     	; 0x29fe <start_and_write_data+0x40>
    29d8:	c0 e0       	ldi	r28, 0x00	; 0
    29da:	0e c0       	rjmp	.+28     	; 0x29f8 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    29dc:	ae 2d       	mov	r26, r14
    29de:	c6 01       	movw	r24, r12
    29e0:	8c 0f       	add	r24, r28
    29e2:	91 1d       	adc	r25, r1
    29e4:	a1 1d       	adc	r26, r1
    29e6:	fc 01       	movw	r30, r24
    29e8:	84 91       	lpm	r24, Z
    29ea:	a7 fd       	sbrc	r26, 7
    29ec:	80 81       	ld	r24, Z
    29ee:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    29f2:	81 11       	cpse	r24, r1
    29f4:	04 c0       	rjmp	.+8      	; 0x29fe <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    29f6:	cf 5f       	subi	r28, 0xFF	; 255
    29f8:	cd 17       	cp	r28, r29
    29fa:	80 f3       	brcs	.-32     	; 0x29dc <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    29fc:	80 e0       	ldi	r24, 0x00	; 0
}
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	ef 90       	pop	r14
    2a04:	df 90       	pop	r13
    2a06:	cf 90       	pop	r12
    2a08:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002730 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	8c 01       	movw	r16, r24
    273e:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2740:	c0 e0       	ldi	r28, 0x00	; 0
    2742:	08 c0       	rjmp	.+16     	; 0x2754 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2744:	78 01       	movw	r14, r16
    2746:	ec 0e       	add	r14, r28
    2748:	f1 1c       	adc	r15, r1
    274a:	0e 94 40 1c 	call	0x3880	; 0x3880 <TWI_HAL_read_byte_ack>
    274e:	f7 01       	movw	r30, r14
    2750:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2752:	cf 5f       	subi	r28, 0xFF	; 255
    2754:	2c 2f       	mov	r18, r28
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8d 2f       	mov	r24, r29
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	28 17       	cp	r18, r24
    2760:	39 07       	cpc	r19, r25
    2762:	84 f3       	brlt	.-32     	; 0x2744 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2764:	8d 2f       	mov	r24, r29
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	e8 01       	movw	r28, r16
    276c:	c8 0f       	add	r28, r24
    276e:	d9 1f       	adc	r29, r25
    2770:	0e 94 4a 1c 	call	0x3894	; 0x3894 <TWI_HAL_read_byte_nack>
    2774:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2776:	0e 94 82 1c 	call	0x3904	; 0x3904 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003a70 <TWI_API_write_data>:

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
    3a70:	0e 94 df 14 	call	0x29be	; 0x29be <start_and_write_data>
}
    3a74:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

000038f4 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    38f4:	0e 94 df 14 	call	0x29be	; 0x29be <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    38f8:	81 11       	cpse	r24, r1
    38fa:	03 c0       	rjmp	.+6      	; 0x3902 <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    38fc:	0e 94 82 1c 	call	0x3904	; 0x3904 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    3900:	80 e0       	ldi	r24, 0x00	; 0
}
    3902:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

000034c8 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    34c8:	1f 93       	push	r17
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	eb 01       	movw	r28, r22
    34d0:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    34d2:	61 e0       	ldi	r22, 0x01	; 1
    34d4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    34d8:	81 11       	cpse	r24, r1
    34da:	04 c0       	rjmp	.+8      	; 0x34e4 <TWI_API_read_data_ack_end_nack_stop+0x1c>
	
	return read_and_stop(data, length);
    34dc:	61 2f       	mov	r22, r17
    34de:	ce 01       	movw	r24, r28
    34e0:	0e 94 98 13 	call	0x2730	; 0x2730 <read_and_stop>
	//}
	//data[length-1]=TWI_HAL_read_byte_nack();
	//
	//TWI_HAL_stop();
	//return TWI_CODE_SUCCESS;
}
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	1f 91       	pop	r17
    34ea:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00003510 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3510:	1f 93       	push	r17
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	eb 01       	movw	r28, r22
    3518:	14 2f       	mov	r17, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    351a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <TWI_HAL_repeated_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    351e:	81 11       	cpse	r24, r1
    3520:	04 c0       	rjmp	.+8      	; 0x352a <TWI_API_repeat_read_data_stop+0x1a>
	
	return read_and_stop(data, length);
    3522:	61 2f       	mov	r22, r17
    3524:	ce 01       	movw	r24, r28
    3526:	0e 94 98 13 	call	0x2730	; 0x2730 <read_and_stop>
	
}
    352a:	df 91       	pop	r29
    352c:	cf 91       	pop	r28
    352e:	1f 91       	pop	r17
    3530:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

000038d0 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    38d0:	80 e2       	ldi	r24, 0x20	; 32
    38d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    38d6:	e9 eb       	ldi	r30, 0xB9	; 185
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	80 81       	ld	r24, Z
    38dc:	8c 7f       	andi	r24, 0xFC	; 252
    38de:	80 83       	st	Z, r24
    38e0:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00002b34 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2b3c:	84 ea       	ldi	r24, 0xA4	; 164
    2b3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2b42:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2b46:	99 23       	and	r25, r25
    2b48:	e4 f7       	brge	.-8      	; 0x2b42 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    2b4a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2b4e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    2b50:	88 30       	cpi	r24, 0x08	; 8
    2b52:	99 f4       	brne	.+38     	; 0x2b7a <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    2b54:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2b58:	84 e8       	ldi	r24, 0x84	; 132
    2b5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2b5e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2b62:	88 23       	and	r24, r24
    2b64:	e4 f7       	brge	.-8      	; 0x2b5e <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    2b66:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2b6a:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    2b6c:	88 31       	cpi	r24, 0x18	; 24
    2b6e:	21 f0       	breq	.+8      	; 0x2b78 <TWI_HAL_start+0x44>
    2b70:	80 34       	cpi	r24, 0x40	; 64
    2b72:	19 f4       	brne	.+6      	; 0x2b7a <TWI_HAL_start+0x46>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	08 95       	ret
    2b78:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    2b7a:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00002e36 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    2e40:	84 ea       	ldi	r24, 0xA4	; 164
    2e42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2e46:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2e4a:	99 23       	and	r25, r25
    2e4c:	e4 f7       	brge	.-8      	; 0x2e46 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    2e4e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2e52:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    2e54:	80 31       	cpi	r24, 0x10	; 16
    2e56:	79 f4       	brne	.+30     	; 0x2e76 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    2e58:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    2e5c:	84 e8       	ldi	r24, 0x84	; 132
    2e5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    2e62:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2e66:	88 23       	and	r24, r24
    2e68:	e4 f7       	brge	.-8      	; 0x2e62 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    2e6a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2e6e:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    2e70:	80 34       	cpi	r24, 0x40	; 64
    2e72:	09 f4       	brne	.+2      	; 0x2e76 <TWI_HAL_repeated_start+0x40>
    2e74:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    2e76:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

000035fa <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    35fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    35fe:	84 e8       	ldi	r24, 0x84	; 132
    3600:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3604:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3608:	88 23       	and	r24, r24
    360a:	e4 f7       	brge	.-8      	; 0x3604 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    360c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3610:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3612:	88 32       	cpi	r24, 0x28	; 40
    3614:	09 f4       	brne	.+2      	; 0x3618 <TWI_HAL_write_byte+0x1e>
    3616:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3618:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00003880 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    3880:	84 ec       	ldi	r24, 0xC4	; 196
    3882:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    3886:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    388a:	88 23       	and	r24, r24
    388c:	e4 f7       	brge	.-8      	; 0x3886 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    388e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3892:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00003894 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    3894:	84 e8       	ldi	r24, 0x84	; 132
    3896:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    389a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    389e:	88 23       	and	r24, r24
    38a0:	e4 f7       	brge	.-8      	; 0x389a <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    38a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    38a6:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00003904 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    3904:	84 e9       	ldi	r24, 0x94	; 148
    3906:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    390a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    390e:	84 fd       	sbrc	r24, 4
    3910:	fc cf       	rjmp	.-8      	; 0x390a <TWI_HAL_stop+0x6>
}
    3912:	08 95       	ret

Disassembly of section .text.copy_buffer:

000033c6 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    33c6:	bc 01       	movw	r22, r24
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	09 c0       	rjmp	.+18     	; 0x33de <copy_buffer+0x18>
    33cc:	fb 01       	movw	r30, r22
    33ce:	e9 0f       	add	r30, r25
    33d0:	f1 1d       	adc	r31, r1
    33d2:	da 01       	movw	r26, r20
    33d4:	a0 50       	subi	r26, 0x00	; 0
    33d6:	bf 4f       	sbci	r27, 0xFF	; 255
    33d8:	2c 91       	ld	r18, X
    33da:	20 83       	st	Z, r18
    33dc:	9f 5f       	subi	r25, 0xFF	; 255
    33de:	49 2f       	mov	r20, r25
    33e0:	50 e0       	ldi	r21, 0x00	; 0
    33e2:	20 91 a9 0d 	lds	r18, 0x0DA9	; 0x800da9 <rx_buffer_data_len>
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	22 50       	subi	r18, 0x02	; 2
    33ea:	31 09       	sbc	r19, r1
    33ec:	42 17       	cp	r20, r18
    33ee:	53 07       	cpc	r21, r19
    33f0:	6c f3       	brlt	.-38     	; 0x33cc <copy_buffer+0x6>
    33f2:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00002f76 <uart0_hal_init>:
    2f76:	e1 ec       	ldi	r30, 0xC1	; 193
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	80 61       	ori	r24, 0x10	; 16
    2f7e:	80 83       	st	Z, r24
    2f80:	80 81       	ld	r24, Z
    2f82:	88 60       	ori	r24, 0x08	; 8
    2f84:	80 83       	st	Z, r24
    2f86:	80 81       	ld	r24, Z
    2f88:	80 68       	ori	r24, 0x80	; 128
    2f8a:	80 83       	st	Z, r24
    2f8c:	80 81       	ld	r24, Z
    2f8e:	80 64       	ori	r24, 0x40	; 64
    2f90:	80 83       	st	Z, r24
    2f92:	e0 ec       	ldi	r30, 0xC0	; 192
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	82 60       	ori	r24, 0x02	; 2
    2f9a:	80 83       	st	Z, r24
    2f9c:	86 e0       	ldi	r24, 0x06	; 6
    2f9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    2fa2:	80 e1       	ldi	r24, 0x10	; 16
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    2faa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    2fae:	78 94       	sei
    2fb0:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000031a4 <uart0_hal_send_message>:
    31a4:	dc 01       	movw	r26, r24
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	0b c0       	rjmp	.+22     	; 0x31c0 <uart0_hal_send_message+0x1c>
    31aa:	29 2f       	mov	r18, r25
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	fd 01       	movw	r30, r26
    31b0:	e2 0f       	add	r30, r18
    31b2:	f3 1f       	adc	r31, r19
    31b4:	40 81       	ld	r20, Z
    31b6:	f9 01       	movw	r30, r18
    31b8:	ec 59       	subi	r30, 0x9C	; 156
    31ba:	fe 4f       	sbci	r31, 0xFE	; 254
    31bc:	40 83       	st	Z, r20
    31be:	9f 5f       	subi	r25, 0xFF	; 255
    31c0:	96 17       	cp	r25, r22
    31c2:	98 f3       	brcs	.-26     	; 0x31aa <uart0_hal_send_message+0x6>
    31c4:	60 93 ab 0d 	sts	0x0DAB, r22	; 0x800dab <tx_buffer_data_len>
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	80 93 aa 0d 	sts	0x0DAA, r24	; 0x800daa <tx_buffer_cursor>
    31ce:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    31d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    31d6:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002418 <uart0_hal_send_string>:
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	cf 93       	push	r28
    2424:	6b 01       	movw	r12, r22
    2426:	e8 2e       	mov	r14, r24
    2428:	c0 e0       	ldi	r28, 0x00	; 0
    242a:	12 c0       	rjmp	.+36     	; 0x2450 <uart0_hal_send_string+0x38>
    242c:	8c 2f       	mov	r24, r28
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	4e 2d       	mov	r20, r14
    2432:	96 01       	movw	r18, r12
    2434:	20 0f       	add	r18, r16
    2436:	31 1f       	adc	r19, r17
    2438:	41 1d       	adc	r20, r1
    243a:	17 fd       	sbrc	r17, 7
    243c:	4a 95       	dec	r20
    243e:	f9 01       	movw	r30, r18
    2440:	24 91       	lpm	r18, Z
    2442:	47 fd       	sbrc	r20, 7
    2444:	20 81       	ld	r18, Z
    2446:	fc 01       	movw	r30, r24
    2448:	ec 59       	subi	r30, 0x9C	; 156
    244a:	fe 4f       	sbci	r31, 0xFE	; 254
    244c:	20 83       	st	Z, r18
    244e:	cf 5f       	subi	r28, 0xFF	; 255
    2450:	0c 2f       	mov	r16, r28
    2452:	10 e0       	ldi	r17, 0x00	; 0
    2454:	8e 2d       	mov	r24, r14
    2456:	b6 01       	movw	r22, r12
    2458:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
    245c:	08 17       	cp	r16, r24
    245e:	19 07       	cpc	r17, r25
    2460:	28 f3       	brcs	.-54     	; 0x242c <uart0_hal_send_string+0x14>
    2462:	80 93 ab 0d 	sts	0x0DAB, r24	; 0x800dab <tx_buffer_data_len>
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	80 93 aa 0d 	sts	0x0DAA, r24	; 0x800daa <tx_buffer_cursor>
    246c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2470:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	ef 90       	pop	r14
    247c:	df 90       	pop	r13
    247e:	cf 90       	pop	r12
    2480:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

0000395a <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    395a:	90 91 a8 0d 	lds	r25, 0x0DA8	; 0x800da8 <rx_buffer_has_message>
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	91 11       	cpse	r25, r1
    3962:	01 c0       	rjmp	.+2      	; 0x3966 <uart0_hal_message_ready+0xc>
    3964:	80 e0       	ldi	r24, 0x00	; 0
}
    3966:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00003a16 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    3a16:	10 92 a8 0d 	sts	0x0DA8, r1	; 0x800da8 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    3a1a:	10 92 a9 0d 	sts	0x0DA9, r1	; 0x800da9 <rx_buffer_data_len>
    3a1e:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003478 <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(uint8_t msg[]){
    3478:	0f 93       	push	r16
    347a:	1f 93       	push	r17
    347c:	cf 93       	push	r28
    347e:	8c 01       	movw	r16, r24
	copy_buffer(msg);
    3480:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    3484:	c0 91 a9 0d 	lds	r28, 0x0DA9	; 0x800da9 <rx_buffer_data_len>
    3488:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    348a:	f8 01       	movw	r30, r16
    348c:	ec 0f       	add	r30, r28
    348e:	f1 1d       	adc	r31, r1
    3490:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    3492:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <uart0_hal_clear_rx_buffer>
	return len;
}
    3496:	8c 2f       	mov	r24, r28
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    349e:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00002c54 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	1f 92       	push	r1
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	9a b1       	in	r25, 0x0a	; 10
    2c60:	92 60       	ori	r25, 0x02	; 2
    2c62:	9a b9       	out	0x0a, r25	; 10
    2c64:	e1 ec       	ldi	r30, 0xC1	; 193
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	90 81       	ld	r25, Z
    2c6a:	97 7f       	andi	r25, 0xF7	; 247
    2c6c:	90 83       	st	Z, r25
    2c6e:	9b b1       	in	r25, 0x0b	; 11
    2c70:	9d 7f       	andi	r25, 0xFD	; 253
    2c72:	9b b9       	out	0x0b, r25	; 11
    2c74:	af e9       	ldi	r26, 0x9F	; 159
    2c76:	bf e0       	ldi	r27, 0x0F	; 15
    2c78:	11 97       	sbiw	r26, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <uart0_hal_send_break+0x24>
    2c7c:	00 c0       	rjmp	.+0      	; 0x2c7e <uart0_hal_send_break+0x2a>
    2c7e:	00 00       	nop
    2c80:	90 81       	ld	r25, Z
    2c82:	98 60       	ori	r25, 0x08	; 8
    2c84:	90 83       	st	Z, r25
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	61 e0       	ldi	r22, 0x01	; 1
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <uart0_hal_send_message>
    2c92:	0f 90       	pop	r0
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	08 95       	ret

Disassembly of section .text.__vector_22:

00002a56 <__vector_22>:
    2a56:	1f 92       	push	r1
    2a58:	0f 92       	push	r0
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	0f 92       	push	r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	8f 93       	push	r24
    2a62:	ef 93       	push	r30
    2a64:	ff 93       	push	r31
    2a66:	e0 91 aa 0d 	lds	r30, 0x0DAA	; 0x800daa <tx_buffer_cursor>
    2a6a:	80 91 ab 0d 	lds	r24, 0x0DAB	; 0x800dab <tx_buffer_data_len>
    2a6e:	e8 17       	cp	r30, r24
    2a70:	58 f4       	brcc	.+22     	; 0x2a88 <__vector_22+0x32>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	8e 0f       	add	r24, r30
    2a76:	80 93 aa 0d 	sts	0x0DAA, r24	; 0x800daa <tx_buffer_cursor>
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	ec 59       	subi	r30, 0x9C	; 156
    2a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a80:	80 81       	ld	r24, Z
    2a82:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2a86:	04 c0       	rjmp	.+8      	; 0x2a90 <__vector_22+0x3a>
    2a88:	10 92 aa 0d 	sts	0x0DAA, r1	; 0x800daa <tx_buffer_cursor>
    2a8c:	10 92 ab 0d 	sts	0x0DAB, r1	; 0x800dab <tx_buffer_data_len>
    2a90:	ff 91       	pop	r31
    2a92:	ef 91       	pop	r30
    2a94:	8f 91       	pop	r24
    2a96:	0f 90       	pop	r0
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	0f 90       	pop	r0
    2a9c:	1f 90       	pop	r1
    2a9e:	18 95       	reti

Disassembly of section .text.__vector_20:

000022c4 <__vector_20>:
    22c4:	1f 92       	push	r1
    22c6:	0f 92       	push	r0
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	0f 92       	push	r0
    22cc:	11 24       	eor	r1, r1
    22ce:	2f 93       	push	r18
    22d0:	8f 93       	push	r24
    22d2:	9f 93       	push	r25
    22d4:	ef 93       	push	r30
    22d6:	ff 93       	push	r31
    22d8:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <rx_buffer_has_message>
    22dc:	81 11       	cpse	r24, r1
    22de:	0e c0       	rjmp	.+28     	; 0x22fc <__vector_20+0x38>
    22e0:	e0 91 a9 0d 	lds	r30, 0x0DA9	; 0x800da9 <rx_buffer_data_len>
    22e4:	e4 36       	cpi	r30, 0x64	; 100
    22e6:	50 f4       	brcc	.+20     	; 0x22fc <__vector_20+0x38>
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	8e 0f       	add	r24, r30
    22ec:	80 93 a9 0d 	sts	0x0DA9, r24	; 0x800da9 <rx_buffer_data_len>
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    22f6:	e0 50       	subi	r30, 0x00	; 0
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	80 83       	st	Z, r24
    22fc:	80 91 a9 0d 	lds	r24, 0x0DA9	; 0x800da9 <rx_buffer_data_len>
    2300:	83 30       	cpi	r24, 0x03	; 3
    2302:	80 f0       	brcs	.+32     	; 0x2324 <__vector_20+0x60>
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	fc 01       	movw	r30, r24
    2308:	e1 50       	subi	r30, 0x01	; 1
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	20 81       	ld	r18, Z
    230e:	2a 30       	cpi	r18, 0x0A	; 10
    2310:	49 f4       	brne	.+18     	; 0x2324 <__vector_20+0x60>
    2312:	fc 01       	movw	r30, r24
    2314:	e2 50       	subi	r30, 0x02	; 2
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 81       	ld	r24, Z
    231a:	8d 30       	cpi	r24, 0x0D	; 13
    231c:	19 f4       	brne	.+6      	; 0x2324 <__vector_20+0x60>
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	80 93 a8 0d 	sts	0x0DA8, r24	; 0x800da8 <rx_buffer_has_message>
    2324:	ff 91       	pop	r31
    2326:	ef 91       	pop	r30
    2328:	9f 91       	pop	r25
    232a:	8f 91       	pop	r24
    232c:	2f 91       	pop	r18
    232e:	0f 90       	pop	r0
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	0f 90       	pop	r0
    2334:	1f 90       	pop	r1
    2336:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

00002fb2 <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    2fb2:	e9 ec       	ldi	r30, 0xC9	; 201
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	80 61       	ori	r24, 0x10	; 16
    2fba:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    2fbc:	80 81       	ld	r24, Z
    2fbe:	88 60       	ori	r24, 0x08	; 8
    2fc0:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    2fc2:	80 81       	ld	r24, Z
    2fc4:	80 68       	ori	r24, 0x80	; 128
    2fc6:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    2fc8:	80 81       	ld	r24, Z
    2fca:	80 64       	ori	r24, 0x40	; 64
    2fcc:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    2fce:	e8 ec       	ldi	r30, 0xC8	; 200
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	82 60       	ori	r24, 0x02	; 2
    2fd6:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    2fd8:	86 e0       	ldi	r24, 0x06	; 6
    2fda:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=(8000000/(8*57600))-1; //set baudrate
    2fde:	80 e1       	ldi	r24, 0x10	; 16
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    2fe6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    2fea:	78 94       	sei
    2fec:	08 95       	ret

Disassembly of section .text.__vector_30:

00002aa0 <__vector_30>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    2aa0:	1f 92       	push	r1
    2aa2:	0f 92       	push	r0
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	0f 92       	push	r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	8f 93       	push	r24
    2aac:	ef 93       	push	r30
    2aae:	ff 93       	push	r31
    2ab0:	e0 91 ae 0d 	lds	r30, 0x0DAE	; 0x800dae <tx_buffer_cursor>
    2ab4:	80 91 af 0d 	lds	r24, 0x0DAF	; 0x800daf <tx_buffer_data_len>
    2ab8:	e8 17       	cp	r30, r24
    2aba:	58 f4       	brcc	.+22     	; 0x2ad2 <__vector_30+0x32>
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	8e 0f       	add	r24, r30
    2ac0:	80 93 ae 0d 	sts	0x0DAE, r24	; 0x800dae <tx_buffer_cursor>
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	ee 53       	subi	r30, 0x3E	; 62
    2ac8:	f4 4f       	sbci	r31, 0xF4	; 244
    2aca:	80 81       	ld	r24, Z
    2acc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2ad0:	04 c0       	rjmp	.+8      	; 0x2ada <__vector_30+0x3a>
    2ad2:	10 92 ae 0d 	sts	0x0DAE, r1	; 0x800dae <tx_buffer_cursor>
    2ad6:	10 92 af 0d 	sts	0x0DAF, r1	; 0x800daf <tx_buffer_data_len>
    2ada:	ff 91       	pop	r31
    2adc:	ef 91       	pop	r30
    2ade:	8f 91       	pop	r24
    2ae0:	0f 90       	pop	r0
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	0f 90       	pop	r0
    2ae6:	1f 90       	pop	r1
    2ae8:	18 95       	reti

Disassembly of section .text.__vector_28:

00002338 <__vector_28>:
    2338:	1f 92       	push	r1
    233a:	0f 92       	push	r0
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	0f 92       	push	r0
    2340:	11 24       	eor	r1, r1
    2342:	2f 93       	push	r18
    2344:	8f 93       	push	r24
    2346:	9f 93       	push	r25
    2348:	ef 93       	push	r30
    234a:	ff 93       	push	r31
    234c:	80 91 ac 0d 	lds	r24, 0x0DAC	; 0x800dac <rx_buffer_has_message>
    2350:	81 11       	cpse	r24, r1
    2352:	0e c0       	rjmp	.+28     	; 0x2370 <__vector_28+0x38>
    2354:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <rx_buffer_data_len>
    2358:	e4 36       	cpi	r30, 0x64	; 100
    235a:	50 f4       	brcc	.+20     	; 0x2370 <__vector_28+0x38>
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	8e 0f       	add	r24, r30
    2360:	80 93 ad 0d 	sts	0x0DAD, r24	; 0x800dad <rx_buffer_data_len>
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    236a:	e2 51       	subi	r30, 0x12	; 18
    236c:	f3 4f       	sbci	r31, 0xF3	; 243
    236e:	80 83       	st	Z, r24
    2370:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <rx_buffer_data_len>
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	fc 01       	movw	r30, r24
    2378:	e3 51       	subi	r30, 0x13	; 19
    237a:	f3 4f       	sbci	r31, 0xF3	; 243
    237c:	20 81       	ld	r18, Z
    237e:	2a 30       	cpi	r18, 0x0A	; 10
    2380:	49 f4       	brne	.+18     	; 0x2394 <__vector_28+0x5c>
    2382:	fc 01       	movw	r30, r24
    2384:	e4 51       	subi	r30, 0x14	; 20
    2386:	f3 4f       	sbci	r31, 0xF3	; 243
    2388:	80 81       	ld	r24, Z
    238a:	8d 30       	cpi	r24, 0x0D	; 13
    238c:	19 f4       	brne	.+6      	; 0x2394 <__vector_28+0x5c>
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	80 93 ac 0d 	sts	0x0DAC, r24	; 0x800dac <rx_buffer_has_message>
    2394:	ff 91       	pop	r31
    2396:	ef 91       	pop	r30
    2398:	9f 91       	pop	r25
    239a:	8f 91       	pop	r24
    239c:	2f 91       	pop	r18
    239e:	0f 90       	pop	r0
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	0f 90       	pop	r0
    23a4:	1f 90       	pop	r1
    23a6:	18 95       	reti

Disassembly of section .text.main:

0000378e <main>:
{
	//test_runner();
	
	while(1)
    {
		MAINPG_start();
    378e:	0e 94 0a 05 	call	0xa14	; 0xa14 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3792:	2f ef       	ldi	r18, 0xFF	; 255
    3794:	8d e3       	ldi	r24, 0x3D	; 61
    3796:	99 e4       	ldi	r25, 0x49	; 73
    3798:	21 50       	subi	r18, 0x01	; 1
    379a:	80 40       	sbci	r24, 0x00	; 0
    379c:	90 40       	sbci	r25, 0x00	; 0
    379e:	e1 f7       	brne	.-8      	; 0x3798 <main+0xa>
    37a0:	00 c0       	rjmp	.+0      	; 0x37a2 <main+0x14>
    37a2:	00 00       	nop
    37a4:	f4 cf       	rjmp	.-24     	; 0x378e <main>

Disassembly of section .text.vect_ADC_heat_timeout:

000037a6 <vect_ADC_heat_timeout>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    37a6:	80 91 b0 0d 	lds	r24, 0x0DB0	; 0x800db0 <cntPowerUpTime>
    37aa:	8f 5f       	subi	r24, 0xFF	; 255
    37ac:	80 93 b0 0d 	sts	0x0DB0, r24	; 0x800db0 <cntPowerUpTime>
    37b0:	90 91 b1 0d 	lds	r25, 0x0DB1	; 0x800db1 <_powerUpTime>
    37b4:	89 17       	cp	r24, r25
    37b6:	10 f0       	brcs	.+4      	; 0x37bc <vect_ADC_heat_timeout+0x16>
    37b8:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <TC0_HAL_stop>
    37bc:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

00002554 <ADC_init_sampling>:
    2554:	cf 93       	push	r28
    2556:	50 93 97 0d 	sts	0x0D97, r21	; 0x800d97 <_data+0x1>
    255a:	40 93 96 0d 	sts	0x0D96, r20	; 0x800d96 <_data>
    255e:	70 93 99 0d 	sts	0x0D99, r23	; 0x800d99 <_nSamples+0x1>
    2562:	60 93 98 0d 	sts	0x0D98, r22	; 0x800d98 <_nSamples>
    2566:	10 92 95 0d 	sts	0x0D95, r1	; 0x800d95 <cntSamples+0x1>
    256a:	10 92 94 0d 	sts	0x0D94, r1	; 0x800d94 <cntSamples>
    256e:	6d e4       	ldi	r22, 0x4D	; 77
    2570:	76 e1       	ldi	r23, 0x16	; 22
    2572:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <TC0_HAL_init>
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	0e 94 0e 1c 	call	0x381c	; 0x381c <PM_HAL_adc_power>
    257c:	2f ef       	ldi	r18, 0xFF	; 255
    257e:	83 ec       	ldi	r24, 0xC3	; 195
    2580:	99 e0       	ldi	r25, 0x09	; 9
    2582:	21 50       	subi	r18, 0x01	; 1
    2584:	80 40       	sbci	r24, 0x00	; 0
    2586:	90 40       	sbci	r25, 0x00	; 0
    2588:	e1 f7       	brne	.-8      	; 0x2582 <ADC_init_sampling+0x2e>
    258a:	00 c0       	rjmp	.+0      	; 0x258c <ADC_init_sampling+0x38>
    258c:	00 00       	nop
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	8d e4       	ldi	r24, 0x4D	; 77
    2592:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <TWI_HAL_start>
    2596:	c8 2f       	mov	r28, r24
    2598:	0e 94 82 1c 	call	0x3904	; 0x3904 <TWI_HAL_stop>
    259c:	cc 23       	and	r28, r28
    259e:	51 f0       	breq	.+20     	; 0x25b4 <ADC_init_sampling+0x60>
    25a0:	10 92 97 0d 	sts	0x0D97, r1	; 0x800d97 <_data+0x1>
    25a4:	10 92 96 0d 	sts	0x0D96, r1	; 0x800d96 <_data>
    25a8:	10 92 99 0d 	sts	0x0D99, r1	; 0x800d99 <_nSamples+0x1>
    25ac:	10 92 98 0d 	sts	0x0D98, r1	; 0x800d98 <_nSamples>
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <ADC_init_sampling+0x62>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	cf 91       	pop	r28
    25b8:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

000038a8 <ADC_deinit_sampling>:
    38a8:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <TC0_HAL_stop>
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	0e 94 0e 1c 	call	0x381c	; 0x381c <PM_HAL_adc_power>
    38b2:	10 92 97 0d 	sts	0x0D97, r1	; 0x800d97 <_data+0x1>
    38b6:	10 92 96 0d 	sts	0x0D96, r1	; 0x800d96 <_data>
    38ba:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00003696 <ADC_is_sampling_done>:
    3696:	40 91 94 0d 	lds	r20, 0x0D94	; 0x800d94 <cntSamples>
    369a:	50 91 95 0d 	lds	r21, 0x0D95	; 0x800d95 <cntSamples+0x1>
    369e:	20 91 98 0d 	lds	r18, 0x0D98	; 0x800d98 <_nSamples>
    36a2:	30 91 99 0d 	lds	r19, 0x0D99	; 0x800d99 <_nSamples+0x1>
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	42 17       	cp	r20, r18
    36aa:	53 07       	cpc	r21, r19
    36ac:	08 f4       	brcc	.+2      	; 0x36b0 <ADC_is_sampling_done+0x1a>
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

0000361a <ADC_meth_sens_power_on>:
    361a:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <_powerUpTime>
    361e:	10 92 b0 0d 	sts	0x0DB0, r1	; 0x800db0 <cntPowerUpTime>
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	0e 94 18 1c 	call	0x3830	; 0x3830 <PM_HAL_meth_power>
    3628:	63 ed       	ldi	r22, 0xD3	; 211
    362a:	7b e1       	ldi	r23, 0x1B	; 27
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <TC0_HAL_init>
    3632:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <TC0_HAL_start>
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

000038e2 <ADC_meth_sens_ready>:

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    38e2:	20 91 b0 0d 	lds	r18, 0x0DB0	; 0x800db0 <cntPowerUpTime>
    38e6:	90 91 b1 0d 	lds	r25, 0x0DB1	; 0x800db1 <_powerUpTime>
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	29 17       	cp	r18, r25
    38ee:	08 f4       	brcc	.+2      	; 0x38f2 <ADC_meth_sens_ready+0x10>
    38f0:	80 e0       	ldi	r24, 0x00	; 0
}
    38f2:	08 95       	ret

Disassembly of section .text.calc_ppm_methane:

00001e90 <calc_ppm_methane>:
}

ADC_STATUS ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
	return ADC_STATUS_SUCCESS;
}
    1e90:	8f 92       	push	r8
    1e92:	9f 92       	push	r9
    1e94:	af 92       	push	r10
    1e96:	bf 92       	push	r11
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__floatunsisf>
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	59 e3       	ldi	r21, 0x39	; 57
    1eb2:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <__mulsf3>
    1eb6:	80 90 88 0d 	lds	r8, 0x0D88	; 0x800d88 <Vc>
    1eba:	90 90 89 0d 	lds	r9, 0x0D89	; 0x800d89 <Vc+0x1>
    1ebe:	a0 90 8a 0d 	lds	r10, 0x0D8A	; 0x800d8a <Vc+0x2>
    1ec2:	b0 90 8b 0d 	lds	r11, 0x0D8B	; 0x800d8b <Vc+0x3>
    1ec6:	a5 01       	movw	r20, r10
    1ec8:	94 01       	movw	r18, r8
    1eca:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <__mulsf3>
    1ece:	6b 01       	movw	r12, r22
    1ed0:	7c 01       	movw	r14, r24
    1ed2:	9b 01       	movw	r18, r22
    1ed4:	ac 01       	movw	r20, r24
    1ed6:	c5 01       	movw	r24, r10
    1ed8:	b4 01       	movw	r22, r8
    1eda:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__subsf3>
    1ede:	a7 01       	movw	r20, r14
    1ee0:	96 01       	movw	r18, r12
    1ee2:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__divsf3>
    1ee6:	20 91 84 0d 	lds	r18, 0x0D84	; 0x800d84 <RRL>
    1eea:	30 91 85 0d 	lds	r19, 0x0D85	; 0x800d85 <RRL+0x1>
    1eee:	40 91 86 0d 	lds	r20, 0x0D86	; 0x800d86 <RRL+0x2>
    1ef2:	50 91 87 0d 	lds	r21, 0x0D87	; 0x800d87 <RRL+0x3>
    1ef6:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <__mulsf3>
    1efa:	20 91 80 0d 	lds	r18, 0x0D80	; 0x800d80 <PPM_factor>
    1efe:	30 91 81 0d 	lds	r19, 0x0D81	; 0x800d81 <PPM_factor+0x1>
    1f02:	40 91 82 0d 	lds	r20, 0x0D82	; 0x800d82 <PPM_factor+0x2>
    1f06:	50 91 83 0d 	lds	r21, 0x0D83	; 0x800d83 <PPM_factor+0x3>
    1f0a:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <__mulsf3>
    1f0e:	0e 94 3b 13 	call	0x2676	; 0x2676 <__fixunssfsi>
    1f12:	cb 01       	movw	r24, r22
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	9f 90       	pop	r9
    1f22:	8f 90       	pop	r8
    1f24:	08 95       	ret

Disassembly of section .text.ADC_get_value:

000026d4 <ADC_get_value>:
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	1f 93       	push	r17
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <ADC_get_value+0xc>
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	7c 01       	movw	r14, r24
    26e6:	8f ef       	ldi	r24, 0xFF	; 255
    26e8:	9f ef       	ldi	r25, 0xFF	; 255
    26ea:	f7 01       	movw	r30, r14
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	42 e0       	ldi	r20, 0x02	; 2
    26f2:	be 01       	movw	r22, r28
    26f4:	6f 5f       	subi	r22, 0xFF	; 255
    26f6:	7f 4f       	sbci	r23, 0xFF	; 255
    26f8:	8d e4       	ldi	r24, 0x4D	; 77
    26fa:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <TWI_API_read_data_ack_end_nack_stop>
    26fe:	18 2f       	mov	r17, r24
    2700:	81 11       	cpse	r24, r1
    2702:	0d c0       	rjmp	.+26     	; 0x271e <ADC_get_value+0x4a>
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	98 2f       	mov	r25, r24
    270a:	88 27       	eor	r24, r24
    270c:	2a 81       	ldd	r18, Y+2	; 0x02
    270e:	82 2b       	or	r24, r18
    2710:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <calc_ppm_methane>
    2714:	f7 01       	movw	r30, r14
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	80 83       	st	Z, r24
    271a:	81 2f       	mov	r24, r17
    271c:	01 c0       	rjmp	.+2      	; 0x2720 <ADC_get_value+0x4c>
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	1f 91       	pop	r17
    272a:	ff 90       	pop	r15
    272c:	ef 90       	pop	r14
    272e:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00002c9a <vect_ADC_do_sample>:
    2c9a:	80 91 96 0d 	lds	r24, 0x0D96	; 0x800d96 <_data>
    2c9e:	90 91 97 0d 	lds	r25, 0x0D97	; 0x800d97 <_data+0x1>
    2ca2:	20 91 94 0d 	lds	r18, 0x0D94	; 0x800d94 <cntSamples>
    2ca6:	30 91 95 0d 	lds	r19, 0x0D95	; 0x800d95 <cntSamples+0x1>
    2caa:	a9 01       	movw	r20, r18
    2cac:	4f 5f       	subi	r20, 0xFF	; 255
    2cae:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb0:	50 93 95 0d 	sts	0x0D95, r21	; 0x800d95 <cntSamples+0x1>
    2cb4:	40 93 94 0d 	sts	0x0D94, r20	; 0x800d94 <cntSamples>
    2cb8:	22 0f       	add	r18, r18
    2cba:	33 1f       	adc	r19, r19
    2cbc:	82 0f       	add	r24, r18
    2cbe:	93 1f       	adc	r25, r19
    2cc0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <ADC_get_value>
    2cc4:	20 91 94 0d 	lds	r18, 0x0D94	; 0x800d94 <cntSamples>
    2cc8:	30 91 95 0d 	lds	r19, 0x0D95	; 0x800d95 <cntSamples+0x1>
    2ccc:	80 91 98 0d 	lds	r24, 0x0D98	; 0x800d98 <_nSamples>
    2cd0:	90 91 99 0d 	lds	r25, 0x0D99	; 0x800d99 <_nSamples+0x1>
    2cd4:	28 17       	cp	r18, r24
    2cd6:	39 07       	cpc	r19, r25
    2cd8:	10 f0       	brcs	.+4      	; 0x2cde <vect_ADC_do_sample+0x44>
    2cda:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <TC0_HAL_stop>
    2cde:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

000039b8 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

ADC_STATUS ADC_start_sampling(){
	TC0_HAL_start();
    39b8:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <TC0_HAL_start>
	vect_ADC_do_sample();
    39bc:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <vect_ADC_do_sample>
	return ADC_STATUS_SUCCESS;
}
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	08 95       	ret

Disassembly of section .text.JN_join_network:

0000077e <JN_join_network>:
#include "../../../HAL/RN2483/RN2483_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
 77e:	af 92       	push	r10
 780:	bf 92       	push	r11
 782:	cf 92       	push	r12
 784:	df 92       	push	r13
 786:	ef 92       	push	r14
 788:	ff 92       	push	r15
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	cd b7       	in	r28, 0x3d	; 61
 792:	de b7       	in	r29, 0x3e	; 62
 794:	28 97       	sbiw	r28, 0x08	; 8
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	f8 94       	cli
 79a:	de bf       	out	0x3e, r29	; 62
 79c:	0f be       	out	0x3f, r0	; 63
 79e:	cd bf       	out	0x3d, r28	; 61
 7a0:	5c 01       	movw	r10, r24
 7a2:	6b 01       	movw	r12, r22
 7a4:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
 7a6:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	
	
	while(1){
		switch(state){
 7a8:	e1 2f       	mov	r30, r17
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	ed 30       	cpi	r30, 0x0D	; 13
 7ae:	f1 05       	cpc	r31, r1
 7b0:	d8 f7       	brcc	.-10     	; 0x7a8 <JN_join_network+0x2a>
 7b2:	e2 5c       	subi	r30, 0xC2	; 194
 7b4:	ff 4f       	sbci	r31, 0xFF	; 255
 7b6:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
 7ba:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <rn2483_reset_active>
 7be:	2f ef       	ldi	r18, 0xFF	; 255
 7c0:	89 e6       	ldi	r24, 0x69	; 105
 7c2:	98 e1       	ldi	r25, 0x18	; 24
 7c4:	21 50       	subi	r18, 0x01	; 1
 7c6:	80 40       	sbci	r24, 0x00	; 0
 7c8:	90 40       	sbci	r25, 0x00	; 0
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <JN_join_network+0x46>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <JN_join_network+0x50>
 7ce:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
 7d0:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
 7d4:	4c e0       	ldi	r20, 0x0C	; 12
 7d6:	50 e0       	ldi	r21, 0x00	; 0
 7d8:	62 e0       	ldi	r22, 0x02	; 2
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	ce 01       	movw	r24, r28
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
 7e4:	25 e9       	ldi	r18, 0x95	; 149
 7e6:	32 e0       	ldi	r19, 0x02	; 2
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	61 e0       	ldi	r22, 0x01	; 1
 7ec:	ce 01       	movw	r24, r28
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
 7f4:	11 e0       	ldi	r17, 0x01	; 1
			break;
 7f6:	d8 cf       	rjmp	.-80     	; 0x7a8 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
 7f8:	4c e9       	ldi	r20, 0x9C	; 156
 7fa:	52 e0       	ldi	r21, 0x02	; 2
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	80 e9       	ldi	r24, 0x90	; 144
 800:	92 e0       	ldi	r25, 0x02	; 2
 802:	0e 94 06 19 	call	0x320c	; 0x320c <cmd_with_ending>
				util_transmit_msg(lm_msg);
 806:	80 e9       	ldi	r24, 0x90	; 144
 808:	92 e0       	ldi	r25, 0x02	; 2
 80a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
 80e:	4c e0       	ldi	r20, 0x0C	; 12
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	63 e0       	ldi	r22, 0x03	; 3
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	ce 01       	movw	r24, r28
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 81e:	2a ea       	ldi	r18, 0xAA	; 170
 820:	32 e0       	ldi	r19, 0x02	; 2
 822:	40 e0       	ldi	r20, 0x00	; 0
 824:	60 e0       	ldi	r22, 0x00	; 0
 826:	ce 01       	movw	r24, r28
 828:	01 96       	adiw	r24, 0x01	; 1
 82a:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 82e:	11 e0       	ldi	r17, 0x01	; 1
			break;
 830:	bb cf       	rjmp	.-138    	; 0x7a8 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
 832:	b5 01       	movw	r22, r10
 834:	80 e9       	ldi	r24, 0x90	; 144
 836:	92 e0       	ldi	r25, 0x02	; 2
 838:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <mac_set_deveui>
				attach_ending(lm_msg);
 83c:	80 e9       	ldi	r24, 0x90	; 144
 83e:	92 e0       	ldi	r25, 0x02	; 2
 840:	0e 94 67 1b 	call	0x36ce	; 0x36ce <attach_ending>
				util_transmit_msg(lm_msg);
 844:	80 e9       	ldi	r24, 0x90	; 144
 846:	92 e0       	ldi	r25, 0x02	; 2
 848:	0e 94 75 1b 	call	0x36ea	; 0x36ea <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
 84c:	4c e0       	ldi	r20, 0x0C	; 12
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	64 e0       	ldi	r22, 0x04	; 4
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	ce 01       	movw	r24, r28
 856:	01 96       	adiw	r24, 0x01	; 1
 858:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 85c:	2a ea       	ldi	r18, 0xAA	; 170
 85e:	32 e0       	ldi	r19, 0x02	; 2
 860:	40 e0       	ldi	r20, 0x00	; 0
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	ce 01       	movw	r24, r28
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 86c:	11 e0       	ldi	r17, 0x01	; 1
			break;
 86e:	9c cf       	rjmp	.-200    	; 0x7a8 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
 870:	b7 01       	movw	r22, r14
 872:	80 e9       	ldi	r24, 0x90	; 144
 874:	92 e0       	ldi	r25, 0x02	; 2
 876:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <mac_set_appkey>
				attach_ending(lm_msg);
 87a:	80 e9       	ldi	r24, 0x90	; 144
 87c:	92 e0       	ldi	r25, 0x02	; 2
 87e:	0e 94 67 1b 	call	0x36ce	; 0x36ce <attach_ending>
				util_transmit_msg(lm_msg);
 882:	80 e9       	ldi	r24, 0x90	; 144
 884:	92 e0       	ldi	r25, 0x02	; 2
 886:	0e 94 75 1b 	call	0x36ea	; 0x36ea <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
 88a:	4c e0       	ldi	r20, 0x0C	; 12
 88c:	50 e0       	ldi	r21, 0x00	; 0
 88e:	65 e0       	ldi	r22, 0x05	; 5
 890:	70 e0       	ldi	r23, 0x00	; 0
 892:	ce 01       	movw	r24, r28
 894:	01 96       	adiw	r24, 0x01	; 1
 896:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 89a:	2a ea       	ldi	r18, 0xAA	; 170
 89c:	32 e0       	ldi	r19, 0x02	; 2
 89e:	40 e0       	ldi	r20, 0x00	; 0
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	ce 01       	movw	r24, r28
 8a4:	01 96       	adiw	r24, 0x01	; 1
 8a6:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 8aa:	11 e0       	ldi	r17, 0x01	; 1
			break;
 8ac:	7d cf       	rjmp	.-262    	; 0x7a8 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
 8ae:	b6 01       	movw	r22, r12
 8b0:	80 e9       	ldi	r24, 0x90	; 144
 8b2:	92 e0       	ldi	r25, 0x02	; 2
 8b4:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <mac_set_appeui>
				attach_ending(lm_msg);
 8b8:	80 e9       	ldi	r24, 0x90	; 144
 8ba:	92 e0       	ldi	r25, 0x02	; 2
 8bc:	0e 94 67 1b 	call	0x36ce	; 0x36ce <attach_ending>
				util_transmit_msg(lm_msg);
 8c0:	80 e9       	ldi	r24, 0x90	; 144
 8c2:	92 e0       	ldi	r25, 0x02	; 2
 8c4:	0e 94 75 1b 	call	0x36ea	; 0x36ea <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
 8c8:	4c e0       	ldi	r20, 0x0C	; 12
 8ca:	50 e0       	ldi	r21, 0x00	; 0
 8cc:	66 e0       	ldi	r22, 0x06	; 6
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	ce 01       	movw	r24, r28
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 8d8:	2a ea       	ldi	r18, 0xAA	; 170
 8da:	32 e0       	ldi	r19, 0x02	; 2
 8dc:	40 e0       	ldi	r20, 0x00	; 0
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	ce 01       	movw	r24, r28
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 8e8:	11 e0       	ldi	r17, 0x01	; 1
			break;
 8ea:	5e cf       	rjmp	.-324    	; 0x7a8 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
 8ec:	61 e0       	ldi	r22, 0x01	; 1
 8ee:	80 e9       	ldi	r24, 0x90	; 144
 8f0:	92 e0       	ldi	r25, 0x02	; 2
 8f2:	0e 94 83 19 	call	0x3306	; 0x3306 <mac_set_ADR>
				attach_ending(lm_msg);
 8f6:	80 e9       	ldi	r24, 0x90	; 144
 8f8:	92 e0       	ldi	r25, 0x02	; 2
 8fa:	0e 94 67 1b 	call	0x36ce	; 0x36ce <attach_ending>
				util_transmit_msg(lm_msg);
 8fe:	80 e9       	ldi	r24, 0x90	; 144
 900:	92 e0       	ldi	r25, 0x02	; 2
 902:	0e 94 75 1b 	call	0x36ea	; 0x36ea <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
 906:	4c e0       	ldi	r20, 0x0C	; 12
 908:	50 e0       	ldi	r21, 0x00	; 0
 90a:	67 e0       	ldi	r22, 0x07	; 7
 90c:	70 e0       	ldi	r23, 0x00	; 0
 90e:	ce 01       	movw	r24, r28
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 916:	2a ea       	ldi	r18, 0xAA	; 170
 918:	32 e0       	ldi	r19, 0x02	; 2
 91a:	40 e0       	ldi	r20, 0x00	; 0
 91c:	60 e0       	ldi	r22, 0x00	; 0
 91e:	ce 01       	movw	r24, r28
 920:	01 96       	adiw	r24, 0x01	; 1
 922:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 926:	11 e0       	ldi	r17, 0x01	; 1
			break;
 928:	3f cf       	rjmp	.-386    	; 0x7a8 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
 92a:	4d ea       	ldi	r20, 0xAD	; 173
 92c:	52 e0       	ldi	r21, 0x02	; 2
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	80 e9       	ldi	r24, 0x90	; 144
 932:	92 e0       	ldi	r25, 0x02	; 2
 934:	0e 94 06 19 	call	0x320c	; 0x320c <cmd_with_ending>
				util_transmit_msg(lm_msg);
 938:	80 e9       	ldi	r24, 0x90	; 144
 93a:	92 e0       	ldi	r25, 0x02	; 2
 93c:	0e 94 75 1b 	call	0x36ea	; 0x36ea <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
 940:	4c e0       	ldi	r20, 0x0C	; 12
 942:	50 e0       	ldi	r21, 0x00	; 0
 944:	68 e0       	ldi	r22, 0x08	; 8
 946:	70 e0       	ldi	r23, 0x00	; 0
 948:	ce 01       	movw	r24, r28
 94a:	01 96       	adiw	r24, 0x01	; 1
 94c:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 950:	2a ea       	ldi	r18, 0xAA	; 170
 952:	32 e0       	ldi	r19, 0x02	; 2
 954:	40 e0       	ldi	r20, 0x00	; 0
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	ce 01       	movw	r24, r28
 95a:	01 96       	adiw	r24, 0x01	; 1
 95c:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 960:	11 e0       	ldi	r17, 0x01	; 1
			break;
 962:	22 cf       	rjmp	.-444    	; 0x7a8 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
 964:	46 eb       	ldi	r20, 0xB6	; 182
 966:	52 e0       	ldi	r21, 0x02	; 2
 968:	60 e0       	ldi	r22, 0x00	; 0
 96a:	80 e9       	ldi	r24, 0x90	; 144
 96c:	92 e0       	ldi	r25, 0x02	; 2
 96e:	0e 94 06 19 	call	0x320c	; 0x320c <cmd_with_ending>
				util_transmit_msg(lm_msg);
 972:	80 e9       	ldi	r24, 0x90	; 144
 974:	92 e0       	ldi	r25, 0x02	; 2
 976:	0e 94 75 1b 	call	0x36ea	; 0x36ea <util_transmit_msg>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
 97a:	4a e0       	ldi	r20, 0x0A	; 10
 97c:	50 e0       	ldi	r21, 0x00	; 0
 97e:	69 e0       	ldi	r22, 0x09	; 9
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	ce 01       	movw	r24, r28
 984:	01 96       	adiw	r24, 0x01	; 1
 986:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
 98a:	2a ea       	ldi	r18, 0xAA	; 170
 98c:	32 e0       	ldi	r19, 0x02	; 2
 98e:	40 e0       	ldi	r20, 0x00	; 0
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	ce 01       	movw	r24, r28
 994:	01 96       	adiw	r24, 0x01	; 1
 996:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 99a:	11 e0       	ldi	r17, 0x01	; 1
			break;
 99c:	05 cf       	rjmp	.-502    	; 0x7a8 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
 99e:	4a e0       	ldi	r20, 0x0A	; 10
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	6b e0       	ldi	r22, 0x0B	; 11
 9a4:	70 e0       	ldi	r23, 0x00	; 0
 9a6:	ce 01       	movw	r24, r28
 9a8:	01 96       	adiw	r24, 0x01	; 1
 9aa:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
 9ae:	24 ec       	ldi	r18, 0xC4	; 196
 9b0:	32 e0       	ldi	r19, 0x02	; 2
 9b2:	40 e0       	ldi	r20, 0x00	; 0
 9b4:	60 e0       	ldi	r22, 0x00	; 0
 9b6:	ce 01       	movw	r24, r28
 9b8:	01 96       	adiw	r24, 0x01	; 1
 9ba:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
 9be:	11 e0       	ldi	r17, 0x01	; 1
			break;
 9c0:	f3 ce       	rjmp	.-538    	; 0x7a8 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return util_parse_err(lm_msg);
 9c2:	80 e9       	ldi	r24, 0x90	; 144
 9c4:	92 e0       	ldi	r25, 0x02	; 2
 9c6:	0e 94 c5 13 	call	0x278a	; 0x278a <util_parse_err>
 9ca:	14 c0       	rjmp	.+40     	; 0x9f4 <__EEPROM_REGION_LENGTH__+0x1f4>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
 9cc:	0e 94 ad 1c 	call	0x395a	; 0x395a <uart0_hal_message_ready>
 9d0:	88 23       	and	r24, r24
 9d2:	09 f4       	brne	.+2      	; 0x9d6 <__EEPROM_REGION_LENGTH__+0x1d6>
 9d4:	e9 ce       	rjmp	.-558    	; 0x7a8 <JN_join_network+0x2a>
					util_read_msg(lm_msg);
 9d6:	80 e9       	ldi	r24, 0x90	; 144
 9d8:	92 e0       	ldi	r25, 0x02	; 2
 9da:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
 9de:	60 e9       	ldi	r22, 0x90	; 144
 9e0:	72 e0       	ldi	r23, 0x02	; 2
 9e2:	ce 01       	movw	r24, r28
 9e4:	01 96       	adiw	r24, 0x01	; 1
 9e6:	0e 94 0c 13 	call	0x2618	; 0x2618 <util_matchMessage>
 9ea:	18 2f       	mov	r17, r24
 9ec:	dd ce       	rjmp	.-582    	; 0x7a8 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <__EEPROM_REGION_LENGTH__+0x1f4>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
 9f2:	82 e0       	ldi	r24, 0x02	; 2
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
 9f4:	28 96       	adiw	r28, 0x08	; 8
 9f6:	0f b6       	in	r0, 0x3f	; 63
 9f8:	f8 94       	cli
 9fa:	de bf       	out	0x3e, r29	; 62
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	cd bf       	out	0x3d, r28	; 61
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	1f 91       	pop	r17
 a06:	ff 90       	pop	r15
 a08:	ef 90       	pop	r14
 a0a:	df 90       	pop	r13
 a0c:	cf 90       	pop	r12
 a0e:	bf 90       	pop	r11
 a10:	af 90       	pop	r10
 a12:	08 95       	ret

Disassembly of section .text.set_block_uplink:

000037be <set_block_uplink>:
bool LM_is_free(){
	return busy==false;
}

static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&block_uplink);
    37be:	89 e5       	ldi	r24, 0x59	; 89
    37c0:	9b e1       	ldi	r25, 0x1B	; 27
    37c2:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <TC2_HAL_subscribe>
    37c6:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <subPointer>
	busy=true;
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <busy>
	cnt=0;
    37d0:	10 92 b4 0d 	sts	0x0DB4, r1	; 0x800db4 <cnt>
    37d4:	08 95       	ret

Disassembly of section .text.block_uplink:

000036b2 <block_uplink>:
}

static void block_uplink(){
	cnt++;
    36b2:	80 91 b4 0d 	lds	r24, 0x0DB4	; 0x800db4 <cnt>
    36b6:	8f 5f       	subi	r24, 0xFF	; 255
    36b8:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    36bc:	86 30       	cpi	r24, 0x06	; 6
    36be:	30 f0       	brcs	.+12     	; 0x36cc <block_uplink+0x1a>
		busy=false;
    36c0:	10 92 b3 0d 	sts	0x0DB3, r1	; 0x800db3 <busy>
		TC2_HAL_cancel(subPointer);
    36c4:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <subPointer>
    36c8:	0e 94 f7 17 	call	0x2fee	; 0x2fee <TC2_HAL_cancel>
    36cc:	08 95       	ret

Disassembly of section .text.LM_join_network:

00003a76 <LM_join_network>:

static void block_uplink();
static void set_block_uplink();

LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    3a76:	0e 94 bf 03 	call	0x77e	; 0x77e <JN_join_network>
}
    3a7a:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

000033f4 <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    33f4:	1f 93       	push	r17
    33f6:	cf 93       	push	r28
    33f8:	df 93       	push	r29
    33fa:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    33fc:	90 91 b3 0d 	lds	r25, 0x0DB3	; 0x800db3 <busy>
    3400:	91 11       	cpse	r25, r1
    3402:	0a c0       	rjmp	.+20     	; 0x3418 <LM_send_uplink+0x24>
    3404:	16 2f       	mov	r17, r22
    3406:	e9 01       	movw	r28, r18
	set_block_uplink();
    3408:	0e 94 df 1b 	call	0x37be	; 0x37be <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    340c:	41 2f       	mov	r20, r17
    340e:	be 01       	movw	r22, r28
    3410:	84 e6       	ldi	r24, 0x64	; 100
    3412:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <SU_send_uplink>
    3416:	01 c0       	rjmp	.+2      	; 0x341a <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    3418:	83 e0       	ldi	r24, 0x03	; 3
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    341a:	df 91       	pop	r29
    341c:	cf 91       	pop	r28
    341e:	1f 91       	pop	r17
    3420:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00003a7c <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
    3a7c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SC_put_to_sleep>
}
    3a80:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00003a82 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    3a82:	0e 94 1f 19 	call	0x323e	; 0x323e <SC_wake_up>
}
    3a86:	08 95       	ret

Disassembly of section .text.LM_is_free:

00003a20 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    3a20:	90 91 b3 0d 	lds	r25, 0x0DB3	; 0x800db3 <busy>
}
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	89 27       	eor	r24, r25
    3a28:	08 95       	ret

Disassembly of section .text.tohex:

000020d4 <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    20d4:	6f 92       	push	r6
    20d6:	7f 92       	push	r7
    20d8:	8f 92       	push	r8
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	7c 01       	movw	r14, r24
    20e8:	3a 01       	movw	r6, r20
    20ea:	86 2e       	mov	r8, r22
    20ec:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    20ee:	c0 e0       	ldi	r28, 0x00	; 0
    20f0:	d0 e0       	ldi	r29, 0x00	; 0
    20f2:	25 c0       	rjmp	.+74     	; 0x213e <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    20f4:	a8 2d       	mov	r26, r8
    20f6:	c3 01       	movw	r24, r6
    20f8:	8c 0f       	add	r24, r28
    20fa:	9d 1f       	adc	r25, r29
    20fc:	a1 1d       	adc	r26, r1
    20fe:	d7 fd       	sbrc	r29, 7
    2100:	aa 95       	dec	r26
    2102:	fc 01       	movw	r30, r24
    2104:	24 91       	lpm	r18, Z
    2106:	a7 fd       	sbrc	r26, 7
    2108:	20 81       	ld	r18, Z
    210a:	ce 01       	movw	r24, r28
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	1f 92       	push	r1
    2112:	2f 93       	push	r18
    2114:	22 e2       	ldi	r18, 0x22	; 34
    2116:	32 e0       	ldi	r19, 0x02	; 2
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	4f 93       	push	r20
    211c:	3f 93       	push	r19
    211e:	2f 93       	push	r18
    2120:	8e 0d       	add	r24, r14
    2122:	9f 1d       	adc	r25, r15
    2124:	9f 93       	push	r25
    2126:	8f 93       	push	r24
    2128:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    212c:	21 96       	adiw	r28, 0x01	; 1
    212e:	8d b7       	in	r24, 0x3d	; 61
    2130:	9e b7       	in	r25, 0x3e	; 62
    2132:	07 96       	adiw	r24, 0x07	; 7
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	9e bf       	out	0x3e, r25	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	8d bf       	out	0x3d, r24	; 61
    213e:	c0 17       	cp	r28, r16
    2140:	d1 07       	cpc	r29, r17
    2142:	c4 f2       	brlt	.-80     	; 0x20f4 <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	ff 90       	pop	r15
    214e:	ef 90       	pop	r14
    2150:	8f 90       	pop	r8
    2152:	7f 90       	pop	r7
    2154:	6f 90       	pop	r6
    2156:	08 95       	ret

Disassembly of section .text.attach_ending:

000036ce <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    36ce:	fc 01       	movw	r30, r24
    36d0:	01 90       	ld	r0, Z+
    36d2:	00 20       	and	r0, r0
    36d4:	e9 f7       	brne	.-6      	; 0x36d0 <attach_ending+0x2>
    36d6:	cf 01       	movw	r24, r30
    36d8:	23 e0       	ldi	r18, 0x03	; 3
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	47 e2       	ldi	r20, 0x27	; 39
    36de:	52 e0       	ldi	r21, 0x02	; 2
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <memcpy>
    36e8:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

0000320c <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    3212:	0e 94 3c 1b 	call	0x3678	; 0x3678 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    3216:	fe 01       	movw	r30, r28
    3218:	01 90       	ld	r0, Z+
    321a:	00 20       	and	r0, r0
    321c:	e9 f7       	brne	.-6      	; 0x3218 <cmd_with_ending+0xc>
    321e:	cf 01       	movw	r24, r30
    3220:	23 e0       	ldi	r18, 0x03	; 3
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	47 e2       	ldi	r20, 0x27	; 39
    3226:	52 e0       	ldi	r21, 0x02	; 2
    3228:	60 e0       	ldi	r22, 0x00	; 0
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <memcpy>
	return strlen(buffer);
    3230:	be 01       	movw	r22, r28
    3232:	80 e8       	ldi	r24, 0x80	; 128
    3234:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
}
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

000025ba <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    25be:	44 36       	cpi	r20, 0x64	; 100
    25c0:	51 05       	cpc	r21, r1
    25c2:	61 05       	cpc	r22, r1
    25c4:	71 05       	cpc	r23, r1
    25c6:	18 f1       	brcs	.+70     	; 0x260e <sys_sleep_cmd+0x54>
    25c8:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    25ca:	7f 93       	push	r23
    25cc:	6f 93       	push	r22
    25ce:	5f 93       	push	r21
    25d0:	4f 93       	push	r20
    25d2:	8a e2       	ldi	r24, 0x2A	; 42
    25d4:	92 e0       	ldi	r25, 0x02	; 2
    25d6:	a0 e0       	ldi	r26, 0x00	; 0
    25d8:	af 93       	push	r26
    25da:	9f 93       	push	r25
    25dc:	8f 93       	push	r24
    25de:	84 e3       	ldi	r24, 0x34	; 52
    25e0:	92 e0       	ldi	r25, 0x02	; 2
    25e2:	a0 e0       	ldi	r26, 0x00	; 0
    25e4:	af 93       	push	r26
    25e6:	9f 93       	push	r25
    25e8:	8f 93       	push	r24
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sprintf>
    return strlen(buffer);
    25f2:	be 01       	movw	r22, r28
    25f4:	80 e8       	ldi	r24, 0x80	; 128
    25f6:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
    25fa:	2d b7       	in	r18, 0x3d	; 61
    25fc:	3e b7       	in	r19, 0x3e	; 62
    25fe:	24 5f       	subi	r18, 0xF4	; 244
    2600:	3f 4f       	sbci	r19, 0xFF	; 255
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	3e bf       	out	0x3e, r19	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	2d bf       	out	0x3d, r18	; 61
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    260e:	8f ef       	ldi	r24, 0xFF	; 255
    2610:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00002922 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    292c:	2f 93       	push	r18
    292e:	1f 93       	push	r17
    2930:	0f 93       	push	r16
    2932:	6f 93       	push	r22
    2934:	5f 93       	push	r21
    2936:	4f 93       	push	r20
    2938:	8b e3       	ldi	r24, 0x3B	; 59
    293a:	92 e0       	ldi	r25, 0x02	; 2
    293c:	a0 e0       	ldi	r26, 0x00	; 0
    293e:	af 93       	push	r26
    2940:	9f 93       	push	r25
    2942:	8f 93       	push	r24
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sprintf>
    return strlen(buffer);
    294c:	be 01       	movw	r22, r28
    294e:	80 e8       	ldi	r24, 0x80	; 128
    2950:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
    2954:	2d b7       	in	r18, 0x3d	; 61
    2956:	3e b7       	in	r19, 0x3e	; 62
    2958:	25 5f       	subi	r18, 0xF5	; 245
    295a:	3f 4f       	sbci	r19, 0xFF	; 255
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	3e bf       	out	0x3e, r19	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	2d bf       	out	0x3d, r18	; 61
}
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	1f 91       	pop	r17
    296c:	0f 91       	pop	r16
    296e:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00002b7c <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    2b7c:	cf 92       	push	r12
    2b7e:	df 92       	push	r13
    2b80:	ef 92       	push	r14
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    2b8c:	6b 01       	movw	r12, r22
    2b8e:	80 e8       	ldi	r24, 0x80	; 128
    2b90:	e8 2e       	mov	r14, r24
    2b92:	8e 2d       	mov	r24, r14
    2b94:	b6 01       	movw	r22, r12
    2b96:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
    2b9a:	40 97       	sbiw	r24, 0x10	; 16
    2b9c:	49 f4       	brne	.+18     	; 0x2bb0 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    2b9e:	2e 2d       	mov	r18, r14
    2ba0:	86 01       	movw	r16, r12
    2ba2:	41 e4       	ldi	r20, 0x41	; 65
    2ba4:	52 e0       	ldi	r21, 0x02	; 2
    2ba6:	60 e0       	ldi	r22, 0x00	; 0
    2ba8:	ce 01       	movw	r24, r28
    2baa:	0e 94 91 14 	call	0x2922	; 0x2922 <mac_set_parameter>
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
    2bb2:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    2bb4:	df 91       	pop	r29
    2bb6:	cf 91       	pop	r28
    2bb8:	1f 91       	pop	r17
    2bba:	0f 91       	pop	r16
    2bbc:	ef 90       	pop	r14
    2bbe:	df 90       	pop	r13
    2bc0:	cf 90       	pop	r12
    2bc2:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00002bc4 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    2bc4:	cf 92       	push	r12
    2bc6:	df 92       	push	r13
    2bc8:	ef 92       	push	r14
    2bca:	0f 93       	push	r16
    2bcc:	1f 93       	push	r17
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    2bd4:	6b 01       	movw	r12, r22
    2bd6:	80 e8       	ldi	r24, 0x80	; 128
    2bd8:	e8 2e       	mov	r14, r24
    2bda:	8e 2d       	mov	r24, r14
    2bdc:	b6 01       	movw	r22, r12
    2bde:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
    2be2:	40 97       	sbiw	r24, 0x10	; 16
    2be4:	49 f4       	brne	.+18     	; 0x2bf8 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    2be6:	2e 2d       	mov	r18, r14
    2be8:	86 01       	movw	r16, r12
    2bea:	40 e5       	ldi	r20, 0x50	; 80
    2bec:	52 e0       	ldi	r21, 0x02	; 2
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	0e 94 91 14 	call	0x2922	; 0x2922 <mac_set_parameter>
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	ef 90       	pop	r14
    2c06:	df 90       	pop	r13
    2c08:	cf 90       	pop	r12
    2c0a:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00002c0c <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    2c0c:	cf 92       	push	r12
    2c0e:	df 92       	push	r13
    2c10:	ef 92       	push	r14
    2c12:	0f 93       	push	r16
    2c14:	1f 93       	push	r17
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    2c1c:	6b 01       	movw	r12, r22
    2c1e:	80 e8       	ldi	r24, 0x80	; 128
    2c20:	e8 2e       	mov	r14, r24
    2c22:	8e 2d       	mov	r24, r14
    2c24:	b6 01       	movw	r22, r12
    2c26:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
    2c2a:	80 97       	sbiw	r24, 0x20	; 32
    2c2c:	49 f4       	brne	.+18     	; 0x2c40 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    2c2e:	2e 2d       	mov	r18, r14
    2c30:	86 01       	movw	r16, r12
    2c32:	4f e5       	ldi	r20, 0x5F	; 95
    2c34:	52 e0       	ldi	r21, 0x02	; 2
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	ce 01       	movw	r24, r28
    2c3a:	0e 94 91 14 	call	0x2922	; 0x2922 <mac_set_parameter>
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    2c40:	8f ef       	ldi	r24, 0xFF	; 255
    2c42:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ef 90       	pop	r14
    2c4e:	df 90       	pop	r13
    2c50:	cf 90       	pop	r12
    2c52:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00003306 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
	if(state==0){
    330a:	61 11       	cpse	r22, r1
    330c:	09 c0       	rjmp	.+18     	; 0x3320 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    330e:	0e e6       	ldi	r16, 0x6E	; 110
    3310:	12 e0       	ldi	r17, 0x02	; 2
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	42 e7       	ldi	r20, 0x72	; 114
    3316:	52 e0       	ldi	r21, 0x02	; 2
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	0e 94 91 14 	call	0x2922	; 0x2922 <mac_set_parameter>
    331e:	08 c0       	rjmp	.+16     	; 0x3330 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    3320:	0e e7       	ldi	r16, 0x7E	; 126
    3322:	12 e0       	ldi	r17, 0x02	; 2
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	42 e7       	ldi	r20, 0x72	; 114
    3328:	52 e0       	ldi	r21, 0x02	; 2
    332a:	60 e0       	ldi	r22, 0x00	; 0
    332c:	0e 94 91 14 	call	0x2922	; 0x2922 <mac_set_parameter>
	}
}
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
    3334:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00001b64 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    1b64:	df 92       	push	r13
    1b66:	ef 92       	push	r14
    1b68:	ff 92       	push	r15
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	c7 56       	subi	r28, 0x67	; 103
    1b78:	d1 09       	sbc	r29, r1
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    1b86:	9f ef       	ldi	r25, 0xFF	; 255
    1b88:	96 0f       	add	r25, r22
    1b8a:	9f 3d       	cpi	r25, 0xDF	; 223
    1b8c:	68 f5       	brcc	.+90     	; 0x1be8 <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    1b8e:	9f ef       	ldi	r25, 0xFF	; 255
    1b90:	92 0f       	add	r25, r18
    1b92:	93 33       	cpi	r25, 0x33	; 51
    1b94:	60 f5       	brcc	.+88     	; 0x1bee <mac_tx_confirmed+0x8a>
    1b96:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	60 e8       	ldi	r22, 0x80	; 128
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	7c 01       	movw	r14, r24
    1ba2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    1ba6:	c7 01       	movw	r24, r14
    1ba8:	a0 e8       	ldi	r26, 0x80	; 128
    1baa:	af 93       	push	r26
    1bac:	9f 93       	push	r25
    1bae:	ef 92       	push	r14
    1bb0:	1f 92       	push	r1
    1bb2:	df 92       	push	r13
    1bb4:	81 e8       	ldi	r24, 0x81	; 129
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	a0 e0       	ldi	r26, 0x00	; 0
    1bba:	af 93       	push	r26
    1bbc:	9f 93       	push	r25
    1bbe:	8f 93       	push	r24
    1bc0:	8c e8       	ldi	r24, 0x8C	; 140
    1bc2:	92 e0       	ldi	r25, 0x02	; 2
    1bc4:	a0 e0       	ldi	r26, 0x00	; 0
    1bc6:	af 93       	push	r26
    1bc8:	9f 93       	push	r25
    1bca:	8f 93       	push	r24
    1bcc:	1f 93       	push	r17
    1bce:	0f 93       	push	r16
    1bd0:	0e 94 93 16 	call	0x2d26	; 0x2d26 <sprintf>
    
	
    return strlen(buffer);
    1bd4:	b8 01       	movw	r22, r16
    1bd6:	80 e8       	ldi	r24, 0x80	; 128
    1bd8:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	05 c0       	rjmp	.+10     	; 0x1bf2 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	9f ef       	ldi	r25, 0xFF	; 255
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    1bee:	8f ef       	ldi	r24, 0xFF	; 255
    1bf0:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    1bf2:	c9 59       	subi	r28, 0x99	; 153
    1bf4:	df 4f       	sbci	r29, 0xFF	; 255
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	1f 91       	pop	r17
    1c06:	0f 91       	pop	r16
    1c08:	ff 90       	pop	r15
    1c0a:	ef 90       	pop	r14
    1c0c:	df 90       	pop	r13
    1c0e:	08 95       	ret

Disassembly of section .text.beginsWidth:

00002aea <beginsWidth>:
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
}

static bool beginsWidth(const char *s1, const char *s2){
    2aea:	6f 92       	push	r6
    2aec:	7f 92       	push	r7
    2aee:	8f 92       	push	r8
    2af0:	cf 92       	push	r12
    2af2:	df 92       	push	r13
    2af4:	ef 92       	push	r14
    2af6:	0f 93       	push	r16
    2af8:	1f 93       	push	r17
    2afa:	3b 01       	movw	r6, r22
    2afc:	88 2e       	mov	r8, r24
    2afe:	69 01       	movw	r12, r18
    2b00:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    2b02:	84 2f       	mov	r24, r20
    2b04:	b9 01       	movw	r22, r18
    2b06:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
    2b0a:	8c 01       	movw	r16, r24
    2b0c:	4e 2d       	mov	r20, r14
    2b0e:	96 01       	movw	r18, r12
    2b10:	88 2d       	mov	r24, r8
    2b12:	b3 01       	movw	r22, r6
    2b14:	0e 94 41 12 	call	0x2482	; 0x2482 <strncmp>
    2b18:	21 e0       	ldi	r18, 0x01	; 1
    2b1a:	89 2b       	or	r24, r25
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <beginsWidth+0x36>
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	82 2f       	mov	r24, r18
    2b22:	1f 91       	pop	r17
    2b24:	0f 91       	pop	r16
    2b26:	ef 90       	pop	r14
    2b28:	df 90       	pop	r13
    2b2a:	cf 90       	pop	r12
    2b2c:	8f 90       	pop	r8
    2b2e:	7f 90       	pop	r7
    2b30:	6f 90       	pop	r6
    2b32:	08 95       	ret

Disassembly of section .text.decode_tx_response:

000024ec <decode_tx_response>:
			break;
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
    24ec:	cf 92       	push	r12
    24ee:	df 92       	push	r13
    24f0:	ef 92       	push	r14
    24f2:	6b 01       	movw	r12, r22
    24f4:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    24f6:	2d ec       	ldi	r18, 0xCD	; 205
    24f8:	32 e0       	ldi	r19, 0x02	; 2
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strcmp>
    2500:	89 2b       	or	r24, r25
    2502:	e9 f0       	breq	.+58     	; 0x253e <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2504:	28 ed       	ldi	r18, 0xD8	; 216
    2506:	32 e0       	ldi	r19, 0x02	; 2
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	8e 2d       	mov	r24, r14
    250c:	b6 01       	movw	r22, r12
    250e:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strcmp>
    2512:	89 2b       	or	r24, r25
    2514:	b1 f0       	breq	.+44     	; 0x2542 <decode_tx_response+0x56>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    2516:	20 ee       	ldi	r18, 0xE0	; 224
    2518:	32 e0       	ldi	r19, 0x02	; 2
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	8e 2d       	mov	r24, r14
    251e:	b6 01       	movw	r22, r12
    2520:	0e 94 75 15 	call	0x2aea	; 0x2aea <beginsWidth>
    2524:	81 11       	cpse	r24, r1
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <decode_tx_response+0x5a>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
    2528:	27 ee       	ldi	r18, 0xE7	; 231
    252a:	32 e0       	ldi	r19, 0x02	; 2
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	8e 2d       	mov	r24, r14
    2530:	b6 01       	movw	r22, r12
    2532:	0e 94 75 15 	call	0x2aea	; 0x2aea <beginsWidth>
    2536:	88 23       	and	r24, r24
    2538:	41 f0       	breq	.+16     	; 0x254a <decode_tx_response+0x5e>
    253a:	89 e0       	ldi	r24, 0x09	; 9
    253c:	07 c0       	rjmp	.+14     	; 0x254c <decode_tx_response+0x60>
		}
	}
}

static SU_STATES decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return SU_TRY_AGAIN;
    253e:	87 e0       	ldi	r24, 0x07	; 7
    2540:	05 c0       	rjmp	.+10     	; 0x254c <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return SU_NO_ACK;
    2542:	88 e0       	ldi	r24, 0x08	; 8
    2544:	03 c0       	rjmp	.+6      	; 0x254c <decode_tx_response+0x60>
	if(beginsWidth(msg, MAC_RX)) return SU_HANDLE_DOWNLINK;
    2546:	83 e0       	ldi	r24, 0x03	; 3
    2548:	01 c0       	rjmp	.+2      	; 0x254c <decode_tx_response+0x60>
	if(beginsWidth(msg, INVALID_DATA_LEN)) return SU_INV_DATA_LEN;
	
	return SU_FATAL_ERROR;
    254a:	86 e0       	ldi	r24, 0x06	; 6
}
    254c:	ef 90       	pop	r14
    254e:	df 90       	pop	r13
    2550:	cf 90       	pop	r12
    2552:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

000013d2 <SU_send_uplink>:

static SU_STATES decode_tx_response(const char msg[]);
static bool beginsWidth(const char *s1, const char *s2);


LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	28 97       	sbiw	r28, 0x08	; 8
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	d8 2e       	mov	r13, r24
    13f2:	7b 01       	movw	r14, r22
    13f4:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    13f6:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    13f8:	e1 2f       	mov	r30, r17
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	ea 30       	cpi	r30, 0x0A	; 10
    13fe:	f1 05       	cpc	r31, r1
    1400:	d8 f7       	brcc	.-10     	; 0x13f8 <SU_send_uplink+0x26>
    1402:	e5 5b       	subi	r30, 0xB5	; 181
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__tablejump2__>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    140a:	20 2f       	mov	r18, r16
    140c:	a7 01       	movw	r20, r14
    140e:	6d 2d       	mov	r22, r13
    1410:	80 e9       	ldi	r24, 0x90	; 144
    1412:	92 e0       	ldi	r25, 0x02	; 2
    1414:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <mac_tx_confirmed>
				attach_ending(lm_msg);
    1418:	80 e9       	ldi	r24, 0x90	; 144
    141a:	92 e0       	ldi	r25, 0x02	; 2
    141c:	0e 94 67 1b 	call	0x36ce	; 0x36ce <attach_ending>
				util_transmit_msg(lm_msg);
    1420:	80 e9       	ldi	r24, 0x90	; 144
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	0e 94 75 1b 	call	0x36ea	; 0x36ea <util_transmit_msg>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	62 e0       	ldi	r22, 0x02	; 2
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1438:	28 ef       	ldi	r18, 0xF8	; 248
    143a:	32 e0       	ldi	r19, 0x02	; 2
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1448:	15 e0       	ldi	r17, 0x05	; 5
			break;
    144a:	d6 cf       	rjmp	.-84     	; 0x13f8 <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	64 e0       	ldi	r22, 0x04	; 4
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	ce 01       	movw	r24, r28
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    145c:	2b ef       	ldi	r18, 0xFB	; 251
    145e:	32 e0       	ldi	r19, 0x02	; 2
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    146c:	15 e0       	ldi	r17, 0x05	; 5
			break;
    146e:	c4 cf       	rjmp	.-120    	; 0x13f8 <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
    1470:	60 e9       	ldi	r22, 0x90	; 144
    1472:	72 e0       	ldi	r23, 0x02	; 2
    1474:	80 e8       	ldi	r24, 0x80	; 128
    1476:	0e 94 76 12 	call	0x24ec	; 0x24ec <decode_tx_response>
    147a:	18 2f       	mov	r17, r24
			break;
    147c:	bd cf       	rjmp	.-134    	; 0x13f8 <SU_send_uplink+0x26>
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
			
			case SU_NO_ACK:
				return LM_STATUS_MAC_ERR;
    147e:	85 e0       	ldi	r24, 0x05	; 5
    1480:	18 c0       	rjmp	.+48     	; 0x14b2 <SU_send_uplink+0xe0>
				
			case SU_INV_DATA_LEN:
				return LM_STATUS_INV_DATA_LEN;
    1482:	86 e0       	ldi	r24, 0x06	; 6
    1484:	16 c0       	rjmp	.+44     	; 0x14b2 <SU_send_uplink+0xe0>
			
			case SU_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;	
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	14 c0       	rjmp	.+40     	; 0x14b2 <SU_send_uplink+0xe0>
			
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    148a:	0e 94 ad 1c 	call	0x395a	; 0x395a <uart0_hal_message_ready>
    148e:	88 23       	and	r24, r24
    1490:	09 f4       	brne	.+2      	; 0x1494 <SU_send_uplink+0xc2>
    1492:	b2 cf       	rjmp	.-156    	; 0x13f8 <SU_send_uplink+0x26>
					util_read_msg(lm_msg);
    1494:	80 e9       	ldi	r24, 0x90	; 144
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <util_read_msg>
					state=util_matchMessage(&stateData, lm_msg);
    149c:	60 e9       	ldi	r22, 0x90	; 144
    149e:	72 e0       	ldi	r23, 0x02	; 2
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	0e 94 0c 13 	call	0x2618	; 0x2618 <util_matchMessage>
    14a8:	18 2f       	mov	r17, r24
    14aa:	a6 cf       	rjmp	.-180    	; 0x13f8 <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				state=decode_tx_response(lm_msg);
			break;
			
			case SU_HANDLE_DOWNLINK:
				return LM_STATUS_SUCCESS;
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <SU_send_uplink+0xe0>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_TRY_AGAIN:
				return LM_STATUS_TRY_AGAIN;
    14b0:	83 e0       	ldi	r24, 0x03	; 3
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    14b2:	28 96       	adiw	r28, 0x08	; 8
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	df 90       	pop	r13
    14cc:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00002a0a <SC_put_to_sleep>:
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    2a0a:	40 e0       	ldi	r20, 0x00	; 0
    2a0c:	5c e5       	ldi	r21, 0x5C	; 92
    2a0e:	66 e2       	ldi	r22, 0x26	; 38
    2a10:	75 e0       	ldi	r23, 0x05	; 5
    2a12:	80 e9       	ldi	r24, 0x90	; 144
    2a14:	92 e0       	ldi	r25, 0x02	; 2
    2a16:	0e 94 dd 12 	call	0x25ba	; 0x25ba <sys_sleep_cmd>
	attach_ending(lm_msg);
    2a1a:	80 e9       	ldi	r24, 0x90	; 144
    2a1c:	92 e0       	ldi	r25, 0x02	; 2
    2a1e:	0e 94 67 1b 	call	0x36ce	; 0x36ce <attach_ending>
	util_transmit_msg(lm_msg);
    2a22:	80 e9       	ldi	r24, 0x90	; 144
    2a24:	92 e0       	ldi	r25, 0x02	; 2
    2a26:	0e 94 75 1b 	call	0x36ea	; 0x36ea <util_transmit_msg>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    2a2a:	0e 94 ad 1c 	call	0x395a	; 0x395a <uart0_hal_message_ready>
    2a2e:	88 23       	and	r24, r24
    2a30:	e1 f3       	breq	.-8      	; 0x2a2a <SC_put_to_sleep+0x20>
	
	util_read_msg(lm_msg);
    2a32:	80 e9       	ldi	r24, 0x90	; 144
    2a34:	92 e0       	ldi	r25, 0x02	; 2
    2a36:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    2a3a:	60 e9       	ldi	r22, 0x90	; 144
    2a3c:	72 e0       	ldi	r23, 0x02	; 2
    2a3e:	80 e8       	ldi	r24, 0x80	; 128
    2a40:	2f e2       	ldi	r18, 0x2F	; 47
    2a42:	33 e0       	ldi	r19, 0x03	; 3
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strcmp>
    2a4a:	89 2b       	or	r24, r25
    2a4c:	11 f4       	brne	.+4      	; 0x2a52 <SC_put_to_sleep+0x48>
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	08 95       	ret
	return LM_STATUS_ERROR;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
}
    2a54:	08 95       	ret

Disassembly of section .text.SC_wake_up:

0000323e <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    323e:	85 e5       	ldi	r24, 0x55	; 85
    3240:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    3244:	0e 94 ad 1c 	call	0x395a	; 0x395a <uart0_hal_message_ready>
    3248:	88 23       	and	r24, r24
    324a:	e1 f3       	breq	.-8      	; 0x3244 <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
    324c:	80 e9       	ldi	r24, 0x90	; 144
    324e:	92 e0       	ldi	r25, 0x02	; 2
    3250:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    3254:	60 e9       	ldi	r22, 0x90	; 144
    3256:	72 e0       	ldi	r23, 0x02	; 2
    3258:	80 e8       	ldi	r24, 0x80	; 128
    325a:	2f e2       	ldi	r18, 0x2F	; 47
    325c:	33 e0       	ldi	r19, 0x03	; 3
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strcmp>
    3264:	89 2b       	or	r24, r25
    3266:	11 f4       	brne	.+4      	; 0x326c <SC_wake_up+0x2e>
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	08 95       	ret
	return LM_STATUS_ERROR;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	08 95       	ret

Disassembly of section .text.LM_strbeginswith:

00002d6c <LM_strbeginswith>:
	}
	
	return LM_STATUS_FATAL_ERROR;
}

static bool LM_strbeginswith(char *s1, const char *s2){
    2d6c:	cf 92       	push	r12
    2d6e:	df 92       	push	r13
    2d70:	ef 92       	push	r14
    2d72:	0f 93       	push	r16
    2d74:	1f 93       	push	r17
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	ec 01       	movw	r28, r24
    2d7c:	6a 01       	movw	r12, r20
    2d7e:	e6 2e       	mov	r14, r22
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    2d80:	86 2f       	mov	r24, r22
    2d82:	ba 01       	movw	r22, r20
    2d84:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
    2d88:	8c 01       	movw	r16, r24
    2d8a:	be 01       	movw	r22, r28
    2d8c:	80 e8       	ldi	r24, 0x80	; 128
    2d8e:	4e 2d       	mov	r20, r14
    2d90:	96 01       	movw	r18, r12
    2d92:	0e 94 41 12 	call	0x2482	; 0x2482 <strncmp>
    2d96:	21 e0       	ldi	r18, 0x01	; 1
    2d98:	89 2b       	or	r24, r25
    2d9a:	09 f0       	breq	.+2      	; 0x2d9e <LM_strbeginswith+0x32>
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	82 2f       	mov	r24, r18
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	ef 90       	pop	r14
    2daa:	df 90       	pop	r13
    2dac:	cf 90       	pop	r12
    2dae:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

000039c4 <util_setPendingStates>:




void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    39c4:	fc 01       	movw	r30, r24
    39c6:	71 83       	std	Z+1, r23	; 0x01
    39c8:	60 83       	st	Z, r22
	sd->failure_state=failed;
    39ca:	53 83       	std	Z+3, r21	; 0x03
    39cc:	42 83       	std	Z+2, r20	; 0x02
    39ce:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

000039d0 <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    39d0:	fc 01       	movw	r30, r24
    39d2:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    39d4:	25 83       	std	Z+5, r18	; 0x05
    39d6:	36 83       	std	Z+6, r19	; 0x06
    39d8:	47 83       	std	Z+7, r20	; 0x07
    39da:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00002618 <util_matchMessage>:
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	ec 01       	movw	r28, r24
    261e:	fb 01       	movw	r30, r22
	switch(sd->matchCase){
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	91 30       	cpi	r25, 0x01	; 1
    2624:	91 f0       	breq	.+36     	; 0x264a <util_matchMessage+0x32>
    2626:	18 f0       	brcs	.+6      	; 0x262e <util_matchMessage+0x16>
    2628:	92 30       	cpi	r25, 0x02	; 2
    262a:	e9 f0       	breq	.+58     	; 0x2666 <util_matchMessage+0x4e>
    262c:	1f c0       	rjmp	.+62     	; 0x266c <util_matchMessage+0x54>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    262e:	2d 81       	ldd	r18, Y+5	; 0x05
    2630:	3e 81       	ldd	r19, Y+6	; 0x06
    2632:	4f 81       	ldd	r20, Y+7	; 0x07
    2634:	80 e8       	ldi	r24, 0x80	; 128
    2636:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strcmp>
    263a:	89 2b       	or	r24, r25
    263c:	19 f4       	brne	.+6      	; 0x2644 <util_matchMessage+0x2c>
    263e:	88 81       	ld	r24, Y
    2640:	99 81       	ldd	r25, Y+1	; 0x01
    2642:	16 c0       	rjmp	.+44     	; 0x2670 <util_matchMessage+0x58>
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	9b 81       	ldd	r25, Y+3	; 0x03
    2648:	13 c0       	rjmp	.+38     	; 0x2670 <util_matchMessage+0x58>

		case LM_BEGINS_WITH:
		return LM_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    264a:	4d 81       	ldd	r20, Y+5	; 0x05
    264c:	5e 81       	ldd	r21, Y+6	; 0x06
    264e:	6f 81       	ldd	r22, Y+7	; 0x07
    2650:	cf 01       	movw	r24, r30
    2652:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LM_strbeginswith>
    2656:	88 23       	and	r24, r24
    2658:	19 f0       	breq	.+6      	; 0x2660 <util_matchMessage+0x48>
    265a:	88 81       	ld	r24, Y
    265c:	99 81       	ldd	r25, Y+1	; 0x01
    265e:	08 c0       	rjmp	.+16     	; 0x2670 <util_matchMessage+0x58>
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	9b 81       	ldd	r25, Y+3	; 0x03
    2664:	05 c0       	rjmp	.+10     	; 0x2670 <util_matchMessage+0x58>

		case LM_NO_TEST:
		return sd->success_state;
    2666:	88 81       	ld	r24, Y
    2668:	99 81       	ldd	r25, Y+1	; 0x01
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <util_matchMessage+0x58>
		default:
		return sd->failure_state;
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

000036ea <util_transmit_msg>:

void util_transmit_msg(char msg[]){
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    36f0:	bc 01       	movw	r22, r24
    36f2:	80 e8       	ldi	r24, 0x80	; 128
    36f4:	0e 94 11 1a 	call	0x3422	; 0x3422 <strlen>
    36f8:	68 2f       	mov	r22, r24
    36fa:	ce 01       	movw	r24, r28
    36fc:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <uart0_hal_send_message>
}
    3700:	df 91       	pop	r29
    3702:	cf 91       	pop	r28
    3704:	08 95       	ret

Disassembly of section .text.util_read_msg:

00003a88 <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str((uint8_t*) msg);
    3a88:	0e 94 3c 1a 	call	0x3478	; 0x3478 <uart0_hal_read_message_as_str>
    3a8c:	08 95       	ret

Disassembly of section .text.util_parse_err:

0000278a <util_parse_err>:
}

LM_STATUS util_parse_err(char *msg){
    278a:	cf 92       	push	r12
    278c:	df 92       	push	r13
    278e:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    2790:	6c 01       	movw	r12, r24
    2792:	20 e8       	ldi	r18, 0x80	; 128
    2794:	e2 2e       	mov	r14, r18
    2796:	25 e0       	ldi	r18, 0x05	; 5
    2798:	33 e0       	ldi	r19, 0x03	; 3
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	8e 2d       	mov	r24, r14
    279e:	b6 01       	movw	r22, r12
    27a0:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strcmp>
    27a4:	89 2b       	or	r24, r25
    27a6:	a1 f0       	breq	.+40     	; 0x27d0 <util_parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    27a8:	20 e1       	ldi	r18, 0x10	; 16
    27aa:	33 e0       	ldi	r19, 0x03	; 3
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	8e 2d       	mov	r24, r14
    27b0:	b6 01       	movw	r22, r12
    27b2:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strcmp>
    27b6:	89 2b       	or	r24, r25
    27b8:	69 f0       	breq	.+26     	; 0x27d4 <util_parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    27ba:	27 e1       	ldi	r18, 0x17	; 23
    27bc:	33 e0       	ldi	r19, 0x03	; 3
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	8e 2d       	mov	r24, r14
    27c2:	b6 01       	movw	r22, r12
    27c4:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strcmp>
    27c8:	89 2b       	or	r24, r25
    27ca:	31 f4       	brne	.+12     	; 0x27d8 <util_parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    27cc:	84 e0       	ldi	r24, 0x04	; 4
    27ce:	05 c0       	rjmp	.+10     	; 0x27da <util_parse_err+0x50>
	uart0_hal_read_message_as_str((uint8_t*) msg);
}

LM_STATUS util_parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    27d0:	83 e0       	ldi	r24, 0x03	; 3
    27d2:	03 c0       	rjmp	.+6      	; 0x27da <util_parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    27d4:	83 e0       	ldi	r24, 0x03	; 3
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <util_parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    27d8:	82 e0       	ldi	r24, 0x02	; 2
}
    27da:	ef 90       	pop	r14
    27dc:	df 90       	pop	r13
    27de:	cf 90       	pop	r12
    27e0:	08 95       	ret

Disassembly of section .text.get_group_id:

00003a8e <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    3a8e:	80 91 b5 0d 	lds	r24, 0x0DB5	; 0x800db5 <_groupId>
    3a92:	08 95       	ret

Disassembly of section .text.set_group_id:

00003a94 <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    3a94:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <_groupId>
    3a98:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00003270 <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	8c 01       	movw	r16, r24
    327a:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    327c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <get_group_id>
    3280:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    3282:	2d 2f       	mov	r18, r29
    3284:	a8 01       	movw	r20, r16
    3286:	68 2f       	mov	r22, r24
    3288:	88 e5       	ldi	r24, 0x58	; 88
    328a:	93 e0       	ldi	r25, 0x03	; 3
    328c:	0e 94 18 06 	call	0xc30	; 0xc30 <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	8c 0f       	add	r24, r28
    3294:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <set_group_id>
}
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

000023a8 <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    23a8:	ef 92       	push	r14
    23aa:	ff 92       	push	r15
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	2a 97       	sbiw	r28, 0x0a	; 10
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	18 2f       	mov	r17, r24
    23c4:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    23c6:	9e 01       	movw	r18, r28
    23c8:	2f 5f       	subi	r18, 0xFF	; 255
    23ca:	3f 4f       	sbci	r19, 0xFF	; 255
    23cc:	ab 01       	movw	r20, r22
    23ce:	68 2f       	mov	r22, r24
    23d0:	88 e5       	ldi	r24, 0x58	; 88
    23d2:	93 e0       	ldi	r25, 0x03	; 3
    23d4:	0e 94 27 10 	call	0x204e	; 0x204e <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    23d8:	9e 01       	movw	r18, r28
    23da:	27 5f       	subi	r18, 0xF7	; 247
    23dc:	3f 4f       	sbci	r19, 0xFF	; 255
    23de:	ae 01       	movw	r20, r28
    23e0:	49 5f       	subi	r20, 0xF9	; 249
    23e2:	5f 4f       	sbci	r21, 0xFF	; 255
    23e4:	61 2f       	mov	r22, r17
    23e6:	88 e5       	ldi	r24, 0x58	; 88
    23e8:	93 e0       	ldi	r25, 0x03	; 3
    23ea:	0e 94 4c 18 	call	0x3098	; 0x3098 <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    23ee:	29 85       	ldd	r18, Y+9	; 0x09
    23f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    23f2:	4f 81       	ldd	r20, Y+7	; 0x07
    23f4:	58 85       	ldd	r21, Y+8	; 0x08
    23f6:	b7 01       	movw	r22, r14
    23f8:	ce 01       	movw	r24, r28
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <mrpp_data_add_int16>
}
    2400:	2a 96       	adiw	r28, 0x0a	; 10
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	ff 90       	pop	r15
    2414:	ef 90       	pop	r14
    2416:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00003532 <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    3538:	88 e5       	ldi	r24, 0x58	; 88
    353a:	93 e0       	ldi	r25, 0x03	; 3
    353c:	0e 94 b3 19 	call	0x3366	; 0x3366 <mrpp_state_is_body_ready>
    3540:	88 83       	st	Y, r24
    3542:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    3544:	89 2f       	mov	r24, r25
    3546:	80 95       	com	r24
    
}
    3548:	88 1f       	adc	r24, r24
    354a:	88 27       	eor	r24, r24
    354c:	88 1f       	adc	r24, r24
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00001f26 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    1f26:	af 92       	push	r10
    1f28:	bf 92       	push	r11
    1f2a:	cf 92       	push	r12
    1f2c:	df 92       	push	r13
    1f2e:	ef 92       	push	r14
    1f30:	ff 92       	push	r15
    1f32:	0f 93       	push	r16
    1f34:	1f 93       	push	r17
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <MRPP_get_ready_body_package+0x16>
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <MRPP_get_ready_body_package+0x18>
    1f3e:	1f 92       	push	r1
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	6b 01       	movw	r12, r22
    1f46:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    1f48:	9e 01       	movw	r18, r28
    1f4a:	2b 5f       	subi	r18, 0xFB	; 251
    1f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4e:	79 01       	movw	r14, r18
    1f50:	8e 01       	movw	r16, r28
    1f52:	0d 5f       	subi	r16, 0xFD	; 253
    1f54:	1f 4f       	sbci	r17, 0xFF	; 255
    1f56:	23 50       	subi	r18, 0x03	; 3
    1f58:	31 09       	sbc	r19, r1
    1f5a:	ae 01       	movw	r20, r28
    1f5c:	4f 5f       	subi	r20, 0xFF	; 255
    1f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f60:	bc 01       	movw	r22, r24
    1f62:	88 e5       	ldi	r24, 0x58	; 88
    1f64:	93 e0       	ldi	r25, 0x03	; 3
    1f66:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    1f6a:	88 23       	and	r24, r24
    1f6c:	b1 f0       	breq	.+44     	; 0x1f9a <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    1f6e:	4d 81       	ldd	r20, Y+5	; 0x05
    1f70:	83 e0       	ldi	r24, 0x03	; 3
    1f72:	84 0f       	add	r24, r20
    1f74:	f5 01       	movw	r30, r10
    1f76:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    1f78:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <state>
    1f7c:	f6 01       	movw	r30, r12
    1f7e:	80 83       	st	Z, r24
    package[1]=subId;
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	6b 81       	ldd	r22, Y+3	; 0x03
    1f8c:	7c 81       	ldd	r23, Y+4	; 0x04
    1f8e:	c6 01       	movw	r24, r12
    1f90:	03 96       	adiw	r24, 0x03	; 3
    1f92:	0e 94 9b 19 	call	0x3336	; 0x3336 <mrpp_data_get>

    return true;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    1f9a:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	ff 90       	pop	r15
    1fb0:	ef 90       	pop	r14
    1fb2:	df 90       	pop	r13
    1fb4:	cf 90       	pop	r12
    1fb6:	bf 90       	pop	r11
    1fb8:	af 90       	pop	r10
    1fba:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

000039dc <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    39dc:	bc 01       	movw	r22, r24
    39de:	88 e5       	ldi	r24, 0x58	; 88
    39e0:	93 e0       	ldi	r25, 0x03	; 3
    39e2:	0e 94 1d 1b 	call	0x363a	; 0x363a <mrpp_state_set_body_sent>
    39e6:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00003554 <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    3554:	cf 93       	push	r28
    3556:	df 93       	push	r29
    3558:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    355a:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    355e:	fc 01       	movw	r30, r24
    3560:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    3562:	bf 01       	movw	r22, r30
    3564:	88 e5       	ldi	r24, 0x58	; 88
    3566:	93 e0       	ldi	r25, 0x03	; 3
    3568:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <mrpp_state_get_header>
    *package_length+=1;
    356c:	8f 5f       	subi	r24, 0xFF	; 255
    356e:	88 83       	st	Y, r24
}
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00003576 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    3576:	cf 93       	push	r28
    3578:	df 93       	push	r29
    357a:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    357c:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <state>
    3580:	fc 01       	movw	r30, r24
    3582:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    3584:	bf 01       	movw	r22, r30
    3586:	88 e5       	ldi	r24, 0x58	; 88
    3588:	93 e0       	ldi	r25, 0x03	; 3
    358a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <mrpp_state_get_tail>
    *package_length+=1;
    358e:	8f 5f       	subi	r24, 0xFF	; 255
    3590:	88 83       	st	Y, r24
}
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00003a2a <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    3a2a:	88 e5       	ldi	r24, 0x58	; 88
    3a2c:	93 e0       	ldi	r25, 0x03	; 3
    3a2e:	0e 94 27 1a 	call	0x344e	; 0x344e <mrpp_state_all_bodies_sent>
}
    3a32:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00001fbc <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    1fbc:	cf 92       	push	r12
    1fbe:	df 92       	push	r13
    1fc0:	ff 92       	push	r15
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    1fcc:	94 2f       	mov	r25, r20
    1fce:	0c c0       	rjmp	.+24     	; 0x1fe8 <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    1fd0:	c9 2f       	mov	r28, r25
    1fd2:	d0 e0       	ldi	r29, 0x00	; 0
    1fd4:	e4 1b       	sub	r30, r20
    1fd6:	f5 0b       	sbc	r31, r21
    1fd8:	ea 0f       	add	r30, r26
    1fda:	fb 1f       	adc	r31, r27
    1fdc:	80 81       	ld	r24, Z
    1fde:	fe 01       	movw	r30, r28
    1fe0:	ee 50       	subi	r30, 0x0E	; 14
    1fe2:	fc 4f       	sbci	r31, 0xFC	; 252
    1fe4:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    1fe6:	9f 5f       	subi	r25, 0xFF	; 255
    1fe8:	e9 2f       	mov	r30, r25
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	6a 01       	movw	r12, r20
    1fee:	86 e0       	ldi	r24, 0x06	; 6
    1ff0:	c8 0e       	add	r12, r24
    1ff2:	d1 1c       	adc	r13, r1
    1ff4:	ec 15       	cp	r30, r12
    1ff6:	fd 05       	cpc	r31, r13
    1ff8:	58 f3       	brcs	.-42     	; 0x1fd0 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    1ffa:	26 50       	subi	r18, 0x06	; 6
    1ffc:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    1ffe:	36 95       	lsr	r19
    2000:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    2002:	49 5f       	subi	r20, 0xF9	; 249
    2004:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    2006:	a0 e0       	ldi	r26, 0x00	; 0
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	16 c0       	rjmp	.+44     	; 0x2038 <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    200c:	cd 01       	movw	r24, r26
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	f6 01       	movw	r30, r12
    2014:	e8 0f       	add	r30, r24
    2016:	f9 1f       	adc	r31, r25
    2018:	8b 01       	movw	r16, r22
    201a:	08 0f       	add	r16, r24
    201c:	19 1f       	adc	r17, r25
    201e:	e8 01       	movw	r28, r16
    2020:	f9 80       	ldd	r15, Y+1	; 0x01
    2022:	ee 50       	subi	r30, 0x0E	; 14
    2024:	fc 4f       	sbci	r31, 0xFC	; 252
    2026:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    2028:	84 0f       	add	r24, r20
    202a:	95 1f       	adc	r25, r21
    202c:	18 81       	ld	r17, Y
    202e:	fc 01       	movw	r30, r24
    2030:	ee 50       	subi	r30, 0x0E	; 14
    2032:	fc 4f       	sbci	r31, 0xFC	; 252
    2034:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    2036:	11 96       	adiw	r26, 0x01	; 1
    2038:	a2 17       	cp	r26, r18
    203a:	b3 07       	cpc	r27, r19
    203c:	38 f3       	brcs	.-50     	; 0x200c <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	df 90       	pop	r13
    204a:	cf 90       	pop	r12
    204c:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00003336 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    3336:	cf 93       	push	r28
    3338:	df 93       	push	r29
    333a:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	0c c0       	rjmp	.+24     	; 0x335a <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    3342:	de 01       	movw	r26, r28
    3344:	a2 0f       	add	r26, r18
    3346:	b3 1f       	adc	r27, r19
    3348:	f9 01       	movw	r30, r18
    334a:	e6 0f       	add	r30, r22
    334c:	f7 1f       	adc	r31, r23
    334e:	ee 50       	subi	r30, 0x0E	; 14
    3350:	fc 4f       	sbci	r31, 0xFC	; 252
    3352:	90 81       	ld	r25, Z
    3354:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    3356:	2f 5f       	subi	r18, 0xFF	; 255
    3358:	3f 4f       	sbci	r19, 0xFF	; 255
    335a:	24 17       	cp	r18, r20
    335c:	35 07       	cpc	r19, r21
    335e:	88 f3       	brcs	.-30     	; 0x3342 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	08 95       	ret

Disassembly of section .text.add_data_types:

0000169c <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	dc 01       	movw	r26, r24
    16ae:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    16b4:	c1 2c       	mov	r12, r1
    16b6:	d1 2c       	mov	r13, r1
    16b8:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    16ba:	4a c0       	rjmp	.+148    	; 0x1750 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    16bc:	29 2f       	mov	r18, r25
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	f9 01       	movw	r30, r18
    16c2:	ee 0f       	add	r30, r30
    16c4:	ff 1f       	adc	r31, r31
    16c6:	22 0f       	add	r18, r18
    16c8:	33 1f       	adc	r19, r19
    16ca:	22 0f       	add	r18, r18
    16cc:	33 1f       	adc	r19, r19
    16ce:	22 0f       	add	r18, r18
    16d0:	33 1f       	adc	r19, r19
    16d2:	e2 0f       	add	r30, r18
    16d4:	f3 1f       	adc	r31, r19
    16d6:	ea 0f       	add	r30, r26
    16d8:	fb 1f       	adc	r31, r27
    16da:	27 81       	ldd	r18, Z+7	; 0x07
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	a9 f0       	breq	.+42     	; 0x170a <add_data_types+0x6e>
    16e0:	24 30       	cpi	r18, 0x04	; 4
    16e2:	21 f1       	breq	.+72     	; 0x172c <add_data_types+0x90>
    16e4:	21 30       	cpi	r18, 0x01	; 1
    16e6:	91 f5       	brne	.+100    	; 0x174c <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    16e8:	01 e0       	ldi	r16, 0x01	; 1
    16ea:	10 e0       	ldi	r17, 0x00	; 0
    16ec:	04 2e       	mov	r0, r20
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <add_data_types+0x58>
    16f0:	00 0f       	add	r16, r16
    16f2:	11 1f       	adc	r17, r17
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <add_data_types+0x54>
    16f8:	01 2e       	mov	r0, r17
    16fa:	00 0c       	add	r0, r0
    16fc:	22 0b       	sbc	r18, r18
    16fe:	33 0b       	sbc	r19, r19
    1700:	c0 2a       	or	r12, r16
    1702:	d1 2a       	or	r13, r17
    1704:	e2 2a       	or	r14, r18
    1706:	f3 2a       	or	r15, r19
                break;
    1708:	21 c0       	rjmp	.+66     	; 0x174c <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    170a:	02 e0       	ldi	r16, 0x02	; 2
    170c:	10 e0       	ldi	r17, 0x00	; 0
    170e:	04 2e       	mov	r0, r20
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <add_data_types+0x7a>
    1712:	00 0f       	add	r16, r16
    1714:	11 1f       	adc	r17, r17
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <add_data_types+0x76>
    171a:	01 2e       	mov	r0, r17
    171c:	00 0c       	add	r0, r0
    171e:	22 0b       	sbc	r18, r18
    1720:	33 0b       	sbc	r19, r19
    1722:	c0 2a       	or	r12, r16
    1724:	d1 2a       	or	r13, r17
    1726:	e2 2a       	or	r14, r18
    1728:	f3 2a       	or	r15, r19
                break;
    172a:	10 c0       	rjmp	.+32     	; 0x174c <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    172c:	03 e0       	ldi	r16, 0x03	; 3
    172e:	10 e0       	ldi	r17, 0x00	; 0
    1730:	04 2e       	mov	r0, r20
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <add_data_types+0x9c>
    1734:	00 0f       	add	r16, r16
    1736:	11 1f       	adc	r17, r17
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <add_data_types+0x98>
    173c:	01 2e       	mov	r0, r17
    173e:	00 0c       	add	r0, r0
    1740:	22 0b       	sbc	r18, r18
    1742:	33 0b       	sbc	r19, r19
    1744:	c0 2a       	or	r12, r16
    1746:	d1 2a       	or	r13, r17
    1748:	e2 2a       	or	r14, r18
    174a:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    174c:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    174e:	9f 5f       	subi	r25, 0xFF	; 255
    1750:	12 96       	adiw	r26, 0x02	; 2
    1752:	8c 91       	ld	r24, X
    1754:	12 97       	sbiw	r26, 0x02	; 2
    1756:	98 17       	cp	r25, r24
    1758:	08 f4       	brcc	.+2      	; 0x175c <add_data_types+0xc0>
    175a:	b0 cf       	rjmp	.-160    	; 0x16bc <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    175c:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    175e:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    1760:	cd 82       	std	Y+5, r12	; 0x05
} 
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	08 95       	ret

Disassembly of section .text.update_bodies:

00000dee <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
 dee:	cf 93       	push	r28
 df0:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
 df2:	26 2f       	mov	r18, r22
 df4:	30 e0       	ldi	r19, 0x00	; 0
 df6:	c9 01       	movw	r24, r18
 df8:	01 97       	sbiw	r24, 0x01	; 1
 dfa:	f9 01       	movw	r30, r18
 dfc:	ee 0f       	add	r30, r30
 dfe:	ff 1f       	adc	r31, r31
 e00:	22 0f       	add	r18, r18
 e02:	33 1f       	adc	r19, r19
 e04:	22 0f       	add	r18, r18
 e06:	33 1f       	adc	r19, r19
 e08:	22 0f       	add	r18, r18
 e0a:	33 1f       	adc	r19, r19
 e0c:	e2 0f       	add	r30, r18
 e0e:	f3 1f       	adc	r31, r19
 e10:	ea 0f       	add	r30, r26
 e12:	fb 1f       	adc	r31, r27
 e14:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
 e16:	c0 e0       	ldi	r28, 0x00	; 0
 e18:	25 c0       	rjmp	.+74     	; 0xe64 <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
 e1a:	82 17       	cp	r24, r18
 e1c:	93 07       	cpc	r25, r19
 e1e:	09 f1       	breq	.+66     	; 0xe62 <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
 e20:	a9 01       	movw	r20, r18
 e22:	44 0f       	add	r20, r20
 e24:	55 1f       	adc	r21, r21
 e26:	44 0f       	add	r20, r20
 e28:	55 1f       	adc	r21, r21
 e2a:	44 0f       	add	r20, r20
 e2c:	55 1f       	adc	r21, r21
 e2e:	f9 01       	movw	r30, r18
 e30:	ee 0f       	add	r30, r30
 e32:	ff 1f       	adc	r31, r31
 e34:	e4 0f       	add	r30, r20
 e36:	f5 1f       	adc	r31, r21
 e38:	ea 0f       	add	r30, r26
 e3a:	fb 1f       	adc	r31, r27
 e3c:	43 85       	ldd	r20, Z+11	; 0x0b
 e3e:	74 13       	cpse	r23, r20
 e40:	10 c0       	rjmp	.+32     	; 0xe62 <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
 e42:	f9 01       	movw	r30, r18
 e44:	ee 0f       	add	r30, r30
 e46:	ff 1f       	adc	r31, r31
 e48:	22 0f       	add	r18, r18
 e4a:	33 1f       	adc	r19, r19
 e4c:	22 0f       	add	r18, r18
 e4e:	33 1f       	adc	r19, r19
 e50:	22 0f       	add	r18, r18
 e52:	33 1f       	adc	r19, r19
 e54:	e2 0f       	add	r30, r18
 e56:	f3 1f       	adc	r31, r19
 e58:	ea 0f       	add	r30, r26
 e5a:	fb 1f       	adc	r31, r27
 e5c:	24 85       	ldd	r18, Z+12	; 0x0c
 e5e:	23 30       	cpi	r18, 0x03	; 3
 e60:	41 f4       	brne	.+16     	; 0xe72 <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
 e62:	cf 5f       	subi	r28, 0xFF	; 255
 e64:	2c 2f       	mov	r18, r28
 e66:	30 e0       	ldi	r19, 0x00	; 0
 e68:	28 17       	cp	r18, r24
 e6a:	39 07       	cpc	r19, r25
 e6c:	b4 f2       	brlt	.-84     	; 0xe1a <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
 e6e:	21 e0       	ldi	r18, 0x01	; 1
 e70:	01 c0       	rjmp	.+2      	; 0xe74 <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
 e72:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
 e74:	22 23       	and	r18, r18
 e76:	39 f0       	breq	.+14     	; 0xe86 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
 e78:	fd 01       	movw	r30, r26
 e7a:	e7 0f       	add	r30, r23
 e7c:	f1 1d       	adc	r31, r1
 e7e:	e4 58       	subi	r30, 0x84	; 132
 e80:	ff 4f       	sbci	r31, 0xFF	; 255
 e82:	21 e0       	ldi	r18, 0x01	; 1
 e84:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
 e86:	9c 01       	movw	r18, r24
 e88:	22 0f       	add	r18, r18
 e8a:	33 1f       	adc	r19, r19
 e8c:	22 0f       	add	r18, r18
 e8e:	33 1f       	adc	r19, r19
 e90:	22 0f       	add	r18, r18
 e92:	33 1f       	adc	r19, r19
 e94:	fc 01       	movw	r30, r24
 e96:	ee 0f       	add	r30, r30
 e98:	ff 1f       	adc	r31, r31
 e9a:	e2 0f       	add	r30, r18
 e9c:	f3 1f       	adc	r31, r19
 e9e:	ea 0f       	add	r30, r26
 ea0:	fb 1f       	adc	r31, r27
 ea2:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 ea4:	29 c0       	rjmp	.+82     	; 0xef8 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
 ea6:	46 2f       	mov	r20, r22
 ea8:	50 e0       	ldi	r21, 0x00	; 0
 eaa:	84 17       	cp	r24, r20
 eac:	95 07       	cpc	r25, r21
 eae:	19 f1       	breq	.+70     	; 0xef6 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
 eb0:	9a 01       	movw	r18, r20
 eb2:	2f 5f       	subi	r18, 0xFF	; 255
 eb4:	3f 4f       	sbci	r19, 0xFF	; 255
 eb6:	f9 01       	movw	r30, r18
 eb8:	ee 0f       	add	r30, r30
 eba:	ff 1f       	adc	r31, r31
 ebc:	22 0f       	add	r18, r18
 ebe:	33 1f       	adc	r19, r19
 ec0:	22 0f       	add	r18, r18
 ec2:	33 1f       	adc	r19, r19
 ec4:	22 0f       	add	r18, r18
 ec6:	33 1f       	adc	r19, r19
 ec8:	e2 0f       	add	r30, r18
 eca:	f3 1f       	adc	r31, r19
 ecc:	ea 0f       	add	r30, r26
 ece:	fb 1f       	adc	r31, r27
 ed0:	20 81       	ld	r18, Z
 ed2:	c2 13       	cpse	r28, r18
 ed4:	10 c0       	rjmp	.+32     	; 0xef6 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
 ed6:	fa 01       	movw	r30, r20
 ed8:	ee 0f       	add	r30, r30
 eda:	ff 1f       	adc	r31, r31
 edc:	44 0f       	add	r20, r20
 ede:	55 1f       	adc	r21, r21
 ee0:	44 0f       	add	r20, r20
 ee2:	55 1f       	adc	r21, r21
 ee4:	44 0f       	add	r20, r20
 ee6:	55 1f       	adc	r21, r21
 ee8:	e4 0f       	add	r30, r20
 eea:	f5 1f       	adc	r31, r21
 eec:	ea 0f       	add	r30, r26
 eee:	fb 1f       	adc	r31, r27
 ef0:	24 85       	ldd	r18, Z+12	; 0x0c
 ef2:	23 30       	cpi	r18, 0x03	; 3
 ef4:	41 f4       	brne	.+16     	; 0xf06 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
 ef6:	6f 5f       	subi	r22, 0xFF	; 255
 ef8:	12 96       	adiw	r26, 0x02	; 2
 efa:	2c 91       	ld	r18, X
 efc:	12 97       	sbiw	r26, 0x02	; 2
 efe:	62 17       	cp	r22, r18
 f00:	90 f2       	brcs	.-92     	; 0xea6 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
 f02:	81 e0       	ldi	r24, 0x01	; 1
 f04:	01 c0       	rjmp	.+2      	; 0xf08 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
 f06:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
 f08:	88 23       	and	r24, r24
 f0a:	41 f0       	breq	.+16     	; 0xf1c <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
 f0c:	fd 01       	movw	r30, r26
 f0e:	ec 0f       	add	r30, r28
 f10:	f1 1d       	adc	r31, r1
 f12:	e4 58       	subi	r30, 0x84	; 132
 f14:	ff 4f       	sbci	r31, 0xFF	; 255
 f16:	81 e0       	ldi	r24, 0x01	; 1
 f18:	80 83       	st	Z, r24
 f1a:	06 c0       	rjmp	.+12     	; 0xf28 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
 f1c:	fd 01       	movw	r30, r26
 f1e:	ec 0f       	add	r30, r28
 f20:	f1 1d       	adc	r31, r1
 f22:	e4 58       	subi	r30, 0x84	; 132
 f24:	ff 4f       	sbci	r31, 0xFF	; 255
 f26:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
 f28:	8c 2f       	mov	r24, r28
 f2a:	90 e0       	ldi	r25, 0x00	; 0
 f2c:	87 1b       	sub	r24, r23
 f2e:	91 09       	sbc	r25, r1
 f30:	02 97       	sbiw	r24, 0x02	; 2
 f32:	64 f0       	brlt	.+24     	; 0xf4c <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f34:	7f 5f       	subi	r23, 0xFF	; 255
 f36:	08 c0       	rjmp	.+16     	; 0xf48 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
 f38:	fd 01       	movw	r30, r26
 f3a:	e7 0f       	add	r30, r23
 f3c:	f1 1d       	adc	r31, r1
 f3e:	e4 58       	subi	r30, 0x84	; 132
 f40:	ff 4f       	sbci	r31, 0xFF	; 255
 f42:	81 e0       	ldi	r24, 0x01	; 1
 f44:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
 f46:	7f 5f       	subi	r23, 0xFF	; 255
 f48:	7c 17       	cp	r23, r28
 f4a:	b0 f3       	brcs	.-20     	; 0xf38 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
 f4c:	cf 91       	pop	r28
 f4e:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

00000c30 <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
 c30:	af 92       	push	r10
 c32:	bf 92       	push	r11
 c34:	cf 92       	push	r12
 c36:	df 92       	push	r13
 c38:	ef 92       	push	r14
 c3a:	ff 92       	push	r15
 c3c:	0f 93       	push	r16
 c3e:	1f 93       	push	r17
 c40:	cf 93       	push	r28
 c42:	df 93       	push	r29
 c44:	ec 01       	movw	r28, r24
 c46:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
 c48:	68 83       	st	Y, r22
    state->nCollections=nCollections;
 c4a:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 c4c:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
 c4e:	00 e0       	ldi	r16, 0x00	; 0
 c50:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
 c52:	8f c0       	rjmp	.+286    	; 0xd72 <mrpp_state_init+0x142>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
 c54:	ed 2d       	mov	r30, r13
 c56:	f0 e0       	ldi	r31, 0x00	; 0
 c58:	cf 01       	movw	r24, r30
 c5a:	88 0f       	add	r24, r24
 c5c:	99 1f       	adc	r25, r25
 c5e:	88 0f       	add	r24, r24
 c60:	99 1f       	adc	r25, r25
 c62:	8e 0f       	add	r24, r30
 c64:	9f 1f       	adc	r25, r31
 c66:	84 0f       	add	r24, r20
 c68:	95 1f       	adc	r25, r21
 c6a:	dc 01       	movw	r26, r24
 c6c:	12 96       	adiw	r26, 0x02	; 2
 c6e:	6d 91       	ld	r22, X+
 c70:	7c 91       	ld	r23, X
 c72:	13 97       	sbiw	r26, 0x03	; 3
 c74:	df 01       	movw	r26, r30
 c76:	aa 0f       	add	r26, r26
 c78:	bb 1f       	adc	r27, r27
 c7a:	9f 01       	movw	r18, r30
 c7c:	22 0f       	add	r18, r18
 c7e:	33 1f       	adc	r19, r19
 c80:	22 0f       	add	r18, r18
 c82:	33 1f       	adc	r19, r19
 c84:	22 0f       	add	r18, r18
 c86:	33 1f       	adc	r19, r19
 c88:	a2 0f       	add	r26, r18
 c8a:	b3 1f       	adc	r27, r19
 c8c:	5d 01       	movw	r10, r26
 c8e:	ac 0e       	add	r10, r28
 c90:	bd 1e       	adc	r11, r29
 c92:	d5 01       	movw	r26, r10
 c94:	19 96       	adiw	r26, 0x09	; 9
 c96:	7c 93       	st	X, r23
 c98:	6e 93       	st	-X, r22
 c9a:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
 c9c:	dc 01       	movw	r26, r24
 c9e:	14 96       	adiw	r26, 0x04	; 4
 ca0:	2c 91       	ld	r18, X
 ca2:	d5 01       	movw	r26, r10
 ca4:	17 96       	adiw	r26, 0x07	; 7
 ca6:	2c 93       	st	X, r18
 ca8:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
 caa:	14 96       	adiw	r26, 0x04	; 4
 cac:	1c 93       	st	X, r17
 cae:	0e 93       	st	-X, r16
 cb0:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
 cb2:	dc 01       	movw	r26, r24
 cb4:	2d 91       	ld	r18, X+
 cb6:	3c 91       	ld	r19, X
 cb8:	11 97       	sbiw	r26, 0x01	; 1
 cba:	14 96       	adiw	r26, 0x04	; 4
 cbc:	8c 91       	ld	r24, X
 cbe:	82 9f       	mul	r24, r18
 cc0:	70 01       	movw	r14, r0
 cc2:	83 9f       	mul	r24, r19
 cc4:	f0 0c       	add	r15, r0
 cc6:	11 24       	eor	r1, r1
 cc8:	b6 e0       	ldi	r27, 0x06	; 6
 cca:	eb 0e       	add	r14, r27
 ccc:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
 cce:	d5 01       	movw	r26, r10
 cd0:	16 96       	adiw	r26, 0x06	; 6
 cd2:	fc 92       	st	X, r15
 cd4:	ee 92       	st	-X, r14
 cd6:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
 cd8:	98 01       	movw	r18, r16
 cda:	ab ea       	ldi	r26, 0xAB	; 171
 cdc:	ba ea       	ldi	r27, 0xAA	; 170
 cde:	0e 94 2d 1b 	call	0x365a	; 0x365a <__umulhisi3>
 ce2:	96 95       	lsr	r25
 ce4:	87 95       	ror	r24
 ce6:	92 95       	swap	r25
 ce8:	82 95       	swap	r24
 cea:	8f 70       	andi	r24, 0x0F	; 15
 cec:	89 27       	eor	r24, r25
 cee:	9f 70       	andi	r25, 0x0F	; 15
 cf0:	89 27       	eor	r24, r25
 cf2:	9f 01       	movw	r18, r30
 cf4:	2f 5f       	subi	r18, 0xFF	; 255
 cf6:	3f 4f       	sbci	r19, 0xFF	; 255
 cf8:	d9 01       	movw	r26, r18
 cfa:	aa 0f       	add	r26, r26
 cfc:	bb 1f       	adc	r27, r27
 cfe:	22 0f       	add	r18, r18
 d00:	33 1f       	adc	r19, r19
 d02:	22 0f       	add	r18, r18
 d04:	33 1f       	adc	r19, r19
 d06:	22 0f       	add	r18, r18
 d08:	33 1f       	adc	r19, r19
 d0a:	a2 0f       	add	r26, r18
 d0c:	b3 1f       	adc	r27, r19
 d0e:	ac 0f       	add	r26, r28
 d10:	bd 1f       	adc	r27, r29
 d12:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
 d14:	0e 0d       	add	r16, r14
 d16:	1f 1d       	adc	r17, r15
 d18:	98 01       	movw	r18, r16
 d1a:	ab ea       	ldi	r26, 0xAB	; 171
 d1c:	ba ea       	ldi	r27, 0xAA	; 170
 d1e:	0e 94 2d 1b 	call	0x365a	; 0x365a <__umulhisi3>
 d22:	7c 01       	movw	r14, r24
 d24:	f6 94       	lsr	r15
 d26:	e7 94       	ror	r14
 d28:	f6 94       	lsr	r15
 d2a:	e7 94       	ror	r14
 d2c:	f6 94       	lsr	r15
 d2e:	e7 94       	ror	r14
 d30:	f6 94       	lsr	r15
 d32:	e7 94       	ror	r14
 d34:	f6 94       	lsr	r15
 d36:	e7 94       	ror	r14
 d38:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
 d3a:	20 e3       	ldi	r18, 0x30	; 48
 d3c:	2e 9d       	mul	r18, r14
 d3e:	c0 01       	movw	r24, r0
 d40:	2f 9d       	mul	r18, r15
 d42:	90 0d       	add	r25, r0
 d44:	11 24       	eor	r1, r1
 d46:	08 17       	cp	r16, r24
 d48:	19 07       	cpc	r17, r25
 d4a:	19 f4       	brne	.+6      	; 0xd52 <mrpp_state_init+0x122>
 d4c:	bb 24       	eor	r11, r11
 d4e:	ba 94       	dec	r11
 d50:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
 d52:	cf 01       	movw	r24, r30
 d54:	88 0f       	add	r24, r24
 d56:	99 1f       	adc	r25, r25
 d58:	ee 0f       	add	r30, r30
 d5a:	ff 1f       	adc	r31, r31
 d5c:	ee 0f       	add	r30, r30
 d5e:	ff 1f       	adc	r31, r31
 d60:	ee 0f       	add	r30, r30
 d62:	ff 1f       	adc	r31, r31
 d64:	e8 0f       	add	r30, r24
 d66:	f9 1f       	adc	r31, r25
 d68:	ec 0f       	add	r30, r28
 d6a:	fd 1f       	adc	r31, r29
 d6c:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
 d6e:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
 d70:	d3 94       	inc	r13
 d72:	dc 14       	cp	r13, r12
 d74:	08 f4       	brcc	.+2      	; 0xd78 <mrpp_state_init+0x148>
 d76:	6e cf       	rjmp	.-292    	; 0xc54 <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
 d78:	98 01       	movw	r18, r16
 d7a:	ab ea       	ldi	r26, 0xAB	; 171
 d7c:	ba ea       	ldi	r27, 0xAA	; 170
 d7e:	0e 94 2d 1b 	call	0x365a	; 0x365a <__umulhisi3>
 d82:	fc 01       	movw	r30, r24
 d84:	f6 95       	lsr	r31
 d86:	e7 95       	ror	r30
 d88:	f2 95       	swap	r31
 d8a:	e2 95       	swap	r30
 d8c:	ef 70       	andi	r30, 0x0F	; 15
 d8e:	ef 27       	eor	r30, r31
 d90:	ff 70       	andi	r31, 0x0F	; 15
 d92:	ef 27       	eor	r30, r31
 d94:	4e 2f       	mov	r20, r30
 d96:	52 e0       	ldi	r21, 0x02	; 2
 d98:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
 d9a:	20 e3       	ldi	r18, 0x30	; 48
 d9c:	2e 9f       	mul	r18, r30
 d9e:	c0 01       	movw	r24, r0
 da0:	2f 9f       	mul	r18, r31
 da2:	90 0d       	add	r25, r0
 da4:	11 24       	eor	r1, r1
 da6:	08 1b       	sub	r16, r24
 da8:	19 0b       	sbc	r17, r25
 daa:	11 f4       	brne	.+4      	; 0xdb0 <mrpp_state_init+0x180>
 dac:	51 e0       	ldi	r21, 0x01	; 1
 dae:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
 db0:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
 db2:	01 2b       	or	r16, r17
 db4:	11 f0       	breq	.+4      	; 0xdba <mrpp_state_init+0x18a>
 db6:	41 e0       	ldi	r20, 0x01	; 1
 db8:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
 dba:	fe 01       	movw	r30, r28
 dbc:	e5 58       	subi	r30, 0x85	; 133
 dbe:	ff 4f       	sbci	r31, 0xFF	; 255
 dc0:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
 dc2:	80 e0       	ldi	r24, 0x00	; 0
 dc4:	07 c0       	rjmp	.+14     	; 0xdd4 <mrpp_state_init+0x1a4>
    {
        state->bodies[i]=WAITING;
 dc6:	fe 01       	movw	r30, r28
 dc8:	e8 0f       	add	r30, r24
 dca:	f1 1d       	adc	r31, r1
 dcc:	e4 58       	subi	r30, 0x84	; 132
 dce:	ff 4f       	sbci	r31, 0xFF	; 255
 dd0:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
 dd2:	8f 5f       	subi	r24, 0xFF	; 255
 dd4:	84 17       	cp	r24, r20
 dd6:	b8 f3       	brcs	.-18     	; 0xdc6 <mrpp_state_init+0x196>
    {
        state->bodies[i]=WAITING;
    }
}
 dd8:	df 91       	pop	r29
 dda:	cf 91       	pop	r28
 ddc:	1f 91       	pop	r17
 dde:	0f 91       	pop	r16
 de0:	ff 90       	pop	r15
 de2:	ef 90       	pop	r14
 de4:	df 90       	pop	r13
 de6:	cf 90       	pop	r12
 de8:	bf 90       	pop	r11
 dea:	af 90       	pop	r10
 dec:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00001cb4 <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	8c 01       	movw	r16, r24
    1cbe:	eb 01       	movw	r28, r22
    package[0]=0;
    1cc0:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	81 81       	ldd	r24, Z+1	; 0x01
    1cc6:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1cc8:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    1cca:	c8 01       	movw	r24, r16
    1ccc:	0e 94 4e 0b 	call	0x169c	; 0x169c <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	35 c0       	rjmp	.+106    	; 0x1d3e <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1cd4:	82 2f       	mov	r24, r18
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	dc 01       	movw	r26, r24
    1cda:	aa 0f       	add	r26, r26
    1cdc:	bb 1f       	adc	r27, r27
    1cde:	aa 0f       	add	r26, r26
    1ce0:	bb 1f       	adc	r27, r27
    1ce2:	ad 01       	movw	r20, r26
    1ce4:	4a 5f       	subi	r20, 0xFA	; 250
    1ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce8:	4c 0f       	add	r20, r28
    1cea:	5d 1f       	adc	r21, r29
    1cec:	fc 01       	movw	r30, r24
    1cee:	ee 0f       	add	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	e8 0f       	add	r30, r24
    1d00:	f9 1f       	adc	r31, r25
    1d02:	bf 01       	movw	r22, r30
    1d04:	60 0f       	add	r22, r16
    1d06:	71 1f       	adc	r23, r17
    1d08:	fb 01       	movw	r30, r22
    1d0a:	84 81       	ldd	r24, Z+4	; 0x04
    1d0c:	fa 01       	movw	r30, r20
    1d0e:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1d10:	cd 01       	movw	r24, r26
    1d12:	07 96       	adiw	r24, 0x07	; 7
    1d14:	8c 0f       	add	r24, r28
    1d16:	9d 1f       	adc	r25, r29
    1d18:	fb 01       	movw	r30, r22
    1d1a:	33 81       	ldd	r19, Z+3	; 0x03
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1d20:	cd 01       	movw	r24, r26
    1d22:	08 96       	adiw	r24, 0x08	; 8
    1d24:	8c 0f       	add	r24, r28
    1d26:	9d 1f       	adc	r25, r29
    1d28:	fb 01       	movw	r30, r22
    1d2a:	36 81       	ldd	r19, Z+6	; 0x06
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1d30:	19 96       	adiw	r26, 0x09	; 9
    1d32:	ac 0f       	add	r26, r28
    1d34:	bd 1f       	adc	r27, r29
    1d36:	fb 01       	movw	r30, r22
    1d38:	85 81       	ldd	r24, Z+5	; 0x05
    1d3a:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    1d3c:	2f 5f       	subi	r18, 0xFF	; 255
    1d3e:	f8 01       	movw	r30, r16
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	28 17       	cp	r18, r24
    1d44:	38 f2       	brcs	.-114    	; 0x1cd4 <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1d46:	88 0f       	add	r24, r24
    1d48:	88 0f       	add	r24, r24
}
    1d4a:	8a 5f       	subi	r24, 0xFA	; 250
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00001c10 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	8c 01       	movw	r16, r24
    1c1a:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	81 81       	ldd	r24, Z+1	; 0x01
    1c20:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    1c22:	81 81       	ldd	r24, Z+1	; 0x01
    1c24:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    1c26:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    1c28:	c8 01       	movw	r24, r16
    1c2a:	0e 94 4e 0b 	call	0x169c	; 0x169c <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	35 c0       	rjmp	.+106    	; 0x1c9c <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    1c32:	82 2f       	mov	r24, r18
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	dc 01       	movw	r26, r24
    1c38:	aa 0f       	add	r26, r26
    1c3a:	bb 1f       	adc	r27, r27
    1c3c:	aa 0f       	add	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	ad 01       	movw	r20, r26
    1c42:	4a 5f       	subi	r20, 0xFA	; 250
    1c44:	5f 4f       	sbci	r21, 0xFF	; 255
    1c46:	4c 0f       	add	r20, r28
    1c48:	5d 1f       	adc	r21, r29
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	ee 0f       	add	r30, r30
    1c4e:	ff 1f       	adc	r31, r31
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	e8 0f       	add	r30, r24
    1c5e:	f9 1f       	adc	r31, r25
    1c60:	bf 01       	movw	r22, r30
    1c62:	60 0f       	add	r22, r16
    1c64:	71 1f       	adc	r23, r17
    1c66:	fb 01       	movw	r30, r22
    1c68:	84 81       	ldd	r24, Z+4	; 0x04
    1c6a:	fa 01       	movw	r30, r20
    1c6c:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    1c6e:	cd 01       	movw	r24, r26
    1c70:	07 96       	adiw	r24, 0x07	; 7
    1c72:	8c 0f       	add	r24, r28
    1c74:	9d 1f       	adc	r25, r29
    1c76:	fb 01       	movw	r30, r22
    1c78:	33 81       	ldd	r19, Z+3	; 0x03
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    1c7e:	cd 01       	movw	r24, r26
    1c80:	08 96       	adiw	r24, 0x08	; 8
    1c82:	8c 0f       	add	r24, r28
    1c84:	9d 1f       	adc	r25, r29
    1c86:	fb 01       	movw	r30, r22
    1c88:	36 81       	ldd	r19, Z+6	; 0x06
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    1c8e:	19 96       	adiw	r26, 0x09	; 9
    1c90:	ac 0f       	add	r26, r28
    1c92:	bd 1f       	adc	r27, r29
    1c94:	fb 01       	movw	r30, r22
    1c96:	85 81       	ldd	r24, Z+5	; 0x05
    1c98:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    1c9a:	2f 5f       	subi	r18, 0xFF	; 255
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ca0:	28 17       	cp	r18, r24
    1ca2:	38 f2       	brcs	.-114    	; 0x1c32 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    1ca4:	88 0f       	add	r24, r24
    1ca6:	88 0f       	add	r24, r24
}
    1ca8:	8a 5f       	subi	r24, 0xFA	; 250
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

0000204e <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    204e:	0f 93       	push	r16
    2050:	1f 93       	push	r17
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    2058:	a6 2f       	mov	r26, r22
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	11 97       	sbiw	r26, 0x01	; 1
    205e:	fd 01       	movw	r30, r26
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	cd 01       	movw	r24, r26
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	e8 0f       	add	r30, r24
    2074:	f9 1f       	adc	r31, r25
    2076:	e0 0f       	add	r30, r16
    2078:	f1 1f       	adc	r31, r17
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	0a c0       	rjmp	.+20     	; 0x2096 <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    2082:	e9 2f       	mov	r30, r25
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	e9 01       	movw	r28, r18
    2088:	ce 0f       	add	r28, r30
    208a:	df 1f       	adc	r29, r31
    208c:	e4 0f       	add	r30, r20
    208e:	f5 1f       	adc	r31, r21
    2090:	80 81       	ld	r24, Z
    2092:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    2094:	9f 5f       	subi	r25, 0xFF	; 255
    2096:	94 30       	cpi	r25, 0x04	; 4
    2098:	a0 f3       	brcs	.-24     	; 0x2082 <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    209a:	cd 01       	movw	r24, r26
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	aa 0f       	add	r26, r26
    20a2:	bb 1f       	adc	r27, r27
    20a4:	aa 0f       	add	r26, r26
    20a6:	bb 1f       	adc	r27, r27
    20a8:	aa 0f       	add	r26, r26
    20aa:	bb 1f       	adc	r27, r27
    20ac:	a8 0f       	add	r26, r24
    20ae:	b9 1f       	adc	r27, r25
    20b0:	a0 0f       	add	r26, r16
    20b2:	b1 1f       	adc	r27, r17
    20b4:	19 96       	adiw	r26, 0x09	; 9
    20b6:	8c 91       	ld	r24, X
    20b8:	19 97       	sbiw	r26, 0x09	; 9
    20ba:	f9 01       	movw	r30, r18
    20bc:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    20be:	18 96       	adiw	r26, 0x08	; 8
    20c0:	8c 91       	ld	r24, X
    20c2:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    20c4:	c8 01       	movw	r24, r16
    20c6:	0e 94 f7 06 	call	0xdee	; 0xdee <update_bodies>
}
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00003366 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    3366:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	0b c0       	rjmp	.+22     	; 0x3382 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    336c:	29 2f       	mov	r18, r25
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	fa 01       	movw	r30, r20
    3372:	e2 0f       	add	r30, r18
    3374:	f3 1f       	adc	r31, r19
    3376:	e4 58       	subi	r30, 0x84	; 132
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	80 81       	ld	r24, Z
    337c:	81 30       	cpi	r24, 0x01	; 1
    337e:	49 f0       	breq	.+18     	; 0x3392 <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3380:	9f 5f       	subi	r25, 0xFF	; 255
    3382:	fa 01       	movw	r30, r20
    3384:	e5 58       	subi	r30, 0x85	; 133
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	80 81       	ld	r24, Z
    338a:	98 17       	cp	r25, r24
    338c:	78 f3       	brcs	.-34     	; 0x336c <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    338e:	2f ef       	ldi	r18, 0xFF	; 255
    3390:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    3392:	c9 01       	movw	r24, r18
    3394:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

0000344e <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    344e:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3450:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    3452:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    3454:	0a c0       	rjmp	.+20     	; 0x346a <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    3456:	f9 01       	movw	r30, r18
    3458:	e9 0f       	add	r30, r25
    345a:	f1 1d       	adc	r31, r1
    345c:	e4 58       	subi	r30, 0x84	; 132
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	40 81       	ld	r20, Z
    3462:	42 30       	cpi	r20, 0x02	; 2
    3464:	09 f0       	breq	.+2      	; 0x3468 <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    3466:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3468:	9f 5f       	subi	r25, 0xFF	; 255
    346a:	f9 01       	movw	r30, r18
    346c:	e5 58       	subi	r30, 0x85	; 133
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	40 81       	ld	r20, Z
    3472:	94 17       	cp	r25, r20
    3474:	80 f3       	brcs	.-32     	; 0x3456 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    3476:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

000011b2 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	ec 01       	movw	r28, r24
    11cc:	6b 01       	movw	r12, r22
    11ce:	4a 01       	movw	r8, r20
    11d0:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    11d2:	0e 94 b3 19 	call	0x3366	; 0x3366 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    11d6:	8f 3f       	cpi	r24, 0xFF	; 255
    11d8:	2f ef       	ldi	r18, 0xFF	; 255
    11da:	92 07       	cpc	r25, r18
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <mrpp_state_get_ready_body+0x2e>
    11de:	66 c0       	rjmp	.+204    	; 0x12ac <mrpp_state_get_ready_body+0xfa>
    11e0:	8c 15       	cp	r24, r12
    11e2:	9d 05       	cpc	r25, r13
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <mrpp_state_get_ready_body+0x36>
    11e6:	64 c0       	rjmp	.+200    	; 0x12b0 <mrpp_state_get_ready_body+0xfe>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	09 c0       	rjmp	.+18     	; 0x11fe <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    11ec:	fe 01       	movw	r30, r28
    11ee:	e8 0f       	add	r30, r24
    11f0:	f1 1d       	adc	r31, r1
    11f2:	e4 58       	subi	r30, 0x84	; 132
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	90 81       	ld	r25, Z
    11f8:	91 30       	cpi	r25, 0x01	; 1
    11fa:	41 f0       	breq	.+16     	; 0x120c <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    11fc:	8f 5f       	subi	r24, 0xFF	; 255
    11fe:	fe 01       	movw	r30, r28
    1200:	e5 58       	subi	r30, 0x85	; 133
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	90 81       	ld	r25, Z
    1206:	89 17       	cp	r24, r25
    1208:	88 f3       	brcs	.-30     	; 0x11ec <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    120a:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	98 0f       	add	r25, r24
    1210:	f4 01       	movw	r30, r8
    1212:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    1214:	99 81       	ldd	r25, Y+1	; 0x01
    1216:	f5 01       	movw	r30, r10
    1218:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	40 e3       	ldi	r20, 0x30	; 48
    121e:	48 9f       	mul	r20, r24
    1220:	90 01       	movw	r18, r0
    1222:	49 9f       	mul	r20, r25
    1224:	30 0d       	add	r19, r0
    1226:	11 24       	eor	r1, r1
    1228:	f8 01       	movw	r30, r16
    122a:	31 83       	std	Z+1, r19	; 0x01
    122c:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    122e:	fe 01       	movw	r30, r28
    1230:	e5 58       	subi	r30, 0x85	; 133
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	20 81       	ld	r18, Z
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	21 50       	subi	r18, 0x01	; 1
    123a:	31 09       	sbc	r19, r1
    123c:	82 17       	cp	r24, r18
    123e:	93 07       	cpc	r25, r19
    1240:	2c f4       	brge	.+10     	; 0x124c <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    1242:	80 e3       	ldi	r24, 0x30	; 48
    1244:	f7 01       	movw	r30, r14
    1246:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	33 c0       	rjmp	.+102    	; 0x12b2 <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	9c 01       	movw	r18, r24
    1254:	22 0f       	add	r18, r18
    1256:	33 1f       	adc	r19, r19
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	82 0f       	add	r24, r18
    1266:	93 1f       	adc	r25, r19
    1268:	c8 0f       	add	r28, r24
    126a:	d9 1f       	adc	r29, r25
    126c:	4b 81       	ldd	r20, Y+3	; 0x03
    126e:	5c 81       	ldd	r21, Y+4	; 0x04
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	9e 81       	ldd	r25, Y+6	; 0x06
    1274:	48 0f       	add	r20, r24
    1276:	59 1f       	adc	r21, r25
    1278:	9a 01       	movw	r18, r20
    127a:	ab ea       	ldi	r26, 0xAB	; 171
    127c:	ba ea       	ldi	r27, 0xAA	; 170
    127e:	0e 94 2d 1b 	call	0x365a	; 0x365a <__umulhisi3>
    1282:	96 95       	lsr	r25
    1284:	87 95       	ror	r24
    1286:	92 95       	swap	r25
    1288:	82 95       	swap	r24
    128a:	8f 70       	andi	r24, 0x0F	; 15
    128c:	89 27       	eor	r24, r25
    128e:	9f 70       	andi	r25, 0x0F	; 15
    1290:	89 27       	eor	r24, r25
    1292:	60 e3       	ldi	r22, 0x30	; 48
    1294:	68 9f       	mul	r22, r24
    1296:	90 01       	movw	r18, r0
    1298:	69 9f       	mul	r22, r25
    129a:	30 0d       	add	r19, r0
    129c:	11 24       	eor	r1, r1
    129e:	ca 01       	movw	r24, r20
    12a0:	82 1b       	sub	r24, r18
    12a2:	93 0b       	sbc	r25, r19
    12a4:	f7 01       	movw	r30, r14
    12a6:	80 83       	st	Z, r24
    } 
    return true; 
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <mrpp_state_get_ready_body+0x100>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	af 90       	pop	r10
    12c6:	9f 90       	pop	r9
    12c8:	8f 90       	pop	r8
    12ca:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

0000363a <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    363a:	fc 01       	movw	r30, r24
    363c:	e5 58       	subi	r30, 0x85	; 133
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	20 81       	ld	r18, Z
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	62 17       	cp	r22, r18
    3646:	73 07       	cpc	r23, r19
    3648:	3c f4       	brge	.+14     	; 0x3658 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    364a:	68 0f       	add	r22, r24
    364c:	79 1f       	adc	r23, r25
    364e:	fb 01       	movw	r30, r22
    3650:	e4 58       	subi	r30, 0x84	; 132
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	82 e0       	ldi	r24, 0x02	; 2
    3656:	80 83       	st	Z, r24
    3658:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00003098 <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    3098:	70 e0       	ldi	r23, 0x00	; 0
    309a:	61 50       	subi	r22, 0x01	; 1
    309c:	71 09       	sbc	r23, r1
    309e:	fb 01       	movw	r30, r22
    30a0:	ee 0f       	add	r30, r30
    30a2:	ff 1f       	adc	r31, r31
    30a4:	66 0f       	add	r22, r22
    30a6:	77 1f       	adc	r23, r23
    30a8:	66 0f       	add	r22, r22
    30aa:	77 1f       	adc	r23, r23
    30ac:	66 0f       	add	r22, r22
    30ae:	77 1f       	adc	r23, r23
    30b0:	e6 0f       	add	r30, r22
    30b2:	f7 1f       	adc	r31, r23
    30b4:	e8 0f       	add	r30, r24
    30b6:	f9 1f       	adc	r31, r25
    30b8:	83 81       	ldd	r24, Z+3	; 0x03
    30ba:	94 81       	ldd	r25, Z+4	; 0x04
    30bc:	da 01       	movw	r26, r20
    30be:	8d 93       	st	X+, r24
    30c0:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    30c2:	85 81       	ldd	r24, Z+5	; 0x05
    30c4:	96 81       	ldd	r25, Z+6	; 0x06
    30c6:	f9 01       	movw	r30, r18
    30c8:	91 83       	std	Z+1, r25	; 0x01
    30ca:	80 83       	st	Z, r24
    30cc:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00003396 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    3396:	80 91 9a 0d 	lds	r24, 0x0D9A	; 0x800d9a <cnt>
    339a:	90 91 9b 0d 	lds	r25, 0x0D9B	; 0x800d9b <cnt+0x1>
    339e:	01 96       	adiw	r24, 0x01	; 1
    33a0:	90 93 9b 0d 	sts	0x0D9B, r25	; 0x800d9b <cnt+0x1>
    33a4:	80 93 9a 0d 	sts	0x0D9A, r24	; 0x800d9a <cnt>
	if(cnt>=_seconds){
    33a8:	20 91 9c 0d 	lds	r18, 0x0D9C	; 0x800d9c <_seconds>
    33ac:	30 91 9d 0d 	lds	r19, 0x0D9D	; 0x800d9d <_seconds+0x1>
    33b0:	82 17       	cp	r24, r18
    33b2:	93 07       	cpc	r25, r19
    33b4:	38 f0       	brcs	.+14     	; 0x33c4 <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    33b6:	80 91 b6 0d 	lds	r24, 0x0DB6	; 0x800db6 <eventPointer>
    33ba:	0e 94 f7 17 	call	0x2fee	; 0x2fee <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	0e 94 2c 1c 	call	0x3858	; 0x3858 <PM_HAL_BC_power>
    33c4:	08 95       	ret

Disassembly of section .text.PUMP_start:

000034ec <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    34ec:	10 92 9b 0d 	sts	0x0D9B, r1	; 0x800d9b <cnt+0x1>
    34f0:	10 92 9a 0d 	sts	0x0D9A, r1	; 0x800d9a <cnt>
	_seconds=seconds;
    34f4:	90 93 9d 0d 	sts	0x0D9D, r25	; 0x800d9d <_seconds+0x1>
    34f8:	80 93 9c 0d 	sts	0x0D9C, r24	; 0x800d9c <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    34fc:	8b ec       	ldi	r24, 0xCB	; 203
    34fe:	99 e1       	ldi	r25, 0x19	; 25
    3500:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <TC2_HAL_subscribe>
    3504:	80 93 b6 0d 	sts	0x0DB6, r24	; 0x800db6 <eventPointer>
	PM_HAL_BC_power(true);
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	0e 94 2c 1c 	call	0x3858	; 0x3858 <PM_HAL_BC_power>
    350e:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

00003706 <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    3706:	40 91 9a 0d 	lds	r20, 0x0D9A	; 0x800d9a <cnt>
    370a:	50 91 9b 0d 	lds	r21, 0x0D9B	; 0x800d9b <cnt+0x1>
    370e:	20 91 9c 0d 	lds	r18, 0x0D9C	; 0x800d9c <_seconds>
    3712:	30 91 9d 0d 	lds	r19, 0x0D9D	; 0x800d9d <_seconds+0x1>
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	42 17       	cp	r20, r18
    371a:	53 07       	cpc	r21, r19
    371c:	08 f4       	brcc	.+2      	; 0x3720 <PUMP_is_done+0x1a>
    371e:	80 e0       	ldi	r24, 0x00	; 0
}
    3720:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00002836 <RTC_set_clock_out>:
	uint32_t tsbit;
} tsbit;

const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29
    283a:	00 d0       	rcall	.+0      	; 0x283c <RTC_set_clock_out+0x6>
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    2840:	9d e0       	ldi	r25, 0x0D	; 13
    2842:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	31 f0       	breq	.+12     	; 0x2854 <RTC_set_clock_out+0x1e>
    2848:	18 f0       	brcs	.+6      	; 0x2850 <RTC_set_clock_out+0x1a>
    284a:	80 32       	cpi	r24, 0x20	; 32
    284c:	31 f0       	breq	.+12     	; 0x285a <RTC_set_clock_out+0x24>
    284e:	13 c0       	rjmp	.+38     	; 0x2876 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    2850:	1a 82       	std	Y+2, r1	; 0x02
			break;
    2852:	05 c0       	rjmp	.+10     	; 0x285e <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    2854:	83 e8       	ldi	r24, 0x83	; 131
    2856:	8a 83       	std	Y+2, r24	; 0x02
			break;
    2858:	02 c0       	rjmp	.+4      	; 0x285e <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    285a:	82 e8       	ldi	r24, 0x82	; 130
    285c:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    285e:	ae 01       	movw	r20, r28
    2860:	4f 5f       	subi	r20, 0xFF	; 255
    2862:	5f 4f       	sbci	r21, 0xFF	; 255
    2864:	60 e8       	ldi	r22, 0x80	; 128
    2866:	22 e0       	ldi	r18, 0x02	; 2
    2868:	81 e5       	ldi	r24, 0x51	; 81
    286a:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    286e:	88 23       	and	r24, r24
    2870:	21 f0       	breq	.+8      	; 0x287a <RTC_set_clock_out+0x44>
    2872:	82 e0       	ldi	r24, 0x02	; 2
    2874:	03 c0       	rjmp	.+6      	; 0x287c <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	01 c0       	rjmp	.+2      	; 0x287c <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    287a:	80 e0       	ldi	r24, 0x00	; 0
}
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

000031d8 <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	00 d0       	rcall	.+0      	; 0x31de <RTC_clear_wake_up_interrupt+0x6>
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	89 83       	std	Y+1, r24	; 0x01
    31e6:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    31e8:	ae 01       	movw	r20, r28
    31ea:	4f 5f       	subi	r20, 0xFF	; 255
    31ec:	5f 4f       	sbci	r21, 0xFF	; 255
    31ee:	60 e8       	ldi	r22, 0x80	; 128
    31f0:	22 e0       	ldi	r18, 0x02	; 2
    31f2:	81 e5       	ldi	r24, 0x51	; 81
    31f4:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    31f8:	88 23       	and	r24, r24
    31fa:	11 f0       	breq	.+4      	; 0x3200 <RTC_clear_wake_up_interrupt+0x28>
    31fc:	82 e0       	ldi	r24, 0x02	; 2
    31fe:	01 c0       	rjmp	.+2      	; 0x3202 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    3200:	80 e0       	ldi	r24, 0x00	; 0
}
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	df 91       	pop	r29
    3208:	cf 91       	pop	r28
    320a:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00000f50 <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	27 97       	sbiw	r28, 0x07	; 7
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	8c 01       	movw	r16, r24
     f6a:	21 e0       	ldi	r18, 0x01	; 1
     f6c:	44 e3       	ldi	r20, 0x34	; 52
     f6e:	53 e0       	ldi	r21, 0x03	; 3
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	81 e5       	ldi	r24, 0x51	; 81
     f74:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <TWI_API_write_data>
     f78:	81 11       	cpse	r24, r1
     f7a:	7c c0       	rjmp	.+248    	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
     f7c:	47 e0       	ldi	r20, 0x07	; 7
     f7e:	be 01       	movw	r22, r28
     f80:	6f 5f       	subi	r22, 0xFF	; 255
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	81 e5       	ldi	r24, 0x51	; 81
     f86:	0e 94 88 1a 	call	0x3510	; 0x3510 <TWI_API_repeat_read_data_stop>
     f8a:	81 11       	cpse	r24, r1
     f8c:	75 c0       	rjmp	.+234    	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
     f8e:	29 81       	ldd	r18, Y+1	; 0x01
     f90:	82 2f       	mov	r24, r18
     f92:	8f 77       	andi	r24, 0x7F	; 127
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	95 95       	asr	r25
     f98:	87 95       	ror	r24
     f9a:	95 95       	asr	r25
     f9c:	87 95       	ror	r24
     f9e:	95 95       	asr	r25
     fa0:	87 95       	ror	r24
     fa2:	95 95       	asr	r25
     fa4:	87 95       	ror	r24
     fa6:	88 0f       	add	r24, r24
     fa8:	98 2f       	mov	r25, r24
     faa:	99 0f       	add	r25, r25
     fac:	99 0f       	add	r25, r25
     fae:	89 0f       	add	r24, r25
     fb0:	2f 70       	andi	r18, 0x0F	; 15
     fb2:	82 0f       	add	r24, r18
     fb4:	f8 01       	movw	r30, r16
     fb6:	80 83       	st	Z, r24
     fb8:	2a 81       	ldd	r18, Y+2	; 0x02
     fba:	82 2f       	mov	r24, r18
     fbc:	8f 77       	andi	r24, 0x7F	; 127
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	95 95       	asr	r25
     fc2:	87 95       	ror	r24
     fc4:	95 95       	asr	r25
     fc6:	87 95       	ror	r24
     fc8:	95 95       	asr	r25
     fca:	87 95       	ror	r24
     fcc:	95 95       	asr	r25
     fce:	87 95       	ror	r24
     fd0:	88 0f       	add	r24, r24
     fd2:	98 2f       	mov	r25, r24
     fd4:	99 0f       	add	r25, r25
     fd6:	99 0f       	add	r25, r25
     fd8:	89 0f       	add	r24, r25
     fda:	2f 70       	andi	r18, 0x0F	; 15
     fdc:	82 0f       	add	r24, r18
     fde:	81 83       	std	Z+1, r24	; 0x01
     fe0:	2b 81       	ldd	r18, Y+3	; 0x03
     fe2:	82 2f       	mov	r24, r18
     fe4:	8f 73       	andi	r24, 0x3F	; 63
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	95 95       	asr	r25
     fea:	87 95       	ror	r24
     fec:	95 95       	asr	r25
     fee:	87 95       	ror	r24
     ff0:	95 95       	asr	r25
     ff2:	87 95       	ror	r24
     ff4:	95 95       	asr	r25
     ff6:	87 95       	ror	r24
     ff8:	88 0f       	add	r24, r24
     ffa:	98 2f       	mov	r25, r24
     ffc:	99 0f       	add	r25, r25
     ffe:	99 0f       	add	r25, r25
    1000:	89 0f       	add	r24, r25
    1002:	2f 70       	andi	r18, 0x0F	; 15
    1004:	82 0f       	add	r24, r18
    1006:	82 83       	std	Z+2, r24	; 0x02
    1008:	2c 81       	ldd	r18, Y+4	; 0x04
    100a:	82 2f       	mov	r24, r18
    100c:	8f 73       	andi	r24, 0x3F	; 63
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	95 95       	asr	r25
    1012:	87 95       	ror	r24
    1014:	95 95       	asr	r25
    1016:	87 95       	ror	r24
    1018:	95 95       	asr	r25
    101a:	87 95       	ror	r24
    101c:	95 95       	asr	r25
    101e:	87 95       	ror	r24
    1020:	88 0f       	add	r24, r24
    1022:	98 2f       	mov	r25, r24
    1024:	99 0f       	add	r25, r25
    1026:	99 0f       	add	r25, r25
    1028:	89 0f       	add	r24, r25
    102a:	2f 70       	andi	r18, 0x0F	; 15
    102c:	82 0f       	add	r24, r18
    102e:	83 83       	std	Z+3, r24	; 0x03
    1030:	2e 81       	ldd	r18, Y+6	; 0x06
    1032:	82 2f       	mov	r24, r18
    1034:	8f 71       	andi	r24, 0x1F	; 31
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	95 95       	asr	r25
    103a:	87 95       	ror	r24
    103c:	95 95       	asr	r25
    103e:	87 95       	ror	r24
    1040:	95 95       	asr	r25
    1042:	87 95       	ror	r24
    1044:	95 95       	asr	r25
    1046:	87 95       	ror	r24
    1048:	88 0f       	add	r24, r24
    104a:	98 2f       	mov	r25, r24
    104c:	99 0f       	add	r25, r25
    104e:	99 0f       	add	r25, r25
    1050:	89 0f       	add	r24, r25
    1052:	2f 70       	andi	r18, 0x0F	; 15
    1054:	82 0f       	add	r24, r18
    1056:	84 83       	std	Z+4, r24	; 0x04
    1058:	8f 81       	ldd	r24, Y+7	; 0x07
    105a:	98 2f       	mov	r25, r24
    105c:	92 95       	swap	r25
    105e:	9f 70       	andi	r25, 0x0F	; 15
    1060:	99 0f       	add	r25, r25
    1062:	29 2f       	mov	r18, r25
    1064:	22 0f       	add	r18, r18
    1066:	22 0f       	add	r18, r18
    1068:	92 0f       	add	r25, r18
    106a:	8f 70       	andi	r24, 0x0F	; 15
    106c:	89 0f       	add	r24, r25
    106e:	85 83       	std	Z+5, r24	; 0x05
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	03 c0       	rjmp	.+6      	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	01 c0       	rjmp	.+2      	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	27 96       	adiw	r28, 0x07	; 7
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

000019e4 <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	2d 97       	sbiw	r28, 0x0d	; 13
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    1a04:	85 e0       	ldi	r24, 0x05	; 5
    1a06:	eb e7       	ldi	r30, 0x7B	; 123
    1a08:	fd e0       	ldi	r31, 0x0D	; 13
    1a0a:	de 01       	movw	r26, r28
    1a0c:	13 96       	adiw	r26, 0x03	; 3
    1a0e:	01 90       	ld	r0, Z+
    1a10:	0d 92       	st	X+, r0
    1a12:	8a 95       	dec	r24
    1a14:	e1 f7       	brne	.-8      	; 0x1a0e <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    1a16:	ce 01       	movw	r24, r28
    1a18:	08 96       	adiw	r24, 0x08	; 8
    1a1a:	0e 94 a8 07 	call	0xf50	; 0xf50 <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    1a1e:	89 85       	ldd	r24, Y+9	; 0x09
    1a20:	81 0f       	add	r24, r17
	dt.minute %= 60;
    1a22:	99 e8       	ldi	r25, 0x89	; 137
    1a24:	89 9f       	mul	r24, r25
    1a26:	91 2d       	mov	r25, r1
    1a28:	11 24       	eor	r1, r1
    1a2a:	92 95       	swap	r25
    1a2c:	96 95       	lsr	r25
    1a2e:	97 70       	andi	r25, 0x07	; 7
    1a30:	2c e3       	ldi	r18, 0x3C	; 60
    1a32:	92 9f       	mul	r25, r18
    1a34:	80 19       	sub	r24, r0
    1a36:	11 24       	eor	r1, r1
    1a38:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    1a3a:	ae 01       	movw	r20, r28
    1a3c:	4f 5f       	subi	r20, 0xFF	; 255
    1a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a40:	60 e8       	ldi	r22, 0x80	; 128
    1a42:	22 e0       	ldi	r18, 0x02	; 2
    1a44:	81 e5       	ldi	r24, 0x51	; 81
    1a46:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1a4a:	81 11       	cpse	r24, r1
    1a4c:	20 c0       	rjmp	.+64     	; 0x1a8e <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    1a4e:	99 85       	ldd	r25, Y+9	; 0x09
    1a50:	8d ec       	ldi	r24, 0xCD	; 205
    1a52:	98 9f       	mul	r25, r24
    1a54:	81 2d       	mov	r24, r1
    1a56:	11 24       	eor	r1, r1
    1a58:	86 95       	lsr	r24
    1a5a:	86 95       	lsr	r24
    1a5c:	86 95       	lsr	r24
    1a5e:	40 e1       	ldi	r20, 0x10	; 16
    1a60:	84 9f       	mul	r24, r20
    1a62:	90 01       	movw	r18, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	88 0f       	add	r24, r24
    1a68:	38 2f       	mov	r19, r24
    1a6a:	33 0f       	add	r19, r19
    1a6c:	33 0f       	add	r19, r19
    1a6e:	83 0f       	add	r24, r19
    1a70:	98 1b       	sub	r25, r24
    1a72:	92 2b       	or	r25, r18
    1a74:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    1a76:	ae 01       	movw	r20, r28
    1a78:	4d 5f       	subi	r20, 0xFD	; 253
    1a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7c:	60 e8       	ldi	r22, 0x80	; 128
    1a7e:	25 e0       	ldi	r18, 0x05	; 5
    1a80:	81 e5       	ldi	r24, 0x51	; 81
    1a82:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1a86:	88 23       	and	r24, r24
    1a88:	21 f0       	breq	.+8      	; 0x1a92 <RTC_set_wake_up_interrupt_minutes+0xae>
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	03 c0       	rjmp	.+6      	; 0x1a94 <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	01 c0       	rjmp	.+2      	; 0x1a94 <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    1a92:	80 e0       	ldi	r24, 0x00	; 0
}
    1a94:	2d 96       	adiw	r28, 0x0d	; 13
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

00001090 <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    1090:	4f 92       	push	r4
    1092:	5f 92       	push	r5
    1094:	6f 92       	push	r6
    1096:	7f 92       	push	r7
    1098:	8f 92       	push	r8
    109a:	9f 92       	push	r9
    109c:	af 92       	push	r10
    109e:	bf 92       	push	r11
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <RTC_datetime_to_ts+0x22>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <RTC_datetime_to_ts+0x24>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <RTC_datetime_to_ts+0x26>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	f9 01       	movw	r30, r18
    10bc:	49 2e       	mov	r4, r25
    10be:	51 2c       	mov	r5, r1
    10c0:	61 2c       	mov	r6, r1
    10c2:	71 2c       	mov	r7, r1
    10c4:	03 2e       	mov	r0, r19
    10c6:	3a e1       	ldi	r19, 0x1A	; 26
    10c8:	44 0c       	add	r4, r4
    10ca:	55 1c       	adc	r5, r5
    10cc:	66 1c       	adc	r6, r6
    10ce:	77 1c       	adc	r7, r7
    10d0:	3a 95       	dec	r19
    10d2:	d1 f7       	brne	.-12     	; 0x10c8 <RTC_datetime_to_ts+0x38>
    10d4:	30 2d       	mov	r19, r0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a0 e0       	ldi	r26, 0x00	; 0
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	07 2e       	mov	r0, r23
    10de:	76 e1       	ldi	r23, 0x16	; 22
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	aa 1f       	adc	r26, r26
    10e6:	bb 1f       	adc	r27, r27
    10e8:	7a 95       	dec	r23
    10ea:	d1 f7       	brne	.-12     	; 0x10e0 <RTC_datetime_to_ts+0x50>
    10ec:	70 2d       	mov	r23, r0
    10ee:	84 29       	or	r24, r4
    10f0:	95 29       	or	r25, r5
    10f2:	a6 29       	or	r26, r6
    10f4:	b7 29       	or	r27, r7
    10f6:	87 2e       	mov	r8, r23
    10f8:	91 2c       	mov	r9, r1
    10fa:	a1 2c       	mov	r10, r1
    10fc:	b1 2c       	mov	r11, r1
    10fe:	07 2e       	mov	r0, r23
    1100:	71 e1       	ldi	r23, 0x11	; 17
    1102:	88 0c       	add	r8, r8
    1104:	99 1c       	adc	r9, r9
    1106:	aa 1c       	adc	r10, r10
    1108:	bb 1c       	adc	r11, r11
    110a:	7a 95       	dec	r23
    110c:	d1 f7       	brne	.-12     	; 0x1102 <__stack+0x3>
    110e:	70 2d       	mov	r23, r0
    1110:	88 29       	or	r24, r8
    1112:	99 29       	or	r25, r9
    1114:	aa 29       	or	r26, r10
    1116:	bb 29       	or	r27, r11
    1118:	c6 2e       	mov	r12, r22
    111a:	d1 2c       	mov	r13, r1
    111c:	e1 2c       	mov	r14, r1
    111e:	f1 2c       	mov	r15, r1
    1120:	0b 2e       	mov	r0, r27
    1122:	bc e0       	ldi	r27, 0x0C	; 12
    1124:	cc 0c       	add	r12, r12
    1126:	dd 1c       	adc	r13, r13
    1128:	ee 1c       	adc	r14, r14
    112a:	ff 1c       	adc	r15, r15
    112c:	ba 95       	dec	r27
    112e:	d1 f7       	brne	.-12     	; 0x1124 <__stack+0x25>
    1130:	b0 2d       	mov	r27, r0
    1132:	8c 29       	or	r24, r12
    1134:	9d 29       	or	r25, r13
    1136:	ae 29       	or	r26, r14
    1138:	bf 29       	or	r27, r15
    113a:	05 2f       	mov	r16, r21
    113c:	10 e0       	ldi	r17, 0x00	; 0
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	00 0f       	add	r16, r16
    1144:	11 1f       	adc	r17, r17
    1146:	22 1f       	adc	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	00 0f       	add	r16, r16
    114c:	11 1f       	adc	r17, r17
    114e:	22 1f       	adc	r18, r18
    1150:	33 1f       	adc	r19, r19
    1152:	00 0f       	add	r16, r16
    1154:	11 1f       	adc	r17, r17
    1156:	22 1f       	adc	r18, r18
    1158:	33 1f       	adc	r19, r19
    115a:	00 0f       	add	r16, r16
    115c:	11 1f       	adc	r17, r17
    115e:	22 1f       	adc	r18, r18
    1160:	33 1f       	adc	r19, r19
    1162:	00 0f       	add	r16, r16
    1164:	11 1f       	adc	r17, r17
    1166:	22 1f       	adc	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	00 0f       	add	r16, r16
    116c:	11 1f       	adc	r17, r17
    116e:	22 1f       	adc	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	80 2b       	or	r24, r16
    1174:	91 2b       	or	r25, r17
    1176:	a2 2b       	or	r26, r18
    1178:	b3 2b       	or	r27, r19
    117a:	84 2b       	or	r24, r20
    117c:	b0 83       	st	Z, r27
    117e:	a1 83       	std	Z+1, r26	; 0x01
    1180:	92 83       	std	Z+2, r25	; 0x02
    1182:	83 83       	std	Z+3, r24	; 0x03
    1184:	26 96       	adiw	r28, 0x06	; 6
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	bf 90       	pop	r11
    11a2:	af 90       	pop	r10
    11a4:	9f 90       	pop	r9
    11a6:	8f 90       	pop	r8
    11a8:	7f 90       	pop	r7
    11aa:	6f 90       	pop	r6
    11ac:	5f 90       	pop	r5
    11ae:	4f 90       	pop	r4
    11b0:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

0000375a <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    375a:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    375c:	54 81       	ldd	r21, Z+4	; 0x04
    375e:	43 81       	ldd	r20, Z+3	; 0x03
    3760:	31 81       	ldd	r19, Z+1	; 0x01
    3762:	20 81       	ld	r18, Z
    3764:	65 2f       	mov	r22, r21
    3766:	74 2f       	mov	r23, r20
    3768:	83 2f       	mov	r24, r19
    376a:	92 2f       	mov	r25, r18
    376c:	0e 94 3b 13 	call	0x2676	; 0x2676 <__fixunssfsi>
}
    3770:	cb 01       	movw	r24, r22
    3772:	08 95       	ret

Disassembly of section .text.init_measurement:

00003028 <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    3028:	25 e0       	ldi	r18, 0x05	; 5
    302a:	45 e2       	ldi	r20, 0x25	; 37
    302c:	53 e0       	ldi	r21, 0x03	; 3
    302e:	60 e0       	ldi	r22, 0x00	; 0
    3030:	81 e6       	ldi	r24, 0x61	; 97
    3032:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3036:	81 11       	cpse	r24, r1
    3038:	0f c0       	rjmp	.+30     	; 0x3058 <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    303a:	25 e0       	ldi	r18, 0x05	; 5
    303c:	4a e2       	ldi	r20, 0x2A	; 42
    303e:	53 e0       	ldi	r21, 0x03	; 3
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	81 e6       	ldi	r24, 0x61	; 97
    3044:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3048:	81 11       	cpse	r24, r1
    304a:	08 c0       	rjmp	.+16     	; 0x305c <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    304c:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <SCD30_HAL_data_ready>
    3050:	88 23       	and	r24, r24
    3052:	e1 f3       	breq	.-8      	; 0x304c <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    305c:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    305e:	08 95       	ret

Disassembly of section .text.validate_data:

000032a2 <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    32a2:	cf 93       	push	r28
    32a4:	df 93       	push	r29
    32a6:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    32a8:	62 e0       	ldi	r22, 0x02	; 2
    32aa:	0e 94 67 18 	call	0x30ce	; 0x30ce <calc_crc8>
	if(data[2]!=crc) return false;
    32ae:	9a 81       	ldd	r25, Y+2	; 0x02
    32b0:	89 13       	cpse	r24, r25
    32b2:	0a c0       	rjmp	.+20     	; 0x32c8 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    32b4:	62 e0       	ldi	r22, 0x02	; 2
    32b6:	ce 01       	movw	r24, r28
    32b8:	03 96       	adiw	r24, 0x03	; 3
    32ba:	0e 94 67 18 	call	0x30ce	; 0x30ce <calc_crc8>
	if(data[5]!=crc) return false;
    32be:	9d 81       	ldd	r25, Y+5	; 0x05
    32c0:	89 17       	cp	r24, r25
    32c2:	21 f0       	breq	.+8      	; 0x32cc <validate_data+0x2a>
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	03 c0       	rjmp	.+6      	; 0x32ce <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	01 c0       	rjmp	.+2      	; 0x32ce <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
}
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	08 95       	ret

Disassembly of section .text.read_value:

00001d56 <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <read_value+0xa>
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <read_value+0xc>
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <read_value+0xe>
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    1d6a:	8f ef       	ldi	r24, 0xFF	; 255
    1d6c:	9f ef       	ldi	r25, 0xFF	; 255
    1d6e:	f8 01       	movw	r30, r16
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    1d74:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <SCD30_HAL_data_ready>
    1d78:	81 11       	cpse	r24, r1
    1d7a:	07 c0       	rjmp	.+14     	; 0x1d8a <read_value+0x34>
		*value=0xfffe;
    1d7c:	8e ef       	ldi	r24, 0xFE	; 254
    1d7e:	9f ef       	ldi	r25, 0xFF	; 255
    1d80:	f8 01       	movw	r30, r16
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	2c c0       	rjmp	.+88     	; 0x1de2 <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    1d8a:	22 e0       	ldi	r18, 0x02	; 2
    1d8c:	42 e3       	ldi	r20, 0x32	; 50
    1d8e:	53 e0       	ldi	r21, 0x03	; 3
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	81 e6       	ldi	r24, 0x61	; 97
    1d94:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1d98:	81 11       	cpse	r24, r1
    1d9a:	1e c0       	rjmp	.+60     	; 0x1dd8 <read_value+0x82>
    1d9c:	8f e3       	ldi	r24, 0x3F	; 63
    1d9e:	9f e1       	ldi	r25, 0x1F	; 31
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <read_value+0x4a>
    1da4:	00 c0       	rjmp	.+0      	; 0x1da6 <read_value+0x50>
    1da6:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    1da8:	46 e0       	ldi	r20, 0x06	; 6
    1daa:	be 01       	movw	r22, r28
    1dac:	6f 5f       	subi	r22, 0xFF	; 255
    1dae:	7f 4f       	sbci	r23, 0xFF	; 255
    1db0:	81 e6       	ldi	r24, 0x61	; 97
    1db2:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1db6:	81 11       	cpse	r24, r1
    1db8:	11 c0       	rjmp	.+34     	; 0x1ddc <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1dba:	ce 01       	movw	r24, r28
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	0e 94 51 19 	call	0x32a2	; 0x32a2 <validate_data>
    1dc2:	88 23       	and	r24, r24
    1dc4:	69 f0       	breq	.+26     	; 0x1de0 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	0e 94 ad 1b 	call	0x375a	; 0x375a <bytes_2_uint>
    1dce:	f8 01       	movw	r30, r16
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	05 c0       	rjmp	.+10     	; 0x1de2 <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    1de2:	26 96       	adiw	r28, 0x06	; 6
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00002ce0 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    2ce0:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <_data>
    2ce4:	90 91 a1 0d 	lds	r25, 0x0DA1	; 0x800da1 <_data+0x1>
    2ce8:	20 91 9e 0d 	lds	r18, 0x0D9E	; 0x800d9e <cntSamples>
    2cec:	30 91 9f 0d 	lds	r19, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    2cf0:	a9 01       	movw	r20, r18
    2cf2:	4f 5f       	subi	r20, 0xFF	; 255
    2cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cf6:	50 93 9f 0d 	sts	0x0D9F, r21	; 0x800d9f <cntSamples+0x1>
    2cfa:	40 93 9e 0d 	sts	0x0D9E, r20	; 0x800d9e <cntSamples>
    2cfe:	22 0f       	add	r18, r18
    2d00:	33 1f       	adc	r19, r19
    2d02:	82 0f       	add	r24, r18
    2d04:	93 1f       	adc	r25, r19
    2d06:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <read_value>
	if(cntSamples>=_nSamples){
    2d0a:	20 91 9e 0d 	lds	r18, 0x0D9E	; 0x800d9e <cntSamples>
    2d0e:	30 91 9f 0d 	lds	r19, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    2d12:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <_nSamples>
    2d16:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <_nSamples+0x1>
    2d1a:	28 17       	cp	r18, r24
    2d1c:	39 07       	cpc	r19, r25
    2d1e:	10 f0       	brcs	.+4      	; 0x2d24 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    2d20:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <TC1_HAL_stop>
    2d24:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00002970 <SCD30_init_sampling>:
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();



SCD30_STATUS SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	ec 01       	movw	r28, r24
	_nSamples=nSamples;
    2976:	70 93 a3 0d 	sts	0x0DA3, r23	; 0x800da3 <_nSamples+0x1>
    297a:	60 93 a2 0d 	sts	0x0DA2, r22	; 0x800da2 <_nSamples>
	cntSamples=0;
    297e:	10 92 9f 0d 	sts	0x0D9F, r1	; 0x800d9f <cntSamples+0x1>
    2982:	10 92 9e 0d 	sts	0x0D9E, r1	; 0x800d9e <cntSamples>
	_data=data;
    2986:	50 93 a1 0d 	sts	0x0DA1, r21	; 0x800da1 <_data+0x1>
    298a:	40 93 a0 0d 	sts	0x0DA0, r20	; 0x800da0 <_data>
	
	//Init
	SCD30_HAL_init();
    298e:	0e 94 a6 1c 	call	0x394c	; 0x394c <SCD30_HAL_init>
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    2992:	60 e7       	ldi	r22, 0x70	; 112
    2994:	76 e1       	ldi	r23, 0x16	; 22
    2996:	ce 01       	movw	r24, r28
    2998:	0e 94 b8 18 	call	0x3170	; 0x3170 <TC1_HAL_init>
	PM_HAL_SCD30_power(true);
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	0e 94 22 1c 	call	0x3844	; 0x3844 <PM_HAL_SCD30_power>
    29a2:	2f ef       	ldi	r18, 0xFF	; 255
    29a4:	83 ed       	ldi	r24, 0xD3	; 211
    29a6:	90 e3       	ldi	r25, 0x30	; 48
    29a8:	21 50       	subi	r18, 0x01	; 1
    29aa:	80 40       	sbci	r24, 0x00	; 0
    29ac:	90 40       	sbci	r25, 0x00	; 0
    29ae:	e1 f7       	brne	.-8      	; 0x29a8 <SCD30_init_sampling+0x38>
    29b0:	00 c0       	rjmp	.+0      	; 0x29b2 <SCD30_init_sampling+0x42>
    29b2:	00 00       	nop
	_delay_ms(2000);
	
	return init_measurement();
    29b4:	0e 94 14 18 	call	0x3028	; 0x3028 <init_measurement>
}
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

000038bc <SCD30_deinit_sampling>:

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    38bc:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <TC1_HAL_stop>
	PM_HAL_SCD30_power(false);
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	0e 94 22 1c 	call	0x3844	; 0x3844 <PM_HAL_SCD30_power>
	_data=NULL;
    38c6:	10 92 a1 0d 	sts	0x0DA1, r1	; 0x800da1 <_data+0x1>
    38ca:	10 92 a0 0d 	sts	0x0DA0, r1	; 0x800da0 <_data>
    38ce:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

000039e8 <SCD30_start_sampling>:
	
}

SCD30_STATUS SCD30_start_sampling(){
	vect_SCD_do_sample();
    39e8:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <vect_SCD_do_sample>
	TC1_HAL_start();
    39ec:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <TC1_HAL_start>
	return SCD30_STATUS_SUCCESS;
}
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00003722 <SCD30_is_sampling_done>:

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    3722:	40 91 9e 0d 	lds	r20, 0x0D9E	; 0x800d9e <cntSamples>
    3726:	50 91 9f 0d 	lds	r21, 0x0D9F	; 0x800d9f <cntSamples+0x1>
    372a:	20 91 a2 0d 	lds	r18, 0x0DA2	; 0x800da2 <_nSamples>
    372e:	30 91 a3 0d 	lds	r19, 0x0DA3	; 0x800da3 <_nSamples+0x1>
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	42 17       	cp	r20, r18
    3736:	53 07       	cpc	r21, r19
    3738:	08 f4       	brcc	.+2      	; 0x373c <SCD30_is_sampling_done+0x1a>
    373a:	80 e0       	ldi	r24, 0x00	; 0
}
    373c:	08 95       	ret

Disassembly of section .text.decode_stage_response:

00003806 <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    3806:	88 23       	and	r24, r24
    3808:	19 f0       	breq	.+6      	; 0x3810 <decode_stage_response+0xa>
    380a:	81 30       	cpi	r24, 0x01	; 1
    380c:	29 f0       	breq	.+10     	; 0x3818 <decode_stage_response+0x12>
    380e:	02 c0       	rjmp	.+4      	; 0x3814 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    3810:	8d e0       	ldi	r24, 0x0D	; 13
    3812:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    3814:	82 e1       	ldi	r24, 0x12	; 18
    3816:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    3818:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    381a:	08 95       	ret

Disassembly of section .text.decode_join_response:

0000373e <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    373e:	83 30       	cpi	r24, 0x03	; 3
    3740:	51 f0       	breq	.+20     	; 0x3756 <decode_join_response+0x18>
    3742:	84 30       	cpi	r24, 0x04	; 4
    3744:	21 f0       	breq	.+8      	; 0x374e <decode_join_response+0x10>
    3746:	81 11       	cpse	r24, r1
    3748:	04 c0       	rjmp	.+8      	; 0x3752 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_INIT_RTC;
    374a:	85 e0       	ldi	r24, 0x05	; 5
    374c:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
    374e:	83 e0       	ldi	r24, 0x03	; 3
    3750:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    3752:	82 e1       	ldi	r24, 0x12	; 18
    3754:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_INIT_RTC;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    3756:	82 e0       	ldi	r24, 0x02	; 2
		case LM_STATUS_CONF_ERR:
			return MAINPG_LORA_JOIN_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    3758:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

000037d6 <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    37d6:	83 30       	cpi	r24, 0x03	; 3
    37d8:	31 f0       	breq	.+12     	; 0x37e6 <decode_header_tail_response+0x10>
    37da:	85 30       	cpi	r24, 0x05	; 5
    37dc:	31 f0       	breq	.+12     	; 0x37ea <decode_header_tail_response+0x14>
    37de:	88 23       	and	r24, r24
    37e0:	21 f0       	breq	.+8      	; 0x37ea <decode_header_tail_response+0x14>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    37e2:	82 e1       	ldi	r24, 0x12	; 18
    37e4:	08 95       	ret
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    37e6:	84 2f       	mov	r24, r20
    37e8:	08 95       	ret

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
    37ea:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    37ec:	08 95       	ret

Disassembly of section .text.join_lora:

00002158 <join_lora>:
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(4);
}

static LM_STATUS join_lora(){
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	c3 54       	subi	r28, 0x43	; 67
    2162:	d1 09       	sbc	r29, r1
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
	char deveui[]="0004A30B00F4547A";
    216e:	20 e5       	ldi	r18, 0x50	; 80
    2170:	31 e0       	ldi	r19, 0x01	; 1
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	81 e1       	ldi	r24, 0x11	; 17
    2176:	f9 01       	movw	r30, r18
    2178:	de 01       	movw	r26, r28
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	74 2f       	mov	r23, r20
    217e:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__movmemx_qi>
	char appeui[]="70B3D57ED003F844";
    2182:	21 e6       	ldi	r18, 0x61	; 97
    2184:	31 e0       	ldi	r19, 0x01	; 1
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	81 e1       	ldi	r24, 0x11	; 17
    218a:	f9 01       	movw	r30, r18
    218c:	de 01       	movw	r26, r28
    218e:	52 96       	adiw	r26, 0x12	; 18
    2190:	74 2f       	mov	r23, r20
    2192:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__movmemx_qi>
	char appkey[]="B88AD6D25A3B27C69A01F74C53F9A179";
    2196:	22 e7       	ldi	r18, 0x72	; 114
    2198:	31 e0       	ldi	r19, 0x01	; 1
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	81 e2       	ldi	r24, 0x21	; 33
    219e:	f9 01       	movw	r30, r18
    21a0:	de 01       	movw	r26, r28
    21a2:	93 96       	adiw	r26, 0x23	; 35
    21a4:	74 2f       	mov	r23, r20
    21a6:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__movmemx_qi>
	
	return LM_join_network(deveui, appeui, appkey);
    21aa:	ae 01       	movw	r20, r28
    21ac:	4d 5d       	subi	r20, 0xDD	; 221
    21ae:	5f 4f       	sbci	r21, 0xFF	; 255
    21b0:	be 01       	movw	r22, r28
    21b2:	6e 5e       	subi	r22, 0xEE	; 238
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	ce 01       	movw	r24, r28
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <LM_join_network>
}
    21be:	cd 5b       	subi	r28, 0xBD	; 189
    21c0:	df 4f       	sbci	r29, 0xFF	; 255
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	08 95       	ret

Disassembly of section .text.set_wakeup:

00003a4c <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(4);
    3a4c:	84 e0       	ldi	r24, 0x04	; 4
    3a4e:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <RTC_set_wake_up_interrupt_minutes>
}
    3a52:	08 95       	ret

Disassembly of section .text.send_header:

00002efa <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	e4 97       	sbiw	r28, 0x34	; 52
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    2f0e:	be 01       	movw	r22, r28
    2f10:	6c 5c       	subi	r22, 0xCC	; 204
    2f12:	7f 4f       	sbci	r23, 0xFF	; 255
    2f14:	ce 01       	movw	r24, r28
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	0e 94 aa 1a 	call	0x3554	; 0x3554 <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    2f1c:	6c a9       	ldd	r22, Y+52	; 0x34
    2f1e:	ce 01       	movw	r24, r28
    2f20:	01 96       	adiw	r24, 0x01	; 1
    2f22:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <LM_send_uplink>
}
    2f26:	e4 96       	adiw	r28, 0x34	; 52
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	f8 94       	cli
    2f2c:	de bf       	out	0x3e, r29	; 62
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	08 95       	ret

Disassembly of section .text.stage_0:

00001848 <stage_0>:
/************************************************************************/
static STAGE_STATUS stage_0(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
    1848:	80 91 b9 0d 	lds	r24, 0x0DB9	; 0x800db9 <state_s0>
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	29 f1       	breq	.+74     	; 0x189a <stage_0+0x52>
    1850:	28 f4       	brcc	.+10     	; 0x185c <stage_0+0x14>
    1852:	88 23       	and	r24, r24
    1854:	51 f0       	breq	.+20     	; 0x186a <stage_0+0x22>
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	c1 f0       	breq	.+48     	; 0x188a <stage_0+0x42>
    185a:	f6 cf       	rjmp	.-20     	; 0x1848 <stage_0>
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	09 f4       	brne	.+2      	; 0x1862 <stage_0+0x1a>
    1860:	4e c0       	rjmp	.+156    	; 0x18fe <stage_0+0xb6>
    1862:	30 f1       	brcs	.+76     	; 0x18b0 <stage_0+0x68>
    1864:	85 30       	cpi	r24, 0x05	; 5
    1866:	81 f1       	breq	.+96     	; 0x18c8 <stage_0+0x80>
    1868:	ef cf       	rjmp	.-34     	; 0x1848 <stage_0>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
    186a:	e2 e5       	ldi	r30, 0x52	; 82
    186c:	fd e0       	ldi	r31, 0x0D	; 13
    186e:	60 81       	ld	r22, Z
    1870:	71 81       	ldd	r23, Z+1	; 0x01
    1872:	4a e6       	ldi	r20, 0x6A	; 106
    1874:	59 e0       	ldi	r21, 0x09	; 9
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	0e 94 b8 14 	call	0x2970	; 0x2970 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    187e:	81 11       	cpse	r24, r1
    1880:	42 c0       	rjmp	.+132    	; 0x1906 <stage_0+0xbe>
			
				state_s0=STAGE_GET_TIME;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <state_s0>
			break;
    1888:	df cf       	rjmp	.-66     	; 0x1848 <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    188a:	85 e7       	ldi	r24, 0x75	; 117
    188c:	9d e0       	ldi	r25, 0x0D	; 13
    188e:	0e 94 a8 07 	call	0xf50	; 0xf50 <RTC_get_current_time>
				state_s0=STAGE_START;
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <state_s0>
			break;
    1898:	d7 cf       	rjmp	.-82     	; 0x1848 <stage_0>
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	0e 94 0d 1b 	call	0x361a	; 0x361a <ADC_meth_sens_power_on>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    18a0:	81 11       	cpse	r24, r1
    18a2:	33 c0       	rjmp	.+102    	; 0x190a <stage_0+0xc2>
			
				SCD30_start_sampling();
    18a4:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <state_s0>
			break;
    18ae:	cc cf       	rjmp	.-104    	; 0x1848 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    18b0:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <ADC_meth_sens_ready>
    18b4:	88 23       	and	r24, r24
    18b6:	59 f1       	breq	.+86     	; 0x190e <stage_0+0xc6>
    18b8:	0e 94 91 1b 	call	0x3722	; 0x3722 <SCD30_is_sampling_done>
    18bc:	88 23       	and	r24, r24
    18be:	49 f1       	breq	.+82     	; 0x1912 <stage_0+0xca>
				state_s0=STAGE_UPDATE_MRPP;
    18c0:	85 e0       	ldi	r24, 0x05	; 5
    18c2:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <state_s0>
			break;
    18c6:	c0 cf       	rjmp	.-128    	; 0x1848 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    18c8:	2c e8       	ldi	r18, 0x8C	; 140
    18ca:	3d e0       	ldi	r19, 0x0D	; 13
    18cc:	40 91 75 0d 	lds	r20, 0x0D75	; 0x800d75 <dt>
    18d0:	50 91 76 0d 	lds	r21, 0x0D76	; 0x800d76 <dt+0x1>
    18d4:	60 91 77 0d 	lds	r22, 0x0D77	; 0x800d77 <dt+0x2>
    18d8:	70 91 78 0d 	lds	r23, 0x0D78	; 0x800d78 <dt+0x3>
    18dc:	80 91 79 0d 	lds	r24, 0x0D79	; 0x800d79 <dt+0x4>
    18e0:	90 91 7a 0d 	lds	r25, 0x0D7A	; 0x800d7a <dt+0x5>
    18e4:	0e 94 48 08 	call	0x1090	; 0x1090 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(1, ts, co2_data);
    18e8:	4a e6       	ldi	r20, 0x6A	; 106
    18ea:	59 e0       	ldi	r21, 0x09	; 9
    18ec:	6c e8       	ldi	r22, 0x8C	; 140
    18ee:	7d e0       	ldi	r23, 0x0D	; 13
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    18f6:	84 e0       	ldi	r24, 0x04	; 4
    18f8:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <state_s0>
			break;
    18fc:	a5 cf       	rjmp	.-182    	; 0x1848 <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    18fe:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <SCD30_deinit_sampling>
				return STAGE_DONE;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s0){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[0].samplingInterval, cols[0].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1906:	83 e0       	ldi	r24, 0x03	; 3
    1908:	08 95       	ret
				state_s0=STAGE_START;
			break;
			
			case STAGE_START:
				adcStatus=ADC_meth_sens_power_on(1); //Should be changed
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	08 95       	ret
    1912:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    1914:	08 95       	ret

Disassembly of section .text.stage_1:

000014ce <stage_1>:
/************************************************************************/
static STAGE_STATUS stage_1(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
    14ce:	80 91 b8 0d 	lds	r24, 0x0DB8	; 0x800db8 <state_s1>
    14d2:	82 30       	cpi	r24, 0x02	; 2
    14d4:	81 f1       	breq	.+96     	; 0x1536 <stage_1+0x68>
    14d6:	28 f4       	brcc	.+10     	; 0x14e2 <stage_1+0x14>
    14d8:	88 23       	and	r24, r24
    14da:	51 f0       	breq	.+20     	; 0x14f0 <stage_1+0x22>
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	19 f1       	breq	.+70     	; 0x1526 <stage_1+0x58>
    14e0:	f6 cf       	rjmp	.-20     	; 0x14ce <stage_1>
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <stage_1+0x1a>
    14e6:	5d c0       	rjmp	.+186    	; 0x15a2 <stage_1+0xd4>
    14e8:	70 f1       	brcs	.+92     	; 0x1546 <stage_1+0x78>
    14ea:	85 30       	cpi	r24, 0x05	; 5
    14ec:	c1 f1       	breq	.+112    	; 0x155e <stage_1+0x90>
    14ee:	ef cf       	rjmp	.-34     	; 0x14ce <stage_1>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
    14f0:	e2 e5       	ldi	r30, 0x52	; 82
    14f2:	fd e0       	ldi	r31, 0x0D	; 13
    14f4:	65 81       	ldd	r22, Z+5	; 0x05
    14f6:	76 81       	ldd	r23, Z+6	; 0x06
    14f8:	4a e6       	ldi	r20, 0x6A	; 106
    14fa:	59 e0       	ldi	r21, 0x09	; 9
    14fc:	87 81       	ldd	r24, Z+7	; 0x07
    14fe:	90 85       	ldd	r25, Z+8	; 0x08
    1500:	0e 94 b8 14 	call	0x2970	; 0x2970 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1504:	81 11       	cpse	r24, r1
    1506:	53 c0       	rjmp	.+166    	; 0x15ae <stage_1+0xe0>
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
    1508:	e2 e5       	ldi	r30, 0x52	; 82
    150a:	fd e0       	ldi	r31, 0x0D	; 13
    150c:	62 85       	ldd	r22, Z+10	; 0x0a
    150e:	73 85       	ldd	r23, Z+11	; 0x0b
    1510:	42 e1       	ldi	r20, 0x12	; 18
    1512:	57 e0       	ldi	r21, 0x07	; 7
    1514:	84 85       	ldd	r24, Z+12	; 0x0c
    1516:	0e 94 aa 12 	call	0x2554	; 0x2554 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    151a:	81 11       	cpse	r24, r1
    151c:	4a c0       	rjmp	.+148    	; 0x15b2 <stage_1+0xe4>
				
				state_s1=STAGE_GET_TIME;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <state_s1>
			break;
    1524:	d4 cf       	rjmp	.-88     	; 0x14ce <stage_1>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1526:	85 e7       	ldi	r24, 0x75	; 117
    1528:	9d e0       	ldi	r25, 0x0D	; 13
    152a:	0e 94 a8 07 	call	0xf50	; 0xf50 <RTC_get_current_time>
				
				state_s1=STAGE_START;
    152e:	82 e0       	ldi	r24, 0x02	; 2
    1530:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <state_s1>
			break;
    1534:	cc cf       	rjmp	.-104    	; 0x14ce <stage_1>
			
			case STAGE_START:
				SCD30_start_sampling();
    1536:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <SCD30_start_sampling>
				ADC_start_sampling();
    153a:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <state_s1>
			break;
    1544:	c4 cf       	rjmp	.-120    	; 0x14ce <stage_1>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1546:	0e 94 91 1b 	call	0x3722	; 0x3722 <SCD30_is_sampling_done>
    154a:	88 23       	and	r24, r24
    154c:	a1 f1       	breq	.+104    	; 0x15b6 <stage_1+0xe8>
    154e:	0e 94 4b 1b 	call	0x3696	; 0x3696 <ADC_is_sampling_done>
    1552:	88 23       	and	r24, r24
    1554:	91 f1       	breq	.+100    	; 0x15ba <stage_1+0xec>
				state_s1=STAGE_UPDATE_MRPP;
    1556:	85 e0       	ldi	r24, 0x05	; 5
    1558:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <state_s1>
			break;
    155c:	b8 cf       	rjmp	.-144    	; 0x14ce <stage_1>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    155e:	2c e8       	ldi	r18, 0x8C	; 140
    1560:	3d e0       	ldi	r19, 0x0D	; 13
    1562:	40 91 75 0d 	lds	r20, 0x0D75	; 0x800d75 <dt>
    1566:	50 91 76 0d 	lds	r21, 0x0D76	; 0x800d76 <dt+0x1>
    156a:	60 91 77 0d 	lds	r22, 0x0D77	; 0x800d77 <dt+0x2>
    156e:	70 91 78 0d 	lds	r23, 0x0D78	; 0x800d78 <dt+0x3>
    1572:	80 91 79 0d 	lds	r24, 0x0D79	; 0x800d79 <dt+0x4>
    1576:	90 91 7a 0d 	lds	r25, 0x0D7A	; 0x800d7a <dt+0x5>
    157a:	0e 94 48 08 	call	0x1090	; 0x1090 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(2, ts, co2_data);
    157e:	4a e6       	ldi	r20, 0x6A	; 106
    1580:	59 e0       	ldi	r21, 0x09	; 9
    1582:	6c e8       	ldi	r22, 0x8C	; 140
    1584:	7d e0       	ldi	r23, 0x0D	; 13
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(3, ts, meth_data);
    158c:	42 e1       	ldi	r20, 0x12	; 18
    158e:	57 e0       	ldi	r21, 0x07	; 7
    1590:	6c e8       	ldi	r22, 0x8C	; 140
    1592:	7d e0       	ldi	r23, 0x0D	; 13
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    159a:	84 e0       	ldi	r24, 0x04	; 4
    159c:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <state_s1>
			break;
    15a0:	96 cf       	rjmp	.-212    	; 0x14ce <stage_1>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    15a2:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    15a6:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <ADC_deinit_sampling>
				return STAGE_DONE;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	08 95       	ret
	SCD30_STATUS scd30Status;
	while(1){
		switch(state_s1){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[1].samplingInterval, cols[1].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	08 95       	ret
				
				adcStatus=ADC_init_sampling(cols[2].samplingInterval, cols[2].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	08 95       	ret
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	08 95       	ret
    15ba:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    15bc:	08 95       	ret

Disassembly of section .text.stage_2:

000012cc <stage_2>:
static STAGE_STATUS stage_2(){
	ADC_STATUS adcStatus;
	SCD30_STATUS scd30Status;
	uint16_t seconds=10;
	while(1){
		switch(state_s2){
    12cc:	80 91 b7 0d 	lds	r24, 0x0DB7	; 0x800db7 <state_s2>
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	89 f1       	breq	.+98     	; 0x1336 <stage_2+0x6a>
    12d4:	28 f4       	brcc	.+10     	; 0x12e0 <stage_2+0x14>
    12d6:	88 23       	and	r24, r24
    12d8:	59 f0       	breq	.+22     	; 0x12f0 <stage_2+0x24>
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	21 f1       	breq	.+72     	; 0x1326 <stage_2+0x5a>
    12de:	f6 cf       	rjmp	.-20     	; 0x12cc <stage_2>
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <stage_2+0x1a>
    12e4:	66 c0       	rjmp	.+204    	; 0x13b2 <stage_2+0xe6>
    12e6:	98 f1       	brcs	.+102    	; 0x134e <stage_2+0x82>
    12e8:	85 30       	cpi	r24, 0x05	; 5
    12ea:	09 f4       	brne	.+2      	; 0x12ee <stage_2+0x22>
    12ec:	40 c0       	rjmp	.+128    	; 0x136e <stage_2+0xa2>
    12ee:	ee cf       	rjmp	.-36     	; 0x12cc <stage_2>
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[3].samplingInterval, cols[3].samplings, co2_data);
    12f0:	e2 e5       	ldi	r30, 0x52	; 82
    12f2:	fd e0       	ldi	r31, 0x0D	; 13
    12f4:	67 85       	ldd	r22, Z+15	; 0x0f
    12f6:	70 89       	ldd	r23, Z+16	; 0x10
    12f8:	4a e6       	ldi	r20, 0x6A	; 106
    12fa:	59 e0       	ldi	r21, 0x09	; 9
    12fc:	81 89       	ldd	r24, Z+17	; 0x11
    12fe:	92 89       	ldd	r25, Z+18	; 0x12
    1300:	0e 94 b8 14 	call	0x2970	; 0x2970 <SCD30_init_sampling>
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1304:	81 11       	cpse	r24, r1
    1306:	5b c0       	rjmp	.+182    	; 0x13be <stage_2+0xf2>
			
				adcStatus=ADC_init_sampling(cols[4].samplingInterval, cols[4].samplings, meth_data);
    1308:	e2 e5       	ldi	r30, 0x52	; 82
    130a:	fd e0       	ldi	r31, 0x0D	; 13
    130c:	64 89       	ldd	r22, Z+20	; 0x14
    130e:	75 89       	ldd	r23, Z+21	; 0x15
    1310:	42 e1       	ldi	r20, 0x12	; 18
    1312:	57 e0       	ldi	r21, 0x07	; 7
    1314:	86 89       	ldd	r24, Z+22	; 0x16
    1316:	0e 94 aa 12 	call	0x2554	; 0x2554 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    131a:	81 11       	cpse	r24, r1
    131c:	52 c0       	rjmp	.+164    	; 0x13c2 <stage_2+0xf6>
			
				state_s2=STAGE_GET_TIME;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <state_s2>
			break;
    1324:	d3 cf       	rjmp	.-90     	; 0x12cc <stage_2>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1326:	85 e7       	ldi	r24, 0x75	; 117
    1328:	9d e0       	ldi	r25, 0x0D	; 13
    132a:	0e 94 a8 07 	call	0xf50	; 0xf50 <RTC_get_current_time>
			
				state_s2=STAGE_START;
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <state_s2>
			break;
    1334:	cb cf       	rjmp	.-106    	; 0x12cc <stage_2>
			
			case STAGE_START:
				SCD30_start_sampling();
    1336:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <SCD30_start_sampling>
				ADC_start_sampling();
    133a:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <ADC_start_sampling>
				PUMP_start(seconds);
    133e:	8a e0       	ldi	r24, 0x0A	; 10
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 76 1a 	call	0x34ec	; 0x34ec <PUMP_start>
			
				state_s2=STAGE_WAIT;
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <state_s2>
			break;
    134c:	bf cf       	rjmp	.-130    	; 0x12cc <stage_2>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    134e:	0e 94 91 1b 	call	0x3722	; 0x3722 <SCD30_is_sampling_done>
    1352:	88 23       	and	r24, r24
    1354:	c1 f1       	breq	.+112    	; 0x13c6 <stage_2+0xfa>
    1356:	0e 94 4b 1b 	call	0x3696	; 0x3696 <ADC_is_sampling_done>
    135a:	88 23       	and	r24, r24
    135c:	b1 f1       	breq	.+108    	; 0x13ca <stage_2+0xfe>
    135e:	0e 94 83 1b 	call	0x3706	; 0x3706 <PUMP_is_done>
    1362:	88 23       	and	r24, r24
    1364:	a1 f1       	breq	.+104    	; 0x13ce <stage_2+0x102>
				state_s2=STAGE_UPDATE_MRPP;
    1366:	85 e0       	ldi	r24, 0x05	; 5
    1368:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <state_s2>
			break;
    136c:	af cf       	rjmp	.-162    	; 0x12cc <stage_2>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    136e:	2c e8       	ldi	r18, 0x8C	; 140
    1370:	3d e0       	ldi	r19, 0x0D	; 13
    1372:	40 91 75 0d 	lds	r20, 0x0D75	; 0x800d75 <dt>
    1376:	50 91 76 0d 	lds	r21, 0x0D76	; 0x800d76 <dt+0x1>
    137a:	60 91 77 0d 	lds	r22, 0x0D77	; 0x800d77 <dt+0x2>
    137e:	70 91 78 0d 	lds	r23, 0x0D78	; 0x800d78 <dt+0x3>
    1382:	80 91 79 0d 	lds	r24, 0x0D79	; 0x800d79 <dt+0x4>
    1386:	90 91 7a 0d 	lds	r25, 0x0D7A	; 0x800d7a <dt+0x5>
    138a:	0e 94 48 08 	call	0x1090	; 0x1090 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(4, ts, co2_data);
    138e:	4a e6       	ldi	r20, 0x6A	; 106
    1390:	59 e0       	ldi	r21, 0x09	; 9
    1392:	6c e8       	ldi	r22, 0x8C	; 140
    1394:	7d e0       	ldi	r23, 0x0D	; 13
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(5, ts, meth_data);
    139c:	42 e1       	ldi	r20, 0x12	; 18
    139e:	57 e0       	ldi	r21, 0x07	; 7
    13a0:	6c e8       	ldi	r22, 0x8C	; 140
    13a2:	7d e0       	ldi	r23, 0x0D	; 13
    13a4:	85 e0       	ldi	r24, 0x05	; 5
    13a6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    13aa:	84 e0       	ldi	r24, 0x04	; 4
    13ac:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <state_s2>
			break;
    13b0:	8d cf       	rjmp	.-230    	; 0x12cc <stage_2>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    13b2:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    13b6:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <ADC_deinit_sampling>
				return STAGE_DONE;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	08 95       	ret
	uint16_t seconds=10;
	while(1){
		switch(state_s2){
			case STAGE_INIT:
				scd30Status=SCD30_init_sampling(cols[3].samplingInterval, cols[3].samplings, co2_data);
				if(scd30Status!=SCD30_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    13be:	83 e0       	ldi	r24, 0x03	; 3
    13c0:	08 95       	ret
			
				adcStatus=ADC_init_sampling(cols[4].samplingInterval, cols[4].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	08 95       	ret
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	08 95       	ret
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	08 95       	ret
    13ce:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    13d0:	08 95       	ret

Disassembly of section .text.send_body:

00002eba <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	e4 97       	sbiw	r28, 0x34	; 52
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    2ece:	ae 01       	movw	r20, r28
    2ed0:	4c 5c       	subi	r20, 0xCC	; 204
    2ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed4:	be 01       	movw	r22, r28
    2ed6:	6f 5f       	subi	r22, 0xFF	; 255
    2ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eda:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    2ede:	6c a9       	ldd	r22, Y+52	; 0x34
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	01 96       	adiw	r24, 0x01	; 1
    2ee4:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <LM_send_uplink>
}
    2ee8:	e4 96       	adiw	r28, 0x34	; 52
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	08 95       	ret

Disassembly of section .text.decode_body_response:

000034a0 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    34a0:	cf 93       	push	r28
	switch(status){
    34a2:	63 30       	cpi	r22, 0x03	; 3
    34a4:	71 f0       	breq	.+28     	; 0x34c2 <decode_body_response+0x22>
    34a6:	18 f4       	brcc	.+6      	; 0x34ae <decode_body_response+0xe>
    34a8:	66 23       	and	r22, r22
    34aa:	31 f0       	breq	.+12     	; 0x34b8 <decode_body_response+0x18>
    34ac:	03 c0       	rjmp	.+6      	; 0x34b4 <decode_body_response+0x14>
    34ae:	65 50       	subi	r22, 0x05	; 5
    34b0:	62 30       	cpi	r22, 0x02	; 2
    34b2:	10 f0       	brcs	.+4      	; 0x34b8 <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    34b4:	82 e1       	ldi	r24, 0x12	; 18
    34b6:	06 c0       	rjmp	.+12     	; 0x34c4 <decode_body_response+0x24>
    34b8:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    34ba:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <MRPP_set_body_sent>
			return success;
    34be:	8c 2f       	mov	r24, r28
    34c0:	01 c0       	rjmp	.+2      	; 0x34c4 <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    34c2:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    34c4:	cf 91       	pop	r28
    34c6:	08 95       	ret

Disassembly of section .text.send_tail:

00002f38 <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	e4 97       	sbiw	r28, 0x34	; 52
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    2f4c:	be 01       	movw	r22, r28
    2f4e:	6c 5c       	subi	r22, 0xCC	; 204
    2f50:	7f 4f       	sbci	r23, 0xFF	; 255
    2f52:	ce 01       	movw	r24, r28
    2f54:	01 96       	adiw	r24, 0x01	; 1
    2f56:	0e 94 bb 1a 	call	0x3576	; 0x3576 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    2f5a:	6c a9       	ldd	r22, Y+52	; 0x34
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <LM_send_uplink>
}
    2f64:	e4 96       	adiw	r28, 0x34	; 52
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	08 95       	ret

Disassembly of section .text.send_msg:

000037ee <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart0_hal_send_string(msg);
    37ee:	0e 94 0c 12 	call	0x2418	; 0x2418 <uart0_hal_send_string>
    37f2:	2f ef       	ldi	r18, 0xFF	; 255
    37f4:	80 e7       	ldi	r24, 0x70	; 112
    37f6:	92 e0       	ldi	r25, 0x02	; 2
    37f8:	21 50       	subi	r18, 0x01	; 1
    37fa:	80 40       	sbci	r24, 0x00	; 0
    37fc:	90 40       	sbci	r25, 0x00	; 0
    37fe:	e1 f7       	brne	.-8      	; 0x37f8 <send_msg+0xa>
    3800:	00 c0       	rjmp	.+0      	; 0x3802 <send_msg+0x14>
    3802:	00 00       	nop
    3804:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00000a14 <MAINPG_start>:
static uint8_t colsNumber=5;

static void send_msg(const char msg[]);


void MAINPG_start(){
 a14:	1f 93       	push	r17
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	STAGE_STATUS stageStatus;
	//bool fromSleep=false;
	bool fromSleep=true;
 a1a:	11 e0       	ldi	r17, 0x01	; 1

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
 a1c:	c0 e0       	ldi	r28, 0x00	; 0
 a1e:	10 c0       	rjmp	.+32     	; 0xa40 <MAINPG_start+0x2c>
				
				//Set pull up
				set_bit(PORTB, 0);
				set_bit(PORTB, 1);
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a20:	c4 e0       	ldi	r28, 0x04	; 4
 a22:	0e c0       	rjmp	.+28     	; 0xa40 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 a24:	c2 e1       	ldi	r28, 0x12	; 18
 a26:	0c c0       	rjmp	.+24     	; 0xa40 <MAINPG_start+0x2c>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 a28:	c2 e1       	ldi	r28, 0x12	; 18
 a2a:	0a c0       	rjmp	.+20     	; 0xa40 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 a2c:	c2 e1       	ldi	r28, 0x12	; 18
 a2e:	08 c0       	rjmp	.+16     	; 0xa40 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 a30:	c2 e1       	ldi	r28, 0x12	; 18
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <MAINPG_start+0x2c>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
 a34:	cd 2f       	mov	r28, r29
 a36:	04 c0       	rjmp	.+8      	; 0xa40 <MAINPG_start+0x2c>
 a38:	cd 2f       	mov	r28, r29
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
 a3c:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
 a3e:	cd e0       	ldi	r28, 0x0D	; 13
	//bool fromSleep=false;
	bool fromSleep=true;
	
	
	while(1){
		switch(state){
 a40:	ec 2f       	mov	r30, r28
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	e4 31       	cpi	r30, 0x14	; 20
 a46:	f1 05       	cpc	r31, r1
 a48:	d8 f7       	brcc	.-10     	; 0xa40 <MAINPG_start+0x2c>
 a4a:	eb 5a       	subi	r30, 0xAB	; 171
 a4c:	ff 4f       	sbci	r31, 0xFF	; 255
 a4e:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
 a52:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <uart0_hal_init>
				uart1_hal_init();
 a56:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <uart1_hal_init>
				TWI_HAL_init();
 a5a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <TWI_HAL_init>
				TC2_HAL_init();
 a5e:	0e 94 ed 1a 	call	0x35da	; 0x35da <TC2_HAL_init>
				PM_HAL_adc_power_init();
 a62:	0e 94 8a 1c 	call	0x3914	; 0x3914 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
 a66:	0e 94 91 1c 	call	0x3922	; 0x3922 <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
 a6a:	0e 94 9f 1c 	call	0x393e	; 0x393e <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
 a6e:	0e 94 98 1c 	call	0x3930	; 0x3930 <PM_HAL_SCD30_power_init>
				
				//Set pull up
				set_bit(PORTB, 0);
 a72:	85 b1       	in	r24, 0x05	; 5
 a74:	81 60       	ori	r24, 0x01	; 1
 a76:	85 b9       	out	0x05, r24	; 5
				set_bit(PORTB, 1);
 a78:	85 b1       	in	r24, 0x05	; 5
 a7a:	82 60       	ori	r24, 0x02	; 2
 a7c:	85 b9       	out	0x05, r24	; 5
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_LORA_JOIN_NETWORK;
 a7e:	11 11       	cpse	r17, r1
 a80:	cf cf       	rjmp	.-98     	; 0xa20 <MAINPG_start+0xc>
 a82:	c1 e0       	ldi	r28, 0x01	; 1
 a84:	dd cf       	rjmp	.-70     	; 0xa40 <MAINPG_start+0x2c>
			break;
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
 a86:	63 e9       	ldi	r22, 0x93	; 147
 a88:	71 e0       	ldi	r23, 0x01	; 1
 a8a:	80 e0       	ldi	r24, 0x00	; 0
 a8c:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				lmStatus=join_lora();
 a90:	0e 94 ac 10 	call	0x2158	; 0x2158 <join_lora>
				state=decode_join_response(lmStatus);
 a94:	0e 94 9f 1b 	call	0x373e	; 0x373e <decode_join_response>
 a98:	c8 2f       	mov	r28, r24
			break;
 a9a:	d2 cf       	rjmp	.-92     	; 0xa40 <MAINPG_start+0x2c>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
 a9c:	6a e9       	ldi	r22, 0x9A	; 154
 a9e:	71 e0       	ldi	r23, 0x01	; 1
 aa0:	80 e0       	ldi	r24, 0x00	; 0
 aa2:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				lmStatus=LM_wake_up();
 aa6:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 aaa:	81 11       	cpse	r24, r1
 aac:	bb cf       	rjmp	.-138    	; 0xa24 <MAINPG_start+0x10>
 aae:	c5 e0       	ldi	r28, 0x05	; 5
 ab0:	c7 cf       	rjmp	.-114    	; 0xa40 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
 ab2:	69 ea       	ldi	r22, 0xA9	; 169
 ab4:	71 e0       	ldi	r23, 0x01	; 1
 ab6:	80 e0       	ldi	r24, 0x00	; 0
 ab8:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
 abc:	2f ef       	ldi	r18, 0xFF	; 255
 abe:	81 e1       	ldi	r24, 0x11	; 17
 ac0:	9a e7       	ldi	r25, 0x7A	; 122
 ac2:	21 50       	subi	r18, 0x01	; 1
 ac4:	80 40       	sbci	r24, 0x00	; 0
 ac6:	90 40       	sbci	r25, 0x00	; 0
 ac8:	e1 f7       	brne	.-8      	; 0xac2 <MAINPG_start+0xae>
 aca:	00 c0       	rjmp	.+0      	; 0xacc <MAINPG_start+0xb8>
 acc:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
 ace:	c1 e0       	ldi	r28, 0x01	; 1
			break;
 ad0:	b7 cf       	rjmp	.-146    	; 0xa40 <MAINPG_start+0x2c>
			
			case MAINPG_LORA_JOIN_CONF_ERR:
				print_debug("Conf err\n\r");
 ad2:	65 eb       	ldi	r22, 0xB5	; 181
 ad4:	71 e0       	ldi	r23, 0x01	; 1
 ad6:	80 e0       	ldi	r24, 0x00	; 0
 ad8:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				state=MAINPG_END;
 adc:	c3 e1       	ldi	r28, 0x13	; 19
			break;
 ade:	b0 cf       	rjmp	.-160    	; 0xa40 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
 ae0:	60 ec       	ldi	r22, 0xC0	; 192
 ae2:	71 e0       	ldi	r23, 0x01	; 1
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				rtcStatus=RTC_set_clock_out(1);
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	0e 94 1b 14 	call	0x2836	; 0x2836 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 af0:	81 11       	cpse	r24, r1
 af2:	9a cf       	rjmp	.-204    	; 0xa28 <MAINPG_start+0x14>
 af4:	c7 e0       	ldi	r28, 0x07	; 7
 af6:	a4 cf       	rjmp	.-184    	; 0xa40 <MAINPG_start+0x2c>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
 af8:	6b ec       	ldi	r22, 0xCB	; 203
 afa:	71 e0       	ldi	r23, 0x01	; 1
 afc:	80 e0       	ldi	r24, 0x00	; 0
 afe:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
 b02:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 b06:	81 11       	cpse	r24, r1
 b08:	91 cf       	rjmp	.-222    	; 0xa2c <MAINPG_start+0x18>
 b0a:	c6 e0       	ldi	r28, 0x06	; 6
 b0c:	99 cf       	rjmp	.-206    	; 0xa40 <MAINPG_start+0x2c>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
 b0e:	6d ed       	ldi	r22, 0xDD	; 221
 b10:	71 e0       	ldi	r23, 0x01	; 1
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				rtcStatus=set_wakeup();
 b18:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 b1c:	81 11       	cpse	r24, r1
 b1e:	88 cf       	rjmp	.-240    	; 0xa30 <MAINPG_start+0x1c>
 b20:	c8 e0       	ldi	r28, 0x08	; 8
 b22:	8e cf       	rjmp	.-228    	; 0xa40 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
 b24:	62 ef       	ldi	r22, 0xF2	; 242
 b26:	71 e0       	ldi	r23, 0x01	; 1
 b28:	80 e0       	ldi	r24, 0x00	; 0
 b2a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				MRPP_init_group(cols, colsNumber);
 b2e:	65 e0       	ldi	r22, 0x05	; 5
 b30:	82 e5       	ldi	r24, 0x52	; 82
 b32:	9d e0       	ldi	r25, 0x0D	; 13
 b34:	0e 94 38 19 	call	0x3270	; 0x3270 <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
 b38:	c9 e0       	ldi	r28, 0x09	; 9
			break;
 b3a:	82 cf       	rjmp	.-252    	; 0xa40 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
 b3c:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LM_is_free>
 b40:	88 23       	and	r24, r24
 b42:	09 f4       	brne	.+2      	; 0xb46 <MAINPG_start+0x132>
 b44:	7d cf       	rjmp	.-262    	; 0xa40 <MAINPG_start+0x2c>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
 b46:	0e 94 7d 17 	call	0x2efa	; 0x2efa <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
 b4a:	49 e0       	ldi	r20, 0x09	; 9
 b4c:	6a e0       	ldi	r22, 0x0A	; 10
 b4e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <decode_header_tail_response>
 b52:	c8 2f       	mov	r28, r24
				//state=decode_header_tail_response(lmStatus, MAINPG_STAGE_2, MAINPG_SEND_HEADER);
			break;
 b54:	75 cf       	rjmp	.-278    	; 0xa40 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
 b56:	0e 94 24 0c 	call	0x1848	; 0x1848 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 b5a:	6b e0       	ldi	r22, 0x0B	; 11
 b5c:	0e 94 03 1c 	call	0x3806	; 0x3806 <decode_stage_response>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
				//state=decode_header_tail_response(lmStatus, MAINPG_STAGE_2, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
 b60:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 b62:	c8 2f       	mov	r28, r24
			break;
 b64:	6d cf       	rjmp	.-294    	; 0xa40 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
 b66:	0e 94 67 0a 	call	0x14ce	; 0x14ce <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 b6a:	6c e0       	ldi	r22, 0x0C	; 12
 b6c:	0e 94 03 1c 	call	0x3806	; 0x3806 <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
 b70:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 b72:	c8 2f       	mov	r28, r24
			break;
 b74:	65 cf       	rjmp	.-310    	; 0xa40 <MAINPG_start+0x2c>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
 b76:	0e 94 66 09 	call	0x12cc	; 0x12cc <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 b7a:	6e e0       	ldi	r22, 0x0E	; 14
 b7c:	0e 94 03 1c 	call	0x3806	; 0x3806 <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
 b80:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 b82:	c8 2f       	mov	r28, r24
			break;
 b84:	5d cf       	rjmp	.-326    	; 0xa40 <MAINPG_start+0x2c>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
 b86:	84 ea       	ldi	r24, 0xA4	; 164
 b88:	9d e0       	ldi	r25, 0x0D	; 13
 b8a:	0e 94 99 1a 	call	0x3532	; 0x3532 <MRPP_is_body_package_ready>
 b8e:	88 23       	and	r24, r24
 b90:	09 f4       	brne	.+2      	; 0xb94 <MAINPG_start+0x180>
 b92:	50 cf       	rjmp	.-352    	; 0xa34 <MAINPG_start+0x20>
 b94:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LM_is_free>
 b98:	88 23       	and	r24, r24
 b9a:	09 f4       	brne	.+2      	; 0xb9e <MAINPG_start+0x18a>
 b9c:	4d cf       	rjmp	.-358    	; 0xa38 <MAINPG_start+0x24>
					lmStatus=send_body(bodyIndex);
 b9e:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <bodyIndex>
 ba2:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <bodyIndex+0x1>
 ba6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
 baa:	4d 2f       	mov	r20, r29
 bac:	68 2f       	mov	r22, r24
 bae:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <bodyIndex>
 bb2:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <bodyIndex+0x1>
 bb6:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <decode_body_response>
 bba:	c8 2f       	mov	r28, r24
 bbc:	41 cf       	rjmp	.-382    	; 0xa40 <MAINPG_start+0x2c>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
 bbe:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <MRPP_all_body_package_sent>
 bc2:	88 23       	and	r24, r24
 bc4:	09 f4       	brne	.+2      	; 0xbc8 <MAINPG_start+0x1b4>
 bc6:	3a cf       	rjmp	.-396    	; 0xa3c <MAINPG_start+0x28>
					state=MAINPG_SEND_TAIL;
 bc8:	cf e0       	ldi	r28, 0x0F	; 15
 bca:	3a cf       	rjmp	.-396    	; 0xa40 <MAINPG_start+0x2c>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
 bcc:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LM_is_free>
 bd0:	88 23       	and	r24, r24
 bd2:	09 f4       	brne	.+2      	; 0xbd6 <MAINPG_start+0x1c2>
 bd4:	35 cf       	rjmp	.-406    	; 0xa40 <MAINPG_start+0x2c>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
 bd6:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
 bda:	4f e0       	ldi	r20, 0x0F	; 15
 bdc:	60 e1       	ldi	r22, 0x10	; 16
 bde:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <decode_header_tail_response>
 be2:	c8 2f       	mov	r28, r24
				
			break;
 be4:	2d cf       	rjmp	.-422    	; 0xa40 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
 be6:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
 bea:	11 e0       	ldi	r17, 0x01	; 1
 bec:	81 11       	cpse	r24, r1
 bee:	10 e0       	ldi	r17, 0x00	; 0
				
				state=MAINPG_SLEEP;
 bf0:	c1 e1       	ldi	r28, 0x11	; 17
			break;
 bf2:	26 cf       	rjmp	.-436    	; 0xa40 <MAINPG_start+0x2c>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
 bf4:	6e ef       	ldi	r22, 0xFE	; 254
 bf6:	71 e0       	ldi	r23, 0x01	; 1
 bf8:	80 e0       	ldi	r24, 0x00	; 0
 bfa:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				PM_HAL_enter_power_down();
 bfe:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
 c02:	66 e0       	ldi	r22, 0x06	; 6
 c04:	72 e0       	ldi	r23, 0x02	; 2
 c06:	80 e0       	ldi	r24, 0x00	; 0
 c08:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				state=MAINPG_INIT_HW;
 c0c:	c0 e0       	ldi	r28, 0x00	; 0
			break;
 c0e:	18 cf       	rjmp	.-464    	; 0xa40 <MAINPG_start+0x2c>
			
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
 c10:	6e e0       	ldi	r22, 0x0E	; 14
 c12:	72 e0       	ldi	r23, 0x02	; 2
 c14:	80 e0       	ldi	r24, 0x00	; 0
 c16:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				state=MAINPG_END;
 c1a:	c3 e1       	ldi	r28, 0x13	; 19
			break;
 c1c:	11 cf       	rjmp	.-478    	; 0xa40 <MAINPG_start+0x2c>
			
			case MAINPG_END:
				print_debug("END\n\r");
 c1e:	6c e1       	ldi	r22, 0x1C	; 28
 c20:	72 e0       	ldi	r23, 0x02	; 2
 c22:	80 e0       	ldi	r24, 0x00	; 0
 c24:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <send_msg>
				return;
			break;	
		}
	}
}
 c28:	df 91       	pop	r29
 c2a:	cf 91       	pop	r28
 c2c:	1f 91       	pop	r17
 c2e:	08 95       	ret

Disassembly of section .text.calc_crc8:

000030ce <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    30ce:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    30d0:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    30d2:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    30d4:	14 c0       	rjmp	.+40     	; 0x30fe <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    30d6:	fa 01       	movw	r30, r20
    30d8:	e3 0f       	add	r30, r19
    30da:	f1 1d       	adc	r31, r1
    30dc:	90 81       	ld	r25, Z
    30de:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    30e0:	28 e0       	ldi	r18, 0x08	; 8
    30e2:	0a c0       	rjmp	.+20     	; 0x30f8 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    30e4:	88 23       	and	r24, r24
    30e6:	34 f4       	brge	.+12     	; 0x30f4 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	91 e3       	ldi	r25, 0x31	; 49
    30f0:	89 27       	eor	r24, r25
    30f2:	01 c0       	rjmp	.+2      	; 0x30f6 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    30f4:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    30f6:	21 50       	subi	r18, 0x01	; 1
    30f8:	21 11       	cpse	r18, r1
    30fa:	f4 cf       	rjmp	.-24     	; 0x30e4 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    30fc:	3f 5f       	subi	r19, 0xFF	; 255
    30fe:	36 17       	cp	r19, r22
    3100:	50 f3       	brcs	.-44     	; 0x30d6 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    3102:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003968 <__subsf3>:
    3968:	50 58       	subi	r21, 0x80	; 128

0000396a <__addsf3>:
    396a:	bb 27       	eor	r27, r27
    396c:	aa 27       	eor	r26, r26
    396e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__addsf3x>
    3972:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001916 <__addsf3x>:
    1916:	11 c0       	rjmp	.+34     	; 0x193a <__addsf3x+0x24>
    1918:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__fp_pscA>
    191c:	38 f0       	brcs	.+14     	; 0x192c <__addsf3x+0x16>
    191e:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__fp_pscB>
    1922:	20 f0       	brcs	.+8      	; 0x192c <__addsf3x+0x16>
    1924:	39 f4       	brne	.+14     	; 0x1934 <__addsf3x+0x1e>
    1926:	9f 3f       	cpi	r25, 0xFF	; 255
    1928:	19 f4       	brne	.+6      	; 0x1930 <__addsf3x+0x1a>
    192a:	26 f4       	brtc	.+8      	; 0x1934 <__addsf3x+0x1e>
    192c:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__fp_nan>
    1930:	0e f4       	brtc	.+2      	; 0x1934 <__addsf3x+0x1e>
    1932:	e0 95       	com	r30
    1934:	e7 fb       	bst	r30, 7
    1936:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__fp_inf>
    193a:	e9 2f       	mov	r30, r25
    193c:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_split3>
    1940:	58 f3       	brcs	.-42     	; 0x1918 <__addsf3x+0x2>
    1942:	ba 17       	cp	r27, r26
    1944:	62 07       	cpc	r22, r18
    1946:	73 07       	cpc	r23, r19
    1948:	84 07       	cpc	r24, r20
    194a:	95 07       	cpc	r25, r21
    194c:	20 f0       	brcs	.+8      	; 0x1956 <__addsf3x+0x40>
    194e:	79 f4       	brne	.+30     	; 0x196e <__addsf3x+0x58>
    1950:	a6 f5       	brtc	.+104    	; 0x19ba <__addsf3x+0xa4>
    1952:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__fp_zero>
    1956:	0e f4       	brtc	.+2      	; 0x195a <__addsf3x+0x44>
    1958:	e0 95       	com	r30
    195a:	0b 2e       	mov	r0, r27
    195c:	ba 2f       	mov	r27, r26
    195e:	a0 2d       	mov	r26, r0
    1960:	0b 01       	movw	r0, r22
    1962:	b9 01       	movw	r22, r18
    1964:	90 01       	movw	r18, r0
    1966:	0c 01       	movw	r0, r24
    1968:	ca 01       	movw	r24, r20
    196a:	a0 01       	movw	r20, r0
    196c:	11 24       	eor	r1, r1
    196e:	ff 27       	eor	r31, r31
    1970:	59 1b       	sub	r21, r25
    1972:	99 f0       	breq	.+38     	; 0x199a <__addsf3x+0x84>
    1974:	59 3f       	cpi	r21, 0xF9	; 249
    1976:	50 f4       	brcc	.+20     	; 0x198c <__addsf3x+0x76>
    1978:	50 3e       	cpi	r21, 0xE0	; 224
    197a:	68 f1       	brcs	.+90     	; 0x19d6 <__addsf3x+0xc0>
    197c:	1a 16       	cp	r1, r26
    197e:	f0 40       	sbci	r31, 0x00	; 0
    1980:	a2 2f       	mov	r26, r18
    1982:	23 2f       	mov	r18, r19
    1984:	34 2f       	mov	r19, r20
    1986:	44 27       	eor	r20, r20
    1988:	58 5f       	subi	r21, 0xF8	; 248
    198a:	f3 cf       	rjmp	.-26     	; 0x1972 <__addsf3x+0x5c>
    198c:	46 95       	lsr	r20
    198e:	37 95       	ror	r19
    1990:	27 95       	ror	r18
    1992:	a7 95       	ror	r26
    1994:	f0 40       	sbci	r31, 0x00	; 0
    1996:	53 95       	inc	r21
    1998:	c9 f7       	brne	.-14     	; 0x198c <__addsf3x+0x76>
    199a:	7e f4       	brtc	.+30     	; 0x19ba <__addsf3x+0xa4>
    199c:	1f 16       	cp	r1, r31
    199e:	ba 0b       	sbc	r27, r26
    19a0:	62 0b       	sbc	r22, r18
    19a2:	73 0b       	sbc	r23, r19
    19a4:	84 0b       	sbc	r24, r20
    19a6:	ba f0       	brmi	.+46     	; 0x19d6 <__addsf3x+0xc0>
    19a8:	91 50       	subi	r25, 0x01	; 1
    19aa:	a1 f0       	breq	.+40     	; 0x19d4 <__addsf3x+0xbe>
    19ac:	ff 0f       	add	r31, r31
    19ae:	bb 1f       	adc	r27, r27
    19b0:	66 1f       	adc	r22, r22
    19b2:	77 1f       	adc	r23, r23
    19b4:	88 1f       	adc	r24, r24
    19b6:	c2 f7       	brpl	.-16     	; 0x19a8 <__addsf3x+0x92>
    19b8:	0e c0       	rjmp	.+28     	; 0x19d6 <__addsf3x+0xc0>
    19ba:	ba 0f       	add	r27, r26
    19bc:	62 1f       	adc	r22, r18
    19be:	73 1f       	adc	r23, r19
    19c0:	84 1f       	adc	r24, r20
    19c2:	48 f4       	brcc	.+18     	; 0x19d6 <__addsf3x+0xc0>
    19c4:	87 95       	ror	r24
    19c6:	77 95       	ror	r23
    19c8:	67 95       	ror	r22
    19ca:	b7 95       	ror	r27
    19cc:	f7 95       	ror	r31
    19ce:	9e 3f       	cpi	r25, 0xFE	; 254
    19d0:	08 f0       	brcs	.+2      	; 0x19d4 <__addsf3x+0xbe>
    19d2:	b0 cf       	rjmp	.-160    	; 0x1934 <__addsf3x+0x1e>
    19d4:	93 95       	inc	r25
    19d6:	88 0f       	add	r24, r24
    19d8:	08 f0       	brcs	.+2      	; 0x19dc <__addsf3x+0xc6>
    19da:	99 27       	eor	r25, r25
    19dc:	ee 0f       	add	r30, r30
    19de:	97 95       	ror	r25
    19e0:	87 95       	ror	r24
    19e2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a54 <__divsf3>:
    3a54:	0e 94 df 0a 	call	0x15be	; 0x15be <__divsf3x>
    3a58:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000015be <__divsf3x>:
    15be:	10 c0       	rjmp	.+32     	; 0x15e0 <__divsf3x+0x22>
    15c0:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__fp_pscB>
    15c4:	58 f0       	brcs	.+22     	; 0x15dc <__divsf3x+0x1e>
    15c6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__fp_pscA>
    15ca:	40 f0       	brcs	.+16     	; 0x15dc <__divsf3x+0x1e>
    15cc:	29 f4       	brne	.+10     	; 0x15d8 <__divsf3x+0x1a>
    15ce:	5f 3f       	cpi	r21, 0xFF	; 255
    15d0:	29 f0       	breq	.+10     	; 0x15dc <__divsf3x+0x1e>
    15d2:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__fp_inf>
    15d6:	51 11       	cpse	r21, r1
    15d8:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__fp_szero>
    15dc:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__fp_nan>
    15e0:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_split3>
    15e4:	68 f3       	brcs	.-38     	; 0x15c0 <__divsf3x+0x2>

000015e6 <__divsf3_pse>:
    15e6:	99 23       	and	r25, r25
    15e8:	b1 f3       	breq	.-20     	; 0x15d6 <__divsf3x+0x18>
    15ea:	55 23       	and	r21, r21
    15ec:	91 f3       	breq	.-28     	; 0x15d2 <__divsf3x+0x14>
    15ee:	95 1b       	sub	r25, r21
    15f0:	55 0b       	sbc	r21, r21
    15f2:	bb 27       	eor	r27, r27
    15f4:	aa 27       	eor	r26, r26
    15f6:	62 17       	cp	r22, r18
    15f8:	73 07       	cpc	r23, r19
    15fa:	84 07       	cpc	r24, r20
    15fc:	38 f0       	brcs	.+14     	; 0x160c <__divsf3_pse+0x26>
    15fe:	9f 5f       	subi	r25, 0xFF	; 255
    1600:	5f 4f       	sbci	r21, 0xFF	; 255
    1602:	22 0f       	add	r18, r18
    1604:	33 1f       	adc	r19, r19
    1606:	44 1f       	adc	r20, r20
    1608:	aa 1f       	adc	r26, r26
    160a:	a9 f3       	breq	.-22     	; 0x15f6 <__divsf3_pse+0x10>
    160c:	35 d0       	rcall	.+106    	; 0x1678 <__divsf3_pse+0x92>
    160e:	0e 2e       	mov	r0, r30
    1610:	3a f0       	brmi	.+14     	; 0x1620 <__divsf3_pse+0x3a>
    1612:	e0 e8       	ldi	r30, 0x80	; 128
    1614:	32 d0       	rcall	.+100    	; 0x167a <__divsf3_pse+0x94>
    1616:	91 50       	subi	r25, 0x01	; 1
    1618:	50 40       	sbci	r21, 0x00	; 0
    161a:	e6 95       	lsr	r30
    161c:	00 1c       	adc	r0, r0
    161e:	ca f7       	brpl	.-14     	; 0x1612 <__divsf3_pse+0x2c>
    1620:	2b d0       	rcall	.+86     	; 0x1678 <__divsf3_pse+0x92>
    1622:	fe 2f       	mov	r31, r30
    1624:	29 d0       	rcall	.+82     	; 0x1678 <__divsf3_pse+0x92>
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	88 1f       	adc	r24, r24
    162c:	bb 1f       	adc	r27, r27
    162e:	26 17       	cp	r18, r22
    1630:	37 07       	cpc	r19, r23
    1632:	48 07       	cpc	r20, r24
    1634:	ab 07       	cpc	r26, r27
    1636:	b0 e8       	ldi	r27, 0x80	; 128
    1638:	09 f0       	breq	.+2      	; 0x163c <__divsf3_pse+0x56>
    163a:	bb 0b       	sbc	r27, r27
    163c:	80 2d       	mov	r24, r0
    163e:	bf 01       	movw	r22, r30
    1640:	ff 27       	eor	r31, r31
    1642:	93 58       	subi	r25, 0x83	; 131
    1644:	5f 4f       	sbci	r21, 0xFF	; 255
    1646:	3a f0       	brmi	.+14     	; 0x1656 <__divsf3_pse+0x70>
    1648:	9e 3f       	cpi	r25, 0xFE	; 254
    164a:	51 05       	cpc	r21, r1
    164c:	78 f0       	brcs	.+30     	; 0x166c <__divsf3_pse+0x86>
    164e:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__fp_inf>
    1652:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__fp_szero>
    1656:	5f 3f       	cpi	r21, 0xFF	; 255
    1658:	e4 f3       	brlt	.-8      	; 0x1652 <__divsf3_pse+0x6c>
    165a:	98 3e       	cpi	r25, 0xE8	; 232
    165c:	d4 f3       	brlt	.-12     	; 0x1652 <__divsf3_pse+0x6c>
    165e:	86 95       	lsr	r24
    1660:	77 95       	ror	r23
    1662:	67 95       	ror	r22
    1664:	b7 95       	ror	r27
    1666:	f7 95       	ror	r31
    1668:	9f 5f       	subi	r25, 0xFF	; 255
    166a:	c9 f7       	brne	.-14     	; 0x165e <__divsf3_pse+0x78>
    166c:	88 0f       	add	r24, r24
    166e:	91 1d       	adc	r25, r1
    1670:	96 95       	lsr	r25
    1672:	87 95       	ror	r24
    1674:	97 f9       	bld	r25, 7
    1676:	08 95       	ret
    1678:	e1 e0       	ldi	r30, 0x01	; 1
    167a:	66 0f       	add	r22, r22
    167c:	77 1f       	adc	r23, r23
    167e:	88 1f       	adc	r24, r24
    1680:	bb 1f       	adc	r27, r27
    1682:	62 17       	cp	r22, r18
    1684:	73 07       	cpc	r23, r19
    1686:	84 07       	cpc	r24, r20
    1688:	ba 07       	cpc	r27, r26
    168a:	20 f0       	brcs	.+8      	; 0x1694 <__divsf3_pse+0xae>
    168c:	62 1b       	sub	r22, r18
    168e:	73 0b       	sbc	r23, r19
    1690:	84 0b       	sbc	r24, r20
    1692:	ba 0b       	sbc	r27, r26
    1694:	ee 1f       	adc	r30, r30
    1696:	88 f7       	brcc	.-30     	; 0x167a <__divsf3_pse+0x94>
    1698:	e0 95       	com	r30
    169a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002676 <__fixunssfsi>:
    2676:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__fp_splitA>
    267a:	88 f0       	brcs	.+34     	; 0x269e <__fixunssfsi+0x28>
    267c:	9f 57       	subi	r25, 0x7F	; 127
    267e:	98 f0       	brcs	.+38     	; 0x26a6 <__fixunssfsi+0x30>
    2680:	b9 2f       	mov	r27, r25
    2682:	99 27       	eor	r25, r25
    2684:	b7 51       	subi	r27, 0x17	; 23
    2686:	b0 f0       	brcs	.+44     	; 0x26b4 <__fixunssfsi+0x3e>
    2688:	e1 f0       	breq	.+56     	; 0x26c2 <__fixunssfsi+0x4c>
    268a:	66 0f       	add	r22, r22
    268c:	77 1f       	adc	r23, r23
    268e:	88 1f       	adc	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	1a f0       	brmi	.+6      	; 0x269a <__fixunssfsi+0x24>
    2694:	ba 95       	dec	r27
    2696:	c9 f7       	brne	.-14     	; 0x268a <__fixunssfsi+0x14>
    2698:	14 c0       	rjmp	.+40     	; 0x26c2 <__fixunssfsi+0x4c>
    269a:	b1 30       	cpi	r27, 0x01	; 1
    269c:	91 f0       	breq	.+36     	; 0x26c2 <__fixunssfsi+0x4c>
    269e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__fp_zero>
    26a2:	b1 e0       	ldi	r27, 0x01	; 1
    26a4:	08 95       	ret
    26a6:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__fp_zero>
    26aa:	67 2f       	mov	r22, r23
    26ac:	78 2f       	mov	r23, r24
    26ae:	88 27       	eor	r24, r24
    26b0:	b8 5f       	subi	r27, 0xF8	; 248
    26b2:	39 f0       	breq	.+14     	; 0x26c2 <__fixunssfsi+0x4c>
    26b4:	b9 3f       	cpi	r27, 0xF9	; 249
    26b6:	cc f3       	brlt	.-14     	; 0x26aa <__fixunssfsi+0x34>
    26b8:	86 95       	lsr	r24
    26ba:	77 95       	ror	r23
    26bc:	67 95       	ror	r22
    26be:	b3 95       	inc	r27
    26c0:	d9 f7       	brne	.-10     	; 0x26b8 <__fixunssfsi+0x42>
    26c2:	3e f4       	brtc	.+14     	; 0x26d2 <__fixunssfsi+0x5c>
    26c4:	90 95       	com	r25
    26c6:	80 95       	com	r24
    26c8:	70 95       	com	r23
    26ca:	61 95       	neg	r22
    26cc:	7f 4f       	sbci	r23, 0xFF	; 255
    26ce:	8f 4f       	sbci	r24, 0xFF	; 255
    26d0:	9f 4f       	sbci	r25, 0xFF	; 255
    26d2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000021d2 <__floatunsisf>:
    21d2:	e8 94       	clt
    21d4:	09 c0       	rjmp	.+18     	; 0x21e8 <__floatsisf+0x12>

000021d6 <__floatsisf>:
    21d6:	97 fb       	bst	r25, 7
    21d8:	3e f4       	brtc	.+14     	; 0x21e8 <__floatsisf+0x12>
    21da:	90 95       	com	r25
    21dc:	80 95       	com	r24
    21de:	70 95       	com	r23
    21e0:	61 95       	neg	r22
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255
    21e4:	8f 4f       	sbci	r24, 0xFF	; 255
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	99 23       	and	r25, r25
    21ea:	a9 f0       	breq	.+42     	; 0x2216 <__floatsisf+0x40>
    21ec:	f9 2f       	mov	r31, r25
    21ee:	96 e9       	ldi	r25, 0x96	; 150
    21f0:	bb 27       	eor	r27, r27
    21f2:	93 95       	inc	r25
    21f4:	f6 95       	lsr	r31
    21f6:	87 95       	ror	r24
    21f8:	77 95       	ror	r23
    21fa:	67 95       	ror	r22
    21fc:	b7 95       	ror	r27
    21fe:	f1 11       	cpse	r31, r1
    2200:	f8 cf       	rjmp	.-16     	; 0x21f2 <__floatsisf+0x1c>
    2202:	fa f4       	brpl	.+62     	; 0x2242 <__floatsisf+0x6c>
    2204:	bb 0f       	add	r27, r27
    2206:	11 f4       	brne	.+4      	; 0x220c <__floatsisf+0x36>
    2208:	60 ff       	sbrs	r22, 0
    220a:	1b c0       	rjmp	.+54     	; 0x2242 <__floatsisf+0x6c>
    220c:	6f 5f       	subi	r22, 0xFF	; 255
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	8f 4f       	sbci	r24, 0xFF	; 255
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	16 c0       	rjmp	.+44     	; 0x2242 <__floatsisf+0x6c>
    2216:	88 23       	and	r24, r24
    2218:	11 f0       	breq	.+4      	; 0x221e <__floatsisf+0x48>
    221a:	96 e9       	ldi	r25, 0x96	; 150
    221c:	11 c0       	rjmp	.+34     	; 0x2240 <__floatsisf+0x6a>
    221e:	77 23       	and	r23, r23
    2220:	21 f0       	breq	.+8      	; 0x222a <__floatsisf+0x54>
    2222:	9e e8       	ldi	r25, 0x8E	; 142
    2224:	87 2f       	mov	r24, r23
    2226:	76 2f       	mov	r23, r22
    2228:	05 c0       	rjmp	.+10     	; 0x2234 <__floatsisf+0x5e>
    222a:	66 23       	and	r22, r22
    222c:	71 f0       	breq	.+28     	; 0x224a <__floatsisf+0x74>
    222e:	96 e8       	ldi	r25, 0x86	; 134
    2230:	86 2f       	mov	r24, r22
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	2a f0       	brmi	.+10     	; 0x2242 <__floatsisf+0x6c>
    2238:	9a 95       	dec	r25
    223a:	66 0f       	add	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	88 1f       	adc	r24, r24
    2240:	da f7       	brpl	.-10     	; 0x2238 <__floatsisf+0x62>
    2242:	88 0f       	add	r24, r24
    2244:	96 95       	lsr	r25
    2246:	87 95       	ror	r24
    2248:	97 f9       	bld	r25, 7
    224a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000039f4 <__fp_inf>:
    39f4:	97 f9       	bld	r25, 7
    39f6:	9f 67       	ori	r25, 0x7F	; 127
    39f8:	80 e8       	ldi	r24, 0x80	; 128
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	60 e0       	ldi	r22, 0x00	; 0
    39fe:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a9a <__fp_nan>:
    3a9a:	9f ef       	ldi	r25, 0xFF	; 255
    3a9c:	80 ec       	ldi	r24, 0xC0	; 192
    3a9e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003976 <__fp_pscA>:
    3976:	00 24       	eor	r0, r0
    3978:	0a 94       	dec	r0
    397a:	16 16       	cp	r1, r22
    397c:	17 06       	cpc	r1, r23
    397e:	18 06       	cpc	r1, r24
    3980:	09 06       	cpc	r0, r25
    3982:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003984 <__fp_pscB>:
    3984:	00 24       	eor	r0, r0
    3986:	0a 94       	dec	r0
    3988:	12 16       	cp	r1, r18
    398a:	13 06       	cpc	r1, r19
    398c:	14 06       	cpc	r1, r20
    398e:	05 06       	cpc	r0, r21
    3990:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003598 <__fp_round>:
    3598:	09 2e       	mov	r0, r25
    359a:	03 94       	inc	r0
    359c:	00 0c       	add	r0, r0
    359e:	11 f4       	brne	.+4      	; 0x35a4 <__fp_round+0xc>
    35a0:	88 23       	and	r24, r24
    35a2:	52 f0       	brmi	.+20     	; 0x35b8 <__fp_round+0x20>
    35a4:	bb 0f       	add	r27, r27
    35a6:	40 f4       	brcc	.+16     	; 0x35b8 <__fp_round+0x20>
    35a8:	bf 2b       	or	r27, r31
    35aa:	11 f4       	brne	.+4      	; 0x35b0 <__fp_round+0x18>
    35ac:	60 ff       	sbrs	r22, 0
    35ae:	04 c0       	rjmp	.+8      	; 0x35b8 <__fp_round+0x20>
    35b0:	6f 5f       	subi	r22, 0xFF	; 255
    35b2:	7f 4f       	sbci	r23, 0xFF	; 255
    35b4:	8f 4f       	sbci	r24, 0xFF	; 255
    35b6:	9f 4f       	sbci	r25, 0xFF	; 255
    35b8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002db0 <__fp_split3>:
    2db0:	57 fd       	sbrc	r21, 7
    2db2:	90 58       	subi	r25, 0x80	; 128
    2db4:	44 0f       	add	r20, r20
    2db6:	55 1f       	adc	r21, r21
    2db8:	59 f0       	breq	.+22     	; 0x2dd0 <__fp_splitA+0x10>
    2dba:	5f 3f       	cpi	r21, 0xFF	; 255
    2dbc:	71 f0       	breq	.+28     	; 0x2dda <__fp_splitA+0x1a>
    2dbe:	47 95       	ror	r20

00002dc0 <__fp_splitA>:
    2dc0:	88 0f       	add	r24, r24
    2dc2:	97 fb       	bst	r25, 7
    2dc4:	99 1f       	adc	r25, r25
    2dc6:	61 f0       	breq	.+24     	; 0x2de0 <__fp_splitA+0x20>
    2dc8:	9f 3f       	cpi	r25, 0xFF	; 255
    2dca:	79 f0       	breq	.+30     	; 0x2dea <__fp_splitA+0x2a>
    2dcc:	87 95       	ror	r24
    2dce:	08 95       	ret
    2dd0:	12 16       	cp	r1, r18
    2dd2:	13 06       	cpc	r1, r19
    2dd4:	14 06       	cpc	r1, r20
    2dd6:	55 1f       	adc	r21, r21
    2dd8:	f2 cf       	rjmp	.-28     	; 0x2dbe <__fp_split3+0xe>
    2dda:	46 95       	lsr	r20
    2ddc:	f1 df       	rcall	.-30     	; 0x2dc0 <__fp_splitA>
    2dde:	08 c0       	rjmp	.+16     	; 0x2df0 <__fp_splitA+0x30>
    2de0:	16 16       	cp	r1, r22
    2de2:	17 06       	cpc	r1, r23
    2de4:	18 06       	cpc	r1, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	f1 cf       	rjmp	.-30     	; 0x2dcc <__fp_splitA+0xc>
    2dea:	86 95       	lsr	r24
    2dec:	71 05       	cpc	r23, r1
    2dee:	61 05       	cpc	r22, r1
    2df0:	08 94       	sec
    2df2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003992 <__fp_zero>:
    3992:	e8 94       	clt

00003994 <__fp_szero>:
    3994:	bb 27       	eor	r27, r27
    3996:	66 27       	eor	r22, r22
    3998:	77 27       	eor	r23, r23
    399a:	cb 01       	movw	r24, r22
    399c:	97 f9       	bld	r25, 7
    399e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a5c <__mulsf3>:
    3a5c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__mulsf3x>
    3a60:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001774 <__mulsf3x>:
    1774:	0f c0       	rjmp	.+30     	; 0x1794 <__mulsf3x+0x20>
    1776:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__fp_pscA>
    177a:	38 f0       	brcs	.+14     	; 0x178a <__mulsf3x+0x16>
    177c:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__fp_pscB>
    1780:	20 f0       	brcs	.+8      	; 0x178a <__mulsf3x+0x16>
    1782:	95 23       	and	r25, r21
    1784:	11 f0       	breq	.+4      	; 0x178a <__mulsf3x+0x16>
    1786:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__fp_inf>
    178a:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__fp_nan>
    178e:	11 24       	eor	r1, r1
    1790:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__fp_szero>
    1794:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_split3>
    1798:	70 f3       	brcs	.-36     	; 0x1776 <__mulsf3x+0x2>

0000179a <__mulsf3_pse>:
    179a:	95 9f       	mul	r25, r21
    179c:	c1 f3       	breq	.-16     	; 0x178e <__mulsf3x+0x1a>
    179e:	95 0f       	add	r25, r21
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	55 1f       	adc	r21, r21
    17a4:	62 9f       	mul	r22, r18
    17a6:	f0 01       	movw	r30, r0
    17a8:	72 9f       	mul	r23, r18
    17aa:	bb 27       	eor	r27, r27
    17ac:	f0 0d       	add	r31, r0
    17ae:	b1 1d       	adc	r27, r1
    17b0:	63 9f       	mul	r22, r19
    17b2:	aa 27       	eor	r26, r26
    17b4:	f0 0d       	add	r31, r0
    17b6:	b1 1d       	adc	r27, r1
    17b8:	aa 1f       	adc	r26, r26
    17ba:	64 9f       	mul	r22, r20
    17bc:	66 27       	eor	r22, r22
    17be:	b0 0d       	add	r27, r0
    17c0:	a1 1d       	adc	r26, r1
    17c2:	66 1f       	adc	r22, r22
    17c4:	82 9f       	mul	r24, r18
    17c6:	22 27       	eor	r18, r18
    17c8:	b0 0d       	add	r27, r0
    17ca:	a1 1d       	adc	r26, r1
    17cc:	62 1f       	adc	r22, r18
    17ce:	73 9f       	mul	r23, r19
    17d0:	b0 0d       	add	r27, r0
    17d2:	a1 1d       	adc	r26, r1
    17d4:	62 1f       	adc	r22, r18
    17d6:	83 9f       	mul	r24, r19
    17d8:	a0 0d       	add	r26, r0
    17da:	61 1d       	adc	r22, r1
    17dc:	22 1f       	adc	r18, r18
    17de:	74 9f       	mul	r23, r20
    17e0:	33 27       	eor	r19, r19
    17e2:	a0 0d       	add	r26, r0
    17e4:	61 1d       	adc	r22, r1
    17e6:	23 1f       	adc	r18, r19
    17e8:	84 9f       	mul	r24, r20
    17ea:	60 0d       	add	r22, r0
    17ec:	21 1d       	adc	r18, r1
    17ee:	82 2f       	mov	r24, r18
    17f0:	76 2f       	mov	r23, r22
    17f2:	6a 2f       	mov	r22, r26
    17f4:	11 24       	eor	r1, r1
    17f6:	9f 57       	subi	r25, 0x7F	; 127
    17f8:	50 40       	sbci	r21, 0x00	; 0
    17fa:	9a f0       	brmi	.+38     	; 0x1822 <__mulsf3_pse+0x88>
    17fc:	f1 f0       	breq	.+60     	; 0x183a <__mulsf3_pse+0xa0>
    17fe:	88 23       	and	r24, r24
    1800:	4a f0       	brmi	.+18     	; 0x1814 <__mulsf3_pse+0x7a>
    1802:	ee 0f       	add	r30, r30
    1804:	ff 1f       	adc	r31, r31
    1806:	bb 1f       	adc	r27, r27
    1808:	66 1f       	adc	r22, r22
    180a:	77 1f       	adc	r23, r23
    180c:	88 1f       	adc	r24, r24
    180e:	91 50       	subi	r25, 0x01	; 1
    1810:	50 40       	sbci	r21, 0x00	; 0
    1812:	a9 f7       	brne	.-22     	; 0x17fe <__mulsf3_pse+0x64>
    1814:	9e 3f       	cpi	r25, 0xFE	; 254
    1816:	51 05       	cpc	r21, r1
    1818:	80 f0       	brcs	.+32     	; 0x183a <__mulsf3_pse+0xa0>
    181a:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__fp_inf>
    181e:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__fp_szero>
    1822:	5f 3f       	cpi	r21, 0xFF	; 255
    1824:	e4 f3       	brlt	.-8      	; 0x181e <__mulsf3_pse+0x84>
    1826:	98 3e       	cpi	r25, 0xE8	; 232
    1828:	d4 f3       	brlt	.-12     	; 0x181e <__mulsf3_pse+0x84>
    182a:	86 95       	lsr	r24
    182c:	77 95       	ror	r23
    182e:	67 95       	ror	r22
    1830:	b7 95       	ror	r27
    1832:	f7 95       	ror	r31
    1834:	e7 95       	ror	r30
    1836:	9f 5f       	subi	r25, 0xFF	; 255
    1838:	c1 f7       	brne	.-16     	; 0x182a <__mulsf3_pse+0x90>
    183a:	fe 2b       	or	r31, r30
    183c:	88 0f       	add	r24, r24
    183e:	91 1d       	adc	r25, r1
    1840:	96 95       	lsr	r25
    1842:	87 95       	ror	r24
    1844:	97 f9       	bld	r25, 7
    1846:	08 95       	ret

Disassembly of section .text.libgcc:

00003a00 <__tablejump2__>:
    3a00:	ee 0f       	add	r30, r30
    3a02:	ff 1f       	adc	r31, r31
    3a04:	05 90       	lpm	r0, Z+
    3a06:	f4 91       	lpm	r31, Z
    3a08:	e0 2d       	mov	r30, r0
    3a0a:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

0000365a <__umulhisi3>:
    365a:	a2 9f       	mul	r26, r18
    365c:	b0 01       	movw	r22, r0
    365e:	b3 9f       	mul	r27, r19
    3660:	c0 01       	movw	r24, r0
    3662:	a3 9f       	mul	r26, r19
    3664:	70 0d       	add	r23, r0
    3666:	81 1d       	adc	r24, r1
    3668:	11 24       	eor	r1, r1
    366a:	91 1d       	adc	r25, r1
    366c:	b2 9f       	mul	r27, r18
    366e:	70 0d       	add	r23, r0
    3670:	81 1d       	adc	r24, r1
    3672:	11 24       	eor	r1, r1
    3674:	91 1d       	adc	r25, r1
    3676:	08 95       	ret

Disassembly of section .text.libgcc:

00003774 <__movmemx_qi>:
    3774:	99 27       	eor	r25, r25

00003776 <__movmemx_hi>:
    3776:	77 fd       	sbrc	r23, 7
    3778:	05 c0       	rjmp	.+10     	; 0x3784 <__movmemx_hi+0xe>
    377a:	05 90       	lpm	r0, Z+
    377c:	0d 92       	st	X+, r0
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	e1 f7       	brne	.-8      	; 0x377a <__movmemx_hi+0x4>
    3782:	08 95       	ret
    3784:	01 90       	ld	r0, Z+
    3786:	0d 92       	st	X+, r0
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	e1 f7       	brne	.-8      	; 0x3784 <__movmemx_hi+0xe>
    378c:	08 95       	ret

Disassembly of section .text.avrlibc:

000032d4 <memcpy>:
    32d4:	cf 92       	push	r12
    32d6:	df 92       	push	r13
    32d8:	ef 92       	push	r14
    32da:	dc 01       	movw	r26, r24
    32dc:	6a 01       	movw	r12, r20
    32de:	e6 2e       	mov	r14, r22
    32e0:	28 0f       	add	r18, r24
    32e2:	39 1f       	adc	r19, r25
    32e4:	a2 17       	cp	r26, r18
    32e6:	b3 07       	cpc	r27, r19
    32e8:	51 f0       	breq	.+20     	; 0x32fe <memcpy+0x2a>
    32ea:	f6 01       	movw	r30, r12
    32ec:	44 91       	lpm	r20, Z
    32ee:	e7 fc       	sbrc	r14, 7
    32f0:	40 81       	ld	r20, Z
    32f2:	4d 93       	st	X+, r20
    32f4:	4f ef       	ldi	r20, 0xFF	; 255
    32f6:	c4 1a       	sub	r12, r20
    32f8:	d4 0a       	sbc	r13, r20
    32fa:	e4 0a       	sbc	r14, r20
    32fc:	f3 cf       	rjmp	.-26     	; 0x32e4 <memcpy+0x10>
    32fe:	ef 90       	pop	r14
    3300:	df 90       	pop	r13
    3302:	cf 90       	pop	r12
    3304:	08 95       	ret

Disassembly of section .text.avrlibc:

00002e78 <strcmp>:
    2e78:	cf 92       	push	r12
    2e7a:	df 92       	push	r13
    2e7c:	ef 92       	push	r14
    2e7e:	6b 01       	movw	r12, r22
    2e80:	e8 2e       	mov	r14, r24
    2e82:	f6 01       	movw	r30, r12
    2e84:	84 91       	lpm	r24, Z
    2e86:	e7 fc       	sbrc	r14, 7
    2e88:	80 81       	ld	r24, Z
    2e8a:	f9 01       	movw	r30, r18
    2e8c:	54 91       	lpm	r21, Z
    2e8e:	47 fd       	sbrc	r20, 7
    2e90:	50 81       	ld	r21, Z
    2e92:	85 13       	cpse	r24, r21
    2e94:	0b c0       	rjmp	.+22     	; 0x2eac <strcmp+0x34>
    2e96:	88 23       	and	r24, r24
    2e98:	41 f0       	breq	.+16     	; 0x2eaa <strcmp+0x32>
    2e9a:	8f ef       	ldi	r24, 0xFF	; 255
    2e9c:	c8 1a       	sub	r12, r24
    2e9e:	d8 0a       	sbc	r13, r24
    2ea0:	e8 0a       	sbc	r14, r24
    2ea2:	2f 5f       	subi	r18, 0xFF	; 255
    2ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ea8:	ec cf       	rjmp	.-40     	; 0x2e82 <strcmp+0xa>
    2eaa:	58 2f       	mov	r21, r24
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	85 1b       	sub	r24, r21
    2eb0:	91 09       	sbc	r25, r1
    2eb2:	ef 90       	pop	r14
    2eb4:	df 90       	pop	r13
    2eb6:	cf 90       	pop	r12
    2eb8:	08 95       	ret

Disassembly of section .text.avrlibc:

00002482 <strncmp>:
    2482:	cf 92       	push	r12
    2484:	df 92       	push	r13
    2486:	ef 92       	push	r14
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	6b 01       	movw	r12, r22
    248e:	e8 2e       	mov	r14, r24
    2490:	01 15       	cp	r16, r1
    2492:	11 05       	cpc	r17, r1
    2494:	19 f1       	breq	.+70     	; 0x24dc <strncmp+0x5a>
    2496:	01 50       	subi	r16, 0x01	; 1
    2498:	11 09       	sbc	r17, r1
    249a:	f6 01       	movw	r30, r12
    249c:	84 91       	lpm	r24, Z
    249e:	e7 fc       	sbrc	r14, 7
    24a0:	80 81       	ld	r24, Z
    24a2:	88 23       	and	r24, r24
    24a4:	99 f0       	breq	.+38     	; 0x24cc <strncmp+0x4a>
    24a6:	f9 01       	movw	r30, r18
    24a8:	94 91       	lpm	r25, Z
    24aa:	47 fd       	sbrc	r20, 7
    24ac:	90 81       	ld	r25, Z
    24ae:	99 23       	and	r25, r25
    24b0:	69 f0       	breq	.+26     	; 0x24cc <strncmp+0x4a>
    24b2:	01 15       	cp	r16, r1
    24b4:	11 05       	cpc	r17, r1
    24b6:	51 f0       	breq	.+20     	; 0x24cc <strncmp+0x4a>
    24b8:	89 13       	cpse	r24, r25
    24ba:	08 c0       	rjmp	.+16     	; 0x24cc <strncmp+0x4a>
    24bc:	8f ef       	ldi	r24, 0xFF	; 255
    24be:	c8 1a       	sub	r12, r24
    24c0:	d8 0a       	sbc	r13, r24
    24c2:	e8 0a       	sbc	r14, r24
    24c4:	2f 5f       	subi	r18, 0xFF	; 255
    24c6:	3f 4f       	sbci	r19, 0xFF	; 255
    24c8:	4f 4f       	sbci	r20, 0xFF	; 255
    24ca:	e5 cf       	rjmp	.-54     	; 0x2496 <strncmp+0x14>
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	f9 01       	movw	r30, r18
    24d0:	24 91       	lpm	r18, Z
    24d2:	47 fd       	sbrc	r20, 7
    24d4:	20 81       	ld	r18, Z
    24d6:	82 1b       	sub	r24, r18
    24d8:	91 09       	sbc	r25, r1
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <strncmp+0x5e>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ef 90       	pop	r14
    24e6:	df 90       	pop	r13
    24e8:	cf 90       	pop	r12
    24ea:	08 95       	ret

Disassembly of section .text.avrlibc:

00003422 <strlen>:
    3422:	cf 92       	push	r12
    3424:	df 92       	push	r13
    3426:	ef 92       	push	r14
    3428:	6b 01       	movw	r12, r22
    342a:	e8 2e       	mov	r14, r24
    342c:	a8 2f       	mov	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	fc 01       	movw	r30, r24
    3432:	24 91       	lpm	r18, Z
    3434:	a7 fd       	sbrc	r26, 7
    3436:	20 81       	ld	r18, Z
    3438:	22 23       	and	r18, r18
    343a:	19 f0       	breq	.+6      	; 0x3442 <strlen+0x20>
    343c:	01 96       	adiw	r24, 0x01	; 1
    343e:	a1 1d       	adc	r26, r1
    3440:	f7 cf       	rjmp	.-18     	; 0x3430 <strlen+0xe>
    3442:	8c 19       	sub	r24, r12
    3444:	9d 09       	sbc	r25, r13
    3446:	ef 90       	pop	r14
    3448:	df 90       	pop	r13
    344a:	cf 90       	pop	r12
    344c:	08 95       	ret

Disassembly of section .text.avrlibc:

00003678 <strcpy>:
    3678:	9a 01       	movw	r18, r20
    367a:	46 2f       	mov	r20, r22
    367c:	dc 01       	movw	r26, r24
    367e:	f9 01       	movw	r30, r18
    3680:	54 91       	lpm	r21, Z
    3682:	47 fd       	sbrc	r20, 7
    3684:	50 81       	ld	r21, Z
    3686:	5d 93       	st	X+, r21
    3688:	55 23       	and	r21, r21
    368a:	21 f0       	breq	.+8      	; 0x3694 <strcpy+0x1c>
    368c:	2f 5f       	subi	r18, 0xFF	; 255
    368e:	3f 4f       	sbci	r19, 0xFF	; 255
    3690:	4f 4f       	sbci	r20, 0xFF	; 255
    3692:	f5 cf       	rjmp	.-22     	; 0x367e <strcpy+0x6>
    3694:	08 95       	ret

Disassembly of section .text.avrlibc:

00002d26 <sprintf>:
    2d26:	af e0       	ldi	r26, 0x0F	; 15
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e9 e9       	ldi	r30, 0x99	; 153
    2d2c:	f6 e1       	ldi	r31, 0x16	; 22
    2d2e:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__prologue_saves__+0x1c>
    2d32:	0e 89       	ldd	r16, Y+22	; 0x16
    2d34:	1f 89       	ldd	r17, Y+23	; 0x17
    2d36:	86 e0       	ldi	r24, 0x06	; 6
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	1a 83       	std	Y+2, r17	; 0x02
    2d3c:	09 83       	std	Y+1, r16	; 0x01
    2d3e:	8f ef       	ldi	r24, 0xFF	; 255
    2d40:	9f e7       	ldi	r25, 0x7F	; 127
    2d42:	9f 83       	std	Y+7, r25	; 0x07
    2d44:	8e 83       	std	Y+6, r24	; 0x06
    2d46:	9e 01       	movw	r18, r28
    2d48:	25 5e       	subi	r18, 0xE5	; 229
    2d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4c:	48 8d       	ldd	r20, Y+24	; 0x18
    2d4e:	59 8d       	ldd	r21, Y+25	; 0x19
    2d50:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d52:	ce 01       	movw	r24, r28
    2d54:	01 96       	adiw	r24, 0x01	; 1
    2d56:	0e 94 9b 01 	call	0x336	; 0x336 <vfprintf>
    2d5a:	e8 85       	ldd	r30, Y+8	; 0x08
    2d5c:	f9 85       	ldd	r31, Y+9	; 0x09
    2d5e:	e0 0f       	add	r30, r16
    2d60:	f1 1f       	adc	r31, r17
    2d62:	10 82       	st	Z, r1
    2d64:	2f 96       	adiw	r28, 0x0f	; 15
    2d66:	e4 e0       	ldi	r30, 0x04	; 4
    2d68:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000336 <vfprintf>:
 336:	2f 92       	push	r2
 338:	3f 92       	push	r3
 33a:	4f 92       	push	r4
 33c:	6f 92       	push	r6
 33e:	7f 92       	push	r7
 340:	8f 92       	push	r8
 342:	9f 92       	push	r9
 344:	af 92       	push	r10
 346:	bf 92       	push	r11
 348:	cf 92       	push	r12
 34a:	df 92       	push	r13
 34c:	ef 92       	push	r14
 34e:	ff 92       	push	r15
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	62 97       	sbiw	r28, 0x12	; 18
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	6c 01       	movw	r12, r24
 36a:	3a 01       	movw	r6, r20
 36c:	86 2e       	mov	r8, r22
 36e:	79 01       	movw	r14, r18
 370:	fc 01       	movw	r30, r24
 372:	10 86       	std	Z+8, r1	; 0x08
 374:	17 82       	std	Z+7, r1	; 0x07
 376:	84 81       	ldd	r24, Z+4	; 0x04
 378:	81 ff       	sbrs	r24, 1
 37a:	e7 c1       	rjmp	.+974    	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
 37c:	9e 01       	movw	r18, r28
 37e:	2f 5f       	subi	r18, 0xFF	; 255
 380:	3f 4f       	sbci	r19, 0xFF	; 255
 382:	3d 87       	std	Y+13, r19	; 0x0d
 384:	2c 87       	std	Y+12, r18	; 0x0c
 386:	c9 01       	movw	r24, r18
 388:	a0 e8       	ldi	r26, 0x80	; 128
 38a:	88 8b       	std	Y+16, r24	; 0x10
 38c:	99 8b       	std	Y+17, r25	; 0x11
 38e:	aa 8b       	std	Y+18, r26	; 0x12
 390:	9f e3       	ldi	r25, 0x3F	; 63
 392:	99 2e       	mov	r9, r25
 394:	f3 01       	movw	r30, r6
 396:	84 91       	lpm	r24, Z
 398:	87 fc       	sbrc	r8, 7
 39a:	80 81       	ld	r24, Z
 39c:	88 23       	and	r24, r24
 39e:	09 f4       	brne	.+2      	; 0x3a2 <vfprintf+0x6c>
 3a0:	d0 c1       	rjmp	.+928    	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 3a2:	48 2d       	mov	r20, r8
 3a4:	93 01       	movw	r18, r6
 3a6:	2f 5f       	subi	r18, 0xFF	; 255
 3a8:	3f 4f       	sbci	r19, 0xFF	; 255
 3aa:	4f 4f       	sbci	r20, 0xFF	; 255
 3ac:	85 32       	cpi	r24, 0x25	; 37
 3ae:	19 f0       	breq	.+6      	; 0x3b6 <vfprintf+0x80>
 3b0:	39 01       	movw	r6, r18
 3b2:	84 2e       	mov	r8, r20
 3b4:	0a c0       	rjmp	.+20     	; 0x3ca <vfprintf+0x94>
 3b6:	f9 01       	movw	r30, r18
 3b8:	84 91       	lpm	r24, Z
 3ba:	47 fd       	sbrc	r20, 7
 3bc:	80 81       	ld	r24, Z
 3be:	92 e0       	ldi	r25, 0x02	; 2
 3c0:	69 0e       	add	r6, r25
 3c2:	71 1c       	adc	r7, r1
 3c4:	81 1c       	adc	r8, r1
 3c6:	85 32       	cpi	r24, 0x25	; 37
 3c8:	29 f4       	brne	.+10     	; 0x3d4 <vfprintf+0x9e>
 3ca:	b6 01       	movw	r22, r12
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 26 11 	call	0x224c	; 0x224c <fputc>
 3d2:	e0 cf       	rjmp	.-64     	; 0x394 <vfprintf+0x5e>
 3d4:	b1 2c       	mov	r11, r1
 3d6:	00 e0       	ldi	r16, 0x00	; 0
 3d8:	10 e0       	ldi	r17, 0x00	; 0
 3da:	10 32       	cpi	r17, 0x20	; 32
 3dc:	a0 f4       	brcc	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3de:	8b 32       	cpi	r24, 0x2B	; 43
 3e0:	69 f0       	breq	.+26     	; 0x3fc <vfprintf+0xc6>
 3e2:	30 f4       	brcc	.+12     	; 0x3f0 <vfprintf+0xba>
 3e4:	80 32       	cpi	r24, 0x20	; 32
 3e6:	59 f0       	breq	.+22     	; 0x3fe <vfprintf+0xc8>
 3e8:	83 32       	cpi	r24, 0x23	; 35
 3ea:	69 f4       	brne	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ec:	10 61       	ori	r17, 0x10	; 16
 3ee:	2c c0       	rjmp	.+88     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3f0:	8d 32       	cpi	r24, 0x2D	; 45
 3f2:	39 f0       	breq	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f4:	80 33       	cpi	r24, 0x30	; 48
 3f6:	39 f4       	brne	.+14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f8:	11 60       	ori	r17, 0x01	; 1
 3fa:	26 c0       	rjmp	.+76     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3fc:	12 60       	ori	r17, 0x02	; 2
 3fe:	14 60       	ori	r17, 0x04	; 4
 400:	23 c0       	rjmp	.+70     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 402:	18 60       	ori	r17, 0x08	; 8
 404:	21 c0       	rjmp	.+66     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 406:	17 fd       	sbrc	r17, 7
 408:	29 c0       	rjmp	.+82     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 40a:	90 ed       	ldi	r25, 0xD0	; 208
 40c:	98 0f       	add	r25, r24
 40e:	9a 30       	cpi	r25, 0x0A	; 10
 410:	78 f4       	brcc	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 412:	16 ff       	sbrs	r17, 6
 414:	06 c0       	rjmp	.+12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 416:	aa e0       	ldi	r26, 0x0A	; 10
 418:	ba 9e       	mul	r11, r26
 41a:	90 0d       	add	r25, r0
 41c:	11 24       	eor	r1, r1
 41e:	b9 2e       	mov	r11, r25
 420:	13 c0       	rjmp	.+38     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 422:	ea e0       	ldi	r30, 0x0A	; 10
 424:	0e 9f       	mul	r16, r30
 426:	90 0d       	add	r25, r0
 428:	11 24       	eor	r1, r1
 42a:	09 2f       	mov	r16, r25
 42c:	10 62       	ori	r17, 0x20	; 32
 42e:	0c c0       	rjmp	.+24     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 430:	8e 32       	cpi	r24, 0x2E	; 46
 432:	21 f4       	brne	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 434:	16 fd       	sbrc	r17, 6
 436:	85 c1       	rjmp	.+778    	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 438:	10 64       	ori	r17, 0x40	; 64
 43a:	06 c0       	rjmp	.+12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 43c:	8c 36       	cpi	r24, 0x6C	; 108
 43e:	11 f4       	brne	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 440:	10 68       	ori	r17, 0x80	; 128
 442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 444:	88 36       	cpi	r24, 0x68	; 104
 446:	51 f4       	brne	.+20     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 448:	f3 01       	movw	r30, r6
 44a:	84 91       	lpm	r24, Z
 44c:	87 fc       	sbrc	r8, 7
 44e:	80 81       	ld	r24, Z
 450:	ff ef       	ldi	r31, 0xFF	; 255
 452:	6f 1a       	sub	r6, r31
 454:	7f 0a       	sbc	r7, r31
 456:	8f 0a       	sbc	r8, r31
 458:	81 11       	cpse	r24, r1
 45a:	bf cf       	rjmp	.-130    	; 0x3da <vfprintf+0xa4>
 45c:	98 2f       	mov	r25, r24
 45e:	9f 7d       	andi	r25, 0xDF	; 223
 460:	95 54       	subi	r25, 0x45	; 69
 462:	93 30       	cpi	r25, 0x03	; 3
 464:	28 f4       	brcc	.+10     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 466:	24 e0       	ldi	r18, 0x04	; 4
 468:	e2 0e       	add	r14, r18
 46a:	f1 1c       	adc	r15, r1
 46c:	99 82       	std	Y+1, r9	; 0x01
 46e:	0f c0       	rjmp	.+30     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 470:	83 36       	cpi	r24, 0x63	; 99
 472:	31 f0       	breq	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 474:	83 37       	cpi	r24, 0x73	; 115
 476:	91 f0       	breq	.+36     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 478:	83 35       	cpi	r24, 0x53	; 83
 47a:	09 f0       	breq	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	63 c0       	rjmp	.+198    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 47e:	27 c0       	rjmp	.+78     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 480:	f7 01       	movw	r30, r14
 482:	80 81       	ld	r24, Z
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	97 01       	movw	r18, r14
 488:	2e 5f       	subi	r18, 0xFE	; 254
 48a:	3f 4f       	sbci	r19, 0xFF	; 255
 48c:	79 01       	movw	r14, r18
 48e:	28 88       	ldd	r2, Y+16	; 0x10
 490:	39 88       	ldd	r3, Y+17	; 0x11
 492:	4a 88       	ldd	r4, Y+18	; 0x12
 494:	aa 24       	eor	r10, r10
 496:	a3 94       	inc	r10
 498:	b1 2c       	mov	r11, r1
 49a:	17 c0       	rjmp	.+46     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 49c:	a7 01       	movw	r20, r14
 49e:	4d 5f       	subi	r20, 0xFD	; 253
 4a0:	5f 4f       	sbci	r21, 0xFF	; 255
 4a2:	5f 87       	std	Y+15, r21	; 0x0f
 4a4:	4e 87       	std	Y+14, r20	; 0x0e
 4a6:	f7 01       	movw	r30, r14
 4a8:	20 80       	ld	r2, Z
 4aa:	31 80       	ldd	r3, Z+1	; 0x01
 4ac:	42 80       	ldd	r4, Z+2	; 0x02
 4ae:	16 ff       	sbrs	r17, 6
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b2:	4b 2d       	mov	r20, r11
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b8:	4f ef       	ldi	r20, 0xFF	; 255
 4ba:	5f ef       	ldi	r21, 0xFF	; 255
 4bc:	84 2d       	mov	r24, r4
 4be:	b1 01       	movw	r22, r2
 4c0:	0e 94 82 18 	call	0x3104	; 0x3104 <strnlen>
 4c4:	5c 01       	movw	r10, r24
 4c6:	ee 84       	ldd	r14, Y+14	; 0x0e
 4c8:	ff 84       	ldd	r15, Y+15	; 0x0f
 4ca:	1f 77       	andi	r17, 0x7F	; 127
 4cc:	18 c0       	rjmp	.+48     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4ce:	97 01       	movw	r18, r14
 4d0:	2d 5f       	subi	r18, 0xFD	; 253
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	3f 87       	std	Y+15, r19	; 0x0f
 4d6:	2e 87       	std	Y+14, r18	; 0x0e
 4d8:	f7 01       	movw	r30, r14
 4da:	20 80       	ld	r2, Z
 4dc:	31 80       	ldd	r3, Z+1	; 0x01
 4de:	42 80       	ldd	r4, Z+2	; 0x02
 4e0:	16 ff       	sbrs	r17, 6
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e4:	4b 2d       	mov	r20, r11
 4e6:	50 e0       	ldi	r21, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ea:	4f ef       	ldi	r20, 0xFF	; 255
 4ec:	5f ef       	ldi	r21, 0xFF	; 255
 4ee:	84 2d       	mov	r24, r4
 4f0:	b1 01       	movw	r22, r2
 4f2:	0e 94 82 18 	call	0x3104	; 0x3104 <strnlen>
 4f6:	5c 01       	movw	r10, r24
 4f8:	10 68       	ori	r17, 0x80	; 128
 4fa:	ee 84       	ldd	r14, Y+14	; 0x0e
 4fc:	ff 84       	ldd	r15, Y+15	; 0x0f
 4fe:	13 fd       	sbrc	r17, 3
 500:	1d c0       	rjmp	.+58     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 502:	80 2f       	mov	r24, r16
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	a8 16       	cp	r10, r24
 508:	b9 06       	cpc	r11, r25
 50a:	c0 f4       	brcc	.+48     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 50c:	b6 01       	movw	r22, r12
 50e:	80 e2       	ldi	r24, 0x20	; 32
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 26 11 	call	0x224c	; 0x224c <fputc>
 516:	01 50       	subi	r16, 0x01	; 1
 518:	f4 cf       	rjmp	.-24     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 51a:	f1 01       	movw	r30, r2
 51c:	84 91       	lpm	r24, Z
 51e:	47 fc       	sbrc	r4, 7
 520:	80 81       	ld	r24, Z
 522:	ff ef       	ldi	r31, 0xFF	; 255
 524:	2f 1a       	sub	r2, r31
 526:	3f 0a       	sbc	r3, r31
 528:	4f 0a       	sbc	r4, r31
 52a:	b6 01       	movw	r22, r12
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 26 11 	call	0x224c	; 0x224c <fputc>
 532:	01 11       	cpse	r16, r1
 534:	01 50       	subi	r16, 0x01	; 1
 536:	21 e0       	ldi	r18, 0x01	; 1
 538:	a2 1a       	sub	r10, r18
 53a:	b1 08       	sbc	r11, r1
 53c:	a1 14       	cp	r10, r1
 53e:	b1 04       	cpc	r11, r1
 540:	61 f7       	brne	.-40     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 542:	f5 c0       	rjmp	.+490    	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 544:	84 36       	cpi	r24, 0x64	; 100
 546:	11 f0       	breq	.+4      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 548:	89 36       	cpi	r24, 0x69	; 105
 54a:	71 f5       	brne	.+92     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 54c:	f7 01       	movw	r30, r14
 54e:	17 ff       	sbrs	r17, 7
 550:	08 c0       	rjmp	.+16     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 552:	60 81       	ld	r22, Z
 554:	71 81       	ldd	r23, Z+1	; 0x01
 556:	82 81       	ldd	r24, Z+2	; 0x02
 558:	93 81       	ldd	r25, Z+3	; 0x03
 55a:	97 01       	movw	r18, r14
 55c:	2c 5f       	subi	r18, 0xFC	; 252
 55e:	3f 4f       	sbci	r19, 0xFF	; 255
 560:	09 c0       	rjmp	.+18     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 562:	60 81       	ld	r22, Z
 564:	71 81       	ldd	r23, Z+1	; 0x01
 566:	07 2e       	mov	r0, r23
 568:	00 0c       	add	r0, r0
 56a:	88 0b       	sbc	r24, r24
 56c:	99 0b       	sbc	r25, r25
 56e:	97 01       	movw	r18, r14
 570:	2e 5f       	subi	r18, 0xFE	; 254
 572:	3f 4f       	sbci	r19, 0xFF	; 255
 574:	79 01       	movw	r14, r18
 576:	1f 76       	andi	r17, 0x6F	; 111
 578:	31 2e       	mov	r3, r17
 57a:	97 ff       	sbrs	r25, 7
 57c:	0a c0       	rjmp	.+20     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 57e:	90 95       	com	r25
 580:	80 95       	com	r24
 582:	70 95       	com	r23
 584:	61 95       	neg	r22
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	8f 4f       	sbci	r24, 0xFF	; 255
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	31 2f       	mov	r19, r17
 58e:	30 68       	ori	r19, 0x80	; 128
 590:	33 2e       	mov	r3, r19
 592:	2a e0       	ldi	r18, 0x0A	; 10
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	ae 01       	movw	r20, r28
 598:	4f 5f       	subi	r20, 0xFF	; 255
 59a:	5f 4f       	sbci	r21, 0xFF	; 255
 59c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__ultoa_invert>
 5a0:	48 2e       	mov	r4, r24
 5a2:	4c 85       	ldd	r20, Y+12	; 0x0c
 5a4:	44 1a       	sub	r4, r20
 5a6:	4a c0       	rjmp	.+148    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 5a8:	85 37       	cpi	r24, 0x75	; 117
 5aa:	29 f4       	brne	.+10     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5ac:	1f 7e       	andi	r17, 0xEF	; 239
 5ae:	a1 2e       	mov	r10, r17
 5b0:	2a e0       	ldi	r18, 0x0A	; 10
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	25 c0       	rjmp	.+74     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5b6:	51 2f       	mov	r21, r17
 5b8:	59 7f       	andi	r21, 0xF9	; 249
 5ba:	a5 2e       	mov	r10, r21
 5bc:	8f 36       	cpi	r24, 0x6F	; 111
 5be:	c1 f0       	breq	.+48     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5c0:	18 f4       	brcc	.+6      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5c2:	88 35       	cpi	r24, 0x58	; 88
 5c4:	79 f0       	breq	.+30     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5c6:	bd c0       	rjmp	.+378    	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 5c8:	80 37       	cpi	r24, 0x70	; 112
 5ca:	19 f0       	breq	.+6      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5cc:	88 37       	cpi	r24, 0x78	; 120
 5ce:	21 f0       	breq	.+8      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5d0:	b8 c0       	rjmp	.+368    	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 5d2:	85 2f       	mov	r24, r21
 5d4:	80 61       	ori	r24, 0x10	; 16
 5d6:	a8 2e       	mov	r10, r24
 5d8:	a4 fe       	sbrs	r10, 4
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5dc:	9a 2d       	mov	r25, r10
 5de:	94 60       	ori	r25, 0x04	; 4
 5e0:	a9 2e       	mov	r10, r25
 5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5e4:	14 ff       	sbrs	r17, 4
 5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5e8:	a5 2f       	mov	r26, r21
 5ea:	a6 60       	ori	r26, 0x06	; 6
 5ec:	aa 2e       	mov	r10, r26
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5f0:	28 e0       	ldi	r18, 0x08	; 8
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	05 c0       	rjmp	.+10     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5f6:	20 e1       	ldi	r18, 0x10	; 16
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5fc:	20 e1       	ldi	r18, 0x10	; 16
 5fe:	32 e0       	ldi	r19, 0x02	; 2
 600:	f7 01       	movw	r30, r14
 602:	a7 fe       	sbrs	r10, 7
 604:	08 c0       	rjmp	.+16     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 606:	60 81       	ld	r22, Z
 608:	71 81       	ldd	r23, Z+1	; 0x01
 60a:	82 81       	ldd	r24, Z+2	; 0x02
 60c:	93 81       	ldd	r25, Z+3	; 0x03
 60e:	a7 01       	movw	r20, r14
 610:	4c 5f       	subi	r20, 0xFC	; 252
 612:	5f 4f       	sbci	r21, 0xFF	; 255
 614:	07 c0       	rjmp	.+14     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 616:	60 81       	ld	r22, Z
 618:	71 81       	ldd	r23, Z+1	; 0x01
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	a7 01       	movw	r20, r14
 620:	4e 5f       	subi	r20, 0xFE	; 254
 622:	5f 4f       	sbci	r21, 0xFF	; 255
 624:	7a 01       	movw	r14, r20
 626:	ae 01       	movw	r20, r28
 628:	4f 5f       	subi	r20, 0xFF	; 255
 62a:	5f 4f       	sbci	r21, 0xFF	; 255
 62c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__ultoa_invert>
 630:	48 2e       	mov	r4, r24
 632:	5c 85       	ldd	r21, Y+12	; 0x0c
 634:	45 1a       	sub	r4, r21
 636:	8a 2d       	mov	r24, r10
 638:	8f 77       	andi	r24, 0x7F	; 127
 63a:	38 2e       	mov	r3, r24
 63c:	36 fe       	sbrs	r3, 6
 63e:	0d c0       	rjmp	.+26     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 640:	93 2d       	mov	r25, r3
 642:	9e 7f       	andi	r25, 0xFE	; 254
 644:	a9 2e       	mov	r10, r25
 646:	4b 14       	cp	r4, r11
 648:	58 f4       	brcc	.+22     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 64a:	34 fe       	sbrs	r3, 4
 64c:	0b c0       	rjmp	.+22     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 64e:	32 fc       	sbrc	r3, 2
 650:	09 c0       	rjmp	.+18     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 652:	a3 2d       	mov	r26, r3
 654:	ae 7e       	andi	r26, 0xEE	; 238
 656:	aa 2e       	mov	r10, r26
 658:	05 c0       	rjmp	.+10     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 65a:	14 2d       	mov	r17, r4
 65c:	a3 2c       	mov	r10, r3
 65e:	03 c0       	rjmp	.+6      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 660:	14 2d       	mov	r17, r4
 662:	01 c0       	rjmp	.+2      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 664:	1b 2d       	mov	r17, r11
 666:	a4 fe       	sbrs	r10, 4
 668:	0e c0       	rjmp	.+28     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 66a:	fe 01       	movw	r30, r28
 66c:	e4 0d       	add	r30, r4
 66e:	f1 1d       	adc	r31, r1
 670:	80 81       	ld	r24, Z
 672:	80 33       	cpi	r24, 0x30	; 48
 674:	21 f4       	brne	.+8      	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 676:	ea 2d       	mov	r30, r10
 678:	e9 7e       	andi	r30, 0xE9	; 233
 67a:	ae 2e       	mov	r10, r30
 67c:	08 c0       	rjmp	.+16     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 67e:	a2 fe       	sbrs	r10, 2
 680:	05 c0       	rjmp	.+10     	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 682:	1e 5f       	subi	r17, 0xFE	; 254
 684:	04 c0       	rjmp	.+8      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 686:	8a 2d       	mov	r24, r10
 688:	86 78       	andi	r24, 0x86	; 134
 68a:	09 f0       	breq	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 68c:	1f 5f       	subi	r17, 0xFF	; 255
 68e:	a3 fc       	sbrc	r10, 3
 690:	11 c0       	rjmp	.+34     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 692:	a0 fe       	sbrs	r10, 0
 694:	06 c0       	rjmp	.+12     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 696:	10 17       	cp	r17, r16
 698:	88 f4       	brcc	.+34     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 69a:	04 0d       	add	r16, r4
 69c:	b0 2e       	mov	r11, r16
 69e:	b1 1a       	sub	r11, r17
 6a0:	0e c0       	rjmp	.+28     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 6a2:	10 17       	cp	r17, r16
 6a4:	60 f4       	brcc	.+24     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 6a6:	b6 01       	movw	r22, r12
 6a8:	80 e2       	ldi	r24, 0x20	; 32
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 26 11 	call	0x224c	; 0x224c <fputc>
 6b0:	1f 5f       	subi	r17, 0xFF	; 255
 6b2:	f7 cf       	rjmp	.-18     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 6b4:	10 17       	cp	r17, r16
 6b6:	18 f4       	brcc	.+6      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 6b8:	01 1b       	sub	r16, r17
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6bc:	b4 2c       	mov	r11, r4
 6be:	00 e0       	ldi	r16, 0x00	; 0
 6c0:	a4 fe       	sbrs	r10, 4
 6c2:	10 c0       	rjmp	.+32     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
 6c4:	b6 01       	movw	r22, r12
 6c6:	80 e3       	ldi	r24, 0x30	; 48
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 26 11 	call	0x224c	; 0x224c <fputc>
 6ce:	a2 fe       	sbrs	r10, 2
 6d0:	17 c0       	rjmp	.+46     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6d2:	a1 fc       	sbrc	r10, 1
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6d6:	88 e7       	ldi	r24, 0x78	; 120
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6dc:	88 e5       	ldi	r24, 0x58	; 88
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	b6 01       	movw	r22, r12
 6e2:	0c c0       	rjmp	.+24     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6e4:	8a 2d       	mov	r24, r10
 6e6:	86 78       	andi	r24, 0x86	; 134
 6e8:	59 f0       	breq	.+22     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6ea:	a1 fe       	sbrs	r10, 1
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6ee:	8b e2       	ldi	r24, 0x2B	; 43
 6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6f2:	80 e2       	ldi	r24, 0x20	; 32
 6f4:	a7 fc       	sbrc	r10, 7
 6f6:	8d e2       	ldi	r24, 0x2D	; 45
 6f8:	b6 01       	movw	r22, r12
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 26 11 	call	0x224c	; 0x224c <fputc>
 700:	4b 14       	cp	r4, r11
 702:	38 f4       	brcc	.+14     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 704:	b6 01       	movw	r22, r12
 706:	80 e3       	ldi	r24, 0x30	; 48
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 26 11 	call	0x224c	; 0x224c <fputc>
 70e:	ba 94       	dec	r11
 710:	f7 cf       	rjmp	.-18     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 712:	4a 94       	dec	r4
 714:	e1 e0       	ldi	r30, 0x01	; 1
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	ec 0f       	add	r30, r28
 71a:	fd 1f       	adc	r31, r29
 71c:	e4 0d       	add	r30, r4
 71e:	f1 1d       	adc	r31, r1
 720:	80 81       	ld	r24, Z
 722:	b6 01       	movw	r22, r12
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 26 11 	call	0x224c	; 0x224c <fputc>
 72a:	41 10       	cpse	r4, r1
 72c:	f2 cf       	rjmp	.-28     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 72e:	00 23       	and	r16, r16
 730:	09 f4       	brne	.+2      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 732:	30 ce       	rjmp	.-928    	; 0x394 <vfprintf+0x5e>
 734:	b6 01       	movw	r22, r12
 736:	80 e2       	ldi	r24, 0x20	; 32
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 26 11 	call	0x224c	; 0x224c <fputc>
 73e:	01 50       	subi	r16, 0x01	; 1
 740:	f6 cf       	rjmp	.-20     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 742:	f6 01       	movw	r30, r12
 744:	87 81       	ldd	r24, Z+7	; 0x07
 746:	90 85       	ldd	r25, Z+8	; 0x08
 748:	02 c0       	rjmp	.+4      	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 74a:	8f ef       	ldi	r24, 0xFF	; 255
 74c:	9f ef       	ldi	r25, 0xFF	; 255
 74e:	62 96       	adiw	r28, 0x12	; 18
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	f8 94       	cli
 754:	de bf       	out	0x3e, r29	; 62
 756:	0f be       	out	0x3f, r0	; 63
 758:	cd bf       	out	0x3d, r28	; 61
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	1f 91       	pop	r17
 760:	0f 91       	pop	r16
 762:	ff 90       	pop	r15
 764:	ef 90       	pop	r14
 766:	df 90       	pop	r13
 768:	cf 90       	pop	r12
 76a:	bf 90       	pop	r11
 76c:	af 90       	pop	r10
 76e:	9f 90       	pop	r9
 770:	8f 90       	pop	r8
 772:	7f 90       	pop	r7
 774:	6f 90       	pop	r6
 776:	4f 90       	pop	r4
 778:	3f 90       	pop	r3
 77a:	2f 90       	pop	r2
 77c:	08 95       	ret

Disassembly of section .text.avrlibc:

00003104 <strnlen>:
    3104:	cf 92       	push	r12
    3106:	df 92       	push	r13
    3108:	ef 92       	push	r14
    310a:	6b 01       	movw	r12, r22
    310c:	e8 2e       	mov	r14, r24
    310e:	a8 2f       	mov	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	41 15       	cp	r20, r1
    3114:	51 05       	cpc	r21, r1
    3116:	31 f4       	brne	.+12     	; 0x3124 <strnlen+0x20>
    3118:	8c 19       	sub	r24, r12
    311a:	9d 09       	sbc	r25, r13
    311c:	ef 90       	pop	r14
    311e:	df 90       	pop	r13
    3120:	cf 90       	pop	r12
    3122:	08 95       	ret
    3124:	fc 01       	movw	r30, r24
    3126:	24 91       	lpm	r18, Z
    3128:	a7 fd       	sbrc	r26, 7
    312a:	20 81       	ld	r18, Z
    312c:	22 23       	and	r18, r18
    312e:	a1 f3       	breq	.-24     	; 0x3118 <strnlen+0x14>
    3130:	01 96       	adiw	r24, 0x01	; 1
    3132:	a1 1d       	adc	r26, r1
    3134:	41 50       	subi	r20, 0x01	; 1
    3136:	51 09       	sbc	r21, r1
    3138:	ec cf       	rjmp	.-40     	; 0x3112 <strnlen+0xe>

Disassembly of section .text.avrlibc:

0000224c <fputc>:
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	fb 01       	movw	r30, r22
    2256:	24 81       	ldd	r18, Z+4	; 0x04
    2258:	21 fd       	sbrc	r18, 1
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <fputc+0x16>
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	9f ef       	ldi	r25, 0xFF	; 255
    2260:	2c c0       	rjmp	.+88     	; 0x22ba <fputc+0x6e>
    2262:	22 ff       	sbrs	r18, 2
    2264:	16 c0       	rjmp	.+44     	; 0x2292 <fputc+0x46>
    2266:	47 81       	ldd	r20, Z+7	; 0x07
    2268:	50 85       	ldd	r21, Z+8	; 0x08
    226a:	25 81       	ldd	r18, Z+5	; 0x05
    226c:	36 81       	ldd	r19, Z+6	; 0x06
    226e:	42 17       	cp	r20, r18
    2270:	53 07       	cpc	r21, r19
    2272:	44 f4       	brge	.+16     	; 0x2284 <fputc+0x38>
    2274:	a0 81       	ld	r26, Z
    2276:	b1 81       	ldd	r27, Z+1	; 0x01
    2278:	9d 01       	movw	r18, r26
    227a:	2f 5f       	subi	r18, 0xFF	; 255
    227c:	3f 4f       	sbci	r19, 0xFF	; 255
    227e:	31 83       	std	Z+1, r19	; 0x01
    2280:	20 83       	st	Z, r18
    2282:	8c 93       	st	X, r24
    2284:	27 81       	ldd	r18, Z+7	; 0x07
    2286:	30 85       	ldd	r19, Z+8	; 0x08
    2288:	2f 5f       	subi	r18, 0xFF	; 255
    228a:	3f 4f       	sbci	r19, 0xFF	; 255
    228c:	30 87       	std	Z+8, r19	; 0x08
    228e:	27 83       	std	Z+7, r18	; 0x07
    2290:	14 c0       	rjmp	.+40     	; 0x22ba <fputc+0x6e>
    2292:	8b 01       	movw	r16, r22
    2294:	ec 01       	movw	r28, r24
    2296:	fb 01       	movw	r30, r22
    2298:	01 84       	ldd	r0, Z+9	; 0x09
    229a:	f2 85       	ldd	r31, Z+10	; 0x0a
    229c:	e0 2d       	mov	r30, r0
    229e:	09 95       	icall
    22a0:	89 2b       	or	r24, r25
    22a2:	e1 f6       	brne	.-72     	; 0x225c <fputc+0x10>
    22a4:	d8 01       	movw	r26, r16
    22a6:	17 96       	adiw	r26, 0x07	; 7
    22a8:	8d 91       	ld	r24, X+
    22aa:	9c 91       	ld	r25, X
    22ac:	18 97       	sbiw	r26, 0x08	; 8
    22ae:	01 96       	adiw	r24, 0x01	; 1
    22b0:	18 96       	adiw	r26, 0x08	; 8
    22b2:	9c 93       	st	X, r25
    22b4:	8e 93       	st	-X, r24
    22b6:	17 97       	sbiw	r26, 0x07	; 7
    22b8:	ce 01       	movw	r24, r28
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	08 95       	ret

Disassembly of section .text.avrlibc:

00001aa8 <__ultoa_invert>:
    1aa8:	fa 01       	movw	r30, r20
    1aaa:	aa 27       	eor	r26, r26
    1aac:	28 30       	cpi	r18, 0x08	; 8
    1aae:	51 f1       	breq	.+84     	; 0x1b04 <__ultoa_invert+0x5c>
    1ab0:	20 31       	cpi	r18, 0x10	; 16
    1ab2:	81 f1       	breq	.+96     	; 0x1b14 <__ultoa_invert+0x6c>
    1ab4:	e8 94       	clt
    1ab6:	6f 93       	push	r22
    1ab8:	6e 7f       	andi	r22, 0xFE	; 254
    1aba:	6e 5f       	subi	r22, 0xFE	; 254
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255
    1abe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	af 4f       	sbci	r26, 0xFF	; 255
    1ac4:	b1 e0       	ldi	r27, 0x01	; 1
    1ac6:	3e d0       	rcall	.+124    	; 0x1b44 <__ultoa_invert+0x9c>
    1ac8:	b4 e0       	ldi	r27, 0x04	; 4
    1aca:	3c d0       	rcall	.+120    	; 0x1b44 <__ultoa_invert+0x9c>
    1acc:	67 0f       	add	r22, r23
    1ace:	78 1f       	adc	r23, r24
    1ad0:	89 1f       	adc	r24, r25
    1ad2:	9a 1f       	adc	r25, r26
    1ad4:	a1 1d       	adc	r26, r1
    1ad6:	68 0f       	add	r22, r24
    1ad8:	79 1f       	adc	r23, r25
    1ada:	8a 1f       	adc	r24, r26
    1adc:	91 1d       	adc	r25, r1
    1ade:	a1 1d       	adc	r26, r1
    1ae0:	6a 0f       	add	r22, r26
    1ae2:	71 1d       	adc	r23, r1
    1ae4:	81 1d       	adc	r24, r1
    1ae6:	91 1d       	adc	r25, r1
    1ae8:	a1 1d       	adc	r26, r1
    1aea:	20 d0       	rcall	.+64     	; 0x1b2c <__ultoa_invert+0x84>
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <__ultoa_invert+0x48>
    1aee:	68 94       	set
    1af0:	3f 91       	pop	r19
    1af2:	2a e0       	ldi	r18, 0x0A	; 10
    1af4:	26 9f       	mul	r18, r22
    1af6:	11 24       	eor	r1, r1
    1af8:	30 19       	sub	r19, r0
    1afa:	30 5d       	subi	r19, 0xD0	; 208
    1afc:	31 93       	st	Z+, r19
    1afe:	de f6       	brtc	.-74     	; 0x1ab6 <__ultoa_invert+0xe>
    1b00:	cf 01       	movw	r24, r30
    1b02:	08 95       	ret
    1b04:	46 2f       	mov	r20, r22
    1b06:	47 70       	andi	r20, 0x07	; 7
    1b08:	40 5d       	subi	r20, 0xD0	; 208
    1b0a:	41 93       	st	Z+, r20
    1b0c:	b3 e0       	ldi	r27, 0x03	; 3
    1b0e:	0f d0       	rcall	.+30     	; 0x1b2e <__ultoa_invert+0x86>
    1b10:	c9 f7       	brne	.-14     	; 0x1b04 <__ultoa_invert+0x5c>
    1b12:	f6 cf       	rjmp	.-20     	; 0x1b00 <__ultoa_invert+0x58>
    1b14:	46 2f       	mov	r20, r22
    1b16:	4f 70       	andi	r20, 0x0F	; 15
    1b18:	40 5d       	subi	r20, 0xD0	; 208
    1b1a:	4a 33       	cpi	r20, 0x3A	; 58
    1b1c:	18 f0       	brcs	.+6      	; 0x1b24 <__ultoa_invert+0x7c>
    1b1e:	49 5d       	subi	r20, 0xD9	; 217
    1b20:	31 fd       	sbrc	r19, 1
    1b22:	40 52       	subi	r20, 0x20	; 32
    1b24:	41 93       	st	Z+, r20
    1b26:	02 d0       	rcall	.+4      	; 0x1b2c <__ultoa_invert+0x84>
    1b28:	a9 f7       	brne	.-22     	; 0x1b14 <__ultoa_invert+0x6c>
    1b2a:	ea cf       	rjmp	.-44     	; 0x1b00 <__ultoa_invert+0x58>
    1b2c:	b4 e0       	ldi	r27, 0x04	; 4
    1b2e:	a6 95       	lsr	r26
    1b30:	97 95       	ror	r25
    1b32:	87 95       	ror	r24
    1b34:	77 95       	ror	r23
    1b36:	67 95       	ror	r22
    1b38:	ba 95       	dec	r27
    1b3a:	c9 f7       	brne	.-14     	; 0x1b2e <__ultoa_invert+0x86>
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	61 05       	cpc	r22, r1
    1b40:	71 05       	cpc	r23, r1
    1b42:	08 95       	ret
    1b44:	9b 01       	movw	r18, r22
    1b46:	ac 01       	movw	r20, r24
    1b48:	0a 2e       	mov	r0, r26
    1b4a:	06 94       	lsr	r0
    1b4c:	57 95       	ror	r21
    1b4e:	47 95       	ror	r20
    1b50:	37 95       	ror	r19
    1b52:	27 95       	ror	r18
    1b54:	ba 95       	dec	r27
    1b56:	c9 f7       	brne	.-14     	; 0x1b4a <__ultoa_invert+0xa2>
    1b58:	62 0f       	add	r22, r18
    1b5a:	73 1f       	adc	r23, r19
    1b5c:	84 1f       	adc	r24, r20
    1b5e:	95 1f       	adc	r25, r21
    1b60:	a0 1d       	adc	r26, r0
    1b62:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00003060 <__prologue_saves__>:
    3060:	2f 92       	push	r2
    3062:	3f 92       	push	r3
    3064:	4f 92       	push	r4
    3066:	5f 92       	push	r5
    3068:	6f 92       	push	r6
    306a:	7f 92       	push	r7
    306c:	8f 92       	push	r8
    306e:	9f 92       	push	r9
    3070:	af 92       	push	r10
    3072:	bf 92       	push	r11
    3074:	cf 92       	push	r12
    3076:	df 92       	push	r13
    3078:	ef 92       	push	r14
    307a:	ff 92       	push	r15
    307c:	0f 93       	push	r16
    307e:	1f 93       	push	r17
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	ca 1b       	sub	r28, r26
    308a:	db 0b       	sbc	r29, r27
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	de bf       	out	0x3e, r29	; 62
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

0000313a <__epilogue_restores__>:
    313a:	2a 88       	ldd	r2, Y+18	; 0x12
    313c:	39 88       	ldd	r3, Y+17	; 0x11
    313e:	48 88       	ldd	r4, Y+16	; 0x10
    3140:	5f 84       	ldd	r5, Y+15	; 0x0f
    3142:	6e 84       	ldd	r6, Y+14	; 0x0e
    3144:	7d 84       	ldd	r7, Y+13	; 0x0d
    3146:	8c 84       	ldd	r8, Y+12	; 0x0c
    3148:	9b 84       	ldd	r9, Y+11	; 0x0b
    314a:	aa 84       	ldd	r10, Y+10	; 0x0a
    314c:	b9 84       	ldd	r11, Y+9	; 0x09
    314e:	c8 84       	ldd	r12, Y+8	; 0x08
    3150:	df 80       	ldd	r13, Y+7	; 0x07
    3152:	ee 80       	ldd	r14, Y+6	; 0x06
    3154:	fd 80       	ldd	r15, Y+5	; 0x05
    3156:	0c 81       	ldd	r16, Y+4	; 0x04
    3158:	1b 81       	ldd	r17, Y+3	; 0x03
    315a:	aa 81       	ldd	r26, Y+2	; 0x02
    315c:	b9 81       	ldd	r27, Y+1	; 0x01
    315e:	ce 0f       	add	r28, r30
    3160:	d1 1d       	adc	r29, r1
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	ed 01       	movw	r28, r26
    316e:	08 95       	ret
