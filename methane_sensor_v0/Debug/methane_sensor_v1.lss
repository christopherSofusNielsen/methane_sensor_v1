
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000036da  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ea  00800100  00800100  000036da  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000036da  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000054  00000000  00000000  00003735  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000840  00000000  00000000  00003790  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000aa78  00000000  00000000  00003fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002338  00000000  00000000  0000ea48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d59  00000000  00000000  00010d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001514  00000000  00000000  00014adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088b  00000000  00000000  00015ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045f3  00000000  00000000  0001687b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000688  00000000  00000000  0001ae6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000035f6  000035f6  000036ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001b4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  0000349e  0000349e  00003572  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  000033c0  000033c0  00003494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  000034ac  000034ac  00003580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  000033d4  000033d4  000034a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  000034ba  000034ba  0000358e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  000033e8  000033e8  000034bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_3 00000014  000033fc  000033fc  000034d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.rn2483_init 00000008  000035be  000035be  00003692  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.SCD30_HAL_data_ready 0000000a  00003596  00003596  0000366a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_16 0000004e  000027ee  000027ee  000028c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .bss._cb      00000002  00800726  00800726  000036da  2**0
                  ALLOC
 26 .text.__vector_13 0000004e  0000283c  0000283c  00002910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .bss._cb      00000002  00800728  00800728  000036da  2**0
                  ALLOC
 28 .text.__vector_9 00000098  00001ee2  00001ee2  00001fb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .bss.cnt      00000001  0080072a  0080072a  000036da  2**0
                  ALLOC
 30 .bss.callbacks 0000000a  00800710  00800710  000036da  2**0
                  ALLOC
 31 .text.start_and_write_data 0000004c  000028d8  000028d8  000029ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.read_and_stop 0000005a  0000263e  0000263e  00002712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TWI_API_write_data_stop 00000010  0000346e  0000346e  00003542  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TWI_API_read_data_ack_end_nack_stop 00000024  0000314a  0000314a  0000321e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TWI_HAL_init 00000012  00003438  00003438  0000350c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.TWI_HAL_start 00000048  00002a9c  00002a9c  00002b70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.TWI_HAL_write_byte 00000020  000031d8  000031d8  000032ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TWI_HAL_read_byte_ack 00000014  00003410  00003410  000034e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TWI_HAL_read_byte_nack 00000014  00003424  00003424  000034f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TWI_HAL_stop 00000010  0000347e  0000347e  00003552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.copy_buffer 0000002e  00002fce  00002fce  000030a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.uart0_hal_init 0000003c  00002c38  00002c38  00002d0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.uart0_hal_send_message 00000034  00002ea6  00002ea6  00002f7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.uart0_hal_message_ready 0000000e  000034c8  000034c8  0000359c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.uart0_hal_clear_rx_buffer 0000000a  000035a0  000035a0  00003674  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.uart0_hal_read_message_as_str 00000028  00003084  00003084  00003158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__vector_22 0000004a  00002a08  00002a08  00002adc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__vector_20 00000074  00002422  00002422  000024f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .bss.rx_buffer_has_message 00000001  0080072b  0080072b  000036da  2**0
                  ALLOC
 50 .bss.rx_buffer_data_len 00000001  0080072c  0080072c  000036da  2**0
                  ALLOC
 51 .bss.tx_buffer_cursor 00000001  0080072d  0080072d  000036da  2**0
                  ALLOC
 52 .bss.tx_buffer_data_len 00000001  0080072e  0080072e  000036da  2**0
                  ALLOC
 53 .text.copy_buffer 0000002e  00002ffc  00002ffc  000030d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.uart1_hal_init 0000003c  00002c74  00002c74  00002d48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.uart1_hal_send_string 0000008a  0000213e  0000213e  00002212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.uart1_hal_message_ready 0000000e  000034d6  000034d6  000035aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.uart1_hal_rx_full 0000000e  000034e4  000034e4  000035b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.uart1_hal_clear_rx_buffer 0000000a  000035aa  000035aa  0000367e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.uart1_hal_read_message_as_str 00000028  000030ac  000030ac  00003180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.__vector_30 0000004a  00002a52  00002a52  00002b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.__vector_28 00000070  00002496  00002496  0000256a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .bss.rx_buffer_has_message 00000001  0080072f  0080072f  000036da  2**0
                  ALLOC
 63 .bss.rx_buffer_data_len 00000001  00800730  00800730  000036da  2**0
                  ALLOC
 64 .bss.rx_buffer 00000096  00800616  00800616  000036da  2**0
                  ALLOC
 65 .bss.tx_buffer_cursor 00000001  00800731  00800731  000036da  2**0
                  ALLOC
 66 .bss.tx_buffer_data_len 00000001  00800732  00800732  000036da  2**0
                  ALLOC
 67 .bss.tx_buffer 0000012c  008004ea  008004ea  000036da  2**0
                  ALLOC
 68 .text.main    00000018  00003338  00003338  0000340c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.calc_ppm_methane 00000096  00002012  00002012  000020e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.ADC_get_value 00000056  000026f0  000026f0  000027c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .data.PPM_factor 00000004  0080071a  000035fa  000036ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 72 .data.RRL     00000004  0080071e  000035fe  000036d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 73 .data.Vc      00000004  00800722  00003602  000036d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 74 .text.EM_has_deveui 00000016  00003368  00003368  0000343c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.EM_has_appeui 00000016  0000337e  0000337e  00003452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.EM_has_appkey 00000016  00003394  00003394  00003468  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.EM_set_deveui 0000003a  00002cb0  00002cb0  00002d84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.EM_get_deveui 00000030  00002f3e  00002f3e  00003012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.EM_set_appeui 0000003a  00002cea  00002cea  00002dbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.EM_get_appeui 00000030  00002f6e  00002f6e  00003042  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.EM_set_appkey 0000003a  00002d24  00002d24  00002df8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.EM_get_appkey 00000030  00002f9e  00002f9e  00003072  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.EM_set_ppmfactor 0000000e  000034f2  000034f2  000035c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.EM_get_ppmfactor 0000001e  00003218  00003218  000032ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.EM_set_RRL 0000000e  00003500  00003500  000035d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.EM_get_RRL 0000001e  00003236  00003236  0000330a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.EM_set_Vcc 0000000e  0000350e  0000350e  000035e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.EM_get_Vcc 0000001e  00003254  00003254  00003328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.EM_set_collections 0000000e  0000351c  0000351c  000035f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.EM_get_collections 00000010  0000348e  0000348e  00003562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.LM_forward_msg 00000006  000035de  000035de  000036b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .progmemx.data 00000073  000003c7  000003c7  0000049b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 93 .text.attach_ending 0000001c  000032cc  000032cc  000033a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.util_transmit_msg 0000001c  000032e8  000032e8  000033bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.util_read_msg 00000006  000035e4  000035e4  000036b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.util_lora_forward_msg 00000036  00002dce  00002dce  00002ea2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.bytes_2_uint 0000001a  00003304  00003304  000033d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.init_measurement 00000038  00002d5e  00002d5e  00002e32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.validate_data 00000032  00002eda  00002eda  00002fae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.read_value 000000a2  00001e40  00001e40  00001f14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.SCD30_init_get_reading 0000001e  00003272  00003272  00003346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.SCD30_get_reading 0000001a  0000331e  0000331e  000033f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .progmemx.data.READ_DATA_CMD 00000002  000004ad  000004ad  00000581  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
104 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000004a3  000004a3  00000577  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
105 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000004a8  000004a8  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
106 .text.parse_cmd 00000028  000030d4  000030d4  000031a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.validate_cmd 00000056  00002746  00002746  0000281a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .progmemx.data 000000a4  000002a8  000002a8  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
109 .text.CONF_enter 00000122  00001506  00001506  000015da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .progmemx.data 00000061  0000043a  0000043a  0000050e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
111 .text.CON_RN2483_parse 00000026  00003124  00003124  000031f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.CON_RN2483 000000e0  00001742  00001742  00001816  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .progmemx.data 000000b4  000001f4  000001f4  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
114 .text.read_cols 000000bc  00001b70  00001b70  00001c44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.write_deveui 00000078  00002242  00002242  00002316  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.write_appeui 00000078  000022ba  000022ba  0000238e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.write_appkey 00000078  00002332  00002332  00002406  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.write_PPM_factor 0000004c  00002924  00002924  000029f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.write_RRL 0000004c  00002970  00002970  00002a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.write_VCC 0000004c  000029bc  000029bc  00002a90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.write_cols 0000012e  000013d8  000013d8  000014ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.write_reset 000000ce  000019d4  000019d4  00001aa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.handle_read 000001d8  00000ed0  00000ed0  00000fa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.handle_write 00000180  00001258  00001258  0000132c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .bss.arg      00000050  008006ac  008006ac  000036da  2**0
                  ALLOC
126 .progmemx.data 0000007b  0000034c  0000034c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
127 .text.handle_methane 0000011a  00001628  00001628  000016fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.handle_co2 000000a4  00001d9c  00001d9c  00001e70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.handle_sample 00000098  00001f7a  00001f7a  0000204e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.init_methane_SCD30 00000028  000030fc  000030fc  000031d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .bss.par      00000014  008006fc  008006fc  000036da  2**0
                  ALLOC
132 .text.count_parameters 00000052  0000279c  0000279c  00002870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.par_index 00000070  00002506  00002506  000025da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.get_parameter 00000096  000020a8  000020a8  0000217c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.calc_crc8 00000036  00002e04  00002e04  00002ed8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.get_decimal 000000b4  00001ce8  00001ce8  00001dbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.str2flaot 0000004e  0000288a  0000288a  0000295e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.is_float 00000058  00002698  00002698  0000276c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.avrlibc.fplib 0000000e  0000352a  0000352a  000035fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.avrlibc.fplib 000000ce  00001aa2  00001aa2  00001b76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.avrlibc.fplib 00000008  000035c6  000035c6  0000369a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.avrlibc.fplib 000000de  00001822  00001822  000018f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.avrlibc.fplib 0000005e  000025e0  000025e0  000026b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.avrlibc.fplib 0000007a  000021c8  000021c8  0000229c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.avrlibc.fplib 0000000c  0000357e  0000357e  00003652  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.avrlibc.fplib 00000006  000035ea  000035ea  000036be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.avrlibc.fplib 0000000e  00003538  00003538  0000360c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.avrlibc.fplib 0000000e  00003546  00003546  0000361a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.avrlibc.fplib 00000022  000031b6  000031b6  0000328a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.avrlibc.fplib 00000044  00002b2a  00002b2a  00002bfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.avrlibc.fplib 0000000e  00003554  00003554  00003628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.avrlibc.fplib 00000008  000035ce  000035ce  000036a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.avrlibc.fplib 000000d4  00001900  00001900  000019d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .progmemx.data 00000008  0000049b  0000049b  0000056f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
155 .text.avrlibc 00000744  000004b0  000004b0  00000584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.libgcc  0000000c  0000358a  0000358a  0000365e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.libgcc.mul 0000001e  00003290  00003290  00003364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.libgcc.prologue 00000038  00002d96  00002d96  00002e6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.libgcc.prologue 00000036  00002e3a  00002e3a  00002f0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.avrlibc 00000008  000035d6  000035d6  000036aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.avrlibc 0000000e  00003562  00003562  00003636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.avrlibc 000002dc  00000bf4  00000bf4  00000cc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.avrlibc 000001b0  000010a8  000010a8  0000117c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.avrlibc 00000012  0000344a  0000344a  0000351e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.avrlibc 00000032  00002f0c  00002f0c  00002fe0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.avrlibc 0000002e  0000302a  0000302a  000030fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.avrlibc 00000042  00002bf6  00002bf6  00002cca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.avrlibc 0000006a  00002576  00002576  0000264a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.avrlibc 0000002c  00003058  00003058  0000312c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.avrlibc 0000001e  000032ae  000032ae  00003382  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.avrlibc 00000036  00002e70  00002e70  00002f44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.avrlibc 00000078  000023aa  000023aa  0000247e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.avrlibc 00000046  00002ae4  00002ae4  00002bb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.avrlibc 000000bc  00001c2c  00001c2c  00001d00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.avrlibc 00000006  000035f0  000035f0  000036c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.avrlibc 00000024  0000316e  0000316e  00003242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.avrlibc 00000012  0000345c  0000345c  00003530  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.avrlibc 0000000e  00003570  00003570  00003644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.avrlibc 00000044  00002b6e  00002b6e  00002c42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.avrlibc 00000024  00003192  00003192  00003266  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.avrlibc 00000018  00003350  00003350  00003424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.libgcc.mul 00000020  000031f8  000031f8  000032cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.libgcc.div 00000044  00002bb2  00002bb2  00002c86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.libgcc.mul 00000016  000033aa  000033aa  0000347e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.libgcc  0000000a  000035b4  000035b4  00003688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__ctors_end>
   4:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
   8:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
   c:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__vector_3>
  10:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  14:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  18:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  1c:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  20:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  24:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__vector_9>
  28:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  2c:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  30:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  34:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__vector_13>
  38:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  3c:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  40:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__vector_16>
  44:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  48:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  4c:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  50:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__vector_20>
  54:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  58:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__vector_22>
  5c:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  60:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  64:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  68:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  6c:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  70:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__vector_28>
  74:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__bad_interrupt>
  78:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__vector_30>
  7c:	9c 0a       	sbc	r9, r28
  7e:	b1 0a       	sbc	r11, r17
  80:	09 0b       	sbc	r16, r25
  82:	ba 0a       	sbc	r11, r26
  84:	12 0b       	sbc	r17, r18
  86:	fb 0a       	sbc	r15, r27
  88:	02 0b       	sbc	r16, r18
  8a:	ca 0a       	sbc	r12, r26
  8c:	d6 0a       	sbc	r13, r22
  8e:	e2 0a       	sbc	r14, r18
  90:	e8 0a       	sbc	r14, r24
  92:	f4 0a       	sbc	r15, r20

00000094 <.dinit>:
  94:	01 00       	.word	0x0001	; ????
  96:	07 1a       	sub	r0, r23
  98:	80 07       	cpc	r24, r16
  9a:	1a 07       	cpc	r17, r26
  9c:	26 00       	.word	0x0026	; ????
  9e:	35 fa       	bst	r3, 5
  a0:	07 26       	eor	r0, r23
  a2:	07 33       	cpi	r16, 0x37	; 55
  a4:	80 00       	.word	0x0080	; ????

000000a6 <__trampolines_end>:
  a6:	00 40       	sbci	r16, 0x00	; 0
  a8:	7a 10       	cpse	r7, r10
  aa:	f3 5a       	subi	r31, 0xA3	; 163
  ac:	00 a0       	ldd	r0, Z+32	; 0x20
  ae:	72 4e       	sbci	r23, 0xE2	; 226
  b0:	18 09       	sbc	r17, r8
  b2:	00 10       	cpse	r0, r0
  b4:	a5 d4       	rcall	.+2378   	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
  b6:	e8 00       	.word	0x00e8	; ????
  b8:	00 e8       	ldi	r16, 0x80	; 128
  ba:	76 48       	sbci	r23, 0x86	; 134
  bc:	17 00       	.word	0x0017	; ????
  be:	00 e4       	ldi	r16, 0x40	; 64
  c0:	0b 54       	subi	r16, 0x4B	; 75
  c2:	02 00       	.word	0x0002	; ????
  c4:	00 ca       	rjmp	.-3072   	; 0xfffff4c6 <__eeprom_end+0xff7ef4c6>
  c6:	9a 3b       	cpi	r25, 0xBA	; 186
  c8:	00 00       	nop
  ca:	00 e1       	ldi	r16, 0x10	; 16
  cc:	f5 05       	cpc	r31, r5
  ce:	00 00       	nop
  d0:	80 96       	adiw	r24, 0x20	; 32
  d2:	98 00       	.word	0x0098	; ????
  d4:	00 00       	nop
  d6:	40 42       	sbci	r20, 0x20	; 32
  d8:	0f 00       	.word	0x000f	; ????
  da:	00 00       	nop
  dc:	a0 86       	std	Z+8, r10	; 0x08
  de:	01 00       	.word	0x0001	; ????
  e0:	00 00       	nop
  e2:	10 27       	eor	r17, r16
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	e8 03       	fmulsu	r22, r16
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	64 00       	.word	0x0064	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	0a 00       	.word	0x000a	; ????
  f6:	00 00       	nop
  f8:	00 00       	nop
  fa:	01 00       	.word	0x0001	; ????
  fc:	00 00       	nop
  fe:	00 00       	nop
 100:	2c 76       	andi	r18, 0x6C	; 108
 102:	d8 88       	ldd	r13, Y+16	; 0x10
 104:	dc 67       	ori	r29, 0x7C	; 124
 106:	4f 08       	sbc	r4, r15
 108:	23 df       	rcall	.-442    	; 0xffffff50 <__eeprom_end+0xff7eff50>
 10a:	c1 df       	rcall	.-126    	; 0x8e <__SREG__+0x4f>
 10c:	ae 59       	subi	r26, 0x9E	; 158
 10e:	e1 b1       	in	r30, 0x01	; 1
 110:	b7 96       	adiw	r30, 0x27	; 39
 112:	e5 e3       	ldi	r30, 0x35	; 53
 114:	e4 53       	subi	r30, 0x34	; 52
 116:	c6 3a       	cpi	r28, 0xA6	; 166
 118:	e6 51       	subi	r30, 0x16	; 22
 11a:	99 76       	andi	r25, 0x69	; 105
 11c:	96 e8       	ldi	r25, 0x86	; 134
 11e:	e6 c2       	rjmp	.+1484   	; 0x6ec <vfprintf+0x23c>
 120:	84 26       	eor	r8, r20
 122:	eb 89       	ldd	r30, Y+19	; 0x13
 124:	8c 9b       	sbis	0x11, 4	; 17
 126:	62 ed       	ldi	r22, 0xD2	; 210
 128:	40 7c       	andi	r20, 0xC0	; 192
 12a:	6f fc       	.word	0xfc6f	; ????
 12c:	ef bc       	out	0x2f, r14	; 47
 12e:	9c 9f       	mul	r25, r28
 130:	40 f2       	brcs	.-112    	; 0xc2 <__trampolines_end+0x1c>
 132:	ba a5       	ldd	r27, Y+42	; 0x2a
 134:	6f a5       	ldd	r22, Y+47	; 0x2f
 136:	f4 90       	lpm	r15, Z
 138:	05 5a       	subi	r16, 0xA5	; 165
 13a:	2a f7       	brpl	.-54     	; 0x106 <__trampolines_end+0x60>
 13c:	5c 93       	st	X, r21
 13e:	6b 6c       	ori	r22, 0xCB	; 203
 140:	f9 67       	ori	r31, 0x79	; 121
 142:	6d c1       	rjmp	.+730    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 144:	1b fc       	.word	0xfc1b	; ????
 146:	e0 e4       	ldi	r30, 0x40	; 64
 148:	0d 47       	sbci	r16, 0x7D	; 125
 14a:	fe f5       	brtc	.+126    	; 0x1ca <__do_copy_data+0x1e>
 14c:	20 e6       	ldi	r18, 0x60	; 96
 14e:	b5 00       	.word	0x00b5	; ????
 150:	d0 ed       	ldi	r29, 0xD0	; 208
 152:	90 2e       	mov	r9, r16
 154:	03 00       	.word	0x0003	; ????
 156:	94 35       	cpi	r25, 0x54	; 84
 158:	77 05       	cpc	r23, r7
 15a:	00 80       	ld	r0, Z
 15c:	84 1e       	adc	r8, r20
 15e:	08 00       	.word	0x0008	; ????
 160:	00 20       	and	r0, r0
 162:	4e 0a       	sbc	r4, r30
 164:	00 00       	nop
 166:	00 c8       	rjmp	.-4096   	; 0xfffff168 <__eeprom_end+0xff7ef168>
 168:	0c 33       	cpi	r16, 0x3C	; 60
 16a:	33 33       	cpi	r19, 0x33	; 51
 16c:	33 0f       	add	r19, r19
 16e:	98 6e       	ori	r25, 0xE8	; 232
 170:	12 83       	std	Z+2, r17	; 0x02
 172:	11 41       	sbci	r17, 0x11	; 17
 174:	ef 8d       	ldd	r30, Y+31	; 0x1f
 176:	21 14       	cp	r2, r1
 178:	89 3b       	cpi	r24, 0xB9	; 185
 17a:	e6 55       	subi	r30, 0x56	; 86
 17c:	16 cf       	rjmp	.-468    	; 0xffffffaa <__eeprom_end+0xff7effaa>
 17e:	fe e6       	ldi	r31, 0x6E	; 110
 180:	db 18       	sub	r13, r11
 182:	d1 84       	ldd	r13, Z+9	; 0x09
 184:	4b 38       	cpi	r20, 0x8B	; 139
 186:	1b f7       	brvc	.-58     	; 0x14e <__trampolines_end+0xa8>
 188:	7c 1d       	adc	r23, r12
 18a:	90 1d       	adc	r25, r0
 18c:	a4 bb       	out	0x14, r26	; 20
 18e:	e4 24       	eor	r14, r4
 190:	20 32       	cpi	r18, 0x20	; 32
 192:	84 72       	andi	r24, 0x24	; 36
 194:	5e 22       	and	r5, r30
 196:	81 00       	.word	0x0081	; ????
 198:	c9 f1       	breq	.+114    	; 0x20c <_etext+0x18>
 19a:	24 ec       	ldi	r18, 0xC4	; 196
 19c:	a1 e5       	ldi	r26, 0x51	; 81
 19e:	3d 27       	eor	r19, r29

000001a0 <__ctors_end>:
 1a0:	11 24       	eor	r1, r1
 1a2:	1f be       	out	0x3f, r1	; 63
 1a4:	cf ef       	ldi	r28, 0xFF	; 255
 1a6:	d0 e1       	ldi	r29, 0x10	; 16
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	cd bf       	out	0x3d, r28	; 61

000001ac <__do_copy_data>:
 1ac:	e4 e9       	ldi	r30, 0x94	; 148
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	17 c0       	rjmp	.+46     	; 0x1e2 <__do_clear_bss+0x8>
 1b4:	b5 91       	lpm	r27, Z+
 1b6:	a5 91       	lpm	r26, Z+
 1b8:	35 91       	lpm	r19, Z+
 1ba:	25 91       	lpm	r18, Z+
 1bc:	05 91       	lpm	r16, Z+
 1be:	07 fd       	sbrc	r16, 7
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <__do_clear_bss>
 1c2:	95 91       	lpm	r25, Z+
 1c4:	85 91       	lpm	r24, Z+
 1c6:	ef 01       	movw	r28, r30
 1c8:	f9 2f       	mov	r31, r25
 1ca:	e8 2f       	mov	r30, r24
 1cc:	05 90       	lpm	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x20>
 1d6:	fe 01       	movw	r30, r28
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__do_clear_bss+0x8>

000001da <__do_clear_bss>:
 1da:	1d 92       	st	X+, r1
 1dc:	a2 17       	cp	r26, r18
 1de:	b3 07       	cpc	r27, r19
 1e0:	e1 f7       	brne	.-8      	; 0x1da <__do_clear_bss>
 1e2:	e5 3a       	cpi	r30, 0xA5	; 165
 1e4:	f4 07       	cpc	r31, r20
 1e6:	31 f7       	brne	.-52     	; 0x1b4 <__do_copy_data+0x8>
 1e8:	0e 94 9c 19 	call	0x3338	; 0x3338 <main>
 1ec:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>

Disassembly of section .text:

000035f6 <__bad_interrupt>:
    35f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

0000349e <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    349e:	81 b1       	in	r24, 0x01	; 1
    34a0:	88 60       	ori	r24, 0x08	; 8
    34a2:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    34a4:	82 b1       	in	r24, 0x02	; 2
    34a6:	87 7f       	andi	r24, 0xF7	; 247
    34a8:	82 b9       	out	0x02, r24	; 2
    34aa:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

000033c0 <PM_HAL_adc_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    33c0:	88 23       	and	r24, r24
    33c2:	21 f0       	breq	.+8      	; 0x33cc <PM_HAL_adc_power+0xc>
    33c4:	82 b1       	in	r24, 0x02	; 2
    33c6:	88 60       	ori	r24, 0x08	; 8
    33c8:	82 b9       	out	0x02, r24	; 2
    33ca:	08 95       	ret
    33cc:	82 b1       	in	r24, 0x02	; 2
    33ce:	87 7f       	andi	r24, 0xF7	; 247
    33d0:	82 b9       	out	0x02, r24	; 2
    33d2:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

000034ac <PM_HAL_meth_power_init>:
		clear_bit(PORTA, 3);
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    34ac:	81 b1       	in	r24, 0x01	; 1
    34ae:	80 62       	ori	r24, 0x20	; 32
    34b0:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    34b2:	82 b1       	in	r24, 0x02	; 2
    34b4:	8f 7d       	andi	r24, 0xDF	; 223
    34b6:	82 b9       	out	0x02, r24	; 2
    34b8:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

000033d4 <PM_HAL_meth_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    33d4:	88 23       	and	r24, r24
    33d6:	21 f0       	breq	.+8      	; 0x33e0 <PM_HAL_meth_power+0xc>
    33d8:	82 b1       	in	r24, 0x02	; 2
    33da:	80 62       	ori	r24, 0x20	; 32
    33dc:	82 b9       	out	0x02, r24	; 2
    33de:	08 95       	ret
    33e0:	82 b1       	in	r24, 0x02	; 2
    33e2:	8f 7d       	andi	r24, 0xDF	; 223
    33e4:	82 b9       	out	0x02, r24	; 2
    33e6:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

000034ba <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    34ba:	81 b1       	in	r24, 0x01	; 1
    34bc:	80 61       	ori	r24, 0x10	; 16
    34be:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    34c0:	82 b1       	in	r24, 0x02	; 2
    34c2:	8f 7e       	andi	r24, 0xEF	; 239
    34c4:	82 b9       	out	0x02, r24	; 2
    34c6:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

000033e8 <PM_HAL_SCD30_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    33e8:	88 23       	and	r24, r24
    33ea:	21 f0       	breq	.+8      	; 0x33f4 <PM_HAL_SCD30_power+0xc>
    33ec:	82 b1       	in	r24, 0x02	; 2
    33ee:	80 61       	ori	r24, 0x10	; 16
    33f0:	82 b9       	out	0x02, r24	; 2
    33f2:	08 95       	ret
    33f4:	82 b1       	in	r24, 0x02	; 2
    33f6:	8f 7e       	andi	r24, 0xEF	; 239
    33f8:	82 b9       	out	0x02, r24	; 2
    33fa:	08 95       	ret

Disassembly of section .text.__vector_3:

000033fc <__vector_3>:
}

ISR(INT2_vect){
    33fc:	1f 92       	push	r1
    33fe:	0f 92       	push	r0
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	0f 92       	push	r0
    3404:	11 24       	eor	r1, r1
	
}
    3406:	0f 90       	pop	r0
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	0f 90       	pop	r0
    340c:	1f 90       	pop	r1
    340e:	18 95       	reti

Disassembly of section .text.rn2483_init:

000035be <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    35be:	84 b1       	in	r24, 0x04	; 4
    35c0:	80 61       	ori	r24, 0x10	; 16
    35c2:	84 b9       	out	0x04, r24	; 4
    35c4:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00003596 <SCD30_HAL_data_ready>:
	clear_bit(DDRC, 6);
	clear_bit(PORTC, 6);
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    3596:	86 b1       	in	r24, 0x06	; 6
    3598:	86 fb       	bst	r24, 6
    359a:	88 27       	eor	r24, r24
    359c:	80 f9       	bld	r24, 0
    359e:	08 95       	ret

Disassembly of section .text.__vector_16:

000027ee <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    27ee:	1f 92       	push	r1
    27f0:	0f 92       	push	r0
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	0f 92       	push	r0
    27f6:	11 24       	eor	r1, r1
    27f8:	2f 93       	push	r18
    27fa:	3f 93       	push	r19
    27fc:	4f 93       	push	r20
    27fe:	5f 93       	push	r21
    2800:	6f 93       	push	r22
    2802:	7f 93       	push	r23
    2804:	8f 93       	push	r24
    2806:	9f 93       	push	r25
    2808:	af 93       	push	r26
    280a:	bf 93       	push	r27
    280c:	ef 93       	push	r30
    280e:	ff 93       	push	r31
	_cb();
    2810:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <_cb>
    2814:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <_cb+0x1>
    2818:	09 95       	icall
}
    281a:	ff 91       	pop	r31
    281c:	ef 91       	pop	r30
    281e:	bf 91       	pop	r27
    2820:	af 91       	pop	r26
    2822:	9f 91       	pop	r25
    2824:	8f 91       	pop	r24
    2826:	7f 91       	pop	r23
    2828:	6f 91       	pop	r22
    282a:	5f 91       	pop	r21
    282c:	4f 91       	pop	r20
    282e:	3f 91       	pop	r19
    2830:	2f 91       	pop	r18
    2832:	0f 90       	pop	r0
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	0f 90       	pop	r0
    2838:	1f 90       	pop	r1
    283a:	18 95       	reti

Disassembly of section .text.__vector_13:

0000283c <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    283c:	1f 92       	push	r1
    283e:	0f 92       	push	r0
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	0f 92       	push	r0
    2844:	11 24       	eor	r1, r1
    2846:	2f 93       	push	r18
    2848:	3f 93       	push	r19
    284a:	4f 93       	push	r20
    284c:	5f 93       	push	r21
    284e:	6f 93       	push	r22
    2850:	7f 93       	push	r23
    2852:	8f 93       	push	r24
    2854:	9f 93       	push	r25
    2856:	af 93       	push	r26
    2858:	bf 93       	push	r27
    285a:	ef 93       	push	r30
    285c:	ff 93       	push	r31
	_cb();
    285e:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <_cb>
    2862:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <_cb+0x1>
    2866:	09 95       	icall
    2868:	ff 91       	pop	r31
    286a:	ef 91       	pop	r30
    286c:	bf 91       	pop	r27
    286e:	af 91       	pop	r26
    2870:	9f 91       	pop	r25
    2872:	8f 91       	pop	r24
    2874:	7f 91       	pop	r23
    2876:	6f 91       	pop	r22
    2878:	5f 91       	pop	r21
    287a:	4f 91       	pop	r20
    287c:	3f 91       	pop	r19
    287e:	2f 91       	pop	r18
    2880:	0f 90       	pop	r0
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	0f 90       	pop	r0
    2886:	1f 90       	pop	r1
    2888:	18 95       	reti

Disassembly of section .text.__vector_9:

00001ee2 <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
    1ee2:	1f 92       	push	r1
    1ee4:	0f 92       	push	r0
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	0f 92       	push	r0
    1eea:	11 24       	eor	r1, r1
    1eec:	2f 93       	push	r18
    1eee:	3f 93       	push	r19
    1ef0:	4f 93       	push	r20
    1ef2:	5f 93       	push	r21
    1ef4:	6f 93       	push	r22
    1ef6:	7f 93       	push	r23
    1ef8:	8f 93       	push	r24
    1efa:	9f 93       	push	r25
    1efc:	af 93       	push	r26
    1efe:	bf 93       	push	r27
    1f00:	cf 93       	push	r28
    1f02:	ef 93       	push	r30
    1f04:	ff 93       	push	r31
	cnt++;
    1f06:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <cnt>
    1f0a:	9f 5f       	subi	r25, 0xFF	; 255
    1f0c:	90 93 2a 07 	sts	0x072A, r25	; 0x80072a <cnt>
	
	if(cnt % 31==0){
    1f10:	89 e0       	ldi	r24, 0x09	; 9
    1f12:	98 9f       	mul	r25, r24
    1f14:	21 2d       	mov	r18, r1
    1f16:	11 24       	eor	r1, r1
    1f18:	89 2f       	mov	r24, r25
    1f1a:	82 1b       	sub	r24, r18
    1f1c:	86 95       	lsr	r24
    1f1e:	82 0f       	add	r24, r18
    1f20:	82 95       	swap	r24
    1f22:	8f 70       	andi	r24, 0x0F	; 15
    1f24:	2f e1       	ldi	r18, 0x1F	; 31
    1f26:	82 9f       	mul	r24, r18
    1f28:	90 19       	sub	r25, r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	91 11       	cpse	r25, r1
    1f2e:	13 c0       	rjmp	.+38     	; 0x1f56 <__vector_9+0x74>
		cnt=0;
    1f30:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    1f34:	c0 e0       	ldi	r28, 0x00	; 0
    1f36:	0d c0       	rjmp	.+26     	; 0x1f52 <__vector_9+0x70>
		{
			if(callbacks[i]!=NULL){
    1f38:	ec 2f       	mov	r30, r28
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	e0 5f       	subi	r30, 0xF0	; 240
    1f42:	f8 4f       	sbci	r31, 0xF8	; 248
    1f44:	01 90       	ld	r0, Z+
    1f46:	f0 81       	ld	r31, Z
    1f48:	e0 2d       	mov	r30, r0
    1f4a:	30 97       	sbiw	r30, 0x00	; 0
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <__vector_9+0x6e>
				callbacks[i]();
    1f4e:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt % 31==0){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    1f50:	cf 5f       	subi	r28, 0xFF	; 255
    1f52:	c5 30       	cpi	r28, 0x05	; 5
    1f54:	88 f3       	brcs	.-30     	; 0x1f38 <__vector_9+0x56>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    1f56:	ff 91       	pop	r31
    1f58:	ef 91       	pop	r30
    1f5a:	cf 91       	pop	r28
    1f5c:	bf 91       	pop	r27
    1f5e:	af 91       	pop	r26
    1f60:	9f 91       	pop	r25
    1f62:	8f 91       	pop	r24
    1f64:	7f 91       	pop	r23
    1f66:	6f 91       	pop	r22
    1f68:	5f 91       	pop	r21
    1f6a:	4f 91       	pop	r20
    1f6c:	3f 91       	pop	r19
    1f6e:	2f 91       	pop	r18
    1f70:	0f 90       	pop	r0
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	0f 90       	pop	r0
    1f76:	1f 90       	pop	r1
    1f78:	18 95       	reti

Disassembly of section .text.start_and_write_data:

000028d8 <start_and_write_data>:
static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
}
    28d8:	cf 92       	push	r12
    28da:	df 92       	push	r13
    28dc:	ef 92       	push	r14
    28de:	cf 93       	push	r28
    28e0:	df 93       	push	r29
    28e2:	6a 01       	movw	r12, r20
    28e4:	e6 2e       	mov	r14, r22
    28e6:	d2 2f       	mov	r29, r18
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TWI_HAL_start>
    28ee:	81 11       	cpse	r24, r1
    28f0:	13 c0       	rjmp	.+38     	; 0x2918 <start_and_write_data+0x40>
    28f2:	c0 e0       	ldi	r28, 0x00	; 0
    28f4:	0e c0       	rjmp	.+28     	; 0x2912 <start_and_write_data+0x3a>
    28f6:	ae 2d       	mov	r26, r14
    28f8:	c6 01       	movw	r24, r12
    28fa:	8c 0f       	add	r24, r28
    28fc:	91 1d       	adc	r25, r1
    28fe:	a1 1d       	adc	r26, r1
    2900:	fc 01       	movw	r30, r24
    2902:	84 91       	lpm	r24, Z
    2904:	a7 fd       	sbrc	r26, 7
    2906:	80 81       	ld	r24, Z
    2908:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <TWI_HAL_write_byte>
    290c:	81 11       	cpse	r24, r1
    290e:	04 c0       	rjmp	.+8      	; 0x2918 <start_and_write_data+0x40>
    2910:	cf 5f       	subi	r28, 0xFF	; 255
    2912:	cd 17       	cp	r28, r29
    2914:	80 f3       	brcs	.-32     	; 0x28f6 <start_and_write_data+0x1e>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	ef 90       	pop	r14
    291e:	df 90       	pop	r13
    2920:	cf 90       	pop	r12
    2922:	08 95       	ret

Disassembly of section .text.read_and_stop:

0000263e <read_and_stop>:
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	8c 01       	movw	r16, r24
    264c:	d6 2f       	mov	r29, r22
    264e:	c0 e0       	ldi	r28, 0x00	; 0
    2650:	08 c0       	rjmp	.+16     	; 0x2662 <read_and_stop+0x24>
    2652:	78 01       	movw	r14, r16
    2654:	ec 0e       	add	r14, r28
    2656:	f1 1c       	adc	r15, r1
    2658:	0e 94 08 1a 	call	0x3410	; 0x3410 <TWI_HAL_read_byte_ack>
    265c:	f7 01       	movw	r30, r14
    265e:	80 83       	st	Z, r24
    2660:	cf 5f       	subi	r28, 0xFF	; 255
    2662:	2c 2f       	mov	r18, r28
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	8d 2f       	mov	r24, r29
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	28 17       	cp	r18, r24
    266e:	39 07       	cpc	r19, r25
    2670:	84 f3       	brlt	.-32     	; 0x2652 <read_and_stop+0x14>
    2672:	8d 2f       	mov	r24, r29
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	e8 01       	movw	r28, r16
    267a:	c8 0f       	add	r28, r24
    267c:	d9 1f       	adc	r29, r25
    267e:	0e 94 12 1a 	call	0x3424	; 0x3424 <TWI_HAL_read_byte_nack>
    2682:	88 83       	st	Y, r24
    2684:	0e 94 3f 1a 	call	0x347e	; 0x347e <TWI_HAL_stop>
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ff 90       	pop	r15
    2694:	ef 90       	pop	r14
    2696:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

0000346e <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    346e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <start_and_write_data>
	if(status!=TWI_CODE_SUCCESS) return status;
    3472:	81 11       	cpse	r24, r1
    3474:	03 c0       	rjmp	.+6      	; 0x347c <TWI_API_write_data_stop+0xe>
	TWI_HAL_stop();
    3476:	0e 94 3f 1a 	call	0x347e	; 0x347e <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
    347a:	80 e0       	ldi	r24, 0x00	; 0
}
    347c:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

0000314a <TWI_API_read_data_ack_end_nack_stop>:
static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	return start_and_write_data(slaveAddr, data, length);
}
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	eb 01       	movw	r28, r22
    3152:	14 2f       	mov	r17, r20
    3154:	61 e0       	ldi	r22, 0x01	; 1
    3156:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <TWI_HAL_start>
    315a:	81 11       	cpse	r24, r1
    315c:	04 c0       	rjmp	.+8      	; 0x3166 <TWI_API_read_data_ack_end_nack_stop+0x1c>
    315e:	61 2f       	mov	r22, r17
    3160:	ce 01       	movw	r24, r28
    3162:	0e 94 1f 13 	call	0x263e	; 0x263e <read_and_stop>
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	1f 91       	pop	r17
    316c:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00003438 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    3438:	80 e2       	ldi	r24, 0x20	; 32
    343a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	if(TWI_PRESCALE==1)
		clear_byte(TWSR, 0b00000011); //set prescale to 1
    343e:	e9 eb       	ldi	r30, 0xB9	; 185
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	8c 7f       	andi	r24, 0xFC	; 252
    3446:	80 83       	st	Z, r24
    3448:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00002a9c <TWI_HAL_start>:
	status=twi_read_status(TWSR);
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
	
	return status;
}
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	68 2b       	or	r22, r24
    2aa4:	84 ea       	ldi	r24, 0xA4	; 164
    2aa6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2aaa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2aae:	99 23       	and	r25, r25
    2ab0:	e4 f7       	brge	.-8      	; 0x2aaa <TWI_HAL_start+0xe>
    2ab2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2ab6:	88 7f       	andi	r24, 0xF8	; 248
    2ab8:	88 30       	cpi	r24, 0x08	; 8
    2aba:	99 f4       	brne	.+38     	; 0x2ae2 <TWI_HAL_start+0x46>
    2abc:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
    2ac0:	84 e8       	ldi	r24, 0x84	; 132
    2ac2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2ac6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    2aca:	88 23       	and	r24, r24
    2acc:	e4 f7       	brge	.-8      	; 0x2ac6 <TWI_HAL_start+0x2a>
    2ace:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    2ad2:	88 7f       	andi	r24, 0xF8	; 248
    2ad4:	88 31       	cpi	r24, 0x18	; 24
    2ad6:	21 f0       	breq	.+8      	; 0x2ae0 <TWI_HAL_start+0x44>
    2ad8:	80 34       	cpi	r24, 0x40	; 64
    2ada:	19 f4       	brne	.+6      	; 0x2ae2 <TWI_HAL_start+0x46>
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	08 95       	ret
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

000031d8 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    31d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    31dc:	84 e8       	ldi	r24, 0x84	; 132
    31de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    31e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    31e6:	88 23       	and	r24, r24
    31e8:	e4 f7       	brge	.-8      	; 0x31e2 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    31ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    31ee:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    31f0:	88 32       	cpi	r24, 0x28	; 40
    31f2:	09 f4       	brne	.+2      	; 0x31f6 <TWI_HAL_write_byte+0x1e>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    31f6:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00003410 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    3410:	84 ec       	ldi	r24, 0xC4	; 196
    3412:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    3416:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    341a:	88 23       	and	r24, r24
    341c:	e4 f7       	brge	.-8      	; 0x3416 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    341e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3422:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00003424 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    3424:	84 e8       	ldi	r24, 0x84	; 132
    3426:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    342a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    342e:	88 23       	and	r24, r24
    3430:	e4 f7       	brge	.-8      	; 0x342a <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    3432:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3436:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

0000347e <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    347e:	84 e9       	ldi	r24, 0x94	; 148
    3480:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    3484:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3488:	84 fd       	sbrc	r24, 4
    348a:	fc cf       	rjmp	.-8      	; 0x3484 <TWI_HAL_stop+0x6>
}
    348c:	08 95       	ret

Disassembly of section .text.copy_buffer:

00002fce <copy_buffer>:
	}
	
	tx_buffer_data_len=strlen(msg);
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}
    2fce:	bc 01       	movw	r22, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	09 c0       	rjmp	.+18     	; 0x2fe6 <copy_buffer+0x18>
    2fd4:	fb 01       	movw	r30, r22
    2fd6:	e9 0f       	add	r30, r25
    2fd8:	f1 1d       	adc	r31, r1
    2fda:	da 01       	movw	r26, r20
    2fdc:	a0 50       	subi	r26, 0x00	; 0
    2fde:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe0:	2c 91       	ld	r18, X
    2fe2:	20 83       	st	Z, r18
    2fe4:	9f 5f       	subi	r25, 0xFF	; 255
    2fe6:	49 2f       	mov	r20, r25
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	20 91 2c 07 	lds	r18, 0x072C	; 0x80072c <rx_buffer_data_len>
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	22 50       	subi	r18, 0x02	; 2
    2ff2:	31 09       	sbc	r19, r1
    2ff4:	42 17       	cp	r20, r18
    2ff6:	53 07       	cpc	r21, r19
    2ff8:	6c f3       	brlt	.-38     	; 0x2fd4 <copy_buffer+0x6>
    2ffa:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00002c38 <uart0_hal_init>:
    2c38:	e1 ec       	ldi	r30, 0xC1	; 193
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 61       	ori	r24, 0x10	; 16
    2c40:	80 83       	st	Z, r24
    2c42:	80 81       	ld	r24, Z
    2c44:	88 60       	ori	r24, 0x08	; 8
    2c46:	80 83       	st	Z, r24
    2c48:	80 81       	ld	r24, Z
    2c4a:	80 68       	ori	r24, 0x80	; 128
    2c4c:	80 83       	st	Z, r24
    2c4e:	80 81       	ld	r24, Z
    2c50:	80 64       	ori	r24, 0x40	; 64
    2c52:	80 83       	st	Z, r24
    2c54:	e0 ec       	ldi	r30, 0xC0	; 192
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	82 60       	ori	r24, 0x02	; 2
    2c5c:	80 83       	st	Z, r24
    2c5e:	86 e0       	ldi	r24, 0x06	; 6
    2c60:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    2c64:	80 e1       	ldi	r24, 0x10	; 16
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    2c6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    2c70:	78 94       	sei
    2c72:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00002ea6 <uart0_hal_send_message>:
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	0b c0       	rjmp	.+22     	; 0x2ec2 <uart0_hal_send_message+0x1c>
    2eac:	29 2f       	mov	r18, r25
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	fd 01       	movw	r30, r26
    2eb2:	e2 0f       	add	r30, r18
    2eb4:	f3 1f       	adc	r31, r19
    2eb6:	40 81       	ld	r20, Z
    2eb8:	f9 01       	movw	r30, r18
    2eba:	ec 59       	subi	r30, 0x9C	; 156
    2ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ebe:	40 83       	st	Z, r20
    2ec0:	9f 5f       	subi	r25, 0xFF	; 255
    2ec2:	96 17       	cp	r25, r22
    2ec4:	98 f3       	brcs	.-26     	; 0x2eac <uart0_hal_send_message+0x6>
    2ec6:	60 93 2e 07 	sts	0x072E, r22	; 0x80072e <tx_buffer_data_len>
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <tx_buffer_cursor>
    2ed0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2ed4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2ed8:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

000034c8 <uart0_hal_message_ready>:

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    34c8:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <rx_buffer_has_message>
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	91 11       	cpse	r25, r1
    34d0:	01 c0       	rjmp	.+2      	; 0x34d4 <uart0_hal_message_ready+0xc>
    34d2:	80 e0       	ldi	r24, 0x00	; 0
}
    34d4:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000035a0 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    35a0:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <rx_buffer_has_message>
	rx_buffer_data_len=0;
    35a4:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <rx_buffer_data_len>
    35a8:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003084 <uart0_hal_read_message_as_str>:
	}
	
	tx_buffer_data_len=strlen(msg);
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}
    3084:	0f 93       	push	r16
    3086:	1f 93       	push	r17
    3088:	cf 93       	push	r28
    308a:	8c 01       	movw	r16, r24
    308c:	0e 94 e7 17 	call	0x2fce	; 0x2fce <copy_buffer>
    3090:	c0 91 2c 07 	lds	r28, 0x072C	; 0x80072c <rx_buffer_data_len>
    3094:	c2 50       	subi	r28, 0x02	; 2
    3096:	f8 01       	movw	r30, r16
    3098:	ec 0f       	add	r30, r28
    309a:	f1 1d       	adc	r31, r1
    309c:	10 82       	st	Z, r1
    309e:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <uart0_hal_clear_rx_buffer>
    30a2:	8c 2f       	mov	r24, r28
    30a4:	cf 91       	pop	r28
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	08 95       	ret

Disassembly of section .text.__vector_22:

00002a08 <__vector_22>:
    2a08:	1f 92       	push	r1
    2a0a:	0f 92       	push	r0
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	0f 92       	push	r0
    2a10:	11 24       	eor	r1, r1
    2a12:	8f 93       	push	r24
    2a14:	ef 93       	push	r30
    2a16:	ff 93       	push	r31
    2a18:	e0 91 2d 07 	lds	r30, 0x072D	; 0x80072d <tx_buffer_cursor>
    2a1c:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <tx_buffer_data_len>
    2a20:	e8 17       	cp	r30, r24
    2a22:	58 f4       	brcc	.+22     	; 0x2a3a <__vector_22+0x32>
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	8e 0f       	add	r24, r30
    2a28:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <tx_buffer_cursor>
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	ec 59       	subi	r30, 0x9C	; 156
    2a30:	fe 4f       	sbci	r31, 0xFE	; 254
    2a32:	80 81       	ld	r24, Z
    2a34:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2a38:	04 c0       	rjmp	.+8      	; 0x2a42 <__vector_22+0x3a>
    2a3a:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <tx_buffer_cursor>
    2a3e:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <tx_buffer_data_len>
    2a42:	ff 91       	pop	r31
    2a44:	ef 91       	pop	r30
    2a46:	8f 91       	pop	r24
    2a48:	0f 90       	pop	r0
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	0f 90       	pop	r0
    2a4e:	1f 90       	pop	r1
    2a50:	18 95       	reti

Disassembly of section .text.__vector_20:

00002422 <__vector_20>:
    2422:	1f 92       	push	r1
    2424:	0f 92       	push	r0
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	0f 92       	push	r0
    242a:	11 24       	eor	r1, r1
    242c:	2f 93       	push	r18
    242e:	8f 93       	push	r24
    2430:	9f 93       	push	r25
    2432:	ef 93       	push	r30
    2434:	ff 93       	push	r31
    2436:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <rx_buffer_has_message>
    243a:	81 11       	cpse	r24, r1
    243c:	0e c0       	rjmp	.+28     	; 0x245a <__vector_20+0x38>
    243e:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <rx_buffer_data_len>
    2442:	e4 36       	cpi	r30, 0x64	; 100
    2444:	50 f4       	brcc	.+20     	; 0x245a <__vector_20+0x38>
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	8e 0f       	add	r24, r30
    244a:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <rx_buffer_data_len>
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2454:	e0 50       	subi	r30, 0x00	; 0
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 83       	st	Z, r24
    245a:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <rx_buffer_data_len>
    245e:	83 30       	cpi	r24, 0x03	; 3
    2460:	80 f0       	brcs	.+32     	; 0x2482 <__vector_20+0x60>
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	fc 01       	movw	r30, r24
    2466:	e1 50       	subi	r30, 0x01	; 1
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	20 81       	ld	r18, Z
    246c:	2a 30       	cpi	r18, 0x0A	; 10
    246e:	49 f4       	brne	.+18     	; 0x2482 <__vector_20+0x60>
    2470:	fc 01       	movw	r30, r24
    2472:	e2 50       	subi	r30, 0x02	; 2
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 81       	ld	r24, Z
    2478:	8d 30       	cpi	r24, 0x0D	; 13
    247a:	19 f4       	brne	.+6      	; 0x2482 <__vector_20+0x60>
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <rx_buffer_has_message>
    2482:	ff 91       	pop	r31
    2484:	ef 91       	pop	r30
    2486:	9f 91       	pop	r25
    2488:	8f 91       	pop	r24
    248a:	2f 91       	pop	r18
    248c:	0f 90       	pop	r0
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	0f 90       	pop	r0
    2492:	1f 90       	pop	r1
    2494:	18 95       	reti

Disassembly of section .text.copy_buffer:

00002ffc <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    2ffc:	bc 01       	movw	r22, r24
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	09 c0       	rjmp	.+18     	; 0x3014 <copy_buffer+0x18>
    3002:	fb 01       	movw	r30, r22
    3004:	e9 0f       	add	r30, r25
    3006:	f1 1d       	adc	r31, r1
    3008:	da 01       	movw	r26, r20
    300a:	aa 5e       	subi	r26, 0xEA	; 234
    300c:	b9 4f       	sbci	r27, 0xF9	; 249
    300e:	2c 91       	ld	r18, X
    3010:	20 83       	st	Z, r18
    3012:	9f 5f       	subi	r25, 0xFF	; 255
    3014:	49 2f       	mov	r20, r25
    3016:	50 e0       	ldi	r21, 0x00	; 0
    3018:	20 91 30 07 	lds	r18, 0x0730	; 0x800730 <rx_buffer_data_len>
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	22 50       	subi	r18, 0x02	; 2
    3020:	31 09       	sbc	r19, r1
    3022:	42 17       	cp	r20, r18
    3024:	53 07       	cpc	r21, r19
    3026:	6c f3       	brlt	.-38     	; 0x3002 <copy_buffer+0x6>
    3028:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

00002c74 <uart1_hal_init>:
    2c74:	e9 ec       	ldi	r30, 0xC9	; 201
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	80 61       	ori	r24, 0x10	; 16
    2c7c:	80 83       	st	Z, r24
    2c7e:	80 81       	ld	r24, Z
    2c80:	88 60       	ori	r24, 0x08	; 8
    2c82:	80 83       	st	Z, r24
    2c84:	80 81       	ld	r24, Z
    2c86:	80 68       	ori	r24, 0x80	; 128
    2c88:	80 83       	st	Z, r24
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 64       	ori	r24, 0x40	; 64
    2c8e:	80 83       	st	Z, r24
    2c90:	e8 ec       	ldi	r30, 0xC8	; 200
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	82 60       	ori	r24, 0x02	; 2
    2c98:	80 83       	st	Z, r24
    2c9a:	86 e0       	ldi	r24, 0x06	; 6
    2c9c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    2ca0:	80 e1       	ldi	r24, 0x10	; 16
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    2ca8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    2cac:	78 94       	sei
    2cae:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

0000213e <uart1_hal_send_string>:
    213e:	6f 92       	push	r6
    2140:	7f 92       	push	r7
    2142:	8f 92       	push	r8
    2144:	cf 92       	push	r12
    2146:	df 92       	push	r13
    2148:	ef 92       	push	r14
    214a:	3b 01       	movw	r6, r22
    214c:	88 2e       	mov	r8, r24
    214e:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <tx_buffer_data_len>
    2152:	81 11       	cpse	r24, r1
    2154:	fc cf       	rjmp	.-8      	; 0x214e <uart1_hal_send_string+0x10>
    2156:	88 2d       	mov	r24, r8
    2158:	b3 01       	movw	r22, r6
    215a:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    215e:	bc 01       	movw	r22, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	12 c0       	rjmp	.+36     	; 0x2188 <uart1_hal_send_string+0x4a>
    2164:	29 2f       	mov	r18, r25
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	e8 2c       	mov	r14, r8
    216a:	63 01       	movw	r12, r6
    216c:	c4 0e       	add	r12, r20
    216e:	d5 1e       	adc	r13, r21
    2170:	e1 1c       	adc	r14, r1
    2172:	57 fd       	sbrc	r21, 7
    2174:	ea 94       	dec	r14
    2176:	f6 01       	movw	r30, r12
    2178:	44 91       	lpm	r20, Z
    217a:	e7 fc       	sbrc	r14, 7
    217c:	40 81       	ld	r20, Z
    217e:	f9 01       	movw	r30, r18
    2180:	e6 51       	subi	r30, 0x16	; 22
    2182:	fb 4f       	sbci	r31, 0xFB	; 251
    2184:	40 83       	st	Z, r20
    2186:	9f 5f       	subi	r25, 0xFF	; 255
    2188:	49 2f       	mov	r20, r25
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	46 17       	cp	r20, r22
    218e:	57 07       	cpc	r21, r23
    2190:	48 f3       	brcs	.-46     	; 0x2164 <uart1_hal_send_string+0x26>
    2192:	fb 01       	movw	r30, r22
    2194:	e6 51       	subi	r30, 0x16	; 22
    2196:	fb 4f       	sbci	r31, 0xFB	; 251
    2198:	8d e0       	ldi	r24, 0x0D	; 13
    219a:	80 83       	st	Z, r24
    219c:	fb 01       	movw	r30, r22
    219e:	e5 51       	subi	r30, 0x15	; 21
    21a0:	fb 4f       	sbci	r31, 0xFB	; 251
    21a2:	8a e0       	ldi	r24, 0x0A	; 10
    21a4:	80 83       	st	Z, r24
    21a6:	6e 5f       	subi	r22, 0xFE	; 254
    21a8:	60 93 32 07 	sts	0x0732, r22	; 0x800732 <tx_buffer_data_len>
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <tx_buffer_cursor>
    21b2:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <_end>
    21b6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    21ba:	ef 90       	pop	r14
    21bc:	df 90       	pop	r13
    21be:	cf 90       	pop	r12
    21c0:	8f 90       	pop	r8
    21c2:	7f 90       	pop	r7
    21c4:	6f 90       	pop	r6
    21c6:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

000034d6 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    34d6:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <rx_buffer_has_message>
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	91 11       	cpse	r25, r1
    34de:	01 c0       	rjmp	.+2      	; 0x34e2 <uart1_hal_message_ready+0xc>
    34e0:	80 e0       	ldi	r24, 0x00	; 0
}
    34e2:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

000034e4 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    34e4:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <rx_buffer_data_len>
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	95 39       	cpi	r25, 0x95	; 149
    34ec:	08 f4       	brcc	.+2      	; 0x34f0 <uart1_hal_rx_full+0xc>
    34ee:	80 e0       	ldi	r24, 0x00	; 0
}
    34f0:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

000035aa <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    35aa:	10 92 2f 07 	sts	0x072F, r1	; 0x80072f <rx_buffer_has_message>
	rx_buffer_data_len=0;
    35ae:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <rx_buffer_data_len>
    35b2:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

000030ac <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    30ac:	0f 93       	push	r16
    30ae:	1f 93       	push	r17
    30b0:	cf 93       	push	r28
    30b2:	8c 01       	movw	r16, r24
    30b4:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <copy_buffer>
    30b8:	c0 91 30 07 	lds	r28, 0x0730	; 0x800730 <rx_buffer_data_len>
    30bc:	c2 50       	subi	r28, 0x02	; 2
    30be:	f8 01       	movw	r30, r16
    30c0:	ec 0f       	add	r30, r28
    30c2:	f1 1d       	adc	r31, r1
    30c4:	10 82       	st	Z, r1
    30c6:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <uart1_hal_clear_rx_buffer>
    30ca:	8c 2f       	mov	r24, r28
    30cc:	cf 91       	pop	r28
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	08 95       	ret

Disassembly of section .text.__vector_30:

00002a52 <__vector_30>:
    2a52:	1f 92       	push	r1
    2a54:	0f 92       	push	r0
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	0f 92       	push	r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	8f 93       	push	r24
    2a5e:	ef 93       	push	r30
    2a60:	ff 93       	push	r31
    2a62:	e0 91 31 07 	lds	r30, 0x0731	; 0x800731 <tx_buffer_cursor>
    2a66:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <tx_buffer_data_len>
    2a6a:	e8 17       	cp	r30, r24
    2a6c:	58 f4       	brcc	.+22     	; 0x2a84 <__vector_30+0x32>
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	8e 0f       	add	r24, r30
    2a72:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <tx_buffer_cursor>
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	e6 51       	subi	r30, 0x16	; 22
    2a7a:	fb 4f       	sbci	r31, 0xFB	; 251
    2a7c:	80 81       	ld	r24, Z
    2a7e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2a82:	04 c0       	rjmp	.+8      	; 0x2a8c <__vector_30+0x3a>
    2a84:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <tx_buffer_cursor>
    2a88:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <tx_buffer_data_len>
    2a8c:	ff 91       	pop	r31
    2a8e:	ef 91       	pop	r30
    2a90:	8f 91       	pop	r24
    2a92:	0f 90       	pop	r0
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	0f 90       	pop	r0
    2a98:	1f 90       	pop	r1
    2a9a:	18 95       	reti

Disassembly of section .text.__vector_28:

00002496 <__vector_28>:
    2496:	1f 92       	push	r1
    2498:	0f 92       	push	r0
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	0f 92       	push	r0
    249e:	11 24       	eor	r1, r1
    24a0:	2f 93       	push	r18
    24a2:	8f 93       	push	r24
    24a4:	9f 93       	push	r25
    24a6:	ef 93       	push	r30
    24a8:	ff 93       	push	r31
    24aa:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <rx_buffer_has_message>
    24ae:	81 11       	cpse	r24, r1
    24b0:	0e c0       	rjmp	.+28     	; 0x24ce <__vector_28+0x38>
    24b2:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <rx_buffer_data_len>
    24b6:	e6 39       	cpi	r30, 0x96	; 150
    24b8:	50 f4       	brcc	.+20     	; 0x24ce <__vector_28+0x38>
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	8e 0f       	add	r24, r30
    24be:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <rx_buffer_data_len>
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    24c8:	ea 5e       	subi	r30, 0xEA	; 234
    24ca:	f9 4f       	sbci	r31, 0xF9	; 249
    24cc:	80 83       	st	Z, r24
    24ce:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <rx_buffer_data_len>
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	fc 01       	movw	r30, r24
    24d6:	eb 5e       	subi	r30, 0xEB	; 235
    24d8:	f9 4f       	sbci	r31, 0xF9	; 249
    24da:	20 81       	ld	r18, Z
    24dc:	2a 30       	cpi	r18, 0x0A	; 10
    24de:	49 f4       	brne	.+18     	; 0x24f2 <__vector_28+0x5c>
    24e0:	fc 01       	movw	r30, r24
    24e2:	ec 5e       	subi	r30, 0xEC	; 236
    24e4:	f9 4f       	sbci	r31, 0xF9	; 249
    24e6:	80 81       	ld	r24, Z
    24e8:	8d 30       	cpi	r24, 0x0D	; 13
    24ea:	19 f4       	brne	.+6      	; 0x24f2 <__vector_28+0x5c>
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <rx_buffer_has_message>
    24f2:	ff 91       	pop	r31
    24f4:	ef 91       	pop	r30
    24f6:	9f 91       	pop	r25
    24f8:	8f 91       	pop	r24
    24fa:	2f 91       	pop	r18
    24fc:	0f 90       	pop	r0
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	0f 90       	pop	r0
    2502:	1f 90       	pop	r1
    2504:	18 95       	reti

Disassembly of section .text.main:

00003338 <main>:
	//test_runner();
	
	while(1)
    {
		if(1){
			CONF_enter();
    3338:	0e 94 83 0a 	call	0x1506	; 0x1506 <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    333c:	2f ef       	ldi	r18, 0xFF	; 255
    333e:	81 e1       	ldi	r24, 0x11	; 17
    3340:	9a e7       	ldi	r25, 0x7A	; 122
    3342:	21 50       	subi	r18, 0x01	; 1
    3344:	80 40       	sbci	r24, 0x00	; 0
    3346:	90 40       	sbci	r25, 0x00	; 0
    3348:	e1 f7       	brne	.-8      	; 0x3342 <main+0xa>
    334a:	00 c0       	rjmp	.+0      	; 0x334c <main+0x14>
    334c:	00 00       	nop
    334e:	f4 cf       	rjmp	.-24     	; 0x3338 <main>

Disassembly of section .text.calc_ppm_methane:

00002012 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
uint16_t calc_ppm_methane(uint16_t bit_value){
    2012:	8f 92       	push	r8
    2014:	9f 92       	push	r9
    2016:	af 92       	push	r10
    2018:	bf 92       	push	r11
    201a:	cf 92       	push	r12
    201c:	df 92       	push	r13
    201e:	ef 92       	push	r14
    2020:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    2022:	bc 01       	movw	r22, r24
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatunsisf>
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e8       	ldi	r20, 0x80	; 128
    2032:	59 e3       	ldi	r21, 0x39	; 57
    2034:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__mulsf3>
    2038:	80 90 22 07 	lds	r8, 0x0722	; 0x800722 <Vc>
    203c:	90 90 23 07 	lds	r9, 0x0723	; 0x800723 <Vc+0x1>
    2040:	a0 90 24 07 	lds	r10, 0x0724	; 0x800724 <Vc+0x2>
    2044:	b0 90 25 07 	lds	r11, 0x0725	; 0x800725 <Vc+0x3>
    2048:	a5 01       	movw	r20, r10
    204a:	94 01       	movw	r18, r8
    204c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__mulsf3>
    2050:	6b 01       	movw	r12, r22
    2052:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    2054:	9b 01       	movw	r18, r22
    2056:	ac 01       	movw	r20, r24
    2058:	c5 01       	movw	r24, r10
    205a:	b4 01       	movw	r22, r8
    205c:	0e 94 95 1a 	call	0x352a	; 0x352a <__subsf3>
    2060:	a7 01       	movw	r20, r14
    2062:	96 01       	movw	r18, r12
    2064:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__divsf3>
    2068:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <RRL>
    206c:	30 91 1f 07 	lds	r19, 0x071F	; 0x80071f <RRL+0x1>
    2070:	40 91 20 07 	lds	r20, 0x0720	; 0x800720 <RRL+0x2>
    2074:	50 91 21 07 	lds	r21, 0x0721	; 0x800721 <RRL+0x3>
    2078:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    207c:	20 91 1a 07 	lds	r18, 0x071A	; 0x80071a <PPM_factor>
    2080:	30 91 1b 07 	lds	r19, 0x071B	; 0x80071b <PPM_factor+0x1>
    2084:	40 91 1c 07 	lds	r20, 0x071C	; 0x80071c <PPM_factor+0x2>
    2088:	50 91 1d 07 	lds	r21, 0x071D	; 0x80071d <PPM_factor+0x3>
    208c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__mulsf3>
    2090:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__fixunssfsi>
	return PPM;
}
    2094:	cb 01       	movw	r24, r22
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	df 90       	pop	r13
    209c:	cf 90       	pop	r12
    209e:	bf 90       	pop	r11
    20a0:	af 90       	pop	r10
    20a2:	9f 90       	pop	r9
    20a4:	8f 90       	pop	r8
    20a6:	08 95       	ret

Disassembly of section .text.ADC_get_value:

000026f0 <ADC_get_value>:
	return cntSamples>=_nSamples;
}



ADC_STATUS ADC_get_value(uint16_t *value){
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <ADC_get_value+0xa>
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    2700:	8f ef       	ldi	r24, 0xFF	; 255
    2702:	9f ef       	ldi	r25, 0xFF	; 255
    2704:	f8 01       	movw	r30, r16
    2706:	91 83       	std	Z+1, r25	; 0x01
    2708:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    270a:	42 e0       	ldi	r20, 0x02	; 2
    270c:	be 01       	movw	r22, r28
    270e:	6f 5f       	subi	r22, 0xFF	; 255
    2710:	7f 4f       	sbci	r23, 0xFF	; 255
    2712:	8d e4       	ldi	r24, 0x4D	; 77
    2714:	0e 94 a5 18 	call	0x314a	; 0x314a <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2718:	81 11       	cpse	r24, r1
    271a:	0d c0       	rjmp	.+26     	; 0x2736 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	98 2f       	mov	r25, r24
    2722:	88 27       	eor	r24, r24
    2724:	2a 81       	ldd	r18, Y+2	; 0x02
	*value=calc_ppm_methane(bit_value);
    2726:	82 2b       	or	r24, r18
    2728:	0e 94 09 10 	call	0x2012	; 0x2012 <calc_ppm_methane>
    272c:	f8 01       	movw	r30, r16
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	01 c0       	rjmp	.+2      	; 0x2738 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2736:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00003368 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    3368:	60 e4       	ldi	r22, 0x40	; 64
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	80 e8       	ldi	r24, 0x80	; 128
    336e:	0e 94 2e 1a 	call	0x345c	; 0x345c <eeprom_read_byte>
    3372:	91 e0       	ldi	r25, 0x01	; 1
    3374:	81 11       	cpse	r24, r1
    3376:	01 c0       	rjmp	.+2      	; 0x337a <EM_has_deveui+0x12>
    3378:	90 e0       	ldi	r25, 0x00	; 0
}
    337a:	89 2f       	mov	r24, r25
    337c:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

0000337e <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    337e:	61 e4       	ldi	r22, 0x41	; 65
    3380:	70 e0       	ldi	r23, 0x00	; 0
    3382:	80 e8       	ldi	r24, 0x80	; 128
    3384:	0e 94 2e 1a 	call	0x345c	; 0x345c <eeprom_read_byte>
    3388:	91 e0       	ldi	r25, 0x01	; 1
    338a:	81 11       	cpse	r24, r1
    338c:	01 c0       	rjmp	.+2      	; 0x3390 <EM_has_appeui+0x12>
    338e:	90 e0       	ldi	r25, 0x00	; 0
}
    3390:	89 2f       	mov	r24, r25
    3392:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00003394 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    3394:	62 e4       	ldi	r22, 0x42	; 66
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	80 e8       	ldi	r24, 0x80	; 128
    339a:	0e 94 2e 1a 	call	0x345c	; 0x345c <eeprom_read_byte>
    339e:	91 e0       	ldi	r25, 0x01	; 1
    33a0:	81 11       	cpse	r24, r1
    33a2:	01 c0       	rjmp	.+2      	; 0x33a6 <EM_has_appkey+0x12>
    33a4:	90 e0       	ldi	r25, 0x00	; 0
}
    33a6:	89 2f       	mov	r24, r25
    33a8:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

00002cb0 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    2cb0:	cf 92       	push	r12
    2cb2:	df 92       	push	r13
    2cb4:	ef 92       	push	r14
    2cb6:	6b 01       	movw	r12, r22
    2cb8:	e8 2e       	mov	r14, r24
    2cba:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    2cbe:	40 97       	sbiw	r24, 0x10	; 16
    2cc0:	79 f4       	brne	.+30     	; 0x2ce0 <EM_set_deveui+0x30>
    2cc2:	20 e1       	ldi	r18, 0x10	; 16
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e0       	ldi	r20, 0x00	; 0
    2cc8:	50 e0       	ldi	r21, 0x00	; 0
    2cca:	8e 2d       	mov	r24, r14
    2ccc:	b6 01       	movw	r22, r12
    2cce:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <eeprom_update_block>
    2cd2:	61 e0       	ldi	r22, 0x01	; 1
    2cd4:	80 e4       	ldi	r24, 0x40	; 64
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 c9 18 	call	0x3192	; 0x3192 <eeprom_update_byte>
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	01 c0       	rjmp	.+2      	; 0x2ce2 <EM_set_deveui+0x32>
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	ef 90       	pop	r14
    2ce4:	df 90       	pop	r13
    2ce6:	cf 90       	pop	r12
    2ce8:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00002f3e <EM_get_deveui>:
    2f3e:	0f 93       	push	r16
    2f40:	1f 93       	push	r17
    2f42:	cf 93       	push	r28
    2f44:	8c 01       	movw	r16, r24
    2f46:	0e 94 b4 19 	call	0x3368	; 0x3368 <EM_has_deveui>
    2f4a:	c8 2f       	mov	r28, r24
    2f4c:	88 23       	and	r24, r24
    2f4e:	51 f0       	breq	.+20     	; 0x2f64 <EM_get_deveui+0x26>
    2f50:	20 e1       	ldi	r18, 0x10	; 16
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e0       	ldi	r20, 0x00	; 0
    2f56:	50 e0       	ldi	r21, 0x00	; 0
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	c8 01       	movw	r24, r16
    2f5c:	0e 94 b7 18 	call	0x316e	; 0x316e <eeprom_read_block>
    2f60:	f8 01       	movw	r30, r16
    2f62:	10 8a       	std	Z+16, r1	; 0x10
    2f64:	8c 2f       	mov	r24, r28
    2f66:	cf 91       	pop	r28
    2f68:	1f 91       	pop	r17
    2f6a:	0f 91       	pop	r16
    2f6c:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00002cea <EM_set_appeui>:
    2cea:	cf 92       	push	r12
    2cec:	df 92       	push	r13
    2cee:	ef 92       	push	r14
    2cf0:	6b 01       	movw	r12, r22
    2cf2:	e8 2e       	mov	r14, r24
    2cf4:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    2cf8:	40 97       	sbiw	r24, 0x10	; 16
    2cfa:	79 f4       	brne	.+30     	; 0x2d1a <EM_set_appeui+0x30>
    2cfc:	20 e1       	ldi	r18, 0x10	; 16
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e1       	ldi	r20, 0x10	; 16
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	8e 2d       	mov	r24, r14
    2d06:	b6 01       	movw	r22, r12
    2d08:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <eeprom_update_block>
    2d0c:	61 e0       	ldi	r22, 0x01	; 1
    2d0e:	81 e4       	ldi	r24, 0x41	; 65
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 c9 18 	call	0x3192	; 0x3192 <eeprom_update_byte>
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <EM_set_appeui+0x32>
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	ef 90       	pop	r14
    2d1e:	df 90       	pop	r13
    2d20:	cf 90       	pop	r12
    2d22:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00002f6e <EM_get_appeui>:
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	8c 01       	movw	r16, r24
    2f76:	0e 94 bf 19 	call	0x337e	; 0x337e <EM_has_appeui>
    2f7a:	c8 2f       	mov	r28, r24
    2f7c:	88 23       	and	r24, r24
    2f7e:	51 f0       	breq	.+20     	; 0x2f94 <EM_get_appeui+0x26>
    2f80:	20 e1       	ldi	r18, 0x10	; 16
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e1       	ldi	r20, 0x10	; 16
    2f86:	50 e0       	ldi	r21, 0x00	; 0
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	c8 01       	movw	r24, r16
    2f8c:	0e 94 b7 18 	call	0x316e	; 0x316e <eeprom_read_block>
    2f90:	f8 01       	movw	r30, r16
    2f92:	10 8a       	std	Z+16, r1	; 0x10
    2f94:	8c 2f       	mov	r24, r28
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00002d24 <EM_set_appkey>:
    2d24:	cf 92       	push	r12
    2d26:	df 92       	push	r13
    2d28:	ef 92       	push	r14
    2d2a:	6b 01       	movw	r12, r22
    2d2c:	e8 2e       	mov	r14, r24
    2d2e:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    2d32:	80 97       	sbiw	r24, 0x20	; 32
    2d34:	79 f4       	brne	.+30     	; 0x2d54 <EM_set_appkey+0x30>
    2d36:	20 e2       	ldi	r18, 0x20	; 32
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e2       	ldi	r20, 0x20	; 32
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	8e 2d       	mov	r24, r14
    2d40:	b6 01       	movw	r22, r12
    2d42:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <eeprom_update_block>
    2d46:	61 e0       	ldi	r22, 0x01	; 1
    2d48:	82 e4       	ldi	r24, 0x42	; 66
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 c9 18 	call	0x3192	; 0x3192 <eeprom_update_byte>
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <EM_set_appkey+0x32>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	ef 90       	pop	r14
    2d58:	df 90       	pop	r13
    2d5a:	cf 90       	pop	r12
    2d5c:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00002f9e <EM_get_appkey>:
    2f9e:	0f 93       	push	r16
    2fa0:	1f 93       	push	r17
    2fa2:	cf 93       	push	r28
    2fa4:	8c 01       	movw	r16, r24
    2fa6:	0e 94 ca 19 	call	0x3394	; 0x3394 <EM_has_appkey>
    2faa:	c8 2f       	mov	r28, r24
    2fac:	88 23       	and	r24, r24
    2fae:	51 f0       	breq	.+20     	; 0x2fc4 <EM_get_appkey+0x26>
    2fb0:	20 e2       	ldi	r18, 0x20	; 32
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e2       	ldi	r20, 0x20	; 32
    2fb6:	50 e0       	ldi	r21, 0x00	; 0
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	c8 01       	movw	r24, r16
    2fbc:	0e 94 b7 18 	call	0x316e	; 0x316e <eeprom_read_block>
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	10 a2       	std	Z+32, r1	; 0x20
    2fc4:	8c 2f       	mov	r24, r28
    2fc6:	cf 91       	pop	r28
    2fc8:	1f 91       	pop	r17
    2fca:	0f 91       	pop	r16
    2fcc:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

000034f2 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    34f2:	ab 01       	movw	r20, r22
    34f4:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    34f6:	83 e4       	ldi	r24, 0x43	; 67
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	0e 94 a8 19 	call	0x3350	; 0x3350 <eeprom_update_dword>
    34fe:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00003218 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	ec 01       	movw	r28, r24
    321e:	63 e4       	ldi	r22, 0x43	; 67
    3220:	70 e0       	ldi	r23, 0x00	; 0
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	0e 94 b8 1a 	call	0x3570	; 0x3570 <eeprom_read_dword>
    3228:	68 83       	st	Y, r22
    322a:	79 83       	std	Y+1, r23	; 0x01
    322c:	8a 83       	std	Y+2, r24	; 0x02
    322e:	9b 83       	std	Y+3, r25	; 0x03
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00003500 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    3500:	ab 01       	movw	r20, r22
    3502:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    3504:	87 e4       	ldi	r24, 0x47	; 71
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	0e 94 a8 19 	call	0x3350	; 0x3350 <eeprom_update_dword>
    350c:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00003236 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	ec 01       	movw	r28, r24
    323c:	67 e4       	ldi	r22, 0x47	; 71
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	0e 94 b8 1a 	call	0x3570	; 0x3570 <eeprom_read_dword>
    3246:	68 83       	st	Y, r22
    3248:	79 83       	std	Y+1, r23	; 0x01
    324a:	8a 83       	std	Y+2, r24	; 0x02
    324c:	9b 83       	std	Y+3, r25	; 0x03
    324e:	df 91       	pop	r29
    3250:	cf 91       	pop	r28
    3252:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

0000350e <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    350e:	ab 01       	movw	r20, r22
    3510:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    3512:	8b e4       	ldi	r24, 0x4B	; 75
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e 94 a8 19 	call	0x3350	; 0x3350 <eeprom_update_dword>
    351a:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00003254 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3254:	cf 93       	push	r28
    3256:	df 93       	push	r29
    3258:	ec 01       	movw	r28, r24
    325a:	6b e4       	ldi	r22, 0x4B	; 75
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	0e 94 b8 1a 	call	0x3570	; 0x3570 <eeprom_read_dword>
    3264:	68 83       	st	Y, r22
    3266:	79 83       	std	Y+1, r23	; 0x01
    3268:	8a 83       	std	Y+2, r24	; 0x02
    326a:	9b 83       	std	Y+3, r25	; 0x03
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	08 95       	ret

Disassembly of section .text.EM_set_collections:

0000351c <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    351c:	24 2f       	mov	r18, r20
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	44 e6       	ldi	r20, 0x64	; 100
    3522:	50 e0       	ldi	r21, 0x00	; 0
    3524:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <eeprom_update_block>
    3528:	08 95       	ret

Disassembly of section .text.EM_get_collections:

0000348e <EM_get_collections>:
}
void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    348e:	26 2f       	mov	r18, r22
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	44 e6       	ldi	r20, 0x64	; 100
    3494:	50 e0       	ldi	r21, 0x00	; 0
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	0e 94 b7 18 	call	0x316e	; 0x316e <eeprom_read_block>
    349c:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

000035de <LM_forward_msg>:
LM_STATUS LM_reset_module(){
	return util_reset_module();
}

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    35de:	0e 94 e7 16 	call	0x2dce	; 0x2dce <util_lora_forward_msg>
    35e2:	08 95       	ret

Disassembly of section .text.attach_ending:

000032cc <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    32cc:	fc 01       	movw	r30, r24
    32ce:	01 90       	ld	r0, Z+
    32d0:	00 20       	and	r0, r0
    32d2:	e9 f7       	brne	.-6      	; 0x32ce <attach_ending+0x2>
    32d4:	cf 01       	movw	r24, r30
    32d6:	23 e0       	ldi	r18, 0x03	; 3
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	4c ec       	ldi	r20, 0xCC	; 204
    32dc:	53 e0       	ldi	r21, 0x03	; 3
    32de:	60 e0       	ldi	r22, 0x00	; 0
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
    32e6:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

000032e8 <util_transmit_msg>:
		default:
		return sd->failure_state;
	}
}

void util_transmit_msg(char msg[]){
    32e8:	cf 93       	push	r28
    32ea:	df 93       	push	r29
    32ec:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    32ee:	bc 01       	movw	r22, r24
    32f0:	80 e8       	ldi	r24, 0x80	; 128
    32f2:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    32f6:	68 2f       	mov	r22, r24
    32f8:	ce 01       	movw	r24, r28
    32fa:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <uart0_hal_send_message>
}
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	08 95       	ret

Disassembly of section .text.util_read_msg:

000035e4 <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str(msg);
    35e4:	0e 94 42 18 	call	0x3084	; 0x3084 <uart0_hal_read_message_as_str>
    35e8:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00002dce <util_lora_forward_msg>:
	sd->failure_state=failed;
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	ea 01       	movw	r28, r20
    2dd4:	ab 01       	movw	r20, r22
    2dd6:	68 2f       	mov	r22, r24
    2dd8:	80 e9       	ldi	r24, 0x90	; 144
    2dda:	92 e0       	ldi	r25, 0x02	; 2
    2ddc:	0e 94 57 19 	call	0x32ae	; 0x32ae <strcpy>
    2de0:	80 e9       	ldi	r24, 0x90	; 144
    2de2:	92 e0       	ldi	r25, 0x02	; 2
    2de4:	0e 94 66 19 	call	0x32cc	; 0x32cc <attach_ending>
    2de8:	80 e9       	ldi	r24, 0x90	; 144
    2dea:	92 e0       	ldi	r25, 0x02	; 2
    2dec:	0e 94 74 19 	call	0x32e8	; 0x32e8 <util_transmit_msg>
    2df0:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <uart0_hal_message_ready>
    2df4:	88 23       	and	r24, r24
    2df6:	e1 f3       	breq	.-8      	; 0x2df0 <util_lora_forward_msg+0x22>
    2df8:	ce 01       	movw	r24, r28
    2dfa:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <util_read_msg>
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00003304 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    3304:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    3306:	54 81       	ldd	r21, Z+4	; 0x04
    3308:	43 81       	ldd	r20, Z+3	; 0x03
    330a:	31 81       	ldd	r19, Z+1	; 0x01
    330c:	20 81       	ld	r18, Z
    330e:	65 2f       	mov	r22, r21
    3310:	74 2f       	mov	r23, r20
    3312:	83 2f       	mov	r24, r19
    3314:	92 2f       	mov	r25, r18
    3316:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__fixunssfsi>
}
    331a:	cb 01       	movw	r24, r22
    331c:	08 95       	ret

Disassembly of section .text.init_measurement:

00002d5e <init_measurement>:
	if(status!=SCD30_STATUS_SUCCESS) return status;
	
	while(!SCD30_HAL_data_ready()){};
		
	return read_value(value);
}
    2d5e:	25 e0       	ldi	r18, 0x05	; 5
    2d60:	43 ea       	ldi	r20, 0xA3	; 163
    2d62:	54 e0       	ldi	r21, 0x04	; 4
    2d64:	60 e0       	ldi	r22, 0x00	; 0
    2d66:	81 e6       	ldi	r24, 0x61	; 97
    2d68:	0e 94 37 1a 	call	0x346e	; 0x346e <TWI_API_write_data_stop>
    2d6c:	81 11       	cpse	r24, r1
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <init_measurement+0x30>
    2d70:	25 e0       	ldi	r18, 0x05	; 5
    2d72:	48 ea       	ldi	r20, 0xA8	; 168
    2d74:	54 e0       	ldi	r21, 0x04	; 4
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	81 e6       	ldi	r24, 0x61	; 97
    2d7a:	0e 94 37 1a 	call	0x346e	; 0x346e <TWI_API_write_data_stop>
    2d7e:	81 11       	cpse	r24, r1
    2d80:	08 c0       	rjmp	.+16     	; 0x2d92 <init_measurement+0x34>
    2d82:	0e 94 cb 1a 	call	0x3596	; 0x3596 <SCD30_HAL_data_ready>
    2d86:	88 23       	and	r24, r24
    2d88:	e1 f3       	breq	.-8      	; 0x2d82 <init_measurement+0x24>
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	08 95       	ret
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	08 95       	ret
    2d92:	82 e0       	ldi	r24, 0x02	; 2
    2d94:	08 95       	ret

Disassembly of section .text.validate_data:

00002eda <validate_data>:
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	ec 01       	movw	r28, r24
    2ee0:	62 e0       	ldi	r22, 0x02	; 2
    2ee2:	0e 94 02 17 	call	0x2e04	; 0x2e04 <calc_crc8>
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	89 13       	cpse	r24, r25
    2eea:	0a c0       	rjmp	.+20     	; 0x2f00 <validate_data+0x26>
    2eec:	62 e0       	ldi	r22, 0x02	; 2
    2eee:	ce 01       	movw	r24, r28
    2ef0:	03 96       	adiw	r24, 0x03	; 3
    2ef2:	0e 94 02 17 	call	0x2e04	; 0x2e04 <calc_crc8>
    2ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef8:	89 17       	cp	r24, r25
    2efa:	21 f0       	breq	.+8      	; 0x2f04 <validate_data+0x2a>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	03 c0       	rjmp	.+6      	; 0x2f06 <validate_data+0x2c>
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	01 c0       	rjmp	.+2      	; 0x2f06 <validate_data+0x2c>
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	08 95       	ret

Disassembly of section .text.read_value:

00001e40 <read_value>:
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <read_value+0xa>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <read_value+0xc>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <read_value+0xe>
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	8c 01       	movw	r16, r24
    1e54:	8f ef       	ldi	r24, 0xFF	; 255
    1e56:	9f ef       	ldi	r25, 0xFF	; 255
    1e58:	f8 01       	movw	r30, r16
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
    1e5e:	0e 94 cb 1a 	call	0x3596	; 0x3596 <SCD30_HAL_data_ready>
    1e62:	81 11       	cpse	r24, r1
    1e64:	07 c0       	rjmp	.+14     	; 0x1e74 <read_value+0x34>
    1e66:	8e ef       	ldi	r24, 0xFE	; 254
    1e68:	9f ef       	ldi	r25, 0xFF	; 255
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	80 83       	st	Z, r24
    1e70:	83 e0       	ldi	r24, 0x03	; 3
    1e72:	2c c0       	rjmp	.+88     	; 0x1ecc <read_value+0x8c>
    1e74:	22 e0       	ldi	r18, 0x02	; 2
    1e76:	4d ea       	ldi	r20, 0xAD	; 173
    1e78:	54 e0       	ldi	r21, 0x04	; 4
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	81 e6       	ldi	r24, 0x61	; 97
    1e7e:	0e 94 37 1a 	call	0x346e	; 0x346e <TWI_API_write_data_stop>
    1e82:	81 11       	cpse	r24, r1
    1e84:	1e c0       	rjmp	.+60     	; 0x1ec2 <read_value+0x82>
    1e86:	8f e3       	ldi	r24, 0x3F	; 63
    1e88:	9f e1       	ldi	r25, 0x1F	; 31
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <read_value+0x4a>
    1e8e:	00 c0       	rjmp	.+0      	; 0x1e90 <read_value+0x50>
    1e90:	00 00       	nop
    1e92:	46 e0       	ldi	r20, 0x06	; 6
    1e94:	be 01       	movw	r22, r28
    1e96:	6f 5f       	subi	r22, 0xFF	; 255
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	81 e6       	ldi	r24, 0x61	; 97
    1e9c:	0e 94 a5 18 	call	0x314a	; 0x314a <TWI_API_read_data_ack_end_nack_stop>
    1ea0:	81 11       	cpse	r24, r1
    1ea2:	11 c0       	rjmp	.+34     	; 0x1ec6 <read_value+0x86>
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	0e 94 6d 17 	call	0x2eda	; 0x2eda <validate_data>
    1eac:	88 23       	and	r24, r24
    1eae:	69 f0       	breq	.+26     	; 0x1eca <read_value+0x8a>
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	0e 94 82 19 	call	0x3304	; 0x3304 <bytes_2_uint>
    1eb8:	f8 01       	movw	r30, r16
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	80 83       	st	Z, r24
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	05 c0       	rjmp	.+10     	; 0x1ecc <read_value+0x8c>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	03 c0       	rjmp	.+6      	; 0x1ecc <read_value+0x8c>
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	01 c0       	rjmp	.+2      	; 0x1ecc <read_value+0x8c>
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	26 96       	adiw	r28, 0x06	; 6
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

Disassembly of section .text.SCD30_init_get_reading:

00003272 <SCD30_init_get_reading>:

SCD30_STATUS SCD30_init_get_reading(){
	PM_HAL_SCD30_power(true);
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <PM_HAL_SCD30_power>
    3278:	2f ef       	ldi	r18, 0xFF	; 255
    327a:	83 ed       	ldi	r24, 0xD3	; 211
    327c:	90 e3       	ldi	r25, 0x30	; 48
    327e:	21 50       	subi	r18, 0x01	; 1
    3280:	80 40       	sbci	r24, 0x00	; 0
    3282:	90 40       	sbci	r25, 0x00	; 0
    3284:	e1 f7       	brne	.-8      	; 0x327e <SCD30_init_get_reading+0xc>
    3286:	00 c0       	rjmp	.+0      	; 0x3288 <SCD30_init_get_reading+0x16>
    3288:	00 00       	nop
	_delay_ms(2000);
	
	SCD30_STATUS status=init_measurement();
    328a:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <init_measurement>
	if(status!=SCD30_STATUS_SUCCESS) return status;
	return SCD30_STATUS_SUCCESS;
}
    328e:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

0000331e <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    3324:	0e 94 cb 1a 	call	0x3596	; 0x3596 <SCD30_HAL_data_ready>
    3328:	88 23       	and	r24, r24
    332a:	e1 f3       	breq	.-8      	; 0x3324 <SCD30_get_reading+0x6>
	
	return read_value(value);
    332c:	ce 01       	movw	r24, r28
    332e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <read_value>
}
    3332:	df 91       	pop	r29
    3334:	cf 91       	pop	r28
    3336:	08 95       	ret

Disassembly of section .text.parse_cmd:

000030d4 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    30d4:	fc 01       	movw	r30, r24
    30d6:	80 81       	ld	r24, Z
    30d8:	82 37       	cpi	r24, 0x72	; 114
    30da:	41 f0       	breq	.+16     	; 0x30ec <parse_cmd+0x18>
	if(msg[0]=='w') return CONF_WRTIE;
    30dc:	87 37       	cpi	r24, 0x77	; 119
    30de:	41 f0       	breq	.+16     	; 0x30f0 <parse_cmd+0x1c>
	if(msg[0]=='c') return CONF_CONNECT;
    30e0:	83 36       	cpi	r24, 0x63	; 99
    30e2:	41 f0       	breq	.+16     	; 0x30f4 <parse_cmd+0x20>
	if(msg[0]=='s') return CONF_SAMPLE;
    30e4:	83 37       	cpi	r24, 0x73	; 115
    30e6:	41 f4       	brne	.+16     	; 0x30f8 <parse_cmd+0x24>
    30e8:	8a e0       	ldi	r24, 0x0A	; 10
    30ea:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    30ec:	87 e0       	ldi	r24, 0x07	; 7
    30ee:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    30f0:	88 e0       	ldi	r24, 0x08	; 8
    30f2:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    30f4:	89 e0       	ldi	r24, 0x09	; 9
    30f6:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
	
	return CONF_NOT_VALID;
    30f8:	85 e0       	ldi	r24, 0x05	; 5
}
    30fa:	08 95       	ret

Disassembly of section .text.validate_cmd:

00002746 <validate_cmd>:

static bool validate_cmd(char msg[]){
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    274c:	bc 01       	movw	r22, r24
    274e:	80 e8       	ldi	r24, 0x80	; 128
    2750:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    2754:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2756:	fc 01       	movw	r30, r24
    2758:	31 97       	sbiw	r30, 0x01	; 1
    275a:	ec 0f       	add	r30, r28
    275c:	fd 1f       	adc	r31, r29
    275e:	80 81       	ld	r24, Z
    2760:	80 32       	cpi	r24, 0x20	; 32
    2762:	b1 f0       	breq	.+44     	; 0x2790 <validate_cmd+0x4a>
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	0d c0       	rjmp	.+26     	; 0x2786 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    276c:	fe 01       	movw	r30, r28
    276e:	e2 0f       	add	r30, r18
    2770:	f3 1f       	adc	r31, r19
    2772:	90 81       	ld	r25, Z
    2774:	90 32       	cpi	r25, 0x20	; 32
    2776:	21 f4       	brne	.+8      	; 0x2780 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    2778:	41 11       	cpse	r20, r1
    277a:	0c c0       	rjmp	.+24     	; 0x2794 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    2780:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    2782:	2f 5f       	subi	r18, 0xFF	; 255
    2784:	3f 4f       	sbci	r19, 0xFF	; 255
    2786:	26 17       	cp	r18, r22
    2788:	37 07       	cpc	r19, r23
    278a:	80 f3       	brcs	.-32     	; 0x276c <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	03 c0       	rjmp	.+6      	; 0x2796 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    2794:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	08 95       	ret

Disassembly of section .text.CONF_enter:

00001506 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    1506:	cf 93       	push	r28
	uart1_hal_init();
    1508:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    150c:	c0 e0       	ldi	r28, 0x00	; 0
    150e:	0b c0       	rjmp	.+22     	; 0x1526 <CONF_enter+0x20>
				uart1_hal_send_string("Setting modules up... Please wait");
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    1510:	c2 e0       	ldi	r28, 0x02	; 2
    1512:	09 c0       	rjmp	.+18     	; 0x1526 <CONF_enter+0x20>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    1514:	c5 e0       	ldi	r28, 0x05	; 5
    1516:	07 c0       	rjmp	.+14     	; 0x1526 <CONF_enter+0x20>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    1518:	c6 e0       	ldi	r28, 0x06	; 6
    151a:	05 c0       	rjmp	.+10     	; 0x1526 <CONF_enter+0x20>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    151c:	c5 e0       	ldi	r28, 0x05	; 5
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <CONF_enter+0x20>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1520:	c5 e0       	ldi	r28, 0x05	; 5
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <CONF_enter+0x20>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1524:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    1526:	ec 2f       	mov	r30, r28
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	ec 30       	cpi	r30, 0x0C	; 12
    152c:	f1 05       	cpc	r31, r1
    152e:	d8 f7       	brcc	.-10     	; 0x1526 <CONF_enter+0x20>
    1530:	e2 5c       	subi	r30, 0xC2	; 194
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    1538:	68 ea       	ldi	r22, 0xA8	; 168
    153a:	72 e0       	ldi	r23, 0x02	; 2
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    1542:	6e ec       	ldi	r22, 0xCE	; 206
    1544:	72 e0       	ldi	r23, 0x02	; 2
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
				if(!init_methane_SCD30()){
    154c:	0e 94 7e 18 	call	0x30fc	; 0x30fc <init_methane_SCD30>
    1550:	81 11       	cpse	r24, r1
    1552:	de cf       	rjmp	.-68     	; 0x1510 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    1554:	60 ef       	ldi	r22, 0xF0	; 240
    1556:	72 e0       	ldi	r23, 0x02	; 2
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
					state=CONF_EXIT;
    155e:	c4 e0       	ldi	r28, 0x04	; 4
    1560:	e2 cf       	rjmp	.-60     	; 0x1526 <CONF_enter+0x20>
				}
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    1562:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <uart1_hal_message_ready>
    1566:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    1568:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    156a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <uart1_hal_rx_full>
    156e:	81 11       	cpse	r24, r1
    1570:	d1 cf       	rjmp	.-94     	; 0x1514 <CONF_enter+0xe>
    1572:	d9 cf       	rjmp	.-78     	; 0x1526 <CONF_enter+0x20>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    1574:	80 e2       	ldi	r24, 0x20	; 32
    1576:	94 e0       	ldi	r25, 0x04	; 4
    1578:	0e 94 56 18 	call	0x30ac	; 0x30ac <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    157c:	80 e2       	ldi	r24, 0x20	; 32
    157e:	94 e0       	ldi	r25, 0x04	; 4
    1580:	0e 94 a3 13 	call	0x2746	; 0x2746 <validate_cmd>
    1584:	88 23       	and	r24, r24
    1586:	41 f2       	breq	.-112    	; 0x1518 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    1588:	80 e2       	ldi	r24, 0x20	; 32
    158a:	94 e0       	ldi	r25, 0x04	; 4
    158c:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <parse_cmd>
    1590:	c8 2f       	mov	r28, r24
    1592:	c9 cf       	rjmp	.-110    	; 0x1526 <CONF_enter+0x20>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    1594:	60 e2       	ldi	r22, 0x20	; 32
    1596:	74 e0       	ldi	r23, 0x04	; 4
    1598:	80 e8       	ldi	r24, 0x80	; 128
    159a:	48 e5       	ldi	r20, 0x58	; 88
    159c:	53 e0       	ldi	r21, 0x03	; 3
    159e:	0e 94 68 07 	call	0xed0	; 0xed0 <handle_read>
    15a2:	88 23       	and	r24, r24
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <CONF_enter+0xa2>
    15a6:	ba cf       	rjmp	.-140    	; 0x151c <CONF_enter+0x16>
					state=CONF_REPLY;
    15a8:	cb e0       	ldi	r28, 0x0B	; 11
    15aa:	bd cf       	rjmp	.-134    	; 0x1526 <CONF_enter+0x20>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    15ac:	60 e2       	ldi	r22, 0x20	; 32
    15ae:	74 e0       	ldi	r23, 0x04	; 4
    15b0:	80 e8       	ldi	r24, 0x80	; 128
    15b2:	48 e5       	ldi	r20, 0x58	; 88
    15b4:	53 e0       	ldi	r21, 0x03	; 3
    15b6:	0e 94 2c 09 	call	0x1258	; 0x1258 <handle_write>
    15ba:	88 23       	and	r24, r24
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <CONF_enter+0xba>
    15be:	b0 cf       	rjmp	.-160    	; 0x1520 <CONF_enter+0x1a>
					state=CONF_REPLY;
    15c0:	cb e0       	ldi	r28, 0x0B	; 11
    15c2:	b1 cf       	rjmp	.-158    	; 0x1526 <CONF_enter+0x20>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				CON_RN2483();
    15c4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <CON_RN2483>
				uart1_hal_clear_rx_buffer();
    15c8:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <uart1_hal_clear_rx_buffer>
				state=CONF_CLEAR_FOR_NEW_CMD;
    15cc:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    15ce:	ab cf       	rjmp	.-170    	; 0x1526 <CONF_enter+0x20>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    15d0:	60 e2       	ldi	r22, 0x20	; 32
    15d2:	74 e0       	ldi	r23, 0x04	; 4
    15d4:	80 e8       	ldi	r24, 0x80	; 128
    15d6:	48 e5       	ldi	r20, 0x58	; 88
    15d8:	53 e0       	ldi	r21, 0x03	; 3
    15da:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <handle_sample>
    15de:	88 23       	and	r24, r24
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <CONF_enter+0xde>
    15e2:	a0 cf       	rjmp	.-192    	; 0x1524 <CONF_enter+0x1e>
					state=CONF_REPLY;
    15e4:	cb e0       	ldi	r28, 0x0B	; 11
    15e6:	9f cf       	rjmp	.-194    	; 0x1526 <CONF_enter+0x20>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    15e8:	68 e5       	ldi	r22, 0x58	; 88
    15ea:	73 e0       	ldi	r23, 0x03	; 3
    15ec:	80 e8       	ldi	r24, 0x80	; 128
    15ee:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    15f2:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    15f4:	98 cf       	rjmp	.-208    	; 0x1526 <CONF_enter+0x20>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    15f6:	6f e0       	ldi	r22, 0x0F	; 15
    15f8:	73 e0       	ldi	r23, 0x03	; 3
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1600:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1602:	91 cf       	rjmp	.-222    	; 0x1526 <CONF_enter+0x20>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    1604:	69 e1       	ldi	r22, 0x19	; 25
    1606:	73 e0       	ldi	r23, 0x03	; 3
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    160e:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1610:	8a cf       	rjmp	.-236    	; 0x1526 <CONF_enter+0x20>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    1612:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    1616:	66 e2       	ldi	r22, 0x26	; 38
    1618:	73 e0       	ldi	r23, 0x03	; 3
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    1620:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1622:	81 cf       	rjmp	.-254    	; 0x1526 <CONF_enter+0x20>
			
			case CONF_EXIT:
				return;
		}
	}
}
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00003124 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0){
    3128:	bc 01       	movw	r22, r24
    312a:	80 e8       	ldi	r24, 0x80	; 128
    312c:	04 e0       	ldi	r16, 0x04	; 4
    312e:	10 e0       	ldi	r17, 0x00	; 0
    3130:	2a e3       	ldi	r18, 0x3A	; 58
    3132:	34 e0       	ldi	r19, 0x04	; 4
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	0e 94 bb 12 	call	0x2576	; 0x2576 <strncmp>
    313a:	89 2b       	or	r24, r25
    313c:	11 f4       	brne	.+4      	; 0x3142 <CON_RN2483_parse+0x1e>
		return CL_EXIT;
    313e:	84 e0       	ldi	r24, 0x04	; 4
    3140:	01 c0       	rjmp	.+2      	; 0x3144 <CON_RN2483_parse+0x20>
	}
	return CL_FORWARD;
    3142:	83 e0       	ldi	r24, 0x03	; 3
    3144:	1f 91       	pop	r17
    3146:	0f 91       	pop	r16
    3148:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001742 <CON_RN2483>:
extern char cnf_rx_cmd[];
extern char cnf_reply[];

static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CON_RN2483(){
    1742:	6f 92       	push	r6
    1744:	7f 92       	push	r7
    1746:	8f 92       	push	r8
    1748:	cf 92       	push	r12
    174a:	df 92       	push	r13
    174c:	ef 92       	push	r14
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1752:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1754:	c2 30       	cpi	r28, 0x02	; 2
    1756:	09 f1       	breq	.+66     	; 0x179a <CON_RN2483+0x58>
    1758:	28 f4       	brcc	.+10     	; 0x1764 <CON_RN2483+0x22>
    175a:	cc 23       	and	r28, r28
    175c:	49 f0       	breq	.+18     	; 0x1770 <CON_RN2483+0x2e>
    175e:	c1 30       	cpi	r28, 0x01	; 1
    1760:	91 f0       	breq	.+36     	; 0x1786 <CON_RN2483+0x44>
    1762:	f8 cf       	rjmp	.-16     	; 0x1754 <CON_RN2483+0x12>
    1764:	c3 30       	cpi	r28, 0x03	; 3
    1766:	f9 f0       	breq	.+62     	; 0x17a6 <CON_RN2483+0x64>
    1768:	c4 30       	cpi	r28, 0x04	; 4
    176a:	09 f4       	brne	.+2      	; 0x176e <CON_RN2483+0x2c>
    176c:	4b c0       	rjmp	.+150    	; 0x1804 <CON_RN2483+0xc2>
    176e:	f2 cf       	rjmp	.-28     	; 0x1754 <CON_RN2483+0x12>
			case CL_INIT:
				uart0_hal_init();
    1770:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <uart0_hal_init>
				rn2483_init();
    1774:	0e 94 df 1a 	call	0x35be	; 0x35be <rn2483_init>
				//LM_reset_module();
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1778:	6f e3       	ldi	r22, 0x3F	; 63
    177a:	74 e0       	ldi	r23, 0x04	; 4
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
				state=CL_READ_MSG;
    1782:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1784:	e7 cf       	rjmp	.-50     	; 0x1754 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1786:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <uart1_hal_message_ready>
    178a:	88 23       	and	r24, r24
    178c:	19 f3       	breq	.-58     	; 0x1754 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    178e:	80 e2       	ldi	r24, 0x20	; 32
    1790:	94 e0       	ldi	r25, 0x04	; 4
    1792:	0e 94 56 18 	call	0x30ac	; 0x30ac <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1796:	c2 e0       	ldi	r28, 0x02	; 2
    1798:	dd cf       	rjmp	.-70     	; 0x1754 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    179a:	80 e2       	ldi	r24, 0x20	; 32
    179c:	94 e0       	ldi	r25, 0x04	; 4
    179e:	0e 94 92 18 	call	0x3124	; 0x3124 <CON_RN2483_parse>
    17a2:	c8 2f       	mov	r28, r24
			break;
    17a4:	d7 cf       	rjmp	.-82     	; 0x1754 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    17a6:	80 e2       	ldi	r24, 0x20	; 32
    17a8:	94 e0       	ldi	r25, 0x04	; 4
    17aa:	6c 01       	movw	r12, r24
    17ac:	20 e8       	ldi	r18, 0x80	; 128
    17ae:	e2 2e       	mov	r14, r18
    17b0:	2f 93       	push	r18
    17b2:	df 92       	push	r13
    17b4:	8f 93       	push	r24
    17b6:	85 e7       	ldi	r24, 0x75	; 117
    17b8:	94 e0       	ldi	r25, 0x04	; 4
    17ba:	a0 e0       	ldi	r26, 0x00	; 0
    17bc:	af 93       	push	r26
    17be:	9f 93       	push	r25
    17c0:	8f 93       	push	r24
    17c2:	c8 e5       	ldi	r28, 0x58	; 88
    17c4:	d3 e0       	ldi	r29, 0x03	; 3
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <sprintf>
				uart1_hal_send_string(cnf_reply);
    17ce:	3e 01       	movw	r6, r28
    17d0:	20 e8       	ldi	r18, 0x80	; 128
    17d2:	82 2e       	mov	r8, r18
    17d4:	88 2d       	mov	r24, r8
    17d6:	b3 01       	movw	r22, r6
    17d8:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    17dc:	ae 01       	movw	r20, r28
    17de:	6c 2d       	mov	r22, r12
    17e0:	7d 2d       	mov	r23, r13
    17e2:	8e 2d       	mov	r24, r14
    17e4:	0e 94 ef 1a 	call	0x35de	; 0x35de <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    17e8:	88 2d       	mov	r24, r8
    17ea:	b3 01       	movw	r22, r6
    17ec:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    17f0:	8d b7       	in	r24, 0x3d	; 61
    17f2:	9e b7       	in	r25, 0x3e	; 62
    17f4:	08 96       	adiw	r24, 0x08	; 8
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	9e bf       	out	0x3e, r25	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    1800:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1802:	a8 cf       	rjmp	.-176    	; 0x1754 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart1_hal_send_string("Closing connection to RN2483...");
    1804:	6b e7       	ldi	r22, 0x7B	; 123
    1806:	74 e0       	ldi	r23, 0x04	; 4
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	0e 94 9f 10 	call	0x213e	; 0x213e <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	ef 90       	pop	r14
    1816:	df 90       	pop	r13
    1818:	cf 90       	pop	r12
    181a:	8f 90       	pop	r8
    181c:	7f 90       	pop	r7
    181e:	6f 90       	pop	r6
    1820:	08 95       	ret

Disassembly of section .text.read_cols:

00001b70 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    1b70:	cf 92       	push	r12
    1b72:	df 92       	push	r13
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	a3 97       	sbiw	r28, 0x23	; 35
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1b90:	63 e2       	ldi	r22, 0x23	; 35
    1b92:	ce 01       	movw	r24, r28
    1b94:	01 96       	adiw	r24, 0x01	; 1
    1b96:	0e 94 47 1a 	call	0x348e	; 0x348e <EM_get_collections>
	res[0]='\0';
    1b9a:	f7 01       	movw	r30, r14
    1b9c:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    1b9e:	10 e0       	ldi	r17, 0x00	; 0
    1ba0:	35 c0       	rjmp	.+106    	; 0x1c0c <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    1ba2:	81 2f       	mov	r24, r17
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	ee 0f       	add	r30, r30
    1baa:	ff 1f       	adc	r31, r31
    1bac:	ee 0f       	add	r30, r30
    1bae:	ff 1f       	adc	r31, r31
    1bb0:	e8 0f       	add	r30, r24
    1bb2:	f9 1f       	adc	r31, r25
    1bb4:	21 e0       	ldi	r18, 0x01	; 1
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	2c 0f       	add	r18, r28
    1bba:	3d 1f       	adc	r19, r29
    1bbc:	e2 0f       	add	r30, r18
    1bbe:	f3 1f       	adc	r31, r19
    1bc0:	23 81       	ldd	r18, Z+3	; 0x03
    1bc2:	2f 93       	push	r18
    1bc4:	22 81       	ldd	r18, Z+2	; 0x02
    1bc6:	2f 93       	push	r18
    1bc8:	21 81       	ldd	r18, Z+1	; 0x01
    1bca:	2f 93       	push	r18
    1bcc:	20 81       	ld	r18, Z
    1bce:	2f 93       	push	r18
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	9f 93       	push	r25
    1bd4:	8f 93       	push	r24
    1bd6:	84 ef       	ldi	r24, 0xF4	; 244
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	a0 e0       	ldi	r26, 0x00	; 0
    1bdc:	af 93       	push	r26
    1bde:	9f 93       	push	r25
    1be0:	8f 93       	push	r24
    1be2:	0f 2e       	mov	r0, r31
    1be4:	fc ea       	ldi	r31, 0xAC	; 172
    1be6:	cf 2e       	mov	r12, r31
    1be8:	f6 e0       	ldi	r31, 0x06	; 6
    1bea:	df 2e       	mov	r13, r31
    1bec:	f0 2d       	mov	r31, r0
    1bee:	df 92       	push	r13
    1bf0:	cf 92       	push	r12
    1bf2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <sprintf>
		strcat(res, arg);
    1bf6:	a6 01       	movw	r20, r12
    1bf8:	60 e8       	ldi	r22, 0x80	; 128
    1bfa:	c7 01       	movw	r24, r14
    1bfc:	0e 94 15 18 	call	0x302a	; 0x302a <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    1c00:	1f 5f       	subi	r17, 0xFF	; 255
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	17 30       	cpi	r17, 0x07	; 7
    1c0e:	48 f2       	brcs	.-110    	; 0x1ba2 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    1c10:	a3 96       	adiw	r28, 0x23	; 35
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	ff 90       	pop	r15
    1c24:	ef 90       	pop	r14
    1c26:	df 90       	pop	r13
    1c28:	cf 90       	pop	r12
    1c2a:	08 95       	ret

Disassembly of section .text.write_deveui:

00002242 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2250:	22 e0       	ldi	r18, 0x02	; 2
    2252:	4c ea       	ldi	r20, 0xAC	; 172
    2254:	56 e0       	ldi	r21, 0x06	; 6
    2256:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    225a:	c8 2f       	mov	r28, r24
    225c:	88 23       	and	r24, r24
    225e:	29 f1       	breq	.+74     	; 0x22aa <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    2260:	8c ea       	ldi	r24, 0xAC	; 172
    2262:	96 e0       	ldi	r25, 0x06	; 6
    2264:	6c 01       	movw	r12, r24
    2266:	20 e8       	ldi	r18, 0x80	; 128
    2268:	e2 2e       	mov	r14, r18
    226a:	8e 2d       	mov	r24, r14
    226c:	b6 01       	movw	r22, r12
    226e:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    2272:	40 97       	sbiw	r24, 0x10	; 16
    2274:	c9 f4       	brne	.+50     	; 0x22a8 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    2276:	8e 2d       	mov	r24, r14
    2278:	b6 01       	movw	r22, r12
    227a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <EM_set_deveui>
    227e:	c8 2f       	mov	r28, r24
    2280:	81 11       	cpse	r24, r1
    2282:	09 c0       	rjmp	.+18     	; 0x2296 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    2284:	27 e0       	ldi	r18, 0x07	; 7
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a e0       	ldi	r20, 0x0A	; 10
    228a:	52 e0       	ldi	r21, 0x02	; 2
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	c8 01       	movw	r24, r16
    2290:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return false;
    2294:	0a c0       	rjmp	.+20     	; 0x22aa <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2296:	28 e0       	ldi	r18, 0x08	; 8
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	41 e1       	ldi	r20, 0x11	; 17
    229c:	52 e0       	ldi	r21, 0x02	; 2
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	c8 01       	movw	r24, r16
    22a2:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return true;
    22a6:	01 c0       	rjmp	.+2      	; 0x22aa <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    22a8:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    22aa:	8c 2f       	mov	r24, r28
    22ac:	cf 91       	pop	r28
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	ef 90       	pop	r14
    22b4:	df 90       	pop	r13
    22b6:	cf 90       	pop	r12
    22b8:	08 95       	ret

Disassembly of section .text.write_appeui:

000022ba <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    22ba:	cf 92       	push	r12
    22bc:	df 92       	push	r13
    22be:	ef 92       	push	r14
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    22c8:	22 e0       	ldi	r18, 0x02	; 2
    22ca:	4c ea       	ldi	r20, 0xAC	; 172
    22cc:	56 e0       	ldi	r21, 0x06	; 6
    22ce:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    22d2:	c8 2f       	mov	r28, r24
    22d4:	88 23       	and	r24, r24
    22d6:	29 f1       	breq	.+74     	; 0x2322 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    22d8:	8c ea       	ldi	r24, 0xAC	; 172
    22da:	96 e0       	ldi	r25, 0x06	; 6
    22dc:	6c 01       	movw	r12, r24
    22de:	20 e8       	ldi	r18, 0x80	; 128
    22e0:	e2 2e       	mov	r14, r18
    22e2:	8e 2d       	mov	r24, r14
    22e4:	b6 01       	movw	r22, r12
    22e6:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    22ea:	40 97       	sbiw	r24, 0x10	; 16
    22ec:	c9 f4       	brne	.+50     	; 0x2320 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    22ee:	8e 2d       	mov	r24, r14
    22f0:	b6 01       	movw	r22, r12
    22f2:	0e 94 75 16 	call	0x2cea	; 0x2cea <EM_set_appeui>
    22f6:	c8 2f       	mov	r28, r24
    22f8:	81 11       	cpse	r24, r1
    22fa:	09 c0       	rjmp	.+18     	; 0x230e <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    22fc:	27 e0       	ldi	r18, 0x07	; 7
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a e0       	ldi	r20, 0x0A	; 10
    2302:	52 e0       	ldi	r21, 0x02	; 2
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	c8 01       	movw	r24, r16
    2308:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return false;
    230c:	0a c0       	rjmp	.+20     	; 0x2322 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    230e:	28 e0       	ldi	r18, 0x08	; 8
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	41 e1       	ldi	r20, 0x11	; 17
    2314:	52 e0       	ldi	r21, 0x02	; 2
    2316:	60 e0       	ldi	r22, 0x00	; 0
    2318:	c8 01       	movw	r24, r16
    231a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return true;
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    2320:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2322:	8c 2f       	mov	r24, r28
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ef 90       	pop	r14
    232c:	df 90       	pop	r13
    232e:	cf 90       	pop	r12
    2330:	08 95       	ret

Disassembly of section .text.write_appkey:

00002332 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    2332:	cf 92       	push	r12
    2334:	df 92       	push	r13
    2336:	ef 92       	push	r14
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2340:	22 e0       	ldi	r18, 0x02	; 2
    2342:	4c ea       	ldi	r20, 0xAC	; 172
    2344:	56 e0       	ldi	r21, 0x06	; 6
    2346:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    234a:	c8 2f       	mov	r28, r24
    234c:	88 23       	and	r24, r24
    234e:	29 f1       	breq	.+74     	; 0x239a <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    2350:	8c ea       	ldi	r24, 0xAC	; 172
    2352:	96 e0       	ldi	r25, 0x06	; 6
    2354:	6c 01       	movw	r12, r24
    2356:	20 e8       	ldi	r18, 0x80	; 128
    2358:	e2 2e       	mov	r14, r18
    235a:	8e 2d       	mov	r24, r14
    235c:	b6 01       	movw	r22, r12
    235e:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    2362:	80 97       	sbiw	r24, 0x20	; 32
    2364:	c9 f4       	brne	.+50     	; 0x2398 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    2366:	8e 2d       	mov	r24, r14
    2368:	b6 01       	movw	r22, r12
    236a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <EM_set_appkey>
    236e:	c8 2f       	mov	r28, r24
    2370:	81 11       	cpse	r24, r1
    2372:	09 c0       	rjmp	.+18     	; 0x2386 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    2374:	27 e0       	ldi	r18, 0x07	; 7
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	4a e0       	ldi	r20, 0x0A	; 10
    237a:	52 e0       	ldi	r21, 0x02	; 2
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	c8 01       	movw	r24, r16
    2380:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return false;
    2384:	0a c0       	rjmp	.+20     	; 0x239a <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2386:	28 e0       	ldi	r18, 0x08	; 8
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	41 e1       	ldi	r20, 0x11	; 17
    238c:	52 e0       	ldi	r21, 0x02	; 2
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	c8 01       	movw	r24, r16
    2392:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return true;
    2396:	01 c0       	rjmp	.+2      	; 0x239a <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    2398:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    239a:	8c 2f       	mov	r24, r28
    239c:	cf 91       	pop	r28
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
    23a8:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00002924 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	cf 93       	push	r28
    292a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    292c:	22 e0       	ldi	r18, 0x02	; 2
    292e:	4c ea       	ldi	r20, 0xAC	; 172
    2930:	56 e0       	ldi	r21, 0x06	; 6
    2932:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    2936:	c8 2f       	mov	r28, r24
    2938:	88 23       	and	r24, r24
    293a:	a9 f0       	breq	.+42     	; 0x2966 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    293c:	8c ea       	ldi	r24, 0xAC	; 172
    293e:	96 e0       	ldi	r25, 0x06	; 6
    2940:	0e 94 4c 13 	call	0x2698	; 0x2698 <is_float>
    2944:	c8 2f       	mov	r28, r24
    2946:	88 23       	and	r24, r24
    2948:	71 f0       	breq	.+28     	; 0x2966 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    294a:	8c ea       	ldi	r24, 0xAC	; 172
    294c:	96 e0       	ldi	r25, 0x06	; 6
    294e:	0e 94 45 14 	call	0x288a	; 0x288a <str2flaot>
	EM_set_ppmfactor(val);
    2952:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    2956:	28 e0       	ldi	r18, 0x08	; 8
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	41 e1       	ldi	r20, 0x11	; 17
    295c:	52 e0       	ldi	r21, 0x02	; 2
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	c8 01       	movw	r24, r16
    2962:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
	return true;
}
    2966:	8c 2f       	mov	r24, r28
    2968:	cf 91       	pop	r28
    296a:	1f 91       	pop	r17
    296c:	0f 91       	pop	r16
    296e:	08 95       	ret

Disassembly of section .text.write_RRL:

00002970 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	cf 93       	push	r28
    2976:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2978:	22 e0       	ldi	r18, 0x02	; 2
    297a:	4c ea       	ldi	r20, 0xAC	; 172
    297c:	56 e0       	ldi	r21, 0x06	; 6
    297e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    2982:	c8 2f       	mov	r28, r24
    2984:	88 23       	and	r24, r24
    2986:	a9 f0       	breq	.+42     	; 0x29b2 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    2988:	8c ea       	ldi	r24, 0xAC	; 172
    298a:	96 e0       	ldi	r25, 0x06	; 6
    298c:	0e 94 4c 13 	call	0x2698	; 0x2698 <is_float>
    2990:	c8 2f       	mov	r28, r24
    2992:	88 23       	and	r24, r24
    2994:	71 f0       	breq	.+28     	; 0x29b2 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    2996:	8c ea       	ldi	r24, 0xAC	; 172
    2998:	96 e0       	ldi	r25, 0x06	; 6
    299a:	0e 94 45 14 	call	0x288a	; 0x288a <str2flaot>
	EM_set_RRL(val);
    299e:	0e 94 80 1a 	call	0x3500	; 0x3500 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    29a2:	28 e0       	ldi	r18, 0x08	; 8
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	41 e1       	ldi	r20, 0x11	; 17
    29a8:	52 e0       	ldi	r21, 0x02	; 2
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	c8 01       	movw	r24, r16
    29ae:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
	return true;
}
    29b2:	8c 2f       	mov	r24, r28
    29b4:	cf 91       	pop	r28
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	08 95       	ret

Disassembly of section .text.write_VCC:

000029bc <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    29bc:	0f 93       	push	r16
    29be:	1f 93       	push	r17
    29c0:	cf 93       	push	r28
    29c2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    29c4:	22 e0       	ldi	r18, 0x02	; 2
    29c6:	4c ea       	ldi	r20, 0xAC	; 172
    29c8:	56 e0       	ldi	r21, 0x06	; 6
    29ca:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    29ce:	c8 2f       	mov	r28, r24
    29d0:	88 23       	and	r24, r24
    29d2:	a9 f0       	breq	.+42     	; 0x29fe <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    29d4:	8c ea       	ldi	r24, 0xAC	; 172
    29d6:	96 e0       	ldi	r25, 0x06	; 6
    29d8:	0e 94 4c 13 	call	0x2698	; 0x2698 <is_float>
    29dc:	c8 2f       	mov	r28, r24
    29de:	88 23       	and	r24, r24
    29e0:	71 f0       	breq	.+28     	; 0x29fe <write_VCC+0x42>
	
	float val=str2flaot(arg);
    29e2:	8c ea       	ldi	r24, 0xAC	; 172
    29e4:	96 e0       	ldi	r25, 0x06	; 6
    29e6:	0e 94 45 14 	call	0x288a	; 0x288a <str2flaot>
	EM_set_Vcc(val);
    29ea:	0e 94 87 1a 	call	0x350e	; 0x350e <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    29ee:	28 e0       	ldi	r18, 0x08	; 8
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	41 e1       	ldi	r20, 0x11	; 17
    29f4:	52 e0       	ldi	r21, 0x02	; 2
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	c8 01       	movw	r24, r16
    29fa:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
	return true;
}
    29fe:	8c 2f       	mov	r24, r28
    2a00:	cf 91       	pop	r28
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	08 95       	ret

Disassembly of section .text.write_cols:

000013d8 <write_cols>:

static bool write_cols(const char cmd[], char res[]){
    13d8:	4f 92       	push	r4
    13da:	5f 92       	push	r5
    13dc:	6f 92       	push	r6
    13de:	7f 92       	push	r7
    13e0:	8f 92       	push	r8
    13e2:	af 92       	push	r10
    13e4:	bf 92       	push	r11
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	a3 97       	sbiw	r28, 0x23	; 35
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	3b 01       	movw	r6, r22
    1408:	88 2e       	mov	r8, r24
    140a:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    140c:	22 e0       	ldi	r18, 0x02	; 2
    140e:	4c ea       	ldi	r20, 0xAC	; 172
    1410:	56 e0       	ldi	r21, 0x06	; 6
    1412:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    1416:	18 2f       	mov	r17, r24
    1418:	88 23       	and	r24, r24
    141a:	09 f4       	brne	.+2      	; 0x141e <write_cols+0x46>
    141c:	5d c0       	rjmp	.+186    	; 0x14d8 <write_cols+0x100>
	index=atoi(arg);
    141e:	8c ea       	ldi	r24, 0xAC	; 172
    1420:	96 e0       	ldi	r25, 0x06	; 6
    1422:	6c 01       	movw	r12, r24
    1424:	20 e8       	ldi	r18, 0x80	; 128
    1426:	e2 2e       	mov	r14, r18
    1428:	8e 2d       	mov	r24, r14
    142a:	b6 01       	movw	r22, r12
    142c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <atoi>
	if(index<1 || index>7) return false;
    1430:	0f ef       	ldi	r16, 0xFF	; 255
    1432:	08 0f       	add	r16, r24
    1434:	07 30       	cpi	r16, 0x07	; 7
    1436:	08 f0       	brcs	.+2      	; 0x143a <write_cols+0x62>
    1438:	4a c0       	rjmp	.+148    	; 0x14ce <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    143a:	23 e0       	ldi	r18, 0x03	; 3
    143c:	4c ea       	ldi	r20, 0xAC	; 172
    143e:	56 e0       	ldi	r21, 0x06	; 6
    1440:	88 2d       	mov	r24, r8
    1442:	b3 01       	movw	r22, r6
    1444:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    1448:	18 2f       	mov	r17, r24
    144a:	88 23       	and	r24, r24
    144c:	09 f4       	brne	.+2      	; 0x1450 <write_cols+0x78>
    144e:	44 c0       	rjmp	.+136    	; 0x14d8 <write_cols+0x100>
	samplings=atoi(arg);
    1450:	8e 2d       	mov	r24, r14
    1452:	b6 01       	movw	r22, r12
    1454:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <atoi>
    1458:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    145a:	02 97       	sbiw	r24, 0x02	; 2
    145c:	8b 32       	cpi	r24, 0x2B	; 43
    145e:	91 40       	sbci	r25, 0x01	; 1
    1460:	c0 f5       	brcc	.+112    	; 0x14d2 <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    1462:	24 e0       	ldi	r18, 0x04	; 4
    1464:	4c ea       	ldi	r20, 0xAC	; 172
    1466:	56 e0       	ldi	r21, 0x06	; 6
    1468:	88 2d       	mov	r24, r8
    146a:	b3 01       	movw	r22, r6
    146c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    1470:	18 2f       	mov	r17, r24
    1472:	88 23       	and	r24, r24
    1474:	89 f1       	breq	.+98     	; 0x14d8 <write_cols+0x100>
	samplingInterval=atoi(arg);
    1476:	8e 2d       	mov	r24, r14
    1478:	b6 01       	movw	r22, r12
    147a:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <atoi>
    147e:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    1480:	02 97       	sbiw	r24, 0x02	; 2
    1482:	87 35       	cpi	r24, 0x57	; 87
    1484:	92 40       	sbci	r25, 0x02	; 2
    1486:	38 f5       	brcc	.+78     	; 0x14d6 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1488:	63 e2       	ldi	r22, 0x23	; 35
    148a:	ce 01       	movw	r24, r28
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	7c 01       	movw	r14, r24
    1490:	0e 94 47 1a 	call	0x348e	; 0x348e <EM_get_collections>
	
	cols[index].samplings=samplings;
    1494:	80 2f       	mov	r24, r16
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	fc 01       	movw	r30, r24
    149a:	ee 0f       	add	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e8 0f       	add	r30, r24
    14a4:	f9 1f       	adc	r31, r25
    14a6:	ee 0d       	add	r30, r14
    14a8:	ff 1d       	adc	r31, r15
    14aa:	51 82       	std	Z+1, r5	; 0x01
    14ac:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    14ae:	d3 82       	std	Z+3, r13	; 0x03
    14b0:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    14b2:	b7 01       	movw	r22, r14
    14b4:	80 e8       	ldi	r24, 0x80	; 128
    14b6:	43 e2       	ldi	r20, 0x23	; 35
    14b8:	0e 94 8e 1a 	call	0x351c	; 0x351c <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    14bc:	28 e0       	ldi	r18, 0x08	; 8
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	41 e1       	ldi	r20, 0x11	; 17
    14c2:	52 e0       	ldi	r21, 0x02	; 2
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	c5 01       	movw	r24, r10
    14c8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
	return true;	
    14cc:	05 c0       	rjmp	.+10     	; 0x14d8 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    14ce:	10 e0       	ldi	r17, 0x00	; 0
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    14d2:	10 e0       	ldi	r17, 0x00	; 0
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    14d6:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    14d8:	81 2f       	mov	r24, r17
    14da:	a3 96       	adiw	r28, 0x23	; 35
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	8f 90       	pop	r8
    14fc:	7f 90       	pop	r7
    14fe:	6f 90       	pop	r6
    1500:	5f 90       	pop	r5
    1502:	4f 90       	pop	r4
    1504:	08 95       	ret

Disassembly of section .text.write_reset:

000019d4 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	a3 97       	sbiw	r28, 0x23	; 35
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    19ee:	69 e1       	ldi	r22, 0x19	; 25
    19f0:	72 e0       	ldi	r23, 0x02	; 2
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    19f8:	69 e1       	ldi	r22, 0x19	; 25
    19fa:	72 e0       	ldi	r23, 0x02	; 2
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	0e 94 75 16 	call	0x2cea	; 0x2cea <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    1a02:	6a e2       	ldi	r22, 0x2A	; 42
    1a04:	72 e0       	ldi	r23, 0x02	; 2
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	0e 94 92 16 	call	0x2d24	; 0x2d24 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	80 e8       	ldi	r24, 0x80	; 128
    1a12:	9f e3       	ldi	r25, 0x3F	; 63
    1a14:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	70 e4       	ldi	r23, 0x40	; 64
    1a1c:	8c e1       	ldi	r24, 0x1C	; 28
    1a1e:	95 e4       	ldi	r25, 0x45	; 69
    1a20:	0e 94 80 1a 	call	0x3500	; 0x3500 <EM_set_RRL>
	EM_set_Vcc(5.00);
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	80 ea       	ldi	r24, 0xA0	; 160
    1a2a:	90 e4       	ldi	r25, 0x40	; 64
    1a2c:	0e 94 87 1a 	call	0x350e	; 0x350e <EM_set_Vcc>
	
	for (uint8_t i=0; i<7; i++)
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	1a c0       	rjmp	.+52     	; 0x1a68 <write_reset+0x94>
	{
		cols[i].type=T_INT16;
    1a34:	e8 2f       	mov	r30, r24
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	9f 01       	movw	r18, r30
    1a3a:	22 0f       	add	r18, r18
    1a3c:	33 1f       	adc	r19, r19
    1a3e:	22 0f       	add	r18, r18
    1a40:	33 1f       	adc	r19, r19
    1a42:	e2 0f       	add	r30, r18
    1a44:	f3 1f       	adc	r31, r19
    1a46:	21 e0       	ldi	r18, 0x01	; 1
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	2c 0f       	add	r18, r28
    1a4c:	3d 1f       	adc	r19, r29
    1a4e:	e2 0f       	add	r30, r18
    1a50:	f3 1f       	adc	r31, r19
    1a52:	92 e0       	ldi	r25, 0x02	; 2
    1a54:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    1a56:	22 e0       	ldi	r18, 0x02	; 2
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	31 83       	std	Z+1, r19	; 0x01
    1a5c:	20 83       	st	Z, r18
		cols[i].samplingInterval=10;
    1a5e:	2a e0       	ldi	r18, 0x0A	; 10
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	33 83       	std	Z+3, r19	; 0x03
    1a64:	22 83       	std	Z+2, r18	; 0x02
	EM_set_appkey("00000000000000000000000000000000");
	EM_set_ppmfactor(1.00);
	EM_set_RRL(2500.00);
	EM_set_Vcc(5.00);
	
	for (uint8_t i=0; i<7; i++)
    1a66:	8f 5f       	subi	r24, 0xFF	; 255
    1a68:	87 30       	cpi	r24, 0x07	; 7
    1a6a:	20 f3       	brcs	.-56     	; 0x1a34 <write_reset+0x60>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=10;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1a6c:	be 01       	movw	r22, r28
    1a6e:	6f 5f       	subi	r22, 0xFF	; 255
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	80 e8       	ldi	r24, 0x80	; 128
    1a74:	43 e2       	ldi	r20, 0x23	; 35
    1a76:	0e 94 8e 1a 	call	0x351c	; 0x351c <EM_set_collections>
	
	strcpy(res, "All settings reset");
    1a7a:	23 e1       	ldi	r18, 0x13	; 19
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4b e4       	ldi	r20, 0x4B	; 75
    1a80:	52 e0       	ldi	r21, 0x02	; 2
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	c8 01       	movw	r24, r16
    1a86:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
	return true;
}
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	a3 96       	adiw	r28, 0x23	; 35
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	08 95       	ret

Disassembly of section .text.handle_read:

00000ed0 <handle_read>:
static bool write_RRL(const char cmd[], char res[]);
static bool write_VCC(const char cmd[], char res[]);
static bool write_cols(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);

bool handle_read(const char cmd[], char res[]){
     ed0:	cf 92       	push	r12
     ed2:	df 92       	push	r13
     ed4:	ef 92       	push	r14
     ed6:	ff 92       	push	r15
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	68 97       	sbiw	r28, 0x18	; 24
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	6b 01       	movw	r12, r22
     ef2:	e8 2e       	mov	r14, r24
     ef4:	f4 2e       	mov	r15, r20
     ef6:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
     ef8:	21 e0       	ldi	r18, 0x01	; 1
     efa:	ae 01       	movw	r20, r28
     efc:	4f 5f       	subi	r20, 0xFF	; 255
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
     f04:	18 2f       	mov	r17, r24
     f06:	88 23       	and	r24, r24
     f08:	09 f4       	brne	.+2      	; 0xf0c <handle_read+0x3c>
     f0a:	be c0       	rjmp	.+380    	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
     f0c:	8e 2d       	mov	r24, r14
     f0e:	b6 01       	movw	r22, r12
     f10:	0e 94 ce 13 	call	0x279c	; 0x279c <count_parameters>
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	09 f4       	brne	.+2      	; 0xf1a <handle_read+0x4a>
     f18:	b6 c0       	rjmp	.+364    	; 0x1086 <__DATA_REGION_LENGTH__+0x86>
	
	if (strcmp(par, RW_DEVEUI)==0)
     f1a:	ce 01       	movw	r24, r28
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	6c 01       	movw	r12, r24
     f20:	20 e8       	ldi	r18, 0x80	; 128
     f22:	e2 2e       	mov	r14, r18
     f24:	2e e5       	ldi	r18, 0x5E	; 94
     f26:	32 e0       	ldi	r19, 0x02	; 2
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	8e 2d       	mov	r24, r14
     f2c:	b6 01       	movw	r22, r12
     f2e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
     f32:	89 2b       	or	r24, r25
     f34:	29 f4       	brne	.+10     	; 0xf40 <handle_read+0x70>
	{
		EM_get_deveui(res);
     f36:	8f 2d       	mov	r24, r15
     f38:	90 2f       	mov	r25, r16
     f3a:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <EM_get_deveui>
     f3e:	a4 c0       	rjmp	.+328    	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
	}
	else if (strcmp(par, RW_APPEUI)==0)
     f40:	25 e6       	ldi	r18, 0x65	; 101
     f42:	32 e0       	ldi	r19, 0x02	; 2
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	8e 2d       	mov	r24, r14
     f48:	b6 01       	movw	r22, r12
     f4a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
     f4e:	89 2b       	or	r24, r25
     f50:	29 f4       	brne	.+10     	; 0xf5c <handle_read+0x8c>
	{
		EM_get_appeui(res);
     f52:	8f 2d       	mov	r24, r15
     f54:	90 2f       	mov	r25, r16
     f56:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <EM_get_appeui>
     f5a:	96 c0       	rjmp	.+300    	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
	}
	else if (strcmp(par, RW_APPKEY)==0)
     f5c:	2c e6       	ldi	r18, 0x6C	; 108
     f5e:	32 e0       	ldi	r19, 0x02	; 2
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	8e 2d       	mov	r24, r14
     f64:	b6 01       	movw	r22, r12
     f66:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
     f6a:	89 2b       	or	r24, r25
     f6c:	29 f4       	brne	.+10     	; 0xf78 <handle_read+0xa8>
	{
		EM_get_appkey(res);
     f6e:	8f 2d       	mov	r24, r15
     f70:	90 2f       	mov	r25, r16
     f72:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <EM_get_appkey>
     f76:	88 c0       	rjmp	.+272    	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
     f78:	23 e7       	ldi	r18, 0x73	; 115
     f7a:	32 e0       	ldi	r19, 0x02	; 2
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	8e 2d       	mov	r24, r14
     f80:	b6 01       	movw	r22, r12
     f82:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
     f86:	89 2b       	or	r24, r25
     f88:	e1 f4       	brne	.+56     	; 0xfc2 <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
     f8a:	ce 01       	movw	r24, r28
     f8c:	45 96       	adiw	r24, 0x15	; 21
     f8e:	0e 94 0c 19 	call	0x3218	; 0x3218 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
     f92:	88 8d       	ldd	r24, Y+24	; 0x18
     f94:	8f 93       	push	r24
     f96:	8f 89       	ldd	r24, Y+23	; 0x17
     f98:	8f 93       	push	r24
     f9a:	8e 89       	ldd	r24, Y+22	; 0x16
     f9c:	8f 93       	push	r24
     f9e:	8d 89       	ldd	r24, Y+21	; 0x15
     fa0:	8f 93       	push	r24
     fa2:	88 e7       	ldi	r24, 0x78	; 120
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	a0 e0       	ldi	r26, 0x00	; 0
     fa8:	af 93       	push	r26
     faa:	9f 93       	push	r25
     fac:	8f 93       	push	r24
     fae:	0f 93       	push	r16
     fb0:	ff 92       	push	r15
     fb2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <sprintf>
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	63 c0       	rjmp	.+198    	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
	}
	else if(strcmp(par, RW_RRL)==0)
     fc2:	2d e7       	ldi	r18, 0x7D	; 125
     fc4:	32 e0       	ldi	r19, 0x02	; 2
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	8e 2d       	mov	r24, r14
     fca:	b6 01       	movw	r22, r12
     fcc:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
     fd0:	89 2b       	or	r24, r25
     fd2:	e1 f4       	brne	.+56     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
	{
		EM_get_RRL(&val);
     fd4:	ce 01       	movw	r24, r28
     fd6:	45 96       	adiw	r24, 0x15	; 21
     fd8:	0e 94 1b 19 	call	0x3236	; 0x3236 <EM_get_RRL>
		sprintf(res, "%.2f", val);
     fdc:	88 8d       	ldd	r24, Y+24	; 0x18
     fde:	8f 93       	push	r24
     fe0:	8f 89       	ldd	r24, Y+23	; 0x17
     fe2:	8f 93       	push	r24
     fe4:	8e 89       	ldd	r24, Y+22	; 0x16
     fe6:	8f 93       	push	r24
     fe8:	8d 89       	ldd	r24, Y+21	; 0x15
     fea:	8f 93       	push	r24
     fec:	88 e7       	ldi	r24, 0x78	; 120
     fee:	92 e0       	ldi	r25, 0x02	; 2
     ff0:	a0 e0       	ldi	r26, 0x00	; 0
     ff2:	af 93       	push	r26
     ff4:	9f 93       	push	r25
     ff6:	8f 93       	push	r24
     ff8:	0f 93       	push	r16
     ffa:	ff 92       	push	r15
     ffc:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <sprintf>
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	3e c0       	rjmp	.+124    	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
	}
	else if(strcmp(par, RW_VCC)==0)
    100c:	22 e8       	ldi	r18, 0x82	; 130
    100e:	32 e0       	ldi	r19, 0x02	; 2
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	8e 2d       	mov	r24, r14
    1014:	b6 01       	movw	r22, r12
    1016:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    101a:	89 2b       	or	r24, r25
    101c:	e1 f4       	brne	.+56     	; 0x1056 <__DATA_REGION_LENGTH__+0x56>
	{
		EM_get_Vcc(&val);
    101e:	ce 01       	movw	r24, r28
    1020:	45 96       	adiw	r24, 0x15	; 21
    1022:	0e 94 2a 19 	call	0x3254	; 0x3254 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1026:	88 8d       	ldd	r24, Y+24	; 0x18
    1028:	8f 93       	push	r24
    102a:	8f 89       	ldd	r24, Y+23	; 0x17
    102c:	8f 93       	push	r24
    102e:	8e 89       	ldd	r24, Y+22	; 0x16
    1030:	8f 93       	push	r24
    1032:	8d 89       	ldd	r24, Y+21	; 0x15
    1034:	8f 93       	push	r24
    1036:	88 e7       	ldi	r24, 0x78	; 120
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	a0 e0       	ldi	r26, 0x00	; 0
    103c:	af 93       	push	r26
    103e:	9f 93       	push	r25
    1040:	8f 93       	push	r24
    1042:	0f 93       	push	r16
    1044:	ff 92       	push	r15
    1046:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <sprintf>
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	19 c0       	rjmp	.+50     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
	}
	else if(strcmp(par, RW_COLS)==0)
    1056:	27 e8       	ldi	r18, 0x87	; 135
    1058:	32 e0       	ldi	r19, 0x02	; 2
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	8e 2d       	mov	r24, r14
    105e:	b6 01       	movw	r22, r12
    1060:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    1064:	89 2b       	or	r24, r25
    1066:	29 f4       	brne	.+10     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
	{
		read_cols(res);
    1068:	8f 2d       	mov	r24, r15
    106a:	90 2f       	mov	r25, r16
    106c:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <read_cols>
    1070:	0b c0       	rjmp	.+22     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1072:	26 e1       	ldi	r18, 0x16	; 22
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4c e8       	ldi	r20, 0x8C	; 140
    1078:	52 e0       	ldi	r21, 0x02	; 2
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	8f 2d       	mov	r24, r15
    107e:	90 2f       	mov	r25, r16
    1080:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <__DATA_REGION_LENGTH__+0x88>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1086:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1088:	81 2f       	mov	r24, r17
    108a:	68 96       	adiw	r28, 0x18	; 24
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	df 90       	pop	r13
    10a4:	cf 90       	pop	r12
    10a6:	08 95       	ret

Disassembly of section .text.handle_write:

00001258 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1258:	6f 92       	push	r6
    125a:	7f 92       	push	r7
    125c:	8f 92       	push	r8
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	64 97       	sbiw	r28, 0x14	; 20
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	3b 01       	movw	r6, r22
    1280:	88 2e       	mov	r8, r24
    1282:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1284:	21 e0       	ldi	r18, 0x01	; 1
    1286:	ae 01       	movw	r20, r28
    1288:	4f 5f       	subi	r20, 0xFF	; 255
    128a:	5f 4f       	sbci	r21, 0xFF	; 255
    128c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    1290:	18 2f       	mov	r17, r24
    1292:	88 23       	and	r24, r24
    1294:	09 f4       	brne	.+2      	; 0x1298 <handle_write+0x40>
    1296:	8d c0       	rjmp	.+282    	; 0x13b2 <handle_write+0x15a>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1298:	ce 01       	movw	r24, r28
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	6c 01       	movw	r12, r24
    129e:	20 e8       	ldi	r18, 0x80	; 128
    12a0:	e2 2e       	mov	r14, r18
    12a2:	2e e5       	ldi	r18, 0x5E	; 94
    12a4:	32 e0       	ldi	r19, 0x02	; 2
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	8e 2d       	mov	r24, r14
    12aa:	b6 01       	movw	r22, r12
    12ac:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    12b0:	89 2b       	or	r24, r25
    12b2:	39 f4       	brne	.+14     	; 0x12c2 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    12b4:	a5 01       	movw	r20, r10
    12b6:	88 2d       	mov	r24, r8
    12b8:	b3 01       	movw	r22, r6
    12ba:	0e 94 21 11 	call	0x2242	; 0x2242 <write_deveui>
    12be:	18 2f       	mov	r17, r24
    12c0:	78 c0       	rjmp	.+240    	; 0x13b2 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    12c2:	25 e6       	ldi	r18, 0x65	; 101
    12c4:	32 e0       	ldi	r19, 0x02	; 2
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	8e 2d       	mov	r24, r14
    12ca:	b6 01       	movw	r22, r12
    12cc:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    12d0:	89 2b       	or	r24, r25
    12d2:	39 f4       	brne	.+14     	; 0x12e2 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    12d4:	a5 01       	movw	r20, r10
    12d6:	88 2d       	mov	r24, r8
    12d8:	b3 01       	movw	r22, r6
    12da:	0e 94 5d 11 	call	0x22ba	; 0x22ba <write_appeui>
    12de:	18 2f       	mov	r17, r24
    12e0:	68 c0       	rjmp	.+208    	; 0x13b2 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    12e2:	2c e6       	ldi	r18, 0x6C	; 108
    12e4:	32 e0       	ldi	r19, 0x02	; 2
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	8e 2d       	mov	r24, r14
    12ea:	b6 01       	movw	r22, r12
    12ec:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    12f0:	89 2b       	or	r24, r25
    12f2:	39 f4       	brne	.+14     	; 0x1302 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    12f4:	a5 01       	movw	r20, r10
    12f6:	88 2d       	mov	r24, r8
    12f8:	b3 01       	movw	r22, r6
    12fa:	0e 94 99 11 	call	0x2332	; 0x2332 <write_appkey>
    12fe:	18 2f       	mov	r17, r24
    1300:	58 c0       	rjmp	.+176    	; 0x13b2 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1302:	23 e7       	ldi	r18, 0x73	; 115
    1304:	32 e0       	ldi	r19, 0x02	; 2
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	8e 2d       	mov	r24, r14
    130a:	b6 01       	movw	r22, r12
    130c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    1310:	89 2b       	or	r24, r25
    1312:	39 f4       	brne	.+14     	; 0x1322 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1314:	a5 01       	movw	r20, r10
    1316:	88 2d       	mov	r24, r8
    1318:	b3 01       	movw	r22, r6
    131a:	0e 94 92 14 	call	0x2924	; 0x2924 <write_PPM_factor>
    131e:	18 2f       	mov	r17, r24
    1320:	48 c0       	rjmp	.+144    	; 0x13b2 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_RRL)==0)
    1322:	2d e7       	ldi	r18, 0x7D	; 125
    1324:	32 e0       	ldi	r19, 0x02	; 2
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	8e 2d       	mov	r24, r14
    132a:	b6 01       	movw	r22, r12
    132c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    1330:	89 2b       	or	r24, r25
    1332:	39 f4       	brne	.+14     	; 0x1342 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1334:	a5 01       	movw	r20, r10
    1336:	88 2d       	mov	r24, r8
    1338:	b3 01       	movw	r22, r6
    133a:	0e 94 b8 14 	call	0x2970	; 0x2970 <write_RRL>
    133e:	18 2f       	mov	r17, r24
    1340:	38 c0       	rjmp	.+112    	; 0x13b2 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_VCC)==0)
    1342:	22 e8       	ldi	r18, 0x82	; 130
    1344:	32 e0       	ldi	r19, 0x02	; 2
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	8e 2d       	mov	r24, r14
    134a:	b6 01       	movw	r22, r12
    134c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    1350:	89 2b       	or	r24, r25
    1352:	39 f4       	brne	.+14     	; 0x1362 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1354:	a5 01       	movw	r20, r10
    1356:	88 2d       	mov	r24, r8
    1358:	b3 01       	movw	r22, r6
    135a:	0e 94 de 14 	call	0x29bc	; 0x29bc <write_VCC>
    135e:	18 2f       	mov	r17, r24
    1360:	28 c0       	rjmp	.+80     	; 0x13b2 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_COLS)==0)
    1362:	27 e8       	ldi	r18, 0x87	; 135
    1364:	32 e0       	ldi	r19, 0x02	; 2
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	8e 2d       	mov	r24, r14
    136a:	b6 01       	movw	r22, r12
    136c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    1370:	89 2b       	or	r24, r25
    1372:	39 f4       	brne	.+14     	; 0x1382 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1374:	a5 01       	movw	r20, r10
    1376:	88 2d       	mov	r24, r8
    1378:	b3 01       	movw	r22, r6
    137a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <write_cols>
    137e:	18 2f       	mov	r17, r24
    1380:	18 c0       	rjmp	.+48     	; 0x13b2 <handle_write+0x15a>
	}
	else if(strcmp(par, RW_RESET)==0)
    1382:	22 ea       	ldi	r18, 0xA2	; 162
    1384:	32 e0       	ldi	r19, 0x02	; 2
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	8e 2d       	mov	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    1390:	89 2b       	or	r24, r25
    1392:	39 f4       	brne	.+14     	; 0x13a2 <handle_write+0x14a>
	{
		return write_reset(cmd, res);
    1394:	a5 01       	movw	r20, r10
    1396:	88 2d       	mov	r24, r8
    1398:	b3 01       	movw	r22, r6
    139a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <write_reset>
    139e:	18 2f       	mov	r17, r24
    13a0:	08 c0       	rjmp	.+16     	; 0x13b2 <handle_write+0x15a>
	}else{
		strcpy(res, RW_S_NOT_EXIST);
    13a2:	26 e1       	ldi	r18, 0x16	; 22
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	4c e8       	ldi	r20, 0x8C	; 140
    13a8:	52 e0       	ldi	r21, 0x02	; 2
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	c5 01       	movw	r24, r10
    13ae:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return true;
	}
	
}
    13b2:	81 2f       	mov	r24, r17
    13b4:	64 96       	adiw	r28, 0x14	; 20
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	af 90       	pop	r10
    13d0:	8f 90       	pop	r8
    13d2:	7f 90       	pop	r7
    13d4:	6f 90       	pop	r6
    13d6:	08 95       	ret

Disassembly of section .text.handle_methane:

00001628 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    1628:	cf 92       	push	r12
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	00 d0       	rcall	.+0      	; 0x163a <handle_methane+0x12>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	f4 2e       	mov	r15, r20
    1640:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    1642:	22 e0       	ldi	r18, 0x02	; 2
    1644:	4c ef       	ldi	r20, 0xFC	; 252
    1646:	56 e0       	ldi	r21, 0x06	; 6
    1648:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    164c:	18 2f       	mov	r17, r24
    164e:	88 23       	and	r24, r24
    1650:	09 f4       	brne	.+2      	; 0x1654 <handle_methane+0x2c>
    1652:	6b c0       	rjmp	.+214    	; 0x172a <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    1654:	8c ef       	ldi	r24, 0xFC	; 252
    1656:	96 e0       	ldi	r25, 0x06	; 6
    1658:	6c 01       	movw	r12, r24
    165a:	20 e8       	ldi	r18, 0x80	; 128
    165c:	e2 2e       	mov	r14, r18
    165e:	2c e4       	ldi	r18, 0x4C	; 76
    1660:	33 e0       	ldi	r19, 0x03	; 3
    1662:	40 e0       	ldi	r20, 0x00	; 0
    1664:	8e 2d       	mov	r24, r14
    1666:	b6 01       	movw	r22, r12
    1668:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    166c:	89 2b       	or	r24, r25
    166e:	79 f4       	brne	.+30     	; 0x168e <handle_methane+0x66>
		PM_HAL_meth_power_init();
    1670:	0e 94 56 1a 	call	0x34ac	; 0x34ac <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    167a:	28 e1       	ldi	r18, 0x18	; 24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4f e4       	ldi	r20, 0x4F	; 79
    1680:	53 e0       	ldi	r21, 0x03	; 3
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	8f 2d       	mov	r24, r15
    1686:	90 2f       	mov	r25, r16
    1688:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return true;
    168c:	4e c0       	rjmp	.+156    	; 0x172a <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    168e:	27 e6       	ldi	r18, 0x67	; 103
    1690:	33 e0       	ldi	r19, 0x03	; 3
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	8e 2d       	mov	r24, r14
    1696:	b6 01       	movw	r22, r12
    1698:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    169c:	89 2b       	or	r24, r25
    169e:	79 f4       	brne	.+30     	; 0x16be <handle_methane+0x96>
		PM_HAL_meth_power_init();
    16a0:	0e 94 56 1a 	call	0x34ac	; 0x34ac <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    16aa:	29 e1       	ldi	r18, 0x19	; 25
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4b e6       	ldi	r20, 0x6B	; 107
    16b0:	53 e0       	ldi	r21, 0x03	; 3
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	8f 2d       	mov	r24, r15
    16b6:	90 2f       	mov	r25, r16
    16b8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return true;
    16bc:	36 c0       	rjmp	.+108    	; 0x172a <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    16be:	24 e8       	ldi	r18, 0x84	; 132
    16c0:	33 e0       	ldi	r19, 0x03	; 3
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	8e 2d       	mov	r24, r14
    16c6:	b6 01       	movw	r22, r12
    16c8:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    16cc:	89 2b       	or	r24, r25
    16ce:	21 f5       	brne	.+72     	; 0x1718 <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    16d0:	ce 01       	movw	r24, r28
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <ADC_get_value>
    16d8:	88 23       	and	r24, r24
    16da:	51 f0       	breq	.+20     	; 0x16f0 <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    16dc:	28 e1       	ldi	r18, 0x18	; 24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	49 e8       	ldi	r20, 0x89	; 137
    16e2:	53 e0       	ldi	r21, 0x03	; 3
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	8f 2d       	mov	r24, r15
    16e8:	90 2f       	mov	r25, r16
    16ea:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
    16ee:	1d c0       	rjmp	.+58     	; 0x172a <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	8f 93       	push	r24
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	8f 93       	push	r24
    16f8:	81 ea       	ldi	r24, 0xA1	; 161
    16fa:	93 e0       	ldi	r25, 0x03	; 3
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	af 93       	push	r26
    1700:	9f 93       	push	r25
    1702:	8f 93       	push	r24
    1704:	0f 93       	push	r16
    1706:	ff 92       	push	r15
    1708:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <sprintf>
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	09 c0       	rjmp	.+18     	; 0x172a <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1718:	26 e1       	ldi	r18, 0x16	; 22
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	48 ea       	ldi	r20, 0xA8	; 168
    171e:	53 e0       	ldi	r21, 0x03	; 3
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	8f 2d       	mov	r24, r15
    1724:	90 2f       	mov	r25, r16
    1726:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return true;
	}
	return false;
}
    172a:	81 2f       	mov	r24, r17
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	08 95       	ret

Disassembly of section .text.handle_co2:

00001d9c <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    1d9c:	ff 92       	push	r15
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <handle_co2+0xc>
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	f4 2e       	mov	r15, r20
    1dae:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    1db0:	22 e0       	ldi	r18, 0x02	; 2
    1db2:	4c ef       	ldi	r20, 0xFC	; 252
    1db4:	56 e0       	ldi	r21, 0x06	; 6
    1db6:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    1dba:	18 2f       	mov	r17, r24
    1dbc:	88 23       	and	r24, r24
    1dbe:	b9 f1       	breq	.+110    	; 0x1e2e <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    1dc0:	6c ef       	ldi	r22, 0xFC	; 252
    1dc2:	76 e0       	ldi	r23, 0x06	; 6
    1dc4:	80 e8       	ldi	r24, 0x80	; 128
    1dc6:	24 e8       	ldi	r18, 0x84	; 132
    1dc8:	33 e0       	ldi	r19, 0x03	; 3
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    1dd0:	89 2b       	or	r24, r25
    1dd2:	21 f5       	brne	.+72     	; 0x1e1c <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	0e 94 8f 19 	call	0x331e	; 0x331e <SCD30_get_reading>
    1ddc:	88 23       	and	r24, r24
    1dde:	51 f0       	breq	.+20     	; 0x1df4 <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    1de0:	28 e1       	ldi	r18, 0x18	; 24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	49 e8       	ldi	r20, 0x89	; 137
    1de6:	53 e0       	ldi	r21, 0x03	; 3
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	8f 2d       	mov	r24, r15
    1dec:	90 2f       	mov	r25, r16
    1dee:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
    1df2:	1d c0       	rjmp	.+58     	; 0x1e2e <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	8f 93       	push	r24
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	8f 93       	push	r24
    1dfc:	81 ea       	ldi	r24, 0xA1	; 161
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    1e00:	a0 e0       	ldi	r26, 0x00	; 0
    1e02:	af 93       	push	r26
    1e04:	9f 93       	push	r25
    1e06:	8f 93       	push	r24
    1e08:	0f 93       	push	r16
    1e0a:	ff 92       	push	r15
    1e0c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <sprintf>
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	09 c0       	rjmp	.+18     	; 0x1e2e <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1e1c:	26 e1       	ldi	r18, 0x16	; 22
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	48 ea       	ldi	r20, 0xA8	; 168
    1e22:	53 e0       	ldi	r21, 0x03	; 3
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	8f 2d       	mov	r24, r15
    1e28:	90 2f       	mov	r25, r16
    1e2a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return true;
	}
}
    1e2e:	81 2f       	mov	r24, r17
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	ff 90       	pop	r15
    1e3e:	08 95       	ret

Disassembly of section .text.handle_sample:

00001f7a <handle_sample>:


static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    1f7a:	6f 92       	push	r6
    1f7c:	7f 92       	push	r7
    1f7e:	8f 92       	push	r8
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	3b 01       	movw	r6, r22
    1f8e:	88 2e       	mov	r8, r24
    1f90:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    1f92:	21 e0       	ldi	r18, 0x01	; 1
    1f94:	4c ef       	ldi	r20, 0xFC	; 252
    1f96:	56 e0       	ldi	r21, 0x06	; 6
    1f98:	0e 94 54 10 	call	0x20a8	; 0x20a8 <get_parameter>
    1f9c:	c8 2f       	mov	r28, r24
    1f9e:	88 23       	and	r24, r24
    1fa0:	69 f1       	breq	.+90     	; 0x1ffc <handle_sample+0x82>
	
	if(strcmp(par, S_METH)==0){
    1fa2:	8c ef       	ldi	r24, 0xFC	; 252
    1fa4:	96 e0       	ldi	r25, 0x06	; 6
    1fa6:	6c 01       	movw	r12, r24
    1fa8:	20 e8       	ldi	r18, 0x80	; 128
    1faa:	e2 2e       	mov	r14, r18
    1fac:	2e eb       	ldi	r18, 0xBE	; 190
    1fae:	33 e0       	ldi	r19, 0x03	; 3
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	8e 2d       	mov	r24, r14
    1fb4:	b6 01       	movw	r22, r12
    1fb6:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    1fba:	89 2b       	or	r24, r25
    1fbc:	39 f4       	brne	.+14     	; 0x1fcc <handle_sample+0x52>
		return handle_methane(cmd, res);
    1fbe:	a8 01       	movw	r20, r16
    1fc0:	88 2d       	mov	r24, r8
    1fc2:	b3 01       	movw	r22, r6
    1fc4:	0e 94 14 0b 	call	0x1628	; 0x1628 <handle_methane>
    1fc8:	c8 2f       	mov	r28, r24
    1fca:	18 c0       	rjmp	.+48     	; 0x1ffc <handle_sample+0x82>
	}else if(strcmp(par, S_CO2)==0){
    1fcc:	23 ec       	ldi	r18, 0xC3	; 195
    1fce:	33 e0       	ldi	r19, 0x03	; 3
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	8e 2d       	mov	r24, r14
    1fd4:	b6 01       	movw	r22, r12
    1fd6:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strcmp>
    1fda:	89 2b       	or	r24, r25
    1fdc:	39 f4       	brne	.+14     	; 0x1fec <handle_sample+0x72>
		return handle_co2(cmd, res);
    1fde:	a8 01       	movw	r20, r16
    1fe0:	88 2d       	mov	r24, r8
    1fe2:	b3 01       	movw	r22, r6
    1fe4:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <handle_co2>
    1fe8:	c8 2f       	mov	r28, r24
    1fea:	08 c0       	rjmp	.+16     	; 0x1ffc <handle_sample+0x82>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1fec:	26 e1       	ldi	r18, 0x16	; 22
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	48 ea       	ldi	r20, 0xA8	; 168
    1ff2:	53 e0       	ldi	r21, 0x03	; 3
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	c8 01       	movw	r24, r16
    1ff8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <memcpy>
		return true;
	}
}
    1ffc:	8c 2f       	mov	r24, r28
    1ffe:	cf 91       	pop	r28
    2000:	1f 91       	pop	r17
    2002:	0f 91       	pop	r16
    2004:	ef 90       	pop	r14
    2006:	df 90       	pop	r13
    2008:	cf 90       	pop	r12
    200a:	8f 90       	pop	r8
    200c:	7f 90       	pop	r7
    200e:	6f 90       	pop	r6
    2010:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

000030fc <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    30fc:	0e 94 1c 1a 	call	0x3438	; 0x3438 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    3100:	0e 94 4f 1a 	call	0x349e	; 0x349e <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    310a:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_init_get_reading();
    3114:	0e 94 39 19 	call	0x3272	; 0x3272 <SCD30_init_get_reading>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    3118:	88 23       	and	r24, r24
    311a:	11 f0       	breq	.+4      	; 0x3120 <init_methane_SCD30+0x24>
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	08 95       	ret
	return true;
    3120:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    3122:	08 95       	ret

Disassembly of section .text.count_parameters:

0000279c <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    279c:	6f 92       	push	r6
    279e:	7f 92       	push	r7
    27a0:	8f 92       	push	r8
    27a2:	cf 92       	push	r12
    27a4:	df 92       	push	r13
    27a6:	ef 92       	push	r14
    27a8:	3b 01       	movw	r6, r22
    27aa:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    27ac:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    27b0:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    27b6:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    27b8:	10 c0       	rjmp	.+32     	; 0x27da <count_parameters+0x3e>
	{
		if(src[i]==' '){
    27ba:	e8 2c       	mov	r14, r8
    27bc:	63 01       	movw	r12, r6
    27be:	c2 0e       	add	r12, r18
    27c0:	d3 1e       	adc	r13, r19
    27c2:	e1 1c       	adc	r14, r1
    27c4:	37 fd       	sbrc	r19, 7
    27c6:	ea 94       	dec	r14
    27c8:	f6 01       	movw	r30, r12
    27ca:	94 91       	lpm	r25, Z
    27cc:	e7 fc       	sbrc	r14, 7
    27ce:	90 81       	ld	r25, Z
    27d0:	90 32       	cpi	r25, 0x20	; 32
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <count_parameters+0x3a>
			cnt++;
    27d4:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    27d6:	2f 5f       	subi	r18, 0xFF	; 255
    27d8:	3f 4f       	sbci	r19, 0xFF	; 255
    27da:	26 17       	cp	r18, r22
    27dc:	37 07       	cpc	r19, r23
    27de:	68 f3       	brcs	.-38     	; 0x27ba <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    27e0:	ef 90       	pop	r14
    27e2:	df 90       	pop	r13
    27e4:	cf 90       	pop	r12
    27e6:	8f 90       	pop	r8
    27e8:	7f 90       	pop	r7
    27ea:	6f 90       	pop	r6
    27ec:	08 95       	ret

Disassembly of section .text.par_index:

00002506 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    2506:	cf 92       	push	r12
    2508:	df 92       	push	r13
    250a:	ef 92       	push	r14
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2514:	44 23       	and	r20, r20
    2516:	29 f1       	breq	.+74     	; 0x2562 <par_index+0x5c>
    2518:	04 2f       	mov	r16, r20
    251a:	6b 01       	movw	r12, r22
    251c:	e8 2e       	mov	r14, r24
    251e:	c0 e0       	ldi	r28, 0x00	; 0
    2520:	d0 e0       	ldi	r29, 0x00	; 0
    2522:	10 e0       	ldi	r17, 0x00	; 0
    2524:	14 c0       	rjmp	.+40     	; 0x254e <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    2526:	ae 2d       	mov	r26, r14
    2528:	c6 01       	movw	r24, r12
    252a:	8c 0f       	add	r24, r28
    252c:	9d 1f       	adc	r25, r29
    252e:	a1 1d       	adc	r26, r1
    2530:	d7 fd       	sbrc	r29, 7
    2532:	aa 95       	dec	r26
    2534:	fc 01       	movw	r30, r24
    2536:	84 91       	lpm	r24, Z
    2538:	a7 fd       	sbrc	r26, 7
    253a:	80 81       	ld	r24, Z
    253c:	80 32       	cpi	r24, 0x20	; 32
    253e:	31 f4       	brne	.+12     	; 0x254c <par_index+0x46>
			cnt++;
    2540:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    2542:	01 13       	cpse	r16, r17
    2544:	03 c0       	rjmp	.+6      	; 0x254c <par_index+0x46>
				return i+1;
    2546:	ce 01       	movw	r24, r28
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	0d c0       	rjmp	.+26     	; 0x2566 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    254c:	21 96       	adiw	r28, 0x01	; 1
    254e:	8e 2d       	mov	r24, r14
    2550:	b6 01       	movw	r22, r12
    2552:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    2556:	c8 17       	cp	r28, r24
    2558:	d9 07       	cpc	r29, r25
    255a:	28 f3       	brcs	.-54     	; 0x2526 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	1f 91       	pop	r17
    256c:	0f 91       	pop	r16
    256e:	ef 90       	pop	r14
    2570:	df 90       	pop	r13
    2572:	cf 90       	pop	r12
    2574:	08 95       	ret

Disassembly of section .text.get_parameter:

000020a8 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    20a8:	8f 92       	push	r8
    20aa:	9f 92       	push	r9
    20ac:	af 92       	push	r10
    20ae:	cf 92       	push	r12
    20b0:	df 92       	push	r13
    20b2:	ef 92       	push	r14
    20b4:	ff 92       	push	r15
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	6b 01       	movw	r12, r22
    20c0:	e8 2e       	mov	r14, r24
    20c2:	ea 01       	movw	r28, r20
    20c4:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    20c6:	0e 94 ce 13 	call	0x279c	; 0x279c <count_parameters>
	if(pars<parNo) return false;
    20ca:	8f 15       	cp	r24, r15
    20cc:	58 f1       	brcs	.+86     	; 0x2124 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    20ce:	8e 2d       	mov	r24, r14
    20d0:	b6 01       	movw	r22, r12
    20d2:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    20d6:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    20d8:	4f 2d       	mov	r20, r15
    20da:	8e 2d       	mov	r24, r14
    20dc:	b6 01       	movw	r22, r12
    20de:	0e 94 83 12 	call	0x2506	; 0x2506 <par_index>
	uint8_t parLen=0;
    20e2:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    20e4:	15 c0       	rjmp	.+42     	; 0x2110 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    20e6:	46 01       	movw	r8, r12
    20e8:	ae 2c       	mov	r10, r14
    20ea:	82 0e       	add	r8, r18
    20ec:	93 1e       	adc	r9, r19
    20ee:	a1 1c       	adc	r10, r1
    20f0:	37 fd       	sbrc	r19, 7
    20f2:	aa 94       	dec	r10
    20f4:	4a 2d       	mov	r20, r10
    20f6:	94 01       	movw	r18, r8
    20f8:	f4 01       	movw	r30, r8
    20fa:	24 91       	lpm	r18, Z
    20fc:	47 fd       	sbrc	r20, 7
    20fe:	20 81       	ld	r18, Z
    2100:	20 32       	cpi	r18, 0x20	; 32
    2102:	59 f0       	breq	.+22     	; 0x211a <get_parameter+0x72>
		par[parLen++]=src[i];
    2104:	fe 01       	movw	r30, r28
    2106:	e9 0f       	add	r30, r25
    2108:	f1 1d       	adc	r31, r1
    210a:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    210c:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    210e:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	20 17       	cp	r18, r16
    2116:	31 07       	cpc	r19, r17
    2118:	30 f3       	brcs	.-52     	; 0x20e6 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    211a:	c9 0f       	add	r28, r25
    211c:	d1 1d       	adc	r29, r1
    211e:	18 82       	st	Y, r1
	
	return true;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	01 c0       	rjmp	.+2      	; 0x2126 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    2124:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	1f 91       	pop	r17
    212c:	0f 91       	pop	r16
    212e:	ff 90       	pop	r15
    2130:	ef 90       	pop	r14
    2132:	df 90       	pop	r13
    2134:	cf 90       	pop	r12
    2136:	af 90       	pop	r10
    2138:	9f 90       	pop	r9
    213a:	8f 90       	pop	r8
    213c:	08 95       	ret

Disassembly of section .text.calc_crc8:

00002e04 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    2e04:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    2e06:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    2e08:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    2e0a:	14 c0       	rjmp	.+40     	; 0x2e34 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    2e0c:	fa 01       	movw	r30, r20
    2e0e:	e3 0f       	add	r30, r19
    2e10:	f1 1d       	adc	r31, r1
    2e12:	90 81       	ld	r25, Z
    2e14:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    2e16:	28 e0       	ldi	r18, 0x08	; 8
    2e18:	0a c0       	rjmp	.+20     	; 0x2e2e <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    2e1a:	88 23       	and	r24, r24
    2e1c:	34 f4       	brge	.+12     	; 0x2e2a <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	91 e3       	ldi	r25, 0x31	; 49
    2e26:	89 27       	eor	r24, r25
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    2e2a:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    2e2c:	21 50       	subi	r18, 0x01	; 1
    2e2e:	21 11       	cpse	r18, r1
    2e30:	f4 cf       	rjmp	.-24     	; 0x2e1a <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    2e32:	3f 5f       	subi	r19, 0xFF	; 255
    2e34:	36 17       	cp	r19, r22
    2e36:	50 f3       	brcs	.-44     	; 0x2e0c <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    2e38:	08 95       	ret

Disassembly of section .text.get_decimal:

00001ce8 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    1cfa:	10 e0       	ldi	r17, 0x00	; 0
    1cfc:	08 c0       	rjmp	.+16     	; 0x1d0e <get_decimal+0x26>
	{
		if(str[i]=='.'){
    1cfe:	cc 0d       	add	r28, r12
    1d00:	dd 1d       	adc	r29, r13
    1d02:	88 81       	ld	r24, Y
    1d04:	8e 32       	cpi	r24, 0x2E	; 46
    1d06:	11 f4       	brne	.+4      	; 0x1d0c <get_decimal+0x24>
			index=i+1;
    1d08:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    1d0a:	0c c0       	rjmp	.+24     	; 0x1d24 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    1d0c:	1f 5f       	subi	r17, 0xFF	; 255
    1d0e:	c1 2f       	mov	r28, r17
    1d10:	d0 e0       	ldi	r29, 0x00	; 0
    1d12:	b6 01       	movw	r22, r12
    1d14:	80 e8       	ldi	r24, 0x80	; 128
    1d16:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	c8 17       	cp	r28, r24
    1d1e:	d9 07       	cpc	r29, r25
    1d20:	70 f3       	brcs	.-36     	; 0x1cfe <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    1d22:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    1d24:	11 23       	and	r17, r17
    1d26:	71 f1       	breq	.+92     	; 0x1d84 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    1d28:	c1 0e       	add	r12, r17
    1d2a:	d1 1c       	adc	r13, r1
    1d2c:	80 e8       	ldi	r24, 0x80	; 128
    1d2e:	e8 2e       	mov	r14, r24
    1d30:	8e 2d       	mov	r24, r14
    1d32:	b6 01       	movw	r22, r12
    1d34:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    1d38:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    1d3a:	8e 2d       	mov	r24, r14
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <atoi>
    1d42:	8c 01       	movw	r16, r24
	float divisor=1;
    1d44:	0f 2e       	mov	r0, r31
    1d46:	c1 2c       	mov	r12, r1
    1d48:	d1 2c       	mov	r13, r1
    1d4a:	f0 e8       	ldi	r31, 0x80	; 128
    1d4c:	ef 2e       	mov	r14, r31
    1d4e:	ff e3       	ldi	r31, 0x3F	; 63
    1d50:	ff 2e       	mov	r15, r31
    1d52:	f0 2d       	mov	r31, r0
	
	while(len>0){
    1d54:	0b c0       	rjmp	.+22     	; 0x1d6c <get_decimal+0x84>
		divisor*=10;
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	c7 01       	movw	r24, r14
    1d60:	b6 01       	movw	r22, r12
    1d62:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__mulsf3>
    1d66:	6b 01       	movw	r12, r22
    1d68:	7c 01       	movw	r14, r24
		len--;
    1d6a:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    1d6c:	c1 11       	cpse	r28, r1
    1d6e:	f3 cf       	rjmp	.-26     	; 0x1d56 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    1d70:	b8 01       	movw	r22, r16
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatunsisf>
    1d7a:	a7 01       	movw	r20, r14
    1d7c:	96 01       	movw	r18, r12
    1d7e:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__divsf3>
    1d82:	03 c0       	rjmp	.+6      	; 0x1d8a <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	08 95       	ret

Disassembly of section .text.str2flaot:

0000288a <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    288a:	cf 92       	push	r12
    288c:	df 92       	push	r13
    288e:	ef 92       	push	r14
    2890:	ff 92       	push	r15
    2892:	0f 93       	push	r16
    2894:	1f 93       	push	r17
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    289c:	bc 01       	movw	r22, r24
    289e:	80 e8       	ldi	r24, 0x80	; 128
    28a0:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <atoi>
    28a4:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    28a6:	c8 01       	movw	r24, r16
    28a8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <get_decimal>
    28ac:	6b 01       	movw	r12, r22
    28ae:	7c 01       	movw	r14, r24
	return intVal+deci;
    28b0:	be 01       	movw	r22, r28
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__floatunsisf>
    28ba:	9b 01       	movw	r18, r22
    28bc:	ac 01       	movw	r20, r24
    28be:	c7 01       	movw	r24, r14
    28c0:	b6 01       	movw	r22, r12
    28c2:	0e 94 96 1a 	call	0x352c	; 0x352c <__addsf3>
	
	
}
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	1f 91       	pop	r17
    28cc:	0f 91       	pop	r16
    28ce:	ff 90       	pop	r15
    28d0:	ef 90       	pop	r14
    28d2:	df 90       	pop	r13
    28d4:	cf 90       	pop	r12
    28d6:	08 95       	ret

Disassembly of section .text.is_float:

00002698 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    2698:	ef 92       	push	r14
    269a:	ff 92       	push	r15
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    26a6:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    26a8:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    26aa:	0d c0       	rjmp	.+26     	; 0x26c6 <is_float+0x2e>
	{
		if(str[i]=='.'){
    26ac:	ce 0d       	add	r28, r14
    26ae:	df 1d       	adc	r29, r15
    26b0:	88 81       	ld	r24, Y
    26b2:	8e 32       	cpi	r24, 0x2E	; 46
    26b4:	21 f4       	brne	.+8      	; 0x26be <is_float+0x26>
			if (got_dot)
    26b6:	01 11       	cpse	r16, r1
    26b8:	11 c0       	rjmp	.+34     	; 0x26dc <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    26ba:	01 e0       	ldi	r16, 0x01	; 1
    26bc:	03 c0       	rjmp	.+6      	; 0x26c4 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    26be:	80 53       	subi	r24, 0x30	; 48
    26c0:	8a 30       	cpi	r24, 0x0A	; 10
    26c2:	70 f4       	brcc	.+28     	; 0x26e0 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    26c4:	1f 5f       	subi	r17, 0xFF	; 255
    26c6:	c1 2f       	mov	r28, r17
    26c8:	d0 e0       	ldi	r29, 0x00	; 0
    26ca:	b7 01       	movw	r22, r14
    26cc:	80 e8       	ldi	r24, 0x80	; 128
    26ce:	0e 94 2c 18 	call	0x3058	; 0x3058 <strlen>
    26d2:	c8 17       	cp	r28, r24
    26d4:	d9 07       	cpc	r29, r25
    26d6:	50 f3       	brcs	.-44     	; 0x26ac <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	03 c0       	rjmp	.+6      	; 0x26e2 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	01 c0       	rjmp	.+2      	; 0x26e2 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    26e0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	ff 90       	pop	r15
    26ec:	ef 90       	pop	r14
    26ee:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000352a <__subsf3>:
    352a:	50 58       	subi	r21, 0x80	; 128

0000352c <__addsf3>:
    352c:	bb 27       	eor	r27, r27
    352e:	aa 27       	eor	r26, r26
    3530:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <__addsf3x>
    3534:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001aa2 <__addsf3x>:
    1aa2:	11 c0       	rjmp	.+34     	; 0x1ac6 <__addsf3x+0x24>
    1aa4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__fp_pscA>
    1aa8:	38 f0       	brcs	.+14     	; 0x1ab8 <__addsf3x+0x16>
    1aaa:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__fp_pscB>
    1aae:	20 f0       	brcs	.+8      	; 0x1ab8 <__addsf3x+0x16>
    1ab0:	39 f4       	brne	.+14     	; 0x1ac0 <__addsf3x+0x1e>
    1ab2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab4:	19 f4       	brne	.+6      	; 0x1abc <__addsf3x+0x1a>
    1ab6:	26 f4       	brtc	.+8      	; 0x1ac0 <__addsf3x+0x1e>
    1ab8:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__fp_nan>
    1abc:	0e f4       	brtc	.+2      	; 0x1ac0 <__addsf3x+0x1e>
    1abe:	e0 95       	com	r30
    1ac0:	e7 fb       	bst	r30, 7
    1ac2:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    1ac6:	e9 2f       	mov	r30, r25
    1ac8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__fp_split3>
    1acc:	58 f3       	brcs	.-42     	; 0x1aa4 <__addsf3x+0x2>
    1ace:	ba 17       	cp	r27, r26
    1ad0:	62 07       	cpc	r22, r18
    1ad2:	73 07       	cpc	r23, r19
    1ad4:	84 07       	cpc	r24, r20
    1ad6:	95 07       	cpc	r25, r21
    1ad8:	20 f0       	brcs	.+8      	; 0x1ae2 <__addsf3x+0x40>
    1ada:	79 f4       	brne	.+30     	; 0x1afa <__addsf3x+0x58>
    1adc:	a6 f5       	brtc	.+104    	; 0x1b46 <__addsf3x+0xa4>
    1ade:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__fp_zero>
    1ae2:	0e f4       	brtc	.+2      	; 0x1ae6 <__addsf3x+0x44>
    1ae4:	e0 95       	com	r30
    1ae6:	0b 2e       	mov	r0, r27
    1ae8:	ba 2f       	mov	r27, r26
    1aea:	a0 2d       	mov	r26, r0
    1aec:	0b 01       	movw	r0, r22
    1aee:	b9 01       	movw	r22, r18
    1af0:	90 01       	movw	r18, r0
    1af2:	0c 01       	movw	r0, r24
    1af4:	ca 01       	movw	r24, r20
    1af6:	a0 01       	movw	r20, r0
    1af8:	11 24       	eor	r1, r1
    1afa:	ff 27       	eor	r31, r31
    1afc:	59 1b       	sub	r21, r25
    1afe:	99 f0       	breq	.+38     	; 0x1b26 <__addsf3x+0x84>
    1b00:	59 3f       	cpi	r21, 0xF9	; 249
    1b02:	50 f4       	brcc	.+20     	; 0x1b18 <__addsf3x+0x76>
    1b04:	50 3e       	cpi	r21, 0xE0	; 224
    1b06:	68 f1       	brcs	.+90     	; 0x1b62 <__addsf3x+0xc0>
    1b08:	1a 16       	cp	r1, r26
    1b0a:	f0 40       	sbci	r31, 0x00	; 0
    1b0c:	a2 2f       	mov	r26, r18
    1b0e:	23 2f       	mov	r18, r19
    1b10:	34 2f       	mov	r19, r20
    1b12:	44 27       	eor	r20, r20
    1b14:	58 5f       	subi	r21, 0xF8	; 248
    1b16:	f3 cf       	rjmp	.-26     	; 0x1afe <__addsf3x+0x5c>
    1b18:	46 95       	lsr	r20
    1b1a:	37 95       	ror	r19
    1b1c:	27 95       	ror	r18
    1b1e:	a7 95       	ror	r26
    1b20:	f0 40       	sbci	r31, 0x00	; 0
    1b22:	53 95       	inc	r21
    1b24:	c9 f7       	brne	.-14     	; 0x1b18 <__addsf3x+0x76>
    1b26:	7e f4       	brtc	.+30     	; 0x1b46 <__addsf3x+0xa4>
    1b28:	1f 16       	cp	r1, r31
    1b2a:	ba 0b       	sbc	r27, r26
    1b2c:	62 0b       	sbc	r22, r18
    1b2e:	73 0b       	sbc	r23, r19
    1b30:	84 0b       	sbc	r24, r20
    1b32:	ba f0       	brmi	.+46     	; 0x1b62 <__addsf3x+0xc0>
    1b34:	91 50       	subi	r25, 0x01	; 1
    1b36:	a1 f0       	breq	.+40     	; 0x1b60 <__addsf3x+0xbe>
    1b38:	ff 0f       	add	r31, r31
    1b3a:	bb 1f       	adc	r27, r27
    1b3c:	66 1f       	adc	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	88 1f       	adc	r24, r24
    1b42:	c2 f7       	brpl	.-16     	; 0x1b34 <__addsf3x+0x92>
    1b44:	0e c0       	rjmp	.+28     	; 0x1b62 <__addsf3x+0xc0>
    1b46:	ba 0f       	add	r27, r26
    1b48:	62 1f       	adc	r22, r18
    1b4a:	73 1f       	adc	r23, r19
    1b4c:	84 1f       	adc	r24, r20
    1b4e:	48 f4       	brcc	.+18     	; 0x1b62 <__addsf3x+0xc0>
    1b50:	87 95       	ror	r24
    1b52:	77 95       	ror	r23
    1b54:	67 95       	ror	r22
    1b56:	b7 95       	ror	r27
    1b58:	f7 95       	ror	r31
    1b5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b5c:	08 f0       	brcs	.+2      	; 0x1b60 <__addsf3x+0xbe>
    1b5e:	b0 cf       	rjmp	.-160    	; 0x1ac0 <__addsf3x+0x1e>
    1b60:	93 95       	inc	r25
    1b62:	88 0f       	add	r24, r24
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <__addsf3x+0xc6>
    1b66:	99 27       	eor	r25, r25
    1b68:	ee 0f       	add	r30, r30
    1b6a:	97 95       	ror	r25
    1b6c:	87 95       	ror	r24
    1b6e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000035c6 <__divsf3>:
    35c6:	0e 94 11 0c 	call	0x1822	; 0x1822 <__divsf3x>
    35ca:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001822 <__divsf3x>:
    1822:	10 c0       	rjmp	.+32     	; 0x1844 <__divsf3x+0x22>
    1824:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__fp_pscB>
    1828:	58 f0       	brcs	.+22     	; 0x1840 <__divsf3x+0x1e>
    182a:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__fp_pscA>
    182e:	40 f0       	brcs	.+16     	; 0x1840 <__divsf3x+0x1e>
    1830:	29 f4       	brne	.+10     	; 0x183c <__divsf3x+0x1a>
    1832:	5f 3f       	cpi	r21, 0xFF	; 255
    1834:	29 f0       	breq	.+10     	; 0x1840 <__divsf3x+0x1e>
    1836:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    183a:	51 11       	cpse	r21, r1
    183c:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__fp_szero>
    1840:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__fp_nan>
    1844:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__fp_split3>
    1848:	68 f3       	brcs	.-38     	; 0x1824 <__divsf3x+0x2>

0000184a <__divsf3_pse>:
    184a:	99 23       	and	r25, r25
    184c:	b1 f3       	breq	.-20     	; 0x183a <__divsf3x+0x18>
    184e:	55 23       	and	r21, r21
    1850:	91 f3       	breq	.-28     	; 0x1836 <__divsf3x+0x14>
    1852:	95 1b       	sub	r25, r21
    1854:	55 0b       	sbc	r21, r21
    1856:	bb 27       	eor	r27, r27
    1858:	aa 27       	eor	r26, r26
    185a:	62 17       	cp	r22, r18
    185c:	73 07       	cpc	r23, r19
    185e:	84 07       	cpc	r24, r20
    1860:	38 f0       	brcs	.+14     	; 0x1870 <__divsf3_pse+0x26>
    1862:	9f 5f       	subi	r25, 0xFF	; 255
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	44 1f       	adc	r20, r20
    186c:	aa 1f       	adc	r26, r26
    186e:	a9 f3       	breq	.-22     	; 0x185a <__divsf3_pse+0x10>
    1870:	35 d0       	rcall	.+106    	; 0x18dc <__divsf3_pse+0x92>
    1872:	0e 2e       	mov	r0, r30
    1874:	3a f0       	brmi	.+14     	; 0x1884 <__divsf3_pse+0x3a>
    1876:	e0 e8       	ldi	r30, 0x80	; 128
    1878:	32 d0       	rcall	.+100    	; 0x18de <__divsf3_pse+0x94>
    187a:	91 50       	subi	r25, 0x01	; 1
    187c:	50 40       	sbci	r21, 0x00	; 0
    187e:	e6 95       	lsr	r30
    1880:	00 1c       	adc	r0, r0
    1882:	ca f7       	brpl	.-14     	; 0x1876 <__divsf3_pse+0x2c>
    1884:	2b d0       	rcall	.+86     	; 0x18dc <__divsf3_pse+0x92>
    1886:	fe 2f       	mov	r31, r30
    1888:	29 d0       	rcall	.+82     	; 0x18dc <__divsf3_pse+0x92>
    188a:	66 0f       	add	r22, r22
    188c:	77 1f       	adc	r23, r23
    188e:	88 1f       	adc	r24, r24
    1890:	bb 1f       	adc	r27, r27
    1892:	26 17       	cp	r18, r22
    1894:	37 07       	cpc	r19, r23
    1896:	48 07       	cpc	r20, r24
    1898:	ab 07       	cpc	r26, r27
    189a:	b0 e8       	ldi	r27, 0x80	; 128
    189c:	09 f0       	breq	.+2      	; 0x18a0 <__divsf3_pse+0x56>
    189e:	bb 0b       	sbc	r27, r27
    18a0:	80 2d       	mov	r24, r0
    18a2:	bf 01       	movw	r22, r30
    18a4:	ff 27       	eor	r31, r31
    18a6:	93 58       	subi	r25, 0x83	; 131
    18a8:	5f 4f       	sbci	r21, 0xFF	; 255
    18aa:	3a f0       	brmi	.+14     	; 0x18ba <__divsf3_pse+0x70>
    18ac:	9e 3f       	cpi	r25, 0xFE	; 254
    18ae:	51 05       	cpc	r21, r1
    18b0:	78 f0       	brcs	.+30     	; 0x18d0 <__divsf3_pse+0x86>
    18b2:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    18b6:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__fp_szero>
    18ba:	5f 3f       	cpi	r21, 0xFF	; 255
    18bc:	e4 f3       	brlt	.-8      	; 0x18b6 <__divsf3_pse+0x6c>
    18be:	98 3e       	cpi	r25, 0xE8	; 232
    18c0:	d4 f3       	brlt	.-12     	; 0x18b6 <__divsf3_pse+0x6c>
    18c2:	86 95       	lsr	r24
    18c4:	77 95       	ror	r23
    18c6:	67 95       	ror	r22
    18c8:	b7 95       	ror	r27
    18ca:	f7 95       	ror	r31
    18cc:	9f 5f       	subi	r25, 0xFF	; 255
    18ce:	c9 f7       	brne	.-14     	; 0x18c2 <__divsf3_pse+0x78>
    18d0:	88 0f       	add	r24, r24
    18d2:	91 1d       	adc	r25, r1
    18d4:	96 95       	lsr	r25
    18d6:	87 95       	ror	r24
    18d8:	97 f9       	bld	r25, 7
    18da:	08 95       	ret
    18dc:	e1 e0       	ldi	r30, 0x01	; 1
    18de:	66 0f       	add	r22, r22
    18e0:	77 1f       	adc	r23, r23
    18e2:	88 1f       	adc	r24, r24
    18e4:	bb 1f       	adc	r27, r27
    18e6:	62 17       	cp	r22, r18
    18e8:	73 07       	cpc	r23, r19
    18ea:	84 07       	cpc	r24, r20
    18ec:	ba 07       	cpc	r27, r26
    18ee:	20 f0       	brcs	.+8      	; 0x18f8 <__divsf3_pse+0xae>
    18f0:	62 1b       	sub	r22, r18
    18f2:	73 0b       	sbc	r23, r19
    18f4:	84 0b       	sbc	r24, r20
    18f6:	ba 0b       	sbc	r27, r26
    18f8:	ee 1f       	adc	r30, r30
    18fa:	88 f7       	brcc	.-30     	; 0x18de <__divsf3_pse+0x94>
    18fc:	e0 95       	com	r30
    18fe:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000025e0 <__fixunssfsi>:
    25e0:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__fp_splitA>
    25e4:	88 f0       	brcs	.+34     	; 0x2608 <__fixunssfsi+0x28>
    25e6:	9f 57       	subi	r25, 0x7F	; 127
    25e8:	98 f0       	brcs	.+38     	; 0x2610 <__fixunssfsi+0x30>
    25ea:	b9 2f       	mov	r27, r25
    25ec:	99 27       	eor	r25, r25
    25ee:	b7 51       	subi	r27, 0x17	; 23
    25f0:	b0 f0       	brcs	.+44     	; 0x261e <__fixunssfsi+0x3e>
    25f2:	e1 f0       	breq	.+56     	; 0x262c <__fixunssfsi+0x4c>
    25f4:	66 0f       	add	r22, r22
    25f6:	77 1f       	adc	r23, r23
    25f8:	88 1f       	adc	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	1a f0       	brmi	.+6      	; 0x2604 <__fixunssfsi+0x24>
    25fe:	ba 95       	dec	r27
    2600:	c9 f7       	brne	.-14     	; 0x25f4 <__fixunssfsi+0x14>
    2602:	14 c0       	rjmp	.+40     	; 0x262c <__fixunssfsi+0x4c>
    2604:	b1 30       	cpi	r27, 0x01	; 1
    2606:	91 f0       	breq	.+36     	; 0x262c <__fixunssfsi+0x4c>
    2608:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__fp_zero>
    260c:	b1 e0       	ldi	r27, 0x01	; 1
    260e:	08 95       	ret
    2610:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__fp_zero>
    2614:	67 2f       	mov	r22, r23
    2616:	78 2f       	mov	r23, r24
    2618:	88 27       	eor	r24, r24
    261a:	b8 5f       	subi	r27, 0xF8	; 248
    261c:	39 f0       	breq	.+14     	; 0x262c <__fixunssfsi+0x4c>
    261e:	b9 3f       	cpi	r27, 0xF9	; 249
    2620:	cc f3       	brlt	.-14     	; 0x2614 <__fixunssfsi+0x34>
    2622:	86 95       	lsr	r24
    2624:	77 95       	ror	r23
    2626:	67 95       	ror	r22
    2628:	b3 95       	inc	r27
    262a:	d9 f7       	brne	.-10     	; 0x2622 <__fixunssfsi+0x42>
    262c:	3e f4       	brtc	.+14     	; 0x263c <__fixunssfsi+0x5c>
    262e:	90 95       	com	r25
    2630:	80 95       	com	r24
    2632:	70 95       	com	r23
    2634:	61 95       	neg	r22
    2636:	7f 4f       	sbci	r23, 0xFF	; 255
    2638:	8f 4f       	sbci	r24, 0xFF	; 255
    263a:	9f 4f       	sbci	r25, 0xFF	; 255
    263c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000021c8 <__floatunsisf>:
    21c8:	e8 94       	clt
    21ca:	09 c0       	rjmp	.+18     	; 0x21de <__floatsisf+0x12>

000021cc <__floatsisf>:
    21cc:	97 fb       	bst	r25, 7
    21ce:	3e f4       	brtc	.+14     	; 0x21de <__floatsisf+0x12>
    21d0:	90 95       	com	r25
    21d2:	80 95       	com	r24
    21d4:	70 95       	com	r23
    21d6:	61 95       	neg	r22
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255
    21da:	8f 4f       	sbci	r24, 0xFF	; 255
    21dc:	9f 4f       	sbci	r25, 0xFF	; 255
    21de:	99 23       	and	r25, r25
    21e0:	a9 f0       	breq	.+42     	; 0x220c <__floatsisf+0x40>
    21e2:	f9 2f       	mov	r31, r25
    21e4:	96 e9       	ldi	r25, 0x96	; 150
    21e6:	bb 27       	eor	r27, r27
    21e8:	93 95       	inc	r25
    21ea:	f6 95       	lsr	r31
    21ec:	87 95       	ror	r24
    21ee:	77 95       	ror	r23
    21f0:	67 95       	ror	r22
    21f2:	b7 95       	ror	r27
    21f4:	f1 11       	cpse	r31, r1
    21f6:	f8 cf       	rjmp	.-16     	; 0x21e8 <__floatsisf+0x1c>
    21f8:	fa f4       	brpl	.+62     	; 0x2238 <__floatsisf+0x6c>
    21fa:	bb 0f       	add	r27, r27
    21fc:	11 f4       	brne	.+4      	; 0x2202 <__floatsisf+0x36>
    21fe:	60 ff       	sbrs	r22, 0
    2200:	1b c0       	rjmp	.+54     	; 0x2238 <__floatsisf+0x6c>
    2202:	6f 5f       	subi	r22, 0xFF	; 255
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	8f 4f       	sbci	r24, 0xFF	; 255
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	16 c0       	rjmp	.+44     	; 0x2238 <__floatsisf+0x6c>
    220c:	88 23       	and	r24, r24
    220e:	11 f0       	breq	.+4      	; 0x2214 <__floatsisf+0x48>
    2210:	96 e9       	ldi	r25, 0x96	; 150
    2212:	11 c0       	rjmp	.+34     	; 0x2236 <__floatsisf+0x6a>
    2214:	77 23       	and	r23, r23
    2216:	21 f0       	breq	.+8      	; 0x2220 <__floatsisf+0x54>
    2218:	9e e8       	ldi	r25, 0x8E	; 142
    221a:	87 2f       	mov	r24, r23
    221c:	76 2f       	mov	r23, r22
    221e:	05 c0       	rjmp	.+10     	; 0x222a <__floatsisf+0x5e>
    2220:	66 23       	and	r22, r22
    2222:	71 f0       	breq	.+28     	; 0x2240 <__floatsisf+0x74>
    2224:	96 e8       	ldi	r25, 0x86	; 134
    2226:	86 2f       	mov	r24, r22
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	2a f0       	brmi	.+10     	; 0x2238 <__floatsisf+0x6c>
    222e:	9a 95       	dec	r25
    2230:	66 0f       	add	r22, r22
    2232:	77 1f       	adc	r23, r23
    2234:	88 1f       	adc	r24, r24
    2236:	da f7       	brpl	.-10     	; 0x222e <__floatsisf+0x62>
    2238:	88 0f       	add	r24, r24
    223a:	96 95       	lsr	r25
    223c:	87 95       	ror	r24
    223e:	97 f9       	bld	r25, 7
    2240:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000357e <__fp_inf>:
    357e:	97 f9       	bld	r25, 7
    3580:	9f 67       	ori	r25, 0x7F	; 127
    3582:	80 e8       	ldi	r24, 0x80	; 128
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000035ea <__fp_nan>:
    35ea:	9f ef       	ldi	r25, 0xFF	; 255
    35ec:	80 ec       	ldi	r24, 0xC0	; 192
    35ee:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003538 <__fp_pscA>:
    3538:	00 24       	eor	r0, r0
    353a:	0a 94       	dec	r0
    353c:	16 16       	cp	r1, r22
    353e:	17 06       	cpc	r1, r23
    3540:	18 06       	cpc	r1, r24
    3542:	09 06       	cpc	r0, r25
    3544:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003546 <__fp_pscB>:
    3546:	00 24       	eor	r0, r0
    3548:	0a 94       	dec	r0
    354a:	12 16       	cp	r1, r18
    354c:	13 06       	cpc	r1, r19
    354e:	14 06       	cpc	r1, r20
    3550:	05 06       	cpc	r0, r21
    3552:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000031b6 <__fp_round>:
    31b6:	09 2e       	mov	r0, r25
    31b8:	03 94       	inc	r0
    31ba:	00 0c       	add	r0, r0
    31bc:	11 f4       	brne	.+4      	; 0x31c2 <__fp_round+0xc>
    31be:	88 23       	and	r24, r24
    31c0:	52 f0       	brmi	.+20     	; 0x31d6 <__fp_round+0x20>
    31c2:	bb 0f       	add	r27, r27
    31c4:	40 f4       	brcc	.+16     	; 0x31d6 <__fp_round+0x20>
    31c6:	bf 2b       	or	r27, r31
    31c8:	11 f4       	brne	.+4      	; 0x31ce <__fp_round+0x18>
    31ca:	60 ff       	sbrs	r22, 0
    31cc:	04 c0       	rjmp	.+8      	; 0x31d6 <__fp_round+0x20>
    31ce:	6f 5f       	subi	r22, 0xFF	; 255
    31d0:	7f 4f       	sbci	r23, 0xFF	; 255
    31d2:	8f 4f       	sbci	r24, 0xFF	; 255
    31d4:	9f 4f       	sbci	r25, 0xFF	; 255
    31d6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002b2a <__fp_split3>:
    2b2a:	57 fd       	sbrc	r21, 7
    2b2c:	90 58       	subi	r25, 0x80	; 128
    2b2e:	44 0f       	add	r20, r20
    2b30:	55 1f       	adc	r21, r21
    2b32:	59 f0       	breq	.+22     	; 0x2b4a <__fp_splitA+0x10>
    2b34:	5f 3f       	cpi	r21, 0xFF	; 255
    2b36:	71 f0       	breq	.+28     	; 0x2b54 <__fp_splitA+0x1a>
    2b38:	47 95       	ror	r20

00002b3a <__fp_splitA>:
    2b3a:	88 0f       	add	r24, r24
    2b3c:	97 fb       	bst	r25, 7
    2b3e:	99 1f       	adc	r25, r25
    2b40:	61 f0       	breq	.+24     	; 0x2b5a <__fp_splitA+0x20>
    2b42:	9f 3f       	cpi	r25, 0xFF	; 255
    2b44:	79 f0       	breq	.+30     	; 0x2b64 <__fp_splitA+0x2a>
    2b46:	87 95       	ror	r24
    2b48:	08 95       	ret
    2b4a:	12 16       	cp	r1, r18
    2b4c:	13 06       	cpc	r1, r19
    2b4e:	14 06       	cpc	r1, r20
    2b50:	55 1f       	adc	r21, r21
    2b52:	f2 cf       	rjmp	.-28     	; 0x2b38 <__fp_split3+0xe>
    2b54:	46 95       	lsr	r20
    2b56:	f1 df       	rcall	.-30     	; 0x2b3a <__fp_splitA>
    2b58:	08 c0       	rjmp	.+16     	; 0x2b6a <__fp_splitA+0x30>
    2b5a:	16 16       	cp	r1, r22
    2b5c:	17 06       	cpc	r1, r23
    2b5e:	18 06       	cpc	r1, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	f1 cf       	rjmp	.-30     	; 0x2b46 <__fp_splitA+0xc>
    2b64:	86 95       	lsr	r24
    2b66:	71 05       	cpc	r23, r1
    2b68:	61 05       	cpc	r22, r1
    2b6a:	08 94       	sec
    2b6c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003554 <__fp_zero>:
    3554:	e8 94       	clt

00003556 <__fp_szero>:
    3556:	bb 27       	eor	r27, r27
    3558:	66 27       	eor	r22, r22
    355a:	77 27       	eor	r23, r23
    355c:	cb 01       	movw	r24, r22
    355e:	97 f9       	bld	r25, 7
    3560:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000035ce <__mulsf3>:
    35ce:	0e 94 80 0c 	call	0x1900	; 0x1900 <__mulsf3x>
    35d2:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001900 <__mulsf3x>:
    1900:	0f c0       	rjmp	.+30     	; 0x1920 <__mulsf3x+0x20>
    1902:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__fp_pscA>
    1906:	38 f0       	brcs	.+14     	; 0x1916 <__mulsf3x+0x16>
    1908:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__fp_pscB>
    190c:	20 f0       	brcs	.+8      	; 0x1916 <__mulsf3x+0x16>
    190e:	95 23       	and	r25, r21
    1910:	11 f0       	breq	.+4      	; 0x1916 <__mulsf3x+0x16>
    1912:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    1916:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__fp_nan>
    191a:	11 24       	eor	r1, r1
    191c:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__fp_szero>
    1920:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__fp_split3>
    1924:	70 f3       	brcs	.-36     	; 0x1902 <__mulsf3x+0x2>

00001926 <__mulsf3_pse>:
    1926:	95 9f       	mul	r25, r21
    1928:	c1 f3       	breq	.-16     	; 0x191a <__mulsf3x+0x1a>
    192a:	95 0f       	add	r25, r21
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	55 1f       	adc	r21, r21
    1930:	62 9f       	mul	r22, r18
    1932:	f0 01       	movw	r30, r0
    1934:	72 9f       	mul	r23, r18
    1936:	bb 27       	eor	r27, r27
    1938:	f0 0d       	add	r31, r0
    193a:	b1 1d       	adc	r27, r1
    193c:	63 9f       	mul	r22, r19
    193e:	aa 27       	eor	r26, r26
    1940:	f0 0d       	add	r31, r0
    1942:	b1 1d       	adc	r27, r1
    1944:	aa 1f       	adc	r26, r26
    1946:	64 9f       	mul	r22, r20
    1948:	66 27       	eor	r22, r22
    194a:	b0 0d       	add	r27, r0
    194c:	a1 1d       	adc	r26, r1
    194e:	66 1f       	adc	r22, r22
    1950:	82 9f       	mul	r24, r18
    1952:	22 27       	eor	r18, r18
    1954:	b0 0d       	add	r27, r0
    1956:	a1 1d       	adc	r26, r1
    1958:	62 1f       	adc	r22, r18
    195a:	73 9f       	mul	r23, r19
    195c:	b0 0d       	add	r27, r0
    195e:	a1 1d       	adc	r26, r1
    1960:	62 1f       	adc	r22, r18
    1962:	83 9f       	mul	r24, r19
    1964:	a0 0d       	add	r26, r0
    1966:	61 1d       	adc	r22, r1
    1968:	22 1f       	adc	r18, r18
    196a:	74 9f       	mul	r23, r20
    196c:	33 27       	eor	r19, r19
    196e:	a0 0d       	add	r26, r0
    1970:	61 1d       	adc	r22, r1
    1972:	23 1f       	adc	r18, r19
    1974:	84 9f       	mul	r24, r20
    1976:	60 0d       	add	r22, r0
    1978:	21 1d       	adc	r18, r1
    197a:	82 2f       	mov	r24, r18
    197c:	76 2f       	mov	r23, r22
    197e:	6a 2f       	mov	r22, r26
    1980:	11 24       	eor	r1, r1
    1982:	9f 57       	subi	r25, 0x7F	; 127
    1984:	50 40       	sbci	r21, 0x00	; 0
    1986:	9a f0       	brmi	.+38     	; 0x19ae <__mulsf3_pse+0x88>
    1988:	f1 f0       	breq	.+60     	; 0x19c6 <__mulsf3_pse+0xa0>
    198a:	88 23       	and	r24, r24
    198c:	4a f0       	brmi	.+18     	; 0x19a0 <__mulsf3_pse+0x7a>
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	bb 1f       	adc	r27, r27
    1994:	66 1f       	adc	r22, r22
    1996:	77 1f       	adc	r23, r23
    1998:	88 1f       	adc	r24, r24
    199a:	91 50       	subi	r25, 0x01	; 1
    199c:	50 40       	sbci	r21, 0x00	; 0
    199e:	a9 f7       	brne	.-22     	; 0x198a <__mulsf3_pse+0x64>
    19a0:	9e 3f       	cpi	r25, 0xFE	; 254
    19a2:	51 05       	cpc	r21, r1
    19a4:	80 f0       	brcs	.+32     	; 0x19c6 <__mulsf3_pse+0xa0>
    19a6:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    19aa:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__fp_szero>
    19ae:	5f 3f       	cpi	r21, 0xFF	; 255
    19b0:	e4 f3       	brlt	.-8      	; 0x19aa <__mulsf3_pse+0x84>
    19b2:	98 3e       	cpi	r25, 0xE8	; 232
    19b4:	d4 f3       	brlt	.-12     	; 0x19aa <__mulsf3_pse+0x84>
    19b6:	86 95       	lsr	r24
    19b8:	77 95       	ror	r23
    19ba:	67 95       	ror	r22
    19bc:	b7 95       	ror	r27
    19be:	f7 95       	ror	r31
    19c0:	e7 95       	ror	r30
    19c2:	9f 5f       	subi	r25, 0xFF	; 255
    19c4:	c1 f7       	brne	.-16     	; 0x19b6 <__mulsf3_pse+0x90>
    19c6:	fe 2b       	or	r31, r30
    19c8:	88 0f       	add	r24, r24
    19ca:	91 1d       	adc	r25, r1
    19cc:	96 95       	lsr	r25
    19ce:	87 95       	ror	r24
    19d0:	97 f9       	bld	r25, 7
    19d2:	08 95       	ret

Disassembly of section .text.avrlibc:

000004b0 <vfprintf>:
 4b0:	a4 e1       	ldi	r26, 0x14	; 20
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	ee e5       	ldi	r30, 0x5E	; 94
 4b6:	f2 e0       	ldi	r31, 0x02	; 2
 4b8:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__prologue_saves__>
 4bc:	6c 01       	movw	r12, r24
 4be:	1a 01       	movw	r2, r20
 4c0:	46 2e       	mov	r4, r22
 4c2:	59 01       	movw	r10, r18
 4c4:	fc 01       	movw	r30, r24
 4c6:	10 86       	std	Z+8, r1	; 0x08
 4c8:	17 82       	std	Z+7, r1	; 0x07
 4ca:	84 81       	ldd	r24, Z+4	; 0x04
 4cc:	81 ff       	sbrs	r24, 1
 4ce:	62 c3       	rjmp	.+1732   	; 0xb94 <__EEPROM_REGION_LENGTH__+0x394>
 4d0:	ce 01       	movw	r24, r28
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	9d 87       	std	Y+13, r25	; 0x0d
 4d6:	8c 87       	std	Y+12, r24	; 0x0c
 4d8:	a0 e8       	ldi	r26, 0x80	; 128
 4da:	8a 8b       	std	Y+18, r24	; 0x12
 4dc:	9b 8b       	std	Y+19, r25	; 0x13
 4de:	ac 8b       	std	Y+20, r26	; 0x14
 4e0:	f1 01       	movw	r30, r2
 4e2:	84 91       	lpm	r24, Z
 4e4:	47 fc       	sbrc	r4, 7
 4e6:	80 81       	ld	r24, Z
 4e8:	88 23       	and	r24, r24
 4ea:	09 f4       	brne	.+2      	; 0x4ee <vfprintf+0x3e>
 4ec:	4f c3       	rjmp	.+1694   	; 0xb8c <__EEPROM_REGION_LENGTH__+0x38c>
 4ee:	44 2d       	mov	r20, r4
 4f0:	91 01       	movw	r18, r2
 4f2:	2f 5f       	subi	r18, 0xFF	; 255
 4f4:	3f 4f       	sbci	r19, 0xFF	; 255
 4f6:	4f 4f       	sbci	r20, 0xFF	; 255
 4f8:	85 32       	cpi	r24, 0x25	; 37
 4fa:	19 f0       	breq	.+6      	; 0x502 <vfprintf+0x52>
 4fc:	19 01       	movw	r2, r18
 4fe:	44 2e       	mov	r4, r20
 500:	0a c0       	rjmp	.+20     	; 0x516 <vfprintf+0x66>
 502:	f9 01       	movw	r30, r18
 504:	84 91       	lpm	r24, Z
 506:	47 fd       	sbrc	r20, 7
 508:	80 81       	ld	r24, Z
 50a:	92 e0       	ldi	r25, 0x02	; 2
 50c:	29 0e       	add	r2, r25
 50e:	31 1c       	adc	r3, r1
 510:	41 1c       	adc	r4, r1
 512:	85 32       	cpi	r24, 0x25	; 37
 514:	49 f4       	brne	.+18     	; 0x528 <vfprintf+0x78>
 516:	b6 01       	movw	r22, r12
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 51e:	bf 86       	std	Y+15, r11	; 0x0f
 520:	ae 86       	std	Y+14, r10	; 0x0e
 522:	ae 84       	ldd	r10, Y+14	; 0x0e
 524:	bf 84       	ldd	r11, Y+15	; 0x0f
 526:	dc cf       	rjmp	.-72     	; 0x4e0 <vfprintf+0x30>
 528:	10 e0       	ldi	r17, 0x00	; 0
 52a:	f1 2c       	mov	r15, r1
 52c:	00 e0       	ldi	r16, 0x00	; 0
 52e:	00 32       	cpi	r16, 0x20	; 32
 530:	a0 f4       	brcc	.+40     	; 0x55a <vfprintf+0xaa>
 532:	8b 32       	cpi	r24, 0x2B	; 43
 534:	69 f0       	breq	.+26     	; 0x550 <vfprintf+0xa0>
 536:	30 f4       	brcc	.+12     	; 0x544 <vfprintf+0x94>
 538:	80 32       	cpi	r24, 0x20	; 32
 53a:	59 f0       	breq	.+22     	; 0x552 <vfprintf+0xa2>
 53c:	83 32       	cpi	r24, 0x23	; 35
 53e:	69 f4       	brne	.+26     	; 0x55a <vfprintf+0xaa>
 540:	00 61       	ori	r16, 0x10	; 16
 542:	2c c0       	rjmp	.+88     	; 0x59c <vfprintf+0xec>
 544:	8d 32       	cpi	r24, 0x2D	; 45
 546:	39 f0       	breq	.+14     	; 0x556 <vfprintf+0xa6>
 548:	80 33       	cpi	r24, 0x30	; 48
 54a:	39 f4       	brne	.+14     	; 0x55a <vfprintf+0xaa>
 54c:	01 60       	ori	r16, 0x01	; 1
 54e:	26 c0       	rjmp	.+76     	; 0x59c <vfprintf+0xec>
 550:	02 60       	ori	r16, 0x02	; 2
 552:	04 60       	ori	r16, 0x04	; 4
 554:	23 c0       	rjmp	.+70     	; 0x59c <vfprintf+0xec>
 556:	08 60       	ori	r16, 0x08	; 8
 558:	21 c0       	rjmp	.+66     	; 0x59c <vfprintf+0xec>
 55a:	07 fd       	sbrc	r16, 7
 55c:	29 c0       	rjmp	.+82     	; 0x5b0 <vfprintf+0x100>
 55e:	90 ed       	ldi	r25, 0xD0	; 208
 560:	98 0f       	add	r25, r24
 562:	9a 30       	cpi	r25, 0x0A	; 10
 564:	78 f4       	brcc	.+30     	; 0x584 <vfprintf+0xd4>
 566:	06 ff       	sbrs	r16, 6
 568:	06 c0       	rjmp	.+12     	; 0x576 <vfprintf+0xc6>
 56a:	aa e0       	ldi	r26, 0x0A	; 10
 56c:	1a 9f       	mul	r17, r26
 56e:	90 0d       	add	r25, r0
 570:	11 24       	eor	r1, r1
 572:	19 2f       	mov	r17, r25
 574:	13 c0       	rjmp	.+38     	; 0x59c <vfprintf+0xec>
 576:	ea e0       	ldi	r30, 0x0A	; 10
 578:	fe 9e       	mul	r15, r30
 57a:	90 0d       	add	r25, r0
 57c:	11 24       	eor	r1, r1
 57e:	f9 2e       	mov	r15, r25
 580:	00 62       	ori	r16, 0x20	; 32
 582:	0c c0       	rjmp	.+24     	; 0x59c <vfprintf+0xec>
 584:	8e 32       	cpi	r24, 0x2E	; 46
 586:	21 f4       	brne	.+8      	; 0x590 <vfprintf+0xe0>
 588:	06 fd       	sbrc	r16, 6
 58a:	00 c3       	rjmp	.+1536   	; 0xb8c <__EEPROM_REGION_LENGTH__+0x38c>
 58c:	00 64       	ori	r16, 0x40	; 64
 58e:	06 c0       	rjmp	.+12     	; 0x59c <vfprintf+0xec>
 590:	8c 36       	cpi	r24, 0x6C	; 108
 592:	11 f4       	brne	.+4      	; 0x598 <vfprintf+0xe8>
 594:	00 68       	ori	r16, 0x80	; 128
 596:	02 c0       	rjmp	.+4      	; 0x59c <vfprintf+0xec>
 598:	88 36       	cpi	r24, 0x68	; 104
 59a:	51 f4       	brne	.+20     	; 0x5b0 <vfprintf+0x100>
 59c:	f1 01       	movw	r30, r2
 59e:	84 91       	lpm	r24, Z
 5a0:	47 fc       	sbrc	r4, 7
 5a2:	80 81       	ld	r24, Z
 5a4:	ff ef       	ldi	r31, 0xFF	; 255
 5a6:	2f 1a       	sub	r2, r31
 5a8:	3f 0a       	sbc	r3, r31
 5aa:	4f 0a       	sbc	r4, r31
 5ac:	81 11       	cpse	r24, r1
 5ae:	bf cf       	rjmp	.-130    	; 0x52e <vfprintf+0x7e>
 5b0:	9b eb       	ldi	r25, 0xBB	; 187
 5b2:	98 0f       	add	r25, r24
 5b4:	93 30       	cpi	r25, 0x03	; 3
 5b6:	18 f4       	brcc	.+6      	; 0x5be <vfprintf+0x10e>
 5b8:	00 61       	ori	r16, 0x10	; 16
 5ba:	80 5e       	subi	r24, 0xE0	; 224
 5bc:	06 c0       	rjmp	.+12     	; 0x5ca <vfprintf+0x11a>
 5be:	9b e9       	ldi	r25, 0x9B	; 155
 5c0:	98 0f       	add	r25, r24
 5c2:	93 30       	cpi	r25, 0x03	; 3
 5c4:	08 f0       	brcs	.+2      	; 0x5c8 <vfprintf+0x118>
 5c6:	66 c1       	rjmp	.+716    	; 0x894 <__EEPROM_REGION_LENGTH__+0x94>
 5c8:	0f 7e       	andi	r16, 0xEF	; 239
 5ca:	06 ff       	sbrs	r16, 6
 5cc:	16 e0       	ldi	r17, 0x06	; 6
 5ce:	0f 73       	andi	r16, 0x3F	; 63
 5d0:	70 2e       	mov	r7, r16
 5d2:	85 36       	cpi	r24, 0x65	; 101
 5d4:	21 f4       	brne	.+8      	; 0x5de <vfprintf+0x12e>
 5d6:	20 2f       	mov	r18, r16
 5d8:	20 64       	ori	r18, 0x40	; 64
 5da:	72 2e       	mov	r7, r18
 5dc:	08 c0       	rjmp	.+16     	; 0x5ee <vfprintf+0x13e>
 5de:	86 36       	cpi	r24, 0x66	; 102
 5e0:	21 f4       	brne	.+8      	; 0x5ea <vfprintf+0x13a>
 5e2:	80 2f       	mov	r24, r16
 5e4:	80 68       	ori	r24, 0x80	; 128
 5e6:	78 2e       	mov	r7, r24
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <vfprintf+0x13e>
 5ea:	11 11       	cpse	r17, r1
 5ec:	11 50       	subi	r17, 0x01	; 1
 5ee:	77 fe       	sbrs	r7, 7
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <vfprintf+0x150>
 5f2:	1c 33       	cpi	r17, 0x3C	; 60
 5f4:	50 f4       	brcc	.+20     	; 0x60a <vfprintf+0x15a>
 5f6:	ee 24       	eor	r14, r14
 5f8:	e3 94       	inc	r14
 5fa:	e1 0e       	add	r14, r17
 5fc:	27 e0       	ldi	r18, 0x07	; 7
 5fe:	0b c0       	rjmp	.+22     	; 0x616 <vfprintf+0x166>
 600:	18 30       	cpi	r17, 0x08	; 8
 602:	38 f0       	brcs	.+14     	; 0x612 <vfprintf+0x162>
 604:	27 e0       	ldi	r18, 0x07	; 7
 606:	17 e0       	ldi	r17, 0x07	; 7
 608:	05 c0       	rjmp	.+10     	; 0x614 <vfprintf+0x164>
 60a:	27 e0       	ldi	r18, 0x07	; 7
 60c:	6c e3       	ldi	r22, 0x3C	; 60
 60e:	e6 2e       	mov	r14, r22
 610:	02 c0       	rjmp	.+4      	; 0x616 <vfprintf+0x166>
 612:	21 2f       	mov	r18, r17
 614:	e1 2c       	mov	r14, r1
 616:	f5 01       	movw	r30, r10
 618:	34 96       	adiw	r30, 0x04	; 4
 61a:	ff 87       	std	Y+15, r31	; 0x0f
 61c:	ee 87       	std	Y+14, r30	; 0x0e
 61e:	f5 01       	movw	r30, r10
 620:	60 81       	ld	r22, Z
 622:	71 81       	ldd	r23, Z+1	; 0x01
 624:	82 81       	ldd	r24, Z+2	; 0x02
 626:	93 81       	ldd	r25, Z+3	; 0x03
 628:	0e 2d       	mov	r16, r14
 62a:	ae 01       	movw	r20, r28
 62c:	4f 5f       	subi	r20, 0xFF	; 255
 62e:	5f 4f       	sbci	r21, 0xFF	; 255
 630:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__ftoa_engine>
 634:	5c 01       	movw	r10, r24
 636:	59 80       	ldd	r5, Y+1	; 0x01
 638:	50 fe       	sbrs	r5, 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <vfprintf+0x190>
 63c:	53 fe       	sbrs	r5, 3
 63e:	06 c0       	rjmp	.+12     	; 0x64c <vfprintf+0x19c>
 640:	71 fc       	sbrc	r7, 1
 642:	06 c0       	rjmp	.+12     	; 0x650 <vfprintf+0x1a0>
 644:	72 fe       	sbrs	r7, 2
 646:	06 c0       	rjmp	.+12     	; 0x654 <vfprintf+0x1a4>
 648:	00 e2       	ldi	r16, 0x20	; 32
 64a:	05 c0       	rjmp	.+10     	; 0x656 <vfprintf+0x1a6>
 64c:	0d e2       	ldi	r16, 0x2D	; 45
 64e:	03 c0       	rjmp	.+6      	; 0x656 <vfprintf+0x1a6>
 650:	0b e2       	ldi	r16, 0x2B	; 43
 652:	01 c0       	rjmp	.+2      	; 0x656 <vfprintf+0x1a6>
 654:	00 e0       	ldi	r16, 0x00	; 0
 656:	85 2d       	mov	r24, r5
 658:	8c 70       	andi	r24, 0x0C	; 12
 65a:	19 f0       	breq	.+6      	; 0x662 <vfprintf+0x1b2>
 65c:	01 11       	cpse	r16, r1
 65e:	73 c2       	rjmp	.+1254   	; 0xb46 <__EEPROM_REGION_LENGTH__+0x346>
 660:	be c2       	rjmp	.+1404   	; 0xbde <__EEPROM_REGION_LENGTH__+0x3de>
 662:	77 fe       	sbrs	r7, 7
 664:	0f c0       	rjmp	.+30     	; 0x684 <vfprintf+0x1d4>
 666:	ea 0c       	add	r14, r10
 668:	54 fe       	sbrs	r5, 4
 66a:	04 c0       	rjmp	.+8      	; 0x674 <vfprintf+0x1c4>
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	81 33       	cpi	r24, 0x31	; 49
 670:	09 f4       	brne	.+2      	; 0x674 <vfprintf+0x1c4>
 672:	ea 94       	dec	r14
 674:	1e 14       	cp	r1, r14
 676:	74 f5       	brge	.+92     	; 0x6d4 <vfprintf+0x224>
 678:	28 e0       	ldi	r18, 0x08	; 8
 67a:	2e 15       	cp	r18, r14
 67c:	78 f5       	brcc	.+94     	; 0x6dc <vfprintf+0x22c>
 67e:	38 e0       	ldi	r19, 0x08	; 8
 680:	e3 2e       	mov	r14, r19
 682:	2c c0       	rjmp	.+88     	; 0x6dc <vfprintf+0x22c>
 684:	76 fc       	sbrc	r7, 6
 686:	2a c0       	rjmp	.+84     	; 0x6dc <vfprintf+0x22c>
 688:	81 2f       	mov	r24, r17
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	8a 15       	cp	r24, r10
 68e:	9b 05       	cpc	r25, r11
 690:	9c f0       	brlt	.+38     	; 0x6b8 <vfprintf+0x208>
 692:	8c ef       	ldi	r24, 0xFC	; 252
 694:	a8 16       	cp	r10, r24
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	b8 06       	cpc	r11, r24
 69a:	74 f0       	brlt	.+28     	; 0x6b8 <vfprintf+0x208>
 69c:	97 2d       	mov	r25, r7
 69e:	90 68       	ori	r25, 0x80	; 128
 6a0:	79 2e       	mov	r7, r25
 6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <vfprintf+0x208>
 6a4:	e2 e0       	ldi	r30, 0x02	; 2
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	ec 0f       	add	r30, r28
 6aa:	fd 1f       	adc	r31, r29
 6ac:	e1 0f       	add	r30, r17
 6ae:	f1 1d       	adc	r31, r1
 6b0:	80 81       	ld	r24, Z
 6b2:	80 33       	cpi	r24, 0x30	; 48
 6b4:	19 f4       	brne	.+6      	; 0x6bc <vfprintf+0x20c>
 6b6:	11 50       	subi	r17, 0x01	; 1
 6b8:	11 11       	cpse	r17, r1
 6ba:	f4 cf       	rjmp	.-24     	; 0x6a4 <vfprintf+0x1f4>
 6bc:	77 fe       	sbrs	r7, 7
 6be:	0e c0       	rjmp	.+28     	; 0x6dc <vfprintf+0x22c>
 6c0:	ee 24       	eor	r14, r14
 6c2:	e3 94       	inc	r14
 6c4:	e1 0e       	add	r14, r17
 6c6:	81 2f       	mov	r24, r17
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	a8 16       	cp	r10, r24
 6cc:	b9 06       	cpc	r11, r25
 6ce:	2c f4       	brge	.+10     	; 0x6da <vfprintf+0x22a>
 6d0:	1a 19       	sub	r17, r10
 6d2:	04 c0       	rjmp	.+8      	; 0x6dc <vfprintf+0x22c>
 6d4:	ee 24       	eor	r14, r14
 6d6:	e3 94       	inc	r14
 6d8:	01 c0       	rjmp	.+2      	; 0x6dc <vfprintf+0x22c>
 6da:	10 e0       	ldi	r17, 0x00	; 0
 6dc:	77 fe       	sbrs	r7, 7
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <vfprintf+0x23c>
 6e0:	1a 14       	cp	r1, r10
 6e2:	1b 04       	cpc	r1, r11
 6e4:	34 f4       	brge	.+12     	; 0x6f2 <vfprintf+0x242>
 6e6:	c5 01       	movw	r24, r10
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <vfprintf+0x246>
 6ec:	85 e0       	ldi	r24, 0x05	; 5
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <vfprintf+0x246>
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	01 11       	cpse	r16, r1
 6f8:	01 96       	adiw	r24, 0x01	; 1
 6fa:	11 23       	and	r17, r17
 6fc:	31 f0       	breq	.+12     	; 0x70a <vfprintf+0x25a>
 6fe:	21 2f       	mov	r18, r17
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	2f 5f       	subi	r18, 0xFF	; 255
 704:	3f 4f       	sbci	r19, 0xFF	; 255
 706:	82 0f       	add	r24, r18
 708:	93 1f       	adc	r25, r19
 70a:	2f 2d       	mov	r18, r15
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	82 17       	cp	r24, r18
 710:	93 07       	cpc	r25, r19
 712:	14 f4       	brge	.+4      	; 0x718 <vfprintf+0x268>
 714:	f8 1a       	sub	r15, r24
 716:	01 c0       	rjmp	.+2      	; 0x71a <vfprintf+0x26a>
 718:	f1 2c       	mov	r15, r1
 71a:	87 2d       	mov	r24, r7
 71c:	89 70       	andi	r24, 0x09	; 9
 71e:	49 f4       	brne	.+18     	; 0x732 <vfprintf+0x282>
 720:	ff 20       	and	r15, r15
 722:	39 f0       	breq	.+14     	; 0x732 <vfprintf+0x282>
 724:	b6 01       	movw	r22, r12
 726:	80 e2       	ldi	r24, 0x20	; 32
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 72e:	fa 94       	dec	r15
 730:	f7 cf       	rjmp	.-18     	; 0x720 <vfprintf+0x270>
 732:	00 23       	and	r16, r16
 734:	29 f0       	breq	.+10     	; 0x740 <vfprintf+0x290>
 736:	b6 01       	movw	r22, r12
 738:	80 2f       	mov	r24, r16
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 740:	73 fc       	sbrc	r7, 3
 742:	09 c0       	rjmp	.+18     	; 0x756 <vfprintf+0x2a6>
 744:	ff 20       	and	r15, r15
 746:	39 f0       	breq	.+14     	; 0x756 <vfprintf+0x2a6>
 748:	b6 01       	movw	r22, r12
 74a:	80 e3       	ldi	r24, 0x30	; 48
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 752:	fa 94       	dec	r15
 754:	f7 cf       	rjmp	.-18     	; 0x744 <vfprintf+0x294>
 756:	77 fe       	sbrs	r7, 7
 758:	49 c0       	rjmp	.+146    	; 0x7ec <vfprintf+0x33c>
 75a:	35 01       	movw	r6, r10
 75c:	b7 fe       	sbrs	r11, 7
 75e:	02 c0       	rjmp	.+4      	; 0x764 <vfprintf+0x2b4>
 760:	61 2c       	mov	r6, r1
 762:	71 2c       	mov	r7, r1
 764:	c5 01       	movw	r24, r10
 766:	86 19       	sub	r24, r6
 768:	97 09       	sbc	r25, r7
 76a:	88 24       	eor	r8, r8
 76c:	83 94       	inc	r8
 76e:	91 2c       	mov	r9, r1
 770:	8c 0e       	add	r8, r28
 772:	9d 1e       	adc	r9, r29
 774:	88 0e       	add	r8, r24
 776:	99 1e       	adc	r9, r25
 778:	f5 01       	movw	r30, r10
 77a:	ee 19       	sub	r30, r14
 77c:	f1 09       	sbc	r31, r1
 77e:	f9 8b       	std	Y+17, r31	; 0x11
 780:	e8 8b       	std	Y+16, r30	; 0x10
 782:	01 2f       	mov	r16, r17
 784:	10 e0       	ldi	r17, 0x00	; 0
 786:	11 95       	neg	r17
 788:	01 95       	neg	r16
 78a:	11 09       	sbc	r17, r1
 78c:	ff ef       	ldi	r31, 0xFF	; 255
 78e:	6f 16       	cp	r6, r31
 790:	7f 06       	cpc	r7, r31
 792:	29 f4       	brne	.+10     	; 0x79e <vfprintf+0x2ee>
 794:	b6 01       	movw	r22, r12
 796:	8e e2       	ldi	r24, 0x2E	; 46
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 79e:	a6 14       	cp	r10, r6
 7a0:	b7 04       	cpc	r11, r7
 7a2:	44 f0       	brlt	.+16     	; 0x7b4 <vfprintf+0x304>
 7a4:	88 89       	ldd	r24, Y+16	; 0x10
 7a6:	99 89       	ldd	r25, Y+17	; 0x11
 7a8:	86 15       	cp	r24, r6
 7aa:	97 05       	cpc	r25, r7
 7ac:	1c f4       	brge	.+6      	; 0x7b4 <vfprintf+0x304>
 7ae:	f4 01       	movw	r30, r8
 7b0:	81 81       	ldd	r24, Z+1	; 0x01
 7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <vfprintf+0x306>
 7b4:	80 e3       	ldi	r24, 0x30	; 48
 7b6:	f1 e0       	ldi	r31, 0x01	; 1
 7b8:	6f 1a       	sub	r6, r31
 7ba:	71 08       	sbc	r7, r1
 7bc:	2f ef       	ldi	r18, 0xFF	; 255
 7be:	82 1a       	sub	r8, r18
 7c0:	92 0a       	sbc	r9, r18
 7c2:	60 16       	cp	r6, r16
 7c4:	71 06       	cpc	r7, r17
 7c6:	2c f0       	brlt	.+10     	; 0x7d2 <vfprintf+0x322>
 7c8:	b6 01       	movw	r22, r12
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 7d0:	dd cf       	rjmp	.-70     	; 0x78c <vfprintf+0x2dc>
 7d2:	a6 14       	cp	r10, r6
 7d4:	b7 04       	cpc	r11, r7
 7d6:	39 f4       	brne	.+14     	; 0x7e6 <vfprintf+0x336>
 7d8:	9a 81       	ldd	r25, Y+2	; 0x02
 7da:	96 33       	cpi	r25, 0x36	; 54
 7dc:	18 f4       	brcc	.+6      	; 0x7e4 <vfprintf+0x334>
 7de:	95 33       	cpi	r25, 0x35	; 53
 7e0:	11 f4       	brne	.+4      	; 0x7e6 <vfprintf+0x336>
 7e2:	54 fe       	sbrs	r5, 4
 7e4:	81 e3       	ldi	r24, 0x31	; 49
 7e6:	b6 01       	movw	r22, r12
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	51 c0       	rjmp	.+162    	; 0x88e <__EEPROM_REGION_LENGTH__+0x8e>
 7ec:	8a 81       	ldd	r24, Y+2	; 0x02
 7ee:	81 33       	cpi	r24, 0x31	; 49
 7f0:	19 f0       	breq	.+6      	; 0x7f8 <vfprintf+0x348>
 7f2:	95 2d       	mov	r25, r5
 7f4:	9f 7e       	andi	r25, 0xEF	; 239
 7f6:	59 2e       	mov	r5, r25
 7f8:	b6 01       	movw	r22, r12
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 800:	11 11       	cpse	r17, r1
 802:	05 c0       	rjmp	.+10     	; 0x80e <__EEPROM_REGION_LENGTH__+0xe>
 804:	74 fc       	sbrc	r7, 4
 806:	1c c0       	rjmp	.+56     	; 0x840 <__EEPROM_REGION_LENGTH__+0x40>
 808:	85 e6       	ldi	r24, 0x65	; 101
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	1b c0       	rjmp	.+54     	; 0x844 <__EEPROM_REGION_LENGTH__+0x44>
 80e:	b6 01       	movw	r22, r12
 810:	8e e2       	ldi	r24, 0x2E	; 46
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 818:	02 e0       	ldi	r16, 0x02	; 2
 81a:	01 0f       	add	r16, r17
 81c:	82 e0       	ldi	r24, 0x02	; 2
 81e:	11 e0       	ldi	r17, 0x01	; 1
 820:	18 0f       	add	r17, r24
 822:	e1 e0       	ldi	r30, 0x01	; 1
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	ec 0f       	add	r30, r28
 828:	fd 1f       	adc	r31, r29
 82a:	e8 0f       	add	r30, r24
 82c:	f1 1d       	adc	r31, r1
 82e:	80 81       	ld	r24, Z
 830:	b6 01       	movw	r22, r12
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 838:	81 2f       	mov	r24, r17
 83a:	10 13       	cpse	r17, r16
 83c:	f0 cf       	rjmp	.-32     	; 0x81e <__EEPROM_REGION_LENGTH__+0x1e>
 83e:	e2 cf       	rjmp	.-60     	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 840:	85 e4       	ldi	r24, 0x45	; 69
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	b6 01       	movw	r22, r12
 846:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 84a:	b7 fc       	sbrc	r11, 7
 84c:	05 c0       	rjmp	.+10     	; 0x858 <__EEPROM_REGION_LENGTH__+0x58>
 84e:	a1 14       	cp	r10, r1
 850:	b1 04       	cpc	r11, r1
 852:	39 f4       	brne	.+14     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 854:	54 fe       	sbrs	r5, 4
 856:	05 c0       	rjmp	.+10     	; 0x862 <__EEPROM_REGION_LENGTH__+0x62>
 858:	b1 94       	neg	r11
 85a:	a1 94       	neg	r10
 85c:	b1 08       	sbc	r11, r1
 85e:	8d e2       	ldi	r24, 0x2D	; 45
 860:	01 c0       	rjmp	.+2      	; 0x864 <__EEPROM_REGION_LENGTH__+0x64>
 862:	8b e2       	ldi	r24, 0x2B	; 43
 864:	b6 01       	movw	r22, r12
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 86c:	80 e3       	ldi	r24, 0x30	; 48
 86e:	ea e0       	ldi	r30, 0x0A	; 10
 870:	ae 16       	cp	r10, r30
 872:	b1 04       	cpc	r11, r1
 874:	2c f0       	brlt	.+10     	; 0x880 <__EEPROM_REGION_LENGTH__+0x80>
 876:	8f 5f       	subi	r24, 0xFF	; 255
 878:	aa e0       	ldi	r26, 0x0A	; 10
 87a:	aa 1a       	sub	r10, r26
 87c:	b1 08       	sbc	r11, r1
 87e:	f7 cf       	rjmp	.-18     	; 0x86e <__EEPROM_REGION_LENGTH__+0x6e>
 880:	b6 01       	movw	r22, r12
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 888:	b6 01       	movw	r22, r12
 88a:	c5 01       	movw	r24, r10
 88c:	c0 96       	adiw	r24, 0x30	; 48
 88e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 892:	72 c1       	rjmp	.+740    	; 0xb78 <__EEPROM_REGION_LENGTH__+0x378>
 894:	83 36       	cpi	r24, 0x63	; 99
 896:	31 f0       	breq	.+12     	; 0x8a4 <__EEPROM_REGION_LENGTH__+0xa4>
 898:	83 37       	cpi	r24, 0x73	; 115
 89a:	91 f0       	breq	.+36     	; 0x8c0 <__EEPROM_REGION_LENGTH__+0xc0>
 89c:	83 35       	cpi	r24, 0x53	; 83
 89e:	09 f0       	breq	.+2      	; 0x8a2 <__EEPROM_REGION_LENGTH__+0xa2>
 8a0:	5d c0       	rjmp	.+186    	; 0x95c <__EEPROM_REGION_LENGTH__+0x15c>
 8a2:	24 c0       	rjmp	.+72     	; 0x8ec <__EEPROM_REGION_LENGTH__+0xec>
 8a4:	c5 01       	movw	r24, r10
 8a6:	02 96       	adiw	r24, 0x02	; 2
 8a8:	9f 87       	std	Y+15, r25	; 0x0f
 8aa:	8e 87       	std	Y+14, r24	; 0x0e
 8ac:	f5 01       	movw	r30, r10
 8ae:	80 81       	ld	r24, Z
 8b0:	89 83       	std	Y+1, r24	; 0x01
 8b2:	6a 88       	ldd	r6, Y+18	; 0x12
 8b4:	7b 88       	ldd	r7, Y+19	; 0x13
 8b6:	8c 88       	ldd	r8, Y+20	; 0x14
 8b8:	aa 24       	eor	r10, r10
 8ba:	a3 94       	inc	r10
 8bc:	b1 2c       	mov	r11, r1
 8be:	14 c0       	rjmp	.+40     	; 0x8e8 <__EEPROM_REGION_LENGTH__+0xe8>
 8c0:	c5 01       	movw	r24, r10
 8c2:	03 96       	adiw	r24, 0x03	; 3
 8c4:	9f 87       	std	Y+15, r25	; 0x0f
 8c6:	8e 87       	std	Y+14, r24	; 0x0e
 8c8:	f5 01       	movw	r30, r10
 8ca:	60 80       	ld	r6, Z
 8cc:	71 80       	ldd	r7, Z+1	; 0x01
 8ce:	82 80       	ldd	r8, Z+2	; 0x02
 8d0:	06 ff       	sbrs	r16, 6
 8d2:	03 c0       	rjmp	.+6      	; 0x8da <__EEPROM_REGION_LENGTH__+0xda>
 8d4:	41 2f       	mov	r20, r17
 8d6:	50 e0       	ldi	r21, 0x00	; 0
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__EEPROM_REGION_LENGTH__+0xde>
 8da:	4f ef       	ldi	r20, 0xFF	; 255
 8dc:	5f ef       	ldi	r21, 0xFF	; 255
 8de:	88 2d       	mov	r24, r8
 8e0:	b3 01       	movw	r22, r6
 8e2:	0e 94 38 17 	call	0x2e70	; 0x2e70 <strnlen>
 8e6:	5c 01       	movw	r10, r24
 8e8:	0f 77       	andi	r16, 0x7F	; 127
 8ea:	15 c0       	rjmp	.+42     	; 0x916 <__EEPROM_REGION_LENGTH__+0x116>
 8ec:	c5 01       	movw	r24, r10
 8ee:	03 96       	adiw	r24, 0x03	; 3
 8f0:	9f 87       	std	Y+15, r25	; 0x0f
 8f2:	8e 87       	std	Y+14, r24	; 0x0e
 8f4:	f5 01       	movw	r30, r10
 8f6:	60 80       	ld	r6, Z
 8f8:	71 80       	ldd	r7, Z+1	; 0x01
 8fa:	82 80       	ldd	r8, Z+2	; 0x02
 8fc:	06 ff       	sbrs	r16, 6
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <__EEPROM_REGION_LENGTH__+0x106>
 900:	41 2f       	mov	r20, r17
 902:	50 e0       	ldi	r21, 0x00	; 0
 904:	02 c0       	rjmp	.+4      	; 0x90a <__EEPROM_REGION_LENGTH__+0x10a>
 906:	4f ef       	ldi	r20, 0xFF	; 255
 908:	5f ef       	ldi	r21, 0xFF	; 255
 90a:	88 2d       	mov	r24, r8
 90c:	b3 01       	movw	r22, r6
 90e:	0e 94 38 17 	call	0x2e70	; 0x2e70 <strnlen>
 912:	5c 01       	movw	r10, r24
 914:	00 68       	ori	r16, 0x80	; 128
 916:	03 fd       	sbrc	r16, 3
 918:	1d c0       	rjmp	.+58     	; 0x954 <__EEPROM_REGION_LENGTH__+0x154>
 91a:	8f 2d       	mov	r24, r15
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	a8 16       	cp	r10, r24
 920:	b9 06       	cpc	r11, r25
 922:	c0 f4       	brcc	.+48     	; 0x954 <__EEPROM_REGION_LENGTH__+0x154>
 924:	b6 01       	movw	r22, r12
 926:	80 e2       	ldi	r24, 0x20	; 32
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 92e:	fa 94       	dec	r15
 930:	f4 cf       	rjmp	.-24     	; 0x91a <__EEPROM_REGION_LENGTH__+0x11a>
 932:	f3 01       	movw	r30, r6
 934:	84 91       	lpm	r24, Z
 936:	87 fc       	sbrc	r8, 7
 938:	80 81       	ld	r24, Z
 93a:	ff ef       	ldi	r31, 0xFF	; 255
 93c:	6f 1a       	sub	r6, r31
 93e:	7f 0a       	sbc	r7, r31
 940:	8f 0a       	sbc	r8, r31
 942:	b6 01       	movw	r22, r12
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 94a:	f1 10       	cpse	r15, r1
 94c:	fa 94       	dec	r15
 94e:	21 e0       	ldi	r18, 0x01	; 1
 950:	a2 1a       	sub	r10, r18
 952:	b1 08       	sbc	r11, r1
 954:	a1 14       	cp	r10, r1
 956:	b1 04       	cpc	r11, r1
 958:	61 f7       	brne	.-40     	; 0x932 <__EEPROM_REGION_LENGTH__+0x132>
 95a:	0e c1       	rjmp	.+540    	; 0xb78 <__EEPROM_REGION_LENGTH__+0x378>
 95c:	84 36       	cpi	r24, 0x64	; 100
 95e:	11 f0       	breq	.+4      	; 0x964 <__EEPROM_REGION_LENGTH__+0x164>
 960:	89 36       	cpi	r24, 0x69	; 105
 962:	79 f5       	brne	.+94     	; 0x9c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 964:	c5 01       	movw	r24, r10
 966:	07 ff       	sbrs	r16, 7
 968:	09 c0       	rjmp	.+18     	; 0x97c <__EEPROM_REGION_LENGTH__+0x17c>
 96a:	04 96       	adiw	r24, 0x04	; 4
 96c:	9f 87       	std	Y+15, r25	; 0x0f
 96e:	8e 87       	std	Y+14, r24	; 0x0e
 970:	f5 01       	movw	r30, r10
 972:	60 81       	ld	r22, Z
 974:	71 81       	ldd	r23, Z+1	; 0x01
 976:	82 81       	ldd	r24, Z+2	; 0x02
 978:	93 81       	ldd	r25, Z+3	; 0x03
 97a:	0a c0       	rjmp	.+20     	; 0x990 <__EEPROM_REGION_LENGTH__+0x190>
 97c:	02 96       	adiw	r24, 0x02	; 2
 97e:	9f 87       	std	Y+15, r25	; 0x0f
 980:	8e 87       	std	Y+14, r24	; 0x0e
 982:	f5 01       	movw	r30, r10
 984:	60 81       	ld	r22, Z
 986:	71 81       	ldd	r23, Z+1	; 0x01
 988:	07 2e       	mov	r0, r23
 98a:	00 0c       	add	r0, r0
 98c:	88 0b       	sbc	r24, r24
 98e:	99 0b       	sbc	r25, r25
 990:	0f 76       	andi	r16, 0x6F	; 111
 992:	e0 2e       	mov	r14, r16
 994:	97 ff       	sbrs	r25, 7
 996:	0a c0       	rjmp	.+20     	; 0x9ac <__EEPROM_REGION_LENGTH__+0x1ac>
 998:	90 95       	com	r25
 99a:	80 95       	com	r24
 99c:	70 95       	com	r23
 99e:	61 95       	neg	r22
 9a0:	7f 4f       	sbci	r23, 0xFF	; 255
 9a2:	8f 4f       	sbci	r24, 0xFF	; 255
 9a4:	9f 4f       	sbci	r25, 0xFF	; 255
 9a6:	f0 2f       	mov	r31, r16
 9a8:	f0 68       	ori	r31, 0x80	; 128
 9aa:	ef 2e       	mov	r14, r31
 9ac:	2a e0       	ldi	r18, 0x0A	; 10
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	ae 01       	movw	r20, r28
 9b2:	4f 5f       	subi	r20, 0xFF	; 255
 9b4:	5f 4f       	sbci	r21, 0xFF	; 255
 9b6:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__ultoa_invert>
 9ba:	a8 2e       	mov	r10, r24
 9bc:	2c 85       	ldd	r18, Y+12	; 0x0c
 9be:	a2 1a       	sub	r10, r18
 9c0:	4b c0       	rjmp	.+150    	; 0xa58 <__EEPROM_REGION_LENGTH__+0x258>
 9c2:	85 37       	cpi	r24, 0x75	; 117
 9c4:	29 f4       	brne	.+10     	; 0x9d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 9c6:	0f 7e       	andi	r16, 0xEF	; 239
 9c8:	e0 2e       	mov	r14, r16
 9ca:	2a e0       	ldi	r18, 0x0A	; 10
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	25 c0       	rjmp	.+74     	; 0xa1a <__EEPROM_REGION_LENGTH__+0x21a>
 9d0:	90 2f       	mov	r25, r16
 9d2:	99 7f       	andi	r25, 0xF9	; 249
 9d4:	e9 2e       	mov	r14, r25
 9d6:	8f 36       	cpi	r24, 0x6F	; 111
 9d8:	c1 f0       	breq	.+48     	; 0xa0a <__EEPROM_REGION_LENGTH__+0x20a>
 9da:	18 f4       	brcc	.+6      	; 0x9e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 9dc:	88 35       	cpi	r24, 0x58	; 88
 9de:	79 f0       	breq	.+30     	; 0x9fe <__EEPROM_REGION_LENGTH__+0x1fe>
 9e0:	d5 c0       	rjmp	.+426    	; 0xb8c <__EEPROM_REGION_LENGTH__+0x38c>
 9e2:	80 37       	cpi	r24, 0x70	; 112
 9e4:	19 f0       	breq	.+6      	; 0x9ec <__EEPROM_REGION_LENGTH__+0x1ec>
 9e6:	88 37       	cpi	r24, 0x78	; 120
 9e8:	21 f0       	breq	.+8      	; 0x9f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 9ea:	d0 c0       	rjmp	.+416    	; 0xb8c <__EEPROM_REGION_LENGTH__+0x38c>
 9ec:	a9 2f       	mov	r26, r25
 9ee:	a0 61       	ori	r26, 0x10	; 16
 9f0:	ea 2e       	mov	r14, r26
 9f2:	e4 fe       	sbrs	r14, 4
 9f4:	0d c0       	rjmp	.+26     	; 0xa10 <__EEPROM_REGION_LENGTH__+0x210>
 9f6:	ee 2d       	mov	r30, r14
 9f8:	e4 60       	ori	r30, 0x04	; 4
 9fa:	ee 2e       	mov	r14, r30
 9fc:	09 c0       	rjmp	.+18     	; 0xa10 <__EEPROM_REGION_LENGTH__+0x210>
 9fe:	04 ff       	sbrs	r16, 4
 a00:	0a c0       	rjmp	.+20     	; 0xa16 <__EEPROM_REGION_LENGTH__+0x216>
 a02:	f9 2f       	mov	r31, r25
 a04:	f6 60       	ori	r31, 0x06	; 6
 a06:	ef 2e       	mov	r14, r31
 a08:	06 c0       	rjmp	.+12     	; 0xa16 <__EEPROM_REGION_LENGTH__+0x216>
 a0a:	28 e0       	ldi	r18, 0x08	; 8
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	05 c0       	rjmp	.+10     	; 0xa1a <__EEPROM_REGION_LENGTH__+0x21a>
 a10:	20 e1       	ldi	r18, 0x10	; 16
 a12:	30 e0       	ldi	r19, 0x00	; 0
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <__EEPROM_REGION_LENGTH__+0x21a>
 a16:	20 e1       	ldi	r18, 0x10	; 16
 a18:	32 e0       	ldi	r19, 0x02	; 2
 a1a:	c5 01       	movw	r24, r10
 a1c:	e7 fe       	sbrs	r14, 7
 a1e:	09 c0       	rjmp	.+18     	; 0xa32 <__EEPROM_REGION_LENGTH__+0x232>
 a20:	04 96       	adiw	r24, 0x04	; 4
 a22:	9f 87       	std	Y+15, r25	; 0x0f
 a24:	8e 87       	std	Y+14, r24	; 0x0e
 a26:	f5 01       	movw	r30, r10
 a28:	60 81       	ld	r22, Z
 a2a:	71 81       	ldd	r23, Z+1	; 0x01
 a2c:	82 81       	ldd	r24, Z+2	; 0x02
 a2e:	93 81       	ldd	r25, Z+3	; 0x03
 a30:	08 c0       	rjmp	.+16     	; 0xa42 <__EEPROM_REGION_LENGTH__+0x242>
 a32:	02 96       	adiw	r24, 0x02	; 2
 a34:	9f 87       	std	Y+15, r25	; 0x0f
 a36:	8e 87       	std	Y+14, r24	; 0x0e
 a38:	f5 01       	movw	r30, r10
 a3a:	60 81       	ld	r22, Z
 a3c:	71 81       	ldd	r23, Z+1	; 0x01
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	ae 01       	movw	r20, r28
 a44:	4f 5f       	subi	r20, 0xFF	; 255
 a46:	5f 4f       	sbci	r21, 0xFF	; 255
 a48:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__ultoa_invert>
 a4c:	a8 2e       	mov	r10, r24
 a4e:	fc 85       	ldd	r31, Y+12	; 0x0c
 a50:	af 1a       	sub	r10, r31
 a52:	2e 2d       	mov	r18, r14
 a54:	2f 77       	andi	r18, 0x7F	; 127
 a56:	e2 2e       	mov	r14, r18
 a58:	e6 fe       	sbrs	r14, 6
 a5a:	0b c0       	rjmp	.+22     	; 0xa72 <__EEPROM_REGION_LENGTH__+0x272>
 a5c:	0e 2d       	mov	r16, r14
 a5e:	0e 7f       	andi	r16, 0xFE	; 254
 a60:	a1 16       	cp	r10, r17
 a62:	50 f4       	brcc	.+20     	; 0xa78 <__EEPROM_REGION_LENGTH__+0x278>
 a64:	e4 fe       	sbrs	r14, 4
 a66:	0a c0       	rjmp	.+20     	; 0xa7c <__EEPROM_REGION_LENGTH__+0x27c>
 a68:	e2 fc       	sbrc	r14, 2
 a6a:	08 c0       	rjmp	.+16     	; 0xa7c <__EEPROM_REGION_LENGTH__+0x27c>
 a6c:	0e 2d       	mov	r16, r14
 a6e:	0e 7e       	andi	r16, 0xEE	; 238
 a70:	05 c0       	rjmp	.+10     	; 0xa7c <__EEPROM_REGION_LENGTH__+0x27c>
 a72:	ba 2c       	mov	r11, r10
 a74:	0e 2d       	mov	r16, r14
 a76:	03 c0       	rjmp	.+6      	; 0xa7e <__EEPROM_REGION_LENGTH__+0x27e>
 a78:	ba 2c       	mov	r11, r10
 a7a:	01 c0       	rjmp	.+2      	; 0xa7e <__EEPROM_REGION_LENGTH__+0x27e>
 a7c:	b1 2e       	mov	r11, r17
 a7e:	04 ff       	sbrs	r16, 4
 a80:	0d c0       	rjmp	.+26     	; 0xa9c <__EEPROM_REGION_LENGTH__+0x29c>
 a82:	fe 01       	movw	r30, r28
 a84:	ea 0d       	add	r30, r10
 a86:	f1 1d       	adc	r31, r1
 a88:	80 81       	ld	r24, Z
 a8a:	80 33       	cpi	r24, 0x30	; 48
 a8c:	11 f4       	brne	.+4      	; 0xa92 <__EEPROM_REGION_LENGTH__+0x292>
 a8e:	09 7e       	andi	r16, 0xE9	; 233
 a90:	09 c0       	rjmp	.+18     	; 0xaa4 <__EEPROM_REGION_LENGTH__+0x2a4>
 a92:	02 ff       	sbrs	r16, 2
 a94:	06 c0       	rjmp	.+12     	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
 a96:	b3 94       	inc	r11
 a98:	b3 94       	inc	r11
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__EEPROM_REGION_LENGTH__+0x2a4>
 a9c:	80 2f       	mov	r24, r16
 a9e:	86 78       	andi	r24, 0x86	; 134
 aa0:	09 f0       	breq	.+2      	; 0xaa4 <__EEPROM_REGION_LENGTH__+0x2a4>
 aa2:	b3 94       	inc	r11
 aa4:	03 fd       	sbrc	r16, 3
 aa6:	11 c0       	rjmp	.+34     	; 0xaca <__EEPROM_REGION_LENGTH__+0x2ca>
 aa8:	00 ff       	sbrs	r16, 0
 aaa:	06 c0       	rjmp	.+12     	; 0xab8 <__EEPROM_REGION_LENGTH__+0x2b8>
 aac:	bf 14       	cp	r11, r15
 aae:	88 f4       	brcc	.+34     	; 0xad2 <__EEPROM_REGION_LENGTH__+0x2d2>
 ab0:	fa 0c       	add	r15, r10
 ab2:	1f 2d       	mov	r17, r15
 ab4:	1b 19       	sub	r17, r11
 ab6:	0e c0       	rjmp	.+28     	; 0xad4 <__EEPROM_REGION_LENGTH__+0x2d4>
 ab8:	bf 14       	cp	r11, r15
 aba:	60 f4       	brcc	.+24     	; 0xad4 <__EEPROM_REGION_LENGTH__+0x2d4>
 abc:	b6 01       	movw	r22, r12
 abe:	80 e2       	ldi	r24, 0x20	; 32
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 ac6:	b3 94       	inc	r11
 ac8:	f7 cf       	rjmp	.-18     	; 0xab8 <__EEPROM_REGION_LENGTH__+0x2b8>
 aca:	bf 14       	cp	r11, r15
 acc:	18 f4       	brcc	.+6      	; 0xad4 <__EEPROM_REGION_LENGTH__+0x2d4>
 ace:	fb 18       	sub	r15, r11
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <__EEPROM_REGION_LENGTH__+0x2d6>
 ad2:	1a 2d       	mov	r17, r10
 ad4:	f1 2c       	mov	r15, r1
 ad6:	04 ff       	sbrs	r16, 4
 ad8:	10 c0       	rjmp	.+32     	; 0xafa <__EEPROM_REGION_LENGTH__+0x2fa>
 ada:	b6 01       	movw	r22, r12
 adc:	80 e3       	ldi	r24, 0x30	; 48
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 ae4:	02 ff       	sbrs	r16, 2
 ae6:	17 c0       	rjmp	.+46     	; 0xb16 <__EEPROM_REGION_LENGTH__+0x316>
 ae8:	01 fd       	sbrc	r16, 1
 aea:	03 c0       	rjmp	.+6      	; 0xaf2 <__EEPROM_REGION_LENGTH__+0x2f2>
 aec:	88 e7       	ldi	r24, 0x78	; 120
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <__EEPROM_REGION_LENGTH__+0x2f6>
 af2:	88 e5       	ldi	r24, 0x58	; 88
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	b6 01       	movw	r22, r12
 af8:	0c c0       	rjmp	.+24     	; 0xb12 <__EEPROM_REGION_LENGTH__+0x312>
 afa:	80 2f       	mov	r24, r16
 afc:	86 78       	andi	r24, 0x86	; 134
 afe:	59 f0       	breq	.+22     	; 0xb16 <__EEPROM_REGION_LENGTH__+0x316>
 b00:	01 ff       	sbrs	r16, 1
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <__EEPROM_REGION_LENGTH__+0x308>
 b04:	8b e2       	ldi	r24, 0x2B	; 43
 b06:	01 c0       	rjmp	.+2      	; 0xb0a <__EEPROM_REGION_LENGTH__+0x30a>
 b08:	80 e2       	ldi	r24, 0x20	; 32
 b0a:	07 fd       	sbrc	r16, 7
 b0c:	8d e2       	ldi	r24, 0x2D	; 45
 b0e:	b6 01       	movw	r22, r12
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 b16:	a1 16       	cp	r10, r17
 b18:	38 f4       	brcc	.+14     	; 0xb28 <__EEPROM_REGION_LENGTH__+0x328>
 b1a:	b6 01       	movw	r22, r12
 b1c:	80 e3       	ldi	r24, 0x30	; 48
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 b24:	11 50       	subi	r17, 0x01	; 1
 b26:	f7 cf       	rjmp	.-18     	; 0xb16 <__EEPROM_REGION_LENGTH__+0x316>
 b28:	aa 94       	dec	r10
 b2a:	e1 e0       	ldi	r30, 0x01	; 1
 b2c:	f0 e0       	ldi	r31, 0x00	; 0
 b2e:	ec 0f       	add	r30, r28
 b30:	fd 1f       	adc	r31, r29
 b32:	ea 0d       	add	r30, r10
 b34:	f1 1d       	adc	r31, r1
 b36:	80 81       	ld	r24, Z
 b38:	b6 01       	movw	r22, r12
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 b40:	a1 10       	cpse	r10, r1
 b42:	f2 cf       	rjmp	.-28     	; 0xb28 <__EEPROM_REGION_LENGTH__+0x328>
 b44:	19 c0       	rjmp	.+50     	; 0xb78 <__EEPROM_REGION_LENGTH__+0x378>
 b46:	f4 e0       	ldi	r31, 0x04	; 4
 b48:	ff 15       	cp	r31, r15
 b4a:	80 f5       	brcc	.+96     	; 0xbac <__EEPROM_REGION_LENGTH__+0x3ac>
 b4c:	84 e0       	ldi	r24, 0x04	; 4
 b4e:	f8 1a       	sub	r15, r24
 b50:	73 fe       	sbrs	r7, 3
 b52:	23 c0       	rjmp	.+70     	; 0xb9a <__EEPROM_REGION_LENGTH__+0x39a>
 b54:	01 11       	cpse	r16, r1
 b56:	2b c0       	rjmp	.+86     	; 0xbae <__EEPROM_REGION_LENGTH__+0x3ae>
 b58:	53 fe       	sbrs	r5, 3
 b5a:	2f c0       	rjmp	.+94     	; 0xbba <__EEPROM_REGION_LENGTH__+0x3ba>
 b5c:	5f e9       	ldi	r21, 0x9F	; 159
 b5e:	85 2e       	mov	r8, r21
 b60:	54 e0       	ldi	r21, 0x04	; 4
 b62:	95 2e       	mov	r9, r21
 b64:	50 e0       	ldi	r21, 0x00	; 0
 b66:	a5 2e       	mov	r10, r21
 b68:	07 2d       	mov	r16, r7
 b6a:	00 71       	andi	r16, 0x10	; 16
 b6c:	f4 01       	movw	r30, r8
 b6e:	84 91       	lpm	r24, Z
 b70:	a7 fc       	sbrc	r10, 7
 b72:	80 81       	ld	r24, Z
 b74:	81 11       	cpse	r24, r1
 b76:	28 c0       	rjmp	.+80     	; 0xbc8 <__EEPROM_REGION_LENGTH__+0x3c8>
 b78:	ff 20       	and	r15, r15
 b7a:	09 f4       	brne	.+2      	; 0xb7e <__EEPROM_REGION_LENGTH__+0x37e>
 b7c:	d2 cc       	rjmp	.-1628   	; 0x522 <vfprintf+0x72>
 b7e:	b6 01       	movw	r22, r12
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 b88:	fa 94       	dec	r15
 b8a:	f6 cf       	rjmp	.-20     	; 0xb78 <__EEPROM_REGION_LENGTH__+0x378>
 b8c:	f6 01       	movw	r30, r12
 b8e:	87 81       	ldd	r24, Z+7	; 0x07
 b90:	90 85       	ldd	r25, Z+8	; 0x08
 b92:	2c c0       	rjmp	.+88     	; 0xbec <__EEPROM_REGION_LENGTH__+0x3ec>
 b94:	8f ef       	ldi	r24, 0xFF	; 255
 b96:	9f ef       	ldi	r25, 0xFF	; 255
 b98:	29 c0       	rjmp	.+82     	; 0xbec <__EEPROM_REGION_LENGTH__+0x3ec>
 b9a:	b6 01       	movw	r22, r12
 b9c:	80 e2       	ldi	r24, 0x20	; 32
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 ba4:	fa 94       	dec	r15
 ba6:	f1 10       	cpse	r15, r1
 ba8:	f8 cf       	rjmp	.-16     	; 0xb9a <__EEPROM_REGION_LENGTH__+0x39a>
 baa:	d4 cf       	rjmp	.-88     	; 0xb54 <__EEPROM_REGION_LENGTH__+0x354>
 bac:	f1 2c       	mov	r15, r1
 bae:	b6 01       	movw	r22, r12
 bb0:	80 2f       	mov	r24, r16
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 bb8:	cf cf       	rjmp	.-98     	; 0xb58 <__EEPROM_REGION_LENGTH__+0x358>
 bba:	4b e9       	ldi	r20, 0x9B	; 155
 bbc:	84 2e       	mov	r8, r20
 bbe:	44 e0       	ldi	r20, 0x04	; 4
 bc0:	94 2e       	mov	r9, r20
 bc2:	40 e0       	ldi	r20, 0x00	; 0
 bc4:	a4 2e       	mov	r10, r20
 bc6:	d0 cf       	rjmp	.-96     	; 0xb68 <__EEPROM_REGION_LENGTH__+0x368>
 bc8:	01 11       	cpse	r16, r1
 bca:	80 52       	subi	r24, 0x20	; 32
 bcc:	b6 01       	movw	r22, r12
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <fputc>
 bd4:	ff ef       	ldi	r31, 0xFF	; 255
 bd6:	8f 1a       	sub	r8, r31
 bd8:	9f 0a       	sbc	r9, r31
 bda:	af 0a       	sbc	r10, r31
 bdc:	c7 cf       	rjmp	.-114    	; 0xb6c <__EEPROM_REGION_LENGTH__+0x36c>
 bde:	23 e0       	ldi	r18, 0x03	; 3
 be0:	2f 15       	cp	r18, r15
 be2:	10 f4       	brcc	.+4      	; 0xbe8 <__EEPROM_REGION_LENGTH__+0x3e8>
 be4:	83 e0       	ldi	r24, 0x03	; 3
 be6:	b3 cf       	rjmp	.-154    	; 0xb4e <__EEPROM_REGION_LENGTH__+0x34e>
 be8:	f1 2c       	mov	r15, r1
 bea:	b6 cf       	rjmp	.-148    	; 0xb58 <__EEPROM_REGION_LENGTH__+0x358>
 bec:	64 96       	adiw	r28, 0x14	; 20
 bee:	e2 e1       	ldi	r30, 0x12	; 18
 bf0:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__epilogue_restores__>

Disassembly of section .text.libgcc:

0000358a <__tablejump2__>:
    358a:	ee 0f       	add	r30, r30
    358c:	ff 1f       	adc	r31, r31
    358e:	05 90       	lpm	r0, Z+
    3590:	f4 91       	lpm	r31, Z
    3592:	e0 2d       	mov	r30, r0
    3594:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003290 <__umulhisi3>:
    3290:	a2 9f       	mul	r26, r18
    3292:	b0 01       	movw	r22, r0
    3294:	b3 9f       	mul	r27, r19
    3296:	c0 01       	movw	r24, r0
    3298:	a3 9f       	mul	r26, r19
    329a:	70 0d       	add	r23, r0
    329c:	81 1d       	adc	r24, r1
    329e:	11 24       	eor	r1, r1
    32a0:	91 1d       	adc	r25, r1
    32a2:	b2 9f       	mul	r27, r18
    32a4:	70 0d       	add	r23, r0
    32a6:	81 1d       	adc	r24, r1
    32a8:	11 24       	eor	r1, r1
    32aa:	91 1d       	adc	r25, r1
    32ac:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00002d96 <__prologue_saves__>:
    2d96:	2f 92       	push	r2
    2d98:	3f 92       	push	r3
    2d9a:	4f 92       	push	r4
    2d9c:	5f 92       	push	r5
    2d9e:	6f 92       	push	r6
    2da0:	7f 92       	push	r7
    2da2:	8f 92       	push	r8
    2da4:	9f 92       	push	r9
    2da6:	af 92       	push	r10
    2da8:	bf 92       	push	r11
    2daa:	cf 92       	push	r12
    2dac:	df 92       	push	r13
    2dae:	ef 92       	push	r14
    2db0:	ff 92       	push	r15
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	ca 1b       	sub	r28, r26
    2dc0:	db 0b       	sbc	r29, r27
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00002e3a <__epilogue_restores__>:
    2e3a:	2a 88       	ldd	r2, Y+18	; 0x12
    2e3c:	39 88       	ldd	r3, Y+17	; 0x11
    2e3e:	48 88       	ldd	r4, Y+16	; 0x10
    2e40:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e42:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e44:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e46:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e48:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e4c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e4e:	c8 84       	ldd	r12, Y+8	; 0x08
    2e50:	df 80       	ldd	r13, Y+7	; 0x07
    2e52:	ee 80       	ldd	r14, Y+6	; 0x06
    2e54:	fd 80       	ldd	r15, Y+5	; 0x05
    2e56:	0c 81       	ldd	r16, Y+4	; 0x04
    2e58:	1b 81       	ldd	r17, Y+3	; 0x03
    2e5a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e5c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e5e:	ce 0f       	add	r28, r30
    2e60:	d1 1d       	adc	r29, r1
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	ed 01       	movw	r28, r26
    2e6e:	08 95       	ret

Disassembly of section .text.avrlibc:

000035d6 <atoi>:
    35d6:	0e 94 b1 1a 	call	0x3562	; 0x3562 <atol>
    35da:	cb 01       	movw	r24, r22
    35dc:	08 95       	ret

Disassembly of section .text.avrlibc:

00003562 <atol>:
    3562:	2a e0       	ldi	r18, 0x0A	; 10
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e0       	ldi	r20, 0x00	; 0
    3568:	50 e0       	ldi	r21, 0x00	; 0
    356a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <strtol>
    356e:	08 95       	ret

Disassembly of section .text.avrlibc:

00000bf4 <strtol>:
 bf4:	2f 92       	push	r2
 bf6:	3f 92       	push	r3
 bf8:	4f 92       	push	r4
 bfa:	5f 92       	push	r5
 bfc:	6f 92       	push	r6
 bfe:	7f 92       	push	r7
 c00:	8f 92       	push	r8
 c02:	af 92       	push	r10
 c04:	bf 92       	push	r11
 c06:	cf 92       	push	r12
 c08:	df 92       	push	r13
 c0a:	ef 92       	push	r14
 c0c:	0f 93       	push	r16
 c0e:	1f 93       	push	r17
 c10:	cf 93       	push	r28
 c12:	df 93       	push	r29
 c14:	00 d0       	rcall	.+0      	; 0xc16 <strtol+0x22>
 c16:	00 d0       	rcall	.+0      	; 0xc18 <strtol+0x24>
 c18:	00 d0       	rcall	.+0      	; 0xc1a <strtol+0x26>
 c1a:	cd b7       	in	r28, 0x3d	; 61
 c1c:	de b7       	in	r29, 0x3e	; 62
 c1e:	3b 01       	movw	r6, r22
 c20:	88 2e       	mov	r8, r24
 c22:	5a 01       	movw	r10, r20
 c24:	19 01       	movw	r2, r18
 c26:	41 15       	cp	r20, r1
 c28:	51 05       	cpc	r21, r1
 c2a:	21 f0       	breq	.+8      	; 0xc34 <strtol+0x40>
 c2c:	fa 01       	movw	r30, r20
 c2e:	60 83       	st	Z, r22
 c30:	71 83       	std	Z+1, r23	; 0x01
 c32:	82 83       	std	Z+2, r24	; 0x02
 c34:	21 14       	cp	r2, r1
 c36:	31 04       	cpc	r3, r1
 c38:	29 f0       	breq	.+10     	; 0xc44 <strtol+0x50>
 c3a:	c1 01       	movw	r24, r2
 c3c:	02 97       	sbiw	r24, 0x02	; 2
 c3e:	83 97       	sbiw	r24, 0x23	; 35
 c40:	08 f0       	brcs	.+2      	; 0xc44 <strtol+0x50>
 c42:	1a c1       	rjmp	.+564    	; 0xe78 <strtol+0x284>
 c44:	e8 2c       	mov	r14, r8
 c46:	63 01       	movw	r12, r6
 c48:	ff ef       	ldi	r31, 0xFF	; 255
 c4a:	cf 1a       	sub	r12, r31
 c4c:	df 0a       	sbc	r13, r31
 c4e:	ef 0a       	sbc	r14, r31
 c50:	f3 01       	movw	r30, r6
 c52:	14 91       	lpm	r17, Z
 c54:	87 fc       	sbrc	r8, 7
 c56:	10 81       	ld	r17, Z
 c58:	81 2f       	mov	r24, r17
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	0e 94 25 1a 	call	0x344a	; 0x344a <isspace>
 c60:	4c 2d       	mov	r20, r12
 c62:	3d 2d       	mov	r19, r13
 c64:	2e 2d       	mov	r18, r14
 c66:	89 2b       	or	r24, r25
 c68:	19 f0       	breq	.+6      	; 0xc70 <strtol+0x7c>
 c6a:	36 01       	movw	r6, r12
 c6c:	8e 2c       	mov	r8, r14
 c6e:	ea cf       	rjmp	.-44     	; 0xc44 <strtol+0x50>
 c70:	1d 32       	cpi	r17, 0x2D	; 45
 c72:	69 f4       	brne	.+26     	; 0xc8e <strtol+0x9a>
 c74:	e8 2c       	mov	r14, r8
 c76:	63 01       	movw	r12, r6
 c78:	52 e0       	ldi	r21, 0x02	; 2
 c7a:	c5 0e       	add	r12, r21
 c7c:	d1 1c       	adc	r13, r1
 c7e:	e1 1c       	adc	r14, r1
 c80:	e4 2f       	mov	r30, r20
 c82:	f3 2f       	mov	r31, r19
 c84:	14 91       	lpm	r17, Z
 c86:	27 fd       	sbrc	r18, 7
 c88:	10 81       	ld	r17, Z
 c8a:	01 e0       	ldi	r16, 0x01	; 1
 c8c:	0e c0       	rjmp	.+28     	; 0xcaa <strtol+0xb6>
 c8e:	1b 32       	cpi	r17, 0x2B	; 43
 c90:	59 f4       	brne	.+22     	; 0xca8 <strtol+0xb4>
 c92:	e8 2c       	mov	r14, r8
 c94:	63 01       	movw	r12, r6
 c96:	82 e0       	ldi	r24, 0x02	; 2
 c98:	c8 0e       	add	r12, r24
 c9a:	d1 1c       	adc	r13, r1
 c9c:	e1 1c       	adc	r14, r1
 c9e:	e4 2f       	mov	r30, r20
 ca0:	f3 2f       	mov	r31, r19
 ca2:	14 91       	lpm	r17, Z
 ca4:	27 fd       	sbrc	r18, 7
 ca6:	10 81       	ld	r17, Z
 ca8:	00 e0       	ldi	r16, 0x00	; 0
 caa:	21 14       	cp	r2, r1
 cac:	31 04       	cpc	r3, r1
 cae:	09 f1       	breq	.+66     	; 0xcf2 <strtol+0xfe>
 cb0:	90 e1       	ldi	r25, 0x10	; 16
 cb2:	29 16       	cp	r2, r25
 cb4:	31 04       	cpc	r3, r1
 cb6:	29 f4       	brne	.+10     	; 0xcc2 <strtol+0xce>
 cb8:	3f c0       	rjmp	.+126    	; 0xd38 <strtol+0x144>
 cba:	10 e3       	ldi	r17, 0x30	; 48
 cbc:	21 14       	cp	r2, r1
 cbe:	31 04       	cpc	r3, r1
 cc0:	21 f1       	breq	.+72     	; 0xd0a <strtol+0x116>
 cc2:	f8 e0       	ldi	r31, 0x08	; 8
 cc4:	2f 16       	cp	r2, r31
 cc6:	31 04       	cpc	r3, r1
 cc8:	01 f1       	breq	.+64     	; 0xd0a <strtol+0x116>
 cca:	54 f4       	brge	.+20     	; 0xce0 <strtol+0xec>
 ccc:	32 e0       	ldi	r19, 0x02	; 2
 cce:	23 16       	cp	r2, r19
 cd0:	31 04       	cpc	r3, r1
 cd2:	21 f5       	brne	.+72     	; 0xd1c <strtol+0x128>
 cd4:	41 2c       	mov	r4, r1
 cd6:	51 2c       	mov	r5, r1
 cd8:	61 2c       	mov	r6, r1
 cda:	50 e4       	ldi	r21, 0x40	; 64
 cdc:	75 2e       	mov	r7, r21
 cde:	4b c0       	rjmp	.+150    	; 0xd76 <strtol+0x182>
 ce0:	4a e0       	ldi	r20, 0x0A	; 10
 ce2:	24 16       	cp	r2, r20
 ce4:	31 04       	cpc	r3, r1
 ce6:	39 f0       	breq	.+14     	; 0xcf6 <strtol+0x102>
 ce8:	50 e1       	ldi	r21, 0x10	; 16
 cea:	25 16       	cp	r2, r21
 cec:	31 04       	cpc	r3, r1
 cee:	b1 f4       	brne	.+44     	; 0xd1c <strtol+0x128>
 cf0:	3d c0       	rjmp	.+122    	; 0xd6c <strtol+0x178>
 cf2:	10 33       	cpi	r17, 0x30	; 48
 cf4:	19 f1       	breq	.+70     	; 0xd3c <strtol+0x148>
 cf6:	3a e0       	ldi	r19, 0x0A	; 10
 cf8:	23 2e       	mov	r2, r19
 cfa:	31 2c       	mov	r3, r1
 cfc:	4c ec       	ldi	r20, 0xCC	; 204
 cfe:	44 2e       	mov	r4, r20
 d00:	54 2c       	mov	r5, r4
 d02:	64 2c       	mov	r6, r4
 d04:	4c e0       	ldi	r20, 0x0C	; 12
 d06:	74 2e       	mov	r7, r20
 d08:	36 c0       	rjmp	.+108    	; 0xd76 <strtol+0x182>
 d0a:	98 e0       	ldi	r25, 0x08	; 8
 d0c:	29 2e       	mov	r2, r25
 d0e:	31 2c       	mov	r3, r1
 d10:	41 2c       	mov	r4, r1
 d12:	51 2c       	mov	r5, r1
 d14:	61 2c       	mov	r6, r1
 d16:	20 e1       	ldi	r18, 0x10	; 16
 d18:	72 2e       	mov	r7, r18
 d1a:	2d c0       	rjmp	.+90     	; 0xd76 <strtol+0x182>
 d1c:	60 e0       	ldi	r22, 0x00	; 0
 d1e:	70 e0       	ldi	r23, 0x00	; 0
 d20:	80 e0       	ldi	r24, 0x00	; 0
 d22:	90 e8       	ldi	r25, 0x80	; 128
 d24:	91 01       	movw	r18, r2
 d26:	03 2c       	mov	r0, r3
 d28:	00 0c       	add	r0, r0
 d2a:	44 0b       	sbc	r20, r20
 d2c:	55 0b       	sbc	r21, r21
 d2e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <__udivmodsi4>
 d32:	29 01       	movw	r4, r18
 d34:	3a 01       	movw	r6, r20
 d36:	1f c0       	rjmp	.+62     	; 0xd76 <strtol+0x182>
 d38:	10 33       	cpi	r17, 0x30	; 48
 d3a:	c1 f4       	brne	.+48     	; 0xd6c <strtol+0x178>
 d3c:	f6 01       	movw	r30, r12
 d3e:	84 91       	lpm	r24, Z
 d40:	e7 fc       	sbrc	r14, 7
 d42:	80 81       	ld	r24, Z
 d44:	8f 7d       	andi	r24, 0xDF	; 223
 d46:	88 35       	cpi	r24, 0x58	; 88
 d48:	09 f0       	breq	.+2      	; 0xd4c <strtol+0x158>
 d4a:	b7 cf       	rjmp	.-146    	; 0xcba <strtol+0xc6>
 d4c:	ae 2d       	mov	r26, r14
 d4e:	c6 01       	movw	r24, r12
 d50:	01 96       	adiw	r24, 0x01	; 1
 d52:	a1 1d       	adc	r26, r1
 d54:	fc 01       	movw	r30, r24
 d56:	14 91       	lpm	r17, Z
 d58:	a7 fd       	sbrc	r26, 7
 d5a:	10 81       	ld	r17, Z
 d5c:	e2 e0       	ldi	r30, 0x02	; 2
 d5e:	ce 0e       	add	r12, r30
 d60:	d1 1c       	adc	r13, r1
 d62:	e1 1c       	adc	r14, r1
 d64:	02 60       	ori	r16, 0x02	; 2
 d66:	60 e1       	ldi	r22, 0x10	; 16
 d68:	26 2e       	mov	r2, r22
 d6a:	31 2c       	mov	r3, r1
 d6c:	41 2c       	mov	r4, r1
 d6e:	51 2c       	mov	r5, r1
 d70:	61 2c       	mov	r6, r1
 d72:	88 e0       	ldi	r24, 0x08	; 8
 d74:	78 2e       	mov	r7, r24
 d76:	a0 e0       	ldi	r26, 0x00	; 0
 d78:	60 e0       	ldi	r22, 0x00	; 0
 d7a:	70 e0       	ldi	r23, 0x00	; 0
 d7c:	cb 01       	movw	r24, r22
 d7e:	91 01       	movw	r18, r2
 d80:	03 2c       	mov	r0, r3
 d82:	00 0c       	add	r0, r0
 d84:	44 0b       	sbc	r20, r20
 d86:	55 0b       	sbc	r21, r21
 d88:	29 83       	std	Y+1, r18	; 0x01
 d8a:	3a 83       	std	Y+2, r19	; 0x02
 d8c:	4b 83       	std	Y+3, r20	; 0x03
 d8e:	5c 83       	std	Y+4, r21	; 0x04
 d90:	e0 ed       	ldi	r30, 0xD0	; 208
 d92:	e1 0f       	add	r30, r17
 d94:	ea 30       	cpi	r30, 0x0A	; 10
 d96:	60 f0       	brcs	.+24     	; 0xdb0 <strtol+0x1bc>
 d98:	2f eb       	ldi	r18, 0xBF	; 191
 d9a:	21 0f       	add	r18, r17
 d9c:	2a 31       	cpi	r18, 0x1A	; 26
 d9e:	10 f4       	brcc	.+4      	; 0xda4 <strtol+0x1b0>
 da0:	e9 ec       	ldi	r30, 0xC9	; 201
 da2:	05 c0       	rjmp	.+10     	; 0xdae <strtol+0x1ba>
 da4:	2f e9       	ldi	r18, 0x9F	; 159
 da6:	21 0f       	add	r18, r17
 da8:	2a 31       	cpi	r18, 0x1A	; 26
 daa:	50 f5       	brcc	.+84     	; 0xe00 <strtol+0x20c>
 dac:	e9 ea       	ldi	r30, 0xA9	; 169
 dae:	e1 0f       	add	r30, r17
 db0:	2e 2f       	mov	r18, r30
 db2:	30 e0       	ldi	r19, 0x00	; 0
 db4:	22 15       	cp	r18, r2
 db6:	33 05       	cpc	r19, r3
 db8:	1c f5       	brge	.+70     	; 0xe00 <strtol+0x20c>
 dba:	a7 fd       	sbrc	r26, 7
 dbc:	18 c0       	rjmp	.+48     	; 0xdee <strtol+0x1fa>
 dbe:	46 16       	cp	r4, r22
 dc0:	57 06       	cpc	r5, r23
 dc2:	68 06       	cpc	r6, r24
 dc4:	79 06       	cpc	r7, r25
 dc6:	80 f0       	brcs	.+32     	; 0xde8 <strtol+0x1f4>
 dc8:	29 81       	ldd	r18, Y+1	; 0x01
 dca:	3a 81       	ldd	r19, Y+2	; 0x02
 dcc:	4b 81       	ldd	r20, Y+3	; 0x03
 dce:	5c 81       	ldd	r21, Y+4	; 0x04
 dd0:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__mulsi3>
 dd4:	6e 0f       	add	r22, r30
 dd6:	71 1d       	adc	r23, r1
 dd8:	81 1d       	adc	r24, r1
 dda:	91 1d       	adc	r25, r1
 ddc:	61 30       	cpi	r22, 0x01	; 1
 dde:	71 05       	cpc	r23, r1
 de0:	81 05       	cpc	r24, r1
 de2:	30 e8       	ldi	r19, 0x80	; 128
 de4:	93 07       	cpc	r25, r19
 de6:	10 f0       	brcs	.+4      	; 0xdec <strtol+0x1f8>
 de8:	af ef       	ldi	r26, 0xFF	; 255
 dea:	01 c0       	rjmp	.+2      	; 0xdee <strtol+0x1fa>
 dec:	a1 e0       	ldi	r26, 0x01	; 1
 dee:	f6 01       	movw	r30, r12
 df0:	14 91       	lpm	r17, Z
 df2:	e7 fc       	sbrc	r14, 7
 df4:	10 81       	ld	r17, Z
 df6:	4f ef       	ldi	r20, 0xFF	; 255
 df8:	c4 1a       	sub	r12, r20
 dfa:	d4 0a       	sbc	r13, r20
 dfc:	e4 0a       	sbc	r14, r20
 dfe:	c8 cf       	rjmp	.-112    	; 0xd90 <strtol+0x19c>
 e00:	20 2f       	mov	r18, r16
 e02:	21 70       	andi	r18, 0x01	; 1
 e04:	a1 14       	cp	r10, r1
 e06:	b1 04       	cpc	r11, r1
 e08:	b1 f0       	breq	.+44     	; 0xe36 <strtol+0x242>
 e0a:	aa 23       	and	r26, r26
 e0c:	49 f0       	breq	.+18     	; 0xe20 <strtol+0x22c>
 e0e:	51 e0       	ldi	r21, 0x01	; 1
 e10:	c5 1a       	sub	r12, r21
 e12:	d1 08       	sbc	r13, r1
 e14:	e1 08       	sbc	r14, r1
 e16:	f5 01       	movw	r30, r10
 e18:	c0 82       	st	Z, r12
 e1a:	d1 82       	std	Z+1, r13	; 0x01
 e1c:	e2 82       	std	Z+2, r14	; 0x02
 e1e:	0b c0       	rjmp	.+22     	; 0xe36 <strtol+0x242>
 e20:	01 ff       	sbrs	r16, 1
 e22:	1d c0       	rjmp	.+58     	; 0xe5e <strtol+0x26a>
 e24:	f2 e0       	ldi	r31, 0x02	; 2
 e26:	cf 1a       	sub	r12, r31
 e28:	d1 08       	sbc	r13, r1
 e2a:	e1 08       	sbc	r14, r1
 e2c:	f5 01       	movw	r30, r10
 e2e:	c0 82       	st	Z, r12
 e30:	d1 82       	std	Z+1, r13	; 0x01
 e32:	e2 82       	std	Z+2, r14	; 0x02
 e34:	14 c0       	rjmp	.+40     	; 0xe5e <strtol+0x26a>
 e36:	a7 ff       	sbrs	r26, 7
 e38:	12 c0       	rjmp	.+36     	; 0xe5e <strtol+0x26a>
 e3a:	22 23       	and	r18, r18
 e3c:	29 f0       	breq	.+10     	; 0xe48 <strtol+0x254>
 e3e:	60 e0       	ldi	r22, 0x00	; 0
 e40:	70 e0       	ldi	r23, 0x00	; 0
 e42:	80 e0       	ldi	r24, 0x00	; 0
 e44:	90 e8       	ldi	r25, 0x80	; 128
 e46:	04 c0       	rjmp	.+8      	; 0xe50 <strtol+0x25c>
 e48:	6f ef       	ldi	r22, 0xFF	; 255
 e4a:	7f ef       	ldi	r23, 0xFF	; 255
 e4c:	8f ef       	ldi	r24, 0xFF	; 255
 e4e:	9f e7       	ldi	r25, 0x7F	; 127
 e50:	22 e2       	ldi	r18, 0x22	; 34
 e52:	30 e0       	ldi	r19, 0x00	; 0
 e54:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <errno+0x1>
 e58:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <errno>
 e5c:	09 c0       	rjmp	.+18     	; 0xe70 <strtol+0x27c>
 e5e:	22 23       	and	r18, r18
 e60:	81 f0       	breq	.+32     	; 0xe82 <strtol+0x28e>
 e62:	90 95       	com	r25
 e64:	80 95       	com	r24
 e66:	70 95       	com	r23
 e68:	61 95       	neg	r22
 e6a:	7f 4f       	sbci	r23, 0xFF	; 255
 e6c:	8f 4f       	sbci	r24, 0xFF	; 255
 e6e:	9f 4f       	sbci	r25, 0xFF	; 255
 e70:	46 2f       	mov	r20, r22
 e72:	37 2f       	mov	r19, r23
 e74:	28 2f       	mov	r18, r24
 e76:	12 c0       	rjmp	.+36     	; 0xe9c <strtol+0x2a8>
 e78:	40 e0       	ldi	r20, 0x00	; 0
 e7a:	30 e0       	ldi	r19, 0x00	; 0
 e7c:	20 e0       	ldi	r18, 0x00	; 0
 e7e:	90 e0       	ldi	r25, 0x00	; 0
 e80:	0d c0       	rjmp	.+26     	; 0xe9c <strtol+0x2a8>
 e82:	97 ff       	sbrs	r25, 7
 e84:	f5 cf       	rjmp	.-22     	; 0xe70 <strtol+0x27c>
 e86:	82 e2       	ldi	r24, 0x22	; 34
 e88:	90 e0       	ldi	r25, 0x00	; 0
 e8a:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <errno+0x1>
 e8e:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <errno>
 e92:	6f ef       	ldi	r22, 0xFF	; 255
 e94:	7f ef       	ldi	r23, 0xFF	; 255
 e96:	8f ef       	ldi	r24, 0xFF	; 255
 e98:	9f e7       	ldi	r25, 0x7F	; 127
 e9a:	ea cf       	rjmp	.-44     	; 0xe70 <strtol+0x27c>
 e9c:	64 2f       	mov	r22, r20
 e9e:	73 2f       	mov	r23, r19
 ea0:	82 2f       	mov	r24, r18
 ea2:	26 96       	adiw	r28, 0x06	; 6
 ea4:	0f b6       	in	r0, 0x3f	; 63
 ea6:	f8 94       	cli
 ea8:	de bf       	out	0x3e, r29	; 62
 eaa:	0f be       	out	0x3f, r0	; 63
 eac:	cd bf       	out	0x3d, r28	; 61
 eae:	df 91       	pop	r29
 eb0:	cf 91       	pop	r28
 eb2:	1f 91       	pop	r17
 eb4:	0f 91       	pop	r16
 eb6:	ef 90       	pop	r14
 eb8:	df 90       	pop	r13
 eba:	cf 90       	pop	r12
 ebc:	bf 90       	pop	r11
 ebe:	af 90       	pop	r10
 ec0:	8f 90       	pop	r8
 ec2:	7f 90       	pop	r7
 ec4:	6f 90       	pop	r6
 ec6:	5f 90       	pop	r5
 ec8:	4f 90       	pop	r4
 eca:	3f 90       	pop	r3
 ecc:	2f 90       	pop	r2
 ece:	08 95       	ret

Disassembly of section .text.avrlibc:

000010a8 <__ftoa_engine>:
    10a8:	28 30       	cpi	r18, 0x08	; 8
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__ftoa_engine+0x6>
    10ac:	27 e0       	ldi	r18, 0x07	; 7
    10ae:	33 27       	eor	r19, r19
    10b0:	da 01       	movw	r26, r20
    10b2:	99 0f       	add	r25, r25
    10b4:	31 1d       	adc	r19, r1
    10b6:	87 fd       	sbrc	r24, 7
    10b8:	91 60       	ori	r25, 0x01	; 1
    10ba:	00 96       	adiw	r24, 0x00	; 0
    10bc:	61 05       	cpc	r22, r1
    10be:	71 05       	cpc	r23, r1
    10c0:	39 f4       	brne	.+14     	; 0x10d0 <__ftoa_engine+0x28>
    10c2:	32 60       	ori	r19, 0x02	; 2
    10c4:	2e 5f       	subi	r18, 0xFE	; 254
    10c6:	3d 93       	st	X+, r19
    10c8:	30 e3       	ldi	r19, 0x30	; 48
    10ca:	2a 95       	dec	r18
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <__ftoa_engine+0x1e>
    10ce:	08 95       	ret
    10d0:	9f 3f       	cpi	r25, 0xFF	; 255
    10d2:	30 f0       	brcs	.+12     	; 0x10e0 <__ftoa_engine+0x38>
    10d4:	80 38       	cpi	r24, 0x80	; 128
    10d6:	71 05       	cpc	r23, r1
    10d8:	61 05       	cpc	r22, r1
    10da:	09 f0       	breq	.+2      	; 0x10de <__ftoa_engine+0x36>
    10dc:	3c 5f       	subi	r19, 0xFC	; 252
    10de:	3c 5f       	subi	r19, 0xFC	; 252
    10e0:	3d 93       	st	X+, r19
    10e2:	91 30       	cpi	r25, 0x01	; 1
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <__ftoa_engine+0x40>
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	91 1d       	adc	r25, r1
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	1f 93       	push	r17
    10f0:	0f 93       	push	r16
    10f2:	ff 92       	push	r15
    10f4:	ef 92       	push	r14
    10f6:	19 2f       	mov	r17, r25
    10f8:	98 7f       	andi	r25, 0xF8	; 248
    10fa:	96 95       	lsr	r25
    10fc:	e9 2f       	mov	r30, r25
    10fe:	96 95       	lsr	r25
    1100:	96 95       	lsr	r25
    1102:	e9 0f       	add	r30, r25
    1104:	ff 27       	eor	r31, r31
    1106:	e0 50       	subi	r30, 0x00	; 0
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	99 27       	eor	r25, r25
    110c:	33 27       	eor	r19, r19
    110e:	ee 24       	eor	r14, r14
    1110:	ff 24       	eor	r15, r15
    1112:	a7 01       	movw	r20, r14
    1114:	e7 01       	movw	r28, r14
    1116:	05 90       	lpm	r0, Z+
    1118:	08 94       	sec
    111a:	07 94       	ror	r0
    111c:	28 f4       	brcc	.+10     	; 0x1128 <__stack+0x29>
    111e:	36 0f       	add	r19, r22
    1120:	e7 1e       	adc	r14, r23
    1122:	f8 1e       	adc	r15, r24
    1124:	49 1f       	adc	r20, r25
    1126:	51 1d       	adc	r21, r1
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	06 94       	lsr	r0
    1132:	a1 f7       	brne	.-24     	; 0x111c <__stack+0x1d>
    1134:	05 90       	lpm	r0, Z+
    1136:	07 94       	ror	r0
    1138:	28 f4       	brcc	.+10     	; 0x1144 <__stack+0x45>
    113a:	e7 0e       	add	r14, r23
    113c:	f8 1e       	adc	r15, r24
    113e:	49 1f       	adc	r20, r25
    1140:	56 1f       	adc	r21, r22
    1142:	c1 1d       	adc	r28, r1
    1144:	77 0f       	add	r23, r23
    1146:	88 1f       	adc	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	66 1f       	adc	r22, r22
    114c:	06 94       	lsr	r0
    114e:	a1 f7       	brne	.-24     	; 0x1138 <__stack+0x39>
    1150:	05 90       	lpm	r0, Z+
    1152:	07 94       	ror	r0
    1154:	28 f4       	brcc	.+10     	; 0x1160 <__stack+0x61>
    1156:	f8 0e       	add	r15, r24
    1158:	49 1f       	adc	r20, r25
    115a:	56 1f       	adc	r21, r22
    115c:	c7 1f       	adc	r28, r23
    115e:	d1 1d       	adc	r29, r1
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	66 1f       	adc	r22, r22
    1166:	77 1f       	adc	r23, r23
    1168:	06 94       	lsr	r0
    116a:	a1 f7       	brne	.-24     	; 0x1154 <__stack+0x55>
    116c:	05 90       	lpm	r0, Z+
    116e:	07 94       	ror	r0
    1170:	20 f4       	brcc	.+8      	; 0x117a <__stack+0x7b>
    1172:	49 0f       	add	r20, r25
    1174:	56 1f       	adc	r21, r22
    1176:	c7 1f       	adc	r28, r23
    1178:	d8 1f       	adc	r29, r24
    117a:	99 0f       	add	r25, r25
    117c:	66 1f       	adc	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	88 1f       	adc	r24, r24
    1182:	06 94       	lsr	r0
    1184:	a9 f7       	brne	.-22     	; 0x1170 <__stack+0x71>
    1186:	84 91       	lpm	r24, Z
    1188:	10 95       	com	r17
    118a:	17 70       	andi	r17, 0x07	; 7
    118c:	41 f0       	breq	.+16     	; 0x119e <__stack+0x9f>
    118e:	d6 95       	lsr	r29
    1190:	c7 95       	ror	r28
    1192:	57 95       	ror	r21
    1194:	47 95       	ror	r20
    1196:	f7 94       	ror	r15
    1198:	e7 94       	ror	r14
    119a:	1a 95       	dec	r17
    119c:	c1 f7       	brne	.-16     	; 0x118e <__stack+0x8f>
    119e:	e6 ea       	ldi	r30, 0xA6	; 166
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	68 94       	set
    11a4:	15 90       	lpm	r1, Z+
    11a6:	15 91       	lpm	r17, Z+
    11a8:	35 91       	lpm	r19, Z+
    11aa:	65 91       	lpm	r22, Z+
    11ac:	95 91       	lpm	r25, Z+
    11ae:	05 90       	lpm	r0, Z+
    11b0:	7f e2       	ldi	r23, 0x2F	; 47
    11b2:	73 95       	inc	r23
    11b4:	e1 18       	sub	r14, r1
    11b6:	f1 0a       	sbc	r15, r17
    11b8:	43 0b       	sbc	r20, r19
    11ba:	56 0b       	sbc	r21, r22
    11bc:	c9 0b       	sbc	r28, r25
    11be:	d0 09       	sbc	r29, r0
    11c0:	c0 f7       	brcc	.-16     	; 0x11b2 <__stack+0xb3>
    11c2:	e1 0c       	add	r14, r1
    11c4:	f1 1e       	adc	r15, r17
    11c6:	43 1f       	adc	r20, r19
    11c8:	56 1f       	adc	r21, r22
    11ca:	c9 1f       	adc	r28, r25
    11cc:	d0 1d       	adc	r29, r0
    11ce:	7e f4       	brtc	.+30     	; 0x11ee <__stack+0xef>
    11d0:	70 33       	cpi	r23, 0x30	; 48
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <__stack+0xd9>
    11d4:	8a 95       	dec	r24
    11d6:	e6 cf       	rjmp	.-52     	; 0x11a4 <__stack+0xa5>
    11d8:	e8 94       	clt
    11da:	01 50       	subi	r16, 0x01	; 1
    11dc:	30 f0       	brcs	.+12     	; 0x11ea <__stack+0xeb>
    11de:	08 0f       	add	r16, r24
    11e0:	0a f4       	brpl	.+2      	; 0x11e4 <__stack+0xe5>
    11e2:	00 27       	eor	r16, r16
    11e4:	02 17       	cp	r16, r18
    11e6:	08 f4       	brcc	.+2      	; 0x11ea <__stack+0xeb>
    11e8:	20 2f       	mov	r18, r16
    11ea:	23 95       	inc	r18
    11ec:	02 2f       	mov	r16, r18
    11ee:	7a 33       	cpi	r23, 0x3A	; 58
    11f0:	28 f0       	brcs	.+10     	; 0x11fc <__stack+0xfd>
    11f2:	79 e3       	ldi	r23, 0x39	; 57
    11f4:	7d 93       	st	X+, r23
    11f6:	2a 95       	dec	r18
    11f8:	e9 f7       	brne	.-6      	; 0x11f4 <__stack+0xf5>
    11fa:	10 c0       	rjmp	.+32     	; 0x121c <__stack+0x11d>
    11fc:	7d 93       	st	X+, r23
    11fe:	2a 95       	dec	r18
    1200:	89 f6       	brne	.-94     	; 0x11a4 <__stack+0xa5>
    1202:	06 94       	lsr	r0
    1204:	97 95       	ror	r25
    1206:	67 95       	ror	r22
    1208:	37 95       	ror	r19
    120a:	17 95       	ror	r17
    120c:	17 94       	ror	r1
    120e:	e1 18       	sub	r14, r1
    1210:	f1 0a       	sbc	r15, r17
    1212:	43 0b       	sbc	r20, r19
    1214:	56 0b       	sbc	r21, r22
    1216:	c9 0b       	sbc	r28, r25
    1218:	d0 09       	sbc	r29, r0
    121a:	98 f0       	brcs	.+38     	; 0x1242 <__stack+0x143>
    121c:	23 95       	inc	r18
    121e:	7e 91       	ld	r23, -X
    1220:	73 95       	inc	r23
    1222:	7a 33       	cpi	r23, 0x3A	; 58
    1224:	08 f0       	brcs	.+2      	; 0x1228 <__stack+0x129>
    1226:	70 e3       	ldi	r23, 0x30	; 48
    1228:	7c 93       	st	X, r23
    122a:	20 13       	cpse	r18, r16
    122c:	b8 f7       	brcc	.-18     	; 0x121c <__stack+0x11d>
    122e:	7e 91       	ld	r23, -X
    1230:	70 61       	ori	r23, 0x10	; 16
    1232:	7d 93       	st	X+, r23
    1234:	30 f0       	brcs	.+12     	; 0x1242 <__stack+0x143>
    1236:	83 95       	inc	r24
    1238:	71 e3       	ldi	r23, 0x31	; 49
    123a:	7d 93       	st	X+, r23
    123c:	70 e3       	ldi	r23, 0x30	; 48
    123e:	2a 95       	dec	r18
    1240:	e1 f7       	brne	.-8      	; 0x123a <__stack+0x13b>
    1242:	11 24       	eor	r1, r1
    1244:	ef 90       	pop	r14
    1246:	ff 90       	pop	r15
    1248:	0f 91       	pop	r16
    124a:	1f 91       	pop	r17
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	99 27       	eor	r25, r25
    1252:	87 fd       	sbrc	r24, 7
    1254:	90 95       	com	r25
    1256:	08 95       	ret

Disassembly of section .text.avrlibc:

0000344a <isspace>:
    344a:	91 11       	cpse	r25, r1
    344c:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__ctype_isfalse>
    3450:	80 32       	cpi	r24, 0x20	; 32
    3452:	19 f0       	breq	.+6      	; 0x345a <isspace+0x10>
    3454:	89 50       	subi	r24, 0x09	; 9
    3456:	85 50       	subi	r24, 0x05	; 5
    3458:	c8 f7       	brcc	.-14     	; 0x344c <isspace+0x2>
    345a:	08 95       	ret

Disassembly of section .text.avrlibc:

00002f0c <memcpy>:
    2f0c:	cf 92       	push	r12
    2f0e:	df 92       	push	r13
    2f10:	ef 92       	push	r14
    2f12:	dc 01       	movw	r26, r24
    2f14:	6a 01       	movw	r12, r20
    2f16:	e6 2e       	mov	r14, r22
    2f18:	28 0f       	add	r18, r24
    2f1a:	39 1f       	adc	r19, r25
    2f1c:	a2 17       	cp	r26, r18
    2f1e:	b3 07       	cpc	r27, r19
    2f20:	51 f0       	breq	.+20     	; 0x2f36 <memcpy+0x2a>
    2f22:	f6 01       	movw	r30, r12
    2f24:	44 91       	lpm	r20, Z
    2f26:	e7 fc       	sbrc	r14, 7
    2f28:	40 81       	ld	r20, Z
    2f2a:	4d 93       	st	X+, r20
    2f2c:	4f ef       	ldi	r20, 0xFF	; 255
    2f2e:	c4 1a       	sub	r12, r20
    2f30:	d4 0a       	sbc	r13, r20
    2f32:	e4 0a       	sbc	r14, r20
    2f34:	f3 cf       	rjmp	.-26     	; 0x2f1c <memcpy+0x10>
    2f36:	ef 90       	pop	r14
    2f38:	df 90       	pop	r13
    2f3a:	cf 90       	pop	r12
    2f3c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000302a <strcat>:
    302a:	9a 01       	movw	r18, r20
    302c:	46 2f       	mov	r20, r22
    302e:	dc 01       	movw	r26, r24
    3030:	bd 01       	movw	r22, r26
    3032:	6f 5f       	subi	r22, 0xFF	; 255
    3034:	7f 4f       	sbci	r23, 0xFF	; 255
    3036:	5c 91       	ld	r21, X
    3038:	55 23       	and	r21, r21
    303a:	11 f0       	breq	.+4      	; 0x3040 <strcat+0x16>
    303c:	db 01       	movw	r26, r22
    303e:	f8 cf       	rjmp	.-16     	; 0x3030 <strcat+0x6>
    3040:	f9 01       	movw	r30, r18
    3042:	54 91       	lpm	r21, Z
    3044:	47 fd       	sbrc	r20, 7
    3046:	50 81       	ld	r21, Z
    3048:	5d 93       	st	X+, r21
    304a:	55 23       	and	r21, r21
    304c:	21 f0       	breq	.+8      	; 0x3056 <strcat+0x2c>
    304e:	2f 5f       	subi	r18, 0xFF	; 255
    3050:	3f 4f       	sbci	r19, 0xFF	; 255
    3052:	4f 4f       	sbci	r20, 0xFF	; 255
    3054:	f5 cf       	rjmp	.-22     	; 0x3040 <strcat+0x16>
    3056:	08 95       	ret

Disassembly of section .text.avrlibc:

00002bf6 <strcmp>:
    2bf6:	cf 92       	push	r12
    2bf8:	df 92       	push	r13
    2bfa:	ef 92       	push	r14
    2bfc:	6b 01       	movw	r12, r22
    2bfe:	e8 2e       	mov	r14, r24
    2c00:	f6 01       	movw	r30, r12
    2c02:	84 91       	lpm	r24, Z
    2c04:	e7 fc       	sbrc	r14, 7
    2c06:	80 81       	ld	r24, Z
    2c08:	f9 01       	movw	r30, r18
    2c0a:	54 91       	lpm	r21, Z
    2c0c:	47 fd       	sbrc	r20, 7
    2c0e:	50 81       	ld	r21, Z
    2c10:	85 13       	cpse	r24, r21
    2c12:	0b c0       	rjmp	.+22     	; 0x2c2a <strcmp+0x34>
    2c14:	88 23       	and	r24, r24
    2c16:	41 f0       	breq	.+16     	; 0x2c28 <strcmp+0x32>
    2c18:	8f ef       	ldi	r24, 0xFF	; 255
    2c1a:	c8 1a       	sub	r12, r24
    2c1c:	d8 0a       	sbc	r13, r24
    2c1e:	e8 0a       	sbc	r14, r24
    2c20:	2f 5f       	subi	r18, 0xFF	; 255
    2c22:	3f 4f       	sbci	r19, 0xFF	; 255
    2c24:	4f 4f       	sbci	r20, 0xFF	; 255
    2c26:	ec cf       	rjmp	.-40     	; 0x2c00 <strcmp+0xa>
    2c28:	58 2f       	mov	r21, r24
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	85 1b       	sub	r24, r21
    2c2e:	91 09       	sbc	r25, r1
    2c30:	ef 90       	pop	r14
    2c32:	df 90       	pop	r13
    2c34:	cf 90       	pop	r12
    2c36:	08 95       	ret

Disassembly of section .text.avrlibc:

00002576 <strncmp>:
    2576:	cf 92       	push	r12
    2578:	df 92       	push	r13
    257a:	ef 92       	push	r14
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	6b 01       	movw	r12, r22
    2582:	e8 2e       	mov	r14, r24
    2584:	01 15       	cp	r16, r1
    2586:	11 05       	cpc	r17, r1
    2588:	19 f1       	breq	.+70     	; 0x25d0 <strncmp+0x5a>
    258a:	01 50       	subi	r16, 0x01	; 1
    258c:	11 09       	sbc	r17, r1
    258e:	f6 01       	movw	r30, r12
    2590:	84 91       	lpm	r24, Z
    2592:	e7 fc       	sbrc	r14, 7
    2594:	80 81       	ld	r24, Z
    2596:	88 23       	and	r24, r24
    2598:	99 f0       	breq	.+38     	; 0x25c0 <strncmp+0x4a>
    259a:	f9 01       	movw	r30, r18
    259c:	94 91       	lpm	r25, Z
    259e:	47 fd       	sbrc	r20, 7
    25a0:	90 81       	ld	r25, Z
    25a2:	99 23       	and	r25, r25
    25a4:	69 f0       	breq	.+26     	; 0x25c0 <strncmp+0x4a>
    25a6:	01 15       	cp	r16, r1
    25a8:	11 05       	cpc	r17, r1
    25aa:	51 f0       	breq	.+20     	; 0x25c0 <strncmp+0x4a>
    25ac:	89 13       	cpse	r24, r25
    25ae:	08 c0       	rjmp	.+16     	; 0x25c0 <strncmp+0x4a>
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	c8 1a       	sub	r12, r24
    25b4:	d8 0a       	sbc	r13, r24
    25b6:	e8 0a       	sbc	r14, r24
    25b8:	2f 5f       	subi	r18, 0xFF	; 255
    25ba:	3f 4f       	sbci	r19, 0xFF	; 255
    25bc:	4f 4f       	sbci	r20, 0xFF	; 255
    25be:	e5 cf       	rjmp	.-54     	; 0x258a <strncmp+0x14>
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	f9 01       	movw	r30, r18
    25c4:	24 91       	lpm	r18, Z
    25c6:	47 fd       	sbrc	r20, 7
    25c8:	20 81       	ld	r18, Z
    25ca:	82 1b       	sub	r24, r18
    25cc:	91 09       	sbc	r25, r1
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <strncmp+0x5e>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	1f 91       	pop	r17
    25d6:	0f 91       	pop	r16
    25d8:	ef 90       	pop	r14
    25da:	df 90       	pop	r13
    25dc:	cf 90       	pop	r12
    25de:	08 95       	ret

Disassembly of section .text.avrlibc:

00003058 <strlen>:
    3058:	cf 92       	push	r12
    305a:	df 92       	push	r13
    305c:	ef 92       	push	r14
    305e:	6b 01       	movw	r12, r22
    3060:	e8 2e       	mov	r14, r24
    3062:	a8 2f       	mov	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	fc 01       	movw	r30, r24
    3068:	24 91       	lpm	r18, Z
    306a:	a7 fd       	sbrc	r26, 7
    306c:	20 81       	ld	r18, Z
    306e:	22 23       	and	r18, r18
    3070:	19 f0       	breq	.+6      	; 0x3078 <strlen+0x20>
    3072:	01 96       	adiw	r24, 0x01	; 1
    3074:	a1 1d       	adc	r26, r1
    3076:	f7 cf       	rjmp	.-18     	; 0x3066 <strlen+0xe>
    3078:	8c 19       	sub	r24, r12
    307a:	9d 09       	sbc	r25, r13
    307c:	ef 90       	pop	r14
    307e:	df 90       	pop	r13
    3080:	cf 90       	pop	r12
    3082:	08 95       	ret

Disassembly of section .text.avrlibc:

000032ae <strcpy>:
    32ae:	9a 01       	movw	r18, r20
    32b0:	46 2f       	mov	r20, r22
    32b2:	dc 01       	movw	r26, r24
    32b4:	f9 01       	movw	r30, r18
    32b6:	54 91       	lpm	r21, Z
    32b8:	47 fd       	sbrc	r20, 7
    32ba:	50 81       	ld	r21, Z
    32bc:	5d 93       	st	X+, r21
    32be:	55 23       	and	r21, r21
    32c0:	21 f0       	breq	.+8      	; 0x32ca <strcpy+0x1c>
    32c2:	2f 5f       	subi	r18, 0xFF	; 255
    32c4:	3f 4f       	sbci	r19, 0xFF	; 255
    32c6:	4f 4f       	sbci	r20, 0xFF	; 255
    32c8:	f5 cf       	rjmp	.-22     	; 0x32b4 <strcpy+0x6>
    32ca:	08 95       	ret

Disassembly of section .text.avrlibc:

00002e70 <strnlen>:
    2e70:	cf 92       	push	r12
    2e72:	df 92       	push	r13
    2e74:	ef 92       	push	r14
    2e76:	6b 01       	movw	r12, r22
    2e78:	e8 2e       	mov	r14, r24
    2e7a:	a8 2f       	mov	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	41 15       	cp	r20, r1
    2e80:	51 05       	cpc	r21, r1
    2e82:	31 f4       	brne	.+12     	; 0x2e90 <strnlen+0x20>
    2e84:	8c 19       	sub	r24, r12
    2e86:	9d 09       	sbc	r25, r13
    2e88:	ef 90       	pop	r14
    2e8a:	df 90       	pop	r13
    2e8c:	cf 90       	pop	r12
    2e8e:	08 95       	ret
    2e90:	fc 01       	movw	r30, r24
    2e92:	24 91       	lpm	r18, Z
    2e94:	a7 fd       	sbrc	r26, 7
    2e96:	20 81       	ld	r18, Z
    2e98:	22 23       	and	r18, r18
    2e9a:	a1 f3       	breq	.-24     	; 0x2e84 <strnlen+0x14>
    2e9c:	01 96       	adiw	r24, 0x01	; 1
    2e9e:	a1 1d       	adc	r26, r1
    2ea0:	41 50       	subi	r20, 0x01	; 1
    2ea2:	51 09       	sbc	r21, r1
    2ea4:	ec cf       	rjmp	.-40     	; 0x2e7e <strnlen+0xe>

Disassembly of section .text.avrlibc:

000023aa <fputc>:
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	fb 01       	movw	r30, r22
    23b4:	24 81       	ldd	r18, Z+4	; 0x04
    23b6:	21 fd       	sbrc	r18, 1
    23b8:	03 c0       	rjmp	.+6      	; 0x23c0 <fputc+0x16>
    23ba:	8f ef       	ldi	r24, 0xFF	; 255
    23bc:	9f ef       	ldi	r25, 0xFF	; 255
    23be:	2c c0       	rjmp	.+88     	; 0x2418 <fputc+0x6e>
    23c0:	22 ff       	sbrs	r18, 2
    23c2:	16 c0       	rjmp	.+44     	; 0x23f0 <fputc+0x46>
    23c4:	47 81       	ldd	r20, Z+7	; 0x07
    23c6:	50 85       	ldd	r21, Z+8	; 0x08
    23c8:	25 81       	ldd	r18, Z+5	; 0x05
    23ca:	36 81       	ldd	r19, Z+6	; 0x06
    23cc:	42 17       	cp	r20, r18
    23ce:	53 07       	cpc	r21, r19
    23d0:	44 f4       	brge	.+16     	; 0x23e2 <fputc+0x38>
    23d2:	a0 81       	ld	r26, Z
    23d4:	b1 81       	ldd	r27, Z+1	; 0x01
    23d6:	9d 01       	movw	r18, r26
    23d8:	2f 5f       	subi	r18, 0xFF	; 255
    23da:	3f 4f       	sbci	r19, 0xFF	; 255
    23dc:	31 83       	std	Z+1, r19	; 0x01
    23de:	20 83       	st	Z, r18
    23e0:	8c 93       	st	X, r24
    23e2:	27 81       	ldd	r18, Z+7	; 0x07
    23e4:	30 85       	ldd	r19, Z+8	; 0x08
    23e6:	2f 5f       	subi	r18, 0xFF	; 255
    23e8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ea:	30 87       	std	Z+8, r19	; 0x08
    23ec:	27 83       	std	Z+7, r18	; 0x07
    23ee:	14 c0       	rjmp	.+40     	; 0x2418 <fputc+0x6e>
    23f0:	8b 01       	movw	r16, r22
    23f2:	ec 01       	movw	r28, r24
    23f4:	fb 01       	movw	r30, r22
    23f6:	01 84       	ldd	r0, Z+9	; 0x09
    23f8:	f2 85       	ldd	r31, Z+10	; 0x0a
    23fa:	e0 2d       	mov	r30, r0
    23fc:	09 95       	icall
    23fe:	89 2b       	or	r24, r25
    2400:	e1 f6       	brne	.-72     	; 0x23ba <fputc+0x10>
    2402:	d8 01       	movw	r26, r16
    2404:	17 96       	adiw	r26, 0x07	; 7
    2406:	8d 91       	ld	r24, X+
    2408:	9c 91       	ld	r25, X
    240a:	18 97       	sbiw	r26, 0x08	; 8
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	18 96       	adiw	r26, 0x08	; 8
    2410:	9c 93       	st	X, r25
    2412:	8e 93       	st	-X, r24
    2414:	17 97       	sbiw	r26, 0x07	; 7
    2416:	ce 01       	movw	r24, r28
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	08 95       	ret

Disassembly of section .text.avrlibc:

00002ae4 <sprintf>:
    2ae4:	af e0       	ldi	r26, 0x0F	; 15
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e8 e7       	ldi	r30, 0x78	; 120
    2aea:	f5 e1       	ldi	r31, 0x15	; 21
    2aec:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__prologue_saves__+0x1c>
    2af0:	0e 89       	ldd	r16, Y+22	; 0x16
    2af2:	1f 89       	ldd	r17, Y+23	; 0x17
    2af4:	86 e0       	ldi	r24, 0x06	; 6
    2af6:	8d 83       	std	Y+5, r24	; 0x05
    2af8:	1a 83       	std	Y+2, r17	; 0x02
    2afa:	09 83       	std	Y+1, r16	; 0x01
    2afc:	8f ef       	ldi	r24, 0xFF	; 255
    2afe:	9f e7       	ldi	r25, 0x7F	; 127
    2b00:	9f 83       	std	Y+7, r25	; 0x07
    2b02:	8e 83       	std	Y+6, r24	; 0x06
    2b04:	9e 01       	movw	r18, r28
    2b06:	25 5e       	subi	r18, 0xE5	; 229
    2b08:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0a:	48 8d       	ldd	r20, Y+24	; 0x18
    2b0c:	59 8d       	ldd	r21, Y+25	; 0x19
    2b0e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b10:	ce 01       	movw	r24, r28
    2b12:	01 96       	adiw	r24, 0x01	; 1
    2b14:	0e 94 58 02 	call	0x4b0	; 0x4b0 <vfprintf>
    2b18:	e8 85       	ldd	r30, Y+8	; 0x08
    2b1a:	f9 85       	ldd	r31, Y+9	; 0x09
    2b1c:	e0 0f       	add	r30, r16
    2b1e:	f1 1f       	adc	r31, r17
    2b20:	10 82       	st	Z, r1
    2b22:	2f 96       	adiw	r28, 0x0f	; 15
    2b24:	e4 e0       	ldi	r30, 0x04	; 4
    2b26:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00001c2c <__ultoa_invert>:
    1c2c:	fa 01       	movw	r30, r20
    1c2e:	aa 27       	eor	r26, r26
    1c30:	28 30       	cpi	r18, 0x08	; 8
    1c32:	51 f1       	breq	.+84     	; 0x1c88 <__ultoa_invert+0x5c>
    1c34:	20 31       	cpi	r18, 0x10	; 16
    1c36:	81 f1       	breq	.+96     	; 0x1c98 <__ultoa_invert+0x6c>
    1c38:	e8 94       	clt
    1c3a:	6f 93       	push	r22
    1c3c:	6e 7f       	andi	r22, 0xFE	; 254
    1c3e:	6e 5f       	subi	r22, 0xFE	; 254
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	8f 4f       	sbci	r24, 0xFF	; 255
    1c44:	9f 4f       	sbci	r25, 0xFF	; 255
    1c46:	af 4f       	sbci	r26, 0xFF	; 255
    1c48:	b1 e0       	ldi	r27, 0x01	; 1
    1c4a:	3e d0       	rcall	.+124    	; 0x1cc8 <__ultoa_invert+0x9c>
    1c4c:	b4 e0       	ldi	r27, 0x04	; 4
    1c4e:	3c d0       	rcall	.+120    	; 0x1cc8 <__ultoa_invert+0x9c>
    1c50:	67 0f       	add	r22, r23
    1c52:	78 1f       	adc	r23, r24
    1c54:	89 1f       	adc	r24, r25
    1c56:	9a 1f       	adc	r25, r26
    1c58:	a1 1d       	adc	r26, r1
    1c5a:	68 0f       	add	r22, r24
    1c5c:	79 1f       	adc	r23, r25
    1c5e:	8a 1f       	adc	r24, r26
    1c60:	91 1d       	adc	r25, r1
    1c62:	a1 1d       	adc	r26, r1
    1c64:	6a 0f       	add	r22, r26
    1c66:	71 1d       	adc	r23, r1
    1c68:	81 1d       	adc	r24, r1
    1c6a:	91 1d       	adc	r25, r1
    1c6c:	a1 1d       	adc	r26, r1
    1c6e:	20 d0       	rcall	.+64     	; 0x1cb0 <__ultoa_invert+0x84>
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <__ultoa_invert+0x48>
    1c72:	68 94       	set
    1c74:	3f 91       	pop	r19
    1c76:	2a e0       	ldi	r18, 0x0A	; 10
    1c78:	26 9f       	mul	r18, r22
    1c7a:	11 24       	eor	r1, r1
    1c7c:	30 19       	sub	r19, r0
    1c7e:	30 5d       	subi	r19, 0xD0	; 208
    1c80:	31 93       	st	Z+, r19
    1c82:	de f6       	brtc	.-74     	; 0x1c3a <__ultoa_invert+0xe>
    1c84:	cf 01       	movw	r24, r30
    1c86:	08 95       	ret
    1c88:	46 2f       	mov	r20, r22
    1c8a:	47 70       	andi	r20, 0x07	; 7
    1c8c:	40 5d       	subi	r20, 0xD0	; 208
    1c8e:	41 93       	st	Z+, r20
    1c90:	b3 e0       	ldi	r27, 0x03	; 3
    1c92:	0f d0       	rcall	.+30     	; 0x1cb2 <__ultoa_invert+0x86>
    1c94:	c9 f7       	brne	.-14     	; 0x1c88 <__ultoa_invert+0x5c>
    1c96:	f6 cf       	rjmp	.-20     	; 0x1c84 <__ultoa_invert+0x58>
    1c98:	46 2f       	mov	r20, r22
    1c9a:	4f 70       	andi	r20, 0x0F	; 15
    1c9c:	40 5d       	subi	r20, 0xD0	; 208
    1c9e:	4a 33       	cpi	r20, 0x3A	; 58
    1ca0:	18 f0       	brcs	.+6      	; 0x1ca8 <__ultoa_invert+0x7c>
    1ca2:	49 5d       	subi	r20, 0xD9	; 217
    1ca4:	31 fd       	sbrc	r19, 1
    1ca6:	40 52       	subi	r20, 0x20	; 32
    1ca8:	41 93       	st	Z+, r20
    1caa:	02 d0       	rcall	.+4      	; 0x1cb0 <__ultoa_invert+0x84>
    1cac:	a9 f7       	brne	.-22     	; 0x1c98 <__ultoa_invert+0x6c>
    1cae:	ea cf       	rjmp	.-44     	; 0x1c84 <__ultoa_invert+0x58>
    1cb0:	b4 e0       	ldi	r27, 0x04	; 4
    1cb2:	a6 95       	lsr	r26
    1cb4:	97 95       	ror	r25
    1cb6:	87 95       	ror	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	ba 95       	dec	r27
    1cbe:	c9 f7       	brne	.-14     	; 0x1cb2 <__ultoa_invert+0x86>
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	61 05       	cpc	r22, r1
    1cc4:	71 05       	cpc	r23, r1
    1cc6:	08 95       	ret
    1cc8:	9b 01       	movw	r18, r22
    1cca:	ac 01       	movw	r20, r24
    1ccc:	0a 2e       	mov	r0, r26
    1cce:	06 94       	lsr	r0
    1cd0:	57 95       	ror	r21
    1cd2:	47 95       	ror	r20
    1cd4:	37 95       	ror	r19
    1cd6:	27 95       	ror	r18
    1cd8:	ba 95       	dec	r27
    1cda:	c9 f7       	brne	.-14     	; 0x1cce <__ultoa_invert+0xa2>
    1cdc:	62 0f       	add	r22, r18
    1cde:	73 1f       	adc	r23, r19
    1ce0:	84 1f       	adc	r24, r20
    1ce2:	95 1f       	adc	r25, r21
    1ce4:	a0 1d       	adc	r26, r0
    1ce6:	08 95       	ret

Disassembly of section .text.avrlibc:

000035f0 <__ctype_isfalse>:
    35f0:	99 27       	eor	r25, r25
    35f2:	88 27       	eor	r24, r24

000035f4 <__ctype_istrue>:
    35f4:	08 95       	ret

Disassembly of section .text.avrlibc:

0000316e <eeprom_read_block>:
    316e:	ba 01       	movw	r22, r20
    3170:	a9 01       	movw	r20, r18
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22

00003176 <eeprom_read_blraw>:
    3176:	fc 01       	movw	r30, r24
    3178:	f9 99       	sbic	0x1f, 1	; 31
    317a:	fe cf       	rjmp	.-4      	; 0x3178 <eeprom_read_blraw+0x2>
    317c:	06 c0       	rjmp	.+12     	; 0x318a <eeprom_read_blraw+0x14>
    317e:	f2 bd       	out	0x22, r31	; 34
    3180:	e1 bd       	out	0x21, r30	; 33
    3182:	f8 9a       	sbi	0x1f, 0	; 31
    3184:	31 96       	adiw	r30, 0x01	; 1
    3186:	00 b4       	in	r0, 0x20	; 32
    3188:	0d 92       	st	X+, r0
    318a:	41 50       	subi	r20, 0x01	; 1
    318c:	50 40       	sbci	r21, 0x00	; 0
    318e:	b8 f7       	brcc	.-18     	; 0x317e <eeprom_read_blraw+0x8>
    3190:	08 95       	ret

Disassembly of section .text.avrlibc:

0000345c <eeprom_read_byte>:
    345c:	cb 01       	movw	r24, r22
    345e:	f9 99       	sbic	0x1f, 1	; 31
    3460:	fe cf       	rjmp	.-4      	; 0x345e <eeprom_read_byte+0x2>
    3462:	92 bd       	out	0x22, r25	; 34
    3464:	81 bd       	out	0x21, r24	; 33
    3466:	f8 9a       	sbi	0x1f, 0	; 31
    3468:	99 27       	eor	r25, r25
    346a:	80 b5       	in	r24, 0x20	; 32
    346c:	08 95       	ret

Disassembly of section .text.avrlibc:

00003570 <eeprom_read_dword>:
    3570:	cb 01       	movw	r24, r22
    3572:	a6 e1       	ldi	r26, 0x16	; 22
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	44 e0       	ldi	r20, 0x04	; 4
    3578:	50 e0       	ldi	r21, 0x00	; 0
    357a:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00002b6e <eeprom_update_block>:
    2b6e:	cf 92       	push	r12
    2b70:	df 92       	push	r13
    2b72:	ef 92       	push	r14
    2b74:	21 50       	subi	r18, 0x01	; 1
    2b76:	31 09       	sbc	r19, r1
    2b78:	c0 f0       	brcs	.+48     	; 0x2baa <eeprom_update_block+0x3c>
    2b7a:	6b 01       	movw	r12, r22
    2b7c:	e8 2e       	mov	r14, r24
    2b7e:	c2 0e       	add	r12, r18
    2b80:	d3 1e       	adc	r13, r19
    2b82:	e1 1c       	adc	r14, r1
    2b84:	ca 01       	movw	r24, r20
    2b86:	82 0f       	add	r24, r18
    2b88:	93 1f       	adc	r25, r19
    2b8a:	42 2f       	mov	r20, r18
    2b8c:	73 2f       	mov	r23, r19
    2b8e:	f6 01       	movw	r30, r12
    2b90:	5e 2d       	mov	r21, r14
    2b92:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__xload_1>
    2b96:	26 2f       	mov	r18, r22
    2b98:	0e 94 ca 18 	call	0x3194	; 0x3194 <eeprom_update_r18>
    2b9c:	31 e0       	ldi	r19, 0x01	; 1
    2b9e:	c3 1a       	sub	r12, r19
    2ba0:	d1 08       	sbc	r13, r1
    2ba2:	e1 08       	sbc	r14, r1
    2ba4:	41 50       	subi	r20, 0x01	; 1
    2ba6:	70 40       	sbci	r23, 0x00	; 0
    2ba8:	90 f7       	brcc	.-28     	; 0x2b8e <eeprom_update_block+0x20>
    2baa:	ef 90       	pop	r14
    2bac:	df 90       	pop	r13
    2bae:	cf 90       	pop	r12
    2bb0:	08 95       	ret

Disassembly of section .text.avrlibc:

00003192 <eeprom_update_byte>:
    3192:	26 2f       	mov	r18, r22

00003194 <eeprom_update_r18>:
    3194:	f9 99       	sbic	0x1f, 1	; 31
    3196:	fe cf       	rjmp	.-4      	; 0x3194 <eeprom_update_r18>
    3198:	92 bd       	out	0x22, r25	; 34
    319a:	81 bd       	out	0x21, r24	; 33
    319c:	f8 9a       	sbi	0x1f, 0	; 31
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	00 b4       	in	r0, 0x20	; 32
    31a2:	02 16       	cp	r0, r18
    31a4:	39 f0       	breq	.+14     	; 0x31b4 <eeprom_update_r18+0x20>
    31a6:	1f ba       	out	0x1f, r1	; 31
    31a8:	20 bd       	out	0x20, r18	; 32
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	fa 9a       	sbi	0x1f, 2	; 31
    31b0:	f9 9a       	sbi	0x1f, 1	; 31
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	08 95       	ret

Disassembly of section .text.avrlibc:

00003350 <eeprom_update_dword>:
    3350:	03 96       	adiw	r24, 0x03	; 3
    3352:	27 2f       	mov	r18, r23
    3354:	0e 94 ca 18 	call	0x3194	; 0x3194 <eeprom_update_r18>
    3358:	0e 94 c9 18 	call	0x3192	; 0x3192 <eeprom_update_byte>
    335c:	25 2f       	mov	r18, r21
    335e:	0e 94 ca 18 	call	0x3194	; 0x3194 <eeprom_update_r18>
    3362:	24 2f       	mov	r18, r20
    3364:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <eeprom_update_r18>

Disassembly of section .text.libgcc.mul:

000031f8 <__mulsi3>:
    31f8:	db 01       	movw	r26, r22
    31fa:	8f 93       	push	r24
    31fc:	9f 93       	push	r25
    31fe:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__muluhisi3>
    3202:	bf 91       	pop	r27
    3204:	af 91       	pop	r26
    3206:	a2 9f       	mul	r26, r18
    3208:	80 0d       	add	r24, r0
    320a:	91 1d       	adc	r25, r1
    320c:	a3 9f       	mul	r26, r19
    320e:	90 0d       	add	r25, r0
    3210:	b2 9f       	mul	r27, r18
    3212:	90 0d       	add	r25, r0
    3214:	11 24       	eor	r1, r1
    3216:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002bb2 <__udivmodsi4>:
    2bb2:	a1 e2       	ldi	r26, 0x21	; 33
    2bb4:	1a 2e       	mov	r1, r26
    2bb6:	aa 1b       	sub	r26, r26
    2bb8:	bb 1b       	sub	r27, r27
    2bba:	fd 01       	movw	r30, r26
    2bbc:	0d c0       	rjmp	.+26     	; 0x2bd8 <__udivmodsi4_ep>

00002bbe <__udivmodsi4_loop>:
    2bbe:	aa 1f       	adc	r26, r26
    2bc0:	bb 1f       	adc	r27, r27
    2bc2:	ee 1f       	adc	r30, r30
    2bc4:	ff 1f       	adc	r31, r31
    2bc6:	a2 17       	cp	r26, r18
    2bc8:	b3 07       	cpc	r27, r19
    2bca:	e4 07       	cpc	r30, r20
    2bcc:	f5 07       	cpc	r31, r21
    2bce:	20 f0       	brcs	.+8      	; 0x2bd8 <__udivmodsi4_ep>
    2bd0:	a2 1b       	sub	r26, r18
    2bd2:	b3 0b       	sbc	r27, r19
    2bd4:	e4 0b       	sbc	r30, r20
    2bd6:	f5 0b       	sbc	r31, r21

00002bd8 <__udivmodsi4_ep>:
    2bd8:	66 1f       	adc	r22, r22
    2bda:	77 1f       	adc	r23, r23
    2bdc:	88 1f       	adc	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	1a 94       	dec	r1
    2be2:	69 f7       	brne	.-38     	; 0x2bbe <__udivmodsi4_loop>
    2be4:	60 95       	com	r22
    2be6:	70 95       	com	r23
    2be8:	80 95       	com	r24
    2bea:	90 95       	com	r25
    2bec:	9b 01       	movw	r18, r22
    2bee:	ac 01       	movw	r20, r24
    2bf0:	bd 01       	movw	r22, r26
    2bf2:	cf 01       	movw	r24, r30
    2bf4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000033aa <__muluhisi3>:
    33aa:	0e 94 48 19 	call	0x3290	; 0x3290 <__umulhisi3>
    33ae:	a5 9f       	mul	r26, r21
    33b0:	90 0d       	add	r25, r0
    33b2:	b4 9f       	mul	r27, r20
    33b4:	90 0d       	add	r25, r0
    33b6:	a4 9f       	mul	r26, r20
    33b8:	80 0d       	add	r24, r0
    33ba:	91 1d       	adc	r25, r1
    33bc:	11 24       	eor	r1, r1
    33be:	08 95       	ret

Disassembly of section .text.libgcc:

000035b4 <__xload_1>:
    35b4:	57 fd       	sbrc	r21, 7
    35b6:	60 81       	ld	r22, Z
    35b8:	57 ff       	sbrs	r21, 7
    35ba:	64 91       	lpm	r22, Z
    35bc:	08 95       	ret
