
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000047a6  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b8  00800100  00800100  000047a6  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000047a6  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00004801  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000970  00000000  00000000  00004878  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c960  00000000  00000000  000051e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026c8  00000000  00000000  00011b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000049ae  00000000  00000000  00014210  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001964  00000000  00000000  00018bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab8  00000000  00000000  0001a524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000056fb  00000000  00000000  0001afdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000768  00000000  00000000  000206d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000046c2  000046c2  00004796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00020e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  000044aa  000044aa  0000457e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  000043a0  000043a0  00004474  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  000044b8  000044b8  0000458c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  000043b4  000043b4  00004488  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  000044c6  000044c6  0000459a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  000043c8  000043c8  0000449c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  000044d4  000044d4  000045a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  000043dc  000043dc  000044b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power 00000014  000043f0  000043f0  000044c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_3 00000014  00004404  00004404  000044d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.rn2483_init 00000008  0000465e  0000465e  00004732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.rn2483_reset_active 00000008  00004666  00004666  0000473a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.rn2483_reset_deactive 00000008  0000466e  0000466e  00004742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.SCD30_HAL_init 0000000e  000044e2  000044e2  000045b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.SCD30_HAL_data_ready 0000000a  0000462c  0000462c  00004700  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_16 0000004e  0000354a  0000354a  0000361e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss._cb      00000002  008006bb  008006bb  000047a6  2**0
                  ALLOC
 32 .text.__vector_13 0000004e  00003598  00003598  0000366c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .bss._cb      00000002  008006bd  008006bd  000047a6  2**0
                  ALLOC
 34 .text.start_timer 00000008  00004676  00004676  0000474a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.stop_timer 00000006  0000469e  0000469e  00004772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.TC2_HAL_init 00000020  000041ee  000041ee  000042c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.TC2_HAL_subscribe 00000054  00003400  00003400  000034d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TC2_HAL_cancel 0000003a  00003c4a  00003c4a  00003d1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_9 0000007c  00002b1c  00002b1c  00002bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .bss.cnt      00000001  008006cd  008006cd  000047a6  2**0
                  ALLOC
 41 .bss.cbCounter 00000001  008006ce  008006ce  000047a6  2**0
                  ALLOC
 42 .bss.callbacks 0000000a  00800693  00800693  000047a6  2**0
                  ALLOC
 43 .text.start_and_write_data 0000004c  00003682  00003682  00003756  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.read_and_stop 0000005a  000032a2  000032a2  00003376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TWI_API_write_data 00000014  00004418  00004418  000044ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TWI_API_write_data_stop 0000001a  00004300  00004300  000043d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00003e78  00003e78  00003f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TWI_API_repeat_read_data_stop 00000030  00003f40  00003f40  00004014  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TWI_HAL_init 00000012  00004454  00004454  00004528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.TWI_HAL_start 00000048  000038de  000038de  000039b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.TWI_HAL_repeated_start 00000042  00003b0c  00003b0c  00003be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.TWI_HAL_write_byte 00000020  0000420e  0000420e  000042e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.TWI_HAL_read_byte_ack 00000014  0000442c  0000442c  00004500  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_HAL_read_byte_nack 00000014  00004440  00004440  00004514  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_HAL_stop 00000010  0000448a  0000448a  0000455e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.copy_buffer 0000002e  00004030  00004030  00004104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.uart0_hal_init 0000003c  00003bd2  00003bd2  00003ca6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.uart0_hal_send_message 0000004e  000035e6  000035e6  000036ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.uart0_hal_send_string 0000007e  00002a9e  00002a9e  00002b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.uart0_hal_message_ready 0000000e  000044f0  000044f0  000045c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.uart0_hal_clear_rx_buffer 0000000a  00004636  00004636  0000470a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.uart0_hal_read_message_as_str 00000028  000040e6  000040e6  000041ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart0_hal_send_break 00000046  0000396e  0000396e  00003a42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.__vector_22 0000006e  00002fc2  00002fc2  00003096  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.__vector_20 00000074  00002e6a  00002e6a  00002f3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .bss.rx_buffer_has_message 00000001  008006cf  008006cf  000047a6  2**0
                  ALLOC
 67 .bss.rx_buffer_data_len 00000001  008006d0  008006d0  000047a6  2**0
                  ALLOC
 68 .bss.tx_buffer_cursor 00000002  008006bf  008006bf  000047a6  2**0
                  ALLOC
 69 .bss.tx_buffer_data_len 00000002  008006c1  008006c1  000047a6  2**0
                  ALLOC
 70 .text.copy_buffer 0000002e  0000405e  0000405e  00004132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart1_hal_init 0000003c  00003c0e  00003c0e  00003ce2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart1_hal_send_string 00000096  0000284a  0000284a  0000291e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart1_hal_message_ready 0000000e  000044fe  000044fe  000045d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uart1_hal_rx_full 0000000e  0000450c  0000450c  000045e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.uart1_hal_clear_rx_buffer 0000000a  00004640  00004640  00004714  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.uart1_hal_read_message_as_str 00000028  0000410e  0000410e  000041e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__vector_30 0000006e  00003030  00003030  00003104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__vector_28 00000074  00002ede  00002ede  00002fb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .bss.rx_buffer_has_message 00000001  008006d1  008006d1  000047a6  2**0
                  ALLOC
 80 .bss.rx_buffer_data_len 00000001  008006d2  008006d2  000047a6  2**0
                  ALLOC
 81 .bss.rx_buffer 0000004b  00800634  00800634  000047a6  2**0
                  ALLOC
 82 .bss.tx_buffer_cursor 00000002  008006c3  008006c3  000047a6  2**0
                  ALLOC
 83 .bss.tx_buffer_data_len 00000002  008006c5  008006c5  000047a6  2**0
                  ALLOC
 84 .bss.tx_buffer 0000012c  008004b8  008004b8  000047a6  2**0
                  ALLOC
 85 .text.main    00000016  00004332  00004332  00004406  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.calc_ppm_methane 00000096  000028e0  000028e0  000029b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.ADC_get_value 00000056  00003354  00003354  00003428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.ADC_set_conf_parameters 00000042  00003b4e  00003b4e  00003c22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .data.PPM_factor 00000004  008006af  000046c6  0000479a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 90 .data.RRL     00000004  008006b3  000046ca  0000479e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 91 .data.Vc      00000004  008006b7  000046ce  000047a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 92 .text.EM_has_deveui 00000016  00004348  00004348  0000441c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.EM_has_appeui 00000016  0000435e  0000435e  00004432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.EM_has_appkey 00000016  00004374  00004374  00004448  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.EM_set_deveui 0000003a  00003c84  00003c84  00003d58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.EM_get_deveui 00000030  00003f70  00003f70  00004044  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.EM_set_appeui 0000003a  00003cbe  00003cbe  00003d92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.EM_get_appeui 00000030  00003fa0  00003fa0  00004074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.EM_set_appkey 0000003a  00003cf8  00003cf8  00003dcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.EM_get_appkey 00000030  00003fd0  00003fd0  000040a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.EM_set_ppmfactor 0000000e  0000451a  0000451a  000045ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.EM_get_ppmfactor 0000001e  0000424e  0000424e  00004322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.EM_set_RRL 0000000e  00004528  00004528  000045fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.EM_get_RRL 0000001e  0000426c  0000426c  00004340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.EM_set_Vcc 0000000e  00004536  00004536  0000460a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.EM_get_Vcc 0000001e  0000428a  0000428a  0000435e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.EM_set_collections 0000000e  00004544  00004544  00004618  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.EM_get_collections 00000010  0000449a  0000449a  0000456e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.EM_set_heat_up_time 0000000c  000045b4  000045b4  00004688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.EM_get_heat_up_time 0000000c  000045c0  000045c0  00004694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.EM_set_air_pump_time 0000000c  000045cc  000045cc  000046a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.EM_get_air_pump_time 0000000c  000045d8  000045d8  000046ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.EM_set_sp_interval 0000000c  000045e4  000045e4  000046b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.EM_get_sp_interval 0000000c  000045f0  000045f0  000046c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.LM_reset_module 00000006  000046a4  000046a4  00004778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.LM_forward_msg 00000006  000046aa  000046aa  0000477e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.LM_send_break 00000006  000046b0  000046b0  00004784  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .progmemx.data 00000073  00000590  00000590  00000664  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
119 .text.attach_ending 0000001c  000042e4  000042e4  000043b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.cb_watchdog_counter 0000000c  000045fc  000045fc  000046d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.util_str_begins_with 0000004a  0000384a  0000384a  0000391e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .progmemx.data 00000013  00000603  00000603  000006d7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
123 .text.util_reset_module 00000046  000039b4  000039b4  00003a88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.util_lora_forward_msg 00000078  00002c12  00002c12  00002ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.util_send_break 00000008  0000467e  0000467e  00004752  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .bss.wd_cb_pointer 00000001  008006d3  008006d3  000047a6  2**0
                  ALLOC
127 .bss.wd_cnt   00000001  008006d4  008006d4  000047a6  2**0
                  ALLOC
128 .text.datetime_to_BCD 00000100  00001f62  00001f62  00002036  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.RTC_get_current_time 00000140  0000198a  0000198a  00001a5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.RTC_set_current_time 00000068  00003174  00003174  00003248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .progmemx.data.CMD_READ_TIME_POINTER 00000001  0000062a  0000062a  000006fe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
132 .text.clear_sampling_data 0000004a  00003894  00003894  00003968  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.bytes_2_uint 00000068  000031dc  000031dc  000032b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.init_measurement 00000038  00003d32  00003d32  00003e06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.validate_data 00000032  00003eaa  00003eaa  00003f7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.SCD30_sensor_on 00000026  0000415e  0000415e  00004232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.read_all_values 00000116  00001e4c  00001e4c  00001f20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.SCD30_get_reading 00000032  00003edc  00003edc  00003fb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .bss.si_counter 00000002  008006c7  008006c7  000047a6  2**0
                  ALLOC
140 .bss.highest_si 00000002  008006c9  008006c9  000047a6  2**0
                  ALLOC
141 .bss.lowest_si 00000002  008006cb  008006cb  000047a6  2**0
                  ALLOC
142 .bss.hum_pars 00000006  0080069d  0080069d  000047a6  2**0
                  ALLOC
143 .bss.temp_pars 00000006  008006a3  008006a3  000047a6  2**0
                  ALLOC
144 .bss.co2_pars 00000006  008006a9  008006a9  000047a6  2**0
                  ALLOC
145 .progmemx.data.READ_DATA_CMD 00000002  00000628  00000628  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
146 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  0000061e  0000061e  000006f2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
147 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  00000623  00000623  000006f7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
148 .text.parse_cmd 00000030  00004000  00004000  000040d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.validate_cmd 00000056  000033aa  000033aa  0000347e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .progmemx.data 000000ac  00000463  00000463  00000537  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
151 .text.CONF_enter 0000013c  00001aca  00001aca  00001b9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .progmemx.data 00000081  0000050f  0000050f  000005e3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
153 .text.CON_RN2483_parse 0000006c  0000309e  0000309e  00003172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.CON_RN2483 00000166  00001824  00001824  000018f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.CONNECT 00000054  00003454  00003454  00003528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .progmemx.data 00000188  00000202  00000202  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
157 .text.read_cols 000000bc  000024c2  000024c2  00002596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.read_time 00000092  00002a0c  00002a0c  00002ae0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.write_deveui 00000078  00002c8a  00002c8a  00002d5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.write_appeui 00000078  00002d02  00002d02  00002dd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.write_appkey 00000078  00002d7a  00002d7a  00002e4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.write_PPM_factor 0000004c  000036ce  000036ce  000037a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.write_RRL 0000004c  0000371a  0000371a  000037ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.write_VCC 0000004c  00003766  00003766  0000383a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.get_time_par 00000034  00003e44  00003e44  00003f18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.write_cols 0000012e  00001c06  00001c06  00001cda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.write_heat_up 0000004c  000037b2  000037b2  00003886  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.write_air_pump 00000050  000034fa  000034fa  000035ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.write_sp_interval 0000004c  000037fe  000037fe  000038d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.write_reset 000000e2  00002160  00002160  00002234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.write_time 000000fe  00002062  00002062  00002136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.handle_read 000002a2  0000104c  0000104c  00001120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.handle_write 00000200  000012ee  000012ee  000013c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .bss.arg      00000050  008005e4  008005e4  000047a6  2**0
                  ALLOC
175 .progmemx.data 000000d9  0000038a  0000038a  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
176 .text.handle_methane 00000186  0000169e  0000169e  00001772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.handle_SCD30 00000118  00001d34  00001d34  00001e08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.handle_pump 000000a4  000027a6  000027a6  0000287a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.handle_sensor 000000b8  0000263a  0000263a  0000270e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.init_methane_SCD30 00000028  00004136  00004136  0000420a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .bss.par      00000014  0080067f  0080067f  000047a6  2**0
                  ALLOC
182 .text.count_parameters 00000052  000034a8  000034a8  0000357c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.par_index 00000070  00002f52  00002f52  00003026  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.get_parameter 00000096  00002976  00002976  00002a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.calc_crc8 00000036  00003da2  00003da2  00003e76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.get_decimal 000000b4  000026f2  000026f2  000027c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.str2flaot 0000004e  00003634  00003634  00003708  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.is_float 00000058  000032fc  000032fc  000033d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.avrlibc.fplib 0000000e  00004552  00004552  00004626  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.avrlibc.fplib 000000ce  000023f4  000023f4  000024c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.avrlibc.fplib 0000000a  0000464a  0000464a  0000471e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.avrlibc.fplib 00000008  00004686  00004686  0000475a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.avrlibc.fplib 000000de  00002242  00002242  00002316  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.avrlibc.fplib 0000005e  00003244  00003244  00003318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text.avrlibc.fplib 0000007a  00002b98  00002b98  00002c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.avrlibc.fplib 00000048  00003926  00003926  000039fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.avrlibc.fplib 0000000c  00004608  00004608  000046dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.avrlibc.fplib 00000006  000046b6  000046b6  0000478a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.avrlibc.fplib 0000000e  00004560  00004560  00004634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.avrlibc.fplib 0000000e  0000456e  0000456e  00004642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.avrlibc.fplib 00000022  000041cc  000041cc  000042a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.avrlibc.fplib 00000044  00003a40  00003a40  00003b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.avrlibc.fplib 0000000e  0000457c  0000457c  00004650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.avrlibc.fplib 00000008  0000468e  0000468e  00004762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.avrlibc.fplib 000000d4  00002320  00002320  000023f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .progmemx.data 00000008  00000616  00000616  000006ea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
207 .text.avrlibc 00000744  0000062c  0000062c  00000700  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.libgcc  0000000c  00004614  00004614  000046e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.libgcc.mul 0000001e  000042a8  000042a8  0000437c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.libgcc.prologue 00000038  00003d6a  00003d6a  00003e3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.libgcc.prologue 00000036  00003dd8  00003dd8  00003eac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.avrlibc 00000008  00004696  00004696  0000476a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.avrlibc 0000000e  0000458a  0000458a  0000465e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.avrlibc 000002dc  00000d70  00000d70  00000e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.avrlibc 000001b0  000014ee  000014ee  000015c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.avrlibc 00000012  00004466  00004466  0000453a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.avrlibc 00000032  00003f0e  00003f0e  00003fe2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.avrlibc 0000002e  0000408c  0000408c  00004160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.avrlibc 00000042  00003b90  00003b90  00003c64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.avrlibc 0000006a  0000310a  0000310a  000031de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.avrlibc 0000002c  000040ba  000040ba  0000418e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.avrlibc 0000001e  000042c6  000042c6  0000439a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.avrlibc 00000036  00003e0e  00003e0e  00003ee2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.avrlibc 00000078  00002df2  00002df2  00002ec6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.avrlibc 00000046  000039fa  000039fa  00003ace  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.avrlibc 000000bc  0000257e  0000257e  00002652  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.avrlibc 00000006  000046bc  000046bc  00004790  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.avrlibc 00000024  00004184  00004184  00004258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.avrlibc 00000012  00004478  00004478  0000454c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.avrlibc 0000000e  00004598  00004598  0000466c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.avrlibc 0000000e  000045a6  000045a6  0000467a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.avrlibc 00000044  00003a84  00003a84  00003b58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.avrlibc 00000024  000041a8  000041a8  0000427c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.avrlibc 00000018  0000431a  0000431a  000043ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.avrlibc 0000000c  00004620  00004620  000046f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.libgcc.mul 00000020  0000422e  0000422e  00004302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.libgcc.div 00000044  00003ac8  00003ac8  00003b9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.libgcc.mul 00000016  0000438a  0000438a  0000445e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.libgcc  0000000a  00004654  00004654  00004728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__ctors_end>
   4:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
   8:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
   c:	0c 94 02 22 	jmp	0x4404	; 0x4404 <__vector_3>
  10:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  14:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  18:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  1c:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  20:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  24:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__vector_9>
  28:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  2c:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  30:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  34:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <__vector_13>
  38:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  3c:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  40:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__vector_16>
  44:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  48:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  4c:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  50:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__vector_20>
  54:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  58:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__vector_22>
  5c:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  60:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  64:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  68:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  6c:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  70:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <__vector_28>
  74:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__bad_interrupt>
  78:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__vector_30>
  7c:	80 0d       	add	r24, r0
  7e:	97 0d       	add	r25, r7
  80:	f3 0d       	add	r31, r3
  82:	a0 0d       	add	r26, r0
  84:	fc 0d       	add	r31, r12
  86:	e5 0d       	add	r30, r5
  88:	ec 0d       	add	r30, r12
  8a:	b0 0d       	add	r27, r0
  8c:	bc 0d       	add	r27, r12
  8e:	c8 0d       	add	r28, r8
  90:	d2 0d       	add	r29, r2
  92:	de 0d       	add	r29, r14
  94:	24 0c       	add	r2, r4
  96:	31 0c       	add	r3, r1
  98:	3b 0c       	add	r3, r11
  9a:	41 0c       	add	r4, r1
  9c:	70 0c       	add	r7, r0
  9e:	9b 0c       	add	r9, r11
  a0:	b4 0c       	add	r11, r4

000000a2 <.dinit>:
  a2:	01 00       	.word	0x0001	; ????
  a4:	06 af       	std	Z+62, r16	; 0x3e
  a6:	80 06       	cpc	r8, r16
  a8:	af 06       	cpc	r10, r31
  aa:	bb 00       	.word	0x00bb	; ????
  ac:	46 c6       	rjmp	.+3212   	; 0xd3a <__EEPROM_REGION_LENGTH__+0x53a>
  ae:	06 bb       	out	0x16, r16	; 22
  b0:	06 d5       	rcall	.+2572   	; 0xabe <__EEPROM_REGION_LENGTH__+0x2be>
  b2:	80 00       	.word	0x0080	; ????

000000b4 <__trampolines_end>:
  b4:	00 40       	sbci	r16, 0x00	; 0
  b6:	7a 10       	cpse	r7, r10
  b8:	f3 5a       	subi	r31, 0xA3	; 163
  ba:	00 a0       	ldd	r0, Z+32	; 0x20
  bc:	72 4e       	sbci	r23, 0xE2	; 226
  be:	18 09       	sbc	r17, r8
  c0:	00 10       	cpse	r0, r0
  c2:	a5 d4       	rcall	.+2378   	; 0xa0e <__EEPROM_REGION_LENGTH__+0x20e>
  c4:	e8 00       	.word	0x00e8	; ????
  c6:	00 e8       	ldi	r16, 0x80	; 128
  c8:	76 48       	sbci	r23, 0x86	; 134
  ca:	17 00       	.word	0x0017	; ????
  cc:	00 e4       	ldi	r16, 0x40	; 64
  ce:	0b 54       	subi	r16, 0x4B	; 75
  d0:	02 00       	.word	0x0002	; ????
  d2:	00 ca       	rjmp	.-3072   	; 0xfffff4d4 <__eeprom_end+0xff7ef4d4>
  d4:	9a 3b       	cpi	r25, 0xBA	; 186
  d6:	00 00       	nop
  d8:	00 e1       	ldi	r16, 0x10	; 16
  da:	f5 05       	cpc	r31, r5
  dc:	00 00       	nop
  de:	80 96       	adiw	r24, 0x20	; 32
  e0:	98 00       	.word	0x0098	; ????
  e2:	00 00       	nop
  e4:	40 42       	sbci	r20, 0x20	; 32
  e6:	0f 00       	.word	0x000f	; ????
  e8:	00 00       	nop
  ea:	a0 86       	std	Z+8, r10	; 0x08
  ec:	01 00       	.word	0x0001	; ????
  ee:	00 00       	nop
  f0:	10 27       	eor	r17, r16
  f2:	00 00       	nop
  f4:	00 00       	nop
  f6:	e8 03       	fmulsu	r22, r16
  f8:	00 00       	nop
  fa:	00 00       	nop
  fc:	64 00       	.word	0x0064	; ????
  fe:	00 00       	nop
 100:	00 00       	nop
 102:	0a 00       	.word	0x000a	; ????
 104:	00 00       	nop
 106:	00 00       	nop
 108:	01 00       	.word	0x0001	; ????
 10a:	00 00       	nop
 10c:	00 00       	nop
 10e:	2c 76       	andi	r18, 0x6C	; 108
 110:	d8 88       	ldd	r13, Y+16	; 0x10
 112:	dc 67       	ori	r29, 0x7C	; 124
 114:	4f 08       	sbc	r4, r15
 116:	23 df       	rcall	.-442    	; 0xffffff5e <__eeprom_end+0xff7eff5e>
 118:	c1 df       	rcall	.-126    	; 0x9c <__SREG__+0x5d>
 11a:	ae 59       	subi	r26, 0x9E	; 158
 11c:	e1 b1       	in	r30, 0x01	; 1
 11e:	b7 96       	adiw	r30, 0x27	; 39
 120:	e5 e3       	ldi	r30, 0x35	; 53
 122:	e4 53       	subi	r30, 0x34	; 52
 124:	c6 3a       	cpi	r28, 0xA6	; 166
 126:	e6 51       	subi	r30, 0x16	; 22
 128:	99 76       	andi	r25, 0x69	; 105
 12a:	96 e8       	ldi	r25, 0x86	; 134
 12c:	e6 c2       	rjmp	.+1484   	; 0x6fa <vfprintf+0xce>
 12e:	84 26       	eor	r8, r20
 130:	eb 89       	ldd	r30, Y+19	; 0x13
 132:	8c 9b       	sbis	0x11, 4	; 17
 134:	62 ed       	ldi	r22, 0xD2	; 210
 136:	40 7c       	andi	r20, 0xC0	; 192
 138:	6f fc       	.word	0xfc6f	; ????
 13a:	ef bc       	out	0x2f, r14	; 47
 13c:	9c 9f       	mul	r25, r28
 13e:	40 f2       	brcs	.-112    	; 0xd0 <__trampolines_end+0x1c>
 140:	ba a5       	ldd	r27, Y+42	; 0x2a
 142:	6f a5       	ldd	r22, Y+47	; 0x2f
 144:	f4 90       	lpm	r15, Z
 146:	05 5a       	subi	r16, 0xA5	; 165
 148:	2a f7       	brpl	.-54     	; 0x114 <__trampolines_end+0x60>
 14a:	5c 93       	st	X, r21
 14c:	6b 6c       	ori	r22, 0xCB	; 203
 14e:	f9 67       	ori	r31, 0x79	; 121
 150:	6d c1       	rjmp	.+730    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 152:	1b fc       	.word	0xfc1b	; ????
 154:	e0 e4       	ldi	r30, 0x40	; 64
 156:	0d 47       	sbci	r16, 0x7D	; 125
 158:	fe f5       	brtc	.+126    	; 0x1d8 <__do_copy_data+0x1e>
 15a:	20 e6       	ldi	r18, 0x60	; 96
 15c:	b5 00       	.word	0x00b5	; ????
 15e:	d0 ed       	ldi	r29, 0xD0	; 208
 160:	90 2e       	mov	r9, r16
 162:	03 00       	.word	0x0003	; ????
 164:	94 35       	cpi	r25, 0x54	; 84
 166:	77 05       	cpc	r23, r7
 168:	00 80       	ld	r0, Z
 16a:	84 1e       	adc	r8, r20
 16c:	08 00       	.word	0x0008	; ????
 16e:	00 20       	and	r0, r0
 170:	4e 0a       	sbc	r4, r30
 172:	00 00       	nop
 174:	00 c8       	rjmp	.-4096   	; 0xfffff176 <__eeprom_end+0xff7ef176>
 176:	0c 33       	cpi	r16, 0x3C	; 60
 178:	33 33       	cpi	r19, 0x33	; 51
 17a:	33 0f       	add	r19, r19
 17c:	98 6e       	ori	r25, 0xE8	; 232
 17e:	12 83       	std	Z+2, r17	; 0x02
 180:	11 41       	sbci	r17, 0x11	; 17
 182:	ef 8d       	ldd	r30, Y+31	; 0x1f
 184:	21 14       	cp	r2, r1
 186:	89 3b       	cpi	r24, 0xB9	; 185
 188:	e6 55       	subi	r30, 0x56	; 86
 18a:	16 cf       	rjmp	.-468    	; 0xffffffb8 <__eeprom_end+0xff7effb8>
 18c:	fe e6       	ldi	r31, 0x6E	; 110
 18e:	db 18       	sub	r13, r11
 190:	d1 84       	ldd	r13, Z+9	; 0x09
 192:	4b 38       	cpi	r20, 0x8B	; 139
 194:	1b f7       	brvc	.-58     	; 0x15c <__trampolines_end+0xa8>
 196:	7c 1d       	adc	r23, r12
 198:	90 1d       	adc	r25, r0
 19a:	a4 bb       	out	0x14, r26	; 20
 19c:	e4 24       	eor	r14, r4
 19e:	20 32       	cpi	r18, 0x20	; 32
 1a0:	84 72       	andi	r24, 0x24	; 36
 1a2:	5e 22       	and	r5, r30
 1a4:	81 00       	.word	0x0081	; ????
 1a6:	c9 f1       	breq	.+114    	; 0x21a <_etext+0x18>
 1a8:	24 ec       	ldi	r18, 0xC4	; 196
 1aa:	a1 e5       	ldi	r26, 0x51	; 81
 1ac:	3d 27       	eor	r19, r29

000001ae <__ctors_end>:
 1ae:	11 24       	eor	r1, r1
 1b0:	1f be       	out	0x3f, r1	; 63
 1b2:	cf ef       	ldi	r28, 0xFF	; 255
 1b4:	d0 e1       	ldi	r29, 0x10	; 16
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	cd bf       	out	0x3d, r28	; 61

000001ba <__do_copy_data>:
 1ba:	e2 ea       	ldi	r30, 0xA2	; 162
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <__do_clear_bss+0x8>
 1c2:	b5 91       	lpm	r27, Z+
 1c4:	a5 91       	lpm	r26, Z+
 1c6:	35 91       	lpm	r19, Z+
 1c8:	25 91       	lpm	r18, Z+
 1ca:	05 91       	lpm	r16, Z+
 1cc:	07 fd       	sbrc	r16, 7
 1ce:	0c c0       	rjmp	.+24     	; 0x1e8 <__do_clear_bss>
 1d0:	95 91       	lpm	r25, Z+
 1d2:	85 91       	lpm	r24, Z+
 1d4:	ef 01       	movw	r28, r30
 1d6:	f9 2f       	mov	r31, r25
 1d8:	e8 2f       	mov	r30, r24
 1da:	05 90       	lpm	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	a2 17       	cp	r26, r18
 1e0:	b3 07       	cpc	r27, r19
 1e2:	d9 f7       	brne	.-10     	; 0x1da <__do_copy_data+0x20>
 1e4:	fe 01       	movw	r30, r28
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <__do_clear_bss+0x8>

000001e8 <__do_clear_bss>:
 1e8:	1d 92       	st	X+, r1
 1ea:	a2 17       	cp	r26, r18
 1ec:	b3 07       	cpc	r27, r19
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <__do_clear_bss>
 1f0:	e3 3b       	cpi	r30, 0xB3	; 179
 1f2:	f4 07       	cpc	r31, r20
 1f4:	31 f7       	brne	.-52     	; 0x1c2 <__do_copy_data+0x8>
 1f6:	0e 94 99 21 	call	0x4332	; 0x4332 <main>
 1fa:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>

Disassembly of section .text:

000046c2 <__bad_interrupt>:
    46c2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

000044aa <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    44aa:	81 b1       	in	r24, 0x01	; 1
    44ac:	88 60       	ori	r24, 0x08	; 8
    44ae:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    44b0:	82 b1       	in	r24, 0x02	; 2
    44b2:	87 7f       	andi	r24, 0xF7	; 247
    44b4:	82 b9       	out	0x02, r24	; 2
    44b6:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

000043a0 <PM_HAL_adc_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    43a0:	88 23       	and	r24, r24
    43a2:	21 f0       	breq	.+8      	; 0x43ac <PM_HAL_adc_power+0xc>
    43a4:	82 b1       	in	r24, 0x02	; 2
    43a6:	88 60       	ori	r24, 0x08	; 8
    43a8:	82 b9       	out	0x02, r24	; 2
    43aa:	08 95       	ret
    43ac:	82 b1       	in	r24, 0x02	; 2
    43ae:	87 7f       	andi	r24, 0xF7	; 247
    43b0:	82 b9       	out	0x02, r24	; 2
    43b2:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

000044b8 <PM_HAL_meth_power_init>:
		clear_bit(PORTA, 3);
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    44b8:	81 b1       	in	r24, 0x01	; 1
    44ba:	80 62       	ori	r24, 0x20	; 32
    44bc:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    44be:	82 b1       	in	r24, 0x02	; 2
    44c0:	8f 7d       	andi	r24, 0xDF	; 223
    44c2:	82 b9       	out	0x02, r24	; 2
    44c4:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

000043b4 <PM_HAL_meth_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    43b4:	88 23       	and	r24, r24
    43b6:	21 f0       	breq	.+8      	; 0x43c0 <PM_HAL_meth_power+0xc>
    43b8:	82 b1       	in	r24, 0x02	; 2
    43ba:	80 62       	ori	r24, 0x20	; 32
    43bc:	82 b9       	out	0x02, r24	; 2
    43be:	08 95       	ret
    43c0:	82 b1       	in	r24, 0x02	; 2
    43c2:	8f 7d       	andi	r24, 0xDF	; 223
    43c4:	82 b9       	out	0x02, r24	; 2
    43c6:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

000044c6 <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    44c6:	81 b1       	in	r24, 0x01	; 1
    44c8:	80 61       	ori	r24, 0x10	; 16
    44ca:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    44cc:	82 b1       	in	r24, 0x02	; 2
    44ce:	8f 7e       	andi	r24, 0xEF	; 239
    44d0:	82 b9       	out	0x02, r24	; 2
    44d2:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

000043c8 <PM_HAL_SCD30_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    43c8:	88 23       	and	r24, r24
    43ca:	21 f0       	breq	.+8      	; 0x43d4 <PM_HAL_SCD30_power+0xc>
    43cc:	82 b1       	in	r24, 0x02	; 2
    43ce:	80 61       	ori	r24, 0x10	; 16
    43d0:	82 b9       	out	0x02, r24	; 2
    43d2:	08 95       	ret
    43d4:	82 b1       	in	r24, 0x02	; 2
    43d6:	8f 7e       	andi	r24, 0xEF	; 239
    43d8:	82 b9       	out	0x02, r24	; 2
    43da:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

000044d4 <PM_HAL_BC_power_init>:
		clear_bit(PORTA, 4);
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    44d4:	8a b1       	in	r24, 0x0a	; 10
    44d6:	80 61       	ori	r24, 0x10	; 16
    44d8:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    44da:	8b b1       	in	r24, 0x0b	; 11
    44dc:	8f 7e       	andi	r24, 0xEF	; 239
    44de:	8b b9       	out	0x0b, r24	; 11
    44e0:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

000043dc <PM_HAL_BC_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    43dc:	88 23       	and	r24, r24
    43de:	21 f0       	breq	.+8      	; 0x43e8 <PM_HAL_BC_power+0xc>
    43e0:	8b b1       	in	r24, 0x0b	; 11
    43e2:	80 61       	ori	r24, 0x10	; 16
    43e4:	8b b9       	out	0x0b, r24	; 11
    43e6:	08 95       	ret
    43e8:	8b b1       	in	r24, 0x0b	; 11
    43ea:	8f 7e       	andi	r24, 0xEF	; 239
    43ec:	8b b9       	out	0x0b, r24	; 11
    43ee:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

000043f0 <PM_HAL_LED_power>:
    43f0:	88 23       	and	r24, r24
    43f2:	21 f0       	breq	.+8      	; 0x43fc <PM_HAL_LED_power+0xc>
    43f4:	82 b1       	in	r24, 0x02	; 2
    43f6:	80 68       	ori	r24, 0x80	; 128
    43f8:	82 b9       	out	0x02, r24	; 2
    43fa:	08 95       	ret
    43fc:	82 b1       	in	r24, 0x02	; 2
    43fe:	8f 77       	andi	r24, 0x7F	; 127
    4400:	82 b9       	out	0x02, r24	; 2
    4402:	08 95       	ret

Disassembly of section .text.__vector_3:

00004404 <__vector_3>:
}

ISR(INT2_vect){
    4404:	1f 92       	push	r1
    4406:	0f 92       	push	r0
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	0f 92       	push	r0
    440c:	11 24       	eor	r1, r1
	
}
    440e:	0f 90       	pop	r0
    4410:	0f be       	out	0x3f, r0	; 63
    4412:	0f 90       	pop	r0
    4414:	1f 90       	pop	r1
    4416:	18 95       	reti

Disassembly of section .text.rn2483_init:

0000465e <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    465e:	84 b1       	in	r24, 0x04	; 4
    4660:	80 61       	ori	r24, 0x10	; 16
    4662:	84 b9       	out	0x04, r24	; 4
    4664:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00004666 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    4666:	85 b1       	in	r24, 0x05	; 5
    4668:	8f 7e       	andi	r24, 0xEF	; 239
    466a:	85 b9       	out	0x05, r24	; 5
    466c:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

0000466e <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    466e:	85 b1       	in	r24, 0x05	; 5
    4670:	80 61       	ori	r24, 0x10	; 16
    4672:	85 b9       	out	0x05, r24	; 5
    4674:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

000044e2 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    44e2:	87 b1       	in	r24, 0x07	; 7
    44e4:	8f 7b       	andi	r24, 0xBF	; 191
    44e6:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    44e8:	88 b1       	in	r24, 0x08	; 8
    44ea:	8f 7b       	andi	r24, 0xBF	; 191
    44ec:	88 b9       	out	0x08, r24	; 8
    44ee:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

0000462c <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    462c:	86 b1       	in	r24, 0x06	; 6
    462e:	86 fb       	bst	r24, 6
    4630:	88 27       	eor	r24, r24
    4632:	80 f9       	bld	r24, 0
    4634:	08 95       	ret

Disassembly of section .text.__vector_16:

0000354a <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    354a:	1f 92       	push	r1
    354c:	0f 92       	push	r0
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	0f 92       	push	r0
    3552:	11 24       	eor	r1, r1
    3554:	2f 93       	push	r18
    3556:	3f 93       	push	r19
    3558:	4f 93       	push	r20
    355a:	5f 93       	push	r21
    355c:	6f 93       	push	r22
    355e:	7f 93       	push	r23
    3560:	8f 93       	push	r24
    3562:	9f 93       	push	r25
    3564:	af 93       	push	r26
    3566:	bf 93       	push	r27
    3568:	ef 93       	push	r30
    356a:	ff 93       	push	r31
	_cb();
    356c:	e0 91 bb 06 	lds	r30, 0x06BB	; 0x8006bb <_cb>
    3570:	f0 91 bc 06 	lds	r31, 0x06BC	; 0x8006bc <_cb+0x1>
    3574:	09 95       	icall
}
    3576:	ff 91       	pop	r31
    3578:	ef 91       	pop	r30
    357a:	bf 91       	pop	r27
    357c:	af 91       	pop	r26
    357e:	9f 91       	pop	r25
    3580:	8f 91       	pop	r24
    3582:	7f 91       	pop	r23
    3584:	6f 91       	pop	r22
    3586:	5f 91       	pop	r21
    3588:	4f 91       	pop	r20
    358a:	3f 91       	pop	r19
    358c:	2f 91       	pop	r18
    358e:	0f 90       	pop	r0
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	0f 90       	pop	r0
    3594:	1f 90       	pop	r1
    3596:	18 95       	reti

Disassembly of section .text.__vector_13:

00003598 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    3598:	1f 92       	push	r1
    359a:	0f 92       	push	r0
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	0f 92       	push	r0
    35a0:	11 24       	eor	r1, r1
    35a2:	2f 93       	push	r18
    35a4:	3f 93       	push	r19
    35a6:	4f 93       	push	r20
    35a8:	5f 93       	push	r21
    35aa:	6f 93       	push	r22
    35ac:	7f 93       	push	r23
    35ae:	8f 93       	push	r24
    35b0:	9f 93       	push	r25
    35b2:	af 93       	push	r26
    35b4:	bf 93       	push	r27
    35b6:	ef 93       	push	r30
    35b8:	ff 93       	push	r31
	_cb();
    35ba:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <_cb>
    35be:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <_cb+0x1>
    35c2:	09 95       	icall
    35c4:	ff 91       	pop	r31
    35c6:	ef 91       	pop	r30
    35c8:	bf 91       	pop	r27
    35ca:	af 91       	pop	r26
    35cc:	9f 91       	pop	r25
    35ce:	8f 91       	pop	r24
    35d0:	7f 91       	pop	r23
    35d2:	6f 91       	pop	r22
    35d4:	5f 91       	pop	r21
    35d6:	4f 91       	pop	r20
    35d8:	3f 91       	pop	r19
    35da:	2f 91       	pop	r18
    35dc:	0f 90       	pop	r0
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	0f 90       	pop	r0
    35e2:	1f 90       	pop	r1
    35e4:	18 95       	reti

Disassembly of section .text.start_timer:

00004676 <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    4676:	87 e0       	ldi	r24, 0x07	; 7
    4678:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    467c:	08 95       	ret

Disassembly of section .text.stop_timer:

0000469e <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    469e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    46a2:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

000041ee <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    41f4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    41f8:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    41fc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    4200:	93 ef       	ldi	r25, 0xF3	; 243
    4202:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    4206:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    420a:	78 94       	sei
    420c:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00003400 <TC2_HAL_subscribe>:
    3400:	cf 93       	push	r28
    3402:	dc 01       	movw	r26, r24
    3404:	60 91 ce 06 	lds	r22, 0x06CE	; 0x8006ce <cbCounter>
    3408:	65 30       	cpi	r22, 0x05	; 5
    340a:	00 f5       	brcc	.+64     	; 0x344c <TC2_HAL_subscribe+0x4c>
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	15 c0       	rjmp	.+42     	; 0x343a <TC2_HAL_subscribe+0x3a>
    3410:	29 2f       	mov	r18, r25
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	f9 01       	movw	r30, r18
    3416:	ee 0f       	add	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	ed 56       	subi	r30, 0x6D	; 109
    341c:	f9 4f       	sbci	r31, 0xF9	; 249
    341e:	40 81       	ld	r20, Z
    3420:	51 81       	ldd	r21, Z+1	; 0x01
    3422:	45 2b       	or	r20, r21
    3424:	49 f4       	brne	.+18     	; 0x3438 <TC2_HAL_subscribe+0x38>
    3426:	22 0f       	add	r18, r18
    3428:	33 1f       	adc	r19, r19
    342a:	f9 01       	movw	r30, r18
    342c:	ed 56       	subi	r30, 0x6D	; 109
    342e:	f9 4f       	sbci	r31, 0xF9	; 249
    3430:	b1 83       	std	Z+1, r27	; 0x01
    3432:	a0 83       	st	Z, r26
    3434:	c9 2f       	mov	r28, r25
    3436:	04 c0       	rjmp	.+8      	; 0x3440 <TC2_HAL_subscribe+0x40>
    3438:	9f 5f       	subi	r25, 0xFF	; 255
    343a:	95 30       	cpi	r25, 0x05	; 5
    343c:	48 f3       	brcs	.-46     	; 0x3410 <TC2_HAL_subscribe+0x10>
    343e:	cf ef       	ldi	r28, 0xFF	; 255
    3440:	6f 5f       	subi	r22, 0xFF	; 255
    3442:	60 93 ce 06 	sts	0x06CE, r22	; 0x8006ce <cbCounter>
    3446:	0e 94 3b 23 	call	0x4676	; 0x4676 <start_timer>
    344a:	01 c0       	rjmp	.+2      	; 0x344e <TC2_HAL_subscribe+0x4e>
    344c:	cf ef       	ldi	r28, 0xFF	; 255
    344e:	8c 2f       	mov	r24, r28
    3450:	cf 91       	pop	r28
    3452:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00003c4a <TC2_HAL_cancel>:
    3c4a:	08 2e       	mov	r0, r24
    3c4c:	00 0c       	add	r0, r0
    3c4e:	99 0b       	sbc	r25, r25
    3c50:	fc 01       	movw	r30, r24
    3c52:	ee 0f       	add	r30, r30
    3c54:	ff 1f       	adc	r31, r31
    3c56:	ed 56       	subi	r30, 0x6D	; 109
    3c58:	f9 4f       	sbci	r31, 0xF9	; 249
    3c5a:	20 81       	ld	r18, Z
    3c5c:	31 81       	ldd	r19, Z+1	; 0x01
    3c5e:	23 2b       	or	r18, r19
    3c60:	81 f0       	breq	.+32     	; 0x3c82 <TC2_HAL_cancel+0x38>
    3c62:	88 0f       	add	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	fc 01       	movw	r30, r24
    3c68:	ed 56       	subi	r30, 0x6D	; 109
    3c6a:	f9 4f       	sbci	r31, 0xF9	; 249
    3c6c:	11 82       	std	Z+1, r1	; 0x01
    3c6e:	10 82       	st	Z, r1
    3c70:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <cbCounter>
    3c74:	81 50       	subi	r24, 0x01	; 1
    3c76:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <cbCounter>
    3c7a:	81 11       	cpse	r24, r1
    3c7c:	02 c0       	rjmp	.+4      	; 0x3c82 <TC2_HAL_cancel+0x38>
    3c7e:	0e 94 4f 23 	call	0x469e	; 0x469e <stop_timer>
    3c82:	08 95       	ret

Disassembly of section .text.__vector_9:

00002b1c <__vector_9>:
    2b1c:	1f 92       	push	r1
    2b1e:	0f 92       	push	r0
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	0f 92       	push	r0
    2b24:	11 24       	eor	r1, r1
    2b26:	2f 93       	push	r18
    2b28:	3f 93       	push	r19
    2b2a:	4f 93       	push	r20
    2b2c:	5f 93       	push	r21
    2b2e:	6f 93       	push	r22
    2b30:	7f 93       	push	r23
    2b32:	8f 93       	push	r24
    2b34:	9f 93       	push	r25
    2b36:	af 93       	push	r26
    2b38:	bf 93       	push	r27
    2b3a:	cf 93       	push	r28
    2b3c:	ef 93       	push	r30
    2b3e:	ff 93       	push	r31
    2b40:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <cnt>
    2b44:	8f 5f       	subi	r24, 0xFF	; 255
    2b46:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <cnt>
    2b4a:	80 32       	cpi	r24, 0x20	; 32
    2b4c:	99 f4       	brne	.+38     	; 0x2b74 <__vector_9+0x58>
    2b4e:	10 92 cd 06 	sts	0x06CD, r1	; 0x8006cd <cnt>
    2b52:	c0 e0       	ldi	r28, 0x00	; 0
    2b54:	0d c0       	rjmp	.+26     	; 0x2b70 <__vector_9+0x54>
    2b56:	ec 2f       	mov	r30, r28
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	ee 0f       	add	r30, r30
    2b5c:	ff 1f       	adc	r31, r31
    2b5e:	ed 56       	subi	r30, 0x6D	; 109
    2b60:	f9 4f       	sbci	r31, 0xF9	; 249
    2b62:	01 90       	ld	r0, Z+
    2b64:	f0 81       	ld	r31, Z
    2b66:	e0 2d       	mov	r30, r0
    2b68:	30 97       	sbiw	r30, 0x00	; 0
    2b6a:	09 f0       	breq	.+2      	; 0x2b6e <__vector_9+0x52>
    2b6c:	09 95       	icall
    2b6e:	cf 5f       	subi	r28, 0xFF	; 255
    2b70:	c5 30       	cpi	r28, 0x05	; 5
    2b72:	88 f3       	brcs	.-30     	; 0x2b56 <__vector_9+0x3a>
    2b74:	ff 91       	pop	r31
    2b76:	ef 91       	pop	r30
    2b78:	cf 91       	pop	r28
    2b7a:	bf 91       	pop	r27
    2b7c:	af 91       	pop	r26
    2b7e:	9f 91       	pop	r25
    2b80:	8f 91       	pop	r24
    2b82:	7f 91       	pop	r23
    2b84:	6f 91       	pop	r22
    2b86:	5f 91       	pop	r21
    2b88:	4f 91       	pop	r20
    2b8a:	3f 91       	pop	r19
    2b8c:	2f 91       	pop	r18
    2b8e:	0f 90       	pop	r0
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	0f 90       	pop	r0
    2b94:	1f 90       	pop	r1
    2b96:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00003682 <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3682:	cf 92       	push	r12
    3684:	df 92       	push	r13
    3686:	ef 92       	push	r14
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	6a 01       	movw	r12, r20
    368e:	e6 2e       	mov	r14, r22
    3690:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    3692:	60 e0       	ldi	r22, 0x00	; 0
    3694:	0e 94 6f 1c 	call	0x38de	; 0x38de <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3698:	81 11       	cpse	r24, r1
    369a:	13 c0       	rjmp	.+38     	; 0x36c2 <start_and_write_data+0x40>
    369c:	c0 e0       	ldi	r28, 0x00	; 0
    369e:	0e c0       	rjmp	.+28     	; 0x36bc <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    36a0:	ae 2d       	mov	r26, r14
    36a2:	c6 01       	movw	r24, r12
    36a4:	8c 0f       	add	r24, r28
    36a6:	91 1d       	adc	r25, r1
    36a8:	a1 1d       	adc	r26, r1
    36aa:	fc 01       	movw	r30, r24
    36ac:	84 91       	lpm	r24, Z
    36ae:	a7 fd       	sbrc	r26, 7
    36b0:	80 81       	ld	r24, Z
    36b2:	0e 94 07 21 	call	0x420e	; 0x420e <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    36b6:	81 11       	cpse	r24, r1
    36b8:	04 c0       	rjmp	.+8      	; 0x36c2 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    36ba:	cf 5f       	subi	r28, 0xFF	; 255
    36bc:	cd 17       	cp	r28, r29
    36be:	80 f3       	brcs	.-32     	; 0x36a0 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    36c0:	80 e0       	ldi	r24, 0x00	; 0
}
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	ef 90       	pop	r14
    36c8:	df 90       	pop	r13
    36ca:	cf 90       	pop	r12
    36cc:	08 95       	ret

Disassembly of section .text.read_and_stop:

000032a2 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    32a2:	ef 92       	push	r14
    32a4:	ff 92       	push	r15
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	8c 01       	movw	r16, r24
    32b0:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    32b2:	c0 e0       	ldi	r28, 0x00	; 0
    32b4:	08 c0       	rjmp	.+16     	; 0x32c6 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    32b6:	78 01       	movw	r14, r16
    32b8:	ec 0e       	add	r14, r28
    32ba:	f1 1c       	adc	r15, r1
    32bc:	0e 94 16 22 	call	0x442c	; 0x442c <TWI_HAL_read_byte_ack>
    32c0:	f7 01       	movw	r30, r14
    32c2:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    32c4:	cf 5f       	subi	r28, 0xFF	; 255
    32c6:	2c 2f       	mov	r18, r28
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	8d 2f       	mov	r24, r29
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	28 17       	cp	r18, r24
    32d2:	39 07       	cpc	r19, r25
    32d4:	84 f3       	brlt	.-32     	; 0x32b6 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    32d6:	8d 2f       	mov	r24, r29
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	e8 01       	movw	r28, r16
    32de:	c8 0f       	add	r28, r24
    32e0:	d9 1f       	adc	r29, r25
    32e2:	0e 94 20 22 	call	0x4440	; 0x4440 <TWI_HAL_read_byte_nack>
    32e6:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    32e8:	0e 94 45 22 	call	0x448a	; 0x448a <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	ff 90       	pop	r15
    32f8:	ef 90       	pop	r14
    32fa:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00004418 <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    4418:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    441a:	0e 94 41 1b 	call	0x3682	; 0x3682 <start_and_write_data>
    441e:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    4420:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    4422:	0e 94 45 22 	call	0x448a	; 0x448a <TWI_HAL_stop>
	}
	return status;
}
    4426:	8c 2f       	mov	r24, r28
    4428:	cf 91       	pop	r28
    442a:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00004300 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    4300:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    4302:	0e 94 41 1b 	call	0x3682	; 0x3682 <start_and_write_data>
    4306:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    4308:	0e 94 45 22 	call	0x448a	; 0x448a <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    430c:	c1 11       	cpse	r28, r1
    430e:	02 c0       	rjmp	.+4      	; 0x4314 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	01 c0       	rjmp	.+2      	; 0x4316 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    4314:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    4316:	cf 91       	pop	r28
    4318:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00003e78 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3e78:	0f 93       	push	r16
    3e7a:	1f 93       	push	r17
    3e7c:	cf 93       	push	r28
    3e7e:	df 93       	push	r29
    3e80:	8b 01       	movw	r16, r22
    3e82:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    3e84:	61 e0       	ldi	r22, 0x01	; 1
    3e86:	0e 94 6f 1c 	call	0x38de	; 0x38de <TWI_HAL_start>
    3e8a:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3e8c:	88 23       	and	r24, r24
    3e8e:	21 f0       	breq	.+8      	; 0x3e98 <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    3e90:	0e 94 45 22 	call	0x448a	; 0x448a <TWI_HAL_stop>
		return status;	
    3e94:	8c 2f       	mov	r24, r28
    3e96:	04 c0       	rjmp	.+8      	; 0x3ea0 <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    3e98:	6d 2f       	mov	r22, r29
    3e9a:	c8 01       	movw	r24, r16
    3e9c:	0e 94 51 19 	call	0x32a2	; 0x32a2 <read_and_stop>
	
}
    3ea0:	df 91       	pop	r29
    3ea2:	cf 91       	pop	r28
    3ea4:	1f 91       	pop	r17
    3ea6:	0f 91       	pop	r16
    3ea8:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00003f40 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3f40:	0f 93       	push	r16
    3f42:	1f 93       	push	r17
    3f44:	cf 93       	push	r28
    3f46:	df 93       	push	r29
    3f48:	8b 01       	movw	r16, r22
    3f4a:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    3f4c:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <TWI_HAL_repeated_start>
    3f50:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3f52:	88 23       	and	r24, r24
    3f54:	21 f0       	breq	.+8      	; 0x3f5e <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    3f56:	0e 94 45 22 	call	0x448a	; 0x448a <TWI_HAL_stop>
		return status;
    3f5a:	8c 2f       	mov	r24, r28
    3f5c:	04 c0       	rjmp	.+8      	; 0x3f66 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    3f5e:	6d 2f       	mov	r22, r29
    3f60:	c8 01       	movw	r24, r16
    3f62:	0e 94 51 19 	call	0x32a2	; 0x32a2 <read_and_stop>
	
}
    3f66:	df 91       	pop	r29
    3f68:	cf 91       	pop	r28
    3f6a:	1f 91       	pop	r17
    3f6c:	0f 91       	pop	r16
    3f6e:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00004454 <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    4454:	80 e2       	ldi	r24, 0x20	; 32
    4456:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    445a:	e9 eb       	ldi	r30, 0xB9	; 185
    445c:	f0 e0       	ldi	r31, 0x00	; 0
    445e:	80 81       	ld	r24, Z
    4460:	8c 7f       	andi	r24, 0xFC	; 252
    4462:	80 83       	st	Z, r24
    4464:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

000038de <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	88 0f       	add	r24, r24
    38e2:	99 1f       	adc	r25, r25
    38e4:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    38e6:	84 ea       	ldi	r24, 0xA4	; 164
    38e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    38ec:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    38f0:	99 23       	and	r25, r25
    38f2:	e4 f7       	brge	.-8      	; 0x38ec <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    38f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    38f8:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    38fa:	88 30       	cpi	r24, 0x08	; 8
    38fc:	99 f4       	brne	.+38     	; 0x3924 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    38fe:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    3902:	84 e8       	ldi	r24, 0x84	; 132
    3904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3908:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    390c:	88 23       	and	r24, r24
    390e:	e4 f7       	brge	.-8      	; 0x3908 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    3910:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3914:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3916:	88 31       	cpi	r24, 0x18	; 24
    3918:	21 f0       	breq	.+8      	; 0x3922 <TWI_HAL_start+0x44>
    391a:	80 34       	cpi	r24, 0x40	; 64
    391c:	19 f4       	brne	.+6      	; 0x3924 <TWI_HAL_start+0x46>
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	08 95       	ret
    3922:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3924:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00003b0c <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	88 0f       	add	r24, r24
    3b10:	99 1f       	adc	r25, r25
    3b12:	28 2f       	mov	r18, r24
    3b14:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    3b16:	84 ea       	ldi	r24, 0xA4	; 164
    3b18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3b1c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3b20:	99 23       	and	r25, r25
    3b22:	e4 f7       	brge	.-8      	; 0x3b1c <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    3b24:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3b28:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    3b2a:	80 31       	cpi	r24, 0x10	; 16
    3b2c:	79 f4       	brne	.+30     	; 0x3b4c <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    3b2e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    3b32:	84 e8       	ldi	r24, 0x84	; 132
    3b34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3b38:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3b3c:	88 23       	and	r24, r24
    3b3e:	e4 f7       	brge	.-8      	; 0x3b38 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    3b40:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3b44:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    3b46:	80 34       	cpi	r24, 0x40	; 64
    3b48:	09 f4       	brne	.+2      	; 0x3b4c <TWI_HAL_repeated_start+0x40>
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3b4c:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

0000420e <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    420e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    4212:	84 e8       	ldi	r24, 0x84	; 132
    4214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    4218:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    421c:	88 23       	and	r24, r24
    421e:	e4 f7       	brge	.-8      	; 0x4218 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    4220:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    4224:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    4226:	88 32       	cpi	r24, 0x28	; 40
    4228:	09 f4       	brne	.+2      	; 0x422c <TWI_HAL_write_byte+0x1e>
    422a:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    422c:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

0000442c <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    442c:	84 ec       	ldi	r24, 0xC4	; 196
    442e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    4432:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    4436:	88 23       	and	r24, r24
    4438:	e4 f7       	brge	.-8      	; 0x4432 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    443a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    443e:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00004440 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    4440:	84 e8       	ldi	r24, 0x84	; 132
    4442:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    4446:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    444a:	88 23       	and	r24, r24
    444c:	e4 f7       	brge	.-8      	; 0x4446 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    444e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    4452:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

0000448a <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    448a:	84 e9       	ldi	r24, 0x94	; 148
    448c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    4490:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    4494:	84 fd       	sbrc	r24, 4
    4496:	fc cf       	rjmp	.-8      	; 0x4490 <TWI_HAL_stop+0x6>
}
    4498:	08 95       	ret

Disassembly of section .text.copy_buffer:

00004030 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    4030:	bc 01       	movw	r22, r24
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	09 c0       	rjmp	.+18     	; 0x4048 <copy_buffer+0x18>
    4036:	fb 01       	movw	r30, r22
    4038:	e9 0f       	add	r30, r25
    403a:	f1 1d       	adc	r31, r1
    403c:	da 01       	movw	r26, r20
    403e:	a0 50       	subi	r26, 0x00	; 0
    4040:	bf 4f       	sbci	r27, 0xFF	; 255
    4042:	2c 91       	ld	r18, X
    4044:	20 83       	st	Z, r18
    4046:	9f 5f       	subi	r25, 0xFF	; 255
    4048:	49 2f       	mov	r20, r25
    404a:	50 e0       	ldi	r21, 0x00	; 0
    404c:	20 91 d0 06 	lds	r18, 0x06D0	; 0x8006d0 <rx_buffer_data_len>
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	22 50       	subi	r18, 0x02	; 2
    4054:	31 09       	sbc	r19, r1
    4056:	42 17       	cp	r20, r18
    4058:	53 07       	cpc	r21, r19
    405a:	6c f3       	brlt	.-38     	; 0x4036 <copy_buffer+0x6>
    405c:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00003bd2 <uart0_hal_init>:
    3bd2:	e1 ec       	ldi	r30, 0xC1	; 193
    3bd4:	f0 e0       	ldi	r31, 0x00	; 0
    3bd6:	80 81       	ld	r24, Z
    3bd8:	80 61       	ori	r24, 0x10	; 16
    3bda:	80 83       	st	Z, r24
    3bdc:	80 81       	ld	r24, Z
    3bde:	88 60       	ori	r24, 0x08	; 8
    3be0:	80 83       	st	Z, r24
    3be2:	80 81       	ld	r24, Z
    3be4:	80 68       	ori	r24, 0x80	; 128
    3be6:	80 83       	st	Z, r24
    3be8:	80 81       	ld	r24, Z
    3bea:	80 64       	ori	r24, 0x40	; 64
    3bec:	80 83       	st	Z, r24
    3bee:	e0 ec       	ldi	r30, 0xC0	; 192
    3bf0:	f0 e0       	ldi	r31, 0x00	; 0
    3bf2:	80 81       	ld	r24, Z
    3bf4:	82 60       	ori	r24, 0x02	; 2
    3bf6:	80 83       	st	Z, r24
    3bf8:	86 e0       	ldi	r24, 0x06	; 6
    3bfa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    3bfe:	80 e1       	ldi	r24, 0x10	; 16
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    3c06:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    3c0a:	78 94       	sei
    3c0c:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000035e6 <uart0_hal_send_message>:
    35e6:	dc 01       	movw	r26, r24
    35e8:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <tx_buffer_data_len>
    35ec:	90 91 c2 06 	lds	r25, 0x06C2	; 0x8006c2 <tx_buffer_data_len+0x1>
    35f0:	89 2b       	or	r24, r25
    35f2:	d1 f7       	brne	.-12     	; 0x35e8 <uart0_hal_send_message+0x2>
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	0b c0       	rjmp	.+22     	; 0x360e <uart0_hal_send_message+0x28>
    35f8:	29 2f       	mov	r18, r25
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	fd 01       	movw	r30, r26
    35fe:	e2 0f       	add	r30, r18
    3600:	f3 1f       	adc	r31, r19
    3602:	40 81       	ld	r20, Z
    3604:	f9 01       	movw	r30, r18
    3606:	ea 56       	subi	r30, 0x6A	; 106
    3608:	fe 4f       	sbci	r31, 0xFE	; 254
    360a:	40 83       	st	Z, r20
    360c:	9f 5f       	subi	r25, 0xFF	; 255
    360e:	96 17       	cp	r25, r22
    3610:	98 f3       	brcs	.-26     	; 0x35f8 <uart0_hal_send_message+0x12>
    3612:	86 2f       	mov	r24, r22
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	90 93 c2 06 	sts	0x06C2, r25	; 0x8006c2 <tx_buffer_data_len+0x1>
    361a:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <tx_buffer_data_len>
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	90 93 c0 06 	sts	0x06C0, r25	; 0x8006c0 <tx_buffer_cursor+0x1>
    3626:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <tx_buffer_cursor>
    362a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    362e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3632:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002a9e <uart0_hal_send_string>:
    2a9e:	6f 92       	push	r6
    2aa0:	7f 92       	push	r7
    2aa2:	8f 92       	push	r8
    2aa4:	cf 92       	push	r12
    2aa6:	df 92       	push	r13
    2aa8:	ef 92       	push	r14
    2aaa:	3b 01       	movw	r6, r22
    2aac:	88 2e       	mov	r8, r24
    2aae:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <tx_buffer_data_len>
    2ab2:	90 91 c2 06 	lds	r25, 0x06C2	; 0x8006c2 <tx_buffer_data_len+0x1>
    2ab6:	89 2b       	or	r24, r25
    2ab8:	d1 f7       	brne	.-12     	; 0x2aae <uart0_hal_send_string+0x10>
    2aba:	88 2d       	mov	r24, r8
    2abc:	b3 01       	movw	r22, r6
    2abe:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	11 c0       	rjmp	.+34     	; 0x2aec <uart0_hal_send_string+0x4e>
    2aca:	e8 2c       	mov	r14, r8
    2acc:	63 01       	movw	r12, r6
    2ace:	c2 0e       	add	r12, r18
    2ad0:	d3 1e       	adc	r13, r19
    2ad2:	e1 1c       	adc	r14, r1
    2ad4:	37 fd       	sbrc	r19, 7
    2ad6:	ea 94       	dec	r14
    2ad8:	f6 01       	movw	r30, r12
    2ada:	94 91       	lpm	r25, Z
    2adc:	e7 fc       	sbrc	r14, 7
    2ade:	90 81       	ld	r25, Z
    2ae0:	f9 01       	movw	r30, r18
    2ae2:	ea 56       	subi	r30, 0x6A	; 106
    2ae4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae6:	90 83       	st	Z, r25
    2ae8:	2f 5f       	subi	r18, 0xFF	; 255
    2aea:	3f 4f       	sbci	r19, 0xFF	; 255
    2aec:	26 17       	cp	r18, r22
    2aee:	37 07       	cpc	r19, r23
    2af0:	60 f3       	brcs	.-40     	; 0x2aca <uart0_hal_send_string+0x2c>
    2af2:	70 93 c2 06 	sts	0x06C2, r23	; 0x8006c2 <tx_buffer_data_len+0x1>
    2af6:	60 93 c1 06 	sts	0x06C1, r22	; 0x8006c1 <tx_buffer_data_len>
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	90 93 c0 06 	sts	0x06C0, r25	; 0x8006c0 <tx_buffer_cursor+0x1>
    2b02:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <tx_buffer_cursor>
    2b06:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    2b0a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2b0e:	ef 90       	pop	r14
    2b10:	df 90       	pop	r13
    2b12:	cf 90       	pop	r12
    2b14:	8f 90       	pop	r8
    2b16:	7f 90       	pop	r7
    2b18:	6f 90       	pop	r6
    2b1a:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

000044f0 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    44f0:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <rx_buffer_has_message>
    44f4:	81 e0       	ldi	r24, 0x01	; 1
    44f6:	91 11       	cpse	r25, r1
    44f8:	01 c0       	rjmp	.+2      	; 0x44fc <uart0_hal_message_ready+0xc>
    44fa:	80 e0       	ldi	r24, 0x00	; 0
}
    44fc:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00004636 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    4636:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <rx_buffer_has_message>
	rx_buffer_data_len=0;
    463a:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <rx_buffer_data_len>
    463e:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

000040e6 <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    40e6:	0f 93       	push	r16
    40e8:	1f 93       	push	r17
    40ea:	cf 93       	push	r28
    40ec:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    40ee:	0e 94 18 20 	call	0x4030	; 0x4030 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    40f2:	c0 91 d0 06 	lds	r28, 0x06D0	; 0x8006d0 <rx_buffer_data_len>
    40f6:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    40f8:	f8 01       	movw	r30, r16
    40fa:	ec 0f       	add	r30, r28
    40fc:	f1 1d       	adc	r31, r1
    40fe:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    4100:	0e 94 1b 23 	call	0x4636	; 0x4636 <uart0_hal_clear_rx_buffer>
	return len;
}
    4104:	8c 2f       	mov	r24, r28
    4106:	cf 91       	pop	r28
    4108:	1f 91       	pop	r17
    410a:	0f 91       	pop	r16
    410c:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

0000396e <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    396e:	cf 93       	push	r28
    3970:	df 93       	push	r29
    3972:	1f 92       	push	r1
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    3978:	9a b1       	in	r25, 0x0a	; 10
    397a:	92 60       	ori	r25, 0x02	; 2
    397c:	9a b9       	out	0x0a, r25	; 10
    397e:	e1 ec       	ldi	r30, 0xC1	; 193
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	90 81       	ld	r25, Z
    3984:	97 7f       	andi	r25, 0xF7	; 247
    3986:	90 83       	st	Z, r25
    3988:	9b b1       	in	r25, 0x0b	; 11
    398a:	9d 7f       	andi	r25, 0xFD	; 253
    398c:	9b b9       	out	0x0b, r25	; 11
    398e:	af e9       	ldi	r26, 0x9F	; 159
    3990:	bf e0       	ldi	r27, 0x0F	; 15
    3992:	11 97       	sbiw	r26, 0x01	; 1
    3994:	f1 f7       	brne	.-4      	; 0x3992 <uart0_hal_send_break+0x24>
    3996:	00 c0       	rjmp	.+0      	; 0x3998 <uart0_hal_send_break+0x2a>
    3998:	00 00       	nop
    399a:	90 81       	ld	r25, Z
    399c:	98 60       	ori	r25, 0x08	; 8
    399e:	90 83       	st	Z, r25
    39a0:	89 83       	std	Y+1, r24	; 0x01
    39a2:	61 e0       	ldi	r22, 0x01	; 1
    39a4:	ce 01       	movw	r24, r28
    39a6:	01 96       	adiw	r24, 0x01	; 1
    39a8:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <uart0_hal_send_message>
    39ac:	0f 90       	pop	r0
    39ae:	df 91       	pop	r29
    39b0:	cf 91       	pop	r28
    39b2:	08 95       	ret

Disassembly of section .text.__vector_22:

00002fc2 <__vector_22>:
    2fc2:	1f 92       	push	r1
    2fc4:	0f 92       	push	r0
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	0f 92       	push	r0
    2fca:	11 24       	eor	r1, r1
    2fcc:	2f 93       	push	r18
    2fce:	3f 93       	push	r19
    2fd0:	8f 93       	push	r24
    2fd2:	9f 93       	push	r25
    2fd4:	ef 93       	push	r30
    2fd6:	ff 93       	push	r31
    2fd8:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <tx_buffer_cursor>
    2fdc:	90 91 c0 06 	lds	r25, 0x06C0	; 0x8006c0 <tx_buffer_cursor+0x1>
    2fe0:	20 91 c1 06 	lds	r18, 0x06C1	; 0x8006c1 <tx_buffer_data_len>
    2fe4:	30 91 c2 06 	lds	r19, 0x06C2	; 0x8006c2 <tx_buffer_data_len+0x1>
    2fe8:	82 17       	cp	r24, r18
    2fea:	93 07       	cpc	r25, r19
    2fec:	70 f4       	brcc	.+28     	; 0x300a <__vector_22+0x48>
    2fee:	9c 01       	movw	r18, r24
    2ff0:	2f 5f       	subi	r18, 0xFF	; 255
    2ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff4:	30 93 c0 06 	sts	0x06C0, r19	; 0x8006c0 <tx_buffer_cursor+0x1>
    2ff8:	20 93 bf 06 	sts	0x06BF, r18	; 0x8006bf <tx_buffer_cursor>
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	ea 56       	subi	r30, 0x6A	; 106
    3000:	fe 4f       	sbci	r31, 0xFE	; 254
    3002:	80 81       	ld	r24, Z
    3004:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3008:	08 c0       	rjmp	.+16     	; 0x301a <__vector_22+0x58>
    300a:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <tx_buffer_cursor+0x1>
    300e:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <tx_buffer_cursor>
    3012:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <tx_buffer_data_len+0x1>
    3016:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <tx_buffer_data_len>
    301a:	ff 91       	pop	r31
    301c:	ef 91       	pop	r30
    301e:	9f 91       	pop	r25
    3020:	8f 91       	pop	r24
    3022:	3f 91       	pop	r19
    3024:	2f 91       	pop	r18
    3026:	0f 90       	pop	r0
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	0f 90       	pop	r0
    302c:	1f 90       	pop	r1
    302e:	18 95       	reti

Disassembly of section .text.__vector_20:

00002e6a <__vector_20>:
    2e6a:	1f 92       	push	r1
    2e6c:	0f 92       	push	r0
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	0f 92       	push	r0
    2e72:	11 24       	eor	r1, r1
    2e74:	2f 93       	push	r18
    2e76:	8f 93       	push	r24
    2e78:	9f 93       	push	r25
    2e7a:	ef 93       	push	r30
    2e7c:	ff 93       	push	r31
    2e7e:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <rx_buffer_has_message>
    2e82:	81 11       	cpse	r24, r1
    2e84:	0e c0       	rjmp	.+28     	; 0x2ea2 <__vector_20+0x38>
    2e86:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <rx_buffer_data_len>
    2e8a:	e6 39       	cpi	r30, 0x96	; 150
    2e8c:	50 f4       	brcc	.+20     	; 0x2ea2 <__vector_20+0x38>
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	8e 0f       	add	r24, r30
    2e92:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <rx_buffer_data_len>
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2e9c:	e0 50       	subi	r30, 0x00	; 0
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	80 83       	st	Z, r24
    2ea2:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <rx_buffer_data_len>
    2ea6:	83 30       	cpi	r24, 0x03	; 3
    2ea8:	80 f0       	brcs	.+32     	; 0x2eca <__vector_20+0x60>
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	fc 01       	movw	r30, r24
    2eae:	e1 50       	subi	r30, 0x01	; 1
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	20 81       	ld	r18, Z
    2eb4:	2a 30       	cpi	r18, 0x0A	; 10
    2eb6:	49 f4       	brne	.+18     	; 0x2eca <__vector_20+0x60>
    2eb8:	fc 01       	movw	r30, r24
    2eba:	e2 50       	subi	r30, 0x02	; 2
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	80 81       	ld	r24, Z
    2ec0:	8d 30       	cpi	r24, 0x0D	; 13
    2ec2:	19 f4       	brne	.+6      	; 0x2eca <__vector_20+0x60>
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <rx_buffer_has_message>
    2eca:	ff 91       	pop	r31
    2ecc:	ef 91       	pop	r30
    2ece:	9f 91       	pop	r25
    2ed0:	8f 91       	pop	r24
    2ed2:	2f 91       	pop	r18
    2ed4:	0f 90       	pop	r0
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	0f 90       	pop	r0
    2eda:	1f 90       	pop	r1
    2edc:	18 95       	reti

Disassembly of section .text.copy_buffer:

0000405e <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    405e:	bc 01       	movw	r22, r24
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	09 c0       	rjmp	.+18     	; 0x4076 <copy_buffer+0x18>
    4064:	fb 01       	movw	r30, r22
    4066:	e9 0f       	add	r30, r25
    4068:	f1 1d       	adc	r31, r1
    406a:	da 01       	movw	r26, r20
    406c:	ac 5c       	subi	r26, 0xCC	; 204
    406e:	b9 4f       	sbci	r27, 0xF9	; 249
    4070:	2c 91       	ld	r18, X
    4072:	20 83       	st	Z, r18
    4074:	9f 5f       	subi	r25, 0xFF	; 255
    4076:	49 2f       	mov	r20, r25
    4078:	50 e0       	ldi	r21, 0x00	; 0
    407a:	20 91 d2 06 	lds	r18, 0x06D2	; 0x8006d2 <rx_buffer_data_len>
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	22 50       	subi	r18, 0x02	; 2
    4082:	31 09       	sbc	r19, r1
    4084:	42 17       	cp	r20, r18
    4086:	53 07       	cpc	r21, r19
    4088:	6c f3       	brlt	.-38     	; 0x4064 <copy_buffer+0x6>
    408a:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

00003c0e <uart1_hal_init>:
    3c0e:	e9 ec       	ldi	r30, 0xC9	; 201
    3c10:	f0 e0       	ldi	r31, 0x00	; 0
    3c12:	80 81       	ld	r24, Z
    3c14:	80 61       	ori	r24, 0x10	; 16
    3c16:	80 83       	st	Z, r24
    3c18:	80 81       	ld	r24, Z
    3c1a:	88 60       	ori	r24, 0x08	; 8
    3c1c:	80 83       	st	Z, r24
    3c1e:	80 81       	ld	r24, Z
    3c20:	80 68       	ori	r24, 0x80	; 128
    3c22:	80 83       	st	Z, r24
    3c24:	80 81       	ld	r24, Z
    3c26:	80 64       	ori	r24, 0x40	; 64
    3c28:	80 83       	st	Z, r24
    3c2a:	e8 ec       	ldi	r30, 0xC8	; 200
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	80 81       	ld	r24, Z
    3c30:	82 60       	ori	r24, 0x02	; 2
    3c32:	80 83       	st	Z, r24
    3c34:	86 e0       	ldi	r24, 0x06	; 6
    3c36:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    3c3a:	80 e1       	ldi	r24, 0x10	; 16
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    3c42:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    3c46:	78 94       	sei
    3c48:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

0000284a <uart1_hal_send_string>:
    284a:	6f 92       	push	r6
    284c:	7f 92       	push	r7
    284e:	8f 92       	push	r8
    2850:	cf 92       	push	r12
    2852:	df 92       	push	r13
    2854:	ef 92       	push	r14
    2856:	3b 01       	movw	r6, r22
    2858:	88 2e       	mov	r8, r24
    285a:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <tx_buffer_data_len>
    285e:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <tx_buffer_data_len+0x1>
    2862:	89 2b       	or	r24, r25
    2864:	d1 f7       	brne	.-12     	; 0x285a <uart1_hal_send_string+0x10>
    2866:	88 2d       	mov	r24, r8
    2868:	b3 01       	movw	r22, r6
    286a:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    286e:	bc 01       	movw	r22, r24
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	11 c0       	rjmp	.+34     	; 0x2898 <uart1_hal_send_string+0x4e>
    2876:	e8 2c       	mov	r14, r8
    2878:	63 01       	movw	r12, r6
    287a:	c2 0e       	add	r12, r18
    287c:	d3 1e       	adc	r13, r19
    287e:	e1 1c       	adc	r14, r1
    2880:	37 fd       	sbrc	r19, 7
    2882:	ea 94       	dec	r14
    2884:	f6 01       	movw	r30, r12
    2886:	94 91       	lpm	r25, Z
    2888:	e7 fc       	sbrc	r14, 7
    288a:	90 81       	ld	r25, Z
    288c:	f9 01       	movw	r30, r18
    288e:	e8 54       	subi	r30, 0x48	; 72
    2890:	fb 4f       	sbci	r31, 0xFB	; 251
    2892:	90 83       	st	Z, r25
    2894:	2f 5f       	subi	r18, 0xFF	; 255
    2896:	3f 4f       	sbci	r19, 0xFF	; 255
    2898:	26 17       	cp	r18, r22
    289a:	37 07       	cpc	r19, r23
    289c:	60 f3       	brcs	.-40     	; 0x2876 <uart1_hal_send_string+0x2c>
    289e:	fb 01       	movw	r30, r22
    28a0:	e8 54       	subi	r30, 0x48	; 72
    28a2:	fb 4f       	sbci	r31, 0xFB	; 251
    28a4:	8d e0       	ldi	r24, 0x0D	; 13
    28a6:	80 83       	st	Z, r24
    28a8:	fb 01       	movw	r30, r22
    28aa:	e7 54       	subi	r30, 0x47	; 71
    28ac:	fb 4f       	sbci	r31, 0xFB	; 251
    28ae:	8a e0       	ldi	r24, 0x0A	; 10
    28b0:	80 83       	st	Z, r24
    28b2:	6e 5f       	subi	r22, 0xFE	; 254
    28b4:	7f 4f       	sbci	r23, 0xFF	; 255
    28b6:	70 93 c6 06 	sts	0x06C6, r23	; 0x8006c6 <tx_buffer_data_len+0x1>
    28ba:	60 93 c5 06 	sts	0x06C5, r22	; 0x8006c5 <tx_buffer_data_len>
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	90 93 c4 06 	sts	0x06C4, r25	; 0x8006c4 <tx_buffer_cursor+0x1>
    28c6:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <tx_buffer_cursor>
    28ca:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_end>
    28ce:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    28d2:	ef 90       	pop	r14
    28d4:	df 90       	pop	r13
    28d6:	cf 90       	pop	r12
    28d8:	8f 90       	pop	r8
    28da:	7f 90       	pop	r7
    28dc:	6f 90       	pop	r6
    28de:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

000044fe <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    44fe:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <rx_buffer_has_message>
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	91 11       	cpse	r25, r1
    4506:	01 c0       	rjmp	.+2      	; 0x450a <uart1_hal_message_ready+0xc>
    4508:	80 e0       	ldi	r24, 0x00	; 0
}
    450a:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

0000450c <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    450c:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <rx_buffer_data_len>
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	9a 34       	cpi	r25, 0x4A	; 74
    4514:	08 f4       	brcc	.+2      	; 0x4518 <uart1_hal_rx_full+0xc>
    4516:	80 e0       	ldi	r24, 0x00	; 0
}
    4518:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

00004640 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    4640:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    4644:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <rx_buffer_data_len>
    4648:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

0000410e <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    410e:	0f 93       	push	r16
    4110:	1f 93       	push	r17
    4112:	cf 93       	push	r28
    4114:	8c 01       	movw	r16, r24
    4116:	0e 94 2f 20 	call	0x405e	; 0x405e <copy_buffer>
    411a:	c0 91 d2 06 	lds	r28, 0x06D2	; 0x8006d2 <rx_buffer_data_len>
    411e:	c2 50       	subi	r28, 0x02	; 2
    4120:	f8 01       	movw	r30, r16
    4122:	ec 0f       	add	r30, r28
    4124:	f1 1d       	adc	r31, r1
    4126:	10 82       	st	Z, r1
    4128:	0e 94 20 23 	call	0x4640	; 0x4640 <uart1_hal_clear_rx_buffer>
    412c:	8c 2f       	mov	r24, r28
    412e:	cf 91       	pop	r28
    4130:	1f 91       	pop	r17
    4132:	0f 91       	pop	r16
    4134:	08 95       	ret

Disassembly of section .text.__vector_30:

00003030 <__vector_30>:
    3030:	1f 92       	push	r1
    3032:	0f 92       	push	r0
    3034:	0f b6       	in	r0, 0x3f	; 63
    3036:	0f 92       	push	r0
    3038:	11 24       	eor	r1, r1
    303a:	2f 93       	push	r18
    303c:	3f 93       	push	r19
    303e:	8f 93       	push	r24
    3040:	9f 93       	push	r25
    3042:	ef 93       	push	r30
    3044:	ff 93       	push	r31
    3046:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <tx_buffer_cursor>
    304a:	90 91 c4 06 	lds	r25, 0x06C4	; 0x8006c4 <tx_buffer_cursor+0x1>
    304e:	20 91 c5 06 	lds	r18, 0x06C5	; 0x8006c5 <tx_buffer_data_len>
    3052:	30 91 c6 06 	lds	r19, 0x06C6	; 0x8006c6 <tx_buffer_data_len+0x1>
    3056:	82 17       	cp	r24, r18
    3058:	93 07       	cpc	r25, r19
    305a:	70 f4       	brcc	.+28     	; 0x3078 <__vector_30+0x48>
    305c:	9c 01       	movw	r18, r24
    305e:	2f 5f       	subi	r18, 0xFF	; 255
    3060:	3f 4f       	sbci	r19, 0xFF	; 255
    3062:	30 93 c4 06 	sts	0x06C4, r19	; 0x8006c4 <tx_buffer_cursor+0x1>
    3066:	20 93 c3 06 	sts	0x06C3, r18	; 0x8006c3 <tx_buffer_cursor>
    306a:	fc 01       	movw	r30, r24
    306c:	e8 54       	subi	r30, 0x48	; 72
    306e:	fb 4f       	sbci	r31, 0xFB	; 251
    3070:	80 81       	ld	r24, Z
    3072:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    3076:	08 c0       	rjmp	.+16     	; 0x3088 <__vector_30+0x58>
    3078:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <tx_buffer_cursor+0x1>
    307c:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <tx_buffer_cursor>
    3080:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <tx_buffer_data_len+0x1>
    3084:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <tx_buffer_data_len>
    3088:	ff 91       	pop	r31
    308a:	ef 91       	pop	r30
    308c:	9f 91       	pop	r25
    308e:	8f 91       	pop	r24
    3090:	3f 91       	pop	r19
    3092:	2f 91       	pop	r18
    3094:	0f 90       	pop	r0
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	0f 90       	pop	r0
    309a:	1f 90       	pop	r1
    309c:	18 95       	reti

Disassembly of section .text.__vector_28:

00002ede <__vector_28>:
    2ede:	1f 92       	push	r1
    2ee0:	0f 92       	push	r0
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	0f 92       	push	r0
    2ee6:	11 24       	eor	r1, r1
    2ee8:	2f 93       	push	r18
    2eea:	8f 93       	push	r24
    2eec:	9f 93       	push	r25
    2eee:	ef 93       	push	r30
    2ef0:	ff 93       	push	r31
    2ef2:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <rx_buffer_has_message>
    2ef6:	81 11       	cpse	r24, r1
    2ef8:	0e c0       	rjmp	.+28     	; 0x2f16 <__vector_28+0x38>
    2efa:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <rx_buffer_data_len>
    2efe:	eb 34       	cpi	r30, 0x4B	; 75
    2f00:	50 f4       	brcc	.+20     	; 0x2f16 <__vector_28+0x38>
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	8e 0f       	add	r24, r30
    2f06:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <rx_buffer_data_len>
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2f10:	ec 5c       	subi	r30, 0xCC	; 204
    2f12:	f9 4f       	sbci	r31, 0xF9	; 249
    2f14:	80 83       	st	Z, r24
    2f16:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <rx_buffer_data_len>
    2f1a:	83 30       	cpi	r24, 0x03	; 3
    2f1c:	80 f0       	brcs	.+32     	; 0x2f3e <__vector_28+0x60>
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	fc 01       	movw	r30, r24
    2f22:	ed 5c       	subi	r30, 0xCD	; 205
    2f24:	f9 4f       	sbci	r31, 0xF9	; 249
    2f26:	20 81       	ld	r18, Z
    2f28:	2a 30       	cpi	r18, 0x0A	; 10
    2f2a:	49 f4       	brne	.+18     	; 0x2f3e <__vector_28+0x60>
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	ee 5c       	subi	r30, 0xCE	; 206
    2f30:	f9 4f       	sbci	r31, 0xF9	; 249
    2f32:	80 81       	ld	r24, Z
    2f34:	8d 30       	cpi	r24, 0x0D	; 13
    2f36:	19 f4       	brne	.+6      	; 0x2f3e <__vector_28+0x60>
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <rx_buffer_has_message>
    2f3e:	ff 91       	pop	r31
    2f40:	ef 91       	pop	r30
    2f42:	9f 91       	pop	r25
    2f44:	8f 91       	pop	r24
    2f46:	2f 91       	pop	r18
    2f48:	0f 90       	pop	r0
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	0f 90       	pop	r0
    2f4e:	1f 90       	pop	r1
    2f50:	18 95       	reti

Disassembly of section .text.main:

00004332 <main>:
{
	#ifdef _RUN_TEST
		test_runner();
	#endif // _RUN_TEST
	
	PM_HAL_LED_power(true);
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <PM_HAL_LED_power>
	CONF_enter();
    4338:	0e 94 65 0d 	call	0x1aca	; 0x1aca <CONF_enter>
	PM_HAL_LED_power(false);
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <PM_HAL_LED_power>
			//MAINPG_start();
		//}
		//_delay_ms(5000);
	//}
	//#endif
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	08 95       	ret

Disassembly of section .text.calc_ppm_methane:

000028e0 <calc_ppm_methane>:
	PM_HAL_meth_power(false);
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
}
    28e0:	8f 92       	push	r8
    28e2:	9f 92       	push	r9
    28e4:	af 92       	push	r10
    28e6:	bf 92       	push	r11
    28e8:	cf 92       	push	r12
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	bc 01       	movw	r22, r24
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__floatunsisf>
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e8       	ldi	r20, 0x80	; 128
    2900:	59 e3       	ldi	r21, 0x39	; 57
    2902:	0e 94 47 23 	call	0x468e	; 0x468e <__mulsf3>
    2906:	80 90 b7 06 	lds	r8, 0x06B7	; 0x8006b7 <Vc>
    290a:	90 90 b8 06 	lds	r9, 0x06B8	; 0x8006b8 <Vc+0x1>
    290e:	a0 90 b9 06 	lds	r10, 0x06B9	; 0x8006b9 <Vc+0x2>
    2912:	b0 90 ba 06 	lds	r11, 0x06BA	; 0x8006ba <Vc+0x3>
    2916:	a5 01       	movw	r20, r10
    2918:	94 01       	movw	r18, r8
    291a:	0e 94 47 23 	call	0x468e	; 0x468e <__mulsf3>
    291e:	6b 01       	movw	r12, r22
    2920:	7c 01       	movw	r14, r24
    2922:	9b 01       	movw	r18, r22
    2924:	ac 01       	movw	r20, r24
    2926:	c5 01       	movw	r24, r10
    2928:	b4 01       	movw	r22, r8
    292a:	0e 94 a9 22 	call	0x4552	; 0x4552 <__subsf3>
    292e:	a7 01       	movw	r20, r14
    2930:	96 01       	movw	r18, r12
    2932:	0e 94 43 23 	call	0x4686	; 0x4686 <__divsf3>
    2936:	20 91 b3 06 	lds	r18, 0x06B3	; 0x8006b3 <RRL>
    293a:	30 91 b4 06 	lds	r19, 0x06B4	; 0x8006b4 <RRL+0x1>
    293e:	40 91 b5 06 	lds	r20, 0x06B5	; 0x8006b5 <RRL+0x2>
    2942:	50 91 b6 06 	lds	r21, 0x06B6	; 0x8006b6 <RRL+0x3>
    2946:	0e 94 47 23 	call	0x468e	; 0x468e <__mulsf3>
    294a:	20 91 af 06 	lds	r18, 0x06AF	; 0x8006af <PPM_factor>
    294e:	30 91 b0 06 	lds	r19, 0x06B0	; 0x8006b0 <PPM_factor+0x1>
    2952:	40 91 b1 06 	lds	r20, 0x06B1	; 0x8006b1 <PPM_factor+0x2>
    2956:	50 91 b2 06 	lds	r21, 0x06B2	; 0x8006b2 <PPM_factor+0x3>
    295a:	0e 94 47 23 	call	0x468e	; 0x468e <__mulsf3>
    295e:	0e 94 22 19 	call	0x3244	; 0x3244 <__fixunssfsi>
    2962:	cb 01       	movw	r24, r22
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	df 90       	pop	r13
    296a:	cf 90       	pop	r12
    296c:	bf 90       	pop	r11
    296e:	af 90       	pop	r10
    2970:	9f 90       	pop	r9
    2972:	8f 90       	pop	r8
    2974:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00003354 <ADC_get_value>:
    3354:	0f 93       	push	r16
    3356:	1f 93       	push	r17
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	00 d0       	rcall	.+0      	; 0x335e <ADC_get_value+0xa>
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	8c 01       	movw	r16, r24
    3364:	8f ef       	ldi	r24, 0xFF	; 255
    3366:	9f ef       	ldi	r25, 0xFF	; 255
    3368:	f8 01       	movw	r30, r16
    336a:	91 83       	std	Z+1, r25	; 0x01
    336c:	80 83       	st	Z, r24
    336e:	42 e0       	ldi	r20, 0x02	; 2
    3370:	be 01       	movw	r22, r28
    3372:	6f 5f       	subi	r22, 0xFF	; 255
    3374:	7f 4f       	sbci	r23, 0xFF	; 255
    3376:	8d e4       	ldi	r24, 0x4D	; 77
    3378:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <TWI_API_read_data_ack_end_nack_stop>
    337c:	81 11       	cpse	r24, r1
    337e:	0d c0       	rjmp	.+26     	; 0x339a <ADC_get_value+0x46>
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	98 2f       	mov	r25, r24
    3386:	88 27       	eor	r24, r24
    3388:	2a 81       	ldd	r18, Y+2	; 0x02
    338a:	82 2b       	or	r24, r18
    338c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <calc_ppm_methane>
    3390:	f8 01       	movw	r30, r16
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	80 83       	st	Z, r24
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	01 c0       	rjmp	.+2      	; 0x339c <ADC_get_value+0x48>
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	1f 91       	pop	r17
    33a6:	0f 91       	pop	r16
    33a8:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

00003b4e <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    3b4e:	ef 92       	push	r14
    3b50:	ff 92       	push	r15
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
	Vc=Vcc;
    3b56:	60 93 b7 06 	sts	0x06B7, r22	; 0x8006b7 <Vc>
    3b5a:	70 93 b8 06 	sts	0x06B8, r23	; 0x8006b8 <Vc+0x1>
    3b5e:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <Vc+0x2>
    3b62:	90 93 ba 06 	sts	0x06BA, r25	; 0x8006ba <Vc+0x3>
	RRL=Rrl;
    3b66:	20 93 b3 06 	sts	0x06B3, r18	; 0x8006b3 <RRL>
    3b6a:	30 93 b4 06 	sts	0x06B4, r19	; 0x8006b4 <RRL+0x1>
    3b6e:	40 93 b5 06 	sts	0x06B5, r20	; 0x8006b5 <RRL+0x2>
    3b72:	50 93 b6 06 	sts	0x06B6, r21	; 0x8006b6 <RRL+0x3>
	PPM_factor=PPMfactor;
    3b76:	e0 92 af 06 	sts	0x06AF, r14	; 0x8006af <PPM_factor>
    3b7a:	f0 92 b0 06 	sts	0x06B0, r15	; 0x8006b0 <PPM_factor+0x1>
    3b7e:	00 93 b1 06 	sts	0x06B1, r16	; 0x8006b1 <PPM_factor+0x2>
    3b82:	10 93 b2 06 	sts	0x06B2, r17	; 0x8006b2 <PPM_factor+0x3>
}
    3b86:	1f 91       	pop	r17
    3b88:	0f 91       	pop	r16
    3b8a:	ff 90       	pop	r15
    3b8c:	ef 90       	pop	r14
    3b8e:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00004348 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    4348:	60 e4       	ldi	r22, 0x40	; 64
    434a:	70 e0       	ldi	r23, 0x00	; 0
    434c:	80 e8       	ldi	r24, 0x80	; 128
    434e:	0e 94 3c 22 	call	0x4478	; 0x4478 <eeprom_read_byte>
    4352:	91 e0       	ldi	r25, 0x01	; 1
    4354:	81 11       	cpse	r24, r1
    4356:	01 c0       	rjmp	.+2      	; 0x435a <EM_has_deveui+0x12>
    4358:	90 e0       	ldi	r25, 0x00	; 0
}
    435a:	89 2f       	mov	r24, r25
    435c:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

0000435e <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    435e:	61 e4       	ldi	r22, 0x41	; 65
    4360:	70 e0       	ldi	r23, 0x00	; 0
    4362:	80 e8       	ldi	r24, 0x80	; 128
    4364:	0e 94 3c 22 	call	0x4478	; 0x4478 <eeprom_read_byte>
    4368:	91 e0       	ldi	r25, 0x01	; 1
    436a:	81 11       	cpse	r24, r1
    436c:	01 c0       	rjmp	.+2      	; 0x4370 <EM_has_appeui+0x12>
    436e:	90 e0       	ldi	r25, 0x00	; 0
}
    4370:	89 2f       	mov	r24, r25
    4372:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00004374 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    4374:	62 e4       	ldi	r22, 0x42	; 66
    4376:	70 e0       	ldi	r23, 0x00	; 0
    4378:	80 e8       	ldi	r24, 0x80	; 128
    437a:	0e 94 3c 22 	call	0x4478	; 0x4478 <eeprom_read_byte>
    437e:	91 e0       	ldi	r25, 0x01	; 1
    4380:	81 11       	cpse	r24, r1
    4382:	01 c0       	rjmp	.+2      	; 0x4386 <EM_has_appkey+0x12>
    4384:	90 e0       	ldi	r25, 0x00	; 0
}
    4386:	89 2f       	mov	r24, r25
    4388:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

00003c84 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3c84:	cf 92       	push	r12
    3c86:	df 92       	push	r13
    3c88:	ef 92       	push	r14
    3c8a:	6b 01       	movw	r12, r22
    3c8c:	e8 2e       	mov	r14, r24
    3c8e:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    3c92:	40 97       	sbiw	r24, 0x10	; 16
    3c94:	79 f4       	brne	.+30     	; 0x3cb4 <EM_set_deveui+0x30>
    3c96:	20 e1       	ldi	r18, 0x10	; 16
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	40 e0       	ldi	r20, 0x00	; 0
    3c9c:	50 e0       	ldi	r21, 0x00	; 0
    3c9e:	8e 2d       	mov	r24, r14
    3ca0:	b6 01       	movw	r22, r12
    3ca2:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <eeprom_update_block>
    3ca6:	61 e0       	ldi	r22, 0x01	; 1
    3ca8:	80 e4       	ldi	r24, 0x40	; 64
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <eeprom_update_byte>
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	01 c0       	rjmp	.+2      	; 0x3cb6 <EM_set_deveui+0x32>
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	ef 90       	pop	r14
    3cb8:	df 90       	pop	r13
    3cba:	cf 90       	pop	r12
    3cbc:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00003f70 <EM_get_deveui>:
    3f70:	0f 93       	push	r16
    3f72:	1f 93       	push	r17
    3f74:	cf 93       	push	r28
    3f76:	8c 01       	movw	r16, r24
    3f78:	0e 94 a4 21 	call	0x4348	; 0x4348 <EM_has_deveui>
    3f7c:	c8 2f       	mov	r28, r24
    3f7e:	88 23       	and	r24, r24
    3f80:	51 f0       	breq	.+20     	; 0x3f96 <EM_get_deveui+0x26>
    3f82:	20 e1       	ldi	r18, 0x10	; 16
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	40 e0       	ldi	r20, 0x00	; 0
    3f88:	50 e0       	ldi	r21, 0x00	; 0
    3f8a:	60 e0       	ldi	r22, 0x00	; 0
    3f8c:	c8 01       	movw	r24, r16
    3f8e:	0e 94 c2 20 	call	0x4184	; 0x4184 <eeprom_read_block>
    3f92:	f8 01       	movw	r30, r16
    3f94:	10 8a       	std	Z+16, r1	; 0x10
    3f96:	8c 2f       	mov	r24, r28
    3f98:	cf 91       	pop	r28
    3f9a:	1f 91       	pop	r17
    3f9c:	0f 91       	pop	r16
    3f9e:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00003cbe <EM_set_appeui>:
    3cbe:	cf 92       	push	r12
    3cc0:	df 92       	push	r13
    3cc2:	ef 92       	push	r14
    3cc4:	6b 01       	movw	r12, r22
    3cc6:	e8 2e       	mov	r14, r24
    3cc8:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    3ccc:	40 97       	sbiw	r24, 0x10	; 16
    3cce:	79 f4       	brne	.+30     	; 0x3cee <EM_set_appeui+0x30>
    3cd0:	20 e1       	ldi	r18, 0x10	; 16
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 e1       	ldi	r20, 0x10	; 16
    3cd6:	50 e0       	ldi	r21, 0x00	; 0
    3cd8:	8e 2d       	mov	r24, r14
    3cda:	b6 01       	movw	r22, r12
    3cdc:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <eeprom_update_block>
    3ce0:	61 e0       	ldi	r22, 0x01	; 1
    3ce2:	81 e4       	ldi	r24, 0x41	; 65
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <eeprom_update_byte>
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	01 c0       	rjmp	.+2      	; 0x3cf0 <EM_set_appeui+0x32>
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	ef 90       	pop	r14
    3cf2:	df 90       	pop	r13
    3cf4:	cf 90       	pop	r12
    3cf6:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003fa0 <EM_get_appeui>:
    3fa0:	0f 93       	push	r16
    3fa2:	1f 93       	push	r17
    3fa4:	cf 93       	push	r28
    3fa6:	8c 01       	movw	r16, r24
    3fa8:	0e 94 af 21 	call	0x435e	; 0x435e <EM_has_appeui>
    3fac:	c8 2f       	mov	r28, r24
    3fae:	88 23       	and	r24, r24
    3fb0:	51 f0       	breq	.+20     	; 0x3fc6 <EM_get_appeui+0x26>
    3fb2:	20 e1       	ldi	r18, 0x10	; 16
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	40 e1       	ldi	r20, 0x10	; 16
    3fb8:	50 e0       	ldi	r21, 0x00	; 0
    3fba:	60 e0       	ldi	r22, 0x00	; 0
    3fbc:	c8 01       	movw	r24, r16
    3fbe:	0e 94 c2 20 	call	0x4184	; 0x4184 <eeprom_read_block>
    3fc2:	f8 01       	movw	r30, r16
    3fc4:	10 8a       	std	Z+16, r1	; 0x10
    3fc6:	8c 2f       	mov	r24, r28
    3fc8:	cf 91       	pop	r28
    3fca:	1f 91       	pop	r17
    3fcc:	0f 91       	pop	r16
    3fce:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00003cf8 <EM_set_appkey>:
    3cf8:	cf 92       	push	r12
    3cfa:	df 92       	push	r13
    3cfc:	ef 92       	push	r14
    3cfe:	6b 01       	movw	r12, r22
    3d00:	e8 2e       	mov	r14, r24
    3d02:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    3d06:	80 97       	sbiw	r24, 0x20	; 32
    3d08:	79 f4       	brne	.+30     	; 0x3d28 <EM_set_appkey+0x30>
    3d0a:	20 e2       	ldi	r18, 0x20	; 32
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e2       	ldi	r20, 0x20	; 32
    3d10:	50 e0       	ldi	r21, 0x00	; 0
    3d12:	8e 2d       	mov	r24, r14
    3d14:	b6 01       	movw	r22, r12
    3d16:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <eeprom_update_block>
    3d1a:	61 e0       	ldi	r22, 0x01	; 1
    3d1c:	82 e4       	ldi	r24, 0x42	; 66
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <eeprom_update_byte>
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	01 c0       	rjmp	.+2      	; 0x3d2a <EM_set_appkey+0x32>
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	ef 90       	pop	r14
    3d2c:	df 90       	pop	r13
    3d2e:	cf 90       	pop	r12
    3d30:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00003fd0 <EM_get_appkey>:
    3fd0:	0f 93       	push	r16
    3fd2:	1f 93       	push	r17
    3fd4:	cf 93       	push	r28
    3fd6:	8c 01       	movw	r16, r24
    3fd8:	0e 94 ba 21 	call	0x4374	; 0x4374 <EM_has_appkey>
    3fdc:	c8 2f       	mov	r28, r24
    3fde:	88 23       	and	r24, r24
    3fe0:	51 f0       	breq	.+20     	; 0x3ff6 <EM_get_appkey+0x26>
    3fe2:	20 e2       	ldi	r18, 0x20	; 32
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	40 e2       	ldi	r20, 0x20	; 32
    3fe8:	50 e0       	ldi	r21, 0x00	; 0
    3fea:	60 e0       	ldi	r22, 0x00	; 0
    3fec:	c8 01       	movw	r24, r16
    3fee:	0e 94 c2 20 	call	0x4184	; 0x4184 <eeprom_read_block>
    3ff2:	f8 01       	movw	r30, r16
    3ff4:	10 a2       	std	Z+32, r1	; 0x20
    3ff6:	8c 2f       	mov	r24, r28
    3ff8:	cf 91       	pop	r28
    3ffa:	1f 91       	pop	r17
    3ffc:	0f 91       	pop	r16
    3ffe:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

0000451a <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    451a:	ab 01       	movw	r20, r22
    451c:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    451e:	83 e4       	ldi	r24, 0x43	; 67
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	0e 94 8d 21 	call	0x431a	; 0x431a <eeprom_update_dword>
    4526:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

0000424e <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    424e:	cf 93       	push	r28
    4250:	df 93       	push	r29
    4252:	ec 01       	movw	r28, r24
    4254:	63 e4       	ldi	r22, 0x43	; 67
    4256:	70 e0       	ldi	r23, 0x00	; 0
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	0e 94 cc 22 	call	0x4598	; 0x4598 <eeprom_read_dword>
    425e:	68 83       	st	Y, r22
    4260:	79 83       	std	Y+1, r23	; 0x01
    4262:	8a 83       	std	Y+2, r24	; 0x02
    4264:	9b 83       	std	Y+3, r25	; 0x03
    4266:	df 91       	pop	r29
    4268:	cf 91       	pop	r28
    426a:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00004528 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    4528:	ab 01       	movw	r20, r22
    452a:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    452c:	87 e4       	ldi	r24, 0x47	; 71
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	0e 94 8d 21 	call	0x431a	; 0x431a <eeprom_update_dword>
    4534:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

0000426c <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    426c:	cf 93       	push	r28
    426e:	df 93       	push	r29
    4270:	ec 01       	movw	r28, r24
    4272:	67 e4       	ldi	r22, 0x47	; 71
    4274:	70 e0       	ldi	r23, 0x00	; 0
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	0e 94 cc 22 	call	0x4598	; 0x4598 <eeprom_read_dword>
    427c:	68 83       	st	Y, r22
    427e:	79 83       	std	Y+1, r23	; 0x01
    4280:	8a 83       	std	Y+2, r24	; 0x02
    4282:	9b 83       	std	Y+3, r25	; 0x03
    4284:	df 91       	pop	r29
    4286:	cf 91       	pop	r28
    4288:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00004536 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    4536:	ab 01       	movw	r20, r22
    4538:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    453a:	8b e4       	ldi	r24, 0x4B	; 75
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	0e 94 8d 21 	call	0x431a	; 0x431a <eeprom_update_dword>
    4542:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

0000428a <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    428a:	cf 93       	push	r28
    428c:	df 93       	push	r29
    428e:	ec 01       	movw	r28, r24
    4290:	6b e4       	ldi	r22, 0x4B	; 75
    4292:	70 e0       	ldi	r23, 0x00	; 0
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	0e 94 cc 22 	call	0x4598	; 0x4598 <eeprom_read_dword>
    429a:	68 83       	st	Y, r22
    429c:	79 83       	std	Y+1, r23	; 0x01
    429e:	8a 83       	std	Y+2, r24	; 0x02
    42a0:	9b 83       	std	Y+3, r25	; 0x03
    42a2:	df 91       	pop	r29
    42a4:	cf 91       	pop	r28
    42a6:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00004544 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    4544:	24 2f       	mov	r18, r20
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	44 e6       	ldi	r20, 0x64	; 100
    454a:	50 e0       	ldi	r21, 0x00	; 0
    454c:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <eeprom_update_block>
    4550:	08 95       	ret

Disassembly of section .text.EM_get_collections:

0000449a <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    449a:	26 2f       	mov	r18, r22
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	44 e6       	ldi	r20, 0x64	; 100
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	60 e0       	ldi	r22, 0x00	; 0
    44a4:	0e 94 c2 20 	call	0x4184	; 0x4184 <eeprom_read_block>
    44a8:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

000045b4 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    45b4:	68 2f       	mov	r22, r24
    45b6:	8f e4       	ldi	r24, 0x4F	; 79
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <eeprom_update_byte>
    45be:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

000045c0 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    45c0:	6f e4       	ldi	r22, 0x4F	; 79
    45c2:	70 e0       	ldi	r23, 0x00	; 0
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	0e 94 3c 22 	call	0x4478	; 0x4478 <eeprom_read_byte>
}
    45ca:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

000045cc <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    45cc:	bc 01       	movw	r22, r24
    45ce:	80 e5       	ldi	r24, 0x50	; 80
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	0e 94 10 23 	call	0x4620	; 0x4620 <eeprom_update_word>
    45d6:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

000045d8 <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    45d8:	60 e5       	ldi	r22, 0x50	; 80
    45da:	70 e0       	ldi	r23, 0x00	; 0
    45dc:	80 e0       	ldi	r24, 0x00	; 0
    45de:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <eeprom_read_word>
}
    45e2:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

000045e4 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    45e4:	68 2f       	mov	r22, r24
    45e6:	82 e5       	ldi	r24, 0x52	; 82
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <eeprom_update_byte>
    45ee:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

000045f0 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    45f0:	62 e5       	ldi	r22, 0x52	; 82
    45f2:	70 e0       	ldi	r23, 0x00	; 0
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	0e 94 3c 22 	call	0x4478	; 0x4478 <eeprom_read_byte>
}
    45fa:	08 95       	ret

Disassembly of section .text.LM_reset_module:

000046a4 <LM_reset_module>:
bool LM_is_free(){
	return busy==false;
}

LM_STATUS LM_reset_module(){
	return util_reset_module();
    46a4:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <util_reset_module>
}
    46a8:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

000046aa <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    46aa:	0e 94 09 16 	call	0x2c12	; 0x2c12 <util_lora_forward_msg>
    46ae:	08 95       	ret

Disassembly of section .text.LM_send_break:

000046b0 <LM_send_break>:
}

void LM_send_break(){
	util_send_break();
    46b0:	0e 94 3f 23 	call	0x467e	; 0x467e <util_send_break>
    46b4:	08 95       	ret

Disassembly of section .text.attach_ending:

000042e4 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    42e4:	fc 01       	movw	r30, r24
    42e6:	01 90       	ld	r0, Z+
    42e8:	00 20       	and	r0, r0
    42ea:	e9 f7       	brne	.-6      	; 0x42e6 <attach_ending+0x2>
    42ec:	cf 01       	movw	r24, r30
    42ee:	23 e0       	ldi	r18, 0x03	; 3
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	45 e9       	ldi	r20, 0x95	; 149
    42f4:	55 e0       	ldi	r21, 0x05	; 5
    42f6:	60 e0       	ldi	r22, 0x00	; 0
    42f8:	01 97       	sbiw	r24, 0x01	; 1
    42fa:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
    42fe:	08 95       	ret

Disassembly of section .text.cb_watchdog_counter:

000045fc <cb_watchdog_counter>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    45fc:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <wd_cnt>
    4600:	8f 5f       	subi	r24, 0xFF	; 255
    4602:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <wd_cnt>
    4606:	08 95       	ret

Disassembly of section .text.util_str_begins_with:

0000384a <util_str_begins_with>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    384a:	6f 92       	push	r6
    384c:	7f 92       	push	r7
    384e:	8f 92       	push	r8
    3850:	cf 92       	push	r12
    3852:	df 92       	push	r13
    3854:	ef 92       	push	r14
    3856:	0f 93       	push	r16
    3858:	1f 93       	push	r17
    385a:	3b 01       	movw	r6, r22
    385c:	88 2e       	mov	r8, r24
    385e:	69 01       	movw	r12, r18
    3860:	e4 2e       	mov	r14, r20
    3862:	84 2f       	mov	r24, r20
    3864:	b9 01       	movw	r22, r18
    3866:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    386a:	8c 01       	movw	r16, r24
    386c:	4e 2d       	mov	r20, r14
    386e:	96 01       	movw	r18, r12
    3870:	88 2d       	mov	r24, r8
    3872:	b3 01       	movw	r22, r6
    3874:	0e 94 85 18 	call	0x310a	; 0x310a <strncmp>
    3878:	21 e0       	ldi	r18, 0x01	; 1
    387a:	89 2b       	or	r24, r25
    387c:	09 f0       	breq	.+2      	; 0x3880 <util_str_begins_with+0x36>
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	82 2f       	mov	r24, r18
    3882:	1f 91       	pop	r17
    3884:	0f 91       	pop	r16
    3886:	ef 90       	pop	r14
    3888:	df 90       	pop	r13
    388a:	cf 90       	pop	r12
    388c:	8f 90       	pop	r8
    388e:	7f 90       	pop	r7
    3890:	6f 90       	pop	r6
    3892:	08 95       	ret

Disassembly of section .text.util_reset_module:

000039b4 <util_reset_module>:
bool util_str_begins_with(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    39b4:	0e 94 33 23 	call	0x4666	; 0x4666 <rn2483_reset_active>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    39b8:	2f ef       	ldi	r18, 0xFF	; 255
    39ba:	89 e6       	ldi	r24, 0x69	; 105
    39bc:	98 e1       	ldi	r25, 0x18	; 24
    39be:	21 50       	subi	r18, 0x01	; 1
    39c0:	80 40       	sbci	r24, 0x00	; 0
    39c2:	90 40       	sbci	r25, 0x00	; 0
    39c4:	e1 f7       	brne	.-8      	; 0x39be <util_reset_module+0xa>
    39c6:	00 c0       	rjmp	.+0      	; 0x39c8 <util_reset_module+0x14>
    39c8:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    39ca:	0e 94 37 23 	call	0x466e	; 0x466e <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    39ce:	0e 94 78 22 	call	0x44f0	; 0x44f0 <uart0_hal_message_ready>
    39d2:	88 23       	and	r24, r24
    39d4:	e1 f3       	breq	.-8      	; 0x39ce <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    39d6:	80 e9       	ldi	r24, 0x90	; 144
    39d8:	92 e0       	ldi	r25, 0x02	; 2
    39da:	0e 94 73 20 	call	0x40e6	; 0x40e6 <uart0_hal_read_message_as_str>
	
	if(util_str_begins_with(lm_msg, RN2483)){
    39de:	60 e9       	ldi	r22, 0x90	; 144
    39e0:	72 e0       	ldi	r23, 0x02	; 2
    39e2:	80 e8       	ldi	r24, 0x80	; 128
    39e4:	23 e0       	ldi	r18, 0x03	; 3
    39e6:	36 e0       	ldi	r19, 0x06	; 6
    39e8:	40 e0       	ldi	r20, 0x00	; 0
    39ea:	0e 94 25 1c 	call	0x384a	; 0x384a <util_str_begins_with>
    39ee:	88 23       	and	r24, r24
    39f0:	11 f0       	breq	.+4      	; 0x39f6 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    39f6:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    39f8:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00002c12 <util_lora_forward_msg>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    2c12:	cf 93       	push	r28
    2c14:	df 93       	push	r29
    2c16:	ea 01       	movw	r28, r20
    2c18:	ab 01       	movw	r20, r22
    2c1a:	68 2f       	mov	r22, r24
    2c1c:	80 e9       	ldi	r24, 0x90	; 144
    2c1e:	92 e0       	ldi	r25, 0x02	; 2
    2c20:	0e 94 63 21 	call	0x42c6	; 0x42c6 <strcpy>
    2c24:	80 e9       	ldi	r24, 0x90	; 144
    2c26:	92 e0       	ldi	r25, 0x02	; 2
    2c28:	0e 94 72 21 	call	0x42e4	; 0x42e4 <attach_ending>
    2c2c:	60 e9       	ldi	r22, 0x90	; 144
    2c2e:	72 e0       	ldi	r23, 0x02	; 2
    2c30:	80 e8       	ldi	r24, 0x80	; 128
    2c32:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <uart0_hal_send_string>
    2c36:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <wd_cnt>
    2c3a:	8e ef       	ldi	r24, 0xFE	; 254
    2c3c:	92 e2       	ldi	r25, 0x22	; 34
    2c3e:	0e 94 00 1a 	call	0x3400	; 0x3400 <TC2_HAL_subscribe>
    2c42:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <wd_cb_pointer>
    2c46:	0e 94 78 22 	call	0x44f0	; 0x44f0 <uart0_hal_message_ready>
    2c4a:	81 11       	cpse	r24, r1
    2c4c:	04 c0       	rjmp	.+8      	; 0x2c56 <util_lora_forward_msg+0x44>
    2c4e:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <wd_cnt>
    2c52:	8f 30       	cpi	r24, 0x0F	; 15
    2c54:	c0 f3       	brcs	.-16     	; 0x2c46 <util_lora_forward_msg+0x34>
    2c56:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <wd_cb_pointer>
    2c5a:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <TC2_HAL_cancel>
    2c5e:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <wd_cnt>
    2c62:	8f 30       	cpi	r24, 0x0F	; 15
    2c64:	60 f0       	brcs	.+24     	; 0x2c7e <util_lora_forward_msg+0x6c>
    2c66:	2c e0       	ldi	r18, 0x0C	; 12
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	4a e0       	ldi	r20, 0x0A	; 10
    2c6c:	56 e0       	ldi	r21, 0x06	; 6
    2c6e:	60 e0       	ldi	r22, 0x00	; 0
    2c70:	ce 01       	movw	r24, r28
    2c72:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
    2c76:	ce 01       	movw	r24, r28
    2c78:	0e 94 73 20 	call	0x40e6	; 0x40e6 <uart0_hal_read_message_as_str>
    2c7c:	03 c0       	rjmp	.+6      	; 0x2c84 <util_lora_forward_msg+0x72>
    2c7e:	ce 01       	movw	r24, r28
    2c80:	0e 94 73 20 	call	0x40e6	; 0x40e6 <uart0_hal_read_message_as_str>
    2c84:	df 91       	pop	r29
    2c86:	cf 91       	pop	r28
    2c88:	08 95       	ret

Disassembly of section .text.util_send_break:

0000467e <util_send_break>:
		uart0_hal_read_message_as_str(res);
	}
}

void util_send_break(){
	uart0_hal_send_break(0x55);
    467e:	85 e5       	ldi	r24, 0x55	; 85
    4680:	0e 94 b7 1c 	call	0x396e	; 0x396e <uart0_hal_send_break>
    4684:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00001f62 <datetime_to_BCD>:
	ts[1]=_tsbit.ts[2];
	ts[2]=_tsbit.ts[1];
	ts[3]=_tsbit.ts[0];
}

static void datetime_to_BCD(Datetime dt, DatetimeBCD *bcd){
    1f62:	1f 93       	push	r17
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <datetime_to_BCD+0x8>
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <datetime_to_BCD+0xa>
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <datetime_to_BCD+0xc>
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	f9 01       	movw	r30, r18
	bcd->second=decToBCD(dt.second);
    1f74:	3d ec       	ldi	r19, 0xCD	; 205
    1f76:	43 9f       	mul	r20, r19
    1f78:	21 2d       	mov	r18, r1
    1f7a:	11 24       	eor	r1, r1
    1f7c:	26 95       	lsr	r18
    1f7e:	26 95       	lsr	r18
    1f80:	26 95       	lsr	r18
    1f82:	10 e1       	ldi	r17, 0x10	; 16
    1f84:	21 9f       	mul	r18, r17
    1f86:	d0 01       	movw	r26, r0
    1f88:	11 24       	eor	r1, r1
    1f8a:	22 0f       	add	r18, r18
    1f8c:	b2 2f       	mov	r27, r18
    1f8e:	bb 0f       	add	r27, r27
    1f90:	bb 0f       	add	r27, r27
    1f92:	2b 0f       	add	r18, r27
    1f94:	42 1b       	sub	r20, r18
    1f96:	4a 2b       	or	r20, r26
    1f98:	40 83       	st	Z, r20
	bcd->minute=decToBCD(dt.minute);
    1f9a:	53 9f       	mul	r21, r19
    1f9c:	21 2d       	mov	r18, r1
    1f9e:	11 24       	eor	r1, r1
    1fa0:	26 95       	lsr	r18
    1fa2:	26 95       	lsr	r18
    1fa4:	26 95       	lsr	r18
    1fa6:	40 e1       	ldi	r20, 0x10	; 16
    1fa8:	24 9f       	mul	r18, r20
    1faa:	d0 01       	movw	r26, r0
    1fac:	11 24       	eor	r1, r1
    1fae:	22 0f       	add	r18, r18
    1fb0:	42 2f       	mov	r20, r18
    1fb2:	44 0f       	add	r20, r20
    1fb4:	44 0f       	add	r20, r20
    1fb6:	24 0f       	add	r18, r20
    1fb8:	52 1b       	sub	r21, r18
    1fba:	5a 2b       	or	r21, r26
    1fbc:	51 83       	std	Z+1, r21	; 0x01
	bcd->hour=decToBCD(dt.hour);
    1fbe:	63 9f       	mul	r22, r19
    1fc0:	41 2d       	mov	r20, r1
    1fc2:	11 24       	eor	r1, r1
    1fc4:	46 95       	lsr	r20
    1fc6:	46 95       	lsr	r20
    1fc8:	46 95       	lsr	r20
    1fca:	10 e1       	ldi	r17, 0x10	; 16
    1fcc:	41 9f       	mul	r20, r17
    1fce:	d0 01       	movw	r26, r0
    1fd0:	11 24       	eor	r1, r1
    1fd2:	44 0f       	add	r20, r20
    1fd4:	24 2f       	mov	r18, r20
    1fd6:	22 0f       	add	r18, r18
    1fd8:	22 0f       	add	r18, r18
    1fda:	42 0f       	add	r20, r18
    1fdc:	64 1b       	sub	r22, r20
    1fde:	6a 2b       	or	r22, r26
    1fe0:	62 83       	std	Z+2, r22	; 0x02
	bcd->day=decToBCD(dt.day);
    1fe2:	73 9f       	mul	r23, r19
    1fe4:	41 2d       	mov	r20, r1
    1fe6:	11 24       	eor	r1, r1
    1fe8:	46 95       	lsr	r20
    1fea:	46 95       	lsr	r20
    1fec:	46 95       	lsr	r20
    1fee:	20 e1       	ldi	r18, 0x10	; 16
    1ff0:	42 9f       	mul	r20, r18
    1ff2:	d0 01       	movw	r26, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	44 0f       	add	r20, r20
    1ff8:	24 2f       	mov	r18, r20
    1ffa:	22 0f       	add	r18, r18
    1ffc:	22 0f       	add	r18, r18
    1ffe:	42 0f       	add	r20, r18
    2000:	74 1b       	sub	r23, r20
    2002:	7a 2b       	or	r23, r26
    2004:	73 83       	std	Z+3, r23	; 0x03
	bcd->month=decToBCD(dt.month);
    2006:	83 9f       	mul	r24, r19
    2008:	41 2d       	mov	r20, r1
    200a:	11 24       	eor	r1, r1
    200c:	46 95       	lsr	r20
    200e:	46 95       	lsr	r20
    2010:	46 95       	lsr	r20
    2012:	10 e1       	ldi	r17, 0x10	; 16
    2014:	41 9f       	mul	r20, r17
    2016:	b0 01       	movw	r22, r0
    2018:	11 24       	eor	r1, r1
    201a:	44 0f       	add	r20, r20
    201c:	24 2f       	mov	r18, r20
    201e:	22 0f       	add	r18, r18
    2020:	22 0f       	add	r18, r18
    2022:	42 0f       	add	r20, r18
    2024:	84 1b       	sub	r24, r20
    2026:	86 2b       	or	r24, r22
    2028:	84 83       	std	Z+4, r24	; 0x04
	bcd->year=decToBCD(dt.year);
    202a:	93 9f       	mul	r25, r19
    202c:	31 2d       	mov	r19, r1
    202e:	11 24       	eor	r1, r1
    2030:	36 95       	lsr	r19
    2032:	36 95       	lsr	r19
    2034:	36 95       	lsr	r19
    2036:	20 e1       	ldi	r18, 0x10	; 16
    2038:	32 9f       	mul	r19, r18
    203a:	a0 01       	movw	r20, r0
    203c:	11 24       	eor	r1, r1
    203e:	33 0f       	add	r19, r19
    2040:	83 2f       	mov	r24, r19
    2042:	88 0f       	add	r24, r24
    2044:	88 0f       	add	r24, r24
    2046:	38 0f       	add	r19, r24
    2048:	93 1b       	sub	r25, r19
    204a:	94 2b       	or	r25, r20
    204c:	95 83       	std	Z+5, r25	; 0x05
}
    204e:	26 96       	adiw	r28, 0x06	; 6
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

0000198a <RTC_get_current_time>:
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_get_current_time(Datetime *dt){
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	27 97       	sbiw	r28, 0x07	; 7
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	8c 01       	movw	r16, r24
	uint8_t data[7];
	uint8_t status;
	
	status = TWI_API_write_data(RTC_ADDR, CMD_READ_TIME_POINTER, 1);
    19a4:	21 e0       	ldi	r18, 0x01	; 1
    19a6:	4a e2       	ldi	r20, 0x2A	; 42
    19a8:	56 e0       	ldi	r21, 0x06	; 6
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	81 e5       	ldi	r24, 0x51	; 81
    19ae:	0e 94 0c 22 	call	0x4418	; 0x4418 <TWI_API_write_data>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    19b2:	81 11       	cpse	r24, r1
    19b4:	7c c0       	rjmp	.+248    	; 0x1aae <RTC_get_current_time+0x124>
	
	status = TWI_API_repeat_read_data_stop(RTC_ADDR, data, 7);
    19b6:	47 e0       	ldi	r20, 0x07	; 7
    19b8:	be 01       	movw	r22, r28
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	81 e5       	ldi	r24, 0x51	; 81
    19c0:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <TWI_API_repeat_read_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    19c4:	81 11       	cpse	r24, r1
    19c6:	75 c0       	rjmp	.+234    	; 0x1ab2 <RTC_get_current_time+0x128>
	
	dt->second=BCDTodec((data[0] & 0x7F));
    19c8:	29 81       	ldd	r18, Y+1	; 0x01
    19ca:	82 2f       	mov	r24, r18
    19cc:	8f 77       	andi	r24, 0x7F	; 127
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	95 95       	asr	r25
    19d2:	87 95       	ror	r24
    19d4:	95 95       	asr	r25
    19d6:	87 95       	ror	r24
    19d8:	95 95       	asr	r25
    19da:	87 95       	ror	r24
    19dc:	95 95       	asr	r25
    19de:	87 95       	ror	r24
    19e0:	88 0f       	add	r24, r24
    19e2:	98 2f       	mov	r25, r24
    19e4:	99 0f       	add	r25, r25
    19e6:	99 0f       	add	r25, r25
    19e8:	89 0f       	add	r24, r25
    19ea:	2f 70       	andi	r18, 0x0F	; 15
    19ec:	82 0f       	add	r24, r18
    19ee:	f8 01       	movw	r30, r16
    19f0:	80 83       	st	Z, r24
	dt->minute=BCDTodec((data[1] & 0x7F));
    19f2:	2a 81       	ldd	r18, Y+2	; 0x02
    19f4:	82 2f       	mov	r24, r18
    19f6:	8f 77       	andi	r24, 0x7F	; 127
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	95 95       	asr	r25
    19fc:	87 95       	ror	r24
    19fe:	95 95       	asr	r25
    1a00:	87 95       	ror	r24
    1a02:	95 95       	asr	r25
    1a04:	87 95       	ror	r24
    1a06:	95 95       	asr	r25
    1a08:	87 95       	ror	r24
    1a0a:	88 0f       	add	r24, r24
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	99 0f       	add	r25, r25
    1a10:	99 0f       	add	r25, r25
    1a12:	89 0f       	add	r24, r25
    1a14:	2f 70       	andi	r18, 0x0F	; 15
    1a16:	82 0f       	add	r24, r18
    1a18:	81 83       	std	Z+1, r24	; 0x01
	dt->hour=BCDTodec((data[2] & 0x3F));
    1a1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1c:	82 2f       	mov	r24, r18
    1a1e:	8f 73       	andi	r24, 0x3F	; 63
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	95 95       	asr	r25
    1a24:	87 95       	ror	r24
    1a26:	95 95       	asr	r25
    1a28:	87 95       	ror	r24
    1a2a:	95 95       	asr	r25
    1a2c:	87 95       	ror	r24
    1a2e:	95 95       	asr	r25
    1a30:	87 95       	ror	r24
    1a32:	88 0f       	add	r24, r24
    1a34:	98 2f       	mov	r25, r24
    1a36:	99 0f       	add	r25, r25
    1a38:	99 0f       	add	r25, r25
    1a3a:	89 0f       	add	r24, r25
    1a3c:	2f 70       	andi	r18, 0x0F	; 15
    1a3e:	82 0f       	add	r24, r18
    1a40:	82 83       	std	Z+2, r24	; 0x02
	dt->day=BCDTodec((data[3] & 0x3F));
    1a42:	2c 81       	ldd	r18, Y+4	; 0x04
    1a44:	82 2f       	mov	r24, r18
    1a46:	8f 73       	andi	r24, 0x3F	; 63
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	95 95       	asr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	95 95       	asr	r25
    1a50:	87 95       	ror	r24
    1a52:	95 95       	asr	r25
    1a54:	87 95       	ror	r24
    1a56:	95 95       	asr	r25
    1a58:	87 95       	ror	r24
    1a5a:	88 0f       	add	r24, r24
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	99 0f       	add	r25, r25
    1a60:	99 0f       	add	r25, r25
    1a62:	89 0f       	add	r24, r25
    1a64:	2f 70       	andi	r18, 0x0F	; 15
    1a66:	82 0f       	add	r24, r18
    1a68:	83 83       	std	Z+3, r24	; 0x03
	dt->month=BCDTodec((data[5] & 0x1F));
    1a6a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6c:	82 2f       	mov	r24, r18
    1a6e:	8f 71       	andi	r24, 0x1F	; 31
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	95 95       	asr	r25
    1a74:	87 95       	ror	r24
    1a76:	95 95       	asr	r25
    1a78:	87 95       	ror	r24
    1a7a:	95 95       	asr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	95 95       	asr	r25
    1a80:	87 95       	ror	r24
    1a82:	88 0f       	add	r24, r24
    1a84:	98 2f       	mov	r25, r24
    1a86:	99 0f       	add	r25, r25
    1a88:	99 0f       	add	r25, r25
    1a8a:	89 0f       	add	r24, r25
    1a8c:	2f 70       	andi	r18, 0x0F	; 15
    1a8e:	82 0f       	add	r24, r18
    1a90:	84 83       	std	Z+4, r24	; 0x04
	dt->year=BCDTodec((data[6] & 0xFF));
    1a92:	8f 81       	ldd	r24, Y+7	; 0x07
    1a94:	98 2f       	mov	r25, r24
    1a96:	92 95       	swap	r25
    1a98:	9f 70       	andi	r25, 0x0F	; 15
    1a9a:	99 0f       	add	r25, r25
    1a9c:	29 2f       	mov	r18, r25
    1a9e:	22 0f       	add	r18, r18
    1aa0:	22 0f       	add	r18, r18
    1aa2:	92 0f       	add	r25, r18
    1aa4:	8f 70       	andi	r24, 0x0F	; 15
    1aa6:	89 0f       	add	r24, r25
    1aa8:	85 83       	std	Z+5, r24	; 0x05
	
	return RTC_STATUS_SUCCESS;
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	03 c0       	rjmp	.+6      	; 0x1ab4 <RTC_get_current_time+0x12a>
RTC_STATUS RTC_get_current_time(Datetime *dt){
	uint8_t data[7];
	uint8_t status;
	
	status = TWI_API_write_data(RTC_ADDR, CMD_READ_TIME_POINTER, 1);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <RTC_get_current_time+0x12a>
	
	status = TWI_API_repeat_read_data_stop(RTC_ADDR, data, 7);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
	dt->day=BCDTodec((data[3] & 0x3F));
	dt->month=BCDTodec((data[5] & 0x1F));
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}
    1ab4:	27 96       	adiw	r28, 0x07	; 7
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

00003174 <RTC_set_current_time>:

RTC_STATUS RTC_set_current_time(Datetime dt){
    3174:	cf 93       	push	r28
    3176:	df 93       	push	r29
    3178:	cd b7       	in	r28, 0x3d	; 61
    317a:	de b7       	in	r29, 0x3e	; 62
    317c:	64 97       	sbiw	r28, 0x14	; 20
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    3188:	9e 01       	movw	r18, r28
    318a:	27 5f       	subi	r18, 0xF7	; 247
    318c:	3f 4f       	sbci	r19, 0xFF	; 255
    318e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <datetime_to_BCD>
	
	data[0]=0x02;
    3192:	82 e0       	ldi	r24, 0x02	; 2
    3194:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    3196:	89 85       	ldd	r24, Y+9	; 0x09
    3198:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    319a:	8a 85       	ldd	r24, Y+10	; 0x0a
    319c:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    319e:	8b 85       	ldd	r24, Y+11	; 0x0b
    31a0:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    31a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    31a4:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    31a6:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    31a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31aa:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    31ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    31ae:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    31b0:	ae 01       	movw	r20, r28
    31b2:	4f 5f       	subi	r20, 0xFF	; 255
    31b4:	5f 4f       	sbci	r21, 0xFF	; 255
    31b6:	60 e8       	ldi	r22, 0x80	; 128
    31b8:	28 e0       	ldi	r18, 0x08	; 8
    31ba:	81 e5       	ldi	r24, 0x51	; 81
    31bc:	0e 94 80 21 	call	0x4300	; 0x4300 <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    31c0:	88 23       	and	r24, r24
    31c2:	11 f0       	breq	.+4      	; 0x31c8 <RTC_set_current_time+0x54>
    31c4:	82 e0       	ldi	r24, 0x02	; 2
    31c6:	01 c0       	rjmp	.+2      	; 0x31ca <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    31c8:	80 e0       	ldi	r24, 0x00	; 0
}
    31ca:	64 96       	adiw	r28, 0x14	; 20
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	08 95       	ret

Disassembly of section .text.clear_sampling_data:

00003894 <clear_sampling_data>:
	vect_SCD_do_sample();
	
	//Start timer
	TC1_HAL_start();
	return true;
}
    3894:	e9 ea       	ldi	r30, 0xA9	; 169
    3896:	f6 e0       	ldi	r31, 0x06	; 6
    3898:	11 82       	std	Z+1, r1	; 0x01
    389a:	10 82       	st	Z, r1
    389c:	15 82       	std	Z+5, r1	; 0x05
    389e:	14 82       	std	Z+4, r1	; 0x04
    38a0:	13 82       	std	Z+3, r1	; 0x03
    38a2:	12 82       	std	Z+2, r1	; 0x02
    38a4:	e3 ea       	ldi	r30, 0xA3	; 163
    38a6:	f6 e0       	ldi	r31, 0x06	; 6
    38a8:	11 82       	std	Z+1, r1	; 0x01
    38aa:	10 82       	st	Z, r1
    38ac:	15 82       	std	Z+5, r1	; 0x05
    38ae:	14 82       	std	Z+4, r1	; 0x04
    38b0:	13 82       	std	Z+3, r1	; 0x03
    38b2:	12 82       	std	Z+2, r1	; 0x02
    38b4:	ed e9       	ldi	r30, 0x9D	; 157
    38b6:	f6 e0       	ldi	r31, 0x06	; 6
    38b8:	11 82       	std	Z+1, r1	; 0x01
    38ba:	10 82       	st	Z, r1
    38bc:	15 82       	std	Z+5, r1	; 0x05
    38be:	14 82       	std	Z+4, r1	; 0x04
    38c0:	13 82       	std	Z+3, r1	; 0x03
    38c2:	12 82       	std	Z+2, r1	; 0x02
    38c4:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <lowest_si+0x1>
    38c8:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <lowest_si>
    38cc:	10 92 ca 06 	sts	0x06CA, r1	; 0x8006ca <highest_si+0x1>
    38d0:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <highest_si>
    38d4:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <si_counter+0x1>
    38d8:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <si_counter>
    38dc:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

000031dc <bytes_2_uint>:
    31dc:	cf 92       	push	r12
    31de:	df 92       	push	r13
    31e0:	ef 92       	push	r14
    31e2:	ff 92       	push	r15
    31e4:	0f 93       	push	r16
    31e6:	1f 93       	push	r17
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
    31ec:	fc 01       	movw	r30, r24
    31ee:	04 81       	ldd	r16, Z+4	; 0x04
    31f0:	13 81       	ldd	r17, Z+3	; 0x03
    31f2:	d1 81       	ldd	r29, Z+1	; 0x01
    31f4:	c0 81       	ld	r28, Z
    31f6:	70 e0       	ldi	r23, 0x00	; 0
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__floatsisf>
    3200:	9b 01       	movw	r18, r22
    3202:	ac 01       	movw	r20, r24
    3204:	60 2f       	mov	r22, r16
    3206:	71 2f       	mov	r23, r17
    3208:	8d 2f       	mov	r24, r29
    320a:	9c 2f       	mov	r25, r28
    320c:	0e 94 47 23 	call	0x468e	; 0x468e <__mulsf3>
    3210:	6b 01       	movw	r12, r22
    3212:	7c 01       	movw	r14, r24
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	a9 01       	movw	r20, r18
    321a:	0e 94 25 23 	call	0x464a	; 0x464a <__cmpsf2>
    321e:	88 23       	and	r24, r24
    3220:	34 f0       	brlt	.+12     	; 0x322e <bytes_2_uint+0x52>
    3222:	c7 01       	movw	r24, r14
    3224:	b6 01       	movw	r22, r12
    3226:	0e 94 22 19 	call	0x3244	; 0x3244 <__fixunssfsi>
    322a:	cb 01       	movw	r24, r22
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <bytes_2_uint+0x56>
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	1f 91       	pop	r17
    3238:	0f 91       	pop	r16
    323a:	ff 90       	pop	r15
    323c:	ef 90       	pop	r14
    323e:	df 90       	pop	r13
    3240:	cf 90       	pop	r12
    3242:	08 95       	ret

Disassembly of section .text.init_measurement:

00003d32 <init_measurement>:
    3d32:	25 e0       	ldi	r18, 0x05	; 5
    3d34:	4e e1       	ldi	r20, 0x1E	; 30
    3d36:	56 e0       	ldi	r21, 0x06	; 6
    3d38:	60 e0       	ldi	r22, 0x00	; 0
    3d3a:	81 e6       	ldi	r24, 0x61	; 97
    3d3c:	0e 94 80 21 	call	0x4300	; 0x4300 <TWI_API_write_data_stop>
    3d40:	81 11       	cpse	r24, r1
    3d42:	0f c0       	rjmp	.+30     	; 0x3d62 <init_measurement+0x30>
    3d44:	25 e0       	ldi	r18, 0x05	; 5
    3d46:	43 e2       	ldi	r20, 0x23	; 35
    3d48:	56 e0       	ldi	r21, 0x06	; 6
    3d4a:	60 e0       	ldi	r22, 0x00	; 0
    3d4c:	81 e6       	ldi	r24, 0x61	; 97
    3d4e:	0e 94 80 21 	call	0x4300	; 0x4300 <TWI_API_write_data_stop>
    3d52:	81 11       	cpse	r24, r1
    3d54:	08 c0       	rjmp	.+16     	; 0x3d66 <init_measurement+0x34>
    3d56:	0e 94 16 23 	call	0x462c	; 0x462c <SCD30_HAL_data_ready>
    3d5a:	88 23       	and	r24, r24
    3d5c:	e1 f3       	breq	.-8      	; 0x3d56 <init_measurement+0x24>
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	08 95       	ret
    3d62:	82 e0       	ldi	r24, 0x02	; 2
    3d64:	08 95       	ret
    3d66:	82 e0       	ldi	r24, 0x02	; 2
    3d68:	08 95       	ret

Disassembly of section .text.validate_data:

00003eaa <validate_data>:
    3eaa:	cf 93       	push	r28
    3eac:	df 93       	push	r29
    3eae:	ec 01       	movw	r28, r24
    3eb0:	62 e0       	ldi	r22, 0x02	; 2
    3eb2:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <calc_crc8>
    3eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb8:	89 13       	cpse	r24, r25
    3eba:	0a c0       	rjmp	.+20     	; 0x3ed0 <validate_data+0x26>
    3ebc:	62 e0       	ldi	r22, 0x02	; 2
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	03 96       	adiw	r24, 0x03	; 3
    3ec2:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <calc_crc8>
    3ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ec8:	89 17       	cp	r24, r25
    3eca:	21 f0       	breq	.+8      	; 0x3ed4 <validate_data+0x2a>
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	03 c0       	rjmp	.+6      	; 0x3ed6 <validate_data+0x2c>
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	01 c0       	rjmp	.+2      	; 0x3ed6 <validate_data+0x2c>
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	df 91       	pop	r29
    3ed8:	cf 91       	pop	r28
    3eda:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

0000415e <SCD30_sensor_on>:
/************************************************************************/
/* Definitions                                                          */
/************************************************************************/

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    415e:	0e 94 71 22 	call	0x44e2	; 0x44e2 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <PM_HAL_SCD30_power>
    4168:	2f ef       	ldi	r18, 0xFF	; 255
    416a:	83 ed       	ldi	r24, 0xD3	; 211
    416c:	90 e3       	ldi	r25, 0x30	; 48
    416e:	21 50       	subi	r18, 0x01	; 1
    4170:	80 40       	sbci	r24, 0x00	; 0
    4172:	90 40       	sbci	r25, 0x00	; 0
    4174:	e1 f7       	brne	.-8      	; 0x416e <SCD30_sensor_on+0x10>
    4176:	00 c0       	rjmp	.+0      	; 0x4178 <SCD30_sensor_on+0x1a>
    4178:	00 00       	nop
	_delay_ms(2000);
	clear_sampling_data();
    417a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <clear_sampling_data>
	return init_measurement();
    417e:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <init_measurement>
}
    4182:	08 95       	ret

Disassembly of section .text.read_all_values:

00001e4c <read_all_values>:
	vect_SCD_do_sample();
	
	//Start timer
	TC1_HAL_start();
	return true;
}
    1e4c:	cf 92       	push	r12
    1e4e:	df 92       	push	r13
    1e50:	ef 92       	push	r14
    1e52:	ff 92       	push	r15
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	62 97       	sbiw	r28, 0x12	; 18
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	8c 01       	movw	r16, r24
    1e6e:	7b 01       	movw	r14, r22
    1e70:	6a 01       	movw	r12, r20
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
    1e74:	9f ef       	ldi	r25, 0xFF	; 255
    1e76:	f8 01       	movw	r30, r16
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	fb 01       	movw	r30, r22
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	80 83       	st	Z, r24
    1e82:	fa 01       	movw	r30, r20
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
    1e88:	0e 94 16 23 	call	0x462c	; 0x462c <SCD30_HAL_data_ready>
    1e8c:	81 11       	cpse	r24, r1
    1e8e:	0d c0       	rjmp	.+26     	; 0x1eaa <read_all_values+0x5e>
    1e90:	8e ef       	ldi	r24, 0xFE	; 254
    1e92:	9f ef       	ldi	r25, 0xFF	; 255
    1e94:	f8 01       	movw	r30, r16
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	80 83       	st	Z, r24
    1e9a:	f7 01       	movw	r30, r14
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	80 83       	st	Z, r24
    1ea0:	f6 01       	movw	r30, r12
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	80 83       	st	Z, r24
    1ea6:	83 e0       	ldi	r24, 0x03	; 3
    1ea8:	4d c0       	rjmp	.+154    	; 0x1f44 <read_all_values+0xf8>
    1eaa:	22 e0       	ldi	r18, 0x02	; 2
    1eac:	48 e2       	ldi	r20, 0x28	; 40
    1eae:	56 e0       	ldi	r21, 0x06	; 6
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	81 e6       	ldi	r24, 0x61	; 97
    1eb4:	0e 94 80 21 	call	0x4300	; 0x4300 <TWI_API_write_data_stop>
    1eb8:	81 11       	cpse	r24, r1
    1eba:	3b c0       	rjmp	.+118    	; 0x1f32 <read_all_values+0xe6>
    1ebc:	8f e3       	ldi	r24, 0x3F	; 63
    1ebe:	9f e1       	ldi	r25, 0x1F	; 31
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <read_all_values+0x74>
    1ec4:	00 c0       	rjmp	.+0      	; 0x1ec6 <read_all_values+0x7a>
    1ec6:	00 00       	nop
    1ec8:	42 e1       	ldi	r20, 0x12	; 18
    1eca:	be 01       	movw	r22, r28
    1ecc:	6f 5f       	subi	r22, 0xFF	; 255
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed0:	81 e6       	ldi	r24, 0x61	; 97
    1ed2:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <TWI_API_read_data_ack_end_nack_stop>
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	2e c0       	rjmp	.+92     	; 0x1f36 <read_all_values+0xea>
    1eda:	ce 01       	movw	r24, r28
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <validate_data>
    1ee2:	88 23       	and	r24, r24
    1ee4:	51 f1       	breq	.+84     	; 0x1f3a <read_all_values+0xee>
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	ce 01       	movw	r24, r28
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	0e 94 ee 18 	call	0x31dc	; 0x31dc <bytes_2_uint>
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	80 83       	st	Z, r24
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	07 96       	adiw	r24, 0x07	; 7
    1efa:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <validate_data>
    1efe:	88 23       	and	r24, r24
    1f00:	f1 f0       	breq	.+60     	; 0x1f3e <read_all_values+0xf2>
    1f02:	6a e0       	ldi	r22, 0x0A	; 10
    1f04:	ce 01       	movw	r24, r28
    1f06:	07 96       	adiw	r24, 0x07	; 7
    1f08:	0e 94 ee 18 	call	0x31dc	; 0x31dc <bytes_2_uint>
    1f0c:	f7 01       	movw	r30, r14
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
    1f12:	ce 01       	movw	r24, r28
    1f14:	0d 96       	adiw	r24, 0x0d	; 13
    1f16:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <validate_data>
    1f1a:	88 23       	and	r24, r24
    1f1c:	91 f0       	breq	.+36     	; 0x1f42 <read_all_values+0xf6>
    1f1e:	6a e0       	ldi	r22, 0x0A	; 10
    1f20:	ce 01       	movw	r24, r28
    1f22:	0d 96       	adiw	r24, 0x0d	; 13
    1f24:	0e 94 ee 18 	call	0x31dc	; 0x31dc <bytes_2_uint>
    1f28:	f6 01       	movw	r30, r12
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    1f2c:	80 83       	st	Z, r24
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	09 c0       	rjmp	.+18     	; 0x1f44 <read_all_values+0xf8>
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	07 c0       	rjmp	.+14     	; 0x1f44 <read_all_values+0xf8>
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	05 c0       	rjmp	.+10     	; 0x1f44 <read_all_values+0xf8>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	03 c0       	rjmp	.+6      	; 0x1f44 <read_all_values+0xf8>
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	01 c0       	rjmp	.+2      	; 0x1f44 <read_all_values+0xf8>
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	62 96       	adiw	r28, 0x12	; 18
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	ff 90       	pop	r15
    1f5a:	ef 90       	pop	r14
    1f5c:	df 90       	pop	r13
    1f5e:	cf 90       	pop	r12
    1f60:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00003edc <SCD30_get_reading>:
	if(temp_SI % *lowest != 0) return false;
	if(hum_SI % *lowest != 0) return false;
	return true;
}

SCD30_STATUS SCD30_get_reading(uint16_t *co2, uint16_t *temp, uint16_t *humidity){
    3edc:	ef 92       	push	r14
    3ede:	ff 92       	push	r15
    3ee0:	0f 93       	push	r16
    3ee2:	1f 93       	push	r17
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	ec 01       	movw	r28, r24
    3eea:	8b 01       	movw	r16, r22
    3eec:	7a 01       	movw	r14, r20
	while(!SCD30_HAL_data_ready()){};
    3eee:	0e 94 16 23 	call	0x462c	; 0x462c <SCD30_HAL_data_ready>
    3ef2:	88 23       	and	r24, r24
    3ef4:	e1 f3       	breq	.-8      	; 0x3eee <SCD30_get_reading+0x12>
	
	return read_all_values(co2, temp, humidity);
    3ef6:	a7 01       	movw	r20, r14
    3ef8:	b8 01       	movw	r22, r16
    3efa:	ce 01       	movw	r24, r28
    3efc:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <read_all_values>
}
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	1f 91       	pop	r17
    3f06:	0f 91       	pop	r16
    3f08:	ff 90       	pop	r15
    3f0a:	ef 90       	pop	r14
    3f0c:	08 95       	ret

Disassembly of section .text.parse_cmd:

00004000 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    4000:	fc 01       	movw	r30, r24
    4002:	80 81       	ld	r24, Z
    4004:	82 37       	cpi	r24, 0x72	; 114
    4006:	51 f0       	breq	.+20     	; 0x401c <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    4008:	87 37       	cpi	r24, 0x77	; 119
    400a:	51 f0       	breq	.+20     	; 0x4020 <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    400c:	83 36       	cpi	r24, 0x63	; 99
    400e:	51 f0       	breq	.+20     	; 0x4024 <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    4010:	83 37       	cpi	r24, 0x73	; 115
    4012:	51 f0       	breq	.+20     	; 0x4028 <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    4014:	81 37       	cpi	r24, 0x71	; 113
    4016:	51 f4       	brne	.+20     	; 0x402c <parse_cmd+0x2c>
    4018:	84 e0       	ldi	r24, 0x04	; 4
    401a:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    401c:	87 e0       	ldi	r24, 0x07	; 7
    401e:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    4020:	88 e0       	ldi	r24, 0x08	; 8
    4022:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    4024:	89 e0       	ldi	r24, 0x09	; 9
    4026:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    4028:	8a e0       	ldi	r24, 0x0A	; 10
    402a:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    402c:	85 e0       	ldi	r24, 0x05	; 5
}
    402e:	08 95       	ret

Disassembly of section .text.validate_cmd:

000033aa <validate_cmd>:

static bool validate_cmd(char msg[]){
    33aa:	cf 93       	push	r28
    33ac:	df 93       	push	r29
    33ae:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    33b0:	bc 01       	movw	r22, r24
    33b2:	80 e8       	ldi	r24, 0x80	; 128
    33b4:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    33b8:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    33ba:	fc 01       	movw	r30, r24
    33bc:	31 97       	sbiw	r30, 0x01	; 1
    33be:	ec 0f       	add	r30, r28
    33c0:	fd 1f       	adc	r31, r29
    33c2:	80 81       	ld	r24, Z
    33c4:	80 32       	cpi	r24, 0x20	; 32
    33c6:	b1 f0       	breq	.+44     	; 0x33f4 <validate_cmd+0x4a>
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	40 e0       	ldi	r20, 0x00	; 0
    33ce:	0d c0       	rjmp	.+26     	; 0x33ea <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    33d0:	fe 01       	movw	r30, r28
    33d2:	e2 0f       	add	r30, r18
    33d4:	f3 1f       	adc	r31, r19
    33d6:	90 81       	ld	r25, Z
    33d8:	90 32       	cpi	r25, 0x20	; 32
    33da:	21 f4       	brne	.+8      	; 0x33e4 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    33dc:	41 11       	cpse	r20, r1
    33de:	0c c0       	rjmp	.+24     	; 0x33f8 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    33e0:	41 e0       	ldi	r20, 0x01	; 1
    33e2:	01 c0       	rjmp	.+2      	; 0x33e6 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    33e4:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    33e6:	2f 5f       	subi	r18, 0xFF	; 255
    33e8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ea:	26 17       	cp	r18, r22
    33ec:	37 07       	cpc	r19, r23
    33ee:	80 f3       	brcs	.-32     	; 0x33d0 <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	03 c0       	rjmp	.+6      	; 0x33fa <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    33f8:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	08 95       	ret

Disassembly of section .text.CONF_enter:

00001aca <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    1aca:	cf 93       	push	r28
	uart1_hal_init();
    1acc:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    1ad0:	c0 e0       	ldi	r28, 0x00	; 0
    1ad2:	0d c0       	rjmp	.+26     	; 0x1aee <CONF_enter+0x24>
				TC2_HAL_init();
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    1ad4:	c2 e0       	ldi	r28, 0x02	; 2
    1ad6:	0b c0       	rjmp	.+22     	; 0x1aee <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    1ad8:	c5 e0       	ldi	r28, 0x05	; 5
    1ada:	09 c0       	rjmp	.+18     	; 0x1aee <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    1adc:	c6 e0       	ldi	r28, 0x06	; 6
    1ade:	07 c0       	rjmp	.+14     	; 0x1aee <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1ae0:	c5 e0       	ldi	r28, 0x05	; 5
    1ae2:	05 c0       	rjmp	.+10     	; 0x1aee <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1ae4:	c5 e0       	ldi	r28, 0x05	; 5
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    1ae8:	c5 e0       	ldi	r28, 0x05	; 5
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1aec:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    1aee:	ec 2f       	mov	r30, r28
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	ec 30       	cpi	r30, 0x0C	; 12
    1af4:	f1 05       	cpc	r31, r1
    1af6:	d8 f7       	brcc	.-10     	; 0x1aee <CONF_enter+0x24>
    1af8:	e2 5c       	subi	r30, 0xC2	; 194
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    1b00:	63 e6       	ldi	r22, 0x63	; 99
    1b02:	74 e0       	ldi	r23, 0x04	; 4
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    1b0a:	69 e8       	ldi	r22, 0x89	; 137
    1b0c:	74 e0       	ldi	r23, 0x04	; 4
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				TC2_HAL_init();
    1b14:	0e 94 f7 20 	call	0x41ee	; 0x41ee <TC2_HAL_init>
				if(!init_methane_SCD30()){
    1b18:	0e 94 9b 20 	call	0x4136	; 0x4136 <init_methane_SCD30>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	da cf       	rjmp	.-76     	; 0x1ad4 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    1b20:	6b ea       	ldi	r22, 0xAB	; 171
    1b22:	74 e0       	ldi	r23, 0x04	; 4
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
					state=CONF_EXIT;
    1b2a:	c4 e0       	ldi	r28, 0x04	; 4
    1b2c:	e0 cf       	rjmp	.-64     	; 0x1aee <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    1b2e:	0e 94 7f 22 	call	0x44fe	; 0x44fe <uart1_hal_message_ready>
    1b32:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    1b34:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    1b36:	0e 94 86 22 	call	0x450c	; 0x450c <uart1_hal_rx_full>
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	cd cf       	rjmp	.-102    	; 0x1ad8 <CONF_enter+0xe>
    1b3e:	d7 cf       	rjmp	.-82     	; 0x1aee <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    1b40:	82 e5       	ldi	r24, 0x52	; 82
    1b42:	94 e0       	ldi	r25, 0x04	; 4
    1b44:	0e 94 87 20 	call	0x410e	; 0x410e <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    1b48:	82 e5       	ldi	r24, 0x52	; 82
    1b4a:	94 e0       	ldi	r25, 0x04	; 4
    1b4c:	0e 94 d5 19 	call	0x33aa	; 0x33aa <validate_cmd>
    1b50:	88 23       	and	r24, r24
    1b52:	21 f2       	breq	.-120    	; 0x1adc <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    1b54:	82 e5       	ldi	r24, 0x52	; 82
    1b56:	94 e0       	ldi	r25, 0x04	; 4
    1b58:	0e 94 00 20 	call	0x4000	; 0x4000 <parse_cmd>
    1b5c:	c8 2f       	mov	r28, r24
    1b5e:	c7 cf       	rjmp	.-114    	; 0x1aee <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    1b60:	62 e5       	ldi	r22, 0x52	; 82
    1b62:	74 e0       	ldi	r23, 0x04	; 4
    1b64:	80 e8       	ldi	r24, 0x80	; 128
    1b66:	4a e8       	ldi	r20, 0x8A	; 138
    1b68:	53 e0       	ldi	r21, 0x03	; 3
    1b6a:	0e 94 26 08 	call	0x104c	; 0x104c <handle_read>
    1b6e:	88 23       	and	r24, r24
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <CONF_enter+0xaa>
    1b72:	b6 cf       	rjmp	.-148    	; 0x1ae0 <CONF_enter+0x16>
					state=CONF_REPLY;
    1b74:	cb e0       	ldi	r28, 0x0B	; 11
    1b76:	bb cf       	rjmp	.-138    	; 0x1aee <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    1b78:	62 e5       	ldi	r22, 0x52	; 82
    1b7a:	74 e0       	ldi	r23, 0x04	; 4
    1b7c:	80 e8       	ldi	r24, 0x80	; 128
    1b7e:	4a e8       	ldi	r20, 0x8A	; 138
    1b80:	53 e0       	ldi	r21, 0x03	; 3
    1b82:	0e 94 77 09 	call	0x12ee	; 0x12ee <handle_write>
    1b86:	88 23       	and	r24, r24
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <CONF_enter+0xc2>
    1b8a:	ac cf       	rjmp	.-168    	; 0x1ae4 <CONF_enter+0x1a>
					state=CONF_REPLY;
    1b8c:	cb e0       	ldi	r28, 0x0B	; 11
    1b8e:	af cf       	rjmp	.-162    	; 0x1aee <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    1b90:	62 e5       	ldi	r22, 0x52	; 82
    1b92:	74 e0       	ldi	r23, 0x04	; 4
    1b94:	80 e8       	ldi	r24, 0x80	; 128
    1b96:	0e 94 2a 1a 	call	0x3454	; 0x3454 <CONNECT>
    1b9a:	88 23       	and	r24, r24
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <CONF_enter+0xd6>
    1b9e:	a4 cf       	rjmp	.-184    	; 0x1ae8 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    1ba0:	c2 e0       	ldi	r28, 0x02	; 2
    1ba2:	a5 cf       	rjmp	.-182    	; 0x1aee <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
    1ba4:	62 e5       	ldi	r22, 0x52	; 82
    1ba6:	74 e0       	ldi	r23, 0x04	; 4
    1ba8:	80 e8       	ldi	r24, 0x80	; 128
    1baa:	4a e8       	ldi	r20, 0x8A	; 138
    1bac:	53 e0       	ldi	r21, 0x03	; 3
    1bae:	0e 94 1d 13 	call	0x263a	; 0x263a <handle_sensor>
    1bb2:	88 23       	and	r24, r24
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <CONF_enter+0xee>
    1bb6:	9a cf       	rjmp	.-204    	; 0x1aec <CONF_enter+0x22>
					state=CONF_REPLY;
    1bb8:	cb e0       	ldi	r28, 0x0B	; 11
    1bba:	99 cf       	rjmp	.-206    	; 0x1aee <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    1bbc:	6a e8       	ldi	r22, 0x8A	; 138
    1bbe:	73 e0       	ldi	r23, 0x03	; 3
    1bc0:	80 e8       	ldi	r24, 0x80	; 128
    1bc2:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1bc6:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1bc8:	92 cf       	rjmp	.-220    	; 0x1aee <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    1bca:	6a ec       	ldi	r22, 0xCA	; 202
    1bcc:	74 e0       	ldi	r23, 0x04	; 4
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1bd4:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1bd6:	8b cf       	rjmp	.-234    	; 0x1aee <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    1bd8:	64 ed       	ldi	r22, 0xD4	; 212
    1bda:	74 e0       	ldi	r23, 0x04	; 4
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1be2:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1be4:	84 cf       	rjmp	.-248    	; 0x1aee <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    1be6:	0e 94 20 23 	call	0x4640	; 0x4640 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    1bea:	61 ee       	ldi	r22, 0xE1	; 225
    1bec:	74 e0       	ldi	r23, 0x04	; 4
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    1bf4:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1bf6:	7b cf       	rjmp	.-266    	; 0x1aee <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    1bf8:	67 e0       	ldi	r22, 0x07	; 7
    1bfa:	75 e0       	ldi	r23, 0x05	; 5
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				return;
		}
	}
}
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

0000309e <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    309e:	cf 92       	push	r12
    30a0:	df 92       	push	r13
    30a2:	ef 92       	push	r14
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    30a8:	6c 01       	movw	r12, r24
    30aa:	20 e8       	ldi	r18, 0x80	; 128
    30ac:	e2 2e       	mov	r14, r18
    30ae:	04 e0       	ldi	r16, 0x04	; 4
    30b0:	10 e0       	ldi	r17, 0x00	; 0
    30b2:	2f e0       	ldi	r18, 0x0F	; 15
    30b4:	35 e0       	ldi	r19, 0x05	; 5
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	8e 2d       	mov	r24, r14
    30ba:	b6 01       	movw	r22, r12
    30bc:	0e 94 85 18 	call	0x310a	; 0x310a <strncmp>
    30c0:	89 2b       	or	r24, r25
    30c2:	c1 f0       	breq	.+48     	; 0x30f4 <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    30c4:	05 e0       	ldi	r16, 0x05	; 5
    30c6:	10 e0       	ldi	r17, 0x00	; 0
    30c8:	24 e1       	ldi	r18, 0x14	; 20
    30ca:	35 e0       	ldi	r19, 0x05	; 5
    30cc:	40 e0       	ldi	r20, 0x00	; 0
    30ce:	8e 2d       	mov	r24, r14
    30d0:	b6 01       	movw	r22, r12
    30d2:	0e 94 85 18 	call	0x310a	; 0x310a <strncmp>
    30d6:	89 2b       	or	r24, r25
    30d8:	79 f0       	breq	.+30     	; 0x30f8 <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    30da:	04 e0       	ldi	r16, 0x04	; 4
    30dc:	10 e0       	ldi	r17, 0x00	; 0
    30de:	2a e1       	ldi	r18, 0x1A	; 26
    30e0:	35 e0       	ldi	r19, 0x05	; 5
    30e2:	40 e0       	ldi	r20, 0x00	; 0
    30e4:	8e 2d       	mov	r24, r14
    30e6:	b6 01       	movw	r22, r12
    30e8:	0e 94 85 18 	call	0x310a	; 0x310a <strncmp>
    30ec:	89 2b       	or	r24, r25
    30ee:	31 f4       	brne	.+12     	; 0x30fc <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    30f0:	85 e0       	ldi	r24, 0x05	; 5
    30f2:	05 c0       	rjmp	.+10     	; 0x30fe <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    30f4:	86 e0       	ldi	r24, 0x06	; 6
    30f6:	03 c0       	rjmp	.+6      	; 0x30fe <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    30f8:	84 e0       	ldi	r24, 0x04	; 4
    30fa:	01 c0       	rjmp	.+2      	; 0x30fe <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    30fc:	83 e0       	ldi	r24, 0x03	; 3
    30fe:	1f 91       	pop	r17
    3100:	0f 91       	pop	r16
    3102:	ef 90       	pop	r14
    3104:	df 90       	pop	r13
    3106:	cf 90       	pop	r12
    3108:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001824 <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    1824:	6f 92       	push	r6
    1826:	7f 92       	push	r7
    1828:	8f 92       	push	r8
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1834:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1836:	ec 2f       	mov	r30, r28
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	e7 30       	cpi	r30, 0x07	; 7
    183c:	f1 05       	cpc	r31, r1
    183e:	d8 f7       	brcc	.-10     	; 0x1836 <CON_RN2483+0x12>
    1840:	e6 5b       	subi	r30, 0xB6	; 182
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    1848:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <uart0_hal_init>
				rn2483_init();
    184c:	0e 94 2f 23 	call	0x465e	; 0x465e <rn2483_init>
				LM_reset_module();
    1850:	0e 94 52 23 	call	0x46a4	; 0x46a4 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1854:	6f e1       	ldi	r22, 0x1F	; 31
    1856:	75 e0       	ldi	r23, 0x05	; 5
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				state=CL_READ_MSG;
    185e:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1860:	ea cf       	rjmp	.-44     	; 0x1836 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1862:	0e 94 7f 22 	call	0x44fe	; 0x44fe <uart1_hal_message_ready>
    1866:	88 23       	and	r24, r24
    1868:	31 f3       	breq	.-52     	; 0x1836 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    186a:	82 e5       	ldi	r24, 0x52	; 82
    186c:	94 e0       	ldi	r25, 0x04	; 4
    186e:	0e 94 87 20 	call	0x410e	; 0x410e <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1872:	c2 e0       	ldi	r28, 0x02	; 2
    1874:	e0 cf       	rjmp	.-64     	; 0x1836 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    1876:	82 e5       	ldi	r24, 0x52	; 82
    1878:	94 e0       	ldi	r25, 0x04	; 4
    187a:	0e 94 4f 18 	call	0x309e	; 0x309e <CON_RN2483_parse>
    187e:	c8 2f       	mov	r28, r24
			break;
    1880:	da cf       	rjmp	.-76     	; 0x1836 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1882:	82 e5       	ldi	r24, 0x52	; 82
    1884:	94 e0       	ldi	r25, 0x04	; 4
    1886:	6c 01       	movw	r12, r24
    1888:	20 e8       	ldi	r18, 0x80	; 128
    188a:	e2 2e       	mov	r14, r18
    188c:	2f 93       	push	r18
    188e:	df 92       	push	r13
    1890:	8f 93       	push	r24
    1892:	85 e5       	ldi	r24, 0x55	; 85
    1894:	95 e0       	ldi	r25, 0x05	; 5
    1896:	a0 e0       	ldi	r26, 0x00	; 0
    1898:	af 93       	push	r26
    189a:	9f 93       	push	r25
    189c:	8f 93       	push	r24
    189e:	ca e8       	ldi	r28, 0x8A	; 138
    18a0:	d3 e0       	ldi	r29, 0x03	; 3
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
				uart1_hal_send_string(cnf_reply);
    18aa:	3e 01       	movw	r6, r28
    18ac:	20 e8       	ldi	r18, 0x80	; 128
    18ae:	82 2e       	mov	r8, r18
    18b0:	88 2d       	mov	r24, r8
    18b2:	b3 01       	movw	r22, r6
    18b4:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    18b8:	ae 01       	movw	r20, r28
    18ba:	6c 2d       	mov	r22, r12
    18bc:	7d 2d       	mov	r23, r13
    18be:	8e 2d       	mov	r24, r14
    18c0:	0e 94 55 23 	call	0x46aa	; 0x46aa <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    18c4:	88 2d       	mov	r24, r8
    18c6:	b3 01       	movw	r22, r6
    18c8:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    18cc:	8d b7       	in	r24, 0x3d	; 61
    18ce:	9e b7       	in	r25, 0x3e	; 62
    18d0:	08 96       	adiw	r24, 0x08	; 8
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	9e bf       	out	0x3e, r25	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    18dc:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    18de:	ab cf       	rjmp	.-170    	; 0x1836 <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    18e0:	8b e5       	ldi	r24, 0x5B	; 91
    18e2:	95 e0       	ldi	r25, 0x05	; 5
    18e4:	a0 e0       	ldi	r26, 0x00	; 0
    18e6:	af 93       	push	r26
    18e8:	9f 93       	push	r25
    18ea:	8f 93       	push	r24
    18ec:	85 e5       	ldi	r24, 0x55	; 85
    18ee:	95 e0       	ldi	r25, 0x05	; 5
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	af 93       	push	r26
    18f4:	9f 93       	push	r25
    18f6:	8f 93       	push	r24
    18f8:	ca e8       	ldi	r28, 0x8A	; 138
    18fa:	d3 e0       	ldi	r29, 0x03	; 3
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
				uart1_hal_send_string(cnf_reply);
    1904:	be 01       	movw	r22, r28
    1906:	80 e8       	ldi	r24, 0x80	; 128
    1908:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
    190c:	8f e7       	ldi	r24, 0x7F	; 127
    190e:	98 e3       	ldi	r25, 0x38	; 56
    1910:	21 e0       	ldi	r18, 0x01	; 1
    1912:	81 50       	subi	r24, 0x01	; 1
    1914:	90 40       	sbci	r25, 0x00	; 0
    1916:	20 40       	sbci	r18, 0x00	; 0
    1918:	e1 f7       	brne	.-8      	; 0x1912 <CON_RN2483+0xee>
    191a:	00 c0       	rjmp	.+0      	; 0x191c <CON_RN2483+0xf8>
    191c:	00 00       	nop
				_delay_ms(50);
				LM_send_break();
    191e:	0e 94 58 23 	call	0x46b0	; 0x46b0 <LM_send_break>
				state=CL_READ_MSG;
			break;
    1922:	8d b7       	in	r24, 0x3d	; 61
    1924:	9e b7       	in	r25, 0x3e	; 62
    1926:	08 96       	adiw	r24, 0x08	; 8
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	9e bf       	out	0x3e, r25	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	8d bf       	out	0x3d, r24	; 61
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break();
				state=CL_READ_MSG;
    1932:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1934:	80 cf       	rjmp	.-256    	; 0x1836 <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    1936:	0e 94 78 22 	call	0x44f0	; 0x44f0 <uart0_hal_message_ready>
    193a:	88 23       	and	r24, r24
    193c:	29 f0       	breq	.+10     	; 0x1948 <CON_RN2483+0x124>
					uart0_hal_read_message_as_str(cnf_reply);
    193e:	8a e8       	ldi	r24, 0x8A	; 138
    1940:	93 e0       	ldi	r25, 0x03	; 3
    1942:	0e 94 73 20 	call	0x40e6	; 0x40e6 <uart0_hal_read_message_as_str>
    1946:	09 c0       	rjmp	.+18     	; 0x195a <CON_RN2483+0x136>
				}else{
					strcpy(cnf_reply, "null");
    1948:	25 e0       	ldi	r18, 0x05	; 5
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	46 e6       	ldi	r20, 0x66	; 102
    194e:	55 e0       	ldi	r21, 0x05	; 5
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	8a e8       	ldi	r24, 0x8A	; 138
    1954:	93 e0       	ldi	r25, 0x03	; 3
    1956:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    195a:	6a e8       	ldi	r22, 0x8A	; 138
    195c:	73 e0       	ldi	r23, 0x03	; 3
    195e:	80 e8       	ldi	r24, 0x80	; 128
    1960:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				state=CL_READ_MSG;
    1964:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1966:	67 cf       	rjmp	.-306    	; 0x1836 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    1968:	0e 94 1b 23 	call	0x4636	; 0x4636 <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    196c:	6b e6       	ldi	r22, 0x6B	; 107
    196e:	75 e0       	ldi	r23, 0x05	; 5
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	0e 94 25 14 	call	0x284a	; 0x284a <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	8f 90       	pop	r8
    1984:	7f 90       	pop	r7
    1986:	6f 90       	pop	r6
    1988:	08 95       	ret

Disassembly of section .text.CONNECT:

00003454 <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	64 97       	sbiw	r28, 0x14	; 20
    345e:	0f b6       	in	r0, 0x3f	; 63
    3460:	f8 94       	cli
    3462:	de bf       	out	0x3e, r29	; 62
    3464:	0f be       	out	0x3f, r0	; 63
    3466:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    3468:	21 e0       	ldi	r18, 0x01	; 1
    346a:	ae 01       	movw	r20, r28
    346c:	4f 5f       	subi	r20, 0xFF	; 255
    346e:	5f 4f       	sbci	r21, 0xFF	; 255
    3470:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    3474:	88 23       	and	r24, r24
    3476:	79 f0       	breq	.+30     	; 0x3496 <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    3478:	be 01       	movw	r22, r28
    347a:	6f 5f       	subi	r22, 0xFF	; 255
    347c:	7f 4f       	sbci	r23, 0xFF	; 255
    347e:	80 e8       	ldi	r24, 0x80	; 128
    3480:	2b e8       	ldi	r18, 0x8B	; 139
    3482:	35 e0       	ldi	r19, 0x05	; 5
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    348a:	89 2b       	or	r24, r25
    348c:	19 f4       	brne	.+6      	; 0x3494 <CONNECT+0x40>
		return CON_RN2483();
    348e:	0e 94 12 0c 	call	0x1824	; 0x1824 <CON_RN2483>
    3492:	01 c0       	rjmp	.+2      	; 0x3496 <CONNECT+0x42>
	}else{
		return false;
    3494:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3496:	64 96       	adiw	r28, 0x14	; 20
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	08 95       	ret

Disassembly of section .text.read_cols:

000024c2 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    24c2:	cf 92       	push	r12
    24c4:	df 92       	push	r13
    24c6:	ef 92       	push	r14
    24c8:	ff 92       	push	r15
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	a3 97       	sbiw	r28, 0x23	; 35
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    24e2:	63 e2       	ldi	r22, 0x23	; 35
    24e4:	ce 01       	movw	r24, r28
    24e6:	01 96       	adiw	r24, 0x01	; 1
    24e8:	0e 94 4d 22 	call	0x449a	; 0x449a <EM_get_collections>
	res[0]='\0';
    24ec:	f7 01       	movw	r30, r14
    24ee:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    24f0:	10 e0       	ldi	r17, 0x00	; 0
    24f2:	35 c0       	rjmp	.+106    	; 0x255e <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    24f4:	81 2f       	mov	r24, r17
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	fc 01       	movw	r30, r24
    24fa:	ee 0f       	add	r30, r30
    24fc:	ff 1f       	adc	r31, r31
    24fe:	ee 0f       	add	r30, r30
    2500:	ff 1f       	adc	r31, r31
    2502:	e8 0f       	add	r30, r24
    2504:	f9 1f       	adc	r31, r25
    2506:	21 e0       	ldi	r18, 0x01	; 1
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	2c 0f       	add	r18, r28
    250c:	3d 1f       	adc	r19, r29
    250e:	e2 0f       	add	r30, r18
    2510:	f3 1f       	adc	r31, r19
    2512:	23 81       	ldd	r18, Z+3	; 0x03
    2514:	2f 93       	push	r18
    2516:	22 81       	ldd	r18, Z+2	; 0x02
    2518:	2f 93       	push	r18
    251a:	21 81       	ldd	r18, Z+1	; 0x01
    251c:	2f 93       	push	r18
    251e:	20 81       	ld	r18, Z
    2520:	2f 93       	push	r18
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	9f 93       	push	r25
    2526:	8f 93       	push	r24
    2528:	82 e0       	ldi	r24, 0x02	; 2
    252a:	92 e0       	ldi	r25, 0x02	; 2
    252c:	a0 e0       	ldi	r26, 0x00	; 0
    252e:	af 93       	push	r26
    2530:	9f 93       	push	r25
    2532:	8f 93       	push	r24
    2534:	0f 2e       	mov	r0, r31
    2536:	f4 ee       	ldi	r31, 0xE4	; 228
    2538:	cf 2e       	mov	r12, r31
    253a:	f5 e0       	ldi	r31, 0x05	; 5
    253c:	df 2e       	mov	r13, r31
    253e:	f0 2d       	mov	r31, r0
    2540:	df 92       	push	r13
    2542:	cf 92       	push	r12
    2544:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
		strcat(res, arg);
    2548:	a6 01       	movw	r20, r12
    254a:	60 e8       	ldi	r22, 0x80	; 128
    254c:	c7 01       	movw	r24, r14
    254e:	0e 94 46 20 	call	0x408c	; 0x408c <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    2552:	1f 5f       	subi	r17, 0xFF	; 255
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	17 30       	cpi	r17, 0x07	; 7
    2560:	48 f2       	brcs	.-110    	; 0x24f4 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    2562:	a3 96       	adiw	r28, 0x23	; 35
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	1f 91       	pop	r17
    2574:	ff 90       	pop	r15
    2576:	ef 90       	pop	r14
    2578:	df 90       	pop	r13
    257a:	cf 90       	pop	r12
    257c:	08 95       	ret

Disassembly of section .text.read_time:

00002a0c <read_time>:

static void read_time(char res[]){
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <read_time+0xa>
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <read_time+0xc>
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <read_time+0xe>
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	18 2f       	mov	r17, r24
    2a20:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    2a22:	0e 94 2a 22 	call	0x4454	; 0x4454 <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    2a26:	ce 01       	movw	r24, r28
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	0e 94 c5 0c 	call	0x198a	; 0x198a <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2a2e:	88 23       	and	r24, r24
    2a30:	51 f0       	breq	.+20     	; 0x2a46 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    2a32:	24 e1       	ldi	r18, 0x14	; 20
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	48 e1       	ldi	r20, 0x18	; 24
    2a38:	52 e0       	ldi	r21, 0x02	; 2
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	81 2f       	mov	r24, r17
    2a3e:	90 2f       	mov	r25, r16
    2a40:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
    2a44:	21 c0       	rjmp	.+66     	; 0x2a88 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    2a46:	59 81       	ldd	r21, Y+1	; 0x01
    2a48:	4a 81       	ldd	r20, Y+2	; 0x02
    2a4a:	3b 81       	ldd	r19, Y+3	; 0x03
    2a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a50:	8e 81       	ldd	r24, Y+6	; 0x06
    2a52:	1f 92       	push	r1
    2a54:	5f 93       	push	r21
    2a56:	1f 92       	push	r1
    2a58:	4f 93       	push	r20
    2a5a:	1f 92       	push	r1
    2a5c:	3f 93       	push	r19
    2a5e:	1f 92       	push	r1
    2a60:	2f 93       	push	r18
    2a62:	1f 92       	push	r1
    2a64:	9f 93       	push	r25
    2a66:	1f 92       	push	r1
    2a68:	8f 93       	push	r24
    2a6a:	8c e2       	ldi	r24, 0x2C	; 44
    2a6c:	92 e0       	ldi	r25, 0x02	; 2
    2a6e:	a0 e0       	ldi	r26, 0x00	; 0
    2a70:	af 93       	push	r26
    2a72:	9f 93       	push	r25
    2a74:	8f 93       	push	r24
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
	}
}
    2a88:	26 96       	adiw	r28, 0x06	; 6
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	df 91       	pop	r29
    2a96:	cf 91       	pop	r28
    2a98:	1f 91       	pop	r17
    2a9a:	0f 91       	pop	r16
    2a9c:	08 95       	ret

Disassembly of section .text.write_deveui:

00002c8a <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    2c8a:	cf 92       	push	r12
    2c8c:	df 92       	push	r13
    2c8e:	ef 92       	push	r14
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	cf 93       	push	r28
    2c96:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2c98:	22 e0       	ldi	r18, 0x02	; 2
    2c9a:	44 ee       	ldi	r20, 0xE4	; 228
    2c9c:	55 e0       	ldi	r21, 0x05	; 5
    2c9e:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    2ca2:	c8 2f       	mov	r28, r24
    2ca4:	88 23       	and	r24, r24
    2ca6:	29 f1       	breq	.+74     	; 0x2cf2 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    2ca8:	84 ee       	ldi	r24, 0xE4	; 228
    2caa:	95 e0       	ldi	r25, 0x05	; 5
    2cac:	6c 01       	movw	r12, r24
    2cae:	20 e8       	ldi	r18, 0x80	; 128
    2cb0:	e2 2e       	mov	r14, r18
    2cb2:	8e 2d       	mov	r24, r14
    2cb4:	b6 01       	movw	r22, r12
    2cb6:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    2cba:	40 97       	sbiw	r24, 0x10	; 16
    2cbc:	c9 f4       	brne	.+50     	; 0x2cf0 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    2cbe:	8e 2d       	mov	r24, r14
    2cc0:	b6 01       	movw	r22, r12
    2cc2:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <EM_set_deveui>
    2cc6:	c8 2f       	mov	r28, r24
    2cc8:	81 11       	cpse	r24, r1
    2cca:	09 c0       	rjmp	.+18     	; 0x2cde <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    2ccc:	27 e0       	ldi	r18, 0x07	; 7
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4a e4       	ldi	r20, 0x4A	; 74
    2cd2:	52 e0       	ldi	r21, 0x02	; 2
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	c8 01       	movw	r24, r16
    2cd8:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return false;
    2cdc:	0a c0       	rjmp	.+20     	; 0x2cf2 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2cde:	28 e0       	ldi	r18, 0x08	; 8
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	41 e5       	ldi	r20, 0x51	; 81
    2ce4:	52 e0       	ldi	r21, 0x02	; 2
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
    2ce8:	c8 01       	movw	r24, r16
    2cea:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
    2cee:	01 c0       	rjmp	.+2      	; 0x2cf2 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    2cf0:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2cf2:	8c 2f       	mov	r24, r28
    2cf4:	cf 91       	pop	r28
    2cf6:	1f 91       	pop	r17
    2cf8:	0f 91       	pop	r16
    2cfa:	ef 90       	pop	r14
    2cfc:	df 90       	pop	r13
    2cfe:	cf 90       	pop	r12
    2d00:	08 95       	ret

Disassembly of section .text.write_appeui:

00002d02 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    2d02:	cf 92       	push	r12
    2d04:	df 92       	push	r13
    2d06:	ef 92       	push	r14
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2d10:	22 e0       	ldi	r18, 0x02	; 2
    2d12:	44 ee       	ldi	r20, 0xE4	; 228
    2d14:	55 e0       	ldi	r21, 0x05	; 5
    2d16:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    2d1a:	c8 2f       	mov	r28, r24
    2d1c:	88 23       	and	r24, r24
    2d1e:	29 f1       	breq	.+74     	; 0x2d6a <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    2d20:	84 ee       	ldi	r24, 0xE4	; 228
    2d22:	95 e0       	ldi	r25, 0x05	; 5
    2d24:	6c 01       	movw	r12, r24
    2d26:	20 e8       	ldi	r18, 0x80	; 128
    2d28:	e2 2e       	mov	r14, r18
    2d2a:	8e 2d       	mov	r24, r14
    2d2c:	b6 01       	movw	r22, r12
    2d2e:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    2d32:	40 97       	sbiw	r24, 0x10	; 16
    2d34:	c9 f4       	brne	.+50     	; 0x2d68 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    2d36:	8e 2d       	mov	r24, r14
    2d38:	b6 01       	movw	r22, r12
    2d3a:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <EM_set_appeui>
    2d3e:	c8 2f       	mov	r28, r24
    2d40:	81 11       	cpse	r24, r1
    2d42:	09 c0       	rjmp	.+18     	; 0x2d56 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    2d44:	27 e0       	ldi	r18, 0x07	; 7
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	4a e4       	ldi	r20, 0x4A	; 74
    2d4a:	52 e0       	ldi	r21, 0x02	; 2
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	c8 01       	movw	r24, r16
    2d50:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return false;
    2d54:	0a c0       	rjmp	.+20     	; 0x2d6a <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2d56:	28 e0       	ldi	r18, 0x08	; 8
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	41 e5       	ldi	r20, 0x51	; 81
    2d5c:	52 e0       	ldi	r21, 0x02	; 2
    2d5e:	60 e0       	ldi	r22, 0x00	; 0
    2d60:	c8 01       	movw	r24, r16
    2d62:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
    2d66:	01 c0       	rjmp	.+2      	; 0x2d6a <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    2d68:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2d6a:	8c 2f       	mov	r24, r28
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	ef 90       	pop	r14
    2d74:	df 90       	pop	r13
    2d76:	cf 90       	pop	r12
    2d78:	08 95       	ret

Disassembly of section .text.write_appkey:

00002d7a <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    2d7a:	cf 92       	push	r12
    2d7c:	df 92       	push	r13
    2d7e:	ef 92       	push	r14
    2d80:	0f 93       	push	r16
    2d82:	1f 93       	push	r17
    2d84:	cf 93       	push	r28
    2d86:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2d88:	22 e0       	ldi	r18, 0x02	; 2
    2d8a:	44 ee       	ldi	r20, 0xE4	; 228
    2d8c:	55 e0       	ldi	r21, 0x05	; 5
    2d8e:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    2d92:	c8 2f       	mov	r28, r24
    2d94:	88 23       	and	r24, r24
    2d96:	29 f1       	breq	.+74     	; 0x2de2 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    2d98:	84 ee       	ldi	r24, 0xE4	; 228
    2d9a:	95 e0       	ldi	r25, 0x05	; 5
    2d9c:	6c 01       	movw	r12, r24
    2d9e:	20 e8       	ldi	r18, 0x80	; 128
    2da0:	e2 2e       	mov	r14, r18
    2da2:	8e 2d       	mov	r24, r14
    2da4:	b6 01       	movw	r22, r12
    2da6:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    2daa:	80 97       	sbiw	r24, 0x20	; 32
    2dac:	c9 f4       	brne	.+50     	; 0x2de0 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    2dae:	8e 2d       	mov	r24, r14
    2db0:	b6 01       	movw	r22, r12
    2db2:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <EM_set_appkey>
    2db6:	c8 2f       	mov	r28, r24
    2db8:	81 11       	cpse	r24, r1
    2dba:	09 c0       	rjmp	.+18     	; 0x2dce <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    2dbc:	27 e0       	ldi	r18, 0x07	; 7
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	4a e4       	ldi	r20, 0x4A	; 74
    2dc2:	52 e0       	ldi	r21, 0x02	; 2
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return false;
    2dcc:	0a c0       	rjmp	.+20     	; 0x2de2 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2dce:	28 e0       	ldi	r18, 0x08	; 8
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	41 e5       	ldi	r20, 0x51	; 81
    2dd4:	52 e0       	ldi	r21, 0x02	; 2
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
    2dd8:	c8 01       	movw	r24, r16
    2dda:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
    2dde:	01 c0       	rjmp	.+2      	; 0x2de2 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    2de0:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2de2:	8c 2f       	mov	r24, r28
    2de4:	cf 91       	pop	r28
    2de6:	1f 91       	pop	r17
    2de8:	0f 91       	pop	r16
    2dea:	ef 90       	pop	r14
    2dec:	df 90       	pop	r13
    2dee:	cf 90       	pop	r12
    2df0:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

000036ce <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    36ce:	0f 93       	push	r16
    36d0:	1f 93       	push	r17
    36d2:	cf 93       	push	r28
    36d4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    36d6:	22 e0       	ldi	r18, 0x02	; 2
    36d8:	44 ee       	ldi	r20, 0xE4	; 228
    36da:	55 e0       	ldi	r21, 0x05	; 5
    36dc:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    36e0:	c8 2f       	mov	r28, r24
    36e2:	88 23       	and	r24, r24
    36e4:	a9 f0       	breq	.+42     	; 0x3710 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    36e6:	84 ee       	ldi	r24, 0xE4	; 228
    36e8:	95 e0       	ldi	r25, 0x05	; 5
    36ea:	0e 94 7e 19 	call	0x32fc	; 0x32fc <is_float>
    36ee:	c8 2f       	mov	r28, r24
    36f0:	88 23       	and	r24, r24
    36f2:	71 f0       	breq	.+28     	; 0x3710 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    36f4:	84 ee       	ldi	r24, 0xE4	; 228
    36f6:	95 e0       	ldi	r25, 0x05	; 5
    36f8:	0e 94 1a 1b 	call	0x3634	; 0x3634 <str2flaot>
	EM_set_ppmfactor(val);
    36fc:	0e 94 8d 22 	call	0x451a	; 0x451a <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    3700:	28 e0       	ldi	r18, 0x08	; 8
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	41 e5       	ldi	r20, 0x51	; 81
    3706:	52 e0       	ldi	r21, 0x02	; 2
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	c8 01       	movw	r24, r16
    370c:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
	return true;
}
    3710:	8c 2f       	mov	r24, r28
    3712:	cf 91       	pop	r28
    3714:	1f 91       	pop	r17
    3716:	0f 91       	pop	r16
    3718:	08 95       	ret

Disassembly of section .text.write_RRL:

0000371a <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    371a:	0f 93       	push	r16
    371c:	1f 93       	push	r17
    371e:	cf 93       	push	r28
    3720:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3722:	22 e0       	ldi	r18, 0x02	; 2
    3724:	44 ee       	ldi	r20, 0xE4	; 228
    3726:	55 e0       	ldi	r21, 0x05	; 5
    3728:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    372c:	c8 2f       	mov	r28, r24
    372e:	88 23       	and	r24, r24
    3730:	a9 f0       	breq	.+42     	; 0x375c <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    3732:	84 ee       	ldi	r24, 0xE4	; 228
    3734:	95 e0       	ldi	r25, 0x05	; 5
    3736:	0e 94 7e 19 	call	0x32fc	; 0x32fc <is_float>
    373a:	c8 2f       	mov	r28, r24
    373c:	88 23       	and	r24, r24
    373e:	71 f0       	breq	.+28     	; 0x375c <write_RRL+0x42>
	
	float val=str2flaot(arg);
    3740:	84 ee       	ldi	r24, 0xE4	; 228
    3742:	95 e0       	ldi	r25, 0x05	; 5
    3744:	0e 94 1a 1b 	call	0x3634	; 0x3634 <str2flaot>
	EM_set_RRL(val);
    3748:	0e 94 94 22 	call	0x4528	; 0x4528 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    374c:	28 e0       	ldi	r18, 0x08	; 8
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	41 e5       	ldi	r20, 0x51	; 81
    3752:	52 e0       	ldi	r21, 0x02	; 2
    3754:	60 e0       	ldi	r22, 0x00	; 0
    3756:	c8 01       	movw	r24, r16
    3758:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
	return true;
}
    375c:	8c 2f       	mov	r24, r28
    375e:	cf 91       	pop	r28
    3760:	1f 91       	pop	r17
    3762:	0f 91       	pop	r16
    3764:	08 95       	ret

Disassembly of section .text.write_VCC:

00003766 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    3766:	0f 93       	push	r16
    3768:	1f 93       	push	r17
    376a:	cf 93       	push	r28
    376c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    376e:	22 e0       	ldi	r18, 0x02	; 2
    3770:	44 ee       	ldi	r20, 0xE4	; 228
    3772:	55 e0       	ldi	r21, 0x05	; 5
    3774:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    3778:	c8 2f       	mov	r28, r24
    377a:	88 23       	and	r24, r24
    377c:	a9 f0       	breq	.+42     	; 0x37a8 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    377e:	84 ee       	ldi	r24, 0xE4	; 228
    3780:	95 e0       	ldi	r25, 0x05	; 5
    3782:	0e 94 7e 19 	call	0x32fc	; 0x32fc <is_float>
    3786:	c8 2f       	mov	r28, r24
    3788:	88 23       	and	r24, r24
    378a:	71 f0       	breq	.+28     	; 0x37a8 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    378c:	84 ee       	ldi	r24, 0xE4	; 228
    378e:	95 e0       	ldi	r25, 0x05	; 5
    3790:	0e 94 1a 1b 	call	0x3634	; 0x3634 <str2flaot>
	EM_set_Vcc(val);
    3794:	0e 94 9b 22 	call	0x4536	; 0x4536 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    3798:	28 e0       	ldi	r18, 0x08	; 8
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	41 e5       	ldi	r20, 0x51	; 81
    379e:	52 e0       	ldi	r21, 0x02	; 2
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	c8 01       	movw	r24, r16
    37a4:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
	return true;
}
    37a8:	8c 2f       	mov	r24, r28
    37aa:	cf 91       	pop	r28
    37ac:	1f 91       	pop	r17
    37ae:	0f 91       	pop	r16
    37b0:	08 95       	ret

Disassembly of section .text.get_time_par:

00003e44 <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	00 d0       	rcall	.+0      	; 0x3e4a <get_time_par+0x6>
    3e4a:	1f 92       	push	r1
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    3e50:	fc 01       	movw	r30, r24
    3e52:	e6 0f       	add	r30, r22
    3e54:	f1 1d       	adc	r31, r1
    3e56:	80 81       	ld	r24, Z
    3e58:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    3e5a:	81 81       	ldd	r24, Z+1	; 0x01
    3e5c:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    3e5e:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    3e60:	be 01       	movw	r22, r28
    3e62:	6f 5f       	subi	r22, 0xFF	; 255
    3e64:	7f 4f       	sbci	r23, 0xFF	; 255
    3e66:	80 e8       	ldi	r24, 0x80	; 128
    3e68:	0e 94 4b 23 	call	0x4696	; 0x4696 <atoi>
}
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	df 91       	pop	r29
    3e74:	cf 91       	pop	r28
    3e76:	08 95       	ret

Disassembly of section .text.write_cols:

00001c06 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    1c06:	4f 92       	push	r4
    1c08:	5f 92       	push	r5
    1c0a:	6f 92       	push	r6
    1c0c:	7f 92       	push	r7
    1c0e:	8f 92       	push	r8
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	a3 97       	sbiw	r28, 0x23	; 35
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	3b 01       	movw	r6, r22
    1c36:	88 2e       	mov	r8, r24
    1c38:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    1c3a:	22 e0       	ldi	r18, 0x02	; 2
    1c3c:	44 ee       	ldi	r20, 0xE4	; 228
    1c3e:	55 e0       	ldi	r21, 0x05	; 5
    1c40:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    1c44:	18 2f       	mov	r17, r24
    1c46:	88 23       	and	r24, r24
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <write_cols+0x46>
    1c4a:	5d c0       	rjmp	.+186    	; 0x1d06 <write_cols+0x100>
	index=atoi(arg);
    1c4c:	84 ee       	ldi	r24, 0xE4	; 228
    1c4e:	95 e0       	ldi	r25, 0x05	; 5
    1c50:	6c 01       	movw	r12, r24
    1c52:	20 e8       	ldi	r18, 0x80	; 128
    1c54:	e2 2e       	mov	r14, r18
    1c56:	8e 2d       	mov	r24, r14
    1c58:	b6 01       	movw	r22, r12
    1c5a:	0e 94 4b 23 	call	0x4696	; 0x4696 <atoi>
	if(index<1 || index>7) return false;
    1c5e:	0f ef       	ldi	r16, 0xFF	; 255
    1c60:	08 0f       	add	r16, r24
    1c62:	07 30       	cpi	r16, 0x07	; 7
    1c64:	08 f0       	brcs	.+2      	; 0x1c68 <write_cols+0x62>
    1c66:	4a c0       	rjmp	.+148    	; 0x1cfc <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    1c68:	23 e0       	ldi	r18, 0x03	; 3
    1c6a:	44 ee       	ldi	r20, 0xE4	; 228
    1c6c:	55 e0       	ldi	r21, 0x05	; 5
    1c6e:	88 2d       	mov	r24, r8
    1c70:	b3 01       	movw	r22, r6
    1c72:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    1c76:	18 2f       	mov	r17, r24
    1c78:	88 23       	and	r24, r24
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <write_cols+0x78>
    1c7c:	44 c0       	rjmp	.+136    	; 0x1d06 <write_cols+0x100>
	samplings=atoi(arg);
    1c7e:	8e 2d       	mov	r24, r14
    1c80:	b6 01       	movw	r22, r12
    1c82:	0e 94 4b 23 	call	0x4696	; 0x4696 <atoi>
    1c86:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    1c88:	02 97       	sbiw	r24, 0x02	; 2
    1c8a:	8b 32       	cpi	r24, 0x2B	; 43
    1c8c:	91 40       	sbci	r25, 0x01	; 1
    1c8e:	c0 f5       	brcc	.+112    	; 0x1d00 <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    1c90:	24 e0       	ldi	r18, 0x04	; 4
    1c92:	44 ee       	ldi	r20, 0xE4	; 228
    1c94:	55 e0       	ldi	r21, 0x05	; 5
    1c96:	88 2d       	mov	r24, r8
    1c98:	b3 01       	movw	r22, r6
    1c9a:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    1c9e:	18 2f       	mov	r17, r24
    1ca0:	88 23       	and	r24, r24
    1ca2:	89 f1       	breq	.+98     	; 0x1d06 <write_cols+0x100>
	samplingInterval=atoi(arg);
    1ca4:	8e 2d       	mov	r24, r14
    1ca6:	b6 01       	movw	r22, r12
    1ca8:	0e 94 4b 23 	call	0x4696	; 0x4696 <atoi>
    1cac:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    1cae:	02 97       	sbiw	r24, 0x02	; 2
    1cb0:	87 35       	cpi	r24, 0x57	; 87
    1cb2:	92 40       	sbci	r25, 0x02	; 2
    1cb4:	38 f5       	brcc	.+78     	; 0x1d04 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1cb6:	63 e2       	ldi	r22, 0x23	; 35
    1cb8:	ce 01       	movw	r24, r28
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	7c 01       	movw	r14, r24
    1cbe:	0e 94 4d 22 	call	0x449a	; 0x449a <EM_get_collections>
	
	cols[index].samplings=samplings;
    1cc2:	80 2f       	mov	r24, r16
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	ee 0f       	add	r30, r30
    1cca:	ff 1f       	adc	r31, r31
    1ccc:	ee 0f       	add	r30, r30
    1cce:	ff 1f       	adc	r31, r31
    1cd0:	e8 0f       	add	r30, r24
    1cd2:	f9 1f       	adc	r31, r25
    1cd4:	ee 0d       	add	r30, r14
    1cd6:	ff 1d       	adc	r31, r15
    1cd8:	51 82       	std	Z+1, r5	; 0x01
    1cda:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    1cdc:	d3 82       	std	Z+3, r13	; 0x03
    1cde:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1ce0:	b7 01       	movw	r22, r14
    1ce2:	80 e8       	ldi	r24, 0x80	; 128
    1ce4:	43 e2       	ldi	r20, 0x23	; 35
    1ce6:	0e 94 a2 22 	call	0x4544	; 0x4544 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    1cea:	28 e0       	ldi	r18, 0x08	; 8
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	41 e5       	ldi	r20, 0x51	; 81
    1cf0:	52 e0       	ldi	r21, 0x02	; 2
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	c5 01       	movw	r24, r10
    1cf6:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
	return true;	
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    1cfc:	10 e0       	ldi	r17, 0x00	; 0
    1cfe:	03 c0       	rjmp	.+6      	; 0x1d06 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    1d00:	10 e0       	ldi	r17, 0x00	; 0
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    1d04:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    1d06:	81 2f       	mov	r24, r17
    1d08:	a3 96       	adiw	r28, 0x23	; 35
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	bf 90       	pop	r11
    1d26:	af 90       	pop	r10
    1d28:	8f 90       	pop	r8
    1d2a:	7f 90       	pop	r7
    1d2c:	6f 90       	pop	r6
    1d2e:	5f 90       	pop	r5
    1d30:	4f 90       	pop	r4
    1d32:	08 95       	ret

Disassembly of section .text.write_heat_up:

000037b2 <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    37b2:	0f 93       	push	r16
    37b4:	1f 93       	push	r17
    37b6:	cf 93       	push	r28
    37b8:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    37ba:	22 e0       	ldi	r18, 0x02	; 2
    37bc:	44 ee       	ldi	r20, 0xE4	; 228
    37be:	55 e0       	ldi	r21, 0x05	; 5
    37c0:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    37c4:	c8 2f       	mov	r28, r24
    37c6:	88 23       	and	r24, r24
    37c8:	a9 f0       	breq	.+42     	; 0x37f4 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    37ca:	64 ee       	ldi	r22, 0xE4	; 228
    37cc:	75 e0       	ldi	r23, 0x05	; 5
    37ce:	80 e8       	ldi	r24, 0x80	; 128
    37d0:	0e 94 4b 23 	call	0x4696	; 0x4696 <atoi>
	
	if(val<1 || val>200) return false;
    37d4:	9f ef       	ldi	r25, 0xFF	; 255
    37d6:	98 0f       	add	r25, r24
    37d8:	98 3c       	cpi	r25, 0xC8	; 200
    37da:	58 f4       	brcc	.+22     	; 0x37f2 <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    37dc:	0e 94 da 22 	call	0x45b4	; 0x45b4 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    37e0:	28 e0       	ldi	r18, 0x08	; 8
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	41 e5       	ldi	r20, 0x51	; 81
    37e6:	52 e0       	ldi	r21, 0x02	; 2
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	c8 01       	movw	r24, r16
    37ec:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
	return true;
    37f0:	01 c0       	rjmp	.+2      	; 0x37f4 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    37f2:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    37f4:	8c 2f       	mov	r24, r28
    37f6:	cf 91       	pop	r28
    37f8:	1f 91       	pop	r17
    37fa:	0f 91       	pop	r16
    37fc:	08 95       	ret

Disassembly of section .text.write_air_pump:

000034fa <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    34fa:	0f 93       	push	r16
    34fc:	1f 93       	push	r17
    34fe:	cf 93       	push	r28
    3500:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3502:	22 e0       	ldi	r18, 0x02	; 2
    3504:	44 ee       	ldi	r20, 0xE4	; 228
    3506:	55 e0       	ldi	r21, 0x05	; 5
    3508:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    350c:	c8 2f       	mov	r28, r24
    350e:	88 23       	and	r24, r24
    3510:	b9 f0       	breq	.+46     	; 0x3540 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    3512:	64 ee       	ldi	r22, 0xE4	; 228
    3514:	75 e0       	ldi	r23, 0x05	; 5
    3516:	80 e8       	ldi	r24, 0x80	; 128
    3518:	0e 94 4b 23 	call	0x4696	; 0x4696 <atoi>
	
	if(val<5 || val>1000) return false;
    351c:	9c 01       	movw	r18, r24
    351e:	25 50       	subi	r18, 0x05	; 5
    3520:	31 09       	sbc	r19, r1
    3522:	24 3e       	cpi	r18, 0xE4	; 228
    3524:	33 40       	sbci	r19, 0x03	; 3
    3526:	58 f4       	brcc	.+22     	; 0x353e <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    3528:	0e 94 e6 22 	call	0x45cc	; 0x45cc <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    352c:	28 e0       	ldi	r18, 0x08	; 8
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	41 e5       	ldi	r20, 0x51	; 81
    3532:	52 e0       	ldi	r21, 0x02	; 2
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	c8 01       	movw	r24, r16
    3538:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
	return true;
    353c:	01 c0       	rjmp	.+2      	; 0x3540 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    353e:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    3540:	8c 2f       	mov	r24, r28
    3542:	cf 91       	pop	r28
    3544:	1f 91       	pop	r17
    3546:	0f 91       	pop	r16
    3548:	08 95       	ret

Disassembly of section .text.write_sp_interval:

000037fe <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3806:	22 e0       	ldi	r18, 0x02	; 2
    3808:	44 ee       	ldi	r20, 0xE4	; 228
    380a:	55 e0       	ldi	r21, 0x05	; 5
    380c:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    3810:	c8 2f       	mov	r28, r24
    3812:	88 23       	and	r24, r24
    3814:	a9 f0       	breq	.+42     	; 0x3840 <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    3816:	64 ee       	ldi	r22, 0xE4	; 228
    3818:	75 e0       	ldi	r23, 0x05	; 5
    381a:	80 e8       	ldi	r24, 0x80	; 128
    381c:	0e 94 4b 23 	call	0x4696	; 0x4696 <atoi>
	
	if(val<6 || val>24) return false;
    3820:	9a ef       	ldi	r25, 0xFA	; 250
    3822:	98 0f       	add	r25, r24
    3824:	93 31       	cpi	r25, 0x13	; 19
    3826:	58 f4       	brcc	.+22     	; 0x383e <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    3828:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    382c:	28 e0       	ldi	r18, 0x08	; 8
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	41 e5       	ldi	r20, 0x51	; 81
    3832:	52 e0       	ldi	r21, 0x02	; 2
    3834:	60 e0       	ldi	r22, 0x00	; 0
    3836:	c8 01       	movw	r24, r16
    3838:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
	return true;
    383c:	01 c0       	rjmp	.+2      	; 0x3840 <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    383e:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    3840:	8c 2f       	mov	r24, r28
    3842:	cf 91       	pop	r28
    3844:	1f 91       	pop	r17
    3846:	0f 91       	pop	r16
    3848:	08 95       	ret

Disassembly of section .text.write_reset:

00002160 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	a3 97       	sbiw	r28, 0x23	; 35
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    217a:	69 e5       	ldi	r22, 0x59	; 89
    217c:	72 e0       	ldi	r23, 0x02	; 2
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    2184:	69 e5       	ldi	r22, 0x59	; 89
    2186:	72 e0       	ldi	r23, 0x02	; 2
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    218e:	6a e6       	ldi	r22, 0x6A	; 106
    2190:	72 e0       	ldi	r23, 0x02	; 2
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	80 e8       	ldi	r24, 0x80	; 128
    219e:	9f e3       	ldi	r25, 0x3F	; 63
    21a0:	0e 94 8d 22 	call	0x451a	; 0x451a <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	70 e4       	ldi	r23, 0x40	; 64
    21a8:	8c e1       	ldi	r24, 0x1C	; 28
    21aa:	95 e4       	ldi	r25, 0x45	; 69
    21ac:	0e 94 94 22 	call	0x4528	; 0x4528 <EM_set_RRL>
	EM_set_Vcc(5.00);
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	80 ea       	ldi	r24, 0xA0	; 160
    21b6:	90 e4       	ldi	r25, 0x40	; 64
    21b8:	0e 94 9b 22 	call	0x4536	; 0x4536 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	0e 94 da 22 	call	0x45b4	; 0x45b4 <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    21c2:	85 e0       	ldi	r24, 0x05	; 5
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	0e 94 e6 22 	call	0x45cc	; 0x45cc <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    21ca:	86 e0       	ldi	r24, 0x06	; 6
    21cc:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	1a c0       	rjmp	.+52     	; 0x2208 <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    21d4:	e8 2f       	mov	r30, r24
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	9f 01       	movw	r18, r30
    21da:	22 0f       	add	r18, r18
    21dc:	33 1f       	adc	r19, r19
    21de:	22 0f       	add	r18, r18
    21e0:	33 1f       	adc	r19, r19
    21e2:	e2 0f       	add	r30, r18
    21e4:	f3 1f       	adc	r31, r19
    21e6:	21 e0       	ldi	r18, 0x01	; 1
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	2c 0f       	add	r18, r28
    21ec:	3d 1f       	adc	r19, r29
    21ee:	e2 0f       	add	r30, r18
    21f0:	f3 1f       	adc	r31, r19
    21f2:	92 e0       	ldi	r25, 0x02	; 2
    21f4:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    21f6:	22 e0       	ldi	r18, 0x02	; 2
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	31 83       	std	Z+1, r19	; 0x01
    21fc:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    21fe:	23 e0       	ldi	r18, 0x03	; 3
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	33 83       	std	Z+3, r19	; 0x03
    2204:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    2206:	8f 5f       	subi	r24, 0xFF	; 255
    2208:	87 30       	cpi	r24, 0x07	; 7
    220a:	20 f3       	brcs	.-56     	; 0x21d4 <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    220c:	be 01       	movw	r22, r28
    220e:	6f 5f       	subi	r22, 0xFF	; 255
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	80 e8       	ldi	r24, 0x80	; 128
    2214:	43 e2       	ldi	r20, 0x23	; 35
    2216:	0e 94 a2 22 	call	0x4544	; 0x4544 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    221a:	23 e1       	ldi	r18, 0x13	; 19
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	4b e8       	ldi	r20, 0x8B	; 139
    2220:	52 e0       	ldi	r21, 0x02	; 2
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	c8 01       	movw	r24, r16
    2226:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
	return true;
}
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	a3 96       	adiw	r28, 0x23	; 35
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	08 95       	ret

Disassembly of section .text.write_time:

00002062 <write_time>:

static bool write_time(const char cmd[], char res[]){
    2062:	6f 92       	push	r6
    2064:	7f 92       	push	r7
    2066:	8f 92       	push	r8
    2068:	df 92       	push	r13
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	00 d0       	rcall	.+0      	; 0x2078 <write_time+0x16>
    2078:	00 d0       	rcall	.+0      	; 0x207a <write_time+0x18>
    207a:	00 d0       	rcall	.+0      	; 0x207c <write_time+0x1a>
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	3b 01       	movw	r6, r22
    2082:	88 2e       	mov	r8, r24
    2084:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    2086:	0e 94 2a 22 	call	0x4454	; 0x4454 <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    208a:	22 e0       	ldi	r18, 0x02	; 2
    208c:	44 ee       	ldi	r20, 0xE4	; 228
    208e:	55 e0       	ldi	r21, 0x05	; 5
    2090:	88 2d       	mov	r24, r8
    2092:	b3 01       	movw	r22, r6
    2094:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    2098:	18 2f       	mov	r17, r24
    209a:	88 23       	and	r24, r24
    209c:	09 f4       	brne	.+2      	; 0x20a0 <write_time+0x3e>
    209e:	4e c0       	rjmp	.+156    	; 0x213c <write_time+0xda>
	if(strlen(arg)!=17){
    20a0:	64 ee       	ldi	r22, 0xE4	; 228
    20a2:	75 e0       	ldi	r23, 0x05	; 5
    20a4:	80 e8       	ldi	r24, 0x80	; 128
    20a6:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    20aa:	41 97       	sbiw	r24, 0x11	; 17
    20ac:	49 f0       	breq	.+18     	; 0x20c0 <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    20ae:	25 e2       	ldi	r18, 0x25	; 37
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4e e9       	ldi	r20, 0x9E	; 158
    20b4:	52 e0       	ldi	r21, 0x02	; 2
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	c7 01       	movw	r24, r14
    20ba:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
    20be:	3e c0       	rjmp	.+124    	; 0x213c <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	84 ee       	ldi	r24, 0xE4	; 228
    20c4:	95 e0       	ldi	r25, 0x05	; 5
    20c6:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <get_time_par>
    20ca:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    20cc:	63 e0       	ldi	r22, 0x03	; 3
    20ce:	84 ee       	ldi	r24, 0xE4	; 228
    20d0:	95 e0       	ldi	r25, 0x05	; 5
    20d2:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <get_time_par>
    20d6:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    20d8:	66 e0       	ldi	r22, 0x06	; 6
    20da:	84 ee       	ldi	r24, 0xE4	; 228
    20dc:	95 e0       	ldi	r25, 0x05	; 5
    20de:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <get_time_par>
    20e2:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    20e4:	69 e0       	ldi	r22, 0x09	; 9
    20e6:	84 ee       	ldi	r24, 0xE4	; 228
    20e8:	95 e0       	ldi	r25, 0x05	; 5
    20ea:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <get_time_par>
    20ee:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    20f0:	6c e0       	ldi	r22, 0x0C	; 12
    20f2:	84 ee       	ldi	r24, 0xE4	; 228
    20f4:	95 e0       	ldi	r25, 0x05	; 5
    20f6:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <get_time_par>
    20fa:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    20fc:	6f e0       	ldi	r22, 0x0F	; 15
    20fe:	84 ee       	ldi	r24, 0xE4	; 228
    2100:	95 e0       	ldi	r25, 0x05	; 5
    2102:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    2106:	48 2f       	mov	r20, r24
    2108:	5d 2d       	mov	r21, r13
    210a:	60 2f       	mov	r22, r16
    210c:	76 2d       	mov	r23, r6
    210e:	87 2d       	mov	r24, r7
    2110:	98 2d       	mov	r25, r8
    2112:	0e 94 ba 18 	call	0x3174	; 0x3174 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2116:	88 23       	and	r24, r24
    2118:	49 f0       	breq	.+18     	; 0x212c <write_time+0xca>
		strcpy(res, "Failed to set time");
    211a:	23 e1       	ldi	r18, 0x13	; 19
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	43 ec       	ldi	r20, 0xC3	; 195
    2120:	52 e0       	ldi	r21, 0x02	; 2
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	c7 01       	movw	r24, r14
    2126:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
    212a:	08 c0       	rjmp	.+16     	; 0x213c <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    212c:	28 e0       	ldi	r18, 0x08	; 8
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	41 e5       	ldi	r20, 0x51	; 81
    2132:	52 e0       	ldi	r21, 0x02	; 2
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	c7 01       	movw	r24, r14
    2138:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
	return true;
}
    213c:	81 2f       	mov	r24, r17
    213e:	26 96       	adiw	r28, 0x06	; 6
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    2156:	df 90       	pop	r13
    2158:	8f 90       	pop	r8
    215a:	7f 90       	pop	r7
    215c:	6f 90       	pop	r6
    215e:	08 95       	ret

Disassembly of section .text.handle_read:

0000104c <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
    104c:	cf 92       	push	r12
    104e:	df 92       	push	r13
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	68 97       	sbiw	r28, 0x18	; 24
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	6b 01       	movw	r12, r22
    106e:	e8 2e       	mov	r14, r24
    1070:	f4 2e       	mov	r15, r20
    1072:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	ae 01       	movw	r20, r28
    1078:	4f 5f       	subi	r20, 0xFF	; 255
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    1080:	18 2f       	mov	r17, r24
    1082:	88 23       	and	r24, r24
    1084:	09 f4       	brne	.+2      	; 0x1088 <handle_read+0x3c>
    1086:	23 c1       	rjmp	.+582    	; 0x12ce <__stack+0x1cf>
    1088:	8e 2d       	mov	r24, r14
    108a:	b6 01       	movw	r22, r12
    108c:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <count_parameters>
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	09 f4       	brne	.+2      	; 0x1096 <handle_read+0x4a>
    1094:	1b c1       	rjmp	.+566    	; 0x12cc <__stack+0x1cd>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1096:	ce 01       	movw	r24, r28
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	6c 01       	movw	r12, r24
    109c:	20 e8       	ldi	r18, 0x80	; 128
    109e:	e2 2e       	mov	r14, r18
    10a0:	26 ed       	ldi	r18, 0xD6	; 214
    10a2:	32 e0       	ldi	r19, 0x02	; 2
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	8e 2d       	mov	r24, r14
    10a8:	b6 01       	movw	r22, r12
    10aa:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    10ae:	89 2b       	or	r24, r25
    10b0:	29 f4       	brne	.+10     	; 0x10bc <handle_read+0x70>
	{
		EM_get_deveui(res);
    10b2:	8f 2d       	mov	r24, r15
    10b4:	90 2f       	mov	r25, r16
    10b6:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <EM_get_deveui>
    10ba:	09 c1       	rjmp	.+530    	; 0x12ce <__stack+0x1cf>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    10bc:	2d ed       	ldi	r18, 0xDD	; 221
    10be:	32 e0       	ldi	r19, 0x02	; 2
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	8e 2d       	mov	r24, r14
    10c4:	b6 01       	movw	r22, r12
    10c6:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    10ca:	89 2b       	or	r24, r25
    10cc:	29 f4       	brne	.+10     	; 0x10d8 <handle_read+0x8c>
	{
		EM_get_appeui(res);
    10ce:	8f 2d       	mov	r24, r15
    10d0:	90 2f       	mov	r25, r16
    10d2:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <EM_get_appeui>
    10d6:	fb c0       	rjmp	.+502    	; 0x12ce <__stack+0x1cf>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    10d8:	24 ee       	ldi	r18, 0xE4	; 228
    10da:	32 e0       	ldi	r19, 0x02	; 2
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	8e 2d       	mov	r24, r14
    10e0:	b6 01       	movw	r22, r12
    10e2:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    10e6:	89 2b       	or	r24, r25
    10e8:	29 f4       	brne	.+10     	; 0x10f4 <handle_read+0xa8>
	{
		EM_get_appkey(res);
    10ea:	8f 2d       	mov	r24, r15
    10ec:	90 2f       	mov	r25, r16
    10ee:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <EM_get_appkey>
    10f2:	ed c0       	rjmp	.+474    	; 0x12ce <__stack+0x1cf>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    10f4:	2b ee       	ldi	r18, 0xEB	; 235
    10f6:	32 e0       	ldi	r19, 0x02	; 2
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	8e 2d       	mov	r24, r14
    10fc:	b6 01       	movw	r22, r12
    10fe:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1102:	89 2b       	or	r24, r25
    1104:	e1 f4       	brne	.+56     	; 0x113e <__stack+0x3f>
	{
		EM_get_ppmfactor(&val);
    1106:	ce 01       	movw	r24, r28
    1108:	45 96       	adiw	r24, 0x15	; 21
    110a:	0e 94 27 21 	call	0x424e	; 0x424e <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    110e:	88 8d       	ldd	r24, Y+24	; 0x18
    1110:	8f 93       	push	r24
    1112:	8f 89       	ldd	r24, Y+23	; 0x17
    1114:	8f 93       	push	r24
    1116:	8e 89       	ldd	r24, Y+22	; 0x16
    1118:	8f 93       	push	r24
    111a:	8d 89       	ldd	r24, Y+21	; 0x15
    111c:	8f 93       	push	r24
    111e:	80 ef       	ldi	r24, 0xF0	; 240
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	a0 e0       	ldi	r26, 0x00	; 0
    1124:	af 93       	push	r26
    1126:	9f 93       	push	r25
    1128:	8f 93       	push	r24
    112a:	0f 93       	push	r16
    112c:	ff 92       	push	r15
    112e:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	c8 c0       	rjmp	.+400    	; 0x12ce <__stack+0x1cf>
	}
	else if(strcmp(par, RW_RRL)==0)
    113e:	25 ef       	ldi	r18, 0xF5	; 245
    1140:	32 e0       	ldi	r19, 0x02	; 2
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	8e 2d       	mov	r24, r14
    1146:	b6 01       	movw	r22, r12
    1148:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    114c:	89 2b       	or	r24, r25
    114e:	e1 f4       	brne	.+56     	; 0x1188 <__stack+0x89>
	{
		EM_get_RRL(&val);
    1150:	ce 01       	movw	r24, r28
    1152:	45 96       	adiw	r24, 0x15	; 21
    1154:	0e 94 36 21 	call	0x426c	; 0x426c <EM_get_RRL>
		sprintf(res, "%.2f", val);
    1158:	88 8d       	ldd	r24, Y+24	; 0x18
    115a:	8f 93       	push	r24
    115c:	8f 89       	ldd	r24, Y+23	; 0x17
    115e:	8f 93       	push	r24
    1160:	8e 89       	ldd	r24, Y+22	; 0x16
    1162:	8f 93       	push	r24
    1164:	8d 89       	ldd	r24, Y+21	; 0x15
    1166:	8f 93       	push	r24
    1168:	80 ef       	ldi	r24, 0xF0	; 240
    116a:	92 e0       	ldi	r25, 0x02	; 2
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	af 93       	push	r26
    1170:	9f 93       	push	r25
    1172:	8f 93       	push	r24
    1174:	0f 93       	push	r16
    1176:	ff 92       	push	r15
    1178:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	a3 c0       	rjmp	.+326    	; 0x12ce <__stack+0x1cf>
	}
	else if(strcmp(par, RW_VCC)==0)
    1188:	2a ef       	ldi	r18, 0xFA	; 250
    118a:	32 e0       	ldi	r19, 0x02	; 2
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	8e 2d       	mov	r24, r14
    1190:	b6 01       	movw	r22, r12
    1192:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1196:	89 2b       	or	r24, r25
    1198:	e1 f4       	brne	.+56     	; 0x11d2 <__stack+0xd3>
	{
		EM_get_Vcc(&val);
    119a:	ce 01       	movw	r24, r28
    119c:	45 96       	adiw	r24, 0x15	; 21
    119e:	0e 94 45 21 	call	0x428a	; 0x428a <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    11a2:	88 8d       	ldd	r24, Y+24	; 0x18
    11a4:	8f 93       	push	r24
    11a6:	8f 89       	ldd	r24, Y+23	; 0x17
    11a8:	8f 93       	push	r24
    11aa:	8e 89       	ldd	r24, Y+22	; 0x16
    11ac:	8f 93       	push	r24
    11ae:	8d 89       	ldd	r24, Y+21	; 0x15
    11b0:	8f 93       	push	r24
    11b2:	80 ef       	ldi	r24, 0xF0	; 240
    11b4:	92 e0       	ldi	r25, 0x02	; 2
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	af 93       	push	r26
    11ba:	9f 93       	push	r25
    11bc:	8f 93       	push	r24
    11be:	0f 93       	push	r16
    11c0:	ff 92       	push	r15
    11c2:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	7e c0       	rjmp	.+252    	; 0x12ce <__stack+0x1cf>
	}
	else if(strcmp(par, RW_COLS)==0)
    11d2:	2f ef       	ldi	r18, 0xFF	; 255
    11d4:	32 e0       	ldi	r19, 0x02	; 2
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	8e 2d       	mov	r24, r14
    11da:	b6 01       	movw	r22, r12
    11dc:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    11e0:	89 2b       	or	r24, r25
    11e2:	29 f4       	brne	.+10     	; 0x11ee <__stack+0xef>
	{
		read_cols(res);
    11e4:	8f 2d       	mov	r24, r15
    11e6:	90 2f       	mov	r25, r16
    11e8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <read_cols>
    11ec:	70 c0       	rjmp	.+224    	; 0x12ce <__stack+0x1cf>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    11ee:	24 e0       	ldi	r18, 0x04	; 4
    11f0:	33 e0       	ldi	r19, 0x03	; 3
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	8e 2d       	mov	r24, r14
    11f6:	b6 01       	movw	r22, r12
    11f8:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    11fc:	89 2b       	or	r24, r25
    11fe:	a1 f4       	brne	.+40     	; 0x1228 <__stack+0x129>
	{
		uint8_t val=EM_get_heat_up_time();
    1200:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    1204:	1f 92       	push	r1
    1206:	8f 93       	push	r24
    1208:	8e e0       	ldi	r24, 0x0E	; 14
    120a:	93 e0       	ldi	r25, 0x03	; 3
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	af 93       	push	r26
    1210:	9f 93       	push	r25
    1212:	8f 93       	push	r24
    1214:	0f 93       	push	r16
    1216:	ff 92       	push	r15
    1218:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	53 c0       	rjmp	.+166    	; 0x12ce <__stack+0x1cf>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1228:	20 e2       	ldi	r18, 0x20	; 32
    122a:	33 e0       	ldi	r19, 0x03	; 3
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	8e 2d       	mov	r24, r14
    1230:	b6 01       	movw	r22, r12
    1232:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1236:	89 2b       	or	r24, r25
    1238:	a1 f4       	brne	.+40     	; 0x1262 <__stack+0x163>
	{
		uint16_t val=EM_get_air_pump_time();
    123a:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    123e:	9f 93       	push	r25
    1240:	8f 93       	push	r24
    1242:	8b e2       	ldi	r24, 0x2B	; 43
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	a0 e0       	ldi	r26, 0x00	; 0
    1248:	af 93       	push	r26
    124a:	9f 93       	push	r25
    124c:	8f 93       	push	r24
    124e:	0f 93       	push	r16
    1250:	ff 92       	push	r15
    1252:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	36 c0       	rjmp	.+108    	; 0x12ce <__stack+0x1cf>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1262:	2e e3       	ldi	r18, 0x3E	; 62
    1264:	33 e0       	ldi	r19, 0x03	; 3
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	8e 2d       	mov	r24, r14
    126a:	b6 01       	movw	r22, r12
    126c:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1270:	89 2b       	or	r24, r25
    1272:	a1 f4       	brne	.+40     	; 0x129c <__stack+0x19d>
	{
		uint8_t val=EM_get_sp_interval();
    1274:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1278:	1f 92       	push	r1
    127a:	8f 93       	push	r24
    127c:	8a e4       	ldi	r24, 0x4A	; 74
    127e:	93 e0       	ldi	r25, 0x03	; 3
    1280:	a0 e0       	ldi	r26, 0x00	; 0
    1282:	af 93       	push	r26
    1284:	9f 93       	push	r25
    1286:	8f 93       	push	r24
    1288:	0f 93       	push	r16
    128a:	ff 92       	push	r15
    128c:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	19 c0       	rjmp	.+50     	; 0x12ce <__stack+0x1cf>
	}
	else if(strcmp(par, RW_TIME)==0)
    129c:	29 e6       	ldi	r18, 0x69	; 105
    129e:	33 e0       	ldi	r19, 0x03	; 3
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	8e 2d       	mov	r24, r14
    12a4:	b6 01       	movw	r22, r12
    12a6:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    12aa:	89 2b       	or	r24, r25
    12ac:	29 f4       	brne	.+10     	; 0x12b8 <__stack+0x1b9>
	{
		read_time(res);
    12ae:	8f 2d       	mov	r24, r15
    12b0:	90 2f       	mov	r25, r16
    12b2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <read_time>
    12b6:	0b c0       	rjmp	.+22     	; 0x12ce <__stack+0x1cf>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    12b8:	26 e1       	ldi	r18, 0x16	; 22
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	4e e6       	ldi	r20, 0x6E	; 110
    12be:	53 e0       	ldi	r21, 0x03	; 3
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	8f 2d       	mov	r24, r15
    12c4:	90 2f       	mov	r25, r16
    12c6:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <__stack+0x1cf>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    12cc:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    12ce:	81 2f       	mov	r24, r17
    12d0:	68 96       	adiw	r28, 0x18	; 24
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	df 90       	pop	r13
    12ea:	cf 90       	pop	r12
    12ec:	08 95       	ret

Disassembly of section .text.handle_write:

000012ee <handle_write>:

bool handle_write(const char cmd[], char res[]){
    12ee:	6f 92       	push	r6
    12f0:	7f 92       	push	r7
    12f2:	8f 92       	push	r8
    12f4:	af 92       	push	r10
    12f6:	bf 92       	push	r11
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	64 97       	sbiw	r28, 0x14	; 20
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	3b 01       	movw	r6, r22
    1316:	88 2e       	mov	r8, r24
    1318:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    131a:	21 e0       	ldi	r18, 0x01	; 1
    131c:	ae 01       	movw	r20, r28
    131e:	4f 5f       	subi	r20, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    1326:	18 2f       	mov	r17, r24
    1328:	88 23       	and	r24, r24
    132a:	09 f4       	brne	.+2      	; 0x132e <handle_write+0x40>
    132c:	cd c0       	rjmp	.+410    	; 0x14c8 <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    132e:	ce 01       	movw	r24, r28
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	6c 01       	movw	r12, r24
    1334:	20 e8       	ldi	r18, 0x80	; 128
    1336:	e2 2e       	mov	r14, r18
    1338:	26 ed       	ldi	r18, 0xD6	; 214
    133a:	32 e0       	ldi	r19, 0x02	; 2
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	8e 2d       	mov	r24, r14
    1340:	b6 01       	movw	r22, r12
    1342:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1346:	89 2b       	or	r24, r25
    1348:	39 f4       	brne	.+14     	; 0x1358 <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    134a:	a5 01       	movw	r20, r10
    134c:	88 2d       	mov	r24, r8
    134e:	b3 01       	movw	r22, r6
    1350:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <write_deveui>
    1354:	18 2f       	mov	r17, r24
    1356:	b8 c0       	rjmp	.+368    	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1358:	2d ed       	ldi	r18, 0xDD	; 221
    135a:	32 e0       	ldi	r19, 0x02	; 2
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	8e 2d       	mov	r24, r14
    1360:	b6 01       	movw	r22, r12
    1362:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1366:	89 2b       	or	r24, r25
    1368:	39 f4       	brne	.+14     	; 0x1378 <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    136a:	a5 01       	movw	r20, r10
    136c:	88 2d       	mov	r24, r8
    136e:	b3 01       	movw	r22, r6
    1370:	0e 94 81 16 	call	0x2d02	; 0x2d02 <write_appeui>
    1374:	18 2f       	mov	r17, r24
    1376:	a8 c0       	rjmp	.+336    	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1378:	24 ee       	ldi	r18, 0xE4	; 228
    137a:	32 e0       	ldi	r19, 0x02	; 2
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	8e 2d       	mov	r24, r14
    1380:	b6 01       	movw	r22, r12
    1382:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1386:	89 2b       	or	r24, r25
    1388:	39 f4       	brne	.+14     	; 0x1398 <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    138a:	a5 01       	movw	r20, r10
    138c:	88 2d       	mov	r24, r8
    138e:	b3 01       	movw	r22, r6
    1390:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <write_appkey>
    1394:	18 2f       	mov	r17, r24
    1396:	98 c0       	rjmp	.+304    	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1398:	2b ee       	ldi	r18, 0xEB	; 235
    139a:	32 e0       	ldi	r19, 0x02	; 2
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	8e 2d       	mov	r24, r14
    13a0:	b6 01       	movw	r22, r12
    13a2:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    13a6:	89 2b       	or	r24, r25
    13a8:	39 f4       	brne	.+14     	; 0x13b8 <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    13aa:	a5 01       	movw	r20, r10
    13ac:	88 2d       	mov	r24, r8
    13ae:	b3 01       	movw	r22, r6
    13b0:	0e 94 67 1b 	call	0x36ce	; 0x36ce <write_PPM_factor>
    13b4:	18 2f       	mov	r17, r24
    13b6:	88 c0       	rjmp	.+272    	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    13b8:	25 ef       	ldi	r18, 0xF5	; 245
    13ba:	32 e0       	ldi	r19, 0x02	; 2
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	8e 2d       	mov	r24, r14
    13c0:	b6 01       	movw	r22, r12
    13c2:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    13c6:	89 2b       	or	r24, r25
    13c8:	39 f4       	brne	.+14     	; 0x13d8 <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    13ca:	a5 01       	movw	r20, r10
    13cc:	88 2d       	mov	r24, r8
    13ce:	b3 01       	movw	r22, r6
    13d0:	0e 94 8d 1b 	call	0x371a	; 0x371a <write_RRL>
    13d4:	18 2f       	mov	r17, r24
    13d6:	78 c0       	rjmp	.+240    	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    13d8:	2a ef       	ldi	r18, 0xFA	; 250
    13da:	32 e0       	ldi	r19, 0x02	; 2
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	8e 2d       	mov	r24, r14
    13e0:	b6 01       	movw	r22, r12
    13e2:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    13e6:	89 2b       	or	r24, r25
    13e8:	39 f4       	brne	.+14     	; 0x13f8 <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    13ea:	a5 01       	movw	r20, r10
    13ec:	88 2d       	mov	r24, r8
    13ee:	b3 01       	movw	r22, r6
    13f0:	0e 94 b3 1b 	call	0x3766	; 0x3766 <write_VCC>
    13f4:	18 2f       	mov	r17, r24
    13f6:	68 c0       	rjmp	.+208    	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    13f8:	2f ef       	ldi	r18, 0xFF	; 255
    13fa:	32 e0       	ldi	r19, 0x02	; 2
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	8e 2d       	mov	r24, r14
    1400:	b6 01       	movw	r22, r12
    1402:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1406:	89 2b       	or	r24, r25
    1408:	39 f4       	brne	.+14     	; 0x1418 <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    140a:	a5 01       	movw	r20, r10
    140c:	88 2d       	mov	r24, r8
    140e:	b3 01       	movw	r22, r6
    1410:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <write_cols>
    1414:	18 2f       	mov	r17, r24
    1416:	58 c0       	rjmp	.+176    	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1418:	24 e0       	ldi	r18, 0x04	; 4
    141a:	33 e0       	ldi	r19, 0x03	; 3
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	8e 2d       	mov	r24, r14
    1420:	b6 01       	movw	r22, r12
    1422:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1426:	89 2b       	or	r24, r25
    1428:	39 f4       	brne	.+14     	; 0x1438 <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    142a:	a5 01       	movw	r20, r10
    142c:	88 2d       	mov	r24, r8
    142e:	b3 01       	movw	r22, r6
    1430:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <write_heat_up>
    1434:	18 2f       	mov	r17, r24
    1436:	48 c0       	rjmp	.+144    	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1438:	20 e2       	ldi	r18, 0x20	; 32
    143a:	33 e0       	ldi	r19, 0x03	; 3
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	8e 2d       	mov	r24, r14
    1440:	b6 01       	movw	r22, r12
    1442:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1446:	89 2b       	or	r24, r25
    1448:	39 f4       	brne	.+14     	; 0x1458 <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    144a:	a5 01       	movw	r20, r10
    144c:	88 2d       	mov	r24, r8
    144e:	b3 01       	movw	r22, r6
    1450:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <write_air_pump>
    1454:	18 2f       	mov	r17, r24
    1456:	38 c0       	rjmp	.+112    	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1458:	2e e3       	ldi	r18, 0x3E	; 62
    145a:	33 e0       	ldi	r19, 0x03	; 3
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	8e 2d       	mov	r24, r14
    1460:	b6 01       	movw	r22, r12
    1462:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1466:	89 2b       	or	r24, r25
    1468:	39 f4       	brne	.+14     	; 0x1478 <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    146a:	a5 01       	movw	r20, r10
    146c:	88 2d       	mov	r24, r8
    146e:	b3 01       	movw	r22, r6
    1470:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <write_sp_interval>
    1474:	18 2f       	mov	r17, r24
    1476:	28 c0       	rjmp	.+80     	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1478:	24 e8       	ldi	r18, 0x84	; 132
    147a:	33 e0       	ldi	r19, 0x03	; 3
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	8e 2d       	mov	r24, r14
    1480:	b6 01       	movw	r22, r12
    1482:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1486:	89 2b       	or	r24, r25
    1488:	39 f4       	brne	.+14     	; 0x1498 <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    148a:	a5 01       	movw	r20, r10
    148c:	88 2d       	mov	r24, r8
    148e:	b3 01       	movw	r22, r6
    1490:	0e 94 b0 10 	call	0x2160	; 0x2160 <write_reset>
    1494:	18 2f       	mov	r17, r24
    1496:	18 c0       	rjmp	.+48     	; 0x14c8 <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1498:	29 e6       	ldi	r18, 0x69	; 105
    149a:	33 e0       	ldi	r19, 0x03	; 3
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	8e 2d       	mov	r24, r14
    14a0:	b6 01       	movw	r22, r12
    14a2:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    14a6:	89 2b       	or	r24, r25
    14a8:	39 f4       	brne	.+14     	; 0x14b8 <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    14aa:	a5 01       	movw	r20, r10
    14ac:	88 2d       	mov	r24, r8
    14ae:	b3 01       	movw	r22, r6
    14b0:	0e 94 31 10 	call	0x2062	; 0x2062 <write_time>
    14b4:	18 2f       	mov	r17, r24
    14b6:	08 c0       	rjmp	.+16     	; 0x14c8 <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    14b8:	26 e1       	ldi	r18, 0x16	; 22
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	4e e6       	ldi	r20, 0x6E	; 110
    14be:	53 e0       	ldi	r21, 0x03	; 3
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	c5 01       	movw	r24, r10
    14c4:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
	}
	
}
    14c8:	81 2f       	mov	r24, r17
    14ca:	64 96       	adiw	r28, 0x14	; 20
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	8f 90       	pop	r8
    14e8:	7f 90       	pop	r7
    14ea:	6f 90       	pop	r6
    14ec:	08 95       	ret

Disassembly of section .text.handle_methane:

0000169e <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    169e:	9f 92       	push	r9
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	2e 97       	sbiw	r28, 0x0e	; 14
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	94 2e       	mov	r9, r20
    16c6:	a5 2e       	mov	r10, r21
	if(!get_parameter(cmd, par, 2)) return false;
    16c8:	22 e0       	ldi	r18, 0x02	; 2
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	56 e0       	ldi	r21, 0x06	; 6
    16ce:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    16d2:	b8 2e       	mov	r11, r24
    16d4:	88 23       	and	r24, r24
    16d6:	09 f4       	brne	.+2      	; 0x16da <handle_methane+0x3c>
    16d8:	92 c0       	rjmp	.+292    	; 0x17fe <handle_methane+0x160>
	
	if(strcmp(par, METH_POWER_ON)==0){
    16da:	8f e7       	ldi	r24, 0x7F	; 127
    16dc:	96 e0       	ldi	r25, 0x06	; 6
    16de:	6c 01       	movw	r12, r24
    16e0:	20 e8       	ldi	r18, 0x80	; 128
    16e2:	e2 2e       	mov	r14, r18
    16e4:	2a e8       	ldi	r18, 0x8A	; 138
    16e6:	33 e0       	ldi	r19, 0x03	; 3
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	8e 2d       	mov	r24, r14
    16ec:	b6 01       	movw	r22, r12
    16ee:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    16f2:	89 2b       	or	r24, r25
    16f4:	79 f4       	brne	.+30     	; 0x1714 <handle_methane+0x76>
		PM_HAL_meth_power_init();
    16f6:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	0e 94 da 21 	call	0x43b4	; 0x43b4 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    1700:	28 e1       	ldi	r18, 0x18	; 24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	4d e8       	ldi	r20, 0x8D	; 141
    1706:	53 e0       	ldi	r21, 0x03	; 3
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	89 2d       	mov	r24, r9
    170c:	9a 2d       	mov	r25, r10
    170e:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
    1712:	75 c0       	rjmp	.+234    	; 0x17fe <handle_methane+0x160>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    1714:	25 ea       	ldi	r18, 0xA5	; 165
    1716:	33 e0       	ldi	r19, 0x03	; 3
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	8e 2d       	mov	r24, r14
    171c:	b6 01       	movw	r22, r12
    171e:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1722:	89 2b       	or	r24, r25
    1724:	79 f4       	brne	.+30     	; 0x1744 <handle_methane+0xa6>
		PM_HAL_meth_power_init();
    1726:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	0e 94 da 21 	call	0x43b4	; 0x43b4 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    1730:	29 e1       	ldi	r18, 0x19	; 25
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	49 ea       	ldi	r20, 0xA9	; 169
    1736:	53 e0       	ldi	r21, 0x03	; 3
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	89 2d       	mov	r24, r9
    173c:	9a 2d       	mov	r25, r10
    173e:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
    1742:	5d c0       	rjmp	.+186    	; 0x17fe <handle_methane+0x160>
	}
	else if(strcmp(par, METH_READ)==0)
    1744:	22 ec       	ldi	r18, 0xC2	; 194
    1746:	33 e0       	ldi	r19, 0x03	; 3
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	8e 2d       	mov	r24, r14
    174c:	b6 01       	movw	r22, r12
    174e:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1752:	89 2b       	or	r24, r25
    1754:	09 f0       	breq	.+2      	; 0x1758 <handle_methane+0xba>
    1756:	4a c0       	rjmp	.+148    	; 0x17ec <handle_methane+0x14e>
	{
		//Set parameters
		float vccx=0.0;
    1758:	19 86       	std	Y+9, r1	; 0x09
    175a:	1a 86       	std	Y+10, r1	; 0x0a
    175c:	1b 86       	std	Y+11, r1	; 0x0b
    175e:	1c 86       	std	Y+12, r1	; 0x0c
		float rrlx=0.0;
    1760:	1d 82       	std	Y+5, r1	; 0x05
    1762:	1e 82       	std	Y+6, r1	; 0x06
    1764:	1f 82       	std	Y+7, r1	; 0x07
    1766:	18 86       	std	Y+8, r1	; 0x08
		float ppmx=0.0;
    1768:	19 82       	std	Y+1, r1	; 0x01
    176a:	1a 82       	std	Y+2, r1	; 0x02
    176c:	1b 82       	std	Y+3, r1	; 0x03
    176e:	1c 82       	std	Y+4, r1	; 0x04
		
		EM_get_Vcc(&vccx);
    1770:	ce 01       	movw	r24, r28
    1772:	09 96       	adiw	r24, 0x09	; 9
    1774:	0e 94 45 21 	call	0x428a	; 0x428a <EM_get_Vcc>
		EM_get_RRL(&rrlx);
    1778:	ce 01       	movw	r24, r28
    177a:	05 96       	adiw	r24, 0x05	; 5
    177c:	0e 94 36 21 	call	0x426c	; 0x426c <EM_get_RRL>
		EM_get_ppmfactor(&ppmx);
    1780:	ce 01       	movw	r24, r28
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	0e 94 27 21 	call	0x424e	; 0x424e <EM_get_ppmfactor>
		
		ADC_set_conf_parameters(vccx, rrlx, ppmx);
    1788:	e9 80       	ldd	r14, Y+1	; 0x01
    178a:	fa 80       	ldd	r15, Y+2	; 0x02
    178c:	0b 81       	ldd	r16, Y+3	; 0x03
    178e:	1c 81       	ldd	r17, Y+4	; 0x04
    1790:	2d 81       	ldd	r18, Y+5	; 0x05
    1792:	3e 81       	ldd	r19, Y+6	; 0x06
    1794:	4f 81       	ldd	r20, Y+7	; 0x07
    1796:	58 85       	ldd	r21, Y+8	; 0x08
    1798:	69 85       	ldd	r22, Y+9	; 0x09
    179a:	7a 85       	ldd	r23, Y+10	; 0x0a
    179c:	8b 85       	ldd	r24, Y+11	; 0x0b
    179e:	9c 85       	ldd	r25, Y+12	; 0x0c
    17a0:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <ADC_set_conf_parameters>
		
		
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    17a4:	ce 01       	movw	r24, r28
    17a6:	0d 96       	adiw	r24, 0x0d	; 13
    17a8:	0e 94 aa 19 	call	0x3354	; 0x3354 <ADC_get_value>
    17ac:	88 23       	and	r24, r24
    17ae:	51 f0       	breq	.+20     	; 0x17c4 <handle_methane+0x126>
		{
			strcpy(res, "Error when reading data");
    17b0:	28 e1       	ldi	r18, 0x18	; 24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	47 ec       	ldi	r20, 0xC7	; 199
    17b6:	53 e0       	ldi	r21, 0x03	; 3
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	89 2d       	mov	r24, r9
    17bc:	9a 2d       	mov	r25, r10
    17be:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
    17c2:	1d c0       	rjmp	.+58     	; 0x17fe <handle_methane+0x160>
		}else{
			sprintf(res, "PPM=%u", val);
    17c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    17c6:	8f 93       	push	r24
    17c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ca:	8f 93       	push	r24
    17cc:	8f ed       	ldi	r24, 0xDF	; 223
    17ce:	93 e0       	ldi	r25, 0x03	; 3
    17d0:	a0 e0       	ldi	r26, 0x00	; 0
    17d2:	af 93       	push	r26
    17d4:	9f 93       	push	r25
    17d6:	8f 93       	push	r24
    17d8:	af 92       	push	r10
    17da:	9f 92       	push	r9
    17dc:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <handle_methane+0x160>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    17ec:	26 e1       	ldi	r18, 0x16	; 22
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	46 ee       	ldi	r20, 0xE6	; 230
    17f2:	53 e0       	ldi	r21, 0x03	; 3
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	89 2d       	mov	r24, r9
    17f8:	9a 2d       	mov	r25, r10
    17fa:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
	}
	return false;
}
    17fe:	8b 2d       	mov	r24, r11
    1800:	2e 96       	adiw	r28, 0x0e	; 14
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	9f 90       	pop	r9
    1822:	08 95       	ret

Disassembly of section .text.handle_SCD30:

00001d34 <handle_SCD30>:

static bool handle_SCD30(const char cmd[], char res[]){
    1d34:	bf 92       	push	r11
    1d36:	cf 92       	push	r12
    1d38:	df 92       	push	r13
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <handle_SCD30+0x14>
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <handle_SCD30+0x16>
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <handle_SCD30+0x18>
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	f4 2e       	mov	r15, r20
    1d52:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    1d54:	22 e0       	ldi	r18, 0x02	; 2
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	56 e0       	ldi	r21, 0x06	; 6
    1d5a:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    1d5e:	18 2f       	mov	r17, r24
    1d60:	88 23       	and	r24, r24
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <handle_SCD30+0x32>
    1d64:	62 c0       	rjmp	.+196    	; 0x1e2a <handle_SCD30+0xf6>
	
	if(strcmp(par, SCD30_READ)==0){
    1d66:	6f e7       	ldi	r22, 0x7F	; 127
    1d68:	76 e0       	ldi	r23, 0x06	; 6
    1d6a:	80 e8       	ldi	r24, 0x80	; 128
    1d6c:	22 ec       	ldi	r18, 0xC2	; 194
    1d6e:	33 e0       	ldi	r19, 0x03	; 3
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    1d76:	89 2b       	or	r24, r25
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <handle_SCD30+0x48>
    1d7a:	4e c0       	rjmp	.+156    	; 0x1e18 <handle_SCD30+0xe4>
		uint16_t co2, temp, humidity;
		if(SCD30_get_reading(&co2, &temp, &humidity)!=SCD30_STATUS_SUCCESS){
    1d7c:	ae 01       	movw	r20, r28
    1d7e:	4f 5f       	subi	r20, 0xFF	; 255
    1d80:	5f 4f       	sbci	r21, 0xFF	; 255
    1d82:	be 01       	movw	r22, r28
    1d84:	6d 5f       	subi	r22, 0xFD	; 253
    1d86:	7f 4f       	sbci	r23, 0xFF	; 255
    1d88:	ce 01       	movw	r24, r28
    1d8a:	05 96       	adiw	r24, 0x05	; 5
    1d8c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <SCD30_get_reading>
    1d90:	88 23       	and	r24, r24
    1d92:	51 f0       	breq	.+20     	; 0x1da8 <handle_SCD30+0x74>
			strcpy(res, "Error when reading data");
    1d94:	28 e1       	ldi	r18, 0x18	; 24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	47 ec       	ldi	r20, 0xC7	; 199
    1d9a:	53 e0       	ldi	r21, 0x03	; 3
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	8f 2d       	mov	r24, r15
    1da0:	90 2f       	mov	r25, r16
    1da2:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
    1da6:	41 c0       	rjmp	.+130    	; 0x1e2a <handle_SCD30+0xf6>
		}else{
			float temp_f=(float)temp/10.00;
    1da8:	6b 81       	ldd	r22, Y+3	; 0x03
    1daa:	7c 81       	ldd	r23, Y+4	; 0x04
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__floatunsisf>
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 43 23 	call	0x4686	; 0x4686 <__divsf3>
    1dc0:	e6 2e       	mov	r14, r22
    1dc2:	d7 2e       	mov	r13, r23
    1dc4:	c8 2e       	mov	r12, r24
    1dc6:	b9 2e       	mov	r11, r25
			float hum_f=(float)humidity/10.00;
    1dc8:	69 81       	ldd	r22, Y+1	; 0x01
    1dca:	7a 81       	ldd	r23, Y+2	; 0x02
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__floatunsisf>
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 43 23 	call	0x4686	; 0x4686 <__divsf3>
			sprintf(res, "CO2=%u ppm, temp=%.1f C, humidity=%.1f%% RH", co2, temp_f, hum_f);
    1de0:	9f 93       	push	r25
    1de2:	8f 93       	push	r24
    1de4:	7f 93       	push	r23
    1de6:	6f 93       	push	r22
    1de8:	bf 92       	push	r11
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	8e 81       	ldd	r24, Y+6	; 0x06
    1df2:	8f 93       	push	r24
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	8f 93       	push	r24
    1df8:	8c ef       	ldi	r24, 0xFC	; 252
    1dfa:	93 e0       	ldi	r25, 0x03	; 3
    1dfc:	a0 e0       	ldi	r26, 0x00	; 0
    1dfe:	af 93       	push	r26
    1e00:	9f 93       	push	r25
    1e02:	8f 93       	push	r24
    1e04:	0f 93       	push	r16
    1e06:	ff 92       	push	r15
    1e08:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <sprintf>
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	09 c0       	rjmp	.+18     	; 0x1e2a <handle_SCD30+0xf6>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1e18:	26 e1       	ldi	r18, 0x16	; 22
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	46 ee       	ldi	r20, 0xE6	; 230
    1e1e:	53 e0       	ldi	r21, 0x03	; 3
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	8f 2d       	mov	r24, r15
    1e24:	90 2f       	mov	r25, r16
    1e26:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
	}
}
    1e2a:	81 2f       	mov	r24, r17
    1e2c:	26 96       	adiw	r28, 0x06	; 6
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	df 90       	pop	r13
    1e46:	cf 90       	pop	r12
    1e48:	bf 90       	pop	r11
    1e4a:	08 95       	ret

Disassembly of section .text.handle_pump:

000027a6 <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    27a6:	cf 92       	push	r12
    27a8:	df 92       	push	r13
    27aa:	ef 92       	push	r14
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    27b4:	22 e0       	ldi	r18, 0x02	; 2
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	56 e0       	ldi	r21, 0x06	; 6
    27ba:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    27be:	c8 2f       	mov	r28, r24
    27c0:	88 23       	and	r24, r24
    27c2:	d9 f1       	breq	.+118    	; 0x283a <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    27c4:	8f e7       	ldi	r24, 0x7F	; 127
    27c6:	96 e0       	ldi	r25, 0x06	; 6
    27c8:	6c 01       	movw	r12, r24
    27ca:	20 e8       	ldi	r18, 0x80	; 128
    27cc:	e2 2e       	mov	r14, r18
    27ce:	2a e8       	ldi	r18, 0x8A	; 138
    27d0:	33 e0       	ldi	r19, 0x03	; 3
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	8e 2d       	mov	r24, r14
    27d6:	b6 01       	movw	r22, r12
    27d8:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    27dc:	89 2b       	or	r24, r25
    27de:	71 f4       	brne	.+28     	; 0x27fc <handle_pump+0x56>
		PM_HAL_BC_power_init();
    27e0:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	0e 94 ee 21 	call	0x43dc	; 0x43dc <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    27ea:	25 e1       	ldi	r18, 0x15	; 21
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	48 e2       	ldi	r20, 0x28	; 40
    27f0:	54 e0       	ldi	r21, 0x04	; 4
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	c8 01       	movw	r24, r16
    27f6:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
    27fa:	1f c0       	rjmp	.+62     	; 0x283a <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    27fc:	25 ea       	ldi	r18, 0xA5	; 165
    27fe:	33 e0       	ldi	r19, 0x03	; 3
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	8e 2d       	mov	r24, r14
    2804:	b6 01       	movw	r22, r12
    2806:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    280a:	89 2b       	or	r24, r25
    280c:	71 f4       	brne	.+28     	; 0x282a <handle_pump+0x84>
		PM_HAL_BC_power_init();
    280e:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	0e 94 ee 21 	call	0x43dc	; 0x43dc <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    2818:	26 e1       	ldi	r18, 0x16	; 22
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	4d e3       	ldi	r20, 0x3D	; 61
    281e:	54 e0       	ldi	r21, 0x04	; 4
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	c8 01       	movw	r24, r16
    2824:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
    2828:	08 c0       	rjmp	.+16     	; 0x283a <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    282a:	26 e1       	ldi	r18, 0x16	; 22
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	46 ee       	ldi	r20, 0xE6	; 230
    2830:	53 e0       	ldi	r21, 0x03	; 3
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	c8 01       	movw	r24, r16
    2836:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
	}
}
    283a:	8c 2f       	mov	r24, r28
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ef 90       	pop	r14
    2844:	df 90       	pop	r13
    2846:	cf 90       	pop	r12
    2848:	08 95       	ret

Disassembly of section .text.handle_sensor:

0000263a <handle_sensor>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_SCD30(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sensor(const char cmd[], char res[]){
    263a:	6f 92       	push	r6
    263c:	7f 92       	push	r7
    263e:	8f 92       	push	r8
    2640:	cf 92       	push	r12
    2642:	df 92       	push	r13
    2644:	ef 92       	push	r14
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	3b 01       	movw	r6, r22
    264e:	88 2e       	mov	r8, r24
    2650:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    2652:	21 e0       	ldi	r18, 0x01	; 1
    2654:	4f e7       	ldi	r20, 0x7F	; 127
    2656:	56 e0       	ldi	r21, 0x06	; 6
    2658:	0e 94 bb 14 	call	0x2976	; 0x2976 <get_parameter>
    265c:	c8 2f       	mov	r28, r24
    265e:	88 23       	and	r24, r24
    2660:	e9 f1       	breq	.+122    	; 0x26dc <handle_sensor+0xa2>
	
	if(strcmp(par, S_METH)==0){
    2662:	8f e7       	ldi	r24, 0x7F	; 127
    2664:	96 e0       	ldi	r25, 0x06	; 6
    2666:	6c 01       	movw	r12, r24
    2668:	20 e8       	ldi	r18, 0x80	; 128
    266a:	e2 2e       	mov	r14, r18
    266c:	23 e5       	ldi	r18, 0x53	; 83
    266e:	34 e0       	ldi	r19, 0x04	; 4
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	8e 2d       	mov	r24, r14
    2674:	b6 01       	movw	r22, r12
    2676:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    267a:	89 2b       	or	r24, r25
    267c:	39 f4       	brne	.+14     	; 0x268c <handle_sensor+0x52>
		return handle_methane(cmd, res);
    267e:	a8 01       	movw	r20, r16
    2680:	88 2d       	mov	r24, r8
    2682:	b3 01       	movw	r22, r6
    2684:	0e 94 4f 0b 	call	0x169e	; 0x169e <handle_methane>
    2688:	c8 2f       	mov	r28, r24
    268a:	28 c0       	rjmp	.+80     	; 0x26dc <handle_sensor+0xa2>
	}else if(strcmp(par, S_SCD30)==0){
    268c:	28 e5       	ldi	r18, 0x58	; 88
    268e:	34 e0       	ldi	r19, 0x04	; 4
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	8e 2d       	mov	r24, r14
    2694:	b6 01       	movw	r22, r12
    2696:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    269a:	89 2b       	or	r24, r25
    269c:	39 f4       	brne	.+14     	; 0x26ac <handle_sensor+0x72>
		return handle_SCD30(cmd, res);
    269e:	a8 01       	movw	r20, r16
    26a0:	88 2d       	mov	r24, r8
    26a2:	b3 01       	movw	r22, r6
    26a4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <handle_SCD30>
    26a8:	c8 2f       	mov	r28, r24
    26aa:	18 c0       	rjmp	.+48     	; 0x26dc <handle_sensor+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    26ac:	2e e5       	ldi	r18, 0x5E	; 94
    26ae:	34 e0       	ldi	r19, 0x04	; 4
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	8e 2d       	mov	r24, r14
    26b4:	b6 01       	movw	r22, r12
    26b6:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strcmp>
    26ba:	89 2b       	or	r24, r25
    26bc:	39 f4       	brne	.+14     	; 0x26cc <handle_sensor+0x92>
		return handle_pump(cmd, res);
    26be:	a8 01       	movw	r20, r16
    26c0:	88 2d       	mov	r24, r8
    26c2:	b3 01       	movw	r22, r6
    26c4:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <handle_pump>
    26c8:	c8 2f       	mov	r28, r24
    26ca:	08 c0       	rjmp	.+16     	; 0x26dc <handle_sensor+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    26cc:	26 e1       	ldi	r18, 0x16	; 22
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	46 ee       	ldi	r20, 0xE6	; 230
    26d2:	53 e0       	ldi	r21, 0x03	; 3
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	c8 01       	movw	r24, r16
    26d8:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <memcpy>
		return true;
	}
}
    26dc:	8c 2f       	mov	r24, r28
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	ef 90       	pop	r14
    26e6:	df 90       	pop	r13
    26e8:	cf 90       	pop	r12
    26ea:	8f 90       	pop	r8
    26ec:	7f 90       	pop	r7
    26ee:	6f 90       	pop	r6
    26f0:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00004136 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    4136:	0e 94 2a 22 	call	0x4454	; 0x4454 <TWI_HAL_init>
	PM_HAL_adc_power_init();
    413a:	0e 94 55 22 	call	0x44aa	; 0x44aa <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    4144:	0e 94 63 22 	call	0x44c6	; 0x44c6 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    414e:	0e 94 af 20 	call	0x415e	; 0x415e <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    4152:	88 23       	and	r24, r24
    4154:	11 f0       	breq	.+4      	; 0x415a <init_methane_SCD30+0x24>
    4156:	80 e0       	ldi	r24, 0x00	; 0
    4158:	08 95       	ret
	return true;
    415a:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    415c:	08 95       	ret

Disassembly of section .text.count_parameters:

000034a8 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    34a8:	6f 92       	push	r6
    34aa:	7f 92       	push	r7
    34ac:	8f 92       	push	r8
    34ae:	cf 92       	push	r12
    34b0:	df 92       	push	r13
    34b2:	ef 92       	push	r14
    34b4:	3b 01       	movw	r6, r22
    34b6:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    34b8:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    34bc:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    34c2:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    34c4:	10 c0       	rjmp	.+32     	; 0x34e6 <count_parameters+0x3e>
	{
		if(src[i]==' '){
    34c6:	e8 2c       	mov	r14, r8
    34c8:	63 01       	movw	r12, r6
    34ca:	c2 0e       	add	r12, r18
    34cc:	d3 1e       	adc	r13, r19
    34ce:	e1 1c       	adc	r14, r1
    34d0:	37 fd       	sbrc	r19, 7
    34d2:	ea 94       	dec	r14
    34d4:	f6 01       	movw	r30, r12
    34d6:	94 91       	lpm	r25, Z
    34d8:	e7 fc       	sbrc	r14, 7
    34da:	90 81       	ld	r25, Z
    34dc:	90 32       	cpi	r25, 0x20	; 32
    34de:	09 f4       	brne	.+2      	; 0x34e2 <count_parameters+0x3a>
			cnt++;
    34e0:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    34e2:	2f 5f       	subi	r18, 0xFF	; 255
    34e4:	3f 4f       	sbci	r19, 0xFF	; 255
    34e6:	26 17       	cp	r18, r22
    34e8:	37 07       	cpc	r19, r23
    34ea:	68 f3       	brcs	.-38     	; 0x34c6 <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    34ec:	ef 90       	pop	r14
    34ee:	df 90       	pop	r13
    34f0:	cf 90       	pop	r12
    34f2:	8f 90       	pop	r8
    34f4:	7f 90       	pop	r7
    34f6:	6f 90       	pop	r6
    34f8:	08 95       	ret

Disassembly of section .text.par_index:

00002f52 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    2f52:	cf 92       	push	r12
    2f54:	df 92       	push	r13
    2f56:	ef 92       	push	r14
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2f60:	44 23       	and	r20, r20
    2f62:	29 f1       	breq	.+74     	; 0x2fae <par_index+0x5c>
    2f64:	04 2f       	mov	r16, r20
    2f66:	6b 01       	movw	r12, r22
    2f68:	e8 2e       	mov	r14, r24
    2f6a:	c0 e0       	ldi	r28, 0x00	; 0
    2f6c:	d0 e0       	ldi	r29, 0x00	; 0
    2f6e:	10 e0       	ldi	r17, 0x00	; 0
    2f70:	14 c0       	rjmp	.+40     	; 0x2f9a <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    2f72:	ae 2d       	mov	r26, r14
    2f74:	c6 01       	movw	r24, r12
    2f76:	8c 0f       	add	r24, r28
    2f78:	9d 1f       	adc	r25, r29
    2f7a:	a1 1d       	adc	r26, r1
    2f7c:	d7 fd       	sbrc	r29, 7
    2f7e:	aa 95       	dec	r26
    2f80:	fc 01       	movw	r30, r24
    2f82:	84 91       	lpm	r24, Z
    2f84:	a7 fd       	sbrc	r26, 7
    2f86:	80 81       	ld	r24, Z
    2f88:	80 32       	cpi	r24, 0x20	; 32
    2f8a:	31 f4       	brne	.+12     	; 0x2f98 <par_index+0x46>
			cnt++;
    2f8c:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    2f8e:	01 13       	cpse	r16, r17
    2f90:	03 c0       	rjmp	.+6      	; 0x2f98 <par_index+0x46>
				return i+1;
    2f92:	ce 01       	movw	r24, r28
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	0d c0       	rjmp	.+26     	; 0x2fb2 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    2f98:	21 96       	adiw	r28, 0x01	; 1
    2f9a:	8e 2d       	mov	r24, r14
    2f9c:	b6 01       	movw	r22, r12
    2f9e:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    2fa2:	c8 17       	cp	r28, r24
    2fa4:	d9 07       	cpc	r29, r25
    2fa6:	28 f3       	brcs	.-54     	; 0x2f72 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	02 c0       	rjmp	.+4      	; 0x2fb2 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    2fb2:	df 91       	pop	r29
    2fb4:	cf 91       	pop	r28
    2fb6:	1f 91       	pop	r17
    2fb8:	0f 91       	pop	r16
    2fba:	ef 90       	pop	r14
    2fbc:	df 90       	pop	r13
    2fbe:	cf 90       	pop	r12
    2fc0:	08 95       	ret

Disassembly of section .text.get_parameter:

00002976 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    2976:	8f 92       	push	r8
    2978:	9f 92       	push	r9
    297a:	af 92       	push	r10
    297c:	cf 92       	push	r12
    297e:	df 92       	push	r13
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	6b 01       	movw	r12, r22
    298e:	e8 2e       	mov	r14, r24
    2990:	ea 01       	movw	r28, r20
    2992:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    2994:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <count_parameters>
	if(pars<parNo) return false;
    2998:	8f 15       	cp	r24, r15
    299a:	58 f1       	brcs	.+86     	; 0x29f2 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    299c:	8e 2d       	mov	r24, r14
    299e:	b6 01       	movw	r22, r12
    29a0:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    29a4:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    29a6:	4f 2d       	mov	r20, r15
    29a8:	8e 2d       	mov	r24, r14
    29aa:	b6 01       	movw	r22, r12
    29ac:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <par_index>
	uint8_t parLen=0;
    29b0:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    29b2:	15 c0       	rjmp	.+42     	; 0x29de <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    29b4:	46 01       	movw	r8, r12
    29b6:	ae 2c       	mov	r10, r14
    29b8:	82 0e       	add	r8, r18
    29ba:	93 1e       	adc	r9, r19
    29bc:	a1 1c       	adc	r10, r1
    29be:	37 fd       	sbrc	r19, 7
    29c0:	aa 94       	dec	r10
    29c2:	4a 2d       	mov	r20, r10
    29c4:	94 01       	movw	r18, r8
    29c6:	f4 01       	movw	r30, r8
    29c8:	24 91       	lpm	r18, Z
    29ca:	47 fd       	sbrc	r20, 7
    29cc:	20 81       	ld	r18, Z
    29ce:	20 32       	cpi	r18, 0x20	; 32
    29d0:	59 f0       	breq	.+22     	; 0x29e8 <get_parameter+0x72>
		par[parLen++]=src[i];
    29d2:	fe 01       	movw	r30, r28
    29d4:	e9 0f       	add	r30, r25
    29d6:	f1 1d       	adc	r31, r1
    29d8:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    29da:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    29dc:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    29de:	28 2f       	mov	r18, r24
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	20 17       	cp	r18, r16
    29e4:	31 07       	cpc	r19, r17
    29e6:	30 f3       	brcs	.-52     	; 0x29b4 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    29e8:	c9 0f       	add	r28, r25
    29ea:	d1 1d       	adc	r29, r1
    29ec:	18 82       	st	Y, r1
	
	return true;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	01 c0       	rjmp	.+2      	; 0x29f4 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    29f2:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	1f 91       	pop	r17
    29fa:	0f 91       	pop	r16
    29fc:	ff 90       	pop	r15
    29fe:	ef 90       	pop	r14
    2a00:	df 90       	pop	r13
    2a02:	cf 90       	pop	r12
    2a04:	af 90       	pop	r10
    2a06:	9f 90       	pop	r9
    2a08:	8f 90       	pop	r8
    2a0a:	08 95       	ret

Disassembly of section .text.calc_crc8:

00003da2 <calc_crc8>:
 *  Author: Christopher S. Nielsen
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    3da2:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3da4:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    3da6:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    3da8:	14 c0       	rjmp	.+40     	; 0x3dd2 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    3daa:	fa 01       	movw	r30, r20
    3dac:	e3 0f       	add	r30, r19
    3dae:	f1 1d       	adc	r31, r1
    3db0:	90 81       	ld	r25, Z
    3db2:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    3db4:	28 e0       	ldi	r18, 0x08	; 8
    3db6:	0a c0       	rjmp	.+20     	; 0x3dcc <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    3db8:	88 23       	and	r24, r24
    3dba:	34 f4       	brge	.+12     	; 0x3dc8 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	88 0f       	add	r24, r24
    3dc0:	99 1f       	adc	r25, r25
    3dc2:	91 e3       	ldi	r25, 0x31	; 49
    3dc4:	89 27       	eor	r24, r25
    3dc6:	01 c0       	rjmp	.+2      	; 0x3dca <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    3dc8:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    3dca:	21 50       	subi	r18, 0x01	; 1
    3dcc:	21 11       	cpse	r18, r1
    3dce:	f4 cf       	rjmp	.-24     	; 0x3db8 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3dd0:	3f 5f       	subi	r19, 0xFF	; 255
    3dd2:	36 17       	cp	r19, r22
    3dd4:	50 f3       	brcs	.-44     	; 0x3daa <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    3dd6:	08 95       	ret

Disassembly of section .text.get_decimal:

000026f2 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    26f2:	cf 92       	push	r12
    26f4:	df 92       	push	r13
    26f6:	ef 92       	push	r14
    26f8:	ff 92       	push	r15
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    2704:	10 e0       	ldi	r17, 0x00	; 0
    2706:	08 c0       	rjmp	.+16     	; 0x2718 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    2708:	cc 0d       	add	r28, r12
    270a:	dd 1d       	adc	r29, r13
    270c:	88 81       	ld	r24, Y
    270e:	8e 32       	cpi	r24, 0x2E	; 46
    2710:	11 f4       	brne	.+4      	; 0x2716 <get_decimal+0x24>
			index=i+1;
    2712:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    2714:	0c c0       	rjmp	.+24     	; 0x272e <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    2716:	1f 5f       	subi	r17, 0xFF	; 255
    2718:	c1 2f       	mov	r28, r17
    271a:	d0 e0       	ldi	r29, 0x00	; 0
    271c:	b6 01       	movw	r22, r12
    271e:	80 e8       	ldi	r24, 0x80	; 128
    2720:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	c8 17       	cp	r28, r24
    2728:	d9 07       	cpc	r29, r25
    272a:	70 f3       	brcs	.-36     	; 0x2708 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    272c:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    272e:	11 23       	and	r17, r17
    2730:	71 f1       	breq	.+92     	; 0x278e <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    2732:	c1 0e       	add	r12, r17
    2734:	d1 1c       	adc	r13, r1
    2736:	80 e8       	ldi	r24, 0x80	; 128
    2738:	e8 2e       	mov	r14, r24
    273a:	8e 2d       	mov	r24, r14
    273c:	b6 01       	movw	r22, r12
    273e:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    2742:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    2744:	8e 2d       	mov	r24, r14
    2746:	b6 01       	movw	r22, r12
    2748:	0e 94 4b 23 	call	0x4696	; 0x4696 <atoi>
    274c:	8c 01       	movw	r16, r24
	float divisor=1;
    274e:	0f 2e       	mov	r0, r31
    2750:	c1 2c       	mov	r12, r1
    2752:	d1 2c       	mov	r13, r1
    2754:	f0 e8       	ldi	r31, 0x80	; 128
    2756:	ef 2e       	mov	r14, r31
    2758:	ff e3       	ldi	r31, 0x3F	; 63
    275a:	ff 2e       	mov	r15, r31
    275c:	f0 2d       	mov	r31, r0
	
	while(len>0){
    275e:	0b c0       	rjmp	.+22     	; 0x2776 <get_decimal+0x84>
		divisor*=10;
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	c7 01       	movw	r24, r14
    276a:	b6 01       	movw	r22, r12
    276c:	0e 94 47 23 	call	0x468e	; 0x468e <__mulsf3>
    2770:	6b 01       	movw	r12, r22
    2772:	7c 01       	movw	r14, r24
		len--;
    2774:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    2776:	c1 11       	cpse	r28, r1
    2778:	f3 cf       	rjmp	.-26     	; 0x2760 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    277a:	b8 01       	movw	r22, r16
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__floatunsisf>
    2784:	a7 01       	movw	r20, r14
    2786:	96 01       	movw	r18, r12
    2788:	0e 94 43 23 	call	0x4686	; 0x4686 <__divsf3>
    278c:	03 c0       	rjmp	.+6      	; 0x2794 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	1f 91       	pop	r17
    279a:	0f 91       	pop	r16
    279c:	ff 90       	pop	r15
    279e:	ef 90       	pop	r14
    27a0:	df 90       	pop	r13
    27a2:	cf 90       	pop	r12
    27a4:	08 95       	ret

Disassembly of section .text.str2flaot:

00003634 <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    3634:	cf 92       	push	r12
    3636:	df 92       	push	r13
    3638:	ef 92       	push	r14
    363a:	ff 92       	push	r15
    363c:	0f 93       	push	r16
    363e:	1f 93       	push	r17
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    3646:	bc 01       	movw	r22, r24
    3648:	80 e8       	ldi	r24, 0x80	; 128
    364a:	0e 94 4b 23 	call	0x4696	; 0x4696 <atoi>
    364e:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    3650:	c8 01       	movw	r24, r16
    3652:	0e 94 79 13 	call	0x26f2	; 0x26f2 <get_decimal>
    3656:	6b 01       	movw	r12, r22
    3658:	7c 01       	movw	r14, r24
	return intVal+deci;
    365a:	be 01       	movw	r22, r28
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__floatunsisf>
    3664:	9b 01       	movw	r18, r22
    3666:	ac 01       	movw	r20, r24
    3668:	c7 01       	movw	r24, r14
    366a:	b6 01       	movw	r22, r12
    366c:	0e 94 aa 22 	call	0x4554	; 0x4554 <__addsf3>
	
	
}
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	df 90       	pop	r13
    367e:	cf 90       	pop	r12
    3680:	08 95       	ret

Disassembly of section .text.is_float:

000032fc <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    32fc:	ef 92       	push	r14
    32fe:	ff 92       	push	r15
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
    3308:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    330a:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    330c:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    330e:	0d c0       	rjmp	.+26     	; 0x332a <is_float+0x2e>
	{
		if(str[i]=='.'){
    3310:	ce 0d       	add	r28, r14
    3312:	df 1d       	adc	r29, r15
    3314:	88 81       	ld	r24, Y
    3316:	8e 32       	cpi	r24, 0x2E	; 46
    3318:	21 f4       	brne	.+8      	; 0x3322 <is_float+0x26>
			if (got_dot)
    331a:	01 11       	cpse	r16, r1
    331c:	11 c0       	rjmp	.+34     	; 0x3340 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    331e:	01 e0       	ldi	r16, 0x01	; 1
    3320:	03 c0       	rjmp	.+6      	; 0x3328 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    3322:	80 53       	subi	r24, 0x30	; 48
    3324:	8a 30       	cpi	r24, 0x0A	; 10
    3326:	70 f4       	brcc	.+28     	; 0x3344 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    3328:	1f 5f       	subi	r17, 0xFF	; 255
    332a:	c1 2f       	mov	r28, r17
    332c:	d0 e0       	ldi	r29, 0x00	; 0
    332e:	b7 01       	movw	r22, r14
    3330:	80 e8       	ldi	r24, 0x80	; 128
    3332:	0e 94 5d 20 	call	0x40ba	; 0x40ba <strlen>
    3336:	c8 17       	cp	r28, r24
    3338:	d9 07       	cpc	r29, r25
    333a:	50 f3       	brcs	.-44     	; 0x3310 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	03 c0       	rjmp	.+6      	; 0x3346 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	01 c0       	rjmp	.+2      	; 0x3346 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    3344:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	1f 91       	pop	r17
    334c:	0f 91       	pop	r16
    334e:	ff 90       	pop	r15
    3350:	ef 90       	pop	r14
    3352:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004552 <__subsf3>:
    4552:	50 58       	subi	r21, 0x80	; 128

00004554 <__addsf3>:
    4554:	bb 27       	eor	r27, r27
    4556:	aa 27       	eor	r26, r26
    4558:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__addsf3x>
    455c:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000023f4 <__addsf3x>:
    23f4:	11 c0       	rjmp	.+34     	; 0x2418 <__addsf3x+0x24>
    23f6:	0e 94 b0 22 	call	0x4560	; 0x4560 <__fp_pscA>
    23fa:	38 f0       	brcs	.+14     	; 0x240a <__addsf3x+0x16>
    23fc:	0e 94 b7 22 	call	0x456e	; 0x456e <__fp_pscB>
    2400:	20 f0       	brcs	.+8      	; 0x240a <__addsf3x+0x16>
    2402:	39 f4       	brne	.+14     	; 0x2412 <__addsf3x+0x1e>
    2404:	9f 3f       	cpi	r25, 0xFF	; 255
    2406:	19 f4       	brne	.+6      	; 0x240e <__addsf3x+0x1a>
    2408:	26 f4       	brtc	.+8      	; 0x2412 <__addsf3x+0x1e>
    240a:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__fp_nan>
    240e:	0e f4       	brtc	.+2      	; 0x2412 <__addsf3x+0x1e>
    2410:	e0 95       	com	r30
    2412:	e7 fb       	bst	r30, 7
    2414:	0c 94 04 23 	jmp	0x4608	; 0x4608 <__fp_inf>
    2418:	e9 2f       	mov	r30, r25
    241a:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__fp_split3>
    241e:	58 f3       	brcs	.-42     	; 0x23f6 <__addsf3x+0x2>
    2420:	ba 17       	cp	r27, r26
    2422:	62 07       	cpc	r22, r18
    2424:	73 07       	cpc	r23, r19
    2426:	84 07       	cpc	r24, r20
    2428:	95 07       	cpc	r25, r21
    242a:	20 f0       	brcs	.+8      	; 0x2434 <__addsf3x+0x40>
    242c:	79 f4       	brne	.+30     	; 0x244c <__addsf3x+0x58>
    242e:	a6 f5       	brtc	.+104    	; 0x2498 <__addsf3x+0xa4>
    2430:	0c 94 be 22 	jmp	0x457c	; 0x457c <__fp_zero>
    2434:	0e f4       	brtc	.+2      	; 0x2438 <__addsf3x+0x44>
    2436:	e0 95       	com	r30
    2438:	0b 2e       	mov	r0, r27
    243a:	ba 2f       	mov	r27, r26
    243c:	a0 2d       	mov	r26, r0
    243e:	0b 01       	movw	r0, r22
    2440:	b9 01       	movw	r22, r18
    2442:	90 01       	movw	r18, r0
    2444:	0c 01       	movw	r0, r24
    2446:	ca 01       	movw	r24, r20
    2448:	a0 01       	movw	r20, r0
    244a:	11 24       	eor	r1, r1
    244c:	ff 27       	eor	r31, r31
    244e:	59 1b       	sub	r21, r25
    2450:	99 f0       	breq	.+38     	; 0x2478 <__addsf3x+0x84>
    2452:	59 3f       	cpi	r21, 0xF9	; 249
    2454:	50 f4       	brcc	.+20     	; 0x246a <__addsf3x+0x76>
    2456:	50 3e       	cpi	r21, 0xE0	; 224
    2458:	68 f1       	brcs	.+90     	; 0x24b4 <__addsf3x+0xc0>
    245a:	1a 16       	cp	r1, r26
    245c:	f0 40       	sbci	r31, 0x00	; 0
    245e:	a2 2f       	mov	r26, r18
    2460:	23 2f       	mov	r18, r19
    2462:	34 2f       	mov	r19, r20
    2464:	44 27       	eor	r20, r20
    2466:	58 5f       	subi	r21, 0xF8	; 248
    2468:	f3 cf       	rjmp	.-26     	; 0x2450 <__addsf3x+0x5c>
    246a:	46 95       	lsr	r20
    246c:	37 95       	ror	r19
    246e:	27 95       	ror	r18
    2470:	a7 95       	ror	r26
    2472:	f0 40       	sbci	r31, 0x00	; 0
    2474:	53 95       	inc	r21
    2476:	c9 f7       	brne	.-14     	; 0x246a <__addsf3x+0x76>
    2478:	7e f4       	brtc	.+30     	; 0x2498 <__addsf3x+0xa4>
    247a:	1f 16       	cp	r1, r31
    247c:	ba 0b       	sbc	r27, r26
    247e:	62 0b       	sbc	r22, r18
    2480:	73 0b       	sbc	r23, r19
    2482:	84 0b       	sbc	r24, r20
    2484:	ba f0       	brmi	.+46     	; 0x24b4 <__addsf3x+0xc0>
    2486:	91 50       	subi	r25, 0x01	; 1
    2488:	a1 f0       	breq	.+40     	; 0x24b2 <__addsf3x+0xbe>
    248a:	ff 0f       	add	r31, r31
    248c:	bb 1f       	adc	r27, r27
    248e:	66 1f       	adc	r22, r22
    2490:	77 1f       	adc	r23, r23
    2492:	88 1f       	adc	r24, r24
    2494:	c2 f7       	brpl	.-16     	; 0x2486 <__addsf3x+0x92>
    2496:	0e c0       	rjmp	.+28     	; 0x24b4 <__addsf3x+0xc0>
    2498:	ba 0f       	add	r27, r26
    249a:	62 1f       	adc	r22, r18
    249c:	73 1f       	adc	r23, r19
    249e:	84 1f       	adc	r24, r20
    24a0:	48 f4       	brcc	.+18     	; 0x24b4 <__addsf3x+0xc0>
    24a2:	87 95       	ror	r24
    24a4:	77 95       	ror	r23
    24a6:	67 95       	ror	r22
    24a8:	b7 95       	ror	r27
    24aa:	f7 95       	ror	r31
    24ac:	9e 3f       	cpi	r25, 0xFE	; 254
    24ae:	08 f0       	brcs	.+2      	; 0x24b2 <__addsf3x+0xbe>
    24b0:	b0 cf       	rjmp	.-160    	; 0x2412 <__addsf3x+0x1e>
    24b2:	93 95       	inc	r25
    24b4:	88 0f       	add	r24, r24
    24b6:	08 f0       	brcs	.+2      	; 0x24ba <__addsf3x+0xc6>
    24b8:	99 27       	eor	r25, r25
    24ba:	ee 0f       	add	r30, r30
    24bc:	97 95       	ror	r25
    24be:	87 95       	ror	r24
    24c0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000464a <__cmpsf2>:
    464a:	0e 94 93 1c 	call	0x3926	; 0x3926 <__fp_cmp>
    464e:	08 f4       	brcc	.+2      	; 0x4652 <__cmpsf2+0x8>
    4650:	81 e0       	ldi	r24, 0x01	; 1
    4652:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004686 <__divsf3>:
    4686:	0e 94 21 11 	call	0x2242	; 0x2242 <__divsf3x>
    468a:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002242 <__divsf3x>:
    2242:	10 c0       	rjmp	.+32     	; 0x2264 <__divsf3x+0x22>
    2244:	0e 94 b7 22 	call	0x456e	; 0x456e <__fp_pscB>
    2248:	58 f0       	brcs	.+22     	; 0x2260 <__divsf3x+0x1e>
    224a:	0e 94 b0 22 	call	0x4560	; 0x4560 <__fp_pscA>
    224e:	40 f0       	brcs	.+16     	; 0x2260 <__divsf3x+0x1e>
    2250:	29 f4       	brne	.+10     	; 0x225c <__divsf3x+0x1a>
    2252:	5f 3f       	cpi	r21, 0xFF	; 255
    2254:	29 f0       	breq	.+10     	; 0x2260 <__divsf3x+0x1e>
    2256:	0c 94 04 23 	jmp	0x4608	; 0x4608 <__fp_inf>
    225a:	51 11       	cpse	r21, r1
    225c:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__fp_szero>
    2260:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__fp_nan>
    2264:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__fp_split3>
    2268:	68 f3       	brcs	.-38     	; 0x2244 <__divsf3x+0x2>

0000226a <__divsf3_pse>:
    226a:	99 23       	and	r25, r25
    226c:	b1 f3       	breq	.-20     	; 0x225a <__divsf3x+0x18>
    226e:	55 23       	and	r21, r21
    2270:	91 f3       	breq	.-28     	; 0x2256 <__divsf3x+0x14>
    2272:	95 1b       	sub	r25, r21
    2274:	55 0b       	sbc	r21, r21
    2276:	bb 27       	eor	r27, r27
    2278:	aa 27       	eor	r26, r26
    227a:	62 17       	cp	r22, r18
    227c:	73 07       	cpc	r23, r19
    227e:	84 07       	cpc	r24, r20
    2280:	38 f0       	brcs	.+14     	; 0x2290 <__divsf3_pse+0x26>
    2282:	9f 5f       	subi	r25, 0xFF	; 255
    2284:	5f 4f       	sbci	r21, 0xFF	; 255
    2286:	22 0f       	add	r18, r18
    2288:	33 1f       	adc	r19, r19
    228a:	44 1f       	adc	r20, r20
    228c:	aa 1f       	adc	r26, r26
    228e:	a9 f3       	breq	.-22     	; 0x227a <__divsf3_pse+0x10>
    2290:	35 d0       	rcall	.+106    	; 0x22fc <__divsf3_pse+0x92>
    2292:	0e 2e       	mov	r0, r30
    2294:	3a f0       	brmi	.+14     	; 0x22a4 <__divsf3_pse+0x3a>
    2296:	e0 e8       	ldi	r30, 0x80	; 128
    2298:	32 d0       	rcall	.+100    	; 0x22fe <__divsf3_pse+0x94>
    229a:	91 50       	subi	r25, 0x01	; 1
    229c:	50 40       	sbci	r21, 0x00	; 0
    229e:	e6 95       	lsr	r30
    22a0:	00 1c       	adc	r0, r0
    22a2:	ca f7       	brpl	.-14     	; 0x2296 <__divsf3_pse+0x2c>
    22a4:	2b d0       	rcall	.+86     	; 0x22fc <__divsf3_pse+0x92>
    22a6:	fe 2f       	mov	r31, r30
    22a8:	29 d0       	rcall	.+82     	; 0x22fc <__divsf3_pse+0x92>
    22aa:	66 0f       	add	r22, r22
    22ac:	77 1f       	adc	r23, r23
    22ae:	88 1f       	adc	r24, r24
    22b0:	bb 1f       	adc	r27, r27
    22b2:	26 17       	cp	r18, r22
    22b4:	37 07       	cpc	r19, r23
    22b6:	48 07       	cpc	r20, r24
    22b8:	ab 07       	cpc	r26, r27
    22ba:	b0 e8       	ldi	r27, 0x80	; 128
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <__divsf3_pse+0x56>
    22be:	bb 0b       	sbc	r27, r27
    22c0:	80 2d       	mov	r24, r0
    22c2:	bf 01       	movw	r22, r30
    22c4:	ff 27       	eor	r31, r31
    22c6:	93 58       	subi	r25, 0x83	; 131
    22c8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ca:	3a f0       	brmi	.+14     	; 0x22da <__divsf3_pse+0x70>
    22cc:	9e 3f       	cpi	r25, 0xFE	; 254
    22ce:	51 05       	cpc	r21, r1
    22d0:	78 f0       	brcs	.+30     	; 0x22f0 <__divsf3_pse+0x86>
    22d2:	0c 94 04 23 	jmp	0x4608	; 0x4608 <__fp_inf>
    22d6:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__fp_szero>
    22da:	5f 3f       	cpi	r21, 0xFF	; 255
    22dc:	e4 f3       	brlt	.-8      	; 0x22d6 <__divsf3_pse+0x6c>
    22de:	98 3e       	cpi	r25, 0xE8	; 232
    22e0:	d4 f3       	brlt	.-12     	; 0x22d6 <__divsf3_pse+0x6c>
    22e2:	86 95       	lsr	r24
    22e4:	77 95       	ror	r23
    22e6:	67 95       	ror	r22
    22e8:	b7 95       	ror	r27
    22ea:	f7 95       	ror	r31
    22ec:	9f 5f       	subi	r25, 0xFF	; 255
    22ee:	c9 f7       	brne	.-14     	; 0x22e2 <__divsf3_pse+0x78>
    22f0:	88 0f       	add	r24, r24
    22f2:	91 1d       	adc	r25, r1
    22f4:	96 95       	lsr	r25
    22f6:	87 95       	ror	r24
    22f8:	97 f9       	bld	r25, 7
    22fa:	08 95       	ret
    22fc:	e1 e0       	ldi	r30, 0x01	; 1
    22fe:	66 0f       	add	r22, r22
    2300:	77 1f       	adc	r23, r23
    2302:	88 1f       	adc	r24, r24
    2304:	bb 1f       	adc	r27, r27
    2306:	62 17       	cp	r22, r18
    2308:	73 07       	cpc	r23, r19
    230a:	84 07       	cpc	r24, r20
    230c:	ba 07       	cpc	r27, r26
    230e:	20 f0       	brcs	.+8      	; 0x2318 <__divsf3_pse+0xae>
    2310:	62 1b       	sub	r22, r18
    2312:	73 0b       	sbc	r23, r19
    2314:	84 0b       	sbc	r24, r20
    2316:	ba 0b       	sbc	r27, r26
    2318:	ee 1f       	adc	r30, r30
    231a:	88 f7       	brcc	.-30     	; 0x22fe <__divsf3_pse+0x94>
    231c:	e0 95       	com	r30
    231e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003244 <__fixunssfsi>:
    3244:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <__fp_splitA>
    3248:	88 f0       	brcs	.+34     	; 0x326c <__fixunssfsi+0x28>
    324a:	9f 57       	subi	r25, 0x7F	; 127
    324c:	98 f0       	brcs	.+38     	; 0x3274 <__fixunssfsi+0x30>
    324e:	b9 2f       	mov	r27, r25
    3250:	99 27       	eor	r25, r25
    3252:	b7 51       	subi	r27, 0x17	; 23
    3254:	b0 f0       	brcs	.+44     	; 0x3282 <__fixunssfsi+0x3e>
    3256:	e1 f0       	breq	.+56     	; 0x3290 <__fixunssfsi+0x4c>
    3258:	66 0f       	add	r22, r22
    325a:	77 1f       	adc	r23, r23
    325c:	88 1f       	adc	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	1a f0       	brmi	.+6      	; 0x3268 <__fixunssfsi+0x24>
    3262:	ba 95       	dec	r27
    3264:	c9 f7       	brne	.-14     	; 0x3258 <__fixunssfsi+0x14>
    3266:	14 c0       	rjmp	.+40     	; 0x3290 <__fixunssfsi+0x4c>
    3268:	b1 30       	cpi	r27, 0x01	; 1
    326a:	91 f0       	breq	.+36     	; 0x3290 <__fixunssfsi+0x4c>
    326c:	0e 94 be 22 	call	0x457c	; 0x457c <__fp_zero>
    3270:	b1 e0       	ldi	r27, 0x01	; 1
    3272:	08 95       	ret
    3274:	0c 94 be 22 	jmp	0x457c	; 0x457c <__fp_zero>
    3278:	67 2f       	mov	r22, r23
    327a:	78 2f       	mov	r23, r24
    327c:	88 27       	eor	r24, r24
    327e:	b8 5f       	subi	r27, 0xF8	; 248
    3280:	39 f0       	breq	.+14     	; 0x3290 <__fixunssfsi+0x4c>
    3282:	b9 3f       	cpi	r27, 0xF9	; 249
    3284:	cc f3       	brlt	.-14     	; 0x3278 <__fixunssfsi+0x34>
    3286:	86 95       	lsr	r24
    3288:	77 95       	ror	r23
    328a:	67 95       	ror	r22
    328c:	b3 95       	inc	r27
    328e:	d9 f7       	brne	.-10     	; 0x3286 <__fixunssfsi+0x42>
    3290:	3e f4       	brtc	.+14     	; 0x32a0 <__fixunssfsi+0x5c>
    3292:	90 95       	com	r25
    3294:	80 95       	com	r24
    3296:	70 95       	com	r23
    3298:	61 95       	neg	r22
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	8f 4f       	sbci	r24, 0xFF	; 255
    329e:	9f 4f       	sbci	r25, 0xFF	; 255
    32a0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002b98 <__floatunsisf>:
    2b98:	e8 94       	clt
    2b9a:	09 c0       	rjmp	.+18     	; 0x2bae <__floatsisf+0x12>

00002b9c <__floatsisf>:
    2b9c:	97 fb       	bst	r25, 7
    2b9e:	3e f4       	brtc	.+14     	; 0x2bae <__floatsisf+0x12>
    2ba0:	90 95       	com	r25
    2ba2:	80 95       	com	r24
    2ba4:	70 95       	com	r23
    2ba6:	61 95       	neg	r22
    2ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    2baa:	8f 4f       	sbci	r24, 0xFF	; 255
    2bac:	9f 4f       	sbci	r25, 0xFF	; 255
    2bae:	99 23       	and	r25, r25
    2bb0:	a9 f0       	breq	.+42     	; 0x2bdc <__floatsisf+0x40>
    2bb2:	f9 2f       	mov	r31, r25
    2bb4:	96 e9       	ldi	r25, 0x96	; 150
    2bb6:	bb 27       	eor	r27, r27
    2bb8:	93 95       	inc	r25
    2bba:	f6 95       	lsr	r31
    2bbc:	87 95       	ror	r24
    2bbe:	77 95       	ror	r23
    2bc0:	67 95       	ror	r22
    2bc2:	b7 95       	ror	r27
    2bc4:	f1 11       	cpse	r31, r1
    2bc6:	f8 cf       	rjmp	.-16     	; 0x2bb8 <__floatsisf+0x1c>
    2bc8:	fa f4       	brpl	.+62     	; 0x2c08 <__floatsisf+0x6c>
    2bca:	bb 0f       	add	r27, r27
    2bcc:	11 f4       	brne	.+4      	; 0x2bd2 <__floatsisf+0x36>
    2bce:	60 ff       	sbrs	r22, 0
    2bd0:	1b c0       	rjmp	.+54     	; 0x2c08 <__floatsisf+0x6c>
    2bd2:	6f 5f       	subi	r22, 0xFF	; 255
    2bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bda:	16 c0       	rjmp	.+44     	; 0x2c08 <__floatsisf+0x6c>
    2bdc:	88 23       	and	r24, r24
    2bde:	11 f0       	breq	.+4      	; 0x2be4 <__floatsisf+0x48>
    2be0:	96 e9       	ldi	r25, 0x96	; 150
    2be2:	11 c0       	rjmp	.+34     	; 0x2c06 <__floatsisf+0x6a>
    2be4:	77 23       	and	r23, r23
    2be6:	21 f0       	breq	.+8      	; 0x2bf0 <__floatsisf+0x54>
    2be8:	9e e8       	ldi	r25, 0x8E	; 142
    2bea:	87 2f       	mov	r24, r23
    2bec:	76 2f       	mov	r23, r22
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <__floatsisf+0x5e>
    2bf0:	66 23       	and	r22, r22
    2bf2:	71 f0       	breq	.+28     	; 0x2c10 <__floatsisf+0x74>
    2bf4:	96 e8       	ldi	r25, 0x86	; 134
    2bf6:	86 2f       	mov	r24, r22
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	2a f0       	brmi	.+10     	; 0x2c08 <__floatsisf+0x6c>
    2bfe:	9a 95       	dec	r25
    2c00:	66 0f       	add	r22, r22
    2c02:	77 1f       	adc	r23, r23
    2c04:	88 1f       	adc	r24, r24
    2c06:	da f7       	brpl	.-10     	; 0x2bfe <__floatsisf+0x62>
    2c08:	88 0f       	add	r24, r24
    2c0a:	96 95       	lsr	r25
    2c0c:	87 95       	ror	r24
    2c0e:	97 f9       	bld	r25, 7
    2c10:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003926 <__fp_cmp>:
    3926:	99 0f       	add	r25, r25
    3928:	00 08       	sbc	r0, r0
    392a:	55 0f       	add	r21, r21
    392c:	aa 0b       	sbc	r26, r26
    392e:	e0 e8       	ldi	r30, 0x80	; 128
    3930:	fe ef       	ldi	r31, 0xFE	; 254
    3932:	16 16       	cp	r1, r22
    3934:	17 06       	cpc	r1, r23
    3936:	e8 07       	cpc	r30, r24
    3938:	f9 07       	cpc	r31, r25
    393a:	c0 f0       	brcs	.+48     	; 0x396c <__fp_cmp+0x46>
    393c:	12 16       	cp	r1, r18
    393e:	13 06       	cpc	r1, r19
    3940:	e4 07       	cpc	r30, r20
    3942:	f5 07       	cpc	r31, r21
    3944:	98 f0       	brcs	.+38     	; 0x396c <__fp_cmp+0x46>
    3946:	62 1b       	sub	r22, r18
    3948:	73 0b       	sbc	r23, r19
    394a:	84 0b       	sbc	r24, r20
    394c:	95 0b       	sbc	r25, r21
    394e:	39 f4       	brne	.+14     	; 0x395e <__fp_cmp+0x38>
    3950:	0a 26       	eor	r0, r26
    3952:	61 f0       	breq	.+24     	; 0x396c <__fp_cmp+0x46>
    3954:	23 2b       	or	r18, r19
    3956:	24 2b       	or	r18, r20
    3958:	25 2b       	or	r18, r21
    395a:	21 f4       	brne	.+8      	; 0x3964 <__fp_cmp+0x3e>
    395c:	08 95       	ret
    395e:	0a 26       	eor	r0, r26
    3960:	09 f4       	brne	.+2      	; 0x3964 <__fp_cmp+0x3e>
    3962:	a1 40       	sbci	r26, 0x01	; 1
    3964:	a6 95       	lsr	r26
    3966:	8f ef       	ldi	r24, 0xFF	; 255
    3968:	81 1d       	adc	r24, r1
    396a:	81 1d       	adc	r24, r1
    396c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004608 <__fp_inf>:
    4608:	97 f9       	bld	r25, 7
    460a:	9f 67       	ori	r25, 0x7F	; 127
    460c:	80 e8       	ldi	r24, 0x80	; 128
    460e:	70 e0       	ldi	r23, 0x00	; 0
    4610:	60 e0       	ldi	r22, 0x00	; 0
    4612:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000046b6 <__fp_nan>:
    46b6:	9f ef       	ldi	r25, 0xFF	; 255
    46b8:	80 ec       	ldi	r24, 0xC0	; 192
    46ba:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004560 <__fp_pscA>:
    4560:	00 24       	eor	r0, r0
    4562:	0a 94       	dec	r0
    4564:	16 16       	cp	r1, r22
    4566:	17 06       	cpc	r1, r23
    4568:	18 06       	cpc	r1, r24
    456a:	09 06       	cpc	r0, r25
    456c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000456e <__fp_pscB>:
    456e:	00 24       	eor	r0, r0
    4570:	0a 94       	dec	r0
    4572:	12 16       	cp	r1, r18
    4574:	13 06       	cpc	r1, r19
    4576:	14 06       	cpc	r1, r20
    4578:	05 06       	cpc	r0, r21
    457a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000041cc <__fp_round>:
    41cc:	09 2e       	mov	r0, r25
    41ce:	03 94       	inc	r0
    41d0:	00 0c       	add	r0, r0
    41d2:	11 f4       	brne	.+4      	; 0x41d8 <__fp_round+0xc>
    41d4:	88 23       	and	r24, r24
    41d6:	52 f0       	brmi	.+20     	; 0x41ec <__fp_round+0x20>
    41d8:	bb 0f       	add	r27, r27
    41da:	40 f4       	brcc	.+16     	; 0x41ec <__fp_round+0x20>
    41dc:	bf 2b       	or	r27, r31
    41de:	11 f4       	brne	.+4      	; 0x41e4 <__fp_round+0x18>
    41e0:	60 ff       	sbrs	r22, 0
    41e2:	04 c0       	rjmp	.+8      	; 0x41ec <__fp_round+0x20>
    41e4:	6f 5f       	subi	r22, 0xFF	; 255
    41e6:	7f 4f       	sbci	r23, 0xFF	; 255
    41e8:	8f 4f       	sbci	r24, 0xFF	; 255
    41ea:	9f 4f       	sbci	r25, 0xFF	; 255
    41ec:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003a40 <__fp_split3>:
    3a40:	57 fd       	sbrc	r21, 7
    3a42:	90 58       	subi	r25, 0x80	; 128
    3a44:	44 0f       	add	r20, r20
    3a46:	55 1f       	adc	r21, r21
    3a48:	59 f0       	breq	.+22     	; 0x3a60 <__fp_splitA+0x10>
    3a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    3a4c:	71 f0       	breq	.+28     	; 0x3a6a <__fp_splitA+0x1a>
    3a4e:	47 95       	ror	r20

00003a50 <__fp_splitA>:
    3a50:	88 0f       	add	r24, r24
    3a52:	97 fb       	bst	r25, 7
    3a54:	99 1f       	adc	r25, r25
    3a56:	61 f0       	breq	.+24     	; 0x3a70 <__fp_splitA+0x20>
    3a58:	9f 3f       	cpi	r25, 0xFF	; 255
    3a5a:	79 f0       	breq	.+30     	; 0x3a7a <__fp_splitA+0x2a>
    3a5c:	87 95       	ror	r24
    3a5e:	08 95       	ret
    3a60:	12 16       	cp	r1, r18
    3a62:	13 06       	cpc	r1, r19
    3a64:	14 06       	cpc	r1, r20
    3a66:	55 1f       	adc	r21, r21
    3a68:	f2 cf       	rjmp	.-28     	; 0x3a4e <__fp_split3+0xe>
    3a6a:	46 95       	lsr	r20
    3a6c:	f1 df       	rcall	.-30     	; 0x3a50 <__fp_splitA>
    3a6e:	08 c0       	rjmp	.+16     	; 0x3a80 <__fp_splitA+0x30>
    3a70:	16 16       	cp	r1, r22
    3a72:	17 06       	cpc	r1, r23
    3a74:	18 06       	cpc	r1, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	f1 cf       	rjmp	.-30     	; 0x3a5c <__fp_splitA+0xc>
    3a7a:	86 95       	lsr	r24
    3a7c:	71 05       	cpc	r23, r1
    3a7e:	61 05       	cpc	r22, r1
    3a80:	08 94       	sec
    3a82:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000457c <__fp_zero>:
    457c:	e8 94       	clt

0000457e <__fp_szero>:
    457e:	bb 27       	eor	r27, r27
    4580:	66 27       	eor	r22, r22
    4582:	77 27       	eor	r23, r23
    4584:	cb 01       	movw	r24, r22
    4586:	97 f9       	bld	r25, 7
    4588:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000468e <__mulsf3>:
    468e:	0e 94 90 11 	call	0x2320	; 0x2320 <__mulsf3x>
    4692:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002320 <__mulsf3x>:
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <__mulsf3x+0x20>
    2322:	0e 94 b0 22 	call	0x4560	; 0x4560 <__fp_pscA>
    2326:	38 f0       	brcs	.+14     	; 0x2336 <__mulsf3x+0x16>
    2328:	0e 94 b7 22 	call	0x456e	; 0x456e <__fp_pscB>
    232c:	20 f0       	brcs	.+8      	; 0x2336 <__mulsf3x+0x16>
    232e:	95 23       	and	r25, r21
    2330:	11 f0       	breq	.+4      	; 0x2336 <__mulsf3x+0x16>
    2332:	0c 94 04 23 	jmp	0x4608	; 0x4608 <__fp_inf>
    2336:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__fp_nan>
    233a:	11 24       	eor	r1, r1
    233c:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__fp_szero>
    2340:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__fp_split3>
    2344:	70 f3       	brcs	.-36     	; 0x2322 <__mulsf3x+0x2>

00002346 <__mulsf3_pse>:
    2346:	95 9f       	mul	r25, r21
    2348:	c1 f3       	breq	.-16     	; 0x233a <__mulsf3x+0x1a>
    234a:	95 0f       	add	r25, r21
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	55 1f       	adc	r21, r21
    2350:	62 9f       	mul	r22, r18
    2352:	f0 01       	movw	r30, r0
    2354:	72 9f       	mul	r23, r18
    2356:	bb 27       	eor	r27, r27
    2358:	f0 0d       	add	r31, r0
    235a:	b1 1d       	adc	r27, r1
    235c:	63 9f       	mul	r22, r19
    235e:	aa 27       	eor	r26, r26
    2360:	f0 0d       	add	r31, r0
    2362:	b1 1d       	adc	r27, r1
    2364:	aa 1f       	adc	r26, r26
    2366:	64 9f       	mul	r22, r20
    2368:	66 27       	eor	r22, r22
    236a:	b0 0d       	add	r27, r0
    236c:	a1 1d       	adc	r26, r1
    236e:	66 1f       	adc	r22, r22
    2370:	82 9f       	mul	r24, r18
    2372:	22 27       	eor	r18, r18
    2374:	b0 0d       	add	r27, r0
    2376:	a1 1d       	adc	r26, r1
    2378:	62 1f       	adc	r22, r18
    237a:	73 9f       	mul	r23, r19
    237c:	b0 0d       	add	r27, r0
    237e:	a1 1d       	adc	r26, r1
    2380:	62 1f       	adc	r22, r18
    2382:	83 9f       	mul	r24, r19
    2384:	a0 0d       	add	r26, r0
    2386:	61 1d       	adc	r22, r1
    2388:	22 1f       	adc	r18, r18
    238a:	74 9f       	mul	r23, r20
    238c:	33 27       	eor	r19, r19
    238e:	a0 0d       	add	r26, r0
    2390:	61 1d       	adc	r22, r1
    2392:	23 1f       	adc	r18, r19
    2394:	84 9f       	mul	r24, r20
    2396:	60 0d       	add	r22, r0
    2398:	21 1d       	adc	r18, r1
    239a:	82 2f       	mov	r24, r18
    239c:	76 2f       	mov	r23, r22
    239e:	6a 2f       	mov	r22, r26
    23a0:	11 24       	eor	r1, r1
    23a2:	9f 57       	subi	r25, 0x7F	; 127
    23a4:	50 40       	sbci	r21, 0x00	; 0
    23a6:	9a f0       	brmi	.+38     	; 0x23ce <__mulsf3_pse+0x88>
    23a8:	f1 f0       	breq	.+60     	; 0x23e6 <__mulsf3_pse+0xa0>
    23aa:	88 23       	and	r24, r24
    23ac:	4a f0       	brmi	.+18     	; 0x23c0 <__mulsf3_pse+0x7a>
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	bb 1f       	adc	r27, r27
    23b4:	66 1f       	adc	r22, r22
    23b6:	77 1f       	adc	r23, r23
    23b8:	88 1f       	adc	r24, r24
    23ba:	91 50       	subi	r25, 0x01	; 1
    23bc:	50 40       	sbci	r21, 0x00	; 0
    23be:	a9 f7       	brne	.-22     	; 0x23aa <__mulsf3_pse+0x64>
    23c0:	9e 3f       	cpi	r25, 0xFE	; 254
    23c2:	51 05       	cpc	r21, r1
    23c4:	80 f0       	brcs	.+32     	; 0x23e6 <__mulsf3_pse+0xa0>
    23c6:	0c 94 04 23 	jmp	0x4608	; 0x4608 <__fp_inf>
    23ca:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__fp_szero>
    23ce:	5f 3f       	cpi	r21, 0xFF	; 255
    23d0:	e4 f3       	brlt	.-8      	; 0x23ca <__mulsf3_pse+0x84>
    23d2:	98 3e       	cpi	r25, 0xE8	; 232
    23d4:	d4 f3       	brlt	.-12     	; 0x23ca <__mulsf3_pse+0x84>
    23d6:	86 95       	lsr	r24
    23d8:	77 95       	ror	r23
    23da:	67 95       	ror	r22
    23dc:	b7 95       	ror	r27
    23de:	f7 95       	ror	r31
    23e0:	e7 95       	ror	r30
    23e2:	9f 5f       	subi	r25, 0xFF	; 255
    23e4:	c1 f7       	brne	.-16     	; 0x23d6 <__mulsf3_pse+0x90>
    23e6:	fe 2b       	or	r31, r30
    23e8:	88 0f       	add	r24, r24
    23ea:	91 1d       	adc	r25, r1
    23ec:	96 95       	lsr	r25
    23ee:	87 95       	ror	r24
    23f0:	97 f9       	bld	r25, 7
    23f2:	08 95       	ret

Disassembly of section .text.avrlibc:

0000062c <vfprintf>:
 62c:	a4 e1       	ldi	r26, 0x14	; 20
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	ec e1       	ldi	r30, 0x1C	; 28
 632:	f3 e0       	ldi	r31, 0x03	; 3
 634:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__prologue_saves__>
 638:	6c 01       	movw	r12, r24
 63a:	1a 01       	movw	r2, r20
 63c:	46 2e       	mov	r4, r22
 63e:	59 01       	movw	r10, r18
 640:	fc 01       	movw	r30, r24
 642:	10 86       	std	Z+8, r1	; 0x08
 644:	17 82       	std	Z+7, r1	; 0x07
 646:	84 81       	ldd	r24, Z+4	; 0x04
 648:	81 ff       	sbrs	r24, 1
 64a:	62 c3       	rjmp	.+1732   	; 0xd10 <__EEPROM_REGION_LENGTH__+0x510>
 64c:	ce 01       	movw	r24, r28
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	9d 87       	std	Y+13, r25	; 0x0d
 652:	8c 87       	std	Y+12, r24	; 0x0c
 654:	a0 e8       	ldi	r26, 0x80	; 128
 656:	8a 8b       	std	Y+18, r24	; 0x12
 658:	9b 8b       	std	Y+19, r25	; 0x13
 65a:	ac 8b       	std	Y+20, r26	; 0x14
 65c:	f1 01       	movw	r30, r2
 65e:	84 91       	lpm	r24, Z
 660:	47 fc       	sbrc	r4, 7
 662:	80 81       	ld	r24, Z
 664:	88 23       	and	r24, r24
 666:	09 f4       	brne	.+2      	; 0x66a <vfprintf+0x3e>
 668:	4f c3       	rjmp	.+1694   	; 0xd08 <__EEPROM_REGION_LENGTH__+0x508>
 66a:	44 2d       	mov	r20, r4
 66c:	91 01       	movw	r18, r2
 66e:	2f 5f       	subi	r18, 0xFF	; 255
 670:	3f 4f       	sbci	r19, 0xFF	; 255
 672:	4f 4f       	sbci	r20, 0xFF	; 255
 674:	85 32       	cpi	r24, 0x25	; 37
 676:	19 f0       	breq	.+6      	; 0x67e <vfprintf+0x52>
 678:	19 01       	movw	r2, r18
 67a:	44 2e       	mov	r4, r20
 67c:	0a c0       	rjmp	.+20     	; 0x692 <vfprintf+0x66>
 67e:	f9 01       	movw	r30, r18
 680:	84 91       	lpm	r24, Z
 682:	47 fd       	sbrc	r20, 7
 684:	80 81       	ld	r24, Z
 686:	92 e0       	ldi	r25, 0x02	; 2
 688:	29 0e       	add	r2, r25
 68a:	31 1c       	adc	r3, r1
 68c:	41 1c       	adc	r4, r1
 68e:	85 32       	cpi	r24, 0x25	; 37
 690:	49 f4       	brne	.+18     	; 0x6a4 <vfprintf+0x78>
 692:	b6 01       	movw	r22, r12
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 69a:	bf 86       	std	Y+15, r11	; 0x0f
 69c:	ae 86       	std	Y+14, r10	; 0x0e
 69e:	ae 84       	ldd	r10, Y+14	; 0x0e
 6a0:	bf 84       	ldd	r11, Y+15	; 0x0f
 6a2:	dc cf       	rjmp	.-72     	; 0x65c <vfprintf+0x30>
 6a4:	10 e0       	ldi	r17, 0x00	; 0
 6a6:	f1 2c       	mov	r15, r1
 6a8:	00 e0       	ldi	r16, 0x00	; 0
 6aa:	00 32       	cpi	r16, 0x20	; 32
 6ac:	a0 f4       	brcc	.+40     	; 0x6d6 <vfprintf+0xaa>
 6ae:	8b 32       	cpi	r24, 0x2B	; 43
 6b0:	69 f0       	breq	.+26     	; 0x6cc <vfprintf+0xa0>
 6b2:	30 f4       	brcc	.+12     	; 0x6c0 <vfprintf+0x94>
 6b4:	80 32       	cpi	r24, 0x20	; 32
 6b6:	59 f0       	breq	.+22     	; 0x6ce <vfprintf+0xa2>
 6b8:	83 32       	cpi	r24, 0x23	; 35
 6ba:	69 f4       	brne	.+26     	; 0x6d6 <vfprintf+0xaa>
 6bc:	00 61       	ori	r16, 0x10	; 16
 6be:	2c c0       	rjmp	.+88     	; 0x718 <vfprintf+0xec>
 6c0:	8d 32       	cpi	r24, 0x2D	; 45
 6c2:	39 f0       	breq	.+14     	; 0x6d2 <vfprintf+0xa6>
 6c4:	80 33       	cpi	r24, 0x30	; 48
 6c6:	39 f4       	brne	.+14     	; 0x6d6 <vfprintf+0xaa>
 6c8:	01 60       	ori	r16, 0x01	; 1
 6ca:	26 c0       	rjmp	.+76     	; 0x718 <vfprintf+0xec>
 6cc:	02 60       	ori	r16, 0x02	; 2
 6ce:	04 60       	ori	r16, 0x04	; 4
 6d0:	23 c0       	rjmp	.+70     	; 0x718 <vfprintf+0xec>
 6d2:	08 60       	ori	r16, 0x08	; 8
 6d4:	21 c0       	rjmp	.+66     	; 0x718 <vfprintf+0xec>
 6d6:	07 fd       	sbrc	r16, 7
 6d8:	29 c0       	rjmp	.+82     	; 0x72c <vfprintf+0x100>
 6da:	90 ed       	ldi	r25, 0xD0	; 208
 6dc:	98 0f       	add	r25, r24
 6de:	9a 30       	cpi	r25, 0x0A	; 10
 6e0:	78 f4       	brcc	.+30     	; 0x700 <vfprintf+0xd4>
 6e2:	06 ff       	sbrs	r16, 6
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <vfprintf+0xc6>
 6e6:	aa e0       	ldi	r26, 0x0A	; 10
 6e8:	1a 9f       	mul	r17, r26
 6ea:	90 0d       	add	r25, r0
 6ec:	11 24       	eor	r1, r1
 6ee:	19 2f       	mov	r17, r25
 6f0:	13 c0       	rjmp	.+38     	; 0x718 <vfprintf+0xec>
 6f2:	ea e0       	ldi	r30, 0x0A	; 10
 6f4:	fe 9e       	mul	r15, r30
 6f6:	90 0d       	add	r25, r0
 6f8:	11 24       	eor	r1, r1
 6fa:	f9 2e       	mov	r15, r25
 6fc:	00 62       	ori	r16, 0x20	; 32
 6fe:	0c c0       	rjmp	.+24     	; 0x718 <vfprintf+0xec>
 700:	8e 32       	cpi	r24, 0x2E	; 46
 702:	21 f4       	brne	.+8      	; 0x70c <vfprintf+0xe0>
 704:	06 fd       	sbrc	r16, 6
 706:	00 c3       	rjmp	.+1536   	; 0xd08 <__EEPROM_REGION_LENGTH__+0x508>
 708:	00 64       	ori	r16, 0x40	; 64
 70a:	06 c0       	rjmp	.+12     	; 0x718 <vfprintf+0xec>
 70c:	8c 36       	cpi	r24, 0x6C	; 108
 70e:	11 f4       	brne	.+4      	; 0x714 <vfprintf+0xe8>
 710:	00 68       	ori	r16, 0x80	; 128
 712:	02 c0       	rjmp	.+4      	; 0x718 <vfprintf+0xec>
 714:	88 36       	cpi	r24, 0x68	; 104
 716:	51 f4       	brne	.+20     	; 0x72c <vfprintf+0x100>
 718:	f1 01       	movw	r30, r2
 71a:	84 91       	lpm	r24, Z
 71c:	47 fc       	sbrc	r4, 7
 71e:	80 81       	ld	r24, Z
 720:	ff ef       	ldi	r31, 0xFF	; 255
 722:	2f 1a       	sub	r2, r31
 724:	3f 0a       	sbc	r3, r31
 726:	4f 0a       	sbc	r4, r31
 728:	81 11       	cpse	r24, r1
 72a:	bf cf       	rjmp	.-130    	; 0x6aa <vfprintf+0x7e>
 72c:	9b eb       	ldi	r25, 0xBB	; 187
 72e:	98 0f       	add	r25, r24
 730:	93 30       	cpi	r25, 0x03	; 3
 732:	18 f4       	brcc	.+6      	; 0x73a <vfprintf+0x10e>
 734:	00 61       	ori	r16, 0x10	; 16
 736:	80 5e       	subi	r24, 0xE0	; 224
 738:	06 c0       	rjmp	.+12     	; 0x746 <vfprintf+0x11a>
 73a:	9b e9       	ldi	r25, 0x9B	; 155
 73c:	98 0f       	add	r25, r24
 73e:	93 30       	cpi	r25, 0x03	; 3
 740:	08 f0       	brcs	.+2      	; 0x744 <vfprintf+0x118>
 742:	66 c1       	rjmp	.+716    	; 0xa10 <__EEPROM_REGION_LENGTH__+0x210>
 744:	0f 7e       	andi	r16, 0xEF	; 239
 746:	06 ff       	sbrs	r16, 6
 748:	16 e0       	ldi	r17, 0x06	; 6
 74a:	0f 73       	andi	r16, 0x3F	; 63
 74c:	70 2e       	mov	r7, r16
 74e:	85 36       	cpi	r24, 0x65	; 101
 750:	21 f4       	brne	.+8      	; 0x75a <vfprintf+0x12e>
 752:	20 2f       	mov	r18, r16
 754:	20 64       	ori	r18, 0x40	; 64
 756:	72 2e       	mov	r7, r18
 758:	08 c0       	rjmp	.+16     	; 0x76a <vfprintf+0x13e>
 75a:	86 36       	cpi	r24, 0x66	; 102
 75c:	21 f4       	brne	.+8      	; 0x766 <vfprintf+0x13a>
 75e:	80 2f       	mov	r24, r16
 760:	80 68       	ori	r24, 0x80	; 128
 762:	78 2e       	mov	r7, r24
 764:	02 c0       	rjmp	.+4      	; 0x76a <vfprintf+0x13e>
 766:	11 11       	cpse	r17, r1
 768:	11 50       	subi	r17, 0x01	; 1
 76a:	77 fe       	sbrs	r7, 7
 76c:	07 c0       	rjmp	.+14     	; 0x77c <vfprintf+0x150>
 76e:	1c 33       	cpi	r17, 0x3C	; 60
 770:	50 f4       	brcc	.+20     	; 0x786 <vfprintf+0x15a>
 772:	ee 24       	eor	r14, r14
 774:	e3 94       	inc	r14
 776:	e1 0e       	add	r14, r17
 778:	27 e0       	ldi	r18, 0x07	; 7
 77a:	0b c0       	rjmp	.+22     	; 0x792 <vfprintf+0x166>
 77c:	18 30       	cpi	r17, 0x08	; 8
 77e:	38 f0       	brcs	.+14     	; 0x78e <vfprintf+0x162>
 780:	27 e0       	ldi	r18, 0x07	; 7
 782:	17 e0       	ldi	r17, 0x07	; 7
 784:	05 c0       	rjmp	.+10     	; 0x790 <vfprintf+0x164>
 786:	27 e0       	ldi	r18, 0x07	; 7
 788:	6c e3       	ldi	r22, 0x3C	; 60
 78a:	e6 2e       	mov	r14, r22
 78c:	02 c0       	rjmp	.+4      	; 0x792 <vfprintf+0x166>
 78e:	21 2f       	mov	r18, r17
 790:	e1 2c       	mov	r14, r1
 792:	f5 01       	movw	r30, r10
 794:	34 96       	adiw	r30, 0x04	; 4
 796:	ff 87       	std	Y+15, r31	; 0x0f
 798:	ee 87       	std	Y+14, r30	; 0x0e
 79a:	f5 01       	movw	r30, r10
 79c:	60 81       	ld	r22, Z
 79e:	71 81       	ldd	r23, Z+1	; 0x01
 7a0:	82 81       	ldd	r24, Z+2	; 0x02
 7a2:	93 81       	ldd	r25, Z+3	; 0x03
 7a4:	0e 2d       	mov	r16, r14
 7a6:	ae 01       	movw	r20, r28
 7a8:	4f 5f       	subi	r20, 0xFF	; 255
 7aa:	5f 4f       	sbci	r21, 0xFF	; 255
 7ac:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__ftoa_engine>
 7b0:	5c 01       	movw	r10, r24
 7b2:	59 80       	ldd	r5, Y+1	; 0x01
 7b4:	50 fe       	sbrs	r5, 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <vfprintf+0x190>
 7b8:	53 fe       	sbrs	r5, 3
 7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <vfprintf+0x19c>
 7bc:	71 fc       	sbrc	r7, 1
 7be:	06 c0       	rjmp	.+12     	; 0x7cc <vfprintf+0x1a0>
 7c0:	72 fe       	sbrs	r7, 2
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <vfprintf+0x1a4>
 7c4:	00 e2       	ldi	r16, 0x20	; 32
 7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <vfprintf+0x1a6>
 7c8:	0d e2       	ldi	r16, 0x2D	; 45
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <vfprintf+0x1a6>
 7cc:	0b e2       	ldi	r16, 0x2B	; 43
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <vfprintf+0x1a6>
 7d0:	00 e0       	ldi	r16, 0x00	; 0
 7d2:	85 2d       	mov	r24, r5
 7d4:	8c 70       	andi	r24, 0x0C	; 12
 7d6:	19 f0       	breq	.+6      	; 0x7de <vfprintf+0x1b2>
 7d8:	01 11       	cpse	r16, r1
 7da:	73 c2       	rjmp	.+1254   	; 0xcc2 <__EEPROM_REGION_LENGTH__+0x4c2>
 7dc:	be c2       	rjmp	.+1404   	; 0xd5a <__EEPROM_REGION_LENGTH__+0x55a>
 7de:	77 fe       	sbrs	r7, 7
 7e0:	0f c0       	rjmp	.+30     	; 0x800 <__EEPROM_REGION_LENGTH__>
 7e2:	ea 0c       	add	r14, r10
 7e4:	54 fe       	sbrs	r5, 4
 7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <vfprintf+0x1c4>
 7e8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ea:	81 33       	cpi	r24, 0x31	; 49
 7ec:	09 f4       	brne	.+2      	; 0x7f0 <vfprintf+0x1c4>
 7ee:	ea 94       	dec	r14
 7f0:	1e 14       	cp	r1, r14
 7f2:	74 f5       	brge	.+92     	; 0x850 <__EEPROM_REGION_LENGTH__+0x50>
 7f4:	28 e0       	ldi	r18, 0x08	; 8
 7f6:	2e 15       	cp	r18, r14
 7f8:	78 f5       	brcc	.+94     	; 0x858 <__EEPROM_REGION_LENGTH__+0x58>
 7fa:	38 e0       	ldi	r19, 0x08	; 8
 7fc:	e3 2e       	mov	r14, r19
 7fe:	2c c0       	rjmp	.+88     	; 0x858 <__EEPROM_REGION_LENGTH__+0x58>
 800:	76 fc       	sbrc	r7, 6
 802:	2a c0       	rjmp	.+84     	; 0x858 <__EEPROM_REGION_LENGTH__+0x58>
 804:	81 2f       	mov	r24, r17
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	8a 15       	cp	r24, r10
 80a:	9b 05       	cpc	r25, r11
 80c:	9c f0       	brlt	.+38     	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
 80e:	8c ef       	ldi	r24, 0xFC	; 252
 810:	a8 16       	cp	r10, r24
 812:	8f ef       	ldi	r24, 0xFF	; 255
 814:	b8 06       	cpc	r11, r24
 816:	74 f0       	brlt	.+28     	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
 818:	97 2d       	mov	r25, r7
 81a:	90 68       	ori	r25, 0x80	; 128
 81c:	79 2e       	mov	r7, r25
 81e:	0a c0       	rjmp	.+20     	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
 820:	e2 e0       	ldi	r30, 0x02	; 2
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	ec 0f       	add	r30, r28
 826:	fd 1f       	adc	r31, r29
 828:	e1 0f       	add	r30, r17
 82a:	f1 1d       	adc	r31, r1
 82c:	80 81       	ld	r24, Z
 82e:	80 33       	cpi	r24, 0x30	; 48
 830:	19 f4       	brne	.+6      	; 0x838 <__EEPROM_REGION_LENGTH__+0x38>
 832:	11 50       	subi	r17, 0x01	; 1
 834:	11 11       	cpse	r17, r1
 836:	f4 cf       	rjmp	.-24     	; 0x820 <__EEPROM_REGION_LENGTH__+0x20>
 838:	77 fe       	sbrs	r7, 7
 83a:	0e c0       	rjmp	.+28     	; 0x858 <__EEPROM_REGION_LENGTH__+0x58>
 83c:	ee 24       	eor	r14, r14
 83e:	e3 94       	inc	r14
 840:	e1 0e       	add	r14, r17
 842:	81 2f       	mov	r24, r17
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	a8 16       	cp	r10, r24
 848:	b9 06       	cpc	r11, r25
 84a:	2c f4       	brge	.+10     	; 0x856 <__EEPROM_REGION_LENGTH__+0x56>
 84c:	1a 19       	sub	r17, r10
 84e:	04 c0       	rjmp	.+8      	; 0x858 <__EEPROM_REGION_LENGTH__+0x58>
 850:	ee 24       	eor	r14, r14
 852:	e3 94       	inc	r14
 854:	01 c0       	rjmp	.+2      	; 0x858 <__EEPROM_REGION_LENGTH__+0x58>
 856:	10 e0       	ldi	r17, 0x00	; 0
 858:	77 fe       	sbrs	r7, 7
 85a:	06 c0       	rjmp	.+12     	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
 85c:	1a 14       	cp	r1, r10
 85e:	1b 04       	cpc	r1, r11
 860:	34 f4       	brge	.+12     	; 0x86e <__EEPROM_REGION_LENGTH__+0x6e>
 862:	c5 01       	movw	r24, r10
 864:	01 96       	adiw	r24, 0x01	; 1
 866:	05 c0       	rjmp	.+10     	; 0x872 <__EEPROM_REGION_LENGTH__+0x72>
 868:	85 e0       	ldi	r24, 0x05	; 5
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__EEPROM_REGION_LENGTH__+0x72>
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	01 11       	cpse	r16, r1
 874:	01 96       	adiw	r24, 0x01	; 1
 876:	11 23       	and	r17, r17
 878:	31 f0       	breq	.+12     	; 0x886 <__EEPROM_REGION_LENGTH__+0x86>
 87a:	21 2f       	mov	r18, r17
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	2f 5f       	subi	r18, 0xFF	; 255
 880:	3f 4f       	sbci	r19, 0xFF	; 255
 882:	82 0f       	add	r24, r18
 884:	93 1f       	adc	r25, r19
 886:	2f 2d       	mov	r18, r15
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	82 17       	cp	r24, r18
 88c:	93 07       	cpc	r25, r19
 88e:	14 f4       	brge	.+4      	; 0x894 <__EEPROM_REGION_LENGTH__+0x94>
 890:	f8 1a       	sub	r15, r24
 892:	01 c0       	rjmp	.+2      	; 0x896 <__EEPROM_REGION_LENGTH__+0x96>
 894:	f1 2c       	mov	r15, r1
 896:	87 2d       	mov	r24, r7
 898:	89 70       	andi	r24, 0x09	; 9
 89a:	49 f4       	brne	.+18     	; 0x8ae <__EEPROM_REGION_LENGTH__+0xae>
 89c:	ff 20       	and	r15, r15
 89e:	39 f0       	breq	.+14     	; 0x8ae <__EEPROM_REGION_LENGTH__+0xae>
 8a0:	b6 01       	movw	r22, r12
 8a2:	80 e2       	ldi	r24, 0x20	; 32
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 8aa:	fa 94       	dec	r15
 8ac:	f7 cf       	rjmp	.-18     	; 0x89c <__EEPROM_REGION_LENGTH__+0x9c>
 8ae:	00 23       	and	r16, r16
 8b0:	29 f0       	breq	.+10     	; 0x8bc <__EEPROM_REGION_LENGTH__+0xbc>
 8b2:	b6 01       	movw	r22, r12
 8b4:	80 2f       	mov	r24, r16
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 8bc:	73 fc       	sbrc	r7, 3
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__EEPROM_REGION_LENGTH__+0xd2>
 8c0:	ff 20       	and	r15, r15
 8c2:	39 f0       	breq	.+14     	; 0x8d2 <__EEPROM_REGION_LENGTH__+0xd2>
 8c4:	b6 01       	movw	r22, r12
 8c6:	80 e3       	ldi	r24, 0x30	; 48
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 8ce:	fa 94       	dec	r15
 8d0:	f7 cf       	rjmp	.-18     	; 0x8c0 <__EEPROM_REGION_LENGTH__+0xc0>
 8d2:	77 fe       	sbrs	r7, 7
 8d4:	49 c0       	rjmp	.+146    	; 0x968 <__EEPROM_REGION_LENGTH__+0x168>
 8d6:	35 01       	movw	r6, r10
 8d8:	b7 fe       	sbrs	r11, 7
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__EEPROM_REGION_LENGTH__+0xe0>
 8dc:	61 2c       	mov	r6, r1
 8de:	71 2c       	mov	r7, r1
 8e0:	c5 01       	movw	r24, r10
 8e2:	86 19       	sub	r24, r6
 8e4:	97 09       	sbc	r25, r7
 8e6:	88 24       	eor	r8, r8
 8e8:	83 94       	inc	r8
 8ea:	91 2c       	mov	r9, r1
 8ec:	8c 0e       	add	r8, r28
 8ee:	9d 1e       	adc	r9, r29
 8f0:	88 0e       	add	r8, r24
 8f2:	99 1e       	adc	r9, r25
 8f4:	f5 01       	movw	r30, r10
 8f6:	ee 19       	sub	r30, r14
 8f8:	f1 09       	sbc	r31, r1
 8fa:	f9 8b       	std	Y+17, r31	; 0x11
 8fc:	e8 8b       	std	Y+16, r30	; 0x10
 8fe:	01 2f       	mov	r16, r17
 900:	10 e0       	ldi	r17, 0x00	; 0
 902:	11 95       	neg	r17
 904:	01 95       	neg	r16
 906:	11 09       	sbc	r17, r1
 908:	ff ef       	ldi	r31, 0xFF	; 255
 90a:	6f 16       	cp	r6, r31
 90c:	7f 06       	cpc	r7, r31
 90e:	29 f4       	brne	.+10     	; 0x91a <__EEPROM_REGION_LENGTH__+0x11a>
 910:	b6 01       	movw	r22, r12
 912:	8e e2       	ldi	r24, 0x2E	; 46
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 91a:	a6 14       	cp	r10, r6
 91c:	b7 04       	cpc	r11, r7
 91e:	44 f0       	brlt	.+16     	; 0x930 <__EEPROM_REGION_LENGTH__+0x130>
 920:	88 89       	ldd	r24, Y+16	; 0x10
 922:	99 89       	ldd	r25, Y+17	; 0x11
 924:	86 15       	cp	r24, r6
 926:	97 05       	cpc	r25, r7
 928:	1c f4       	brge	.+6      	; 0x930 <__EEPROM_REGION_LENGTH__+0x130>
 92a:	f4 01       	movw	r30, r8
 92c:	81 81       	ldd	r24, Z+1	; 0x01
 92e:	01 c0       	rjmp	.+2      	; 0x932 <__EEPROM_REGION_LENGTH__+0x132>
 930:	80 e3       	ldi	r24, 0x30	; 48
 932:	f1 e0       	ldi	r31, 0x01	; 1
 934:	6f 1a       	sub	r6, r31
 936:	71 08       	sbc	r7, r1
 938:	2f ef       	ldi	r18, 0xFF	; 255
 93a:	82 1a       	sub	r8, r18
 93c:	92 0a       	sbc	r9, r18
 93e:	60 16       	cp	r6, r16
 940:	71 06       	cpc	r7, r17
 942:	2c f0       	brlt	.+10     	; 0x94e <__EEPROM_REGION_LENGTH__+0x14e>
 944:	b6 01       	movw	r22, r12
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 94c:	dd cf       	rjmp	.-70     	; 0x908 <__EEPROM_REGION_LENGTH__+0x108>
 94e:	a6 14       	cp	r10, r6
 950:	b7 04       	cpc	r11, r7
 952:	39 f4       	brne	.+14     	; 0x962 <__EEPROM_REGION_LENGTH__+0x162>
 954:	9a 81       	ldd	r25, Y+2	; 0x02
 956:	96 33       	cpi	r25, 0x36	; 54
 958:	18 f4       	brcc	.+6      	; 0x960 <__EEPROM_REGION_LENGTH__+0x160>
 95a:	95 33       	cpi	r25, 0x35	; 53
 95c:	11 f4       	brne	.+4      	; 0x962 <__EEPROM_REGION_LENGTH__+0x162>
 95e:	54 fe       	sbrs	r5, 4
 960:	81 e3       	ldi	r24, 0x31	; 49
 962:	b6 01       	movw	r22, r12
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	51 c0       	rjmp	.+162    	; 0xa0a <__EEPROM_REGION_LENGTH__+0x20a>
 968:	8a 81       	ldd	r24, Y+2	; 0x02
 96a:	81 33       	cpi	r24, 0x31	; 49
 96c:	19 f0       	breq	.+6      	; 0x974 <__EEPROM_REGION_LENGTH__+0x174>
 96e:	95 2d       	mov	r25, r5
 970:	9f 7e       	andi	r25, 0xEF	; 239
 972:	59 2e       	mov	r5, r25
 974:	b6 01       	movw	r22, r12
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 97c:	11 11       	cpse	r17, r1
 97e:	05 c0       	rjmp	.+10     	; 0x98a <__EEPROM_REGION_LENGTH__+0x18a>
 980:	74 fc       	sbrc	r7, 4
 982:	1c c0       	rjmp	.+56     	; 0x9bc <__EEPROM_REGION_LENGTH__+0x1bc>
 984:	85 e6       	ldi	r24, 0x65	; 101
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	1b c0       	rjmp	.+54     	; 0x9c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 98a:	b6 01       	movw	r22, r12
 98c:	8e e2       	ldi	r24, 0x2E	; 46
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 994:	02 e0       	ldi	r16, 0x02	; 2
 996:	01 0f       	add	r16, r17
 998:	82 e0       	ldi	r24, 0x02	; 2
 99a:	11 e0       	ldi	r17, 0x01	; 1
 99c:	18 0f       	add	r17, r24
 99e:	e1 e0       	ldi	r30, 0x01	; 1
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	ec 0f       	add	r30, r28
 9a4:	fd 1f       	adc	r31, r29
 9a6:	e8 0f       	add	r30, r24
 9a8:	f1 1d       	adc	r31, r1
 9aa:	80 81       	ld	r24, Z
 9ac:	b6 01       	movw	r22, r12
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 9b4:	81 2f       	mov	r24, r17
 9b6:	10 13       	cpse	r17, r16
 9b8:	f0 cf       	rjmp	.-32     	; 0x99a <__EEPROM_REGION_LENGTH__+0x19a>
 9ba:	e2 cf       	rjmp	.-60     	; 0x980 <__EEPROM_REGION_LENGTH__+0x180>
 9bc:	85 e4       	ldi	r24, 0x45	; 69
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	b6 01       	movw	r22, r12
 9c2:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 9c6:	b7 fc       	sbrc	r11, 7
 9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__EEPROM_REGION_LENGTH__+0x1d4>
 9ca:	a1 14       	cp	r10, r1
 9cc:	b1 04       	cpc	r11, r1
 9ce:	39 f4       	brne	.+14     	; 0x9de <__EEPROM_REGION_LENGTH__+0x1de>
 9d0:	54 fe       	sbrs	r5, 4
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <__EEPROM_REGION_LENGTH__+0x1de>
 9d4:	b1 94       	neg	r11
 9d6:	a1 94       	neg	r10
 9d8:	b1 08       	sbc	r11, r1
 9da:	8d e2       	ldi	r24, 0x2D	; 45
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 9de:	8b e2       	ldi	r24, 0x2B	; 43
 9e0:	b6 01       	movw	r22, r12
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 9e8:	80 e3       	ldi	r24, 0x30	; 48
 9ea:	ea e0       	ldi	r30, 0x0A	; 10
 9ec:	ae 16       	cp	r10, r30
 9ee:	b1 04       	cpc	r11, r1
 9f0:	2c f0       	brlt	.+10     	; 0x9fc <__EEPROM_REGION_LENGTH__+0x1fc>
 9f2:	8f 5f       	subi	r24, 0xFF	; 255
 9f4:	aa e0       	ldi	r26, 0x0A	; 10
 9f6:	aa 1a       	sub	r10, r26
 9f8:	b1 08       	sbc	r11, r1
 9fa:	f7 cf       	rjmp	.-18     	; 0x9ea <__EEPROM_REGION_LENGTH__+0x1ea>
 9fc:	b6 01       	movw	r22, r12
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 a04:	b6 01       	movw	r22, r12
 a06:	c5 01       	movw	r24, r10
 a08:	c0 96       	adiw	r24, 0x30	; 48
 a0a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 a0e:	72 c1       	rjmp	.+740    	; 0xcf4 <__EEPROM_REGION_LENGTH__+0x4f4>
 a10:	83 36       	cpi	r24, 0x63	; 99
 a12:	31 f0       	breq	.+12     	; 0xa20 <__EEPROM_REGION_LENGTH__+0x220>
 a14:	83 37       	cpi	r24, 0x73	; 115
 a16:	91 f0       	breq	.+36     	; 0xa3c <__EEPROM_REGION_LENGTH__+0x23c>
 a18:	83 35       	cpi	r24, 0x53	; 83
 a1a:	09 f0       	breq	.+2      	; 0xa1e <__EEPROM_REGION_LENGTH__+0x21e>
 a1c:	5d c0       	rjmp	.+186    	; 0xad8 <__EEPROM_REGION_LENGTH__+0x2d8>
 a1e:	24 c0       	rjmp	.+72     	; 0xa68 <__EEPROM_REGION_LENGTH__+0x268>
 a20:	c5 01       	movw	r24, r10
 a22:	02 96       	adiw	r24, 0x02	; 2
 a24:	9f 87       	std	Y+15, r25	; 0x0f
 a26:	8e 87       	std	Y+14, r24	; 0x0e
 a28:	f5 01       	movw	r30, r10
 a2a:	80 81       	ld	r24, Z
 a2c:	89 83       	std	Y+1, r24	; 0x01
 a2e:	6a 88       	ldd	r6, Y+18	; 0x12
 a30:	7b 88       	ldd	r7, Y+19	; 0x13
 a32:	8c 88       	ldd	r8, Y+20	; 0x14
 a34:	aa 24       	eor	r10, r10
 a36:	a3 94       	inc	r10
 a38:	b1 2c       	mov	r11, r1
 a3a:	14 c0       	rjmp	.+40     	; 0xa64 <__EEPROM_REGION_LENGTH__+0x264>
 a3c:	c5 01       	movw	r24, r10
 a3e:	03 96       	adiw	r24, 0x03	; 3
 a40:	9f 87       	std	Y+15, r25	; 0x0f
 a42:	8e 87       	std	Y+14, r24	; 0x0e
 a44:	f5 01       	movw	r30, r10
 a46:	60 80       	ld	r6, Z
 a48:	71 80       	ldd	r7, Z+1	; 0x01
 a4a:	82 80       	ldd	r8, Z+2	; 0x02
 a4c:	06 ff       	sbrs	r16, 6
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <__EEPROM_REGION_LENGTH__+0x256>
 a50:	41 2f       	mov	r20, r17
 a52:	50 e0       	ldi	r21, 0x00	; 0
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <__EEPROM_REGION_LENGTH__+0x25a>
 a56:	4f ef       	ldi	r20, 0xFF	; 255
 a58:	5f ef       	ldi	r21, 0xFF	; 255
 a5a:	88 2d       	mov	r24, r8
 a5c:	b3 01       	movw	r22, r6
 a5e:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <strnlen>
 a62:	5c 01       	movw	r10, r24
 a64:	0f 77       	andi	r16, 0x7F	; 127
 a66:	15 c0       	rjmp	.+42     	; 0xa92 <__EEPROM_REGION_LENGTH__+0x292>
 a68:	c5 01       	movw	r24, r10
 a6a:	03 96       	adiw	r24, 0x03	; 3
 a6c:	9f 87       	std	Y+15, r25	; 0x0f
 a6e:	8e 87       	std	Y+14, r24	; 0x0e
 a70:	f5 01       	movw	r30, r10
 a72:	60 80       	ld	r6, Z
 a74:	71 80       	ldd	r7, Z+1	; 0x01
 a76:	82 80       	ldd	r8, Z+2	; 0x02
 a78:	06 ff       	sbrs	r16, 6
 a7a:	03 c0       	rjmp	.+6      	; 0xa82 <__EEPROM_REGION_LENGTH__+0x282>
 a7c:	41 2f       	mov	r20, r17
 a7e:	50 e0       	ldi	r21, 0x00	; 0
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <__EEPROM_REGION_LENGTH__+0x286>
 a82:	4f ef       	ldi	r20, 0xFF	; 255
 a84:	5f ef       	ldi	r21, 0xFF	; 255
 a86:	88 2d       	mov	r24, r8
 a88:	b3 01       	movw	r22, r6
 a8a:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <strnlen>
 a8e:	5c 01       	movw	r10, r24
 a90:	00 68       	ori	r16, 0x80	; 128
 a92:	03 fd       	sbrc	r16, 3
 a94:	1d c0       	rjmp	.+58     	; 0xad0 <__EEPROM_REGION_LENGTH__+0x2d0>
 a96:	8f 2d       	mov	r24, r15
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	a8 16       	cp	r10, r24
 a9c:	b9 06       	cpc	r11, r25
 a9e:	c0 f4       	brcc	.+48     	; 0xad0 <__EEPROM_REGION_LENGTH__+0x2d0>
 aa0:	b6 01       	movw	r22, r12
 aa2:	80 e2       	ldi	r24, 0x20	; 32
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 aaa:	fa 94       	dec	r15
 aac:	f4 cf       	rjmp	.-24     	; 0xa96 <__EEPROM_REGION_LENGTH__+0x296>
 aae:	f3 01       	movw	r30, r6
 ab0:	84 91       	lpm	r24, Z
 ab2:	87 fc       	sbrc	r8, 7
 ab4:	80 81       	ld	r24, Z
 ab6:	ff ef       	ldi	r31, 0xFF	; 255
 ab8:	6f 1a       	sub	r6, r31
 aba:	7f 0a       	sbc	r7, r31
 abc:	8f 0a       	sbc	r8, r31
 abe:	b6 01       	movw	r22, r12
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 ac6:	f1 10       	cpse	r15, r1
 ac8:	fa 94       	dec	r15
 aca:	21 e0       	ldi	r18, 0x01	; 1
 acc:	a2 1a       	sub	r10, r18
 ace:	b1 08       	sbc	r11, r1
 ad0:	a1 14       	cp	r10, r1
 ad2:	b1 04       	cpc	r11, r1
 ad4:	61 f7       	brne	.-40     	; 0xaae <__EEPROM_REGION_LENGTH__+0x2ae>
 ad6:	0e c1       	rjmp	.+540    	; 0xcf4 <__EEPROM_REGION_LENGTH__+0x4f4>
 ad8:	84 36       	cpi	r24, 0x64	; 100
 ada:	11 f0       	breq	.+4      	; 0xae0 <__EEPROM_REGION_LENGTH__+0x2e0>
 adc:	89 36       	cpi	r24, 0x69	; 105
 ade:	79 f5       	brne	.+94     	; 0xb3e <__EEPROM_REGION_LENGTH__+0x33e>
 ae0:	c5 01       	movw	r24, r10
 ae2:	07 ff       	sbrs	r16, 7
 ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <__EEPROM_REGION_LENGTH__+0x2f8>
 ae6:	04 96       	adiw	r24, 0x04	; 4
 ae8:	9f 87       	std	Y+15, r25	; 0x0f
 aea:	8e 87       	std	Y+14, r24	; 0x0e
 aec:	f5 01       	movw	r30, r10
 aee:	60 81       	ld	r22, Z
 af0:	71 81       	ldd	r23, Z+1	; 0x01
 af2:	82 81       	ldd	r24, Z+2	; 0x02
 af4:	93 81       	ldd	r25, Z+3	; 0x03
 af6:	0a c0       	rjmp	.+20     	; 0xb0c <__EEPROM_REGION_LENGTH__+0x30c>
 af8:	02 96       	adiw	r24, 0x02	; 2
 afa:	9f 87       	std	Y+15, r25	; 0x0f
 afc:	8e 87       	std	Y+14, r24	; 0x0e
 afe:	f5 01       	movw	r30, r10
 b00:	60 81       	ld	r22, Z
 b02:	71 81       	ldd	r23, Z+1	; 0x01
 b04:	07 2e       	mov	r0, r23
 b06:	00 0c       	add	r0, r0
 b08:	88 0b       	sbc	r24, r24
 b0a:	99 0b       	sbc	r25, r25
 b0c:	0f 76       	andi	r16, 0x6F	; 111
 b0e:	e0 2e       	mov	r14, r16
 b10:	97 ff       	sbrs	r25, 7
 b12:	0a c0       	rjmp	.+20     	; 0xb28 <__EEPROM_REGION_LENGTH__+0x328>
 b14:	90 95       	com	r25
 b16:	80 95       	com	r24
 b18:	70 95       	com	r23
 b1a:	61 95       	neg	r22
 b1c:	7f 4f       	sbci	r23, 0xFF	; 255
 b1e:	8f 4f       	sbci	r24, 0xFF	; 255
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	f0 2f       	mov	r31, r16
 b24:	f0 68       	ori	r31, 0x80	; 128
 b26:	ef 2e       	mov	r14, r31
 b28:	2a e0       	ldi	r18, 0x0A	; 10
 b2a:	30 e0       	ldi	r19, 0x00	; 0
 b2c:	ae 01       	movw	r20, r28
 b2e:	4f 5f       	subi	r20, 0xFF	; 255
 b30:	5f 4f       	sbci	r21, 0xFF	; 255
 b32:	0e 94 bf 12 	call	0x257e	; 0x257e <__ultoa_invert>
 b36:	a8 2e       	mov	r10, r24
 b38:	2c 85       	ldd	r18, Y+12	; 0x0c
 b3a:	a2 1a       	sub	r10, r18
 b3c:	4b c0       	rjmp	.+150    	; 0xbd4 <__EEPROM_REGION_LENGTH__+0x3d4>
 b3e:	85 37       	cpi	r24, 0x75	; 117
 b40:	29 f4       	brne	.+10     	; 0xb4c <__EEPROM_REGION_LENGTH__+0x34c>
 b42:	0f 7e       	andi	r16, 0xEF	; 239
 b44:	e0 2e       	mov	r14, r16
 b46:	2a e0       	ldi	r18, 0x0A	; 10
 b48:	30 e0       	ldi	r19, 0x00	; 0
 b4a:	25 c0       	rjmp	.+74     	; 0xb96 <__EEPROM_REGION_LENGTH__+0x396>
 b4c:	90 2f       	mov	r25, r16
 b4e:	99 7f       	andi	r25, 0xF9	; 249
 b50:	e9 2e       	mov	r14, r25
 b52:	8f 36       	cpi	r24, 0x6F	; 111
 b54:	c1 f0       	breq	.+48     	; 0xb86 <__EEPROM_REGION_LENGTH__+0x386>
 b56:	18 f4       	brcc	.+6      	; 0xb5e <__EEPROM_REGION_LENGTH__+0x35e>
 b58:	88 35       	cpi	r24, 0x58	; 88
 b5a:	79 f0       	breq	.+30     	; 0xb7a <__EEPROM_REGION_LENGTH__+0x37a>
 b5c:	d5 c0       	rjmp	.+426    	; 0xd08 <__EEPROM_REGION_LENGTH__+0x508>
 b5e:	80 37       	cpi	r24, 0x70	; 112
 b60:	19 f0       	breq	.+6      	; 0xb68 <__EEPROM_REGION_LENGTH__+0x368>
 b62:	88 37       	cpi	r24, 0x78	; 120
 b64:	21 f0       	breq	.+8      	; 0xb6e <__EEPROM_REGION_LENGTH__+0x36e>
 b66:	d0 c0       	rjmp	.+416    	; 0xd08 <__EEPROM_REGION_LENGTH__+0x508>
 b68:	a9 2f       	mov	r26, r25
 b6a:	a0 61       	ori	r26, 0x10	; 16
 b6c:	ea 2e       	mov	r14, r26
 b6e:	e4 fe       	sbrs	r14, 4
 b70:	0d c0       	rjmp	.+26     	; 0xb8c <__EEPROM_REGION_LENGTH__+0x38c>
 b72:	ee 2d       	mov	r30, r14
 b74:	e4 60       	ori	r30, 0x04	; 4
 b76:	ee 2e       	mov	r14, r30
 b78:	09 c0       	rjmp	.+18     	; 0xb8c <__EEPROM_REGION_LENGTH__+0x38c>
 b7a:	04 ff       	sbrs	r16, 4
 b7c:	0a c0       	rjmp	.+20     	; 0xb92 <__EEPROM_REGION_LENGTH__+0x392>
 b7e:	f9 2f       	mov	r31, r25
 b80:	f6 60       	ori	r31, 0x06	; 6
 b82:	ef 2e       	mov	r14, r31
 b84:	06 c0       	rjmp	.+12     	; 0xb92 <__EEPROM_REGION_LENGTH__+0x392>
 b86:	28 e0       	ldi	r18, 0x08	; 8
 b88:	30 e0       	ldi	r19, 0x00	; 0
 b8a:	05 c0       	rjmp	.+10     	; 0xb96 <__EEPROM_REGION_LENGTH__+0x396>
 b8c:	20 e1       	ldi	r18, 0x10	; 16
 b8e:	30 e0       	ldi	r19, 0x00	; 0
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <__EEPROM_REGION_LENGTH__+0x396>
 b92:	20 e1       	ldi	r18, 0x10	; 16
 b94:	32 e0       	ldi	r19, 0x02	; 2
 b96:	c5 01       	movw	r24, r10
 b98:	e7 fe       	sbrs	r14, 7
 b9a:	09 c0       	rjmp	.+18     	; 0xbae <__EEPROM_REGION_LENGTH__+0x3ae>
 b9c:	04 96       	adiw	r24, 0x04	; 4
 b9e:	9f 87       	std	Y+15, r25	; 0x0f
 ba0:	8e 87       	std	Y+14, r24	; 0x0e
 ba2:	f5 01       	movw	r30, r10
 ba4:	60 81       	ld	r22, Z
 ba6:	71 81       	ldd	r23, Z+1	; 0x01
 ba8:	82 81       	ldd	r24, Z+2	; 0x02
 baa:	93 81       	ldd	r25, Z+3	; 0x03
 bac:	08 c0       	rjmp	.+16     	; 0xbbe <__EEPROM_REGION_LENGTH__+0x3be>
 bae:	02 96       	adiw	r24, 0x02	; 2
 bb0:	9f 87       	std	Y+15, r25	; 0x0f
 bb2:	8e 87       	std	Y+14, r24	; 0x0e
 bb4:	f5 01       	movw	r30, r10
 bb6:	60 81       	ld	r22, Z
 bb8:	71 81       	ldd	r23, Z+1	; 0x01
 bba:	80 e0       	ldi	r24, 0x00	; 0
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	ae 01       	movw	r20, r28
 bc0:	4f 5f       	subi	r20, 0xFF	; 255
 bc2:	5f 4f       	sbci	r21, 0xFF	; 255
 bc4:	0e 94 bf 12 	call	0x257e	; 0x257e <__ultoa_invert>
 bc8:	a8 2e       	mov	r10, r24
 bca:	fc 85       	ldd	r31, Y+12	; 0x0c
 bcc:	af 1a       	sub	r10, r31
 bce:	2e 2d       	mov	r18, r14
 bd0:	2f 77       	andi	r18, 0x7F	; 127
 bd2:	e2 2e       	mov	r14, r18
 bd4:	e6 fe       	sbrs	r14, 6
 bd6:	0b c0       	rjmp	.+22     	; 0xbee <__EEPROM_REGION_LENGTH__+0x3ee>
 bd8:	0e 2d       	mov	r16, r14
 bda:	0e 7f       	andi	r16, 0xFE	; 254
 bdc:	a1 16       	cp	r10, r17
 bde:	50 f4       	brcc	.+20     	; 0xbf4 <__EEPROM_REGION_LENGTH__+0x3f4>
 be0:	e4 fe       	sbrs	r14, 4
 be2:	0a c0       	rjmp	.+20     	; 0xbf8 <__EEPROM_REGION_LENGTH__+0x3f8>
 be4:	e2 fc       	sbrc	r14, 2
 be6:	08 c0       	rjmp	.+16     	; 0xbf8 <__EEPROM_REGION_LENGTH__+0x3f8>
 be8:	0e 2d       	mov	r16, r14
 bea:	0e 7e       	andi	r16, 0xEE	; 238
 bec:	05 c0       	rjmp	.+10     	; 0xbf8 <__EEPROM_REGION_LENGTH__+0x3f8>
 bee:	ba 2c       	mov	r11, r10
 bf0:	0e 2d       	mov	r16, r14
 bf2:	03 c0       	rjmp	.+6      	; 0xbfa <__EEPROM_REGION_LENGTH__+0x3fa>
 bf4:	ba 2c       	mov	r11, r10
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <__EEPROM_REGION_LENGTH__+0x3fa>
 bf8:	b1 2e       	mov	r11, r17
 bfa:	04 ff       	sbrs	r16, 4
 bfc:	0d c0       	rjmp	.+26     	; 0xc18 <__EEPROM_REGION_LENGTH__+0x418>
 bfe:	fe 01       	movw	r30, r28
 c00:	ea 0d       	add	r30, r10
 c02:	f1 1d       	adc	r31, r1
 c04:	80 81       	ld	r24, Z
 c06:	80 33       	cpi	r24, 0x30	; 48
 c08:	11 f4       	brne	.+4      	; 0xc0e <__EEPROM_REGION_LENGTH__+0x40e>
 c0a:	09 7e       	andi	r16, 0xE9	; 233
 c0c:	09 c0       	rjmp	.+18     	; 0xc20 <__EEPROM_REGION_LENGTH__+0x420>
 c0e:	02 ff       	sbrs	r16, 2
 c10:	06 c0       	rjmp	.+12     	; 0xc1e <__EEPROM_REGION_LENGTH__+0x41e>
 c12:	b3 94       	inc	r11
 c14:	b3 94       	inc	r11
 c16:	04 c0       	rjmp	.+8      	; 0xc20 <__EEPROM_REGION_LENGTH__+0x420>
 c18:	80 2f       	mov	r24, r16
 c1a:	86 78       	andi	r24, 0x86	; 134
 c1c:	09 f0       	breq	.+2      	; 0xc20 <__EEPROM_REGION_LENGTH__+0x420>
 c1e:	b3 94       	inc	r11
 c20:	03 fd       	sbrc	r16, 3
 c22:	11 c0       	rjmp	.+34     	; 0xc46 <__EEPROM_REGION_LENGTH__+0x446>
 c24:	00 ff       	sbrs	r16, 0
 c26:	06 c0       	rjmp	.+12     	; 0xc34 <__EEPROM_REGION_LENGTH__+0x434>
 c28:	bf 14       	cp	r11, r15
 c2a:	88 f4       	brcc	.+34     	; 0xc4e <__EEPROM_REGION_LENGTH__+0x44e>
 c2c:	fa 0c       	add	r15, r10
 c2e:	1f 2d       	mov	r17, r15
 c30:	1b 19       	sub	r17, r11
 c32:	0e c0       	rjmp	.+28     	; 0xc50 <__EEPROM_REGION_LENGTH__+0x450>
 c34:	bf 14       	cp	r11, r15
 c36:	60 f4       	brcc	.+24     	; 0xc50 <__EEPROM_REGION_LENGTH__+0x450>
 c38:	b6 01       	movw	r22, r12
 c3a:	80 e2       	ldi	r24, 0x20	; 32
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 c42:	b3 94       	inc	r11
 c44:	f7 cf       	rjmp	.-18     	; 0xc34 <__EEPROM_REGION_LENGTH__+0x434>
 c46:	bf 14       	cp	r11, r15
 c48:	18 f4       	brcc	.+6      	; 0xc50 <__EEPROM_REGION_LENGTH__+0x450>
 c4a:	fb 18       	sub	r15, r11
 c4c:	02 c0       	rjmp	.+4      	; 0xc52 <__EEPROM_REGION_LENGTH__+0x452>
 c4e:	1a 2d       	mov	r17, r10
 c50:	f1 2c       	mov	r15, r1
 c52:	04 ff       	sbrs	r16, 4
 c54:	10 c0       	rjmp	.+32     	; 0xc76 <__EEPROM_REGION_LENGTH__+0x476>
 c56:	b6 01       	movw	r22, r12
 c58:	80 e3       	ldi	r24, 0x30	; 48
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 c60:	02 ff       	sbrs	r16, 2
 c62:	17 c0       	rjmp	.+46     	; 0xc92 <__EEPROM_REGION_LENGTH__+0x492>
 c64:	01 fd       	sbrc	r16, 1
 c66:	03 c0       	rjmp	.+6      	; 0xc6e <__EEPROM_REGION_LENGTH__+0x46e>
 c68:	88 e7       	ldi	r24, 0x78	; 120
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	02 c0       	rjmp	.+4      	; 0xc72 <__EEPROM_REGION_LENGTH__+0x472>
 c6e:	88 e5       	ldi	r24, 0x58	; 88
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	b6 01       	movw	r22, r12
 c74:	0c c0       	rjmp	.+24     	; 0xc8e <__EEPROM_REGION_LENGTH__+0x48e>
 c76:	80 2f       	mov	r24, r16
 c78:	86 78       	andi	r24, 0x86	; 134
 c7a:	59 f0       	breq	.+22     	; 0xc92 <__EEPROM_REGION_LENGTH__+0x492>
 c7c:	01 ff       	sbrs	r16, 1
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <__EEPROM_REGION_LENGTH__+0x484>
 c80:	8b e2       	ldi	r24, 0x2B	; 43
 c82:	01 c0       	rjmp	.+2      	; 0xc86 <__EEPROM_REGION_LENGTH__+0x486>
 c84:	80 e2       	ldi	r24, 0x20	; 32
 c86:	07 fd       	sbrc	r16, 7
 c88:	8d e2       	ldi	r24, 0x2D	; 45
 c8a:	b6 01       	movw	r22, r12
 c8c:	90 e0       	ldi	r25, 0x00	; 0
 c8e:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 c92:	a1 16       	cp	r10, r17
 c94:	38 f4       	brcc	.+14     	; 0xca4 <__EEPROM_REGION_LENGTH__+0x4a4>
 c96:	b6 01       	movw	r22, r12
 c98:	80 e3       	ldi	r24, 0x30	; 48
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 ca0:	11 50       	subi	r17, 0x01	; 1
 ca2:	f7 cf       	rjmp	.-18     	; 0xc92 <__EEPROM_REGION_LENGTH__+0x492>
 ca4:	aa 94       	dec	r10
 ca6:	e1 e0       	ldi	r30, 0x01	; 1
 ca8:	f0 e0       	ldi	r31, 0x00	; 0
 caa:	ec 0f       	add	r30, r28
 cac:	fd 1f       	adc	r31, r29
 cae:	ea 0d       	add	r30, r10
 cb0:	f1 1d       	adc	r31, r1
 cb2:	80 81       	ld	r24, Z
 cb4:	b6 01       	movw	r22, r12
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 cbc:	a1 10       	cpse	r10, r1
 cbe:	f2 cf       	rjmp	.-28     	; 0xca4 <__EEPROM_REGION_LENGTH__+0x4a4>
 cc0:	19 c0       	rjmp	.+50     	; 0xcf4 <__EEPROM_REGION_LENGTH__+0x4f4>
 cc2:	f4 e0       	ldi	r31, 0x04	; 4
 cc4:	ff 15       	cp	r31, r15
 cc6:	80 f5       	brcc	.+96     	; 0xd28 <__EEPROM_REGION_LENGTH__+0x528>
 cc8:	84 e0       	ldi	r24, 0x04	; 4
 cca:	f8 1a       	sub	r15, r24
 ccc:	73 fe       	sbrs	r7, 3
 cce:	23 c0       	rjmp	.+70     	; 0xd16 <__EEPROM_REGION_LENGTH__+0x516>
 cd0:	01 11       	cpse	r16, r1
 cd2:	2b c0       	rjmp	.+86     	; 0xd2a <__EEPROM_REGION_LENGTH__+0x52a>
 cd4:	53 fe       	sbrs	r5, 3
 cd6:	2f c0       	rjmp	.+94     	; 0xd36 <__EEPROM_REGION_LENGTH__+0x536>
 cd8:	5a e1       	ldi	r21, 0x1A	; 26
 cda:	85 2e       	mov	r8, r21
 cdc:	56 e0       	ldi	r21, 0x06	; 6
 cde:	95 2e       	mov	r9, r21
 ce0:	50 e0       	ldi	r21, 0x00	; 0
 ce2:	a5 2e       	mov	r10, r21
 ce4:	07 2d       	mov	r16, r7
 ce6:	00 71       	andi	r16, 0x10	; 16
 ce8:	f4 01       	movw	r30, r8
 cea:	84 91       	lpm	r24, Z
 cec:	a7 fc       	sbrc	r10, 7
 cee:	80 81       	ld	r24, Z
 cf0:	81 11       	cpse	r24, r1
 cf2:	28 c0       	rjmp	.+80     	; 0xd44 <__EEPROM_REGION_LENGTH__+0x544>
 cf4:	ff 20       	and	r15, r15
 cf6:	09 f4       	brne	.+2      	; 0xcfa <__EEPROM_REGION_LENGTH__+0x4fa>
 cf8:	d2 cc       	rjmp	.-1628   	; 0x69e <vfprintf+0x72>
 cfa:	b6 01       	movw	r22, r12
 cfc:	80 e2       	ldi	r24, 0x20	; 32
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 d04:	fa 94       	dec	r15
 d06:	f6 cf       	rjmp	.-20     	; 0xcf4 <__EEPROM_REGION_LENGTH__+0x4f4>
 d08:	f6 01       	movw	r30, r12
 d0a:	87 81       	ldd	r24, Z+7	; 0x07
 d0c:	90 85       	ldd	r25, Z+8	; 0x08
 d0e:	2c c0       	rjmp	.+88     	; 0xd68 <__EEPROM_REGION_LENGTH__+0x568>
 d10:	8f ef       	ldi	r24, 0xFF	; 255
 d12:	9f ef       	ldi	r25, 0xFF	; 255
 d14:	29 c0       	rjmp	.+82     	; 0xd68 <__EEPROM_REGION_LENGTH__+0x568>
 d16:	b6 01       	movw	r22, r12
 d18:	80 e2       	ldi	r24, 0x20	; 32
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 d20:	fa 94       	dec	r15
 d22:	f1 10       	cpse	r15, r1
 d24:	f8 cf       	rjmp	.-16     	; 0xd16 <__EEPROM_REGION_LENGTH__+0x516>
 d26:	d4 cf       	rjmp	.-88     	; 0xcd0 <__EEPROM_REGION_LENGTH__+0x4d0>
 d28:	f1 2c       	mov	r15, r1
 d2a:	b6 01       	movw	r22, r12
 d2c:	80 2f       	mov	r24, r16
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 d34:	cf cf       	rjmp	.-98     	; 0xcd4 <__EEPROM_REGION_LENGTH__+0x4d4>
 d36:	46 e1       	ldi	r20, 0x16	; 22
 d38:	84 2e       	mov	r8, r20
 d3a:	46 e0       	ldi	r20, 0x06	; 6
 d3c:	94 2e       	mov	r9, r20
 d3e:	40 e0       	ldi	r20, 0x00	; 0
 d40:	a4 2e       	mov	r10, r20
 d42:	d0 cf       	rjmp	.-96     	; 0xce4 <__EEPROM_REGION_LENGTH__+0x4e4>
 d44:	01 11       	cpse	r16, r1
 d46:	80 52       	subi	r24, 0x20	; 32
 d48:	b6 01       	movw	r22, r12
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <fputc>
 d50:	ff ef       	ldi	r31, 0xFF	; 255
 d52:	8f 1a       	sub	r8, r31
 d54:	9f 0a       	sbc	r9, r31
 d56:	af 0a       	sbc	r10, r31
 d58:	c7 cf       	rjmp	.-114    	; 0xce8 <__EEPROM_REGION_LENGTH__+0x4e8>
 d5a:	23 e0       	ldi	r18, 0x03	; 3
 d5c:	2f 15       	cp	r18, r15
 d5e:	10 f4       	brcc	.+4      	; 0xd64 <__EEPROM_REGION_LENGTH__+0x564>
 d60:	83 e0       	ldi	r24, 0x03	; 3
 d62:	b3 cf       	rjmp	.-154    	; 0xcca <__EEPROM_REGION_LENGTH__+0x4ca>
 d64:	f1 2c       	mov	r15, r1
 d66:	b6 cf       	rjmp	.-148    	; 0xcd4 <__EEPROM_REGION_LENGTH__+0x4d4>
 d68:	64 96       	adiw	r28, 0x14	; 20
 d6a:	e2 e1       	ldi	r30, 0x12	; 18
 d6c:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <__epilogue_restores__>

Disassembly of section .text.libgcc:

00004614 <__tablejump2__>:
    4614:	ee 0f       	add	r30, r30
    4616:	ff 1f       	adc	r31, r31
    4618:	05 90       	lpm	r0, Z+
    461a:	f4 91       	lpm	r31, Z
    461c:	e0 2d       	mov	r30, r0
    461e:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

000042a8 <__umulhisi3>:
    42a8:	a2 9f       	mul	r26, r18
    42aa:	b0 01       	movw	r22, r0
    42ac:	b3 9f       	mul	r27, r19
    42ae:	c0 01       	movw	r24, r0
    42b0:	a3 9f       	mul	r26, r19
    42b2:	70 0d       	add	r23, r0
    42b4:	81 1d       	adc	r24, r1
    42b6:	11 24       	eor	r1, r1
    42b8:	91 1d       	adc	r25, r1
    42ba:	b2 9f       	mul	r27, r18
    42bc:	70 0d       	add	r23, r0
    42be:	81 1d       	adc	r24, r1
    42c0:	11 24       	eor	r1, r1
    42c2:	91 1d       	adc	r25, r1
    42c4:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00003d6a <__prologue_saves__>:
    3d6a:	2f 92       	push	r2
    3d6c:	3f 92       	push	r3
    3d6e:	4f 92       	push	r4
    3d70:	5f 92       	push	r5
    3d72:	6f 92       	push	r6
    3d74:	7f 92       	push	r7
    3d76:	8f 92       	push	r8
    3d78:	9f 92       	push	r9
    3d7a:	af 92       	push	r10
    3d7c:	bf 92       	push	r11
    3d7e:	cf 92       	push	r12
    3d80:	df 92       	push	r13
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    3d92:	ca 1b       	sub	r28, r26
    3d94:	db 0b       	sbc	r29, r27
    3d96:	0f b6       	in	r0, 0x3f	; 63
    3d98:	f8 94       	cli
    3d9a:	de bf       	out	0x3e, r29	; 62
    3d9c:	0f be       	out	0x3f, r0	; 63
    3d9e:	cd bf       	out	0x3d, r28	; 61
    3da0:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00003dd8 <__epilogue_restores__>:
    3dd8:	2a 88       	ldd	r2, Y+18	; 0x12
    3dda:	39 88       	ldd	r3, Y+17	; 0x11
    3ddc:	48 88       	ldd	r4, Y+16	; 0x10
    3dde:	5f 84       	ldd	r5, Y+15	; 0x0f
    3de0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3de2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3de4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3de6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3de8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3dea:	b9 84       	ldd	r11, Y+9	; 0x09
    3dec:	c8 84       	ldd	r12, Y+8	; 0x08
    3dee:	df 80       	ldd	r13, Y+7	; 0x07
    3df0:	ee 80       	ldd	r14, Y+6	; 0x06
    3df2:	fd 80       	ldd	r15, Y+5	; 0x05
    3df4:	0c 81       	ldd	r16, Y+4	; 0x04
    3df6:	1b 81       	ldd	r17, Y+3	; 0x03
    3df8:	aa 81       	ldd	r26, Y+2	; 0x02
    3dfa:	b9 81       	ldd	r27, Y+1	; 0x01
    3dfc:	ce 0f       	add	r28, r30
    3dfe:	d1 1d       	adc	r29, r1
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	f8 94       	cli
    3e04:	de bf       	out	0x3e, r29	; 62
    3e06:	0f be       	out	0x3f, r0	; 63
    3e08:	cd bf       	out	0x3d, r28	; 61
    3e0a:	ed 01       	movw	r28, r26
    3e0c:	08 95       	ret

Disassembly of section .text.avrlibc:

00004696 <atoi>:
    4696:	0e 94 c5 22 	call	0x458a	; 0x458a <atol>
    469a:	cb 01       	movw	r24, r22
    469c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000458a <atol>:
    458a:	2a e0       	ldi	r18, 0x0A	; 10
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	40 e0       	ldi	r20, 0x00	; 0
    4590:	50 e0       	ldi	r21, 0x00	; 0
    4592:	0e 94 b8 06 	call	0xd70	; 0xd70 <strtol>
    4596:	08 95       	ret

Disassembly of section .text.avrlibc:

00000d70 <strtol>:
     d70:	2f 92       	push	r2
     d72:	3f 92       	push	r3
     d74:	4f 92       	push	r4
     d76:	5f 92       	push	r5
     d78:	6f 92       	push	r6
     d7a:	7f 92       	push	r7
     d7c:	8f 92       	push	r8
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	00 d0       	rcall	.+0      	; 0xd92 <strtol+0x22>
     d92:	00 d0       	rcall	.+0      	; 0xd94 <strtol+0x24>
     d94:	00 d0       	rcall	.+0      	; 0xd96 <strtol+0x26>
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	3b 01       	movw	r6, r22
     d9c:	88 2e       	mov	r8, r24
     d9e:	5a 01       	movw	r10, r20
     da0:	19 01       	movw	r2, r18
     da2:	41 15       	cp	r20, r1
     da4:	51 05       	cpc	r21, r1
     da6:	21 f0       	breq	.+8      	; 0xdb0 <strtol+0x40>
     da8:	fa 01       	movw	r30, r20
     daa:	60 83       	st	Z, r22
     dac:	71 83       	std	Z+1, r23	; 0x01
     dae:	82 83       	std	Z+2, r24	; 0x02
     db0:	21 14       	cp	r2, r1
     db2:	31 04       	cpc	r3, r1
     db4:	29 f0       	breq	.+10     	; 0xdc0 <strtol+0x50>
     db6:	c1 01       	movw	r24, r2
     db8:	02 97       	sbiw	r24, 0x02	; 2
     dba:	83 97       	sbiw	r24, 0x23	; 35
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <strtol+0x50>
     dbe:	1a c1       	rjmp	.+564    	; 0xff4 <strtol+0x284>
     dc0:	e8 2c       	mov	r14, r8
     dc2:	63 01       	movw	r12, r6
     dc4:	ff ef       	ldi	r31, 0xFF	; 255
     dc6:	cf 1a       	sub	r12, r31
     dc8:	df 0a       	sbc	r13, r31
     dca:	ef 0a       	sbc	r14, r31
     dcc:	f3 01       	movw	r30, r6
     dce:	14 91       	lpm	r17, Z
     dd0:	87 fc       	sbrc	r8, 7
     dd2:	10 81       	ld	r17, Z
     dd4:	81 2f       	mov	r24, r17
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 33 22 	call	0x4466	; 0x4466 <isspace>
     ddc:	4c 2d       	mov	r20, r12
     dde:	3d 2d       	mov	r19, r13
     de0:	2e 2d       	mov	r18, r14
     de2:	89 2b       	or	r24, r25
     de4:	19 f0       	breq	.+6      	; 0xdec <strtol+0x7c>
     de6:	36 01       	movw	r6, r12
     de8:	8e 2c       	mov	r8, r14
     dea:	ea cf       	rjmp	.-44     	; 0xdc0 <strtol+0x50>
     dec:	1d 32       	cpi	r17, 0x2D	; 45
     dee:	69 f4       	brne	.+26     	; 0xe0a <strtol+0x9a>
     df0:	e8 2c       	mov	r14, r8
     df2:	63 01       	movw	r12, r6
     df4:	52 e0       	ldi	r21, 0x02	; 2
     df6:	c5 0e       	add	r12, r21
     df8:	d1 1c       	adc	r13, r1
     dfa:	e1 1c       	adc	r14, r1
     dfc:	e4 2f       	mov	r30, r20
     dfe:	f3 2f       	mov	r31, r19
     e00:	14 91       	lpm	r17, Z
     e02:	27 fd       	sbrc	r18, 7
     e04:	10 81       	ld	r17, Z
     e06:	01 e0       	ldi	r16, 0x01	; 1
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <strtol+0xb6>
     e0a:	1b 32       	cpi	r17, 0x2B	; 43
     e0c:	59 f4       	brne	.+22     	; 0xe24 <strtol+0xb4>
     e0e:	e8 2c       	mov	r14, r8
     e10:	63 01       	movw	r12, r6
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	c8 0e       	add	r12, r24
     e16:	d1 1c       	adc	r13, r1
     e18:	e1 1c       	adc	r14, r1
     e1a:	e4 2f       	mov	r30, r20
     e1c:	f3 2f       	mov	r31, r19
     e1e:	14 91       	lpm	r17, Z
     e20:	27 fd       	sbrc	r18, 7
     e22:	10 81       	ld	r17, Z
     e24:	00 e0       	ldi	r16, 0x00	; 0
     e26:	21 14       	cp	r2, r1
     e28:	31 04       	cpc	r3, r1
     e2a:	09 f1       	breq	.+66     	; 0xe6e <strtol+0xfe>
     e2c:	90 e1       	ldi	r25, 0x10	; 16
     e2e:	29 16       	cp	r2, r25
     e30:	31 04       	cpc	r3, r1
     e32:	29 f4       	brne	.+10     	; 0xe3e <strtol+0xce>
     e34:	3f c0       	rjmp	.+126    	; 0xeb4 <strtol+0x144>
     e36:	10 e3       	ldi	r17, 0x30	; 48
     e38:	21 14       	cp	r2, r1
     e3a:	31 04       	cpc	r3, r1
     e3c:	21 f1       	breq	.+72     	; 0xe86 <strtol+0x116>
     e3e:	f8 e0       	ldi	r31, 0x08	; 8
     e40:	2f 16       	cp	r2, r31
     e42:	31 04       	cpc	r3, r1
     e44:	01 f1       	breq	.+64     	; 0xe86 <strtol+0x116>
     e46:	54 f4       	brge	.+20     	; 0xe5c <strtol+0xec>
     e48:	32 e0       	ldi	r19, 0x02	; 2
     e4a:	23 16       	cp	r2, r19
     e4c:	31 04       	cpc	r3, r1
     e4e:	21 f5       	brne	.+72     	; 0xe98 <strtol+0x128>
     e50:	41 2c       	mov	r4, r1
     e52:	51 2c       	mov	r5, r1
     e54:	61 2c       	mov	r6, r1
     e56:	50 e4       	ldi	r21, 0x40	; 64
     e58:	75 2e       	mov	r7, r21
     e5a:	4b c0       	rjmp	.+150    	; 0xef2 <strtol+0x182>
     e5c:	4a e0       	ldi	r20, 0x0A	; 10
     e5e:	24 16       	cp	r2, r20
     e60:	31 04       	cpc	r3, r1
     e62:	39 f0       	breq	.+14     	; 0xe72 <strtol+0x102>
     e64:	50 e1       	ldi	r21, 0x10	; 16
     e66:	25 16       	cp	r2, r21
     e68:	31 04       	cpc	r3, r1
     e6a:	b1 f4       	brne	.+44     	; 0xe98 <strtol+0x128>
     e6c:	3d c0       	rjmp	.+122    	; 0xee8 <strtol+0x178>
     e6e:	10 33       	cpi	r17, 0x30	; 48
     e70:	19 f1       	breq	.+70     	; 0xeb8 <strtol+0x148>
     e72:	3a e0       	ldi	r19, 0x0A	; 10
     e74:	23 2e       	mov	r2, r19
     e76:	31 2c       	mov	r3, r1
     e78:	4c ec       	ldi	r20, 0xCC	; 204
     e7a:	44 2e       	mov	r4, r20
     e7c:	54 2c       	mov	r5, r4
     e7e:	64 2c       	mov	r6, r4
     e80:	4c e0       	ldi	r20, 0x0C	; 12
     e82:	74 2e       	mov	r7, r20
     e84:	36 c0       	rjmp	.+108    	; 0xef2 <strtol+0x182>
     e86:	98 e0       	ldi	r25, 0x08	; 8
     e88:	29 2e       	mov	r2, r25
     e8a:	31 2c       	mov	r3, r1
     e8c:	41 2c       	mov	r4, r1
     e8e:	51 2c       	mov	r5, r1
     e90:	61 2c       	mov	r6, r1
     e92:	20 e1       	ldi	r18, 0x10	; 16
     e94:	72 2e       	mov	r7, r18
     e96:	2d c0       	rjmp	.+90     	; 0xef2 <strtol+0x182>
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e8       	ldi	r25, 0x80	; 128
     ea0:	91 01       	movw	r18, r2
     ea2:	03 2c       	mov	r0, r3
     ea4:	00 0c       	add	r0, r0
     ea6:	44 0b       	sbc	r20, r20
     ea8:	55 0b       	sbc	r21, r21
     eaa:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <__udivmodsi4>
     eae:	29 01       	movw	r4, r18
     eb0:	3a 01       	movw	r6, r20
     eb2:	1f c0       	rjmp	.+62     	; 0xef2 <strtol+0x182>
     eb4:	10 33       	cpi	r17, 0x30	; 48
     eb6:	c1 f4       	brne	.+48     	; 0xee8 <strtol+0x178>
     eb8:	f6 01       	movw	r30, r12
     eba:	84 91       	lpm	r24, Z
     ebc:	e7 fc       	sbrc	r14, 7
     ebe:	80 81       	ld	r24, Z
     ec0:	8f 7d       	andi	r24, 0xDF	; 223
     ec2:	88 35       	cpi	r24, 0x58	; 88
     ec4:	09 f0       	breq	.+2      	; 0xec8 <strtol+0x158>
     ec6:	b7 cf       	rjmp	.-146    	; 0xe36 <strtol+0xc6>
     ec8:	ae 2d       	mov	r26, r14
     eca:	c6 01       	movw	r24, r12
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	a1 1d       	adc	r26, r1
     ed0:	fc 01       	movw	r30, r24
     ed2:	14 91       	lpm	r17, Z
     ed4:	a7 fd       	sbrc	r26, 7
     ed6:	10 81       	ld	r17, Z
     ed8:	e2 e0       	ldi	r30, 0x02	; 2
     eda:	ce 0e       	add	r12, r30
     edc:	d1 1c       	adc	r13, r1
     ede:	e1 1c       	adc	r14, r1
     ee0:	02 60       	ori	r16, 0x02	; 2
     ee2:	60 e1       	ldi	r22, 0x10	; 16
     ee4:	26 2e       	mov	r2, r22
     ee6:	31 2c       	mov	r3, r1
     ee8:	41 2c       	mov	r4, r1
     eea:	51 2c       	mov	r5, r1
     eec:	61 2c       	mov	r6, r1
     eee:	88 e0       	ldi	r24, 0x08	; 8
     ef0:	78 2e       	mov	r7, r24
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	cb 01       	movw	r24, r22
     efa:	91 01       	movw	r18, r2
     efc:	03 2c       	mov	r0, r3
     efe:	00 0c       	add	r0, r0
     f00:	44 0b       	sbc	r20, r20
     f02:	55 0b       	sbc	r21, r21
     f04:	29 83       	std	Y+1, r18	; 0x01
     f06:	3a 83       	std	Y+2, r19	; 0x02
     f08:	4b 83       	std	Y+3, r20	; 0x03
     f0a:	5c 83       	std	Y+4, r21	; 0x04
     f0c:	e0 ed       	ldi	r30, 0xD0	; 208
     f0e:	e1 0f       	add	r30, r17
     f10:	ea 30       	cpi	r30, 0x0A	; 10
     f12:	60 f0       	brcs	.+24     	; 0xf2c <strtol+0x1bc>
     f14:	2f eb       	ldi	r18, 0xBF	; 191
     f16:	21 0f       	add	r18, r17
     f18:	2a 31       	cpi	r18, 0x1A	; 26
     f1a:	10 f4       	brcc	.+4      	; 0xf20 <strtol+0x1b0>
     f1c:	e9 ec       	ldi	r30, 0xC9	; 201
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <strtol+0x1ba>
     f20:	2f e9       	ldi	r18, 0x9F	; 159
     f22:	21 0f       	add	r18, r17
     f24:	2a 31       	cpi	r18, 0x1A	; 26
     f26:	50 f5       	brcc	.+84     	; 0xf7c <strtol+0x20c>
     f28:	e9 ea       	ldi	r30, 0xA9	; 169
     f2a:	e1 0f       	add	r30, r17
     f2c:	2e 2f       	mov	r18, r30
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	22 15       	cp	r18, r2
     f32:	33 05       	cpc	r19, r3
     f34:	1c f5       	brge	.+70     	; 0xf7c <strtol+0x20c>
     f36:	a7 fd       	sbrc	r26, 7
     f38:	18 c0       	rjmp	.+48     	; 0xf6a <strtol+0x1fa>
     f3a:	46 16       	cp	r4, r22
     f3c:	57 06       	cpc	r5, r23
     f3e:	68 06       	cpc	r6, r24
     f40:	79 06       	cpc	r7, r25
     f42:	80 f0       	brcs	.+32     	; 0xf64 <strtol+0x1f4>
     f44:	29 81       	ldd	r18, Y+1	; 0x01
     f46:	3a 81       	ldd	r19, Y+2	; 0x02
     f48:	4b 81       	ldd	r20, Y+3	; 0x03
     f4a:	5c 81       	ldd	r21, Y+4	; 0x04
     f4c:	0e 94 17 21 	call	0x422e	; 0x422e <__mulsi3>
     f50:	6e 0f       	add	r22, r30
     f52:	71 1d       	adc	r23, r1
     f54:	81 1d       	adc	r24, r1
     f56:	91 1d       	adc	r25, r1
     f58:	61 30       	cpi	r22, 0x01	; 1
     f5a:	71 05       	cpc	r23, r1
     f5c:	81 05       	cpc	r24, r1
     f5e:	30 e8       	ldi	r19, 0x80	; 128
     f60:	93 07       	cpc	r25, r19
     f62:	10 f0       	brcs	.+4      	; 0xf68 <strtol+0x1f8>
     f64:	af ef       	ldi	r26, 0xFF	; 255
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <strtol+0x1fa>
     f68:	a1 e0       	ldi	r26, 0x01	; 1
     f6a:	f6 01       	movw	r30, r12
     f6c:	14 91       	lpm	r17, Z
     f6e:	e7 fc       	sbrc	r14, 7
     f70:	10 81       	ld	r17, Z
     f72:	4f ef       	ldi	r20, 0xFF	; 255
     f74:	c4 1a       	sub	r12, r20
     f76:	d4 0a       	sbc	r13, r20
     f78:	e4 0a       	sbc	r14, r20
     f7a:	c8 cf       	rjmp	.-112    	; 0xf0c <strtol+0x19c>
     f7c:	20 2f       	mov	r18, r16
     f7e:	21 70       	andi	r18, 0x01	; 1
     f80:	a1 14       	cp	r10, r1
     f82:	b1 04       	cpc	r11, r1
     f84:	b1 f0       	breq	.+44     	; 0xfb2 <strtol+0x242>
     f86:	aa 23       	and	r26, r26
     f88:	49 f0       	breq	.+18     	; 0xf9c <strtol+0x22c>
     f8a:	51 e0       	ldi	r21, 0x01	; 1
     f8c:	c5 1a       	sub	r12, r21
     f8e:	d1 08       	sbc	r13, r1
     f90:	e1 08       	sbc	r14, r1
     f92:	f5 01       	movw	r30, r10
     f94:	c0 82       	st	Z, r12
     f96:	d1 82       	std	Z+1, r13	; 0x01
     f98:	e2 82       	std	Z+2, r14	; 0x02
     f9a:	0b c0       	rjmp	.+22     	; 0xfb2 <strtol+0x242>
     f9c:	01 ff       	sbrs	r16, 1
     f9e:	1d c0       	rjmp	.+58     	; 0xfda <strtol+0x26a>
     fa0:	f2 e0       	ldi	r31, 0x02	; 2
     fa2:	cf 1a       	sub	r12, r31
     fa4:	d1 08       	sbc	r13, r1
     fa6:	e1 08       	sbc	r14, r1
     fa8:	f5 01       	movw	r30, r10
     faa:	c0 82       	st	Z, r12
     fac:	d1 82       	std	Z+1, r13	; 0x01
     fae:	e2 82       	std	Z+2, r14	; 0x02
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <strtol+0x26a>
     fb2:	a7 ff       	sbrs	r26, 7
     fb4:	12 c0       	rjmp	.+36     	; 0xfda <strtol+0x26a>
     fb6:	22 23       	and	r18, r18
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <strtol+0x254>
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e8       	ldi	r25, 0x80	; 128
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <strtol+0x25c>
     fc4:	6f ef       	ldi	r22, 0xFF	; 255
     fc6:	7f ef       	ldi	r23, 0xFF	; 255
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	9f e7       	ldi	r25, 0x7F	; 127
     fcc:	22 e2       	ldi	r18, 0x22	; 34
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	30 93 b7 04 	sts	0x04B7, r19	; 0x8004b7 <errno+0x1>
     fd4:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <errno>
     fd8:	09 c0       	rjmp	.+18     	; 0xfec <strtol+0x27c>
     fda:	22 23       	and	r18, r18
     fdc:	81 f0       	breq	.+32     	; 0xffe <strtol+0x28e>
     fde:	90 95       	com	r25
     fe0:	80 95       	com	r24
     fe2:	70 95       	com	r23
     fe4:	61 95       	neg	r22
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	8f 4f       	sbci	r24, 0xFF	; 255
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	46 2f       	mov	r20, r22
     fee:	37 2f       	mov	r19, r23
     ff0:	28 2f       	mov	r18, r24
     ff2:	12 c0       	rjmp	.+36     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
     ffe:	97 ff       	sbrs	r25, 7
    1000:	f5 cf       	rjmp	.-22     	; 0xfec <strtol+0x27c>
    1002:	82 e2       	ldi	r24, 0x22	; 34
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <errno+0x1>
    100a:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <errno>
    100e:	6f ef       	ldi	r22, 0xFF	; 255
    1010:	7f ef       	ldi	r23, 0xFF	; 255
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	9f e7       	ldi	r25, 0x7F	; 127
    1016:	ea cf       	rjmp	.-44     	; 0xfec <strtol+0x27c>
    1018:	64 2f       	mov	r22, r20
    101a:	73 2f       	mov	r23, r19
    101c:	82 2f       	mov	r24, r18
    101e:	26 96       	adiw	r28, 0x06	; 6
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	bf 90       	pop	r11
    103a:	af 90       	pop	r10
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	6f 90       	pop	r6
    1042:	5f 90       	pop	r5
    1044:	4f 90       	pop	r4
    1046:	3f 90       	pop	r3
    1048:	2f 90       	pop	r2
    104a:	08 95       	ret

Disassembly of section .text.avrlibc:

000014ee <__ftoa_engine>:
    14ee:	28 30       	cpi	r18, 0x08	; 8
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <__ftoa_engine+0x6>
    14f2:	27 e0       	ldi	r18, 0x07	; 7
    14f4:	33 27       	eor	r19, r19
    14f6:	da 01       	movw	r26, r20
    14f8:	99 0f       	add	r25, r25
    14fa:	31 1d       	adc	r19, r1
    14fc:	87 fd       	sbrc	r24, 7
    14fe:	91 60       	ori	r25, 0x01	; 1
    1500:	00 96       	adiw	r24, 0x00	; 0
    1502:	61 05       	cpc	r22, r1
    1504:	71 05       	cpc	r23, r1
    1506:	39 f4       	brne	.+14     	; 0x1516 <__ftoa_engine+0x28>
    1508:	32 60       	ori	r19, 0x02	; 2
    150a:	2e 5f       	subi	r18, 0xFE	; 254
    150c:	3d 93       	st	X+, r19
    150e:	30 e3       	ldi	r19, 0x30	; 48
    1510:	2a 95       	dec	r18
    1512:	e1 f7       	brne	.-8      	; 0x150c <__ftoa_engine+0x1e>
    1514:	08 95       	ret
    1516:	9f 3f       	cpi	r25, 0xFF	; 255
    1518:	30 f0       	brcs	.+12     	; 0x1526 <__ftoa_engine+0x38>
    151a:	80 38       	cpi	r24, 0x80	; 128
    151c:	71 05       	cpc	r23, r1
    151e:	61 05       	cpc	r22, r1
    1520:	09 f0       	breq	.+2      	; 0x1524 <__ftoa_engine+0x36>
    1522:	3c 5f       	subi	r19, 0xFC	; 252
    1524:	3c 5f       	subi	r19, 0xFC	; 252
    1526:	3d 93       	st	X+, r19
    1528:	91 30       	cpi	r25, 0x01	; 1
    152a:	08 f0       	brcs	.+2      	; 0x152e <__ftoa_engine+0x40>
    152c:	80 68       	ori	r24, 0x80	; 128
    152e:	91 1d       	adc	r25, r1
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	1f 93       	push	r17
    1536:	0f 93       	push	r16
    1538:	ff 92       	push	r15
    153a:	ef 92       	push	r14
    153c:	19 2f       	mov	r17, r25
    153e:	98 7f       	andi	r25, 0xF8	; 248
    1540:	96 95       	lsr	r25
    1542:	e9 2f       	mov	r30, r25
    1544:	96 95       	lsr	r25
    1546:	96 95       	lsr	r25
    1548:	e9 0f       	add	r30, r25
    154a:	ff 27       	eor	r31, r31
    154c:	e2 5f       	subi	r30, 0xF2	; 242
    154e:	fe 4f       	sbci	r31, 0xFE	; 254
    1550:	99 27       	eor	r25, r25
    1552:	33 27       	eor	r19, r19
    1554:	ee 24       	eor	r14, r14
    1556:	ff 24       	eor	r15, r15
    1558:	a7 01       	movw	r20, r14
    155a:	e7 01       	movw	r28, r14
    155c:	05 90       	lpm	r0, Z+
    155e:	08 94       	sec
    1560:	07 94       	ror	r0
    1562:	28 f4       	brcc	.+10     	; 0x156e <__ftoa_engine+0x80>
    1564:	36 0f       	add	r19, r22
    1566:	e7 1e       	adc	r14, r23
    1568:	f8 1e       	adc	r15, r24
    156a:	49 1f       	adc	r20, r25
    156c:	51 1d       	adc	r21, r1
    156e:	66 0f       	add	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	88 1f       	adc	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	06 94       	lsr	r0
    1578:	a1 f7       	brne	.-24     	; 0x1562 <__ftoa_engine+0x74>
    157a:	05 90       	lpm	r0, Z+
    157c:	07 94       	ror	r0
    157e:	28 f4       	brcc	.+10     	; 0x158a <__ftoa_engine+0x9c>
    1580:	e7 0e       	add	r14, r23
    1582:	f8 1e       	adc	r15, r24
    1584:	49 1f       	adc	r20, r25
    1586:	56 1f       	adc	r21, r22
    1588:	c1 1d       	adc	r28, r1
    158a:	77 0f       	add	r23, r23
    158c:	88 1f       	adc	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	66 1f       	adc	r22, r22
    1592:	06 94       	lsr	r0
    1594:	a1 f7       	brne	.-24     	; 0x157e <__ftoa_engine+0x90>
    1596:	05 90       	lpm	r0, Z+
    1598:	07 94       	ror	r0
    159a:	28 f4       	brcc	.+10     	; 0x15a6 <__ftoa_engine+0xb8>
    159c:	f8 0e       	add	r15, r24
    159e:	49 1f       	adc	r20, r25
    15a0:	56 1f       	adc	r21, r22
    15a2:	c7 1f       	adc	r28, r23
    15a4:	d1 1d       	adc	r29, r1
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	66 1f       	adc	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	06 94       	lsr	r0
    15b0:	a1 f7       	brne	.-24     	; 0x159a <__ftoa_engine+0xac>
    15b2:	05 90       	lpm	r0, Z+
    15b4:	07 94       	ror	r0
    15b6:	20 f4       	brcc	.+8      	; 0x15c0 <__ftoa_engine+0xd2>
    15b8:	49 0f       	add	r20, r25
    15ba:	56 1f       	adc	r21, r22
    15bc:	c7 1f       	adc	r28, r23
    15be:	d8 1f       	adc	r29, r24
    15c0:	99 0f       	add	r25, r25
    15c2:	66 1f       	adc	r22, r22
    15c4:	77 1f       	adc	r23, r23
    15c6:	88 1f       	adc	r24, r24
    15c8:	06 94       	lsr	r0
    15ca:	a9 f7       	brne	.-22     	; 0x15b6 <__ftoa_engine+0xc8>
    15cc:	84 91       	lpm	r24, Z
    15ce:	10 95       	com	r17
    15d0:	17 70       	andi	r17, 0x07	; 7
    15d2:	41 f0       	breq	.+16     	; 0x15e4 <__ftoa_engine+0xf6>
    15d4:	d6 95       	lsr	r29
    15d6:	c7 95       	ror	r28
    15d8:	57 95       	ror	r21
    15da:	47 95       	ror	r20
    15dc:	f7 94       	ror	r15
    15de:	e7 94       	ror	r14
    15e0:	1a 95       	dec	r17
    15e2:	c1 f7       	brne	.-16     	; 0x15d4 <__ftoa_engine+0xe6>
    15e4:	e4 eb       	ldi	r30, 0xB4	; 180
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	68 94       	set
    15ea:	15 90       	lpm	r1, Z+
    15ec:	15 91       	lpm	r17, Z+
    15ee:	35 91       	lpm	r19, Z+
    15f0:	65 91       	lpm	r22, Z+
    15f2:	95 91       	lpm	r25, Z+
    15f4:	05 90       	lpm	r0, Z+
    15f6:	7f e2       	ldi	r23, 0x2F	; 47
    15f8:	73 95       	inc	r23
    15fa:	e1 18       	sub	r14, r1
    15fc:	f1 0a       	sbc	r15, r17
    15fe:	43 0b       	sbc	r20, r19
    1600:	56 0b       	sbc	r21, r22
    1602:	c9 0b       	sbc	r28, r25
    1604:	d0 09       	sbc	r29, r0
    1606:	c0 f7       	brcc	.-16     	; 0x15f8 <__ftoa_engine+0x10a>
    1608:	e1 0c       	add	r14, r1
    160a:	f1 1e       	adc	r15, r17
    160c:	43 1f       	adc	r20, r19
    160e:	56 1f       	adc	r21, r22
    1610:	c9 1f       	adc	r28, r25
    1612:	d0 1d       	adc	r29, r0
    1614:	7e f4       	brtc	.+30     	; 0x1634 <__ftoa_engine+0x146>
    1616:	70 33       	cpi	r23, 0x30	; 48
    1618:	11 f4       	brne	.+4      	; 0x161e <__ftoa_engine+0x130>
    161a:	8a 95       	dec	r24
    161c:	e6 cf       	rjmp	.-52     	; 0x15ea <__ftoa_engine+0xfc>
    161e:	e8 94       	clt
    1620:	01 50       	subi	r16, 0x01	; 1
    1622:	30 f0       	brcs	.+12     	; 0x1630 <__ftoa_engine+0x142>
    1624:	08 0f       	add	r16, r24
    1626:	0a f4       	brpl	.+2      	; 0x162a <__ftoa_engine+0x13c>
    1628:	00 27       	eor	r16, r16
    162a:	02 17       	cp	r16, r18
    162c:	08 f4       	brcc	.+2      	; 0x1630 <__ftoa_engine+0x142>
    162e:	20 2f       	mov	r18, r16
    1630:	23 95       	inc	r18
    1632:	02 2f       	mov	r16, r18
    1634:	7a 33       	cpi	r23, 0x3A	; 58
    1636:	28 f0       	brcs	.+10     	; 0x1642 <__ftoa_engine+0x154>
    1638:	79 e3       	ldi	r23, 0x39	; 57
    163a:	7d 93       	st	X+, r23
    163c:	2a 95       	dec	r18
    163e:	e9 f7       	brne	.-6      	; 0x163a <__ftoa_engine+0x14c>
    1640:	10 c0       	rjmp	.+32     	; 0x1662 <__ftoa_engine+0x174>
    1642:	7d 93       	st	X+, r23
    1644:	2a 95       	dec	r18
    1646:	89 f6       	brne	.-94     	; 0x15ea <__ftoa_engine+0xfc>
    1648:	06 94       	lsr	r0
    164a:	97 95       	ror	r25
    164c:	67 95       	ror	r22
    164e:	37 95       	ror	r19
    1650:	17 95       	ror	r17
    1652:	17 94       	ror	r1
    1654:	e1 18       	sub	r14, r1
    1656:	f1 0a       	sbc	r15, r17
    1658:	43 0b       	sbc	r20, r19
    165a:	56 0b       	sbc	r21, r22
    165c:	c9 0b       	sbc	r28, r25
    165e:	d0 09       	sbc	r29, r0
    1660:	98 f0       	brcs	.+38     	; 0x1688 <__ftoa_engine+0x19a>
    1662:	23 95       	inc	r18
    1664:	7e 91       	ld	r23, -X
    1666:	73 95       	inc	r23
    1668:	7a 33       	cpi	r23, 0x3A	; 58
    166a:	08 f0       	brcs	.+2      	; 0x166e <__ftoa_engine+0x180>
    166c:	70 e3       	ldi	r23, 0x30	; 48
    166e:	7c 93       	st	X, r23
    1670:	20 13       	cpse	r18, r16
    1672:	b8 f7       	brcc	.-18     	; 0x1662 <__ftoa_engine+0x174>
    1674:	7e 91       	ld	r23, -X
    1676:	70 61       	ori	r23, 0x10	; 16
    1678:	7d 93       	st	X+, r23
    167a:	30 f0       	brcs	.+12     	; 0x1688 <__ftoa_engine+0x19a>
    167c:	83 95       	inc	r24
    167e:	71 e3       	ldi	r23, 0x31	; 49
    1680:	7d 93       	st	X+, r23
    1682:	70 e3       	ldi	r23, 0x30	; 48
    1684:	2a 95       	dec	r18
    1686:	e1 f7       	brne	.-8      	; 0x1680 <__ftoa_engine+0x192>
    1688:	11 24       	eor	r1, r1
    168a:	ef 90       	pop	r14
    168c:	ff 90       	pop	r15
    168e:	0f 91       	pop	r16
    1690:	1f 91       	pop	r17
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	99 27       	eor	r25, r25
    1698:	87 fd       	sbrc	r24, 7
    169a:	90 95       	com	r25
    169c:	08 95       	ret

Disassembly of section .text.avrlibc:

00004466 <isspace>:
    4466:	91 11       	cpse	r25, r1
    4468:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__ctype_isfalse>
    446c:	80 32       	cpi	r24, 0x20	; 32
    446e:	19 f0       	breq	.+6      	; 0x4476 <isspace+0x10>
    4470:	89 50       	subi	r24, 0x09	; 9
    4472:	85 50       	subi	r24, 0x05	; 5
    4474:	c8 f7       	brcc	.-14     	; 0x4468 <isspace+0x2>
    4476:	08 95       	ret

Disassembly of section .text.avrlibc:

00003f0e <memcpy>:
    3f0e:	cf 92       	push	r12
    3f10:	df 92       	push	r13
    3f12:	ef 92       	push	r14
    3f14:	dc 01       	movw	r26, r24
    3f16:	6a 01       	movw	r12, r20
    3f18:	e6 2e       	mov	r14, r22
    3f1a:	28 0f       	add	r18, r24
    3f1c:	39 1f       	adc	r19, r25
    3f1e:	a2 17       	cp	r26, r18
    3f20:	b3 07       	cpc	r27, r19
    3f22:	51 f0       	breq	.+20     	; 0x3f38 <memcpy+0x2a>
    3f24:	f6 01       	movw	r30, r12
    3f26:	44 91       	lpm	r20, Z
    3f28:	e7 fc       	sbrc	r14, 7
    3f2a:	40 81       	ld	r20, Z
    3f2c:	4d 93       	st	X+, r20
    3f2e:	4f ef       	ldi	r20, 0xFF	; 255
    3f30:	c4 1a       	sub	r12, r20
    3f32:	d4 0a       	sbc	r13, r20
    3f34:	e4 0a       	sbc	r14, r20
    3f36:	f3 cf       	rjmp	.-26     	; 0x3f1e <memcpy+0x10>
    3f38:	ef 90       	pop	r14
    3f3a:	df 90       	pop	r13
    3f3c:	cf 90       	pop	r12
    3f3e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000408c <strcat>:
    408c:	9a 01       	movw	r18, r20
    408e:	46 2f       	mov	r20, r22
    4090:	dc 01       	movw	r26, r24
    4092:	bd 01       	movw	r22, r26
    4094:	6f 5f       	subi	r22, 0xFF	; 255
    4096:	7f 4f       	sbci	r23, 0xFF	; 255
    4098:	5c 91       	ld	r21, X
    409a:	55 23       	and	r21, r21
    409c:	11 f0       	breq	.+4      	; 0x40a2 <strcat+0x16>
    409e:	db 01       	movw	r26, r22
    40a0:	f8 cf       	rjmp	.-16     	; 0x4092 <strcat+0x6>
    40a2:	f9 01       	movw	r30, r18
    40a4:	54 91       	lpm	r21, Z
    40a6:	47 fd       	sbrc	r20, 7
    40a8:	50 81       	ld	r21, Z
    40aa:	5d 93       	st	X+, r21
    40ac:	55 23       	and	r21, r21
    40ae:	21 f0       	breq	.+8      	; 0x40b8 <strcat+0x2c>
    40b0:	2f 5f       	subi	r18, 0xFF	; 255
    40b2:	3f 4f       	sbci	r19, 0xFF	; 255
    40b4:	4f 4f       	sbci	r20, 0xFF	; 255
    40b6:	f5 cf       	rjmp	.-22     	; 0x40a2 <strcat+0x16>
    40b8:	08 95       	ret

Disassembly of section .text.avrlibc:

00003b90 <strcmp>:
    3b90:	cf 92       	push	r12
    3b92:	df 92       	push	r13
    3b94:	ef 92       	push	r14
    3b96:	6b 01       	movw	r12, r22
    3b98:	e8 2e       	mov	r14, r24
    3b9a:	f6 01       	movw	r30, r12
    3b9c:	84 91       	lpm	r24, Z
    3b9e:	e7 fc       	sbrc	r14, 7
    3ba0:	80 81       	ld	r24, Z
    3ba2:	f9 01       	movw	r30, r18
    3ba4:	54 91       	lpm	r21, Z
    3ba6:	47 fd       	sbrc	r20, 7
    3ba8:	50 81       	ld	r21, Z
    3baa:	85 13       	cpse	r24, r21
    3bac:	0b c0       	rjmp	.+22     	; 0x3bc4 <strcmp+0x34>
    3bae:	88 23       	and	r24, r24
    3bb0:	41 f0       	breq	.+16     	; 0x3bc2 <strcmp+0x32>
    3bb2:	8f ef       	ldi	r24, 0xFF	; 255
    3bb4:	c8 1a       	sub	r12, r24
    3bb6:	d8 0a       	sbc	r13, r24
    3bb8:	e8 0a       	sbc	r14, r24
    3bba:	2f 5f       	subi	r18, 0xFF	; 255
    3bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bbe:	4f 4f       	sbci	r20, 0xFF	; 255
    3bc0:	ec cf       	rjmp	.-40     	; 0x3b9a <strcmp+0xa>
    3bc2:	58 2f       	mov	r21, r24
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	85 1b       	sub	r24, r21
    3bc8:	91 09       	sbc	r25, r1
    3bca:	ef 90       	pop	r14
    3bcc:	df 90       	pop	r13
    3bce:	cf 90       	pop	r12
    3bd0:	08 95       	ret

Disassembly of section .text.avrlibc:

0000310a <strncmp>:
    310a:	cf 92       	push	r12
    310c:	df 92       	push	r13
    310e:	ef 92       	push	r14
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	6b 01       	movw	r12, r22
    3116:	e8 2e       	mov	r14, r24
    3118:	01 15       	cp	r16, r1
    311a:	11 05       	cpc	r17, r1
    311c:	19 f1       	breq	.+70     	; 0x3164 <strncmp+0x5a>
    311e:	01 50       	subi	r16, 0x01	; 1
    3120:	11 09       	sbc	r17, r1
    3122:	f6 01       	movw	r30, r12
    3124:	84 91       	lpm	r24, Z
    3126:	e7 fc       	sbrc	r14, 7
    3128:	80 81       	ld	r24, Z
    312a:	88 23       	and	r24, r24
    312c:	99 f0       	breq	.+38     	; 0x3154 <strncmp+0x4a>
    312e:	f9 01       	movw	r30, r18
    3130:	94 91       	lpm	r25, Z
    3132:	47 fd       	sbrc	r20, 7
    3134:	90 81       	ld	r25, Z
    3136:	99 23       	and	r25, r25
    3138:	69 f0       	breq	.+26     	; 0x3154 <strncmp+0x4a>
    313a:	01 15       	cp	r16, r1
    313c:	11 05       	cpc	r17, r1
    313e:	51 f0       	breq	.+20     	; 0x3154 <strncmp+0x4a>
    3140:	89 13       	cpse	r24, r25
    3142:	08 c0       	rjmp	.+16     	; 0x3154 <strncmp+0x4a>
    3144:	8f ef       	ldi	r24, 0xFF	; 255
    3146:	c8 1a       	sub	r12, r24
    3148:	d8 0a       	sbc	r13, r24
    314a:	e8 0a       	sbc	r14, r24
    314c:	2f 5f       	subi	r18, 0xFF	; 255
    314e:	3f 4f       	sbci	r19, 0xFF	; 255
    3150:	4f 4f       	sbci	r20, 0xFF	; 255
    3152:	e5 cf       	rjmp	.-54     	; 0x311e <strncmp+0x14>
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	f9 01       	movw	r30, r18
    3158:	24 91       	lpm	r18, Z
    315a:	47 fd       	sbrc	r20, 7
    315c:	20 81       	ld	r18, Z
    315e:	82 1b       	sub	r24, r18
    3160:	91 09       	sbc	r25, r1
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <strncmp+0x5e>
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	1f 91       	pop	r17
    316a:	0f 91       	pop	r16
    316c:	ef 90       	pop	r14
    316e:	df 90       	pop	r13
    3170:	cf 90       	pop	r12
    3172:	08 95       	ret

Disassembly of section .text.avrlibc:

000040ba <strlen>:
    40ba:	cf 92       	push	r12
    40bc:	df 92       	push	r13
    40be:	ef 92       	push	r14
    40c0:	6b 01       	movw	r12, r22
    40c2:	e8 2e       	mov	r14, r24
    40c4:	a8 2f       	mov	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	fc 01       	movw	r30, r24
    40ca:	24 91       	lpm	r18, Z
    40cc:	a7 fd       	sbrc	r26, 7
    40ce:	20 81       	ld	r18, Z
    40d0:	22 23       	and	r18, r18
    40d2:	19 f0       	breq	.+6      	; 0x40da <strlen+0x20>
    40d4:	01 96       	adiw	r24, 0x01	; 1
    40d6:	a1 1d       	adc	r26, r1
    40d8:	f7 cf       	rjmp	.-18     	; 0x40c8 <strlen+0xe>
    40da:	8c 19       	sub	r24, r12
    40dc:	9d 09       	sbc	r25, r13
    40de:	ef 90       	pop	r14
    40e0:	df 90       	pop	r13
    40e2:	cf 90       	pop	r12
    40e4:	08 95       	ret

Disassembly of section .text.avrlibc:

000042c6 <strcpy>:
    42c6:	9a 01       	movw	r18, r20
    42c8:	46 2f       	mov	r20, r22
    42ca:	dc 01       	movw	r26, r24
    42cc:	f9 01       	movw	r30, r18
    42ce:	54 91       	lpm	r21, Z
    42d0:	47 fd       	sbrc	r20, 7
    42d2:	50 81       	ld	r21, Z
    42d4:	5d 93       	st	X+, r21
    42d6:	55 23       	and	r21, r21
    42d8:	21 f0       	breq	.+8      	; 0x42e2 <strcpy+0x1c>
    42da:	2f 5f       	subi	r18, 0xFF	; 255
    42dc:	3f 4f       	sbci	r19, 0xFF	; 255
    42de:	4f 4f       	sbci	r20, 0xFF	; 255
    42e0:	f5 cf       	rjmp	.-22     	; 0x42cc <strcpy+0x6>
    42e2:	08 95       	ret

Disassembly of section .text.avrlibc:

00003e0e <strnlen>:
    3e0e:	cf 92       	push	r12
    3e10:	df 92       	push	r13
    3e12:	ef 92       	push	r14
    3e14:	6b 01       	movw	r12, r22
    3e16:	e8 2e       	mov	r14, r24
    3e18:	a8 2f       	mov	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	41 15       	cp	r20, r1
    3e1e:	51 05       	cpc	r21, r1
    3e20:	31 f4       	brne	.+12     	; 0x3e2e <strnlen+0x20>
    3e22:	8c 19       	sub	r24, r12
    3e24:	9d 09       	sbc	r25, r13
    3e26:	ef 90       	pop	r14
    3e28:	df 90       	pop	r13
    3e2a:	cf 90       	pop	r12
    3e2c:	08 95       	ret
    3e2e:	fc 01       	movw	r30, r24
    3e30:	24 91       	lpm	r18, Z
    3e32:	a7 fd       	sbrc	r26, 7
    3e34:	20 81       	ld	r18, Z
    3e36:	22 23       	and	r18, r18
    3e38:	a1 f3       	breq	.-24     	; 0x3e22 <strnlen+0x14>
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	a1 1d       	adc	r26, r1
    3e3e:	41 50       	subi	r20, 0x01	; 1
    3e40:	51 09       	sbc	r21, r1
    3e42:	ec cf       	rjmp	.-40     	; 0x3e1c <strnlen+0xe>

Disassembly of section .text.avrlibc:

00002df2 <fputc>:
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	fb 01       	movw	r30, r22
    2dfc:	24 81       	ldd	r18, Z+4	; 0x04
    2dfe:	21 fd       	sbrc	r18, 1
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <fputc+0x16>
    2e02:	8f ef       	ldi	r24, 0xFF	; 255
    2e04:	9f ef       	ldi	r25, 0xFF	; 255
    2e06:	2c c0       	rjmp	.+88     	; 0x2e60 <fputc+0x6e>
    2e08:	22 ff       	sbrs	r18, 2
    2e0a:	16 c0       	rjmp	.+44     	; 0x2e38 <fputc+0x46>
    2e0c:	47 81       	ldd	r20, Z+7	; 0x07
    2e0e:	50 85       	ldd	r21, Z+8	; 0x08
    2e10:	25 81       	ldd	r18, Z+5	; 0x05
    2e12:	36 81       	ldd	r19, Z+6	; 0x06
    2e14:	42 17       	cp	r20, r18
    2e16:	53 07       	cpc	r21, r19
    2e18:	44 f4       	brge	.+16     	; 0x2e2a <fputc+0x38>
    2e1a:	a0 81       	ld	r26, Z
    2e1c:	b1 81       	ldd	r27, Z+1	; 0x01
    2e1e:	9d 01       	movw	r18, r26
    2e20:	2f 5f       	subi	r18, 0xFF	; 255
    2e22:	3f 4f       	sbci	r19, 0xFF	; 255
    2e24:	31 83       	std	Z+1, r19	; 0x01
    2e26:	20 83       	st	Z, r18
    2e28:	8c 93       	st	X, r24
    2e2a:	27 81       	ldd	r18, Z+7	; 0x07
    2e2c:	30 85       	ldd	r19, Z+8	; 0x08
    2e2e:	2f 5f       	subi	r18, 0xFF	; 255
    2e30:	3f 4f       	sbci	r19, 0xFF	; 255
    2e32:	30 87       	std	Z+8, r19	; 0x08
    2e34:	27 83       	std	Z+7, r18	; 0x07
    2e36:	14 c0       	rjmp	.+40     	; 0x2e60 <fputc+0x6e>
    2e38:	8b 01       	movw	r16, r22
    2e3a:	ec 01       	movw	r28, r24
    2e3c:	fb 01       	movw	r30, r22
    2e3e:	01 84       	ldd	r0, Z+9	; 0x09
    2e40:	f2 85       	ldd	r31, Z+10	; 0x0a
    2e42:	e0 2d       	mov	r30, r0
    2e44:	09 95       	icall
    2e46:	89 2b       	or	r24, r25
    2e48:	e1 f6       	brne	.-72     	; 0x2e02 <fputc+0x10>
    2e4a:	d8 01       	movw	r26, r16
    2e4c:	17 96       	adiw	r26, 0x07	; 7
    2e4e:	8d 91       	ld	r24, X+
    2e50:	9c 91       	ld	r25, X
    2e52:	18 97       	sbiw	r26, 0x08	; 8
    2e54:	01 96       	adiw	r24, 0x01	; 1
    2e56:	18 96       	adiw	r26, 0x08	; 8
    2e58:	9c 93       	st	X, r25
    2e5a:	8e 93       	st	-X, r24
    2e5c:	17 97       	sbiw	r26, 0x07	; 7
    2e5e:	ce 01       	movw	r24, r28
    2e60:	df 91       	pop	r29
    2e62:	cf 91       	pop	r28
    2e64:	1f 91       	pop	r17
    2e66:	0f 91       	pop	r16
    2e68:	08 95       	ret

Disassembly of section .text.avrlibc:

000039fa <sprintf>:
    39fa:	af e0       	ldi	r26, 0x0F	; 15
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	e3 e0       	ldi	r30, 0x03	; 3
    3a00:	fd e1       	ldi	r31, 0x1D	; 29
    3a02:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__prologue_saves__+0x1c>
    3a06:	0e 89       	ldd	r16, Y+22	; 0x16
    3a08:	1f 89       	ldd	r17, Y+23	; 0x17
    3a0a:	86 e0       	ldi	r24, 0x06	; 6
    3a0c:	8d 83       	std	Y+5, r24	; 0x05
    3a0e:	1a 83       	std	Y+2, r17	; 0x02
    3a10:	09 83       	std	Y+1, r16	; 0x01
    3a12:	8f ef       	ldi	r24, 0xFF	; 255
    3a14:	9f e7       	ldi	r25, 0x7F	; 127
    3a16:	9f 83       	std	Y+7, r25	; 0x07
    3a18:	8e 83       	std	Y+6, r24	; 0x06
    3a1a:	9e 01       	movw	r18, r28
    3a1c:	25 5e       	subi	r18, 0xE5	; 229
    3a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a20:	48 8d       	ldd	r20, Y+24	; 0x18
    3a22:	59 8d       	ldd	r21, Y+25	; 0x19
    3a24:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3a26:	ce 01       	movw	r24, r28
    3a28:	01 96       	adiw	r24, 0x01	; 1
    3a2a:	0e 94 16 03 	call	0x62c	; 0x62c <vfprintf>
    3a2e:	e8 85       	ldd	r30, Y+8	; 0x08
    3a30:	f9 85       	ldd	r31, Y+9	; 0x09
    3a32:	e0 0f       	add	r30, r16
    3a34:	f1 1f       	adc	r31, r17
    3a36:	10 82       	st	Z, r1
    3a38:	2f 96       	adiw	r28, 0x0f	; 15
    3a3a:	e4 e0       	ldi	r30, 0x04	; 4
    3a3c:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

0000257e <__ultoa_invert>:
    257e:	fa 01       	movw	r30, r20
    2580:	aa 27       	eor	r26, r26
    2582:	28 30       	cpi	r18, 0x08	; 8
    2584:	51 f1       	breq	.+84     	; 0x25da <__ultoa_invert+0x5c>
    2586:	20 31       	cpi	r18, 0x10	; 16
    2588:	81 f1       	breq	.+96     	; 0x25ea <__ultoa_invert+0x6c>
    258a:	e8 94       	clt
    258c:	6f 93       	push	r22
    258e:	6e 7f       	andi	r22, 0xFE	; 254
    2590:	6e 5f       	subi	r22, 0xFE	; 254
    2592:	7f 4f       	sbci	r23, 0xFF	; 255
    2594:	8f 4f       	sbci	r24, 0xFF	; 255
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	af 4f       	sbci	r26, 0xFF	; 255
    259a:	b1 e0       	ldi	r27, 0x01	; 1
    259c:	3e d0       	rcall	.+124    	; 0x261a <__ultoa_invert+0x9c>
    259e:	b4 e0       	ldi	r27, 0x04	; 4
    25a0:	3c d0       	rcall	.+120    	; 0x261a <__ultoa_invert+0x9c>
    25a2:	67 0f       	add	r22, r23
    25a4:	78 1f       	adc	r23, r24
    25a6:	89 1f       	adc	r24, r25
    25a8:	9a 1f       	adc	r25, r26
    25aa:	a1 1d       	adc	r26, r1
    25ac:	68 0f       	add	r22, r24
    25ae:	79 1f       	adc	r23, r25
    25b0:	8a 1f       	adc	r24, r26
    25b2:	91 1d       	adc	r25, r1
    25b4:	a1 1d       	adc	r26, r1
    25b6:	6a 0f       	add	r22, r26
    25b8:	71 1d       	adc	r23, r1
    25ba:	81 1d       	adc	r24, r1
    25bc:	91 1d       	adc	r25, r1
    25be:	a1 1d       	adc	r26, r1
    25c0:	20 d0       	rcall	.+64     	; 0x2602 <__ultoa_invert+0x84>
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <__ultoa_invert+0x48>
    25c4:	68 94       	set
    25c6:	3f 91       	pop	r19
    25c8:	2a e0       	ldi	r18, 0x0A	; 10
    25ca:	26 9f       	mul	r18, r22
    25cc:	11 24       	eor	r1, r1
    25ce:	30 19       	sub	r19, r0
    25d0:	30 5d       	subi	r19, 0xD0	; 208
    25d2:	31 93       	st	Z+, r19
    25d4:	de f6       	brtc	.-74     	; 0x258c <__ultoa_invert+0xe>
    25d6:	cf 01       	movw	r24, r30
    25d8:	08 95       	ret
    25da:	46 2f       	mov	r20, r22
    25dc:	47 70       	andi	r20, 0x07	; 7
    25de:	40 5d       	subi	r20, 0xD0	; 208
    25e0:	41 93       	st	Z+, r20
    25e2:	b3 e0       	ldi	r27, 0x03	; 3
    25e4:	0f d0       	rcall	.+30     	; 0x2604 <__ultoa_invert+0x86>
    25e6:	c9 f7       	brne	.-14     	; 0x25da <__ultoa_invert+0x5c>
    25e8:	f6 cf       	rjmp	.-20     	; 0x25d6 <__ultoa_invert+0x58>
    25ea:	46 2f       	mov	r20, r22
    25ec:	4f 70       	andi	r20, 0x0F	; 15
    25ee:	40 5d       	subi	r20, 0xD0	; 208
    25f0:	4a 33       	cpi	r20, 0x3A	; 58
    25f2:	18 f0       	brcs	.+6      	; 0x25fa <__ultoa_invert+0x7c>
    25f4:	49 5d       	subi	r20, 0xD9	; 217
    25f6:	31 fd       	sbrc	r19, 1
    25f8:	40 52       	subi	r20, 0x20	; 32
    25fa:	41 93       	st	Z+, r20
    25fc:	02 d0       	rcall	.+4      	; 0x2602 <__ultoa_invert+0x84>
    25fe:	a9 f7       	brne	.-22     	; 0x25ea <__ultoa_invert+0x6c>
    2600:	ea cf       	rjmp	.-44     	; 0x25d6 <__ultoa_invert+0x58>
    2602:	b4 e0       	ldi	r27, 0x04	; 4
    2604:	a6 95       	lsr	r26
    2606:	97 95       	ror	r25
    2608:	87 95       	ror	r24
    260a:	77 95       	ror	r23
    260c:	67 95       	ror	r22
    260e:	ba 95       	dec	r27
    2610:	c9 f7       	brne	.-14     	; 0x2604 <__ultoa_invert+0x86>
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	61 05       	cpc	r22, r1
    2616:	71 05       	cpc	r23, r1
    2618:	08 95       	ret
    261a:	9b 01       	movw	r18, r22
    261c:	ac 01       	movw	r20, r24
    261e:	0a 2e       	mov	r0, r26
    2620:	06 94       	lsr	r0
    2622:	57 95       	ror	r21
    2624:	47 95       	ror	r20
    2626:	37 95       	ror	r19
    2628:	27 95       	ror	r18
    262a:	ba 95       	dec	r27
    262c:	c9 f7       	brne	.-14     	; 0x2620 <__ultoa_invert+0xa2>
    262e:	62 0f       	add	r22, r18
    2630:	73 1f       	adc	r23, r19
    2632:	84 1f       	adc	r24, r20
    2634:	95 1f       	adc	r25, r21
    2636:	a0 1d       	adc	r26, r0
    2638:	08 95       	ret

Disassembly of section .text.avrlibc:

000046bc <__ctype_isfalse>:
    46bc:	99 27       	eor	r25, r25
    46be:	88 27       	eor	r24, r24

000046c0 <__ctype_istrue>:
    46c0:	08 95       	ret

Disassembly of section .text.avrlibc:

00004184 <eeprom_read_block>:
    4184:	ba 01       	movw	r22, r20
    4186:	a9 01       	movw	r20, r18
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22

0000418c <eeprom_read_blraw>:
    418c:	fc 01       	movw	r30, r24
    418e:	f9 99       	sbic	0x1f, 1	; 31
    4190:	fe cf       	rjmp	.-4      	; 0x418e <eeprom_read_blraw+0x2>
    4192:	06 c0       	rjmp	.+12     	; 0x41a0 <eeprom_read_blraw+0x14>
    4194:	f2 bd       	out	0x22, r31	; 34
    4196:	e1 bd       	out	0x21, r30	; 33
    4198:	f8 9a       	sbi	0x1f, 0	; 31
    419a:	31 96       	adiw	r30, 0x01	; 1
    419c:	00 b4       	in	r0, 0x20	; 32
    419e:	0d 92       	st	X+, r0
    41a0:	41 50       	subi	r20, 0x01	; 1
    41a2:	50 40       	sbci	r21, 0x00	; 0
    41a4:	b8 f7       	brcc	.-18     	; 0x4194 <eeprom_read_blraw+0x8>
    41a6:	08 95       	ret

Disassembly of section .text.avrlibc:

00004478 <eeprom_read_byte>:
    4478:	cb 01       	movw	r24, r22
    447a:	f9 99       	sbic	0x1f, 1	; 31
    447c:	fe cf       	rjmp	.-4      	; 0x447a <eeprom_read_byte+0x2>
    447e:	92 bd       	out	0x22, r25	; 34
    4480:	81 bd       	out	0x21, r24	; 33
    4482:	f8 9a       	sbi	0x1f, 0	; 31
    4484:	99 27       	eor	r25, r25
    4486:	80 b5       	in	r24, 0x20	; 32
    4488:	08 95       	ret

Disassembly of section .text.avrlibc:

00004598 <eeprom_read_dword>:
    4598:	cb 01       	movw	r24, r22
    459a:	a6 e1       	ldi	r26, 0x16	; 22
    459c:	b0 e0       	ldi	r27, 0x00	; 0
    459e:	44 e0       	ldi	r20, 0x04	; 4
    45a0:	50 e0       	ldi	r21, 0x00	; 0
    45a2:	0c 94 c6 20 	jmp	0x418c	; 0x418c <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000045a6 <eeprom_read_word>:
    45a6:	cb 01       	movw	r24, r22
    45a8:	a8 e1       	ldi	r26, 0x18	; 24
    45aa:	b0 e0       	ldi	r27, 0x00	; 0
    45ac:	42 e0       	ldi	r20, 0x02	; 2
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	0c 94 c6 20 	jmp	0x418c	; 0x418c <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00003a84 <eeprom_update_block>:
    3a84:	cf 92       	push	r12
    3a86:	df 92       	push	r13
    3a88:	ef 92       	push	r14
    3a8a:	21 50       	subi	r18, 0x01	; 1
    3a8c:	31 09       	sbc	r19, r1
    3a8e:	c0 f0       	brcs	.+48     	; 0x3ac0 <eeprom_update_block+0x3c>
    3a90:	6b 01       	movw	r12, r22
    3a92:	e8 2e       	mov	r14, r24
    3a94:	c2 0e       	add	r12, r18
    3a96:	d3 1e       	adc	r13, r19
    3a98:	e1 1c       	adc	r14, r1
    3a9a:	ca 01       	movw	r24, r20
    3a9c:	82 0f       	add	r24, r18
    3a9e:	93 1f       	adc	r25, r19
    3aa0:	42 2f       	mov	r20, r18
    3aa2:	73 2f       	mov	r23, r19
    3aa4:	f6 01       	movw	r30, r12
    3aa6:	5e 2d       	mov	r21, r14
    3aa8:	0e 94 2a 23 	call	0x4654	; 0x4654 <__xload_1>
    3aac:	26 2f       	mov	r18, r22
    3aae:	0e 94 d5 20 	call	0x41aa	; 0x41aa <eeprom_update_r18>
    3ab2:	31 e0       	ldi	r19, 0x01	; 1
    3ab4:	c3 1a       	sub	r12, r19
    3ab6:	d1 08       	sbc	r13, r1
    3ab8:	e1 08       	sbc	r14, r1
    3aba:	41 50       	subi	r20, 0x01	; 1
    3abc:	70 40       	sbci	r23, 0x00	; 0
    3abe:	90 f7       	brcc	.-28     	; 0x3aa4 <eeprom_update_block+0x20>
    3ac0:	ef 90       	pop	r14
    3ac2:	df 90       	pop	r13
    3ac4:	cf 90       	pop	r12
    3ac6:	08 95       	ret

Disassembly of section .text.avrlibc:

000041a8 <eeprom_update_byte>:
    41a8:	26 2f       	mov	r18, r22

000041aa <eeprom_update_r18>:
    41aa:	f9 99       	sbic	0x1f, 1	; 31
    41ac:	fe cf       	rjmp	.-4      	; 0x41aa <eeprom_update_r18>
    41ae:	92 bd       	out	0x22, r25	; 34
    41b0:	81 bd       	out	0x21, r24	; 33
    41b2:	f8 9a       	sbi	0x1f, 0	; 31
    41b4:	01 97       	sbiw	r24, 0x01	; 1
    41b6:	00 b4       	in	r0, 0x20	; 32
    41b8:	02 16       	cp	r0, r18
    41ba:	39 f0       	breq	.+14     	; 0x41ca <eeprom_update_r18+0x20>
    41bc:	1f ba       	out	0x1f, r1	; 31
    41be:	20 bd       	out	0x20, r18	; 32
    41c0:	0f b6       	in	r0, 0x3f	; 63
    41c2:	f8 94       	cli
    41c4:	fa 9a       	sbi	0x1f, 2	; 31
    41c6:	f9 9a       	sbi	0x1f, 1	; 31
    41c8:	0f be       	out	0x3f, r0	; 63
    41ca:	08 95       	ret

Disassembly of section .text.avrlibc:

0000431a <eeprom_update_dword>:
    431a:	03 96       	adiw	r24, 0x03	; 3
    431c:	27 2f       	mov	r18, r23
    431e:	0e 94 d5 20 	call	0x41aa	; 0x41aa <eeprom_update_r18>
    4322:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <eeprom_update_byte>
    4326:	25 2f       	mov	r18, r21
    4328:	0e 94 d5 20 	call	0x41aa	; 0x41aa <eeprom_update_r18>
    432c:	24 2f       	mov	r18, r20
    432e:	0c 94 d5 20 	jmp	0x41aa	; 0x41aa <eeprom_update_r18>

Disassembly of section .text.avrlibc:

00004620 <eeprom_update_word>:
    4620:	01 96       	adiw	r24, 0x01	; 1
    4622:	27 2f       	mov	r18, r23
    4624:	0e 94 d5 20 	call	0x41aa	; 0x41aa <eeprom_update_r18>
    4628:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

0000422e <__mulsi3>:
    422e:	db 01       	movw	r26, r22
    4230:	8f 93       	push	r24
    4232:	9f 93       	push	r25
    4234:	0e 94 c5 21 	call	0x438a	; 0x438a <__muluhisi3>
    4238:	bf 91       	pop	r27
    423a:	af 91       	pop	r26
    423c:	a2 9f       	mul	r26, r18
    423e:	80 0d       	add	r24, r0
    4240:	91 1d       	adc	r25, r1
    4242:	a3 9f       	mul	r26, r19
    4244:	90 0d       	add	r25, r0
    4246:	b2 9f       	mul	r27, r18
    4248:	90 0d       	add	r25, r0
    424a:	11 24       	eor	r1, r1
    424c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003ac8 <__udivmodsi4>:
    3ac8:	a1 e2       	ldi	r26, 0x21	; 33
    3aca:	1a 2e       	mov	r1, r26
    3acc:	aa 1b       	sub	r26, r26
    3ace:	bb 1b       	sub	r27, r27
    3ad0:	fd 01       	movw	r30, r26
    3ad2:	0d c0       	rjmp	.+26     	; 0x3aee <__udivmodsi4_ep>

00003ad4 <__udivmodsi4_loop>:
    3ad4:	aa 1f       	adc	r26, r26
    3ad6:	bb 1f       	adc	r27, r27
    3ad8:	ee 1f       	adc	r30, r30
    3ada:	ff 1f       	adc	r31, r31
    3adc:	a2 17       	cp	r26, r18
    3ade:	b3 07       	cpc	r27, r19
    3ae0:	e4 07       	cpc	r30, r20
    3ae2:	f5 07       	cpc	r31, r21
    3ae4:	20 f0       	brcs	.+8      	; 0x3aee <__udivmodsi4_ep>
    3ae6:	a2 1b       	sub	r26, r18
    3ae8:	b3 0b       	sbc	r27, r19
    3aea:	e4 0b       	sbc	r30, r20
    3aec:	f5 0b       	sbc	r31, r21

00003aee <__udivmodsi4_ep>:
    3aee:	66 1f       	adc	r22, r22
    3af0:	77 1f       	adc	r23, r23
    3af2:	88 1f       	adc	r24, r24
    3af4:	99 1f       	adc	r25, r25
    3af6:	1a 94       	dec	r1
    3af8:	69 f7       	brne	.-38     	; 0x3ad4 <__udivmodsi4_loop>
    3afa:	60 95       	com	r22
    3afc:	70 95       	com	r23
    3afe:	80 95       	com	r24
    3b00:	90 95       	com	r25
    3b02:	9b 01       	movw	r18, r22
    3b04:	ac 01       	movw	r20, r24
    3b06:	bd 01       	movw	r22, r26
    3b08:	cf 01       	movw	r24, r30
    3b0a:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000438a <__muluhisi3>:
    438a:	0e 94 54 21 	call	0x42a8	; 0x42a8 <__umulhisi3>
    438e:	a5 9f       	mul	r26, r21
    4390:	90 0d       	add	r25, r0
    4392:	b4 9f       	mul	r27, r20
    4394:	90 0d       	add	r25, r0
    4396:	a4 9f       	mul	r26, r20
    4398:	80 0d       	add	r24, r0
    439a:	91 1d       	adc	r25, r1
    439c:	11 24       	eor	r1, r1
    439e:	08 95       	ret

Disassembly of section .text.libgcc:

00004654 <__xload_1>:
    4654:	57 fd       	sbrc	r21, 7
    4656:	60 81       	ld	r22, Z
    4658:	57 ff       	sbrs	r21, 7
    465a:	64 91       	lpm	r22, Z
    465c:	08 95       	ret
