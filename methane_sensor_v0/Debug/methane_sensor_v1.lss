
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000073fc  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006d8  00800100  00800100  000073fc  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  000073fc  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00007457  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000c30  00000000  00000000  000074c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000133de  00000000  00000000  000080f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003559  00000000  00000000  0001b4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000712b  00000000  00000000  0001ea2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000204c  00000000  00000000  00025b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001630  00000000  00000000  00027ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007c87  00000000  00000000  000291d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a18  00000000  00000000  00030e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000072aa  000072aa  000073de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00031878  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00006f80  00006f80  000070b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00006dd2  00006dd2  00006f06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00006f8e  00006f8e  000070c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00006de6  00006de6  00006f1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00006f9c  00006f9c  000070d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00006dfa  00006dfa  00006f2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  00006faa  00006faa  000070de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  00006e0e  00006e0e  00006f42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  00006fb8  00006fb8  000070ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  00006e22  00006e22  00006f56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  000071f8  000071f8  0000732c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 0000003c  00006102  00006102  00006236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  00006e36  00006e36  00006f6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  00007200  00007200  00007334  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  00007208  00007208  0000733c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  00007210  00007210  00007344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  00006fc6  00006fc6  000070fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  00007180  00007180  000072b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000022  00006a40  00006a40  00006b74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  00007268  00007268  0000739c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  000072ae  000072ae  000073e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  00005882  00005882  000059b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800ebb  00800ebb  000073fc  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000036  000063b8  000063b8  000064ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  000070b4  000070b4  000071e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  000070c0  000070c0  000071f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  000058d0  000058d0  00005a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800ebd  00800ebd  000073fc  2**0
                  ALLOC
 43 .text.clear_callbacks 00000020  00006aea  00006aea  00006c1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.start_timer 00000008  00007218  00007218  0000734c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.stop_timer 00000006  0000726e  0000726e  000073a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_init 00000020  00006b0a  00006b0a  00006c3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_kill 0000000a  0000718a  0000718a  000072be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TC2_HAL_subscribe 00000054  000056e8  000056e8  0000581c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TC2_HAL_cancel 0000003a  000061b6  000061b6  000062ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_9 0000007c  0000493e  0000493e  00004a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .bss.cnt      00000001  00800edd  00800edd  000073fc  2**0
                  ALLOC
 52 .bss.cbCounter 00000001  00800ede  00800ede  000073fc  2**0
                  ALLOC
 53 .bss.callbacks 0000000a  00800e78  00800e78  000073fc  2**0
                  ALLOC
 54 .text.start_and_write_data 0000004c  00005a08  00005a08  00005b3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.read_and_stop 0000005a  000054d8  000054d8  0000560c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_write_data 00000014  00006e4a  00006e4a  00006f7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_write_data_stop 0000001a  00006ce8  00006ce8  00006e1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00006562  00006562  00006696  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_API_repeat_read_data_stop 00000030  0000665c  0000665c  00006790  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_init 00000012  00006eae  00006eae  00006fe2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_start 00000048  00005cb0  00005cb0  00005de4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_repeated_start 00000042  00005ffc  00005ffc  00006130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_write_byte 00000020  00006b2a  00006b2a  00006c5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_read_byte_ack 00000014  00006e5e  00006e5e  00006f92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.TWI_HAL_read_byte_nack 00000014  00006e72  00006e72  00006fa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.TWI_HAL_stop 00000010  00006f50  00006f50  00007084  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.copy_buffer 0000002e  0000680c  0000680c  00006940  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_init 0000003c  0000613e  0000613e  00006272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_send_message 0000004e  0000591e  0000591e  00005a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_send_string 0000007e  000048c0  000048c0  000049f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_message_ready 0000000e  00006fd4  00006fd4  00007108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_clear_rx_buffer 0000000a  00007194  00007194  000072c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart0_hal_read_message_as_str 00000028  000068ea  000068ea  00006a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uart0_hal_send_break 00000046  00005e18  00005e18  00005f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_22 0000006e  00004f40  00004f40  00005074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_20 00000074  00004d06  00004d06  00004e3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800edf  00800edf  000073fc  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800ee0  00800ee0  000073fc  2**0
                  ALLOC
 79 .bss.tx_buffer_cursor 00000002  00800ebf  00800ebf  000073fc  2**0
                  ALLOC
 80 .bss.tx_buffer_data_len 00000002  00800ec1  00800ec1  000073fc  2**0
                  ALLOC
 81 .text.copy_buffer 0000002e  0000683a  0000683a  0000696e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.uart1_hal_init 0000003c  0000617a  0000617a  000062ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.uart1_hal_send_string 00000096  000044c2  000044c2  000045f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.uart1_hal_message_ready 0000000e  00006fe2  00006fe2  00007116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.uart1_hal_rx_full 0000000e  00006ff0  00006ff0  00007124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.uart1_hal_clear_rx_buffer 0000000a  0000719e  0000719e  000072d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.uart1_hal_read_message_as_str 00000028  00006912  00006912  00006a46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 0000006e  00004fae  00004fae  000050e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_28 00000074  00004d7a  00004d7a  00004eae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .bss.rx_buffer_has_message 00000001  00800ee1  00800ee1  000073fc  2**0
                  ALLOC
 91 .bss.rx_buffer_data_len 00000001  00800ee2  00800ee2  000073fc  2**0
                  ALLOC
 92 .bss.rx_buffer 0000004b  00800d8b  00800d8b  000073fc  2**0
                  ALLOC
 93 .bss.tx_buffer_cursor 00000002  00800ec3  00800ec3  000073fc  2**0
                  ALLOC
 94 .bss.tx_buffer_data_len 00000002  00800ec5  00800ec5  000073fc  2**0
                  ALLOC
 95 .bss.tx_buffer 0000012c  008007d8  008007d8  000073fc  2**0
                  ALLOC
 96 .text.UI_HAL_jumper_init 0000000e  00006ffe  00006ffe  00007132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.UI_HAL_is_config_mode 0000000a  000071a8  000071a8  000072dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.main    0000003a  000061f0  000061f0  00006324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.calc_ppm_methane 00000096  00004558  00004558  0000468c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vect_ADC_heat_timeout 00000018  00006d1c  00006d1c  00006e50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.ADC_init_sampling 00000066  00005298  00005298  000053cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.ADC_deinit_sampling 00000014  00006e86  00006e86  00006fba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ADC_is_sampling_done 0000001c  00006c5c  00006c5c  00006d90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.ADC_get_value 00000056  0000563c  0000563c  00005770  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.vect_ADC_do_sample 00000046  00005e5e  00005e5e  00005f92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.ADC_start_sampling 0000000a  000071b2  000071b2  000072e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ADC_meth_sens_power_on 0000001e  00006b8a  00006b8a  00006cbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.ADC_meth_sens_power_off 00000008  00007220  00007220  00007354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.ADC_meth_sens_ready 00000012  00006ec0  00006ec0  00006ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADC_set_conf_parameters 00000042  0000603e  0000603e  00006172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.cntPowerUpTime 00000001  00800ee3  00800ee3  000073fc  2**0
                  ALLOC
112 .bss._powerUpTime 00000001  00800ee4  00800ee4  000073fc  2**0
                  ALLOC
113 .bss.cntSamples 00000002  00800ec7  00800ec7  000073fc  2**0
                  ALLOC
114 .bss._data    00000002  00800ec9  00800ec9  000073fc  2**0
                  ALLOC
115 .bss._nSamples 00000002  00800ecb  00800ecb  000073fc  2**0
                  ALLOC
116 .data.PPM_factor 00000004  00800e9f  000072b7  000073eb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
117 .data.RRL     00000004  00800ea3  000072bb  000073ef  2**0
                  CONTENTS, ALLOC, LOAD, DATA
118 .data.Vc      00000004  00800ea7  000072bf  000073f3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
119 .text.EM_has_deveui 00000016  00006d64  00006d64  00006e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_has_appeui 00000016  00006d7a  00006d7a  00006eae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_has_appkey 00000016  00006d90  00006d90  00006ec4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_set_deveui 0000003a  0000622a  0000622a  0000635e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.EM_get_deveui 00000030  0000668c  0000668c  000067c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.EM_set_appeui 0000003a  00006264  00006264  00006398  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.EM_get_appeui 00000030  000066bc  000066bc  000067f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.EM_set_appkey 0000003a  0000629e  0000629e  000063d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.EM_get_appkey 00000030  000066ec  000066ec  00006820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.EM_set_ppmfactor 0000000e  0000700c  0000700c  00007140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.EM_get_ppmfactor 0000001e  00006ba8  00006ba8  00006cdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.EM_set_RRL 0000000e  0000701a  0000701a  0000714e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.EM_get_RRL 0000001e  00006bc6  00006bc6  00006cfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.EM_set_Vcc 0000000e  00007028  00007028  0000715c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.EM_get_Vcc 0000001e  00006be4  00006be4  00006d18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.EM_set_collections 0000000e  00007036  00007036  0000716a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.EM_get_collections 00000010  00006f60  00006f60  00007094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.EM_set_heat_up_time 0000000c  000070cc  000070cc  00007200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.EM_get_heat_up_time 0000000c  000070d8  000070d8  0000720c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.EM_set_air_pump_time 0000000c  000070e4  000070e4  00007218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.EM_get_air_pump_time 0000000c  000070f0  000070f0  00007224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.EM_set_sp_interval 0000000c  000070fc  000070fc  00007230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.EM_get_sp_interval 0000000c  00007108  00007108  0000723c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.EM_set_group_id 0000000c  00007114  00007114  00007248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.EM_get_group_id 0000000c  00007120  00007120  00007254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.cb_blink 00000006  00007274  00007274  000073a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.blink   0000004c  00005a54  00005a54  00005b88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.err_code 00000038  000062d8  000062d8  0000640c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.LED_start_try_join 0000000e  00007044  00007044  00007178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.LED_stop_try_join 00000010  00006f70  00006f70  000070a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.LED_join_success 00000040  000060c2  000060c2  000061f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.LED_join_denied 00000008  00007228  00007228  0000735c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.LED_conf_err 00000008  00007230  00007230  00007364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.LED_fatal_err 00000008  00007238  00007238  0000736c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .bss.cbPointer 00000001  00800ee5  00800ee5  000073fc  2**0
                  ALLOC
154 .progmemx.data 00000058  0000093f  0000093f  00000a73  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
155 .text.parse_err 00000058  0000558c  0000558c  000056c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.JN_join_network 000002a4  00001ac0  00001ac0  00001bf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.set_block_uplink 00000018  00006d34  00006d34  00006e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.cb_block_uplink 0000001c  00006c78  00006c78  00006dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.LM_join_network 00000006  0000727a  0000727a  000073ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.LM_send_uplink 0000002c  00006868  00006868  0000699c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.LM_put_to_sleep 00000012  00006ed2  00006ed2  00007006  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.LM_wake_up 00000006  00007280  00007280  000073b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.LM_is_free 0000000a  000071bc  000071bc  000072f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.LM_reset_module 00000006  00007286  00007286  000073ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.LM_forward_msg 00000006  0000728c  0000728c  000073c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.LM_send_break 00000006  00007292  00007292  000073c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.subPointer 00000001  00800ee6  00800ee6  000073fc  2**0
                  ALLOC
168 .bss.busy     00000001  00800ee7  00800ee7  000073fc  2**0
                  ALLOC
169 .bss.cnt      00000001  00800ee8  00800ee8  000073fc  2**0
                  ALLOC
170 .progmemx.data 00000073  000008cc  000008cc  00000a00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
171 .text.tohex   0000007a  000049ba  000049ba  00004aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.attach_ending 0000001c  00006c94  00006c94  00006dc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.cmd_with_ending 00000032  00006594  00006594  000066c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.sys_sleep_cmd 0000005e  00005362  00005362  00005496  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.mac_set_parameter 0000004e  0000596c  0000596c  00005aa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.mac_set_deveui 00000048  00005cf8  00005cf8  00005e2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.mac_set_appeui 00000048  00005d40  00005d40  00005e74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.mac_set_appkey 00000048  00005d88  00005d88  00005ebc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.mac_set_ADR 00000030  0000671c  0000671c  00006850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.mac_tx_confirmed 000000aa  00004220  00004220  00004354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data 00000038  00000997  00000997  00000acb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.decode_tx_response 00000068  00005160  00005160  00005294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SU_send_uplink 000000f8  000037ba  000037ba  000038ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.cb_counter 00000014  00006e9a  00006e9a  00006fce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.SC_put_to_sleep 00000038  00006310  00006310  00006444  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .progmemx.data 00000003  000009f4  000009f4  00000b28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
187 .text.SC_wake_up 0000006e  0000501c  0000501c  00005150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .bss.eventPointer 00000001  00800ee9  00800ee9  000073fc  2**0
                  ALLOC
189 .bss.cnt      00000002  00800ecd  00800ecd  000073fc  2**0
                  ALLOC
190 .text.cb_watchdog_counter 0000000c  0000712c  0000712c  00007260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.util_set_pending_states 0000000c  00007138  00007138  0000726c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.util_set_match_case 0000000c  00007144  00007144  00007278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.util_str_begins_with 0000004a  00005c1c  00005c1c  00005d50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.util_match_message 0000005c  0000547c  0000547c  000055b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .progmemx.data 00000013  000009cf  000009cf  00000b03  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
196 .text.util_reset_module 00000046  00005ea4  00005ea4  00005fd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.util_lora_forward_msg 00000078  00004aae  00004aae  00004be2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.util_send_break 00000008  00007240  00007240  00007374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .bss.wd_cb_pointer 00000001  00800eea  00800eea  000073fc  2**0
                  ALLOC
200 .bss.wd_cnt   00000001  00800eeb  00800eeb  000073fc  2**0
                  ALLOC
201 .text.MRPP_init_group 0000001a  00006d02  00006d02  00006e36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.MRPP_add_collection_data_INT16 00000070  00004e60  00004e60  00004f94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.MRPP_is_body_package_ready 00000022  00006a62  00006a62  00006b96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.MRPP_get_ready_body_package 00000096  000045ee  000045ee  00004722  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.MRPP_set_body_sent 0000000c  00007150  00007150  00007284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.MRPP_get_header_package 00000022  00006a84  00006a84  00006bb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.MRPP_get_tail_package 00000022  00006aa6  00006aa6  00006bda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.MRPP_all_body_package_sent 0000000a  000071c6  000071c6  000072fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.MRPP_validate_collections_space 00000064  000052fe  000052fe  00005432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .bss.state    000000b3  00800c24  00800c24  000073fc  2**0
                  ALLOC
211 .text.mrpp_data_add_int16 0000008e  000047ac  000047ac  000048e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.mrpp_data_get 00000030  0000674c  0000674c  00006880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.add_data_types 000000aa  000042ca  000042ca  000043fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.update_bodies 00000162  00002848  00002848  0000297c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.mrpp_state_init 00000174  0000229a  0000229a  000023ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.mrpp_state_get_header 000000aa  00004374  00004374  000044a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.mrpp_state_get_tail 000000ac  00004174  00004174  000042a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.mrpp_state_set_collection 00000086  0000483a  0000483a  0000496e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.mrpp_state_is_body_ready 00000030  0000677c  0000677c  000068b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.mrpp_state_all_bodies_sent 0000002a  000068c0  000068c0  000069f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.mrpp_state_get_ready_body 000000f0  000038b2  000038b2  000039e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.mrpp_state_set_body_sent 00000020  00006b4a  00006b4a  00006c7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.mrpp_state_get_collection_address 00000036  000063ee  000063ee  00006522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.cb_cnt_time 00000030  000067ac  000067ac  000068e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.PUMP_start 00000024  000069b0  000069b0  00006ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.PUMP_is_done 0000001c  00006cb0  00006cb0  00006de4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .bss.eventPointer 00000001  00800eec  00800eec  000073fc  2**0
                  ALLOC
228 .bss.cnt      00000002  00800ecf  00800ecf  000073fc  2**0
                  ALLOC
229 .bss._seconds 00000002  00800ed1  00800ed1  000073fc  2**0
                  ALLOC
230 .text.datetime_to_BCD 00000100  000035bc  000035bc  000036f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.RTC_set_clock_out 00000050  000057e2  000057e2  00005916  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.RTC_get_current_time 00000140  00002da0  00002da0  00002ed4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.RTC_set_current_time 00000068  000051c8  000051c8  000052fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .rodata       00000005  00800e9a  000072b2  000073e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
235 .text.RTC_set_wake_up_interrupt 000000c2  00003dce  00003dce  00003f02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .text.RTC_clear_wake_up_interrupt 00000034  000064c6  000064c6  000065fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 .text.RTC_datetime_to_ts 00000122  0000326c  0000326c  000033a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000009f9  000009f9  00000b2d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
239 .text.clear_sampling_data 0000004a  00005c66  00005c66  00005d9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.bytes_2_uint 00000068  00005230  00005230  00005364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.init_measurement 00000038  00006348  00006348  0000647c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.validate_data 00000032  000065c6  000065c6  000066fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.SCD30_sensor_on 00000026  0000698a  0000698a  00006abe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.SCD30_sensor_off 00000008  00007248  00007248  0000737c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.SCD30_init_c02_sampling 00000012  00006ee4  00006ee4  00007018  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.SCD30_init_temp_sampling 00000012  00006ef6  00006ef6  0000702a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.SCD30_init_humidity_sampling 00000012  00006f08  00006f08  0000703c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.SCD30_deinit_sampling 0000000a  000071d0  000071d0  00007304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .text.SCD30_is_sampling_done 00000034  000064fa  000064fa  0000662e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 .text.SCD30_calc_validate_SI 000000c6  00003d08  00003d08  00003e3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
251 .text.read_all_values 00000116  000034a6  000034a6  000035da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 .text.vect_SCD_do_sample 0000014c  00002c54  00002c54  00002d88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
253 .text.SCD30_start_sampling 0000005e  000053c0  000053c0  000054f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
254 .text.SCD30_get_reading 00000032  000065f8  000065f8  0000672c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
255 .bss.si_counter 00000002  00800ed3  00800ed3  000073fc  2**0
                  ALLOC
256 .bss.highest_si 00000002  00800ed5  00800ed5  000073fc  2**0
                  ALLOC
257 .bss.lowest_si 00000002  00800ed7  00800ed7  000073fc  2**0
                  ALLOC
258 .bss.hum_pars 00000006  00800e82  00800e82  000073fc  2**0
                  ALLOC
259 .bss.temp_pars 00000006  00800e88  00800e88  000073fc  2**0
                  ALLOC
260 .bss.co2_pars 00000006  00800e8e  00800e8e  000073fc  2**0
                  ALLOC
261 .progmemx.data.READ_DATA_CMD 00000002  000009f7  000009f7  00000b2b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
262 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000009ea  000009ea  00000b1e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
263 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000009ef  000009ef  00000b23  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
264 .text.parse_cmd 00000030  000067dc  000067dc  00006910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.validate_cmd 00000056  00005692  00005692  000057c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .progmemx.data 000000ac  0000079f  0000079f  000008d3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
267 .text.CONF_enter 0000013c  00002ee0  00002ee0  00003014  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .progmemx.data 00000081  0000084b  0000084b  0000097f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
269 .text.CON_RN2483_parse 0000006c  0000508a  0000508a  000051be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.CON_RN2483 00000166  000026e2  000026e2  00002816  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.CONNECT 00000054  0000573c  0000573c  00005870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .progmemx.data 00000225  000004a1  000004a1  000005d5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
273 .text.read_cols 000000bc  00003e90  00003e90  00003fc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .text.read_time 00000092  0000471a  0000471a  0000484e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.read_validate_SI 0000012a  0000301c  0000301c  00003150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.write_deveui 00000078  00004b26  00004b26  00004c5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.write_appeui 00000078  00004b9e  00004b9e  00004cd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.write_appkey 00000078  00004c16  00004c16  00004d4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.write_PPM_factor 0000004c  00005aa0  00005aa0  00005bd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.write_RRL 0000004c  00005aec  00005aec  00005c20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .text.write_VCC 0000004c  00005b38  00005b38  00005c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
282 .text.get_time_par 00000034  0000652e  0000652e  00006662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
283 .text.write_cols 00000158  000029aa  000029aa  00002ade  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 .text.write_heat_up 0000004c  00005b84  00005b84  00005cb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.write_air_pump 00000050  00005832  00005832  00005966  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.write_sp_interval 0000004c  00005bd0  00005bd0  00005d04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.write_reset 000000e6  000039a2  000039a2  00003ad6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .text.write_time 000000fe  000036bc  000036bc  000037f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
289 .text.handle_read 000002be  00001802  00001802  00001936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .text.handle_write 00000200  00001d64  00001d64  00001e98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .bss.arg      00000050  00800d3b  00800d3b  000073fc  2**0
                  ALLOC
292 .progmemx.data 000000d9  000006c6  000006c6  000007fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
293 .text.handle_methane 00000186  00002114  00002114  00002248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.handle_SCD30 00000118  0000338e  0000338e  000034c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.handle_pump 000000a4  0000441e  0000441e  00004552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 .text.handle_sensor 000000b8  00004008  00004008  0000413c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 .text.init_methane_SCD30 00000028  0000693a  0000693a  00006a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 .bss.par      00000014  00800e42  00800e42  000073fc  2**0
                  ALLOC
299 .text.count_parameters 00000052  00005790  00005790  000058c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 .text.par_index 00000070  00004ed0  00004ed0  00005004  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
301 .text.get_parameter 00000096  00004684  00004684  000047b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 .text.decode_stage_response 00000016  00006da6  00006da6  00006eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
303 .text.decode_join_response 0000001c  00006ccc  00006ccc  00006e00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
304 .text.decode_header_tail_response 00000024  000069d4  000069d4  00006b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
305 .text.decode_payload_inv_len_response 0000001e  00006c02  00006c02  00006d36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
306 .text.read_eeprom 0000005a  00005532  00005532  00005666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
307 .text.join_lora 00000012  00006f1a  00006f1a  0000704e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
308 .text.set_wakeup 0000000a  000071da  000071da  0000730e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
309 .text.send_msg 00000006  00007298  00007298  000073cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
310 .progmemx.data 0000023b  00000266  00000266  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
311 .text.stage_0 00000126  00003146  00003146  0000327a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
312 .text.stage_1 00000152  00002b02  00002b02  00002c36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
313 .text.stage_2 0000016c  0000240e  0000240e  00002542  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
314 .text.stage_3 00000168  0000257a  0000257a  000026ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
315 .text.decode_body_response 00000072  00004dee  00004dee  00004f22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
316 .text.MAINPG_start 000003e8  0000113e  0000113e  00001272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
317 .bss.fromSleep 00000001  00800eed  00800eed  000073fc  2**0
                  ALLOC
318 .bss.samplingProcessInterval 00000001  00800eee  00800eee  000073fc  2**0
                  ALLOC
319 .data.methHeatUpTime 00000001  00800eef  000072c7  000073fb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
320 .data.airPumpTime 00000002  00800ed9  000072c3  000073f7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
321 .bss.ppmx     00000004  00800eab  00800eab  000073fc  2**0
                  ALLOC
322 .bss.rrlx     00000004  00800eaf  00800eaf  000073fc  2**0
                  ALLOC
323 .bss.vccx     00000004  00800eb3  00800eb3  000073fc  2**0
                  ALLOC
324 .bss.cols     0000004b  00800dd6  00800dd6  000073fc  2**0
                  ALLOC
325 .bss.appkey   00000021  00800e21  00800e21  000073fc  2**0
                  ALLOC
326 .bss.appeui   00000011  00800e56  00800e56  000073fc  2**0
                  ALLOC
327 .bss.deveui   00000011  00800e67  00800e67  000073fc  2**0
                  ALLOC
328 .bss.package_length 00000001  00800ef0  00800ef0  000073fc  2**0
                  ALLOC
329 .bss.package  00000064  00800cd7  00800cd7  000073fc  2**0
                  ALLOC
330 .bss.dt       00000006  00800e94  00800e94  000073fc  2**0
                  ALLOC
331 .bss.ts       00000004  00800eb7  00800eb7  000073fc  2**0
                  ALLOC
332 .bss.meth_data 000000c8  00800904  00800904  000073fc  2**0
                  ALLOC
333 .bss.hum_data 000000c8  008009cc  008009cc  000073fc  2**0
                  ALLOC
334 .bss.temp_data 000000c8  00800a94  00800a94  000073fc  2**0
                  ALLOC
335 .bss.co2_data 000000c8  00800b5c  00800b5c  000073fc  2**0
                  ALLOC
336 .data.bodyIndex 00000002  00800edb  000072c5  000073f9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
337 .bss.state_s3 00000001  00800ef1  00800ef1  000073fc  2**0
                  ALLOC
338 .bss.state_s2 00000001  00800ef2  00800ef2  000073fc  2**0
                  ALLOC
339 .bss.state_s1 00000001  00800ef3  00800ef3  000073fc  2**0
                  ALLOC
340 .bss.state_s0 00000001  00800ef4  00800ef4  000073fc  2**0
                  ALLOC
341 .text.calc_crc8 00000036  00006424  00006424  00006558  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
342 .text.get_decimal 000000b4  000040c0  000040c0  000041f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
343 .text.str2flaot 0000004e  000059ba  000059ba  00005aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text.is_float 00000058  000055e4  000055e4  00005718  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 .text.avrlibc.fplib 0000000e  00007052  00007052  00007186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 .text.avrlibc.fplib 000000ce  00003c3a  00003c3a  00003d6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 .text.avrlibc.fplib 0000000a  000071e4  000071e4  00007318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .text.avrlibc.fplib 00000008  00007250  00007250  00007384  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
349 .text.avrlibc.fplib 000000de  00003a88  00003a88  00003bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
350 .text.avrlibc.fplib 0000005e  0000541e  0000541e  00005552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 .text.avrlibc.fplib 0000007a  00004a34  00004a34  00004b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
352 .text.avrlibc.fplib 00000048  00005dd0  00005dd0  00005f04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
353 .text.avrlibc.fplib 0000000c  0000715c  0000715c  00007290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
354 .text.avrlibc.fplib 00000006  0000729e  0000729e  000073d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
355 .text.avrlibc.fplib 0000000e  00007060  00007060  00007194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
356 .text.avrlibc.fplib 0000000e  0000706e  0000706e  000071a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 .text.avrlibc.fplib 00000022  00006ac8  00006ac8  00006bfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
358 .text.avrlibc.fplib 00000044  00005f30  00005f30  00006064  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 .text.avrlibc.fplib 0000000e  0000707c  0000707c  000071b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
360 .text.avrlibc.fplib 00000008  00007258  00007258  0000738c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
361 .text.avrlibc.fplib 000000d4  00003b66  00003b66  00003c9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 .progmemx.data 00000008  000009e2  000009e2  00000b16  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
363 .text.avrlibc 00000744  000009fa  000009fa  00000b2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
364 .text.libgcc.div 00000028  00006962  00006962  00006a96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
365 .text.libgcc  0000000c  00007168  00007168  0000729c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
366 .text.libgcc.mul 0000001e  00006c20  00006c20  00006d54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
367 .text.libgcc.prologue 00000038  00006380  00006380  000064b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
368 .text.libgcc.prologue 00000036  0000645a  0000645a  0000658e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
369 .text.avrlibc 00000008  00007260  00007260  00007394  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 .text.avrlibc 0000000e  0000708a  0000708a  000071be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
371 .text.avrlibc 000002dc  00001526  00001526  0000165a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
372 .text.avrlibc 000001b0  00001f64  00001f64  00002098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
373 .text.avrlibc 00000012  00006f2c  00006f2c  00007060  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
374 .text.avrlibc 00000032  0000662a  0000662a  0000675e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
375 .text.avrlibc 00000042  00006080  00006080  000061b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
376 .text.avrlibc 0000006a  000050f6  000050f6  0000522a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
377 .text.avrlibc 0000002c  00006894  00006894  000069c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
378 .text.avrlibc 0000001e  00006c3e  00006c3e  00006d72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
379 .text.avrlibc 00000036  00006490  00006490  000065c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
380 .text.avrlibc 00000078  00004c8e  00004c8e  00004dc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
381 .text.avrlibc 00000046  00005eea  00005eea  0000601e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
382 .text.avrlibc 000000bc  00003f4c  00003f4c  00004080  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
383 .text.avrlibc 00000006  000072a4  000072a4  000073d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
384 .text.avrlibc 00000024  000069f8  000069f8  00006b2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
385 .text.avrlibc 00000012  00006f3e  00006f3e  00007072  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
386 .text.avrlibc 0000000e  00007098  00007098  000071cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
387 .text.avrlibc 0000000e  000070a6  000070a6  000071da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
388 .text.avrlibc 00000044  00005f74  00005f74  000060a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
389 .text.avrlibc 00000024  00006a1c  00006a1c  00006b50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
390 .text.avrlibc 00000018  00006d4c  00006d4c  00006e80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
391 .text.avrlibc 0000000c  00007174  00007174  000072a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
392 .text.libgcc.mul 00000020  00006b6a  00006b6a  00006c9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
393 .text.libgcc.div 00000044  00005fb8  00005fb8  000060ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
394 .text.libgcc.mul 00000016  00006dbc  00006dbc  00006ef0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
395 .text.libgcc  0000000a  000071ee  000071ee  00007322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 09 01 	jmp	0x212	; 0x212 <__ctors_end>
   4:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
   8:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
   c:	0c 94 1b 37 	jmp	0x6e36	; 0x6e36 <__vector_3>
  10:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  14:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  18:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  1c:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  20:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  24:	0c 94 9f 24 	jmp	0x493e	; 0x493e <__vector_9>
  28:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  2c:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  30:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  34:	0c 94 68 2c 	jmp	0x58d0	; 0x58d0 <__vector_13>
  38:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  3c:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  40:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__vector_16>
  44:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  48:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  4c:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  50:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__vector_20>
  54:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  58:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__vector_22>
  5c:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  60:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  64:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  68:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  6c:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  70:	0c 94 bd 26 	jmp	0x4d7a	; 0x4d7a <__vector_28>
  74:	0c 94 55 39 	jmp	0x72aa	; 0x72aa <__bad_interrupt>
  78:	0c 94 d7 27 	jmp	0x4fae	; 0x4fae <__vector_30>
  7c:	7e 0d       	add	r23, r14
  7e:	8e 0e       	add	r8, r30
  80:	9d 0d       	add	r25, r13
  82:	bb 0d       	add	r27, r11
  84:	db 0d       	add	r29, r11
  86:	fb 0d       	add	r31, r11
  88:	1b 0e       	add	r1, r27
  8a:	3b 0e       	add	r3, r27
  8c:	59 0e       	add	r5, r25
  8e:	77 0e       	add	r7, r23
  90:	89 0e       	add	r8, r25
  92:	9f 0e       	add	r9, r31
  94:	a1 0e       	add	r10, r17
  96:	8b 17       	cp	r24, r27
  98:	a2 17       	cp	r26, r18
  9a:	fe 17       	cp	r31, r30
  9c:	ab 17       	cp	r26, r27
  9e:	07 18       	sub	r0, r7
  a0:	f0 17       	cp	r31, r16
  a2:	f7 17       	cp	r31, r23
  a4:	bb 17       	cp	r27, r27
  a6:	c7 17       	cp	r28, r23
  a8:	d3 17       	cp	r29, r19
  aa:	dd 17       	cp	r29, r29
  ac:	e9 17       	cp	r30, r25
  ae:	83 13       	cpse	r24, r19
  b0:	90 13       	cpse	r25, r16
  b2:	9a 13       	cpse	r25, r26
  b4:	a0 13       	cpse	r26, r16
  b6:	cf 13       	cpse	r28, r31
  b8:	fa 13       	cpse	r31, r26
  ba:	13 14       	cp	r1, r3
  bc:	ca 08       	sbc	r12, r10
  be:	f9 08       	sbc	r15, r9
  c0:	14 09       	sbc	r17, r4
  c2:	25 09       	sbc	r18, r5
  c4:	39 09       	sbc	r19, r9
  c6:	6e 0a       	sbc	r6, r30
  c8:	2e 09       	sbc	r18, r14
  ca:	72 09       	sbc	r23, r2
  cc:	89 09       	sbc	r24, r9
  ce:	7e 09       	sbc	r23, r14
  d0:	4d 09       	sbc	r20, r13
  d2:	94 09       	sbc	r25, r4
  d4:	a5 09       	sbc	r26, r5
  d6:	c2 09       	sbc	r28, r2
  d8:	ca 09       	sbc	r28, r10
  da:	d2 09       	sbc	r29, r2
  dc:	da 09       	sbc	r29, r10
  de:	e2 09       	sbc	r30, r2
  e0:	0d 0a       	sbc	r0, r29
  e2:	14 0a       	sbc	r1, r20
  e4:	31 0a       	sbc	r3, r17
  e6:	50 0a       	sbc	r5, r16
  e8:	5e 0a       	sbc	r5, r30
  ea:	7c 0a       	sbc	r7, r28
  ec:	87 0a       	sbc	r8, r23

000000ee <.dinit>:
  ee:	01 00       	.word	0x0001	; ????
  f0:	0e 9a       	sbi	0x01, 6	; 1
  f2:	80 0e       	add	r8, r16
  f4:	9a 0e       	add	r9, r26
  f6:	ab 00       	.word	0x00ab	; ????
  f8:	72 b2       	in	r7, 0x12	; 18
  fa:	0e ab       	std	Y+54, r16	; 0x36
  fc:	0e d9       	rcall	.-3556   	; 0xfffff31a <__eeprom_end+0xff7ef31a>
  fe:	80 0e       	add	r8, r16
 100:	d9 0e       	add	r13, r25
 102:	dd 00       	.word	0x00dd	; ????
 104:	72 c3       	rjmp	.+1764   	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
 106:	0e dd       	rcall	.-1508   	; 0xfffffb24 <__eeprom_end+0xff7efb24>
 108:	0e ef       	ldi	r16, 0xFE	; 254
 10a:	80 0e       	add	r8, r16
 10c:	ef 0e       	add	r14, r31
 10e:	f0 00       	.word	0x00f0	; ????
 110:	72 c7       	rjmp	.+3812   	; 0xff6 <vfprintf+0x5fc>
 112:	0e f0       	brts	.+2      	; 0x116 <.dinit+0x28>
 114:	0e f5       	brtc	.+66     	; 0x158 <__trampolines_end+0x40>
 116:	80 00       	.word	0x0080	; ????

00000118 <__trampolines_end>:
 118:	00 40       	sbci	r16, 0x00	; 0
 11a:	7a 10       	cpse	r7, r10
 11c:	f3 5a       	subi	r31, 0xA3	; 163
 11e:	00 a0       	ldd	r0, Z+32	; 0x20
 120:	72 4e       	sbci	r23, 0xE2	; 226
 122:	18 09       	sbc	r17, r8
 124:	00 10       	cpse	r0, r0
 126:	a5 d4       	rcall	.+2378   	; 0xa72 <vfprintf+0x78>
 128:	e8 00       	.word	0x00e8	; ????
 12a:	00 e8       	ldi	r16, 0x80	; 128
 12c:	76 48       	sbci	r23, 0x86	; 134
 12e:	17 00       	.word	0x0017	; ????
 130:	00 e4       	ldi	r16, 0x40	; 64
 132:	0b 54       	subi	r16, 0x4B	; 75
 134:	02 00       	.word	0x0002	; ????
 136:	00 ca       	rjmp	.-3072   	; 0xfffff538 <__eeprom_end+0xff7ef538>
 138:	9a 3b       	cpi	r25, 0xBA	; 186
 13a:	00 00       	nop
 13c:	00 e1       	ldi	r16, 0x10	; 16
 13e:	f5 05       	cpc	r31, r5
 140:	00 00       	nop
 142:	80 96       	adiw	r24, 0x20	; 32
 144:	98 00       	.word	0x0098	; ????
 146:	00 00       	nop
 148:	40 42       	sbci	r20, 0x20	; 32
 14a:	0f 00       	.word	0x000f	; ????
 14c:	00 00       	nop
 14e:	a0 86       	std	Z+8, r10	; 0x08
 150:	01 00       	.word	0x0001	; ????
 152:	00 00       	nop
 154:	10 27       	eor	r17, r16
 156:	00 00       	nop
 158:	00 00       	nop
 15a:	e8 03       	fmulsu	r22, r16
 15c:	00 00       	nop
 15e:	00 00       	nop
 160:	64 00       	.word	0x0064	; ????
 162:	00 00       	nop
 164:	00 00       	nop
 166:	0a 00       	.word	0x000a	; ????
 168:	00 00       	nop
 16a:	00 00       	nop
 16c:	01 00       	.word	0x0001	; ????
 16e:	00 00       	nop
 170:	00 00       	nop
 172:	2c 76       	andi	r18, 0x6C	; 108
 174:	d8 88       	ldd	r13, Y+16	; 0x10
 176:	dc 67       	ori	r29, 0x7C	; 124
 178:	4f 08       	sbc	r4, r15
 17a:	23 df       	rcall	.-442    	; 0xffffffc2 <__eeprom_end+0xff7effc2>
 17c:	c1 df       	rcall	.-126    	; 0x100 <.dinit+0x12>
 17e:	ae 59       	subi	r26, 0x9E	; 158
 180:	e1 b1       	in	r30, 0x01	; 1
 182:	b7 96       	adiw	r30, 0x27	; 39
 184:	e5 e3       	ldi	r30, 0x35	; 53
 186:	e4 53       	subi	r30, 0x34	; 52
 188:	c6 3a       	cpi	r28, 0xA6	; 166
 18a:	e6 51       	subi	r30, 0x16	; 22
 18c:	99 76       	andi	r25, 0x69	; 105
 18e:	96 e8       	ldi	r25, 0x86	; 134
 190:	e6 c2       	rjmp	.+1484   	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 192:	84 26       	eor	r8, r20
 194:	eb 89       	ldd	r30, Y+19	; 0x13
 196:	8c 9b       	sbis	0x11, 4	; 17
 198:	62 ed       	ldi	r22, 0xD2	; 210
 19a:	40 7c       	andi	r20, 0xC0	; 192
 19c:	6f fc       	.word	0xfc6f	; ????
 19e:	ef bc       	out	0x2f, r14	; 47
 1a0:	9c 9f       	mul	r25, r28
 1a2:	40 f2       	brcs	.-112    	; 0x134 <__trampolines_end+0x1c>
 1a4:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a6:	6f a5       	ldd	r22, Y+47	; 0x2f
 1a8:	f4 90       	lpm	r15, Z
 1aa:	05 5a       	subi	r16, 0xA5	; 165
 1ac:	2a f7       	brpl	.-54     	; 0x178 <__trampolines_end+0x60>
 1ae:	5c 93       	st	X, r21
 1b0:	6b 6c       	ori	r22, 0xCB	; 203
 1b2:	f9 67       	ori	r31, 0x79	; 121
 1b4:	6d c1       	rjmp	.+730    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 1b6:	1b fc       	.word	0xfc1b	; ????
 1b8:	e0 e4       	ldi	r30, 0x40	; 64
 1ba:	0d 47       	sbci	r16, 0x7D	; 125
 1bc:	fe f5       	brtc	.+126    	; 0x23c <__do_copy_data+0x1e>
 1be:	20 e6       	ldi	r18, 0x60	; 96
 1c0:	b5 00       	.word	0x00b5	; ????
 1c2:	d0 ed       	ldi	r29, 0xD0	; 208
 1c4:	90 2e       	mov	r9, r16
 1c6:	03 00       	.word	0x0003	; ????
 1c8:	94 35       	cpi	r25, 0x54	; 84
 1ca:	77 05       	cpc	r23, r7
 1cc:	00 80       	ld	r0, Z
 1ce:	84 1e       	adc	r8, r20
 1d0:	08 00       	.word	0x0008	; ????
 1d2:	00 20       	and	r0, r0
 1d4:	4e 0a       	sbc	r4, r30
 1d6:	00 00       	nop
 1d8:	00 c8       	rjmp	.-4096   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
 1da:	0c 33       	cpi	r16, 0x3C	; 60
 1dc:	33 33       	cpi	r19, 0x33	; 51
 1de:	33 0f       	add	r19, r19
 1e0:	98 6e       	ori	r25, 0xE8	; 232
 1e2:	12 83       	std	Z+2, r17	; 0x02
 1e4:	11 41       	sbci	r17, 0x11	; 17
 1e6:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1e8:	21 14       	cp	r2, r1
 1ea:	89 3b       	cpi	r24, 0xB9	; 185
 1ec:	e6 55       	subi	r30, 0x56	; 86
 1ee:	16 cf       	rjmp	.-468    	; 0x1c <__FUSE_REGION_LENGTH__+0x19>
 1f0:	fe e6       	ldi	r31, 0x6E	; 110
 1f2:	db 18       	sub	r13, r11
 1f4:	d1 84       	ldd	r13, Z+9	; 0x09
 1f6:	4b 38       	cpi	r20, 0x8B	; 139
 1f8:	1b f7       	brvc	.-58     	; 0x1c0 <__trampolines_end+0xa8>
 1fa:	7c 1d       	adc	r23, r12
 1fc:	90 1d       	adc	r25, r0
 1fe:	a4 bb       	out	0x14, r26	; 20
 200:	e4 24       	eor	r14, r4
 202:	20 32       	cpi	r18, 0x20	; 32
 204:	84 72       	andi	r24, 0x24	; 36
 206:	5e 22       	and	r5, r30
 208:	81 00       	.word	0x0081	; ????
 20a:	c9 f1       	breq	.+114    	; 0x27e <_etext+0x18>
 20c:	24 ec       	ldi	r18, 0xC4	; 196
 20e:	a1 e5       	ldi	r26, 0x51	; 81
 210:	3d 27       	eor	r19, r29

00000212 <__ctors_end>:
 212:	11 24       	eor	r1, r1
 214:	1f be       	out	0x3f, r1	; 63
 216:	cf ef       	ldi	r28, 0xFF	; 255
 218:	d0 e1       	ldi	r29, 0x10	; 16
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	cd bf       	out	0x3d, r28	; 61

0000021e <__do_copy_data>:
 21e:	ee ee       	ldi	r30, 0xEE	; 238
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	17 c0       	rjmp	.+46     	; 0x254 <__do_clear_bss+0x8>
 226:	b5 91       	lpm	r27, Z+
 228:	a5 91       	lpm	r26, Z+
 22a:	35 91       	lpm	r19, Z+
 22c:	25 91       	lpm	r18, Z+
 22e:	05 91       	lpm	r16, Z+
 230:	07 fd       	sbrc	r16, 7
 232:	0c c0       	rjmp	.+24     	; 0x24c <__do_clear_bss>
 234:	95 91       	lpm	r25, Z+
 236:	85 91       	lpm	r24, Z+
 238:	ef 01       	movw	r28, r30
 23a:	f9 2f       	mov	r31, r25
 23c:	e8 2f       	mov	r30, r24
 23e:	05 90       	lpm	r0, Z+
 240:	0d 92       	st	X+, r0
 242:	a2 17       	cp	r26, r18
 244:	b3 07       	cpc	r27, r19
 246:	d9 f7       	brne	.-10     	; 0x23e <__do_copy_data+0x20>
 248:	fe 01       	movw	r30, r28
 24a:	04 c0       	rjmp	.+8      	; 0x254 <__do_clear_bss+0x8>

0000024c <__do_clear_bss>:
 24c:	1d 92       	st	X+, r1
 24e:	a2 17       	cp	r26, r18
 250:	b3 07       	cpc	r27, r19
 252:	e1 f7       	brne	.-8      	; 0x24c <__do_clear_bss>
 254:	e7 31       	cpi	r30, 0x17	; 23
 256:	f4 07       	cpc	r31, r20
 258:	31 f7       	brne	.-52     	; 0x226 <__do_copy_data+0x8>
 25a:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <main>
 25e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>

Disassembly of section .text:

000072aa <__bad_interrupt>:
    72aa:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

00006f80 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    6f80:	81 b1       	in	r24, 0x01	; 1
    6f82:	88 60       	ori	r24, 0x08	; 8
    6f84:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    6f86:	82 b1       	in	r24, 0x02	; 2
    6f88:	87 7f       	andi	r24, 0xF7	; 247
    6f8a:	82 b9       	out	0x02, r24	; 2
    6f8c:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00006dd2 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    6dd2:	88 23       	and	r24, r24
    6dd4:	21 f0       	breq	.+8      	; 0x6dde <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    6dd6:	82 b1       	in	r24, 0x02	; 2
    6dd8:	88 60       	ori	r24, 0x08	; 8
    6dda:	82 b9       	out	0x02, r24	; 2
    6ddc:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    6dde:	82 b1       	in	r24, 0x02	; 2
    6de0:	87 7f       	andi	r24, 0xF7	; 247
    6de2:	82 b9       	out	0x02, r24	; 2
    6de4:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00006f8e <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    6f8e:	81 b1       	in	r24, 0x01	; 1
    6f90:	80 62       	ori	r24, 0x20	; 32
    6f92:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    6f94:	82 b1       	in	r24, 0x02	; 2
    6f96:	8f 7d       	andi	r24, 0xDF	; 223
    6f98:	82 b9       	out	0x02, r24	; 2
    6f9a:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00006de6 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    6de6:	88 23       	and	r24, r24
    6de8:	21 f0       	breq	.+8      	; 0x6df2 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    6dea:	82 b1       	in	r24, 0x02	; 2
    6dec:	80 62       	ori	r24, 0x20	; 32
    6dee:	82 b9       	out	0x02, r24	; 2
    6df0:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    6df2:	82 b1       	in	r24, 0x02	; 2
    6df4:	8f 7d       	andi	r24, 0xDF	; 223
    6df6:	82 b9       	out	0x02, r24	; 2
    6df8:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00006f9c <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    6f9c:	81 b1       	in	r24, 0x01	; 1
    6f9e:	80 61       	ori	r24, 0x10	; 16
    6fa0:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    6fa2:	82 b1       	in	r24, 0x02	; 2
    6fa4:	8f 7e       	andi	r24, 0xEF	; 239
    6fa6:	82 b9       	out	0x02, r24	; 2
    6fa8:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00006dfa <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    6dfa:	88 23       	and	r24, r24
    6dfc:	21 f0       	breq	.+8      	; 0x6e06 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    6dfe:	82 b1       	in	r24, 0x02	; 2
    6e00:	80 61       	ori	r24, 0x10	; 16
    6e02:	82 b9       	out	0x02, r24	; 2
    6e04:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    6e06:	82 b1       	in	r24, 0x02	; 2
    6e08:	8f 7e       	andi	r24, 0xEF	; 239
    6e0a:	82 b9       	out	0x02, r24	; 2
    6e0c:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00006faa <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    6faa:	8a b1       	in	r24, 0x0a	; 10
    6fac:	80 61       	ori	r24, 0x10	; 16
    6fae:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    6fb0:	8b b1       	in	r24, 0x0b	; 11
    6fb2:	8f 7e       	andi	r24, 0xEF	; 239
    6fb4:	8b b9       	out	0x0b, r24	; 11
    6fb6:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

00006e0e <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    6e0e:	88 23       	and	r24, r24
    6e10:	21 f0       	breq	.+8      	; 0x6e1a <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    6e12:	8b b1       	in	r24, 0x0b	; 11
    6e14:	80 61       	ori	r24, 0x10	; 16
    6e16:	8b b9       	out	0x0b, r24	; 11
    6e18:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    6e1a:	8b b1       	in	r24, 0x0b	; 11
    6e1c:	8f 7e       	andi	r24, 0xEF	; 239
    6e1e:	8b b9       	out	0x0b, r24	; 11
    6e20:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

00006fb8 <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    6fb8:	81 b1       	in	r24, 0x01	; 1
    6fba:	80 68       	ori	r24, 0x80	; 128
    6fbc:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    6fbe:	82 b1       	in	r24, 0x02	; 2
    6fc0:	8f 77       	andi	r24, 0x7F	; 127
    6fc2:	82 b9       	out	0x02, r24	; 2
    6fc4:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

00006e22 <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    6e22:	88 23       	and	r24, r24
    6e24:	21 f0       	breq	.+8      	; 0x6e2e <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    6e26:	82 b1       	in	r24, 0x02	; 2
    6e28:	80 68       	ori	r24, 0x80	; 128
    6e2a:	82 b9       	out	0x02, r24	; 2
    6e2c:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    6e2e:	82 b1       	in	r24, 0x02	; 2
    6e30:	8f 77       	andi	r24, 0x7F	; 127
    6e32:	82 b9       	out	0x02, r24	; 2
    6e34:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

000071f8 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    71f8:	82 b1       	in	r24, 0x02	; 2
    71fa:	80 58       	subi	r24, 0x80	; 128
    71fc:	82 b9       	out	0x02, r24	; 2
    71fe:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00006102 <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    6102:	84 b1       	in	r24, 0x04	; 4
    6104:	8b 7f       	andi	r24, 0xFB	; 251
    6106:	84 b9       	out	0x04, r24	; 4
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    6108:	e9 e6       	ldi	r30, 0x69	; 105
    610a:	f0 e0       	ldi	r31, 0x00	; 0
    610c:	80 81       	ld	r24, Z
    610e:	8f 7e       	andi	r24, 0xEF	; 239
    6110:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    6112:	80 81       	ld	r24, Z
    6114:	80 62       	ori	r24, 0x20	; 32
    6116:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    6118:	8d b3       	in	r24, 0x1d	; 29
    611a:	84 60       	ori	r24, 0x04	; 4
    611c:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    611e:	83 b7       	in	r24, 0x33	; 51
    6120:	81 7f       	andi	r24, 0xF1	; 241
    6122:	84 60       	ori	r24, 0x04	; 4
    6124:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    6126:	83 b7       	in	r24, 0x33	; 51
    6128:	81 60       	ori	r24, 0x01	; 1
    612a:	83 bf       	out	0x33, r24	; 51
	sei();
    612c:	78 94       	sei
	sleep_cpu();
    612e:	88 95       	sleep
	sleep_disable();
    6130:	83 b7       	in	r24, 0x33	; 51
    6132:	8e 7f       	andi	r24, 0xFE	; 254
    6134:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    6136:	8d b3       	in	r24, 0x1d	; 29
    6138:	8b 7f       	andi	r24, 0xFB	; 251
    613a:	8d bb       	out	0x1d, r24	; 29
    613c:	08 95       	ret

Disassembly of section .text.__vector_3:

00006e36 <__vector_3>:
}

ISR(INT2_vect){
    6e36:	1f 92       	push	r1
    6e38:	0f 92       	push	r0
    6e3a:	0f b6       	in	r0, 0x3f	; 63
    6e3c:	0f 92       	push	r0
    6e3e:	11 24       	eor	r1, r1
	
}
    6e40:	0f 90       	pop	r0
    6e42:	0f be       	out	0x3f, r0	; 63
    6e44:	0f 90       	pop	r0
    6e46:	1f 90       	pop	r1
    6e48:	18 95       	reti

Disassembly of section .text.rn2483_init:

00007200 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    7200:	84 b1       	in	r24, 0x04	; 4
    7202:	80 61       	ori	r24, 0x10	; 16
    7204:	84 b9       	out	0x04, r24	; 4
    7206:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00007208 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    7208:	85 b1       	in	r24, 0x05	; 5
    720a:	8f 7e       	andi	r24, 0xEF	; 239
    720c:	85 b9       	out	0x05, r24	; 5
    720e:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00007210 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    7210:	85 b1       	in	r24, 0x05	; 5
    7212:	80 61       	ori	r24, 0x10	; 16
    7214:	85 b9       	out	0x05, r24	; 5
    7216:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00006fc6 <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    6fc6:	87 b1       	in	r24, 0x07	; 7
    6fc8:	8f 7b       	andi	r24, 0xBF	; 191
    6fca:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    6fcc:	88 b1       	in	r24, 0x08	; 8
    6fce:	8f 7b       	andi	r24, 0xBF	; 191
    6fd0:	88 b9       	out	0x08, r24	; 8
    6fd2:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00007180 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    7180:	86 b1       	in	r24, 0x06	; 6
    7182:	86 fb       	bst	r24, 6
    7184:	88 27       	eor	r24, r24
    7186:	80 f9       	bld	r24, 0
    7188:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00006a40 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    6a40:	92 e0       	ldi	r25, 0x02	; 2
    6a42:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    6a44:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match-1; //Set match value
    6a46:	81 50       	subi	r24, 0x01	; 1
    6a48:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    6a4a:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    6a4c:	ee e6       	ldi	r30, 0x6E	; 110
    6a4e:	f0 e0       	ldi	r31, 0x00	; 0
    6a50:	80 81       	ld	r24, Z
    6a52:	82 60       	ori	r24, 0x02	; 2
    6a54:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    6a56:	78 94       	sei
	
	//Set callback
	_cb=cb;
    6a58:	70 93 bc 0e 	sts	0x0EBC, r23	; 0x800ebc <_cb+0x1>
    6a5c:	60 93 bb 0e 	sts	0x0EBB, r22	; 0x800ebb <_cb>
    6a60:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00007268 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    7268:	86 e0       	ldi	r24, 0x06	; 6
    726a:	85 bd       	out	0x25, r24	; 37
    726c:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

000072ae <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    72ae:	15 bc       	out	0x25, r1	; 37
    72b0:	08 95       	ret

Disassembly of section .text.__vector_16:

00005882 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    5882:	1f 92       	push	r1
    5884:	0f 92       	push	r0
    5886:	0f b6       	in	r0, 0x3f	; 63
    5888:	0f 92       	push	r0
    588a:	11 24       	eor	r1, r1
    588c:	2f 93       	push	r18
    588e:	3f 93       	push	r19
    5890:	4f 93       	push	r20
    5892:	5f 93       	push	r21
    5894:	6f 93       	push	r22
    5896:	7f 93       	push	r23
    5898:	8f 93       	push	r24
    589a:	9f 93       	push	r25
    589c:	af 93       	push	r26
    589e:	bf 93       	push	r27
    58a0:	ef 93       	push	r30
    58a2:	ff 93       	push	r31
	_cb();
    58a4:	e0 91 bb 0e 	lds	r30, 0x0EBB	; 0x800ebb <_cb>
    58a8:	f0 91 bc 0e 	lds	r31, 0x0EBC	; 0x800ebc <_cb+0x1>
    58ac:	09 95       	icall
}
    58ae:	ff 91       	pop	r31
    58b0:	ef 91       	pop	r30
    58b2:	bf 91       	pop	r27
    58b4:	af 91       	pop	r26
    58b6:	9f 91       	pop	r25
    58b8:	8f 91       	pop	r24
    58ba:	7f 91       	pop	r23
    58bc:	6f 91       	pop	r22
    58be:	5f 91       	pop	r21
    58c0:	4f 91       	pop	r20
    58c2:	3f 91       	pop	r19
    58c4:	2f 91       	pop	r18
    58c6:	0f 90       	pop	r0
    58c8:	0f be       	out	0x3f, r0	; 63
    58ca:	0f 90       	pop	r0
    58cc:	1f 90       	pop	r1
    58ce:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

000063b8 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    63b8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    63bc:	28 e0       	ldi	r18, 0x08	; 8
    63be:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    63c2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match-1; //Set compare value
    63c6:	01 97       	sbiw	r24, 0x01	; 1
    63c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    63cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    63d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    63d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    63d8:	ef e6       	ldi	r30, 0x6F	; 111
    63da:	f0 e0       	ldi	r31, 0x00	; 0
    63dc:	80 81       	ld	r24, Z
    63de:	82 60       	ori	r24, 0x02	; 2
    63e0:	80 83       	st	Z, r24
	sei();
    63e2:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    63e4:	70 93 be 0e 	sts	0x0EBE, r23	; 0x800ebe <_cb+0x1>
    63e8:	60 93 bd 0e 	sts	0x0EBD, r22	; 0x800ebd <_cb>
    63ec:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

000070b4 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    70b4:	e1 e8       	ldi	r30, 0x81	; 129
    70b6:	f0 e0       	ldi	r31, 0x00	; 0
    70b8:	80 81       	ld	r24, Z
    70ba:	86 60       	ori	r24, 0x06	; 6
    70bc:	80 83       	st	Z, r24
    70be:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

000070c0 <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    70c0:	e1 e8       	ldi	r30, 0x81	; 129
    70c2:	f0 e0       	ldi	r31, 0x00	; 0
    70c4:	80 81       	ld	r24, Z
    70c6:	88 7f       	andi	r24, 0xF8	; 248
    70c8:	80 83       	st	Z, r24
    70ca:	08 95       	ret

Disassembly of section .text.__vector_13:

000058d0 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    58d0:	1f 92       	push	r1
    58d2:	0f 92       	push	r0
    58d4:	0f b6       	in	r0, 0x3f	; 63
    58d6:	0f 92       	push	r0
    58d8:	11 24       	eor	r1, r1
    58da:	2f 93       	push	r18
    58dc:	3f 93       	push	r19
    58de:	4f 93       	push	r20
    58e0:	5f 93       	push	r21
    58e2:	6f 93       	push	r22
    58e4:	7f 93       	push	r23
    58e6:	8f 93       	push	r24
    58e8:	9f 93       	push	r25
    58ea:	af 93       	push	r26
    58ec:	bf 93       	push	r27
    58ee:	ef 93       	push	r30
    58f0:	ff 93       	push	r31
	_cb();
    58f2:	e0 91 bd 0e 	lds	r30, 0x0EBD	; 0x800ebd <_cb>
    58f6:	f0 91 be 0e 	lds	r31, 0x0EBE	; 0x800ebe <_cb+0x1>
    58fa:	09 95       	icall
    58fc:	ff 91       	pop	r31
    58fe:	ef 91       	pop	r30
    5900:	bf 91       	pop	r27
    5902:	af 91       	pop	r26
    5904:	9f 91       	pop	r25
    5906:	8f 91       	pop	r24
    5908:	7f 91       	pop	r23
    590a:	6f 91       	pop	r22
    590c:	5f 91       	pop	r21
    590e:	4f 91       	pop	r20
    5910:	3f 91       	pop	r19
    5912:	2f 91       	pop	r18
    5914:	0f 90       	pop	r0
    5916:	0f be       	out	0x3f, r0	; 63
    5918:	0f 90       	pop	r0
    591a:	1f 90       	pop	r1
    591c:	18 95       	reti

Disassembly of section .text.clear_callbacks:

00006aea <clear_callbacks>:
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    6aea:	80 e0       	ldi	r24, 0x00	; 0
    6aec:	09 c0       	rjmp	.+18     	; 0x6b00 <clear_callbacks+0x16>
	{
		callbacks[i]=NULL;
    6aee:	e8 2f       	mov	r30, r24
    6af0:	f0 e0       	ldi	r31, 0x00	; 0
    6af2:	ee 0f       	add	r30, r30
    6af4:	ff 1f       	adc	r31, r31
    6af6:	e8 58       	subi	r30, 0x88	; 136
    6af8:	f1 4f       	sbci	r31, 0xF1	; 241
    6afa:	11 82       	std	Z+1, r1	; 0x01
    6afc:	10 82       	st	Z, r1
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    6afe:	8f 5f       	subi	r24, 0xFF	; 255
    6b00:	85 30       	cpi	r24, 0x05	; 5
    6b02:	a8 f3       	brcs	.-22     	; 0x6aee <clear_callbacks+0x4>
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    6b04:	10 92 de 0e 	sts	0x0EDE, r1	; 0x800ede <cbCounter>
    6b08:	08 95       	ret

Disassembly of section .text.start_timer:

00007218 <start_timer>:
}

static void start_timer(){
	TCCR2B=0x07;
    7218:	87 e0       	ldi	r24, 0x07	; 7
    721a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    721e:	08 95       	ret

Disassembly of section .text.stop_timer:

0000726e <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    726e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    7272:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00006b0a <TC2_HAL_init>:
static callback_ptr callbacks[MAX_CALLBACKS];
static uint8_t cbCounter=0;
static uint8_t cnt=0;

void TC2_HAL_init(){
	TCCR2A=0x02; //Set mode=CTC
    6b0a:	82 e0       	ldi	r24, 0x02	; 2
    6b0c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	TCCR2B=0x00; //Stop timer
    6b10:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
	
	//Disable async
	ASSR=0x00;
    6b14:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
	
	TCNT2=0; //Set counter to 0
    6b18:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
	OCR2A=243; //16 Hz, 32 event pr s
    6b1c:	93 ef       	ldi	r25, 0xF3	; 243
    6b1e:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	
	//Enable interrupt
	TIMSK2=0x02;
    6b22:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
	sei();
    6b26:	78 94       	sei
    6b28:	08 95       	ret

Disassembly of section .text.TC2_HAL_kill:

0000718a <TC2_HAL_kill>:
static void stop_timer(){
	TCCR2B=0x00;
}

void TC2_HAL_kill(){
	stop_timer();
    718a:	0e 94 37 39 	call	0x726e	; 0x726e <stop_timer>
	clear_callbacks();
    718e:	0e 94 75 35 	call	0x6aea	; 0x6aea <clear_callbacks>
    7192:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

000056e8 <TC2_HAL_subscribe>:
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
    56e8:	cf 93       	push	r28
    56ea:	dc 01       	movw	r26, r24
	int8_t pointer=-1;
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    56ec:	60 91 de 0e 	lds	r22, 0x0EDE	; 0x800ede <cbCounter>
    56f0:	65 30       	cpi	r22, 0x05	; 5
    56f2:	00 f5       	brcc	.+64     	; 0x5734 <TC2_HAL_subscribe+0x4c>
    56f4:	90 e0       	ldi	r25, 0x00	; 0
    56f6:	15 c0       	rjmp	.+42     	; 0x5722 <TC2_HAL_subscribe+0x3a>
	
	//Find a free spot in the array to store the cb
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		if(callbacks[i]==NULL){
    56f8:	29 2f       	mov	r18, r25
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	f9 01       	movw	r30, r18
    56fe:	ee 0f       	add	r30, r30
    5700:	ff 1f       	adc	r31, r31
    5702:	e8 58       	subi	r30, 0x88	; 136
    5704:	f1 4f       	sbci	r31, 0xF1	; 241
    5706:	40 81       	ld	r20, Z
    5708:	51 81       	ldd	r21, Z+1	; 0x01
    570a:	45 2b       	or	r20, r21
    570c:	49 f4       	brne	.+18     	; 0x5720 <TC2_HAL_subscribe+0x38>
			callbacks[i]=cb;
    570e:	22 0f       	add	r18, r18
    5710:	33 1f       	adc	r19, r19
    5712:	f9 01       	movw	r30, r18
    5714:	e8 58       	subi	r30, 0x88	; 136
    5716:	f1 4f       	sbci	r31, 0xF1	; 241
    5718:	b1 83       	std	Z+1, r27	; 0x01
    571a:	a0 83       	st	Z, r26
			pointer=i;
    571c:	c9 2f       	mov	r28, r25
			break;
    571e:	04 c0       	rjmp	.+8      	; 0x5728 <TC2_HAL_subscribe+0x40>
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
	
	//Find a free spot in the array to store the cb
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    5720:	9f 5f       	subi	r25, 0xFF	; 255
    5722:	95 30       	cpi	r25, 0x05	; 5
    5724:	48 f3       	brcs	.-46     	; 0x56f8 <TC2_HAL_subscribe+0x10>
	stop_timer();
	clear_callbacks();
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
    5726:	cf ef       	ldi	r28, 0xFF	; 255
			break;
		}
	}
	
	//Increment the number of cbs and (re)start the timer
	cbCounter++;
    5728:	6f 5f       	subi	r22, 0xFF	; 255
    572a:	60 93 de 0e 	sts	0x0EDE, r22	; 0x800ede <cbCounter>
	start_timer();
    572e:	0e 94 0c 39 	call	0x7218	; 0x7218 <start_timer>
	return pointer;
    5732:	01 c0       	rjmp	.+2      	; 0x5736 <TC2_HAL_subscribe+0x4e>

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	//Return -1 if no space
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    5734:	cf ef       	ldi	r28, 0xFF	; 255
	
	//Increment the number of cbs and (re)start the timer
	cbCounter++;
	start_timer();
	return pointer;
}
    5736:	8c 2f       	mov	r24, r28
    5738:	cf 91       	pop	r28
    573a:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

000061b6 <TC2_HAL_cancel>:

void TC2_HAL_cancel(int8_t pointer){
	//Just return if cb not exist
	if(callbacks[pointer]==NULL) return;
    61b6:	08 2e       	mov	r0, r24
    61b8:	00 0c       	add	r0, r0
    61ba:	99 0b       	sbc	r25, r25
    61bc:	fc 01       	movw	r30, r24
    61be:	ee 0f       	add	r30, r30
    61c0:	ff 1f       	adc	r31, r31
    61c2:	e8 58       	subi	r30, 0x88	; 136
    61c4:	f1 4f       	sbci	r31, 0xF1	; 241
    61c6:	20 81       	ld	r18, Z
    61c8:	31 81       	ldd	r19, Z+1	; 0x01
    61ca:	23 2b       	or	r18, r19
    61cc:	81 f0       	breq	.+32     	; 0x61ee <TC2_HAL_cancel+0x38>
	
	//Otherwise remove cb, stop timer if no cb is back
	callbacks[pointer]=NULL;
    61ce:	88 0f       	add	r24, r24
    61d0:	99 1f       	adc	r25, r25
    61d2:	fc 01       	movw	r30, r24
    61d4:	e8 58       	subi	r30, 0x88	; 136
    61d6:	f1 4f       	sbci	r31, 0xF1	; 241
    61d8:	11 82       	std	Z+1, r1	; 0x01
    61da:	10 82       	st	Z, r1
	cbCounter--;
    61dc:	80 91 de 0e 	lds	r24, 0x0EDE	; 0x800ede <cbCounter>
    61e0:	81 50       	subi	r24, 0x01	; 1
    61e2:	80 93 de 0e 	sts	0x0EDE, r24	; 0x800ede <cbCounter>
	if(cbCounter==0){
    61e6:	81 11       	cpse	r24, r1
    61e8:	02 c0       	rjmp	.+4      	; 0x61ee <TC2_HAL_cancel+0x38>
		stop_timer();		
    61ea:	0e 94 37 39 	call	0x726e	; 0x726e <stop_timer>
    61ee:	08 95       	ret

Disassembly of section .text.__vector_9:

0000493e <__vector_9>:
	}
}

ISR(TIMER2_COMPA_vect){
    493e:	1f 92       	push	r1
    4940:	0f 92       	push	r0
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	0f 92       	push	r0
    4946:	11 24       	eor	r1, r1
    4948:	2f 93       	push	r18
    494a:	3f 93       	push	r19
    494c:	4f 93       	push	r20
    494e:	5f 93       	push	r21
    4950:	6f 93       	push	r22
    4952:	7f 93       	push	r23
    4954:	8f 93       	push	r24
    4956:	9f 93       	push	r25
    4958:	af 93       	push	r26
    495a:	bf 93       	push	r27
    495c:	cf 93       	push	r28
    495e:	ef 93       	push	r30
    4960:	ff 93       	push	r31
	cnt++;
    4962:	80 91 dd 0e 	lds	r24, 0x0EDD	; 0x800edd <cnt>
    4966:	8f 5f       	subi	r24, 0xFF	; 255
    4968:	80 93 dd 0e 	sts	0x0EDD, r24	; 0x800edd <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    496c:	80 32       	cpi	r24, 0x20	; 32
    496e:	99 f4       	brne	.+38     	; 0x4996 <__vector_9+0x58>
		cnt=0;
    4970:	10 92 dd 0e 	sts	0x0EDD, r1	; 0x800edd <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    4974:	c0 e0       	ldi	r28, 0x00	; 0
    4976:	0d c0       	rjmp	.+26     	; 0x4992 <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    4978:	ec 2f       	mov	r30, r28
    497a:	f0 e0       	ldi	r31, 0x00	; 0
    497c:	ee 0f       	add	r30, r30
    497e:	ff 1f       	adc	r31, r31
    4980:	e8 58       	subi	r30, 0x88	; 136
    4982:	f1 4f       	sbci	r31, 0xF1	; 241
    4984:	01 90       	ld	r0, Z+
    4986:	f0 81       	ld	r31, Z
    4988:	e0 2d       	mov	r30, r0
    498a:	30 97       	sbiw	r30, 0x00	; 0
    498c:	09 f0       	breq	.+2      	; 0x4990 <__vector_9+0x52>
				callbacks[i]();
    498e:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    4990:	cf 5f       	subi	r28, 0xFF	; 255
    4992:	c5 30       	cpi	r28, 0x05	; 5
    4994:	88 f3       	brcs	.-30     	; 0x4978 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    4996:	ff 91       	pop	r31
    4998:	ef 91       	pop	r30
    499a:	cf 91       	pop	r28
    499c:	bf 91       	pop	r27
    499e:	af 91       	pop	r26
    49a0:	9f 91       	pop	r25
    49a2:	8f 91       	pop	r24
    49a4:	7f 91       	pop	r23
    49a6:	6f 91       	pop	r22
    49a8:	5f 91       	pop	r21
    49aa:	4f 91       	pop	r20
    49ac:	3f 91       	pop	r19
    49ae:	2f 91       	pop	r18
    49b0:	0f 90       	pop	r0
    49b2:	0f be       	out	0x3f, r0	; 63
    49b4:	0f 90       	pop	r0
    49b6:	1f 90       	pop	r1
    49b8:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00005a08 <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    5a08:	cf 92       	push	r12
    5a0a:	df 92       	push	r13
    5a0c:	ef 92       	push	r14
    5a0e:	cf 93       	push	r28
    5a10:	df 93       	push	r29
    5a12:	6a 01       	movw	r12, r20
    5a14:	e6 2e       	mov	r14, r22
    5a16:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    5a18:	60 e0       	ldi	r22, 0x00	; 0
    5a1a:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    5a1e:	81 11       	cpse	r24, r1
    5a20:	13 c0       	rjmp	.+38     	; 0x5a48 <start_and_write_data+0x40>
    5a22:	c0 e0       	ldi	r28, 0x00	; 0
    5a24:	0e c0       	rjmp	.+28     	; 0x5a42 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    5a26:	ae 2d       	mov	r26, r14
    5a28:	c6 01       	movw	r24, r12
    5a2a:	8c 0f       	add	r24, r28
    5a2c:	91 1d       	adc	r25, r1
    5a2e:	a1 1d       	adc	r26, r1
    5a30:	fc 01       	movw	r30, r24
    5a32:	84 91       	lpm	r24, Z
    5a34:	a7 fd       	sbrc	r26, 7
    5a36:	80 81       	ld	r24, Z
    5a38:	0e 94 95 35 	call	0x6b2a	; 0x6b2a <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    5a3c:	81 11       	cpse	r24, r1
    5a3e:	04 c0       	rjmp	.+8      	; 0x5a48 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    5a40:	cf 5f       	subi	r28, 0xFF	; 255
    5a42:	cd 17       	cp	r28, r29
    5a44:	80 f3       	brcs	.-32     	; 0x5a26 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    5a46:	80 e0       	ldi	r24, 0x00	; 0
}
    5a48:	df 91       	pop	r29
    5a4a:	cf 91       	pop	r28
    5a4c:	ef 90       	pop	r14
    5a4e:	df 90       	pop	r13
    5a50:	cf 90       	pop	r12
    5a52:	08 95       	ret

Disassembly of section .text.read_and_stop:

000054d8 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    54d8:	ef 92       	push	r14
    54da:	ff 92       	push	r15
    54dc:	0f 93       	push	r16
    54de:	1f 93       	push	r17
    54e0:	cf 93       	push	r28
    54e2:	df 93       	push	r29
    54e4:	8c 01       	movw	r16, r24
    54e6:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    54e8:	c0 e0       	ldi	r28, 0x00	; 0
    54ea:	08 c0       	rjmp	.+16     	; 0x54fc <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    54ec:	78 01       	movw	r14, r16
    54ee:	ec 0e       	add	r14, r28
    54f0:	f1 1c       	adc	r15, r1
    54f2:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <TWI_HAL_read_byte_ack>
    54f6:	f7 01       	movw	r30, r14
    54f8:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    54fa:	cf 5f       	subi	r28, 0xFF	; 255
    54fc:	2c 2f       	mov	r18, r28
    54fe:	30 e0       	ldi	r19, 0x00	; 0
    5500:	8d 2f       	mov	r24, r29
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	01 97       	sbiw	r24, 0x01	; 1
    5506:	28 17       	cp	r18, r24
    5508:	39 07       	cpc	r19, r25
    550a:	84 f3       	brlt	.-32     	; 0x54ec <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    550c:	8d 2f       	mov	r24, r29
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	01 97       	sbiw	r24, 0x01	; 1
    5512:	e8 01       	movw	r28, r16
    5514:	c8 0f       	add	r28, r24
    5516:	d9 1f       	adc	r29, r25
    5518:	0e 94 39 37 	call	0x6e72	; 0x6e72 <TWI_HAL_read_byte_nack>
    551c:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    551e:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    5522:	80 e0       	ldi	r24, 0x00	; 0
    5524:	df 91       	pop	r29
    5526:	cf 91       	pop	r28
    5528:	1f 91       	pop	r17
    552a:	0f 91       	pop	r16
    552c:	ff 90       	pop	r15
    552e:	ef 90       	pop	r14
    5530:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00006e4a <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6e4a:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6e4c:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <start_and_write_data>
    6e50:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    6e52:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    6e54:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <TWI_HAL_stop>
	}
	return status;
}
    6e58:	8c 2f       	mov	r24, r28
    6e5a:	cf 91       	pop	r28
    6e5c:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00006ce8 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6ce8:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6cea:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <start_and_write_data>
    6cee:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    6cf0:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    6cf4:	c1 11       	cpse	r28, r1
    6cf6:	02 c0       	rjmp	.+4      	; 0x6cfc <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    6cf8:	80 e0       	ldi	r24, 0x00	; 0
    6cfa:	01 c0       	rjmp	.+2      	; 0x6cfe <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    6cfc:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    6cfe:	cf 91       	pop	r28
    6d00:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00006562 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    6562:	0f 93       	push	r16
    6564:	1f 93       	push	r17
    6566:	cf 93       	push	r28
    6568:	df 93       	push	r29
    656a:	8b 01       	movw	r16, r22
    656c:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    656e:	61 e0       	ldi	r22, 0x01	; 1
    6570:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <TWI_HAL_start>
    6574:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    6576:	88 23       	and	r24, r24
    6578:	21 f0       	breq	.+8      	; 0x6582 <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    657a:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <TWI_HAL_stop>
		return status;	
    657e:	8c 2f       	mov	r24, r28
    6580:	04 c0       	rjmp	.+8      	; 0x658a <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    6582:	6d 2f       	mov	r22, r29
    6584:	c8 01       	movw	r24, r16
    6586:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <read_and_stop>
	
}
    658a:	df 91       	pop	r29
    658c:	cf 91       	pop	r28
    658e:	1f 91       	pop	r17
    6590:	0f 91       	pop	r16
    6592:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

0000665c <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    665c:	0f 93       	push	r16
    665e:	1f 93       	push	r17
    6660:	cf 93       	push	r28
    6662:	df 93       	push	r29
    6664:	8b 01       	movw	r16, r22
    6666:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    6668:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <TWI_HAL_repeated_start>
    666c:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    666e:	88 23       	and	r24, r24
    6670:	21 f0       	breq	.+8      	; 0x667a <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    6672:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <TWI_HAL_stop>
		return status;
    6676:	8c 2f       	mov	r24, r28
    6678:	04 c0       	rjmp	.+8      	; 0x6682 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    667a:	6d 2f       	mov	r22, r29
    667c:	c8 01       	movw	r24, r16
    667e:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <read_and_stop>
	
}
    6682:	df 91       	pop	r29
    6684:	cf 91       	pop	r28
    6686:	1f 91       	pop	r17
    6688:	0f 91       	pop	r16
    668a:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00006eae <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    6eae:	80 e2       	ldi	r24, 0x20	; 32
    6eb0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    6eb4:	e9 eb       	ldi	r30, 0xB9	; 185
    6eb6:	f0 e0       	ldi	r31, 0x00	; 0
    6eb8:	80 81       	ld	r24, Z
    6eba:	8c 7f       	andi	r24, 0xFC	; 252
    6ebc:	80 83       	st	Z, r24
    6ebe:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

00005cb0 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	88 0f       	add	r24, r24
    5cb4:	99 1f       	adc	r25, r25
    5cb6:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    5cb8:	84 ea       	ldi	r24, 0xA4	; 164
    5cba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5cbe:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5cc2:	99 23       	and	r25, r25
    5cc4:	e4 f7       	brge	.-8      	; 0x5cbe <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    5cc6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5cca:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    5ccc:	88 30       	cpi	r24, 0x08	; 8
    5cce:	99 f4       	brne	.+38     	; 0x5cf6 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    5cd0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    5cd4:	84 e8       	ldi	r24, 0x84	; 132
    5cd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5cda:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5cde:	88 23       	and	r24, r24
    5ce0:	e4 f7       	brge	.-8      	; 0x5cda <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    5ce2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5ce6:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    5ce8:	88 31       	cpi	r24, 0x18	; 24
    5cea:	21 f0       	breq	.+8      	; 0x5cf4 <TWI_HAL_start+0x44>
    5cec:	80 34       	cpi	r24, 0x40	; 64
    5cee:	19 f4       	brne	.+6      	; 0x5cf6 <TWI_HAL_start+0x46>
    5cf0:	80 e0       	ldi	r24, 0x00	; 0
    5cf2:	08 95       	ret
    5cf4:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    5cf6:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00005ffc <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    5ffc:	90 e0       	ldi	r25, 0x00	; 0
    5ffe:	88 0f       	add	r24, r24
    6000:	99 1f       	adc	r25, r25
    6002:	28 2f       	mov	r18, r24
    6004:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    6006:	84 ea       	ldi	r24, 0xA4	; 164
    6008:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    600c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6010:	99 23       	and	r25, r25
    6012:	e4 f7       	brge	.-8      	; 0x600c <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    6014:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    6018:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    601a:	80 31       	cpi	r24, 0x10	; 16
    601c:	79 f4       	brne	.+30     	; 0x603c <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    601e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    6022:	84 e8       	ldi	r24, 0x84	; 132
    6024:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    6028:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    602c:	88 23       	and	r24, r24
    602e:	e4 f7       	brge	.-8      	; 0x6028 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    6030:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    6034:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    6036:	80 34       	cpi	r24, 0x40	; 64
    6038:	09 f4       	brne	.+2      	; 0x603c <TWI_HAL_repeated_start+0x40>
    603a:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    603c:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00006b2a <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    6b2a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    6b2e:	84 e8       	ldi	r24, 0x84	; 132
    6b30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    6b34:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6b38:	88 23       	and	r24, r24
    6b3a:	e4 f7       	brge	.-8      	; 0x6b34 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    6b3c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    6b40:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    6b42:	88 32       	cpi	r24, 0x28	; 40
    6b44:	09 f4       	brne	.+2      	; 0x6b48 <TWI_HAL_write_byte+0x1e>
    6b46:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    6b48:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00006e5e <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    6e5e:	84 ec       	ldi	r24, 0xC4	; 196
    6e60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    6e64:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6e68:	88 23       	and	r24, r24
    6e6a:	e4 f7       	brge	.-8      	; 0x6e64 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    6e6c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6e70:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00006e72 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    6e72:	84 e8       	ldi	r24, 0x84	; 132
    6e74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    6e78:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6e7c:	88 23       	and	r24, r24
    6e7e:	e4 f7       	brge	.-8      	; 0x6e78 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    6e80:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6e84:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00006f50 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    6f50:	84 e9       	ldi	r24, 0x94	; 148
    6f52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    6f56:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6f5a:	84 fd       	sbrc	r24, 4
    6f5c:	fc cf       	rjmp	.-8      	; 0x6f56 <TWI_HAL_stop+0x6>
}
    6f5e:	08 95       	ret

Disassembly of section .text.copy_buffer:

0000680c <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    680c:	bc 01       	movw	r22, r24
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	09 c0       	rjmp	.+18     	; 0x6824 <copy_buffer+0x18>
    6812:	fb 01       	movw	r30, r22
    6814:	e9 0f       	add	r30, r25
    6816:	f1 1d       	adc	r31, r1
    6818:	da 01       	movw	r26, r20
    681a:	a0 50       	subi	r26, 0x00	; 0
    681c:	bf 4f       	sbci	r27, 0xFF	; 255
    681e:	2c 91       	ld	r18, X
    6820:	20 83       	st	Z, r18
    6822:	9f 5f       	subi	r25, 0xFF	; 255
    6824:	49 2f       	mov	r20, r25
    6826:	50 e0       	ldi	r21, 0x00	; 0
    6828:	20 91 e0 0e 	lds	r18, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    682c:	30 e0       	ldi	r19, 0x00	; 0
    682e:	22 50       	subi	r18, 0x02	; 2
    6830:	31 09       	sbc	r19, r1
    6832:	42 17       	cp	r20, r18
    6834:	53 07       	cpc	r21, r19
    6836:	6c f3       	brlt	.-38     	; 0x6812 <copy_buffer+0x6>
    6838:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

0000613e <uart0_hal_init>:
    613e:	e1 ec       	ldi	r30, 0xC1	; 193
    6140:	f0 e0       	ldi	r31, 0x00	; 0
    6142:	80 81       	ld	r24, Z
    6144:	80 61       	ori	r24, 0x10	; 16
    6146:	80 83       	st	Z, r24
    6148:	80 81       	ld	r24, Z
    614a:	88 60       	ori	r24, 0x08	; 8
    614c:	80 83       	st	Z, r24
    614e:	80 81       	ld	r24, Z
    6150:	80 68       	ori	r24, 0x80	; 128
    6152:	80 83       	st	Z, r24
    6154:	80 81       	ld	r24, Z
    6156:	80 64       	ori	r24, 0x40	; 64
    6158:	80 83       	st	Z, r24
    615a:	e0 ec       	ldi	r30, 0xC0	; 192
    615c:	f0 e0       	ldi	r31, 0x00	; 0
    615e:	80 81       	ld	r24, Z
    6160:	82 60       	ori	r24, 0x02	; 2
    6162:	80 83       	st	Z, r24
    6164:	86 e0       	ldi	r24, 0x06	; 6
    6166:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    616a:	80 e1       	ldi	r24, 0x10	; 16
    616c:	90 e0       	ldi	r25, 0x00	; 0
    616e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    6172:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    6176:	78 94       	sei
    6178:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

0000591e <uart0_hal_send_message>:
    591e:	dc 01       	movw	r26, r24
    5920:	80 91 c1 0e 	lds	r24, 0x0EC1	; 0x800ec1 <tx_buffer_data_len>
    5924:	90 91 c2 0e 	lds	r25, 0x0EC2	; 0x800ec2 <tx_buffer_data_len+0x1>
    5928:	89 2b       	or	r24, r25
    592a:	d1 f7       	brne	.-12     	; 0x5920 <uart0_hal_send_message+0x2>
    592c:	90 e0       	ldi	r25, 0x00	; 0
    592e:	0b c0       	rjmp	.+22     	; 0x5946 <uart0_hal_send_message+0x28>
    5930:	29 2f       	mov	r18, r25
    5932:	30 e0       	ldi	r19, 0x00	; 0
    5934:	fd 01       	movw	r30, r26
    5936:	e2 0f       	add	r30, r18
    5938:	f3 1f       	adc	r31, r19
    593a:	40 81       	ld	r20, Z
    593c:	f9 01       	movw	r30, r18
    593e:	ea 56       	subi	r30, 0x6A	; 106
    5940:	fe 4f       	sbci	r31, 0xFE	; 254
    5942:	40 83       	st	Z, r20
    5944:	9f 5f       	subi	r25, 0xFF	; 255
    5946:	96 17       	cp	r25, r22
    5948:	98 f3       	brcs	.-26     	; 0x5930 <uart0_hal_send_message+0x12>
    594a:	86 2f       	mov	r24, r22
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	90 93 c2 0e 	sts	0x0EC2, r25	; 0x800ec2 <tx_buffer_data_len+0x1>
    5952:	80 93 c1 0e 	sts	0x0EC1, r24	; 0x800ec1 <tx_buffer_data_len>
    5956:	81 e0       	ldi	r24, 0x01	; 1
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	90 93 c0 0e 	sts	0x0EC0, r25	; 0x800ec0 <tx_buffer_cursor+0x1>
    595e:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <tx_buffer_cursor>
    5962:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    5966:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    596a:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

000048c0 <uart0_hal_send_string>:
    48c0:	6f 92       	push	r6
    48c2:	7f 92       	push	r7
    48c4:	8f 92       	push	r8
    48c6:	cf 92       	push	r12
    48c8:	df 92       	push	r13
    48ca:	ef 92       	push	r14
    48cc:	3b 01       	movw	r6, r22
    48ce:	88 2e       	mov	r8, r24
    48d0:	80 91 c1 0e 	lds	r24, 0x0EC1	; 0x800ec1 <tx_buffer_data_len>
    48d4:	90 91 c2 0e 	lds	r25, 0x0EC2	; 0x800ec2 <tx_buffer_data_len+0x1>
    48d8:	89 2b       	or	r24, r25
    48da:	d1 f7       	brne	.-12     	; 0x48d0 <uart0_hal_send_string+0x10>
    48dc:	88 2d       	mov	r24, r8
    48de:	b3 01       	movw	r22, r6
    48e0:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    48e4:	bc 01       	movw	r22, r24
    48e6:	20 e0       	ldi	r18, 0x00	; 0
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	11 c0       	rjmp	.+34     	; 0x490e <uart0_hal_send_string+0x4e>
    48ec:	e8 2c       	mov	r14, r8
    48ee:	63 01       	movw	r12, r6
    48f0:	c2 0e       	add	r12, r18
    48f2:	d3 1e       	adc	r13, r19
    48f4:	e1 1c       	adc	r14, r1
    48f6:	37 fd       	sbrc	r19, 7
    48f8:	ea 94       	dec	r14
    48fa:	f6 01       	movw	r30, r12
    48fc:	94 91       	lpm	r25, Z
    48fe:	e7 fc       	sbrc	r14, 7
    4900:	90 81       	ld	r25, Z
    4902:	f9 01       	movw	r30, r18
    4904:	ea 56       	subi	r30, 0x6A	; 106
    4906:	fe 4f       	sbci	r31, 0xFE	; 254
    4908:	90 83       	st	Z, r25
    490a:	2f 5f       	subi	r18, 0xFF	; 255
    490c:	3f 4f       	sbci	r19, 0xFF	; 255
    490e:	26 17       	cp	r18, r22
    4910:	37 07       	cpc	r19, r23
    4912:	60 f3       	brcs	.-40     	; 0x48ec <uart0_hal_send_string+0x2c>
    4914:	70 93 c2 0e 	sts	0x0EC2, r23	; 0x800ec2 <tx_buffer_data_len+0x1>
    4918:	60 93 c1 0e 	sts	0x0EC1, r22	; 0x800ec1 <tx_buffer_data_len>
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	90 93 c0 0e 	sts	0x0EC0, r25	; 0x800ec0 <tx_buffer_cursor+0x1>
    4924:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <tx_buffer_cursor>
    4928:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    492c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4930:	ef 90       	pop	r14
    4932:	df 90       	pop	r13
    4934:	cf 90       	pop	r12
    4936:	8f 90       	pop	r8
    4938:	7f 90       	pop	r7
    493a:	6f 90       	pop	r6
    493c:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00006fd4 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    6fd4:	90 91 df 0e 	lds	r25, 0x0EDF	; 0x800edf <rx_buffer_has_message>
    6fd8:	81 e0       	ldi	r24, 0x01	; 1
    6fda:	91 11       	cpse	r25, r1
    6fdc:	01 c0       	rjmp	.+2      	; 0x6fe0 <uart0_hal_message_ready+0xc>
    6fde:	80 e0       	ldi	r24, 0x00	; 0
}
    6fe0:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00007194 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    7194:	10 92 df 0e 	sts	0x0EDF, r1	; 0x800edf <rx_buffer_has_message>
	rx_buffer_data_len=0;
    7198:	10 92 e0 0e 	sts	0x0EE0, r1	; 0x800ee0 <rx_buffer_data_len>
    719c:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

000068ea <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    68ea:	0f 93       	push	r16
    68ec:	1f 93       	push	r17
    68ee:	cf 93       	push	r28
    68f0:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    68f2:	0e 94 06 34 	call	0x680c	; 0x680c <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    68f6:	c0 91 e0 0e 	lds	r28, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    68fa:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    68fc:	f8 01       	movw	r30, r16
    68fe:	ec 0f       	add	r30, r28
    6900:	f1 1d       	adc	r31, r1
    6902:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    6904:	0e 94 ca 38 	call	0x7194	; 0x7194 <uart0_hal_clear_rx_buffer>
	return len;
}
    6908:	8c 2f       	mov	r24, r28
    690a:	cf 91       	pop	r28
    690c:	1f 91       	pop	r17
    690e:	0f 91       	pop	r16
    6910:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

00005e18 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5e18:	cf 93       	push	r28
    5e1a:	df 93       	push	r29
    5e1c:	1f 92       	push	r1
    5e1e:	cd b7       	in	r28, 0x3d	; 61
    5e20:	de b7       	in	r29, 0x3e	; 62
    5e22:	9a b1       	in	r25, 0x0a	; 10
    5e24:	92 60       	ori	r25, 0x02	; 2
    5e26:	9a b9       	out	0x0a, r25	; 10
    5e28:	e1 ec       	ldi	r30, 0xC1	; 193
    5e2a:	f0 e0       	ldi	r31, 0x00	; 0
    5e2c:	90 81       	ld	r25, Z
    5e2e:	97 7f       	andi	r25, 0xF7	; 247
    5e30:	90 83       	st	Z, r25
    5e32:	9b b1       	in	r25, 0x0b	; 11
    5e34:	9d 7f       	andi	r25, 0xFD	; 253
    5e36:	9b b9       	out	0x0b, r25	; 11
    5e38:	af e9       	ldi	r26, 0x9F	; 159
    5e3a:	bf e0       	ldi	r27, 0x0F	; 15
    5e3c:	11 97       	sbiw	r26, 0x01	; 1
    5e3e:	f1 f7       	brne	.-4      	; 0x5e3c <uart0_hal_send_break+0x24>
    5e40:	00 c0       	rjmp	.+0      	; 0x5e42 <uart0_hal_send_break+0x2a>
    5e42:	00 00       	nop
    5e44:	90 81       	ld	r25, Z
    5e46:	98 60       	ori	r25, 0x08	; 8
    5e48:	90 83       	st	Z, r25
    5e4a:	89 83       	std	Y+1, r24	; 0x01
    5e4c:	61 e0       	ldi	r22, 0x01	; 1
    5e4e:	ce 01       	movw	r24, r28
    5e50:	01 96       	adiw	r24, 0x01	; 1
    5e52:	0e 94 8f 2c 	call	0x591e	; 0x591e <uart0_hal_send_message>
    5e56:	0f 90       	pop	r0
    5e58:	df 91       	pop	r29
    5e5a:	cf 91       	pop	r28
    5e5c:	08 95       	ret

Disassembly of section .text.__vector_22:

00004f40 <__vector_22>:
    4f40:	1f 92       	push	r1
    4f42:	0f 92       	push	r0
    4f44:	0f b6       	in	r0, 0x3f	; 63
    4f46:	0f 92       	push	r0
    4f48:	11 24       	eor	r1, r1
    4f4a:	2f 93       	push	r18
    4f4c:	3f 93       	push	r19
    4f4e:	8f 93       	push	r24
    4f50:	9f 93       	push	r25
    4f52:	ef 93       	push	r30
    4f54:	ff 93       	push	r31
    4f56:	80 91 bf 0e 	lds	r24, 0x0EBF	; 0x800ebf <tx_buffer_cursor>
    4f5a:	90 91 c0 0e 	lds	r25, 0x0EC0	; 0x800ec0 <tx_buffer_cursor+0x1>
    4f5e:	20 91 c1 0e 	lds	r18, 0x0EC1	; 0x800ec1 <tx_buffer_data_len>
    4f62:	30 91 c2 0e 	lds	r19, 0x0EC2	; 0x800ec2 <tx_buffer_data_len+0x1>
    4f66:	82 17       	cp	r24, r18
    4f68:	93 07       	cpc	r25, r19
    4f6a:	70 f4       	brcc	.+28     	; 0x4f88 <__vector_22+0x48>
    4f6c:	9c 01       	movw	r18, r24
    4f6e:	2f 5f       	subi	r18, 0xFF	; 255
    4f70:	3f 4f       	sbci	r19, 0xFF	; 255
    4f72:	30 93 c0 0e 	sts	0x0EC0, r19	; 0x800ec0 <tx_buffer_cursor+0x1>
    4f76:	20 93 bf 0e 	sts	0x0EBF, r18	; 0x800ebf <tx_buffer_cursor>
    4f7a:	fc 01       	movw	r30, r24
    4f7c:	ea 56       	subi	r30, 0x6A	; 106
    4f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f80:	80 81       	ld	r24, Z
    4f82:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4f86:	08 c0       	rjmp	.+16     	; 0x4f98 <__vector_22+0x58>
    4f88:	10 92 c0 0e 	sts	0x0EC0, r1	; 0x800ec0 <tx_buffer_cursor+0x1>
    4f8c:	10 92 bf 0e 	sts	0x0EBF, r1	; 0x800ebf <tx_buffer_cursor>
    4f90:	10 92 c2 0e 	sts	0x0EC2, r1	; 0x800ec2 <tx_buffer_data_len+0x1>
    4f94:	10 92 c1 0e 	sts	0x0EC1, r1	; 0x800ec1 <tx_buffer_data_len>
    4f98:	ff 91       	pop	r31
    4f9a:	ef 91       	pop	r30
    4f9c:	9f 91       	pop	r25
    4f9e:	8f 91       	pop	r24
    4fa0:	3f 91       	pop	r19
    4fa2:	2f 91       	pop	r18
    4fa4:	0f 90       	pop	r0
    4fa6:	0f be       	out	0x3f, r0	; 63
    4fa8:	0f 90       	pop	r0
    4faa:	1f 90       	pop	r1
    4fac:	18 95       	reti

Disassembly of section .text.__vector_20:

00004d06 <__vector_20>:
    4d06:	1f 92       	push	r1
    4d08:	0f 92       	push	r0
    4d0a:	0f b6       	in	r0, 0x3f	; 63
    4d0c:	0f 92       	push	r0
    4d0e:	11 24       	eor	r1, r1
    4d10:	2f 93       	push	r18
    4d12:	8f 93       	push	r24
    4d14:	9f 93       	push	r25
    4d16:	ef 93       	push	r30
    4d18:	ff 93       	push	r31
    4d1a:	80 91 df 0e 	lds	r24, 0x0EDF	; 0x800edf <rx_buffer_has_message>
    4d1e:	81 11       	cpse	r24, r1
    4d20:	0e c0       	rjmp	.+28     	; 0x4d3e <__vector_20+0x38>
    4d22:	e0 91 e0 0e 	lds	r30, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    4d26:	e6 39       	cpi	r30, 0x96	; 150
    4d28:	50 f4       	brcc	.+20     	; 0x4d3e <__vector_20+0x38>
    4d2a:	81 e0       	ldi	r24, 0x01	; 1
    4d2c:	8e 0f       	add	r24, r30
    4d2e:	80 93 e0 0e 	sts	0x0EE0, r24	; 0x800ee0 <rx_buffer_data_len>
    4d32:	f0 e0       	ldi	r31, 0x00	; 0
    4d34:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    4d38:	e0 50       	subi	r30, 0x00	; 0
    4d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3c:	80 83       	st	Z, r24
    4d3e:	80 91 e0 0e 	lds	r24, 0x0EE0	; 0x800ee0 <rx_buffer_data_len>
    4d42:	83 30       	cpi	r24, 0x03	; 3
    4d44:	80 f0       	brcs	.+32     	; 0x4d66 <__vector_20+0x60>
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	fc 01       	movw	r30, r24
    4d4a:	e1 50       	subi	r30, 0x01	; 1
    4d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4e:	20 81       	ld	r18, Z
    4d50:	2a 30       	cpi	r18, 0x0A	; 10
    4d52:	49 f4       	brne	.+18     	; 0x4d66 <__vector_20+0x60>
    4d54:	fc 01       	movw	r30, r24
    4d56:	e2 50       	subi	r30, 0x02	; 2
    4d58:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5a:	80 81       	ld	r24, Z
    4d5c:	8d 30       	cpi	r24, 0x0D	; 13
    4d5e:	19 f4       	brne	.+6      	; 0x4d66 <__vector_20+0x60>
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	80 93 df 0e 	sts	0x0EDF, r24	; 0x800edf <rx_buffer_has_message>
    4d66:	ff 91       	pop	r31
    4d68:	ef 91       	pop	r30
    4d6a:	9f 91       	pop	r25
    4d6c:	8f 91       	pop	r24
    4d6e:	2f 91       	pop	r18
    4d70:	0f 90       	pop	r0
    4d72:	0f be       	out	0x3f, r0	; 63
    4d74:	0f 90       	pop	r0
    4d76:	1f 90       	pop	r1
    4d78:	18 95       	reti

Disassembly of section .text.copy_buffer:

0000683a <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    683a:	bc 01       	movw	r22, r24
    683c:	90 e0       	ldi	r25, 0x00	; 0
    683e:	09 c0       	rjmp	.+18     	; 0x6852 <copy_buffer+0x18>
    6840:	fb 01       	movw	r30, r22
    6842:	e9 0f       	add	r30, r25
    6844:	f1 1d       	adc	r31, r1
    6846:	da 01       	movw	r26, r20
    6848:	a5 57       	subi	r26, 0x75	; 117
    684a:	b2 4f       	sbci	r27, 0xF2	; 242
    684c:	2c 91       	ld	r18, X
    684e:	20 83       	st	Z, r18
    6850:	9f 5f       	subi	r25, 0xFF	; 255
    6852:	49 2f       	mov	r20, r25
    6854:	50 e0       	ldi	r21, 0x00	; 0
    6856:	20 91 e2 0e 	lds	r18, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    685a:	30 e0       	ldi	r19, 0x00	; 0
    685c:	22 50       	subi	r18, 0x02	; 2
    685e:	31 09       	sbc	r19, r1
    6860:	42 17       	cp	r20, r18
    6862:	53 07       	cpc	r21, r19
    6864:	6c f3       	brlt	.-38     	; 0x6840 <copy_buffer+0x6>
    6866:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

0000617a <uart1_hal_init>:
    617a:	e9 ec       	ldi	r30, 0xC9	; 201
    617c:	f0 e0       	ldi	r31, 0x00	; 0
    617e:	80 81       	ld	r24, Z
    6180:	80 61       	ori	r24, 0x10	; 16
    6182:	80 83       	st	Z, r24
    6184:	80 81       	ld	r24, Z
    6186:	88 60       	ori	r24, 0x08	; 8
    6188:	80 83       	st	Z, r24
    618a:	80 81       	ld	r24, Z
    618c:	80 68       	ori	r24, 0x80	; 128
    618e:	80 83       	st	Z, r24
    6190:	80 81       	ld	r24, Z
    6192:	80 64       	ori	r24, 0x40	; 64
    6194:	80 83       	st	Z, r24
    6196:	e8 ec       	ldi	r30, 0xC8	; 200
    6198:	f0 e0       	ldi	r31, 0x00	; 0
    619a:	80 81       	ld	r24, Z
    619c:	82 60       	ori	r24, 0x02	; 2
    619e:	80 83       	st	Z, r24
    61a0:	86 e0       	ldi	r24, 0x06	; 6
    61a2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    61a6:	80 e1       	ldi	r24, 0x10	; 16
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    61ae:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    61b2:	78 94       	sei
    61b4:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

000044c2 <uart1_hal_send_string>:
    44c2:	6f 92       	push	r6
    44c4:	7f 92       	push	r7
    44c6:	8f 92       	push	r8
    44c8:	cf 92       	push	r12
    44ca:	df 92       	push	r13
    44cc:	ef 92       	push	r14
    44ce:	3b 01       	movw	r6, r22
    44d0:	88 2e       	mov	r8, r24
    44d2:	80 91 c5 0e 	lds	r24, 0x0EC5	; 0x800ec5 <tx_buffer_data_len>
    44d6:	90 91 c6 0e 	lds	r25, 0x0EC6	; 0x800ec6 <tx_buffer_data_len+0x1>
    44da:	89 2b       	or	r24, r25
    44dc:	d1 f7       	brne	.-12     	; 0x44d2 <uart1_hal_send_string+0x10>
    44de:	88 2d       	mov	r24, r8
    44e0:	b3 01       	movw	r22, r6
    44e2:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    44e6:	bc 01       	movw	r22, r24
    44e8:	20 e0       	ldi	r18, 0x00	; 0
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	11 c0       	rjmp	.+34     	; 0x4510 <uart1_hal_send_string+0x4e>
    44ee:	e8 2c       	mov	r14, r8
    44f0:	63 01       	movw	r12, r6
    44f2:	c2 0e       	add	r12, r18
    44f4:	d3 1e       	adc	r13, r19
    44f6:	e1 1c       	adc	r14, r1
    44f8:	37 fd       	sbrc	r19, 7
    44fa:	ea 94       	dec	r14
    44fc:	f6 01       	movw	r30, r12
    44fe:	94 91       	lpm	r25, Z
    4500:	e7 fc       	sbrc	r14, 7
    4502:	90 81       	ld	r25, Z
    4504:	f9 01       	movw	r30, r18
    4506:	e8 52       	subi	r30, 0x28	; 40
    4508:	f8 4f       	sbci	r31, 0xF8	; 248
    450a:	90 83       	st	Z, r25
    450c:	2f 5f       	subi	r18, 0xFF	; 255
    450e:	3f 4f       	sbci	r19, 0xFF	; 255
    4510:	26 17       	cp	r18, r22
    4512:	37 07       	cpc	r19, r23
    4514:	60 f3       	brcs	.-40     	; 0x44ee <uart1_hal_send_string+0x2c>
    4516:	fb 01       	movw	r30, r22
    4518:	e8 52       	subi	r30, 0x28	; 40
    451a:	f8 4f       	sbci	r31, 0xF8	; 248
    451c:	8d e0       	ldi	r24, 0x0D	; 13
    451e:	80 83       	st	Z, r24
    4520:	fb 01       	movw	r30, r22
    4522:	e7 52       	subi	r30, 0x27	; 39
    4524:	f8 4f       	sbci	r31, 0xF8	; 248
    4526:	8a e0       	ldi	r24, 0x0A	; 10
    4528:	80 83       	st	Z, r24
    452a:	6e 5f       	subi	r22, 0xFE	; 254
    452c:	7f 4f       	sbci	r23, 0xFF	; 255
    452e:	70 93 c6 0e 	sts	0x0EC6, r23	; 0x800ec6 <tx_buffer_data_len+0x1>
    4532:	60 93 c5 0e 	sts	0x0EC5, r22	; 0x800ec5 <tx_buffer_data_len>
    4536:	81 e0       	ldi	r24, 0x01	; 1
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	90 93 c4 0e 	sts	0x0EC4, r25	; 0x800ec4 <tx_buffer_cursor+0x1>
    453e:	80 93 c3 0e 	sts	0x0EC3, r24	; 0x800ec3 <tx_buffer_cursor>
    4542:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <_end>
    4546:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    454a:	ef 90       	pop	r14
    454c:	df 90       	pop	r13
    454e:	cf 90       	pop	r12
    4550:	8f 90       	pop	r8
    4552:	7f 90       	pop	r7
    4554:	6f 90       	pop	r6
    4556:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00006fe2 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    6fe2:	90 91 e1 0e 	lds	r25, 0x0EE1	; 0x800ee1 <rx_buffer_has_message>
    6fe6:	81 e0       	ldi	r24, 0x01	; 1
    6fe8:	91 11       	cpse	r25, r1
    6fea:	01 c0       	rjmp	.+2      	; 0x6fee <uart1_hal_message_ready+0xc>
    6fec:	80 e0       	ldi	r24, 0x00	; 0
}
    6fee:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00006ff0 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    6ff0:	90 91 e2 0e 	lds	r25, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    6ff4:	81 e0       	ldi	r24, 0x01	; 1
    6ff6:	9a 34       	cpi	r25, 0x4A	; 74
    6ff8:	08 f4       	brcc	.+2      	; 0x6ffc <uart1_hal_rx_full+0xc>
    6ffa:	80 e0       	ldi	r24, 0x00	; 0
}
    6ffc:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

0000719e <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    719e:	10 92 e1 0e 	sts	0x0EE1, r1	; 0x800ee1 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    71a2:	10 92 e2 0e 	sts	0x0EE2, r1	; 0x800ee2 <rx_buffer_data_len>
    71a6:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00006912 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    6912:	0f 93       	push	r16
    6914:	1f 93       	push	r17
    6916:	cf 93       	push	r28
    6918:	8c 01       	movw	r16, r24
    691a:	0e 94 1d 34 	call	0x683a	; 0x683a <copy_buffer>
    691e:	c0 91 e2 0e 	lds	r28, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    6922:	c2 50       	subi	r28, 0x02	; 2
    6924:	f8 01       	movw	r30, r16
    6926:	ec 0f       	add	r30, r28
    6928:	f1 1d       	adc	r31, r1
    692a:	10 82       	st	Z, r1
    692c:	0e 94 cf 38 	call	0x719e	; 0x719e <uart1_hal_clear_rx_buffer>
    6930:	8c 2f       	mov	r24, r28
    6932:	cf 91       	pop	r28
    6934:	1f 91       	pop	r17
    6936:	0f 91       	pop	r16
    6938:	08 95       	ret

Disassembly of section .text.__vector_30:

00004fae <__vector_30>:
    4fae:	1f 92       	push	r1
    4fb0:	0f 92       	push	r0
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	0f 92       	push	r0
    4fb6:	11 24       	eor	r1, r1
    4fb8:	2f 93       	push	r18
    4fba:	3f 93       	push	r19
    4fbc:	8f 93       	push	r24
    4fbe:	9f 93       	push	r25
    4fc0:	ef 93       	push	r30
    4fc2:	ff 93       	push	r31
    4fc4:	80 91 c3 0e 	lds	r24, 0x0EC3	; 0x800ec3 <tx_buffer_cursor>
    4fc8:	90 91 c4 0e 	lds	r25, 0x0EC4	; 0x800ec4 <tx_buffer_cursor+0x1>
    4fcc:	20 91 c5 0e 	lds	r18, 0x0EC5	; 0x800ec5 <tx_buffer_data_len>
    4fd0:	30 91 c6 0e 	lds	r19, 0x0EC6	; 0x800ec6 <tx_buffer_data_len+0x1>
    4fd4:	82 17       	cp	r24, r18
    4fd6:	93 07       	cpc	r25, r19
    4fd8:	70 f4       	brcc	.+28     	; 0x4ff6 <__vector_30+0x48>
    4fda:	9c 01       	movw	r18, r24
    4fdc:	2f 5f       	subi	r18, 0xFF	; 255
    4fde:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe0:	30 93 c4 0e 	sts	0x0EC4, r19	; 0x800ec4 <tx_buffer_cursor+0x1>
    4fe4:	20 93 c3 0e 	sts	0x0EC3, r18	; 0x800ec3 <tx_buffer_cursor>
    4fe8:	fc 01       	movw	r30, r24
    4fea:	e8 52       	subi	r30, 0x28	; 40
    4fec:	f8 4f       	sbci	r31, 0xF8	; 248
    4fee:	80 81       	ld	r24, Z
    4ff0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4ff4:	08 c0       	rjmp	.+16     	; 0x5006 <__vector_30+0x58>
    4ff6:	10 92 c4 0e 	sts	0x0EC4, r1	; 0x800ec4 <tx_buffer_cursor+0x1>
    4ffa:	10 92 c3 0e 	sts	0x0EC3, r1	; 0x800ec3 <tx_buffer_cursor>
    4ffe:	10 92 c6 0e 	sts	0x0EC6, r1	; 0x800ec6 <tx_buffer_data_len+0x1>
    5002:	10 92 c5 0e 	sts	0x0EC5, r1	; 0x800ec5 <tx_buffer_data_len>
    5006:	ff 91       	pop	r31
    5008:	ef 91       	pop	r30
    500a:	9f 91       	pop	r25
    500c:	8f 91       	pop	r24
    500e:	3f 91       	pop	r19
    5010:	2f 91       	pop	r18
    5012:	0f 90       	pop	r0
    5014:	0f be       	out	0x3f, r0	; 63
    5016:	0f 90       	pop	r0
    5018:	1f 90       	pop	r1
    501a:	18 95       	reti

Disassembly of section .text.__vector_28:

00004d7a <__vector_28>:
    4d7a:	1f 92       	push	r1
    4d7c:	0f 92       	push	r0
    4d7e:	0f b6       	in	r0, 0x3f	; 63
    4d80:	0f 92       	push	r0
    4d82:	11 24       	eor	r1, r1
    4d84:	2f 93       	push	r18
    4d86:	8f 93       	push	r24
    4d88:	9f 93       	push	r25
    4d8a:	ef 93       	push	r30
    4d8c:	ff 93       	push	r31
    4d8e:	80 91 e1 0e 	lds	r24, 0x0EE1	; 0x800ee1 <rx_buffer_has_message>
    4d92:	81 11       	cpse	r24, r1
    4d94:	0e c0       	rjmp	.+28     	; 0x4db2 <__vector_28+0x38>
    4d96:	e0 91 e2 0e 	lds	r30, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    4d9a:	eb 34       	cpi	r30, 0x4B	; 75
    4d9c:	50 f4       	brcc	.+20     	; 0x4db2 <__vector_28+0x38>
    4d9e:	81 e0       	ldi	r24, 0x01	; 1
    4da0:	8e 0f       	add	r24, r30
    4da2:	80 93 e2 0e 	sts	0x0EE2, r24	; 0x800ee2 <rx_buffer_data_len>
    4da6:	f0 e0       	ldi	r31, 0x00	; 0
    4da8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4dac:	e5 57       	subi	r30, 0x75	; 117
    4dae:	f2 4f       	sbci	r31, 0xF2	; 242
    4db0:	80 83       	st	Z, r24
    4db2:	80 91 e2 0e 	lds	r24, 0x0EE2	; 0x800ee2 <rx_buffer_data_len>
    4db6:	83 30       	cpi	r24, 0x03	; 3
    4db8:	80 f0       	brcs	.+32     	; 0x4dda <__vector_28+0x60>
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	e6 57       	subi	r30, 0x76	; 118
    4dc0:	f2 4f       	sbci	r31, 0xF2	; 242
    4dc2:	20 81       	ld	r18, Z
    4dc4:	2a 30       	cpi	r18, 0x0A	; 10
    4dc6:	49 f4       	brne	.+18     	; 0x4dda <__vector_28+0x60>
    4dc8:	fc 01       	movw	r30, r24
    4dca:	e7 57       	subi	r30, 0x77	; 119
    4dcc:	f2 4f       	sbci	r31, 0xF2	; 242
    4dce:	80 81       	ld	r24, Z
    4dd0:	8d 30       	cpi	r24, 0x0D	; 13
    4dd2:	19 f4       	brne	.+6      	; 0x4dda <__vector_28+0x60>
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	80 93 e1 0e 	sts	0x0EE1, r24	; 0x800ee1 <rx_buffer_has_message>
    4dda:	ff 91       	pop	r31
    4ddc:	ef 91       	pop	r30
    4dde:	9f 91       	pop	r25
    4de0:	8f 91       	pop	r24
    4de2:	2f 91       	pop	r18
    4de4:	0f 90       	pop	r0
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	0f 90       	pop	r0
    4dea:	1f 90       	pop	r1
    4dec:	18 95       	reti

Disassembly of section .text.UI_HAL_jumper_init:

00006ffe <UI_HAL_jumper_init>:

#include "UI_HAL.h"
#include "../../util/bit_operators.h"

void UI_HAL_jumper_init(){
	clear_bit(DDRA, 6);
    6ffe:	81 b1       	in	r24, 0x01	; 1
    7000:	8f 7b       	andi	r24, 0xBF	; 191
    7002:	81 b9       	out	0x01, r24	; 1
	set_bit(PORTA, 6); //Pull up, default config mode
    7004:	82 b1       	in	r24, 0x02	; 2
    7006:	80 64       	ori	r24, 0x40	; 64
    7008:	82 b9       	out	0x02, r24	; 2
    700a:	08 95       	ret

Disassembly of section .text.UI_HAL_is_config_mode:

000071a8 <UI_HAL_is_config_mode>:
}

bool UI_HAL_is_config_mode(){
	return get_bit(PINA, 6);
    71a8:	80 b1       	in	r24, 0x00	; 0
}
    71aa:	86 fb       	bst	r24, 6
    71ac:	88 27       	eor	r24, r24
    71ae:	80 f9       	bld	r24, 0
    71b0:	08 95       	ret

Disassembly of section .text.main:

000061f0 <main>:
		test_runner();
	#endif // _RUN_TEST
	
	#ifndef _RUN_TEST 

	PM_HAL_LED_power_init();
    61f0:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <PM_HAL_LED_power_init>
	UI_HAL_jumper_init();
    61f4:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <UI_HAL_jumper_init>
	
	while(1)
	{
		
		if(UI_HAL_is_config_mode()){
    61f8:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <UI_HAL_is_config_mode>
    61fc:	88 23       	and	r24, r24
    61fe:	49 f0       	breq	.+18     	; 0x6212 <main+0x22>
			PM_HAL_LED_power(true);
    6200:	81 e0       	ldi	r24, 0x01	; 1
    6202:	0e 94 11 37 	call	0x6e22	; 0x6e22 <PM_HAL_LED_power>
			CONF_enter();
    6206:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <CONF_enter>
			PM_HAL_LED_power(false);
    620a:	80 e0       	ldi	r24, 0x00	; 0
    620c:	0e 94 11 37 	call	0x6e22	; 0x6e22 <PM_HAL_LED_power>
    6210:	02 c0       	rjmp	.+4      	; 0x6216 <main+0x26>
		}else{
			MAINPG_start();
    6212:	0e 94 9f 08 	call	0x113e	; 0x113e <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6216:	2f ef       	ldi	r18, 0xFF	; 255
    6218:	81 e1       	ldi	r24, 0x11	; 17
    621a:	9a e7       	ldi	r25, 0x7A	; 122
    621c:	21 50       	subi	r18, 0x01	; 1
    621e:	80 40       	sbci	r24, 0x00	; 0
    6220:	90 40       	sbci	r25, 0x00	; 0
    6222:	e1 f7       	brne	.-8      	; 0x621c <main+0x2c>
    6224:	00 c0       	rjmp	.+0      	; 0x6226 <main+0x36>
    6226:	00 00       	nop
    6228:	e7 cf       	rjmp	.-50     	; 0x61f8 <main+0x8>

Disassembly of section .text.calc_ppm_methane:

00004558 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    4558:	8f 92       	push	r8
    455a:	9f 92       	push	r9
    455c:	af 92       	push	r10
    455e:	bf 92       	push	r11
    4560:	cf 92       	push	r12
    4562:	df 92       	push	r13
    4564:	ef 92       	push	r14
    4566:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    4568:	bc 01       	movw	r22, r24
    456a:	80 e0       	ldi	r24, 0x00	; 0
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <__floatunsisf>
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	40 e8       	ldi	r20, 0x80	; 128
    4578:	59 e3       	ldi	r21, 0x39	; 57
    457a:	0e 94 2c 39 	call	0x7258	; 0x7258 <__mulsf3>
    457e:	80 90 a7 0e 	lds	r8, 0x0EA7	; 0x800ea7 <Vc>
    4582:	90 90 a8 0e 	lds	r9, 0x0EA8	; 0x800ea8 <Vc+0x1>
    4586:	a0 90 a9 0e 	lds	r10, 0x0EA9	; 0x800ea9 <Vc+0x2>
    458a:	b0 90 aa 0e 	lds	r11, 0x0EAA	; 0x800eaa <Vc+0x3>
    458e:	a5 01       	movw	r20, r10
    4590:	94 01       	movw	r18, r8
    4592:	0e 94 2c 39 	call	0x7258	; 0x7258 <__mulsf3>
    4596:	6b 01       	movw	r12, r22
    4598:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    459a:	9b 01       	movw	r18, r22
    459c:	ac 01       	movw	r20, r24
    459e:	c5 01       	movw	r24, r10
    45a0:	b4 01       	movw	r22, r8
    45a2:	0e 94 29 38 	call	0x7052	; 0x7052 <__subsf3>
    45a6:	a7 01       	movw	r20, r14
    45a8:	96 01       	movw	r18, r12
    45aa:	0e 94 28 39 	call	0x7250	; 0x7250 <__divsf3>
    45ae:	20 91 a3 0e 	lds	r18, 0x0EA3	; 0x800ea3 <RRL>
    45b2:	30 91 a4 0e 	lds	r19, 0x0EA4	; 0x800ea4 <RRL+0x1>
    45b6:	40 91 a5 0e 	lds	r20, 0x0EA5	; 0x800ea5 <RRL+0x2>
    45ba:	50 91 a6 0e 	lds	r21, 0x0EA6	; 0x800ea6 <RRL+0x3>
    45be:	0e 94 2c 39 	call	0x7258	; 0x7258 <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    45c2:	20 91 9f 0e 	lds	r18, 0x0E9F	; 0x800e9f <PPM_factor>
    45c6:	30 91 a0 0e 	lds	r19, 0x0EA0	; 0x800ea0 <PPM_factor+0x1>
    45ca:	40 91 a1 0e 	lds	r20, 0x0EA1	; 0x800ea1 <PPM_factor+0x2>
    45ce:	50 91 a2 0e 	lds	r21, 0x0EA2	; 0x800ea2 <PPM_factor+0x3>
    45d2:	0e 94 2c 39 	call	0x7258	; 0x7258 <__mulsf3>
    45d6:	0e 94 0f 2a 	call	0x541e	; 0x541e <__fixunssfsi>
	return PPM;
}
    45da:	cb 01       	movw	r24, r22
    45dc:	ff 90       	pop	r15
    45de:	ef 90       	pop	r14
    45e0:	df 90       	pop	r13
    45e2:	cf 90       	pop	r12
    45e4:	bf 90       	pop	r11
    45e6:	af 90       	pop	r10
    45e8:	9f 90       	pop	r9
    45ea:	8f 90       	pop	r8
    45ec:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

00006d1c <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    6d1c:	80 91 e3 0e 	lds	r24, 0x0EE3	; 0x800ee3 <cntPowerUpTime>
    6d20:	8f 5f       	subi	r24, 0xFF	; 255
    6d22:	80 93 e3 0e 	sts	0x0EE3, r24	; 0x800ee3 <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    6d26:	90 91 e4 0e 	lds	r25, 0x0EE4	; 0x800ee4 <_powerUpTime>
    6d2a:	89 17       	cp	r24, r25
    6d2c:	10 f0       	brcs	.+4      	; 0x6d32 <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    6d2e:	0e 94 57 39 	call	0x72ae	; 0x72ae <TC0_HAL_stop>
    6d32:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

00005298 <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    5298:	cf 93       	push	r28
	_data=data;
    529a:	50 93 ca 0e 	sts	0x0ECA, r21	; 0x800eca <_data+0x1>
    529e:	40 93 c9 0e 	sts	0x0EC9, r20	; 0x800ec9 <_data>
	_nSamples=nSamples;
    52a2:	70 93 cc 0e 	sts	0x0ECC, r23	; 0x800ecc <_nSamples+0x1>
    52a6:	60 93 cb 0e 	sts	0x0ECB, r22	; 0x800ecb <_nSamples>
	cntSamples=0;
    52aa:	10 92 c8 0e 	sts	0x0EC8, r1	; 0x800ec8 <cntSamples+0x1>
    52ae:	10 92 c7 0e 	sts	0x0EC7, r1	; 0x800ec7 <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    52b2:	6f e2       	ldi	r22, 0x2F	; 47
    52b4:	7f e2       	ldi	r23, 0x2F	; 47
    52b6:	0e 94 20 35 	call	0x6a40	; 0x6a40 <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    52ba:	81 e0       	ldi	r24, 0x01	; 1
    52bc:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <PM_HAL_adc_power>
    52c0:	2f ef       	ldi	r18, 0xFF	; 255
    52c2:	83 ec       	ldi	r24, 0xC3	; 195
    52c4:	99 e0       	ldi	r25, 0x09	; 9
    52c6:	21 50       	subi	r18, 0x01	; 1
    52c8:	80 40       	sbci	r24, 0x00	; 0
    52ca:	90 40       	sbci	r25, 0x00	; 0
    52cc:	e1 f7       	brne	.-8      	; 0x52c6 <ADC_init_sampling+0x2e>
    52ce:	00 c0       	rjmp	.+0      	; 0x52d0 <ADC_init_sampling+0x38>
    52d0:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    52d2:	60 e0       	ldi	r22, 0x00	; 0
    52d4:	8d e4       	ldi	r24, 0x4D	; 77
    52d6:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <TWI_HAL_start>
    52da:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    52dc:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    52e0:	cc 23       	and	r28, r28
    52e2:	51 f0       	breq	.+20     	; 0x52f8 <ADC_init_sampling+0x60>
		_data=NULL;
    52e4:	10 92 ca 0e 	sts	0x0ECA, r1	; 0x800eca <_data+0x1>
    52e8:	10 92 c9 0e 	sts	0x0EC9, r1	; 0x800ec9 <_data>
		_nSamples=0;
    52ec:	10 92 cc 0e 	sts	0x0ECC, r1	; 0x800ecc <_nSamples+0x1>
    52f0:	10 92 cb 0e 	sts	0x0ECB, r1	; 0x800ecb <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    52f4:	82 e0       	ldi	r24, 0x02	; 2
    52f6:	01 c0       	rjmp	.+2      	; 0x52fa <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    52f8:	80 e0       	ldi	r24, 0x00	; 0
}
    52fa:	cf 91       	pop	r28
    52fc:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

00006e86 <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    6e86:	0e 94 57 39 	call	0x72ae	; 0x72ae <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    6e8a:	80 e0       	ldi	r24, 0x00	; 0
    6e8c:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <PM_HAL_adc_power>
	_data=NULL;
    6e90:	10 92 ca 0e 	sts	0x0ECA, r1	; 0x800eca <_data+0x1>
    6e94:	10 92 c9 0e 	sts	0x0EC9, r1	; 0x800ec9 <_data>
    6e98:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00006c5c <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    6c5c:	40 91 c7 0e 	lds	r20, 0x0EC7	; 0x800ec7 <cntSamples>
    6c60:	50 91 c8 0e 	lds	r21, 0x0EC8	; 0x800ec8 <cntSamples+0x1>
    6c64:	20 91 cb 0e 	lds	r18, 0x0ECB	; 0x800ecb <_nSamples>
    6c68:	30 91 cc 0e 	lds	r19, 0x0ECC	; 0x800ecc <_nSamples+0x1>
    6c6c:	81 e0       	ldi	r24, 0x01	; 1
    6c6e:	42 17       	cp	r20, r18
    6c70:	53 07       	cpc	r21, r19
    6c72:	08 f4       	brcc	.+2      	; 0x6c76 <ADC_is_sampling_done+0x1a>
    6c74:	80 e0       	ldi	r24, 0x00	; 0
}
    6c76:	08 95       	ret

Disassembly of section .text.ADC_get_value:

0000563c <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    563c:	0f 93       	push	r16
    563e:	1f 93       	push	r17
    5640:	cf 93       	push	r28
    5642:	df 93       	push	r29
    5644:	00 d0       	rcall	.+0      	; 0x5646 <ADC_get_value+0xa>
    5646:	cd b7       	in	r28, 0x3d	; 61
    5648:	de b7       	in	r29, 0x3e	; 62
    564a:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    564c:	8f ef       	ldi	r24, 0xFF	; 255
    564e:	9f ef       	ldi	r25, 0xFF	; 255
    5650:	f8 01       	movw	r30, r16
    5652:	91 83       	std	Z+1, r25	; 0x01
    5654:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    5656:	42 e0       	ldi	r20, 0x02	; 2
    5658:	be 01       	movw	r22, r28
    565a:	6f 5f       	subi	r22, 0xFF	; 255
    565c:	7f 4f       	sbci	r23, 0xFF	; 255
    565e:	8d e4       	ldi	r24, 0x4D	; 77
    5660:	0e 94 b1 32 	call	0x6562	; 0x6562 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    5664:	81 11       	cpse	r24, r1
    5666:	0d c0       	rjmp	.+26     	; 0x5682 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    5668:	89 81       	ldd	r24, Y+1	; 0x01
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	98 2f       	mov	r25, r24
    566e:	88 27       	eor	r24, r24
    5670:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    5672:	82 2b       	or	r24, r18
    5674:	0e 94 ac 22 	call	0x4558	; 0x4558 <calc_ppm_methane>
    5678:	f8 01       	movw	r30, r16
    567a:	91 83       	std	Z+1, r25	; 0x01
    567c:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    567e:	80 e0       	ldi	r24, 0x00	; 0
    5680:	01 c0       	rjmp	.+2      	; 0x5684 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    5682:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    5684:	0f 90       	pop	r0
    5686:	0f 90       	pop	r0
    5688:	df 91       	pop	r29
    568a:	cf 91       	pop	r28
    568c:	1f 91       	pop	r17
    568e:	0f 91       	pop	r16
    5690:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00005e5e <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    5e5e:	80 91 c9 0e 	lds	r24, 0x0EC9	; 0x800ec9 <_data>
    5e62:	90 91 ca 0e 	lds	r25, 0x0ECA	; 0x800eca <_data+0x1>
    5e66:	20 91 c7 0e 	lds	r18, 0x0EC7	; 0x800ec7 <cntSamples>
    5e6a:	30 91 c8 0e 	lds	r19, 0x0EC8	; 0x800ec8 <cntSamples+0x1>
    5e6e:	a9 01       	movw	r20, r18
    5e70:	4f 5f       	subi	r20, 0xFF	; 255
    5e72:	5f 4f       	sbci	r21, 0xFF	; 255
    5e74:	50 93 c8 0e 	sts	0x0EC8, r21	; 0x800ec8 <cntSamples+0x1>
    5e78:	40 93 c7 0e 	sts	0x0EC7, r20	; 0x800ec7 <cntSamples>
    5e7c:	22 0f       	add	r18, r18
    5e7e:	33 1f       	adc	r19, r19
    5e80:	82 0f       	add	r24, r18
    5e82:	93 1f       	adc	r25, r19
    5e84:	0e 94 1e 2b 	call	0x563c	; 0x563c <ADC_get_value>
	if(cntSamples>=_nSamples){
    5e88:	20 91 c7 0e 	lds	r18, 0x0EC7	; 0x800ec7 <cntSamples>
    5e8c:	30 91 c8 0e 	lds	r19, 0x0EC8	; 0x800ec8 <cntSamples+0x1>
    5e90:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <_nSamples>
    5e94:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <_nSamples+0x1>
    5e98:	28 17       	cp	r18, r24
    5e9a:	39 07       	cpc	r19, r25
    5e9c:	10 f0       	brcs	.+4      	; 0x5ea2 <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    5e9e:	0e 94 57 39 	call	0x72ae	; 0x72ae <TC0_HAL_stop>
    5ea2:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

000071b2 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    71b2:	0e 94 34 39 	call	0x7268	; 0x7268 <TC0_HAL_start>
	vect_ADC_do_sample();
    71b6:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <vect_ADC_do_sample>
    71ba:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00006b8a <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    6b8a:	80 93 e4 0e 	sts	0x0EE4, r24	; 0x800ee4 <_powerUpTime>
	cntPowerUpTime=0;
    6b8e:	10 92 e3 0e 	sts	0x0EE3, r1	; 0x800ee3 <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    6b92:	81 e0       	ldi	r24, 0x01	; 1
    6b94:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <PM_HAL_meth_power>
	
	//Setup timer
	TC0_HAL_init(ADC_HEAT_TIME_INTERVAL, &vect_ADC_heat_timeout);
    6b98:	6e e8       	ldi	r22, 0x8E	; 142
    6b9a:	76 e3       	ldi	r23, 0x36	; 54
    6b9c:	8c e3       	ldi	r24, 0x3C	; 60
    6b9e:	0e 94 20 35 	call	0x6a40	; 0x6a40 <TC0_HAL_init>
	TC0_HAL_start();
    6ba2:	0e 94 34 39 	call	0x7268	; 0x7268 <TC0_HAL_start>
    6ba6:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

00007220 <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    7220:	80 e0       	ldi	r24, 0x00	; 0
    7222:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <PM_HAL_meth_power>
    7226:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

00006ec0 <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    6ec0:	20 91 e3 0e 	lds	r18, 0x0EE3	; 0x800ee3 <cntPowerUpTime>
    6ec4:	90 91 e4 0e 	lds	r25, 0x0EE4	; 0x800ee4 <_powerUpTime>
    6ec8:	81 e0       	ldi	r24, 0x01	; 1
    6eca:	29 17       	cp	r18, r25
    6ecc:	08 f4       	brcc	.+2      	; 0x6ed0 <ADC_meth_sens_ready+0x10>
    6ece:	80 e0       	ldi	r24, 0x00	; 0
}
    6ed0:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

0000603e <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    603e:	ef 92       	push	r14
    6040:	ff 92       	push	r15
    6042:	0f 93       	push	r16
    6044:	1f 93       	push	r17
	Vc=Vcc;
    6046:	60 93 a7 0e 	sts	0x0EA7, r22	; 0x800ea7 <Vc>
    604a:	70 93 a8 0e 	sts	0x0EA8, r23	; 0x800ea8 <Vc+0x1>
    604e:	80 93 a9 0e 	sts	0x0EA9, r24	; 0x800ea9 <Vc+0x2>
    6052:	90 93 aa 0e 	sts	0x0EAA, r25	; 0x800eaa <Vc+0x3>
	RRL=Rrl;
    6056:	20 93 a3 0e 	sts	0x0EA3, r18	; 0x800ea3 <RRL>
    605a:	30 93 a4 0e 	sts	0x0EA4, r19	; 0x800ea4 <RRL+0x1>
    605e:	40 93 a5 0e 	sts	0x0EA5, r20	; 0x800ea5 <RRL+0x2>
    6062:	50 93 a6 0e 	sts	0x0EA6, r21	; 0x800ea6 <RRL+0x3>
	PPM_factor=PPMfactor;
    6066:	e0 92 9f 0e 	sts	0x0E9F, r14	; 0x800e9f <PPM_factor>
    606a:	f0 92 a0 0e 	sts	0x0EA0, r15	; 0x800ea0 <PPM_factor+0x1>
    606e:	00 93 a1 0e 	sts	0x0EA1, r16	; 0x800ea1 <PPM_factor+0x2>
    6072:	10 93 a2 0e 	sts	0x0EA2, r17	; 0x800ea2 <PPM_factor+0x3>
}
    6076:	1f 91       	pop	r17
    6078:	0f 91       	pop	r16
    607a:	ff 90       	pop	r15
    607c:	ef 90       	pop	r14
    607e:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00006d64 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    6d64:	60 e4       	ldi	r22, 0x40	; 64
    6d66:	70 e0       	ldi	r23, 0x00	; 0
    6d68:	80 e8       	ldi	r24, 0x80	; 128
    6d6a:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <eeprom_read_byte>
    6d6e:	91 e0       	ldi	r25, 0x01	; 1
    6d70:	81 11       	cpse	r24, r1
    6d72:	01 c0       	rjmp	.+2      	; 0x6d76 <EM_has_deveui+0x12>
    6d74:	90 e0       	ldi	r25, 0x00	; 0
}
    6d76:	89 2f       	mov	r24, r25
    6d78:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00006d7a <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    6d7a:	61 e4       	ldi	r22, 0x41	; 65
    6d7c:	70 e0       	ldi	r23, 0x00	; 0
    6d7e:	80 e8       	ldi	r24, 0x80	; 128
    6d80:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <eeprom_read_byte>
    6d84:	91 e0       	ldi	r25, 0x01	; 1
    6d86:	81 11       	cpse	r24, r1
    6d88:	01 c0       	rjmp	.+2      	; 0x6d8c <EM_has_appeui+0x12>
    6d8a:	90 e0       	ldi	r25, 0x00	; 0
}
    6d8c:	89 2f       	mov	r24, r25
    6d8e:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00006d90 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    6d90:	62 e4       	ldi	r22, 0x42	; 66
    6d92:	70 e0       	ldi	r23, 0x00	; 0
    6d94:	80 e8       	ldi	r24, 0x80	; 128
    6d96:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <eeprom_read_byte>
    6d9a:	91 e0       	ldi	r25, 0x01	; 1
    6d9c:	81 11       	cpse	r24, r1
    6d9e:	01 c0       	rjmp	.+2      	; 0x6da2 <EM_has_appkey+0x12>
    6da0:	90 e0       	ldi	r25, 0x00	; 0
}
    6da2:	89 2f       	mov	r24, r25
    6da4:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

0000622a <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    622a:	cf 92       	push	r12
    622c:	df 92       	push	r13
    622e:	ef 92       	push	r14
    6230:	6b 01       	movw	r12, r22
    6232:	e8 2e       	mov	r14, r24
    6234:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    6238:	40 97       	sbiw	r24, 0x10	; 16
    623a:	79 f4       	brne	.+30     	; 0x625a <EM_set_deveui+0x30>
    623c:	20 e1       	ldi	r18, 0x10	; 16
    623e:	30 e0       	ldi	r19, 0x00	; 0
    6240:	40 e0       	ldi	r20, 0x00	; 0
    6242:	50 e0       	ldi	r21, 0x00	; 0
    6244:	8e 2d       	mov	r24, r14
    6246:	b6 01       	movw	r22, r12
    6248:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <eeprom_update_block>
    624c:	61 e0       	ldi	r22, 0x01	; 1
    624e:	80 e4       	ldi	r24, 0x40	; 64
    6250:	90 e0       	ldi	r25, 0x00	; 0
    6252:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <eeprom_update_byte>
    6256:	81 e0       	ldi	r24, 0x01	; 1
    6258:	01 c0       	rjmp	.+2      	; 0x625c <EM_set_deveui+0x32>
    625a:	80 e0       	ldi	r24, 0x00	; 0
    625c:	ef 90       	pop	r14
    625e:	df 90       	pop	r13
    6260:	cf 90       	pop	r12
    6262:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

0000668c <EM_get_deveui>:
    668c:	0f 93       	push	r16
    668e:	1f 93       	push	r17
    6690:	cf 93       	push	r28
    6692:	8c 01       	movw	r16, r24
    6694:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <EM_has_deveui>
    6698:	c8 2f       	mov	r28, r24
    669a:	88 23       	and	r24, r24
    669c:	51 f0       	breq	.+20     	; 0x66b2 <EM_get_deveui+0x26>
    669e:	20 e1       	ldi	r18, 0x10	; 16
    66a0:	30 e0       	ldi	r19, 0x00	; 0
    66a2:	40 e0       	ldi	r20, 0x00	; 0
    66a4:	50 e0       	ldi	r21, 0x00	; 0
    66a6:	60 e0       	ldi	r22, 0x00	; 0
    66a8:	c8 01       	movw	r24, r16
    66aa:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <eeprom_read_block>
    66ae:	f8 01       	movw	r30, r16
    66b0:	10 8a       	std	Z+16, r1	; 0x10
    66b2:	8c 2f       	mov	r24, r28
    66b4:	cf 91       	pop	r28
    66b6:	1f 91       	pop	r17
    66b8:	0f 91       	pop	r16
    66ba:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00006264 <EM_set_appeui>:
    6264:	cf 92       	push	r12
    6266:	df 92       	push	r13
    6268:	ef 92       	push	r14
    626a:	6b 01       	movw	r12, r22
    626c:	e8 2e       	mov	r14, r24
    626e:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    6272:	40 97       	sbiw	r24, 0x10	; 16
    6274:	79 f4       	brne	.+30     	; 0x6294 <EM_set_appeui+0x30>
    6276:	20 e1       	ldi	r18, 0x10	; 16
    6278:	30 e0       	ldi	r19, 0x00	; 0
    627a:	40 e1       	ldi	r20, 0x10	; 16
    627c:	50 e0       	ldi	r21, 0x00	; 0
    627e:	8e 2d       	mov	r24, r14
    6280:	b6 01       	movw	r22, r12
    6282:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <eeprom_update_block>
    6286:	61 e0       	ldi	r22, 0x01	; 1
    6288:	81 e4       	ldi	r24, 0x41	; 65
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <eeprom_update_byte>
    6290:	81 e0       	ldi	r24, 0x01	; 1
    6292:	01 c0       	rjmp	.+2      	; 0x6296 <EM_set_appeui+0x32>
    6294:	80 e0       	ldi	r24, 0x00	; 0
    6296:	ef 90       	pop	r14
    6298:	df 90       	pop	r13
    629a:	cf 90       	pop	r12
    629c:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

000066bc <EM_get_appeui>:
    66bc:	0f 93       	push	r16
    66be:	1f 93       	push	r17
    66c0:	cf 93       	push	r28
    66c2:	8c 01       	movw	r16, r24
    66c4:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <EM_has_appeui>
    66c8:	c8 2f       	mov	r28, r24
    66ca:	88 23       	and	r24, r24
    66cc:	51 f0       	breq	.+20     	; 0x66e2 <EM_get_appeui+0x26>
    66ce:	20 e1       	ldi	r18, 0x10	; 16
    66d0:	30 e0       	ldi	r19, 0x00	; 0
    66d2:	40 e1       	ldi	r20, 0x10	; 16
    66d4:	50 e0       	ldi	r21, 0x00	; 0
    66d6:	60 e0       	ldi	r22, 0x00	; 0
    66d8:	c8 01       	movw	r24, r16
    66da:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <eeprom_read_block>
    66de:	f8 01       	movw	r30, r16
    66e0:	10 8a       	std	Z+16, r1	; 0x10
    66e2:	8c 2f       	mov	r24, r28
    66e4:	cf 91       	pop	r28
    66e6:	1f 91       	pop	r17
    66e8:	0f 91       	pop	r16
    66ea:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

0000629e <EM_set_appkey>:
    629e:	cf 92       	push	r12
    62a0:	df 92       	push	r13
    62a2:	ef 92       	push	r14
    62a4:	6b 01       	movw	r12, r22
    62a6:	e8 2e       	mov	r14, r24
    62a8:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    62ac:	80 97       	sbiw	r24, 0x20	; 32
    62ae:	79 f4       	brne	.+30     	; 0x62ce <EM_set_appkey+0x30>
    62b0:	20 e2       	ldi	r18, 0x20	; 32
    62b2:	30 e0       	ldi	r19, 0x00	; 0
    62b4:	40 e2       	ldi	r20, 0x20	; 32
    62b6:	50 e0       	ldi	r21, 0x00	; 0
    62b8:	8e 2d       	mov	r24, r14
    62ba:	b6 01       	movw	r22, r12
    62bc:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <eeprom_update_block>
    62c0:	61 e0       	ldi	r22, 0x01	; 1
    62c2:	82 e4       	ldi	r24, 0x42	; 66
    62c4:	90 e0       	ldi	r25, 0x00	; 0
    62c6:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <eeprom_update_byte>
    62ca:	81 e0       	ldi	r24, 0x01	; 1
    62cc:	01 c0       	rjmp	.+2      	; 0x62d0 <EM_set_appkey+0x32>
    62ce:	80 e0       	ldi	r24, 0x00	; 0
    62d0:	ef 90       	pop	r14
    62d2:	df 90       	pop	r13
    62d4:	cf 90       	pop	r12
    62d6:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

000066ec <EM_get_appkey>:
    66ec:	0f 93       	push	r16
    66ee:	1f 93       	push	r17
    66f0:	cf 93       	push	r28
    66f2:	8c 01       	movw	r16, r24
    66f4:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <EM_has_appkey>
    66f8:	c8 2f       	mov	r28, r24
    66fa:	88 23       	and	r24, r24
    66fc:	51 f0       	breq	.+20     	; 0x6712 <EM_get_appkey+0x26>
    66fe:	20 e2       	ldi	r18, 0x20	; 32
    6700:	30 e0       	ldi	r19, 0x00	; 0
    6702:	40 e2       	ldi	r20, 0x20	; 32
    6704:	50 e0       	ldi	r21, 0x00	; 0
    6706:	60 e0       	ldi	r22, 0x00	; 0
    6708:	c8 01       	movw	r24, r16
    670a:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <eeprom_read_block>
    670e:	f8 01       	movw	r30, r16
    6710:	10 a2       	std	Z+32, r1	; 0x20
    6712:	8c 2f       	mov	r24, r28
    6714:	cf 91       	pop	r28
    6716:	1f 91       	pop	r17
    6718:	0f 91       	pop	r16
    671a:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

0000700c <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    700c:	ab 01       	movw	r20, r22
    700e:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    7010:	83 e4       	ldi	r24, 0x43	; 67
    7012:	90 e0       	ldi	r25, 0x00	; 0
    7014:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <eeprom_update_dword>
    7018:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00006ba8 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6ba8:	cf 93       	push	r28
    6baa:	df 93       	push	r29
    6bac:	ec 01       	movw	r28, r24
    6bae:	63 e4       	ldi	r22, 0x43	; 67
    6bb0:	70 e0       	ldi	r23, 0x00	; 0
    6bb2:	80 e0       	ldi	r24, 0x00	; 0
    6bb4:	0e 94 4c 38 	call	0x7098	; 0x7098 <eeprom_read_dword>
    6bb8:	68 83       	st	Y, r22
    6bba:	79 83       	std	Y+1, r23	; 0x01
    6bbc:	8a 83       	std	Y+2, r24	; 0x02
    6bbe:	9b 83       	std	Y+3, r25	; 0x03
    6bc0:	df 91       	pop	r29
    6bc2:	cf 91       	pop	r28
    6bc4:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

0000701a <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    701a:	ab 01       	movw	r20, r22
    701c:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    701e:	87 e4       	ldi	r24, 0x47	; 71
    7020:	90 e0       	ldi	r25, 0x00	; 0
    7022:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <eeprom_update_dword>
    7026:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00006bc6 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6bc6:	cf 93       	push	r28
    6bc8:	df 93       	push	r29
    6bca:	ec 01       	movw	r28, r24
    6bcc:	67 e4       	ldi	r22, 0x47	; 71
    6bce:	70 e0       	ldi	r23, 0x00	; 0
    6bd0:	80 e0       	ldi	r24, 0x00	; 0
    6bd2:	0e 94 4c 38 	call	0x7098	; 0x7098 <eeprom_read_dword>
    6bd6:	68 83       	st	Y, r22
    6bd8:	79 83       	std	Y+1, r23	; 0x01
    6bda:	8a 83       	std	Y+2, r24	; 0x02
    6bdc:	9b 83       	std	Y+3, r25	; 0x03
    6bde:	df 91       	pop	r29
    6be0:	cf 91       	pop	r28
    6be2:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00007028 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    7028:	ab 01       	movw	r20, r22
    702a:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    702c:	8b e4       	ldi	r24, 0x4B	; 75
    702e:	90 e0       	ldi	r25, 0x00	; 0
    7030:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <eeprom_update_dword>
    7034:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00006be4 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6be4:	cf 93       	push	r28
    6be6:	df 93       	push	r29
    6be8:	ec 01       	movw	r28, r24
    6bea:	6b e4       	ldi	r22, 0x4B	; 75
    6bec:	70 e0       	ldi	r23, 0x00	; 0
    6bee:	80 e0       	ldi	r24, 0x00	; 0
    6bf0:	0e 94 4c 38 	call	0x7098	; 0x7098 <eeprom_read_dword>
    6bf4:	68 83       	st	Y, r22
    6bf6:	79 83       	std	Y+1, r23	; 0x01
    6bf8:	8a 83       	std	Y+2, r24	; 0x02
    6bfa:	9b 83       	std	Y+3, r25	; 0x03
    6bfc:	df 91       	pop	r29
    6bfe:	cf 91       	pop	r28
    6c00:	08 95       	ret

Disassembly of section .text.EM_set_collections:

00007036 <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    7036:	24 2f       	mov	r18, r20
    7038:	30 e0       	ldi	r19, 0x00	; 0
    703a:	44 e6       	ldi	r20, 0x64	; 100
    703c:	50 e0       	ldi	r21, 0x00	; 0
    703e:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <eeprom_update_block>
    7042:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00006f60 <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    6f60:	26 2f       	mov	r18, r22
    6f62:	30 e0       	ldi	r19, 0x00	; 0
    6f64:	44 e6       	ldi	r20, 0x64	; 100
    6f66:	50 e0       	ldi	r21, 0x00	; 0
    6f68:	60 e0       	ldi	r22, 0x00	; 0
    6f6a:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <eeprom_read_block>
    6f6e:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

000070cc <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    70cc:	68 2f       	mov	r22, r24
    70ce:	8f e4       	ldi	r24, 0x4F	; 79
    70d0:	90 e0       	ldi	r25, 0x00	; 0
    70d2:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <eeprom_update_byte>
    70d6:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

000070d8 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    70d8:	6f e4       	ldi	r22, 0x4F	; 79
    70da:	70 e0       	ldi	r23, 0x00	; 0
    70dc:	80 e0       	ldi	r24, 0x00	; 0
    70de:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <eeprom_read_byte>
}
    70e2:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

000070e4 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    70e4:	bc 01       	movw	r22, r24
    70e6:	80 e5       	ldi	r24, 0x50	; 80
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	0e 94 ba 38 	call	0x7174	; 0x7174 <eeprom_update_word>
    70ee:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

000070f0 <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    70f0:	60 e5       	ldi	r22, 0x50	; 80
    70f2:	70 e0       	ldi	r23, 0x00	; 0
    70f4:	80 e0       	ldi	r24, 0x00	; 0
    70f6:	0e 94 53 38 	call	0x70a6	; 0x70a6 <eeprom_read_word>
}
    70fa:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

000070fc <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    70fc:	68 2f       	mov	r22, r24
    70fe:	82 e5       	ldi	r24, 0x52	; 82
    7100:	90 e0       	ldi	r25, 0x00	; 0
    7102:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <eeprom_update_byte>
    7106:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

00007108 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    7108:	62 e5       	ldi	r22, 0x52	; 82
    710a:	70 e0       	ldi	r23, 0x00	; 0
    710c:	80 e0       	ldi	r24, 0x00	; 0
    710e:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <eeprom_read_byte>
}
    7112:	08 95       	ret

Disassembly of section .text.EM_set_group_id:

00007114 <EM_set_group_id>:

void EM_set_group_id(uint8_t groupId){
	eeprom_update_byte((uint8_t *) EEPROM_GROUP_ID_ADDR, groupId);
    7114:	68 2f       	mov	r22, r24
    7116:	83 e6       	ldi	r24, 0x63	; 99
    7118:	90 e0       	ldi	r25, 0x00	; 0
    711a:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <eeprom_update_byte>
    711e:	08 95       	ret

Disassembly of section .text.EM_get_group_id:

00007120 <EM_get_group_id>:
}

uint8_t EM_get_group_id(){
	return eeprom_read_byte((const uint8_t *) EEPROM_GROUP_ID_ADDR);
    7120:	63 e6       	ldi	r22, 0x63	; 99
    7122:	70 e0       	ldi	r23, 0x00	; 0
    7124:	80 e0       	ldi	r24, 0x00	; 0
    7126:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <eeprom_read_byte>
    712a:	08 95       	ret

Disassembly of section .text.cb_blink:

00007274 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    7274:	0e 94 fc 38 	call	0x71f8	; 0x71f8 <PM_HAL_LED_toggle>
    7278:	08 95       	ret

Disassembly of section .text.blink:

00005a54 <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    5a54:	cf 93       	push	r28
    5a56:	df 93       	push	r29
    5a58:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    5a5a:	c0 e0       	ldi	r28, 0x00	; 0
    5a5c:	19 c0       	rjmp	.+50     	; 0x5a90 <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    5a5e:	80 e0       	ldi	r24, 0x00	; 0
    5a60:	0e 94 11 37 	call	0x6e22	; 0x6e22 <PM_HAL_LED_power>
    5a64:	2f ef       	ldi	r18, 0xFF	; 255
    5a66:	82 e5       	ldi	r24, 0x52	; 82
    5a68:	97 e0       	ldi	r25, 0x07	; 7
    5a6a:	21 50       	subi	r18, 0x01	; 1
    5a6c:	80 40       	sbci	r24, 0x00	; 0
    5a6e:	90 40       	sbci	r25, 0x00	; 0
    5a70:	e1 f7       	brne	.-8      	; 0x5a6a <blink+0x16>
    5a72:	00 c0       	rjmp	.+0      	; 0x5a74 <blink+0x20>
    5a74:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    5a76:	81 e0       	ldi	r24, 0x01	; 1
    5a78:	0e 94 11 37 	call	0x6e22	; 0x6e22 <PM_HAL_LED_power>
    5a7c:	2f ef       	ldi	r18, 0xFF	; 255
    5a7e:	82 e5       	ldi	r24, 0x52	; 82
    5a80:	97 e0       	ldi	r25, 0x07	; 7
    5a82:	21 50       	subi	r18, 0x01	; 1
    5a84:	80 40       	sbci	r24, 0x00	; 0
    5a86:	90 40       	sbci	r25, 0x00	; 0
    5a88:	e1 f7       	brne	.-8      	; 0x5a82 <blink+0x2e>
    5a8a:	00 c0       	rjmp	.+0      	; 0x5a8c <blink+0x38>
    5a8c:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    5a8e:	cf 5f       	subi	r28, 0xFF	; 255
    5a90:	cd 17       	cp	r28, r29
    5a92:	28 f3       	brcs	.-54     	; 0x5a5e <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    5a94:	80 e0       	ldi	r24, 0x00	; 0
    5a96:	0e 94 11 37 	call	0x6e22	; 0x6e22 <PM_HAL_LED_power>
}
    5a9a:	df 91       	pop	r29
    5a9c:	cf 91       	pop	r28
    5a9e:	08 95       	ret

Disassembly of section .text.err_code:

000062d8 <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    62d8:	cf 93       	push	r28
    62da:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    62dc:	81 e0       	ldi	r24, 0x01	; 1
    62de:	0e 94 11 37 	call	0x6e22	; 0x6e22 <PM_HAL_LED_power>
    62e2:	2f ef       	ldi	r18, 0xFF	; 255
    62e4:	83 ed       	ldi	r24, 0xD3	; 211
    62e6:	90 e3       	ldi	r25, 0x30	; 48
    62e8:	21 50       	subi	r18, 0x01	; 1
    62ea:	80 40       	sbci	r24, 0x00	; 0
    62ec:	90 40       	sbci	r25, 0x00	; 0
    62ee:	e1 f7       	brne	.-8      	; 0x62e8 <err_code+0x10>
    62f0:	00 c0       	rjmp	.+0      	; 0x62f2 <err_code+0x1a>
    62f2:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    62f4:	8c 2f       	mov	r24, r28
    62f6:	0e 94 2a 2d 	call	0x5a54	; 0x5a54 <blink>
    62fa:	2f ef       	ldi	r18, 0xFF	; 255
    62fc:	89 e6       	ldi	r24, 0x69	; 105
    62fe:	98 e1       	ldi	r25, 0x18	; 24
    6300:	21 50       	subi	r18, 0x01	; 1
    6302:	80 40       	sbci	r24, 0x00	; 0
    6304:	90 40       	sbci	r25, 0x00	; 0
    6306:	e1 f7       	brne	.-8      	; 0x6300 <err_code+0x28>
    6308:	00 c0       	rjmp	.+0      	; 0x630a <err_code+0x32>
    630a:	00 00       	nop
	_delay_ms(1000);
}
    630c:	cf 91       	pop	r28
    630e:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

00007044 <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    7044:	8a e3       	ldi	r24, 0x3A	; 58
    7046:	99 e3       	ldi	r25, 0x39	; 57
    7048:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <TC2_HAL_subscribe>
    704c:	80 93 e5 0e 	sts	0x0EE5, r24	; 0x800ee5 <cbPointer>
    7050:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

00006f70 <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    6f70:	80 91 e5 0e 	lds	r24, 0x0EE5	; 0x800ee5 <cbPointer>
    6f74:	0e 94 db 30 	call	0x61b6	; 0x61b6 <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    6f78:	80 e0       	ldi	r24, 0x00	; 0
    6f7a:	0e 94 11 37 	call	0x6e22	; 0x6e22 <PM_HAL_LED_power>
    6f7e:	08 95       	ret

Disassembly of section .text.LED_join_success:

000060c2 <LED_join_success>:
}

void LED_join_success(){
    60c2:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    60c4:	c0 e0       	ldi	r28, 0x00	; 0
    60c6:	19 c0       	rjmp	.+50     	; 0x60fa <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    60c8:	81 e0       	ldi	r24, 0x01	; 1
    60ca:	0e 94 11 37 	call	0x6e22	; 0x6e22 <PM_HAL_LED_power>
    60ce:	2f ef       	ldi	r18, 0xFF	; 255
    60d0:	80 e7       	ldi	r24, 0x70	; 112
    60d2:	92 e0       	ldi	r25, 0x02	; 2
    60d4:	21 50       	subi	r18, 0x01	; 1
    60d6:	80 40       	sbci	r24, 0x00	; 0
    60d8:	90 40       	sbci	r25, 0x00	; 0
    60da:	e1 f7       	brne	.-8      	; 0x60d4 <LED_join_success+0x12>
    60dc:	00 c0       	rjmp	.+0      	; 0x60de <LED_join_success+0x1c>
    60de:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    60e0:	80 e0       	ldi	r24, 0x00	; 0
    60e2:	0e 94 11 37 	call	0x6e22	; 0x6e22 <PM_HAL_LED_power>
    60e6:	2f ef       	ldi	r18, 0xFF	; 255
    60e8:	80 e7       	ldi	r24, 0x70	; 112
    60ea:	92 e0       	ldi	r25, 0x02	; 2
    60ec:	21 50       	subi	r18, 0x01	; 1
    60ee:	80 40       	sbci	r24, 0x00	; 0
    60f0:	90 40       	sbci	r25, 0x00	; 0
    60f2:	e1 f7       	brne	.-8      	; 0x60ec <LED_join_success+0x2a>
    60f4:	00 c0       	rjmp	.+0      	; 0x60f6 <LED_join_success+0x34>
    60f6:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    60f8:	cf 5f       	subi	r28, 0xFF	; 255
    60fa:	ca 30       	cpi	r28, 0x0A	; 10
    60fc:	28 f3       	brcs	.-54     	; 0x60c8 <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    60fe:	cf 91       	pop	r28
    6100:	08 95       	ret

Disassembly of section .text.LED_join_denied:

00007228 <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    7228:	83 e0       	ldi	r24, 0x03	; 3
    722a:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <err_code>
    722e:	08 95       	ret

Disassembly of section .text.LED_conf_err:

00007230 <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    7230:	85 e0       	ldi	r24, 0x05	; 5
    7232:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <err_code>
    7236:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

00007238 <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    7238:	87 e0       	ldi	r24, 0x07	; 7
    723a:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <err_code>
    723e:	08 95       	ret

Disassembly of section .text.parse_err:

0000558c <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    558c:	cf 92       	push	r12
    558e:	df 92       	push	r13
    5590:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    5592:	6c 01       	movw	r12, r24
    5594:	20 e8       	ldi	r18, 0x80	; 128
    5596:	e2 2e       	mov	r14, r18
    5598:	2f e3       	ldi	r18, 0x3F	; 63
    559a:	39 e0       	ldi	r19, 0x09	; 9
    559c:	40 e0       	ldi	r20, 0x00	; 0
    559e:	8e 2d       	mov	r24, r14
    55a0:	b6 01       	movw	r22, r12
    55a2:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    55a6:	89 2b       	or	r24, r25
    55a8:	a1 f0       	breq	.+40     	; 0x55d2 <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    55aa:	2a e4       	ldi	r18, 0x4A	; 74
    55ac:	39 e0       	ldi	r19, 0x09	; 9
    55ae:	40 e0       	ldi	r20, 0x00	; 0
    55b0:	8e 2d       	mov	r24, r14
    55b2:	b6 01       	movw	r22, r12
    55b4:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    55b8:	89 2b       	or	r24, r25
    55ba:	69 f0       	breq	.+26     	; 0x55d6 <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    55bc:	21 e5       	ldi	r18, 0x51	; 81
    55be:	39 e0       	ldi	r19, 0x09	; 9
    55c0:	40 e0       	ldi	r20, 0x00	; 0
    55c2:	8e 2d       	mov	r24, r14
    55c4:	b6 01       	movw	r22, r12
    55c6:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    55ca:	89 2b       	or	r24, r25
    55cc:	31 f4       	brne	.+12     	; 0x55da <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    55ce:	83 e0       	ldi	r24, 0x03	; 3
    55d0:	05 c0       	rjmp	.+10     	; 0x55dc <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    55d2:	82 e0       	ldi	r24, 0x02	; 2
    55d4:	03 c0       	rjmp	.+6      	; 0x55dc <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    55d6:	82 e0       	ldi	r24, 0x02	; 2
    55d8:	01 c0       	rjmp	.+2      	; 0x55dc <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    55da:	81 e0       	ldi	r24, 0x01	; 1
}
    55dc:	ef 90       	pop	r14
    55de:	df 90       	pop	r13
    55e0:	cf 90       	pop	r12
    55e2:	08 95       	ret

Disassembly of section .text.JN_join_network:

00001ac0 <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	28 97       	sbiw	r28, 0x08	; 8
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	5c 01       	movw	r10, r24
    1ae4:	6b 01       	movw	r12, r22
    1ae6:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
    1ae8:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    1aea:	e1 2f       	mov	r30, r17
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	ed 30       	cpi	r30, 0x0D	; 13
    1af0:	f1 05       	cpc	r31, r1
    1af2:	d8 f7       	brcc	.-10     	; 0x1aea <JN_join_network+0x2a>
    1af4:	e2 5c       	subi	r30, 0xC2	; 194
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	0c 94 b4 38 	jmp	0x7168	; 0x7168 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
    1afc:	0e 94 04 39 	call	0x7208	; 0x7208 <rn2483_reset_active>
    1b00:	2f ef       	ldi	r18, 0xFF	; 255
    1b02:	89 e6       	ldi	r24, 0x69	; 105
    1b04:	98 e1       	ldi	r25, 0x18	; 24
    1b06:	21 50       	subi	r18, 0x01	; 1
    1b08:	80 40       	sbci	r24, 0x00	; 0
    1b0a:	90 40       	sbci	r25, 0x00	; 0
    1b0c:	e1 f7       	brne	.-8      	; 0x1b06 <JN_join_network+0x46>
    1b0e:	00 c0       	rjmp	.+0      	; 0x1b10 <JN_join_network+0x50>
    1b10:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
    1b12:	0e 94 08 39 	call	0x7210	; 0x7210 <rn2483_reset_deactive>
				
				util_set_pending_states(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
    1b16:	4c e0       	ldi	r20, 0x0C	; 12
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	62 e0       	ldi	r22, 0x02	; 2
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	ce 01       	movw	r24, r28
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_BEGINS_WITH, RN2483);
    1b26:	2f e5       	ldi	r18, 0x5F	; 95
    1b28:	39 e0       	ldi	r19, 0x09	; 9
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	61 e0       	ldi	r22, 0x01	; 1
    1b2e:	ce 01       	movw	r24, r28
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				
				state=JN_WAIT_FOR_INCOMMING;
    1b36:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1b38:	d8 cf       	rjmp	.-80     	; 0x1aea <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
    1b3a:	46 e6       	ldi	r20, 0x66	; 102
    1b3c:	59 e0       	ldi	r21, 0x09	; 9
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	80 e9       	ldi	r24, 0x90	; 144
    1b42:	92 e0       	ldi	r25, 0x02	; 2
    1b44:	0e 94 ca 32 	call	0x6594	; 0x6594 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1b48:	60 e9       	ldi	r22, 0x90	; 144
    1b4a:	72 e0       	ldi	r23, 0x02	; 2
    1b4c:	80 e8       	ldi	r24, 0x80	; 128
    1b4e:	0e 94 60 24 	call	0x48c0	; 0x48c0 <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
    1b52:	4c e0       	ldi	r20, 0x0C	; 12
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	63 e0       	ldi	r22, 0x03	; 3
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1b62:	24 e7       	ldi	r18, 0x74	; 116
    1b64:	39 e0       	ldi	r19, 0x09	; 9
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1b72:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1b74:	ba cf       	rjmp	.-140    	; 0x1aea <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
    1b76:	b5 01       	movw	r22, r10
    1b78:	80 e9       	ldi	r24, 0x90	; 144
    1b7a:	92 e0       	ldi	r25, 0x02	; 2
    1b7c:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <mac_set_deveui>
				attach_ending(lm_msg);
    1b80:	80 e9       	ldi	r24, 0x90	; 144
    1b82:	92 e0       	ldi	r25, 0x02	; 2
    1b84:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1b88:	60 e9       	ldi	r22, 0x90	; 144
    1b8a:	72 e0       	ldi	r23, 0x02	; 2
    1b8c:	80 e8       	ldi	r24, 0x80	; 128
    1b8e:	0e 94 60 24 	call	0x48c0	; 0x48c0 <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
    1b92:	4c e0       	ldi	r20, 0x0C	; 12
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	64 e0       	ldi	r22, 0x04	; 4
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1ba2:	24 e7       	ldi	r18, 0x74	; 116
    1ba4:	39 e0       	ldi	r19, 0x09	; 9
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	ce 01       	movw	r24, r28
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1bb2:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1bb4:	9a cf       	rjmp	.-204    	; 0x1aea <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
    1bb6:	b7 01       	movw	r22, r14
    1bb8:	80 e9       	ldi	r24, 0x90	; 144
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 c4 2e 	call	0x5d88	; 0x5d88 <mac_set_appkey>
				attach_ending(lm_msg);
    1bc0:	80 e9       	ldi	r24, 0x90	; 144
    1bc2:	92 e0       	ldi	r25, 0x02	; 2
    1bc4:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1bc8:	60 e9       	ldi	r22, 0x90	; 144
    1bca:	72 e0       	ldi	r23, 0x02	; 2
    1bcc:	80 e8       	ldi	r24, 0x80	; 128
    1bce:	0e 94 60 24 	call	0x48c0	; 0x48c0 <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
    1bd2:	4c e0       	ldi	r20, 0x0C	; 12
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	65 e0       	ldi	r22, 0x05	; 5
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	ce 01       	movw	r24, r28
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1be2:	24 e7       	ldi	r18, 0x74	; 116
    1be4:	39 e0       	ldi	r19, 0x09	; 9
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	ce 01       	movw	r24, r28
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1bf2:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1bf4:	7a cf       	rjmp	.-268    	; 0x1aea <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
    1bf6:	b6 01       	movw	r22, r12
    1bf8:	80 e9       	ldi	r24, 0x90	; 144
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <mac_set_appeui>
				attach_ending(lm_msg);
    1c00:	80 e9       	ldi	r24, 0x90	; 144
    1c02:	92 e0       	ldi	r25, 0x02	; 2
    1c04:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1c08:	60 e9       	ldi	r22, 0x90	; 144
    1c0a:	72 e0       	ldi	r23, 0x02	; 2
    1c0c:	80 e8       	ldi	r24, 0x80	; 128
    1c0e:	0e 94 60 24 	call	0x48c0	; 0x48c0 <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
    1c12:	4c e0       	ldi	r20, 0x0C	; 12
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	66 e0       	ldi	r22, 0x06	; 6
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1c22:	24 e7       	ldi	r18, 0x74	; 116
    1c24:	39 e0       	ldi	r19, 0x09	; 9
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1c32:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1c34:	5a cf       	rjmp	.-332    	; 0x1aea <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
    1c36:	61 e0       	ldi	r22, 0x01	; 1
    1c38:	80 e9       	ldi	r24, 0x90	; 144
    1c3a:	92 e0       	ldi	r25, 0x02	; 2
    1c3c:	0e 94 8e 33 	call	0x671c	; 0x671c <mac_set_ADR>
				attach_ending(lm_msg);
    1c40:	80 e9       	ldi	r24, 0x90	; 144
    1c42:	92 e0       	ldi	r25, 0x02	; 2
    1c44:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1c48:	60 e9       	ldi	r22, 0x90	; 144
    1c4a:	72 e0       	ldi	r23, 0x02	; 2
    1c4c:	80 e8       	ldi	r24, 0x80	; 128
    1c4e:	0e 94 60 24 	call	0x48c0	; 0x48c0 <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
    1c52:	4c e0       	ldi	r20, 0x0C	; 12
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	67 e0       	ldi	r22, 0x07	; 7
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1c62:	24 e7       	ldi	r18, 0x74	; 116
    1c64:	39 e0       	ldi	r19, 0x09	; 9
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1c72:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1c74:	3a cf       	rjmp	.-396    	; 0x1aea <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
    1c76:	47 e7       	ldi	r20, 0x77	; 119
    1c78:	59 e0       	ldi	r21, 0x09	; 9
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	80 e9       	ldi	r24, 0x90	; 144
    1c7e:	92 e0       	ldi	r25, 0x02	; 2
    1c80:	0e 94 ca 32 	call	0x6594	; 0x6594 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1c84:	60 e9       	ldi	r22, 0x90	; 144
    1c86:	72 e0       	ldi	r23, 0x02	; 2
    1c88:	80 e8       	ldi	r24, 0x80	; 128
    1c8a:	0e 94 60 24 	call	0x48c0	; 0x48c0 <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    1c8e:	4c e0       	ldi	r20, 0x0C	; 12
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	68 e0       	ldi	r22, 0x08	; 8
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	ce 01       	movw	r24, r28
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1c9e:	24 e7       	ldi	r18, 0x74	; 116
    1ca0:	39 e0       	ldi	r19, 0x09	; 9
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	01 96       	adiw	r24, 0x01	; 1
    1caa:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1cae:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1cb0:	1c cf       	rjmp	.-456    	; 0x1aea <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	59 e0       	ldi	r21, 0x09	; 9
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	80 e9       	ldi	r24, 0x90	; 144
    1cba:	92 e0       	ldi	r25, 0x02	; 2
    1cbc:	0e 94 ca 32 	call	0x6594	; 0x6594 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1cc0:	60 e9       	ldi	r22, 0x90	; 144
    1cc2:	72 e0       	ldi	r23, 0x02	; 2
    1cc4:	80 e8       	ldi	r24, 0x80	; 128
    1cc6:	0e 94 60 24 	call	0x48c0	; 0x48c0 <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    1cca:	4a e0       	ldi	r20, 0x0A	; 10
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	69 e0       	ldi	r22, 0x09	; 9
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    1cda:	24 e7       	ldi	r18, 0x74	; 116
    1cdc:	39 e0       	ldi	r19, 0x09	; 9
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1cea:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1cec:	fe ce       	rjmp	.-516    	; 0x1aea <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_set_pending_states(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    1cee:	4a e0       	ldi	r20, 0x0A	; 10
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	6b e0       	ldi	r22, 0x0B	; 11
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, ACCEPTED);
    1cfe:	2e e8       	ldi	r18, 0x8E	; 142
    1d00:	39 e0       	ldi	r19, 0x09	; 9
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	ce 01       	movw	r24, r28
    1d08:	01 96       	adiw	r24, 0x01	; 1
    1d0a:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				state=JN_WAIT_FOR_INCOMMING;
    1d0e:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1d10:	ec ce       	rjmp	.-552    	; 0x1aea <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
    1d12:	80 e9       	ldi	r24, 0x90	; 144
    1d14:	92 e0       	ldi	r25, 0x02	; 2
    1d16:	0e 94 c6 2a 	call	0x558c	; 0x558c <parse_err>
    1d1a:	14 c0       	rjmp	.+40     	; 0x1d44 <JN_join_network+0x284>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    1d1c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <uart0_hal_message_ready>
    1d20:	88 23       	and	r24, r24
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <JN_join_network+0x266>
    1d24:	e2 ce       	rjmp	.-572    	; 0x1aea <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
    1d26:	80 e9       	ldi	r24, 0x90	; 144
    1d28:	92 e0       	ldi	r25, 0x02	; 2
    1d2a:	0e 94 75 34 	call	0x68ea	; 0x68ea <uart0_hal_read_message_as_str>
					state=util_match_message(&stateData, lm_msg);
    1d2e:	60 e9       	ldi	r22, 0x90	; 144
    1d30:	72 e0       	ldi	r23, 0x02	; 2
    1d32:	ce 01       	movw	r24, r28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	0e 94 3e 2a 	call	0x547c	; 0x547c <util_match_message>
    1d3a:	18 2f       	mov	r17, r24
    1d3c:	d6 ce       	rjmp	.-596    	; 0x1aea <JN_join_network+0x2a>
				util_set_match_case(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <JN_join_network+0x284>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    1d44:	28 96       	adiw	r28, 0x08	; 8
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	1f 91       	pop	r17
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	df 90       	pop	r13
    1d5c:	cf 90       	pop	r12
    1d5e:	bf 90       	pop	r11
    1d60:	af 90       	pop	r10
    1d62:	08 95       	ret

Disassembly of section .text.set_block_uplink:

00006d34 <set_block_uplink>:
	util_send_break();
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    6d34:	8c e3       	ldi	r24, 0x3C	; 60
    6d36:	96 e3       	ldi	r25, 0x36	; 54
    6d38:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <TC2_HAL_subscribe>
    6d3c:	80 93 e6 0e 	sts	0x0EE6, r24	; 0x800ee6 <subPointer>
	busy=true;
    6d40:	81 e0       	ldi	r24, 0x01	; 1
    6d42:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <busy>
	cnt=0;
    6d46:	10 92 e8 0e 	sts	0x0EE8, r1	; 0x800ee8 <cnt>
    6d4a:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

00006c78 <cb_block_uplink>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void cb_block_uplink(){
	cnt++;
    6c78:	80 91 e8 0e 	lds	r24, 0x0EE8	; 0x800ee8 <cnt>
    6c7c:	8f 5f       	subi	r24, 0xFF	; 255
    6c7e:	80 93 e8 0e 	sts	0x0EE8, r24	; 0x800ee8 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    6c82:	8d 33       	cpi	r24, 0x3D	; 61
    6c84:	30 f0       	brcs	.+12     	; 0x6c92 <cb_block_uplink+0x1a>
		busy=false;
    6c86:	10 92 e7 0e 	sts	0x0EE7, r1	; 0x800ee7 <busy>
		TC2_HAL_cancel(subPointer);
    6c8a:	80 91 e6 0e 	lds	r24, 0x0EE6	; 0x800ee6 <subPointer>
    6c8e:	0e 94 db 30 	call	0x61b6	; 0x61b6 <TC2_HAL_cancel>
    6c92:	08 95       	ret

Disassembly of section .text.LM_join_network:

0000727a <LM_join_network>:
static void cb_block_uplink();
static void set_block_uplink();


LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    727a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <JN_join_network>
}
    727e:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00006868 <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    6868:	cf 93       	push	r28
    686a:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    686c:	90 91 e7 0e 	lds	r25, 0x0EE7	; 0x800ee7 <busy>
    6870:	91 11       	cpse	r25, r1
    6872:	0c c0       	rjmp	.+24     	; 0x688c <LM_send_uplink+0x24>
    6874:	46 2f       	mov	r20, r22
    6876:	b9 01       	movw	r22, r18
	LM_STATUS status=SU_send_uplink(LORA_PORT, data, length);
    6878:	84 e6       	ldi	r24, 0x64	; 100
    687a:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <SU_send_uplink>
    687e:	c8 2f       	mov	r28, r24
	//Don't block if invalid length - no package was sent!
	if(status!=LM_STATUS_INV_DATA_LEN){
    6880:	85 30       	cpi	r24, 0x05	; 5
    6882:	31 f0       	breq	.+12     	; 0x6890 <LM_send_uplink+0x28>
		set_block_uplink();
    6884:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <set_block_uplink>
	}
	return status;
    6888:	8c 2f       	mov	r24, r28
    688a:	02 c0       	rjmp	.+4      	; 0x6890 <LM_send_uplink+0x28>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    688c:	82 e0       	ldi	r24, 0x02	; 2
    688e:	00 c0       	rjmp	.+0      	; 0x6890 <LM_send_uplink+0x28>
	//Don't block if invalid length - no package was sent!
	if(status!=LM_STATUS_INV_DATA_LEN){
		set_block_uplink();
	}
	return status;
}
    6890:	cf 91       	pop	r28
    6892:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

00006ed2 <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	busy=false;
    6ed2:	10 92 e7 0e 	sts	0x0EE7, r1	; 0x800ee7 <busy>
	TC2_HAL_cancel(subPointer);
    6ed6:	80 91 e6 0e 	lds	r24, 0x0EE6	; 0x800ee6 <subPointer>
    6eda:	0e 94 db 30 	call	0x61b6	; 0x61b6 <TC2_HAL_cancel>
	return SC_put_to_sleep();
    6ede:	0e 94 88 31 	call	0x6310	; 0x6310 <SC_put_to_sleep>
}
    6ee2:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00007280 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    7280:	0e 94 0e 28 	call	0x501c	; 0x501c <SC_wake_up>
}
    7284:	08 95       	ret

Disassembly of section .text.LM_is_free:

000071bc <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    71bc:	90 91 e7 0e 	lds	r25, 0x0EE7	; 0x800ee7 <busy>
}
    71c0:	81 e0       	ldi	r24, 0x01	; 1
    71c2:	89 27       	eor	r24, r25
    71c4:	08 95       	ret

Disassembly of section .text.LM_reset_module:

00007286 <LM_reset_module>:

LM_STATUS LM_reset_module(){
	return util_reset_module();
    7286:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <util_reset_module>
}
    728a:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

0000728c <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    728c:	0e 94 57 25 	call	0x4aae	; 0x4aae <util_lora_forward_msg>
    7290:	08 95       	ret

Disassembly of section .text.LM_send_break:

00007292 <LM_send_break>:
}

void LM_send_break(){
	util_send_break();
    7292:	0e 94 20 39 	call	0x7240	; 0x7240 <util_send_break>
    7296:	08 95       	ret

Disassembly of section .text.tohex:

000049ba <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], uint8_t bytes)
{
    49ba:	cf 92       	push	r12
    49bc:	df 92       	push	r13
    49be:	ef 92       	push	r14
    49c0:	0f 93       	push	r16
    49c2:	1f 93       	push	r17
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	8c 01       	movw	r16, r24
    49ca:	6a 01       	movw	r12, r20
    49cc:	e6 2e       	mov	r14, r22
    49ce:	d2 2f       	mov	r29, r18
    for (uint8_t i = 0; i < bytes; i++){
    49d0:	c0 e0       	ldi	r28, 0x00	; 0
    49d2:	26 c0       	rjmp	.+76     	; 0x4a20 <tohex+0x66>
        sprintf(str + i * 2, "%02x", data[i]);
    49d4:	8c 2f       	mov	r24, r28
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	4e 2d       	mov	r20, r14
    49da:	96 01       	movw	r18, r12
    49dc:	28 0f       	add	r18, r24
    49de:	39 1f       	adc	r19, r25
    49e0:	41 1d       	adc	r20, r1
    49e2:	97 fd       	sbrc	r25, 7
    49e4:	4a 95       	dec	r20
    49e6:	f9 01       	movw	r30, r18
    49e8:	24 91       	lpm	r18, Z
    49ea:	47 fd       	sbrc	r20, 7
    49ec:	20 81       	ld	r18, Z
    49ee:	88 0f       	add	r24, r24
    49f0:	99 1f       	adc	r25, r25
    49f2:	1f 92       	push	r1
    49f4:	2f 93       	push	r18
    49f6:	2c ec       	ldi	r18, 0xCC	; 204
    49f8:	38 e0       	ldi	r19, 0x08	; 8
    49fa:	40 e0       	ldi	r20, 0x00	; 0
    49fc:	4f 93       	push	r20
    49fe:	3f 93       	push	r19
    4a00:	2f 93       	push	r18
    4a02:	80 0f       	add	r24, r16
    4a04:	91 1f       	adc	r25, r17
    4a06:	9f 93       	push	r25
    4a08:	8f 93       	push	r24
    4a0a:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], uint8_t bytes)
{
    for (uint8_t i = 0; i < bytes; i++){
    4a0e:	cf 5f       	subi	r28, 0xFF	; 255
    4a10:	8d b7       	in	r24, 0x3d	; 61
    4a12:	9e b7       	in	r25, 0x3e	; 62
    4a14:	07 96       	adiw	r24, 0x07	; 7
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	f8 94       	cli
    4a1a:	9e bf       	out	0x3e, r25	; 62
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	8d bf       	out	0x3d, r24	; 61
    4a20:	cd 17       	cp	r28, r29
    4a22:	c0 f2       	brcs	.-80     	; 0x49d4 <tohex+0x1a>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	1f 91       	pop	r17
    4a2a:	0f 91       	pop	r16
    4a2c:	ef 90       	pop	r14
    4a2e:	df 90       	pop	r13
    4a30:	cf 90       	pop	r12
    4a32:	08 95       	ret

Disassembly of section .text.attach_ending:

00006c94 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    6c94:	fc 01       	movw	r30, r24
    6c96:	01 90       	ld	r0, Z+
    6c98:	00 20       	and	r0, r0
    6c9a:	e9 f7       	brne	.-6      	; 0x6c96 <attach_ending+0x2>
    6c9c:	cf 01       	movw	r24, r30
    6c9e:	23 e0       	ldi	r18, 0x03	; 3
    6ca0:	30 e0       	ldi	r19, 0x00	; 0
    6ca2:	41 ed       	ldi	r20, 0xD1	; 209
    6ca4:	58 e0       	ldi	r21, 0x08	; 8
    6ca6:	60 e0       	ldi	r22, 0x00	; 0
    6ca8:	01 97       	sbiw	r24, 0x01	; 1
    6caa:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
    6cae:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00006594 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    6594:	cf 93       	push	r28
    6596:	df 93       	push	r29
    6598:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    659a:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <strcpy>
	strcat(buffer, CMD_END_CHARS);
    659e:	fe 01       	movw	r30, r28
    65a0:	01 90       	ld	r0, Z+
    65a2:	00 20       	and	r0, r0
    65a4:	e9 f7       	brne	.-6      	; 0x65a0 <cmd_with_ending+0xc>
    65a6:	cf 01       	movw	r24, r30
    65a8:	23 e0       	ldi	r18, 0x03	; 3
    65aa:	30 e0       	ldi	r19, 0x00	; 0
    65ac:	41 ed       	ldi	r20, 0xD1	; 209
    65ae:	58 e0       	ldi	r21, 0x08	; 8
    65b0:	60 e0       	ldi	r22, 0x00	; 0
    65b2:	01 97       	sbiw	r24, 0x01	; 1
    65b4:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	return strlen(buffer);
    65b8:	be 01       	movw	r22, r28
    65ba:	80 e8       	ldi	r24, 0x80	; 128
    65bc:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
}
    65c0:	df 91       	pop	r29
    65c2:	cf 91       	pop	r28
    65c4:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

00005362 <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    5362:	cf 93       	push	r28
    5364:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    5366:	44 36       	cpi	r20, 0x64	; 100
    5368:	51 05       	cpc	r21, r1
    536a:	61 05       	cpc	r22, r1
    536c:	71 05       	cpc	r23, r1
    536e:	18 f1       	brcs	.+70     	; 0x53b6 <sys_sleep_cmd+0x54>
    5370:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    5372:	7f 93       	push	r23
    5374:	6f 93       	push	r22
    5376:	5f 93       	push	r21
    5378:	4f 93       	push	r20
    537a:	84 ed       	ldi	r24, 0xD4	; 212
    537c:	98 e0       	ldi	r25, 0x08	; 8
    537e:	a0 e0       	ldi	r26, 0x00	; 0
    5380:	af 93       	push	r26
    5382:	9f 93       	push	r25
    5384:	8f 93       	push	r24
    5386:	8e ed       	ldi	r24, 0xDE	; 222
    5388:	98 e0       	ldi	r25, 0x08	; 8
    538a:	a0 e0       	ldi	r26, 0x00	; 0
    538c:	af 93       	push	r26
    538e:	9f 93       	push	r25
    5390:	8f 93       	push	r24
    5392:	df 93       	push	r29
    5394:	cf 93       	push	r28
    5396:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    return strlen(buffer);
    539a:	be 01       	movw	r22, r28
    539c:	80 e8       	ldi	r24, 0x80	; 128
    539e:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    53a2:	2d b7       	in	r18, 0x3d	; 61
    53a4:	3e b7       	in	r19, 0x3e	; 62
    53a6:	24 5f       	subi	r18, 0xF4	; 244
    53a8:	3f 4f       	sbci	r19, 0xFF	; 255
    53aa:	0f b6       	in	r0, 0x3f	; 63
    53ac:	f8 94       	cli
    53ae:	3e bf       	out	0x3e, r19	; 62
    53b0:	0f be       	out	0x3f, r0	; 63
    53b2:	2d bf       	out	0x3d, r18	; 61
    53b4:	02 c0       	rjmp	.+4      	; 0x53ba <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    53b6:	8f ef       	ldi	r24, 0xFF	; 255
    53b8:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    53ba:	df 91       	pop	r29
    53bc:	cf 91       	pop	r28
    53be:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

0000596c <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    596c:	0f 93       	push	r16
    596e:	1f 93       	push	r17
    5970:	cf 93       	push	r28
    5972:	df 93       	push	r29
    5974:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    5976:	2f 93       	push	r18
    5978:	1f 93       	push	r17
    597a:	0f 93       	push	r16
    597c:	6f 93       	push	r22
    597e:	5f 93       	push	r21
    5980:	4f 93       	push	r20
    5982:	85 ee       	ldi	r24, 0xE5	; 229
    5984:	98 e0       	ldi	r25, 0x08	; 8
    5986:	a0 e0       	ldi	r26, 0x00	; 0
    5988:	af 93       	push	r26
    598a:	9f 93       	push	r25
    598c:	8f 93       	push	r24
    598e:	df 93       	push	r29
    5990:	cf 93       	push	r28
    5992:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    return strlen(buffer);
    5996:	be 01       	movw	r22, r28
    5998:	80 e8       	ldi	r24, 0x80	; 128
    599a:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    599e:	2d b7       	in	r18, 0x3d	; 61
    59a0:	3e b7       	in	r19, 0x3e	; 62
    59a2:	25 5f       	subi	r18, 0xF5	; 245
    59a4:	3f 4f       	sbci	r19, 0xFF	; 255
    59a6:	0f b6       	in	r0, 0x3f	; 63
    59a8:	f8 94       	cli
    59aa:	3e bf       	out	0x3e, r19	; 62
    59ac:	0f be       	out	0x3f, r0	; 63
    59ae:	2d bf       	out	0x3d, r18	; 61
}
    59b0:	df 91       	pop	r29
    59b2:	cf 91       	pop	r28
    59b4:	1f 91       	pop	r17
    59b6:	0f 91       	pop	r16
    59b8:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00005cf8 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    5cf8:	cf 92       	push	r12
    5cfa:	df 92       	push	r13
    5cfc:	ef 92       	push	r14
    5cfe:	0f 93       	push	r16
    5d00:	1f 93       	push	r17
    5d02:	cf 93       	push	r28
    5d04:	df 93       	push	r29
    5d06:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    5d08:	6b 01       	movw	r12, r22
    5d0a:	80 e8       	ldi	r24, 0x80	; 128
    5d0c:	e8 2e       	mov	r14, r24
    5d0e:	8e 2d       	mov	r24, r14
    5d10:	b6 01       	movw	r22, r12
    5d12:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    5d16:	40 97       	sbiw	r24, 0x10	; 16
    5d18:	49 f4       	brne	.+18     	; 0x5d2c <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    5d1a:	2e 2d       	mov	r18, r14
    5d1c:	86 01       	movw	r16, r12
    5d1e:	4b ee       	ldi	r20, 0xEB	; 235
    5d20:	58 e0       	ldi	r21, 0x08	; 8
    5d22:	60 e0       	ldi	r22, 0x00	; 0
    5d24:	ce 01       	movw	r24, r28
    5d26:	0e 94 b6 2c 	call	0x596c	; 0x596c <mac_set_parameter>
    5d2a:	02 c0       	rjmp	.+4      	; 0x5d30 <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    5d2c:	8f ef       	ldi	r24, 0xFF	; 255
    5d2e:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    5d30:	df 91       	pop	r29
    5d32:	cf 91       	pop	r28
    5d34:	1f 91       	pop	r17
    5d36:	0f 91       	pop	r16
    5d38:	ef 90       	pop	r14
    5d3a:	df 90       	pop	r13
    5d3c:	cf 90       	pop	r12
    5d3e:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

00005d40 <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    5d40:	cf 92       	push	r12
    5d42:	df 92       	push	r13
    5d44:	ef 92       	push	r14
    5d46:	0f 93       	push	r16
    5d48:	1f 93       	push	r17
    5d4a:	cf 93       	push	r28
    5d4c:	df 93       	push	r29
    5d4e:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    5d50:	6b 01       	movw	r12, r22
    5d52:	80 e8       	ldi	r24, 0x80	; 128
    5d54:	e8 2e       	mov	r14, r24
    5d56:	8e 2d       	mov	r24, r14
    5d58:	b6 01       	movw	r22, r12
    5d5a:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    5d5e:	40 97       	sbiw	r24, 0x10	; 16
    5d60:	49 f4       	brne	.+18     	; 0x5d74 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    5d62:	2e 2d       	mov	r18, r14
    5d64:	86 01       	movw	r16, r12
    5d66:	4a ef       	ldi	r20, 0xFA	; 250
    5d68:	58 e0       	ldi	r21, 0x08	; 8
    5d6a:	60 e0       	ldi	r22, 0x00	; 0
    5d6c:	ce 01       	movw	r24, r28
    5d6e:	0e 94 b6 2c 	call	0x596c	; 0x596c <mac_set_parameter>
    5d72:	02 c0       	rjmp	.+4      	; 0x5d78 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    5d74:	8f ef       	ldi	r24, 0xFF	; 255
    5d76:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    5d78:	df 91       	pop	r29
    5d7a:	cf 91       	pop	r28
    5d7c:	1f 91       	pop	r17
    5d7e:	0f 91       	pop	r16
    5d80:	ef 90       	pop	r14
    5d82:	df 90       	pop	r13
    5d84:	cf 90       	pop	r12
    5d86:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00005d88 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    5d88:	cf 92       	push	r12
    5d8a:	df 92       	push	r13
    5d8c:	ef 92       	push	r14
    5d8e:	0f 93       	push	r16
    5d90:	1f 93       	push	r17
    5d92:	cf 93       	push	r28
    5d94:	df 93       	push	r29
    5d96:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    5d98:	6b 01       	movw	r12, r22
    5d9a:	80 e8       	ldi	r24, 0x80	; 128
    5d9c:	e8 2e       	mov	r14, r24
    5d9e:	8e 2d       	mov	r24, r14
    5da0:	b6 01       	movw	r22, r12
    5da2:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    5da6:	80 97       	sbiw	r24, 0x20	; 32
    5da8:	49 f4       	brne	.+18     	; 0x5dbc <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    5daa:	2e 2d       	mov	r18, r14
    5dac:	86 01       	movw	r16, r12
    5dae:	49 e0       	ldi	r20, 0x09	; 9
    5db0:	59 e0       	ldi	r21, 0x09	; 9
    5db2:	60 e0       	ldi	r22, 0x00	; 0
    5db4:	ce 01       	movw	r24, r28
    5db6:	0e 94 b6 2c 	call	0x596c	; 0x596c <mac_set_parameter>
    5dba:	02 c0       	rjmp	.+4      	; 0x5dc0 <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    5dbc:	8f ef       	ldi	r24, 0xFF	; 255
    5dbe:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    5dc0:	df 91       	pop	r29
    5dc2:	cf 91       	pop	r28
    5dc4:	1f 91       	pop	r17
    5dc6:	0f 91       	pop	r16
    5dc8:	ef 90       	pop	r14
    5dca:	df 90       	pop	r13
    5dcc:	cf 90       	pop	r12
    5dce:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

0000671c <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    671c:	0f 93       	push	r16
    671e:	1f 93       	push	r17
	if(state==0){
    6720:	61 11       	cpse	r22, r1
    6722:	09 c0       	rjmp	.+18     	; 0x6736 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    6724:	08 e1       	ldi	r16, 0x18	; 24
    6726:	19 e0       	ldi	r17, 0x09	; 9
    6728:	20 e0       	ldi	r18, 0x00	; 0
    672a:	4c e1       	ldi	r20, 0x1C	; 28
    672c:	59 e0       	ldi	r21, 0x09	; 9
    672e:	60 e0       	ldi	r22, 0x00	; 0
    6730:	0e 94 b6 2c 	call	0x596c	; 0x596c <mac_set_parameter>
    6734:	08 c0       	rjmp	.+16     	; 0x6746 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    6736:	08 e2       	ldi	r16, 0x28	; 40
    6738:	19 e0       	ldi	r17, 0x09	; 9
    673a:	20 e0       	ldi	r18, 0x00	; 0
    673c:	4c e1       	ldi	r20, 0x1C	; 28
    673e:	59 e0       	ldi	r21, 0x09	; 9
    6740:	60 e0       	ldi	r22, 0x00	; 0
    6742:	0e 94 b6 2c 	call	0x596c	; 0x596c <mac_set_parameter>
	}
}
    6746:	1f 91       	pop	r17
    6748:	0f 91       	pop	r16
    674a:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

00004220 <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    4220:	df 92       	push	r13
    4222:	ef 92       	push	r14
    4224:	ff 92       	push	r15
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	cd b7       	in	r28, 0x3d	; 61
    4230:	de b7       	in	r29, 0x3e	; 62
    4232:	c9 5c       	subi	r28, 0xC9	; 201
    4234:	d1 09       	sbc	r29, r1
    4236:	0f b6       	in	r0, 0x3f	; 63
    4238:	f8 94       	cli
    423a:	de bf       	out	0x3e, r29	; 62
    423c:	0f be       	out	0x3f, r0	; 63
    423e:	cd bf       	out	0x3d, r28	; 61
    4240:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    4242:	9f ef       	ldi	r25, 0xFF	; 255
    4244:	96 0f       	add	r25, r22
    4246:	9f 3d       	cpi	r25, 0xDF	; 223
    4248:	60 f5       	brcc	.+88     	; 0x42a2 <mac_tx_confirmed+0x82>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    424a:	9f ef       	ldi	r25, 0xFF	; 255
    424c:	92 0f       	add	r25, r18
    424e:	94 36       	cpi	r25, 0x64	; 100
    4250:	58 f5       	brcc	.+86     	; 0x42a8 <mac_tx_confirmed+0x88>
    4252:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    4254:	60 e8       	ldi	r22, 0x80	; 128
    4256:	ce 01       	movw	r24, r28
    4258:	01 96       	adiw	r24, 0x01	; 1
    425a:	7c 01       	movw	r14, r24
    425c:	0e 94 dd 24 	call	0x49ba	; 0x49ba <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    4260:	c7 01       	movw	r24, r14
    4262:	a0 e8       	ldi	r26, 0x80	; 128
    4264:	af 93       	push	r26
    4266:	9f 93       	push	r25
    4268:	ef 92       	push	r14
    426a:	1f 92       	push	r1
    426c:	df 92       	push	r13
    426e:	8b e2       	ldi	r24, 0x2B	; 43
    4270:	99 e0       	ldi	r25, 0x09	; 9
    4272:	a0 e0       	ldi	r26, 0x00	; 0
    4274:	af 93       	push	r26
    4276:	9f 93       	push	r25
    4278:	8f 93       	push	r24
    427a:	86 e3       	ldi	r24, 0x36	; 54
    427c:	99 e0       	ldi	r25, 0x09	; 9
    427e:	a0 e0       	ldi	r26, 0x00	; 0
    4280:	af 93       	push	r26
    4282:	9f 93       	push	r25
    4284:	8f 93       	push	r24
    4286:	1f 93       	push	r17
    4288:	0f 93       	push	r16
    428a:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    
	
    return strlen(buffer);
    428e:	b8 01       	movw	r22, r16
    4290:	80 e8       	ldi	r24, 0x80	; 128
    4292:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    42a0:	05 c0       	rjmp	.+10     	; 0x42ac <mac_tx_confirmed+0x8c>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    42a2:	8f ef       	ldi	r24, 0xFF	; 255
    42a4:	9f ef       	ldi	r25, 0xFF	; 255
    42a6:	02 c0       	rjmp	.+4      	; 0x42ac <mac_tx_confirmed+0x8c>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    42a8:	8f ef       	ldi	r24, 0xFF	; 255
    42aa:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    42ac:	c7 53       	subi	r28, 0x37	; 55
    42ae:	df 4f       	sbci	r29, 0xFF	; 255
    42b0:	0f b6       	in	r0, 0x3f	; 63
    42b2:	f8 94       	cli
    42b4:	de bf       	out	0x3e, r29	; 62
    42b6:	0f be       	out	0x3f, r0	; 63
    42b8:	cd bf       	out	0x3d, r28	; 61
    42ba:	df 91       	pop	r29
    42bc:	cf 91       	pop	r28
    42be:	1f 91       	pop	r17
    42c0:	0f 91       	pop	r16
    42c2:	ff 90       	pop	r15
    42c4:	ef 90       	pop	r14
    42c6:	df 90       	pop	r13
    42c8:	08 95       	ret

Disassembly of section .text.decode_tx_response:

00005160 <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    5160:	cf 92       	push	r12
    5162:	df 92       	push	r13
    5164:	ef 92       	push	r14
    5166:	6b 01       	movw	r12, r22
    5168:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    516a:	27 e9       	ldi	r18, 0x97	; 151
    516c:	39 e0       	ldi	r19, 0x09	; 9
    516e:	40 e0       	ldi	r20, 0x00	; 0
    5170:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    5174:	89 2b       	or	r24, r25
    5176:	e9 f0       	breq	.+58     	; 0x51b2 <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    5178:	22 ea       	ldi	r18, 0xA2	; 162
    517a:	39 e0       	ldi	r19, 0x09	; 9
    517c:	40 e0       	ldi	r20, 0x00	; 0
    517e:	8e 2d       	mov	r24, r14
    5180:	b6 01       	movw	r22, r12
    5182:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    5186:	89 2b       	or	r24, r25
    5188:	b1 f0       	breq	.+44     	; 0x51b6 <decode_tx_response+0x56>
	if(util_str_begins_with(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    518a:	2a ea       	ldi	r18, 0xAA	; 170
    518c:	39 e0       	ldi	r19, 0x09	; 9
    518e:	40 e0       	ldi	r20, 0x00	; 0
    5190:	8e 2d       	mov	r24, r14
    5192:	b6 01       	movw	r22, r12
    5194:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <util_str_begins_with>
    5198:	81 11       	cpse	r24, r1
    519a:	0f c0       	rjmp	.+30     	; 0x51ba <decode_tx_response+0x5a>
	if(util_str_begins_with(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    519c:	21 eb       	ldi	r18, 0xB1	; 177
    519e:	39 e0       	ldi	r19, 0x09	; 9
    51a0:	40 e0       	ldi	r20, 0x00	; 0
    51a2:	8e 2d       	mov	r24, r14
    51a4:	b6 01       	movw	r22, r12
    51a6:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <util_str_begins_with>
    51aa:	88 23       	and	r24, r24
    51ac:	41 f0       	breq	.+16     	; 0x51be <decode_tx_response+0x5e>
    51ae:	85 e0       	ldi	r24, 0x05	; 5
    51b0:	07 c0       	rjmp	.+14     	; 0x51c0 <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    51b2:	82 e0       	ldi	r24, 0x02	; 2
    51b4:	05 c0       	rjmp	.+10     	; 0x51c0 <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    51b6:	84 e0       	ldi	r24, 0x04	; 4
    51b8:	03 c0       	rjmp	.+6      	; 0x51c0 <decode_tx_response+0x60>
	if(util_str_begins_with(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    51ba:	80 e0       	ldi	r24, 0x00	; 0
    51bc:	01 c0       	rjmp	.+2      	; 0x51c0 <decode_tx_response+0x60>
	if(util_str_begins_with(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    51be:	81 e0       	ldi	r24, 0x01	; 1
}
    51c0:	ef 90       	pop	r14
    51c2:	df 90       	pop	r13
    51c4:	cf 90       	pop	r12
    51c6:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

000037ba <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    37ba:	df 92       	push	r13
    37bc:	ef 92       	push	r14
    37be:	ff 92       	push	r15
    37c0:	0f 93       	push	r16
    37c2:	1f 93       	push	r17
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	28 97       	sbiw	r28, 0x08	; 8
    37ce:	0f b6       	in	r0, 0x3f	; 63
    37d0:	f8 94       	cli
    37d2:	de bf       	out	0x3e, r29	; 62
    37d4:	0f be       	out	0x3f, r0	; 63
    37d6:	cd bf       	out	0x3d, r28	; 61
    37d8:	d8 2e       	mov	r13, r24
    37da:	7b 01       	movw	r14, r22
    37dc:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    37de:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    37e0:	12 30       	cpi	r17, 0x02	; 2
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <SU_send_uplink+0x2c>
    37e4:	40 c0       	rjmp	.+128    	; 0x3866 <SU_send_uplink+0xac>
    37e6:	28 f4       	brcc	.+10     	; 0x37f2 <SU_send_uplink+0x38>
    37e8:	11 23       	and	r17, r17
    37ea:	49 f0       	breq	.+18     	; 0x37fe <SU_send_uplink+0x44>
    37ec:	11 30       	cpi	r17, 0x01	; 1
    37ee:	49 f1       	breq	.+82     	; 0x3842 <SU_send_uplink+0x88>
    37f0:	f7 cf       	rjmp	.-18     	; 0x37e0 <SU_send_uplink+0x26>
    37f2:	13 30       	cpi	r17, 0x03	; 3
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <SU_send_uplink+0x3e>
    37f6:	4e c0       	rjmp	.+156    	; 0x3894 <SU_send_uplink+0xda>
    37f8:	14 30       	cpi	r17, 0x04	; 4
    37fa:	d9 f1       	breq	.+118    	; 0x3872 <SU_send_uplink+0xb8>
    37fc:	f1 cf       	rjmp	.-30     	; 0x37e0 <SU_send_uplink+0x26>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    37fe:	20 2f       	mov	r18, r16
    3800:	a7 01       	movw	r20, r14
    3802:	6d 2d       	mov	r22, r13
    3804:	80 e9       	ldi	r24, 0x90	; 144
    3806:	92 e0       	ldi	r25, 0x02	; 2
    3808:	0e 94 10 21 	call	0x4220	; 0x4220 <mac_tx_confirmed>
				attach_ending(lm_msg);
    380c:	80 e9       	ldi	r24, 0x90	; 144
    380e:	92 e0       	ldi	r25, 0x02	; 2
    3810:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <attach_ending>
				uart0_hal_send_string(lm_msg);
    3814:	60 e9       	ldi	r22, 0x90	; 144
    3816:	72 e0       	ldi	r23, 0x02	; 2
    3818:	80 e8       	ldi	r24, 0x80	; 128
    381a:	0e 94 60 24 	call	0x48c0	; 0x48c0 <uart0_hal_send_string>
				
				util_set_pending_states(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    381e:	42 e0       	ldi	r20, 0x02	; 2
    3820:	50 e0       	ldi	r21, 0x00	; 0
    3822:	61 e0       	ldi	r22, 0x01	; 1
    3824:	70 e0       	ldi	r23, 0x00	; 0
    3826:	ce 01       	movw	r24, r28
    3828:	01 96       	adiw	r24, 0x01	; 1
    382a:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, OK);
    382e:	22 ec       	ldi	r18, 0xC2	; 194
    3830:	39 e0       	ldi	r19, 0x09	; 9
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	60 e0       	ldi	r22, 0x00	; 0
    3836:	ce 01       	movw	r24, r28
    3838:	01 96       	adiw	r24, 0x01	; 1
    383a:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				state=SU_WAIT_FOR_INCOMMING;
    383e:	14 e0       	ldi	r17, 0x04	; 4
			break;
    3840:	cf cf       	rjmp	.-98     	; 0x37e0 <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_set_pending_states(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    3842:	42 e0       	ldi	r20, 0x02	; 2
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	63 e0       	ldi	r22, 0x03	; 3
    3848:	70 e0       	ldi	r23, 0x00	; 0
    384a:	ce 01       	movw	r24, r28
    384c:	01 96       	adiw	r24, 0x01	; 1
    384e:	0e 94 9c 38 	call	0x7138	; 0x7138 <util_set_pending_states>
				util_set_match_case(&stateData, LM_EXACT, MAC_TX_OK);
    3852:	25 ec       	ldi	r18, 0xC5	; 197
    3854:	39 e0       	ldi	r19, 0x09	; 9
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	60 e0       	ldi	r22, 0x00	; 0
    385a:	ce 01       	movw	r24, r28
    385c:	01 96       	adiw	r24, 0x01	; 1
    385e:	0e 94 a2 38 	call	0x7144	; 0x7144 <util_set_match_case>
				state=SU_WAIT_FOR_INCOMMING;
    3862:	14 e0       	ldi	r17, 0x04	; 4
			break;
    3864:	bd cf       	rjmp	.-134    	; 0x37e0 <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    3866:	60 e9       	ldi	r22, 0x90	; 144
    3868:	72 e0       	ldi	r23, 0x02	; 2
    386a:	80 e8       	ldi	r24, 0x80	; 128
    386c:	0e 94 b0 28 	call	0x5160	; 0x5160 <decode_tx_response>
    3870:	12 c0       	rjmp	.+36     	; 0x3896 <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    3872:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <uart0_hal_message_ready>
    3876:	88 23       	and	r24, r24
    3878:	09 f4       	brne	.+2      	; 0x387c <SU_send_uplink+0xc2>
    387a:	b2 cf       	rjmp	.-156    	; 0x37e0 <SU_send_uplink+0x26>
					uart0_hal_read_message_as_str(lm_msg);
    387c:	80 e9       	ldi	r24, 0x90	; 144
    387e:	92 e0       	ldi	r25, 0x02	; 2
    3880:	0e 94 75 34 	call	0x68ea	; 0x68ea <uart0_hal_read_message_as_str>
					state=util_match_message(&stateData, lm_msg);
    3884:	60 e9       	ldi	r22, 0x90	; 144
    3886:	72 e0       	ldi	r23, 0x02	; 2
    3888:	ce 01       	movw	r24, r28
    388a:	01 96       	adiw	r24, 0x01	; 1
    388c:	0e 94 3e 2a 	call	0x547c	; 0x547c <util_match_message>
    3890:	18 2f       	mov	r17, r24
    3892:	a6 cf       	rjmp	.-180    	; 0x37e0 <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    3894:	80 e0       	ldi	r24, 0x00	; 0
					state=util_match_message(&stateData, lm_msg);
				}
			break;
		}
	}
}
    3896:	28 96       	adiw	r28, 0x08	; 8
    3898:	0f b6       	in	r0, 0x3f	; 63
    389a:	f8 94       	cli
    389c:	de bf       	out	0x3e, r29	; 62
    389e:	0f be       	out	0x3f, r0	; 63
    38a0:	cd bf       	out	0x3d, r28	; 61
    38a2:	df 91       	pop	r29
    38a4:	cf 91       	pop	r28
    38a6:	1f 91       	pop	r17
    38a8:	0f 91       	pop	r16
    38aa:	ff 90       	pop	r15
    38ac:	ef 90       	pop	r14
    38ae:	df 90       	pop	r13
    38b0:	08 95       	ret

Disassembly of section .text.cb_counter:

00006e9a <cb_counter>:
		return LM_STATUS_FATAL_ERROR;
	}
}

static void cb_counter(){
	cnt++;
    6e9a:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <cnt>
    6e9e:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <cnt+0x1>
    6ea2:	01 96       	adiw	r24, 0x01	; 1
    6ea4:	90 93 ce 0e 	sts	0x0ECE, r25	; 0x800ece <cnt+0x1>
    6ea8:	80 93 cd 0e 	sts	0x0ECD, r24	; 0x800ecd <cnt>
    6eac:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00006310 <SC_put_to_sleep>:
static uint16_t cnt=0;
static int8_t eventPointer;

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    6310:	40 e0       	ldi	r20, 0x00	; 0
    6312:	5c e5       	ldi	r21, 0x5C	; 92
    6314:	66 e2       	ldi	r22, 0x26	; 38
    6316:	75 e0       	ldi	r23, 0x05	; 5
    6318:	80 e9       	ldi	r24, 0x90	; 144
    631a:	92 e0       	ldi	r25, 0x02	; 2
    631c:	0e 94 b1 29 	call	0x5362	; 0x5362 <sys_sleep_cmd>
	attach_ending(lm_msg);
    6320:	80 e9       	ldi	r24, 0x90	; 144
    6322:	92 e0       	ldi	r25, 0x02	; 2
    6324:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <attach_ending>
	uart0_hal_send_string(lm_msg);
    6328:	60 e9       	ldi	r22, 0x90	; 144
    632a:	72 e0       	ldi	r23, 0x02	; 2
    632c:	80 e8       	ldi	r24, 0x80	; 128
    632e:	0e 94 60 24 	call	0x48c0	; 0x48c0 <uart0_hal_send_string>
    6332:	2f ef       	ldi	r18, 0xFF	; 255
    6334:	81 ee       	ldi	r24, 0xE1	; 225
    6336:	94 e0       	ldi	r25, 0x04	; 4
    6338:	21 50       	subi	r18, 0x01	; 1
    633a:	80 40       	sbci	r24, 0x00	; 0
    633c:	90 40       	sbci	r25, 0x00	; 0
    633e:	e1 f7       	brne	.-8      	; 0x6338 <SC_put_to_sleep+0x28>
    6340:	00 c0       	rjmp	.+0      	; 0x6342 <SC_put_to_sleep+0x32>
    6342:	00 00       	nop
	_delay_ms(200);
	return LM_STATUS_SUCCESS;
}
    6344:	80 e0       	ldi	r24, 0x00	; 0
    6346:	08 95       	ret

Disassembly of section .text.SC_wake_up:

0000501c <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    501c:	85 e5       	ldi	r24, 0x55	; 85
    501e:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <uart0_hal_send_break>
	
	//Create watchdog
	cnt=0;
    5022:	10 92 ce 0e 	sts	0x0ECE, r1	; 0x800ece <cnt+0x1>
    5026:	10 92 cd 0e 	sts	0x0ECD, r1	; 0x800ecd <cnt>
	eventPointer=TC2_HAL_subscribe(&cb_counter);
    502a:	8d e4       	ldi	r24, 0x4D	; 77
    502c:	97 e3       	ldi	r25, 0x37	; 55
    502e:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <TC2_HAL_subscribe>
    5032:	80 93 e9 0e 	sts	0x0EE9, r24	; 0x800ee9 <eventPointer>
	
	//Expect ok from sleep
	while(uart0_hal_message_ready()==false && cnt<LM_SLEEP_WATCHDOG_CNT){}
    5036:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <uart0_hal_message_ready>
    503a:	81 11       	cpse	r24, r1
    503c:	06 c0       	rjmp	.+12     	; 0x504a <SC_wake_up+0x2e>
    503e:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <cnt>
    5042:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <cnt+0x1>
    5046:	0a 97       	sbiw	r24, 0x0a	; 10
    5048:	b0 f3       	brcs	.-20     	; 0x5036 <SC_wake_up+0x1a>
		
	TC2_HAL_cancel(eventPointer);
    504a:	80 91 e9 0e 	lds	r24, 0x0EE9	; 0x800ee9 <eventPointer>
    504e:	0e 94 db 30 	call	0x61b6	; 0x61b6 <TC2_HAL_cancel>
		
	if(cnt>=LM_SLEEP_WATCHDOG_CNT){
    5052:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <cnt>
    5056:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <cnt+0x1>
    505a:	0a 97       	sbiw	r24, 0x0a	; 10
    505c:	20 f0       	brcs	.+8      	; 0x5066 <SC_wake_up+0x4a>
		uart0_hal_clear_rx_buffer();
    505e:	0e 94 ca 38 	call	0x7194	; 0x7194 <uart0_hal_clear_rx_buffer>
		return LM_STATUS_FATAL_ERROR;
    5062:	81 e0       	ldi	r24, 0x01	; 1
    5064:	08 95       	ret
	}else{
		uart0_hal_read_message_as_str(lm_msg);
    5066:	80 e9       	ldi	r24, 0x90	; 144
    5068:	92 e0       	ldi	r25, 0x02	; 2
    506a:	0e 94 75 34 	call	0x68ea	; 0x68ea <uart0_hal_read_message_as_str>
		
		if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    506e:	60 e9       	ldi	r22, 0x90	; 144
    5070:	72 e0       	ldi	r23, 0x02	; 2
    5072:	80 e8       	ldi	r24, 0x80	; 128
    5074:	24 ef       	ldi	r18, 0xF4	; 244
    5076:	39 e0       	ldi	r19, 0x09	; 9
    5078:	40 e0       	ldi	r20, 0x00	; 0
    507a:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    507e:	89 2b       	or	r24, r25
    5080:	11 f4       	brne	.+4      	; 0x5086 <SC_wake_up+0x6a>
    5082:	80 e0       	ldi	r24, 0x00	; 0
    5084:	08 95       	ret
		return LM_STATUS_FATAL_ERROR;
    5086:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    5088:	08 95       	ret

Disassembly of section .text.cb_watchdog_counter:

0000712c <cb_watchdog_counter>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    712c:	80 91 eb 0e 	lds	r24, 0x0EEB	; 0x800eeb <wd_cnt>
    7130:	8f 5f       	subi	r24, 0xFF	; 255
    7132:	80 93 eb 0e 	sts	0x0EEB, r24	; 0x800eeb <wd_cnt>
    7136:	08 95       	ret

Disassembly of section .text.util_set_pending_states:

00007138 <util_set_pending_states>:
char lm_msg[250];

static void cb_watchdog_counter();

void util_set_pending_states(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    7138:	fc 01       	movw	r30, r24
    713a:	71 83       	std	Z+1, r23	; 0x01
    713c:	60 83       	st	Z, r22
	sd->failure_state=failed;
    713e:	53 83       	std	Z+3, r21	; 0x03
    7140:	42 83       	std	Z+2, r20	; 0x02
    7142:	08 95       	ret

Disassembly of section .text.util_set_match_case:

00007144 <util_set_match_case>:
}

void util_set_match_case(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    7144:	fc 01       	movw	r30, r24
    7146:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    7148:	25 83       	std	Z+5, r18	; 0x05
    714a:	36 83       	std	Z+6, r19	; 0x06
    714c:	47 83       	std	Z+7, r20	; 0x07
    714e:	08 95       	ret

Disassembly of section .text.util_str_begins_with:

00005c1c <util_str_begins_with>:
		return sd->failure_state;
	}
}


bool util_str_begins_with(const char *s1, const char *s2){
    5c1c:	6f 92       	push	r6
    5c1e:	7f 92       	push	r7
    5c20:	8f 92       	push	r8
    5c22:	cf 92       	push	r12
    5c24:	df 92       	push	r13
    5c26:	ef 92       	push	r14
    5c28:	0f 93       	push	r16
    5c2a:	1f 93       	push	r17
    5c2c:	3b 01       	movw	r6, r22
    5c2e:	88 2e       	mov	r8, r24
    5c30:	69 01       	movw	r12, r18
    5c32:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    5c34:	84 2f       	mov	r24, r20
    5c36:	b9 01       	movw	r22, r18
    5c38:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    5c3c:	8c 01       	movw	r16, r24
    5c3e:	4e 2d       	mov	r20, r14
    5c40:	96 01       	movw	r18, r12
    5c42:	88 2d       	mov	r24, r8
    5c44:	b3 01       	movw	r22, r6
    5c46:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <strncmp>
    5c4a:	21 e0       	ldi	r18, 0x01	; 1
    5c4c:	89 2b       	or	r24, r25
    5c4e:	09 f0       	breq	.+2      	; 0x5c52 <util_str_begins_with+0x36>
    5c50:	20 e0       	ldi	r18, 0x00	; 0
}
    5c52:	82 2f       	mov	r24, r18
    5c54:	1f 91       	pop	r17
    5c56:	0f 91       	pop	r16
    5c58:	ef 90       	pop	r14
    5c5a:	df 90       	pop	r13
    5c5c:	cf 90       	pop	r12
    5c5e:	8f 90       	pop	r8
    5c60:	7f 90       	pop	r7
    5c62:	6f 90       	pop	r6
    5c64:	08 95       	ret

Disassembly of section .text.util_match_message:

0000547c <util_match_message>:
void util_set_match_case(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_match_message(LM_STATE_DATA *sd, char *msg){
    547c:	cf 93       	push	r28
    547e:	df 93       	push	r29
    5480:	ec 01       	movw	r28, r24
	switch(sd->matchCase){
    5482:	8c 81       	ldd	r24, Y+4	; 0x04
    5484:	81 30       	cpi	r24, 0x01	; 1
    5486:	91 f0       	breq	.+36     	; 0x54ac <util_match_message+0x30>
    5488:	18 f0       	brcs	.+6      	; 0x5490 <util_match_message+0x14>
    548a:	82 30       	cpi	r24, 0x02	; 2
    548c:	e9 f0       	breq	.+58     	; 0x54c8 <util_match_message+0x4c>
    548e:	1f c0       	rjmp	.+62     	; 0x54ce <util_match_message+0x52>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    5490:	2d 81       	ldd	r18, Y+5	; 0x05
    5492:	3e 81       	ldd	r19, Y+6	; 0x06
    5494:	4f 81       	ldd	r20, Y+7	; 0x07
    5496:	80 e8       	ldi	r24, 0x80	; 128
    5498:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    549c:	89 2b       	or	r24, r25
    549e:	19 f4       	brne	.+6      	; 0x54a6 <util_match_message+0x2a>
    54a0:	88 81       	ld	r24, Y
    54a2:	99 81       	ldd	r25, Y+1	; 0x01
    54a4:	16 c0       	rjmp	.+44     	; 0x54d2 <util_match_message+0x56>
    54a6:	8a 81       	ldd	r24, Y+2	; 0x02
    54a8:	9b 81       	ldd	r25, Y+3	; 0x03
    54aa:	13 c0       	rjmp	.+38     	; 0x54d2 <util_match_message+0x56>

		case LM_BEGINS_WITH:
		return util_str_begins_with(msg, sd->matchString)?sd->success_state:sd->failure_state;
    54ac:	2d 81       	ldd	r18, Y+5	; 0x05
    54ae:	3e 81       	ldd	r19, Y+6	; 0x06
    54b0:	4f 81       	ldd	r20, Y+7	; 0x07
    54b2:	80 e8       	ldi	r24, 0x80	; 128
    54b4:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <util_str_begins_with>
    54b8:	88 23       	and	r24, r24
    54ba:	19 f0       	breq	.+6      	; 0x54c2 <util_match_message+0x46>
    54bc:	88 81       	ld	r24, Y
    54be:	99 81       	ldd	r25, Y+1	; 0x01
    54c0:	08 c0       	rjmp	.+16     	; 0x54d2 <util_match_message+0x56>
    54c2:	8a 81       	ldd	r24, Y+2	; 0x02
    54c4:	9b 81       	ldd	r25, Y+3	; 0x03
    54c6:	05 c0       	rjmp	.+10     	; 0x54d2 <util_match_message+0x56>

		case LM_NO_TEST:
		return sd->success_state;
    54c8:	88 81       	ld	r24, Y
    54ca:	99 81       	ldd	r25, Y+1	; 0x01
    54cc:	02 c0       	rjmp	.+4      	; 0x54d2 <util_match_message+0x56>
		default:
		return sd->failure_state;
    54ce:	8a 81       	ldd	r24, Y+2	; 0x02
    54d0:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    54d2:	df 91       	pop	r29
    54d4:	cf 91       	pop	r28
    54d6:	08 95       	ret

Disassembly of section .text.util_reset_module:

00005ea4 <util_reset_module>:
bool util_str_begins_with(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    5ea4:	0e 94 04 39 	call	0x7208	; 0x7208 <rn2483_reset_active>
    5ea8:	2f ef       	ldi	r18, 0xFF	; 255
    5eaa:	89 e6       	ldi	r24, 0x69	; 105
    5eac:	98 e1       	ldi	r25, 0x18	; 24
    5eae:	21 50       	subi	r18, 0x01	; 1
    5eb0:	80 40       	sbci	r24, 0x00	; 0
    5eb2:	90 40       	sbci	r25, 0x00	; 0
    5eb4:	e1 f7       	brne	.-8      	; 0x5eae <util_reset_module+0xa>
    5eb6:	00 c0       	rjmp	.+0      	; 0x5eb8 <util_reset_module+0x14>
    5eb8:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    5eba:	0e 94 08 39 	call	0x7210	; 0x7210 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    5ebe:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <uart0_hal_message_ready>
    5ec2:	88 23       	and	r24, r24
    5ec4:	e1 f3       	breq	.-8      	; 0x5ebe <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    5ec6:	80 e9       	ldi	r24, 0x90	; 144
    5ec8:	92 e0       	ldi	r25, 0x02	; 2
    5eca:	0e 94 75 34 	call	0x68ea	; 0x68ea <uart0_hal_read_message_as_str>
	
	if(util_str_begins_with(lm_msg, RN2483)){
    5ece:	60 e9       	ldi	r22, 0x90	; 144
    5ed0:	72 e0       	ldi	r23, 0x02	; 2
    5ed2:	80 e8       	ldi	r24, 0x80	; 128
    5ed4:	2f ec       	ldi	r18, 0xCF	; 207
    5ed6:	39 e0       	ldi	r19, 0x09	; 9
    5ed8:	40 e0       	ldi	r20, 0x00	; 0
    5eda:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <util_str_begins_with>
    5ede:	88 23       	and	r24, r24
    5ee0:	11 f0       	breq	.+4      	; 0x5ee6 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    5ee2:	80 e0       	ldi	r24, 0x00	; 0
    5ee4:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    5ee6:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    5ee8:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00004aae <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    4aae:	cf 93       	push	r28
    4ab0:	df 93       	push	r29
    4ab2:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    4ab4:	ab 01       	movw	r20, r22
    4ab6:	68 2f       	mov	r22, r24
    4ab8:	80 e9       	ldi	r24, 0x90	; 144
    4aba:	92 e0       	ldi	r25, 0x02	; 2
    4abc:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <strcpy>
	attach_ending(lm_msg);
    4ac0:	80 e9       	ldi	r24, 0x90	; 144
    4ac2:	92 e0       	ldi	r25, 0x02	; 2
    4ac4:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <attach_ending>
	uart0_hal_send_string(lm_msg);
    4ac8:	60 e9       	ldi	r22, 0x90	; 144
    4aca:	72 e0       	ldi	r23, 0x02	; 2
    4acc:	80 e8       	ldi	r24, 0x80	; 128
    4ace:	0e 94 60 24 	call	0x48c0	; 0x48c0 <uart0_hal_send_string>
	
	wd_cnt=0;
    4ad2:	10 92 eb 0e 	sts	0x0EEB, r1	; 0x800eeb <wd_cnt>
	wd_cb_pointer=TC2_HAL_subscribe(&cb_watchdog_counter);
    4ad6:	86 e9       	ldi	r24, 0x96	; 150
    4ad8:	98 e3       	ldi	r25, 0x38	; 56
    4ada:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <TC2_HAL_subscribe>
    4ade:	80 93 ea 0e 	sts	0x0EEA, r24	; 0x800eea <wd_cb_pointer>
	
	while(!uart0_hal_message_ready() && wd_cnt<15);
    4ae2:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <uart0_hal_message_ready>
    4ae6:	81 11       	cpse	r24, r1
    4ae8:	04 c0       	rjmp	.+8      	; 0x4af2 <util_lora_forward_msg+0x44>
    4aea:	80 91 eb 0e 	lds	r24, 0x0EEB	; 0x800eeb <wd_cnt>
    4aee:	8f 30       	cpi	r24, 0x0F	; 15
    4af0:	c0 f3       	brcs	.-16     	; 0x4ae2 <util_lora_forward_msg+0x34>
	TC2_HAL_cancel(wd_cb_pointer);
    4af2:	80 91 ea 0e 	lds	r24, 0x0EEA	; 0x800eea <wd_cb_pointer>
    4af6:	0e 94 db 30 	call	0x61b6	; 0x61b6 <TC2_HAL_cancel>
	if(wd_cnt>=15){
    4afa:	80 91 eb 0e 	lds	r24, 0x0EEB	; 0x800eeb <wd_cnt>
    4afe:	8f 30       	cpi	r24, 0x0F	; 15
    4b00:	60 f0       	brcs	.+24     	; 0x4b1a <util_lora_forward_msg+0x6c>
		strcpy(res, "no reply...");
    4b02:	2c e0       	ldi	r18, 0x0C	; 12
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	46 ed       	ldi	r20, 0xD6	; 214
    4b08:	59 e0       	ldi	r21, 0x09	; 9
    4b0a:	60 e0       	ldi	r22, 0x00	; 0
    4b0c:	ce 01       	movw	r24, r28
    4b0e:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		uart0_hal_read_message_as_str(res);
    4b12:	ce 01       	movw	r24, r28
    4b14:	0e 94 75 34 	call	0x68ea	; 0x68ea <uart0_hal_read_message_as_str>
    4b18:	03 c0       	rjmp	.+6      	; 0x4b20 <util_lora_forward_msg+0x72>
	}else{
		uart0_hal_read_message_as_str(res);
    4b1a:	ce 01       	movw	r24, r28
    4b1c:	0e 94 75 34 	call	0x68ea	; 0x68ea <uart0_hal_read_message_as_str>
	}
}
    4b20:	df 91       	pop	r29
    4b22:	cf 91       	pop	r28
    4b24:	08 95       	ret

Disassembly of section .text.util_send_break:

00007240 <util_send_break>:

void util_send_break(){
	uart0_hal_send_break(0x55);
    7240:	85 e5       	ldi	r24, 0x55	; 85
    7242:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <uart0_hal_send_break>
    7246:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00006d02 <MRPP_init_group>:
#include "mrpp.h"

static MRPP_STATE state;

uint8_t MRPP_init_group(COLLECTION collections[], uint8_t nCollections, uint8_t groupId){
    6d02:	cf 93       	push	r28
    6d04:	26 2f       	mov	r18, r22
    6d06:	c4 2f       	mov	r28, r20
    mrpp_state_init(&state, groupId, collections, nCollections);
    6d08:	ac 01       	movw	r20, r24
    6d0a:	6c 2f       	mov	r22, r28
    6d0c:	84 e2       	ldi	r24, 0x24	; 36
    6d0e:	9c e0       	ldi	r25, 0x0C	; 12
    6d10:	0e 94 4d 11 	call	0x229a	; 0x229a <mrpp_state_init>

    return groupId+1;
}
    6d14:	81 e0       	ldi	r24, 0x01	; 1
    6d16:	8c 0f       	add	r24, r28
    6d18:	cf 91       	pop	r28
    6d1a:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00004e60 <MRPP_add_collection_data_INT16>:


void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    4e60:	ef 92       	push	r14
    4e62:	ff 92       	push	r15
    4e64:	1f 93       	push	r17
    4e66:	cf 93       	push	r28
    4e68:	df 93       	push	r29
    4e6a:	cd b7       	in	r28, 0x3d	; 61
    4e6c:	de b7       	in	r29, 0x3e	; 62
    4e6e:	2a 97       	sbiw	r28, 0x0a	; 10
    4e70:	0f b6       	in	r0, 0x3f	; 63
    4e72:	f8 94       	cli
    4e74:	de bf       	out	0x3e, r29	; 62
    4e76:	0f be       	out	0x3f, r0	; 63
    4e78:	cd bf       	out	0x3d, r28	; 61
    4e7a:	18 2f       	mov	r17, r24
    4e7c:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    4e7e:	9e 01       	movw	r18, r28
    4e80:	2f 5f       	subi	r18, 0xFF	; 255
    4e82:	3f 4f       	sbci	r19, 0xFF	; 255
    4e84:	ab 01       	movw	r20, r22
    4e86:	68 2f       	mov	r22, r24
    4e88:	84 e2       	ldi	r24, 0x24	; 36
    4e8a:	9c e0       	ldi	r25, 0x0C	; 12
    4e8c:	0e 94 1d 24 	call	0x483a	; 0x483a <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    4e90:	9e 01       	movw	r18, r28
    4e92:	27 5f       	subi	r18, 0xF7	; 247
    4e94:	3f 4f       	sbci	r19, 0xFF	; 255
    4e96:	ae 01       	movw	r20, r28
    4e98:	49 5f       	subi	r20, 0xF9	; 249
    4e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e9c:	61 2f       	mov	r22, r17
    4e9e:	84 e2       	ldi	r24, 0x24	; 36
    4ea0:	9c e0       	ldi	r25, 0x0C	; 12
    4ea2:	0e 94 f7 31 	call	0x63ee	; 0x63ee <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    4ea6:	29 85       	ldd	r18, Y+9	; 0x09
    4ea8:	3a 85       	ldd	r19, Y+10	; 0x0a
    4eaa:	4f 81       	ldd	r20, Y+7	; 0x07
    4eac:	58 85       	ldd	r21, Y+8	; 0x08
    4eae:	b7 01       	movw	r22, r14
    4eb0:	ce 01       	movw	r24, r28
    4eb2:	01 96       	adiw	r24, 0x01	; 1
    4eb4:	0e 94 d6 23 	call	0x47ac	; 0x47ac <mrpp_data_add_int16>
}
    4eb8:	2a 96       	adiw	r28, 0x0a	; 10
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	f8 94       	cli
    4ebe:	de bf       	out	0x3e, r29	; 62
    4ec0:	0f be       	out	0x3f, r0	; 63
    4ec2:	cd bf       	out	0x3d, r28	; 61
    4ec4:	df 91       	pop	r29
    4ec6:	cf 91       	pop	r28
    4ec8:	1f 91       	pop	r17
    4eca:	ff 90       	pop	r15
    4ecc:	ef 90       	pop	r14
    4ece:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00006a62 <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    6a62:	cf 93       	push	r28
    6a64:	df 93       	push	r29
    6a66:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    6a68:	84 e2       	ldi	r24, 0x24	; 36
    6a6a:	9c e0       	ldi	r25, 0x0C	; 12
    6a6c:	0e 94 be 33 	call	0x677c	; 0x677c <mrpp_state_is_body_ready>
    6a70:	88 83       	st	Y, r24
    6a72:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    6a74:	89 2f       	mov	r24, r25
    6a76:	80 95       	com	r24
    
}
    6a78:	88 1f       	adc	r24, r24
    6a7a:	88 27       	eor	r24, r24
    6a7c:	88 1f       	adc	r24, r24
    6a7e:	df 91       	pop	r29
    6a80:	cf 91       	pop	r28
    6a82:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

000045ee <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    45ee:	af 92       	push	r10
    45f0:	bf 92       	push	r11
    45f2:	cf 92       	push	r12
    45f4:	df 92       	push	r13
    45f6:	ef 92       	push	r14
    45f8:	ff 92       	push	r15
    45fa:	0f 93       	push	r16
    45fc:	1f 93       	push	r17
    45fe:	cf 93       	push	r28
    4600:	df 93       	push	r29
    4602:	00 d0       	rcall	.+0      	; 0x4604 <MRPP_get_ready_body_package+0x16>
    4604:	00 d0       	rcall	.+0      	; 0x4606 <MRPP_get_ready_body_package+0x18>
    4606:	1f 92       	push	r1
    4608:	cd b7       	in	r28, 0x3d	; 61
    460a:	de b7       	in	r29, 0x3e	; 62
    460c:	6b 01       	movw	r12, r22
    460e:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    4610:	9e 01       	movw	r18, r28
    4612:	2b 5f       	subi	r18, 0xFB	; 251
    4614:	3f 4f       	sbci	r19, 0xFF	; 255
    4616:	79 01       	movw	r14, r18
    4618:	8e 01       	movw	r16, r28
    461a:	0d 5f       	subi	r16, 0xFD	; 253
    461c:	1f 4f       	sbci	r17, 0xFF	; 255
    461e:	23 50       	subi	r18, 0x03	; 3
    4620:	31 09       	sbc	r19, r1
    4622:	ae 01       	movw	r20, r28
    4624:	4f 5f       	subi	r20, 0xFF	; 255
    4626:	5f 4f       	sbci	r21, 0xFF	; 255
    4628:	bc 01       	movw	r22, r24
    462a:	84 e2       	ldi	r24, 0x24	; 36
    462c:	9c e0       	ldi	r25, 0x0C	; 12
    462e:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    4632:	88 23       	and	r24, r24
    4634:	b1 f0       	breq	.+44     	; 0x4662 <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    4636:	4d 81       	ldd	r20, Y+5	; 0x05
    4638:	83 e0       	ldi	r24, 0x03	; 3
    463a:	84 0f       	add	r24, r20
    463c:	f5 01       	movw	r30, r10
    463e:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    4640:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <state>
    4644:	f6 01       	movw	r30, r12
    4646:	80 83       	st	Z, r24
    package[1]=subId;
    4648:	89 81       	ldd	r24, Y+1	; 0x01
    464a:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    464c:	8a 81       	ldd	r24, Y+2	; 0x02
    464e:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    4650:	50 e0       	ldi	r21, 0x00	; 0
    4652:	6b 81       	ldd	r22, Y+3	; 0x03
    4654:	7c 81       	ldd	r23, Y+4	; 0x04
    4656:	c6 01       	movw	r24, r12
    4658:	03 96       	adiw	r24, 0x03	; 3
    465a:	0e 94 a6 33 	call	0x674c	; 0x674c <mrpp_data_get>

    return true;
    465e:	81 e0       	ldi	r24, 0x01	; 1
    4660:	01 c0       	rjmp	.+2      	; 0x4664 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    4662:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    4664:	0f 90       	pop	r0
    4666:	0f 90       	pop	r0
    4668:	0f 90       	pop	r0
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	df 91       	pop	r29
    4670:	cf 91       	pop	r28
    4672:	1f 91       	pop	r17
    4674:	0f 91       	pop	r16
    4676:	ff 90       	pop	r15
    4678:	ef 90       	pop	r14
    467a:	df 90       	pop	r13
    467c:	cf 90       	pop	r12
    467e:	bf 90       	pop	r11
    4680:	af 90       	pop	r10
    4682:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

00007150 <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    7150:	bc 01       	movw	r22, r24
    7152:	84 e2       	ldi	r24, 0x24	; 36
    7154:	9c e0       	ldi	r25, 0x0C	; 12
    7156:	0e 94 a5 35 	call	0x6b4a	; 0x6b4a <mrpp_state_set_body_sent>
    715a:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00006a84 <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    6a84:	cf 93       	push	r28
    6a86:	df 93       	push	r29
    6a88:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    6a8a:	20 91 24 0c 	lds	r18, 0x0C24	; 0x800c24 <state>
    6a8e:	fc 01       	movw	r30, r24
    6a90:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    6a92:	bf 01       	movw	r22, r30
    6a94:	84 e2       	ldi	r24, 0x24	; 36
    6a96:	9c e0       	ldi	r25, 0x0C	; 12
    6a98:	0e 94 ba 21 	call	0x4374	; 0x4374 <mrpp_state_get_header>
    *package_length+=1;
    6a9c:	8f 5f       	subi	r24, 0xFF	; 255
    6a9e:	88 83       	st	Y, r24
}
    6aa0:	df 91       	pop	r29
    6aa2:	cf 91       	pop	r28
    6aa4:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00006aa6 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    6aa6:	cf 93       	push	r28
    6aa8:	df 93       	push	r29
    6aaa:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    6aac:	20 91 24 0c 	lds	r18, 0x0C24	; 0x800c24 <state>
    6ab0:	fc 01       	movw	r30, r24
    6ab2:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    6ab4:	bf 01       	movw	r22, r30
    6ab6:	84 e2       	ldi	r24, 0x24	; 36
    6ab8:	9c e0       	ldi	r25, 0x0C	; 12
    6aba:	0e 94 ba 20 	call	0x4174	; 0x4174 <mrpp_state_get_tail>
    *package_length+=1;
    6abe:	8f 5f       	subi	r24, 0xFF	; 255
    6ac0:	88 83       	st	Y, r24
}
    6ac2:	df 91       	pop	r29
    6ac4:	cf 91       	pop	r28
    6ac6:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

000071c6 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    71c6:	84 e2       	ldi	r24, 0x24	; 36
    71c8:	9c e0       	ldi	r25, 0x0C	; 12
    71ca:	0e 94 60 34 	call	0x68c0	; 0x68c0 <mrpp_state_all_bodies_sent>
}
    71ce:	08 95       	ret

Disassembly of section .text.MRPP_validate_collections_space:

000052fe <MRPP_validate_collections_space>:

bool MRPP_validate_collections_space(COLLECTION collections[], uint8_t nCollections){
    52fe:	cf 93       	push	r28
    5300:	df 93       	push	r29
    5302:	ec 01       	movw	r28, r24
    //Check number of collections
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    5304:	86 2f       	mov	r24, r22
    5306:	88 0f       	add	r24, r24
    5308:	88 0f       	add	r24, r24
    530a:	85 5f       	subi	r24, 0xF5	; 245
    if(headerSize>MAX_PAYLOAD_SIZE) return false;
    530c:	85 36       	cpi	r24, 0x65	; 101
    530e:	18 f5       	brcc	.+70     	; 0x5356 <MRPP_validate_collections_space+0x58>
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	20 e0       	ldi	r18, 0x00	; 0
    5314:	30 e0       	ldi	r19, 0x00	; 0
    5316:	18 c0       	rjmp	.+48     	; 0x5348 <MRPP_validate_collections_space+0x4a>

    //Check buffer size
    uint16_t size=0;
    for (uint8_t i = 0; i < nCollections; i++)
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    5318:	e9 2f       	mov	r30, r25
    531a:	f0 e0       	ldi	r31, 0x00	; 0
    531c:	af 01       	movw	r20, r30
    531e:	44 0f       	add	r20, r20
    5320:	55 1f       	adc	r21, r21
    5322:	44 0f       	add	r20, r20
    5324:	55 1f       	adc	r21, r21
    5326:	e4 0f       	add	r30, r20
    5328:	f5 1f       	adc	r31, r21
    532a:	ec 0f       	add	r30, r28
    532c:	fd 1f       	adc	r31, r29
    532e:	a0 81       	ld	r26, Z
    5330:	b1 81       	ldd	r27, Z+1	; 0x01
    5332:	74 81       	ldd	r23, Z+4	; 0x04
    5334:	7a 9f       	mul	r23, r26
    5336:	a0 01       	movw	r20, r0
    5338:	7b 9f       	mul	r23, r27
    533a:	50 0d       	add	r21, r0
    533c:	11 24       	eor	r1, r1
    533e:	24 0f       	add	r18, r20
    5340:	35 1f       	adc	r19, r21
    5342:	2a 5f       	subi	r18, 0xFA	; 250
    5344:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    if(headerSize>MAX_PAYLOAD_SIZE) return false;

    //Check buffer size
    uint16_t size=0;
    for (uint8_t i = 0; i < nCollections; i++)
    5346:	9f 5f       	subi	r25, 0xFF	; 255
    5348:	96 17       	cp	r25, r22
    534a:	30 f3       	brcs	.-52     	; 0x5318 <MRPP_validate_collections_space+0x1a>
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    }
    
    if(size<=BODY_BUFFER_DATA_SIZE) return true;
    534c:	21 32       	cpi	r18, 0x21	; 33
    534e:	33 40       	sbci	r19, 0x03	; 3
    5350:	20 f4       	brcc	.+8      	; 0x535a <MRPP_validate_collections_space+0x5c>
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	03 c0       	rjmp	.+6      	; 0x535c <MRPP_validate_collections_space+0x5e>
}

bool MRPP_validate_collections_space(COLLECTION collections[], uint8_t nCollections){
    //Check number of collections
    uint8_t headerSize=HEADER_TAIL_META_SIZE+nCollections*DR_HEADER_COLLECTION_META_SIZE;
    if(headerSize>MAX_PAYLOAD_SIZE) return false;
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	01 c0       	rjmp	.+2      	; 0x535c <MRPP_validate_collections_space+0x5e>
    {
        size+=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    }
    
    if(size<=BODY_BUFFER_DATA_SIZE) return true;
    return false;
    535a:	80 e0       	ldi	r24, 0x00	; 0
}
    535c:	df 91       	pop	r29
    535e:	cf 91       	pop	r28
    5360:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

000047ac <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    47ac:	cf 92       	push	r12
    47ae:	df 92       	push	r13
    47b0:	ff 92       	push	r15
    47b2:	0f 93       	push	r16
    47b4:	1f 93       	push	r17
    47b6:	cf 93       	push	r28
    47b8:	df 93       	push	r29
    47ba:	89 01       	movw	r16, r18
    
    //add meta
    for (uint16_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    47bc:	fa 01       	movw	r30, r20
    47be:	0b c0       	rjmp	.+22     	; 0x47d6 <mrpp_data_add_int16+0x2a>
    {
        storage[i]=metadata[i-begin];
    47c0:	df 01       	movw	r26, r30
    47c2:	a4 1b       	sub	r26, r20
    47c4:	b5 0b       	sbc	r27, r21
    47c6:	a8 0f       	add	r26, r24
    47c8:	b9 1f       	adc	r27, r25
    47ca:	3c 91       	ld	r19, X
    47cc:	df 01       	movw	r26, r30
    47ce:	a6 57       	subi	r26, 0x76	; 118
    47d0:	bc 4f       	sbci	r27, 0xFC	; 252
    47d2:	3c 93       	st	X, r19
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint16_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    47d4:	31 96       	adiw	r30, 0x01	; 1
    47d6:	6a 01       	movw	r12, r20
    47d8:	26 e0       	ldi	r18, 0x06	; 6
    47da:	c2 0e       	add	r12, r18
    47dc:	d1 1c       	adc	r13, r1
    47de:	ec 15       	cp	r30, r12
    47e0:	fd 05       	cpc	r31, r13
    47e2:	70 f3       	brcs	.-36     	; 0x47c0 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    47e4:	98 01       	movw	r18, r16
    47e6:	26 50       	subi	r18, 0x06	; 6
    47e8:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    47ea:	36 95       	lsr	r19
    47ec:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    47ee:	49 5f       	subi	r20, 0xF9	; 249
    47f0:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    47f2:	a0 e0       	ldi	r26, 0x00	; 0
    47f4:	b0 e0       	ldi	r27, 0x00	; 0
    47f6:	16 c0       	rjmp	.+44     	; 0x4824 <mrpp_data_add_int16+0x78>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    47f8:	cd 01       	movw	r24, r26
    47fa:	88 0f       	add	r24, r24
    47fc:	99 1f       	adc	r25, r25
    47fe:	f6 01       	movw	r30, r12
    4800:	e8 0f       	add	r30, r24
    4802:	f9 1f       	adc	r31, r25
    4804:	8b 01       	movw	r16, r22
    4806:	08 0f       	add	r16, r24
    4808:	19 1f       	adc	r17, r25
    480a:	e8 01       	movw	r28, r16
    480c:	f9 80       	ldd	r15, Y+1	; 0x01
    480e:	e6 57       	subi	r30, 0x76	; 118
    4810:	fc 4f       	sbci	r31, 0xFC	; 252
    4812:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    4814:	84 0f       	add	r24, r20
    4816:	95 1f       	adc	r25, r21
    4818:	18 81       	ld	r17, Y
    481a:	fc 01       	movw	r30, r24
    481c:	e6 57       	subi	r30, 0x76	; 118
    481e:	fc 4f       	sbci	r31, 0xFC	; 252
    4820:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    4822:	11 96       	adiw	r26, 0x01	; 1
    4824:	a2 17       	cp	r26, r18
    4826:	b3 07       	cpc	r27, r19
    4828:	38 f3       	brcs	.-50     	; 0x47f8 <mrpp_data_add_int16+0x4c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    482a:	df 91       	pop	r29
    482c:	cf 91       	pop	r28
    482e:	1f 91       	pop	r17
    4830:	0f 91       	pop	r16
    4832:	ff 90       	pop	r15
    4834:	df 90       	pop	r13
    4836:	cf 90       	pop	r12
    4838:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

0000674c <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    674c:	cf 93       	push	r28
    674e:	df 93       	push	r29
    6750:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    6752:	20 e0       	ldi	r18, 0x00	; 0
    6754:	30 e0       	ldi	r19, 0x00	; 0
    6756:	0c c0       	rjmp	.+24     	; 0x6770 <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    6758:	de 01       	movw	r26, r28
    675a:	a2 0f       	add	r26, r18
    675c:	b3 1f       	adc	r27, r19
    675e:	f9 01       	movw	r30, r18
    6760:	e6 0f       	add	r30, r22
    6762:	f7 1f       	adc	r31, r23
    6764:	e6 57       	subi	r30, 0x76	; 118
    6766:	fc 4f       	sbci	r31, 0xFC	; 252
    6768:	90 81       	ld	r25, Z
    676a:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    676c:	2f 5f       	subi	r18, 0xFF	; 255
    676e:	3f 4f       	sbci	r19, 0xFF	; 255
    6770:	24 17       	cp	r18, r20
    6772:	35 07       	cpc	r19, r21
    6774:	88 f3       	brcs	.-30     	; 0x6758 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    6776:	df 91       	pop	r29
    6778:	cf 91       	pop	r28
    677a:	08 95       	ret

Disassembly of section .text.add_data_types:

000042ca <add_data_types>:
        package[i*4+13]=state->collections[i].length;
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    42ca:	cf 93       	push	r28
    42cc:	dc 01       	movw	r26, r24
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	4d c0       	rjmp	.+154    	; 0x436c <add_data_types+0xa2>
    {
        uint8_t bitArray=0x00;
        for (uint8_t index = 0; index < 4; index++)
        {
            //If there is no more collection just skip and use default 0x00
            uint8_t nCol=bIndex*4+index;
    42d2:	28 2f       	mov	r18, r24
    42d4:	22 0f       	add	r18, r18
    42d6:	22 0f       	add	r18, r18
    42d8:	29 0f       	add	r18, r25
            if(nCol+1>state->nCollections) break;
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	f9 01       	movw	r30, r18
    42de:	31 96       	adiw	r30, 0x01	; 1
    42e0:	12 96       	adiw	r26, 0x02	; 2
    42e2:	4c 91       	ld	r20, X
    42e4:	12 97       	sbiw	r26, 0x02	; 2
    42e6:	50 e0       	ldi	r21, 0x00	; 0
    42e8:	4e 17       	cp	r20, r30
    42ea:	5f 07       	cpc	r21, r31
    42ec:	bc f1       	brlt	.+110    	; 0x435c <add_data_types+0x92>

            uint8_t shifts=index*2;
    42ee:	49 2f       	mov	r20, r25
    42f0:	44 0f       	add	r20, r20
            switch (state->collections[nCol].type)
    42f2:	f9 01       	movw	r30, r18
    42f4:	ee 0f       	add	r30, r30
    42f6:	ff 1f       	adc	r31, r31
    42f8:	22 0f       	add	r18, r18
    42fa:	33 1f       	adc	r19, r19
    42fc:	22 0f       	add	r18, r18
    42fe:	33 1f       	adc	r19, r19
    4300:	22 0f       	add	r18, r18
    4302:	33 1f       	adc	r19, r19
    4304:	e2 0f       	add	r30, r18
    4306:	f3 1f       	adc	r31, r19
    4308:	ea 0f       	add	r30, r26
    430a:	fb 1f       	adc	r31, r27
    430c:	27 81       	ldd	r18, Z+7	; 0x07
    430e:	22 30       	cpi	r18, 0x02	; 2
    4310:	69 f0       	breq	.+26     	; 0x432c <add_data_types+0x62>
    4312:	24 30       	cpi	r18, 0x04	; 4
    4314:	a1 f0       	breq	.+40     	; 0x433e <add_data_types+0x74>
    4316:	21 30       	cpi	r18, 0x01	; 1
    4318:	d1 f4       	brne	.+52     	; 0x434e <add_data_types+0x84>
            {
                case T_INT8:
                    bitArray |=1 << shifts;
    431a:	21 e0       	ldi	r18, 0x01	; 1
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	02 c0       	rjmp	.+4      	; 0x4324 <add_data_types+0x5a>
    4320:	22 0f       	add	r18, r18
    4322:	33 1f       	adc	r19, r19
    4324:	4a 95       	dec	r20
    4326:	e2 f7       	brpl	.-8      	; 0x4320 <add_data_types+0x56>
    4328:	c2 2b       	or	r28, r18
                    break;
    432a:	11 c0       	rjmp	.+34     	; 0x434e <add_data_types+0x84>
                
                case T_INT16:
                    bitArray |= 2 << shifts;
    432c:	22 e0       	ldi	r18, 0x02	; 2
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	02 c0       	rjmp	.+4      	; 0x4336 <add_data_types+0x6c>
    4332:	22 0f       	add	r18, r18
    4334:	33 1f       	adc	r19, r19
    4336:	4a 95       	dec	r20
    4338:	e2 f7       	brpl	.-8      	; 0x4332 <add_data_types+0x68>
    433a:	c2 2b       	or	r28, r18
                    break;
    433c:	08 c0       	rjmp	.+16     	; 0x434e <add_data_types+0x84>

                case T_FLOAT:
                    bitArray |= 3 << shifts;
    433e:	23 e0       	ldi	r18, 0x03	; 3
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	02 c0       	rjmp	.+4      	; 0x4348 <add_data_types+0x7e>
    4344:	22 0f       	add	r18, r18
    4346:	33 1f       	adc	r19, r19
    4348:	4a 95       	dec	r20
    434a:	e2 f7       	brpl	.-8      	; 0x4344 <add_data_types+0x7a>
    434c:	c2 2b       	or	r28, r18

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    {
        uint8_t bitArray=0x00;
        for (uint8_t index = 0; index < 4; index++)
    434e:	9f 5f       	subi	r25, 0xFF	; 255
    4350:	02 c0       	rjmp	.+4      	; 0x4356 <add_data_types+0x8c>
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	c0 e0       	ldi	r28, 0x00	; 0
    4356:	94 30       	cpi	r25, 0x04	; 4
    4358:	08 f4       	brcc	.+2      	; 0x435c <add_data_types+0x92>
    435a:	bb cf       	rjmp	.-138    	; 0x42d2 <add_data_types+0x8>
                    break;
            }

        }
        //set from the end
        dt[5-bIndex]=bitArray;
    435c:	e5 e0       	ldi	r30, 0x05	; 5
    435e:	f0 e0       	ldi	r31, 0x00	; 0
    4360:	e8 1b       	sub	r30, r24
    4362:	f1 09       	sbc	r31, r1
    4364:	e6 0f       	add	r30, r22
    4366:	f7 1f       	adc	r31, r23
    4368:	c0 83       	st	Z, r28
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t dt[]){
    for (uint8_t bIndex = 0; bIndex < 6; bIndex++)
    436a:	8f 5f       	subi	r24, 0xFF	; 255
    436c:	86 30       	cpi	r24, 0x06	; 6
    436e:	88 f3       	brcs	.-30     	; 0x4352 <add_data_types+0x88>
        //set from the end
        dt[5-bIndex]=bitArray;
        
    }
    
} 
    4370:	cf 91       	pop	r28
    4372:	08 95       	ret

Disassembly of section .text.update_bodies:

00002848 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    2848:	cf 93       	push	r28
    284a:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    284c:	26 2f       	mov	r18, r22
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	c9 01       	movw	r24, r18
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f9 01       	movw	r30, r18
    2856:	ee 0f       	add	r30, r30
    2858:	ff 1f       	adc	r31, r31
    285a:	22 0f       	add	r18, r18
    285c:	33 1f       	adc	r19, r19
    285e:	22 0f       	add	r18, r18
    2860:	33 1f       	adc	r19, r19
    2862:	22 0f       	add	r18, r18
    2864:	33 1f       	adc	r19, r19
    2866:	e2 0f       	add	r30, r18
    2868:	f3 1f       	adc	r31, r19
    286a:	ea 0f       	add	r30, r26
    286c:	fb 1f       	adc	r31, r27
    286e:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    2870:	c0 e0       	ldi	r28, 0x00	; 0
    2872:	25 c0       	rjmp	.+74     	; 0x28be <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    2874:	82 17       	cp	r24, r18
    2876:	93 07       	cpc	r25, r19
    2878:	09 f1       	breq	.+66     	; 0x28bc <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    287a:	a9 01       	movw	r20, r18
    287c:	44 0f       	add	r20, r20
    287e:	55 1f       	adc	r21, r21
    2880:	44 0f       	add	r20, r20
    2882:	55 1f       	adc	r21, r21
    2884:	44 0f       	add	r20, r20
    2886:	55 1f       	adc	r21, r21
    2888:	f9 01       	movw	r30, r18
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	e4 0f       	add	r30, r20
    2890:	f5 1f       	adc	r31, r21
    2892:	ea 0f       	add	r30, r26
    2894:	fb 1f       	adc	r31, r27
    2896:	43 85       	ldd	r20, Z+11	; 0x0b
    2898:	74 13       	cpse	r23, r20
    289a:	10 c0       	rjmp	.+32     	; 0x28bc <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    289c:	f9 01       	movw	r30, r18
    289e:	ee 0f       	add	r30, r30
    28a0:	ff 1f       	adc	r31, r31
    28a2:	22 0f       	add	r18, r18
    28a4:	33 1f       	adc	r19, r19
    28a6:	22 0f       	add	r18, r18
    28a8:	33 1f       	adc	r19, r19
    28aa:	22 0f       	add	r18, r18
    28ac:	33 1f       	adc	r19, r19
    28ae:	e2 0f       	add	r30, r18
    28b0:	f3 1f       	adc	r31, r19
    28b2:	ea 0f       	add	r30, r26
    28b4:	fb 1f       	adc	r31, r27
    28b6:	24 85       	ldd	r18, Z+12	; 0x0c
    28b8:	23 30       	cpi	r18, 0x03	; 3
    28ba:	41 f4       	brne	.+16     	; 0x28cc <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    28bc:	cf 5f       	subi	r28, 0xFF	; 255
    28be:	2c 2f       	mov	r18, r28
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	28 17       	cp	r18, r24
    28c4:	39 07       	cpc	r19, r25
    28c6:	b4 f2       	brlt	.-84     	; 0x2874 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    28c8:	21 e0       	ldi	r18, 0x01	; 1
    28ca:	01 c0       	rjmp	.+2      	; 0x28ce <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    28cc:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    28ce:	22 23       	and	r18, r18
    28d0:	39 f0       	breq	.+14     	; 0x28e0 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    28d2:	fd 01       	movw	r30, r26
    28d4:	e7 0f       	add	r30, r23
    28d6:	f1 1d       	adc	r31, r1
    28d8:	ec 55       	subi	r30, 0x5C	; 92
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	21 e0       	ldi	r18, 0x01	; 1
    28de:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    28e0:	9c 01       	movw	r18, r24
    28e2:	22 0f       	add	r18, r18
    28e4:	33 1f       	adc	r19, r19
    28e6:	22 0f       	add	r18, r18
    28e8:	33 1f       	adc	r19, r19
    28ea:	22 0f       	add	r18, r18
    28ec:	33 1f       	adc	r19, r19
    28ee:	fc 01       	movw	r30, r24
    28f0:	ee 0f       	add	r30, r30
    28f2:	ff 1f       	adc	r31, r31
    28f4:	e2 0f       	add	r30, r18
    28f6:	f3 1f       	adc	r31, r19
    28f8:	ea 0f       	add	r30, r26
    28fa:	fb 1f       	adc	r31, r27
    28fc:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    28fe:	29 c0       	rjmp	.+82     	; 0x2952 <update_bodies+0x10a>
    {
        if(i==collectionId-1) continue;
    2900:	46 2f       	mov	r20, r22
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	84 17       	cp	r24, r20
    2906:	95 07       	cpc	r25, r21
    2908:	19 f1       	breq	.+70     	; 0x2950 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    290a:	9a 01       	movw	r18, r20
    290c:	2f 5f       	subi	r18, 0xFF	; 255
    290e:	3f 4f       	sbci	r19, 0xFF	; 255
    2910:	f9 01       	movw	r30, r18
    2912:	ee 0f       	add	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	22 0f       	add	r18, r18
    2918:	33 1f       	adc	r19, r19
    291a:	22 0f       	add	r18, r18
    291c:	33 1f       	adc	r19, r19
    291e:	22 0f       	add	r18, r18
    2920:	33 1f       	adc	r19, r19
    2922:	e2 0f       	add	r30, r18
    2924:	f3 1f       	adc	r31, r19
    2926:	ea 0f       	add	r30, r26
    2928:	fb 1f       	adc	r31, r27
    292a:	20 81       	ld	r18, Z
    292c:	c2 13       	cpse	r28, r18
    292e:	10 c0       	rjmp	.+32     	; 0x2950 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    2930:	fa 01       	movw	r30, r20
    2932:	ee 0f       	add	r30, r30
    2934:	ff 1f       	adc	r31, r31
    2936:	44 0f       	add	r20, r20
    2938:	55 1f       	adc	r21, r21
    293a:	44 0f       	add	r20, r20
    293c:	55 1f       	adc	r21, r21
    293e:	44 0f       	add	r20, r20
    2940:	55 1f       	adc	r21, r21
    2942:	e4 0f       	add	r30, r20
    2944:	f5 1f       	adc	r31, r21
    2946:	ea 0f       	add	r30, r26
    2948:	fb 1f       	adc	r31, r27
    294a:	24 85       	ldd	r18, Z+12	; 0x0c
    294c:	23 30       	cpi	r18, 0x03	; 3
    294e:	41 f4       	brne	.+16     	; 0x2960 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    2950:	6f 5f       	subi	r22, 0xFF	; 255
    2952:	12 96       	adiw	r26, 0x02	; 2
    2954:	2c 91       	ld	r18, X
    2956:	12 97       	sbiw	r26, 0x02	; 2
    2958:	62 17       	cp	r22, r18
    295a:	90 f2       	brcs	.-92     	; 0x2900 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	01 c0       	rjmp	.+2      	; 0x2962 <update_bodies+0x11a>
    {
        if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    2960:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    2962:	88 23       	and	r24, r24
    2964:	41 f0       	breq	.+16     	; 0x2976 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    2966:	fd 01       	movw	r30, r26
    2968:	ec 0f       	add	r30, r28
    296a:	f1 1d       	adc	r31, r1
    296c:	ec 55       	subi	r30, 0x5C	; 92
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	80 83       	st	Z, r24
    2974:	06 c0       	rjmp	.+12     	; 0x2982 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    2976:	fd 01       	movw	r30, r26
    2978:	ec 0f       	add	r30, r28
    297a:	f1 1d       	adc	r31, r1
    297c:	ec 55       	subi	r30, 0x5C	; 92
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    2982:	8c 2f       	mov	r24, r28
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	87 1b       	sub	r24, r23
    2988:	91 09       	sbc	r25, r1
    298a:	02 97       	sbiw	r24, 0x02	; 2
    298c:	64 f0       	brlt	.+24     	; 0x29a6 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    298e:	7f 5f       	subi	r23, 0xFF	; 255
    2990:	08 c0       	rjmp	.+16     	; 0x29a2 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    2992:	fd 01       	movw	r30, r26
    2994:	e7 0f       	add	r30, r23
    2996:	f1 1d       	adc	r31, r1
    2998:	ec 55       	subi	r30, 0x5C	; 92
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    29a0:	7f 5f       	subi	r23, 0xFF	; 255
    29a2:	7c 17       	cp	r23, r28
    29a4:	b0 f3       	brcs	.-20     	; 0x2992 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    29a6:	cf 91       	pop	r28
    29a8:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

0000229a <mrpp_state_init>:


static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    229a:	af 92       	push	r10
    229c:	bf 92       	push	r11
    229e:	cf 92       	push	r12
    22a0:	df 92       	push	r13
    22a2:	ef 92       	push	r14
    22a4:	ff 92       	push	r15
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	6c 01       	movw	r12, r24
    22b0:	a2 2e       	mov	r10, r18
    state->groupId=groupId;
    22b2:	fc 01       	movw	r30, r24
    22b4:	60 83       	st	Z, r22
    state->nCollections=nCollections;
    22b6:	22 83       	std	Z+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    22b8:	b1 2c       	mov	r11, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    22ba:	00 e0       	ldi	r16, 0x00	; 0
    22bc:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    22be:	70 c0       	rjmp	.+224    	; 0x23a0 <mrpp_state_init+0x106>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    22c0:	eb 2d       	mov	r30, r11
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	df 01       	movw	r26, r30
    22c6:	aa 0f       	add	r26, r26
    22c8:	bb 1f       	adc	r27, r27
    22ca:	aa 0f       	add	r26, r26
    22cc:	bb 1f       	adc	r27, r27
    22ce:	ae 0f       	add	r26, r30
    22d0:	bf 1f       	adc	r27, r31
    22d2:	a4 0f       	add	r26, r20
    22d4:	b5 1f       	adc	r27, r21
    22d6:	12 96       	adiw	r26, 0x02	; 2
    22d8:	2d 91       	ld	r18, X+
    22da:	3c 91       	ld	r19, X
    22dc:	13 97       	sbiw	r26, 0x03	; 3
    22de:	ef 01       	movw	r28, r30
    22e0:	cc 0f       	add	r28, r28
    22e2:	dd 1f       	adc	r29, r29
    22e4:	cf 01       	movw	r24, r30
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	c8 0f       	add	r28, r24
    22f4:	d9 1f       	adc	r29, r25
    22f6:	cc 0d       	add	r28, r12
    22f8:	dd 1d       	adc	r29, r13
    22fa:	39 87       	std	Y+9, r19	; 0x09
    22fc:	28 87       	std	Y+8, r18	; 0x08

        //type
        state->collections[i].type=collections[i].type;
    22fe:	14 96       	adiw	r26, 0x04	; 4
    2300:	8c 91       	ld	r24, X
    2302:	14 97       	sbiw	r26, 0x04	; 4
    2304:	8f 83       	std	Y+7, r24	; 0x07

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    2306:	1c 83       	std	Y+4, r17	; 0x04
    2308:	0b 83       	std	Y+3, r16	; 0x03
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    230a:	8d 91       	ld	r24, X+
    230c:	9c 91       	ld	r25, X
    230e:	11 97       	sbiw	r26, 0x01	; 1
    2310:	14 96       	adiw	r26, 0x04	; 4
    2312:	2c 91       	ld	r18, X
    2314:	28 9f       	mul	r18, r24
    2316:	70 01       	movw	r14, r0
    2318:	29 9f       	mul	r18, r25
    231a:	f0 0c       	add	r15, r0
    231c:	11 24       	eor	r1, r1
    231e:	86 e0       	ldi	r24, 0x06	; 6
    2320:	e8 0e       	add	r14, r24
    2322:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    2324:	fe 82       	std	Y+6, r15	; 0x06
    2326:	ed 82       	std	Y+5, r14	; 0x05
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    2328:	98 01       	movw	r18, r16
    232a:	a1 ed       	ldi	r26, 0xD1	; 209
    232c:	b1 e5       	ldi	r27, 0x51	; 81
    232e:	0e 94 10 36 	call	0x6c20	; 0x6c20 <__umulhisi3>
    2332:	28 1b       	sub	r18, r24
    2334:	39 0b       	sbc	r19, r25
    2336:	36 95       	lsr	r19
    2338:	27 95       	ror	r18
    233a:	82 0f       	add	r24, r18
    233c:	93 1f       	adc	r25, r19
    233e:	00 24       	eor	r0, r0
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	00 1c       	adc	r0, r0
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	00 1c       	adc	r0, r0
    234c:	89 2f       	mov	r24, r25
    234e:	90 2d       	mov	r25, r0
    2350:	31 96       	adiw	r30, 0x01	; 1
    2352:	9f 01       	movw	r18, r30
    2354:	22 0f       	add	r18, r18
    2356:	33 1f       	adc	r19, r19
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	e2 0f       	add	r30, r18
    2366:	f3 1f       	adc	r31, r19
    2368:	ec 0d       	add	r30, r12
    236a:	fd 1d       	adc	r31, r13
    236c:	80 83       	st	Z, r24
        uint8_t endsInBody=(startingIndex+len-1)/DR_BODY_PAYLOAD_SIZE;
    236e:	0e 0d       	add	r16, r14
    2370:	1f 1d       	adc	r17, r15
    2372:	f8 01       	movw	r30, r16
    2374:	31 97       	sbiw	r30, 0x01	; 1
    2376:	9f 01       	movw	r18, r30
    2378:	0e 94 10 36 	call	0x6c20	; 0x6c20 <__umulhisi3>
    237c:	e8 1b       	sub	r30, r24
    237e:	f9 0b       	sbc	r31, r25
    2380:	f6 95       	lsr	r31
    2382:	e7 95       	ror	r30
    2384:	8e 0f       	add	r24, r30
    2386:	9f 1f       	adc	r25, r31
    2388:	00 24       	eor	r0, r0
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	00 1c       	adc	r0, r0
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	00 1c       	adc	r0, r0
    2396:	89 2f       	mov	r24, r25
    2398:	90 2d       	mov	r25, r0

        //Simpler solution above
        state->collections[i].endsInBody=endsInBody;
    239a:	8b 87       	std	Y+11, r24	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    239c:	1c 86       	std	Y+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    239e:	b3 94       	inc	r11
    23a0:	ba 14       	cp	r11, r10
    23a2:	08 f4       	brcc	.+2      	; 0x23a6 <mrpp_state_init+0x10c>
    23a4:	8d cf       	rjmp	.-230    	; 0x22c0 <mrpp_state_init+0x26>
        startingIndex+=len;      
    }

    //Calculate lastSubId
    
    uint8_t lastSubId=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    23a6:	01 50       	subi	r16, 0x01	; 1
    23a8:	11 09       	sbc	r17, r1
    23aa:	98 01       	movw	r18, r16
    23ac:	a1 ed       	ldi	r26, 0xD1	; 209
    23ae:	b1 e5       	ldi	r27, 0x51	; 81
    23b0:	0e 94 10 36 	call	0x6c20	; 0x6c20 <__umulhisi3>
    23b4:	08 1b       	sub	r16, r24
    23b6:	19 0b       	sbc	r17, r25
    23b8:	16 95       	lsr	r17
    23ba:	07 95       	ror	r16
    23bc:	80 0f       	add	r24, r16
    23be:	91 1f       	adc	r25, r17
    23c0:	00 24       	eor	r0, r0
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	00 1c       	adc	r0, r0
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	00 1c       	adc	r0, r0
    23ce:	89 2f       	mov	r24, r25
    23d0:	90 2d       	mov	r25, r0
    23d2:	92 e0       	ldi	r25, 0x02	; 2
    23d4:	98 0f       	add	r25, r24
    state->lastSubId=lastSubId;
    23d6:	f6 01       	movw	r30, r12
    23d8:	91 83       	std	Z+1, r25	; 0x01
    
    //calculate bodies
    uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    23da:	8f 5f       	subi	r24, 0xFF	; 255
    state->nBodies=nBodies;
    23dc:	ed 55       	subi	r30, 0x5D	; 93
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 83       	st	Z, r24

    for (uint8_t i = 0; i < nBodies; i++)
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	07 c0       	rjmp	.+14     	; 0x23f4 <mrpp_state_init+0x15a>
    {
        state->bodies[i]=WAITING;
    23e6:	f6 01       	movw	r30, r12
    23e8:	e9 0f       	add	r30, r25
    23ea:	f1 1d       	adc	r31, r1
    23ec:	ec 55       	subi	r30, 0x5C	; 92
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	10 82       	st	Z, r1
    
    //calculate bodies
    uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    23f2:	9f 5f       	subi	r25, 0xFF	; 255
    23f4:	98 17       	cp	r25, r24
    23f6:	b8 f3       	brcs	.-18     	; 0x23e6 <mrpp_state_init+0x14c>
    {
        state->bodies[i]=WAITING;
    }
}
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	ff 90       	pop	r15
    2402:	ef 90       	pop	r14
    2404:	df 90       	pop	r13
    2406:	cf 90       	pop	r12
    2408:	bf 90       	pop	r11
    240a:	af 90       	pop	r10
    240c:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00004374 <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    4374:	0f 93       	push	r16
    4376:	1f 93       	push	r17
    4378:	cf 93       	push	r28
    437a:	df 93       	push	r29
    437c:	8c 01       	movw	r16, r24
    437e:	eb 01       	movw	r28, r22
    package[0]=0;
    4380:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    4382:	fc 01       	movw	r30, r24
    4384:	81 81       	ldd	r24, Z+1	; 0x01
    4386:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    4388:	1a 82       	std	Y+2, r1	; 0x02

    //N collections
    package[3]=state->nCollections;
    438a:	82 81       	ldd	r24, Z+2	; 0x02
    438c:	8b 83       	std	Y+3, r24	; 0x03

    //add data type
    add_data_types(state, &package[4]);
    438e:	6c 5f       	subi	r22, 0xFC	; 252
    4390:	7f 4f       	sbci	r23, 0xFF	; 255
    4392:	c8 01       	movw	r24, r16
    4394:	0e 94 65 21 	call	0x42ca	; 0x42ca <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    4398:	20 e0       	ldi	r18, 0x00	; 0
    439a:	35 c0       	rjmp	.+106    	; 0x4406 <mrpp_state_get_header+0x92>
    {
        package[i*4+10]=state->collections[i].startIndex >> 8;
    439c:	82 2f       	mov	r24, r18
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	dc 01       	movw	r26, r24
    43a2:	aa 0f       	add	r26, r26
    43a4:	bb 1f       	adc	r27, r27
    43a6:	aa 0f       	add	r26, r26
    43a8:	bb 1f       	adc	r27, r27
    43aa:	ad 01       	movw	r20, r26
    43ac:	46 5f       	subi	r20, 0xF6	; 246
    43ae:	5f 4f       	sbci	r21, 0xFF	; 255
    43b0:	4c 0f       	add	r20, r28
    43b2:	5d 1f       	adc	r21, r29
    43b4:	fc 01       	movw	r30, r24
    43b6:	ee 0f       	add	r30, r30
    43b8:	ff 1f       	adc	r31, r31
    43ba:	88 0f       	add	r24, r24
    43bc:	99 1f       	adc	r25, r25
    43be:	88 0f       	add	r24, r24
    43c0:	99 1f       	adc	r25, r25
    43c2:	88 0f       	add	r24, r24
    43c4:	99 1f       	adc	r25, r25
    43c6:	e8 0f       	add	r30, r24
    43c8:	f9 1f       	adc	r31, r25
    43ca:	bf 01       	movw	r22, r30
    43cc:	60 0f       	add	r22, r16
    43ce:	71 1f       	adc	r23, r17
    43d0:	fb 01       	movw	r30, r22
    43d2:	84 81       	ldd	r24, Z+4	; 0x04
    43d4:	fa 01       	movw	r30, r20
    43d6:	80 83       	st	Z, r24
        package[i*4+11]=state->collections[i].startIndex;
    43d8:	cd 01       	movw	r24, r26
    43da:	0b 96       	adiw	r24, 0x0b	; 11
    43dc:	8c 0f       	add	r24, r28
    43de:	9d 1f       	adc	r25, r29
    43e0:	fb 01       	movw	r30, r22
    43e2:	33 81       	ldd	r19, Z+3	; 0x03
    43e4:	fc 01       	movw	r30, r24
    43e6:	30 83       	st	Z, r19
        package[i*4+12]=state->collections[i].length>>8;
    43e8:	cd 01       	movw	r24, r26
    43ea:	0c 96       	adiw	r24, 0x0c	; 12
    43ec:	8c 0f       	add	r24, r28
    43ee:	9d 1f       	adc	r25, r29
    43f0:	fb 01       	movw	r30, r22
    43f2:	36 81       	ldd	r19, Z+6	; 0x06
    43f4:	fc 01       	movw	r30, r24
    43f6:	30 83       	st	Z, r19
        package[i*4+13]=state->collections[i].length;
    43f8:	1d 96       	adiw	r26, 0x0d	; 13
    43fa:	ac 0f       	add	r26, r28
    43fc:	bd 1f       	adc	r27, r29
    43fe:	fb 01       	movw	r30, r22
    4400:	85 81       	ldd	r24, Z+5	; 0x05
    4402:	8c 93       	st	X, r24
    package[3]=state->nCollections;

    //add data type
    add_data_types(state, &package[4]);

    for (uint8_t i = 0; i < state->nCollections; i++)
    4404:	2f 5f       	subi	r18, 0xFF	; 255
    4406:	f8 01       	movw	r30, r16
    4408:	82 81       	ldd	r24, Z+2	; 0x02
    440a:	28 17       	cp	r18, r24
    440c:	38 f2       	brcs	.-114    	; 0x439c <mrpp_state_get_header+0x28>
        package[i*4+11]=state->collections[i].startIndex;
        package[i*4+12]=state->collections[i].length>>8;
        package[i*4+13]=state->collections[i].length;
    }
    
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    440e:	88 0f       	add	r24, r24
    4410:	88 0f       	add	r24, r24
}
    4412:	86 5f       	subi	r24, 0xF6	; 246
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	1f 91       	pop	r17
    441a:	0f 91       	pop	r16
    441c:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00004174 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    4174:	0f 93       	push	r16
    4176:	1f 93       	push	r17
    4178:	cf 93       	push	r28
    417a:	df 93       	push	r29
    417c:	8c 01       	movw	r16, r24
    417e:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    4180:	fc 01       	movw	r30, r24
    4182:	81 81       	ldd	r24, Z+1	; 0x01
    4184:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    4186:	81 81       	ldd	r24, Z+1	; 0x01
    4188:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    418a:	1a 82       	std	Y+2, r1	; 0x02

    //N collections
    package[3]=state->nCollections;
    418c:	82 81       	ldd	r24, Z+2	; 0x02
    418e:	8b 83       	std	Y+3, r24	; 0x03

    //add data type
    add_data_types(state, &package[4]);
    4190:	6c 5f       	subi	r22, 0xFC	; 252
    4192:	7f 4f       	sbci	r23, 0xFF	; 255
    4194:	c8 01       	movw	r24, r16
    4196:	0e 94 65 21 	call	0x42ca	; 0x42ca <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	35 c0       	rjmp	.+106    	; 0x4208 <mrpp_state_get_tail+0x94>
    {
        package[i*4+10]=state->collections[i].startIndex >> 8;
    419e:	82 2f       	mov	r24, r18
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	dc 01       	movw	r26, r24
    41a4:	aa 0f       	add	r26, r26
    41a6:	bb 1f       	adc	r27, r27
    41a8:	aa 0f       	add	r26, r26
    41aa:	bb 1f       	adc	r27, r27
    41ac:	ad 01       	movw	r20, r26
    41ae:	46 5f       	subi	r20, 0xF6	; 246
    41b0:	5f 4f       	sbci	r21, 0xFF	; 255
    41b2:	4c 0f       	add	r20, r28
    41b4:	5d 1f       	adc	r21, r29
    41b6:	fc 01       	movw	r30, r24
    41b8:	ee 0f       	add	r30, r30
    41ba:	ff 1f       	adc	r31, r31
    41bc:	88 0f       	add	r24, r24
    41be:	99 1f       	adc	r25, r25
    41c0:	88 0f       	add	r24, r24
    41c2:	99 1f       	adc	r25, r25
    41c4:	88 0f       	add	r24, r24
    41c6:	99 1f       	adc	r25, r25
    41c8:	e8 0f       	add	r30, r24
    41ca:	f9 1f       	adc	r31, r25
    41cc:	bf 01       	movw	r22, r30
    41ce:	60 0f       	add	r22, r16
    41d0:	71 1f       	adc	r23, r17
    41d2:	fb 01       	movw	r30, r22
    41d4:	84 81       	ldd	r24, Z+4	; 0x04
    41d6:	fa 01       	movw	r30, r20
    41d8:	80 83       	st	Z, r24
        package[i*4+11]=state->collections[i].startIndex;
    41da:	cd 01       	movw	r24, r26
    41dc:	0b 96       	adiw	r24, 0x0b	; 11
    41de:	8c 0f       	add	r24, r28
    41e0:	9d 1f       	adc	r25, r29
    41e2:	fb 01       	movw	r30, r22
    41e4:	33 81       	ldd	r19, Z+3	; 0x03
    41e6:	fc 01       	movw	r30, r24
    41e8:	30 83       	st	Z, r19
        package[i*4+12]=state->collections[i].length>>8;
    41ea:	cd 01       	movw	r24, r26
    41ec:	0c 96       	adiw	r24, 0x0c	; 12
    41ee:	8c 0f       	add	r24, r28
    41f0:	9d 1f       	adc	r25, r29
    41f2:	fb 01       	movw	r30, r22
    41f4:	36 81       	ldd	r19, Z+6	; 0x06
    41f6:	fc 01       	movw	r30, r24
    41f8:	30 83       	st	Z, r19
        package[i*4+13]=state->collections[i].length;
    41fa:	1d 96       	adiw	r26, 0x0d	; 13
    41fc:	ac 0f       	add	r26, r28
    41fe:	bd 1f       	adc	r27, r29
    4200:	fb 01       	movw	r30, r22
    4202:	85 81       	ldd	r24, Z+5	; 0x05
    4204:	8c 93       	st	X, r24
    package[3]=state->nCollections;

    //add data type
    add_data_types(state, &package[4]);

    for (uint8_t i = 0; i < state->nCollections; i++)
    4206:	2f 5f       	subi	r18, 0xFF	; 255
    4208:	f8 01       	movw	r30, r16
    420a:	82 81       	ldd	r24, Z+2	; 0x02
    420c:	28 17       	cp	r18, r24
    420e:	38 f2       	brcs	.-114    	; 0x419e <mrpp_state_get_tail+0x2a>
        package[i*4+10]=state->collections[i].startIndex >> 8;
        package[i*4+11]=state->collections[i].startIndex;
        package[i*4+12]=state->collections[i].length>>8;
        package[i*4+13]=state->collections[i].length;
    }
    return 10+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    4210:	88 0f       	add	r24, r24
    4212:	88 0f       	add	r24, r24
}
    4214:	86 5f       	subi	r24, 0xF6	; 246
    4216:	df 91       	pop	r29
    4218:	cf 91       	pop	r28
    421a:	1f 91       	pop	r17
    421c:	0f 91       	pop	r16
    421e:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

0000483a <mrpp_state_set_collection>:
    }
    
} 


void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    483a:	0f 93       	push	r16
    483c:	1f 93       	push	r17
    483e:	cf 93       	push	r28
    4840:	df 93       	push	r29
    4842:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    4844:	a6 2f       	mov	r26, r22
    4846:	b0 e0       	ldi	r27, 0x00	; 0
    4848:	11 97       	sbiw	r26, 0x01	; 1
    484a:	fd 01       	movw	r30, r26
    484c:	ee 0f       	add	r30, r30
    484e:	ff 1f       	adc	r31, r31
    4850:	cd 01       	movw	r24, r26
    4852:	88 0f       	add	r24, r24
    4854:	99 1f       	adc	r25, r25
    4856:	88 0f       	add	r24, r24
    4858:	99 1f       	adc	r25, r25
    485a:	88 0f       	add	r24, r24
    485c:	99 1f       	adc	r25, r25
    485e:	e8 0f       	add	r30, r24
    4860:	f9 1f       	adc	r31, r25
    4862:	e0 0f       	add	r30, r16
    4864:	f1 1f       	adc	r31, r17
    4866:	83 e0       	ldi	r24, 0x03	; 3
    4868:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	0a c0       	rjmp	.+20     	; 0x4882 <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    486e:	e9 2f       	mov	r30, r25
    4870:	f0 e0       	ldi	r31, 0x00	; 0
    4872:	e9 01       	movw	r28, r18
    4874:	ce 0f       	add	r28, r30
    4876:	df 1f       	adc	r29, r31
    4878:	e4 0f       	add	r30, r20
    487a:	f5 1f       	adc	r31, r21
    487c:	80 81       	ld	r24, Z
    487e:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    4880:	9f 5f       	subi	r25, 0xFF	; 255
    4882:	94 30       	cpi	r25, 0x04	; 4
    4884:	a0 f3       	brcs	.-24     	; 0x486e <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    4886:	cd 01       	movw	r24, r26
    4888:	88 0f       	add	r24, r24
    488a:	99 1f       	adc	r25, r25
    488c:	aa 0f       	add	r26, r26
    488e:	bb 1f       	adc	r27, r27
    4890:	aa 0f       	add	r26, r26
    4892:	bb 1f       	adc	r27, r27
    4894:	aa 0f       	add	r26, r26
    4896:	bb 1f       	adc	r27, r27
    4898:	a8 0f       	add	r26, r24
    489a:	b9 1f       	adc	r27, r25
    489c:	a0 0f       	add	r26, r16
    489e:	b1 1f       	adc	r27, r17
    48a0:	19 96       	adiw	r26, 0x09	; 9
    48a2:	8c 91       	ld	r24, X
    48a4:	19 97       	sbiw	r26, 0x09	; 9
    48a6:	f9 01       	movw	r30, r18
    48a8:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    48aa:	18 96       	adiw	r26, 0x08	; 8
    48ac:	8c 91       	ld	r24, X
    48ae:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    48b0:	c8 01       	movw	r24, r16
    48b2:	0e 94 24 14 	call	0x2848	; 0x2848 <update_bodies>
}
    48b6:	df 91       	pop	r29
    48b8:	cf 91       	pop	r28
    48ba:	1f 91       	pop	r17
    48bc:	0f 91       	pop	r16
    48be:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

0000677c <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    677c:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	0b c0       	rjmp	.+22     	; 0x6798 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    6782:	29 2f       	mov	r18, r25
    6784:	30 e0       	ldi	r19, 0x00	; 0
    6786:	fa 01       	movw	r30, r20
    6788:	e2 0f       	add	r30, r18
    678a:	f3 1f       	adc	r31, r19
    678c:	ec 55       	subi	r30, 0x5C	; 92
    678e:	ff 4f       	sbci	r31, 0xFF	; 255
    6790:	80 81       	ld	r24, Z
    6792:	81 30       	cpi	r24, 0x01	; 1
    6794:	49 f0       	breq	.+18     	; 0x67a8 <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    6796:	9f 5f       	subi	r25, 0xFF	; 255
    6798:	fa 01       	movw	r30, r20
    679a:	ed 55       	subi	r30, 0x5D	; 93
    679c:	ff 4f       	sbci	r31, 0xFF	; 255
    679e:	80 81       	ld	r24, Z
    67a0:	98 17       	cp	r25, r24
    67a2:	78 f3       	brcs	.-34     	; 0x6782 <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    67a4:	2f ef       	ldi	r18, 0xFF	; 255
    67a6:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    67a8:	c9 01       	movw	r24, r18
    67aa:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

000068c0 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    68c0:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    68c4:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    68c6:	0a c0       	rjmp	.+20     	; 0x68dc <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    68c8:	f9 01       	movw	r30, r18
    68ca:	e9 0f       	add	r30, r25
    68cc:	f1 1d       	adc	r31, r1
    68ce:	ec 55       	subi	r30, 0x5C	; 92
    68d0:	ff 4f       	sbci	r31, 0xFF	; 255
    68d2:	40 81       	ld	r20, Z
    68d4:	42 30       	cpi	r20, 0x02	; 2
    68d6:	09 f0       	breq	.+2      	; 0x68da <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    68d8:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    68da:	9f 5f       	subi	r25, 0xFF	; 255
    68dc:	f9 01       	movw	r30, r18
    68de:	ed 55       	subi	r30, 0x5D	; 93
    68e0:	ff 4f       	sbci	r31, 0xFF	; 255
    68e2:	40 81       	ld	r20, Z
    68e4:	94 17       	cp	r25, r20
    68e6:	80 f3       	brcs	.-32     	; 0x68c8 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    68e8:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

000038b2 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    38b2:	8f 92       	push	r8
    38b4:	9f 92       	push	r9
    38b6:	af 92       	push	r10
    38b8:	bf 92       	push	r11
    38ba:	cf 92       	push	r12
    38bc:	df 92       	push	r13
    38be:	ef 92       	push	r14
    38c0:	ff 92       	push	r15
    38c2:	0f 93       	push	r16
    38c4:	1f 93       	push	r17
    38c6:	cf 93       	push	r28
    38c8:	df 93       	push	r29
    38ca:	ec 01       	movw	r28, r24
    38cc:	6b 01       	movw	r12, r22
    38ce:	5a 01       	movw	r10, r20
    38d0:	49 01       	movw	r8, r18
    int16_t res=mrpp_state_is_body_ready(state);
    38d2:	0e 94 be 33 	call	0x677c	; 0x677c <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    38d6:	8f 3f       	cpi	r24, 0xFF	; 255
    38d8:	2f ef       	ldi	r18, 0xFF	; 255
    38da:	92 07       	cpc	r25, r18
    38dc:	09 f4       	brne	.+2      	; 0x38e0 <mrpp_state_get_ready_body+0x2e>
    38de:	51 c0       	rjmp	.+162    	; 0x3982 <mrpp_state_get_ready_body+0xd0>
    38e0:	8c 15       	cp	r24, r12
    38e2:	9d 05       	cpc	r25, r13
    38e4:	09 f0       	breq	.+2      	; 0x38e8 <mrpp_state_get_ready_body+0x36>
    38e6:	4f c0       	rjmp	.+158    	; 0x3986 <mrpp_state_get_ready_body+0xd4>
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	09 c0       	rjmp	.+18     	; 0x38fe <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    38ec:	fe 01       	movw	r30, r28
    38ee:	e8 0f       	add	r30, r24
    38f0:	f1 1d       	adc	r31, r1
    38f2:	ec 55       	subi	r30, 0x5C	; 92
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	90 81       	ld	r25, Z
    38f8:	91 30       	cpi	r25, 0x01	; 1
    38fa:	41 f0       	breq	.+16     	; 0x390c <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    38fc:	8f 5f       	subi	r24, 0xFF	; 255
    38fe:	fe 01       	movw	r30, r28
    3900:	ed 55       	subi	r30, 0x5D	; 93
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	90 81       	ld	r25, Z
    3906:	89 17       	cp	r24, r25
    3908:	88 f3       	brcs	.-30     	; 0x38ec <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    390a:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    390c:	91 e0       	ldi	r25, 0x01	; 1
    390e:	98 0f       	add	r25, r24
    3910:	f5 01       	movw	r30, r10
    3912:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    3914:	99 81       	ldd	r25, Y+1	; 0x01
    3916:	f4 01       	movw	r30, r8
    3918:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	41 e6       	ldi	r20, 0x61	; 97
    391e:	48 9f       	mul	r20, r24
    3920:	90 01       	movw	r18, r0
    3922:	49 9f       	mul	r20, r25
    3924:	30 0d       	add	r19, r0
    3926:	11 24       	eor	r1, r1
    3928:	f8 01       	movw	r30, r16
    392a:	31 83       	std	Z+1, r19	; 0x01
    392c:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    392e:	fe 01       	movw	r30, r28
    3930:	ed 55       	subi	r30, 0x5D	; 93
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	20 81       	ld	r18, Z
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	21 50       	subi	r18, 0x01	; 1
    393a:	31 09       	sbc	r19, r1
    393c:	82 17       	cp	r24, r18
    393e:	93 07       	cpc	r25, r19
    3940:	2c f4       	brge	.+10     	; 0x394c <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    3942:	81 e6       	ldi	r24, 0x61	; 97
    3944:	f7 01       	movw	r30, r14
    3946:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	1e c0       	rjmp	.+60     	; 0x3988 <mrpp_state_get_ready_body+0xd6>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    394c:	8a 81       	ldd	r24, Y+2	; 0x02
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	ac 01       	movw	r20, r24
    3954:	44 0f       	add	r20, r20
    3956:	55 1f       	adc	r21, r21
    3958:	88 0f       	add	r24, r24
    395a:	99 1f       	adc	r25, r25
    395c:	88 0f       	add	r24, r24
    395e:	99 1f       	adc	r25, r25
    3960:	88 0f       	add	r24, r24
    3962:	99 1f       	adc	r25, r25
    3964:	84 0f       	add	r24, r20
    3966:	95 1f       	adc	r25, r21
    3968:	c8 0f       	add	r28, r24
    396a:	d9 1f       	adc	r29, r25
    396c:	9b 81       	ldd	r25, Y+3	; 0x03
    396e:	8d 81       	ldd	r24, Y+5	; 0x05
    3970:	89 0f       	add	r24, r25
    3972:	f1 e6       	ldi	r31, 0x61	; 97
    3974:	2f 9f       	mul	r18, r31
    3976:	80 19       	sub	r24, r0
    3978:	11 24       	eor	r1, r1
    397a:	f7 01       	movw	r30, r14
    397c:	80 83       	st	Z, r24
    } 
    return true; 
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	03 c0       	rjmp	.+6      	; 0x3988 <mrpp_state_get_ready_body+0xd6>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	01 c0       	rjmp	.+2      	; 0x3988 <mrpp_state_get_ready_body+0xd6>
    3986:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    3988:	df 91       	pop	r29
    398a:	cf 91       	pop	r28
    398c:	1f 91       	pop	r17
    398e:	0f 91       	pop	r16
    3990:	ff 90       	pop	r15
    3992:	ef 90       	pop	r14
    3994:	df 90       	pop	r13
    3996:	cf 90       	pop	r12
    3998:	bf 90       	pop	r11
    399a:	af 90       	pop	r10
    399c:	9f 90       	pop	r9
    399e:	8f 90       	pop	r8
    39a0:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00006b4a <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    6b4a:	fc 01       	movw	r30, r24
    6b4c:	ed 55       	subi	r30, 0x5D	; 93
    6b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b50:	20 81       	ld	r18, Z
    6b52:	30 e0       	ldi	r19, 0x00	; 0
    6b54:	62 17       	cp	r22, r18
    6b56:	73 07       	cpc	r23, r19
    6b58:	3c f4       	brge	.+14     	; 0x6b68 <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    6b5a:	68 0f       	add	r22, r24
    6b5c:	79 1f       	adc	r23, r25
    6b5e:	fb 01       	movw	r30, r22
    6b60:	ec 55       	subi	r30, 0x5C	; 92
    6b62:	ff 4f       	sbci	r31, 0xFF	; 255
    6b64:	82 e0       	ldi	r24, 0x02	; 2
    6b66:	80 83       	st	Z, r24
    6b68:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

000063ee <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    63ee:	70 e0       	ldi	r23, 0x00	; 0
    63f0:	61 50       	subi	r22, 0x01	; 1
    63f2:	71 09       	sbc	r23, r1
    63f4:	fb 01       	movw	r30, r22
    63f6:	ee 0f       	add	r30, r30
    63f8:	ff 1f       	adc	r31, r31
    63fa:	66 0f       	add	r22, r22
    63fc:	77 1f       	adc	r23, r23
    63fe:	66 0f       	add	r22, r22
    6400:	77 1f       	adc	r23, r23
    6402:	66 0f       	add	r22, r22
    6404:	77 1f       	adc	r23, r23
    6406:	e6 0f       	add	r30, r22
    6408:	f7 1f       	adc	r31, r23
    640a:	e8 0f       	add	r30, r24
    640c:	f9 1f       	adc	r31, r25
    640e:	83 81       	ldd	r24, Z+3	; 0x03
    6410:	94 81       	ldd	r25, Z+4	; 0x04
    6412:	da 01       	movw	r26, r20
    6414:	8d 93       	st	X+, r24
    6416:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    6418:	85 81       	ldd	r24, Z+5	; 0x05
    641a:	96 81       	ldd	r25, Z+6	; 0x06
    641c:	f9 01       	movw	r30, r18
    641e:	91 83       	std	Z+1, r25	; 0x01
    6420:	80 83       	st	Z, r24
    6422:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

000067ac <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    67ac:	80 91 cf 0e 	lds	r24, 0x0ECF	; 0x800ecf <cnt>
    67b0:	90 91 d0 0e 	lds	r25, 0x0ED0	; 0x800ed0 <cnt+0x1>
    67b4:	01 96       	adiw	r24, 0x01	; 1
    67b6:	90 93 d0 0e 	sts	0x0ED0, r25	; 0x800ed0 <cnt+0x1>
    67ba:	80 93 cf 0e 	sts	0x0ECF, r24	; 0x800ecf <cnt>
	if(cnt>=_seconds){
    67be:	20 91 d1 0e 	lds	r18, 0x0ED1	; 0x800ed1 <_seconds>
    67c2:	30 91 d2 0e 	lds	r19, 0x0ED2	; 0x800ed2 <_seconds+0x1>
    67c6:	82 17       	cp	r24, r18
    67c8:	93 07       	cpc	r25, r19
    67ca:	38 f0       	brcs	.+14     	; 0x67da <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    67cc:	80 91 ec 0e 	lds	r24, 0x0EEC	; 0x800eec <eventPointer>
    67d0:	0e 94 db 30 	call	0x61b6	; 0x61b6 <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    67d4:	80 e0       	ldi	r24, 0x00	; 0
    67d6:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <PM_HAL_BC_power>
    67da:	08 95       	ret

Disassembly of section .text.PUMP_start:

000069b0 <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    69b0:	10 92 d0 0e 	sts	0x0ED0, r1	; 0x800ed0 <cnt+0x1>
    69b4:	10 92 cf 0e 	sts	0x0ECF, r1	; 0x800ecf <cnt>
	_seconds=seconds;
    69b8:	90 93 d2 0e 	sts	0x0ED2, r25	; 0x800ed2 <_seconds+0x1>
    69bc:	80 93 d1 0e 	sts	0x0ED1, r24	; 0x800ed1 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    69c0:	86 ed       	ldi	r24, 0xD6	; 214
    69c2:	93 e3       	ldi	r25, 0x33	; 51
    69c4:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <TC2_HAL_subscribe>
    69c8:	80 93 ec 0e 	sts	0x0EEC, r24	; 0x800eec <eventPointer>
	PM_HAL_BC_power(true);
    69cc:	81 e0       	ldi	r24, 0x01	; 1
    69ce:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <PM_HAL_BC_power>
    69d2:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

00006cb0 <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    6cb0:	40 91 cf 0e 	lds	r20, 0x0ECF	; 0x800ecf <cnt>
    6cb4:	50 91 d0 0e 	lds	r21, 0x0ED0	; 0x800ed0 <cnt+0x1>
    6cb8:	20 91 d1 0e 	lds	r18, 0x0ED1	; 0x800ed1 <_seconds>
    6cbc:	30 91 d2 0e 	lds	r19, 0x0ED2	; 0x800ed2 <_seconds+0x1>
    6cc0:	81 e0       	ldi	r24, 0x01	; 1
    6cc2:	42 17       	cp	r20, r18
    6cc4:	53 07       	cpc	r21, r19
    6cc6:	08 f4       	brcc	.+2      	; 0x6cca <PUMP_is_done+0x1a>
    6cc8:	80 e0       	ldi	r24, 0x00	; 0
}
    6cca:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

000035bc <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    35bc:	1f 93       	push	r17
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	00 d0       	rcall	.+0      	; 0x35c4 <datetime_to_BCD+0x8>
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <datetime_to_BCD+0xa>
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <datetime_to_BCD+0xc>
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	f9 01       	movw	r30, r18
    35ce:	3d ec       	ldi	r19, 0xCD	; 205
    35d0:	43 9f       	mul	r20, r19
    35d2:	21 2d       	mov	r18, r1
    35d4:	11 24       	eor	r1, r1
    35d6:	26 95       	lsr	r18
    35d8:	26 95       	lsr	r18
    35da:	26 95       	lsr	r18
    35dc:	10 e1       	ldi	r17, 0x10	; 16
    35de:	21 9f       	mul	r18, r17
    35e0:	d0 01       	movw	r26, r0
    35e2:	11 24       	eor	r1, r1
    35e4:	22 0f       	add	r18, r18
    35e6:	b2 2f       	mov	r27, r18
    35e8:	bb 0f       	add	r27, r27
    35ea:	bb 0f       	add	r27, r27
    35ec:	2b 0f       	add	r18, r27
    35ee:	42 1b       	sub	r20, r18
    35f0:	4a 2b       	or	r20, r26
    35f2:	40 83       	st	Z, r20
    35f4:	53 9f       	mul	r21, r19
    35f6:	21 2d       	mov	r18, r1
    35f8:	11 24       	eor	r1, r1
    35fa:	26 95       	lsr	r18
    35fc:	26 95       	lsr	r18
    35fe:	26 95       	lsr	r18
    3600:	40 e1       	ldi	r20, 0x10	; 16
    3602:	24 9f       	mul	r18, r20
    3604:	d0 01       	movw	r26, r0
    3606:	11 24       	eor	r1, r1
    3608:	22 0f       	add	r18, r18
    360a:	42 2f       	mov	r20, r18
    360c:	44 0f       	add	r20, r20
    360e:	44 0f       	add	r20, r20
    3610:	24 0f       	add	r18, r20
    3612:	52 1b       	sub	r21, r18
    3614:	5a 2b       	or	r21, r26
    3616:	51 83       	std	Z+1, r21	; 0x01
    3618:	63 9f       	mul	r22, r19
    361a:	41 2d       	mov	r20, r1
    361c:	11 24       	eor	r1, r1
    361e:	46 95       	lsr	r20
    3620:	46 95       	lsr	r20
    3622:	46 95       	lsr	r20
    3624:	10 e1       	ldi	r17, 0x10	; 16
    3626:	41 9f       	mul	r20, r17
    3628:	d0 01       	movw	r26, r0
    362a:	11 24       	eor	r1, r1
    362c:	44 0f       	add	r20, r20
    362e:	24 2f       	mov	r18, r20
    3630:	22 0f       	add	r18, r18
    3632:	22 0f       	add	r18, r18
    3634:	42 0f       	add	r20, r18
    3636:	64 1b       	sub	r22, r20
    3638:	6a 2b       	or	r22, r26
    363a:	62 83       	std	Z+2, r22	; 0x02
    363c:	73 9f       	mul	r23, r19
    363e:	41 2d       	mov	r20, r1
    3640:	11 24       	eor	r1, r1
    3642:	46 95       	lsr	r20
    3644:	46 95       	lsr	r20
    3646:	46 95       	lsr	r20
    3648:	20 e1       	ldi	r18, 0x10	; 16
    364a:	42 9f       	mul	r20, r18
    364c:	d0 01       	movw	r26, r0
    364e:	11 24       	eor	r1, r1
    3650:	44 0f       	add	r20, r20
    3652:	24 2f       	mov	r18, r20
    3654:	22 0f       	add	r18, r18
    3656:	22 0f       	add	r18, r18
    3658:	42 0f       	add	r20, r18
    365a:	74 1b       	sub	r23, r20
    365c:	7a 2b       	or	r23, r26
    365e:	73 83       	std	Z+3, r23	; 0x03
    3660:	83 9f       	mul	r24, r19
    3662:	41 2d       	mov	r20, r1
    3664:	11 24       	eor	r1, r1
    3666:	46 95       	lsr	r20
    3668:	46 95       	lsr	r20
    366a:	46 95       	lsr	r20
    366c:	10 e1       	ldi	r17, 0x10	; 16
    366e:	41 9f       	mul	r20, r17
    3670:	b0 01       	movw	r22, r0
    3672:	11 24       	eor	r1, r1
    3674:	44 0f       	add	r20, r20
    3676:	24 2f       	mov	r18, r20
    3678:	22 0f       	add	r18, r18
    367a:	22 0f       	add	r18, r18
    367c:	42 0f       	add	r20, r18
    367e:	84 1b       	sub	r24, r20
    3680:	86 2b       	or	r24, r22
    3682:	84 83       	std	Z+4, r24	; 0x04
    3684:	93 9f       	mul	r25, r19
    3686:	31 2d       	mov	r19, r1
    3688:	11 24       	eor	r1, r1
    368a:	36 95       	lsr	r19
    368c:	36 95       	lsr	r19
    368e:	36 95       	lsr	r19
    3690:	20 e1       	ldi	r18, 0x10	; 16
    3692:	32 9f       	mul	r19, r18
    3694:	a0 01       	movw	r20, r0
    3696:	11 24       	eor	r1, r1
    3698:	33 0f       	add	r19, r19
    369a:	83 2f       	mov	r24, r19
    369c:	88 0f       	add	r24, r24
    369e:	88 0f       	add	r24, r24
    36a0:	38 0f       	add	r19, r24
    36a2:	93 1b       	sub	r25, r19
    36a4:	94 2b       	or	r25, r20
    36a6:	95 83       	std	Z+5, r25	; 0x05
    36a8:	26 96       	adiw	r28, 0x06	; 6
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	de bf       	out	0x3e, r29	; 62
    36b0:	0f be       	out	0x3f, r0	; 63
    36b2:	cd bf       	out	0x3d, r28	; 61
    36b4:	df 91       	pop	r29
    36b6:	cf 91       	pop	r28
    36b8:	1f 91       	pop	r17
    36ba:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

000057e2 <RTC_set_clock_out>:
    57e2:	cf 93       	push	r28
    57e4:	df 93       	push	r29
    57e6:	00 d0       	rcall	.+0      	; 0x57e8 <RTC_set_clock_out+0x6>
    57e8:	cd b7       	in	r28, 0x3d	; 61
    57ea:	de b7       	in	r29, 0x3e	; 62
    57ec:	9d e0       	ldi	r25, 0x0D	; 13
    57ee:	99 83       	std	Y+1, r25	; 0x01
    57f0:	81 30       	cpi	r24, 0x01	; 1
    57f2:	31 f0       	breq	.+12     	; 0x5800 <RTC_set_clock_out+0x1e>
    57f4:	18 f0       	brcs	.+6      	; 0x57fc <RTC_set_clock_out+0x1a>
    57f6:	80 32       	cpi	r24, 0x20	; 32
    57f8:	31 f0       	breq	.+12     	; 0x5806 <RTC_set_clock_out+0x24>
    57fa:	13 c0       	rjmp	.+38     	; 0x5822 <RTC_set_clock_out+0x40>
    57fc:	1a 82       	std	Y+2, r1	; 0x02
    57fe:	05 c0       	rjmp	.+10     	; 0x580a <RTC_set_clock_out+0x28>
    5800:	83 e8       	ldi	r24, 0x83	; 131
    5802:	8a 83       	std	Y+2, r24	; 0x02
    5804:	02 c0       	rjmp	.+4      	; 0x580a <RTC_set_clock_out+0x28>
    5806:	82 e8       	ldi	r24, 0x82	; 130
    5808:	8a 83       	std	Y+2, r24	; 0x02
    580a:	ae 01       	movw	r20, r28
    580c:	4f 5f       	subi	r20, 0xFF	; 255
    580e:	5f 4f       	sbci	r21, 0xFF	; 255
    5810:	60 e8       	ldi	r22, 0x80	; 128
    5812:	22 e0       	ldi	r18, 0x02	; 2
    5814:	81 e5       	ldi	r24, 0x51	; 81
    5816:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <TWI_API_write_data_stop>
    581a:	88 23       	and	r24, r24
    581c:	21 f0       	breq	.+8      	; 0x5826 <RTC_set_clock_out+0x44>
    581e:	82 e0       	ldi	r24, 0x02	; 2
    5820:	03 c0       	rjmp	.+6      	; 0x5828 <RTC_set_clock_out+0x46>
    5822:	81 e0       	ldi	r24, 0x01	; 1
    5824:	01 c0       	rjmp	.+2      	; 0x5828 <RTC_set_clock_out+0x46>
    5826:	80 e0       	ldi	r24, 0x00	; 0
    5828:	0f 90       	pop	r0
    582a:	0f 90       	pop	r0
    582c:	df 91       	pop	r29
    582e:	cf 91       	pop	r28
    5830:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00002da0 <RTC_get_current_time>:
    2da0:	0f 93       	push	r16
    2da2:	1f 93       	push	r17
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
    2dac:	27 97       	sbiw	r28, 0x07	; 7
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	8c 01       	movw	r16, r24
    2dba:	21 e0       	ldi	r18, 0x01	; 1
    2dbc:	49 ef       	ldi	r20, 0xF9	; 249
    2dbe:	59 e0       	ldi	r21, 0x09	; 9
    2dc0:	60 e0       	ldi	r22, 0x00	; 0
    2dc2:	81 e5       	ldi	r24, 0x51	; 81
    2dc4:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <TWI_API_write_data>
    2dc8:	81 11       	cpse	r24, r1
    2dca:	7c c0       	rjmp	.+248    	; 0x2ec4 <RTC_get_current_time+0x124>
    2dcc:	47 e0       	ldi	r20, 0x07	; 7
    2dce:	be 01       	movw	r22, r28
    2dd0:	6f 5f       	subi	r22, 0xFF	; 255
    2dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd4:	81 e5       	ldi	r24, 0x51	; 81
    2dd6:	0e 94 2e 33 	call	0x665c	; 0x665c <TWI_API_repeat_read_data_stop>
    2dda:	81 11       	cpse	r24, r1
    2ddc:	75 c0       	rjmp	.+234    	; 0x2ec8 <RTC_get_current_time+0x128>
    2dde:	29 81       	ldd	r18, Y+1	; 0x01
    2de0:	82 2f       	mov	r24, r18
    2de2:	8f 77       	andi	r24, 0x7F	; 127
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	95 95       	asr	r25
    2de8:	87 95       	ror	r24
    2dea:	95 95       	asr	r25
    2dec:	87 95       	ror	r24
    2dee:	95 95       	asr	r25
    2df0:	87 95       	ror	r24
    2df2:	95 95       	asr	r25
    2df4:	87 95       	ror	r24
    2df6:	88 0f       	add	r24, r24
    2df8:	98 2f       	mov	r25, r24
    2dfa:	99 0f       	add	r25, r25
    2dfc:	99 0f       	add	r25, r25
    2dfe:	89 0f       	add	r24, r25
    2e00:	2f 70       	andi	r18, 0x0F	; 15
    2e02:	82 0f       	add	r24, r18
    2e04:	f8 01       	movw	r30, r16
    2e06:	80 83       	st	Z, r24
    2e08:	2a 81       	ldd	r18, Y+2	; 0x02
    2e0a:	82 2f       	mov	r24, r18
    2e0c:	8f 77       	andi	r24, 0x7F	; 127
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	95 95       	asr	r25
    2e12:	87 95       	ror	r24
    2e14:	95 95       	asr	r25
    2e16:	87 95       	ror	r24
    2e18:	95 95       	asr	r25
    2e1a:	87 95       	ror	r24
    2e1c:	95 95       	asr	r25
    2e1e:	87 95       	ror	r24
    2e20:	88 0f       	add	r24, r24
    2e22:	98 2f       	mov	r25, r24
    2e24:	99 0f       	add	r25, r25
    2e26:	99 0f       	add	r25, r25
    2e28:	89 0f       	add	r24, r25
    2e2a:	2f 70       	andi	r18, 0x0F	; 15
    2e2c:	82 0f       	add	r24, r18
    2e2e:	81 83       	std	Z+1, r24	; 0x01
    2e30:	2b 81       	ldd	r18, Y+3	; 0x03
    2e32:	82 2f       	mov	r24, r18
    2e34:	8f 73       	andi	r24, 0x3F	; 63
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	95 95       	asr	r25
    2e3a:	87 95       	ror	r24
    2e3c:	95 95       	asr	r25
    2e3e:	87 95       	ror	r24
    2e40:	95 95       	asr	r25
    2e42:	87 95       	ror	r24
    2e44:	95 95       	asr	r25
    2e46:	87 95       	ror	r24
    2e48:	88 0f       	add	r24, r24
    2e4a:	98 2f       	mov	r25, r24
    2e4c:	99 0f       	add	r25, r25
    2e4e:	99 0f       	add	r25, r25
    2e50:	89 0f       	add	r24, r25
    2e52:	2f 70       	andi	r18, 0x0F	; 15
    2e54:	82 0f       	add	r24, r18
    2e56:	82 83       	std	Z+2, r24	; 0x02
    2e58:	2c 81       	ldd	r18, Y+4	; 0x04
    2e5a:	82 2f       	mov	r24, r18
    2e5c:	8f 73       	andi	r24, 0x3F	; 63
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	95 95       	asr	r25
    2e62:	87 95       	ror	r24
    2e64:	95 95       	asr	r25
    2e66:	87 95       	ror	r24
    2e68:	95 95       	asr	r25
    2e6a:	87 95       	ror	r24
    2e6c:	95 95       	asr	r25
    2e6e:	87 95       	ror	r24
    2e70:	88 0f       	add	r24, r24
    2e72:	98 2f       	mov	r25, r24
    2e74:	99 0f       	add	r25, r25
    2e76:	99 0f       	add	r25, r25
    2e78:	89 0f       	add	r24, r25
    2e7a:	2f 70       	andi	r18, 0x0F	; 15
    2e7c:	82 0f       	add	r24, r18
    2e7e:	83 83       	std	Z+3, r24	; 0x03
    2e80:	2e 81       	ldd	r18, Y+6	; 0x06
    2e82:	82 2f       	mov	r24, r18
    2e84:	8f 71       	andi	r24, 0x1F	; 31
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	95 95       	asr	r25
    2e8a:	87 95       	ror	r24
    2e8c:	95 95       	asr	r25
    2e8e:	87 95       	ror	r24
    2e90:	95 95       	asr	r25
    2e92:	87 95       	ror	r24
    2e94:	95 95       	asr	r25
    2e96:	87 95       	ror	r24
    2e98:	88 0f       	add	r24, r24
    2e9a:	98 2f       	mov	r25, r24
    2e9c:	99 0f       	add	r25, r25
    2e9e:	99 0f       	add	r25, r25
    2ea0:	89 0f       	add	r24, r25
    2ea2:	2f 70       	andi	r18, 0x0F	; 15
    2ea4:	82 0f       	add	r24, r18
    2ea6:	84 83       	std	Z+4, r24	; 0x04
    2ea8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eaa:	98 2f       	mov	r25, r24
    2eac:	92 95       	swap	r25
    2eae:	9f 70       	andi	r25, 0x0F	; 15
    2eb0:	99 0f       	add	r25, r25
    2eb2:	29 2f       	mov	r18, r25
    2eb4:	22 0f       	add	r18, r18
    2eb6:	22 0f       	add	r18, r18
    2eb8:	92 0f       	add	r25, r18
    2eba:	8f 70       	andi	r24, 0x0F	; 15
    2ebc:	89 0f       	add	r24, r25
    2ebe:	85 83       	std	Z+5, r24	; 0x05
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	03 c0       	rjmp	.+6      	; 0x2eca <RTC_get_current_time+0x12a>
    2ec4:	82 e0       	ldi	r24, 0x02	; 2
    2ec6:	01 c0       	rjmp	.+2      	; 0x2eca <RTC_get_current_time+0x12a>
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	27 96       	adiw	r28, 0x07	; 7
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

000051c8 <RTC_set_current_time>:
    51c8:	cf 93       	push	r28
    51ca:	df 93       	push	r29
    51cc:	cd b7       	in	r28, 0x3d	; 61
    51ce:	de b7       	in	r29, 0x3e	; 62
    51d0:	64 97       	sbiw	r28, 0x14	; 20
    51d2:	0f b6       	in	r0, 0x3f	; 63
    51d4:	f8 94       	cli
    51d6:	de bf       	out	0x3e, r29	; 62
    51d8:	0f be       	out	0x3f, r0	; 63
    51da:	cd bf       	out	0x3d, r28	; 61
    51dc:	9e 01       	movw	r18, r28
    51de:	27 5f       	subi	r18, 0xF7	; 247
    51e0:	3f 4f       	sbci	r19, 0xFF	; 255
    51e2:	0e 94 de 1a 	call	0x35bc	; 0x35bc <datetime_to_BCD>
    51e6:	82 e0       	ldi	r24, 0x02	; 2
    51e8:	89 83       	std	Y+1, r24	; 0x01
    51ea:	89 85       	ldd	r24, Y+9	; 0x09
    51ec:	8a 83       	std	Y+2, r24	; 0x02
    51ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    51f0:	8b 83       	std	Y+3, r24	; 0x03
    51f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    51f4:	8c 83       	std	Y+4, r24	; 0x04
    51f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    51f8:	8d 83       	std	Y+5, r24	; 0x05
    51fa:	1e 82       	std	Y+6, r1	; 0x06
    51fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    51fe:	8f 83       	std	Y+7, r24	; 0x07
    5200:	8e 85       	ldd	r24, Y+14	; 0x0e
    5202:	88 87       	std	Y+8, r24	; 0x08
    5204:	ae 01       	movw	r20, r28
    5206:	4f 5f       	subi	r20, 0xFF	; 255
    5208:	5f 4f       	sbci	r21, 0xFF	; 255
    520a:	60 e8       	ldi	r22, 0x80	; 128
    520c:	28 e0       	ldi	r18, 0x08	; 8
    520e:	81 e5       	ldi	r24, 0x51	; 81
    5210:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <TWI_API_write_data_stop>
    5214:	88 23       	and	r24, r24
    5216:	11 f0       	breq	.+4      	; 0x521c <RTC_set_current_time+0x54>
    5218:	82 e0       	ldi	r24, 0x02	; 2
    521a:	01 c0       	rjmp	.+2      	; 0x521e <RTC_set_current_time+0x56>
    521c:	80 e0       	ldi	r24, 0x00	; 0
    521e:	64 96       	adiw	r28, 0x14	; 20
    5220:	0f b6       	in	r0, 0x3f	; 63
    5222:	f8 94       	cli
    5224:	de bf       	out	0x3e, r29	; 62
    5226:	0f be       	out	0x3f, r0	; 63
    5228:	cd bf       	out	0x3d, r28	; 61
    522a:	df 91       	pop	r29
    522c:	cf 91       	pop	r28
    522e:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt:

00003dce <RTC_set_wake_up_interrupt>:
    3dce:	1f 93       	push	r17
    3dd0:	cf 93       	push	r28
    3dd2:	df 93       	push	r29
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
    3dd8:	2d 97       	sbiw	r28, 0x0d	; 13
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	cd bf       	out	0x3d, r28	; 61
    3de4:	18 2f       	mov	r17, r24
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	89 83       	std	Y+1, r24	; 0x01
    3dea:	82 e0       	ldi	r24, 0x02	; 2
    3dec:	8a 83       	std	Y+2, r24	; 0x02
    3dee:	85 e0       	ldi	r24, 0x05	; 5
    3df0:	ea e9       	ldi	r30, 0x9A	; 154
    3df2:	fe e0       	ldi	r31, 0x0E	; 14
    3df4:	de 01       	movw	r26, r28
    3df6:	13 96       	adiw	r26, 0x03	; 3
    3df8:	01 90       	ld	r0, Z+
    3dfa:	0d 92       	st	X+, r0
    3dfc:	8a 95       	dec	r24
    3dfe:	e1 f7       	brne	.-8      	; 0x3df8 <RTC_set_wake_up_interrupt+0x2a>
    3e00:	ce 01       	movw	r24, r28
    3e02:	08 96       	adiw	r24, 0x08	; 8
    3e04:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <RTC_get_current_time>
    3e08:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e0a:	81 0f       	add	r24, r17
    3e0c:	9b ea       	ldi	r25, 0xAB	; 171
    3e0e:	89 9f       	mul	r24, r25
    3e10:	91 2d       	mov	r25, r1
    3e12:	11 24       	eor	r1, r1
    3e14:	92 95       	swap	r25
    3e16:	9f 70       	andi	r25, 0x0F	; 15
    3e18:	28 e1       	ldi	r18, 0x18	; 24
    3e1a:	92 9f       	mul	r25, r18
    3e1c:	80 19       	sub	r24, r0
    3e1e:	11 24       	eor	r1, r1
    3e20:	8a 87       	std	Y+10, r24	; 0x0a
    3e22:	ae 01       	movw	r20, r28
    3e24:	4f 5f       	subi	r20, 0xFF	; 255
    3e26:	5f 4f       	sbci	r21, 0xFF	; 255
    3e28:	60 e8       	ldi	r22, 0x80	; 128
    3e2a:	22 e0       	ldi	r18, 0x02	; 2
    3e2c:	81 e5       	ldi	r24, 0x51	; 81
    3e2e:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <TWI_API_write_data_stop>
    3e32:	81 11       	cpse	r24, r1
    3e34:	20 c0       	rjmp	.+64     	; 0x3e76 <RTC_set_wake_up_interrupt+0xa8>
    3e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e38:	8d ec       	ldi	r24, 0xCD	; 205
    3e3a:	98 9f       	mul	r25, r24
    3e3c:	81 2d       	mov	r24, r1
    3e3e:	11 24       	eor	r1, r1
    3e40:	86 95       	lsr	r24
    3e42:	86 95       	lsr	r24
    3e44:	86 95       	lsr	r24
    3e46:	40 e1       	ldi	r20, 0x10	; 16
    3e48:	84 9f       	mul	r24, r20
    3e4a:	90 01       	movw	r18, r0
    3e4c:	11 24       	eor	r1, r1
    3e4e:	88 0f       	add	r24, r24
    3e50:	38 2f       	mov	r19, r24
    3e52:	33 0f       	add	r19, r19
    3e54:	33 0f       	add	r19, r19
    3e56:	83 0f       	add	r24, r19
    3e58:	98 1b       	sub	r25, r24
    3e5a:	92 2b       	or	r25, r18
    3e5c:	9d 83       	std	Y+5, r25	; 0x05
    3e5e:	ae 01       	movw	r20, r28
    3e60:	4d 5f       	subi	r20, 0xFD	; 253
    3e62:	5f 4f       	sbci	r21, 0xFF	; 255
    3e64:	60 e8       	ldi	r22, 0x80	; 128
    3e66:	25 e0       	ldi	r18, 0x05	; 5
    3e68:	81 e5       	ldi	r24, 0x51	; 81
    3e6a:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <TWI_API_write_data_stop>
    3e6e:	88 23       	and	r24, r24
    3e70:	21 f0       	breq	.+8      	; 0x3e7a <RTC_set_wake_up_interrupt+0xac>
    3e72:	82 e0       	ldi	r24, 0x02	; 2
    3e74:	03 c0       	rjmp	.+6      	; 0x3e7c <RTC_set_wake_up_interrupt+0xae>
    3e76:	82 e0       	ldi	r24, 0x02	; 2
    3e78:	01 c0       	rjmp	.+2      	; 0x3e7c <RTC_set_wake_up_interrupt+0xae>
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	2d 96       	adiw	r28, 0x0d	; 13
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	df 91       	pop	r29
    3e8a:	cf 91       	pop	r28
    3e8c:	1f 91       	pop	r17
    3e8e:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

000064c6 <RTC_clear_wake_up_interrupt>:

RTC_STATUS RTC_clear_wake_up_interrupt(){
    64c6:	cf 93       	push	r28
    64c8:	df 93       	push	r29
    64ca:	00 d0       	rcall	.+0      	; 0x64cc <RTC_clear_wake_up_interrupt+0x6>
    64cc:	cd b7       	in	r28, 0x3d	; 61
    64ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	89 83       	std	Y+1, r24	; 0x01
    64d4:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    64d6:	ae 01       	movw	r20, r28
    64d8:	4f 5f       	subi	r20, 0xFF	; 255
    64da:	5f 4f       	sbci	r21, 0xFF	; 255
    64dc:	60 e8       	ldi	r22, 0x80	; 128
    64de:	22 e0       	ldi	r18, 0x02	; 2
    64e0:	81 e5       	ldi	r24, 0x51	; 81
    64e2:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    64e6:	88 23       	and	r24, r24
    64e8:	11 f0       	breq	.+4      	; 0x64ee <RTC_clear_wake_up_interrupt+0x28>
    64ea:	82 e0       	ldi	r24, 0x02	; 2
    64ec:	01 c0       	rjmp	.+2      	; 0x64f0 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    64ee:	80 e0       	ldi	r24, 0x00	; 0
}
    64f0:	0f 90       	pop	r0
    64f2:	0f 90       	pop	r0
    64f4:	df 91       	pop	r29
    64f6:	cf 91       	pop	r28
    64f8:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

0000326c <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    326c:	4f 92       	push	r4
    326e:	5f 92       	push	r5
    3270:	6f 92       	push	r6
    3272:	7f 92       	push	r7
    3274:	8f 92       	push	r8
    3276:	9f 92       	push	r9
    3278:	af 92       	push	r10
    327a:	bf 92       	push	r11
    327c:	cf 92       	push	r12
    327e:	df 92       	push	r13
    3280:	ef 92       	push	r14
    3282:	ff 92       	push	r15
    3284:	0f 93       	push	r16
    3286:	1f 93       	push	r17
    3288:	cf 93       	push	r28
    328a:	df 93       	push	r29
    328c:	00 d0       	rcall	.+0      	; 0x328e <RTC_datetime_to_ts+0x22>
    328e:	00 d0       	rcall	.+0      	; 0x3290 <RTC_datetime_to_ts+0x24>
    3290:	00 d0       	rcall	.+0      	; 0x3292 <RTC_datetime_to_ts+0x26>
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	f9 01       	movw	r30, r18
    3298:	49 2e       	mov	r4, r25
    329a:	51 2c       	mov	r5, r1
    329c:	61 2c       	mov	r6, r1
    329e:	71 2c       	mov	r7, r1
    32a0:	03 2e       	mov	r0, r19
    32a2:	3a e1       	ldi	r19, 0x1A	; 26
    32a4:	44 0c       	add	r4, r4
    32a6:	55 1c       	adc	r5, r5
    32a8:	66 1c       	adc	r6, r6
    32aa:	77 1c       	adc	r7, r7
    32ac:	3a 95       	dec	r19
    32ae:	d1 f7       	brne	.-12     	; 0x32a4 <RTC_datetime_to_ts+0x38>
    32b0:	30 2d       	mov	r19, r0
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	a0 e0       	ldi	r26, 0x00	; 0
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	07 2e       	mov	r0, r23
    32ba:	76 e1       	ldi	r23, 0x16	; 22
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	aa 1f       	adc	r26, r26
    32c2:	bb 1f       	adc	r27, r27
    32c4:	7a 95       	dec	r23
    32c6:	d1 f7       	brne	.-12     	; 0x32bc <RTC_datetime_to_ts+0x50>
    32c8:	70 2d       	mov	r23, r0
    32ca:	84 29       	or	r24, r4
    32cc:	95 29       	or	r25, r5
    32ce:	a6 29       	or	r26, r6
    32d0:	b7 29       	or	r27, r7
    32d2:	87 2e       	mov	r8, r23
    32d4:	91 2c       	mov	r9, r1
    32d6:	a1 2c       	mov	r10, r1
    32d8:	b1 2c       	mov	r11, r1
    32da:	07 2e       	mov	r0, r23
    32dc:	71 e1       	ldi	r23, 0x11	; 17
    32de:	88 0c       	add	r8, r8
    32e0:	99 1c       	adc	r9, r9
    32e2:	aa 1c       	adc	r10, r10
    32e4:	bb 1c       	adc	r11, r11
    32e6:	7a 95       	dec	r23
    32e8:	d1 f7       	brne	.-12     	; 0x32de <RTC_datetime_to_ts+0x72>
    32ea:	70 2d       	mov	r23, r0
    32ec:	88 29       	or	r24, r8
    32ee:	99 29       	or	r25, r9
    32f0:	aa 29       	or	r26, r10
    32f2:	bb 29       	or	r27, r11
    32f4:	c6 2e       	mov	r12, r22
    32f6:	d1 2c       	mov	r13, r1
    32f8:	e1 2c       	mov	r14, r1
    32fa:	f1 2c       	mov	r15, r1
    32fc:	0b 2e       	mov	r0, r27
    32fe:	bc e0       	ldi	r27, 0x0C	; 12
    3300:	cc 0c       	add	r12, r12
    3302:	dd 1c       	adc	r13, r13
    3304:	ee 1c       	adc	r14, r14
    3306:	ff 1c       	adc	r15, r15
    3308:	ba 95       	dec	r27
    330a:	d1 f7       	brne	.-12     	; 0x3300 <RTC_datetime_to_ts+0x94>
    330c:	b0 2d       	mov	r27, r0
    330e:	8c 29       	or	r24, r12
    3310:	9d 29       	or	r25, r13
    3312:	ae 29       	or	r26, r14
    3314:	bf 29       	or	r27, r15
    3316:	05 2f       	mov	r16, r21
    3318:	10 e0       	ldi	r17, 0x00	; 0
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	00 0f       	add	r16, r16
    3320:	11 1f       	adc	r17, r17
    3322:	22 1f       	adc	r18, r18
    3324:	33 1f       	adc	r19, r19
    3326:	00 0f       	add	r16, r16
    3328:	11 1f       	adc	r17, r17
    332a:	22 1f       	adc	r18, r18
    332c:	33 1f       	adc	r19, r19
    332e:	00 0f       	add	r16, r16
    3330:	11 1f       	adc	r17, r17
    3332:	22 1f       	adc	r18, r18
    3334:	33 1f       	adc	r19, r19
    3336:	00 0f       	add	r16, r16
    3338:	11 1f       	adc	r17, r17
    333a:	22 1f       	adc	r18, r18
    333c:	33 1f       	adc	r19, r19
    333e:	00 0f       	add	r16, r16
    3340:	11 1f       	adc	r17, r17
    3342:	22 1f       	adc	r18, r18
    3344:	33 1f       	adc	r19, r19
    3346:	00 0f       	add	r16, r16
    3348:	11 1f       	adc	r17, r17
    334a:	22 1f       	adc	r18, r18
    334c:	33 1f       	adc	r19, r19
    334e:	80 2b       	or	r24, r16
    3350:	91 2b       	or	r25, r17
    3352:	a2 2b       	or	r26, r18
    3354:	b3 2b       	or	r27, r19
    3356:	84 2b       	or	r24, r20
    3358:	b0 83       	st	Z, r27
    335a:	a1 83       	std	Z+1, r26	; 0x01
    335c:	92 83       	std	Z+2, r25	; 0x02
    335e:	83 83       	std	Z+3, r24	; 0x03
    3360:	26 96       	adiw	r28, 0x06	; 6
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	1f 91       	pop	r17
    3372:	0f 91       	pop	r16
    3374:	ff 90       	pop	r15
    3376:	ef 90       	pop	r14
    3378:	df 90       	pop	r13
    337a:	cf 90       	pop	r12
    337c:	bf 90       	pop	r11
    337e:	af 90       	pop	r10
    3380:	9f 90       	pop	r9
    3382:	8f 90       	pop	r8
    3384:	7f 90       	pop	r7
    3386:	6f 90       	pop	r6
    3388:	5f 90       	pop	r5
    338a:	4f 90       	pop	r4
    338c:	08 95       	ret

Disassembly of section .text.clear_sampling_data:

00005c66 <clear_sampling_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static void clear_sampling_data(){
	co2_pars.cntSamples=0;
    5c66:	ee e8       	ldi	r30, 0x8E	; 142
    5c68:	fe e0       	ldi	r31, 0x0E	; 14
    5c6a:	11 82       	std	Z+1, r1	; 0x01
	co2_pars.nSamples=0;
    5c6c:	10 82       	st	Z, r1
	co2_pars.samplingInterval=0;
    5c6e:	15 82       	std	Z+5, r1	; 0x05
    5c70:	14 82       	std	Z+4, r1	; 0x04
	co2_pars.data=NULL;
    5c72:	13 82       	std	Z+3, r1	; 0x03
    5c74:	12 82       	std	Z+2, r1	; 0x02
	
	temp_pars.cntSamples=0;
    5c76:	e8 e8       	ldi	r30, 0x88	; 136
    5c78:	fe e0       	ldi	r31, 0x0E	; 14
    5c7a:	11 82       	std	Z+1, r1	; 0x01
	temp_pars.nSamples=0;
    5c7c:	10 82       	st	Z, r1
	temp_pars.samplingInterval=0;
    5c7e:	15 82       	std	Z+5, r1	; 0x05
    5c80:	14 82       	std	Z+4, r1	; 0x04
	temp_pars.data=NULL;
    5c82:	13 82       	std	Z+3, r1	; 0x03
    5c84:	12 82       	std	Z+2, r1	; 0x02

	hum_pars.cntSamples=0;
    5c86:	e2 e8       	ldi	r30, 0x82	; 130
    5c88:	fe e0       	ldi	r31, 0x0E	; 14
    5c8a:	11 82       	std	Z+1, r1	; 0x01
	hum_pars.nSamples=0;
    5c8c:	10 82       	st	Z, r1
	hum_pars.samplingInterval=0;
    5c8e:	15 82       	std	Z+5, r1	; 0x05
    5c90:	14 82       	std	Z+4, r1	; 0x04
	hum_pars.data=NULL;
    5c92:	13 82       	std	Z+3, r1	; 0x03
    5c94:	12 82       	std	Z+2, r1	; 0x02
	
	lowest_si=0;
    5c96:	10 92 d8 0e 	sts	0x0ED8, r1	; 0x800ed8 <lowest_si+0x1>
    5c9a:	10 92 d7 0e 	sts	0x0ED7, r1	; 0x800ed7 <lowest_si>
	highest_si=0;
    5c9e:	10 92 d6 0e 	sts	0x0ED6, r1	; 0x800ed6 <highest_si+0x1>
    5ca2:	10 92 d5 0e 	sts	0x0ED5, r1	; 0x800ed5 <highest_si>
	si_counter=0;
    5ca6:	10 92 d4 0e 	sts	0x0ED4, r1	; 0x800ed4 <si_counter+0x1>
    5caa:	10 92 d3 0e 	sts	0x0ED3, r1	; 0x800ed3 <si_counter>
    5cae:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00005230 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[], uint8_t scale){
    5230:	cf 92       	push	r12
    5232:	df 92       	push	r13
    5234:	ef 92       	push	r14
    5236:	ff 92       	push	r15
    5238:	0f 93       	push	r16
    523a:	1f 93       	push	r17
    523c:	cf 93       	push	r28
    523e:	df 93       	push	r29
    5240:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	float value=(float) f.f *scale;
    5242:	04 81       	ldd	r16, Z+4	; 0x04
    5244:	13 81       	ldd	r17, Z+3	; 0x03
    5246:	d1 81       	ldd	r29, Z+1	; 0x01
    5248:	c0 81       	ld	r28, Z
    524a:	70 e0       	ldi	r23, 0x00	; 0
    524c:	80 e0       	ldi	r24, 0x00	; 0
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <__floatsisf>
    5254:	9b 01       	movw	r18, r22
    5256:	ac 01       	movw	r20, r24
    5258:	60 2f       	mov	r22, r16
    525a:	71 2f       	mov	r23, r17
    525c:	8d 2f       	mov	r24, r29
    525e:	9c 2f       	mov	r25, r28
    5260:	0e 94 2c 39 	call	0x7258	; 0x7258 <__mulsf3>
    5264:	6b 01       	movw	r12, r22
    5266:	7c 01       	movw	r14, r24
	if(value<0) return 0;
    5268:	20 e0       	ldi	r18, 0x00	; 0
    526a:	30 e0       	ldi	r19, 0x00	; 0
    526c:	a9 01       	movw	r20, r18
    526e:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <__cmpsf2>
    5272:	88 23       	and	r24, r24
    5274:	34 f0       	brlt	.+12     	; 0x5282 <bytes_2_uint+0x52>
	return (uint16_t) value;
    5276:	c7 01       	movw	r24, r14
    5278:	b6 01       	movw	r22, r12
    527a:	0e 94 0f 2a 	call	0x541e	; 0x541e <__fixunssfsi>
    527e:	cb 01       	movw	r24, r22
    5280:	02 c0       	rjmp	.+4      	; 0x5286 <bytes_2_uint+0x56>
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	float value=(float) f.f *scale;
	if(value<0) return 0;
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	90 e0       	ldi	r25, 0x00	; 0
	return (uint16_t) value;
}
    5286:	df 91       	pop	r29
    5288:	cf 91       	pop	r28
    528a:	1f 91       	pop	r17
    528c:	0f 91       	pop	r16
    528e:	ff 90       	pop	r15
    5290:	ef 90       	pop	r14
    5292:	df 90       	pop	r13
    5294:	cf 90       	pop	r12
    5296:	08 95       	ret

Disassembly of section .text.init_measurement:

00006348 <init_measurement>:
	si_counter=0;
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    6348:	25 e0       	ldi	r18, 0x05	; 5
    634a:	4a ee       	ldi	r20, 0xEA	; 234
    634c:	59 e0       	ldi	r21, 0x09	; 9
    634e:	60 e0       	ldi	r22, 0x00	; 0
    6350:	81 e6       	ldi	r24, 0x61	; 97
    6352:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    6356:	81 11       	cpse	r24, r1
    6358:	0f c0       	rjmp	.+30     	; 0x6378 <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    635a:	25 e0       	ldi	r18, 0x05	; 5
    635c:	4f ee       	ldi	r20, 0xEF	; 239
    635e:	59 e0       	ldi	r21, 0x09	; 9
    6360:	60 e0       	ldi	r22, 0x00	; 0
    6362:	81 e6       	ldi	r24, 0x61	; 97
    6364:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    6368:	81 11       	cpse	r24, r1
    636a:	08 c0       	rjmp	.+16     	; 0x637c <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    636c:	0e 94 c0 38 	call	0x7180	; 0x7180 <SCD30_HAL_data_ready>
    6370:	88 23       	and	r24, r24
    6372:	e1 f3       	breq	.-8      	; 0x636c <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    6374:	80 e0       	ldi	r24, 0x00	; 0
    6376:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    6378:	82 e0       	ldi	r24, 0x02	; 2
    637a:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    637c:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    637e:	08 95       	ret

Disassembly of section .text.validate_data:

000065c6 <validate_data>:
	*humidity=bytes_2_uint(&data[12], 10);
	
	return SCD30_STATUS_SUCCESS;
}

static bool validate_data(uint8_t data[]){
    65c6:	cf 93       	push	r28
    65c8:	df 93       	push	r29
    65ca:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    65cc:	62 e0       	ldi	r22, 0x02	; 2
    65ce:	0e 94 12 32 	call	0x6424	; 0x6424 <calc_crc8>
	if(data[2]!=crc) return false;
    65d2:	9a 81       	ldd	r25, Y+2	; 0x02
    65d4:	89 13       	cpse	r24, r25
    65d6:	0a c0       	rjmp	.+20     	; 0x65ec <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    65d8:	62 e0       	ldi	r22, 0x02	; 2
    65da:	ce 01       	movw	r24, r28
    65dc:	03 96       	adiw	r24, 0x03	; 3
    65de:	0e 94 12 32 	call	0x6424	; 0x6424 <calc_crc8>
	if(data[5]!=crc) return false;
    65e2:	9d 81       	ldd	r25, Y+5	; 0x05
    65e4:	89 17       	cp	r24, r25
    65e6:	21 f0       	breq	.+8      	; 0x65f0 <validate_data+0x2a>
    65e8:	80 e0       	ldi	r24, 0x00	; 0
    65ea:	03 c0       	rjmp	.+6      	; 0x65f2 <validate_data+0x2c>
	return SCD30_STATUS_SUCCESS;
}

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    65ec:	80 e0       	ldi	r24, 0x00	; 0
    65ee:	01 c0       	rjmp	.+2      	; 0x65f2 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    65f0:	81 e0       	ldi	r24, 0x01	; 1
}
    65f2:	df 91       	pop	r29
    65f4:	cf 91       	pop	r28
    65f6:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

0000698a <SCD30_sensor_on>:
/************************************************************************/
/* Definitions                                                          */
/************************************************************************/

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    698a:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    698e:	81 e0       	ldi	r24, 0x01	; 1
    6990:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <PM_HAL_SCD30_power>
    6994:	2f ef       	ldi	r18, 0xFF	; 255
    6996:	83 ed       	ldi	r24, 0xD3	; 211
    6998:	90 e3       	ldi	r25, 0x30	; 48
    699a:	21 50       	subi	r18, 0x01	; 1
    699c:	80 40       	sbci	r24, 0x00	; 0
    699e:	90 40       	sbci	r25, 0x00	; 0
    69a0:	e1 f7       	brne	.-8      	; 0x699a <SCD30_sensor_on+0x10>
    69a2:	00 c0       	rjmp	.+0      	; 0x69a4 <SCD30_sensor_on+0x1a>
    69a4:	00 00       	nop
	_delay_ms(2000);
	clear_sampling_data();
    69a6:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <clear_sampling_data>
	return init_measurement();
    69aa:	0e 94 a4 31 	call	0x6348	; 0x6348 <init_measurement>
}
    69ae:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

00007248 <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    7248:	80 e0       	ldi	r24, 0x00	; 0
    724a:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <PM_HAL_SCD30_power>
    724e:	08 95       	ret

Disassembly of section .text.SCD30_init_c02_sampling:

00006ee4 <SCD30_init_c02_sampling>:
}

void SCD30_init_c02_sampling(uint16_t samplingInterval, uint8_t nSamples, uint16_t data[]){
	co2_pars.cntSamples=0;
    6ee4:	ee e8       	ldi	r30, 0x8E	; 142
    6ee6:	fe e0       	ldi	r31, 0x0E	; 14
    6ee8:	11 82       	std	Z+1, r1	; 0x01
	co2_pars.nSamples=nSamples;
    6eea:	60 83       	st	Z, r22
	co2_pars.samplingInterval=samplingInterval;
    6eec:	95 83       	std	Z+5, r25	; 0x05
    6eee:	84 83       	std	Z+4, r24	; 0x04
	co2_pars.data=data;
    6ef0:	53 83       	std	Z+3, r21	; 0x03
    6ef2:	42 83       	std	Z+2, r20	; 0x02
    6ef4:	08 95       	ret

Disassembly of section .text.SCD30_init_temp_sampling:

00006ef6 <SCD30_init_temp_sampling>:
}

void SCD30_init_temp_sampling(uint16_t samplingInterval, uint8_t nSamples, uint16_t data[]){
	temp_pars.cntSamples=0;
    6ef6:	e8 e8       	ldi	r30, 0x88	; 136
    6ef8:	fe e0       	ldi	r31, 0x0E	; 14
    6efa:	11 82       	std	Z+1, r1	; 0x01
	temp_pars.nSamples=nSamples;
    6efc:	60 83       	st	Z, r22
	temp_pars.samplingInterval=samplingInterval;
    6efe:	95 83       	std	Z+5, r25	; 0x05
    6f00:	84 83       	std	Z+4, r24	; 0x04
	temp_pars.data=data;
    6f02:	53 83       	std	Z+3, r21	; 0x03
    6f04:	42 83       	std	Z+2, r20	; 0x02
    6f06:	08 95       	ret

Disassembly of section .text.SCD30_init_humidity_sampling:

00006f08 <SCD30_init_humidity_sampling>:
}

void SCD30_init_humidity_sampling(uint16_t samplingInterval, uint8_t nSamples, uint16_t data[]){
	hum_pars.cntSamples=0;
    6f08:	e2 e8       	ldi	r30, 0x82	; 130
    6f0a:	fe e0       	ldi	r31, 0x0E	; 14
    6f0c:	11 82       	std	Z+1, r1	; 0x01
	hum_pars.nSamples=nSamples;
    6f0e:	60 83       	st	Z, r22
	hum_pars.samplingInterval=samplingInterval;
    6f10:	95 83       	std	Z+5, r25	; 0x05
    6f12:	84 83       	std	Z+4, r24	; 0x04
	hum_pars.data=data;
    6f14:	53 83       	std	Z+3, r21	; 0x03
    6f16:	42 83       	std	Z+2, r20	; 0x02
    6f18:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

000071d0 <SCD30_deinit_sampling>:
	TC1_HAL_start();
	return true;
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    71d0:	0e 94 60 38 	call	0x70c0	; 0x70c0 <TC1_HAL_stop>
	clear_sampling_data();
    71d4:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <clear_sampling_data>
    71d8:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

000064fa <SCD30_is_sampling_done>:



bool SCD30_is_sampling_done(){
	return (
		co2_pars.nSamples==co2_pars.cntSamples && 
    64fa:	ee e8       	ldi	r30, 0x8E	; 142
    64fc:	fe e0       	ldi	r31, 0x0E	; 14
    64fe:	90 81       	ld	r25, Z
    6500:	81 81       	ldd	r24, Z+1	; 0x01
		temp_pars.nSamples==temp_pars.cntSamples && 
    6502:	98 13       	cpse	r25, r24
    6504:	0e c0       	rjmp	.+28     	; 0x6522 <SCD30_is_sampling_done+0x28>
    6506:	e8 e8       	ldi	r30, 0x88	; 136
    6508:	fe e0       	ldi	r31, 0x0E	; 14
    650a:	90 81       	ld	r25, Z
    650c:	81 81       	ldd	r24, Z+1	; 0x01



bool SCD30_is_sampling_done(){
	return (
		co2_pars.nSamples==co2_pars.cntSamples && 
    650e:	98 13       	cpse	r25, r24
    6510:	0a c0       	rjmp	.+20     	; 0x6526 <SCD30_is_sampling_done+0x2c>
		temp_pars.nSamples==temp_pars.cntSamples && 
		hum_pars.nSamples==hum_pars.cntSamples); 
    6512:	e2 e8       	ldi	r30, 0x82	; 130
    6514:	fe e0       	ldi	r31, 0x0E	; 14
    6516:	90 81       	ld	r25, Z
    6518:	81 81       	ldd	r24, Z+1	; 0x01


bool SCD30_is_sampling_done(){
	return (
		co2_pars.nSamples==co2_pars.cntSamples && 
		temp_pars.nSamples==temp_pars.cntSamples && 
    651a:	98 17       	cp	r25, r24
    651c:	31 f0       	breq	.+12     	; 0x652a <SCD30_is_sampling_done+0x30>
    651e:	80 e0       	ldi	r24, 0x00	; 0
    6520:	08 95       	ret
    6522:	80 e0       	ldi	r24, 0x00	; 0
    6524:	08 95       	ret
    6526:	80 e0       	ldi	r24, 0x00	; 0
    6528:	08 95       	ret
    652a:	81 e0       	ldi	r24, 0x01	; 1
		hum_pars.nSamples==hum_pars.cntSamples); 
}
    652c:	08 95       	ret

Disassembly of section .text.SCD30_calc_validate_SI:

00003d08 <SCD30_calc_validate_SI>:

bool SCD30_calc_validate_SI(uint16_t co2_SI, uint16_t temp_SI, uint16_t hum_SI, uint16_t *lowest, uint16_t *highest){
    3d08:	ef 92       	push	r14
    3d0a:	ff 92       	push	r15
    3d0c:	0f 93       	push	r16
    3d0e:	1f 93       	push	r17
    3d10:	cf 93       	push	r28
    3d12:	df 93       	push	r29
    3d14:	eb 01       	movw	r28, r22
    3d16:	7a 01       	movw	r14, r20
    3d18:	d9 01       	movw	r26, r18
    3d1a:	f8 01       	movw	r30, r16
	*highest=0;
    3d1c:	11 82       	std	Z+1, r1	; 0x01
    3d1e:	10 82       	st	Z, r1
	if(co2_SI>(*highest)){
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	11 f0       	breq	.+4      	; 0x3d28 <SCD30_calc_validate_SI+0x20>
		*highest=co2_SI;
    3d24:	91 83       	std	Z+1, r25	; 0x01
    3d26:	80 83       	st	Z, r24
	}
	if (temp_SI>(*highest)){
    3d28:	20 81       	ld	r18, Z
    3d2a:	31 81       	ldd	r19, Z+1	; 0x01
    3d2c:	2c 17       	cp	r18, r28
    3d2e:	3d 07       	cpc	r19, r29
    3d30:	10 f4       	brcc	.+4      	; 0x3d36 <SCD30_calc_validate_SI+0x2e>
		*highest=temp_SI;
    3d32:	d1 83       	std	Z+1, r29	; 0x01
    3d34:	c0 83       	st	Z, r28
	}
	if (hum_SI>(*highest)){
    3d36:	20 81       	ld	r18, Z
    3d38:	31 81       	ldd	r19, Z+1	; 0x01
    3d3a:	2e 15       	cp	r18, r14
    3d3c:	3f 05       	cpc	r19, r15
    3d3e:	10 f4       	brcc	.+4      	; 0x3d44 <SCD30_calc_validate_SI+0x3c>
		*highest=hum_SI;
    3d40:	f1 82       	std	Z+1, r15	; 0x01
    3d42:	e0 82       	st	Z, r14
	}
	*lowest=*highest;
    3d44:	20 81       	ld	r18, Z
    3d46:	31 81       	ldd	r19, Z+1	; 0x01
    3d48:	11 96       	adiw	r26, 0x01	; 1
    3d4a:	3c 93       	st	X, r19
    3d4c:	2e 93       	st	-X, r18
	if(co2_SI!=0 && co2_SI<(*lowest)){
    3d4e:	00 97       	sbiw	r24, 0x00	; 0
    3d50:	31 f0       	breq	.+12     	; 0x3d5e <SCD30_calc_validate_SI+0x56>
    3d52:	82 17       	cp	r24, r18
    3d54:	93 07       	cpc	r25, r19
    3d56:	18 f4       	brcc	.+6      	; 0x3d5e <SCD30_calc_validate_SI+0x56>
		*lowest=co2_SI;
    3d58:	11 96       	adiw	r26, 0x01	; 1
    3d5a:	9c 93       	st	X, r25
    3d5c:	8e 93       	st	-X, r24
	}
	if (temp_SI!=0 && temp_SI<(*lowest)){
    3d5e:	20 97       	sbiw	r28, 0x00	; 0
    3d60:	49 f0       	breq	.+18     	; 0x3d74 <SCD30_calc_validate_SI+0x6c>
    3d62:	2d 91       	ld	r18, X+
    3d64:	3c 91       	ld	r19, X
    3d66:	11 97       	sbiw	r26, 0x01	; 1
    3d68:	c2 17       	cp	r28, r18
    3d6a:	d3 07       	cpc	r29, r19
    3d6c:	18 f4       	brcc	.+6      	; 0x3d74 <SCD30_calc_validate_SI+0x6c>
		*lowest=temp_SI;
    3d6e:	11 96       	adiw	r26, 0x01	; 1
    3d70:	dc 93       	st	X, r29
    3d72:	ce 93       	st	-X, r28
	}
	if(hum_SI!=0 && hum_SI<(*lowest)){
    3d74:	e1 14       	cp	r14, r1
    3d76:	f1 04       	cpc	r15, r1
    3d78:	49 f0       	breq	.+18     	; 0x3d8c <SCD30_calc_validate_SI+0x84>
    3d7a:	2d 91       	ld	r18, X+
    3d7c:	3c 91       	ld	r19, X
    3d7e:	11 97       	sbiw	r26, 0x01	; 1
    3d80:	e2 16       	cp	r14, r18
    3d82:	f3 06       	cpc	r15, r19
    3d84:	18 f4       	brcc	.+6      	; 0x3d8c <SCD30_calc_validate_SI+0x84>
		*lowest=hum_SI;
    3d86:	11 96       	adiw	r26, 0x01	; 1
    3d88:	fc 92       	st	X, r15
    3d8a:	ee 92       	st	-X, r14
	}
	
	//Check that all sampling intervals are dividable with lowest si
	if(co2_SI % *lowest != 0) return false;
    3d8c:	2d 91       	ld	r18, X+
    3d8e:	3c 91       	ld	r19, X
    3d90:	b9 01       	movw	r22, r18
    3d92:	0e 94 b1 34 	call	0x6962	; 0x6962 <__udivmodhi4>
    3d96:	89 2b       	or	r24, r25
    3d98:	71 f4       	brne	.+28     	; 0x3db6 <SCD30_calc_validate_SI+0xae>
	if(temp_SI % *lowest != 0) return false;
    3d9a:	ce 01       	movw	r24, r28
    3d9c:	b9 01       	movw	r22, r18
    3d9e:	0e 94 b1 34 	call	0x6962	; 0x6962 <__udivmodhi4>
    3da2:	89 2b       	or	r24, r25
    3da4:	51 f4       	brne	.+20     	; 0x3dba <SCD30_calc_validate_SI+0xb2>
	if(hum_SI % *lowest != 0) return false;
    3da6:	c7 01       	movw	r24, r14
    3da8:	b9 01       	movw	r22, r18
    3daa:	0e 94 b1 34 	call	0x6962	; 0x6962 <__udivmodhi4>
    3dae:	89 2b       	or	r24, r25
    3db0:	31 f0       	breq	.+12     	; 0x3dbe <SCD30_calc_validate_SI+0xb6>
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	05 c0       	rjmp	.+10     	; 0x3dc0 <SCD30_calc_validate_SI+0xb8>
	if(hum_SI!=0 && hum_SI<(*lowest)){
		*lowest=hum_SI;
	}
	
	//Check that all sampling intervals are dividable with lowest si
	if(co2_SI % *lowest != 0) return false;
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	03 c0       	rjmp	.+6      	; 0x3dc0 <SCD30_calc_validate_SI+0xb8>
	if(temp_SI % *lowest != 0) return false;
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	01 c0       	rjmp	.+2      	; 0x3dc0 <SCD30_calc_validate_SI+0xb8>
	if(hum_SI % *lowest != 0) return false;
	return true;
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
}
    3dc0:	df 91       	pop	r29
    3dc2:	cf 91       	pop	r28
    3dc4:	1f 91       	pop	r17
    3dc6:	0f 91       	pop	r16
    3dc8:	ff 90       	pop	r15
    3dca:	ef 90       	pop	r14
    3dcc:	08 95       	ret

Disassembly of section .text.read_all_values:

000034a6 <read_all_values>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

SCD30_STATUS read_all_values(uint16_t *co2, uint16_t *temp, uint16_t *humidity){
    34a6:	cf 92       	push	r12
    34a8:	df 92       	push	r13
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	62 97       	sbiw	r28, 0x12	; 18
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	8c 01       	movw	r16, r24
    34c8:	7b 01       	movw	r14, r22
    34ca:	6a 01       	movw	r12, r20
	uint8_t status;
	uint8_t data[18];
	*co2=0xffff;
    34cc:	8f ef       	ldi	r24, 0xFF	; 255
    34ce:	9f ef       	ldi	r25, 0xFF	; 255
    34d0:	f8 01       	movw	r30, r16
    34d2:	91 83       	std	Z+1, r25	; 0x01
    34d4:	80 83       	st	Z, r24
	*temp=0xffff;
    34d6:	fb 01       	movw	r30, r22
    34d8:	91 83       	std	Z+1, r25	; 0x01
    34da:	80 83       	st	Z, r24
	*humidity=0xffff;
    34dc:	fa 01       	movw	r30, r20
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	80 83       	st	Z, r24
	
	//Check values are ready
	if(!SCD30_HAL_data_ready()){
    34e2:	0e 94 c0 38 	call	0x7180	; 0x7180 <SCD30_HAL_data_ready>
    34e6:	81 11       	cpse	r24, r1
    34e8:	0d c0       	rjmp	.+26     	; 0x3504 <read_all_values+0x5e>
		*co2=0xfffe;
    34ea:	8e ef       	ldi	r24, 0xFE	; 254
    34ec:	9f ef       	ldi	r25, 0xFF	; 255
    34ee:	f8 01       	movw	r30, r16
    34f0:	91 83       	std	Z+1, r25	; 0x01
    34f2:	80 83       	st	Z, r24
		*temp=0xfffe;
    34f4:	f7 01       	movw	r30, r14
    34f6:	91 83       	std	Z+1, r25	; 0x01
    34f8:	80 83       	st	Z, r24
		*humidity=0xfffe;
    34fa:	f6 01       	movw	r30, r12
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    3500:	83 e0       	ldi	r24, 0x03	; 3
    3502:	4d c0       	rjmp	.+154    	; 0x359e <read_all_values+0xf8>
	}
	
	//Set read pointer
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    3504:	22 e0       	ldi	r18, 0x02	; 2
    3506:	47 ef       	ldi	r20, 0xF7	; 247
    3508:	59 e0       	ldi	r21, 0x09	; 9
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	81 e6       	ldi	r24, 0x61	; 97
    350e:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3512:	81 11       	cpse	r24, r1
    3514:	3b c0       	rjmp	.+118    	; 0x358c <read_all_values+0xe6>
    3516:	8f e3       	ldi	r24, 0x3F	; 63
    3518:	9f e1       	ldi	r25, 0x1F	; 31
    351a:	01 97       	sbiw	r24, 0x01	; 1
    351c:	f1 f7       	brne	.-4      	; 0x351a <read_all_values+0x74>
    351e:	00 c0       	rjmp	.+0      	; 0x3520 <read_all_values+0x7a>
    3520:	00 00       	nop
	
	_delay_ms(4);
	
	//Read values
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 18);
    3522:	42 e1       	ldi	r20, 0x12	; 18
    3524:	be 01       	movw	r22, r28
    3526:	6f 5f       	subi	r22, 0xFF	; 255
    3528:	7f 4f       	sbci	r23, 0xFF	; 255
    352a:	81 e6       	ldi	r24, 0x61	; 97
    352c:	0e 94 b1 32 	call	0x6562	; 0x6562 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3530:	81 11       	cpse	r24, r1
    3532:	2e c0       	rjmp	.+92     	; 0x3590 <read_all_values+0xea>
	
	//Validate co2
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3534:	ce 01       	movw	r24, r28
    3536:	01 96       	adiw	r24, 0x01	; 1
    3538:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <validate_data>
    353c:	88 23       	and	r24, r24
    353e:	51 f1       	breq	.+84     	; 0x3594 <read_all_values+0xee>
	*co2=bytes_2_uint(data, 1);
    3540:	61 e0       	ldi	r22, 0x01	; 1
    3542:	ce 01       	movw	r24, r28
    3544:	01 96       	adiw	r24, 0x01	; 1
    3546:	0e 94 18 29 	call	0x5230	; 0x5230 <bytes_2_uint>
    354a:	f8 01       	movw	r30, r16
    354c:	91 83       	std	Z+1, r25	; 0x01
    354e:	80 83       	st	Z, r24
	
	//Validate temp
	if(!validate_data(&data[6])) return SCD30_STATUS_ERROR;
    3550:	ce 01       	movw	r24, r28
    3552:	07 96       	adiw	r24, 0x07	; 7
    3554:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <validate_data>
    3558:	88 23       	and	r24, r24
    355a:	f1 f0       	breq	.+60     	; 0x3598 <read_all_values+0xf2>
	*temp=bytes_2_uint(&data[6], 10);
    355c:	6a e0       	ldi	r22, 0x0A	; 10
    355e:	ce 01       	movw	r24, r28
    3560:	07 96       	adiw	r24, 0x07	; 7
    3562:	0e 94 18 29 	call	0x5230	; 0x5230 <bytes_2_uint>
    3566:	f7 01       	movw	r30, r14
    3568:	91 83       	std	Z+1, r25	; 0x01
    356a:	80 83       	st	Z, r24
	
	//Validate humidity
	if(!validate_data(&data[12])) return SCD30_STATUS_ERROR;
    356c:	ce 01       	movw	r24, r28
    356e:	0d 96       	adiw	r24, 0x0d	; 13
    3570:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <validate_data>
    3574:	88 23       	and	r24, r24
    3576:	91 f0       	breq	.+36     	; 0x359c <read_all_values+0xf6>
	*humidity=bytes_2_uint(&data[12], 10);
    3578:	6a e0       	ldi	r22, 0x0A	; 10
    357a:	ce 01       	movw	r24, r28
    357c:	0d 96       	adiw	r24, 0x0d	; 13
    357e:	0e 94 18 29 	call	0x5230	; 0x5230 <bytes_2_uint>
    3582:	f6 01       	movw	r30, r12
    3584:	91 83       	std	Z+1, r25	; 0x01
    3586:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	09 c0       	rjmp	.+18     	; 0x359e <read_all_values+0xf8>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	//Set read pointer
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	07 c0       	rjmp	.+14     	; 0x359e <read_all_values+0xf8>
	
	_delay_ms(4);
	
	//Read values
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 18);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	05 c0       	rjmp	.+10     	; 0x359e <read_all_values+0xf8>
	
	//Validate co2
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	03 c0       	rjmp	.+6      	; 0x359e <read_all_values+0xf8>
	*co2=bytes_2_uint(data, 1);
	
	//Validate temp
	if(!validate_data(&data[6])) return SCD30_STATUS_ERROR;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	01 c0       	rjmp	.+2      	; 0x359e <read_all_values+0xf8>
	*temp=bytes_2_uint(&data[6], 10);
	
	//Validate humidity
	if(!validate_data(&data[12])) return SCD30_STATUS_ERROR;
    359c:	81 e0       	ldi	r24, 0x01	; 1
	*humidity=bytes_2_uint(&data[12], 10);
	
	return SCD30_STATUS_SUCCESS;
}
    359e:	62 96       	adiw	r28, 0x12	; 18
    35a0:	0f b6       	in	r0, 0x3f	; 63
    35a2:	f8 94       	cli
    35a4:	de bf       	out	0x3e, r29	; 62
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	1f 91       	pop	r17
    35b0:	0f 91       	pop	r16
    35b2:	ff 90       	pop	r15
    35b4:	ef 90       	pop	r14
    35b6:	df 90       	pop	r13
    35b8:	cf 90       	pop	r12
    35ba:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00002c54 <vect_SCD_do_sample>:
}

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
    2c54:	1f 93       	push	r17
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <vect_SCD_do_sample+0x8>
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <vect_SCD_do_sample+0xa>
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <vect_SCD_do_sample+0xc>
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
	uint16_t co2, temp, humidity;
	
	read_all_values(&co2, &temp, &humidity);
    2c64:	ae 01       	movw	r20, r28
    2c66:	4b 5f       	subi	r20, 0xFB	; 251
    2c68:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6a:	be 01       	movw	r22, r28
    2c6c:	6d 5f       	subi	r22, 0xFD	; 253
    2c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c70:	ce 01       	movw	r24, r28
    2c72:	01 96       	adiw	r24, 0x01	; 1
    2c74:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <read_all_values>
	
	//Set values 
	if(co2_pars.cntSamples<co2_pars.nSamples &&  si_counter % co2_pars.samplingInterval==0){
    2c78:	ee e8       	ldi	r30, 0x8E	; 142
    2c7a:	fe e0       	ldi	r31, 0x0E	; 14
    2c7c:	21 81       	ldd	r18, Z+1	; 0x01
    2c7e:	30 81       	ld	r19, Z
    2c80:	23 17       	cp	r18, r19
    2c82:	d8 f4       	brcc	.+54     	; 0x2cba <vect_SCD_do_sample+0x66>
    2c84:	60 91 92 0e 	lds	r22, 0x0E92	; 0x800e92 <co2_pars+0x4>
    2c88:	70 91 93 0e 	lds	r23, 0x0E93	; 0x800e93 <co2_pars+0x5>
    2c8c:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <si_counter>
    2c90:	90 91 d4 0e 	lds	r25, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2c94:	0e 94 b1 34 	call	0x6962	; 0x6962 <__udivmodhi4>
    2c98:	89 2b       	or	r24, r25
    2c9a:	79 f4       	brne	.+30     	; 0x2cba <vect_SCD_do_sample+0x66>
		co2_pars.data[co2_pars.cntSamples++]=co2;
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	42 0f       	add	r20, r18
    2ca4:	41 83       	std	Z+1, r20	; 0x01
    2ca6:	e2 2f       	mov	r30, r18
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	ee 0f       	add	r30, r30
    2cac:	ff 1f       	adc	r31, r31
    2cae:	e8 0f       	add	r30, r24
    2cb0:	f9 1f       	adc	r31, r25
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	80 83       	st	Z, r24
	}
	if(temp_pars.cntSamples<temp_pars.nSamples &&  si_counter % temp_pars.samplingInterval==0){
    2cba:	e8 e8       	ldi	r30, 0x88	; 136
    2cbc:	fe e0       	ldi	r31, 0x0E	; 14
    2cbe:	21 81       	ldd	r18, Z+1	; 0x01
    2cc0:	40 81       	ld	r20, Z
    2cc2:	24 17       	cp	r18, r20
    2cc4:	d8 f4       	brcc	.+54     	; 0x2cfc <vect_SCD_do_sample+0xa8>
    2cc6:	60 91 8c 0e 	lds	r22, 0x0E8C	; 0x800e8c <temp_pars+0x4>
    2cca:	70 91 8d 0e 	lds	r23, 0x0E8D	; 0x800e8d <temp_pars+0x5>
    2cce:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <si_counter>
    2cd2:	90 91 d4 0e 	lds	r25, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2cd6:	0e 94 b1 34 	call	0x6962	; 0x6962 <__udivmodhi4>
    2cda:	89 2b       	or	r24, r25
    2cdc:	79 f4       	brne	.+30     	; 0x2cfc <vect_SCD_do_sample+0xa8>
		temp_pars.data[temp_pars.cntSamples++]=temp;
    2cde:	82 81       	ldd	r24, Z+2	; 0x02
    2ce0:	93 81       	ldd	r25, Z+3	; 0x03
    2ce2:	51 e0       	ldi	r21, 0x01	; 1
    2ce4:	52 0f       	add	r21, r18
    2ce6:	51 83       	std	Z+1, r21	; 0x01
    2ce8:	e2 2f       	mov	r30, r18
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	ee 0f       	add	r30, r30
    2cee:	ff 1f       	adc	r31, r31
    2cf0:	e8 0f       	add	r30, r24
    2cf2:	f9 1f       	adc	r31, r25
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	80 83       	st	Z, r24
	}
	if(hum_pars.cntSamples<hum_pars.nSamples &&  si_counter % hum_pars.samplingInterval==0){
    2cfc:	e2 e8       	ldi	r30, 0x82	; 130
    2cfe:	fe e0       	ldi	r31, 0x0E	; 14
    2d00:	21 81       	ldd	r18, Z+1	; 0x01
    2d02:	10 81       	ld	r17, Z
    2d04:	21 17       	cp	r18, r17
    2d06:	d8 f4       	brcc	.+54     	; 0x2d3e <vect_SCD_do_sample+0xea>
    2d08:	60 91 86 0e 	lds	r22, 0x0E86	; 0x800e86 <hum_pars+0x4>
    2d0c:	70 91 87 0e 	lds	r23, 0x0E87	; 0x800e87 <hum_pars+0x5>
    2d10:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <si_counter>
    2d14:	90 91 d4 0e 	lds	r25, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2d18:	0e 94 b1 34 	call	0x6962	; 0x6962 <__udivmodhi4>
    2d1c:	89 2b       	or	r24, r25
    2d1e:	79 f4       	brne	.+30     	; 0x2d3e <vect_SCD_do_sample+0xea>
		hum_pars.data[hum_pars.cntSamples++]=humidity;
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	93 81       	ldd	r25, Z+3	; 0x03
    2d24:	51 e0       	ldi	r21, 0x01	; 1
    2d26:	52 0f       	add	r21, r18
    2d28:	51 83       	std	Z+1, r21	; 0x01
    2d2a:	e2 2f       	mov	r30, r18
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	ee 0f       	add	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	e8 0f       	add	r30, r24
    2d34:	f9 1f       	adc	r31, r25
    2d36:	8d 81       	ldd	r24, Y+5	; 0x05
    2d38:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24
	}
	
	//Wrap si_counter if at max
	si_counter+=lowest_si;
    2d3e:	60 91 d3 0e 	lds	r22, 0x0ED3	; 0x800ed3 <si_counter>
    2d42:	70 91 d4 0e 	lds	r23, 0x0ED4	; 0x800ed4 <si_counter+0x1>
    2d46:	80 91 d7 0e 	lds	r24, 0x0ED7	; 0x800ed7 <lowest_si>
    2d4a:	90 91 d8 0e 	lds	r25, 0x0ED8	; 0x800ed8 <lowest_si+0x1>
    2d4e:	86 0f       	add	r24, r22
    2d50:	97 1f       	adc	r25, r23
    2d52:	90 93 d4 0e 	sts	0x0ED4, r25	; 0x800ed4 <si_counter+0x1>
    2d56:	80 93 d3 0e 	sts	0x0ED3, r24	; 0x800ed3 <si_counter>
	if(si_counter==highest_si){
    2d5a:	60 91 d5 0e 	lds	r22, 0x0ED5	; 0x800ed5 <highest_si>
    2d5e:	70 91 d6 0e 	lds	r23, 0x0ED6	; 0x800ed6 <highest_si+0x1>
    2d62:	86 17       	cp	r24, r22
    2d64:	97 07       	cpc	r25, r23
    2d66:	21 f4       	brne	.+8      	; 0x2d70 <vect_SCD_do_sample+0x11c>
		si_counter=0;
    2d68:	10 92 d4 0e 	sts	0x0ED4, r1	; 0x800ed4 <si_counter+0x1>
    2d6c:	10 92 d3 0e 	sts	0x0ED3, r1	; 0x800ed3 <si_counter>
	}
	
	//Stop sampling if all values are sampled
	if(
		co2_pars.cntSamples==co2_pars.nSamples && 
    2d70:	80 91 8f 0e 	lds	r24, 0x0E8F	; 0x800e8f <co2_pars+0x1>
	if(si_counter==highest_si){
		si_counter=0;
	}
	
	//Stop sampling if all values are sampled
	if(
    2d74:	38 13       	cpse	r19, r24
    2d76:	0a c0       	rjmp	.+20     	; 0x2d8c <vect_SCD_do_sample+0x138>
		co2_pars.cntSamples==co2_pars.nSamples && 
		temp_pars.cntSamples==temp_pars.nSamples &&
    2d78:	80 91 89 0e 	lds	r24, 0x0E89	; 0x800e89 <temp_pars+0x1>
		si_counter=0;
	}
	
	//Stop sampling if all values are sampled
	if(
		co2_pars.cntSamples==co2_pars.nSamples && 
    2d7c:	48 13       	cpse	r20, r24
    2d7e:	06 c0       	rjmp	.+12     	; 0x2d8c <vect_SCD_do_sample+0x138>
		temp_pars.cntSamples==temp_pars.nSamples &&
		hum_pars.cntSamples==hum_pars.nSamples
    2d80:	80 91 83 0e 	lds	r24, 0x0E83	; 0x800e83 <hum_pars+0x1>
	}
	
	//Stop sampling if all values are sampled
	if(
		co2_pars.cntSamples==co2_pars.nSamples && 
		temp_pars.cntSamples==temp_pars.nSamples &&
    2d84:	18 13       	cpse	r17, r24
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <vect_SCD_do_sample+0x138>
		hum_pars.cntSamples==hum_pars.nSamples
	){
		TC1_HAL_stop();			
    2d88:	0e 94 60 38 	call	0x70c0	; 0x70c0 <TC1_HAL_stop>
	}
}
    2d8c:	26 96       	adiw	r28, 0x06	; 6
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	1f 91       	pop	r17
    2d9e:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

000053c0 <SCD30_start_sampling>:
	hum_pars.nSamples=nSamples;
	hum_pars.samplingInterval=samplingInterval;
	hum_pars.data=data;
}

bool SCD30_start_sampling(){
    53c0:	0f 93       	push	r16
    53c2:	1f 93       	push	r17
    53c4:	cf 93       	push	r28
	//Calculate SIs
	bool valid=SCD30_calc_validate_SI(
    53c6:	40 91 86 0e 	lds	r20, 0x0E86	; 0x800e86 <hum_pars+0x4>
    53ca:	50 91 87 0e 	lds	r21, 0x0E87	; 0x800e87 <hum_pars+0x5>
    53ce:	60 91 8c 0e 	lds	r22, 0x0E8C	; 0x800e8c <temp_pars+0x4>
    53d2:	70 91 8d 0e 	lds	r23, 0x0E8D	; 0x800e8d <temp_pars+0x5>
    53d6:	05 ed       	ldi	r16, 0xD5	; 213
    53d8:	1e e0       	ldi	r17, 0x0E	; 14
    53da:	27 ed       	ldi	r18, 0xD7	; 215
    53dc:	3e e0       	ldi	r19, 0x0E	; 14
    53de:	80 91 92 0e 	lds	r24, 0x0E92	; 0x800e92 <co2_pars+0x4>
    53e2:	90 91 93 0e 	lds	r25, 0x0E93	; 0x800e93 <co2_pars+0x5>
    53e6:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <SCD30_calc_validate_SI>
	temp_pars.samplingInterval,
	hum_pars.samplingInterval,
	&lowest_si,
	&highest_si
	);
	if(!valid) return false;
    53ea:	88 23       	and	r24, r24
    53ec:	91 f0       	breq	.+36     	; 0x5412 <SCD30_start_sampling+0x52>
	
	//Wait for first sampling
	while(!SCD30_HAL_data_ready()){};
    53ee:	0e 94 c0 38 	call	0x7180	; 0x7180 <SCD30_HAL_data_ready>
    53f2:	c8 2f       	mov	r28, r24
    53f4:	88 23       	and	r24, r24
    53f6:	d9 f3       	breq	.-10     	; 0x53ee <SCD30_start_sampling+0x2e>
	
	//Set timer
	TC1_HAL_init(lowest_si, &vect_SCD_do_sample);
    53f8:	6a e2       	ldi	r22, 0x2A	; 42
    53fa:	76 e1       	ldi	r23, 0x16	; 22
    53fc:	80 91 d7 0e 	lds	r24, 0x0ED7	; 0x800ed7 <lowest_si>
    5400:	90 91 d8 0e 	lds	r25, 0x0ED8	; 0x800ed8 <lowest_si+0x1>
    5404:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <TC1_HAL_init>
	
	//Take first sampling
	vect_SCD_do_sample();
    5408:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <vect_SCD_do_sample>
	
	//Start timer
	TC1_HAL_start();
    540c:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <TC1_HAL_start>
	return true;
    5410:	01 c0       	rjmp	.+2      	; 0x5414 <SCD30_start_sampling+0x54>
	temp_pars.samplingInterval,
	hum_pars.samplingInterval,
	&lowest_si,
	&highest_si
	);
	if(!valid) return false;
    5412:	c0 e0       	ldi	r28, 0x00	; 0
	vect_SCD_do_sample();
	
	//Start timer
	TC1_HAL_start();
	return true;
}
    5414:	8c 2f       	mov	r24, r28
    5416:	cf 91       	pop	r28
    5418:	1f 91       	pop	r17
    541a:	0f 91       	pop	r16
    541c:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

000065f8 <SCD30_get_reading>:
	if(temp_SI % *lowest != 0) return false;
	if(hum_SI % *lowest != 0) return false;
	return true;
}

SCD30_STATUS SCD30_get_reading(uint16_t *co2, uint16_t *temp, uint16_t *humidity){
    65f8:	ef 92       	push	r14
    65fa:	ff 92       	push	r15
    65fc:	0f 93       	push	r16
    65fe:	1f 93       	push	r17
    6600:	cf 93       	push	r28
    6602:	df 93       	push	r29
    6604:	ec 01       	movw	r28, r24
    6606:	8b 01       	movw	r16, r22
    6608:	7a 01       	movw	r14, r20
	while(!SCD30_HAL_data_ready()){};
    660a:	0e 94 c0 38 	call	0x7180	; 0x7180 <SCD30_HAL_data_ready>
    660e:	88 23       	and	r24, r24
    6610:	e1 f3       	breq	.-8      	; 0x660a <SCD30_get_reading+0x12>
	
	return read_all_values(co2, temp, humidity);
    6612:	a7 01       	movw	r20, r14
    6614:	b8 01       	movw	r22, r16
    6616:	ce 01       	movw	r24, r28
    6618:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <read_all_values>
}
    661c:	df 91       	pop	r29
    661e:	cf 91       	pop	r28
    6620:	1f 91       	pop	r17
    6622:	0f 91       	pop	r16
    6624:	ff 90       	pop	r15
    6626:	ef 90       	pop	r14
    6628:	08 95       	ret

Disassembly of section .text.parse_cmd:

000067dc <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    67dc:	fc 01       	movw	r30, r24
    67de:	80 81       	ld	r24, Z
    67e0:	82 37       	cpi	r24, 0x72	; 114
    67e2:	51 f0       	breq	.+20     	; 0x67f8 <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    67e4:	87 37       	cpi	r24, 0x77	; 119
    67e6:	51 f0       	breq	.+20     	; 0x67fc <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    67e8:	83 36       	cpi	r24, 0x63	; 99
    67ea:	51 f0       	breq	.+20     	; 0x6800 <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    67ec:	83 37       	cpi	r24, 0x73	; 115
    67ee:	51 f0       	breq	.+20     	; 0x6804 <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    67f0:	81 37       	cpi	r24, 0x71	; 113
    67f2:	51 f4       	brne	.+20     	; 0x6808 <parse_cmd+0x2c>
    67f4:	84 e0       	ldi	r24, 0x04	; 4
    67f6:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    67f8:	87 e0       	ldi	r24, 0x07	; 7
    67fa:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    67fc:	88 e0       	ldi	r24, 0x08	; 8
    67fe:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    6800:	89 e0       	ldi	r24, 0x09	; 9
    6802:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    6804:	8a e0       	ldi	r24, 0x0A	; 10
    6806:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    6808:	85 e0       	ldi	r24, 0x05	; 5
}
    680a:	08 95       	ret

Disassembly of section .text.validate_cmd:

00005692 <validate_cmd>:

static bool validate_cmd(char msg[]){
    5692:	cf 93       	push	r28
    5694:	df 93       	push	r29
    5696:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    5698:	bc 01       	movw	r22, r24
    569a:	80 e8       	ldi	r24, 0x80	; 128
    569c:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    56a0:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    56a2:	fc 01       	movw	r30, r24
    56a4:	31 97       	sbiw	r30, 0x01	; 1
    56a6:	ec 0f       	add	r30, r28
    56a8:	fd 1f       	adc	r31, r29
    56aa:	80 81       	ld	r24, Z
    56ac:	80 32       	cpi	r24, 0x20	; 32
    56ae:	b1 f0       	breq	.+44     	; 0x56dc <validate_cmd+0x4a>
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	40 e0       	ldi	r20, 0x00	; 0
    56b6:	0d c0       	rjmp	.+26     	; 0x56d2 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    56b8:	fe 01       	movw	r30, r28
    56ba:	e2 0f       	add	r30, r18
    56bc:	f3 1f       	adc	r31, r19
    56be:	90 81       	ld	r25, Z
    56c0:	90 32       	cpi	r25, 0x20	; 32
    56c2:	21 f4       	brne	.+8      	; 0x56cc <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    56c4:	41 11       	cpse	r20, r1
    56c6:	0c c0       	rjmp	.+24     	; 0x56e0 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    56c8:	41 e0       	ldi	r20, 0x01	; 1
    56ca:	01 c0       	rjmp	.+2      	; 0x56ce <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    56cc:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    56ce:	2f 5f       	subi	r18, 0xFF	; 255
    56d0:	3f 4f       	sbci	r19, 0xFF	; 255
    56d2:	26 17       	cp	r18, r22
    56d4:	37 07       	cpc	r19, r23
    56d6:	80 f3       	brcs	.-32     	; 0x56b8 <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    56d8:	81 e0       	ldi	r24, 0x01	; 1
    56da:	03 c0       	rjmp	.+6      	; 0x56e2 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    56dc:	80 e0       	ldi	r24, 0x00	; 0
    56de:	01 c0       	rjmp	.+2      	; 0x56e2 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    56e0:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    56e2:	df 91       	pop	r29
    56e4:	cf 91       	pop	r28
    56e6:	08 95       	ret

Disassembly of section .text.CONF_enter:

00002ee0 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    2ee0:	cf 93       	push	r28
	uart1_hal_init();
    2ee2:	0e 94 bd 30 	call	0x617a	; 0x617a <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    2ee6:	c0 e0       	ldi	r28, 0x00	; 0
    2ee8:	0d c0       	rjmp	.+26     	; 0x2f04 <CONF_enter+0x24>
				TC2_HAL_init();
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    2eea:	c2 e0       	ldi	r28, 0x02	; 2
    2eec:	0b c0       	rjmp	.+22     	; 0x2f04 <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    2eee:	c5 e0       	ldi	r28, 0x05	; 5
    2ef0:	09 c0       	rjmp	.+18     	; 0x2f04 <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    2ef2:	c6 e0       	ldi	r28, 0x06	; 6
    2ef4:	07 c0       	rjmp	.+14     	; 0x2f04 <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2ef6:	c5 e0       	ldi	r28, 0x05	; 5
    2ef8:	05 c0       	rjmp	.+10     	; 0x2f04 <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2efa:	c5 e0       	ldi	r28, 0x05	; 5
    2efc:	03 c0       	rjmp	.+6      	; 0x2f04 <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    2efe:	c5 e0       	ldi	r28, 0x05	; 5
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    2f02:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    2f04:	ec 2f       	mov	r30, r28
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	ec 30       	cpi	r30, 0x0C	; 12
    2f0a:	f1 05       	cpc	r31, r1
    2f0c:	d8 f7       	brcc	.-10     	; 0x2f04 <CONF_enter+0x24>
    2f0e:	e5 5b       	subi	r30, 0xB5	; 181
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	0c 94 b4 38 	jmp	0x7168	; 0x7168 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    2f16:	6f e9       	ldi	r22, 0x9F	; 159
    2f18:	77 e0       	ldi	r23, 0x07	; 7
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    2f20:	65 ec       	ldi	r22, 0xC5	; 197
    2f22:	77 e0       	ldi	r23, 0x07	; 7
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				TC2_HAL_init();
    2f2a:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <TC2_HAL_init>
				if(!init_methane_SCD30()){
    2f2e:	0e 94 9d 34 	call	0x693a	; 0x693a <init_methane_SCD30>
    2f32:	81 11       	cpse	r24, r1
    2f34:	da cf       	rjmp	.-76     	; 0x2eea <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    2f36:	67 ee       	ldi	r22, 0xE7	; 231
    2f38:	77 e0       	ldi	r23, 0x07	; 7
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
					state=CONF_EXIT;
    2f40:	c4 e0       	ldi	r28, 0x04	; 4
    2f42:	e0 cf       	rjmp	.-64     	; 0x2f04 <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    2f44:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <uart1_hal_message_ready>
    2f48:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    2f4a:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    2f4c:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <uart1_hal_rx_full>
    2f50:	81 11       	cpse	r24, r1
    2f52:	cd cf       	rjmp	.-102    	; 0x2eee <CONF_enter+0xe>
    2f54:	d7 cf       	rjmp	.-82     	; 0x2f04 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    2f56:	82 e7       	ldi	r24, 0x72	; 114
    2f58:	97 e0       	ldi	r25, 0x07	; 7
    2f5a:	0e 94 89 34 	call	0x6912	; 0x6912 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    2f5e:	82 e7       	ldi	r24, 0x72	; 114
    2f60:	97 e0       	ldi	r25, 0x07	; 7
    2f62:	0e 94 49 2b 	call	0x5692	; 0x5692 <validate_cmd>
    2f66:	88 23       	and	r24, r24
    2f68:	21 f2       	breq	.-120    	; 0x2ef2 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    2f6a:	82 e7       	ldi	r24, 0x72	; 114
    2f6c:	97 e0       	ldi	r25, 0x07	; 7
    2f6e:	0e 94 ee 33 	call	0x67dc	; 0x67dc <parse_cmd>
    2f72:	c8 2f       	mov	r28, r24
    2f74:	c7 cf       	rjmp	.-114    	; 0x2f04 <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    2f76:	62 e7       	ldi	r22, 0x72	; 114
    2f78:	77 e0       	ldi	r23, 0x07	; 7
    2f7a:	80 e8       	ldi	r24, 0x80	; 128
    2f7c:	4a ea       	ldi	r20, 0xAA	; 170
    2f7e:	56 e0       	ldi	r21, 0x06	; 6
    2f80:	0e 94 01 0c 	call	0x1802	; 0x1802 <handle_read>
    2f84:	88 23       	and	r24, r24
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <CONF_enter+0xaa>
    2f88:	b6 cf       	rjmp	.-148    	; 0x2ef6 <CONF_enter+0x16>
					state=CONF_REPLY;
    2f8a:	cb e0       	ldi	r28, 0x0B	; 11
    2f8c:	bb cf       	rjmp	.-138    	; 0x2f04 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    2f8e:	62 e7       	ldi	r22, 0x72	; 114
    2f90:	77 e0       	ldi	r23, 0x07	; 7
    2f92:	80 e8       	ldi	r24, 0x80	; 128
    2f94:	4a ea       	ldi	r20, 0xAA	; 170
    2f96:	56 e0       	ldi	r21, 0x06	; 6
    2f98:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <handle_write>
    2f9c:	88 23       	and	r24, r24
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <CONF_enter+0xc2>
    2fa0:	ac cf       	rjmp	.-168    	; 0x2efa <CONF_enter+0x1a>
					state=CONF_REPLY;
    2fa2:	cb e0       	ldi	r28, 0x0B	; 11
    2fa4:	af cf       	rjmp	.-162    	; 0x2f04 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    2fa6:	62 e7       	ldi	r22, 0x72	; 114
    2fa8:	77 e0       	ldi	r23, 0x07	; 7
    2faa:	80 e8       	ldi	r24, 0x80	; 128
    2fac:	0e 94 9e 2b 	call	0x573c	; 0x573c <CONNECT>
    2fb0:	88 23       	and	r24, r24
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <CONF_enter+0xd6>
    2fb4:	a4 cf       	rjmp	.-184    	; 0x2efe <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    2fb6:	c2 e0       	ldi	r28, 0x02	; 2
    2fb8:	a5 cf       	rjmp	.-182    	; 0x2f04 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sensor(cnf_rx_cmd, cnf_reply)){
    2fba:	62 e7       	ldi	r22, 0x72	; 114
    2fbc:	77 e0       	ldi	r23, 0x07	; 7
    2fbe:	80 e8       	ldi	r24, 0x80	; 128
    2fc0:	4a ea       	ldi	r20, 0xAA	; 170
    2fc2:	56 e0       	ldi	r21, 0x06	; 6
    2fc4:	0e 94 04 20 	call	0x4008	; 0x4008 <handle_sensor>
    2fc8:	88 23       	and	r24, r24
    2fca:	09 f4       	brne	.+2      	; 0x2fce <CONF_enter+0xee>
    2fcc:	9a cf       	rjmp	.-204    	; 0x2f02 <CONF_enter+0x22>
					state=CONF_REPLY;
    2fce:	cb e0       	ldi	r28, 0x0B	; 11
    2fd0:	99 cf       	rjmp	.-206    	; 0x2f04 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    2fd2:	6a ea       	ldi	r22, 0xAA	; 170
    2fd4:	76 e0       	ldi	r23, 0x06	; 6
    2fd6:	80 e8       	ldi	r24, 0x80	; 128
    2fd8:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2fdc:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2fde:	92 cf       	rjmp	.-220    	; 0x2f04 <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    2fe0:	66 e0       	ldi	r22, 0x06	; 6
    2fe2:	78 e0       	ldi	r23, 0x08	; 8
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2fea:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2fec:	8b cf       	rjmp	.-234    	; 0x2f04 <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    2fee:	60 e1       	ldi	r22, 0x10	; 16
    2ff0:	78 e0       	ldi	r23, 0x08	; 8
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    2ff8:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    2ffa:	84 cf       	rjmp	.-248    	; 0x2f04 <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    2ffc:	0e 94 cf 38 	call	0x719e	; 0x719e <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    3000:	6d e1       	ldi	r22, 0x1D	; 29
    3002:	78 e0       	ldi	r23, 0x08	; 8
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    300a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    300c:	7b cf       	rjmp	.-266    	; 0x2f04 <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    300e:	63 e4       	ldi	r22, 0x43	; 67
    3010:	78 e0       	ldi	r23, 0x08	; 8
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				return;
		}
	}
}
    3018:	cf 91       	pop	r28
    301a:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

0000508a <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    508a:	cf 92       	push	r12
    508c:	df 92       	push	r13
    508e:	ef 92       	push	r14
    5090:	0f 93       	push	r16
    5092:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    5094:	6c 01       	movw	r12, r24
    5096:	20 e8       	ldi	r18, 0x80	; 128
    5098:	e2 2e       	mov	r14, r18
    509a:	04 e0       	ldi	r16, 0x04	; 4
    509c:	10 e0       	ldi	r17, 0x00	; 0
    509e:	2b e4       	ldi	r18, 0x4B	; 75
    50a0:	38 e0       	ldi	r19, 0x08	; 8
    50a2:	40 e0       	ldi	r20, 0x00	; 0
    50a4:	8e 2d       	mov	r24, r14
    50a6:	b6 01       	movw	r22, r12
    50a8:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <strncmp>
    50ac:	89 2b       	or	r24, r25
    50ae:	c1 f0       	breq	.+48     	; 0x50e0 <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    50b0:	05 e0       	ldi	r16, 0x05	; 5
    50b2:	10 e0       	ldi	r17, 0x00	; 0
    50b4:	20 e5       	ldi	r18, 0x50	; 80
    50b6:	38 e0       	ldi	r19, 0x08	; 8
    50b8:	40 e0       	ldi	r20, 0x00	; 0
    50ba:	8e 2d       	mov	r24, r14
    50bc:	b6 01       	movw	r22, r12
    50be:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <strncmp>
    50c2:	89 2b       	or	r24, r25
    50c4:	79 f0       	breq	.+30     	; 0x50e4 <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    50c6:	04 e0       	ldi	r16, 0x04	; 4
    50c8:	10 e0       	ldi	r17, 0x00	; 0
    50ca:	26 e5       	ldi	r18, 0x56	; 86
    50cc:	38 e0       	ldi	r19, 0x08	; 8
    50ce:	40 e0       	ldi	r20, 0x00	; 0
    50d0:	8e 2d       	mov	r24, r14
    50d2:	b6 01       	movw	r22, r12
    50d4:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <strncmp>
    50d8:	89 2b       	or	r24, r25
    50da:	31 f4       	brne	.+12     	; 0x50e8 <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    50dc:	85 e0       	ldi	r24, 0x05	; 5
    50de:	05 c0       	rjmp	.+10     	; 0x50ea <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    50e0:	86 e0       	ldi	r24, 0x06	; 6
    50e2:	03 c0       	rjmp	.+6      	; 0x50ea <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    50e4:	84 e0       	ldi	r24, 0x04	; 4
    50e6:	01 c0       	rjmp	.+2      	; 0x50ea <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    50e8:	83 e0       	ldi	r24, 0x03	; 3
    50ea:	1f 91       	pop	r17
    50ec:	0f 91       	pop	r16
    50ee:	ef 90       	pop	r14
    50f0:	df 90       	pop	r13
    50f2:	cf 90       	pop	r12
    50f4:	08 95       	ret

Disassembly of section .text.CON_RN2483:

000026e2 <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    26e2:	6f 92       	push	r6
    26e4:	7f 92       	push	r7
    26e6:	8f 92       	push	r8
    26e8:	cf 92       	push	r12
    26ea:	df 92       	push	r13
    26ec:	ef 92       	push	r14
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    26f2:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    26f4:	ec 2f       	mov	r30, r28
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	e7 30       	cpi	r30, 0x07	; 7
    26fa:	f1 05       	cpc	r31, r1
    26fc:	d8 f7       	brcc	.-10     	; 0x26f4 <CON_RN2483+0x12>
    26fe:	e9 5a       	subi	r30, 0xA9	; 169
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	0c 94 b4 38 	jmp	0x7168	; 0x7168 <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    2706:	0e 94 9f 30 	call	0x613e	; 0x613e <uart0_hal_init>
				rn2483_init();
    270a:	0e 94 00 39 	call	0x7200	; 0x7200 <rn2483_init>
				LM_reset_module();
    270e:	0e 94 43 39 	call	0x7286	; 0x7286 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    2712:	6b e5       	ldi	r22, 0x5B	; 91
    2714:	78 e0       	ldi	r23, 0x08	; 8
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				state=CL_READ_MSG;
    271c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    271e:	ea cf       	rjmp	.-44     	; 0x26f4 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    2720:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <uart1_hal_message_ready>
    2724:	88 23       	and	r24, r24
    2726:	31 f3       	breq	.-52     	; 0x26f4 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    2728:	82 e7       	ldi	r24, 0x72	; 114
    272a:	97 e0       	ldi	r25, 0x07	; 7
    272c:	0e 94 89 34 	call	0x6912	; 0x6912 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    2730:	c2 e0       	ldi	r28, 0x02	; 2
    2732:	e0 cf       	rjmp	.-64     	; 0x26f4 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    2734:	82 e7       	ldi	r24, 0x72	; 114
    2736:	97 e0       	ldi	r25, 0x07	; 7
    2738:	0e 94 45 28 	call	0x508a	; 0x508a <CON_RN2483_parse>
    273c:	c8 2f       	mov	r28, r24
			break;
    273e:	da cf       	rjmp	.-76     	; 0x26f4 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    2740:	82 e7       	ldi	r24, 0x72	; 114
    2742:	97 e0       	ldi	r25, 0x07	; 7
    2744:	6c 01       	movw	r12, r24
    2746:	20 e8       	ldi	r18, 0x80	; 128
    2748:	e2 2e       	mov	r14, r18
    274a:	2f 93       	push	r18
    274c:	df 92       	push	r13
    274e:	8f 93       	push	r24
    2750:	81 e9       	ldi	r24, 0x91	; 145
    2752:	98 e0       	ldi	r25, 0x08	; 8
    2754:	a0 e0       	ldi	r26, 0x00	; 0
    2756:	af 93       	push	r26
    2758:	9f 93       	push	r25
    275a:	8f 93       	push	r24
    275c:	ca ea       	ldi	r28, 0xAA	; 170
    275e:	d6 e0       	ldi	r29, 0x06	; 6
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
				uart1_hal_send_string(cnf_reply);
    2768:	3e 01       	movw	r6, r28
    276a:	20 e8       	ldi	r18, 0x80	; 128
    276c:	82 2e       	mov	r8, r18
    276e:	88 2d       	mov	r24, r8
    2770:	b3 01       	movw	r22, r6
    2772:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    2776:	ae 01       	movw	r20, r28
    2778:	6c 2d       	mov	r22, r12
    277a:	7d 2d       	mov	r23, r13
    277c:	8e 2d       	mov	r24, r14
    277e:	0e 94 46 39 	call	0x728c	; 0x728c <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    2782:	88 2d       	mov	r24, r8
    2784:	b3 01       	movw	r22, r6
    2786:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    278a:	8d b7       	in	r24, 0x3d	; 61
    278c:	9e b7       	in	r25, 0x3e	; 62
    278e:	08 96       	adiw	r24, 0x08	; 8
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	9e bf       	out	0x3e, r25	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    279a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    279c:	ab cf       	rjmp	.-170    	; 0x26f4 <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    279e:	87 e9       	ldi	r24, 0x97	; 151
    27a0:	98 e0       	ldi	r25, 0x08	; 8
    27a2:	a0 e0       	ldi	r26, 0x00	; 0
    27a4:	af 93       	push	r26
    27a6:	9f 93       	push	r25
    27a8:	8f 93       	push	r24
    27aa:	81 e9       	ldi	r24, 0x91	; 145
    27ac:	98 e0       	ldi	r25, 0x08	; 8
    27ae:	a0 e0       	ldi	r26, 0x00	; 0
    27b0:	af 93       	push	r26
    27b2:	9f 93       	push	r25
    27b4:	8f 93       	push	r24
    27b6:	ca ea       	ldi	r28, 0xAA	; 170
    27b8:	d6 e0       	ldi	r29, 0x06	; 6
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
				uart1_hal_send_string(cnf_reply);
    27c2:	be 01       	movw	r22, r28
    27c4:	80 e8       	ldi	r24, 0x80	; 128
    27c6:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
    27ca:	8f e7       	ldi	r24, 0x7F	; 127
    27cc:	98 e3       	ldi	r25, 0x38	; 56
    27ce:	21 e0       	ldi	r18, 0x01	; 1
    27d0:	81 50       	subi	r24, 0x01	; 1
    27d2:	90 40       	sbci	r25, 0x00	; 0
    27d4:	20 40       	sbci	r18, 0x00	; 0
    27d6:	e1 f7       	brne	.-8      	; 0x27d0 <CON_RN2483+0xee>
    27d8:	00 c0       	rjmp	.+0      	; 0x27da <CON_RN2483+0xf8>
    27da:	00 00       	nop
				_delay_ms(50);
				LM_send_break();
    27dc:	0e 94 49 39 	call	0x7292	; 0x7292 <LM_send_break>
				state=CL_READ_MSG;
			break;
    27e0:	8d b7       	in	r24, 0x3d	; 61
    27e2:	9e b7       	in	r25, 0x3e	; 62
    27e4:	08 96       	adiw	r24, 0x08	; 8
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	9e bf       	out	0x3e, r25	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	8d bf       	out	0x3d, r24	; 61
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break();
				state=CL_READ_MSG;
    27f0:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    27f2:	80 cf       	rjmp	.-256    	; 0x26f4 <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    27f4:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <uart0_hal_message_ready>
    27f8:	88 23       	and	r24, r24
    27fa:	29 f0       	breq	.+10     	; 0x2806 <CON_RN2483+0x124>
					uart0_hal_read_message_as_str(cnf_reply);
    27fc:	8a ea       	ldi	r24, 0xAA	; 170
    27fe:	96 e0       	ldi	r25, 0x06	; 6
    2800:	0e 94 75 34 	call	0x68ea	; 0x68ea <uart0_hal_read_message_as_str>
    2804:	09 c0       	rjmp	.+18     	; 0x2818 <CON_RN2483+0x136>
				}else{
					strcpy(cnf_reply, "null");
    2806:	25 e0       	ldi	r18, 0x05	; 5
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	42 ea       	ldi	r20, 0xA2	; 162
    280c:	58 e0       	ldi	r21, 0x08	; 8
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	8a ea       	ldi	r24, 0xAA	; 170
    2812:	96 e0       	ldi	r25, 0x06	; 6
    2814:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    2818:	6a ea       	ldi	r22, 0xAA	; 170
    281a:	76 e0       	ldi	r23, 0x06	; 6
    281c:	80 e8       	ldi	r24, 0x80	; 128
    281e:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				state=CL_READ_MSG;
    2822:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2824:	67 cf       	rjmp	.-306    	; 0x26f4 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    2826:	0e 94 ca 38 	call	0x7194	; 0x7194 <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    282a:	67 ea       	ldi	r22, 0xA7	; 167
    282c:	78 e0       	ldi	r23, 0x08	; 8
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	ef 90       	pop	r14
    283c:	df 90       	pop	r13
    283e:	cf 90       	pop	r12
    2840:	8f 90       	pop	r8
    2842:	7f 90       	pop	r7
    2844:	6f 90       	pop	r6
    2846:	08 95       	ret

Disassembly of section .text.CONNECT:

0000573c <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    573c:	cf 93       	push	r28
    573e:	df 93       	push	r29
    5740:	cd b7       	in	r28, 0x3d	; 61
    5742:	de b7       	in	r29, 0x3e	; 62
    5744:	64 97       	sbiw	r28, 0x14	; 20
    5746:	0f b6       	in	r0, 0x3f	; 63
    5748:	f8 94       	cli
    574a:	de bf       	out	0x3e, r29	; 62
    574c:	0f be       	out	0x3f, r0	; 63
    574e:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    5750:	21 e0       	ldi	r18, 0x01	; 1
    5752:	ae 01       	movw	r20, r28
    5754:	4f 5f       	subi	r20, 0xFF	; 255
    5756:	5f 4f       	sbci	r21, 0xFF	; 255
    5758:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    575c:	88 23       	and	r24, r24
    575e:	79 f0       	breq	.+30     	; 0x577e <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    5760:	be 01       	movw	r22, r28
    5762:	6f 5f       	subi	r22, 0xFF	; 255
    5764:	7f 4f       	sbci	r23, 0xFF	; 255
    5766:	80 e8       	ldi	r24, 0x80	; 128
    5768:	27 ec       	ldi	r18, 0xC7	; 199
    576a:	38 e0       	ldi	r19, 0x08	; 8
    576c:	40 e0       	ldi	r20, 0x00	; 0
    576e:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    5772:	89 2b       	or	r24, r25
    5774:	19 f4       	brne	.+6      	; 0x577c <CONNECT+0x40>
		return CON_RN2483();
    5776:	0e 94 71 13 	call	0x26e2	; 0x26e2 <CON_RN2483>
    577a:	01 c0       	rjmp	.+2      	; 0x577e <CONNECT+0x42>
	}else{
		return false;
    577c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    577e:	64 96       	adiw	r28, 0x14	; 20
    5780:	0f b6       	in	r0, 0x3f	; 63
    5782:	f8 94       	cli
    5784:	de bf       	out	0x3e, r29	; 62
    5786:	0f be       	out	0x3f, r0	; 63
    5788:	cd bf       	out	0x3d, r28	; 61
    578a:	df 91       	pop	r29
    578c:	cf 91       	pop	r28
    578e:	08 95       	ret

Disassembly of section .text.read_cols:

00003e90 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    3e90:	ff 92       	push	r15
    3e92:	0f 93       	push	r16
    3e94:	1f 93       	push	r17
    3e96:	cf 93       	push	r28
    3e98:	df 93       	push	r29
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
    3e9e:	cb 54       	subi	r28, 0x4B	; 75
    3ea0:	d1 09       	sbc	r29, r1
    3ea2:	0f b6       	in	r0, 0x3f	; 63
    3ea4:	f8 94       	cli
    3ea6:	de bf       	out	0x3e, r29	; 62
    3ea8:	0f be       	out	0x3f, r0	; 63
    3eaa:	cd bf       	out	0x3d, r28	; 61
    3eac:	8c 01       	movw	r16, r24
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    3eae:	6b e4       	ldi	r22, 0x4B	; 75
    3eb0:	ce 01       	movw	r24, r28
    3eb2:	01 96       	adiw	r24, 0x01	; 1
    3eb4:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <EM_get_collections>
	strcpy(res, "End of collections");
    3eb8:	23 e1       	ldi	r18, 0x13	; 19
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	41 ea       	ldi	r20, 0xA1	; 161
    3ebe:	54 e0       	ldi	r21, 0x04	; 4
    3ec0:	60 e0       	ldi	r22, 0x00	; 0
    3ec2:	c8 01       	movw	r24, r16
    3ec4:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    3ec8:	f1 2c       	mov	r15, r1
    3eca:	30 c0       	rjmp	.+96     	; 0x3f2c <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u", i+1, cols[i].samplings, cols[i].samplingInterval);
    3ecc:	8f 2d       	mov	r24, r15
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	ee 0f       	add	r30, r30
    3ed4:	ff 1f       	adc	r31, r31
    3ed6:	ee 0f       	add	r30, r30
    3ed8:	ff 1f       	adc	r31, r31
    3eda:	e8 0f       	add	r30, r24
    3edc:	f9 1f       	adc	r31, r25
    3ede:	21 e0       	ldi	r18, 0x01	; 1
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	2c 0f       	add	r18, r28
    3ee4:	3d 1f       	adc	r19, r29
    3ee6:	e2 0f       	add	r30, r18
    3ee8:	f3 1f       	adc	r31, r19
    3eea:	23 81       	ldd	r18, Z+3	; 0x03
    3eec:	2f 93       	push	r18
    3eee:	22 81       	ldd	r18, Z+2	; 0x02
    3ef0:	2f 93       	push	r18
    3ef2:	21 81       	ldd	r18, Z+1	; 0x01
    3ef4:	2f 93       	push	r18
    3ef6:	20 81       	ld	r18, Z
    3ef8:	2f 93       	push	r18
    3efa:	01 96       	adiw	r24, 0x01	; 1
    3efc:	9f 93       	push	r25
    3efe:	8f 93       	push	r24
    3f00:	84 eb       	ldi	r24, 0xB4	; 180
    3f02:	94 e0       	ldi	r25, 0x04	; 4
    3f04:	a0 e0       	ldi	r26, 0x00	; 0
    3f06:	af 93       	push	r26
    3f08:	9f 93       	push	r25
    3f0a:	8f 93       	push	r24
    3f0c:	0b e3       	ldi	r16, 0x3B	; 59
    3f0e:	1d e0       	ldi	r17, 0x0D	; 13
    3f10:	1f 93       	push	r17
    3f12:	0f 93       	push	r16
    3f14:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
		uart1_hal_send_string(arg);
    3f18:	b8 01       	movw	r22, r16
    3f1a:	80 e8       	ldi	r24, 0x80	; 128
    3f1c:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
	strcpy(res, "End of collections");
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    3f20:	f3 94       	inc	r15
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	f8 94       	cli
    3f26:	de bf       	out	0x3e, r29	; 62
    3f28:	0f be       	out	0x3f, r0	; 63
    3f2a:	cd bf       	out	0x3d, r28	; 61
    3f2c:	9e e0       	ldi	r25, 0x0E	; 14
    3f2e:	9f 15       	cp	r25, r15
    3f30:	68 f6       	brcc	.-102    	; 0x3ecc <read_cols+0x3c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u", i+1, cols[i].samplings, cols[i].samplingInterval);
		uart1_hal_send_string(arg);
	}
}
    3f32:	c5 5b       	subi	r28, 0xB5	; 181
    3f34:	df 4f       	sbci	r29, 0xFF	; 255
    3f36:	0f b6       	in	r0, 0x3f	; 63
    3f38:	f8 94       	cli
    3f3a:	de bf       	out	0x3e, r29	; 62
    3f3c:	0f be       	out	0x3f, r0	; 63
    3f3e:	cd bf       	out	0x3d, r28	; 61
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	1f 91       	pop	r17
    3f46:	0f 91       	pop	r16
    3f48:	ff 90       	pop	r15
    3f4a:	08 95       	ret

Disassembly of section .text.read_time:

0000471a <read_time>:

static void read_time(char res[]){
    471a:	0f 93       	push	r16
    471c:	1f 93       	push	r17
    471e:	cf 93       	push	r28
    4720:	df 93       	push	r29
    4722:	00 d0       	rcall	.+0      	; 0x4724 <read_time+0xa>
    4724:	00 d0       	rcall	.+0      	; 0x4726 <read_time+0xc>
    4726:	00 d0       	rcall	.+0      	; 0x4728 <read_time+0xe>
    4728:	cd b7       	in	r28, 0x3d	; 61
    472a:	de b7       	in	r29, 0x3e	; 62
    472c:	18 2f       	mov	r17, r24
    472e:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    4730:	0e 94 57 37 	call	0x6eae	; 0x6eae <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    4734:	ce 01       	movw	r24, r28
    4736:	01 96       	adiw	r24, 0x01	; 1
    4738:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    473c:	88 23       	and	r24, r24
    473e:	51 f0       	breq	.+20     	; 0x4754 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    4740:	24 e1       	ldi	r18, 0x14	; 20
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	47 ec       	ldi	r20, 0xC7	; 199
    4746:	54 e0       	ldi	r21, 0x04	; 4
    4748:	60 e0       	ldi	r22, 0x00	; 0
    474a:	81 2f       	mov	r24, r17
    474c:	90 2f       	mov	r25, r16
    474e:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
    4752:	21 c0       	rjmp	.+66     	; 0x4796 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    4754:	59 81       	ldd	r21, Y+1	; 0x01
    4756:	4a 81       	ldd	r20, Y+2	; 0x02
    4758:	3b 81       	ldd	r19, Y+3	; 0x03
    475a:	2c 81       	ldd	r18, Y+4	; 0x04
    475c:	9d 81       	ldd	r25, Y+5	; 0x05
    475e:	8e 81       	ldd	r24, Y+6	; 0x06
    4760:	1f 92       	push	r1
    4762:	5f 93       	push	r21
    4764:	1f 92       	push	r1
    4766:	4f 93       	push	r20
    4768:	1f 92       	push	r1
    476a:	3f 93       	push	r19
    476c:	1f 92       	push	r1
    476e:	2f 93       	push	r18
    4770:	1f 92       	push	r1
    4772:	9f 93       	push	r25
    4774:	1f 92       	push	r1
    4776:	8f 93       	push	r24
    4778:	8b ed       	ldi	r24, 0xDB	; 219
    477a:	94 e0       	ldi	r25, 0x04	; 4
    477c:	a0 e0       	ldi	r26, 0x00	; 0
    477e:	af 93       	push	r26
    4780:	9f 93       	push	r25
    4782:	8f 93       	push	r24
    4784:	0f 93       	push	r16
    4786:	1f 93       	push	r17
    4788:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
	}
}
    4796:	26 96       	adiw	r28, 0x06	; 6
    4798:	0f b6       	in	r0, 0x3f	; 63
    479a:	f8 94       	cli
    479c:	de bf       	out	0x3e, r29	; 62
    479e:	0f be       	out	0x3f, r0	; 63
    47a0:	cd bf       	out	0x3d, r28	; 61
    47a2:	df 91       	pop	r29
    47a4:	cf 91       	pop	r28
    47a6:	1f 91       	pop	r17
    47a8:	0f 91       	pop	r16
    47aa:	08 95       	ret

Disassembly of section .text.read_validate_SI:

0000301c <read_validate_SI>:

static void read_validate_SI(char res[]){
    301c:	ef 92       	push	r14
    301e:	ff 92       	push	r15
    3020:	0f 93       	push	r16
    3022:	1f 93       	push	r17
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	cf 54       	subi	r28, 0x4F	; 79
    302e:	d1 09       	sbc	r29, r1
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	7c 01       	movw	r14, r24
	uint16_t lowest, highest;
	bool valid;
	COLLECTION cols[N_COLLECTIONS];
	
	//Get collections
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    303c:	6b e4       	ldi	r22, 0x4B	; 75
    303e:	ce 01       	movw	r24, r28
    3040:	05 96       	adiw	r24, 0x05	; 5
    3042:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <EM_get_collections>
	
	valid=SCD30_calc_validate_SI(cols[0].samplingInterval, cols[1].samplingInterval, cols[2].samplingInterval, &lowest, &highest);
    3046:	49 89       	ldd	r20, Y+17	; 0x11
    3048:	5a 89       	ldd	r21, Y+18	; 0x12
    304a:	6c 85       	ldd	r22, Y+12	; 0x0c
    304c:	7d 85       	ldd	r23, Y+13	; 0x0d
    304e:	8e 01       	movw	r16, r28
    3050:	0d 5f       	subi	r16, 0xFD	; 253
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	9e 01       	movw	r18, r28
    3056:	2f 5f       	subi	r18, 0xFF	; 255
    3058:	3f 4f       	sbci	r19, 0xFF	; 255
    305a:	8f 81       	ldd	r24, Y+7	; 0x07
    305c:	98 85       	ldd	r25, Y+8	; 0x08
    305e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <SCD30_calc_validate_SI>
	if(!valid){
    3062:	81 11       	cpse	r24, r1
    3064:	09 c0       	rjmp	.+18     	; 0x3078 <read_validate_SI+0x5c>
		strcpy(res, "ID=1...ID=3 not valid");
    3066:	26 e1       	ldi	r18, 0x16	; 22
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	49 ef       	ldi	r20, 0xF9	; 249
    306c:	54 e0       	ldi	r21, 0x04	; 4
    306e:	60 e0       	ldi	r22, 0x00	; 0
    3070:	c7 01       	movw	r24, r14
    3072:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return;
    3076:	59 c0       	rjmp	.+178    	; 0x312a <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[4].samplingInterval, cols[5].samplingInterval, cols[6].samplingInterval, &lowest, &highest);
    3078:	4d a1       	ldd	r20, Y+37	; 0x25
    307a:	5e a1       	ldd	r21, Y+38	; 0x26
    307c:	68 a1       	ldd	r22, Y+32	; 0x20
    307e:	79 a1       	ldd	r23, Y+33	; 0x21
    3080:	8e 01       	movw	r16, r28
    3082:	0d 5f       	subi	r16, 0xFD	; 253
    3084:	1f 4f       	sbci	r17, 0xFF	; 255
    3086:	9e 01       	movw	r18, r28
    3088:	2f 5f       	subi	r18, 0xFF	; 255
    308a:	3f 4f       	sbci	r19, 0xFF	; 255
    308c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    308e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3090:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <SCD30_calc_validate_SI>
	if(!valid){
    3094:	81 11       	cpse	r24, r1
    3096:	09 c0       	rjmp	.+18     	; 0x30aa <read_validate_SI+0x8e>
		strcpy(res, "ID=5...ID=7 not valid");
    3098:	26 e1       	ldi	r18, 0x16	; 22
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	4f e0       	ldi	r20, 0x0F	; 15
    309e:	55 e0       	ldi	r21, 0x05	; 5
    30a0:	60 e0       	ldi	r22, 0x00	; 0
    30a2:	c7 01       	movw	r24, r14
    30a4:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return;
    30a8:	40 c0       	rjmp	.+128    	; 0x312a <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[8].samplingInterval, cols[9].samplingInterval, cols[10].samplingInterval, &lowest, &highest);
    30aa:	49 ad       	ldd	r20, Y+57	; 0x39
    30ac:	5a ad       	ldd	r21, Y+58	; 0x3a
    30ae:	6c a9       	ldd	r22, Y+52	; 0x34
    30b0:	7d a9       	ldd	r23, Y+53	; 0x35
    30b2:	8e 01       	movw	r16, r28
    30b4:	0d 5f       	subi	r16, 0xFD	; 253
    30b6:	1f 4f       	sbci	r17, 0xFF	; 255
    30b8:	9e 01       	movw	r18, r28
    30ba:	2f 5f       	subi	r18, 0xFF	; 255
    30bc:	3f 4f       	sbci	r19, 0xFF	; 255
    30be:	8f a5       	ldd	r24, Y+47	; 0x2f
    30c0:	98 a9       	ldd	r25, Y+48	; 0x30
    30c2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <SCD30_calc_validate_SI>
	if(!valid){
    30c6:	81 11       	cpse	r24, r1
    30c8:	09 c0       	rjmp	.+18     	; 0x30dc <read_validate_SI+0xc0>
		strcpy(res, "ID=9...ID=11 not valid");
    30ca:	27 e1       	ldi	r18, 0x17	; 23
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	45 e2       	ldi	r20, 0x25	; 37
    30d0:	55 e0       	ldi	r21, 0x05	; 5
    30d2:	60 e0       	ldi	r22, 0x00	; 0
    30d4:	c7 01       	movw	r24, r14
    30d6:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return;
    30da:	27 c0       	rjmp	.+78     	; 0x312a <read_validate_SI+0x10e>
	}
	
	valid=SCD30_calc_validate_SI(cols[12].samplingInterval, cols[13].samplingInterval, cols[14].samplingInterval, &lowest, &highest);
    30dc:	2f 96       	adiw	r28, 0x0f	; 15
    30de:	4e ad       	ldd	r20, Y+62	; 0x3e
    30e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    30e2:	2f 97       	sbiw	r28, 0x0f	; 15
    30e4:	2a 96       	adiw	r28, 0x0a	; 10
    30e6:	6e ad       	ldd	r22, Y+62	; 0x3e
    30e8:	7f ad       	ldd	r23, Y+63	; 0x3f
    30ea:	2a 97       	sbiw	r28, 0x0a	; 10
    30ec:	8e 01       	movw	r16, r28
    30ee:	0d 5f       	subi	r16, 0xFD	; 253
    30f0:	1f 4f       	sbci	r17, 0xFF	; 255
    30f2:	9e 01       	movw	r18, r28
    30f4:	2f 5f       	subi	r18, 0xFF	; 255
    30f6:	3f 4f       	sbci	r19, 0xFF	; 255
    30f8:	25 96       	adiw	r28, 0x05	; 5
    30fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    30fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    30fe:	25 97       	sbiw	r28, 0x05	; 5
    3100:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <SCD30_calc_validate_SI>
	if(!valid){
    3104:	81 11       	cpse	r24, r1
    3106:	09 c0       	rjmp	.+18     	; 0x311a <read_validate_SI+0xfe>
		strcpy(res, "ID=13...ID=15 not valid");
    3108:	28 e1       	ldi	r18, 0x18	; 24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	4c e3       	ldi	r20, 0x3C	; 60
    310e:	55 e0       	ldi	r21, 0x05	; 5
    3110:	60 e0       	ldi	r22, 0x00	; 0
    3112:	c7 01       	movw	r24, r14
    3114:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return;
    3118:	08 c0       	rjmp	.+16     	; 0x312a <read_validate_SI+0x10e>
	}
	
	strcpy(res, "All valid");
    311a:	2a e0       	ldi	r18, 0x0A	; 10
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	44 e5       	ldi	r20, 0x54	; 84
    3120:	55 e0       	ldi	r21, 0x05	; 5
    3122:	60 e0       	ldi	r22, 0x00	; 0
    3124:	c7 01       	movw	r24, r14
    3126:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
}
    312a:	c1 5b       	subi	r28, 0xB1	; 177
    312c:	df 4f       	sbci	r29, 0xFF	; 255
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	df 91       	pop	r29
    313a:	cf 91       	pop	r28
    313c:	1f 91       	pop	r17
    313e:	0f 91       	pop	r16
    3140:	ff 90       	pop	r15
    3142:	ef 90       	pop	r14
    3144:	08 95       	ret

Disassembly of section .text.write_deveui:

00004b26 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    4b26:	cf 92       	push	r12
    4b28:	df 92       	push	r13
    4b2a:	ef 92       	push	r14
    4b2c:	0f 93       	push	r16
    4b2e:	1f 93       	push	r17
    4b30:	cf 93       	push	r28
    4b32:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4b34:	22 e0       	ldi	r18, 0x02	; 2
    4b36:	4b e3       	ldi	r20, 0x3B	; 59
    4b38:	5d e0       	ldi	r21, 0x0D	; 13
    4b3a:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    4b3e:	c8 2f       	mov	r28, r24
    4b40:	88 23       	and	r24, r24
    4b42:	29 f1       	breq	.+74     	; 0x4b8e <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    4b44:	8b e3       	ldi	r24, 0x3B	; 59
    4b46:	9d e0       	ldi	r25, 0x0D	; 13
    4b48:	6c 01       	movw	r12, r24
    4b4a:	20 e8       	ldi	r18, 0x80	; 128
    4b4c:	e2 2e       	mov	r14, r18
    4b4e:	8e 2d       	mov	r24, r14
    4b50:	b6 01       	movw	r22, r12
    4b52:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    4b56:	40 97       	sbiw	r24, 0x10	; 16
    4b58:	c9 f4       	brne	.+50     	; 0x4b8c <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    4b5a:	8e 2d       	mov	r24, r14
    4b5c:	b6 01       	movw	r22, r12
    4b5e:	0e 94 15 31 	call	0x622a	; 0x622a <EM_set_deveui>
    4b62:	c8 2f       	mov	r28, r24
    4b64:	81 11       	cpse	r24, r1
    4b66:	09 c0       	rjmp	.+18     	; 0x4b7a <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    4b68:	27 e0       	ldi	r18, 0x07	; 7
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	4e e5       	ldi	r20, 0x5E	; 94
    4b6e:	55 e0       	ldi	r21, 0x05	; 5
    4b70:	60 e0       	ldi	r22, 0x00	; 0
    4b72:	c8 01       	movw	r24, r16
    4b74:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return false;
    4b78:	0a c0       	rjmp	.+20     	; 0x4b8e <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4b7a:	28 e0       	ldi	r18, 0x08	; 8
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	45 e6       	ldi	r20, 0x65	; 101
    4b80:	55 e0       	ldi	r21, 0x05	; 5
    4b82:	60 e0       	ldi	r22, 0x00	; 0
    4b84:	c8 01       	movw	r24, r16
    4b86:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
    4b8a:	01 c0       	rjmp	.+2      	; 0x4b8e <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4b8c:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4b8e:	8c 2f       	mov	r24, r28
    4b90:	cf 91       	pop	r28
    4b92:	1f 91       	pop	r17
    4b94:	0f 91       	pop	r16
    4b96:	ef 90       	pop	r14
    4b98:	df 90       	pop	r13
    4b9a:	cf 90       	pop	r12
    4b9c:	08 95       	ret

Disassembly of section .text.write_appeui:

00004b9e <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    4b9e:	cf 92       	push	r12
    4ba0:	df 92       	push	r13
    4ba2:	ef 92       	push	r14
    4ba4:	0f 93       	push	r16
    4ba6:	1f 93       	push	r17
    4ba8:	cf 93       	push	r28
    4baa:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4bac:	22 e0       	ldi	r18, 0x02	; 2
    4bae:	4b e3       	ldi	r20, 0x3B	; 59
    4bb0:	5d e0       	ldi	r21, 0x0D	; 13
    4bb2:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    4bb6:	c8 2f       	mov	r28, r24
    4bb8:	88 23       	and	r24, r24
    4bba:	29 f1       	breq	.+74     	; 0x4c06 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    4bbc:	8b e3       	ldi	r24, 0x3B	; 59
    4bbe:	9d e0       	ldi	r25, 0x0D	; 13
    4bc0:	6c 01       	movw	r12, r24
    4bc2:	20 e8       	ldi	r18, 0x80	; 128
    4bc4:	e2 2e       	mov	r14, r18
    4bc6:	8e 2d       	mov	r24, r14
    4bc8:	b6 01       	movw	r22, r12
    4bca:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    4bce:	40 97       	sbiw	r24, 0x10	; 16
    4bd0:	c9 f4       	brne	.+50     	; 0x4c04 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    4bd2:	8e 2d       	mov	r24, r14
    4bd4:	b6 01       	movw	r22, r12
    4bd6:	0e 94 32 31 	call	0x6264	; 0x6264 <EM_set_appeui>
    4bda:	c8 2f       	mov	r28, r24
    4bdc:	81 11       	cpse	r24, r1
    4bde:	09 c0       	rjmp	.+18     	; 0x4bf2 <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    4be0:	27 e0       	ldi	r18, 0x07	; 7
    4be2:	30 e0       	ldi	r19, 0x00	; 0
    4be4:	4e e5       	ldi	r20, 0x5E	; 94
    4be6:	55 e0       	ldi	r21, 0x05	; 5
    4be8:	60 e0       	ldi	r22, 0x00	; 0
    4bea:	c8 01       	movw	r24, r16
    4bec:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return false;
    4bf0:	0a c0       	rjmp	.+20     	; 0x4c06 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4bf2:	28 e0       	ldi	r18, 0x08	; 8
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	45 e6       	ldi	r20, 0x65	; 101
    4bf8:	55 e0       	ldi	r21, 0x05	; 5
    4bfa:	60 e0       	ldi	r22, 0x00	; 0
    4bfc:	c8 01       	movw	r24, r16
    4bfe:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
    4c02:	01 c0       	rjmp	.+2      	; 0x4c06 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4c04:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4c06:	8c 2f       	mov	r24, r28
    4c08:	cf 91       	pop	r28
    4c0a:	1f 91       	pop	r17
    4c0c:	0f 91       	pop	r16
    4c0e:	ef 90       	pop	r14
    4c10:	df 90       	pop	r13
    4c12:	cf 90       	pop	r12
    4c14:	08 95       	ret

Disassembly of section .text.write_appkey:

00004c16 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    4c16:	cf 92       	push	r12
    4c18:	df 92       	push	r13
    4c1a:	ef 92       	push	r14
    4c1c:	0f 93       	push	r16
    4c1e:	1f 93       	push	r17
    4c20:	cf 93       	push	r28
    4c22:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4c24:	22 e0       	ldi	r18, 0x02	; 2
    4c26:	4b e3       	ldi	r20, 0x3B	; 59
    4c28:	5d e0       	ldi	r21, 0x0D	; 13
    4c2a:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    4c2e:	c8 2f       	mov	r28, r24
    4c30:	88 23       	and	r24, r24
    4c32:	29 f1       	breq	.+74     	; 0x4c7e <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    4c34:	8b e3       	ldi	r24, 0x3B	; 59
    4c36:	9d e0       	ldi	r25, 0x0D	; 13
    4c38:	6c 01       	movw	r12, r24
    4c3a:	20 e8       	ldi	r18, 0x80	; 128
    4c3c:	e2 2e       	mov	r14, r18
    4c3e:	8e 2d       	mov	r24, r14
    4c40:	b6 01       	movw	r22, r12
    4c42:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    4c46:	80 97       	sbiw	r24, 0x20	; 32
    4c48:	c9 f4       	brne	.+50     	; 0x4c7c <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    4c4a:	8e 2d       	mov	r24, r14
    4c4c:	b6 01       	movw	r22, r12
    4c4e:	0e 94 4f 31 	call	0x629e	; 0x629e <EM_set_appkey>
    4c52:	c8 2f       	mov	r28, r24
    4c54:	81 11       	cpse	r24, r1
    4c56:	09 c0       	rjmp	.+18     	; 0x4c6a <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    4c58:	27 e0       	ldi	r18, 0x07	; 7
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	4e e5       	ldi	r20, 0x5E	; 94
    4c5e:	55 e0       	ldi	r21, 0x05	; 5
    4c60:	60 e0       	ldi	r22, 0x00	; 0
    4c62:	c8 01       	movw	r24, r16
    4c64:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return false;
    4c68:	0a c0       	rjmp	.+20     	; 0x4c7e <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4c6a:	28 e0       	ldi	r18, 0x08	; 8
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	45 e6       	ldi	r20, 0x65	; 101
    4c70:	55 e0       	ldi	r21, 0x05	; 5
    4c72:	60 e0       	ldi	r22, 0x00	; 0
    4c74:	c8 01       	movw	r24, r16
    4c76:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
    4c7a:	01 c0       	rjmp	.+2      	; 0x4c7e <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    4c7c:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4c7e:	8c 2f       	mov	r24, r28
    4c80:	cf 91       	pop	r28
    4c82:	1f 91       	pop	r17
    4c84:	0f 91       	pop	r16
    4c86:	ef 90       	pop	r14
    4c88:	df 90       	pop	r13
    4c8a:	cf 90       	pop	r12
    4c8c:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00005aa0 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    5aa0:	0f 93       	push	r16
    5aa2:	1f 93       	push	r17
    5aa4:	cf 93       	push	r28
    5aa6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5aa8:	22 e0       	ldi	r18, 0x02	; 2
    5aaa:	4b e3       	ldi	r20, 0x3B	; 59
    5aac:	5d e0       	ldi	r21, 0x0D	; 13
    5aae:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    5ab2:	c8 2f       	mov	r28, r24
    5ab4:	88 23       	and	r24, r24
    5ab6:	a9 f0       	breq	.+42     	; 0x5ae2 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    5ab8:	8b e3       	ldi	r24, 0x3B	; 59
    5aba:	9d e0       	ldi	r25, 0x0D	; 13
    5abc:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <is_float>
    5ac0:	c8 2f       	mov	r28, r24
    5ac2:	88 23       	and	r24, r24
    5ac4:	71 f0       	breq	.+28     	; 0x5ae2 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    5ac6:	8b e3       	ldi	r24, 0x3B	; 59
    5ac8:	9d e0       	ldi	r25, 0x0D	; 13
    5aca:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <str2flaot>
	EM_set_ppmfactor(val);
    5ace:	0e 94 06 38 	call	0x700c	; 0x700c <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    5ad2:	28 e0       	ldi	r18, 0x08	; 8
    5ad4:	30 e0       	ldi	r19, 0x00	; 0
    5ad6:	45 e6       	ldi	r20, 0x65	; 101
    5ad8:	55 e0       	ldi	r21, 0x05	; 5
    5ada:	60 e0       	ldi	r22, 0x00	; 0
    5adc:	c8 01       	movw	r24, r16
    5ade:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	return true;
}
    5ae2:	8c 2f       	mov	r24, r28
    5ae4:	cf 91       	pop	r28
    5ae6:	1f 91       	pop	r17
    5ae8:	0f 91       	pop	r16
    5aea:	08 95       	ret

Disassembly of section .text.write_RRL:

00005aec <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    5aec:	0f 93       	push	r16
    5aee:	1f 93       	push	r17
    5af0:	cf 93       	push	r28
    5af2:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5af4:	22 e0       	ldi	r18, 0x02	; 2
    5af6:	4b e3       	ldi	r20, 0x3B	; 59
    5af8:	5d e0       	ldi	r21, 0x0D	; 13
    5afa:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    5afe:	c8 2f       	mov	r28, r24
    5b00:	88 23       	and	r24, r24
    5b02:	a9 f0       	breq	.+42     	; 0x5b2e <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    5b04:	8b e3       	ldi	r24, 0x3B	; 59
    5b06:	9d e0       	ldi	r25, 0x0D	; 13
    5b08:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <is_float>
    5b0c:	c8 2f       	mov	r28, r24
    5b0e:	88 23       	and	r24, r24
    5b10:	71 f0       	breq	.+28     	; 0x5b2e <write_RRL+0x42>
	
	float val=str2flaot(arg);
    5b12:	8b e3       	ldi	r24, 0x3B	; 59
    5b14:	9d e0       	ldi	r25, 0x0D	; 13
    5b16:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <str2flaot>
	EM_set_RRL(val);
    5b1a:	0e 94 0d 38 	call	0x701a	; 0x701a <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    5b1e:	28 e0       	ldi	r18, 0x08	; 8
    5b20:	30 e0       	ldi	r19, 0x00	; 0
    5b22:	45 e6       	ldi	r20, 0x65	; 101
    5b24:	55 e0       	ldi	r21, 0x05	; 5
    5b26:	60 e0       	ldi	r22, 0x00	; 0
    5b28:	c8 01       	movw	r24, r16
    5b2a:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	return true;
}
    5b2e:	8c 2f       	mov	r24, r28
    5b30:	cf 91       	pop	r28
    5b32:	1f 91       	pop	r17
    5b34:	0f 91       	pop	r16
    5b36:	08 95       	ret

Disassembly of section .text.write_VCC:

00005b38 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    5b38:	0f 93       	push	r16
    5b3a:	1f 93       	push	r17
    5b3c:	cf 93       	push	r28
    5b3e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5b40:	22 e0       	ldi	r18, 0x02	; 2
    5b42:	4b e3       	ldi	r20, 0x3B	; 59
    5b44:	5d e0       	ldi	r21, 0x0D	; 13
    5b46:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    5b4a:	c8 2f       	mov	r28, r24
    5b4c:	88 23       	and	r24, r24
    5b4e:	a9 f0       	breq	.+42     	; 0x5b7a <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    5b50:	8b e3       	ldi	r24, 0x3B	; 59
    5b52:	9d e0       	ldi	r25, 0x0D	; 13
    5b54:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <is_float>
    5b58:	c8 2f       	mov	r28, r24
    5b5a:	88 23       	and	r24, r24
    5b5c:	71 f0       	breq	.+28     	; 0x5b7a <write_VCC+0x42>
	
	float val=str2flaot(arg);
    5b5e:	8b e3       	ldi	r24, 0x3B	; 59
    5b60:	9d e0       	ldi	r25, 0x0D	; 13
    5b62:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <str2flaot>
	EM_set_Vcc(val);
    5b66:	0e 94 14 38 	call	0x7028	; 0x7028 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    5b6a:	28 e0       	ldi	r18, 0x08	; 8
    5b6c:	30 e0       	ldi	r19, 0x00	; 0
    5b6e:	45 e6       	ldi	r20, 0x65	; 101
    5b70:	55 e0       	ldi	r21, 0x05	; 5
    5b72:	60 e0       	ldi	r22, 0x00	; 0
    5b74:	c8 01       	movw	r24, r16
    5b76:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	return true;
}
    5b7a:	8c 2f       	mov	r24, r28
    5b7c:	cf 91       	pop	r28
    5b7e:	1f 91       	pop	r17
    5b80:	0f 91       	pop	r16
    5b82:	08 95       	ret

Disassembly of section .text.get_time_par:

0000652e <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    652e:	cf 93       	push	r28
    6530:	df 93       	push	r29
    6532:	00 d0       	rcall	.+0      	; 0x6534 <get_time_par+0x6>
    6534:	1f 92       	push	r1
    6536:	cd b7       	in	r28, 0x3d	; 61
    6538:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    653a:	fc 01       	movw	r30, r24
    653c:	e6 0f       	add	r30, r22
    653e:	f1 1d       	adc	r31, r1
    6540:	80 81       	ld	r24, Z
    6542:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    6544:	81 81       	ldd	r24, Z+1	; 0x01
    6546:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    6548:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    654a:	be 01       	movw	r22, r28
    654c:	6f 5f       	subi	r22, 0xFF	; 255
    654e:	7f 4f       	sbci	r23, 0xFF	; 255
    6550:	80 e8       	ldi	r24, 0x80	; 128
    6552:	0e 94 30 39 	call	0x7260	; 0x7260 <atoi>
}
    6556:	0f 90       	pop	r0
    6558:	0f 90       	pop	r0
    655a:	0f 90       	pop	r0
    655c:	df 91       	pop	r29
    655e:	cf 91       	pop	r28
    6560:	08 95       	ret

Disassembly of section .text.write_cols:

000029aa <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    29aa:	4f 92       	push	r4
    29ac:	5f 92       	push	r5
    29ae:	6f 92       	push	r6
    29b0:	7f 92       	push	r7
    29b2:	8f 92       	push	r8
    29b4:	af 92       	push	r10
    29b6:	bf 92       	push	r11
    29b8:	cf 92       	push	r12
    29ba:	df 92       	push	r13
    29bc:	ef 92       	push	r14
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	cb 54       	subi	r28, 0x4B	; 75
    29cc:	d1 09       	sbc	r29, r1
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	3b 01       	movw	r6, r22
    29da:	88 2e       	mov	r8, r24
    29dc:	5a 01       	movw	r10, r20
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	bool valid;
	
	//Col ID
	if(!get_parameter(cmd, arg, 2)) return false;
    29de:	22 e0       	ldi	r18, 0x02	; 2
    29e0:	4b e3       	ldi	r20, 0x3B	; 59
    29e2:	5d e0       	ldi	r21, 0x0D	; 13
    29e4:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    29e8:	18 2f       	mov	r17, r24
    29ea:	88 23       	and	r24, r24
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <write_cols+0x46>
    29ee:	72 c0       	rjmp	.+228    	; 0x2ad4 <write_cols+0x12a>
	index=atoi(arg);
    29f0:	8b e3       	ldi	r24, 0x3B	; 59
    29f2:	9d e0       	ldi	r25, 0x0D	; 13
    29f4:	6c 01       	movw	r12, r24
    29f6:	20 e8       	ldi	r18, 0x80	; 128
    29f8:	e2 2e       	mov	r14, r18
    29fa:	8e 2d       	mov	r24, r14
    29fc:	b6 01       	movw	r22, r12
    29fe:	0e 94 30 39 	call	0x7260	; 0x7260 <atoi>
	if(index<1 || index>N_COLLECTIONS) return false;
    2a02:	0f ef       	ldi	r16, 0xFF	; 255
    2a04:	08 0f       	add	r16, r24
    2a06:	0f 30       	cpi	r16, 0x0F	; 15
    2a08:	08 f0       	brcs	.+2      	; 0x2a0c <write_cols+0x62>
    2a0a:	5f c0       	rjmp	.+190    	; 0x2aca <write_cols+0x120>
	index--; //Offset index
	
	//Number of samples
	if(!get_parameter(cmd, arg, 3)) return false;
    2a0c:	23 e0       	ldi	r18, 0x03	; 3
    2a0e:	4b e3       	ldi	r20, 0x3B	; 59
    2a10:	5d e0       	ldi	r21, 0x0D	; 13
    2a12:	88 2d       	mov	r24, r8
    2a14:	b3 01       	movw	r22, r6
    2a16:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    2a1a:	18 2f       	mov	r17, r24
    2a1c:	88 23       	and	r24, r24
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <write_cols+0x78>
    2a20:	59 c0       	rjmp	.+178    	; 0x2ad4 <write_cols+0x12a>
	samplings=atoi(arg);
    2a22:	8e 2d       	mov	r24, r14
    2a24:	b6 01       	movw	r22, r12
    2a26:	0e 94 30 39 	call	0x7260	; 0x7260 <atoi>
    2a2a:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>MAX_SAMPLES_ALL) return false;
    2a2c:	02 97       	sbiw	r24, 0x02	; 2
    2a2e:	83 36       	cpi	r24, 0x63	; 99
    2a30:	91 05       	cpc	r25, r1
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <write_cols+0x8c>
    2a34:	4c c0       	rjmp	.+152    	; 0x2ace <write_cols+0x124>
	
	//Sampling interval
	if(!get_parameter(cmd, arg, 4)) return false;
    2a36:	24 e0       	ldi	r18, 0x04	; 4
    2a38:	4b e3       	ldi	r20, 0x3B	; 59
    2a3a:	5d e0       	ldi	r21, 0x0D	; 13
    2a3c:	88 2d       	mov	r24, r8
    2a3e:	b3 01       	movw	r22, r6
    2a40:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    2a44:	18 2f       	mov	r17, r24
    2a46:	88 23       	and	r24, r24
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <write_cols+0xa2>
    2a4a:	44 c0       	rjmp	.+136    	; 0x2ad4 <write_cols+0x12a>
	samplingInterval=atoi(arg);
    2a4c:	8e 2d       	mov	r24, r14
    2a4e:	b6 01       	movw	r22, r12
    2a50:	0e 94 30 39 	call	0x7260	; 0x7260 <atoi>
    2a54:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    2a56:	02 97       	sbiw	r24, 0x02	; 2
    2a58:	87 35       	cpi	r24, 0x57	; 87
    2a5a:	92 40       	sbci	r25, 0x02	; 2
    2a5c:	d0 f5       	brcc	.+116    	; 0x2ad2 <write_cols+0x128>
	
	COLLECTION cols[N_COLLECTIONS];
	EM_get_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    2a5e:	6b e4       	ldi	r22, 0x4B	; 75
    2a60:	ce 01       	movw	r24, r28
    2a62:	01 96       	adiw	r24, 0x01	; 1
    2a64:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <EM_get_collections>
	
	cols[index].samplings=samplings;
    2a68:	80 2f       	mov	r24, r16
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	ee 0f       	add	r30, r30
    2a70:	ff 1f       	adc	r31, r31
    2a72:	ee 0f       	add	r30, r30
    2a74:	ff 1f       	adc	r31, r31
    2a76:	e8 0f       	add	r30, r24
    2a78:	f9 1f       	adc	r31, r25
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	8c 0f       	add	r24, r28
    2a80:	9d 1f       	adc	r25, r29
    2a82:	e8 0f       	add	r30, r24
    2a84:	f9 1f       	adc	r31, r25
    2a86:	51 82       	std	Z+1, r5	; 0x01
    2a88:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    2a8a:	d3 82       	std	Z+3, r13	; 0x03
    2a8c:	c2 82       	std	Z+2, r12	; 0x02
	
	//Check for space in buffer
	valid=MRPP_validate_collections_space(cols, N_COLLECTIONS);
    2a8e:	6f e0       	ldi	r22, 0x0F	; 15
    2a90:	0e 94 7f 29 	call	0x52fe	; 0x52fe <MRPP_validate_collections_space>
	if(!valid){
    2a94:	81 11       	cpse	r24, r1
    2a96:	09 c0       	rjmp	.+18     	; 0x2aaa <write_cols+0x100>
		strcpy(res, "Too much data to be in buffer!");
    2a98:	2f e1       	ldi	r18, 0x1F	; 31
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	4d e6       	ldi	r20, 0x6D	; 109
    2a9e:	55 e0       	ldi	r21, 0x05	; 5
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	c5 01       	movw	r24, r10
    2aa4:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
    2aa8:	15 c0       	rjmp	.+42     	; 0x2ad4 <write_cols+0x12a>
	}
	
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    2aaa:	be 01       	movw	r22, r28
    2aac:	6f 5f       	subi	r22, 0xFF	; 255
    2aae:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab0:	80 e8       	ldi	r24, 0x80	; 128
    2ab2:	4b e4       	ldi	r20, 0x4B	; 75
    2ab4:	0e 94 1b 38 	call	0x7036	; 0x7036 <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    2ab8:	28 e0       	ldi	r18, 0x08	; 8
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	45 e6       	ldi	r20, 0x65	; 101
    2abe:	55 e0       	ldi	r21, 0x05	; 5
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	c5 01       	movw	r24, r10
    2ac4:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	return true;	
    2ac8:	05 c0       	rjmp	.+10     	; 0x2ad4 <write_cols+0x12a>
	bool valid;
	
	//Col ID
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>N_COLLECTIONS) return false;
    2aca:	10 e0       	ldi	r17, 0x00	; 0
    2acc:	03 c0       	rjmp	.+6      	; 0x2ad4 <write_cols+0x12a>
	index--; //Offset index
	
	//Number of samples
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>MAX_SAMPLES_ALL) return false;
    2ace:	10 e0       	ldi	r17, 0x00	; 0
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <write_cols+0x12a>
	
	//Sampling interval
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    2ad2:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    2ad4:	81 2f       	mov	r24, r17
    2ad6:	c5 5b       	subi	r28, 0xB5	; 181
    2ad8:	df 4f       	sbci	r29, 0xFF	; 255
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	ef 90       	pop	r14
    2aee:	df 90       	pop	r13
    2af0:	cf 90       	pop	r12
    2af2:	bf 90       	pop	r11
    2af4:	af 90       	pop	r10
    2af6:	8f 90       	pop	r8
    2af8:	7f 90       	pop	r7
    2afa:	6f 90       	pop	r6
    2afc:	5f 90       	pop	r5
    2afe:	4f 90       	pop	r4
    2b00:	08 95       	ret

Disassembly of section .text.write_heat_up:

00005b84 <write_heat_up>:



static bool write_heat_up(const char cmd[], char res[]){
    5b84:	0f 93       	push	r16
    5b86:	1f 93       	push	r17
    5b88:	cf 93       	push	r28
    5b8a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5b8c:	22 e0       	ldi	r18, 0x02	; 2
    5b8e:	4b e3       	ldi	r20, 0x3B	; 59
    5b90:	5d e0       	ldi	r21, 0x0D	; 13
    5b92:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    5b96:	c8 2f       	mov	r28, r24
    5b98:	88 23       	and	r24, r24
    5b9a:	a9 f0       	breq	.+42     	; 0x5bc6 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    5b9c:	6b e3       	ldi	r22, 0x3B	; 59
    5b9e:	7d e0       	ldi	r23, 0x0D	; 13
    5ba0:	80 e8       	ldi	r24, 0x80	; 128
    5ba2:	0e 94 30 39 	call	0x7260	; 0x7260 <atoi>
	
	if(val<1 || val>200) return false;
    5ba6:	9f ef       	ldi	r25, 0xFF	; 255
    5ba8:	98 0f       	add	r25, r24
    5baa:	98 3c       	cpi	r25, 0xC8	; 200
    5bac:	58 f4       	brcc	.+22     	; 0x5bc4 <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    5bae:	0e 94 66 38 	call	0x70cc	; 0x70cc <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    5bb2:	28 e0       	ldi	r18, 0x08	; 8
    5bb4:	30 e0       	ldi	r19, 0x00	; 0
    5bb6:	45 e6       	ldi	r20, 0x65	; 101
    5bb8:	55 e0       	ldi	r21, 0x05	; 5
    5bba:	60 e0       	ldi	r22, 0x00	; 0
    5bbc:	c8 01       	movw	r24, r16
    5bbe:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	return true;
    5bc2:	01 c0       	rjmp	.+2      	; 0x5bc6 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    5bc4:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5bc6:	8c 2f       	mov	r24, r28
    5bc8:	cf 91       	pop	r28
    5bca:	1f 91       	pop	r17
    5bcc:	0f 91       	pop	r16
    5bce:	08 95       	ret

Disassembly of section .text.write_air_pump:

00005832 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    5832:	0f 93       	push	r16
    5834:	1f 93       	push	r17
    5836:	cf 93       	push	r28
    5838:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    583a:	22 e0       	ldi	r18, 0x02	; 2
    583c:	4b e3       	ldi	r20, 0x3B	; 59
    583e:	5d e0       	ldi	r21, 0x0D	; 13
    5840:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    5844:	c8 2f       	mov	r28, r24
    5846:	88 23       	and	r24, r24
    5848:	b9 f0       	breq	.+46     	; 0x5878 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    584a:	6b e3       	ldi	r22, 0x3B	; 59
    584c:	7d e0       	ldi	r23, 0x0D	; 13
    584e:	80 e8       	ldi	r24, 0x80	; 128
    5850:	0e 94 30 39 	call	0x7260	; 0x7260 <atoi>
	
	if(val<5 || val>1000) return false;
    5854:	9c 01       	movw	r18, r24
    5856:	25 50       	subi	r18, 0x05	; 5
    5858:	31 09       	sbc	r19, r1
    585a:	24 3e       	cpi	r18, 0xE4	; 228
    585c:	33 40       	sbci	r19, 0x03	; 3
    585e:	58 f4       	brcc	.+22     	; 0x5876 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    5860:	0e 94 72 38 	call	0x70e4	; 0x70e4 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    5864:	28 e0       	ldi	r18, 0x08	; 8
    5866:	30 e0       	ldi	r19, 0x00	; 0
    5868:	45 e6       	ldi	r20, 0x65	; 101
    586a:	55 e0       	ldi	r21, 0x05	; 5
    586c:	60 e0       	ldi	r22, 0x00	; 0
    586e:	c8 01       	movw	r24, r16
    5870:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	return true;
    5874:	01 c0       	rjmp	.+2      	; 0x5878 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    5876:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5878:	8c 2f       	mov	r24, r28
    587a:	cf 91       	pop	r28
    587c:	1f 91       	pop	r17
    587e:	0f 91       	pop	r16
    5880:	08 95       	ret

Disassembly of section .text.write_sp_interval:

00005bd0 <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    5bd0:	0f 93       	push	r16
    5bd2:	1f 93       	push	r17
    5bd4:	cf 93       	push	r28
    5bd6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5bd8:	22 e0       	ldi	r18, 0x02	; 2
    5bda:	4b e3       	ldi	r20, 0x3B	; 59
    5bdc:	5d e0       	ldi	r21, 0x0D	; 13
    5bde:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    5be2:	c8 2f       	mov	r28, r24
    5be4:	88 23       	and	r24, r24
    5be6:	a9 f0       	breq	.+42     	; 0x5c12 <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    5be8:	6b e3       	ldi	r22, 0x3B	; 59
    5bea:	7d e0       	ldi	r23, 0x0D	; 13
    5bec:	80 e8       	ldi	r24, 0x80	; 128
    5bee:	0e 94 30 39 	call	0x7260	; 0x7260 <atoi>
	
	if(val<6 || val>24) return false;
    5bf2:	9a ef       	ldi	r25, 0xFA	; 250
    5bf4:	98 0f       	add	r25, r24
    5bf6:	93 31       	cpi	r25, 0x13	; 19
    5bf8:	58 f4       	brcc	.+22     	; 0x5c10 <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    5bfa:	0e 94 7e 38 	call	0x70fc	; 0x70fc <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    5bfe:	28 e0       	ldi	r18, 0x08	; 8
    5c00:	30 e0       	ldi	r19, 0x00	; 0
    5c02:	45 e6       	ldi	r20, 0x65	; 101
    5c04:	55 e0       	ldi	r21, 0x05	; 5
    5c06:	60 e0       	ldi	r22, 0x00	; 0
    5c08:	c8 01       	movw	r24, r16
    5c0a:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	return true;
    5c0e:	01 c0       	rjmp	.+2      	; 0x5c12 <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    5c10:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5c12:	8c 2f       	mov	r24, r28
    5c14:	cf 91       	pop	r28
    5c16:	1f 91       	pop	r17
    5c18:	0f 91       	pop	r16
    5c1a:	08 95       	ret

Disassembly of section .text.write_reset:

000039a2 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	cf 93       	push	r28
    39a8:	df 93       	push	r29
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	cb 54       	subi	r28, 0x4B	; 75
    39b0:	d1 09       	sbc	r29, r1
    39b2:	0f b6       	in	r0, 0x3f	; 63
    39b4:	f8 94       	cli
    39b6:	de bf       	out	0x3e, r29	; 62
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	cd bf       	out	0x3d, r28	; 61
    39bc:	8a 01       	movw	r16, r20
	
	COLLECTION cols[N_COLLECTIONS];
	
	EM_set_deveui("0000000000000000");
    39be:	6c e8       	ldi	r22, 0x8C	; 140
    39c0:	75 e0       	ldi	r23, 0x05	; 5
    39c2:	80 e0       	ldi	r24, 0x00	; 0
    39c4:	0e 94 15 31 	call	0x622a	; 0x622a <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    39c8:	6c e8       	ldi	r22, 0x8C	; 140
    39ca:	75 e0       	ldi	r23, 0x05	; 5
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	0e 94 32 31 	call	0x6264	; 0x6264 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    39d2:	6d e9       	ldi	r22, 0x9D	; 157
    39d4:	75 e0       	ldi	r23, 0x05	; 5
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	0e 94 4f 31 	call	0x629e	; 0x629e <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    39dc:	60 e0       	ldi	r22, 0x00	; 0
    39de:	70 e0       	ldi	r23, 0x00	; 0
    39e0:	80 e8       	ldi	r24, 0x80	; 128
    39e2:	9f e3       	ldi	r25, 0x3F	; 63
    39e4:	0e 94 06 38 	call	0x700c	; 0x700c <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    39e8:	60 e0       	ldi	r22, 0x00	; 0
    39ea:	70 e4       	ldi	r23, 0x40	; 64
    39ec:	8c e1       	ldi	r24, 0x1C	; 28
    39ee:	95 e4       	ldi	r25, 0x45	; 69
    39f0:	0e 94 0d 38 	call	0x701a	; 0x701a <EM_set_RRL>
	EM_set_Vcc(5.00);
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	80 ea       	ldi	r24, 0xA0	; 160
    39fa:	90 e4       	ldi	r25, 0x40	; 64
    39fc:	0e 94 14 38 	call	0x7028	; 0x7028 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    3a00:	82 e0       	ldi	r24, 0x02	; 2
    3a02:	0e 94 66 38 	call	0x70cc	; 0x70cc <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    3a06:	85 e0       	ldi	r24, 0x05	; 5
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	0e 94 72 38 	call	0x70e4	; 0x70e4 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    3a0e:	86 e0       	ldi	r24, 0x06	; 6
    3a10:	0e 94 7e 38 	call	0x70fc	; 0x70fc <EM_set_sp_interval>
	
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	1a c0       	rjmp	.+52     	; 0x3a4c <write_reset+0xaa>
	{
		cols[i].type=T_INT16;
    3a18:	e8 2f       	mov	r30, r24
    3a1a:	f0 e0       	ldi	r31, 0x00	; 0
    3a1c:	9f 01       	movw	r18, r30
    3a1e:	22 0f       	add	r18, r18
    3a20:	33 1f       	adc	r19, r19
    3a22:	22 0f       	add	r18, r18
    3a24:	33 1f       	adc	r19, r19
    3a26:	e2 0f       	add	r30, r18
    3a28:	f3 1f       	adc	r31, r19
    3a2a:	21 e0       	ldi	r18, 0x01	; 1
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	2c 0f       	add	r18, r28
    3a30:	3d 1f       	adc	r19, r29
    3a32:	e2 0f       	add	r30, r18
    3a34:	f3 1f       	adc	r31, r19
    3a36:	92 e0       	ldi	r25, 0x02	; 2
    3a38:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    3a3a:	22 e0       	ldi	r18, 0x02	; 2
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	31 83       	std	Z+1, r19	; 0x01
    3a40:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    3a42:	23 e0       	ldi	r18, 0x03	; 3
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	33 83       	std	Z+3, r19	; 0x03
    3a48:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<N_COLLECTIONS; i++)
    3a4a:	8f 5f       	subi	r24, 0xFF	; 255
    3a4c:	8f 30       	cpi	r24, 0x0F	; 15
    3a4e:	20 f3       	brcs	.-56     	; 0x3a18 <write_reset+0x76>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*N_COLLECTIONS);
    3a50:	be 01       	movw	r22, r28
    3a52:	6f 5f       	subi	r22, 0xFF	; 255
    3a54:	7f 4f       	sbci	r23, 0xFF	; 255
    3a56:	80 e8       	ldi	r24, 0x80	; 128
    3a58:	4b e4       	ldi	r20, 0x4B	; 75
    3a5a:	0e 94 1b 38 	call	0x7036	; 0x7036 <EM_set_collections>
	
	strcpy(res, "All settings reset");
    3a5e:	23 e1       	ldi	r18, 0x13	; 19
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	4e eb       	ldi	r20, 0xBE	; 190
    3a64:	55 e0       	ldi	r21, 0x05	; 5
    3a66:	60 e0       	ldi	r22, 0x00	; 0
    3a68:	c8 01       	movw	r24, r16
    3a6a:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	return true;
}
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	c5 5b       	subi	r28, 0xB5	; 181
    3a72:	df 4f       	sbci	r29, 0xFF	; 255
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	df 91       	pop	r29
    3a80:	cf 91       	pop	r28
    3a82:	1f 91       	pop	r17
    3a84:	0f 91       	pop	r16
    3a86:	08 95       	ret

Disassembly of section .text.write_time:

000036bc <write_time>:

static bool write_time(const char cmd[], char res[]){
    36bc:	6f 92       	push	r6
    36be:	7f 92       	push	r7
    36c0:	8f 92       	push	r8
    36c2:	df 92       	push	r13
    36c4:	ef 92       	push	r14
    36c6:	ff 92       	push	r15
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <write_time+0x16>
    36d2:	00 d0       	rcall	.+0      	; 0x36d4 <write_time+0x18>
    36d4:	00 d0       	rcall	.+0      	; 0x36d6 <write_time+0x1a>
    36d6:	cd b7       	in	r28, 0x3d	; 61
    36d8:	de b7       	in	r29, 0x3e	; 62
    36da:	3b 01       	movw	r6, r22
    36dc:	88 2e       	mov	r8, r24
    36de:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    36e0:	0e 94 57 37 	call	0x6eae	; 0x6eae <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    36e4:	22 e0       	ldi	r18, 0x02	; 2
    36e6:	4b e3       	ldi	r20, 0x3B	; 59
    36e8:	5d e0       	ldi	r21, 0x0D	; 13
    36ea:	88 2d       	mov	r24, r8
    36ec:	b3 01       	movw	r22, r6
    36ee:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    36f2:	18 2f       	mov	r17, r24
    36f4:	88 23       	and	r24, r24
    36f6:	09 f4       	brne	.+2      	; 0x36fa <write_time+0x3e>
    36f8:	4e c0       	rjmp	.+156    	; 0x3796 <write_time+0xda>
	if(strlen(arg)!=17){
    36fa:	6b e3       	ldi	r22, 0x3B	; 59
    36fc:	7d e0       	ldi	r23, 0x0D	; 13
    36fe:	80 e8       	ldi	r24, 0x80	; 128
    3700:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    3704:	41 97       	sbiw	r24, 0x11	; 17
    3706:	49 f0       	breq	.+18     	; 0x371a <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    3708:	25 e2       	ldi	r18, 0x25	; 37
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	41 ed       	ldi	r20, 0xD1	; 209
    370e:	55 e0       	ldi	r21, 0x05	; 5
    3710:	60 e0       	ldi	r22, 0x00	; 0
    3712:	c7 01       	movw	r24, r14
    3714:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
    3718:	3e c0       	rjmp	.+124    	; 0x3796 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    371a:	60 e0       	ldi	r22, 0x00	; 0
    371c:	8b e3       	ldi	r24, 0x3B	; 59
    371e:	9d e0       	ldi	r25, 0x0D	; 13
    3720:	0e 94 97 32 	call	0x652e	; 0x652e <get_time_par>
    3724:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    3726:	63 e0       	ldi	r22, 0x03	; 3
    3728:	8b e3       	ldi	r24, 0x3B	; 59
    372a:	9d e0       	ldi	r25, 0x0D	; 13
    372c:	0e 94 97 32 	call	0x652e	; 0x652e <get_time_par>
    3730:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    3732:	66 e0       	ldi	r22, 0x06	; 6
    3734:	8b e3       	ldi	r24, 0x3B	; 59
    3736:	9d e0       	ldi	r25, 0x0D	; 13
    3738:	0e 94 97 32 	call	0x652e	; 0x652e <get_time_par>
    373c:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    373e:	69 e0       	ldi	r22, 0x09	; 9
    3740:	8b e3       	ldi	r24, 0x3B	; 59
    3742:	9d e0       	ldi	r25, 0x0D	; 13
    3744:	0e 94 97 32 	call	0x652e	; 0x652e <get_time_par>
    3748:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    374a:	6c e0       	ldi	r22, 0x0C	; 12
    374c:	8b e3       	ldi	r24, 0x3B	; 59
    374e:	9d e0       	ldi	r25, 0x0D	; 13
    3750:	0e 94 97 32 	call	0x652e	; 0x652e <get_time_par>
    3754:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    3756:	6f e0       	ldi	r22, 0x0F	; 15
    3758:	8b e3       	ldi	r24, 0x3B	; 59
    375a:	9d e0       	ldi	r25, 0x0D	; 13
    375c:	0e 94 97 32 	call	0x652e	; 0x652e <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    3760:	48 2f       	mov	r20, r24
    3762:	5d 2d       	mov	r21, r13
    3764:	60 2f       	mov	r22, r16
    3766:	76 2d       	mov	r23, r6
    3768:	87 2d       	mov	r24, r7
    376a:	98 2d       	mov	r25, r8
    376c:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    3770:	88 23       	and	r24, r24
    3772:	49 f0       	breq	.+18     	; 0x3786 <write_time+0xca>
		strcpy(res, "Failed to set time");
    3774:	23 e1       	ldi	r18, 0x13	; 19
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	46 ef       	ldi	r20, 0xF6	; 246
    377a:	55 e0       	ldi	r21, 0x05	; 5
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	c7 01       	movw	r24, r14
    3780:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
    3784:	08 c0       	rjmp	.+16     	; 0x3796 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    3786:	28 e0       	ldi	r18, 0x08	; 8
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	45 e6       	ldi	r20, 0x65	; 101
    378c:	55 e0       	ldi	r21, 0x05	; 5
    378e:	60 e0       	ldi	r22, 0x00	; 0
    3790:	c7 01       	movw	r24, r14
    3792:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
	return true;
}
    3796:	81 2f       	mov	r24, r17
    3798:	26 96       	adiw	r28, 0x06	; 6
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	df 91       	pop	r29
    37a6:	cf 91       	pop	r28
    37a8:	1f 91       	pop	r17
    37aa:	0f 91       	pop	r16
    37ac:	ff 90       	pop	r15
    37ae:	ef 90       	pop	r14
    37b0:	df 90       	pop	r13
    37b2:	8f 90       	pop	r8
    37b4:	7f 90       	pop	r7
    37b6:	6f 90       	pop	r6
    37b8:	08 95       	ret

Disassembly of section .text.handle_read:

00001802 <handle_read>:
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);
static void read_validate_SI(char res[]);

bool handle_read(const char cmd[], char res[]){
    1802:	cf 92       	push	r12
    1804:	df 92       	push	r13
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	68 97       	sbiw	r28, 0x18	; 24
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	6b 01       	movw	r12, r22
    1824:	e8 2e       	mov	r14, r24
    1826:	f4 2e       	mov	r15, r20
    1828:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    182a:	21 e0       	ldi	r18, 0x01	; 1
    182c:	ae 01       	movw	r20, r28
    182e:	4f 5f       	subi	r20, 0xFF	; 255
    1830:	5f 4f       	sbci	r21, 0xFF	; 255
    1832:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    1836:	18 2f       	mov	r17, r24
    1838:	88 23       	and	r24, r24
    183a:	09 f4       	brne	.+2      	; 0x183e <handle_read+0x3c>
    183c:	31 c1       	rjmp	.+610    	; 0x1aa0 <handle_read+0x29e>
    183e:	8e 2d       	mov	r24, r14
    1840:	b6 01       	movw	r22, r12
    1842:	0e 94 c8 2b 	call	0x5790	; 0x5790 <count_parameters>
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	09 f4       	brne	.+2      	; 0x184c <handle_read+0x4a>
    184a:	29 c1       	rjmp	.+594    	; 0x1a9e <handle_read+0x29c>
	
	if (strcmp(par, RW_DEVEUI)==0)
    184c:	ce 01       	movw	r24, r28
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	6c 01       	movw	r12, r24
    1852:	20 e8       	ldi	r18, 0x80	; 128
    1854:	e2 2e       	mov	r14, r18
    1856:	29 e0       	ldi	r18, 0x09	; 9
    1858:	36 e0       	ldi	r19, 0x06	; 6
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	8e 2d       	mov	r24, r14
    185e:	b6 01       	movw	r22, r12
    1860:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1864:	89 2b       	or	r24, r25
    1866:	29 f4       	brne	.+10     	; 0x1872 <handle_read+0x70>
	{
		EM_get_deveui(res);
    1868:	8f 2d       	mov	r24, r15
    186a:	90 2f       	mov	r25, r16
    186c:	0e 94 46 33 	call	0x668c	; 0x668c <EM_get_deveui>
    1870:	17 c1       	rjmp	.+558    	; 0x1aa0 <handle_read+0x29e>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1872:	20 e1       	ldi	r18, 0x10	; 16
    1874:	36 e0       	ldi	r19, 0x06	; 6
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	8e 2d       	mov	r24, r14
    187a:	b6 01       	movw	r22, r12
    187c:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1880:	89 2b       	or	r24, r25
    1882:	29 f4       	brne	.+10     	; 0x188e <handle_read+0x8c>
	{
		EM_get_appeui(res);
    1884:	8f 2d       	mov	r24, r15
    1886:	90 2f       	mov	r25, r16
    1888:	0e 94 5e 33 	call	0x66bc	; 0x66bc <EM_get_appeui>
    188c:	09 c1       	rjmp	.+530    	; 0x1aa0 <handle_read+0x29e>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    188e:	27 e1       	ldi	r18, 0x17	; 23
    1890:	36 e0       	ldi	r19, 0x06	; 6
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	8e 2d       	mov	r24, r14
    1896:	b6 01       	movw	r22, r12
    1898:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    189c:	89 2b       	or	r24, r25
    189e:	29 f4       	brne	.+10     	; 0x18aa <handle_read+0xa8>
	{
		EM_get_appkey(res);
    18a0:	8f 2d       	mov	r24, r15
    18a2:	90 2f       	mov	r25, r16
    18a4:	0e 94 76 33 	call	0x66ec	; 0x66ec <EM_get_appkey>
    18a8:	fb c0       	rjmp	.+502    	; 0x1aa0 <handle_read+0x29e>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    18aa:	2e e1       	ldi	r18, 0x1E	; 30
    18ac:	36 e0       	ldi	r19, 0x06	; 6
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	8e 2d       	mov	r24, r14
    18b2:	b6 01       	movw	r22, r12
    18b4:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    18b8:	89 2b       	or	r24, r25
    18ba:	e1 f4       	brne	.+56     	; 0x18f4 <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    18bc:	ce 01       	movw	r24, r28
    18be:	45 96       	adiw	r24, 0x15	; 21
    18c0:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    18c4:	88 8d       	ldd	r24, Y+24	; 0x18
    18c6:	8f 93       	push	r24
    18c8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ca:	8f 93       	push	r24
    18cc:	8e 89       	ldd	r24, Y+22	; 0x16
    18ce:	8f 93       	push	r24
    18d0:	8d 89       	ldd	r24, Y+21	; 0x15
    18d2:	8f 93       	push	r24
    18d4:	83 e2       	ldi	r24, 0x23	; 35
    18d6:	96 e0       	ldi	r25, 0x06	; 6
    18d8:	a0 e0       	ldi	r26, 0x00	; 0
    18da:	af 93       	push	r26
    18dc:	9f 93       	push	r25
    18de:	8f 93       	push	r24
    18e0:	0f 93       	push	r16
    18e2:	ff 92       	push	r15
    18e4:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	d6 c0       	rjmp	.+428    	; 0x1aa0 <handle_read+0x29e>
	}
	else if(strcmp(par, RW_RRL)==0)
    18f4:	28 e2       	ldi	r18, 0x28	; 40
    18f6:	36 e0       	ldi	r19, 0x06	; 6
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	8e 2d       	mov	r24, r14
    18fc:	b6 01       	movw	r22, r12
    18fe:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1902:	89 2b       	or	r24, r25
    1904:	e1 f4       	brne	.+56     	; 0x193e <handle_read+0x13c>
	{
		EM_get_RRL(&val);
    1906:	ce 01       	movw	r24, r28
    1908:	45 96       	adiw	r24, 0x15	; 21
    190a:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    190e:	88 8d       	ldd	r24, Y+24	; 0x18
    1910:	8f 93       	push	r24
    1912:	8f 89       	ldd	r24, Y+23	; 0x17
    1914:	8f 93       	push	r24
    1916:	8e 89       	ldd	r24, Y+22	; 0x16
    1918:	8f 93       	push	r24
    191a:	8d 89       	ldd	r24, Y+21	; 0x15
    191c:	8f 93       	push	r24
    191e:	83 e2       	ldi	r24, 0x23	; 35
    1920:	96 e0       	ldi	r25, 0x06	; 6
    1922:	a0 e0       	ldi	r26, 0x00	; 0
    1924:	af 93       	push	r26
    1926:	9f 93       	push	r25
    1928:	8f 93       	push	r24
    192a:	0f 93       	push	r16
    192c:	ff 92       	push	r15
    192e:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	b1 c0       	rjmp	.+354    	; 0x1aa0 <handle_read+0x29e>
	}
	else if(strcmp(par, RW_VCC)==0)
    193e:	2d e2       	ldi	r18, 0x2D	; 45
    1940:	36 e0       	ldi	r19, 0x06	; 6
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	8e 2d       	mov	r24, r14
    1946:	b6 01       	movw	r22, r12
    1948:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    194c:	89 2b       	or	r24, r25
    194e:	e1 f4       	brne	.+56     	; 0x1988 <handle_read+0x186>
	{
		EM_get_Vcc(&val);
    1950:	ce 01       	movw	r24, r28
    1952:	45 96       	adiw	r24, 0x15	; 21
    1954:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1958:	88 8d       	ldd	r24, Y+24	; 0x18
    195a:	8f 93       	push	r24
    195c:	8f 89       	ldd	r24, Y+23	; 0x17
    195e:	8f 93       	push	r24
    1960:	8e 89       	ldd	r24, Y+22	; 0x16
    1962:	8f 93       	push	r24
    1964:	8d 89       	ldd	r24, Y+21	; 0x15
    1966:	8f 93       	push	r24
    1968:	83 e2       	ldi	r24, 0x23	; 35
    196a:	96 e0       	ldi	r25, 0x06	; 6
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	af 93       	push	r26
    1970:	9f 93       	push	r25
    1972:	8f 93       	push	r24
    1974:	0f 93       	push	r16
    1976:	ff 92       	push	r15
    1978:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	8c c0       	rjmp	.+280    	; 0x1aa0 <handle_read+0x29e>
	}
	else if(strcmp(par, RW_COLS)==0)
    1988:	22 e3       	ldi	r18, 0x32	; 50
    198a:	36 e0       	ldi	r19, 0x06	; 6
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	8e 2d       	mov	r24, r14
    1990:	b6 01       	movw	r22, r12
    1992:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1996:	89 2b       	or	r24, r25
    1998:	29 f4       	brne	.+10     	; 0x19a4 <handle_read+0x1a2>
	{
		read_cols(res);
    199a:	8f 2d       	mov	r24, r15
    199c:	90 2f       	mov	r25, r16
    199e:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <read_cols>
    19a2:	7e c0       	rjmp	.+252    	; 0x1aa0 <handle_read+0x29e>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    19a4:	27 e3       	ldi	r18, 0x37	; 55
    19a6:	36 e0       	ldi	r19, 0x06	; 6
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	8e 2d       	mov	r24, r14
    19ac:	b6 01       	movw	r22, r12
    19ae:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    19b2:	89 2b       	or	r24, r25
    19b4:	a1 f4       	brne	.+40     	; 0x19de <handle_read+0x1dc>
	{
		uint8_t val=EM_get_heat_up_time();
    19b6:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    19ba:	1f 92       	push	r1
    19bc:	8f 93       	push	r24
    19be:	81 e4       	ldi	r24, 0x41	; 65
    19c0:	96 e0       	ldi	r25, 0x06	; 6
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	af 93       	push	r26
    19c6:	9f 93       	push	r25
    19c8:	8f 93       	push	r24
    19ca:	0f 93       	push	r16
    19cc:	ff 92       	push	r15
    19ce:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	61 c0       	rjmp	.+194    	; 0x1aa0 <handle_read+0x29e>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    19de:	23 e5       	ldi	r18, 0x53	; 83
    19e0:	36 e0       	ldi	r19, 0x06	; 6
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	8e 2d       	mov	r24, r14
    19e6:	b6 01       	movw	r22, r12
    19e8:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    19ec:	89 2b       	or	r24, r25
    19ee:	a1 f4       	brne	.+40     	; 0x1a18 <handle_read+0x216>
	{
		uint16_t val=EM_get_air_pump_time();
    19f0:	0e 94 78 38 	call	0x70f0	; 0x70f0 <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    19f4:	9f 93       	push	r25
    19f6:	8f 93       	push	r24
    19f8:	8e e5       	ldi	r24, 0x5E	; 94
    19fa:	96 e0       	ldi	r25, 0x06	; 6
    19fc:	a0 e0       	ldi	r26, 0x00	; 0
    19fe:	af 93       	push	r26
    1a00:	9f 93       	push	r25
    1a02:	8f 93       	push	r24
    1a04:	0f 93       	push	r16
    1a06:	ff 92       	push	r15
    1a08:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	44 c0       	rjmp	.+136    	; 0x1aa0 <handle_read+0x29e>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1a18:	21 e7       	ldi	r18, 0x71	; 113
    1a1a:	36 e0       	ldi	r19, 0x06	; 6
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	8e 2d       	mov	r24, r14
    1a20:	b6 01       	movw	r22, r12
    1a22:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1a26:	89 2b       	or	r24, r25
    1a28:	a1 f4       	brne	.+40     	; 0x1a52 <handle_read+0x250>
	{
		uint8_t val=EM_get_sp_interval();
    1a2a:	0e 94 84 38 	call	0x7108	; 0x7108 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1a2e:	1f 92       	push	r1
    1a30:	8f 93       	push	r24
    1a32:	8d e7       	ldi	r24, 0x7D	; 125
    1a34:	96 e0       	ldi	r25, 0x06	; 6
    1a36:	a0 e0       	ldi	r26, 0x00	; 0
    1a38:	af 93       	push	r26
    1a3a:	9f 93       	push	r25
    1a3c:	8f 93       	push	r24
    1a3e:	0f 93       	push	r16
    1a40:	ff 92       	push	r15
    1a42:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	27 c0       	rjmp	.+78     	; 0x1aa0 <handle_read+0x29e>
	}
	else if(strcmp(par, RW_TIME)==0)
    1a52:	2c e9       	ldi	r18, 0x9C	; 156
    1a54:	36 e0       	ldi	r19, 0x06	; 6
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	8e 2d       	mov	r24, r14
    1a5a:	b6 01       	movw	r22, r12
    1a5c:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1a60:	89 2b       	or	r24, r25
    1a62:	29 f4       	brne	.+10     	; 0x1a6e <handle_read+0x26c>
	{
		read_time(res);
    1a64:	8f 2d       	mov	r24, r15
    1a66:	90 2f       	mov	r25, r16
    1a68:	0e 94 8d 23 	call	0x471a	; 0x471a <read_time>
    1a6c:	19 c0       	rjmp	.+50     	; 0x1aa0 <handle_read+0x29e>
	}
	else if(strcmp(par, RW_VALIDATE_SI)==0)
    1a6e:	21 ea       	ldi	r18, 0xA1	; 161
    1a70:	36 e0       	ldi	r19, 0x06	; 6
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	8e 2d       	mov	r24, r14
    1a76:	b6 01       	movw	r22, r12
    1a78:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1a7c:	89 2b       	or	r24, r25
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <handle_read+0x288>
	{
		read_validate_SI(res);
    1a80:	8f 2d       	mov	r24, r15
    1a82:	90 2f       	mov	r25, r16
    1a84:	0e 94 0e 18 	call	0x301c	; 0x301c <read_validate_SI>
    1a88:	0b c0       	rjmp	.+22     	; 0x1aa0 <handle_read+0x29e>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1a8a:	26 e1       	ldi	r18, 0x16	; 22
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a ea       	ldi	r20, 0xAA	; 170
    1a90:	56 e0       	ldi	r21, 0x06	; 6
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	8f 2d       	mov	r24, r15
    1a96:	90 2f       	mov	r25, r16
    1a98:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <handle_read+0x29e>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1a9e:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1aa0:	81 2f       	mov	r24, r17
    1aa2:	68 96       	adiw	r28, 0x18	; 24
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	08 95       	ret

Disassembly of section .text.handle_write:

00001d64 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1d64:	6f 92       	push	r6
    1d66:	7f 92       	push	r7
    1d68:	8f 92       	push	r8
    1d6a:	af 92       	push	r10
    1d6c:	bf 92       	push	r11
    1d6e:	cf 92       	push	r12
    1d70:	df 92       	push	r13
    1d72:	ef 92       	push	r14
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	64 97       	sbiw	r28, 0x14	; 20
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	3b 01       	movw	r6, r22
    1d8c:	88 2e       	mov	r8, r24
    1d8e:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1d90:	21 e0       	ldi	r18, 0x01	; 1
    1d92:	ae 01       	movw	r20, r28
    1d94:	4f 5f       	subi	r20, 0xFF	; 255
    1d96:	5f 4f       	sbci	r21, 0xFF	; 255
    1d98:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    1d9c:	18 2f       	mov	r17, r24
    1d9e:	88 23       	and	r24, r24
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <handle_write+0x40>
    1da2:	cd c0       	rjmp	.+410    	; 0x1f3e <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1da4:	ce 01       	movw	r24, r28
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	6c 01       	movw	r12, r24
    1daa:	20 e8       	ldi	r18, 0x80	; 128
    1dac:	e2 2e       	mov	r14, r18
    1dae:	29 e0       	ldi	r18, 0x09	; 9
    1db0:	36 e0       	ldi	r19, 0x06	; 6
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	8e 2d       	mov	r24, r14
    1db6:	b6 01       	movw	r22, r12
    1db8:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1dbc:	89 2b       	or	r24, r25
    1dbe:	39 f4       	brne	.+14     	; 0x1dce <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1dc0:	a5 01       	movw	r20, r10
    1dc2:	88 2d       	mov	r24, r8
    1dc4:	b3 01       	movw	r22, r6
    1dc6:	0e 94 93 25 	call	0x4b26	; 0x4b26 <write_deveui>
    1dca:	18 2f       	mov	r17, r24
    1dcc:	b8 c0       	rjmp	.+368    	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1dce:	20 e1       	ldi	r18, 0x10	; 16
    1dd0:	36 e0       	ldi	r19, 0x06	; 6
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	8e 2d       	mov	r24, r14
    1dd6:	b6 01       	movw	r22, r12
    1dd8:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1ddc:	89 2b       	or	r24, r25
    1dde:	39 f4       	brne	.+14     	; 0x1dee <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1de0:	a5 01       	movw	r20, r10
    1de2:	88 2d       	mov	r24, r8
    1de4:	b3 01       	movw	r22, r6
    1de6:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <write_appeui>
    1dea:	18 2f       	mov	r17, r24
    1dec:	a8 c0       	rjmp	.+336    	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1dee:	27 e1       	ldi	r18, 0x17	; 23
    1df0:	36 e0       	ldi	r19, 0x06	; 6
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	8e 2d       	mov	r24, r14
    1df6:	b6 01       	movw	r22, r12
    1df8:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1dfc:	89 2b       	or	r24, r25
    1dfe:	39 f4       	brne	.+14     	; 0x1e0e <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1e00:	a5 01       	movw	r20, r10
    1e02:	88 2d       	mov	r24, r8
    1e04:	b3 01       	movw	r22, r6
    1e06:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <write_appkey>
    1e0a:	18 2f       	mov	r17, r24
    1e0c:	98 c0       	rjmp	.+304    	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1e0e:	2e e1       	ldi	r18, 0x1E	; 30
    1e10:	36 e0       	ldi	r19, 0x06	; 6
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	8e 2d       	mov	r24, r14
    1e16:	b6 01       	movw	r22, r12
    1e18:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1e1c:	89 2b       	or	r24, r25
    1e1e:	39 f4       	brne	.+14     	; 0x1e2e <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1e20:	a5 01       	movw	r20, r10
    1e22:	88 2d       	mov	r24, r8
    1e24:	b3 01       	movw	r22, r6
    1e26:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <write_PPM_factor>
    1e2a:	18 2f       	mov	r17, r24
    1e2c:	88 c0       	rjmp	.+272    	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1e2e:	28 e2       	ldi	r18, 0x28	; 40
    1e30:	36 e0       	ldi	r19, 0x06	; 6
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	8e 2d       	mov	r24, r14
    1e36:	b6 01       	movw	r22, r12
    1e38:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1e3c:	89 2b       	or	r24, r25
    1e3e:	39 f4       	brne	.+14     	; 0x1e4e <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1e40:	a5 01       	movw	r20, r10
    1e42:	88 2d       	mov	r24, r8
    1e44:	b3 01       	movw	r22, r6
    1e46:	0e 94 76 2d 	call	0x5aec	; 0x5aec <write_RRL>
    1e4a:	18 2f       	mov	r17, r24
    1e4c:	78 c0       	rjmp	.+240    	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1e4e:	2d e2       	ldi	r18, 0x2D	; 45
    1e50:	36 e0       	ldi	r19, 0x06	; 6
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	8e 2d       	mov	r24, r14
    1e56:	b6 01       	movw	r22, r12
    1e58:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1e5c:	89 2b       	or	r24, r25
    1e5e:	39 f4       	brne	.+14     	; 0x1e6e <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1e60:	a5 01       	movw	r20, r10
    1e62:	88 2d       	mov	r24, r8
    1e64:	b3 01       	movw	r22, r6
    1e66:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <write_VCC>
    1e6a:	18 2f       	mov	r17, r24
    1e6c:	68 c0       	rjmp	.+208    	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    1e6e:	22 e3       	ldi	r18, 0x32	; 50
    1e70:	36 e0       	ldi	r19, 0x06	; 6
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	8e 2d       	mov	r24, r14
    1e76:	b6 01       	movw	r22, r12
    1e78:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1e7c:	89 2b       	or	r24, r25
    1e7e:	39 f4       	brne	.+14     	; 0x1e8e <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1e80:	a5 01       	movw	r20, r10
    1e82:	88 2d       	mov	r24, r8
    1e84:	b3 01       	movw	r22, r6
    1e86:	0e 94 d5 14 	call	0x29aa	; 0x29aa <write_cols>
    1e8a:	18 2f       	mov	r17, r24
    1e8c:	58 c0       	rjmp	.+176    	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1e8e:	27 e3       	ldi	r18, 0x37	; 55
    1e90:	36 e0       	ldi	r19, 0x06	; 6
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	8e 2d       	mov	r24, r14
    1e96:	b6 01       	movw	r22, r12
    1e98:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1e9c:	89 2b       	or	r24, r25
    1e9e:	39 f4       	brne	.+14     	; 0x1eae <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    1ea0:	a5 01       	movw	r20, r10
    1ea2:	88 2d       	mov	r24, r8
    1ea4:	b3 01       	movw	r22, r6
    1ea6:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <write_heat_up>
    1eaa:	18 2f       	mov	r17, r24
    1eac:	48 c0       	rjmp	.+144    	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1eae:	23 e5       	ldi	r18, 0x53	; 83
    1eb0:	36 e0       	ldi	r19, 0x06	; 6
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	8e 2d       	mov	r24, r14
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1ebc:	89 2b       	or	r24, r25
    1ebe:	39 f4       	brne	.+14     	; 0x1ece <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1ec0:	a5 01       	movw	r20, r10
    1ec2:	88 2d       	mov	r24, r8
    1ec4:	b3 01       	movw	r22, r6
    1ec6:	0e 94 19 2c 	call	0x5832	; 0x5832 <write_air_pump>
    1eca:	18 2f       	mov	r17, r24
    1ecc:	38 c0       	rjmp	.+112    	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1ece:	21 e7       	ldi	r18, 0x71	; 113
    1ed0:	36 e0       	ldi	r19, 0x06	; 6
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	8e 2d       	mov	r24, r14
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1edc:	89 2b       	or	r24, r25
    1ede:	39 f4       	brne	.+14     	; 0x1eee <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1ee0:	a5 01       	movw	r20, r10
    1ee2:	88 2d       	mov	r24, r8
    1ee4:	b3 01       	movw	r22, r6
    1ee6:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <write_sp_interval>
    1eea:	18 2f       	mov	r17, r24
    1eec:	28 c0       	rjmp	.+80     	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1eee:	20 ec       	ldi	r18, 0xC0	; 192
    1ef0:	36 e0       	ldi	r19, 0x06	; 6
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	8e 2d       	mov	r24, r14
    1ef6:	b6 01       	movw	r22, r12
    1ef8:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1efc:	89 2b       	or	r24, r25
    1efe:	39 f4       	brne	.+14     	; 0x1f0e <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1f00:	a5 01       	movw	r20, r10
    1f02:	88 2d       	mov	r24, r8
    1f04:	b3 01       	movw	r22, r6
    1f06:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <write_reset>
    1f0a:	18 2f       	mov	r17, r24
    1f0c:	18 c0       	rjmp	.+48     	; 0x1f3e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1f0e:	2c e9       	ldi	r18, 0x9C	; 156
    1f10:	36 e0       	ldi	r19, 0x06	; 6
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	8e 2d       	mov	r24, r14
    1f16:	b6 01       	movw	r22, r12
    1f18:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    1f1c:	89 2b       	or	r24, r25
    1f1e:	39 f4       	brne	.+14     	; 0x1f2e <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1f20:	a5 01       	movw	r20, r10
    1f22:	88 2d       	mov	r24, r8
    1f24:	b3 01       	movw	r22, r6
    1f26:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <write_time>
    1f2a:	18 2f       	mov	r17, r24
    1f2c:	08 c0       	rjmp	.+16     	; 0x1f3e <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1f2e:	26 e1       	ldi	r18, 0x16	; 22
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4a ea       	ldi	r20, 0xAA	; 170
    1f34:	56 e0       	ldi	r21, 0x06	; 6
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	c5 01       	movw	r24, r10
    1f3a:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
	}
	
}
    1f3e:	81 2f       	mov	r24, r17
    1f40:	64 96       	adiw	r28, 0x14	; 20
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	ef 90       	pop	r14
    1f54:	df 90       	pop	r13
    1f56:	cf 90       	pop	r12
    1f58:	bf 90       	pop	r11
    1f5a:	af 90       	pop	r10
    1f5c:	8f 90       	pop	r8
    1f5e:	7f 90       	pop	r7
    1f60:	6f 90       	pop	r6
    1f62:	08 95       	ret

Disassembly of section .text.handle_methane:

00002114 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    2114:	9f 92       	push	r9
    2116:	af 92       	push	r10
    2118:	bf 92       	push	r11
    211a:	cf 92       	push	r12
    211c:	df 92       	push	r13
    211e:	ef 92       	push	r14
    2120:	ff 92       	push	r15
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	2e 97       	sbiw	r28, 0x0e	; 14
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	94 2e       	mov	r9, r20
    213c:	a5 2e       	mov	r10, r21
	if(!get_parameter(cmd, par, 2)) return false;
    213e:	22 e0       	ldi	r18, 0x02	; 2
    2140:	42 e4       	ldi	r20, 0x42	; 66
    2142:	5e e0       	ldi	r21, 0x0E	; 14
    2144:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    2148:	b8 2e       	mov	r11, r24
    214a:	88 23       	and	r24, r24
    214c:	09 f4       	brne	.+2      	; 0x2150 <handle_methane+0x3c>
    214e:	92 c0       	rjmp	.+292    	; 0x2274 <handle_methane+0x160>
	
	if(strcmp(par, METH_POWER_ON)==0){
    2150:	82 e4       	ldi	r24, 0x42	; 66
    2152:	9e e0       	ldi	r25, 0x0E	; 14
    2154:	6c 01       	movw	r12, r24
    2156:	20 e8       	ldi	r18, 0x80	; 128
    2158:	e2 2e       	mov	r14, r18
    215a:	26 ec       	ldi	r18, 0xC6	; 198
    215c:	36 e0       	ldi	r19, 0x06	; 6
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	8e 2d       	mov	r24, r14
    2162:	b6 01       	movw	r22, r12
    2164:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    2168:	89 2b       	or	r24, r25
    216a:	79 f4       	brne	.+30     	; 0x218a <handle_methane+0x76>
		PM_HAL_meth_power_init();
    216c:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    2176:	28 e1       	ldi	r18, 0x18	; 24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	49 ec       	ldi	r20, 0xC9	; 201
    217c:	56 e0       	ldi	r21, 0x06	; 6
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	89 2d       	mov	r24, r9
    2182:	9a 2d       	mov	r25, r10
    2184:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
    2188:	75 c0       	rjmp	.+234    	; 0x2274 <handle_methane+0x160>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    218a:	21 ee       	ldi	r18, 0xE1	; 225
    218c:	36 e0       	ldi	r19, 0x06	; 6
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	8e 2d       	mov	r24, r14
    2192:	b6 01       	movw	r22, r12
    2194:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    2198:	89 2b       	or	r24, r25
    219a:	79 f4       	brne	.+30     	; 0x21ba <handle_methane+0xa6>
		PM_HAL_meth_power_init();
    219c:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    21a6:	29 e1       	ldi	r18, 0x19	; 25
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	45 ee       	ldi	r20, 0xE5	; 229
    21ac:	56 e0       	ldi	r21, 0x06	; 6
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	89 2d       	mov	r24, r9
    21b2:	9a 2d       	mov	r25, r10
    21b4:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
    21b8:	5d c0       	rjmp	.+186    	; 0x2274 <handle_methane+0x160>
	}
	else if(strcmp(par, METH_READ)==0)
    21ba:	2e ef       	ldi	r18, 0xFE	; 254
    21bc:	36 e0       	ldi	r19, 0x06	; 6
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	8e 2d       	mov	r24, r14
    21c2:	b6 01       	movw	r22, r12
    21c4:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    21c8:	89 2b       	or	r24, r25
    21ca:	09 f0       	breq	.+2      	; 0x21ce <handle_methane+0xba>
    21cc:	4a c0       	rjmp	.+148    	; 0x2262 <handle_methane+0x14e>
	{
		//Set parameters
		float vccx=0.0;
    21ce:	19 86       	std	Y+9, r1	; 0x09
    21d0:	1a 86       	std	Y+10, r1	; 0x0a
    21d2:	1b 86       	std	Y+11, r1	; 0x0b
    21d4:	1c 86       	std	Y+12, r1	; 0x0c
		float rrlx=0.0;
    21d6:	1d 82       	std	Y+5, r1	; 0x05
    21d8:	1e 82       	std	Y+6, r1	; 0x06
    21da:	1f 82       	std	Y+7, r1	; 0x07
    21dc:	18 86       	std	Y+8, r1	; 0x08
		float ppmx=0.0;
    21de:	19 82       	std	Y+1, r1	; 0x01
    21e0:	1a 82       	std	Y+2, r1	; 0x02
    21e2:	1b 82       	std	Y+3, r1	; 0x03
    21e4:	1c 82       	std	Y+4, r1	; 0x04
		
		EM_get_Vcc(&vccx);
    21e6:	ce 01       	movw	r24, r28
    21e8:	09 96       	adiw	r24, 0x09	; 9
    21ea:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <EM_get_Vcc>
		EM_get_RRL(&rrlx);
    21ee:	ce 01       	movw	r24, r28
    21f0:	05 96       	adiw	r24, 0x05	; 5
    21f2:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <EM_get_RRL>
		EM_get_ppmfactor(&ppmx);
    21f6:	ce 01       	movw	r24, r28
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <EM_get_ppmfactor>
		
		ADC_set_conf_parameters(vccx, rrlx, ppmx);
    21fe:	e9 80       	ldd	r14, Y+1	; 0x01
    2200:	fa 80       	ldd	r15, Y+2	; 0x02
    2202:	0b 81       	ldd	r16, Y+3	; 0x03
    2204:	1c 81       	ldd	r17, Y+4	; 0x04
    2206:	2d 81       	ldd	r18, Y+5	; 0x05
    2208:	3e 81       	ldd	r19, Y+6	; 0x06
    220a:	4f 81       	ldd	r20, Y+7	; 0x07
    220c:	58 85       	ldd	r21, Y+8	; 0x08
    220e:	69 85       	ldd	r22, Y+9	; 0x09
    2210:	7a 85       	ldd	r23, Y+10	; 0x0a
    2212:	8b 85       	ldd	r24, Y+11	; 0x0b
    2214:	9c 85       	ldd	r25, Y+12	; 0x0c
    2216:	0e 94 1f 30 	call	0x603e	; 0x603e <ADC_set_conf_parameters>
		
		
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    221a:	ce 01       	movw	r24, r28
    221c:	0d 96       	adiw	r24, 0x0d	; 13
    221e:	0e 94 1e 2b 	call	0x563c	; 0x563c <ADC_get_value>
    2222:	88 23       	and	r24, r24
    2224:	51 f0       	breq	.+20     	; 0x223a <handle_methane+0x126>
		{
			strcpy(res, "Error when reading data");
    2226:	28 e1       	ldi	r18, 0x18	; 24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	43 e0       	ldi	r20, 0x03	; 3
    222c:	57 e0       	ldi	r21, 0x07	; 7
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	89 2d       	mov	r24, r9
    2232:	9a 2d       	mov	r25, r10
    2234:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
    2238:	1d c0       	rjmp	.+58     	; 0x2274 <handle_methane+0x160>
		}else{
			sprintf(res, "PPM=%u", val);
    223a:	8e 85       	ldd	r24, Y+14	; 0x0e
    223c:	8f 93       	push	r24
    223e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2240:	8f 93       	push	r24
    2242:	8b e1       	ldi	r24, 0x1B	; 27
    2244:	97 e0       	ldi	r25, 0x07	; 7
    2246:	a0 e0       	ldi	r26, 0x00	; 0
    2248:	af 93       	push	r26
    224a:	9f 93       	push	r25
    224c:	8f 93       	push	r24
    224e:	af 92       	push	r10
    2250:	9f 92       	push	r9
    2252:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	09 c0       	rjmp	.+18     	; 0x2274 <handle_methane+0x160>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2262:	26 e1       	ldi	r18, 0x16	; 22
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	42 e2       	ldi	r20, 0x22	; 34
    2268:	57 e0       	ldi	r21, 0x07	; 7
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	89 2d       	mov	r24, r9
    226e:	9a 2d       	mov	r25, r10
    2270:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
	}
	return false;
}
    2274:	8b 2d       	mov	r24, r11
    2276:	2e 96       	adiw	r28, 0x0e	; 14
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	df 90       	pop	r13
    2290:	cf 90       	pop	r12
    2292:	bf 90       	pop	r11
    2294:	af 90       	pop	r10
    2296:	9f 90       	pop	r9
    2298:	08 95       	ret

Disassembly of section .text.handle_SCD30:

0000338e <handle_SCD30>:

static bool handle_SCD30(const char cmd[], char res[]){
    338e:	bf 92       	push	r11
    3390:	cf 92       	push	r12
    3392:	df 92       	push	r13
    3394:	ef 92       	push	r14
    3396:	ff 92       	push	r15
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	00 d0       	rcall	.+0      	; 0x33a2 <handle_SCD30+0x14>
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <handle_SCD30+0x16>
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <handle_SCD30+0x18>
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	f4 2e       	mov	r15, r20
    33ac:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    33ae:	22 e0       	ldi	r18, 0x02	; 2
    33b0:	42 e4       	ldi	r20, 0x42	; 66
    33b2:	5e e0       	ldi	r21, 0x0E	; 14
    33b4:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    33b8:	18 2f       	mov	r17, r24
    33ba:	88 23       	and	r24, r24
    33bc:	09 f4       	brne	.+2      	; 0x33c0 <handle_SCD30+0x32>
    33be:	62 c0       	rjmp	.+196    	; 0x3484 <handle_SCD30+0xf6>
	
	if(strcmp(par, SCD30_READ)==0){
    33c0:	62 e4       	ldi	r22, 0x42	; 66
    33c2:	7e e0       	ldi	r23, 0x0E	; 14
    33c4:	80 e8       	ldi	r24, 0x80	; 128
    33c6:	2e ef       	ldi	r18, 0xFE	; 254
    33c8:	36 e0       	ldi	r19, 0x06	; 6
    33ca:	40 e0       	ldi	r20, 0x00	; 0
    33cc:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    33d0:	89 2b       	or	r24, r25
    33d2:	09 f0       	breq	.+2      	; 0x33d6 <handle_SCD30+0x48>
    33d4:	4e c0       	rjmp	.+156    	; 0x3472 <handle_SCD30+0xe4>
		uint16_t co2, temp, humidity;
		if(SCD30_get_reading(&co2, &temp, &humidity)!=SCD30_STATUS_SUCCESS){
    33d6:	ae 01       	movw	r20, r28
    33d8:	4f 5f       	subi	r20, 0xFF	; 255
    33da:	5f 4f       	sbci	r21, 0xFF	; 255
    33dc:	be 01       	movw	r22, r28
    33de:	6d 5f       	subi	r22, 0xFD	; 253
    33e0:	7f 4f       	sbci	r23, 0xFF	; 255
    33e2:	ce 01       	movw	r24, r28
    33e4:	05 96       	adiw	r24, 0x05	; 5
    33e6:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <SCD30_get_reading>
    33ea:	88 23       	and	r24, r24
    33ec:	51 f0       	breq	.+20     	; 0x3402 <handle_SCD30+0x74>
			strcpy(res, "Error when reading data");
    33ee:	28 e1       	ldi	r18, 0x18	; 24
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	43 e0       	ldi	r20, 0x03	; 3
    33f4:	57 e0       	ldi	r21, 0x07	; 7
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	8f 2d       	mov	r24, r15
    33fa:	90 2f       	mov	r25, r16
    33fc:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
    3400:	41 c0       	rjmp	.+130    	; 0x3484 <handle_SCD30+0xf6>
		}else{
			float temp_f=(float)temp/10.00;
    3402:	6b 81       	ldd	r22, Y+3	; 0x03
    3404:	7c 81       	ldd	r23, Y+4	; 0x04
    3406:	80 e0       	ldi	r24, 0x00	; 0
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <__floatunsisf>
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e2       	ldi	r20, 0x20	; 32
    3414:	51 e4       	ldi	r21, 0x41	; 65
    3416:	0e 94 28 39 	call	0x7250	; 0x7250 <__divsf3>
    341a:	e6 2e       	mov	r14, r22
    341c:	d7 2e       	mov	r13, r23
    341e:	c8 2e       	mov	r12, r24
    3420:	b9 2e       	mov	r11, r25
			float hum_f=(float)humidity/10.00;
    3422:	69 81       	ldd	r22, Y+1	; 0x01
    3424:	7a 81       	ldd	r23, Y+2	; 0x02
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <__floatunsisf>
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e2       	ldi	r20, 0x20	; 32
    3434:	51 e4       	ldi	r21, 0x41	; 65
    3436:	0e 94 28 39 	call	0x7250	; 0x7250 <__divsf3>
			sprintf(res, "CO2=%u ppm, temp=%.1f C, humidity=%.1f%% RH", co2, temp_f, hum_f);
    343a:	9f 93       	push	r25
    343c:	8f 93       	push	r24
    343e:	7f 93       	push	r23
    3440:	6f 93       	push	r22
    3442:	bf 92       	push	r11
    3444:	cf 92       	push	r12
    3446:	df 92       	push	r13
    3448:	ef 92       	push	r14
    344a:	8e 81       	ldd	r24, Y+6	; 0x06
    344c:	8f 93       	push	r24
    344e:	8d 81       	ldd	r24, Y+5	; 0x05
    3450:	8f 93       	push	r24
    3452:	88 e3       	ldi	r24, 0x38	; 56
    3454:	97 e0       	ldi	r25, 0x07	; 7
    3456:	a0 e0       	ldi	r26, 0x00	; 0
    3458:	af 93       	push	r26
    345a:	9f 93       	push	r25
    345c:	8f 93       	push	r24
    345e:	0f 93       	push	r16
    3460:	ff 92       	push	r15
    3462:	0e 94 75 2f 	call	0x5eea	; 0x5eea <sprintf>
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	09 c0       	rjmp	.+18     	; 0x3484 <handle_SCD30+0xf6>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3472:	26 e1       	ldi	r18, 0x16	; 22
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	42 e2       	ldi	r20, 0x22	; 34
    3478:	57 e0       	ldi	r21, 0x07	; 7
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	8f 2d       	mov	r24, r15
    347e:	90 2f       	mov	r25, r16
    3480:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
	}
}
    3484:	81 2f       	mov	r24, r17
    3486:	26 96       	adiw	r28, 0x06	; 6
    3488:	0f b6       	in	r0, 0x3f	; 63
    348a:	f8 94       	cli
    348c:	de bf       	out	0x3e, r29	; 62
    348e:	0f be       	out	0x3f, r0	; 63
    3490:	cd bf       	out	0x3d, r28	; 61
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	1f 91       	pop	r17
    3498:	0f 91       	pop	r16
    349a:	ff 90       	pop	r15
    349c:	ef 90       	pop	r14
    349e:	df 90       	pop	r13
    34a0:	cf 90       	pop	r12
    34a2:	bf 90       	pop	r11
    34a4:	08 95       	ret

Disassembly of section .text.handle_pump:

0000441e <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    441e:	cf 92       	push	r12
    4420:	df 92       	push	r13
    4422:	ef 92       	push	r14
    4424:	0f 93       	push	r16
    4426:	1f 93       	push	r17
    4428:	cf 93       	push	r28
    442a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    442c:	22 e0       	ldi	r18, 0x02	; 2
    442e:	42 e4       	ldi	r20, 0x42	; 66
    4430:	5e e0       	ldi	r21, 0x0E	; 14
    4432:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    4436:	c8 2f       	mov	r28, r24
    4438:	88 23       	and	r24, r24
    443a:	d9 f1       	breq	.+118    	; 0x44b2 <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    443c:	82 e4       	ldi	r24, 0x42	; 66
    443e:	9e e0       	ldi	r25, 0x0E	; 14
    4440:	6c 01       	movw	r12, r24
    4442:	20 e8       	ldi	r18, 0x80	; 128
    4444:	e2 2e       	mov	r14, r18
    4446:	26 ec       	ldi	r18, 0xC6	; 198
    4448:	36 e0       	ldi	r19, 0x06	; 6
    444a:	40 e0       	ldi	r20, 0x00	; 0
    444c:	8e 2d       	mov	r24, r14
    444e:	b6 01       	movw	r22, r12
    4450:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    4454:	89 2b       	or	r24, r25
    4456:	71 f4       	brne	.+28     	; 0x4474 <handle_pump+0x56>
		PM_HAL_BC_power_init();
    4458:	0e 94 d5 37 	call	0x6faa	; 0x6faa <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    445c:	81 e0       	ldi	r24, 0x01	; 1
    445e:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    4462:	25 e1       	ldi	r18, 0x15	; 21
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	44 e6       	ldi	r20, 0x64	; 100
    4468:	57 e0       	ldi	r21, 0x07	; 7
    446a:	60 e0       	ldi	r22, 0x00	; 0
    446c:	c8 01       	movw	r24, r16
    446e:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
    4472:	1f c0       	rjmp	.+62     	; 0x44b2 <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    4474:	21 ee       	ldi	r18, 0xE1	; 225
    4476:	36 e0       	ldi	r19, 0x06	; 6
    4478:	40 e0       	ldi	r20, 0x00	; 0
    447a:	8e 2d       	mov	r24, r14
    447c:	b6 01       	movw	r22, r12
    447e:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    4482:	89 2b       	or	r24, r25
    4484:	71 f4       	brne	.+28     	; 0x44a2 <handle_pump+0x84>
		PM_HAL_BC_power_init();
    4486:	0e 94 d5 37 	call	0x6faa	; 0x6faa <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    448a:	80 e0       	ldi	r24, 0x00	; 0
    448c:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    4490:	26 e1       	ldi	r18, 0x16	; 22
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	49 e7       	ldi	r20, 0x79	; 121
    4496:	57 e0       	ldi	r21, 0x07	; 7
    4498:	60 e0       	ldi	r22, 0x00	; 0
    449a:	c8 01       	movw	r24, r16
    449c:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
    44a0:	08 c0       	rjmp	.+16     	; 0x44b2 <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    44a2:	26 e1       	ldi	r18, 0x16	; 22
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	42 e2       	ldi	r20, 0x22	; 34
    44a8:	57 e0       	ldi	r21, 0x07	; 7
    44aa:	60 e0       	ldi	r22, 0x00	; 0
    44ac:	c8 01       	movw	r24, r16
    44ae:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
	}
}
    44b2:	8c 2f       	mov	r24, r28
    44b4:	cf 91       	pop	r28
    44b6:	1f 91       	pop	r17
    44b8:	0f 91       	pop	r16
    44ba:	ef 90       	pop	r14
    44bc:	df 90       	pop	r13
    44be:	cf 90       	pop	r12
    44c0:	08 95       	ret

Disassembly of section .text.handle_sensor:

00004008 <handle_sensor>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_SCD30(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sensor(const char cmd[], char res[]){
    4008:	6f 92       	push	r6
    400a:	7f 92       	push	r7
    400c:	8f 92       	push	r8
    400e:	cf 92       	push	r12
    4010:	df 92       	push	r13
    4012:	ef 92       	push	r14
    4014:	0f 93       	push	r16
    4016:	1f 93       	push	r17
    4018:	cf 93       	push	r28
    401a:	3b 01       	movw	r6, r22
    401c:	88 2e       	mov	r8, r24
    401e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    4020:	21 e0       	ldi	r18, 0x01	; 1
    4022:	42 e4       	ldi	r20, 0x42	; 66
    4024:	5e e0       	ldi	r21, 0x0E	; 14
    4026:	0e 94 42 23 	call	0x4684	; 0x4684 <get_parameter>
    402a:	c8 2f       	mov	r28, r24
    402c:	88 23       	and	r24, r24
    402e:	e9 f1       	breq	.+122    	; 0x40aa <handle_sensor+0xa2>
	
	if(strcmp(par, S_METH)==0){
    4030:	82 e4       	ldi	r24, 0x42	; 66
    4032:	9e e0       	ldi	r25, 0x0E	; 14
    4034:	6c 01       	movw	r12, r24
    4036:	20 e8       	ldi	r18, 0x80	; 128
    4038:	e2 2e       	mov	r14, r18
    403a:	2f e8       	ldi	r18, 0x8F	; 143
    403c:	37 e0       	ldi	r19, 0x07	; 7
    403e:	40 e0       	ldi	r20, 0x00	; 0
    4040:	8e 2d       	mov	r24, r14
    4042:	b6 01       	movw	r22, r12
    4044:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    4048:	89 2b       	or	r24, r25
    404a:	39 f4       	brne	.+14     	; 0x405a <handle_sensor+0x52>
		return handle_methane(cmd, res);
    404c:	a8 01       	movw	r20, r16
    404e:	88 2d       	mov	r24, r8
    4050:	b3 01       	movw	r22, r6
    4052:	0e 94 8a 10 	call	0x2114	; 0x2114 <handle_methane>
    4056:	c8 2f       	mov	r28, r24
    4058:	28 c0       	rjmp	.+80     	; 0x40aa <handle_sensor+0xa2>
	}else if(strcmp(par, S_SCD30)==0){
    405a:	24 e9       	ldi	r18, 0x94	; 148
    405c:	37 e0       	ldi	r19, 0x07	; 7
    405e:	40 e0       	ldi	r20, 0x00	; 0
    4060:	8e 2d       	mov	r24, r14
    4062:	b6 01       	movw	r22, r12
    4064:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    4068:	89 2b       	or	r24, r25
    406a:	39 f4       	brne	.+14     	; 0x407a <handle_sensor+0x72>
		return handle_SCD30(cmd, res);
    406c:	a8 01       	movw	r20, r16
    406e:	88 2d       	mov	r24, r8
    4070:	b3 01       	movw	r22, r6
    4072:	0e 94 c7 19 	call	0x338e	; 0x338e <handle_SCD30>
    4076:	c8 2f       	mov	r28, r24
    4078:	18 c0       	rjmp	.+48     	; 0x40aa <handle_sensor+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    407a:	2a e9       	ldi	r18, 0x9A	; 154
    407c:	37 e0       	ldi	r19, 0x07	; 7
    407e:	40 e0       	ldi	r20, 0x00	; 0
    4080:	8e 2d       	mov	r24, r14
    4082:	b6 01       	movw	r22, r12
    4084:	0e 94 40 30 	call	0x6080	; 0x6080 <strcmp>
    4088:	89 2b       	or	r24, r25
    408a:	39 f4       	brne	.+14     	; 0x409a <handle_sensor+0x92>
		return handle_pump(cmd, res);
    408c:	a8 01       	movw	r20, r16
    408e:	88 2d       	mov	r24, r8
    4090:	b3 01       	movw	r22, r6
    4092:	0e 94 0f 22 	call	0x441e	; 0x441e <handle_pump>
    4096:	c8 2f       	mov	r28, r24
    4098:	08 c0       	rjmp	.+16     	; 0x40aa <handle_sensor+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    409a:	26 e1       	ldi	r18, 0x16	; 22
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	42 e2       	ldi	r20, 0x22	; 34
    40a0:	57 e0       	ldi	r21, 0x07	; 7
    40a2:	60 e0       	ldi	r22, 0x00	; 0
    40a4:	c8 01       	movw	r24, r16
    40a6:	0e 94 15 33 	call	0x662a	; 0x662a <memcpy>
		return true;
	}
}
    40aa:	8c 2f       	mov	r24, r28
    40ac:	cf 91       	pop	r28
    40ae:	1f 91       	pop	r17
    40b0:	0f 91       	pop	r16
    40b2:	ef 90       	pop	r14
    40b4:	df 90       	pop	r13
    40b6:	cf 90       	pop	r12
    40b8:	8f 90       	pop	r8
    40ba:	7f 90       	pop	r7
    40bc:	6f 90       	pop	r6
    40be:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

0000693a <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    693a:	0e 94 57 37 	call	0x6eae	; 0x6eae <TWI_HAL_init>
	PM_HAL_adc_power_init();
    693e:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    6942:	81 e0       	ldi	r24, 0x01	; 1
    6944:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    6948:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    694c:	81 e0       	ldi	r24, 0x01	; 1
    694e:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    6952:	0e 94 c5 34 	call	0x698a	; 0x698a <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    6956:	88 23       	and	r24, r24
    6958:	11 f0       	breq	.+4      	; 0x695e <init_methane_SCD30+0x24>
    695a:	80 e0       	ldi	r24, 0x00	; 0
    695c:	08 95       	ret
	return true;
    695e:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    6960:	08 95       	ret

Disassembly of section .text.count_parameters:

00005790 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    5790:	6f 92       	push	r6
    5792:	7f 92       	push	r7
    5794:	8f 92       	push	r8
    5796:	cf 92       	push	r12
    5798:	df 92       	push	r13
    579a:	ef 92       	push	r14
    579c:	3b 01       	movw	r6, r22
    579e:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    57a0:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    57a4:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    57aa:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    57ac:	10 c0       	rjmp	.+32     	; 0x57ce <count_parameters+0x3e>
	{
		if(src[i]==' '){
    57ae:	e8 2c       	mov	r14, r8
    57b0:	63 01       	movw	r12, r6
    57b2:	c2 0e       	add	r12, r18
    57b4:	d3 1e       	adc	r13, r19
    57b6:	e1 1c       	adc	r14, r1
    57b8:	37 fd       	sbrc	r19, 7
    57ba:	ea 94       	dec	r14
    57bc:	f6 01       	movw	r30, r12
    57be:	94 91       	lpm	r25, Z
    57c0:	e7 fc       	sbrc	r14, 7
    57c2:	90 81       	ld	r25, Z
    57c4:	90 32       	cpi	r25, 0x20	; 32
    57c6:	09 f4       	brne	.+2      	; 0x57ca <count_parameters+0x3a>
			cnt++;
    57c8:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    57ca:	2f 5f       	subi	r18, 0xFF	; 255
    57cc:	3f 4f       	sbci	r19, 0xFF	; 255
    57ce:	26 17       	cp	r18, r22
    57d0:	37 07       	cpc	r19, r23
    57d2:	68 f3       	brcs	.-38     	; 0x57ae <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    57d4:	ef 90       	pop	r14
    57d6:	df 90       	pop	r13
    57d8:	cf 90       	pop	r12
    57da:	8f 90       	pop	r8
    57dc:	7f 90       	pop	r7
    57de:	6f 90       	pop	r6
    57e0:	08 95       	ret

Disassembly of section .text.par_index:

00004ed0 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    4ed0:	cf 92       	push	r12
    4ed2:	df 92       	push	r13
    4ed4:	ef 92       	push	r14
    4ed6:	0f 93       	push	r16
    4ed8:	1f 93       	push	r17
    4eda:	cf 93       	push	r28
    4edc:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4ede:	44 23       	and	r20, r20
    4ee0:	29 f1       	breq	.+74     	; 0x4f2c <par_index+0x5c>
    4ee2:	04 2f       	mov	r16, r20
    4ee4:	6b 01       	movw	r12, r22
    4ee6:	e8 2e       	mov	r14, r24
    4ee8:	c0 e0       	ldi	r28, 0x00	; 0
    4eea:	d0 e0       	ldi	r29, 0x00	; 0
    4eec:	10 e0       	ldi	r17, 0x00	; 0
    4eee:	14 c0       	rjmp	.+40     	; 0x4f18 <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    4ef0:	ae 2d       	mov	r26, r14
    4ef2:	c6 01       	movw	r24, r12
    4ef4:	8c 0f       	add	r24, r28
    4ef6:	9d 1f       	adc	r25, r29
    4ef8:	a1 1d       	adc	r26, r1
    4efa:	d7 fd       	sbrc	r29, 7
    4efc:	aa 95       	dec	r26
    4efe:	fc 01       	movw	r30, r24
    4f00:	84 91       	lpm	r24, Z
    4f02:	a7 fd       	sbrc	r26, 7
    4f04:	80 81       	ld	r24, Z
    4f06:	80 32       	cpi	r24, 0x20	; 32
    4f08:	31 f4       	brne	.+12     	; 0x4f16 <par_index+0x46>
			cnt++;
    4f0a:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    4f0c:	01 13       	cpse	r16, r17
    4f0e:	03 c0       	rjmp	.+6      	; 0x4f16 <par_index+0x46>
				return i+1;
    4f10:	ce 01       	movw	r24, r28
    4f12:	01 96       	adiw	r24, 0x01	; 1
    4f14:	0d c0       	rjmp	.+26     	; 0x4f30 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    4f16:	21 96       	adiw	r28, 0x01	; 1
    4f18:	8e 2d       	mov	r24, r14
    4f1a:	b6 01       	movw	r22, r12
    4f1c:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    4f20:	c8 17       	cp	r28, r24
    4f22:	d9 07       	cpc	r29, r25
    4f24:	28 f3       	brcs	.-54     	; 0x4ef0 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    4f26:	80 e0       	ldi	r24, 0x00	; 0
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	02 c0       	rjmp	.+4      	; 0x4f30 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    4f30:	df 91       	pop	r29
    4f32:	cf 91       	pop	r28
    4f34:	1f 91       	pop	r17
    4f36:	0f 91       	pop	r16
    4f38:	ef 90       	pop	r14
    4f3a:	df 90       	pop	r13
    4f3c:	cf 90       	pop	r12
    4f3e:	08 95       	ret

Disassembly of section .text.get_parameter:

00004684 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    4684:	8f 92       	push	r8
    4686:	9f 92       	push	r9
    4688:	af 92       	push	r10
    468a:	cf 92       	push	r12
    468c:	df 92       	push	r13
    468e:	ef 92       	push	r14
    4690:	ff 92       	push	r15
    4692:	0f 93       	push	r16
    4694:	1f 93       	push	r17
    4696:	cf 93       	push	r28
    4698:	df 93       	push	r29
    469a:	6b 01       	movw	r12, r22
    469c:	e8 2e       	mov	r14, r24
    469e:	ea 01       	movw	r28, r20
    46a0:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    46a2:	0e 94 c8 2b 	call	0x5790	; 0x5790 <count_parameters>
	if(pars<parNo) return false;
    46a6:	8f 15       	cp	r24, r15
    46a8:	58 f1       	brcs	.+86     	; 0x4700 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    46aa:	8e 2d       	mov	r24, r14
    46ac:	b6 01       	movw	r22, r12
    46ae:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    46b2:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    46b4:	4f 2d       	mov	r20, r15
    46b6:	8e 2d       	mov	r24, r14
    46b8:	b6 01       	movw	r22, r12
    46ba:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <par_index>
	uint8_t parLen=0;
    46be:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    46c0:	15 c0       	rjmp	.+42     	; 0x46ec <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    46c2:	46 01       	movw	r8, r12
    46c4:	ae 2c       	mov	r10, r14
    46c6:	82 0e       	add	r8, r18
    46c8:	93 1e       	adc	r9, r19
    46ca:	a1 1c       	adc	r10, r1
    46cc:	37 fd       	sbrc	r19, 7
    46ce:	aa 94       	dec	r10
    46d0:	4a 2d       	mov	r20, r10
    46d2:	94 01       	movw	r18, r8
    46d4:	f4 01       	movw	r30, r8
    46d6:	24 91       	lpm	r18, Z
    46d8:	47 fd       	sbrc	r20, 7
    46da:	20 81       	ld	r18, Z
    46dc:	20 32       	cpi	r18, 0x20	; 32
    46de:	59 f0       	breq	.+22     	; 0x46f6 <get_parameter+0x72>
		par[parLen++]=src[i];
    46e0:	fe 01       	movw	r30, r28
    46e2:	e9 0f       	add	r30, r25
    46e4:	f1 1d       	adc	r31, r1
    46e6:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    46e8:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    46ea:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    46ec:	28 2f       	mov	r18, r24
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	20 17       	cp	r18, r16
    46f2:	31 07       	cpc	r19, r17
    46f4:	30 f3       	brcs	.-52     	; 0x46c2 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    46f6:	c9 0f       	add	r28, r25
    46f8:	d1 1d       	adc	r29, r1
    46fa:	18 82       	st	Y, r1
	
	return true;
    46fc:	81 e0       	ldi	r24, 0x01	; 1
    46fe:	01 c0       	rjmp	.+2      	; 0x4702 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    4700:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    4702:	df 91       	pop	r29
    4704:	cf 91       	pop	r28
    4706:	1f 91       	pop	r17
    4708:	0f 91       	pop	r16
    470a:	ff 90       	pop	r15
    470c:	ef 90       	pop	r14
    470e:	df 90       	pop	r13
    4710:	cf 90       	pop	r12
    4712:	af 90       	pop	r10
    4714:	9f 90       	pop	r9
    4716:	8f 90       	pop	r8
    4718:	08 95       	ret

Disassembly of section .text.decode_stage_response:

00006da6 <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    6da6:	88 23       	and	r24, r24
    6da8:	19 f0       	breq	.+6      	; 0x6db0 <decode_stage_response+0xa>
    6daa:	81 30       	cpi	r24, 0x01	; 1
    6dac:	29 f0       	breq	.+10     	; 0x6db8 <decode_stage_response+0x12>
    6dae:	02 c0       	rjmp	.+4      	; 0x6db4 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    6db0:	81 e1       	ldi	r24, 0x11	; 17
    6db2:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    6db4:	87 e1       	ldi	r24, 0x17	; 23
    6db6:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    6db8:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6dba:	08 95       	ret

Disassembly of section .text.decode_join_response:

00006ccc <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    6ccc:	82 30       	cpi	r24, 0x02	; 2
    6cce:	51 f0       	breq	.+20     	; 0x6ce4 <decode_join_response+0x18>
    6cd0:	83 30       	cpi	r24, 0x03	; 3
    6cd2:	21 f0       	breq	.+8      	; 0x6cdc <decode_join_response+0x10>
    6cd4:	81 11       	cpse	r24, r1
    6cd6:	04 c0       	rjmp	.+8      	; 0x6ce0 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    6cd8:	83 e0       	ldi	r24, 0x03	; 3
    6cda:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    6cdc:	85 e0       	ldi	r24, 0x05	; 5
    6cde:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    6ce0:	87 e1       	ldi	r24, 0x17	; 23
    6ce2:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    6ce4:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    6ce6:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

000069d4 <decode_header_tail_response>:
	//MRPP_get_tail_package(package, &package_length);
	//return LM_send_uplink(package, package_length);
//}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    69d4:	82 30       	cpi	r24, 0x02	; 2
    69d6:	51 f0       	breq	.+20     	; 0x69ec <decode_header_tail_response+0x18>
    69d8:	18 f4       	brcc	.+6      	; 0x69e0 <decode_header_tail_response+0xc>
    69da:	88 23       	and	r24, r24
    69dc:	59 f0       	breq	.+22     	; 0x69f4 <decode_header_tail_response+0x20>
    69de:	08 c0       	rjmp	.+16     	; 0x69f0 <decode_header_tail_response+0x1c>
    69e0:	84 30       	cpi	r24, 0x04	; 4
    69e2:	41 f0       	breq	.+16     	; 0x69f4 <decode_header_tail_response+0x20>
    69e4:	85 30       	cpi	r24, 0x05	; 5
    69e6:	21 f4       	brne	.+8      	; 0x69f0 <decode_header_tail_response+0x1c>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		case LM_STATUS_INV_DATA_LEN:
			return MAINPG_PAYLOAD_INV_LEN;
    69e8:	86 e1       	ldi	r24, 0x16	; 22
    69ea:	08 95       	ret
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    69ec:	84 2f       	mov	r24, r20
    69ee:	08 95       	ret
			
		case LM_STATUS_INV_DATA_LEN:
			return MAINPG_PAYLOAD_INV_LEN;
			
		default:
			return MAINPG_FATAL_ERROR;
    69f0:	87 e1       	ldi	r24, 0x17	; 23
    69f2:	08 95       	ret

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
			return success;
    69f4:	86 2f       	mov	r24, r22
			return MAINPG_PAYLOAD_INV_LEN;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    69f6:	08 95       	ret

Disassembly of section .text.decode_payload_inv_len_response:

00006c02 <decode_payload_inv_len_response>:

static MAINPG_STATES decode_payload_inv_len_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    6c02:	82 30       	cpi	r24, 0x02	; 2
    6c04:	49 f0       	breq	.+18     	; 0x6c18 <decode_payload_inv_len_response+0x16>
    6c06:	18 f4       	brcc	.+6      	; 0x6c0e <decode_payload_inv_len_response+0xc>
    6c08:	88 23       	and	r24, r24
    6c0a:	41 f0       	breq	.+16     	; 0x6c1c <decode_payload_inv_len_response+0x1a>
    6c0c:	03 c0       	rjmp	.+6      	; 0x6c14 <decode_payload_inv_len_response+0x12>
    6c0e:	84 50       	subi	r24, 0x04	; 4
    6c10:	82 30       	cpi	r24, 0x02	; 2
    6c12:	20 f0       	brcs	.+8      	; 0x6c1c <decode_payload_inv_len_response+0x1a>
		
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
		
		default:
			return MAINPG_FATAL_ERROR;
    6c14:	87 e1       	ldi	r24, 0x17	; 23
    6c16:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
		
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    6c18:	84 2f       	mov	r24, r20
    6c1a:	08 95       	ret
static MAINPG_STATES decode_payload_inv_len_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    6c1c:	86 2f       	mov	r24, r22
			return tryAgain;
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6c1e:	08 95       	ret

Disassembly of section .text.read_eeprom:

00005532 <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    5532:	87 e6       	ldi	r24, 0x67	; 103
    5534:	9e e0       	ldi	r25, 0x0E	; 14
    5536:	0e 94 46 33 	call	0x668c	; 0x668c <EM_get_deveui>
	EM_get_appeui(appeui);
    553a:	86 e5       	ldi	r24, 0x56	; 86
    553c:	9e e0       	ldi	r25, 0x0E	; 14
    553e:	0e 94 5e 33 	call	0x66bc	; 0x66bc <EM_get_appeui>
	EM_get_appkey(appkey);
    5542:	81 e2       	ldi	r24, 0x21	; 33
    5544:	9e e0       	ldi	r25, 0x0E	; 14
    5546:	0e 94 76 33 	call	0x66ec	; 0x66ec <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    554a:	6b e4       	ldi	r22, 0x4B	; 75
    554c:	86 ed       	ldi	r24, 0xD6	; 214
    554e:	9d e0       	ldi	r25, 0x0D	; 13
    5550:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <EM_get_collections>
	EM_get_Vcc(&vccx);
    5554:	83 eb       	ldi	r24, 0xB3	; 179
    5556:	9e e0       	ldi	r25, 0x0E	; 14
    5558:	0e 94 f2 35 	call	0x6be4	; 0x6be4 <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    555c:	8f ea       	ldi	r24, 0xAF	; 175
    555e:	9e e0       	ldi	r25, 0x0E	; 14
    5560:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    5564:	8b ea       	ldi	r24, 0xAB	; 171
    5566:	9e e0       	ldi	r25, 0x0E	; 14
    5568:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    556c:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <EM_get_heat_up_time>
    5570:	80 93 ef 0e 	sts	0x0EEF, r24	; 0x800eef <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    5574:	0e 94 78 38 	call	0x70f0	; 0x70f0 <EM_get_air_pump_time>
    5578:	90 93 da 0e 	sts	0x0EDA, r25	; 0x800eda <airPumpTime+0x1>
    557c:	80 93 d9 0e 	sts	0x0ED9, r24	; 0x800ed9 <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    5580:	0e 94 84 38 	call	0x7108	; 0x7108 <EM_get_sp_interval>
    5584:	80 93 ee 0e 	sts	0x0EEE, r24	; 0x800eee <samplingProcessInterval>
	return true;
}
    5588:	81 e0       	ldi	r24, 0x01	; 1
    558a:	08 95       	ret

Disassembly of section .text.join_lora:

00006f1a <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    6f1a:	41 e2       	ldi	r20, 0x21	; 33
    6f1c:	5e e0       	ldi	r21, 0x0E	; 14
    6f1e:	66 e5       	ldi	r22, 0x56	; 86
    6f20:	7e e0       	ldi	r23, 0x0E	; 14
    6f22:	87 e6       	ldi	r24, 0x67	; 103
    6f24:	9e e0       	ldi	r25, 0x0E	; 14
    6f26:	0e 94 3d 39 	call	0x727a	; 0x727a <LM_join_network>
}
    6f2a:	08 95       	ret

Disassembly of section .text.set_wakeup:

000071da <set_wakeup>:
			return MAINPG_FATAL_ERROR;
	}
}

static RTC_STATUS set_wakeup(){
	return RTC_set_wake_up_interrupt(samplingProcessInterval);
    71da:	80 91 ee 0e 	lds	r24, 0x0EEE	; 0x800eee <samplingProcessInterval>
    71de:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <RTC_set_wake_up_interrupt>
	//return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
}
    71e2:	08 95       	ret

Disassembly of section .text.send_msg:

00007298 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    7298:	0e 94 61 22 	call	0x44c2	; 0x44c2 <uart1_hal_send_string>
    729c:	08 95       	ret

Disassembly of section .text.stage_0:

00003146 <stage_0>:


/************************************************************************/
/* Stage 0                                                              */
/************************************************************************/
static STAGE_STATUS stage_0(){
    3146:	cf 93       	push	r28
    3148:	df 93       	push	r29
	RTC_STATUS rtcStatus;
	bool res;
	
	while(1){
		switch(state_s0){
    314a:	80 91 f4 0e 	lds	r24, 0x0EF4	; 0x800ef4 <state_s0>
    314e:	82 30       	cpi	r24, 0x02	; 2
    3150:	71 f1       	breq	.+92     	; 0x31ae <stage_0+0x68>
    3152:	28 f4       	brcc	.+10     	; 0x315e <stage_0+0x18>
    3154:	88 23       	and	r24, r24
    3156:	59 f0       	breq	.+22     	; 0x316e <stage_0+0x28>
    3158:	81 30       	cpi	r24, 0x01	; 1
    315a:	b1 f1       	breq	.+108    	; 0x31c8 <stage_0+0x82>
    315c:	f6 cf       	rjmp	.-20     	; 0x314a <stage_0+0x4>
    315e:	84 30       	cpi	r24, 0x04	; 4
    3160:	09 f4       	brne	.+2      	; 0x3164 <stage_0+0x1e>
    3162:	71 c0       	rjmp	.+226    	; 0x3246 <stage_0+0x100>
    3164:	d8 f1       	brcs	.+118    	; 0x31dc <stage_0+0x96>
    3166:	85 30       	cpi	r24, 0x05	; 5
    3168:	09 f4       	brne	.+2      	; 0x316c <stage_0+0x26>
    316a:	44 c0       	rjmp	.+136    	; 0x31f4 <stage_0+0xae>
    316c:	ee cf       	rjmp	.-36     	; 0x314a <stage_0+0x4>
			case STAGE_INIT:
				print_debug("State: S0 INIT");
    316e:	66 e6       	ldi	r22, 0x66	; 102
    3170:	72 e0       	ldi	r23, 0x02	; 2
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				SCD30_init_c02_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    3178:	c6 ed       	ldi	r28, 0xD6	; 214
    317a:	dd e0       	ldi	r29, 0x0D	; 13
    317c:	68 81       	ld	r22, Y
    317e:	4c e5       	ldi	r20, 0x5C	; 92
    3180:	5b e0       	ldi	r21, 0x0B	; 11
    3182:	8a 81       	ldd	r24, Y+2	; 0x02
    3184:	9b 81       	ldd	r25, Y+3	; 0x03
    3186:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S0_TEMP].samplingInterval, cols[S0_TEMP].samplings, temp_data);
    318a:	6d 81       	ldd	r22, Y+5	; 0x05
    318c:	44 e9       	ldi	r20, 0x94	; 148
    318e:	5a e0       	ldi	r21, 0x0A	; 10
    3190:	8f 81       	ldd	r24, Y+7	; 0x07
    3192:	98 85       	ldd	r25, Y+8	; 0x08
    3194:	0e 94 7b 37 	call	0x6ef6	; 0x6ef6 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S0_HUM].samplingInterval, cols[S0_HUM].samplings, hum_data);
    3198:	6a 85       	ldd	r22, Y+10	; 0x0a
    319a:	4c ec       	ldi	r20, 0xCC	; 204
    319c:	59 e0       	ldi	r21, 0x09	; 9
    319e:	8c 85       	ldd	r24, Y+12	; 0x0c
    31a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31a2:	0e 94 84 37 	call	0x6f08	; 0x6f08 <SCD30_init_humidity_sampling>
				state_s0=STAGE_START;
    31a6:	82 e0       	ldi	r24, 0x02	; 2
    31a8:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    31ac:	ce cf       	rjmp	.-100    	; 0x314a <stage_0+0x4>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    31ae:	80 91 ef 0e 	lds	r24, 0x0EEF	; 0x800eef <methHeatUpTime>
    31b2:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <ADC_meth_sens_power_on>
				res=SCD30_start_sampling();
    31b6:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    31ba:	88 23       	and	r24, r24
    31bc:	09 f4       	brne	.+2      	; 0x31c0 <stage_0+0x7a>
    31be:	4c c0       	rjmp	.+152    	; 0x3258 <stage_0+0x112>
				
				state_s0=STAGE_GET_TIME;
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    31c6:	c1 cf       	rjmp	.-126    	; 0x314a <stage_0+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    31c8:	84 e9       	ldi	r24, 0x94	; 148
    31ca:	9e e0       	ldi	r25, 0x0E	; 14
    31cc:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    31d0:	81 11       	cpse	r24, r1
    31d2:	44 c0       	rjmp	.+136    	; 0x325c <stage_0+0x116>
				state_s0=STAGE_WAIT;
    31d4:	83 e0       	ldi	r24, 0x03	; 3
    31d6:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    31da:	b7 cf       	rjmp	.-146    	; 0x314a <stage_0+0x4>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    31dc:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <ADC_meth_sens_ready>
    31e0:	88 23       	and	r24, r24
    31e2:	f1 f1       	breq	.+124    	; 0x3260 <stage_0+0x11a>
    31e4:	0e 94 7d 32 	call	0x64fa	; 0x64fa <SCD30_is_sampling_done>
    31e8:	88 23       	and	r24, r24
    31ea:	e1 f1       	breq	.+120    	; 0x3264 <stage_0+0x11e>
				state_s0=STAGE_UPDATE_MRPP;
    31ec:	85 e0       	ldi	r24, 0x05	; 5
    31ee:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    31f2:	ab cf       	rjmp	.-170    	; 0x314a <stage_0+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    31f4:	27 eb       	ldi	r18, 0xB7	; 183
    31f6:	3e e0       	ldi	r19, 0x0E	; 14
    31f8:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    31fc:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    3200:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    3204:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    3208:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    320c:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    3210:	0e 94 36 19 	call	0x326c	; 0x326c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    3214:	4c e5       	ldi	r20, 0x5C	; 92
    3216:	5b e0       	ldi	r21, 0x0B	; 11
    3218:	67 eb       	ldi	r22, 0xB7	; 183
    321a:	7e e0       	ldi	r23, 0x0E	; 14
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S0_ID_TEMP, ts, temp_data);
    3222:	44 e9       	ldi	r20, 0x94	; 148
    3224:	5a e0       	ldi	r21, 0x0A	; 10
    3226:	67 eb       	ldi	r22, 0xB7	; 183
    3228:	7e e0       	ldi	r23, 0x0E	; 14
    322a:	82 e0       	ldi	r24, 0x02	; 2
    322c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S0_ID_HUM, ts, hum_data);
    3230:	4c ec       	ldi	r20, 0xCC	; 204
    3232:	59 e0       	ldi	r21, 0x09	; 9
    3234:	67 eb       	ldi	r22, 0xB7	; 183
    3236:	7e e0       	ldi	r23, 0x0E	; 14
    3238:	83 e0       	ldi	r24, 0x03	; 3
    323a:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    323e:	84 e0       	ldi	r24, 0x04	; 4
    3240:	80 93 f4 0e 	sts	0x0EF4, r24	; 0x800ef4 <state_s0>
			break;
    3244:	82 cf       	rjmp	.-252    	; 0x314a <stage_0+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S0 DE-INIT");
    3246:	65 e7       	ldi	r22, 0x75	; 117
    3248:	72 e0       	ldi	r23, 0x02	; 2
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				SCD30_deinit_sampling();
    3250:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <SCD30_deinit_sampling>
				return STAGE_DONE;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	07 c0       	rjmp	.+14     	; 0x3266 <stage_0+0x120>
			break;
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	05 c0       	rjmp	.+10     	; 0x3266 <stage_0+0x120>
				state_s0=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    325c:	82 e0       	ldi	r24, 0x02	; 2
    325e:	03 c0       	rjmp	.+6      	; 0x3266 <stage_0+0x120>
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	01 c0       	rjmp	.+2      	; 0x3266 <stage_0+0x120>
    3264:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	08 95       	ret

Disassembly of section .text.stage_1:

00002b02 <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	bool res;
	
	while(1){
		switch(state_s1){
    2b06:	80 91 f3 0e 	lds	r24, 0x0EF3	; 0x800ef3 <state_s1>
    2b0a:	82 30       	cpi	r24, 0x02	; 2
    2b0c:	c9 f1       	breq	.+114    	; 0x2b80 <stage_1+0x7e>
    2b0e:	30 f4       	brcc	.+12     	; 0x2b1c <stage_1+0x1a>
    2b10:	88 23       	and	r24, r24
    2b12:	69 f0       	breq	.+26     	; 0x2b2e <stage_1+0x2c>
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <stage_1+0x18>
    2b18:	3e c0       	rjmp	.+124    	; 0x2b96 <stage_1+0x94>
    2b1a:	f5 cf       	rjmp	.-22     	; 0x2b06 <stage_1+0x4>
    2b1c:	84 30       	cpi	r24, 0x04	; 4
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <stage_1+0x20>
    2b20:	82 c0       	rjmp	.+260    	; 0x2c26 <stage_1+0x124>
    2b22:	08 f4       	brcc	.+2      	; 0x2b26 <stage_1+0x24>
    2b24:	42 c0       	rjmp	.+132    	; 0x2baa <stage_1+0xa8>
    2b26:	85 30       	cpi	r24, 0x05	; 5
    2b28:	09 f4       	brne	.+2      	; 0x2b2c <stage_1+0x2a>
    2b2a:	4d c0       	rjmp	.+154    	; 0x2bc6 <stage_1+0xc4>
    2b2c:	ec cf       	rjmp	.-40     	; 0x2b06 <stage_1+0x4>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
    2b2e:	67 e8       	ldi	r22, 0x87	; 135
    2b30:	72 e0       	ldi	r23, 0x02	; 2
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				SCD30_init_c02_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    2b38:	c6 ed       	ldi	r28, 0xD6	; 214
    2b3a:	dd e0       	ldi	r29, 0x0D	; 13
    2b3c:	6c 89       	ldd	r22, Y+20	; 0x14
    2b3e:	4c e5       	ldi	r20, 0x5C	; 92
    2b40:	5b e0       	ldi	r21, 0x0B	; 11
    2b42:	8e 89       	ldd	r24, Y+22	; 0x16
    2b44:	9f 89       	ldd	r25, Y+23	; 0x17
    2b46:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S1_TEMP].samplingInterval, cols[S1_TEMP].samplings, temp_data);
    2b4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b4c:	44 e9       	ldi	r20, 0x94	; 148
    2b4e:	5a e0       	ldi	r21, 0x0A	; 10
    2b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b54:	0e 94 7b 37 	call	0x6ef6	; 0x6ef6 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S1_HUM].samplingInterval, cols[S1_HUM].samplings, hum_data);
    2b58:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2b5a:	4c ec       	ldi	r20, 0xCC	; 204
    2b5c:	59 e0       	ldi	r21, 0x09	; 9
    2b5e:	88 a1       	ldd	r24, Y+32	; 0x20
    2b60:	99 a1       	ldd	r25, Y+33	; 0x21
    2b62:	0e 94 84 37 	call	0x6f08	; 0x6f08 <SCD30_init_humidity_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    2b66:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b68:	78 89       	ldd	r23, Y+16	; 0x10
    2b6a:	44 e0       	ldi	r20, 0x04	; 4
    2b6c:	59 e0       	ldi	r21, 0x09	; 9
    2b6e:	89 89       	ldd	r24, Y+17	; 0x11
    2b70:	0e 94 4c 29 	call	0x5298	; 0x5298 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2b74:	81 11       	cpse	r24, r1
    2b76:	62 c0       	rjmp	.+196    	; 0x2c3c <stage_1+0x13a>
				
				state_s1=STAGE_START;
    2b78:	82 e0       	ldi	r24, 0x02	; 2
    2b7a:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2b7e:	c3 cf       	rjmp	.-122    	; 0x2b06 <stage_1+0x4>
			
			case STAGE_START:
				ADC_start_sampling();
    2b80:	0e 94 d9 38 	call	0x71b2	; 0x71b2 <ADC_start_sampling>
				res=SCD30_start_sampling();
    2b84:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    2b88:	88 23       	and	r24, r24
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <stage_1+0x8c>
    2b8c:	59 c0       	rjmp	.+178    	; 0x2c40 <stage_1+0x13e>
				
				state_s1=STAGE_GET_TIME;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2b94:	b8 cf       	rjmp	.-144    	; 0x2b06 <stage_1+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    2b96:	84 e9       	ldi	r24, 0x94	; 148
    2b98:	9e e0       	ldi	r25, 0x0E	; 14
    2b9a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2b9e:	81 11       	cpse	r24, r1
    2ba0:	51 c0       	rjmp	.+162    	; 0x2c44 <stage_1+0x142>
				state_s1=STAGE_WAIT;
    2ba2:	83 e0       	ldi	r24, 0x03	; 3
    2ba4:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2ba8:	ae cf       	rjmp	.-164    	; 0x2b06 <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2baa:	0e 94 7d 32 	call	0x64fa	; 0x64fa <SCD30_is_sampling_done>
    2bae:	88 23       	and	r24, r24
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <stage_1+0xb2>
    2bb2:	4a c0       	rjmp	.+148    	; 0x2c48 <stage_1+0x146>
    2bb4:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <ADC_is_sampling_done>
    2bb8:	88 23       	and	r24, r24
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <stage_1+0xbc>
    2bbc:	47 c0       	rjmp	.+142    	; 0x2c4c <stage_1+0x14a>
				state_s1=STAGE_UPDATE_MRPP;
    2bbe:	85 e0       	ldi	r24, 0x05	; 5
    2bc0:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2bc4:	a0 cf       	rjmp	.-192    	; 0x2b06 <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2bc6:	27 eb       	ldi	r18, 0xB7	; 183
    2bc8:	3e e0       	ldi	r19, 0x0E	; 14
    2bca:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    2bce:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    2bd2:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    2bd6:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    2bda:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    2bde:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    2be2:	0e 94 36 19 	call	0x326c	; 0x326c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    2be6:	44 e0       	ldi	r20, 0x04	; 4
    2be8:	59 e0       	ldi	r21, 0x09	; 9
    2bea:	67 eb       	ldi	r22, 0xB7	; 183
    2bec:	7e e0       	ldi	r23, 0x0E	; 14
    2bee:	84 e0       	ldi	r24, 0x04	; 4
    2bf0:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    2bf4:	4c e5       	ldi	r20, 0x5C	; 92
    2bf6:	5b e0       	ldi	r21, 0x0B	; 11
    2bf8:	67 eb       	ldi	r22, 0xB7	; 183
    2bfa:	7e e0       	ldi	r23, 0x0E	; 14
    2bfc:	85 e0       	ldi	r24, 0x05	; 5
    2bfe:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_TEMP, ts, temp_data);
    2c02:	44 e9       	ldi	r20, 0x94	; 148
    2c04:	5a e0       	ldi	r21, 0x0A	; 10
    2c06:	67 eb       	ldi	r22, 0xB7	; 183
    2c08:	7e e0       	ldi	r23, 0x0E	; 14
    2c0a:	86 e0       	ldi	r24, 0x06	; 6
    2c0c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_HUM, ts, hum_data);
    2c10:	4c ec       	ldi	r20, 0xCC	; 204
    2c12:	59 e0       	ldi	r21, 0x09	; 9
    2c14:	67 eb       	ldi	r22, 0xB7	; 183
    2c16:	7e e0       	ldi	r23, 0x0E	; 14
    2c18:	87 e0       	ldi	r24, 0x07	; 7
    2c1a:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				
				state_s1=STAGE_DEINIT;
    2c1e:	84 e0       	ldi	r24, 0x04	; 4
    2c20:	80 93 f3 0e 	sts	0x0EF3, r24	; 0x800ef3 <state_s1>
			break;
    2c24:	70 cf       	rjmp	.-288    	; 0x2b06 <stage_1+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S1 DE-INIT");
    2c26:	66 e9       	ldi	r22, 0x96	; 150
    2c28:	72 e0       	ldi	r23, 0x02	; 2
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				SCD30_deinit_sampling();
    2c30:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2c34:	0e 94 43 37 	call	0x6e86	; 0x6e86 <ADC_deinit_sampling>
				return STAGE_DONE;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	09 c0       	rjmp	.+18     	; 0x2c4e <stage_1+0x14c>
				SCD30_init_c02_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				SCD30_init_temp_sampling(cols[S1_TEMP].samplingInterval, cols[S1_TEMP].samplings, temp_data);
				SCD30_init_humidity_sampling(cols[S1_HUM].samplingInterval, cols[S1_HUM].samplings, hum_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2c3c:	83 e0       	ldi	r24, 0x03	; 3
    2c3e:	07 c0       	rjmp	.+14     	; 0x2c4e <stage_1+0x14c>
			break;
			
			case STAGE_START:
				ADC_start_sampling();
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	05 c0       	rjmp	.+10     	; 0x2c4e <stage_1+0x14c>
				state_s1=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2c44:	82 e0       	ldi	r24, 0x02	; 2
    2c46:	03 c0       	rjmp	.+6      	; 0x2c4e <stage_1+0x14c>
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	01 c0       	rjmp	.+2      	; 0x2c4e <stage_1+0x14c>
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2c4e:	df 91       	pop	r29
    2c50:	cf 91       	pop	r28
    2c52:	08 95       	ret

Disassembly of section .text.stage_2:

0000240e <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	bool res;

	while(1){
		switch(state_s2){
    2412:	80 91 f2 0e 	lds	r24, 0x0EF2	; 0x800ef2 <state_s2>
    2416:	82 30       	cpi	r24, 0x02	; 2
    2418:	c9 f1       	breq	.+114    	; 0x248c <stage_2+0x7e>
    241a:	30 f4       	brcc	.+12     	; 0x2428 <stage_2+0x1a>
    241c:	88 23       	and	r24, r24
    241e:	69 f0       	breq	.+26     	; 0x243a <stage_2+0x2c>
    2420:	81 30       	cpi	r24, 0x01	; 1
    2422:	09 f4       	brne	.+2      	; 0x2426 <stage_2+0x18>
    2424:	44 c0       	rjmp	.+136    	; 0x24ae <stage_2+0xa0>
    2426:	f5 cf       	rjmp	.-22     	; 0x2412 <stage_2+0x4>
    2428:	84 30       	cpi	r24, 0x04	; 4
    242a:	09 f4       	brne	.+2      	; 0x242e <stage_2+0x20>
    242c:	8d c0       	rjmp	.+282    	; 0x2548 <stage_2+0x13a>
    242e:	08 f4       	brcc	.+2      	; 0x2432 <stage_2+0x24>
    2430:	48 c0       	rjmp	.+144    	; 0x24c2 <stage_2+0xb4>
    2432:	85 30       	cpi	r24, 0x05	; 5
    2434:	09 f4       	brne	.+2      	; 0x2438 <stage_2+0x2a>
    2436:	58 c0       	rjmp	.+176    	; 0x24e8 <stage_2+0xda>
    2438:	ec cf       	rjmp	.-40     	; 0x2412 <stage_2+0x4>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
    243a:	68 ea       	ldi	r22, 0xA8	; 168
    243c:	72 e0       	ldi	r23, 0x02	; 2
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				SCD30_init_c02_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    2444:	c6 ed       	ldi	r28, 0xD6	; 214
    2446:	dd e0       	ldi	r29, 0x0D	; 13
    2448:	68 a5       	ldd	r22, Y+40	; 0x28
    244a:	4c e5       	ldi	r20, 0x5C	; 92
    244c:	5b e0       	ldi	r21, 0x0B	; 11
    244e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2450:	9b a5       	ldd	r25, Y+43	; 0x2b
    2452:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S2_TEMP].samplingInterval, cols[S2_TEMP].samplings, temp_data);
    2456:	6d a5       	ldd	r22, Y+45	; 0x2d
    2458:	44 e9       	ldi	r20, 0x94	; 148
    245a:	5a e0       	ldi	r21, 0x0A	; 10
    245c:	8f a5       	ldd	r24, Y+47	; 0x2f
    245e:	98 a9       	ldd	r25, Y+48	; 0x30
    2460:	0e 94 7b 37 	call	0x6ef6	; 0x6ef6 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S2_HUM].samplingInterval, cols[S2_HUM].samplings, hum_data);
    2464:	6a a9       	ldd	r22, Y+50	; 0x32
    2466:	4c ec       	ldi	r20, 0xCC	; 204
    2468:	59 e0       	ldi	r21, 0x09	; 9
    246a:	8c a9       	ldd	r24, Y+52	; 0x34
    246c:	9d a9       	ldd	r25, Y+53	; 0x35
    246e:	0e 94 84 37 	call	0x6f08	; 0x6f08 <SCD30_init_humidity_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    2472:	6b a1       	ldd	r22, Y+35	; 0x23
    2474:	7c a1       	ldd	r23, Y+36	; 0x24
    2476:	44 e0       	ldi	r20, 0x04	; 4
    2478:	59 e0       	ldi	r21, 0x09	; 9
    247a:	8d a1       	ldd	r24, Y+37	; 0x25
    247c:	0e 94 4c 29 	call	0x5298	; 0x5298 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2480:	81 11       	cpse	r24, r1
    2482:	6d c0       	rjmp	.+218    	; 0x255e <stage_2+0x150>
			
				state_s2=STAGE_START;
    2484:	82 e0       	ldi	r24, 0x02	; 2
    2486:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    248a:	c3 cf       	rjmp	.-122    	; 0x2412 <stage_2+0x4>
			
			case STAGE_START:
				res=SCD30_start_sampling();
    248c:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    2490:	88 23       	and	r24, r24
    2492:	09 f4       	brne	.+2      	; 0x2496 <stage_2+0x88>
    2494:	66 c0       	rjmp	.+204    	; 0x2562 <stage_2+0x154>
				
				ADC_start_sampling();
    2496:	0e 94 d9 38 	call	0x71b2	; 0x71b2 <ADC_start_sampling>
				PUMP_start(airPumpTime);
    249a:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <airPumpTime>
    249e:	90 91 da 0e 	lds	r25, 0x0EDA	; 0x800eda <airPumpTime+0x1>
    24a2:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <PUMP_start>
				
				state_s2=STAGE_GET_TIME;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    24ac:	b2 cf       	rjmp	.-156    	; 0x2412 <stage_2+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    24ae:	84 e9       	ldi	r24, 0x94	; 148
    24b0:	9e e0       	ldi	r25, 0x0E	; 14
    24b2:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    24b6:	81 11       	cpse	r24, r1
    24b8:	56 c0       	rjmp	.+172    	; 0x2566 <stage_2+0x158>
				state_s2=STAGE_WAIT;
    24ba:	83 e0       	ldi	r24, 0x03	; 3
    24bc:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    24c0:	a8 cf       	rjmp	.-176    	; 0x2412 <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    24c2:	0e 94 7d 32 	call	0x64fa	; 0x64fa <SCD30_is_sampling_done>
    24c6:	88 23       	and	r24, r24
    24c8:	09 f4       	brne	.+2      	; 0x24cc <stage_2+0xbe>
    24ca:	4f c0       	rjmp	.+158    	; 0x256a <stage_2+0x15c>
    24cc:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <ADC_is_sampling_done>
    24d0:	88 23       	and	r24, r24
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <stage_2+0xc8>
    24d4:	4c c0       	rjmp	.+152    	; 0x256e <stage_2+0x160>
    24d6:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <PUMP_is_done>
    24da:	88 23       	and	r24, r24
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <stage_2+0xd2>
    24de:	49 c0       	rjmp	.+146    	; 0x2572 <stage_2+0x164>
				state_s2=STAGE_UPDATE_MRPP;
    24e0:	85 e0       	ldi	r24, 0x05	; 5
    24e2:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    24e6:	95 cf       	rjmp	.-214    	; 0x2412 <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    24e8:	27 eb       	ldi	r18, 0xB7	; 183
    24ea:	3e e0       	ldi	r19, 0x0E	; 14
    24ec:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    24f0:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    24f4:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    24f8:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    24fc:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    2500:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    2504:	0e 94 36 19 	call	0x326c	; 0x326c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    2508:	4c e5       	ldi	r20, 0x5C	; 92
    250a:	5b e0       	ldi	r21, 0x0B	; 11
    250c:	67 eb       	ldi	r22, 0xB7	; 183
    250e:	7e e0       	ldi	r23, 0x0E	; 14
    2510:	89 e0       	ldi	r24, 0x09	; 9
    2512:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_TEMP, ts, temp_data);
    2516:	44 e9       	ldi	r20, 0x94	; 148
    2518:	5a e0       	ldi	r21, 0x0A	; 10
    251a:	67 eb       	ldi	r22, 0xB7	; 183
    251c:	7e e0       	ldi	r23, 0x0E	; 14
    251e:	8a e0       	ldi	r24, 0x0A	; 10
    2520:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_HUM, ts, hum_data);
    2524:	4c ec       	ldi	r20, 0xCC	; 204
    2526:	59 e0       	ldi	r21, 0x09	; 9
    2528:	67 eb       	ldi	r22, 0xB7	; 183
    252a:	7e e0       	ldi	r23, 0x0E	; 14
    252c:	8b e0       	ldi	r24, 0x0B	; 11
    252e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    2532:	44 e0       	ldi	r20, 0x04	; 4
    2534:	59 e0       	ldi	r21, 0x09	; 9
    2536:	67 eb       	ldi	r22, 0xB7	; 183
    2538:	7e e0       	ldi	r23, 0x0E	; 14
    253a:	88 e0       	ldi	r24, 0x08	; 8
    253c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    2540:	84 e0       	ldi	r24, 0x04	; 4
    2542:	80 93 f2 0e 	sts	0x0EF2, r24	; 0x800ef2 <state_s2>
			break;
    2546:	65 cf       	rjmp	.-310    	; 0x2412 <stage_2+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S2 DE-INIT");
    2548:	67 eb       	ldi	r22, 0xB7	; 183
    254a:	72 e0       	ldi	r23, 0x02	; 2
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				SCD30_deinit_sampling();
    2552:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2556:	0e 94 43 37 	call	0x6e86	; 0x6e86 <ADC_deinit_sampling>
				return STAGE_DONE;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	0b c0       	rjmp	.+22     	; 0x2574 <stage_2+0x166>
				SCD30_init_c02_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				SCD30_init_temp_sampling(cols[S2_TEMP].samplingInterval, cols[S2_TEMP].samplings, temp_data);
				SCD30_init_humidity_sampling(cols[S2_HUM].samplingInterval, cols[S2_HUM].samplings, hum_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    255e:	83 e0       	ldi	r24, 0x03	; 3
    2560:	09 c0       	rjmp	.+18     	; 0x2574 <stage_2+0x166>
				state_s2=STAGE_START;
			break;
			
			case STAGE_START:
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    2562:	82 e0       	ldi	r24, 0x02	; 2
    2564:	07 c0       	rjmp	.+14     	; 0x2574 <stage_2+0x166>
				state_s2=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2566:	82 e0       	ldi	r24, 0x02	; 2
    2568:	05 c0       	rjmp	.+10     	; 0x2574 <stage_2+0x166>
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	03 c0       	rjmp	.+6      	; 0x2574 <stage_2+0x166>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <stage_2+0x166>
    2572:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

Disassembly of section .text.stage_3:

0000257a <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
	ADC_STATUS adcStatus;
	RTC_STATUS rtcStatus;
	bool res;
	
	while(1){
		switch(state_s3){
    257e:	80 91 f1 0e 	lds	r24, 0x0EF1	; 0x800ef1 <state_s3>
    2582:	82 30       	cpi	r24, 0x02	; 2
    2584:	09 f4       	brne	.+2      	; 0x2588 <stage_3+0xe>
    2586:	3f c0       	rjmp	.+126    	; 0x2606 <stage_3+0x8c>
    2588:	30 f4       	brcc	.+12     	; 0x2596 <stage_3+0x1c>
    258a:	88 23       	and	r24, r24
    258c:	69 f0       	breq	.+26     	; 0x25a8 <stage_3+0x2e>
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	09 f4       	brne	.+2      	; 0x2594 <stage_3+0x1a>
    2592:	44 c0       	rjmp	.+136    	; 0x261c <stage_3+0xa2>
    2594:	f4 cf       	rjmp	.-24     	; 0x257e <stage_3+0x4>
    2596:	84 30       	cpi	r24, 0x04	; 4
    2598:	09 f4       	brne	.+2      	; 0x259c <stage_3+0x22>
    259a:	88 c0       	rjmp	.+272    	; 0x26ac <stage_3+0x132>
    259c:	08 f4       	brcc	.+2      	; 0x25a0 <stage_3+0x26>
    259e:	48 c0       	rjmp	.+144    	; 0x2630 <stage_3+0xb6>
    25a0:	85 30       	cpi	r24, 0x05	; 5
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <stage_3+0x2c>
    25a4:	53 c0       	rjmp	.+166    	; 0x264c <stage_3+0xd2>
    25a6:	eb cf       	rjmp	.-42     	; 0x257e <stage_3+0x4>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
    25a8:	69 ec       	ldi	r22, 0xC9	; 201
    25aa:	72 e0       	ldi	r23, 0x02	; 2
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				SCD30_init_c02_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    25b2:	c6 ed       	ldi	r28, 0xD6	; 214
    25b4:	dd e0       	ldi	r29, 0x0D	; 13
    25b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    25b8:	4c e5       	ldi	r20, 0x5C	; 92
    25ba:	5b e0       	ldi	r21, 0x0B	; 11
    25bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    25be:	9f ad       	ldd	r25, Y+63	; 0x3f
    25c0:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <SCD30_init_c02_sampling>
				SCD30_init_temp_sampling(cols[S3_TEMP].samplingInterval, cols[S3_TEMP].samplings, temp_data);
    25c4:	60 91 17 0e 	lds	r22, 0x0E17	; 0x800e17 <cols+0x41>
    25c8:	44 e9       	ldi	r20, 0x94	; 148
    25ca:	5a e0       	ldi	r21, 0x0A	; 10
    25cc:	80 91 19 0e 	lds	r24, 0x0E19	; 0x800e19 <cols+0x43>
    25d0:	90 91 1a 0e 	lds	r25, 0x0E1A	; 0x800e1a <cols+0x44>
    25d4:	0e 94 7b 37 	call	0x6ef6	; 0x6ef6 <SCD30_init_temp_sampling>
				SCD30_init_humidity_sampling(cols[S3_HUM].samplingInterval, cols[S3_HUM].samplings, hum_data);
    25d8:	60 91 1c 0e 	lds	r22, 0x0E1C	; 0x800e1c <cols+0x46>
    25dc:	4c ec       	ldi	r20, 0xCC	; 204
    25de:	59 e0       	ldi	r21, 0x09	; 9
    25e0:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <cols+0x48>
    25e4:	90 91 1f 0e 	lds	r25, 0x0E1F	; 0x800e1f <cols+0x49>
    25e8:	0e 94 84 37 	call	0x6f08	; 0x6f08 <SCD30_init_humidity_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    25ec:	6f a9       	ldd	r22, Y+55	; 0x37
    25ee:	78 ad       	ldd	r23, Y+56	; 0x38
    25f0:	44 e0       	ldi	r20, 0x04	; 4
    25f2:	59 e0       	ldi	r21, 0x09	; 9
    25f4:	89 ad       	ldd	r24, Y+57	; 0x39
    25f6:	0e 94 4c 29 	call	0x5298	; 0x5298 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    25fa:	81 11       	cpse	r24, r1
    25fc:	66 c0       	rjmp	.+204    	; 0x26ca <stage_3+0x150>
			
				state_s3=STAGE_START;
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    2604:	bc cf       	rjmp	.-136    	; 0x257e <stage_3+0x4>
			
			case STAGE_START:
				ADC_start_sampling();
    2606:	0e 94 d9 38 	call	0x71b2	; 0x71b2 <ADC_start_sampling>
				res=SCD30_start_sampling();
    260a:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <SCD30_start_sampling>
				if(!res) return STAGE_ERROR;
    260e:	88 23       	and	r24, r24
    2610:	09 f4       	brne	.+2      	; 0x2614 <stage_3+0x9a>
    2612:	5d c0       	rjmp	.+186    	; 0x26ce <stage_3+0x154>
				
				state_s3=STAGE_GET_TIME;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    261a:	b1 cf       	rjmp	.-158    	; 0x257e <stage_3+0x4>
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
    261c:	84 e9       	ldi	r24, 0x94	; 148
    261e:	9e e0       	ldi	r25, 0x0E	; 14
    2620:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <RTC_get_current_time>
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    2624:	81 11       	cpse	r24, r1
    2626:	55 c0       	rjmp	.+170    	; 0x26d2 <stage_3+0x158>
				state_s3=STAGE_WAIT;
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    262e:	a7 cf       	rjmp	.-178    	; 0x257e <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2630:	0e 94 7d 32 	call	0x64fa	; 0x64fa <SCD30_is_sampling_done>
    2634:	88 23       	and	r24, r24
    2636:	09 f4       	brne	.+2      	; 0x263a <stage_3+0xc0>
    2638:	4e c0       	rjmp	.+156    	; 0x26d6 <stage_3+0x15c>
    263a:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <ADC_is_sampling_done>
    263e:	88 23       	and	r24, r24
    2640:	09 f4       	brne	.+2      	; 0x2644 <stage_3+0xca>
    2642:	4b c0       	rjmp	.+150    	; 0x26da <stage_3+0x160>
				state_s3=STAGE_UPDATE_MRPP;
    2644:	85 e0       	ldi	r24, 0x05	; 5
    2646:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    264a:	99 cf       	rjmp	.-206    	; 0x257e <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    264c:	27 eb       	ldi	r18, 0xB7	; 183
    264e:	3e e0       	ldi	r19, 0x0E	; 14
    2650:	40 91 94 0e 	lds	r20, 0x0E94	; 0x800e94 <dt>
    2654:	50 91 95 0e 	lds	r21, 0x0E95	; 0x800e95 <dt+0x1>
    2658:	60 91 96 0e 	lds	r22, 0x0E96	; 0x800e96 <dt+0x2>
    265c:	70 91 97 0e 	lds	r23, 0x0E97	; 0x800e97 <dt+0x3>
    2660:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <dt+0x4>
    2664:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <dt+0x5>
    2668:	0e 94 36 19 	call	0x326c	; 0x326c <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    266c:	4c e5       	ldi	r20, 0x5C	; 92
    266e:	5b e0       	ldi	r21, 0x0B	; 11
    2670:	67 eb       	ldi	r22, 0xB7	; 183
    2672:	7e e0       	ldi	r23, 0x0E	; 14
    2674:	8d e0       	ldi	r24, 0x0D	; 13
    2676:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_TEMP, ts, temp_data);
    267a:	44 e9       	ldi	r20, 0x94	; 148
    267c:	5a e0       	ldi	r21, 0x0A	; 10
    267e:	67 eb       	ldi	r22, 0xB7	; 183
    2680:	7e e0       	ldi	r23, 0x0E	; 14
    2682:	8e e0       	ldi	r24, 0x0E	; 14
    2684:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_HUM, ts, hum_data);
    2688:	4c ec       	ldi	r20, 0xCC	; 204
    268a:	59 e0       	ldi	r21, 0x09	; 9
    268c:	67 eb       	ldi	r22, 0xB7	; 183
    268e:	7e e0       	ldi	r23, 0x0E	; 14
    2690:	8f e0       	ldi	r24, 0x0F	; 15
    2692:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    2696:	44 e0       	ldi	r20, 0x04	; 4
    2698:	59 e0       	ldi	r21, 0x09	; 9
    269a:	67 eb       	ldi	r22, 0xB7	; 183
    269c:	7e e0       	ldi	r23, 0x0E	; 14
    269e:	8c e0       	ldi	r24, 0x0C	; 12
    26a0:	0e 94 30 27 	call	0x4e60	; 0x4e60 <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    26a4:	84 e0       	ldi	r24, 0x04	; 4
    26a6:	80 93 f1 0e 	sts	0x0EF1, r24	; 0x800ef1 <state_s3>
			break;
    26aa:	69 cf       	rjmp	.-302    	; 0x257e <stage_3+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S3 DE-INIT");
    26ac:	68 ed       	ldi	r22, 0xD8	; 216
    26ae:	72 e0       	ldi	r23, 0x02	; 2
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				SCD30_deinit_sampling();
    26b6:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <SCD30_deinit_sampling>
				SCD30_sensor_off();
    26ba:	0e 94 24 39 	call	0x7248	; 0x7248 <SCD30_sensor_off>
				ADC_deinit_sampling();
    26be:	0e 94 43 37 	call	0x6e86	; 0x6e86 <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    26c2:	0e 94 10 39 	call	0x7220	; 0x7220 <ADC_meth_sens_power_off>
				return STAGE_DONE;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	09 c0       	rjmp	.+18     	; 0x26dc <stage_3+0x162>
				SCD30_init_c02_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				SCD30_init_temp_sampling(cols[S3_TEMP].samplingInterval, cols[S3_TEMP].samplings, temp_data);
				SCD30_init_humidity_sampling(cols[S3_HUM].samplingInterval, cols[S3_HUM].samplings, hum_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	07 c0       	rjmp	.+14     	; 0x26dc <stage_3+0x162>
			break;
			
			case STAGE_START:
				ADC_start_sampling();
				res=SCD30_start_sampling();
				if(!res) return STAGE_ERROR;
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	05 c0       	rjmp	.+10     	; 0x26dc <stage_3+0x162>
				state_s3=STAGE_GET_TIME;
			break;
			
			case STAGE_GET_TIME:
				rtcStatus=RTC_get_current_time(&dt);
				if(rtcStatus!=RTC_STATUS_SUCCESS) return STAGE_ERROR;
    26d2:	82 e0       	ldi	r24, 0x02	; 2
    26d4:	03 c0       	rjmp	.+6      	; 0x26dc <stage_3+0x162>
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	01 c0       	rjmp	.+2      	; 0x26dc <stage_3+0x162>
    26da:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	08 95       	ret

Disassembly of section .text.decode_body_response:

00004dee <decode_body_response>:
//static LM_STATUS send_body(int16_t bodyIndex){
	//MRPP_get_ready_body_package(bodyIndex, package, &package_length);
	//return LM_send_uplink(package, package_length);
//}

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    4dee:	0f 93       	push	r16
    4df0:	1f 93       	push	r17
    4df2:	cf 93       	push	r28
    4df4:	8c 01       	movw	r16, r24
    4df6:	c4 2f       	mov	r28, r20
	switch(status){
    4df8:	62 30       	cpi	r22, 0x02	; 2
    4dfa:	31 f1       	breq	.+76     	; 0x4e48 <decode_body_response+0x5a>
    4dfc:	18 f4       	brcc	.+6      	; 0x4e04 <decode_body_response+0x16>
    4dfe:	66 23       	and	r22, r22
    4e00:	31 f0       	breq	.+12     	; 0x4e0e <decode_body_response+0x20>
    4e02:	29 c0       	rjmp	.+82     	; 0x4e56 <decode_body_response+0x68>
    4e04:	64 30       	cpi	r22, 0x04	; 4
    4e06:	61 f0       	breq	.+24     	; 0x4e20 <decode_body_response+0x32>
    4e08:	65 30       	cpi	r22, 0x05	; 5
    4e0a:	a1 f0       	breq	.+40     	; 0x4e34 <decode_body_response+0x46>
    4e0c:	24 c0       	rjmp	.+72     	; 0x4e56 <decode_body_response+0x68>
		case LM_STATUS_SUCCESS:
			MRPP_set_body_sent(bodyIndex);
    4e0e:	0e 94 a8 38 	call	0x7150	; 0x7150 <MRPP_set_body_sent>
			print_debug("res: success");
    4e12:	6a ee       	ldi	r22, 0xEA	; 234
    4e14:	72 e0       	ldi	r23, 0x02	; 2
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
			return success;
    4e1c:	8c 2f       	mov	r24, r28
    4e1e:	1c c0       	rjmp	.+56     	; 0x4e58 <decode_body_response+0x6a>
		
		
		case LM_STATUS_MAC_ERR:
			print_debug("res: mac err");
    4e20:	67 ef       	ldi	r22, 0xF7	; 247
    4e22:	72 e0       	ldi	r23, 0x02	; 2
    4e24:	80 e0       	ldi	r24, 0x00	; 0
    4e26:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
			MRPP_set_body_sent(bodyIndex);
    4e2a:	c8 01       	movw	r24, r16
    4e2c:	0e 94 a8 38 	call	0x7150	; 0x7150 <MRPP_set_body_sent>
			return success;
    4e30:	8c 2f       	mov	r24, r28
    4e32:	12 c0       	rjmp	.+36     	; 0x4e58 <decode_body_response+0x6a>
			
		case LM_STATUS_INV_DATA_LEN:
			print_debug("res: inv len");
    4e34:	64 e0       	ldi	r22, 0x04	; 4
    4e36:	73 e0       	ldi	r23, 0x03	; 3
    4e38:	80 e0       	ldi	r24, 0x00	; 0
    4e3a:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
			MRPP_set_body_sent(bodyIndex);
    4e3e:	c8 01       	movw	r24, r16
    4e40:	0e 94 a8 38 	call	0x7150	; 0x7150 <MRPP_set_body_sent>
			return MAINPG_PAYLOAD_INV_LEN;
    4e44:	86 e1       	ldi	r24, 0x16	; 22
    4e46:	08 c0       	rjmp	.+16     	; 0x4e58 <decode_body_response+0x6a>
		
		case LM_STATUS_TRY_AGAIN:
			print_debug("res: try again");
    4e48:	61 e1       	ldi	r22, 0x11	; 17
    4e4a:	73 e0       	ldi	r23, 0x03	; 3
    4e4c:	80 e0       	ldi	r24, 0x00	; 0
    4e4e:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
			return success;
    4e52:	8c 2f       	mov	r24, r28
    4e54:	01 c0       	rjmp	.+2      	; 0x4e58 <decode_body_response+0x6a>
		
		default:
			return MAINPG_FATAL_ERROR;
    4e56:	87 e1       	ldi	r24, 0x17	; 23
	}
}
    4e58:	cf 91       	pop	r28
    4e5a:	1f 91       	pop	r17
    4e5c:	0f 91       	pop	r16
    4e5e:	08 95       	ret

Disassembly of section .text.MAINPG_start:

0000113e <MAINPG_start>:

static void send_msg(const char msg[]);

static bool fromSleep=false;

void MAINPG_start(){
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
    114a:	c0 e0       	ldi	r28, 0x00	; 0
    114c:	1a c0       	rjmp	.+52     	; 0x1182 <MAINPG_start+0x44>
				PM_HAL_SCD30_power_init();
				PM_HAL_LED_power_init();
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    114e:	c6 e0       	ldi	r28, 0x06	; 6
    1150:	18 c0       	rjmp	.+48     	; 0x1182 <MAINPG_start+0x44>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
    1152:	c5 e0       	ldi	r28, 0x05	; 5
    1154:	16 c0       	rjmp	.+44     	; 0x1182 <MAINPG_start+0x44>
    1156:	c5 e0       	ldi	r28, 0x05	; 5
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <MAINPG_start+0x44>
    115a:	c5 e0       	ldi	r28, 0x05	; 5
    115c:	12 c0       	rjmp	.+36     	; 0x1182 <MAINPG_start+0x44>
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
    115e:	c5 e0       	ldi	r28, 0x05	; 5
    1160:	10 c0       	rjmp	.+32     	; 0x1182 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1162:	c7 e1       	ldi	r28, 0x17	; 23
    1164:	0e c0       	rjmp	.+28     	; 0x1182 <MAINPG_start+0x44>
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    1166:	c7 e1       	ldi	r28, 0x17	; 23
    1168:	0c c0       	rjmp	.+24     	; 0x1182 <MAINPG_start+0x44>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    116a:	c7 e1       	ldi	r28, 0x17	; 23
    116c:	0a c0       	rjmp	.+20     	; 0x1182 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    116e:	c7 e1       	ldi	r28, 0x17	; 23
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1172:	c7 e1       	ldi	r28, 0x17	; 23
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <MAINPG_start+0x44>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
    1176:	cd 2f       	mov	r28, r29
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <MAINPG_start+0x44>
    117a:	cd 2f       	mov	r28, r29
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
    117e:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
    1180:	c1 e1       	ldi	r28, 0x11	; 17
	STAGE_STATUS stageStatus;
	uint8_t groupId=0;
	

	while(1){
		switch(state){
    1182:	ec 2f       	mov	r30, r28
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	e9 31       	cpi	r30, 0x19	; 25
    1188:	f1 05       	cpc	r31, r1
    118a:	d8 f7       	brcc	.-10     	; 0x1182 <MAINPG_start+0x44>
    118c:	e2 5a       	subi	r30, 0xA2	; 162
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	0c 94 b4 38 	jmp	0x7168	; 0x7168 <__tablejump2__>
			case MAINPG_INIT_HW:
				print_debug("State: INIT HW");
    1194:	60 e2       	ldi	r22, 0x20	; 32
    1196:	73 e0       	ldi	r23, 0x03	; 3
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				//Reset variables
				state_s0=STAGE_INIT;
    119e:	10 92 f4 0e 	sts	0x0EF4, r1	; 0x800ef4 <state_s0>
				state_s1=STAGE_INIT;
    11a2:	10 92 f3 0e 	sts	0x0EF3, r1	; 0x800ef3 <state_s1>
				state_s2=STAGE_INIT;
    11a6:	10 92 f2 0e 	sts	0x0EF2, r1	; 0x800ef2 <state_s2>
				state_s3=STAGE_INIT;
    11aa:	10 92 f1 0e 	sts	0x0EF1, r1	; 0x800ef1 <state_s3>
				bodyIndex=-1;
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	9f ef       	ldi	r25, 0xFF	; 255
    11b2:	90 93 dc 0e 	sts	0x0EDC, r25	; 0x800edc <bodyIndex+0x1>
    11b6:	80 93 db 0e 	sts	0x0EDB, r24	; 0x800edb <bodyIndex>
				
				uart0_hal_init();
    11ba:	0e 94 9f 30 	call	0x613e	; 0x613e <uart0_hal_init>
				uart1_hal_init();
    11be:	0e 94 bd 30 	call	0x617a	; 0x617a <uart1_hal_init>
				TWI_HAL_init();
    11c2:	0e 94 57 37 	call	0x6eae	; 0x6eae <TWI_HAL_init>
				TC2_HAL_init();
    11c6:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <TC2_HAL_init>
				rn2483_init();
    11ca:	0e 94 00 39 	call	0x7200	; 0x7200 <rn2483_init>
				SCD30_HAL_init();
    11ce:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <SCD30_HAL_init>
				PM_HAL_adc_power_init();
    11d2:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
    11d6:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
    11da:	0e 94 d5 37 	call	0x6faa	; 0x6faa <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
    11de:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
    11e2:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <PM_HAL_LED_power_init>
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    11e6:	80 91 ed 0e 	lds	r24, 0x0EED	; 0x800eed <fromSleep>
    11ea:	81 11       	cpse	r24, r1
    11ec:	b0 cf       	rjmp	.-160    	; 0x114e <MAINPG_start+0x10>
    11ee:	c1 e0       	ldi	r28, 0x01	; 1
    11f0:	c8 cf       	rjmp	.-112    	; 0x1182 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
    11f2:	6f e2       	ldi	r22, 0x2F	; 47
    11f4:	73 e0       	ldi	r23, 0x03	; 3
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
    11fc:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <EM_has_deveui>
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <MAINPG_start+0xc8>
    1204:	a6 cf       	rjmp	.-180    	; 0x1152 <MAINPG_start+0x14>
    1206:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <EM_has_appeui>
    120a:	88 23       	and	r24, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <MAINPG_start+0xd2>
    120e:	a3 cf       	rjmp	.-186    	; 0x1156 <MAINPG_start+0x18>
    1210:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <EM_has_appkey>
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <MAINPG_start+0xdc>
    1218:	a0 cf       	rjmp	.-192    	; 0x115a <MAINPG_start+0x1c>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
    121a:	0e 94 99 2a 	call	0x5532	; 0x5532 <read_eeprom>
    121e:	88 23       	and	r24, r24
    1220:	09 f4       	brne	.+2      	; 0x1224 <MAINPG_start+0xe6>
    1222:	9d cf       	rjmp	.-198    	; 0x115e <MAINPG_start+0x20>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
    1224:	c2 e0       	ldi	r28, 0x02	; 2
    1226:	ad cf       	rjmp	.-166    	; 0x1182 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("State: JOIN LORA");
    1228:	6d e3       	ldi	r22, 0x3D	; 61
    122a:	73 e0       	ldi	r23, 0x03	; 3
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				LED_start_try_join();
    1232:	0e 94 22 38 	call	0x7044	; 0x7044 <LED_start_try_join>
				lmStatus=join_lora();
    1236:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <join_lora>
    123a:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
    123c:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <LED_stop_try_join>
				state=decode_join_response(lmStatus);
    1240:	8c 2f       	mov	r24, r28
    1242:	0e 94 66 36 	call	0x6ccc	; 0x6ccc <decode_join_response>
    1246:	c8 2f       	mov	r28, r24
			break;
    1248:	9c cf       	rjmp	.-200    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				print_debug("State: JOIN SUCCESS");
    124a:	6e e4       	ldi	r22, 0x4E	; 78
    124c:	73 e0       	ldi	r23, 0x03	; 3
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				LED_join_success();
    1254:	0e 94 61 30 	call	0x60c2	; 0x60c2 <LED_join_success>
				state=MAINPG_INIT_MODULES;
    1258:	ca e0       	ldi	r28, 0x0A	; 10
			break;
    125a:	93 cf       	rjmp	.-218    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
    125c:	62 e6       	ldi	r22, 0x62	; 98
    125e:	73 e0       	ldi	r23, 0x03	; 3
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				lmStatus=LM_wake_up();
    1266:	0e 94 40 39 	call	0x7280	; 0x7280 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    126a:	81 11       	cpse	r24, r1
    126c:	7a cf       	rjmp	.-268    	; 0x1162 <MAINPG_start+0x24>
    126e:	ca e0       	ldi	r28, 0x0A	; 10
    1270:	88 cf       	rjmp	.-240    	; 0x1182 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("State: LORA TRY AGAIN");
    1272:	66 e7       	ldi	r22, 0x76	; 118
    1274:	73 e0       	ldi	r23, 0x03	; 3
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				LED_join_denied();
    127c:	0e 94 14 39 	call	0x7228	; 0x7228 <LED_join_denied>
    1280:	2f ef       	ldi	r18, 0xFF	; 255
    1282:	33 eb       	ldi	r19, 0xB3	; 179
    1284:	84 ec       	ldi	r24, 0xC4	; 196
    1286:	94 e0       	ldi	r25, 0x04	; 4
    1288:	21 50       	subi	r18, 0x01	; 1
    128a:	30 40       	sbci	r19, 0x00	; 0
    128c:	80 40       	sbci	r24, 0x00	; 0
    128e:	90 40       	sbci	r25, 0x00	; 0
    1290:	d9 f7       	brne	.-10     	; 0x1288 <MAINPG_start+0x14a>
    1292:	00 c0       	rjmp	.+0      	; 0x1294 <MAINPG_start+0x156>
    1294:	00 00       	nop
				_delay_ms(60000);
				state=MAINPG_LORA_JOIN_NETWORK;
    1296:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1298:	74 cf       	rjmp	.-280    	; 0x1182 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Initialize modules                                                   */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
    129a:	6c e8       	ldi	r22, 0x8C	; 140
    129c:	73 e0       	ldi	r23, 0x03	; 3
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    12a4:	e0 90 ab 0e 	lds	r14, 0x0EAB	; 0x800eab <ppmx>
    12a8:	f0 90 ac 0e 	lds	r15, 0x0EAC	; 0x800eac <ppmx+0x1>
    12ac:	00 91 ad 0e 	lds	r16, 0x0EAD	; 0x800ead <ppmx+0x2>
    12b0:	10 91 ae 0e 	lds	r17, 0x0EAE	; 0x800eae <ppmx+0x3>
    12b4:	20 91 af 0e 	lds	r18, 0x0EAF	; 0x800eaf <rrlx>
    12b8:	30 91 b0 0e 	lds	r19, 0x0EB0	; 0x800eb0 <rrlx+0x1>
    12bc:	40 91 b1 0e 	lds	r20, 0x0EB1	; 0x800eb1 <rrlx+0x2>
    12c0:	50 91 b2 0e 	lds	r21, 0x0EB2	; 0x800eb2 <rrlx+0x3>
    12c4:	60 91 b3 0e 	lds	r22, 0x0EB3	; 0x800eb3 <vccx>
    12c8:	70 91 b4 0e 	lds	r23, 0x0EB4	; 0x800eb4 <vccx+0x1>
    12cc:	80 91 b5 0e 	lds	r24, 0x0EB5	; 0x800eb5 <vccx+0x2>
    12d0:	90 91 b6 0e 	lds	r25, 0x0EB6	; 0x800eb6 <vccx+0x3>
    12d4:	0e 94 1f 30 	call	0x603e	; 0x603e <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
    12d8:	0e 94 c5 34 	call	0x698a	; 0x698a <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    12dc:	81 11       	cpse	r24, r1
    12de:	43 cf       	rjmp	.-378    	; 0x1166 <MAINPG_start+0x28>
    12e0:	c7 e0       	ldi	r28, 0x07	; 7
    12e2:	4f cf       	rjmp	.-354    	; 0x1182 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
    12e4:	60 ea       	ldi	r22, 0xA0	; 160
    12e6:	73 e0       	ldi	r23, 0x03	; 3
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	0e 94 f1 2b 	call	0x57e2	; 0x57e2 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    12f4:	81 11       	cpse	r24, r1
    12f6:	39 cf       	rjmp	.-398    	; 0x116a <MAINPG_start+0x2c>
    12f8:	c9 e0       	ldi	r28, 0x09	; 9
    12fa:	43 cf       	rjmp	.-378    	; 0x1182 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
    12fc:	60 eb       	ldi	r22, 0xB0	; 176
    12fe:	73 e0       	ldi	r23, 0x03	; 3
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
    1306:	0e 94 63 32 	call	0x64c6	; 0x64c6 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    130a:	81 11       	cpse	r24, r1
    130c:	30 cf       	rjmp	.-416    	; 0x116e <MAINPG_start+0x30>
    130e:	c8 e0       	ldi	r28, 0x08	; 8
    1310:	38 cf       	rjmp	.-400    	; 0x1182 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
    1312:	61 ec       	ldi	r22, 0xC1	; 193
    1314:	73 e0       	ldi	r23, 0x03	; 3
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				rtcStatus=set_wakeup();
    131c:	0e 94 ed 38 	call	0x71da	; 0x71da <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1320:	81 11       	cpse	r24, r1
    1322:	27 cf       	rjmp	.-434    	; 0x1172 <MAINPG_start+0x34>
    1324:	cb e0       	ldi	r28, 0x0B	; 11
    1326:	2d cf       	rjmp	.-422    	; 0x1182 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("State: MRPP INIT");
    1328:	67 ed       	ldi	r22, 0xD7	; 215
    132a:	73 e0       	ldi	r23, 0x03	; 3
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				groupId=EM_get_group_id();
    1332:	0e 94 90 38 	call	0x7120	; 0x7120 <EM_get_group_id>
				groupId=MRPP_init_group(cols, N_COLLECTIONS, groupId);
    1336:	48 2f       	mov	r20, r24
    1338:	6f e0       	ldi	r22, 0x0F	; 15
    133a:	86 ed       	ldi	r24, 0xD6	; 214
    133c:	9d e0       	ldi	r25, 0x0D	; 13
    133e:	0e 94 81 36 	call	0x6d02	; 0x6d02 <MRPP_init_group>
				EM_set_group_id(groupId);
    1342:	0e 94 8a 38 	call	0x7114	; 0x7114 <EM_set_group_id>
				state=MAINPG_SEND_HEADER;
    1346:	cc e0       	ldi	r28, 0x0C	; 12
			break;
    1348:	1c cf       	rjmp	.-456    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
    134a:	0e 94 de 38 	call	0x71bc	; 0x71bc <LM_is_free>
    134e:	88 23       	and	r24, r24
    1350:	09 f4       	brne	.+2      	; 0x1354 <MAINPG_start+0x216>
    1352:	17 cf       	rjmp	.-466    	; 0x1182 <MAINPG_start+0x44>
					state=MAINPG_SEND_HEADER;
					break;
				}
				print_debug("State: SEND HEADER");
    1354:	68 ee       	ldi	r22, 0xE8	; 232
    1356:	73 e0       	ldi	r23, 0x03	; 3
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				comeBackToState=MAINPG_STAGE_0;
				MRPP_get_header_package(package, &package_length);
    135e:	60 ef       	ldi	r22, 0xF0	; 240
    1360:	7e e0       	ldi	r23, 0x0E	; 14
    1362:	87 ed       	ldi	r24, 0xD7	; 215
    1364:	9c e0       	ldi	r25, 0x0C	; 12
    1366:	0e 94 42 35 	call	0x6a84	; 0x6a84 <MRPP_get_header_package>
				lmStatus=LM_send_uplink(package, package_length);
    136a:	60 91 f0 0e 	lds	r22, 0x0EF0	; 0x800ef0 <package_length>
    136e:	87 ed       	ldi	r24, 0xD7	; 215
    1370:	9c e0       	ldi	r25, 0x0C	; 12
    1372:	0e 94 34 34 	call	0x6868	; 0x6868 <LM_send_uplink>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
    1376:	4c e0       	ldi	r20, 0x0C	; 12
    1378:	6d e0       	ldi	r22, 0x0D	; 13
    137a:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <decode_header_tail_response>
    137e:	c8 2f       	mov	r28, r24
				if(!LM_is_free()){
					state=MAINPG_SEND_HEADER;
					break;
				}
				print_debug("State: SEND HEADER");
				comeBackToState=MAINPG_STAGE_0;
    1380:	dd e0       	ldi	r29, 0x0D	; 13
				MRPP_get_header_package(package, &package_length);
				lmStatus=LM_send_uplink(package, package_length);
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
    1382:	ff ce       	rjmp	.-514    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
    1384:	0e 94 a3 18 	call	0x3146	; 0x3146 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1388:	6e e0       	ldi	r22, 0x0E	; 14
    138a:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <decode_stage_response>
				lmStatus=LM_send_uplink(package, package_length);
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
    138e:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1390:	c8 2f       	mov	r28, r24
			break;
    1392:	f7 ce       	rjmp	.-530    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
    1394:	0e 94 81 15 	call	0x2b02	; 0x2b02 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    1398:	6f e0       	ldi	r22, 0x0F	; 15
    139a:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
    139e:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    13a0:	c8 2f       	mov	r28, r24
			break;
    13a2:	ef ce       	rjmp	.-546    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
    13a4:	0e 94 07 12 	call	0x240e	; 0x240e <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    13a8:	60 e1       	ldi	r22, 0x10	; 16
    13aa:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
    13ae:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    13b0:	c8 2f       	mov	r28, r24
			break;
    13b2:	e7 ce       	rjmp	.-562    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
    13b4:	0e 94 bd 12 	call	0x257a	; 0x257a <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    13b8:	62 e1       	ldi	r22, 0x12	; 18
    13ba:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
    13be:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    13c0:	c8 2f       	mov	r28, r24
			break;
    13c2:	df ce       	rjmp	.-578    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
    13c4:	8b ed       	ldi	r24, 0xDB	; 219
    13c6:	9e e0       	ldi	r25, 0x0E	; 14
    13c8:	0e 94 31 35 	call	0x6a62	; 0x6a62 <MRPP_is_body_package_ready>
    13cc:	88 23       	and	r24, r24
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <MAINPG_start+0x294>
    13d0:	d2 ce       	rjmp	.-604    	; 0x1176 <MAINPG_start+0x38>
    13d2:	0e 94 de 38 	call	0x71bc	; 0x71bc <LM_is_free>
    13d6:	88 23       	and	r24, r24
    13d8:	09 f4       	brne	.+2      	; 0x13dc <MAINPG_start+0x29e>
    13da:	cf ce       	rjmp	.-610    	; 0x117a <MAINPG_start+0x3c>
					print_debug("State: SEND DATA");
    13dc:	6b ef       	ldi	r22, 0xFB	; 251
    13de:	73 e0       	ldi	r23, 0x03	; 3
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
					MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    13e6:	40 ef       	ldi	r20, 0xF0	; 240
    13e8:	5e e0       	ldi	r21, 0x0E	; 14
    13ea:	67 ed       	ldi	r22, 0xD7	; 215
    13ec:	7c e0       	ldi	r23, 0x0C	; 12
    13ee:	80 91 db 0e 	lds	r24, 0x0EDB	; 0x800edb <bodyIndex>
    13f2:	90 91 dc 0e 	lds	r25, 0x0EDC	; 0x800edc <bodyIndex+0x1>
    13f6:	0e 94 f7 22 	call	0x45ee	; 0x45ee <MRPP_get_ready_body_package>
					lmStatus=LM_send_uplink(package, package_length);
    13fa:	60 91 f0 0e 	lds	r22, 0x0EF0	; 0x800ef0 <package_length>
    13fe:	87 ed       	ldi	r24, 0xD7	; 215
    1400:	9c e0       	ldi	r25, 0x0C	; 12
    1402:	0e 94 34 34 	call	0x6868	; 0x6868 <LM_send_uplink>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
    1406:	4d 2f       	mov	r20, r29
    1408:	68 2f       	mov	r22, r24
    140a:	80 91 db 0e 	lds	r24, 0x0EDB	; 0x800edb <bodyIndex>
    140e:	90 91 dc 0e 	lds	r25, 0x0EDC	; 0x800edc <bodyIndex+0x1>
    1412:	0e 94 f7 26 	call	0x4dee	; 0x4dee <decode_body_response>
    1416:	c8 2f       	mov	r28, r24
    1418:	b4 ce       	rjmp	.-664    	; 0x1182 <MAINPG_start+0x44>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
    141a:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <MRPP_all_body_package_sent>
    141e:	88 23       	and	r24, r24
    1420:	09 f4       	brne	.+2      	; 0x1424 <MAINPG_start+0x2e6>
    1422:	ad ce       	rjmp	.-678    	; 0x117e <MAINPG_start+0x40>
					state=MAINPG_SEND_TAIL;
    1424:	c3 e1       	ldi	r28, 0x13	; 19
    1426:	ad ce       	rjmp	.-678    	; 0x1182 <MAINPG_start+0x44>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
    1428:	0e 94 de 38 	call	0x71bc	; 0x71bc <LM_is_free>
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <MAINPG_start+0x2f4>
    1430:	a8 ce       	rjmp	.-688    	; 0x1182 <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
					break;
				}
				print_debug("State: SEND TAIL");
    1432:	6c e0       	ldi	r22, 0x0C	; 12
    1434:	74 e0       	ldi	r23, 0x04	; 4
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				comeBackToState=MAINPG_SETUP_SLEEP;
				MRPP_get_tail_package(package, &package_length);
    143c:	60 ef       	ldi	r22, 0xF0	; 240
    143e:	7e e0       	ldi	r23, 0x0E	; 14
    1440:	87 ed       	ldi	r24, 0xD7	; 215
    1442:	9c e0       	ldi	r25, 0x0C	; 12
    1444:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <MRPP_get_tail_package>
				lmStatus=LM_send_uplink(package, package_length);
    1448:	60 91 f0 0e 	lds	r22, 0x0EF0	; 0x800ef0 <package_length>
    144c:	87 ed       	ldi	r24, 0xD7	; 215
    144e:	9c e0       	ldi	r25, 0x0C	; 12
    1450:	0e 94 34 34 	call	0x6868	; 0x6868 <LM_send_uplink>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
    1454:	43 e1       	ldi	r20, 0x13	; 19
    1456:	64 e1       	ldi	r22, 0x14	; 20
    1458:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <decode_header_tail_response>
    145c:	c8 2f       	mov	r28, r24
				if(!LM_is_free()){
					state=MAINPG_SEND_TAIL;
					break;
				}
				print_debug("State: SEND TAIL");
				comeBackToState=MAINPG_SETUP_SLEEP;
    145e:	d4 e1       	ldi	r29, 0x14	; 20
				MRPP_get_tail_package(package, &package_length);
				lmStatus=LM_send_uplink(package, package_length);
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
				
			break;
    1460:	90 ce       	rjmp	.-736    	; 0x1182 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				print_debug("State: SETUP SLEEP");
    1462:	6d e1       	ldi	r22, 0x1D	; 29
    1464:	74 e0       	ldi	r23, 0x04	; 4
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				lmStatus=LM_put_to_sleep();
    146c:	0e 94 69 37 	call	0x6ed2	; 0x6ed2 <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	81 11       	cpse	r24, r1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	90 93 ed 0e 	sts	0x0EED, r25	; 0x800eed <fromSleep>
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	0e 94 11 37 	call	0x6e22	; 0x6e22 <PM_HAL_LED_power>
				TC2_HAL_kill();
    1498:	0e 94 c5 38 	call	0x718a	; 0x718a <TC2_HAL_kill>
				
				state=MAINPG_SLEEP;
    149c:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    149e:	71 ce       	rjmp	.-798    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_SLEEP:
				print_debug("State: SLEEP");
    14a0:	60 e3       	ldi	r22, 0x30	; 48
    14a2:	74 e0       	ldi	r23, 0x04	; 4
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				PM_HAL_enter_power_down();
    14aa:	0e 94 81 30 	call	0x6102	; 0x6102 <PM_HAL_enter_power_down>
				print_debug("State: SLEEP -> AWAKE");
    14ae:	6d e3       	ldi	r22, 0x3D	; 61
    14b0:	74 e0       	ldi	r23, 0x04	; 4
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				state=MAINPG_INIT_HW;
    14b8:	c0 e0       	ldi	r28, 0x00	; 0
			break;
    14ba:	63 ce       	rjmp	.-826    	; 0x1182 <MAINPG_start+0x44>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_PAYLOAD_INV_LEN:
				print_debug("State: PAYLOAD INV LEN");
    14bc:	63 e5       	ldi	r22, 0x53	; 83
    14be:	74 e0       	ldi	r23, 0x04	; 4
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				lmStatus=LM_send_uplink(package, 3);
    14c6:	63 e0       	ldi	r22, 0x03	; 3
    14c8:	87 ed       	ldi	r24, 0xD7	; 215
    14ca:	9c e0       	ldi	r25, 0x0C	; 12
    14cc:	0e 94 34 34 	call	0x6868	; 0x6868 <LM_send_uplink>
				state=decode_payload_inv_len_response(lmStatus, comeBackToState, MAINPG_PAYLOAD_INV_LEN);
    14d0:	46 e1       	ldi	r20, 0x16	; 22
    14d2:	6d 2f       	mov	r22, r29
    14d4:	0e 94 01 36 	call	0x6c02	; 0x6c02 <decode_payload_inv_len_response>
    14d8:	c8 2f       	mov	r28, r24
			break;
    14da:	53 ce       	rjmp	.-858    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_CONF_ERR:
				print_debug("State: CONF ERR");
    14dc:	6a e6       	ldi	r22, 0x6A	; 106
    14de:	74 e0       	ldi	r23, 0x04	; 4
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				LED_conf_err();
    14e6:	0e 94 18 39 	call	0x7230	; 0x7230 <LED_conf_err>
				print_debug("Conf err\n\r");
    14ea:	6a e7       	ldi	r22, 0x7A	; 122
    14ec:	74 e0       	ldi	r23, 0x04	; 4
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				state=MAINPG_END;
    14f4:	c8 e1       	ldi	r28, 0x18	; 24
			break;
    14f6:	45 ce       	rjmp	.-886    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_FATAL_ERROR:
				print_debug("State: FATAL ERR");
    14f8:	65 e8       	ldi	r22, 0x85	; 133
    14fa:	74 e0       	ldi	r23, 0x04	; 4
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				LED_fatal_err();
    1502:	0e 94 1c 39 	call	0x7238	; 0x7238 <LED_fatal_err>
				fromSleep=false;
    1506:	10 92 ed 0e 	sts	0x0EED, r1	; 0x800eed <fromSleep>
				state=MAINPG_END;
    150a:	c8 e1       	ldi	r28, 0x18	; 24
			break;
    150c:	3a ce       	rjmp	.-908    	; 0x1182 <MAINPG_start+0x44>
			
			case MAINPG_END:
				print_debug("State: END");
    150e:	66 e9       	ldi	r22, 0x96	; 150
    1510:	74 e0       	ldi	r23, 0x04	; 4
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	0e 94 4c 39 	call	0x7298	; 0x7298 <send_msg>
				return;
			break;	
		}
	}
}
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	08 95       	ret

Disassembly of section .text.calc_crc8:

00006424 <calc_crc8>:
 *  Author: Christopher S. Nielsen
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    6424:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    6426:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    6428:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    642a:	14 c0       	rjmp	.+40     	; 0x6454 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    642c:	fa 01       	movw	r30, r20
    642e:	e3 0f       	add	r30, r19
    6430:	f1 1d       	adc	r31, r1
    6432:	90 81       	ld	r25, Z
    6434:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    6436:	28 e0       	ldi	r18, 0x08	; 8
    6438:	0a c0       	rjmp	.+20     	; 0x644e <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    643a:	88 23       	and	r24, r24
    643c:	34 f4       	brge	.+12     	; 0x644a <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    643e:	90 e0       	ldi	r25, 0x00	; 0
    6440:	88 0f       	add	r24, r24
    6442:	99 1f       	adc	r25, r25
    6444:	91 e3       	ldi	r25, 0x31	; 49
    6446:	89 27       	eor	r24, r25
    6448:	01 c0       	rjmp	.+2      	; 0x644c <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    644a:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    644c:	21 50       	subi	r18, 0x01	; 1
    644e:	21 11       	cpse	r18, r1
    6450:	f4 cf       	rjmp	.-24     	; 0x643a <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    6452:	3f 5f       	subi	r19, 0xFF	; 255
    6454:	36 17       	cp	r19, r22
    6456:	50 f3       	brcs	.-44     	; 0x642c <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    6458:	08 95       	ret

Disassembly of section .text.get_decimal:

000040c0 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    40c0:	cf 92       	push	r12
    40c2:	df 92       	push	r13
    40c4:	ef 92       	push	r14
    40c6:	ff 92       	push	r15
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    40d2:	10 e0       	ldi	r17, 0x00	; 0
    40d4:	08 c0       	rjmp	.+16     	; 0x40e6 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    40d6:	cc 0d       	add	r28, r12
    40d8:	dd 1d       	adc	r29, r13
    40da:	88 81       	ld	r24, Y
    40dc:	8e 32       	cpi	r24, 0x2E	; 46
    40de:	11 f4       	brne	.+4      	; 0x40e4 <get_decimal+0x24>
			index=i+1;
    40e0:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    40e2:	0c c0       	rjmp	.+24     	; 0x40fc <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    40e4:	1f 5f       	subi	r17, 0xFF	; 255
    40e6:	c1 2f       	mov	r28, r17
    40e8:	d0 e0       	ldi	r29, 0x00	; 0
    40ea:	b6 01       	movw	r22, r12
    40ec:	80 e8       	ldi	r24, 0x80	; 128
    40ee:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	c8 17       	cp	r28, r24
    40f6:	d9 07       	cpc	r29, r25
    40f8:	70 f3       	brcs	.-36     	; 0x40d6 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    40fa:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    40fc:	11 23       	and	r17, r17
    40fe:	71 f1       	breq	.+92     	; 0x415c <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    4100:	c1 0e       	add	r12, r17
    4102:	d1 1c       	adc	r13, r1
    4104:	80 e8       	ldi	r24, 0x80	; 128
    4106:	e8 2e       	mov	r14, r24
    4108:	8e 2d       	mov	r24, r14
    410a:	b6 01       	movw	r22, r12
    410c:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    4110:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    4112:	8e 2d       	mov	r24, r14
    4114:	b6 01       	movw	r22, r12
    4116:	0e 94 30 39 	call	0x7260	; 0x7260 <atoi>
    411a:	8c 01       	movw	r16, r24
	float divisor=1;
    411c:	0f 2e       	mov	r0, r31
    411e:	c1 2c       	mov	r12, r1
    4120:	d1 2c       	mov	r13, r1
    4122:	f0 e8       	ldi	r31, 0x80	; 128
    4124:	ef 2e       	mov	r14, r31
    4126:	ff e3       	ldi	r31, 0x3F	; 63
    4128:	ff 2e       	mov	r15, r31
    412a:	f0 2d       	mov	r31, r0
	
	while(len>0){
    412c:	0b c0       	rjmp	.+22     	; 0x4144 <get_decimal+0x84>
		divisor*=10;
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	40 e2       	ldi	r20, 0x20	; 32
    4134:	51 e4       	ldi	r21, 0x41	; 65
    4136:	c7 01       	movw	r24, r14
    4138:	b6 01       	movw	r22, r12
    413a:	0e 94 2c 39 	call	0x7258	; 0x7258 <__mulsf3>
    413e:	6b 01       	movw	r12, r22
    4140:	7c 01       	movw	r14, r24
		len--;
    4142:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    4144:	c1 11       	cpse	r28, r1
    4146:	f3 cf       	rjmp	.-26     	; 0x412e <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    4148:	b8 01       	movw	r22, r16
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <__floatunsisf>
    4152:	a7 01       	movw	r20, r14
    4154:	96 01       	movw	r18, r12
    4156:	0e 94 28 39 	call	0x7250	; 0x7250 <__divsf3>
    415a:	03 c0       	rjmp	.+6      	; 0x4162 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    415c:	60 e0       	ldi	r22, 0x00	; 0
    415e:	70 e0       	ldi	r23, 0x00	; 0
    4160:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    4162:	df 91       	pop	r29
    4164:	cf 91       	pop	r28
    4166:	1f 91       	pop	r17
    4168:	0f 91       	pop	r16
    416a:	ff 90       	pop	r15
    416c:	ef 90       	pop	r14
    416e:	df 90       	pop	r13
    4170:	cf 90       	pop	r12
    4172:	08 95       	ret

Disassembly of section .text.str2flaot:

000059ba <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    59ba:	cf 92       	push	r12
    59bc:	df 92       	push	r13
    59be:	ef 92       	push	r14
    59c0:	ff 92       	push	r15
    59c2:	0f 93       	push	r16
    59c4:	1f 93       	push	r17
    59c6:	cf 93       	push	r28
    59c8:	df 93       	push	r29
    59ca:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    59cc:	bc 01       	movw	r22, r24
    59ce:	80 e8       	ldi	r24, 0x80	; 128
    59d0:	0e 94 30 39 	call	0x7260	; 0x7260 <atoi>
    59d4:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    59d6:	c8 01       	movw	r24, r16
    59d8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <get_decimal>
    59dc:	6b 01       	movw	r12, r22
    59de:	7c 01       	movw	r14, r24
	return intVal+deci;
    59e0:	be 01       	movw	r22, r28
    59e2:	80 e0       	ldi	r24, 0x00	; 0
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <__floatunsisf>
    59ea:	9b 01       	movw	r18, r22
    59ec:	ac 01       	movw	r20, r24
    59ee:	c7 01       	movw	r24, r14
    59f0:	b6 01       	movw	r22, r12
    59f2:	0e 94 2a 38 	call	0x7054	; 0x7054 <__addsf3>
	
	
}
    59f6:	df 91       	pop	r29
    59f8:	cf 91       	pop	r28
    59fa:	1f 91       	pop	r17
    59fc:	0f 91       	pop	r16
    59fe:	ff 90       	pop	r15
    5a00:	ef 90       	pop	r14
    5a02:	df 90       	pop	r13
    5a04:	cf 90       	pop	r12
    5a06:	08 95       	ret

Disassembly of section .text.is_float:

000055e4 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    55e4:	ef 92       	push	r14
    55e6:	ff 92       	push	r15
    55e8:	0f 93       	push	r16
    55ea:	1f 93       	push	r17
    55ec:	cf 93       	push	r28
    55ee:	df 93       	push	r29
    55f0:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    55f2:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    55f4:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    55f6:	0d c0       	rjmp	.+26     	; 0x5612 <is_float+0x2e>
	{
		if(str[i]=='.'){
    55f8:	ce 0d       	add	r28, r14
    55fa:	df 1d       	adc	r29, r15
    55fc:	88 81       	ld	r24, Y
    55fe:	8e 32       	cpi	r24, 0x2E	; 46
    5600:	21 f4       	brne	.+8      	; 0x560a <is_float+0x26>
			if (got_dot)
    5602:	01 11       	cpse	r16, r1
    5604:	11 c0       	rjmp	.+34     	; 0x5628 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    5606:	01 e0       	ldi	r16, 0x01	; 1
    5608:	03 c0       	rjmp	.+6      	; 0x5610 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    560a:	80 53       	subi	r24, 0x30	; 48
    560c:	8a 30       	cpi	r24, 0x0A	; 10
    560e:	70 f4       	brcc	.+28     	; 0x562c <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    5610:	1f 5f       	subi	r17, 0xFF	; 255
    5612:	c1 2f       	mov	r28, r17
    5614:	d0 e0       	ldi	r29, 0x00	; 0
    5616:	b7 01       	movw	r22, r14
    5618:	80 e8       	ldi	r24, 0x80	; 128
    561a:	0e 94 4a 34 	call	0x6894	; 0x6894 <strlen>
    561e:	c8 17       	cp	r28, r24
    5620:	d9 07       	cpc	r29, r25
    5622:	50 f3       	brcs	.-44     	; 0x55f8 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    5624:	81 e0       	ldi	r24, 0x01	; 1
    5626:	03 c0       	rjmp	.+6      	; 0x562e <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	01 c0       	rjmp	.+2      	; 0x562e <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    562c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    562e:	df 91       	pop	r29
    5630:	cf 91       	pop	r28
    5632:	1f 91       	pop	r17
    5634:	0f 91       	pop	r16
    5636:	ff 90       	pop	r15
    5638:	ef 90       	pop	r14
    563a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00007052 <__subsf3>:
    7052:	50 58       	subi	r21, 0x80	; 128

00007054 <__addsf3>:
    7054:	bb 27       	eor	r27, r27
    7056:	aa 27       	eor	r26, r26
    7058:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__addsf3x>
    705c:	0c 94 64 35 	jmp	0x6ac8	; 0x6ac8 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003c3a <__addsf3x>:
    3c3a:	11 c0       	rjmp	.+34     	; 0x3c5e <__addsf3x+0x24>
    3c3c:	0e 94 30 38 	call	0x7060	; 0x7060 <__fp_pscA>
    3c40:	38 f0       	brcs	.+14     	; 0x3c50 <__addsf3x+0x16>
    3c42:	0e 94 37 38 	call	0x706e	; 0x706e <__fp_pscB>
    3c46:	20 f0       	brcs	.+8      	; 0x3c50 <__addsf3x+0x16>
    3c48:	39 f4       	brne	.+14     	; 0x3c58 <__addsf3x+0x1e>
    3c4a:	9f 3f       	cpi	r25, 0xFF	; 255
    3c4c:	19 f4       	brne	.+6      	; 0x3c54 <__addsf3x+0x1a>
    3c4e:	26 f4       	brtc	.+8      	; 0x3c58 <__addsf3x+0x1e>
    3c50:	0c 94 4f 39 	jmp	0x729e	; 0x729e <__fp_nan>
    3c54:	0e f4       	brtc	.+2      	; 0x3c58 <__addsf3x+0x1e>
    3c56:	e0 95       	com	r30
    3c58:	e7 fb       	bst	r30, 7
    3c5a:	0c 94 ae 38 	jmp	0x715c	; 0x715c <__fp_inf>
    3c5e:	e9 2f       	mov	r30, r25
    3c60:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <__fp_split3>
    3c64:	58 f3       	brcs	.-42     	; 0x3c3c <__addsf3x+0x2>
    3c66:	ba 17       	cp	r27, r26
    3c68:	62 07       	cpc	r22, r18
    3c6a:	73 07       	cpc	r23, r19
    3c6c:	84 07       	cpc	r24, r20
    3c6e:	95 07       	cpc	r25, r21
    3c70:	20 f0       	brcs	.+8      	; 0x3c7a <__addsf3x+0x40>
    3c72:	79 f4       	brne	.+30     	; 0x3c92 <__addsf3x+0x58>
    3c74:	a6 f5       	brtc	.+104    	; 0x3cde <__addsf3x+0xa4>
    3c76:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__fp_zero>
    3c7a:	0e f4       	brtc	.+2      	; 0x3c7e <__addsf3x+0x44>
    3c7c:	e0 95       	com	r30
    3c7e:	0b 2e       	mov	r0, r27
    3c80:	ba 2f       	mov	r27, r26
    3c82:	a0 2d       	mov	r26, r0
    3c84:	0b 01       	movw	r0, r22
    3c86:	b9 01       	movw	r22, r18
    3c88:	90 01       	movw	r18, r0
    3c8a:	0c 01       	movw	r0, r24
    3c8c:	ca 01       	movw	r24, r20
    3c8e:	a0 01       	movw	r20, r0
    3c90:	11 24       	eor	r1, r1
    3c92:	ff 27       	eor	r31, r31
    3c94:	59 1b       	sub	r21, r25
    3c96:	99 f0       	breq	.+38     	; 0x3cbe <__addsf3x+0x84>
    3c98:	59 3f       	cpi	r21, 0xF9	; 249
    3c9a:	50 f4       	brcc	.+20     	; 0x3cb0 <__addsf3x+0x76>
    3c9c:	50 3e       	cpi	r21, 0xE0	; 224
    3c9e:	68 f1       	brcs	.+90     	; 0x3cfa <__addsf3x+0xc0>
    3ca0:	1a 16       	cp	r1, r26
    3ca2:	f0 40       	sbci	r31, 0x00	; 0
    3ca4:	a2 2f       	mov	r26, r18
    3ca6:	23 2f       	mov	r18, r19
    3ca8:	34 2f       	mov	r19, r20
    3caa:	44 27       	eor	r20, r20
    3cac:	58 5f       	subi	r21, 0xF8	; 248
    3cae:	f3 cf       	rjmp	.-26     	; 0x3c96 <__addsf3x+0x5c>
    3cb0:	46 95       	lsr	r20
    3cb2:	37 95       	ror	r19
    3cb4:	27 95       	ror	r18
    3cb6:	a7 95       	ror	r26
    3cb8:	f0 40       	sbci	r31, 0x00	; 0
    3cba:	53 95       	inc	r21
    3cbc:	c9 f7       	brne	.-14     	; 0x3cb0 <__addsf3x+0x76>
    3cbe:	7e f4       	brtc	.+30     	; 0x3cde <__addsf3x+0xa4>
    3cc0:	1f 16       	cp	r1, r31
    3cc2:	ba 0b       	sbc	r27, r26
    3cc4:	62 0b       	sbc	r22, r18
    3cc6:	73 0b       	sbc	r23, r19
    3cc8:	84 0b       	sbc	r24, r20
    3cca:	ba f0       	brmi	.+46     	; 0x3cfa <__addsf3x+0xc0>
    3ccc:	91 50       	subi	r25, 0x01	; 1
    3cce:	a1 f0       	breq	.+40     	; 0x3cf8 <__addsf3x+0xbe>
    3cd0:	ff 0f       	add	r31, r31
    3cd2:	bb 1f       	adc	r27, r27
    3cd4:	66 1f       	adc	r22, r22
    3cd6:	77 1f       	adc	r23, r23
    3cd8:	88 1f       	adc	r24, r24
    3cda:	c2 f7       	brpl	.-16     	; 0x3ccc <__addsf3x+0x92>
    3cdc:	0e c0       	rjmp	.+28     	; 0x3cfa <__addsf3x+0xc0>
    3cde:	ba 0f       	add	r27, r26
    3ce0:	62 1f       	adc	r22, r18
    3ce2:	73 1f       	adc	r23, r19
    3ce4:	84 1f       	adc	r24, r20
    3ce6:	48 f4       	brcc	.+18     	; 0x3cfa <__addsf3x+0xc0>
    3ce8:	87 95       	ror	r24
    3cea:	77 95       	ror	r23
    3cec:	67 95       	ror	r22
    3cee:	b7 95       	ror	r27
    3cf0:	f7 95       	ror	r31
    3cf2:	9e 3f       	cpi	r25, 0xFE	; 254
    3cf4:	08 f0       	brcs	.+2      	; 0x3cf8 <__addsf3x+0xbe>
    3cf6:	b0 cf       	rjmp	.-160    	; 0x3c58 <__addsf3x+0x1e>
    3cf8:	93 95       	inc	r25
    3cfa:	88 0f       	add	r24, r24
    3cfc:	08 f0       	brcs	.+2      	; 0x3d00 <__addsf3x+0xc6>
    3cfe:	99 27       	eor	r25, r25
    3d00:	ee 0f       	add	r30, r30
    3d02:	97 95       	ror	r25
    3d04:	87 95       	ror	r24
    3d06:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000071e4 <__cmpsf2>:
    71e4:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <__fp_cmp>
    71e8:	08 f4       	brcc	.+2      	; 0x71ec <__cmpsf2+0x8>
    71ea:	81 e0       	ldi	r24, 0x01	; 1
    71ec:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00007250 <__divsf3>:
    7250:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__divsf3x>
    7254:	0c 94 64 35 	jmp	0x6ac8	; 0x6ac8 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003a88 <__divsf3x>:
    3a88:	10 c0       	rjmp	.+32     	; 0x3aaa <__divsf3x+0x22>
    3a8a:	0e 94 37 38 	call	0x706e	; 0x706e <__fp_pscB>
    3a8e:	58 f0       	brcs	.+22     	; 0x3aa6 <__divsf3x+0x1e>
    3a90:	0e 94 30 38 	call	0x7060	; 0x7060 <__fp_pscA>
    3a94:	40 f0       	brcs	.+16     	; 0x3aa6 <__divsf3x+0x1e>
    3a96:	29 f4       	brne	.+10     	; 0x3aa2 <__divsf3x+0x1a>
    3a98:	5f 3f       	cpi	r21, 0xFF	; 255
    3a9a:	29 f0       	breq	.+10     	; 0x3aa6 <__divsf3x+0x1e>
    3a9c:	0c 94 ae 38 	jmp	0x715c	; 0x715c <__fp_inf>
    3aa0:	51 11       	cpse	r21, r1
    3aa2:	0c 94 3f 38 	jmp	0x707e	; 0x707e <__fp_szero>
    3aa6:	0c 94 4f 39 	jmp	0x729e	; 0x729e <__fp_nan>
    3aaa:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <__fp_split3>
    3aae:	68 f3       	brcs	.-38     	; 0x3a8a <__divsf3x+0x2>

00003ab0 <__divsf3_pse>:
    3ab0:	99 23       	and	r25, r25
    3ab2:	b1 f3       	breq	.-20     	; 0x3aa0 <__divsf3x+0x18>
    3ab4:	55 23       	and	r21, r21
    3ab6:	91 f3       	breq	.-28     	; 0x3a9c <__divsf3x+0x14>
    3ab8:	95 1b       	sub	r25, r21
    3aba:	55 0b       	sbc	r21, r21
    3abc:	bb 27       	eor	r27, r27
    3abe:	aa 27       	eor	r26, r26
    3ac0:	62 17       	cp	r22, r18
    3ac2:	73 07       	cpc	r23, r19
    3ac4:	84 07       	cpc	r24, r20
    3ac6:	38 f0       	brcs	.+14     	; 0x3ad6 <__divsf3_pse+0x26>
    3ac8:	9f 5f       	subi	r25, 0xFF	; 255
    3aca:	5f 4f       	sbci	r21, 0xFF	; 255
    3acc:	22 0f       	add	r18, r18
    3ace:	33 1f       	adc	r19, r19
    3ad0:	44 1f       	adc	r20, r20
    3ad2:	aa 1f       	adc	r26, r26
    3ad4:	a9 f3       	breq	.-22     	; 0x3ac0 <__divsf3_pse+0x10>
    3ad6:	35 d0       	rcall	.+106    	; 0x3b42 <__divsf3_pse+0x92>
    3ad8:	0e 2e       	mov	r0, r30
    3ada:	3a f0       	brmi	.+14     	; 0x3aea <__divsf3_pse+0x3a>
    3adc:	e0 e8       	ldi	r30, 0x80	; 128
    3ade:	32 d0       	rcall	.+100    	; 0x3b44 <__divsf3_pse+0x94>
    3ae0:	91 50       	subi	r25, 0x01	; 1
    3ae2:	50 40       	sbci	r21, 0x00	; 0
    3ae4:	e6 95       	lsr	r30
    3ae6:	00 1c       	adc	r0, r0
    3ae8:	ca f7       	brpl	.-14     	; 0x3adc <__divsf3_pse+0x2c>
    3aea:	2b d0       	rcall	.+86     	; 0x3b42 <__divsf3_pse+0x92>
    3aec:	fe 2f       	mov	r31, r30
    3aee:	29 d0       	rcall	.+82     	; 0x3b42 <__divsf3_pse+0x92>
    3af0:	66 0f       	add	r22, r22
    3af2:	77 1f       	adc	r23, r23
    3af4:	88 1f       	adc	r24, r24
    3af6:	bb 1f       	adc	r27, r27
    3af8:	26 17       	cp	r18, r22
    3afa:	37 07       	cpc	r19, r23
    3afc:	48 07       	cpc	r20, r24
    3afe:	ab 07       	cpc	r26, r27
    3b00:	b0 e8       	ldi	r27, 0x80	; 128
    3b02:	09 f0       	breq	.+2      	; 0x3b06 <__divsf3_pse+0x56>
    3b04:	bb 0b       	sbc	r27, r27
    3b06:	80 2d       	mov	r24, r0
    3b08:	bf 01       	movw	r22, r30
    3b0a:	ff 27       	eor	r31, r31
    3b0c:	93 58       	subi	r25, 0x83	; 131
    3b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b10:	3a f0       	brmi	.+14     	; 0x3b20 <__divsf3_pse+0x70>
    3b12:	9e 3f       	cpi	r25, 0xFE	; 254
    3b14:	51 05       	cpc	r21, r1
    3b16:	78 f0       	brcs	.+30     	; 0x3b36 <__divsf3_pse+0x86>
    3b18:	0c 94 ae 38 	jmp	0x715c	; 0x715c <__fp_inf>
    3b1c:	0c 94 3f 38 	jmp	0x707e	; 0x707e <__fp_szero>
    3b20:	5f 3f       	cpi	r21, 0xFF	; 255
    3b22:	e4 f3       	brlt	.-8      	; 0x3b1c <__divsf3_pse+0x6c>
    3b24:	98 3e       	cpi	r25, 0xE8	; 232
    3b26:	d4 f3       	brlt	.-12     	; 0x3b1c <__divsf3_pse+0x6c>
    3b28:	86 95       	lsr	r24
    3b2a:	77 95       	ror	r23
    3b2c:	67 95       	ror	r22
    3b2e:	b7 95       	ror	r27
    3b30:	f7 95       	ror	r31
    3b32:	9f 5f       	subi	r25, 0xFF	; 255
    3b34:	c9 f7       	brne	.-14     	; 0x3b28 <__divsf3_pse+0x78>
    3b36:	88 0f       	add	r24, r24
    3b38:	91 1d       	adc	r25, r1
    3b3a:	96 95       	lsr	r25
    3b3c:	87 95       	ror	r24
    3b3e:	97 f9       	bld	r25, 7
    3b40:	08 95       	ret
    3b42:	e1 e0       	ldi	r30, 0x01	; 1
    3b44:	66 0f       	add	r22, r22
    3b46:	77 1f       	adc	r23, r23
    3b48:	88 1f       	adc	r24, r24
    3b4a:	bb 1f       	adc	r27, r27
    3b4c:	62 17       	cp	r22, r18
    3b4e:	73 07       	cpc	r23, r19
    3b50:	84 07       	cpc	r24, r20
    3b52:	ba 07       	cpc	r27, r26
    3b54:	20 f0       	brcs	.+8      	; 0x3b5e <__divsf3_pse+0xae>
    3b56:	62 1b       	sub	r22, r18
    3b58:	73 0b       	sbc	r23, r19
    3b5a:	84 0b       	sbc	r24, r20
    3b5c:	ba 0b       	sbc	r27, r26
    3b5e:	ee 1f       	adc	r30, r30
    3b60:	88 f7       	brcc	.-30     	; 0x3b44 <__divsf3_pse+0x94>
    3b62:	e0 95       	com	r30
    3b64:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000541e <__fixunssfsi>:
    541e:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fp_splitA>
    5422:	88 f0       	brcs	.+34     	; 0x5446 <__fixunssfsi+0x28>
    5424:	9f 57       	subi	r25, 0x7F	; 127
    5426:	98 f0       	brcs	.+38     	; 0x544e <__fixunssfsi+0x30>
    5428:	b9 2f       	mov	r27, r25
    542a:	99 27       	eor	r25, r25
    542c:	b7 51       	subi	r27, 0x17	; 23
    542e:	b0 f0       	brcs	.+44     	; 0x545c <__fixunssfsi+0x3e>
    5430:	e1 f0       	breq	.+56     	; 0x546a <__fixunssfsi+0x4c>
    5432:	66 0f       	add	r22, r22
    5434:	77 1f       	adc	r23, r23
    5436:	88 1f       	adc	r24, r24
    5438:	99 1f       	adc	r25, r25
    543a:	1a f0       	brmi	.+6      	; 0x5442 <__fixunssfsi+0x24>
    543c:	ba 95       	dec	r27
    543e:	c9 f7       	brne	.-14     	; 0x5432 <__fixunssfsi+0x14>
    5440:	14 c0       	rjmp	.+40     	; 0x546a <__fixunssfsi+0x4c>
    5442:	b1 30       	cpi	r27, 0x01	; 1
    5444:	91 f0       	breq	.+36     	; 0x546a <__fixunssfsi+0x4c>
    5446:	0e 94 3e 38 	call	0x707c	; 0x707c <__fp_zero>
    544a:	b1 e0       	ldi	r27, 0x01	; 1
    544c:	08 95       	ret
    544e:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__fp_zero>
    5452:	67 2f       	mov	r22, r23
    5454:	78 2f       	mov	r23, r24
    5456:	88 27       	eor	r24, r24
    5458:	b8 5f       	subi	r27, 0xF8	; 248
    545a:	39 f0       	breq	.+14     	; 0x546a <__fixunssfsi+0x4c>
    545c:	b9 3f       	cpi	r27, 0xF9	; 249
    545e:	cc f3       	brlt	.-14     	; 0x5452 <__fixunssfsi+0x34>
    5460:	86 95       	lsr	r24
    5462:	77 95       	ror	r23
    5464:	67 95       	ror	r22
    5466:	b3 95       	inc	r27
    5468:	d9 f7       	brne	.-10     	; 0x5460 <__fixunssfsi+0x42>
    546a:	3e f4       	brtc	.+14     	; 0x547a <__fixunssfsi+0x5c>
    546c:	90 95       	com	r25
    546e:	80 95       	com	r24
    5470:	70 95       	com	r23
    5472:	61 95       	neg	r22
    5474:	7f 4f       	sbci	r23, 0xFF	; 255
    5476:	8f 4f       	sbci	r24, 0xFF	; 255
    5478:	9f 4f       	sbci	r25, 0xFF	; 255
    547a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004a34 <__floatunsisf>:
    4a34:	e8 94       	clt
    4a36:	09 c0       	rjmp	.+18     	; 0x4a4a <__floatsisf+0x12>

00004a38 <__floatsisf>:
    4a38:	97 fb       	bst	r25, 7
    4a3a:	3e f4       	brtc	.+14     	; 0x4a4a <__floatsisf+0x12>
    4a3c:	90 95       	com	r25
    4a3e:	80 95       	com	r24
    4a40:	70 95       	com	r23
    4a42:	61 95       	neg	r22
    4a44:	7f 4f       	sbci	r23, 0xFF	; 255
    4a46:	8f 4f       	sbci	r24, 0xFF	; 255
    4a48:	9f 4f       	sbci	r25, 0xFF	; 255
    4a4a:	99 23       	and	r25, r25
    4a4c:	a9 f0       	breq	.+42     	; 0x4a78 <__floatsisf+0x40>
    4a4e:	f9 2f       	mov	r31, r25
    4a50:	96 e9       	ldi	r25, 0x96	; 150
    4a52:	bb 27       	eor	r27, r27
    4a54:	93 95       	inc	r25
    4a56:	f6 95       	lsr	r31
    4a58:	87 95       	ror	r24
    4a5a:	77 95       	ror	r23
    4a5c:	67 95       	ror	r22
    4a5e:	b7 95       	ror	r27
    4a60:	f1 11       	cpse	r31, r1
    4a62:	f8 cf       	rjmp	.-16     	; 0x4a54 <__floatsisf+0x1c>
    4a64:	fa f4       	brpl	.+62     	; 0x4aa4 <__floatsisf+0x6c>
    4a66:	bb 0f       	add	r27, r27
    4a68:	11 f4       	brne	.+4      	; 0x4a6e <__floatsisf+0x36>
    4a6a:	60 ff       	sbrs	r22, 0
    4a6c:	1b c0       	rjmp	.+54     	; 0x4aa4 <__floatsisf+0x6c>
    4a6e:	6f 5f       	subi	r22, 0xFF	; 255
    4a70:	7f 4f       	sbci	r23, 0xFF	; 255
    4a72:	8f 4f       	sbci	r24, 0xFF	; 255
    4a74:	9f 4f       	sbci	r25, 0xFF	; 255
    4a76:	16 c0       	rjmp	.+44     	; 0x4aa4 <__floatsisf+0x6c>
    4a78:	88 23       	and	r24, r24
    4a7a:	11 f0       	breq	.+4      	; 0x4a80 <__floatsisf+0x48>
    4a7c:	96 e9       	ldi	r25, 0x96	; 150
    4a7e:	11 c0       	rjmp	.+34     	; 0x4aa2 <__floatsisf+0x6a>
    4a80:	77 23       	and	r23, r23
    4a82:	21 f0       	breq	.+8      	; 0x4a8c <__floatsisf+0x54>
    4a84:	9e e8       	ldi	r25, 0x8E	; 142
    4a86:	87 2f       	mov	r24, r23
    4a88:	76 2f       	mov	r23, r22
    4a8a:	05 c0       	rjmp	.+10     	; 0x4a96 <__floatsisf+0x5e>
    4a8c:	66 23       	and	r22, r22
    4a8e:	71 f0       	breq	.+28     	; 0x4aac <__floatsisf+0x74>
    4a90:	96 e8       	ldi	r25, 0x86	; 134
    4a92:	86 2f       	mov	r24, r22
    4a94:	70 e0       	ldi	r23, 0x00	; 0
    4a96:	60 e0       	ldi	r22, 0x00	; 0
    4a98:	2a f0       	brmi	.+10     	; 0x4aa4 <__floatsisf+0x6c>
    4a9a:	9a 95       	dec	r25
    4a9c:	66 0f       	add	r22, r22
    4a9e:	77 1f       	adc	r23, r23
    4aa0:	88 1f       	adc	r24, r24
    4aa2:	da f7       	brpl	.-10     	; 0x4a9a <__floatsisf+0x62>
    4aa4:	88 0f       	add	r24, r24
    4aa6:	96 95       	lsr	r25
    4aa8:	87 95       	ror	r24
    4aaa:	97 f9       	bld	r25, 7
    4aac:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005dd0 <__fp_cmp>:
    5dd0:	99 0f       	add	r25, r25
    5dd2:	00 08       	sbc	r0, r0
    5dd4:	55 0f       	add	r21, r21
    5dd6:	aa 0b       	sbc	r26, r26
    5dd8:	e0 e8       	ldi	r30, 0x80	; 128
    5dda:	fe ef       	ldi	r31, 0xFE	; 254
    5ddc:	16 16       	cp	r1, r22
    5dde:	17 06       	cpc	r1, r23
    5de0:	e8 07       	cpc	r30, r24
    5de2:	f9 07       	cpc	r31, r25
    5de4:	c0 f0       	brcs	.+48     	; 0x5e16 <__fp_cmp+0x46>
    5de6:	12 16       	cp	r1, r18
    5de8:	13 06       	cpc	r1, r19
    5dea:	e4 07       	cpc	r30, r20
    5dec:	f5 07       	cpc	r31, r21
    5dee:	98 f0       	brcs	.+38     	; 0x5e16 <__fp_cmp+0x46>
    5df0:	62 1b       	sub	r22, r18
    5df2:	73 0b       	sbc	r23, r19
    5df4:	84 0b       	sbc	r24, r20
    5df6:	95 0b       	sbc	r25, r21
    5df8:	39 f4       	brne	.+14     	; 0x5e08 <__fp_cmp+0x38>
    5dfa:	0a 26       	eor	r0, r26
    5dfc:	61 f0       	breq	.+24     	; 0x5e16 <__fp_cmp+0x46>
    5dfe:	23 2b       	or	r18, r19
    5e00:	24 2b       	or	r18, r20
    5e02:	25 2b       	or	r18, r21
    5e04:	21 f4       	brne	.+8      	; 0x5e0e <__fp_cmp+0x3e>
    5e06:	08 95       	ret
    5e08:	0a 26       	eor	r0, r26
    5e0a:	09 f4       	brne	.+2      	; 0x5e0e <__fp_cmp+0x3e>
    5e0c:	a1 40       	sbci	r26, 0x01	; 1
    5e0e:	a6 95       	lsr	r26
    5e10:	8f ef       	ldi	r24, 0xFF	; 255
    5e12:	81 1d       	adc	r24, r1
    5e14:	81 1d       	adc	r24, r1
    5e16:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000715c <__fp_inf>:
    715c:	97 f9       	bld	r25, 7
    715e:	9f 67       	ori	r25, 0x7F	; 127
    7160:	80 e8       	ldi	r24, 0x80	; 128
    7162:	70 e0       	ldi	r23, 0x00	; 0
    7164:	60 e0       	ldi	r22, 0x00	; 0
    7166:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000729e <__fp_nan>:
    729e:	9f ef       	ldi	r25, 0xFF	; 255
    72a0:	80 ec       	ldi	r24, 0xC0	; 192
    72a2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00007060 <__fp_pscA>:
    7060:	00 24       	eor	r0, r0
    7062:	0a 94       	dec	r0
    7064:	16 16       	cp	r1, r22
    7066:	17 06       	cpc	r1, r23
    7068:	18 06       	cpc	r1, r24
    706a:	09 06       	cpc	r0, r25
    706c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000706e <__fp_pscB>:
    706e:	00 24       	eor	r0, r0
    7070:	0a 94       	dec	r0
    7072:	12 16       	cp	r1, r18
    7074:	13 06       	cpc	r1, r19
    7076:	14 06       	cpc	r1, r20
    7078:	05 06       	cpc	r0, r21
    707a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006ac8 <__fp_round>:
    6ac8:	09 2e       	mov	r0, r25
    6aca:	03 94       	inc	r0
    6acc:	00 0c       	add	r0, r0
    6ace:	11 f4       	brne	.+4      	; 0x6ad4 <__fp_round+0xc>
    6ad0:	88 23       	and	r24, r24
    6ad2:	52 f0       	brmi	.+20     	; 0x6ae8 <__fp_round+0x20>
    6ad4:	bb 0f       	add	r27, r27
    6ad6:	40 f4       	brcc	.+16     	; 0x6ae8 <__fp_round+0x20>
    6ad8:	bf 2b       	or	r27, r31
    6ada:	11 f4       	brne	.+4      	; 0x6ae0 <__fp_round+0x18>
    6adc:	60 ff       	sbrs	r22, 0
    6ade:	04 c0       	rjmp	.+8      	; 0x6ae8 <__fp_round+0x20>
    6ae0:	6f 5f       	subi	r22, 0xFF	; 255
    6ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ae8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00005f30 <__fp_split3>:
    5f30:	57 fd       	sbrc	r21, 7
    5f32:	90 58       	subi	r25, 0x80	; 128
    5f34:	44 0f       	add	r20, r20
    5f36:	55 1f       	adc	r21, r21
    5f38:	59 f0       	breq	.+22     	; 0x5f50 <__fp_splitA+0x10>
    5f3a:	5f 3f       	cpi	r21, 0xFF	; 255
    5f3c:	71 f0       	breq	.+28     	; 0x5f5a <__fp_splitA+0x1a>
    5f3e:	47 95       	ror	r20

00005f40 <__fp_splitA>:
    5f40:	88 0f       	add	r24, r24
    5f42:	97 fb       	bst	r25, 7
    5f44:	99 1f       	adc	r25, r25
    5f46:	61 f0       	breq	.+24     	; 0x5f60 <__fp_splitA+0x20>
    5f48:	9f 3f       	cpi	r25, 0xFF	; 255
    5f4a:	79 f0       	breq	.+30     	; 0x5f6a <__fp_splitA+0x2a>
    5f4c:	87 95       	ror	r24
    5f4e:	08 95       	ret
    5f50:	12 16       	cp	r1, r18
    5f52:	13 06       	cpc	r1, r19
    5f54:	14 06       	cpc	r1, r20
    5f56:	55 1f       	adc	r21, r21
    5f58:	f2 cf       	rjmp	.-28     	; 0x5f3e <__fp_split3+0xe>
    5f5a:	46 95       	lsr	r20
    5f5c:	f1 df       	rcall	.-30     	; 0x5f40 <__fp_splitA>
    5f5e:	08 c0       	rjmp	.+16     	; 0x5f70 <__fp_splitA+0x30>
    5f60:	16 16       	cp	r1, r22
    5f62:	17 06       	cpc	r1, r23
    5f64:	18 06       	cpc	r1, r24
    5f66:	99 1f       	adc	r25, r25
    5f68:	f1 cf       	rjmp	.-30     	; 0x5f4c <__fp_splitA+0xc>
    5f6a:	86 95       	lsr	r24
    5f6c:	71 05       	cpc	r23, r1
    5f6e:	61 05       	cpc	r22, r1
    5f70:	08 94       	sec
    5f72:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000707c <__fp_zero>:
    707c:	e8 94       	clt

0000707e <__fp_szero>:
    707e:	bb 27       	eor	r27, r27
    7080:	66 27       	eor	r22, r22
    7082:	77 27       	eor	r23, r23
    7084:	cb 01       	movw	r24, r22
    7086:	97 f9       	bld	r25, 7
    7088:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00007258 <__mulsf3>:
    7258:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__mulsf3x>
    725c:	0c 94 64 35 	jmp	0x6ac8	; 0x6ac8 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003b66 <__mulsf3x>:
    3b66:	0f c0       	rjmp	.+30     	; 0x3b86 <__mulsf3x+0x20>
    3b68:	0e 94 30 38 	call	0x7060	; 0x7060 <__fp_pscA>
    3b6c:	38 f0       	brcs	.+14     	; 0x3b7c <__mulsf3x+0x16>
    3b6e:	0e 94 37 38 	call	0x706e	; 0x706e <__fp_pscB>
    3b72:	20 f0       	brcs	.+8      	; 0x3b7c <__mulsf3x+0x16>
    3b74:	95 23       	and	r25, r21
    3b76:	11 f0       	breq	.+4      	; 0x3b7c <__mulsf3x+0x16>
    3b78:	0c 94 ae 38 	jmp	0x715c	; 0x715c <__fp_inf>
    3b7c:	0c 94 4f 39 	jmp	0x729e	; 0x729e <__fp_nan>
    3b80:	11 24       	eor	r1, r1
    3b82:	0c 94 3f 38 	jmp	0x707e	; 0x707e <__fp_szero>
    3b86:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <__fp_split3>
    3b8a:	70 f3       	brcs	.-36     	; 0x3b68 <__mulsf3x+0x2>

00003b8c <__mulsf3_pse>:
    3b8c:	95 9f       	mul	r25, r21
    3b8e:	c1 f3       	breq	.-16     	; 0x3b80 <__mulsf3x+0x1a>
    3b90:	95 0f       	add	r25, r21
    3b92:	50 e0       	ldi	r21, 0x00	; 0
    3b94:	55 1f       	adc	r21, r21
    3b96:	62 9f       	mul	r22, r18
    3b98:	f0 01       	movw	r30, r0
    3b9a:	72 9f       	mul	r23, r18
    3b9c:	bb 27       	eor	r27, r27
    3b9e:	f0 0d       	add	r31, r0
    3ba0:	b1 1d       	adc	r27, r1
    3ba2:	63 9f       	mul	r22, r19
    3ba4:	aa 27       	eor	r26, r26
    3ba6:	f0 0d       	add	r31, r0
    3ba8:	b1 1d       	adc	r27, r1
    3baa:	aa 1f       	adc	r26, r26
    3bac:	64 9f       	mul	r22, r20
    3bae:	66 27       	eor	r22, r22
    3bb0:	b0 0d       	add	r27, r0
    3bb2:	a1 1d       	adc	r26, r1
    3bb4:	66 1f       	adc	r22, r22
    3bb6:	82 9f       	mul	r24, r18
    3bb8:	22 27       	eor	r18, r18
    3bba:	b0 0d       	add	r27, r0
    3bbc:	a1 1d       	adc	r26, r1
    3bbe:	62 1f       	adc	r22, r18
    3bc0:	73 9f       	mul	r23, r19
    3bc2:	b0 0d       	add	r27, r0
    3bc4:	a1 1d       	adc	r26, r1
    3bc6:	62 1f       	adc	r22, r18
    3bc8:	83 9f       	mul	r24, r19
    3bca:	a0 0d       	add	r26, r0
    3bcc:	61 1d       	adc	r22, r1
    3bce:	22 1f       	adc	r18, r18
    3bd0:	74 9f       	mul	r23, r20
    3bd2:	33 27       	eor	r19, r19
    3bd4:	a0 0d       	add	r26, r0
    3bd6:	61 1d       	adc	r22, r1
    3bd8:	23 1f       	adc	r18, r19
    3bda:	84 9f       	mul	r24, r20
    3bdc:	60 0d       	add	r22, r0
    3bde:	21 1d       	adc	r18, r1
    3be0:	82 2f       	mov	r24, r18
    3be2:	76 2f       	mov	r23, r22
    3be4:	6a 2f       	mov	r22, r26
    3be6:	11 24       	eor	r1, r1
    3be8:	9f 57       	subi	r25, 0x7F	; 127
    3bea:	50 40       	sbci	r21, 0x00	; 0
    3bec:	9a f0       	brmi	.+38     	; 0x3c14 <__mulsf3_pse+0x88>
    3bee:	f1 f0       	breq	.+60     	; 0x3c2c <__mulsf3_pse+0xa0>
    3bf0:	88 23       	and	r24, r24
    3bf2:	4a f0       	brmi	.+18     	; 0x3c06 <__mulsf3_pse+0x7a>
    3bf4:	ee 0f       	add	r30, r30
    3bf6:	ff 1f       	adc	r31, r31
    3bf8:	bb 1f       	adc	r27, r27
    3bfa:	66 1f       	adc	r22, r22
    3bfc:	77 1f       	adc	r23, r23
    3bfe:	88 1f       	adc	r24, r24
    3c00:	91 50       	subi	r25, 0x01	; 1
    3c02:	50 40       	sbci	r21, 0x00	; 0
    3c04:	a9 f7       	brne	.-22     	; 0x3bf0 <__mulsf3_pse+0x64>
    3c06:	9e 3f       	cpi	r25, 0xFE	; 254
    3c08:	51 05       	cpc	r21, r1
    3c0a:	80 f0       	brcs	.+32     	; 0x3c2c <__mulsf3_pse+0xa0>
    3c0c:	0c 94 ae 38 	jmp	0x715c	; 0x715c <__fp_inf>
    3c10:	0c 94 3f 38 	jmp	0x707e	; 0x707e <__fp_szero>
    3c14:	5f 3f       	cpi	r21, 0xFF	; 255
    3c16:	e4 f3       	brlt	.-8      	; 0x3c10 <__mulsf3_pse+0x84>
    3c18:	98 3e       	cpi	r25, 0xE8	; 232
    3c1a:	d4 f3       	brlt	.-12     	; 0x3c10 <__mulsf3_pse+0x84>
    3c1c:	86 95       	lsr	r24
    3c1e:	77 95       	ror	r23
    3c20:	67 95       	ror	r22
    3c22:	b7 95       	ror	r27
    3c24:	f7 95       	ror	r31
    3c26:	e7 95       	ror	r30
    3c28:	9f 5f       	subi	r25, 0xFF	; 255
    3c2a:	c1 f7       	brne	.-16     	; 0x3c1c <__mulsf3_pse+0x90>
    3c2c:	fe 2b       	or	r31, r30
    3c2e:	88 0f       	add	r24, r24
    3c30:	91 1d       	adc	r25, r1
    3c32:	96 95       	lsr	r25
    3c34:	87 95       	ror	r24
    3c36:	97 f9       	bld	r25, 7
    3c38:	08 95       	ret

Disassembly of section .text.avrlibc:

000009fa <vfprintf>:
     9fa:	a4 e1       	ldi	r26, 0x14	; 20
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e3 e0       	ldi	r30, 0x03	; 3
     a00:	f5 e0       	ldi	r31, 0x05	; 5
     a02:	0c 94 c0 31 	jmp	0x6380	; 0x6380 <__prologue_saves__>
     a06:	6c 01       	movw	r12, r24
     a08:	1a 01       	movw	r2, r20
     a0a:	46 2e       	mov	r4, r22
     a0c:	59 01       	movw	r10, r18
     a0e:	fc 01       	movw	r30, r24
     a10:	10 86       	std	Z+8, r1	; 0x08
     a12:	17 82       	std	Z+7, r1	; 0x07
     a14:	84 81       	ldd	r24, Z+4	; 0x04
     a16:	81 ff       	sbrs	r24, 1
     a18:	62 c3       	rjmp	.+1732   	; 0x10de <__DATA_REGION_LENGTH__+0xde>
     a1a:	ce 01       	movw	r24, r28
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	9d 87       	std	Y+13, r25	; 0x0d
     a20:	8c 87       	std	Y+12, r24	; 0x0c
     a22:	a0 e8       	ldi	r26, 0x80	; 128
     a24:	8a 8b       	std	Y+18, r24	; 0x12
     a26:	9b 8b       	std	Y+19, r25	; 0x13
     a28:	ac 8b       	std	Y+20, r26	; 0x14
     a2a:	f1 01       	movw	r30, r2
     a2c:	84 91       	lpm	r24, Z
     a2e:	47 fc       	sbrc	r4, 7
     a30:	80 81       	ld	r24, Z
     a32:	88 23       	and	r24, r24
     a34:	09 f4       	brne	.+2      	; 0xa38 <vfprintf+0x3e>
     a36:	4f c3       	rjmp	.+1694   	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
     a38:	44 2d       	mov	r20, r4
     a3a:	91 01       	movw	r18, r2
     a3c:	2f 5f       	subi	r18, 0xFF	; 255
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	85 32       	cpi	r24, 0x25	; 37
     a44:	19 f0       	breq	.+6      	; 0xa4c <vfprintf+0x52>
     a46:	19 01       	movw	r2, r18
     a48:	44 2e       	mov	r4, r20
     a4a:	0a c0       	rjmp	.+20     	; 0xa60 <vfprintf+0x66>
     a4c:	f9 01       	movw	r30, r18
     a4e:	84 91       	lpm	r24, Z
     a50:	47 fd       	sbrc	r20, 7
     a52:	80 81       	ld	r24, Z
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	29 0e       	add	r2, r25
     a58:	31 1c       	adc	r3, r1
     a5a:	41 1c       	adc	r4, r1
     a5c:	85 32       	cpi	r24, 0x25	; 37
     a5e:	49 f4       	brne	.+18     	; 0xa72 <vfprintf+0x78>
     a60:	b6 01       	movw	r22, r12
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     a68:	bf 86       	std	Y+15, r11	; 0x0f
     a6a:	ae 86       	std	Y+14, r10	; 0x0e
     a6c:	ae 84       	ldd	r10, Y+14	; 0x0e
     a6e:	bf 84       	ldd	r11, Y+15	; 0x0f
     a70:	dc cf       	rjmp	.-72     	; 0xa2a <vfprintf+0x30>
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	f1 2c       	mov	r15, r1
     a76:	00 e0       	ldi	r16, 0x00	; 0
     a78:	00 32       	cpi	r16, 0x20	; 32
     a7a:	a0 f4       	brcc	.+40     	; 0xaa4 <vfprintf+0xaa>
     a7c:	8b 32       	cpi	r24, 0x2B	; 43
     a7e:	69 f0       	breq	.+26     	; 0xa9a <vfprintf+0xa0>
     a80:	30 f4       	brcc	.+12     	; 0xa8e <vfprintf+0x94>
     a82:	80 32       	cpi	r24, 0x20	; 32
     a84:	59 f0       	breq	.+22     	; 0xa9c <vfprintf+0xa2>
     a86:	83 32       	cpi	r24, 0x23	; 35
     a88:	69 f4       	brne	.+26     	; 0xaa4 <vfprintf+0xaa>
     a8a:	00 61       	ori	r16, 0x10	; 16
     a8c:	2c c0       	rjmp	.+88     	; 0xae6 <vfprintf+0xec>
     a8e:	8d 32       	cpi	r24, 0x2D	; 45
     a90:	39 f0       	breq	.+14     	; 0xaa0 <vfprintf+0xa6>
     a92:	80 33       	cpi	r24, 0x30	; 48
     a94:	39 f4       	brne	.+14     	; 0xaa4 <vfprintf+0xaa>
     a96:	01 60       	ori	r16, 0x01	; 1
     a98:	26 c0       	rjmp	.+76     	; 0xae6 <vfprintf+0xec>
     a9a:	02 60       	ori	r16, 0x02	; 2
     a9c:	04 60       	ori	r16, 0x04	; 4
     a9e:	23 c0       	rjmp	.+70     	; 0xae6 <vfprintf+0xec>
     aa0:	08 60       	ori	r16, 0x08	; 8
     aa2:	21 c0       	rjmp	.+66     	; 0xae6 <vfprintf+0xec>
     aa4:	07 fd       	sbrc	r16, 7
     aa6:	29 c0       	rjmp	.+82     	; 0xafa <vfprintf+0x100>
     aa8:	90 ed       	ldi	r25, 0xD0	; 208
     aaa:	98 0f       	add	r25, r24
     aac:	9a 30       	cpi	r25, 0x0A	; 10
     aae:	78 f4       	brcc	.+30     	; 0xace <vfprintf+0xd4>
     ab0:	06 ff       	sbrs	r16, 6
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <vfprintf+0xc6>
     ab4:	aa e0       	ldi	r26, 0x0A	; 10
     ab6:	1a 9f       	mul	r17, r26
     ab8:	90 0d       	add	r25, r0
     aba:	11 24       	eor	r1, r1
     abc:	19 2f       	mov	r17, r25
     abe:	13 c0       	rjmp	.+38     	; 0xae6 <vfprintf+0xec>
     ac0:	ea e0       	ldi	r30, 0x0A	; 10
     ac2:	fe 9e       	mul	r15, r30
     ac4:	90 0d       	add	r25, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	f9 2e       	mov	r15, r25
     aca:	00 62       	ori	r16, 0x20	; 32
     acc:	0c c0       	rjmp	.+24     	; 0xae6 <vfprintf+0xec>
     ace:	8e 32       	cpi	r24, 0x2E	; 46
     ad0:	21 f4       	brne	.+8      	; 0xada <vfprintf+0xe0>
     ad2:	06 fd       	sbrc	r16, 6
     ad4:	00 c3       	rjmp	.+1536   	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
     ad6:	00 64       	ori	r16, 0x40	; 64
     ad8:	06 c0       	rjmp	.+12     	; 0xae6 <vfprintf+0xec>
     ada:	8c 36       	cpi	r24, 0x6C	; 108
     adc:	11 f4       	brne	.+4      	; 0xae2 <vfprintf+0xe8>
     ade:	00 68       	ori	r16, 0x80	; 128
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <vfprintf+0xec>
     ae2:	88 36       	cpi	r24, 0x68	; 104
     ae4:	51 f4       	brne	.+20     	; 0xafa <vfprintf+0x100>
     ae6:	f1 01       	movw	r30, r2
     ae8:	84 91       	lpm	r24, Z
     aea:	47 fc       	sbrc	r4, 7
     aec:	80 81       	ld	r24, Z
     aee:	ff ef       	ldi	r31, 0xFF	; 255
     af0:	2f 1a       	sub	r2, r31
     af2:	3f 0a       	sbc	r3, r31
     af4:	4f 0a       	sbc	r4, r31
     af6:	81 11       	cpse	r24, r1
     af8:	bf cf       	rjmp	.-130    	; 0xa78 <vfprintf+0x7e>
     afa:	9b eb       	ldi	r25, 0xBB	; 187
     afc:	98 0f       	add	r25, r24
     afe:	93 30       	cpi	r25, 0x03	; 3
     b00:	18 f4       	brcc	.+6      	; 0xb08 <vfprintf+0x10e>
     b02:	00 61       	ori	r16, 0x10	; 16
     b04:	80 5e       	subi	r24, 0xE0	; 224
     b06:	06 c0       	rjmp	.+12     	; 0xb14 <vfprintf+0x11a>
     b08:	9b e9       	ldi	r25, 0x9B	; 155
     b0a:	98 0f       	add	r25, r24
     b0c:	93 30       	cpi	r25, 0x03	; 3
     b0e:	08 f0       	brcs	.+2      	; 0xb12 <vfprintf+0x118>
     b10:	66 c1       	rjmp	.+716    	; 0xdde <vfprintf+0x3e4>
     b12:	0f 7e       	andi	r16, 0xEF	; 239
     b14:	06 ff       	sbrs	r16, 6
     b16:	16 e0       	ldi	r17, 0x06	; 6
     b18:	0f 73       	andi	r16, 0x3F	; 63
     b1a:	70 2e       	mov	r7, r16
     b1c:	85 36       	cpi	r24, 0x65	; 101
     b1e:	21 f4       	brne	.+8      	; 0xb28 <vfprintf+0x12e>
     b20:	20 2f       	mov	r18, r16
     b22:	20 64       	ori	r18, 0x40	; 64
     b24:	72 2e       	mov	r7, r18
     b26:	08 c0       	rjmp	.+16     	; 0xb38 <vfprintf+0x13e>
     b28:	86 36       	cpi	r24, 0x66	; 102
     b2a:	21 f4       	brne	.+8      	; 0xb34 <vfprintf+0x13a>
     b2c:	80 2f       	mov	r24, r16
     b2e:	80 68       	ori	r24, 0x80	; 128
     b30:	78 2e       	mov	r7, r24
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <vfprintf+0x13e>
     b34:	11 11       	cpse	r17, r1
     b36:	11 50       	subi	r17, 0x01	; 1
     b38:	77 fe       	sbrs	r7, 7
     b3a:	07 c0       	rjmp	.+14     	; 0xb4a <vfprintf+0x150>
     b3c:	1c 33       	cpi	r17, 0x3C	; 60
     b3e:	50 f4       	brcc	.+20     	; 0xb54 <vfprintf+0x15a>
     b40:	ee 24       	eor	r14, r14
     b42:	e3 94       	inc	r14
     b44:	e1 0e       	add	r14, r17
     b46:	27 e0       	ldi	r18, 0x07	; 7
     b48:	0b c0       	rjmp	.+22     	; 0xb60 <vfprintf+0x166>
     b4a:	18 30       	cpi	r17, 0x08	; 8
     b4c:	38 f0       	brcs	.+14     	; 0xb5c <vfprintf+0x162>
     b4e:	27 e0       	ldi	r18, 0x07	; 7
     b50:	17 e0       	ldi	r17, 0x07	; 7
     b52:	05 c0       	rjmp	.+10     	; 0xb5e <vfprintf+0x164>
     b54:	27 e0       	ldi	r18, 0x07	; 7
     b56:	6c e3       	ldi	r22, 0x3C	; 60
     b58:	e6 2e       	mov	r14, r22
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <vfprintf+0x166>
     b5c:	21 2f       	mov	r18, r17
     b5e:	e1 2c       	mov	r14, r1
     b60:	f5 01       	movw	r30, r10
     b62:	34 96       	adiw	r30, 0x04	; 4
     b64:	ff 87       	std	Y+15, r31	; 0x0f
     b66:	ee 87       	std	Y+14, r30	; 0x0e
     b68:	f5 01       	movw	r30, r10
     b6a:	60 81       	ld	r22, Z
     b6c:	71 81       	ldd	r23, Z+1	; 0x01
     b6e:	82 81       	ldd	r24, Z+2	; 0x02
     b70:	93 81       	ldd	r25, Z+3	; 0x03
     b72:	0e 2d       	mov	r16, r14
     b74:	ae 01       	movw	r20, r28
     b76:	4f 5f       	subi	r20, 0xFF	; 255
     b78:	5f 4f       	sbci	r21, 0xFF	; 255
     b7a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__ftoa_engine>
     b7e:	5c 01       	movw	r10, r24
     b80:	59 80       	ldd	r5, Y+1	; 0x01
     b82:	50 fe       	sbrs	r5, 0
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <vfprintf+0x190>
     b86:	53 fe       	sbrs	r5, 3
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <vfprintf+0x19c>
     b8a:	71 fc       	sbrc	r7, 1
     b8c:	06 c0       	rjmp	.+12     	; 0xb9a <vfprintf+0x1a0>
     b8e:	72 fe       	sbrs	r7, 2
     b90:	06 c0       	rjmp	.+12     	; 0xb9e <vfprintf+0x1a4>
     b92:	00 e2       	ldi	r16, 0x20	; 32
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <vfprintf+0x1a6>
     b96:	0d e2       	ldi	r16, 0x2D	; 45
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <vfprintf+0x1a6>
     b9a:	0b e2       	ldi	r16, 0x2B	; 43
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <vfprintf+0x1a6>
     b9e:	00 e0       	ldi	r16, 0x00	; 0
     ba0:	85 2d       	mov	r24, r5
     ba2:	8c 70       	andi	r24, 0x0C	; 12
     ba4:	19 f0       	breq	.+6      	; 0xbac <vfprintf+0x1b2>
     ba6:	01 11       	cpse	r16, r1
     ba8:	73 c2       	rjmp	.+1254   	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
     baa:	be c2       	rjmp	.+1404   	; 0x1128 <__stack+0x29>
     bac:	77 fe       	sbrs	r7, 7
     bae:	0f c0       	rjmp	.+30     	; 0xbce <vfprintf+0x1d4>
     bb0:	ea 0c       	add	r14, r10
     bb2:	54 fe       	sbrs	r5, 4
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <vfprintf+0x1c4>
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	81 33       	cpi	r24, 0x31	; 49
     bba:	09 f4       	brne	.+2      	; 0xbbe <vfprintf+0x1c4>
     bbc:	ea 94       	dec	r14
     bbe:	1e 14       	cp	r1, r14
     bc0:	74 f5       	brge	.+92     	; 0xc1e <vfprintf+0x224>
     bc2:	28 e0       	ldi	r18, 0x08	; 8
     bc4:	2e 15       	cp	r18, r14
     bc6:	78 f5       	brcc	.+94     	; 0xc26 <vfprintf+0x22c>
     bc8:	38 e0       	ldi	r19, 0x08	; 8
     bca:	e3 2e       	mov	r14, r19
     bcc:	2c c0       	rjmp	.+88     	; 0xc26 <vfprintf+0x22c>
     bce:	76 fc       	sbrc	r7, 6
     bd0:	2a c0       	rjmp	.+84     	; 0xc26 <vfprintf+0x22c>
     bd2:	81 2f       	mov	r24, r17
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	8a 15       	cp	r24, r10
     bd8:	9b 05       	cpc	r25, r11
     bda:	9c f0       	brlt	.+38     	; 0xc02 <vfprintf+0x208>
     bdc:	8c ef       	ldi	r24, 0xFC	; 252
     bde:	a8 16       	cp	r10, r24
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	b8 06       	cpc	r11, r24
     be4:	74 f0       	brlt	.+28     	; 0xc02 <vfprintf+0x208>
     be6:	97 2d       	mov	r25, r7
     be8:	90 68       	ori	r25, 0x80	; 128
     bea:	79 2e       	mov	r7, r25
     bec:	0a c0       	rjmp	.+20     	; 0xc02 <vfprintf+0x208>
     bee:	e2 e0       	ldi	r30, 0x02	; 2
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	ec 0f       	add	r30, r28
     bf4:	fd 1f       	adc	r31, r29
     bf6:	e1 0f       	add	r30, r17
     bf8:	f1 1d       	adc	r31, r1
     bfa:	80 81       	ld	r24, Z
     bfc:	80 33       	cpi	r24, 0x30	; 48
     bfe:	19 f4       	brne	.+6      	; 0xc06 <vfprintf+0x20c>
     c00:	11 50       	subi	r17, 0x01	; 1
     c02:	11 11       	cpse	r17, r1
     c04:	f4 cf       	rjmp	.-24     	; 0xbee <vfprintf+0x1f4>
     c06:	77 fe       	sbrs	r7, 7
     c08:	0e c0       	rjmp	.+28     	; 0xc26 <vfprintf+0x22c>
     c0a:	ee 24       	eor	r14, r14
     c0c:	e3 94       	inc	r14
     c0e:	e1 0e       	add	r14, r17
     c10:	81 2f       	mov	r24, r17
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	a8 16       	cp	r10, r24
     c16:	b9 06       	cpc	r11, r25
     c18:	2c f4       	brge	.+10     	; 0xc24 <vfprintf+0x22a>
     c1a:	1a 19       	sub	r17, r10
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <vfprintf+0x22c>
     c1e:	ee 24       	eor	r14, r14
     c20:	e3 94       	inc	r14
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <vfprintf+0x22c>
     c24:	10 e0       	ldi	r17, 0x00	; 0
     c26:	77 fe       	sbrs	r7, 7
     c28:	06 c0       	rjmp	.+12     	; 0xc36 <vfprintf+0x23c>
     c2a:	1a 14       	cp	r1, r10
     c2c:	1b 04       	cpc	r1, r11
     c2e:	34 f4       	brge	.+12     	; 0xc3c <vfprintf+0x242>
     c30:	c5 01       	movw	r24, r10
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <vfprintf+0x246>
     c36:	85 e0       	ldi	r24, 0x05	; 5
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <vfprintf+0x246>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	01 11       	cpse	r16, r1
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	11 23       	and	r17, r17
     c46:	31 f0       	breq	.+12     	; 0xc54 <vfprintf+0x25a>
     c48:	21 2f       	mov	r18, r17
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	2f 5f       	subi	r18, 0xFF	; 255
     c4e:	3f 4f       	sbci	r19, 0xFF	; 255
     c50:	82 0f       	add	r24, r18
     c52:	93 1f       	adc	r25, r19
     c54:	2f 2d       	mov	r18, r15
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	82 17       	cp	r24, r18
     c5a:	93 07       	cpc	r25, r19
     c5c:	14 f4       	brge	.+4      	; 0xc62 <vfprintf+0x268>
     c5e:	f8 1a       	sub	r15, r24
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <vfprintf+0x26a>
     c62:	f1 2c       	mov	r15, r1
     c64:	87 2d       	mov	r24, r7
     c66:	89 70       	andi	r24, 0x09	; 9
     c68:	49 f4       	brne	.+18     	; 0xc7c <vfprintf+0x282>
     c6a:	ff 20       	and	r15, r15
     c6c:	39 f0       	breq	.+14     	; 0xc7c <vfprintf+0x282>
     c6e:	b6 01       	movw	r22, r12
     c70:	80 e2       	ldi	r24, 0x20	; 32
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     c78:	fa 94       	dec	r15
     c7a:	f7 cf       	rjmp	.-18     	; 0xc6a <vfprintf+0x270>
     c7c:	00 23       	and	r16, r16
     c7e:	29 f0       	breq	.+10     	; 0xc8a <vfprintf+0x290>
     c80:	b6 01       	movw	r22, r12
     c82:	80 2f       	mov	r24, r16
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     c8a:	73 fc       	sbrc	r7, 3
     c8c:	09 c0       	rjmp	.+18     	; 0xca0 <vfprintf+0x2a6>
     c8e:	ff 20       	and	r15, r15
     c90:	39 f0       	breq	.+14     	; 0xca0 <vfprintf+0x2a6>
     c92:	b6 01       	movw	r22, r12
     c94:	80 e3       	ldi	r24, 0x30	; 48
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     c9c:	fa 94       	dec	r15
     c9e:	f7 cf       	rjmp	.-18     	; 0xc8e <vfprintf+0x294>
     ca0:	77 fe       	sbrs	r7, 7
     ca2:	49 c0       	rjmp	.+146    	; 0xd36 <vfprintf+0x33c>
     ca4:	35 01       	movw	r6, r10
     ca6:	b7 fe       	sbrs	r11, 7
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x2b4>
     caa:	61 2c       	mov	r6, r1
     cac:	71 2c       	mov	r7, r1
     cae:	c5 01       	movw	r24, r10
     cb0:	86 19       	sub	r24, r6
     cb2:	97 09       	sbc	r25, r7
     cb4:	88 24       	eor	r8, r8
     cb6:	83 94       	inc	r8
     cb8:	91 2c       	mov	r9, r1
     cba:	8c 0e       	add	r8, r28
     cbc:	9d 1e       	adc	r9, r29
     cbe:	88 0e       	add	r8, r24
     cc0:	99 1e       	adc	r9, r25
     cc2:	f5 01       	movw	r30, r10
     cc4:	ee 19       	sub	r30, r14
     cc6:	f1 09       	sbc	r31, r1
     cc8:	f9 8b       	std	Y+17, r31	; 0x11
     cca:	e8 8b       	std	Y+16, r30	; 0x10
     ccc:	01 2f       	mov	r16, r17
     cce:	10 e0       	ldi	r17, 0x00	; 0
     cd0:	11 95       	neg	r17
     cd2:	01 95       	neg	r16
     cd4:	11 09       	sbc	r17, r1
     cd6:	ff ef       	ldi	r31, 0xFF	; 255
     cd8:	6f 16       	cp	r6, r31
     cda:	7f 06       	cpc	r7, r31
     cdc:	29 f4       	brne	.+10     	; 0xce8 <vfprintf+0x2ee>
     cde:	b6 01       	movw	r22, r12
     ce0:	8e e2       	ldi	r24, 0x2E	; 46
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     ce8:	a6 14       	cp	r10, r6
     cea:	b7 04       	cpc	r11, r7
     cec:	44 f0       	brlt	.+16     	; 0xcfe <vfprintf+0x304>
     cee:	88 89       	ldd	r24, Y+16	; 0x10
     cf0:	99 89       	ldd	r25, Y+17	; 0x11
     cf2:	86 15       	cp	r24, r6
     cf4:	97 05       	cpc	r25, r7
     cf6:	1c f4       	brge	.+6      	; 0xcfe <vfprintf+0x304>
     cf8:	f4 01       	movw	r30, r8
     cfa:	81 81       	ldd	r24, Z+1	; 0x01
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <vfprintf+0x306>
     cfe:	80 e3       	ldi	r24, 0x30	; 48
     d00:	f1 e0       	ldi	r31, 0x01	; 1
     d02:	6f 1a       	sub	r6, r31
     d04:	71 08       	sbc	r7, r1
     d06:	2f ef       	ldi	r18, 0xFF	; 255
     d08:	82 1a       	sub	r8, r18
     d0a:	92 0a       	sbc	r9, r18
     d0c:	60 16       	cp	r6, r16
     d0e:	71 06       	cpc	r7, r17
     d10:	2c f0       	brlt	.+10     	; 0xd1c <vfprintf+0x322>
     d12:	b6 01       	movw	r22, r12
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     d1a:	dd cf       	rjmp	.-70     	; 0xcd6 <vfprintf+0x2dc>
     d1c:	a6 14       	cp	r10, r6
     d1e:	b7 04       	cpc	r11, r7
     d20:	39 f4       	brne	.+14     	; 0xd30 <vfprintf+0x336>
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	96 33       	cpi	r25, 0x36	; 54
     d26:	18 f4       	brcc	.+6      	; 0xd2e <vfprintf+0x334>
     d28:	95 33       	cpi	r25, 0x35	; 53
     d2a:	11 f4       	brne	.+4      	; 0xd30 <vfprintf+0x336>
     d2c:	54 fe       	sbrs	r5, 4
     d2e:	81 e3       	ldi	r24, 0x31	; 49
     d30:	b6 01       	movw	r22, r12
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	51 c0       	rjmp	.+162    	; 0xdd8 <vfprintf+0x3de>
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	81 33       	cpi	r24, 0x31	; 49
     d3a:	19 f0       	breq	.+6      	; 0xd42 <vfprintf+0x348>
     d3c:	95 2d       	mov	r25, r5
     d3e:	9f 7e       	andi	r25, 0xEF	; 239
     d40:	59 2e       	mov	r5, r25
     d42:	b6 01       	movw	r22, r12
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     d4a:	11 11       	cpse	r17, r1
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <vfprintf+0x35e>
     d4e:	74 fc       	sbrc	r7, 4
     d50:	1c c0       	rjmp	.+56     	; 0xd8a <vfprintf+0x390>
     d52:	85 e6       	ldi	r24, 0x65	; 101
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	1b c0       	rjmp	.+54     	; 0xd8e <vfprintf+0x394>
     d58:	b6 01       	movw	r22, r12
     d5a:	8e e2       	ldi	r24, 0x2E	; 46
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     d62:	02 e0       	ldi	r16, 0x02	; 2
     d64:	01 0f       	add	r16, r17
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	11 e0       	ldi	r17, 0x01	; 1
     d6a:	18 0f       	add	r17, r24
     d6c:	e1 e0       	ldi	r30, 0x01	; 1
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	ec 0f       	add	r30, r28
     d72:	fd 1f       	adc	r31, r29
     d74:	e8 0f       	add	r30, r24
     d76:	f1 1d       	adc	r31, r1
     d78:	80 81       	ld	r24, Z
     d7a:	b6 01       	movw	r22, r12
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     d82:	81 2f       	mov	r24, r17
     d84:	10 13       	cpse	r17, r16
     d86:	f0 cf       	rjmp	.-32     	; 0xd68 <vfprintf+0x36e>
     d88:	e2 cf       	rjmp	.-60     	; 0xd4e <vfprintf+0x354>
     d8a:	85 e4       	ldi	r24, 0x45	; 69
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	b6 01       	movw	r22, r12
     d90:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     d94:	b7 fc       	sbrc	r11, 7
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <vfprintf+0x3a8>
     d98:	a1 14       	cp	r10, r1
     d9a:	b1 04       	cpc	r11, r1
     d9c:	39 f4       	brne	.+14     	; 0xdac <vfprintf+0x3b2>
     d9e:	54 fe       	sbrs	r5, 4
     da0:	05 c0       	rjmp	.+10     	; 0xdac <vfprintf+0x3b2>
     da2:	b1 94       	neg	r11
     da4:	a1 94       	neg	r10
     da6:	b1 08       	sbc	r11, r1
     da8:	8d e2       	ldi	r24, 0x2D	; 45
     daa:	01 c0       	rjmp	.+2      	; 0xdae <vfprintf+0x3b4>
     dac:	8b e2       	ldi	r24, 0x2B	; 43
     dae:	b6 01       	movw	r22, r12
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     db6:	80 e3       	ldi	r24, 0x30	; 48
     db8:	ea e0       	ldi	r30, 0x0A	; 10
     dba:	ae 16       	cp	r10, r30
     dbc:	b1 04       	cpc	r11, r1
     dbe:	2c f0       	brlt	.+10     	; 0xdca <vfprintf+0x3d0>
     dc0:	8f 5f       	subi	r24, 0xFF	; 255
     dc2:	aa e0       	ldi	r26, 0x0A	; 10
     dc4:	aa 1a       	sub	r10, r26
     dc6:	b1 08       	sbc	r11, r1
     dc8:	f7 cf       	rjmp	.-18     	; 0xdb8 <vfprintf+0x3be>
     dca:	b6 01       	movw	r22, r12
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     dd2:	b6 01       	movw	r22, r12
     dd4:	c5 01       	movw	r24, r10
     dd6:	c0 96       	adiw	r24, 0x30	; 48
     dd8:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     ddc:	72 c1       	rjmp	.+740    	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
     dde:	83 36       	cpi	r24, 0x63	; 99
     de0:	31 f0       	breq	.+12     	; 0xdee <vfprintf+0x3f4>
     de2:	83 37       	cpi	r24, 0x73	; 115
     de4:	91 f0       	breq	.+36     	; 0xe0a <vfprintf+0x410>
     de6:	83 35       	cpi	r24, 0x53	; 83
     de8:	09 f0       	breq	.+2      	; 0xdec <vfprintf+0x3f2>
     dea:	5d c0       	rjmp	.+186    	; 0xea6 <vfprintf+0x4ac>
     dec:	24 c0       	rjmp	.+72     	; 0xe36 <vfprintf+0x43c>
     dee:	c5 01       	movw	r24, r10
     df0:	02 96       	adiw	r24, 0x02	; 2
     df2:	9f 87       	std	Y+15, r25	; 0x0f
     df4:	8e 87       	std	Y+14, r24	; 0x0e
     df6:	f5 01       	movw	r30, r10
     df8:	80 81       	ld	r24, Z
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	6a 88       	ldd	r6, Y+18	; 0x12
     dfe:	7b 88       	ldd	r7, Y+19	; 0x13
     e00:	8c 88       	ldd	r8, Y+20	; 0x14
     e02:	aa 24       	eor	r10, r10
     e04:	a3 94       	inc	r10
     e06:	b1 2c       	mov	r11, r1
     e08:	14 c0       	rjmp	.+40     	; 0xe32 <vfprintf+0x438>
     e0a:	c5 01       	movw	r24, r10
     e0c:	03 96       	adiw	r24, 0x03	; 3
     e0e:	9f 87       	std	Y+15, r25	; 0x0f
     e10:	8e 87       	std	Y+14, r24	; 0x0e
     e12:	f5 01       	movw	r30, r10
     e14:	60 80       	ld	r6, Z
     e16:	71 80       	ldd	r7, Z+1	; 0x01
     e18:	82 80       	ldd	r8, Z+2	; 0x02
     e1a:	06 ff       	sbrs	r16, 6
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <vfprintf+0x42a>
     e1e:	41 2f       	mov	r20, r17
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <vfprintf+0x42e>
     e24:	4f ef       	ldi	r20, 0xFF	; 255
     e26:	5f ef       	ldi	r21, 0xFF	; 255
     e28:	88 2d       	mov	r24, r8
     e2a:	b3 01       	movw	r22, r6
     e2c:	0e 94 48 32 	call	0x6490	; 0x6490 <strnlen>
     e30:	5c 01       	movw	r10, r24
     e32:	0f 77       	andi	r16, 0x7F	; 127
     e34:	15 c0       	rjmp	.+42     	; 0xe60 <vfprintf+0x466>
     e36:	c5 01       	movw	r24, r10
     e38:	03 96       	adiw	r24, 0x03	; 3
     e3a:	9f 87       	std	Y+15, r25	; 0x0f
     e3c:	8e 87       	std	Y+14, r24	; 0x0e
     e3e:	f5 01       	movw	r30, r10
     e40:	60 80       	ld	r6, Z
     e42:	71 80       	ldd	r7, Z+1	; 0x01
     e44:	82 80       	ldd	r8, Z+2	; 0x02
     e46:	06 ff       	sbrs	r16, 6
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <vfprintf+0x456>
     e4a:	41 2f       	mov	r20, r17
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <vfprintf+0x45a>
     e50:	4f ef       	ldi	r20, 0xFF	; 255
     e52:	5f ef       	ldi	r21, 0xFF	; 255
     e54:	88 2d       	mov	r24, r8
     e56:	b3 01       	movw	r22, r6
     e58:	0e 94 48 32 	call	0x6490	; 0x6490 <strnlen>
     e5c:	5c 01       	movw	r10, r24
     e5e:	00 68       	ori	r16, 0x80	; 128
     e60:	03 fd       	sbrc	r16, 3
     e62:	1d c0       	rjmp	.+58     	; 0xe9e <vfprintf+0x4a4>
     e64:	8f 2d       	mov	r24, r15
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a8 16       	cp	r10, r24
     e6a:	b9 06       	cpc	r11, r25
     e6c:	c0 f4       	brcc	.+48     	; 0xe9e <vfprintf+0x4a4>
     e6e:	b6 01       	movw	r22, r12
     e70:	80 e2       	ldi	r24, 0x20	; 32
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     e78:	fa 94       	dec	r15
     e7a:	f4 cf       	rjmp	.-24     	; 0xe64 <vfprintf+0x46a>
     e7c:	f3 01       	movw	r30, r6
     e7e:	84 91       	lpm	r24, Z
     e80:	87 fc       	sbrc	r8, 7
     e82:	80 81       	ld	r24, Z
     e84:	ff ef       	ldi	r31, 0xFF	; 255
     e86:	6f 1a       	sub	r6, r31
     e88:	7f 0a       	sbc	r7, r31
     e8a:	8f 0a       	sbc	r8, r31
     e8c:	b6 01       	movw	r22, r12
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
     e94:	f1 10       	cpse	r15, r1
     e96:	fa 94       	dec	r15
     e98:	21 e0       	ldi	r18, 0x01	; 1
     e9a:	a2 1a       	sub	r10, r18
     e9c:	b1 08       	sbc	r11, r1
     e9e:	a1 14       	cp	r10, r1
     ea0:	b1 04       	cpc	r11, r1
     ea2:	61 f7       	brne	.-40     	; 0xe7c <vfprintf+0x482>
     ea4:	0e c1       	rjmp	.+540    	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
     ea6:	84 36       	cpi	r24, 0x64	; 100
     ea8:	11 f0       	breq	.+4      	; 0xeae <vfprintf+0x4b4>
     eaa:	89 36       	cpi	r24, 0x69	; 105
     eac:	79 f5       	brne	.+94     	; 0xf0c <vfprintf+0x512>
     eae:	c5 01       	movw	r24, r10
     eb0:	07 ff       	sbrs	r16, 7
     eb2:	09 c0       	rjmp	.+18     	; 0xec6 <vfprintf+0x4cc>
     eb4:	04 96       	adiw	r24, 0x04	; 4
     eb6:	9f 87       	std	Y+15, r25	; 0x0f
     eb8:	8e 87       	std	Y+14, r24	; 0x0e
     eba:	f5 01       	movw	r30, r10
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <vfprintf+0x4e0>
     ec6:	02 96       	adiw	r24, 0x02	; 2
     ec8:	9f 87       	std	Y+15, r25	; 0x0f
     eca:	8e 87       	std	Y+14, r24	; 0x0e
     ecc:	f5 01       	movw	r30, r10
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	07 2e       	mov	r0, r23
     ed4:	00 0c       	add	r0, r0
     ed6:	88 0b       	sbc	r24, r24
     ed8:	99 0b       	sbc	r25, r25
     eda:	0f 76       	andi	r16, 0x6F	; 111
     edc:	e0 2e       	mov	r14, r16
     ede:	97 ff       	sbrs	r25, 7
     ee0:	0a c0       	rjmp	.+20     	; 0xef6 <vfprintf+0x4fc>
     ee2:	90 95       	com	r25
     ee4:	80 95       	com	r24
     ee6:	70 95       	com	r23
     ee8:	61 95       	neg	r22
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	8f 4f       	sbci	r24, 0xFF	; 255
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	f0 2f       	mov	r31, r16
     ef2:	f0 68       	ori	r31, 0x80	; 128
     ef4:	ef 2e       	mov	r14, r31
     ef6:	2a e0       	ldi	r18, 0x0A	; 10
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	ae 01       	movw	r20, r28
     efc:	4f 5f       	subi	r20, 0xFF	; 255
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <__ultoa_invert>
     f04:	a8 2e       	mov	r10, r24
     f06:	2c 85       	ldd	r18, Y+12	; 0x0c
     f08:	a2 1a       	sub	r10, r18
     f0a:	4b c0       	rjmp	.+150    	; 0xfa2 <vfprintf+0x5a8>
     f0c:	85 37       	cpi	r24, 0x75	; 117
     f0e:	29 f4       	brne	.+10     	; 0xf1a <vfprintf+0x520>
     f10:	0f 7e       	andi	r16, 0xEF	; 239
     f12:	e0 2e       	mov	r14, r16
     f14:	2a e0       	ldi	r18, 0x0A	; 10
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	25 c0       	rjmp	.+74     	; 0xf64 <vfprintf+0x56a>
     f1a:	90 2f       	mov	r25, r16
     f1c:	99 7f       	andi	r25, 0xF9	; 249
     f1e:	e9 2e       	mov	r14, r25
     f20:	8f 36       	cpi	r24, 0x6F	; 111
     f22:	c1 f0       	breq	.+48     	; 0xf54 <vfprintf+0x55a>
     f24:	18 f4       	brcc	.+6      	; 0xf2c <vfprintf+0x532>
     f26:	88 35       	cpi	r24, 0x58	; 88
     f28:	79 f0       	breq	.+30     	; 0xf48 <vfprintf+0x54e>
     f2a:	d5 c0       	rjmp	.+426    	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
     f2c:	80 37       	cpi	r24, 0x70	; 112
     f2e:	19 f0       	breq	.+6      	; 0xf36 <vfprintf+0x53c>
     f30:	88 37       	cpi	r24, 0x78	; 120
     f32:	21 f0       	breq	.+8      	; 0xf3c <vfprintf+0x542>
     f34:	d0 c0       	rjmp	.+416    	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
     f36:	a9 2f       	mov	r26, r25
     f38:	a0 61       	ori	r26, 0x10	; 16
     f3a:	ea 2e       	mov	r14, r26
     f3c:	e4 fe       	sbrs	r14, 4
     f3e:	0d c0       	rjmp	.+26     	; 0xf5a <vfprintf+0x560>
     f40:	ee 2d       	mov	r30, r14
     f42:	e4 60       	ori	r30, 0x04	; 4
     f44:	ee 2e       	mov	r14, r30
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <vfprintf+0x560>
     f48:	04 ff       	sbrs	r16, 4
     f4a:	0a c0       	rjmp	.+20     	; 0xf60 <vfprintf+0x566>
     f4c:	f9 2f       	mov	r31, r25
     f4e:	f6 60       	ori	r31, 0x06	; 6
     f50:	ef 2e       	mov	r14, r31
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <vfprintf+0x566>
     f54:	28 e0       	ldi	r18, 0x08	; 8
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	05 c0       	rjmp	.+10     	; 0xf64 <vfprintf+0x56a>
     f5a:	20 e1       	ldi	r18, 0x10	; 16
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <vfprintf+0x56a>
     f60:	20 e1       	ldi	r18, 0x10	; 16
     f62:	32 e0       	ldi	r19, 0x02	; 2
     f64:	c5 01       	movw	r24, r10
     f66:	e7 fe       	sbrs	r14, 7
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <vfprintf+0x582>
     f6a:	04 96       	adiw	r24, 0x04	; 4
     f6c:	9f 87       	std	Y+15, r25	; 0x0f
     f6e:	8e 87       	std	Y+14, r24	; 0x0e
     f70:	f5 01       	movw	r30, r10
     f72:	60 81       	ld	r22, Z
     f74:	71 81       	ldd	r23, Z+1	; 0x01
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	08 c0       	rjmp	.+16     	; 0xf8c <vfprintf+0x592>
     f7c:	02 96       	adiw	r24, 0x02	; 2
     f7e:	9f 87       	std	Y+15, r25	; 0x0f
     f80:	8e 87       	std	Y+14, r24	; 0x0e
     f82:	f5 01       	movw	r30, r10
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	ae 01       	movw	r20, r28
     f8e:	4f 5f       	subi	r20, 0xFF	; 255
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <__ultoa_invert>
     f96:	a8 2e       	mov	r10, r24
     f98:	fc 85       	ldd	r31, Y+12	; 0x0c
     f9a:	af 1a       	sub	r10, r31
     f9c:	2e 2d       	mov	r18, r14
     f9e:	2f 77       	andi	r18, 0x7F	; 127
     fa0:	e2 2e       	mov	r14, r18
     fa2:	e6 fe       	sbrs	r14, 6
     fa4:	0b c0       	rjmp	.+22     	; 0xfbc <vfprintf+0x5c2>
     fa6:	0e 2d       	mov	r16, r14
     fa8:	0e 7f       	andi	r16, 0xFE	; 254
     faa:	a1 16       	cp	r10, r17
     fac:	50 f4       	brcc	.+20     	; 0xfc2 <vfprintf+0x5c8>
     fae:	e4 fe       	sbrs	r14, 4
     fb0:	0a c0       	rjmp	.+20     	; 0xfc6 <vfprintf+0x5cc>
     fb2:	e2 fc       	sbrc	r14, 2
     fb4:	08 c0       	rjmp	.+16     	; 0xfc6 <vfprintf+0x5cc>
     fb6:	0e 2d       	mov	r16, r14
     fb8:	0e 7e       	andi	r16, 0xEE	; 238
     fba:	05 c0       	rjmp	.+10     	; 0xfc6 <vfprintf+0x5cc>
     fbc:	ba 2c       	mov	r11, r10
     fbe:	0e 2d       	mov	r16, r14
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <vfprintf+0x5ce>
     fc2:	ba 2c       	mov	r11, r10
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <vfprintf+0x5ce>
     fc6:	b1 2e       	mov	r11, r17
     fc8:	04 ff       	sbrs	r16, 4
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <vfprintf+0x5ec>
     fcc:	fe 01       	movw	r30, r28
     fce:	ea 0d       	add	r30, r10
     fd0:	f1 1d       	adc	r31, r1
     fd2:	80 81       	ld	r24, Z
     fd4:	80 33       	cpi	r24, 0x30	; 48
     fd6:	11 f4       	brne	.+4      	; 0xfdc <vfprintf+0x5e2>
     fd8:	09 7e       	andi	r16, 0xE9	; 233
     fda:	09 c0       	rjmp	.+18     	; 0xfee <vfprintf+0x5f4>
     fdc:	02 ff       	sbrs	r16, 2
     fde:	06 c0       	rjmp	.+12     	; 0xfec <vfprintf+0x5f2>
     fe0:	b3 94       	inc	r11
     fe2:	b3 94       	inc	r11
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <vfprintf+0x5f4>
     fe6:	80 2f       	mov	r24, r16
     fe8:	86 78       	andi	r24, 0x86	; 134
     fea:	09 f0       	breq	.+2      	; 0xfee <vfprintf+0x5f4>
     fec:	b3 94       	inc	r11
     fee:	03 fd       	sbrc	r16, 3
     ff0:	11 c0       	rjmp	.+34     	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
     ff2:	00 ff       	sbrs	r16, 0
     ff4:	06 c0       	rjmp	.+12     	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
     ff6:	bf 14       	cp	r11, r15
     ff8:	88 f4       	brcc	.+34     	; 0x101c <__DATA_REGION_LENGTH__+0x1c>
     ffa:	fa 0c       	add	r15, r10
     ffc:	1f 2d       	mov	r17, r15
     ffe:	1b 19       	sub	r17, r11
    1000:	0e c0       	rjmp	.+28     	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
    1002:	bf 14       	cp	r11, r15
    1004:	60 f4       	brcc	.+24     	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
    1006:	b6 01       	movw	r22, r12
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
    1010:	b3 94       	inc	r11
    1012:	f7 cf       	rjmp	.-18     	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
    1014:	bf 14       	cp	r11, r15
    1016:	18 f4       	brcc	.+6      	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
    1018:	fb 18       	sub	r15, r11
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    101c:	1a 2d       	mov	r17, r10
    101e:	f1 2c       	mov	r15, r1
    1020:	04 ff       	sbrs	r16, 4
    1022:	10 c0       	rjmp	.+32     	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
    1024:	b6 01       	movw	r22, r12
    1026:	80 e3       	ldi	r24, 0x30	; 48
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
    102e:	02 ff       	sbrs	r16, 2
    1030:	17 c0       	rjmp	.+46     	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    1032:	01 fd       	sbrc	r16, 1
    1034:	03 c0       	rjmp	.+6      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1036:	88 e7       	ldi	r24, 0x78	; 120
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    103c:	88 e5       	ldi	r24, 0x58	; 88
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	b6 01       	movw	r22, r12
    1042:	0c c0       	rjmp	.+24     	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
    1044:	80 2f       	mov	r24, r16
    1046:	86 78       	andi	r24, 0x86	; 134
    1048:	59 f0       	breq	.+22     	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    104a:	01 ff       	sbrs	r16, 1
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    104e:	8b e2       	ldi	r24, 0x2B	; 43
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	07 fd       	sbrc	r16, 7
    1056:	8d e2       	ldi	r24, 0x2D	; 45
    1058:	b6 01       	movw	r22, r12
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
    1060:	a1 16       	cp	r10, r17
    1062:	38 f4       	brcc	.+14     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    1064:	b6 01       	movw	r22, r12
    1066:	80 e3       	ldi	r24, 0x30	; 48
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
    106e:	11 50       	subi	r17, 0x01	; 1
    1070:	f7 cf       	rjmp	.-18     	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    1072:	aa 94       	dec	r10
    1074:	e1 e0       	ldi	r30, 0x01	; 1
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	ec 0f       	add	r30, r28
    107a:	fd 1f       	adc	r31, r29
    107c:	ea 0d       	add	r30, r10
    107e:	f1 1d       	adc	r31, r1
    1080:	80 81       	ld	r24, Z
    1082:	b6 01       	movw	r22, r12
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
    108a:	a1 10       	cpse	r10, r1
    108c:	f2 cf       	rjmp	.-28     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    108e:	19 c0       	rjmp	.+50     	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
    1090:	f4 e0       	ldi	r31, 0x04	; 4
    1092:	ff 15       	cp	r31, r15
    1094:	80 f5       	brcc	.+96     	; 0x10f6 <__DATA_REGION_LENGTH__+0xf6>
    1096:	84 e0       	ldi	r24, 0x04	; 4
    1098:	f8 1a       	sub	r15, r24
    109a:	73 fe       	sbrs	r7, 3
    109c:	23 c0       	rjmp	.+70     	; 0x10e4 <__DATA_REGION_LENGTH__+0xe4>
    109e:	01 11       	cpse	r16, r1
    10a0:	2b c0       	rjmp	.+86     	; 0x10f8 <__DATA_REGION_LENGTH__+0xf8>
    10a2:	53 fe       	sbrs	r5, 3
    10a4:	2f c0       	rjmp	.+94     	; 0x1104 <__stack+0x5>
    10a6:	56 ee       	ldi	r21, 0xE6	; 230
    10a8:	85 2e       	mov	r8, r21
    10aa:	59 e0       	ldi	r21, 0x09	; 9
    10ac:	95 2e       	mov	r9, r21
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	a5 2e       	mov	r10, r21
    10b2:	07 2d       	mov	r16, r7
    10b4:	00 71       	andi	r16, 0x10	; 16
    10b6:	f4 01       	movw	r30, r8
    10b8:	84 91       	lpm	r24, Z
    10ba:	a7 fc       	sbrc	r10, 7
    10bc:	80 81       	ld	r24, Z
    10be:	81 11       	cpse	r24, r1
    10c0:	28 c0       	rjmp	.+80     	; 0x1112 <__stack+0x13>
    10c2:	ff 20       	and	r15, r15
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <__DATA_REGION_LENGTH__+0xc8>
    10c6:	d2 cc       	rjmp	.-1628   	; 0xa6c <vfprintf+0x72>
    10c8:	b6 01       	movw	r22, r12
    10ca:	80 e2       	ldi	r24, 0x20	; 32
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
    10d2:	fa 94       	dec	r15
    10d4:	f6 cf       	rjmp	.-20     	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
    10d6:	f6 01       	movw	r30, r12
    10d8:	87 81       	ldd	r24, Z+7	; 0x07
    10da:	90 85       	ldd	r25, Z+8	; 0x08
    10dc:	2c c0       	rjmp	.+88     	; 0x1136 <__stack+0x37>
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	9f ef       	ldi	r25, 0xFF	; 255
    10e2:	29 c0       	rjmp	.+82     	; 0x1136 <__stack+0x37>
    10e4:	b6 01       	movw	r22, r12
    10e6:	80 e2       	ldi	r24, 0x20	; 32
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
    10ee:	fa 94       	dec	r15
    10f0:	f1 10       	cpse	r15, r1
    10f2:	f8 cf       	rjmp	.-16     	; 0x10e4 <__DATA_REGION_LENGTH__+0xe4>
    10f4:	d4 cf       	rjmp	.-88     	; 0x109e <__DATA_REGION_LENGTH__+0x9e>
    10f6:	f1 2c       	mov	r15, r1
    10f8:	b6 01       	movw	r22, r12
    10fa:	80 2f       	mov	r24, r16
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
    1102:	cf cf       	rjmp	.-98     	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
    1104:	42 ee       	ldi	r20, 0xE2	; 226
    1106:	84 2e       	mov	r8, r20
    1108:	49 e0       	ldi	r20, 0x09	; 9
    110a:	94 2e       	mov	r9, r20
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	a4 2e       	mov	r10, r20
    1110:	d0 cf       	rjmp	.-96     	; 0x10b2 <__DATA_REGION_LENGTH__+0xb2>
    1112:	01 11       	cpse	r16, r1
    1114:	80 52       	subi	r24, 0x20	; 32
    1116:	b6 01       	movw	r22, r12
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <fputc>
    111e:	ff ef       	ldi	r31, 0xFF	; 255
    1120:	8f 1a       	sub	r8, r31
    1122:	9f 0a       	sbc	r9, r31
    1124:	af 0a       	sbc	r10, r31
    1126:	c7 cf       	rjmp	.-114    	; 0x10b6 <__DATA_REGION_LENGTH__+0xb6>
    1128:	23 e0       	ldi	r18, 0x03	; 3
    112a:	2f 15       	cp	r18, r15
    112c:	10 f4       	brcc	.+4      	; 0x1132 <__stack+0x33>
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	b3 cf       	rjmp	.-154    	; 0x1098 <__DATA_REGION_LENGTH__+0x98>
    1132:	f1 2c       	mov	r15, r1
    1134:	b6 cf       	rjmp	.-148    	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
    1136:	64 96       	adiw	r28, 0x14	; 20
    1138:	e2 e1       	ldi	r30, 0x12	; 18
    113a:	0c 94 2d 32 	jmp	0x645a	; 0x645a <__epilogue_restores__>

Disassembly of section .text.libgcc.div:

00006962 <__udivmodhi4>:
    6962:	aa 1b       	sub	r26, r26
    6964:	bb 1b       	sub	r27, r27
    6966:	51 e1       	ldi	r21, 0x11	; 17
    6968:	07 c0       	rjmp	.+14     	; 0x6978 <__udivmodhi4_ep>

0000696a <__udivmodhi4_loop>:
    696a:	aa 1f       	adc	r26, r26
    696c:	bb 1f       	adc	r27, r27
    696e:	a6 17       	cp	r26, r22
    6970:	b7 07       	cpc	r27, r23
    6972:	10 f0       	brcs	.+4      	; 0x6978 <__udivmodhi4_ep>
    6974:	a6 1b       	sub	r26, r22
    6976:	b7 0b       	sbc	r27, r23

00006978 <__udivmodhi4_ep>:
    6978:	88 1f       	adc	r24, r24
    697a:	99 1f       	adc	r25, r25
    697c:	5a 95       	dec	r21
    697e:	a9 f7       	brne	.-22     	; 0x696a <__udivmodhi4_loop>
    6980:	80 95       	com	r24
    6982:	90 95       	com	r25
    6984:	bc 01       	movw	r22, r24
    6986:	cd 01       	movw	r24, r26
    6988:	08 95       	ret

Disassembly of section .text.libgcc:

00007168 <__tablejump2__>:
    7168:	ee 0f       	add	r30, r30
    716a:	ff 1f       	adc	r31, r31
    716c:	05 90       	lpm	r0, Z+
    716e:	f4 91       	lpm	r31, Z
    7170:	e0 2d       	mov	r30, r0
    7172:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00006c20 <__umulhisi3>:
    6c20:	a2 9f       	mul	r26, r18
    6c22:	b0 01       	movw	r22, r0
    6c24:	b3 9f       	mul	r27, r19
    6c26:	c0 01       	movw	r24, r0
    6c28:	a3 9f       	mul	r26, r19
    6c2a:	70 0d       	add	r23, r0
    6c2c:	81 1d       	adc	r24, r1
    6c2e:	11 24       	eor	r1, r1
    6c30:	91 1d       	adc	r25, r1
    6c32:	b2 9f       	mul	r27, r18
    6c34:	70 0d       	add	r23, r0
    6c36:	81 1d       	adc	r24, r1
    6c38:	11 24       	eor	r1, r1
    6c3a:	91 1d       	adc	r25, r1
    6c3c:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00006380 <__prologue_saves__>:
    6380:	2f 92       	push	r2
    6382:	3f 92       	push	r3
    6384:	4f 92       	push	r4
    6386:	5f 92       	push	r5
    6388:	6f 92       	push	r6
    638a:	7f 92       	push	r7
    638c:	8f 92       	push	r8
    638e:	9f 92       	push	r9
    6390:	af 92       	push	r10
    6392:	bf 92       	push	r11
    6394:	cf 92       	push	r12
    6396:	df 92       	push	r13
    6398:	ef 92       	push	r14
    639a:	ff 92       	push	r15
    639c:	0f 93       	push	r16
    639e:	1f 93       	push	r17
    63a0:	cf 93       	push	r28
    63a2:	df 93       	push	r29
    63a4:	cd b7       	in	r28, 0x3d	; 61
    63a6:	de b7       	in	r29, 0x3e	; 62
    63a8:	ca 1b       	sub	r28, r26
    63aa:	db 0b       	sbc	r29, r27
    63ac:	0f b6       	in	r0, 0x3f	; 63
    63ae:	f8 94       	cli
    63b0:	de bf       	out	0x3e, r29	; 62
    63b2:	0f be       	out	0x3f, r0	; 63
    63b4:	cd bf       	out	0x3d, r28	; 61
    63b6:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

0000645a <__epilogue_restores__>:
    645a:	2a 88       	ldd	r2, Y+18	; 0x12
    645c:	39 88       	ldd	r3, Y+17	; 0x11
    645e:	48 88       	ldd	r4, Y+16	; 0x10
    6460:	5f 84       	ldd	r5, Y+15	; 0x0f
    6462:	6e 84       	ldd	r6, Y+14	; 0x0e
    6464:	7d 84       	ldd	r7, Y+13	; 0x0d
    6466:	8c 84       	ldd	r8, Y+12	; 0x0c
    6468:	9b 84       	ldd	r9, Y+11	; 0x0b
    646a:	aa 84       	ldd	r10, Y+10	; 0x0a
    646c:	b9 84       	ldd	r11, Y+9	; 0x09
    646e:	c8 84       	ldd	r12, Y+8	; 0x08
    6470:	df 80       	ldd	r13, Y+7	; 0x07
    6472:	ee 80       	ldd	r14, Y+6	; 0x06
    6474:	fd 80       	ldd	r15, Y+5	; 0x05
    6476:	0c 81       	ldd	r16, Y+4	; 0x04
    6478:	1b 81       	ldd	r17, Y+3	; 0x03
    647a:	aa 81       	ldd	r26, Y+2	; 0x02
    647c:	b9 81       	ldd	r27, Y+1	; 0x01
    647e:	ce 0f       	add	r28, r30
    6480:	d1 1d       	adc	r29, r1
    6482:	0f b6       	in	r0, 0x3f	; 63
    6484:	f8 94       	cli
    6486:	de bf       	out	0x3e, r29	; 62
    6488:	0f be       	out	0x3f, r0	; 63
    648a:	cd bf       	out	0x3d, r28	; 61
    648c:	ed 01       	movw	r28, r26
    648e:	08 95       	ret

Disassembly of section .text.avrlibc:

00007260 <atoi>:
    7260:	0e 94 45 38 	call	0x708a	; 0x708a <atol>
    7264:	cb 01       	movw	r24, r22
    7266:	08 95       	ret

Disassembly of section .text.avrlibc:

0000708a <atol>:
    708a:	2a e0       	ldi	r18, 0x0A	; 10
    708c:	30 e0       	ldi	r19, 0x00	; 0
    708e:	40 e0       	ldi	r20, 0x00	; 0
    7090:	50 e0       	ldi	r21, 0x00	; 0
    7092:	0e 94 93 0a 	call	0x1526	; 0x1526 <strtol>
    7096:	08 95       	ret

Disassembly of section .text.avrlibc:

00001526 <strtol>:
    1526:	2f 92       	push	r2
    1528:	3f 92       	push	r3
    152a:	4f 92       	push	r4
    152c:	5f 92       	push	r5
    152e:	6f 92       	push	r6
    1530:	7f 92       	push	r7
    1532:	8f 92       	push	r8
    1534:	af 92       	push	r10
    1536:	bf 92       	push	r11
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	00 d0       	rcall	.+0      	; 0x1548 <strtol+0x22>
    1548:	00 d0       	rcall	.+0      	; 0x154a <strtol+0x24>
    154a:	00 d0       	rcall	.+0      	; 0x154c <strtol+0x26>
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	3b 01       	movw	r6, r22
    1552:	88 2e       	mov	r8, r24
    1554:	5a 01       	movw	r10, r20
    1556:	19 01       	movw	r2, r18
    1558:	41 15       	cp	r20, r1
    155a:	51 05       	cpc	r21, r1
    155c:	21 f0       	breq	.+8      	; 0x1566 <strtol+0x40>
    155e:	fa 01       	movw	r30, r20
    1560:	60 83       	st	Z, r22
    1562:	71 83       	std	Z+1, r23	; 0x01
    1564:	82 83       	std	Z+2, r24	; 0x02
    1566:	21 14       	cp	r2, r1
    1568:	31 04       	cpc	r3, r1
    156a:	29 f0       	breq	.+10     	; 0x1576 <strtol+0x50>
    156c:	c1 01       	movw	r24, r2
    156e:	02 97       	sbiw	r24, 0x02	; 2
    1570:	83 97       	sbiw	r24, 0x23	; 35
    1572:	08 f0       	brcs	.+2      	; 0x1576 <strtol+0x50>
    1574:	1a c1       	rjmp	.+564    	; 0x17aa <strtol+0x284>
    1576:	e8 2c       	mov	r14, r8
    1578:	63 01       	movw	r12, r6
    157a:	ff ef       	ldi	r31, 0xFF	; 255
    157c:	cf 1a       	sub	r12, r31
    157e:	df 0a       	sbc	r13, r31
    1580:	ef 0a       	sbc	r14, r31
    1582:	f3 01       	movw	r30, r6
    1584:	14 91       	lpm	r17, Z
    1586:	87 fc       	sbrc	r8, 7
    1588:	10 81       	ld	r17, Z
    158a:	81 2f       	mov	r24, r17
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <isspace>
    1592:	4c 2d       	mov	r20, r12
    1594:	3d 2d       	mov	r19, r13
    1596:	2e 2d       	mov	r18, r14
    1598:	89 2b       	or	r24, r25
    159a:	19 f0       	breq	.+6      	; 0x15a2 <strtol+0x7c>
    159c:	36 01       	movw	r6, r12
    159e:	8e 2c       	mov	r8, r14
    15a0:	ea cf       	rjmp	.-44     	; 0x1576 <strtol+0x50>
    15a2:	1d 32       	cpi	r17, 0x2D	; 45
    15a4:	69 f4       	brne	.+26     	; 0x15c0 <strtol+0x9a>
    15a6:	e8 2c       	mov	r14, r8
    15a8:	63 01       	movw	r12, r6
    15aa:	52 e0       	ldi	r21, 0x02	; 2
    15ac:	c5 0e       	add	r12, r21
    15ae:	d1 1c       	adc	r13, r1
    15b0:	e1 1c       	adc	r14, r1
    15b2:	e4 2f       	mov	r30, r20
    15b4:	f3 2f       	mov	r31, r19
    15b6:	14 91       	lpm	r17, Z
    15b8:	27 fd       	sbrc	r18, 7
    15ba:	10 81       	ld	r17, Z
    15bc:	01 e0       	ldi	r16, 0x01	; 1
    15be:	0e c0       	rjmp	.+28     	; 0x15dc <strtol+0xb6>
    15c0:	1b 32       	cpi	r17, 0x2B	; 43
    15c2:	59 f4       	brne	.+22     	; 0x15da <strtol+0xb4>
    15c4:	e8 2c       	mov	r14, r8
    15c6:	63 01       	movw	r12, r6
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	c8 0e       	add	r12, r24
    15cc:	d1 1c       	adc	r13, r1
    15ce:	e1 1c       	adc	r14, r1
    15d0:	e4 2f       	mov	r30, r20
    15d2:	f3 2f       	mov	r31, r19
    15d4:	14 91       	lpm	r17, Z
    15d6:	27 fd       	sbrc	r18, 7
    15d8:	10 81       	ld	r17, Z
    15da:	00 e0       	ldi	r16, 0x00	; 0
    15dc:	21 14       	cp	r2, r1
    15de:	31 04       	cpc	r3, r1
    15e0:	09 f1       	breq	.+66     	; 0x1624 <strtol+0xfe>
    15e2:	90 e1       	ldi	r25, 0x10	; 16
    15e4:	29 16       	cp	r2, r25
    15e6:	31 04       	cpc	r3, r1
    15e8:	29 f4       	brne	.+10     	; 0x15f4 <strtol+0xce>
    15ea:	3f c0       	rjmp	.+126    	; 0x166a <strtol+0x144>
    15ec:	10 e3       	ldi	r17, 0x30	; 48
    15ee:	21 14       	cp	r2, r1
    15f0:	31 04       	cpc	r3, r1
    15f2:	21 f1       	breq	.+72     	; 0x163c <strtol+0x116>
    15f4:	f8 e0       	ldi	r31, 0x08	; 8
    15f6:	2f 16       	cp	r2, r31
    15f8:	31 04       	cpc	r3, r1
    15fa:	01 f1       	breq	.+64     	; 0x163c <strtol+0x116>
    15fc:	54 f4       	brge	.+20     	; 0x1612 <strtol+0xec>
    15fe:	32 e0       	ldi	r19, 0x02	; 2
    1600:	23 16       	cp	r2, r19
    1602:	31 04       	cpc	r3, r1
    1604:	21 f5       	brne	.+72     	; 0x164e <strtol+0x128>
    1606:	41 2c       	mov	r4, r1
    1608:	51 2c       	mov	r5, r1
    160a:	61 2c       	mov	r6, r1
    160c:	50 e4       	ldi	r21, 0x40	; 64
    160e:	75 2e       	mov	r7, r21
    1610:	4b c0       	rjmp	.+150    	; 0x16a8 <strtol+0x182>
    1612:	4a e0       	ldi	r20, 0x0A	; 10
    1614:	24 16       	cp	r2, r20
    1616:	31 04       	cpc	r3, r1
    1618:	39 f0       	breq	.+14     	; 0x1628 <strtol+0x102>
    161a:	50 e1       	ldi	r21, 0x10	; 16
    161c:	25 16       	cp	r2, r21
    161e:	31 04       	cpc	r3, r1
    1620:	b1 f4       	brne	.+44     	; 0x164e <strtol+0x128>
    1622:	3d c0       	rjmp	.+122    	; 0x169e <strtol+0x178>
    1624:	10 33       	cpi	r17, 0x30	; 48
    1626:	19 f1       	breq	.+70     	; 0x166e <strtol+0x148>
    1628:	3a e0       	ldi	r19, 0x0A	; 10
    162a:	23 2e       	mov	r2, r19
    162c:	31 2c       	mov	r3, r1
    162e:	4c ec       	ldi	r20, 0xCC	; 204
    1630:	44 2e       	mov	r4, r20
    1632:	54 2c       	mov	r5, r4
    1634:	64 2c       	mov	r6, r4
    1636:	4c e0       	ldi	r20, 0x0C	; 12
    1638:	74 2e       	mov	r7, r20
    163a:	36 c0       	rjmp	.+108    	; 0x16a8 <strtol+0x182>
    163c:	98 e0       	ldi	r25, 0x08	; 8
    163e:	29 2e       	mov	r2, r25
    1640:	31 2c       	mov	r3, r1
    1642:	41 2c       	mov	r4, r1
    1644:	51 2c       	mov	r5, r1
    1646:	61 2c       	mov	r6, r1
    1648:	20 e1       	ldi	r18, 0x10	; 16
    164a:	72 2e       	mov	r7, r18
    164c:	2d c0       	rjmp	.+90     	; 0x16a8 <strtol+0x182>
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e8       	ldi	r25, 0x80	; 128
    1656:	91 01       	movw	r18, r2
    1658:	03 2c       	mov	r0, r3
    165a:	00 0c       	add	r0, r0
    165c:	44 0b       	sbc	r20, r20
    165e:	55 0b       	sbc	r21, r21
    1660:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <__udivmodsi4>
    1664:	29 01       	movw	r4, r18
    1666:	3a 01       	movw	r6, r20
    1668:	1f c0       	rjmp	.+62     	; 0x16a8 <strtol+0x182>
    166a:	10 33       	cpi	r17, 0x30	; 48
    166c:	c1 f4       	brne	.+48     	; 0x169e <strtol+0x178>
    166e:	f6 01       	movw	r30, r12
    1670:	84 91       	lpm	r24, Z
    1672:	e7 fc       	sbrc	r14, 7
    1674:	80 81       	ld	r24, Z
    1676:	8f 7d       	andi	r24, 0xDF	; 223
    1678:	88 35       	cpi	r24, 0x58	; 88
    167a:	09 f0       	breq	.+2      	; 0x167e <strtol+0x158>
    167c:	b7 cf       	rjmp	.-146    	; 0x15ec <strtol+0xc6>
    167e:	ae 2d       	mov	r26, r14
    1680:	c6 01       	movw	r24, r12
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	a1 1d       	adc	r26, r1
    1686:	fc 01       	movw	r30, r24
    1688:	14 91       	lpm	r17, Z
    168a:	a7 fd       	sbrc	r26, 7
    168c:	10 81       	ld	r17, Z
    168e:	e2 e0       	ldi	r30, 0x02	; 2
    1690:	ce 0e       	add	r12, r30
    1692:	d1 1c       	adc	r13, r1
    1694:	e1 1c       	adc	r14, r1
    1696:	02 60       	ori	r16, 0x02	; 2
    1698:	60 e1       	ldi	r22, 0x10	; 16
    169a:	26 2e       	mov	r2, r22
    169c:	31 2c       	mov	r3, r1
    169e:	41 2c       	mov	r4, r1
    16a0:	51 2c       	mov	r5, r1
    16a2:	61 2c       	mov	r6, r1
    16a4:	88 e0       	ldi	r24, 0x08	; 8
    16a6:	78 2e       	mov	r7, r24
    16a8:	a0 e0       	ldi	r26, 0x00	; 0
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	cb 01       	movw	r24, r22
    16b0:	91 01       	movw	r18, r2
    16b2:	03 2c       	mov	r0, r3
    16b4:	00 0c       	add	r0, r0
    16b6:	44 0b       	sbc	r20, r20
    16b8:	55 0b       	sbc	r21, r21
    16ba:	29 83       	std	Y+1, r18	; 0x01
    16bc:	3a 83       	std	Y+2, r19	; 0x02
    16be:	4b 83       	std	Y+3, r20	; 0x03
    16c0:	5c 83       	std	Y+4, r21	; 0x04
    16c2:	e0 ed       	ldi	r30, 0xD0	; 208
    16c4:	e1 0f       	add	r30, r17
    16c6:	ea 30       	cpi	r30, 0x0A	; 10
    16c8:	60 f0       	brcs	.+24     	; 0x16e2 <strtol+0x1bc>
    16ca:	2f eb       	ldi	r18, 0xBF	; 191
    16cc:	21 0f       	add	r18, r17
    16ce:	2a 31       	cpi	r18, 0x1A	; 26
    16d0:	10 f4       	brcc	.+4      	; 0x16d6 <strtol+0x1b0>
    16d2:	e9 ec       	ldi	r30, 0xC9	; 201
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <strtol+0x1ba>
    16d6:	2f e9       	ldi	r18, 0x9F	; 159
    16d8:	21 0f       	add	r18, r17
    16da:	2a 31       	cpi	r18, 0x1A	; 26
    16dc:	50 f5       	brcc	.+84     	; 0x1732 <strtol+0x20c>
    16de:	e9 ea       	ldi	r30, 0xA9	; 169
    16e0:	e1 0f       	add	r30, r17
    16e2:	2e 2f       	mov	r18, r30
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	22 15       	cp	r18, r2
    16e8:	33 05       	cpc	r19, r3
    16ea:	1c f5       	brge	.+70     	; 0x1732 <strtol+0x20c>
    16ec:	a7 fd       	sbrc	r26, 7
    16ee:	18 c0       	rjmp	.+48     	; 0x1720 <strtol+0x1fa>
    16f0:	46 16       	cp	r4, r22
    16f2:	57 06       	cpc	r5, r23
    16f4:	68 06       	cpc	r6, r24
    16f6:	79 06       	cpc	r7, r25
    16f8:	80 f0       	brcs	.+32     	; 0x171a <strtol+0x1f4>
    16fa:	29 81       	ldd	r18, Y+1	; 0x01
    16fc:	3a 81       	ldd	r19, Y+2	; 0x02
    16fe:	4b 81       	ldd	r20, Y+3	; 0x03
    1700:	5c 81       	ldd	r21, Y+4	; 0x04
    1702:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <__mulsi3>
    1706:	6e 0f       	add	r22, r30
    1708:	71 1d       	adc	r23, r1
    170a:	81 1d       	adc	r24, r1
    170c:	91 1d       	adc	r25, r1
    170e:	61 30       	cpi	r22, 0x01	; 1
    1710:	71 05       	cpc	r23, r1
    1712:	81 05       	cpc	r24, r1
    1714:	30 e8       	ldi	r19, 0x80	; 128
    1716:	93 07       	cpc	r25, r19
    1718:	10 f0       	brcs	.+4      	; 0x171e <strtol+0x1f8>
    171a:	af ef       	ldi	r26, 0xFF	; 255
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <strtol+0x1fa>
    171e:	a1 e0       	ldi	r26, 0x01	; 1
    1720:	f6 01       	movw	r30, r12
    1722:	14 91       	lpm	r17, Z
    1724:	e7 fc       	sbrc	r14, 7
    1726:	10 81       	ld	r17, Z
    1728:	4f ef       	ldi	r20, 0xFF	; 255
    172a:	c4 1a       	sub	r12, r20
    172c:	d4 0a       	sbc	r13, r20
    172e:	e4 0a       	sbc	r14, r20
    1730:	c8 cf       	rjmp	.-112    	; 0x16c2 <strtol+0x19c>
    1732:	20 2f       	mov	r18, r16
    1734:	21 70       	andi	r18, 0x01	; 1
    1736:	a1 14       	cp	r10, r1
    1738:	b1 04       	cpc	r11, r1
    173a:	b1 f0       	breq	.+44     	; 0x1768 <strtol+0x242>
    173c:	aa 23       	and	r26, r26
    173e:	49 f0       	breq	.+18     	; 0x1752 <strtol+0x22c>
    1740:	51 e0       	ldi	r21, 0x01	; 1
    1742:	c5 1a       	sub	r12, r21
    1744:	d1 08       	sbc	r13, r1
    1746:	e1 08       	sbc	r14, r1
    1748:	f5 01       	movw	r30, r10
    174a:	c0 82       	st	Z, r12
    174c:	d1 82       	std	Z+1, r13	; 0x01
    174e:	e2 82       	std	Z+2, r14	; 0x02
    1750:	0b c0       	rjmp	.+22     	; 0x1768 <strtol+0x242>
    1752:	01 ff       	sbrs	r16, 1
    1754:	1d c0       	rjmp	.+58     	; 0x1790 <strtol+0x26a>
    1756:	f2 e0       	ldi	r31, 0x02	; 2
    1758:	cf 1a       	sub	r12, r31
    175a:	d1 08       	sbc	r13, r1
    175c:	e1 08       	sbc	r14, r1
    175e:	f5 01       	movw	r30, r10
    1760:	c0 82       	st	Z, r12
    1762:	d1 82       	std	Z+1, r13	; 0x01
    1764:	e2 82       	std	Z+2, r14	; 0x02
    1766:	14 c0       	rjmp	.+40     	; 0x1790 <strtol+0x26a>
    1768:	a7 ff       	sbrs	r26, 7
    176a:	12 c0       	rjmp	.+36     	; 0x1790 <strtol+0x26a>
    176c:	22 23       	and	r18, r18
    176e:	29 f0       	breq	.+10     	; 0x177a <strtol+0x254>
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e8       	ldi	r25, 0x80	; 128
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <strtol+0x25c>
    177a:	6f ef       	ldi	r22, 0xFF	; 255
    177c:	7f ef       	ldi	r23, 0xFF	; 255
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	9f e7       	ldi	r25, 0x7F	; 127
    1782:	22 e2       	ldi	r18, 0x22	; 34
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	30 93 d7 07 	sts	0x07D7, r19	; 0x8007d7 <errno+0x1>
    178a:	20 93 d6 07 	sts	0x07D6, r18	; 0x8007d6 <errno>
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <strtol+0x27c>
    1790:	22 23       	and	r18, r18
    1792:	81 f0       	breq	.+32     	; 0x17b4 <strtol+0x28e>
    1794:	90 95       	com	r25
    1796:	80 95       	com	r24
    1798:	70 95       	com	r23
    179a:	61 95       	neg	r22
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f 4f       	sbci	r24, 0xFF	; 255
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	46 2f       	mov	r20, r22
    17a4:	37 2f       	mov	r19, r23
    17a6:	28 2f       	mov	r18, r24
    17a8:	12 c0       	rjmp	.+36     	; 0x17ce <strtol+0x2a8>
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0d c0       	rjmp	.+26     	; 0x17ce <strtol+0x2a8>
    17b4:	97 ff       	sbrs	r25, 7
    17b6:	f5 cf       	rjmp	.-22     	; 0x17a2 <strtol+0x27c>
    17b8:	82 e2       	ldi	r24, 0x22	; 34
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <errno+0x1>
    17c0:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <errno>
    17c4:	6f ef       	ldi	r22, 0xFF	; 255
    17c6:	7f ef       	ldi	r23, 0xFF	; 255
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	9f e7       	ldi	r25, 0x7F	; 127
    17cc:	ea cf       	rjmp	.-44     	; 0x17a2 <strtol+0x27c>
    17ce:	64 2f       	mov	r22, r20
    17d0:	73 2f       	mov	r23, r19
    17d2:	82 2f       	mov	r24, r18
    17d4:	26 96       	adiw	r28, 0x06	; 6
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ef 90       	pop	r14
    17ea:	df 90       	pop	r13
    17ec:	cf 90       	pop	r12
    17ee:	bf 90       	pop	r11
    17f0:	af 90       	pop	r10
    17f2:	8f 90       	pop	r8
    17f4:	7f 90       	pop	r7
    17f6:	6f 90       	pop	r6
    17f8:	5f 90       	pop	r5
    17fa:	4f 90       	pop	r4
    17fc:	3f 90       	pop	r3
    17fe:	2f 90       	pop	r2
    1800:	08 95       	ret

Disassembly of section .text.avrlibc:

00001f64 <__ftoa_engine>:
    1f64:	28 30       	cpi	r18, 0x08	; 8
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <__ftoa_engine+0x6>
    1f68:	27 e0       	ldi	r18, 0x07	; 7
    1f6a:	33 27       	eor	r19, r19
    1f6c:	da 01       	movw	r26, r20
    1f6e:	99 0f       	add	r25, r25
    1f70:	31 1d       	adc	r19, r1
    1f72:	87 fd       	sbrc	r24, 7
    1f74:	91 60       	ori	r25, 0x01	; 1
    1f76:	00 96       	adiw	r24, 0x00	; 0
    1f78:	61 05       	cpc	r22, r1
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	39 f4       	brne	.+14     	; 0x1f8c <__ftoa_engine+0x28>
    1f7e:	32 60       	ori	r19, 0x02	; 2
    1f80:	2e 5f       	subi	r18, 0xFE	; 254
    1f82:	3d 93       	st	X+, r19
    1f84:	30 e3       	ldi	r19, 0x30	; 48
    1f86:	2a 95       	dec	r18
    1f88:	e1 f7       	brne	.-8      	; 0x1f82 <__ftoa_engine+0x1e>
    1f8a:	08 95       	ret
    1f8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f8e:	30 f0       	brcs	.+12     	; 0x1f9c <__ftoa_engine+0x38>
    1f90:	80 38       	cpi	r24, 0x80	; 128
    1f92:	71 05       	cpc	r23, r1
    1f94:	61 05       	cpc	r22, r1
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <__ftoa_engine+0x36>
    1f98:	3c 5f       	subi	r19, 0xFC	; 252
    1f9a:	3c 5f       	subi	r19, 0xFC	; 252
    1f9c:	3d 93       	st	X+, r19
    1f9e:	91 30       	cpi	r25, 0x01	; 1
    1fa0:	08 f0       	brcs	.+2      	; 0x1fa4 <__ftoa_engine+0x40>
    1fa2:	80 68       	ori	r24, 0x80	; 128
    1fa4:	91 1d       	adc	r25, r1
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	1f 93       	push	r17
    1fac:	0f 93       	push	r16
    1fae:	ff 92       	push	r15
    1fb0:	ef 92       	push	r14
    1fb2:	19 2f       	mov	r17, r25
    1fb4:	98 7f       	andi	r25, 0xF8	; 248
    1fb6:	96 95       	lsr	r25
    1fb8:	e9 2f       	mov	r30, r25
    1fba:	96 95       	lsr	r25
    1fbc:	96 95       	lsr	r25
    1fbe:	e9 0f       	add	r30, r25
    1fc0:	ff 27       	eor	r31, r31
    1fc2:	ee 58       	subi	r30, 0x8E	; 142
    1fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc6:	99 27       	eor	r25, r25
    1fc8:	33 27       	eor	r19, r19
    1fca:	ee 24       	eor	r14, r14
    1fcc:	ff 24       	eor	r15, r15
    1fce:	a7 01       	movw	r20, r14
    1fd0:	e7 01       	movw	r28, r14
    1fd2:	05 90       	lpm	r0, Z+
    1fd4:	08 94       	sec
    1fd6:	07 94       	ror	r0
    1fd8:	28 f4       	brcc	.+10     	; 0x1fe4 <__ftoa_engine+0x80>
    1fda:	36 0f       	add	r19, r22
    1fdc:	e7 1e       	adc	r14, r23
    1fde:	f8 1e       	adc	r15, r24
    1fe0:	49 1f       	adc	r20, r25
    1fe2:	51 1d       	adc	r21, r1
    1fe4:	66 0f       	add	r22, r22
    1fe6:	77 1f       	adc	r23, r23
    1fe8:	88 1f       	adc	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	06 94       	lsr	r0
    1fee:	a1 f7       	brne	.-24     	; 0x1fd8 <__ftoa_engine+0x74>
    1ff0:	05 90       	lpm	r0, Z+
    1ff2:	07 94       	ror	r0
    1ff4:	28 f4       	brcc	.+10     	; 0x2000 <__ftoa_engine+0x9c>
    1ff6:	e7 0e       	add	r14, r23
    1ff8:	f8 1e       	adc	r15, r24
    1ffa:	49 1f       	adc	r20, r25
    1ffc:	56 1f       	adc	r21, r22
    1ffe:	c1 1d       	adc	r28, r1
    2000:	77 0f       	add	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	66 1f       	adc	r22, r22
    2008:	06 94       	lsr	r0
    200a:	a1 f7       	brne	.-24     	; 0x1ff4 <__ftoa_engine+0x90>
    200c:	05 90       	lpm	r0, Z+
    200e:	07 94       	ror	r0
    2010:	28 f4       	brcc	.+10     	; 0x201c <__ftoa_engine+0xb8>
    2012:	f8 0e       	add	r15, r24
    2014:	49 1f       	adc	r20, r25
    2016:	56 1f       	adc	r21, r22
    2018:	c7 1f       	adc	r28, r23
    201a:	d1 1d       	adc	r29, r1
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	66 1f       	adc	r22, r22
    2022:	77 1f       	adc	r23, r23
    2024:	06 94       	lsr	r0
    2026:	a1 f7       	brne	.-24     	; 0x2010 <__ftoa_engine+0xac>
    2028:	05 90       	lpm	r0, Z+
    202a:	07 94       	ror	r0
    202c:	20 f4       	brcc	.+8      	; 0x2036 <__ftoa_engine+0xd2>
    202e:	49 0f       	add	r20, r25
    2030:	56 1f       	adc	r21, r22
    2032:	c7 1f       	adc	r28, r23
    2034:	d8 1f       	adc	r29, r24
    2036:	99 0f       	add	r25, r25
    2038:	66 1f       	adc	r22, r22
    203a:	77 1f       	adc	r23, r23
    203c:	88 1f       	adc	r24, r24
    203e:	06 94       	lsr	r0
    2040:	a9 f7       	brne	.-22     	; 0x202c <__ftoa_engine+0xc8>
    2042:	84 91       	lpm	r24, Z
    2044:	10 95       	com	r17
    2046:	17 70       	andi	r17, 0x07	; 7
    2048:	41 f0       	breq	.+16     	; 0x205a <__ftoa_engine+0xf6>
    204a:	d6 95       	lsr	r29
    204c:	c7 95       	ror	r28
    204e:	57 95       	ror	r21
    2050:	47 95       	ror	r20
    2052:	f7 94       	ror	r15
    2054:	e7 94       	ror	r14
    2056:	1a 95       	dec	r17
    2058:	c1 f7       	brne	.-16     	; 0x204a <__ftoa_engine+0xe6>
    205a:	e8 e1       	ldi	r30, 0x18	; 24
    205c:	f1 e0       	ldi	r31, 0x01	; 1
    205e:	68 94       	set
    2060:	15 90       	lpm	r1, Z+
    2062:	15 91       	lpm	r17, Z+
    2064:	35 91       	lpm	r19, Z+
    2066:	65 91       	lpm	r22, Z+
    2068:	95 91       	lpm	r25, Z+
    206a:	05 90       	lpm	r0, Z+
    206c:	7f e2       	ldi	r23, 0x2F	; 47
    206e:	73 95       	inc	r23
    2070:	e1 18       	sub	r14, r1
    2072:	f1 0a       	sbc	r15, r17
    2074:	43 0b       	sbc	r20, r19
    2076:	56 0b       	sbc	r21, r22
    2078:	c9 0b       	sbc	r28, r25
    207a:	d0 09       	sbc	r29, r0
    207c:	c0 f7       	brcc	.-16     	; 0x206e <__ftoa_engine+0x10a>
    207e:	e1 0c       	add	r14, r1
    2080:	f1 1e       	adc	r15, r17
    2082:	43 1f       	adc	r20, r19
    2084:	56 1f       	adc	r21, r22
    2086:	c9 1f       	adc	r28, r25
    2088:	d0 1d       	adc	r29, r0
    208a:	7e f4       	brtc	.+30     	; 0x20aa <__ftoa_engine+0x146>
    208c:	70 33       	cpi	r23, 0x30	; 48
    208e:	11 f4       	brne	.+4      	; 0x2094 <__ftoa_engine+0x130>
    2090:	8a 95       	dec	r24
    2092:	e6 cf       	rjmp	.-52     	; 0x2060 <__ftoa_engine+0xfc>
    2094:	e8 94       	clt
    2096:	01 50       	subi	r16, 0x01	; 1
    2098:	30 f0       	brcs	.+12     	; 0x20a6 <__ftoa_engine+0x142>
    209a:	08 0f       	add	r16, r24
    209c:	0a f4       	brpl	.+2      	; 0x20a0 <__ftoa_engine+0x13c>
    209e:	00 27       	eor	r16, r16
    20a0:	02 17       	cp	r16, r18
    20a2:	08 f4       	brcc	.+2      	; 0x20a6 <__ftoa_engine+0x142>
    20a4:	20 2f       	mov	r18, r16
    20a6:	23 95       	inc	r18
    20a8:	02 2f       	mov	r16, r18
    20aa:	7a 33       	cpi	r23, 0x3A	; 58
    20ac:	28 f0       	brcs	.+10     	; 0x20b8 <__ftoa_engine+0x154>
    20ae:	79 e3       	ldi	r23, 0x39	; 57
    20b0:	7d 93       	st	X+, r23
    20b2:	2a 95       	dec	r18
    20b4:	e9 f7       	brne	.-6      	; 0x20b0 <__ftoa_engine+0x14c>
    20b6:	10 c0       	rjmp	.+32     	; 0x20d8 <__ftoa_engine+0x174>
    20b8:	7d 93       	st	X+, r23
    20ba:	2a 95       	dec	r18
    20bc:	89 f6       	brne	.-94     	; 0x2060 <__ftoa_engine+0xfc>
    20be:	06 94       	lsr	r0
    20c0:	97 95       	ror	r25
    20c2:	67 95       	ror	r22
    20c4:	37 95       	ror	r19
    20c6:	17 95       	ror	r17
    20c8:	17 94       	ror	r1
    20ca:	e1 18       	sub	r14, r1
    20cc:	f1 0a       	sbc	r15, r17
    20ce:	43 0b       	sbc	r20, r19
    20d0:	56 0b       	sbc	r21, r22
    20d2:	c9 0b       	sbc	r28, r25
    20d4:	d0 09       	sbc	r29, r0
    20d6:	98 f0       	brcs	.+38     	; 0x20fe <__ftoa_engine+0x19a>
    20d8:	23 95       	inc	r18
    20da:	7e 91       	ld	r23, -X
    20dc:	73 95       	inc	r23
    20de:	7a 33       	cpi	r23, 0x3A	; 58
    20e0:	08 f0       	brcs	.+2      	; 0x20e4 <__ftoa_engine+0x180>
    20e2:	70 e3       	ldi	r23, 0x30	; 48
    20e4:	7c 93       	st	X, r23
    20e6:	20 13       	cpse	r18, r16
    20e8:	b8 f7       	brcc	.-18     	; 0x20d8 <__ftoa_engine+0x174>
    20ea:	7e 91       	ld	r23, -X
    20ec:	70 61       	ori	r23, 0x10	; 16
    20ee:	7d 93       	st	X+, r23
    20f0:	30 f0       	brcs	.+12     	; 0x20fe <__ftoa_engine+0x19a>
    20f2:	83 95       	inc	r24
    20f4:	71 e3       	ldi	r23, 0x31	; 49
    20f6:	7d 93       	st	X+, r23
    20f8:	70 e3       	ldi	r23, 0x30	; 48
    20fa:	2a 95       	dec	r18
    20fc:	e1 f7       	brne	.-8      	; 0x20f6 <__ftoa_engine+0x192>
    20fe:	11 24       	eor	r1, r1
    2100:	ef 90       	pop	r14
    2102:	ff 90       	pop	r15
    2104:	0f 91       	pop	r16
    2106:	1f 91       	pop	r17
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	99 27       	eor	r25, r25
    210e:	87 fd       	sbrc	r24, 7
    2110:	90 95       	com	r25
    2112:	08 95       	ret

Disassembly of section .text.avrlibc:

00006f2c <isspace>:
    6f2c:	91 11       	cpse	r25, r1
    6f2e:	0c 94 52 39 	jmp	0x72a4	; 0x72a4 <__ctype_isfalse>
    6f32:	80 32       	cpi	r24, 0x20	; 32
    6f34:	19 f0       	breq	.+6      	; 0x6f3c <isspace+0x10>
    6f36:	89 50       	subi	r24, 0x09	; 9
    6f38:	85 50       	subi	r24, 0x05	; 5
    6f3a:	c8 f7       	brcc	.-14     	; 0x6f2e <isspace+0x2>
    6f3c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000662a <memcpy>:
    662a:	cf 92       	push	r12
    662c:	df 92       	push	r13
    662e:	ef 92       	push	r14
    6630:	dc 01       	movw	r26, r24
    6632:	6a 01       	movw	r12, r20
    6634:	e6 2e       	mov	r14, r22
    6636:	28 0f       	add	r18, r24
    6638:	39 1f       	adc	r19, r25
    663a:	a2 17       	cp	r26, r18
    663c:	b3 07       	cpc	r27, r19
    663e:	51 f0       	breq	.+20     	; 0x6654 <memcpy+0x2a>
    6640:	f6 01       	movw	r30, r12
    6642:	44 91       	lpm	r20, Z
    6644:	e7 fc       	sbrc	r14, 7
    6646:	40 81       	ld	r20, Z
    6648:	4d 93       	st	X+, r20
    664a:	4f ef       	ldi	r20, 0xFF	; 255
    664c:	c4 1a       	sub	r12, r20
    664e:	d4 0a       	sbc	r13, r20
    6650:	e4 0a       	sbc	r14, r20
    6652:	f3 cf       	rjmp	.-26     	; 0x663a <memcpy+0x10>
    6654:	ef 90       	pop	r14
    6656:	df 90       	pop	r13
    6658:	cf 90       	pop	r12
    665a:	08 95       	ret

Disassembly of section .text.avrlibc:

00006080 <strcmp>:
    6080:	cf 92       	push	r12
    6082:	df 92       	push	r13
    6084:	ef 92       	push	r14
    6086:	6b 01       	movw	r12, r22
    6088:	e8 2e       	mov	r14, r24
    608a:	f6 01       	movw	r30, r12
    608c:	84 91       	lpm	r24, Z
    608e:	e7 fc       	sbrc	r14, 7
    6090:	80 81       	ld	r24, Z
    6092:	f9 01       	movw	r30, r18
    6094:	54 91       	lpm	r21, Z
    6096:	47 fd       	sbrc	r20, 7
    6098:	50 81       	ld	r21, Z
    609a:	85 13       	cpse	r24, r21
    609c:	0b c0       	rjmp	.+22     	; 0x60b4 <strcmp+0x34>
    609e:	88 23       	and	r24, r24
    60a0:	41 f0       	breq	.+16     	; 0x60b2 <strcmp+0x32>
    60a2:	8f ef       	ldi	r24, 0xFF	; 255
    60a4:	c8 1a       	sub	r12, r24
    60a6:	d8 0a       	sbc	r13, r24
    60a8:	e8 0a       	sbc	r14, r24
    60aa:	2f 5f       	subi	r18, 0xFF	; 255
    60ac:	3f 4f       	sbci	r19, 0xFF	; 255
    60ae:	4f 4f       	sbci	r20, 0xFF	; 255
    60b0:	ec cf       	rjmp	.-40     	; 0x608a <strcmp+0xa>
    60b2:	58 2f       	mov	r21, r24
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	85 1b       	sub	r24, r21
    60b8:	91 09       	sbc	r25, r1
    60ba:	ef 90       	pop	r14
    60bc:	df 90       	pop	r13
    60be:	cf 90       	pop	r12
    60c0:	08 95       	ret

Disassembly of section .text.avrlibc:

000050f6 <strncmp>:
    50f6:	cf 92       	push	r12
    50f8:	df 92       	push	r13
    50fa:	ef 92       	push	r14
    50fc:	0f 93       	push	r16
    50fe:	1f 93       	push	r17
    5100:	6b 01       	movw	r12, r22
    5102:	e8 2e       	mov	r14, r24
    5104:	01 15       	cp	r16, r1
    5106:	11 05       	cpc	r17, r1
    5108:	19 f1       	breq	.+70     	; 0x5150 <strncmp+0x5a>
    510a:	01 50       	subi	r16, 0x01	; 1
    510c:	11 09       	sbc	r17, r1
    510e:	f6 01       	movw	r30, r12
    5110:	84 91       	lpm	r24, Z
    5112:	e7 fc       	sbrc	r14, 7
    5114:	80 81       	ld	r24, Z
    5116:	88 23       	and	r24, r24
    5118:	99 f0       	breq	.+38     	; 0x5140 <strncmp+0x4a>
    511a:	f9 01       	movw	r30, r18
    511c:	94 91       	lpm	r25, Z
    511e:	47 fd       	sbrc	r20, 7
    5120:	90 81       	ld	r25, Z
    5122:	99 23       	and	r25, r25
    5124:	69 f0       	breq	.+26     	; 0x5140 <strncmp+0x4a>
    5126:	01 15       	cp	r16, r1
    5128:	11 05       	cpc	r17, r1
    512a:	51 f0       	breq	.+20     	; 0x5140 <strncmp+0x4a>
    512c:	89 13       	cpse	r24, r25
    512e:	08 c0       	rjmp	.+16     	; 0x5140 <strncmp+0x4a>
    5130:	8f ef       	ldi	r24, 0xFF	; 255
    5132:	c8 1a       	sub	r12, r24
    5134:	d8 0a       	sbc	r13, r24
    5136:	e8 0a       	sbc	r14, r24
    5138:	2f 5f       	subi	r18, 0xFF	; 255
    513a:	3f 4f       	sbci	r19, 0xFF	; 255
    513c:	4f 4f       	sbci	r20, 0xFF	; 255
    513e:	e5 cf       	rjmp	.-54     	; 0x510a <strncmp+0x14>
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	f9 01       	movw	r30, r18
    5144:	24 91       	lpm	r18, Z
    5146:	47 fd       	sbrc	r20, 7
    5148:	20 81       	ld	r18, Z
    514a:	82 1b       	sub	r24, r18
    514c:	91 09       	sbc	r25, r1
    514e:	02 c0       	rjmp	.+4      	; 0x5154 <strncmp+0x5e>
    5150:	80 e0       	ldi	r24, 0x00	; 0
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	1f 91       	pop	r17
    5156:	0f 91       	pop	r16
    5158:	ef 90       	pop	r14
    515a:	df 90       	pop	r13
    515c:	cf 90       	pop	r12
    515e:	08 95       	ret

Disassembly of section .text.avrlibc:

00006894 <strlen>:
    6894:	cf 92       	push	r12
    6896:	df 92       	push	r13
    6898:	ef 92       	push	r14
    689a:	6b 01       	movw	r12, r22
    689c:	e8 2e       	mov	r14, r24
    689e:	a8 2f       	mov	r26, r24
    68a0:	cb 01       	movw	r24, r22
    68a2:	fc 01       	movw	r30, r24
    68a4:	24 91       	lpm	r18, Z
    68a6:	a7 fd       	sbrc	r26, 7
    68a8:	20 81       	ld	r18, Z
    68aa:	22 23       	and	r18, r18
    68ac:	19 f0       	breq	.+6      	; 0x68b4 <strlen+0x20>
    68ae:	01 96       	adiw	r24, 0x01	; 1
    68b0:	a1 1d       	adc	r26, r1
    68b2:	f7 cf       	rjmp	.-18     	; 0x68a2 <strlen+0xe>
    68b4:	8c 19       	sub	r24, r12
    68b6:	9d 09       	sbc	r25, r13
    68b8:	ef 90       	pop	r14
    68ba:	df 90       	pop	r13
    68bc:	cf 90       	pop	r12
    68be:	08 95       	ret

Disassembly of section .text.avrlibc:

00006c3e <strcpy>:
    6c3e:	9a 01       	movw	r18, r20
    6c40:	46 2f       	mov	r20, r22
    6c42:	dc 01       	movw	r26, r24
    6c44:	f9 01       	movw	r30, r18
    6c46:	54 91       	lpm	r21, Z
    6c48:	47 fd       	sbrc	r20, 7
    6c4a:	50 81       	ld	r21, Z
    6c4c:	5d 93       	st	X+, r21
    6c4e:	55 23       	and	r21, r21
    6c50:	21 f0       	breq	.+8      	; 0x6c5a <strcpy+0x1c>
    6c52:	2f 5f       	subi	r18, 0xFF	; 255
    6c54:	3f 4f       	sbci	r19, 0xFF	; 255
    6c56:	4f 4f       	sbci	r20, 0xFF	; 255
    6c58:	f5 cf       	rjmp	.-22     	; 0x6c44 <strcpy+0x6>
    6c5a:	08 95       	ret

Disassembly of section .text.avrlibc:

00006490 <strnlen>:
    6490:	cf 92       	push	r12
    6492:	df 92       	push	r13
    6494:	ef 92       	push	r14
    6496:	6b 01       	movw	r12, r22
    6498:	e8 2e       	mov	r14, r24
    649a:	a8 2f       	mov	r26, r24
    649c:	cb 01       	movw	r24, r22
    649e:	41 15       	cp	r20, r1
    64a0:	51 05       	cpc	r21, r1
    64a2:	31 f4       	brne	.+12     	; 0x64b0 <strnlen+0x20>
    64a4:	8c 19       	sub	r24, r12
    64a6:	9d 09       	sbc	r25, r13
    64a8:	ef 90       	pop	r14
    64aa:	df 90       	pop	r13
    64ac:	cf 90       	pop	r12
    64ae:	08 95       	ret
    64b0:	fc 01       	movw	r30, r24
    64b2:	24 91       	lpm	r18, Z
    64b4:	a7 fd       	sbrc	r26, 7
    64b6:	20 81       	ld	r18, Z
    64b8:	22 23       	and	r18, r18
    64ba:	a1 f3       	breq	.-24     	; 0x64a4 <strnlen+0x14>
    64bc:	01 96       	adiw	r24, 0x01	; 1
    64be:	a1 1d       	adc	r26, r1
    64c0:	41 50       	subi	r20, 0x01	; 1
    64c2:	51 09       	sbc	r21, r1
    64c4:	ec cf       	rjmp	.-40     	; 0x649e <strnlen+0xe>

Disassembly of section .text.avrlibc:

00004c8e <fputc>:
    4c8e:	0f 93       	push	r16
    4c90:	1f 93       	push	r17
    4c92:	cf 93       	push	r28
    4c94:	df 93       	push	r29
    4c96:	fb 01       	movw	r30, r22
    4c98:	24 81       	ldd	r18, Z+4	; 0x04
    4c9a:	21 fd       	sbrc	r18, 1
    4c9c:	03 c0       	rjmp	.+6      	; 0x4ca4 <fputc+0x16>
    4c9e:	8f ef       	ldi	r24, 0xFF	; 255
    4ca0:	9f ef       	ldi	r25, 0xFF	; 255
    4ca2:	2c c0       	rjmp	.+88     	; 0x4cfc <fputc+0x6e>
    4ca4:	22 ff       	sbrs	r18, 2
    4ca6:	16 c0       	rjmp	.+44     	; 0x4cd4 <fputc+0x46>
    4ca8:	47 81       	ldd	r20, Z+7	; 0x07
    4caa:	50 85       	ldd	r21, Z+8	; 0x08
    4cac:	25 81       	ldd	r18, Z+5	; 0x05
    4cae:	36 81       	ldd	r19, Z+6	; 0x06
    4cb0:	42 17       	cp	r20, r18
    4cb2:	53 07       	cpc	r21, r19
    4cb4:	44 f4       	brge	.+16     	; 0x4cc6 <fputc+0x38>
    4cb6:	a0 81       	ld	r26, Z
    4cb8:	b1 81       	ldd	r27, Z+1	; 0x01
    4cba:	9d 01       	movw	r18, r26
    4cbc:	2f 5f       	subi	r18, 0xFF	; 255
    4cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc0:	31 83       	std	Z+1, r19	; 0x01
    4cc2:	20 83       	st	Z, r18
    4cc4:	8c 93       	st	X, r24
    4cc6:	27 81       	ldd	r18, Z+7	; 0x07
    4cc8:	30 85       	ldd	r19, Z+8	; 0x08
    4cca:	2f 5f       	subi	r18, 0xFF	; 255
    4ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    4cce:	30 87       	std	Z+8, r19	; 0x08
    4cd0:	27 83       	std	Z+7, r18	; 0x07
    4cd2:	14 c0       	rjmp	.+40     	; 0x4cfc <fputc+0x6e>
    4cd4:	8b 01       	movw	r16, r22
    4cd6:	ec 01       	movw	r28, r24
    4cd8:	fb 01       	movw	r30, r22
    4cda:	01 84       	ldd	r0, Z+9	; 0x09
    4cdc:	f2 85       	ldd	r31, Z+10	; 0x0a
    4cde:	e0 2d       	mov	r30, r0
    4ce0:	09 95       	icall
    4ce2:	89 2b       	or	r24, r25
    4ce4:	e1 f6       	brne	.-72     	; 0x4c9e <fputc+0x10>
    4ce6:	d8 01       	movw	r26, r16
    4ce8:	17 96       	adiw	r26, 0x07	; 7
    4cea:	8d 91       	ld	r24, X+
    4cec:	9c 91       	ld	r25, X
    4cee:	18 97       	sbiw	r26, 0x08	; 8
    4cf0:	01 96       	adiw	r24, 0x01	; 1
    4cf2:	18 96       	adiw	r26, 0x08	; 8
    4cf4:	9c 93       	st	X, r25
    4cf6:	8e 93       	st	-X, r24
    4cf8:	17 97       	sbiw	r26, 0x07	; 7
    4cfa:	ce 01       	movw	r24, r28
    4cfc:	df 91       	pop	r29
    4cfe:	cf 91       	pop	r28
    4d00:	1f 91       	pop	r17
    4d02:	0f 91       	pop	r16
    4d04:	08 95       	ret

Disassembly of section .text.avrlibc:

00005eea <sprintf>:
    5eea:	af e0       	ldi	r26, 0x0F	; 15
    5eec:	b0 e0       	ldi	r27, 0x00	; 0
    5eee:	eb e7       	ldi	r30, 0x7B	; 123
    5ef0:	ff e2       	ldi	r31, 0x2F	; 47
    5ef2:	0c 94 ce 31 	jmp	0x639c	; 0x639c <__prologue_saves__+0x1c>
    5ef6:	0e 89       	ldd	r16, Y+22	; 0x16
    5ef8:	1f 89       	ldd	r17, Y+23	; 0x17
    5efa:	86 e0       	ldi	r24, 0x06	; 6
    5efc:	8d 83       	std	Y+5, r24	; 0x05
    5efe:	1a 83       	std	Y+2, r17	; 0x02
    5f00:	09 83       	std	Y+1, r16	; 0x01
    5f02:	8f ef       	ldi	r24, 0xFF	; 255
    5f04:	9f e7       	ldi	r25, 0x7F	; 127
    5f06:	9f 83       	std	Y+7, r25	; 0x07
    5f08:	8e 83       	std	Y+6, r24	; 0x06
    5f0a:	9e 01       	movw	r18, r28
    5f0c:	25 5e       	subi	r18, 0xE5	; 229
    5f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f10:	48 8d       	ldd	r20, Y+24	; 0x18
    5f12:	59 8d       	ldd	r21, Y+25	; 0x19
    5f14:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5f16:	ce 01       	movw	r24, r28
    5f18:	01 96       	adiw	r24, 0x01	; 1
    5f1a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <vfprintf>
    5f1e:	e8 85       	ldd	r30, Y+8	; 0x08
    5f20:	f9 85       	ldd	r31, Y+9	; 0x09
    5f22:	e0 0f       	add	r30, r16
    5f24:	f1 1f       	adc	r31, r17
    5f26:	10 82       	st	Z, r1
    5f28:	2f 96       	adiw	r28, 0x0f	; 15
    5f2a:	e4 e0       	ldi	r30, 0x04	; 4
    5f2c:	0c 94 3b 32 	jmp	0x6476	; 0x6476 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00003f4c <__ultoa_invert>:
    3f4c:	fa 01       	movw	r30, r20
    3f4e:	aa 27       	eor	r26, r26
    3f50:	28 30       	cpi	r18, 0x08	; 8
    3f52:	51 f1       	breq	.+84     	; 0x3fa8 <__ultoa_invert+0x5c>
    3f54:	20 31       	cpi	r18, 0x10	; 16
    3f56:	81 f1       	breq	.+96     	; 0x3fb8 <__ultoa_invert+0x6c>
    3f58:	e8 94       	clt
    3f5a:	6f 93       	push	r22
    3f5c:	6e 7f       	andi	r22, 0xFE	; 254
    3f5e:	6e 5f       	subi	r22, 0xFE	; 254
    3f60:	7f 4f       	sbci	r23, 0xFF	; 255
    3f62:	8f 4f       	sbci	r24, 0xFF	; 255
    3f64:	9f 4f       	sbci	r25, 0xFF	; 255
    3f66:	af 4f       	sbci	r26, 0xFF	; 255
    3f68:	b1 e0       	ldi	r27, 0x01	; 1
    3f6a:	3e d0       	rcall	.+124    	; 0x3fe8 <__ultoa_invert+0x9c>
    3f6c:	b4 e0       	ldi	r27, 0x04	; 4
    3f6e:	3c d0       	rcall	.+120    	; 0x3fe8 <__ultoa_invert+0x9c>
    3f70:	67 0f       	add	r22, r23
    3f72:	78 1f       	adc	r23, r24
    3f74:	89 1f       	adc	r24, r25
    3f76:	9a 1f       	adc	r25, r26
    3f78:	a1 1d       	adc	r26, r1
    3f7a:	68 0f       	add	r22, r24
    3f7c:	79 1f       	adc	r23, r25
    3f7e:	8a 1f       	adc	r24, r26
    3f80:	91 1d       	adc	r25, r1
    3f82:	a1 1d       	adc	r26, r1
    3f84:	6a 0f       	add	r22, r26
    3f86:	71 1d       	adc	r23, r1
    3f88:	81 1d       	adc	r24, r1
    3f8a:	91 1d       	adc	r25, r1
    3f8c:	a1 1d       	adc	r26, r1
    3f8e:	20 d0       	rcall	.+64     	; 0x3fd0 <__ultoa_invert+0x84>
    3f90:	09 f4       	brne	.+2      	; 0x3f94 <__ultoa_invert+0x48>
    3f92:	68 94       	set
    3f94:	3f 91       	pop	r19
    3f96:	2a e0       	ldi	r18, 0x0A	; 10
    3f98:	26 9f       	mul	r18, r22
    3f9a:	11 24       	eor	r1, r1
    3f9c:	30 19       	sub	r19, r0
    3f9e:	30 5d       	subi	r19, 0xD0	; 208
    3fa0:	31 93       	st	Z+, r19
    3fa2:	de f6       	brtc	.-74     	; 0x3f5a <__ultoa_invert+0xe>
    3fa4:	cf 01       	movw	r24, r30
    3fa6:	08 95       	ret
    3fa8:	46 2f       	mov	r20, r22
    3faa:	47 70       	andi	r20, 0x07	; 7
    3fac:	40 5d       	subi	r20, 0xD0	; 208
    3fae:	41 93       	st	Z+, r20
    3fb0:	b3 e0       	ldi	r27, 0x03	; 3
    3fb2:	0f d0       	rcall	.+30     	; 0x3fd2 <__ultoa_invert+0x86>
    3fb4:	c9 f7       	brne	.-14     	; 0x3fa8 <__ultoa_invert+0x5c>
    3fb6:	f6 cf       	rjmp	.-20     	; 0x3fa4 <__ultoa_invert+0x58>
    3fb8:	46 2f       	mov	r20, r22
    3fba:	4f 70       	andi	r20, 0x0F	; 15
    3fbc:	40 5d       	subi	r20, 0xD0	; 208
    3fbe:	4a 33       	cpi	r20, 0x3A	; 58
    3fc0:	18 f0       	brcs	.+6      	; 0x3fc8 <__ultoa_invert+0x7c>
    3fc2:	49 5d       	subi	r20, 0xD9	; 217
    3fc4:	31 fd       	sbrc	r19, 1
    3fc6:	40 52       	subi	r20, 0x20	; 32
    3fc8:	41 93       	st	Z+, r20
    3fca:	02 d0       	rcall	.+4      	; 0x3fd0 <__ultoa_invert+0x84>
    3fcc:	a9 f7       	brne	.-22     	; 0x3fb8 <__ultoa_invert+0x6c>
    3fce:	ea cf       	rjmp	.-44     	; 0x3fa4 <__ultoa_invert+0x58>
    3fd0:	b4 e0       	ldi	r27, 0x04	; 4
    3fd2:	a6 95       	lsr	r26
    3fd4:	97 95       	ror	r25
    3fd6:	87 95       	ror	r24
    3fd8:	77 95       	ror	r23
    3fda:	67 95       	ror	r22
    3fdc:	ba 95       	dec	r27
    3fde:	c9 f7       	brne	.-14     	; 0x3fd2 <__ultoa_invert+0x86>
    3fe0:	00 97       	sbiw	r24, 0x00	; 0
    3fe2:	61 05       	cpc	r22, r1
    3fe4:	71 05       	cpc	r23, r1
    3fe6:	08 95       	ret
    3fe8:	9b 01       	movw	r18, r22
    3fea:	ac 01       	movw	r20, r24
    3fec:	0a 2e       	mov	r0, r26
    3fee:	06 94       	lsr	r0
    3ff0:	57 95       	ror	r21
    3ff2:	47 95       	ror	r20
    3ff4:	37 95       	ror	r19
    3ff6:	27 95       	ror	r18
    3ff8:	ba 95       	dec	r27
    3ffa:	c9 f7       	brne	.-14     	; 0x3fee <__ultoa_invert+0xa2>
    3ffc:	62 0f       	add	r22, r18
    3ffe:	73 1f       	adc	r23, r19
    4000:	84 1f       	adc	r24, r20
    4002:	95 1f       	adc	r25, r21
    4004:	a0 1d       	adc	r26, r0
    4006:	08 95       	ret

Disassembly of section .text.avrlibc:

000072a4 <__ctype_isfalse>:
    72a4:	99 27       	eor	r25, r25
    72a6:	88 27       	eor	r24, r24

000072a8 <__ctype_istrue>:
    72a8:	08 95       	ret

Disassembly of section .text.avrlibc:

000069f8 <eeprom_read_block>:
    69f8:	ba 01       	movw	r22, r20
    69fa:	a9 01       	movw	r20, r18
    69fc:	dc 01       	movw	r26, r24
    69fe:	cb 01       	movw	r24, r22

00006a00 <eeprom_read_blraw>:
    6a00:	fc 01       	movw	r30, r24
    6a02:	f9 99       	sbic	0x1f, 1	; 31
    6a04:	fe cf       	rjmp	.-4      	; 0x6a02 <eeprom_read_blraw+0x2>
    6a06:	06 c0       	rjmp	.+12     	; 0x6a14 <eeprom_read_blraw+0x14>
    6a08:	f2 bd       	out	0x22, r31	; 34
    6a0a:	e1 bd       	out	0x21, r30	; 33
    6a0c:	f8 9a       	sbi	0x1f, 0	; 31
    6a0e:	31 96       	adiw	r30, 0x01	; 1
    6a10:	00 b4       	in	r0, 0x20	; 32
    6a12:	0d 92       	st	X+, r0
    6a14:	41 50       	subi	r20, 0x01	; 1
    6a16:	50 40       	sbci	r21, 0x00	; 0
    6a18:	b8 f7       	brcc	.-18     	; 0x6a08 <eeprom_read_blraw+0x8>
    6a1a:	08 95       	ret

Disassembly of section .text.avrlibc:

00006f3e <eeprom_read_byte>:
    6f3e:	cb 01       	movw	r24, r22
    6f40:	f9 99       	sbic	0x1f, 1	; 31
    6f42:	fe cf       	rjmp	.-4      	; 0x6f40 <eeprom_read_byte+0x2>
    6f44:	92 bd       	out	0x22, r25	; 34
    6f46:	81 bd       	out	0x21, r24	; 33
    6f48:	f8 9a       	sbi	0x1f, 0	; 31
    6f4a:	99 27       	eor	r25, r25
    6f4c:	80 b5       	in	r24, 0x20	; 32
    6f4e:	08 95       	ret

Disassembly of section .text.avrlibc:

00007098 <eeprom_read_dword>:
    7098:	cb 01       	movw	r24, r22
    709a:	a6 e1       	ldi	r26, 0x16	; 22
    709c:	b0 e0       	ldi	r27, 0x00	; 0
    709e:	44 e0       	ldi	r20, 0x04	; 4
    70a0:	50 e0       	ldi	r21, 0x00	; 0
    70a2:	0c 94 00 35 	jmp	0x6a00	; 0x6a00 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000070a6 <eeprom_read_word>:
    70a6:	cb 01       	movw	r24, r22
    70a8:	a8 e1       	ldi	r26, 0x18	; 24
    70aa:	b0 e0       	ldi	r27, 0x00	; 0
    70ac:	42 e0       	ldi	r20, 0x02	; 2
    70ae:	50 e0       	ldi	r21, 0x00	; 0
    70b0:	0c 94 00 35 	jmp	0x6a00	; 0x6a00 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00005f74 <eeprom_update_block>:
    5f74:	cf 92       	push	r12
    5f76:	df 92       	push	r13
    5f78:	ef 92       	push	r14
    5f7a:	21 50       	subi	r18, 0x01	; 1
    5f7c:	31 09       	sbc	r19, r1
    5f7e:	c0 f0       	brcs	.+48     	; 0x5fb0 <eeprom_update_block+0x3c>
    5f80:	6b 01       	movw	r12, r22
    5f82:	e8 2e       	mov	r14, r24
    5f84:	c2 0e       	add	r12, r18
    5f86:	d3 1e       	adc	r13, r19
    5f88:	e1 1c       	adc	r14, r1
    5f8a:	ca 01       	movw	r24, r20
    5f8c:	82 0f       	add	r24, r18
    5f8e:	93 1f       	adc	r25, r19
    5f90:	42 2f       	mov	r20, r18
    5f92:	73 2f       	mov	r23, r19
    5f94:	f6 01       	movw	r30, r12
    5f96:	5e 2d       	mov	r21, r14
    5f98:	0e 94 f7 38 	call	0x71ee	; 0x71ee <__xload_1>
    5f9c:	26 2f       	mov	r18, r22
    5f9e:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <eeprom_update_r18>
    5fa2:	31 e0       	ldi	r19, 0x01	; 1
    5fa4:	c3 1a       	sub	r12, r19
    5fa6:	d1 08       	sbc	r13, r1
    5fa8:	e1 08       	sbc	r14, r1
    5faa:	41 50       	subi	r20, 0x01	; 1
    5fac:	70 40       	sbci	r23, 0x00	; 0
    5fae:	90 f7       	brcc	.-28     	; 0x5f94 <eeprom_update_block+0x20>
    5fb0:	ef 90       	pop	r14
    5fb2:	df 90       	pop	r13
    5fb4:	cf 90       	pop	r12
    5fb6:	08 95       	ret

Disassembly of section .text.avrlibc:

00006a1c <eeprom_update_byte>:
    6a1c:	26 2f       	mov	r18, r22

00006a1e <eeprom_update_r18>:
    6a1e:	f9 99       	sbic	0x1f, 1	; 31
    6a20:	fe cf       	rjmp	.-4      	; 0x6a1e <eeprom_update_r18>
    6a22:	92 bd       	out	0x22, r25	; 34
    6a24:	81 bd       	out	0x21, r24	; 33
    6a26:	f8 9a       	sbi	0x1f, 0	; 31
    6a28:	01 97       	sbiw	r24, 0x01	; 1
    6a2a:	00 b4       	in	r0, 0x20	; 32
    6a2c:	02 16       	cp	r0, r18
    6a2e:	39 f0       	breq	.+14     	; 0x6a3e <eeprom_update_r18+0x20>
    6a30:	1f ba       	out	0x1f, r1	; 31
    6a32:	20 bd       	out	0x20, r18	; 32
    6a34:	0f b6       	in	r0, 0x3f	; 63
    6a36:	f8 94       	cli
    6a38:	fa 9a       	sbi	0x1f, 2	; 31
    6a3a:	f9 9a       	sbi	0x1f, 1	; 31
    6a3c:	0f be       	out	0x3f, r0	; 63
    6a3e:	08 95       	ret

Disassembly of section .text.avrlibc:

00006d4c <eeprom_update_dword>:
    6d4c:	03 96       	adiw	r24, 0x03	; 3
    6d4e:	27 2f       	mov	r18, r23
    6d50:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <eeprom_update_r18>
    6d54:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <eeprom_update_byte>
    6d58:	25 2f       	mov	r18, r21
    6d5a:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <eeprom_update_r18>
    6d5e:	24 2f       	mov	r18, r20
    6d60:	0c 94 0f 35 	jmp	0x6a1e	; 0x6a1e <eeprom_update_r18>

Disassembly of section .text.avrlibc:

00007174 <eeprom_update_word>:
    7174:	01 96       	adiw	r24, 0x01	; 1
    7176:	27 2f       	mov	r18, r23
    7178:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <eeprom_update_r18>
    717c:	0c 94 0e 35 	jmp	0x6a1c	; 0x6a1c <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00006b6a <__mulsi3>:
    6b6a:	db 01       	movw	r26, r22
    6b6c:	8f 93       	push	r24
    6b6e:	9f 93       	push	r25
    6b70:	0e 94 de 36 	call	0x6dbc	; 0x6dbc <__muluhisi3>
    6b74:	bf 91       	pop	r27
    6b76:	af 91       	pop	r26
    6b78:	a2 9f       	mul	r26, r18
    6b7a:	80 0d       	add	r24, r0
    6b7c:	91 1d       	adc	r25, r1
    6b7e:	a3 9f       	mul	r26, r19
    6b80:	90 0d       	add	r25, r0
    6b82:	b2 9f       	mul	r27, r18
    6b84:	90 0d       	add	r25, r0
    6b86:	11 24       	eor	r1, r1
    6b88:	08 95       	ret

Disassembly of section .text.libgcc.div:

00005fb8 <__udivmodsi4>:
    5fb8:	a1 e2       	ldi	r26, 0x21	; 33
    5fba:	1a 2e       	mov	r1, r26
    5fbc:	aa 1b       	sub	r26, r26
    5fbe:	bb 1b       	sub	r27, r27
    5fc0:	fd 01       	movw	r30, r26
    5fc2:	0d c0       	rjmp	.+26     	; 0x5fde <__udivmodsi4_ep>

00005fc4 <__udivmodsi4_loop>:
    5fc4:	aa 1f       	adc	r26, r26
    5fc6:	bb 1f       	adc	r27, r27
    5fc8:	ee 1f       	adc	r30, r30
    5fca:	ff 1f       	adc	r31, r31
    5fcc:	a2 17       	cp	r26, r18
    5fce:	b3 07       	cpc	r27, r19
    5fd0:	e4 07       	cpc	r30, r20
    5fd2:	f5 07       	cpc	r31, r21
    5fd4:	20 f0       	brcs	.+8      	; 0x5fde <__udivmodsi4_ep>
    5fd6:	a2 1b       	sub	r26, r18
    5fd8:	b3 0b       	sbc	r27, r19
    5fda:	e4 0b       	sbc	r30, r20
    5fdc:	f5 0b       	sbc	r31, r21

00005fde <__udivmodsi4_ep>:
    5fde:	66 1f       	adc	r22, r22
    5fe0:	77 1f       	adc	r23, r23
    5fe2:	88 1f       	adc	r24, r24
    5fe4:	99 1f       	adc	r25, r25
    5fe6:	1a 94       	dec	r1
    5fe8:	69 f7       	brne	.-38     	; 0x5fc4 <__udivmodsi4_loop>
    5fea:	60 95       	com	r22
    5fec:	70 95       	com	r23
    5fee:	80 95       	com	r24
    5ff0:	90 95       	com	r25
    5ff2:	9b 01       	movw	r18, r22
    5ff4:	ac 01       	movw	r20, r24
    5ff6:	bd 01       	movw	r22, r26
    5ff8:	cf 01       	movw	r24, r30
    5ffa:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00006dbc <__muluhisi3>:
    6dbc:	0e 94 10 36 	call	0x6c20	; 0x6c20 <__umulhisi3>
    6dc0:	a5 9f       	mul	r26, r21
    6dc2:	90 0d       	add	r25, r0
    6dc4:	b4 9f       	mul	r27, r20
    6dc6:	90 0d       	add	r25, r0
    6dc8:	a4 9f       	mul	r26, r20
    6dca:	80 0d       	add	r24, r0
    6dcc:	91 1d       	adc	r25, r1
    6dce:	11 24       	eor	r1, r1
    6dd0:	08 95       	ret

Disassembly of section .text.libgcc:

000071ee <__xload_1>:
    71ee:	57 fd       	sbrc	r21, 7
    71f0:	60 81       	ld	r22, Z
    71f2:	57 ff       	sbrs	r21, 7
    71f4:	64 91       	lpm	r22, Z
    71f6:	08 95       	ret
