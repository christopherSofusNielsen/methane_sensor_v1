
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000466c  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005e0  00800100  00800100  0000466c  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  0000466c  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  000046c7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000009b0  00000000  00000000  00004700  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dbee  00000000  00000000  000050b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ab4  00000000  00000000  00012c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000050c5  00000000  00000000  00015752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001840  00000000  00000000  0001a818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010ab  00000000  00000000  0001c058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000054c2  00000000  00000000  0001d103  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000818  00000000  00000000  000225c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000451a  0000451a  0000464e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00022de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  000042f4  000042f4  00004428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  000041b4  000041b4  000042e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00004302  00004302  00004436  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  000041c8  000041c8  000042fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00004310  00004310  00004444  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  000041dc  000041dc  00004310  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  0000431e  0000431e  00004452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  000041f0  000041f0  00004324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  0000432c  0000432c  00004460  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  00004204  00004204  00004338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  00004484  00004484  000045b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 0000003c  000036fa  000036fa  0000382e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  00004218  00004218  0000434c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  0000448c  0000448c  000045c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  00004494  00004494  000045c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  0000449c  0000449c  000045d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  0000433a  0000433a  0000446e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  0000443e  0000443e  00004572  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000020  00003ece  00003ece  00004002  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  000044e4  000044e4  00004618  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  0000451e  0000451e  00004652  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  0000305c  0000305c  00003190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800d85  00800d85  0000466c  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000034  000039a4  000039a4  00003ad8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  000043c6  000043c6  000044fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  000043d2  000043d2  00004506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  000030aa  000030aa  000031de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800d87  00800d87  0000466c  2**0
                  ALLOC
 43 .text.start_timer 00000008  000044a4  000044a4  000045d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.stop_timer 00000006  000044ea  000044ea  0000461e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TC2_HAL_init 00000020  00003eee  00003eee  00004022  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_subscribe 00000054  00002fb8  00002fb8  000030ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_cancel 0000003a  000037ea  000037ea  0000391e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__vector_9 0000007c  00002872  00002872  000029a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .bss.cnt      00000001  00800d9d  00800d9d  0000466c  2**0
                  ALLOC
 50 .bss.cbCounter 00000001  00800d9e  00800d9e  0000466c  2**0
                  ALLOC
 51 .bss.callbacks 0000000a  00800d54  00800d54  0000466c  2**0
                  ALLOC
 52 .text.start_and_write_data 0000004c  00003146  00003146  0000327a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.read_and_stop 0000005a  00002e56  00002e56  00002f8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TWI_API_write_data 00000014  0000422c  0000422c  00004360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TWI_API_write_data_stop 0000001a  000040c8  000040c8  000041fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00003a0c  00003a0c  00003b40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_repeat_read_data_stop 00000030  00003b38  00003b38  00003c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_HAL_init 00000012  0000427c  0000427c  000043b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_HAL_start 00000048  000032bc  000032bc  000033f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_repeated_start 00000042  00003538  00003538  0000366c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_write_byte 00000020  00003f0e  00003f0e  00004042  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_read_byte_ack 00000014  00004240  00004240  00004374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_read_byte_nack 00000014  00004254  00004254  00004388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_stop 00000010  000042c4  000042c4  000043f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.copy_buffer 0000002e  00003cb8  00003cb8  00003dec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart0_hal_init 0000003c  00003736  00003736  0000386a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart0_hal_send_message 0000003c  00003772  00003772  000038a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_send_string 0000006e  00002b38  00002b38  00002c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_message_ready 0000000e  00004348  00004348  0000447c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_clear_rx_buffer 0000000a  00004448  00004448  0000457c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_read_message_as_str 00000028  00003d6a  00003d6a  00003e9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_send_break 00000046  000033dc  000033dc  00003510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_22 0000004a  000031de  000031de  00003312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__vector_20 00000074  000029e0  000029e0  00002b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .bss.rx_buffer_has_message 00000001  00800d9f  00800d9f  0000466c  2**0
                  ALLOC
 76 .bss.rx_buffer_data_len 00000001  00800da0  00800da0  0000466c  2**0
                  ALLOC
 77 .bss.tx_buffer_cursor 00000001  00800da1  00800da1  0000466c  2**0
                  ALLOC
 78 .bss.tx_buffer_data_len 00000001  00800da2  00800da2  0000466c  2**0
                  ALLOC
 79 .text.uart1_hal_init 0000003c  000037ae  000037ae  000038e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.uart1_hal_send_string 0000008a  000026de  000026de  00002812  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_30 0000004a  00003228  00003228  0000335c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__vector_28 00000074  00002a54  00002a54  00002b88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .bss.rx_buffer_has_message 00000001  00800da3  00800da3  0000466c  2**0
                  ALLOC
 84 .bss.rx_buffer_data_len 00000001  00800da4  00800da4  0000466c  2**0
                  ALLOC
 85 .bss.rx_buffer 00000096  00800c58  00800c58  0000466c  2**0
                  ALLOC
 86 .bss.tx_buffer_cursor 00000001  00800da5  00800da5  0000466c  2**0
                  ALLOC
 87 .bss.tx_buffer_data_len 00000001  00800da6  00800da6  0000466c  2**0
                  ALLOC
 88 .bss.tx_buffer 000000c8  00800b90  00800b90  0000466c  2**0
                  ALLOC
 89 .text.main    00000018  000040fc  000040fc  00004230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.calc_ppm_methane 00000096  00002520  00002520  00002654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.vect_ADC_heat_timeout 00000018  00004114  00004114  00004248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.ADC_init_sampling 00000066  00002c78  00002c78  00002dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.ADC_deinit_sampling 00000014  00004268  00004268  0000439c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.ADC_is_sampling_done 0000001c  00004020  00004020  00004154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.ADC_get_value 00000056  00002f62  00002f62  00003096  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.vect_ADC_do_sample 00000046  00003422  00003422  00003556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.ADC_start_sampling 0000000a  00004452  00004452  00004586  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.ADC_meth_sens_power_on 0000001e  00003f4e  00003f4e  00004082  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.ADC_meth_sens_power_off 00000008  000044ac  000044ac  000045e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.ADC_meth_sens_ready 00000012  0000428e  0000428e  000043c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.ADC_set_conf_parameters 00000042  0000357a  0000357a  000036ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .bss.cntPowerUpTime 00000001  00800da7  00800da7  0000466c  2**0
                  ALLOC
103 .bss._powerUpTime 00000001  00800da8  00800da8  0000466c  2**0
                  ALLOC
104 .bss.cntSamples 00000002  00800d89  00800d89  0000466c  2**0
                  ALLOC
105 .bss._data    00000002  00800d8b  00800d8b  0000466c  2**0
                  ALLOC
106 .bss._nSamples 00000002  00800d8d  00800d8d  0000466c  2**0
                  ALLOC
107 .data.PPM_factor 00000004  00800d69  00004527  0000465b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
108 .data.RRL     00000004  00800d6d  0000452b  0000465f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
109 .data.Vc      00000004  00800d71  0000452f  00004663  2**0
                  CONTENTS, ALLOC, LOAD, DATA
110 .text.EM_has_deveui 00000016  0000415c  0000415c  00004290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.EM_has_appeui 00000016  00004172  00004172  000042a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.EM_has_appkey 00000016  00004188  00004188  000042bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.EM_get_deveui 00000030  00003b68  00003b68  00003c9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.EM_get_appeui 00000030  00003b98  00003b98  00003ccc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.EM_get_appkey 00000030  00003bc8  00003bc8  00003cfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.EM_get_ppmfactor 0000001e  00003f6c  00003f6c  000040a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.EM_get_RRL 0000001e  00003f8a  00003f8a  000040be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.EM_get_Vcc 0000001e  00003fa8  00003fa8  000040dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.EM_get_collections 00000010  000042d4  000042d4  00004408  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_get_heat_up_time 0000000c  000043de  000043de  00004512  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_get_air_pump_time 0000000c  000043ea  000043ea  0000451e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_get_sp_interval 0000000c  000043f6  000043f6  0000452a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.cb_blink 00000006  000044f0  000044f0  00004624  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.blink   0000004c  00003192  00003192  000032c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.err_code 00000038  00003824  00003824  00003958  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.LED_start_try_join 0000000e  00004356  00004356  0000448a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.LED_stop_try_join 00000010  000042e4  000042e4  00004418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.LED_join_success 00000040  000035fe  000035fe  00003732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.LED_join_denied 00000008  000044b4  000044b4  000045e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.LED_conf_err 00000008  000044bc  000044bc  000045f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.LED_fatal_err 00000008  000044c4  000044c4  000045f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .bss.cbPointer 00000001  00800da9  00800da9  0000466c  2**0
                  ALLOC
133 .progmemx.data 00000058  00000340  00000340  00000474  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
134 .text.parse_err 00000058  00002f0a  00002f0a  0000303e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.JN_join_network 000002a4  00000e26  00000e26  00000f5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.set_block_uplink 00000018  0000412c  0000412c  00004260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.cb_block_uplink 0000001c  0000403c  0000403c  00004170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.LM_join_network 00000006  000044f6  000044f6  0000462a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.LM_send_uplink 0000002e  00003ce6  00003ce6  00003e1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.LM_put_to_sleep 00000006  000044fc  000044fc  00004630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.LM_wake_up 00000006  00004502  00004502  00004636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.LM_is_free 0000000a  0000445c  0000445c  00004590  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .bss.subPointer 00000001  00800daa  00800daa  0000466c  2**0
                  ALLOC
144 .bss.busy     00000001  00800dab  00800dab  0000466c  2**0
                  ALLOC
145 .bss.cnt      00000001  00800dac  00800dac  0000466c  2**0
                  ALLOC
146 .progmemx.data 00000073  000002cd  000002cd  00000401  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
147 .text.tohex   00000084  000027ee  000027ee  00002922  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.attach_ending 0000001c  00004058  00004058  0000418c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.cmd_with_ending 00000032  00003a3e  00003a3e  00003b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.sys_sleep_cmd 0000005e  00002d3e  00002d3e  00002e72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.mac_set_parameter 0000004e  000030f8  000030f8  0000322c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.mac_set_deveui 00000048  00003304  00003304  00003438  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.mac_set_appeui 00000048  0000334c  0000334c  00003480  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.mac_set_appkey 00000048  00003394  00003394  000034c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.mac_set_ADR 00000030  00003bf8  00003bf8  00003d2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.mac_tx_confirmed 000000ac  0000228c  0000228c  000023c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .progmemx.data 00000038  00000398  00000398  000004cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
158 .text.decode_tx_response 00000068  00002c10  00002c10  00002d44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.SU_send_uplink 000000f8  00001a1c  00001a1c  00001b50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .progmemx.data 00000003  000003e2  000003e2  00000516  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
161 .text.SC_put_to_sleep 00000060  00002cde  00002cde  00002e12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.SC_wake_up 00000032  00003a70  00003a70  00003ba4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.util_setPendingStates 0000000c  00004402  00004402  00004536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.util_setMatchCase 0000000c  0000440e  0000440e  00004542  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.util_strbeginswith 0000004a  00003272  00003272  000033a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.util_matchMessage 0000005c  00002dfa  00002dfa  00002f2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text.get_group_id 00000006  00004508  00004508  0000463c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 .text.set_group_id 00000006  0000450e  0000450e  00004642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.MRPP_init_group 00000032  00003aa2  00003aa2  00003bd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.MRPP_add_collection_data_INT16 00000070  00002ac8  00002ac8  00002bfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .text.MRPP_is_body_package_ready 00000022  00003e02  00003e02  00003f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.MRPP_get_ready_body_package 00000096  000025b6  000025b6  000026ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.MRPP_set_body_sent 0000000c  0000441a  0000441a  0000454e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.MRPP_get_header_package 00000022  00003e24  00003e24  00003f58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.MRPP_get_tail_package 00000022  00003e46  00003e46  00003f7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.MRPP_all_body_package_sent 0000000a  00004466  00004466  0000459a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .bss._groupId 00000001  00800dad  00800dad  0000466c  2**0
                  ALLOC
178 .text.mrpp_data_add_int16 00000092  0000264c  0000264c  00002780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.mrpp_data_get 00000030  00003c28  00003c28  00003d5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.add_data_types 000000d8  00001dd2  00001dd2  00001f06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.update_bodies 00000162  00001438  00001438  0000156c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.mrpp_state_init 000001be  000010ca  000010ca  000011fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.mrpp_state_get_header 000000a2  000023dc  000023dc  00002510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.mrpp_state_get_tail 000000a4  00002338  00002338  0000246c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.mrpp_state_set_collection 00000086  00002768  00002768  0000289c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.mrpp_state_is_body_ready 00000030  00003c58  00003c58  00003d8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.mrpp_state_all_bodies_sent 0000002a  00003d40  00003d40  00003e74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.mrpp_state_get_ready_body 0000011a  000017fc  000017fc  00001930  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.mrpp_state_set_body_sent 00000020  00003f2e  00003f2e  00004062  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.mrpp_state_get_collection_address 00000036  000038cc  000038cc  00003a00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.cb_cnt_time 00000030  00003c88  00003c88  00003dbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.PUMP_start 00000024  00003dba  00003dba  00003eee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.PUMP_is_done 0000001c  00004074  00004074  000041a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .bss.eventPointer 00000001  00800dae  00800dae  0000466c  2**0
                  ALLOC
195 .bss.cnt      00000002  00800d8f  00800d8f  0000466c  2**0
                  ALLOC
196 .bss._seconds 00000002  00800d91  00800d91  0000466c  2**0
                  ALLOC
197 .text.RTC_set_clock_out 00000050  0000300c  0000300c  00003140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.RTC_clear_wake_up_interrupt 00000034  000039d8  000039d8  00003b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.RTC_get_current_time 00000140  0000159a  0000159a  000016ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .rodata       00000005  00800d64  00004522  00004656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
201 .text.RTC_set_wake_up_interrupt_minutes 000000c4  0000204c  0000204c  00002180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.RTC_datetime_to_ts 00000122  000016da  000016da  0000180e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000003e7  000003e7  0000051b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
204 .text.bytes_2_uint 0000001a  000040e2  000040e2  00004216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.init_measurement 00000038  0000385c  0000385c  00003990  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.validate_data 00000032  00003ad4  00003ad4  00003c08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.read_value 000000a2  0000247e  0000247e  000025b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.vect_SCD_do_sample 00000046  00003468  00003468  0000359c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.SCD30_sensor_on 00000022  00003e68  00003e68  00003f9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.SCD30_sensor_off 00000008  000044cc  000044cc  00004600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.SCD30_init_sampling 00000022  00003e8a  00003e8a  00003fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.SCD30_deinit_sampling 0000000e  00004364  00004364  00004498  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.SCD30_start_sampling 0000000a  00004470  00004470  000045a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.SCD30_is_sampling_done 0000001c  00004090  00004090  000041c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .bss.cntSamples 00000002  00800d93  00800d93  0000466c  2**0
                  ALLOC
216 .bss._data    00000002  00800d95  00800d95  0000466c  2**0
                  ALLOC
217 .bss._nSamples 00000002  00800d97  00800d97  0000466c  2**0
                  ALLOC
218 .progmemx.data.READ_DATA_CMD 00000002  000003e5  000003e5  00000519  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
219 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000003d8  000003d8  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
220 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000003dd  000003dd  00000511  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
221 .text.decode_stage_response 00000016  0000419e  0000419e  000042d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.decode_join_response 0000001c  000040ac  000040ac  000041e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.decode_header_tail_response 0000001e  00003fc6  00003fc6  000040fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.read_eeprom 0000005a  00002eb0  00002eb0  00002fe4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.join_lora 00000012  000042a0  000042a0  000043d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.set_wakeup 0000000a  0000447a  0000447a  000045ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.send_header 0000003e  0000367e  0000367e  000037b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 .text.stage_0 000000c0  00002110  00002110  00002244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.stage_1 000000ec  00001c08  00001c08  00001d3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.stage_2 00000106  00001916  00001916  00001a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.stage_3 000000f4  00001b14  00001b14  00001c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .text.send_body 00000040  0000363e  0000363e  00003772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 .text.decode_body_response 00000028  00003d92  00003d92  00003ec6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.send_tail 0000003e  000036bc  000036bc  000037f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.send_msg 00000018  00004144  00004144  00004278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data 0000008f  0000023e  0000023e  00000372  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.MAINPG_start 000002fa  00000b2c  00000b2c  00000c60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .bss.samplingProcessInterval 00000001  00800daf  00800daf  0000466c  2**0
                  ALLOC
239 .data.methHeatUpTime 00000001  00800db0  00004537  0000466b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
240 .data.airPumpTime 00000002  00800d99  00004533  00004667  2**0
                  CONTENTS, ALLOC, LOAD, DATA
241 .bss.ppmx     00000004  00800d75  00800d75  0000466c  2**0
                  ALLOC
242 .bss.rrlx     00000004  00800d79  00800d79  0000466c  2**0
                  ALLOC
243 .bss.vccx     00000004  00800d7d  00800d7d  0000466c  2**0
                  ALLOC
244 .bss.cols     00000023  00800cee  00800cee  0000466c  2**0
                  ALLOC
245 .bss.appkey   00000021  00800d11  00800d11  0000466c  2**0
                  ALLOC
246 .bss.appeui   00000011  00800d32  00800d32  0000466c  2**0
                  ALLOC
247 .bss.deveui   00000011  00800d43  00800d43  0000466c  2**0
                  ALLOC
248 .bss.dt       00000006  00800d5e  00800d5e  0000466c  2**0
                  ALLOC
249 .bss.ts       00000004  00800d81  00800d81  0000466c  2**0
                  ALLOC
250 .bss.meth_data 00000258  008006e0  008006e0  0000466c  2**0
                  ALLOC
251 .bss.co2_data 00000258  00800938  00800938  0000466c  2**0
                  ALLOC
252 .data.bodyIndex 00000002  00800d9b  00004535  00004669  2**0
                  CONTENTS, ALLOC, LOAD, DATA
253 .bss.state_s3 00000001  00800db1  00800db1  0000466c  2**0
                  ALLOC
254 .bss.state_s2 00000001  00800db2  00800db2  0000466c  2**0
                  ALLOC
255 .bss.state_s1 00000001  00800db3  00800db3  0000466c  2**0
                  ALLOC
256 .bss.state_s0 00000001  00800db4  00800db4  0000466c  2**0
                  ALLOC
257 .text.calc_crc8 00000036  00003902  00003902  00003a36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
258 .text.avrlibc.fplib 0000000e  00004372  00004372  000044a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
259 .text.avrlibc.fplib 000000ce  00001f7e  00001f7e  000020b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
260 .text.avrlibc.fplib 00000008  000044d4  000044d4  00004608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
261 .text.avrlibc.fplib 000000de  00001cf4  00001cf4  00001e28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 .text.avrlibc.fplib 0000005e  00002d9c  00002d9c  00002ed0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 .text.avrlibc.fplib 0000007a  000028ee  000028ee  00002a22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
264 .text.avrlibc.fplib 0000000c  00004426  00004426  0000455a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.avrlibc.fplib 00000006  00004514  00004514  00004648  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .text.avrlibc.fplib 0000000e  00004380  00004380  000044b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
267 .text.avrlibc.fplib 0000000e  0000438e  0000438e  000044c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .text.avrlibc.fplib 00000022  00003eac  00003eac  00003fe0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 .text.avrlibc.fplib 00000044  000034f4  000034f4  00003628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.avrlibc.fplib 0000000e  0000439c  0000439c  000044d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.avrlibc.fplib 00000008  000044dc  000044dc  00004610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .text.avrlibc.fplib 000000d4  00001eaa  00001eaa  00001fde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 .progmemx.data 00000008  000003d0  000003d0  00000504  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
274 .text.avrlibc 00000744  000003e8  000003e8  0000051c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.libgcc  0000000c  00004432  00004432  00004566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.libgcc.mul 0000001e  00003fe4  00003fe4  00004118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.libgcc.prologue 00000038  00003894  00003894  000039c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.libgcc.prologue 00000036  00003938  00003938  00003a6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.avrlibc 000001b0  00001288  00001288  000013bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.avrlibc 00000032  00003b06  00003b06  00003c3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .text.avrlibc 00000042  000035bc  000035bc  000036f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
282 .text.avrlibc 0000006a  00002ba6  00002ba6  00002cda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
283 .text.avrlibc 0000002c  00003d14  00003d14  00003e48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 .text.avrlibc 0000001e  00004002  00004002  00004136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.avrlibc 00000036  0000396e  0000396e  00003aa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.avrlibc 00000078  00002968  00002968  00002a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.avrlibc 00000046  000034ae  000034ae  000035e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .text.avrlibc 000000bc  000021d0  000021d0  00002304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
289 .text.avrlibc 00000024  00003dde  00003dde  00003f12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .text.avrlibc 00000012  000042b2  000042b2  000043e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .text.avrlibc 0000000e  000043aa  000043aa  000044de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 .text.avrlibc 0000000e  000043b8  000043b8  000044ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__ctors_end>
   4:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
   8:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
   c:	0c 94 0c 21 	jmp	0x4218	; 0x4218 <__vector_3>
  10:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  14:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  18:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  1c:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  20:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  24:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__vector_9>
  28:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  2c:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  30:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  34:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__vector_13>
  38:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  3c:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  40:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__vector_16>
  44:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  48:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  4c:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  50:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__vector_20>
  54:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  58:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__vector_22>
  5c:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  60:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  64:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  68:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  6c:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  70:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__vector_28>
  74:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__bad_interrupt>
  78:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__vector_30>
  7c:	31 07       	cpc	r19, r17
  7e:	41 08       	sbc	r4, r1
  80:	50 07       	cpc	r21, r16
  82:	6e 07       	cpc	r22, r30
  84:	8e 07       	cpc	r24, r30
  86:	ae 07       	cpc	r26, r30
  88:	ce 07       	cpc	r28, r30
  8a:	ee 07       	cpc	r30, r30
  8c:	0c 08       	sbc	r0, r12
  8e:	2a 08       	sbc	r2, r10
  90:	3c 08       	sbc	r3, r12
  92:	52 08       	sbc	r5, r2
  94:	54 08       	sbc	r5, r4
  96:	c3 05       	cpc	r28, r3
  98:	dd 05       	cpc	r29, r13
  9a:	f2 05       	cpc	r31, r2
  9c:	03 06       	cpc	r0, r19
  9e:	12 06       	cpc	r1, r18
  a0:	f4 06       	cpc	r15, r20
  a2:	07 06       	cpc	r0, r23
  a4:	44 06       	cpc	r4, r20
  a6:	5b 06       	cpc	r5, r27
  a8:	50 06       	cpc	r5, r16
  aa:	24 06       	cpc	r2, r20
  ac:	66 06       	cpc	r6, r22
  ae:	72 06       	cpc	r7, r18
  b0:	7f 06       	cpc	r7, r31
  b2:	87 06       	cpc	r8, r23
  b4:	8f 06       	cpc	r8, r31
  b6:	97 06       	cpc	r9, r23
  b8:	9f 06       	cpc	r9, r31
  ba:	bb 06       	cpc	r11, r27
  bc:	c2 06       	cpc	r12, r18
  be:	cf 06       	cpc	r12, r31
  c0:	e6 06       	cpc	r14, r22
  c2:	fd 06       	cpc	r15, r29
  c4:	06 07       	cpc	r16, r22

000000c6 <.dinit>:
  c6:	01 00       	.word	0x0001	; ????
  c8:	0d 64       	ori	r16, 0x4D	; 77
  ca:	80 0d       	add	r24, r0
  cc:	64 0d       	add	r22, r4
  ce:	75 00       	.word	0x0075	; ????
  d0:	45 22       	and	r4, r21
  d2:	0d 75       	andi	r16, 0x5D	; 93
  d4:	0d 99       	sbic	0x01, 5	; 1
  d6:	80 0d       	add	r24, r0
  d8:	99 0d       	add	r25, r9
  da:	9d 00       	.word	0x009d	; ????
  dc:	45 33       	cpi	r20, 0x35	; 53
  de:	0d 9d       	mul	r16, r13
  e0:	0d b0       	in	r0, 0x0d	; 13
  e2:	80 0d       	add	r24, r0
  e4:	b0 0d       	add	r27, r0
  e6:	b1 00       	.word	0x00b1	; ????
  e8:	45 37       	cpi	r20, 0x75	; 117
  ea:	0d b1       	in	r16, 0x0d	; 13
  ec:	0d b5       	in	r16, 0x2d	; 45
  ee:	80 00       	.word	0x0080	; ????

000000f0 <__trampolines_end>:
  f0:	00 40       	sbci	r16, 0x00	; 0
  f2:	7a 10       	cpse	r7, r10
  f4:	f3 5a       	subi	r31, 0xA3	; 163
  f6:	00 a0       	ldd	r0, Z+32	; 0x20
  f8:	72 4e       	sbci	r23, 0xE2	; 226
  fa:	18 09       	sbc	r17, r8
  fc:	00 10       	cpse	r0, r0
  fe:	a5 d4       	rcall	.+2378   	; 0xa4a <__EEPROM_REGION_LENGTH__+0x24a>
 100:	e8 00       	.word	0x00e8	; ????
 102:	00 e8       	ldi	r16, 0x80	; 128
 104:	76 48       	sbci	r23, 0x86	; 134
 106:	17 00       	.word	0x0017	; ????
 108:	00 e4       	ldi	r16, 0x40	; 64
 10a:	0b 54       	subi	r16, 0x4B	; 75
 10c:	02 00       	.word	0x0002	; ????
 10e:	00 ca       	rjmp	.-3072   	; 0xfffff510 <__eeprom_end+0xff7ef510>
 110:	9a 3b       	cpi	r25, 0xBA	; 186
 112:	00 00       	nop
 114:	00 e1       	ldi	r16, 0x10	; 16
 116:	f5 05       	cpc	r31, r5
 118:	00 00       	nop
 11a:	80 96       	adiw	r24, 0x20	; 32
 11c:	98 00       	.word	0x0098	; ????
 11e:	00 00       	nop
 120:	40 42       	sbci	r20, 0x20	; 32
 122:	0f 00       	.word	0x000f	; ????
 124:	00 00       	nop
 126:	a0 86       	std	Z+8, r10	; 0x08
 128:	01 00       	.word	0x0001	; ????
 12a:	00 00       	nop
 12c:	10 27       	eor	r17, r16
 12e:	00 00       	nop
 130:	00 00       	nop
 132:	e8 03       	fmulsu	r22, r16
 134:	00 00       	nop
 136:	00 00       	nop
 138:	64 00       	.word	0x0064	; ????
 13a:	00 00       	nop
 13c:	00 00       	nop
 13e:	0a 00       	.word	0x000a	; ????
 140:	00 00       	nop
 142:	00 00       	nop
 144:	01 00       	.word	0x0001	; ????
 146:	00 00       	nop
 148:	00 00       	nop
 14a:	2c 76       	andi	r18, 0x6C	; 108
 14c:	d8 88       	ldd	r13, Y+16	; 0x10
 14e:	dc 67       	ori	r29, 0x7C	; 124
 150:	4f 08       	sbc	r4, r15
 152:	23 df       	rcall	.-442    	; 0xffffff9a <__eeprom_end+0xff7eff9a>
 154:	c1 df       	rcall	.-126    	; 0xd8 <.dinit+0x12>
 156:	ae 59       	subi	r26, 0x9E	; 158
 158:	e1 b1       	in	r30, 0x01	; 1
 15a:	b7 96       	adiw	r30, 0x27	; 39
 15c:	e5 e3       	ldi	r30, 0x35	; 53
 15e:	e4 53       	subi	r30, 0x34	; 52
 160:	c6 3a       	cpi	r28, 0xA6	; 166
 162:	e6 51       	subi	r30, 0x16	; 22
 164:	99 76       	andi	r25, 0x69	; 105
 166:	96 e8       	ldi	r25, 0x86	; 134
 168:	e6 c2       	rjmp	.+1484   	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 16a:	84 26       	eor	r8, r20
 16c:	eb 89       	ldd	r30, Y+19	; 0x13
 16e:	8c 9b       	sbis	0x11, 4	; 17
 170:	62 ed       	ldi	r22, 0xD2	; 210
 172:	40 7c       	andi	r20, 0xC0	; 192
 174:	6f fc       	.word	0xfc6f	; ????
 176:	ef bc       	out	0x2f, r14	; 47
 178:	9c 9f       	mul	r25, r28
 17a:	40 f2       	brcs	.-112    	; 0x10c <__trampolines_end+0x1c>
 17c:	ba a5       	ldd	r27, Y+42	; 0x2a
 17e:	6f a5       	ldd	r22, Y+47	; 0x2f
 180:	f4 90       	lpm	r15, Z
 182:	05 5a       	subi	r16, 0xA5	; 165
 184:	2a f7       	brpl	.-54     	; 0x150 <__trampolines_end+0x60>
 186:	5c 93       	st	X, r21
 188:	6b 6c       	ori	r22, 0xCB	; 203
 18a:	f9 67       	ori	r31, 0x79	; 121
 18c:	6d c1       	rjmp	.+730    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 18e:	1b fc       	.word	0xfc1b	; ????
 190:	e0 e4       	ldi	r30, 0x40	; 64
 192:	0d 47       	sbci	r16, 0x7D	; 125
 194:	fe f5       	brtc	.+126    	; 0x214 <__do_copy_data+0x1e>
 196:	20 e6       	ldi	r18, 0x60	; 96
 198:	b5 00       	.word	0x00b5	; ????
 19a:	d0 ed       	ldi	r29, 0xD0	; 208
 19c:	90 2e       	mov	r9, r16
 19e:	03 00       	.word	0x0003	; ????
 1a0:	94 35       	cpi	r25, 0x54	; 84
 1a2:	77 05       	cpc	r23, r7
 1a4:	00 80       	ld	r0, Z
 1a6:	84 1e       	adc	r8, r20
 1a8:	08 00       	.word	0x0008	; ????
 1aa:	00 20       	and	r0, r0
 1ac:	4e 0a       	sbc	r4, r30
 1ae:	00 00       	nop
 1b0:	00 c8       	rjmp	.-4096   	; 0xfffff1b2 <__eeprom_end+0xff7ef1b2>
 1b2:	0c 33       	cpi	r16, 0x3C	; 60
 1b4:	33 33       	cpi	r19, 0x33	; 51
 1b6:	33 0f       	add	r19, r19
 1b8:	98 6e       	ori	r25, 0xE8	; 232
 1ba:	12 83       	std	Z+2, r17	; 0x02
 1bc:	11 41       	sbci	r17, 0x11	; 17
 1be:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1c0:	21 14       	cp	r2, r1
 1c2:	89 3b       	cpi	r24, 0xB9	; 185
 1c4:	e6 55       	subi	r30, 0x56	; 86
 1c6:	16 cf       	rjmp	.-468    	; 0xfffffff4 <__eeprom_end+0xff7efff4>
 1c8:	fe e6       	ldi	r31, 0x6E	; 110
 1ca:	db 18       	sub	r13, r11
 1cc:	d1 84       	ldd	r13, Z+9	; 0x09
 1ce:	4b 38       	cpi	r20, 0x8B	; 139
 1d0:	1b f7       	brvc	.-58     	; 0x198 <__trampolines_end+0xa8>
 1d2:	7c 1d       	adc	r23, r12
 1d4:	90 1d       	adc	r25, r0
 1d6:	a4 bb       	out	0x14, r26	; 20
 1d8:	e4 24       	eor	r14, r4
 1da:	20 32       	cpi	r18, 0x20	; 32
 1dc:	84 72       	andi	r24, 0x24	; 36
 1de:	5e 22       	and	r5, r30
 1e0:	81 00       	.word	0x0081	; ????
 1e2:	c9 f1       	breq	.+114    	; 0x256 <_etext+0x18>
 1e4:	24 ec       	ldi	r18, 0xC4	; 196
 1e6:	a1 e5       	ldi	r26, 0x51	; 81
 1e8:	3d 27       	eor	r19, r29

000001ea <__ctors_end>:
 1ea:	11 24       	eor	r1, r1
 1ec:	1f be       	out	0x3f, r1	; 63
 1ee:	cf ef       	ldi	r28, 0xFF	; 255
 1f0:	d0 e1       	ldi	r29, 0x10	; 16
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	cd bf       	out	0x3d, r28	; 61

000001f6 <__do_copy_data>:
 1f6:	e6 ec       	ldi	r30, 0xC6	; 198
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	17 c0       	rjmp	.+46     	; 0x22c <__do_clear_bss+0x8>
 1fe:	b5 91       	lpm	r27, Z+
 200:	a5 91       	lpm	r26, Z+
 202:	35 91       	lpm	r19, Z+
 204:	25 91       	lpm	r18, Z+
 206:	05 91       	lpm	r16, Z+
 208:	07 fd       	sbrc	r16, 7
 20a:	0c c0       	rjmp	.+24     	; 0x224 <__do_clear_bss>
 20c:	95 91       	lpm	r25, Z+
 20e:	85 91       	lpm	r24, Z+
 210:	ef 01       	movw	r28, r30
 212:	f9 2f       	mov	r31, r25
 214:	e8 2f       	mov	r30, r24
 216:	05 90       	lpm	r0, Z+
 218:	0d 92       	st	X+, r0
 21a:	a2 17       	cp	r26, r18
 21c:	b3 07       	cpc	r27, r19
 21e:	d9 f7       	brne	.-10     	; 0x216 <__do_copy_data+0x20>
 220:	fe 01       	movw	r30, r28
 222:	04 c0       	rjmp	.+8      	; 0x22c <__do_clear_bss+0x8>

00000224 <__do_clear_bss>:
 224:	1d 92       	st	X+, r1
 226:	a2 17       	cp	r26, r18
 228:	b3 07       	cpc	r27, r19
 22a:	e1 f7       	brne	.-8      	; 0x224 <__do_clear_bss>
 22c:	ef 3e       	cpi	r30, 0xEF	; 239
 22e:	f4 07       	cpc	r31, r20
 230:	31 f7       	brne	.-52     	; 0x1fe <__do_copy_data+0x8>
 232:	0e 94 7e 20 	call	0x40fc	; 0x40fc <main>
 236:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>

Disassembly of section .text:

0000451a <__bad_interrupt>:
    451a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PM_HAL_adc_power_init:

000042f4 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    42f4:	81 b1       	in	r24, 0x01	; 1
    42f6:	88 60       	ori	r24, 0x08	; 8
    42f8:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    42fa:	82 b1       	in	r24, 0x02	; 2
    42fc:	87 7f       	andi	r24, 0xF7	; 247
    42fe:	82 b9       	out	0x02, r24	; 2
    4300:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

000041b4 <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    41b4:	88 23       	and	r24, r24
    41b6:	21 f0       	breq	.+8      	; 0x41c0 <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    41b8:	82 b1       	in	r24, 0x02	; 2
    41ba:	88 60       	ori	r24, 0x08	; 8
    41bc:	82 b9       	out	0x02, r24	; 2
    41be:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    41c0:	82 b1       	in	r24, 0x02	; 2
    41c2:	87 7f       	andi	r24, 0xF7	; 247
    41c4:	82 b9       	out	0x02, r24	; 2
    41c6:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00004302 <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    4302:	81 b1       	in	r24, 0x01	; 1
    4304:	80 62       	ori	r24, 0x20	; 32
    4306:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    4308:	82 b1       	in	r24, 0x02	; 2
    430a:	8f 7d       	andi	r24, 0xDF	; 223
    430c:	82 b9       	out	0x02, r24	; 2
    430e:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

000041c8 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    41c8:	88 23       	and	r24, r24
    41ca:	21 f0       	breq	.+8      	; 0x41d4 <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    41cc:	82 b1       	in	r24, 0x02	; 2
    41ce:	80 62       	ori	r24, 0x20	; 32
    41d0:	82 b9       	out	0x02, r24	; 2
    41d2:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    41d4:	82 b1       	in	r24, 0x02	; 2
    41d6:	8f 7d       	andi	r24, 0xDF	; 223
    41d8:	82 b9       	out	0x02, r24	; 2
    41da:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00004310 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    4310:	81 b1       	in	r24, 0x01	; 1
    4312:	80 61       	ori	r24, 0x10	; 16
    4314:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    4316:	82 b1       	in	r24, 0x02	; 2
    4318:	8f 7e       	andi	r24, 0xEF	; 239
    431a:	82 b9       	out	0x02, r24	; 2
    431c:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

000041dc <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    41dc:	88 23       	and	r24, r24
    41de:	21 f0       	breq	.+8      	; 0x41e8 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    41e0:	82 b1       	in	r24, 0x02	; 2
    41e2:	80 61       	ori	r24, 0x10	; 16
    41e4:	82 b9       	out	0x02, r24	; 2
    41e6:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    41e8:	82 b1       	in	r24, 0x02	; 2
    41ea:	8f 7e       	andi	r24, 0xEF	; 239
    41ec:	82 b9       	out	0x02, r24	; 2
    41ee:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

0000431e <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    431e:	8a b1       	in	r24, 0x0a	; 10
    4320:	80 61       	ori	r24, 0x10	; 16
    4322:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    4324:	8b b1       	in	r24, 0x0b	; 11
    4326:	8f 7e       	andi	r24, 0xEF	; 239
    4328:	8b b9       	out	0x0b, r24	; 11
    432a:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

000041f0 <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    41f0:	88 23       	and	r24, r24
    41f2:	21 f0       	breq	.+8      	; 0x41fc <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    41f4:	8b b1       	in	r24, 0x0b	; 11
    41f6:	80 61       	ori	r24, 0x10	; 16
    41f8:	8b b9       	out	0x0b, r24	; 11
    41fa:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    41fc:	8b b1       	in	r24, 0x0b	; 11
    41fe:	8f 7e       	andi	r24, 0xEF	; 239
    4200:	8b b9       	out	0x0b, r24	; 11
    4202:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

0000432c <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    432c:	81 b1       	in	r24, 0x01	; 1
    432e:	80 68       	ori	r24, 0x80	; 128
    4330:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    4332:	82 b1       	in	r24, 0x02	; 2
    4334:	8f 77       	andi	r24, 0x7F	; 127
    4336:	82 b9       	out	0x02, r24	; 2
    4338:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

00004204 <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    4204:	88 23       	and	r24, r24
    4206:	21 f0       	breq	.+8      	; 0x4210 <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    4208:	82 b1       	in	r24, 0x02	; 2
    420a:	80 68       	ori	r24, 0x80	; 128
    420c:	82 b9       	out	0x02, r24	; 2
    420e:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    4210:	82 b1       	in	r24, 0x02	; 2
    4212:	8f 77       	andi	r24, 0x7F	; 127
    4214:	82 b9       	out	0x02, r24	; 2
    4216:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00004484 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    4484:	82 b1       	in	r24, 0x02	; 2
    4486:	80 58       	subi	r24, 0x80	; 128
    4488:	82 b9       	out	0x02, r24	; 2
    448a:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

000036fa <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    36fa:	84 b1       	in	r24, 0x04	; 4
    36fc:	8b 7f       	andi	r24, 0xFB	; 251
    36fe:	84 b9       	out	0x04, r24	; 4
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    3700:	e9 e6       	ldi	r30, 0x69	; 105
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	80 81       	ld	r24, Z
    3706:	8f 7e       	andi	r24, 0xEF	; 239
    3708:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    370a:	80 81       	ld	r24, Z
    370c:	80 62       	ori	r24, 0x20	; 32
    370e:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    3710:	8d b3       	in	r24, 0x1d	; 29
    3712:	84 60       	ori	r24, 0x04	; 4
    3714:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3716:	83 b7       	in	r24, 0x33	; 51
    3718:	81 7f       	andi	r24, 0xF1	; 241
    371a:	84 60       	ori	r24, 0x04	; 4
    371c:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    371e:	83 b7       	in	r24, 0x33	; 51
    3720:	81 60       	ori	r24, 0x01	; 1
    3722:	83 bf       	out	0x33, r24	; 51
	sei();
    3724:	78 94       	sei
	sleep_cpu();
    3726:	88 95       	sleep
	sleep_disable();
    3728:	83 b7       	in	r24, 0x33	; 51
    372a:	8e 7f       	andi	r24, 0xFE	; 254
    372c:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    372e:	8d b3       	in	r24, 0x1d	; 29
    3730:	8b 7f       	andi	r24, 0xFB	; 251
    3732:	8d bb       	out	0x1d, r24	; 29
    3734:	08 95       	ret

Disassembly of section .text.__vector_3:

00004218 <__vector_3>:
}

ISR(INT2_vect){
    4218:	1f 92       	push	r1
    421a:	0f 92       	push	r0
    421c:	0f b6       	in	r0, 0x3f	; 63
    421e:	0f 92       	push	r0
    4220:	11 24       	eor	r1, r1
	
}
    4222:	0f 90       	pop	r0
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	0f 90       	pop	r0
    4228:	1f 90       	pop	r1
    422a:	18 95       	reti

Disassembly of section .text.rn2483_init:

0000448c <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    448c:	84 b1       	in	r24, 0x04	; 4
    448e:	80 61       	ori	r24, 0x10	; 16
    4490:	84 b9       	out	0x04, r24	; 4
    4492:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

00004494 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    4494:	85 b1       	in	r24, 0x05	; 5
    4496:	8f 7e       	andi	r24, 0xEF	; 239
    4498:	85 b9       	out	0x05, r24	; 5
    449a:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

0000449c <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    449c:	85 b1       	in	r24, 0x05	; 5
    449e:	80 61       	ori	r24, 0x10	; 16
    44a0:	85 b9       	out	0x05, r24	; 5
    44a2:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

0000433a <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    433a:	87 b1       	in	r24, 0x07	; 7
    433c:	8f 7b       	andi	r24, 0xBF	; 191
    433e:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    4340:	88 b1       	in	r24, 0x08	; 8
    4342:	8f 7b       	andi	r24, 0xBF	; 191
    4344:	88 b9       	out	0x08, r24	; 8
    4346:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

0000443e <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    443e:	86 b1       	in	r24, 0x06	; 6
    4440:	86 fb       	bst	r24, 6
    4442:	88 27       	eor	r24, r24
    4444:	80 f9       	bld	r24, 0
    4446:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00003ece <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    3ece:	92 e0       	ldi	r25, 0x02	; 2
    3ed0:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    3ed2:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match; //Set match value
    3ed4:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    3ed6:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    3ed8:	ee e6       	ldi	r30, 0x6E	; 110
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	80 81       	ld	r24, Z
    3ede:	82 60       	ori	r24, 0x02	; 2
    3ee0:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    3ee2:	78 94       	sei
	
	//Set callback
	_cb=cb;
    3ee4:	70 93 86 0d 	sts	0x0D86, r23	; 0x800d86 <_cb+0x1>
    3ee8:	60 93 85 0d 	sts	0x0D85, r22	; 0x800d85 <_cb>
    3eec:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

000044e4 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    44e4:	86 e0       	ldi	r24, 0x06	; 6
    44e6:	85 bd       	out	0x25, r24	; 37
    44e8:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

0000451e <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    451e:	15 bc       	out	0x25, r1	; 37
    4520:	08 95       	ret

Disassembly of section .text.__vector_16:

0000305c <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    305c:	1f 92       	push	r1
    305e:	0f 92       	push	r0
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	0f 92       	push	r0
    3064:	11 24       	eor	r1, r1
    3066:	2f 93       	push	r18
    3068:	3f 93       	push	r19
    306a:	4f 93       	push	r20
    306c:	5f 93       	push	r21
    306e:	6f 93       	push	r22
    3070:	7f 93       	push	r23
    3072:	8f 93       	push	r24
    3074:	9f 93       	push	r25
    3076:	af 93       	push	r26
    3078:	bf 93       	push	r27
    307a:	ef 93       	push	r30
    307c:	ff 93       	push	r31
	_cb();
    307e:	e0 91 85 0d 	lds	r30, 0x0D85	; 0x800d85 <_cb>
    3082:	f0 91 86 0d 	lds	r31, 0x0D86	; 0x800d86 <_cb+0x1>
    3086:	09 95       	icall
}
    3088:	ff 91       	pop	r31
    308a:	ef 91       	pop	r30
    308c:	bf 91       	pop	r27
    308e:	af 91       	pop	r26
    3090:	9f 91       	pop	r25
    3092:	8f 91       	pop	r24
    3094:	7f 91       	pop	r23
    3096:	6f 91       	pop	r22
    3098:	5f 91       	pop	r21
    309a:	4f 91       	pop	r20
    309c:	3f 91       	pop	r19
    309e:	2f 91       	pop	r18
    30a0:	0f 90       	pop	r0
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	0f 90       	pop	r0
    30a6:	1f 90       	pop	r1
    30a8:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

000039a4 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    39a4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    39a8:	28 e0       	ldi	r18, 0x08	; 8
    39aa:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    39ae:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    39b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    39b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    39ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    39be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    39c2:	ef e6       	ldi	r30, 0x6F	; 111
    39c4:	f0 e0       	ldi	r31, 0x00	; 0
    39c6:	80 81       	ld	r24, Z
    39c8:	82 60       	ori	r24, 0x02	; 2
    39ca:	80 83       	st	Z, r24
	sei();
    39cc:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    39ce:	70 93 88 0d 	sts	0x0D88, r23	; 0x800d88 <_cb+0x1>
    39d2:	60 93 87 0d 	sts	0x0D87, r22	; 0x800d87 <_cb>
    39d6:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

000043c6 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    43c6:	e1 e8       	ldi	r30, 0x81	; 129
    43c8:	f0 e0       	ldi	r31, 0x00	; 0
    43ca:	80 81       	ld	r24, Z
    43cc:	86 60       	ori	r24, 0x06	; 6
    43ce:	80 83       	st	Z, r24
    43d0:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

000043d2 <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    43d2:	e1 e8       	ldi	r30, 0x81	; 129
    43d4:	f0 e0       	ldi	r31, 0x00	; 0
    43d6:	80 81       	ld	r24, Z
    43d8:	88 7f       	andi	r24, 0xF8	; 248
    43da:	80 83       	st	Z, r24
    43dc:	08 95       	ret

Disassembly of section .text.__vector_13:

000030aa <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    30aa:	1f 92       	push	r1
    30ac:	0f 92       	push	r0
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	0f 92       	push	r0
    30b2:	11 24       	eor	r1, r1
    30b4:	2f 93       	push	r18
    30b6:	3f 93       	push	r19
    30b8:	4f 93       	push	r20
    30ba:	5f 93       	push	r21
    30bc:	6f 93       	push	r22
    30be:	7f 93       	push	r23
    30c0:	8f 93       	push	r24
    30c2:	9f 93       	push	r25
    30c4:	af 93       	push	r26
    30c6:	bf 93       	push	r27
    30c8:	ef 93       	push	r30
    30ca:	ff 93       	push	r31
	_cb();
    30cc:	e0 91 87 0d 	lds	r30, 0x0D87	; 0x800d87 <_cb>
    30d0:	f0 91 88 0d 	lds	r31, 0x0D88	; 0x800d88 <_cb+0x1>
    30d4:	09 95       	icall
    30d6:	ff 91       	pop	r31
    30d8:	ef 91       	pop	r30
    30da:	bf 91       	pop	r27
    30dc:	af 91       	pop	r26
    30de:	9f 91       	pop	r25
    30e0:	8f 91       	pop	r24
    30e2:	7f 91       	pop	r23
    30e4:	6f 91       	pop	r22
    30e6:	5f 91       	pop	r21
    30e8:	4f 91       	pop	r20
    30ea:	3f 91       	pop	r19
    30ec:	2f 91       	pop	r18
    30ee:	0f 90       	pop	r0
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	0f 90       	pop	r0
    30f4:	1f 90       	pop	r1
    30f6:	18 95       	reti

Disassembly of section .text.start_timer:

000044a4 <start_timer>:
	}
	cbCounter=0;
}

static void start_timer(){
	TCCR2B=0x07;
    44a4:	87 e0       	ldi	r24, 0x07	; 7
    44a6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    44aa:	08 95       	ret

Disassembly of section .text.stop_timer:

000044ea <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    44ea:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    44ee:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

00003eee <TC2_HAL_init>:
static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    3eee:	82 e0       	ldi	r24, 0x02	; 2
    3ef0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    3ef4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    3ef8:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
    3efc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
    3f00:	93 ef       	ldi	r25, 0xF3	; 243
    3f02:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
    3f06:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
    3f0a:	78 94       	sei
    3f0c:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00002fb8 <TC2_HAL_subscribe>:
    2fb8:	cf 93       	push	r28
    2fba:	dc 01       	movw	r26, r24
    2fbc:	60 91 9e 0d 	lds	r22, 0x0D9E	; 0x800d9e <cbCounter>
    2fc0:	65 30       	cpi	r22, 0x05	; 5
    2fc2:	00 f5       	brcc	.+64     	; 0x3004 <TC2_HAL_subscribe+0x4c>
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	15 c0       	rjmp	.+42     	; 0x2ff2 <TC2_HAL_subscribe+0x3a>
    2fc8:	29 2f       	mov	r18, r25
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	f9 01       	movw	r30, r18
    2fce:	ee 0f       	add	r30, r30
    2fd0:	ff 1f       	adc	r31, r31
    2fd2:	ec 5a       	subi	r30, 0xAC	; 172
    2fd4:	f2 4f       	sbci	r31, 0xF2	; 242
    2fd6:	40 81       	ld	r20, Z
    2fd8:	51 81       	ldd	r21, Z+1	; 0x01
    2fda:	45 2b       	or	r20, r21
    2fdc:	49 f4       	brne	.+18     	; 0x2ff0 <TC2_HAL_subscribe+0x38>
    2fde:	22 0f       	add	r18, r18
    2fe0:	33 1f       	adc	r19, r19
    2fe2:	f9 01       	movw	r30, r18
    2fe4:	ec 5a       	subi	r30, 0xAC	; 172
    2fe6:	f2 4f       	sbci	r31, 0xF2	; 242
    2fe8:	b1 83       	std	Z+1, r27	; 0x01
    2fea:	a0 83       	st	Z, r26
    2fec:	c9 2f       	mov	r28, r25
    2fee:	04 c0       	rjmp	.+8      	; 0x2ff8 <TC2_HAL_subscribe+0x40>
    2ff0:	9f 5f       	subi	r25, 0xFF	; 255
    2ff2:	95 30       	cpi	r25, 0x05	; 5
    2ff4:	48 f3       	brcs	.-46     	; 0x2fc8 <TC2_HAL_subscribe+0x10>
    2ff6:	cf ef       	ldi	r28, 0xFF	; 255
    2ff8:	6f 5f       	subi	r22, 0xFF	; 255
    2ffa:	60 93 9e 0d 	sts	0x0D9E, r22	; 0x800d9e <cbCounter>
    2ffe:	0e 94 52 22 	call	0x44a4	; 0x44a4 <start_timer>
    3002:	01 c0       	rjmp	.+2      	; 0x3006 <TC2_HAL_subscribe+0x4e>
    3004:	cf ef       	ldi	r28, 0xFF	; 255
    3006:	8c 2f       	mov	r24, r28
    3008:	cf 91       	pop	r28
    300a:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

000037ea <TC2_HAL_cancel>:
    37ea:	08 2e       	mov	r0, r24
    37ec:	00 0c       	add	r0, r0
    37ee:	99 0b       	sbc	r25, r25
    37f0:	fc 01       	movw	r30, r24
    37f2:	ee 0f       	add	r30, r30
    37f4:	ff 1f       	adc	r31, r31
    37f6:	ec 5a       	subi	r30, 0xAC	; 172
    37f8:	f2 4f       	sbci	r31, 0xF2	; 242
    37fa:	20 81       	ld	r18, Z
    37fc:	31 81       	ldd	r19, Z+1	; 0x01
    37fe:	23 2b       	or	r18, r19
    3800:	81 f0       	breq	.+32     	; 0x3822 <TC2_HAL_cancel+0x38>
    3802:	88 0f       	add	r24, r24
    3804:	99 1f       	adc	r25, r25
    3806:	fc 01       	movw	r30, r24
    3808:	ec 5a       	subi	r30, 0xAC	; 172
    380a:	f2 4f       	sbci	r31, 0xF2	; 242
    380c:	11 82       	std	Z+1, r1	; 0x01
    380e:	10 82       	st	Z, r1
    3810:	80 91 9e 0d 	lds	r24, 0x0D9E	; 0x800d9e <cbCounter>
    3814:	81 50       	subi	r24, 0x01	; 1
    3816:	80 93 9e 0d 	sts	0x0D9E, r24	; 0x800d9e <cbCounter>
    381a:	81 11       	cpse	r24, r1
    381c:	02 c0       	rjmp	.+4      	; 0x3822 <TC2_HAL_cancel+0x38>
    381e:	0e 94 75 22 	call	0x44ea	; 0x44ea <stop_timer>
    3822:	08 95       	ret

Disassembly of section .text.__vector_9:

00002872 <__vector_9>:
    2872:	1f 92       	push	r1
    2874:	0f 92       	push	r0
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	0f 92       	push	r0
    287a:	11 24       	eor	r1, r1
    287c:	2f 93       	push	r18
    287e:	3f 93       	push	r19
    2880:	4f 93       	push	r20
    2882:	5f 93       	push	r21
    2884:	6f 93       	push	r22
    2886:	7f 93       	push	r23
    2888:	8f 93       	push	r24
    288a:	9f 93       	push	r25
    288c:	af 93       	push	r26
    288e:	bf 93       	push	r27
    2890:	cf 93       	push	r28
    2892:	ef 93       	push	r30
    2894:	ff 93       	push	r31
    2896:	80 91 9d 0d 	lds	r24, 0x0D9D	; 0x800d9d <cnt>
    289a:	8f 5f       	subi	r24, 0xFF	; 255
    289c:	80 93 9d 0d 	sts	0x0D9D, r24	; 0x800d9d <cnt>
    28a0:	80 32       	cpi	r24, 0x20	; 32
    28a2:	99 f4       	brne	.+38     	; 0x28ca <__vector_9+0x58>
    28a4:	10 92 9d 0d 	sts	0x0D9D, r1	; 0x800d9d <cnt>
    28a8:	c0 e0       	ldi	r28, 0x00	; 0
    28aa:	0d c0       	rjmp	.+26     	; 0x28c6 <__vector_9+0x54>
    28ac:	ec 2f       	mov	r30, r28
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	ee 0f       	add	r30, r30
    28b2:	ff 1f       	adc	r31, r31
    28b4:	ec 5a       	subi	r30, 0xAC	; 172
    28b6:	f2 4f       	sbci	r31, 0xF2	; 242
    28b8:	01 90       	ld	r0, Z+
    28ba:	f0 81       	ld	r31, Z
    28bc:	e0 2d       	mov	r30, r0
    28be:	30 97       	sbiw	r30, 0x00	; 0
    28c0:	09 f0       	breq	.+2      	; 0x28c4 <__vector_9+0x52>
    28c2:	09 95       	icall
    28c4:	cf 5f       	subi	r28, 0xFF	; 255
    28c6:	c5 30       	cpi	r28, 0x05	; 5
    28c8:	88 f3       	brcs	.-30     	; 0x28ac <__vector_9+0x3a>
    28ca:	ff 91       	pop	r31
    28cc:	ef 91       	pop	r30
    28ce:	cf 91       	pop	r28
    28d0:	bf 91       	pop	r27
    28d2:	af 91       	pop	r26
    28d4:	9f 91       	pop	r25
    28d6:	8f 91       	pop	r24
    28d8:	7f 91       	pop	r23
    28da:	6f 91       	pop	r22
    28dc:	5f 91       	pop	r21
    28de:	4f 91       	pop	r20
    28e0:	3f 91       	pop	r19
    28e2:	2f 91       	pop	r18
    28e4:	0f 90       	pop	r0
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	0f 90       	pop	r0
    28ea:	1f 90       	pop	r1
    28ec:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00003146 <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3146:	cf 92       	push	r12
    3148:	df 92       	push	r13
    314a:	ef 92       	push	r14
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	6a 01       	movw	r12, r20
    3152:	e6 2e       	mov	r14, r22
    3154:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    3156:	60 e0       	ldi	r22, 0x00	; 0
    3158:	0e 94 5e 19 	call	0x32bc	; 0x32bc <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    315c:	81 11       	cpse	r24, r1
    315e:	13 c0       	rjmp	.+38     	; 0x3186 <start_and_write_data+0x40>
    3160:	c0 e0       	ldi	r28, 0x00	; 0
    3162:	0e c0       	rjmp	.+28     	; 0x3180 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    3164:	ae 2d       	mov	r26, r14
    3166:	c6 01       	movw	r24, r12
    3168:	8c 0f       	add	r24, r28
    316a:	91 1d       	adc	r25, r1
    316c:	a1 1d       	adc	r26, r1
    316e:	fc 01       	movw	r30, r24
    3170:	84 91       	lpm	r24, Z
    3172:	a7 fd       	sbrc	r26, 7
    3174:	80 81       	ld	r24, Z
    3176:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    317a:	81 11       	cpse	r24, r1
    317c:	04 c0       	rjmp	.+8      	; 0x3186 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    317e:	cf 5f       	subi	r28, 0xFF	; 255
    3180:	cd 17       	cp	r28, r29
    3182:	80 f3       	brcs	.-32     	; 0x3164 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    3184:	80 e0       	ldi	r24, 0x00	; 0
}
    3186:	df 91       	pop	r29
    3188:	cf 91       	pop	r28
    318a:	ef 90       	pop	r14
    318c:	df 90       	pop	r13
    318e:	cf 90       	pop	r12
    3190:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002e56 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2e56:	ef 92       	push	r14
    2e58:	ff 92       	push	r15
    2e5a:	0f 93       	push	r16
    2e5c:	1f 93       	push	r17
    2e5e:	cf 93       	push	r28
    2e60:	df 93       	push	r29
    2e62:	8c 01       	movw	r16, r24
    2e64:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2e66:	c0 e0       	ldi	r28, 0x00	; 0
    2e68:	08 c0       	rjmp	.+16     	; 0x2e7a <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2e6a:	78 01       	movw	r14, r16
    2e6c:	ec 0e       	add	r14, r28
    2e6e:	f1 1c       	adc	r15, r1
    2e70:	0e 94 20 21 	call	0x4240	; 0x4240 <TWI_HAL_read_byte_ack>
    2e74:	f7 01       	movw	r30, r14
    2e76:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2e78:	cf 5f       	subi	r28, 0xFF	; 255
    2e7a:	2c 2f       	mov	r18, r28
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	8d 2f       	mov	r24, r29
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	28 17       	cp	r18, r24
    2e86:	39 07       	cpc	r19, r25
    2e88:	84 f3       	brlt	.-32     	; 0x2e6a <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2e8a:	8d 2f       	mov	r24, r29
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	e8 01       	movw	r28, r16
    2e92:	c8 0f       	add	r28, r24
    2e94:	d9 1f       	adc	r29, r25
    2e96:	0e 94 2a 21 	call	0x4254	; 0x4254 <TWI_HAL_read_byte_nack>
    2e9a:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2e9c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

0000422c <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    422c:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    422e:	0e 94 a3 18 	call	0x3146	; 0x3146 <start_and_write_data>
    4232:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    4234:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    4236:	0e 94 62 21 	call	0x42c4	; 0x42c4 <TWI_HAL_stop>
	}
	return status;
}
    423a:	8c 2f       	mov	r24, r28
    423c:	cf 91       	pop	r28
    423e:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

000040c8 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    40c8:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    40ca:	0e 94 a3 18 	call	0x3146	; 0x3146 <start_and_write_data>
    40ce:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    40d0:	0e 94 62 21 	call	0x42c4	; 0x42c4 <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    40d4:	c1 11       	cpse	r28, r1
    40d6:	02 c0       	rjmp	.+4      	; 0x40dc <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	01 c0       	rjmp	.+2      	; 0x40de <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    40dc:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    40de:	cf 91       	pop	r28
    40e0:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00003a0c <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	8b 01       	movw	r16, r22
    3a16:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    3a18:	61 e0       	ldi	r22, 0x01	; 1
    3a1a:	0e 94 5e 19 	call	0x32bc	; 0x32bc <TWI_HAL_start>
    3a1e:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3a20:	88 23       	and	r24, r24
    3a22:	21 f0       	breq	.+8      	; 0x3a2c <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    3a24:	0e 94 62 21 	call	0x42c4	; 0x42c4 <TWI_HAL_stop>
		return status;	
    3a28:	8c 2f       	mov	r24, r28
    3a2a:	04 c0       	rjmp	.+8      	; 0x3a34 <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    3a2c:	6d 2f       	mov	r22, r29
    3a2e:	c8 01       	movw	r24, r16
    3a30:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <read_and_stop>
	
}
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00003b38 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	8b 01       	movw	r16, r22
    3b42:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    3b44:	0e 94 9c 1a 	call	0x3538	; 0x3538 <TWI_HAL_repeated_start>
    3b48:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3b4a:	88 23       	and	r24, r24
    3b4c:	21 f0       	breq	.+8      	; 0x3b56 <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    3b4e:	0e 94 62 21 	call	0x42c4	; 0x42c4 <TWI_HAL_stop>
		return status;
    3b52:	8c 2f       	mov	r24, r28
    3b54:	04 c0       	rjmp	.+8      	; 0x3b5e <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    3b56:	6d 2f       	mov	r22, r29
    3b58:	c8 01       	movw	r24, r16
    3b5a:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <read_and_stop>
	
}
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

0000427c <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    427c:	80 e2       	ldi	r24, 0x20	; 32
    427e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    4282:	e9 eb       	ldi	r30, 0xB9	; 185
    4284:	f0 e0       	ldi	r31, 0x00	; 0
    4286:	80 81       	ld	r24, Z
    4288:	8c 7f       	andi	r24, 0xFC	; 252
    428a:	80 83       	st	Z, r24
    428c:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

000032bc <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	88 0f       	add	r24, r24
    32c0:	99 1f       	adc	r25, r25
    32c2:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    32c4:	84 ea       	ldi	r24, 0xA4	; 164
    32c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    32ca:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    32ce:	99 23       	and	r25, r25
    32d0:	e4 f7       	brge	.-8      	; 0x32ca <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    32d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    32d6:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    32d8:	88 30       	cpi	r24, 0x08	; 8
    32da:	99 f4       	brne	.+38     	; 0x3302 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    32dc:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    32e0:	84 e8       	ldi	r24, 0x84	; 132
    32e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    32e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    32ea:	88 23       	and	r24, r24
    32ec:	e4 f7       	brge	.-8      	; 0x32e6 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    32ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    32f2:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    32f4:	88 31       	cpi	r24, 0x18	; 24
    32f6:	21 f0       	breq	.+8      	; 0x3300 <TWI_HAL_start+0x44>
    32f8:	80 34       	cpi	r24, 0x40	; 64
    32fa:	19 f4       	brne	.+6      	; 0x3302 <TWI_HAL_start+0x46>
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	08 95       	ret
    3300:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3302:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

00003538 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	88 0f       	add	r24, r24
    353c:	99 1f       	adc	r25, r25
    353e:	28 2f       	mov	r18, r24
    3540:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    3542:	84 ea       	ldi	r24, 0xA4	; 164
    3544:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3548:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    354c:	99 23       	and	r25, r25
    354e:	e4 f7       	brge	.-8      	; 0x3548 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    3550:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3554:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    3556:	80 31       	cpi	r24, 0x10	; 16
    3558:	79 f4       	brne	.+30     	; 0x3578 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    355a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    355e:	84 e8       	ldi	r24, 0x84	; 132
    3560:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    3564:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3568:	88 23       	and	r24, r24
    356a:	e4 f7       	brge	.-8      	; 0x3564 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    356c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3570:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    3572:	80 34       	cpi	r24, 0x40	; 64
    3574:	09 f4       	brne	.+2      	; 0x3578 <TWI_HAL_repeated_start+0x40>
    3576:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3578:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00003f0e <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    3f0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3f12:	84 e8       	ldi	r24, 0x84	; 132
    3f14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3f18:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3f1c:	88 23       	and	r24, r24
    3f1e:	e4 f7       	brge	.-8      	; 0x3f18 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    3f20:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3f24:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3f26:	88 32       	cpi	r24, 0x28	; 40
    3f28:	09 f4       	brne	.+2      	; 0x3f2c <TWI_HAL_write_byte+0x1e>
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3f2c:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00004240 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    4240:	84 ec       	ldi	r24, 0xC4	; 196
    4242:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    4246:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    424a:	88 23       	and	r24, r24
    424c:	e4 f7       	brge	.-8      	; 0x4246 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    424e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    4252:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00004254 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    4254:	84 e8       	ldi	r24, 0x84	; 132
    4256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    425a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    425e:	88 23       	and	r24, r24
    4260:	e4 f7       	brge	.-8      	; 0x425a <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    4262:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    4266:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

000042c4 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    42c4:	84 e9       	ldi	r24, 0x94	; 148
    42c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    42ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    42ce:	84 fd       	sbrc	r24, 4
    42d0:	fc cf       	rjmp	.-8      	; 0x42ca <TWI_HAL_stop+0x6>
}
    42d2:	08 95       	ret

Disassembly of section .text.copy_buffer:

00003cb8 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3cb8:	bc 01       	movw	r22, r24
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	09 c0       	rjmp	.+18     	; 0x3cd0 <copy_buffer+0x18>
    3cbe:	fb 01       	movw	r30, r22
    3cc0:	e9 0f       	add	r30, r25
    3cc2:	f1 1d       	adc	r31, r1
    3cc4:	da 01       	movw	r26, r20
    3cc6:	a0 50       	subi	r26, 0x00	; 0
    3cc8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cca:	2c 91       	ld	r18, X
    3ccc:	20 83       	st	Z, r18
    3cce:	9f 5f       	subi	r25, 0xFF	; 255
    3cd0:	49 2f       	mov	r20, r25
    3cd2:	50 e0       	ldi	r21, 0x00	; 0
    3cd4:	20 91 a0 0d 	lds	r18, 0x0DA0	; 0x800da0 <rx_buffer_data_len>
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	22 50       	subi	r18, 0x02	; 2
    3cdc:	31 09       	sbc	r19, r1
    3cde:	42 17       	cp	r20, r18
    3ce0:	53 07       	cpc	r21, r19
    3ce2:	6c f3       	brlt	.-38     	; 0x3cbe <copy_buffer+0x6>
    3ce4:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00003736 <uart0_hal_init>:
    3736:	e1 ec       	ldi	r30, 0xC1	; 193
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	80 81       	ld	r24, Z
    373c:	80 61       	ori	r24, 0x10	; 16
    373e:	80 83       	st	Z, r24
    3740:	80 81       	ld	r24, Z
    3742:	88 60       	ori	r24, 0x08	; 8
    3744:	80 83       	st	Z, r24
    3746:	80 81       	ld	r24, Z
    3748:	80 68       	ori	r24, 0x80	; 128
    374a:	80 83       	st	Z, r24
    374c:	80 81       	ld	r24, Z
    374e:	80 64       	ori	r24, 0x40	; 64
    3750:	80 83       	st	Z, r24
    3752:	e0 ec       	ldi	r30, 0xC0	; 192
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	80 81       	ld	r24, Z
    3758:	82 60       	ori	r24, 0x02	; 2
    375a:	80 83       	st	Z, r24
    375c:	86 e0       	ldi	r24, 0x06	; 6
    375e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    3762:	80 e1       	ldi	r24, 0x10	; 16
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    376a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    376e:	78 94       	sei
    3770:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00003772 <uart0_hal_send_message>:
    3772:	dc 01       	movw	r26, r24
    3774:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <tx_buffer_data_len>
    3778:	81 11       	cpse	r24, r1
    377a:	fc cf       	rjmp	.-8      	; 0x3774 <uart0_hal_send_message+0x2>
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	0b c0       	rjmp	.+22     	; 0x3796 <uart0_hal_send_message+0x24>
    3780:	29 2f       	mov	r18, r25
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	fd 01       	movw	r30, r26
    3786:	e2 0f       	add	r30, r18
    3788:	f3 1f       	adc	r31, r19
    378a:	40 81       	ld	r20, Z
    378c:	f9 01       	movw	r30, r18
    378e:	ea 56       	subi	r30, 0x6A	; 106
    3790:	fe 4f       	sbci	r31, 0xFE	; 254
    3792:	40 83       	st	Z, r20
    3794:	9f 5f       	subi	r25, 0xFF	; 255
    3796:	96 17       	cp	r25, r22
    3798:	98 f3       	brcs	.-26     	; 0x3780 <uart0_hal_send_message+0xe>
    379a:	60 93 a2 0d 	sts	0x0DA2, r22	; 0x800da2 <tx_buffer_data_len>
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	80 93 a1 0d 	sts	0x0DA1, r24	; 0x800da1 <tx_buffer_cursor>
    37a4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    37a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    37ac:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002b38 <uart0_hal_send_string>:
    2b38:	6f 92       	push	r6
    2b3a:	7f 92       	push	r7
    2b3c:	8f 92       	push	r8
    2b3e:	cf 92       	push	r12
    2b40:	df 92       	push	r13
    2b42:	ef 92       	push	r14
    2b44:	3b 01       	movw	r6, r22
    2b46:	88 2e       	mov	r8, r24
    2b48:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <tx_buffer_data_len>
    2b4c:	81 11       	cpse	r24, r1
    2b4e:	fc cf       	rjmp	.-8      	; 0x2b48 <uart0_hal_send_string+0x10>
    2b50:	88 2d       	mov	r24, r8
    2b52:	b3 01       	movw	r22, r6
    2b54:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <strlen>
    2b58:	68 2f       	mov	r22, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	12 c0       	rjmp	.+36     	; 0x2b82 <uart0_hal_send_string+0x4a>
    2b5e:	29 2f       	mov	r18, r25
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	e8 2c       	mov	r14, r8
    2b64:	63 01       	movw	r12, r6
    2b66:	c2 0e       	add	r12, r18
    2b68:	d3 1e       	adc	r13, r19
    2b6a:	e1 1c       	adc	r14, r1
    2b6c:	37 fd       	sbrc	r19, 7
    2b6e:	ea 94       	dec	r14
    2b70:	f6 01       	movw	r30, r12
    2b72:	44 91       	lpm	r20, Z
    2b74:	e7 fc       	sbrc	r14, 7
    2b76:	40 81       	ld	r20, Z
    2b78:	f9 01       	movw	r30, r18
    2b7a:	ea 56       	subi	r30, 0x6A	; 106
    2b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b7e:	40 83       	st	Z, r20
    2b80:	9f 5f       	subi	r25, 0xFF	; 255
    2b82:	96 17       	cp	r25, r22
    2b84:	60 f3       	brcs	.-40     	; 0x2b5e <uart0_hal_send_string+0x26>
    2b86:	80 93 a2 0d 	sts	0x0DA2, r24	; 0x800da2 <tx_buffer_data_len>
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	80 93 a1 0d 	sts	0x0DA1, r24	; 0x800da1 <tx_buffer_cursor>
    2b90:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    2b94:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2b98:	ef 90       	pop	r14
    2b9a:	df 90       	pop	r13
    2b9c:	cf 90       	pop	r12
    2b9e:	8f 90       	pop	r8
    2ba0:	7f 90       	pop	r7
    2ba2:	6f 90       	pop	r6
    2ba4:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00004348 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    4348:	90 91 9f 0d 	lds	r25, 0x0D9F	; 0x800d9f <rx_buffer_has_message>
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	91 11       	cpse	r25, r1
    4350:	01 c0       	rjmp	.+2      	; 0x4354 <uart0_hal_message_ready+0xc>
    4352:	80 e0       	ldi	r24, 0x00	; 0
}
    4354:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00004448 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    4448:	10 92 9f 0d 	sts	0x0D9F, r1	; 0x800d9f <rx_buffer_has_message>
	rx_buffer_data_len=0;
    444c:	10 92 a0 0d 	sts	0x0DA0, r1	; 0x800da0 <rx_buffer_data_len>
    4450:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003d6a <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    3d6a:	0f 93       	push	r16
    3d6c:	1f 93       	push	r17
    3d6e:	cf 93       	push	r28
    3d70:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    3d72:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    3d76:	c0 91 a0 0d 	lds	r28, 0x0DA0	; 0x800da0 <rx_buffer_data_len>
    3d7a:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	ec 0f       	add	r30, r28
    3d80:	f1 1d       	adc	r31, r1
    3d82:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    3d84:	0e 94 24 22 	call	0x4448	; 0x4448 <uart0_hal_clear_rx_buffer>
	return len;
}
    3d88:	8c 2f       	mov	r24, r28
    3d8a:	cf 91       	pop	r28
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

000033dc <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    33dc:	cf 93       	push	r28
    33de:	df 93       	push	r29
    33e0:	1f 92       	push	r1
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    33e6:	9a b1       	in	r25, 0x0a	; 10
    33e8:	92 60       	ori	r25, 0x02	; 2
    33ea:	9a b9       	out	0x0a, r25	; 10
    33ec:	e1 ec       	ldi	r30, 0xC1	; 193
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	90 81       	ld	r25, Z
    33f2:	97 7f       	andi	r25, 0xF7	; 247
    33f4:	90 83       	st	Z, r25
    33f6:	9b b1       	in	r25, 0x0b	; 11
    33f8:	9d 7f       	andi	r25, 0xFD	; 253
    33fa:	9b b9       	out	0x0b, r25	; 11
    33fc:	af e9       	ldi	r26, 0x9F	; 159
    33fe:	bf e0       	ldi	r27, 0x0F	; 15
    3400:	11 97       	sbiw	r26, 0x01	; 1
    3402:	f1 f7       	brne	.-4      	; 0x3400 <uart0_hal_send_break+0x24>
    3404:	00 c0       	rjmp	.+0      	; 0x3406 <uart0_hal_send_break+0x2a>
    3406:	00 00       	nop
    3408:	90 81       	ld	r25, Z
    340a:	98 60       	ori	r25, 0x08	; 8
    340c:	90 83       	st	Z, r25
    340e:	89 83       	std	Y+1, r24	; 0x01
    3410:	61 e0       	ldi	r22, 0x01	; 1
    3412:	ce 01       	movw	r24, r28
    3414:	01 96       	adiw	r24, 0x01	; 1
    3416:	0e 94 b9 1b 	call	0x3772	; 0x3772 <uart0_hal_send_message>
    341a:	0f 90       	pop	r0
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	08 95       	ret

Disassembly of section .text.__vector_22:

000031de <__vector_22>:
    31de:	1f 92       	push	r1
    31e0:	0f 92       	push	r0
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	0f 92       	push	r0
    31e6:	11 24       	eor	r1, r1
    31e8:	8f 93       	push	r24
    31ea:	ef 93       	push	r30
    31ec:	ff 93       	push	r31
    31ee:	e0 91 a1 0d 	lds	r30, 0x0DA1	; 0x800da1 <tx_buffer_cursor>
    31f2:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <tx_buffer_data_len>
    31f6:	e8 17       	cp	r30, r24
    31f8:	58 f4       	brcc	.+22     	; 0x3210 <__vector_22+0x32>
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	8e 0f       	add	r24, r30
    31fe:	80 93 a1 0d 	sts	0x0DA1, r24	; 0x800da1 <tx_buffer_cursor>
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	ea 56       	subi	r30, 0x6A	; 106
    3206:	fe 4f       	sbci	r31, 0xFE	; 254
    3208:	80 81       	ld	r24, Z
    320a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    320e:	04 c0       	rjmp	.+8      	; 0x3218 <__vector_22+0x3a>
    3210:	10 92 a1 0d 	sts	0x0DA1, r1	; 0x800da1 <tx_buffer_cursor>
    3214:	10 92 a2 0d 	sts	0x0DA2, r1	; 0x800da2 <tx_buffer_data_len>
    3218:	ff 91       	pop	r31
    321a:	ef 91       	pop	r30
    321c:	8f 91       	pop	r24
    321e:	0f 90       	pop	r0
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	0f 90       	pop	r0
    3224:	1f 90       	pop	r1
    3226:	18 95       	reti

Disassembly of section .text.__vector_20:

000029e0 <__vector_20>:
    29e0:	1f 92       	push	r1
    29e2:	0f 92       	push	r0
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	0f 92       	push	r0
    29e8:	11 24       	eor	r1, r1
    29ea:	2f 93       	push	r18
    29ec:	8f 93       	push	r24
    29ee:	9f 93       	push	r25
    29f0:	ef 93       	push	r30
    29f2:	ff 93       	push	r31
    29f4:	80 91 9f 0d 	lds	r24, 0x0D9F	; 0x800d9f <rx_buffer_has_message>
    29f8:	81 11       	cpse	r24, r1
    29fa:	0e c0       	rjmp	.+28     	; 0x2a18 <__vector_20+0x38>
    29fc:	e0 91 a0 0d 	lds	r30, 0x0DA0	; 0x800da0 <rx_buffer_data_len>
    2a00:	e6 39       	cpi	r30, 0x96	; 150
    2a02:	50 f4       	brcc	.+20     	; 0x2a18 <__vector_20+0x38>
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	8e 0f       	add	r24, r30
    2a08:	80 93 a0 0d 	sts	0x0DA0, r24	; 0x800da0 <rx_buffer_data_len>
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2a12:	e0 50       	subi	r30, 0x00	; 0
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	80 83       	st	Z, r24
    2a18:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <rx_buffer_data_len>
    2a1c:	83 30       	cpi	r24, 0x03	; 3
    2a1e:	80 f0       	brcs	.+32     	; 0x2a40 <__vector_20+0x60>
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	fc 01       	movw	r30, r24
    2a24:	e1 50       	subi	r30, 0x01	; 1
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	20 81       	ld	r18, Z
    2a2a:	2a 30       	cpi	r18, 0x0A	; 10
    2a2c:	49 f4       	brne	.+18     	; 0x2a40 <__vector_20+0x60>
    2a2e:	fc 01       	movw	r30, r24
    2a30:	e2 50       	subi	r30, 0x02	; 2
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	8d 30       	cpi	r24, 0x0D	; 13
    2a38:	19 f4       	brne	.+6      	; 0x2a40 <__vector_20+0x60>
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	80 93 9f 0d 	sts	0x0D9F, r24	; 0x800d9f <rx_buffer_has_message>
    2a40:	ff 91       	pop	r31
    2a42:	ef 91       	pop	r30
    2a44:	9f 91       	pop	r25
    2a46:	8f 91       	pop	r24
    2a48:	2f 91       	pop	r18
    2a4a:	0f 90       	pop	r0
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	0f 90       	pop	r0
    2a50:	1f 90       	pop	r1
    2a52:	18 95       	reti

Disassembly of section .text.uart1_hal_init:

000037ae <uart1_hal_init>:
static uint8_t rx_buffer[UART1_RX_BUFF_LENGTH];
static uint8_t rx_buffer_data_len=0;
static uint8_t rx_buffer_has_message=0;

void uart1_hal_init(){
	set_bit(UCSR1B, 4); //Enable Rx
    37ae:	e9 ec       	ldi	r30, 0xC9	; 201
    37b0:	f0 e0       	ldi	r31, 0x00	; 0
    37b2:	80 81       	ld	r24, Z
    37b4:	80 61       	ori	r24, 0x10	; 16
    37b6:	80 83       	st	Z, r24
	set_bit(UCSR1B, 3); //Enable Tx
    37b8:	80 81       	ld	r24, Z
    37ba:	88 60       	ori	r24, 0x08	; 8
    37bc:	80 83       	st	Z, r24
	set_bit(UCSR1B, 7); //interrupt Rx complete
    37be:	80 81       	ld	r24, Z
    37c0:	80 68       	ori	r24, 0x80	; 128
    37c2:	80 83       	st	Z, r24
	set_bit(UCSR1B, 6); //interrupt Tx complete
    37c4:	80 81       	ld	r24, Z
    37c6:	80 64       	ori	r24, 0x40	; 64
    37c8:	80 83       	st	Z, r24
	set_bit(UCSR1A, 1); //Set double speed
    37ca:	e8 ec       	ldi	r30, 0xC8	; 200
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	82 60       	ori	r24, 0x02	; 2
    37d2:	80 83       	st	Z, r24
	UCSR1C = 0b00000110; //Async, none parity, 1 stop bit, 8 databit
    37d4:	86 e0       	ldi	r24, 0x06	; 6
    37d6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
	UBRR1=UART1_BAUDRATE; //set baudrate
    37da:	80 e1       	ldi	r24, 0x10	; 16
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    37e2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
	sei();
    37e6:	78 94       	sei
    37e8:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

000026de <uart1_hal_send_string>:
static void copy_buffer(uint8_t msg[]){
	for (uint8_t i=0; i<rx_buffer_data_len-2; i++)
	{
		msg[i]=rx_buffer[i];
	}
}
    26de:	6f 92       	push	r6
    26e0:	7f 92       	push	r7
    26e2:	8f 92       	push	r8
    26e4:	cf 92       	push	r12
    26e6:	df 92       	push	r13
    26e8:	ef 92       	push	r14
    26ea:	3b 01       	movw	r6, r22
    26ec:	88 2e       	mov	r8, r24
    26ee:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <tx_buffer_data_len>
    26f2:	81 11       	cpse	r24, r1
    26f4:	fc cf       	rjmp	.-8      	; 0x26ee <uart1_hal_send_string+0x10>
    26f6:	88 2d       	mov	r24, r8
    26f8:	b3 01       	movw	r22, r6
    26fa:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <strlen>
    26fe:	bc 01       	movw	r22, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	12 c0       	rjmp	.+36     	; 0x2728 <uart1_hal_send_string+0x4a>
    2704:	29 2f       	mov	r18, r25
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	e8 2c       	mov	r14, r8
    270a:	63 01       	movw	r12, r6
    270c:	c4 0e       	add	r12, r20
    270e:	d5 1e       	adc	r13, r21
    2710:	e1 1c       	adc	r14, r1
    2712:	57 fd       	sbrc	r21, 7
    2714:	ea 94       	dec	r14
    2716:	f6 01       	movw	r30, r12
    2718:	44 91       	lpm	r20, Z
    271a:	e7 fc       	sbrc	r14, 7
    271c:	40 81       	ld	r20, Z
    271e:	f9 01       	movw	r30, r18
    2720:	e0 57       	subi	r30, 0x70	; 112
    2722:	f4 4f       	sbci	r31, 0xF4	; 244
    2724:	40 83       	st	Z, r20
    2726:	9f 5f       	subi	r25, 0xFF	; 255
    2728:	49 2f       	mov	r20, r25
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	46 17       	cp	r20, r22
    272e:	57 07       	cpc	r21, r23
    2730:	48 f3       	brcs	.-46     	; 0x2704 <uart1_hal_send_string+0x26>
    2732:	fb 01       	movw	r30, r22
    2734:	e0 57       	subi	r30, 0x70	; 112
    2736:	f4 4f       	sbci	r31, 0xF4	; 244
    2738:	8d e0       	ldi	r24, 0x0D	; 13
    273a:	80 83       	st	Z, r24
    273c:	fb 01       	movw	r30, r22
    273e:	ef 56       	subi	r30, 0x6F	; 111
    2740:	f4 4f       	sbci	r31, 0xF4	; 244
    2742:	8a e0       	ldi	r24, 0x0A	; 10
    2744:	80 83       	st	Z, r24
    2746:	6e 5f       	subi	r22, 0xFE	; 254
    2748:	60 93 a6 0d 	sts	0x0DA6, r22	; 0x800da6 <tx_buffer_data_len>
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	80 93 a5 0d 	sts	0x0DA5, r24	; 0x800da5 <tx_buffer_cursor>
    2752:	80 91 90 0b 	lds	r24, 0x0B90	; 0x800b90 <tx_buffer>
    2756:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    275a:	ef 90       	pop	r14
    275c:	df 90       	pop	r13
    275e:	cf 90       	pop	r12
    2760:	8f 90       	pop	r8
    2762:	7f 90       	pop	r7
    2764:	6f 90       	pop	r6
    2766:	08 95       	ret

Disassembly of section .text.__vector_30:

00003228 <__vector_30>:
    3228:	1f 92       	push	r1
    322a:	0f 92       	push	r0
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	0f 92       	push	r0
    3230:	11 24       	eor	r1, r1
    3232:	8f 93       	push	r24
    3234:	ef 93       	push	r30
    3236:	ff 93       	push	r31
    3238:	e0 91 a5 0d 	lds	r30, 0x0DA5	; 0x800da5 <tx_buffer_cursor>
    323c:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <tx_buffer_data_len>
    3240:	e8 17       	cp	r30, r24
    3242:	58 f4       	brcc	.+22     	; 0x325a <__vector_30+0x32>
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	8e 0f       	add	r24, r30
    3248:	80 93 a5 0d 	sts	0x0DA5, r24	; 0x800da5 <tx_buffer_cursor>
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	e0 57       	subi	r30, 0x70	; 112
    3250:	f4 4f       	sbci	r31, 0xF4	; 244
    3252:	80 81       	ld	r24, Z
    3254:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    3258:	04 c0       	rjmp	.+8      	; 0x3262 <__vector_30+0x3a>
    325a:	10 92 a5 0d 	sts	0x0DA5, r1	; 0x800da5 <tx_buffer_cursor>
    325e:	10 92 a6 0d 	sts	0x0DA6, r1	; 0x800da6 <tx_buffer_data_len>
    3262:	ff 91       	pop	r31
    3264:	ef 91       	pop	r30
    3266:	8f 91       	pop	r24
    3268:	0f 90       	pop	r0
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	0f 90       	pop	r0
    326e:	1f 90       	pop	r1
    3270:	18 95       	reti

Disassembly of section .text.__vector_28:

00002a54 <__vector_28>:
    2a54:	1f 92       	push	r1
    2a56:	0f 92       	push	r0
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	0f 92       	push	r0
    2a5c:	11 24       	eor	r1, r1
    2a5e:	2f 93       	push	r18
    2a60:	8f 93       	push	r24
    2a62:	9f 93       	push	r25
    2a64:	ef 93       	push	r30
    2a66:	ff 93       	push	r31
    2a68:	80 91 a3 0d 	lds	r24, 0x0DA3	; 0x800da3 <rx_buffer_has_message>
    2a6c:	81 11       	cpse	r24, r1
    2a6e:	0e c0       	rjmp	.+28     	; 0x2a8c <__vector_28+0x38>
    2a70:	e0 91 a4 0d 	lds	r30, 0x0DA4	; 0x800da4 <rx_buffer_data_len>
    2a74:	e6 39       	cpi	r30, 0x96	; 150
    2a76:	50 f4       	brcc	.+20     	; 0x2a8c <__vector_28+0x38>
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	8e 0f       	add	r24, r30
    2a7c:	80 93 a4 0d 	sts	0x0DA4, r24	; 0x800da4 <rx_buffer_data_len>
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2a86:	e8 5a       	subi	r30, 0xA8	; 168
    2a88:	f3 4f       	sbci	r31, 0xF3	; 243
    2a8a:	80 83       	st	Z, r24
    2a8c:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <rx_buffer_data_len>
    2a90:	83 30       	cpi	r24, 0x03	; 3
    2a92:	80 f0       	brcs	.+32     	; 0x2ab4 <__vector_28+0x60>
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	fc 01       	movw	r30, r24
    2a98:	e9 5a       	subi	r30, 0xA9	; 169
    2a9a:	f3 4f       	sbci	r31, 0xF3	; 243
    2a9c:	20 81       	ld	r18, Z
    2a9e:	2a 30       	cpi	r18, 0x0A	; 10
    2aa0:	49 f4       	brne	.+18     	; 0x2ab4 <__vector_28+0x60>
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	ea 5a       	subi	r30, 0xAA	; 170
    2aa6:	f3 4f       	sbci	r31, 0xF3	; 243
    2aa8:	80 81       	ld	r24, Z
    2aaa:	8d 30       	cpi	r24, 0x0D	; 13
    2aac:	19 f4       	brne	.+6      	; 0x2ab4 <__vector_28+0x60>
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	80 93 a3 0d 	sts	0x0DA3, r24	; 0x800da3 <rx_buffer_has_message>
    2ab4:	ff 91       	pop	r31
    2ab6:	ef 91       	pop	r30
    2ab8:	9f 91       	pop	r25
    2aba:	8f 91       	pop	r24
    2abc:	2f 91       	pop	r18
    2abe:	0f 90       	pop	r0
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	0f 90       	pop	r0
    2ac4:	1f 90       	pop	r1
    2ac6:	18 95       	reti

Disassembly of section .text.main:

000040fc <main>:
	while(1)
	{
		if(0){
			CONF_enter();
		}else{
			MAINPG_start();
    40fc:	0e 94 96 05 	call	0xb2c	; 0xb2c <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4100:	2f ef       	ldi	r18, 0xFF	; 255
    4102:	81 e1       	ldi	r24, 0x11	; 17
    4104:	9a e7       	ldi	r25, 0x7A	; 122
    4106:	21 50       	subi	r18, 0x01	; 1
    4108:	80 40       	sbci	r24, 0x00	; 0
    410a:	90 40       	sbci	r25, 0x00	; 0
    410c:	e1 f7       	brne	.-8      	; 0x4106 <main+0xa>
    410e:	00 c0       	rjmp	.+0      	; 0x4110 <main+0x14>
    4110:	00 00       	nop
    4112:	f4 cf       	rjmp	.-24     	; 0x40fc <main>

Disassembly of section .text.calc_ppm_methane:

00002520 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    2520:	8f 92       	push	r8
    2522:	9f 92       	push	r9
    2524:	af 92       	push	r10
    2526:	bf 92       	push	r11
    2528:	cf 92       	push	r12
    252a:	df 92       	push	r13
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    2530:	bc 01       	movw	r22, r24
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 77 14 	call	0x28ee	; 0x28ee <__floatunsisf>
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	59 e3       	ldi	r21, 0x39	; 57
    2542:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__mulsf3>
    2546:	80 90 71 0d 	lds	r8, 0x0D71	; 0x800d71 <Vc>
    254a:	90 90 72 0d 	lds	r9, 0x0D72	; 0x800d72 <Vc+0x1>
    254e:	a0 90 73 0d 	lds	r10, 0x0D73	; 0x800d73 <Vc+0x2>
    2552:	b0 90 74 0d 	lds	r11, 0x0D74	; 0x800d74 <Vc+0x3>
    2556:	a5 01       	movw	r20, r10
    2558:	94 01       	movw	r18, r8
    255a:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__mulsf3>
    255e:	6b 01       	movw	r12, r22
    2560:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    2562:	9b 01       	movw	r18, r22
    2564:	ac 01       	movw	r20, r24
    2566:	c5 01       	movw	r24, r10
    2568:	b4 01       	movw	r22, r8
    256a:	0e 94 b9 21 	call	0x4372	; 0x4372 <__subsf3>
    256e:	a7 01       	movw	r20, r14
    2570:	96 01       	movw	r18, r12
    2572:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__divsf3>
    2576:	20 91 6d 0d 	lds	r18, 0x0D6D	; 0x800d6d <RRL>
    257a:	30 91 6e 0d 	lds	r19, 0x0D6E	; 0x800d6e <RRL+0x1>
    257e:	40 91 6f 0d 	lds	r20, 0x0D6F	; 0x800d6f <RRL+0x2>
    2582:	50 91 70 0d 	lds	r21, 0x0D70	; 0x800d70 <RRL+0x3>
    2586:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    258a:	20 91 69 0d 	lds	r18, 0x0D69	; 0x800d69 <PPM_factor>
    258e:	30 91 6a 0d 	lds	r19, 0x0D6A	; 0x800d6a <PPM_factor+0x1>
    2592:	40 91 6b 0d 	lds	r20, 0x0D6B	; 0x800d6b <PPM_factor+0x2>
    2596:	50 91 6c 0d 	lds	r21, 0x0D6C	; 0x800d6c <PPM_factor+0x3>
    259a:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__mulsf3>
    259e:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__fixunssfsi>
	return PPM;
}
    25a2:	cb 01       	movw	r24, r22
    25a4:	ff 90       	pop	r15
    25a6:	ef 90       	pop	r14
    25a8:	df 90       	pop	r13
    25aa:	cf 90       	pop	r12
    25ac:	bf 90       	pop	r11
    25ae:	af 90       	pop	r10
    25b0:	9f 90       	pop	r9
    25b2:	8f 90       	pop	r8
    25b4:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

00004114 <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    4114:	80 91 a7 0d 	lds	r24, 0x0DA7	; 0x800da7 <cntPowerUpTime>
    4118:	8f 5f       	subi	r24, 0xFF	; 255
    411a:	80 93 a7 0d 	sts	0x0DA7, r24	; 0x800da7 <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    411e:	90 91 a8 0d 	lds	r25, 0x0DA8	; 0x800da8 <_powerUpTime>
    4122:	89 17       	cp	r24, r25
    4124:	10 f0       	brcs	.+4      	; 0x412a <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    4126:	0e 94 8f 22 	call	0x451e	; 0x451e <TC0_HAL_stop>
    412a:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

00002c78 <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    2c78:	cf 93       	push	r28
	_data=data;
    2c7a:	50 93 8c 0d 	sts	0x0D8C, r21	; 0x800d8c <_data+0x1>
    2c7e:	40 93 8b 0d 	sts	0x0D8B, r20	; 0x800d8b <_data>
	_nSamples=nSamples;
    2c82:	70 93 8e 0d 	sts	0x0D8E, r23	; 0x800d8e <_nSamples+0x1>
    2c86:	60 93 8d 0d 	sts	0x0D8D, r22	; 0x800d8d <_nSamples>
	cntSamples=0;
    2c8a:	10 92 8a 0d 	sts	0x0D8A, r1	; 0x800d8a <cntSamples+0x1>
    2c8e:	10 92 89 0d 	sts	0x0D89, r1	; 0x800d89 <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    2c92:	61 e1       	ldi	r22, 0x11	; 17
    2c94:	7a e1       	ldi	r23, 0x1A	; 26
    2c96:	0e 94 67 1f 	call	0x3ece	; 0x3ece <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	0e 94 da 20 	call	0x41b4	; 0x41b4 <PM_HAL_adc_power>
    2ca0:	2f ef       	ldi	r18, 0xFF	; 255
    2ca2:	83 ec       	ldi	r24, 0xC3	; 195
    2ca4:	99 e0       	ldi	r25, 0x09	; 9
    2ca6:	21 50       	subi	r18, 0x01	; 1
    2ca8:	80 40       	sbci	r24, 0x00	; 0
    2caa:	90 40       	sbci	r25, 0x00	; 0
    2cac:	e1 f7       	brne	.-8      	; 0x2ca6 <ADC_init_sampling+0x2e>
    2cae:	00 c0       	rjmp	.+0      	; 0x2cb0 <ADC_init_sampling+0x38>
    2cb0:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    2cb2:	60 e0       	ldi	r22, 0x00	; 0
    2cb4:	8d e4       	ldi	r24, 0x4D	; 77
    2cb6:	0e 94 5e 19 	call	0x32bc	; 0x32bc <TWI_HAL_start>
    2cba:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    2cbc:	0e 94 62 21 	call	0x42c4	; 0x42c4 <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    2cc0:	cc 23       	and	r28, r28
    2cc2:	51 f0       	breq	.+20     	; 0x2cd8 <ADC_init_sampling+0x60>
		_data=NULL;
    2cc4:	10 92 8c 0d 	sts	0x0D8C, r1	; 0x800d8c <_data+0x1>
    2cc8:	10 92 8b 0d 	sts	0x0D8B, r1	; 0x800d8b <_data>
		_nSamples=0;
    2ccc:	10 92 8e 0d 	sts	0x0D8E, r1	; 0x800d8e <_nSamples+0x1>
    2cd0:	10 92 8d 0d 	sts	0x0D8D, r1	; 0x800d8d <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	01 c0       	rjmp	.+2      	; 0x2cda <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
}
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

00004268 <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    4268:	0e 94 8f 22 	call	0x451e	; 0x451e <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    426c:	80 e0       	ldi	r24, 0x00	; 0
    426e:	0e 94 da 20 	call	0x41b4	; 0x41b4 <PM_HAL_adc_power>
	_data=NULL;
    4272:	10 92 8c 0d 	sts	0x0D8C, r1	; 0x800d8c <_data+0x1>
    4276:	10 92 8b 0d 	sts	0x0D8B, r1	; 0x800d8b <_data>
    427a:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

00004020 <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    4020:	40 91 89 0d 	lds	r20, 0x0D89	; 0x800d89 <cntSamples>
    4024:	50 91 8a 0d 	lds	r21, 0x0D8A	; 0x800d8a <cntSamples+0x1>
    4028:	20 91 8d 0d 	lds	r18, 0x0D8D	; 0x800d8d <_nSamples>
    402c:	30 91 8e 0d 	lds	r19, 0x0D8E	; 0x800d8e <_nSamples+0x1>
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	42 17       	cp	r20, r18
    4034:	53 07       	cpc	r21, r19
    4036:	08 f4       	brcc	.+2      	; 0x403a <ADC_is_sampling_done+0x1a>
    4038:	80 e0       	ldi	r24, 0x00	; 0
}
    403a:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002f62 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    2f62:	0f 93       	push	r16
    2f64:	1f 93       	push	r17
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	00 d0       	rcall	.+0      	; 0x2f6c <ADC_get_value+0xa>
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    2f72:	8f ef       	ldi	r24, 0xFF	; 255
    2f74:	9f ef       	ldi	r25, 0xFF	; 255
    2f76:	f8 01       	movw	r30, r16
    2f78:	91 83       	std	Z+1, r25	; 0x01
    2f7a:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    2f7c:	42 e0       	ldi	r20, 0x02	; 2
    2f7e:	be 01       	movw	r22, r28
    2f80:	6f 5f       	subi	r22, 0xFF	; 255
    2f82:	7f 4f       	sbci	r23, 0xFF	; 255
    2f84:	8d e4       	ldi	r24, 0x4D	; 77
    2f86:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2f8a:	81 11       	cpse	r24, r1
    2f8c:	0d c0       	rjmp	.+26     	; 0x2fa8 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	98 2f       	mov	r25, r24
    2f94:	88 27       	eor	r24, r24
    2f96:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    2f98:	82 2b       	or	r24, r18
    2f9a:	0e 94 90 12 	call	0x2520	; 0x2520 <calc_ppm_methane>
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	01 c0       	rjmp	.+2      	; 0x2faa <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	1f 91       	pop	r17
    2fb4:	0f 91       	pop	r16
    2fb6:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

00003422 <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    3422:	80 91 8b 0d 	lds	r24, 0x0D8B	; 0x800d8b <_data>
    3426:	90 91 8c 0d 	lds	r25, 0x0D8C	; 0x800d8c <_data+0x1>
    342a:	20 91 89 0d 	lds	r18, 0x0D89	; 0x800d89 <cntSamples>
    342e:	30 91 8a 0d 	lds	r19, 0x0D8A	; 0x800d8a <cntSamples+0x1>
    3432:	a9 01       	movw	r20, r18
    3434:	4f 5f       	subi	r20, 0xFF	; 255
    3436:	5f 4f       	sbci	r21, 0xFF	; 255
    3438:	50 93 8a 0d 	sts	0x0D8A, r21	; 0x800d8a <cntSamples+0x1>
    343c:	40 93 89 0d 	sts	0x0D89, r20	; 0x800d89 <cntSamples>
    3440:	22 0f       	add	r18, r18
    3442:	33 1f       	adc	r19, r19
    3444:	82 0f       	add	r24, r18
    3446:	93 1f       	adc	r25, r19
    3448:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <ADC_get_value>
	if(cntSamples>=_nSamples){
    344c:	20 91 89 0d 	lds	r18, 0x0D89	; 0x800d89 <cntSamples>
    3450:	30 91 8a 0d 	lds	r19, 0x0D8A	; 0x800d8a <cntSamples+0x1>
    3454:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <_nSamples>
    3458:	90 91 8e 0d 	lds	r25, 0x0D8E	; 0x800d8e <_nSamples+0x1>
    345c:	28 17       	cp	r18, r24
    345e:	39 07       	cpc	r19, r25
    3460:	10 f0       	brcs	.+4      	; 0x3466 <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    3462:	0e 94 8f 22 	call	0x451e	; 0x451e <TC0_HAL_stop>
    3466:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

00004452 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    4452:	0e 94 72 22 	call	0x44e4	; 0x44e4 <TC0_HAL_start>
	vect_ADC_do_sample();
    4456:	0e 94 11 1a 	call	0x3422	; 0x3422 <vect_ADC_do_sample>
    445a:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

00003f4e <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    3f4e:	80 93 a8 0d 	sts	0x0DA8, r24	; 0x800da8 <_powerUpTime>
	cntPowerUpTime=0;
    3f52:	10 92 a7 0d 	sts	0x0DA7, r1	; 0x800da7 <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <PM_HAL_meth_power>
	
	//Setup timer
	//TC0_HAL_init(60, &vect_ADC_heat_timeout);
	TC0_HAL_init(1, &vect_ADC_heat_timeout);
    3f5c:	6a e8       	ldi	r22, 0x8A	; 138
    3f5e:	70 e2       	ldi	r23, 0x20	; 32
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	0e 94 67 1f 	call	0x3ece	; 0x3ece <TC0_HAL_init>
	TC0_HAL_start();
    3f66:	0e 94 72 22 	call	0x44e4	; 0x44e4 <TC0_HAL_start>
    3f6a:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

000044ac <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    44ac:	80 e0       	ldi	r24, 0x00	; 0
    44ae:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <PM_HAL_meth_power>
    44b2:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

0000428e <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    428e:	20 91 a7 0d 	lds	r18, 0x0DA7	; 0x800da7 <cntPowerUpTime>
    4292:	90 91 a8 0d 	lds	r25, 0x0DA8	; 0x800da8 <_powerUpTime>
    4296:	81 e0       	ldi	r24, 0x01	; 1
    4298:	29 17       	cp	r18, r25
    429a:	08 f4       	brcc	.+2      	; 0x429e <ADC_meth_sens_ready+0x10>
    429c:	80 e0       	ldi	r24, 0x00	; 0
}
    429e:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

0000357a <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    357a:	ef 92       	push	r14
    357c:	ff 92       	push	r15
    357e:	0f 93       	push	r16
    3580:	1f 93       	push	r17
	Vc=Vcc;
    3582:	60 93 71 0d 	sts	0x0D71, r22	; 0x800d71 <Vc>
    3586:	70 93 72 0d 	sts	0x0D72, r23	; 0x800d72 <Vc+0x1>
    358a:	80 93 73 0d 	sts	0x0D73, r24	; 0x800d73 <Vc+0x2>
    358e:	90 93 74 0d 	sts	0x0D74, r25	; 0x800d74 <Vc+0x3>
	RRL=Rrl;
    3592:	20 93 6d 0d 	sts	0x0D6D, r18	; 0x800d6d <RRL>
    3596:	30 93 6e 0d 	sts	0x0D6E, r19	; 0x800d6e <RRL+0x1>
    359a:	40 93 6f 0d 	sts	0x0D6F, r20	; 0x800d6f <RRL+0x2>
    359e:	50 93 70 0d 	sts	0x0D70, r21	; 0x800d70 <RRL+0x3>
	PPM_factor=PPMfactor;
    35a2:	e0 92 69 0d 	sts	0x0D69, r14	; 0x800d69 <PPM_factor>
    35a6:	f0 92 6a 0d 	sts	0x0D6A, r15	; 0x800d6a <PPM_factor+0x1>
    35aa:	00 93 6b 0d 	sts	0x0D6B, r16	; 0x800d6b <PPM_factor+0x2>
    35ae:	10 93 6c 0d 	sts	0x0D6C, r17	; 0x800d6c <PPM_factor+0x3>
}
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	ff 90       	pop	r15
    35b8:	ef 90       	pop	r14
    35ba:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

0000415c <EM_has_deveui>:
uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
}

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    415c:	60 e4       	ldi	r22, 0x40	; 64
    415e:	70 e0       	ldi	r23, 0x00	; 0
    4160:	80 e8       	ldi	r24, 0x80	; 128
    4162:	0e 94 59 21 	call	0x42b2	; 0x42b2 <eeprom_read_byte>
    4166:	91 e0       	ldi	r25, 0x01	; 1
    4168:	81 11       	cpse	r24, r1
    416a:	01 c0       	rjmp	.+2      	; 0x416e <EM_has_deveui+0x12>
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	89 2f       	mov	r24, r25
    4170:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00004172 <EM_has_appeui>:
    4172:	61 e4       	ldi	r22, 0x41	; 65
    4174:	70 e0       	ldi	r23, 0x00	; 0
    4176:	80 e8       	ldi	r24, 0x80	; 128
    4178:	0e 94 59 21 	call	0x42b2	; 0x42b2 <eeprom_read_byte>
    417c:	91 e0       	ldi	r25, 0x01	; 1
    417e:	81 11       	cpse	r24, r1
    4180:	01 c0       	rjmp	.+2      	; 0x4184 <EM_has_appeui+0x12>
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	89 2f       	mov	r24, r25
    4186:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00004188 <EM_has_appkey>:
    4188:	62 e4       	ldi	r22, 0x42	; 66
    418a:	70 e0       	ldi	r23, 0x00	; 0
    418c:	80 e8       	ldi	r24, 0x80	; 128
    418e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <eeprom_read_byte>
    4192:	91 e0       	ldi	r25, 0x01	; 1
    4194:	81 11       	cpse	r24, r1
    4196:	01 c0       	rjmp	.+2      	; 0x419a <EM_has_appkey+0x12>
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	89 2f       	mov	r24, r25
    419c:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00003b68 <EM_get_deveui>:
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	8c 01       	movw	r16, r24
    3b70:	0e 94 ae 20 	call	0x415c	; 0x415c <EM_has_deveui>
    3b74:	c8 2f       	mov	r28, r24
    3b76:	88 23       	and	r24, r24
    3b78:	51 f0       	breq	.+20     	; 0x3b8e <EM_get_deveui+0x26>
    3b7a:	20 e1       	ldi	r18, 0x10	; 16
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	40 e0       	ldi	r20, 0x00	; 0
    3b80:	50 e0       	ldi	r21, 0x00	; 0
    3b82:	60 e0       	ldi	r22, 0x00	; 0
    3b84:	c8 01       	movw	r24, r16
    3b86:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <eeprom_read_block>
    3b8a:	f8 01       	movw	r30, r16
    3b8c:	10 8a       	std	Z+16, r1	; 0x10
    3b8e:	8c 2f       	mov	r24, r28
    3b90:	cf 91       	pop	r28
    3b92:	1f 91       	pop	r17
    3b94:	0f 91       	pop	r16
    3b96:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003b98 <EM_get_appeui>:
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	cf 93       	push	r28
    3b9e:	8c 01       	movw	r16, r24
    3ba0:	0e 94 b9 20 	call	0x4172	; 0x4172 <EM_has_appeui>
    3ba4:	c8 2f       	mov	r28, r24
    3ba6:	88 23       	and	r24, r24
    3ba8:	51 f0       	breq	.+20     	; 0x3bbe <EM_get_appeui+0x26>
    3baa:	20 e1       	ldi	r18, 0x10	; 16
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	40 e1       	ldi	r20, 0x10	; 16
    3bb0:	50 e0       	ldi	r21, 0x00	; 0
    3bb2:	60 e0       	ldi	r22, 0x00	; 0
    3bb4:	c8 01       	movw	r24, r16
    3bb6:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <eeprom_read_block>
    3bba:	f8 01       	movw	r30, r16
    3bbc:	10 8a       	std	Z+16, r1	; 0x10
    3bbe:	8c 2f       	mov	r24, r28
    3bc0:	cf 91       	pop	r28
    3bc2:	1f 91       	pop	r17
    3bc4:	0f 91       	pop	r16
    3bc6:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00003bc8 <EM_get_appkey>:
    3bc8:	0f 93       	push	r16
    3bca:	1f 93       	push	r17
    3bcc:	cf 93       	push	r28
    3bce:	8c 01       	movw	r16, r24
    3bd0:	0e 94 c4 20 	call	0x4188	; 0x4188 <EM_has_appkey>
    3bd4:	c8 2f       	mov	r28, r24
    3bd6:	88 23       	and	r24, r24
    3bd8:	51 f0       	breq	.+20     	; 0x3bee <EM_get_appkey+0x26>
    3bda:	20 e2       	ldi	r18, 0x20	; 32
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e2       	ldi	r20, 0x20	; 32
    3be0:	50 e0       	ldi	r21, 0x00	; 0
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	c8 01       	movw	r24, r16
    3be6:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <eeprom_read_block>
    3bea:	f8 01       	movw	r30, r16
    3bec:	10 a2       	std	Z+32, r1	; 0x20
    3bee:	8c 2f       	mov	r24, r28
    3bf0:	cf 91       	pop	r28
    3bf2:	1f 91       	pop	r17
    3bf4:	0f 91       	pop	r16
    3bf6:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00003f6c <EM_get_ppmfactor>:
    3f6c:	cf 93       	push	r28
    3f6e:	df 93       	push	r29
    3f70:	ec 01       	movw	r28, r24
    3f72:	63 e4       	ldi	r22, 0x43	; 67
    3f74:	70 e0       	ldi	r23, 0x00	; 0
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	0e 94 d5 21 	call	0x43aa	; 0x43aa <eeprom_read_dword>
    3f7c:	68 83       	st	Y, r22
    3f7e:	79 83       	std	Y+1, r23	; 0x01
    3f80:	8a 83       	std	Y+2, r24	; 0x02
    3f82:	9b 83       	std	Y+3, r25	; 0x03
    3f84:	df 91       	pop	r29
    3f86:	cf 91       	pop	r28
    3f88:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00003f8a <EM_get_RRL>:
    3f8a:	cf 93       	push	r28
    3f8c:	df 93       	push	r29
    3f8e:	ec 01       	movw	r28, r24
    3f90:	67 e4       	ldi	r22, 0x47	; 71
    3f92:	70 e0       	ldi	r23, 0x00	; 0
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	0e 94 d5 21 	call	0x43aa	; 0x43aa <eeprom_read_dword>
    3f9a:	68 83       	st	Y, r22
    3f9c:	79 83       	std	Y+1, r23	; 0x01
    3f9e:	8a 83       	std	Y+2, r24	; 0x02
    3fa0:	9b 83       	std	Y+3, r25	; 0x03
    3fa2:	df 91       	pop	r29
    3fa4:	cf 91       	pop	r28
    3fa6:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00003fa8 <EM_get_Vcc>:
    3fa8:	cf 93       	push	r28
    3faa:	df 93       	push	r29
    3fac:	ec 01       	movw	r28, r24
    3fae:	6b e4       	ldi	r22, 0x4B	; 75
    3fb0:	70 e0       	ldi	r23, 0x00	; 0
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	0e 94 d5 21 	call	0x43aa	; 0x43aa <eeprom_read_dword>
    3fb8:	68 83       	st	Y, r22
    3fba:	79 83       	std	Y+1, r23	; 0x01
    3fbc:	8a 83       	std	Y+2, r24	; 0x02
    3fbe:	9b 83       	std	Y+3, r25	; 0x03
    3fc0:	df 91       	pop	r29
    3fc2:	cf 91       	pop	r28
    3fc4:	08 95       	ret

Disassembly of section .text.EM_get_collections:

000042d4 <EM_get_collections>:
    42d4:	26 2f       	mov	r18, r22
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	44 e6       	ldi	r20, 0x64	; 100
    42da:	50 e0       	ldi	r21, 0x00	; 0
    42dc:	60 e0       	ldi	r22, 0x00	; 0
    42de:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <eeprom_read_block>
    42e2:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

000043de <EM_get_heat_up_time>:
    43de:	6f e4       	ldi	r22, 0x4F	; 79
    43e0:	70 e0       	ldi	r23, 0x00	; 0
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <eeprom_read_byte>
    43e8:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

000043ea <EM_get_air_pump_time>:
    43ea:	60 e5       	ldi	r22, 0x50	; 80
    43ec:	70 e0       	ldi	r23, 0x00	; 0
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <eeprom_read_word>
    43f4:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

000043f6 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    43f6:	62 e5       	ldi	r22, 0x52	; 82
    43f8:	70 e0       	ldi	r23, 0x00	; 0
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	0e 94 59 21 	call	0x42b2	; 0x42b2 <eeprom_read_byte>
    4400:	08 95       	ret

Disassembly of section .text.cb_blink:

000044f0 <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    44f0:	0e 94 42 22 	call	0x4484	; 0x4484 <PM_HAL_LED_toggle>
    44f4:	08 95       	ret

Disassembly of section .text.blink:

00003192 <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    3198:	c0 e0       	ldi	r28, 0x00	; 0
    319a:	19 c0       	rjmp	.+50     	; 0x31ce <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	0e 94 02 21 	call	0x4204	; 0x4204 <PM_HAL_LED_power>
    31a2:	2f ef       	ldi	r18, 0xFF	; 255
    31a4:	82 e5       	ldi	r24, 0x52	; 82
    31a6:	97 e0       	ldi	r25, 0x07	; 7
    31a8:	21 50       	subi	r18, 0x01	; 1
    31aa:	80 40       	sbci	r24, 0x00	; 0
    31ac:	90 40       	sbci	r25, 0x00	; 0
    31ae:	e1 f7       	brne	.-8      	; 0x31a8 <blink+0x16>
    31b0:	00 c0       	rjmp	.+0      	; 0x31b2 <blink+0x20>
    31b2:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	0e 94 02 21 	call	0x4204	; 0x4204 <PM_HAL_LED_power>
    31ba:	2f ef       	ldi	r18, 0xFF	; 255
    31bc:	82 e5       	ldi	r24, 0x52	; 82
    31be:	97 e0       	ldi	r25, 0x07	; 7
    31c0:	21 50       	subi	r18, 0x01	; 1
    31c2:	80 40       	sbci	r24, 0x00	; 0
    31c4:	90 40       	sbci	r25, 0x00	; 0
    31c6:	e1 f7       	brne	.-8      	; 0x31c0 <blink+0x2e>
    31c8:	00 c0       	rjmp	.+0      	; 0x31ca <blink+0x38>
    31ca:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    31cc:	cf 5f       	subi	r28, 0xFF	; 255
    31ce:	cd 17       	cp	r28, r29
    31d0:	28 f3       	brcs	.-54     	; 0x319c <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	0e 94 02 21 	call	0x4204	; 0x4204 <PM_HAL_LED_power>
}
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	08 95       	ret

Disassembly of section .text.err_code:

00003824 <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    3824:	cf 93       	push	r28
    3826:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	0e 94 02 21 	call	0x4204	; 0x4204 <PM_HAL_LED_power>
    382e:	2f ef       	ldi	r18, 0xFF	; 255
    3830:	83 ed       	ldi	r24, 0xD3	; 211
    3832:	90 e3       	ldi	r25, 0x30	; 48
    3834:	21 50       	subi	r18, 0x01	; 1
    3836:	80 40       	sbci	r24, 0x00	; 0
    3838:	90 40       	sbci	r25, 0x00	; 0
    383a:	e1 f7       	brne	.-8      	; 0x3834 <err_code+0x10>
    383c:	00 c0       	rjmp	.+0      	; 0x383e <err_code+0x1a>
    383e:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    3840:	8c 2f       	mov	r24, r28
    3842:	0e 94 c9 18 	call	0x3192	; 0x3192 <blink>
    3846:	2f ef       	ldi	r18, 0xFF	; 255
    3848:	89 e6       	ldi	r24, 0x69	; 105
    384a:	98 e1       	ldi	r25, 0x18	; 24
    384c:	21 50       	subi	r18, 0x01	; 1
    384e:	80 40       	sbci	r24, 0x00	; 0
    3850:	90 40       	sbci	r25, 0x00	; 0
    3852:	e1 f7       	brne	.-8      	; 0x384c <err_code+0x28>
    3854:	00 c0       	rjmp	.+0      	; 0x3856 <err_code+0x32>
    3856:	00 00       	nop
	_delay_ms(1000);
}
    3858:	cf 91       	pop	r28
    385a:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

00004356 <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    4356:	88 e7       	ldi	r24, 0x78	; 120
    4358:	92 e2       	ldi	r25, 0x22	; 34
    435a:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <TC2_HAL_subscribe>
    435e:	80 93 a9 0d 	sts	0x0DA9, r24	; 0x800da9 <cbPointer>
    4362:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

000042e4 <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    42e4:	80 91 a9 0d 	lds	r24, 0x0DA9	; 0x800da9 <cbPointer>
    42e8:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	0e 94 02 21 	call	0x4204	; 0x4204 <PM_HAL_LED_power>
    42f2:	08 95       	ret

Disassembly of section .text.LED_join_success:

000035fe <LED_join_success>:
}

void LED_join_success(){
    35fe:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    3600:	c0 e0       	ldi	r28, 0x00	; 0
    3602:	19 c0       	rjmp	.+50     	; 0x3636 <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	0e 94 02 21 	call	0x4204	; 0x4204 <PM_HAL_LED_power>
    360a:	2f ef       	ldi	r18, 0xFF	; 255
    360c:	80 e7       	ldi	r24, 0x70	; 112
    360e:	92 e0       	ldi	r25, 0x02	; 2
    3610:	21 50       	subi	r18, 0x01	; 1
    3612:	80 40       	sbci	r24, 0x00	; 0
    3614:	90 40       	sbci	r25, 0x00	; 0
    3616:	e1 f7       	brne	.-8      	; 0x3610 <LED_join_success+0x12>
    3618:	00 c0       	rjmp	.+0      	; 0x361a <LED_join_success+0x1c>
    361a:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	0e 94 02 21 	call	0x4204	; 0x4204 <PM_HAL_LED_power>
    3622:	2f ef       	ldi	r18, 0xFF	; 255
    3624:	80 e7       	ldi	r24, 0x70	; 112
    3626:	92 e0       	ldi	r25, 0x02	; 2
    3628:	21 50       	subi	r18, 0x01	; 1
    362a:	80 40       	sbci	r24, 0x00	; 0
    362c:	90 40       	sbci	r25, 0x00	; 0
    362e:	e1 f7       	brne	.-8      	; 0x3628 <LED_join_success+0x2a>
    3630:	00 c0       	rjmp	.+0      	; 0x3632 <LED_join_success+0x34>
    3632:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    3634:	cf 5f       	subi	r28, 0xFF	; 255
    3636:	ca 30       	cpi	r28, 0x0A	; 10
    3638:	28 f3       	brcs	.-54     	; 0x3604 <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    363a:	cf 91       	pop	r28
    363c:	08 95       	ret

Disassembly of section .text.LED_join_denied:

000044b4 <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    44b4:	83 e0       	ldi	r24, 0x03	; 3
    44b6:	0e 94 12 1c 	call	0x3824	; 0x3824 <err_code>
    44ba:	08 95       	ret

Disassembly of section .text.LED_conf_err:

000044bc <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    44bc:	85 e0       	ldi	r24, 0x05	; 5
    44be:	0e 94 12 1c 	call	0x3824	; 0x3824 <err_code>
    44c2:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

000044c4 <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    44c4:	87 e0       	ldi	r24, 0x07	; 7
    44c6:	0e 94 12 1c 	call	0x3824	; 0x3824 <err_code>
    44ca:	08 95       	ret

Disassembly of section .text.parse_err:

00002f0a <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    2f0a:	cf 92       	push	r12
    2f0c:	df 92       	push	r13
    2f0e:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    2f10:	6c 01       	movw	r12, r24
    2f12:	20 e8       	ldi	r18, 0x80	; 128
    2f14:	e2 2e       	mov	r14, r18
    2f16:	20 e4       	ldi	r18, 0x40	; 64
    2f18:	33 e0       	ldi	r19, 0x03	; 3
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	8e 2d       	mov	r24, r14
    2f1e:	b6 01       	movw	r22, r12
    2f20:	0e 94 de 1a 	call	0x35bc	; 0x35bc <strcmp>
    2f24:	89 2b       	or	r24, r25
    2f26:	a1 f0       	breq	.+40     	; 0x2f50 <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    2f28:	2b e4       	ldi	r18, 0x4B	; 75
    2f2a:	33 e0       	ldi	r19, 0x03	; 3
    2f2c:	40 e0       	ldi	r20, 0x00	; 0
    2f2e:	8e 2d       	mov	r24, r14
    2f30:	b6 01       	movw	r22, r12
    2f32:	0e 94 de 1a 	call	0x35bc	; 0x35bc <strcmp>
    2f36:	89 2b       	or	r24, r25
    2f38:	69 f0       	breq	.+26     	; 0x2f54 <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    2f3a:	22 e5       	ldi	r18, 0x52	; 82
    2f3c:	33 e0       	ldi	r19, 0x03	; 3
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	8e 2d       	mov	r24, r14
    2f42:	b6 01       	movw	r22, r12
    2f44:	0e 94 de 1a 	call	0x35bc	; 0x35bc <strcmp>
    2f48:	89 2b       	or	r24, r25
    2f4a:	31 f4       	brne	.+12     	; 0x2f58 <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    2f4c:	83 e0       	ldi	r24, 0x03	; 3
    2f4e:	05 c0       	rjmp	.+10     	; 0x2f5a <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    2f50:	82 e0       	ldi	r24, 0x02	; 2
    2f52:	03 c0       	rjmp	.+6      	; 0x2f5a <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	01 c0       	rjmp	.+2      	; 0x2f5a <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
}
    2f5a:	ef 90       	pop	r14
    2f5c:	df 90       	pop	r13
    2f5e:	cf 90       	pop	r12
    2f60:	08 95       	ret

Disassembly of section .text.JN_join_network:

00000e26 <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
     e26:	af 92       	push	r10
     e28:	bf 92       	push	r11
     e2a:	cf 92       	push	r12
     e2c:	df 92       	push	r13
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	28 97       	sbiw	r28, 0x08	; 8
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	5c 01       	movw	r10, r24
     e4a:	6b 01       	movw	r12, r22
     e4c:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
     e4e:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
     e50:	e1 2f       	mov	r30, r17
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ed 30       	cpi	r30, 0x0D	; 13
     e56:	f1 05       	cpc	r31, r1
     e58:	d8 f7       	brcc	.-10     	; 0xe50 <JN_join_network+0x2a>
     e5a:	e2 5c       	subi	r30, 0xC2	; 194
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	0c 94 19 22 	jmp	0x4432	; 0x4432 <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
     e62:	0e 94 4a 22 	call	0x4494	; 0x4494 <rn2483_reset_active>
     e66:	2f ef       	ldi	r18, 0xFF	; 255
     e68:	89 e6       	ldi	r24, 0x69	; 105
     e6a:	98 e1       	ldi	r25, 0x18	; 24
     e6c:	21 50       	subi	r18, 0x01	; 1
     e6e:	80 40       	sbci	r24, 0x00	; 0
     e70:	90 40       	sbci	r25, 0x00	; 0
     e72:	e1 f7       	brne	.-8      	; 0xe6c <JN_join_network+0x46>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <JN_join_network+0x50>
     e76:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
     e78:	0e 94 4e 22 	call	0x449c	; 0x449c <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
     e7c:	4c e0       	ldi	r20, 0x0C	; 12
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	62 e0       	ldi	r22, 0x02	; 2
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
     e8c:	20 e6       	ldi	r18, 0x60	; 96
     e8e:	33 e0       	ldi	r19, 0x03	; 3
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
     e9c:	11 e0       	ldi	r17, 0x01	; 1
			break;
     e9e:	d8 cf       	rjmp	.-80     	; 0xe50 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
     ea0:	47 e6       	ldi	r20, 0x67	; 103
     ea2:	53 e0       	ldi	r21, 0x03	; 3
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	8e e5       	ldi	r24, 0x5E	; 94
     ea8:	92 e0       	ldi	r25, 0x02	; 2
     eaa:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
     eae:	6e e5       	ldi	r22, 0x5E	; 94
     eb0:	72 e0       	ldi	r23, 0x02	; 2
     eb2:	80 e8       	ldi	r24, 0x80	; 128
     eb4:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
     eb8:	4c e0       	ldi	r20, 0x0C	; 12
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	63 e0       	ldi	r22, 0x03	; 3
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	ce 01       	movw	r24, r28
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     ec8:	25 e7       	ldi	r18, 0x75	; 117
     eca:	33 e0       	ldi	r19, 0x03	; 3
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	ce 01       	movw	r24, r28
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     ed8:	11 e0       	ldi	r17, 0x01	; 1
			break;
     eda:	ba cf       	rjmp	.-140    	; 0xe50 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
     edc:	b5 01       	movw	r22, r10
     ede:	8e e5       	ldi	r24, 0x5E	; 94
     ee0:	92 e0       	ldi	r25, 0x02	; 2
     ee2:	0e 94 82 19 	call	0x3304	; 0x3304 <mac_set_deveui>
				attach_ending(lm_msg);
     ee6:	8e e5       	ldi	r24, 0x5E	; 94
     ee8:	92 e0       	ldi	r25, 0x02	; 2
     eea:	0e 94 2c 20 	call	0x4058	; 0x4058 <attach_ending>
				uart0_hal_send_string(lm_msg);
     eee:	6e e5       	ldi	r22, 0x5E	; 94
     ef0:	72 e0       	ldi	r23, 0x02	; 2
     ef2:	80 e8       	ldi	r24, 0x80	; 128
     ef4:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
     ef8:	4c e0       	ldi	r20, 0x0C	; 12
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	64 e0       	ldi	r22, 0x04	; 4
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     f08:	25 e7       	ldi	r18, 0x75	; 117
     f0a:	33 e0       	ldi	r19, 0x03	; 3
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	ce 01       	movw	r24, r28
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     f18:	11 e0       	ldi	r17, 0x01	; 1
			break;
     f1a:	9a cf       	rjmp	.-204    	; 0xe50 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
     f1c:	b7 01       	movw	r22, r14
     f1e:	8e e5       	ldi	r24, 0x5E	; 94
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	0e 94 ca 19 	call	0x3394	; 0x3394 <mac_set_appkey>
				attach_ending(lm_msg);
     f26:	8e e5       	ldi	r24, 0x5E	; 94
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	0e 94 2c 20 	call	0x4058	; 0x4058 <attach_ending>
				uart0_hal_send_string(lm_msg);
     f2e:	6e e5       	ldi	r22, 0x5E	; 94
     f30:	72 e0       	ldi	r23, 0x02	; 2
     f32:	80 e8       	ldi	r24, 0x80	; 128
     f34:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
     f38:	4c e0       	ldi	r20, 0x0C	; 12
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	65 e0       	ldi	r22, 0x05	; 5
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	ce 01       	movw	r24, r28
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     f48:	25 e7       	ldi	r18, 0x75	; 117
     f4a:	33 e0       	ldi	r19, 0x03	; 3
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	ce 01       	movw	r24, r28
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     f58:	11 e0       	ldi	r17, 0x01	; 1
			break;
     f5a:	7a cf       	rjmp	.-268    	; 0xe50 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
     f5c:	b6 01       	movw	r22, r12
     f5e:	8e e5       	ldi	r24, 0x5E	; 94
     f60:	92 e0       	ldi	r25, 0x02	; 2
     f62:	0e 94 a6 19 	call	0x334c	; 0x334c <mac_set_appeui>
				attach_ending(lm_msg);
     f66:	8e e5       	ldi	r24, 0x5E	; 94
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	0e 94 2c 20 	call	0x4058	; 0x4058 <attach_ending>
				uart0_hal_send_string(lm_msg);
     f6e:	6e e5       	ldi	r22, 0x5E	; 94
     f70:	72 e0       	ldi	r23, 0x02	; 2
     f72:	80 e8       	ldi	r24, 0x80	; 128
     f74:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
     f78:	4c e0       	ldi	r20, 0x0C	; 12
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	66 e0       	ldi	r22, 0x06	; 6
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	ce 01       	movw	r24, r28
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     f88:	25 e7       	ldi	r18, 0x75	; 117
     f8a:	33 e0       	ldi	r19, 0x03	; 3
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	ce 01       	movw	r24, r28
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     f98:	11 e0       	ldi	r17, 0x01	; 1
			break;
     f9a:	5a cf       	rjmp	.-332    	; 0xe50 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	8e e5       	ldi	r24, 0x5E	; 94
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <mac_set_ADR>
				attach_ending(lm_msg);
     fa6:	8e e5       	ldi	r24, 0x5E	; 94
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	0e 94 2c 20 	call	0x4058	; 0x4058 <attach_ending>
				uart0_hal_send_string(lm_msg);
     fae:	6e e5       	ldi	r22, 0x5E	; 94
     fb0:	72 e0       	ldi	r23, 0x02	; 2
     fb2:	80 e8       	ldi	r24, 0x80	; 128
     fb4:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
     fb8:	4c e0       	ldi	r20, 0x0C	; 12
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	67 e0       	ldi	r22, 0x07	; 7
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	ce 01       	movw	r24, r28
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
     fc8:	25 e7       	ldi	r18, 0x75	; 117
     fca:	33 e0       	ldi	r19, 0x03	; 3
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	ce 01       	movw	r24, r28
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
     fd8:	11 e0       	ldi	r17, 0x01	; 1
			break;
     fda:	3a cf       	rjmp	.-396    	; 0xe50 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
     fdc:	48 e7       	ldi	r20, 0x78	; 120
     fde:	53 e0       	ldi	r21, 0x03	; 3
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	8e e5       	ldi	r24, 0x5E	; 94
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
     fea:	6e e5       	ldi	r22, 0x5E	; 94
     fec:	72 e0       	ldi	r23, 0x02	; 2
     fee:	80 e8       	ldi	r24, 0x80	; 128
     ff0:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
     ff4:	4c e0       	ldi	r20, 0x0C	; 12
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	68 e0       	ldi	r22, 0x08	; 8
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1004:	25 e7       	ldi	r18, 0x75	; 117
    1006:	33 e0       	ldi	r19, 0x03	; 3
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	ce 01       	movw	r24, r28
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1014:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1016:	1c cf       	rjmp	.-456    	; 0xe50 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    1018:	41 e8       	ldi	r20, 0x81	; 129
    101a:	53 e0       	ldi	r21, 0x03	; 3
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	8e e5       	ldi	r24, 0x5E	; 94
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1026:	6e e5       	ldi	r22, 0x5E	; 94
    1028:	72 e0       	ldi	r23, 0x02	; 2
    102a:	80 e8       	ldi	r24, 0x80	; 128
    102c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    1030:	4a e0       	ldi	r20, 0x0A	; 10
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	69 e0       	ldi	r22, 0x09	; 9
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	ce 01       	movw	r24, r28
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1040:	25 e7       	ldi	r18, 0x75	; 117
    1042:	33 e0       	ldi	r19, 0x03	; 3
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	ce 01       	movw	r24, r28
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1050:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1052:	fe ce       	rjmp	.-516    	; 0xe50 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    1054:	4a e0       	ldi	r20, 0x0A	; 10
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	6b e0       	ldi	r22, 0x0B	; 11
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	ce 01       	movw	r24, r28
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
    1064:	2f e8       	ldi	r18, 0x8F	; 143
    1066:	33 e0       	ldi	r19, 0x03	; 3
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1074:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1076:	ec ce       	rjmp	.-552    	; 0xe50 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
    1078:	8e e5       	ldi	r24, 0x5E	; 94
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <parse_err>
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <__DATA_REGION_LENGTH__+0xaa>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    1082:	0e 94 a4 21 	call	0x4348	; 0x4348 <uart0_hal_message_ready>
    1086:	88 23       	and	r24, r24
    1088:	09 f4       	brne	.+2      	; 0x108c <__DATA_REGION_LENGTH__+0x8c>
    108a:	e2 ce       	rjmp	.-572    	; 0xe50 <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
    108c:	8e e5       	ldi	r24, 0x5E	; 94
    108e:	92 e0       	ldi	r25, 0x02	; 2
    1090:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    1094:	6e e5       	ldi	r22, 0x5E	; 94
    1096:	72 e0       	ldi	r23, 0x02	; 2
    1098:	ce 01       	movw	r24, r28
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <util_matchMessage>
    10a0:	18 2f       	mov	r17, r24
    10a2:	d6 ce       	rjmp	.-596    	; 0xe50 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <__DATA_REGION_LENGTH__+0xaa>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    10aa:	28 96       	adiw	r28, 0x08	; 8
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	08 95       	ret

Disassembly of section .text.set_block_uplink:

0000412c <set_block_uplink>:
	util_lora_forward_msg(msg, res);
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    412c:	8e e1       	ldi	r24, 0x1E	; 30
    412e:	90 e2       	ldi	r25, 0x20	; 32
    4130:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <TC2_HAL_subscribe>
    4134:	80 93 aa 0d 	sts	0x0DAA, r24	; 0x800daa <subPointer>
	busy=true;
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	80 93 ab 0d 	sts	0x0DAB, r24	; 0x800dab <busy>
	cnt=0;
    413e:	10 92 ac 0d 	sts	0x0DAC, r1	; 0x800dac <cnt>
    4142:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

0000403c <cb_block_uplink>:
}

static void cb_block_uplink(){
	cnt++;
    403c:	80 91 ac 0d 	lds	r24, 0x0DAC	; 0x800dac <cnt>
    4040:	8f 5f       	subi	r24, 0xFF	; 255
    4042:	80 93 ac 0d 	sts	0x0DAC, r24	; 0x800dac <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    4046:	86 30       	cpi	r24, 0x06	; 6
    4048:	30 f0       	brcs	.+12     	; 0x4056 <cb_block_uplink+0x1a>
		busy=false;
    404a:	10 92 ab 0d 	sts	0x0DAB, r1	; 0x800dab <busy>
		TC2_HAL_cancel(subPointer);
    404e:	80 91 aa 0d 	lds	r24, 0x0DAA	; 0x800daa <subPointer>
    4052:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <TC2_HAL_cancel>
    4056:	08 95       	ret

Disassembly of section .text.LM_join_network:

000044f6 <LM_join_network>:

static void cb_block_uplink();
static void set_block_uplink();

LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    44f6:	0e 94 13 07 	call	0xe26	; 0xe26 <JN_join_network>
}
    44fa:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00003ce6 <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    3ce6:	1f 93       	push	r17
    3ce8:	cf 93       	push	r28
    3cea:	df 93       	push	r29
    3cec:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    3cee:	90 91 ab 0d 	lds	r25, 0x0DAB	; 0x800dab <busy>
    3cf2:	91 11       	cpse	r25, r1
    3cf4:	0a c0       	rjmp	.+20     	; 0x3d0a <LM_send_uplink+0x24>
    3cf6:	16 2f       	mov	r17, r22
    3cf8:	e9 01       	movw	r28, r18
	set_block_uplink();
    3cfa:	0e 94 96 20 	call	0x412c	; 0x412c <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    3cfe:	41 2f       	mov	r20, r17
    3d00:	be 01       	movw	r22, r28
    3d02:	84 e6       	ldi	r24, 0x64	; 100
    3d04:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <SU_send_uplink>
    3d08:	01 c0       	rjmp	.+2      	; 0x3d0c <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    3d0a:	82 e0       	ldi	r24, 0x02	; 2
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    3d0c:	df 91       	pop	r29
    3d0e:	cf 91       	pop	r28
    3d10:	1f 91       	pop	r17
    3d12:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

000044fc <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
    44fc:	0e 94 6f 16 	call	0x2cde	; 0x2cde <SC_put_to_sleep>
}
    4500:	08 95       	ret

Disassembly of section .text.LM_wake_up:

00004502 <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    4502:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <SC_wake_up>
}
    4506:	08 95       	ret

Disassembly of section .text.LM_is_free:

0000445c <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    445c:	90 91 ab 0d 	lds	r25, 0x0DAB	; 0x800dab <busy>
}
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	89 27       	eor	r24, r25
    4464:	08 95       	ret

Disassembly of section .text.tohex:

000027ee <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    27ee:	6f 92       	push	r6
    27f0:	7f 92       	push	r7
    27f2:	8f 92       	push	r8
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	7c 01       	movw	r14, r24
    2802:	3a 01       	movw	r6, r20
    2804:	86 2e       	mov	r8, r22
    2806:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    2808:	c0 e0       	ldi	r28, 0x00	; 0
    280a:	d0 e0       	ldi	r29, 0x00	; 0
    280c:	25 c0       	rjmp	.+74     	; 0x2858 <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    280e:	a8 2d       	mov	r26, r8
    2810:	c3 01       	movw	r24, r6
    2812:	8c 0f       	add	r24, r28
    2814:	9d 1f       	adc	r25, r29
    2816:	a1 1d       	adc	r26, r1
    2818:	d7 fd       	sbrc	r29, 7
    281a:	aa 95       	dec	r26
    281c:	fc 01       	movw	r30, r24
    281e:	24 91       	lpm	r18, Z
    2820:	a7 fd       	sbrc	r26, 7
    2822:	20 81       	ld	r18, Z
    2824:	ce 01       	movw	r24, r28
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	1f 92       	push	r1
    282c:	2f 93       	push	r18
    282e:	2d ec       	ldi	r18, 0xCD	; 205
    2830:	32 e0       	ldi	r19, 0x02	; 2
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	4f 93       	push	r20
    2836:	3f 93       	push	r19
    2838:	2f 93       	push	r18
    283a:	8e 0d       	add	r24, r14
    283c:	9f 1d       	adc	r25, r15
    283e:	9f 93       	push	r25
    2840:	8f 93       	push	r24
    2842:	0e 94 57 1a 	call	0x34ae	; 0x34ae <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    2846:	21 96       	adiw	r28, 0x01	; 1
    2848:	8d b7       	in	r24, 0x3d	; 61
    284a:	9e b7       	in	r25, 0x3e	; 62
    284c:	07 96       	adiw	r24, 0x07	; 7
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	9e bf       	out	0x3e, r25	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	8d bf       	out	0x3d, r24	; 61
    2858:	c0 17       	cp	r28, r16
    285a:	d1 07       	cpc	r29, r17
    285c:	c4 f2       	brlt	.-80     	; 0x280e <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	1f 91       	pop	r17
    2864:	0f 91       	pop	r16
    2866:	ff 90       	pop	r15
    2868:	ef 90       	pop	r14
    286a:	8f 90       	pop	r8
    286c:	7f 90       	pop	r7
    286e:	6f 90       	pop	r6
    2870:	08 95       	ret

Disassembly of section .text.attach_ending:

00004058 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    4058:	fc 01       	movw	r30, r24
    405a:	01 90       	ld	r0, Z+
    405c:	00 20       	and	r0, r0
    405e:	e9 f7       	brne	.-6      	; 0x405a <attach_ending+0x2>
    4060:	cf 01       	movw	r24, r30
    4062:	23 e0       	ldi	r18, 0x03	; 3
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	42 ed       	ldi	r20, 0xD2	; 210
    4068:	52 e0       	ldi	r21, 0x02	; 2
    406a:	60 e0       	ldi	r22, 0x00	; 0
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <memcpy>
    4072:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00003a3e <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    3a3e:	cf 93       	push	r28
    3a40:	df 93       	push	r29
    3a42:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    3a44:	0e 94 01 20 	call	0x4002	; 0x4002 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    3a48:	fe 01       	movw	r30, r28
    3a4a:	01 90       	ld	r0, Z+
    3a4c:	00 20       	and	r0, r0
    3a4e:	e9 f7       	brne	.-6      	; 0x3a4a <cmd_with_ending+0xc>
    3a50:	cf 01       	movw	r24, r30
    3a52:	23 e0       	ldi	r18, 0x03	; 3
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	42 ed       	ldi	r20, 0xD2	; 210
    3a58:	52 e0       	ldi	r21, 0x02	; 2
    3a5a:	60 e0       	ldi	r22, 0x00	; 0
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <memcpy>
	return strlen(buffer);
    3a62:	be 01       	movw	r22, r28
    3a64:	80 e8       	ldi	r24, 0x80	; 128
    3a66:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <strlen>
}
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

00002d3e <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    2d42:	44 36       	cpi	r20, 0x64	; 100
    2d44:	51 05       	cpc	r21, r1
    2d46:	61 05       	cpc	r22, r1
    2d48:	71 05       	cpc	r23, r1
    2d4a:	18 f1       	brcs	.+70     	; 0x2d92 <sys_sleep_cmd+0x54>
    2d4c:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    2d4e:	7f 93       	push	r23
    2d50:	6f 93       	push	r22
    2d52:	5f 93       	push	r21
    2d54:	4f 93       	push	r20
    2d56:	85 ed       	ldi	r24, 0xD5	; 213
    2d58:	92 e0       	ldi	r25, 0x02	; 2
    2d5a:	a0 e0       	ldi	r26, 0x00	; 0
    2d5c:	af 93       	push	r26
    2d5e:	9f 93       	push	r25
    2d60:	8f 93       	push	r24
    2d62:	8f ed       	ldi	r24, 0xDF	; 223
    2d64:	92 e0       	ldi	r25, 0x02	; 2
    2d66:	a0 e0       	ldi	r26, 0x00	; 0
    2d68:	af 93       	push	r26
    2d6a:	9f 93       	push	r25
    2d6c:	8f 93       	push	r24
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	0e 94 57 1a 	call	0x34ae	; 0x34ae <sprintf>
    return strlen(buffer);
    2d76:	be 01       	movw	r22, r28
    2d78:	80 e8       	ldi	r24, 0x80	; 128
    2d7a:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <strlen>
    2d7e:	2d b7       	in	r18, 0x3d	; 61
    2d80:	3e b7       	in	r19, 0x3e	; 62
    2d82:	24 5f       	subi	r18, 0xF4	; 244
    2d84:	3f 4f       	sbci	r19, 0xFF	; 255
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	3e bf       	out	0x3e, r19	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	2d bf       	out	0x3d, r18	; 61
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    2d92:	8f ef       	ldi	r24, 0xFF	; 255
    2d94:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

000030f8 <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    30f8:	0f 93       	push	r16
    30fa:	1f 93       	push	r17
    30fc:	cf 93       	push	r28
    30fe:	df 93       	push	r29
    3100:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    3102:	2f 93       	push	r18
    3104:	1f 93       	push	r17
    3106:	0f 93       	push	r16
    3108:	6f 93       	push	r22
    310a:	5f 93       	push	r21
    310c:	4f 93       	push	r20
    310e:	86 ee       	ldi	r24, 0xE6	; 230
    3110:	92 e0       	ldi	r25, 0x02	; 2
    3112:	a0 e0       	ldi	r26, 0x00	; 0
    3114:	af 93       	push	r26
    3116:	9f 93       	push	r25
    3118:	8f 93       	push	r24
    311a:	df 93       	push	r29
    311c:	cf 93       	push	r28
    311e:	0e 94 57 1a 	call	0x34ae	; 0x34ae <sprintf>
    return strlen(buffer);
    3122:	be 01       	movw	r22, r28
    3124:	80 e8       	ldi	r24, 0x80	; 128
    3126:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <strlen>
    312a:	2d b7       	in	r18, 0x3d	; 61
    312c:	3e b7       	in	r19, 0x3e	; 62
    312e:	25 5f       	subi	r18, 0xF5	; 245
    3130:	3f 4f       	sbci	r19, 0xFF	; 255
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	3e bf       	out	0x3e, r19	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	2d bf       	out	0x3d, r18	; 61
}
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

00003304 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    3304:	cf 92       	push	r12
    3306:	df 92       	push	r13
    3308:	ef 92       	push	r14
    330a:	0f 93       	push	r16
    330c:	1f 93       	push	r17
    330e:	cf 93       	push	r28
    3310:	df 93       	push	r29
    3312:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    3314:	6b 01       	movw	r12, r22
    3316:	80 e8       	ldi	r24, 0x80	; 128
    3318:	e8 2e       	mov	r14, r24
    331a:	8e 2d       	mov	r24, r14
    331c:	b6 01       	movw	r22, r12
    331e:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <strlen>
    3322:	40 97       	sbiw	r24, 0x10	; 16
    3324:	49 f4       	brne	.+18     	; 0x3338 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    3326:	2e 2d       	mov	r18, r14
    3328:	86 01       	movw	r16, r12
    332a:	4c ee       	ldi	r20, 0xEC	; 236
    332c:	52 e0       	ldi	r21, 0x02	; 2
    332e:	60 e0       	ldi	r22, 0x00	; 0
    3330:	ce 01       	movw	r24, r28
    3332:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <mac_set_parameter>
    3336:	02 c0       	rjmp	.+4      	; 0x333c <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    3338:	8f ef       	ldi	r24, 0xFF	; 255
    333a:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
    3344:	ef 90       	pop	r14
    3346:	df 90       	pop	r13
    3348:	cf 90       	pop	r12
    334a:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

0000334c <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    334c:	cf 92       	push	r12
    334e:	df 92       	push	r13
    3350:	ef 92       	push	r14
    3352:	0f 93       	push	r16
    3354:	1f 93       	push	r17
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    335c:	6b 01       	movw	r12, r22
    335e:	80 e8       	ldi	r24, 0x80	; 128
    3360:	e8 2e       	mov	r14, r24
    3362:	8e 2d       	mov	r24, r14
    3364:	b6 01       	movw	r22, r12
    3366:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <strlen>
    336a:	40 97       	sbiw	r24, 0x10	; 16
    336c:	49 f4       	brne	.+18     	; 0x3380 <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    336e:	2e 2d       	mov	r18, r14
    3370:	86 01       	movw	r16, r12
    3372:	4b ef       	ldi	r20, 0xFB	; 251
    3374:	52 e0       	ldi	r21, 0x02	; 2
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	ce 01       	movw	r24, r28
    337a:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <mac_set_parameter>
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    3380:	8f ef       	ldi	r24, 0xFF	; 255
    3382:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	ef 90       	pop	r14
    338e:	df 90       	pop	r13
    3390:	cf 90       	pop	r12
    3392:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00003394 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    3394:	cf 92       	push	r12
    3396:	df 92       	push	r13
    3398:	ef 92       	push	r14
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    33a4:	6b 01       	movw	r12, r22
    33a6:	80 e8       	ldi	r24, 0x80	; 128
    33a8:	e8 2e       	mov	r14, r24
    33aa:	8e 2d       	mov	r24, r14
    33ac:	b6 01       	movw	r22, r12
    33ae:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <strlen>
    33b2:	80 97       	sbiw	r24, 0x20	; 32
    33b4:	49 f4       	brne	.+18     	; 0x33c8 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    33b6:	2e 2d       	mov	r18, r14
    33b8:	86 01       	movw	r16, r12
    33ba:	4a e0       	ldi	r20, 0x0A	; 10
    33bc:	53 e0       	ldi	r21, 0x03	; 3
    33be:	60 e0       	ldi	r22, 0x00	; 0
    33c0:	ce 01       	movw	r24, r28
    33c2:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <mac_set_parameter>
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    33c8:	8f ef       	ldi	r24, 0xFF	; 255
    33ca:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	1f 91       	pop	r17
    33d2:	0f 91       	pop	r16
    33d4:	ef 90       	pop	r14
    33d6:	df 90       	pop	r13
    33d8:	cf 90       	pop	r12
    33da:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00003bf8 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    3bf8:	0f 93       	push	r16
    3bfa:	1f 93       	push	r17
	if(state==0){
    3bfc:	61 11       	cpse	r22, r1
    3bfe:	09 c0       	rjmp	.+18     	; 0x3c12 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    3c00:	09 e1       	ldi	r16, 0x19	; 25
    3c02:	13 e0       	ldi	r17, 0x03	; 3
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	4d e1       	ldi	r20, 0x1D	; 29
    3c08:	53 e0       	ldi	r21, 0x03	; 3
    3c0a:	60 e0       	ldi	r22, 0x00	; 0
    3c0c:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <mac_set_parameter>
    3c10:	08 c0       	rjmp	.+16     	; 0x3c22 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    3c12:	09 e2       	ldi	r16, 0x29	; 41
    3c14:	13 e0       	ldi	r17, 0x03	; 3
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	4d e1       	ldi	r20, 0x1D	; 29
    3c1a:	53 e0       	ldi	r21, 0x03	; 3
    3c1c:	60 e0       	ldi	r22, 0x00	; 0
    3c1e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <mac_set_parameter>
	}
}
    3c22:	1f 91       	pop	r17
    3c24:	0f 91       	pop	r16
    3c26:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

0000228c <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    228c:	df 92       	push	r13
    228e:	ef 92       	push	r14
    2290:	ff 92       	push	r15
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	c7 56       	subi	r28, 0x67	; 103
    22a0:	d1 09       	sbc	r29, r1
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    22ae:	9f ef       	ldi	r25, 0xFF	; 255
    22b0:	96 0f       	add	r25, r22
    22b2:	9f 3d       	cpi	r25, 0xDF	; 223
    22b4:	68 f5       	brcc	.+90     	; 0x2310 <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    22b6:	9f ef       	ldi	r25, 0xFF	; 255
    22b8:	92 0f       	add	r25, r18
    22ba:	93 33       	cpi	r25, 0x33	; 51
    22bc:	60 f5       	brcc	.+88     	; 0x2316 <mac_tx_confirmed+0x8a>
    22be:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	60 e8       	ldi	r22, 0x80	; 128
    22c4:	ce 01       	movw	r24, r28
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	7c 01       	movw	r14, r24
    22ca:	0e 94 f7 13 	call	0x27ee	; 0x27ee <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    22ce:	c7 01       	movw	r24, r14
    22d0:	a0 e8       	ldi	r26, 0x80	; 128
    22d2:	af 93       	push	r26
    22d4:	9f 93       	push	r25
    22d6:	ef 92       	push	r14
    22d8:	1f 92       	push	r1
    22da:	df 92       	push	r13
    22dc:	8c e2       	ldi	r24, 0x2C	; 44
    22de:	93 e0       	ldi	r25, 0x03	; 3
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	af 93       	push	r26
    22e4:	9f 93       	push	r25
    22e6:	8f 93       	push	r24
    22e8:	87 e3       	ldi	r24, 0x37	; 55
    22ea:	93 e0       	ldi	r25, 0x03	; 3
    22ec:	a0 e0       	ldi	r26, 0x00	; 0
    22ee:	af 93       	push	r26
    22f0:	9f 93       	push	r25
    22f2:	8f 93       	push	r24
    22f4:	1f 93       	push	r17
    22f6:	0f 93       	push	r16
    22f8:	0e 94 57 1a 	call	0x34ae	; 0x34ae <sprintf>
    
	
    return strlen(buffer);
    22fc:	b8 01       	movw	r22, r16
    22fe:	80 e8       	ldi	r24, 0x80	; 128
    2300:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <strlen>
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	05 c0       	rjmp	.+10     	; 0x231a <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    2310:	8f ef       	ldi	r24, 0xFF	; 255
    2312:	9f ef       	ldi	r25, 0xFF	; 255
    2314:	02 c0       	rjmp	.+4      	; 0x231a <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    2316:	8f ef       	ldi	r24, 0xFF	; 255
    2318:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    231a:	c9 59       	subi	r28, 0x99	; 153
    231c:	df 4f       	sbci	r29, 0xFF	; 255
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	1f 91       	pop	r17
    232e:	0f 91       	pop	r16
    2330:	ff 90       	pop	r15
    2332:	ef 90       	pop	r14
    2334:	df 90       	pop	r13
    2336:	08 95       	ret

Disassembly of section .text.decode_tx_response:

00002c10 <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    2c10:	cf 92       	push	r12
    2c12:	df 92       	push	r13
    2c14:	ef 92       	push	r14
    2c16:	6b 01       	movw	r12, r22
    2c18:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    2c1a:	28 e9       	ldi	r18, 0x98	; 152
    2c1c:	33 e0       	ldi	r19, 0x03	; 3
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	0e 94 de 1a 	call	0x35bc	; 0x35bc <strcmp>
    2c24:	89 2b       	or	r24, r25
    2c26:	e9 f0       	breq	.+58     	; 0x2c62 <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    2c28:	23 ea       	ldi	r18, 0xA3	; 163
    2c2a:	33 e0       	ldi	r19, 0x03	; 3
    2c2c:	40 e0       	ldi	r20, 0x00	; 0
    2c2e:	8e 2d       	mov	r24, r14
    2c30:	b6 01       	movw	r22, r12
    2c32:	0e 94 de 1a 	call	0x35bc	; 0x35bc <strcmp>
    2c36:	89 2b       	or	r24, r25
    2c38:	b1 f0       	breq	.+44     	; 0x2c66 <decode_tx_response+0x56>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    2c3a:	2b ea       	ldi	r18, 0xAB	; 171
    2c3c:	33 e0       	ldi	r19, 0x03	; 3
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	8e 2d       	mov	r24, r14
    2c42:	b6 01       	movw	r22, r12
    2c44:	0e 94 39 19 	call	0x3272	; 0x3272 <util_strbeginswith>
    2c48:	81 11       	cpse	r24, r1
    2c4a:	0f c0       	rjmp	.+30     	; 0x2c6a <decode_tx_response+0x5a>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    2c4c:	22 eb       	ldi	r18, 0xB2	; 178
    2c4e:	33 e0       	ldi	r19, 0x03	; 3
    2c50:	40 e0       	ldi	r20, 0x00	; 0
    2c52:	8e 2d       	mov	r24, r14
    2c54:	b6 01       	movw	r22, r12
    2c56:	0e 94 39 19 	call	0x3272	; 0x3272 <util_strbeginswith>
    2c5a:	88 23       	and	r24, r24
    2c5c:	41 f0       	breq	.+16     	; 0x2c6e <decode_tx_response+0x5e>
    2c5e:	85 e0       	ldi	r24, 0x05	; 5
    2c60:	07 c0       	rjmp	.+14     	; 0x2c70 <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	05 c0       	rjmp	.+10     	; 0x2c70 <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    2c66:	84 e0       	ldi	r24, 0x04	; 4
    2c68:	03 c0       	rjmp	.+6      	; 0x2c70 <decode_tx_response+0x60>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	01 c0       	rjmp	.+2      	; 0x2c70 <decode_tx_response+0x60>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
}
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00001a1c <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	28 97       	sbiw	r28, 0x08	; 8
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	d8 2e       	mov	r13, r24
    1a3c:	7b 01       	movw	r14, r22
    1a3e:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    1a40:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    1a42:	12 30       	cpi	r17, 0x02	; 2
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <SU_send_uplink+0x2c>
    1a46:	40 c0       	rjmp	.+128    	; 0x1ac8 <SU_send_uplink+0xac>
    1a48:	28 f4       	brcc	.+10     	; 0x1a54 <SU_send_uplink+0x38>
    1a4a:	11 23       	and	r17, r17
    1a4c:	49 f0       	breq	.+18     	; 0x1a60 <SU_send_uplink+0x44>
    1a4e:	11 30       	cpi	r17, 0x01	; 1
    1a50:	49 f1       	breq	.+82     	; 0x1aa4 <SU_send_uplink+0x88>
    1a52:	f7 cf       	rjmp	.-18     	; 0x1a42 <SU_send_uplink+0x26>
    1a54:	13 30       	cpi	r17, 0x03	; 3
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <SU_send_uplink+0x3e>
    1a58:	4e c0       	rjmp	.+156    	; 0x1af6 <SU_send_uplink+0xda>
    1a5a:	14 30       	cpi	r17, 0x04	; 4
    1a5c:	d9 f1       	breq	.+118    	; 0x1ad4 <SU_send_uplink+0xb8>
    1a5e:	f1 cf       	rjmp	.-30     	; 0x1a42 <SU_send_uplink+0x26>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    1a60:	20 2f       	mov	r18, r16
    1a62:	a7 01       	movw	r20, r14
    1a64:	6d 2d       	mov	r22, r13
    1a66:	8e e5       	ldi	r24, 0x5E	; 94
    1a68:	92 e0       	ldi	r25, 0x02	; 2
    1a6a:	0e 94 46 11 	call	0x228c	; 0x228c <mac_tx_confirmed>
				attach_ending(lm_msg);
    1a6e:	8e e5       	ldi	r24, 0x5E	; 94
    1a70:	92 e0       	ldi	r25, 0x02	; 2
    1a72:	0e 94 2c 20 	call	0x4058	; 0x4058 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1a76:	6e e5       	ldi	r22, 0x5E	; 94
    1a78:	72 e0       	ldi	r23, 0x02	; 2
    1a7a:	80 e8       	ldi	r24, 0x80	; 128
    1a7c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    1a80:	42 e0       	ldi	r20, 0x02	; 2
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	ce 01       	movw	r24, r28
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1a90:	23 ec       	ldi	r18, 0xC3	; 195
    1a92:	33 e0       	ldi	r19, 0x03	; 3
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	ce 01       	movw	r24, r28
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1aa0:	14 e0       	ldi	r17, 0x04	; 4
			break;
    1aa2:	cf cf       	rjmp	.-98     	; 0x1a42 <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    1aa4:	42 e0       	ldi	r20, 0x02	; 2
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	63 e0       	ldi	r22, 0x03	; 3
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	ce 01       	movw	r24, r28
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	0e 94 01 22 	call	0x4402	; 0x4402 <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    1ab4:	26 ec       	ldi	r18, 0xC6	; 198
    1ab6:	33 e0       	ldi	r19, 0x03	; 3
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	ce 01       	movw	r24, r28
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	0e 94 07 22 	call	0x440e	; 0x440e <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    1ac4:	14 e0       	ldi	r17, 0x04	; 4
			break;
    1ac6:	bd cf       	rjmp	.-134    	; 0x1a42 <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    1ac8:	6e e5       	ldi	r22, 0x5E	; 94
    1aca:	72 e0       	ldi	r23, 0x02	; 2
    1acc:	80 e8       	ldi	r24, 0x80	; 128
    1ace:	0e 94 08 16 	call	0x2c10	; 0x2c10 <decode_tx_response>
    1ad2:	12 c0       	rjmp	.+36     	; 0x1af8 <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    1ad4:	0e 94 a4 21 	call	0x4348	; 0x4348 <uart0_hal_message_ready>
    1ad8:	88 23       	and	r24, r24
    1ada:	09 f4       	brne	.+2      	; 0x1ade <SU_send_uplink+0xc2>
    1adc:	b2 cf       	rjmp	.-156    	; 0x1a42 <SU_send_uplink+0x26>
					uart0_hal_read_message_as_str(lm_msg);
    1ade:	8e e5       	ldi	r24, 0x5E	; 94
    1ae0:	92 e0       	ldi	r25, 0x02	; 2
    1ae2:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    1ae6:	6e e5       	ldi	r22, 0x5E	; 94
    1ae8:	72 e0       	ldi	r23, 0x02	; 2
    1aea:	ce 01       	movw	r24, r28
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <util_matchMessage>
    1af2:	18 2f       	mov	r17, r24
    1af4:	a6 cf       	rjmp	.-180    	; 0x1a42 <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    1af6:	80 e0       	ldi	r24, 0x00	; 0
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    1af8:	28 96       	adiw	r28, 0x08	; 8
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	df 90       	pop	r13
    1b12:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

00002cde <SC_put_to_sleep>:
#include "sleep_controller.h"
#include "../RN2483_protocol/RN2483_protocol.h"
#include "../util/util.h"
#include "../../../HAL/UART0/UART0_HAL.h"

LM_STATUS SC_put_to_sleep(){
    2cde:	cf 92       	push	r12
    2ce0:	df 92       	push	r13
    2ce2:	ef 92       	push	r14
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	5c e5       	ldi	r21, 0x5C	; 92
    2ce8:	66 e2       	ldi	r22, 0x26	; 38
    2cea:	75 e0       	ldi	r23, 0x05	; 5
    2cec:	8e e5       	ldi	r24, 0x5E	; 94
    2cee:	92 e0       	ldi	r25, 0x02	; 2
    2cf0:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <sys_sleep_cmd>
	attach_ending(lm_msg);
    2cf4:	8e e5       	ldi	r24, 0x5E	; 94
    2cf6:	92 e0       	ldi	r25, 0x02	; 2
    2cf8:	0e 94 2c 20 	call	0x4058	; 0x4058 <attach_ending>
	uart0_hal_send_string(lm_msg);
    2cfc:	8e e5       	ldi	r24, 0x5E	; 94
    2cfe:	92 e0       	ldi	r25, 0x02	; 2
    2d00:	6c 01       	movw	r12, r24
    2d02:	20 e8       	ldi	r18, 0x80	; 128
    2d04:	e2 2e       	mov	r14, r18
    2d06:	8e 2d       	mov	r24, r14
    2d08:	b6 01       	movw	r22, r12
    2d0a:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <uart0_hal_send_string>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    2d0e:	0e 94 a4 21 	call	0x4348	; 0x4348 <uart0_hal_message_ready>
    2d12:	88 23       	and	r24, r24
    2d14:	e1 f3       	breq	.-8      	; 0x2d0e <SC_put_to_sleep+0x30>
	
	uart0_hal_read_message_as_str(lm_msg);
    2d16:	8e e5       	ldi	r24, 0x5E	; 94
    2d18:	92 e0       	ldi	r25, 0x02	; 2
    2d1a:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <uart0_hal_read_message_as_str>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    2d1e:	22 ee       	ldi	r18, 0xE2	; 226
    2d20:	33 e0       	ldi	r19, 0x03	; 3
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	8e 2d       	mov	r24, r14
    2d26:	b6 01       	movw	r22, r12
    2d28:	0e 94 de 1a 	call	0x35bc	; 0x35bc <strcmp>
    2d2c:	89 2b       	or	r24, r25
    2d2e:	11 f4       	brne	.+4      	; 0x2d34 <SC_put_to_sleep+0x56>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	01 c0       	rjmp	.+2      	; 0x2d36 <SC_put_to_sleep+0x58>
	return LM_STATUS_FATAL_ERROR;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
}
    2d36:	ef 90       	pop	r14
    2d38:	df 90       	pop	r13
    2d3a:	cf 90       	pop	r12
    2d3c:	08 95       	ret

Disassembly of section .text.SC_wake_up:

00003a70 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    3a70:	85 e5       	ldi	r24, 0x55	; 85
    3a72:	0e 94 ee 19 	call	0x33dc	; 0x33dc <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
    3a76:	0e 94 a4 21 	call	0x4348	; 0x4348 <uart0_hal_message_ready>
    3a7a:	88 23       	and	r24, r24
    3a7c:	e1 f3       	breq	.-8      	; 0x3a76 <SC_wake_up+0x6>
	
	uart0_hal_read_message_as_str(lm_msg);
    3a7e:	8e e5       	ldi	r24, 0x5E	; 94
    3a80:	92 e0       	ldi	r25, 0x02	; 2
    3a82:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <uart0_hal_read_message_as_str>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    3a86:	6e e5       	ldi	r22, 0x5E	; 94
    3a88:	72 e0       	ldi	r23, 0x02	; 2
    3a8a:	80 e8       	ldi	r24, 0x80	; 128
    3a8c:	22 ee       	ldi	r18, 0xE2	; 226
    3a8e:	33 e0       	ldi	r19, 0x03	; 3
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	0e 94 de 1a 	call	0x35bc	; 0x35bc <strcmp>
    3a96:	89 2b       	or	r24, r25
    3a98:	11 f4       	brne	.+4      	; 0x3a9e <SC_wake_up+0x2e>
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	08 95       	ret
	return LM_STATUS_FATAL_ERROR;
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

00004402 <util_setPendingStates>:


char lm_msg[200];

void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    4402:	fc 01       	movw	r30, r24
    4404:	71 83       	std	Z+1, r23	; 0x01
    4406:	60 83       	st	Z, r22
	sd->failure_state=failed;
    4408:	53 83       	std	Z+3, r21	; 0x03
    440a:	42 83       	std	Z+2, r20	; 0x02
    440c:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

0000440e <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    440e:	fc 01       	movw	r30, r24
    4410:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    4412:	25 83       	std	Z+5, r18	; 0x05
    4414:	36 83       	std	Z+6, r19	; 0x06
    4416:	47 83       	std	Z+7, r20	; 0x07
    4418:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

00003272 <util_strbeginswith>:
		return sd->failure_state;
	}
}


bool util_strbeginswith(const char *s1, const char *s2){
    3272:	6f 92       	push	r6
    3274:	7f 92       	push	r7
    3276:	8f 92       	push	r8
    3278:	cf 92       	push	r12
    327a:	df 92       	push	r13
    327c:	ef 92       	push	r14
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	3b 01       	movw	r6, r22
    3284:	88 2e       	mov	r8, r24
    3286:	69 01       	movw	r12, r18
    3288:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    328a:	84 2f       	mov	r24, r20
    328c:	b9 01       	movw	r22, r18
    328e:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <strlen>
    3292:	8c 01       	movw	r16, r24
    3294:	4e 2d       	mov	r20, r14
    3296:	96 01       	movw	r18, r12
    3298:	88 2d       	mov	r24, r8
    329a:	b3 01       	movw	r22, r6
    329c:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <strncmp>
    32a0:	21 e0       	ldi	r18, 0x01	; 1
    32a2:	89 2b       	or	r24, r25
    32a4:	09 f0       	breq	.+2      	; 0x32a8 <util_strbeginswith+0x36>
    32a6:	20 e0       	ldi	r18, 0x00	; 0
}
    32a8:	82 2f       	mov	r24, r18
    32aa:	1f 91       	pop	r17
    32ac:	0f 91       	pop	r16
    32ae:	ef 90       	pop	r14
    32b0:	df 90       	pop	r13
    32b2:	cf 90       	pop	r12
    32b4:	8f 90       	pop	r8
    32b6:	7f 90       	pop	r7
    32b8:	6f 90       	pop	r6
    32ba:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00002dfa <util_matchMessage>:
void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    2dfa:	cf 93       	push	r28
    2dfc:	df 93       	push	r29
    2dfe:	ec 01       	movw	r28, r24
	switch(sd->matchCase){
    2e00:	8c 81       	ldd	r24, Y+4	; 0x04
    2e02:	81 30       	cpi	r24, 0x01	; 1
    2e04:	91 f0       	breq	.+36     	; 0x2e2a <util_matchMessage+0x30>
    2e06:	18 f0       	brcs	.+6      	; 0x2e0e <util_matchMessage+0x14>
    2e08:	82 30       	cpi	r24, 0x02	; 2
    2e0a:	e9 f0       	breq	.+58     	; 0x2e46 <util_matchMessage+0x4c>
    2e0c:	1f c0       	rjmp	.+62     	; 0x2e4c <util_matchMessage+0x52>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    2e0e:	2d 81       	ldd	r18, Y+5	; 0x05
    2e10:	3e 81       	ldd	r19, Y+6	; 0x06
    2e12:	4f 81       	ldd	r20, Y+7	; 0x07
    2e14:	80 e8       	ldi	r24, 0x80	; 128
    2e16:	0e 94 de 1a 	call	0x35bc	; 0x35bc <strcmp>
    2e1a:	89 2b       	or	r24, r25
    2e1c:	19 f4       	brne	.+6      	; 0x2e24 <util_matchMessage+0x2a>
    2e1e:	88 81       	ld	r24, Y
    2e20:	99 81       	ldd	r25, Y+1	; 0x01
    2e22:	16 c0       	rjmp	.+44     	; 0x2e50 <util_matchMessage+0x56>
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	9b 81       	ldd	r25, Y+3	; 0x03
    2e28:	13 c0       	rjmp	.+38     	; 0x2e50 <util_matchMessage+0x56>

		case LM_BEGINS_WITH:
		return util_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    2e2a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e2c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e2e:	4f 81       	ldd	r20, Y+7	; 0x07
    2e30:	80 e8       	ldi	r24, 0x80	; 128
    2e32:	0e 94 39 19 	call	0x3272	; 0x3272 <util_strbeginswith>
    2e36:	88 23       	and	r24, r24
    2e38:	19 f0       	breq	.+6      	; 0x2e40 <util_matchMessage+0x46>
    2e3a:	88 81       	ld	r24, Y
    2e3c:	99 81       	ldd	r25, Y+1	; 0x01
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <util_matchMessage+0x56>
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	9b 81       	ldd	r25, Y+3	; 0x03
    2e44:	05 c0       	rjmp	.+10     	; 0x2e50 <util_matchMessage+0x56>

		case LM_NO_TEST:
		return sd->success_state;
    2e46:	88 81       	ld	r24, Y
    2e48:	99 81       	ldd	r25, Y+1	; 0x01
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <util_matchMessage+0x56>
		default:
		return sd->failure_state;
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	08 95       	ret

Disassembly of section .text.get_group_id:

00004508 <get_group_id>:
}


uint8_t get_group_id(){
    return _groupId;
}
    4508:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <_groupId>
    450c:	08 95       	ret

Disassembly of section .text.set_group_id:

0000450e <set_group_id>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
    450e:	80 93 ad 0d 	sts	0x0DAD, r24	; 0x800dad <_groupId>
    4512:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00003aa2 <MRPP_init_group>:
uint8_t _groupId=0;

uint8_t get_group_id();
void set_group_id(uint8_t groupId);

void MRPP_init_group(COLLECTION collections[], uint8_t nCollections){
    3aa2:	0f 93       	push	r16
    3aa4:	1f 93       	push	r17
    3aa6:	cf 93       	push	r28
    3aa8:	df 93       	push	r29
    3aaa:	8c 01       	movw	r16, r24
    3aac:	d6 2f       	mov	r29, r22
    uint8_t groupId=get_group_id();
    3aae:	0e 94 84 22 	call	0x4508	; 0x4508 <get_group_id>
    3ab2:	c8 2f       	mov	r28, r24

    mrpp_state_init(&state, groupId, collections, nCollections);
    3ab4:	2d 2f       	mov	r18, r29
    3ab6:	a8 01       	movw	r20, r16
    3ab8:	68 2f       	mov	r22, r24
    3aba:	86 e2       	ldi	r24, 0x26	; 38
    3abc:	93 e0       	ldi	r25, 0x03	; 3
    3abe:	0e 94 65 08 	call	0x10ca	; 0x10ca <mrpp_state_init>

    groupId++;
    set_group_id(groupId);
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	8c 0f       	add	r24, r28
    3ac6:	0e 94 87 22 	call	0x450e	; 0x450e <set_group_id>
}
    3aca:	df 91       	pop	r29
    3acc:	cf 91       	pop	r28
    3ace:	1f 91       	pop	r17
    3ad0:	0f 91       	pop	r16
    3ad2:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

00002ac8 <MRPP_add_collection_data_INT16>:

void set_group_id(uint8_t groupId){
    _groupId=groupId;
}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    2ac8:	ef 92       	push	r14
    2aca:	ff 92       	push	r15
    2acc:	1f 93       	push	r17
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	2a 97       	sbiw	r28, 0x0a	; 10
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	18 2f       	mov	r17, r24
    2ae4:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    2ae6:	9e 01       	movw	r18, r28
    2ae8:	2f 5f       	subi	r18, 0xFF	; 255
    2aea:	3f 4f       	sbci	r19, 0xFF	; 255
    2aec:	ab 01       	movw	r20, r22
    2aee:	68 2f       	mov	r22, r24
    2af0:	86 e2       	ldi	r24, 0x26	; 38
    2af2:	93 e0       	ldi	r25, 0x03	; 3
    2af4:	0e 94 b4 13 	call	0x2768	; 0x2768 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    2af8:	9e 01       	movw	r18, r28
    2afa:	27 5f       	subi	r18, 0xF7	; 247
    2afc:	3f 4f       	sbci	r19, 0xFF	; 255
    2afe:	ae 01       	movw	r20, r28
    2b00:	49 5f       	subi	r20, 0xF9	; 249
    2b02:	5f 4f       	sbci	r21, 0xFF	; 255
    2b04:	61 2f       	mov	r22, r17
    2b06:	86 e2       	ldi	r24, 0x26	; 38
    2b08:	93 e0       	ldi	r25, 0x03	; 3
    2b0a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    2b0e:	29 85       	ldd	r18, Y+9	; 0x09
    2b10:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b12:	4f 81       	ldd	r20, Y+7	; 0x07
    2b14:	58 85       	ldd	r21, Y+8	; 0x08
    2b16:	b7 01       	movw	r22, r14
    2b18:	ce 01       	movw	r24, r28
    2b1a:	01 96       	adiw	r24, 0x01	; 1
    2b1c:	0e 94 26 13 	call	0x264c	; 0x264c <mrpp_data_add_int16>
}
    2b20:	2a 96       	adiw	r28, 0x0a	; 10
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	1f 91       	pop	r17
    2b32:	ff 90       	pop	r15
    2b34:	ef 90       	pop	r14
    2b36:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00003e02 <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    3e02:	cf 93       	push	r28
    3e04:	df 93       	push	r29
    3e06:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    3e08:	86 e2       	ldi	r24, 0x26	; 38
    3e0a:	93 e0       	ldi	r25, 0x03	; 3
    3e0c:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <mrpp_state_is_body_ready>
    3e10:	88 83       	st	Y, r24
    3e12:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    3e14:	89 2f       	mov	r24, r25
    3e16:	80 95       	com	r24
    
}
    3e18:	88 1f       	adc	r24, r24
    3e1a:	88 27       	eor	r24, r24
    3e1c:	88 1f       	adc	r24, r24
    3e1e:	df 91       	pop	r29
    3e20:	cf 91       	pop	r28
    3e22:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

000025b6 <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    25b6:	af 92       	push	r10
    25b8:	bf 92       	push	r11
    25ba:	cf 92       	push	r12
    25bc:	df 92       	push	r13
    25be:	ef 92       	push	r14
    25c0:	ff 92       	push	r15
    25c2:	0f 93       	push	r16
    25c4:	1f 93       	push	r17
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <MRPP_get_ready_body_package+0x16>
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <MRPP_get_ready_body_package+0x18>
    25ce:	1f 92       	push	r1
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	6b 01       	movw	r12, r22
    25d6:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    25d8:	9e 01       	movw	r18, r28
    25da:	2b 5f       	subi	r18, 0xFB	; 251
    25dc:	3f 4f       	sbci	r19, 0xFF	; 255
    25de:	79 01       	movw	r14, r18
    25e0:	8e 01       	movw	r16, r28
    25e2:	0d 5f       	subi	r16, 0xFD	; 253
    25e4:	1f 4f       	sbci	r17, 0xFF	; 255
    25e6:	23 50       	subi	r18, 0x03	; 3
    25e8:	31 09       	sbc	r19, r1
    25ea:	ae 01       	movw	r20, r28
    25ec:	4f 5f       	subi	r20, 0xFF	; 255
    25ee:	5f 4f       	sbci	r21, 0xFF	; 255
    25f0:	bc 01       	movw	r22, r24
    25f2:	86 e2       	ldi	r24, 0x26	; 38
    25f4:	93 e0       	ldi	r25, 0x03	; 3
    25f6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <mrpp_state_get_ready_body>
    
    if(!res) return false;
    25fa:	88 23       	and	r24, r24
    25fc:	b1 f0       	breq	.+44     	; 0x262a <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    25fe:	4d 81       	ldd	r20, Y+5	; 0x05
    2600:	83 e0       	ldi	r24, 0x03	; 3
    2602:	84 0f       	add	r24, r20
    2604:	f5 01       	movw	r30, r10
    2606:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    2608:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <state>
    260c:	f6 01       	movw	r30, r12
    260e:	80 83       	st	Z, r24
    package[1]=subId;
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	6b 81       	ldd	r22, Y+3	; 0x03
    261c:	7c 81       	ldd	r23, Y+4	; 0x04
    261e:	c6 01       	movw	r24, r12
    2620:	03 96       	adiw	r24, 0x03	; 3
    2622:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <mrpp_data_get>

    return true;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	01 c0       	rjmp	.+2      	; 0x262c <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    262a:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	ff 90       	pop	r15
    2640:	ef 90       	pop	r14
    2642:	df 90       	pop	r13
    2644:	cf 90       	pop	r12
    2646:	bf 90       	pop	r11
    2648:	af 90       	pop	r10
    264a:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

0000441a <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    441a:	bc 01       	movw	r22, r24
    441c:	86 e2       	ldi	r24, 0x26	; 38
    441e:	93 e0       	ldi	r25, 0x03	; 3
    4420:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <mrpp_state_set_body_sent>
    4424:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

00003e24 <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    3e24:	cf 93       	push	r28
    3e26:	df 93       	push	r29
    3e28:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3e2a:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    3e2e:	fc 01       	movw	r30, r24
    3e30:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    3e32:	bf 01       	movw	r22, r30
    3e34:	86 e2       	ldi	r24, 0x26	; 38
    3e36:	93 e0       	ldi	r25, 0x03	; 3
    3e38:	0e 94 ee 11 	call	0x23dc	; 0x23dc <mrpp_state_get_header>
    *package_length+=1;
    3e3c:	8f 5f       	subi	r24, 0xFF	; 255
    3e3e:	88 83       	st	Y, r24
}
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

00003e46 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    3e4c:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    3e50:	fc 01       	movw	r30, r24
    3e52:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    3e54:	bf 01       	movw	r22, r30
    3e56:	86 e2       	ldi	r24, 0x26	; 38
    3e58:	93 e0       	ldi	r25, 0x03	; 3
    3e5a:	0e 94 9c 11 	call	0x2338	; 0x2338 <mrpp_state_get_tail>
    *package_length+=1;
    3e5e:	8f 5f       	subi	r24, 0xFF	; 255
    3e60:	88 83       	st	Y, r24
}
    3e62:	df 91       	pop	r29
    3e64:	cf 91       	pop	r28
    3e66:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

00004466 <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    4466:	86 e2       	ldi	r24, 0x26	; 38
    4468:	93 e0       	ldi	r25, 0x03	; 3
    446a:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <mrpp_state_all_bodies_sent>
}
    446e:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

0000264c <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    264c:	cf 92       	push	r12
    264e:	df 92       	push	r13
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    265c:	94 2f       	mov	r25, r20
    265e:	0c c0       	rjmp	.+24     	; 0x2678 <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    2660:	c9 2f       	mov	r28, r25
    2662:	d0 e0       	ldi	r29, 0x00	; 0
    2664:	e4 1b       	sub	r30, r20
    2666:	f5 0b       	sbc	r31, r21
    2668:	ea 0f       	add	r30, r26
    266a:	fb 1f       	adc	r31, r27
    266c:	80 81       	ld	r24, Z
    266e:	fe 01       	movw	r30, r28
    2670:	e0 54       	subi	r30, 0x40	; 64
    2672:	fc 4f       	sbci	r31, 0xFC	; 252
    2674:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    2676:	9f 5f       	subi	r25, 0xFF	; 255
    2678:	e9 2f       	mov	r30, r25
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	6a 01       	movw	r12, r20
    267e:	86 e0       	ldi	r24, 0x06	; 6
    2680:	c8 0e       	add	r12, r24
    2682:	d1 1c       	adc	r13, r1
    2684:	ec 15       	cp	r30, r12
    2686:	fd 05       	cpc	r31, r13
    2688:	58 f3       	brcs	.-42     	; 0x2660 <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    268a:	26 50       	subi	r18, 0x06	; 6
    268c:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    268e:	36 95       	lsr	r19
    2690:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    2692:	49 5f       	subi	r20, 0xF9	; 249
    2694:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	16 c0       	rjmp	.+44     	; 0x26c8 <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    269c:	cd 01       	movw	r24, r26
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	f6 01       	movw	r30, r12
    26a4:	e8 0f       	add	r30, r24
    26a6:	f9 1f       	adc	r31, r25
    26a8:	8b 01       	movw	r16, r22
    26aa:	08 0f       	add	r16, r24
    26ac:	19 1f       	adc	r17, r25
    26ae:	e8 01       	movw	r28, r16
    26b0:	f9 80       	ldd	r15, Y+1	; 0x01
    26b2:	e0 54       	subi	r30, 0x40	; 64
    26b4:	fc 4f       	sbci	r31, 0xFC	; 252
    26b6:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    26b8:	84 0f       	add	r24, r20
    26ba:	95 1f       	adc	r25, r21
    26bc:	18 81       	ld	r17, Y
    26be:	fc 01       	movw	r30, r24
    26c0:	e0 54       	subi	r30, 0x40	; 64
    26c2:	fc 4f       	sbci	r31, 0xFC	; 252
    26c4:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    26c6:	11 96       	adiw	r26, 0x01	; 1
    26c8:	a2 17       	cp	r26, r18
    26ca:	b3 07       	cpc	r27, r19
    26cc:	38 f3       	brcs	.-50     	; 0x269c <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	ff 90       	pop	r15
    26d8:	df 90       	pop	r13
    26da:	cf 90       	pop	r12
    26dc:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00003c28 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    3c28:	cf 93       	push	r28
    3c2a:	df 93       	push	r29
    3c2c:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    3c2e:	20 e0       	ldi	r18, 0x00	; 0
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	0c c0       	rjmp	.+24     	; 0x3c4c <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    3c34:	de 01       	movw	r26, r28
    3c36:	a2 0f       	add	r26, r18
    3c38:	b3 1f       	adc	r27, r19
    3c3a:	f9 01       	movw	r30, r18
    3c3c:	e6 0f       	add	r30, r22
    3c3e:	f7 1f       	adc	r31, r23
    3c40:	e0 54       	subi	r30, 0x40	; 64
    3c42:	fc 4f       	sbci	r31, 0xFC	; 252
    3c44:	90 81       	ld	r25, Z
    3c46:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    3c48:	2f 5f       	subi	r18, 0xFF	; 255
    3c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4c:	24 17       	cp	r18, r20
    3c4e:	35 07       	cpc	r19, r21
    3c50:	88 f3       	brcs	.-30     	; 0x3c34 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	08 95       	ret

Disassembly of section .text.add_data_types:

00001dd2 <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	dc 01       	movw	r26, r24
    1de4:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    1dea:	c1 2c       	mov	r12, r1
    1dec:	d1 2c       	mov	r13, r1
    1dee:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1df0:	4a c0       	rjmp	.+148    	; 0x1e86 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    1df2:	29 2f       	mov	r18, r25
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	f9 01       	movw	r30, r18
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	22 0f       	add	r18, r18
    1dfe:	33 1f       	adc	r19, r19
    1e00:	22 0f       	add	r18, r18
    1e02:	33 1f       	adc	r19, r19
    1e04:	22 0f       	add	r18, r18
    1e06:	33 1f       	adc	r19, r19
    1e08:	e2 0f       	add	r30, r18
    1e0a:	f3 1f       	adc	r31, r19
    1e0c:	ea 0f       	add	r30, r26
    1e0e:	fb 1f       	adc	r31, r27
    1e10:	27 81       	ldd	r18, Z+7	; 0x07
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	a9 f0       	breq	.+42     	; 0x1e40 <add_data_types+0x6e>
    1e16:	24 30       	cpi	r18, 0x04	; 4
    1e18:	21 f1       	breq	.+72     	; 0x1e62 <add_data_types+0x90>
    1e1a:	21 30       	cpi	r18, 0x01	; 1
    1e1c:	91 f5       	brne	.+100    	; 0x1e82 <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    1e1e:	01 e0       	ldi	r16, 0x01	; 1
    1e20:	10 e0       	ldi	r17, 0x00	; 0
    1e22:	04 2e       	mov	r0, r20
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <add_data_types+0x58>
    1e26:	00 0f       	add	r16, r16
    1e28:	11 1f       	adc	r17, r17
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <add_data_types+0x54>
    1e2e:	01 2e       	mov	r0, r17
    1e30:	00 0c       	add	r0, r0
    1e32:	22 0b       	sbc	r18, r18
    1e34:	33 0b       	sbc	r19, r19
    1e36:	c0 2a       	or	r12, r16
    1e38:	d1 2a       	or	r13, r17
    1e3a:	e2 2a       	or	r14, r18
    1e3c:	f3 2a       	or	r15, r19
                break;
    1e3e:	21 c0       	rjmp	.+66     	; 0x1e82 <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    1e40:	02 e0       	ldi	r16, 0x02	; 2
    1e42:	10 e0       	ldi	r17, 0x00	; 0
    1e44:	04 2e       	mov	r0, r20
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <add_data_types+0x7a>
    1e48:	00 0f       	add	r16, r16
    1e4a:	11 1f       	adc	r17, r17
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <add_data_types+0x76>
    1e50:	01 2e       	mov	r0, r17
    1e52:	00 0c       	add	r0, r0
    1e54:	22 0b       	sbc	r18, r18
    1e56:	33 0b       	sbc	r19, r19
    1e58:	c0 2a       	or	r12, r16
    1e5a:	d1 2a       	or	r13, r17
    1e5c:	e2 2a       	or	r14, r18
    1e5e:	f3 2a       	or	r15, r19
                break;
    1e60:	10 c0       	rjmp	.+32     	; 0x1e82 <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    1e62:	03 e0       	ldi	r16, 0x03	; 3
    1e64:	10 e0       	ldi	r17, 0x00	; 0
    1e66:	04 2e       	mov	r0, r20
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <add_data_types+0x9c>
    1e6a:	00 0f       	add	r16, r16
    1e6c:	11 1f       	adc	r17, r17
    1e6e:	0a 94       	dec	r0
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <add_data_types+0x98>
    1e72:	01 2e       	mov	r0, r17
    1e74:	00 0c       	add	r0, r0
    1e76:	22 0b       	sbc	r18, r18
    1e78:	33 0b       	sbc	r19, r19
    1e7a:	c0 2a       	or	r12, r16
    1e7c:	d1 2a       	or	r13, r17
    1e7e:	e2 2a       	or	r14, r18
    1e80:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    1e82:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    1e84:	9f 5f       	subi	r25, 0xFF	; 255
    1e86:	12 96       	adiw	r26, 0x02	; 2
    1e88:	8c 91       	ld	r24, X
    1e8a:	12 97       	sbiw	r26, 0x02	; 2
    1e8c:	98 17       	cp	r25, r24
    1e8e:	08 f4       	brcc	.+2      	; 0x1e92 <add_data_types+0xc0>
    1e90:	b0 cf       	rjmp	.-160    	; 0x1df2 <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    1e92:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    1e94:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    1e96:	cd 82       	std	Y+5, r12	; 0x05
} 
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	08 95       	ret

Disassembly of section .text.update_bodies:

00001438 <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    1438:	cf 93       	push	r28
    143a:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    143c:	26 2f       	mov	r18, r22
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	c9 01       	movw	r24, r18
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f9 01       	movw	r30, r18
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	22 0f       	add	r18, r18
    144c:	33 1f       	adc	r19, r19
    144e:	22 0f       	add	r18, r18
    1450:	33 1f       	adc	r19, r19
    1452:	22 0f       	add	r18, r18
    1454:	33 1f       	adc	r19, r19
    1456:	e2 0f       	add	r30, r18
    1458:	f3 1f       	adc	r31, r19
    145a:	ea 0f       	add	r30, r26
    145c:	fb 1f       	adc	r31, r27
    145e:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    1460:	c0 e0       	ldi	r28, 0x00	; 0
    1462:	25 c0       	rjmp	.+74     	; 0x14ae <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    1464:	82 17       	cp	r24, r18
    1466:	93 07       	cpc	r25, r19
    1468:	09 f1       	breq	.+66     	; 0x14ac <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    146a:	a9 01       	movw	r20, r18
    146c:	44 0f       	add	r20, r20
    146e:	55 1f       	adc	r21, r21
    1470:	44 0f       	add	r20, r20
    1472:	55 1f       	adc	r21, r21
    1474:	44 0f       	add	r20, r20
    1476:	55 1f       	adc	r21, r21
    1478:	f9 01       	movw	r30, r18
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	e4 0f       	add	r30, r20
    1480:	f5 1f       	adc	r31, r21
    1482:	ea 0f       	add	r30, r26
    1484:	fb 1f       	adc	r31, r27
    1486:	43 85       	ldd	r20, Z+11	; 0x0b
    1488:	74 13       	cpse	r23, r20
    148a:	10 c0       	rjmp	.+32     	; 0x14ac <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    148c:	f9 01       	movw	r30, r18
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	22 0f       	add	r18, r18
    1494:	33 1f       	adc	r19, r19
    1496:	22 0f       	add	r18, r18
    1498:	33 1f       	adc	r19, r19
    149a:	22 0f       	add	r18, r18
    149c:	33 1f       	adc	r19, r19
    149e:	e2 0f       	add	r30, r18
    14a0:	f3 1f       	adc	r31, r19
    14a2:	ea 0f       	add	r30, r26
    14a4:	fb 1f       	adc	r31, r27
    14a6:	24 85       	ldd	r18, Z+12	; 0x0c
    14a8:	23 30       	cpi	r18, 0x03	; 3
    14aa:	41 f4       	brne	.+16     	; 0x14bc <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    14ac:	cf 5f       	subi	r28, 0xFF	; 255
    14ae:	2c 2f       	mov	r18, r28
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	28 17       	cp	r18, r24
    14b4:	39 07       	cpc	r19, r25
    14b6:	b4 f2       	brlt	.-84     	; 0x1464 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    14b8:	21 e0       	ldi	r18, 0x01	; 1
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    14bc:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    14be:	22 23       	and	r18, r18
    14c0:	39 f0       	breq	.+14     	; 0x14d0 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    14c2:	fd 01       	movw	r30, r26
    14c4:	e7 0f       	add	r30, r23
    14c6:	f1 1d       	adc	r31, r1
    14c8:	e4 58       	subi	r30, 0x84	; 132
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    14d0:	9c 01       	movw	r18, r24
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	22 0f       	add	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	22 0f       	add	r18, r18
    14dc:	33 1f       	adc	r19, r19
    14de:	fc 01       	movw	r30, r24
    14e0:	ee 0f       	add	r30, r30
    14e2:	ff 1f       	adc	r31, r31
    14e4:	e2 0f       	add	r30, r18
    14e6:	f3 1f       	adc	r31, r19
    14e8:	ea 0f       	add	r30, r26
    14ea:	fb 1f       	adc	r31, r27
    14ec:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    14ee:	29 c0       	rjmp	.+82     	; 0x1542 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
    14f0:	46 2f       	mov	r20, r22
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	84 17       	cp	r24, r20
    14f6:	95 07       	cpc	r25, r21
    14f8:	19 f1       	breq	.+70     	; 0x1540 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    14fa:	9a 01       	movw	r18, r20
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	f9 01       	movw	r30, r18
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	22 0f       	add	r18, r18
    1508:	33 1f       	adc	r19, r19
    150a:	22 0f       	add	r18, r18
    150c:	33 1f       	adc	r19, r19
    150e:	22 0f       	add	r18, r18
    1510:	33 1f       	adc	r19, r19
    1512:	e2 0f       	add	r30, r18
    1514:	f3 1f       	adc	r31, r19
    1516:	ea 0f       	add	r30, r26
    1518:	fb 1f       	adc	r31, r27
    151a:	20 81       	ld	r18, Z
    151c:	c2 13       	cpse	r28, r18
    151e:	10 c0       	rjmp	.+32     	; 0x1540 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    1520:	fa 01       	movw	r30, r20
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	44 0f       	add	r20, r20
    1528:	55 1f       	adc	r21, r21
    152a:	44 0f       	add	r20, r20
    152c:	55 1f       	adc	r21, r21
    152e:	44 0f       	add	r20, r20
    1530:	55 1f       	adc	r21, r21
    1532:	e4 0f       	add	r30, r20
    1534:	f5 1f       	adc	r31, r21
    1536:	ea 0f       	add	r30, r26
    1538:	fb 1f       	adc	r31, r27
    153a:	24 85       	ldd	r18, Z+12	; 0x0c
    153c:	23 30       	cpi	r18, 0x03	; 3
    153e:	41 f4       	brne	.+16     	; 0x1550 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    1540:	6f 5f       	subi	r22, 0xFF	; 255
    1542:	12 96       	adiw	r26, 0x02	; 2
    1544:	2c 91       	ld	r18, X
    1546:	12 97       	sbiw	r26, 0x02	; 2
    1548:	62 17       	cp	r22, r18
    154a:	90 f2       	brcs	.-92     	; 0x14f0 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    1550:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    1552:	88 23       	and	r24, r24
    1554:	41 f0       	breq	.+16     	; 0x1566 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    1556:	fd 01       	movw	r30, r26
    1558:	ec 0f       	add	r30, r28
    155a:	f1 1d       	adc	r31, r1
    155c:	e4 58       	subi	r30, 0x84	; 132
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	80 83       	st	Z, r24
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    1566:	fd 01       	movw	r30, r26
    1568:	ec 0f       	add	r30, r28
    156a:	f1 1d       	adc	r31, r1
    156c:	e4 58       	subi	r30, 0x84	; 132
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    1572:	8c 2f       	mov	r24, r28
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	87 1b       	sub	r24, r23
    1578:	91 09       	sbc	r25, r1
    157a:	02 97       	sbiw	r24, 0x02	; 2
    157c:	64 f0       	brlt	.+24     	; 0x1596 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    157e:	7f 5f       	subi	r23, 0xFF	; 255
    1580:	08 c0       	rjmp	.+16     	; 0x1592 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    1582:	fd 01       	movw	r30, r26
    1584:	e7 0f       	add	r30, r23
    1586:	f1 1d       	adc	r31, r1
    1588:	e4 58       	subi	r30, 0x84	; 132
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    1590:	7f 5f       	subi	r23, 0xFF	; 255
    1592:	7c 17       	cp	r23, r28
    1594:	b0 f3       	brcs	.-20     	; 0x1582 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
    
}
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

000010ca <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    10ca:	af 92       	push	r10
    10cc:	bf 92       	push	r11
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	ec 01       	movw	r28, r24
    10e0:	c2 2e       	mov	r12, r18
    state->groupId=groupId;
    10e2:	68 83       	st	Y, r22
    state->nCollections=nCollections;
    10e4:	2a 83       	std	Y+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    10e6:	d1 2c       	mov	r13, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    10e8:	00 e0       	ldi	r16, 0x00	; 0
    10ea:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    10ec:	8f c0       	rjmp	.+286    	; 0x120c <__stack+0x10d>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    10ee:	ed 2d       	mov	r30, r13
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	cf 01       	movw	r24, r30
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	8e 0f       	add	r24, r30
    10fe:	9f 1f       	adc	r25, r31
    1100:	84 0f       	add	r24, r20
    1102:	95 1f       	adc	r25, r21
    1104:	dc 01       	movw	r26, r24
    1106:	12 96       	adiw	r26, 0x02	; 2
    1108:	6d 91       	ld	r22, X+
    110a:	7c 91       	ld	r23, X
    110c:	13 97       	sbiw	r26, 0x03	; 3
    110e:	df 01       	movw	r26, r30
    1110:	aa 0f       	add	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	9f 01       	movw	r18, r30
    1116:	22 0f       	add	r18, r18
    1118:	33 1f       	adc	r19, r19
    111a:	22 0f       	add	r18, r18
    111c:	33 1f       	adc	r19, r19
    111e:	22 0f       	add	r18, r18
    1120:	33 1f       	adc	r19, r19
    1122:	a2 0f       	add	r26, r18
    1124:	b3 1f       	adc	r27, r19
    1126:	5d 01       	movw	r10, r26
    1128:	ac 0e       	add	r10, r28
    112a:	bd 1e       	adc	r11, r29
    112c:	d5 01       	movw	r26, r10
    112e:	19 96       	adiw	r26, 0x09	; 9
    1130:	7c 93       	st	X, r23
    1132:	6e 93       	st	-X, r22
    1134:	18 97       	sbiw	r26, 0x08	; 8

        //type
        state->collections[i].type=collections[i].type;
    1136:	dc 01       	movw	r26, r24
    1138:	14 96       	adiw	r26, 0x04	; 4
    113a:	2c 91       	ld	r18, X
    113c:	d5 01       	movw	r26, r10
    113e:	17 96       	adiw	r26, 0x07	; 7
    1140:	2c 93       	st	X, r18
    1142:	17 97       	sbiw	r26, 0x07	; 7

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    1144:	14 96       	adiw	r26, 0x04	; 4
    1146:	1c 93       	st	X, r17
    1148:	0e 93       	st	-X, r16
    114a:	13 97       	sbiw	r26, 0x03	; 3
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    114c:	dc 01       	movw	r26, r24
    114e:	2d 91       	ld	r18, X+
    1150:	3c 91       	ld	r19, X
    1152:	11 97       	sbiw	r26, 0x01	; 1
    1154:	14 96       	adiw	r26, 0x04	; 4
    1156:	8c 91       	ld	r24, X
    1158:	82 9f       	mul	r24, r18
    115a:	70 01       	movw	r14, r0
    115c:	83 9f       	mul	r24, r19
    115e:	f0 0c       	add	r15, r0
    1160:	11 24       	eor	r1, r1
    1162:	b6 e0       	ldi	r27, 0x06	; 6
    1164:	eb 0e       	add	r14, r27
    1166:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    1168:	d5 01       	movw	r26, r10
    116a:	16 96       	adiw	r26, 0x06	; 6
    116c:	fc 92       	st	X, r15
    116e:	ee 92       	st	-X, r14
    1170:	15 97       	sbiw	r26, 0x05	; 5
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    1172:	98 01       	movw	r18, r16
    1174:	ab ea       	ldi	r26, 0xAB	; 171
    1176:	ba ea       	ldi	r27, 0xAA	; 170
    1178:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <__umulhisi3>
    117c:	96 95       	lsr	r25
    117e:	87 95       	ror	r24
    1180:	92 95       	swap	r25
    1182:	82 95       	swap	r24
    1184:	8f 70       	andi	r24, 0x0F	; 15
    1186:	89 27       	eor	r24, r25
    1188:	9f 70       	andi	r25, 0x0F	; 15
    118a:	89 27       	eor	r24, r25
    118c:	9f 01       	movw	r18, r30
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	d9 01       	movw	r26, r18
    1194:	aa 0f       	add	r26, r26
    1196:	bb 1f       	adc	r27, r27
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	22 0f       	add	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	22 0f       	add	r18, r18
    11a2:	33 1f       	adc	r19, r19
    11a4:	a2 0f       	add	r26, r18
    11a6:	b3 1f       	adc	r27, r19
    11a8:	ac 0f       	add	r26, r28
    11aa:	bd 1f       	adc	r27, r29
    11ac:	8c 93       	st	X, r24
        uint8_t endsInBody=(startingIndex+len)/DR_BODY_PAYLOAD_SIZE;
    11ae:	0e 0d       	add	r16, r14
    11b0:	1f 1d       	adc	r17, r15
    11b2:	98 01       	movw	r18, r16
    11b4:	ab ea       	ldi	r26, 0xAB	; 171
    11b6:	ba ea       	ldi	r27, 0xAA	; 170
    11b8:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <__umulhisi3>
    11bc:	7c 01       	movw	r14, r24
    11be:	f6 94       	lsr	r15
    11c0:	e7 94       	ror	r14
    11c2:	f6 94       	lsr	r15
    11c4:	e7 94       	ror	r14
    11c6:	f6 94       	lsr	r15
    11c8:	e7 94       	ror	r14
    11ca:	f6 94       	lsr	r15
    11cc:	e7 94       	ror	r14
    11ce:	f6 94       	lsr	r15
    11d0:	e7 94       	ror	r14
    11d2:	be 2c       	mov	r11, r14
        //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
        endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
    11d4:	20 e3       	ldi	r18, 0x30	; 48
    11d6:	2e 9d       	mul	r18, r14
    11d8:	c0 01       	movw	r24, r0
    11da:	2f 9d       	mul	r18, r15
    11dc:	90 0d       	add	r25, r0
    11de:	11 24       	eor	r1, r1
    11e0:	08 17       	cp	r16, r24
    11e2:	19 07       	cpc	r17, r25
    11e4:	19 f4       	brne	.+6      	; 0x11ec <__stack+0xed>
    11e6:	bb 24       	eor	r11, r11
    11e8:	ba 94       	dec	r11
    11ea:	be 0c       	add	r11, r14
        state->collections[i].endsInBody=endsInBody;
    11ec:	cf 01       	movw	r24, r30
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	e8 0f       	add	r30, r24
    1200:	f9 1f       	adc	r31, r25
    1202:	ec 0f       	add	r30, r28
    1204:	fd 1f       	adc	r31, r29
    1206:	b3 86       	std	Z+11, r11	; 0x0b
        

        //set status
        state->collections[i].status=WAITING;
    1208:	14 86       	std	Z+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    120a:	d3 94       	inc	r13
    120c:	dc 14       	cp	r13, r12
    120e:	08 f4       	brcc	.+2      	; 0x1212 <__stack+0x113>
    1210:	6e cf       	rjmp	.-292    	; 0x10ee <mrpp_state_init+0x24>

        startingIndex+=len;      
    }

    //Calculate lastSubId
    uint8_t lastSubId=startingIndex/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    1212:	98 01       	movw	r18, r16
    1214:	ab ea       	ldi	r26, 0xAB	; 171
    1216:	ba ea       	ldi	r27, 0xAA	; 170
    1218:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <__umulhisi3>
    121c:	fc 01       	movw	r30, r24
    121e:	f6 95       	lsr	r31
    1220:	e7 95       	ror	r30
    1222:	f2 95       	swap	r31
    1224:	e2 95       	swap	r30
    1226:	ef 70       	andi	r30, 0x0F	; 15
    1228:	ef 27       	eor	r30, r31
    122a:	ff 70       	andi	r31, 0x0F	; 15
    122c:	ef 27       	eor	r30, r31
    122e:	4e 2f       	mov	r20, r30
    1230:	52 e0       	ldi	r21, 0x02	; 2
    1232:	5e 0f       	add	r21, r30
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
    1234:	20 e3       	ldi	r18, 0x30	; 48
    1236:	2e 9f       	mul	r18, r30
    1238:	c0 01       	movw	r24, r0
    123a:	2f 9f       	mul	r18, r31
    123c:	90 0d       	add	r25, r0
    123e:	11 24       	eor	r1, r1
    1240:	08 1b       	sub	r16, r24
    1242:	19 0b       	sbc	r17, r25
    1244:	11 f4       	brne	.+4      	; 0x124a <__stack+0x14b>
    1246:	51 e0       	ldi	r21, 0x01	; 1
    1248:	5e 0f       	add	r21, r30
    state->lastSubId=lastSubId;
    124a:	59 83       	std	Y+1, r21	; 0x01
    
    //calculate bodies
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    124c:	01 2b       	or	r16, r17
    124e:	11 f0       	breq	.+4      	; 0x1254 <__stack+0x155>
    1250:	41 e0       	ldi	r20, 0x01	; 1
    1252:	4e 0f       	add	r20, r30
    state->nBodies=nBodies;
    1254:	fe 01       	movw	r30, r28
    1256:	e5 58       	subi	r30, 0x85	; 133
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	40 83       	st	Z, r20

    for (uint8_t i = 0; i < nBodies; i++)
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	07 c0       	rjmp	.+14     	; 0x126e <__stack+0x16f>
    {
        state->bodies[i]=WAITING;
    1260:	fe 01       	movw	r30, r28
    1262:	e8 0f       	add	r30, r24
    1264:	f1 1d       	adc	r31, r1
    1266:	e4 58       	subi	r30, 0x84	; 132
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	10 82       	st	Z, r1
    uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	84 17       	cp	r24, r20
    1270:	b8 f3       	brcs	.-18     	; 0x1260 <__stack+0x161>
    {
        state->bodies[i]=WAITING;
    }
}
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	ff 90       	pop	r15
    127c:	ef 90       	pop	r14
    127e:	df 90       	pop	r13
    1280:	cf 90       	pop	r12
    1282:	bf 90       	pop	r11
    1284:	af 90       	pop	r10
    1286:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

000023dc <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	8c 01       	movw	r16, r24
    23e6:	eb 01       	movw	r28, r22
    package[0]=0;
    23e8:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    23ea:	fc 01       	movw	r30, r24
    23ec:	81 81       	ldd	r24, Z+1	; 0x01
    23ee:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    23f0:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    23f2:	c8 01       	movw	r24, r16
    23f4:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	35 c0       	rjmp	.+106    	; 0x2466 <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    23fc:	82 2f       	mov	r24, r18
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	dc 01       	movw	r26, r24
    2402:	aa 0f       	add	r26, r26
    2404:	bb 1f       	adc	r27, r27
    2406:	aa 0f       	add	r26, r26
    2408:	bb 1f       	adc	r27, r27
    240a:	ad 01       	movw	r20, r26
    240c:	4a 5f       	subi	r20, 0xFA	; 250
    240e:	5f 4f       	sbci	r21, 0xFF	; 255
    2410:	4c 0f       	add	r20, r28
    2412:	5d 1f       	adc	r21, r29
    2414:	fc 01       	movw	r30, r24
    2416:	ee 0f       	add	r30, r30
    2418:	ff 1f       	adc	r31, r31
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	e8 0f       	add	r30, r24
    2428:	f9 1f       	adc	r31, r25
    242a:	bf 01       	movw	r22, r30
    242c:	60 0f       	add	r22, r16
    242e:	71 1f       	adc	r23, r17
    2430:	fb 01       	movw	r30, r22
    2432:	84 81       	ldd	r24, Z+4	; 0x04
    2434:	fa 01       	movw	r30, r20
    2436:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    2438:	cd 01       	movw	r24, r26
    243a:	07 96       	adiw	r24, 0x07	; 7
    243c:	8c 0f       	add	r24, r28
    243e:	9d 1f       	adc	r25, r29
    2440:	fb 01       	movw	r30, r22
    2442:	33 81       	ldd	r19, Z+3	; 0x03
    2444:	fc 01       	movw	r30, r24
    2446:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    2448:	cd 01       	movw	r24, r26
    244a:	08 96       	adiw	r24, 0x08	; 8
    244c:	8c 0f       	add	r24, r28
    244e:	9d 1f       	adc	r25, r29
    2450:	fb 01       	movw	r30, r22
    2452:	36 81       	ldd	r19, Z+6	; 0x06
    2454:	fc 01       	movw	r30, r24
    2456:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    2458:	19 96       	adiw	r26, 0x09	; 9
    245a:	ac 0f       	add	r26, r28
    245c:	bd 1f       	adc	r27, r29
    245e:	fb 01       	movw	r30, r22
    2460:	85 81       	ldd	r24, Z+5	; 0x05
    2462:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    2464:	2f 5f       	subi	r18, 0xFF	; 255
    2466:	f8 01       	movw	r30, r16
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	28 17       	cp	r18, r24
    246c:	38 f2       	brcs	.-114    	; 0x23fc <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    246e:	88 0f       	add	r24, r24
    2470:	88 0f       	add	r24, r24
}
    2472:	8a 5f       	subi	r24, 0xFA	; 250
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

00002338 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	8c 01       	movw	r16, r24
    2342:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    2344:	fc 01       	movw	r30, r24
    2346:	81 81       	ldd	r24, Z+1	; 0x01
    2348:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    234a:	81 81       	ldd	r24, Z+1	; 0x01
    234c:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    234e:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    2350:	c8 01       	movw	r24, r16
    2352:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	35 c0       	rjmp	.+106    	; 0x23c4 <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    235a:	82 2f       	mov	r24, r18
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	dc 01       	movw	r26, r24
    2360:	aa 0f       	add	r26, r26
    2362:	bb 1f       	adc	r27, r27
    2364:	aa 0f       	add	r26, r26
    2366:	bb 1f       	adc	r27, r27
    2368:	ad 01       	movw	r20, r26
    236a:	4a 5f       	subi	r20, 0xFA	; 250
    236c:	5f 4f       	sbci	r21, 0xFF	; 255
    236e:	4c 0f       	add	r20, r28
    2370:	5d 1f       	adc	r21, r29
    2372:	fc 01       	movw	r30, r24
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	e8 0f       	add	r30, r24
    2386:	f9 1f       	adc	r31, r25
    2388:	bf 01       	movw	r22, r30
    238a:	60 0f       	add	r22, r16
    238c:	71 1f       	adc	r23, r17
    238e:	fb 01       	movw	r30, r22
    2390:	84 81       	ldd	r24, Z+4	; 0x04
    2392:	fa 01       	movw	r30, r20
    2394:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    2396:	cd 01       	movw	r24, r26
    2398:	07 96       	adiw	r24, 0x07	; 7
    239a:	8c 0f       	add	r24, r28
    239c:	9d 1f       	adc	r25, r29
    239e:	fb 01       	movw	r30, r22
    23a0:	33 81       	ldd	r19, Z+3	; 0x03
    23a2:	fc 01       	movw	r30, r24
    23a4:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    23a6:	cd 01       	movw	r24, r26
    23a8:	08 96       	adiw	r24, 0x08	; 8
    23aa:	8c 0f       	add	r24, r28
    23ac:	9d 1f       	adc	r25, r29
    23ae:	fb 01       	movw	r30, r22
    23b0:	36 81       	ldd	r19, Z+6	; 0x06
    23b2:	fc 01       	movw	r30, r24
    23b4:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    23b6:	19 96       	adiw	r26, 0x09	; 9
    23b8:	ac 0f       	add	r26, r28
    23ba:	bd 1f       	adc	r27, r29
    23bc:	fb 01       	movw	r30, r22
    23be:	85 81       	ldd	r24, Z+5	; 0x05
    23c0:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    23c2:	2f 5f       	subi	r18, 0xFF	; 255
    23c4:	f8 01       	movw	r30, r16
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	28 17       	cp	r18, r24
    23ca:	38 f2       	brcs	.-114    	; 0x235a <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    23cc:	88 0f       	add	r24, r24
    23ce:	88 0f       	add	r24, r24
}
    23d0:	8a 5f       	subi	r24, 0xFA	; 250
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00002768 <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    2772:	a6 2f       	mov	r26, r22
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	11 97       	sbiw	r26, 0x01	; 1
    2778:	fd 01       	movw	r30, r26
    277a:	ee 0f       	add	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	cd 01       	movw	r24, r26
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	88 0f       	add	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	e8 0f       	add	r30, r24
    278e:	f9 1f       	adc	r31, r25
    2790:	e0 0f       	add	r30, r16
    2792:	f1 1f       	adc	r31, r17
    2794:	83 e0       	ldi	r24, 0x03	; 3
    2796:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0a c0       	rjmp	.+20     	; 0x27b0 <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    279c:	e9 2f       	mov	r30, r25
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	e9 01       	movw	r28, r18
    27a2:	ce 0f       	add	r28, r30
    27a4:	df 1f       	adc	r29, r31
    27a6:	e4 0f       	add	r30, r20
    27a8:	f5 1f       	adc	r31, r21
    27aa:	80 81       	ld	r24, Z
    27ac:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    27ae:	9f 5f       	subi	r25, 0xFF	; 255
    27b0:	94 30       	cpi	r25, 0x04	; 4
    27b2:	a0 f3       	brcs	.-24     	; 0x279c <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    27b4:	cd 01       	movw	r24, r26
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	aa 0f       	add	r26, r26
    27bc:	bb 1f       	adc	r27, r27
    27be:	aa 0f       	add	r26, r26
    27c0:	bb 1f       	adc	r27, r27
    27c2:	aa 0f       	add	r26, r26
    27c4:	bb 1f       	adc	r27, r27
    27c6:	a8 0f       	add	r26, r24
    27c8:	b9 1f       	adc	r27, r25
    27ca:	a0 0f       	add	r26, r16
    27cc:	b1 1f       	adc	r27, r17
    27ce:	19 96       	adiw	r26, 0x09	; 9
    27d0:	8c 91       	ld	r24, X
    27d2:	19 97       	sbiw	r26, 0x09	; 9
    27d4:	f9 01       	movw	r30, r18
    27d6:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    27d8:	18 96       	adiw	r26, 0x08	; 8
    27da:	8c 91       	ld	r24, X
    27dc:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    27de:	c8 01       	movw	r24, r16
    27e0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <update_bodies>
}
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00003c58 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    3c58:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	0b c0       	rjmp	.+22     	; 0x3c74 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    3c5e:	29 2f       	mov	r18, r25
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	fa 01       	movw	r30, r20
    3c64:	e2 0f       	add	r30, r18
    3c66:	f3 1f       	adc	r31, r19
    3c68:	e4 58       	subi	r30, 0x84	; 132
    3c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6c:	80 81       	ld	r24, Z
    3c6e:	81 30       	cpi	r24, 0x01	; 1
    3c70:	49 f0       	breq	.+18     	; 0x3c84 <mrpp_state_is_body_ready+0x2c>
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    3c72:	9f 5f       	subi	r25, 0xFF	; 255
    3c74:	fa 01       	movw	r30, r20
    3c76:	e5 58       	subi	r30, 0x85	; 133
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	80 81       	ld	r24, Z
    3c7c:	98 17       	cp	r25, r24
    3c7e:	78 f3       	brcs	.-34     	; 0x3c5e <mrpp_state_is_body_ready+0x6>
    }
    
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    3c80:	2f ef       	ldi	r18, 0xFF	; 255
    3c82:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    3c84:	c9 01       	movw	r24, r18
    3c86:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00003d40 <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    3d40:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    3d44:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    3d46:	0a c0       	rjmp	.+20     	; 0x3d5c <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    3d48:	f9 01       	movw	r30, r18
    3d4a:	e9 0f       	add	r30, r25
    3d4c:	f1 1d       	adc	r31, r1
    3d4e:	e4 58       	subi	r30, 0x84	; 132
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	40 81       	ld	r20, Z
    3d54:	42 30       	cpi	r20, 0x02	; 2
    3d56:	09 f0       	breq	.+2      	; 0x3d5a <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    3d58:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    3d5a:	9f 5f       	subi	r25, 0xFF	; 255
    3d5c:	f9 01       	movw	r30, r18
    3d5e:	e5 58       	subi	r30, 0x85	; 133
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	40 81       	ld	r20, Z
    3d64:	94 17       	cp	r25, r20
    3d66:	80 f3       	brcs	.-32     	; 0x3d48 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    3d68:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

000017fc <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    17fc:	8f 92       	push	r8
    17fe:	9f 92       	push	r9
    1800:	af 92       	push	r10
    1802:	bf 92       	push	r11
    1804:	cf 92       	push	r12
    1806:	df 92       	push	r13
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	ec 01       	movw	r28, r24
    1816:	6b 01       	movw	r12, r22
    1818:	4a 01       	movw	r8, r20
    181a:	59 01       	movw	r10, r18
    int16_t res=mrpp_state_is_body_ready(state);
    181c:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    1820:	8f 3f       	cpi	r24, 0xFF	; 255
    1822:	2f ef       	ldi	r18, 0xFF	; 255
    1824:	92 07       	cpc	r25, r18
    1826:	09 f4       	brne	.+2      	; 0x182a <mrpp_state_get_ready_body+0x2e>
    1828:	66 c0       	rjmp	.+204    	; 0x18f6 <mrpp_state_get_ready_body+0xfa>
    182a:	8c 15       	cp	r24, r12
    182c:	9d 05       	cpc	r25, r13
    182e:	09 f0       	breq	.+2      	; 0x1832 <mrpp_state_get_ready_body+0x36>
    1830:	64 c0       	rjmp	.+200    	; 0x18fa <mrpp_state_get_ready_body+0xfe>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    1836:	fe 01       	movw	r30, r28
    1838:	e8 0f       	add	r30, r24
    183a:	f1 1d       	adc	r31, r1
    183c:	e4 58       	subi	r30, 0x84	; 132
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	90 81       	ld	r25, Z
    1842:	91 30       	cpi	r25, 0x01	; 1
    1844:	41 f0       	breq	.+16     	; 0x1856 <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	e5 58       	subi	r30, 0x85	; 133
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	90 81       	ld	r25, Z
    1850:	89 17       	cp	r24, r25
    1852:	88 f3       	brcs	.-30     	; 0x1836 <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    1854:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	98 0f       	add	r25, r24
    185a:	f4 01       	movw	r30, r8
    185c:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    185e:	99 81       	ldd	r25, Y+1	; 0x01
    1860:	f5 01       	movw	r30, r10
    1862:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	40 e3       	ldi	r20, 0x30	; 48
    1868:	48 9f       	mul	r20, r24
    186a:	90 01       	movw	r18, r0
    186c:	49 9f       	mul	r20, r25
    186e:	30 0d       	add	r19, r0
    1870:	11 24       	eor	r1, r1
    1872:	f8 01       	movw	r30, r16
    1874:	31 83       	std	Z+1, r19	; 0x01
    1876:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    1878:	fe 01       	movw	r30, r28
    187a:	e5 58       	subi	r30, 0x85	; 133
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	20 81       	ld	r18, Z
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	21 50       	subi	r18, 0x01	; 1
    1884:	31 09       	sbc	r19, r1
    1886:	82 17       	cp	r24, r18
    1888:	93 07       	cpc	r25, r19
    188a:	2c f4       	brge	.+10     	; 0x1896 <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    188c:	80 e3       	ldi	r24, 0x30	; 48
    188e:	f7 01       	movw	r30, r14
    1890:	80 83       	st	Z, r24
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	33 c0       	rjmp	.+102    	; 0x18fc <mrpp_state_get_ready_body+0x100>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	9c 01       	movw	r18, r24
    189e:	22 0f       	add	r18, r18
    18a0:	33 1f       	adc	r19, r19
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	82 0f       	add	r24, r18
    18b0:	93 1f       	adc	r25, r19
    18b2:	c8 0f       	add	r28, r24
    18b4:	d9 1f       	adc	r29, r25
    18b6:	4b 81       	ldd	r20, Y+3	; 0x03
    18b8:	5c 81       	ldd	r21, Y+4	; 0x04
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	48 0f       	add	r20, r24
    18c0:	59 1f       	adc	r21, r25
    18c2:	9a 01       	movw	r18, r20
    18c4:	ab ea       	ldi	r26, 0xAB	; 171
    18c6:	ba ea       	ldi	r27, 0xAA	; 170
    18c8:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <__umulhisi3>
    18cc:	96 95       	lsr	r25
    18ce:	87 95       	ror	r24
    18d0:	92 95       	swap	r25
    18d2:	82 95       	swap	r24
    18d4:	8f 70       	andi	r24, 0x0F	; 15
    18d6:	89 27       	eor	r24, r25
    18d8:	9f 70       	andi	r25, 0x0F	; 15
    18da:	89 27       	eor	r24, r25
    18dc:	60 e3       	ldi	r22, 0x30	; 48
    18de:	68 9f       	mul	r22, r24
    18e0:	90 01       	movw	r18, r0
    18e2:	69 9f       	mul	r22, r25
    18e4:	30 0d       	add	r19, r0
    18e6:	11 24       	eor	r1, r1
    18e8:	ca 01       	movw	r24, r20
    18ea:	82 1b       	sub	r24, r18
    18ec:	93 0b       	sbc	r25, r19
    18ee:	f7 01       	movw	r30, r14
    18f0:	80 83       	st	Z, r24
    } 
    return true; 
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <mrpp_state_get_ready_body+0x100>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <mrpp_state_get_ready_body+0x100>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
        *length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	bf 90       	pop	r11
    190e:	af 90       	pop	r10
    1910:	9f 90       	pop	r9
    1912:	8f 90       	pop	r8
    1914:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

00003f2e <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    3f2e:	fc 01       	movw	r30, r24
    3f30:	e5 58       	subi	r30, 0x85	; 133
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	20 81       	ld	r18, Z
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	62 17       	cp	r22, r18
    3f3a:	73 07       	cpc	r23, r19
    3f3c:	3c f4       	brge	.+14     	; 0x3f4c <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    3f3e:	68 0f       	add	r22, r24
    3f40:	79 1f       	adc	r23, r25
    3f42:	fb 01       	movw	r30, r22
    3f44:	e4 58       	subi	r30, 0x84	; 132
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	82 e0       	ldi	r24, 0x02	; 2
    3f4a:	80 83       	st	Z, r24
    3f4c:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

000038cc <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    38cc:	70 e0       	ldi	r23, 0x00	; 0
    38ce:	61 50       	subi	r22, 0x01	; 1
    38d0:	71 09       	sbc	r23, r1
    38d2:	fb 01       	movw	r30, r22
    38d4:	ee 0f       	add	r30, r30
    38d6:	ff 1f       	adc	r31, r31
    38d8:	66 0f       	add	r22, r22
    38da:	77 1f       	adc	r23, r23
    38dc:	66 0f       	add	r22, r22
    38de:	77 1f       	adc	r23, r23
    38e0:	66 0f       	add	r22, r22
    38e2:	77 1f       	adc	r23, r23
    38e4:	e6 0f       	add	r30, r22
    38e6:	f7 1f       	adc	r31, r23
    38e8:	e8 0f       	add	r30, r24
    38ea:	f9 1f       	adc	r31, r25
    38ec:	83 81       	ldd	r24, Z+3	; 0x03
    38ee:	94 81       	ldd	r25, Z+4	; 0x04
    38f0:	da 01       	movw	r26, r20
    38f2:	8d 93       	st	X+, r24
    38f4:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    38f6:	85 81       	ldd	r24, Z+5	; 0x05
    38f8:	96 81       	ldd	r25, Z+6	; 0x06
    38fa:	f9 01       	movw	r30, r18
    38fc:	91 83       	std	Z+1, r25	; 0x01
    38fe:	80 83       	st	Z, r24
    3900:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00003c88 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    3c88:	80 91 8f 0d 	lds	r24, 0x0D8F	; 0x800d8f <cnt>
    3c8c:	90 91 90 0d 	lds	r25, 0x0D90	; 0x800d90 <cnt+0x1>
    3c90:	01 96       	adiw	r24, 0x01	; 1
    3c92:	90 93 90 0d 	sts	0x0D90, r25	; 0x800d90 <cnt+0x1>
    3c96:	80 93 8f 0d 	sts	0x0D8F, r24	; 0x800d8f <cnt>
	if(cnt>=_seconds){
    3c9a:	20 91 91 0d 	lds	r18, 0x0D91	; 0x800d91 <_seconds>
    3c9e:	30 91 92 0d 	lds	r19, 0x0D92	; 0x800d92 <_seconds+0x1>
    3ca2:	82 17       	cp	r24, r18
    3ca4:	93 07       	cpc	r25, r19
    3ca6:	38 f0       	brcs	.+14     	; 0x3cb6 <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    3ca8:	80 91 ae 0d 	lds	r24, 0x0DAE	; 0x800dae <eventPointer>
    3cac:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <PM_HAL_BC_power>
    3cb6:	08 95       	ret

Disassembly of section .text.PUMP_start:

00003dba <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    3dba:	10 92 90 0d 	sts	0x0D90, r1	; 0x800d90 <cnt+0x1>
    3dbe:	10 92 8f 0d 	sts	0x0D8F, r1	; 0x800d8f <cnt>
	_seconds=seconds;
    3dc2:	90 93 92 0d 	sts	0x0D92, r25	; 0x800d92 <_seconds+0x1>
    3dc6:	80 93 91 0d 	sts	0x0D91, r24	; 0x800d91 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    3dca:	84 e4       	ldi	r24, 0x44	; 68
    3dcc:	9e e1       	ldi	r25, 0x1E	; 30
    3dce:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <TC2_HAL_subscribe>
    3dd2:	80 93 ae 0d 	sts	0x0DAE, r24	; 0x800dae <eventPointer>
	PM_HAL_BC_power(true);
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <PM_HAL_BC_power>
    3ddc:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

00004074 <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    4074:	40 91 8f 0d 	lds	r20, 0x0D8F	; 0x800d8f <cnt>
    4078:	50 91 90 0d 	lds	r21, 0x0D90	; 0x800d90 <cnt+0x1>
    407c:	20 91 91 0d 	lds	r18, 0x0D91	; 0x800d91 <_seconds>
    4080:	30 91 92 0d 	lds	r19, 0x0D92	; 0x800d92 <_seconds+0x1>
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	42 17       	cp	r20, r18
    4088:	53 07       	cpc	r21, r19
    408a:	08 f4       	brcc	.+2      	; 0x408e <PUMP_is_done+0x1a>
    408c:	80 e0       	ldi	r24, 0x00	; 0
}
    408e:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

0000300c <RTC_set_clock_out>:



const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
    3010:	00 d0       	rcall	.+0      	; 0x3012 <RTC_set_clock_out+0x6>
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    3016:	9d e0       	ldi	r25, 0x0D	; 13
    3018:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    301a:	81 30       	cpi	r24, 0x01	; 1
    301c:	31 f0       	breq	.+12     	; 0x302a <RTC_set_clock_out+0x1e>
    301e:	18 f0       	brcs	.+6      	; 0x3026 <RTC_set_clock_out+0x1a>
    3020:	80 32       	cpi	r24, 0x20	; 32
    3022:	31 f0       	breq	.+12     	; 0x3030 <RTC_set_clock_out+0x24>
    3024:	13 c0       	rjmp	.+38     	; 0x304c <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    3026:	1a 82       	std	Y+2, r1	; 0x02
			break;
    3028:	05 c0       	rjmp	.+10     	; 0x3034 <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    302a:	83 e8       	ldi	r24, 0x83	; 131
    302c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    3030:	82 e8       	ldi	r24, 0x82	; 130
    3032:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    3034:	ae 01       	movw	r20, r28
    3036:	4f 5f       	subi	r20, 0xFF	; 255
    3038:	5f 4f       	sbci	r21, 0xFF	; 255
    303a:	60 e8       	ldi	r22, 0x80	; 128
    303c:	22 e0       	ldi	r18, 0x02	; 2
    303e:	81 e5       	ldi	r24, 0x51	; 81
    3040:	0e 94 64 20 	call	0x40c8	; 0x40c8 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    3044:	88 23       	and	r24, r24
    3046:	21 f0       	breq	.+8      	; 0x3050 <RTC_set_clock_out+0x44>
    3048:	82 e0       	ldi	r24, 0x02	; 2
    304a:	03 c0       	rjmp	.+6      	; 0x3052 <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	01 c0       	rjmp	.+2      	; 0x3052 <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    3050:	80 e0       	ldi	r24, 0x00	; 0
}
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	df 91       	pop	r29
    3058:	cf 91       	pop	r28
    305a:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

000039d8 <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    39d8:	cf 93       	push	r28
    39da:	df 93       	push	r29
    39dc:	00 d0       	rcall	.+0      	; 0x39de <RTC_clear_wake_up_interrupt+0x6>
    39de:	cd b7       	in	r28, 0x3d	; 61
    39e0:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	89 83       	std	Y+1, r24	; 0x01
    39e6:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    39e8:	ae 01       	movw	r20, r28
    39ea:	4f 5f       	subi	r20, 0xFF	; 255
    39ec:	5f 4f       	sbci	r21, 0xFF	; 255
    39ee:	60 e8       	ldi	r22, 0x80	; 128
    39f0:	22 e0       	ldi	r18, 0x02	; 2
    39f2:	81 e5       	ldi	r24, 0x51	; 81
    39f4:	0e 94 64 20 	call	0x40c8	; 0x40c8 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    39f8:	88 23       	and	r24, r24
    39fa:	11 f0       	breq	.+4      	; 0x3a00 <RTC_clear_wake_up_interrupt+0x28>
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	01 c0       	rjmp	.+2      	; 0x3a02 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    3a00:	80 e0       	ldi	r24, 0x00	; 0
}
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

0000159a <RTC_get_current_time>:
	bcd->minute=decToBCD(dt.minute);
	bcd->hour=decToBCD(dt.hour);
	bcd->day=decToBCD(dt.day);
	bcd->month=decToBCD(dt.month);
	bcd->year=decToBCD(dt.year);
}
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	27 97       	sbiw	r28, 0x07	; 7
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	8c 01       	movw	r16, r24
    15b4:	21 e0       	ldi	r18, 0x01	; 1
    15b6:	47 ee       	ldi	r20, 0xE7	; 231
    15b8:	53 e0       	ldi	r21, 0x03	; 3
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	81 e5       	ldi	r24, 0x51	; 81
    15be:	0e 94 16 21 	call	0x422c	; 0x422c <TWI_API_write_data>
    15c2:	81 11       	cpse	r24, r1
    15c4:	7c c0       	rjmp	.+248    	; 0x16be <RTC_get_current_time+0x124>
    15c6:	47 e0       	ldi	r20, 0x07	; 7
    15c8:	be 01       	movw	r22, r28
    15ca:	6f 5f       	subi	r22, 0xFF	; 255
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	81 e5       	ldi	r24, 0x51	; 81
    15d0:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <TWI_API_repeat_read_data_stop>
    15d4:	81 11       	cpse	r24, r1
    15d6:	75 c0       	rjmp	.+234    	; 0x16c2 <RTC_get_current_time+0x128>
    15d8:	29 81       	ldd	r18, Y+1	; 0x01
    15da:	82 2f       	mov	r24, r18
    15dc:	8f 77       	andi	r24, 0x7F	; 127
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	95 95       	asr	r25
    15e2:	87 95       	ror	r24
    15e4:	95 95       	asr	r25
    15e6:	87 95       	ror	r24
    15e8:	95 95       	asr	r25
    15ea:	87 95       	ror	r24
    15ec:	95 95       	asr	r25
    15ee:	87 95       	ror	r24
    15f0:	88 0f       	add	r24, r24
    15f2:	98 2f       	mov	r25, r24
    15f4:	99 0f       	add	r25, r25
    15f6:	99 0f       	add	r25, r25
    15f8:	89 0f       	add	r24, r25
    15fa:	2f 70       	andi	r18, 0x0F	; 15
    15fc:	82 0f       	add	r24, r18
    15fe:	f8 01       	movw	r30, r16
    1600:	80 83       	st	Z, r24
    1602:	2a 81       	ldd	r18, Y+2	; 0x02
    1604:	82 2f       	mov	r24, r18
    1606:	8f 77       	andi	r24, 0x7F	; 127
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	95 95       	asr	r25
    160c:	87 95       	ror	r24
    160e:	95 95       	asr	r25
    1610:	87 95       	ror	r24
    1612:	95 95       	asr	r25
    1614:	87 95       	ror	r24
    1616:	95 95       	asr	r25
    1618:	87 95       	ror	r24
    161a:	88 0f       	add	r24, r24
    161c:	98 2f       	mov	r25, r24
    161e:	99 0f       	add	r25, r25
    1620:	99 0f       	add	r25, r25
    1622:	89 0f       	add	r24, r25
    1624:	2f 70       	andi	r18, 0x0F	; 15
    1626:	82 0f       	add	r24, r18
    1628:	81 83       	std	Z+1, r24	; 0x01
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	82 2f       	mov	r24, r18
    162e:	8f 73       	andi	r24, 0x3F	; 63
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	95 95       	asr	r25
    1634:	87 95       	ror	r24
    1636:	95 95       	asr	r25
    1638:	87 95       	ror	r24
    163a:	95 95       	asr	r25
    163c:	87 95       	ror	r24
    163e:	95 95       	asr	r25
    1640:	87 95       	ror	r24
    1642:	88 0f       	add	r24, r24
    1644:	98 2f       	mov	r25, r24
    1646:	99 0f       	add	r25, r25
    1648:	99 0f       	add	r25, r25
    164a:	89 0f       	add	r24, r25
    164c:	2f 70       	andi	r18, 0x0F	; 15
    164e:	82 0f       	add	r24, r18
    1650:	82 83       	std	Z+2, r24	; 0x02
    1652:	2c 81       	ldd	r18, Y+4	; 0x04
    1654:	82 2f       	mov	r24, r18
    1656:	8f 73       	andi	r24, 0x3F	; 63
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	95 95       	asr	r25
    165c:	87 95       	ror	r24
    165e:	95 95       	asr	r25
    1660:	87 95       	ror	r24
    1662:	95 95       	asr	r25
    1664:	87 95       	ror	r24
    1666:	95 95       	asr	r25
    1668:	87 95       	ror	r24
    166a:	88 0f       	add	r24, r24
    166c:	98 2f       	mov	r25, r24
    166e:	99 0f       	add	r25, r25
    1670:	99 0f       	add	r25, r25
    1672:	89 0f       	add	r24, r25
    1674:	2f 70       	andi	r18, 0x0F	; 15
    1676:	82 0f       	add	r24, r18
    1678:	83 83       	std	Z+3, r24	; 0x03
    167a:	2e 81       	ldd	r18, Y+6	; 0x06
    167c:	82 2f       	mov	r24, r18
    167e:	8f 71       	andi	r24, 0x1F	; 31
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	95 95       	asr	r25
    1684:	87 95       	ror	r24
    1686:	95 95       	asr	r25
    1688:	87 95       	ror	r24
    168a:	95 95       	asr	r25
    168c:	87 95       	ror	r24
    168e:	95 95       	asr	r25
    1690:	87 95       	ror	r24
    1692:	88 0f       	add	r24, r24
    1694:	98 2f       	mov	r25, r24
    1696:	99 0f       	add	r25, r25
    1698:	99 0f       	add	r25, r25
    169a:	89 0f       	add	r24, r25
    169c:	2f 70       	andi	r18, 0x0F	; 15
    169e:	82 0f       	add	r24, r18
    16a0:	84 83       	std	Z+4, r24	; 0x04
    16a2:	8f 81       	ldd	r24, Y+7	; 0x07
    16a4:	98 2f       	mov	r25, r24
    16a6:	92 95       	swap	r25
    16a8:	9f 70       	andi	r25, 0x0F	; 15
    16aa:	99 0f       	add	r25, r25
    16ac:	29 2f       	mov	r18, r25
    16ae:	22 0f       	add	r18, r18
    16b0:	22 0f       	add	r18, r18
    16b2:	92 0f       	add	r25, r18
    16b4:	8f 70       	andi	r24, 0x0F	; 15
    16b6:	89 0f       	add	r24, r25
    16b8:	85 83       	std	Z+5, r24	; 0x05
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <RTC_get_current_time+0x12a>
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <RTC_get_current_time+0x12a>
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	27 96       	adiw	r28, 0x07	; 7
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

0000204c <RTC_set_wake_up_interrupt_minutes>:
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	2d 97       	sbiw	r28, 0x0d	; 13
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	18 2f       	mov	r17, r24
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	8a 83       	std	Y+2, r24	; 0x02
    206c:	85 e0       	ldi	r24, 0x05	; 5
    206e:	e4 e6       	ldi	r30, 0x64	; 100
    2070:	fd e0       	ldi	r31, 0x0D	; 13
    2072:	de 01       	movw	r26, r28
    2074:	13 96       	adiw	r26, 0x03	; 3
    2076:	01 90       	ld	r0, Z+
    2078:	0d 92       	st	X+, r0
    207a:	8a 95       	dec	r24
    207c:	e1 f7       	brne	.-8      	; 0x2076 <RTC_set_wake_up_interrupt_minutes+0x2a>
    207e:	ce 01       	movw	r24, r28
    2080:	08 96       	adiw	r24, 0x08	; 8
    2082:	0e 94 cd 0a 	call	0x159a	; 0x159a <RTC_get_current_time>
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	81 0f       	add	r24, r17
    208a:	99 e8       	ldi	r25, 0x89	; 137
    208c:	89 9f       	mul	r24, r25
    208e:	91 2d       	mov	r25, r1
    2090:	11 24       	eor	r1, r1
    2092:	92 95       	swap	r25
    2094:	96 95       	lsr	r25
    2096:	97 70       	andi	r25, 0x07	; 7
    2098:	2c e3       	ldi	r18, 0x3C	; 60
    209a:	92 9f       	mul	r25, r18
    209c:	80 19       	sub	r24, r0
    209e:	11 24       	eor	r1, r1
    20a0:	89 87       	std	Y+9, r24	; 0x09
    20a2:	ae 01       	movw	r20, r28
    20a4:	4f 5f       	subi	r20, 0xFF	; 255
    20a6:	5f 4f       	sbci	r21, 0xFF	; 255
    20a8:	60 e8       	ldi	r22, 0x80	; 128
    20aa:	22 e0       	ldi	r18, 0x02	; 2
    20ac:	81 e5       	ldi	r24, 0x51	; 81
    20ae:	0e 94 64 20 	call	0x40c8	; 0x40c8 <TWI_API_write_data_stop>
    20b2:	81 11       	cpse	r24, r1
    20b4:	20 c0       	rjmp	.+64     	; 0x20f6 <RTC_set_wake_up_interrupt_minutes+0xaa>
    20b6:	99 85       	ldd	r25, Y+9	; 0x09
    20b8:	8d ec       	ldi	r24, 0xCD	; 205
    20ba:	98 9f       	mul	r25, r24
    20bc:	81 2d       	mov	r24, r1
    20be:	11 24       	eor	r1, r1
    20c0:	86 95       	lsr	r24
    20c2:	86 95       	lsr	r24
    20c4:	86 95       	lsr	r24
    20c6:	40 e1       	ldi	r20, 0x10	; 16
    20c8:	84 9f       	mul	r24, r20
    20ca:	90 01       	movw	r18, r0
    20cc:	11 24       	eor	r1, r1
    20ce:	88 0f       	add	r24, r24
    20d0:	38 2f       	mov	r19, r24
    20d2:	33 0f       	add	r19, r19
    20d4:	33 0f       	add	r19, r19
    20d6:	83 0f       	add	r24, r19
    20d8:	98 1b       	sub	r25, r24
    20da:	92 2b       	or	r25, r18
    20dc:	9c 83       	std	Y+4, r25	; 0x04
    20de:	ae 01       	movw	r20, r28
    20e0:	4d 5f       	subi	r20, 0xFD	; 253
    20e2:	5f 4f       	sbci	r21, 0xFF	; 255
    20e4:	60 e8       	ldi	r22, 0x80	; 128
    20e6:	25 e0       	ldi	r18, 0x05	; 5
    20e8:	81 e5       	ldi	r24, 0x51	; 81
    20ea:	0e 94 64 20 	call	0x40c8	; 0x40c8 <TWI_API_write_data_stop>
    20ee:	88 23       	and	r24, r24
    20f0:	21 f0       	breq	.+8      	; 0x20fa <RTC_set_wake_up_interrupt_minutes+0xae>
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	03 c0       	rjmp	.+6      	; 0x20fc <RTC_set_wake_up_interrupt_minutes+0xb0>
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <RTC_set_wake_up_interrupt_minutes+0xb0>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	2d 96       	adiw	r28, 0x0d	; 13
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

000016da <RTC_datetime_to_ts>:
    16da:	4f 92       	push	r4
    16dc:	5f 92       	push	r5
    16de:	6f 92       	push	r6
    16e0:	7f 92       	push	r7
    16e2:	8f 92       	push	r8
    16e4:	9f 92       	push	r9
    16e6:	af 92       	push	r10
    16e8:	bf 92       	push	r11
    16ea:	cf 92       	push	r12
    16ec:	df 92       	push	r13
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <RTC_datetime_to_ts+0x22>
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <RTC_datetime_to_ts+0x24>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <RTC_datetime_to_ts+0x26>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	f9 01       	movw	r30, r18
    1706:	49 2e       	mov	r4, r25
    1708:	51 2c       	mov	r5, r1
    170a:	61 2c       	mov	r6, r1
    170c:	71 2c       	mov	r7, r1
    170e:	03 2e       	mov	r0, r19
    1710:	3a e1       	ldi	r19, 0x1A	; 26
    1712:	44 0c       	add	r4, r4
    1714:	55 1c       	adc	r5, r5
    1716:	66 1c       	adc	r6, r6
    1718:	77 1c       	adc	r7, r7
    171a:	3a 95       	dec	r19
    171c:	d1 f7       	brne	.-12     	; 0x1712 <RTC_datetime_to_ts+0x38>
    171e:	30 2d       	mov	r19, r0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 e0       	ldi	r26, 0x00	; 0
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	07 2e       	mov	r0, r23
    1728:	76 e1       	ldi	r23, 0x16	; 22
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	aa 1f       	adc	r26, r26
    1730:	bb 1f       	adc	r27, r27
    1732:	7a 95       	dec	r23
    1734:	d1 f7       	brne	.-12     	; 0x172a <RTC_datetime_to_ts+0x50>
    1736:	70 2d       	mov	r23, r0
    1738:	84 29       	or	r24, r4
    173a:	95 29       	or	r25, r5
    173c:	a6 29       	or	r26, r6
    173e:	b7 29       	or	r27, r7
    1740:	87 2e       	mov	r8, r23
    1742:	91 2c       	mov	r9, r1
    1744:	a1 2c       	mov	r10, r1
    1746:	b1 2c       	mov	r11, r1
    1748:	07 2e       	mov	r0, r23
    174a:	71 e1       	ldi	r23, 0x11	; 17
    174c:	88 0c       	add	r8, r8
    174e:	99 1c       	adc	r9, r9
    1750:	aa 1c       	adc	r10, r10
    1752:	bb 1c       	adc	r11, r11
    1754:	7a 95       	dec	r23
    1756:	d1 f7       	brne	.-12     	; 0x174c <RTC_datetime_to_ts+0x72>
    1758:	70 2d       	mov	r23, r0
    175a:	88 29       	or	r24, r8
    175c:	99 29       	or	r25, r9
    175e:	aa 29       	or	r26, r10
    1760:	bb 29       	or	r27, r11
    1762:	c6 2e       	mov	r12, r22
    1764:	d1 2c       	mov	r13, r1
    1766:	e1 2c       	mov	r14, r1
    1768:	f1 2c       	mov	r15, r1
    176a:	0b 2e       	mov	r0, r27
    176c:	bc e0       	ldi	r27, 0x0C	; 12
    176e:	cc 0c       	add	r12, r12
    1770:	dd 1c       	adc	r13, r13
    1772:	ee 1c       	adc	r14, r14
    1774:	ff 1c       	adc	r15, r15
    1776:	ba 95       	dec	r27
    1778:	d1 f7       	brne	.-12     	; 0x176e <RTC_datetime_to_ts+0x94>
    177a:	b0 2d       	mov	r27, r0
    177c:	8c 29       	or	r24, r12
    177e:	9d 29       	or	r25, r13
    1780:	ae 29       	or	r26, r14
    1782:	bf 29       	or	r27, r15
    1784:	05 2f       	mov	r16, r21
    1786:	10 e0       	ldi	r17, 0x00	; 0
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	00 0f       	add	r16, r16
    178e:	11 1f       	adc	r17, r17
    1790:	22 1f       	adc	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	00 0f       	add	r16, r16
    1796:	11 1f       	adc	r17, r17
    1798:	22 1f       	adc	r18, r18
    179a:	33 1f       	adc	r19, r19
    179c:	00 0f       	add	r16, r16
    179e:	11 1f       	adc	r17, r17
    17a0:	22 1f       	adc	r18, r18
    17a2:	33 1f       	adc	r19, r19
    17a4:	00 0f       	add	r16, r16
    17a6:	11 1f       	adc	r17, r17
    17a8:	22 1f       	adc	r18, r18
    17aa:	33 1f       	adc	r19, r19
    17ac:	00 0f       	add	r16, r16
    17ae:	11 1f       	adc	r17, r17
    17b0:	22 1f       	adc	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	00 0f       	add	r16, r16
    17b6:	11 1f       	adc	r17, r17
    17b8:	22 1f       	adc	r18, r18
    17ba:	33 1f       	adc	r19, r19
    17bc:	80 2b       	or	r24, r16
    17be:	91 2b       	or	r25, r17
    17c0:	a2 2b       	or	r26, r18
    17c2:	b3 2b       	or	r27, r19
    17c4:	84 2b       	or	r24, r20
    17c6:	b0 83       	st	Z, r27
    17c8:	a1 83       	std	Z+1, r26	; 0x01
    17ca:	92 83       	std	Z+2, r25	; 0x02
    17cc:	83 83       	std	Z+3, r24	; 0x03
    17ce:	26 96       	adiw	r28, 0x06	; 6
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	df 90       	pop	r13
    17e8:	cf 90       	pop	r12
    17ea:	bf 90       	pop	r11
    17ec:	af 90       	pop	r10
    17ee:	9f 90       	pop	r9
    17f0:	8f 90       	pop	r8
    17f2:	7f 90       	pop	r7
    17f4:	6f 90       	pop	r6
    17f6:	5f 90       	pop	r5
    17f8:	4f 90       	pop	r4
    17fa:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

000040e2 <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    40e2:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    40e4:	54 81       	ldd	r21, Z+4	; 0x04
    40e6:	43 81       	ldd	r20, Z+3	; 0x03
    40e8:	31 81       	ldd	r19, Z+1	; 0x01
    40ea:	20 81       	ld	r18, Z
    40ec:	65 2f       	mov	r22, r21
    40ee:	74 2f       	mov	r23, r20
    40f0:	83 2f       	mov	r24, r19
    40f2:	92 2f       	mov	r25, r18
    40f4:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__fixunssfsi>
}
    40f8:	cb 01       	movw	r24, r22
    40fa:	08 95       	ret

Disassembly of section .text.init_measurement:

0000385c <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    385c:	25 e0       	ldi	r18, 0x05	; 5
    385e:	48 ed       	ldi	r20, 0xD8	; 216
    3860:	53 e0       	ldi	r21, 0x03	; 3
    3862:	60 e0       	ldi	r22, 0x00	; 0
    3864:	81 e6       	ldi	r24, 0x61	; 97
    3866:	0e 94 64 20 	call	0x40c8	; 0x40c8 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    386a:	81 11       	cpse	r24, r1
    386c:	0f c0       	rjmp	.+30     	; 0x388c <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    386e:	25 e0       	ldi	r18, 0x05	; 5
    3870:	4d ed       	ldi	r20, 0xDD	; 221
    3872:	53 e0       	ldi	r21, 0x03	; 3
    3874:	60 e0       	ldi	r22, 0x00	; 0
    3876:	81 e6       	ldi	r24, 0x61	; 97
    3878:	0e 94 64 20 	call	0x40c8	; 0x40c8 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    387c:	81 11       	cpse	r24, r1
    387e:	08 c0       	rjmp	.+16     	; 0x3890 <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    3880:	0e 94 1f 22 	call	0x443e	; 0x443e <SCD30_HAL_data_ready>
    3884:	88 23       	and	r24, r24
    3886:	e1 f3       	breq	.-8      	; 0x3880 <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    388c:	82 e0       	ldi	r24, 0x02	; 2
    388e:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    3890:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    3892:	08 95       	ret

Disassembly of section .text.validate_data:

00003ad4 <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    3ad4:	cf 93       	push	r28
    3ad6:	df 93       	push	r29
    3ad8:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    3ada:	62 e0       	ldi	r22, 0x02	; 2
    3adc:	0e 94 81 1c 	call	0x3902	; 0x3902 <calc_crc8>
	if(data[2]!=crc) return false;
    3ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae2:	89 13       	cpse	r24, r25
    3ae4:	0a c0       	rjmp	.+20     	; 0x3afa <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    3ae6:	62 e0       	ldi	r22, 0x02	; 2
    3ae8:	ce 01       	movw	r24, r28
    3aea:	03 96       	adiw	r24, 0x03	; 3
    3aec:	0e 94 81 1c 	call	0x3902	; 0x3902 <calc_crc8>
	if(data[5]!=crc) return false;
    3af0:	9d 81       	ldd	r25, Y+5	; 0x05
    3af2:	89 17       	cp	r24, r25
    3af4:	21 f0       	breq	.+8      	; 0x3afe <validate_data+0x2a>
    3af6:	80 e0       	ldi	r24, 0x00	; 0
    3af8:	03 c0       	rjmp	.+6      	; 0x3b00 <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	01 c0       	rjmp	.+2      	; 0x3b00 <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    3afe:	81 e0       	ldi	r24, 0x01	; 1
}
    3b00:	df 91       	pop	r29
    3b02:	cf 91       	pop	r28
    3b04:	08 95       	ret

Disassembly of section .text.read_value:

0000247e <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    247e:	0f 93       	push	r16
    2480:	1f 93       	push	r17
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	00 d0       	rcall	.+0      	; 0x2488 <read_value+0xa>
    2488:	00 d0       	rcall	.+0      	; 0x248a <read_value+0xc>
    248a:	00 d0       	rcall	.+0      	; 0x248c <read_value+0xe>
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    2492:	8f ef       	ldi	r24, 0xFF	; 255
    2494:	9f ef       	ldi	r25, 0xFF	; 255
    2496:	f8 01       	movw	r30, r16
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    249c:	0e 94 1f 22 	call	0x443e	; 0x443e <SCD30_HAL_data_ready>
    24a0:	81 11       	cpse	r24, r1
    24a2:	07 c0       	rjmp	.+14     	; 0x24b2 <read_value+0x34>
		*value=0xfffe;
    24a4:	8e ef       	ldi	r24, 0xFE	; 254
    24a6:	9f ef       	ldi	r25, 0xFF	; 255
    24a8:	f8 01       	movw	r30, r16
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    24ae:	83 e0       	ldi	r24, 0x03	; 3
    24b0:	2c c0       	rjmp	.+88     	; 0x250a <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    24b2:	22 e0       	ldi	r18, 0x02	; 2
    24b4:	45 ee       	ldi	r20, 0xE5	; 229
    24b6:	53 e0       	ldi	r21, 0x03	; 3
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	81 e6       	ldi	r24, 0x61	; 97
    24bc:	0e 94 64 20 	call	0x40c8	; 0x40c8 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    24c0:	81 11       	cpse	r24, r1
    24c2:	1e c0       	rjmp	.+60     	; 0x2500 <read_value+0x82>
    24c4:	8f e3       	ldi	r24, 0x3F	; 63
    24c6:	9f e1       	ldi	r25, 0x1F	; 31
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <read_value+0x4a>
    24cc:	00 c0       	rjmp	.+0      	; 0x24ce <read_value+0x50>
    24ce:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    24d0:	46 e0       	ldi	r20, 0x06	; 6
    24d2:	be 01       	movw	r22, r28
    24d4:	6f 5f       	subi	r22, 0xFF	; 255
    24d6:	7f 4f       	sbci	r23, 0xFF	; 255
    24d8:	81 e6       	ldi	r24, 0x61	; 97
    24da:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    24de:	81 11       	cpse	r24, r1
    24e0:	11 c0       	rjmp	.+34     	; 0x2504 <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    24e2:	ce 01       	movw	r24, r28
    24e4:	01 96       	adiw	r24, 0x01	; 1
    24e6:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <validate_data>
    24ea:	88 23       	and	r24, r24
    24ec:	69 f0       	breq	.+26     	; 0x2508 <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    24ee:	ce 01       	movw	r24, r28
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	0e 94 71 20 	call	0x40e2	; 0x40e2 <bytes_2_uint>
    24f6:	f8 01       	movw	r30, r16
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	05 c0       	rjmp	.+10     	; 0x250a <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	03 c0       	rjmp	.+6      	; 0x250a <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	01 c0       	rjmp	.+2      	; 0x250a <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    2508:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    250a:	26 96       	adiw	r28, 0x06	; 6
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00003468 <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    3468:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <_data>
    346c:	90 91 96 0d 	lds	r25, 0x0D96	; 0x800d96 <_data+0x1>
    3470:	20 91 93 0d 	lds	r18, 0x0D93	; 0x800d93 <cntSamples>
    3474:	30 91 94 0d 	lds	r19, 0x0D94	; 0x800d94 <cntSamples+0x1>
    3478:	a9 01       	movw	r20, r18
    347a:	4f 5f       	subi	r20, 0xFF	; 255
    347c:	5f 4f       	sbci	r21, 0xFF	; 255
    347e:	50 93 94 0d 	sts	0x0D94, r21	; 0x800d94 <cntSamples+0x1>
    3482:	40 93 93 0d 	sts	0x0D93, r20	; 0x800d93 <cntSamples>
    3486:	22 0f       	add	r18, r18
    3488:	33 1f       	adc	r19, r19
    348a:	82 0f       	add	r24, r18
    348c:	93 1f       	adc	r25, r19
    348e:	0e 94 3f 12 	call	0x247e	; 0x247e <read_value>
	if(cntSamples>=_nSamples){
    3492:	20 91 93 0d 	lds	r18, 0x0D93	; 0x800d93 <cntSamples>
    3496:	30 91 94 0d 	lds	r19, 0x0D94	; 0x800d94 <cntSamples+0x1>
    349a:	80 91 97 0d 	lds	r24, 0x0D97	; 0x800d97 <_nSamples>
    349e:	90 91 98 0d 	lds	r25, 0x0D98	; 0x800d98 <_nSamples+0x1>
    34a2:	28 17       	cp	r18, r24
    34a4:	39 07       	cpc	r19, r25
    34a6:	10 f0       	brcs	.+4      	; 0x34ac <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    34a8:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <TC1_HAL_stop>
    34ac:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00003e68 <SCD30_sensor_on>:
static void vect_SCD_do_sample();
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    3e68:	0e 94 9d 21 	call	0x433a	; 0x433a <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	0e 94 ee 20 	call	0x41dc	; 0x41dc <PM_HAL_SCD30_power>
    3e72:	2f ef       	ldi	r18, 0xFF	; 255
    3e74:	83 ed       	ldi	r24, 0xD3	; 211
    3e76:	90 e3       	ldi	r25, 0x30	; 48
    3e78:	21 50       	subi	r18, 0x01	; 1
    3e7a:	80 40       	sbci	r24, 0x00	; 0
    3e7c:	90 40       	sbci	r25, 0x00	; 0
    3e7e:	e1 f7       	brne	.-8      	; 0x3e78 <SCD30_sensor_on+0x10>
    3e80:	00 c0       	rjmp	.+0      	; 0x3e82 <SCD30_sensor_on+0x1a>
    3e82:	00 00       	nop
	_delay_ms(2000);
	return init_measurement();
    3e84:	0e 94 2e 1c 	call	0x385c	; 0x385c <init_measurement>
}
    3e88:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

000044cc <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	0e 94 ee 20 	call	0x41dc	; 0x41dc <PM_HAL_SCD30_power>
    44d2:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00003e8a <SCD30_init_sampling>:
}

void SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
	_nSamples=nSamples;
    3e8a:	70 93 98 0d 	sts	0x0D98, r23	; 0x800d98 <_nSamples+0x1>
    3e8e:	60 93 97 0d 	sts	0x0D97, r22	; 0x800d97 <_nSamples>
	cntSamples=0;
    3e92:	10 92 94 0d 	sts	0x0D94, r1	; 0x800d94 <cntSamples+0x1>
    3e96:	10 92 93 0d 	sts	0x0D93, r1	; 0x800d93 <cntSamples>
	_data=data;
    3e9a:	50 93 96 0d 	sts	0x0D96, r21	; 0x800d96 <_data+0x1>
    3e9e:	40 93 95 0d 	sts	0x0D95, r20	; 0x800d95 <_data>

	//Init
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    3ea2:	64 e3       	ldi	r22, 0x34	; 52
    3ea4:	7a e1       	ldi	r23, 0x1A	; 26
    3ea6:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <TC1_HAL_init>
    3eaa:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

00004364 <SCD30_deinit_sampling>:
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    4364:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <TC1_HAL_stop>
	_data=NULL;
    4368:	10 92 96 0d 	sts	0x0D96, r1	; 0x800d96 <_data+0x1>
    436c:	10 92 95 0d 	sts	0x0D95, r1	; 0x800d95 <_data>
    4370:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

00004470 <SCD30_start_sampling>:
}

void SCD30_start_sampling(){
	vect_SCD_do_sample();
    4470:	0e 94 34 1a 	call	0x3468	; 0x3468 <vect_SCD_do_sample>
	TC1_HAL_start();
    4474:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <TC1_HAL_start>
    4478:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00004090 <SCD30_is_sampling_done>:
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    4090:	40 91 93 0d 	lds	r20, 0x0D93	; 0x800d93 <cntSamples>
    4094:	50 91 94 0d 	lds	r21, 0x0D94	; 0x800d94 <cntSamples+0x1>
    4098:	20 91 97 0d 	lds	r18, 0x0D97	; 0x800d97 <_nSamples>
    409c:	30 91 98 0d 	lds	r19, 0x0D98	; 0x800d98 <_nSamples+0x1>
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	42 17       	cp	r20, r18
    40a4:	53 07       	cpc	r21, r19
    40a6:	08 f4       	brcc	.+2      	; 0x40aa <SCD30_is_sampling_done+0x1a>
    40a8:	80 e0       	ldi	r24, 0x00	; 0
}
    40aa:	08 95       	ret

Disassembly of section .text.decode_stage_response:

0000419e <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    419e:	88 23       	and	r24, r24
    41a0:	19 f0       	breq	.+6      	; 0x41a8 <decode_stage_response+0xa>
    41a2:	81 30       	cpi	r24, 0x01	; 1
    41a4:	29 f0       	breq	.+10     	; 0x41b0 <decode_stage_response+0x12>
    41a6:	02 c0       	rjmp	.+4      	; 0x41ac <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    41a8:	81 e1       	ldi	r24, 0x11	; 17
    41aa:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    41ac:	86 e1       	ldi	r24, 0x16	; 22
    41ae:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    41b0:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    41b2:	08 95       	ret

Disassembly of section .text.decode_join_response:

000040ac <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    40ac:	82 30       	cpi	r24, 0x02	; 2
    40ae:	51 f0       	breq	.+20     	; 0x40c4 <decode_join_response+0x18>
    40b0:	83 30       	cpi	r24, 0x03	; 3
    40b2:	21 f0       	breq	.+8      	; 0x40bc <decode_join_response+0x10>
    40b4:	81 11       	cpse	r24, r1
    40b6:	04 c0       	rjmp	.+8      	; 0x40c0 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    40b8:	83 e0       	ldi	r24, 0x03	; 3
    40ba:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    40bc:	85 e0       	ldi	r24, 0x05	; 5
    40be:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    40c0:	86 e1       	ldi	r24, 0x16	; 22
    40c2:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    40c4:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    40c6:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

00003fc6 <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    3fc6:	82 30       	cpi	r24, 0x02	; 2
    3fc8:	49 f0       	breq	.+18     	; 0x3fdc <decode_header_tail_response+0x16>
    3fca:	18 f4       	brcc	.+6      	; 0x3fd2 <decode_header_tail_response+0xc>
    3fcc:	88 23       	and	r24, r24
    3fce:	41 f0       	breq	.+16     	; 0x3fe0 <decode_header_tail_response+0x1a>
    3fd0:	03 c0       	rjmp	.+6      	; 0x3fd8 <decode_header_tail_response+0x12>
    3fd2:	84 50       	subi	r24, 0x04	; 4
    3fd4:	82 30       	cpi	r24, 0x02	; 2
    3fd6:	20 f0       	brcs	.+8      	; 0x3fe0 <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    3fd8:	86 e1       	ldi	r24, 0x16	; 22
    3fda:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    3fdc:	84 2f       	mov	r24, r20
    3fde:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    3fe0:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3fe2:	08 95       	ret

Disassembly of section .text.read_eeprom:

00002eb0 <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    2eb0:	83 e4       	ldi	r24, 0x43	; 67
    2eb2:	9d e0       	ldi	r25, 0x0D	; 13
    2eb4:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <EM_get_deveui>
	EM_get_appeui(appeui);
    2eb8:	82 e3       	ldi	r24, 0x32	; 50
    2eba:	9d e0       	ldi	r25, 0x0D	; 13
    2ebc:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <EM_get_appeui>
	EM_get_appkey(appkey);
    2ec0:	81 e1       	ldi	r24, 0x11	; 17
    2ec2:	9d e0       	ldi	r25, 0x0D	; 13
    2ec4:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    2ec8:	63 e2       	ldi	r22, 0x23	; 35
    2eca:	8e ee       	ldi	r24, 0xEE	; 238
    2ecc:	9c e0       	ldi	r25, 0x0C	; 12
    2ece:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <EM_get_collections>
	EM_get_Vcc(&vccx);
    2ed2:	8d e7       	ldi	r24, 0x7D	; 125
    2ed4:	9d e0       	ldi	r25, 0x0D	; 13
    2ed6:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    2eda:	89 e7       	ldi	r24, 0x79	; 121
    2edc:	9d e0       	ldi	r25, 0x0D	; 13
    2ede:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    2ee2:	85 e7       	ldi	r24, 0x75	; 117
    2ee4:	9d e0       	ldi	r25, 0x0D	; 13
    2ee6:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    2eea:	0e 94 ef 21 	call	0x43de	; 0x43de <EM_get_heat_up_time>
    2eee:	80 93 b0 0d 	sts	0x0DB0, r24	; 0x800db0 <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    2ef2:	0e 94 f5 21 	call	0x43ea	; 0x43ea <EM_get_air_pump_time>
    2ef6:	90 93 9a 0d 	sts	0x0D9A, r25	; 0x800d9a <airPumpTime+0x1>
    2efa:	80 93 99 0d 	sts	0x0D99, r24	; 0x800d99 <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    2efe:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <EM_get_sp_interval>
    2f02:	80 93 af 0d 	sts	0x0DAF, r24	; 0x800daf <samplingProcessInterval>
	return true;
}
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	08 95       	ret

Disassembly of section .text.join_lora:

000042a0 <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    42a0:	41 e1       	ldi	r20, 0x11	; 17
    42a2:	5d e0       	ldi	r21, 0x0D	; 13
    42a4:	62 e3       	ldi	r22, 0x32	; 50
    42a6:	7d e0       	ldi	r23, 0x0D	; 13
    42a8:	83 e4       	ldi	r24, 0x43	; 67
    42aa:	9d e0       	ldi	r25, 0x0D	; 13
    42ac:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <LM_join_network>
}
    42b0:	08 95       	ret

Disassembly of section .text.set_wakeup:

0000447a <set_wakeup>:
}

static RTC_STATUS set_wakeup(){
	//uint8_t samplingProcessInterval=1;
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
    447a:	80 91 af 0d 	lds	r24, 0x0DAF	; 0x800daf <samplingProcessInterval>
    447e:	0e 94 26 10 	call	0x204c	; 0x204c <RTC_set_wake_up_interrupt_minutes>
}
    4482:	08 95       	ret

Disassembly of section .text.send_header:

0000367e <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	e4 97       	sbiw	r28, 0x34	; 52
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    3692:	be 01       	movw	r22, r28
    3694:	6c 5c       	subi	r22, 0xCC	; 204
    3696:	7f 4f       	sbci	r23, 0xFF	; 255
    3698:	ce 01       	movw	r24, r28
    369a:	01 96       	adiw	r24, 0x01	; 1
    369c:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    36a0:	6c a9       	ldd	r22, Y+52	; 0x34
    36a2:	ce 01       	movw	r24, r28
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <LM_send_uplink>
}
    36aa:	e4 96       	adiw	r28, 0x34	; 52
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	df 91       	pop	r29
    36b8:	cf 91       	pop	r28
    36ba:	08 95       	ret

Disassembly of section .text.stage_0:

00002110 <stage_0>:
/* Stage 0                                                              */
/************************************************************************/
static STAGE_STATUS stage_0(){
	
	while(1){
		switch(state_s0){
    2110:	80 91 b4 0d 	lds	r24, 0x0DB4	; 0x800db4 <state_s0>
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	19 f1       	breq	.+70     	; 0x215e <stage_0+0x4e>
    2118:	28 f4       	brcc	.+10     	; 0x2124 <stage_0+0x14>
    211a:	88 23       	and	r24, r24
    211c:	51 f0       	breq	.+20     	; 0x2132 <stage_0+0x22>
    211e:	81 30       	cpi	r24, 0x01	; 1
    2120:	b1 f0       	breq	.+44     	; 0x214e <stage_0+0x3e>
    2122:	f6 cf       	rjmp	.-20     	; 0x2110 <stage_0>
    2124:	84 30       	cpi	r24, 0x04	; 4
    2126:	09 f4       	brne	.+2      	; 0x212a <stage_0+0x1a>
    2128:	4b c0       	rjmp	.+150    	; 0x21c0 <stage_0+0xb0>
    212a:	18 f1       	brcs	.+70     	; 0x2172 <stage_0+0x62>
    212c:	85 30       	cpi	r24, 0x05	; 5
    212e:	69 f1       	breq	.+90     	; 0x218a <stage_0+0x7a>
    2130:	ef cf       	rjmp	.-34     	; 0x2110 <stage_0>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    2132:	ee ee       	ldi	r30, 0xEE	; 238
    2134:	fc e0       	ldi	r31, 0x0C	; 12
    2136:	60 81       	ld	r22, Z
    2138:	71 81       	ldd	r23, Z+1	; 0x01
    213a:	48 e3       	ldi	r20, 0x38	; 56
    213c:	59 e0       	ldi	r21, 0x09	; 9
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SCD30_init_sampling>
				
			
				state_s0=STAGE_GET_TIME;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <state_s0>
			break;
    214c:	e1 cf       	rjmp	.-62     	; 0x2110 <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    214e:	8e e5       	ldi	r24, 0x5E	; 94
    2150:	9d e0       	ldi	r25, 0x0D	; 13
    2152:	0e 94 cd 0a 	call	0x159a	; 0x159a <RTC_get_current_time>
				state_s0=STAGE_START;
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <state_s0>
			break;
    215c:	d9 cf       	rjmp	.-78     	; 0x2110 <stage_0>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    215e:	80 91 b0 0d 	lds	r24, 0x0DB0	; 0x800db0 <methHeatUpTime>
    2162:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <ADC_meth_sens_power_on>
				SCD30_start_sampling();
    2166:	0e 94 38 22 	call	0x4470	; 0x4470 <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <state_s0>
			break;
    2170:	cf cf       	rjmp	.-98     	; 0x2110 <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    2172:	0e 94 47 21 	call	0x428e	; 0x428e <ADC_meth_sens_ready>
    2176:	88 23       	and	r24, r24
    2178:	39 f1       	breq	.+78     	; 0x21c8 <stage_0+0xb8>
    217a:	0e 94 48 20 	call	0x4090	; 0x4090 <SCD30_is_sampling_done>
    217e:	88 23       	and	r24, r24
    2180:	29 f1       	breq	.+74     	; 0x21cc <stage_0+0xbc>
				state_s0=STAGE_UPDATE_MRPP;
    2182:	85 e0       	ldi	r24, 0x05	; 5
    2184:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <state_s0>
			break;
    2188:	c3 cf       	rjmp	.-122    	; 0x2110 <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    218a:	21 e8       	ldi	r18, 0x81	; 129
    218c:	3d e0       	ldi	r19, 0x0D	; 13
    218e:	40 91 5e 0d 	lds	r20, 0x0D5E	; 0x800d5e <dt>
    2192:	50 91 5f 0d 	lds	r21, 0x0D5F	; 0x800d5f <dt+0x1>
    2196:	60 91 60 0d 	lds	r22, 0x0D60	; 0x800d60 <dt+0x2>
    219a:	70 91 61 0d 	lds	r23, 0x0D61	; 0x800d61 <dt+0x3>
    219e:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <dt+0x4>
    21a2:	90 91 63 0d 	lds	r25, 0x0D63	; 0x800d63 <dt+0x5>
    21a6:	0e 94 6d 0b 	call	0x16da	; 0x16da <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    21aa:	48 e3       	ldi	r20, 0x38	; 56
    21ac:	59 e0       	ldi	r21, 0x09	; 9
    21ae:	61 e8       	ldi	r22, 0x81	; 129
    21b0:	7d e0       	ldi	r23, 0x0D	; 13
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    21b8:	84 e0       	ldi	r24, 0x04	; 4
    21ba:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <state_s0>
			break;
    21be:	a8 cf       	rjmp	.-176    	; 0x2110 <stage_0>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    21c0:	0e 94 b2 21 	call	0x4364	; 0x4364 <SCD30_deinit_sampling>
				return STAGE_DONE;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	08 95       	ret
    21cc:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    21ce:	08 95       	ret

Disassembly of section .text.stage_1:

00001c08 <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s1){
    1c0c:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <state_s1>
    1c10:	82 30       	cpi	r24, 0x02	; 2
    1c12:	61 f1       	breq	.+88     	; 0x1c6c <stage_1+0x64>
    1c14:	28 f4       	brcc	.+10     	; 0x1c20 <stage_1+0x18>
    1c16:	88 23       	and	r24, r24
    1c18:	51 f0       	breq	.+20     	; 0x1c2e <stage_1+0x26>
    1c1a:	81 30       	cpi	r24, 0x01	; 1
    1c1c:	f9 f0       	breq	.+62     	; 0x1c5c <stage_1+0x54>
    1c1e:	f6 cf       	rjmp	.-20     	; 0x1c0c <stage_1+0x4>
    1c20:	84 30       	cpi	r24, 0x04	; 4
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <stage_1+0x1e>
    1c24:	59 c0       	rjmp	.+178    	; 0x1cd8 <stage_1+0xd0>
    1c26:	50 f1       	brcs	.+84     	; 0x1c7c <stage_1+0x74>
    1c28:	85 30       	cpi	r24, 0x05	; 5
    1c2a:	a1 f1       	breq	.+104    	; 0x1c94 <stage_1+0x8c>
    1c2c:	ef cf       	rjmp	.-34     	; 0x1c0c <stage_1+0x4>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    1c2e:	ce ee       	ldi	r28, 0xEE	; 238
    1c30:	dc e0       	ldi	r29, 0x0C	; 12
    1c32:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c34:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c36:	48 e3       	ldi	r20, 0x38	; 56
    1c38:	59 e0       	ldi	r21, 0x09	; 9
    1c3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c3e:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    1c42:	6d 81       	ldd	r22, Y+5	; 0x05
    1c44:	7e 81       	ldd	r23, Y+6	; 0x06
    1c46:	40 ee       	ldi	r20, 0xE0	; 224
    1c48:	56 e0       	ldi	r21, 0x06	; 6
    1c4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1c50:	81 11       	cpse	r24, r1
    1c52:	48 c0       	rjmp	.+144    	; 0x1ce4 <stage_1+0xdc>
				
				state_s1=STAGE_GET_TIME;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <state_s1>
			break;
    1c5a:	d8 cf       	rjmp	.-80     	; 0x1c0c <stage_1+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1c5c:	8e e5       	ldi	r24, 0x5E	; 94
    1c5e:	9d e0       	ldi	r25, 0x0D	; 13
    1c60:	0e 94 cd 0a 	call	0x159a	; 0x159a <RTC_get_current_time>
				
				state_s1=STAGE_START;
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <state_s1>
			break;
    1c6a:	d0 cf       	rjmp	.-96     	; 0x1c0c <stage_1+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    1c6c:	0e 94 38 22 	call	0x4470	; 0x4470 <SCD30_start_sampling>
				ADC_start_sampling();
    1c70:	0e 94 29 22 	call	0x4452	; 0x4452 <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    1c74:	83 e0       	ldi	r24, 0x03	; 3
    1c76:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <state_s1>
			break;
    1c7a:	c8 cf       	rjmp	.-112    	; 0x1c0c <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1c7c:	0e 94 48 20 	call	0x4090	; 0x4090 <SCD30_is_sampling_done>
    1c80:	88 23       	and	r24, r24
    1c82:	91 f1       	breq	.+100    	; 0x1ce8 <stage_1+0xe0>
    1c84:	0e 94 10 20 	call	0x4020	; 0x4020 <ADC_is_sampling_done>
    1c88:	88 23       	and	r24, r24
    1c8a:	81 f1       	breq	.+96     	; 0x1cec <stage_1+0xe4>
				state_s1=STAGE_UPDATE_MRPP;
    1c8c:	85 e0       	ldi	r24, 0x05	; 5
    1c8e:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <state_s1>
			break;
    1c92:	bc cf       	rjmp	.-136    	; 0x1c0c <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1c94:	21 e8       	ldi	r18, 0x81	; 129
    1c96:	3d e0       	ldi	r19, 0x0D	; 13
    1c98:	40 91 5e 0d 	lds	r20, 0x0D5E	; 0x800d5e <dt>
    1c9c:	50 91 5f 0d 	lds	r21, 0x0D5F	; 0x800d5f <dt+0x1>
    1ca0:	60 91 60 0d 	lds	r22, 0x0D60	; 0x800d60 <dt+0x2>
    1ca4:	70 91 61 0d 	lds	r23, 0x0D61	; 0x800d61 <dt+0x3>
    1ca8:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <dt+0x4>
    1cac:	90 91 63 0d 	lds	r25, 0x0D63	; 0x800d63 <dt+0x5>
    1cb0:	0e 94 6d 0b 	call	0x16da	; 0x16da <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    1cb4:	48 e3       	ldi	r20, 0x38	; 56
    1cb6:	59 e0       	ldi	r21, 0x09	; 9
    1cb8:	61 e8       	ldi	r22, 0x81	; 129
    1cba:	7d e0       	ldi	r23, 0x0D	; 13
    1cbc:	83 e0       	ldi	r24, 0x03	; 3
    1cbe:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    1cc2:	40 ee       	ldi	r20, 0xE0	; 224
    1cc4:	56 e0       	ldi	r21, 0x06	; 6
    1cc6:	61 e8       	ldi	r22, 0x81	; 129
    1cc8:	7d e0       	ldi	r23, 0x0D	; 13
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    1cd0:	84 e0       	ldi	r24, 0x04	; 4
    1cd2:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <state_s1>
			break;
    1cd6:	9a cf       	rjmp	.-204    	; 0x1c0c <stage_1+0x4>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    1cd8:	0e 94 b2 21 	call	0x4364	; 0x4364 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    1cdc:	0e 94 34 21 	call	0x4268	; 0x4268 <ADC_deinit_sampling>
				return STAGE_DONE;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	05 c0       	rjmp	.+10     	; 0x1cee <stage_1+0xe6>
		switch(state_s1){
			case STAGE_INIT:
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1ce4:	83 e0       	ldi	r24, 0x03	; 3
    1ce6:	03 c0       	rjmp	.+6      	; 0x1cee <stage_1+0xe6>
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <stage_1+0xe6>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	08 95       	ret

Disassembly of section .text.stage_2:

00001916 <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
	ADC_STATUS adcStatus;
	

	while(1){
		switch(state_s2){
    191a:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <state_s2>
    191e:	82 30       	cpi	r24, 0x02	; 2
    1920:	69 f1       	breq	.+90     	; 0x197c <stage_2+0x66>
    1922:	28 f4       	brcc	.+10     	; 0x192e <stage_2+0x18>
    1924:	88 23       	and	r24, r24
    1926:	59 f0       	breq	.+22     	; 0x193e <stage_2+0x28>
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	01 f1       	breq	.+64     	; 0x196c <stage_2+0x56>
    192c:	f6 cf       	rjmp	.-20     	; 0x191a <stage_2+0x4>
    192e:	84 30       	cpi	r24, 0x04	; 4
    1930:	09 f4       	brne	.+2      	; 0x1934 <stage_2+0x1e>
    1932:	64 c0       	rjmp	.+200    	; 0x19fc <stage_2+0xe6>
    1934:	88 f1       	brcs	.+98     	; 0x1998 <stage_2+0x82>
    1936:	85 30       	cpi	r24, 0x05	; 5
    1938:	09 f4       	brne	.+2      	; 0x193c <stage_2+0x26>
    193a:	3e c0       	rjmp	.+124    	; 0x19b8 <stage_2+0xa2>
    193c:	ee cf       	rjmp	.-36     	; 0x191a <stage_2+0x4>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    193e:	ce ee       	ldi	r28, 0xEE	; 238
    1940:	dc e0       	ldi	r29, 0x0C	; 12
    1942:	6c 89       	ldd	r22, Y+20	; 0x14
    1944:	7d 89       	ldd	r23, Y+21	; 0x15
    1946:	48 e3       	ldi	r20, 0x38	; 56
    1948:	59 e0       	ldi	r21, 0x09	; 9
    194a:	8e 89       	ldd	r24, Y+22	; 0x16
    194c:	9f 89       	ldd	r25, Y+23	; 0x17
    194e:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    1952:	6f 85       	ldd	r22, Y+15	; 0x0f
    1954:	78 89       	ldd	r23, Y+16	; 0x10
    1956:	40 ee       	ldi	r20, 0xE0	; 224
    1958:	56 e0       	ldi	r21, 0x06	; 6
    195a:	89 89       	ldd	r24, Y+17	; 0x11
    195c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1960:	81 11       	cpse	r24, r1
    1962:	52 c0       	rjmp	.+164    	; 0x1a08 <stage_2+0xf2>
			
				state_s2=STAGE_GET_TIME;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <state_s2>
			break;
    196a:	d7 cf       	rjmp	.-82     	; 0x191a <stage_2+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    196c:	8e e5       	ldi	r24, 0x5E	; 94
    196e:	9d e0       	ldi	r25, 0x0D	; 13
    1970:	0e 94 cd 0a 	call	0x159a	; 0x159a <RTC_get_current_time>
			
				state_s2=STAGE_START;
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <state_s2>
			break;
    197a:	cf cf       	rjmp	.-98     	; 0x191a <stage_2+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    197c:	0e 94 38 22 	call	0x4470	; 0x4470 <SCD30_start_sampling>
				ADC_start_sampling();
    1980:	0e 94 29 22 	call	0x4452	; 0x4452 <ADC_start_sampling>
				PUMP_start(airPumpTime);
    1984:	80 91 99 0d 	lds	r24, 0x0D99	; 0x800d99 <airPumpTime>
    1988:	90 91 9a 0d 	lds	r25, 0x0D9A	; 0x800d9a <airPumpTime+0x1>
    198c:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <PUMP_start>
			
				state_s2=STAGE_WAIT;
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <state_s2>
			break;
    1996:	c1 cf       	rjmp	.-126    	; 0x191a <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    1998:	0e 94 48 20 	call	0x4090	; 0x4090 <SCD30_is_sampling_done>
    199c:	88 23       	and	r24, r24
    199e:	b1 f1       	breq	.+108    	; 0x1a0c <stage_2+0xf6>
    19a0:	0e 94 10 20 	call	0x4020	; 0x4020 <ADC_is_sampling_done>
    19a4:	88 23       	and	r24, r24
    19a6:	a1 f1       	breq	.+104    	; 0x1a10 <stage_2+0xfa>
    19a8:	0e 94 3a 20 	call	0x4074	; 0x4074 <PUMP_is_done>
    19ac:	88 23       	and	r24, r24
    19ae:	91 f1       	breq	.+100    	; 0x1a14 <stage_2+0xfe>
				state_s2=STAGE_UPDATE_MRPP;
    19b0:	85 e0       	ldi	r24, 0x05	; 5
    19b2:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <state_s2>
			break;
    19b6:	b1 cf       	rjmp	.-158    	; 0x191a <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    19b8:	21 e8       	ldi	r18, 0x81	; 129
    19ba:	3d e0       	ldi	r19, 0x0D	; 13
    19bc:	40 91 5e 0d 	lds	r20, 0x0D5E	; 0x800d5e <dt>
    19c0:	50 91 5f 0d 	lds	r21, 0x0D5F	; 0x800d5f <dt+0x1>
    19c4:	60 91 60 0d 	lds	r22, 0x0D60	; 0x800d60 <dt+0x2>
    19c8:	70 91 61 0d 	lds	r23, 0x0D61	; 0x800d61 <dt+0x3>
    19cc:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <dt+0x4>
    19d0:	90 91 63 0d 	lds	r25, 0x0D63	; 0x800d63 <dt+0x5>
    19d4:	0e 94 6d 0b 	call	0x16da	; 0x16da <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    19d8:	48 e3       	ldi	r20, 0x38	; 56
    19da:	59 e0       	ldi	r21, 0x09	; 9
    19dc:	61 e8       	ldi	r22, 0x81	; 129
    19de:	7d e0       	ldi	r23, 0x0D	; 13
    19e0:	85 e0       	ldi	r24, 0x05	; 5
    19e2:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    19e6:	40 ee       	ldi	r20, 0xE0	; 224
    19e8:	56 e0       	ldi	r21, 0x06	; 6
    19ea:	61 e8       	ldi	r22, 0x81	; 129
    19ec:	7d e0       	ldi	r23, 0x0D	; 13
    19ee:	84 e0       	ldi	r24, 0x04	; 4
    19f0:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    19f4:	84 e0       	ldi	r24, 0x04	; 4
    19f6:	80 93 b2 0d 	sts	0x0DB2, r24	; 0x800db2 <state_s2>
			break;
    19fa:	8f cf       	rjmp	.-226    	; 0x191a <stage_2+0x4>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    19fc:	0e 94 b2 21 	call	0x4364	; 0x4364 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    1a00:	0e 94 34 21 	call	0x4268	; 0x4268 <ADC_deinit_sampling>
				return STAGE_DONE;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	07 c0       	rjmp	.+14     	; 0x1a16 <stage_2+0x100>
		switch(state_s2){
			case STAGE_INIT:
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	05 c0       	rjmp	.+10     	; 0x1a16 <stage_2+0x100>
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <stage_2+0x100>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <stage_2+0x100>
    1a14:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

Disassembly of section .text.stage_3:

00001b14 <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s3){
    1b18:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <state_s3>
    1b1c:	82 30       	cpi	r24, 0x02	; 2
    1b1e:	61 f1       	breq	.+88     	; 0x1b78 <stage_3+0x64>
    1b20:	28 f4       	brcc	.+10     	; 0x1b2c <stage_3+0x18>
    1b22:	88 23       	and	r24, r24
    1b24:	51 f0       	breq	.+20     	; 0x1b3a <stage_3+0x26>
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	f9 f0       	breq	.+62     	; 0x1b68 <stage_3+0x54>
    1b2a:	f6 cf       	rjmp	.-20     	; 0x1b18 <stage_3+0x4>
    1b2c:	84 30       	cpi	r24, 0x04	; 4
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <stage_3+0x1e>
    1b30:	59 c0       	rjmp	.+178    	; 0x1be4 <stage_3+0xd0>
    1b32:	50 f1       	brcs	.+84     	; 0x1b88 <stage_3+0x74>
    1b34:	85 30       	cpi	r24, 0x05	; 5
    1b36:	a1 f1       	breq	.+104    	; 0x1ba0 <stage_3+0x8c>
    1b38:	ef cf       	rjmp	.-34     	; 0x1b18 <stage_3+0x4>
			case STAGE_INIT:
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    1b3a:	ce ee       	ldi	r28, 0xEE	; 238
    1b3c:	dc e0       	ldi	r29, 0x0C	; 12
    1b3e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1b40:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1b42:	48 e3       	ldi	r20, 0x38	; 56
    1b44:	59 e0       	ldi	r21, 0x09	; 9
    1b46:	88 a1       	ldd	r24, Y+32	; 0x20
    1b48:	99 a1       	ldd	r25, Y+33	; 0x21
    1b4a:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    1b4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b52:	40 ee       	ldi	r20, 0xE0	; 224
    1b54:	56 e0       	ldi	r21, 0x06	; 6
    1b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b58:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1b5c:	81 11       	cpse	r24, r1
    1b5e:	4c c0       	rjmp	.+152    	; 0x1bf8 <stage_3+0xe4>
			
				state_s3=STAGE_GET_TIME;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <state_s3>
			break;
    1b66:	d8 cf       	rjmp	.-80     	; 0x1b18 <stage_3+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    1b68:	8e e5       	ldi	r24, 0x5E	; 94
    1b6a:	9d e0       	ldi	r25, 0x0D	; 13
    1b6c:	0e 94 cd 0a 	call	0x159a	; 0x159a <RTC_get_current_time>
				
				state_s3=STAGE_START;
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <state_s3>
			break;
    1b76:	d0 cf       	rjmp	.-96     	; 0x1b18 <stage_3+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    1b78:	0e 94 38 22 	call	0x4470	; 0x4470 <SCD30_start_sampling>
				ADC_start_sampling();
    1b7c:	0e 94 29 22 	call	0x4452	; 0x4452 <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    1b80:	83 e0       	ldi	r24, 0x03	; 3
    1b82:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <state_s3>
			break;
    1b86:	c8 cf       	rjmp	.-112    	; 0x1b18 <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1b88:	0e 94 48 20 	call	0x4090	; 0x4090 <SCD30_is_sampling_done>
    1b8c:	88 23       	and	r24, r24
    1b8e:	b1 f1       	breq	.+108    	; 0x1bfc <stage_3+0xe8>
    1b90:	0e 94 10 20 	call	0x4020	; 0x4020 <ADC_is_sampling_done>
    1b94:	88 23       	and	r24, r24
    1b96:	a1 f1       	breq	.+104    	; 0x1c00 <stage_3+0xec>
				state_s3=STAGE_UPDATE_MRPP;
    1b98:	85 e0       	ldi	r24, 0x05	; 5
    1b9a:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <state_s3>
			break;
    1b9e:	bc cf       	rjmp	.-136    	; 0x1b18 <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    1ba0:	21 e8       	ldi	r18, 0x81	; 129
    1ba2:	3d e0       	ldi	r19, 0x0D	; 13
    1ba4:	40 91 5e 0d 	lds	r20, 0x0D5E	; 0x800d5e <dt>
    1ba8:	50 91 5f 0d 	lds	r21, 0x0D5F	; 0x800d5f <dt+0x1>
    1bac:	60 91 60 0d 	lds	r22, 0x0D60	; 0x800d60 <dt+0x2>
    1bb0:	70 91 61 0d 	lds	r23, 0x0D61	; 0x800d61 <dt+0x3>
    1bb4:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <dt+0x4>
    1bb8:	90 91 63 0d 	lds	r25, 0x0D63	; 0x800d63 <dt+0x5>
    1bbc:	0e 94 6d 0b 	call	0x16da	; 0x16da <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    1bc0:	48 e3       	ldi	r20, 0x38	; 56
    1bc2:	59 e0       	ldi	r21, 0x09	; 9
    1bc4:	61 e8       	ldi	r22, 0x81	; 129
    1bc6:	7d e0       	ldi	r23, 0x0D	; 13
    1bc8:	87 e0       	ldi	r24, 0x07	; 7
    1bca:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    1bce:	40 ee       	ldi	r20, 0xE0	; 224
    1bd0:	56 e0       	ldi	r21, 0x06	; 6
    1bd2:	61 e8       	ldi	r22, 0x81	; 129
    1bd4:	7d e0       	ldi	r23, 0x0D	; 13
    1bd6:	86 e0       	ldi	r24, 0x06	; 6
    1bd8:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    1bdc:	84 e0       	ldi	r24, 0x04	; 4
    1bde:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <state_s3>
			break;
    1be2:	9a cf       	rjmp	.-204    	; 0x1b18 <stage_3+0x4>
			
			case STAGE_DEINIT:
				SCD30_deinit_sampling();
    1be4:	0e 94 b2 21 	call	0x4364	; 0x4364 <SCD30_deinit_sampling>
				SCD30_sensor_off();
    1be8:	0e 94 66 22 	call	0x44cc	; 0x44cc <SCD30_sensor_off>
				ADC_deinit_sampling();
    1bec:	0e 94 34 21 	call	0x4268	; 0x4268 <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    1bf0:	0e 94 56 22 	call	0x44ac	; 0x44ac <ADC_meth_sens_power_off>
				return STAGE_DONE;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	05 c0       	rjmp	.+10     	; 0x1c02 <stage_3+0xee>
		switch(state_s3){
			case STAGE_INIT:
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <stage_3+0xee>
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <stage_3+0xee>
    1c00:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

Disassembly of section .text.send_body:

0000363e <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	e4 97       	sbiw	r28, 0x34	; 52
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	f8 94       	cli
    364c:	de bf       	out	0x3e, r29	; 62
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    3652:	ae 01       	movw	r20, r28
    3654:	4c 5c       	subi	r20, 0xCC	; 204
    3656:	5f 4f       	sbci	r21, 0xFF	; 255
    3658:	be 01       	movw	r22, r28
    365a:	6f 5f       	subi	r22, 0xFF	; 255
    365c:	7f 4f       	sbci	r23, 0xFF	; 255
    365e:	0e 94 db 12 	call	0x25b6	; 0x25b6 <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    3662:	6c a9       	ldd	r22, Y+52	; 0x34
    3664:	ce 01       	movw	r24, r28
    3666:	01 96       	adiw	r24, 0x01	; 1
    3668:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <LM_send_uplink>
}
    366c:	e4 96       	adiw	r28, 0x34	; 52
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	f8 94       	cli
    3672:	de bf       	out	0x3e, r29	; 62
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	cd bf       	out	0x3d, r28	; 61
    3678:	df 91       	pop	r29
    367a:	cf 91       	pop	r28
    367c:	08 95       	ret

Disassembly of section .text.decode_body_response:

00003d92 <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    3d92:	cf 93       	push	r28
	switch(status){
    3d94:	62 30       	cpi	r22, 0x02	; 2
    3d96:	71 f0       	breq	.+28     	; 0x3db4 <decode_body_response+0x22>
    3d98:	18 f4       	brcc	.+6      	; 0x3da0 <decode_body_response+0xe>
    3d9a:	66 23       	and	r22, r22
    3d9c:	31 f0       	breq	.+12     	; 0x3daa <decode_body_response+0x18>
    3d9e:	03 c0       	rjmp	.+6      	; 0x3da6 <decode_body_response+0x14>
    3da0:	64 50       	subi	r22, 0x04	; 4
    3da2:	62 30       	cpi	r22, 0x02	; 2
    3da4:	10 f0       	brcs	.+4      	; 0x3daa <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    3da6:	86 e1       	ldi	r24, 0x16	; 22
    3da8:	06 c0       	rjmp	.+12     	; 0x3db6 <decode_body_response+0x24>
    3daa:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    3dac:	0e 94 0d 22 	call	0x441a	; 0x441a <MRPP_set_body_sent>
			return success;
    3db0:	8c 2f       	mov	r24, r28
    3db2:	01 c0       	rjmp	.+2      	; 0x3db6 <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    3db4:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    3db6:	cf 91       	pop	r28
    3db8:	08 95       	ret

Disassembly of section .text.send_tail:

000036bc <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
    36c4:	e4 97       	sbiw	r28, 0x34	; 52
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    36d0:	be 01       	movw	r22, r28
    36d2:	6c 5c       	subi	r22, 0xCC	; 204
    36d4:	7f 4f       	sbci	r23, 0xFF	; 255
    36d6:	ce 01       	movw	r24, r28
    36d8:	01 96       	adiw	r24, 0x01	; 1
    36da:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    36de:	6c a9       	ldd	r22, Y+52	; 0x34
    36e0:	ce 01       	movw	r24, r28
    36e2:	01 96       	adiw	r24, 0x01	; 1
    36e4:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <LM_send_uplink>
}
    36e8:	e4 96       	adiw	r28, 0x34	; 52
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	df 91       	pop	r29
    36f6:	cf 91       	pop	r28
    36f8:	08 95       	ret

Disassembly of section .text.send_msg:

00004144 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    4144:	0e 94 6f 13 	call	0x26de	; 0x26de <uart1_hal_send_string>
    4148:	2f ef       	ldi	r18, 0xFF	; 255
    414a:	80 e7       	ldi	r24, 0x70	; 112
    414c:	92 e0       	ldi	r25, 0x02	; 2
    414e:	21 50       	subi	r18, 0x01	; 1
    4150:	80 40       	sbci	r24, 0x00	; 0
    4152:	90 40       	sbci	r25, 0x00	; 0
    4154:	e1 f7       	brne	.-8      	; 0x414e <send_msg+0xa>
    4156:	00 c0       	rjmp	.+0      	; 0x4158 <send_msg+0x14>
    4158:	00 00       	nop
    415a:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00000b2c <MAINPG_start>:


static void send_msg(const char msg[]);


void MAINPG_start(){
 b2c:	df 92       	push	r13
 b2e:	ef 92       	push	r14
 b30:	ff 92       	push	r15
 b32:	0f 93       	push	r16
 b34:	1f 93       	push	r17
 b36:	cf 93       	push	r28
 b38:	df 93       	push	r29
	MAINPG_STATES comeBackToState;
	RTC_STATUS rtcStatus;
	LM_STATUS lmStatus;
	SCD30_STATUS scd30Status;
	STAGE_STATUS stageStatus;
	bool fromSleep=false;
 b3a:	d1 2c       	mov	r13, r1

static void send_msg(const char msg[]);


void MAINPG_start(){
	MAINPG_STATES state=MAINPG_INIT_HW;
 b3c:	c0 e0       	ldi	r28, 0x00	; 0
 b3e:	1a c0       	rjmp	.+52     	; 0xb74 <MAINPG_start+0x48>
				PM_HAL_SCD30_power_init();
				PM_HAL_LED_power_init();
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
 b40:	c6 e0       	ldi	r28, 0x06	; 6
 b42:	18 c0       	rjmp	.+48     	; 0xb74 <MAINPG_start+0x48>
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
 b44:	c5 e0       	ldi	r28, 0x05	; 5
 b46:	16 c0       	rjmp	.+44     	; 0xb74 <MAINPG_start+0x48>
 b48:	c5 e0       	ldi	r28, 0x05	; 5
 b4a:	14 c0       	rjmp	.+40     	; 0xb74 <MAINPG_start+0x48>
 b4c:	c5 e0       	ldi	r28, 0x05	; 5
 b4e:	12 c0       	rjmp	.+36     	; 0xb74 <MAINPG_start+0x48>
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
 b50:	c5 e0       	ldi	r28, 0x05	; 5
 b52:	10 c0       	rjmp	.+32     	; 0xb74 <MAINPG_start+0x48>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
 b54:	c6 e1       	ldi	r28, 0x16	; 22
 b56:	0e c0       	rjmp	.+28     	; 0xb74 <MAINPG_start+0x48>
			/*                                                                      */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 b58:	c6 e1       	ldi	r28, 0x16	; 22
 b5a:	0c c0       	rjmp	.+24     	; 0xb74 <MAINPG_start+0x48>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 b5c:	c6 e1       	ldi	r28, 0x16	; 22
 b5e:	0a c0       	rjmp	.+20     	; 0xb74 <MAINPG_start+0x48>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 b60:	c6 e1       	ldi	r28, 0x16	; 22
 b62:	08 c0       	rjmp	.+16     	; 0xb74 <MAINPG_start+0x48>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 b64:	c6 e1       	ldi	r28, 0x16	; 22
 b66:	06 c0       	rjmp	.+12     	; 0xb74 <MAINPG_start+0x48>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
 b68:	cd 2f       	mov	r28, r29
 b6a:	04 c0       	rjmp	.+8      	; 0xb74 <MAINPG_start+0x48>
 b6c:	cd 2f       	mov	r28, r29
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
 b70:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
 b72:	c1 e1       	ldi	r28, 0x11	; 17
	STAGE_STATUS stageStatus;
	bool fromSleep=false;
	

	while(1){
		switch(state){
 b74:	ec 2f       	mov	r30, r28
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	e8 31       	cpi	r30, 0x18	; 24
 b7a:	f1 05       	cpc	r31, r1
 b7c:	d8 f7       	brcc	.-10     	; 0xb74 <MAINPG_start+0x48>
 b7e:	e5 5b       	subi	r30, 0xB5	; 181
 b80:	ff 4f       	sbci	r31, 0xFF	; 255
 b82:	0c 94 19 22 	jmp	0x4432	; 0x4432 <__tablejump2__>
			case MAINPG_INIT_HW:
				
				uart0_hal_init();
 b86:	0e 94 9b 1b 	call	0x3736	; 0x3736 <uart0_hal_init>
				uart1_hal_init();
 b8a:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <uart1_hal_init>
				TWI_HAL_init();
 b8e:	0e 94 3e 21 	call	0x427c	; 0x427c <TWI_HAL_init>
				TC2_HAL_init();
 b92:	0e 94 77 1f 	call	0x3eee	; 0x3eee <TC2_HAL_init>
				rn2483_init();
 b96:	0e 94 46 22 	call	0x448c	; 0x448c <rn2483_init>
				SCD30_HAL_init();
 b9a:	0e 94 9d 21 	call	0x433a	; 0x433a <SCD30_HAL_init>
				PM_HAL_adc_power_init();
 b9e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
 ba2:	0e 94 81 21 	call	0x4302	; 0x4302 <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
 ba6:	0e 94 8f 21 	call	0x431e	; 0x431e <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
 baa:	0e 94 88 21 	call	0x4310	; 0x4310 <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
 bae:	0e 94 96 21 	call	0x432c	; 0x432c <PM_HAL_LED_power_init>
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
 bb2:	d1 10       	cpse	r13, r1
 bb4:	c5 cf       	rjmp	.-118    	; 0xb40 <MAINPG_start+0x14>
 bb6:	c1 e0       	ldi	r28, 0x01	; 1
 bb8:	dd cf       	rjmp	.-70     	; 0xb74 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
 bba:	0e 94 ae 20 	call	0x415c	; 0x415c <EM_has_deveui>
 bbe:	88 23       	and	r24, r24
 bc0:	09 f2       	breq	.-126    	; 0xb44 <MAINPG_start+0x18>
 bc2:	0e 94 b9 20 	call	0x4172	; 0x4172 <EM_has_appeui>
 bc6:	88 23       	and	r24, r24
 bc8:	09 f4       	brne	.+2      	; 0xbcc <MAINPG_start+0xa0>
 bca:	be cf       	rjmp	.-132    	; 0xb48 <MAINPG_start+0x1c>
 bcc:	0e 94 c4 20 	call	0x4188	; 0x4188 <EM_has_appkey>
 bd0:	88 23       	and	r24, r24
 bd2:	09 f4       	brne	.+2      	; 0xbd6 <MAINPG_start+0xaa>
 bd4:	bb cf       	rjmp	.-138    	; 0xb4c <MAINPG_start+0x20>
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
					if(!read_eeprom()){
 bd6:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <read_eeprom>
 bda:	88 23       	and	r24, r24
 bdc:	09 f4       	brne	.+2      	; 0xbe0 <MAINPG_start+0xb4>
 bde:	b8 cf       	rjmp	.-144    	; 0xb50 <MAINPG_start+0x24>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					//state=MAINPG_LORA_JOIN_NETWORK;
					state=MAINPG_LORA_WAKEUP;
 be0:	c6 e0       	ldi	r28, 0x06	; 6
 be2:	c8 cf       	rjmp	.-112    	; 0xb74 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("Join\n\r");
 be4:	6e e3       	ldi	r22, 0x3E	; 62
 be6:	72 e0       	ldi	r23, 0x02	; 2
 be8:	80 e0       	ldi	r24, 0x00	; 0
 bea:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				LED_start_try_join();
 bee:	0e 94 ab 21 	call	0x4356	; 0x4356 <LED_start_try_join>
				lmStatus=join_lora();
 bf2:	0e 94 50 21 	call	0x42a0	; 0x42a0 <join_lora>
 bf6:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
 bf8:	0e 94 72 21 	call	0x42e4	; 0x42e4 <LED_stop_try_join>
				state=decode_join_response(lmStatus);
 bfc:	8c 2f       	mov	r24, r28
 bfe:	0e 94 56 20 	call	0x40ac	; 0x40ac <decode_join_response>
 c02:	c8 2f       	mov	r28, r24
			break;
 c04:	b7 cf       	rjmp	.-146    	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				LED_join_success();
 c06:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <LED_join_success>
				state=MAINPG_INIT_MODULES;
 c0a:	ca e0       	ldi	r28, 0x0A	; 10
			break;
 c0c:	b3 cf       	rjmp	.-154    	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("LoRa WAKE UP\n\r");
 c0e:	65 e4       	ldi	r22, 0x45	; 69
 c10:	72 e0       	ldi	r23, 0x02	; 2
 c12:	80 e0       	ldi	r24, 0x00	; 0
 c14:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				lmStatus=LM_wake_up();
 c18:	0e 94 81 22 	call	0x4502	; 0x4502 <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
 c1c:	81 11       	cpse	r24, r1
 c1e:	9a cf       	rjmp	.-204    	; 0xb54 <MAINPG_start+0x28>
 c20:	ca e0       	ldi	r28, 0x0A	; 10
 c22:	a8 cf       	rjmp	.-176    	; 0xb74 <MAINPG_start+0x48>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("Try again\n\r");
 c24:	64 e5       	ldi	r22, 0x54	; 84
 c26:	72 e0       	ldi	r23, 0x02	; 2
 c28:	80 e0       	ldi	r24, 0x00	; 0
 c2a:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				LED_join_denied();
 c2e:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <LED_join_denied>
 c32:	2f ef       	ldi	r18, 0xFF	; 255
 c34:	81 e1       	ldi	r24, 0x11	; 17
 c36:	9a e7       	ldi	r25, 0x7A	; 122
 c38:	21 50       	subi	r18, 0x01	; 1
 c3a:	80 40       	sbci	r24, 0x00	; 0
 c3c:	90 40       	sbci	r25, 0x00	; 0
 c3e:	e1 f7       	brne	.-8      	; 0xc38 <MAINPG_start+0x10c>
 c40:	00 c0       	rjmp	.+0      	; 0xc42 <MAINPG_start+0x116>
 c42:	00 00       	nop
				_delay_ms(5000);
				state=MAINPG_LORA_JOIN_NETWORK;
 c44:	c2 e0       	ldi	r28, 0x02	; 2
			break;
 c46:	96 cf       	rjmp	.-212    	; 0xb74 <MAINPG_start+0x48>
			
			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
 c48:	e0 90 75 0d 	lds	r14, 0x0D75	; 0x800d75 <ppmx>
 c4c:	f0 90 76 0d 	lds	r15, 0x0D76	; 0x800d76 <ppmx+0x1>
 c50:	00 91 77 0d 	lds	r16, 0x0D77	; 0x800d77 <ppmx+0x2>
 c54:	10 91 78 0d 	lds	r17, 0x0D78	; 0x800d78 <ppmx+0x3>
 c58:	20 91 79 0d 	lds	r18, 0x0D79	; 0x800d79 <rrlx>
 c5c:	30 91 7a 0d 	lds	r19, 0x0D7A	; 0x800d7a <rrlx+0x1>
 c60:	40 91 7b 0d 	lds	r20, 0x0D7B	; 0x800d7b <rrlx+0x2>
 c64:	50 91 7c 0d 	lds	r21, 0x0D7C	; 0x800d7c <rrlx+0x3>
 c68:	60 91 7d 0d 	lds	r22, 0x0D7D	; 0x800d7d <vccx>
 c6c:	70 91 7e 0d 	lds	r23, 0x0D7E	; 0x800d7e <vccx+0x1>
 c70:	80 91 7f 0d 	lds	r24, 0x0D7F	; 0x800d7f <vccx+0x2>
 c74:	90 91 80 0d 	lds	r25, 0x0D80	; 0x800d80 <vccx+0x3>
 c78:	0e 94 bd 1a 	call	0x357a	; 0x357a <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
 c7c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
 c80:	81 11       	cpse	r24, r1
 c82:	6a cf       	rjmp	.-300    	; 0xb58 <MAINPG_start+0x2c>
 c84:	c7 e0       	ldi	r28, 0x07	; 7
 c86:	76 cf       	rjmp	.-276    	; 0xb74 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("INIT RTC\n\r");
 c88:	60 e6       	ldi	r22, 0x60	; 96
 c8a:	72 e0       	ldi	r23, 0x02	; 2
 c8c:	80 e0       	ldi	r24, 0x00	; 0
 c8e:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
 c92:	81 e0       	ldi	r24, 0x01	; 1
 c94:	0e 94 06 18 	call	0x300c	; 0x300c <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
 c98:	81 11       	cpse	r24, r1
 c9a:	60 cf       	rjmp	.-320    	; 0xb5c <MAINPG_start+0x30>
 c9c:	c9 e0       	ldi	r28, 0x09	; 9
 c9e:	6a cf       	rjmp	.-300    	; 0xb74 <MAINPG_start+0x48>
				//state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("Clear interrupt\n\r");
 ca0:	6b e6       	ldi	r22, 0x6B	; 107
 ca2:	72 e0       	ldi	r23, 0x02	; 2
 ca4:	80 e0       	ldi	r24, 0x00	; 0
 ca6:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
 caa:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
 cae:	81 11       	cpse	r24, r1
 cb0:	57 cf       	rjmp	.-338    	; 0xb60 <MAINPG_start+0x34>
 cb2:	c8 e0       	ldi	r28, 0x08	; 8
 cb4:	5f cf       	rjmp	.-322    	; 0xb74 <MAINPG_start+0x48>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("Set wake interrupt\n\r");
 cb6:	6d e7       	ldi	r22, 0x7D	; 125
 cb8:	72 e0       	ldi	r23, 0x02	; 2
 cba:	80 e0       	ldi	r24, 0x00	; 0
 cbc:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				rtcStatus=set_wakeup();
 cc0:	0e 94 3d 22 	call	0x447a	; 0x447a <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
 cc4:	81 11       	cpse	r24, r1
 cc6:	4e cf       	rjmp	.-356    	; 0xb64 <MAINPG_start+0x38>
 cc8:	cb e0       	ldi	r28, 0x0B	; 11
 cca:	54 cf       	rjmp	.-344    	; 0xb74 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("Mrpp init\n\r");
 ccc:	62 e9       	ldi	r22, 0x92	; 146
 cce:	72 e0       	ldi	r23, 0x02	; 2
 cd0:	80 e0       	ldi	r24, 0x00	; 0
 cd2:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				MRPP_init_group(cols, N_COLLECTIONS);
 cd6:	67 e0       	ldi	r22, 0x07	; 7
 cd8:	8e ee       	ldi	r24, 0xEE	; 238
 cda:	9c e0       	ldi	r25, 0x0C	; 12
 cdc:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <MRPP_init_group>
				state=MAINPG_SEND_HEADER;
 ce0:	cc e0       	ldi	r28, 0x0C	; 12
			break;
 ce2:	48 cf       	rjmp	.-368    	; 0xb74 <MAINPG_start+0x48>
				//scd30Status=SCD30_sensor_on();
				//state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_SEND_HEADER:MAINPG_FATAL_ERROR;
			//break;
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
 ce4:	0e 94 2e 22 	call	0x445c	; 0x445c <LM_is_free>
 ce8:	88 23       	and	r24, r24
 cea:	09 f4       	brne	.+2      	; 0xcee <MAINPG_start+0x1c2>
 cec:	43 cf       	rjmp	.-378    	; 0xb74 <MAINPG_start+0x48>
					state=MAINPG_SEND_HEADER;
					break;
				}
				lmStatus=send_header();
 cee:	0e 94 3f 1b 	call	0x367e	; 0x367e <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
 cf2:	4c e0       	ldi	r20, 0x0C	; 12
 cf4:	6d e0       	ldi	r22, 0x0D	; 13
 cf6:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <decode_header_tail_response>
 cfa:	c8 2f       	mov	r28, r24
			break;
 cfc:	3b cf       	rjmp	.-394    	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
 cfe:	0e 94 88 10 	call	0x2110	; 0x2110 <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 d02:	6e e0       	ldi	r22, 0x0E	; 14
 d04:	0e 94 cf 20 	call	0x419e	; 0x419e <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
 d08:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
 d0a:	c8 2f       	mov	r28, r24
			break;
 d0c:	33 cf       	rjmp	.-410    	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
 d0e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 d12:	6f e0       	ldi	r22, 0x0F	; 15
 d14:	0e 94 cf 20 	call	0x419e	; 0x419e <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
 d18:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
 d1a:	c8 2f       	mov	r28, r24
			break;
 d1c:	2b cf       	rjmp	.-426    	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
 d1e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
 d22:	60 e1       	ldi	r22, 0x10	; 16
 d24:	0e 94 cf 20 	call	0x419e	; 0x419e <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
 d28:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
 d2a:	c8 2f       	mov	r28, r24
			break;
 d2c:	23 cf       	rjmp	.-442    	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
 d2e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 d32:	62 e1       	ldi	r22, 0x12	; 18
 d34:	0e 94 cf 20 	call	0x419e	; 0x419e <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
 d38:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
 d3a:	c8 2f       	mov	r28, r24
			break;
 d3c:	1b cf       	rjmp	.-458    	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
 d3e:	8b e9       	ldi	r24, 0x9B	; 155
 d40:	9d e0       	ldi	r25, 0x0D	; 13
 d42:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <MRPP_is_body_package_ready>
 d46:	88 23       	and	r24, r24
 d48:	09 f4       	brne	.+2      	; 0xd4c <MAINPG_start+0x220>
 d4a:	0e cf       	rjmp	.-484    	; 0xb68 <MAINPG_start+0x3c>
 d4c:	0e 94 2e 22 	call	0x445c	; 0x445c <LM_is_free>
 d50:	88 23       	and	r24, r24
 d52:	09 f4       	brne	.+2      	; 0xd56 <MAINPG_start+0x22a>
 d54:	0b cf       	rjmp	.-490    	; 0xb6c <MAINPG_start+0x40>
					lmStatus=send_body(bodyIndex);
 d56:	80 91 9b 0d 	lds	r24, 0x0D9B	; 0x800d9b <bodyIndex>
 d5a:	90 91 9c 0d 	lds	r25, 0x0D9C	; 0x800d9c <bodyIndex+0x1>
 d5e:	0e 94 1f 1b 	call	0x363e	; 0x363e <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
 d62:	4d 2f       	mov	r20, r29
 d64:	68 2f       	mov	r22, r24
 d66:	80 91 9b 0d 	lds	r24, 0x0D9B	; 0x800d9b <bodyIndex>
 d6a:	90 91 9c 0d 	lds	r25, 0x0D9C	; 0x800d9c <bodyIndex+0x1>
 d6e:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <decode_body_response>
 d72:	c8 2f       	mov	r28, r24
 d74:	ff ce       	rjmp	.-514    	; 0xb74 <MAINPG_start+0x48>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
 d76:	0e 94 33 22 	call	0x4466	; 0x4466 <MRPP_all_body_package_sent>
 d7a:	88 23       	and	r24, r24
 d7c:	09 f4       	brne	.+2      	; 0xd80 <MAINPG_start+0x254>
 d7e:	f8 ce       	rjmp	.-528    	; 0xb70 <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
 d80:	c3 e1       	ldi	r28, 0x13	; 19
 d82:	f8 ce       	rjmp	.-528    	; 0xb74 <MAINPG_start+0x48>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
 d84:	0e 94 2e 22 	call	0x445c	; 0x445c <LM_is_free>
 d88:	88 23       	and	r24, r24
 d8a:	09 f4       	brne	.+2      	; 0xd8e <MAINPG_start+0x262>
 d8c:	f3 ce       	rjmp	.-538    	; 0xb74 <MAINPG_start+0x48>
					state=MAINPG_SEND_TAIL;
					break;
				}
				lmStatus=send_tail();
 d8e:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
 d92:	43 e1       	ldi	r20, 0x13	; 19
 d94:	64 e1       	ldi	r22, 0x14	; 20
 d96:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <decode_header_tail_response>
 d9a:	c8 2f       	mov	r28, r24
				
			break;
 d9c:	eb ce       	rjmp	.-554    	; 0xb74 <MAINPG_start+0x48>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				lmStatus=LM_put_to_sleep();
 d9e:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
 da2:	dd 24       	eor	r13, r13
 da4:	d3 94       	inc	r13
 da6:	81 11       	cpse	r24, r1
 da8:	d1 2c       	mov	r13, r1
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
 daa:	80 e0       	ldi	r24, 0x00	; 0
 dac:	0e 94 da 20 	call	0x41b4	; 0x41b4 <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
 db0:	80 e0       	ldi	r24, 0x00	; 0
 db2:	0e 94 ee 20 	call	0x41dc	; 0x41dc <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
 db6:	80 e0       	ldi	r24, 0x00	; 0
 db8:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
 dbc:	80 e0       	ldi	r24, 0x00	; 0
 dbe:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
 dc2:	80 e0       	ldi	r24, 0x00	; 0
 dc4:	0e 94 02 21 	call	0x4204	; 0x4204 <PM_HAL_LED_power>
				
				state=MAINPG_SLEEP;
 dc8:	c5 e1       	ldi	r28, 0x15	; 21
			break;
 dca:	d4 ce       	rjmp	.-600    	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_SLEEP:
				print_debug("Sleep\n\r");
 dcc:	6e e9       	ldi	r22, 0x9E	; 158
 dce:	72 e0       	ldi	r23, 0x02	; 2
 dd0:	80 e0       	ldi	r24, 0x00	; 0
 dd2:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				PM_HAL_enter_power_down();
 dd6:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <PM_HAL_enter_power_down>
				print_debug("Awake\n\r");
 dda:	66 ea       	ldi	r22, 0xA6	; 166
 ddc:	72 e0       	ldi	r23, 0x02	; 2
 dde:	80 e0       	ldi	r24, 0x00	; 0
 de0:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				state=MAINPG_INIT_HW;
 de4:	c0 e0       	ldi	r28, 0x00	; 0
			break;
 de6:	c6 ce       	rjmp	.-628    	; 0xb74 <MAINPG_start+0x48>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_CONF_ERR:
				LED_conf_err();
 de8:	0e 94 5e 22 	call	0x44bc	; 0x44bc <LED_conf_err>
				print_debug("Conf err\n\r");
 dec:	6e ea       	ldi	r22, 0xAE	; 174
 dee:	72 e0       	ldi	r23, 0x02	; 2
 df0:	80 e0       	ldi	r24, 0x00	; 0
 df2:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				state=MAINPG_END;
 df6:	c7 e1       	ldi	r28, 0x17	; 23
			break;
 df8:	bd ce       	rjmp	.-646    	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_FATAL_ERROR:
				print_debug("Fatal error\n\r");
 dfa:	69 eb       	ldi	r22, 0xB9	; 185
 dfc:	72 e0       	ldi	r23, 0x02	; 2
 dfe:	80 e0       	ldi	r24, 0x00	; 0
 e00:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				LED_fatal_err();
 e04:	0e 94 62 22 	call	0x44c4	; 0x44c4 <LED_fatal_err>
				state=MAINPG_END;
 e08:	c7 e1       	ldi	r28, 0x17	; 23
			break;
 e0a:	b4 ce       	rjmp	.-664    	; 0xb74 <MAINPG_start+0x48>
			
			case MAINPG_END:
				print_debug("END\n\r");
 e0c:	67 ec       	ldi	r22, 0xC7	; 199
 e0e:	72 e0       	ldi	r23, 0x02	; 2
 e10:	80 e0       	ldi	r24, 0x00	; 0
 e12:	0e 94 a2 20 	call	0x4144	; 0x4144 <send_msg>
				return;
			break;	
		}
	}
}
 e16:	df 91       	pop	r29
 e18:	cf 91       	pop	r28
 e1a:	1f 91       	pop	r17
 e1c:	0f 91       	pop	r16
 e1e:	ff 90       	pop	r15
 e20:	ef 90       	pop	r14
 e22:	df 90       	pop	r13
 e24:	08 95       	ret

Disassembly of section .text.calc_crc8:

00003902 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    3902:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3904:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    3906:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    3908:	14 c0       	rjmp	.+40     	; 0x3932 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    390a:	fa 01       	movw	r30, r20
    390c:	e3 0f       	add	r30, r19
    390e:	f1 1d       	adc	r31, r1
    3910:	90 81       	ld	r25, Z
    3912:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    3914:	28 e0       	ldi	r18, 0x08	; 8
    3916:	0a c0       	rjmp	.+20     	; 0x392c <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    3918:	88 23       	and	r24, r24
    391a:	34 f4       	brge	.+12     	; 0x3928 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	88 0f       	add	r24, r24
    3920:	99 1f       	adc	r25, r25
    3922:	91 e3       	ldi	r25, 0x31	; 49
    3924:	89 27       	eor	r24, r25
    3926:	01 c0       	rjmp	.+2      	; 0x392a <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    3928:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    392a:	21 50       	subi	r18, 0x01	; 1
    392c:	21 11       	cpse	r18, r1
    392e:	f4 cf       	rjmp	.-24     	; 0x3918 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3930:	3f 5f       	subi	r19, 0xFF	; 255
    3932:	36 17       	cp	r19, r22
    3934:	50 f3       	brcs	.-44     	; 0x390a <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    3936:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004372 <__subsf3>:
    4372:	50 58       	subi	r21, 0x80	; 128

00004374 <__addsf3>:
    4374:	bb 27       	eor	r27, r27
    4376:	aa 27       	eor	r26, r26
    4378:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__addsf3x>
    437c:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001f7e <__addsf3x>:
    1f7e:	11 c0       	rjmp	.+34     	; 0x1fa2 <__addsf3x+0x24>
    1f80:	0e 94 c0 21 	call	0x4380	; 0x4380 <__fp_pscA>
    1f84:	38 f0       	brcs	.+14     	; 0x1f94 <__addsf3x+0x16>
    1f86:	0e 94 c7 21 	call	0x438e	; 0x438e <__fp_pscB>
    1f8a:	20 f0       	brcs	.+8      	; 0x1f94 <__addsf3x+0x16>
    1f8c:	39 f4       	brne	.+14     	; 0x1f9c <__addsf3x+0x1e>
    1f8e:	9f 3f       	cpi	r25, 0xFF	; 255
    1f90:	19 f4       	brne	.+6      	; 0x1f98 <__addsf3x+0x1a>
    1f92:	26 f4       	brtc	.+8      	; 0x1f9c <__addsf3x+0x1e>
    1f94:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__fp_nan>
    1f98:	0e f4       	brtc	.+2      	; 0x1f9c <__addsf3x+0x1e>
    1f9a:	e0 95       	com	r30
    1f9c:	e7 fb       	bst	r30, 7
    1f9e:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__fp_inf>
    1fa2:	e9 2f       	mov	r30, r25
    1fa4:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__fp_split3>
    1fa8:	58 f3       	brcs	.-42     	; 0x1f80 <__addsf3x+0x2>
    1faa:	ba 17       	cp	r27, r26
    1fac:	62 07       	cpc	r22, r18
    1fae:	73 07       	cpc	r23, r19
    1fb0:	84 07       	cpc	r24, r20
    1fb2:	95 07       	cpc	r25, r21
    1fb4:	20 f0       	brcs	.+8      	; 0x1fbe <__addsf3x+0x40>
    1fb6:	79 f4       	brne	.+30     	; 0x1fd6 <__addsf3x+0x58>
    1fb8:	a6 f5       	brtc	.+104    	; 0x2022 <__addsf3x+0xa4>
    1fba:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__fp_zero>
    1fbe:	0e f4       	brtc	.+2      	; 0x1fc2 <__addsf3x+0x44>
    1fc0:	e0 95       	com	r30
    1fc2:	0b 2e       	mov	r0, r27
    1fc4:	ba 2f       	mov	r27, r26
    1fc6:	a0 2d       	mov	r26, r0
    1fc8:	0b 01       	movw	r0, r22
    1fca:	b9 01       	movw	r22, r18
    1fcc:	90 01       	movw	r18, r0
    1fce:	0c 01       	movw	r0, r24
    1fd0:	ca 01       	movw	r24, r20
    1fd2:	a0 01       	movw	r20, r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	ff 27       	eor	r31, r31
    1fd8:	59 1b       	sub	r21, r25
    1fda:	99 f0       	breq	.+38     	; 0x2002 <__addsf3x+0x84>
    1fdc:	59 3f       	cpi	r21, 0xF9	; 249
    1fde:	50 f4       	brcc	.+20     	; 0x1ff4 <__addsf3x+0x76>
    1fe0:	50 3e       	cpi	r21, 0xE0	; 224
    1fe2:	68 f1       	brcs	.+90     	; 0x203e <__addsf3x+0xc0>
    1fe4:	1a 16       	cp	r1, r26
    1fe6:	f0 40       	sbci	r31, 0x00	; 0
    1fe8:	a2 2f       	mov	r26, r18
    1fea:	23 2f       	mov	r18, r19
    1fec:	34 2f       	mov	r19, r20
    1fee:	44 27       	eor	r20, r20
    1ff0:	58 5f       	subi	r21, 0xF8	; 248
    1ff2:	f3 cf       	rjmp	.-26     	; 0x1fda <__addsf3x+0x5c>
    1ff4:	46 95       	lsr	r20
    1ff6:	37 95       	ror	r19
    1ff8:	27 95       	ror	r18
    1ffa:	a7 95       	ror	r26
    1ffc:	f0 40       	sbci	r31, 0x00	; 0
    1ffe:	53 95       	inc	r21
    2000:	c9 f7       	brne	.-14     	; 0x1ff4 <__addsf3x+0x76>
    2002:	7e f4       	brtc	.+30     	; 0x2022 <__addsf3x+0xa4>
    2004:	1f 16       	cp	r1, r31
    2006:	ba 0b       	sbc	r27, r26
    2008:	62 0b       	sbc	r22, r18
    200a:	73 0b       	sbc	r23, r19
    200c:	84 0b       	sbc	r24, r20
    200e:	ba f0       	brmi	.+46     	; 0x203e <__addsf3x+0xc0>
    2010:	91 50       	subi	r25, 0x01	; 1
    2012:	a1 f0       	breq	.+40     	; 0x203c <__addsf3x+0xbe>
    2014:	ff 0f       	add	r31, r31
    2016:	bb 1f       	adc	r27, r27
    2018:	66 1f       	adc	r22, r22
    201a:	77 1f       	adc	r23, r23
    201c:	88 1f       	adc	r24, r24
    201e:	c2 f7       	brpl	.-16     	; 0x2010 <__addsf3x+0x92>
    2020:	0e c0       	rjmp	.+28     	; 0x203e <__addsf3x+0xc0>
    2022:	ba 0f       	add	r27, r26
    2024:	62 1f       	adc	r22, r18
    2026:	73 1f       	adc	r23, r19
    2028:	84 1f       	adc	r24, r20
    202a:	48 f4       	brcc	.+18     	; 0x203e <__addsf3x+0xc0>
    202c:	87 95       	ror	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	b7 95       	ror	r27
    2034:	f7 95       	ror	r31
    2036:	9e 3f       	cpi	r25, 0xFE	; 254
    2038:	08 f0       	brcs	.+2      	; 0x203c <__addsf3x+0xbe>
    203a:	b0 cf       	rjmp	.-160    	; 0x1f9c <__addsf3x+0x1e>
    203c:	93 95       	inc	r25
    203e:	88 0f       	add	r24, r24
    2040:	08 f0       	brcs	.+2      	; 0x2044 <__addsf3x+0xc6>
    2042:	99 27       	eor	r25, r25
    2044:	ee 0f       	add	r30, r30
    2046:	97 95       	ror	r25
    2048:	87 95       	ror	r24
    204a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000044d4 <__divsf3>:
    44d4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__divsf3x>
    44d8:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001cf4 <__divsf3x>:
    1cf4:	10 c0       	rjmp	.+32     	; 0x1d16 <__divsf3x+0x22>
    1cf6:	0e 94 c7 21 	call	0x438e	; 0x438e <__fp_pscB>
    1cfa:	58 f0       	brcs	.+22     	; 0x1d12 <__divsf3x+0x1e>
    1cfc:	0e 94 c0 21 	call	0x4380	; 0x4380 <__fp_pscA>
    1d00:	40 f0       	brcs	.+16     	; 0x1d12 <__divsf3x+0x1e>
    1d02:	29 f4       	brne	.+10     	; 0x1d0e <__divsf3x+0x1a>
    1d04:	5f 3f       	cpi	r21, 0xFF	; 255
    1d06:	29 f0       	breq	.+10     	; 0x1d12 <__divsf3x+0x1e>
    1d08:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__fp_inf>
    1d0c:	51 11       	cpse	r21, r1
    1d0e:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>
    1d12:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__fp_nan>
    1d16:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__fp_split3>
    1d1a:	68 f3       	brcs	.-38     	; 0x1cf6 <__divsf3x+0x2>

00001d1c <__divsf3_pse>:
    1d1c:	99 23       	and	r25, r25
    1d1e:	b1 f3       	breq	.-20     	; 0x1d0c <__divsf3x+0x18>
    1d20:	55 23       	and	r21, r21
    1d22:	91 f3       	breq	.-28     	; 0x1d08 <__divsf3x+0x14>
    1d24:	95 1b       	sub	r25, r21
    1d26:	55 0b       	sbc	r21, r21
    1d28:	bb 27       	eor	r27, r27
    1d2a:	aa 27       	eor	r26, r26
    1d2c:	62 17       	cp	r22, r18
    1d2e:	73 07       	cpc	r23, r19
    1d30:	84 07       	cpc	r24, r20
    1d32:	38 f0       	brcs	.+14     	; 0x1d42 <__divsf3_pse+0x26>
    1d34:	9f 5f       	subi	r25, 0xFF	; 255
    1d36:	5f 4f       	sbci	r21, 0xFF	; 255
    1d38:	22 0f       	add	r18, r18
    1d3a:	33 1f       	adc	r19, r19
    1d3c:	44 1f       	adc	r20, r20
    1d3e:	aa 1f       	adc	r26, r26
    1d40:	a9 f3       	breq	.-22     	; 0x1d2c <__divsf3_pse+0x10>
    1d42:	35 d0       	rcall	.+106    	; 0x1dae <__divsf3_pse+0x92>
    1d44:	0e 2e       	mov	r0, r30
    1d46:	3a f0       	brmi	.+14     	; 0x1d56 <__divsf3_pse+0x3a>
    1d48:	e0 e8       	ldi	r30, 0x80	; 128
    1d4a:	32 d0       	rcall	.+100    	; 0x1db0 <__divsf3_pse+0x94>
    1d4c:	91 50       	subi	r25, 0x01	; 1
    1d4e:	50 40       	sbci	r21, 0x00	; 0
    1d50:	e6 95       	lsr	r30
    1d52:	00 1c       	adc	r0, r0
    1d54:	ca f7       	brpl	.-14     	; 0x1d48 <__divsf3_pse+0x2c>
    1d56:	2b d0       	rcall	.+86     	; 0x1dae <__divsf3_pse+0x92>
    1d58:	fe 2f       	mov	r31, r30
    1d5a:	29 d0       	rcall	.+82     	; 0x1dae <__divsf3_pse+0x92>
    1d5c:	66 0f       	add	r22, r22
    1d5e:	77 1f       	adc	r23, r23
    1d60:	88 1f       	adc	r24, r24
    1d62:	bb 1f       	adc	r27, r27
    1d64:	26 17       	cp	r18, r22
    1d66:	37 07       	cpc	r19, r23
    1d68:	48 07       	cpc	r20, r24
    1d6a:	ab 07       	cpc	r26, r27
    1d6c:	b0 e8       	ldi	r27, 0x80	; 128
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <__divsf3_pse+0x56>
    1d70:	bb 0b       	sbc	r27, r27
    1d72:	80 2d       	mov	r24, r0
    1d74:	bf 01       	movw	r22, r30
    1d76:	ff 27       	eor	r31, r31
    1d78:	93 58       	subi	r25, 0x83	; 131
    1d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7c:	3a f0       	brmi	.+14     	; 0x1d8c <__divsf3_pse+0x70>
    1d7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d80:	51 05       	cpc	r21, r1
    1d82:	78 f0       	brcs	.+30     	; 0x1da2 <__divsf3_pse+0x86>
    1d84:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__fp_inf>
    1d88:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>
    1d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8e:	e4 f3       	brlt	.-8      	; 0x1d88 <__divsf3_pse+0x6c>
    1d90:	98 3e       	cpi	r25, 0xE8	; 232
    1d92:	d4 f3       	brlt	.-12     	; 0x1d88 <__divsf3_pse+0x6c>
    1d94:	86 95       	lsr	r24
    1d96:	77 95       	ror	r23
    1d98:	67 95       	ror	r22
    1d9a:	b7 95       	ror	r27
    1d9c:	f7 95       	ror	r31
    1d9e:	9f 5f       	subi	r25, 0xFF	; 255
    1da0:	c9 f7       	brne	.-14     	; 0x1d94 <__divsf3_pse+0x78>
    1da2:	88 0f       	add	r24, r24
    1da4:	91 1d       	adc	r25, r1
    1da6:	96 95       	lsr	r25
    1da8:	87 95       	ror	r24
    1daa:	97 f9       	bld	r25, 7
    1dac:	08 95       	ret
    1dae:	e1 e0       	ldi	r30, 0x01	; 1
    1db0:	66 0f       	add	r22, r22
    1db2:	77 1f       	adc	r23, r23
    1db4:	88 1f       	adc	r24, r24
    1db6:	bb 1f       	adc	r27, r27
    1db8:	62 17       	cp	r22, r18
    1dba:	73 07       	cpc	r23, r19
    1dbc:	84 07       	cpc	r24, r20
    1dbe:	ba 07       	cpc	r27, r26
    1dc0:	20 f0       	brcs	.+8      	; 0x1dca <__divsf3_pse+0xae>
    1dc2:	62 1b       	sub	r22, r18
    1dc4:	73 0b       	sbc	r23, r19
    1dc6:	84 0b       	sbc	r24, r20
    1dc8:	ba 0b       	sbc	r27, r26
    1dca:	ee 1f       	adc	r30, r30
    1dcc:	88 f7       	brcc	.-30     	; 0x1db0 <__divsf3_pse+0x94>
    1dce:	e0 95       	com	r30
    1dd0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d9c <__fixunssfsi>:
    2d9c:	0e 94 82 1a 	call	0x3504	; 0x3504 <__fp_splitA>
    2da0:	88 f0       	brcs	.+34     	; 0x2dc4 <__fixunssfsi+0x28>
    2da2:	9f 57       	subi	r25, 0x7F	; 127
    2da4:	98 f0       	brcs	.+38     	; 0x2dcc <__fixunssfsi+0x30>
    2da6:	b9 2f       	mov	r27, r25
    2da8:	99 27       	eor	r25, r25
    2daa:	b7 51       	subi	r27, 0x17	; 23
    2dac:	b0 f0       	brcs	.+44     	; 0x2dda <__fixunssfsi+0x3e>
    2dae:	e1 f0       	breq	.+56     	; 0x2de8 <__fixunssfsi+0x4c>
    2db0:	66 0f       	add	r22, r22
    2db2:	77 1f       	adc	r23, r23
    2db4:	88 1f       	adc	r24, r24
    2db6:	99 1f       	adc	r25, r25
    2db8:	1a f0       	brmi	.+6      	; 0x2dc0 <__fixunssfsi+0x24>
    2dba:	ba 95       	dec	r27
    2dbc:	c9 f7       	brne	.-14     	; 0x2db0 <__fixunssfsi+0x14>
    2dbe:	14 c0       	rjmp	.+40     	; 0x2de8 <__fixunssfsi+0x4c>
    2dc0:	b1 30       	cpi	r27, 0x01	; 1
    2dc2:	91 f0       	breq	.+36     	; 0x2de8 <__fixunssfsi+0x4c>
    2dc4:	0e 94 ce 21 	call	0x439c	; 0x439c <__fp_zero>
    2dc8:	b1 e0       	ldi	r27, 0x01	; 1
    2dca:	08 95       	ret
    2dcc:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__fp_zero>
    2dd0:	67 2f       	mov	r22, r23
    2dd2:	78 2f       	mov	r23, r24
    2dd4:	88 27       	eor	r24, r24
    2dd6:	b8 5f       	subi	r27, 0xF8	; 248
    2dd8:	39 f0       	breq	.+14     	; 0x2de8 <__fixunssfsi+0x4c>
    2dda:	b9 3f       	cpi	r27, 0xF9	; 249
    2ddc:	cc f3       	brlt	.-14     	; 0x2dd0 <__fixunssfsi+0x34>
    2dde:	86 95       	lsr	r24
    2de0:	77 95       	ror	r23
    2de2:	67 95       	ror	r22
    2de4:	b3 95       	inc	r27
    2de6:	d9 f7       	brne	.-10     	; 0x2dde <__fixunssfsi+0x42>
    2de8:	3e f4       	brtc	.+14     	; 0x2df8 <__fixunssfsi+0x5c>
    2dea:	90 95       	com	r25
    2dec:	80 95       	com	r24
    2dee:	70 95       	com	r23
    2df0:	61 95       	neg	r22
    2df2:	7f 4f       	sbci	r23, 0xFF	; 255
    2df4:	8f 4f       	sbci	r24, 0xFF	; 255
    2df6:	9f 4f       	sbci	r25, 0xFF	; 255
    2df8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000028ee <__floatunsisf>:
    28ee:	e8 94       	clt
    28f0:	09 c0       	rjmp	.+18     	; 0x2904 <__floatsisf+0x12>

000028f2 <__floatsisf>:
    28f2:	97 fb       	bst	r25, 7
    28f4:	3e f4       	brtc	.+14     	; 0x2904 <__floatsisf+0x12>
    28f6:	90 95       	com	r25
    28f8:	80 95       	com	r24
    28fa:	70 95       	com	r23
    28fc:	61 95       	neg	r22
    28fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2900:	8f 4f       	sbci	r24, 0xFF	; 255
    2902:	9f 4f       	sbci	r25, 0xFF	; 255
    2904:	99 23       	and	r25, r25
    2906:	a9 f0       	breq	.+42     	; 0x2932 <__floatsisf+0x40>
    2908:	f9 2f       	mov	r31, r25
    290a:	96 e9       	ldi	r25, 0x96	; 150
    290c:	bb 27       	eor	r27, r27
    290e:	93 95       	inc	r25
    2910:	f6 95       	lsr	r31
    2912:	87 95       	ror	r24
    2914:	77 95       	ror	r23
    2916:	67 95       	ror	r22
    2918:	b7 95       	ror	r27
    291a:	f1 11       	cpse	r31, r1
    291c:	f8 cf       	rjmp	.-16     	; 0x290e <__floatsisf+0x1c>
    291e:	fa f4       	brpl	.+62     	; 0x295e <__floatsisf+0x6c>
    2920:	bb 0f       	add	r27, r27
    2922:	11 f4       	brne	.+4      	; 0x2928 <__floatsisf+0x36>
    2924:	60 ff       	sbrs	r22, 0
    2926:	1b c0       	rjmp	.+54     	; 0x295e <__floatsisf+0x6c>
    2928:	6f 5f       	subi	r22, 0xFF	; 255
    292a:	7f 4f       	sbci	r23, 0xFF	; 255
    292c:	8f 4f       	sbci	r24, 0xFF	; 255
    292e:	9f 4f       	sbci	r25, 0xFF	; 255
    2930:	16 c0       	rjmp	.+44     	; 0x295e <__floatsisf+0x6c>
    2932:	88 23       	and	r24, r24
    2934:	11 f0       	breq	.+4      	; 0x293a <__floatsisf+0x48>
    2936:	96 e9       	ldi	r25, 0x96	; 150
    2938:	11 c0       	rjmp	.+34     	; 0x295c <__floatsisf+0x6a>
    293a:	77 23       	and	r23, r23
    293c:	21 f0       	breq	.+8      	; 0x2946 <__floatsisf+0x54>
    293e:	9e e8       	ldi	r25, 0x8E	; 142
    2940:	87 2f       	mov	r24, r23
    2942:	76 2f       	mov	r23, r22
    2944:	05 c0       	rjmp	.+10     	; 0x2950 <__floatsisf+0x5e>
    2946:	66 23       	and	r22, r22
    2948:	71 f0       	breq	.+28     	; 0x2966 <__floatsisf+0x74>
    294a:	96 e8       	ldi	r25, 0x86	; 134
    294c:	86 2f       	mov	r24, r22
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	2a f0       	brmi	.+10     	; 0x295e <__floatsisf+0x6c>
    2954:	9a 95       	dec	r25
    2956:	66 0f       	add	r22, r22
    2958:	77 1f       	adc	r23, r23
    295a:	88 1f       	adc	r24, r24
    295c:	da f7       	brpl	.-10     	; 0x2954 <__floatsisf+0x62>
    295e:	88 0f       	add	r24, r24
    2960:	96 95       	lsr	r25
    2962:	87 95       	ror	r24
    2964:	97 f9       	bld	r25, 7
    2966:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004426 <__fp_inf>:
    4426:	97 f9       	bld	r25, 7
    4428:	9f 67       	ori	r25, 0x7F	; 127
    442a:	80 e8       	ldi	r24, 0x80	; 128
    442c:	70 e0       	ldi	r23, 0x00	; 0
    442e:	60 e0       	ldi	r22, 0x00	; 0
    4430:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004514 <__fp_nan>:
    4514:	9f ef       	ldi	r25, 0xFF	; 255
    4516:	80 ec       	ldi	r24, 0xC0	; 192
    4518:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004380 <__fp_pscA>:
    4380:	00 24       	eor	r0, r0
    4382:	0a 94       	dec	r0
    4384:	16 16       	cp	r1, r22
    4386:	17 06       	cpc	r1, r23
    4388:	18 06       	cpc	r1, r24
    438a:	09 06       	cpc	r0, r25
    438c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000438e <__fp_pscB>:
    438e:	00 24       	eor	r0, r0
    4390:	0a 94       	dec	r0
    4392:	12 16       	cp	r1, r18
    4394:	13 06       	cpc	r1, r19
    4396:	14 06       	cpc	r1, r20
    4398:	05 06       	cpc	r0, r21
    439a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003eac <__fp_round>:
    3eac:	09 2e       	mov	r0, r25
    3eae:	03 94       	inc	r0
    3eb0:	00 0c       	add	r0, r0
    3eb2:	11 f4       	brne	.+4      	; 0x3eb8 <__fp_round+0xc>
    3eb4:	88 23       	and	r24, r24
    3eb6:	52 f0       	brmi	.+20     	; 0x3ecc <__fp_round+0x20>
    3eb8:	bb 0f       	add	r27, r27
    3eba:	40 f4       	brcc	.+16     	; 0x3ecc <__fp_round+0x20>
    3ebc:	bf 2b       	or	r27, r31
    3ebe:	11 f4       	brne	.+4      	; 0x3ec4 <__fp_round+0x18>
    3ec0:	60 ff       	sbrs	r22, 0
    3ec2:	04 c0       	rjmp	.+8      	; 0x3ecc <__fp_round+0x20>
    3ec4:	6f 5f       	subi	r22, 0xFF	; 255
    3ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec8:	8f 4f       	sbci	r24, 0xFF	; 255
    3eca:	9f 4f       	sbci	r25, 0xFF	; 255
    3ecc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000034f4 <__fp_split3>:
    34f4:	57 fd       	sbrc	r21, 7
    34f6:	90 58       	subi	r25, 0x80	; 128
    34f8:	44 0f       	add	r20, r20
    34fa:	55 1f       	adc	r21, r21
    34fc:	59 f0       	breq	.+22     	; 0x3514 <__fp_splitA+0x10>
    34fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3500:	71 f0       	breq	.+28     	; 0x351e <__fp_splitA+0x1a>
    3502:	47 95       	ror	r20

00003504 <__fp_splitA>:
    3504:	88 0f       	add	r24, r24
    3506:	97 fb       	bst	r25, 7
    3508:	99 1f       	adc	r25, r25
    350a:	61 f0       	breq	.+24     	; 0x3524 <__fp_splitA+0x20>
    350c:	9f 3f       	cpi	r25, 0xFF	; 255
    350e:	79 f0       	breq	.+30     	; 0x352e <__fp_splitA+0x2a>
    3510:	87 95       	ror	r24
    3512:	08 95       	ret
    3514:	12 16       	cp	r1, r18
    3516:	13 06       	cpc	r1, r19
    3518:	14 06       	cpc	r1, r20
    351a:	55 1f       	adc	r21, r21
    351c:	f2 cf       	rjmp	.-28     	; 0x3502 <__fp_split3+0xe>
    351e:	46 95       	lsr	r20
    3520:	f1 df       	rcall	.-30     	; 0x3504 <__fp_splitA>
    3522:	08 c0       	rjmp	.+16     	; 0x3534 <__fp_splitA+0x30>
    3524:	16 16       	cp	r1, r22
    3526:	17 06       	cpc	r1, r23
    3528:	18 06       	cpc	r1, r24
    352a:	99 1f       	adc	r25, r25
    352c:	f1 cf       	rjmp	.-30     	; 0x3510 <__fp_splitA+0xc>
    352e:	86 95       	lsr	r24
    3530:	71 05       	cpc	r23, r1
    3532:	61 05       	cpc	r22, r1
    3534:	08 94       	sec
    3536:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000439c <__fp_zero>:
    439c:	e8 94       	clt

0000439e <__fp_szero>:
    439e:	bb 27       	eor	r27, r27
    43a0:	66 27       	eor	r22, r22
    43a2:	77 27       	eor	r23, r23
    43a4:	cb 01       	movw	r24, r22
    43a6:	97 f9       	bld	r25, 7
    43a8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000044dc <__mulsf3>:
    44dc:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__mulsf3x>
    44e0:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001eaa <__mulsf3x>:
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <__mulsf3x+0x20>
    1eac:	0e 94 c0 21 	call	0x4380	; 0x4380 <__fp_pscA>
    1eb0:	38 f0       	brcs	.+14     	; 0x1ec0 <__mulsf3x+0x16>
    1eb2:	0e 94 c7 21 	call	0x438e	; 0x438e <__fp_pscB>
    1eb6:	20 f0       	brcs	.+8      	; 0x1ec0 <__mulsf3x+0x16>
    1eb8:	95 23       	and	r25, r21
    1eba:	11 f0       	breq	.+4      	; 0x1ec0 <__mulsf3x+0x16>
    1ebc:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__fp_inf>
    1ec0:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__fp_nan>
    1ec4:	11 24       	eor	r1, r1
    1ec6:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>
    1eca:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__fp_split3>
    1ece:	70 f3       	brcs	.-36     	; 0x1eac <__mulsf3x+0x2>

00001ed0 <__mulsf3_pse>:
    1ed0:	95 9f       	mul	r25, r21
    1ed2:	c1 f3       	breq	.-16     	; 0x1ec4 <__mulsf3x+0x1a>
    1ed4:	95 0f       	add	r25, r21
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	55 1f       	adc	r21, r21
    1eda:	62 9f       	mul	r22, r18
    1edc:	f0 01       	movw	r30, r0
    1ede:	72 9f       	mul	r23, r18
    1ee0:	bb 27       	eor	r27, r27
    1ee2:	f0 0d       	add	r31, r0
    1ee4:	b1 1d       	adc	r27, r1
    1ee6:	63 9f       	mul	r22, r19
    1ee8:	aa 27       	eor	r26, r26
    1eea:	f0 0d       	add	r31, r0
    1eec:	b1 1d       	adc	r27, r1
    1eee:	aa 1f       	adc	r26, r26
    1ef0:	64 9f       	mul	r22, r20
    1ef2:	66 27       	eor	r22, r22
    1ef4:	b0 0d       	add	r27, r0
    1ef6:	a1 1d       	adc	r26, r1
    1ef8:	66 1f       	adc	r22, r22
    1efa:	82 9f       	mul	r24, r18
    1efc:	22 27       	eor	r18, r18
    1efe:	b0 0d       	add	r27, r0
    1f00:	a1 1d       	adc	r26, r1
    1f02:	62 1f       	adc	r22, r18
    1f04:	73 9f       	mul	r23, r19
    1f06:	b0 0d       	add	r27, r0
    1f08:	a1 1d       	adc	r26, r1
    1f0a:	62 1f       	adc	r22, r18
    1f0c:	83 9f       	mul	r24, r19
    1f0e:	a0 0d       	add	r26, r0
    1f10:	61 1d       	adc	r22, r1
    1f12:	22 1f       	adc	r18, r18
    1f14:	74 9f       	mul	r23, r20
    1f16:	33 27       	eor	r19, r19
    1f18:	a0 0d       	add	r26, r0
    1f1a:	61 1d       	adc	r22, r1
    1f1c:	23 1f       	adc	r18, r19
    1f1e:	84 9f       	mul	r24, r20
    1f20:	60 0d       	add	r22, r0
    1f22:	21 1d       	adc	r18, r1
    1f24:	82 2f       	mov	r24, r18
    1f26:	76 2f       	mov	r23, r22
    1f28:	6a 2f       	mov	r22, r26
    1f2a:	11 24       	eor	r1, r1
    1f2c:	9f 57       	subi	r25, 0x7F	; 127
    1f2e:	50 40       	sbci	r21, 0x00	; 0
    1f30:	9a f0       	brmi	.+38     	; 0x1f58 <__mulsf3_pse+0x88>
    1f32:	f1 f0       	breq	.+60     	; 0x1f70 <__mulsf3_pse+0xa0>
    1f34:	88 23       	and	r24, r24
    1f36:	4a f0       	brmi	.+18     	; 0x1f4a <__mulsf3_pse+0x7a>
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	bb 1f       	adc	r27, r27
    1f3e:	66 1f       	adc	r22, r22
    1f40:	77 1f       	adc	r23, r23
    1f42:	88 1f       	adc	r24, r24
    1f44:	91 50       	subi	r25, 0x01	; 1
    1f46:	50 40       	sbci	r21, 0x00	; 0
    1f48:	a9 f7       	brne	.-22     	; 0x1f34 <__mulsf3_pse+0x64>
    1f4a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f4c:	51 05       	cpc	r21, r1
    1f4e:	80 f0       	brcs	.+32     	; 0x1f70 <__mulsf3_pse+0xa0>
    1f50:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__fp_inf>
    1f54:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>
    1f58:	5f 3f       	cpi	r21, 0xFF	; 255
    1f5a:	e4 f3       	brlt	.-8      	; 0x1f54 <__mulsf3_pse+0x84>
    1f5c:	98 3e       	cpi	r25, 0xE8	; 232
    1f5e:	d4 f3       	brlt	.-12     	; 0x1f54 <__mulsf3_pse+0x84>
    1f60:	86 95       	lsr	r24
    1f62:	77 95       	ror	r23
    1f64:	67 95       	ror	r22
    1f66:	b7 95       	ror	r27
    1f68:	f7 95       	ror	r31
    1f6a:	e7 95       	ror	r30
    1f6c:	9f 5f       	subi	r25, 0xFF	; 255
    1f6e:	c1 f7       	brne	.-16     	; 0x1f60 <__mulsf3_pse+0x90>
    1f70:	fe 2b       	or	r31, r30
    1f72:	88 0f       	add	r24, r24
    1f74:	91 1d       	adc	r25, r1
    1f76:	96 95       	lsr	r25
    1f78:	87 95       	ror	r24
    1f7a:	97 f9       	bld	r25, 7
    1f7c:	08 95       	ret

Disassembly of section .text.avrlibc:

000003e8 <vfprintf>:
 3e8:	a4 e1       	ldi	r26, 0x14	; 20
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	ea ef       	ldi	r30, 0xFA	; 250
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__prologue_saves__>
 3f4:	6c 01       	movw	r12, r24
 3f6:	1a 01       	movw	r2, r20
 3f8:	46 2e       	mov	r4, r22
 3fa:	59 01       	movw	r10, r18
 3fc:	fc 01       	movw	r30, r24
 3fe:	10 86       	std	Z+8, r1	; 0x08
 400:	17 82       	std	Z+7, r1	; 0x07
 402:	84 81       	ldd	r24, Z+4	; 0x04
 404:	81 ff       	sbrs	r24, 1
 406:	62 c3       	rjmp	.+1732   	; 0xacc <__EEPROM_REGION_LENGTH__+0x2cc>
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	9d 87       	std	Y+13, r25	; 0x0d
 40e:	8c 87       	std	Y+12, r24	; 0x0c
 410:	a0 e8       	ldi	r26, 0x80	; 128
 412:	8a 8b       	std	Y+18, r24	; 0x12
 414:	9b 8b       	std	Y+19, r25	; 0x13
 416:	ac 8b       	std	Y+20, r26	; 0x14
 418:	f1 01       	movw	r30, r2
 41a:	84 91       	lpm	r24, Z
 41c:	47 fc       	sbrc	r4, 7
 41e:	80 81       	ld	r24, Z
 420:	88 23       	and	r24, r24
 422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	4f c3       	rjmp	.+1694   	; 0xac4 <__EEPROM_REGION_LENGTH__+0x2c4>
 426:	44 2d       	mov	r20, r4
 428:	91 01       	movw	r18, r2
 42a:	2f 5f       	subi	r18, 0xFF	; 255
 42c:	3f 4f       	sbci	r19, 0xFF	; 255
 42e:	4f 4f       	sbci	r20, 0xFF	; 255
 430:	85 32       	cpi	r24, 0x25	; 37
 432:	19 f0       	breq	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 434:	19 01       	movw	r2, r18
 436:	44 2e       	mov	r4, r20
 438:	0a c0       	rjmp	.+20     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 43a:	f9 01       	movw	r30, r18
 43c:	84 91       	lpm	r24, Z
 43e:	47 fd       	sbrc	r20, 7
 440:	80 81       	ld	r24, Z
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	29 0e       	add	r2, r25
 446:	31 1c       	adc	r3, r1
 448:	41 1c       	adc	r4, r1
 44a:	85 32       	cpi	r24, 0x25	; 37
 44c:	49 f4       	brne	.+18     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 44e:	b6 01       	movw	r22, r12
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 456:	bf 86       	std	Y+15, r11	; 0x0f
 458:	ae 86       	std	Y+14, r10	; 0x0e
 45a:	ae 84       	ldd	r10, Y+14	; 0x0e
 45c:	bf 84       	ldd	r11, Y+15	; 0x0f
 45e:	dc cf       	rjmp	.-72     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 460:	10 e0       	ldi	r17, 0x00	; 0
 462:	f1 2c       	mov	r15, r1
 464:	00 e0       	ldi	r16, 0x00	; 0
 466:	00 32       	cpi	r16, 0x20	; 32
 468:	a0 f4       	brcc	.+40     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 46a:	8b 32       	cpi	r24, 0x2B	; 43
 46c:	69 f0       	breq	.+26     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 46e:	30 f4       	brcc	.+12     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 470:	80 32       	cpi	r24, 0x20	; 32
 472:	59 f0       	breq	.+22     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 474:	83 32       	cpi	r24, 0x23	; 35
 476:	69 f4       	brne	.+26     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 478:	00 61       	ori	r16, 0x10	; 16
 47a:	2c c0       	rjmp	.+88     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 47c:	8d 32       	cpi	r24, 0x2D	; 45
 47e:	39 f0       	breq	.+14     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 480:	80 33       	cpi	r24, 0x30	; 48
 482:	39 f4       	brne	.+14     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 484:	01 60       	ori	r16, 0x01	; 1
 486:	26 c0       	rjmp	.+76     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 488:	02 60       	ori	r16, 0x02	; 2
 48a:	04 60       	ori	r16, 0x04	; 4
 48c:	23 c0       	rjmp	.+70     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 48e:	08 60       	ori	r16, 0x08	; 8
 490:	21 c0       	rjmp	.+66     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 492:	07 fd       	sbrc	r16, 7
 494:	29 c0       	rjmp	.+82     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 496:	90 ed       	ldi	r25, 0xD0	; 208
 498:	98 0f       	add	r25, r24
 49a:	9a 30       	cpi	r25, 0x0A	; 10
 49c:	78 f4       	brcc	.+30     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 49e:	06 ff       	sbrs	r16, 6
 4a0:	06 c0       	rjmp	.+12     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a2:	aa e0       	ldi	r26, 0x0A	; 10
 4a4:	1a 9f       	mul	r17, r26
 4a6:	90 0d       	add	r25, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	19 2f       	mov	r17, r25
 4ac:	13 c0       	rjmp	.+38     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4ae:	ea e0       	ldi	r30, 0x0A	; 10
 4b0:	fe 9e       	mul	r15, r30
 4b2:	90 0d       	add	r25, r0
 4b4:	11 24       	eor	r1, r1
 4b6:	f9 2e       	mov	r15, r25
 4b8:	00 62       	ori	r16, 0x20	; 32
 4ba:	0c c0       	rjmp	.+24     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4bc:	8e 32       	cpi	r24, 0x2E	; 46
 4be:	21 f4       	brne	.+8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c0:	06 fd       	sbrc	r16, 6
 4c2:	00 c3       	rjmp	.+1536   	; 0xac4 <__EEPROM_REGION_LENGTH__+0x2c4>
 4c4:	00 64       	ori	r16, 0x40	; 64
 4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4c8:	8c 36       	cpi	r24, 0x6C	; 108
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4cc:	00 68       	ori	r16, 0x80	; 128
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4d0:	88 36       	cpi	r24, 0x68	; 104
 4d2:	51 f4       	brne	.+20     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4d4:	f1 01       	movw	r30, r2
 4d6:	84 91       	lpm	r24, Z
 4d8:	47 fc       	sbrc	r4, 7
 4da:	80 81       	ld	r24, Z
 4dc:	ff ef       	ldi	r31, 0xFF	; 255
 4de:	2f 1a       	sub	r2, r31
 4e0:	3f 0a       	sbc	r3, r31
 4e2:	4f 0a       	sbc	r4, r31
 4e4:	81 11       	cpse	r24, r1
 4e6:	bf cf       	rjmp	.-130    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 4e8:	9b eb       	ldi	r25, 0xBB	; 187
 4ea:	98 0f       	add	r25, r24
 4ec:	93 30       	cpi	r25, 0x03	; 3
 4ee:	18 f4       	brcc	.+6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f0:	00 61       	ori	r16, 0x10	; 16
 4f2:	80 5e       	subi	r24, 0xE0	; 224
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4f6:	9b e9       	ldi	r25, 0x9B	; 155
 4f8:	98 0f       	add	r25, r24
 4fa:	93 30       	cpi	r25, 0x03	; 3
 4fc:	08 f0       	brcs	.+2      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4fe:	66 c1       	rjmp	.+716    	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
 500:	0f 7e       	andi	r16, 0xEF	; 239
 502:	06 ff       	sbrs	r16, 6
 504:	16 e0       	ldi	r17, 0x06	; 6
 506:	0f 73       	andi	r16, 0x3F	; 63
 508:	70 2e       	mov	r7, r16
 50a:	85 36       	cpi	r24, 0x65	; 101
 50c:	21 f4       	brne	.+8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 50e:	20 2f       	mov	r18, r16
 510:	20 64       	ori	r18, 0x40	; 64
 512:	72 2e       	mov	r7, r18
 514:	08 c0       	rjmp	.+16     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 516:	86 36       	cpi	r24, 0x66	; 102
 518:	21 f4       	brne	.+8      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 51a:	80 2f       	mov	r24, r16
 51c:	80 68       	ori	r24, 0x80	; 128
 51e:	78 2e       	mov	r7, r24
 520:	02 c0       	rjmp	.+4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 522:	11 11       	cpse	r17, r1
 524:	11 50       	subi	r17, 0x01	; 1
 526:	77 fe       	sbrs	r7, 7
 528:	07 c0       	rjmp	.+14     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 52a:	1c 33       	cpi	r17, 0x3C	; 60
 52c:	50 f4       	brcc	.+20     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 52e:	ee 24       	eor	r14, r14
 530:	e3 94       	inc	r14
 532:	e1 0e       	add	r14, r17
 534:	27 e0       	ldi	r18, 0x07	; 7
 536:	0b c0       	rjmp	.+22     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 538:	18 30       	cpi	r17, 0x08	; 8
 53a:	38 f0       	brcs	.+14     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 53c:	27 e0       	ldi	r18, 0x07	; 7
 53e:	17 e0       	ldi	r17, 0x07	; 7
 540:	05 c0       	rjmp	.+10     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 542:	27 e0       	ldi	r18, 0x07	; 7
 544:	6c e3       	ldi	r22, 0x3C	; 60
 546:	e6 2e       	mov	r14, r22
 548:	02 c0       	rjmp	.+4      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 54a:	21 2f       	mov	r18, r17
 54c:	e1 2c       	mov	r14, r1
 54e:	f5 01       	movw	r30, r10
 550:	34 96       	adiw	r30, 0x04	; 4
 552:	ff 87       	std	Y+15, r31	; 0x0f
 554:	ee 87       	std	Y+14, r30	; 0x0e
 556:	f5 01       	movw	r30, r10
 558:	60 81       	ld	r22, Z
 55a:	71 81       	ldd	r23, Z+1	; 0x01
 55c:	82 81       	ldd	r24, Z+2	; 0x02
 55e:	93 81       	ldd	r25, Z+3	; 0x03
 560:	0e 2d       	mov	r16, r14
 562:	ae 01       	movw	r20, r28
 564:	4f 5f       	subi	r20, 0xFF	; 255
 566:	5f 4f       	sbci	r21, 0xFF	; 255
 568:	0e 94 44 09 	call	0x1288	; 0x1288 <__ftoa_engine>
 56c:	5c 01       	movw	r10, r24
 56e:	59 80       	ldd	r5, Y+1	; 0x01
 570:	50 fe       	sbrs	r5, 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 574:	53 fe       	sbrs	r5, 3
 576:	06 c0       	rjmp	.+12     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 578:	71 fc       	sbrc	r7, 1
 57a:	06 c0       	rjmp	.+12     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 57c:	72 fe       	sbrs	r7, 2
 57e:	06 c0       	rjmp	.+12     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 580:	00 e2       	ldi	r16, 0x20	; 32
 582:	05 c0       	rjmp	.+10     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 584:	0d e2       	ldi	r16, 0x2D	; 45
 586:	03 c0       	rjmp	.+6      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 588:	0b e2       	ldi	r16, 0x2B	; 43
 58a:	01 c0       	rjmp	.+2      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 58c:	00 e0       	ldi	r16, 0x00	; 0
 58e:	85 2d       	mov	r24, r5
 590:	8c 70       	andi	r24, 0x0C	; 12
 592:	19 f0       	breq	.+6      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 594:	01 11       	cpse	r16, r1
 596:	73 c2       	rjmp	.+1254   	; 0xa7e <__EEPROM_REGION_LENGTH__+0x27e>
 598:	be c2       	rjmp	.+1404   	; 0xb16 <__EEPROM_REGION_LENGTH__+0x316>
 59a:	77 fe       	sbrs	r7, 7
 59c:	0f c0       	rjmp	.+30     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 59e:	ea 0c       	add	r14, r10
 5a0:	54 fe       	sbrs	r5, 4
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5a4:	8a 81       	ldd	r24, Y+2	; 0x02
 5a6:	81 33       	cpi	r24, 0x31	; 49
 5a8:	09 f4       	brne	.+2      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5aa:	ea 94       	dec	r14
 5ac:	1e 14       	cp	r1, r14
 5ae:	74 f5       	brge	.+92     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 5b0:	28 e0       	ldi	r18, 0x08	; 8
 5b2:	2e 15       	cp	r18, r14
 5b4:	78 f5       	brcc	.+94     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 5b6:	38 e0       	ldi	r19, 0x08	; 8
 5b8:	e3 2e       	mov	r14, r19
 5ba:	2c c0       	rjmp	.+88     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 5bc:	76 fc       	sbrc	r7, 6
 5be:	2a c0       	rjmp	.+84     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 5c0:	81 2f       	mov	r24, r17
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	8a 15       	cp	r24, r10
 5c6:	9b 05       	cpc	r25, r11
 5c8:	9c f0       	brlt	.+38     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5ca:	8c ef       	ldi	r24, 0xFC	; 252
 5cc:	a8 16       	cp	r10, r24
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	b8 06       	cpc	r11, r24
 5d2:	74 f0       	brlt	.+28     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5d4:	97 2d       	mov	r25, r7
 5d6:	90 68       	ori	r25, 0x80	; 128
 5d8:	79 2e       	mov	r7, r25
 5da:	0a c0       	rjmp	.+20     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5dc:	e2 e0       	ldi	r30, 0x02	; 2
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	ec 0f       	add	r30, r28
 5e2:	fd 1f       	adc	r31, r29
 5e4:	e1 0f       	add	r30, r17
 5e6:	f1 1d       	adc	r31, r1
 5e8:	80 81       	ld	r24, Z
 5ea:	80 33       	cpi	r24, 0x30	; 48
 5ec:	19 f4       	brne	.+6      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5ee:	11 50       	subi	r17, 0x01	; 1
 5f0:	11 11       	cpse	r17, r1
 5f2:	f4 cf       	rjmp	.-24     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5f4:	77 fe       	sbrs	r7, 7
 5f6:	0e c0       	rjmp	.+28     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 5f8:	ee 24       	eor	r14, r14
 5fa:	e3 94       	inc	r14
 5fc:	e1 0e       	add	r14, r17
 5fe:	81 2f       	mov	r24, r17
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	a8 16       	cp	r10, r24
 604:	b9 06       	cpc	r11, r25
 606:	2c f4       	brge	.+10     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 608:	1a 19       	sub	r17, r10
 60a:	04 c0       	rjmp	.+8      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 60c:	ee 24       	eor	r14, r14
 60e:	e3 94       	inc	r14
 610:	01 c0       	rjmp	.+2      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 612:	10 e0       	ldi	r17, 0x00	; 0
 614:	77 fe       	sbrs	r7, 7
 616:	06 c0       	rjmp	.+12     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 618:	1a 14       	cp	r1, r10
 61a:	1b 04       	cpc	r1, r11
 61c:	34 f4       	brge	.+12     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 61e:	c5 01       	movw	r24, r10
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	05 c0       	rjmp	.+10     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 624:	85 e0       	ldi	r24, 0x05	; 5
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	01 11       	cpse	r16, r1
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	11 23       	and	r17, r17
 634:	31 f0       	breq	.+12     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 636:	21 2f       	mov	r18, r17
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	2f 5f       	subi	r18, 0xFF	; 255
 63c:	3f 4f       	sbci	r19, 0xFF	; 255
 63e:	82 0f       	add	r24, r18
 640:	93 1f       	adc	r25, r19
 642:	2f 2d       	mov	r18, r15
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	82 17       	cp	r24, r18
 648:	93 07       	cpc	r25, r19
 64a:	14 f4       	brge	.+4      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64c:	f8 1a       	sub	r15, r24
 64e:	01 c0       	rjmp	.+2      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 650:	f1 2c       	mov	r15, r1
 652:	87 2d       	mov	r24, r7
 654:	89 70       	andi	r24, 0x09	; 9
 656:	49 f4       	brne	.+18     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 658:	ff 20       	and	r15, r15
 65a:	39 f0       	breq	.+14     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 65c:	b6 01       	movw	r22, r12
 65e:	80 e2       	ldi	r24, 0x20	; 32
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 666:	fa 94       	dec	r15
 668:	f7 cf       	rjmp	.-18     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 66a:	00 23       	and	r16, r16
 66c:	29 f0       	breq	.+10     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 66e:	b6 01       	movw	r22, r12
 670:	80 2f       	mov	r24, r16
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 678:	73 fc       	sbrc	r7, 3
 67a:	09 c0       	rjmp	.+18     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 67c:	ff 20       	and	r15, r15
 67e:	39 f0       	breq	.+14     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 680:	b6 01       	movw	r22, r12
 682:	80 e3       	ldi	r24, 0x30	; 48
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 68a:	fa 94       	dec	r15
 68c:	f7 cf       	rjmp	.-18     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 68e:	77 fe       	sbrs	r7, 7
 690:	49 c0       	rjmp	.+146    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 692:	35 01       	movw	r6, r10
 694:	b7 fe       	sbrs	r11, 7
 696:	02 c0       	rjmp	.+4      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 698:	61 2c       	mov	r6, r1
 69a:	71 2c       	mov	r7, r1
 69c:	c5 01       	movw	r24, r10
 69e:	86 19       	sub	r24, r6
 6a0:	97 09       	sbc	r25, r7
 6a2:	88 24       	eor	r8, r8
 6a4:	83 94       	inc	r8
 6a6:	91 2c       	mov	r9, r1
 6a8:	8c 0e       	add	r8, r28
 6aa:	9d 1e       	adc	r9, r29
 6ac:	88 0e       	add	r8, r24
 6ae:	99 1e       	adc	r9, r25
 6b0:	f5 01       	movw	r30, r10
 6b2:	ee 19       	sub	r30, r14
 6b4:	f1 09       	sbc	r31, r1
 6b6:	f9 8b       	std	Y+17, r31	; 0x11
 6b8:	e8 8b       	std	Y+16, r30	; 0x10
 6ba:	01 2f       	mov	r16, r17
 6bc:	10 e0       	ldi	r17, 0x00	; 0
 6be:	11 95       	neg	r17
 6c0:	01 95       	neg	r16
 6c2:	11 09       	sbc	r17, r1
 6c4:	ff ef       	ldi	r31, 0xFF	; 255
 6c6:	6f 16       	cp	r6, r31
 6c8:	7f 06       	cpc	r7, r31
 6ca:	29 f4       	brne	.+10     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6cc:	b6 01       	movw	r22, r12
 6ce:	8e e2       	ldi	r24, 0x2E	; 46
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 6d6:	a6 14       	cp	r10, r6
 6d8:	b7 04       	cpc	r11, r7
 6da:	44 f0       	brlt	.+16     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 6dc:	88 89       	ldd	r24, Y+16	; 0x10
 6de:	99 89       	ldd	r25, Y+17	; 0x11
 6e0:	86 15       	cp	r24, r6
 6e2:	97 05       	cpc	r25, r7
 6e4:	1c f4       	brge	.+6      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 6e6:	f4 01       	movw	r30, r8
 6e8:	81 81       	ldd	r24, Z+1	; 0x01
 6ea:	01 c0       	rjmp	.+2      	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6ec:	80 e3       	ldi	r24, 0x30	; 48
 6ee:	f1 e0       	ldi	r31, 0x01	; 1
 6f0:	6f 1a       	sub	r6, r31
 6f2:	71 08       	sbc	r7, r1
 6f4:	2f ef       	ldi	r18, 0xFF	; 255
 6f6:	82 1a       	sub	r8, r18
 6f8:	92 0a       	sbc	r9, r18
 6fa:	60 16       	cp	r6, r16
 6fc:	71 06       	cpc	r7, r17
 6fe:	2c f0       	brlt	.+10     	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 700:	b6 01       	movw	r22, r12
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 708:	dd cf       	rjmp	.-70     	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 70a:	a6 14       	cp	r10, r6
 70c:	b7 04       	cpc	r11, r7
 70e:	39 f4       	brne	.+14     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 710:	9a 81       	ldd	r25, Y+2	; 0x02
 712:	96 33       	cpi	r25, 0x36	; 54
 714:	18 f4       	brcc	.+6      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 716:	95 33       	cpi	r25, 0x35	; 53
 718:	11 f4       	brne	.+4      	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 71a:	54 fe       	sbrs	r5, 4
 71c:	81 e3       	ldi	r24, 0x31	; 49
 71e:	b6 01       	movw	r22, r12
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	51 c0       	rjmp	.+162    	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
 724:	8a 81       	ldd	r24, Y+2	; 0x02
 726:	81 33       	cpi	r24, 0x31	; 49
 728:	19 f0       	breq	.+6      	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 72a:	95 2d       	mov	r25, r5
 72c:	9f 7e       	andi	r25, 0xEF	; 239
 72e:	59 2e       	mov	r5, r25
 730:	b6 01       	movw	r22, r12
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 738:	11 11       	cpse	r17, r1
 73a:	05 c0       	rjmp	.+10     	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 73c:	74 fc       	sbrc	r7, 4
 73e:	1c c0       	rjmp	.+56     	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
 740:	85 e6       	ldi	r24, 0x65	; 101
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	1b c0       	rjmp	.+54     	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
 746:	b6 01       	movw	r22, r12
 748:	8e e2       	ldi	r24, 0x2E	; 46
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 750:	02 e0       	ldi	r16, 0x02	; 2
 752:	01 0f       	add	r16, r17
 754:	82 e0       	ldi	r24, 0x02	; 2
 756:	11 e0       	ldi	r17, 0x01	; 1
 758:	18 0f       	add	r17, r24
 75a:	e1 e0       	ldi	r30, 0x01	; 1
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	ec 0f       	add	r30, r28
 760:	fd 1f       	adc	r31, r29
 762:	e8 0f       	add	r30, r24
 764:	f1 1d       	adc	r31, r1
 766:	80 81       	ld	r24, Z
 768:	b6 01       	movw	r22, r12
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 770:	81 2f       	mov	r24, r17
 772:	10 13       	cpse	r17, r16
 774:	f0 cf       	rjmp	.-32     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 776:	e2 cf       	rjmp	.-60     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
 778:	85 e4       	ldi	r24, 0x45	; 69
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	b6 01       	movw	r22, r12
 77e:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 782:	b7 fc       	sbrc	r11, 7
 784:	05 c0       	rjmp	.+10     	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 786:	a1 14       	cp	r10, r1
 788:	b1 04       	cpc	r11, r1
 78a:	39 f4       	brne	.+14     	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
 78c:	54 fe       	sbrs	r5, 4
 78e:	05 c0       	rjmp	.+10     	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
 790:	b1 94       	neg	r11
 792:	a1 94       	neg	r10
 794:	b1 08       	sbc	r11, r1
 796:	8d e2       	ldi	r24, 0x2D	; 45
 798:	01 c0       	rjmp	.+2      	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
 79a:	8b e2       	ldi	r24, 0x2B	; 43
 79c:	b6 01       	movw	r22, r12
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 7a4:	80 e3       	ldi	r24, 0x30	; 48
 7a6:	ea e0       	ldi	r30, 0x0A	; 10
 7a8:	ae 16       	cp	r10, r30
 7aa:	b1 04       	cpc	r11, r1
 7ac:	2c f0       	brlt	.+10     	; 0x7b8 <__LOCK_REGION_LENGTH__+0x3b8>
 7ae:	8f 5f       	subi	r24, 0xFF	; 255
 7b0:	aa e0       	ldi	r26, 0x0A	; 10
 7b2:	aa 1a       	sub	r10, r26
 7b4:	b1 08       	sbc	r11, r1
 7b6:	f7 cf       	rjmp	.-18     	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
 7b8:	b6 01       	movw	r22, r12
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 7c0:	b6 01       	movw	r22, r12
 7c2:	c5 01       	movw	r24, r10
 7c4:	c0 96       	adiw	r24, 0x30	; 48
 7c6:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 7ca:	72 c1       	rjmp	.+740    	; 0xab0 <__EEPROM_REGION_LENGTH__+0x2b0>
 7cc:	83 36       	cpi	r24, 0x63	; 99
 7ce:	31 f0       	breq	.+12     	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
 7d0:	83 37       	cpi	r24, 0x73	; 115
 7d2:	91 f0       	breq	.+36     	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
 7d4:	83 35       	cpi	r24, 0x53	; 83
 7d6:	09 f0       	breq	.+2      	; 0x7da <__LOCK_REGION_LENGTH__+0x3da>
 7d8:	5d c0       	rjmp	.+186    	; 0x894 <__EEPROM_REGION_LENGTH__+0x94>
 7da:	24 c0       	rjmp	.+72     	; 0x824 <__EEPROM_REGION_LENGTH__+0x24>
 7dc:	c5 01       	movw	r24, r10
 7de:	02 96       	adiw	r24, 0x02	; 2
 7e0:	9f 87       	std	Y+15, r25	; 0x0f
 7e2:	8e 87       	std	Y+14, r24	; 0x0e
 7e4:	f5 01       	movw	r30, r10
 7e6:	80 81       	ld	r24, Z
 7e8:	89 83       	std	Y+1, r24	; 0x01
 7ea:	6a 88       	ldd	r6, Y+18	; 0x12
 7ec:	7b 88       	ldd	r7, Y+19	; 0x13
 7ee:	8c 88       	ldd	r8, Y+20	; 0x14
 7f0:	aa 24       	eor	r10, r10
 7f2:	a3 94       	inc	r10
 7f4:	b1 2c       	mov	r11, r1
 7f6:	14 c0       	rjmp	.+40     	; 0x820 <__EEPROM_REGION_LENGTH__+0x20>
 7f8:	c5 01       	movw	r24, r10
 7fa:	03 96       	adiw	r24, 0x03	; 3
 7fc:	9f 87       	std	Y+15, r25	; 0x0f
 7fe:	8e 87       	std	Y+14, r24	; 0x0e
 800:	f5 01       	movw	r30, r10
 802:	60 80       	ld	r6, Z
 804:	71 80       	ldd	r7, Z+1	; 0x01
 806:	82 80       	ldd	r8, Z+2	; 0x02
 808:	06 ff       	sbrs	r16, 6
 80a:	03 c0       	rjmp	.+6      	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
 80c:	41 2f       	mov	r20, r17
 80e:	50 e0       	ldi	r21, 0x00	; 0
 810:	02 c0       	rjmp	.+4      	; 0x816 <__EEPROM_REGION_LENGTH__+0x16>
 812:	4f ef       	ldi	r20, 0xFF	; 255
 814:	5f ef       	ldi	r21, 0xFF	; 255
 816:	88 2d       	mov	r24, r8
 818:	b3 01       	movw	r22, r6
 81a:	0e 94 b7 1c 	call	0x396e	; 0x396e <strnlen>
 81e:	5c 01       	movw	r10, r24
 820:	0f 77       	andi	r16, 0x7F	; 127
 822:	15 c0       	rjmp	.+42     	; 0x84e <__EEPROM_REGION_LENGTH__+0x4e>
 824:	c5 01       	movw	r24, r10
 826:	03 96       	adiw	r24, 0x03	; 3
 828:	9f 87       	std	Y+15, r25	; 0x0f
 82a:	8e 87       	std	Y+14, r24	; 0x0e
 82c:	f5 01       	movw	r30, r10
 82e:	60 80       	ld	r6, Z
 830:	71 80       	ldd	r7, Z+1	; 0x01
 832:	82 80       	ldd	r8, Z+2	; 0x02
 834:	06 ff       	sbrs	r16, 6
 836:	03 c0       	rjmp	.+6      	; 0x83e <__EEPROM_REGION_LENGTH__+0x3e>
 838:	41 2f       	mov	r20, r17
 83a:	50 e0       	ldi	r21, 0x00	; 0
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__EEPROM_REGION_LENGTH__+0x42>
 83e:	4f ef       	ldi	r20, 0xFF	; 255
 840:	5f ef       	ldi	r21, 0xFF	; 255
 842:	88 2d       	mov	r24, r8
 844:	b3 01       	movw	r22, r6
 846:	0e 94 b7 1c 	call	0x396e	; 0x396e <strnlen>
 84a:	5c 01       	movw	r10, r24
 84c:	00 68       	ori	r16, 0x80	; 128
 84e:	03 fd       	sbrc	r16, 3
 850:	1d c0       	rjmp	.+58     	; 0x88c <__EEPROM_REGION_LENGTH__+0x8c>
 852:	8f 2d       	mov	r24, r15
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	a8 16       	cp	r10, r24
 858:	b9 06       	cpc	r11, r25
 85a:	c0 f4       	brcc	.+48     	; 0x88c <__EEPROM_REGION_LENGTH__+0x8c>
 85c:	b6 01       	movw	r22, r12
 85e:	80 e2       	ldi	r24, 0x20	; 32
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 866:	fa 94       	dec	r15
 868:	f4 cf       	rjmp	.-24     	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
 86a:	f3 01       	movw	r30, r6
 86c:	84 91       	lpm	r24, Z
 86e:	87 fc       	sbrc	r8, 7
 870:	80 81       	ld	r24, Z
 872:	ff ef       	ldi	r31, 0xFF	; 255
 874:	6f 1a       	sub	r6, r31
 876:	7f 0a       	sbc	r7, r31
 878:	8f 0a       	sbc	r8, r31
 87a:	b6 01       	movw	r22, r12
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 882:	f1 10       	cpse	r15, r1
 884:	fa 94       	dec	r15
 886:	21 e0       	ldi	r18, 0x01	; 1
 888:	a2 1a       	sub	r10, r18
 88a:	b1 08       	sbc	r11, r1
 88c:	a1 14       	cp	r10, r1
 88e:	b1 04       	cpc	r11, r1
 890:	61 f7       	brne	.-40     	; 0x86a <__EEPROM_REGION_LENGTH__+0x6a>
 892:	0e c1       	rjmp	.+540    	; 0xab0 <__EEPROM_REGION_LENGTH__+0x2b0>
 894:	84 36       	cpi	r24, 0x64	; 100
 896:	11 f0       	breq	.+4      	; 0x89c <__EEPROM_REGION_LENGTH__+0x9c>
 898:	89 36       	cpi	r24, 0x69	; 105
 89a:	79 f5       	brne	.+94     	; 0x8fa <__EEPROM_REGION_LENGTH__+0xfa>
 89c:	c5 01       	movw	r24, r10
 89e:	07 ff       	sbrs	r16, 7
 8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <__EEPROM_REGION_LENGTH__+0xb4>
 8a2:	04 96       	adiw	r24, 0x04	; 4
 8a4:	9f 87       	std	Y+15, r25	; 0x0f
 8a6:	8e 87       	std	Y+14, r24	; 0x0e
 8a8:	f5 01       	movw	r30, r10
 8aa:	60 81       	ld	r22, Z
 8ac:	71 81       	ldd	r23, Z+1	; 0x01
 8ae:	82 81       	ldd	r24, Z+2	; 0x02
 8b0:	93 81       	ldd	r25, Z+3	; 0x03
 8b2:	0a c0       	rjmp	.+20     	; 0x8c8 <__EEPROM_REGION_LENGTH__+0xc8>
 8b4:	02 96       	adiw	r24, 0x02	; 2
 8b6:	9f 87       	std	Y+15, r25	; 0x0f
 8b8:	8e 87       	std	Y+14, r24	; 0x0e
 8ba:	f5 01       	movw	r30, r10
 8bc:	60 81       	ld	r22, Z
 8be:	71 81       	ldd	r23, Z+1	; 0x01
 8c0:	07 2e       	mov	r0, r23
 8c2:	00 0c       	add	r0, r0
 8c4:	88 0b       	sbc	r24, r24
 8c6:	99 0b       	sbc	r25, r25
 8c8:	0f 76       	andi	r16, 0x6F	; 111
 8ca:	e0 2e       	mov	r14, r16
 8cc:	97 ff       	sbrs	r25, 7
 8ce:	0a c0       	rjmp	.+20     	; 0x8e4 <__EEPROM_REGION_LENGTH__+0xe4>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	f0 2f       	mov	r31, r16
 8e0:	f0 68       	ori	r31, 0x80	; 128
 8e2:	ef 2e       	mov	r14, r31
 8e4:	2a e0       	ldi	r18, 0x0A	; 10
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	ae 01       	movw	r20, r28
 8ea:	4f 5f       	subi	r20, 0xFF	; 255
 8ec:	5f 4f       	sbci	r21, 0xFF	; 255
 8ee:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__ultoa_invert>
 8f2:	a8 2e       	mov	r10, r24
 8f4:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f6:	a2 1a       	sub	r10, r18
 8f8:	4b c0       	rjmp	.+150    	; 0x990 <__EEPROM_REGION_LENGTH__+0x190>
 8fa:	85 37       	cpi	r24, 0x75	; 117
 8fc:	29 f4       	brne	.+10     	; 0x908 <__EEPROM_REGION_LENGTH__+0x108>
 8fe:	0f 7e       	andi	r16, 0xEF	; 239
 900:	e0 2e       	mov	r14, r16
 902:	2a e0       	ldi	r18, 0x0A	; 10
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	25 c0       	rjmp	.+74     	; 0x952 <__EEPROM_REGION_LENGTH__+0x152>
 908:	90 2f       	mov	r25, r16
 90a:	99 7f       	andi	r25, 0xF9	; 249
 90c:	e9 2e       	mov	r14, r25
 90e:	8f 36       	cpi	r24, 0x6F	; 111
 910:	c1 f0       	breq	.+48     	; 0x942 <__EEPROM_REGION_LENGTH__+0x142>
 912:	18 f4       	brcc	.+6      	; 0x91a <__EEPROM_REGION_LENGTH__+0x11a>
 914:	88 35       	cpi	r24, 0x58	; 88
 916:	79 f0       	breq	.+30     	; 0x936 <__EEPROM_REGION_LENGTH__+0x136>
 918:	d5 c0       	rjmp	.+426    	; 0xac4 <__EEPROM_REGION_LENGTH__+0x2c4>
 91a:	80 37       	cpi	r24, 0x70	; 112
 91c:	19 f0       	breq	.+6      	; 0x924 <__EEPROM_REGION_LENGTH__+0x124>
 91e:	88 37       	cpi	r24, 0x78	; 120
 920:	21 f0       	breq	.+8      	; 0x92a <__EEPROM_REGION_LENGTH__+0x12a>
 922:	d0 c0       	rjmp	.+416    	; 0xac4 <__EEPROM_REGION_LENGTH__+0x2c4>
 924:	a9 2f       	mov	r26, r25
 926:	a0 61       	ori	r26, 0x10	; 16
 928:	ea 2e       	mov	r14, r26
 92a:	e4 fe       	sbrs	r14, 4
 92c:	0d c0       	rjmp	.+26     	; 0x948 <__EEPROM_REGION_LENGTH__+0x148>
 92e:	ee 2d       	mov	r30, r14
 930:	e4 60       	ori	r30, 0x04	; 4
 932:	ee 2e       	mov	r14, r30
 934:	09 c0       	rjmp	.+18     	; 0x948 <__EEPROM_REGION_LENGTH__+0x148>
 936:	04 ff       	sbrs	r16, 4
 938:	0a c0       	rjmp	.+20     	; 0x94e <__EEPROM_REGION_LENGTH__+0x14e>
 93a:	f9 2f       	mov	r31, r25
 93c:	f6 60       	ori	r31, 0x06	; 6
 93e:	ef 2e       	mov	r14, r31
 940:	06 c0       	rjmp	.+12     	; 0x94e <__EEPROM_REGION_LENGTH__+0x14e>
 942:	28 e0       	ldi	r18, 0x08	; 8
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	05 c0       	rjmp	.+10     	; 0x952 <__EEPROM_REGION_LENGTH__+0x152>
 948:	20 e1       	ldi	r18, 0x10	; 16
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	02 c0       	rjmp	.+4      	; 0x952 <__EEPROM_REGION_LENGTH__+0x152>
 94e:	20 e1       	ldi	r18, 0x10	; 16
 950:	32 e0       	ldi	r19, 0x02	; 2
 952:	c5 01       	movw	r24, r10
 954:	e7 fe       	sbrs	r14, 7
 956:	09 c0       	rjmp	.+18     	; 0x96a <__EEPROM_REGION_LENGTH__+0x16a>
 958:	04 96       	adiw	r24, 0x04	; 4
 95a:	9f 87       	std	Y+15, r25	; 0x0f
 95c:	8e 87       	std	Y+14, r24	; 0x0e
 95e:	f5 01       	movw	r30, r10
 960:	60 81       	ld	r22, Z
 962:	71 81       	ldd	r23, Z+1	; 0x01
 964:	82 81       	ldd	r24, Z+2	; 0x02
 966:	93 81       	ldd	r25, Z+3	; 0x03
 968:	08 c0       	rjmp	.+16     	; 0x97a <__EEPROM_REGION_LENGTH__+0x17a>
 96a:	02 96       	adiw	r24, 0x02	; 2
 96c:	9f 87       	std	Y+15, r25	; 0x0f
 96e:	8e 87       	std	Y+14, r24	; 0x0e
 970:	f5 01       	movw	r30, r10
 972:	60 81       	ld	r22, Z
 974:	71 81       	ldd	r23, Z+1	; 0x01
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	ae 01       	movw	r20, r28
 97c:	4f 5f       	subi	r20, 0xFF	; 255
 97e:	5f 4f       	sbci	r21, 0xFF	; 255
 980:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__ultoa_invert>
 984:	a8 2e       	mov	r10, r24
 986:	fc 85       	ldd	r31, Y+12	; 0x0c
 988:	af 1a       	sub	r10, r31
 98a:	2e 2d       	mov	r18, r14
 98c:	2f 77       	andi	r18, 0x7F	; 127
 98e:	e2 2e       	mov	r14, r18
 990:	e6 fe       	sbrs	r14, 6
 992:	0b c0       	rjmp	.+22     	; 0x9aa <__EEPROM_REGION_LENGTH__+0x1aa>
 994:	0e 2d       	mov	r16, r14
 996:	0e 7f       	andi	r16, 0xFE	; 254
 998:	a1 16       	cp	r10, r17
 99a:	50 f4       	brcc	.+20     	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 99c:	e4 fe       	sbrs	r14, 4
 99e:	0a c0       	rjmp	.+20     	; 0x9b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 9a0:	e2 fc       	sbrc	r14, 2
 9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 9a4:	0e 2d       	mov	r16, r14
 9a6:	0e 7e       	andi	r16, 0xEE	; 238
 9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 9aa:	ba 2c       	mov	r11, r10
 9ac:	0e 2d       	mov	r16, r14
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 9b0:	ba 2c       	mov	r11, r10
 9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 9b4:	b1 2e       	mov	r11, r17
 9b6:	04 ff       	sbrs	r16, 4
 9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <__EEPROM_REGION_LENGTH__+0x1d4>
 9ba:	fe 01       	movw	r30, r28
 9bc:	ea 0d       	add	r30, r10
 9be:	f1 1d       	adc	r31, r1
 9c0:	80 81       	ld	r24, Z
 9c2:	80 33       	cpi	r24, 0x30	; 48
 9c4:	11 f4       	brne	.+4      	; 0x9ca <__EEPROM_REGION_LENGTH__+0x1ca>
 9c6:	09 7e       	andi	r16, 0xE9	; 233
 9c8:	09 c0       	rjmp	.+18     	; 0x9dc <__EEPROM_REGION_LENGTH__+0x1dc>
 9ca:	02 ff       	sbrs	r16, 2
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <__EEPROM_REGION_LENGTH__+0x1da>
 9ce:	b3 94       	inc	r11
 9d0:	b3 94       	inc	r11
 9d2:	04 c0       	rjmp	.+8      	; 0x9dc <__EEPROM_REGION_LENGTH__+0x1dc>
 9d4:	80 2f       	mov	r24, r16
 9d6:	86 78       	andi	r24, 0x86	; 134
 9d8:	09 f0       	breq	.+2      	; 0x9dc <__EEPROM_REGION_LENGTH__+0x1dc>
 9da:	b3 94       	inc	r11
 9dc:	03 fd       	sbrc	r16, 3
 9de:	11 c0       	rjmp	.+34     	; 0xa02 <__EEPROM_REGION_LENGTH__+0x202>
 9e0:	00 ff       	sbrs	r16, 0
 9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <__EEPROM_REGION_LENGTH__+0x1f0>
 9e4:	bf 14       	cp	r11, r15
 9e6:	88 f4       	brcc	.+34     	; 0xa0a <__EEPROM_REGION_LENGTH__+0x20a>
 9e8:	fa 0c       	add	r15, r10
 9ea:	1f 2d       	mov	r17, r15
 9ec:	1b 19       	sub	r17, r11
 9ee:	0e c0       	rjmp	.+28     	; 0xa0c <__EEPROM_REGION_LENGTH__+0x20c>
 9f0:	bf 14       	cp	r11, r15
 9f2:	60 f4       	brcc	.+24     	; 0xa0c <__EEPROM_REGION_LENGTH__+0x20c>
 9f4:	b6 01       	movw	r22, r12
 9f6:	80 e2       	ldi	r24, 0x20	; 32
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 9fe:	b3 94       	inc	r11
 a00:	f7 cf       	rjmp	.-18     	; 0x9f0 <__EEPROM_REGION_LENGTH__+0x1f0>
 a02:	bf 14       	cp	r11, r15
 a04:	18 f4       	brcc	.+6      	; 0xa0c <__EEPROM_REGION_LENGTH__+0x20c>
 a06:	fb 18       	sub	r15, r11
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <__EEPROM_REGION_LENGTH__+0x20e>
 a0a:	1a 2d       	mov	r17, r10
 a0c:	f1 2c       	mov	r15, r1
 a0e:	04 ff       	sbrs	r16, 4
 a10:	10 c0       	rjmp	.+32     	; 0xa32 <__EEPROM_REGION_LENGTH__+0x232>
 a12:	b6 01       	movw	r22, r12
 a14:	80 e3       	ldi	r24, 0x30	; 48
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 a1c:	02 ff       	sbrs	r16, 2
 a1e:	17 c0       	rjmp	.+46     	; 0xa4e <__EEPROM_REGION_LENGTH__+0x24e>
 a20:	01 fd       	sbrc	r16, 1
 a22:	03 c0       	rjmp	.+6      	; 0xa2a <__EEPROM_REGION_LENGTH__+0x22a>
 a24:	88 e7       	ldi	r24, 0x78	; 120
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <__EEPROM_REGION_LENGTH__+0x22e>
 a2a:	88 e5       	ldi	r24, 0x58	; 88
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	b6 01       	movw	r22, r12
 a30:	0c c0       	rjmp	.+24     	; 0xa4a <__EEPROM_REGION_LENGTH__+0x24a>
 a32:	80 2f       	mov	r24, r16
 a34:	86 78       	andi	r24, 0x86	; 134
 a36:	59 f0       	breq	.+22     	; 0xa4e <__EEPROM_REGION_LENGTH__+0x24e>
 a38:	01 ff       	sbrs	r16, 1
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <__EEPROM_REGION_LENGTH__+0x240>
 a3c:	8b e2       	ldi	r24, 0x2B	; 43
 a3e:	01 c0       	rjmp	.+2      	; 0xa42 <__EEPROM_REGION_LENGTH__+0x242>
 a40:	80 e2       	ldi	r24, 0x20	; 32
 a42:	07 fd       	sbrc	r16, 7
 a44:	8d e2       	ldi	r24, 0x2D	; 45
 a46:	b6 01       	movw	r22, r12
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 a4e:	a1 16       	cp	r10, r17
 a50:	38 f4       	brcc	.+14     	; 0xa60 <__EEPROM_REGION_LENGTH__+0x260>
 a52:	b6 01       	movw	r22, r12
 a54:	80 e3       	ldi	r24, 0x30	; 48
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 a5c:	11 50       	subi	r17, 0x01	; 1
 a5e:	f7 cf       	rjmp	.-18     	; 0xa4e <__EEPROM_REGION_LENGTH__+0x24e>
 a60:	aa 94       	dec	r10
 a62:	e1 e0       	ldi	r30, 0x01	; 1
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	ec 0f       	add	r30, r28
 a68:	fd 1f       	adc	r31, r29
 a6a:	ea 0d       	add	r30, r10
 a6c:	f1 1d       	adc	r31, r1
 a6e:	80 81       	ld	r24, Z
 a70:	b6 01       	movw	r22, r12
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 a78:	a1 10       	cpse	r10, r1
 a7a:	f2 cf       	rjmp	.-28     	; 0xa60 <__EEPROM_REGION_LENGTH__+0x260>
 a7c:	19 c0       	rjmp	.+50     	; 0xab0 <__EEPROM_REGION_LENGTH__+0x2b0>
 a7e:	f4 e0       	ldi	r31, 0x04	; 4
 a80:	ff 15       	cp	r31, r15
 a82:	80 f5       	brcc	.+96     	; 0xae4 <__EEPROM_REGION_LENGTH__+0x2e4>
 a84:	84 e0       	ldi	r24, 0x04	; 4
 a86:	f8 1a       	sub	r15, r24
 a88:	73 fe       	sbrs	r7, 3
 a8a:	23 c0       	rjmp	.+70     	; 0xad2 <__EEPROM_REGION_LENGTH__+0x2d2>
 a8c:	01 11       	cpse	r16, r1
 a8e:	2b c0       	rjmp	.+86     	; 0xae6 <__EEPROM_REGION_LENGTH__+0x2e6>
 a90:	53 fe       	sbrs	r5, 3
 a92:	2f c0       	rjmp	.+94     	; 0xaf2 <__EEPROM_REGION_LENGTH__+0x2f2>
 a94:	54 ed       	ldi	r21, 0xD4	; 212
 a96:	85 2e       	mov	r8, r21
 a98:	53 e0       	ldi	r21, 0x03	; 3
 a9a:	95 2e       	mov	r9, r21
 a9c:	50 e0       	ldi	r21, 0x00	; 0
 a9e:	a5 2e       	mov	r10, r21
 aa0:	07 2d       	mov	r16, r7
 aa2:	00 71       	andi	r16, 0x10	; 16
 aa4:	f4 01       	movw	r30, r8
 aa6:	84 91       	lpm	r24, Z
 aa8:	a7 fc       	sbrc	r10, 7
 aaa:	80 81       	ld	r24, Z
 aac:	81 11       	cpse	r24, r1
 aae:	28 c0       	rjmp	.+80     	; 0xb00 <__EEPROM_REGION_LENGTH__+0x300>
 ab0:	ff 20       	and	r15, r15
 ab2:	09 f4       	brne	.+2      	; 0xab6 <__EEPROM_REGION_LENGTH__+0x2b6>
 ab4:	d2 cc       	rjmp	.-1628   	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 ab6:	b6 01       	movw	r22, r12
 ab8:	80 e2       	ldi	r24, 0x20	; 32
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 ac0:	fa 94       	dec	r15
 ac2:	f6 cf       	rjmp	.-20     	; 0xab0 <__EEPROM_REGION_LENGTH__+0x2b0>
 ac4:	f6 01       	movw	r30, r12
 ac6:	87 81       	ldd	r24, Z+7	; 0x07
 ac8:	90 85       	ldd	r25, Z+8	; 0x08
 aca:	2c c0       	rjmp	.+88     	; 0xb24 <__EEPROM_REGION_LENGTH__+0x324>
 acc:	8f ef       	ldi	r24, 0xFF	; 255
 ace:	9f ef       	ldi	r25, 0xFF	; 255
 ad0:	29 c0       	rjmp	.+82     	; 0xb24 <__EEPROM_REGION_LENGTH__+0x324>
 ad2:	b6 01       	movw	r22, r12
 ad4:	80 e2       	ldi	r24, 0x20	; 32
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 adc:	fa 94       	dec	r15
 ade:	f1 10       	cpse	r15, r1
 ae0:	f8 cf       	rjmp	.-16     	; 0xad2 <__EEPROM_REGION_LENGTH__+0x2d2>
 ae2:	d4 cf       	rjmp	.-88     	; 0xa8c <__EEPROM_REGION_LENGTH__+0x28c>
 ae4:	f1 2c       	mov	r15, r1
 ae6:	b6 01       	movw	r22, r12
 ae8:	80 2f       	mov	r24, r16
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 af0:	cf cf       	rjmp	.-98     	; 0xa90 <__EEPROM_REGION_LENGTH__+0x290>
 af2:	40 ed       	ldi	r20, 0xD0	; 208
 af4:	84 2e       	mov	r8, r20
 af6:	43 e0       	ldi	r20, 0x03	; 3
 af8:	94 2e       	mov	r9, r20
 afa:	40 e0       	ldi	r20, 0x00	; 0
 afc:	a4 2e       	mov	r10, r20
 afe:	d0 cf       	rjmp	.-96     	; 0xaa0 <__EEPROM_REGION_LENGTH__+0x2a0>
 b00:	01 11       	cpse	r16, r1
 b02:	80 52       	subi	r24, 0x20	; 32
 b04:	b6 01       	movw	r22, r12
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 b4 14 	call	0x2968	; 0x2968 <fputc>
 b0c:	ff ef       	ldi	r31, 0xFF	; 255
 b0e:	8f 1a       	sub	r8, r31
 b10:	9f 0a       	sbc	r9, r31
 b12:	af 0a       	sbc	r10, r31
 b14:	c7 cf       	rjmp	.-114    	; 0xaa4 <__EEPROM_REGION_LENGTH__+0x2a4>
 b16:	23 e0       	ldi	r18, 0x03	; 3
 b18:	2f 15       	cp	r18, r15
 b1a:	10 f4       	brcc	.+4      	; 0xb20 <__EEPROM_REGION_LENGTH__+0x320>
 b1c:	83 e0       	ldi	r24, 0x03	; 3
 b1e:	b3 cf       	rjmp	.-154    	; 0xa86 <__EEPROM_REGION_LENGTH__+0x286>
 b20:	f1 2c       	mov	r15, r1
 b22:	b6 cf       	rjmp	.-148    	; 0xa90 <__EEPROM_REGION_LENGTH__+0x290>
 b24:	64 96       	adiw	r28, 0x14	; 20
 b26:	e2 e1       	ldi	r30, 0x12	; 18
 b28:	0c 94 9c 1c 	jmp	0x3938	; 0x3938 <__epilogue_restores__>

Disassembly of section .text.libgcc:

00004432 <__tablejump2__>:
    4432:	ee 0f       	add	r30, r30
    4434:	ff 1f       	adc	r31, r31
    4436:	05 90       	lpm	r0, Z+
    4438:	f4 91       	lpm	r31, Z
    443a:	e0 2d       	mov	r30, r0
    443c:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003fe4 <__umulhisi3>:
    3fe4:	a2 9f       	mul	r26, r18
    3fe6:	b0 01       	movw	r22, r0
    3fe8:	b3 9f       	mul	r27, r19
    3fea:	c0 01       	movw	r24, r0
    3fec:	a3 9f       	mul	r26, r19
    3fee:	70 0d       	add	r23, r0
    3ff0:	81 1d       	adc	r24, r1
    3ff2:	11 24       	eor	r1, r1
    3ff4:	91 1d       	adc	r25, r1
    3ff6:	b2 9f       	mul	r27, r18
    3ff8:	70 0d       	add	r23, r0
    3ffa:	81 1d       	adc	r24, r1
    3ffc:	11 24       	eor	r1, r1
    3ffe:	91 1d       	adc	r25, r1
    4000:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00003894 <__prologue_saves__>:
    3894:	2f 92       	push	r2
    3896:	3f 92       	push	r3
    3898:	4f 92       	push	r4
    389a:	5f 92       	push	r5
    389c:	6f 92       	push	r6
    389e:	7f 92       	push	r7
    38a0:	8f 92       	push	r8
    38a2:	9f 92       	push	r9
    38a4:	af 92       	push	r10
    38a6:	bf 92       	push	r11
    38a8:	cf 92       	push	r12
    38aa:	df 92       	push	r13
    38ac:	ef 92       	push	r14
    38ae:	ff 92       	push	r15
    38b0:	0f 93       	push	r16
    38b2:	1f 93       	push	r17
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	ca 1b       	sub	r28, r26
    38be:	db 0b       	sbc	r29, r27
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
    38ca:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00003938 <__epilogue_restores__>:
    3938:	2a 88       	ldd	r2, Y+18	; 0x12
    393a:	39 88       	ldd	r3, Y+17	; 0x11
    393c:	48 88       	ldd	r4, Y+16	; 0x10
    393e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3940:	6e 84       	ldd	r6, Y+14	; 0x0e
    3942:	7d 84       	ldd	r7, Y+13	; 0x0d
    3944:	8c 84       	ldd	r8, Y+12	; 0x0c
    3946:	9b 84       	ldd	r9, Y+11	; 0x0b
    3948:	aa 84       	ldd	r10, Y+10	; 0x0a
    394a:	b9 84       	ldd	r11, Y+9	; 0x09
    394c:	c8 84       	ldd	r12, Y+8	; 0x08
    394e:	df 80       	ldd	r13, Y+7	; 0x07
    3950:	ee 80       	ldd	r14, Y+6	; 0x06
    3952:	fd 80       	ldd	r15, Y+5	; 0x05
    3954:	0c 81       	ldd	r16, Y+4	; 0x04
    3956:	1b 81       	ldd	r17, Y+3	; 0x03
    3958:	aa 81       	ldd	r26, Y+2	; 0x02
    395a:	b9 81       	ldd	r27, Y+1	; 0x01
    395c:	ce 0f       	add	r28, r30
    395e:	d1 1d       	adc	r29, r1
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	f8 94       	cli
    3964:	de bf       	out	0x3e, r29	; 62
    3966:	0f be       	out	0x3f, r0	; 63
    3968:	cd bf       	out	0x3d, r28	; 61
    396a:	ed 01       	movw	r28, r26
    396c:	08 95       	ret

Disassembly of section .text.avrlibc:

00001288 <__ftoa_engine>:
    1288:	28 30       	cpi	r18, 0x08	; 8
    128a:	08 f0       	brcs	.+2      	; 0x128e <__ftoa_engine+0x6>
    128c:	27 e0       	ldi	r18, 0x07	; 7
    128e:	33 27       	eor	r19, r19
    1290:	da 01       	movw	r26, r20
    1292:	99 0f       	add	r25, r25
    1294:	31 1d       	adc	r19, r1
    1296:	87 fd       	sbrc	r24, 7
    1298:	91 60       	ori	r25, 0x01	; 1
    129a:	00 96       	adiw	r24, 0x00	; 0
    129c:	61 05       	cpc	r22, r1
    129e:	71 05       	cpc	r23, r1
    12a0:	39 f4       	brne	.+14     	; 0x12b0 <__ftoa_engine+0x28>
    12a2:	32 60       	ori	r19, 0x02	; 2
    12a4:	2e 5f       	subi	r18, 0xFE	; 254
    12a6:	3d 93       	st	X+, r19
    12a8:	30 e3       	ldi	r19, 0x30	; 48
    12aa:	2a 95       	dec	r18
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <__ftoa_engine+0x1e>
    12ae:	08 95       	ret
    12b0:	9f 3f       	cpi	r25, 0xFF	; 255
    12b2:	30 f0       	brcs	.+12     	; 0x12c0 <__ftoa_engine+0x38>
    12b4:	80 38       	cpi	r24, 0x80	; 128
    12b6:	71 05       	cpc	r23, r1
    12b8:	61 05       	cpc	r22, r1
    12ba:	09 f0       	breq	.+2      	; 0x12be <__ftoa_engine+0x36>
    12bc:	3c 5f       	subi	r19, 0xFC	; 252
    12be:	3c 5f       	subi	r19, 0xFC	; 252
    12c0:	3d 93       	st	X+, r19
    12c2:	91 30       	cpi	r25, 0x01	; 1
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <__ftoa_engine+0x40>
    12c6:	80 68       	ori	r24, 0x80	; 128
    12c8:	91 1d       	adc	r25, r1
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	1f 93       	push	r17
    12d0:	0f 93       	push	r16
    12d2:	ff 92       	push	r15
    12d4:	ef 92       	push	r14
    12d6:	19 2f       	mov	r17, r25
    12d8:	98 7f       	andi	r25, 0xF8	; 248
    12da:	96 95       	lsr	r25
    12dc:	e9 2f       	mov	r30, r25
    12de:	96 95       	lsr	r25
    12e0:	96 95       	lsr	r25
    12e2:	e9 0f       	add	r30, r25
    12e4:	ff 27       	eor	r31, r31
    12e6:	e6 5b       	subi	r30, 0xB6	; 182
    12e8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ea:	99 27       	eor	r25, r25
    12ec:	33 27       	eor	r19, r19
    12ee:	ee 24       	eor	r14, r14
    12f0:	ff 24       	eor	r15, r15
    12f2:	a7 01       	movw	r20, r14
    12f4:	e7 01       	movw	r28, r14
    12f6:	05 90       	lpm	r0, Z+
    12f8:	08 94       	sec
    12fa:	07 94       	ror	r0
    12fc:	28 f4       	brcc	.+10     	; 0x1308 <__ftoa_engine+0x80>
    12fe:	36 0f       	add	r19, r22
    1300:	e7 1e       	adc	r14, r23
    1302:	f8 1e       	adc	r15, r24
    1304:	49 1f       	adc	r20, r25
    1306:	51 1d       	adc	r21, r1
    1308:	66 0f       	add	r22, r22
    130a:	77 1f       	adc	r23, r23
    130c:	88 1f       	adc	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	06 94       	lsr	r0
    1312:	a1 f7       	brne	.-24     	; 0x12fc <__ftoa_engine+0x74>
    1314:	05 90       	lpm	r0, Z+
    1316:	07 94       	ror	r0
    1318:	28 f4       	brcc	.+10     	; 0x1324 <__ftoa_engine+0x9c>
    131a:	e7 0e       	add	r14, r23
    131c:	f8 1e       	adc	r15, r24
    131e:	49 1f       	adc	r20, r25
    1320:	56 1f       	adc	r21, r22
    1322:	c1 1d       	adc	r28, r1
    1324:	77 0f       	add	r23, r23
    1326:	88 1f       	adc	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	66 1f       	adc	r22, r22
    132c:	06 94       	lsr	r0
    132e:	a1 f7       	brne	.-24     	; 0x1318 <__ftoa_engine+0x90>
    1330:	05 90       	lpm	r0, Z+
    1332:	07 94       	ror	r0
    1334:	28 f4       	brcc	.+10     	; 0x1340 <__ftoa_engine+0xb8>
    1336:	f8 0e       	add	r15, r24
    1338:	49 1f       	adc	r20, r25
    133a:	56 1f       	adc	r21, r22
    133c:	c7 1f       	adc	r28, r23
    133e:	d1 1d       	adc	r29, r1
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	66 1f       	adc	r22, r22
    1346:	77 1f       	adc	r23, r23
    1348:	06 94       	lsr	r0
    134a:	a1 f7       	brne	.-24     	; 0x1334 <__ftoa_engine+0xac>
    134c:	05 90       	lpm	r0, Z+
    134e:	07 94       	ror	r0
    1350:	20 f4       	brcc	.+8      	; 0x135a <__ftoa_engine+0xd2>
    1352:	49 0f       	add	r20, r25
    1354:	56 1f       	adc	r21, r22
    1356:	c7 1f       	adc	r28, r23
    1358:	d8 1f       	adc	r29, r24
    135a:	99 0f       	add	r25, r25
    135c:	66 1f       	adc	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	88 1f       	adc	r24, r24
    1362:	06 94       	lsr	r0
    1364:	a9 f7       	brne	.-22     	; 0x1350 <__ftoa_engine+0xc8>
    1366:	84 91       	lpm	r24, Z
    1368:	10 95       	com	r17
    136a:	17 70       	andi	r17, 0x07	; 7
    136c:	41 f0       	breq	.+16     	; 0x137e <__ftoa_engine+0xf6>
    136e:	d6 95       	lsr	r29
    1370:	c7 95       	ror	r28
    1372:	57 95       	ror	r21
    1374:	47 95       	ror	r20
    1376:	f7 94       	ror	r15
    1378:	e7 94       	ror	r14
    137a:	1a 95       	dec	r17
    137c:	c1 f7       	brne	.-16     	; 0x136e <__ftoa_engine+0xe6>
    137e:	e0 ef       	ldi	r30, 0xF0	; 240
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	68 94       	set
    1384:	15 90       	lpm	r1, Z+
    1386:	15 91       	lpm	r17, Z+
    1388:	35 91       	lpm	r19, Z+
    138a:	65 91       	lpm	r22, Z+
    138c:	95 91       	lpm	r25, Z+
    138e:	05 90       	lpm	r0, Z+
    1390:	7f e2       	ldi	r23, 0x2F	; 47
    1392:	73 95       	inc	r23
    1394:	e1 18       	sub	r14, r1
    1396:	f1 0a       	sbc	r15, r17
    1398:	43 0b       	sbc	r20, r19
    139a:	56 0b       	sbc	r21, r22
    139c:	c9 0b       	sbc	r28, r25
    139e:	d0 09       	sbc	r29, r0
    13a0:	c0 f7       	brcc	.-16     	; 0x1392 <__ftoa_engine+0x10a>
    13a2:	e1 0c       	add	r14, r1
    13a4:	f1 1e       	adc	r15, r17
    13a6:	43 1f       	adc	r20, r19
    13a8:	56 1f       	adc	r21, r22
    13aa:	c9 1f       	adc	r28, r25
    13ac:	d0 1d       	adc	r29, r0
    13ae:	7e f4       	brtc	.+30     	; 0x13ce <__ftoa_engine+0x146>
    13b0:	70 33       	cpi	r23, 0x30	; 48
    13b2:	11 f4       	brne	.+4      	; 0x13b8 <__ftoa_engine+0x130>
    13b4:	8a 95       	dec	r24
    13b6:	e6 cf       	rjmp	.-52     	; 0x1384 <__ftoa_engine+0xfc>
    13b8:	e8 94       	clt
    13ba:	01 50       	subi	r16, 0x01	; 1
    13bc:	30 f0       	brcs	.+12     	; 0x13ca <__ftoa_engine+0x142>
    13be:	08 0f       	add	r16, r24
    13c0:	0a f4       	brpl	.+2      	; 0x13c4 <__ftoa_engine+0x13c>
    13c2:	00 27       	eor	r16, r16
    13c4:	02 17       	cp	r16, r18
    13c6:	08 f4       	brcc	.+2      	; 0x13ca <__ftoa_engine+0x142>
    13c8:	20 2f       	mov	r18, r16
    13ca:	23 95       	inc	r18
    13cc:	02 2f       	mov	r16, r18
    13ce:	7a 33       	cpi	r23, 0x3A	; 58
    13d0:	28 f0       	brcs	.+10     	; 0x13dc <__ftoa_engine+0x154>
    13d2:	79 e3       	ldi	r23, 0x39	; 57
    13d4:	7d 93       	st	X+, r23
    13d6:	2a 95       	dec	r18
    13d8:	e9 f7       	brne	.-6      	; 0x13d4 <__ftoa_engine+0x14c>
    13da:	10 c0       	rjmp	.+32     	; 0x13fc <__ftoa_engine+0x174>
    13dc:	7d 93       	st	X+, r23
    13de:	2a 95       	dec	r18
    13e0:	89 f6       	brne	.-94     	; 0x1384 <__ftoa_engine+0xfc>
    13e2:	06 94       	lsr	r0
    13e4:	97 95       	ror	r25
    13e6:	67 95       	ror	r22
    13e8:	37 95       	ror	r19
    13ea:	17 95       	ror	r17
    13ec:	17 94       	ror	r1
    13ee:	e1 18       	sub	r14, r1
    13f0:	f1 0a       	sbc	r15, r17
    13f2:	43 0b       	sbc	r20, r19
    13f4:	56 0b       	sbc	r21, r22
    13f6:	c9 0b       	sbc	r28, r25
    13f8:	d0 09       	sbc	r29, r0
    13fa:	98 f0       	brcs	.+38     	; 0x1422 <__ftoa_engine+0x19a>
    13fc:	23 95       	inc	r18
    13fe:	7e 91       	ld	r23, -X
    1400:	73 95       	inc	r23
    1402:	7a 33       	cpi	r23, 0x3A	; 58
    1404:	08 f0       	brcs	.+2      	; 0x1408 <__ftoa_engine+0x180>
    1406:	70 e3       	ldi	r23, 0x30	; 48
    1408:	7c 93       	st	X, r23
    140a:	20 13       	cpse	r18, r16
    140c:	b8 f7       	brcc	.-18     	; 0x13fc <__ftoa_engine+0x174>
    140e:	7e 91       	ld	r23, -X
    1410:	70 61       	ori	r23, 0x10	; 16
    1412:	7d 93       	st	X+, r23
    1414:	30 f0       	brcs	.+12     	; 0x1422 <__ftoa_engine+0x19a>
    1416:	83 95       	inc	r24
    1418:	71 e3       	ldi	r23, 0x31	; 49
    141a:	7d 93       	st	X+, r23
    141c:	70 e3       	ldi	r23, 0x30	; 48
    141e:	2a 95       	dec	r18
    1420:	e1 f7       	brne	.-8      	; 0x141a <__ftoa_engine+0x192>
    1422:	11 24       	eor	r1, r1
    1424:	ef 90       	pop	r14
    1426:	ff 90       	pop	r15
    1428:	0f 91       	pop	r16
    142a:	1f 91       	pop	r17
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	99 27       	eor	r25, r25
    1432:	87 fd       	sbrc	r24, 7
    1434:	90 95       	com	r25
    1436:	08 95       	ret

Disassembly of section .text.avrlibc:

00003b06 <memcpy>:
    3b06:	cf 92       	push	r12
    3b08:	df 92       	push	r13
    3b0a:	ef 92       	push	r14
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	6a 01       	movw	r12, r20
    3b10:	e6 2e       	mov	r14, r22
    3b12:	28 0f       	add	r18, r24
    3b14:	39 1f       	adc	r19, r25
    3b16:	a2 17       	cp	r26, r18
    3b18:	b3 07       	cpc	r27, r19
    3b1a:	51 f0       	breq	.+20     	; 0x3b30 <memcpy+0x2a>
    3b1c:	f6 01       	movw	r30, r12
    3b1e:	44 91       	lpm	r20, Z
    3b20:	e7 fc       	sbrc	r14, 7
    3b22:	40 81       	ld	r20, Z
    3b24:	4d 93       	st	X+, r20
    3b26:	4f ef       	ldi	r20, 0xFF	; 255
    3b28:	c4 1a       	sub	r12, r20
    3b2a:	d4 0a       	sbc	r13, r20
    3b2c:	e4 0a       	sbc	r14, r20
    3b2e:	f3 cf       	rjmp	.-26     	; 0x3b16 <memcpy+0x10>
    3b30:	ef 90       	pop	r14
    3b32:	df 90       	pop	r13
    3b34:	cf 90       	pop	r12
    3b36:	08 95       	ret

Disassembly of section .text.avrlibc:

000035bc <strcmp>:
    35bc:	cf 92       	push	r12
    35be:	df 92       	push	r13
    35c0:	ef 92       	push	r14
    35c2:	6b 01       	movw	r12, r22
    35c4:	e8 2e       	mov	r14, r24
    35c6:	f6 01       	movw	r30, r12
    35c8:	84 91       	lpm	r24, Z
    35ca:	e7 fc       	sbrc	r14, 7
    35cc:	80 81       	ld	r24, Z
    35ce:	f9 01       	movw	r30, r18
    35d0:	54 91       	lpm	r21, Z
    35d2:	47 fd       	sbrc	r20, 7
    35d4:	50 81       	ld	r21, Z
    35d6:	85 13       	cpse	r24, r21
    35d8:	0b c0       	rjmp	.+22     	; 0x35f0 <strcmp+0x34>
    35da:	88 23       	and	r24, r24
    35dc:	41 f0       	breq	.+16     	; 0x35ee <strcmp+0x32>
    35de:	8f ef       	ldi	r24, 0xFF	; 255
    35e0:	c8 1a       	sub	r12, r24
    35e2:	d8 0a       	sbc	r13, r24
    35e4:	e8 0a       	sbc	r14, r24
    35e6:	2f 5f       	subi	r18, 0xFF	; 255
    35e8:	3f 4f       	sbci	r19, 0xFF	; 255
    35ea:	4f 4f       	sbci	r20, 0xFF	; 255
    35ec:	ec cf       	rjmp	.-40     	; 0x35c6 <strcmp+0xa>
    35ee:	58 2f       	mov	r21, r24
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	85 1b       	sub	r24, r21
    35f4:	91 09       	sbc	r25, r1
    35f6:	ef 90       	pop	r14
    35f8:	df 90       	pop	r13
    35fa:	cf 90       	pop	r12
    35fc:	08 95       	ret

Disassembly of section .text.avrlibc:

00002ba6 <strncmp>:
    2ba6:	cf 92       	push	r12
    2ba8:	df 92       	push	r13
    2baa:	ef 92       	push	r14
    2bac:	0f 93       	push	r16
    2bae:	1f 93       	push	r17
    2bb0:	6b 01       	movw	r12, r22
    2bb2:	e8 2e       	mov	r14, r24
    2bb4:	01 15       	cp	r16, r1
    2bb6:	11 05       	cpc	r17, r1
    2bb8:	19 f1       	breq	.+70     	; 0x2c00 <strncmp+0x5a>
    2bba:	01 50       	subi	r16, 0x01	; 1
    2bbc:	11 09       	sbc	r17, r1
    2bbe:	f6 01       	movw	r30, r12
    2bc0:	84 91       	lpm	r24, Z
    2bc2:	e7 fc       	sbrc	r14, 7
    2bc4:	80 81       	ld	r24, Z
    2bc6:	88 23       	and	r24, r24
    2bc8:	99 f0       	breq	.+38     	; 0x2bf0 <strncmp+0x4a>
    2bca:	f9 01       	movw	r30, r18
    2bcc:	94 91       	lpm	r25, Z
    2bce:	47 fd       	sbrc	r20, 7
    2bd0:	90 81       	ld	r25, Z
    2bd2:	99 23       	and	r25, r25
    2bd4:	69 f0       	breq	.+26     	; 0x2bf0 <strncmp+0x4a>
    2bd6:	01 15       	cp	r16, r1
    2bd8:	11 05       	cpc	r17, r1
    2bda:	51 f0       	breq	.+20     	; 0x2bf0 <strncmp+0x4a>
    2bdc:	89 13       	cpse	r24, r25
    2bde:	08 c0       	rjmp	.+16     	; 0x2bf0 <strncmp+0x4a>
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	c8 1a       	sub	r12, r24
    2be4:	d8 0a       	sbc	r13, r24
    2be6:	e8 0a       	sbc	r14, r24
    2be8:	2f 5f       	subi	r18, 0xFF	; 255
    2bea:	3f 4f       	sbci	r19, 0xFF	; 255
    2bec:	4f 4f       	sbci	r20, 0xFF	; 255
    2bee:	e5 cf       	rjmp	.-54     	; 0x2bba <strncmp+0x14>
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	f9 01       	movw	r30, r18
    2bf4:	24 91       	lpm	r18, Z
    2bf6:	47 fd       	sbrc	r20, 7
    2bf8:	20 81       	ld	r18, Z
    2bfa:	82 1b       	sub	r24, r18
    2bfc:	91 09       	sbc	r25, r1
    2bfe:	02 c0       	rjmp	.+4      	; 0x2c04 <strncmp+0x5e>
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	1f 91       	pop	r17
    2c06:	0f 91       	pop	r16
    2c08:	ef 90       	pop	r14
    2c0a:	df 90       	pop	r13
    2c0c:	cf 90       	pop	r12
    2c0e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003d14 <strlen>:
    3d14:	cf 92       	push	r12
    3d16:	df 92       	push	r13
    3d18:	ef 92       	push	r14
    3d1a:	6b 01       	movw	r12, r22
    3d1c:	e8 2e       	mov	r14, r24
    3d1e:	a8 2f       	mov	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	fc 01       	movw	r30, r24
    3d24:	24 91       	lpm	r18, Z
    3d26:	a7 fd       	sbrc	r26, 7
    3d28:	20 81       	ld	r18, Z
    3d2a:	22 23       	and	r18, r18
    3d2c:	19 f0       	breq	.+6      	; 0x3d34 <strlen+0x20>
    3d2e:	01 96       	adiw	r24, 0x01	; 1
    3d30:	a1 1d       	adc	r26, r1
    3d32:	f7 cf       	rjmp	.-18     	; 0x3d22 <strlen+0xe>
    3d34:	8c 19       	sub	r24, r12
    3d36:	9d 09       	sbc	r25, r13
    3d38:	ef 90       	pop	r14
    3d3a:	df 90       	pop	r13
    3d3c:	cf 90       	pop	r12
    3d3e:	08 95       	ret

Disassembly of section .text.avrlibc:

00004002 <strcpy>:
    4002:	9a 01       	movw	r18, r20
    4004:	46 2f       	mov	r20, r22
    4006:	dc 01       	movw	r26, r24
    4008:	f9 01       	movw	r30, r18
    400a:	54 91       	lpm	r21, Z
    400c:	47 fd       	sbrc	r20, 7
    400e:	50 81       	ld	r21, Z
    4010:	5d 93       	st	X+, r21
    4012:	55 23       	and	r21, r21
    4014:	21 f0       	breq	.+8      	; 0x401e <strcpy+0x1c>
    4016:	2f 5f       	subi	r18, 0xFF	; 255
    4018:	3f 4f       	sbci	r19, 0xFF	; 255
    401a:	4f 4f       	sbci	r20, 0xFF	; 255
    401c:	f5 cf       	rjmp	.-22     	; 0x4008 <strcpy+0x6>
    401e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000396e <strnlen>:
    396e:	cf 92       	push	r12
    3970:	df 92       	push	r13
    3972:	ef 92       	push	r14
    3974:	6b 01       	movw	r12, r22
    3976:	e8 2e       	mov	r14, r24
    3978:	a8 2f       	mov	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	41 15       	cp	r20, r1
    397e:	51 05       	cpc	r21, r1
    3980:	31 f4       	brne	.+12     	; 0x398e <strnlen+0x20>
    3982:	8c 19       	sub	r24, r12
    3984:	9d 09       	sbc	r25, r13
    3986:	ef 90       	pop	r14
    3988:	df 90       	pop	r13
    398a:	cf 90       	pop	r12
    398c:	08 95       	ret
    398e:	fc 01       	movw	r30, r24
    3990:	24 91       	lpm	r18, Z
    3992:	a7 fd       	sbrc	r26, 7
    3994:	20 81       	ld	r18, Z
    3996:	22 23       	and	r18, r18
    3998:	a1 f3       	breq	.-24     	; 0x3982 <strnlen+0x14>
    399a:	01 96       	adiw	r24, 0x01	; 1
    399c:	a1 1d       	adc	r26, r1
    399e:	41 50       	subi	r20, 0x01	; 1
    39a0:	51 09       	sbc	r21, r1
    39a2:	ec cf       	rjmp	.-40     	; 0x397c <strnlen+0xe>

Disassembly of section .text.avrlibc:

00002968 <fputc>:
    2968:	0f 93       	push	r16
    296a:	1f 93       	push	r17
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	fb 01       	movw	r30, r22
    2972:	24 81       	ldd	r18, Z+4	; 0x04
    2974:	21 fd       	sbrc	r18, 1
    2976:	03 c0       	rjmp	.+6      	; 0x297e <fputc+0x16>
    2978:	8f ef       	ldi	r24, 0xFF	; 255
    297a:	9f ef       	ldi	r25, 0xFF	; 255
    297c:	2c c0       	rjmp	.+88     	; 0x29d6 <fputc+0x6e>
    297e:	22 ff       	sbrs	r18, 2
    2980:	16 c0       	rjmp	.+44     	; 0x29ae <fputc+0x46>
    2982:	47 81       	ldd	r20, Z+7	; 0x07
    2984:	50 85       	ldd	r21, Z+8	; 0x08
    2986:	25 81       	ldd	r18, Z+5	; 0x05
    2988:	36 81       	ldd	r19, Z+6	; 0x06
    298a:	42 17       	cp	r20, r18
    298c:	53 07       	cpc	r21, r19
    298e:	44 f4       	brge	.+16     	; 0x29a0 <fputc+0x38>
    2990:	a0 81       	ld	r26, Z
    2992:	b1 81       	ldd	r27, Z+1	; 0x01
    2994:	9d 01       	movw	r18, r26
    2996:	2f 5f       	subi	r18, 0xFF	; 255
    2998:	3f 4f       	sbci	r19, 0xFF	; 255
    299a:	31 83       	std	Z+1, r19	; 0x01
    299c:	20 83       	st	Z, r18
    299e:	8c 93       	st	X, r24
    29a0:	27 81       	ldd	r18, Z+7	; 0x07
    29a2:	30 85       	ldd	r19, Z+8	; 0x08
    29a4:	2f 5f       	subi	r18, 0xFF	; 255
    29a6:	3f 4f       	sbci	r19, 0xFF	; 255
    29a8:	30 87       	std	Z+8, r19	; 0x08
    29aa:	27 83       	std	Z+7, r18	; 0x07
    29ac:	14 c0       	rjmp	.+40     	; 0x29d6 <fputc+0x6e>
    29ae:	8b 01       	movw	r16, r22
    29b0:	ec 01       	movw	r28, r24
    29b2:	fb 01       	movw	r30, r22
    29b4:	01 84       	ldd	r0, Z+9	; 0x09
    29b6:	f2 85       	ldd	r31, Z+10	; 0x0a
    29b8:	e0 2d       	mov	r30, r0
    29ba:	09 95       	icall
    29bc:	89 2b       	or	r24, r25
    29be:	e1 f6       	brne	.-72     	; 0x2978 <fputc+0x10>
    29c0:	d8 01       	movw	r26, r16
    29c2:	17 96       	adiw	r26, 0x07	; 7
    29c4:	8d 91       	ld	r24, X+
    29c6:	9c 91       	ld	r25, X
    29c8:	18 97       	sbiw	r26, 0x08	; 8
    29ca:	01 96       	adiw	r24, 0x01	; 1
    29cc:	18 96       	adiw	r26, 0x08	; 8
    29ce:	9c 93       	st	X, r25
    29d0:	8e 93       	st	-X, r24
    29d2:	17 97       	sbiw	r26, 0x07	; 7
    29d4:	ce 01       	movw	r24, r28
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	1f 91       	pop	r17
    29dc:	0f 91       	pop	r16
    29de:	08 95       	ret

Disassembly of section .text.avrlibc:

000034ae <sprintf>:
    34ae:	af e0       	ldi	r26, 0x0F	; 15
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	ed e5       	ldi	r30, 0x5D	; 93
    34b4:	fa e1       	ldi	r31, 0x1A	; 26
    34b6:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__prologue_saves__+0x1c>
    34ba:	0e 89       	ldd	r16, Y+22	; 0x16
    34bc:	1f 89       	ldd	r17, Y+23	; 0x17
    34be:	86 e0       	ldi	r24, 0x06	; 6
    34c0:	8d 83       	std	Y+5, r24	; 0x05
    34c2:	1a 83       	std	Y+2, r17	; 0x02
    34c4:	09 83       	std	Y+1, r16	; 0x01
    34c6:	8f ef       	ldi	r24, 0xFF	; 255
    34c8:	9f e7       	ldi	r25, 0x7F	; 127
    34ca:	9f 83       	std	Y+7, r25	; 0x07
    34cc:	8e 83       	std	Y+6, r24	; 0x06
    34ce:	9e 01       	movw	r18, r28
    34d0:	25 5e       	subi	r18, 0xE5	; 229
    34d2:	3f 4f       	sbci	r19, 0xFF	; 255
    34d4:	48 8d       	ldd	r20, Y+24	; 0x18
    34d6:	59 8d       	ldd	r21, Y+25	; 0x19
    34d8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    34da:	ce 01       	movw	r24, r28
    34dc:	01 96       	adiw	r24, 0x01	; 1
    34de:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <vfprintf>
    34e2:	e8 85       	ldd	r30, Y+8	; 0x08
    34e4:	f9 85       	ldd	r31, Y+9	; 0x09
    34e6:	e0 0f       	add	r30, r16
    34e8:	f1 1f       	adc	r31, r17
    34ea:	10 82       	st	Z, r1
    34ec:	2f 96       	adiw	r28, 0x0f	; 15
    34ee:	e4 e0       	ldi	r30, 0x04	; 4
    34f0:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000021d0 <__ultoa_invert>:
    21d0:	fa 01       	movw	r30, r20
    21d2:	aa 27       	eor	r26, r26
    21d4:	28 30       	cpi	r18, 0x08	; 8
    21d6:	51 f1       	breq	.+84     	; 0x222c <__ultoa_invert+0x5c>
    21d8:	20 31       	cpi	r18, 0x10	; 16
    21da:	81 f1       	breq	.+96     	; 0x223c <__ultoa_invert+0x6c>
    21dc:	e8 94       	clt
    21de:	6f 93       	push	r22
    21e0:	6e 7f       	andi	r22, 0xFE	; 254
    21e2:	6e 5f       	subi	r22, 0xFE	; 254
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	8f 4f       	sbci	r24, 0xFF	; 255
    21e8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ea:	af 4f       	sbci	r26, 0xFF	; 255
    21ec:	b1 e0       	ldi	r27, 0x01	; 1
    21ee:	3e d0       	rcall	.+124    	; 0x226c <__ultoa_invert+0x9c>
    21f0:	b4 e0       	ldi	r27, 0x04	; 4
    21f2:	3c d0       	rcall	.+120    	; 0x226c <__ultoa_invert+0x9c>
    21f4:	67 0f       	add	r22, r23
    21f6:	78 1f       	adc	r23, r24
    21f8:	89 1f       	adc	r24, r25
    21fa:	9a 1f       	adc	r25, r26
    21fc:	a1 1d       	adc	r26, r1
    21fe:	68 0f       	add	r22, r24
    2200:	79 1f       	adc	r23, r25
    2202:	8a 1f       	adc	r24, r26
    2204:	91 1d       	adc	r25, r1
    2206:	a1 1d       	adc	r26, r1
    2208:	6a 0f       	add	r22, r26
    220a:	71 1d       	adc	r23, r1
    220c:	81 1d       	adc	r24, r1
    220e:	91 1d       	adc	r25, r1
    2210:	a1 1d       	adc	r26, r1
    2212:	20 d0       	rcall	.+64     	; 0x2254 <__ultoa_invert+0x84>
    2214:	09 f4       	brne	.+2      	; 0x2218 <__ultoa_invert+0x48>
    2216:	68 94       	set
    2218:	3f 91       	pop	r19
    221a:	2a e0       	ldi	r18, 0x0A	; 10
    221c:	26 9f       	mul	r18, r22
    221e:	11 24       	eor	r1, r1
    2220:	30 19       	sub	r19, r0
    2222:	30 5d       	subi	r19, 0xD0	; 208
    2224:	31 93       	st	Z+, r19
    2226:	de f6       	brtc	.-74     	; 0x21de <__ultoa_invert+0xe>
    2228:	cf 01       	movw	r24, r30
    222a:	08 95       	ret
    222c:	46 2f       	mov	r20, r22
    222e:	47 70       	andi	r20, 0x07	; 7
    2230:	40 5d       	subi	r20, 0xD0	; 208
    2232:	41 93       	st	Z+, r20
    2234:	b3 e0       	ldi	r27, 0x03	; 3
    2236:	0f d0       	rcall	.+30     	; 0x2256 <__ultoa_invert+0x86>
    2238:	c9 f7       	brne	.-14     	; 0x222c <__ultoa_invert+0x5c>
    223a:	f6 cf       	rjmp	.-20     	; 0x2228 <__ultoa_invert+0x58>
    223c:	46 2f       	mov	r20, r22
    223e:	4f 70       	andi	r20, 0x0F	; 15
    2240:	40 5d       	subi	r20, 0xD0	; 208
    2242:	4a 33       	cpi	r20, 0x3A	; 58
    2244:	18 f0       	brcs	.+6      	; 0x224c <__ultoa_invert+0x7c>
    2246:	49 5d       	subi	r20, 0xD9	; 217
    2248:	31 fd       	sbrc	r19, 1
    224a:	40 52       	subi	r20, 0x20	; 32
    224c:	41 93       	st	Z+, r20
    224e:	02 d0       	rcall	.+4      	; 0x2254 <__ultoa_invert+0x84>
    2250:	a9 f7       	brne	.-22     	; 0x223c <__ultoa_invert+0x6c>
    2252:	ea cf       	rjmp	.-44     	; 0x2228 <__ultoa_invert+0x58>
    2254:	b4 e0       	ldi	r27, 0x04	; 4
    2256:	a6 95       	lsr	r26
    2258:	97 95       	ror	r25
    225a:	87 95       	ror	r24
    225c:	77 95       	ror	r23
    225e:	67 95       	ror	r22
    2260:	ba 95       	dec	r27
    2262:	c9 f7       	brne	.-14     	; 0x2256 <__ultoa_invert+0x86>
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	61 05       	cpc	r22, r1
    2268:	71 05       	cpc	r23, r1
    226a:	08 95       	ret
    226c:	9b 01       	movw	r18, r22
    226e:	ac 01       	movw	r20, r24
    2270:	0a 2e       	mov	r0, r26
    2272:	06 94       	lsr	r0
    2274:	57 95       	ror	r21
    2276:	47 95       	ror	r20
    2278:	37 95       	ror	r19
    227a:	27 95       	ror	r18
    227c:	ba 95       	dec	r27
    227e:	c9 f7       	brne	.-14     	; 0x2272 <__ultoa_invert+0xa2>
    2280:	62 0f       	add	r22, r18
    2282:	73 1f       	adc	r23, r19
    2284:	84 1f       	adc	r24, r20
    2286:	95 1f       	adc	r25, r21
    2288:	a0 1d       	adc	r26, r0
    228a:	08 95       	ret

Disassembly of section .text.avrlibc:

00003dde <eeprom_read_block>:
    3dde:	ba 01       	movw	r22, r20
    3de0:	a9 01       	movw	r20, r18
    3de2:	dc 01       	movw	r26, r24
    3de4:	cb 01       	movw	r24, r22

00003de6 <eeprom_read_blraw>:
    3de6:	fc 01       	movw	r30, r24
    3de8:	f9 99       	sbic	0x1f, 1	; 31
    3dea:	fe cf       	rjmp	.-4      	; 0x3de8 <eeprom_read_blraw+0x2>
    3dec:	06 c0       	rjmp	.+12     	; 0x3dfa <eeprom_read_blraw+0x14>
    3dee:	f2 bd       	out	0x22, r31	; 34
    3df0:	e1 bd       	out	0x21, r30	; 33
    3df2:	f8 9a       	sbi	0x1f, 0	; 31
    3df4:	31 96       	adiw	r30, 0x01	; 1
    3df6:	00 b4       	in	r0, 0x20	; 32
    3df8:	0d 92       	st	X+, r0
    3dfa:	41 50       	subi	r20, 0x01	; 1
    3dfc:	50 40       	sbci	r21, 0x00	; 0
    3dfe:	b8 f7       	brcc	.-18     	; 0x3dee <eeprom_read_blraw+0x8>
    3e00:	08 95       	ret

Disassembly of section .text.avrlibc:

000042b2 <eeprom_read_byte>:
    42b2:	cb 01       	movw	r24, r22
    42b4:	f9 99       	sbic	0x1f, 1	; 31
    42b6:	fe cf       	rjmp	.-4      	; 0x42b4 <eeprom_read_byte+0x2>
    42b8:	92 bd       	out	0x22, r25	; 34
    42ba:	81 bd       	out	0x21, r24	; 33
    42bc:	f8 9a       	sbi	0x1f, 0	; 31
    42be:	99 27       	eor	r25, r25
    42c0:	80 b5       	in	r24, 0x20	; 32
    42c2:	08 95       	ret

Disassembly of section .text.avrlibc:

000043aa <eeprom_read_dword>:
    43aa:	cb 01       	movw	r24, r22
    43ac:	a6 e1       	ldi	r26, 0x16	; 22
    43ae:	b0 e0       	ldi	r27, 0x00	; 0
    43b0:	44 e0       	ldi	r20, 0x04	; 4
    43b2:	50 e0       	ldi	r21, 0x00	; 0
    43b4:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

000043b8 <eeprom_read_word>:
    43b8:	cb 01       	movw	r24, r22
    43ba:	a8 e1       	ldi	r26, 0x18	; 24
    43bc:	b0 e0       	ldi	r27, 0x00	; 0
    43be:	42 e0       	ldi	r20, 0x02	; 2
    43c0:	50 e0       	ldi	r21, 0x00	; 0
    43c2:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <eeprom_read_blraw>
