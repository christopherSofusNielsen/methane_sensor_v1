
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00006aaf  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000772  00800100  00800100  00006aaf  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00006aaf  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  00006b0a  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000c18  00000000  00000000  00006b80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001276a  00000000  00000000  00007798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000347f  00000000  00000000  00019f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b75  00000000  00000000  0001d381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f88  00000000  00000000  00023ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001542  00000000  00000000  00025e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000747d  00000000  00000000  000273c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  0002e83f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000693e  0000693e  00006a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0002f240  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00006616  00006616  0000676a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  0000649e  0000649e  000065f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00006624  00006624  00006778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  000064b2  000064b2  00006606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00006632  00006632  00006786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  000064c6  000064c6  0000661a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PM_HAL_BC_power_init 0000000e  00006640  00006640  00006794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PM_HAL_BC_power 00000014  000064da  000064da  0000662e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PM_HAL_LED_power_init 0000000e  0000664e  0000664e  000067a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PM_HAL_LED_power 00000014  000064ee  000064ee  00006642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PM_HAL_LED_toggle 00000008  00006892  00006892  000069e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PM_HAL_enter_power_down 0000003c  00005766  00005766  000058ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_3 00000014  00006502  00006502  00006656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.rn2483_init 00000008  0000689a  0000689a  000069ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.rn2483_reset_active 00000008  000068a2  000068a2  000069f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.rn2483_reset_deactive 00000008  000068aa  000068aa  000069fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SCD30_HAL_init 0000000e  0000665c  0000665c  000067b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SCD30_HAL_data_ready 0000000a  00006824  00006824  00006978  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TC0_HAL_init 00000022  00006060  00006060  000061b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TC0_HAL_start 00000006  00006902  00006902  00006a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TC0_HAL_stop 00000004  00006942  00006942  00006a96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_16 0000004e  00004e30  00004e30  00004f84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .bss._cb      00000002  00800f7b  00800f7b  00006aaf  2**0
                  ALLOC
 38 .text.TC1_HAL_init 00000036  00005a58  00005a58  00005bac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TC1_HAL_start 0000000c  00006758  00006758  000068ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TC1_HAL_stop 0000000c  00006764  00006764  000068b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_13 0000004e  00004e7e  00004e7e  00004fd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss._cb      00000002  00800f7d  00800f7d  00006aaf  2**0
                  ALLOC
 43 .text.clear_callbacks 00000020  0000614e  0000614e  000062a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.start_timer 00000008  000068b2  000068b2  00006a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.stop_timer 00000006  00006908  00006908  00006a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TC2_HAL_init 00000020  0000616e  0000616e  000062c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TC2_HAL_kill 0000000a  0000682e  0000682e  00006982  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TC2_HAL_subscribe 00000054  00004c96  00004c96  00004dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TC2_HAL_cancel 0000003a  00005856  00005856  000059aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_9 0000007c  00004170  00004170  000042c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .bss.cnt      00000001  00800f95  00800f95  00006aaf  2**0
                  ALLOC
 52 .bss.cbCounter 00000001  00800f96  00800f96  00006aaf  2**0
                  ALLOC
 53 .bss.callbacks 0000000a  00800f4a  00800f4a  00006aaf  2**0
                  ALLOC
 54 .text.start_and_write_data 0000004c  00004f68  00004f68  000050bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.read_and_stop 0000005a  00004a86  00004a86  00004bda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TWI_API_write_data 00000014  00006516  00006516  0000666a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TWI_API_write_data_stop 0000001a  00006368  00006368  000064bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00005bce  00005bce  00005d22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TWI_API_repeat_read_data_stop 00000030  00005c96  00005c96  00005dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.TWI_HAL_init 00000012  0000657a  0000657a  000066ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.TWI_HAL_start 00000048  0000525a  0000525a  000053ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.TWI_HAL_repeated_start 00000042  000055a4  000055a4  000056f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.TWI_HAL_write_byte 00000020  0000618e  0000618e  000062e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.TWI_HAL_read_byte_ack 00000014  0000652a  0000652a  0000667e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.TWI_HAL_read_byte_nack 00000014  0000653e  0000653e  00006692  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.TWI_HAL_stop 00000010  000065e6  000065e6  0000673a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.copy_buffer 0000002e  00005e46  00005e46  00005f9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart0_hal_init 0000003c  000057a2  000057a2  000058f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.uart0_hal_send_message 0000003c  000057de  000057de  00005932  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.uart0_hal_send_string 0000006e  00004686  00004686  000047da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.uart0_hal_message_ready 0000000e  0000666a  0000666a  000067be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.uart0_hal_clear_rx_buffer 0000000a  00006838  00006838  0000698c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.uart0_hal_read_message_as_str 00000028  00005f54  00005f54  000060a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uart0_hal_send_break 00000046  0000537a  0000537a  000054ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__vector_22 0000004a  0000517c  0000517c  000052d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__vector_20 00000074  000044be  000044be  00004612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.rx_buffer_has_message 00000001  00800f97  00800f97  00006aaf  2**0
                  ALLOC
 78 .bss.rx_buffer_data_len 00000001  00800f98  00800f98  00006aaf  2**0
                  ALLOC
 79 .bss.tx_buffer_cursor 00000001  00800f99  00800f99  00006aaf  2**0
                  ALLOC
 80 .bss.tx_buffer_data_len 00000001  00800f9a  00800f9a  00006aaf  2**0
                  ALLOC
 81 .text.copy_buffer 0000002e  00005e74  00005e74  00005fc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.uart1_hal_init 0000003c  0000581a  0000581a  0000596e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.uart1_hal_send_string 0000008a  00003fdc  00003fdc  00004130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.uart1_hal_message_ready 0000000e  00006678  00006678  000067cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.uart1_hal_rx_full 0000000e  00006686  00006686  000067da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.uart1_hal_clear_rx_buffer 0000000a  00006842  00006842  00006996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.uart1_hal_read_message_as_str 00000028  00005f7c  00005f7c  000060d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_30 0000004a  000051c6  000051c6  0000531a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__vector_28 00000074  00004532  00004532  00004686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .bss.rx_buffer_has_message 00000001  00800f9b  00800f9b  00006aaf  2**0
                  ALLOC
 91 .bss.rx_buffer_data_len 00000001  00800f9c  00800f9c  00006aaf  2**0
                  ALLOC
 92 .bss.rx_buffer 00000096  00800dea  00800dea  00006aaf  2**0
                  ALLOC
 93 .bss.tx_buffer_cursor 00000001  00800f9d  00800f9d  00006aaf  2**0
                  ALLOC
 94 .bss.tx_buffer_data_len 00000001  00800f9e  00800f9e  00006aaf  2**0
                  ALLOC
 95 .bss.tx_buffer 000000c8  00800d22  00800d22  00006aaf  2**0
                  ALLOC
 96 .text.UI_HAL_jumper_init 0000000e  00006694  00006694  000067e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.UI_HAL_is_config_mode 0000000a  0000684c  0000684c  000069a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.main    0000003a  00005890  00005890  000059e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.calc_ppm_methane 00000096  00003cf6  00003cf6  00003e4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vect_ADC_heat_timeout 00000018  000063d0  000063d0  00006524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.ADC_init_sampling 00000066  00004908  00004908  00004a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.ADC_deinit_sampling 00000014  00006552  00006552  000066a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.ADC_is_sampling_done 0000001c  000062c0  000062c0  00006414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.ADC_get_value 00000056  00004bea  00004bea  00004d3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.vect_ADC_do_sample 00000046  000053c0  000053c0  00005514  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.ADC_start_sampling 0000000a  00006856  00006856  000069aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.ADC_meth_sens_power_on 0000001e  000061ee  000061ee  00006342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.ADC_meth_sens_power_off 00000008  000068ba  000068ba  00006a0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.ADC_meth_sens_ready 00000012  0000658c  0000658c  000066e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.ADC_set_conf_parameters 00000042  000055e6  000055e6  0000573a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .bss.cntPowerUpTime 00000001  00800f9f  00800f9f  00006aaf  2**0
                  ALLOC
112 .bss._powerUpTime 00000001  00800fa0  00800fa0  00006aaf  2**0
                  ALLOC
113 .bss.cntSamples 00000002  00800f7f  00800f7f  00006aaf  2**0
                  ALLOC
114 .bss._data    00000002  00800f81  00800f81  00006aaf  2**0
                  ALLOC
115 .bss._nSamples 00000002  00800f83  00800f83  00006aaf  2**0
                  ALLOC
116 .data.PPM_factor 00000004  00800f5f  0000694b  00006a9f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
117 .data.RRL     00000004  00800f63  0000694f  00006aa3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
118 .data.Vc      00000004  00800f67  00006953  00006aa7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
119 .text.EM_has_deveui 00000016  00006430  00006430  00006584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.EM_has_appeui 00000016  00006446  00006446  0000659a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.EM_has_appkey 00000016  0000645c  0000645c  000065b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.EM_set_deveui 0000003a  000058ca  000058ca  00005a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.EM_get_deveui 00000030  00005cc6  00005cc6  00005e1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.EM_set_appeui 0000003a  00005904  00005904  00005a58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.EM_get_appeui 00000030  00005cf6  00005cf6  00005e4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.EM_set_appkey 0000003a  0000593e  0000593e  00005a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.EM_get_appkey 00000030  00005d26  00005d26  00005e7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.EM_set_ppmfactor 0000000e  000066a2  000066a2  000067f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.EM_get_ppmfactor 0000001e  0000620c  0000620c  00006360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.EM_set_RRL 0000000e  000066b0  000066b0  00006804  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.EM_get_RRL 0000001e  0000622a  0000622a  0000637e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.EM_set_Vcc 0000000e  000066be  000066be  00006812  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.EM_get_Vcc 0000001e  00006248  00006248  0000639c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.EM_set_collections 0000000e  000066cc  000066cc  00006820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.EM_get_collections 00000010  000065f6  000065f6  0000674a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.EM_set_heat_up_time 0000000c  00006770  00006770  000068c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.EM_get_heat_up_time 0000000c  0000677c  0000677c  000068d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.EM_set_air_pump_time 0000000c  00006788  00006788  000068dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.EM_get_air_pump_time 0000000c  00006794  00006794  000068e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.EM_set_sp_interval 0000000c  000067a0  000067a0  000068f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.EM_get_sp_interval 0000000c  000067ac  000067ac  00006900  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.EM_set_group_id 0000000c  000067b8  000067b8  0000690c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.EM_get_group_id 0000000c  000067c4  000067c4  00006918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.cb_blink 00000006  0000690e  0000690e  00006a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.blink   0000004c  00004fb4  00004fb4  00005108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.err_code 00000038  00005978  00005978  00005acc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.LED_start_try_join 0000000e  000066da  000066da  0000682e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.LED_stop_try_join 00000010  00006606  00006606  0000675a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.LED_join_success 00000040  0000566a  0000566a  000057be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.LED_join_denied 00000008  000068c2  000068c2  00006a16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.LED_conf_err 00000008  000068ca  000068ca  00006a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.LED_fatal_err 00000008  000068d2  000068d2  00006a26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .bss.cbPointer 00000001  00800fa1  00800fa1  00006aaf  2**0
                  ALLOC
154 .progmemx.data 00000058  00000814  00000814  00000968  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
155 .text.parse_err 00000058  00004b3a  00004b3a  00004c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.JN_join_network 000002a4  0000166e  0000166e  000017c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.set_block_uplink 00000018  000063e8  000063e8  0000653c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.cb_block_uplink 0000001c  000062dc  000062dc  00006430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.LM_join_network 00000006  00006914  00006914  00006a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.LM_send_uplink 0000002e  00005ea2  00005ea2  00005ff6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.LM_put_to_sleep 00000012  0000659e  0000659e  000066f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.LM_wake_up 00000006  0000691a  0000691a  00006a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text.LM_is_free 0000000a  00006860  00006860  000069b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.LM_reset_module 00000006  00006920  00006920  00006a74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.LM_forward_msg 00000006  00006926  00006926  00006a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.LM_send_break 00000006  0000692c  0000692c  00006a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.subPointer 00000001  00800fa2  00800fa2  00006aaf  2**0
                  ALLOC
168 .bss.busy     00000001  00800fa3  00800fa3  00006aaf  2**0
                  ALLOC
169 .bss.cnt      00000001  00800fa4  00800fa4  00006aaf  2**0
                  ALLOC
170 .progmemx.data 00000073  000007a1  000007a1  000008f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
171 .text.tohex   00000084  000040ec  000040ec  00004240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 .text.attach_ending 0000001c  000062f8  000062f8  0000644c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.cmd_with_ending 00000032  00005c00  00005c00  00005d54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.sys_sleep_cmd 0000005e  0000496e  0000496e  00004ac2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.mac_set_parameter 0000004e  00004ecc  00004ecc  00005020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.mac_set_deveui 00000048  000052a2  000052a2  000053f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.mac_set_appeui 00000048  000052ea  000052ea  0000543e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.mac_set_appkey 00000048  00005332  00005332  00005486  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.mac_set_ADR 00000030  00005d56  00005d56  00005eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.mac_tx_confirmed 000000ac  0000391a  0000391a  00003a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .progmemx.data 00000038  0000086c  0000086c  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
182 .text.decode_tx_response 00000068  00004838  00004838  0000498c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.SU_send_uplink 000000f8  00002e7c  00002e7c  00002fd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.cb_counter 00000014  00006566  00006566  000066ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.SC_put_to_sleep 00000038  000059b0  000059b0  00005b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .progmemx.data 00000003  000008c9  000008c9  00000a1d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
187 .text.SC_wake_up 0000006e  000046f4  000046f4  00004848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .bss.eventPointer 00000001  00800fa5  00800fa5  00006aaf  2**0
                  ALLOC
189 .bss.cnt      00000002  00800f85  00800f85  00006aaf  2**0
                  ALLOC
190 .text.cb_watchdog_counter 0000000c  000067d0  000067d0  00006924  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.util_setPendingStates 0000000c  000067dc  000067dc  00006930  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.util_setMatchCase 0000000c  000067e8  000067e8  0000693c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.util_strbeginswith 0000004a  00005210  00005210  00005364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .text.util_matchMessage 0000005c  00004a2a  00004a2a  00004b7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .progmemx.data 00000013  000008a4  000008a4  000009f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
196 .text.util_reset_module 00000046  00005406  00005406  0000555a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.util_lora_forward_msg 00000078  00004266  00004266  000043ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.util_send_break 00000008  000068da  000068da  00006a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .bss.wd_cb_pointer 00000001  00800fa6  00800fa6  00006aaf  2**0
                  ALLOC
200 .bss.wd_cnt   00000001  00800fa7  00800fa7  00006aaf  2**0
                  ALLOC
201 .text.MRPP_init_group 0000001a  00006382  00006382  000064d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.MRPP_add_collection_data_INT16 00000070  000045a6  000045a6  000046fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.MRPP_is_body_package_ready 00000022  00006082  00006082  000061d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.MRPP_get_ready_body_package 00000096  00003d8c  00003d8c  00003ee0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.MRPP_set_body_sent 0000000c  000067f4  000067f4  00006948  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.MRPP_get_header_package 00000022  000060a4  000060a4  000061f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.MRPP_get_tail_package 00000022  000060c6  000060c6  0000621a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.MRPP_all_body_package_sent 0000000a  0000686a  0000686a  000069be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.mrpp_data_add_int16 00000092  00003eb8  00003eb8  0000400c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.mrpp_data_get 00000030  00005d86  00005d86  00005eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.add_data_types 000000d8  00003224  00003224  00003378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.update_bodies 00000162  000020ca  000020ca  0000221e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.mrpp_state_init 0000014a  0000222c  0000222c  00002380  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.mrpp_state_get_header 000000a2  00003bb2  00003bb2  00003d06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.mrpp_state_get_tail 000000a4  000039c6  000039c6  00003b1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.mrpp_state_set_collection 00000086  00004066  00004066  000041ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.mrpp_state_is_body_ready 00000030  00005db6  00005db6  00005f0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.mrpp_state_all_bodies_sent 0000002a  00005f2a  00005f2a  0000607e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.mrpp_state_get_ready_body 000000f0  00002f74  00002f74  000030c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.mrpp_state_set_body_sent 00000020  000061ae  000061ae  00006302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.mrpp_state_get_collection_address 00000036  00005a8e  00005a8e  00005be2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.cb_cnt_time 00000030  00005de6  00005de6  00005f3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.PUMP_start 00000024  00005ff4  00005ff4  00006148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.PUMP_is_done 0000001c  00006314  00006314  00006468  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .bss.eventPointer 00000001  00800fa8  00800fa8  00006aaf  2**0
                  ALLOC
226 .bss.cnt      00000002  00800f87  00800f87  00006aaf  2**0
                  ALLOC
227 .bss._seconds 00000002  00800f89  00800f89  00006aaf  2**0
                  ALLOC
228 .text.datetime_to_BCD 00000100  00002b7e  00002b7e  00002cd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 .text.RTC_set_clock_out 00000050  00004d90  00004d90  00004ee4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 .text.RTC_clear_wake_up_interrupt 00000034  00005b66  00005b66  00005cba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 .text.RTC_get_current_time 00000140  00002376  00002376  000024ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 .rodata       00000005  00800f5a  00006946  00006a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
233 .text.RTC_set_wake_up_interrupt_minutes 000000c4  00003572  00003572  000036c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 .text.RTC_set_current_time 00000068  000048a0  000048a0  000049f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 .text.RTC_datetime_to_ts 00000122  00002720  00002720  00002874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 .progmemx.data.CMD_READ_TIME_POINTER 00000001  000008ce  000008ce  00000a22  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
237 .text.bytes_2_uint 0000001a  0000639c  0000639c  000064f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 .text.init_measurement 00000038  000059e8  000059e8  00005b3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 .text.validate_data 00000032  00005c32  00005c32  00005d86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 .text.read_value 000000a2  00003c54  00003c54  00003da8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 .text.vect_SCD_do_sample 00000046  0000544c  0000544c  000055a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 .text.SCD30_sensor_on 00000022  000060e8  000060e8  0000623c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 .text.SCD30_sensor_off 00000008  000068e2  000068e2  00006a36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 .text.SCD30_init_sampling 00000022  0000610a  0000610a  0000625e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 .text.SCD30_deinit_sampling 0000000e  000066e8  000066e8  0000683c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 .text.SCD30_start_sampling 0000000a  00006874  00006874  000069c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 .text.SCD30_is_sampling_done 0000001c  00006330  00006330  00006484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 .text.SCD30_get_reading 0000001a  000063b6  000063b6  0000650a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 .bss.cntSamples 00000002  00800f8b  00800f8b  00006aaf  2**0
                  ALLOC
250 .bss._data    00000002  00800f8d  00800f8d  00006aaf  2**0
                  ALLOC
251 .bss._nSamples 00000002  00800f8f  00800f8f  00006aaf  2**0
                  ALLOC
252 .progmemx.data.READ_DATA_CMD 00000002  000008cc  000008cc  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
253 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  000008bf  000008bf  00000a13  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
254 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  000008c4  000008c4  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
255 .text.parse_cmd 00000030  00005e16  00005e16  00005f6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 .text.validate_cmd 00000056  00004c40  00004c40  00004d94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 .progmemx.data 000000ac  000005c9  000005c9  0000071d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
258 .text.CONF_enter 0000013c  000024b6  000024b6  0000260a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
259 .progmemx.data 00000081  00000720  00000720  00000874  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
260 .text.CON_RN2483_parse 0000006c  00004762  00004762  000048b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
261 .text.CON_RN2483 00000166  00001f64  00001f64  000020b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 .text.CONNECT 00000054  00004cea  00004cea  00004e3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 .progmemx.data 00000188  00000441  00000441  00000595  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
264 .text.read_cols 000000bc  00003636  00003636  0000378a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 .text.read_time 00000092  00003f4a  00003f4a  0000409e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 .text.write_deveui 00000078  000042de  000042de  00004432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
267 .text.write_appeui 00000078  00004356  00004356  000044aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 .text.write_appkey 00000078  000043ce  000043ce  00004522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 .text.write_PPM_factor 0000004c  00005000  00005000  00005154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 .text.write_RRL 0000004c  0000504c  0000504c  000051a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 .text.write_VCC 0000004c  00005098  00005098  000051ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 .text.get_time_par 00000034  00005b9a  00005b9a  00005cee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 .text.write_cols 0000012e  000025f2  000025f2  00002746  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 .text.write_heat_up 0000004c  000050e4  000050e4  00005238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 .text.write_air_pump 00000050  00004de0  00004de0  00004f34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 .text.write_sp_interval 0000004c  00005130  00005130  00005284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 .text.write_reset 000000e2  00003064  00003064  000031b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 .text.write_time 000000fe  00002d7e  00002d7e  00002ed2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 .text.handle_read 000002a2  00001912  00001912  00001a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 .text.handle_write 00000200  00001bb4  00001bb4  00001d08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 .bss.arg      00000050  00800e80  00800e80  00006aaf  2**0
                  ALLOC
282 .progmemx.data 000000ab  00000675  00000675  000007c9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
283 .text.handle_methane 0000011a  00002842  00002842  00002996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 .text.handle_co2 000000a4  00003a6a  00003a6a  00003bbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 .text.handle_pump 000000a4  00003b0e  00003b0e  00003c62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 .text.handle_sample 000000b8  000037ae  000037ae  00003902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 .text.init_methane_SCD30 00000028  00005fa4  00005fa4  000060f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 .bss.par      00000014  00800f14  00800f14  00006aaf  2**0
                  ALLOC
289 .text.count_parameters 00000052  00004d3e  00004d3e  00004e92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 .text.par_index 00000070  00004616  00004616  0000476a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 .text.get_parameter 00000096  00003e22  00003e22  00003f76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 .text.decode_stage_response 00000016  00006472  00006472  000065c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
293 .text.decode_join_response 0000001c  0000634c  0000634c  000064a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 .text.decode_header_tail_response 0000001e  00006266  00006266  000063ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 .text.read_eeprom 0000005a  00004ae0  00004ae0  00004c34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 .text.join_lora 00000012  000065b0  000065b0  00006704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 .text.set_wakeup 0000000a  0000687e  0000687e  000069d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 .text.send_header 0000003e  000056ea  000056ea  0000583e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
299 .text.send_body 00000040  000056aa  000056aa  000057fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 .text.decode_body_response 00000028  00005fcc  00005fcc  00006120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
301 .text.send_tail 0000003e  00005728  00005728  0000587c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 .text.send_msg 00000018  00006400  00006400  00006554  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
303 .progmemx.data 000001dd  00000264  00000264  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
304 .text.stage_0 000000d4  000032fc  000032fc  00003450  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
305 .text.stage_1 00000100  00002c7e  00002c7e  00002dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
306 .text.stage_2 0000011a  0000295c  0000295c  00002ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
307 .text.stage_3 00000108  00002a76  00002a76  00002bca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
308 .text.MAINPG_start 0000037e  00001014  00001014  00001168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
309 .bss.fromSleep 00000001  00800fa9  00800fa9  00006aaf  2**0
                  ALLOC
310 .bss.samplingProcessInterval 00000001  00800faa  00800faa  00006aaf  2**0
                  ALLOC
311 .data.methHeatUpTime 00000001  00800fab  000008cf  00000a23  2**0
                  CONTENTS, ALLOC, LOAD, DATA
312 .data.airPumpTime 00000002  00800f91  00006957  00006aab  2**0
                  CONTENTS, ALLOC, LOAD, DATA
313 .bss.ppmx     00000004  00800f6b  00800f6b  00006aaf  2**0
                  ALLOC
314 .bss.rrlx     00000004  00800f6f  00800f6f  00006aaf  2**0
                  ALLOC
315 .bss.vccx     00000004  00800f73  00800f73  00006aaf  2**0
                  ALLOC
316 .bss.cols     00000023  00800ed0  00800ed0  00006aaf  2**0
                  ALLOC
317 .bss.appkey   00000021  00800ef3  00800ef3  00006aaf  2**0
                  ALLOC
318 .bss.appeui   00000011  00800f28  00800f28  00006aaf  2**0
                  ALLOC
319 .bss.deveui   00000011  00800f39  00800f39  00006aaf  2**0
                  ALLOC
320 .bss.dt       00000006  00800f54  00800f54  00006aaf  2**0
                  ALLOC
321 .bss.ts       00000004  00800f77  00800f77  00006aaf  2**0
                  ALLOC
322 .bss.meth_data 00000258  00800872  00800872  00006aaf  2**0
                  ALLOC
323 .bss.co2_data 00000258  00800aca  00800aca  00006aaf  2**0
                  ALLOC
324 .data.bodyIndex 00000002  00800f93  00006959  00006aad  2**0
                  CONTENTS, ALLOC, LOAD, DATA
325 .bss.state_s3 00000001  00800fac  00800fac  00006aaf  2**0
                  ALLOC
326 .bss.state_s2 00000001  00800fad  00800fad  00006aaf  2**0
                  ALLOC
327 .bss.state_s1 00000001  00800fae  00800fae  00006aaf  2**0
                  ALLOC
328 .bss.state_s0 00000001  00800faf  00800faf  00006aaf  2**0
                  ALLOC
329 .text.calc_crc8 00000036  00005ac4  00005ac4  00005c18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
330 .text.get_decimal 000000b4  00003866  00003866  000039ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
331 .text.str2flaot 0000004e  00004f1a  00004f1a  0000506e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
332 .text.is_float 00000058  00004b92  00004b92  00004ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
333 .text.avrlibc.fplib 0000000e  000066f6  000066f6  0000684a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
334 .text.avrlibc.fplib 000000ce  000034a4  000034a4  000035f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
335 .text.avrlibc.fplib 00000008  000068ea  000068ea  00006a3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
336 .text.avrlibc.fplib 000000de  00003146  00003146  0000329a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
337 .text.avrlibc.fplib 0000005e  000049cc  000049cc  00004b20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
338 .text.avrlibc.fplib 0000007a  000041ec  000041ec  00004340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
339 .text.avrlibc.fplib 0000000c  00006800  00006800  00006954  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
340 .text.avrlibc.fplib 00000006  00006932  00006932  00006a86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
341 .text.avrlibc.fplib 0000000e  00006704  00006704  00006858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
342 .text.avrlibc.fplib 0000000e  00006712  00006712  00006866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
343 .text.avrlibc.fplib 00000022  0000612c  0000612c  00006280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 .text.avrlibc.fplib 00000044  000054d8  000054d8  0000562c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 .text.avrlibc.fplib 0000000e  00006720  00006720  00006874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 .text.avrlibc.fplib 00000008  000068f2  000068f2  00006a46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 .text.avrlibc.fplib 000000d4  000033d0  000033d0  00003524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 .progmemx.data 00000008  000008b7  000008b7  00000a0b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
349 .text.avrlibc 00000744  000008d0  000008d0  00000a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
350 .text.libgcc  0000000c  0000680c  0000680c  00006960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 .text.libgcc.mul 0000001e  00006284  00006284  000063d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
352 .text.libgcc.prologue 00000038  00005a20  00005a20  00005b74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
353 .text.libgcc.prologue 00000036  00005afa  00005afa  00005c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
354 .text.avrlibc 00000008  000068fa  000068fa  00006a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
355 .text.avrlibc 0000000e  0000672e  0000672e  00006882  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
356 .text.avrlibc 000002dc  00001392  00001392  000014e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 .text.avrlibc 000001b0  00001db4  00001db4  00001f08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
358 .text.avrlibc 00000012  000065c2  000065c2  00006716  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 .text.avrlibc 00000032  00005c64  00005c64  00005db8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
360 .text.avrlibc 0000002e  00005ed0  00005ed0  00006024  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
361 .text.avrlibc 00000042  00005628  00005628  0000577c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 .text.avrlibc 0000006a  000047ce  000047ce  00004922  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
363 .text.avrlibc 0000002c  00005efe  00005efe  00006052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
364 .text.avrlibc 0000001e  000062a2  000062a2  000063f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
365 .text.avrlibc 00000036  00005b30  00005b30  00005c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
366 .text.avrlibc 00000078  00004446  00004446  0000459a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
367 .text.avrlibc 00000046  00005492  00005492  000055e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
368 .text.avrlibc 000000bc  000036f2  000036f2  00003846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
369 .text.avrlibc 00000006  00006938  00006938  00006a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 .text.avrlibc 00000024  00006018  00006018  0000616c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
371 .text.avrlibc 00000012  000065d4  000065d4  00006728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
372 .text.avrlibc 0000000e  0000673c  0000673c  00006890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
373 .text.avrlibc 0000000e  0000674a  0000674a  0000689e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
374 .text.avrlibc 00000044  0000551c  0000551c  00005670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
375 .text.avrlibc 00000024  0000603c  0000603c  00006190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
376 .text.avrlibc 00000018  00006418  00006418  0000656c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
377 .text.avrlibc 0000000c  00006818  00006818  0000696c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
378 .text.libgcc.mul 00000020  000061ce  000061ce  00006322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
379 .text.libgcc.div 00000044  00005560  00005560  000056b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
380 .text.libgcc.mul 00000016  00006488  00006488  000065dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
381 .text.libgcc  0000000a  00006888  00006888  000069dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 08 01 	jmp	0x210	; 0x210 <__ctors_end>
   4:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
   8:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
   c:	0c 94 81 32 	jmp	0x6502	; 0x6502 <__vector_3>
  10:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  14:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  18:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  1c:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  20:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  24:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__vector_9>
  28:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  2c:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  30:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  34:	0c 94 3f 27 	jmp	0x4e7e	; 0x4e7e <__vector_13>
  38:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  3c:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  40:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__vector_16>
  44:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  48:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  4c:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  50:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__vector_20>
  54:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  58:	0c 94 be 28 	jmp	0x517c	; 0x517c <__vector_22>
  5c:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  60:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  64:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  68:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  6c:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  70:	0c 94 99 22 	jmp	0x4532	; 0x4532 <__vector_28>
  74:	0c 94 9f 34 	jmp	0x693e	; 0x693e <__bad_interrupt>
  78:	0c 94 e3 28 	jmp	0x51c6	; 0x51c6 <__vector_30>
  7c:	55 0b       	sbc	r21, r21
  7e:	65 0c       	add	r6, r5
  80:	74 0b       	sbc	r23, r20
  82:	92 0b       	sbc	r25, r18
  84:	b2 0b       	sbc	r27, r18
  86:	d2 0b       	sbc	r29, r18
  88:	f2 0b       	sbc	r31, r18
  8a:	12 0c       	add	r1, r2
  8c:	30 0c       	add	r3, r0
  8e:	4e 0c       	add	r4, r14
  90:	60 0c       	add	r6, r0
  92:	76 0c       	add	r7, r6
  94:	78 0c       	add	r7, r8
  96:	76 12       	cpse	r7, r22
  98:	8d 12       	cpse	r8, r29
  9a:	e9 12       	cpse	r14, r25
  9c:	96 12       	cpse	r9, r22
  9e:	f2 12       	cpse	r15, r18
  a0:	db 12       	cpse	r13, r27
  a2:	e2 12       	cpse	r14, r18
  a4:	a6 12       	cpse	r10, r22
  a6:	b2 12       	cpse	r11, r18
  a8:	be 12       	cpse	r11, r30
  aa:	c8 12       	cpse	r12, r24
  ac:	d4 12       	cpse	r13, r20
  ae:	c4 0f       	add	r28, r20
  b0:	d1 0f       	add	r29, r17
  b2:	db 0f       	add	r29, r27
  b4:	e1 0f       	add	r30, r17
  b6:	10 10       	cpse	r1, r0
  b8:	3b 10       	cpse	r3, r11
  ba:	54 10       	cpse	r5, r4
  bc:	35 08       	sbc	r3, r5
  be:	64 08       	sbc	r6, r4
  c0:	7f 08       	sbc	r7, r15
  c2:	90 08       	sbc	r9, r0
  c4:	a4 08       	sbc	r10, r4
  c6:	a4 09       	sbc	r26, r4
  c8:	99 08       	sbc	r9, r9
  ca:	dd 08       	sbc	r13, r13
  cc:	f4 08       	sbc	r15, r4
  ce:	e9 08       	sbc	r14, r9
  d0:	b8 08       	sbc	r11, r8
  d2:	ff 08       	sbc	r15, r15
  d4:	10 09       	sbc	r17, r0
  d6:	22 09       	sbc	r18, r2
  d8:	2a 09       	sbc	r18, r10
  da:	32 09       	sbc	r19, r2
  dc:	3a 09       	sbc	r19, r10
  de:	42 09       	sbc	r20, r2
  e0:	5e 09       	sbc	r21, r14
  e2:	65 09       	sbc	r22, r5
  e4:	77 09       	sbc	r23, r7
  e6:	96 09       	sbc	r25, r6
  e8:	b2 09       	sbc	r27, r2
  ea:	bd 09       	sbc	r27, r13

000000ec <.dinit>:
  ec:	01 00       	.word	0x0001	; ????
  ee:	0f 5a       	subi	r16, 0xAF	; 175
  f0:	80 0f       	add	r24, r16
  f2:	5a 0f       	add	r21, r26
  f4:	6b 00       	.word	0x006b	; ????
  f6:	69 46       	sbci	r22, 0x69	; 105
  f8:	0f 6b       	ori	r16, 0xBF	; 191
  fa:	0f 91       	pop	r16
  fc:	80 0f       	add	r24, r16
  fe:	91 0f       	add	r25, r17
 100:	95 00       	.word	0x0095	; ????
 102:	69 57       	subi	r22, 0x79	; 121
 104:	0f 95 0f ab 	call	0x43561e	; 0x43561e <__TEXT_REGION_LENGTH__+0x42561e>
 108:	80 0f       	add	r24, r16
 10a:	ab 0f       	add	r26, r27
 10c:	ac 00       	.word	0x00ac	; ????
 10e:	08 cf       	rjmp	.-496    	; 0xffffff20 <__eeprom_end+0xff7eff20>
 110:	0f ac       	ldd	r0, Y+63	; 0x3f
 112:	0f b0       	in	r0, 0x0f	; 15
 114:	80 00       	.word	0x0080	; ????

00000116 <__trampolines_end>:
 116:	00 40       	sbci	r16, 0x00	; 0
 118:	7a 10       	cpse	r7, r10
 11a:	f3 5a       	subi	r31, 0xA3	; 163
 11c:	00 a0       	ldd	r0, Z+32	; 0x20
 11e:	72 4e       	sbci	r23, 0xE2	; 226
 120:	18 09       	sbc	r17, r8
 122:	00 10       	cpse	r0, r0
 124:	a5 d4       	rcall	.+2378   	; 0xa70 <vfprintf+0x1a0>
 126:	e8 00       	.word	0x00e8	; ????
 128:	00 e8       	ldi	r16, 0x80	; 128
 12a:	76 48       	sbci	r23, 0x86	; 134
 12c:	17 00       	.word	0x0017	; ????
 12e:	00 e4       	ldi	r16, 0x40	; 64
 130:	0b 54       	subi	r16, 0x4B	; 75
 132:	02 00       	.word	0x0002	; ????
 134:	00 ca       	rjmp	.-3072   	; 0xfffff536 <__eeprom_end+0xff7ef536>
 136:	9a 3b       	cpi	r25, 0xBA	; 186
 138:	00 00       	nop
 13a:	00 e1       	ldi	r16, 0x10	; 16
 13c:	f5 05       	cpc	r31, r5
 13e:	00 00       	nop
 140:	80 96       	adiw	r24, 0x20	; 32
 142:	98 00       	.word	0x0098	; ????
 144:	00 00       	nop
 146:	40 42       	sbci	r20, 0x20	; 32
 148:	0f 00       	.word	0x000f	; ????
 14a:	00 00       	nop
 14c:	a0 86       	std	Z+8, r10	; 0x08
 14e:	01 00       	.word	0x0001	; ????
 150:	00 00       	nop
 152:	10 27       	eor	r17, r16
 154:	00 00       	nop
 156:	00 00       	nop
 158:	e8 03       	fmulsu	r22, r16
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	64 00       	.word	0x0064	; ????
 160:	00 00       	nop
 162:	00 00       	nop
 164:	0a 00       	.word	0x000a	; ????
 166:	00 00       	nop
 168:	00 00       	nop
 16a:	01 00       	.word	0x0001	; ????
 16c:	00 00       	nop
 16e:	00 00       	nop
 170:	2c 76       	andi	r18, 0x6C	; 108
 172:	d8 88       	ldd	r13, Y+16	; 0x10
 174:	dc 67       	ori	r29, 0x7C	; 124
 176:	4f 08       	sbc	r4, r15
 178:	23 df       	rcall	.-442    	; 0xffffffc0 <__eeprom_end+0xff7effc0>
 17a:	c1 df       	rcall	.-126    	; 0xfe <.dinit+0x12>
 17c:	ae 59       	subi	r26, 0x9E	; 158
 17e:	e1 b1       	in	r30, 0x01	; 1
 180:	b7 96       	adiw	r30, 0x27	; 39
 182:	e5 e3       	ldi	r30, 0x35	; 53
 184:	e4 53       	subi	r30, 0x34	; 52
 186:	c6 3a       	cpi	r28, 0xA6	; 166
 188:	e6 51       	subi	r30, 0x16	; 22
 18a:	99 76       	andi	r25, 0x69	; 105
 18c:	96 e8       	ldi	r25, 0x86	; 134
 18e:	e6 c2       	rjmp	.+1484   	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 190:	84 26       	eor	r8, r20
 192:	eb 89       	ldd	r30, Y+19	; 0x13
 194:	8c 9b       	sbis	0x11, 4	; 17
 196:	62 ed       	ldi	r22, 0xD2	; 210
 198:	40 7c       	andi	r20, 0xC0	; 192
 19a:	6f fc       	.word	0xfc6f	; ????
 19c:	ef bc       	out	0x2f, r14	; 47
 19e:	9c 9f       	mul	r25, r28
 1a0:	40 f2       	brcs	.-112    	; 0x132 <__trampolines_end+0x1c>
 1a2:	ba a5       	ldd	r27, Y+42	; 0x2a
 1a4:	6f a5       	ldd	r22, Y+47	; 0x2f
 1a6:	f4 90       	lpm	r15, Z
 1a8:	05 5a       	subi	r16, 0xA5	; 165
 1aa:	2a f7       	brpl	.-54     	; 0x176 <__trampolines_end+0x60>
 1ac:	5c 93       	st	X, r21
 1ae:	6b 6c       	ori	r22, 0xCB	; 203
 1b0:	f9 67       	ori	r31, 0x79	; 121
 1b2:	6d c1       	rjmp	.+730    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 1b4:	1b fc       	.word	0xfc1b	; ????
 1b6:	e0 e4       	ldi	r30, 0x40	; 64
 1b8:	0d 47       	sbci	r16, 0x7D	; 125
 1ba:	fe f5       	brtc	.+126    	; 0x23a <__do_copy_data+0x1e>
 1bc:	20 e6       	ldi	r18, 0x60	; 96
 1be:	b5 00       	.word	0x00b5	; ????
 1c0:	d0 ed       	ldi	r29, 0xD0	; 208
 1c2:	90 2e       	mov	r9, r16
 1c4:	03 00       	.word	0x0003	; ????
 1c6:	94 35       	cpi	r25, 0x54	; 84
 1c8:	77 05       	cpc	r23, r7
 1ca:	00 80       	ld	r0, Z
 1cc:	84 1e       	adc	r8, r20
 1ce:	08 00       	.word	0x0008	; ????
 1d0:	00 20       	and	r0, r0
 1d2:	4e 0a       	sbc	r4, r30
 1d4:	00 00       	nop
 1d6:	00 c8       	rjmp	.-4096   	; 0xfffff1d8 <__eeprom_end+0xff7ef1d8>
 1d8:	0c 33       	cpi	r16, 0x3C	; 60
 1da:	33 33       	cpi	r19, 0x33	; 51
 1dc:	33 0f       	add	r19, r19
 1de:	98 6e       	ori	r25, 0xE8	; 232
 1e0:	12 83       	std	Z+2, r17	; 0x02
 1e2:	11 41       	sbci	r17, 0x11	; 17
 1e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1e6:	21 14       	cp	r2, r1
 1e8:	89 3b       	cpi	r24, 0xB9	; 185
 1ea:	e6 55       	subi	r30, 0x56	; 86
 1ec:	16 cf       	rjmp	.-468    	; 0x1a <__FUSE_REGION_LENGTH__+0x17>
 1ee:	fe e6       	ldi	r31, 0x6E	; 110
 1f0:	db 18       	sub	r13, r11
 1f2:	d1 84       	ldd	r13, Z+9	; 0x09
 1f4:	4b 38       	cpi	r20, 0x8B	; 139
 1f6:	1b f7       	brvc	.-58     	; 0x1be <__trampolines_end+0xa8>
 1f8:	7c 1d       	adc	r23, r12
 1fa:	90 1d       	adc	r25, r0
 1fc:	a4 bb       	out	0x14, r26	; 20
 1fe:	e4 24       	eor	r14, r4
 200:	20 32       	cpi	r18, 0x20	; 32
 202:	84 72       	andi	r24, 0x24	; 36
 204:	5e 22       	and	r5, r30
 206:	81 00       	.word	0x0081	; ????
 208:	c9 f1       	breq	.+114    	; 0x27c <_etext+0x18>
 20a:	24 ec       	ldi	r18, 0xC4	; 196
 20c:	a1 e5       	ldi	r26, 0x51	; 81
 20e:	3d 27       	eor	r19, r29

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d0 e1       	ldi	r29, 0x10	; 16
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61

0000021c <__do_copy_data>:
 21c:	ec ee       	ldi	r30, 0xEC	; 236
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	17 c0       	rjmp	.+46     	; 0x252 <__do_clear_bss+0x8>
 224:	b5 91       	lpm	r27, Z+
 226:	a5 91       	lpm	r26, Z+
 228:	35 91       	lpm	r19, Z+
 22a:	25 91       	lpm	r18, Z+
 22c:	05 91       	lpm	r16, Z+
 22e:	07 fd       	sbrc	r16, 7
 230:	0c c0       	rjmp	.+24     	; 0x24a <__do_clear_bss>
 232:	95 91       	lpm	r25, Z+
 234:	85 91       	lpm	r24, Z+
 236:	ef 01       	movw	r28, r30
 238:	f9 2f       	mov	r31, r25
 23a:	e8 2f       	mov	r30, r24
 23c:	05 90       	lpm	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	a2 17       	cp	r26, r18
 242:	b3 07       	cpc	r27, r19
 244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x20>
 246:	fe 01       	movw	r30, r28
 248:	04 c0       	rjmp	.+8      	; 0x252 <__do_clear_bss+0x8>

0000024a <__do_clear_bss>:
 24a:	1d 92       	st	X+, r1
 24c:	a2 17       	cp	r26, r18
 24e:	b3 07       	cpc	r27, r19
 250:	e1 f7       	brne	.-8      	; 0x24a <__do_clear_bss>
 252:	e5 31       	cpi	r30, 0x15	; 21
 254:	f4 07       	cpc	r31, r20
 256:	31 f7       	brne	.-52     	; 0x224 <__do_copy_data+0x8>
 258:	0e 94 48 2c 	call	0x5890	; 0x5890 <main>
 25c:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>

Disassembly of section .text:

0000693e <__bad_interrupt>:
    693e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

00006616 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    6616:	81 b1       	in	r24, 0x01	; 1
    6618:	88 60       	ori	r24, 0x08	; 8
    661a:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    661c:	82 b1       	in	r24, 0x02	; 2
    661e:	87 7f       	andi	r24, 0xF7	; 247
    6620:	82 b9       	out	0x02, r24	; 2
    6622:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

0000649e <PM_HAL_adc_power>:
}

void PM_HAL_adc_power(bool on){
	if(on){
    649e:	88 23       	and	r24, r24
    64a0:	21 f0       	breq	.+8      	; 0x64aa <PM_HAL_adc_power+0xc>
		set_bit(PORTA, 3);
    64a2:	82 b1       	in	r24, 0x02	; 2
    64a4:	88 60       	ori	r24, 0x08	; 8
    64a6:	82 b9       	out	0x02, r24	; 2
    64a8:	08 95       	ret
	}else{
		clear_bit(PORTA, 3);
    64aa:	82 b1       	in	r24, 0x02	; 2
    64ac:	87 7f       	andi	r24, 0xF7	; 247
    64ae:	82 b9       	out	0x02, r24	; 2
    64b0:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00006624 <PM_HAL_meth_power_init>:
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    6624:	81 b1       	in	r24, 0x01	; 1
    6626:	80 62       	ori	r24, 0x20	; 32
    6628:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    662a:	82 b1       	in	r24, 0x02	; 2
    662c:	8f 7d       	andi	r24, 0xDF	; 223
    662e:	82 b9       	out	0x02, r24	; 2
    6630:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

000064b2 <PM_HAL_meth_power>:
}

void PM_HAL_meth_power(bool on){
	if(on){
    64b2:	88 23       	and	r24, r24
    64b4:	21 f0       	breq	.+8      	; 0x64be <PM_HAL_meth_power+0xc>
		set_bit(PORTA, 5);
    64b6:	82 b1       	in	r24, 0x02	; 2
    64b8:	80 62       	ori	r24, 0x20	; 32
    64ba:	82 b9       	out	0x02, r24	; 2
    64bc:	08 95       	ret
	}else{
		clear_bit(PORTA, 5);
    64be:	82 b1       	in	r24, 0x02	; 2
    64c0:	8f 7d       	andi	r24, 0xDF	; 223
    64c2:	82 b9       	out	0x02, r24	; 2
    64c4:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00006632 <PM_HAL_SCD30_power_init>:
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    6632:	81 b1       	in	r24, 0x01	; 1
    6634:	80 61       	ori	r24, 0x10	; 16
    6636:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    6638:	82 b1       	in	r24, 0x02	; 2
    663a:	8f 7e       	andi	r24, 0xEF	; 239
    663c:	82 b9       	out	0x02, r24	; 2
    663e:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

000064c6 <PM_HAL_SCD30_power>:
}

void PM_HAL_SCD30_power(bool on){
	if(on){
    64c6:	88 23       	and	r24, r24
    64c8:	21 f0       	breq	.+8      	; 0x64d2 <PM_HAL_SCD30_power+0xc>
		set_bit(PORTA, 4);
    64ca:	82 b1       	in	r24, 0x02	; 2
    64cc:	80 61       	ori	r24, 0x10	; 16
    64ce:	82 b9       	out	0x02, r24	; 2
    64d0:	08 95       	ret
	}else{
		clear_bit(PORTA, 4);
    64d2:	82 b1       	in	r24, 0x02	; 2
    64d4:	8f 7e       	andi	r24, 0xEF	; 239
    64d6:	82 b9       	out	0x02, r24	; 2
    64d8:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power_init:

00006640 <PM_HAL_BC_power_init>:
	}
}

void PM_HAL_BC_power_init(){
	set_bit(DDRD, 4);
    6640:	8a b1       	in	r24, 0x0a	; 10
    6642:	80 61       	ori	r24, 0x10	; 16
    6644:	8a b9       	out	0x0a, r24	; 10
	clear_bit(PORTD, 4);
    6646:	8b b1       	in	r24, 0x0b	; 11
    6648:	8f 7e       	andi	r24, 0xEF	; 239
    664a:	8b b9       	out	0x0b, r24	; 11
    664c:	08 95       	ret

Disassembly of section .text.PM_HAL_BC_power:

000064da <PM_HAL_BC_power>:
}

void PM_HAL_BC_power(bool on){
	if(on){
    64da:	88 23       	and	r24, r24
    64dc:	21 f0       	breq	.+8      	; 0x64e6 <PM_HAL_BC_power+0xc>
		set_bit(PORTD, 4);
    64de:	8b b1       	in	r24, 0x0b	; 11
    64e0:	80 61       	ori	r24, 0x10	; 16
    64e2:	8b b9       	out	0x0b, r24	; 11
    64e4:	08 95       	ret
	}else{
		clear_bit(PORTD, 4);
    64e6:	8b b1       	in	r24, 0x0b	; 11
    64e8:	8f 7e       	andi	r24, 0xEF	; 239
    64ea:	8b b9       	out	0x0b, r24	; 11
    64ec:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power_init:

0000664e <PM_HAL_LED_power_init>:
	}
}

void PM_HAL_LED_power_init(){
	set_bit(DDRA, 7);
    664e:	81 b1       	in	r24, 0x01	; 1
    6650:	80 68       	ori	r24, 0x80	; 128
    6652:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 7);
    6654:	82 b1       	in	r24, 0x02	; 2
    6656:	8f 77       	andi	r24, 0x7F	; 127
    6658:	82 b9       	out	0x02, r24	; 2
    665a:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_power:

000064ee <PM_HAL_LED_power>:
}

void PM_HAL_LED_power(bool on){
	if(on){
    64ee:	88 23       	and	r24, r24
    64f0:	21 f0       	breq	.+8      	; 0x64fa <PM_HAL_LED_power+0xc>
		set_bit(PORTA, 7);
    64f2:	82 b1       	in	r24, 0x02	; 2
    64f4:	80 68       	ori	r24, 0x80	; 128
    64f6:	82 b9       	out	0x02, r24	; 2
    64f8:	08 95       	ret
	}else{
		clear_bit(PORTA, 7);
    64fa:	82 b1       	in	r24, 0x02	; 2
    64fc:	8f 77       	andi	r24, 0x7F	; 127
    64fe:	82 b9       	out	0x02, r24	; 2
    6500:	08 95       	ret

Disassembly of section .text.PM_HAL_LED_toggle:

00006892 <PM_HAL_LED_toggle>:
	}
}

void PM_HAL_LED_toggle(){
	toggle_bit(PORTA, 7);
    6892:	82 b1       	in	r24, 0x02	; 2
    6894:	80 58       	subi	r24, 0x80	; 128
    6896:	82 b9       	out	0x02, r24	; 2
    6898:	08 95       	ret

Disassembly of section .text.PM_HAL_enter_power_down:

00005766 <PM_HAL_enter_power_down>:
}

void PM_HAL_enter_power_down(){
	clear_bit(DDRB, 2); //set PB2 as input
    5766:	84 b1       	in	r24, 0x04	; 4
    5768:	8b 7f       	andi	r24, 0xFB	; 251
    576a:	84 b9       	out	0x04, r24	; 4
	
	//Set faling edge interrupt
	clear_bit(EICRA, 4);
    576c:	e9 e6       	ldi	r30, 0x69	; 105
    576e:	f0 e0       	ldi	r31, 0x00	; 0
    5770:	80 81       	ld	r24, Z
    5772:	8f 7e       	andi	r24, 0xEF	; 239
    5774:	80 83       	st	Z, r24
	set_bit(EICRA, 5);
    5776:	80 81       	ld	r24, Z
    5778:	80 62       	ori	r24, 0x20	; 32
    577a:	80 83       	st	Z, r24
	
	//Enable interrupt
	set_bit(EIMSK, 2);
    577c:	8d b3       	in	r24, 0x1d	; 29
    577e:	84 60       	ori	r24, 0x04	; 4
    5780:	8d bb       	out	0x1d, r24	; 29
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    5782:	83 b7       	in	r24, 0x33	; 51
    5784:	81 7f       	andi	r24, 0xF1	; 241
    5786:	84 60       	ori	r24, 0x04	; 4
    5788:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
    578a:	83 b7       	in	r24, 0x33	; 51
    578c:	81 60       	ori	r24, 0x01	; 1
    578e:	83 bf       	out	0x33, r24	; 51
	sei();
    5790:	78 94       	sei
	sleep_cpu();
    5792:	88 95       	sleep
	sleep_disable();
    5794:	83 b7       	in	r24, 0x33	; 51
    5796:	8e 7f       	andi	r24, 0xFE	; 254
    5798:	83 bf       	out	0x33, r24	; 51
	clear_bit(EIMSK, 2);
    579a:	8d b3       	in	r24, 0x1d	; 29
    579c:	8b 7f       	andi	r24, 0xFB	; 251
    579e:	8d bb       	out	0x1d, r24	; 29
    57a0:	08 95       	ret

Disassembly of section .text.__vector_3:

00006502 <__vector_3>:
}

ISR(INT2_vect){
    6502:	1f 92       	push	r1
    6504:	0f 92       	push	r0
    6506:	0f b6       	in	r0, 0x3f	; 63
    6508:	0f 92       	push	r0
    650a:	11 24       	eor	r1, r1
	
}
    650c:	0f 90       	pop	r0
    650e:	0f be       	out	0x3f, r0	; 63
    6510:	0f 90       	pop	r0
    6512:	1f 90       	pop	r1
    6514:	18 95       	reti

Disassembly of section .text.rn2483_init:

0000689a <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    689a:	84 b1       	in	r24, 0x04	; 4
    689c:	80 61       	ori	r24, 0x10	; 16
    689e:	84 b9       	out	0x04, r24	; 4
    68a0:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

000068a2 <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    68a2:	85 b1       	in	r24, 0x05	; 5
    68a4:	8f 7e       	andi	r24, 0xEF	; 239
    68a6:	85 b9       	out	0x05, r24	; 5
    68a8:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

000068aa <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    68aa:	85 b1       	in	r24, 0x05	; 5
    68ac:	80 61       	ori	r24, 0x10	; 16
    68ae:	85 b9       	out	0x05, r24	; 5
    68b0:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

0000665c <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    665c:	87 b1       	in	r24, 0x07	; 7
    665e:	8f 7b       	andi	r24, 0xBF	; 191
    6660:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    6662:	88 b1       	in	r24, 0x08	; 8
    6664:	8f 7b       	andi	r24, 0xBF	; 191
    6666:	88 b9       	out	0x08, r24	; 8
    6668:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00006824 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    6824:	86 b1       	in	r24, 0x06	; 6
    6826:	86 fb       	bst	r24, 6
    6828:	88 27       	eor	r24, r24
    682a:	80 f9       	bld	r24, 0
    682c:	08 95       	ret

Disassembly of section .text.TC0_HAL_init:

00006060 <TC0_HAL_init>:

static callback_ptr _cb;


void TC0_HAL_init(uint8_t match, callback_ptr cb){
	TCCR0A = 0b00000010; //Set CTC mode
    6060:	92 e0       	ldi	r25, 0x02	; 2
    6062:	94 bd       	out	0x24, r25	; 36
	TCCR0B= 0x00; //No clock (disabled)
    6064:	15 bc       	out	0x25, r1	; 37
	
	OCR0A=match-1; //Set match value
    6066:	81 50       	subi	r24, 0x01	; 1
    6068:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0; //Set counter to 0
    606a:	16 bc       	out	0x26, r1	; 38
	
	set_bit(TIMSK0, 1); //enable compare interrupt
    606c:	ee e6       	ldi	r30, 0x6E	; 110
    606e:	f0 e0       	ldi	r31, 0x00	; 0
    6070:	80 81       	ld	r24, Z
    6072:	82 60       	ori	r24, 0x02	; 2
    6074:	80 83       	st	Z, r24
	sei(); //Enable global interrupt
    6076:	78 94       	sei
	
	//Set callback
	_cb=cb;
    6078:	70 93 7c 0f 	sts	0x0F7C, r23	; 0x800f7c <_cb+0x1>
    607c:	60 93 7b 0f 	sts	0x0F7B, r22	; 0x800f7b <_cb>
    6080:	08 95       	ret

Disassembly of section .text.TC0_HAL_start:

00006902 <TC0_HAL_start>:
	
}


void TC0_HAL_start(){
	TCCR0B=0b00000110; 
    6902:	86 e0       	ldi	r24, 0x06	; 6
    6904:	85 bd       	out	0x25, r24	; 37
    6906:	08 95       	ret

Disassembly of section .text.TC0_HAL_stop:

00006942 <TC0_HAL_stop>:
}

void TC0_HAL_stop(){
	TCCR0B=0x00; 
    6942:	15 bc       	out	0x25, r1	; 37
    6944:	08 95       	ret

Disassembly of section .text.__vector_16:

00004e30 <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
    4e30:	1f 92       	push	r1
    4e32:	0f 92       	push	r0
    4e34:	0f b6       	in	r0, 0x3f	; 63
    4e36:	0f 92       	push	r0
    4e38:	11 24       	eor	r1, r1
    4e3a:	2f 93       	push	r18
    4e3c:	3f 93       	push	r19
    4e3e:	4f 93       	push	r20
    4e40:	5f 93       	push	r21
    4e42:	6f 93       	push	r22
    4e44:	7f 93       	push	r23
    4e46:	8f 93       	push	r24
    4e48:	9f 93       	push	r25
    4e4a:	af 93       	push	r26
    4e4c:	bf 93       	push	r27
    4e4e:	ef 93       	push	r30
    4e50:	ff 93       	push	r31
	_cb();
    4e52:	e0 91 7b 0f 	lds	r30, 0x0F7B	; 0x800f7b <_cb>
    4e56:	f0 91 7c 0f 	lds	r31, 0x0F7C	; 0x800f7c <_cb+0x1>
    4e5a:	09 95       	icall
}
    4e5c:	ff 91       	pop	r31
    4e5e:	ef 91       	pop	r30
    4e60:	bf 91       	pop	r27
    4e62:	af 91       	pop	r26
    4e64:	9f 91       	pop	r25
    4e66:	8f 91       	pop	r24
    4e68:	7f 91       	pop	r23
    4e6a:	6f 91       	pop	r22
    4e6c:	5f 91       	pop	r21
    4e6e:	4f 91       	pop	r20
    4e70:	3f 91       	pop	r19
    4e72:	2f 91       	pop	r18
    4e74:	0f 90       	pop	r0
    4e76:	0f be       	out	0x3f, r0	; 63
    4e78:	0f 90       	pop	r0
    4e7a:	1f 90       	pop	r1
    4e7c:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

00005a58 <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    5a58:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    5a5c:	28 e0       	ldi	r18, 0x08	; 8
    5a5e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    5a62:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match-1; //Set compare value
    5a66:	01 97       	sbiw	r24, 0x01	; 1
    5a68:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    5a6c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    5a70:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    5a74:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    5a78:	ef e6       	ldi	r30, 0x6F	; 111
    5a7a:	f0 e0       	ldi	r31, 0x00	; 0
    5a7c:	80 81       	ld	r24, Z
    5a7e:	82 60       	ori	r24, 0x02	; 2
    5a80:	80 83       	st	Z, r24
	sei();
    5a82:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    5a84:	70 93 7e 0f 	sts	0x0F7E, r23	; 0x800f7e <_cb+0x1>
    5a88:	60 93 7d 0f 	sts	0x0F7D, r22	; 0x800f7d <_cb>
    5a8c:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

00006758 <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    6758:	e1 e8       	ldi	r30, 0x81	; 129
    675a:	f0 e0       	ldi	r31, 0x00	; 0
    675c:	80 81       	ld	r24, Z
    675e:	86 60       	ori	r24, 0x06	; 6
    6760:	80 83       	st	Z, r24
    6762:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

00006764 <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    6764:	e1 e8       	ldi	r30, 0x81	; 129
    6766:	f0 e0       	ldi	r31, 0x00	; 0
    6768:	80 81       	ld	r24, Z
    676a:	88 7f       	andi	r24, 0xF8	; 248
    676c:	80 83       	st	Z, r24
    676e:	08 95       	ret

Disassembly of section .text.__vector_13:

00004e7e <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    4e7e:	1f 92       	push	r1
    4e80:	0f 92       	push	r0
    4e82:	0f b6       	in	r0, 0x3f	; 63
    4e84:	0f 92       	push	r0
    4e86:	11 24       	eor	r1, r1
    4e88:	2f 93       	push	r18
    4e8a:	3f 93       	push	r19
    4e8c:	4f 93       	push	r20
    4e8e:	5f 93       	push	r21
    4e90:	6f 93       	push	r22
    4e92:	7f 93       	push	r23
    4e94:	8f 93       	push	r24
    4e96:	9f 93       	push	r25
    4e98:	af 93       	push	r26
    4e9a:	bf 93       	push	r27
    4e9c:	ef 93       	push	r30
    4e9e:	ff 93       	push	r31
	_cb();
    4ea0:	e0 91 7d 0f 	lds	r30, 0x0F7D	; 0x800f7d <_cb>
    4ea4:	f0 91 7e 0f 	lds	r31, 0x0F7E	; 0x800f7e <_cb+0x1>
    4ea8:	09 95       	icall
    4eaa:	ff 91       	pop	r31
    4eac:	ef 91       	pop	r30
    4eae:	bf 91       	pop	r27
    4eb0:	af 91       	pop	r26
    4eb2:	9f 91       	pop	r25
    4eb4:	8f 91       	pop	r24
    4eb6:	7f 91       	pop	r23
    4eb8:	6f 91       	pop	r22
    4eba:	5f 91       	pop	r21
    4ebc:	4f 91       	pop	r20
    4ebe:	3f 91       	pop	r19
    4ec0:	2f 91       	pop	r18
    4ec2:	0f 90       	pop	r0
    4ec4:	0f be       	out	0x3f, r0	; 63
    4ec6:	0f 90       	pop	r0
    4ec8:	1f 90       	pop	r1
    4eca:	18 95       	reti

Disassembly of section .text.clear_callbacks:

0000614e <clear_callbacks>:
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    614e:	80 e0       	ldi	r24, 0x00	; 0
    6150:	09 c0       	rjmp	.+18     	; 0x6164 <clear_callbacks+0x16>
	{
		callbacks[i]=NULL;
    6152:	e8 2f       	mov	r30, r24
    6154:	f0 e0       	ldi	r31, 0x00	; 0
    6156:	ee 0f       	add	r30, r30
    6158:	ff 1f       	adc	r31, r31
    615a:	e6 5b       	subi	r30, 0xB6	; 182
    615c:	f0 4f       	sbci	r31, 0xF0	; 240
    615e:	11 82       	std	Z+1, r1	; 0x01
    6160:	10 82       	st	Z, r1
	TIMSK2=0x02;
	sei();
}

static void clear_callbacks(){
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    6162:	8f 5f       	subi	r24, 0xFF	; 255
    6164:	85 30       	cpi	r24, 0x05	; 5
    6166:	a8 f3       	brcs	.-22     	; 0x6152 <clear_callbacks+0x4>
	{
		callbacks[i]=NULL;
	}
	cbCounter=0;
    6168:	10 92 96 0f 	sts	0x0F96, r1	; 0x800f96 <cbCounter>
    616c:	08 95       	ret

Disassembly of section .text.start_timer:

000068b2 <start_timer>:
}

static void start_timer(){
	TCCR2B=0x07;
    68b2:	87 e0       	ldi	r24, 0x07	; 7
    68b4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    68b8:	08 95       	ret

Disassembly of section .text.stop_timer:

00006908 <stop_timer>:
}

static void stop_timer(){
	TCCR2B=0x00;
    6908:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
    690c:	08 95       	ret

Disassembly of section .text.TC2_HAL_init:

0000616e <TC2_HAL_init>:
static callback_ptr callbacks[MAX_CALLBACKS];
static uint8_t cbCounter=0;
static uint8_t cnt=0;

void TC2_HAL_init(){
	TCCR2A=0x02; //Set mode=CTC
    616e:	82 e0       	ldi	r24, 0x02	; 2
    6170:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	TCCR2B=0x00; //Stop timer
    6174:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
	
	//Disable async
	ASSR=0x00;
    6178:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
	
	TCNT2=0; //Set counter to 0
    617c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
	OCR2A=243; //16 Hz, 32 event pr s
    6180:	93 ef       	ldi	r25, 0xF3	; 243
    6182:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	
	//Enable interrupt
	TIMSK2=0x02;
    6186:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
	sei();
    618a:	78 94       	sei
    618c:	08 95       	ret

Disassembly of section .text.TC2_HAL_kill:

0000682e <TC2_HAL_kill>:
static void stop_timer(){
	TCCR2B=0x00;
}

void TC2_HAL_kill(){
	stop_timer();
    682e:	0e 94 84 34 	call	0x6908	; 0x6908 <stop_timer>
	clear_callbacks();
    6832:	0e 94 a7 30 	call	0x614e	; 0x614e <clear_callbacks>
    6836:	08 95       	ret

Disassembly of section .text.TC2_HAL_subscribe:

00004c96 <TC2_HAL_subscribe>:
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
    4c96:	cf 93       	push	r28
    4c98:	dc 01       	movw	r26, r24
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    4c9a:	60 91 96 0f 	lds	r22, 0x0F96	; 0x800f96 <cbCounter>
    4c9e:	65 30       	cpi	r22, 0x05	; 5
    4ca0:	00 f5       	brcc	.+64     	; 0x4ce2 <TC2_HAL_subscribe+0x4c>
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	15 c0       	rjmp	.+42     	; 0x4cd0 <TC2_HAL_subscribe+0x3a>
	
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
	{
		if(callbacks[i]==NULL){
    4ca6:	29 2f       	mov	r18, r25
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	f9 01       	movw	r30, r18
    4cac:	ee 0f       	add	r30, r30
    4cae:	ff 1f       	adc	r31, r31
    4cb0:	e6 5b       	subi	r30, 0xB6	; 182
    4cb2:	f0 4f       	sbci	r31, 0xF0	; 240
    4cb4:	40 81       	ld	r20, Z
    4cb6:	51 81       	ldd	r21, Z+1	; 0x01
    4cb8:	45 2b       	or	r20, r21
    4cba:	49 f4       	brne	.+18     	; 0x4cce <TC2_HAL_subscribe+0x38>
			callbacks[i]=cb;
    4cbc:	22 0f       	add	r18, r18
    4cbe:	33 1f       	adc	r19, r19
    4cc0:	f9 01       	movw	r30, r18
    4cc2:	e6 5b       	subi	r30, 0xB6	; 182
    4cc4:	f0 4f       	sbci	r31, 0xF0	; 240
    4cc6:	b1 83       	std	Z+1, r27	; 0x01
    4cc8:	a0 83       	st	Z, r26
			pointer=i;
    4cca:	c9 2f       	mov	r28, r25
			break;
    4ccc:	04 c0       	rjmp	.+8      	; 0x4cd6 <TC2_HAL_subscribe+0x40>
int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
	
	for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    4cce:	9f 5f       	subi	r25, 0xFF	; 255
    4cd0:	95 30       	cpi	r25, 0x05	; 5
    4cd2:	48 f3       	brcs	.-46     	; 0x4ca6 <TC2_HAL_subscribe+0x10>
	stop_timer();
	clear_callbacks();
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
    4cd4:	cf ef       	ldi	r28, 0xFF	; 255
			callbacks[i]=cb;
			pointer=i;
			break;
		}
	}
	cbCounter++;
    4cd6:	6f 5f       	subi	r22, 0xFF	; 255
    4cd8:	60 93 96 0f 	sts	0x0F96, r22	; 0x800f96 <cbCounter>
	start_timer();
    4cdc:	0e 94 59 34 	call	0x68b2	; 0x68b2 <start_timer>
	return pointer;
    4ce0:	01 c0       	rjmp	.+2      	; 0x4ce4 <TC2_HAL_subscribe+0x4e>
}

int8_t TC2_HAL_subscribe(callback_ptr cb){
	int8_t pointer=-1;
	
	if(cbCounter>= MAX_CALLBACKS) return pointer;
    4ce2:	cf ef       	ldi	r28, 0xFF	; 255
		}
	}
	cbCounter++;
	start_timer();
	return pointer;
}
    4ce4:	8c 2f       	mov	r24, r28
    4ce6:	cf 91       	pop	r28
    4ce8:	08 95       	ret

Disassembly of section .text.TC2_HAL_cancel:

00005856 <TC2_HAL_cancel>:

void TC2_HAL_cancel(int8_t pointer){
	if(callbacks[pointer]==NULL) return;
    5856:	08 2e       	mov	r0, r24
    5858:	00 0c       	add	r0, r0
    585a:	99 0b       	sbc	r25, r25
    585c:	fc 01       	movw	r30, r24
    585e:	ee 0f       	add	r30, r30
    5860:	ff 1f       	adc	r31, r31
    5862:	e6 5b       	subi	r30, 0xB6	; 182
    5864:	f0 4f       	sbci	r31, 0xF0	; 240
    5866:	20 81       	ld	r18, Z
    5868:	31 81       	ldd	r19, Z+1	; 0x01
    586a:	23 2b       	or	r18, r19
    586c:	81 f0       	breq	.+32     	; 0x588e <TC2_HAL_cancel+0x38>
	callbacks[pointer]=NULL;
    586e:	88 0f       	add	r24, r24
    5870:	99 1f       	adc	r25, r25
    5872:	fc 01       	movw	r30, r24
    5874:	e6 5b       	subi	r30, 0xB6	; 182
    5876:	f0 4f       	sbci	r31, 0xF0	; 240
    5878:	11 82       	std	Z+1, r1	; 0x01
    587a:	10 82       	st	Z, r1
	cbCounter--;
    587c:	80 91 96 0f 	lds	r24, 0x0F96	; 0x800f96 <cbCounter>
    5880:	81 50       	subi	r24, 0x01	; 1
    5882:	80 93 96 0f 	sts	0x0F96, r24	; 0x800f96 <cbCounter>
	if(cbCounter==0){
    5886:	81 11       	cpse	r24, r1
    5888:	02 c0       	rjmp	.+4      	; 0x588e <TC2_HAL_cancel+0x38>
		stop_timer();		
    588a:	0e 94 84 34 	call	0x6908	; 0x6908 <stop_timer>
    588e:	08 95       	ret

Disassembly of section .text.__vector_9:

00004170 <__vector_9>:
	}
}

ISR(TIMER2_COMPA_vect){
    4170:	1f 92       	push	r1
    4172:	0f 92       	push	r0
    4174:	0f b6       	in	r0, 0x3f	; 63
    4176:	0f 92       	push	r0
    4178:	11 24       	eor	r1, r1
    417a:	2f 93       	push	r18
    417c:	3f 93       	push	r19
    417e:	4f 93       	push	r20
    4180:	5f 93       	push	r21
    4182:	6f 93       	push	r22
    4184:	7f 93       	push	r23
    4186:	8f 93       	push	r24
    4188:	9f 93       	push	r25
    418a:	af 93       	push	r26
    418c:	bf 93       	push	r27
    418e:	cf 93       	push	r28
    4190:	ef 93       	push	r30
    4192:	ff 93       	push	r31
	cnt++;
    4194:	80 91 95 0f 	lds	r24, 0x0F95	; 0x800f95 <cnt>
    4198:	8f 5f       	subi	r24, 0xFF	; 255
    419a:	80 93 95 0f 	sts	0x0F95, r24	; 0x800f95 <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    419e:	80 32       	cpi	r24, 0x20	; 32
    41a0:	99 f4       	brne	.+38     	; 0x41c8 <__vector_9+0x58>
		cnt=0;
    41a2:	10 92 95 0f 	sts	0x0F95, r1	; 0x800f95 <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    41a6:	c0 e0       	ldi	r28, 0x00	; 0
    41a8:	0d c0       	rjmp	.+26     	; 0x41c4 <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    41aa:	ec 2f       	mov	r30, r28
    41ac:	f0 e0       	ldi	r31, 0x00	; 0
    41ae:	ee 0f       	add	r30, r30
    41b0:	ff 1f       	adc	r31, r31
    41b2:	e6 5b       	subi	r30, 0xB6	; 182
    41b4:	f0 4f       	sbci	r31, 0xF0	; 240
    41b6:	01 90       	ld	r0, Z+
    41b8:	f0 81       	ld	r31, Z
    41ba:	e0 2d       	mov	r30, r0
    41bc:	30 97       	sbiw	r30, 0x00	; 0
    41be:	09 f0       	breq	.+2      	; 0x41c2 <__vector_9+0x52>
				callbacks[i]();
    41c0:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    41c2:	cf 5f       	subi	r28, 0xFF	; 255
    41c4:	c5 30       	cpi	r28, 0x05	; 5
    41c6:	88 f3       	brcs	.-30     	; 0x41aa <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    41c8:	ff 91       	pop	r31
    41ca:	ef 91       	pop	r30
    41cc:	cf 91       	pop	r28
    41ce:	bf 91       	pop	r27
    41d0:	af 91       	pop	r26
    41d2:	9f 91       	pop	r25
    41d4:	8f 91       	pop	r24
    41d6:	7f 91       	pop	r23
    41d8:	6f 91       	pop	r22
    41da:	5f 91       	pop	r21
    41dc:	4f 91       	pop	r20
    41de:	3f 91       	pop	r19
    41e0:	2f 91       	pop	r18
    41e2:	0f 90       	pop	r0
    41e4:	0f be       	out	0x3f, r0	; 63
    41e6:	0f 90       	pop	r0
    41e8:	1f 90       	pop	r1
    41ea:	18 95       	reti

Disassembly of section .text.start_and_write_data:

00004f68 <start_and_write_data>:

/************************************************************************/
/* Local function                                                       */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    4f68:	cf 92       	push	r12
    4f6a:	df 92       	push	r13
    4f6c:	ef 92       	push	r14
    4f6e:	cf 93       	push	r28
    4f70:	df 93       	push	r29
    4f72:	6a 01       	movw	r12, r20
    4f74:	e6 2e       	mov	r14, r22
    4f76:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    4f78:	60 e0       	ldi	r22, 0x00	; 0
    4f7a:	0e 94 2d 29 	call	0x525a	; 0x525a <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    4f7e:	81 11       	cpse	r24, r1
    4f80:	13 c0       	rjmp	.+38     	; 0x4fa8 <start_and_write_data+0x40>
    4f82:	c0 e0       	ldi	r28, 0x00	; 0
    4f84:	0e c0       	rjmp	.+28     	; 0x4fa2 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    4f86:	ae 2d       	mov	r26, r14
    4f88:	c6 01       	movw	r24, r12
    4f8a:	8c 0f       	add	r24, r28
    4f8c:	91 1d       	adc	r25, r1
    4f8e:	a1 1d       	adc	r26, r1
    4f90:	fc 01       	movw	r30, r24
    4f92:	84 91       	lpm	r24, Z
    4f94:	a7 fd       	sbrc	r26, 7
    4f96:	80 81       	ld	r24, Z
    4f98:	0e 94 c7 30 	call	0x618e	; 0x618e <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    4f9c:	81 11       	cpse	r24, r1
    4f9e:	04 c0       	rjmp	.+8      	; 0x4fa8 <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    4fa0:	cf 5f       	subi	r28, 0xFF	; 255
    4fa2:	cd 17       	cp	r28, r29
    4fa4:	80 f3       	brcs	.-32     	; 0x4f86 <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
}
    4fa8:	df 91       	pop	r29
    4faa:	cf 91       	pop	r28
    4fac:	ef 90       	pop	r14
    4fae:	df 90       	pop	r13
    4fb0:	cf 90       	pop	r12
    4fb2:	08 95       	ret

Disassembly of section .text.read_and_stop:

00004a86 <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    4a86:	ef 92       	push	r14
    4a88:	ff 92       	push	r15
    4a8a:	0f 93       	push	r16
    4a8c:	1f 93       	push	r17
    4a8e:	cf 93       	push	r28
    4a90:	df 93       	push	r29
    4a92:	8c 01       	movw	r16, r24
    4a94:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    4a96:	c0 e0       	ldi	r28, 0x00	; 0
    4a98:	08 c0       	rjmp	.+16     	; 0x4aaa <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    4a9a:	78 01       	movw	r14, r16
    4a9c:	ec 0e       	add	r14, r28
    4a9e:	f1 1c       	adc	r15, r1
    4aa0:	0e 94 95 32 	call	0x652a	; 0x652a <TWI_HAL_read_byte_ack>
    4aa4:	f7 01       	movw	r30, r14
    4aa6:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    4aa8:	cf 5f       	subi	r28, 0xFF	; 255
    4aaa:	2c 2f       	mov	r18, r28
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	8d 2f       	mov	r24, r29
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	01 97       	sbiw	r24, 0x01	; 1
    4ab4:	28 17       	cp	r18, r24
    4ab6:	39 07       	cpc	r19, r25
    4ab8:	84 f3       	brlt	.-32     	; 0x4a9a <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    4aba:	8d 2f       	mov	r24, r29
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	01 97       	sbiw	r24, 0x01	; 1
    4ac0:	e8 01       	movw	r28, r16
    4ac2:	c8 0f       	add	r28, r24
    4ac4:	d9 1f       	adc	r29, r25
    4ac6:	0e 94 9f 32 	call	0x653e	; 0x653e <TWI_HAL_read_byte_nack>
    4aca:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    4acc:	0e 94 f3 32 	call	0x65e6	; 0x65e6 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    4ad0:	80 e0       	ldi	r24, 0x00	; 0
    4ad2:	df 91       	pop	r29
    4ad4:	cf 91       	pop	r28
    4ad6:	1f 91       	pop	r17
    4ad8:	0f 91       	pop	r16
    4ada:	ff 90       	pop	r15
    4adc:	ef 90       	pop	r14
    4ade:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00006516 <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6516:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    6518:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <start_and_write_data>
    651c:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    651e:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    6520:	0e 94 f3 32 	call	0x65e6	; 0x65e6 <TWI_HAL_stop>
	}
	return status;
}
    6524:	8c 2f       	mov	r24, r28
    6526:	cf 91       	pop	r28
    6528:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00006368 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    6368:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    636a:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <start_and_write_data>
    636e:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    6370:	0e 94 f3 32 	call	0x65e6	; 0x65e6 <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    6374:	c1 11       	cpse	r28, r1
    6376:	02 c0       	rjmp	.+4      	; 0x637c <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    6378:	80 e0       	ldi	r24, 0x00	; 0
    637a:	01 c0       	rjmp	.+2      	; 0x637e <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    637c:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    637e:	cf 91       	pop	r28
    6380:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00005bce <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5bce:	0f 93       	push	r16
    5bd0:	1f 93       	push	r17
    5bd2:	cf 93       	push	r28
    5bd4:	df 93       	push	r29
    5bd6:	8b 01       	movw	r16, r22
    5bd8:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    5bda:	61 e0       	ldi	r22, 0x01	; 1
    5bdc:	0e 94 2d 29 	call	0x525a	; 0x525a <TWI_HAL_start>
    5be0:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5be2:	88 23       	and	r24, r24
    5be4:	21 f0       	breq	.+8      	; 0x5bee <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    5be6:	0e 94 f3 32 	call	0x65e6	; 0x65e6 <TWI_HAL_stop>
		return status;	
    5bea:	8c 2f       	mov	r24, r28
    5bec:	04 c0       	rjmp	.+8      	; 0x5bf6 <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    5bee:	6d 2f       	mov	r22, r29
    5bf0:	c8 01       	movw	r24, r16
    5bf2:	0e 94 43 25 	call	0x4a86	; 0x4a86 <read_and_stop>
	
}
    5bf6:	df 91       	pop	r29
    5bf8:	cf 91       	pop	r28
    5bfa:	1f 91       	pop	r17
    5bfc:	0f 91       	pop	r16
    5bfe:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

00005c96 <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    5c96:	0f 93       	push	r16
    5c98:	1f 93       	push	r17
    5c9a:	cf 93       	push	r28
    5c9c:	df 93       	push	r29
    5c9e:	8b 01       	movw	r16, r22
    5ca0:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    5ca2:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <TWI_HAL_repeated_start>
    5ca6:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    5ca8:	88 23       	and	r24, r24
    5caa:	21 f0       	breq	.+8      	; 0x5cb4 <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    5cac:	0e 94 f3 32 	call	0x65e6	; 0x65e6 <TWI_HAL_stop>
		return status;
    5cb0:	8c 2f       	mov	r24, r28
    5cb2:	04 c0       	rjmp	.+8      	; 0x5cbc <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    5cb4:	6d 2f       	mov	r22, r29
    5cb6:	c8 01       	movw	r24, r16
    5cb8:	0e 94 43 25 	call	0x4a86	; 0x4a86 <read_and_stop>
	
}
    5cbc:	df 91       	pop	r29
    5cbe:	cf 91       	pop	r28
    5cc0:	1f 91       	pop	r17
    5cc2:	0f 91       	pop	r16
    5cc4:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

0000657a <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    657a:	80 e2       	ldi	r24, 0x20	; 32
    657c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    6580:	e9 eb       	ldi	r30, 0xB9	; 185
    6582:	f0 e0       	ldi	r31, 0x00	; 0
    6584:	80 81       	ld	r24, Z
    6586:	8c 7f       	andi	r24, 0xFC	; 252
    6588:	80 83       	st	Z, r24
    658a:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

0000525a <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    525a:	90 e0       	ldi	r25, 0x00	; 0
    525c:	88 0f       	add	r24, r24
    525e:	99 1f       	adc	r25, r25
    5260:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    5262:	84 ea       	ldi	r24, 0xA4	; 164
    5264:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5268:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    526c:	99 23       	and	r25, r25
    526e:	e4 f7       	brge	.-8      	; 0x5268 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    5270:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5274:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    5276:	88 30       	cpi	r24, 0x08	; 8
    5278:	99 f4       	brne	.+38     	; 0x52a0 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    527a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    527e:	84 e8       	ldi	r24, 0x84	; 132
    5280:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    5284:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    5288:	88 23       	and	r24, r24
    528a:	e4 f7       	brge	.-8      	; 0x5284 <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    528c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    5290:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    5292:	88 31       	cpi	r24, 0x18	; 24
    5294:	21 f0       	breq	.+8      	; 0x529e <TWI_HAL_start+0x44>
    5296:	80 34       	cpi	r24, 0x40	; 64
    5298:	19 f4       	brne	.+6      	; 0x52a0 <TWI_HAL_start+0x46>
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	08 95       	ret
    529e:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    52a0:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

000055a4 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	88 0f       	add	r24, r24
    55a8:	99 1f       	adc	r25, r25
    55aa:	28 2f       	mov	r18, r24
    55ac:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    55ae:	84 ea       	ldi	r24, 0xA4	; 164
    55b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    55b4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    55b8:	99 23       	and	r25, r25
    55ba:	e4 f7       	brge	.-8      	; 0x55b4 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    55bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    55c0:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    55c2:	80 31       	cpi	r24, 0x10	; 16
    55c4:	79 f4       	brne	.+30     	; 0x55e4 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    55c6:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    55ca:	84 e8       	ldi	r24, 0x84	; 132
    55cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    55d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    55d4:	88 23       	and	r24, r24
    55d6:	e4 f7       	brge	.-8      	; 0x55d0 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    55d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    55dc:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    55de:	80 34       	cpi	r24, 0x40	; 64
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <TWI_HAL_repeated_start+0x40>
    55e2:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    55e4:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

0000618e <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    618e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    6192:	84 e8       	ldi	r24, 0x84	; 132
    6194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    6198:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    619c:	88 23       	and	r24, r24
    619e:	e4 f7       	brge	.-8      	; 0x6198 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    61a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    61a4:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    61a6:	88 32       	cpi	r24, 0x28	; 40
    61a8:	09 f4       	brne	.+2      	; 0x61ac <TWI_HAL_write_byte+0x1e>
    61aa:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    61ac:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

0000652a <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    652a:	84 ec       	ldi	r24, 0xC4	; 196
    652c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    6530:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6534:	88 23       	and	r24, r24
    6536:	e4 f7       	brge	.-8      	; 0x6530 <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    6538:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    653c:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

0000653e <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    653e:	84 e8       	ldi	r24, 0x84	; 132
    6540:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    6544:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    6548:	88 23       	and	r24, r24
    654a:	e4 f7       	brge	.-8      	; 0x6544 <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    654c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    6550:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

000065e6 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    65e6:	84 e9       	ldi	r24, 0x94	; 148
    65e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    65ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    65f0:	84 fd       	sbrc	r24, 4
    65f2:	fc cf       	rjmp	.-8      	; 0x65ec <TWI_HAL_stop+0x6>
}
    65f4:	08 95       	ret

Disassembly of section .text.copy_buffer:

00005e46 <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    5e46:	bc 01       	movw	r22, r24
    5e48:	90 e0       	ldi	r25, 0x00	; 0
    5e4a:	09 c0       	rjmp	.+18     	; 0x5e5e <copy_buffer+0x18>
    5e4c:	fb 01       	movw	r30, r22
    5e4e:	e9 0f       	add	r30, r25
    5e50:	f1 1d       	adc	r31, r1
    5e52:	da 01       	movw	r26, r20
    5e54:	a0 50       	subi	r26, 0x00	; 0
    5e56:	bf 4f       	sbci	r27, 0xFF	; 255
    5e58:	2c 91       	ld	r18, X
    5e5a:	20 83       	st	Z, r18
    5e5c:	9f 5f       	subi	r25, 0xFF	; 255
    5e5e:	49 2f       	mov	r20, r25
    5e60:	50 e0       	ldi	r21, 0x00	; 0
    5e62:	20 91 98 0f 	lds	r18, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    5e66:	30 e0       	ldi	r19, 0x00	; 0
    5e68:	22 50       	subi	r18, 0x02	; 2
    5e6a:	31 09       	sbc	r19, r1
    5e6c:	42 17       	cp	r20, r18
    5e6e:	53 07       	cpc	r21, r19
    5e70:	6c f3       	brlt	.-38     	; 0x5e4c <copy_buffer+0x6>
    5e72:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

000057a2 <uart0_hal_init>:
    57a2:	e1 ec       	ldi	r30, 0xC1	; 193
    57a4:	f0 e0       	ldi	r31, 0x00	; 0
    57a6:	80 81       	ld	r24, Z
    57a8:	80 61       	ori	r24, 0x10	; 16
    57aa:	80 83       	st	Z, r24
    57ac:	80 81       	ld	r24, Z
    57ae:	88 60       	ori	r24, 0x08	; 8
    57b0:	80 83       	st	Z, r24
    57b2:	80 81       	ld	r24, Z
    57b4:	80 68       	ori	r24, 0x80	; 128
    57b6:	80 83       	st	Z, r24
    57b8:	80 81       	ld	r24, Z
    57ba:	80 64       	ori	r24, 0x40	; 64
    57bc:	80 83       	st	Z, r24
    57be:	e0 ec       	ldi	r30, 0xC0	; 192
    57c0:	f0 e0       	ldi	r31, 0x00	; 0
    57c2:	80 81       	ld	r24, Z
    57c4:	82 60       	ori	r24, 0x02	; 2
    57c6:	80 83       	st	Z, r24
    57c8:	86 e0       	ldi	r24, 0x06	; 6
    57ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    57ce:	80 e1       	ldi	r24, 0x10	; 16
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    57d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    57da:	78 94       	sei
    57dc:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

000057de <uart0_hal_send_message>:
    57de:	dc 01       	movw	r26, r24
    57e0:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    57e4:	81 11       	cpse	r24, r1
    57e6:	fc cf       	rjmp	.-8      	; 0x57e0 <uart0_hal_send_message+0x2>
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	0b c0       	rjmp	.+22     	; 0x5802 <uart0_hal_send_message+0x24>
    57ec:	29 2f       	mov	r18, r25
    57ee:	30 e0       	ldi	r19, 0x00	; 0
    57f0:	fd 01       	movw	r30, r26
    57f2:	e2 0f       	add	r30, r18
    57f4:	f3 1f       	adc	r31, r19
    57f6:	40 81       	ld	r20, Z
    57f8:	f9 01       	movw	r30, r18
    57fa:	ea 56       	subi	r30, 0x6A	; 106
    57fc:	fe 4f       	sbci	r31, 0xFE	; 254
    57fe:	40 83       	st	Z, r20
    5800:	9f 5f       	subi	r25, 0xFF	; 255
    5802:	96 17       	cp	r25, r22
    5804:	98 f3       	brcs	.-26     	; 0x57ec <uart0_hal_send_message+0xe>
    5806:	60 93 9a 0f 	sts	0x0F9A, r22	; 0x800f9a <tx_buffer_data_len>
    580a:	81 e0       	ldi	r24, 0x01	; 1
    580c:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    5810:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    5814:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    5818:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00004686 <uart0_hal_send_string>:
    4686:	6f 92       	push	r6
    4688:	7f 92       	push	r7
    468a:	8f 92       	push	r8
    468c:	cf 92       	push	r12
    468e:	df 92       	push	r13
    4690:	ef 92       	push	r14
    4692:	3b 01       	movw	r6, r22
    4694:	88 2e       	mov	r8, r24
    4696:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    469a:	81 11       	cpse	r24, r1
    469c:	fc cf       	rjmp	.-8      	; 0x4696 <uart0_hal_send_string+0x10>
    469e:	88 2d       	mov	r24, r8
    46a0:	b3 01       	movw	r22, r6
    46a2:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    46a6:	68 2f       	mov	r22, r24
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	12 c0       	rjmp	.+36     	; 0x46d0 <uart0_hal_send_string+0x4a>
    46ac:	29 2f       	mov	r18, r25
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	e8 2c       	mov	r14, r8
    46b2:	63 01       	movw	r12, r6
    46b4:	c2 0e       	add	r12, r18
    46b6:	d3 1e       	adc	r13, r19
    46b8:	e1 1c       	adc	r14, r1
    46ba:	37 fd       	sbrc	r19, 7
    46bc:	ea 94       	dec	r14
    46be:	f6 01       	movw	r30, r12
    46c0:	44 91       	lpm	r20, Z
    46c2:	e7 fc       	sbrc	r14, 7
    46c4:	40 81       	ld	r20, Z
    46c6:	f9 01       	movw	r30, r18
    46c8:	ea 56       	subi	r30, 0x6A	; 106
    46ca:	fe 4f       	sbci	r31, 0xFE	; 254
    46cc:	40 83       	st	Z, r20
    46ce:	9f 5f       	subi	r25, 0xFF	; 255
    46d0:	96 17       	cp	r25, r22
    46d2:	60 f3       	brcs	.-40     	; 0x46ac <uart0_hal_send_string+0x26>
    46d4:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <tx_buffer_data_len>
    46d8:	81 e0       	ldi	r24, 0x01	; 1
    46da:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    46de:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tx_buffer>
    46e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    46e6:	ef 90       	pop	r14
    46e8:	df 90       	pop	r13
    46ea:	cf 90       	pop	r12
    46ec:	8f 90       	pop	r8
    46ee:	7f 90       	pop	r7
    46f0:	6f 90       	pop	r6
    46f2:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

0000666a <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    666a:	90 91 97 0f 	lds	r25, 0x0F97	; 0x800f97 <rx_buffer_has_message>
    666e:	81 e0       	ldi	r24, 0x01	; 1
    6670:	91 11       	cpse	r25, r1
    6672:	01 c0       	rjmp	.+2      	; 0x6676 <uart0_hal_message_ready+0xc>
    6674:	80 e0       	ldi	r24, 0x00	; 0
}
    6676:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00006838 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    6838:	10 92 97 0f 	sts	0x0F97, r1	; 0x800f97 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    683c:	10 92 98 0f 	sts	0x0F98, r1	; 0x800f98 <rx_buffer_data_len>
    6840:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00005f54 <uart0_hal_read_message_as_str>:
	uart0_hal_clear_rx_buffer();
	return len;
}


uint8_t uart0_hal_read_message_as_str(char msg[]){
    5f54:	0f 93       	push	r16
    5f56:	1f 93       	push	r17
    5f58:	cf 93       	push	r28
    5f5a:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    5f5c:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    5f60:	c0 91 98 0f 	lds	r28, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    5f64:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    5f66:	f8 01       	movw	r30, r16
    5f68:	ec 0f       	add	r30, r28
    5f6a:	f1 1d       	adc	r31, r1
    5f6c:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    5f6e:	0e 94 1c 34 	call	0x6838	; 0x6838 <uart0_hal_clear_rx_buffer>
	return len;
}
    5f72:	8c 2f       	mov	r24, r28
    5f74:	cf 91       	pop	r28
    5f76:	1f 91       	pop	r17
    5f78:	0f 91       	pop	r16
    5f7a:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

0000537a <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    537a:	cf 93       	push	r28
    537c:	df 93       	push	r29
    537e:	1f 92       	push	r1
    5380:	cd b7       	in	r28, 0x3d	; 61
    5382:	de b7       	in	r29, 0x3e	; 62
    5384:	9a b1       	in	r25, 0x0a	; 10
    5386:	92 60       	ori	r25, 0x02	; 2
    5388:	9a b9       	out	0x0a, r25	; 10
    538a:	e1 ec       	ldi	r30, 0xC1	; 193
    538c:	f0 e0       	ldi	r31, 0x00	; 0
    538e:	90 81       	ld	r25, Z
    5390:	97 7f       	andi	r25, 0xF7	; 247
    5392:	90 83       	st	Z, r25
    5394:	9b b1       	in	r25, 0x0b	; 11
    5396:	9d 7f       	andi	r25, 0xFD	; 253
    5398:	9b b9       	out	0x0b, r25	; 11
    539a:	af e9       	ldi	r26, 0x9F	; 159
    539c:	bf e0       	ldi	r27, 0x0F	; 15
    539e:	11 97       	sbiw	r26, 0x01	; 1
    53a0:	f1 f7       	brne	.-4      	; 0x539e <uart0_hal_send_break+0x24>
    53a2:	00 c0       	rjmp	.+0      	; 0x53a4 <uart0_hal_send_break+0x2a>
    53a4:	00 00       	nop
    53a6:	90 81       	ld	r25, Z
    53a8:	98 60       	ori	r25, 0x08	; 8
    53aa:	90 83       	st	Z, r25
    53ac:	89 83       	std	Y+1, r24	; 0x01
    53ae:	61 e0       	ldi	r22, 0x01	; 1
    53b0:	ce 01       	movw	r24, r28
    53b2:	01 96       	adiw	r24, 0x01	; 1
    53b4:	0e 94 ef 2b 	call	0x57de	; 0x57de <uart0_hal_send_message>
    53b8:	0f 90       	pop	r0
    53ba:	df 91       	pop	r29
    53bc:	cf 91       	pop	r28
    53be:	08 95       	ret

Disassembly of section .text.__vector_22:

0000517c <__vector_22>:
    517c:	1f 92       	push	r1
    517e:	0f 92       	push	r0
    5180:	0f b6       	in	r0, 0x3f	; 63
    5182:	0f 92       	push	r0
    5184:	11 24       	eor	r1, r1
    5186:	8f 93       	push	r24
    5188:	ef 93       	push	r30
    518a:	ff 93       	push	r31
    518c:	e0 91 99 0f 	lds	r30, 0x0F99	; 0x800f99 <tx_buffer_cursor>
    5190:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <tx_buffer_data_len>
    5194:	e8 17       	cp	r30, r24
    5196:	58 f4       	brcc	.+22     	; 0x51ae <__vector_22+0x32>
    5198:	81 e0       	ldi	r24, 0x01	; 1
    519a:	8e 0f       	add	r24, r30
    519c:	80 93 99 0f 	sts	0x0F99, r24	; 0x800f99 <tx_buffer_cursor>
    51a0:	f0 e0       	ldi	r31, 0x00	; 0
    51a2:	ea 56       	subi	r30, 0x6A	; 106
    51a4:	fe 4f       	sbci	r31, 0xFE	; 254
    51a6:	80 81       	ld	r24, Z
    51a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    51ac:	04 c0       	rjmp	.+8      	; 0x51b6 <__vector_22+0x3a>
    51ae:	10 92 99 0f 	sts	0x0F99, r1	; 0x800f99 <tx_buffer_cursor>
    51b2:	10 92 9a 0f 	sts	0x0F9A, r1	; 0x800f9a <tx_buffer_data_len>
    51b6:	ff 91       	pop	r31
    51b8:	ef 91       	pop	r30
    51ba:	8f 91       	pop	r24
    51bc:	0f 90       	pop	r0
    51be:	0f be       	out	0x3f, r0	; 63
    51c0:	0f 90       	pop	r0
    51c2:	1f 90       	pop	r1
    51c4:	18 95       	reti

Disassembly of section .text.__vector_20:

000044be <__vector_20>:
    44be:	1f 92       	push	r1
    44c0:	0f 92       	push	r0
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	0f 92       	push	r0
    44c6:	11 24       	eor	r1, r1
    44c8:	2f 93       	push	r18
    44ca:	8f 93       	push	r24
    44cc:	9f 93       	push	r25
    44ce:	ef 93       	push	r30
    44d0:	ff 93       	push	r31
    44d2:	80 91 97 0f 	lds	r24, 0x0F97	; 0x800f97 <rx_buffer_has_message>
    44d6:	81 11       	cpse	r24, r1
    44d8:	0e c0       	rjmp	.+28     	; 0x44f6 <__vector_20+0x38>
    44da:	e0 91 98 0f 	lds	r30, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    44de:	e6 39       	cpi	r30, 0x96	; 150
    44e0:	50 f4       	brcc	.+20     	; 0x44f6 <__vector_20+0x38>
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	8e 0f       	add	r24, r30
    44e6:	80 93 98 0f 	sts	0x0F98, r24	; 0x800f98 <rx_buffer_data_len>
    44ea:	f0 e0       	ldi	r31, 0x00	; 0
    44ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    44f0:	e0 50       	subi	r30, 0x00	; 0
    44f2:	ff 4f       	sbci	r31, 0xFF	; 255
    44f4:	80 83       	st	Z, r24
    44f6:	80 91 98 0f 	lds	r24, 0x0F98	; 0x800f98 <rx_buffer_data_len>
    44fa:	83 30       	cpi	r24, 0x03	; 3
    44fc:	80 f0       	brcs	.+32     	; 0x451e <__vector_20+0x60>
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	fc 01       	movw	r30, r24
    4502:	e1 50       	subi	r30, 0x01	; 1
    4504:	ff 4f       	sbci	r31, 0xFF	; 255
    4506:	20 81       	ld	r18, Z
    4508:	2a 30       	cpi	r18, 0x0A	; 10
    450a:	49 f4       	brne	.+18     	; 0x451e <__vector_20+0x60>
    450c:	fc 01       	movw	r30, r24
    450e:	e2 50       	subi	r30, 0x02	; 2
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 81       	ld	r24, Z
    4514:	8d 30       	cpi	r24, 0x0D	; 13
    4516:	19 f4       	brne	.+6      	; 0x451e <__vector_20+0x60>
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	80 93 97 0f 	sts	0x0F97, r24	; 0x800f97 <rx_buffer_has_message>
    451e:	ff 91       	pop	r31
    4520:	ef 91       	pop	r30
    4522:	9f 91       	pop	r25
    4524:	8f 91       	pop	r24
    4526:	2f 91       	pop	r18
    4528:	0f 90       	pop	r0
    452a:	0f be       	out	0x3f, r0	; 63
    452c:	0f 90       	pop	r0
    452e:	1f 90       	pop	r1
    4530:	18 95       	reti

Disassembly of section .text.copy_buffer:

00005e74 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    5e74:	bc 01       	movw	r22, r24
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	09 c0       	rjmp	.+18     	; 0x5e8c <copy_buffer+0x18>
    5e7a:	fb 01       	movw	r30, r22
    5e7c:	e9 0f       	add	r30, r25
    5e7e:	f1 1d       	adc	r31, r1
    5e80:	da 01       	movw	r26, r20
    5e82:	a6 51       	subi	r26, 0x16	; 22
    5e84:	b2 4f       	sbci	r27, 0xF2	; 242
    5e86:	2c 91       	ld	r18, X
    5e88:	20 83       	st	Z, r18
    5e8a:	9f 5f       	subi	r25, 0xFF	; 255
    5e8c:	49 2f       	mov	r20, r25
    5e8e:	50 e0       	ldi	r21, 0x00	; 0
    5e90:	20 91 9c 0f 	lds	r18, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    5e94:	30 e0       	ldi	r19, 0x00	; 0
    5e96:	22 50       	subi	r18, 0x02	; 2
    5e98:	31 09       	sbc	r19, r1
    5e9a:	42 17       	cp	r20, r18
    5e9c:	53 07       	cpc	r21, r19
    5e9e:	6c f3       	brlt	.-38     	; 0x5e7a <copy_buffer+0x6>
    5ea0:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

0000581a <uart1_hal_init>:
    581a:	e9 ec       	ldi	r30, 0xC9	; 201
    581c:	f0 e0       	ldi	r31, 0x00	; 0
    581e:	80 81       	ld	r24, Z
    5820:	80 61       	ori	r24, 0x10	; 16
    5822:	80 83       	st	Z, r24
    5824:	80 81       	ld	r24, Z
    5826:	88 60       	ori	r24, 0x08	; 8
    5828:	80 83       	st	Z, r24
    582a:	80 81       	ld	r24, Z
    582c:	80 68       	ori	r24, 0x80	; 128
    582e:	80 83       	st	Z, r24
    5830:	80 81       	ld	r24, Z
    5832:	80 64       	ori	r24, 0x40	; 64
    5834:	80 83       	st	Z, r24
    5836:	e8 ec       	ldi	r30, 0xC8	; 200
    5838:	f0 e0       	ldi	r31, 0x00	; 0
    583a:	80 81       	ld	r24, Z
    583c:	82 60       	ori	r24, 0x02	; 2
    583e:	80 83       	st	Z, r24
    5840:	86 e0       	ldi	r24, 0x06	; 6
    5842:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    5846:	80 e1       	ldi	r24, 0x10	; 16
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    584e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    5852:	78 94       	sei
    5854:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

00003fdc <uart1_hal_send_string>:
    3fdc:	6f 92       	push	r6
    3fde:	7f 92       	push	r7
    3fe0:	8f 92       	push	r8
    3fe2:	cf 92       	push	r12
    3fe4:	df 92       	push	r13
    3fe6:	ef 92       	push	r14
    3fe8:	3b 01       	movw	r6, r22
    3fea:	88 2e       	mov	r8, r24
    3fec:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <tx_buffer_data_len>
    3ff0:	81 11       	cpse	r24, r1
    3ff2:	fc cf       	rjmp	.-8      	; 0x3fec <uart1_hal_send_string+0x10>
    3ff4:	88 2d       	mov	r24, r8
    3ff6:	b3 01       	movw	r22, r6
    3ff8:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    3ffc:	bc 01       	movw	r22, r24
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	12 c0       	rjmp	.+36     	; 0x4026 <uart1_hal_send_string+0x4a>
    4002:	29 2f       	mov	r18, r25
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	e8 2c       	mov	r14, r8
    4008:	63 01       	movw	r12, r6
    400a:	c4 0e       	add	r12, r20
    400c:	d5 1e       	adc	r13, r21
    400e:	e1 1c       	adc	r14, r1
    4010:	57 fd       	sbrc	r21, 7
    4012:	ea 94       	dec	r14
    4014:	f6 01       	movw	r30, r12
    4016:	44 91       	lpm	r20, Z
    4018:	e7 fc       	sbrc	r14, 7
    401a:	40 81       	ld	r20, Z
    401c:	f9 01       	movw	r30, r18
    401e:	ee 5d       	subi	r30, 0xDE	; 222
    4020:	f2 4f       	sbci	r31, 0xF2	; 242
    4022:	40 83       	st	Z, r20
    4024:	9f 5f       	subi	r25, 0xFF	; 255
    4026:	49 2f       	mov	r20, r25
    4028:	50 e0       	ldi	r21, 0x00	; 0
    402a:	46 17       	cp	r20, r22
    402c:	57 07       	cpc	r21, r23
    402e:	48 f3       	brcs	.-46     	; 0x4002 <uart1_hal_send_string+0x26>
    4030:	fb 01       	movw	r30, r22
    4032:	ee 5d       	subi	r30, 0xDE	; 222
    4034:	f2 4f       	sbci	r31, 0xF2	; 242
    4036:	8d e0       	ldi	r24, 0x0D	; 13
    4038:	80 83       	st	Z, r24
    403a:	fb 01       	movw	r30, r22
    403c:	ed 5d       	subi	r30, 0xDD	; 221
    403e:	f2 4f       	sbci	r31, 0xF2	; 242
    4040:	8a e0       	ldi	r24, 0x0A	; 10
    4042:	80 83       	st	Z, r24
    4044:	6e 5f       	subi	r22, 0xFE	; 254
    4046:	60 93 9e 0f 	sts	0x0F9E, r22	; 0x800f9e <tx_buffer_data_len>
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	80 93 9d 0f 	sts	0x0F9D, r24	; 0x800f9d <tx_buffer_cursor>
    4050:	80 91 22 0d 	lds	r24, 0x0D22	; 0x800d22 <tx_buffer>
    4054:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4058:	ef 90       	pop	r14
    405a:	df 90       	pop	r13
    405c:	cf 90       	pop	r12
    405e:	8f 90       	pop	r8
    4060:	7f 90       	pop	r7
    4062:	6f 90       	pop	r6
    4064:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00006678 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    6678:	90 91 9b 0f 	lds	r25, 0x0F9B	; 0x800f9b <rx_buffer_has_message>
    667c:	81 e0       	ldi	r24, 0x01	; 1
    667e:	91 11       	cpse	r25, r1
    6680:	01 c0       	rjmp	.+2      	; 0x6684 <uart1_hal_message_ready+0xc>
    6682:	80 e0       	ldi	r24, 0x00	; 0
}
    6684:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00006686 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    6686:	90 91 9c 0f 	lds	r25, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    668a:	81 e0       	ldi	r24, 0x01	; 1
    668c:	95 39       	cpi	r25, 0x95	; 149
    668e:	08 f4       	brcc	.+2      	; 0x6692 <uart1_hal_rx_full+0xc>
    6690:	80 e0       	ldi	r24, 0x00	; 0
}
    6692:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

00006842 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    6842:	10 92 9b 0f 	sts	0x0F9B, r1	; 0x800f9b <rx_buffer_has_message>
	rx_buffer_data_len=0;
    6846:	10 92 9c 0f 	sts	0x0F9C, r1	; 0x800f9c <rx_buffer_data_len>
    684a:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00005f7c <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    5f7c:	0f 93       	push	r16
    5f7e:	1f 93       	push	r17
    5f80:	cf 93       	push	r28
    5f82:	8c 01       	movw	r16, r24
    5f84:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <copy_buffer>
    5f88:	c0 91 9c 0f 	lds	r28, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    5f8c:	c2 50       	subi	r28, 0x02	; 2
    5f8e:	f8 01       	movw	r30, r16
    5f90:	ec 0f       	add	r30, r28
    5f92:	f1 1d       	adc	r31, r1
    5f94:	10 82       	st	Z, r1
    5f96:	0e 94 21 34 	call	0x6842	; 0x6842 <uart1_hal_clear_rx_buffer>
    5f9a:	8c 2f       	mov	r24, r28
    5f9c:	cf 91       	pop	r28
    5f9e:	1f 91       	pop	r17
    5fa0:	0f 91       	pop	r16
    5fa2:	08 95       	ret

Disassembly of section .text.__vector_30:

000051c6 <__vector_30>:
    51c6:	1f 92       	push	r1
    51c8:	0f 92       	push	r0
    51ca:	0f b6       	in	r0, 0x3f	; 63
    51cc:	0f 92       	push	r0
    51ce:	11 24       	eor	r1, r1
    51d0:	8f 93       	push	r24
    51d2:	ef 93       	push	r30
    51d4:	ff 93       	push	r31
    51d6:	e0 91 9d 0f 	lds	r30, 0x0F9D	; 0x800f9d <tx_buffer_cursor>
    51da:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <tx_buffer_data_len>
    51de:	e8 17       	cp	r30, r24
    51e0:	58 f4       	brcc	.+22     	; 0x51f8 <__vector_30+0x32>
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	8e 0f       	add	r24, r30
    51e6:	80 93 9d 0f 	sts	0x0F9D, r24	; 0x800f9d <tx_buffer_cursor>
    51ea:	f0 e0       	ldi	r31, 0x00	; 0
    51ec:	ee 5d       	subi	r30, 0xDE	; 222
    51ee:	f2 4f       	sbci	r31, 0xF2	; 242
    51f0:	80 81       	ld	r24, Z
    51f2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    51f6:	04 c0       	rjmp	.+8      	; 0x5200 <__vector_30+0x3a>
    51f8:	10 92 9d 0f 	sts	0x0F9D, r1	; 0x800f9d <tx_buffer_cursor>
    51fc:	10 92 9e 0f 	sts	0x0F9E, r1	; 0x800f9e <tx_buffer_data_len>
    5200:	ff 91       	pop	r31
    5202:	ef 91       	pop	r30
    5204:	8f 91       	pop	r24
    5206:	0f 90       	pop	r0
    5208:	0f be       	out	0x3f, r0	; 63
    520a:	0f 90       	pop	r0
    520c:	1f 90       	pop	r1
    520e:	18 95       	reti

Disassembly of section .text.__vector_28:

00004532 <__vector_28>:
    4532:	1f 92       	push	r1
    4534:	0f 92       	push	r0
    4536:	0f b6       	in	r0, 0x3f	; 63
    4538:	0f 92       	push	r0
    453a:	11 24       	eor	r1, r1
    453c:	2f 93       	push	r18
    453e:	8f 93       	push	r24
    4540:	9f 93       	push	r25
    4542:	ef 93       	push	r30
    4544:	ff 93       	push	r31
    4546:	80 91 9b 0f 	lds	r24, 0x0F9B	; 0x800f9b <rx_buffer_has_message>
    454a:	81 11       	cpse	r24, r1
    454c:	0e c0       	rjmp	.+28     	; 0x456a <__vector_28+0x38>
    454e:	e0 91 9c 0f 	lds	r30, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    4552:	e6 39       	cpi	r30, 0x96	; 150
    4554:	50 f4       	brcc	.+20     	; 0x456a <__vector_28+0x38>
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	8e 0f       	add	r24, r30
    455a:	80 93 9c 0f 	sts	0x0F9C, r24	; 0x800f9c <rx_buffer_data_len>
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    4564:	e6 51       	subi	r30, 0x16	; 22
    4566:	f2 4f       	sbci	r31, 0xF2	; 242
    4568:	80 83       	st	Z, r24
    456a:	80 91 9c 0f 	lds	r24, 0x0F9C	; 0x800f9c <rx_buffer_data_len>
    456e:	83 30       	cpi	r24, 0x03	; 3
    4570:	80 f0       	brcs	.+32     	; 0x4592 <__vector_28+0x60>
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	fc 01       	movw	r30, r24
    4576:	e7 51       	subi	r30, 0x17	; 23
    4578:	f2 4f       	sbci	r31, 0xF2	; 242
    457a:	20 81       	ld	r18, Z
    457c:	2a 30       	cpi	r18, 0x0A	; 10
    457e:	49 f4       	brne	.+18     	; 0x4592 <__vector_28+0x60>
    4580:	fc 01       	movw	r30, r24
    4582:	e8 51       	subi	r30, 0x18	; 24
    4584:	f2 4f       	sbci	r31, 0xF2	; 242
    4586:	80 81       	ld	r24, Z
    4588:	8d 30       	cpi	r24, 0x0D	; 13
    458a:	19 f4       	brne	.+6      	; 0x4592 <__vector_28+0x60>
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	80 93 9b 0f 	sts	0x0F9B, r24	; 0x800f9b <rx_buffer_has_message>
    4592:	ff 91       	pop	r31
    4594:	ef 91       	pop	r30
    4596:	9f 91       	pop	r25
    4598:	8f 91       	pop	r24
    459a:	2f 91       	pop	r18
    459c:	0f 90       	pop	r0
    459e:	0f be       	out	0x3f, r0	; 63
    45a0:	0f 90       	pop	r0
    45a2:	1f 90       	pop	r1
    45a4:	18 95       	reti

Disassembly of section .text.UI_HAL_jumper_init:

00006694 <UI_HAL_jumper_init>:

#include "UI_HAL.h"
#include "../../util/bit_operators.h"

void UI_HAL_jumper_init(){
	clear_bit(DDRA, 6);
    6694:	81 b1       	in	r24, 0x01	; 1
    6696:	8f 7b       	andi	r24, 0xBF	; 191
    6698:	81 b9       	out	0x01, r24	; 1
	set_bit(PORTA, 6); //Pull up, default config mode
    669a:	82 b1       	in	r24, 0x02	; 2
    669c:	80 64       	ori	r24, 0x40	; 64
    669e:	82 b9       	out	0x02, r24	; 2
    66a0:	08 95       	ret

Disassembly of section .text.UI_HAL_is_config_mode:

0000684c <UI_HAL_is_config_mode>:
}

bool UI_HAL_is_config_mode(){
	return get_bit(PINA, 6);
    684c:	80 b1       	in	r24, 0x00	; 0
}
    684e:	86 fb       	bst	r24, 6
    6850:	88 27       	eor	r24, r24
    6852:	80 f9       	bld	r24, 0
    6854:	08 95       	ret

Disassembly of section .text.main:

00005890 <main>:

int main(void)
{
	//test_runner();
	
	PM_HAL_LED_power_init();
    5890:	0e 94 27 33 	call	0x664e	; 0x664e <PM_HAL_LED_power_init>
	UI_HAL_jumper_init();
    5894:	0e 94 4a 33 	call	0x6694	; 0x6694 <UI_HAL_jumper_init>
	
	while(1)
	{
		
		if(UI_HAL_is_config_mode()){
    5898:	0e 94 26 34 	call	0x684c	; 0x684c <UI_HAL_is_config_mode>
    589c:	88 23       	and	r24, r24
    589e:	49 f0       	breq	.+18     	; 0x58b2 <main+0x22>
			PM_HAL_LED_power(true);
    58a0:	81 e0       	ldi	r24, 0x01	; 1
    58a2:	0e 94 77 32 	call	0x64ee	; 0x64ee <PM_HAL_LED_power>
			CONF_enter();
    58a6:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <CONF_enter>
			PM_HAL_LED_power(false);
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	0e 94 77 32 	call	0x64ee	; 0x64ee <PM_HAL_LED_power>
    58b0:	02 c0       	rjmp	.+4      	; 0x58b6 <main+0x26>
		}else{
			MAINPG_start();
    58b2:	0e 94 0a 08 	call	0x1014	; 0x1014 <MAINPG_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    58b6:	2f ef       	ldi	r18, 0xFF	; 255
    58b8:	81 e1       	ldi	r24, 0x11	; 17
    58ba:	9a e7       	ldi	r25, 0x7A	; 122
    58bc:	21 50       	subi	r18, 0x01	; 1
    58be:	80 40       	sbci	r24, 0x00	; 0
    58c0:	90 40       	sbci	r25, 0x00	; 0
    58c2:	e1 f7       	brne	.-8      	; 0x58bc <main+0x2c>
    58c4:	00 c0       	rjmp	.+0      	; 0x58c6 <main+0x36>
    58c6:	00 00       	nop
    58c8:	e7 cf       	rjmp	.-50     	; 0x5898 <main+0x8>

Disassembly of section .text.calc_ppm_methane:

00003cf6 <calc_ppm_methane>:
}

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/
static uint16_t calc_ppm_methane(uint16_t bit_value){
    3cf6:	8f 92       	push	r8
    3cf8:	9f 92       	push	r9
    3cfa:	af 92       	push	r10
    3cfc:	bf 92       	push	r11
    3cfe:	cf 92       	push	r12
    3d00:	df 92       	push	r13
    3d02:	ef 92       	push	r14
    3d04:	ff 92       	push	r15
	float VRL=((float)bit_value/(uint16_t)ADC_BIT_RESOLUTION)*(float)Vc;
    3d06:	bc 01       	movw	r22, r24
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__floatunsisf>
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e8       	ldi	r20, 0x80	; 128
    3d16:	59 e3       	ldi	r21, 0x39	; 57
    3d18:	0e 94 79 34 	call	0x68f2	; 0x68f2 <__mulsf3>
    3d1c:	80 90 67 0f 	lds	r8, 0x0F67	; 0x800f67 <Vc>
    3d20:	90 90 68 0f 	lds	r9, 0x0F68	; 0x800f68 <Vc+0x1>
    3d24:	a0 90 69 0f 	lds	r10, 0x0F69	; 0x800f69 <Vc+0x2>
    3d28:	b0 90 6a 0f 	lds	r11, 0x0F6A	; 0x800f6a <Vc+0x3>
    3d2c:	a5 01       	movw	r20, r10
    3d2e:	94 01       	movw	r18, r8
    3d30:	0e 94 79 34 	call	0x68f2	; 0x68f2 <__mulsf3>
    3d34:	6b 01       	movw	r12, r22
    3d36:	7c 01       	movw	r14, r24
	float Rs=(((float)Vc-(float)VRL)/(float)VRL)*(float)RRL;
    3d38:	9b 01       	movw	r18, r22
    3d3a:	ac 01       	movw	r20, r24
    3d3c:	c5 01       	movw	r24, r10
    3d3e:	b4 01       	movw	r22, r8
    3d40:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__subsf3>
    3d44:	a7 01       	movw	r20, r14
    3d46:	96 01       	movw	r18, r12
    3d48:	0e 94 75 34 	call	0x68ea	; 0x68ea <__divsf3>
    3d4c:	20 91 63 0f 	lds	r18, 0x0F63	; 0x800f63 <RRL>
    3d50:	30 91 64 0f 	lds	r19, 0x0F64	; 0x800f64 <RRL+0x1>
    3d54:	40 91 65 0f 	lds	r20, 0x0F65	; 0x800f65 <RRL+0x2>
    3d58:	50 91 66 0f 	lds	r21, 0x0F66	; 0x800f66 <RRL+0x3>
    3d5c:	0e 94 79 34 	call	0x68f2	; 0x68f2 <__mulsf3>
	uint16_t PPM=(float)Rs*(float)PPM_factor;
    3d60:	20 91 5f 0f 	lds	r18, 0x0F5F	; 0x800f5f <PPM_factor>
    3d64:	30 91 60 0f 	lds	r19, 0x0F60	; 0x800f60 <PPM_factor+0x1>
    3d68:	40 91 61 0f 	lds	r20, 0x0F61	; 0x800f61 <PPM_factor+0x2>
    3d6c:	50 91 62 0f 	lds	r21, 0x0F62	; 0x800f62 <PPM_factor+0x3>
    3d70:	0e 94 79 34 	call	0x68f2	; 0x68f2 <__mulsf3>
    3d74:	0e 94 e6 24 	call	0x49cc	; 0x49cc <__fixunssfsi>
	return PPM;
}
    3d78:	cb 01       	movw	r24, r22
    3d7a:	ff 90       	pop	r15
    3d7c:	ef 90       	pop	r14
    3d7e:	df 90       	pop	r13
    3d80:	cf 90       	pop	r12
    3d82:	bf 90       	pop	r11
    3d84:	af 90       	pop	r10
    3d86:	9f 90       	pop	r9
    3d88:	8f 90       	pop	r8
    3d8a:	08 95       	ret

Disassembly of section .text.vect_ADC_heat_timeout:

000063d0 <vect_ADC_heat_timeout>:
		TC0_HAL_stop();
	}
}

static void vect_ADC_heat_timeout(){
	cntPowerUpTime++;
    63d0:	80 91 9f 0f 	lds	r24, 0x0F9F	; 0x800f9f <cntPowerUpTime>
    63d4:	8f 5f       	subi	r24, 0xFF	; 255
    63d6:	80 93 9f 0f 	sts	0x0F9F, r24	; 0x800f9f <cntPowerUpTime>
	if(cntPowerUpTime>=_powerUpTime){
    63da:	90 91 a0 0f 	lds	r25, 0x0FA0	; 0x800fa0 <_powerUpTime>
    63de:	89 17       	cp	r24, r25
    63e0:	10 f0       	brcs	.+4      	; 0x63e6 <vect_ADC_heat_timeout+0x16>
		TC0_HAL_stop();
    63e2:	0e 94 a1 34 	call	0x6942	; 0x6942 <TC0_HAL_stop>
    63e6:	08 95       	ret

Disassembly of section .text.ADC_init_sampling:

00004908 <ADC_init_sampling>:

static void vect_ADC_do_sample();
static void vect_ADC_heat_timeout();
static uint16_t calc_ppm_methane(uint16_t bit_value);

ADC_STATUS ADC_init_sampling(uint8_t samplingInterval, uint16_t nSamples, uint16_t data[]){
    4908:	cf 93       	push	r28
	_data=data;
    490a:	50 93 82 0f 	sts	0x0F82, r21	; 0x800f82 <_data+0x1>
    490e:	40 93 81 0f 	sts	0x0F81, r20	; 0x800f81 <_data>
	_nSamples=nSamples;
    4912:	70 93 84 0f 	sts	0x0F84, r23	; 0x800f84 <_nSamples+0x1>
    4916:	60 93 83 0f 	sts	0x0F83, r22	; 0x800f83 <_nSamples>
	cntSamples=0;
    491a:	10 92 80 0f 	sts	0x0F80, r1	; 0x800f80 <cntSamples+0x1>
    491e:	10 92 7f 0f 	sts	0x0F7F, r1	; 0x800f7f <cntSamples>
	
	//Initialize timer
	TC0_HAL_init(samplingInterval, &vect_ADC_do_sample);
    4922:	60 ee       	ldi	r22, 0xE0	; 224
    4924:	79 e2       	ldi	r23, 0x29	; 41
    4926:	0e 94 30 30 	call	0x6060	; 0x6060 <TC0_HAL_init>
	
	//Test that the ADC is active on the bus
	PM_HAL_adc_power(true);
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	0e 94 4f 32 	call	0x649e	; 0x649e <PM_HAL_adc_power>
    4930:	2f ef       	ldi	r18, 0xFF	; 255
    4932:	83 ec       	ldi	r24, 0xC3	; 195
    4934:	99 e0       	ldi	r25, 0x09	; 9
    4936:	21 50       	subi	r18, 0x01	; 1
    4938:	80 40       	sbci	r24, 0x00	; 0
    493a:	90 40       	sbci	r25, 0x00	; 0
    493c:	e1 f7       	brne	.-8      	; 0x4936 <ADC_init_sampling+0x2e>
    493e:	00 c0       	rjmp	.+0      	; 0x4940 <ADC_init_sampling+0x38>
    4940:	00 00       	nop
	_delay_ms(400); 
	
	
	uint8_t status=TWI_HAL_start(ADC_SLAVE_ADDR, WRITE);
    4942:	60 e0       	ldi	r22, 0x00	; 0
    4944:	8d e4       	ldi	r24, 0x4D	; 77
    4946:	0e 94 2d 29 	call	0x525a	; 0x525a <TWI_HAL_start>
    494a:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    494c:	0e 94 f3 32 	call	0x65e6	; 0x65e6 <TWI_HAL_stop>
	
	if(status!=TWI_CODE_SUCCESS){
    4950:	cc 23       	and	r28, r28
    4952:	51 f0       	breq	.+20     	; 0x4968 <ADC_init_sampling+0x60>
		_data=NULL;
    4954:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <_data+0x1>
    4958:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <_data>
		_nSamples=0;
    495c:	10 92 84 0f 	sts	0x0F84, r1	; 0x800f84 <_nSamples+0x1>
    4960:	10 92 83 0f 	sts	0x0F83, r1	; 0x800f83 <_nSamples>
		return ADC_STATUS_FATAL_ERROR;
    4964:	82 e0       	ldi	r24, 0x02	; 2
    4966:	01 c0       	rjmp	.+2      	; 0x496a <ADC_init_sampling+0x62>
	}
	return ADC_STATUS_SUCCESS;
    4968:	80 e0       	ldi	r24, 0x00	; 0
}
    496a:	cf 91       	pop	r28
    496c:	08 95       	ret

Disassembly of section .text.ADC_deinit_sampling:

00006552 <ADC_deinit_sampling>:

void ADC_deinit_sampling(){
	TC0_HAL_stop();
    6552:	0e 94 a1 34 	call	0x6942	; 0x6942 <TC0_HAL_stop>
	PM_HAL_adc_power(false);
    6556:	80 e0       	ldi	r24, 0x00	; 0
    6558:	0e 94 4f 32 	call	0x649e	; 0x649e <PM_HAL_adc_power>
	_data=NULL;
    655c:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <_data+0x1>
    6560:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <_data>
    6564:	08 95       	ret

Disassembly of section .text.ADC_is_sampling_done:

000062c0 <ADC_is_sampling_done>:
	TC0_HAL_start();
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
    62c0:	40 91 7f 0f 	lds	r20, 0x0F7F	; 0x800f7f <cntSamples>
    62c4:	50 91 80 0f 	lds	r21, 0x0F80	; 0x800f80 <cntSamples+0x1>
    62c8:	20 91 83 0f 	lds	r18, 0x0F83	; 0x800f83 <_nSamples>
    62cc:	30 91 84 0f 	lds	r19, 0x0F84	; 0x800f84 <_nSamples+0x1>
    62d0:	81 e0       	ldi	r24, 0x01	; 1
    62d2:	42 17       	cp	r20, r18
    62d4:	53 07       	cpc	r21, r19
    62d6:	08 f4       	brcc	.+2      	; 0x62da <ADC_is_sampling_done+0x1a>
    62d8:	80 e0       	ldi	r24, 0x00	; 0
}
    62da:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00004bea <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    4bea:	0f 93       	push	r16
    4bec:	1f 93       	push	r17
    4bee:	cf 93       	push	r28
    4bf0:	df 93       	push	r29
    4bf2:	00 d0       	rcall	.+0      	; 0x4bf4 <ADC_get_value+0xa>
    4bf4:	cd b7       	in	r28, 0x3d	; 61
    4bf6:	de b7       	in	r29, 0x3e	; 62
    4bf8:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    4bfa:	8f ef       	ldi	r24, 0xFF	; 255
    4bfc:	9f ef       	ldi	r25, 0xFF	; 255
    4bfe:	f8 01       	movw	r30, r16
    4c00:	91 83       	std	Z+1, r25	; 0x01
    4c02:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    4c04:	42 e0       	ldi	r20, 0x02	; 2
    4c06:	be 01       	movw	r22, r28
    4c08:	6f 5f       	subi	r22, 0xFF	; 255
    4c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c0c:	8d e4       	ldi	r24, 0x4D	; 77
    4c0e:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4c12:	81 11       	cpse	r24, r1
    4c14:	0d c0       	rjmp	.+26     	; 0x4c30 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    4c16:	89 81       	ldd	r24, Y+1	; 0x01
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	98 2f       	mov	r25, r24
    4c1c:	88 27       	eor	r24, r24
    4c1e:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    4c20:	82 2b       	or	r24, r18
    4c22:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <calc_ppm_methane>
    4c26:	f8 01       	movw	r30, r16
    4c28:	91 83       	std	Z+1, r25	; 0x01
    4c2a:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    4c2c:	80 e0       	ldi	r24, 0x00	; 0
    4c2e:	01 c0       	rjmp	.+2      	; 0x4c32 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    4c30:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    4c32:	0f 90       	pop	r0
    4c34:	0f 90       	pop	r0
    4c36:	df 91       	pop	r29
    4c38:	cf 91       	pop	r28
    4c3a:	1f 91       	pop	r17
    4c3c:	0f 91       	pop	r16
    4c3e:	08 95       	ret

Disassembly of section .text.vect_ADC_do_sample:

000053c0 <vect_ADC_do_sample>:
	uint16_t PPM=(float)Rs*(float)PPM_factor;
	return PPM;
}

static void vect_ADC_do_sample(){
	ADC_get_value(&(_data[cntSamples++]));
    53c0:	80 91 81 0f 	lds	r24, 0x0F81	; 0x800f81 <_data>
    53c4:	90 91 82 0f 	lds	r25, 0x0F82	; 0x800f82 <_data+0x1>
    53c8:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <cntSamples>
    53cc:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <cntSamples+0x1>
    53d0:	a9 01       	movw	r20, r18
    53d2:	4f 5f       	subi	r20, 0xFF	; 255
    53d4:	5f 4f       	sbci	r21, 0xFF	; 255
    53d6:	50 93 80 0f 	sts	0x0F80, r21	; 0x800f80 <cntSamples+0x1>
    53da:	40 93 7f 0f 	sts	0x0F7F, r20	; 0x800f7f <cntSamples>
    53de:	22 0f       	add	r18, r18
    53e0:	33 1f       	adc	r19, r19
    53e2:	82 0f       	add	r24, r18
    53e4:	93 1f       	adc	r25, r19
    53e6:	0e 94 f5 25 	call	0x4bea	; 0x4bea <ADC_get_value>
	if(cntSamples>=_nSamples){
    53ea:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <cntSamples>
    53ee:	30 91 80 0f 	lds	r19, 0x0F80	; 0x800f80 <cntSamples+0x1>
    53f2:	80 91 83 0f 	lds	r24, 0x0F83	; 0x800f83 <_nSamples>
    53f6:	90 91 84 0f 	lds	r25, 0x0F84	; 0x800f84 <_nSamples+0x1>
    53fa:	28 17       	cp	r18, r24
    53fc:	39 07       	cpc	r19, r25
    53fe:	10 f0       	brcs	.+4      	; 0x5404 <vect_ADC_do_sample+0x44>
		TC0_HAL_stop();
    5400:	0e 94 a1 34 	call	0x6942	; 0x6942 <TC0_HAL_stop>
    5404:	08 95       	ret

Disassembly of section .text.ADC_start_sampling:

00006856 <ADC_start_sampling>:
	PM_HAL_adc_power(false);
	_data=NULL;
}

void ADC_start_sampling(){
	TC0_HAL_start();
    6856:	0e 94 81 34 	call	0x6902	; 0x6902 <TC0_HAL_start>
	vect_ADC_do_sample();
    685a:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <vect_ADC_do_sample>
    685e:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_on:

000061ee <ADC_meth_sens_power_on>:
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}

void ADC_meth_sens_power_on(uint8_t powerUpTime){
	_powerUpTime=powerUpTime;
    61ee:	80 93 a0 0f 	sts	0x0FA0, r24	; 0x800fa0 <_powerUpTime>
	cntPowerUpTime=0;
    61f2:	10 92 9f 0f 	sts	0x0F9F, r1	; 0x800f9f <cntPowerUpTime>
	
	//Turn on heater
	PM_HAL_meth_power(true);
    61f6:	81 e0       	ldi	r24, 0x01	; 1
    61f8:	0e 94 59 32 	call	0x64b2	; 0x64b2 <PM_HAL_meth_power>
	
	//Setup timer
	TC0_HAL_init(ADC_HEAT_TIME_INTERVAL, &vect_ADC_heat_timeout);
    61fc:	68 ee       	ldi	r22, 0xE8	; 232
    61fe:	71 e3       	ldi	r23, 0x31	; 49
    6200:	8c e3       	ldi	r24, 0x3C	; 60
    6202:	0e 94 30 30 	call	0x6060	; 0x6060 <TC0_HAL_init>
	TC0_HAL_start();
    6206:	0e 94 81 34 	call	0x6902	; 0x6902 <TC0_HAL_start>
    620a:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_power_off:

000068ba <ADC_meth_sens_power_off>:
}

void ADC_meth_sens_power_off(){
	PM_HAL_meth_power(false);
    68ba:	80 e0       	ldi	r24, 0x00	; 0
    68bc:	0e 94 59 32 	call	0x64b2	; 0x64b2 <PM_HAL_meth_power>
    68c0:	08 95       	ret

Disassembly of section .text.ADC_meth_sens_ready:

0000658c <ADC_meth_sens_ready>:
}

bool ADC_meth_sens_ready(){
	return cntPowerUpTime>=_powerUpTime;
    658c:	20 91 9f 0f 	lds	r18, 0x0F9F	; 0x800f9f <cntPowerUpTime>
    6590:	90 91 a0 0f 	lds	r25, 0x0FA0	; 0x800fa0 <_powerUpTime>
    6594:	81 e0       	ldi	r24, 0x01	; 1
    6596:	29 17       	cp	r18, r25
    6598:	08 f4       	brcc	.+2      	; 0x659c <ADC_meth_sens_ready+0x10>
    659a:	80 e0       	ldi	r24, 0x00	; 0
}
    659c:	08 95       	ret

Disassembly of section .text.ADC_set_conf_parameters:

000055e6 <ADC_set_conf_parameters>:

void ADC_set_conf_parameters(float Vcc, float Rrl, float PPMfactor){
    55e6:	ef 92       	push	r14
    55e8:	ff 92       	push	r15
    55ea:	0f 93       	push	r16
    55ec:	1f 93       	push	r17
	Vc=Vcc;
    55ee:	60 93 67 0f 	sts	0x0F67, r22	; 0x800f67 <Vc>
    55f2:	70 93 68 0f 	sts	0x0F68, r23	; 0x800f68 <Vc+0x1>
    55f6:	80 93 69 0f 	sts	0x0F69, r24	; 0x800f69 <Vc+0x2>
    55fa:	90 93 6a 0f 	sts	0x0F6A, r25	; 0x800f6a <Vc+0x3>
	RRL=Rrl;
    55fe:	20 93 63 0f 	sts	0x0F63, r18	; 0x800f63 <RRL>
    5602:	30 93 64 0f 	sts	0x0F64, r19	; 0x800f64 <RRL+0x1>
    5606:	40 93 65 0f 	sts	0x0F65, r20	; 0x800f65 <RRL+0x2>
    560a:	50 93 66 0f 	sts	0x0F66, r21	; 0x800f66 <RRL+0x3>
	PPM_factor=PPMfactor;
    560e:	e0 92 5f 0f 	sts	0x0F5F, r14	; 0x800f5f <PPM_factor>
    5612:	f0 92 60 0f 	sts	0x0F60, r15	; 0x800f60 <PPM_factor+0x1>
    5616:	00 93 61 0f 	sts	0x0F61, r16	; 0x800f61 <PPM_factor+0x2>
    561a:	10 93 62 0f 	sts	0x0F62, r17	; 0x800f62 <PPM_factor+0x3>
}
    561e:	1f 91       	pop	r17
    5620:	0f 91       	pop	r16
    5622:	ff 90       	pop	r15
    5624:	ef 90       	pop	r14
    5626:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00006430 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    6430:	60 e4       	ldi	r22, 0x40	; 64
    6432:	70 e0       	ldi	r23, 0x00	; 0
    6434:	80 e8       	ldi	r24, 0x80	; 128
    6436:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <eeprom_read_byte>
    643a:	91 e0       	ldi	r25, 0x01	; 1
    643c:	81 11       	cpse	r24, r1
    643e:	01 c0       	rjmp	.+2      	; 0x6442 <EM_has_deveui+0x12>
    6440:	90 e0       	ldi	r25, 0x00	; 0
}
    6442:	89 2f       	mov	r24, r25
    6444:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00006446 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    6446:	61 e4       	ldi	r22, 0x41	; 65
    6448:	70 e0       	ldi	r23, 0x00	; 0
    644a:	80 e8       	ldi	r24, 0x80	; 128
    644c:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <eeprom_read_byte>
    6450:	91 e0       	ldi	r25, 0x01	; 1
    6452:	81 11       	cpse	r24, r1
    6454:	01 c0       	rjmp	.+2      	; 0x6458 <EM_has_appeui+0x12>
    6456:	90 e0       	ldi	r25, 0x00	; 0
}
    6458:	89 2f       	mov	r24, r25
    645a:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

0000645c <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    645c:	62 e4       	ldi	r22, 0x42	; 66
    645e:	70 e0       	ldi	r23, 0x00	; 0
    6460:	80 e8       	ldi	r24, 0x80	; 128
    6462:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <eeprom_read_byte>
    6466:	91 e0       	ldi	r25, 0x01	; 1
    6468:	81 11       	cpse	r24, r1
    646a:	01 c0       	rjmp	.+2      	; 0x646e <EM_has_appkey+0x12>
    646c:	90 e0       	ldi	r25, 0x00	; 0
}
    646e:	89 2f       	mov	r24, r25
    6470:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

000058ca <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    58ca:	cf 92       	push	r12
    58cc:	df 92       	push	r13
    58ce:	ef 92       	push	r14
    58d0:	6b 01       	movw	r12, r22
    58d2:	e8 2e       	mov	r14, r24
    58d4:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    58d8:	40 97       	sbiw	r24, 0x10	; 16
    58da:	79 f4       	brne	.+30     	; 0x58fa <EM_set_deveui+0x30>
    58dc:	20 e1       	ldi	r18, 0x10	; 16
    58de:	30 e0       	ldi	r19, 0x00	; 0
    58e0:	40 e0       	ldi	r20, 0x00	; 0
    58e2:	50 e0       	ldi	r21, 0x00	; 0
    58e4:	8e 2d       	mov	r24, r14
    58e6:	b6 01       	movw	r22, r12
    58e8:	0e 94 8e 2a 	call	0x551c	; 0x551c <eeprom_update_block>
    58ec:	61 e0       	ldi	r22, 0x01	; 1
    58ee:	80 e4       	ldi	r24, 0x40	; 64
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	0e 94 1e 30 	call	0x603c	; 0x603c <eeprom_update_byte>
    58f6:	81 e0       	ldi	r24, 0x01	; 1
    58f8:	01 c0       	rjmp	.+2      	; 0x58fc <EM_set_deveui+0x32>
    58fa:	80 e0       	ldi	r24, 0x00	; 0
    58fc:	ef 90       	pop	r14
    58fe:	df 90       	pop	r13
    5900:	cf 90       	pop	r12
    5902:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

00005cc6 <EM_get_deveui>:
    5cc6:	0f 93       	push	r16
    5cc8:	1f 93       	push	r17
    5cca:	cf 93       	push	r28
    5ccc:	8c 01       	movw	r16, r24
    5cce:	0e 94 18 32 	call	0x6430	; 0x6430 <EM_has_deveui>
    5cd2:	c8 2f       	mov	r28, r24
    5cd4:	88 23       	and	r24, r24
    5cd6:	51 f0       	breq	.+20     	; 0x5cec <EM_get_deveui+0x26>
    5cd8:	20 e1       	ldi	r18, 0x10	; 16
    5cda:	30 e0       	ldi	r19, 0x00	; 0
    5cdc:	40 e0       	ldi	r20, 0x00	; 0
    5cde:	50 e0       	ldi	r21, 0x00	; 0
    5ce0:	60 e0       	ldi	r22, 0x00	; 0
    5ce2:	c8 01       	movw	r24, r16
    5ce4:	0e 94 0c 30 	call	0x6018	; 0x6018 <eeprom_read_block>
    5ce8:	f8 01       	movw	r30, r16
    5cea:	10 8a       	std	Z+16, r1	; 0x10
    5cec:	8c 2f       	mov	r24, r28
    5cee:	cf 91       	pop	r28
    5cf0:	1f 91       	pop	r17
    5cf2:	0f 91       	pop	r16
    5cf4:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00005904 <EM_set_appeui>:
    5904:	cf 92       	push	r12
    5906:	df 92       	push	r13
    5908:	ef 92       	push	r14
    590a:	6b 01       	movw	r12, r22
    590c:	e8 2e       	mov	r14, r24
    590e:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    5912:	40 97       	sbiw	r24, 0x10	; 16
    5914:	79 f4       	brne	.+30     	; 0x5934 <EM_set_appeui+0x30>
    5916:	20 e1       	ldi	r18, 0x10	; 16
    5918:	30 e0       	ldi	r19, 0x00	; 0
    591a:	40 e1       	ldi	r20, 0x10	; 16
    591c:	50 e0       	ldi	r21, 0x00	; 0
    591e:	8e 2d       	mov	r24, r14
    5920:	b6 01       	movw	r22, r12
    5922:	0e 94 8e 2a 	call	0x551c	; 0x551c <eeprom_update_block>
    5926:	61 e0       	ldi	r22, 0x01	; 1
    5928:	81 e4       	ldi	r24, 0x41	; 65
    592a:	90 e0       	ldi	r25, 0x00	; 0
    592c:	0e 94 1e 30 	call	0x603c	; 0x603c <eeprom_update_byte>
    5930:	81 e0       	ldi	r24, 0x01	; 1
    5932:	01 c0       	rjmp	.+2      	; 0x5936 <EM_set_appeui+0x32>
    5934:	80 e0       	ldi	r24, 0x00	; 0
    5936:	ef 90       	pop	r14
    5938:	df 90       	pop	r13
    593a:	cf 90       	pop	r12
    593c:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00005cf6 <EM_get_appeui>:
    5cf6:	0f 93       	push	r16
    5cf8:	1f 93       	push	r17
    5cfa:	cf 93       	push	r28
    5cfc:	8c 01       	movw	r16, r24
    5cfe:	0e 94 23 32 	call	0x6446	; 0x6446 <EM_has_appeui>
    5d02:	c8 2f       	mov	r28, r24
    5d04:	88 23       	and	r24, r24
    5d06:	51 f0       	breq	.+20     	; 0x5d1c <EM_get_appeui+0x26>
    5d08:	20 e1       	ldi	r18, 0x10	; 16
    5d0a:	30 e0       	ldi	r19, 0x00	; 0
    5d0c:	40 e1       	ldi	r20, 0x10	; 16
    5d0e:	50 e0       	ldi	r21, 0x00	; 0
    5d10:	60 e0       	ldi	r22, 0x00	; 0
    5d12:	c8 01       	movw	r24, r16
    5d14:	0e 94 0c 30 	call	0x6018	; 0x6018 <eeprom_read_block>
    5d18:	f8 01       	movw	r30, r16
    5d1a:	10 8a       	std	Z+16, r1	; 0x10
    5d1c:	8c 2f       	mov	r24, r28
    5d1e:	cf 91       	pop	r28
    5d20:	1f 91       	pop	r17
    5d22:	0f 91       	pop	r16
    5d24:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

0000593e <EM_set_appkey>:
    593e:	cf 92       	push	r12
    5940:	df 92       	push	r13
    5942:	ef 92       	push	r14
    5944:	6b 01       	movw	r12, r22
    5946:	e8 2e       	mov	r14, r24
    5948:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    594c:	80 97       	sbiw	r24, 0x20	; 32
    594e:	79 f4       	brne	.+30     	; 0x596e <EM_set_appkey+0x30>
    5950:	20 e2       	ldi	r18, 0x20	; 32
    5952:	30 e0       	ldi	r19, 0x00	; 0
    5954:	40 e2       	ldi	r20, 0x20	; 32
    5956:	50 e0       	ldi	r21, 0x00	; 0
    5958:	8e 2d       	mov	r24, r14
    595a:	b6 01       	movw	r22, r12
    595c:	0e 94 8e 2a 	call	0x551c	; 0x551c <eeprom_update_block>
    5960:	61 e0       	ldi	r22, 0x01	; 1
    5962:	82 e4       	ldi	r24, 0x42	; 66
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	0e 94 1e 30 	call	0x603c	; 0x603c <eeprom_update_byte>
    596a:	81 e0       	ldi	r24, 0x01	; 1
    596c:	01 c0       	rjmp	.+2      	; 0x5970 <EM_set_appkey+0x32>
    596e:	80 e0       	ldi	r24, 0x00	; 0
    5970:	ef 90       	pop	r14
    5972:	df 90       	pop	r13
    5974:	cf 90       	pop	r12
    5976:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00005d26 <EM_get_appkey>:
    5d26:	0f 93       	push	r16
    5d28:	1f 93       	push	r17
    5d2a:	cf 93       	push	r28
    5d2c:	8c 01       	movw	r16, r24
    5d2e:	0e 94 2e 32 	call	0x645c	; 0x645c <EM_has_appkey>
    5d32:	c8 2f       	mov	r28, r24
    5d34:	88 23       	and	r24, r24
    5d36:	51 f0       	breq	.+20     	; 0x5d4c <EM_get_appkey+0x26>
    5d38:	20 e2       	ldi	r18, 0x20	; 32
    5d3a:	30 e0       	ldi	r19, 0x00	; 0
    5d3c:	40 e2       	ldi	r20, 0x20	; 32
    5d3e:	50 e0       	ldi	r21, 0x00	; 0
    5d40:	60 e0       	ldi	r22, 0x00	; 0
    5d42:	c8 01       	movw	r24, r16
    5d44:	0e 94 0c 30 	call	0x6018	; 0x6018 <eeprom_read_block>
    5d48:	f8 01       	movw	r30, r16
    5d4a:	10 a2       	std	Z+32, r1	; 0x20
    5d4c:	8c 2f       	mov	r24, r28
    5d4e:	cf 91       	pop	r28
    5d50:	1f 91       	pop	r17
    5d52:	0f 91       	pop	r16
    5d54:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

000066a2 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    66a2:	ab 01       	movw	r20, r22
    66a4:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    66a6:	83 e4       	ldi	r24, 0x43	; 67
    66a8:	90 e0       	ldi	r25, 0x00	; 0
    66aa:	0e 94 0c 32 	call	0x6418	; 0x6418 <eeprom_update_dword>
    66ae:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

0000620c <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    620c:	cf 93       	push	r28
    620e:	df 93       	push	r29
    6210:	ec 01       	movw	r28, r24
    6212:	63 e4       	ldi	r22, 0x43	; 67
    6214:	70 e0       	ldi	r23, 0x00	; 0
    6216:	80 e0       	ldi	r24, 0x00	; 0
    6218:	0e 94 9e 33 	call	0x673c	; 0x673c <eeprom_read_dword>
    621c:	68 83       	st	Y, r22
    621e:	79 83       	std	Y+1, r23	; 0x01
    6220:	8a 83       	std	Y+2, r24	; 0x02
    6222:	9b 83       	std	Y+3, r25	; 0x03
    6224:	df 91       	pop	r29
    6226:	cf 91       	pop	r28
    6228:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

000066b0 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    66b0:	ab 01       	movw	r20, r22
    66b2:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    66b4:	87 e4       	ldi	r24, 0x47	; 71
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	0e 94 0c 32 	call	0x6418	; 0x6418 <eeprom_update_dword>
    66bc:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

0000622a <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    622a:	cf 93       	push	r28
    622c:	df 93       	push	r29
    622e:	ec 01       	movw	r28, r24
    6230:	67 e4       	ldi	r22, 0x47	; 71
    6232:	70 e0       	ldi	r23, 0x00	; 0
    6234:	80 e0       	ldi	r24, 0x00	; 0
    6236:	0e 94 9e 33 	call	0x673c	; 0x673c <eeprom_read_dword>
    623a:	68 83       	st	Y, r22
    623c:	79 83       	std	Y+1, r23	; 0x01
    623e:	8a 83       	std	Y+2, r24	; 0x02
    6240:	9b 83       	std	Y+3, r25	; 0x03
    6242:	df 91       	pop	r29
    6244:	cf 91       	pop	r28
    6246:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

000066be <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    66be:	ab 01       	movw	r20, r22
    66c0:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    66c2:	8b e4       	ldi	r24, 0x4B	; 75
    66c4:	90 e0       	ldi	r25, 0x00	; 0
    66c6:	0e 94 0c 32 	call	0x6418	; 0x6418 <eeprom_update_dword>
    66ca:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00006248 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    6248:	cf 93       	push	r28
    624a:	df 93       	push	r29
    624c:	ec 01       	movw	r28, r24
    624e:	6b e4       	ldi	r22, 0x4B	; 75
    6250:	70 e0       	ldi	r23, 0x00	; 0
    6252:	80 e0       	ldi	r24, 0x00	; 0
    6254:	0e 94 9e 33 	call	0x673c	; 0x673c <eeprom_read_dword>
    6258:	68 83       	st	Y, r22
    625a:	79 83       	std	Y+1, r23	; 0x01
    625c:	8a 83       	std	Y+2, r24	; 0x02
    625e:	9b 83       	std	Y+3, r25	; 0x03
    6260:	df 91       	pop	r29
    6262:	cf 91       	pop	r28
    6264:	08 95       	ret

Disassembly of section .text.EM_set_collections:

000066cc <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    66cc:	24 2f       	mov	r18, r20
    66ce:	30 e0       	ldi	r19, 0x00	; 0
    66d0:	44 e6       	ldi	r20, 0x64	; 100
    66d2:	50 e0       	ldi	r21, 0x00	; 0
    66d4:	0e 94 8e 2a 	call	0x551c	; 0x551c <eeprom_update_block>
    66d8:	08 95       	ret

Disassembly of section .text.EM_get_collections:

000065f6 <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    65f6:	26 2f       	mov	r18, r22
    65f8:	30 e0       	ldi	r19, 0x00	; 0
    65fa:	44 e6       	ldi	r20, 0x64	; 100
    65fc:	50 e0       	ldi	r21, 0x00	; 0
    65fe:	60 e0       	ldi	r22, 0x00	; 0
    6600:	0e 94 0c 30 	call	0x6018	; 0x6018 <eeprom_read_block>
    6604:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

00006770 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    6770:	68 2f       	mov	r22, r24
    6772:	8f e4       	ldi	r24, 0x4F	; 79
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	0e 94 1e 30 	call	0x603c	; 0x603c <eeprom_update_byte>
    677a:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

0000677c <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    677c:	6f e4       	ldi	r22, 0x4F	; 79
    677e:	70 e0       	ldi	r23, 0x00	; 0
    6780:	80 e0       	ldi	r24, 0x00	; 0
    6782:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <eeprom_read_byte>
}
    6786:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

00006788 <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    6788:	bc 01       	movw	r22, r24
    678a:	80 e5       	ldi	r24, 0x50	; 80
    678c:	90 e0       	ldi	r25, 0x00	; 0
    678e:	0e 94 0c 34 	call	0x6818	; 0x6818 <eeprom_update_word>
    6792:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

00006794 <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    6794:	60 e5       	ldi	r22, 0x50	; 80
    6796:	70 e0       	ldi	r23, 0x00	; 0
    6798:	80 e0       	ldi	r24, 0x00	; 0
    679a:	0e 94 a5 33 	call	0x674a	; 0x674a <eeprom_read_word>
}
    679e:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

000067a0 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    67a0:	68 2f       	mov	r22, r24
    67a2:	82 e5       	ldi	r24, 0x52	; 82
    67a4:	90 e0       	ldi	r25, 0x00	; 0
    67a6:	0e 94 1e 30 	call	0x603c	; 0x603c <eeprom_update_byte>
    67aa:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

000067ac <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    67ac:	62 e5       	ldi	r22, 0x52	; 82
    67ae:	70 e0       	ldi	r23, 0x00	; 0
    67b0:	80 e0       	ldi	r24, 0x00	; 0
    67b2:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <eeprom_read_byte>
}
    67b6:	08 95       	ret

Disassembly of section .text.EM_set_group_id:

000067b8 <EM_set_group_id>:

void EM_set_group_id(uint8_t groupId){
	eeprom_update_byte((uint8_t *) EEPROM_GROUP_ID_ADDR, groupId);
    67b8:	68 2f       	mov	r22, r24
    67ba:	83 e6       	ldi	r24, 0x63	; 99
    67bc:	90 e0       	ldi	r25, 0x00	; 0
    67be:	0e 94 1e 30 	call	0x603c	; 0x603c <eeprom_update_byte>
    67c2:	08 95       	ret

Disassembly of section .text.EM_get_group_id:

000067c4 <EM_get_group_id>:
}

uint8_t EM_get_group_id(){
	return eeprom_read_byte((const uint8_t *) EEPROM_GROUP_ID_ADDR);
    67c4:	63 e6       	ldi	r22, 0x63	; 99
    67c6:	70 e0       	ldi	r23, 0x00	; 0
    67c8:	80 e0       	ldi	r24, 0x00	; 0
    67ca:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <eeprom_read_byte>
    67ce:	08 95       	ret

Disassembly of section .text.cb_blink:

0000690e <cb_blink>:
void LED_fatal_err(){
	err_code(7);
}

static void cb_blink(){
	PM_HAL_LED_toggle();
    690e:	0e 94 49 34 	call	0x6892	; 0x6892 <PM_HAL_LED_toggle>
    6912:	08 95       	ret

Disassembly of section .text.blink:

00004fb4 <blink>:
	_delay_ms(2000);
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
    4fb4:	cf 93       	push	r28
    4fb6:	df 93       	push	r29
    4fb8:	d8 2f       	mov	r29, r24
	for (uint8_t i=0; i<times; i++)
    4fba:	c0 e0       	ldi	r28, 0x00	; 0
    4fbc:	19 c0       	rjmp	.+50     	; 0x4ff0 <blink+0x3c>
	{
		PM_HAL_LED_power(false);
    4fbe:	80 e0       	ldi	r24, 0x00	; 0
    4fc0:	0e 94 77 32 	call	0x64ee	; 0x64ee <PM_HAL_LED_power>
    4fc4:	2f ef       	ldi	r18, 0xFF	; 255
    4fc6:	82 e5       	ldi	r24, 0x52	; 82
    4fc8:	97 e0       	ldi	r25, 0x07	; 7
    4fca:	21 50       	subi	r18, 0x01	; 1
    4fcc:	80 40       	sbci	r24, 0x00	; 0
    4fce:	90 40       	sbci	r25, 0x00	; 0
    4fd0:	e1 f7       	brne	.-8      	; 0x4fca <blink+0x16>
    4fd2:	00 c0       	rjmp	.+0      	; 0x4fd4 <blink+0x20>
    4fd4:	00 00       	nop
		_delay_ms(300);
		PM_HAL_LED_power(true);
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	0e 94 77 32 	call	0x64ee	; 0x64ee <PM_HAL_LED_power>
    4fdc:	2f ef       	ldi	r18, 0xFF	; 255
    4fde:	82 e5       	ldi	r24, 0x52	; 82
    4fe0:	97 e0       	ldi	r25, 0x07	; 7
    4fe2:	21 50       	subi	r18, 0x01	; 1
    4fe4:	80 40       	sbci	r24, 0x00	; 0
    4fe6:	90 40       	sbci	r25, 0x00	; 0
    4fe8:	e1 f7       	brne	.-8      	; 0x4fe2 <blink+0x2e>
    4fea:	00 c0       	rjmp	.+0      	; 0x4fec <blink+0x38>
    4fec:	00 00       	nop
	blink(times);
	_delay_ms(1000);
}

static void blink(uint8_t times){
	for (uint8_t i=0; i<times; i++)
    4fee:	cf 5f       	subi	r28, 0xFF	; 255
    4ff0:	cd 17       	cp	r28, r29
    4ff2:	28 f3       	brcs	.-54     	; 0x4fbe <blink+0xa>
		PM_HAL_LED_power(false);
		_delay_ms(300);
		PM_HAL_LED_power(true);
		_delay_ms(300);
	}
	PM_HAL_LED_power(false);
    4ff4:	80 e0       	ldi	r24, 0x00	; 0
    4ff6:	0e 94 77 32 	call	0x64ee	; 0x64ee <PM_HAL_LED_power>
}
    4ffa:	df 91       	pop	r29
    4ffc:	cf 91       	pop	r28
    4ffe:	08 95       	ret

Disassembly of section .text.err_code:

00005978 <err_code>:
static void cb_blink(){
	PM_HAL_LED_toggle();
}


static void err_code(uint8_t times){
    5978:	cf 93       	push	r28
    597a:	c8 2f       	mov	r28, r24
	PM_HAL_LED_power(true);
    597c:	81 e0       	ldi	r24, 0x01	; 1
    597e:	0e 94 77 32 	call	0x64ee	; 0x64ee <PM_HAL_LED_power>
    5982:	2f ef       	ldi	r18, 0xFF	; 255
    5984:	83 ed       	ldi	r24, 0xD3	; 211
    5986:	90 e3       	ldi	r25, 0x30	; 48
    5988:	21 50       	subi	r18, 0x01	; 1
    598a:	80 40       	sbci	r24, 0x00	; 0
    598c:	90 40       	sbci	r25, 0x00	; 0
    598e:	e1 f7       	brne	.-8      	; 0x5988 <err_code+0x10>
    5990:	00 c0       	rjmp	.+0      	; 0x5992 <err_code+0x1a>
    5992:	00 00       	nop
	_delay_ms(2000);
	blink(times);
    5994:	8c 2f       	mov	r24, r28
    5996:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <blink>
    599a:	2f ef       	ldi	r18, 0xFF	; 255
    599c:	89 e6       	ldi	r24, 0x69	; 105
    599e:	98 e1       	ldi	r25, 0x18	; 24
    59a0:	21 50       	subi	r18, 0x01	; 1
    59a2:	80 40       	sbci	r24, 0x00	; 0
    59a4:	90 40       	sbci	r25, 0x00	; 0
    59a6:	e1 f7       	brne	.-8      	; 0x59a0 <err_code+0x28>
    59a8:	00 c0       	rjmp	.+0      	; 0x59aa <err_code+0x32>
    59aa:	00 00       	nop
	_delay_ms(1000);
}
    59ac:	cf 91       	pop	r28
    59ae:	08 95       	ret

Disassembly of section .text.LED_start_try_join:

000066da <LED_start_try_join>:


static int8_t cbPointer;

void LED_start_try_join(){
	cbPointer=TC2_HAL_subscribe(&cb_blink);
    66da:	87 e8       	ldi	r24, 0x87	; 135
    66dc:	94 e3       	ldi	r25, 0x34	; 52
    66de:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <TC2_HAL_subscribe>
    66e2:	80 93 a1 0f 	sts	0x0FA1, r24	; 0x800fa1 <cbPointer>
    66e6:	08 95       	ret

Disassembly of section .text.LED_stop_try_join:

00006606 <LED_stop_try_join>:
}

void LED_stop_try_join(){
	TC2_HAL_cancel(cbPointer);
    6606:	80 91 a1 0f 	lds	r24, 0x0FA1	; 0x800fa1 <cbPointer>
    660a:	0e 94 2b 2c 	call	0x5856	; 0x5856 <TC2_HAL_cancel>
	PM_HAL_LED_power(false);
    660e:	80 e0       	ldi	r24, 0x00	; 0
    6610:	0e 94 77 32 	call	0x64ee	; 0x64ee <PM_HAL_LED_power>
    6614:	08 95       	ret

Disassembly of section .text.LED_join_success:

0000566a <LED_join_success>:
}

void LED_join_success(){
    566a:	cf 93       	push	r28
	for (uint8_t i=0; i<10; i++)
    566c:	c0 e0       	ldi	r28, 0x00	; 0
    566e:	19 c0       	rjmp	.+50     	; 0x56a2 <LED_join_success+0x38>
	{
		PM_HAL_LED_power(true);
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	0e 94 77 32 	call	0x64ee	; 0x64ee <PM_HAL_LED_power>
    5676:	2f ef       	ldi	r18, 0xFF	; 255
    5678:	80 e7       	ldi	r24, 0x70	; 112
    567a:	92 e0       	ldi	r25, 0x02	; 2
    567c:	21 50       	subi	r18, 0x01	; 1
    567e:	80 40       	sbci	r24, 0x00	; 0
    5680:	90 40       	sbci	r25, 0x00	; 0
    5682:	e1 f7       	brne	.-8      	; 0x567c <LED_join_success+0x12>
    5684:	00 c0       	rjmp	.+0      	; 0x5686 <LED_join_success+0x1c>
    5686:	00 00       	nop
		_delay_ms(100);
		PM_HAL_LED_power(false);
    5688:	80 e0       	ldi	r24, 0x00	; 0
    568a:	0e 94 77 32 	call	0x64ee	; 0x64ee <PM_HAL_LED_power>
    568e:	2f ef       	ldi	r18, 0xFF	; 255
    5690:	80 e7       	ldi	r24, 0x70	; 112
    5692:	92 e0       	ldi	r25, 0x02	; 2
    5694:	21 50       	subi	r18, 0x01	; 1
    5696:	80 40       	sbci	r24, 0x00	; 0
    5698:	90 40       	sbci	r25, 0x00	; 0
    569a:	e1 f7       	brne	.-8      	; 0x5694 <LED_join_success+0x2a>
    569c:	00 c0       	rjmp	.+0      	; 0x569e <LED_join_success+0x34>
    569e:	00 00       	nop
	TC2_HAL_cancel(cbPointer);
	PM_HAL_LED_power(false);
}

void LED_join_success(){
	for (uint8_t i=0; i<10; i++)
    56a0:	cf 5f       	subi	r28, 0xFF	; 255
    56a2:	ca 30       	cpi	r28, 0x0A	; 10
    56a4:	28 f3       	brcs	.-54     	; 0x5670 <LED_join_success+0x6>
		PM_HAL_LED_power(true);
		_delay_ms(100);
		PM_HAL_LED_power(false);
		_delay_ms(100);
	}
}
    56a6:	cf 91       	pop	r28
    56a8:	08 95       	ret

Disassembly of section .text.LED_join_denied:

000068c2 <LED_join_denied>:

void LED_join_denied(){
	err_code(3);
    68c2:	83 e0       	ldi	r24, 0x03	; 3
    68c4:	0e 94 bc 2c 	call	0x5978	; 0x5978 <err_code>
    68c8:	08 95       	ret

Disassembly of section .text.LED_conf_err:

000068ca <LED_conf_err>:
}

void LED_conf_err(){
	err_code(5);
    68ca:	85 e0       	ldi	r24, 0x05	; 5
    68cc:	0e 94 bc 2c 	call	0x5978	; 0x5978 <err_code>
    68d0:	08 95       	ret

Disassembly of section .text.LED_fatal_err:

000068d2 <LED_fatal_err>:
}

void LED_fatal_err(){
	err_code(7);
    68d2:	87 e0       	ldi	r24, 0x07	; 7
    68d4:	0e 94 bc 2c 	call	0x5978	; 0x5978 <err_code>
    68d8:	08 95       	ret

Disassembly of section .text.parse_err:

00004b3a <parse_err>:
	}
	return LM_STATUS_FATAL_ERROR;
}


LM_STATUS parse_err(char *msg){
    4b3a:	cf 92       	push	r12
    4b3c:	df 92       	push	r13
    4b3e:	ef 92       	push	r14
	if(strcmp(msg, NO_FREE_CH)==0){
    4b40:	6c 01       	movw	r12, r24
    4b42:	20 e8       	ldi	r18, 0x80	; 128
    4b44:	e2 2e       	mov	r14, r18
    4b46:	24 e1       	ldi	r18, 0x14	; 20
    4b48:	38 e0       	ldi	r19, 0x08	; 8
    4b4a:	40 e0       	ldi	r20, 0x00	; 0
    4b4c:	8e 2d       	mov	r24, r14
    4b4e:	b6 01       	movw	r22, r12
    4b50:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    4b54:	89 2b       	or	r24, r25
    4b56:	a1 f0       	breq	.+40     	; 0x4b80 <parse_err+0x46>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, DENIED)==0){
    4b58:	2f e1       	ldi	r18, 0x1F	; 31
    4b5a:	38 e0       	ldi	r19, 0x08	; 8
    4b5c:	40 e0       	ldi	r20, 0x00	; 0
    4b5e:	8e 2d       	mov	r24, r14
    4b60:	b6 01       	movw	r22, r12
    4b62:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    4b66:	89 2b       	or	r24, r25
    4b68:	69 f0       	breq	.+26     	; 0x4b84 <parse_err+0x4a>
		return LM_STATUS_TRY_AGAIN;
	}
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
    4b6a:	26 e2       	ldi	r18, 0x26	; 38
    4b6c:	38 e0       	ldi	r19, 0x08	; 8
    4b6e:	40 e0       	ldi	r20, 0x00	; 0
    4b70:	8e 2d       	mov	r24, r14
    4b72:	b6 01       	movw	r22, r12
    4b74:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    4b78:	89 2b       	or	r24, r25
    4b7a:	31 f4       	brne	.+12     	; 0x4b88 <parse_err+0x4e>
		return LM_STATUS_CONF_ERR;
    4b7c:	83 e0       	ldi	r24, 0x03	; 3
    4b7e:	05 c0       	rjmp	.+10     	; 0x4b8a <parse_err+0x50>
}


LM_STATUS parse_err(char *msg){
	if(strcmp(msg, NO_FREE_CH)==0){
		return LM_STATUS_TRY_AGAIN;
    4b80:	82 e0       	ldi	r24, 0x02	; 2
    4b82:	03 c0       	rjmp	.+6      	; 0x4b8a <parse_err+0x50>
	}
	
	if(strcmp(msg, DENIED)==0){
		return LM_STATUS_TRY_AGAIN;
    4b84:	82 e0       	ldi	r24, 0x02	; 2
    4b86:	01 c0       	rjmp	.+2      	; 0x4b8a <parse_err+0x50>
	
	if(strcmp(msg, KEYS_NOT_INIT)==0){
		return LM_STATUS_CONF_ERR;
	}
	
	return LM_STATUS_FATAL_ERROR;
    4b88:	81 e0       	ldi	r24, 0x01	; 1
}
    4b8a:	ef 90       	pop	r14
    4b8c:	df 90       	pop	r13
    4b8e:	cf 90       	pop	r12
    4b90:	08 95       	ret

Disassembly of section .text.JN_join_network:

0000166e <JN_join_network>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../util/util.h"

static LM_STATUS parse_err(char *msg);

LM_STATUS JN_join_network(char deveui[], char appeui[], char appkey[]){
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	28 97       	sbiw	r28, 0x08	; 8
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	5c 01       	movw	r10, r24
    1692:	6b 01       	movw	r12, r22
    1694:	7a 01       	movw	r14, r20
	
	JN_STATES state=JN_HW_RESET_RN2483;
    1696:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    1698:	e1 2f       	mov	r30, r17
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	ed 30       	cpi	r30, 0x0D	; 13
    169e:	f1 05       	cpc	r31, r1
    16a0:	d8 f7       	brcc	.-10     	; 0x1698 <JN_join_network+0x2a>
    16a2:	e2 5c       	subi	r30, 0xC2	; 194
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	0c 94 06 34 	jmp	0x680c	; 0x680c <__tablejump2__>
			case JN_HW_RESET_RN2483:
				rn2483_reset_active();
    16aa:	0e 94 51 34 	call	0x68a2	; 0x68a2 <rn2483_reset_active>
    16ae:	2f ef       	ldi	r18, 0xFF	; 255
    16b0:	89 e6       	ldi	r24, 0x69	; 105
    16b2:	98 e1       	ldi	r25, 0x18	; 24
    16b4:	21 50       	subi	r18, 0x01	; 1
    16b6:	80 40       	sbci	r24, 0x00	; 0
    16b8:	90 40       	sbci	r25, 0x00	; 0
    16ba:	e1 f7       	brne	.-8      	; 0x16b4 <JN_join_network+0x46>
    16bc:	00 c0       	rjmp	.+0      	; 0x16be <JN_join_network+0x50>
    16be:	00 00       	nop
				_delay_ms(1000);
				rn2483_reset_deactive();
    16c0:	0e 94 55 34 	call	0x68aa	; 0x68aa <rn2483_reset_deactive>
				
				util_setPendingStates(&stateData, JN_SOFT_RESET_LORA, JN_JOIN_FATAL_ERROR);
    16c4:	4c e0       	ldi	r20, 0x0C	; 12
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	62 e0       	ldi	r22, 0x02	; 2
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	ce 01       	movw	r24, r28
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_BEGINS_WITH, RN2483);
    16d4:	24 e3       	ldi	r18, 0x34	; 52
    16d6:	38 e0       	ldi	r19, 0x08	; 8
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				
				state=JN_WAIT_FOR_INCOMMING;
    16e4:	11 e0       	ldi	r17, 0x01	; 1
			break;
    16e6:	d8 cf       	rjmp	.-80     	; 0x1698 <JN_join_network+0x2a>
			
			case JN_SOFT_RESET_LORA:
				cmd_with_ending(lm_msg, MAC_RESET_TO_868_BAND);
    16e8:	4b e3       	ldi	r20, 0x3B	; 59
    16ea:	58 e0       	ldi	r21, 0x08	; 8
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	8e e5       	ldi	r24, 0x5E	; 94
    16f0:	92 e0       	ldi	r25, 0x02	; 2
    16f2:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    16f6:	6e e5       	ldi	r22, 0x5E	; 94
    16f8:	72 e0       	ldi	r23, 0x02	; 2
    16fa:	80 e8       	ldi	r24, 0x80	; 128
    16fc:	0e 94 43 23 	call	0x4686	; 0x4686 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_DEVEUI, JN_JOIN_FATAL_ERROR);
    1700:	4c e0       	ldi	r20, 0x0C	; 12
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	63 e0       	ldi	r22, 0x03	; 3
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	ce 01       	movw	r24, r28
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1710:	29 e4       	ldi	r18, 0x49	; 73
    1712:	38 e0       	ldi	r19, 0x08	; 8
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	ce 01       	movw	r24, r28
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1720:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1722:	ba cf       	rjmp	.-140    	; 0x1698 <JN_join_network+0x2a>
			
			case JN_LOAD_DEVEUI:
				mac_set_deveui(lm_msg, deveui);
    1724:	b5 01       	movw	r22, r10
    1726:	8e e5       	ldi	r24, 0x5E	; 94
    1728:	92 e0       	ldi	r25, 0x02	; 2
    172a:	0e 94 51 29 	call	0x52a2	; 0x52a2 <mac_set_deveui>
				attach_ending(lm_msg);
    172e:	8e e5       	ldi	r24, 0x5E	; 94
    1730:	92 e0       	ldi	r25, 0x02	; 2
    1732:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1736:	6e e5       	ldi	r22, 0x5E	; 94
    1738:	72 e0       	ldi	r23, 0x02	; 2
    173a:	80 e8       	ldi	r24, 0x80	; 128
    173c:	0e 94 43 23 	call	0x4686	; 0x4686 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPKEY, JN_JOIN_FATAL_ERROR);
    1740:	4c e0       	ldi	r20, 0x0C	; 12
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	64 e0       	ldi	r22, 0x04	; 4
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	ce 01       	movw	r24, r28
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1750:	29 e4       	ldi	r18, 0x49	; 73
    1752:	38 e0       	ldi	r19, 0x08	; 8
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	ce 01       	movw	r24, r28
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1760:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1762:	9a cf       	rjmp	.-204    	; 0x1698 <JN_join_network+0x2a>
			
			case JN_LOAD_APPKEY:
				mac_set_appkey(lm_msg, appkey);
    1764:	b7 01       	movw	r22, r14
    1766:	8e e5       	ldi	r24, 0x5E	; 94
    1768:	92 e0       	ldi	r25, 0x02	; 2
    176a:	0e 94 99 29 	call	0x5332	; 0x5332 <mac_set_appkey>
				attach_ending(lm_msg);
    176e:	8e e5       	ldi	r24, 0x5E	; 94
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <attach_ending>
				uart0_hal_send_string(lm_msg);
    1776:	6e e5       	ldi	r22, 0x5E	; 94
    1778:	72 e0       	ldi	r23, 0x02	; 2
    177a:	80 e8       	ldi	r24, 0x80	; 128
    177c:	0e 94 43 23 	call	0x4686	; 0x4686 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_APPEUI, JN_JOIN_FATAL_ERROR);
    1780:	4c e0       	ldi	r20, 0x0C	; 12
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	65 e0       	ldi	r22, 0x05	; 5
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	ce 01       	movw	r24, r28
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1790:	29 e4       	ldi	r18, 0x49	; 73
    1792:	38 e0       	ldi	r19, 0x08	; 8
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	ce 01       	movw	r24, r28
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    17a0:	11 e0       	ldi	r17, 0x01	; 1
			break;
    17a2:	7a cf       	rjmp	.-268    	; 0x1698 <JN_join_network+0x2a>
			
			case JN_LOAD_APPEUI:
				mac_set_appeui(lm_msg, appeui);
    17a4:	b6 01       	movw	r22, r12
    17a6:	8e e5       	ldi	r24, 0x5E	; 94
    17a8:	92 e0       	ldi	r25, 0x02	; 2
    17aa:	0e 94 75 29 	call	0x52ea	; 0x52ea <mac_set_appeui>
				attach_ending(lm_msg);
    17ae:	8e e5       	ldi	r24, 0x5E	; 94
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <attach_ending>
				uart0_hal_send_string(lm_msg);
    17b6:	6e e5       	ldi	r22, 0x5E	; 94
    17b8:	72 e0       	ldi	r23, 0x02	; 2
    17ba:	80 e8       	ldi	r24, 0x80	; 128
    17bc:	0e 94 43 23 	call	0x4686	; 0x4686 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_ADR, JN_JOIN_FATAL_ERROR);
    17c0:	4c e0       	ldi	r20, 0x0C	; 12
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	66 e0       	ldi	r22, 0x06	; 6
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	ce 01       	movw	r24, r28
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    17d0:	29 e4       	ldi	r18, 0x49	; 73
    17d2:	38 e0       	ldi	r19, 0x08	; 8
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	ce 01       	movw	r24, r28
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    17e0:	11 e0       	ldi	r17, 0x01	; 1
			break;
    17e2:	5a cf       	rjmp	.-332    	; 0x1698 <JN_join_network+0x2a>
			
			case JN_LOAD_ADR:
				mac_set_ADR(lm_msg, 1);
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	8e e5       	ldi	r24, 0x5E	; 94
    17e8:	92 e0       	ldi	r25, 0x02	; 2
    17ea:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <mac_set_ADR>
				attach_ending(lm_msg);
    17ee:	8e e5       	ldi	r24, 0x5E	; 94
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <attach_ending>
				uart0_hal_send_string(lm_msg);
    17f6:	6e e5       	ldi	r22, 0x5E	; 94
    17f8:	72 e0       	ldi	r23, 0x02	; 2
    17fa:	80 e8       	ldi	r24, 0x80	; 128
    17fc:	0e 94 43 23 	call	0x4686	; 0x4686 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_LOAD_SAVE, JN_JOIN_FATAL_ERROR);
    1800:	4c e0       	ldi	r20, 0x0C	; 12
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	67 e0       	ldi	r22, 0x07	; 7
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	ce 01       	movw	r24, r28
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1810:	29 e4       	ldi	r18, 0x49	; 73
    1812:	38 e0       	ldi	r19, 0x08	; 8
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	ce 01       	movw	r24, r28
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1820:	11 e0       	ldi	r17, 0x01	; 1
			break;
    1822:	3a cf       	rjmp	.-396    	; 0x1698 <JN_join_network+0x2a>
			
			case JN_LOAD_SAVE:
				cmd_with_ending(lm_msg, MAC_SAVE);
    1824:	4c e4       	ldi	r20, 0x4C	; 76
    1826:	58 e0       	ldi	r21, 0x08	; 8
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	8e e5       	ldi	r24, 0x5E	; 94
    182c:	92 e0       	ldi	r25, 0x02	; 2
    182e:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    1832:	6e e5       	ldi	r22, 0x5E	; 94
    1834:	72 e0       	ldi	r23, 0x02	; 2
    1836:	80 e8       	ldi	r24, 0x80	; 128
    1838:	0e 94 43 23 	call	0x4686	; 0x4686 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK, JN_JOIN_FATAL_ERROR);
    183c:	4c e0       	ldi	r20, 0x0C	; 12
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	68 e0       	ldi	r22, 0x08	; 8
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	ce 01       	movw	r24, r28
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    184c:	29 e4       	ldi	r18, 0x49	; 73
    184e:	38 e0       	ldi	r19, 0x08	; 8
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	ce 01       	movw	r24, r28
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    185c:	11 e0       	ldi	r17, 0x01	; 1
			break;
    185e:	1c cf       	rjmp	.-456    	; 0x1698 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK:
				cmd_with_ending(lm_msg, MAC_JOIN_OTAA);
    1860:	45 e5       	ldi	r20, 0x55	; 85
    1862:	58 e0       	ldi	r21, 0x08	; 8
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	8e e5       	ldi	r24, 0x5E	; 94
    1868:	92 e0       	ldi	r25, 0x02	; 2
    186a:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <cmd_with_ending>
				uart0_hal_send_string(lm_msg);
    186e:	6e e5       	ldi	r22, 0x5E	; 94
    1870:	72 e0       	ldi	r23, 0x02	; 2
    1872:	80 e8       	ldi	r24, 0x80	; 128
    1874:	0e 94 43 23 	call	0x4686	; 0x4686 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, JN_JOIN_NETWORK_RES_2, JN_JOIN_NETWORK_FAILED);
    1878:	4a e0       	ldi	r20, 0x0A	; 10
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	69 e0       	ldi	r22, 0x09	; 9
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	ce 01       	movw	r24, r28
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    1888:	29 e4       	ldi	r18, 0x49	; 73
    188a:	38 e0       	ldi	r19, 0x08	; 8
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	ce 01       	movw	r24, r28
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    1898:	11 e0       	ldi	r17, 0x01	; 1
			break;
    189a:	fe ce       	rjmp	.-516    	; 0x1698 <JN_join_network+0x2a>
			
			case JN_JOIN_NETWORK_RES_2:
				util_setPendingStates(&stateData, JN_JOIN_SUCCESS, JN_JOIN_NETWORK_FAILED);
    189c:	4a e0       	ldi	r20, 0x0A	; 10
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	6b e0       	ldi	r22, 0x0B	; 11
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	ce 01       	movw	r24, r28
    18a6:	01 96       	adiw	r24, 0x01	; 1
    18a8:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
    18ac:	23 e6       	ldi	r18, 0x63	; 99
    18ae:	38 e0       	ldi	r19, 0x08	; 8
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	ce 01       	movw	r24, r28
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				state=JN_WAIT_FOR_INCOMMING;
    18bc:	11 e0       	ldi	r17, 0x01	; 1
			break;
    18be:	ec ce       	rjmp	.-552    	; 0x1698 <JN_join_network+0x2a>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
				
			case JN_JOIN_NETWORK_FAILED:
				return parse_err(lm_msg);
    18c0:	8e e5       	ldi	r24, 0x5E	; 94
    18c2:	92 e0       	ldi	r25, 0x02	; 2
    18c4:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <parse_err>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <JN_join_network+0x284>
				
				
			case JN_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    18ca:	0e 94 35 33 	call	0x666a	; 0x666a <uart0_hal_message_ready>
    18ce:	88 23       	and	r24, r24
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <JN_join_network+0x266>
    18d2:	e2 ce       	rjmp	.-572    	; 0x1698 <JN_join_network+0x2a>
					uart0_hal_read_message_as_str(lm_msg);
    18d4:	8e e5       	ldi	r24, 0x5E	; 94
    18d6:	92 e0       	ldi	r25, 0x02	; 2
    18d8:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    18dc:	6e e5       	ldi	r22, 0x5E	; 94
    18de:	72 e0       	ldi	r23, 0x02	; 2
    18e0:	ce 01       	movw	r24, r28
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <util_matchMessage>
    18e8:	18 2f       	mov	r17, r24
    18ea:	d6 ce       	rjmp	.-596    	; 0x1698 <JN_join_network+0x2a>
				util_setMatchCase(&stateData, LM_EXACT, ACCEPTED);
				state=JN_WAIT_FOR_INCOMMING;
			break;
				
			case JN_JOIN_SUCCESS:
				return LM_STATUS_SUCCESS;
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <JN_join_network+0x284>
				
			case JN_JOIN_FATAL_ERROR:
				return LM_STATUS_FATAL_ERROR;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;
		}
	}
	return LM_STATUS_FATAL_ERROR;
}
    18f2:	28 96       	adiw	r28, 0x08	; 8
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	bf 90       	pop	r11
    190e:	af 90       	pop	r10
    1910:	08 95       	ret

Disassembly of section .text.set_block_uplink:

000063e8 <set_block_uplink>:
	util_send_break();
}


static void set_block_uplink(){
	subPointer=TC2_HAL_subscribe(&cb_block_uplink);
    63e8:	8e e6       	ldi	r24, 0x6E	; 110
    63ea:	91 e3       	ldi	r25, 0x31	; 49
    63ec:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <TC2_HAL_subscribe>
    63f0:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <subPointer>
	busy=true;
    63f4:	81 e0       	ldi	r24, 0x01	; 1
    63f6:	80 93 a3 0f 	sts	0x0FA3, r24	; 0x800fa3 <busy>
	cnt=0;
    63fa:	10 92 a4 0f 	sts	0x0FA4, r1	; 0x800fa4 <cnt>
    63fe:	08 95       	ret

Disassembly of section .text.cb_block_uplink:

000062dc <cb_block_uplink>:
}

static void cb_block_uplink(){
	cnt++;
    62dc:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <cnt>
    62e0:	8f 5f       	subi	r24, 0xFF	; 255
    62e2:	80 93 a4 0f 	sts	0x0FA4, r24	; 0x800fa4 <cnt>
	if(cnt>LORA_UPLINK_BLOCK_TIME){
    62e6:	8d 33       	cpi	r24, 0x3D	; 61
    62e8:	30 f0       	brcs	.+12     	; 0x62f6 <cb_block_uplink+0x1a>
		busy=false;
    62ea:	10 92 a3 0f 	sts	0x0FA3, r1	; 0x800fa3 <busy>
		TC2_HAL_cancel(subPointer);
    62ee:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <subPointer>
    62f2:	0e 94 2b 2c 	call	0x5856	; 0x5856 <TC2_HAL_cancel>
    62f6:	08 95       	ret

Disassembly of section .text.LM_join_network:

00006914 <LM_join_network>:
static void cb_block_uplink();
static void set_block_uplink();


LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
    6914:	0e 94 37 0b 	call	0x166e	; 0x166e <JN_join_network>
}
    6918:	08 95       	ret

Disassembly of section .text.LM_send_uplink:

00005ea2 <LM_send_uplink>:

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
    5ea2:	1f 93       	push	r17
    5ea4:	cf 93       	push	r28
    5ea6:	df 93       	push	r29
    5ea8:	9c 01       	movw	r18, r24
	if(busy) return LM_STATUS_TRY_AGAIN;
    5eaa:	90 91 a3 0f 	lds	r25, 0x0FA3	; 0x800fa3 <busy>
    5eae:	91 11       	cpse	r25, r1
    5eb0:	0a c0       	rjmp	.+20     	; 0x5ec6 <LM_send_uplink+0x24>
    5eb2:	16 2f       	mov	r17, r22
    5eb4:	e9 01       	movw	r28, r18
	set_block_uplink();
    5eb6:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <set_block_uplink>
	return SU_send_uplink(LORA_PORT, data, length);
    5eba:	41 2f       	mov	r20, r17
    5ebc:	be 01       	movw	r22, r28
    5ebe:	84 e6       	ldi	r24, 0x64	; 100
    5ec0:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <SU_send_uplink>
    5ec4:	01 c0       	rjmp	.+2      	; 0x5ec8 <LM_send_uplink+0x26>
LM_STATUS LM_join_network(char deveui[], char appeui[], char appkey[]){
	return JN_join_network(deveui, appeui, appkey);
}

LM_STATUS LM_send_uplink(uint8_t data[], uint8_t length){
	if(busy) return LM_STATUS_TRY_AGAIN;
    5ec6:	82 e0       	ldi	r24, 0x02	; 2
	set_block_uplink();
	return SU_send_uplink(LORA_PORT, data, length);
}
    5ec8:	df 91       	pop	r29
    5eca:	cf 91       	pop	r28
    5ecc:	1f 91       	pop	r17
    5ece:	08 95       	ret

Disassembly of section .text.LM_put_to_sleep:

0000659e <LM_put_to_sleep>:

LM_STATUS LM_put_to_sleep(){
	busy=false;
    659e:	10 92 a3 0f 	sts	0x0FA3, r1	; 0x800fa3 <busy>
	TC2_HAL_cancel(subPointer);
    65a2:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <subPointer>
    65a6:	0e 94 2b 2c 	call	0x5856	; 0x5856 <TC2_HAL_cancel>
	return SC_put_to_sleep();
    65aa:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <SC_put_to_sleep>
}
    65ae:	08 95       	ret

Disassembly of section .text.LM_wake_up:

0000691a <LM_wake_up>:

LM_STATUS LM_wake_up(){
	return SC_wake_up();
    691a:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <SC_wake_up>
}
    691e:	08 95       	ret

Disassembly of section .text.LM_is_free:

00006860 <LM_is_free>:

bool LM_is_free(){
	return busy==false;
    6860:	90 91 a3 0f 	lds	r25, 0x0FA3	; 0x800fa3 <busy>
}
    6864:	81 e0       	ldi	r24, 0x01	; 1
    6866:	89 27       	eor	r24, r25
    6868:	08 95       	ret

Disassembly of section .text.LM_reset_module:

00006920 <LM_reset_module>:

LM_STATUS LM_reset_module(){
	return util_reset_module();
    6920:	0e 94 03 2a 	call	0x5406	; 0x5406 <util_reset_module>
}
    6924:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

00006926 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    6926:	0e 94 33 21 	call	0x4266	; 0x4266 <util_lora_forward_msg>
    692a:	08 95       	ret

Disassembly of section .text.LM_send_break:

0000692c <LM_send_break>:
}

void LM_send_break(){
	util_send_break();
    692c:	0e 94 6d 34 	call	0x68da	; 0x68da <util_send_break>
    6930:	08 95       	ret

Disassembly of section .text.tohex:

000040ec <tohex>:
/*************************************************************
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    40ec:	6f 92       	push	r6
    40ee:	7f 92       	push	r7
    40f0:	8f 92       	push	r8
    40f2:	ef 92       	push	r14
    40f4:	ff 92       	push	r15
    40f6:	0f 93       	push	r16
    40f8:	1f 93       	push	r17
    40fa:	cf 93       	push	r28
    40fc:	df 93       	push	r29
    40fe:	7c 01       	movw	r14, r24
    4100:	3a 01       	movw	r6, r20
    4102:	86 2e       	mov	r8, r22
    4104:	89 01       	movw	r16, r18
    for (int i = 0; i < bytes; i++){
    4106:	c0 e0       	ldi	r28, 0x00	; 0
    4108:	d0 e0       	ldi	r29, 0x00	; 0
    410a:	25 c0       	rjmp	.+74     	; 0x4156 <tohex+0x6a>
        sprintf(str + i * 2, "%02x", data[i]);
    410c:	a8 2d       	mov	r26, r8
    410e:	c3 01       	movw	r24, r6
    4110:	8c 0f       	add	r24, r28
    4112:	9d 1f       	adc	r25, r29
    4114:	a1 1d       	adc	r26, r1
    4116:	d7 fd       	sbrc	r29, 7
    4118:	aa 95       	dec	r26
    411a:	fc 01       	movw	r30, r24
    411c:	24 91       	lpm	r18, Z
    411e:	a7 fd       	sbrc	r26, 7
    4120:	20 81       	ld	r18, Z
    4122:	ce 01       	movw	r24, r28
    4124:	88 0f       	add	r24, r24
    4126:	99 1f       	adc	r25, r25
    4128:	1f 92       	push	r1
    412a:	2f 93       	push	r18
    412c:	21 ea       	ldi	r18, 0xA1	; 161
    412e:	37 e0       	ldi	r19, 0x07	; 7
    4130:	40 e0       	ldi	r20, 0x00	; 0
    4132:	4f 93       	push	r20
    4134:	3f 93       	push	r19
    4136:	2f 93       	push	r18
    4138:	8e 0d       	add	r24, r14
    413a:	9f 1d       	adc	r25, r15
    413c:	9f 93       	push	r25
    413e:	8f 93       	push	r24
    4140:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
 * Auxiliary - local
**************************************************************/

static void tohex(char str[], const uint8_t data[], int bytes)
{
    for (int i = 0; i < bytes; i++){
    4144:	21 96       	adiw	r28, 0x01	; 1
    4146:	8d b7       	in	r24, 0x3d	; 61
    4148:	9e b7       	in	r25, 0x3e	; 62
    414a:	07 96       	adiw	r24, 0x07	; 7
    414c:	0f b6       	in	r0, 0x3f	; 63
    414e:	f8 94       	cli
    4150:	9e bf       	out	0x3e, r25	; 62
    4152:	0f be       	out	0x3f, r0	; 63
    4154:	8d bf       	out	0x3d, r24	; 61
    4156:	c0 17       	cp	r28, r16
    4158:	d1 07       	cpc	r29, r17
    415a:	c4 f2       	brlt	.-80     	; 0x410c <tohex+0x20>
        sprintf(str + i * 2, "%02x", data[i]);
	}
}
    415c:	df 91       	pop	r29
    415e:	cf 91       	pop	r28
    4160:	1f 91       	pop	r17
    4162:	0f 91       	pop	r16
    4164:	ff 90       	pop	r15
    4166:	ef 90       	pop	r14
    4168:	8f 90       	pop	r8
    416a:	7f 90       	pop	r7
    416c:	6f 90       	pop	r6
    416e:	08 95       	ret

Disassembly of section .text.attach_ending:

000062f8 <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    62f8:	fc 01       	movw	r30, r24
    62fa:	01 90       	ld	r0, Z+
    62fc:	00 20       	and	r0, r0
    62fe:	e9 f7       	brne	.-6      	; 0x62fa <attach_ending+0x2>
    6300:	cf 01       	movw	r24, r30
    6302:	23 e0       	ldi	r18, 0x03	; 3
    6304:	30 e0       	ldi	r19, 0x00	; 0
    6306:	46 ea       	ldi	r20, 0xA6	; 166
    6308:	57 e0       	ldi	r21, 0x07	; 7
    630a:	60 e0       	ldi	r22, 0x00	; 0
    630c:	01 97       	sbiw	r24, 0x01	; 1
    630e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
    6312:	08 95       	ret

Disassembly of section .text.cmd_with_ending:

00005c00 <cmd_with_ending>:
}

int16_t cmd_with_ending(char buffer[], const char cmd[]){
    5c00:	cf 93       	push	r28
    5c02:	df 93       	push	r29
    5c04:	ec 01       	movw	r28, r24
	strcpy(buffer, cmd);
    5c06:	0e 94 51 31 	call	0x62a2	; 0x62a2 <strcpy>
	strcat(buffer, CMD_END_CHARS);
    5c0a:	fe 01       	movw	r30, r28
    5c0c:	01 90       	ld	r0, Z+
    5c0e:	00 20       	and	r0, r0
    5c10:	e9 f7       	brne	.-6      	; 0x5c0c <cmd_with_ending+0xc>
    5c12:	cf 01       	movw	r24, r30
    5c14:	23 e0       	ldi	r18, 0x03	; 3
    5c16:	30 e0       	ldi	r19, 0x00	; 0
    5c18:	46 ea       	ldi	r20, 0xA6	; 166
    5c1a:	57 e0       	ldi	r21, 0x07	; 7
    5c1c:	60 e0       	ldi	r22, 0x00	; 0
    5c1e:	01 97       	sbiw	r24, 0x01	; 1
    5c20:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
	return strlen(buffer);
    5c24:	be 01       	movw	r22, r28
    5c26:	80 e8       	ldi	r24, 0x80	; 128
    5c28:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
}
    5c2c:	df 91       	pop	r29
    5c2e:	cf 91       	pop	r28
    5c30:	08 95       	ret

Disassembly of section .text.sys_sleep_cmd:

0000496e <sys_sleep_cmd>:
/*************************************************************
 * Sys commands
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    496e:	cf 93       	push	r28
    4970:	df 93       	push	r29
    if (time < 100 || time >= 4294967296)
    4972:	44 36       	cpi	r20, 0x64	; 100
    4974:	51 05       	cpc	r21, r1
    4976:	61 05       	cpc	r22, r1
    4978:	71 05       	cpc	r23, r1
    497a:	18 f1       	brcs	.+70     	; 0x49c2 <sys_sleep_cmd+0x54>
    497c:	ec 01       	movw	r28, r24
        return -1;

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    497e:	7f 93       	push	r23
    4980:	6f 93       	push	r22
    4982:	5f 93       	push	r21
    4984:	4f 93       	push	r20
    4986:	89 ea       	ldi	r24, 0xA9	; 169
    4988:	97 e0       	ldi	r25, 0x07	; 7
    498a:	a0 e0       	ldi	r26, 0x00	; 0
    498c:	af 93       	push	r26
    498e:	9f 93       	push	r25
    4990:	8f 93       	push	r24
    4992:	83 eb       	ldi	r24, 0xB3	; 179
    4994:	97 e0       	ldi	r25, 0x07	; 7
    4996:	a0 e0       	ldi	r26, 0x00	; 0
    4998:	af 93       	push	r26
    499a:	9f 93       	push	r25
    499c:	8f 93       	push	r24
    499e:	df 93       	push	r29
    49a0:	cf 93       	push	r28
    49a2:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    return strlen(buffer);
    49a6:	be 01       	movw	r22, r28
    49a8:	80 e8       	ldi	r24, 0x80	; 128
    49aa:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    49ae:	2d b7       	in	r18, 0x3d	; 61
    49b0:	3e b7       	in	r19, 0x3e	; 62
    49b2:	24 5f       	subi	r18, 0xF4	; 244
    49b4:	3f 4f       	sbci	r19, 0xFF	; 255
    49b6:	0f b6       	in	r0, 0x3f	; 63
    49b8:	f8 94       	cli
    49ba:	3e bf       	out	0x3e, r19	; 62
    49bc:	0f be       	out	0x3f, r0	; 63
    49be:	2d bf       	out	0x3d, r18	; 61
    49c0:	02 c0       	rjmp	.+4      	; 0x49c6 <sys_sleep_cmd+0x58>
**************************************************************/

int16_t sys_sleep_cmd(char buffer[], uint32_t time)
{
    if (time < 100 || time >= 4294967296)
        return -1;
    49c2:	8f ef       	ldi	r24, 0xFF	; 255
    49c4:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %ld", SYS_SLEEP, time);
    return strlen(buffer);
}
    49c6:	df 91       	pop	r29
    49c8:	cf 91       	pop	r28
    49ca:	08 95       	ret

Disassembly of section .text.mac_set_parameter:

00004ecc <mac_set_parameter>:
/*************************************************************
 * Mac commands
**************************************************************/

int16_t mac_set_parameter(char buffer[], const char *cmd, const char *parameter)
{
    4ecc:	0f 93       	push	r16
    4ece:	1f 93       	push	r17
    4ed0:	cf 93       	push	r28
    4ed2:	df 93       	push	r29
    4ed4:	ec 01       	movw	r28, r24
    sprintf(buffer, "%s %s", cmd, parameter);
    4ed6:	2f 93       	push	r18
    4ed8:	1f 93       	push	r17
    4eda:	0f 93       	push	r16
    4edc:	6f 93       	push	r22
    4ede:	5f 93       	push	r21
    4ee0:	4f 93       	push	r20
    4ee2:	8a eb       	ldi	r24, 0xBA	; 186
    4ee4:	97 e0       	ldi	r25, 0x07	; 7
    4ee6:	a0 e0       	ldi	r26, 0x00	; 0
    4ee8:	af 93       	push	r26
    4eea:	9f 93       	push	r25
    4eec:	8f 93       	push	r24
    4eee:	df 93       	push	r29
    4ef0:	cf 93       	push	r28
    4ef2:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    return strlen(buffer);
    4ef6:	be 01       	movw	r22, r28
    4ef8:	80 e8       	ldi	r24, 0x80	; 128
    4efa:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    4efe:	2d b7       	in	r18, 0x3d	; 61
    4f00:	3e b7       	in	r19, 0x3e	; 62
    4f02:	25 5f       	subi	r18, 0xF5	; 245
    4f04:	3f 4f       	sbci	r19, 0xFF	; 255
    4f06:	0f b6       	in	r0, 0x3f	; 63
    4f08:	f8 94       	cli
    4f0a:	3e bf       	out	0x3e, r19	; 62
    4f0c:	0f be       	out	0x3f, r0	; 63
    4f0e:	2d bf       	out	0x3d, r18	; 61
}
    4f10:	df 91       	pop	r29
    4f12:	cf 91       	pop	r28
    4f14:	1f 91       	pop	r17
    4f16:	0f 91       	pop	r16
    4f18:	08 95       	ret

Disassembly of section .text.mac_set_deveui:

000052a2 <mac_set_deveui>:


int16_t mac_set_deveui(char buffer[], char *eui)
{
    52a2:	cf 92       	push	r12
    52a4:	df 92       	push	r13
    52a6:	ef 92       	push	r14
    52a8:	0f 93       	push	r16
    52aa:	1f 93       	push	r17
    52ac:	cf 93       	push	r28
    52ae:	df 93       	push	r29
    52b0:	ec 01       	movw	r28, r24
    if (strlen(eui) != 16)
    52b2:	6b 01       	movw	r12, r22
    52b4:	80 e8       	ldi	r24, 0x80	; 128
    52b6:	e8 2e       	mov	r14, r24
    52b8:	8e 2d       	mov	r24, r14
    52ba:	b6 01       	movw	r22, r12
    52bc:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    52c0:	40 97       	sbiw	r24, 0x10	; 16
    52c2:	49 f4       	brne	.+18     	; 0x52d6 <mac_set_deveui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
    52c4:	2e 2d       	mov	r18, r14
    52c6:	86 01       	movw	r16, r12
    52c8:	40 ec       	ldi	r20, 0xC0	; 192
    52ca:	57 e0       	ldi	r21, 0x07	; 7
    52cc:	60 e0       	ldi	r22, 0x00	; 0
    52ce:	ce 01       	movw	r24, r28
    52d0:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <mac_set_parameter>
    52d4:	02 c0       	rjmp	.+4      	; 0x52da <mac_set_deveui+0x38>


int16_t mac_set_deveui(char buffer[], char *eui)
{
    if (strlen(eui) != 16)
        return -1;
    52d6:	8f ef       	ldi	r24, 0xFF	; 255
    52d8:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_DEVEUI, eui);
}
    52da:	df 91       	pop	r29
    52dc:	cf 91       	pop	r28
    52de:	1f 91       	pop	r17
    52e0:	0f 91       	pop	r16
    52e2:	ef 90       	pop	r14
    52e4:	df 90       	pop	r13
    52e6:	cf 90       	pop	r12
    52e8:	08 95       	ret

Disassembly of section .text.mac_set_appeui:

000052ea <mac_set_appeui>:

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    52ea:	cf 92       	push	r12
    52ec:	df 92       	push	r13
    52ee:	ef 92       	push	r14
    52f0:	0f 93       	push	r16
    52f2:	1f 93       	push	r17
    52f4:	cf 93       	push	r28
    52f6:	df 93       	push	r29
    52f8:	ec 01       	movw	r28, r24
    if (strlen(appeui) != 16)
    52fa:	6b 01       	movw	r12, r22
    52fc:	80 e8       	ldi	r24, 0x80	; 128
    52fe:	e8 2e       	mov	r14, r24
    5300:	8e 2d       	mov	r24, r14
    5302:	b6 01       	movw	r22, r12
    5304:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    5308:	40 97       	sbiw	r24, 0x10	; 16
    530a:	49 f4       	brne	.+18     	; 0x531e <mac_set_appeui+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
    530c:	2e 2d       	mov	r18, r14
    530e:	86 01       	movw	r16, r12
    5310:	4f ec       	ldi	r20, 0xCF	; 207
    5312:	57 e0       	ldi	r21, 0x07	; 7
    5314:	60 e0       	ldi	r22, 0x00	; 0
    5316:	ce 01       	movw	r24, r28
    5318:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <mac_set_parameter>
    531c:	02 c0       	rjmp	.+4      	; 0x5322 <mac_set_appeui+0x38>
}

int16_t mac_set_appeui(char buffer[], char *appeui)
{
    if (strlen(appeui) != 16)
        return -1;
    531e:	8f ef       	ldi	r24, 0xFF	; 255
    5320:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPEUI, appeui);
}
    5322:	df 91       	pop	r29
    5324:	cf 91       	pop	r28
    5326:	1f 91       	pop	r17
    5328:	0f 91       	pop	r16
    532a:	ef 90       	pop	r14
    532c:	df 90       	pop	r13
    532e:	cf 90       	pop	r12
    5330:	08 95       	ret

Disassembly of section .text.mac_set_appkey:

00005332 <mac_set_appkey>:

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    5332:	cf 92       	push	r12
    5334:	df 92       	push	r13
    5336:	ef 92       	push	r14
    5338:	0f 93       	push	r16
    533a:	1f 93       	push	r17
    533c:	cf 93       	push	r28
    533e:	df 93       	push	r29
    5340:	ec 01       	movw	r28, r24
    if (strlen(appkey) != 32)
    5342:	6b 01       	movw	r12, r22
    5344:	80 e8       	ldi	r24, 0x80	; 128
    5346:	e8 2e       	mov	r14, r24
    5348:	8e 2d       	mov	r24, r14
    534a:	b6 01       	movw	r22, r12
    534c:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    5350:	80 97       	sbiw	r24, 0x20	; 32
    5352:	49 f4       	brne	.+18     	; 0x5366 <mac_set_appkey+0x34>
        return -1;
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
    5354:	2e 2d       	mov	r18, r14
    5356:	86 01       	movw	r16, r12
    5358:	4e ed       	ldi	r20, 0xDE	; 222
    535a:	57 e0       	ldi	r21, 0x07	; 7
    535c:	60 e0       	ldi	r22, 0x00	; 0
    535e:	ce 01       	movw	r24, r28
    5360:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <mac_set_parameter>
    5364:	02 c0       	rjmp	.+4      	; 0x536a <mac_set_appkey+0x38>
}

int16_t mac_set_appkey(char buffer[], char *appkey)
{
    if (strlen(appkey) != 32)
        return -1;
    5366:	8f ef       	ldi	r24, 0xFF	; 255
    5368:	9f ef       	ldi	r25, 0xFF	; 255
    return mac_set_parameter(buffer, SET_APPKEY, appkey);
}
    536a:	df 91       	pop	r29
    536c:	cf 91       	pop	r28
    536e:	1f 91       	pop	r17
    5370:	0f 91       	pop	r16
    5372:	ef 90       	pop	r14
    5374:	df 90       	pop	r13
    5376:	cf 90       	pop	r12
    5378:	08 95       	ret

Disassembly of section .text.mac_set_ADR:

00005d56 <mac_set_ADR>:

int16_t mac_set_ADR(char buffer[], unsigned char state){
    5d56:	0f 93       	push	r16
    5d58:	1f 93       	push	r17
	if(state==0){
    5d5a:	61 11       	cpse	r22, r1
    5d5c:	09 c0       	rjmp	.+18     	; 0x5d70 <mac_set_ADR+0x1a>
		return mac_set_parameter(buffer, SET_ADR, OFF);
    5d5e:	0d ee       	ldi	r16, 0xED	; 237
    5d60:	17 e0       	ldi	r17, 0x07	; 7
    5d62:	20 e0       	ldi	r18, 0x00	; 0
    5d64:	41 ef       	ldi	r20, 0xF1	; 241
    5d66:	57 e0       	ldi	r21, 0x07	; 7
    5d68:	60 e0       	ldi	r22, 0x00	; 0
    5d6a:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <mac_set_parameter>
    5d6e:	08 c0       	rjmp	.+16     	; 0x5d80 <mac_set_ADR+0x2a>
	}else{
		return mac_set_parameter(buffer, SET_ADR, ON);
    5d70:	0d ef       	ldi	r16, 0xFD	; 253
    5d72:	17 e0       	ldi	r17, 0x07	; 7
    5d74:	20 e0       	ldi	r18, 0x00	; 0
    5d76:	41 ef       	ldi	r20, 0xF1	; 241
    5d78:	57 e0       	ldi	r21, 0x07	; 7
    5d7a:	60 e0       	ldi	r22, 0x00	; 0
    5d7c:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <mac_set_parameter>
	}
}
    5d80:	1f 91       	pop	r17
    5d82:	0f 91       	pop	r16
    5d84:	08 95       	ret

Disassembly of section .text.mac_tx_confirmed:

0000391a <mac_tx_confirmed>:

int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
    391a:	df 92       	push	r13
    391c:	ef 92       	push	r14
    391e:	ff 92       	push	r15
    3920:	0f 93       	push	r16
    3922:	1f 93       	push	r17
    3924:	cf 93       	push	r28
    3926:	df 93       	push	r29
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
    392c:	c7 56       	subi	r28, 0x67	; 103
    392e:	d1 09       	sbc	r29, r1
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	8c 01       	movw	r16, r24
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
    393c:	9f ef       	ldi	r25, 0xFF	; 255
    393e:	96 0f       	add	r25, r22
    3940:	9f 3d       	cpi	r25, 0xDF	; 223
    3942:	68 f5       	brcc	.+90     	; 0x399e <mac_tx_confirmed+0x84>
        return -1;

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
    3944:	9f ef       	ldi	r25, 0xFF	; 255
    3946:	92 0f       	add	r25, r18
    3948:	93 33       	cpi	r25, 0x33	; 51
    394a:	60 f5       	brcc	.+88     	; 0x39a4 <mac_tx_confirmed+0x8a>
    394c:	d6 2e       	mov	r13, r22
        return -1;
	
    
    tohex(dataHex, data, bytes);
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	60 e8       	ldi	r22, 0x80	; 128
    3952:	ce 01       	movw	r24, r28
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	7c 01       	movw	r14, r24
    3958:	0e 94 76 20 	call	0x40ec	; 0x40ec <tohex>

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    395c:	c7 01       	movw	r24, r14
    395e:	a0 e8       	ldi	r26, 0x80	; 128
    3960:	af 93       	push	r26
    3962:	9f 93       	push	r25
    3964:	ef 92       	push	r14
    3966:	1f 92       	push	r1
    3968:	df 92       	push	r13
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	98 e0       	ldi	r25, 0x08	; 8
    396e:	a0 e0       	ldi	r26, 0x00	; 0
    3970:	af 93       	push	r26
    3972:	9f 93       	push	r25
    3974:	8f 93       	push	r24
    3976:	8b e0       	ldi	r24, 0x0B	; 11
    3978:	98 e0       	ldi	r25, 0x08	; 8
    397a:	a0 e0       	ldi	r26, 0x00	; 0
    397c:	af 93       	push	r26
    397e:	9f 93       	push	r25
    3980:	8f 93       	push	r24
    3982:	1f 93       	push	r17
    3984:	0f 93       	push	r16
    3986:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    
	
    return strlen(buffer);
    398a:	b8 01       	movw	r22, r16
    398c:	80 e8       	ldi	r24, 0x80	; 128
    398e:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	f8 94       	cli
    3996:	de bf       	out	0x3e, r29	; 62
    3998:	0f be       	out	0x3f, r0	; 63
    399a:	cd bf       	out	0x3d, r28	; 61
    399c:	05 c0       	rjmp	.+10     	; 0x39a8 <mac_tx_confirmed+0x8e>
int16_t mac_tx_confirmed(char buffer[], uint8_t port,  uint8_t data[], uint8_t bytes)
{
	char dataHex[MAX_PAYLOAD_SIZE_EU868 * 2 + 1];
	
    if (port < PORT_MIN || port > PORT_MAX)
        return -1;
    399e:	8f ef       	ldi	r24, 0xFF	; 255
    39a0:	9f ef       	ldi	r25, 0xFF	; 255
    39a2:	02 c0       	rjmp	.+4      	; 0x39a8 <mac_tx_confirmed+0x8e>

    if (bytes > MAX_PAYLOAD_SIZE_EU868 || bytes <= 0)
        return -1;
    39a4:	8f ef       	ldi	r24, 0xFF	; 255
    39a6:	9f ef       	ldi	r25, 0xFF	; 255

    sprintf(buffer, "%s %u %s", MAC_TX_CONFIRMED, port, (const char *)dataHex);
    
	
    return strlen(buffer);
}
    39a8:	c9 59       	subi	r28, 0x99	; 153
    39aa:	df 4f       	sbci	r29, 0xFF	; 255
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	df 91       	pop	r29
    39b8:	cf 91       	pop	r28
    39ba:	1f 91       	pop	r17
    39bc:	0f 91       	pop	r16
    39be:	ff 90       	pop	r15
    39c0:	ef 90       	pop	r14
    39c2:	df 90       	pop	r13
    39c4:	08 95       	ret

Disassembly of section .text.decode_tx_response:

00004838 <decode_tx_response>:
			break;
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
    4838:	cf 92       	push	r12
    483a:	df 92       	push	r13
    483c:	ef 92       	push	r14
    483e:	6b 01       	movw	r12, r22
    4840:	e8 2e       	mov	r14, r24
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    4842:	2c e6       	ldi	r18, 0x6C	; 108
    4844:	38 e0       	ldi	r19, 0x08	; 8
    4846:	40 e0       	ldi	r20, 0x00	; 0
    4848:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    484c:	89 2b       	or	r24, r25
    484e:	e9 f0       	breq	.+58     	; 0x488a <decode_tx_response+0x52>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    4850:	27 e7       	ldi	r18, 0x77	; 119
    4852:	38 e0       	ldi	r19, 0x08	; 8
    4854:	40 e0       	ldi	r20, 0x00	; 0
    4856:	8e 2d       	mov	r24, r14
    4858:	b6 01       	movw	r22, r12
    485a:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    485e:	89 2b       	or	r24, r25
    4860:	b1 f0       	breq	.+44     	; 0x488e <decode_tx_response+0x56>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    4862:	2f e7       	ldi	r18, 0x7F	; 127
    4864:	38 e0       	ldi	r19, 0x08	; 8
    4866:	40 e0       	ldi	r20, 0x00	; 0
    4868:	8e 2d       	mov	r24, r14
    486a:	b6 01       	movw	r22, r12
    486c:	0e 94 08 29 	call	0x5210	; 0x5210 <util_strbeginswith>
    4870:	81 11       	cpse	r24, r1
    4872:	0f c0       	rjmp	.+30     	; 0x4892 <decode_tx_response+0x5a>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
    4874:	26 e8       	ldi	r18, 0x86	; 134
    4876:	38 e0       	ldi	r19, 0x08	; 8
    4878:	40 e0       	ldi	r20, 0x00	; 0
    487a:	8e 2d       	mov	r24, r14
    487c:	b6 01       	movw	r22, r12
    487e:	0e 94 08 29 	call	0x5210	; 0x5210 <util_strbeginswith>
    4882:	88 23       	and	r24, r24
    4884:	41 f0       	breq	.+16     	; 0x4896 <decode_tx_response+0x5e>
    4886:	85 e0       	ldi	r24, 0x05	; 5
    4888:	07 c0       	rjmp	.+14     	; 0x4898 <decode_tx_response+0x60>
		}
	}
}

static LM_STATUS decode_tx_response(const char msg[]){
	if(strcmp(msg, NO_FREE_CH)==0)return LM_STATUS_TRY_AGAIN;
    488a:	82 e0       	ldi	r24, 0x02	; 2
    488c:	05 c0       	rjmp	.+10     	; 0x4898 <decode_tx_response+0x60>
	if(strcmp(msg, MAC_ERR)==0)return LM_STATUS_MAC_ERR;
    488e:	84 e0       	ldi	r24, 0x04	; 4
    4890:	03 c0       	rjmp	.+6      	; 0x4898 <decode_tx_response+0x60>
	if(util_strbeginswith(msg, MAC_RX)) return LM_STATUS_SUCCESS;
    4892:	80 e0       	ldi	r24, 0x00	; 0
    4894:	01 c0       	rjmp	.+2      	; 0x4898 <decode_tx_response+0x60>
	if(util_strbeginswith(msg, INVALID_DATA_LEN)) return LM_STATUS_INV_DATA_LEN;
	
	return LM_STATUS_FATAL_ERROR;
    4896:	81 e0       	ldi	r24, 0x01	; 1
}
    4898:	ef 90       	pop	r14
    489a:	df 90       	pop	r13
    489c:	cf 90       	pop	r12
    489e:	08 95       	ret

Disassembly of section .text.SU_send_uplink:

00002e7c <SU_send_uplink>:
#include "../../../HAL/UART0/UART0_HAL.h"
#include "../RN2483_protocol/RN2483_protocol.h"

static LM_STATUS decode_tx_response(const char msg[]);

LM_STATUS SU_send_uplink(uint8_t port, uint8_t data[], uint8_t length){
    2e7c:	df 92       	push	r13
    2e7e:	ef 92       	push	r14
    2e80:	ff 92       	push	r15
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	28 97       	sbiw	r28, 0x08	; 8
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	d8 2e       	mov	r13, r24
    2e9c:	7b 01       	movw	r14, r22
    2e9e:	04 2f       	mov	r16, r20
	
	SU_STATES state=SU_SEND_PAYLOAD;
    2ea0:	10 e0       	ldi	r17, 0x00	; 0
	LM_STATE_DATA stateData;
	
	while(1){
		switch(state){
    2ea2:	12 30       	cpi	r17, 0x02	; 2
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <SU_send_uplink+0x2c>
    2ea6:	40 c0       	rjmp	.+128    	; 0x2f28 <SU_send_uplink+0xac>
    2ea8:	28 f4       	brcc	.+10     	; 0x2eb4 <SU_send_uplink+0x38>
    2eaa:	11 23       	and	r17, r17
    2eac:	49 f0       	breq	.+18     	; 0x2ec0 <SU_send_uplink+0x44>
    2eae:	11 30       	cpi	r17, 0x01	; 1
    2eb0:	49 f1       	breq	.+82     	; 0x2f04 <SU_send_uplink+0x88>
    2eb2:	f7 cf       	rjmp	.-18     	; 0x2ea2 <SU_send_uplink+0x26>
    2eb4:	13 30       	cpi	r17, 0x03	; 3
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <SU_send_uplink+0x3e>
    2eb8:	4e c0       	rjmp	.+156    	; 0x2f56 <SU_send_uplink+0xda>
    2eba:	14 30       	cpi	r17, 0x04	; 4
    2ebc:	d9 f1       	breq	.+118    	; 0x2f34 <SU_send_uplink+0xb8>
    2ebe:	f1 cf       	rjmp	.-30     	; 0x2ea2 <SU_send_uplink+0x26>
			case SU_SEND_PAYLOAD:
				mac_tx_confirmed(lm_msg, port, data, length);
    2ec0:	20 2f       	mov	r18, r16
    2ec2:	a7 01       	movw	r20, r14
    2ec4:	6d 2d       	mov	r22, r13
    2ec6:	8e e5       	ldi	r24, 0x5E	; 94
    2ec8:	92 e0       	ldi	r25, 0x02	; 2
    2eca:	0e 94 8d 1c 	call	0x391a	; 0x391a <mac_tx_confirmed>
				attach_ending(lm_msg);
    2ece:	8e e5       	ldi	r24, 0x5E	; 94
    2ed0:	92 e0       	ldi	r25, 0x02	; 2
    2ed2:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <attach_ending>
				uart0_hal_send_string(lm_msg);
    2ed6:	6e e5       	ldi	r22, 0x5E	; 94
    2ed8:	72 e0       	ldi	r23, 0x02	; 2
    2eda:	80 e8       	ldi	r24, 0x80	; 128
    2edc:	0e 94 43 23 	call	0x4686	; 0x4686 <uart0_hal_send_string>
				
				util_setPendingStates(&stateData, SU_SEND_PAYLOAD_RES_2, SU_TX_DECODE_RES);
    2ee0:	42 e0       	ldi	r20, 0x02	; 2
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	61 e0       	ldi	r22, 0x01	; 1
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	ce 01       	movw	r24, r28
    2eea:	01 96       	adiw	r24, 0x01	; 1
    2eec:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, OK);
    2ef0:	27 e9       	ldi	r18, 0x97	; 151
    2ef2:	38 e0       	ldi	r19, 0x08	; 8
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	60 e0       	ldi	r22, 0x00	; 0
    2ef8:	ce 01       	movw	r24, r28
    2efa:	01 96       	adiw	r24, 0x01	; 1
    2efc:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    2f00:	14 e0       	ldi	r17, 0x04	; 4
			break;
    2f02:	cf cf       	rjmp	.-98     	; 0x2ea2 <SU_send_uplink+0x26>
			
			case SU_SEND_PAYLOAD_RES_2:
				util_setPendingStates(&stateData, SU_SENDING_SUCCESS, SU_TX_DECODE_RES);
    2f04:	42 e0       	ldi	r20, 0x02	; 2
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	63 e0       	ldi	r22, 0x03	; 3
    2f0a:	70 e0       	ldi	r23, 0x00	; 0
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	01 96       	adiw	r24, 0x01	; 1
    2f10:	0e 94 ee 33 	call	0x67dc	; 0x67dc <util_setPendingStates>
				util_setMatchCase(&stateData, LM_EXACT, MAC_TX_OK);
    2f14:	2a e9       	ldi	r18, 0x9A	; 154
    2f16:	38 e0       	ldi	r19, 0x08	; 8
    2f18:	40 e0       	ldi	r20, 0x00	; 0
    2f1a:	60 e0       	ldi	r22, 0x00	; 0
    2f1c:	ce 01       	movw	r24, r28
    2f1e:	01 96       	adiw	r24, 0x01	; 1
    2f20:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <util_setMatchCase>
				state=SU_WAIT_FOR_INCOMMING;
    2f24:	14 e0       	ldi	r17, 0x04	; 4
			break;
    2f26:	bd cf       	rjmp	.-134    	; 0x2ea2 <SU_send_uplink+0x26>
			
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
    2f28:	6e e5       	ldi	r22, 0x5E	; 94
    2f2a:	72 e0       	ldi	r23, 0x02	; 2
    2f2c:	80 e8       	ldi	r24, 0x80	; 128
    2f2e:	0e 94 1c 24 	call	0x4838	; 0x4838 <decode_tx_response>
    2f32:	12 c0       	rjmp	.+36     	; 0x2f58 <SU_send_uplink+0xdc>
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
				
			case SU_WAIT_FOR_INCOMMING:
				if(uart0_hal_message_ready()){
    2f34:	0e 94 35 33 	call	0x666a	; 0x666a <uart0_hal_message_ready>
    2f38:	88 23       	and	r24, r24
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <SU_send_uplink+0xc2>
    2f3c:	b2 cf       	rjmp	.-156    	; 0x2ea2 <SU_send_uplink+0x26>
					uart0_hal_read_message_as_str(lm_msg);
    2f3e:	8e e5       	ldi	r24, 0x5E	; 94
    2f40:	92 e0       	ldi	r25, 0x02	; 2
    2f42:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <uart0_hal_read_message_as_str>
					state=util_matchMessage(&stateData, lm_msg);
    2f46:	6e e5       	ldi	r22, 0x5E	; 94
    2f48:	72 e0       	ldi	r23, 0x02	; 2
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	01 96       	adiw	r24, 0x01	; 1
    2f4e:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <util_matchMessage>
    2f52:	18 2f       	mov	r17, r24
    2f54:	a6 cf       	rjmp	.-180    	; 0x2ea2 <SU_send_uplink+0x26>
			case SU_TX_DECODE_RES:
				return decode_tx_response(lm_msg);
			break;
			
			case SU_SENDING_SUCCESS:
				return LM_STATUS_SUCCESS;
    2f56:	80 e0       	ldi	r24, 0x00	; 0
					state=util_matchMessage(&stateData, lm_msg);
				}
			break;
		}
	}
}
    2f58:	28 96       	adiw	r28, 0x08	; 8
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	1f 91       	pop	r17
    2f6a:	0f 91       	pop	r16
    2f6c:	ff 90       	pop	r15
    2f6e:	ef 90       	pop	r14
    2f70:	df 90       	pop	r13
    2f72:	08 95       	ret

Disassembly of section .text.cb_counter:

00006566 <cb_counter>:
		return LM_STATUS_FATAL_ERROR;
	}
}

static void cb_counter(){
	cnt++;
    6566:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    656a:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    656e:	01 96       	adiw	r24, 0x01	; 1
    6570:	90 93 86 0f 	sts	0x0F86, r25	; 0x800f86 <cnt+0x1>
    6574:	80 93 85 0f 	sts	0x0F85, r24	; 0x800f85 <cnt>
    6578:	08 95       	ret

Disassembly of section .text.SC_put_to_sleep:

000059b0 <SC_put_to_sleep>:
static uint16_t cnt=0;
static int8_t eventPointer;

LM_STATUS SC_put_to_sleep(){
	
	sys_sleep_cmd(lm_msg, (uint32_t) 86400000);
    59b0:	40 e0       	ldi	r20, 0x00	; 0
    59b2:	5c e5       	ldi	r21, 0x5C	; 92
    59b4:	66 e2       	ldi	r22, 0x26	; 38
    59b6:	75 e0       	ldi	r23, 0x05	; 5
    59b8:	8e e5       	ldi	r24, 0x5E	; 94
    59ba:	92 e0       	ldi	r25, 0x02	; 2
    59bc:	0e 94 b7 24 	call	0x496e	; 0x496e <sys_sleep_cmd>
	attach_ending(lm_msg);
    59c0:	8e e5       	ldi	r24, 0x5E	; 94
    59c2:	92 e0       	ldi	r25, 0x02	; 2
    59c4:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <attach_ending>
	uart0_hal_send_string(lm_msg);
    59c8:	6e e5       	ldi	r22, 0x5E	; 94
    59ca:	72 e0       	ldi	r23, 0x02	; 2
    59cc:	80 e8       	ldi	r24, 0x80	; 128
    59ce:	0e 94 43 23 	call	0x4686	; 0x4686 <uart0_hal_send_string>
    59d2:	2f ef       	ldi	r18, 0xFF	; 255
    59d4:	81 ee       	ldi	r24, 0xE1	; 225
    59d6:	94 e0       	ldi	r25, 0x04	; 4
    59d8:	21 50       	subi	r18, 0x01	; 1
    59da:	80 40       	sbci	r24, 0x00	; 0
    59dc:	90 40       	sbci	r25, 0x00	; 0
    59de:	e1 f7       	brne	.-8      	; 0x59d8 <SC_put_to_sleep+0x28>
    59e0:	00 c0       	rjmp	.+0      	; 0x59e2 <SC_put_to_sleep+0x32>
    59e2:	00 00       	nop
	_delay_ms(200);
	return LM_STATUS_SUCCESS;
}
    59e4:	80 e0       	ldi	r24, 0x00	; 0
    59e6:	08 95       	ret

Disassembly of section .text.SC_wake_up:

000046f4 <SC_wake_up>:

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
    46f4:	85 e5       	ldi	r24, 0x55	; 85
    46f6:	0e 94 bd 29 	call	0x537a	; 0x537a <uart0_hal_send_break>
	
	//Create watchdog
	cnt=0;
    46fa:	10 92 86 0f 	sts	0x0F86, r1	; 0x800f86 <cnt+0x1>
    46fe:	10 92 85 0f 	sts	0x0F85, r1	; 0x800f85 <cnt>
	eventPointer=TC2_HAL_subscribe(&cb_counter);
    4702:	83 eb       	ldi	r24, 0xB3	; 179
    4704:	92 e3       	ldi	r25, 0x32	; 50
    4706:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <TC2_HAL_subscribe>
    470a:	80 93 a5 0f 	sts	0x0FA5, r24	; 0x800fa5 <eventPointer>
	
	//Expect ok from sleep
	while(uart0_hal_message_ready()==false && cnt<LM_SLEEP_WATCHDOG_CNT){}
    470e:	0e 94 35 33 	call	0x666a	; 0x666a <uart0_hal_message_ready>
    4712:	81 11       	cpse	r24, r1
    4714:	06 c0       	rjmp	.+12     	; 0x4722 <SC_wake_up+0x2e>
    4716:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    471a:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    471e:	cc 97       	sbiw	r24, 0x3c	; 60
    4720:	b0 f3       	brcs	.-20     	; 0x470e <SC_wake_up+0x1a>
		
	TC2_HAL_cancel(eventPointer);
    4722:	80 91 a5 0f 	lds	r24, 0x0FA5	; 0x800fa5 <eventPointer>
    4726:	0e 94 2b 2c 	call	0x5856	; 0x5856 <TC2_HAL_cancel>
		
	if(cnt>=LM_SLEEP_WATCHDOG_CNT){
    472a:	80 91 85 0f 	lds	r24, 0x0F85	; 0x800f85 <cnt>
    472e:	90 91 86 0f 	lds	r25, 0x0F86	; 0x800f86 <cnt+0x1>
    4732:	cc 97       	sbiw	r24, 0x3c	; 60
    4734:	20 f0       	brcs	.+8      	; 0x473e <SC_wake_up+0x4a>
		uart0_hal_clear_rx_buffer();
    4736:	0e 94 1c 34 	call	0x6838	; 0x6838 <uart0_hal_clear_rx_buffer>
		return LM_STATUS_FATAL_ERROR;
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	08 95       	ret
	}else{
		uart0_hal_read_message_as_str(lm_msg);
    473e:	8e e5       	ldi	r24, 0x5E	; 94
    4740:	92 e0       	ldi	r25, 0x02	; 2
    4742:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <uart0_hal_read_message_as_str>
		
		if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
    4746:	6e e5       	ldi	r22, 0x5E	; 94
    4748:	72 e0       	ldi	r23, 0x02	; 2
    474a:	80 e8       	ldi	r24, 0x80	; 128
    474c:	29 ec       	ldi	r18, 0xC9	; 201
    474e:	38 e0       	ldi	r19, 0x08	; 8
    4750:	40 e0       	ldi	r20, 0x00	; 0
    4752:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    4756:	89 2b       	or	r24, r25
    4758:	11 f4       	brne	.+4      	; 0x475e <SC_wake_up+0x6a>
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	08 95       	ret
		return LM_STATUS_FATAL_ERROR;
    475e:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    4760:	08 95       	ret

Disassembly of section .text.cb_watchdog_counter:

000067d0 <cb_watchdog_counter>:
void util_send_break(){
	uart0_hal_send_break(0x55);
}

static void cb_watchdog_counter(){
	wd_cnt++;
    67d0:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    67d4:	8f 5f       	subi	r24, 0xFF	; 255
    67d6:	80 93 a7 0f 	sts	0x0FA7, r24	; 0x800fa7 <wd_cnt>
    67da:	08 95       	ret

Disassembly of section .text.util_setPendingStates:

000067dc <util_setPendingStates>:
char lm_msg[200];

static void cb_watchdog_counter();

void util_setPendingStates(LM_STATE_DATA *sd, int success, int failed){
	sd->success_state=success;
    67dc:	fc 01       	movw	r30, r24
    67de:	71 83       	std	Z+1, r23	; 0x01
    67e0:	60 83       	st	Z, r22
	sd->failure_state=failed;
    67e2:	53 83       	std	Z+3, r21	; 0x03
    67e4:	42 83       	std	Z+2, r20	; 0x02
    67e6:	08 95       	ret

Disassembly of section .text.util_setMatchCase:

000067e8 <util_setMatchCase>:
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
    67e8:	fc 01       	movw	r30, r24
    67ea:	64 83       	std	Z+4, r22	; 0x04
	sd->matchString=matchString;
    67ec:	25 83       	std	Z+5, r18	; 0x05
    67ee:	36 83       	std	Z+6, r19	; 0x06
    67f0:	47 83       	std	Z+7, r20	; 0x07
    67f2:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

00005210 <util_strbeginswith>:
		return sd->failure_state;
	}
}


bool util_strbeginswith(const char *s1, const char *s2){
    5210:	6f 92       	push	r6
    5212:	7f 92       	push	r7
    5214:	8f 92       	push	r8
    5216:	cf 92       	push	r12
    5218:	df 92       	push	r13
    521a:	ef 92       	push	r14
    521c:	0f 93       	push	r16
    521e:	1f 93       	push	r17
    5220:	3b 01       	movw	r6, r22
    5222:	88 2e       	mov	r8, r24
    5224:	69 01       	movw	r12, r18
    5226:	e4 2e       	mov	r14, r20
	return strncmp(s1, s2, strlen(s2))==0?true:false;
    5228:	84 2f       	mov	r24, r20
    522a:	b9 01       	movw	r22, r18
    522c:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    5230:	8c 01       	movw	r16, r24
    5232:	4e 2d       	mov	r20, r14
    5234:	96 01       	movw	r18, r12
    5236:	88 2d       	mov	r24, r8
    5238:	b3 01       	movw	r22, r6
    523a:	0e 94 e7 23 	call	0x47ce	; 0x47ce <strncmp>
    523e:	21 e0       	ldi	r18, 0x01	; 1
    5240:	89 2b       	or	r24, r25
    5242:	09 f0       	breq	.+2      	; 0x5246 <util_strbeginswith+0x36>
    5244:	20 e0       	ldi	r18, 0x00	; 0
}
    5246:	82 2f       	mov	r24, r18
    5248:	1f 91       	pop	r17
    524a:	0f 91       	pop	r16
    524c:	ef 90       	pop	r14
    524e:	df 90       	pop	r13
    5250:	cf 90       	pop	r12
    5252:	8f 90       	pop	r8
    5254:	7f 90       	pop	r7
    5256:	6f 90       	pop	r6
    5258:	08 95       	ret

Disassembly of section .text.util_matchMessage:

00004a2a <util_matchMessage>:
void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
}

int util_matchMessage(LM_STATE_DATA *sd, char *msg){
    4a2a:	cf 93       	push	r28
    4a2c:	df 93       	push	r29
    4a2e:	ec 01       	movw	r28, r24
	switch(sd->matchCase){
    4a30:	8c 81       	ldd	r24, Y+4	; 0x04
    4a32:	81 30       	cpi	r24, 0x01	; 1
    4a34:	91 f0       	breq	.+36     	; 0x4a5a <util_matchMessage+0x30>
    4a36:	18 f0       	brcs	.+6      	; 0x4a3e <util_matchMessage+0x14>
    4a38:	82 30       	cpi	r24, 0x02	; 2
    4a3a:	e9 f0       	breq	.+58     	; 0x4a76 <util_matchMessage+0x4c>
    4a3c:	1f c0       	rjmp	.+62     	; 0x4a7c <util_matchMessage+0x52>
		case LM_EXACT:
		return strcmp(msg, sd->matchString)==0?sd->success_state:sd->failure_state;
    4a3e:	2d 81       	ldd	r18, Y+5	; 0x05
    4a40:	3e 81       	ldd	r19, Y+6	; 0x06
    4a42:	4f 81       	ldd	r20, Y+7	; 0x07
    4a44:	80 e8       	ldi	r24, 0x80	; 128
    4a46:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    4a4a:	89 2b       	or	r24, r25
    4a4c:	19 f4       	brne	.+6      	; 0x4a54 <util_matchMessage+0x2a>
    4a4e:	88 81       	ld	r24, Y
    4a50:	99 81       	ldd	r25, Y+1	; 0x01
    4a52:	16 c0       	rjmp	.+44     	; 0x4a80 <util_matchMessage+0x56>
    4a54:	8a 81       	ldd	r24, Y+2	; 0x02
    4a56:	9b 81       	ldd	r25, Y+3	; 0x03
    4a58:	13 c0       	rjmp	.+38     	; 0x4a80 <util_matchMessage+0x56>

		case LM_BEGINS_WITH:
		return util_strbeginswith(msg, sd->matchString)?sd->success_state:sd->failure_state;
    4a5a:	2d 81       	ldd	r18, Y+5	; 0x05
    4a5c:	3e 81       	ldd	r19, Y+6	; 0x06
    4a5e:	4f 81       	ldd	r20, Y+7	; 0x07
    4a60:	80 e8       	ldi	r24, 0x80	; 128
    4a62:	0e 94 08 29 	call	0x5210	; 0x5210 <util_strbeginswith>
    4a66:	88 23       	and	r24, r24
    4a68:	19 f0       	breq	.+6      	; 0x4a70 <util_matchMessage+0x46>
    4a6a:	88 81       	ld	r24, Y
    4a6c:	99 81       	ldd	r25, Y+1	; 0x01
    4a6e:	08 c0       	rjmp	.+16     	; 0x4a80 <util_matchMessage+0x56>
    4a70:	8a 81       	ldd	r24, Y+2	; 0x02
    4a72:	9b 81       	ldd	r25, Y+3	; 0x03
    4a74:	05 c0       	rjmp	.+10     	; 0x4a80 <util_matchMessage+0x56>

		case LM_NO_TEST:
		return sd->success_state;
    4a76:	88 81       	ld	r24, Y
    4a78:	99 81       	ldd	r25, Y+1	; 0x01
    4a7a:	02 c0       	rjmp	.+4      	; 0x4a80 <util_matchMessage+0x56>
		default:
		return sd->failure_state;
    4a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a7e:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    4a80:	df 91       	pop	r29
    4a82:	cf 91       	pop	r28
    4a84:	08 95       	ret

Disassembly of section .text.util_reset_module:

00005406 <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    5406:	0e 94 51 34 	call	0x68a2	; 0x68a2 <rn2483_reset_active>
    540a:	2f ef       	ldi	r18, 0xFF	; 255
    540c:	89 e6       	ldi	r24, 0x69	; 105
    540e:	98 e1       	ldi	r25, 0x18	; 24
    5410:	21 50       	subi	r18, 0x01	; 1
    5412:	80 40       	sbci	r24, 0x00	; 0
    5414:	90 40       	sbci	r25, 0x00	; 0
    5416:	e1 f7       	brne	.-8      	; 0x5410 <util_reset_module+0xa>
    5418:	00 c0       	rjmp	.+0      	; 0x541a <util_reset_module+0x14>
    541a:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    541c:	0e 94 55 34 	call	0x68aa	; 0x68aa <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    5420:	0e 94 35 33 	call	0x666a	; 0x666a <uart0_hal_message_ready>
    5424:	88 23       	and	r24, r24
    5426:	e1 f3       	breq	.-8      	; 0x5420 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    5428:	8e e5       	ldi	r24, 0x5E	; 94
    542a:	92 e0       	ldi	r25, 0x02	; 2
    542c:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    5430:	6e e5       	ldi	r22, 0x5E	; 94
    5432:	72 e0       	ldi	r23, 0x02	; 2
    5434:	80 e8       	ldi	r24, 0x80	; 128
    5436:	24 ea       	ldi	r18, 0xA4	; 164
    5438:	38 e0       	ldi	r19, 0x08	; 8
    543a:	40 e0       	ldi	r20, 0x00	; 0
    543c:	0e 94 08 29 	call	0x5210	; 0x5210 <util_strbeginswith>
    5440:	88 23       	and	r24, r24
    5442:	11 f0       	breq	.+4      	; 0x5448 <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    5448:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    544a:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00004266 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    4266:	cf 93       	push	r28
    4268:	df 93       	push	r29
    426a:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    426c:	ab 01       	movw	r20, r22
    426e:	68 2f       	mov	r22, r24
    4270:	8e e5       	ldi	r24, 0x5E	; 94
    4272:	92 e0       	ldi	r25, 0x02	; 2
    4274:	0e 94 51 31 	call	0x62a2	; 0x62a2 <strcpy>
	attach_ending(lm_msg);
    4278:	8e e5       	ldi	r24, 0x5E	; 94
    427a:	92 e0       	ldi	r25, 0x02	; 2
    427c:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <attach_ending>
	uart0_hal_send_string(lm_msg);
    4280:	6e e5       	ldi	r22, 0x5E	; 94
    4282:	72 e0       	ldi	r23, 0x02	; 2
    4284:	80 e8       	ldi	r24, 0x80	; 128
    4286:	0e 94 43 23 	call	0x4686	; 0x4686 <uart0_hal_send_string>
	
	wd_cnt=0;
    428a:	10 92 a7 0f 	sts	0x0FA7, r1	; 0x800fa7 <wd_cnt>
	wd_cb_pointer=TC2_HAL_subscribe(&cb_watchdog_counter);
    428e:	88 ee       	ldi	r24, 0xE8	; 232
    4290:	93 e3       	ldi	r25, 0x33	; 51
    4292:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <TC2_HAL_subscribe>
    4296:	80 93 a6 0f 	sts	0x0FA6, r24	; 0x800fa6 <wd_cb_pointer>
	
	while(!uart0_hal_message_ready() && wd_cnt<15);
    429a:	0e 94 35 33 	call	0x666a	; 0x666a <uart0_hal_message_ready>
    429e:	81 11       	cpse	r24, r1
    42a0:	04 c0       	rjmp	.+8      	; 0x42aa <util_lora_forward_msg+0x44>
    42a2:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    42a6:	8f 30       	cpi	r24, 0x0F	; 15
    42a8:	c0 f3       	brcs	.-16     	; 0x429a <util_lora_forward_msg+0x34>
	TC2_HAL_cancel(wd_cb_pointer);
    42aa:	80 91 a6 0f 	lds	r24, 0x0FA6	; 0x800fa6 <wd_cb_pointer>
    42ae:	0e 94 2b 2c 	call	0x5856	; 0x5856 <TC2_HAL_cancel>
	if(wd_cnt>=15){
    42b2:	80 91 a7 0f 	lds	r24, 0x0FA7	; 0x800fa7 <wd_cnt>
    42b6:	8f 30       	cpi	r24, 0x0F	; 15
    42b8:	60 f0       	brcs	.+24     	; 0x42d2 <util_lora_forward_msg+0x6c>
		strcpy(res, "no reply...");
    42ba:	2c e0       	ldi	r18, 0x0C	; 12
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	4b ea       	ldi	r20, 0xAB	; 171
    42c0:	58 e0       	ldi	r21, 0x08	; 8
    42c2:	60 e0       	ldi	r22, 0x00	; 0
    42c4:	ce 01       	movw	r24, r28
    42c6:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		uart0_hal_read_message_as_str(res);
    42ca:	ce 01       	movw	r24, r28
    42cc:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <uart0_hal_read_message_as_str>
    42d0:	03 c0       	rjmp	.+6      	; 0x42d8 <util_lora_forward_msg+0x72>
	}else{
		uart0_hal_read_message_as_str(res);
    42d2:	ce 01       	movw	r24, r28
    42d4:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <uart0_hal_read_message_as_str>
	}
}
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	08 95       	ret

Disassembly of section .text.util_send_break:

000068da <util_send_break>:

void util_send_break(){
	uart0_hal_send_break(0x55);
    68da:	85 e5       	ldi	r24, 0x55	; 85
    68dc:	0e 94 bd 29 	call	0x537a	; 0x537a <uart0_hal_send_break>
    68e0:	08 95       	ret

Disassembly of section .text.MRPP_init_group:

00006382 <MRPP_init_group>:
//uint8_t _groupId=0;

//uint8_t get_group_id();
//void set_group_id(uint8_t groupId);

uint8_t MRPP_init_group(COLLECTION collections[], uint8_t nCollections, uint8_t groupId){
    6382:	cf 93       	push	r28
    6384:	26 2f       	mov	r18, r22
    6386:	c4 2f       	mov	r28, r20
    //uint8_t groupId=get_group_id();

    mrpp_state_init(&state, groupId, collections, nCollections);
    6388:	ac 01       	movw	r20, r24
    638a:	6c 2f       	mov	r22, r28
    638c:	86 e2       	ldi	r24, 0x26	; 38
    638e:	93 e0       	ldi	r25, 0x03	; 3
    6390:	0e 94 16 11 	call	0x222c	; 0x222c <mrpp_state_init>

    return groupId+1;
    //set_group_id(groupId);
}
    6394:	81 e0       	ldi	r24, 0x01	; 1
    6396:	8c 0f       	add	r24, r28
    6398:	cf 91       	pop	r28
    639a:	08 95       	ret

Disassembly of section .text.MRPP_add_collection_data_INT16:

000045a6 <MRPP_add_collection_data_INT16>:
//
//void set_group_id(uint8_t groupId){
    //_groupId=groupId;
//}

void MRPP_add_collection_data_INT16(uint8_t collectionId, uint8_t timestamp[], uint16_t values[]){
    45a6:	ef 92       	push	r14
    45a8:	ff 92       	push	r15
    45aa:	1f 93       	push	r17
    45ac:	cf 93       	push	r28
    45ae:	df 93       	push	r29
    45b0:	cd b7       	in	r28, 0x3d	; 61
    45b2:	de b7       	in	r29, 0x3e	; 62
    45b4:	2a 97       	sbiw	r28, 0x0a	; 10
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	cd bf       	out	0x3d, r28	; 61
    45c0:	18 2f       	mov	r17, r24
    45c2:	7a 01       	movw	r14, r20
    uint8_t metadata[6];
    uint16_t begin;
    uint16_t length;
    mrpp_state_set_collection(&state, collectionId, timestamp, metadata);
    45c4:	9e 01       	movw	r18, r28
    45c6:	2f 5f       	subi	r18, 0xFF	; 255
    45c8:	3f 4f       	sbci	r19, 0xFF	; 255
    45ca:	ab 01       	movw	r20, r22
    45cc:	68 2f       	mov	r22, r24
    45ce:	86 e2       	ldi	r24, 0x26	; 38
    45d0:	93 e0       	ldi	r25, 0x03	; 3
    45d2:	0e 94 33 20 	call	0x4066	; 0x4066 <mrpp_state_set_collection>
    mrpp_state_get_collection_address(&state, collectionId, &begin, &length);
    45d6:	9e 01       	movw	r18, r28
    45d8:	27 5f       	subi	r18, 0xF7	; 247
    45da:	3f 4f       	sbci	r19, 0xFF	; 255
    45dc:	ae 01       	movw	r20, r28
    45de:	49 5f       	subi	r20, 0xF9	; 249
    45e0:	5f 4f       	sbci	r21, 0xFF	; 255
    45e2:	61 2f       	mov	r22, r17
    45e4:	86 e2       	ldi	r24, 0x26	; 38
    45e6:	93 e0       	ldi	r25, 0x03	; 3
    45e8:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <mrpp_state_get_collection_address>

    mrpp_data_add_int16(metadata, values, begin, length);
    45ec:	29 85       	ldd	r18, Y+9	; 0x09
    45ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    45f0:	4f 81       	ldd	r20, Y+7	; 0x07
    45f2:	58 85       	ldd	r21, Y+8	; 0x08
    45f4:	b7 01       	movw	r22, r14
    45f6:	ce 01       	movw	r24, r28
    45f8:	01 96       	adiw	r24, 0x01	; 1
    45fa:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <mrpp_data_add_int16>
}
    45fe:	2a 96       	adiw	r28, 0x0a	; 10
    4600:	0f b6       	in	r0, 0x3f	; 63
    4602:	f8 94       	cli
    4604:	de bf       	out	0x3e, r29	; 62
    4606:	0f be       	out	0x3f, r0	; 63
    4608:	cd bf       	out	0x3d, r28	; 61
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	1f 91       	pop	r17
    4610:	ff 90       	pop	r15
    4612:	ef 90       	pop	r14
    4614:	08 95       	ret

Disassembly of section .text.MRPP_is_body_package_ready:

00006082 <MRPP_is_body_package_ready>:

bool MRPP_is_body_package_ready(int16_t *bodyIndex){
    6082:	cf 93       	push	r28
    6084:	df 93       	push	r29
    6086:	ec 01       	movw	r28, r24
    *bodyIndex = mrpp_state_is_body_ready(&state);
    6088:	86 e2       	ldi	r24, 0x26	; 38
    608a:	93 e0       	ldi	r25, 0x03	; 3
    608c:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <mrpp_state_is_body_ready>
    6090:	88 83       	st	Y, r24
    6092:	99 83       	std	Y+1, r25	; 0x01
    return *bodyIndex>-1;
    6094:	89 2f       	mov	r24, r25
    6096:	80 95       	com	r24
    
}
    6098:	88 1f       	adc	r24, r24
    609a:	88 27       	eor	r24, r24
    609c:	88 1f       	adc	r24, r24
    609e:	df 91       	pop	r29
    60a0:	cf 91       	pop	r28
    60a2:	08 95       	ret

Disassembly of section .text.MRPP_get_ready_body_package:

00003d8c <MRPP_get_ready_body_package>:

bool MRPP_get_ready_body_package(int16_t bodyIndex, uint8_t package[], uint8_t *package_length){
    3d8c:	af 92       	push	r10
    3d8e:	bf 92       	push	r11
    3d90:	cf 92       	push	r12
    3d92:	df 92       	push	r13
    3d94:	ef 92       	push	r14
    3d96:	ff 92       	push	r15
    3d98:	0f 93       	push	r16
    3d9a:	1f 93       	push	r17
    3d9c:	cf 93       	push	r28
    3d9e:	df 93       	push	r29
    3da0:	00 d0       	rcall	.+0      	; 0x3da2 <MRPP_get_ready_body_package+0x16>
    3da2:	00 d0       	rcall	.+0      	; 0x3da4 <MRPP_get_ready_body_package+0x18>
    3da4:	1f 92       	push	r1
    3da6:	cd b7       	in	r28, 0x3d	; 61
    3da8:	de b7       	in	r29, 0x3e	; 62
    3daa:	6b 01       	movw	r12, r22
    3dac:	5a 01       	movw	r10, r20
    uint8_t subId;
    uint8_t lastSubId;
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    3dae:	9e 01       	movw	r18, r28
    3db0:	2b 5f       	subi	r18, 0xFB	; 251
    3db2:	3f 4f       	sbci	r19, 0xFF	; 255
    3db4:	79 01       	movw	r14, r18
    3db6:	8e 01       	movw	r16, r28
    3db8:	0d 5f       	subi	r16, 0xFD	; 253
    3dba:	1f 4f       	sbci	r17, 0xFF	; 255
    3dbc:	23 50       	subi	r18, 0x03	; 3
    3dbe:	31 09       	sbc	r19, r1
    3dc0:	ae 01       	movw	r20, r28
    3dc2:	4f 5f       	subi	r20, 0xFF	; 255
    3dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc6:	bc 01       	movw	r22, r24
    3dc8:	86 e2       	ldi	r24, 0x26	; 38
    3dca:	93 e0       	ldi	r25, 0x03	; 3
    3dcc:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <mrpp_state_get_ready_body>
    
    if(!res) return false;
    3dd0:	88 23       	and	r24, r24
    3dd2:	b1 f0       	breq	.+44     	; 0x3e00 <MRPP_get_ready_body_package+0x74>

    *package_length=length+DR_BODY_PACKAGE_META_SIZE;
    3dd4:	4d 81       	ldd	r20, Y+5	; 0x05
    3dd6:	83 e0       	ldi	r24, 0x03	; 3
    3dd8:	84 0f       	add	r24, r20
    3dda:	f5 01       	movw	r30, r10
    3ddc:	80 83       	st	Z, r24

    //set meta
    package[0]=state.groupId;
    3dde:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <state>
    3de2:	f6 01       	movw	r30, r12
    3de4:	80 83       	st	Z, r24
    package[1]=subId;
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	81 83       	std	Z+1, r24	; 0x01
    package[2]=lastSubId;
    3dea:	8a 81       	ldd	r24, Y+2	; 0x02
    3dec:	82 83       	std	Z+2, r24	; 0x02

    //Merge data
    mrpp_data_get(&package[3], begin, length);
    3dee:	50 e0       	ldi	r21, 0x00	; 0
    3df0:	6b 81       	ldd	r22, Y+3	; 0x03
    3df2:	7c 81       	ldd	r23, Y+4	; 0x04
    3df4:	c6 01       	movw	r24, r12
    3df6:	03 96       	adiw	r24, 0x03	; 3
    3df8:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <mrpp_data_get>

    return true;
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	01 c0       	rjmp	.+2      	; 0x3e02 <MRPP_get_ready_body_package+0x76>
    uint16_t begin;
    uint8_t length;

    bool res=mrpp_state_get_ready_body(&state, bodyIndex, &subId, &lastSubId, &begin, &length);
    
    if(!res) return false;
    3e00:	80 e0       	ldi	r24, 0x00	; 0

    //Merge data
    mrpp_data_get(&package[3], begin, length);

    return true;
}
    3e02:	0f 90       	pop	r0
    3e04:	0f 90       	pop	r0
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	0f 90       	pop	r0
    3e0c:	df 91       	pop	r29
    3e0e:	cf 91       	pop	r28
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	ff 90       	pop	r15
    3e16:	ef 90       	pop	r14
    3e18:	df 90       	pop	r13
    3e1a:	cf 90       	pop	r12
    3e1c:	bf 90       	pop	r11
    3e1e:	af 90       	pop	r10
    3e20:	08 95       	ret

Disassembly of section .text.MRPP_set_body_sent:

000067f4 <MRPP_set_body_sent>:

void MRPP_set_body_sent(int16_t bodyIndex){
    mrpp_state_set_body_sent(&state, bodyIndex);
    67f4:	bc 01       	movw	r22, r24
    67f6:	86 e2       	ldi	r24, 0x26	; 38
    67f8:	93 e0       	ldi	r25, 0x03	; 3
    67fa:	0e 94 d7 30 	call	0x61ae	; 0x61ae <mrpp_state_set_body_sent>
    67fe:	08 95       	ret

Disassembly of section .text.MRPP_get_header_package:

000060a4 <MRPP_get_header_package>:
}

void MRPP_get_header_package(uint8_t package[], uint8_t *package_length){
    60a4:	cf 93       	push	r28
    60a6:	df 93       	push	r29
    60a8:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    60aa:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    60ae:	fc 01       	movw	r30, r24
    60b0:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_header(&state, &package[1]);
    60b2:	bf 01       	movw	r22, r30
    60b4:	86 e2       	ldi	r24, 0x26	; 38
    60b6:	93 e0       	ldi	r25, 0x03	; 3
    60b8:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <mrpp_state_get_header>
    *package_length+=1;
    60bc:	8f 5f       	subi	r24, 0xFF	; 255
    60be:	88 83       	st	Y, r24
}
    60c0:	df 91       	pop	r29
    60c2:	cf 91       	pop	r28
    60c4:	08 95       	ret

Disassembly of section .text.MRPP_get_tail_package:

000060c6 <MRPP_get_tail_package>:

void MRPP_get_tail_package(uint8_t package[], uint8_t *package_length){
    60c6:	cf 93       	push	r28
    60c8:	df 93       	push	r29
    60ca:	eb 01       	movw	r28, r22
    package[0]=state.groupId;
    60cc:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <state>
    60d0:	fc 01       	movw	r30, r24
    60d2:	21 93       	st	Z+, r18
    *package_length=mrpp_state_get_tail(&state, &package[1]);
    60d4:	bf 01       	movw	r22, r30
    60d6:	86 e2       	ldi	r24, 0x26	; 38
    60d8:	93 e0       	ldi	r25, 0x03	; 3
    60da:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <mrpp_state_get_tail>
    *package_length+=1;
    60de:	8f 5f       	subi	r24, 0xFF	; 255
    60e0:	88 83       	st	Y, r24
}
    60e2:	df 91       	pop	r29
    60e4:	cf 91       	pop	r28
    60e6:	08 95       	ret

Disassembly of section .text.MRPP_all_body_package_sent:

0000686a <MRPP_all_body_package_sent>:

bool MRPP_all_body_package_sent(){
    return mrpp_state_all_bodies_sent(&state);
    686a:	86 e2       	ldi	r24, 0x26	; 38
    686c:	93 e0       	ldi	r25, 0x03	; 3
    686e:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <mrpp_state_all_bodies_sent>
}
    6872:	08 95       	ret

Disassembly of section .text.mrpp_data_add_int16:

00003eb8 <mrpp_data_add_int16>:
#include "mrpp_data.h"

uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    3eb8:	cf 92       	push	r12
    3eba:	df 92       	push	r13
    3ebc:	ff 92       	push	r15
    3ebe:	0f 93       	push	r16
    3ec0:	1f 93       	push	r17
    3ec2:	cf 93       	push	r28
    3ec4:	df 93       	push	r29
    3ec6:	dc 01       	movw	r26, r24
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    3ec8:	94 2f       	mov	r25, r20
    3eca:	0c c0       	rjmp	.+24     	; 0x3ee4 <mrpp_data_add_int16+0x2c>
    {
        storage[i]=metadata[i-begin];
    3ecc:	c9 2f       	mov	r28, r25
    3ece:	d0 e0       	ldi	r29, 0x00	; 0
    3ed0:	e4 1b       	sub	r30, r20
    3ed2:	f5 0b       	sbc	r31, r21
    3ed4:	ea 0f       	add	r30, r26
    3ed6:	fb 1f       	adc	r31, r27
    3ed8:	80 81       	ld	r24, Z
    3eda:	fe 01       	movw	r30, r28
    3edc:	e0 54       	subi	r30, 0x40	; 64
    3ede:	fc 4f       	sbci	r31, 0xFC	; 252
    3ee0:	80 83       	st	Z, r24
uint8_t storage[BODY_BUFFER_DATA_SIZE];

void mrpp_data_add_int16(uint8_t metadata[6], uint16_t values[], uint16_t begin, uint16_t length){
    
    //add meta
    for (uint8_t i = begin; i < begin+COLLECTION_DATA_META_SIZE; i++)
    3ee2:	9f 5f       	subi	r25, 0xFF	; 255
    3ee4:	e9 2f       	mov	r30, r25
    3ee6:	f0 e0       	ldi	r31, 0x00	; 0
    3ee8:	6a 01       	movw	r12, r20
    3eea:	86 e0       	ldi	r24, 0x06	; 6
    3eec:	c8 0e       	add	r12, r24
    3eee:	d1 1c       	adc	r13, r1
    3ef0:	ec 15       	cp	r30, r12
    3ef2:	fd 05       	cpc	r31, r13
    3ef4:	58 f3       	brcs	.-42     	; 0x3ecc <mrpp_data_add_int16+0x14>
    {
        storage[i]=metadata[i-begin];
    }
    length-=COLLECTION_DATA_META_SIZE;
    3ef6:	26 50       	subi	r18, 0x06	; 6
    3ef8:	31 09       	sbc	r19, r1

    //add values  
    uint16_t valuesLength=length/2;
    3efa:	36 95       	lsr	r19
    3efc:	27 95       	ror	r18
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    3efe:	49 5f       	subi	r20, 0xF9	; 249
    3f00:	5f 4f       	sbci	r21, 0xFF	; 255
    for (uint16_t i = 0; i < valuesLength; i++)
    3f02:	a0 e0       	ldi	r26, 0x00	; 0
    3f04:	b0 e0       	ldi	r27, 0x00	; 0
    3f06:	16 c0       	rjmp	.+44     	; 0x3f34 <mrpp_data_add_int16+0x7c>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
    3f08:	cd 01       	movw	r24, r26
    3f0a:	88 0f       	add	r24, r24
    3f0c:	99 1f       	adc	r25, r25
    3f0e:	f6 01       	movw	r30, r12
    3f10:	e8 0f       	add	r30, r24
    3f12:	f9 1f       	adc	r31, r25
    3f14:	8b 01       	movw	r16, r22
    3f16:	08 0f       	add	r16, r24
    3f18:	19 1f       	adc	r17, r25
    3f1a:	e8 01       	movw	r28, r16
    3f1c:	f9 80       	ldd	r15, Y+1	; 0x01
    3f1e:	e0 54       	subi	r30, 0x40	; 64
    3f20:	fc 4f       	sbci	r31, 0xFC	; 252
    3f22:	f0 82       	st	Z, r15
        storage[offset_LSB + i*2]=values[i];
    3f24:	84 0f       	add	r24, r20
    3f26:	95 1f       	adc	r25, r21
    3f28:	18 81       	ld	r17, Y
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	e0 54       	subi	r30, 0x40	; 64
    3f2e:	fc 4f       	sbci	r31, 0xFC	; 252
    3f30:	10 83       	st	Z, r17

    //add values  
    uint16_t valuesLength=length/2;
    const uint16_t offset_MSB=begin+COLLECTION_DATA_META_SIZE;
    const uint16_t offset_LSB=begin+COLLECTION_DATA_META_SIZE+1;
    for (uint16_t i = 0; i < valuesLength; i++)
    3f32:	11 96       	adiw	r26, 0x01	; 1
    3f34:	a2 17       	cp	r26, r18
    3f36:	b3 07       	cpc	r27, r19
    3f38:	38 f3       	brcs	.-50     	; 0x3f08 <mrpp_data_add_int16+0x50>
    {
        storage[offset_MSB + i*2]=values[i]>>8;
        storage[offset_LSB + i*2]=values[i];
    }

}
    3f3a:	df 91       	pop	r29
    3f3c:	cf 91       	pop	r28
    3f3e:	1f 91       	pop	r17
    3f40:	0f 91       	pop	r16
    3f42:	ff 90       	pop	r15
    3f44:	df 90       	pop	r13
    3f46:	cf 90       	pop	r12
    3f48:	08 95       	ret

Disassembly of section .text.mrpp_data_get:

00005d86 <mrpp_data_get>:

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    5d86:	cf 93       	push	r28
    5d88:	df 93       	push	r29
    5d8a:	ec 01       	movw	r28, r24
    for (uint16_t i = 0; i < length; i++)
    5d8c:	20 e0       	ldi	r18, 0x00	; 0
    5d8e:	30 e0       	ldi	r19, 0x00	; 0
    5d90:	0c c0       	rjmp	.+24     	; 0x5daa <mrpp_data_get+0x24>
    {
        data[i]=storage[begin+i];
    5d92:	de 01       	movw	r26, r28
    5d94:	a2 0f       	add	r26, r18
    5d96:	b3 1f       	adc	r27, r19
    5d98:	f9 01       	movw	r30, r18
    5d9a:	e6 0f       	add	r30, r22
    5d9c:	f7 1f       	adc	r31, r23
    5d9e:	e0 54       	subi	r30, 0x40	; 64
    5da0:	fc 4f       	sbci	r31, 0xFC	; 252
    5da2:	90 81       	ld	r25, Z
    5da4:	9c 93       	st	X, r25
    }

}

void mrpp_data_get(uint8_t data[], uint16_t begin, uint16_t length){
    for (uint16_t i = 0; i < length; i++)
    5da6:	2f 5f       	subi	r18, 0xFF	; 255
    5da8:	3f 4f       	sbci	r19, 0xFF	; 255
    5daa:	24 17       	cp	r18, r20
    5dac:	35 07       	cpc	r19, r21
    5dae:	88 f3       	brcs	.-30     	; 0x5d92 <mrpp_data_get+0xc>
    {
        data[i]=storage[begin+i];
    }
    
    5db0:	df 91       	pop	r29
    5db2:	cf 91       	pop	r28
    5db4:	08 95       	ret

Disassembly of section .text.add_data_types:

00003224 <add_data_types>:
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    3224:	cf 92       	push	r12
    3226:	df 92       	push	r13
    3228:	ef 92       	push	r14
    322a:	ff 92       	push	r15
    322c:	0f 93       	push	r16
    322e:	1f 93       	push	r17
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	dc 01       	movw	r26, r24
    3236:	eb 01       	movw	r28, r22
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    3238:	90 e0       	ldi	r25, 0x00	; 0
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;
    323a:	40 e0       	ldi	r20, 0x00	; 0
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
}

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    323c:	c1 2c       	mov	r12, r1
    323e:	d1 2c       	mov	r13, r1
    3240:	76 01       	movw	r14, r12
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    3242:	4a c0       	rjmp	.+148    	; 0x32d8 <add_data_types+0xb4>
    {
        switch (state->collections[i].type)
    3244:	29 2f       	mov	r18, r25
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	f9 01       	movw	r30, r18
    324a:	ee 0f       	add	r30, r30
    324c:	ff 1f       	adc	r31, r31
    324e:	22 0f       	add	r18, r18
    3250:	33 1f       	adc	r19, r19
    3252:	22 0f       	add	r18, r18
    3254:	33 1f       	adc	r19, r19
    3256:	22 0f       	add	r18, r18
    3258:	33 1f       	adc	r19, r19
    325a:	e2 0f       	add	r30, r18
    325c:	f3 1f       	adc	r31, r19
    325e:	ea 0f       	add	r30, r26
    3260:	fb 1f       	adc	r31, r27
    3262:	27 81       	ldd	r18, Z+7	; 0x07
    3264:	22 30       	cpi	r18, 0x02	; 2
    3266:	a9 f0       	breq	.+42     	; 0x3292 <add_data_types+0x6e>
    3268:	24 30       	cpi	r18, 0x04	; 4
    326a:	21 f1       	breq	.+72     	; 0x32b4 <add_data_types+0x90>
    326c:	21 30       	cpi	r18, 0x01	; 1
    326e:	91 f5       	brne	.+100    	; 0x32d4 <add_data_types+0xb0>
        {
            case T_INT8:
                dt |= 1 << cnt;
    3270:	01 e0       	ldi	r16, 0x01	; 1
    3272:	10 e0       	ldi	r17, 0x00	; 0
    3274:	04 2e       	mov	r0, r20
    3276:	02 c0       	rjmp	.+4      	; 0x327c <add_data_types+0x58>
    3278:	00 0f       	add	r16, r16
    327a:	11 1f       	adc	r17, r17
    327c:	0a 94       	dec	r0
    327e:	e2 f7       	brpl	.-8      	; 0x3278 <add_data_types+0x54>
    3280:	01 2e       	mov	r0, r17
    3282:	00 0c       	add	r0, r0
    3284:	22 0b       	sbc	r18, r18
    3286:	33 0b       	sbc	r19, r19
    3288:	c0 2a       	or	r12, r16
    328a:	d1 2a       	or	r13, r17
    328c:	e2 2a       	or	r14, r18
    328e:	f3 2a       	or	r15, r19
                break;
    3290:	21 c0       	rjmp	.+66     	; 0x32d4 <add_data_types+0xb0>
            
            case T_INT16:
                dt |= 2 << cnt;
    3292:	02 e0       	ldi	r16, 0x02	; 2
    3294:	10 e0       	ldi	r17, 0x00	; 0
    3296:	04 2e       	mov	r0, r20
    3298:	02 c0       	rjmp	.+4      	; 0x329e <add_data_types+0x7a>
    329a:	00 0f       	add	r16, r16
    329c:	11 1f       	adc	r17, r17
    329e:	0a 94       	dec	r0
    32a0:	e2 f7       	brpl	.-8      	; 0x329a <add_data_types+0x76>
    32a2:	01 2e       	mov	r0, r17
    32a4:	00 0c       	add	r0, r0
    32a6:	22 0b       	sbc	r18, r18
    32a8:	33 0b       	sbc	r19, r19
    32aa:	c0 2a       	or	r12, r16
    32ac:	d1 2a       	or	r13, r17
    32ae:	e2 2a       	or	r14, r18
    32b0:	f3 2a       	or	r15, r19
                break;
    32b2:	10 c0       	rjmp	.+32     	; 0x32d4 <add_data_types+0xb0>

            case T_FLOAT:
                dt |= 3 << cnt;
    32b4:	03 e0       	ldi	r16, 0x03	; 3
    32b6:	10 e0       	ldi	r17, 0x00	; 0
    32b8:	04 2e       	mov	r0, r20
    32ba:	02 c0       	rjmp	.+4      	; 0x32c0 <add_data_types+0x9c>
    32bc:	00 0f       	add	r16, r16
    32be:	11 1f       	adc	r17, r17
    32c0:	0a 94       	dec	r0
    32c2:	e2 f7       	brpl	.-8      	; 0x32bc <add_data_types+0x98>
    32c4:	01 2e       	mov	r0, r17
    32c6:	00 0c       	add	r0, r0
    32c8:	22 0b       	sbc	r18, r18
    32ca:	33 0b       	sbc	r19, r19
    32cc:	c0 2a       	or	r12, r16
    32ce:	d1 2a       	or	r13, r17
    32d0:	e2 2a       	or	r14, r18
    32d2:	f3 2a       	or	r15, r19
                break;
            
            default:
                break;
        }
        cnt+=2;
    32d4:	4e 5f       	subi	r20, 0xFE	; 254

static void add_data_types(MRPP_STATE *state, uint8_t package[]){
    uint32_t dt=0x00000000;
    uint8_t cnt=0;

    for (uint8_t i = 0; i < state->nCollections; i++)
    32d6:	9f 5f       	subi	r25, 0xFF	; 255
    32d8:	12 96       	adiw	r26, 0x02	; 2
    32da:	8c 91       	ld	r24, X
    32dc:	12 97       	sbiw	r26, 0x02	; 2
    32de:	98 17       	cp	r25, r24
    32e0:	08 f4       	brcc	.+2      	; 0x32e4 <add_data_types+0xc0>
    32e2:	b0 cf       	rjmp	.-160    	; 0x3244 <add_data_types+0x20>
                break;
        }
        cnt+=2;
    }

    package[3]=(dt>>16) & 0xff;
    32e4:	eb 82       	std	Y+3, r14	; 0x03
    package[4]=(dt>>8) & 0xff;
    32e6:	dc 82       	std	Y+4, r13	; 0x04
    package[5]=dt & 0xff;
    32e8:	cd 82       	std	Y+5, r12	; 0x05
} 
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	1f 91       	pop	r17
    32f0:	0f 91       	pop	r16
    32f2:	ff 90       	pop	r15
    32f4:	ef 90       	pop	r14
    32f6:	df 90       	pop	r13
    32f8:	cf 90       	pop	r12
    32fa:	08 95       	ret

Disassembly of section .text.update_bodies:

000020ca <update_bodies>:
    //Update bodies
    update_bodies(state, collectionId);
}


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    20ca:	cf 93       	push	r28
    20cc:	dc 01       	movw	r26, r24
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    20ce:	26 2f       	mov	r18, r22
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	c9 01       	movw	r24, r18
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f9 01       	movw	r30, r18
    20d8:	ee 0f       	add	r30, r30
    20da:	ff 1f       	adc	r31, r31
    20dc:	22 0f       	add	r18, r18
    20de:	33 1f       	adc	r19, r19
    20e0:	22 0f       	add	r18, r18
    20e2:	33 1f       	adc	r19, r19
    20e4:	22 0f       	add	r18, r18
    20e6:	33 1f       	adc	r19, r19
    20e8:	e2 0f       	add	r30, r18
    20ea:	f3 1f       	adc	r31, r19
    20ec:	ea 0f       	add	r30, r26
    20ee:	fb 1f       	adc	r31, r27
    20f0:	70 81       	ld	r23, Z
    for (uint8_t i = 0; i < collectionId-1; i++)
    20f2:	c0 e0       	ldi	r28, 0x00	; 0
    20f4:	25 c0       	rjmp	.+74     	; 0x2140 <update_bodies+0x76>
    {
        if(i==collectionId-1) continue;
    20f6:	82 17       	cp	r24, r18
    20f8:	93 07       	cpc	r25, r19
    20fa:	09 f1       	breq	.+66     	; 0x213e <update_bodies+0x74>

        if( state->collections[i].endsInBody==beginsInBody){
    20fc:	a9 01       	movw	r20, r18
    20fe:	44 0f       	add	r20, r20
    2100:	55 1f       	adc	r21, r21
    2102:	44 0f       	add	r20, r20
    2104:	55 1f       	adc	r21, r21
    2106:	44 0f       	add	r20, r20
    2108:	55 1f       	adc	r21, r21
    210a:	f9 01       	movw	r30, r18
    210c:	ee 0f       	add	r30, r30
    210e:	ff 1f       	adc	r31, r31
    2110:	e4 0f       	add	r30, r20
    2112:	f5 1f       	adc	r31, r21
    2114:	ea 0f       	add	r30, r26
    2116:	fb 1f       	adc	r31, r27
    2118:	43 85       	ldd	r20, Z+11	; 0x0b
    211a:	74 13       	cpse	r23, r20
    211c:	10 c0       	rjmp	.+32     	; 0x213e <update_bodies+0x74>
            if(state->collections[i].status!=DONE){
    211e:	f9 01       	movw	r30, r18
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	22 0f       	add	r18, r18
    2126:	33 1f       	adc	r19, r19
    2128:	22 0f       	add	r18, r18
    212a:	33 1f       	adc	r19, r19
    212c:	22 0f       	add	r18, r18
    212e:	33 1f       	adc	r19, r19
    2130:	e2 0f       	add	r30, r18
    2132:	f3 1f       	adc	r31, r19
    2134:	ea 0f       	add	r30, r26
    2136:	fb 1f       	adc	r31, r27
    2138:	24 85       	ldd	r18, Z+12	; 0x0c
    213a:	23 30       	cpi	r18, 0x03	; 3
    213c:	41 f4       	brne	.+16     	; 0x214e <update_bodies+0x84>
static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    uint8_t beginsInBody=state->collections[collectionId-1].beginsInBody;
    for (uint8_t i = 0; i < collectionId-1; i++)
    213e:	cf 5f       	subi	r28, 0xFF	; 255
    2140:	2c 2f       	mov	r18, r28
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	28 17       	cp	r18, r24
    2146:	39 07       	cpc	r19, r25
    2148:	b4 f2       	brlt	.-84     	; 0x20f6 <update_bodies+0x2c>


static void update_bodies(MRPP_STATE *state, uint8_t collectionId){
    
    //update begin
    bool beginIsDone=true;
    214a:	21 e0       	ldi	r18, 0x01	; 1
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <update_bodies+0x86>
    {
        if(i==collectionId-1) continue;

        if( state->collections[i].endsInBody==beginsInBody){
            if(state->collections[i].status!=DONE){
                beginIsDone=false;
    214e:	20 e0       	ldi	r18, 0x00	; 0
                break;
            }
        }
    }

    if(beginIsDone){
    2150:	22 23       	and	r18, r18
    2152:	39 f0       	breq	.+14     	; 0x2162 <update_bodies+0x98>
        state->bodies[beginsInBody]=READY;
    2154:	fd 01       	movw	r30, r26
    2156:	e7 0f       	add	r30, r23
    2158:	f1 1d       	adc	r31, r1
    215a:	e4 58       	subi	r30, 0x84	; 132
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	21 e0       	ldi	r18, 0x01	; 1
    2160:	20 83       	st	Z, r18
    }
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    2162:	9c 01       	movw	r18, r24
    2164:	22 0f       	add	r18, r18
    2166:	33 1f       	adc	r19, r19
    2168:	22 0f       	add	r18, r18
    216a:	33 1f       	adc	r19, r19
    216c:	22 0f       	add	r18, r18
    216e:	33 1f       	adc	r19, r19
    2170:	fc 01       	movw	r30, r24
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	e2 0f       	add	r30, r18
    2178:	f3 1f       	adc	r31, r19
    217a:	ea 0f       	add	r30, r26
    217c:	fb 1f       	adc	r31, r27
    217e:	c3 85       	ldd	r28, Z+11	; 0x0b
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    2180:	29 c0       	rjmp	.+82     	; 0x21d4 <update_bodies+0x10a>
    {
         if(i==collectionId-1) continue;
    2182:	46 2f       	mov	r20, r22
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	84 17       	cp	r24, r20
    2188:	95 07       	cpc	r25, r21
    218a:	19 f1       	breq	.+70     	; 0x21d2 <update_bodies+0x108>

        if(state->collections[i].beginsInBody==endsInBody){
    218c:	9a 01       	movw	r18, r20
    218e:	2f 5f       	subi	r18, 0xFF	; 255
    2190:	3f 4f       	sbci	r19, 0xFF	; 255
    2192:	f9 01       	movw	r30, r18
    2194:	ee 0f       	add	r30, r30
    2196:	ff 1f       	adc	r31, r31
    2198:	22 0f       	add	r18, r18
    219a:	33 1f       	adc	r19, r19
    219c:	22 0f       	add	r18, r18
    219e:	33 1f       	adc	r19, r19
    21a0:	22 0f       	add	r18, r18
    21a2:	33 1f       	adc	r19, r19
    21a4:	e2 0f       	add	r30, r18
    21a6:	f3 1f       	adc	r31, r19
    21a8:	ea 0f       	add	r30, r26
    21aa:	fb 1f       	adc	r31, r27
    21ac:	20 81       	ld	r18, Z
    21ae:	c2 13       	cpse	r28, r18
    21b0:	10 c0       	rjmp	.+32     	; 0x21d2 <update_bodies+0x108>
            if(state->collections[i].status!=DONE){
    21b2:	fa 01       	movw	r30, r20
    21b4:	ee 0f       	add	r30, r30
    21b6:	ff 1f       	adc	r31, r31
    21b8:	44 0f       	add	r20, r20
    21ba:	55 1f       	adc	r21, r21
    21bc:	44 0f       	add	r20, r20
    21be:	55 1f       	adc	r21, r21
    21c0:	44 0f       	add	r20, r20
    21c2:	55 1f       	adc	r21, r21
    21c4:	e4 0f       	add	r30, r20
    21c6:	f5 1f       	adc	r31, r21
    21c8:	ea 0f       	add	r30, r26
    21ca:	fb 1f       	adc	r31, r27
    21cc:	24 85       	ldd	r18, Z+12	; 0x0c
    21ce:	23 30       	cpi	r18, 0x03	; 3
    21d0:	41 f4       	brne	.+16     	; 0x21e2 <update_bodies+0x118>
    

    //update end
    bool endIsDone=true;
    uint8_t endsInBody=state->collections[collectionId-1].endsInBody;
    for (uint8_t i = collectionId; i < state->nCollections; i++)
    21d2:	6f 5f       	subi	r22, 0xFF	; 255
    21d4:	12 96       	adiw	r26, 0x02	; 2
    21d6:	2c 91       	ld	r18, X
    21d8:	12 97       	sbiw	r26, 0x02	; 2
    21da:	62 17       	cp	r22, r18
    21dc:	90 f2       	brcs	.-92     	; 0x2182 <update_bodies+0xb8>
        state->bodies[beginsInBody]=READY;
    }
    

    //update end
    bool endIsDone=true;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <update_bodies+0x11a>
    {
         if(i==collectionId-1) continue;

        if(state->collections[i].beginsInBody==endsInBody){
            if(state->collections[i].status!=DONE){
                endIsDone=false;
    21e2:	80 e0       	ldi	r24, 0x00	; 0
                break;
            }
        }
    }

    if(endIsDone){
    21e4:	88 23       	and	r24, r24
    21e6:	41 f0       	breq	.+16     	; 0x21f8 <update_bodies+0x12e>
        state->bodies[endsInBody]=READY;
    21e8:	fd 01       	movw	r30, r26
    21ea:	ec 0f       	add	r30, r28
    21ec:	f1 1d       	adc	r31, r1
    21ee:	e4 58       	subi	r30, 0x84	; 132
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	80 83       	st	Z, r24
    21f6:	06 c0       	rjmp	.+12     	; 0x2204 <update_bodies+0x13a>
    }else{
        //to handle cases where there are multiple collection in same body that starts and ends there
        state->bodies[endsInBody]=WAITING;
    21f8:	fd 01       	movw	r30, r26
    21fa:	ec 0f       	add	r30, r28
    21fc:	f1 1d       	adc	r31, r1
    21fe:	e4 58       	subi	r30, 0x84	; 132
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	10 82       	st	Z, r1
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;
    2204:	8c 2f       	mov	r24, r28
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	87 1b       	sub	r24, r23
    220a:	91 09       	sbc	r25, r1
    220c:	02 97       	sbiw	r24, 0x02	; 2
    220e:	64 f0       	brlt	.+24     	; 0x2228 <update_bodies+0x15e>

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    2210:	7f 5f       	subi	r23, 0xFF	; 255
    2212:	08 c0       	rjmp	.+16     	; 0x2224 <update_bodies+0x15a>
    {
        state->bodies[i]=READY;
    2214:	fd 01       	movw	r30, r26
    2216:	e7 0f       	add	r30, r23
    2218:	f1 1d       	adc	r31, r1
    221a:	e4 58       	subi	r30, 0x84	; 132
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	80 83       	st	Z, r24
    }
    
    //update between
    if(endsInBody-beginsInBody<2) return;

    for (uint8_t i = beginsInBody+1; i < endsInBody; i++)
    2222:	7f 5f       	subi	r23, 0xFF	; 255
    2224:	7c 17       	cp	r23, r28
    2226:	b0 f3       	brcs	.-20     	; 0x2214 <update_bodies+0x14a>
    {
        state->bodies[i]=READY;
    }
  
}
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

Disassembly of section .text.mrpp_state_init:

0000222c <mrpp_state_init>:
#include "mrpp_state.h"

static void update_bodies(MRPP_STATE *state, uint8_t collectionId);
static void add_data_types(MRPP_STATE *state, uint8_t package[]);

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    222c:	af 92       	push	r10
    222e:	bf 92       	push	r11
    2230:	cf 92       	push	r12
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	6c 01       	movw	r12, r24
    2242:	a2 2e       	mov	r10, r18
    state->groupId=groupId;
    2244:	fc 01       	movw	r30, r24
    2246:	60 83       	st	Z, r22
    state->nCollections=nCollections;
    2248:	22 83       	std	Z+2, r18	; 0x02

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    224a:	b1 2c       	mov	r11, r1

void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    224c:	00 e0       	ldi	r16, 0x00	; 0
    224e:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < nCollections; i++)
    2250:	62 c0       	rjmp	.+196    	; 0x2316 <mrpp_state_init+0xea>
    {
        state->collections[i].samplingInterval=collections[i].samplingInterval;
    2252:	eb 2d       	mov	r30, r11
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	df 01       	movw	r26, r30
    2258:	aa 0f       	add	r26, r26
    225a:	bb 1f       	adc	r27, r27
    225c:	aa 0f       	add	r26, r26
    225e:	bb 1f       	adc	r27, r27
    2260:	ae 0f       	add	r26, r30
    2262:	bf 1f       	adc	r27, r31
    2264:	a4 0f       	add	r26, r20
    2266:	b5 1f       	adc	r27, r21
    2268:	12 96       	adiw	r26, 0x02	; 2
    226a:	2d 91       	ld	r18, X+
    226c:	3c 91       	ld	r19, X
    226e:	13 97       	sbiw	r26, 0x03	; 3
    2270:	ef 01       	movw	r28, r30
    2272:	cc 0f       	add	r28, r28
    2274:	dd 1f       	adc	r29, r29
    2276:	cf 01       	movw	r24, r30
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	c8 0f       	add	r28, r24
    2286:	d9 1f       	adc	r29, r25
    2288:	cc 0d       	add	r28, r12
    228a:	dd 1d       	adc	r29, r13
    228c:	39 87       	std	Y+9, r19	; 0x09
    228e:	28 87       	std	Y+8, r18	; 0x08

        //type
        state->collections[i].type=collections[i].type;
    2290:	14 96       	adiw	r26, 0x04	; 4
    2292:	8c 91       	ld	r24, X
    2294:	14 97       	sbiw	r26, 0x04	; 4
    2296:	8f 83       	std	Y+7, r24	; 0x07

        //Calculate length and set starting index
        state->collections[i].startIndex=startingIndex;
    2298:	1c 83       	std	Y+4, r17	; 0x04
    229a:	0b 83       	std	Y+3, r16	; 0x03
        uint16_t len=collections[i].samplings*collections[i].type+COLLECTION_DATA_META_SIZE;
    229c:	8d 91       	ld	r24, X+
    229e:	9c 91       	ld	r25, X
    22a0:	11 97       	sbiw	r26, 0x01	; 1
    22a2:	14 96       	adiw	r26, 0x04	; 4
    22a4:	2c 91       	ld	r18, X
    22a6:	28 9f       	mul	r18, r24
    22a8:	70 01       	movw	r14, r0
    22aa:	29 9f       	mul	r18, r25
    22ac:	f0 0c       	add	r15, r0
    22ae:	11 24       	eor	r1, r1
    22b0:	86 e0       	ldi	r24, 0x06	; 6
    22b2:	e8 0e       	add	r14, r24
    22b4:	f1 1c       	adc	r15, r1
        state->collections[i].length=len;
    22b6:	fe 82       	std	Y+6, r15	; 0x06
    22b8:	ed 82       	std	Y+5, r14	; 0x05
        

        //calculate starting and ending body
        state->collections[i].beginsInBody=startingIndex/DR_BODY_PAYLOAD_SIZE;
    22ba:	98 01       	movw	r18, r16
    22bc:	ab ea       	ldi	r26, 0xAB	; 171
    22be:	ba ea       	ldi	r27, 0xAA	; 170
    22c0:	0e 94 42 31 	call	0x6284	; 0x6284 <__umulhisi3>
    22c4:	96 95       	lsr	r25
    22c6:	87 95       	ror	r24
    22c8:	92 95       	swap	r25
    22ca:	82 95       	swap	r24
    22cc:	8f 70       	andi	r24, 0x0F	; 15
    22ce:	89 27       	eor	r24, r25
    22d0:	9f 70       	andi	r25, 0x0F	; 15
    22d2:	89 27       	eor	r24, r25
    22d4:	31 96       	adiw	r30, 0x01	; 1
    22d6:	9f 01       	movw	r18, r30
    22d8:	22 0f       	add	r18, r18
    22da:	33 1f       	adc	r19, r19
    22dc:	ee 0f       	add	r30, r30
    22de:	ff 1f       	adc	r31, r31
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	ee 0f       	add	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	e2 0f       	add	r30, r18
    22ea:	f3 1f       	adc	r31, r19
    22ec:	ec 0d       	add	r30, r12
    22ee:	fd 1d       	adc	r31, r13
    22f0:	80 83       	st	Z, r24
        state->collections[i].endsInBody=(startingIndex+len-1)/DR_BODY_PAYLOAD_SIZE;
    22f2:	0e 0d       	add	r16, r14
    22f4:	1f 1d       	adc	r17, r15
    22f6:	98 01       	movw	r18, r16
    22f8:	21 50       	subi	r18, 0x01	; 1
    22fa:	31 09       	sbc	r19, r1
    22fc:	0e 94 42 31 	call	0x6284	; 0x6284 <__umulhisi3>
    2300:	96 95       	lsr	r25
    2302:	87 95       	ror	r24
    2304:	92 95       	swap	r25
    2306:	82 95       	swap	r24
    2308:	8f 70       	andi	r24, 0x0F	; 15
    230a:	89 27       	eor	r24, r25
    230c:	9f 70       	andi	r25, 0x0F	; 15
    230e:	89 27       	eor	r24, r25
    2310:	8b 87       	std	Y+11, r24	; 0x0b
        //endsInBody=(startingIndex+len)%DR_BODY_PAYLOAD_SIZE==0?endsInBody-1:endsInBody;
        //state->collections[i].endsInBody=endsInBody;
        

        //set status
        state->collections[i].status=WAITING;
    2312:	1c 86       	std	Y+12, r1	; 0x0c
void mrpp_state_init(MRPP_STATE *state, uint8_t groupId, COLLECTION collections[], uint8_t nCollections){
    state->groupId=groupId;
    state->nCollections=nCollections;

    uint16_t startingIndex=0;
    for (uint8_t i = 0; i < nCollections; i++)
    2314:	b3 94       	inc	r11
    2316:	ba 14       	cp	r11, r10
    2318:	08 f4       	brcc	.+2      	; 0x231c <mrpp_state_init+0xf0>
    231a:	9b cf       	rjmp	.-202    	; 0x2252 <mrpp_state_init+0x26>
        startingIndex+=len;      
    }

    //Calculate lastSubId
	
	state->lastSubId=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+DR_SUBID_OVERHEAD;
    231c:	98 01       	movw	r18, r16
    231e:	21 50       	subi	r18, 0x01	; 1
    2320:	31 09       	sbc	r19, r1
    2322:	ab ea       	ldi	r26, 0xAB	; 171
    2324:	ba ea       	ldi	r27, 0xAA	; 170
    2326:	0e 94 42 31 	call	0x6284	; 0x6284 <__umulhisi3>
    232a:	96 95       	lsr	r25
    232c:	87 95       	ror	r24
    232e:	92 95       	swap	r25
    2330:	82 95       	swap	r24
    2332:	8f 70       	andi	r24, 0x0F	; 15
    2334:	89 27       	eor	r24, r25
    2336:	9f 70       	andi	r25, 0x0F	; 15
    2338:	89 27       	eor	r24, r25
    233a:	92 e0       	ldi	r25, 0x02	; 2
    233c:	98 0f       	add	r25, r24
    233e:	f6 01       	movw	r30, r12
    2340:	91 83       	std	Z+1, r25	; 0x01
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    //lastSubId=startingIndex%DR_BODY_PAYLOAD_SIZE==0?lastSubId-1:lastSubId;
    //state->lastSubId=lastSubId;
    
    //calculate bodies
	uint8_t nBodies=(startingIndex-1)/DR_BODY_PAYLOAD_SIZE+1;
    2342:	8f 5f       	subi	r24, 0xFF	; 255
	state->nBodies=nBodies;
    2344:	e5 58       	subi	r30, 0x85	; 133
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 83       	st	Z, r24
    //uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    //nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    //state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	07 c0       	rjmp	.+14     	; 0x235c <mrpp_state_init+0x130>
    {
        state->bodies[i]=WAITING;
    234e:	f6 01       	movw	r30, r12
    2350:	e9 0f       	add	r30, r25
    2352:	f1 1d       	adc	r31, r1
    2354:	e4 58       	subi	r30, 0x84	; 132
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	10 82       	st	Z, r1
    //uint8_t nBodies=startingIndex/DR_BODY_PAYLOAD_SIZE;
    //handling edge cases where data matches exact size of bodies fx 48, 96 and so on
    //nBodies=startingIndex%DR_BODY_PAYLOAD_SIZE==0?nBodies:nBodies+1;
    //state->nBodies=nBodies;

    for (uint8_t i = 0; i < nBodies; i++)
    235a:	9f 5f       	subi	r25, 0xFF	; 255
    235c:	98 17       	cp	r25, r24
    235e:	b8 f3       	brcs	.-18     	; 0x234e <mrpp_state_init+0x122>
    {
        state->bodies[i]=WAITING;
    }
}
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	1f 91       	pop	r17
    2366:	0f 91       	pop	r16
    2368:	ff 90       	pop	r15
    236a:	ef 90       	pop	r14
    236c:	df 90       	pop	r13
    236e:	cf 90       	pop	r12
    2370:	bf 90       	pop	r11
    2372:	af 90       	pop	r10
    2374:	08 95       	ret

Disassembly of section .text.mrpp_state_get_header:

00003bb2 <mrpp_state_get_header>:


uint8_t mrpp_state_get_header(MRPP_STATE *state, uint8_t package[]){
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	8c 01       	movw	r16, r24
    3bbc:	eb 01       	movw	r28, r22
    package[0]=0;
    3bbe:	18 82       	st	Y, r1
    package[1]=state->lastSubId;
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	81 81       	ldd	r24, Z+1	; 0x01
    3bc4:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    3bc6:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    3bc8:	c8 01       	movw	r24, r16
    3bca:	0e 94 12 19 	call	0x3224	; 0x3224 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	35 c0       	rjmp	.+106    	; 0x3c3c <mrpp_state_get_header+0x8a>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    3bd2:	82 2f       	mov	r24, r18
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	aa 0f       	add	r26, r26
    3bda:	bb 1f       	adc	r27, r27
    3bdc:	aa 0f       	add	r26, r26
    3bde:	bb 1f       	adc	r27, r27
    3be0:	ad 01       	movw	r20, r26
    3be2:	4a 5f       	subi	r20, 0xFA	; 250
    3be4:	5f 4f       	sbci	r21, 0xFF	; 255
    3be6:	4c 0f       	add	r20, r28
    3be8:	5d 1f       	adc	r21, r29
    3bea:	fc 01       	movw	r30, r24
    3bec:	ee 0f       	add	r30, r30
    3bee:	ff 1f       	adc	r31, r31
    3bf0:	88 0f       	add	r24, r24
    3bf2:	99 1f       	adc	r25, r25
    3bf4:	88 0f       	add	r24, r24
    3bf6:	99 1f       	adc	r25, r25
    3bf8:	88 0f       	add	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	e8 0f       	add	r30, r24
    3bfe:	f9 1f       	adc	r31, r25
    3c00:	bf 01       	movw	r22, r30
    3c02:	60 0f       	add	r22, r16
    3c04:	71 1f       	adc	r23, r17
    3c06:	fb 01       	movw	r30, r22
    3c08:	84 81       	ldd	r24, Z+4	; 0x04
    3c0a:	fa 01       	movw	r30, r20
    3c0c:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    3c0e:	cd 01       	movw	r24, r26
    3c10:	07 96       	adiw	r24, 0x07	; 7
    3c12:	8c 0f       	add	r24, r28
    3c14:	9d 1f       	adc	r25, r29
    3c16:	fb 01       	movw	r30, r22
    3c18:	33 81       	ldd	r19, Z+3	; 0x03
    3c1a:	fc 01       	movw	r30, r24
    3c1c:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    3c1e:	cd 01       	movw	r24, r26
    3c20:	08 96       	adiw	r24, 0x08	; 8
    3c22:	8c 0f       	add	r24, r28
    3c24:	9d 1f       	adc	r25, r29
    3c26:	fb 01       	movw	r30, r22
    3c28:	36 81       	ldd	r19, Z+6	; 0x06
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    3c2e:	19 96       	adiw	r26, 0x09	; 9
    3c30:	ac 0f       	add	r26, r28
    3c32:	bd 1f       	adc	r27, r29
    3c34:	fb 01       	movw	r30, r22
    3c36:	85 81       	ldd	r24, Z+5	; 0x05
    3c38:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3c3a:	2f 5f       	subi	r18, 0xFF	; 255
    3c3c:	f8 01       	movw	r30, r16
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	28 17       	cp	r18, r24
    3c42:	38 f2       	brcs	.-114    	; 0x3bd2 <mrpp_state_get_header+0x20>
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3c44:	88 0f       	add	r24, r24
    3c46:	88 0f       	add	r24, r24
}
    3c48:	8a 5f       	subi	r24, 0xFA	; 250
    3c4a:	df 91       	pop	r29
    3c4c:	cf 91       	pop	r28
    3c4e:	1f 91       	pop	r17
    3c50:	0f 91       	pop	r16
    3c52:	08 95       	ret

Disassembly of section .text.mrpp_state_get_tail:

000039c6 <mrpp_state_get_tail>:

uint8_t mrpp_state_get_tail(MRPP_STATE *state, uint8_t package[]){
    39c6:	0f 93       	push	r16
    39c8:	1f 93       	push	r17
    39ca:	cf 93       	push	r28
    39cc:	df 93       	push	r29
    39ce:	8c 01       	movw	r16, r24
    39d0:	eb 01       	movw	r28, r22
    package[0]=state->lastSubId;
    39d2:	fc 01       	movw	r30, r24
    39d4:	81 81       	ldd	r24, Z+1	; 0x01
    39d6:	88 83       	st	Y, r24
    package[1]=state->lastSubId;
    39d8:	81 81       	ldd	r24, Z+1	; 0x01
    39da:	89 83       	std	Y+1, r24	; 0x01

    //status bit
    package[2]=0;
    39dc:	1a 82       	std	Y+2, r1	; 0x02

    //add data type
    add_data_types(state, package);
    39de:	c8 01       	movw	r24, r16
    39e0:	0e 94 12 19 	call	0x3224	; 0x3224 <add_data_types>

    for (uint8_t i = 0; i < state->nCollections; i++)
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	35 c0       	rjmp	.+106    	; 0x3a52 <mrpp_state_get_tail+0x8c>
    {
        package[i*4+6]=state->collections[i].startIndex >> 8;
    39e8:	82 2f       	mov	r24, r18
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	dc 01       	movw	r26, r24
    39ee:	aa 0f       	add	r26, r26
    39f0:	bb 1f       	adc	r27, r27
    39f2:	aa 0f       	add	r26, r26
    39f4:	bb 1f       	adc	r27, r27
    39f6:	ad 01       	movw	r20, r26
    39f8:	4a 5f       	subi	r20, 0xFA	; 250
    39fa:	5f 4f       	sbci	r21, 0xFF	; 255
    39fc:	4c 0f       	add	r20, r28
    39fe:	5d 1f       	adc	r21, r29
    3a00:	fc 01       	movw	r30, r24
    3a02:	ee 0f       	add	r30, r30
    3a04:	ff 1f       	adc	r31, r31
    3a06:	88 0f       	add	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	88 0f       	add	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	88 0f       	add	r24, r24
    3a10:	99 1f       	adc	r25, r25
    3a12:	e8 0f       	add	r30, r24
    3a14:	f9 1f       	adc	r31, r25
    3a16:	bf 01       	movw	r22, r30
    3a18:	60 0f       	add	r22, r16
    3a1a:	71 1f       	adc	r23, r17
    3a1c:	fb 01       	movw	r30, r22
    3a1e:	84 81       	ldd	r24, Z+4	; 0x04
    3a20:	fa 01       	movw	r30, r20
    3a22:	80 83       	st	Z, r24
        package[i*4+7]=state->collections[i].startIndex;
    3a24:	cd 01       	movw	r24, r26
    3a26:	07 96       	adiw	r24, 0x07	; 7
    3a28:	8c 0f       	add	r24, r28
    3a2a:	9d 1f       	adc	r25, r29
    3a2c:	fb 01       	movw	r30, r22
    3a2e:	33 81       	ldd	r19, Z+3	; 0x03
    3a30:	fc 01       	movw	r30, r24
    3a32:	30 83       	st	Z, r19
        package[i*4+8]=state->collections[i].length>>8;
    3a34:	cd 01       	movw	r24, r26
    3a36:	08 96       	adiw	r24, 0x08	; 8
    3a38:	8c 0f       	add	r24, r28
    3a3a:	9d 1f       	adc	r25, r29
    3a3c:	fb 01       	movw	r30, r22
    3a3e:	36 81       	ldd	r19, Z+6	; 0x06
    3a40:	fc 01       	movw	r30, r24
    3a42:	30 83       	st	Z, r19
        package[i*4+9]=state->collections[i].length;
    3a44:	19 96       	adiw	r26, 0x09	; 9
    3a46:	ac 0f       	add	r26, r28
    3a48:	bd 1f       	adc	r27, r29
    3a4a:	fb 01       	movw	r30, r22
    3a4c:	85 81       	ldd	r24, Z+5	; 0x05
    3a4e:	8c 93       	st	X, r24
    package[2]=0;

    //add data type
    add_data_types(state, package);

    for (uint8_t i = 0; i < state->nCollections; i++)
    3a50:	2f 5f       	subi	r18, 0xFF	; 255
    3a52:	f8 01       	movw	r30, r16
    3a54:	82 81       	ldd	r24, Z+2	; 0x02
    3a56:	28 17       	cp	r18, r24
    3a58:	38 f2       	brcs	.-114    	; 0x39e8 <mrpp_state_get_tail+0x22>
        package[i*4+6]=state->collections[i].startIndex >> 8;
        package[i*4+7]=state->collections[i].startIndex;
        package[i*4+8]=state->collections[i].length>>8;
        package[i*4+9]=state->collections[i].length;
    }
    return 6+state->nCollections*DR_HEADER_COLLECTION_META_SIZE;
    3a5a:	88 0f       	add	r24, r24
    3a5c:	88 0f       	add	r24, r24
}
    3a5e:	8a 5f       	subi	r24, 0xFA	; 250
    3a60:	df 91       	pop	r29
    3a62:	cf 91       	pop	r28
    3a64:	1f 91       	pop	r17
    3a66:	0f 91       	pop	r16
    3a68:	08 95       	ret

Disassembly of section .text.mrpp_state_set_collection:

00004066 <mrpp_state_set_collection>:
    package[5]=dt & 0xff;
} 



void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    4066:	0f 93       	push	r16
    4068:	1f 93       	push	r17
    406a:	cf 93       	push	r28
    406c:	df 93       	push	r29
    406e:	8c 01       	movw	r16, r24
    state->collections[collectionId-1].status=DONE;
    4070:	a6 2f       	mov	r26, r22
    4072:	b0 e0       	ldi	r27, 0x00	; 0
    4074:	11 97       	sbiw	r26, 0x01	; 1
    4076:	fd 01       	movw	r30, r26
    4078:	ee 0f       	add	r30, r30
    407a:	ff 1f       	adc	r31, r31
    407c:	cd 01       	movw	r24, r26
    407e:	88 0f       	add	r24, r24
    4080:	99 1f       	adc	r25, r25
    4082:	88 0f       	add	r24, r24
    4084:	99 1f       	adc	r25, r25
    4086:	88 0f       	add	r24, r24
    4088:	99 1f       	adc	r25, r25
    408a:	e8 0f       	add	r30, r24
    408c:	f9 1f       	adc	r31, r25
    408e:	e0 0f       	add	r30, r16
    4090:	f1 1f       	adc	r31, r17
    4092:	83 e0       	ldi	r24, 0x03	; 3
    4094:	84 87       	std	Z+12, r24	; 0x0c

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0a c0       	rjmp	.+20     	; 0x40ae <mrpp_state_set_collection+0x48>
    {
        metadata[i]=timestamp[i];
    409a:	e9 2f       	mov	r30, r25
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	e9 01       	movw	r28, r18
    40a0:	ce 0f       	add	r28, r30
    40a2:	df 1f       	adc	r29, r31
    40a4:	e4 0f       	add	r30, r20
    40a6:	f5 1f       	adc	r31, r21
    40a8:	80 81       	ld	r24, Z
    40aa:	88 83       	st	Y, r24

void mrpp_state_set_collection(MRPP_STATE *state, uint8_t collectionId, uint8_t timestamp[4], uint8_t metadata[6]){
    state->collections[collectionId-1].status=DONE;

    //Copy ts
    for (uint8_t i = 0; i < 4; i++)
    40ac:	9f 5f       	subi	r25, 0xFF	; 255
    40ae:	94 30       	cpi	r25, 0x04	; 4
    40b0:	a0 f3       	brcs	.-24     	; 0x409a <mrpp_state_set_collection+0x34>
    {
        metadata[i]=timestamp[i];
    }

    //add sampling interval
    metadata[4]=state->collections[collectionId-1].samplingInterval>>8;
    40b2:	cd 01       	movw	r24, r26
    40b4:	88 0f       	add	r24, r24
    40b6:	99 1f       	adc	r25, r25
    40b8:	aa 0f       	add	r26, r26
    40ba:	bb 1f       	adc	r27, r27
    40bc:	aa 0f       	add	r26, r26
    40be:	bb 1f       	adc	r27, r27
    40c0:	aa 0f       	add	r26, r26
    40c2:	bb 1f       	adc	r27, r27
    40c4:	a8 0f       	add	r26, r24
    40c6:	b9 1f       	adc	r27, r25
    40c8:	a0 0f       	add	r26, r16
    40ca:	b1 1f       	adc	r27, r17
    40cc:	19 96       	adiw	r26, 0x09	; 9
    40ce:	8c 91       	ld	r24, X
    40d0:	19 97       	sbiw	r26, 0x09	; 9
    40d2:	f9 01       	movw	r30, r18
    40d4:	84 83       	std	Z+4, r24	; 0x04
    metadata[5]=state->collections[collectionId-1].samplingInterval;
    40d6:	18 96       	adiw	r26, 0x08	; 8
    40d8:	8c 91       	ld	r24, X
    40da:	85 83       	std	Z+5, r24	; 0x05


    //Update bodies
    update_bodies(state, collectionId);
    40dc:	c8 01       	movw	r24, r16
    40de:	0e 94 65 10 	call	0x20ca	; 0x20ca <update_bodies>
}
    40e2:	df 91       	pop	r29
    40e4:	cf 91       	pop	r28
    40e6:	1f 91       	pop	r17
    40e8:	0f 91       	pop	r16
    40ea:	08 95       	ret

Disassembly of section .text.mrpp_state_is_body_ready:

00005db6 <mrpp_state_is_body_ready>:
        state->bodies[i]=READY;
    }
  
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    5db6:	ac 01       	movw	r20, r24
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5db8:	90 e0       	ldi	r25, 0x00	; 0
    5dba:	0b c0       	rjmp	.+22     	; 0x5dd2 <mrpp_state_is_body_ready+0x1c>
    {
        if(state->bodies[i]==READY){
    5dbc:	29 2f       	mov	r18, r25
    5dbe:	30 e0       	ldi	r19, 0x00	; 0
    5dc0:	fa 01       	movw	r30, r20
    5dc2:	e2 0f       	add	r30, r18
    5dc4:	f3 1f       	adc	r31, r19
    5dc6:	e4 58       	subi	r30, 0x84	; 132
    5dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dca:	80 81       	ld	r24, Z
    5dcc:	81 30       	cpi	r24, 0x01	; 1
    5dce:	49 f0       	breq	.+18     	; 0x5de2 <mrpp_state_is_body_ready+0x2c>
  
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    for (uint8_t i = 0; i < state->nBodies; i++)
    5dd0:	9f 5f       	subi	r25, 0xFF	; 255
    5dd2:	fa 01       	movw	r30, r20
    5dd4:	e5 58       	subi	r30, 0x85	; 133
    5dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd8:	80 81       	ld	r24, Z
    5dda:	98 17       	cp	r25, r24
    5ddc:	78 f3       	brcs	.-34     	; 0x5dbc <mrpp_state_is_body_ready+0x6>
    }
  
}

int16_t mrpp_state_is_body_ready(MRPP_STATE *state){
    int16_t bodyIndex=-1;
    5dde:	2f ef       	ldi	r18, 0xFF	; 255
    5de0:	3f ef       	ldi	r19, 0xFF	; 255
            bodyIndex=i;
            break;
        }
    }
    return bodyIndex;
}
    5de2:	c9 01       	movw	r24, r18
    5de4:	08 95       	ret

Disassembly of section .text.mrpp_state_all_bodies_sent:

00005f2a <mrpp_state_all_bodies_sent>:

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    5f2a:	9c 01       	movw	r18, r24
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    }
    return bodyIndex;
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;
    5f2e:	81 e0       	ldi	r24, 0x01	; 1

    for (uint8_t i = 0; i < state->nBodies; i++)
    5f30:	0a c0       	rjmp	.+20     	; 0x5f46 <mrpp_state_all_bodies_sent+0x1c>
    {
        if(state->bodies[i]!= SENT){
    5f32:	f9 01       	movw	r30, r18
    5f34:	e9 0f       	add	r30, r25
    5f36:	f1 1d       	adc	r31, r1
    5f38:	e4 58       	subi	r30, 0x84	; 132
    5f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f3c:	40 81       	ld	r20, Z
    5f3e:	42 30       	cpi	r20, 0x02	; 2
    5f40:	09 f0       	breq	.+2      	; 0x5f44 <mrpp_state_all_bodies_sent+0x1a>
            allSent=false;
    5f42:	80 e0       	ldi	r24, 0x00	; 0
}

bool mrpp_state_all_bodies_sent(MRPP_STATE *state){
    bool allSent=true;

    for (uint8_t i = 0; i < state->nBodies; i++)
    5f44:	9f 5f       	subi	r25, 0xFF	; 255
    5f46:	f9 01       	movw	r30, r18
    5f48:	e5 58       	subi	r30, 0x85	; 133
    5f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f4c:	40 81       	ld	r20, Z
    5f4e:	94 17       	cp	r25, r20
    5f50:	80 f3       	brcs	.-32     	; 0x5f32 <mrpp_state_all_bodies_sent+0x8>
            allSent=false;
        }
    }
    return allSent;
    
}
    5f52:	08 95       	ret

Disassembly of section .text.mrpp_state_get_ready_body:

00002f74 <mrpp_state_get_ready_body>:

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    2f74:	8f 92       	push	r8
    2f76:	9f 92       	push	r9
    2f78:	af 92       	push	r10
    2f7a:	bf 92       	push	r11
    2f7c:	cf 92       	push	r12
    2f7e:	df 92       	push	r13
    2f80:	ef 92       	push	r14
    2f82:	ff 92       	push	r15
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	cf 93       	push	r28
    2f8a:	df 93       	push	r29
    2f8c:	ec 01       	movw	r28, r24
    2f8e:	6b 01       	movw	r12, r22
    2f90:	5a 01       	movw	r10, r20
    2f92:	49 01       	movw	r8, r18
    int16_t res=mrpp_state_is_body_ready(state);
    2f94:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <mrpp_state_is_body_ready>
    if(res==-1 || res!=bodyIndex ) return false;
    2f98:	8f 3f       	cpi	r24, 0xFF	; 255
    2f9a:	2f ef       	ldi	r18, 0xFF	; 255
    2f9c:	92 07       	cpc	r25, r18
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <mrpp_state_get_ready_body+0x2e>
    2fa0:	51 c0       	rjmp	.+162    	; 0x3044 <mrpp_state_get_ready_body+0xd0>
    2fa2:	8c 15       	cp	r24, r12
    2fa4:	9d 05       	cpc	r25, r13
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <mrpp_state_get_ready_body+0x36>
    2fa8:	4f c0       	rjmp	.+158    	; 0x3048 <mrpp_state_get_ready_body+0xd4>
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	09 c0       	rjmp	.+18     	; 0x2fc0 <mrpp_state_get_ready_body+0x4c>

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    {
        if(state->bodies[i]==READY){
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e8 0f       	add	r30, r24
    2fb2:	f1 1d       	adc	r31, r1
    2fb4:	e4 58       	subi	r30, 0x84	; 132
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	90 81       	ld	r25, Z
    2fba:	91 30       	cpi	r25, 0x01	; 1
    2fbc:	41 f0       	breq	.+16     	; 0x2fce <mrpp_state_get_ready_body+0x5a>
bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    for (uint8_t i = 0; i < state->nBodies; i++)
    2fbe:	8f 5f       	subi	r24, 0xFF	; 255
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e5 58       	subi	r30, 0x85	; 133
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	90 81       	ld	r25, Z
    2fc8:	89 17       	cp	r24, r25
    2fca:	88 f3       	brcs	.-30     	; 0x2fae <mrpp_state_get_ready_body+0x3a>

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;

    uint8_t readyIndex=0;
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
            readyIndex=i;
            break;
        }
    }

    *subId=readyIndex+1;
    2fce:	91 e0       	ldi	r25, 0x01	; 1
    2fd0:	98 0f       	add	r25, r24
    2fd2:	f5 01       	movw	r30, r10
    2fd4:	90 83       	st	Z, r25
    *lastSubId=state->lastSubId;
    2fd6:	99 81       	ldd	r25, Y+1	; 0x01
    2fd8:	f4 01       	movw	r30, r8
    2fda:	90 83       	st	Z, r25

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	40 e3       	ldi	r20, 0x30	; 48
    2fe0:	48 9f       	mul	r20, r24
    2fe2:	90 01       	movw	r18, r0
    2fe4:	49 9f       	mul	r20, r25
    2fe6:	30 0d       	add	r19, r0
    2fe8:	11 24       	eor	r1, r1
    2fea:	f8 01       	movw	r30, r16
    2fec:	31 83       	std	Z+1, r19	; 0x01
    2fee:	20 83       	st	Z, r18
    if(readyIndex<state->nBodies-1){
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e5 58       	subi	r30, 0x85	; 133
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	20 81       	ld	r18, Z
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	21 50       	subi	r18, 0x01	; 1
    2ffc:	31 09       	sbc	r19, r1
    2ffe:	82 17       	cp	r24, r18
    3000:	93 07       	cpc	r25, r19
    3002:	2c f4       	brge	.+10     	; 0x300e <mrpp_state_get_ready_body+0x9a>
        *length=DR_BODY_PAYLOAD_SIZE;
    3004:	80 e3       	ldi	r24, 0x30	; 48
    3006:	f7 01       	movw	r30, r14
    3008:	80 83       	st	Z, r24
    }else{
		*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE;
        //Legacy
		//*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	1e c0       	rjmp	.+60     	; 0x304a <mrpp_state_get_ready_body+0xd6>

    *begin=readyIndex*DR_BODY_PAYLOAD_SIZE;
    if(readyIndex<state->nBodies-1){
        *length=DR_BODY_PAYLOAD_SIZE;
    }else{
		*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE;
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	ac 01       	movw	r20, r24
    3016:	44 0f       	add	r20, r20
    3018:	55 1f       	adc	r21, r21
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	84 0f       	add	r24, r20
    3028:	95 1f       	adc	r25, r21
    302a:	c8 0f       	add	r28, r24
    302c:	d9 1f       	adc	r29, r25
    302e:	9b 81       	ldd	r25, Y+3	; 0x03
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	89 0f       	add	r24, r25
    3034:	f0 e3       	ldi	r31, 0x30	; 48
    3036:	2f 9f       	mul	r18, r31
    3038:	80 19       	sub	r24, r0
    303a:	11 24       	eor	r1, r1
    303c:	f7 01       	movw	r30, r14
    303e:	80 83       	st	Z, r24
        //Legacy
		//*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	03 c0       	rjmp	.+6      	; 0x304a <mrpp_state_get_ready_body+0xd6>
    
}

bool mrpp_state_get_ready_body(MRPP_STATE *state, int16_t bodyIndex, uint8_t *subId, uint8_t *lastSubId, uint16_t *begin, uint8_t*length){
    int16_t res=mrpp_state_is_body_ready(state);
    if(res==-1 || res!=bodyIndex ) return false;
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	01 c0       	rjmp	.+2      	; 0x304a <mrpp_state_get_ready_body+0xd6>
    3048:	80 e0       	ldi	r24, 0x00	; 0
		*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)-(state->nBodies-1)*DR_BODY_PAYLOAD_SIZE;
        //Legacy
		//*length=(state->collections[state->nCollections-1].startIndex+state->collections[state->nCollections-1].length)%DR_BODY_PAYLOAD_SIZE; 
    } 
    return true; 
}
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	1f 91       	pop	r17
    3050:	0f 91       	pop	r16
    3052:	ff 90       	pop	r15
    3054:	ef 90       	pop	r14
    3056:	df 90       	pop	r13
    3058:	cf 90       	pop	r12
    305a:	bf 90       	pop	r11
    305c:	af 90       	pop	r10
    305e:	9f 90       	pop	r9
    3060:	8f 90       	pop	r8
    3062:	08 95       	ret

Disassembly of section .text.mrpp_state_set_body_sent:

000061ae <mrpp_state_set_body_sent>:

void mrpp_state_set_body_sent(MRPP_STATE *state, int16_t bodyIndex){
    if(state->nBodies<=bodyIndex) return;
    61ae:	fc 01       	movw	r30, r24
    61b0:	e5 58       	subi	r30, 0x85	; 133
    61b2:	ff 4f       	sbci	r31, 0xFF	; 255
    61b4:	20 81       	ld	r18, Z
    61b6:	30 e0       	ldi	r19, 0x00	; 0
    61b8:	62 17       	cp	r22, r18
    61ba:	73 07       	cpc	r23, r19
    61bc:	3c f4       	brge	.+14     	; 0x61cc <mrpp_state_set_body_sent+0x1e>

    state->bodies[bodyIndex]=SENT;
    61be:	68 0f       	add	r22, r24
    61c0:	79 1f       	adc	r23, r25
    61c2:	fb 01       	movw	r30, r22
    61c4:	e4 58       	subi	r30, 0x84	; 132
    61c6:	ff 4f       	sbci	r31, 0xFF	; 255
    61c8:	82 e0       	ldi	r24, 0x02	; 2
    61ca:	80 83       	st	Z, r24
    61cc:	08 95       	ret

Disassembly of section .text.mrpp_state_get_collection_address:

00005a8e <mrpp_state_get_collection_address>:
}


void mrpp_state_get_collection_address(MRPP_STATE *state, uint8_t collectionId, uint16_t *begin, uint16_t*length){
    *begin=state->collections[collectionId-1].startIndex;
    5a8e:	70 e0       	ldi	r23, 0x00	; 0
    5a90:	61 50       	subi	r22, 0x01	; 1
    5a92:	71 09       	sbc	r23, r1
    5a94:	fb 01       	movw	r30, r22
    5a96:	ee 0f       	add	r30, r30
    5a98:	ff 1f       	adc	r31, r31
    5a9a:	66 0f       	add	r22, r22
    5a9c:	77 1f       	adc	r23, r23
    5a9e:	66 0f       	add	r22, r22
    5aa0:	77 1f       	adc	r23, r23
    5aa2:	66 0f       	add	r22, r22
    5aa4:	77 1f       	adc	r23, r23
    5aa6:	e6 0f       	add	r30, r22
    5aa8:	f7 1f       	adc	r31, r23
    5aaa:	e8 0f       	add	r30, r24
    5aac:	f9 1f       	adc	r31, r25
    5aae:	83 81       	ldd	r24, Z+3	; 0x03
    5ab0:	94 81       	ldd	r25, Z+4	; 0x04
    5ab2:	da 01       	movw	r26, r20
    5ab4:	8d 93       	st	X+, r24
    5ab6:	9c 93       	st	X, r25
    *length=state->collections[collectionId-1].length;
    5ab8:	85 81       	ldd	r24, Z+5	; 0x05
    5aba:	96 81       	ldd	r25, Z+6	; 0x06
    5abc:	f9 01       	movw	r30, r18
    5abe:	91 83       	std	Z+1, r25	; 0x01
    5ac0:	80 83       	st	Z, r24
    5ac2:	08 95       	ret

Disassembly of section .text.cb_cnt_time:

00005de6 <cb_cnt_time>:
bool PUMP_is_done(){
	return cnt>=_seconds;
}

static void cb_cnt_time(){
	cnt++;
    5de6:	80 91 87 0f 	lds	r24, 0x0F87	; 0x800f87 <cnt>
    5dea:	90 91 88 0f 	lds	r25, 0x0F88	; 0x800f88 <cnt+0x1>
    5dee:	01 96       	adiw	r24, 0x01	; 1
    5df0:	90 93 88 0f 	sts	0x0F88, r25	; 0x800f88 <cnt+0x1>
    5df4:	80 93 87 0f 	sts	0x0F87, r24	; 0x800f87 <cnt>
	if(cnt>=_seconds){
    5df8:	20 91 89 0f 	lds	r18, 0x0F89	; 0x800f89 <_seconds>
    5dfc:	30 91 8a 0f 	lds	r19, 0x0F8A	; 0x800f8a <_seconds+0x1>
    5e00:	82 17       	cp	r24, r18
    5e02:	93 07       	cpc	r25, r19
    5e04:	38 f0       	brcs	.+14     	; 0x5e14 <cb_cnt_time+0x2e>
		TC2_HAL_cancel(eventPointer);
    5e06:	80 91 a8 0f 	lds	r24, 0x0FA8	; 0x800fa8 <eventPointer>
    5e0a:	0e 94 2b 2c 	call	0x5856	; 0x5856 <TC2_HAL_cancel>
		PM_HAL_BC_power(false);
    5e0e:	80 e0       	ldi	r24, 0x00	; 0
    5e10:	0e 94 6d 32 	call	0x64da	; 0x64da <PM_HAL_BC_power>
    5e14:	08 95       	ret

Disassembly of section .text.PUMP_start:

00005ff4 <PUMP_start>:

static void cb_cnt_time();


void PUMP_start(uint16_t seconds){
	cnt=0;
    5ff4:	10 92 88 0f 	sts	0x0F88, r1	; 0x800f88 <cnt+0x1>
    5ff8:	10 92 87 0f 	sts	0x0F87, r1	; 0x800f87 <cnt>
	_seconds=seconds;
    5ffc:	90 93 8a 0f 	sts	0x0F8A, r25	; 0x800f8a <_seconds+0x1>
    6000:	80 93 89 0f 	sts	0x0F89, r24	; 0x800f89 <_seconds>
	eventPointer=TC2_HAL_subscribe(&cb_cnt_time);
    6004:	83 ef       	ldi	r24, 0xF3	; 243
    6006:	9e e2       	ldi	r25, 0x2E	; 46
    6008:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <TC2_HAL_subscribe>
    600c:	80 93 a8 0f 	sts	0x0FA8, r24	; 0x800fa8 <eventPointer>
	PM_HAL_BC_power(true);
    6010:	81 e0       	ldi	r24, 0x01	; 1
    6012:	0e 94 6d 32 	call	0x64da	; 0x64da <PM_HAL_BC_power>
    6016:	08 95       	ret

Disassembly of section .text.PUMP_is_done:

00006314 <PUMP_is_done>:
}

bool PUMP_is_done(){
	return cnt>=_seconds;
    6314:	40 91 87 0f 	lds	r20, 0x0F87	; 0x800f87 <cnt>
    6318:	50 91 88 0f 	lds	r21, 0x0F88	; 0x800f88 <cnt+0x1>
    631c:	20 91 89 0f 	lds	r18, 0x0F89	; 0x800f89 <_seconds>
    6320:	30 91 8a 0f 	lds	r19, 0x0F8A	; 0x800f8a <_seconds+0x1>
    6324:	81 e0       	ldi	r24, 0x01	; 1
    6326:	42 17       	cp	r20, r18
    6328:	53 07       	cpc	r21, r19
    632a:	08 f4       	brcc	.+2      	; 0x632e <PUMP_is_done+0x1a>
    632c:	80 e0       	ldi	r24, 0x00	; 0
}
    632e:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00002b7e <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2b7e:	1f 93       	push	r17
    2b80:	cf 93       	push	r28
    2b82:	df 93       	push	r29
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <datetime_to_BCD+0x8>
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <datetime_to_BCD+0xa>
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <datetime_to_BCD+0xc>
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	f9 01       	movw	r30, r18
    2b90:	3d ec       	ldi	r19, 0xCD	; 205
    2b92:	43 9f       	mul	r20, r19
    2b94:	21 2d       	mov	r18, r1
    2b96:	11 24       	eor	r1, r1
    2b98:	26 95       	lsr	r18
    2b9a:	26 95       	lsr	r18
    2b9c:	26 95       	lsr	r18
    2b9e:	10 e1       	ldi	r17, 0x10	; 16
    2ba0:	21 9f       	mul	r18, r17
    2ba2:	d0 01       	movw	r26, r0
    2ba4:	11 24       	eor	r1, r1
    2ba6:	22 0f       	add	r18, r18
    2ba8:	b2 2f       	mov	r27, r18
    2baa:	bb 0f       	add	r27, r27
    2bac:	bb 0f       	add	r27, r27
    2bae:	2b 0f       	add	r18, r27
    2bb0:	42 1b       	sub	r20, r18
    2bb2:	4a 2b       	or	r20, r26
    2bb4:	40 83       	st	Z, r20
    2bb6:	53 9f       	mul	r21, r19
    2bb8:	21 2d       	mov	r18, r1
    2bba:	11 24       	eor	r1, r1
    2bbc:	26 95       	lsr	r18
    2bbe:	26 95       	lsr	r18
    2bc0:	26 95       	lsr	r18
    2bc2:	40 e1       	ldi	r20, 0x10	; 16
    2bc4:	24 9f       	mul	r18, r20
    2bc6:	d0 01       	movw	r26, r0
    2bc8:	11 24       	eor	r1, r1
    2bca:	22 0f       	add	r18, r18
    2bcc:	42 2f       	mov	r20, r18
    2bce:	44 0f       	add	r20, r20
    2bd0:	44 0f       	add	r20, r20
    2bd2:	24 0f       	add	r18, r20
    2bd4:	52 1b       	sub	r21, r18
    2bd6:	5a 2b       	or	r21, r26
    2bd8:	51 83       	std	Z+1, r21	; 0x01
    2bda:	63 9f       	mul	r22, r19
    2bdc:	41 2d       	mov	r20, r1
    2bde:	11 24       	eor	r1, r1
    2be0:	46 95       	lsr	r20
    2be2:	46 95       	lsr	r20
    2be4:	46 95       	lsr	r20
    2be6:	10 e1       	ldi	r17, 0x10	; 16
    2be8:	41 9f       	mul	r20, r17
    2bea:	d0 01       	movw	r26, r0
    2bec:	11 24       	eor	r1, r1
    2bee:	44 0f       	add	r20, r20
    2bf0:	24 2f       	mov	r18, r20
    2bf2:	22 0f       	add	r18, r18
    2bf4:	22 0f       	add	r18, r18
    2bf6:	42 0f       	add	r20, r18
    2bf8:	64 1b       	sub	r22, r20
    2bfa:	6a 2b       	or	r22, r26
    2bfc:	62 83       	std	Z+2, r22	; 0x02
    2bfe:	73 9f       	mul	r23, r19
    2c00:	41 2d       	mov	r20, r1
    2c02:	11 24       	eor	r1, r1
    2c04:	46 95       	lsr	r20
    2c06:	46 95       	lsr	r20
    2c08:	46 95       	lsr	r20
    2c0a:	20 e1       	ldi	r18, 0x10	; 16
    2c0c:	42 9f       	mul	r20, r18
    2c0e:	d0 01       	movw	r26, r0
    2c10:	11 24       	eor	r1, r1
    2c12:	44 0f       	add	r20, r20
    2c14:	24 2f       	mov	r18, r20
    2c16:	22 0f       	add	r18, r18
    2c18:	22 0f       	add	r18, r18
    2c1a:	42 0f       	add	r20, r18
    2c1c:	74 1b       	sub	r23, r20
    2c1e:	7a 2b       	or	r23, r26
    2c20:	73 83       	std	Z+3, r23	; 0x03
    2c22:	83 9f       	mul	r24, r19
    2c24:	41 2d       	mov	r20, r1
    2c26:	11 24       	eor	r1, r1
    2c28:	46 95       	lsr	r20
    2c2a:	46 95       	lsr	r20
    2c2c:	46 95       	lsr	r20
    2c2e:	10 e1       	ldi	r17, 0x10	; 16
    2c30:	41 9f       	mul	r20, r17
    2c32:	b0 01       	movw	r22, r0
    2c34:	11 24       	eor	r1, r1
    2c36:	44 0f       	add	r20, r20
    2c38:	24 2f       	mov	r18, r20
    2c3a:	22 0f       	add	r18, r18
    2c3c:	22 0f       	add	r18, r18
    2c3e:	42 0f       	add	r20, r18
    2c40:	84 1b       	sub	r24, r20
    2c42:	86 2b       	or	r24, r22
    2c44:	84 83       	std	Z+4, r24	; 0x04
    2c46:	93 9f       	mul	r25, r19
    2c48:	31 2d       	mov	r19, r1
    2c4a:	11 24       	eor	r1, r1
    2c4c:	36 95       	lsr	r19
    2c4e:	36 95       	lsr	r19
    2c50:	36 95       	lsr	r19
    2c52:	20 e1       	ldi	r18, 0x10	; 16
    2c54:	32 9f       	mul	r19, r18
    2c56:	a0 01       	movw	r20, r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	33 0f       	add	r19, r19
    2c5c:	83 2f       	mov	r24, r19
    2c5e:	88 0f       	add	r24, r24
    2c60:	88 0f       	add	r24, r24
    2c62:	38 0f       	add	r19, r24
    2c64:	93 1b       	sub	r25, r19
    2c66:	94 2b       	or	r25, r20
    2c68:	95 83       	std	Z+5, r25	; 0x05
    2c6a:	26 96       	adiw	r28, 0x06	; 6
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	1f 91       	pop	r17
    2c7c:	08 95       	ret

Disassembly of section .text.RTC_set_clock_out:

00004d90 <RTC_set_clock_out>:



const uint8_t CMD_READ_TIME_POINTER[]={0x02};
	
RTC_STATUS RTC_set_clock_out(uint8_t freq){
    4d90:	cf 93       	push	r28
    4d92:	df 93       	push	r29
    4d94:	00 d0       	rcall	.+0      	; 0x4d96 <RTC_set_clock_out+0x6>
    4d96:	cd b7       	in	r28, 0x3d	; 61
    4d98:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_SET_CLOCK_OUT[2];
	CMD_SET_CLOCK_OUT[0]=0x0D;
    4d9a:	9d e0       	ldi	r25, 0x0D	; 13
    4d9c:	99 83       	std	Y+1, r25	; 0x01
	
	switch(freq){
    4d9e:	81 30       	cpi	r24, 0x01	; 1
    4da0:	31 f0       	breq	.+12     	; 0x4dae <RTC_set_clock_out+0x1e>
    4da2:	18 f0       	brcs	.+6      	; 0x4daa <RTC_set_clock_out+0x1a>
    4da4:	80 32       	cpi	r24, 0x20	; 32
    4da6:	31 f0       	breq	.+12     	; 0x4db4 <RTC_set_clock_out+0x24>
    4da8:	13 c0       	rjmp	.+38     	; 0x4dd0 <RTC_set_clock_out+0x40>
		case 0:
			CMD_SET_CLOCK_OUT[1]=0x00;
    4daa:	1a 82       	std	Y+2, r1	; 0x02
			break;
    4dac:	05 c0       	rjmp	.+10     	; 0x4db8 <RTC_set_clock_out+0x28>
		case 1:
			CMD_SET_CLOCK_OUT[1]=0x83;
    4dae:	83 e8       	ldi	r24, 0x83	; 131
    4db0:	8a 83       	std	Y+2, r24	; 0x02
			break;
    4db2:	02 c0       	rjmp	.+4      	; 0x4db8 <RTC_set_clock_out+0x28>
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
    4db4:	82 e8       	ldi	r24, 0x82	; 130
    4db6:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			return RTC_STATUS_ERROR;
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
    4db8:	ae 01       	movw	r20, r28
    4dba:	4f 5f       	subi	r20, 0xFF	; 255
    4dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    4dbe:	60 e8       	ldi	r22, 0x80	; 128
    4dc0:	22 e0       	ldi	r18, 0x02	; 2
    4dc2:	81 e5       	ldi	r24, 0x51	; 81
    4dc4:	0e 94 b4 31 	call	0x6368	; 0x6368 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    4dc8:	88 23       	and	r24, r24
    4dca:	21 f0       	breq	.+8      	; 0x4dd4 <RTC_set_clock_out+0x44>
    4dcc:	82 e0       	ldi	r24, 0x02	; 2
    4dce:	03 c0       	rjmp	.+6      	; 0x4dd6 <RTC_set_clock_out+0x46>
			break;
		case 32:
			CMD_SET_CLOCK_OUT[1]=0x82;
			break;
		default:
			return RTC_STATUS_ERROR;
    4dd0:	81 e0       	ldi	r24, 0x01	; 1
    4dd2:	01 c0       	rjmp	.+2      	; 0x4dd6 <RTC_set_clock_out+0x46>
	}
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, CMD_SET_CLOCK_OUT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	return RTC_STATUS_SUCCESS;
    4dd4:	80 e0       	ldi	r24, 0x00	; 0
}
    4dd6:	0f 90       	pop	r0
    4dd8:	0f 90       	pop	r0
    4dda:	df 91       	pop	r29
    4ddc:	cf 91       	pop	r28
    4dde:	08 95       	ret

Disassembly of section .text.RTC_clear_wake_up_interrupt:

00005b66 <RTC_clear_wake_up_interrupt>:
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_clear_wake_up_interrupt(){
    5b66:	cf 93       	push	r28
    5b68:	df 93       	push	r29
    5b6a:	00 d0       	rcall	.+0      	; 0x5b6c <RTC_clear_wake_up_interrupt+0x6>
    5b6c:	cd b7       	in	r28, 0x3d	; 61
    5b6e:	de b7       	in	r29, 0x3e	; 62
	uint8_t CMD_ENABLE_RTC_CLEAR_INT[]={0x01, 0b00000000};
    5b70:	81 e0       	ldi	r24, 0x01	; 1
    5b72:	89 83       	std	Y+1, r24	; 0x01
    5b74:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_CLEAR_INT, 2);
    5b76:	ae 01       	movw	r20, r28
    5b78:	4f 5f       	subi	r20, 0xFF	; 255
    5b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    5b7c:	60 e8       	ldi	r22, 0x80	; 128
    5b7e:	22 e0       	ldi	r18, 0x02	; 2
    5b80:	81 e5       	ldi	r24, 0x51	; 81
    5b82:	0e 94 b4 31 	call	0x6368	; 0x6368 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    5b86:	88 23       	and	r24, r24
    5b88:	11 f0       	breq	.+4      	; 0x5b8e <RTC_clear_wake_up_interrupt+0x28>
    5b8a:	82 e0       	ldi	r24, 0x02	; 2
    5b8c:	01 c0       	rjmp	.+2      	; 0x5b90 <RTC_clear_wake_up_interrupt+0x2a>
	return RTC_STATUS_SUCCESS;
    5b8e:	80 e0       	ldi	r24, 0x00	; 0
}
    5b90:	0f 90       	pop	r0
    5b92:	0f 90       	pop	r0
    5b94:	df 91       	pop	r29
    5b96:	cf 91       	pop	r28
    5b98:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00002376 <RTC_get_current_time>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2376:	0f 93       	push	r16
    2378:	1f 93       	push	r17
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	27 97       	sbiw	r28, 0x07	; 7
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    238e:	8c 01       	movw	r16, r24
    2390:	21 e0       	ldi	r18, 0x01	; 1
    2392:	4e ec       	ldi	r20, 0xCE	; 206
    2394:	58 e0       	ldi	r21, 0x08	; 8
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	81 e5       	ldi	r24, 0x51	; 81
    239a:	0e 94 8b 32 	call	0x6516	; 0x6516 <TWI_API_write_data>
    239e:	81 11       	cpse	r24, r1
    23a0:	7c c0       	rjmp	.+248    	; 0x249a <RTC_get_current_time+0x124>
    23a2:	47 e0       	ldi	r20, 0x07	; 7
    23a4:	be 01       	movw	r22, r28
    23a6:	6f 5f       	subi	r22, 0xFF	; 255
    23a8:	7f 4f       	sbci	r23, 0xFF	; 255
    23aa:	81 e5       	ldi	r24, 0x51	; 81
    23ac:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <TWI_API_repeat_read_data_stop>
    23b0:	81 11       	cpse	r24, r1
    23b2:	75 c0       	rjmp	.+234    	; 0x249e <RTC_get_current_time+0x128>
    23b4:	29 81       	ldd	r18, Y+1	; 0x01
    23b6:	82 2f       	mov	r24, r18
    23b8:	8f 77       	andi	r24, 0x7F	; 127
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	95 95       	asr	r25
    23be:	87 95       	ror	r24
    23c0:	95 95       	asr	r25
    23c2:	87 95       	ror	r24
    23c4:	95 95       	asr	r25
    23c6:	87 95       	ror	r24
    23c8:	95 95       	asr	r25
    23ca:	87 95       	ror	r24
    23cc:	88 0f       	add	r24, r24
    23ce:	98 2f       	mov	r25, r24
    23d0:	99 0f       	add	r25, r25
    23d2:	99 0f       	add	r25, r25
    23d4:	89 0f       	add	r24, r25
    23d6:	2f 70       	andi	r18, 0x0F	; 15
    23d8:	82 0f       	add	r24, r18
    23da:	f8 01       	movw	r30, r16
    23dc:	80 83       	st	Z, r24
    23de:	2a 81       	ldd	r18, Y+2	; 0x02
    23e0:	82 2f       	mov	r24, r18
    23e2:	8f 77       	andi	r24, 0x7F	; 127
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	95 95       	asr	r25
    23e8:	87 95       	ror	r24
    23ea:	95 95       	asr	r25
    23ec:	87 95       	ror	r24
    23ee:	95 95       	asr	r25
    23f0:	87 95       	ror	r24
    23f2:	95 95       	asr	r25
    23f4:	87 95       	ror	r24
    23f6:	88 0f       	add	r24, r24
    23f8:	98 2f       	mov	r25, r24
    23fa:	99 0f       	add	r25, r25
    23fc:	99 0f       	add	r25, r25
    23fe:	89 0f       	add	r24, r25
    2400:	2f 70       	andi	r18, 0x0F	; 15
    2402:	82 0f       	add	r24, r18
    2404:	81 83       	std	Z+1, r24	; 0x01
    2406:	2b 81       	ldd	r18, Y+3	; 0x03
    2408:	82 2f       	mov	r24, r18
    240a:	8f 73       	andi	r24, 0x3F	; 63
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	95 95       	asr	r25
    2410:	87 95       	ror	r24
    2412:	95 95       	asr	r25
    2414:	87 95       	ror	r24
    2416:	95 95       	asr	r25
    2418:	87 95       	ror	r24
    241a:	95 95       	asr	r25
    241c:	87 95       	ror	r24
    241e:	88 0f       	add	r24, r24
    2420:	98 2f       	mov	r25, r24
    2422:	99 0f       	add	r25, r25
    2424:	99 0f       	add	r25, r25
    2426:	89 0f       	add	r24, r25
    2428:	2f 70       	andi	r18, 0x0F	; 15
    242a:	82 0f       	add	r24, r18
    242c:	82 83       	std	Z+2, r24	; 0x02
    242e:	2c 81       	ldd	r18, Y+4	; 0x04
    2430:	82 2f       	mov	r24, r18
    2432:	8f 73       	andi	r24, 0x3F	; 63
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	95 95       	asr	r25
    2438:	87 95       	ror	r24
    243a:	95 95       	asr	r25
    243c:	87 95       	ror	r24
    243e:	95 95       	asr	r25
    2440:	87 95       	ror	r24
    2442:	95 95       	asr	r25
    2444:	87 95       	ror	r24
    2446:	88 0f       	add	r24, r24
    2448:	98 2f       	mov	r25, r24
    244a:	99 0f       	add	r25, r25
    244c:	99 0f       	add	r25, r25
    244e:	89 0f       	add	r24, r25
    2450:	2f 70       	andi	r18, 0x0F	; 15
    2452:	82 0f       	add	r24, r18
    2454:	83 83       	std	Z+3, r24	; 0x03
    2456:	2e 81       	ldd	r18, Y+6	; 0x06
    2458:	82 2f       	mov	r24, r18
    245a:	8f 71       	andi	r24, 0x1F	; 31
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	95 95       	asr	r25
    2460:	87 95       	ror	r24
    2462:	95 95       	asr	r25
    2464:	87 95       	ror	r24
    2466:	95 95       	asr	r25
    2468:	87 95       	ror	r24
    246a:	95 95       	asr	r25
    246c:	87 95       	ror	r24
    246e:	88 0f       	add	r24, r24
    2470:	98 2f       	mov	r25, r24
    2472:	99 0f       	add	r25, r25
    2474:	99 0f       	add	r25, r25
    2476:	89 0f       	add	r24, r25
    2478:	2f 70       	andi	r18, 0x0F	; 15
    247a:	82 0f       	add	r24, r18
    247c:	84 83       	std	Z+4, r24	; 0x04
    247e:	8f 81       	ldd	r24, Y+7	; 0x07
    2480:	98 2f       	mov	r25, r24
    2482:	92 95       	swap	r25
    2484:	9f 70       	andi	r25, 0x0F	; 15
    2486:	99 0f       	add	r25, r25
    2488:	29 2f       	mov	r18, r25
    248a:	22 0f       	add	r18, r18
    248c:	22 0f       	add	r18, r18
    248e:	92 0f       	add	r25, r18
    2490:	8f 70       	andi	r24, 0x0F	; 15
    2492:	89 0f       	add	r24, r25
    2494:	85 83       	std	Z+5, r24	; 0x05
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	03 c0       	rjmp	.+6      	; 0x24a0 <RTC_get_current_time+0x12a>
    249a:	82 e0       	ldi	r24, 0x02	; 2
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <RTC_get_current_time+0x12a>
    249e:	82 e0       	ldi	r24, 0x02	; 2
    24a0:	27 96       	adiw	r28, 0x07	; 7
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	08 95       	ret

Disassembly of section .text.RTC_set_wake_up_interrupt_minutes:

00003572 <RTC_set_wake_up_interrupt_minutes>:

RTC_STATUS RTC_set_wake_up_interrupt_minutes(uint8_t minutes){
    3572:	1f 93       	push	r17
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	2d 97       	sbiw	r28, 0x0d	; 13
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	cd bf       	out	0x3d, r28	; 61
    3588:	18 2f       	mov	r17, r24
	uint8_t CMD_ENABLE_RTC_INT[]={0x01, 0b00000010};
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	89 83       	std	Y+1, r24	; 0x01
    358e:	82 e0       	ldi	r24, 0x02	; 2
    3590:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t CMD_SET_ALARM_TIME[]={0x09, 0x80, 0x80, 0x80, 0x80};
    3592:	85 e0       	ldi	r24, 0x05	; 5
    3594:	ea e5       	ldi	r30, 0x5A	; 90
    3596:	ff e0       	ldi	r31, 0x0F	; 15
    3598:	de 01       	movw	r26, r28
    359a:	13 96       	adiw	r26, 0x03	; 3
    359c:	01 90       	ld	r0, Z+
    359e:	0d 92       	st	X+, r0
    35a0:	8a 95       	dec	r24
    35a2:	e1 f7       	brne	.-8      	; 0x359c <RTC_set_wake_up_interrupt_minutes+0x2a>
	
	//Read time
	Datetime dt;
	RTC_get_current_time(&dt);
    35a4:	ce 01       	movw	r24, r28
    35a6:	08 96       	adiw	r24, 0x08	; 8
    35a8:	0e 94 bb 11 	call	0x2376	; 0x2376 <RTC_get_current_time>
	
	//add hours
	dt.minute += minutes;
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	81 0f       	add	r24, r17
	dt.minute %= 60;
    35b0:	99 e8       	ldi	r25, 0x89	; 137
    35b2:	89 9f       	mul	r24, r25
    35b4:	91 2d       	mov	r25, r1
    35b6:	11 24       	eor	r1, r1
    35b8:	92 95       	swap	r25
    35ba:	96 95       	lsr	r25
    35bc:	97 70       	andi	r25, 0x07	; 7
    35be:	2c e3       	ldi	r18, 0x3C	; 60
    35c0:	92 9f       	mul	r25, r18
    35c2:	80 19       	sub	r24, r0
    35c4:	11 24       	eor	r1, r1
    35c6:	89 87       	std	Y+9, r24	; 0x09
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
    35c8:	ae 01       	movw	r20, r28
    35ca:	4f 5f       	subi	r20, 0xFF	; 255
    35cc:	5f 4f       	sbci	r21, 0xFF	; 255
    35ce:	60 e8       	ldi	r22, 0x80	; 128
    35d0:	22 e0       	ldi	r18, 0x02	; 2
    35d2:	81 e5       	ldi	r24, 0x51	; 81
    35d4:	0e 94 b4 31 	call	0x6368	; 0x6368 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    35d8:	81 11       	cpse	r24, r1
    35da:	20 c0       	rjmp	.+64     	; 0x361c <RTC_set_wake_up_interrupt_minutes+0xaa>
	
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
    35dc:	99 85       	ldd	r25, Y+9	; 0x09
    35de:	8d ec       	ldi	r24, 0xCD	; 205
    35e0:	98 9f       	mul	r25, r24
    35e2:	81 2d       	mov	r24, r1
    35e4:	11 24       	eor	r1, r1
    35e6:	86 95       	lsr	r24
    35e8:	86 95       	lsr	r24
    35ea:	86 95       	lsr	r24
    35ec:	40 e1       	ldi	r20, 0x10	; 16
    35ee:	84 9f       	mul	r24, r20
    35f0:	90 01       	movw	r18, r0
    35f2:	11 24       	eor	r1, r1
    35f4:	88 0f       	add	r24, r24
    35f6:	38 2f       	mov	r19, r24
    35f8:	33 0f       	add	r19, r19
    35fa:	33 0f       	add	r19, r19
    35fc:	83 0f       	add	r24, r19
    35fe:	98 1b       	sub	r25, r24
    3600:	92 2b       	or	r25, r18
    3602:	9c 83       	std	Y+4, r25	; 0x04
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
    3604:	ae 01       	movw	r20, r28
    3606:	4d 5f       	subi	r20, 0xFD	; 253
    3608:	5f 4f       	sbci	r21, 0xFF	; 255
    360a:	60 e8       	ldi	r22, 0x80	; 128
    360c:	25 e0       	ldi	r18, 0x05	; 5
    360e:	81 e5       	ldi	r24, 0x51	; 81
    3610:	0e 94 b4 31 	call	0x6368	; 0x6368 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    3614:	88 23       	and	r24, r24
    3616:	21 f0       	breq	.+8      	; 0x3620 <RTC_set_wake_up_interrupt_minutes+0xae>
    3618:	82 e0       	ldi	r24, 0x02	; 2
    361a:	03 c0       	rjmp	.+6      	; 0x3622 <RTC_set_wake_up_interrupt_minutes+0xb0>
	dt.minute += minutes;
	dt.minute %= 60;
	
	//Enable int
	uint8_t status = TWI_API_write_data_stop(RTC_ADDR, CMD_ENABLE_RTC_INT, 2);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    361c:	82 e0       	ldi	r24, 0x02	; 2
    361e:	01 c0       	rjmp	.+2      	; 0x3622 <RTC_set_wake_up_interrupt_minutes+0xb0>
	//Set time
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
    3620:	80 e0       	ldi	r24, 0x00	; 0
}
    3622:	2d 96       	adiw	r28, 0x0d	; 13
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	1f 91       	pop	r17
    3634:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

000048a0 <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    48a0:	cf 93       	push	r28
    48a2:	df 93       	push	r29
    48a4:	cd b7       	in	r28, 0x3d	; 61
    48a6:	de b7       	in	r29, 0x3e	; 62
    48a8:	64 97       	sbiw	r28, 0x14	; 20
    48aa:	0f b6       	in	r0, 0x3f	; 63
    48ac:	f8 94       	cli
    48ae:	de bf       	out	0x3e, r29	; 62
    48b0:	0f be       	out	0x3f, r0	; 63
    48b2:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    48b4:	9e 01       	movw	r18, r28
    48b6:	27 5f       	subi	r18, 0xF7	; 247
    48b8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ba:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <datetime_to_BCD>
	
	data[0]=0x02;
    48be:	82 e0       	ldi	r24, 0x02	; 2
    48c0:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    48c2:	89 85       	ldd	r24, Y+9	; 0x09
    48c4:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    48c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    48c8:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    48ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    48cc:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    48ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    48d0:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    48d2:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    48d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    48d6:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    48d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    48da:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    48dc:	ae 01       	movw	r20, r28
    48de:	4f 5f       	subi	r20, 0xFF	; 255
    48e0:	5f 4f       	sbci	r21, 0xFF	; 255
    48e2:	60 e8       	ldi	r22, 0x80	; 128
    48e4:	28 e0       	ldi	r18, 0x08	; 8
    48e6:	81 e5       	ldi	r24, 0x51	; 81
    48e8:	0e 94 b4 31 	call	0x6368	; 0x6368 <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    48ec:	88 23       	and	r24, r24
    48ee:	11 f0       	breq	.+4      	; 0x48f4 <RTC_set_current_time+0x54>
    48f0:	82 e0       	ldi	r24, 0x02	; 2
    48f2:	01 c0       	rjmp	.+2      	; 0x48f6 <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    48f4:	80 e0       	ldi	r24, 0x00	; 0
}
    48f6:	64 96       	adiw	r28, 0x14	; 20
    48f8:	0f b6       	in	r0, 0x3f	; 63
    48fa:	f8 94       	cli
    48fc:	de bf       	out	0x3e, r29	; 62
    48fe:	0f be       	out	0x3f, r0	; 63
    4900:	cd bf       	out	0x3d, r28	; 61
    4902:	df 91       	pop	r29
    4904:	cf 91       	pop	r28
    4906:	08 95       	ret

Disassembly of section .text.RTC_datetime_to_ts:

00002720 <RTC_datetime_to_ts>:
	CMD_SET_ALARM_TIME[2]=decToBCD(dt.hour);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    2720:	4f 92       	push	r4
    2722:	5f 92       	push	r5
    2724:	6f 92       	push	r6
    2726:	7f 92       	push	r7
    2728:	8f 92       	push	r8
    272a:	9f 92       	push	r9
    272c:	af 92       	push	r10
    272e:	bf 92       	push	r11
    2730:	cf 92       	push	r12
    2732:	df 92       	push	r13
    2734:	ef 92       	push	r14
    2736:	ff 92       	push	r15
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	00 d0       	rcall	.+0      	; 0x2742 <RTC_datetime_to_ts+0x22>
    2742:	00 d0       	rcall	.+0      	; 0x2744 <RTC_datetime_to_ts+0x24>
    2744:	00 d0       	rcall	.+0      	; 0x2746 <RTC_datetime_to_ts+0x26>
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	f9 01       	movw	r30, r18
    274c:	49 2e       	mov	r4, r25
    274e:	51 2c       	mov	r5, r1
    2750:	61 2c       	mov	r6, r1
    2752:	71 2c       	mov	r7, r1
    2754:	03 2e       	mov	r0, r19
    2756:	3a e1       	ldi	r19, 0x1A	; 26
    2758:	44 0c       	add	r4, r4
    275a:	55 1c       	adc	r5, r5
    275c:	66 1c       	adc	r6, r6
    275e:	77 1c       	adc	r7, r7
    2760:	3a 95       	dec	r19
    2762:	d1 f7       	brne	.-12     	; 0x2758 <RTC_datetime_to_ts+0x38>
    2764:	30 2d       	mov	r19, r0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a0 e0       	ldi	r26, 0x00	; 0
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	07 2e       	mov	r0, r23
    276e:	76 e1       	ldi	r23, 0x16	; 22
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	aa 1f       	adc	r26, r26
    2776:	bb 1f       	adc	r27, r27
    2778:	7a 95       	dec	r23
    277a:	d1 f7       	brne	.-12     	; 0x2770 <RTC_datetime_to_ts+0x50>
    277c:	70 2d       	mov	r23, r0
    277e:	84 29       	or	r24, r4
    2780:	95 29       	or	r25, r5
    2782:	a6 29       	or	r26, r6
    2784:	b7 29       	or	r27, r7
    2786:	87 2e       	mov	r8, r23
    2788:	91 2c       	mov	r9, r1
    278a:	a1 2c       	mov	r10, r1
    278c:	b1 2c       	mov	r11, r1
    278e:	07 2e       	mov	r0, r23
    2790:	71 e1       	ldi	r23, 0x11	; 17
    2792:	88 0c       	add	r8, r8
    2794:	99 1c       	adc	r9, r9
    2796:	aa 1c       	adc	r10, r10
    2798:	bb 1c       	adc	r11, r11
    279a:	7a 95       	dec	r23
    279c:	d1 f7       	brne	.-12     	; 0x2792 <RTC_datetime_to_ts+0x72>
    279e:	70 2d       	mov	r23, r0
    27a0:	88 29       	or	r24, r8
    27a2:	99 29       	or	r25, r9
    27a4:	aa 29       	or	r26, r10
    27a6:	bb 29       	or	r27, r11
    27a8:	c6 2e       	mov	r12, r22
    27aa:	d1 2c       	mov	r13, r1
    27ac:	e1 2c       	mov	r14, r1
    27ae:	f1 2c       	mov	r15, r1
    27b0:	0b 2e       	mov	r0, r27
    27b2:	bc e0       	ldi	r27, 0x0C	; 12
    27b4:	cc 0c       	add	r12, r12
    27b6:	dd 1c       	adc	r13, r13
    27b8:	ee 1c       	adc	r14, r14
    27ba:	ff 1c       	adc	r15, r15
    27bc:	ba 95       	dec	r27
    27be:	d1 f7       	brne	.-12     	; 0x27b4 <RTC_datetime_to_ts+0x94>
    27c0:	b0 2d       	mov	r27, r0
    27c2:	8c 29       	or	r24, r12
    27c4:	9d 29       	or	r25, r13
    27c6:	ae 29       	or	r26, r14
    27c8:	bf 29       	or	r27, r15
    27ca:	05 2f       	mov	r16, r21
    27cc:	10 e0       	ldi	r17, 0x00	; 0
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	00 0f       	add	r16, r16
    27d4:	11 1f       	adc	r17, r17
    27d6:	22 1f       	adc	r18, r18
    27d8:	33 1f       	adc	r19, r19
    27da:	00 0f       	add	r16, r16
    27dc:	11 1f       	adc	r17, r17
    27de:	22 1f       	adc	r18, r18
    27e0:	33 1f       	adc	r19, r19
    27e2:	00 0f       	add	r16, r16
    27e4:	11 1f       	adc	r17, r17
    27e6:	22 1f       	adc	r18, r18
    27e8:	33 1f       	adc	r19, r19
    27ea:	00 0f       	add	r16, r16
    27ec:	11 1f       	adc	r17, r17
    27ee:	22 1f       	adc	r18, r18
    27f0:	33 1f       	adc	r19, r19
    27f2:	00 0f       	add	r16, r16
    27f4:	11 1f       	adc	r17, r17
    27f6:	22 1f       	adc	r18, r18
    27f8:	33 1f       	adc	r19, r19
    27fa:	00 0f       	add	r16, r16
    27fc:	11 1f       	adc	r17, r17
    27fe:	22 1f       	adc	r18, r18
    2800:	33 1f       	adc	r19, r19
    2802:	80 2b       	or	r24, r16
    2804:	91 2b       	or	r25, r17
    2806:	a2 2b       	or	r26, r18
    2808:	b3 2b       	or	r27, r19
    280a:	84 2b       	or	r24, r20
    280c:	b0 83       	st	Z, r27
    280e:	a1 83       	std	Z+1, r26	; 0x01
    2810:	92 83       	std	Z+2, r25	; 0x02
    2812:	83 83       	std	Z+3, r24	; 0x03
    2814:	26 96       	adiw	r28, 0x06	; 6
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	ff 90       	pop	r15
    282a:	ef 90       	pop	r14
    282c:	df 90       	pop	r13
    282e:	cf 90       	pop	r12
    2830:	bf 90       	pop	r11
    2832:	af 90       	pop	r10
    2834:	9f 90       	pop	r9
    2836:	8f 90       	pop	r8
    2838:	7f 90       	pop	r7
    283a:	6f 90       	pop	r6
    283c:	5f 90       	pop	r5
    283e:	4f 90       	pop	r4
    2840:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

0000639c <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    639c:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    639e:	54 81       	ldd	r21, Z+4	; 0x04
    63a0:	43 81       	ldd	r20, Z+3	; 0x03
    63a2:	31 81       	ldd	r19, Z+1	; 0x01
    63a4:	20 81       	ld	r18, Z
    63a6:	65 2f       	mov	r22, r21
    63a8:	74 2f       	mov	r23, r20
    63aa:	83 2f       	mov	r24, r19
    63ac:	92 2f       	mov	r25, r18
    63ae:	0e 94 e6 24 	call	0x49cc	; 0x49cc <__fixunssfsi>
}
    63b2:	cb 01       	movw	r24, r22
    63b4:	08 95       	ret

Disassembly of section .text.init_measurement:

000059e8 <init_measurement>:

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
    59e8:	25 e0       	ldi	r18, 0x05	; 5
    59ea:	4f eb       	ldi	r20, 0xBF	; 191
    59ec:	58 e0       	ldi	r21, 0x08	; 8
    59ee:	60 e0       	ldi	r22, 0x00	; 0
    59f0:	81 e6       	ldi	r24, 0x61	; 97
    59f2:	0e 94 b4 31 	call	0x6368	; 0x6368 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    59f6:	81 11       	cpse	r24, r1
    59f8:	0f c0       	rjmp	.+30     	; 0x5a18 <init_measurement+0x30>
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
    59fa:	25 e0       	ldi	r18, 0x05	; 5
    59fc:	44 ec       	ldi	r20, 0xC4	; 196
    59fe:	58 e0       	ldi	r21, 0x08	; 8
    5a00:	60 e0       	ldi	r22, 0x00	; 0
    5a02:	81 e6       	ldi	r24, 0x61	; 97
    5a04:	0e 94 b4 31 	call	0x6368	; 0x6368 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a08:	81 11       	cpse	r24, r1
    5a0a:	08 c0       	rjmp	.+16     	; 0x5a1c <init_measurement+0x34>
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
    5a0c:	0e 94 12 34 	call	0x6824	; 0x6824 <SCD30_HAL_data_ready>
    5a10:	88 23       	and	r24, r24
    5a12:	e1 f3       	breq	.-8      	; 0x5a0c <init_measurement+0x24>
	
	return SCD30_STATUS_SUCCESS;
    5a14:	80 e0       	ldi	r24, 0x00	; 0
    5a16:	08 95       	ret
}

static SCD30_STATUS init_measurement(){
	uint8_t status;
	status=TWI_API_write_data_stop(SCD30_ADDR,  SET_MEASUREMENT_INTERVAL, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a18:	82 e0       	ldi	r24, 0x02	; 2
    5a1a:	08 95       	ret
	
	status=TWI_API_write_data_stop(SCD30_ADDR,  TRIGGER_CONT_MEASUREMENT, 5);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_FATAL_ERROR;
    5a1c:	82 e0       	ldi	r24, 0x02	; 2
	
	//Wait for data_ready pin to go high
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}
    5a1e:	08 95       	ret

Disassembly of section .text.validate_data:

00005c32 <validate_data>:

/************************************************************************/
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
    5c32:	cf 93       	push	r28
    5c34:	df 93       	push	r29
    5c36:	ec 01       	movw	r28, r24
	uint8_t crc=calc_crc8(data, 2);
    5c38:	62 e0       	ldi	r22, 0x02	; 2
    5c3a:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <calc_crc8>
	if(data[2]!=crc) return false;
    5c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c40:	89 13       	cpse	r24, r25
    5c42:	0a c0       	rjmp	.+20     	; 0x5c58 <validate_data+0x26>
	
	crc=calc_crc8(&data[3], 2);
    5c44:	62 e0       	ldi	r22, 0x02	; 2
    5c46:	ce 01       	movw	r24, r28
    5c48:	03 96       	adiw	r24, 0x03	; 3
    5c4a:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <calc_crc8>
	if(data[5]!=crc) return false;
    5c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    5c50:	89 17       	cp	r24, r25
    5c52:	21 f0       	breq	.+8      	; 0x5c5c <validate_data+0x2a>
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	03 c0       	rjmp	.+6      	; 0x5c5e <validate_data+0x2c>
/* Local functions                                                      */
/************************************************************************/

static bool validate_data(uint8_t data[]){
	uint8_t crc=calc_crc8(data, 2);
	if(data[2]!=crc) return false;
    5c58:	80 e0       	ldi	r24, 0x00	; 0
    5c5a:	01 c0       	rjmp	.+2      	; 0x5c5e <validate_data+0x2c>
	
	crc=calc_crc8(&data[3], 2);
	if(data[5]!=crc) return false;
	
	return true;
    5c5c:	81 e0       	ldi	r24, 0x01	; 1
}
    5c5e:	df 91       	pop	r29
    5c60:	cf 91       	pop	r28
    5c62:	08 95       	ret

Disassembly of section .text.read_value:

00003c54 <read_value>:
	while(!SCD30_HAL_data_ready()){};
	
	return SCD30_STATUS_SUCCESS;
}

static SCD30_STATUS read_value(uint16_t *value){
    3c54:	0f 93       	push	r16
    3c56:	1f 93       	push	r17
    3c58:	cf 93       	push	r28
    3c5a:	df 93       	push	r29
    3c5c:	00 d0       	rcall	.+0      	; 0x3c5e <read_value+0xa>
    3c5e:	00 d0       	rcall	.+0      	; 0x3c60 <read_value+0xc>
    3c60:	00 d0       	rcall	.+0      	; 0x3c62 <read_value+0xe>
    3c62:	cd b7       	in	r28, 0x3d	; 61
    3c64:	de b7       	in	r29, 0x3e	; 62
    3c66:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[6];
	*value=0xffff;
    3c68:	8f ef       	ldi	r24, 0xFF	; 255
    3c6a:	9f ef       	ldi	r25, 0xFF	; 255
    3c6c:	f8 01       	movw	r30, r16
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	80 83       	st	Z, r24

	if(!SCD30_HAL_data_ready()){
    3c72:	0e 94 12 34 	call	0x6824	; 0x6824 <SCD30_HAL_data_ready>
    3c76:	81 11       	cpse	r24, r1
    3c78:	07 c0       	rjmp	.+14     	; 0x3c88 <read_value+0x34>
		*value=0xfffe;
    3c7a:	8e ef       	ldi	r24, 0xFE	; 254
    3c7c:	9f ef       	ldi	r25, 0xFF	; 255
    3c7e:	f8 01       	movw	r30, r16
    3c80:	91 83       	std	Z+1, r25	; 0x01
    3c82:	80 83       	st	Z, r24
		return SCD30_STATUS_TRY_AGAIN;
    3c84:	83 e0       	ldi	r24, 0x03	; 3
    3c86:	2c c0       	rjmp	.+88     	; 0x3ce0 <read_value+0x8c>
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
    3c88:	22 e0       	ldi	r18, 0x02	; 2
    3c8a:	4c ec       	ldi	r20, 0xCC	; 204
    3c8c:	58 e0       	ldi	r21, 0x08	; 8
    3c8e:	60 e0       	ldi	r22, 0x00	; 0
    3c90:	81 e6       	ldi	r24, 0x61	; 97
    3c92:	0e 94 b4 31 	call	0x6368	; 0x6368 <TWI_API_write_data_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3c96:	81 11       	cpse	r24, r1
    3c98:	1e c0       	rjmp	.+60     	; 0x3cd6 <read_value+0x82>
    3c9a:	8f e3       	ldi	r24, 0x3F	; 63
    3c9c:	9f e1       	ldi	r25, 0x1F	; 31
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	f1 f7       	brne	.-4      	; 0x3c9e <read_value+0x4a>
    3ca2:	00 c0       	rjmp	.+0      	; 0x3ca4 <read_value+0x50>
    3ca4:	00 00       	nop
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
    3ca6:	46 e0       	ldi	r20, 0x06	; 6
    3ca8:	be 01       	movw	r22, r28
    3caa:	6f 5f       	subi	r22, 0xFF	; 255
    3cac:	7f 4f       	sbci	r23, 0xFF	; 255
    3cae:	81 e6       	ldi	r24, 0x61	; 97
    3cb0:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3cb4:	81 11       	cpse	r24, r1
    3cb6:	11 c0       	rjmp	.+34     	; 0x3cda <read_value+0x86>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3cb8:	ce 01       	movw	r24, r28
    3cba:	01 96       	adiw	r24, 0x01	; 1
    3cbc:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <validate_data>
    3cc0:	88 23       	and	r24, r24
    3cc2:	69 f0       	breq	.+26     	; 0x3cde <read_value+0x8a>
	
	*value=bytes_2_uint(data);
    3cc4:	ce 01       	movw	r24, r28
    3cc6:	01 96       	adiw	r24, 0x01	; 1
    3cc8:	0e 94 ce 31 	call	0x639c	; 0x639c <bytes_2_uint>
    3ccc:	f8 01       	movw	r30, r16
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	80 83       	st	Z, r24
	
	return SCD30_STATUS_SUCCESS;
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	05 c0       	rjmp	.+10     	; 0x3ce0 <read_value+0x8c>
		return SCD30_STATUS_TRY_AGAIN;
	}
	
	
	status=TWI_API_write_data_stop(SCD30_ADDR,   READ_DATA_CMD, 2);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	03 c0       	rjmp	.+6      	; 0x3ce0 <read_value+0x8c>
	
	_delay_ms(4);
	
	status=TWI_API_read_data_ack_end_nack_stop(SCD30_ADDR, data, 6);
	if(status != TWI_CODE_SUCCESS) return SCD30_STATUS_ERROR;
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	01 c0       	rjmp	.+2      	; 0x3ce0 <read_value+0x8c>
	
	if(!validate_data(data)) return SCD30_STATUS_ERROR;
    3cde:	81 e0       	ldi	r24, 0x01	; 1
	
	*value=bytes_2_uint(data);
	
	return SCD30_STATUS_SUCCESS;
}
    3ce0:	26 96       	adiw	r28, 0x06	; 6
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	f8 94       	cli
    3ce6:	de bf       	out	0x3e, r29	; 62
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	cd bf       	out	0x3d, r28	; 61
    3cec:	df 91       	pop	r29
    3cee:	cf 91       	pop	r28
    3cf0:	1f 91       	pop	r17
    3cf2:	0f 91       	pop	r16
    3cf4:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

0000544c <vect_SCD_do_sample>:

/************************************************************************/
/* Interrupts                                                           */
/************************************************************************/
static void vect_SCD_do_sample(){
	read_value(&(_data[cntSamples++]));
    544c:	80 91 8d 0f 	lds	r24, 0x0F8D	; 0x800f8d <_data>
    5450:	90 91 8e 0f 	lds	r25, 0x0F8E	; 0x800f8e <_data+0x1>
    5454:	20 91 8b 0f 	lds	r18, 0x0F8B	; 0x800f8b <cntSamples>
    5458:	30 91 8c 0f 	lds	r19, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    545c:	a9 01       	movw	r20, r18
    545e:	4f 5f       	subi	r20, 0xFF	; 255
    5460:	5f 4f       	sbci	r21, 0xFF	; 255
    5462:	50 93 8c 0f 	sts	0x0F8C, r21	; 0x800f8c <cntSamples+0x1>
    5466:	40 93 8b 0f 	sts	0x0F8B, r20	; 0x800f8b <cntSamples>
    546a:	22 0f       	add	r18, r18
    546c:	33 1f       	adc	r19, r19
    546e:	82 0f       	add	r24, r18
    5470:	93 1f       	adc	r25, r19
    5472:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <read_value>
	if(cntSamples>=_nSamples){
    5476:	20 91 8b 0f 	lds	r18, 0x0F8B	; 0x800f8b <cntSamples>
    547a:	30 91 8c 0f 	lds	r19, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    547e:	80 91 8f 0f 	lds	r24, 0x0F8F	; 0x800f8f <_nSamples>
    5482:	90 91 90 0f 	lds	r25, 0x0F90	; 0x800f90 <_nSamples+0x1>
    5486:	28 17       	cp	r18, r24
    5488:	39 07       	cpc	r19, r25
    548a:	10 f0       	brcs	.+4      	; 0x5490 <vect_SCD_do_sample+0x44>
		TC1_HAL_stop();
    548c:	0e 94 b2 33 	call	0x6764	; 0x6764 <TC1_HAL_stop>
    5490:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

000060e8 <SCD30_sensor_on>:
static void vect_SCD_do_sample();
static SCD30_STATUS read_value(uint16_t *value);
static SCD30_STATUS init_measurement();

SCD30_STATUS SCD30_sensor_on(){
	SCD30_HAL_init();
    60e8:	0e 94 2e 33 	call	0x665c	; 0x665c <SCD30_HAL_init>
	PM_HAL_SCD30_power(true);
    60ec:	81 e0       	ldi	r24, 0x01	; 1
    60ee:	0e 94 63 32 	call	0x64c6	; 0x64c6 <PM_HAL_SCD30_power>
    60f2:	2f ef       	ldi	r18, 0xFF	; 255
    60f4:	83 ed       	ldi	r24, 0xD3	; 211
    60f6:	90 e3       	ldi	r25, 0x30	; 48
    60f8:	21 50       	subi	r18, 0x01	; 1
    60fa:	80 40       	sbci	r24, 0x00	; 0
    60fc:	90 40       	sbci	r25, 0x00	; 0
    60fe:	e1 f7       	brne	.-8      	; 0x60f8 <SCD30_sensor_on+0x10>
    6100:	00 c0       	rjmp	.+0      	; 0x6102 <SCD30_sensor_on+0x1a>
    6102:	00 00       	nop
	_delay_ms(2000);
	return init_measurement();
    6104:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <init_measurement>
}
    6108:	08 95       	ret

Disassembly of section .text.SCD30_sensor_off:

000068e2 <SCD30_sensor_off>:

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    68e2:	80 e0       	ldi	r24, 0x00	; 0
    68e4:	0e 94 63 32 	call	0x64c6	; 0x64c6 <PM_HAL_SCD30_power>
    68e8:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

0000610a <SCD30_init_sampling>:
}

void SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
	_nSamples=nSamples;
    610a:	70 93 90 0f 	sts	0x0F90, r23	; 0x800f90 <_nSamples+0x1>
    610e:	60 93 8f 0f 	sts	0x0F8F, r22	; 0x800f8f <_nSamples>
	cntSamples=0;
    6112:	10 92 8c 0f 	sts	0x0F8C, r1	; 0x800f8c <cntSamples+0x1>
    6116:	10 92 8b 0f 	sts	0x0F8B, r1	; 0x800f8b <cntSamples>
	_data=data;
    611a:	50 93 8e 0f 	sts	0x0F8E, r21	; 0x800f8e <_data+0x1>
    611e:	40 93 8d 0f 	sts	0x0F8D, r20	; 0x800f8d <_data>

	//Init
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    6122:	66 e2       	ldi	r22, 0x26	; 38
    6124:	7a e2       	ldi	r23, 0x2A	; 42
    6126:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <TC1_HAL_init>
    612a:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

000066e8 <SCD30_deinit_sampling>:
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    66e8:	0e 94 b2 33 	call	0x6764	; 0x6764 <TC1_HAL_stop>
	_data=NULL;
    66ec:	10 92 8e 0f 	sts	0x0F8E, r1	; 0x800f8e <_data+0x1>
    66f0:	10 92 8d 0f 	sts	0x0F8D, r1	; 0x800f8d <_data>
    66f4:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

00006874 <SCD30_start_sampling>:
}

void SCD30_start_sampling(){
	vect_SCD_do_sample();
    6874:	0e 94 26 2a 	call	0x544c	; 0x544c <vect_SCD_do_sample>
	TC1_HAL_start();
    6878:	0e 94 ac 33 	call	0x6758	; 0x6758 <TC1_HAL_start>
    687c:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00006330 <SCD30_is_sampling_done>:
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    6330:	40 91 8b 0f 	lds	r20, 0x0F8B	; 0x800f8b <cntSamples>
    6334:	50 91 8c 0f 	lds	r21, 0x0F8C	; 0x800f8c <cntSamples+0x1>
    6338:	20 91 8f 0f 	lds	r18, 0x0F8F	; 0x800f8f <_nSamples>
    633c:	30 91 90 0f 	lds	r19, 0x0F90	; 0x800f90 <_nSamples+0x1>
    6340:	81 e0       	ldi	r24, 0x01	; 1
    6342:	42 17       	cp	r20, r18
    6344:	53 07       	cpc	r21, r19
    6346:	08 f4       	brcc	.+2      	; 0x634a <SCD30_is_sampling_done+0x1a>
    6348:	80 e0       	ldi	r24, 0x00	; 0
}
    634a:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

000063b6 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    63b6:	cf 93       	push	r28
    63b8:	df 93       	push	r29
    63ba:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    63bc:	0e 94 12 34 	call	0x6824	; 0x6824 <SCD30_HAL_data_ready>
    63c0:	88 23       	and	r24, r24
    63c2:	e1 f3       	breq	.-8      	; 0x63bc <SCD30_get_reading+0x6>
	
	return read_value(value);
    63c4:	ce 01       	movw	r24, r28
    63c6:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <read_value>
}
    63ca:	df 91       	pop	r29
    63cc:	cf 91       	pop	r28
    63ce:	08 95       	ret

Disassembly of section .text.parse_cmd:

00005e16 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5e16:	fc 01       	movw	r30, r24
    5e18:	80 81       	ld	r24, Z
    5e1a:	82 37       	cpi	r24, 0x72	; 114
    5e1c:	51 f0       	breq	.+20     	; 0x5e32 <parse_cmd+0x1c>
	if(msg[0]=='w') return CONF_WRTIE;
    5e1e:	87 37       	cpi	r24, 0x77	; 119
    5e20:	51 f0       	breq	.+20     	; 0x5e36 <parse_cmd+0x20>
	if(msg[0]=='c') return CONF_CONNECT;
    5e22:	83 36       	cpi	r24, 0x63	; 99
    5e24:	51 f0       	breq	.+20     	; 0x5e3a <parse_cmd+0x24>
	if(msg[0]=='s') return CONF_SAMPLE;
    5e26:	83 37       	cpi	r24, 0x73	; 115
    5e28:	51 f0       	breq	.+20     	; 0x5e3e <parse_cmd+0x28>
	if(msg[0]=='q') return CONF_EXIT;
    5e2a:	81 37       	cpi	r24, 0x71	; 113
    5e2c:	51 f4       	brne	.+20     	; 0x5e42 <parse_cmd+0x2c>
    5e2e:	84 e0       	ldi	r24, 0x04	; 4
    5e30:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    5e32:	87 e0       	ldi	r24, 0x07	; 7
    5e34:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    5e36:	88 e0       	ldi	r24, 0x08	; 8
    5e38:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    5e3a:	89 e0       	ldi	r24, 0x09	; 9
    5e3c:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
    5e3e:	8a e0       	ldi	r24, 0x0A	; 10
    5e40:	08 95       	ret
	if(msg[0]=='q') return CONF_EXIT;
	
	return CONF_NOT_VALID;
    5e42:	85 e0       	ldi	r24, 0x05	; 5
}
    5e44:	08 95       	ret

Disassembly of section .text.validate_cmd:

00004c40 <validate_cmd>:

static bool validate_cmd(char msg[]){
    4c40:	cf 93       	push	r28
    4c42:	df 93       	push	r29
    4c44:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    4c46:	bc 01       	movw	r22, r24
    4c48:	80 e8       	ldi	r24, 0x80	; 128
    4c4a:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    4c4e:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4c50:	fc 01       	movw	r30, r24
    4c52:	31 97       	sbiw	r30, 0x01	; 1
    4c54:	ec 0f       	add	r30, r28
    4c56:	fd 1f       	adc	r31, r29
    4c58:	80 81       	ld	r24, Z
    4c5a:	80 32       	cpi	r24, 0x20	; 32
    4c5c:	b1 f0       	breq	.+44     	; 0x4c8a <validate_cmd+0x4a>
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	40 e0       	ldi	r20, 0x00	; 0
    4c64:	0d c0       	rjmp	.+26     	; 0x4c80 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    4c66:	fe 01       	movw	r30, r28
    4c68:	e2 0f       	add	r30, r18
    4c6a:	f3 1f       	adc	r31, r19
    4c6c:	90 81       	ld	r25, Z
    4c6e:	90 32       	cpi	r25, 0x20	; 32
    4c70:	21 f4       	brne	.+8      	; 0x4c7a <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    4c72:	41 11       	cpse	r20, r1
    4c74:	0c c0       	rjmp	.+24     	; 0x4c8e <validate_cmd+0x4e>
			lastCharWasSpace=true;
    4c76:	41 e0       	ldi	r20, 0x01	; 1
    4c78:	01 c0       	rjmp	.+2      	; 0x4c7c <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    4c7a:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    4c7c:	2f 5f       	subi	r18, 0xFF	; 255
    4c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c80:	26 17       	cp	r18, r22
    4c82:	37 07       	cpc	r19, r23
    4c84:	80 f3       	brcs	.-32     	; 0x4c66 <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    4c86:	81 e0       	ldi	r24, 0x01	; 1
    4c88:	03 c0       	rjmp	.+6      	; 0x4c90 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	01 c0       	rjmp	.+2      	; 0x4c90 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    4c8e:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    4c90:	df 91       	pop	r29
    4c92:	cf 91       	pop	r28
    4c94:	08 95       	ret

Disassembly of section .text.CONF_enter:

000024b6 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    24b6:	cf 93       	push	r28
	uart1_hal_init();
    24b8:	0e 94 0d 2c 	call	0x581a	; 0x581a <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    24bc:	c0 e0       	ldi	r28, 0x00	; 0
    24be:	0d c0       	rjmp	.+26     	; 0x24da <CONF_enter+0x24>
				TC2_HAL_init();
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    24c0:	c2 e0       	ldi	r28, 0x02	; 2
    24c2:	0b c0       	rjmp	.+22     	; 0x24da <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    24c4:	c5 e0       	ldi	r28, 0x05	; 5
    24c6:	09 c0       	rjmp	.+18     	; 0x24da <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    24c8:	c6 e0       	ldi	r28, 0x06	; 6
    24ca:	07 c0       	rjmp	.+14     	; 0x24da <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    24cc:	c5 e0       	ldi	r28, 0x05	; 5
    24ce:	05 c0       	rjmp	.+10     	; 0x24da <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    24d0:	c5 e0       	ldi	r28, 0x05	; 5
    24d2:	03 c0       	rjmp	.+6      	; 0x24da <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    24d4:	c5 e0       	ldi	r28, 0x05	; 5
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    24d8:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    24da:	ec 2f       	mov	r30, r28
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	ec 30       	cpi	r30, 0x0C	; 12
    24e0:	f1 05       	cpc	r31, r1
    24e2:	d8 f7       	brcc	.-10     	; 0x24da <CONF_enter+0x24>
    24e4:	e5 5b       	subi	r30, 0xB5	; 181
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	0c 94 06 34 	jmp	0x680c	; 0x680c <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    24ec:	69 ec       	ldi	r22, 0xC9	; 201
    24ee:	75 e0       	ldi	r23, 0x05	; 5
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    24f6:	6f ee       	ldi	r22, 0xEF	; 239
    24f8:	75 e0       	ldi	r23, 0x05	; 5
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				TC2_HAL_init();
    2500:	0e 94 b7 30 	call	0x616e	; 0x616e <TC2_HAL_init>
				if(!init_methane_SCD30()){
    2504:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <init_methane_SCD30>
    2508:	81 11       	cpse	r24, r1
    250a:	da cf       	rjmp	.-76     	; 0x24c0 <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    250c:	61 e1       	ldi	r22, 0x11	; 17
    250e:	76 e0       	ldi	r23, 0x06	; 6
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
					state=CONF_EXIT;
    2516:	c4 e0       	ldi	r28, 0x04	; 4
    2518:	e0 cf       	rjmp	.-64     	; 0x24da <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    251a:	0e 94 3c 33 	call	0x6678	; 0x6678 <uart1_hal_message_ready>
    251e:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    2520:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    2522:	0e 94 43 33 	call	0x6686	; 0x6686 <uart1_hal_rx_full>
    2526:	81 11       	cpse	r24, r1
    2528:	cd cf       	rjmp	.-102    	; 0x24c4 <CONF_enter+0xe>
    252a:	d7 cf       	rjmp	.-82     	; 0x24da <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    252c:	88 ea       	ldi	r24, 0xA8	; 168
    252e:	97 e0       	ldi	r25, 0x07	; 7
    2530:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    2534:	88 ea       	ldi	r24, 0xA8	; 168
    2536:	97 e0       	ldi	r25, 0x07	; 7
    2538:	0e 94 20 26 	call	0x4c40	; 0x4c40 <validate_cmd>
    253c:	88 23       	and	r24, r24
    253e:	21 f2       	breq	.-120    	; 0x24c8 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    2540:	88 ea       	ldi	r24, 0xA8	; 168
    2542:	97 e0       	ldi	r25, 0x07	; 7
    2544:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <parse_cmd>
    2548:	c8 2f       	mov	r28, r24
    254a:	c7 cf       	rjmp	.-114    	; 0x24da <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    254c:	68 ea       	ldi	r22, 0xA8	; 168
    254e:	77 e0       	ldi	r23, 0x07	; 7
    2550:	80 e8       	ldi	r24, 0x80	; 128
    2552:	40 ee       	ldi	r20, 0xE0	; 224
    2554:	56 e0       	ldi	r21, 0x06	; 6
    2556:	0e 94 89 0c 	call	0x1912	; 0x1912 <handle_read>
    255a:	88 23       	and	r24, r24
    255c:	09 f4       	brne	.+2      	; 0x2560 <CONF_enter+0xaa>
    255e:	b6 cf       	rjmp	.-148    	; 0x24cc <CONF_enter+0x16>
					state=CONF_REPLY;
    2560:	cb e0       	ldi	r28, 0x0B	; 11
    2562:	bb cf       	rjmp	.-138    	; 0x24da <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    2564:	68 ea       	ldi	r22, 0xA8	; 168
    2566:	77 e0       	ldi	r23, 0x07	; 7
    2568:	80 e8       	ldi	r24, 0x80	; 128
    256a:	40 ee       	ldi	r20, 0xE0	; 224
    256c:	56 e0       	ldi	r21, 0x06	; 6
    256e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <handle_write>
    2572:	88 23       	and	r24, r24
    2574:	09 f4       	brne	.+2      	; 0x2578 <CONF_enter+0xc2>
    2576:	ac cf       	rjmp	.-168    	; 0x24d0 <CONF_enter+0x1a>
					state=CONF_REPLY;
    2578:	cb e0       	ldi	r28, 0x0B	; 11
    257a:	af cf       	rjmp	.-162    	; 0x24da <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    257c:	68 ea       	ldi	r22, 0xA8	; 168
    257e:	77 e0       	ldi	r23, 0x07	; 7
    2580:	80 e8       	ldi	r24, 0x80	; 128
    2582:	0e 94 75 26 	call	0x4cea	; 0x4cea <CONNECT>
    2586:	88 23       	and	r24, r24
    2588:	09 f4       	brne	.+2      	; 0x258c <CONF_enter+0xd6>
    258a:	a4 cf       	rjmp	.-184    	; 0x24d4 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    258c:	c2 e0       	ldi	r28, 0x02	; 2
    258e:	a5 cf       	rjmp	.-182    	; 0x24da <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    2590:	68 ea       	ldi	r22, 0xA8	; 168
    2592:	77 e0       	ldi	r23, 0x07	; 7
    2594:	80 e8       	ldi	r24, 0x80	; 128
    2596:	40 ee       	ldi	r20, 0xE0	; 224
    2598:	56 e0       	ldi	r21, 0x06	; 6
    259a:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <handle_sample>
    259e:	88 23       	and	r24, r24
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <CONF_enter+0xee>
    25a2:	9a cf       	rjmp	.-204    	; 0x24d8 <CONF_enter+0x22>
					state=CONF_REPLY;
    25a4:	cb e0       	ldi	r28, 0x0B	; 11
    25a6:	99 cf       	rjmp	.-206    	; 0x24da <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    25a8:	60 ee       	ldi	r22, 0xE0	; 224
    25aa:	76 e0       	ldi	r23, 0x06	; 6
    25ac:	80 e8       	ldi	r24, 0x80	; 128
    25ae:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    25b2:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    25b4:	92 cf       	rjmp	.-220    	; 0x24da <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    25b6:	60 e3       	ldi	r22, 0x30	; 48
    25b8:	76 e0       	ldi	r23, 0x06	; 6
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    25c0:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    25c2:	8b cf       	rjmp	.-234    	; 0x24da <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    25c4:	6a e3       	ldi	r22, 0x3A	; 58
    25c6:	76 e0       	ldi	r23, 0x06	; 6
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    25ce:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    25d0:	84 cf       	rjmp	.-248    	; 0x24da <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    25d2:	0e 94 21 34 	call	0x6842	; 0x6842 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    25d6:	67 e4       	ldi	r22, 0x47	; 71
    25d8:	76 e0       	ldi	r23, 0x06	; 6
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    25e0:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    25e2:	7b cf       	rjmp	.-266    	; 0x24da <CONF_enter+0x24>
			
			case CONF_EXIT:
				uart1_hal_send_string("Exit...");
    25e4:	6d e6       	ldi	r22, 0x6D	; 109
    25e6:	76 e0       	ldi	r23, 0x06	; 6
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				return;
		}
	}
}
    25ee:	cf 91       	pop	r28
    25f0:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00004762 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    4762:	cf 92       	push	r12
    4764:	df 92       	push	r13
    4766:	ef 92       	push	r14
    4768:	0f 93       	push	r16
    476a:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0)
    476c:	6c 01       	movw	r12, r24
    476e:	20 e8       	ldi	r18, 0x80	; 128
    4770:	e2 2e       	mov	r14, r18
    4772:	04 e0       	ldi	r16, 0x04	; 4
    4774:	10 e0       	ldi	r17, 0x00	; 0
    4776:	20 e2       	ldi	r18, 0x20	; 32
    4778:	37 e0       	ldi	r19, 0x07	; 7
    477a:	40 e0       	ldi	r20, 0x00	; 0
    477c:	8e 2d       	mov	r24, r14
    477e:	b6 01       	movw	r22, r12
    4780:	0e 94 e7 23 	call	0x47ce	; 0x47ce <strncmp>
    4784:	89 2b       	or	r24, r25
    4786:	c1 f0       	breq	.+48     	; 0x47b8 <CON_RN2483_parse+0x56>
	{
		return CL_EXIT;
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
    4788:	05 e0       	ldi	r16, 0x05	; 5
    478a:	10 e0       	ldi	r17, 0x00	; 0
    478c:	25 e2       	ldi	r18, 0x25	; 37
    478e:	37 e0       	ldi	r19, 0x07	; 7
    4790:	40 e0       	ldi	r20, 0x00	; 0
    4792:	8e 2d       	mov	r24, r14
    4794:	b6 01       	movw	r22, r12
    4796:	0e 94 e7 23 	call	0x47ce	; 0x47ce <strncmp>
    479a:	89 2b       	or	r24, r25
    479c:	79 f0       	breq	.+30     	; 0x47bc <CON_RN2483_parse+0x5a>
	{
		return CL_SEND_BREAK;
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
    479e:	04 e0       	ldi	r16, 0x04	; 4
    47a0:	10 e0       	ldi	r17, 0x00	; 0
    47a2:	2b e2       	ldi	r18, 0x2B	; 43
    47a4:	37 e0       	ldi	r19, 0x07	; 7
    47a6:	40 e0       	ldi	r20, 0x00	; 0
    47a8:	8e 2d       	mov	r24, r14
    47aa:	b6 01       	movw	r22, r12
    47ac:	0e 94 e7 23 	call	0x47ce	; 0x47ce <strncmp>
    47b0:	89 2b       	or	r24, r25
    47b2:	31 f4       	brne	.+12     	; 0x47c0 <CON_RN2483_parse+0x5e>
	{
		return CL_READ;
    47b4:	85 e0       	ldi	r24, 0x05	; 5
    47b6:	05 c0       	rjmp	.+10     	; 0x47c2 <CON_RN2483_parse+0x60>
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
	if(strncmp(msg, "exit", strlen("exit"))==0)
	{
		return CL_EXIT;
    47b8:	86 e0       	ldi	r24, 0x06	; 6
    47ba:	03 c0       	rjmp	.+6      	; 0x47c2 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "break", strlen("break"))==0)
	{
		return CL_SEND_BREAK;
    47bc:	84 e0       	ldi	r24, 0x04	; 4
    47be:	01 c0       	rjmp	.+2      	; 0x47c2 <CON_RN2483_parse+0x60>
	}
	else if (strncmp(msg, "read", strlen("read"))==0)
	{
		return CL_READ;
	}
	return CL_FORWARD;
    47c0:	83 e0       	ldi	r24, 0x03	; 3
    47c2:	1f 91       	pop	r17
    47c4:	0f 91       	pop	r16
    47c6:	ef 90       	pop	r14
    47c8:	df 90       	pop	r13
    47ca:	cf 90       	pop	r12
    47cc:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001f64 <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    1f64:	6f 92       	push	r6
    1f66:	7f 92       	push	r7
    1f68:	8f 92       	push	r8
    1f6a:	cf 92       	push	r12
    1f6c:	df 92       	push	r13
    1f6e:	ef 92       	push	r14
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1f74:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1f76:	ec 2f       	mov	r30, r28
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	e7 30       	cpi	r30, 0x07	; 7
    1f7c:	f1 05       	cpc	r31, r1
    1f7e:	d8 f7       	brcc	.-10     	; 0x1f76 <CON_RN2483+0x12>
    1f80:	e9 5a       	subi	r30, 0xA9	; 169
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	0c 94 06 34 	jmp	0x680c	; 0x680c <__tablejump2__>
			case CL_INIT:
				uart0_hal_init();
    1f88:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <uart0_hal_init>
				rn2483_init();
    1f8c:	0e 94 4d 34 	call	0x689a	; 0x689a <rn2483_init>
				LM_reset_module();
    1f90:	0e 94 90 34 	call	0x6920	; 0x6920 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1f94:	60 e3       	ldi	r22, 0x30	; 48
    1f96:	77 e0       	ldi	r23, 0x07	; 7
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				state=CL_READ_MSG;
    1f9e:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1fa0:	ea cf       	rjmp	.-44     	; 0x1f76 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1fa2:	0e 94 3c 33 	call	0x6678	; 0x6678 <uart1_hal_message_ready>
    1fa6:	88 23       	and	r24, r24
    1fa8:	31 f3       	breq	.-52     	; 0x1f76 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    1faa:	88 ea       	ldi	r24, 0xA8	; 168
    1fac:	97 e0       	ldi	r25, 0x07	; 7
    1fae:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1fb2:	c2 e0       	ldi	r28, 0x02	; 2
    1fb4:	e0 cf       	rjmp	.-64     	; 0x1f76 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    1fb6:	88 ea       	ldi	r24, 0xA8	; 168
    1fb8:	97 e0       	ldi	r25, 0x07	; 7
    1fba:	0e 94 b1 23 	call	0x4762	; 0x4762 <CON_RN2483_parse>
    1fbe:	c8 2f       	mov	r28, r24
			break;
    1fc0:	da cf       	rjmp	.-76     	; 0x1f76 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1fc2:	88 ea       	ldi	r24, 0xA8	; 168
    1fc4:	97 e0       	ldi	r25, 0x07	; 7
    1fc6:	6c 01       	movw	r12, r24
    1fc8:	20 e8       	ldi	r18, 0x80	; 128
    1fca:	e2 2e       	mov	r14, r18
    1fcc:	2f 93       	push	r18
    1fce:	df 92       	push	r13
    1fd0:	8f 93       	push	r24
    1fd2:	86 e6       	ldi	r24, 0x66	; 102
    1fd4:	97 e0       	ldi	r25, 0x07	; 7
    1fd6:	a0 e0       	ldi	r26, 0x00	; 0
    1fd8:	af 93       	push	r26
    1fda:	9f 93       	push	r25
    1fdc:	8f 93       	push	r24
    1fde:	c0 ee       	ldi	r28, 0xE0	; 224
    1fe0:	d6 e0       	ldi	r29, 0x06	; 6
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
				uart1_hal_send_string(cnf_reply);
    1fea:	3e 01       	movw	r6, r28
    1fec:	20 e8       	ldi	r18, 0x80	; 128
    1fee:	82 2e       	mov	r8, r18
    1ff0:	88 2d       	mov	r24, r8
    1ff2:	b3 01       	movw	r22, r6
    1ff4:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    1ff8:	ae 01       	movw	r20, r28
    1ffa:	6c 2d       	mov	r22, r12
    1ffc:	7d 2d       	mov	r23, r13
    1ffe:	8e 2d       	mov	r24, r14
    2000:	0e 94 93 34 	call	0x6926	; 0x6926 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    2004:	88 2d       	mov	r24, r8
    2006:	b3 01       	movw	r22, r6
    2008:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    200c:	8d b7       	in	r24, 0x3d	; 61
    200e:	9e b7       	in	r25, 0x3e	; 62
    2010:	08 96       	adiw	r24, 0x08	; 8
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	9e bf       	out	0x3e, r25	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    201c:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    201e:	ab cf       	rjmp	.-170    	; 0x1f76 <CON_RN2483+0x12>
			
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
    2020:	8c e6       	ldi	r24, 0x6C	; 108
    2022:	97 e0       	ldi	r25, 0x07	; 7
    2024:	a0 e0       	ldi	r26, 0x00	; 0
    2026:	af 93       	push	r26
    2028:	9f 93       	push	r25
    202a:	8f 93       	push	r24
    202c:	86 e6       	ldi	r24, 0x66	; 102
    202e:	97 e0       	ldi	r25, 0x07	; 7
    2030:	a0 e0       	ldi	r26, 0x00	; 0
    2032:	af 93       	push	r26
    2034:	9f 93       	push	r25
    2036:	8f 93       	push	r24
    2038:	c0 ee       	ldi	r28, 0xE0	; 224
    203a:	d6 e0       	ldi	r29, 0x06	; 6
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
				uart1_hal_send_string(cnf_reply);
    2044:	be 01       	movw	r22, r28
    2046:	80 e8       	ldi	r24, 0x80	; 128
    2048:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
    204c:	8f e7       	ldi	r24, 0x7F	; 127
    204e:	98 e3       	ldi	r25, 0x38	; 56
    2050:	21 e0       	ldi	r18, 0x01	; 1
    2052:	81 50       	subi	r24, 0x01	; 1
    2054:	90 40       	sbci	r25, 0x00	; 0
    2056:	20 40       	sbci	r18, 0x00	; 0
    2058:	e1 f7       	brne	.-8      	; 0x2052 <CON_RN2483+0xee>
    205a:	00 c0       	rjmp	.+0      	; 0x205c <CON_RN2483+0xf8>
    205c:	00 00       	nop
				_delay_ms(50);
				LM_send_break();
    205e:	0e 94 96 34 	call	0x692c	; 0x692c <LM_send_break>
				state=CL_READ_MSG;
			break;
    2062:	8d b7       	in	r24, 0x3d	; 61
    2064:	9e b7       	in	r25, 0x3e	; 62
    2066:	08 96       	adiw	r24, 0x08	; 8
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	9e bf       	out	0x3e, r25	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	8d bf       	out	0x3d, r24	; 61
			case CL_SEND_BREAK:
				sprintf(cnf_reply, "-->%s", "break 0x55" );
				uart1_hal_send_string(cnf_reply);
				_delay_ms(50);
				LM_send_break();
				state=CL_READ_MSG;
    2072:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    2074:	80 cf       	rjmp	.-256    	; 0x1f76 <CON_RN2483+0x12>
			
			case CL_READ:
				if(uart0_hal_message_ready()){
    2076:	0e 94 35 33 	call	0x666a	; 0x666a <uart0_hal_message_ready>
    207a:	88 23       	and	r24, r24
    207c:	29 f0       	breq	.+10     	; 0x2088 <CON_RN2483+0x124>
					uart0_hal_read_message_as_str(cnf_reply);
    207e:	80 ee       	ldi	r24, 0xE0	; 224
    2080:	96 e0       	ldi	r25, 0x06	; 6
    2082:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <uart0_hal_read_message_as_str>
    2086:	09 c0       	rjmp	.+18     	; 0x209a <CON_RN2483+0x136>
				}else{
					strcpy(cnf_reply, "null");
    2088:	25 e0       	ldi	r18, 0x05	; 5
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	47 e7       	ldi	r20, 0x77	; 119
    208e:	57 e0       	ldi	r21, 0x07	; 7
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	80 ee       	ldi	r24, 0xE0	; 224
    2094:	96 e0       	ldi	r25, 0x06	; 6
    2096:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
				}
				uart1_hal_send_string(cnf_reply);
    209a:	60 ee       	ldi	r22, 0xE0	; 224
    209c:	76 e0       	ldi	r23, 0x06	; 6
    209e:	80 e8       	ldi	r24, 0x80	; 128
    20a0:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				state=CL_READ_MSG;
    20a4:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    20a6:	67 cf       	rjmp	.-306    	; 0x1f76 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    20a8:	0e 94 1c 34 	call	0x6838	; 0x6838 <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    20ac:	6c e7       	ldi	r22, 0x7C	; 124
    20ae:	77 e0       	ldi	r23, 0x07	; 7
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	ef 90       	pop	r14
    20be:	df 90       	pop	r13
    20c0:	cf 90       	pop	r12
    20c2:	8f 90       	pop	r8
    20c4:	7f 90       	pop	r7
    20c6:	6f 90       	pop	r6
    20c8:	08 95       	ret

Disassembly of section .text.CONNECT:

00004cea <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    4cea:	cf 93       	push	r28
    4cec:	df 93       	push	r29
    4cee:	cd b7       	in	r28, 0x3d	; 61
    4cf0:	de b7       	in	r29, 0x3e	; 62
    4cf2:	64 97       	sbiw	r28, 0x14	; 20
    4cf4:	0f b6       	in	r0, 0x3f	; 63
    4cf6:	f8 94       	cli
    4cf8:	de bf       	out	0x3e, r29	; 62
    4cfa:	0f be       	out	0x3f, r0	; 63
    4cfc:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    4cfe:	21 e0       	ldi	r18, 0x01	; 1
    4d00:	ae 01       	movw	r20, r28
    4d02:	4f 5f       	subi	r20, 0xFF	; 255
    4d04:	5f 4f       	sbci	r21, 0xFF	; 255
    4d06:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    4d0a:	88 23       	and	r24, r24
    4d0c:	79 f0       	breq	.+30     	; 0x4d2c <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    4d0e:	be 01       	movw	r22, r28
    4d10:	6f 5f       	subi	r22, 0xFF	; 255
    4d12:	7f 4f       	sbci	r23, 0xFF	; 255
    4d14:	80 e8       	ldi	r24, 0x80	; 128
    4d16:	2c e9       	ldi	r18, 0x9C	; 156
    4d18:	37 e0       	ldi	r19, 0x07	; 7
    4d1a:	40 e0       	ldi	r20, 0x00	; 0
    4d1c:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    4d20:	89 2b       	or	r24, r25
    4d22:	19 f4       	brne	.+6      	; 0x4d2a <CONNECT+0x40>
		return CON_RN2483();
    4d24:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <CON_RN2483>
    4d28:	01 c0       	rjmp	.+2      	; 0x4d2c <CONNECT+0x42>
	}else{
		return false;
    4d2a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    4d2c:	64 96       	adiw	r28, 0x14	; 20
    4d2e:	0f b6       	in	r0, 0x3f	; 63
    4d30:	f8 94       	cli
    4d32:	de bf       	out	0x3e, r29	; 62
    4d34:	0f be       	out	0x3f, r0	; 63
    4d36:	cd bf       	out	0x3d, r28	; 61
    4d38:	df 91       	pop	r29
    4d3a:	cf 91       	pop	r28
    4d3c:	08 95       	ret

Disassembly of section .text.read_cols:

00003636 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    3636:	cf 92       	push	r12
    3638:	df 92       	push	r13
    363a:	ef 92       	push	r14
    363c:	ff 92       	push	r15
    363e:	1f 93       	push	r17
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    3648:	a3 97       	sbiw	r28, 0x23	; 35
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    3656:	63 e2       	ldi	r22, 0x23	; 35
    3658:	ce 01       	movw	r24, r28
    365a:	01 96       	adiw	r24, 0x01	; 1
    365c:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <EM_get_collections>
	res[0]='\0';
    3660:	f7 01       	movw	r30, r14
    3662:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    3664:	10 e0       	ldi	r17, 0x00	; 0
    3666:	35 c0       	rjmp	.+106    	; 0x36d2 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    3668:	81 2f       	mov	r24, r17
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	fc 01       	movw	r30, r24
    366e:	ee 0f       	add	r30, r30
    3670:	ff 1f       	adc	r31, r31
    3672:	ee 0f       	add	r30, r30
    3674:	ff 1f       	adc	r31, r31
    3676:	e8 0f       	add	r30, r24
    3678:	f9 1f       	adc	r31, r25
    367a:	21 e0       	ldi	r18, 0x01	; 1
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	2c 0f       	add	r18, r28
    3680:	3d 1f       	adc	r19, r29
    3682:	e2 0f       	add	r30, r18
    3684:	f3 1f       	adc	r31, r19
    3686:	23 81       	ldd	r18, Z+3	; 0x03
    3688:	2f 93       	push	r18
    368a:	22 81       	ldd	r18, Z+2	; 0x02
    368c:	2f 93       	push	r18
    368e:	21 81       	ldd	r18, Z+1	; 0x01
    3690:	2f 93       	push	r18
    3692:	20 81       	ld	r18, Z
    3694:	2f 93       	push	r18
    3696:	01 96       	adiw	r24, 0x01	; 1
    3698:	9f 93       	push	r25
    369a:	8f 93       	push	r24
    369c:	81 e4       	ldi	r24, 0x41	; 65
    369e:	94 e0       	ldi	r25, 0x04	; 4
    36a0:	a0 e0       	ldi	r26, 0x00	; 0
    36a2:	af 93       	push	r26
    36a4:	9f 93       	push	r25
    36a6:	8f 93       	push	r24
    36a8:	0f 2e       	mov	r0, r31
    36aa:	f0 e8       	ldi	r31, 0x80	; 128
    36ac:	cf 2e       	mov	r12, r31
    36ae:	fe e0       	ldi	r31, 0x0E	; 14
    36b0:	df 2e       	mov	r13, r31
    36b2:	f0 2d       	mov	r31, r0
    36b4:	df 92       	push	r13
    36b6:	cf 92       	push	r12
    36b8:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
		strcat(res, arg);
    36bc:	a6 01       	movw	r20, r12
    36be:	60 e8       	ldi	r22, 0x80	; 128
    36c0:	c7 01       	movw	r24, r14
    36c2:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    36c6:	1f 5f       	subi	r17, 0xFF	; 255
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	17 30       	cpi	r17, 0x07	; 7
    36d4:	48 f2       	brcs	.-110    	; 0x3668 <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    36d6:	a3 96       	adiw	r28, 0x23	; 35
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	df 91       	pop	r29
    36e4:	cf 91       	pop	r28
    36e6:	1f 91       	pop	r17
    36e8:	ff 90       	pop	r15
    36ea:	ef 90       	pop	r14
    36ec:	df 90       	pop	r13
    36ee:	cf 90       	pop	r12
    36f0:	08 95       	ret

Disassembly of section .text.read_time:

00003f4a <read_time>:

static void read_time(char res[]){
    3f4a:	0f 93       	push	r16
    3f4c:	1f 93       	push	r17
    3f4e:	cf 93       	push	r28
    3f50:	df 93       	push	r29
    3f52:	00 d0       	rcall	.+0      	; 0x3f54 <read_time+0xa>
    3f54:	00 d0       	rcall	.+0      	; 0x3f56 <read_time+0xc>
    3f56:	00 d0       	rcall	.+0      	; 0x3f58 <read_time+0xe>
    3f58:	cd b7       	in	r28, 0x3d	; 61
    3f5a:	de b7       	in	r29, 0x3e	; 62
    3f5c:	18 2f       	mov	r17, r24
    3f5e:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    3f60:	0e 94 bd 32 	call	0x657a	; 0x657a <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    3f64:	ce 01       	movw	r24, r28
    3f66:	01 96       	adiw	r24, 0x01	; 1
    3f68:	0e 94 bb 11 	call	0x2376	; 0x2376 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    3f6c:	88 23       	and	r24, r24
    3f6e:	51 f0       	breq	.+20     	; 0x3f84 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    3f70:	24 e1       	ldi	r18, 0x14	; 20
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	47 e5       	ldi	r20, 0x57	; 87
    3f76:	54 e0       	ldi	r21, 0x04	; 4
    3f78:	60 e0       	ldi	r22, 0x00	; 0
    3f7a:	81 2f       	mov	r24, r17
    3f7c:	90 2f       	mov	r25, r16
    3f7e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
    3f82:	21 c0       	rjmp	.+66     	; 0x3fc6 <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    3f84:	59 81       	ldd	r21, Y+1	; 0x01
    3f86:	4a 81       	ldd	r20, Y+2	; 0x02
    3f88:	3b 81       	ldd	r19, Y+3	; 0x03
    3f8a:	2c 81       	ldd	r18, Y+4	; 0x04
    3f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3f90:	1f 92       	push	r1
    3f92:	5f 93       	push	r21
    3f94:	1f 92       	push	r1
    3f96:	4f 93       	push	r20
    3f98:	1f 92       	push	r1
    3f9a:	3f 93       	push	r19
    3f9c:	1f 92       	push	r1
    3f9e:	2f 93       	push	r18
    3fa0:	1f 92       	push	r1
    3fa2:	9f 93       	push	r25
    3fa4:	1f 92       	push	r1
    3fa6:	8f 93       	push	r24
    3fa8:	8b e6       	ldi	r24, 0x6B	; 107
    3faa:	94 e0       	ldi	r25, 0x04	; 4
    3fac:	a0 e0       	ldi	r26, 0x00	; 0
    3fae:	af 93       	push	r26
    3fb0:	9f 93       	push	r25
    3fb2:	8f 93       	push	r24
    3fb4:	0f 93       	push	r16
    3fb6:	1f 93       	push	r17
    3fb8:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	de bf       	out	0x3e, r29	; 62
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	cd bf       	out	0x3d, r28	; 61
	}
}
    3fc6:	26 96       	adiw	r28, 0x06	; 6
    3fc8:	0f b6       	in	r0, 0x3f	; 63
    3fca:	f8 94       	cli
    3fcc:	de bf       	out	0x3e, r29	; 62
    3fce:	0f be       	out	0x3f, r0	; 63
    3fd0:	cd bf       	out	0x3d, r28	; 61
    3fd2:	df 91       	pop	r29
    3fd4:	cf 91       	pop	r28
    3fd6:	1f 91       	pop	r17
    3fd8:	0f 91       	pop	r16
    3fda:	08 95       	ret

Disassembly of section .text.write_deveui:

000042de <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    42de:	cf 92       	push	r12
    42e0:	df 92       	push	r13
    42e2:	ef 92       	push	r14
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17
    42e8:	cf 93       	push	r28
    42ea:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    42ec:	22 e0       	ldi	r18, 0x02	; 2
    42ee:	40 e8       	ldi	r20, 0x80	; 128
    42f0:	5e e0       	ldi	r21, 0x0E	; 14
    42f2:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    42f6:	c8 2f       	mov	r28, r24
    42f8:	88 23       	and	r24, r24
    42fa:	29 f1       	breq	.+74     	; 0x4346 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    42fc:	80 e8       	ldi	r24, 0x80	; 128
    42fe:	9e e0       	ldi	r25, 0x0E	; 14
    4300:	6c 01       	movw	r12, r24
    4302:	20 e8       	ldi	r18, 0x80	; 128
    4304:	e2 2e       	mov	r14, r18
    4306:	8e 2d       	mov	r24, r14
    4308:	b6 01       	movw	r22, r12
    430a:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    430e:	40 97       	sbiw	r24, 0x10	; 16
    4310:	c9 f4       	brne	.+50     	; 0x4344 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    4312:	8e 2d       	mov	r24, r14
    4314:	b6 01       	movw	r22, r12
    4316:	0e 94 65 2c 	call	0x58ca	; 0x58ca <EM_set_deveui>
    431a:	c8 2f       	mov	r28, r24
    431c:	81 11       	cpse	r24, r1
    431e:	09 c0       	rjmp	.+18     	; 0x4332 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    4320:	27 e0       	ldi	r18, 0x07	; 7
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	49 e8       	ldi	r20, 0x89	; 137
    4326:	54 e0       	ldi	r21, 0x04	; 4
    4328:	60 e0       	ldi	r22, 0x00	; 0
    432a:	c8 01       	movw	r24, r16
    432c:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return false;
    4330:	0a c0       	rjmp	.+20     	; 0x4346 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4332:	28 e0       	ldi	r18, 0x08	; 8
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	40 e9       	ldi	r20, 0x90	; 144
    4338:	54 e0       	ldi	r21, 0x04	; 4
    433a:	60 e0       	ldi	r22, 0x00	; 0
    433c:	c8 01       	movw	r24, r16
    433e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
    4342:	01 c0       	rjmp	.+2      	; 0x4346 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    4344:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4346:	8c 2f       	mov	r24, r28
    4348:	cf 91       	pop	r28
    434a:	1f 91       	pop	r17
    434c:	0f 91       	pop	r16
    434e:	ef 90       	pop	r14
    4350:	df 90       	pop	r13
    4352:	cf 90       	pop	r12
    4354:	08 95       	ret

Disassembly of section .text.write_appeui:

00004356 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    4356:	cf 92       	push	r12
    4358:	df 92       	push	r13
    435a:	ef 92       	push	r14
    435c:	0f 93       	push	r16
    435e:	1f 93       	push	r17
    4360:	cf 93       	push	r28
    4362:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4364:	22 e0       	ldi	r18, 0x02	; 2
    4366:	40 e8       	ldi	r20, 0x80	; 128
    4368:	5e e0       	ldi	r21, 0x0E	; 14
    436a:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    436e:	c8 2f       	mov	r28, r24
    4370:	88 23       	and	r24, r24
    4372:	29 f1       	breq	.+74     	; 0x43be <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    4374:	80 e8       	ldi	r24, 0x80	; 128
    4376:	9e e0       	ldi	r25, 0x0E	; 14
    4378:	6c 01       	movw	r12, r24
    437a:	20 e8       	ldi	r18, 0x80	; 128
    437c:	e2 2e       	mov	r14, r18
    437e:	8e 2d       	mov	r24, r14
    4380:	b6 01       	movw	r22, r12
    4382:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    4386:	40 97       	sbiw	r24, 0x10	; 16
    4388:	c9 f4       	brne	.+50     	; 0x43bc <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    438a:	8e 2d       	mov	r24, r14
    438c:	b6 01       	movw	r22, r12
    438e:	0e 94 82 2c 	call	0x5904	; 0x5904 <EM_set_appeui>
    4392:	c8 2f       	mov	r28, r24
    4394:	81 11       	cpse	r24, r1
    4396:	09 c0       	rjmp	.+18     	; 0x43aa <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    4398:	27 e0       	ldi	r18, 0x07	; 7
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	49 e8       	ldi	r20, 0x89	; 137
    439e:	54 e0       	ldi	r21, 0x04	; 4
    43a0:	60 e0       	ldi	r22, 0x00	; 0
    43a2:	c8 01       	movw	r24, r16
    43a4:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return false;
    43a8:	0a c0       	rjmp	.+20     	; 0x43be <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    43aa:	28 e0       	ldi	r18, 0x08	; 8
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	40 e9       	ldi	r20, 0x90	; 144
    43b0:	54 e0       	ldi	r21, 0x04	; 4
    43b2:	60 e0       	ldi	r22, 0x00	; 0
    43b4:	c8 01       	movw	r24, r16
    43b6:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
    43ba:	01 c0       	rjmp	.+2      	; 0x43be <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    43bc:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    43be:	8c 2f       	mov	r24, r28
    43c0:	cf 91       	pop	r28
    43c2:	1f 91       	pop	r17
    43c4:	0f 91       	pop	r16
    43c6:	ef 90       	pop	r14
    43c8:	df 90       	pop	r13
    43ca:	cf 90       	pop	r12
    43cc:	08 95       	ret

Disassembly of section .text.write_appkey:

000043ce <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    43ce:	cf 92       	push	r12
    43d0:	df 92       	push	r13
    43d2:	ef 92       	push	r14
    43d4:	0f 93       	push	r16
    43d6:	1f 93       	push	r17
    43d8:	cf 93       	push	r28
    43da:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    43dc:	22 e0       	ldi	r18, 0x02	; 2
    43de:	40 e8       	ldi	r20, 0x80	; 128
    43e0:	5e e0       	ldi	r21, 0x0E	; 14
    43e2:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    43e6:	c8 2f       	mov	r28, r24
    43e8:	88 23       	and	r24, r24
    43ea:	29 f1       	breq	.+74     	; 0x4436 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    43ec:	80 e8       	ldi	r24, 0x80	; 128
    43ee:	9e e0       	ldi	r25, 0x0E	; 14
    43f0:	6c 01       	movw	r12, r24
    43f2:	20 e8       	ldi	r18, 0x80	; 128
    43f4:	e2 2e       	mov	r14, r18
    43f6:	8e 2d       	mov	r24, r14
    43f8:	b6 01       	movw	r22, r12
    43fa:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    43fe:	80 97       	sbiw	r24, 0x20	; 32
    4400:	c9 f4       	brne	.+50     	; 0x4434 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    4402:	8e 2d       	mov	r24, r14
    4404:	b6 01       	movw	r22, r12
    4406:	0e 94 9f 2c 	call	0x593e	; 0x593e <EM_set_appkey>
    440a:	c8 2f       	mov	r28, r24
    440c:	81 11       	cpse	r24, r1
    440e:	09 c0       	rjmp	.+18     	; 0x4422 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    4410:	27 e0       	ldi	r18, 0x07	; 7
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	49 e8       	ldi	r20, 0x89	; 137
    4416:	54 e0       	ldi	r21, 0x04	; 4
    4418:	60 e0       	ldi	r22, 0x00	; 0
    441a:	c8 01       	movw	r24, r16
    441c:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return false;
    4420:	0a c0       	rjmp	.+20     	; 0x4436 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    4422:	28 e0       	ldi	r18, 0x08	; 8
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 e9       	ldi	r20, 0x90	; 144
    4428:	54 e0       	ldi	r21, 0x04	; 4
    442a:	60 e0       	ldi	r22, 0x00	; 0
    442c:	c8 01       	movw	r24, r16
    442e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
    4432:	01 c0       	rjmp	.+2      	; 0x4436 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    4434:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    4436:	8c 2f       	mov	r24, r28
    4438:	cf 91       	pop	r28
    443a:	1f 91       	pop	r17
    443c:	0f 91       	pop	r16
    443e:	ef 90       	pop	r14
    4440:	df 90       	pop	r13
    4442:	cf 90       	pop	r12
    4444:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00005000 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    5000:	0f 93       	push	r16
    5002:	1f 93       	push	r17
    5004:	cf 93       	push	r28
    5006:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5008:	22 e0       	ldi	r18, 0x02	; 2
    500a:	40 e8       	ldi	r20, 0x80	; 128
    500c:	5e e0       	ldi	r21, 0x0E	; 14
    500e:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    5012:	c8 2f       	mov	r28, r24
    5014:	88 23       	and	r24, r24
    5016:	a9 f0       	breq	.+42     	; 0x5042 <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    5018:	80 e8       	ldi	r24, 0x80	; 128
    501a:	9e e0       	ldi	r25, 0x0E	; 14
    501c:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <is_float>
    5020:	c8 2f       	mov	r28, r24
    5022:	88 23       	and	r24, r24
    5024:	71 f0       	breq	.+28     	; 0x5042 <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    5026:	80 e8       	ldi	r24, 0x80	; 128
    5028:	9e e0       	ldi	r25, 0x0E	; 14
    502a:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <str2flaot>
	EM_set_ppmfactor(val);
    502e:	0e 94 51 33 	call	0x66a2	; 0x66a2 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    5032:	28 e0       	ldi	r18, 0x08	; 8
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	40 e9       	ldi	r20, 0x90	; 144
    5038:	54 e0       	ldi	r21, 0x04	; 4
    503a:	60 e0       	ldi	r22, 0x00	; 0
    503c:	c8 01       	movw	r24, r16
    503e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
	return true;
}
    5042:	8c 2f       	mov	r24, r28
    5044:	cf 91       	pop	r28
    5046:	1f 91       	pop	r17
    5048:	0f 91       	pop	r16
    504a:	08 95       	ret

Disassembly of section .text.write_RRL:

0000504c <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    504c:	0f 93       	push	r16
    504e:	1f 93       	push	r17
    5050:	cf 93       	push	r28
    5052:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5054:	22 e0       	ldi	r18, 0x02	; 2
    5056:	40 e8       	ldi	r20, 0x80	; 128
    5058:	5e e0       	ldi	r21, 0x0E	; 14
    505a:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    505e:	c8 2f       	mov	r28, r24
    5060:	88 23       	and	r24, r24
    5062:	a9 f0       	breq	.+42     	; 0x508e <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    5064:	80 e8       	ldi	r24, 0x80	; 128
    5066:	9e e0       	ldi	r25, 0x0E	; 14
    5068:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <is_float>
    506c:	c8 2f       	mov	r28, r24
    506e:	88 23       	and	r24, r24
    5070:	71 f0       	breq	.+28     	; 0x508e <write_RRL+0x42>
	
	float val=str2flaot(arg);
    5072:	80 e8       	ldi	r24, 0x80	; 128
    5074:	9e e0       	ldi	r25, 0x0E	; 14
    5076:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <str2flaot>
	EM_set_RRL(val);
    507a:	0e 94 58 33 	call	0x66b0	; 0x66b0 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    507e:	28 e0       	ldi	r18, 0x08	; 8
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	40 e9       	ldi	r20, 0x90	; 144
    5084:	54 e0       	ldi	r21, 0x04	; 4
    5086:	60 e0       	ldi	r22, 0x00	; 0
    5088:	c8 01       	movw	r24, r16
    508a:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
	return true;
}
    508e:	8c 2f       	mov	r24, r28
    5090:	cf 91       	pop	r28
    5092:	1f 91       	pop	r17
    5094:	0f 91       	pop	r16
    5096:	08 95       	ret

Disassembly of section .text.write_VCC:

00005098 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    5098:	0f 93       	push	r16
    509a:	1f 93       	push	r17
    509c:	cf 93       	push	r28
    509e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    50a0:	22 e0       	ldi	r18, 0x02	; 2
    50a2:	40 e8       	ldi	r20, 0x80	; 128
    50a4:	5e e0       	ldi	r21, 0x0E	; 14
    50a6:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    50aa:	c8 2f       	mov	r28, r24
    50ac:	88 23       	and	r24, r24
    50ae:	a9 f0       	breq	.+42     	; 0x50da <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    50b0:	80 e8       	ldi	r24, 0x80	; 128
    50b2:	9e e0       	ldi	r25, 0x0E	; 14
    50b4:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <is_float>
    50b8:	c8 2f       	mov	r28, r24
    50ba:	88 23       	and	r24, r24
    50bc:	71 f0       	breq	.+28     	; 0x50da <write_VCC+0x42>
	
	float val=str2flaot(arg);
    50be:	80 e8       	ldi	r24, 0x80	; 128
    50c0:	9e e0       	ldi	r25, 0x0E	; 14
    50c2:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <str2flaot>
	EM_set_Vcc(val);
    50c6:	0e 94 5f 33 	call	0x66be	; 0x66be <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    50ca:	28 e0       	ldi	r18, 0x08	; 8
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	40 e9       	ldi	r20, 0x90	; 144
    50d0:	54 e0       	ldi	r21, 0x04	; 4
    50d2:	60 e0       	ldi	r22, 0x00	; 0
    50d4:	c8 01       	movw	r24, r16
    50d6:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
	return true;
}
    50da:	8c 2f       	mov	r24, r28
    50dc:	cf 91       	pop	r28
    50de:	1f 91       	pop	r17
    50e0:	0f 91       	pop	r16
    50e2:	08 95       	ret

Disassembly of section .text.get_time_par:

00005b9a <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    5b9a:	cf 93       	push	r28
    5b9c:	df 93       	push	r29
    5b9e:	00 d0       	rcall	.+0      	; 0x5ba0 <get_time_par+0x6>
    5ba0:	1f 92       	push	r1
    5ba2:	cd b7       	in	r28, 0x3d	; 61
    5ba4:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    5ba6:	fc 01       	movw	r30, r24
    5ba8:	e6 0f       	add	r30, r22
    5baa:	f1 1d       	adc	r31, r1
    5bac:	80 81       	ld	r24, Z
    5bae:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    5bb0:	81 81       	ldd	r24, Z+1	; 0x01
    5bb2:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    5bb4:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    5bb6:	be 01       	movw	r22, r28
    5bb8:	6f 5f       	subi	r22, 0xFF	; 255
    5bba:	7f 4f       	sbci	r23, 0xFF	; 255
    5bbc:	80 e8       	ldi	r24, 0x80	; 128
    5bbe:	0e 94 7d 34 	call	0x68fa	; 0x68fa <atoi>
}
    5bc2:	0f 90       	pop	r0
    5bc4:	0f 90       	pop	r0
    5bc6:	0f 90       	pop	r0
    5bc8:	df 91       	pop	r29
    5bca:	cf 91       	pop	r28
    5bcc:	08 95       	ret

Disassembly of section .text.write_cols:

000025f2 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    25f2:	4f 92       	push	r4
    25f4:	5f 92       	push	r5
    25f6:	6f 92       	push	r6
    25f8:	7f 92       	push	r7
    25fa:	8f 92       	push	r8
    25fc:	af 92       	push	r10
    25fe:	bf 92       	push	r11
    2600:	cf 92       	push	r12
    2602:	df 92       	push	r13
    2604:	ef 92       	push	r14
    2606:	ff 92       	push	r15
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	a3 97       	sbiw	r28, 0x23	; 35
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	3b 01       	movw	r6, r22
    2622:	88 2e       	mov	r8, r24
    2624:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    2626:	22 e0       	ldi	r18, 0x02	; 2
    2628:	40 e8       	ldi	r20, 0x80	; 128
    262a:	5e e0       	ldi	r21, 0x0E	; 14
    262c:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    2630:	18 2f       	mov	r17, r24
    2632:	88 23       	and	r24, r24
    2634:	09 f4       	brne	.+2      	; 0x2638 <write_cols+0x46>
    2636:	5d c0       	rjmp	.+186    	; 0x26f2 <write_cols+0x100>
	index=atoi(arg);
    2638:	80 e8       	ldi	r24, 0x80	; 128
    263a:	9e e0       	ldi	r25, 0x0E	; 14
    263c:	6c 01       	movw	r12, r24
    263e:	20 e8       	ldi	r18, 0x80	; 128
    2640:	e2 2e       	mov	r14, r18
    2642:	8e 2d       	mov	r24, r14
    2644:	b6 01       	movw	r22, r12
    2646:	0e 94 7d 34 	call	0x68fa	; 0x68fa <atoi>
	if(index<1 || index>7) return false;
    264a:	0f ef       	ldi	r16, 0xFF	; 255
    264c:	08 0f       	add	r16, r24
    264e:	07 30       	cpi	r16, 0x07	; 7
    2650:	08 f0       	brcs	.+2      	; 0x2654 <write_cols+0x62>
    2652:	4a c0       	rjmp	.+148    	; 0x26e8 <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    2654:	23 e0       	ldi	r18, 0x03	; 3
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5e e0       	ldi	r21, 0x0E	; 14
    265a:	88 2d       	mov	r24, r8
    265c:	b3 01       	movw	r22, r6
    265e:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    2662:	18 2f       	mov	r17, r24
    2664:	88 23       	and	r24, r24
    2666:	09 f4       	brne	.+2      	; 0x266a <write_cols+0x78>
    2668:	44 c0       	rjmp	.+136    	; 0x26f2 <write_cols+0x100>
	samplings=atoi(arg);
    266a:	8e 2d       	mov	r24, r14
    266c:	b6 01       	movw	r22, r12
    266e:	0e 94 7d 34 	call	0x68fa	; 0x68fa <atoi>
    2672:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    2674:	02 97       	sbiw	r24, 0x02	; 2
    2676:	8b 32       	cpi	r24, 0x2B	; 43
    2678:	91 40       	sbci	r25, 0x01	; 1
    267a:	c0 f5       	brcc	.+112    	; 0x26ec <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    267c:	24 e0       	ldi	r18, 0x04	; 4
    267e:	40 e8       	ldi	r20, 0x80	; 128
    2680:	5e e0       	ldi	r21, 0x0E	; 14
    2682:	88 2d       	mov	r24, r8
    2684:	b3 01       	movw	r22, r6
    2686:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    268a:	18 2f       	mov	r17, r24
    268c:	88 23       	and	r24, r24
    268e:	89 f1       	breq	.+98     	; 0x26f2 <write_cols+0x100>
	samplingInterval=atoi(arg);
    2690:	8e 2d       	mov	r24, r14
    2692:	b6 01       	movw	r22, r12
    2694:	0e 94 7d 34 	call	0x68fa	; 0x68fa <atoi>
    2698:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    269a:	02 97       	sbiw	r24, 0x02	; 2
    269c:	87 35       	cpi	r24, 0x57	; 87
    269e:	92 40       	sbci	r25, 0x02	; 2
    26a0:	38 f5       	brcc	.+78     	; 0x26f0 <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    26a2:	63 e2       	ldi	r22, 0x23	; 35
    26a4:	ce 01       	movw	r24, r28
    26a6:	01 96       	adiw	r24, 0x01	; 1
    26a8:	7c 01       	movw	r14, r24
    26aa:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <EM_get_collections>
	
	cols[index].samplings=samplings;
    26ae:	80 2f       	mov	r24, r16
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	fc 01       	movw	r30, r24
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	e8 0f       	add	r30, r24
    26be:	f9 1f       	adc	r31, r25
    26c0:	ee 0d       	add	r30, r14
    26c2:	ff 1d       	adc	r31, r15
    26c4:	51 82       	std	Z+1, r5	; 0x01
    26c6:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    26c8:	d3 82       	std	Z+3, r13	; 0x03
    26ca:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    26cc:	b7 01       	movw	r22, r14
    26ce:	80 e8       	ldi	r24, 0x80	; 128
    26d0:	43 e2       	ldi	r20, 0x23	; 35
    26d2:	0e 94 66 33 	call	0x66cc	; 0x66cc <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    26d6:	28 e0       	ldi	r18, 0x08	; 8
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e9       	ldi	r20, 0x90	; 144
    26dc:	54 e0       	ldi	r21, 0x04	; 4
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	c5 01       	movw	r24, r10
    26e2:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
	return true;	
    26e6:	05 c0       	rjmp	.+10     	; 0x26f2 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    26e8:	10 e0       	ldi	r17, 0x00	; 0
    26ea:	03 c0       	rjmp	.+6      	; 0x26f2 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    26ec:	10 e0       	ldi	r17, 0x00	; 0
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    26f0:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    26f2:	81 2f       	mov	r24, r17
    26f4:	a3 96       	adiw	r28, 0x23	; 35
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	1f 91       	pop	r17
    2706:	0f 91       	pop	r16
    2708:	ff 90       	pop	r15
    270a:	ef 90       	pop	r14
    270c:	df 90       	pop	r13
    270e:	cf 90       	pop	r12
    2710:	bf 90       	pop	r11
    2712:	af 90       	pop	r10
    2714:	8f 90       	pop	r8
    2716:	7f 90       	pop	r7
    2718:	6f 90       	pop	r6
    271a:	5f 90       	pop	r5
    271c:	4f 90       	pop	r4
    271e:	08 95       	ret

Disassembly of section .text.write_heat_up:

000050e4 <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    50e4:	0f 93       	push	r16
    50e6:	1f 93       	push	r17
    50e8:	cf 93       	push	r28
    50ea:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    50ec:	22 e0       	ldi	r18, 0x02	; 2
    50ee:	40 e8       	ldi	r20, 0x80	; 128
    50f0:	5e e0       	ldi	r21, 0x0E	; 14
    50f2:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    50f6:	c8 2f       	mov	r28, r24
    50f8:	88 23       	and	r24, r24
    50fa:	a9 f0       	breq	.+42     	; 0x5126 <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    50fc:	60 e8       	ldi	r22, 0x80	; 128
    50fe:	7e e0       	ldi	r23, 0x0E	; 14
    5100:	80 e8       	ldi	r24, 0x80	; 128
    5102:	0e 94 7d 34 	call	0x68fa	; 0x68fa <atoi>
	
	if(val<1 || val>200) return false;
    5106:	9f ef       	ldi	r25, 0xFF	; 255
    5108:	98 0f       	add	r25, r24
    510a:	98 3c       	cpi	r25, 0xC8	; 200
    510c:	58 f4       	brcc	.+22     	; 0x5124 <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    510e:	0e 94 b8 33 	call	0x6770	; 0x6770 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    5112:	28 e0       	ldi	r18, 0x08	; 8
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	40 e9       	ldi	r20, 0x90	; 144
    5118:	54 e0       	ldi	r21, 0x04	; 4
    511a:	60 e0       	ldi	r22, 0x00	; 0
    511c:	c8 01       	movw	r24, r16
    511e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
	return true;
    5122:	01 c0       	rjmp	.+2      	; 0x5126 <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    5124:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5126:	8c 2f       	mov	r24, r28
    5128:	cf 91       	pop	r28
    512a:	1f 91       	pop	r17
    512c:	0f 91       	pop	r16
    512e:	08 95       	ret

Disassembly of section .text.write_air_pump:

00004de0 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    4de0:	0f 93       	push	r16
    4de2:	1f 93       	push	r17
    4de4:	cf 93       	push	r28
    4de6:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    4de8:	22 e0       	ldi	r18, 0x02	; 2
    4dea:	40 e8       	ldi	r20, 0x80	; 128
    4dec:	5e e0       	ldi	r21, 0x0E	; 14
    4dee:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    4df2:	c8 2f       	mov	r28, r24
    4df4:	88 23       	and	r24, r24
    4df6:	b9 f0       	breq	.+46     	; 0x4e26 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    4df8:	60 e8       	ldi	r22, 0x80	; 128
    4dfa:	7e e0       	ldi	r23, 0x0E	; 14
    4dfc:	80 e8       	ldi	r24, 0x80	; 128
    4dfe:	0e 94 7d 34 	call	0x68fa	; 0x68fa <atoi>
	
	if(val<5 || val>1000) return false;
    4e02:	9c 01       	movw	r18, r24
    4e04:	25 50       	subi	r18, 0x05	; 5
    4e06:	31 09       	sbc	r19, r1
    4e08:	24 3e       	cpi	r18, 0xE4	; 228
    4e0a:	33 40       	sbci	r19, 0x03	; 3
    4e0c:	58 f4       	brcc	.+22     	; 0x4e24 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    4e0e:	0e 94 c4 33 	call	0x6788	; 0x6788 <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    4e12:	28 e0       	ldi	r18, 0x08	; 8
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	40 e9       	ldi	r20, 0x90	; 144
    4e18:	54 e0       	ldi	r21, 0x04	; 4
    4e1a:	60 e0       	ldi	r22, 0x00	; 0
    4e1c:	c8 01       	movw	r24, r16
    4e1e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
	return true;
    4e22:	01 c0       	rjmp	.+2      	; 0x4e26 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    4e24:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    4e26:	8c 2f       	mov	r24, r28
    4e28:	cf 91       	pop	r28
    4e2a:	1f 91       	pop	r17
    4e2c:	0f 91       	pop	r16
    4e2e:	08 95       	ret

Disassembly of section .text.write_sp_interval:

00005130 <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    5130:	0f 93       	push	r16
    5132:	1f 93       	push	r17
    5134:	cf 93       	push	r28
    5136:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    5138:	22 e0       	ldi	r18, 0x02	; 2
    513a:	40 e8       	ldi	r20, 0x80	; 128
    513c:	5e e0       	ldi	r21, 0x0E	; 14
    513e:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    5142:	c8 2f       	mov	r28, r24
    5144:	88 23       	and	r24, r24
    5146:	a9 f0       	breq	.+42     	; 0x5172 <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    5148:	60 e8       	ldi	r22, 0x80	; 128
    514a:	7e e0       	ldi	r23, 0x0E	; 14
    514c:	80 e8       	ldi	r24, 0x80	; 128
    514e:	0e 94 7d 34 	call	0x68fa	; 0x68fa <atoi>
	
	if(val<6 || val>24) return false;
    5152:	9a ef       	ldi	r25, 0xFA	; 250
    5154:	98 0f       	add	r25, r24
    5156:	93 31       	cpi	r25, 0x13	; 19
    5158:	58 f4       	brcc	.+22     	; 0x5170 <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    515a:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    515e:	28 e0       	ldi	r18, 0x08	; 8
    5160:	30 e0       	ldi	r19, 0x00	; 0
    5162:	40 e9       	ldi	r20, 0x90	; 144
    5164:	54 e0       	ldi	r21, 0x04	; 4
    5166:	60 e0       	ldi	r22, 0x00	; 0
    5168:	c8 01       	movw	r24, r16
    516a:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
	return true;
    516e:	01 c0       	rjmp	.+2      	; 0x5172 <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    5170:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    5172:	8c 2f       	mov	r24, r28
    5174:	cf 91       	pop	r28
    5176:	1f 91       	pop	r17
    5178:	0f 91       	pop	r16
    517a:	08 95       	ret

Disassembly of section .text.write_reset:

00003064 <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	a3 97       	sbiw	r28, 0x23	; 35
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    307e:	68 e9       	ldi	r22, 0x98	; 152
    3080:	74 e0       	ldi	r23, 0x04	; 4
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	0e 94 65 2c 	call	0x58ca	; 0x58ca <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    3088:	68 e9       	ldi	r22, 0x98	; 152
    308a:	74 e0       	ldi	r23, 0x04	; 4
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	0e 94 82 2c 	call	0x5904	; 0x5904 <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    3092:	69 ea       	ldi	r22, 0xA9	; 169
    3094:	74 e0       	ldi	r23, 0x04	; 4
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	0e 94 9f 2c 	call	0x593e	; 0x593e <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	70 e0       	ldi	r23, 0x00	; 0
    30a0:	80 e8       	ldi	r24, 0x80	; 128
    30a2:	9f e3       	ldi	r25, 0x3F	; 63
    30a4:	0e 94 51 33 	call	0x66a2	; 0x66a2 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    30a8:	60 e0       	ldi	r22, 0x00	; 0
    30aa:	70 e4       	ldi	r23, 0x40	; 64
    30ac:	8c e1       	ldi	r24, 0x1C	; 28
    30ae:	95 e4       	ldi	r25, 0x45	; 69
    30b0:	0e 94 58 33 	call	0x66b0	; 0x66b0 <EM_set_RRL>
	EM_set_Vcc(5.00);
    30b4:	60 e0       	ldi	r22, 0x00	; 0
    30b6:	70 e0       	ldi	r23, 0x00	; 0
    30b8:	80 ea       	ldi	r24, 0xA0	; 160
    30ba:	90 e4       	ldi	r25, 0x40	; 64
    30bc:	0e 94 5f 33 	call	0x66be	; 0x66be <EM_set_Vcc>
	EM_set_heat_up_time(2);
    30c0:	82 e0       	ldi	r24, 0x02	; 2
    30c2:	0e 94 b8 33 	call	0x6770	; 0x6770 <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    30c6:	85 e0       	ldi	r24, 0x05	; 5
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	0e 94 c4 33 	call	0x6788	; 0x6788 <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    30ce:	86 e0       	ldi	r24, 0x06	; 6
    30d0:	0e 94 d0 33 	call	0x67a0	; 0x67a0 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	1a c0       	rjmp	.+52     	; 0x310c <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    30d8:	e8 2f       	mov	r30, r24
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	9f 01       	movw	r18, r30
    30de:	22 0f       	add	r18, r18
    30e0:	33 1f       	adc	r19, r19
    30e2:	22 0f       	add	r18, r18
    30e4:	33 1f       	adc	r19, r19
    30e6:	e2 0f       	add	r30, r18
    30e8:	f3 1f       	adc	r31, r19
    30ea:	21 e0       	ldi	r18, 0x01	; 1
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	2c 0f       	add	r18, r28
    30f0:	3d 1f       	adc	r19, r29
    30f2:	e2 0f       	add	r30, r18
    30f4:	f3 1f       	adc	r31, r19
    30f6:	92 e0       	ldi	r25, 0x02	; 2
    30f8:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    30fa:	22 e0       	ldi	r18, 0x02	; 2
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	31 83       	std	Z+1, r19	; 0x01
    3100:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    3102:	23 e0       	ldi	r18, 0x03	; 3
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	33 83       	std	Z+3, r19	; 0x03
    3108:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    310a:	8f 5f       	subi	r24, 0xFF	; 255
    310c:	87 30       	cpi	r24, 0x07	; 7
    310e:	20 f3       	brcs	.-56     	; 0x30d8 <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    3110:	be 01       	movw	r22, r28
    3112:	6f 5f       	subi	r22, 0xFF	; 255
    3114:	7f 4f       	sbci	r23, 0xFF	; 255
    3116:	80 e8       	ldi	r24, 0x80	; 128
    3118:	43 e2       	ldi	r20, 0x23	; 35
    311a:	0e 94 66 33 	call	0x66cc	; 0x66cc <EM_set_collections>
	
	strcpy(res, "All settings reset");
    311e:	23 e1       	ldi	r18, 0x13	; 19
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	4a ec       	ldi	r20, 0xCA	; 202
    3124:	54 e0       	ldi	r21, 0x04	; 4
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	c8 01       	movw	r24, r16
    312a:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
	return true;
}
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	a3 96       	adiw	r28, 0x23	; 35
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	08 95       	ret

Disassembly of section .text.write_time:

00002d7e <write_time>:

static bool write_time(const char cmd[], char res[]){
    2d7e:	6f 92       	push	r6
    2d80:	7f 92       	push	r7
    2d82:	8f 92       	push	r8
    2d84:	df 92       	push	r13
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <write_time+0x16>
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <write_time+0x18>
    2d96:	00 d0       	rcall	.+0      	; 0x2d98 <write_time+0x1a>
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	3b 01       	movw	r6, r22
    2d9e:	88 2e       	mov	r8, r24
    2da0:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    2da2:	0e 94 bd 32 	call	0x657a	; 0x657a <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    2da6:	22 e0       	ldi	r18, 0x02	; 2
    2da8:	40 e8       	ldi	r20, 0x80	; 128
    2daa:	5e e0       	ldi	r21, 0x0E	; 14
    2dac:	88 2d       	mov	r24, r8
    2dae:	b3 01       	movw	r22, r6
    2db0:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    2db4:	18 2f       	mov	r17, r24
    2db6:	88 23       	and	r24, r24
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <write_time+0x3e>
    2dba:	4e c0       	rjmp	.+156    	; 0x2e58 <write_time+0xda>
	if(strlen(arg)!=17){
    2dbc:	60 e8       	ldi	r22, 0x80	; 128
    2dbe:	7e e0       	ldi	r23, 0x0E	; 14
    2dc0:	80 e8       	ldi	r24, 0x80	; 128
    2dc2:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    2dc6:	41 97       	sbiw	r24, 0x11	; 17
    2dc8:	49 f0       	breq	.+18     	; 0x2ddc <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    2dca:	25 e2       	ldi	r18, 0x25	; 37
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	4d ed       	ldi	r20, 0xDD	; 221
    2dd0:	54 e0       	ldi	r21, 0x04	; 4
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	c7 01       	movw	r24, r14
    2dd6:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
    2dda:	3e c0       	rjmp	.+124    	; 0x2e58 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	80 e8       	ldi	r24, 0x80	; 128
    2de0:	9e e0       	ldi	r25, 0x0E	; 14
    2de2:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <get_time_par>
    2de6:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    2de8:	63 e0       	ldi	r22, 0x03	; 3
    2dea:	80 e8       	ldi	r24, 0x80	; 128
    2dec:	9e e0       	ldi	r25, 0x0E	; 14
    2dee:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <get_time_par>
    2df2:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    2df4:	66 e0       	ldi	r22, 0x06	; 6
    2df6:	80 e8       	ldi	r24, 0x80	; 128
    2df8:	9e e0       	ldi	r25, 0x0E	; 14
    2dfa:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <get_time_par>
    2dfe:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    2e00:	69 e0       	ldi	r22, 0x09	; 9
    2e02:	80 e8       	ldi	r24, 0x80	; 128
    2e04:	9e e0       	ldi	r25, 0x0E	; 14
    2e06:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <get_time_par>
    2e0a:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    2e0c:	6c e0       	ldi	r22, 0x0C	; 12
    2e0e:	80 e8       	ldi	r24, 0x80	; 128
    2e10:	9e e0       	ldi	r25, 0x0E	; 14
    2e12:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <get_time_par>
    2e16:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    2e18:	6f e0       	ldi	r22, 0x0F	; 15
    2e1a:	80 e8       	ldi	r24, 0x80	; 128
    2e1c:	9e e0       	ldi	r25, 0x0E	; 14
    2e1e:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    2e22:	48 2f       	mov	r20, r24
    2e24:	5d 2d       	mov	r21, r13
    2e26:	60 2f       	mov	r22, r16
    2e28:	76 2d       	mov	r23, r6
    2e2a:	87 2d       	mov	r24, r7
    2e2c:	98 2d       	mov	r25, r8
    2e2e:	0e 94 50 24 	call	0x48a0	; 0x48a0 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2e32:	88 23       	and	r24, r24
    2e34:	49 f0       	breq	.+18     	; 0x2e48 <write_time+0xca>
		strcpy(res, "Failed to set time");
    2e36:	23 e1       	ldi	r18, 0x13	; 19
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	42 e0       	ldi	r20, 0x02	; 2
    2e3c:	55 e0       	ldi	r21, 0x05	; 5
    2e3e:	60 e0       	ldi	r22, 0x00	; 0
    2e40:	c7 01       	movw	r24, r14
    2e42:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
    2e46:	08 c0       	rjmp	.+16     	; 0x2e58 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    2e48:	28 e0       	ldi	r18, 0x08	; 8
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e9       	ldi	r20, 0x90	; 144
    2e4e:	54 e0       	ldi	r21, 0x04	; 4
    2e50:	60 e0       	ldi	r22, 0x00	; 0
    2e52:	c7 01       	movw	r24, r14
    2e54:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
	return true;
}
    2e58:	81 2f       	mov	r24, r17
    2e5a:	26 96       	adiw	r28, 0x06	; 6
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	1f 91       	pop	r17
    2e6c:	0f 91       	pop	r16
    2e6e:	ff 90       	pop	r15
    2e70:	ef 90       	pop	r14
    2e72:	df 90       	pop	r13
    2e74:	8f 90       	pop	r8
    2e76:	7f 90       	pop	r7
    2e78:	6f 90       	pop	r6
    2e7a:	08 95       	ret

Disassembly of section .text.handle_read:

00001912 <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	68 97       	sbiw	r28, 0x18	; 24
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	6b 01       	movw	r12, r22
    1934:	e8 2e       	mov	r14, r24
    1936:	f4 2e       	mov	r15, r20
    1938:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    193a:	21 e0       	ldi	r18, 0x01	; 1
    193c:	ae 01       	movw	r20, r28
    193e:	4f 5f       	subi	r20, 0xFF	; 255
    1940:	5f 4f       	sbci	r21, 0xFF	; 255
    1942:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    1946:	18 2f       	mov	r17, r24
    1948:	88 23       	and	r24, r24
    194a:	09 f4       	brne	.+2      	; 0x194e <handle_read+0x3c>
    194c:	23 c1       	rjmp	.+582    	; 0x1b94 <handle_read+0x282>
    194e:	8e 2d       	mov	r24, r14
    1950:	b6 01       	movw	r22, r12
    1952:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <count_parameters>
    1956:	82 30       	cpi	r24, 0x02	; 2
    1958:	09 f4       	brne	.+2      	; 0x195c <handle_read+0x4a>
    195a:	1b c1       	rjmp	.+566    	; 0x1b92 <handle_read+0x280>
	
	if (strcmp(par, RW_DEVEUI)==0)
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	6c 01       	movw	r12, r24
    1962:	20 e8       	ldi	r18, 0x80	; 128
    1964:	e2 2e       	mov	r14, r18
    1966:	25 e1       	ldi	r18, 0x15	; 21
    1968:	35 e0       	ldi	r19, 0x05	; 5
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	8e 2d       	mov	r24, r14
    196e:	b6 01       	movw	r22, r12
    1970:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1974:	89 2b       	or	r24, r25
    1976:	29 f4       	brne	.+10     	; 0x1982 <handle_read+0x70>
	{
		EM_get_deveui(res);
    1978:	8f 2d       	mov	r24, r15
    197a:	90 2f       	mov	r25, r16
    197c:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <EM_get_deveui>
    1980:	09 c1       	rjmp	.+530    	; 0x1b94 <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1982:	2c e1       	ldi	r18, 0x1C	; 28
    1984:	35 e0       	ldi	r19, 0x05	; 5
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	8e 2d       	mov	r24, r14
    198a:	b6 01       	movw	r22, r12
    198c:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1990:	89 2b       	or	r24, r25
    1992:	29 f4       	brne	.+10     	; 0x199e <handle_read+0x8c>
	{
		EM_get_appeui(res);
    1994:	8f 2d       	mov	r24, r15
    1996:	90 2f       	mov	r25, r16
    1998:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <EM_get_appeui>
    199c:	fb c0       	rjmp	.+502    	; 0x1b94 <handle_read+0x282>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    199e:	23 e2       	ldi	r18, 0x23	; 35
    19a0:	35 e0       	ldi	r19, 0x05	; 5
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	8e 2d       	mov	r24, r14
    19a6:	b6 01       	movw	r22, r12
    19a8:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    19ac:	89 2b       	or	r24, r25
    19ae:	29 f4       	brne	.+10     	; 0x19ba <handle_read+0xa8>
	{
		EM_get_appkey(res);
    19b0:	8f 2d       	mov	r24, r15
    19b2:	90 2f       	mov	r25, r16
    19b4:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <EM_get_appkey>
    19b8:	ed c0       	rjmp	.+474    	; 0x1b94 <handle_read+0x282>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    19ba:	2a e2       	ldi	r18, 0x2A	; 42
    19bc:	35 e0       	ldi	r19, 0x05	; 5
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	8e 2d       	mov	r24, r14
    19c2:	b6 01       	movw	r22, r12
    19c4:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    19c8:	89 2b       	or	r24, r25
    19ca:	e1 f4       	brne	.+56     	; 0x1a04 <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
    19cc:	ce 01       	movw	r24, r28
    19ce:	45 96       	adiw	r24, 0x15	; 21
    19d0:	0e 94 06 31 	call	0x620c	; 0x620c <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    19d4:	88 8d       	ldd	r24, Y+24	; 0x18
    19d6:	8f 93       	push	r24
    19d8:	8f 89       	ldd	r24, Y+23	; 0x17
    19da:	8f 93       	push	r24
    19dc:	8e 89       	ldd	r24, Y+22	; 0x16
    19de:	8f 93       	push	r24
    19e0:	8d 89       	ldd	r24, Y+21	; 0x15
    19e2:	8f 93       	push	r24
    19e4:	8f e2       	ldi	r24, 0x2F	; 47
    19e6:	95 e0       	ldi	r25, 0x05	; 5
    19e8:	a0 e0       	ldi	r26, 0x00	; 0
    19ea:	af 93       	push	r26
    19ec:	9f 93       	push	r25
    19ee:	8f 93       	push	r24
    19f0:	0f 93       	push	r16
    19f2:	ff 92       	push	r15
    19f4:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	c8 c0       	rjmp	.+400    	; 0x1b94 <handle_read+0x282>
	}
	else if(strcmp(par, RW_RRL)==0)
    1a04:	24 e3       	ldi	r18, 0x34	; 52
    1a06:	35 e0       	ldi	r19, 0x05	; 5
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	8e 2d       	mov	r24, r14
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1a12:	89 2b       	or	r24, r25
    1a14:	e1 f4       	brne	.+56     	; 0x1a4e <handle_read+0x13c>
	{
		EM_get_RRL(&val);
    1a16:	ce 01       	movw	r24, r28
    1a18:	45 96       	adiw	r24, 0x15	; 21
    1a1a:	0e 94 15 31 	call	0x622a	; 0x622a <EM_get_RRL>
		sprintf(res, "%.2f", val);
    1a1e:	88 8d       	ldd	r24, Y+24	; 0x18
    1a20:	8f 93       	push	r24
    1a22:	8f 89       	ldd	r24, Y+23	; 0x17
    1a24:	8f 93       	push	r24
    1a26:	8e 89       	ldd	r24, Y+22	; 0x16
    1a28:	8f 93       	push	r24
    1a2a:	8d 89       	ldd	r24, Y+21	; 0x15
    1a2c:	8f 93       	push	r24
    1a2e:	8f e2       	ldi	r24, 0x2F	; 47
    1a30:	95 e0       	ldi	r25, 0x05	; 5
    1a32:	a0 e0       	ldi	r26, 0x00	; 0
    1a34:	af 93       	push	r26
    1a36:	9f 93       	push	r25
    1a38:	8f 93       	push	r24
    1a3a:	0f 93       	push	r16
    1a3c:	ff 92       	push	r15
    1a3e:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	a3 c0       	rjmp	.+326    	; 0x1b94 <handle_read+0x282>
	}
	else if(strcmp(par, RW_VCC)==0)
    1a4e:	29 e3       	ldi	r18, 0x39	; 57
    1a50:	35 e0       	ldi	r19, 0x05	; 5
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	8e 2d       	mov	r24, r14
    1a56:	b6 01       	movw	r22, r12
    1a58:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1a5c:	89 2b       	or	r24, r25
    1a5e:	e1 f4       	brne	.+56     	; 0x1a98 <handle_read+0x186>
	{
		EM_get_Vcc(&val);
    1a60:	ce 01       	movw	r24, r28
    1a62:	45 96       	adiw	r24, 0x15	; 21
    1a64:	0e 94 24 31 	call	0x6248	; 0x6248 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1a68:	88 8d       	ldd	r24, Y+24	; 0x18
    1a6a:	8f 93       	push	r24
    1a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6e:	8f 93       	push	r24
    1a70:	8e 89       	ldd	r24, Y+22	; 0x16
    1a72:	8f 93       	push	r24
    1a74:	8d 89       	ldd	r24, Y+21	; 0x15
    1a76:	8f 93       	push	r24
    1a78:	8f e2       	ldi	r24, 0x2F	; 47
    1a7a:	95 e0       	ldi	r25, 0x05	; 5
    1a7c:	a0 e0       	ldi	r26, 0x00	; 0
    1a7e:	af 93       	push	r26
    1a80:	9f 93       	push	r25
    1a82:	8f 93       	push	r24
    1a84:	0f 93       	push	r16
    1a86:	ff 92       	push	r15
    1a88:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	7e c0       	rjmp	.+252    	; 0x1b94 <handle_read+0x282>
	}
	else if(strcmp(par, RW_COLS)==0)
    1a98:	2e e3       	ldi	r18, 0x3E	; 62
    1a9a:	35 e0       	ldi	r19, 0x05	; 5
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	8e 2d       	mov	r24, r14
    1aa0:	b6 01       	movw	r22, r12
    1aa2:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1aa6:	89 2b       	or	r24, r25
    1aa8:	29 f4       	brne	.+10     	; 0x1ab4 <handle_read+0x1a2>
	{
		read_cols(res);
    1aaa:	8f 2d       	mov	r24, r15
    1aac:	90 2f       	mov	r25, r16
    1aae:	0e 94 1b 1b 	call	0x3636	; 0x3636 <read_cols>
    1ab2:	70 c0       	rjmp	.+224    	; 0x1b94 <handle_read+0x282>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1ab4:	23 e4       	ldi	r18, 0x43	; 67
    1ab6:	35 e0       	ldi	r19, 0x05	; 5
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	8e 2d       	mov	r24, r14
    1abc:	b6 01       	movw	r22, r12
    1abe:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1ac2:	89 2b       	or	r24, r25
    1ac4:	a1 f4       	brne	.+40     	; 0x1aee <handle_read+0x1dc>
	{
		uint8_t val=EM_get_heat_up_time();
    1ac6:	0e 94 be 33 	call	0x677c	; 0x677c <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    1aca:	1f 92       	push	r1
    1acc:	8f 93       	push	r24
    1ace:	8d e4       	ldi	r24, 0x4D	; 77
    1ad0:	95 e0       	ldi	r25, 0x05	; 5
    1ad2:	a0 e0       	ldi	r26, 0x00	; 0
    1ad4:	af 93       	push	r26
    1ad6:	9f 93       	push	r25
    1ad8:	8f 93       	push	r24
    1ada:	0f 93       	push	r16
    1adc:	ff 92       	push	r15
    1ade:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	53 c0       	rjmp	.+166    	; 0x1b94 <handle_read+0x282>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1aee:	2f e5       	ldi	r18, 0x5F	; 95
    1af0:	35 e0       	ldi	r19, 0x05	; 5
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	8e 2d       	mov	r24, r14
    1af6:	b6 01       	movw	r22, r12
    1af8:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1afc:	89 2b       	or	r24, r25
    1afe:	a1 f4       	brne	.+40     	; 0x1b28 <handle_read+0x216>
	{
		uint16_t val=EM_get_air_pump_time();
    1b00:	0e 94 ca 33 	call	0x6794	; 0x6794 <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    1b04:	9f 93       	push	r25
    1b06:	8f 93       	push	r24
    1b08:	8a e6       	ldi	r24, 0x6A	; 106
    1b0a:	95 e0       	ldi	r25, 0x05	; 5
    1b0c:	a0 e0       	ldi	r26, 0x00	; 0
    1b0e:	af 93       	push	r26
    1b10:	9f 93       	push	r25
    1b12:	8f 93       	push	r24
    1b14:	0f 93       	push	r16
    1b16:	ff 92       	push	r15
    1b18:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	36 c0       	rjmp	.+108    	; 0x1b94 <handle_read+0x282>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1b28:	2d e7       	ldi	r18, 0x7D	; 125
    1b2a:	35 e0       	ldi	r19, 0x05	; 5
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	8e 2d       	mov	r24, r14
    1b30:	b6 01       	movw	r22, r12
    1b32:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1b36:	89 2b       	or	r24, r25
    1b38:	a1 f4       	brne	.+40     	; 0x1b62 <handle_read+0x250>
	{
		uint8_t val=EM_get_sp_interval();
    1b3a:	0e 94 d6 33 	call	0x67ac	; 0x67ac <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    1b3e:	1f 92       	push	r1
    1b40:	8f 93       	push	r24
    1b42:	89 e8       	ldi	r24, 0x89	; 137
    1b44:	95 e0       	ldi	r25, 0x05	; 5
    1b46:	a0 e0       	ldi	r26, 0x00	; 0
    1b48:	af 93       	push	r26
    1b4a:	9f 93       	push	r25
    1b4c:	8f 93       	push	r24
    1b4e:	0f 93       	push	r16
    1b50:	ff 92       	push	r15
    1b52:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	19 c0       	rjmp	.+50     	; 0x1b94 <handle_read+0x282>
	}
	else if(strcmp(par, RW_TIME)==0)
    1b62:	28 ea       	ldi	r18, 0xA8	; 168
    1b64:	35 e0       	ldi	r19, 0x05	; 5
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	8e 2d       	mov	r24, r14
    1b6a:	b6 01       	movw	r22, r12
    1b6c:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1b70:	89 2b       	or	r24, r25
    1b72:	29 f4       	brne	.+10     	; 0x1b7e <handle_read+0x26c>
	{
		read_time(res);
    1b74:	8f 2d       	mov	r24, r15
    1b76:	90 2f       	mov	r25, r16
    1b78:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <read_time>
    1b7c:	0b c0       	rjmp	.+22     	; 0x1b94 <handle_read+0x282>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1b7e:	26 e1       	ldi	r18, 0x16	; 22
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4d ea       	ldi	r20, 0xAD	; 173
    1b84:	55 e0       	ldi	r21, 0x05	; 5
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	8f 2d       	mov	r24, r15
    1b8a:	90 2f       	mov	r25, r16
    1b8c:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <handle_read+0x282>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1b92:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1b94:	81 2f       	mov	r24, r17
    1b96:	68 96       	adiw	r28, 0x18	; 24
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	08 95       	ret

Disassembly of section .text.handle_write:

00001bb4 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1bb4:	6f 92       	push	r6
    1bb6:	7f 92       	push	r7
    1bb8:	8f 92       	push	r8
    1bba:	af 92       	push	r10
    1bbc:	bf 92       	push	r11
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	64 97       	sbiw	r28, 0x14	; 20
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	3b 01       	movw	r6, r22
    1bdc:	88 2e       	mov	r8, r24
    1bde:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    1be0:	21 e0       	ldi	r18, 0x01	; 1
    1be2:	ae 01       	movw	r20, r28
    1be4:	4f 5f       	subi	r20, 0xFF	; 255
    1be6:	5f 4f       	sbci	r21, 0xFF	; 255
    1be8:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    1bec:	18 2f       	mov	r17, r24
    1bee:	88 23       	and	r24, r24
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <handle_write+0x40>
    1bf2:	cd c0       	rjmp	.+410    	; 0x1d8e <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	6c 01       	movw	r12, r24
    1bfa:	20 e8       	ldi	r18, 0x80	; 128
    1bfc:	e2 2e       	mov	r14, r18
    1bfe:	25 e1       	ldi	r18, 0x15	; 21
    1c00:	35 e0       	ldi	r19, 0x05	; 5
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	8e 2d       	mov	r24, r14
    1c06:	b6 01       	movw	r22, r12
    1c08:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1c0c:	89 2b       	or	r24, r25
    1c0e:	39 f4       	brne	.+14     	; 0x1c1e <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    1c10:	a5 01       	movw	r20, r10
    1c12:	88 2d       	mov	r24, r8
    1c14:	b3 01       	movw	r22, r6
    1c16:	0e 94 6f 21 	call	0x42de	; 0x42de <write_deveui>
    1c1a:	18 2f       	mov	r17, r24
    1c1c:	b8 c0       	rjmp	.+368    	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    1c1e:	2c e1       	ldi	r18, 0x1C	; 28
    1c20:	35 e0       	ldi	r19, 0x05	; 5
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	8e 2d       	mov	r24, r14
    1c26:	b6 01       	movw	r22, r12
    1c28:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1c2c:	89 2b       	or	r24, r25
    1c2e:	39 f4       	brne	.+14     	; 0x1c3e <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    1c30:	a5 01       	movw	r20, r10
    1c32:	88 2d       	mov	r24, r8
    1c34:	b3 01       	movw	r22, r6
    1c36:	0e 94 ab 21 	call	0x4356	; 0x4356 <write_appeui>
    1c3a:	18 2f       	mov	r17, r24
    1c3c:	a8 c0       	rjmp	.+336    	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    1c3e:	23 e2       	ldi	r18, 0x23	; 35
    1c40:	35 e0       	ldi	r19, 0x05	; 5
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	8e 2d       	mov	r24, r14
    1c46:	b6 01       	movw	r22, r12
    1c48:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1c4c:	89 2b       	or	r24, r25
    1c4e:	39 f4       	brne	.+14     	; 0x1c5e <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    1c50:	a5 01       	movw	r20, r10
    1c52:	88 2d       	mov	r24, r8
    1c54:	b3 01       	movw	r22, r6
    1c56:	0e 94 e7 21 	call	0x43ce	; 0x43ce <write_appkey>
    1c5a:	18 2f       	mov	r17, r24
    1c5c:	98 c0       	rjmp	.+304    	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1c5e:	2a e2       	ldi	r18, 0x2A	; 42
    1c60:	35 e0       	ldi	r19, 0x05	; 5
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	8e 2d       	mov	r24, r14
    1c66:	b6 01       	movw	r22, r12
    1c68:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1c6c:	89 2b       	or	r24, r25
    1c6e:	39 f4       	brne	.+14     	; 0x1c7e <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    1c70:	a5 01       	movw	r20, r10
    1c72:	88 2d       	mov	r24, r8
    1c74:	b3 01       	movw	r22, r6
    1c76:	0e 94 00 28 	call	0x5000	; 0x5000 <write_PPM_factor>
    1c7a:	18 2f       	mov	r17, r24
    1c7c:	88 c0       	rjmp	.+272    	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    1c7e:	24 e3       	ldi	r18, 0x34	; 52
    1c80:	35 e0       	ldi	r19, 0x05	; 5
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	8e 2d       	mov	r24, r14
    1c86:	b6 01       	movw	r22, r12
    1c88:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1c8c:	89 2b       	or	r24, r25
    1c8e:	39 f4       	brne	.+14     	; 0x1c9e <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    1c90:	a5 01       	movw	r20, r10
    1c92:	88 2d       	mov	r24, r8
    1c94:	b3 01       	movw	r22, r6
    1c96:	0e 94 26 28 	call	0x504c	; 0x504c <write_RRL>
    1c9a:	18 2f       	mov	r17, r24
    1c9c:	78 c0       	rjmp	.+240    	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    1c9e:	29 e3       	ldi	r18, 0x39	; 57
    1ca0:	35 e0       	ldi	r19, 0x05	; 5
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	8e 2d       	mov	r24, r14
    1ca6:	b6 01       	movw	r22, r12
    1ca8:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1cac:	89 2b       	or	r24, r25
    1cae:	39 f4       	brne	.+14     	; 0x1cbe <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    1cb0:	a5 01       	movw	r20, r10
    1cb2:	88 2d       	mov	r24, r8
    1cb4:	b3 01       	movw	r22, r6
    1cb6:	0e 94 4c 28 	call	0x5098	; 0x5098 <write_VCC>
    1cba:	18 2f       	mov	r17, r24
    1cbc:	68 c0       	rjmp	.+208    	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    1cbe:	2e e3       	ldi	r18, 0x3E	; 62
    1cc0:	35 e0       	ldi	r19, 0x05	; 5
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	8e 2d       	mov	r24, r14
    1cc6:	b6 01       	movw	r22, r12
    1cc8:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1ccc:	89 2b       	or	r24, r25
    1cce:	39 f4       	brne	.+14     	; 0x1cde <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    1cd0:	a5 01       	movw	r20, r10
    1cd2:	88 2d       	mov	r24, r8
    1cd4:	b3 01       	movw	r22, r6
    1cd6:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <write_cols>
    1cda:	18 2f       	mov	r17, r24
    1cdc:	58 c0       	rjmp	.+176    	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1cde:	23 e4       	ldi	r18, 0x43	; 67
    1ce0:	35 e0       	ldi	r19, 0x05	; 5
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	8e 2d       	mov	r24, r14
    1ce6:	b6 01       	movw	r22, r12
    1ce8:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1cec:	89 2b       	or	r24, r25
    1cee:	39 f4       	brne	.+14     	; 0x1cfe <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    1cf0:	a5 01       	movw	r20, r10
    1cf2:	88 2d       	mov	r24, r8
    1cf4:	b3 01       	movw	r22, r6
    1cf6:	0e 94 72 28 	call	0x50e4	; 0x50e4 <write_heat_up>
    1cfa:	18 2f       	mov	r17, r24
    1cfc:	48 c0       	rjmp	.+144    	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    1cfe:	2f e5       	ldi	r18, 0x5F	; 95
    1d00:	35 e0       	ldi	r19, 0x05	; 5
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	8e 2d       	mov	r24, r14
    1d06:	b6 01       	movw	r22, r12
    1d08:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1d0c:	89 2b       	or	r24, r25
    1d0e:	39 f4       	brne	.+14     	; 0x1d1e <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    1d10:	a5 01       	movw	r20, r10
    1d12:	88 2d       	mov	r24, r8
    1d14:	b3 01       	movw	r22, r6
    1d16:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <write_air_pump>
    1d1a:	18 2f       	mov	r17, r24
    1d1c:	38 c0       	rjmp	.+112    	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    1d1e:	2d e7       	ldi	r18, 0x7D	; 125
    1d20:	35 e0       	ldi	r19, 0x05	; 5
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	8e 2d       	mov	r24, r14
    1d26:	b6 01       	movw	r22, r12
    1d28:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1d2c:	89 2b       	or	r24, r25
    1d2e:	39 f4       	brne	.+14     	; 0x1d3e <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    1d30:	a5 01       	movw	r20, r10
    1d32:	88 2d       	mov	r24, r8
    1d34:	b3 01       	movw	r22, r6
    1d36:	0e 94 98 28 	call	0x5130	; 0x5130 <write_sp_interval>
    1d3a:	18 2f       	mov	r17, r24
    1d3c:	28 c0       	rjmp	.+80     	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    1d3e:	23 ec       	ldi	r18, 0xC3	; 195
    1d40:	35 e0       	ldi	r19, 0x05	; 5
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	8e 2d       	mov	r24, r14
    1d46:	b6 01       	movw	r22, r12
    1d48:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1d4c:	89 2b       	or	r24, r25
    1d4e:	39 f4       	brne	.+14     	; 0x1d5e <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    1d50:	a5 01       	movw	r20, r10
    1d52:	88 2d       	mov	r24, r8
    1d54:	b3 01       	movw	r22, r6
    1d56:	0e 94 32 18 	call	0x3064	; 0x3064 <write_reset>
    1d5a:	18 2f       	mov	r17, r24
    1d5c:	18 c0       	rjmp	.+48     	; 0x1d8e <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    1d5e:	28 ea       	ldi	r18, 0xA8	; 168
    1d60:	35 e0       	ldi	r19, 0x05	; 5
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	8e 2d       	mov	r24, r14
    1d66:	b6 01       	movw	r22, r12
    1d68:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    1d6c:	89 2b       	or	r24, r25
    1d6e:	39 f4       	brne	.+14     	; 0x1d7e <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    1d70:	a5 01       	movw	r20, r10
    1d72:	88 2d       	mov	r24, r8
    1d74:	b3 01       	movw	r22, r6
    1d76:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <write_time>
    1d7a:	18 2f       	mov	r17, r24
    1d7c:	08 c0       	rjmp	.+16     	; 0x1d8e <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    1d7e:	26 e1       	ldi	r18, 0x16	; 22
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4d ea       	ldi	r20, 0xAD	; 173
    1d84:	55 e0       	ldi	r21, 0x05	; 5
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	c5 01       	movw	r24, r10
    1d8a:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
	}
	
}
    1d8e:	81 2f       	mov	r24, r17
    1d90:	64 96       	adiw	r28, 0x14	; 20
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	ef 90       	pop	r14
    1da4:	df 90       	pop	r13
    1da6:	cf 90       	pop	r12
    1da8:	bf 90       	pop	r11
    1daa:	af 90       	pop	r10
    1dac:	8f 90       	pop	r8
    1dae:	7f 90       	pop	r7
    1db0:	6f 90       	pop	r6
    1db2:	08 95       	ret

Disassembly of section .text.handle_methane:

00002842 <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    2842:	cf 92       	push	r12
    2844:	df 92       	push	r13
    2846:	ef 92       	push	r14
    2848:	ff 92       	push	r15
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	00 d0       	rcall	.+0      	; 0x2854 <handle_methane+0x12>
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	f4 2e       	mov	r15, r20
    285a:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    285c:	22 e0       	ldi	r18, 0x02	; 2
    285e:	44 e1       	ldi	r20, 0x14	; 20
    2860:	5f e0       	ldi	r21, 0x0F	; 15
    2862:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    2866:	18 2f       	mov	r17, r24
    2868:	88 23       	and	r24, r24
    286a:	09 f4       	brne	.+2      	; 0x286e <handle_methane+0x2c>
    286c:	6b c0       	rjmp	.+214    	; 0x2944 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    286e:	84 e1       	ldi	r24, 0x14	; 20
    2870:	9f e0       	ldi	r25, 0x0F	; 15
    2872:	6c 01       	movw	r12, r24
    2874:	20 e8       	ldi	r18, 0x80	; 128
    2876:	e2 2e       	mov	r14, r18
    2878:	25 e7       	ldi	r18, 0x75	; 117
    287a:	36 e0       	ldi	r19, 0x06	; 6
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	8e 2d       	mov	r24, r14
    2880:	b6 01       	movw	r22, r12
    2882:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    2886:	89 2b       	or	r24, r25
    2888:	79 f4       	brne	.+30     	; 0x28a8 <handle_methane+0x66>
		PM_HAL_meth_power_init();
    288a:	0e 94 12 33 	call	0x6624	; 0x6624 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	0e 94 59 32 	call	0x64b2	; 0x64b2 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    2894:	28 e1       	ldi	r18, 0x18	; 24
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	48 e7       	ldi	r20, 0x78	; 120
    289a:	56 e0       	ldi	r21, 0x06	; 6
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	8f 2d       	mov	r24, r15
    28a0:	90 2f       	mov	r25, r16
    28a2:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
    28a6:	4e c0       	rjmp	.+156    	; 0x2944 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    28a8:	20 e9       	ldi	r18, 0x90	; 144
    28aa:	36 e0       	ldi	r19, 0x06	; 6
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	8e 2d       	mov	r24, r14
    28b0:	b6 01       	movw	r22, r12
    28b2:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    28b6:	89 2b       	or	r24, r25
    28b8:	79 f4       	brne	.+30     	; 0x28d8 <handle_methane+0x96>
		PM_HAL_meth_power_init();
    28ba:	0e 94 12 33 	call	0x6624	; 0x6624 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	0e 94 59 32 	call	0x64b2	; 0x64b2 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    28c4:	29 e1       	ldi	r18, 0x19	; 25
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	44 e9       	ldi	r20, 0x94	; 148
    28ca:	56 e0       	ldi	r21, 0x06	; 6
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	8f 2d       	mov	r24, r15
    28d0:	90 2f       	mov	r25, r16
    28d2:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
    28d6:	36 c0       	rjmp	.+108    	; 0x2944 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    28d8:	2d ea       	ldi	r18, 0xAD	; 173
    28da:	36 e0       	ldi	r19, 0x06	; 6
    28dc:	40 e0       	ldi	r20, 0x00	; 0
    28de:	8e 2d       	mov	r24, r14
    28e0:	b6 01       	movw	r22, r12
    28e2:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    28e6:	89 2b       	or	r24, r25
    28e8:	21 f5       	brne	.+72     	; 0x2932 <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    28ea:	ce 01       	movw	r24, r28
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	0e 94 f5 25 	call	0x4bea	; 0x4bea <ADC_get_value>
    28f2:	88 23       	and	r24, r24
    28f4:	51 f0       	breq	.+20     	; 0x290a <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    28f6:	28 e1       	ldi	r18, 0x18	; 24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	42 eb       	ldi	r20, 0xB2	; 178
    28fc:	56 e0       	ldi	r21, 0x06	; 6
    28fe:	60 e0       	ldi	r22, 0x00	; 0
    2900:	8f 2d       	mov	r24, r15
    2902:	90 2f       	mov	r25, r16
    2904:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
    2908:	1d c0       	rjmp	.+58     	; 0x2944 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	8f 93       	push	r24
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	8f 93       	push	r24
    2912:	8a ec       	ldi	r24, 0xCA	; 202
    2914:	96 e0       	ldi	r25, 0x06	; 6
    2916:	a0 e0       	ldi	r26, 0x00	; 0
    2918:	af 93       	push	r26
    291a:	9f 93       	push	r25
    291c:	8f 93       	push	r24
    291e:	0f 93       	push	r16
    2920:	ff 92       	push	r15
    2922:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	09 c0       	rjmp	.+18     	; 0x2944 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2932:	26 e1       	ldi	r18, 0x16	; 22
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	41 ed       	ldi	r20, 0xD1	; 209
    2938:	56 e0       	ldi	r21, 0x06	; 6
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	8f 2d       	mov	r24, r15
    293e:	90 2f       	mov	r25, r16
    2940:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
	}
	return false;
}
    2944:	81 2f       	mov	r24, r17
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
    2952:	ff 90       	pop	r15
    2954:	ef 90       	pop	r14
    2956:	df 90       	pop	r13
    2958:	cf 90       	pop	r12
    295a:	08 95       	ret

Disassembly of section .text.handle_co2:

00003a6a <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    3a6a:	ff 92       	push	r15
    3a6c:	0f 93       	push	r16
    3a6e:	1f 93       	push	r17
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	00 d0       	rcall	.+0      	; 0x3a76 <handle_co2+0xc>
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	f4 2e       	mov	r15, r20
    3a7c:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    3a7e:	22 e0       	ldi	r18, 0x02	; 2
    3a80:	44 e1       	ldi	r20, 0x14	; 20
    3a82:	5f e0       	ldi	r21, 0x0F	; 15
    3a84:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    3a88:	18 2f       	mov	r17, r24
    3a8a:	88 23       	and	r24, r24
    3a8c:	b9 f1       	breq	.+110    	; 0x3afc <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    3a8e:	64 e1       	ldi	r22, 0x14	; 20
    3a90:	7f e0       	ldi	r23, 0x0F	; 15
    3a92:	80 e8       	ldi	r24, 0x80	; 128
    3a94:	2d ea       	ldi	r18, 0xAD	; 173
    3a96:	36 e0       	ldi	r19, 0x06	; 6
    3a98:	40 e0       	ldi	r20, 0x00	; 0
    3a9a:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    3a9e:	89 2b       	or	r24, r25
    3aa0:	21 f5       	brne	.+72     	; 0x3aea <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    3aa2:	ce 01       	movw	r24, r28
    3aa4:	01 96       	adiw	r24, 0x01	; 1
    3aa6:	0e 94 db 31 	call	0x63b6	; 0x63b6 <SCD30_get_reading>
    3aaa:	88 23       	and	r24, r24
    3aac:	51 f0       	breq	.+20     	; 0x3ac2 <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    3aae:	28 e1       	ldi	r18, 0x18	; 24
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	42 eb       	ldi	r20, 0xB2	; 178
    3ab4:	56 e0       	ldi	r21, 0x06	; 6
    3ab6:	60 e0       	ldi	r22, 0x00	; 0
    3ab8:	8f 2d       	mov	r24, r15
    3aba:	90 2f       	mov	r25, r16
    3abc:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
    3ac0:	1d c0       	rjmp	.+58     	; 0x3afc <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	8f 93       	push	r24
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
    3ac8:	8f 93       	push	r24
    3aca:	8a ec       	ldi	r24, 0xCA	; 202
    3acc:	96 e0       	ldi	r25, 0x06	; 6
    3ace:	a0 e0       	ldi	r26, 0x00	; 0
    3ad0:	af 93       	push	r26
    3ad2:	9f 93       	push	r25
    3ad4:	8f 93       	push	r24
    3ad6:	0f 93       	push	r16
    3ad8:	ff 92       	push	r15
    3ada:	0e 94 49 2a 	call	0x5492	; 0x5492 <sprintf>
    3ade:	0f b6       	in	r0, 0x3f	; 63
    3ae0:	f8 94       	cli
    3ae2:	de bf       	out	0x3e, r29	; 62
    3ae4:	0f be       	out	0x3f, r0	; 63
    3ae6:	cd bf       	out	0x3d, r28	; 61
    3ae8:	09 c0       	rjmp	.+18     	; 0x3afc <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3aea:	26 e1       	ldi	r18, 0x16	; 22
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	41 ed       	ldi	r20, 0xD1	; 209
    3af0:	56 e0       	ldi	r21, 0x06	; 6
    3af2:	60 e0       	ldi	r22, 0x00	; 0
    3af4:	8f 2d       	mov	r24, r15
    3af6:	90 2f       	mov	r25, r16
    3af8:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
	}
}
    3afc:	81 2f       	mov	r24, r17
    3afe:	0f 90       	pop	r0
    3b00:	0f 90       	pop	r0
    3b02:	df 91       	pop	r29
    3b04:	cf 91       	pop	r28
    3b06:	1f 91       	pop	r17
    3b08:	0f 91       	pop	r16
    3b0a:	ff 90       	pop	r15
    3b0c:	08 95       	ret

Disassembly of section .text.handle_pump:

00003b0e <handle_pump>:

static bool handle_pump(const char cmd[], char res[]){
    3b0e:	cf 92       	push	r12
    3b10:	df 92       	push	r13
    3b12:	ef 92       	push	r14
    3b14:	0f 93       	push	r16
    3b16:	1f 93       	push	r17
    3b18:	cf 93       	push	r28
    3b1a:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 2)) return false;
    3b1c:	22 e0       	ldi	r18, 0x02	; 2
    3b1e:	44 e1       	ldi	r20, 0x14	; 20
    3b20:	5f e0       	ldi	r21, 0x0F	; 15
    3b22:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    3b26:	c8 2f       	mov	r28, r24
    3b28:	88 23       	and	r24, r24
    3b2a:	d9 f1       	breq	.+118    	; 0x3ba2 <handle_pump+0x94>
	
	if(strcmp(par, PUMP_ON)==0){
    3b2c:	84 e1       	ldi	r24, 0x14	; 20
    3b2e:	9f e0       	ldi	r25, 0x0F	; 15
    3b30:	6c 01       	movw	r12, r24
    3b32:	20 e8       	ldi	r18, 0x80	; 128
    3b34:	e2 2e       	mov	r14, r18
    3b36:	25 e7       	ldi	r18, 0x75	; 117
    3b38:	36 e0       	ldi	r19, 0x06	; 6
    3b3a:	40 e0       	ldi	r20, 0x00	; 0
    3b3c:	8e 2d       	mov	r24, r14
    3b3e:	b6 01       	movw	r22, r12
    3b40:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    3b44:	89 2b       	or	r24, r25
    3b46:	71 f4       	brne	.+28     	; 0x3b64 <handle_pump+0x56>
		PM_HAL_BC_power_init();
    3b48:	0e 94 20 33 	call	0x6640	; 0x6640 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(true);
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	0e 94 6d 32 	call	0x64da	; 0x64da <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump on");
    3b52:	25 e1       	ldi	r18, 0x15	; 21
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	47 ee       	ldi	r20, 0xE7	; 231
    3b58:	56 e0       	ldi	r21, 0x06	; 6
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	c8 01       	movw	r24, r16
    3b5e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
    3b62:	1f c0       	rjmp	.+62     	; 0x3ba2 <handle_pump+0x94>
	}else if(strcmp(par, PUMP_OFF)==0){
    3b64:	20 e9       	ldi	r18, 0x90	; 144
    3b66:	36 e0       	ldi	r19, 0x06	; 6
    3b68:	40 e0       	ldi	r20, 0x00	; 0
    3b6a:	8e 2d       	mov	r24, r14
    3b6c:	b6 01       	movw	r22, r12
    3b6e:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    3b72:	89 2b       	or	r24, r25
    3b74:	71 f4       	brne	.+28     	; 0x3b92 <handle_pump+0x84>
		PM_HAL_BC_power_init();
    3b76:	0e 94 20 33 	call	0x6640	; 0x6640 <PM_HAL_BC_power_init>
		PM_HAL_BC_power(false);
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	0e 94 6d 32 	call	0x64da	; 0x64da <PM_HAL_BC_power>
		
		strcpy(res, "Power to air pump off");
    3b80:	26 e1       	ldi	r18, 0x16	; 22
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	4c ef       	ldi	r20, 0xFC	; 252
    3b86:	56 e0       	ldi	r21, 0x06	; 6
    3b88:	60 e0       	ldi	r22, 0x00	; 0
    3b8a:	c8 01       	movw	r24, r16
    3b8c:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
    3b90:	08 c0       	rjmp	.+16     	; 0x3ba2 <handle_pump+0x94>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3b92:	26 e1       	ldi	r18, 0x16	; 22
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	41 ed       	ldi	r20, 0xD1	; 209
    3b98:	56 e0       	ldi	r21, 0x06	; 6
    3b9a:	60 e0       	ldi	r22, 0x00	; 0
    3b9c:	c8 01       	movw	r24, r16
    3b9e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
	}
}
    3ba2:	8c 2f       	mov	r24, r28
    3ba4:	cf 91       	pop	r28
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	ef 90       	pop	r14
    3bac:	df 90       	pop	r13
    3bae:	cf 90       	pop	r12
    3bb0:	08 95       	ret

Disassembly of section .text.handle_sample:

000037ae <handle_sample>:

static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);
static bool handle_pump(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    37ae:	6f 92       	push	r6
    37b0:	7f 92       	push	r7
    37b2:	8f 92       	push	r8
    37b4:	cf 92       	push	r12
    37b6:	df 92       	push	r13
    37b8:	ef 92       	push	r14
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	3b 01       	movw	r6, r22
    37c2:	88 2e       	mov	r8, r24
    37c4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    37c6:	21 e0       	ldi	r18, 0x01	; 1
    37c8:	44 e1       	ldi	r20, 0x14	; 20
    37ca:	5f e0       	ldi	r21, 0x0F	; 15
    37cc:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_parameter>
    37d0:	c8 2f       	mov	r28, r24
    37d2:	88 23       	and	r24, r24
    37d4:	e9 f1       	breq	.+122    	; 0x3850 <handle_sample+0xa2>
	
	if(strcmp(par, S_METH)==0){
    37d6:	84 e1       	ldi	r24, 0x14	; 20
    37d8:	9f e0       	ldi	r25, 0x0F	; 15
    37da:	6c 01       	movw	r12, r24
    37dc:	20 e8       	ldi	r18, 0x80	; 128
    37de:	e2 2e       	mov	r14, r18
    37e0:	22 e1       	ldi	r18, 0x12	; 18
    37e2:	37 e0       	ldi	r19, 0x07	; 7
    37e4:	40 e0       	ldi	r20, 0x00	; 0
    37e6:	8e 2d       	mov	r24, r14
    37e8:	b6 01       	movw	r22, r12
    37ea:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    37ee:	89 2b       	or	r24, r25
    37f0:	39 f4       	brne	.+14     	; 0x3800 <handle_sample+0x52>
		return handle_methane(cmd, res);
    37f2:	a8 01       	movw	r20, r16
    37f4:	88 2d       	mov	r24, r8
    37f6:	b3 01       	movw	r22, r6
    37f8:	0e 94 21 14 	call	0x2842	; 0x2842 <handle_methane>
    37fc:	c8 2f       	mov	r28, r24
    37fe:	28 c0       	rjmp	.+80     	; 0x3850 <handle_sample+0xa2>
	}else if(strcmp(par, S_CO2)==0){
    3800:	27 e1       	ldi	r18, 0x17	; 23
    3802:	37 e0       	ldi	r19, 0x07	; 7
    3804:	40 e0       	ldi	r20, 0x00	; 0
    3806:	8e 2d       	mov	r24, r14
    3808:	b6 01       	movw	r22, r12
    380a:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    380e:	89 2b       	or	r24, r25
    3810:	39 f4       	brne	.+14     	; 0x3820 <handle_sample+0x72>
		return handle_co2(cmd, res);
    3812:	a8 01       	movw	r20, r16
    3814:	88 2d       	mov	r24, r8
    3816:	b3 01       	movw	r22, r6
    3818:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <handle_co2>
    381c:	c8 2f       	mov	r28, r24
    381e:	18 c0       	rjmp	.+48     	; 0x3850 <handle_sample+0xa2>
	}else if(strcmp(par, S_PUMP)==0){
    3820:	2b e1       	ldi	r18, 0x1B	; 27
    3822:	37 e0       	ldi	r19, 0x07	; 7
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	8e 2d       	mov	r24, r14
    3828:	b6 01       	movw	r22, r12
    382a:	0e 94 14 2b 	call	0x5628	; 0x5628 <strcmp>
    382e:	89 2b       	or	r24, r25
    3830:	39 f4       	brne	.+14     	; 0x3840 <handle_sample+0x92>
		return handle_pump(cmd, res);
    3832:	a8 01       	movw	r20, r16
    3834:	88 2d       	mov	r24, r8
    3836:	b3 01       	movw	r22, r6
    3838:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <handle_pump>
    383c:	c8 2f       	mov	r28, r24
    383e:	08 c0       	rjmp	.+16     	; 0x3850 <handle_sample+0xa2>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    3840:	26 e1       	ldi	r18, 0x16	; 22
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	41 ed       	ldi	r20, 0xD1	; 209
    3846:	56 e0       	ldi	r21, 0x06	; 6
    3848:	60 e0       	ldi	r22, 0x00	; 0
    384a:	c8 01       	movw	r24, r16
    384c:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <memcpy>
		return true;
	}
}
    3850:	8c 2f       	mov	r24, r28
    3852:	cf 91       	pop	r28
    3854:	1f 91       	pop	r17
    3856:	0f 91       	pop	r16
    3858:	ef 90       	pop	r14
    385a:	df 90       	pop	r13
    385c:	cf 90       	pop	r12
    385e:	8f 90       	pop	r8
    3860:	7f 90       	pop	r7
    3862:	6f 90       	pop	r6
    3864:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00005fa4 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    5fa4:	0e 94 bd 32 	call	0x657a	; 0x657a <TWI_HAL_init>
	PM_HAL_adc_power_init();
    5fa8:	0e 94 0b 33 	call	0x6616	; 0x6616 <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    5fac:	81 e0       	ldi	r24, 0x01	; 1
    5fae:	0e 94 4f 32 	call	0x649e	; 0x649e <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    5fb2:	0e 94 19 33 	call	0x6632	; 0x6632 <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    5fb6:	81 e0       	ldi	r24, 0x01	; 1
    5fb8:	0e 94 63 32 	call	0x64c6	; 0x64c6 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    5fbc:	0e 94 74 30 	call	0x60e8	; 0x60e8 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    5fc0:	88 23       	and	r24, r24
    5fc2:	11 f0       	breq	.+4      	; 0x5fc8 <init_methane_SCD30+0x24>
    5fc4:	80 e0       	ldi	r24, 0x00	; 0
    5fc6:	08 95       	ret
	return true;
    5fc8:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    5fca:	08 95       	ret

Disassembly of section .text.count_parameters:

00004d3e <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    4d3e:	6f 92       	push	r6
    4d40:	7f 92       	push	r7
    4d42:	8f 92       	push	r8
    4d44:	cf 92       	push	r12
    4d46:	df 92       	push	r13
    4d48:	ef 92       	push	r14
    4d4a:	3b 01       	movw	r6, r22
    4d4c:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    4d4e:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    4d52:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4d54:	20 e0       	ldi	r18, 0x00	; 0
    4d56:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    4d58:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    4d5a:	10 c0       	rjmp	.+32     	; 0x4d7c <count_parameters+0x3e>
	{
		if(src[i]==' '){
    4d5c:	e8 2c       	mov	r14, r8
    4d5e:	63 01       	movw	r12, r6
    4d60:	c2 0e       	add	r12, r18
    4d62:	d3 1e       	adc	r13, r19
    4d64:	e1 1c       	adc	r14, r1
    4d66:	37 fd       	sbrc	r19, 7
    4d68:	ea 94       	dec	r14
    4d6a:	f6 01       	movw	r30, r12
    4d6c:	94 91       	lpm	r25, Z
    4d6e:	e7 fc       	sbrc	r14, 7
    4d70:	90 81       	ld	r25, Z
    4d72:	90 32       	cpi	r25, 0x20	; 32
    4d74:	09 f4       	brne	.+2      	; 0x4d78 <count_parameters+0x3a>
			cnt++;
    4d76:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    4d78:	2f 5f       	subi	r18, 0xFF	; 255
    4d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7c:	26 17       	cp	r18, r22
    4d7e:	37 07       	cpc	r19, r23
    4d80:	68 f3       	brcs	.-38     	; 0x4d5c <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    4d82:	ef 90       	pop	r14
    4d84:	df 90       	pop	r13
    4d86:	cf 90       	pop	r12
    4d88:	8f 90       	pop	r8
    4d8a:	7f 90       	pop	r7
    4d8c:	6f 90       	pop	r6
    4d8e:	08 95       	ret

Disassembly of section .text.par_index:

00004616 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    4616:	cf 92       	push	r12
    4618:	df 92       	push	r13
    461a:	ef 92       	push	r14
    461c:	0f 93       	push	r16
    461e:	1f 93       	push	r17
    4620:	cf 93       	push	r28
    4622:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4624:	44 23       	and	r20, r20
    4626:	29 f1       	breq	.+74     	; 0x4672 <par_index+0x5c>
    4628:	04 2f       	mov	r16, r20
    462a:	6b 01       	movw	r12, r22
    462c:	e8 2e       	mov	r14, r24
    462e:	c0 e0       	ldi	r28, 0x00	; 0
    4630:	d0 e0       	ldi	r29, 0x00	; 0
    4632:	10 e0       	ldi	r17, 0x00	; 0
    4634:	14 c0       	rjmp	.+40     	; 0x465e <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    4636:	ae 2d       	mov	r26, r14
    4638:	c6 01       	movw	r24, r12
    463a:	8c 0f       	add	r24, r28
    463c:	9d 1f       	adc	r25, r29
    463e:	a1 1d       	adc	r26, r1
    4640:	d7 fd       	sbrc	r29, 7
    4642:	aa 95       	dec	r26
    4644:	fc 01       	movw	r30, r24
    4646:	84 91       	lpm	r24, Z
    4648:	a7 fd       	sbrc	r26, 7
    464a:	80 81       	ld	r24, Z
    464c:	80 32       	cpi	r24, 0x20	; 32
    464e:	31 f4       	brne	.+12     	; 0x465c <par_index+0x46>
			cnt++;
    4650:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    4652:	01 13       	cpse	r16, r17
    4654:	03 c0       	rjmp	.+6      	; 0x465c <par_index+0x46>
				return i+1;
    4656:	ce 01       	movw	r24, r28
    4658:	01 96       	adiw	r24, 0x01	; 1
    465a:	0d c0       	rjmp	.+26     	; 0x4676 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    465c:	21 96       	adiw	r28, 0x01	; 1
    465e:	8e 2d       	mov	r24, r14
    4660:	b6 01       	movw	r22, r12
    4662:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    4666:	c8 17       	cp	r28, r24
    4668:	d9 07       	cpc	r29, r25
    466a:	28 f3       	brcs	.-54     	; 0x4636 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    466c:	80 e0       	ldi	r24, 0x00	; 0
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	02 c0       	rjmp	.+4      	; 0x4676 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    4676:	df 91       	pop	r29
    4678:	cf 91       	pop	r28
    467a:	1f 91       	pop	r17
    467c:	0f 91       	pop	r16
    467e:	ef 90       	pop	r14
    4680:	df 90       	pop	r13
    4682:	cf 90       	pop	r12
    4684:	08 95       	ret

Disassembly of section .text.get_parameter:

00003e22 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    3e22:	8f 92       	push	r8
    3e24:	9f 92       	push	r9
    3e26:	af 92       	push	r10
    3e28:	cf 92       	push	r12
    3e2a:	df 92       	push	r13
    3e2c:	ef 92       	push	r14
    3e2e:	ff 92       	push	r15
    3e30:	0f 93       	push	r16
    3e32:	1f 93       	push	r17
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
    3e38:	6b 01       	movw	r12, r22
    3e3a:	e8 2e       	mov	r14, r24
    3e3c:	ea 01       	movw	r28, r20
    3e3e:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    3e40:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <count_parameters>
	if(pars<parNo) return false;
    3e44:	8f 15       	cp	r24, r15
    3e46:	58 f1       	brcs	.+86     	; 0x3e9e <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    3e48:	8e 2d       	mov	r24, r14
    3e4a:	b6 01       	movw	r22, r12
    3e4c:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    3e50:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    3e52:	4f 2d       	mov	r20, r15
    3e54:	8e 2d       	mov	r24, r14
    3e56:	b6 01       	movw	r22, r12
    3e58:	0e 94 0b 23 	call	0x4616	; 0x4616 <par_index>
	uint8_t parLen=0;
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    3e5e:	15 c0       	rjmp	.+42     	; 0x3e8a <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    3e60:	46 01       	movw	r8, r12
    3e62:	ae 2c       	mov	r10, r14
    3e64:	82 0e       	add	r8, r18
    3e66:	93 1e       	adc	r9, r19
    3e68:	a1 1c       	adc	r10, r1
    3e6a:	37 fd       	sbrc	r19, 7
    3e6c:	aa 94       	dec	r10
    3e6e:	4a 2d       	mov	r20, r10
    3e70:	94 01       	movw	r18, r8
    3e72:	f4 01       	movw	r30, r8
    3e74:	24 91       	lpm	r18, Z
    3e76:	47 fd       	sbrc	r20, 7
    3e78:	20 81       	ld	r18, Z
    3e7a:	20 32       	cpi	r18, 0x20	; 32
    3e7c:	59 f0       	breq	.+22     	; 0x3e94 <get_parameter+0x72>
		par[parLen++]=src[i];
    3e7e:	fe 01       	movw	r30, r28
    3e80:	e9 0f       	add	r30, r25
    3e82:	f1 1d       	adc	r31, r1
    3e84:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3e86:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    3e88:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    3e8a:	28 2f       	mov	r18, r24
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	20 17       	cp	r18, r16
    3e90:	31 07       	cpc	r19, r17
    3e92:	30 f3       	brcs	.-52     	; 0x3e60 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    3e94:	c9 0f       	add	r28, r25
    3e96:	d1 1d       	adc	r29, r1
    3e98:	18 82       	st	Y, r1
	
	return true;
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	01 c0       	rjmp	.+2      	; 0x3ea0 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    3ea0:	df 91       	pop	r29
    3ea2:	cf 91       	pop	r28
    3ea4:	1f 91       	pop	r17
    3ea6:	0f 91       	pop	r16
    3ea8:	ff 90       	pop	r15
    3eaa:	ef 90       	pop	r14
    3eac:	df 90       	pop	r13
    3eae:	cf 90       	pop	r12
    3eb0:	af 90       	pop	r10
    3eb2:	9f 90       	pop	r9
    3eb4:	8f 90       	pop	r8
    3eb6:	08 95       	ret

Disassembly of section .text.decode_stage_response:

00006472 <decode_stage_response>:

/************************************************************************/
/* Helper functions                                                     */
/************************************************************************/
static MAINPG_STATES decode_stage_response(STAGE_STATUS status, MAINPG_STATES onDone){
	switch(status){
    6472:	88 23       	and	r24, r24
    6474:	19 f0       	breq	.+6      	; 0x647c <decode_stage_response+0xa>
    6476:	81 30       	cpi	r24, 0x01	; 1
    6478:	29 f0       	breq	.+10     	; 0x6484 <decode_stage_response+0x12>
    647a:	02 c0       	rjmp	.+4      	; 0x6480 <decode_stage_response+0xe>
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
    647c:	81 e1       	ldi	r24, 0x11	; 17
    647e:	08 95       	ret
		
		case STAGE_DONE:
			return onDone;
			
		default:
			return MAINPG_FATAL_ERROR;
    6480:	86 e1       	ldi	r24, 0x16	; 22
    6482:	08 95       	ret
	switch(status){
		case STAGE_RUNNING:
			return MAINPG_SEND_DATA;
		
		case STAGE_DONE:
			return onDone;
    6484:	86 2f       	mov	r24, r22
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6486:	08 95       	ret

Disassembly of section .text.decode_join_response:

0000634c <decode_join_response>:
	
	return LM_join_network(deveui, appeui, appkey);
}

static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
    634c:	82 30       	cpi	r24, 0x02	; 2
    634e:	51 f0       	breq	.+20     	; 0x6364 <decode_join_response+0x18>
    6350:	83 30       	cpi	r24, 0x03	; 3
    6352:	21 f0       	breq	.+8      	; 0x635c <decode_join_response+0x10>
    6354:	81 11       	cpse	r24, r1
    6356:	04 c0       	rjmp	.+8      	; 0x6360 <decode_join_response+0x14>
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
    6358:	83 e0       	ldi	r24, 0x03	; 3
    635a:	08 95       	ret
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
    635c:	85 e0       	ldi	r24, 0x05	; 5
    635e:	08 95       	ret
		default:
			return MAINPG_FATAL_ERROR;		
    6360:	86 e1       	ldi	r24, 0x16	; 22
    6362:	08 95       	ret
static MAINPG_STATES decode_join_response(LM_STATUS status){
	switch(status){
		case LM_STATUS_SUCCESS:
			return MAINPG_LORA_JOIN_SUCCESS;
		case LM_STATUS_TRY_AGAIN:
			return MAINPG_LORA_JOIN_TRY_AGAIN;
    6364:	84 e0       	ldi	r24, 0x04	; 4
		case LM_STATUS_CONF_ERR:
			return MAINPG_CONF_ERR;
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}
    6366:	08 95       	ret

Disassembly of section .text.decode_header_tail_response:

00006266 <decode_header_tail_response>:
	MRPP_get_tail_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
    6266:	82 30       	cpi	r24, 0x02	; 2
    6268:	49 f0       	breq	.+18     	; 0x627c <decode_header_tail_response+0x16>
    626a:	18 f4       	brcc	.+6      	; 0x6272 <decode_header_tail_response+0xc>
    626c:	88 23       	and	r24, r24
    626e:	41 f0       	breq	.+16     	; 0x6280 <decode_header_tail_response+0x1a>
    6270:	03 c0       	rjmp	.+6      	; 0x6278 <decode_header_tail_response+0x12>
    6272:	84 50       	subi	r24, 0x04	; 4
    6274:	82 30       	cpi	r24, 0x02	; 2
    6276:	20 f0       	brcs	.+8      	; 0x6280 <decode_header_tail_response+0x1a>
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
    6278:	86 e1       	ldi	r24, 0x16	; 22
    627a:	08 95       	ret
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
			
		case LM_STATUS_TRY_AGAIN:
			return tryAgain;
    627c:	84 2f       	mov	r24, r20
    627e:	08 95       	ret
static MAINPG_STATES decode_header_tail_response(LM_STATUS status, MAINPG_STATES success, MAINPG_STATES tryAgain){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			return success;
    6280:	86 2f       	mov	r24, r22
			return tryAgain;
			
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    6282:	08 95       	ret

Disassembly of section .text.read_eeprom:

00004ae0 <read_eeprom>:

static bool read_eeprom(){
	EM_get_deveui(deveui);
    4ae0:	89 e3       	ldi	r24, 0x39	; 57
    4ae2:	9f e0       	ldi	r25, 0x0F	; 15
    4ae4:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <EM_get_deveui>
	EM_get_appeui(appeui);
    4ae8:	88 e2       	ldi	r24, 0x28	; 40
    4aea:	9f e0       	ldi	r25, 0x0F	; 15
    4aec:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <EM_get_appeui>
	EM_get_appkey(appkey);
    4af0:	83 ef       	ldi	r24, 0xF3	; 243
    4af2:	9e e0       	ldi	r25, 0x0E	; 14
    4af4:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <EM_get_appkey>
	EM_get_collections(cols, COLS_BYTE_SIZE);
    4af8:	63 e2       	ldi	r22, 0x23	; 35
    4afa:	80 ed       	ldi	r24, 0xD0	; 208
    4afc:	9e e0       	ldi	r25, 0x0E	; 14
    4afe:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <EM_get_collections>
	EM_get_Vcc(&vccx);
    4b02:	83 e7       	ldi	r24, 0x73	; 115
    4b04:	9f e0       	ldi	r25, 0x0F	; 15
    4b06:	0e 94 24 31 	call	0x6248	; 0x6248 <EM_get_Vcc>
	EM_get_RRL(&rrlx);
    4b0a:	8f e6       	ldi	r24, 0x6F	; 111
    4b0c:	9f e0       	ldi	r25, 0x0F	; 15
    4b0e:	0e 94 15 31 	call	0x622a	; 0x622a <EM_get_RRL>
	EM_get_ppmfactor(&ppmx);
    4b12:	8b e6       	ldi	r24, 0x6B	; 107
    4b14:	9f e0       	ldi	r25, 0x0F	; 15
    4b16:	0e 94 06 31 	call	0x620c	; 0x620c <EM_get_ppmfactor>
	methHeatUpTime=EM_get_heat_up_time();
    4b1a:	0e 94 be 33 	call	0x677c	; 0x677c <EM_get_heat_up_time>
    4b1e:	80 93 ab 0f 	sts	0x0FAB, r24	; 0x800fab <methHeatUpTime>
	airPumpTime=EM_get_air_pump_time();
    4b22:	0e 94 ca 33 	call	0x6794	; 0x6794 <EM_get_air_pump_time>
    4b26:	90 93 92 0f 	sts	0x0F92, r25	; 0x800f92 <airPumpTime+0x1>
    4b2a:	80 93 91 0f 	sts	0x0F91, r24	; 0x800f91 <airPumpTime>
	samplingProcessInterval=EM_get_sp_interval();
    4b2e:	0e 94 d6 33 	call	0x67ac	; 0x67ac <EM_get_sp_interval>
    4b32:	80 93 aa 0f 	sts	0x0FAA, r24	; 0x800faa <samplingProcessInterval>
	return true;
}
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	08 95       	ret

Disassembly of section .text.join_lora:

000065b0 <join_lora>:
}

static LM_STATUS join_lora(){
	
	
	return LM_join_network(deveui, appeui, appkey);
    65b0:	43 ef       	ldi	r20, 0xF3	; 243
    65b2:	5e e0       	ldi	r21, 0x0E	; 14
    65b4:	68 e2       	ldi	r22, 0x28	; 40
    65b6:	7f e0       	ldi	r23, 0x0F	; 15
    65b8:	89 e3       	ldi	r24, 0x39	; 57
    65ba:	9f e0       	ldi	r25, 0x0F	; 15
    65bc:	0e 94 8a 34 	call	0x6914	; 0x6914 <LM_join_network>
}
    65c0:	08 95       	ret

Disassembly of section .text.set_wakeup:

0000687e <set_wakeup>:
	}
}

static RTC_STATUS set_wakeup(){
	//return RTC_set_wake_up_interrupt(samplingProcessInterval);
	return RTC_set_wake_up_interrupt_minutes(samplingProcessInterval);
    687e:	80 91 aa 0f 	lds	r24, 0x0FAA	; 0x800faa <samplingProcessInterval>
    6882:	0e 94 b9 1a 	call	0x3572	; 0x3572 <RTC_set_wake_up_interrupt_minutes>
}
    6886:	08 95       	ret

Disassembly of section .text.send_header:

000056ea <send_header>:
		default:
			return MAINPG_FATAL_ERROR;
	}
}

static LM_STATUS send_header(){
    56ea:	cf 93       	push	r28
    56ec:	df 93       	push	r29
    56ee:	cd b7       	in	r28, 0x3d	; 61
    56f0:	de b7       	in	r29, 0x3e	; 62
    56f2:	e4 97       	sbiw	r28, 0x34	; 52
    56f4:	0f b6       	in	r0, 0x3f	; 63
    56f6:	f8 94       	cli
    56f8:	de bf       	out	0x3e, r29	; 62
    56fa:	0f be       	out	0x3f, r0	; 63
    56fc:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_header_package(package, &package_length);
    56fe:	be 01       	movw	r22, r28
    5700:	6c 5c       	subi	r22, 0xCC	; 204
    5702:	7f 4f       	sbci	r23, 0xFF	; 255
    5704:	ce 01       	movw	r24, r28
    5706:	01 96       	adiw	r24, 0x01	; 1
    5708:	0e 94 52 30 	call	0x60a4	; 0x60a4 <MRPP_get_header_package>
	return LM_send_uplink(package, package_length);
    570c:	6c a9       	ldd	r22, Y+52	; 0x34
    570e:	ce 01       	movw	r24, r28
    5710:	01 96       	adiw	r24, 0x01	; 1
    5712:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <LM_send_uplink>
}
    5716:	e4 96       	adiw	r28, 0x34	; 52
    5718:	0f b6       	in	r0, 0x3f	; 63
    571a:	f8 94       	cli
    571c:	de bf       	out	0x3e, r29	; 62
    571e:	0f be       	out	0x3f, r0	; 63
    5720:	cd bf       	out	0x3d, r28	; 61
    5722:	df 91       	pop	r29
    5724:	cf 91       	pop	r28
    5726:	08 95       	ret

Disassembly of section .text.send_body:

000056aa <send_body>:
		default:
			return MAINPG_FATAL_ERROR;		
	}	
}

static LM_STATUS send_body(int16_t bodyIndex){
    56aa:	cf 93       	push	r28
    56ac:	df 93       	push	r29
    56ae:	cd b7       	in	r28, 0x3d	; 61
    56b0:	de b7       	in	r29, 0x3e	; 62
    56b2:	e4 97       	sbiw	r28, 0x34	; 52
    56b4:	0f b6       	in	r0, 0x3f	; 63
    56b6:	f8 94       	cli
    56b8:	de bf       	out	0x3e, r29	; 62
    56ba:	0f be       	out	0x3f, r0	; 63
    56bc:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_ready_body_package(bodyIndex, package, &package_length);
    56be:	ae 01       	movw	r20, r28
    56c0:	4c 5c       	subi	r20, 0xCC	; 204
    56c2:	5f 4f       	sbci	r21, 0xFF	; 255
    56c4:	be 01       	movw	r22, r28
    56c6:	6f 5f       	subi	r22, 0xFF	; 255
    56c8:	7f 4f       	sbci	r23, 0xFF	; 255
    56ca:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <MRPP_get_ready_body_package>
	return LM_send_uplink(package, package_length);
    56ce:	6c a9       	ldd	r22, Y+52	; 0x34
    56d0:	ce 01       	movw	r24, r28
    56d2:	01 96       	adiw	r24, 0x01	; 1
    56d4:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <LM_send_uplink>
}
    56d8:	e4 96       	adiw	r28, 0x34	; 52
    56da:	0f b6       	in	r0, 0x3f	; 63
    56dc:	f8 94       	cli
    56de:	de bf       	out	0x3e, r29	; 62
    56e0:	0f be       	out	0x3f, r0	; 63
    56e2:	cd bf       	out	0x3d, r28	; 61
    56e4:	df 91       	pop	r29
    56e6:	cf 91       	pop	r28
    56e8:	08 95       	ret

Disassembly of section .text.decode_body_response:

00005fcc <decode_body_response>:

static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
    5fcc:	cf 93       	push	r28
	switch(status){
    5fce:	62 30       	cpi	r22, 0x02	; 2
    5fd0:	71 f0       	breq	.+28     	; 0x5fee <decode_body_response+0x22>
    5fd2:	18 f4       	brcc	.+6      	; 0x5fda <decode_body_response+0xe>
    5fd4:	66 23       	and	r22, r22
    5fd6:	31 f0       	breq	.+12     	; 0x5fe4 <decode_body_response+0x18>
    5fd8:	03 c0       	rjmp	.+6      	; 0x5fe0 <decode_body_response+0x14>
    5fda:	64 50       	subi	r22, 0x04	; 4
    5fdc:	62 30       	cpi	r22, 0x02	; 2
    5fde:	10 f0       	brcs	.+4      	; 0x5fe4 <decode_body_response+0x18>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
		
		default:
			return MAINPG_FATAL_ERROR;
    5fe0:	86 e1       	ldi	r24, 0x16	; 22
    5fe2:	06 c0       	rjmp	.+12     	; 0x5ff0 <decode_body_response+0x24>
    5fe4:	c4 2f       	mov	r28, r20
static MAINPG_STATES decode_body_response(int16_t bodyIndex, LM_STATUS status, MAINPG_STATES success){
	switch(status){
		case LM_STATUS_SUCCESS:
		case LM_STATUS_MAC_ERR:
		case LM_STATUS_INV_DATA_LEN:
			MRPP_set_body_sent(bodyIndex);
    5fe6:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <MRPP_set_body_sent>
			return success;
    5fea:	8c 2f       	mov	r24, r28
    5fec:	01 c0       	rjmp	.+2      	; 0x5ff0 <decode_body_response+0x24>
		
		case LM_STATUS_TRY_AGAIN:
			return success;
    5fee:	84 2f       	mov	r24, r20
		
		default:
			return MAINPG_FATAL_ERROR;
	}
}
    5ff0:	cf 91       	pop	r28
    5ff2:	08 95       	ret

Disassembly of section .text.send_tail:

00005728 <send_tail>:
	
	MRPP_get_header_package(package, &package_length);
	return LM_send_uplink(package, package_length);
}

static LM_STATUS send_tail(){
    5728:	cf 93       	push	r28
    572a:	df 93       	push	r29
    572c:	cd b7       	in	r28, 0x3d	; 61
    572e:	de b7       	in	r29, 0x3e	; 62
    5730:	e4 97       	sbiw	r28, 0x34	; 52
    5732:	0f b6       	in	r0, 0x3f	; 63
    5734:	f8 94       	cli
    5736:	de bf       	out	0x3e, r29	; 62
    5738:	0f be       	out	0x3f, r0	; 63
    573a:	cd bf       	out	0x3d, r28	; 61
	uint8_t package[51];
	uint8_t package_length;
	
	MRPP_get_tail_package(package, &package_length);
    573c:	be 01       	movw	r22, r28
    573e:	6c 5c       	subi	r22, 0xCC	; 204
    5740:	7f 4f       	sbci	r23, 0xFF	; 255
    5742:	ce 01       	movw	r24, r28
    5744:	01 96       	adiw	r24, 0x01	; 1
    5746:	0e 94 63 30 	call	0x60c6	; 0x60c6 <MRPP_get_tail_package>
	return LM_send_uplink(package, package_length);
    574a:	6c a9       	ldd	r22, Y+52	; 0x34
    574c:	ce 01       	movw	r24, r28
    574e:	01 96       	adiw	r24, 0x01	; 1
    5750:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <LM_send_uplink>
}
    5754:	e4 96       	adiw	r28, 0x34	; 52
    5756:	0f b6       	in	r0, 0x3f	; 63
    5758:	f8 94       	cli
    575a:	de bf       	out	0x3e, r29	; 62
    575c:	0f be       	out	0x3f, r0	; 63
    575e:	cd bf       	out	0x3d, r28	; 61
    5760:	df 91       	pop	r29
    5762:	cf 91       	pop	r28
    5764:	08 95       	ret

Disassembly of section .text.send_msg:

00006400 <send_msg>:

/************************************************************************/
/* Test functions                                                       */
/************************************************************************/
static void send_msg(const char msg[]){
	uart1_hal_send_string(msg);
    6400:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <uart1_hal_send_string>
    6404:	2f ef       	ldi	r18, 0xFF	; 255
    6406:	80 e7       	ldi	r24, 0x70	; 112
    6408:	92 e0       	ldi	r25, 0x02	; 2
    640a:	21 50       	subi	r18, 0x01	; 1
    640c:	80 40       	sbci	r24, 0x00	; 0
    640e:	90 40       	sbci	r25, 0x00	; 0
    6410:	e1 f7       	brne	.-8      	; 0x640a <send_msg+0xa>
    6412:	00 c0       	rjmp	.+0      	; 0x6414 <send_msg+0x14>
    6414:	00 00       	nop
    6416:	08 95       	ret

Disassembly of section .text.stage_0:

000032fc <stage_0>:
/* Stage 0                                                              */
/************************************************************************/
static STAGE_STATUS stage_0(){
	
	while(1){
		switch(state_s0){
    32fc:	80 91 af 0f 	lds	r24, 0x0FAF	; 0x800faf <state_s0>
    3300:	82 30       	cpi	r24, 0x02	; 2
    3302:	41 f1       	breq	.+80     	; 0x3354 <stage_0+0x58>
    3304:	28 f4       	brcc	.+10     	; 0x3310 <stage_0+0x14>
    3306:	88 23       	and	r24, r24
    3308:	51 f0       	breq	.+20     	; 0x331e <stage_0+0x22>
    330a:	81 30       	cpi	r24, 0x01	; 1
    330c:	d9 f0       	breq	.+54     	; 0x3344 <stage_0+0x48>
    330e:	f6 cf       	rjmp	.-20     	; 0x32fc <stage_0>
    3310:	84 30       	cpi	r24, 0x04	; 4
    3312:	09 f4       	brne	.+2      	; 0x3316 <stage_0+0x1a>
    3314:	50 c0       	rjmp	.+160    	; 0x33b6 <stage_0+0xba>
    3316:	40 f1       	brcs	.+80     	; 0x3368 <stage_0+0x6c>
    3318:	85 30       	cpi	r24, 0x05	; 5
    331a:	91 f1       	breq	.+100    	; 0x3380 <stage_0+0x84>
    331c:	ef cf       	rjmp	.-34     	; 0x32fc <stage_0>
			case STAGE_INIT:
				print_debug("State: S0 INIT");
    331e:	64 e6       	ldi	r22, 0x64	; 100
    3320:	72 e0       	ldi	r23, 0x02	; 2
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				SCD30_init_sampling(cols[S0_CO2].samplingInterval, cols[S0_CO2].samplings, co2_data);
    3328:	e0 ed       	ldi	r30, 0xD0	; 208
    332a:	fe e0       	ldi	r31, 0x0E	; 14
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	4a ec       	ldi	r20, 0xCA	; 202
    3332:	5a e0       	ldi	r21, 0x0A	; 10
    3334:	82 81       	ldd	r24, Z+2	; 0x02
    3336:	93 81       	ldd	r25, Z+3	; 0x03
    3338:	0e 94 85 30 	call	0x610a	; 0x610a <SCD30_init_sampling>
				state_s0=STAGE_GET_TIME;
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    3342:	dc cf       	rjmp	.-72     	; 0x32fc <stage_0>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    3344:	84 e5       	ldi	r24, 0x54	; 84
    3346:	9f e0       	ldi	r25, 0x0F	; 15
    3348:	0e 94 bb 11 	call	0x2376	; 0x2376 <RTC_get_current_time>
				state_s0=STAGE_START;
    334c:	82 e0       	ldi	r24, 0x02	; 2
    334e:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    3352:	d4 cf       	rjmp	.-88     	; 0x32fc <stage_0>
			
			case STAGE_START:
				ADC_meth_sens_power_on(methHeatUpTime);
    3354:	80 91 ab 0f 	lds	r24, 0x0FAB	; 0x800fab <methHeatUpTime>
    3358:	0e 94 f7 30 	call	0x61ee	; 0x61ee <ADC_meth_sens_power_on>
				SCD30_start_sampling();
    335c:	0e 94 3a 34 	call	0x6874	; 0x6874 <SCD30_start_sampling>
			
				state_s0=STAGE_WAIT;
    3360:	83 e0       	ldi	r24, 0x03	; 3
    3362:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    3366:	ca cf       	rjmp	.-108    	; 0x32fc <stage_0>
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    3368:	0e 94 c6 32 	call	0x658c	; 0x658c <ADC_meth_sens_ready>
    336c:	88 23       	and	r24, r24
    336e:	61 f1       	breq	.+88     	; 0x33c8 <stage_0+0xcc>
    3370:	0e 94 98 31 	call	0x6330	; 0x6330 <SCD30_is_sampling_done>
    3374:	88 23       	and	r24, r24
    3376:	51 f1       	breq	.+84     	; 0x33cc <stage_0+0xd0>
				state_s0=STAGE_UPDATE_MRPP;
    3378:	85 e0       	ldi	r24, 0x05	; 5
    337a:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    337e:	be cf       	rjmp	.-132    	; 0x32fc <stage_0>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    3380:	27 e7       	ldi	r18, 0x77	; 119
    3382:	3f e0       	ldi	r19, 0x0F	; 15
    3384:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    3388:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    338c:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    3390:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    3394:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    3398:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    339c:	0e 94 90 13 	call	0x2720	; 0x2720 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S0_ID_CO2, ts, co2_data);
    33a0:	4a ec       	ldi	r20, 0xCA	; 202
    33a2:	5a e0       	ldi	r21, 0x0A	; 10
    33a4:	67 e7       	ldi	r22, 0x77	; 119
    33a6:	7f e0       	ldi	r23, 0x0F	; 15
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <MRPP_add_collection_data_INT16>
				state_s0=STAGE_DEINIT;
    33ae:	84 e0       	ldi	r24, 0x04	; 4
    33b0:	80 93 af 0f 	sts	0x0FAF, r24	; 0x800faf <state_s0>
			break;
    33b4:	a3 cf       	rjmp	.-186    	; 0x32fc <stage_0>
			
			case STAGE_DEINIT:
				print_debug("State: S0 DE-INIT");
    33b6:	63 e7       	ldi	r22, 0x73	; 115
    33b8:	72 e0       	ldi	r23, 0x02	; 2
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				SCD30_deinit_sampling();
    33c0:	0e 94 74 33 	call	0x66e8	; 0x66e8 <SCD30_deinit_sampling>
				return STAGE_DONE;
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	08 95       	ret
			
				state_s0=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!ADC_meth_sens_ready() || !SCD30_is_sampling_done()) return STAGE_RUNNING;
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	08 95       	ret
    33cc:	80 e0       	ldi	r24, 0x00	; 0
				SCD30_deinit_sampling();
				return STAGE_DONE;
			break;
		}
	}
}
    33ce:	08 95       	ret

Disassembly of section .text.stage_1:

00002c7e <stage_1>:

/************************************************************************/
/* Stage 1                                                              */
/************************************************************************/
static STAGE_STATUS stage_1(){
    2c7e:	cf 93       	push	r28
    2c80:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s1){
    2c82:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <state_s1>
    2c86:	82 30       	cpi	r24, 0x02	; 2
    2c88:	89 f1       	breq	.+98     	; 0x2cec <stage_1+0x6e>
    2c8a:	28 f4       	brcc	.+10     	; 0x2c96 <stage_1+0x18>
    2c8c:	88 23       	and	r24, r24
    2c8e:	51 f0       	breq	.+20     	; 0x2ca4 <stage_1+0x26>
    2c90:	81 30       	cpi	r24, 0x01	; 1
    2c92:	21 f1       	breq	.+72     	; 0x2cdc <stage_1+0x5e>
    2c94:	f6 cf       	rjmp	.-20     	; 0x2c82 <stage_1+0x4>
    2c96:	84 30       	cpi	r24, 0x04	; 4
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <stage_1+0x1e>
    2c9a:	5e c0       	rjmp	.+188    	; 0x2d58 <stage_1+0xda>
    2c9c:	78 f1       	brcs	.+94     	; 0x2cfc <stage_1+0x7e>
    2c9e:	85 30       	cpi	r24, 0x05	; 5
    2ca0:	c9 f1       	breq	.+114    	; 0x2d14 <stage_1+0x96>
    2ca2:	ef cf       	rjmp	.-34     	; 0x2c82 <stage_1+0x4>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
    2ca4:	65 e8       	ldi	r22, 0x85	; 133
    2ca6:	72 e0       	ldi	r23, 0x02	; 2
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
    2cae:	c0 ed       	ldi	r28, 0xD0	; 208
    2cb0:	de e0       	ldi	r29, 0x0E	; 14
    2cb2:	6a 85       	ldd	r22, Y+10	; 0x0a
    2cb4:	7b 85       	ldd	r23, Y+11	; 0x0b
    2cb6:	4a ec       	ldi	r20, 0xCA	; 202
    2cb8:	5a e0       	ldi	r21, 0x0A	; 10
    2cba:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cbc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cbe:	0e 94 85 30 	call	0x610a	; 0x610a <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
    2cc2:	6d 81       	ldd	r22, Y+5	; 0x05
    2cc4:	7e 81       	ldd	r23, Y+6	; 0x06
    2cc6:	42 e7       	ldi	r20, 0x72	; 114
    2cc8:	58 e0       	ldi	r21, 0x08	; 8
    2cca:	8f 81       	ldd	r24, Y+7	; 0x07
    2ccc:	0e 94 84 24 	call	0x4908	; 0x4908 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2cd0:	81 11       	cpse	r24, r1
    2cd2:	4d c0       	rjmp	.+154    	; 0x2d6e <stage_1+0xf0>
				
				state_s1=STAGE_GET_TIME;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2cda:	d3 cf       	rjmp	.-90     	; 0x2c82 <stage_1+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2cdc:	84 e5       	ldi	r24, 0x54	; 84
    2cde:	9f e0       	ldi	r25, 0x0F	; 15
    2ce0:	0e 94 bb 11 	call	0x2376	; 0x2376 <RTC_get_current_time>
				
				state_s1=STAGE_START;
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2cea:	cb cf       	rjmp	.-106    	; 0x2c82 <stage_1+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2cec:	0e 94 3a 34 	call	0x6874	; 0x6874 <SCD30_start_sampling>
				ADC_start_sampling();
    2cf0:	0e 94 2b 34 	call	0x6856	; 0x6856 <ADC_start_sampling>
				
				state_s1=STAGE_WAIT;
    2cf4:	83 e0       	ldi	r24, 0x03	; 3
    2cf6:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2cfa:	c3 cf       	rjmp	.-122    	; 0x2c82 <stage_1+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2cfc:	0e 94 98 31 	call	0x6330	; 0x6330 <SCD30_is_sampling_done>
    2d00:	88 23       	and	r24, r24
    2d02:	b9 f1       	breq	.+110    	; 0x2d72 <stage_1+0xf4>
    2d04:	0e 94 60 31 	call	0x62c0	; 0x62c0 <ADC_is_sampling_done>
    2d08:	88 23       	and	r24, r24
    2d0a:	a9 f1       	breq	.+106    	; 0x2d76 <stage_1+0xf8>
				state_s1=STAGE_UPDATE_MRPP;
    2d0c:	85 e0       	ldi	r24, 0x05	; 5
    2d0e:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2d12:	b7 cf       	rjmp	.-146    	; 0x2c82 <stage_1+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2d14:	27 e7       	ldi	r18, 0x77	; 119
    2d16:	3f e0       	ldi	r19, 0x0F	; 15
    2d18:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2d1c:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2d20:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2d24:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2d28:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2d2c:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2d30:	0e 94 90 13 	call	0x2720	; 0x2720 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S1_ID_CO2, ts, co2_data);
    2d34:	4a ec       	ldi	r20, 0xCA	; 202
    2d36:	5a e0       	ldi	r21, 0x0A	; 10
    2d38:	67 e7       	ldi	r22, 0x77	; 119
    2d3a:	7f e0       	ldi	r23, 0x0F	; 15
    2d3c:	83 e0       	ldi	r24, 0x03	; 3
    2d3e:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S1_ID_METH, ts, meth_data);
    2d42:	42 e7       	ldi	r20, 0x72	; 114
    2d44:	58 e0       	ldi	r21, 0x08	; 8
    2d46:	67 e7       	ldi	r22, 0x77	; 119
    2d48:	7f e0       	ldi	r23, 0x0F	; 15
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <MRPP_add_collection_data_INT16>
				state_s1=STAGE_DEINIT;
    2d50:	84 e0       	ldi	r24, 0x04	; 4
    2d52:	80 93 ae 0f 	sts	0x0FAE, r24	; 0x800fae <state_s1>
			break;
    2d56:	95 cf       	rjmp	.-214    	; 0x2c82 <stage_1+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S1 DE-INIT");
    2d58:	64 e9       	ldi	r22, 0x94	; 148
    2d5a:	72 e0       	ldi	r23, 0x02	; 2
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				SCD30_deinit_sampling();
    2d62:	0e 94 74 33 	call	0x66e8	; 0x66e8 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2d66:	0e 94 a9 32 	call	0x6552	; 0x6552 <ADC_deinit_sampling>
				return STAGE_DONE;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	05 c0       	rjmp	.+10     	; 0x2d78 <stage_1+0xfa>
			case STAGE_INIT:
				print_debug("State: S1 INIT");
				SCD30_init_sampling(cols[S1_CO2].samplingInterval, cols[S1_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S1_METH].samplingInterval, cols[S1_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2d6e:	83 e0       	ldi	r24, 0x03	; 3
    2d70:	03 c0       	rjmp	.+6      	; 0x2d78 <stage_1+0xfa>
				
				state_s1=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <stage_1+0xfa>
    2d76:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	08 95       	ret

Disassembly of section .text.stage_2:

0000295c <stage_2>:

/************************************************************************/
/* Stage 2                                                              */
/************************************************************************/
static STAGE_STATUS stage_2(){
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
	ADC_STATUS adcStatus;
	

	while(1){
		switch(state_s2){
    2960:	80 91 ad 0f 	lds	r24, 0x0FAD	; 0x800fad <state_s2>
    2964:	82 30       	cpi	r24, 0x02	; 2
    2966:	91 f1       	breq	.+100    	; 0x29cc <stage_2+0x70>
    2968:	28 f4       	brcc	.+10     	; 0x2974 <stage_2+0x18>
    296a:	88 23       	and	r24, r24
    296c:	59 f0       	breq	.+22     	; 0x2984 <stage_2+0x28>
    296e:	81 30       	cpi	r24, 0x01	; 1
    2970:	29 f1       	breq	.+74     	; 0x29bc <stage_2+0x60>
    2972:	f6 cf       	rjmp	.-20     	; 0x2960 <stage_2+0x4>
    2974:	84 30       	cpi	r24, 0x04	; 4
    2976:	09 f4       	brne	.+2      	; 0x297a <stage_2+0x1e>
    2978:	69 c0       	rjmp	.+210    	; 0x2a4c <stage_2+0xf0>
    297a:	b0 f1       	brcs	.+108    	; 0x29e8 <stage_2+0x8c>
    297c:	85 30       	cpi	r24, 0x05	; 5
    297e:	09 f4       	brne	.+2      	; 0x2982 <stage_2+0x26>
    2980:	43 c0       	rjmp	.+134    	; 0x2a08 <stage_2+0xac>
    2982:	ee cf       	rjmp	.-36     	; 0x2960 <stage_2+0x4>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
    2984:	66 ea       	ldi	r22, 0xA6	; 166
    2986:	72 e0       	ldi	r23, 0x02	; 2
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
    298e:	c0 ed       	ldi	r28, 0xD0	; 208
    2990:	de e0       	ldi	r29, 0x0E	; 14
    2992:	6c 89       	ldd	r22, Y+20	; 0x14
    2994:	7d 89       	ldd	r23, Y+21	; 0x15
    2996:	4a ec       	ldi	r20, 0xCA	; 202
    2998:	5a e0       	ldi	r21, 0x0A	; 10
    299a:	8e 89       	ldd	r24, Y+22	; 0x16
    299c:	9f 89       	ldd	r25, Y+23	; 0x17
    299e:	0e 94 85 30 	call	0x610a	; 0x610a <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
    29a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    29a4:	78 89       	ldd	r23, Y+16	; 0x10
    29a6:	42 e7       	ldi	r20, 0x72	; 114
    29a8:	58 e0       	ldi	r21, 0x08	; 8
    29aa:	89 89       	ldd	r24, Y+17	; 0x11
    29ac:	0e 94 84 24 	call	0x4908	; 0x4908 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    29b0:	81 11       	cpse	r24, r1
    29b2:	57 c0       	rjmp	.+174    	; 0x2a62 <stage_2+0x106>
			
				state_s2=STAGE_GET_TIME;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    29ba:	d2 cf       	rjmp	.-92     	; 0x2960 <stage_2+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    29bc:	84 e5       	ldi	r24, 0x54	; 84
    29be:	9f e0       	ldi	r25, 0x0F	; 15
    29c0:	0e 94 bb 11 	call	0x2376	; 0x2376 <RTC_get_current_time>
			
				state_s2=STAGE_START;
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    29ca:	ca cf       	rjmp	.-108    	; 0x2960 <stage_2+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    29cc:	0e 94 3a 34 	call	0x6874	; 0x6874 <SCD30_start_sampling>
				ADC_start_sampling();
    29d0:	0e 94 2b 34 	call	0x6856	; 0x6856 <ADC_start_sampling>
				PUMP_start(airPumpTime);
    29d4:	80 91 91 0f 	lds	r24, 0x0F91	; 0x800f91 <airPumpTime>
    29d8:	90 91 92 0f 	lds	r25, 0x0F92	; 0x800f92 <airPumpTime+0x1>
    29dc:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <PUMP_start>
			
				state_s2=STAGE_WAIT;
    29e0:	83 e0       	ldi	r24, 0x03	; 3
    29e2:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    29e6:	bc cf       	rjmp	.-136    	; 0x2960 <stage_2+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    29e8:	0e 94 98 31 	call	0x6330	; 0x6330 <SCD30_is_sampling_done>
    29ec:	88 23       	and	r24, r24
    29ee:	d9 f1       	breq	.+118    	; 0x2a66 <stage_2+0x10a>
    29f0:	0e 94 60 31 	call	0x62c0	; 0x62c0 <ADC_is_sampling_done>
    29f4:	88 23       	and	r24, r24
    29f6:	c9 f1       	breq	.+114    	; 0x2a6a <stage_2+0x10e>
    29f8:	0e 94 8a 31 	call	0x6314	; 0x6314 <PUMP_is_done>
    29fc:	88 23       	and	r24, r24
    29fe:	b9 f1       	breq	.+110    	; 0x2a6e <stage_2+0x112>
				state_s2=STAGE_UPDATE_MRPP;
    2a00:	85 e0       	ldi	r24, 0x05	; 5
    2a02:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    2a06:	ac cf       	rjmp	.-168    	; 0x2960 <stage_2+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2a08:	27 e7       	ldi	r18, 0x77	; 119
    2a0a:	3f e0       	ldi	r19, 0x0F	; 15
    2a0c:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2a10:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2a14:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2a18:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2a1c:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2a20:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2a24:	0e 94 90 13 	call	0x2720	; 0x2720 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S2_ID_CO2, ts, co2_data);
    2a28:	4a ec       	ldi	r20, 0xCA	; 202
    2a2a:	5a e0       	ldi	r21, 0x0A	; 10
    2a2c:	67 e7       	ldi	r22, 0x77	; 119
    2a2e:	7f e0       	ldi	r23, 0x0F	; 15
    2a30:	85 e0       	ldi	r24, 0x05	; 5
    2a32:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S2_ID_METH, ts, meth_data);
    2a36:	42 e7       	ldi	r20, 0x72	; 114
    2a38:	58 e0       	ldi	r21, 0x08	; 8
    2a3a:	67 e7       	ldi	r22, 0x77	; 119
    2a3c:	7f e0       	ldi	r23, 0x0F	; 15
    2a3e:	84 e0       	ldi	r24, 0x04	; 4
    2a40:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <MRPP_add_collection_data_INT16>
				state_s2=STAGE_DEINIT;
    2a44:	84 e0       	ldi	r24, 0x04	; 4
    2a46:	80 93 ad 0f 	sts	0x0FAD, r24	; 0x800fad <state_s2>
			break;
    2a4a:	8a cf       	rjmp	.-236    	; 0x2960 <stage_2+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S2 DE-INIT");
    2a4c:	65 eb       	ldi	r22, 0xB5	; 181
    2a4e:	72 e0       	ldi	r23, 0x02	; 2
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				SCD30_deinit_sampling();
    2a56:	0e 94 74 33 	call	0x66e8	; 0x66e8 <SCD30_deinit_sampling>
				ADC_deinit_sampling();
    2a5a:	0e 94 a9 32 	call	0x6552	; 0x6552 <ADC_deinit_sampling>
				return STAGE_DONE;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	07 c0       	rjmp	.+14     	; 0x2a70 <stage_2+0x114>
			case STAGE_INIT:
				print_debug("State: S2 INIT");
				SCD30_init_sampling(cols[S2_CO2].samplingInterval, cols[S2_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S2_METH].samplingInterval, cols[S2_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2a62:	83 e0       	ldi	r24, 0x03	; 3
    2a64:	05 c0       	rjmp	.+10     	; 0x2a70 <stage_2+0x114>
			
				state_s2=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done() || !PUMP_is_done()) return STAGE_RUNNING;
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	03 c0       	rjmp	.+6      	; 0x2a70 <stage_2+0x114>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	01 c0       	rjmp	.+2      	; 0x2a70 <stage_2+0x114>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
				return STAGE_DONE;
			break;
			
		}
	}
}
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	08 95       	ret

Disassembly of section .text.stage_3:

00002a76 <stage_3>:


/************************************************************************/
/* Stage 3                                                              */
/************************************************************************/
static STAGE_STATUS stage_3(){
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
	ADC_STATUS adcStatus;
	
	while(1){
		switch(state_s3){
    2a7a:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <state_s3>
    2a7e:	82 30       	cpi	r24, 0x02	; 2
    2a80:	89 f1       	breq	.+98     	; 0x2ae4 <stage_3+0x6e>
    2a82:	28 f4       	brcc	.+10     	; 0x2a8e <stage_3+0x18>
    2a84:	88 23       	and	r24, r24
    2a86:	51 f0       	breq	.+20     	; 0x2a9c <stage_3+0x26>
    2a88:	81 30       	cpi	r24, 0x01	; 1
    2a8a:	21 f1       	breq	.+72     	; 0x2ad4 <stage_3+0x5e>
    2a8c:	f6 cf       	rjmp	.-20     	; 0x2a7a <stage_3+0x4>
    2a8e:	84 30       	cpi	r24, 0x04	; 4
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <stage_3+0x1e>
    2a92:	5e c0       	rjmp	.+188    	; 0x2b50 <stage_3+0xda>
    2a94:	78 f1       	brcs	.+94     	; 0x2af4 <stage_3+0x7e>
    2a96:	85 30       	cpi	r24, 0x05	; 5
    2a98:	c9 f1       	breq	.+114    	; 0x2b0c <stage_3+0x96>
    2a9a:	ef cf       	rjmp	.-34     	; 0x2a7a <stage_3+0x4>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
    2a9c:	67 ec       	ldi	r22, 0xC7	; 199
    2a9e:	72 e0       	ldi	r23, 0x02	; 2
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
    2aa6:	c0 ed       	ldi	r28, 0xD0	; 208
    2aa8:	de e0       	ldi	r29, 0x0E	; 14
    2aaa:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2aac:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2aae:	4a ec       	ldi	r20, 0xCA	; 202
    2ab0:	5a e0       	ldi	r21, 0x0A	; 10
    2ab2:	88 a1       	ldd	r24, Y+32	; 0x20
    2ab4:	99 a1       	ldd	r25, Y+33	; 0x21
    2ab6:	0e 94 85 30 	call	0x610a	; 0x610a <SCD30_init_sampling>
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
    2aba:	69 8d       	ldd	r22, Y+25	; 0x19
    2abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abe:	42 e7       	ldi	r20, 0x72	; 114
    2ac0:	58 e0       	ldi	r21, 0x08	; 8
    2ac2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac4:	0e 94 84 24 	call	0x4908	; 0x4908 <ADC_init_sampling>
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2ac8:	81 11       	cpse	r24, r1
    2aca:	51 c0       	rjmp	.+162    	; 0x2b6e <stage_3+0xf8>
			
				state_s3=STAGE_GET_TIME;
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2ad2:	d3 cf       	rjmp	.-90     	; 0x2a7a <stage_3+0x4>
			
			case STAGE_GET_TIME:
				RTC_get_current_time(&dt);
    2ad4:	84 e5       	ldi	r24, 0x54	; 84
    2ad6:	9f e0       	ldi	r25, 0x0F	; 15
    2ad8:	0e 94 bb 11 	call	0x2376	; 0x2376 <RTC_get_current_time>
				
				state_s3=STAGE_START;
    2adc:	82 e0       	ldi	r24, 0x02	; 2
    2ade:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2ae2:	cb cf       	rjmp	.-106    	; 0x2a7a <stage_3+0x4>
			
			case STAGE_START:
				SCD30_start_sampling();
    2ae4:	0e 94 3a 34 	call	0x6874	; 0x6874 <SCD30_start_sampling>
				ADC_start_sampling();
    2ae8:	0e 94 2b 34 	call	0x6856	; 0x6856 <ADC_start_sampling>
				
				state_s3=STAGE_WAIT;
    2aec:	83 e0       	ldi	r24, 0x03	; 3
    2aee:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2af2:	c3 cf       	rjmp	.-122    	; 0x2a7a <stage_3+0x4>
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2af4:	0e 94 98 31 	call	0x6330	; 0x6330 <SCD30_is_sampling_done>
    2af8:	88 23       	and	r24, r24
    2afa:	d9 f1       	breq	.+118    	; 0x2b72 <stage_3+0xfc>
    2afc:	0e 94 60 31 	call	0x62c0	; 0x62c0 <ADC_is_sampling_done>
    2b00:	88 23       	and	r24, r24
    2b02:	c9 f1       	breq	.+114    	; 0x2b76 <stage_3+0x100>
				state_s3=STAGE_UPDATE_MRPP;
    2b04:	85 e0       	ldi	r24, 0x05	; 5
    2b06:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2b0a:	b7 cf       	rjmp	.-146    	; 0x2a7a <stage_3+0x4>
			
			case STAGE_UPDATE_MRPP:
				RTC_datetime_to_ts(dt, ts);
    2b0c:	27 e7       	ldi	r18, 0x77	; 119
    2b0e:	3f e0       	ldi	r19, 0x0F	; 15
    2b10:	40 91 54 0f 	lds	r20, 0x0F54	; 0x800f54 <dt>
    2b14:	50 91 55 0f 	lds	r21, 0x0F55	; 0x800f55 <dt+0x1>
    2b18:	60 91 56 0f 	lds	r22, 0x0F56	; 0x800f56 <dt+0x2>
    2b1c:	70 91 57 0f 	lds	r23, 0x0F57	; 0x800f57 <dt+0x3>
    2b20:	80 91 58 0f 	lds	r24, 0x0F58	; 0x800f58 <dt+0x4>
    2b24:	90 91 59 0f 	lds	r25, 0x0F59	; 0x800f59 <dt+0x5>
    2b28:	0e 94 90 13 	call	0x2720	; 0x2720 <RTC_datetime_to_ts>
				MRPP_add_collection_data_INT16(S3_ID_CO2, ts, co2_data);
    2b2c:	4a ec       	ldi	r20, 0xCA	; 202
    2b2e:	5a e0       	ldi	r21, 0x0A	; 10
    2b30:	67 e7       	ldi	r22, 0x77	; 119
    2b32:	7f e0       	ldi	r23, 0x0F	; 15
    2b34:	87 e0       	ldi	r24, 0x07	; 7
    2b36:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <MRPP_add_collection_data_INT16>
				MRPP_add_collection_data_INT16(S3_ID_METH, ts, meth_data);
    2b3a:	42 e7       	ldi	r20, 0x72	; 114
    2b3c:	58 e0       	ldi	r21, 0x08	; 8
    2b3e:	67 e7       	ldi	r22, 0x77	; 119
    2b40:	7f e0       	ldi	r23, 0x0F	; 15
    2b42:	86 e0       	ldi	r24, 0x06	; 6
    2b44:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <MRPP_add_collection_data_INT16>
				state_s3=STAGE_DEINIT;
    2b48:	84 e0       	ldi	r24, 0x04	; 4
    2b4a:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <state_s3>
			break;
    2b4e:	95 cf       	rjmp	.-214    	; 0x2a7a <stage_3+0x4>
			
			case STAGE_DEINIT:
				print_debug("State: S3 DE-INIT");
    2b50:	66 ed       	ldi	r22, 0xD6	; 214
    2b52:	72 e0       	ldi	r23, 0x02	; 2
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				SCD30_deinit_sampling();
    2b5a:	0e 94 74 33 	call	0x66e8	; 0x66e8 <SCD30_deinit_sampling>
				SCD30_sensor_off();
    2b5e:	0e 94 71 34 	call	0x68e2	; 0x68e2 <SCD30_sensor_off>
				ADC_deinit_sampling();
    2b62:	0e 94 a9 32 	call	0x6552	; 0x6552 <ADC_deinit_sampling>
				ADC_meth_sens_power_off();
    2b66:	0e 94 5d 34 	call	0x68ba	; 0x68ba <ADC_meth_sens_power_off>
				return STAGE_DONE;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	05 c0       	rjmp	.+10     	; 0x2b78 <stage_3+0x102>
			case STAGE_INIT:
				print_debug("State: S3 INIT");
				SCD30_init_sampling(cols[S3_CO2].samplingInterval, cols[S3_CO2].samplings, co2_data);
				
				adcStatus=ADC_init_sampling(cols[S3_METH].samplingInterval, cols[S3_METH].samplings, meth_data);
				if(adcStatus!=ADC_STATUS_SUCCESS) return STAGE_FATAL_ERROR;
    2b6e:	83 e0       	ldi	r24, 0x03	; 3
    2b70:	03 c0       	rjmp	.+6      	; 0x2b78 <stage_3+0x102>
				
				state_s3=STAGE_WAIT;
			break;
			
			case STAGE_WAIT:
				if(!SCD30_is_sampling_done() || !ADC_is_sampling_done()) return STAGE_RUNNING;
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	01 c0       	rjmp	.+2      	; 0x2b78 <stage_3+0x102>
    2b76:	80 e0       	ldi	r24, 0x00	; 0
				ADC_meth_sens_power_off();
				return STAGE_DONE;
			break;
		}
	}
}
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	08 95       	ret

Disassembly of section .text.MAINPG_start:

00001014 <MAINPG_start>:

static void send_msg(const char msg[]);

static bool fromSleep=false;

void MAINPG_start(){
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
	MAINPG_STATES state=MAINPG_INIT_HW;
    1020:	c0 e0       	ldi	r28, 0x00	; 0
    1022:	1a c0       	rjmp	.+52     	; 0x1058 <MAINPG_start+0x44>
				PM_HAL_SCD30_power_init();
				PM_HAL_LED_power_init();
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    1024:	c6 e0       	ldi	r28, 0x06	; 6
    1026:	18 c0       	rjmp	.+48     	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
					}
				}else{
					state=MAINPG_CONF_ERR;
    1028:	c5 e0       	ldi	r28, 0x05	; 5
    102a:	16 c0       	rjmp	.+44     	; 0x1058 <MAINPG_start+0x44>
    102c:	c5 e0       	ldi	r28, 0x05	; 5
    102e:	14 c0       	rjmp	.+40     	; 0x1058 <MAINPG_start+0x44>
    1030:	c5 e0       	ldi	r28, 0x05	; 5
    1032:	12 c0       	rjmp	.+36     	; 0x1058 <MAINPG_start+0x44>
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
						state=MAINPG_CONF_ERR;
    1034:	c5 e0       	ldi	r28, 0x05	; 5
    1036:	10 c0       	rjmp	.+32     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
				lmStatus=LM_wake_up();
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1038:	c6 e1       	ldi	r28, 0x16	; 22
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <MAINPG_start+0x44>
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
				scd30Status=SCD30_sensor_on();
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    103c:	c6 e1       	ldi	r28, 0x16	; 22
    103e:	0c c0       	rjmp	.+24     	; 0x1058 <MAINPG_start+0x44>
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
				rtcStatus=RTC_set_clock_out(1);
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    1040:	c6 e1       	ldi	r28, 0x16	; 22
    1042:	0a c0       	rjmp	.+20     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
				rtcStatus=RTC_clear_wake_up_interrupt();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    1044:	c6 e1       	ldi	r28, 0x16	; 22
    1046:	08 c0       	rjmp	.+16     	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
				rtcStatus=set_wakeup();
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    1048:	c6 e1       	ldi	r28, 0x16	; 22
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <MAINPG_start+0x44>
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
			break;
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
    104c:	cd 2f       	mov	r28, r29
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <MAINPG_start+0x44>
    1050:	cd 2f       	mov	r28, r29
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
					state=MAINPG_SEND_TAIL;
				}else{
					comeBackToState=MAINPG_SEND_ALL_DATA;
    1054:	dc 2f       	mov	r29, r28
					state=MAINPG_SEND_DATA;
    1056:	c1 e1       	ldi	r28, 0x11	; 17
	STAGE_STATUS stageStatus;
	uint8_t groupId=0;
	

	while(1){
		switch(state){
    1058:	ec 2f       	mov	r30, r28
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	e8 31       	cpi	r30, 0x18	; 24
    105e:	f1 05       	cpc	r31, r1
    1060:	d8 f7       	brcc	.-10     	; 0x1058 <MAINPG_start+0x44>
    1062:	e2 5a       	subi	r30, 0xA2	; 162
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	0c 94 06 34 	jmp	0x680c	; 0x680c <__tablejump2__>
			case MAINPG_INIT_HW:
				print_debug("State: INIT HW");
    106a:	68 ee       	ldi	r22, 0xE8	; 232
    106c:	72 e0       	ldi	r23, 0x02	; 2
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				//Reset variables
				state_s0=STAGE_INIT;
    1074:	10 92 af 0f 	sts	0x0FAF, r1	; 0x800faf <state_s0>
				state_s1=STAGE_INIT;
    1078:	10 92 ae 0f 	sts	0x0FAE, r1	; 0x800fae <state_s1>
				state_s2=STAGE_INIT;
    107c:	10 92 ad 0f 	sts	0x0FAD, r1	; 0x800fad <state_s2>
				state_s3=STAGE_INIT;
    1080:	10 92 ac 0f 	sts	0x0FAC, r1	; 0x800fac <state_s3>
				bodyIndex=-1;
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	9f ef       	ldi	r25, 0xFF	; 255
    1088:	90 93 94 0f 	sts	0x0F94, r25	; 0x800f94 <bodyIndex+0x1>
    108c:	80 93 93 0f 	sts	0x0F93, r24	; 0x800f93 <bodyIndex>
				
				uart0_hal_init();
    1090:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <uart0_hal_init>
				uart1_hal_init();
    1094:	0e 94 0d 2c 	call	0x581a	; 0x581a <uart1_hal_init>
				TWI_HAL_init();
    1098:	0e 94 bd 32 	call	0x657a	; 0x657a <TWI_HAL_init>
				TC2_HAL_init();
    109c:	0e 94 b7 30 	call	0x616e	; 0x616e <TC2_HAL_init>
				rn2483_init();
    10a0:	0e 94 4d 34 	call	0x689a	; 0x689a <rn2483_init>
				SCD30_HAL_init();
    10a4:	0e 94 2e 33 	call	0x665c	; 0x665c <SCD30_HAL_init>
				PM_HAL_adc_power_init();
    10a8:	0e 94 0b 33 	call	0x6616	; 0x6616 <PM_HAL_adc_power_init>
				PM_HAL_meth_power_init();
    10ac:	0e 94 12 33 	call	0x6624	; 0x6624 <PM_HAL_meth_power_init>
				PM_HAL_BC_power_init();
    10b0:	0e 94 20 33 	call	0x6640	; 0x6640 <PM_HAL_BC_power_init>
				PM_HAL_SCD30_power_init();
    10b4:	0e 94 19 33 	call	0x6632	; 0x6632 <PM_HAL_SCD30_power_init>
				PM_HAL_LED_power_init();
    10b8:	0e 94 27 33 	call	0x664e	; 0x664e <PM_HAL_LED_power_init>
				
			
				
				state=fromSleep?MAINPG_LORA_WAKEUP:MAINPG_READ_EEPROM;
    10bc:	80 91 a9 0f 	lds	r24, 0x0FA9	; 0x800fa9 <fromSleep>
    10c0:	81 11       	cpse	r24, r1
    10c2:	b0 cf       	rjmp	.-160    	; 0x1024 <MAINPG_start+0x10>
    10c4:	c1 e0       	ldi	r28, 0x01	; 1
    10c6:	c8 cf       	rjmp	.-112    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
    10c8:	67 ef       	ldi	r22, 0xF7	; 247
    10ca:	72 e0       	ldi	r23, 0x02	; 2
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
    10d2:	0e 94 18 32 	call	0x6430	; 0x6430 <EM_has_deveui>
    10d6:	88 23       	and	r24, r24
    10d8:	09 f4       	brne	.+2      	; 0x10dc <MAINPG_start+0xc8>
    10da:	a6 cf       	rjmp	.-180    	; 0x1028 <MAINPG_start+0x14>
    10dc:	0e 94 23 32 	call	0x6446	; 0x6446 <EM_has_appeui>
    10e0:	88 23       	and	r24, r24
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <MAINPG_start+0xd2>
    10e4:	a3 cf       	rjmp	.-186    	; 0x102c <MAINPG_start+0x18>
    10e6:	0e 94 2e 32 	call	0x645c	; 0x645c <EM_has_appkey>
    10ea:	88 23       	and	r24, r24
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <MAINPG_start+0xdc>
    10ee:	a0 cf       	rjmp	.-192    	; 0x1030 <MAINPG_start+0x1c>
					state=MAINPG_LORA_JOIN_NETWORK;
					if(!read_eeprom()){
    10f0:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <read_eeprom>
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <MAINPG_start+0xe6>
    10f8:	9d cf       	rjmp	.-198    	; 0x1034 <MAINPG_start+0x20>
			/* EEPROM                                                               */
			/************************************************************************/
			case MAINPG_READ_EEPROM:
				print_debug("State: EEPROM");
				if(EM_has_deveui() && EM_has_appeui() && EM_has_appkey()){
					state=MAINPG_LORA_JOIN_NETWORK;
    10fa:	c2 e0       	ldi	r28, 0x02	; 2
    10fc:	ad cf       	rjmp	.-166    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* LORA                                                                 */
			/************************************************************************/
			case MAINPG_LORA_JOIN_NETWORK:
				print_debug("State: JOIN LORA");
    10fe:	65 e0       	ldi	r22, 0x05	; 5
    1100:	73 e0       	ldi	r23, 0x03	; 3
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				LED_start_try_join();
    1108:	0e 94 6d 33 	call	0x66da	; 0x66da <LED_start_try_join>
				lmStatus=join_lora();
    110c:	0e 94 d8 32 	call	0x65b0	; 0x65b0 <join_lora>
    1110:	c8 2f       	mov	r28, r24
				LED_stop_try_join();
    1112:	0e 94 03 33 	call	0x6606	; 0x6606 <LED_stop_try_join>
				state=decode_join_response(lmStatus);
    1116:	8c 2f       	mov	r24, r28
    1118:	0e 94 a6 31 	call	0x634c	; 0x634c <decode_join_response>
    111c:	c8 2f       	mov	r28, r24
			break;
    111e:	9c cf       	rjmp	.-200    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_LORA_JOIN_SUCCESS:
				print_debug("State: JOIN SUCCESS");
    1120:	66 e1       	ldi	r22, 0x16	; 22
    1122:	73 e0       	ldi	r23, 0x03	; 3
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				LED_join_success();
    112a:	0e 94 35 2b 	call	0x566a	; 0x566a <LED_join_success>
				state=MAINPG_INIT_MODULES;
    112e:	ca e0       	ldi	r28, 0x0A	; 10
			break;
    1130:	93 cf       	rjmp	.-218    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_LORA_WAKEUP:
				print_debug("State: WAKE UP LORA");
    1132:	6a e2       	ldi	r22, 0x2A	; 42
    1134:	73 e0       	ldi	r23, 0x03	; 3
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				lmStatus=LM_wake_up();
    113c:	0e 94 8d 34 	call	0x691a	; 0x691a <LM_wake_up>
				state=lmStatus==LM_STATUS_SUCCESS?MAINPG_INIT_MODULES:MAINPG_FATAL_ERROR;
    1140:	81 11       	cpse	r24, r1
    1142:	7a cf       	rjmp	.-268    	; 0x1038 <MAINPG_start+0x24>
    1144:	ca e0       	ldi	r28, 0x0A	; 10
    1146:	88 cf       	rjmp	.-240    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_LORA_JOIN_TRY_AGAIN:
				print_debug("State: LORA TRY AGAIN");
    1148:	6e e3       	ldi	r22, 0x3E	; 62
    114a:	73 e0       	ldi	r23, 0x03	; 3
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				LED_join_denied();
    1152:	0e 94 61 34 	call	0x68c2	; 0x68c2 <LED_join_denied>
    1156:	2f ef       	ldi	r18, 0xFF	; 255
    1158:	33 eb       	ldi	r19, 0xB3	; 179
    115a:	84 ec       	ldi	r24, 0xC4	; 196
    115c:	94 e0       	ldi	r25, 0x04	; 4
    115e:	21 50       	subi	r18, 0x01	; 1
    1160:	30 40       	sbci	r19, 0x00	; 0
    1162:	80 40       	sbci	r24, 0x00	; 0
    1164:	90 40       	sbci	r25, 0x00	; 0
    1166:	d9 f7       	brne	.-10     	; 0x115e <__stack+0x5f>
    1168:	00 c0       	rjmp	.+0      	; 0x116a <__stack+0x6b>
    116a:	00 00       	nop
				_delay_ms(60000);
				state=MAINPG_LORA_JOIN_NETWORK;
    116c:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    116e:	74 cf       	rjmp	.-280    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/*                                                                      */
			/************************************************************************/
			case MAINPG_INIT_MODULES:
				print_debug("State: INIT MODULES");
    1170:	64 e5       	ldi	r22, 0x54	; 84
    1172:	73 e0       	ldi	r23, 0x03	; 3
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				ADC_set_conf_parameters(vccx, rrlx, ppmx);
    117a:	e0 90 6b 0f 	lds	r14, 0x0F6B	; 0x800f6b <ppmx>
    117e:	f0 90 6c 0f 	lds	r15, 0x0F6C	; 0x800f6c <ppmx+0x1>
    1182:	00 91 6d 0f 	lds	r16, 0x0F6D	; 0x800f6d <ppmx+0x2>
    1186:	10 91 6e 0f 	lds	r17, 0x0F6E	; 0x800f6e <ppmx+0x3>
    118a:	20 91 6f 0f 	lds	r18, 0x0F6F	; 0x800f6f <rrlx>
    118e:	30 91 70 0f 	lds	r19, 0x0F70	; 0x800f70 <rrlx+0x1>
    1192:	40 91 71 0f 	lds	r20, 0x0F71	; 0x800f71 <rrlx+0x2>
    1196:	50 91 72 0f 	lds	r21, 0x0F72	; 0x800f72 <rrlx+0x3>
    119a:	60 91 73 0f 	lds	r22, 0x0F73	; 0x800f73 <vccx>
    119e:	70 91 74 0f 	lds	r23, 0x0F74	; 0x800f74 <vccx+0x1>
    11a2:	80 91 75 0f 	lds	r24, 0x0F75	; 0x800f75 <vccx+0x2>
    11a6:	90 91 76 0f 	lds	r25, 0x0F76	; 0x800f76 <vccx+0x3>
    11aa:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <ADC_set_conf_parameters>
				scd30Status=SCD30_sensor_on();
    11ae:	0e 94 74 30 	call	0x60e8	; 0x60e8 <SCD30_sensor_on>
				state=scd30Status==SCD30_STATUS_SUCCESS?MAINPG_INIT_RTC:MAINPG_FATAL_ERROR;
    11b2:	81 11       	cpse	r24, r1
    11b4:	43 cf       	rjmp	.-378    	; 0x103c <MAINPG_start+0x28>
    11b6:	c7 e0       	ldi	r28, 0x07	; 7
    11b8:	4f cf       	rjmp	.-354    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* RTC                                                                  */
			/************************************************************************/
			case MAINPG_INIT_RTC:
				print_debug("State: INIT RTC");
    11ba:	68 e6       	ldi	r22, 0x68	; 104
    11bc:	73 e0       	ldi	r23, 0x03	; 3
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				rtcStatus=RTC_set_clock_out(1);
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <RTC_set_clock_out>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_CLEAR_WAKEUP:MAINPG_FATAL_ERROR;
    11ca:	81 11       	cpse	r24, r1
    11cc:	39 cf       	rjmp	.-398    	; 0x1040 <MAINPG_start+0x2c>
    11ce:	c9 e0       	ldi	r28, 0x09	; 9
    11d0:	43 cf       	rjmp	.-378    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_CLEAR_WAKEUP:
				print_debug("State: RTC CLEAR");
    11d2:	68 e7       	ldi	r22, 0x78	; 120
    11d4:	73 e0       	ldi	r23, 0x03	; 3
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				rtcStatus=RTC_clear_wake_up_interrupt();
    11dc:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <RTC_clear_wake_up_interrupt>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_SET_WAKEUP:MAINPG_FATAL_ERROR;
    11e0:	81 11       	cpse	r24, r1
    11e2:	30 cf       	rjmp	.-416    	; 0x1044 <MAINPG_start+0x30>
    11e4:	c8 e0       	ldi	r28, 0x08	; 8
    11e6:	38 cf       	rjmp	.-400    	; 0x1058 <MAINPG_start+0x44>
			break;
			
			case MAINPG_SET_WAKEUP:
				print_debug("State: RTC SET WAKEUP");
    11e8:	69 e8       	ldi	r22, 0x89	; 137
    11ea:	73 e0       	ldi	r23, 0x03	; 3
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				rtcStatus=set_wakeup();
    11f2:	0e 94 3f 34 	call	0x687e	; 0x687e <set_wakeup>
				state=rtcStatus==RTC_STATUS_SUCCESS?MAINPG_INIT_MRPP:MAINPG_FATAL_ERROR;
    11f6:	81 11       	cpse	r24, r1
    11f8:	27 cf       	rjmp	.-434    	; 0x1048 <MAINPG_start+0x34>
    11fa:	cb e0       	ldi	r28, 0x0B	; 11
    11fc:	2d cf       	rjmp	.-422    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* MRPP and data sampling                                               */
			/************************************************************************/
			case MAINPG_INIT_MRPP:
				print_debug("State: MRPP INIT");
    11fe:	6f e9       	ldi	r22, 0x9F	; 159
    1200:	73 e0       	ldi	r23, 0x03	; 3
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				groupId=EM_get_group_id();
    1208:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <EM_get_group_id>
				groupId=MRPP_init_group(cols, N_COLLECTIONS, groupId);
    120c:	48 2f       	mov	r20, r24
    120e:	67 e0       	ldi	r22, 0x07	; 7
    1210:	80 ed       	ldi	r24, 0xD0	; 208
    1212:	9e e0       	ldi	r25, 0x0E	; 14
    1214:	0e 94 c1 31 	call	0x6382	; 0x6382 <MRPP_init_group>
				EM_set_group_id(groupId);
    1218:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <EM_set_group_id>
				state=MAINPG_SEND_HEADER;
    121c:	cc e0       	ldi	r28, 0x0C	; 12
			break;
    121e:	1c cf       	rjmp	.-456    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_HEADER:
				if(!LM_is_free()){
    1220:	0e 94 30 34 	call	0x6860	; 0x6860 <LM_is_free>
    1224:	88 23       	and	r24, r24
    1226:	09 f4       	brne	.+2      	; 0x122a <__stack+0x12b>
    1228:	17 cf       	rjmp	.-466    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_HEADER;
					break;
				}
				print_debug("State: SEND HEADER");
    122a:	60 eb       	ldi	r22, 0xB0	; 176
    122c:	73 e0       	ldi	r23, 0x03	; 3
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				lmStatus=send_header();
    1234:	0e 94 75 2b 	call	0x56ea	; 0x56ea <send_header>
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
    1238:	4c e0       	ldi	r20, 0x0C	; 12
    123a:	6d e0       	ldi	r22, 0x0D	; 13
    123c:	0e 94 33 31 	call	0x6266	; 0x6266 <decode_header_tail_response>
    1240:	c8 2f       	mov	r28, r24
			break;
    1242:	0a cf       	rjmp	.-492    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
				stageStatus=stage_0();
    1244:	0e 94 7e 19 	call	0x32fc	; 0x32fc <stage_0>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1248:	6e e0       	ldi	r22, 0x0E	; 14
    124a:	0e 94 39 32 	call	0x6472	; 0x6472 <decode_stage_response>
				lmStatus=send_header();
				state=decode_header_tail_response(lmStatus, MAINPG_STAGE_0, MAINPG_SEND_HEADER);
			break;
			
			case MAINPG_STAGE_0:
				comeBackToState=MAINPG_STAGE_0;
    124e:	dc 2f       	mov	r29, r28
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
    1250:	c8 2f       	mov	r28, r24
			break;
    1252:	02 cf       	rjmp	.-508    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
				stageStatus=stage_1();
    1254:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <stage_1>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    1258:	6f e0       	ldi	r22, 0x0F	; 15
    125a:	0e 94 39 32 	call	0x6472	; 0x6472 <decode_stage_response>
				stageStatus=stage_0();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_1);
			break;
			
			case MAINPG_STAGE_1:
				comeBackToState=MAINPG_STAGE_1;
    125e:	dc 2f       	mov	r29, r28
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
    1260:	c8 2f       	mov	r28, r24
			break;
    1262:	fa ce       	rjmp	.-524    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
				stageStatus=stage_2();
    1264:	0e 94 ae 14 	call	0x295c	; 0x295c <stage_2>
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    1268:	60 e1       	ldi	r22, 0x10	; 16
    126a:	0e 94 39 32 	call	0x6472	; 0x6472 <decode_stage_response>
				stageStatus=stage_1();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_2);
			break;
			
			case MAINPG_STAGE_2:
				comeBackToState=MAINPG_STAGE_2;
    126e:	dc 2f       	mov	r29, r28
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
    1270:	c8 2f       	mov	r28, r24
			break;
    1272:	f2 ce       	rjmp	.-540    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
				stageStatus=stage_3();
    1274:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <stage_3>
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    1278:	62 e1       	ldi	r22, 0x12	; 18
    127a:	0e 94 39 32 	call	0x6472	; 0x6472 <decode_stage_response>
				stageStatus=stage_2();
				state=decode_stage_response(stageStatus, MAINPG_STAGE_3);
			break;
			
			case MAINPG_STAGE_3:
				comeBackToState=MAINPG_STAGE_3;
    127e:	dc 2f       	mov	r29, r28
				stageStatus=stage_3();
				state=decode_stage_response(stageStatus, MAINPG_SEND_ALL_DATA);
    1280:	c8 2f       	mov	r28, r24
			break;
    1282:	ea ce       	rjmp	.-556    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SEND_DATA:
				state=comeBackToState;
				if(MRPP_is_body_package_ready(&bodyIndex) && LM_is_free()){
    1284:	83 e9       	ldi	r24, 0x93	; 147
    1286:	9f e0       	ldi	r25, 0x0F	; 15
    1288:	0e 94 41 30 	call	0x6082	; 0x6082 <MRPP_is_body_package_ready>
    128c:	88 23       	and	r24, r24
    128e:	09 f4       	brne	.+2      	; 0x1292 <__stack+0x193>
    1290:	dd ce       	rjmp	.-582    	; 0x104c <MAINPG_start+0x38>
    1292:	0e 94 30 34 	call	0x6860	; 0x6860 <LM_is_free>
    1296:	88 23       	and	r24, r24
    1298:	09 f4       	brne	.+2      	; 0x129c <__stack+0x19d>
    129a:	da ce       	rjmp	.-588    	; 0x1050 <MAINPG_start+0x3c>
					lmStatus=send_body(bodyIndex);
    129c:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <bodyIndex>
    12a0:	90 91 94 0f 	lds	r25, 0x0F94	; 0x800f94 <bodyIndex+0x1>
    12a4:	0e 94 55 2b 	call	0x56aa	; 0x56aa <send_body>
					state=decode_body_response(bodyIndex, lmStatus, comeBackToState);
    12a8:	4d 2f       	mov	r20, r29
    12aa:	68 2f       	mov	r22, r24
    12ac:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <bodyIndex>
    12b0:	90 91 94 0f 	lds	r25, 0x0F94	; 0x800f94 <bodyIndex+0x1>
    12b4:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <decode_body_response>
    12b8:	c8 2f       	mov	r28, r24
    12ba:	ce ce       	rjmp	.-612    	; 0x1058 <MAINPG_start+0x44>
				}
			break;
			
			case MAINPG_SEND_ALL_DATA:
				if(MRPP_all_body_package_sent()){
    12bc:	0e 94 35 34 	call	0x686a	; 0x686a <MRPP_all_body_package_sent>
    12c0:	88 23       	and	r24, r24
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <__stack+0x1c7>
    12c4:	c7 ce       	rjmp	.-626    	; 0x1054 <MAINPG_start+0x40>
					state=MAINPG_SEND_TAIL;
    12c6:	c3 e1       	ldi	r28, 0x13	; 19
    12c8:	c7 ce       	rjmp	.-626    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_DATA;
				}
			break;
			
			case MAINPG_SEND_TAIL:	
				if(!LM_is_free()){
    12ca:	0e 94 30 34 	call	0x6860	; 0x6860 <LM_is_free>
    12ce:	88 23       	and	r24, r24
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <__stack+0x1d5>
    12d2:	c2 ce       	rjmp	.-636    	; 0x1058 <MAINPG_start+0x44>
					state=MAINPG_SEND_TAIL;
					break;
				}
				print_debug("State: SEND TAIL");
    12d4:	63 ec       	ldi	r22, 0xC3	; 195
    12d6:	73 e0       	ldi	r23, 0x03	; 3
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				lmStatus=send_tail();
    12de:	0e 94 94 2b 	call	0x5728	; 0x5728 <send_tail>
				state=decode_header_tail_response(lmStatus, MAINPG_SETUP_SLEEP, MAINPG_SEND_TAIL);
    12e2:	43 e1       	ldi	r20, 0x13	; 19
    12e4:	64 e1       	ldi	r22, 0x14	; 20
    12e6:	0e 94 33 31 	call	0x6266	; 0x6266 <decode_header_tail_response>
    12ea:	c8 2f       	mov	r28, r24
				
			break;
    12ec:	b5 ce       	rjmp	.-662    	; 0x1058 <MAINPG_start+0x44>
			
			/************************************************************************/
			/* Go to sleep                                                          */
			/************************************************************************/
			case MAINPG_SETUP_SLEEP:
				print_debug("State: SETUP SLEEP");
    12ee:	64 ed       	ldi	r22, 0xD4	; 212
    12f0:	73 e0       	ldi	r23, 0x03	; 3
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				lmStatus=LM_put_to_sleep();
    12f8:	0e 94 cf 32 	call	0x659e	; 0x659e <LM_put_to_sleep>
				// Set to false, so when it starts up it will do a restart of LORA module
				fromSleep=lmStatus==LM_STATUS_SUCCESS;
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	81 11       	cpse	r24, r1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	90 93 a9 0f 	sts	0x0FA9, r25	; 0x800fa9 <fromSleep>
				//Make sure all peripherals are turned of
				PM_HAL_adc_power(false);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	0e 94 4f 32 	call	0x649e	; 0x649e <PM_HAL_adc_power>
				PM_HAL_SCD30_power(false);
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	0e 94 63 32 	call	0x64c6	; 0x64c6 <PM_HAL_SCD30_power>
				PM_HAL_BC_power(false);
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	0e 94 6d 32 	call	0x64da	; 0x64da <PM_HAL_BC_power>
				PM_HAL_meth_power(false);
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	0e 94 59 32 	call	0x64b2	; 0x64b2 <PM_HAL_meth_power>
				PM_HAL_LED_power(false);
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	0e 94 77 32 	call	0x64ee	; 0x64ee <PM_HAL_LED_power>
				TC2_HAL_kill();
    1324:	0e 94 17 34 	call	0x682e	; 0x682e <TC2_HAL_kill>
				
				state=MAINPG_SLEEP;
    1328:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    132a:	96 ce       	rjmp	.-724    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_SLEEP:
				print_debug("State: SLEEP");
    132c:	67 ee       	ldi	r22, 0xE7	; 231
    132e:	73 e0       	ldi	r23, 0x03	; 3
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				PM_HAL_enter_power_down();
    1336:	0e 94 b3 2b 	call	0x5766	; 0x5766 <PM_HAL_enter_power_down>
				print_debug("State: SLEEP -> AWAKE");
    133a:	64 ef       	ldi	r22, 0xF4	; 244
    133c:	73 e0       	ldi	r23, 0x03	; 3
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				state=MAINPG_INIT_HW;
    1344:	c0 e0       	ldi	r28, 0x00	; 0
			break;
    1346:	88 ce       	rjmp	.-752    	; 0x1058 <MAINPG_start+0x44>
			/************************************************************************/
			/* Error handling                                                       */
			/************************************************************************/
			
			case MAINPG_CONF_ERR:
				print_debug("State: CONF ERR");
    1348:	6a e0       	ldi	r22, 0x0A	; 10
    134a:	74 e0       	ldi	r23, 0x04	; 4
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				LED_conf_err();
    1352:	0e 94 65 34 	call	0x68ca	; 0x68ca <LED_conf_err>
				print_debug("Conf err\n\r");
    1356:	6a e1       	ldi	r22, 0x1A	; 26
    1358:	74 e0       	ldi	r23, 0x04	; 4
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				state=MAINPG_END;
    1360:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1362:	7a ce       	rjmp	.-780    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_FATAL_ERROR:
				print_debug("State: FATAL ERR");
    1364:	65 e2       	ldi	r22, 0x25	; 37
    1366:	74 e0       	ldi	r23, 0x04	; 4
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				LED_fatal_err();
    136e:	0e 94 69 34 	call	0x68d2	; 0x68d2 <LED_fatal_err>
				fromSleep=false;
    1372:	10 92 a9 0f 	sts	0x0FA9, r1	; 0x800fa9 <fromSleep>
				state=MAINPG_END;
    1376:	c7 e1       	ldi	r28, 0x17	; 23
			break;
    1378:	6f ce       	rjmp	.-802    	; 0x1058 <MAINPG_start+0x44>
			
			case MAINPG_END:
				print_debug("State: END");
    137a:	66 e3       	ldi	r22, 0x36	; 54
    137c:	74 e0       	ldi	r23, 0x04	; 4
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	0e 94 00 32 	call	0x6400	; 0x6400 <send_msg>
				return;
			break;	
		}
	}
}
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	08 95       	ret

Disassembly of section .text.calc_crc8:

00005ac4 <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    5ac4:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5ac6:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    5ac8:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    5aca:	14 c0       	rjmp	.+40     	; 0x5af4 <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    5acc:	fa 01       	movw	r30, r20
    5ace:	e3 0f       	add	r30, r19
    5ad0:	f1 1d       	adc	r31, r1
    5ad2:	90 81       	ld	r25, Z
    5ad4:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    5ad6:	28 e0       	ldi	r18, 0x08	; 8
    5ad8:	0a c0       	rjmp	.+20     	; 0x5aee <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    5ada:	88 23       	and	r24, r24
    5adc:	34 f4       	brge	.+12     	; 0x5aea <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    5ade:	90 e0       	ldi	r25, 0x00	; 0
    5ae0:	88 0f       	add	r24, r24
    5ae2:	99 1f       	adc	r25, r25
    5ae4:	91 e3       	ldi	r25, 0x31	; 49
    5ae6:	89 27       	eor	r24, r25
    5ae8:	01 c0       	rjmp	.+2      	; 0x5aec <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    5aea:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    5aec:	21 50       	subi	r18, 0x01	; 1
    5aee:	21 11       	cpse	r18, r1
    5af0:	f4 cf       	rjmp	.-24     	; 0x5ada <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    5af2:	3f 5f       	subi	r19, 0xFF	; 255
    5af4:	36 17       	cp	r19, r22
    5af6:	50 f3       	brcs	.-44     	; 0x5acc <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    5af8:	08 95       	ret

Disassembly of section .text.get_decimal:

00003866 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    3866:	cf 92       	push	r12
    3868:	df 92       	push	r13
    386a:	ef 92       	push	r14
    386c:	ff 92       	push	r15
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    3878:	10 e0       	ldi	r17, 0x00	; 0
    387a:	08 c0       	rjmp	.+16     	; 0x388c <get_decimal+0x26>
	{
		if(str[i]=='.'){
    387c:	cc 0d       	add	r28, r12
    387e:	dd 1d       	adc	r29, r13
    3880:	88 81       	ld	r24, Y
    3882:	8e 32       	cpi	r24, 0x2E	; 46
    3884:	11 f4       	brne	.+4      	; 0x388a <get_decimal+0x24>
			index=i+1;
    3886:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    3888:	0c c0       	rjmp	.+24     	; 0x38a2 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    388a:	1f 5f       	subi	r17, 0xFF	; 255
    388c:	c1 2f       	mov	r28, r17
    388e:	d0 e0       	ldi	r29, 0x00	; 0
    3890:	b6 01       	movw	r22, r12
    3892:	80 e8       	ldi	r24, 0x80	; 128
    3894:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	c8 17       	cp	r28, r24
    389c:	d9 07       	cpc	r29, r25
    389e:	70 f3       	brcs	.-36     	; 0x387c <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    38a0:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    38a2:	11 23       	and	r17, r17
    38a4:	71 f1       	breq	.+92     	; 0x3902 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    38a6:	c1 0e       	add	r12, r17
    38a8:	d1 1c       	adc	r13, r1
    38aa:	80 e8       	ldi	r24, 0x80	; 128
    38ac:	e8 2e       	mov	r14, r24
    38ae:	8e 2d       	mov	r24, r14
    38b0:	b6 01       	movw	r22, r12
    38b2:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    38b6:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    38b8:	8e 2d       	mov	r24, r14
    38ba:	b6 01       	movw	r22, r12
    38bc:	0e 94 7d 34 	call	0x68fa	; 0x68fa <atoi>
    38c0:	8c 01       	movw	r16, r24
	float divisor=1;
    38c2:	0f 2e       	mov	r0, r31
    38c4:	c1 2c       	mov	r12, r1
    38c6:	d1 2c       	mov	r13, r1
    38c8:	f0 e8       	ldi	r31, 0x80	; 128
    38ca:	ef 2e       	mov	r14, r31
    38cc:	ff e3       	ldi	r31, 0x3F	; 63
    38ce:	ff 2e       	mov	r15, r31
    38d0:	f0 2d       	mov	r31, r0
	
	while(len>0){
    38d2:	0b c0       	rjmp	.+22     	; 0x38ea <get_decimal+0x84>
		divisor*=10;
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	40 e2       	ldi	r20, 0x20	; 32
    38da:	51 e4       	ldi	r21, 0x41	; 65
    38dc:	c7 01       	movw	r24, r14
    38de:	b6 01       	movw	r22, r12
    38e0:	0e 94 79 34 	call	0x68f2	; 0x68f2 <__mulsf3>
    38e4:	6b 01       	movw	r12, r22
    38e6:	7c 01       	movw	r14, r24
		len--;
    38e8:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    38ea:	c1 11       	cpse	r28, r1
    38ec:	f3 cf       	rjmp	.-26     	; 0x38d4 <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    38ee:	b8 01       	movw	r22, r16
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__floatunsisf>
    38f8:	a7 01       	movw	r20, r14
    38fa:	96 01       	movw	r18, r12
    38fc:	0e 94 75 34 	call	0x68ea	; 0x68ea <__divsf3>
    3900:	03 c0       	rjmp	.+6      	; 0x3908 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	70 e0       	ldi	r23, 0x00	; 0
    3906:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	1f 91       	pop	r17
    390e:	0f 91       	pop	r16
    3910:	ff 90       	pop	r15
    3912:	ef 90       	pop	r14
    3914:	df 90       	pop	r13
    3916:	cf 90       	pop	r12
    3918:	08 95       	ret

Disassembly of section .text.str2flaot:

00004f1a <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    4f1a:	cf 92       	push	r12
    4f1c:	df 92       	push	r13
    4f1e:	ef 92       	push	r14
    4f20:	ff 92       	push	r15
    4f22:	0f 93       	push	r16
    4f24:	1f 93       	push	r17
    4f26:	cf 93       	push	r28
    4f28:	df 93       	push	r29
    4f2a:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    4f2c:	bc 01       	movw	r22, r24
    4f2e:	80 e8       	ldi	r24, 0x80	; 128
    4f30:	0e 94 7d 34 	call	0x68fa	; 0x68fa <atoi>
    4f34:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    4f36:	c8 01       	movw	r24, r16
    4f38:	0e 94 33 1c 	call	0x3866	; 0x3866 <get_decimal>
    4f3c:	6b 01       	movw	r12, r22
    4f3e:	7c 01       	movw	r14, r24
	return intVal+deci;
    4f40:	be 01       	movw	r22, r28
    4f42:	80 e0       	ldi	r24, 0x00	; 0
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__floatunsisf>
    4f4a:	9b 01       	movw	r18, r22
    4f4c:	ac 01       	movw	r20, r24
    4f4e:	c7 01       	movw	r24, r14
    4f50:	b6 01       	movw	r22, r12
    4f52:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <__addsf3>
	
	
}
    4f56:	df 91       	pop	r29
    4f58:	cf 91       	pop	r28
    4f5a:	1f 91       	pop	r17
    4f5c:	0f 91       	pop	r16
    4f5e:	ff 90       	pop	r15
    4f60:	ef 90       	pop	r14
    4f62:	df 90       	pop	r13
    4f64:	cf 90       	pop	r12
    4f66:	08 95       	ret

Disassembly of section .text.is_float:

00004b92 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    4b92:	ef 92       	push	r14
    4b94:	ff 92       	push	r15
    4b96:	0f 93       	push	r16
    4b98:	1f 93       	push	r17
    4b9a:	cf 93       	push	r28
    4b9c:	df 93       	push	r29
    4b9e:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4ba0:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    4ba2:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    4ba4:	0d c0       	rjmp	.+26     	; 0x4bc0 <is_float+0x2e>
	{
		if(str[i]=='.'){
    4ba6:	ce 0d       	add	r28, r14
    4ba8:	df 1d       	adc	r29, r15
    4baa:	88 81       	ld	r24, Y
    4bac:	8e 32       	cpi	r24, 0x2E	; 46
    4bae:	21 f4       	brne	.+8      	; 0x4bb8 <is_float+0x26>
			if (got_dot)
    4bb0:	01 11       	cpse	r16, r1
    4bb2:	11 c0       	rjmp	.+34     	; 0x4bd6 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    4bb4:	01 e0       	ldi	r16, 0x01	; 1
    4bb6:	03 c0       	rjmp	.+6      	; 0x4bbe <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4bb8:	80 53       	subi	r24, 0x30	; 48
    4bba:	8a 30       	cpi	r24, 0x0A	; 10
    4bbc:	70 f4       	brcc	.+28     	; 0x4bda <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    4bbe:	1f 5f       	subi	r17, 0xFF	; 255
    4bc0:	c1 2f       	mov	r28, r17
    4bc2:	d0 e0       	ldi	r29, 0x00	; 0
    4bc4:	b7 01       	movw	r22, r14
    4bc6:	80 e8       	ldi	r24, 0x80	; 128
    4bc8:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <strlen>
    4bcc:	c8 17       	cp	r28, r24
    4bce:	d9 07       	cpc	r29, r25
    4bd0:	50 f3       	brcs	.-44     	; 0x4ba6 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	03 c0       	rjmp	.+6      	; 0x4bdc <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    4bd6:	80 e0       	ldi	r24, 0x00	; 0
    4bd8:	01 c0       	rjmp	.+2      	; 0x4bdc <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    4bda:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    4bdc:	df 91       	pop	r29
    4bde:	cf 91       	pop	r28
    4be0:	1f 91       	pop	r17
    4be2:	0f 91       	pop	r16
    4be4:	ff 90       	pop	r15
    4be6:	ef 90       	pop	r14
    4be8:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000066f6 <__subsf3>:
    66f6:	50 58       	subi	r21, 0x80	; 128

000066f8 <__addsf3>:
    66f8:	bb 27       	eor	r27, r27
    66fa:	aa 27       	eor	r26, r26
    66fc:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__addsf3x>
    6700:	0c 94 96 30 	jmp	0x612c	; 0x612c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000034a4 <__addsf3x>:
    34a4:	11 c0       	rjmp	.+34     	; 0x34c8 <__addsf3x+0x24>
    34a6:	0e 94 82 33 	call	0x6704	; 0x6704 <__fp_pscA>
    34aa:	38 f0       	brcs	.+14     	; 0x34ba <__addsf3x+0x16>
    34ac:	0e 94 89 33 	call	0x6712	; 0x6712 <__fp_pscB>
    34b0:	20 f0       	brcs	.+8      	; 0x34ba <__addsf3x+0x16>
    34b2:	39 f4       	brne	.+14     	; 0x34c2 <__addsf3x+0x1e>
    34b4:	9f 3f       	cpi	r25, 0xFF	; 255
    34b6:	19 f4       	brne	.+6      	; 0x34be <__addsf3x+0x1a>
    34b8:	26 f4       	brtc	.+8      	; 0x34c2 <__addsf3x+0x1e>
    34ba:	0c 94 99 34 	jmp	0x6932	; 0x6932 <__fp_nan>
    34be:	0e f4       	brtc	.+2      	; 0x34c2 <__addsf3x+0x1e>
    34c0:	e0 95       	com	r30
    34c2:	e7 fb       	bst	r30, 7
    34c4:	0c 94 00 34 	jmp	0x6800	; 0x6800 <__fp_inf>
    34c8:	e9 2f       	mov	r30, r25
    34ca:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <__fp_split3>
    34ce:	58 f3       	brcs	.-42     	; 0x34a6 <__addsf3x+0x2>
    34d0:	ba 17       	cp	r27, r26
    34d2:	62 07       	cpc	r22, r18
    34d4:	73 07       	cpc	r23, r19
    34d6:	84 07       	cpc	r24, r20
    34d8:	95 07       	cpc	r25, r21
    34da:	20 f0       	brcs	.+8      	; 0x34e4 <__addsf3x+0x40>
    34dc:	79 f4       	brne	.+30     	; 0x34fc <__addsf3x+0x58>
    34de:	a6 f5       	brtc	.+104    	; 0x3548 <__addsf3x+0xa4>
    34e0:	0c 94 90 33 	jmp	0x6720	; 0x6720 <__fp_zero>
    34e4:	0e f4       	brtc	.+2      	; 0x34e8 <__addsf3x+0x44>
    34e6:	e0 95       	com	r30
    34e8:	0b 2e       	mov	r0, r27
    34ea:	ba 2f       	mov	r27, r26
    34ec:	a0 2d       	mov	r26, r0
    34ee:	0b 01       	movw	r0, r22
    34f0:	b9 01       	movw	r22, r18
    34f2:	90 01       	movw	r18, r0
    34f4:	0c 01       	movw	r0, r24
    34f6:	ca 01       	movw	r24, r20
    34f8:	a0 01       	movw	r20, r0
    34fa:	11 24       	eor	r1, r1
    34fc:	ff 27       	eor	r31, r31
    34fe:	59 1b       	sub	r21, r25
    3500:	99 f0       	breq	.+38     	; 0x3528 <__addsf3x+0x84>
    3502:	59 3f       	cpi	r21, 0xF9	; 249
    3504:	50 f4       	brcc	.+20     	; 0x351a <__addsf3x+0x76>
    3506:	50 3e       	cpi	r21, 0xE0	; 224
    3508:	68 f1       	brcs	.+90     	; 0x3564 <__addsf3x+0xc0>
    350a:	1a 16       	cp	r1, r26
    350c:	f0 40       	sbci	r31, 0x00	; 0
    350e:	a2 2f       	mov	r26, r18
    3510:	23 2f       	mov	r18, r19
    3512:	34 2f       	mov	r19, r20
    3514:	44 27       	eor	r20, r20
    3516:	58 5f       	subi	r21, 0xF8	; 248
    3518:	f3 cf       	rjmp	.-26     	; 0x3500 <__addsf3x+0x5c>
    351a:	46 95       	lsr	r20
    351c:	37 95       	ror	r19
    351e:	27 95       	ror	r18
    3520:	a7 95       	ror	r26
    3522:	f0 40       	sbci	r31, 0x00	; 0
    3524:	53 95       	inc	r21
    3526:	c9 f7       	brne	.-14     	; 0x351a <__addsf3x+0x76>
    3528:	7e f4       	brtc	.+30     	; 0x3548 <__addsf3x+0xa4>
    352a:	1f 16       	cp	r1, r31
    352c:	ba 0b       	sbc	r27, r26
    352e:	62 0b       	sbc	r22, r18
    3530:	73 0b       	sbc	r23, r19
    3532:	84 0b       	sbc	r24, r20
    3534:	ba f0       	brmi	.+46     	; 0x3564 <__addsf3x+0xc0>
    3536:	91 50       	subi	r25, 0x01	; 1
    3538:	a1 f0       	breq	.+40     	; 0x3562 <__addsf3x+0xbe>
    353a:	ff 0f       	add	r31, r31
    353c:	bb 1f       	adc	r27, r27
    353e:	66 1f       	adc	r22, r22
    3540:	77 1f       	adc	r23, r23
    3542:	88 1f       	adc	r24, r24
    3544:	c2 f7       	brpl	.-16     	; 0x3536 <__addsf3x+0x92>
    3546:	0e c0       	rjmp	.+28     	; 0x3564 <__addsf3x+0xc0>
    3548:	ba 0f       	add	r27, r26
    354a:	62 1f       	adc	r22, r18
    354c:	73 1f       	adc	r23, r19
    354e:	84 1f       	adc	r24, r20
    3550:	48 f4       	brcc	.+18     	; 0x3564 <__addsf3x+0xc0>
    3552:	87 95       	ror	r24
    3554:	77 95       	ror	r23
    3556:	67 95       	ror	r22
    3558:	b7 95       	ror	r27
    355a:	f7 95       	ror	r31
    355c:	9e 3f       	cpi	r25, 0xFE	; 254
    355e:	08 f0       	brcs	.+2      	; 0x3562 <__addsf3x+0xbe>
    3560:	b0 cf       	rjmp	.-160    	; 0x34c2 <__addsf3x+0x1e>
    3562:	93 95       	inc	r25
    3564:	88 0f       	add	r24, r24
    3566:	08 f0       	brcs	.+2      	; 0x356a <__addsf3x+0xc6>
    3568:	99 27       	eor	r25, r25
    356a:	ee 0f       	add	r30, r30
    356c:	97 95       	ror	r25
    356e:	87 95       	ror	r24
    3570:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000068ea <__divsf3>:
    68ea:	0e 94 a3 18 	call	0x3146	; 0x3146 <__divsf3x>
    68ee:	0c 94 96 30 	jmp	0x612c	; 0x612c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00003146 <__divsf3x>:
    3146:	10 c0       	rjmp	.+32     	; 0x3168 <__divsf3x+0x22>
    3148:	0e 94 89 33 	call	0x6712	; 0x6712 <__fp_pscB>
    314c:	58 f0       	brcs	.+22     	; 0x3164 <__divsf3x+0x1e>
    314e:	0e 94 82 33 	call	0x6704	; 0x6704 <__fp_pscA>
    3152:	40 f0       	brcs	.+16     	; 0x3164 <__divsf3x+0x1e>
    3154:	29 f4       	brne	.+10     	; 0x3160 <__divsf3x+0x1a>
    3156:	5f 3f       	cpi	r21, 0xFF	; 255
    3158:	29 f0       	breq	.+10     	; 0x3164 <__divsf3x+0x1e>
    315a:	0c 94 00 34 	jmp	0x6800	; 0x6800 <__fp_inf>
    315e:	51 11       	cpse	r21, r1
    3160:	0c 94 91 33 	jmp	0x6722	; 0x6722 <__fp_szero>
    3164:	0c 94 99 34 	jmp	0x6932	; 0x6932 <__fp_nan>
    3168:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <__fp_split3>
    316c:	68 f3       	brcs	.-38     	; 0x3148 <__divsf3x+0x2>

0000316e <__divsf3_pse>:
    316e:	99 23       	and	r25, r25
    3170:	b1 f3       	breq	.-20     	; 0x315e <__divsf3x+0x18>
    3172:	55 23       	and	r21, r21
    3174:	91 f3       	breq	.-28     	; 0x315a <__divsf3x+0x14>
    3176:	95 1b       	sub	r25, r21
    3178:	55 0b       	sbc	r21, r21
    317a:	bb 27       	eor	r27, r27
    317c:	aa 27       	eor	r26, r26
    317e:	62 17       	cp	r22, r18
    3180:	73 07       	cpc	r23, r19
    3182:	84 07       	cpc	r24, r20
    3184:	38 f0       	brcs	.+14     	; 0x3194 <__divsf3_pse+0x26>
    3186:	9f 5f       	subi	r25, 0xFF	; 255
    3188:	5f 4f       	sbci	r21, 0xFF	; 255
    318a:	22 0f       	add	r18, r18
    318c:	33 1f       	adc	r19, r19
    318e:	44 1f       	adc	r20, r20
    3190:	aa 1f       	adc	r26, r26
    3192:	a9 f3       	breq	.-22     	; 0x317e <__divsf3_pse+0x10>
    3194:	35 d0       	rcall	.+106    	; 0x3200 <__divsf3_pse+0x92>
    3196:	0e 2e       	mov	r0, r30
    3198:	3a f0       	brmi	.+14     	; 0x31a8 <__divsf3_pse+0x3a>
    319a:	e0 e8       	ldi	r30, 0x80	; 128
    319c:	32 d0       	rcall	.+100    	; 0x3202 <__divsf3_pse+0x94>
    319e:	91 50       	subi	r25, 0x01	; 1
    31a0:	50 40       	sbci	r21, 0x00	; 0
    31a2:	e6 95       	lsr	r30
    31a4:	00 1c       	adc	r0, r0
    31a6:	ca f7       	brpl	.-14     	; 0x319a <__divsf3_pse+0x2c>
    31a8:	2b d0       	rcall	.+86     	; 0x3200 <__divsf3_pse+0x92>
    31aa:	fe 2f       	mov	r31, r30
    31ac:	29 d0       	rcall	.+82     	; 0x3200 <__divsf3_pse+0x92>
    31ae:	66 0f       	add	r22, r22
    31b0:	77 1f       	adc	r23, r23
    31b2:	88 1f       	adc	r24, r24
    31b4:	bb 1f       	adc	r27, r27
    31b6:	26 17       	cp	r18, r22
    31b8:	37 07       	cpc	r19, r23
    31ba:	48 07       	cpc	r20, r24
    31bc:	ab 07       	cpc	r26, r27
    31be:	b0 e8       	ldi	r27, 0x80	; 128
    31c0:	09 f0       	breq	.+2      	; 0x31c4 <__divsf3_pse+0x56>
    31c2:	bb 0b       	sbc	r27, r27
    31c4:	80 2d       	mov	r24, r0
    31c6:	bf 01       	movw	r22, r30
    31c8:	ff 27       	eor	r31, r31
    31ca:	93 58       	subi	r25, 0x83	; 131
    31cc:	5f 4f       	sbci	r21, 0xFF	; 255
    31ce:	3a f0       	brmi	.+14     	; 0x31de <__divsf3_pse+0x70>
    31d0:	9e 3f       	cpi	r25, 0xFE	; 254
    31d2:	51 05       	cpc	r21, r1
    31d4:	78 f0       	brcs	.+30     	; 0x31f4 <__divsf3_pse+0x86>
    31d6:	0c 94 00 34 	jmp	0x6800	; 0x6800 <__fp_inf>
    31da:	0c 94 91 33 	jmp	0x6722	; 0x6722 <__fp_szero>
    31de:	5f 3f       	cpi	r21, 0xFF	; 255
    31e0:	e4 f3       	brlt	.-8      	; 0x31da <__divsf3_pse+0x6c>
    31e2:	98 3e       	cpi	r25, 0xE8	; 232
    31e4:	d4 f3       	brlt	.-12     	; 0x31da <__divsf3_pse+0x6c>
    31e6:	86 95       	lsr	r24
    31e8:	77 95       	ror	r23
    31ea:	67 95       	ror	r22
    31ec:	b7 95       	ror	r27
    31ee:	f7 95       	ror	r31
    31f0:	9f 5f       	subi	r25, 0xFF	; 255
    31f2:	c9 f7       	brne	.-14     	; 0x31e6 <__divsf3_pse+0x78>
    31f4:	88 0f       	add	r24, r24
    31f6:	91 1d       	adc	r25, r1
    31f8:	96 95       	lsr	r25
    31fa:	87 95       	ror	r24
    31fc:	97 f9       	bld	r25, 7
    31fe:	08 95       	ret
    3200:	e1 e0       	ldi	r30, 0x01	; 1
    3202:	66 0f       	add	r22, r22
    3204:	77 1f       	adc	r23, r23
    3206:	88 1f       	adc	r24, r24
    3208:	bb 1f       	adc	r27, r27
    320a:	62 17       	cp	r22, r18
    320c:	73 07       	cpc	r23, r19
    320e:	84 07       	cpc	r24, r20
    3210:	ba 07       	cpc	r27, r26
    3212:	20 f0       	brcs	.+8      	; 0x321c <__divsf3_pse+0xae>
    3214:	62 1b       	sub	r22, r18
    3216:	73 0b       	sbc	r23, r19
    3218:	84 0b       	sbc	r24, r20
    321a:	ba 0b       	sbc	r27, r26
    321c:	ee 1f       	adc	r30, r30
    321e:	88 f7       	brcc	.-30     	; 0x3202 <__divsf3_pse+0x94>
    3220:	e0 95       	com	r30
    3222:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000049cc <__fixunssfsi>:
    49cc:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <__fp_splitA>
    49d0:	88 f0       	brcs	.+34     	; 0x49f4 <__fixunssfsi+0x28>
    49d2:	9f 57       	subi	r25, 0x7F	; 127
    49d4:	98 f0       	brcs	.+38     	; 0x49fc <__fixunssfsi+0x30>
    49d6:	b9 2f       	mov	r27, r25
    49d8:	99 27       	eor	r25, r25
    49da:	b7 51       	subi	r27, 0x17	; 23
    49dc:	b0 f0       	brcs	.+44     	; 0x4a0a <__fixunssfsi+0x3e>
    49de:	e1 f0       	breq	.+56     	; 0x4a18 <__fixunssfsi+0x4c>
    49e0:	66 0f       	add	r22, r22
    49e2:	77 1f       	adc	r23, r23
    49e4:	88 1f       	adc	r24, r24
    49e6:	99 1f       	adc	r25, r25
    49e8:	1a f0       	brmi	.+6      	; 0x49f0 <__fixunssfsi+0x24>
    49ea:	ba 95       	dec	r27
    49ec:	c9 f7       	brne	.-14     	; 0x49e0 <__fixunssfsi+0x14>
    49ee:	14 c0       	rjmp	.+40     	; 0x4a18 <__fixunssfsi+0x4c>
    49f0:	b1 30       	cpi	r27, 0x01	; 1
    49f2:	91 f0       	breq	.+36     	; 0x4a18 <__fixunssfsi+0x4c>
    49f4:	0e 94 90 33 	call	0x6720	; 0x6720 <__fp_zero>
    49f8:	b1 e0       	ldi	r27, 0x01	; 1
    49fa:	08 95       	ret
    49fc:	0c 94 90 33 	jmp	0x6720	; 0x6720 <__fp_zero>
    4a00:	67 2f       	mov	r22, r23
    4a02:	78 2f       	mov	r23, r24
    4a04:	88 27       	eor	r24, r24
    4a06:	b8 5f       	subi	r27, 0xF8	; 248
    4a08:	39 f0       	breq	.+14     	; 0x4a18 <__fixunssfsi+0x4c>
    4a0a:	b9 3f       	cpi	r27, 0xF9	; 249
    4a0c:	cc f3       	brlt	.-14     	; 0x4a00 <__fixunssfsi+0x34>
    4a0e:	86 95       	lsr	r24
    4a10:	77 95       	ror	r23
    4a12:	67 95       	ror	r22
    4a14:	b3 95       	inc	r27
    4a16:	d9 f7       	brne	.-10     	; 0x4a0e <__fixunssfsi+0x42>
    4a18:	3e f4       	brtc	.+14     	; 0x4a28 <__fixunssfsi+0x5c>
    4a1a:	90 95       	com	r25
    4a1c:	80 95       	com	r24
    4a1e:	70 95       	com	r23
    4a20:	61 95       	neg	r22
    4a22:	7f 4f       	sbci	r23, 0xFF	; 255
    4a24:	8f 4f       	sbci	r24, 0xFF	; 255
    4a26:	9f 4f       	sbci	r25, 0xFF	; 255
    4a28:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000041ec <__floatunsisf>:
    41ec:	e8 94       	clt
    41ee:	09 c0       	rjmp	.+18     	; 0x4202 <__floatsisf+0x12>

000041f0 <__floatsisf>:
    41f0:	97 fb       	bst	r25, 7
    41f2:	3e f4       	brtc	.+14     	; 0x4202 <__floatsisf+0x12>
    41f4:	90 95       	com	r25
    41f6:	80 95       	com	r24
    41f8:	70 95       	com	r23
    41fa:	61 95       	neg	r22
    41fc:	7f 4f       	sbci	r23, 0xFF	; 255
    41fe:	8f 4f       	sbci	r24, 0xFF	; 255
    4200:	9f 4f       	sbci	r25, 0xFF	; 255
    4202:	99 23       	and	r25, r25
    4204:	a9 f0       	breq	.+42     	; 0x4230 <__floatsisf+0x40>
    4206:	f9 2f       	mov	r31, r25
    4208:	96 e9       	ldi	r25, 0x96	; 150
    420a:	bb 27       	eor	r27, r27
    420c:	93 95       	inc	r25
    420e:	f6 95       	lsr	r31
    4210:	87 95       	ror	r24
    4212:	77 95       	ror	r23
    4214:	67 95       	ror	r22
    4216:	b7 95       	ror	r27
    4218:	f1 11       	cpse	r31, r1
    421a:	f8 cf       	rjmp	.-16     	; 0x420c <__floatsisf+0x1c>
    421c:	fa f4       	brpl	.+62     	; 0x425c <__floatsisf+0x6c>
    421e:	bb 0f       	add	r27, r27
    4220:	11 f4       	brne	.+4      	; 0x4226 <__floatsisf+0x36>
    4222:	60 ff       	sbrs	r22, 0
    4224:	1b c0       	rjmp	.+54     	; 0x425c <__floatsisf+0x6c>
    4226:	6f 5f       	subi	r22, 0xFF	; 255
    4228:	7f 4f       	sbci	r23, 0xFF	; 255
    422a:	8f 4f       	sbci	r24, 0xFF	; 255
    422c:	9f 4f       	sbci	r25, 0xFF	; 255
    422e:	16 c0       	rjmp	.+44     	; 0x425c <__floatsisf+0x6c>
    4230:	88 23       	and	r24, r24
    4232:	11 f0       	breq	.+4      	; 0x4238 <__floatsisf+0x48>
    4234:	96 e9       	ldi	r25, 0x96	; 150
    4236:	11 c0       	rjmp	.+34     	; 0x425a <__floatsisf+0x6a>
    4238:	77 23       	and	r23, r23
    423a:	21 f0       	breq	.+8      	; 0x4244 <__floatsisf+0x54>
    423c:	9e e8       	ldi	r25, 0x8E	; 142
    423e:	87 2f       	mov	r24, r23
    4240:	76 2f       	mov	r23, r22
    4242:	05 c0       	rjmp	.+10     	; 0x424e <__floatsisf+0x5e>
    4244:	66 23       	and	r22, r22
    4246:	71 f0       	breq	.+28     	; 0x4264 <__floatsisf+0x74>
    4248:	96 e8       	ldi	r25, 0x86	; 134
    424a:	86 2f       	mov	r24, r22
    424c:	70 e0       	ldi	r23, 0x00	; 0
    424e:	60 e0       	ldi	r22, 0x00	; 0
    4250:	2a f0       	brmi	.+10     	; 0x425c <__floatsisf+0x6c>
    4252:	9a 95       	dec	r25
    4254:	66 0f       	add	r22, r22
    4256:	77 1f       	adc	r23, r23
    4258:	88 1f       	adc	r24, r24
    425a:	da f7       	brpl	.-10     	; 0x4252 <__floatsisf+0x62>
    425c:	88 0f       	add	r24, r24
    425e:	96 95       	lsr	r25
    4260:	87 95       	ror	r24
    4262:	97 f9       	bld	r25, 7
    4264:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006800 <__fp_inf>:
    6800:	97 f9       	bld	r25, 7
    6802:	9f 67       	ori	r25, 0x7F	; 127
    6804:	80 e8       	ldi	r24, 0x80	; 128
    6806:	70 e0       	ldi	r23, 0x00	; 0
    6808:	60 e0       	ldi	r22, 0x00	; 0
    680a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006932 <__fp_nan>:
    6932:	9f ef       	ldi	r25, 0xFF	; 255
    6934:	80 ec       	ldi	r24, 0xC0	; 192
    6936:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006704 <__fp_pscA>:
    6704:	00 24       	eor	r0, r0
    6706:	0a 94       	dec	r0
    6708:	16 16       	cp	r1, r22
    670a:	17 06       	cpc	r1, r23
    670c:	18 06       	cpc	r1, r24
    670e:	09 06       	cpc	r0, r25
    6710:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006712 <__fp_pscB>:
    6712:	00 24       	eor	r0, r0
    6714:	0a 94       	dec	r0
    6716:	12 16       	cp	r1, r18
    6718:	13 06       	cpc	r1, r19
    671a:	14 06       	cpc	r1, r20
    671c:	05 06       	cpc	r0, r21
    671e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000612c <__fp_round>:
    612c:	09 2e       	mov	r0, r25
    612e:	03 94       	inc	r0
    6130:	00 0c       	add	r0, r0
    6132:	11 f4       	brne	.+4      	; 0x6138 <__fp_round+0xc>
    6134:	88 23       	and	r24, r24
    6136:	52 f0       	brmi	.+20     	; 0x614c <__fp_round+0x20>
    6138:	bb 0f       	add	r27, r27
    613a:	40 f4       	brcc	.+16     	; 0x614c <__fp_round+0x20>
    613c:	bf 2b       	or	r27, r31
    613e:	11 f4       	brne	.+4      	; 0x6144 <__fp_round+0x18>
    6140:	60 ff       	sbrs	r22, 0
    6142:	04 c0       	rjmp	.+8      	; 0x614c <__fp_round+0x20>
    6144:	6f 5f       	subi	r22, 0xFF	; 255
    6146:	7f 4f       	sbci	r23, 0xFF	; 255
    6148:	8f 4f       	sbci	r24, 0xFF	; 255
    614a:	9f 4f       	sbci	r25, 0xFF	; 255
    614c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000054d8 <__fp_split3>:
    54d8:	57 fd       	sbrc	r21, 7
    54da:	90 58       	subi	r25, 0x80	; 128
    54dc:	44 0f       	add	r20, r20
    54de:	55 1f       	adc	r21, r21
    54e0:	59 f0       	breq	.+22     	; 0x54f8 <__fp_splitA+0x10>
    54e2:	5f 3f       	cpi	r21, 0xFF	; 255
    54e4:	71 f0       	breq	.+28     	; 0x5502 <__fp_splitA+0x1a>
    54e6:	47 95       	ror	r20

000054e8 <__fp_splitA>:
    54e8:	88 0f       	add	r24, r24
    54ea:	97 fb       	bst	r25, 7
    54ec:	99 1f       	adc	r25, r25
    54ee:	61 f0       	breq	.+24     	; 0x5508 <__fp_splitA+0x20>
    54f0:	9f 3f       	cpi	r25, 0xFF	; 255
    54f2:	79 f0       	breq	.+30     	; 0x5512 <__fp_splitA+0x2a>
    54f4:	87 95       	ror	r24
    54f6:	08 95       	ret
    54f8:	12 16       	cp	r1, r18
    54fa:	13 06       	cpc	r1, r19
    54fc:	14 06       	cpc	r1, r20
    54fe:	55 1f       	adc	r21, r21
    5500:	f2 cf       	rjmp	.-28     	; 0x54e6 <__fp_split3+0xe>
    5502:	46 95       	lsr	r20
    5504:	f1 df       	rcall	.-30     	; 0x54e8 <__fp_splitA>
    5506:	08 c0       	rjmp	.+16     	; 0x5518 <__fp_splitA+0x30>
    5508:	16 16       	cp	r1, r22
    550a:	17 06       	cpc	r1, r23
    550c:	18 06       	cpc	r1, r24
    550e:	99 1f       	adc	r25, r25
    5510:	f1 cf       	rjmp	.-30     	; 0x54f4 <__fp_splitA+0xc>
    5512:	86 95       	lsr	r24
    5514:	71 05       	cpc	r23, r1
    5516:	61 05       	cpc	r22, r1
    5518:	08 94       	sec
    551a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00006720 <__fp_zero>:
    6720:	e8 94       	clt

00006722 <__fp_szero>:
    6722:	bb 27       	eor	r27, r27
    6724:	66 27       	eor	r22, r22
    6726:	77 27       	eor	r23, r23
    6728:	cb 01       	movw	r24, r22
    672a:	97 f9       	bld	r25, 7
    672c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000068f2 <__mulsf3>:
    68f2:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <__mulsf3x>
    68f6:	0c 94 96 30 	jmp	0x612c	; 0x612c <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000033d0 <__mulsf3x>:
    33d0:	0f c0       	rjmp	.+30     	; 0x33f0 <__mulsf3x+0x20>
    33d2:	0e 94 82 33 	call	0x6704	; 0x6704 <__fp_pscA>
    33d6:	38 f0       	brcs	.+14     	; 0x33e6 <__mulsf3x+0x16>
    33d8:	0e 94 89 33 	call	0x6712	; 0x6712 <__fp_pscB>
    33dc:	20 f0       	brcs	.+8      	; 0x33e6 <__mulsf3x+0x16>
    33de:	95 23       	and	r25, r21
    33e0:	11 f0       	breq	.+4      	; 0x33e6 <__mulsf3x+0x16>
    33e2:	0c 94 00 34 	jmp	0x6800	; 0x6800 <__fp_inf>
    33e6:	0c 94 99 34 	jmp	0x6932	; 0x6932 <__fp_nan>
    33ea:	11 24       	eor	r1, r1
    33ec:	0c 94 91 33 	jmp	0x6722	; 0x6722 <__fp_szero>
    33f0:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <__fp_split3>
    33f4:	70 f3       	brcs	.-36     	; 0x33d2 <__mulsf3x+0x2>

000033f6 <__mulsf3_pse>:
    33f6:	95 9f       	mul	r25, r21
    33f8:	c1 f3       	breq	.-16     	; 0x33ea <__mulsf3x+0x1a>
    33fa:	95 0f       	add	r25, r21
    33fc:	50 e0       	ldi	r21, 0x00	; 0
    33fe:	55 1f       	adc	r21, r21
    3400:	62 9f       	mul	r22, r18
    3402:	f0 01       	movw	r30, r0
    3404:	72 9f       	mul	r23, r18
    3406:	bb 27       	eor	r27, r27
    3408:	f0 0d       	add	r31, r0
    340a:	b1 1d       	adc	r27, r1
    340c:	63 9f       	mul	r22, r19
    340e:	aa 27       	eor	r26, r26
    3410:	f0 0d       	add	r31, r0
    3412:	b1 1d       	adc	r27, r1
    3414:	aa 1f       	adc	r26, r26
    3416:	64 9f       	mul	r22, r20
    3418:	66 27       	eor	r22, r22
    341a:	b0 0d       	add	r27, r0
    341c:	a1 1d       	adc	r26, r1
    341e:	66 1f       	adc	r22, r22
    3420:	82 9f       	mul	r24, r18
    3422:	22 27       	eor	r18, r18
    3424:	b0 0d       	add	r27, r0
    3426:	a1 1d       	adc	r26, r1
    3428:	62 1f       	adc	r22, r18
    342a:	73 9f       	mul	r23, r19
    342c:	b0 0d       	add	r27, r0
    342e:	a1 1d       	adc	r26, r1
    3430:	62 1f       	adc	r22, r18
    3432:	83 9f       	mul	r24, r19
    3434:	a0 0d       	add	r26, r0
    3436:	61 1d       	adc	r22, r1
    3438:	22 1f       	adc	r18, r18
    343a:	74 9f       	mul	r23, r20
    343c:	33 27       	eor	r19, r19
    343e:	a0 0d       	add	r26, r0
    3440:	61 1d       	adc	r22, r1
    3442:	23 1f       	adc	r18, r19
    3444:	84 9f       	mul	r24, r20
    3446:	60 0d       	add	r22, r0
    3448:	21 1d       	adc	r18, r1
    344a:	82 2f       	mov	r24, r18
    344c:	76 2f       	mov	r23, r22
    344e:	6a 2f       	mov	r22, r26
    3450:	11 24       	eor	r1, r1
    3452:	9f 57       	subi	r25, 0x7F	; 127
    3454:	50 40       	sbci	r21, 0x00	; 0
    3456:	9a f0       	brmi	.+38     	; 0x347e <__mulsf3_pse+0x88>
    3458:	f1 f0       	breq	.+60     	; 0x3496 <__mulsf3_pse+0xa0>
    345a:	88 23       	and	r24, r24
    345c:	4a f0       	brmi	.+18     	; 0x3470 <__mulsf3_pse+0x7a>
    345e:	ee 0f       	add	r30, r30
    3460:	ff 1f       	adc	r31, r31
    3462:	bb 1f       	adc	r27, r27
    3464:	66 1f       	adc	r22, r22
    3466:	77 1f       	adc	r23, r23
    3468:	88 1f       	adc	r24, r24
    346a:	91 50       	subi	r25, 0x01	; 1
    346c:	50 40       	sbci	r21, 0x00	; 0
    346e:	a9 f7       	brne	.-22     	; 0x345a <__mulsf3_pse+0x64>
    3470:	9e 3f       	cpi	r25, 0xFE	; 254
    3472:	51 05       	cpc	r21, r1
    3474:	80 f0       	brcs	.+32     	; 0x3496 <__mulsf3_pse+0xa0>
    3476:	0c 94 00 34 	jmp	0x6800	; 0x6800 <__fp_inf>
    347a:	0c 94 91 33 	jmp	0x6722	; 0x6722 <__fp_szero>
    347e:	5f 3f       	cpi	r21, 0xFF	; 255
    3480:	e4 f3       	brlt	.-8      	; 0x347a <__mulsf3_pse+0x84>
    3482:	98 3e       	cpi	r25, 0xE8	; 232
    3484:	d4 f3       	brlt	.-12     	; 0x347a <__mulsf3_pse+0x84>
    3486:	86 95       	lsr	r24
    3488:	77 95       	ror	r23
    348a:	67 95       	ror	r22
    348c:	b7 95       	ror	r27
    348e:	f7 95       	ror	r31
    3490:	e7 95       	ror	r30
    3492:	9f 5f       	subi	r25, 0xFF	; 255
    3494:	c1 f7       	brne	.-16     	; 0x3486 <__mulsf3_pse+0x90>
    3496:	fe 2b       	or	r31, r30
    3498:	88 0f       	add	r24, r24
    349a:	91 1d       	adc	r25, r1
    349c:	96 95       	lsr	r25
    349e:	87 95       	ror	r24
    34a0:	97 f9       	bld	r25, 7
    34a2:	08 95       	ret

Disassembly of section .text.avrlibc:

000008d0 <vfprintf>:
     8d0:	a4 e1       	ldi	r26, 0x14	; 20
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	ee e6       	ldi	r30, 0x6E	; 110
     8d6:	f4 e0       	ldi	r31, 0x04	; 4
     8d8:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <__prologue_saves__>
     8dc:	6c 01       	movw	r12, r24
     8de:	1a 01       	movw	r2, r20
     8e0:	46 2e       	mov	r4, r22
     8e2:	59 01       	movw	r10, r18
     8e4:	fc 01       	movw	r30, r24
     8e6:	10 86       	std	Z+8, r1	; 0x08
     8e8:	17 82       	std	Z+7, r1	; 0x07
     8ea:	84 81       	ldd	r24, Z+4	; 0x04
     8ec:	81 ff       	sbrs	r24, 1
     8ee:	62 c3       	rjmp	.+1732   	; 0xfb4 <vfprintf+0x6e4>
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	9d 87       	std	Y+13, r25	; 0x0d
     8f6:	8c 87       	std	Y+12, r24	; 0x0c
     8f8:	a0 e8       	ldi	r26, 0x80	; 128
     8fa:	8a 8b       	std	Y+18, r24	; 0x12
     8fc:	9b 8b       	std	Y+19, r25	; 0x13
     8fe:	ac 8b       	std	Y+20, r26	; 0x14
     900:	f1 01       	movw	r30, r2
     902:	84 91       	lpm	r24, Z
     904:	47 fc       	sbrc	r4, 7
     906:	80 81       	ld	r24, Z
     908:	88 23       	and	r24, r24
     90a:	09 f4       	brne	.+2      	; 0x90e <vfprintf+0x3e>
     90c:	4f c3       	rjmp	.+1694   	; 0xfac <vfprintf+0x6dc>
     90e:	44 2d       	mov	r20, r4
     910:	91 01       	movw	r18, r2
     912:	2f 5f       	subi	r18, 0xFF	; 255
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	85 32       	cpi	r24, 0x25	; 37
     91a:	19 f0       	breq	.+6      	; 0x922 <vfprintf+0x52>
     91c:	19 01       	movw	r2, r18
     91e:	44 2e       	mov	r4, r20
     920:	0a c0       	rjmp	.+20     	; 0x936 <vfprintf+0x66>
     922:	f9 01       	movw	r30, r18
     924:	84 91       	lpm	r24, Z
     926:	47 fd       	sbrc	r20, 7
     928:	80 81       	ld	r24, Z
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	29 0e       	add	r2, r25
     92e:	31 1c       	adc	r3, r1
     930:	41 1c       	adc	r4, r1
     932:	85 32       	cpi	r24, 0x25	; 37
     934:	49 f4       	brne	.+18     	; 0x948 <vfprintf+0x78>
     936:	b6 01       	movw	r22, r12
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     93e:	bf 86       	std	Y+15, r11	; 0x0f
     940:	ae 86       	std	Y+14, r10	; 0x0e
     942:	ae 84       	ldd	r10, Y+14	; 0x0e
     944:	bf 84       	ldd	r11, Y+15	; 0x0f
     946:	dc cf       	rjmp	.-72     	; 0x900 <vfprintf+0x30>
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	f1 2c       	mov	r15, r1
     94c:	00 e0       	ldi	r16, 0x00	; 0
     94e:	00 32       	cpi	r16, 0x20	; 32
     950:	a0 f4       	brcc	.+40     	; 0x97a <vfprintf+0xaa>
     952:	8b 32       	cpi	r24, 0x2B	; 43
     954:	69 f0       	breq	.+26     	; 0x970 <vfprintf+0xa0>
     956:	30 f4       	brcc	.+12     	; 0x964 <vfprintf+0x94>
     958:	80 32       	cpi	r24, 0x20	; 32
     95a:	59 f0       	breq	.+22     	; 0x972 <vfprintf+0xa2>
     95c:	83 32       	cpi	r24, 0x23	; 35
     95e:	69 f4       	brne	.+26     	; 0x97a <vfprintf+0xaa>
     960:	00 61       	ori	r16, 0x10	; 16
     962:	2c c0       	rjmp	.+88     	; 0x9bc <vfprintf+0xec>
     964:	8d 32       	cpi	r24, 0x2D	; 45
     966:	39 f0       	breq	.+14     	; 0x976 <vfprintf+0xa6>
     968:	80 33       	cpi	r24, 0x30	; 48
     96a:	39 f4       	brne	.+14     	; 0x97a <vfprintf+0xaa>
     96c:	01 60       	ori	r16, 0x01	; 1
     96e:	26 c0       	rjmp	.+76     	; 0x9bc <vfprintf+0xec>
     970:	02 60       	ori	r16, 0x02	; 2
     972:	04 60       	ori	r16, 0x04	; 4
     974:	23 c0       	rjmp	.+70     	; 0x9bc <vfprintf+0xec>
     976:	08 60       	ori	r16, 0x08	; 8
     978:	21 c0       	rjmp	.+66     	; 0x9bc <vfprintf+0xec>
     97a:	07 fd       	sbrc	r16, 7
     97c:	29 c0       	rjmp	.+82     	; 0x9d0 <vfprintf+0x100>
     97e:	90 ed       	ldi	r25, 0xD0	; 208
     980:	98 0f       	add	r25, r24
     982:	9a 30       	cpi	r25, 0x0A	; 10
     984:	78 f4       	brcc	.+30     	; 0x9a4 <vfprintf+0xd4>
     986:	06 ff       	sbrs	r16, 6
     988:	06 c0       	rjmp	.+12     	; 0x996 <vfprintf+0xc6>
     98a:	aa e0       	ldi	r26, 0x0A	; 10
     98c:	1a 9f       	mul	r17, r26
     98e:	90 0d       	add	r25, r0
     990:	11 24       	eor	r1, r1
     992:	19 2f       	mov	r17, r25
     994:	13 c0       	rjmp	.+38     	; 0x9bc <vfprintf+0xec>
     996:	ea e0       	ldi	r30, 0x0A	; 10
     998:	fe 9e       	mul	r15, r30
     99a:	90 0d       	add	r25, r0
     99c:	11 24       	eor	r1, r1
     99e:	f9 2e       	mov	r15, r25
     9a0:	00 62       	ori	r16, 0x20	; 32
     9a2:	0c c0       	rjmp	.+24     	; 0x9bc <vfprintf+0xec>
     9a4:	8e 32       	cpi	r24, 0x2E	; 46
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <vfprintf+0xe0>
     9a8:	06 fd       	sbrc	r16, 6
     9aa:	00 c3       	rjmp	.+1536   	; 0xfac <vfprintf+0x6dc>
     9ac:	00 64       	ori	r16, 0x40	; 64
     9ae:	06 c0       	rjmp	.+12     	; 0x9bc <vfprintf+0xec>
     9b0:	8c 36       	cpi	r24, 0x6C	; 108
     9b2:	11 f4       	brne	.+4      	; 0x9b8 <vfprintf+0xe8>
     9b4:	00 68       	ori	r16, 0x80	; 128
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0xec>
     9b8:	88 36       	cpi	r24, 0x68	; 104
     9ba:	51 f4       	brne	.+20     	; 0x9d0 <vfprintf+0x100>
     9bc:	f1 01       	movw	r30, r2
     9be:	84 91       	lpm	r24, Z
     9c0:	47 fc       	sbrc	r4, 7
     9c2:	80 81       	ld	r24, Z
     9c4:	ff ef       	ldi	r31, 0xFF	; 255
     9c6:	2f 1a       	sub	r2, r31
     9c8:	3f 0a       	sbc	r3, r31
     9ca:	4f 0a       	sbc	r4, r31
     9cc:	81 11       	cpse	r24, r1
     9ce:	bf cf       	rjmp	.-130    	; 0x94e <vfprintf+0x7e>
     9d0:	9b eb       	ldi	r25, 0xBB	; 187
     9d2:	98 0f       	add	r25, r24
     9d4:	93 30       	cpi	r25, 0x03	; 3
     9d6:	18 f4       	brcc	.+6      	; 0x9de <vfprintf+0x10e>
     9d8:	00 61       	ori	r16, 0x10	; 16
     9da:	80 5e       	subi	r24, 0xE0	; 224
     9dc:	06 c0       	rjmp	.+12     	; 0x9ea <vfprintf+0x11a>
     9de:	9b e9       	ldi	r25, 0x9B	; 155
     9e0:	98 0f       	add	r25, r24
     9e2:	93 30       	cpi	r25, 0x03	; 3
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <vfprintf+0x118>
     9e6:	66 c1       	rjmp	.+716    	; 0xcb4 <vfprintf+0x3e4>
     9e8:	0f 7e       	andi	r16, 0xEF	; 239
     9ea:	06 ff       	sbrs	r16, 6
     9ec:	16 e0       	ldi	r17, 0x06	; 6
     9ee:	0f 73       	andi	r16, 0x3F	; 63
     9f0:	70 2e       	mov	r7, r16
     9f2:	85 36       	cpi	r24, 0x65	; 101
     9f4:	21 f4       	brne	.+8      	; 0x9fe <vfprintf+0x12e>
     9f6:	20 2f       	mov	r18, r16
     9f8:	20 64       	ori	r18, 0x40	; 64
     9fa:	72 2e       	mov	r7, r18
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <vfprintf+0x13e>
     9fe:	86 36       	cpi	r24, 0x66	; 102
     a00:	21 f4       	brne	.+8      	; 0xa0a <vfprintf+0x13a>
     a02:	80 2f       	mov	r24, r16
     a04:	80 68       	ori	r24, 0x80	; 128
     a06:	78 2e       	mov	r7, r24
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <vfprintf+0x13e>
     a0a:	11 11       	cpse	r17, r1
     a0c:	11 50       	subi	r17, 0x01	; 1
     a0e:	77 fe       	sbrs	r7, 7
     a10:	07 c0       	rjmp	.+14     	; 0xa20 <vfprintf+0x150>
     a12:	1c 33       	cpi	r17, 0x3C	; 60
     a14:	50 f4       	brcc	.+20     	; 0xa2a <vfprintf+0x15a>
     a16:	ee 24       	eor	r14, r14
     a18:	e3 94       	inc	r14
     a1a:	e1 0e       	add	r14, r17
     a1c:	27 e0       	ldi	r18, 0x07	; 7
     a1e:	0b c0       	rjmp	.+22     	; 0xa36 <vfprintf+0x166>
     a20:	18 30       	cpi	r17, 0x08	; 8
     a22:	38 f0       	brcs	.+14     	; 0xa32 <vfprintf+0x162>
     a24:	27 e0       	ldi	r18, 0x07	; 7
     a26:	17 e0       	ldi	r17, 0x07	; 7
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <vfprintf+0x164>
     a2a:	27 e0       	ldi	r18, 0x07	; 7
     a2c:	6c e3       	ldi	r22, 0x3C	; 60
     a2e:	e6 2e       	mov	r14, r22
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <vfprintf+0x166>
     a32:	21 2f       	mov	r18, r17
     a34:	e1 2c       	mov	r14, r1
     a36:	f5 01       	movw	r30, r10
     a38:	34 96       	adiw	r30, 0x04	; 4
     a3a:	ff 87       	std	Y+15, r31	; 0x0f
     a3c:	ee 87       	std	Y+14, r30	; 0x0e
     a3e:	f5 01       	movw	r30, r10
     a40:	60 81       	ld	r22, Z
     a42:	71 81       	ldd	r23, Z+1	; 0x01
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	93 81       	ldd	r25, Z+3	; 0x03
     a48:	0e 2d       	mov	r16, r14
     a4a:	ae 01       	movw	r20, r28
     a4c:	4f 5f       	subi	r20, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__ftoa_engine>
     a54:	5c 01       	movw	r10, r24
     a56:	59 80       	ldd	r5, Y+1	; 0x01
     a58:	50 fe       	sbrs	r5, 0
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <vfprintf+0x190>
     a5c:	53 fe       	sbrs	r5, 3
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <vfprintf+0x19c>
     a60:	71 fc       	sbrc	r7, 1
     a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x1a0>
     a64:	72 fe       	sbrs	r7, 2
     a66:	06 c0       	rjmp	.+12     	; 0xa74 <vfprintf+0x1a4>
     a68:	00 e2       	ldi	r16, 0x20	; 32
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <vfprintf+0x1a6>
     a6c:	0d e2       	ldi	r16, 0x2D	; 45
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x1a6>
     a70:	0b e2       	ldi	r16, 0x2B	; 43
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <vfprintf+0x1a6>
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	85 2d       	mov	r24, r5
     a78:	8c 70       	andi	r24, 0x0C	; 12
     a7a:	19 f0       	breq	.+6      	; 0xa82 <vfprintf+0x1b2>
     a7c:	01 11       	cpse	r16, r1
     a7e:	73 c2       	rjmp	.+1254   	; 0xf66 <vfprintf+0x696>
     a80:	be c2       	rjmp	.+1404   	; 0xffe <vfprintf+0x72e>
     a82:	77 fe       	sbrs	r7, 7
     a84:	0f c0       	rjmp	.+30     	; 0xaa4 <vfprintf+0x1d4>
     a86:	ea 0c       	add	r14, r10
     a88:	54 fe       	sbrs	r5, 4
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <vfprintf+0x1c4>
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	81 33       	cpi	r24, 0x31	; 49
     a90:	09 f4       	brne	.+2      	; 0xa94 <vfprintf+0x1c4>
     a92:	ea 94       	dec	r14
     a94:	1e 14       	cp	r1, r14
     a96:	74 f5       	brge	.+92     	; 0xaf4 <vfprintf+0x224>
     a98:	28 e0       	ldi	r18, 0x08	; 8
     a9a:	2e 15       	cp	r18, r14
     a9c:	78 f5       	brcc	.+94     	; 0xafc <vfprintf+0x22c>
     a9e:	38 e0       	ldi	r19, 0x08	; 8
     aa0:	e3 2e       	mov	r14, r19
     aa2:	2c c0       	rjmp	.+88     	; 0xafc <vfprintf+0x22c>
     aa4:	76 fc       	sbrc	r7, 6
     aa6:	2a c0       	rjmp	.+84     	; 0xafc <vfprintf+0x22c>
     aa8:	81 2f       	mov	r24, r17
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	8a 15       	cp	r24, r10
     aae:	9b 05       	cpc	r25, r11
     ab0:	9c f0       	brlt	.+38     	; 0xad8 <vfprintf+0x208>
     ab2:	8c ef       	ldi	r24, 0xFC	; 252
     ab4:	a8 16       	cp	r10, r24
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	b8 06       	cpc	r11, r24
     aba:	74 f0       	brlt	.+28     	; 0xad8 <vfprintf+0x208>
     abc:	97 2d       	mov	r25, r7
     abe:	90 68       	ori	r25, 0x80	; 128
     ac0:	79 2e       	mov	r7, r25
     ac2:	0a c0       	rjmp	.+20     	; 0xad8 <vfprintf+0x208>
     ac4:	e2 e0       	ldi	r30, 0x02	; 2
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	ec 0f       	add	r30, r28
     aca:	fd 1f       	adc	r31, r29
     acc:	e1 0f       	add	r30, r17
     ace:	f1 1d       	adc	r31, r1
     ad0:	80 81       	ld	r24, Z
     ad2:	80 33       	cpi	r24, 0x30	; 48
     ad4:	19 f4       	brne	.+6      	; 0xadc <vfprintf+0x20c>
     ad6:	11 50       	subi	r17, 0x01	; 1
     ad8:	11 11       	cpse	r17, r1
     ada:	f4 cf       	rjmp	.-24     	; 0xac4 <vfprintf+0x1f4>
     adc:	77 fe       	sbrs	r7, 7
     ade:	0e c0       	rjmp	.+28     	; 0xafc <vfprintf+0x22c>
     ae0:	ee 24       	eor	r14, r14
     ae2:	e3 94       	inc	r14
     ae4:	e1 0e       	add	r14, r17
     ae6:	81 2f       	mov	r24, r17
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a8 16       	cp	r10, r24
     aec:	b9 06       	cpc	r11, r25
     aee:	2c f4       	brge	.+10     	; 0xafa <vfprintf+0x22a>
     af0:	1a 19       	sub	r17, r10
     af2:	04 c0       	rjmp	.+8      	; 0xafc <vfprintf+0x22c>
     af4:	ee 24       	eor	r14, r14
     af6:	e3 94       	inc	r14
     af8:	01 c0       	rjmp	.+2      	; 0xafc <vfprintf+0x22c>
     afa:	10 e0       	ldi	r17, 0x00	; 0
     afc:	77 fe       	sbrs	r7, 7
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <vfprintf+0x23c>
     b00:	1a 14       	cp	r1, r10
     b02:	1b 04       	cpc	r1, r11
     b04:	34 f4       	brge	.+12     	; 0xb12 <vfprintf+0x242>
     b06:	c5 01       	movw	r24, r10
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <vfprintf+0x246>
     b0c:	85 e0       	ldi	r24, 0x05	; 5
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <vfprintf+0x246>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	01 11       	cpse	r16, r1
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	11 23       	and	r17, r17
     b1c:	31 f0       	breq	.+12     	; 0xb2a <vfprintf+0x25a>
     b1e:	21 2f       	mov	r18, r17
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	2f 5f       	subi	r18, 0xFF	; 255
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	2f 2d       	mov	r18, r15
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	14 f4       	brge	.+4      	; 0xb38 <vfprintf+0x268>
     b34:	f8 1a       	sub	r15, r24
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <vfprintf+0x26a>
     b38:	f1 2c       	mov	r15, r1
     b3a:	87 2d       	mov	r24, r7
     b3c:	89 70       	andi	r24, 0x09	; 9
     b3e:	49 f4       	brne	.+18     	; 0xb52 <vfprintf+0x282>
     b40:	ff 20       	and	r15, r15
     b42:	39 f0       	breq	.+14     	; 0xb52 <vfprintf+0x282>
     b44:	b6 01       	movw	r22, r12
     b46:	80 e2       	ldi	r24, 0x20	; 32
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     b4e:	fa 94       	dec	r15
     b50:	f7 cf       	rjmp	.-18     	; 0xb40 <vfprintf+0x270>
     b52:	00 23       	and	r16, r16
     b54:	29 f0       	breq	.+10     	; 0xb60 <vfprintf+0x290>
     b56:	b6 01       	movw	r22, r12
     b58:	80 2f       	mov	r24, r16
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     b60:	73 fc       	sbrc	r7, 3
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <vfprintf+0x2a6>
     b64:	ff 20       	and	r15, r15
     b66:	39 f0       	breq	.+14     	; 0xb76 <vfprintf+0x2a6>
     b68:	b6 01       	movw	r22, r12
     b6a:	80 e3       	ldi	r24, 0x30	; 48
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     b72:	fa 94       	dec	r15
     b74:	f7 cf       	rjmp	.-18     	; 0xb64 <vfprintf+0x294>
     b76:	77 fe       	sbrs	r7, 7
     b78:	49 c0       	rjmp	.+146    	; 0xc0c <vfprintf+0x33c>
     b7a:	35 01       	movw	r6, r10
     b7c:	b7 fe       	sbrs	r11, 7
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x2b4>
     b80:	61 2c       	mov	r6, r1
     b82:	71 2c       	mov	r7, r1
     b84:	c5 01       	movw	r24, r10
     b86:	86 19       	sub	r24, r6
     b88:	97 09       	sbc	r25, r7
     b8a:	88 24       	eor	r8, r8
     b8c:	83 94       	inc	r8
     b8e:	91 2c       	mov	r9, r1
     b90:	8c 0e       	add	r8, r28
     b92:	9d 1e       	adc	r9, r29
     b94:	88 0e       	add	r8, r24
     b96:	99 1e       	adc	r9, r25
     b98:	f5 01       	movw	r30, r10
     b9a:	ee 19       	sub	r30, r14
     b9c:	f1 09       	sbc	r31, r1
     b9e:	f9 8b       	std	Y+17, r31	; 0x11
     ba0:	e8 8b       	std	Y+16, r30	; 0x10
     ba2:	01 2f       	mov	r16, r17
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	11 95       	neg	r17
     ba8:	01 95       	neg	r16
     baa:	11 09       	sbc	r17, r1
     bac:	ff ef       	ldi	r31, 0xFF	; 255
     bae:	6f 16       	cp	r6, r31
     bb0:	7f 06       	cpc	r7, r31
     bb2:	29 f4       	brne	.+10     	; 0xbbe <vfprintf+0x2ee>
     bb4:	b6 01       	movw	r22, r12
     bb6:	8e e2       	ldi	r24, 0x2E	; 46
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     bbe:	a6 14       	cp	r10, r6
     bc0:	b7 04       	cpc	r11, r7
     bc2:	44 f0       	brlt	.+16     	; 0xbd4 <vfprintf+0x304>
     bc4:	88 89       	ldd	r24, Y+16	; 0x10
     bc6:	99 89       	ldd	r25, Y+17	; 0x11
     bc8:	86 15       	cp	r24, r6
     bca:	97 05       	cpc	r25, r7
     bcc:	1c f4       	brge	.+6      	; 0xbd4 <vfprintf+0x304>
     bce:	f4 01       	movw	r30, r8
     bd0:	81 81       	ldd	r24, Z+1	; 0x01
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <vfprintf+0x306>
     bd4:	80 e3       	ldi	r24, 0x30	; 48
     bd6:	f1 e0       	ldi	r31, 0x01	; 1
     bd8:	6f 1a       	sub	r6, r31
     bda:	71 08       	sbc	r7, r1
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	82 1a       	sub	r8, r18
     be0:	92 0a       	sbc	r9, r18
     be2:	60 16       	cp	r6, r16
     be4:	71 06       	cpc	r7, r17
     be6:	2c f0       	brlt	.+10     	; 0xbf2 <vfprintf+0x322>
     be8:	b6 01       	movw	r22, r12
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     bf0:	dd cf       	rjmp	.-70     	; 0xbac <vfprintf+0x2dc>
     bf2:	a6 14       	cp	r10, r6
     bf4:	b7 04       	cpc	r11, r7
     bf6:	39 f4       	brne	.+14     	; 0xc06 <vfprintf+0x336>
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	96 33       	cpi	r25, 0x36	; 54
     bfc:	18 f4       	brcc	.+6      	; 0xc04 <vfprintf+0x334>
     bfe:	95 33       	cpi	r25, 0x35	; 53
     c00:	11 f4       	brne	.+4      	; 0xc06 <vfprintf+0x336>
     c02:	54 fe       	sbrs	r5, 4
     c04:	81 e3       	ldi	r24, 0x31	; 49
     c06:	b6 01       	movw	r22, r12
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	51 c0       	rjmp	.+162    	; 0xcae <vfprintf+0x3de>
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	81 33       	cpi	r24, 0x31	; 49
     c10:	19 f0       	breq	.+6      	; 0xc18 <vfprintf+0x348>
     c12:	95 2d       	mov	r25, r5
     c14:	9f 7e       	andi	r25, 0xEF	; 239
     c16:	59 2e       	mov	r5, r25
     c18:	b6 01       	movw	r22, r12
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     c20:	11 11       	cpse	r17, r1
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <vfprintf+0x35e>
     c24:	74 fc       	sbrc	r7, 4
     c26:	1c c0       	rjmp	.+56     	; 0xc60 <vfprintf+0x390>
     c28:	85 e6       	ldi	r24, 0x65	; 101
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	1b c0       	rjmp	.+54     	; 0xc64 <vfprintf+0x394>
     c2e:	b6 01       	movw	r22, r12
     c30:	8e e2       	ldi	r24, 0x2E	; 46
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     c38:	02 e0       	ldi	r16, 0x02	; 2
     c3a:	01 0f       	add	r16, r17
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	11 e0       	ldi	r17, 0x01	; 1
     c40:	18 0f       	add	r17, r24
     c42:	e1 e0       	ldi	r30, 0x01	; 1
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	ec 0f       	add	r30, r28
     c48:	fd 1f       	adc	r31, r29
     c4a:	e8 0f       	add	r30, r24
     c4c:	f1 1d       	adc	r31, r1
     c4e:	80 81       	ld	r24, Z
     c50:	b6 01       	movw	r22, r12
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     c58:	81 2f       	mov	r24, r17
     c5a:	10 13       	cpse	r17, r16
     c5c:	f0 cf       	rjmp	.-32     	; 0xc3e <vfprintf+0x36e>
     c5e:	e2 cf       	rjmp	.-60     	; 0xc24 <vfprintf+0x354>
     c60:	85 e4       	ldi	r24, 0x45	; 69
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	b6 01       	movw	r22, r12
     c66:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     c6a:	b7 fc       	sbrc	r11, 7
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <vfprintf+0x3a8>
     c6e:	a1 14       	cp	r10, r1
     c70:	b1 04       	cpc	r11, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <vfprintf+0x3b2>
     c74:	54 fe       	sbrs	r5, 4
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <vfprintf+0x3b2>
     c78:	b1 94       	neg	r11
     c7a:	a1 94       	neg	r10
     c7c:	b1 08       	sbc	r11, r1
     c7e:	8d e2       	ldi	r24, 0x2D	; 45
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <vfprintf+0x3b4>
     c82:	8b e2       	ldi	r24, 0x2B	; 43
     c84:	b6 01       	movw	r22, r12
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     c8c:	80 e3       	ldi	r24, 0x30	; 48
     c8e:	ea e0       	ldi	r30, 0x0A	; 10
     c90:	ae 16       	cp	r10, r30
     c92:	b1 04       	cpc	r11, r1
     c94:	2c f0       	brlt	.+10     	; 0xca0 <vfprintf+0x3d0>
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	aa e0       	ldi	r26, 0x0A	; 10
     c9a:	aa 1a       	sub	r10, r26
     c9c:	b1 08       	sbc	r11, r1
     c9e:	f7 cf       	rjmp	.-18     	; 0xc8e <vfprintf+0x3be>
     ca0:	b6 01       	movw	r22, r12
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     ca8:	b6 01       	movw	r22, r12
     caa:	c5 01       	movw	r24, r10
     cac:	c0 96       	adiw	r24, 0x30	; 48
     cae:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     cb2:	72 c1       	rjmp	.+740    	; 0xf98 <vfprintf+0x6c8>
     cb4:	83 36       	cpi	r24, 0x63	; 99
     cb6:	31 f0       	breq	.+12     	; 0xcc4 <vfprintf+0x3f4>
     cb8:	83 37       	cpi	r24, 0x73	; 115
     cba:	91 f0       	breq	.+36     	; 0xce0 <vfprintf+0x410>
     cbc:	83 35       	cpi	r24, 0x53	; 83
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <vfprintf+0x3f2>
     cc0:	5d c0       	rjmp	.+186    	; 0xd7c <vfprintf+0x4ac>
     cc2:	24 c0       	rjmp	.+72     	; 0xd0c <vfprintf+0x43c>
     cc4:	c5 01       	movw	r24, r10
     cc6:	02 96       	adiw	r24, 0x02	; 2
     cc8:	9f 87       	std	Y+15, r25	; 0x0f
     cca:	8e 87       	std	Y+14, r24	; 0x0e
     ccc:	f5 01       	movw	r30, r10
     cce:	80 81       	ld	r24, Z
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	6a 88       	ldd	r6, Y+18	; 0x12
     cd4:	7b 88       	ldd	r7, Y+19	; 0x13
     cd6:	8c 88       	ldd	r8, Y+20	; 0x14
     cd8:	aa 24       	eor	r10, r10
     cda:	a3 94       	inc	r10
     cdc:	b1 2c       	mov	r11, r1
     cde:	14 c0       	rjmp	.+40     	; 0xd08 <vfprintf+0x438>
     ce0:	c5 01       	movw	r24, r10
     ce2:	03 96       	adiw	r24, 0x03	; 3
     ce4:	9f 87       	std	Y+15, r25	; 0x0f
     ce6:	8e 87       	std	Y+14, r24	; 0x0e
     ce8:	f5 01       	movw	r30, r10
     cea:	60 80       	ld	r6, Z
     cec:	71 80       	ldd	r7, Z+1	; 0x01
     cee:	82 80       	ldd	r8, Z+2	; 0x02
     cf0:	06 ff       	sbrs	r16, 6
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <vfprintf+0x42a>
     cf4:	41 2f       	mov	r20, r17
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <vfprintf+0x42e>
     cfa:	4f ef       	ldi	r20, 0xFF	; 255
     cfc:	5f ef       	ldi	r21, 0xFF	; 255
     cfe:	88 2d       	mov	r24, r8
     d00:	b3 01       	movw	r22, r6
     d02:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <strnlen>
     d06:	5c 01       	movw	r10, r24
     d08:	0f 77       	andi	r16, 0x7F	; 127
     d0a:	15 c0       	rjmp	.+42     	; 0xd36 <vfprintf+0x466>
     d0c:	c5 01       	movw	r24, r10
     d0e:	03 96       	adiw	r24, 0x03	; 3
     d10:	9f 87       	std	Y+15, r25	; 0x0f
     d12:	8e 87       	std	Y+14, r24	; 0x0e
     d14:	f5 01       	movw	r30, r10
     d16:	60 80       	ld	r6, Z
     d18:	71 80       	ldd	r7, Z+1	; 0x01
     d1a:	82 80       	ldd	r8, Z+2	; 0x02
     d1c:	06 ff       	sbrs	r16, 6
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <vfprintf+0x456>
     d20:	41 2f       	mov	r20, r17
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <vfprintf+0x45a>
     d26:	4f ef       	ldi	r20, 0xFF	; 255
     d28:	5f ef       	ldi	r21, 0xFF	; 255
     d2a:	88 2d       	mov	r24, r8
     d2c:	b3 01       	movw	r22, r6
     d2e:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <strnlen>
     d32:	5c 01       	movw	r10, r24
     d34:	00 68       	ori	r16, 0x80	; 128
     d36:	03 fd       	sbrc	r16, 3
     d38:	1d c0       	rjmp	.+58     	; 0xd74 <vfprintf+0x4a4>
     d3a:	8f 2d       	mov	r24, r15
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a8 16       	cp	r10, r24
     d40:	b9 06       	cpc	r11, r25
     d42:	c0 f4       	brcc	.+48     	; 0xd74 <vfprintf+0x4a4>
     d44:	b6 01       	movw	r22, r12
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     d4e:	fa 94       	dec	r15
     d50:	f4 cf       	rjmp	.-24     	; 0xd3a <vfprintf+0x46a>
     d52:	f3 01       	movw	r30, r6
     d54:	84 91       	lpm	r24, Z
     d56:	87 fc       	sbrc	r8, 7
     d58:	80 81       	ld	r24, Z
     d5a:	ff ef       	ldi	r31, 0xFF	; 255
     d5c:	6f 1a       	sub	r6, r31
     d5e:	7f 0a       	sbc	r7, r31
     d60:	8f 0a       	sbc	r8, r31
     d62:	b6 01       	movw	r22, r12
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     d6a:	f1 10       	cpse	r15, r1
     d6c:	fa 94       	dec	r15
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	a2 1a       	sub	r10, r18
     d72:	b1 08       	sbc	r11, r1
     d74:	a1 14       	cp	r10, r1
     d76:	b1 04       	cpc	r11, r1
     d78:	61 f7       	brne	.-40     	; 0xd52 <vfprintf+0x482>
     d7a:	0e c1       	rjmp	.+540    	; 0xf98 <vfprintf+0x6c8>
     d7c:	84 36       	cpi	r24, 0x64	; 100
     d7e:	11 f0       	breq	.+4      	; 0xd84 <vfprintf+0x4b4>
     d80:	89 36       	cpi	r24, 0x69	; 105
     d82:	79 f5       	brne	.+94     	; 0xde2 <vfprintf+0x512>
     d84:	c5 01       	movw	r24, r10
     d86:	07 ff       	sbrs	r16, 7
     d88:	09 c0       	rjmp	.+18     	; 0xd9c <vfprintf+0x4cc>
     d8a:	04 96       	adiw	r24, 0x04	; 4
     d8c:	9f 87       	std	Y+15, r25	; 0x0f
     d8e:	8e 87       	std	Y+14, r24	; 0x0e
     d90:	f5 01       	movw	r30, r10
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <vfprintf+0x4e0>
     d9c:	02 96       	adiw	r24, 0x02	; 2
     d9e:	9f 87       	std	Y+15, r25	; 0x0f
     da0:	8e 87       	std	Y+14, r24	; 0x0e
     da2:	f5 01       	movw	r30, r10
     da4:	60 81       	ld	r22, Z
     da6:	71 81       	ldd	r23, Z+1	; 0x01
     da8:	07 2e       	mov	r0, r23
     daa:	00 0c       	add	r0, r0
     dac:	88 0b       	sbc	r24, r24
     dae:	99 0b       	sbc	r25, r25
     db0:	0f 76       	andi	r16, 0x6F	; 111
     db2:	e0 2e       	mov	r14, r16
     db4:	97 ff       	sbrs	r25, 7
     db6:	0a c0       	rjmp	.+20     	; 0xdcc <vfprintf+0x4fc>
     db8:	90 95       	com	r25
     dba:	80 95       	com	r24
     dbc:	70 95       	com	r23
     dbe:	61 95       	neg	r22
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8f 4f       	sbci	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	f0 2f       	mov	r31, r16
     dc8:	f0 68       	ori	r31, 0x80	; 128
     dca:	ef 2e       	mov	r14, r31
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	ae 01       	movw	r20, r28
     dd2:	4f 5f       	subi	r20, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__ultoa_invert>
     dda:	a8 2e       	mov	r10, r24
     ddc:	2c 85       	ldd	r18, Y+12	; 0x0c
     dde:	a2 1a       	sub	r10, r18
     de0:	4b c0       	rjmp	.+150    	; 0xe78 <vfprintf+0x5a8>
     de2:	85 37       	cpi	r24, 0x75	; 117
     de4:	29 f4       	brne	.+10     	; 0xdf0 <vfprintf+0x520>
     de6:	0f 7e       	andi	r16, 0xEF	; 239
     de8:	e0 2e       	mov	r14, r16
     dea:	2a e0       	ldi	r18, 0x0A	; 10
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	25 c0       	rjmp	.+74     	; 0xe3a <vfprintf+0x56a>
     df0:	90 2f       	mov	r25, r16
     df2:	99 7f       	andi	r25, 0xF9	; 249
     df4:	e9 2e       	mov	r14, r25
     df6:	8f 36       	cpi	r24, 0x6F	; 111
     df8:	c1 f0       	breq	.+48     	; 0xe2a <vfprintf+0x55a>
     dfa:	18 f4       	brcc	.+6      	; 0xe02 <vfprintf+0x532>
     dfc:	88 35       	cpi	r24, 0x58	; 88
     dfe:	79 f0       	breq	.+30     	; 0xe1e <vfprintf+0x54e>
     e00:	d5 c0       	rjmp	.+426    	; 0xfac <vfprintf+0x6dc>
     e02:	80 37       	cpi	r24, 0x70	; 112
     e04:	19 f0       	breq	.+6      	; 0xe0c <vfprintf+0x53c>
     e06:	88 37       	cpi	r24, 0x78	; 120
     e08:	21 f0       	breq	.+8      	; 0xe12 <vfprintf+0x542>
     e0a:	d0 c0       	rjmp	.+416    	; 0xfac <vfprintf+0x6dc>
     e0c:	a9 2f       	mov	r26, r25
     e0e:	a0 61       	ori	r26, 0x10	; 16
     e10:	ea 2e       	mov	r14, r26
     e12:	e4 fe       	sbrs	r14, 4
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <vfprintf+0x560>
     e16:	ee 2d       	mov	r30, r14
     e18:	e4 60       	ori	r30, 0x04	; 4
     e1a:	ee 2e       	mov	r14, r30
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <vfprintf+0x560>
     e1e:	04 ff       	sbrs	r16, 4
     e20:	0a c0       	rjmp	.+20     	; 0xe36 <vfprintf+0x566>
     e22:	f9 2f       	mov	r31, r25
     e24:	f6 60       	ori	r31, 0x06	; 6
     e26:	ef 2e       	mov	r14, r31
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <vfprintf+0x566>
     e2a:	28 e0       	ldi	r18, 0x08	; 8
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <vfprintf+0x56a>
     e30:	20 e1       	ldi	r18, 0x10	; 16
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <vfprintf+0x56a>
     e36:	20 e1       	ldi	r18, 0x10	; 16
     e38:	32 e0       	ldi	r19, 0x02	; 2
     e3a:	c5 01       	movw	r24, r10
     e3c:	e7 fe       	sbrs	r14, 7
     e3e:	09 c0       	rjmp	.+18     	; 0xe52 <vfprintf+0x582>
     e40:	04 96       	adiw	r24, 0x04	; 4
     e42:	9f 87       	std	Y+15, r25	; 0x0f
     e44:	8e 87       	std	Y+14, r24	; 0x0e
     e46:	f5 01       	movw	r30, r10
     e48:	60 81       	ld	r22, Z
     e4a:	71 81       	ldd	r23, Z+1	; 0x01
     e4c:	82 81       	ldd	r24, Z+2	; 0x02
     e4e:	93 81       	ldd	r25, Z+3	; 0x03
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <vfprintf+0x592>
     e52:	02 96       	adiw	r24, 0x02	; 2
     e54:	9f 87       	std	Y+15, r25	; 0x0f
     e56:	8e 87       	std	Y+14, r24	; 0x0e
     e58:	f5 01       	movw	r30, r10
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	ae 01       	movw	r20, r28
     e64:	4f 5f       	subi	r20, 0xFF	; 255
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__ultoa_invert>
     e6c:	a8 2e       	mov	r10, r24
     e6e:	fc 85       	ldd	r31, Y+12	; 0x0c
     e70:	af 1a       	sub	r10, r31
     e72:	2e 2d       	mov	r18, r14
     e74:	2f 77       	andi	r18, 0x7F	; 127
     e76:	e2 2e       	mov	r14, r18
     e78:	e6 fe       	sbrs	r14, 6
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <vfprintf+0x5c2>
     e7c:	0e 2d       	mov	r16, r14
     e7e:	0e 7f       	andi	r16, 0xFE	; 254
     e80:	a1 16       	cp	r10, r17
     e82:	50 f4       	brcc	.+20     	; 0xe98 <vfprintf+0x5c8>
     e84:	e4 fe       	sbrs	r14, 4
     e86:	0a c0       	rjmp	.+20     	; 0xe9c <vfprintf+0x5cc>
     e88:	e2 fc       	sbrc	r14, 2
     e8a:	08 c0       	rjmp	.+16     	; 0xe9c <vfprintf+0x5cc>
     e8c:	0e 2d       	mov	r16, r14
     e8e:	0e 7e       	andi	r16, 0xEE	; 238
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <vfprintf+0x5cc>
     e92:	ba 2c       	mov	r11, r10
     e94:	0e 2d       	mov	r16, r14
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <vfprintf+0x5ce>
     e98:	ba 2c       	mov	r11, r10
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <vfprintf+0x5ce>
     e9c:	b1 2e       	mov	r11, r17
     e9e:	04 ff       	sbrs	r16, 4
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <vfprintf+0x5ec>
     ea2:	fe 01       	movw	r30, r28
     ea4:	ea 0d       	add	r30, r10
     ea6:	f1 1d       	adc	r31, r1
     ea8:	80 81       	ld	r24, Z
     eaa:	80 33       	cpi	r24, 0x30	; 48
     eac:	11 f4       	brne	.+4      	; 0xeb2 <vfprintf+0x5e2>
     eae:	09 7e       	andi	r16, 0xE9	; 233
     eb0:	09 c0       	rjmp	.+18     	; 0xec4 <vfprintf+0x5f4>
     eb2:	02 ff       	sbrs	r16, 2
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <vfprintf+0x5f2>
     eb6:	b3 94       	inc	r11
     eb8:	b3 94       	inc	r11
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <vfprintf+0x5f4>
     ebc:	80 2f       	mov	r24, r16
     ebe:	86 78       	andi	r24, 0x86	; 134
     ec0:	09 f0       	breq	.+2      	; 0xec4 <vfprintf+0x5f4>
     ec2:	b3 94       	inc	r11
     ec4:	03 fd       	sbrc	r16, 3
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <vfprintf+0x61a>
     ec8:	00 ff       	sbrs	r16, 0
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <vfprintf+0x608>
     ecc:	bf 14       	cp	r11, r15
     ece:	88 f4       	brcc	.+34     	; 0xef2 <vfprintf+0x622>
     ed0:	fa 0c       	add	r15, r10
     ed2:	1f 2d       	mov	r17, r15
     ed4:	1b 19       	sub	r17, r11
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <vfprintf+0x624>
     ed8:	bf 14       	cp	r11, r15
     eda:	60 f4       	brcc	.+24     	; 0xef4 <vfprintf+0x624>
     edc:	b6 01       	movw	r22, r12
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     ee6:	b3 94       	inc	r11
     ee8:	f7 cf       	rjmp	.-18     	; 0xed8 <vfprintf+0x608>
     eea:	bf 14       	cp	r11, r15
     eec:	18 f4       	brcc	.+6      	; 0xef4 <vfprintf+0x624>
     eee:	fb 18       	sub	r15, r11
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <vfprintf+0x626>
     ef2:	1a 2d       	mov	r17, r10
     ef4:	f1 2c       	mov	r15, r1
     ef6:	04 ff       	sbrs	r16, 4
     ef8:	10 c0       	rjmp	.+32     	; 0xf1a <vfprintf+0x64a>
     efa:	b6 01       	movw	r22, r12
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     f04:	02 ff       	sbrs	r16, 2
     f06:	17 c0       	rjmp	.+46     	; 0xf36 <vfprintf+0x666>
     f08:	01 fd       	sbrc	r16, 1
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <vfprintf+0x642>
     f0c:	88 e7       	ldi	r24, 0x78	; 120
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <vfprintf+0x646>
     f12:	88 e5       	ldi	r24, 0x58	; 88
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	b6 01       	movw	r22, r12
     f18:	0c c0       	rjmp	.+24     	; 0xf32 <vfprintf+0x662>
     f1a:	80 2f       	mov	r24, r16
     f1c:	86 78       	andi	r24, 0x86	; 134
     f1e:	59 f0       	breq	.+22     	; 0xf36 <vfprintf+0x666>
     f20:	01 ff       	sbrs	r16, 1
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x658>
     f24:	8b e2       	ldi	r24, 0x2B	; 43
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <vfprintf+0x65a>
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	07 fd       	sbrc	r16, 7
     f2c:	8d e2       	ldi	r24, 0x2D	; 45
     f2e:	b6 01       	movw	r22, r12
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     f36:	a1 16       	cp	r10, r17
     f38:	38 f4       	brcc	.+14     	; 0xf48 <vfprintf+0x678>
     f3a:	b6 01       	movw	r22, r12
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     f44:	11 50       	subi	r17, 0x01	; 1
     f46:	f7 cf       	rjmp	.-18     	; 0xf36 <vfprintf+0x666>
     f48:	aa 94       	dec	r10
     f4a:	e1 e0       	ldi	r30, 0x01	; 1
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	ec 0f       	add	r30, r28
     f50:	fd 1f       	adc	r31, r29
     f52:	ea 0d       	add	r30, r10
     f54:	f1 1d       	adc	r31, r1
     f56:	80 81       	ld	r24, Z
     f58:	b6 01       	movw	r22, r12
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     f60:	a1 10       	cpse	r10, r1
     f62:	f2 cf       	rjmp	.-28     	; 0xf48 <vfprintf+0x678>
     f64:	19 c0       	rjmp	.+50     	; 0xf98 <vfprintf+0x6c8>
     f66:	f4 e0       	ldi	r31, 0x04	; 4
     f68:	ff 15       	cp	r31, r15
     f6a:	80 f5       	brcc	.+96     	; 0xfcc <vfprintf+0x6fc>
     f6c:	84 e0       	ldi	r24, 0x04	; 4
     f6e:	f8 1a       	sub	r15, r24
     f70:	73 fe       	sbrs	r7, 3
     f72:	23 c0       	rjmp	.+70     	; 0xfba <vfprintf+0x6ea>
     f74:	01 11       	cpse	r16, r1
     f76:	2b c0       	rjmp	.+86     	; 0xfce <vfprintf+0x6fe>
     f78:	53 fe       	sbrs	r5, 3
     f7a:	2f c0       	rjmp	.+94     	; 0xfda <vfprintf+0x70a>
     f7c:	5b eb       	ldi	r21, 0xBB	; 187
     f7e:	85 2e       	mov	r8, r21
     f80:	58 e0       	ldi	r21, 0x08	; 8
     f82:	95 2e       	mov	r9, r21
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	a5 2e       	mov	r10, r21
     f88:	07 2d       	mov	r16, r7
     f8a:	00 71       	andi	r16, 0x10	; 16
     f8c:	f4 01       	movw	r30, r8
     f8e:	84 91       	lpm	r24, Z
     f90:	a7 fc       	sbrc	r10, 7
     f92:	80 81       	ld	r24, Z
     f94:	81 11       	cpse	r24, r1
     f96:	28 c0       	rjmp	.+80     	; 0xfe8 <vfprintf+0x718>
     f98:	ff 20       	and	r15, r15
     f9a:	09 f4       	brne	.+2      	; 0xf9e <vfprintf+0x6ce>
     f9c:	d2 cc       	rjmp	.-1628   	; 0x942 <vfprintf+0x72>
     f9e:	b6 01       	movw	r22, r12
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     fa8:	fa 94       	dec	r15
     faa:	f6 cf       	rjmp	.-20     	; 0xf98 <vfprintf+0x6c8>
     fac:	f6 01       	movw	r30, r12
     fae:	87 81       	ldd	r24, Z+7	; 0x07
     fb0:	90 85       	ldd	r25, Z+8	; 0x08
     fb2:	2c c0       	rjmp	.+88     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	9f ef       	ldi	r25, 0xFF	; 255
     fb8:	29 c0       	rjmp	.+82     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     fba:	b6 01       	movw	r22, r12
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     fc4:	fa 94       	dec	r15
     fc6:	f1 10       	cpse	r15, r1
     fc8:	f8 cf       	rjmp	.-16     	; 0xfba <vfprintf+0x6ea>
     fca:	d4 cf       	rjmp	.-88     	; 0xf74 <vfprintf+0x6a4>
     fcc:	f1 2c       	mov	r15, r1
     fce:	b6 01       	movw	r22, r12
     fd0:	80 2f       	mov	r24, r16
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     fd8:	cf cf       	rjmp	.-98     	; 0xf78 <vfprintf+0x6a8>
     fda:	47 eb       	ldi	r20, 0xB7	; 183
     fdc:	84 2e       	mov	r8, r20
     fde:	48 e0       	ldi	r20, 0x08	; 8
     fe0:	94 2e       	mov	r9, r20
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	a4 2e       	mov	r10, r20
     fe6:	d0 cf       	rjmp	.-96     	; 0xf88 <vfprintf+0x6b8>
     fe8:	01 11       	cpse	r16, r1
     fea:	80 52       	subi	r24, 0x20	; 32
     fec:	b6 01       	movw	r22, r12
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 23 22 	call	0x4446	; 0x4446 <fputc>
     ff4:	ff ef       	ldi	r31, 0xFF	; 255
     ff6:	8f 1a       	sub	r8, r31
     ff8:	9f 0a       	sbc	r9, r31
     ffa:	af 0a       	sbc	r10, r31
     ffc:	c7 cf       	rjmp	.-114    	; 0xf8c <vfprintf+0x6bc>
     ffe:	23 e0       	ldi	r18, 0x03	; 3
    1000:	2f 15       	cp	r18, r15
    1002:	10 f4       	brcc	.+4      	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	b3 cf       	rjmp	.-154    	; 0xf6e <vfprintf+0x69e>
    1008:	f1 2c       	mov	r15, r1
    100a:	b6 cf       	rjmp	.-148    	; 0xf78 <vfprintf+0x6a8>
    100c:	64 96       	adiw	r28, 0x14	; 20
    100e:	e2 e1       	ldi	r30, 0x12	; 18
    1010:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__epilogue_restores__>

Disassembly of section .text.libgcc:

0000680c <__tablejump2__>:
    680c:	ee 0f       	add	r30, r30
    680e:	ff 1f       	adc	r31, r31
    6810:	05 90       	lpm	r0, Z+
    6812:	f4 91       	lpm	r31, Z
    6814:	e0 2d       	mov	r30, r0
    6816:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00006284 <__umulhisi3>:
    6284:	a2 9f       	mul	r26, r18
    6286:	b0 01       	movw	r22, r0
    6288:	b3 9f       	mul	r27, r19
    628a:	c0 01       	movw	r24, r0
    628c:	a3 9f       	mul	r26, r19
    628e:	70 0d       	add	r23, r0
    6290:	81 1d       	adc	r24, r1
    6292:	11 24       	eor	r1, r1
    6294:	91 1d       	adc	r25, r1
    6296:	b2 9f       	mul	r27, r18
    6298:	70 0d       	add	r23, r0
    629a:	81 1d       	adc	r24, r1
    629c:	11 24       	eor	r1, r1
    629e:	91 1d       	adc	r25, r1
    62a0:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00005a20 <__prologue_saves__>:
    5a20:	2f 92       	push	r2
    5a22:	3f 92       	push	r3
    5a24:	4f 92       	push	r4
    5a26:	5f 92       	push	r5
    5a28:	6f 92       	push	r6
    5a2a:	7f 92       	push	r7
    5a2c:	8f 92       	push	r8
    5a2e:	9f 92       	push	r9
    5a30:	af 92       	push	r10
    5a32:	bf 92       	push	r11
    5a34:	cf 92       	push	r12
    5a36:	df 92       	push	r13
    5a38:	ef 92       	push	r14
    5a3a:	ff 92       	push	r15
    5a3c:	0f 93       	push	r16
    5a3e:	1f 93       	push	r17
    5a40:	cf 93       	push	r28
    5a42:	df 93       	push	r29
    5a44:	cd b7       	in	r28, 0x3d	; 61
    5a46:	de b7       	in	r29, 0x3e	; 62
    5a48:	ca 1b       	sub	r28, r26
    5a4a:	db 0b       	sbc	r29, r27
    5a4c:	0f b6       	in	r0, 0x3f	; 63
    5a4e:	f8 94       	cli
    5a50:	de bf       	out	0x3e, r29	; 62
    5a52:	0f be       	out	0x3f, r0	; 63
    5a54:	cd bf       	out	0x3d, r28	; 61
    5a56:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00005afa <__epilogue_restores__>:
    5afa:	2a 88       	ldd	r2, Y+18	; 0x12
    5afc:	39 88       	ldd	r3, Y+17	; 0x11
    5afe:	48 88       	ldd	r4, Y+16	; 0x10
    5b00:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b02:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b04:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b06:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b08:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b0c:	b9 84       	ldd	r11, Y+9	; 0x09
    5b0e:	c8 84       	ldd	r12, Y+8	; 0x08
    5b10:	df 80       	ldd	r13, Y+7	; 0x07
    5b12:	ee 80       	ldd	r14, Y+6	; 0x06
    5b14:	fd 80       	ldd	r15, Y+5	; 0x05
    5b16:	0c 81       	ldd	r16, Y+4	; 0x04
    5b18:	1b 81       	ldd	r17, Y+3	; 0x03
    5b1a:	aa 81       	ldd	r26, Y+2	; 0x02
    5b1c:	b9 81       	ldd	r27, Y+1	; 0x01
    5b1e:	ce 0f       	add	r28, r30
    5b20:	d1 1d       	adc	r29, r1
    5b22:	0f b6       	in	r0, 0x3f	; 63
    5b24:	f8 94       	cli
    5b26:	de bf       	out	0x3e, r29	; 62
    5b28:	0f be       	out	0x3f, r0	; 63
    5b2a:	cd bf       	out	0x3d, r28	; 61
    5b2c:	ed 01       	movw	r28, r26
    5b2e:	08 95       	ret

Disassembly of section .text.avrlibc:

000068fa <atoi>:
    68fa:	0e 94 97 33 	call	0x672e	; 0x672e <atol>
    68fe:	cb 01       	movw	r24, r22
    6900:	08 95       	ret

Disassembly of section .text.avrlibc:

0000672e <atol>:
    672e:	2a e0       	ldi	r18, 0x0A	; 10
    6730:	30 e0       	ldi	r19, 0x00	; 0
    6732:	40 e0       	ldi	r20, 0x00	; 0
    6734:	50 e0       	ldi	r21, 0x00	; 0
    6736:	0e 94 c9 09 	call	0x1392	; 0x1392 <strtol>
    673a:	08 95       	ret

Disassembly of section .text.avrlibc:

00001392 <strtol>:
    1392:	2f 92       	push	r2
    1394:	3f 92       	push	r3
    1396:	4f 92       	push	r4
    1398:	5f 92       	push	r5
    139a:	6f 92       	push	r6
    139c:	7f 92       	push	r7
    139e:	8f 92       	push	r8
    13a0:	af 92       	push	r10
    13a2:	bf 92       	push	r11
    13a4:	cf 92       	push	r12
    13a6:	df 92       	push	r13
    13a8:	ef 92       	push	r14
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <strtol+0x22>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <strtol+0x24>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <strtol+0x26>
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	3b 01       	movw	r6, r22
    13be:	88 2e       	mov	r8, r24
    13c0:	5a 01       	movw	r10, r20
    13c2:	19 01       	movw	r2, r18
    13c4:	41 15       	cp	r20, r1
    13c6:	51 05       	cpc	r21, r1
    13c8:	21 f0       	breq	.+8      	; 0x13d2 <strtol+0x40>
    13ca:	fa 01       	movw	r30, r20
    13cc:	60 83       	st	Z, r22
    13ce:	71 83       	std	Z+1, r23	; 0x01
    13d0:	82 83       	std	Z+2, r24	; 0x02
    13d2:	21 14       	cp	r2, r1
    13d4:	31 04       	cpc	r3, r1
    13d6:	29 f0       	breq	.+10     	; 0x13e2 <strtol+0x50>
    13d8:	c1 01       	movw	r24, r2
    13da:	02 97       	sbiw	r24, 0x02	; 2
    13dc:	83 97       	sbiw	r24, 0x23	; 35
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <strtol+0x50>
    13e0:	1a c1       	rjmp	.+564    	; 0x1616 <strtol+0x284>
    13e2:	e8 2c       	mov	r14, r8
    13e4:	63 01       	movw	r12, r6
    13e6:	ff ef       	ldi	r31, 0xFF	; 255
    13e8:	cf 1a       	sub	r12, r31
    13ea:	df 0a       	sbc	r13, r31
    13ec:	ef 0a       	sbc	r14, r31
    13ee:	f3 01       	movw	r30, r6
    13f0:	14 91       	lpm	r17, Z
    13f2:	87 fc       	sbrc	r8, 7
    13f4:	10 81       	ld	r17, Z
    13f6:	81 2f       	mov	r24, r17
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <isspace>
    13fe:	4c 2d       	mov	r20, r12
    1400:	3d 2d       	mov	r19, r13
    1402:	2e 2d       	mov	r18, r14
    1404:	89 2b       	or	r24, r25
    1406:	19 f0       	breq	.+6      	; 0x140e <strtol+0x7c>
    1408:	36 01       	movw	r6, r12
    140a:	8e 2c       	mov	r8, r14
    140c:	ea cf       	rjmp	.-44     	; 0x13e2 <strtol+0x50>
    140e:	1d 32       	cpi	r17, 0x2D	; 45
    1410:	69 f4       	brne	.+26     	; 0x142c <strtol+0x9a>
    1412:	e8 2c       	mov	r14, r8
    1414:	63 01       	movw	r12, r6
    1416:	52 e0       	ldi	r21, 0x02	; 2
    1418:	c5 0e       	add	r12, r21
    141a:	d1 1c       	adc	r13, r1
    141c:	e1 1c       	adc	r14, r1
    141e:	e4 2f       	mov	r30, r20
    1420:	f3 2f       	mov	r31, r19
    1422:	14 91       	lpm	r17, Z
    1424:	27 fd       	sbrc	r18, 7
    1426:	10 81       	ld	r17, Z
    1428:	01 e0       	ldi	r16, 0x01	; 1
    142a:	0e c0       	rjmp	.+28     	; 0x1448 <strtol+0xb6>
    142c:	1b 32       	cpi	r17, 0x2B	; 43
    142e:	59 f4       	brne	.+22     	; 0x1446 <strtol+0xb4>
    1430:	e8 2c       	mov	r14, r8
    1432:	63 01       	movw	r12, r6
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	c8 0e       	add	r12, r24
    1438:	d1 1c       	adc	r13, r1
    143a:	e1 1c       	adc	r14, r1
    143c:	e4 2f       	mov	r30, r20
    143e:	f3 2f       	mov	r31, r19
    1440:	14 91       	lpm	r17, Z
    1442:	27 fd       	sbrc	r18, 7
    1444:	10 81       	ld	r17, Z
    1446:	00 e0       	ldi	r16, 0x00	; 0
    1448:	21 14       	cp	r2, r1
    144a:	31 04       	cpc	r3, r1
    144c:	09 f1       	breq	.+66     	; 0x1490 <strtol+0xfe>
    144e:	90 e1       	ldi	r25, 0x10	; 16
    1450:	29 16       	cp	r2, r25
    1452:	31 04       	cpc	r3, r1
    1454:	29 f4       	brne	.+10     	; 0x1460 <strtol+0xce>
    1456:	3f c0       	rjmp	.+126    	; 0x14d6 <strtol+0x144>
    1458:	10 e3       	ldi	r17, 0x30	; 48
    145a:	21 14       	cp	r2, r1
    145c:	31 04       	cpc	r3, r1
    145e:	21 f1       	breq	.+72     	; 0x14a8 <strtol+0x116>
    1460:	f8 e0       	ldi	r31, 0x08	; 8
    1462:	2f 16       	cp	r2, r31
    1464:	31 04       	cpc	r3, r1
    1466:	01 f1       	breq	.+64     	; 0x14a8 <strtol+0x116>
    1468:	54 f4       	brge	.+20     	; 0x147e <strtol+0xec>
    146a:	32 e0       	ldi	r19, 0x02	; 2
    146c:	23 16       	cp	r2, r19
    146e:	31 04       	cpc	r3, r1
    1470:	21 f5       	brne	.+72     	; 0x14ba <strtol+0x128>
    1472:	41 2c       	mov	r4, r1
    1474:	51 2c       	mov	r5, r1
    1476:	61 2c       	mov	r6, r1
    1478:	50 e4       	ldi	r21, 0x40	; 64
    147a:	75 2e       	mov	r7, r21
    147c:	4b c0       	rjmp	.+150    	; 0x1514 <strtol+0x182>
    147e:	4a e0       	ldi	r20, 0x0A	; 10
    1480:	24 16       	cp	r2, r20
    1482:	31 04       	cpc	r3, r1
    1484:	39 f0       	breq	.+14     	; 0x1494 <strtol+0x102>
    1486:	50 e1       	ldi	r21, 0x10	; 16
    1488:	25 16       	cp	r2, r21
    148a:	31 04       	cpc	r3, r1
    148c:	b1 f4       	brne	.+44     	; 0x14ba <strtol+0x128>
    148e:	3d c0       	rjmp	.+122    	; 0x150a <strtol+0x178>
    1490:	10 33       	cpi	r17, 0x30	; 48
    1492:	19 f1       	breq	.+70     	; 0x14da <strtol+0x148>
    1494:	3a e0       	ldi	r19, 0x0A	; 10
    1496:	23 2e       	mov	r2, r19
    1498:	31 2c       	mov	r3, r1
    149a:	4c ec       	ldi	r20, 0xCC	; 204
    149c:	44 2e       	mov	r4, r20
    149e:	54 2c       	mov	r5, r4
    14a0:	64 2c       	mov	r6, r4
    14a2:	4c e0       	ldi	r20, 0x0C	; 12
    14a4:	74 2e       	mov	r7, r20
    14a6:	36 c0       	rjmp	.+108    	; 0x1514 <strtol+0x182>
    14a8:	98 e0       	ldi	r25, 0x08	; 8
    14aa:	29 2e       	mov	r2, r25
    14ac:	31 2c       	mov	r3, r1
    14ae:	41 2c       	mov	r4, r1
    14b0:	51 2c       	mov	r5, r1
    14b2:	61 2c       	mov	r6, r1
    14b4:	20 e1       	ldi	r18, 0x10	; 16
    14b6:	72 2e       	mov	r7, r18
    14b8:	2d c0       	rjmp	.+90     	; 0x1514 <strtol+0x182>
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e8       	ldi	r25, 0x80	; 128
    14c2:	91 01       	movw	r18, r2
    14c4:	03 2c       	mov	r0, r3
    14c6:	00 0c       	add	r0, r0
    14c8:	44 0b       	sbc	r20, r20
    14ca:	55 0b       	sbc	r21, r21
    14cc:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__udivmodsi4>
    14d0:	29 01       	movw	r4, r18
    14d2:	3a 01       	movw	r6, r20
    14d4:	1f c0       	rjmp	.+62     	; 0x1514 <strtol+0x182>
    14d6:	10 33       	cpi	r17, 0x30	; 48
    14d8:	c1 f4       	brne	.+48     	; 0x150a <strtol+0x178>
    14da:	f6 01       	movw	r30, r12
    14dc:	84 91       	lpm	r24, Z
    14de:	e7 fc       	sbrc	r14, 7
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 7d       	andi	r24, 0xDF	; 223
    14e4:	88 35       	cpi	r24, 0x58	; 88
    14e6:	09 f0       	breq	.+2      	; 0x14ea <strtol+0x158>
    14e8:	b7 cf       	rjmp	.-146    	; 0x1458 <strtol+0xc6>
    14ea:	ae 2d       	mov	r26, r14
    14ec:	c6 01       	movw	r24, r12
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	a1 1d       	adc	r26, r1
    14f2:	fc 01       	movw	r30, r24
    14f4:	14 91       	lpm	r17, Z
    14f6:	a7 fd       	sbrc	r26, 7
    14f8:	10 81       	ld	r17, Z
    14fa:	e2 e0       	ldi	r30, 0x02	; 2
    14fc:	ce 0e       	add	r12, r30
    14fe:	d1 1c       	adc	r13, r1
    1500:	e1 1c       	adc	r14, r1
    1502:	02 60       	ori	r16, 0x02	; 2
    1504:	60 e1       	ldi	r22, 0x10	; 16
    1506:	26 2e       	mov	r2, r22
    1508:	31 2c       	mov	r3, r1
    150a:	41 2c       	mov	r4, r1
    150c:	51 2c       	mov	r5, r1
    150e:	61 2c       	mov	r6, r1
    1510:	88 e0       	ldi	r24, 0x08	; 8
    1512:	78 2e       	mov	r7, r24
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	cb 01       	movw	r24, r22
    151c:	91 01       	movw	r18, r2
    151e:	03 2c       	mov	r0, r3
    1520:	00 0c       	add	r0, r0
    1522:	44 0b       	sbc	r20, r20
    1524:	55 0b       	sbc	r21, r21
    1526:	29 83       	std	Y+1, r18	; 0x01
    1528:	3a 83       	std	Y+2, r19	; 0x02
    152a:	4b 83       	std	Y+3, r20	; 0x03
    152c:	5c 83       	std	Y+4, r21	; 0x04
    152e:	e0 ed       	ldi	r30, 0xD0	; 208
    1530:	e1 0f       	add	r30, r17
    1532:	ea 30       	cpi	r30, 0x0A	; 10
    1534:	60 f0       	brcs	.+24     	; 0x154e <strtol+0x1bc>
    1536:	2f eb       	ldi	r18, 0xBF	; 191
    1538:	21 0f       	add	r18, r17
    153a:	2a 31       	cpi	r18, 0x1A	; 26
    153c:	10 f4       	brcc	.+4      	; 0x1542 <strtol+0x1b0>
    153e:	e9 ec       	ldi	r30, 0xC9	; 201
    1540:	05 c0       	rjmp	.+10     	; 0x154c <strtol+0x1ba>
    1542:	2f e9       	ldi	r18, 0x9F	; 159
    1544:	21 0f       	add	r18, r17
    1546:	2a 31       	cpi	r18, 0x1A	; 26
    1548:	50 f5       	brcc	.+84     	; 0x159e <strtol+0x20c>
    154a:	e9 ea       	ldi	r30, 0xA9	; 169
    154c:	e1 0f       	add	r30, r17
    154e:	2e 2f       	mov	r18, r30
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	22 15       	cp	r18, r2
    1554:	33 05       	cpc	r19, r3
    1556:	1c f5       	brge	.+70     	; 0x159e <strtol+0x20c>
    1558:	a7 fd       	sbrc	r26, 7
    155a:	18 c0       	rjmp	.+48     	; 0x158c <strtol+0x1fa>
    155c:	46 16       	cp	r4, r22
    155e:	57 06       	cpc	r5, r23
    1560:	68 06       	cpc	r6, r24
    1562:	79 06       	cpc	r7, r25
    1564:	80 f0       	brcs	.+32     	; 0x1586 <strtol+0x1f4>
    1566:	29 81       	ldd	r18, Y+1	; 0x01
    1568:	3a 81       	ldd	r19, Y+2	; 0x02
    156a:	4b 81       	ldd	r20, Y+3	; 0x03
    156c:	5c 81       	ldd	r21, Y+4	; 0x04
    156e:	0e 94 e7 30 	call	0x61ce	; 0x61ce <__mulsi3>
    1572:	6e 0f       	add	r22, r30
    1574:	71 1d       	adc	r23, r1
    1576:	81 1d       	adc	r24, r1
    1578:	91 1d       	adc	r25, r1
    157a:	61 30       	cpi	r22, 0x01	; 1
    157c:	71 05       	cpc	r23, r1
    157e:	81 05       	cpc	r24, r1
    1580:	30 e8       	ldi	r19, 0x80	; 128
    1582:	93 07       	cpc	r25, r19
    1584:	10 f0       	brcs	.+4      	; 0x158a <strtol+0x1f8>
    1586:	af ef       	ldi	r26, 0xFF	; 255
    1588:	01 c0       	rjmp	.+2      	; 0x158c <strtol+0x1fa>
    158a:	a1 e0       	ldi	r26, 0x01	; 1
    158c:	f6 01       	movw	r30, r12
    158e:	14 91       	lpm	r17, Z
    1590:	e7 fc       	sbrc	r14, 7
    1592:	10 81       	ld	r17, Z
    1594:	4f ef       	ldi	r20, 0xFF	; 255
    1596:	c4 1a       	sub	r12, r20
    1598:	d4 0a       	sbc	r13, r20
    159a:	e4 0a       	sbc	r14, r20
    159c:	c8 cf       	rjmp	.-112    	; 0x152e <strtol+0x19c>
    159e:	20 2f       	mov	r18, r16
    15a0:	21 70       	andi	r18, 0x01	; 1
    15a2:	a1 14       	cp	r10, r1
    15a4:	b1 04       	cpc	r11, r1
    15a6:	b1 f0       	breq	.+44     	; 0x15d4 <strtol+0x242>
    15a8:	aa 23       	and	r26, r26
    15aa:	49 f0       	breq	.+18     	; 0x15be <strtol+0x22c>
    15ac:	51 e0       	ldi	r21, 0x01	; 1
    15ae:	c5 1a       	sub	r12, r21
    15b0:	d1 08       	sbc	r13, r1
    15b2:	e1 08       	sbc	r14, r1
    15b4:	f5 01       	movw	r30, r10
    15b6:	c0 82       	st	Z, r12
    15b8:	d1 82       	std	Z+1, r13	; 0x01
    15ba:	e2 82       	std	Z+2, r14	; 0x02
    15bc:	0b c0       	rjmp	.+22     	; 0x15d4 <strtol+0x242>
    15be:	01 ff       	sbrs	r16, 1
    15c0:	1d c0       	rjmp	.+58     	; 0x15fc <strtol+0x26a>
    15c2:	f2 e0       	ldi	r31, 0x02	; 2
    15c4:	cf 1a       	sub	r12, r31
    15c6:	d1 08       	sbc	r13, r1
    15c8:	e1 08       	sbc	r14, r1
    15ca:	f5 01       	movw	r30, r10
    15cc:	c0 82       	st	Z, r12
    15ce:	d1 82       	std	Z+1, r13	; 0x01
    15d0:	e2 82       	std	Z+2, r14	; 0x02
    15d2:	14 c0       	rjmp	.+40     	; 0x15fc <strtol+0x26a>
    15d4:	a7 ff       	sbrs	r26, 7
    15d6:	12 c0       	rjmp	.+36     	; 0x15fc <strtol+0x26a>
    15d8:	22 23       	and	r18, r18
    15da:	29 f0       	breq	.+10     	; 0x15e6 <strtol+0x254>
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e8       	ldi	r25, 0x80	; 128
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <strtol+0x25c>
    15e6:	6f ef       	ldi	r22, 0xFF	; 255
    15e8:	7f ef       	ldi	r23, 0xFF	; 255
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	9f e7       	ldi	r25, 0x7F	; 127
    15ee:	22 e2       	ldi	r18, 0x22	; 34
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	30 93 71 08 	sts	0x0871, r19	; 0x800871 <errno+0x1>
    15f6:	20 93 70 08 	sts	0x0870, r18	; 0x800870 <errno>
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <strtol+0x27c>
    15fc:	22 23       	and	r18, r18
    15fe:	81 f0       	breq	.+32     	; 0x1620 <strtol+0x28e>
    1600:	90 95       	com	r25
    1602:	80 95       	com	r24
    1604:	70 95       	com	r23
    1606:	61 95       	neg	r22
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	8f 4f       	sbci	r24, 0xFF	; 255
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	46 2f       	mov	r20, r22
    1610:	37 2f       	mov	r19, r23
    1612:	28 2f       	mov	r18, r24
    1614:	12 c0       	rjmp	.+36     	; 0x163a <strtol+0x2a8>
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0d c0       	rjmp	.+26     	; 0x163a <strtol+0x2a8>
    1620:	97 ff       	sbrs	r25, 7
    1622:	f5 cf       	rjmp	.-22     	; 0x160e <strtol+0x27c>
    1624:	82 e2       	ldi	r24, 0x22	; 34
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <errno+0x1>
    162c:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <errno>
    1630:	6f ef       	ldi	r22, 0xFF	; 255
    1632:	7f ef       	ldi	r23, 0xFF	; 255
    1634:	8f ef       	ldi	r24, 0xFF	; 255
    1636:	9f e7       	ldi	r25, 0x7F	; 127
    1638:	ea cf       	rjmp	.-44     	; 0x160e <strtol+0x27c>
    163a:	64 2f       	mov	r22, r20
    163c:	73 2f       	mov	r23, r19
    163e:	82 2f       	mov	r24, r18
    1640:	26 96       	adiw	r28, 0x06	; 6
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	ef 90       	pop	r14
    1656:	df 90       	pop	r13
    1658:	cf 90       	pop	r12
    165a:	bf 90       	pop	r11
    165c:	af 90       	pop	r10
    165e:	8f 90       	pop	r8
    1660:	7f 90       	pop	r7
    1662:	6f 90       	pop	r6
    1664:	5f 90       	pop	r5
    1666:	4f 90       	pop	r4
    1668:	3f 90       	pop	r3
    166a:	2f 90       	pop	r2
    166c:	08 95       	ret

Disassembly of section .text.avrlibc:

00001db4 <__ftoa_engine>:
    1db4:	28 30       	cpi	r18, 0x08	; 8
    1db6:	08 f0       	brcs	.+2      	; 0x1dba <__ftoa_engine+0x6>
    1db8:	27 e0       	ldi	r18, 0x07	; 7
    1dba:	33 27       	eor	r19, r19
    1dbc:	da 01       	movw	r26, r20
    1dbe:	99 0f       	add	r25, r25
    1dc0:	31 1d       	adc	r19, r1
    1dc2:	87 fd       	sbrc	r24, 7
    1dc4:	91 60       	ori	r25, 0x01	; 1
    1dc6:	00 96       	adiw	r24, 0x00	; 0
    1dc8:	61 05       	cpc	r22, r1
    1dca:	71 05       	cpc	r23, r1
    1dcc:	39 f4       	brne	.+14     	; 0x1ddc <__ftoa_engine+0x28>
    1dce:	32 60       	ori	r19, 0x02	; 2
    1dd0:	2e 5f       	subi	r18, 0xFE	; 254
    1dd2:	3d 93       	st	X+, r19
    1dd4:	30 e3       	ldi	r19, 0x30	; 48
    1dd6:	2a 95       	dec	r18
    1dd8:	e1 f7       	brne	.-8      	; 0x1dd2 <__ftoa_engine+0x1e>
    1dda:	08 95       	ret
    1ddc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dde:	30 f0       	brcs	.+12     	; 0x1dec <__ftoa_engine+0x38>
    1de0:	80 38       	cpi	r24, 0x80	; 128
    1de2:	71 05       	cpc	r23, r1
    1de4:	61 05       	cpc	r22, r1
    1de6:	09 f0       	breq	.+2      	; 0x1dea <__ftoa_engine+0x36>
    1de8:	3c 5f       	subi	r19, 0xFC	; 252
    1dea:	3c 5f       	subi	r19, 0xFC	; 252
    1dec:	3d 93       	st	X+, r19
    1dee:	91 30       	cpi	r25, 0x01	; 1
    1df0:	08 f0       	brcs	.+2      	; 0x1df4 <__ftoa_engine+0x40>
    1df2:	80 68       	ori	r24, 0x80	; 128
    1df4:	91 1d       	adc	r25, r1
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	1f 93       	push	r17
    1dfc:	0f 93       	push	r16
    1dfe:	ff 92       	push	r15
    1e00:	ef 92       	push	r14
    1e02:	19 2f       	mov	r17, r25
    1e04:	98 7f       	andi	r25, 0xF8	; 248
    1e06:	96 95       	lsr	r25
    1e08:	e9 2f       	mov	r30, r25
    1e0a:	96 95       	lsr	r25
    1e0c:	96 95       	lsr	r25
    1e0e:	e9 0f       	add	r30, r25
    1e10:	ff 27       	eor	r31, r31
    1e12:	e0 59       	subi	r30, 0x90	; 144
    1e14:	fe 4f       	sbci	r31, 0xFE	; 254
    1e16:	99 27       	eor	r25, r25
    1e18:	33 27       	eor	r19, r19
    1e1a:	ee 24       	eor	r14, r14
    1e1c:	ff 24       	eor	r15, r15
    1e1e:	a7 01       	movw	r20, r14
    1e20:	e7 01       	movw	r28, r14
    1e22:	05 90       	lpm	r0, Z+
    1e24:	08 94       	sec
    1e26:	07 94       	ror	r0
    1e28:	28 f4       	brcc	.+10     	; 0x1e34 <__ftoa_engine+0x80>
    1e2a:	36 0f       	add	r19, r22
    1e2c:	e7 1e       	adc	r14, r23
    1e2e:	f8 1e       	adc	r15, r24
    1e30:	49 1f       	adc	r20, r25
    1e32:	51 1d       	adc	r21, r1
    1e34:	66 0f       	add	r22, r22
    1e36:	77 1f       	adc	r23, r23
    1e38:	88 1f       	adc	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	06 94       	lsr	r0
    1e3e:	a1 f7       	brne	.-24     	; 0x1e28 <__ftoa_engine+0x74>
    1e40:	05 90       	lpm	r0, Z+
    1e42:	07 94       	ror	r0
    1e44:	28 f4       	brcc	.+10     	; 0x1e50 <__ftoa_engine+0x9c>
    1e46:	e7 0e       	add	r14, r23
    1e48:	f8 1e       	adc	r15, r24
    1e4a:	49 1f       	adc	r20, r25
    1e4c:	56 1f       	adc	r21, r22
    1e4e:	c1 1d       	adc	r28, r1
    1e50:	77 0f       	add	r23, r23
    1e52:	88 1f       	adc	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	66 1f       	adc	r22, r22
    1e58:	06 94       	lsr	r0
    1e5a:	a1 f7       	brne	.-24     	; 0x1e44 <__ftoa_engine+0x90>
    1e5c:	05 90       	lpm	r0, Z+
    1e5e:	07 94       	ror	r0
    1e60:	28 f4       	brcc	.+10     	; 0x1e6c <__ftoa_engine+0xb8>
    1e62:	f8 0e       	add	r15, r24
    1e64:	49 1f       	adc	r20, r25
    1e66:	56 1f       	adc	r21, r22
    1e68:	c7 1f       	adc	r28, r23
    1e6a:	d1 1d       	adc	r29, r1
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	66 1f       	adc	r22, r22
    1e72:	77 1f       	adc	r23, r23
    1e74:	06 94       	lsr	r0
    1e76:	a1 f7       	brne	.-24     	; 0x1e60 <__ftoa_engine+0xac>
    1e78:	05 90       	lpm	r0, Z+
    1e7a:	07 94       	ror	r0
    1e7c:	20 f4       	brcc	.+8      	; 0x1e86 <__ftoa_engine+0xd2>
    1e7e:	49 0f       	add	r20, r25
    1e80:	56 1f       	adc	r21, r22
    1e82:	c7 1f       	adc	r28, r23
    1e84:	d8 1f       	adc	r29, r24
    1e86:	99 0f       	add	r25, r25
    1e88:	66 1f       	adc	r22, r22
    1e8a:	77 1f       	adc	r23, r23
    1e8c:	88 1f       	adc	r24, r24
    1e8e:	06 94       	lsr	r0
    1e90:	a9 f7       	brne	.-22     	; 0x1e7c <__ftoa_engine+0xc8>
    1e92:	84 91       	lpm	r24, Z
    1e94:	10 95       	com	r17
    1e96:	17 70       	andi	r17, 0x07	; 7
    1e98:	41 f0       	breq	.+16     	; 0x1eaa <__ftoa_engine+0xf6>
    1e9a:	d6 95       	lsr	r29
    1e9c:	c7 95       	ror	r28
    1e9e:	57 95       	ror	r21
    1ea0:	47 95       	ror	r20
    1ea2:	f7 94       	ror	r15
    1ea4:	e7 94       	ror	r14
    1ea6:	1a 95       	dec	r17
    1ea8:	c1 f7       	brne	.-16     	; 0x1e9a <__ftoa_engine+0xe6>
    1eaa:	e6 e1       	ldi	r30, 0x16	; 22
    1eac:	f1 e0       	ldi	r31, 0x01	; 1
    1eae:	68 94       	set
    1eb0:	15 90       	lpm	r1, Z+
    1eb2:	15 91       	lpm	r17, Z+
    1eb4:	35 91       	lpm	r19, Z+
    1eb6:	65 91       	lpm	r22, Z+
    1eb8:	95 91       	lpm	r25, Z+
    1eba:	05 90       	lpm	r0, Z+
    1ebc:	7f e2       	ldi	r23, 0x2F	; 47
    1ebe:	73 95       	inc	r23
    1ec0:	e1 18       	sub	r14, r1
    1ec2:	f1 0a       	sbc	r15, r17
    1ec4:	43 0b       	sbc	r20, r19
    1ec6:	56 0b       	sbc	r21, r22
    1ec8:	c9 0b       	sbc	r28, r25
    1eca:	d0 09       	sbc	r29, r0
    1ecc:	c0 f7       	brcc	.-16     	; 0x1ebe <__ftoa_engine+0x10a>
    1ece:	e1 0c       	add	r14, r1
    1ed0:	f1 1e       	adc	r15, r17
    1ed2:	43 1f       	adc	r20, r19
    1ed4:	56 1f       	adc	r21, r22
    1ed6:	c9 1f       	adc	r28, r25
    1ed8:	d0 1d       	adc	r29, r0
    1eda:	7e f4       	brtc	.+30     	; 0x1efa <__ftoa_engine+0x146>
    1edc:	70 33       	cpi	r23, 0x30	; 48
    1ede:	11 f4       	brne	.+4      	; 0x1ee4 <__ftoa_engine+0x130>
    1ee0:	8a 95       	dec	r24
    1ee2:	e6 cf       	rjmp	.-52     	; 0x1eb0 <__ftoa_engine+0xfc>
    1ee4:	e8 94       	clt
    1ee6:	01 50       	subi	r16, 0x01	; 1
    1ee8:	30 f0       	brcs	.+12     	; 0x1ef6 <__ftoa_engine+0x142>
    1eea:	08 0f       	add	r16, r24
    1eec:	0a f4       	brpl	.+2      	; 0x1ef0 <__ftoa_engine+0x13c>
    1eee:	00 27       	eor	r16, r16
    1ef0:	02 17       	cp	r16, r18
    1ef2:	08 f4       	brcc	.+2      	; 0x1ef6 <__ftoa_engine+0x142>
    1ef4:	20 2f       	mov	r18, r16
    1ef6:	23 95       	inc	r18
    1ef8:	02 2f       	mov	r16, r18
    1efa:	7a 33       	cpi	r23, 0x3A	; 58
    1efc:	28 f0       	brcs	.+10     	; 0x1f08 <__ftoa_engine+0x154>
    1efe:	79 e3       	ldi	r23, 0x39	; 57
    1f00:	7d 93       	st	X+, r23
    1f02:	2a 95       	dec	r18
    1f04:	e9 f7       	brne	.-6      	; 0x1f00 <__ftoa_engine+0x14c>
    1f06:	10 c0       	rjmp	.+32     	; 0x1f28 <__ftoa_engine+0x174>
    1f08:	7d 93       	st	X+, r23
    1f0a:	2a 95       	dec	r18
    1f0c:	89 f6       	brne	.-94     	; 0x1eb0 <__ftoa_engine+0xfc>
    1f0e:	06 94       	lsr	r0
    1f10:	97 95       	ror	r25
    1f12:	67 95       	ror	r22
    1f14:	37 95       	ror	r19
    1f16:	17 95       	ror	r17
    1f18:	17 94       	ror	r1
    1f1a:	e1 18       	sub	r14, r1
    1f1c:	f1 0a       	sbc	r15, r17
    1f1e:	43 0b       	sbc	r20, r19
    1f20:	56 0b       	sbc	r21, r22
    1f22:	c9 0b       	sbc	r28, r25
    1f24:	d0 09       	sbc	r29, r0
    1f26:	98 f0       	brcs	.+38     	; 0x1f4e <__ftoa_engine+0x19a>
    1f28:	23 95       	inc	r18
    1f2a:	7e 91       	ld	r23, -X
    1f2c:	73 95       	inc	r23
    1f2e:	7a 33       	cpi	r23, 0x3A	; 58
    1f30:	08 f0       	brcs	.+2      	; 0x1f34 <__ftoa_engine+0x180>
    1f32:	70 e3       	ldi	r23, 0x30	; 48
    1f34:	7c 93       	st	X, r23
    1f36:	20 13       	cpse	r18, r16
    1f38:	b8 f7       	brcc	.-18     	; 0x1f28 <__ftoa_engine+0x174>
    1f3a:	7e 91       	ld	r23, -X
    1f3c:	70 61       	ori	r23, 0x10	; 16
    1f3e:	7d 93       	st	X+, r23
    1f40:	30 f0       	brcs	.+12     	; 0x1f4e <__ftoa_engine+0x19a>
    1f42:	83 95       	inc	r24
    1f44:	71 e3       	ldi	r23, 0x31	; 49
    1f46:	7d 93       	st	X+, r23
    1f48:	70 e3       	ldi	r23, 0x30	; 48
    1f4a:	2a 95       	dec	r18
    1f4c:	e1 f7       	brne	.-8      	; 0x1f46 <__ftoa_engine+0x192>
    1f4e:	11 24       	eor	r1, r1
    1f50:	ef 90       	pop	r14
    1f52:	ff 90       	pop	r15
    1f54:	0f 91       	pop	r16
    1f56:	1f 91       	pop	r17
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	99 27       	eor	r25, r25
    1f5e:	87 fd       	sbrc	r24, 7
    1f60:	90 95       	com	r25
    1f62:	08 95       	ret

Disassembly of section .text.avrlibc:

000065c2 <isspace>:
    65c2:	91 11       	cpse	r25, r1
    65c4:	0c 94 9c 34 	jmp	0x6938	; 0x6938 <__ctype_isfalse>
    65c8:	80 32       	cpi	r24, 0x20	; 32
    65ca:	19 f0       	breq	.+6      	; 0x65d2 <isspace+0x10>
    65cc:	89 50       	subi	r24, 0x09	; 9
    65ce:	85 50       	subi	r24, 0x05	; 5
    65d0:	c8 f7       	brcc	.-14     	; 0x65c4 <isspace+0x2>
    65d2:	08 95       	ret

Disassembly of section .text.avrlibc:

00005c64 <memcpy>:
    5c64:	cf 92       	push	r12
    5c66:	df 92       	push	r13
    5c68:	ef 92       	push	r14
    5c6a:	dc 01       	movw	r26, r24
    5c6c:	6a 01       	movw	r12, r20
    5c6e:	e6 2e       	mov	r14, r22
    5c70:	28 0f       	add	r18, r24
    5c72:	39 1f       	adc	r19, r25
    5c74:	a2 17       	cp	r26, r18
    5c76:	b3 07       	cpc	r27, r19
    5c78:	51 f0       	breq	.+20     	; 0x5c8e <memcpy+0x2a>
    5c7a:	f6 01       	movw	r30, r12
    5c7c:	44 91       	lpm	r20, Z
    5c7e:	e7 fc       	sbrc	r14, 7
    5c80:	40 81       	ld	r20, Z
    5c82:	4d 93       	st	X+, r20
    5c84:	4f ef       	ldi	r20, 0xFF	; 255
    5c86:	c4 1a       	sub	r12, r20
    5c88:	d4 0a       	sbc	r13, r20
    5c8a:	e4 0a       	sbc	r14, r20
    5c8c:	f3 cf       	rjmp	.-26     	; 0x5c74 <memcpy+0x10>
    5c8e:	ef 90       	pop	r14
    5c90:	df 90       	pop	r13
    5c92:	cf 90       	pop	r12
    5c94:	08 95       	ret

Disassembly of section .text.avrlibc:

00005ed0 <strcat>:
    5ed0:	9a 01       	movw	r18, r20
    5ed2:	46 2f       	mov	r20, r22
    5ed4:	dc 01       	movw	r26, r24
    5ed6:	bd 01       	movw	r22, r26
    5ed8:	6f 5f       	subi	r22, 0xFF	; 255
    5eda:	7f 4f       	sbci	r23, 0xFF	; 255
    5edc:	5c 91       	ld	r21, X
    5ede:	55 23       	and	r21, r21
    5ee0:	11 f0       	breq	.+4      	; 0x5ee6 <strcat+0x16>
    5ee2:	db 01       	movw	r26, r22
    5ee4:	f8 cf       	rjmp	.-16     	; 0x5ed6 <strcat+0x6>
    5ee6:	f9 01       	movw	r30, r18
    5ee8:	54 91       	lpm	r21, Z
    5eea:	47 fd       	sbrc	r20, 7
    5eec:	50 81       	ld	r21, Z
    5eee:	5d 93       	st	X+, r21
    5ef0:	55 23       	and	r21, r21
    5ef2:	21 f0       	breq	.+8      	; 0x5efc <strcat+0x2c>
    5ef4:	2f 5f       	subi	r18, 0xFF	; 255
    5ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ef8:	4f 4f       	sbci	r20, 0xFF	; 255
    5efa:	f5 cf       	rjmp	.-22     	; 0x5ee6 <strcat+0x16>
    5efc:	08 95       	ret

Disassembly of section .text.avrlibc:

00005628 <strcmp>:
    5628:	cf 92       	push	r12
    562a:	df 92       	push	r13
    562c:	ef 92       	push	r14
    562e:	6b 01       	movw	r12, r22
    5630:	e8 2e       	mov	r14, r24
    5632:	f6 01       	movw	r30, r12
    5634:	84 91       	lpm	r24, Z
    5636:	e7 fc       	sbrc	r14, 7
    5638:	80 81       	ld	r24, Z
    563a:	f9 01       	movw	r30, r18
    563c:	54 91       	lpm	r21, Z
    563e:	47 fd       	sbrc	r20, 7
    5640:	50 81       	ld	r21, Z
    5642:	85 13       	cpse	r24, r21
    5644:	0b c0       	rjmp	.+22     	; 0x565c <strcmp+0x34>
    5646:	88 23       	and	r24, r24
    5648:	41 f0       	breq	.+16     	; 0x565a <strcmp+0x32>
    564a:	8f ef       	ldi	r24, 0xFF	; 255
    564c:	c8 1a       	sub	r12, r24
    564e:	d8 0a       	sbc	r13, r24
    5650:	e8 0a       	sbc	r14, r24
    5652:	2f 5f       	subi	r18, 0xFF	; 255
    5654:	3f 4f       	sbci	r19, 0xFF	; 255
    5656:	4f 4f       	sbci	r20, 0xFF	; 255
    5658:	ec cf       	rjmp	.-40     	; 0x5632 <strcmp+0xa>
    565a:	58 2f       	mov	r21, r24
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	85 1b       	sub	r24, r21
    5660:	91 09       	sbc	r25, r1
    5662:	ef 90       	pop	r14
    5664:	df 90       	pop	r13
    5666:	cf 90       	pop	r12
    5668:	08 95       	ret

Disassembly of section .text.avrlibc:

000047ce <strncmp>:
    47ce:	cf 92       	push	r12
    47d0:	df 92       	push	r13
    47d2:	ef 92       	push	r14
    47d4:	0f 93       	push	r16
    47d6:	1f 93       	push	r17
    47d8:	6b 01       	movw	r12, r22
    47da:	e8 2e       	mov	r14, r24
    47dc:	01 15       	cp	r16, r1
    47de:	11 05       	cpc	r17, r1
    47e0:	19 f1       	breq	.+70     	; 0x4828 <strncmp+0x5a>
    47e2:	01 50       	subi	r16, 0x01	; 1
    47e4:	11 09       	sbc	r17, r1
    47e6:	f6 01       	movw	r30, r12
    47e8:	84 91       	lpm	r24, Z
    47ea:	e7 fc       	sbrc	r14, 7
    47ec:	80 81       	ld	r24, Z
    47ee:	88 23       	and	r24, r24
    47f0:	99 f0       	breq	.+38     	; 0x4818 <strncmp+0x4a>
    47f2:	f9 01       	movw	r30, r18
    47f4:	94 91       	lpm	r25, Z
    47f6:	47 fd       	sbrc	r20, 7
    47f8:	90 81       	ld	r25, Z
    47fa:	99 23       	and	r25, r25
    47fc:	69 f0       	breq	.+26     	; 0x4818 <strncmp+0x4a>
    47fe:	01 15       	cp	r16, r1
    4800:	11 05       	cpc	r17, r1
    4802:	51 f0       	breq	.+20     	; 0x4818 <strncmp+0x4a>
    4804:	89 13       	cpse	r24, r25
    4806:	08 c0       	rjmp	.+16     	; 0x4818 <strncmp+0x4a>
    4808:	8f ef       	ldi	r24, 0xFF	; 255
    480a:	c8 1a       	sub	r12, r24
    480c:	d8 0a       	sbc	r13, r24
    480e:	e8 0a       	sbc	r14, r24
    4810:	2f 5f       	subi	r18, 0xFF	; 255
    4812:	3f 4f       	sbci	r19, 0xFF	; 255
    4814:	4f 4f       	sbci	r20, 0xFF	; 255
    4816:	e5 cf       	rjmp	.-54     	; 0x47e2 <strncmp+0x14>
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	f9 01       	movw	r30, r18
    481c:	24 91       	lpm	r18, Z
    481e:	47 fd       	sbrc	r20, 7
    4820:	20 81       	ld	r18, Z
    4822:	82 1b       	sub	r24, r18
    4824:	91 09       	sbc	r25, r1
    4826:	02 c0       	rjmp	.+4      	; 0x482c <strncmp+0x5e>
    4828:	80 e0       	ldi	r24, 0x00	; 0
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	1f 91       	pop	r17
    482e:	0f 91       	pop	r16
    4830:	ef 90       	pop	r14
    4832:	df 90       	pop	r13
    4834:	cf 90       	pop	r12
    4836:	08 95       	ret

Disassembly of section .text.avrlibc:

00005efe <strlen>:
    5efe:	cf 92       	push	r12
    5f00:	df 92       	push	r13
    5f02:	ef 92       	push	r14
    5f04:	6b 01       	movw	r12, r22
    5f06:	e8 2e       	mov	r14, r24
    5f08:	a8 2f       	mov	r26, r24
    5f0a:	cb 01       	movw	r24, r22
    5f0c:	fc 01       	movw	r30, r24
    5f0e:	24 91       	lpm	r18, Z
    5f10:	a7 fd       	sbrc	r26, 7
    5f12:	20 81       	ld	r18, Z
    5f14:	22 23       	and	r18, r18
    5f16:	19 f0       	breq	.+6      	; 0x5f1e <strlen+0x20>
    5f18:	01 96       	adiw	r24, 0x01	; 1
    5f1a:	a1 1d       	adc	r26, r1
    5f1c:	f7 cf       	rjmp	.-18     	; 0x5f0c <strlen+0xe>
    5f1e:	8c 19       	sub	r24, r12
    5f20:	9d 09       	sbc	r25, r13
    5f22:	ef 90       	pop	r14
    5f24:	df 90       	pop	r13
    5f26:	cf 90       	pop	r12
    5f28:	08 95       	ret

Disassembly of section .text.avrlibc:

000062a2 <strcpy>:
    62a2:	9a 01       	movw	r18, r20
    62a4:	46 2f       	mov	r20, r22
    62a6:	dc 01       	movw	r26, r24
    62a8:	f9 01       	movw	r30, r18
    62aa:	54 91       	lpm	r21, Z
    62ac:	47 fd       	sbrc	r20, 7
    62ae:	50 81       	ld	r21, Z
    62b0:	5d 93       	st	X+, r21
    62b2:	55 23       	and	r21, r21
    62b4:	21 f0       	breq	.+8      	; 0x62be <strcpy+0x1c>
    62b6:	2f 5f       	subi	r18, 0xFF	; 255
    62b8:	3f 4f       	sbci	r19, 0xFF	; 255
    62ba:	4f 4f       	sbci	r20, 0xFF	; 255
    62bc:	f5 cf       	rjmp	.-22     	; 0x62a8 <strcpy+0x6>
    62be:	08 95       	ret

Disassembly of section .text.avrlibc:

00005b30 <strnlen>:
    5b30:	cf 92       	push	r12
    5b32:	df 92       	push	r13
    5b34:	ef 92       	push	r14
    5b36:	6b 01       	movw	r12, r22
    5b38:	e8 2e       	mov	r14, r24
    5b3a:	a8 2f       	mov	r26, r24
    5b3c:	cb 01       	movw	r24, r22
    5b3e:	41 15       	cp	r20, r1
    5b40:	51 05       	cpc	r21, r1
    5b42:	31 f4       	brne	.+12     	; 0x5b50 <strnlen+0x20>
    5b44:	8c 19       	sub	r24, r12
    5b46:	9d 09       	sbc	r25, r13
    5b48:	ef 90       	pop	r14
    5b4a:	df 90       	pop	r13
    5b4c:	cf 90       	pop	r12
    5b4e:	08 95       	ret
    5b50:	fc 01       	movw	r30, r24
    5b52:	24 91       	lpm	r18, Z
    5b54:	a7 fd       	sbrc	r26, 7
    5b56:	20 81       	ld	r18, Z
    5b58:	22 23       	and	r18, r18
    5b5a:	a1 f3       	breq	.-24     	; 0x5b44 <strnlen+0x14>
    5b5c:	01 96       	adiw	r24, 0x01	; 1
    5b5e:	a1 1d       	adc	r26, r1
    5b60:	41 50       	subi	r20, 0x01	; 1
    5b62:	51 09       	sbc	r21, r1
    5b64:	ec cf       	rjmp	.-40     	; 0x5b3e <strnlen+0xe>

Disassembly of section .text.avrlibc:

00004446 <fputc>:
    4446:	0f 93       	push	r16
    4448:	1f 93       	push	r17
    444a:	cf 93       	push	r28
    444c:	df 93       	push	r29
    444e:	fb 01       	movw	r30, r22
    4450:	24 81       	ldd	r18, Z+4	; 0x04
    4452:	21 fd       	sbrc	r18, 1
    4454:	03 c0       	rjmp	.+6      	; 0x445c <fputc+0x16>
    4456:	8f ef       	ldi	r24, 0xFF	; 255
    4458:	9f ef       	ldi	r25, 0xFF	; 255
    445a:	2c c0       	rjmp	.+88     	; 0x44b4 <fputc+0x6e>
    445c:	22 ff       	sbrs	r18, 2
    445e:	16 c0       	rjmp	.+44     	; 0x448c <fputc+0x46>
    4460:	47 81       	ldd	r20, Z+7	; 0x07
    4462:	50 85       	ldd	r21, Z+8	; 0x08
    4464:	25 81       	ldd	r18, Z+5	; 0x05
    4466:	36 81       	ldd	r19, Z+6	; 0x06
    4468:	42 17       	cp	r20, r18
    446a:	53 07       	cpc	r21, r19
    446c:	44 f4       	brge	.+16     	; 0x447e <fputc+0x38>
    446e:	a0 81       	ld	r26, Z
    4470:	b1 81       	ldd	r27, Z+1	; 0x01
    4472:	9d 01       	movw	r18, r26
    4474:	2f 5f       	subi	r18, 0xFF	; 255
    4476:	3f 4f       	sbci	r19, 0xFF	; 255
    4478:	31 83       	std	Z+1, r19	; 0x01
    447a:	20 83       	st	Z, r18
    447c:	8c 93       	st	X, r24
    447e:	27 81       	ldd	r18, Z+7	; 0x07
    4480:	30 85       	ldd	r19, Z+8	; 0x08
    4482:	2f 5f       	subi	r18, 0xFF	; 255
    4484:	3f 4f       	sbci	r19, 0xFF	; 255
    4486:	30 87       	std	Z+8, r19	; 0x08
    4488:	27 83       	std	Z+7, r18	; 0x07
    448a:	14 c0       	rjmp	.+40     	; 0x44b4 <fputc+0x6e>
    448c:	8b 01       	movw	r16, r22
    448e:	ec 01       	movw	r28, r24
    4490:	fb 01       	movw	r30, r22
    4492:	01 84       	ldd	r0, Z+9	; 0x09
    4494:	f2 85       	ldd	r31, Z+10	; 0x0a
    4496:	e0 2d       	mov	r30, r0
    4498:	09 95       	icall
    449a:	89 2b       	or	r24, r25
    449c:	e1 f6       	brne	.-72     	; 0x4456 <fputc+0x10>
    449e:	d8 01       	movw	r26, r16
    44a0:	17 96       	adiw	r26, 0x07	; 7
    44a2:	8d 91       	ld	r24, X+
    44a4:	9c 91       	ld	r25, X
    44a6:	18 97       	sbiw	r26, 0x08	; 8
    44a8:	01 96       	adiw	r24, 0x01	; 1
    44aa:	18 96       	adiw	r26, 0x08	; 8
    44ac:	9c 93       	st	X, r25
    44ae:	8e 93       	st	-X, r24
    44b0:	17 97       	sbiw	r26, 0x07	; 7
    44b2:	ce 01       	movw	r24, r28
    44b4:	df 91       	pop	r29
    44b6:	cf 91       	pop	r28
    44b8:	1f 91       	pop	r17
    44ba:	0f 91       	pop	r16
    44bc:	08 95       	ret

Disassembly of section .text.avrlibc:

00005492 <sprintf>:
    5492:	af e0       	ldi	r26, 0x0F	; 15
    5494:	b0 e0       	ldi	r27, 0x00	; 0
    5496:	ef e4       	ldi	r30, 0x4F	; 79
    5498:	fa e2       	ldi	r31, 0x2A	; 42
    549a:	0c 94 1e 2d 	jmp	0x5a3c	; 0x5a3c <__prologue_saves__+0x1c>
    549e:	0e 89       	ldd	r16, Y+22	; 0x16
    54a0:	1f 89       	ldd	r17, Y+23	; 0x17
    54a2:	86 e0       	ldi	r24, 0x06	; 6
    54a4:	8d 83       	std	Y+5, r24	; 0x05
    54a6:	1a 83       	std	Y+2, r17	; 0x02
    54a8:	09 83       	std	Y+1, r16	; 0x01
    54aa:	8f ef       	ldi	r24, 0xFF	; 255
    54ac:	9f e7       	ldi	r25, 0x7F	; 127
    54ae:	9f 83       	std	Y+7, r25	; 0x07
    54b0:	8e 83       	std	Y+6, r24	; 0x06
    54b2:	9e 01       	movw	r18, r28
    54b4:	25 5e       	subi	r18, 0xE5	; 229
    54b6:	3f 4f       	sbci	r19, 0xFF	; 255
    54b8:	48 8d       	ldd	r20, Y+24	; 0x18
    54ba:	59 8d       	ldd	r21, Y+25	; 0x19
    54bc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    54be:	ce 01       	movw	r24, r28
    54c0:	01 96       	adiw	r24, 0x01	; 1
    54c2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <vfprintf>
    54c6:	e8 85       	ldd	r30, Y+8	; 0x08
    54c8:	f9 85       	ldd	r31, Y+9	; 0x09
    54ca:	e0 0f       	add	r30, r16
    54cc:	f1 1f       	adc	r31, r17
    54ce:	10 82       	st	Z, r1
    54d0:	2f 96       	adiw	r28, 0x0f	; 15
    54d2:	e4 e0       	ldi	r30, 0x04	; 4
    54d4:	0c 94 8b 2d 	jmp	0x5b16	; 0x5b16 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

000036f2 <__ultoa_invert>:
    36f2:	fa 01       	movw	r30, r20
    36f4:	aa 27       	eor	r26, r26
    36f6:	28 30       	cpi	r18, 0x08	; 8
    36f8:	51 f1       	breq	.+84     	; 0x374e <__ultoa_invert+0x5c>
    36fa:	20 31       	cpi	r18, 0x10	; 16
    36fc:	81 f1       	breq	.+96     	; 0x375e <__ultoa_invert+0x6c>
    36fe:	e8 94       	clt
    3700:	6f 93       	push	r22
    3702:	6e 7f       	andi	r22, 0xFE	; 254
    3704:	6e 5f       	subi	r22, 0xFE	; 254
    3706:	7f 4f       	sbci	r23, 0xFF	; 255
    3708:	8f 4f       	sbci	r24, 0xFF	; 255
    370a:	9f 4f       	sbci	r25, 0xFF	; 255
    370c:	af 4f       	sbci	r26, 0xFF	; 255
    370e:	b1 e0       	ldi	r27, 0x01	; 1
    3710:	3e d0       	rcall	.+124    	; 0x378e <__ultoa_invert+0x9c>
    3712:	b4 e0       	ldi	r27, 0x04	; 4
    3714:	3c d0       	rcall	.+120    	; 0x378e <__ultoa_invert+0x9c>
    3716:	67 0f       	add	r22, r23
    3718:	78 1f       	adc	r23, r24
    371a:	89 1f       	adc	r24, r25
    371c:	9a 1f       	adc	r25, r26
    371e:	a1 1d       	adc	r26, r1
    3720:	68 0f       	add	r22, r24
    3722:	79 1f       	adc	r23, r25
    3724:	8a 1f       	adc	r24, r26
    3726:	91 1d       	adc	r25, r1
    3728:	a1 1d       	adc	r26, r1
    372a:	6a 0f       	add	r22, r26
    372c:	71 1d       	adc	r23, r1
    372e:	81 1d       	adc	r24, r1
    3730:	91 1d       	adc	r25, r1
    3732:	a1 1d       	adc	r26, r1
    3734:	20 d0       	rcall	.+64     	; 0x3776 <__ultoa_invert+0x84>
    3736:	09 f4       	brne	.+2      	; 0x373a <__ultoa_invert+0x48>
    3738:	68 94       	set
    373a:	3f 91       	pop	r19
    373c:	2a e0       	ldi	r18, 0x0A	; 10
    373e:	26 9f       	mul	r18, r22
    3740:	11 24       	eor	r1, r1
    3742:	30 19       	sub	r19, r0
    3744:	30 5d       	subi	r19, 0xD0	; 208
    3746:	31 93       	st	Z+, r19
    3748:	de f6       	brtc	.-74     	; 0x3700 <__ultoa_invert+0xe>
    374a:	cf 01       	movw	r24, r30
    374c:	08 95       	ret
    374e:	46 2f       	mov	r20, r22
    3750:	47 70       	andi	r20, 0x07	; 7
    3752:	40 5d       	subi	r20, 0xD0	; 208
    3754:	41 93       	st	Z+, r20
    3756:	b3 e0       	ldi	r27, 0x03	; 3
    3758:	0f d0       	rcall	.+30     	; 0x3778 <__ultoa_invert+0x86>
    375a:	c9 f7       	brne	.-14     	; 0x374e <__ultoa_invert+0x5c>
    375c:	f6 cf       	rjmp	.-20     	; 0x374a <__ultoa_invert+0x58>
    375e:	46 2f       	mov	r20, r22
    3760:	4f 70       	andi	r20, 0x0F	; 15
    3762:	40 5d       	subi	r20, 0xD0	; 208
    3764:	4a 33       	cpi	r20, 0x3A	; 58
    3766:	18 f0       	brcs	.+6      	; 0x376e <__ultoa_invert+0x7c>
    3768:	49 5d       	subi	r20, 0xD9	; 217
    376a:	31 fd       	sbrc	r19, 1
    376c:	40 52       	subi	r20, 0x20	; 32
    376e:	41 93       	st	Z+, r20
    3770:	02 d0       	rcall	.+4      	; 0x3776 <__ultoa_invert+0x84>
    3772:	a9 f7       	brne	.-22     	; 0x375e <__ultoa_invert+0x6c>
    3774:	ea cf       	rjmp	.-44     	; 0x374a <__ultoa_invert+0x58>
    3776:	b4 e0       	ldi	r27, 0x04	; 4
    3778:	a6 95       	lsr	r26
    377a:	97 95       	ror	r25
    377c:	87 95       	ror	r24
    377e:	77 95       	ror	r23
    3780:	67 95       	ror	r22
    3782:	ba 95       	dec	r27
    3784:	c9 f7       	brne	.-14     	; 0x3778 <__ultoa_invert+0x86>
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	61 05       	cpc	r22, r1
    378a:	71 05       	cpc	r23, r1
    378c:	08 95       	ret
    378e:	9b 01       	movw	r18, r22
    3790:	ac 01       	movw	r20, r24
    3792:	0a 2e       	mov	r0, r26
    3794:	06 94       	lsr	r0
    3796:	57 95       	ror	r21
    3798:	47 95       	ror	r20
    379a:	37 95       	ror	r19
    379c:	27 95       	ror	r18
    379e:	ba 95       	dec	r27
    37a0:	c9 f7       	brne	.-14     	; 0x3794 <__ultoa_invert+0xa2>
    37a2:	62 0f       	add	r22, r18
    37a4:	73 1f       	adc	r23, r19
    37a6:	84 1f       	adc	r24, r20
    37a8:	95 1f       	adc	r25, r21
    37aa:	a0 1d       	adc	r26, r0
    37ac:	08 95       	ret

Disassembly of section .text.avrlibc:

00006938 <__ctype_isfalse>:
    6938:	99 27       	eor	r25, r25
    693a:	88 27       	eor	r24, r24

0000693c <__ctype_istrue>:
    693c:	08 95       	ret

Disassembly of section .text.avrlibc:

00006018 <eeprom_read_block>:
    6018:	ba 01       	movw	r22, r20
    601a:	a9 01       	movw	r20, r18
    601c:	dc 01       	movw	r26, r24
    601e:	cb 01       	movw	r24, r22

00006020 <eeprom_read_blraw>:
    6020:	fc 01       	movw	r30, r24
    6022:	f9 99       	sbic	0x1f, 1	; 31
    6024:	fe cf       	rjmp	.-4      	; 0x6022 <eeprom_read_blraw+0x2>
    6026:	06 c0       	rjmp	.+12     	; 0x6034 <eeprom_read_blraw+0x14>
    6028:	f2 bd       	out	0x22, r31	; 34
    602a:	e1 bd       	out	0x21, r30	; 33
    602c:	f8 9a       	sbi	0x1f, 0	; 31
    602e:	31 96       	adiw	r30, 0x01	; 1
    6030:	00 b4       	in	r0, 0x20	; 32
    6032:	0d 92       	st	X+, r0
    6034:	41 50       	subi	r20, 0x01	; 1
    6036:	50 40       	sbci	r21, 0x00	; 0
    6038:	b8 f7       	brcc	.-18     	; 0x6028 <eeprom_read_blraw+0x8>
    603a:	08 95       	ret

Disassembly of section .text.avrlibc:

000065d4 <eeprom_read_byte>:
    65d4:	cb 01       	movw	r24, r22
    65d6:	f9 99       	sbic	0x1f, 1	; 31
    65d8:	fe cf       	rjmp	.-4      	; 0x65d6 <eeprom_read_byte+0x2>
    65da:	92 bd       	out	0x22, r25	; 34
    65dc:	81 bd       	out	0x21, r24	; 33
    65de:	f8 9a       	sbi	0x1f, 0	; 31
    65e0:	99 27       	eor	r25, r25
    65e2:	80 b5       	in	r24, 0x20	; 32
    65e4:	08 95       	ret

Disassembly of section .text.avrlibc:

0000673c <eeprom_read_dword>:
    673c:	cb 01       	movw	r24, r22
    673e:	a6 e1       	ldi	r26, 0x16	; 22
    6740:	b0 e0       	ldi	r27, 0x00	; 0
    6742:	44 e0       	ldi	r20, 0x04	; 4
    6744:	50 e0       	ldi	r21, 0x00	; 0
    6746:	0c 94 10 30 	jmp	0x6020	; 0x6020 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000674a <eeprom_read_word>:
    674a:	cb 01       	movw	r24, r22
    674c:	a8 e1       	ldi	r26, 0x18	; 24
    674e:	b0 e0       	ldi	r27, 0x00	; 0
    6750:	42 e0       	ldi	r20, 0x02	; 2
    6752:	50 e0       	ldi	r21, 0x00	; 0
    6754:	0c 94 10 30 	jmp	0x6020	; 0x6020 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000551c <eeprom_update_block>:
    551c:	cf 92       	push	r12
    551e:	df 92       	push	r13
    5520:	ef 92       	push	r14
    5522:	21 50       	subi	r18, 0x01	; 1
    5524:	31 09       	sbc	r19, r1
    5526:	c0 f0       	brcs	.+48     	; 0x5558 <eeprom_update_block+0x3c>
    5528:	6b 01       	movw	r12, r22
    552a:	e8 2e       	mov	r14, r24
    552c:	c2 0e       	add	r12, r18
    552e:	d3 1e       	adc	r13, r19
    5530:	e1 1c       	adc	r14, r1
    5532:	ca 01       	movw	r24, r20
    5534:	82 0f       	add	r24, r18
    5536:	93 1f       	adc	r25, r19
    5538:	42 2f       	mov	r20, r18
    553a:	73 2f       	mov	r23, r19
    553c:	f6 01       	movw	r30, r12
    553e:	5e 2d       	mov	r21, r14
    5540:	0e 94 44 34 	call	0x6888	; 0x6888 <__xload_1>
    5544:	26 2f       	mov	r18, r22
    5546:	0e 94 1f 30 	call	0x603e	; 0x603e <eeprom_update_r18>
    554a:	31 e0       	ldi	r19, 0x01	; 1
    554c:	c3 1a       	sub	r12, r19
    554e:	d1 08       	sbc	r13, r1
    5550:	e1 08       	sbc	r14, r1
    5552:	41 50       	subi	r20, 0x01	; 1
    5554:	70 40       	sbci	r23, 0x00	; 0
    5556:	90 f7       	brcc	.-28     	; 0x553c <eeprom_update_block+0x20>
    5558:	ef 90       	pop	r14
    555a:	df 90       	pop	r13
    555c:	cf 90       	pop	r12
    555e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000603c <eeprom_update_byte>:
    603c:	26 2f       	mov	r18, r22

0000603e <eeprom_update_r18>:
    603e:	f9 99       	sbic	0x1f, 1	; 31
    6040:	fe cf       	rjmp	.-4      	; 0x603e <eeprom_update_r18>
    6042:	92 bd       	out	0x22, r25	; 34
    6044:	81 bd       	out	0x21, r24	; 33
    6046:	f8 9a       	sbi	0x1f, 0	; 31
    6048:	01 97       	sbiw	r24, 0x01	; 1
    604a:	00 b4       	in	r0, 0x20	; 32
    604c:	02 16       	cp	r0, r18
    604e:	39 f0       	breq	.+14     	; 0x605e <eeprom_update_r18+0x20>
    6050:	1f ba       	out	0x1f, r1	; 31
    6052:	20 bd       	out	0x20, r18	; 32
    6054:	0f b6       	in	r0, 0x3f	; 63
    6056:	f8 94       	cli
    6058:	fa 9a       	sbi	0x1f, 2	; 31
    605a:	f9 9a       	sbi	0x1f, 1	; 31
    605c:	0f be       	out	0x3f, r0	; 63
    605e:	08 95       	ret

Disassembly of section .text.avrlibc:

00006418 <eeprom_update_dword>:
    6418:	03 96       	adiw	r24, 0x03	; 3
    641a:	27 2f       	mov	r18, r23
    641c:	0e 94 1f 30 	call	0x603e	; 0x603e <eeprom_update_r18>
    6420:	0e 94 1e 30 	call	0x603c	; 0x603c <eeprom_update_byte>
    6424:	25 2f       	mov	r18, r21
    6426:	0e 94 1f 30 	call	0x603e	; 0x603e <eeprom_update_r18>
    642a:	24 2f       	mov	r18, r20
    642c:	0c 94 1f 30 	jmp	0x603e	; 0x603e <eeprom_update_r18>

Disassembly of section .text.avrlibc:

00006818 <eeprom_update_word>:
    6818:	01 96       	adiw	r24, 0x01	; 1
    681a:	27 2f       	mov	r18, r23
    681c:	0e 94 1f 30 	call	0x603e	; 0x603e <eeprom_update_r18>
    6820:	0c 94 1e 30 	jmp	0x603c	; 0x603c <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

000061ce <__mulsi3>:
    61ce:	db 01       	movw	r26, r22
    61d0:	8f 93       	push	r24
    61d2:	9f 93       	push	r25
    61d4:	0e 94 44 32 	call	0x6488	; 0x6488 <__muluhisi3>
    61d8:	bf 91       	pop	r27
    61da:	af 91       	pop	r26
    61dc:	a2 9f       	mul	r26, r18
    61de:	80 0d       	add	r24, r0
    61e0:	91 1d       	adc	r25, r1
    61e2:	a3 9f       	mul	r26, r19
    61e4:	90 0d       	add	r25, r0
    61e6:	b2 9f       	mul	r27, r18
    61e8:	90 0d       	add	r25, r0
    61ea:	11 24       	eor	r1, r1
    61ec:	08 95       	ret

Disassembly of section .text.libgcc.div:

00005560 <__udivmodsi4>:
    5560:	a1 e2       	ldi	r26, 0x21	; 33
    5562:	1a 2e       	mov	r1, r26
    5564:	aa 1b       	sub	r26, r26
    5566:	bb 1b       	sub	r27, r27
    5568:	fd 01       	movw	r30, r26
    556a:	0d c0       	rjmp	.+26     	; 0x5586 <__udivmodsi4_ep>

0000556c <__udivmodsi4_loop>:
    556c:	aa 1f       	adc	r26, r26
    556e:	bb 1f       	adc	r27, r27
    5570:	ee 1f       	adc	r30, r30
    5572:	ff 1f       	adc	r31, r31
    5574:	a2 17       	cp	r26, r18
    5576:	b3 07       	cpc	r27, r19
    5578:	e4 07       	cpc	r30, r20
    557a:	f5 07       	cpc	r31, r21
    557c:	20 f0       	brcs	.+8      	; 0x5586 <__udivmodsi4_ep>
    557e:	a2 1b       	sub	r26, r18
    5580:	b3 0b       	sbc	r27, r19
    5582:	e4 0b       	sbc	r30, r20
    5584:	f5 0b       	sbc	r31, r21

00005586 <__udivmodsi4_ep>:
    5586:	66 1f       	adc	r22, r22
    5588:	77 1f       	adc	r23, r23
    558a:	88 1f       	adc	r24, r24
    558c:	99 1f       	adc	r25, r25
    558e:	1a 94       	dec	r1
    5590:	69 f7       	brne	.-38     	; 0x556c <__udivmodsi4_loop>
    5592:	60 95       	com	r22
    5594:	70 95       	com	r23
    5596:	80 95       	com	r24
    5598:	90 95       	com	r25
    559a:	9b 01       	movw	r18, r22
    559c:	ac 01       	movw	r20, r24
    559e:	bd 01       	movw	r22, r26
    55a0:	cf 01       	movw	r24, r30
    55a2:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00006488 <__muluhisi3>:
    6488:	0e 94 42 31 	call	0x6284	; 0x6284 <__umulhisi3>
    648c:	a5 9f       	mul	r26, r21
    648e:	90 0d       	add	r25, r0
    6490:	b4 9f       	mul	r27, r20
    6492:	90 0d       	add	r25, r0
    6494:	a4 9f       	mul	r26, r20
    6496:	80 0d       	add	r24, r0
    6498:	91 1d       	adc	r25, r1
    649a:	11 24       	eor	r1, r1
    649c:	08 95       	ret

Disassembly of section .text.libgcc:

00006888 <__xload_1>:
    6888:	57 fd       	sbrc	r21, 7
    688a:	60 81       	ld	r22, Z
    688c:	57 ff       	sbrs	r21, 7
    688e:	64 91       	lpm	r22, Z
    6890:	08 95       	ret
