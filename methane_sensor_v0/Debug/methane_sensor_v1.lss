
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000078c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f6  00800100  00800100  0000078c  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000368  00000000  00000000  000007e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004485  00000000  00000000  00000b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012d5  00000000  00000000  00004fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018a8  00000000  00000000  000062a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007fc  00000000  00000000  00007b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00008350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001260  00000000  00000000  00008747  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a8  00000000  00000000  000099a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000006f4  000006f4  00000788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_3 00000014  000006ae  000006ae  00000742  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.rn2483_init 00000008  000006da  000006da  0000076e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_16 0000004e  00000384  00000384  00000418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_13 0000004e  000003d2  000003d2  00000466  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TC2_HAL_init 00000020  0000068e  0000068e  00000722  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_9 00000098  0000014e  0000014e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.cnt      00000001  0080042c  0080042c  0000078c  2**0
                  ALLOC
 21 .bss.callbacks 0000000a  00800422  00800422  0000078c  2**0
                  ALLOC
 22 .text.copy_buffer 0000002e  000005de  000005de  00000672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.uart0_hal_init 0000003c  0000053c  0000053c  000005d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.uart0_hal_send_message 00000034  00000578  00000578  0000060c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.uart0_hal_send_string 0000006a  000002ca  000002ca  0000035e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.uart0_hal_message_ready 0000000e  000006c2  000006c2  00000756  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.uart0_hal_clear_rx_buffer 0000000a  000006d0  000006d0  00000764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.uart0_hal_read_message_as_str 00000028  00000666  00000666  000006fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.uart0_hal_send_break 00000046  000004b4  000004b4  00000548  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_22 0000004a  00000420  00000420  000004b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_20 00000074  000001e6  000001e6  0000027a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.rx_buffer_has_message 00000001  0080042d  0080042d  0000078c  2**0
                  ALLOC
 33 .bss.rx_buffer_data_len 00000001  0080042e  0080042e  0000078c  2**0
                  ALLOC
 34 .bss.tx_buffer_cursor 00000001  0080042f  0080042f  0000078c  2**0
                  ALLOC
 35 .bss.tx_buffer_data_len 00000001  00800430  00800430  0000078c  2**0
                  ALLOC
 36 .text.__vector_30 0000004a  0000046a  0000046a  000004fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_28 00000070  0000025a  0000025a  000002ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .bss.rx_buffer_has_message 00000001  00800431  00800431  0000078c  2**0
                  ALLOC
 39 .bss.rx_buffer_data_len 00000001  00800432  00800432  0000078c  2**0
                  ALLOC
 40 .bss.rx_buffer 00000064  008003be  008003be  0000078c  2**0
                  ALLOC
 41 .bss.tx_buffer_cursor 00000001  00800433  00800433  0000078c  2**0
                  ALLOC
 42 .bss.tx_buffer_data_len 00000001  00800434  00800434  0000078c  2**0
                  ALLOC
 43 .bss.tx_buffer 000000c8  008002f6  008002f6  0000078c  2**0
                  ALLOC
 44 .text.main    00000006  000006e2  000006e2  00000776  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.LM_wake_up 00000006  000006e8  000006e8  0000077c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .progmemx.data 00000003  0000014a  0000014a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 47 .text.SC_wake_up 00000032  000005ac  000005ac  00000640  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.util_read_msg 00000006  000006ee  000006ee  00000782  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .progmemx.data 00000074  000000d6  000000d6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 50 .text.test_wake_up 00000050  00000334  00000334  000003c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.test_lora_module_start 0000002e  0000060c  0000060c  000006a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.avrlibc 00000042  000004fa  000004fa  0000058e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.avrlibc 0000002c  0000063a  0000063a  000006ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
   8:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
   c:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_3>
  10:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  14:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  18:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  1c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  20:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  24:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_9>
  28:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  2c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  30:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  34:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_13>
  38:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  3c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  40:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_16>
  44:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  48:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  4c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_20>
  54:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  58:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_22>
  5c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  60:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  64:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  68:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  6c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  70:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_28>
  74:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
  78:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_30>

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	04 35       	cpi	r16, 0x54	; 84
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d0 e1       	ldi	r29, 0x10	; 16
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <main>
  ce:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

000006f4 <__bad_interrupt>:
 6f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_3:

000006ae <__vector_3>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
}

ISR(INT2_vect){
 6ae:	1f 92       	push	r1
 6b0:	0f 92       	push	r0
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	0f 92       	push	r0
 6b6:	11 24       	eor	r1, r1
	
}
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

Disassembly of section .text.rn2483_init:

000006da <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
 6da:	84 b1       	in	r24, 0x04	; 4
 6dc:	80 61       	ori	r24, 0x10	; 16
 6de:	84 b9       	out	0x04, r24	; 4
 6e0:	08 95       	ret

Disassembly of section .text.__vector_16:

00000384 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
	_cb();
 3a6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 3aa:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 3ae:	09 95       	icall
}
 3b0:	ff 91       	pop	r31
 3b2:	ef 91       	pop	r30
 3b4:	bf 91       	pop	r27
 3b6:	af 91       	pop	r26
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	7f 91       	pop	r23
 3be:	6f 91       	pop	r22
 3c0:	5f 91       	pop	r21
 3c2:	4f 91       	pop	r20
 3c4:	3f 91       	pop	r19
 3c6:	2f 91       	pop	r18
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

Disassembly of section .text.__vector_13:

000003d2 <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	2f 93       	push	r18
 3de:	3f 93       	push	r19
 3e0:	4f 93       	push	r20
 3e2:	5f 93       	push	r21
 3e4:	6f 93       	push	r22
 3e6:	7f 93       	push	r23
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
 3ec:	af 93       	push	r26
 3ee:	bf 93       	push	r27
 3f0:	ef 93       	push	r30
 3f2:	ff 93       	push	r31
	_cb();
 3f4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 3f8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 3fc:	09 95       	icall
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

Disassembly of section .text.TC2_HAL_init:

0000068e <TC2_HAL_init>:
static callback_ptr callbacks[MAX_CALLBACKS];
static uint8_t cbCounter=0;
static uint8_t cnt=0;

void TC2_HAL_init(){
	TCCR2A=0x02; //Set mode=CTC
 68e:	82 e0       	ldi	r24, 0x02	; 2
 690:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	TCCR2B=0x00; //Stop timer
 694:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f00b1>
	
	//Disable async
	ASSR=0x00;
 698:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f00b6>
	
	TCNT2=0; //Set counter to 0
 69c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f00b2>
	OCR2A=251; //15 Hz, 31 event pr s
 6a0:	9b ef       	ldi	r25, 0xFB	; 251
 6a2:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f00b3>
	
	//Enable interrupt
	TIMSK2=0x02;
 6a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f0070>
	sei();
 6aa:	78 94       	sei
 6ac:	08 95       	ret

Disassembly of section .text.__vector_9:

0000014e <__vector_9>:
static void start_timer(){
	TCCR2B=0x07;
}

static void stop_timer(){
	TCCR2B=0x00;
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	cf 93       	push	r28
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
 172:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <cnt>
 176:	9f 5f       	subi	r25, 0xFF	; 255
 178:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <cnt>
 17c:	89 e0       	ldi	r24, 0x09	; 9
 17e:	98 9f       	mul	r25, r24
 180:	21 2d       	mov	r18, r1
 182:	11 24       	eor	r1, r1
 184:	89 2f       	mov	r24, r25
 186:	82 1b       	sub	r24, r18
 188:	86 95       	lsr	r24
 18a:	82 0f       	add	r24, r18
 18c:	82 95       	swap	r24
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	2f e1       	ldi	r18, 0x1F	; 31
 192:	82 9f       	mul	r24, r18
 194:	90 19       	sub	r25, r0
 196:	11 24       	eor	r1, r1
 198:	91 11       	cpse	r25, r1
 19a:	13 c0       	rjmp	.+38     	; 0x1c2 <__vector_9+0x74>
 19c:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <cnt>
 1a0:	c0 e0       	ldi	r28, 0x00	; 0
 1a2:	0d c0       	rjmp	.+26     	; 0x1be <__vector_9+0x70>
 1a4:	ec 2f       	mov	r30, r28
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	ee 5d       	subi	r30, 0xDE	; 222
 1ae:	fb 4f       	sbci	r31, 0xFB	; 251
 1b0:	01 90       	ld	r0, Z+
 1b2:	f0 81       	ld	r31, Z
 1b4:	e0 2d       	mov	r30, r0
 1b6:	30 97       	sbiw	r30, 0x00	; 0
 1b8:	09 f0       	breq	.+2      	; 0x1bc <__vector_9+0x6e>
 1ba:	09 95       	icall
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
 1be:	c5 30       	cpi	r28, 0x05	; 5
 1c0:	88 f3       	brcs	.-30     	; 0x1a4 <__vector_9+0x56>
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	cf 91       	pop	r28
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

Disassembly of section .text.copy_buffer:

000005de <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
 5de:	bc 01       	movw	r22, r24
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <copy_buffer+0x18>
 5e4:	fb 01       	movw	r30, r22
 5e6:	e9 0f       	add	r30, r25
 5e8:	f1 1d       	adc	r31, r1
 5ea:	da 01       	movw	r26, r20
 5ec:	ae 5f       	subi	r26, 0xFE	; 254
 5ee:	be 4f       	sbci	r27, 0xFE	; 254
 5f0:	2c 91       	ld	r18, X
 5f2:	20 83       	st	Z, r18
 5f4:	9f 5f       	subi	r25, 0xFF	; 255
 5f6:	49 2f       	mov	r20, r25
 5f8:	50 e0       	ldi	r21, 0x00	; 0
 5fa:	20 91 2e 04 	lds	r18, 0x042E	; 0x80042e <rx_buffer_data_len>
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	22 50       	subi	r18, 0x02	; 2
 602:	31 09       	sbc	r19, r1
 604:	42 17       	cp	r20, r18
 606:	53 07       	cpc	r21, r19
 608:	6c f3       	brlt	.-38     	; 0x5e4 <copy_buffer+0x6>
 60a:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

0000053c <uart0_hal_init>:
 53c:	e1 ec       	ldi	r30, 0xC1	; 193
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	80 61       	ori	r24, 0x10	; 16
 544:	80 83       	st	Z, r24
 546:	80 81       	ld	r24, Z
 548:	88 60       	ori	r24, 0x08	; 8
 54a:	80 83       	st	Z, r24
 54c:	80 81       	ld	r24, Z
 54e:	80 68       	ori	r24, 0x80	; 128
 550:	80 83       	st	Z, r24
 552:	80 81       	ld	r24, Z
 554:	80 64       	ori	r24, 0x40	; 64
 556:	80 83       	st	Z, r24
 558:	e0 ec       	ldi	r30, 0xC0	; 192
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	82 60       	ori	r24, 0x02	; 2
 560:	80 83       	st	Z, r24
 562:	86 e0       	ldi	r24, 0x06	; 6
 564:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
 568:	80 e1       	ldi	r24, 0x10	; 16
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
 570:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
 574:	78 94       	sei
 576:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00000578 <uart0_hal_send_message>:
 578:	dc 01       	movw	r26, r24
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0b c0       	rjmp	.+22     	; 0x594 <uart0_hal_send_message+0x1c>
 57e:	29 2f       	mov	r18, r25
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	fd 01       	movw	r30, r26
 584:	e2 0f       	add	r30, r18
 586:	f3 1f       	adc	r31, r19
 588:	40 81       	ld	r20, Z
 58a:	f9 01       	movw	r30, r18
 58c:	ea 59       	subi	r30, 0x9A	; 154
 58e:	fe 4f       	sbci	r31, 0xFE	; 254
 590:	40 83       	st	Z, r20
 592:	9f 5f       	subi	r25, 0xFF	; 255
 594:	96 17       	cp	r25, r22
 596:	98 f3       	brcs	.-26     	; 0x57e <uart0_hal_send_message+0x6>
 598:	60 93 30 04 	sts	0x0430, r22	; 0x800430 <tx_buffer_data_len>
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <tx_buffer_cursor>
 5a2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <tx_buffer>
 5a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 5aa:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

000002ca <uart0_hal_send_string>:
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	6b 01       	movw	r12, r22
 2d8:	e8 2e       	mov	r14, r24
 2da:	c0 e0       	ldi	r28, 0x00	; 0
 2dc:	12 c0       	rjmp	.+36     	; 0x302 <uart0_hal_send_string+0x38>
 2de:	8c 2f       	mov	r24, r28
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	4e 2d       	mov	r20, r14
 2e4:	96 01       	movw	r18, r12
 2e6:	20 0f       	add	r18, r16
 2e8:	31 1f       	adc	r19, r17
 2ea:	41 1d       	adc	r20, r1
 2ec:	17 fd       	sbrc	r17, 7
 2ee:	4a 95       	dec	r20
 2f0:	f9 01       	movw	r30, r18
 2f2:	24 91       	lpm	r18, Z
 2f4:	47 fd       	sbrc	r20, 7
 2f6:	20 81       	ld	r18, Z
 2f8:	fc 01       	movw	r30, r24
 2fa:	ea 59       	subi	r30, 0x9A	; 154
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	20 83       	st	Z, r18
 300:	cf 5f       	subi	r28, 0xFF	; 255
 302:	0c 2f       	mov	r16, r28
 304:	10 e0       	ldi	r17, 0x00	; 0
 306:	8e 2d       	mov	r24, r14
 308:	b6 01       	movw	r22, r12
 30a:	0e 94 1d 03 	call	0x63a	; 0x63a <strlen>
 30e:	08 17       	cp	r16, r24
 310:	19 07       	cpc	r17, r25
 312:	28 f3       	brcs	.-54     	; 0x2de <uart0_hal_send_string+0x14>
 314:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <tx_buffer_data_len>
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <tx_buffer_cursor>
 31e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <tx_buffer>
 322:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	cf 90       	pop	r12
 332:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

000006c2 <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
 6c2:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <rx_buffer_has_message>
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	91 11       	cpse	r25, r1
 6ca:	01 c0       	rjmp	.+2      	; 0x6ce <uart0_hal_message_ready+0xc>
 6cc:	80 e0       	ldi	r24, 0x00	; 0
}
 6ce:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

000006d0 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
 6d0:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <rx_buffer_has_message>
	rx_buffer_data_len=0;
 6d4:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <rx_buffer_data_len>
 6d8:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00000666 <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(uint8_t msg[]){
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	8c 01       	movw	r16, r24
	copy_buffer(msg);
 66e:	0e 94 ef 02 	call	0x5de	; 0x5de <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
 672:	c0 91 2e 04 	lds	r28, 0x042E	; 0x80042e <rx_buffer_data_len>
 676:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
 678:	f8 01       	movw	r30, r16
 67a:	ec 0f       	add	r30, r28
 67c:	f1 1d       	adc	r31, r1
 67e:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
 680:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart0_hal_clear_rx_buffer>
	return len;
}
 684:	8c 2f       	mov	r24, r28
 686:	cf 91       	pop	r28
 688:	1f 91       	pop	r17
 68a:	0f 91       	pop	r16
 68c:	08 95       	ret

Disassembly of section .text.uart0_hal_send_break:

000004b4 <uart0_hal_send_break>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	1f 92       	push	r1
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	9a b1       	in	r25, 0x0a	; 10
 4c0:	92 60       	ori	r25, 0x02	; 2
 4c2:	9a b9       	out	0x0a, r25	; 10
 4c4:	e1 ec       	ldi	r30, 0xC1	; 193
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	90 81       	ld	r25, Z
 4ca:	97 7f       	andi	r25, 0xF7	; 247
 4cc:	90 83       	st	Z, r25
 4ce:	9b b1       	in	r25, 0x0b	; 11
 4d0:	9d 7f       	andi	r25, 0xFD	; 253
 4d2:	9b b9       	out	0x0b, r25	; 11
 4d4:	af e9       	ldi	r26, 0x9F	; 159
 4d6:	bf e0       	ldi	r27, 0x0F	; 15
 4d8:	11 97       	sbiw	r26, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <uart0_hal_send_break+0x24>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <uart0_hal_send_break+0x2a>
 4de:	00 00       	nop
 4e0:	90 81       	ld	r25, Z
 4e2:	98 60       	ori	r25, 0x08	; 8
 4e4:	90 83       	st	Z, r25
 4e6:	89 83       	std	Y+1, r24	; 0x01
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	ce 01       	movw	r24, r28
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	0e 94 bc 02 	call	0x578	; 0x578 <uart0_hal_send_message>
 4f2:	0f 90       	pop	r0
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

Disassembly of section .text.__vector_22:

00000420 <__vector_22>:
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	8f 93       	push	r24
 42c:	ef 93       	push	r30
 42e:	ff 93       	push	r31
 430:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <tx_buffer_cursor>
 434:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <tx_buffer_data_len>
 438:	e8 17       	cp	r30, r24
 43a:	58 f4       	brcc	.+22     	; 0x452 <__vector_22+0x32>
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	8e 0f       	add	r24, r30
 440:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <tx_buffer_cursor>
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	ea 59       	subi	r30, 0x9A	; 154
 448:	fe 4f       	sbci	r31, 0xFE	; 254
 44a:	80 81       	ld	r24, Z
 44c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 450:	04 c0       	rjmp	.+8      	; 0x45a <__vector_22+0x3a>
 452:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <tx_buffer_cursor>
 456:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <tx_buffer_data_len>
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	8f 91       	pop	r24
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

Disassembly of section .text.__vector_20:

000001e6 <__vector_20>:
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
 1fa:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <rx_buffer_has_message>
 1fe:	81 11       	cpse	r24, r1
 200:	0e c0       	rjmp	.+28     	; 0x21e <__vector_20+0x38>
 202:	e0 91 2e 04 	lds	r30, 0x042E	; 0x80042e <rx_buffer_data_len>
 206:	e4 36       	cpi	r30, 0x64	; 100
 208:	50 f4       	brcc	.+20     	; 0x21e <__vector_20+0x38>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	8e 0f       	add	r24, r30
 20e:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <rx_buffer_data_len>
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 218:	ee 5f       	subi	r30, 0xFE	; 254
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	80 83       	st	Z, r24
 21e:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <rx_buffer_data_len>
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	80 f0       	brcs	.+32     	; 0x246 <__vector_20+0x60>
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	ef 5f       	subi	r30, 0xFF	; 255
 22c:	fe 4f       	sbci	r31, 0xFE	; 254
 22e:	20 81       	ld	r18, Z
 230:	2a 30       	cpi	r18, 0x0A	; 10
 232:	49 f4       	brne	.+18     	; 0x246 <__vector_20+0x60>
 234:	fc 01       	movw	r30, r24
 236:	e0 50       	subi	r30, 0x00	; 0
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	80 81       	ld	r24, Z
 23c:	8d 30       	cpi	r24, 0x0D	; 13
 23e:	19 f4       	brne	.+6      	; 0x246 <__vector_20+0x60>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <rx_buffer_has_message>
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

Disassembly of section .text.__vector_30:

0000046a <__vector_30>:


/************************************************************************/
/* Write data complete vect                                             */
/************************************************************************/
ISR(USART1_TX_vect){
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	8f 93       	push	r24
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
	if(tx_buffer_cursor<tx_buffer_data_len){
 47a:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <tx_buffer_cursor>
 47e:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <tx_buffer_data_len>
 482:	e8 17       	cp	r30, r24
 484:	58 f4       	brcc	.+22     	; 0x49c <__vector_30+0x32>
		UDR1=tx_buffer[tx_buffer_cursor++];
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	8e 0f       	add	r24, r30
 48a:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <tx_buffer_cursor>
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	ea 50       	subi	r30, 0x0A	; 10
 492:	fd 4f       	sbci	r31, 0xFD	; 253
 494:	80 81       	ld	r24, Z
 496:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__vector_30+0x3a>
		}else{
		tx_buffer_cursor=0;
 49c:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <tx_buffer_cursor>
		tx_buffer_data_len=0;
 4a0:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <tx_buffer_data_len>
	}
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	8f 91       	pop	r24
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

Disassembly of section .text.__vector_28:

0000025a <__vector_28>:
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	msg[len]='\0';
	uart1_hal_clear_rx_buffer();
	return len;
}
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
 26e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <rx_buffer_has_message>
 272:	81 11       	cpse	r24, r1
 274:	0e c0       	rjmp	.+28     	; 0x292 <__vector_28+0x38>
 276:	e0 91 32 04 	lds	r30, 0x0432	; 0x800432 <rx_buffer_data_len>
 27a:	e4 36       	cpi	r30, 0x64	; 100
 27c:	50 f4       	brcc	.+20     	; 0x292 <__vector_28+0x38>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	8e 0f       	add	r24, r30
 282:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <rx_buffer_data_len>
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
 28c:	e2 54       	subi	r30, 0x42	; 66
 28e:	fc 4f       	sbci	r31, 0xFC	; 252
 290:	80 83       	st	Z, r24
 292:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <rx_buffer_data_len>
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	e3 54       	subi	r30, 0x43	; 67
 29c:	fc 4f       	sbci	r31, 0xFC	; 252
 29e:	20 81       	ld	r18, Z
 2a0:	2a 30       	cpi	r18, 0x0A	; 10
 2a2:	49 f4       	brne	.+18     	; 0x2b6 <__vector_28+0x5c>
 2a4:	fc 01       	movw	r30, r24
 2a6:	e4 54       	subi	r30, 0x44	; 68
 2a8:	fc 4f       	sbci	r31, 0xFC	; 252
 2aa:	80 81       	ld	r24, Z
 2ac:	8d 30       	cpi	r24, 0x0D	; 13
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <__vector_28+0x5c>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <rx_buffer_has_message>
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

Disassembly of section .text.main:

000006e2 <main>:
#include "TEST/UART0_HAL/test_UART0_HAL.h"
#include "TEST/TC2_HAL/test_TC2_HAL.h"

int main(void)
{
	test_lora_module_start();
 6e2:	0e 94 06 03 	call	0x60c	; 0x60c <test_lora_module_start>
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <main+0x4>

Disassembly of section .text.LM_wake_up:

000006e8 <LM_wake_up>:
LM_STATUS LM_put_to_sleep(){
	return SC_put_to_sleep();
}

LM_STATUS LM_wake_up(){
	return SC_wake_up();
 6e8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <SC_wake_up>
}
 6ec:	08 95       	ret

Disassembly of section .text.SC_wake_up:

000005ac <SC_wake_up>:
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
	return LM_STATUS_ERROR;
}

LM_STATUS SC_wake_up(){
	uart0_hal_send_break(0x55);
 5ac:	85 e5       	ldi	r24, 0x55	; 85
 5ae:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <uart0_hal_send_break>
	
	//Wait for response
	while(uart0_hal_message_ready()==false){}
 5b2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <uart0_hal_message_ready>
 5b6:	88 23       	and	r24, r24
 5b8:	e1 f3       	breq	.-8      	; 0x5b2 <SC_wake_up+0x6>
	
	util_read_msg(lm_msg);
 5ba:	8e e2       	ldi	r24, 0x2E	; 46
 5bc:	92 e0       	ldi	r25, 0x02	; 2
 5be:	0e 94 77 03 	call	0x6ee	; 0x6ee <util_read_msg>
	
	if(strcmp(lm_msg, OK)==0) return LM_STATUS_SUCCESS;
 5c2:	6e e2       	ldi	r22, 0x2E	; 46
 5c4:	72 e0       	ldi	r23, 0x02	; 2
 5c6:	80 e8       	ldi	r24, 0x80	; 128
 5c8:	2a e4       	ldi	r18, 0x4A	; 74
 5ca:	31 e0       	ldi	r19, 0x01	; 1
 5cc:	40 e0       	ldi	r20, 0x00	; 0
 5ce:	0e 94 7d 02 	call	0x4fa	; 0x4fa <strcmp>
 5d2:	89 2b       	or	r24, r25
 5d4:	11 f4       	brne	.+4      	; 0x5da <SC_wake_up+0x2e>
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	08 95       	ret
	return LM_STATUS_ERROR;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	08 95       	ret

Disassembly of section .text.util_read_msg:

000006ee <util_read_msg>:
void util_transmit_msg(char msg[]){
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
}

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str((uint8_t*) msg);
 6ee:	0e 94 33 03 	call	0x666	; 0x666 <uart0_hal_read_message_as_str>
 6f2:	08 95       	ret

Disassembly of section .text.test_wake_up:

00000334 <test_wake_up>:
		_delay_ms(3000);
	}
}

void test_wake_up(){
	LM_STATUS status=LM_wake_up();
 334:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LM_wake_up>
	if(status==LM_STATUS_SUCCESS){
 338:	81 11       	cpse	r24, r1
 33a:	06 c0       	rjmp	.+12     	; 0x348 <test_wake_up+0x14>
		uart0_hal_send_string("OK ");
 33c:	66 ed       	ldi	r22, 0xD6	; 214
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 65 01 	call	0x2ca	; 0x2ca <uart0_hal_send_string>
 346:	08 95       	ret
	}else if(status==LM_STATUS_TRY_AGAIN){
 348:	83 30       	cpi	r24, 0x03	; 3
 34a:	31 f4       	brne	.+12     	; 0x358 <test_wake_up+0x24>
		uart0_hal_send_string("TRY AGAIN ");
 34c:	6a ed       	ldi	r22, 0xDA	; 218
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 65 01 	call	0x2ca	; 0x2ca <uart0_hal_send_string>
 356:	08 95       	ret
	}else if(status==LM_STATUS_ERROR){
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	31 f4       	brne	.+12     	; 0x368 <test_wake_up+0x34>
		uart0_hal_send_string("ERROR ");
 35c:	65 ee       	ldi	r22, 0xE5	; 229
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 65 01 	call	0x2ca	; 0x2ca <uart0_hal_send_string>
 366:	08 95       	ret
	}else if(status==LM_STATUS_CONF_ERR){
 368:	84 30       	cpi	r24, 0x04	; 4
 36a:	31 f4       	brne	.+12     	; 0x378 <test_wake_up+0x44>
		uart0_hal_send_string("CONF_ERR ");
 36c:	6c ee       	ldi	r22, 0xEC	; 236
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 65 01 	call	0x2ca	; 0x2ca <uart0_hal_send_string>
 376:	08 95       	ret
	}else{
		uart0_hal_send_string("FAIL ");
 378:	66 ef       	ldi	r22, 0xF6	; 246
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 65 01 	call	0x2ca	; 0x2ca <uart0_hal_send_string>
 382:	08 95       	ret

Disassembly of section .text.test_lora_module_start:

0000060c <test_lora_module_start>:
void test_wake_up();


void test_lora_module_start(){
	
	uart0_hal_init();
 60c:	0e 94 9e 02 	call	0x53c	; 0x53c <uart0_hal_init>
	rn2483_init();
 610:	0e 94 6d 03 	call	0x6da	; 0x6da <rn2483_init>
	TC2_HAL_init();
 614:	0e 94 47 03 	call	0x68e	; 0x68e <TC2_HAL_init>
	
	while(1){
		uart0_hal_send_string("Starting: ");
 618:	6c ef       	ldi	r22, 0xFC	; 252
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	0e 94 65 01 	call	0x2ca	; 0x2ca <uart0_hal_send_string>
		//test_join_network();
		//test_send_uplink();
		//test_send_uplink_block();
		//test_put_to_sleep();
		test_wake_up();
 622:	0e 94 9a 01 	call	0x334	; 0x334 <test_wake_up>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 626:	2f ef       	ldi	r18, 0xFF	; 255
 628:	8d e3       	ldi	r24, 0x3D	; 61
 62a:	99 e4       	ldi	r25, 0x49	; 73
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	90 40       	sbci	r25, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <test_lora_module_start+0x20>
 634:	00 c0       	rjmp	.+0      	; 0x636 <test_lora_module_start+0x2a>
 636:	00 00       	nop
 638:	ef cf       	rjmp	.-34     	; 0x618 <test_lora_module_start+0xc>

Disassembly of section .text.avrlibc:

000004fa <strcmp>:
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	6b 01       	movw	r12, r22
 502:	e8 2e       	mov	r14, r24
 504:	f6 01       	movw	r30, r12
 506:	84 91       	lpm	r24, Z
 508:	e7 fc       	sbrc	r14, 7
 50a:	80 81       	ld	r24, Z
 50c:	f9 01       	movw	r30, r18
 50e:	54 91       	lpm	r21, Z
 510:	47 fd       	sbrc	r20, 7
 512:	50 81       	ld	r21, Z
 514:	85 13       	cpse	r24, r21
 516:	0b c0       	rjmp	.+22     	; 0x52e <strcmp+0x34>
 518:	88 23       	and	r24, r24
 51a:	41 f0       	breq	.+16     	; 0x52c <strcmp+0x32>
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	c8 1a       	sub	r12, r24
 520:	d8 0a       	sbc	r13, r24
 522:	e8 0a       	sbc	r14, r24
 524:	2f 5f       	subi	r18, 0xFF	; 255
 526:	3f 4f       	sbci	r19, 0xFF	; 255
 528:	4f 4f       	sbci	r20, 0xFF	; 255
 52a:	ec cf       	rjmp	.-40     	; 0x504 <strcmp+0xa>
 52c:	58 2f       	mov	r21, r24
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	85 1b       	sub	r24, r21
 532:	91 09       	sbc	r25, r1
 534:	ef 90       	pop	r14
 536:	df 90       	pop	r13
 538:	cf 90       	pop	r12
 53a:	08 95       	ret

Disassembly of section .text.avrlibc:

0000063a <strlen>:
 63a:	cf 92       	push	r12
 63c:	df 92       	push	r13
 63e:	ef 92       	push	r14
 640:	6b 01       	movw	r12, r22
 642:	e8 2e       	mov	r14, r24
 644:	a8 2f       	mov	r26, r24
 646:	cb 01       	movw	r24, r22
 648:	fc 01       	movw	r30, r24
 64a:	24 91       	lpm	r18, Z
 64c:	a7 fd       	sbrc	r26, 7
 64e:	20 81       	ld	r18, Z
 650:	22 23       	and	r18, r18
 652:	19 f0       	breq	.+6      	; 0x65a <strlen+0x20>
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	a1 1d       	adc	r26, r1
 658:	f7 cf       	rjmp	.-18     	; 0x648 <strlen+0xe>
 65a:	8c 19       	sub	r24, r12
 65c:	9d 09       	sbc	r25, r13
 65e:	ef 90       	pop	r14
 660:	df 90       	pop	r13
 662:	cf 90       	pop	r12
 664:	08 95       	ret
