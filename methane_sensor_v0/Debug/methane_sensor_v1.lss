
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002a40  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ea  00800100  00800100  00002a40  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00002a40  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000054  00000000  00000000  00002a9b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000618  00000000  00000000  00002af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000074ee  00000000  00000000  00003108  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a0a  00000000  00000000  0000a5f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a69  00000000  00000000  0000c000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f64  00000000  00000000  0000ea6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000571  00000000  00000000  0000f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003140  00000000  00000000  0000ff41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  00013081  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000029a8  000029a8  00002a3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001353c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.__vector_3 00000014  0000285a  0000285a  000028ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.rn2483_init 00000008  00002970  00002970  00002a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_16 0000004e  00001eb0  00001eb0  00001f44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss._cb      00000002  00800706  00800706  00002a40  2**0
                  ALLOC
 19 .text.__vector_13 0000004e  00001efe  00001efe  00001f92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss._cb      00000002  00800708  00800708  00002a40  2**0
                  ALLOC
 21 .text.__vector_9 00000098  000017e0  000017e0  00001874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.cnt      00000001  0080070a  0080070a  00002a40  2**0
                  ALLOC
 23 .bss.callbacks 0000000a  008006fc  008006fc  00002a40  2**0
                  ALLOC
 24 .text.copy_buffer 0000002e  0000255c  0000255c  000025f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.uart0_hal_init 0000003c  00002266  00002266  000022fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.uart0_hal_send_message 00000034  00002466  00002466  000024fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.uart0_hal_message_ready 0000000e  00002892  00002892  00002926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.uart0_hal_clear_rx_buffer 0000000a  00002952  00002952  000029e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.uart0_hal_read_message_as_str 00000028  000025e4  000025e4  00002678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_22 0000004a  0000207e  0000207e  00002112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_20 00000074  00001bf2  00001bf2  00001c86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .bss.rx_buffer_has_message 00000001  0080070b  0080070b  00002a40  2**0
                  ALLOC
 33 .bss.rx_buffer_data_len 00000001  0080070c  0080070c  00002a40  2**0
                  ALLOC
 34 .bss.tx_buffer_cursor 00000001  0080070d  0080070d  00002a40  2**0
                  ALLOC
 35 .bss.tx_buffer_data_len 00000001  0080070e  0080070e  00002a40  2**0
                  ALLOC
 36 .text.copy_buffer 0000002e  0000258a  0000258a  0000261e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.uart1_hal_init 0000003c  000022a2  000022a2  00002336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.uart1_hal_send_string 0000008a  0000190e  0000190e  000019a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.uart1_hal_message_ready 0000000e  000028a0  000028a0  00002934  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.uart1_hal_rx_full 0000000e  000028ae  000028ae  00002942  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.uart1_hal_clear_rx_buffer 0000000a  0000295c  0000295c  000029f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.uart1_hal_read_message_as_str 00000028  0000260c  0000260c  000026a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_30 0000004a  000020c8  000020c8  0000215c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__vector_28 00000070  00001c66  00001c66  00001cfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .bss.rx_buffer_has_message 00000001  0080070f  0080070f  00002a40  2**0
                  ALLOC
 46 .bss.rx_buffer_data_len 00000001  00800710  00800710  00002a40  2**0
                  ALLOC
 47 .bss.rx_buffer 00000096  00800616  00800616  00002a40  2**0
                  ALLOC
 48 .bss.tx_buffer_cursor 00000001  00800711  00800711  00002a40  2**0
                  ALLOC
 49 .bss.tx_buffer_data_len 00000001  00800712  00800712  00002a40  2**0
                  ALLOC
 50 .bss.tx_buffer 0000012c  008004ea  008004ea  00002a40  2**0
                  ALLOC
 51 .text.main    00000018  000027d2  000027d2  00002866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.EM_has_deveui 00000016  00002802  00002802  00002896  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EM_has_appeui 00000016  00002818  00002818  000028ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.EM_has_appkey 00000016  0000282e  0000282e  000028c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.EM_set_deveui 0000003a  000022de  000022de  00002372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.EM_get_deveui 00000030  000024cc  000024cc  00002560  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.EM_set_appeui 0000003a  00002318  00002318  000023ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.EM_get_appeui 00000030  000024fc  000024fc  00002590  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.EM_set_appkey 0000003a  00002352  00002352  000023e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.EM_get_appkey 00000030  0000252c  0000252c  000025c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.EM_set_ppmfactor 0000000e  000028bc  000028bc  00002950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.EM_get_ppmfactor 0000001e  00002704  00002704  00002798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.EM_set_RRL 0000000e  000028ca  000028ca  0000295e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.EM_get_RRL 0000001e  00002722  00002722  000027b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.EM_set_Vcc 0000000e  000028d8  000028d8  0000296c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.EM_get_Vcc 0000001e  00002740  00002740  000027d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.LM_forward_msg 00000006  00002990  00002990  00002a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .progmemx.data 00000073  000001e6  000001e6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 69 .text.attach_ending 0000001c  0000279a  0000279a  0000282e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.util_transmit_msg 0000001c  000027b6  000027b6  0000284a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.util_read_msg 00000006  00002996  00002996  00002a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.util_lora_forward_msg 00000036  000023c4  000023c4  00002458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.parse_cmd 00000020  000026c4  000026c4  00002758  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.validate_cmd 00000056  00001e08  00001e08  00001e9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .progmemx.data 00000063  00000259  00000259  000002ed  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 76 .text.CONF_enter 000000e2  0000122e  0000122e  000012c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .progmemx.data 00000061  000002bc  000002bc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 78 .text.CON_RN2483_parse 00000026  00002634  00002634  000026c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.CON_RN2483 000000e0  00001310  00001310  000013a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .progmemx.data 0000004e  0000031d  0000031d  000003b1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 81 .text.write_deveui 00000078  00001a12  00001a12  00001aa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.write_appeui 00000078  00001a8a  00001a8a  00001b1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.write_appkey 00000078  00001b02  00001b02  00001b96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.write_PPM_factor 0000004c  00001f9a  00001f9a  0000202e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.write_RRL 0000004c  00001fe6  00001fe6  0000207a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.write_VCC 0000004c  00002032  00002032  000020c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.handle_read 000001bc  00000d94  00000d94  00000e28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.handle_write 0000012e  00001100  00001100  00001194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .bss.arg      00000050  008006ac  008006ac  00002a40  2**0
                  ALLOC
 90 .text.count_parameters 00000052  00001e5e  00001e5e  00001ef2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.par_index 00000070  00001cd6  00001cd6  00001d6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.get_parameter 00000096  00001878  00001878  0000190c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.get_decimal 000000b4  0000172c  0000172c  000017c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.str2flaot 0000004e  00001f4c  00001f4c  00001fe0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.is_float 00000058  00001db0  00001db0  00001e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.avrlibc.fplib 0000000e  000028e6  000028e6  0000297a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.avrlibc.fplib 000000ce  000015a2  000015a2  00001636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.avrlibc.fplib 00000008  00002978  00002978  00002a0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.avrlibc.fplib 000000de  000013f0  000013f0  00001484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.avrlibc.fplib 0000007a  00001998  00001998  00001a2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.avrlibc.fplib 0000000c  0000293a  0000293a  000029ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.avrlibc.fplib 00000006  0000299c  0000299c  00002a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.avrlibc.fplib 0000000e  000028f4  000028f4  00002988  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.avrlibc.fplib 0000000e  00002902  00002902  00002996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.avrlibc.fplib 00000022  000026a2  000026a2  00002736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.avrlibc.fplib 00000044  00002158  00002158  000021ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.avrlibc.fplib 0000000e  00002910  00002910  000029a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.avrlibc.fplib 00000008  00002980  00002980  00002a14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.avrlibc.fplib 000000d4  000014ce  000014ce  00001562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .progmemx.data 00000008  0000036b  0000036b  000003ff  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
111 .text.avrlibc 00000744  00000374  00000374  00000408  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.libgcc  0000000c  00002946  00002946  000029da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.libgcc.mul 0000001e  0000275e  0000275e  000027f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.libgcc.prologue 00000038  0000238c  0000238c  00002420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.libgcc.prologue 00000036  000023fa  000023fa  0000248e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.avrlibc 00000008  00002988  00002988  00002a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.avrlibc 0000000e  0000291e  0000291e  000029b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.avrlibc 000002dc  00000ab8  00000ab8  00000b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.avrlibc 000001b0  00000f50  00000f50  00000fe4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.avrlibc 00000012  0000286e  0000286e  00002902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.avrlibc 00000032  0000249a  0000249a  0000252e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.avrlibc 00000042  00002224  00002224  000022b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.avrlibc 0000006a  00001d46  00001d46  00001dda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.avrlibc 0000002c  000025b8  000025b8  0000264c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.avrlibc 0000001e  0000277c  0000277c  00002810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.avrlibc 00000036  00002430  00002430  000024c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.avrlibc 00000078  00001b7a  00001b7a  00001c0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.avrlibc 00000046  00002112  00002112  000021a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .text.avrlibc 000000bc  00001670  00001670  00001704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text.avrlibc 00000006  000029a2  000029a2  00002a36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text.avrlibc 00000024  0000265a  0000265a  000026ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text.avrlibc 00000012  00002880  00002880  00002914  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text.avrlibc 0000000e  0000292c  0000292c  000029c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text.avrlibc 00000044  0000219c  0000219c  00002230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text.avrlibc 00000024  0000267e  0000267e  00002712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.avrlibc 00000018  000027ea  000027ea  0000287e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text.libgcc.mul 00000020  000026e4  000026e4  00002778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text.libgcc.div 00000044  000021e0  000021e0  00002274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text.libgcc.mul 00000016  00002844  00002844  000028d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text.libgcc  0000000a  00002966  00002966  000029fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__ctors_end>
   4:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
   8:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
   c:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__vector_3>
  10:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  14:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  18:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  1c:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  20:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  24:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__vector_9>
  28:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  2c:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  30:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  34:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__vector_13>
  38:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  3c:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  40:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__vector_16>
  44:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  48:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  4c:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  50:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__vector_20>
  54:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  58:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__vector_22>
  5c:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  60:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  64:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  68:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  6c:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  70:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__vector_28>
  74:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__bad_interrupt>
  78:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__vector_30>
  7c:	2c 09       	sbc	r18, r12
  7e:	33 09       	sbc	r19, r3
  80:	7d 09       	sbc	r23, r13
  82:	3c 09       	sbc	r19, r12
  84:	86 09       	sbc	r24, r6
  86:	6f 09       	sbc	r22, r15
  88:	76 09       	sbc	r23, r6
  8a:	4c 09       	sbc	r20, r12
  8c:	57 09       	sbc	r21, r7
  8e:	62 09       	sbc	r22, r2
  90:	68 09       	sbc	r22, r8

00000092 <.dinit>:
  92:	01 00       	.word	0x0001	; ????
  94:	07 13       	cpse	r16, r23
  96:	80 00       	.word	0x0080	; ????

00000098 <__trampolines_end>:
  98:	00 40       	sbci	r16, 0x00	; 0
  9a:	7a 10       	cpse	r7, r10
  9c:	f3 5a       	subi	r31, 0xA3	; 163
  9e:	00 a0       	ldd	r0, Z+32	; 0x20
  a0:	72 4e       	sbci	r23, 0xE2	; 226
  a2:	18 09       	sbc	r17, r8
  a4:	00 10       	cpse	r0, r0
  a6:	a5 d4       	rcall	.+2378   	; 0x9f2 <__EEPROM_REGION_LENGTH__+0x1f2>
  a8:	e8 00       	.word	0x00e8	; ????
  aa:	00 e8       	ldi	r16, 0x80	; 128
  ac:	76 48       	sbci	r23, 0x86	; 134
  ae:	17 00       	.word	0x0017	; ????
  b0:	00 e4       	ldi	r16, 0x40	; 64
  b2:	0b 54       	subi	r16, 0x4B	; 75
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 ca       	rjmp	.-3072   	; 0xfffff4b8 <__eeprom_end+0xff7ef4b8>
  b8:	9a 3b       	cpi	r25, 0xBA	; 186
  ba:	00 00       	nop
  bc:	00 e1       	ldi	r16, 0x10	; 16
  be:	f5 05       	cpc	r31, r5
  c0:	00 00       	nop
  c2:	80 96       	adiw	r24, 0x20	; 32
  c4:	98 00       	.word	0x0098	; ????
  c6:	00 00       	nop
  c8:	40 42       	sbci	r20, 0x20	; 32
  ca:	0f 00       	.word	0x000f	; ????
  cc:	00 00       	nop
  ce:	a0 86       	std	Z+8, r10	; 0x08
  d0:	01 00       	.word	0x0001	; ????
  d2:	00 00       	nop
  d4:	10 27       	eor	r17, r16
  d6:	00 00       	nop
  d8:	00 00       	nop
  da:	e8 03       	fmulsu	r22, r16
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	64 00       	.word	0x0064	; ????
  e2:	00 00       	nop
  e4:	00 00       	nop
  e6:	0a 00       	.word	0x000a	; ????
  e8:	00 00       	nop
  ea:	00 00       	nop
  ec:	01 00       	.word	0x0001	; ????
  ee:	00 00       	nop
  f0:	00 00       	nop
  f2:	2c 76       	andi	r18, 0x6C	; 108
  f4:	d8 88       	ldd	r13, Y+16	; 0x10
  f6:	dc 67       	ori	r29, 0x7C	; 124
  f8:	4f 08       	sbc	r4, r15
  fa:	23 df       	rcall	.-442    	; 0xffffff42 <__eeprom_end+0xff7eff42>
  fc:	c1 df       	rcall	.-126    	; 0x80 <__SREG__+0x41>
  fe:	ae 59       	subi	r26, 0x9E	; 158
 100:	e1 b1       	in	r30, 0x01	; 1
 102:	b7 96       	adiw	r30, 0x27	; 39
 104:	e5 e3       	ldi	r30, 0x35	; 53
 106:	e4 53       	subi	r30, 0x34	; 52
 108:	c6 3a       	cpi	r28, 0xA6	; 166
 10a:	e6 51       	subi	r30, 0x16	; 22
 10c:	99 76       	andi	r25, 0x69	; 105
 10e:	96 e8       	ldi	r25, 0x86	; 134
 110:	e6 c2       	rjmp	.+1484   	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 112:	84 26       	eor	r8, r20
 114:	eb 89       	ldd	r30, Y+19	; 0x13
 116:	8c 9b       	sbis	0x11, 4	; 17
 118:	62 ed       	ldi	r22, 0xD2	; 210
 11a:	40 7c       	andi	r20, 0xC0	; 192
 11c:	6f fc       	.word	0xfc6f	; ????
 11e:	ef bc       	out	0x2f, r14	; 47
 120:	9c 9f       	mul	r25, r28
 122:	40 f2       	brcs	.-112    	; 0xb4 <__trampolines_end+0x1c>
 124:	ba a5       	ldd	r27, Y+42	; 0x2a
 126:	6f a5       	ldd	r22, Y+47	; 0x2f
 128:	f4 90       	lpm	r15, Z
 12a:	05 5a       	subi	r16, 0xA5	; 165
 12c:	2a f7       	brpl	.-54     	; 0xf8 <__trampolines_end+0x60>
 12e:	5c 93       	st	X, r21
 130:	6b 6c       	ori	r22, 0xCB	; 203
 132:	f9 67       	ori	r31, 0x79	; 121
 134:	6d c1       	rjmp	.+730    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 136:	1b fc       	.word	0xfc1b	; ????
 138:	e0 e4       	ldi	r30, 0x40	; 64
 13a:	0d 47       	sbci	r16, 0x7D	; 125
 13c:	fe f5       	brtc	.+126    	; 0x1bc <__do_copy_data+0x1e>
 13e:	20 e6       	ldi	r18, 0x60	; 96
 140:	b5 00       	.word	0x00b5	; ????
 142:	d0 ed       	ldi	r29, 0xD0	; 208
 144:	90 2e       	mov	r9, r16
 146:	03 00       	.word	0x0003	; ????
 148:	94 35       	cpi	r25, 0x54	; 84
 14a:	77 05       	cpc	r23, r7
 14c:	00 80       	ld	r0, Z
 14e:	84 1e       	adc	r8, r20
 150:	08 00       	.word	0x0008	; ????
 152:	00 20       	and	r0, r0
 154:	4e 0a       	sbc	r4, r30
 156:	00 00       	nop
 158:	00 c8       	rjmp	.-4096   	; 0xfffff15a <__eeprom_end+0xff7ef15a>
 15a:	0c 33       	cpi	r16, 0x3C	; 60
 15c:	33 33       	cpi	r19, 0x33	; 51
 15e:	33 0f       	add	r19, r19
 160:	98 6e       	ori	r25, 0xE8	; 232
 162:	12 83       	std	Z+2, r17	; 0x02
 164:	11 41       	sbci	r17, 0x11	; 17
 166:	ef 8d       	ldd	r30, Y+31	; 0x1f
 168:	21 14       	cp	r2, r1
 16a:	89 3b       	cpi	r24, 0xB9	; 185
 16c:	e6 55       	subi	r30, 0x56	; 86
 16e:	16 cf       	rjmp	.-468    	; 0xffffff9c <__eeprom_end+0xff7eff9c>
 170:	fe e6       	ldi	r31, 0x6E	; 110
 172:	db 18       	sub	r13, r11
 174:	d1 84       	ldd	r13, Z+9	; 0x09
 176:	4b 38       	cpi	r20, 0x8B	; 139
 178:	1b f7       	brvc	.-58     	; 0x140 <__trampolines_end+0xa8>
 17a:	7c 1d       	adc	r23, r12
 17c:	90 1d       	adc	r25, r0
 17e:	a4 bb       	out	0x14, r26	; 20
 180:	e4 24       	eor	r14, r4
 182:	20 32       	cpi	r18, 0x20	; 32
 184:	84 72       	andi	r24, 0x24	; 36
 186:	5e 22       	and	r5, r30
 188:	81 00       	.word	0x0081	; ????
 18a:	c9 f1       	breq	.+114    	; 0x1fe <_etext+0x18>
 18c:	24 ec       	ldi	r18, 0xC4	; 196
 18e:	a1 e5       	ldi	r26, 0x51	; 81
 190:	3d 27       	eor	r19, r29

00000192 <__ctors_end>:
 192:	11 24       	eor	r1, r1
 194:	1f be       	out	0x3f, r1	; 63
 196:	cf ef       	ldi	r28, 0xFF	; 255
 198:	d0 e1       	ldi	r29, 0x10	; 16
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	cd bf       	out	0x3d, r28	; 61

0000019e <__do_copy_data>:
 19e:	e2 e9       	ldi	r30, 0x92	; 146
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	17 c0       	rjmp	.+46     	; 0x1d4 <__do_clear_bss+0x8>
 1a6:	b5 91       	lpm	r27, Z+
 1a8:	a5 91       	lpm	r26, Z+
 1aa:	35 91       	lpm	r19, Z+
 1ac:	25 91       	lpm	r18, Z+
 1ae:	05 91       	lpm	r16, Z+
 1b0:	07 fd       	sbrc	r16, 7
 1b2:	0c c0       	rjmp	.+24     	; 0x1cc <__do_clear_bss>
 1b4:	95 91       	lpm	r25, Z+
 1b6:	85 91       	lpm	r24, Z+
 1b8:	ef 01       	movw	r28, r30
 1ba:	f9 2f       	mov	r31, r25
 1bc:	e8 2f       	mov	r30, r24
 1be:	05 90       	lpm	r0, Z+
 1c0:	0d 92       	st	X+, r0
 1c2:	a2 17       	cp	r26, r18
 1c4:	b3 07       	cpc	r27, r19
 1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0x20>
 1c8:	fe 01       	movw	r30, r28
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <__do_clear_bss+0x8>

000001cc <__do_clear_bss>:
 1cc:	1d 92       	st	X+, r1
 1ce:	a2 17       	cp	r26, r18
 1d0:	b3 07       	cpc	r27, r19
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <__do_clear_bss>
 1d4:	e7 39       	cpi	r30, 0x97	; 151
 1d6:	f4 07       	cpc	r31, r20
 1d8:	31 f7       	brne	.-52     	; 0x1a6 <__do_copy_data+0x8>
 1da:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <main>
 1de:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>

Disassembly of section .text:

000029a8 <__bad_interrupt>:
    29a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_3:

0000285a <__vector_3>:
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
}

ISR(INT2_vect){
    285a:	1f 92       	push	r1
    285c:	0f 92       	push	r0
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	0f 92       	push	r0
    2862:	11 24       	eor	r1, r1
	
}
    2864:	0f 90       	pop	r0
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	0f 90       	pop	r0
    286a:	1f 90       	pop	r1
    286c:	18 95       	reti

Disassembly of section .text.rn2483_init:

00002970 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    2970:	84 b1       	in	r24, 0x04	; 4
    2972:	80 61       	ori	r24, 0x10	; 16
    2974:	84 b9       	out	0x04, r24	; 4
    2976:	08 95       	ret

Disassembly of section .text.__vector_16:

00001eb0 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	2f 93       	push	r18
    1ebc:	3f 93       	push	r19
    1ebe:	4f 93       	push	r20
    1ec0:	5f 93       	push	r21
    1ec2:	6f 93       	push	r22
    1ec4:	7f 93       	push	r23
    1ec6:	8f 93       	push	r24
    1ec8:	9f 93       	push	r25
    1eca:	af 93       	push	r26
    1ecc:	bf 93       	push	r27
    1ece:	ef 93       	push	r30
    1ed0:	ff 93       	push	r31
	_cb();
    1ed2:	e0 91 06 07 	lds	r30, 0x0706	; 0x800706 <_cb>
    1ed6:	f0 91 07 07 	lds	r31, 0x0707	; 0x800707 <_cb+0x1>
    1eda:	09 95       	icall
}
    1edc:	ff 91       	pop	r31
    1ede:	ef 91       	pop	r30
    1ee0:	bf 91       	pop	r27
    1ee2:	af 91       	pop	r26
    1ee4:	9f 91       	pop	r25
    1ee6:	8f 91       	pop	r24
    1ee8:	7f 91       	pop	r23
    1eea:	6f 91       	pop	r22
    1eec:	5f 91       	pop	r21
    1eee:	4f 91       	pop	r20
    1ef0:	3f 91       	pop	r19
    1ef2:	2f 91       	pop	r18
    1ef4:	0f 90       	pop	r0
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	0f 90       	pop	r0
    1efa:	1f 90       	pop	r1
    1efc:	18 95       	reti

Disassembly of section .text.__vector_13:

00001efe <__vector_13>:

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
}

ISR(TIMER1_COMPA_vect){
    1efe:	1f 92       	push	r1
    1f00:	0f 92       	push	r0
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	0f 92       	push	r0
    1f06:	11 24       	eor	r1, r1
    1f08:	2f 93       	push	r18
    1f0a:	3f 93       	push	r19
    1f0c:	4f 93       	push	r20
    1f0e:	5f 93       	push	r21
    1f10:	6f 93       	push	r22
    1f12:	7f 93       	push	r23
    1f14:	8f 93       	push	r24
    1f16:	9f 93       	push	r25
    1f18:	af 93       	push	r26
    1f1a:	bf 93       	push	r27
    1f1c:	ef 93       	push	r30
    1f1e:	ff 93       	push	r31
	_cb();
    1f20:	e0 91 08 07 	lds	r30, 0x0708	; 0x800708 <_cb>
    1f24:	f0 91 09 07 	lds	r31, 0x0709	; 0x800709 <_cb+0x1>
    1f28:	09 95       	icall
    1f2a:	ff 91       	pop	r31
    1f2c:	ef 91       	pop	r30
    1f2e:	bf 91       	pop	r27
    1f30:	af 91       	pop	r26
    1f32:	9f 91       	pop	r25
    1f34:	8f 91       	pop	r24
    1f36:	7f 91       	pop	r23
    1f38:	6f 91       	pop	r22
    1f3a:	5f 91       	pop	r21
    1f3c:	4f 91       	pop	r20
    1f3e:	3f 91       	pop	r19
    1f40:	2f 91       	pop	r18
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

Disassembly of section .text.__vector_9:

000017e0 <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
    17e0:	1f 92       	push	r1
    17e2:	0f 92       	push	r0
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	0f 92       	push	r0
    17e8:	11 24       	eor	r1, r1
    17ea:	2f 93       	push	r18
    17ec:	3f 93       	push	r19
    17ee:	4f 93       	push	r20
    17f0:	5f 93       	push	r21
    17f2:	6f 93       	push	r22
    17f4:	7f 93       	push	r23
    17f6:	8f 93       	push	r24
    17f8:	9f 93       	push	r25
    17fa:	af 93       	push	r26
    17fc:	bf 93       	push	r27
    17fe:	cf 93       	push	r28
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31
	cnt++;
    1804:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <cnt>
    1808:	9f 5f       	subi	r25, 0xFF	; 255
    180a:	90 93 0a 07 	sts	0x070A, r25	; 0x80070a <cnt>
	
	if(cnt % 31==0){
    180e:	89 e0       	ldi	r24, 0x09	; 9
    1810:	98 9f       	mul	r25, r24
    1812:	21 2d       	mov	r18, r1
    1814:	11 24       	eor	r1, r1
    1816:	89 2f       	mov	r24, r25
    1818:	82 1b       	sub	r24, r18
    181a:	86 95       	lsr	r24
    181c:	82 0f       	add	r24, r18
    181e:	82 95       	swap	r24
    1820:	8f 70       	andi	r24, 0x0F	; 15
    1822:	2f e1       	ldi	r18, 0x1F	; 31
    1824:	82 9f       	mul	r24, r18
    1826:	90 19       	sub	r25, r0
    1828:	11 24       	eor	r1, r1
    182a:	91 11       	cpse	r25, r1
    182c:	13 c0       	rjmp	.+38     	; 0x1854 <__vector_9+0x74>
		cnt=0;
    182e:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    1832:	c0 e0       	ldi	r28, 0x00	; 0
    1834:	0d c0       	rjmp	.+26     	; 0x1850 <__vector_9+0x70>
		{
			if(callbacks[i]!=NULL){
    1836:	ec 2f       	mov	r30, r28
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	ee 0f       	add	r30, r30
    183c:	ff 1f       	adc	r31, r31
    183e:	e4 50       	subi	r30, 0x04	; 4
    1840:	f9 4f       	sbci	r31, 0xF9	; 249
    1842:	01 90       	ld	r0, Z+
    1844:	f0 81       	ld	r31, Z
    1846:	e0 2d       	mov	r30, r0
    1848:	30 97       	sbiw	r30, 0x00	; 0
    184a:	09 f0       	breq	.+2      	; 0x184e <__vector_9+0x6e>
				callbacks[i]();
    184c:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt % 31==0){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    184e:	cf 5f       	subi	r28, 0xFF	; 255
    1850:	c5 30       	cpi	r28, 0x05	; 5
    1852:	88 f3       	brcs	.-30     	; 0x1836 <__vector_9+0x56>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    1854:	ff 91       	pop	r31
    1856:	ef 91       	pop	r30
    1858:	cf 91       	pop	r28
    185a:	bf 91       	pop	r27
    185c:	af 91       	pop	r26
    185e:	9f 91       	pop	r25
    1860:	8f 91       	pop	r24
    1862:	7f 91       	pop	r23
    1864:	6f 91       	pop	r22
    1866:	5f 91       	pop	r21
    1868:	4f 91       	pop	r20
    186a:	3f 91       	pop	r19
    186c:	2f 91       	pop	r18
    186e:	0f 90       	pop	r0
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	0f 90       	pop	r0
    1874:	1f 90       	pop	r1
    1876:	18 95       	reti

Disassembly of section .text.copy_buffer:

0000255c <copy_buffer>:
	}
	
	tx_buffer_data_len=strlen(msg);
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}
    255c:	bc 01       	movw	r22, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	09 c0       	rjmp	.+18     	; 0x2574 <copy_buffer+0x18>
    2562:	fb 01       	movw	r30, r22
    2564:	e9 0f       	add	r30, r25
    2566:	f1 1d       	adc	r31, r1
    2568:	da 01       	movw	r26, r20
    256a:	a0 50       	subi	r26, 0x00	; 0
    256c:	bf 4f       	sbci	r27, 0xFF	; 255
    256e:	2c 91       	ld	r18, X
    2570:	20 83       	st	Z, r18
    2572:	9f 5f       	subi	r25, 0xFF	; 255
    2574:	49 2f       	mov	r20, r25
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	20 91 0c 07 	lds	r18, 0x070C	; 0x80070c <rx_buffer_data_len>
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	22 50       	subi	r18, 0x02	; 2
    2580:	31 09       	sbc	r19, r1
    2582:	42 17       	cp	r20, r18
    2584:	53 07       	cpc	r21, r19
    2586:	6c f3       	brlt	.-38     	; 0x2562 <copy_buffer+0x6>
    2588:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

00002266 <uart0_hal_init>:
    2266:	e1 ec       	ldi	r30, 0xC1	; 193
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	80 61       	ori	r24, 0x10	; 16
    226e:	80 83       	st	Z, r24
    2270:	80 81       	ld	r24, Z
    2272:	88 60       	ori	r24, 0x08	; 8
    2274:	80 83       	st	Z, r24
    2276:	80 81       	ld	r24, Z
    2278:	80 68       	ori	r24, 0x80	; 128
    227a:	80 83       	st	Z, r24
    227c:	80 81       	ld	r24, Z
    227e:	80 64       	ori	r24, 0x40	; 64
    2280:	80 83       	st	Z, r24
    2282:	e0 ec       	ldi	r30, 0xC0	; 192
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	82 60       	ori	r24, 0x02	; 2
    228a:	80 83       	st	Z, r24
    228c:	86 e0       	ldi	r24, 0x06	; 6
    228e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    2292:	80 e1       	ldi	r24, 0x10	; 16
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    229a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    229e:	78 94       	sei
    22a0:	08 95       	ret

Disassembly of section .text.uart0_hal_send_message:

00002466 <uart0_hal_send_message>:
    2466:	dc 01       	movw	r26, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0b c0       	rjmp	.+22     	; 0x2482 <uart0_hal_send_message+0x1c>
    246c:	29 2f       	mov	r18, r25
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	fd 01       	movw	r30, r26
    2472:	e2 0f       	add	r30, r18
    2474:	f3 1f       	adc	r31, r19
    2476:	40 81       	ld	r20, Z
    2478:	f9 01       	movw	r30, r18
    247a:	ec 59       	subi	r30, 0x9C	; 156
    247c:	fe 4f       	sbci	r31, 0xFE	; 254
    247e:	40 83       	st	Z, r20
    2480:	9f 5f       	subi	r25, 0xFF	; 255
    2482:	96 17       	cp	r25, r22
    2484:	98 f3       	brcs	.-26     	; 0x246c <uart0_hal_send_message+0x6>
    2486:	60 93 0e 07 	sts	0x070E, r22	; 0x80070e <tx_buffer_data_len>
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <tx_buffer_cursor>
    2490:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2494:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2498:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00002892 <uart0_hal_message_ready>:

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    2892:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <rx_buffer_has_message>
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	91 11       	cpse	r25, r1
    289a:	01 c0       	rjmp	.+2      	; 0x289e <uart0_hal_message_ready+0xc>
    289c:	80 e0       	ldi	r24, 0x00	; 0
}
    289e:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

00002952 <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    2952:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <rx_buffer_has_message>
	rx_buffer_data_len=0;
    2956:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <rx_buffer_data_len>
    295a:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

000025e4 <uart0_hal_read_message_as_str>:
	}
	
	tx_buffer_data_len=strlen(msg);
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	cf 93       	push	r28
    25ea:	8c 01       	movw	r16, r24
    25ec:	0e 94 ae 12 	call	0x255c	; 0x255c <copy_buffer>
    25f0:	c0 91 0c 07 	lds	r28, 0x070C	; 0x80070c <rx_buffer_data_len>
    25f4:	c2 50       	subi	r28, 0x02	; 2
    25f6:	f8 01       	movw	r30, r16
    25f8:	ec 0f       	add	r30, r28
    25fa:	f1 1d       	adc	r31, r1
    25fc:	10 82       	st	Z, r1
    25fe:	0e 94 a9 14 	call	0x2952	; 0x2952 <uart0_hal_clear_rx_buffer>
    2602:	8c 2f       	mov	r24, r28
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	08 95       	ret

Disassembly of section .text.__vector_22:

0000207e <__vector_22>:
    207e:	1f 92       	push	r1
    2080:	0f 92       	push	r0
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	0f 92       	push	r0
    2086:	11 24       	eor	r1, r1
    2088:	8f 93       	push	r24
    208a:	ef 93       	push	r30
    208c:	ff 93       	push	r31
    208e:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <tx_buffer_cursor>
    2092:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <tx_buffer_data_len>
    2096:	e8 17       	cp	r30, r24
    2098:	58 f4       	brcc	.+22     	; 0x20b0 <__vector_22+0x32>
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	8e 0f       	add	r24, r30
    209e:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <tx_buffer_cursor>
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	ec 59       	subi	r30, 0x9C	; 156
    20a6:	fe 4f       	sbci	r31, 0xFE	; 254
    20a8:	80 81       	ld	r24, Z
    20aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    20ae:	04 c0       	rjmp	.+8      	; 0x20b8 <__vector_22+0x3a>
    20b0:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <tx_buffer_cursor>
    20b4:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <tx_buffer_data_len>
    20b8:	ff 91       	pop	r31
    20ba:	ef 91       	pop	r30
    20bc:	8f 91       	pop	r24
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	0f 90       	pop	r0
    20c4:	1f 90       	pop	r1
    20c6:	18 95       	reti

Disassembly of section .text.__vector_20:

00001bf2 <__vector_20>:
    1bf2:	1f 92       	push	r1
    1bf4:	0f 92       	push	r0
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	0f 92       	push	r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	2f 93       	push	r18
    1bfe:	8f 93       	push	r24
    1c00:	9f 93       	push	r25
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
    1c06:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <rx_buffer_has_message>
    1c0a:	81 11       	cpse	r24, r1
    1c0c:	0e c0       	rjmp	.+28     	; 0x1c2a <__vector_20+0x38>
    1c0e:	e0 91 0c 07 	lds	r30, 0x070C	; 0x80070c <rx_buffer_data_len>
    1c12:	e4 36       	cpi	r30, 0x64	; 100
    1c14:	50 f4       	brcc	.+20     	; 0x1c2a <__vector_20+0x38>
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	8e 0f       	add	r24, r30
    1c1a:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <rx_buffer_data_len>
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    1c24:	e0 50       	subi	r30, 0x00	; 0
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	80 83       	st	Z, r24
    1c2a:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <rx_buffer_data_len>
    1c2e:	83 30       	cpi	r24, 0x03	; 3
    1c30:	80 f0       	brcs	.+32     	; 0x1c52 <__vector_20+0x60>
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	fc 01       	movw	r30, r24
    1c36:	e1 50       	subi	r30, 0x01	; 1
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	20 81       	ld	r18, Z
    1c3c:	2a 30       	cpi	r18, 0x0A	; 10
    1c3e:	49 f4       	brne	.+18     	; 0x1c52 <__vector_20+0x60>
    1c40:	fc 01       	movw	r30, r24
    1c42:	e2 50       	subi	r30, 0x02	; 2
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	80 81       	ld	r24, Z
    1c48:	8d 30       	cpi	r24, 0x0D	; 13
    1c4a:	19 f4       	brne	.+6      	; 0x1c52 <__vector_20+0x60>
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <rx_buffer_has_message>
    1c52:	ff 91       	pop	r31
    1c54:	ef 91       	pop	r30
    1c56:	9f 91       	pop	r25
    1c58:	8f 91       	pop	r24
    1c5a:	2f 91       	pop	r18
    1c5c:	0f 90       	pop	r0
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	0f 90       	pop	r0
    1c62:	1f 90       	pop	r1
    1c64:	18 95       	reti

Disassembly of section .text.copy_buffer:

0000258a <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    258a:	bc 01       	movw	r22, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	09 c0       	rjmp	.+18     	; 0x25a2 <copy_buffer+0x18>
    2590:	fb 01       	movw	r30, r22
    2592:	e9 0f       	add	r30, r25
    2594:	f1 1d       	adc	r31, r1
    2596:	da 01       	movw	r26, r20
    2598:	aa 5e       	subi	r26, 0xEA	; 234
    259a:	b9 4f       	sbci	r27, 0xF9	; 249
    259c:	2c 91       	ld	r18, X
    259e:	20 83       	st	Z, r18
    25a0:	9f 5f       	subi	r25, 0xFF	; 255
    25a2:	49 2f       	mov	r20, r25
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <rx_buffer_data_len>
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	22 50       	subi	r18, 0x02	; 2
    25ae:	31 09       	sbc	r19, r1
    25b0:	42 17       	cp	r20, r18
    25b2:	53 07       	cpc	r21, r19
    25b4:	6c f3       	brlt	.-38     	; 0x2590 <copy_buffer+0x6>
    25b6:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

000022a2 <uart1_hal_init>:
    22a2:	e9 ec       	ldi	r30, 0xC9	; 201
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	80 61       	ori	r24, 0x10	; 16
    22aa:	80 83       	st	Z, r24
    22ac:	80 81       	ld	r24, Z
    22ae:	88 60       	ori	r24, 0x08	; 8
    22b0:	80 83       	st	Z, r24
    22b2:	80 81       	ld	r24, Z
    22b4:	80 68       	ori	r24, 0x80	; 128
    22b6:	80 83       	st	Z, r24
    22b8:	80 81       	ld	r24, Z
    22ba:	80 64       	ori	r24, 0x40	; 64
    22bc:	80 83       	st	Z, r24
    22be:	e8 ec       	ldi	r30, 0xC8	; 200
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	82 60       	ori	r24, 0x02	; 2
    22c6:	80 83       	st	Z, r24
    22c8:	86 e0       	ldi	r24, 0x06	; 6
    22ca:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    22ce:	80 e1       	ldi	r24, 0x10	; 16
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    22d6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    22da:	78 94       	sei
    22dc:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

0000190e <uart1_hal_send_string>:
    190e:	6f 92       	push	r6
    1910:	7f 92       	push	r7
    1912:	8f 92       	push	r8
    1914:	cf 92       	push	r12
    1916:	df 92       	push	r13
    1918:	ef 92       	push	r14
    191a:	3b 01       	movw	r6, r22
    191c:	88 2e       	mov	r8, r24
    191e:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <tx_buffer_data_len>
    1922:	81 11       	cpse	r24, r1
    1924:	fc cf       	rjmp	.-8      	; 0x191e <uart1_hal_send_string+0x10>
    1926:	88 2d       	mov	r24, r8
    1928:	b3 01       	movw	r22, r6
    192a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    192e:	bc 01       	movw	r22, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	12 c0       	rjmp	.+36     	; 0x1958 <uart1_hal_send_string+0x4a>
    1934:	29 2f       	mov	r18, r25
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	e8 2c       	mov	r14, r8
    193a:	63 01       	movw	r12, r6
    193c:	c4 0e       	add	r12, r20
    193e:	d5 1e       	adc	r13, r21
    1940:	e1 1c       	adc	r14, r1
    1942:	57 fd       	sbrc	r21, 7
    1944:	ea 94       	dec	r14
    1946:	f6 01       	movw	r30, r12
    1948:	44 91       	lpm	r20, Z
    194a:	e7 fc       	sbrc	r14, 7
    194c:	40 81       	ld	r20, Z
    194e:	f9 01       	movw	r30, r18
    1950:	e6 51       	subi	r30, 0x16	; 22
    1952:	fb 4f       	sbci	r31, 0xFB	; 251
    1954:	40 83       	st	Z, r20
    1956:	9f 5f       	subi	r25, 0xFF	; 255
    1958:	49 2f       	mov	r20, r25
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	46 17       	cp	r20, r22
    195e:	57 07       	cpc	r21, r23
    1960:	48 f3       	brcs	.-46     	; 0x1934 <uart1_hal_send_string+0x26>
    1962:	fb 01       	movw	r30, r22
    1964:	e6 51       	subi	r30, 0x16	; 22
    1966:	fb 4f       	sbci	r31, 0xFB	; 251
    1968:	8d e0       	ldi	r24, 0x0D	; 13
    196a:	80 83       	st	Z, r24
    196c:	fb 01       	movw	r30, r22
    196e:	e5 51       	subi	r30, 0x15	; 21
    1970:	fb 4f       	sbci	r31, 0xFB	; 251
    1972:	8a e0       	ldi	r24, 0x0A	; 10
    1974:	80 83       	st	Z, r24
    1976:	6e 5f       	subi	r22, 0xFE	; 254
    1978:	60 93 12 07 	sts	0x0712, r22	; 0x800712 <tx_buffer_data_len>
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <tx_buffer_cursor>
    1982:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <_end>
    1986:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	8f 90       	pop	r8
    1992:	7f 90       	pop	r7
    1994:	6f 90       	pop	r6
    1996:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

000028a0 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    28a0:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <rx_buffer_has_message>
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	91 11       	cpse	r25, r1
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <uart1_hal_message_ready+0xc>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
}
    28ac:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

000028ae <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    28ae:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <rx_buffer_data_len>
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	95 39       	cpi	r25, 0x95	; 149
    28b6:	08 f4       	brcc	.+2      	; 0x28ba <uart1_hal_rx_full+0xc>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
}
    28ba:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

0000295c <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    295c:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <rx_buffer_has_message>
	rx_buffer_data_len=0;
    2960:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <rx_buffer_data_len>
    2964:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

0000260c <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	8c 01       	movw	r16, r24
    2614:	0e 94 c5 12 	call	0x258a	; 0x258a <copy_buffer>
    2618:	c0 91 10 07 	lds	r28, 0x0710	; 0x800710 <rx_buffer_data_len>
    261c:	c2 50       	subi	r28, 0x02	; 2
    261e:	f8 01       	movw	r30, r16
    2620:	ec 0f       	add	r30, r28
    2622:	f1 1d       	adc	r31, r1
    2624:	10 82       	st	Z, r1
    2626:	0e 94 ae 14 	call	0x295c	; 0x295c <uart1_hal_clear_rx_buffer>
    262a:	8c 2f       	mov	r24, r28
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	08 95       	ret

Disassembly of section .text.__vector_30:

000020c8 <__vector_30>:
    20c8:	1f 92       	push	r1
    20ca:	0f 92       	push	r0
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	0f 92       	push	r0
    20d0:	11 24       	eor	r1, r1
    20d2:	8f 93       	push	r24
    20d4:	ef 93       	push	r30
    20d6:	ff 93       	push	r31
    20d8:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <tx_buffer_cursor>
    20dc:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <tx_buffer_data_len>
    20e0:	e8 17       	cp	r30, r24
    20e2:	58 f4       	brcc	.+22     	; 0x20fa <__vector_30+0x32>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	8e 0f       	add	r24, r30
    20e8:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <tx_buffer_cursor>
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	e6 51       	subi	r30, 0x16	; 22
    20f0:	fb 4f       	sbci	r31, 0xFB	; 251
    20f2:	80 81       	ld	r24, Z
    20f4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <__vector_30+0x3a>
    20fa:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <tx_buffer_cursor>
    20fe:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <tx_buffer_data_len>
    2102:	ff 91       	pop	r31
    2104:	ef 91       	pop	r30
    2106:	8f 91       	pop	r24
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	0f 90       	pop	r0
    210e:	1f 90       	pop	r1
    2110:	18 95       	reti

Disassembly of section .text.__vector_28:

00001c66 <__vector_28>:
    1c66:	1f 92       	push	r1
    1c68:	0f 92       	push	r0
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	0f 92       	push	r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	2f 93       	push	r18
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	ef 93       	push	r30
    1c78:	ff 93       	push	r31
    1c7a:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <rx_buffer_has_message>
    1c7e:	81 11       	cpse	r24, r1
    1c80:	0e c0       	rjmp	.+28     	; 0x1c9e <__vector_28+0x38>
    1c82:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <rx_buffer_data_len>
    1c86:	e6 39       	cpi	r30, 0x96	; 150
    1c88:	50 f4       	brcc	.+20     	; 0x1c9e <__vector_28+0x38>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	8e 0f       	add	r24, r30
    1c8e:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <rx_buffer_data_len>
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    1c98:	ea 5e       	subi	r30, 0xEA	; 234
    1c9a:	f9 4f       	sbci	r31, 0xF9	; 249
    1c9c:	80 83       	st	Z, r24
    1c9e:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <rx_buffer_data_len>
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	eb 5e       	subi	r30, 0xEB	; 235
    1ca8:	f9 4f       	sbci	r31, 0xF9	; 249
    1caa:	20 81       	ld	r18, Z
    1cac:	2a 30       	cpi	r18, 0x0A	; 10
    1cae:	49 f4       	brne	.+18     	; 0x1cc2 <__vector_28+0x5c>
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	ec 5e       	subi	r30, 0xEC	; 236
    1cb4:	f9 4f       	sbci	r31, 0xF9	; 249
    1cb6:	80 81       	ld	r24, Z
    1cb8:	8d 30       	cpi	r24, 0x0D	; 13
    1cba:	19 f4       	brne	.+6      	; 0x1cc2 <__vector_28+0x5c>
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <rx_buffer_has_message>
    1cc2:	ff 91       	pop	r31
    1cc4:	ef 91       	pop	r30
    1cc6:	9f 91       	pop	r25
    1cc8:	8f 91       	pop	r24
    1cca:	2f 91       	pop	r18
    1ccc:	0f 90       	pop	r0
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	0f 90       	pop	r0
    1cd2:	1f 90       	pop	r1
    1cd4:	18 95       	reti

Disassembly of section .text.main:

000027d2 <main>:
	//test_runner();
	
	while(1)
    {
		//MAINPG_start();
		CONF_enter();
    27d2:	0e 94 17 09 	call	0x122e	; 0x122e <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    27d6:	2f ef       	ldi	r18, 0xFF	; 255
    27d8:	8d e3       	ldi	r24, 0x3D	; 61
    27da:	99 e4       	ldi	r25, 0x49	; 73
    27dc:	21 50       	subi	r18, 0x01	; 1
    27de:	80 40       	sbci	r24, 0x00	; 0
    27e0:	90 40       	sbci	r25, 0x00	; 0
    27e2:	e1 f7       	brne	.-8      	; 0x27dc <main+0xa>
    27e4:	00 c0       	rjmp	.+0      	; 0x27e6 <main+0x14>
    27e6:	00 00       	nop
    27e8:	f4 cf       	rjmp	.-24     	; 0x27d2 <main>

Disassembly of section .text.EM_has_deveui:

00002802 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    2802:	60 e4       	ldi	r22, 0x40	; 64
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	80 e8       	ldi	r24, 0x80	; 128
    2808:	0e 94 40 14 	call	0x2880	; 0x2880 <eeprom_read_byte>
    280c:	91 e0       	ldi	r25, 0x01	; 1
    280e:	81 11       	cpse	r24, r1
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <EM_has_deveui+0x12>
    2812:	90 e0       	ldi	r25, 0x00	; 0
}
    2814:	89 2f       	mov	r24, r25
    2816:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00002818 <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    2818:	61 e4       	ldi	r22, 0x41	; 65
    281a:	70 e0       	ldi	r23, 0x00	; 0
    281c:	80 e8       	ldi	r24, 0x80	; 128
    281e:	0e 94 40 14 	call	0x2880	; 0x2880 <eeprom_read_byte>
    2822:	91 e0       	ldi	r25, 0x01	; 1
    2824:	81 11       	cpse	r24, r1
    2826:	01 c0       	rjmp	.+2      	; 0x282a <EM_has_appeui+0x12>
    2828:	90 e0       	ldi	r25, 0x00	; 0
}
    282a:	89 2f       	mov	r24, r25
    282c:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

0000282e <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    282e:	62 e4       	ldi	r22, 0x42	; 66
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	80 e8       	ldi	r24, 0x80	; 128
    2834:	0e 94 40 14 	call	0x2880	; 0x2880 <eeprom_read_byte>
    2838:	91 e0       	ldi	r25, 0x01	; 1
    283a:	81 11       	cpse	r24, r1
    283c:	01 c0       	rjmp	.+2      	; 0x2840 <EM_has_appkey+0x12>
    283e:	90 e0       	ldi	r25, 0x00	; 0
}
    2840:	89 2f       	mov	r24, r25
    2842:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

000022de <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	6b 01       	movw	r12, r22
    22e6:	e8 2e       	mov	r14, r24
    22e8:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    22ec:	40 97       	sbiw	r24, 0x10	; 16
    22ee:	79 f4       	brne	.+30     	; 0x230e <EM_set_deveui+0x30>
    22f0:	20 e1       	ldi	r18, 0x10	; 16
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	8e 2d       	mov	r24, r14
    22fa:	b6 01       	movw	r22, r12
    22fc:	0e 94 ce 10 	call	0x219c	; 0x219c <eeprom_update_block>
    2300:	61 e0       	ldi	r22, 0x01	; 1
    2302:	80 e4       	ldi	r24, 0x40	; 64
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0e 94 3f 13 	call	0x267e	; 0x267e <eeprom_update_byte>
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	01 c0       	rjmp	.+2      	; 0x2310 <EM_set_deveui+0x32>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	ef 90       	pop	r14
    2312:	df 90       	pop	r13
    2314:	cf 90       	pop	r12
    2316:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

000024cc <EM_get_deveui>:
    24cc:	0f 93       	push	r16
    24ce:	1f 93       	push	r17
    24d0:	cf 93       	push	r28
    24d2:	8c 01       	movw	r16, r24
    24d4:	0e 94 01 14 	call	0x2802	; 0x2802 <EM_has_deveui>
    24d8:	c8 2f       	mov	r28, r24
    24da:	88 23       	and	r24, r24
    24dc:	51 f0       	breq	.+20     	; 0x24f2 <EM_get_deveui+0x26>
    24de:	20 e1       	ldi	r18, 0x10	; 16
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	50 e0       	ldi	r21, 0x00	; 0
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	c8 01       	movw	r24, r16
    24ea:	0e 94 2d 13 	call	0x265a	; 0x265a <eeprom_read_block>
    24ee:	f8 01       	movw	r30, r16
    24f0:	10 8a       	std	Z+16, r1	; 0x10
    24f2:	8c 2f       	mov	r24, r28
    24f4:	cf 91       	pop	r28
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

00002318 <EM_set_appeui>:
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	6b 01       	movw	r12, r22
    2320:	e8 2e       	mov	r14, r24
    2322:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    2326:	40 97       	sbiw	r24, 0x10	; 16
    2328:	79 f4       	brne	.+30     	; 0x2348 <EM_set_appeui+0x30>
    232a:	20 e1       	ldi	r18, 0x10	; 16
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e1       	ldi	r20, 0x10	; 16
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	8e 2d       	mov	r24, r14
    2334:	b6 01       	movw	r22, r12
    2336:	0e 94 ce 10 	call	0x219c	; 0x219c <eeprom_update_block>
    233a:	61 e0       	ldi	r22, 0x01	; 1
    233c:	81 e4       	ldi	r24, 0x41	; 65
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 3f 13 	call	0x267e	; 0x267e <eeprom_update_byte>
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	01 c0       	rjmp	.+2      	; 0x234a <EM_set_appeui+0x32>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	ef 90       	pop	r14
    234c:	df 90       	pop	r13
    234e:	cf 90       	pop	r12
    2350:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

000024fc <EM_get_appeui>:
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	8c 01       	movw	r16, r24
    2504:	0e 94 0c 14 	call	0x2818	; 0x2818 <EM_has_appeui>
    2508:	c8 2f       	mov	r28, r24
    250a:	88 23       	and	r24, r24
    250c:	51 f0       	breq	.+20     	; 0x2522 <EM_get_appeui+0x26>
    250e:	20 e1       	ldi	r18, 0x10	; 16
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e1       	ldi	r20, 0x10	; 16
    2514:	50 e0       	ldi	r21, 0x00	; 0
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	c8 01       	movw	r24, r16
    251a:	0e 94 2d 13 	call	0x265a	; 0x265a <eeprom_read_block>
    251e:	f8 01       	movw	r30, r16
    2520:	10 8a       	std	Z+16, r1	; 0x10
    2522:	8c 2f       	mov	r24, r28
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00002352 <EM_set_appkey>:
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	6b 01       	movw	r12, r22
    235a:	e8 2e       	mov	r14, r24
    235c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    2360:	80 97       	sbiw	r24, 0x20	; 32
    2362:	79 f4       	brne	.+30     	; 0x2382 <EM_set_appkey+0x30>
    2364:	20 e2       	ldi	r18, 0x20	; 32
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e2       	ldi	r20, 0x20	; 32
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	8e 2d       	mov	r24, r14
    236e:	b6 01       	movw	r22, r12
    2370:	0e 94 ce 10 	call	0x219c	; 0x219c <eeprom_update_block>
    2374:	61 e0       	ldi	r22, 0x01	; 1
    2376:	82 e4       	ldi	r24, 0x42	; 66
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 3f 13 	call	0x267e	; 0x267e <eeprom_update_byte>
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <EM_set_appkey+0x32>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	ef 90       	pop	r14
    2386:	df 90       	pop	r13
    2388:	cf 90       	pop	r12
    238a:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

0000252c <EM_get_appkey>:
    252c:	0f 93       	push	r16
    252e:	1f 93       	push	r17
    2530:	cf 93       	push	r28
    2532:	8c 01       	movw	r16, r24
    2534:	0e 94 17 14 	call	0x282e	; 0x282e <EM_has_appkey>
    2538:	c8 2f       	mov	r28, r24
    253a:	88 23       	and	r24, r24
    253c:	51 f0       	breq	.+20     	; 0x2552 <EM_get_appkey+0x26>
    253e:	20 e2       	ldi	r18, 0x20	; 32
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e2       	ldi	r20, 0x20	; 32
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	60 e0       	ldi	r22, 0x00	; 0
    2548:	c8 01       	movw	r24, r16
    254a:	0e 94 2d 13 	call	0x265a	; 0x265a <eeprom_read_block>
    254e:	f8 01       	movw	r30, r16
    2550:	10 a2       	std	Z+32, r1	; 0x20
    2552:	8c 2f       	mov	r24, r28
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

000028bc <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    28bc:	ab 01       	movw	r20, r22
    28be:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    28c0:	83 e4       	ldi	r24, 0x43	; 67
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <eeprom_update_dword>
    28c8:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00002704 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	ec 01       	movw	r28, r24
    270a:	63 e4       	ldi	r22, 0x43	; 67
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	0e 94 96 14 	call	0x292c	; 0x292c <eeprom_read_dword>
    2714:	68 83       	st	Y, r22
    2716:	79 83       	std	Y+1, r23	; 0x01
    2718:	8a 83       	std	Y+2, r24	; 0x02
    271a:	9b 83       	std	Y+3, r25	; 0x03
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

000028ca <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    28ca:	ab 01       	movw	r20, r22
    28cc:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    28ce:	87 e4       	ldi	r24, 0x47	; 71
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <eeprom_update_dword>
    28d6:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00002722 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    2722:	cf 93       	push	r28
    2724:	df 93       	push	r29
    2726:	ec 01       	movw	r28, r24
    2728:	67 e4       	ldi	r22, 0x47	; 71
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	0e 94 96 14 	call	0x292c	; 0x292c <eeprom_read_dword>
    2732:	68 83       	st	Y, r22
    2734:	79 83       	std	Y+1, r23	; 0x01
    2736:	8a 83       	std	Y+2, r24	; 0x02
    2738:	9b 83       	std	Y+3, r25	; 0x03
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
    273e:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

000028d8 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    28d8:	ab 01       	movw	r20, r22
    28da:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    28dc:	8b e4       	ldi	r24, 0x4B	; 75
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <eeprom_update_dword>
    28e4:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00002740 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	ec 01       	movw	r28, r24
    2746:	6b e4       	ldi	r22, 0x4B	; 75
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	0e 94 96 14 	call	0x292c	; 0x292c <eeprom_read_dword>
    2750:	68 83       	st	Y, r22
    2752:	79 83       	std	Y+1, r23	; 0x01
    2754:	8a 83       	std	Y+2, r24	; 0x02
    2756:	9b 83       	std	Y+3, r25	; 0x03
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

00002990 <LM_forward_msg>:
LM_STATUS LM_reset_module(){
	return util_reset_module();
}

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    2990:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <util_lora_forward_msg>
    2994:	08 95       	ret

Disassembly of section .text.attach_ending:

0000279a <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    279a:	fc 01       	movw	r30, r24
    279c:	01 90       	ld	r0, Z+
    279e:	00 20       	and	r0, r0
    27a0:	e9 f7       	brne	.-6      	; 0x279c <attach_ending+0x2>
    27a2:	cf 01       	movw	r24, r30
    27a4:	23 e0       	ldi	r18, 0x03	; 3
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	4b ee       	ldi	r20, 0xEB	; 235
    27aa:	51 e0       	ldi	r21, 0x01	; 1
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
    27b4:	08 95       	ret

Disassembly of section .text.util_transmit_msg:

000027b6 <util_transmit_msg>:
		default:
		return sd->failure_state;
	}
}

void util_transmit_msg(char msg[]){
    27b6:	cf 93       	push	r28
    27b8:	df 93       	push	r29
    27ba:	ec 01       	movw	r28, r24
	uart0_hal_send_message((uint8_t*) msg, strlen(msg));
    27bc:	bc 01       	movw	r22, r24
    27be:	80 e8       	ldi	r24, 0x80	; 128
    27c0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    27c4:	68 2f       	mov	r22, r24
    27c6:	ce 01       	movw	r24, r28
    27c8:	0e 94 33 12 	call	0x2466	; 0x2466 <uart0_hal_send_message>
}
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

Disassembly of section .text.util_read_msg:

00002996 <util_read_msg>:

void util_read_msg(char msg[]){
	uart0_hal_read_message_as_str(msg);
    2996:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <uart0_hal_read_message_as_str>
    299a:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

000023c4 <util_lora_forward_msg>:
	sd->failure_state=failed;
}

void util_setMatchCase(LM_STATE_DATA *sd, LM_MATCH_CASES matchCase, const char *matchString){
	sd->matchCase=matchCase;
	sd->matchString=matchString;
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
    23c8:	ea 01       	movw	r28, r20
    23ca:	ab 01       	movw	r20, r22
    23cc:	68 2f       	mov	r22, r24
    23ce:	80 e9       	ldi	r24, 0x90	; 144
    23d0:	92 e0       	ldi	r25, 0x02	; 2
    23d2:	0e 94 be 13 	call	0x277c	; 0x277c <strcpy>
    23d6:	80 e9       	ldi	r24, 0x90	; 144
    23d8:	92 e0       	ldi	r25, 0x02	; 2
    23da:	0e 94 cd 13 	call	0x279a	; 0x279a <attach_ending>
    23de:	80 e9       	ldi	r24, 0x90	; 144
    23e0:	92 e0       	ldi	r25, 0x02	; 2
    23e2:	0e 94 db 13 	call	0x27b6	; 0x27b6 <util_transmit_msg>
    23e6:	0e 94 49 14 	call	0x2892	; 0x2892 <uart0_hal_message_ready>
    23ea:	88 23       	and	r24, r24
    23ec:	e1 f3       	breq	.-8      	; 0x23e6 <util_lora_forward_msg+0x22>
    23ee:	ce 01       	movw	r24, r28
    23f0:	0e 94 cb 14 	call	0x2996	; 0x2996 <util_read_msg>
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	08 95       	ret

Disassembly of section .text.parse_cmd:

000026c4 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    26c4:	fc 01       	movw	r30, r24
    26c6:	80 81       	ld	r24, Z
    26c8:	82 37       	cpi	r24, 0x72	; 114
    26ca:	31 f0       	breq	.+12     	; 0x26d8 <parse_cmd+0x14>
	if(msg[0]=='w') return CONF_WRTIE;
    26cc:	87 37       	cpi	r24, 0x77	; 119
    26ce:	31 f0       	breq	.+12     	; 0x26dc <parse_cmd+0x18>
	if(msg[0]=='c') return CONF_CONNECT;
    26d0:	83 36       	cpi	r24, 0x63	; 99
    26d2:	31 f4       	brne	.+12     	; 0x26e0 <parse_cmd+0x1c>
    26d4:	89 e0       	ldi	r24, 0x09	; 9
    26d6:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    26d8:	87 e0       	ldi	r24, 0x07	; 7
    26da:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    26dc:	88 e0       	ldi	r24, 0x08	; 8
    26de:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
	return CONF_NOT_VALID;
    26e0:	85 e0       	ldi	r24, 0x05	; 5
}
    26e2:	08 95       	ret

Disassembly of section .text.validate_cmd:

00001e08 <validate_cmd>:

static bool validate_cmd(char msg[]){
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    1e0e:	bc 01       	movw	r22, r24
    1e10:	80 e8       	ldi	r24, 0x80	; 128
    1e12:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    1e16:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    1e18:	fc 01       	movw	r30, r24
    1e1a:	31 97       	sbiw	r30, 0x01	; 1
    1e1c:	ec 0f       	add	r30, r28
    1e1e:	fd 1f       	adc	r31, r29
    1e20:	80 81       	ld	r24, Z
    1e22:	80 32       	cpi	r24, 0x20	; 32
    1e24:	b1 f0       	breq	.+44     	; 0x1e52 <validate_cmd+0x4a>
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0d c0       	rjmp	.+26     	; 0x1e48 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	90 81       	ld	r25, Z
    1e36:	90 32       	cpi	r25, 0x20	; 32
    1e38:	21 f4       	brne	.+8      	; 0x1e42 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    1e3a:	41 11       	cpse	r20, r1
    1e3c:	0c c0       	rjmp	.+24     	; 0x1e56 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    1e42:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    1e44:	2f 5f       	subi	r18, 0xFF	; 255
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
    1e48:	26 17       	cp	r18, r22
    1e4a:	37 07       	cpc	r19, r23
    1e4c:	80 f3       	brcs	.-32     	; 0x1e2e <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	03 c0       	rjmp	.+6      	; 0x1e58 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	01 c0       	rjmp	.+2      	; 0x1e58 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    1e56:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	08 95       	ret

Disassembly of section .text.CONF_enter:

0000122e <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    122e:	cf 93       	push	r28
	uart1_hal_init();
    1230:	0e 94 51 11 	call	0x22a2	; 0x22a2 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    1234:	c0 e0       	ldi	r28, 0x00	; 0
    1236:	07 c0       	rjmp	.+14     	; 0x1246 <CONF_enter+0x18>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    1238:	c5 e0       	ldi	r28, 0x05	; 5
    123a:	05 c0       	rjmp	.+10     	; 0x1246 <CONF_enter+0x18>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    123c:	c6 e0       	ldi	r28, 0x06	; 6
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <CONF_enter+0x18>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1240:	c5 e0       	ldi	r28, 0x05	; 5
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <CONF_enter+0x18>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1244:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    1246:	ec 2f       	mov	r30, r28
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	eb 30       	cpi	r30, 0x0B	; 11
    124c:	f1 05       	cpc	r31, r1
    124e:	d8 f7       	brcc	.-10     	; 0x1246 <CONF_enter+0x18>
    1250:	e2 5c       	subi	r30, 0xC2	; 194
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    1258:	69 e5       	ldi	r22, 0x59	; 89
    125a:	72 e0       	ldi	r23, 0x02	; 2
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	0e 94 87 0c 	call	0x190e	; 0x190e <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1262:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1264:	f0 cf       	rjmp	.-32     	; 0x1246 <CONF_enter+0x18>
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    1266:	0e 94 50 14 	call	0x28a0	; 0x28a0 <uart1_hal_message_ready>
    126a:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    126c:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    126e:	0e 94 57 14 	call	0x28ae	; 0x28ae <uart1_hal_rx_full>
    1272:	81 11       	cpse	r24, r1
    1274:	e1 cf       	rjmp	.-62     	; 0x1238 <CONF_enter+0xa>
    1276:	e7 cf       	rjmp	.-50     	; 0x1246 <CONF_enter+0x18>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    1278:	80 e2       	ldi	r24, 0x20	; 32
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	0e 94 06 13 	call	0x260c	; 0x260c <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    1280:	80 e2       	ldi	r24, 0x20	; 32
    1282:	94 e0       	ldi	r25, 0x04	; 4
    1284:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <validate_cmd>
    1288:	88 23       	and	r24, r24
    128a:	c1 f2       	breq	.-80     	; 0x123c <CONF_enter+0xe>
					state=parse_cmd(cnf_rx_cmd);
    128c:	80 e2       	ldi	r24, 0x20	; 32
    128e:	94 e0       	ldi	r25, 0x04	; 4
    1290:	0e 94 62 13 	call	0x26c4	; 0x26c4 <parse_cmd>
    1294:	c8 2f       	mov	r28, r24
    1296:	d7 cf       	rjmp	.-82     	; 0x1246 <CONF_enter+0x18>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    1298:	60 e2       	ldi	r22, 0x20	; 32
    129a:	74 e0       	ldi	r23, 0x04	; 4
    129c:	80 e8       	ldi	r24, 0x80	; 128
    129e:	48 e5       	ldi	r20, 0x58	; 88
    12a0:	53 e0       	ldi	r21, 0x03	; 3
    12a2:	0e 94 ca 06 	call	0xd94	; 0xd94 <handle_read>
    12a6:	88 23       	and	r24, r24
    12a8:	59 f2       	breq	.-106    	; 0x1240 <CONF_enter+0x12>
					state=CONF_REPLY;
    12aa:	ca e0       	ldi	r28, 0x0A	; 10
    12ac:	cc cf       	rjmp	.-104    	; 0x1246 <CONF_enter+0x18>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    12ae:	60 e2       	ldi	r22, 0x20	; 32
    12b0:	74 e0       	ldi	r23, 0x04	; 4
    12b2:	80 e8       	ldi	r24, 0x80	; 128
    12b4:	48 e5       	ldi	r20, 0x58	; 88
    12b6:	53 e0       	ldi	r21, 0x03	; 3
    12b8:	0e 94 80 08 	call	0x1100	; 0x1100 <handle_write>
    12bc:	88 23       	and	r24, r24
    12be:	11 f2       	breq	.-124    	; 0x1244 <CONF_enter+0x16>
					state=CONF_REPLY;
    12c0:	ca e0       	ldi	r28, 0x0A	; 10
    12c2:	c1 cf       	rjmp	.-126    	; 0x1246 <CONF_enter+0x18>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				CON_RN2483();
    12c4:	0e 94 88 09 	call	0x1310	; 0x1310 <CON_RN2483>
				uart1_hal_clear_rx_buffer();
    12c8:	0e 94 ae 14 	call	0x295c	; 0x295c <uart1_hal_clear_rx_buffer>
				state=CONF_CLEAR_FOR_NEW_CMD;
    12cc:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    12ce:	bb cf       	rjmp	.-138    	; 0x1246 <CONF_enter+0x18>
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    12d0:	68 e5       	ldi	r22, 0x58	; 88
    12d2:	73 e0       	ldi	r23, 0x03	; 3
    12d4:	80 e8       	ldi	r24, 0x80	; 128
    12d6:	0e 94 87 0c 	call	0x190e	; 0x190e <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    12da:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    12dc:	b4 cf       	rjmp	.-152    	; 0x1246 <CONF_enter+0x18>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    12de:	6f e7       	ldi	r22, 0x7F	; 127
    12e0:	72 e0       	ldi	r23, 0x02	; 2
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	0e 94 87 0c 	call	0x190e	; 0x190e <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    12e8:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    12ea:	ad cf       	rjmp	.-166    	; 0x1246 <CONF_enter+0x18>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    12ec:	69 e8       	ldi	r22, 0x89	; 137
    12ee:	72 e0       	ldi	r23, 0x02	; 2
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 87 0c 	call	0x190e	; 0x190e <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    12f6:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    12f8:	a6 cf       	rjmp	.-180    	; 0x1246 <CONF_enter+0x18>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    12fa:	0e 94 ae 14 	call	0x295c	; 0x295c <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    12fe:	66 e9       	ldi	r22, 0x96	; 150
    1300:	72 e0       	ldi	r23, 0x02	; 2
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	0e 94 87 0c 	call	0x190e	; 0x190e <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    1308:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    130a:	9d cf       	rjmp	.-198    	; 0x1246 <CONF_enter+0x18>
			
			case CONF_EXIT:
				return;
		}
	}
}
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00002634 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0){
    2638:	bc 01       	movw	r22, r24
    263a:	80 e8       	ldi	r24, 0x80	; 128
    263c:	04 e0       	ldi	r16, 0x04	; 4
    263e:	10 e0       	ldi	r17, 0x00	; 0
    2640:	2c eb       	ldi	r18, 0xBC	; 188
    2642:	32 e0       	ldi	r19, 0x02	; 2
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <strncmp>
    264a:	89 2b       	or	r24, r25
    264c:	11 f4       	brne	.+4      	; 0x2652 <CON_RN2483_parse+0x1e>
		return CL_EXIT;
    264e:	84 e0       	ldi	r24, 0x04	; 4
    2650:	01 c0       	rjmp	.+2      	; 0x2654 <CON_RN2483_parse+0x20>
	}
	return CL_FORWARD;
    2652:	83 e0       	ldi	r24, 0x03	; 3
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001310 <CON_RN2483>:
extern char cnf_rx_cmd[];
extern char cnf_reply[];

static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CON_RN2483(){
    1310:	6f 92       	push	r6
    1312:	7f 92       	push	r7
    1314:	8f 92       	push	r8
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1320:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1322:	c2 30       	cpi	r28, 0x02	; 2
    1324:	09 f1       	breq	.+66     	; 0x1368 <CON_RN2483+0x58>
    1326:	28 f4       	brcc	.+10     	; 0x1332 <CON_RN2483+0x22>
    1328:	cc 23       	and	r28, r28
    132a:	49 f0       	breq	.+18     	; 0x133e <CON_RN2483+0x2e>
    132c:	c1 30       	cpi	r28, 0x01	; 1
    132e:	91 f0       	breq	.+36     	; 0x1354 <CON_RN2483+0x44>
    1330:	f8 cf       	rjmp	.-16     	; 0x1322 <CON_RN2483+0x12>
    1332:	c3 30       	cpi	r28, 0x03	; 3
    1334:	f9 f0       	breq	.+62     	; 0x1374 <CON_RN2483+0x64>
    1336:	c4 30       	cpi	r28, 0x04	; 4
    1338:	09 f4       	brne	.+2      	; 0x133c <CON_RN2483+0x2c>
    133a:	4b c0       	rjmp	.+150    	; 0x13d2 <CON_RN2483+0xc2>
    133c:	f2 cf       	rjmp	.-28     	; 0x1322 <CON_RN2483+0x12>
			case CL_INIT:
				uart0_hal_init();
    133e:	0e 94 33 11 	call	0x2266	; 0x2266 <uart0_hal_init>
				rn2483_init();
    1342:	0e 94 b8 14 	call	0x2970	; 0x2970 <rn2483_init>
				//LM_reset_module();
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1346:	61 ec       	ldi	r22, 0xC1	; 193
    1348:	72 e0       	ldi	r23, 0x02	; 2
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0e 94 87 0c 	call	0x190e	; 0x190e <uart1_hal_send_string>
				state=CL_READ_MSG;
    1350:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1352:	e7 cf       	rjmp	.-50     	; 0x1322 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1354:	0e 94 50 14 	call	0x28a0	; 0x28a0 <uart1_hal_message_ready>
    1358:	88 23       	and	r24, r24
    135a:	19 f3       	breq	.-58     	; 0x1322 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    135c:	80 e2       	ldi	r24, 0x20	; 32
    135e:	94 e0       	ldi	r25, 0x04	; 4
    1360:	0e 94 06 13 	call	0x260c	; 0x260c <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1364:	c2 e0       	ldi	r28, 0x02	; 2
    1366:	dd cf       	rjmp	.-70     	; 0x1322 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	94 e0       	ldi	r25, 0x04	; 4
    136c:	0e 94 1a 13 	call	0x2634	; 0x2634 <CON_RN2483_parse>
    1370:	c8 2f       	mov	r28, r24
			break;
    1372:	d7 cf       	rjmp	.-82     	; 0x1322 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1374:	80 e2       	ldi	r24, 0x20	; 32
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	6c 01       	movw	r12, r24
    137a:	20 e8       	ldi	r18, 0x80	; 128
    137c:	e2 2e       	mov	r14, r18
    137e:	2f 93       	push	r18
    1380:	df 92       	push	r13
    1382:	8f 93       	push	r24
    1384:	87 ef       	ldi	r24, 0xF7	; 247
    1386:	92 e0       	ldi	r25, 0x02	; 2
    1388:	a0 e0       	ldi	r26, 0x00	; 0
    138a:	af 93       	push	r26
    138c:	9f 93       	push	r25
    138e:	8f 93       	push	r24
    1390:	c8 e5       	ldi	r28, 0x58	; 88
    1392:	d3 e0       	ldi	r29, 0x03	; 3
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	0e 94 89 10 	call	0x2112	; 0x2112 <sprintf>
				uart1_hal_send_string(cnf_reply);
    139c:	3e 01       	movw	r6, r28
    139e:	20 e8       	ldi	r18, 0x80	; 128
    13a0:	82 2e       	mov	r8, r18
    13a2:	88 2d       	mov	r24, r8
    13a4:	b3 01       	movw	r22, r6
    13a6:	0e 94 87 0c 	call	0x190e	; 0x190e <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    13aa:	ae 01       	movw	r20, r28
    13ac:	6c 2d       	mov	r22, r12
    13ae:	7d 2d       	mov	r23, r13
    13b0:	8e 2d       	mov	r24, r14
    13b2:	0e 94 c8 14 	call	0x2990	; 0x2990 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    13b6:	88 2d       	mov	r24, r8
    13b8:	b3 01       	movw	r22, r6
    13ba:	0e 94 87 0c 	call	0x190e	; 0x190e <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    13be:	8d b7       	in	r24, 0x3d	; 61
    13c0:	9e b7       	in	r25, 0x3e	; 62
    13c2:	08 96       	adiw	r24, 0x08	; 8
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	9e bf       	out	0x3e, r25	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    13ce:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    13d0:	a8 cf       	rjmp	.-176    	; 0x1322 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart1_hal_send_string("Closing connection to RN2483...");
    13d2:	6d ef       	ldi	r22, 0xFD	; 253
    13d4:	72 e0       	ldi	r23, 0x02	; 2
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	0e 94 87 0c 	call	0x190e	; 0x190e <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	ef 90       	pop	r14
    13e4:	df 90       	pop	r13
    13e6:	cf 90       	pop	r12
    13e8:	8f 90       	pop	r8
    13ea:	7f 90       	pop	r7
    13ec:	6f 90       	pop	r6
    13ee:	08 95       	ret

Disassembly of section .text.write_deveui:

00001a12 <write_deveui>:
}

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    1a12:	cf 92       	push	r12
    1a14:	df 92       	push	r13
    1a16:	ef 92       	push	r14
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    1a20:	22 e0       	ldi	r18, 0x02	; 2
    1a22:	4c ea       	ldi	r20, 0xAC	; 172
    1a24:	56 e0       	ldi	r21, 0x06	; 6
    1a26:	0e 94 3c 0c 	call	0x1878	; 0x1878 <get_parameter>
    1a2a:	c8 2f       	mov	r28, r24
    1a2c:	88 23       	and	r24, r24
    1a2e:	29 f1       	breq	.+74     	; 0x1a7a <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    1a30:	8c ea       	ldi	r24, 0xAC	; 172
    1a32:	96 e0       	ldi	r25, 0x06	; 6
    1a34:	6c 01       	movw	r12, r24
    1a36:	20 e8       	ldi	r18, 0x80	; 128
    1a38:	e2 2e       	mov	r14, r18
    1a3a:	8e 2d       	mov	r24, r14
    1a3c:	b6 01       	movw	r22, r12
    1a3e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    1a42:	40 97       	sbiw	r24, 0x10	; 16
    1a44:	c9 f4       	brne	.+50     	; 0x1a78 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    1a46:	8e 2d       	mov	r24, r14
    1a48:	b6 01       	movw	r22, r12
    1a4a:	0e 94 6f 11 	call	0x22de	; 0x22de <EM_set_deveui>
    1a4e:	c8 2f       	mov	r28, r24
    1a50:	81 11       	cpse	r24, r1
    1a52:	09 c0       	rjmp	.+18     	; 0x1a66 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    1a54:	27 e0       	ldi	r18, 0x07	; 7
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	4d e1       	ldi	r20, 0x1D	; 29
    1a5a:	53 e0       	ldi	r21, 0x03	; 3
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	c8 01       	movw	r24, r16
    1a60:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
		return false;
    1a64:	0a c0       	rjmp	.+20     	; 0x1a7a <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    1a66:	28 e0       	ldi	r18, 0x08	; 8
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	44 e2       	ldi	r20, 0x24	; 36
    1a6c:	53 e0       	ldi	r21, 0x03	; 3
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	c8 01       	movw	r24, r16
    1a72:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
		return true;
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    1a78:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    1a7a:	8c 2f       	mov	r24, r28
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ef 90       	pop	r14
    1a84:	df 90       	pop	r13
    1a86:	cf 90       	pop	r12
    1a88:	08 95       	ret

Disassembly of section .text.write_appeui:

00001a8a <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    1a8a:	cf 92       	push	r12
    1a8c:	df 92       	push	r13
    1a8e:	ef 92       	push	r14
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    1a98:	22 e0       	ldi	r18, 0x02	; 2
    1a9a:	4c ea       	ldi	r20, 0xAC	; 172
    1a9c:	56 e0       	ldi	r21, 0x06	; 6
    1a9e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <get_parameter>
    1aa2:	c8 2f       	mov	r28, r24
    1aa4:	88 23       	and	r24, r24
    1aa6:	29 f1       	breq	.+74     	; 0x1af2 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    1aa8:	8c ea       	ldi	r24, 0xAC	; 172
    1aaa:	96 e0       	ldi	r25, 0x06	; 6
    1aac:	6c 01       	movw	r12, r24
    1aae:	20 e8       	ldi	r18, 0x80	; 128
    1ab0:	e2 2e       	mov	r14, r18
    1ab2:	8e 2d       	mov	r24, r14
    1ab4:	b6 01       	movw	r22, r12
    1ab6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    1aba:	40 97       	sbiw	r24, 0x10	; 16
    1abc:	c9 f4       	brne	.+50     	; 0x1af0 <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    1abe:	8e 2d       	mov	r24, r14
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	0e 94 8c 11 	call	0x2318	; 0x2318 <EM_set_appeui>
    1ac6:	c8 2f       	mov	r28, r24
    1ac8:	81 11       	cpse	r24, r1
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    1acc:	27 e0       	ldi	r18, 0x07	; 7
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4d e1       	ldi	r20, 0x1D	; 29
    1ad2:	53 e0       	ldi	r21, 0x03	; 3
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
		return false;
    1adc:	0a c0       	rjmp	.+20     	; 0x1af2 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    1ade:	28 e0       	ldi	r18, 0x08	; 8
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	44 e2       	ldi	r20, 0x24	; 36
    1ae4:	53 e0       	ldi	r21, 0x03	; 3
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	c8 01       	movw	r24, r16
    1aea:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
		return true;
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    1af0:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    1af2:	8c 2f       	mov	r24, r28
    1af4:	cf 91       	pop	r28
    1af6:	1f 91       	pop	r17
    1af8:	0f 91       	pop	r16
    1afa:	ef 90       	pop	r14
    1afc:	df 90       	pop	r13
    1afe:	cf 90       	pop	r12
    1b00:	08 95       	ret

Disassembly of section .text.write_appkey:

00001b02 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    1b02:	cf 92       	push	r12
    1b04:	df 92       	push	r13
    1b06:	ef 92       	push	r14
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	cf 93       	push	r28
    1b0e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    1b10:	22 e0       	ldi	r18, 0x02	; 2
    1b12:	4c ea       	ldi	r20, 0xAC	; 172
    1b14:	56 e0       	ldi	r21, 0x06	; 6
    1b16:	0e 94 3c 0c 	call	0x1878	; 0x1878 <get_parameter>
    1b1a:	c8 2f       	mov	r28, r24
    1b1c:	88 23       	and	r24, r24
    1b1e:	29 f1       	breq	.+74     	; 0x1b6a <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    1b20:	8c ea       	ldi	r24, 0xAC	; 172
    1b22:	96 e0       	ldi	r25, 0x06	; 6
    1b24:	6c 01       	movw	r12, r24
    1b26:	20 e8       	ldi	r18, 0x80	; 128
    1b28:	e2 2e       	mov	r14, r18
    1b2a:	8e 2d       	mov	r24, r14
    1b2c:	b6 01       	movw	r22, r12
    1b2e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    1b32:	80 97       	sbiw	r24, 0x20	; 32
    1b34:	c9 f4       	brne	.+50     	; 0x1b68 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    1b36:	8e 2d       	mov	r24, r14
    1b38:	b6 01       	movw	r22, r12
    1b3a:	0e 94 a9 11 	call	0x2352	; 0x2352 <EM_set_appkey>
    1b3e:	c8 2f       	mov	r28, r24
    1b40:	81 11       	cpse	r24, r1
    1b42:	09 c0       	rjmp	.+18     	; 0x1b56 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    1b44:	27 e0       	ldi	r18, 0x07	; 7
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4d e1       	ldi	r20, 0x1D	; 29
    1b4a:	53 e0       	ldi	r21, 0x03	; 3
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	c8 01       	movw	r24, r16
    1b50:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
		return false;
    1b54:	0a c0       	rjmp	.+20     	; 0x1b6a <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    1b56:	28 e0       	ldi	r18, 0x08	; 8
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	44 e2       	ldi	r20, 0x24	; 36
    1b5c:	53 e0       	ldi	r21, 0x03	; 3
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	c8 01       	movw	r24, r16
    1b62:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
		return true;
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    1b68:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    1b6a:	8c 2f       	mov	r24, r28
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ef 90       	pop	r14
    1b74:	df 90       	pop	r13
    1b76:	cf 90       	pop	r12
    1b78:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00001f9a <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    1fa2:	22 e0       	ldi	r18, 0x02	; 2
    1fa4:	4c ea       	ldi	r20, 0xAC	; 172
    1fa6:	56 e0       	ldi	r21, 0x06	; 6
    1fa8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <get_parameter>
    1fac:	c8 2f       	mov	r28, r24
    1fae:	88 23       	and	r24, r24
    1fb0:	a9 f0       	breq	.+42     	; 0x1fdc <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    1fb2:	8c ea       	ldi	r24, 0xAC	; 172
    1fb4:	96 e0       	ldi	r25, 0x06	; 6
    1fb6:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <is_float>
    1fba:	c8 2f       	mov	r28, r24
    1fbc:	88 23       	and	r24, r24
    1fbe:	71 f0       	breq	.+28     	; 0x1fdc <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    1fc0:	8c ea       	ldi	r24, 0xAC	; 172
    1fc2:	96 e0       	ldi	r25, 0x06	; 6
    1fc4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <str2flaot>
	EM_set_ppmfactor(val);
    1fc8:	0e 94 5e 14 	call	0x28bc	; 0x28bc <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    1fcc:	28 e0       	ldi	r18, 0x08	; 8
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	44 e2       	ldi	r20, 0x24	; 36
    1fd2:	53 e0       	ldi	r21, 0x03	; 3
    1fd4:	60 e0       	ldi	r22, 0x00	; 0
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
	return true;
}
    1fdc:	8c 2f       	mov	r24, r28
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

Disassembly of section .text.write_RRL:

00001fe6 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    1fee:	22 e0       	ldi	r18, 0x02	; 2
    1ff0:	4c ea       	ldi	r20, 0xAC	; 172
    1ff2:	56 e0       	ldi	r21, 0x06	; 6
    1ff4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <get_parameter>
    1ff8:	c8 2f       	mov	r28, r24
    1ffa:	88 23       	and	r24, r24
    1ffc:	a9 f0       	breq	.+42     	; 0x2028 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    1ffe:	8c ea       	ldi	r24, 0xAC	; 172
    2000:	96 e0       	ldi	r25, 0x06	; 6
    2002:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <is_float>
    2006:	c8 2f       	mov	r28, r24
    2008:	88 23       	and	r24, r24
    200a:	71 f0       	breq	.+28     	; 0x2028 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    200c:	8c ea       	ldi	r24, 0xAC	; 172
    200e:	96 e0       	ldi	r25, 0x06	; 6
    2010:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <str2flaot>
	EM_set_RRL(val);
    2014:	0e 94 65 14 	call	0x28ca	; 0x28ca <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    2018:	28 e0       	ldi	r18, 0x08	; 8
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	44 e2       	ldi	r20, 0x24	; 36
    201e:	53 e0       	ldi	r21, 0x03	; 3
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	c8 01       	movw	r24, r16
    2024:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
	return true;
}
    2028:	8c 2f       	mov	r24, r28
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	08 95       	ret

Disassembly of section .text.write_VCC:

00002032 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    203a:	22 e0       	ldi	r18, 0x02	; 2
    203c:	4c ea       	ldi	r20, 0xAC	; 172
    203e:	56 e0       	ldi	r21, 0x06	; 6
    2040:	0e 94 3c 0c 	call	0x1878	; 0x1878 <get_parameter>
    2044:	c8 2f       	mov	r28, r24
    2046:	88 23       	and	r24, r24
    2048:	a9 f0       	breq	.+42     	; 0x2074 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    204a:	8c ea       	ldi	r24, 0xAC	; 172
    204c:	96 e0       	ldi	r25, 0x06	; 6
    204e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <is_float>
    2052:	c8 2f       	mov	r28, r24
    2054:	88 23       	and	r24, r24
    2056:	71 f0       	breq	.+28     	; 0x2074 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    2058:	8c ea       	ldi	r24, 0xAC	; 172
    205a:	96 e0       	ldi	r25, 0x06	; 6
    205c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <str2flaot>
	EM_set_Vcc(val);
    2060:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    2064:	28 e0       	ldi	r18, 0x08	; 8
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	44 e2       	ldi	r20, 0x24	; 36
    206a:	53 e0       	ldi	r21, 0x03	; 3
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	c8 01       	movw	r24, r16
    2070:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
	return true;
}
    2074:	8c 2f       	mov	r24, r28
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	0f 91       	pop	r16
    207c:	08 95       	ret

Disassembly of section .text.handle_read:

00000d94 <handle_read>:
static bool write_appkey(const char cmd[], char res[]);
static bool write_PPM_factor(const char cmd[], char res[]);
static bool write_RRL(const char cmd[], char res[]);
static bool write_VCC(const char cmd[], char res[]);

bool handle_read(const char cmd[], char res[]){
 d94:	cf 92       	push	r12
 d96:	df 92       	push	r13
 d98:	ef 92       	push	r14
 d9a:	ff 92       	push	r15
 d9c:	0f 93       	push	r16
 d9e:	1f 93       	push	r17
 da0:	cf 93       	push	r28
 da2:	df 93       	push	r29
 da4:	cd b7       	in	r28, 0x3d	; 61
 da6:	de b7       	in	r29, 0x3e	; 62
 da8:	68 97       	sbiw	r28, 0x18	; 24
 daa:	0f b6       	in	r0, 0x3f	; 63
 dac:	f8 94       	cli
 dae:	de bf       	out	0x3e, r29	; 62
 db0:	0f be       	out	0x3f, r0	; 63
 db2:	cd bf       	out	0x3d, r28	; 61
 db4:	6b 01       	movw	r12, r22
 db6:	e8 2e       	mov	r14, r24
 db8:	f4 2e       	mov	r15, r20
 dba:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
 dbc:	21 e0       	ldi	r18, 0x01	; 1
 dbe:	ae 01       	movw	r20, r28
 dc0:	4f 5f       	subi	r20, 0xFF	; 255
 dc2:	5f 4f       	sbci	r21, 0xFF	; 255
 dc4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <get_parameter>
 dc8:	18 2f       	mov	r17, r24
 dca:	88 23       	and	r24, r24
 dcc:	09 f4       	brne	.+2      	; 0xdd0 <handle_read+0x3c>
 dce:	b0 c0       	rjmp	.+352    	; 0xf30 <handle_read+0x19c>
 dd0:	8e 2d       	mov	r24, r14
 dd2:	b6 01       	movw	r22, r12
 dd4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <count_parameters>
 dd8:	82 30       	cpi	r24, 0x02	; 2
 dda:	09 f4       	brne	.+2      	; 0xdde <handle_read+0x4a>
 ddc:	a8 c0       	rjmp	.+336    	; 0xf2e <handle_read+0x19a>
	
	if (strcmp(par, RW_DEVEUI)==0)
 dde:	ce 01       	movw	r24, r28
 de0:	01 96       	adiw	r24, 0x01	; 1
 de2:	6c 01       	movw	r12, r24
 de4:	20 e8       	ldi	r18, 0x80	; 128
 de6:	e2 2e       	mov	r14, r18
 de8:	2c e2       	ldi	r18, 0x2C	; 44
 dea:	33 e0       	ldi	r19, 0x03	; 3
 dec:	40 e0       	ldi	r20, 0x00	; 0
 dee:	8e 2d       	mov	r24, r14
 df0:	b6 01       	movw	r22, r12
 df2:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
 df6:	89 2b       	or	r24, r25
 df8:	29 f4       	brne	.+10     	; 0xe04 <handle_read+0x70>
	{
		EM_get_deveui(res);
 dfa:	8f 2d       	mov	r24, r15
 dfc:	90 2f       	mov	r25, r16
 dfe:	0e 94 66 12 	call	0x24cc	; 0x24cc <EM_get_deveui>
 e02:	96 c0       	rjmp	.+300    	; 0xf30 <handle_read+0x19c>
	}
	else if (strcmp(par, RW_APPEUI)==0)
 e04:	23 e3       	ldi	r18, 0x33	; 51
 e06:	33 e0       	ldi	r19, 0x03	; 3
 e08:	40 e0       	ldi	r20, 0x00	; 0
 e0a:	8e 2d       	mov	r24, r14
 e0c:	b6 01       	movw	r22, r12
 e0e:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
 e12:	89 2b       	or	r24, r25
 e14:	29 f4       	brne	.+10     	; 0xe20 <handle_read+0x8c>
	{
		EM_get_appeui(res);
 e16:	8f 2d       	mov	r24, r15
 e18:	90 2f       	mov	r25, r16
 e1a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <EM_get_appeui>
 e1e:	88 c0       	rjmp	.+272    	; 0xf30 <handle_read+0x19c>
	}
	else if (strcmp(par, RW_APPKEY)==0)
 e20:	2a e3       	ldi	r18, 0x3A	; 58
 e22:	33 e0       	ldi	r19, 0x03	; 3
 e24:	40 e0       	ldi	r20, 0x00	; 0
 e26:	8e 2d       	mov	r24, r14
 e28:	b6 01       	movw	r22, r12
 e2a:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
 e2e:	89 2b       	or	r24, r25
 e30:	29 f4       	brne	.+10     	; 0xe3c <handle_read+0xa8>
	{
		EM_get_appkey(res);
 e32:	8f 2d       	mov	r24, r15
 e34:	90 2f       	mov	r25, r16
 e36:	0e 94 96 12 	call	0x252c	; 0x252c <EM_get_appkey>
 e3a:	7a c0       	rjmp	.+244    	; 0xf30 <handle_read+0x19c>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
 e3c:	21 e4       	ldi	r18, 0x41	; 65
 e3e:	33 e0       	ldi	r19, 0x03	; 3
 e40:	40 e0       	ldi	r20, 0x00	; 0
 e42:	8e 2d       	mov	r24, r14
 e44:	b6 01       	movw	r22, r12
 e46:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
 e4a:	89 2b       	or	r24, r25
 e4c:	e1 f4       	brne	.+56     	; 0xe86 <handle_read+0xf2>
	{
		EM_get_ppmfactor(&val);
 e4e:	ce 01       	movw	r24, r28
 e50:	45 96       	adiw	r24, 0x15	; 21
 e52:	0e 94 82 13 	call	0x2704	; 0x2704 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
 e56:	88 8d       	ldd	r24, Y+24	; 0x18
 e58:	8f 93       	push	r24
 e5a:	8f 89       	ldd	r24, Y+23	; 0x17
 e5c:	8f 93       	push	r24
 e5e:	8e 89       	ldd	r24, Y+22	; 0x16
 e60:	8f 93       	push	r24
 e62:	8d 89       	ldd	r24, Y+21	; 0x15
 e64:	8f 93       	push	r24
 e66:	86 e4       	ldi	r24, 0x46	; 70
 e68:	93 e0       	ldi	r25, 0x03	; 3
 e6a:	a0 e0       	ldi	r26, 0x00	; 0
 e6c:	af 93       	push	r26
 e6e:	9f 93       	push	r25
 e70:	8f 93       	push	r24
 e72:	0f 93       	push	r16
 e74:	ff 92       	push	r15
 e76:	0e 94 89 10 	call	0x2112	; 0x2112 <sprintf>
 e7a:	0f b6       	in	r0, 0x3f	; 63
 e7c:	f8 94       	cli
 e7e:	de bf       	out	0x3e, r29	; 62
 e80:	0f be       	out	0x3f, r0	; 63
 e82:	cd bf       	out	0x3d, r28	; 61
 e84:	55 c0       	rjmp	.+170    	; 0xf30 <handle_read+0x19c>
	}
	else if(strcmp(par, RW_RRL)==0)
 e86:	2b e4       	ldi	r18, 0x4B	; 75
 e88:	33 e0       	ldi	r19, 0x03	; 3
 e8a:	40 e0       	ldi	r20, 0x00	; 0
 e8c:	8e 2d       	mov	r24, r14
 e8e:	b6 01       	movw	r22, r12
 e90:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
 e94:	89 2b       	or	r24, r25
 e96:	e1 f4       	brne	.+56     	; 0xed0 <handle_read+0x13c>
	{
		EM_get_RRL(&val);
 e98:	ce 01       	movw	r24, r28
 e9a:	45 96       	adiw	r24, 0x15	; 21
 e9c:	0e 94 91 13 	call	0x2722	; 0x2722 <EM_get_RRL>
		sprintf(res, "%.2f", val);
 ea0:	88 8d       	ldd	r24, Y+24	; 0x18
 ea2:	8f 93       	push	r24
 ea4:	8f 89       	ldd	r24, Y+23	; 0x17
 ea6:	8f 93       	push	r24
 ea8:	8e 89       	ldd	r24, Y+22	; 0x16
 eaa:	8f 93       	push	r24
 eac:	8d 89       	ldd	r24, Y+21	; 0x15
 eae:	8f 93       	push	r24
 eb0:	86 e4       	ldi	r24, 0x46	; 70
 eb2:	93 e0       	ldi	r25, 0x03	; 3
 eb4:	a0 e0       	ldi	r26, 0x00	; 0
 eb6:	af 93       	push	r26
 eb8:	9f 93       	push	r25
 eba:	8f 93       	push	r24
 ebc:	0f 93       	push	r16
 ebe:	ff 92       	push	r15
 ec0:	0e 94 89 10 	call	0x2112	; 0x2112 <sprintf>
 ec4:	0f b6       	in	r0, 0x3f	; 63
 ec6:	f8 94       	cli
 ec8:	de bf       	out	0x3e, r29	; 62
 eca:	0f be       	out	0x3f, r0	; 63
 ecc:	cd bf       	out	0x3d, r28	; 61
 ece:	30 c0       	rjmp	.+96     	; 0xf30 <handle_read+0x19c>
	}
	else if(strcmp(par, RW_VCC)==0)
 ed0:	20 e5       	ldi	r18, 0x50	; 80
 ed2:	33 e0       	ldi	r19, 0x03	; 3
 ed4:	40 e0       	ldi	r20, 0x00	; 0
 ed6:	8e 2d       	mov	r24, r14
 ed8:	b6 01       	movw	r22, r12
 eda:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
 ede:	89 2b       	or	r24, r25
 ee0:	e1 f4       	brne	.+56     	; 0xf1a <handle_read+0x186>
	{
		EM_get_Vcc(&val);
 ee2:	ce 01       	movw	r24, r28
 ee4:	45 96       	adiw	r24, 0x15	; 21
 ee6:	0e 94 a0 13 	call	0x2740	; 0x2740 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
 eea:	88 8d       	ldd	r24, Y+24	; 0x18
 eec:	8f 93       	push	r24
 eee:	8f 89       	ldd	r24, Y+23	; 0x17
 ef0:	8f 93       	push	r24
 ef2:	8e 89       	ldd	r24, Y+22	; 0x16
 ef4:	8f 93       	push	r24
 ef6:	8d 89       	ldd	r24, Y+21	; 0x15
 ef8:	8f 93       	push	r24
 efa:	86 e4       	ldi	r24, 0x46	; 70
 efc:	93 e0       	ldi	r25, 0x03	; 3
 efe:	a0 e0       	ldi	r26, 0x00	; 0
 f00:	af 93       	push	r26
 f02:	9f 93       	push	r25
 f04:	8f 93       	push	r24
 f06:	0f 93       	push	r16
 f08:	ff 92       	push	r15
 f0a:	0e 94 89 10 	call	0x2112	; 0x2112 <sprintf>
 f0e:	0f b6       	in	r0, 0x3f	; 63
 f10:	f8 94       	cli
 f12:	de bf       	out	0x3e, r29	; 62
 f14:	0f be       	out	0x3f, r0	; 63
 f16:	cd bf       	out	0x3d, r28	; 61
 f18:	0b c0       	rjmp	.+22     	; 0xf30 <handle_read+0x19c>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
 f1a:	26 e1       	ldi	r18, 0x16	; 22
 f1c:	30 e0       	ldi	r19, 0x00	; 0
 f1e:	45 e5       	ldi	r20, 0x55	; 85
 f20:	53 e0       	ldi	r21, 0x03	; 3
 f22:	60 e0       	ldi	r22, 0x00	; 0
 f24:	8f 2d       	mov	r24, r15
 f26:	90 2f       	mov	r25, r16
 f28:	0e 94 4d 12 	call	0x249a	; 0x249a <memcpy>
 f2c:	01 c0       	rjmp	.+2      	; 0xf30 <handle_read+0x19c>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
 f2e:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
 f30:	81 2f       	mov	r24, r17
 f32:	68 96       	adiw	r28, 0x18	; 24
 f34:	0f b6       	in	r0, 0x3f	; 63
 f36:	f8 94       	cli
 f38:	de bf       	out	0x3e, r29	; 62
 f3a:	0f be       	out	0x3f, r0	; 63
 f3c:	cd bf       	out	0x3d, r28	; 61
 f3e:	df 91       	pop	r29
 f40:	cf 91       	pop	r28
 f42:	1f 91       	pop	r17
 f44:	0f 91       	pop	r16
 f46:	ff 90       	pop	r15
 f48:	ef 90       	pop	r14
 f4a:	df 90       	pop	r13
 f4c:	cf 90       	pop	r12
 f4e:	08 95       	ret

Disassembly of section .text.handle_write:

00001100 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1100:	6f 92       	push	r6
    1102:	7f 92       	push	r7
    1104:	8f 92       	push	r8
    1106:	af 92       	push	r10
    1108:	bf 92       	push	r11
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	64 97       	sbiw	r28, 0x14	; 20
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	3b 01       	movw	r6, r22
    1128:	88 2e       	mov	r8, r24
    112a:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	ae 01       	movw	r20, r28
    1130:	4f 5f       	subi	r20, 0xFF	; 255
    1132:	5f 4f       	sbci	r21, 0xFF	; 255
    1134:	0e 94 3c 0c 	call	0x1878	; 0x1878 <get_parameter>
    1138:	18 2f       	mov	r17, r24
    113a:	88 23       	and	r24, r24
    113c:	09 f4       	brne	.+2      	; 0x1140 <handle_write+0x40>
    113e:	64 c0       	rjmp	.+200    	; 0x1208 <handle_write+0x108>
	
	if (strcmp(par, RW_DEVEUI)==0)
    1140:	ce 01       	movw	r24, r28
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	6c 01       	movw	r12, r24
    1146:	20 e8       	ldi	r18, 0x80	; 128
    1148:	e2 2e       	mov	r14, r18
    114a:	2c e2       	ldi	r18, 0x2C	; 44
    114c:	33 e0       	ldi	r19, 0x03	; 3
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	8e 2d       	mov	r24, r14
    1152:	b6 01       	movw	r22, r12
    1154:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
    1158:	89 2b       	or	r24, r25
    115a:	39 f4       	brne	.+14     	; 0x116a <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    115c:	a5 01       	movw	r20, r10
    115e:	88 2d       	mov	r24, r8
    1160:	b3 01       	movw	r22, r6
    1162:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <write_deveui>
    1166:	18 2f       	mov	r17, r24
    1168:	4f c0       	rjmp	.+158    	; 0x1208 <handle_write+0x108>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    116a:	23 e3       	ldi	r18, 0x33	; 51
    116c:	33 e0       	ldi	r19, 0x03	; 3
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	8e 2d       	mov	r24, r14
    1172:	b6 01       	movw	r22, r12
    1174:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
    1178:	89 2b       	or	r24, r25
    117a:	39 f4       	brne	.+14     	; 0x118a <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    117c:	a5 01       	movw	r20, r10
    117e:	88 2d       	mov	r24, r8
    1180:	b3 01       	movw	r22, r6
    1182:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <write_appeui>
    1186:	18 2f       	mov	r17, r24
    1188:	3f c0       	rjmp	.+126    	; 0x1208 <handle_write+0x108>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    118a:	2a e3       	ldi	r18, 0x3A	; 58
    118c:	33 e0       	ldi	r19, 0x03	; 3
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	8e 2d       	mov	r24, r14
    1192:	b6 01       	movw	r22, r12
    1194:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
    1198:	89 2b       	or	r24, r25
    119a:	39 f4       	brne	.+14     	; 0x11aa <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    119c:	a5 01       	movw	r20, r10
    119e:	88 2d       	mov	r24, r8
    11a0:	b3 01       	movw	r22, r6
    11a2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <write_appkey>
    11a6:	18 2f       	mov	r17, r24
    11a8:	2f c0       	rjmp	.+94     	; 0x1208 <handle_write+0x108>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    11aa:	21 e4       	ldi	r18, 0x41	; 65
    11ac:	33 e0       	ldi	r19, 0x03	; 3
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	8e 2d       	mov	r24, r14
    11b2:	b6 01       	movw	r22, r12
    11b4:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
    11b8:	89 2b       	or	r24, r25
    11ba:	39 f4       	brne	.+14     	; 0x11ca <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    11bc:	a5 01       	movw	r20, r10
    11be:	88 2d       	mov	r24, r8
    11c0:	b3 01       	movw	r22, r6
    11c2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <write_PPM_factor>
    11c6:	18 2f       	mov	r17, r24
    11c8:	1f c0       	rjmp	.+62     	; 0x1208 <handle_write+0x108>
	}
	else if(strcmp(par, RW_RRL)==0)
    11ca:	2b e4       	ldi	r18, 0x4B	; 75
    11cc:	33 e0       	ldi	r19, 0x03	; 3
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	8e 2d       	mov	r24, r14
    11d2:	b6 01       	movw	r22, r12
    11d4:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
    11d8:	89 2b       	or	r24, r25
    11da:	39 f4       	brne	.+14     	; 0x11ea <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    11dc:	a5 01       	movw	r20, r10
    11de:	88 2d       	mov	r24, r8
    11e0:	b3 01       	movw	r22, r6
    11e2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <write_RRL>
    11e6:	18 2f       	mov	r17, r24
    11e8:	0f c0       	rjmp	.+30     	; 0x1208 <handle_write+0x108>
	}
	else if(strcmp(par, RW_VCC)==0)
    11ea:	20 e5       	ldi	r18, 0x50	; 80
    11ec:	33 e0       	ldi	r19, 0x03	; 3
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	8e 2d       	mov	r24, r14
    11f2:	b6 01       	movw	r22, r12
    11f4:	0e 94 12 11 	call	0x2224	; 0x2224 <strcmp>
    11f8:	89 2b       	or	r24, r25
    11fa:	31 f4       	brne	.+12     	; 0x1208 <handle_write+0x108>
	{
		return write_VCC(cmd, res);
    11fc:	a5 01       	movw	r20, r10
    11fe:	88 2d       	mov	r24, r8
    1200:	b3 01       	movw	r22, r6
    1202:	0e 94 19 10 	call	0x2032	; 0x2032 <write_VCC>
    1206:	18 2f       	mov	r17, r24
	}
	return true;
}
    1208:	81 2f       	mov	r24, r17
    120a:	64 96       	adiw	r28, 0x14	; 20
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	bf 90       	pop	r11
    1224:	af 90       	pop	r10
    1226:	8f 90       	pop	r8
    1228:	7f 90       	pop	r7
    122a:	6f 90       	pop	r6
    122c:	08 95       	ret

Disassembly of section .text.count_parameters:

00001e5e <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    1e5e:	6f 92       	push	r6
    1e60:	7f 92       	push	r7
    1e62:	8f 92       	push	r8
    1e64:	cf 92       	push	r12
    1e66:	df 92       	push	r13
    1e68:	ef 92       	push	r14
    1e6a:	3b 01       	movw	r6, r22
    1e6c:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    1e6e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    1e72:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    1e78:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    1e7a:	10 c0       	rjmp	.+32     	; 0x1e9c <count_parameters+0x3e>
	{
		if(src[i]==' '){
    1e7c:	e8 2c       	mov	r14, r8
    1e7e:	63 01       	movw	r12, r6
    1e80:	c2 0e       	add	r12, r18
    1e82:	d3 1e       	adc	r13, r19
    1e84:	e1 1c       	adc	r14, r1
    1e86:	37 fd       	sbrc	r19, 7
    1e88:	ea 94       	dec	r14
    1e8a:	f6 01       	movw	r30, r12
    1e8c:	94 91       	lpm	r25, Z
    1e8e:	e7 fc       	sbrc	r14, 7
    1e90:	90 81       	ld	r25, Z
    1e92:	90 32       	cpi	r25, 0x20	; 32
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <count_parameters+0x3a>
			cnt++;
    1e96:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    1e98:	2f 5f       	subi	r18, 0xFF	; 255
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	26 17       	cp	r18, r22
    1e9e:	37 07       	cpc	r19, r23
    1ea0:	68 f3       	brcs	.-38     	; 0x1e7c <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	8f 90       	pop	r8
    1eaa:	7f 90       	pop	r7
    1eac:	6f 90       	pop	r6
    1eae:	08 95       	ret

Disassembly of section .text.par_index:

00001cd6 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    1cd6:	cf 92       	push	r12
    1cd8:	df 92       	push	r13
    1cda:	ef 92       	push	r14
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    1ce4:	44 23       	and	r20, r20
    1ce6:	29 f1       	breq	.+74     	; 0x1d32 <par_index+0x5c>
    1ce8:	04 2f       	mov	r16, r20
    1cea:	6b 01       	movw	r12, r22
    1cec:	e8 2e       	mov	r14, r24
    1cee:	c0 e0       	ldi	r28, 0x00	; 0
    1cf0:	d0 e0       	ldi	r29, 0x00	; 0
    1cf2:	10 e0       	ldi	r17, 0x00	; 0
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    1cf6:	ae 2d       	mov	r26, r14
    1cf8:	c6 01       	movw	r24, r12
    1cfa:	8c 0f       	add	r24, r28
    1cfc:	9d 1f       	adc	r25, r29
    1cfe:	a1 1d       	adc	r26, r1
    1d00:	d7 fd       	sbrc	r29, 7
    1d02:	aa 95       	dec	r26
    1d04:	fc 01       	movw	r30, r24
    1d06:	84 91       	lpm	r24, Z
    1d08:	a7 fd       	sbrc	r26, 7
    1d0a:	80 81       	ld	r24, Z
    1d0c:	80 32       	cpi	r24, 0x20	; 32
    1d0e:	31 f4       	brne	.+12     	; 0x1d1c <par_index+0x46>
			cnt++;
    1d10:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    1d12:	01 13       	cpse	r16, r17
    1d14:	03 c0       	rjmp	.+6      	; 0x1d1c <par_index+0x46>
				return i+1;
    1d16:	ce 01       	movw	r24, r28
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	0d c0       	rjmp	.+26     	; 0x1d36 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    1d1c:	21 96       	adiw	r28, 0x01	; 1
    1d1e:	8e 2d       	mov	r24, r14
    1d20:	b6 01       	movw	r22, r12
    1d22:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    1d26:	c8 17       	cp	r28, r24
    1d28:	d9 07       	cpc	r29, r25
    1d2a:	28 f3       	brcs	.-54     	; 0x1cf6 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ef 90       	pop	r14
    1d40:	df 90       	pop	r13
    1d42:	cf 90       	pop	r12
    1d44:	08 95       	ret

Disassembly of section .text.get_parameter:

00001878 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    1878:	8f 92       	push	r8
    187a:	9f 92       	push	r9
    187c:	af 92       	push	r10
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	6b 01       	movw	r12, r22
    1890:	e8 2e       	mov	r14, r24
    1892:	ea 01       	movw	r28, r20
    1894:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    1896:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <count_parameters>
	if(pars<parNo) return false;
    189a:	8f 15       	cp	r24, r15
    189c:	58 f1       	brcs	.+86     	; 0x18f4 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    189e:	8e 2d       	mov	r24, r14
    18a0:	b6 01       	movw	r22, r12
    18a2:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    18a6:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    18a8:	4f 2d       	mov	r20, r15
    18aa:	8e 2d       	mov	r24, r14
    18ac:	b6 01       	movw	r22, r12
    18ae:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <par_index>
	uint8_t parLen=0;
    18b2:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    18b4:	15 c0       	rjmp	.+42     	; 0x18e0 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    18b6:	46 01       	movw	r8, r12
    18b8:	ae 2c       	mov	r10, r14
    18ba:	82 0e       	add	r8, r18
    18bc:	93 1e       	adc	r9, r19
    18be:	a1 1c       	adc	r10, r1
    18c0:	37 fd       	sbrc	r19, 7
    18c2:	aa 94       	dec	r10
    18c4:	4a 2d       	mov	r20, r10
    18c6:	94 01       	movw	r18, r8
    18c8:	f4 01       	movw	r30, r8
    18ca:	24 91       	lpm	r18, Z
    18cc:	47 fd       	sbrc	r20, 7
    18ce:	20 81       	ld	r18, Z
    18d0:	20 32       	cpi	r18, 0x20	; 32
    18d2:	59 f0       	breq	.+22     	; 0x18ea <get_parameter+0x72>
		par[parLen++]=src[i];
    18d4:	fe 01       	movw	r30, r28
    18d6:	e9 0f       	add	r30, r25
    18d8:	f1 1d       	adc	r31, r1
    18da:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    18dc:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    18de:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	20 17       	cp	r18, r16
    18e6:	31 07       	cpc	r19, r17
    18e8:	30 f3       	brcs	.-52     	; 0x18b6 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    18ea:	c9 0f       	add	r28, r25
    18ec:	d1 1d       	adc	r29, r1
    18ee:	18 82       	st	Y, r1
	
	return true;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    18f4:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	1f 91       	pop	r17
    18fc:	0f 91       	pop	r16
    18fe:	ff 90       	pop	r15
    1900:	ef 90       	pop	r14
    1902:	df 90       	pop	r13
    1904:	cf 90       	pop	r12
    1906:	af 90       	pop	r10
    1908:	9f 90       	pop	r9
    190a:	8f 90       	pop	r8
    190c:	08 95       	ret

Disassembly of section .text.get_decimal:

0000172c <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    173e:	10 e0       	ldi	r17, 0x00	; 0
    1740:	08 c0       	rjmp	.+16     	; 0x1752 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    1742:	cc 0d       	add	r28, r12
    1744:	dd 1d       	adc	r29, r13
    1746:	88 81       	ld	r24, Y
    1748:	8e 32       	cpi	r24, 0x2E	; 46
    174a:	11 f4       	brne	.+4      	; 0x1750 <get_decimal+0x24>
			index=i+1;
    174c:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    174e:	0c c0       	rjmp	.+24     	; 0x1768 <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    1750:	1f 5f       	subi	r17, 0xFF	; 255
    1752:	c1 2f       	mov	r28, r17
    1754:	d0 e0       	ldi	r29, 0x00	; 0
    1756:	b6 01       	movw	r22, r12
    1758:	80 e8       	ldi	r24, 0x80	; 128
    175a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	c8 17       	cp	r28, r24
    1762:	d9 07       	cpc	r29, r25
    1764:	70 f3       	brcs	.-36     	; 0x1742 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    1766:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    1768:	11 23       	and	r17, r17
    176a:	71 f1       	breq	.+92     	; 0x17c8 <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    176c:	c1 0e       	add	r12, r17
    176e:	d1 1c       	adc	r13, r1
    1770:	80 e8       	ldi	r24, 0x80	; 128
    1772:	e8 2e       	mov	r14, r24
    1774:	8e 2d       	mov	r24, r14
    1776:	b6 01       	movw	r22, r12
    1778:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    177c:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    177e:	8e 2d       	mov	r24, r14
    1780:	b6 01       	movw	r22, r12
    1782:	0e 94 c4 14 	call	0x2988	; 0x2988 <atoi>
    1786:	8c 01       	movw	r16, r24
	float divisor=1;
    1788:	0f 2e       	mov	r0, r31
    178a:	c1 2c       	mov	r12, r1
    178c:	d1 2c       	mov	r13, r1
    178e:	f0 e8       	ldi	r31, 0x80	; 128
    1790:	ef 2e       	mov	r14, r31
    1792:	ff e3       	ldi	r31, 0x3F	; 63
    1794:	ff 2e       	mov	r15, r31
    1796:	f0 2d       	mov	r31, r0
	
	while(len>0){
    1798:	0b c0       	rjmp	.+22     	; 0x17b0 <get_decimal+0x84>
		divisor*=10;
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	c7 01       	movw	r24, r14
    17a4:	b6 01       	movw	r22, r12
    17a6:	0e 94 c0 14 	call	0x2980	; 0x2980 <__mulsf3>
    17aa:	6b 01       	movw	r12, r22
    17ac:	7c 01       	movw	r14, r24
		len--;
    17ae:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    17b0:	c1 11       	cpse	r28, r1
    17b2:	f3 cf       	rjmp	.-26     	; 0x179a <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    17b4:	b8 01       	movw	r22, r16
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__floatunsisf>
    17be:	a7 01       	movw	r20, r14
    17c0:	96 01       	movw	r18, r12
    17c2:	0e 94 bc 14 	call	0x2978	; 0x2978 <__divsf3>
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	df 90       	pop	r13
    17dc:	cf 90       	pop	r12
    17de:	08 95       	ret

Disassembly of section .text.str2flaot:

00001f4c <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    1f4c:	cf 92       	push	r12
    1f4e:	df 92       	push	r13
    1f50:	ef 92       	push	r14
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    1f5e:	bc 01       	movw	r22, r24
    1f60:	80 e8       	ldi	r24, 0x80	; 128
    1f62:	0e 94 c4 14 	call	0x2988	; 0x2988 <atoi>
    1f66:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    1f68:	c8 01       	movw	r24, r16
    1f6a:	0e 94 96 0b 	call	0x172c	; 0x172c <get_decimal>
    1f6e:	6b 01       	movw	r12, r22
    1f70:	7c 01       	movw	r14, r24
	return intVal+deci;
    1f72:	be 01       	movw	r22, r28
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__floatunsisf>
    1f7c:	9b 01       	movw	r18, r22
    1f7e:	ac 01       	movw	r20, r24
    1f80:	c7 01       	movw	r24, r14
    1f82:	b6 01       	movw	r22, r12
    1f84:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__addsf3>
	
	
}
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	ff 90       	pop	r15
    1f92:	ef 90       	pop	r14
    1f94:	df 90       	pop	r13
    1f96:	cf 90       	pop	r12
    1f98:	08 95       	ret

Disassembly of section .text.is_float:

00001db0 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    1db0:	ef 92       	push	r14
    1db2:	ff 92       	push	r15
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    1dbe:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    1dc0:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    1dc2:	0d c0       	rjmp	.+26     	; 0x1dde <is_float+0x2e>
	{
		if(str[i]=='.'){
    1dc4:	ce 0d       	add	r28, r14
    1dc6:	df 1d       	adc	r29, r15
    1dc8:	88 81       	ld	r24, Y
    1dca:	8e 32       	cpi	r24, 0x2E	; 46
    1dcc:	21 f4       	brne	.+8      	; 0x1dd6 <is_float+0x26>
			if (got_dot)
    1dce:	01 11       	cpse	r16, r1
    1dd0:	11 c0       	rjmp	.+34     	; 0x1df4 <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    1dd2:	01 e0       	ldi	r16, 0x01	; 1
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    1dd6:	80 53       	subi	r24, 0x30	; 48
    1dd8:	8a 30       	cpi	r24, 0x0A	; 10
    1dda:	70 f4       	brcc	.+28     	; 0x1df8 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    1ddc:	1f 5f       	subi	r17, 0xFF	; 255
    1dde:	c1 2f       	mov	r28, r17
    1de0:	d0 e0       	ldi	r29, 0x00	; 0
    1de2:	b7 01       	movw	r22, r14
    1de4:	80 e8       	ldi	r24, 0x80	; 128
    1de6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <strlen>
    1dea:	c8 17       	cp	r28, r24
    1dec:	d9 07       	cpc	r29, r25
    1dee:	50 f3       	brcs	.-44     	; 0x1dc4 <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	03 c0       	rjmp	.+6      	; 0x1dfa <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    1df8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	ff 90       	pop	r15
    1e04:	ef 90       	pop	r14
    1e06:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000028e6 <__subsf3>:
    28e6:	50 58       	subi	r21, 0x80	; 128

000028e8 <__addsf3>:
    28e8:	bb 27       	eor	r27, r27
    28ea:	aa 27       	eor	r26, r26
    28ec:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3x>
    28f0:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000015a2 <__addsf3x>:
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <__addsf3x+0x24>
    15a4:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fp_pscA>
    15a8:	38 f0       	brcs	.+14     	; 0x15b8 <__addsf3x+0x16>
    15aa:	0e 94 81 14 	call	0x2902	; 0x2902 <__fp_pscB>
    15ae:	20 f0       	brcs	.+8      	; 0x15b8 <__addsf3x+0x16>
    15b0:	39 f4       	brne	.+14     	; 0x15c0 <__addsf3x+0x1e>
    15b2:	9f 3f       	cpi	r25, 0xFF	; 255
    15b4:	19 f4       	brne	.+6      	; 0x15bc <__addsf3x+0x1a>
    15b6:	26 f4       	brtc	.+8      	; 0x15c0 <__addsf3x+0x1e>
    15b8:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__fp_nan>
    15bc:	0e f4       	brtc	.+2      	; 0x15c0 <__addsf3x+0x1e>
    15be:	e0 95       	com	r30
    15c0:	e7 fb       	bst	r30, 7
    15c2:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__fp_inf>
    15c6:	e9 2f       	mov	r30, r25
    15c8:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fp_split3>
    15cc:	58 f3       	brcs	.-42     	; 0x15a4 <__addsf3x+0x2>
    15ce:	ba 17       	cp	r27, r26
    15d0:	62 07       	cpc	r22, r18
    15d2:	73 07       	cpc	r23, r19
    15d4:	84 07       	cpc	r24, r20
    15d6:	95 07       	cpc	r25, r21
    15d8:	20 f0       	brcs	.+8      	; 0x15e2 <__addsf3x+0x40>
    15da:	79 f4       	brne	.+30     	; 0x15fa <__addsf3x+0x58>
    15dc:	a6 f5       	brtc	.+104    	; 0x1646 <__addsf3x+0xa4>
    15de:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__fp_zero>
    15e2:	0e f4       	brtc	.+2      	; 0x15e6 <__addsf3x+0x44>
    15e4:	e0 95       	com	r30
    15e6:	0b 2e       	mov	r0, r27
    15e8:	ba 2f       	mov	r27, r26
    15ea:	a0 2d       	mov	r26, r0
    15ec:	0b 01       	movw	r0, r22
    15ee:	b9 01       	movw	r22, r18
    15f0:	90 01       	movw	r18, r0
    15f2:	0c 01       	movw	r0, r24
    15f4:	ca 01       	movw	r24, r20
    15f6:	a0 01       	movw	r20, r0
    15f8:	11 24       	eor	r1, r1
    15fa:	ff 27       	eor	r31, r31
    15fc:	59 1b       	sub	r21, r25
    15fe:	99 f0       	breq	.+38     	; 0x1626 <__addsf3x+0x84>
    1600:	59 3f       	cpi	r21, 0xF9	; 249
    1602:	50 f4       	brcc	.+20     	; 0x1618 <__addsf3x+0x76>
    1604:	50 3e       	cpi	r21, 0xE0	; 224
    1606:	68 f1       	brcs	.+90     	; 0x1662 <__addsf3x+0xc0>
    1608:	1a 16       	cp	r1, r26
    160a:	f0 40       	sbci	r31, 0x00	; 0
    160c:	a2 2f       	mov	r26, r18
    160e:	23 2f       	mov	r18, r19
    1610:	34 2f       	mov	r19, r20
    1612:	44 27       	eor	r20, r20
    1614:	58 5f       	subi	r21, 0xF8	; 248
    1616:	f3 cf       	rjmp	.-26     	; 0x15fe <__addsf3x+0x5c>
    1618:	46 95       	lsr	r20
    161a:	37 95       	ror	r19
    161c:	27 95       	ror	r18
    161e:	a7 95       	ror	r26
    1620:	f0 40       	sbci	r31, 0x00	; 0
    1622:	53 95       	inc	r21
    1624:	c9 f7       	brne	.-14     	; 0x1618 <__addsf3x+0x76>
    1626:	7e f4       	brtc	.+30     	; 0x1646 <__addsf3x+0xa4>
    1628:	1f 16       	cp	r1, r31
    162a:	ba 0b       	sbc	r27, r26
    162c:	62 0b       	sbc	r22, r18
    162e:	73 0b       	sbc	r23, r19
    1630:	84 0b       	sbc	r24, r20
    1632:	ba f0       	brmi	.+46     	; 0x1662 <__addsf3x+0xc0>
    1634:	91 50       	subi	r25, 0x01	; 1
    1636:	a1 f0       	breq	.+40     	; 0x1660 <__addsf3x+0xbe>
    1638:	ff 0f       	add	r31, r31
    163a:	bb 1f       	adc	r27, r27
    163c:	66 1f       	adc	r22, r22
    163e:	77 1f       	adc	r23, r23
    1640:	88 1f       	adc	r24, r24
    1642:	c2 f7       	brpl	.-16     	; 0x1634 <__addsf3x+0x92>
    1644:	0e c0       	rjmp	.+28     	; 0x1662 <__addsf3x+0xc0>
    1646:	ba 0f       	add	r27, r26
    1648:	62 1f       	adc	r22, r18
    164a:	73 1f       	adc	r23, r19
    164c:	84 1f       	adc	r24, r20
    164e:	48 f4       	brcc	.+18     	; 0x1662 <__addsf3x+0xc0>
    1650:	87 95       	ror	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b7 95       	ror	r27
    1658:	f7 95       	ror	r31
    165a:	9e 3f       	cpi	r25, 0xFE	; 254
    165c:	08 f0       	brcs	.+2      	; 0x1660 <__addsf3x+0xbe>
    165e:	b0 cf       	rjmp	.-160    	; 0x15c0 <__addsf3x+0x1e>
    1660:	93 95       	inc	r25
    1662:	88 0f       	add	r24, r24
    1664:	08 f0       	brcs	.+2      	; 0x1668 <__addsf3x+0xc6>
    1666:	99 27       	eor	r25, r25
    1668:	ee 0f       	add	r30, r30
    166a:	97 95       	ror	r25
    166c:	87 95       	ror	r24
    166e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002978 <__divsf3>:
    2978:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__divsf3x>
    297c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000013f0 <__divsf3x>:
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <__divsf3x+0x22>
    13f2:	0e 94 81 14 	call	0x2902	; 0x2902 <__fp_pscB>
    13f6:	58 f0       	brcs	.+22     	; 0x140e <__divsf3x+0x1e>
    13f8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fp_pscA>
    13fc:	40 f0       	brcs	.+16     	; 0x140e <__divsf3x+0x1e>
    13fe:	29 f4       	brne	.+10     	; 0x140a <__divsf3x+0x1a>
    1400:	5f 3f       	cpi	r21, 0xFF	; 255
    1402:	29 f0       	breq	.+10     	; 0x140e <__divsf3x+0x1e>
    1404:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__fp_inf>
    1408:	51 11       	cpse	r21, r1
    140a:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__fp_szero>
    140e:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__fp_nan>
    1412:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fp_split3>
    1416:	68 f3       	brcs	.-38     	; 0x13f2 <__divsf3x+0x2>

00001418 <__divsf3_pse>:
    1418:	99 23       	and	r25, r25
    141a:	b1 f3       	breq	.-20     	; 0x1408 <__divsf3x+0x18>
    141c:	55 23       	and	r21, r21
    141e:	91 f3       	breq	.-28     	; 0x1404 <__divsf3x+0x14>
    1420:	95 1b       	sub	r25, r21
    1422:	55 0b       	sbc	r21, r21
    1424:	bb 27       	eor	r27, r27
    1426:	aa 27       	eor	r26, r26
    1428:	62 17       	cp	r22, r18
    142a:	73 07       	cpc	r23, r19
    142c:	84 07       	cpc	r24, r20
    142e:	38 f0       	brcs	.+14     	; 0x143e <__divsf3_pse+0x26>
    1430:	9f 5f       	subi	r25, 0xFF	; 255
    1432:	5f 4f       	sbci	r21, 0xFF	; 255
    1434:	22 0f       	add	r18, r18
    1436:	33 1f       	adc	r19, r19
    1438:	44 1f       	adc	r20, r20
    143a:	aa 1f       	adc	r26, r26
    143c:	a9 f3       	breq	.-22     	; 0x1428 <__divsf3_pse+0x10>
    143e:	35 d0       	rcall	.+106    	; 0x14aa <__divsf3_pse+0x92>
    1440:	0e 2e       	mov	r0, r30
    1442:	3a f0       	brmi	.+14     	; 0x1452 <__divsf3_pse+0x3a>
    1444:	e0 e8       	ldi	r30, 0x80	; 128
    1446:	32 d0       	rcall	.+100    	; 0x14ac <__divsf3_pse+0x94>
    1448:	91 50       	subi	r25, 0x01	; 1
    144a:	50 40       	sbci	r21, 0x00	; 0
    144c:	e6 95       	lsr	r30
    144e:	00 1c       	adc	r0, r0
    1450:	ca f7       	brpl	.-14     	; 0x1444 <__divsf3_pse+0x2c>
    1452:	2b d0       	rcall	.+86     	; 0x14aa <__divsf3_pse+0x92>
    1454:	fe 2f       	mov	r31, r30
    1456:	29 d0       	rcall	.+82     	; 0x14aa <__divsf3_pse+0x92>
    1458:	66 0f       	add	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	88 1f       	adc	r24, r24
    145e:	bb 1f       	adc	r27, r27
    1460:	26 17       	cp	r18, r22
    1462:	37 07       	cpc	r19, r23
    1464:	48 07       	cpc	r20, r24
    1466:	ab 07       	cpc	r26, r27
    1468:	b0 e8       	ldi	r27, 0x80	; 128
    146a:	09 f0       	breq	.+2      	; 0x146e <__divsf3_pse+0x56>
    146c:	bb 0b       	sbc	r27, r27
    146e:	80 2d       	mov	r24, r0
    1470:	bf 01       	movw	r22, r30
    1472:	ff 27       	eor	r31, r31
    1474:	93 58       	subi	r25, 0x83	; 131
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	3a f0       	brmi	.+14     	; 0x1488 <__divsf3_pse+0x70>
    147a:	9e 3f       	cpi	r25, 0xFE	; 254
    147c:	51 05       	cpc	r21, r1
    147e:	78 f0       	brcs	.+30     	; 0x149e <__divsf3_pse+0x86>
    1480:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__fp_inf>
    1484:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__fp_szero>
    1488:	5f 3f       	cpi	r21, 0xFF	; 255
    148a:	e4 f3       	brlt	.-8      	; 0x1484 <__divsf3_pse+0x6c>
    148c:	98 3e       	cpi	r25, 0xE8	; 232
    148e:	d4 f3       	brlt	.-12     	; 0x1484 <__divsf3_pse+0x6c>
    1490:	86 95       	lsr	r24
    1492:	77 95       	ror	r23
    1494:	67 95       	ror	r22
    1496:	b7 95       	ror	r27
    1498:	f7 95       	ror	r31
    149a:	9f 5f       	subi	r25, 0xFF	; 255
    149c:	c9 f7       	brne	.-14     	; 0x1490 <__divsf3_pse+0x78>
    149e:	88 0f       	add	r24, r24
    14a0:	91 1d       	adc	r25, r1
    14a2:	96 95       	lsr	r25
    14a4:	87 95       	ror	r24
    14a6:	97 f9       	bld	r25, 7
    14a8:	08 95       	ret
    14aa:	e1 e0       	ldi	r30, 0x01	; 1
    14ac:	66 0f       	add	r22, r22
    14ae:	77 1f       	adc	r23, r23
    14b0:	88 1f       	adc	r24, r24
    14b2:	bb 1f       	adc	r27, r27
    14b4:	62 17       	cp	r22, r18
    14b6:	73 07       	cpc	r23, r19
    14b8:	84 07       	cpc	r24, r20
    14ba:	ba 07       	cpc	r27, r26
    14bc:	20 f0       	brcs	.+8      	; 0x14c6 <__divsf3_pse+0xae>
    14be:	62 1b       	sub	r22, r18
    14c0:	73 0b       	sbc	r23, r19
    14c2:	84 0b       	sbc	r24, r20
    14c4:	ba 0b       	sbc	r27, r26
    14c6:	ee 1f       	adc	r30, r30
    14c8:	88 f7       	brcc	.-30     	; 0x14ac <__divsf3_pse+0x94>
    14ca:	e0 95       	com	r30
    14cc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001998 <__floatunsisf>:
    1998:	e8 94       	clt
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <__floatsisf+0x12>

0000199c <__floatsisf>:
    199c:	97 fb       	bst	r25, 7
    199e:	3e f4       	brtc	.+14     	; 0x19ae <__floatsisf+0x12>
    19a0:	90 95       	com	r25
    19a2:	80 95       	com	r24
    19a4:	70 95       	com	r23
    19a6:	61 95       	neg	r22
    19a8:	7f 4f       	sbci	r23, 0xFF	; 255
    19aa:	8f 4f       	sbci	r24, 0xFF	; 255
    19ac:	9f 4f       	sbci	r25, 0xFF	; 255
    19ae:	99 23       	and	r25, r25
    19b0:	a9 f0       	breq	.+42     	; 0x19dc <__floatsisf+0x40>
    19b2:	f9 2f       	mov	r31, r25
    19b4:	96 e9       	ldi	r25, 0x96	; 150
    19b6:	bb 27       	eor	r27, r27
    19b8:	93 95       	inc	r25
    19ba:	f6 95       	lsr	r31
    19bc:	87 95       	ror	r24
    19be:	77 95       	ror	r23
    19c0:	67 95       	ror	r22
    19c2:	b7 95       	ror	r27
    19c4:	f1 11       	cpse	r31, r1
    19c6:	f8 cf       	rjmp	.-16     	; 0x19b8 <__floatsisf+0x1c>
    19c8:	fa f4       	brpl	.+62     	; 0x1a08 <__floatsisf+0x6c>
    19ca:	bb 0f       	add	r27, r27
    19cc:	11 f4       	brne	.+4      	; 0x19d2 <__floatsisf+0x36>
    19ce:	60 ff       	sbrs	r22, 0
    19d0:	1b c0       	rjmp	.+54     	; 0x1a08 <__floatsisf+0x6c>
    19d2:	6f 5f       	subi	r22, 0xFF	; 255
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	8f 4f       	sbci	r24, 0xFF	; 255
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	16 c0       	rjmp	.+44     	; 0x1a08 <__floatsisf+0x6c>
    19dc:	88 23       	and	r24, r24
    19de:	11 f0       	breq	.+4      	; 0x19e4 <__floatsisf+0x48>
    19e0:	96 e9       	ldi	r25, 0x96	; 150
    19e2:	11 c0       	rjmp	.+34     	; 0x1a06 <__floatsisf+0x6a>
    19e4:	77 23       	and	r23, r23
    19e6:	21 f0       	breq	.+8      	; 0x19f0 <__floatsisf+0x54>
    19e8:	9e e8       	ldi	r25, 0x8E	; 142
    19ea:	87 2f       	mov	r24, r23
    19ec:	76 2f       	mov	r23, r22
    19ee:	05 c0       	rjmp	.+10     	; 0x19fa <__floatsisf+0x5e>
    19f0:	66 23       	and	r22, r22
    19f2:	71 f0       	breq	.+28     	; 0x1a10 <__floatsisf+0x74>
    19f4:	96 e8       	ldi	r25, 0x86	; 134
    19f6:	86 2f       	mov	r24, r22
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	2a f0       	brmi	.+10     	; 0x1a08 <__floatsisf+0x6c>
    19fe:	9a 95       	dec	r25
    1a00:	66 0f       	add	r22, r22
    1a02:	77 1f       	adc	r23, r23
    1a04:	88 1f       	adc	r24, r24
    1a06:	da f7       	brpl	.-10     	; 0x19fe <__floatsisf+0x62>
    1a08:	88 0f       	add	r24, r24
    1a0a:	96 95       	lsr	r25
    1a0c:	87 95       	ror	r24
    1a0e:	97 f9       	bld	r25, 7
    1a10:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000293a <__fp_inf>:
    293a:	97 f9       	bld	r25, 7
    293c:	9f 67       	ori	r25, 0x7F	; 127
    293e:	80 e8       	ldi	r24, 0x80	; 128
    2940:	70 e0       	ldi	r23, 0x00	; 0
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000299c <__fp_nan>:
    299c:	9f ef       	ldi	r25, 0xFF	; 255
    299e:	80 ec       	ldi	r24, 0xC0	; 192
    29a0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000028f4 <__fp_pscA>:
    28f4:	00 24       	eor	r0, r0
    28f6:	0a 94       	dec	r0
    28f8:	16 16       	cp	r1, r22
    28fa:	17 06       	cpc	r1, r23
    28fc:	18 06       	cpc	r1, r24
    28fe:	09 06       	cpc	r0, r25
    2900:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002902 <__fp_pscB>:
    2902:	00 24       	eor	r0, r0
    2904:	0a 94       	dec	r0
    2906:	12 16       	cp	r1, r18
    2908:	13 06       	cpc	r1, r19
    290a:	14 06       	cpc	r1, r20
    290c:	05 06       	cpc	r0, r21
    290e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000026a2 <__fp_round>:
    26a2:	09 2e       	mov	r0, r25
    26a4:	03 94       	inc	r0
    26a6:	00 0c       	add	r0, r0
    26a8:	11 f4       	brne	.+4      	; 0x26ae <__fp_round+0xc>
    26aa:	88 23       	and	r24, r24
    26ac:	52 f0       	brmi	.+20     	; 0x26c2 <__fp_round+0x20>
    26ae:	bb 0f       	add	r27, r27
    26b0:	40 f4       	brcc	.+16     	; 0x26c2 <__fp_round+0x20>
    26b2:	bf 2b       	or	r27, r31
    26b4:	11 f4       	brne	.+4      	; 0x26ba <__fp_round+0x18>
    26b6:	60 ff       	sbrs	r22, 0
    26b8:	04 c0       	rjmp	.+8      	; 0x26c2 <__fp_round+0x20>
    26ba:	6f 5f       	subi	r22, 0xFF	; 255
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	8f 4f       	sbci	r24, 0xFF	; 255
    26c0:	9f 4f       	sbci	r25, 0xFF	; 255
    26c2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002158 <__fp_split3>:
    2158:	57 fd       	sbrc	r21, 7
    215a:	90 58       	subi	r25, 0x80	; 128
    215c:	44 0f       	add	r20, r20
    215e:	55 1f       	adc	r21, r21
    2160:	59 f0       	breq	.+22     	; 0x2178 <__fp_splitA+0x10>
    2162:	5f 3f       	cpi	r21, 0xFF	; 255
    2164:	71 f0       	breq	.+28     	; 0x2182 <__fp_splitA+0x1a>
    2166:	47 95       	ror	r20

00002168 <__fp_splitA>:
    2168:	88 0f       	add	r24, r24
    216a:	97 fb       	bst	r25, 7
    216c:	99 1f       	adc	r25, r25
    216e:	61 f0       	breq	.+24     	; 0x2188 <__fp_splitA+0x20>
    2170:	9f 3f       	cpi	r25, 0xFF	; 255
    2172:	79 f0       	breq	.+30     	; 0x2192 <__fp_splitA+0x2a>
    2174:	87 95       	ror	r24
    2176:	08 95       	ret
    2178:	12 16       	cp	r1, r18
    217a:	13 06       	cpc	r1, r19
    217c:	14 06       	cpc	r1, r20
    217e:	55 1f       	adc	r21, r21
    2180:	f2 cf       	rjmp	.-28     	; 0x2166 <__fp_split3+0xe>
    2182:	46 95       	lsr	r20
    2184:	f1 df       	rcall	.-30     	; 0x2168 <__fp_splitA>
    2186:	08 c0       	rjmp	.+16     	; 0x2198 <__fp_splitA+0x30>
    2188:	16 16       	cp	r1, r22
    218a:	17 06       	cpc	r1, r23
    218c:	18 06       	cpc	r1, r24
    218e:	99 1f       	adc	r25, r25
    2190:	f1 cf       	rjmp	.-30     	; 0x2174 <__fp_splitA+0xc>
    2192:	86 95       	lsr	r24
    2194:	71 05       	cpc	r23, r1
    2196:	61 05       	cpc	r22, r1
    2198:	08 94       	sec
    219a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002910 <__fp_zero>:
    2910:	e8 94       	clt

00002912 <__fp_szero>:
    2912:	bb 27       	eor	r27, r27
    2914:	66 27       	eor	r22, r22
    2916:	77 27       	eor	r23, r23
    2918:	cb 01       	movw	r24, r22
    291a:	97 f9       	bld	r25, 7
    291c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002980 <__mulsf3>:
    2980:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3x>
    2984:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000014ce <__mulsf3x>:
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <__mulsf3x+0x20>
    14d0:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fp_pscA>
    14d4:	38 f0       	brcs	.+14     	; 0x14e4 <__mulsf3x+0x16>
    14d6:	0e 94 81 14 	call	0x2902	; 0x2902 <__fp_pscB>
    14da:	20 f0       	brcs	.+8      	; 0x14e4 <__mulsf3x+0x16>
    14dc:	95 23       	and	r25, r21
    14de:	11 f0       	breq	.+4      	; 0x14e4 <__mulsf3x+0x16>
    14e0:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__fp_inf>
    14e4:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__fp_nan>
    14e8:	11 24       	eor	r1, r1
    14ea:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__fp_szero>
    14ee:	0e 94 ac 10 	call	0x2158	; 0x2158 <__fp_split3>
    14f2:	70 f3       	brcs	.-36     	; 0x14d0 <__mulsf3x+0x2>

000014f4 <__mulsf3_pse>:
    14f4:	95 9f       	mul	r25, r21
    14f6:	c1 f3       	breq	.-16     	; 0x14e8 <__mulsf3x+0x1a>
    14f8:	95 0f       	add	r25, r21
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	55 1f       	adc	r21, r21
    14fe:	62 9f       	mul	r22, r18
    1500:	f0 01       	movw	r30, r0
    1502:	72 9f       	mul	r23, r18
    1504:	bb 27       	eor	r27, r27
    1506:	f0 0d       	add	r31, r0
    1508:	b1 1d       	adc	r27, r1
    150a:	63 9f       	mul	r22, r19
    150c:	aa 27       	eor	r26, r26
    150e:	f0 0d       	add	r31, r0
    1510:	b1 1d       	adc	r27, r1
    1512:	aa 1f       	adc	r26, r26
    1514:	64 9f       	mul	r22, r20
    1516:	66 27       	eor	r22, r22
    1518:	b0 0d       	add	r27, r0
    151a:	a1 1d       	adc	r26, r1
    151c:	66 1f       	adc	r22, r22
    151e:	82 9f       	mul	r24, r18
    1520:	22 27       	eor	r18, r18
    1522:	b0 0d       	add	r27, r0
    1524:	a1 1d       	adc	r26, r1
    1526:	62 1f       	adc	r22, r18
    1528:	73 9f       	mul	r23, r19
    152a:	b0 0d       	add	r27, r0
    152c:	a1 1d       	adc	r26, r1
    152e:	62 1f       	adc	r22, r18
    1530:	83 9f       	mul	r24, r19
    1532:	a0 0d       	add	r26, r0
    1534:	61 1d       	adc	r22, r1
    1536:	22 1f       	adc	r18, r18
    1538:	74 9f       	mul	r23, r20
    153a:	33 27       	eor	r19, r19
    153c:	a0 0d       	add	r26, r0
    153e:	61 1d       	adc	r22, r1
    1540:	23 1f       	adc	r18, r19
    1542:	84 9f       	mul	r24, r20
    1544:	60 0d       	add	r22, r0
    1546:	21 1d       	adc	r18, r1
    1548:	82 2f       	mov	r24, r18
    154a:	76 2f       	mov	r23, r22
    154c:	6a 2f       	mov	r22, r26
    154e:	11 24       	eor	r1, r1
    1550:	9f 57       	subi	r25, 0x7F	; 127
    1552:	50 40       	sbci	r21, 0x00	; 0
    1554:	9a f0       	brmi	.+38     	; 0x157c <__mulsf3_pse+0x88>
    1556:	f1 f0       	breq	.+60     	; 0x1594 <__mulsf3_pse+0xa0>
    1558:	88 23       	and	r24, r24
    155a:	4a f0       	brmi	.+18     	; 0x156e <__mulsf3_pse+0x7a>
    155c:	ee 0f       	add	r30, r30
    155e:	ff 1f       	adc	r31, r31
    1560:	bb 1f       	adc	r27, r27
    1562:	66 1f       	adc	r22, r22
    1564:	77 1f       	adc	r23, r23
    1566:	88 1f       	adc	r24, r24
    1568:	91 50       	subi	r25, 0x01	; 1
    156a:	50 40       	sbci	r21, 0x00	; 0
    156c:	a9 f7       	brne	.-22     	; 0x1558 <__mulsf3_pse+0x64>
    156e:	9e 3f       	cpi	r25, 0xFE	; 254
    1570:	51 05       	cpc	r21, r1
    1572:	80 f0       	brcs	.+32     	; 0x1594 <__mulsf3_pse+0xa0>
    1574:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__fp_inf>
    1578:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__fp_szero>
    157c:	5f 3f       	cpi	r21, 0xFF	; 255
    157e:	e4 f3       	brlt	.-8      	; 0x1578 <__mulsf3_pse+0x84>
    1580:	98 3e       	cpi	r25, 0xE8	; 232
    1582:	d4 f3       	brlt	.-12     	; 0x1578 <__mulsf3_pse+0x84>
    1584:	86 95       	lsr	r24
    1586:	77 95       	ror	r23
    1588:	67 95       	ror	r22
    158a:	b7 95       	ror	r27
    158c:	f7 95       	ror	r31
    158e:	e7 95       	ror	r30
    1590:	9f 5f       	subi	r25, 0xFF	; 255
    1592:	c1 f7       	brne	.-16     	; 0x1584 <__mulsf3_pse+0x90>
    1594:	fe 2b       	or	r31, r30
    1596:	88 0f       	add	r24, r24
    1598:	91 1d       	adc	r25, r1
    159a:	96 95       	lsr	r25
    159c:	87 95       	ror	r24
    159e:	97 f9       	bld	r25, 7
    15a0:	08 95       	ret

Disassembly of section .text.avrlibc:

00000374 <vfprintf>:
 374:	a4 e1       	ldi	r26, 0x14	; 20
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	e0 ec       	ldi	r30, 0xC0	; 192
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__prologue_saves__>
 380:	6c 01       	movw	r12, r24
 382:	1a 01       	movw	r2, r20
 384:	46 2e       	mov	r4, r22
 386:	59 01       	movw	r10, r18
 388:	fc 01       	movw	r30, r24
 38a:	10 86       	std	Z+8, r1	; 0x08
 38c:	17 82       	std	Z+7, r1	; 0x07
 38e:	84 81       	ldd	r24, Z+4	; 0x04
 390:	81 ff       	sbrs	r24, 1
 392:	62 c3       	rjmp	.+1732   	; 0xa58 <__EEPROM_REGION_LENGTH__+0x258>
 394:	ce 01       	movw	r24, r28
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	9d 87       	std	Y+13, r25	; 0x0d
 39a:	8c 87       	std	Y+12, r24	; 0x0c
 39c:	a0 e8       	ldi	r26, 0x80	; 128
 39e:	8a 8b       	std	Y+18, r24	; 0x12
 3a0:	9b 8b       	std	Y+19, r25	; 0x13
 3a2:	ac 8b       	std	Y+20, r26	; 0x14
 3a4:	f1 01       	movw	r30, r2
 3a6:	84 91       	lpm	r24, Z
 3a8:	47 fc       	sbrc	r4, 7
 3aa:	80 81       	ld	r24, Z
 3ac:	88 23       	and	r24, r24
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <vfprintf+0x3e>
 3b0:	4f c3       	rjmp	.+1694   	; 0xa50 <__EEPROM_REGION_LENGTH__+0x250>
 3b2:	44 2d       	mov	r20, r4
 3b4:	91 01       	movw	r18, r2
 3b6:	2f 5f       	subi	r18, 0xFF	; 255
 3b8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ba:	4f 4f       	sbci	r20, 0xFF	; 255
 3bc:	85 32       	cpi	r24, 0x25	; 37
 3be:	19 f0       	breq	.+6      	; 0x3c6 <vfprintf+0x52>
 3c0:	19 01       	movw	r2, r18
 3c2:	44 2e       	mov	r4, r20
 3c4:	0a c0       	rjmp	.+20     	; 0x3da <vfprintf+0x66>
 3c6:	f9 01       	movw	r30, r18
 3c8:	84 91       	lpm	r24, Z
 3ca:	47 fd       	sbrc	r20, 7
 3cc:	80 81       	ld	r24, Z
 3ce:	92 e0       	ldi	r25, 0x02	; 2
 3d0:	29 0e       	add	r2, r25
 3d2:	31 1c       	adc	r3, r1
 3d4:	41 1c       	adc	r4, r1
 3d6:	85 32       	cpi	r24, 0x25	; 37
 3d8:	49 f4       	brne	.+18     	; 0x3ec <vfprintf+0x78>
 3da:	b6 01       	movw	r22, r12
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 3e2:	bf 86       	std	Y+15, r11	; 0x0f
 3e4:	ae 86       	std	Y+14, r10	; 0x0e
 3e6:	ae 84       	ldd	r10, Y+14	; 0x0e
 3e8:	bf 84       	ldd	r11, Y+15	; 0x0f
 3ea:	dc cf       	rjmp	.-72     	; 0x3a4 <vfprintf+0x30>
 3ec:	10 e0       	ldi	r17, 0x00	; 0
 3ee:	f1 2c       	mov	r15, r1
 3f0:	00 e0       	ldi	r16, 0x00	; 0
 3f2:	00 32       	cpi	r16, 0x20	; 32
 3f4:	a0 f4       	brcc	.+40     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f6:	8b 32       	cpi	r24, 0x2B	; 43
 3f8:	69 f0       	breq	.+26     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3fa:	30 f4       	brcc	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fc:	80 32       	cpi	r24, 0x20	; 32
 3fe:	59 f0       	breq	.+22     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 400:	83 32       	cpi	r24, 0x23	; 35
 402:	69 f4       	brne	.+26     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 404:	00 61       	ori	r16, 0x10	; 16
 406:	2c c0       	rjmp	.+88     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 408:	8d 32       	cpi	r24, 0x2D	; 45
 40a:	39 f0       	breq	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	80 33       	cpi	r24, 0x30	; 48
 40e:	39 f4       	brne	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 410:	01 60       	ori	r16, 0x01	; 1
 412:	26 c0       	rjmp	.+76     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 414:	02 60       	ori	r16, 0x02	; 2
 416:	04 60       	ori	r16, 0x04	; 4
 418:	23 c0       	rjmp	.+70     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 41a:	08 60       	ori	r16, 0x08	; 8
 41c:	21 c0       	rjmp	.+66     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 41e:	07 fd       	sbrc	r16, 7
 420:	29 c0       	rjmp	.+82     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 422:	90 ed       	ldi	r25, 0xD0	; 208
 424:	98 0f       	add	r25, r24
 426:	9a 30       	cpi	r25, 0x0A	; 10
 428:	78 f4       	brcc	.+30     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 42a:	06 ff       	sbrs	r16, 6
 42c:	06 c0       	rjmp	.+12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42e:	aa e0       	ldi	r26, 0x0A	; 10
 430:	1a 9f       	mul	r17, r26
 432:	90 0d       	add	r25, r0
 434:	11 24       	eor	r1, r1
 436:	19 2f       	mov	r17, r25
 438:	13 c0       	rjmp	.+38     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 43a:	ea e0       	ldi	r30, 0x0A	; 10
 43c:	fe 9e       	mul	r15, r30
 43e:	90 0d       	add	r25, r0
 440:	11 24       	eor	r1, r1
 442:	f9 2e       	mov	r15, r25
 444:	00 62       	ori	r16, 0x20	; 32
 446:	0c c0       	rjmp	.+24     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 448:	8e 32       	cpi	r24, 0x2E	; 46
 44a:	21 f4       	brne	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44c:	06 fd       	sbrc	r16, 6
 44e:	00 c3       	rjmp	.+1536   	; 0xa50 <__EEPROM_REGION_LENGTH__+0x250>
 450:	00 64       	ori	r16, 0x40	; 64
 452:	06 c0       	rjmp	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 454:	8c 36       	cpi	r24, 0x6C	; 108
 456:	11 f4       	brne	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 458:	00 68       	ori	r16, 0x80	; 128
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45c:	88 36       	cpi	r24, 0x68	; 104
 45e:	51 f4       	brne	.+20     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 460:	f1 01       	movw	r30, r2
 462:	84 91       	lpm	r24, Z
 464:	47 fc       	sbrc	r4, 7
 466:	80 81       	ld	r24, Z
 468:	ff ef       	ldi	r31, 0xFF	; 255
 46a:	2f 1a       	sub	r2, r31
 46c:	3f 0a       	sbc	r3, r31
 46e:	4f 0a       	sbc	r4, r31
 470:	81 11       	cpse	r24, r1
 472:	bf cf       	rjmp	.-130    	; 0x3f2 <vfprintf+0x7e>
 474:	9b eb       	ldi	r25, 0xBB	; 187
 476:	98 0f       	add	r25, r24
 478:	93 30       	cpi	r25, 0x03	; 3
 47a:	18 f4       	brcc	.+6      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 47c:	00 61       	ori	r16, 0x10	; 16
 47e:	80 5e       	subi	r24, 0xE0	; 224
 480:	06 c0       	rjmp	.+12     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 482:	9b e9       	ldi	r25, 0x9B	; 155
 484:	98 0f       	add	r25, r24
 486:	93 30       	cpi	r25, 0x03	; 3
 488:	08 f0       	brcs	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 48a:	66 c1       	rjmp	.+716    	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
 48c:	0f 7e       	andi	r16, 0xEF	; 239
 48e:	06 ff       	sbrs	r16, 6
 490:	16 e0       	ldi	r17, 0x06	; 6
 492:	0f 73       	andi	r16, 0x3F	; 63
 494:	70 2e       	mov	r7, r16
 496:	85 36       	cpi	r24, 0x65	; 101
 498:	21 f4       	brne	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49a:	20 2f       	mov	r18, r16
 49c:	20 64       	ori	r18, 0x40	; 64
 49e:	72 2e       	mov	r7, r18
 4a0:	08 c0       	rjmp	.+16     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4a2:	86 36       	cpi	r24, 0x66	; 102
 4a4:	21 f4       	brne	.+8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a6:	80 2f       	mov	r24, r16
 4a8:	80 68       	ori	r24, 0x80	; 128
 4aa:	78 2e       	mov	r7, r24
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4ae:	11 11       	cpse	r17, r1
 4b0:	11 50       	subi	r17, 0x01	; 1
 4b2:	77 fe       	sbrs	r7, 7
 4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b6:	1c 33       	cpi	r17, 0x3C	; 60
 4b8:	50 f4       	brcc	.+20     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4ba:	ee 24       	eor	r14, r14
 4bc:	e3 94       	inc	r14
 4be:	e1 0e       	add	r14, r17
 4c0:	27 e0       	ldi	r18, 0x07	; 7
 4c2:	0b c0       	rjmp	.+22     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4c4:	18 30       	cpi	r17, 0x08	; 8
 4c6:	38 f0       	brcs	.+14     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4c8:	27 e0       	ldi	r18, 0x07	; 7
 4ca:	17 e0       	ldi	r17, 0x07	; 7
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4ce:	27 e0       	ldi	r18, 0x07	; 7
 4d0:	6c e3       	ldi	r22, 0x3C	; 60
 4d2:	e6 2e       	mov	r14, r22
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d6:	21 2f       	mov	r18, r17
 4d8:	e1 2c       	mov	r14, r1
 4da:	f5 01       	movw	r30, r10
 4dc:	34 96       	adiw	r30, 0x04	; 4
 4de:	ff 87       	std	Y+15, r31	; 0x0f
 4e0:	ee 87       	std	Y+14, r30	; 0x0e
 4e2:	f5 01       	movw	r30, r10
 4e4:	60 81       	ld	r22, Z
 4e6:	71 81       	ldd	r23, Z+1	; 0x01
 4e8:	82 81       	ldd	r24, Z+2	; 0x02
 4ea:	93 81       	ldd	r25, Z+3	; 0x03
 4ec:	0e 2d       	mov	r16, r14
 4ee:	ae 01       	movw	r20, r28
 4f0:	4f 5f       	subi	r20, 0xFF	; 255
 4f2:	5f 4f       	sbci	r21, 0xFF	; 255
 4f4:	0e 94 a8 07 	call	0xf50	; 0xf50 <__ftoa_engine>
 4f8:	5c 01       	movw	r10, r24
 4fa:	59 80       	ldd	r5, Y+1	; 0x01
 4fc:	50 fe       	sbrs	r5, 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 500:	53 fe       	sbrs	r5, 3
 502:	06 c0       	rjmp	.+12     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 504:	71 fc       	sbrc	r7, 1
 506:	06 c0       	rjmp	.+12     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 508:	72 fe       	sbrs	r7, 2
 50a:	06 c0       	rjmp	.+12     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 50c:	00 e2       	ldi	r16, 0x20	; 32
 50e:	05 c0       	rjmp	.+10     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 510:	0d e2       	ldi	r16, 0x2D	; 45
 512:	03 c0       	rjmp	.+6      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 514:	0b e2       	ldi	r16, 0x2B	; 43
 516:	01 c0       	rjmp	.+2      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 518:	00 e0       	ldi	r16, 0x00	; 0
 51a:	85 2d       	mov	r24, r5
 51c:	8c 70       	andi	r24, 0x0C	; 12
 51e:	19 f0       	breq	.+6      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 520:	01 11       	cpse	r16, r1
 522:	73 c2       	rjmp	.+1254   	; 0xa0a <__EEPROM_REGION_LENGTH__+0x20a>
 524:	be c2       	rjmp	.+1404   	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
 526:	77 fe       	sbrs	r7, 7
 528:	0f c0       	rjmp	.+30     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 52a:	ea 0c       	add	r14, r10
 52c:	54 fe       	sbrs	r5, 4
 52e:	04 c0       	rjmp	.+8      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	81 33       	cpi	r24, 0x31	; 49
 534:	09 f4       	brne	.+2      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 536:	ea 94       	dec	r14
 538:	1e 14       	cp	r1, r14
 53a:	74 f5       	brge	.+92     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 53c:	28 e0       	ldi	r18, 0x08	; 8
 53e:	2e 15       	cp	r18, r14
 540:	78 f5       	brcc	.+94     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 542:	38 e0       	ldi	r19, 0x08	; 8
 544:	e3 2e       	mov	r14, r19
 546:	2c c0       	rjmp	.+88     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 548:	76 fc       	sbrc	r7, 6
 54a:	2a c0       	rjmp	.+84     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 54c:	81 2f       	mov	r24, r17
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	8a 15       	cp	r24, r10
 552:	9b 05       	cpc	r25, r11
 554:	9c f0       	brlt	.+38     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 556:	8c ef       	ldi	r24, 0xFC	; 252
 558:	a8 16       	cp	r10, r24
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	b8 06       	cpc	r11, r24
 55e:	74 f0       	brlt	.+28     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 560:	97 2d       	mov	r25, r7
 562:	90 68       	ori	r25, 0x80	; 128
 564:	79 2e       	mov	r7, r25
 566:	0a c0       	rjmp	.+20     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 568:	e2 e0       	ldi	r30, 0x02	; 2
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	ec 0f       	add	r30, r28
 56e:	fd 1f       	adc	r31, r29
 570:	e1 0f       	add	r30, r17
 572:	f1 1d       	adc	r31, r1
 574:	80 81       	ld	r24, Z
 576:	80 33       	cpi	r24, 0x30	; 48
 578:	19 f4       	brne	.+6      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57a:	11 50       	subi	r17, 0x01	; 1
 57c:	11 11       	cpse	r17, r1
 57e:	f4 cf       	rjmp	.-24     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 580:	77 fe       	sbrs	r7, 7
 582:	0e c0       	rjmp	.+28     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 584:	ee 24       	eor	r14, r14
 586:	e3 94       	inc	r14
 588:	e1 0e       	add	r14, r17
 58a:	81 2f       	mov	r24, r17
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	a8 16       	cp	r10, r24
 590:	b9 06       	cpc	r11, r25
 592:	2c f4       	brge	.+10     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 594:	1a 19       	sub	r17, r10
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 598:	ee 24       	eor	r14, r14
 59a:	e3 94       	inc	r14
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 59e:	10 e0       	ldi	r17, 0x00	; 0
 5a0:	77 fe       	sbrs	r7, 7
 5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5a4:	1a 14       	cp	r1, r10
 5a6:	1b 04       	cpc	r1, r11
 5a8:	34 f4       	brge	.+12     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5aa:	c5 01       	movw	r24, r10
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	05 c0       	rjmp	.+10     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5b0:	85 e0       	ldi	r24, 0x05	; 5
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	01 11       	cpse	r16, r1
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	11 23       	and	r17, r17
 5c0:	31 f0       	breq	.+12     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c2:	21 2f       	mov	r18, r17
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	2f 5f       	subi	r18, 0xFF	; 255
 5c8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ca:	82 0f       	add	r24, r18
 5cc:	93 1f       	adc	r25, r19
 5ce:	2f 2d       	mov	r18, r15
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	82 17       	cp	r24, r18
 5d4:	93 07       	cpc	r25, r19
 5d6:	14 f4       	brge	.+4      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5d8:	f8 1a       	sub	r15, r24
 5da:	01 c0       	rjmp	.+2      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5dc:	f1 2c       	mov	r15, r1
 5de:	87 2d       	mov	r24, r7
 5e0:	89 70       	andi	r24, 0x09	; 9
 5e2:	49 f4       	brne	.+18     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5e4:	ff 20       	and	r15, r15
 5e6:	39 f0       	breq	.+14     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5e8:	b6 01       	movw	r22, r12
 5ea:	80 e2       	ldi	r24, 0x20	; 32
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 5f2:	fa 94       	dec	r15
 5f4:	f7 cf       	rjmp	.-18     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5f6:	00 23       	and	r16, r16
 5f8:	29 f0       	breq	.+10     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5fa:	b6 01       	movw	r22, r12
 5fc:	80 2f       	mov	r24, r16
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 604:	73 fc       	sbrc	r7, 3
 606:	09 c0       	rjmp	.+18     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 608:	ff 20       	and	r15, r15
 60a:	39 f0       	breq	.+14     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 60c:	b6 01       	movw	r22, r12
 60e:	80 e3       	ldi	r24, 0x30	; 48
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 616:	fa 94       	dec	r15
 618:	f7 cf       	rjmp	.-18     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 61a:	77 fe       	sbrs	r7, 7
 61c:	49 c0       	rjmp	.+146    	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 61e:	35 01       	movw	r6, r10
 620:	b7 fe       	sbrs	r11, 7
 622:	02 c0       	rjmp	.+4      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 624:	61 2c       	mov	r6, r1
 626:	71 2c       	mov	r7, r1
 628:	c5 01       	movw	r24, r10
 62a:	86 19       	sub	r24, r6
 62c:	97 09       	sbc	r25, r7
 62e:	88 24       	eor	r8, r8
 630:	83 94       	inc	r8
 632:	91 2c       	mov	r9, r1
 634:	8c 0e       	add	r8, r28
 636:	9d 1e       	adc	r9, r29
 638:	88 0e       	add	r8, r24
 63a:	99 1e       	adc	r9, r25
 63c:	f5 01       	movw	r30, r10
 63e:	ee 19       	sub	r30, r14
 640:	f1 09       	sbc	r31, r1
 642:	f9 8b       	std	Y+17, r31	; 0x11
 644:	e8 8b       	std	Y+16, r30	; 0x10
 646:	01 2f       	mov	r16, r17
 648:	10 e0       	ldi	r17, 0x00	; 0
 64a:	11 95       	neg	r17
 64c:	01 95       	neg	r16
 64e:	11 09       	sbc	r17, r1
 650:	ff ef       	ldi	r31, 0xFF	; 255
 652:	6f 16       	cp	r6, r31
 654:	7f 06       	cpc	r7, r31
 656:	29 f4       	brne	.+10     	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 658:	b6 01       	movw	r22, r12
 65a:	8e e2       	ldi	r24, 0x2E	; 46
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 662:	a6 14       	cp	r10, r6
 664:	b7 04       	cpc	r11, r7
 666:	44 f0       	brlt	.+16     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 668:	88 89       	ldd	r24, Y+16	; 0x10
 66a:	99 89       	ldd	r25, Y+17	; 0x11
 66c:	86 15       	cp	r24, r6
 66e:	97 05       	cpc	r25, r7
 670:	1c f4       	brge	.+6      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 672:	f4 01       	movw	r30, r8
 674:	81 81       	ldd	r24, Z+1	; 0x01
 676:	01 c0       	rjmp	.+2      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 678:	80 e3       	ldi	r24, 0x30	; 48
 67a:	f1 e0       	ldi	r31, 0x01	; 1
 67c:	6f 1a       	sub	r6, r31
 67e:	71 08       	sbc	r7, r1
 680:	2f ef       	ldi	r18, 0xFF	; 255
 682:	82 1a       	sub	r8, r18
 684:	92 0a       	sbc	r9, r18
 686:	60 16       	cp	r6, r16
 688:	71 06       	cpc	r7, r17
 68a:	2c f0       	brlt	.+10     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 68c:	b6 01       	movw	r22, r12
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 694:	dd cf       	rjmp	.-70     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 696:	a6 14       	cp	r10, r6
 698:	b7 04       	cpc	r11, r7
 69a:	39 f4       	brne	.+14     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 69c:	9a 81       	ldd	r25, Y+2	; 0x02
 69e:	96 33       	cpi	r25, 0x36	; 54
 6a0:	18 f4       	brcc	.+6      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 6a2:	95 33       	cpi	r25, 0x35	; 53
 6a4:	11 f4       	brne	.+4      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 6a6:	54 fe       	sbrs	r5, 4
 6a8:	81 e3       	ldi	r24, 0x31	; 49
 6aa:	b6 01       	movw	r22, r12
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	51 c0       	rjmp	.+162    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
 6b0:	8a 81       	ldd	r24, Y+2	; 0x02
 6b2:	81 33       	cpi	r24, 0x31	; 49
 6b4:	19 f0       	breq	.+6      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6b6:	95 2d       	mov	r25, r5
 6b8:	9f 7e       	andi	r25, 0xEF	; 239
 6ba:	59 2e       	mov	r5, r25
 6bc:	b6 01       	movw	r22, r12
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 6c4:	11 11       	cpse	r17, r1
 6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6c8:	74 fc       	sbrc	r7, 4
 6ca:	1c c0       	rjmp	.+56     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 6cc:	85 e6       	ldi	r24, 0x65	; 101
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	1b c0       	rjmp	.+54     	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 6d2:	b6 01       	movw	r22, r12
 6d4:	8e e2       	ldi	r24, 0x2E	; 46
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 6dc:	02 e0       	ldi	r16, 0x02	; 2
 6de:	01 0f       	add	r16, r17
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	11 e0       	ldi	r17, 0x01	; 1
 6e4:	18 0f       	add	r17, r24
 6e6:	e1 e0       	ldi	r30, 0x01	; 1
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	ec 0f       	add	r30, r28
 6ec:	fd 1f       	adc	r31, r29
 6ee:	e8 0f       	add	r30, r24
 6f0:	f1 1d       	adc	r31, r1
 6f2:	80 81       	ld	r24, Z
 6f4:	b6 01       	movw	r22, r12
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 6fc:	81 2f       	mov	r24, r17
 6fe:	10 13       	cpse	r17, r16
 700:	f0 cf       	rjmp	.-32     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 702:	e2 cf       	rjmp	.-60     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 704:	85 e4       	ldi	r24, 0x45	; 69
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	b6 01       	movw	r22, r12
 70a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 70e:	b7 fc       	sbrc	r11, 7
 710:	05 c0       	rjmp	.+10     	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 712:	a1 14       	cp	r10, r1
 714:	b1 04       	cpc	r11, r1
 716:	39 f4       	brne	.+14     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 718:	54 fe       	sbrs	r5, 4
 71a:	05 c0       	rjmp	.+10     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 71c:	b1 94       	neg	r11
 71e:	a1 94       	neg	r10
 720:	b1 08       	sbc	r11, r1
 722:	8d e2       	ldi	r24, 0x2D	; 45
 724:	01 c0       	rjmp	.+2      	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 726:	8b e2       	ldi	r24, 0x2B	; 43
 728:	b6 01       	movw	r22, r12
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 730:	80 e3       	ldi	r24, 0x30	; 48
 732:	ea e0       	ldi	r30, 0x0A	; 10
 734:	ae 16       	cp	r10, r30
 736:	b1 04       	cpc	r11, r1
 738:	2c f0       	brlt	.+10     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 73a:	8f 5f       	subi	r24, 0xFF	; 255
 73c:	aa e0       	ldi	r26, 0x0A	; 10
 73e:	aa 1a       	sub	r10, r26
 740:	b1 08       	sbc	r11, r1
 742:	f7 cf       	rjmp	.-18     	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 744:	b6 01       	movw	r22, r12
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 74c:	b6 01       	movw	r22, r12
 74e:	c5 01       	movw	r24, r10
 750:	c0 96       	adiw	r24, 0x30	; 48
 752:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 756:	72 c1       	rjmp	.+740    	; 0xa3c <__EEPROM_REGION_LENGTH__+0x23c>
 758:	83 36       	cpi	r24, 0x63	; 99
 75a:	31 f0       	breq	.+12     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 75c:	83 37       	cpi	r24, 0x73	; 115
 75e:	91 f0       	breq	.+36     	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
 760:	83 35       	cpi	r24, 0x53	; 83
 762:	09 f0       	breq	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 764:	5d c0       	rjmp	.+186    	; 0x820 <__EEPROM_REGION_LENGTH__+0x20>
 766:	24 c0       	rjmp	.+72     	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
 768:	c5 01       	movw	r24, r10
 76a:	02 96       	adiw	r24, 0x02	; 2
 76c:	9f 87       	std	Y+15, r25	; 0x0f
 76e:	8e 87       	std	Y+14, r24	; 0x0e
 770:	f5 01       	movw	r30, r10
 772:	80 81       	ld	r24, Z
 774:	89 83       	std	Y+1, r24	; 0x01
 776:	6a 88       	ldd	r6, Y+18	; 0x12
 778:	7b 88       	ldd	r7, Y+19	; 0x13
 77a:	8c 88       	ldd	r8, Y+20	; 0x14
 77c:	aa 24       	eor	r10, r10
 77e:	a3 94       	inc	r10
 780:	b1 2c       	mov	r11, r1
 782:	14 c0       	rjmp	.+40     	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
 784:	c5 01       	movw	r24, r10
 786:	03 96       	adiw	r24, 0x03	; 3
 788:	9f 87       	std	Y+15, r25	; 0x0f
 78a:	8e 87       	std	Y+14, r24	; 0x0e
 78c:	f5 01       	movw	r30, r10
 78e:	60 80       	ld	r6, Z
 790:	71 80       	ldd	r7, Z+1	; 0x01
 792:	82 80       	ldd	r8, Z+2	; 0x02
 794:	06 ff       	sbrs	r16, 6
 796:	03 c0       	rjmp	.+6      	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
 798:	41 2f       	mov	r20, r17
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
 79e:	4f ef       	ldi	r20, 0xFF	; 255
 7a0:	5f ef       	ldi	r21, 0xFF	; 255
 7a2:	88 2d       	mov	r24, r8
 7a4:	b3 01       	movw	r22, r6
 7a6:	0e 94 18 12 	call	0x2430	; 0x2430 <strnlen>
 7aa:	5c 01       	movw	r10, r24
 7ac:	0f 77       	andi	r16, 0x7F	; 127
 7ae:	15 c0       	rjmp	.+42     	; 0x7da <__LOCK_REGION_LENGTH__+0x3da>
 7b0:	c5 01       	movw	r24, r10
 7b2:	03 96       	adiw	r24, 0x03	; 3
 7b4:	9f 87       	std	Y+15, r25	; 0x0f
 7b6:	8e 87       	std	Y+14, r24	; 0x0e
 7b8:	f5 01       	movw	r30, r10
 7ba:	60 80       	ld	r6, Z
 7bc:	71 80       	ldd	r7, Z+1	; 0x01
 7be:	82 80       	ldd	r8, Z+2	; 0x02
 7c0:	06 ff       	sbrs	r16, 6
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
 7c4:	41 2f       	mov	r20, r17
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
 7ca:	4f ef       	ldi	r20, 0xFF	; 255
 7cc:	5f ef       	ldi	r21, 0xFF	; 255
 7ce:	88 2d       	mov	r24, r8
 7d0:	b3 01       	movw	r22, r6
 7d2:	0e 94 18 12 	call	0x2430	; 0x2430 <strnlen>
 7d6:	5c 01       	movw	r10, r24
 7d8:	00 68       	ori	r16, 0x80	; 128
 7da:	03 fd       	sbrc	r16, 3
 7dc:	1d c0       	rjmp	.+58     	; 0x818 <__EEPROM_REGION_LENGTH__+0x18>
 7de:	8f 2d       	mov	r24, r15
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	a8 16       	cp	r10, r24
 7e4:	b9 06       	cpc	r11, r25
 7e6:	c0 f4       	brcc	.+48     	; 0x818 <__EEPROM_REGION_LENGTH__+0x18>
 7e8:	b6 01       	movw	r22, r12
 7ea:	80 e2       	ldi	r24, 0x20	; 32
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 7f2:	fa 94       	dec	r15
 7f4:	f4 cf       	rjmp	.-24     	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
 7f6:	f3 01       	movw	r30, r6
 7f8:	84 91       	lpm	r24, Z
 7fa:	87 fc       	sbrc	r8, 7
 7fc:	80 81       	ld	r24, Z
 7fe:	ff ef       	ldi	r31, 0xFF	; 255
 800:	6f 1a       	sub	r6, r31
 802:	7f 0a       	sbc	r7, r31
 804:	8f 0a       	sbc	r8, r31
 806:	b6 01       	movw	r22, r12
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 80e:	f1 10       	cpse	r15, r1
 810:	fa 94       	dec	r15
 812:	21 e0       	ldi	r18, 0x01	; 1
 814:	a2 1a       	sub	r10, r18
 816:	b1 08       	sbc	r11, r1
 818:	a1 14       	cp	r10, r1
 81a:	b1 04       	cpc	r11, r1
 81c:	61 f7       	brne	.-40     	; 0x7f6 <__LOCK_REGION_LENGTH__+0x3f6>
 81e:	0e c1       	rjmp	.+540    	; 0xa3c <__EEPROM_REGION_LENGTH__+0x23c>
 820:	84 36       	cpi	r24, 0x64	; 100
 822:	11 f0       	breq	.+4      	; 0x828 <__EEPROM_REGION_LENGTH__+0x28>
 824:	89 36       	cpi	r24, 0x69	; 105
 826:	79 f5       	brne	.+94     	; 0x886 <__EEPROM_REGION_LENGTH__+0x86>
 828:	c5 01       	movw	r24, r10
 82a:	07 ff       	sbrs	r16, 7
 82c:	09 c0       	rjmp	.+18     	; 0x840 <__EEPROM_REGION_LENGTH__+0x40>
 82e:	04 96       	adiw	r24, 0x04	; 4
 830:	9f 87       	std	Y+15, r25	; 0x0f
 832:	8e 87       	std	Y+14, r24	; 0x0e
 834:	f5 01       	movw	r30, r10
 836:	60 81       	ld	r22, Z
 838:	71 81       	ldd	r23, Z+1	; 0x01
 83a:	82 81       	ldd	r24, Z+2	; 0x02
 83c:	93 81       	ldd	r25, Z+3	; 0x03
 83e:	0a c0       	rjmp	.+20     	; 0x854 <__EEPROM_REGION_LENGTH__+0x54>
 840:	02 96       	adiw	r24, 0x02	; 2
 842:	9f 87       	std	Y+15, r25	; 0x0f
 844:	8e 87       	std	Y+14, r24	; 0x0e
 846:	f5 01       	movw	r30, r10
 848:	60 81       	ld	r22, Z
 84a:	71 81       	ldd	r23, Z+1	; 0x01
 84c:	07 2e       	mov	r0, r23
 84e:	00 0c       	add	r0, r0
 850:	88 0b       	sbc	r24, r24
 852:	99 0b       	sbc	r25, r25
 854:	0f 76       	andi	r16, 0x6F	; 111
 856:	e0 2e       	mov	r14, r16
 858:	97 ff       	sbrs	r25, 7
 85a:	0a c0       	rjmp	.+20     	; 0x870 <__EEPROM_REGION_LENGTH__+0x70>
 85c:	90 95       	com	r25
 85e:	80 95       	com	r24
 860:	70 95       	com	r23
 862:	61 95       	neg	r22
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	f0 2f       	mov	r31, r16
 86c:	f0 68       	ori	r31, 0x80	; 128
 86e:	ef 2e       	mov	r14, r31
 870:	2a e0       	ldi	r18, 0x0A	; 10
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	ae 01       	movw	r20, r28
 876:	4f 5f       	subi	r20, 0xFF	; 255
 878:	5f 4f       	sbci	r21, 0xFF	; 255
 87a:	0e 94 38 0b 	call	0x1670	; 0x1670 <__ultoa_invert>
 87e:	a8 2e       	mov	r10, r24
 880:	2c 85       	ldd	r18, Y+12	; 0x0c
 882:	a2 1a       	sub	r10, r18
 884:	4b c0       	rjmp	.+150    	; 0x91c <__EEPROM_REGION_LENGTH__+0x11c>
 886:	85 37       	cpi	r24, 0x75	; 117
 888:	29 f4       	brne	.+10     	; 0x894 <__EEPROM_REGION_LENGTH__+0x94>
 88a:	0f 7e       	andi	r16, 0xEF	; 239
 88c:	e0 2e       	mov	r14, r16
 88e:	2a e0       	ldi	r18, 0x0A	; 10
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	25 c0       	rjmp	.+74     	; 0x8de <__EEPROM_REGION_LENGTH__+0xde>
 894:	90 2f       	mov	r25, r16
 896:	99 7f       	andi	r25, 0xF9	; 249
 898:	e9 2e       	mov	r14, r25
 89a:	8f 36       	cpi	r24, 0x6F	; 111
 89c:	c1 f0       	breq	.+48     	; 0x8ce <__EEPROM_REGION_LENGTH__+0xce>
 89e:	18 f4       	brcc	.+6      	; 0x8a6 <__EEPROM_REGION_LENGTH__+0xa6>
 8a0:	88 35       	cpi	r24, 0x58	; 88
 8a2:	79 f0       	breq	.+30     	; 0x8c2 <__EEPROM_REGION_LENGTH__+0xc2>
 8a4:	d5 c0       	rjmp	.+426    	; 0xa50 <__EEPROM_REGION_LENGTH__+0x250>
 8a6:	80 37       	cpi	r24, 0x70	; 112
 8a8:	19 f0       	breq	.+6      	; 0x8b0 <__EEPROM_REGION_LENGTH__+0xb0>
 8aa:	88 37       	cpi	r24, 0x78	; 120
 8ac:	21 f0       	breq	.+8      	; 0x8b6 <__EEPROM_REGION_LENGTH__+0xb6>
 8ae:	d0 c0       	rjmp	.+416    	; 0xa50 <__EEPROM_REGION_LENGTH__+0x250>
 8b0:	a9 2f       	mov	r26, r25
 8b2:	a0 61       	ori	r26, 0x10	; 16
 8b4:	ea 2e       	mov	r14, r26
 8b6:	e4 fe       	sbrs	r14, 4
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <__EEPROM_REGION_LENGTH__+0xd4>
 8ba:	ee 2d       	mov	r30, r14
 8bc:	e4 60       	ori	r30, 0x04	; 4
 8be:	ee 2e       	mov	r14, r30
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <__EEPROM_REGION_LENGTH__+0xd4>
 8c2:	04 ff       	sbrs	r16, 4
 8c4:	0a c0       	rjmp	.+20     	; 0x8da <__EEPROM_REGION_LENGTH__+0xda>
 8c6:	f9 2f       	mov	r31, r25
 8c8:	f6 60       	ori	r31, 0x06	; 6
 8ca:	ef 2e       	mov	r14, r31
 8cc:	06 c0       	rjmp	.+12     	; 0x8da <__EEPROM_REGION_LENGTH__+0xda>
 8ce:	28 e0       	ldi	r18, 0x08	; 8
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <__EEPROM_REGION_LENGTH__+0xde>
 8d4:	20 e1       	ldi	r18, 0x10	; 16
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__EEPROM_REGION_LENGTH__+0xde>
 8da:	20 e1       	ldi	r18, 0x10	; 16
 8dc:	32 e0       	ldi	r19, 0x02	; 2
 8de:	c5 01       	movw	r24, r10
 8e0:	e7 fe       	sbrs	r14, 7
 8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <__EEPROM_REGION_LENGTH__+0xf6>
 8e4:	04 96       	adiw	r24, 0x04	; 4
 8e6:	9f 87       	std	Y+15, r25	; 0x0f
 8e8:	8e 87       	std	Y+14, r24	; 0x0e
 8ea:	f5 01       	movw	r30, r10
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	82 81       	ldd	r24, Z+2	; 0x02
 8f2:	93 81       	ldd	r25, Z+3	; 0x03
 8f4:	08 c0       	rjmp	.+16     	; 0x906 <__EEPROM_REGION_LENGTH__+0x106>
 8f6:	02 96       	adiw	r24, 0x02	; 2
 8f8:	9f 87       	std	Y+15, r25	; 0x0f
 8fa:	8e 87       	std	Y+14, r24	; 0x0e
 8fc:	f5 01       	movw	r30, r10
 8fe:	60 81       	ld	r22, Z
 900:	71 81       	ldd	r23, Z+1	; 0x01
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	ae 01       	movw	r20, r28
 908:	4f 5f       	subi	r20, 0xFF	; 255
 90a:	5f 4f       	sbci	r21, 0xFF	; 255
 90c:	0e 94 38 0b 	call	0x1670	; 0x1670 <__ultoa_invert>
 910:	a8 2e       	mov	r10, r24
 912:	fc 85       	ldd	r31, Y+12	; 0x0c
 914:	af 1a       	sub	r10, r31
 916:	2e 2d       	mov	r18, r14
 918:	2f 77       	andi	r18, 0x7F	; 127
 91a:	e2 2e       	mov	r14, r18
 91c:	e6 fe       	sbrs	r14, 6
 91e:	0b c0       	rjmp	.+22     	; 0x936 <__EEPROM_REGION_LENGTH__+0x136>
 920:	0e 2d       	mov	r16, r14
 922:	0e 7f       	andi	r16, 0xFE	; 254
 924:	a1 16       	cp	r10, r17
 926:	50 f4       	brcc	.+20     	; 0x93c <__EEPROM_REGION_LENGTH__+0x13c>
 928:	e4 fe       	sbrs	r14, 4
 92a:	0a c0       	rjmp	.+20     	; 0x940 <__EEPROM_REGION_LENGTH__+0x140>
 92c:	e2 fc       	sbrc	r14, 2
 92e:	08 c0       	rjmp	.+16     	; 0x940 <__EEPROM_REGION_LENGTH__+0x140>
 930:	0e 2d       	mov	r16, r14
 932:	0e 7e       	andi	r16, 0xEE	; 238
 934:	05 c0       	rjmp	.+10     	; 0x940 <__EEPROM_REGION_LENGTH__+0x140>
 936:	ba 2c       	mov	r11, r10
 938:	0e 2d       	mov	r16, r14
 93a:	03 c0       	rjmp	.+6      	; 0x942 <__EEPROM_REGION_LENGTH__+0x142>
 93c:	ba 2c       	mov	r11, r10
 93e:	01 c0       	rjmp	.+2      	; 0x942 <__EEPROM_REGION_LENGTH__+0x142>
 940:	b1 2e       	mov	r11, r17
 942:	04 ff       	sbrs	r16, 4
 944:	0d c0       	rjmp	.+26     	; 0x960 <__EEPROM_REGION_LENGTH__+0x160>
 946:	fe 01       	movw	r30, r28
 948:	ea 0d       	add	r30, r10
 94a:	f1 1d       	adc	r31, r1
 94c:	80 81       	ld	r24, Z
 94e:	80 33       	cpi	r24, 0x30	; 48
 950:	11 f4       	brne	.+4      	; 0x956 <__EEPROM_REGION_LENGTH__+0x156>
 952:	09 7e       	andi	r16, 0xE9	; 233
 954:	09 c0       	rjmp	.+18     	; 0x968 <__EEPROM_REGION_LENGTH__+0x168>
 956:	02 ff       	sbrs	r16, 2
 958:	06 c0       	rjmp	.+12     	; 0x966 <__EEPROM_REGION_LENGTH__+0x166>
 95a:	b3 94       	inc	r11
 95c:	b3 94       	inc	r11
 95e:	04 c0       	rjmp	.+8      	; 0x968 <__EEPROM_REGION_LENGTH__+0x168>
 960:	80 2f       	mov	r24, r16
 962:	86 78       	andi	r24, 0x86	; 134
 964:	09 f0       	breq	.+2      	; 0x968 <__EEPROM_REGION_LENGTH__+0x168>
 966:	b3 94       	inc	r11
 968:	03 fd       	sbrc	r16, 3
 96a:	11 c0       	rjmp	.+34     	; 0x98e <__EEPROM_REGION_LENGTH__+0x18e>
 96c:	00 ff       	sbrs	r16, 0
 96e:	06 c0       	rjmp	.+12     	; 0x97c <__EEPROM_REGION_LENGTH__+0x17c>
 970:	bf 14       	cp	r11, r15
 972:	88 f4       	brcc	.+34     	; 0x996 <__EEPROM_REGION_LENGTH__+0x196>
 974:	fa 0c       	add	r15, r10
 976:	1f 2d       	mov	r17, r15
 978:	1b 19       	sub	r17, r11
 97a:	0e c0       	rjmp	.+28     	; 0x998 <__EEPROM_REGION_LENGTH__+0x198>
 97c:	bf 14       	cp	r11, r15
 97e:	60 f4       	brcc	.+24     	; 0x998 <__EEPROM_REGION_LENGTH__+0x198>
 980:	b6 01       	movw	r22, r12
 982:	80 e2       	ldi	r24, 0x20	; 32
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 98a:	b3 94       	inc	r11
 98c:	f7 cf       	rjmp	.-18     	; 0x97c <__EEPROM_REGION_LENGTH__+0x17c>
 98e:	bf 14       	cp	r11, r15
 990:	18 f4       	brcc	.+6      	; 0x998 <__EEPROM_REGION_LENGTH__+0x198>
 992:	fb 18       	sub	r15, r11
 994:	02 c0       	rjmp	.+4      	; 0x99a <__EEPROM_REGION_LENGTH__+0x19a>
 996:	1a 2d       	mov	r17, r10
 998:	f1 2c       	mov	r15, r1
 99a:	04 ff       	sbrs	r16, 4
 99c:	10 c0       	rjmp	.+32     	; 0x9be <__EEPROM_REGION_LENGTH__+0x1be>
 99e:	b6 01       	movw	r22, r12
 9a0:	80 e3       	ldi	r24, 0x30	; 48
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 9a8:	02 ff       	sbrs	r16, 2
 9aa:	17 c0       	rjmp	.+46     	; 0x9da <__EEPROM_REGION_LENGTH__+0x1da>
 9ac:	01 fd       	sbrc	r16, 1
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 9b0:	88 e7       	ldi	r24, 0x78	; 120
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__EEPROM_REGION_LENGTH__+0x1ba>
 9b6:	88 e5       	ldi	r24, 0x58	; 88
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	b6 01       	movw	r22, r12
 9bc:	0c c0       	rjmp	.+24     	; 0x9d6 <__EEPROM_REGION_LENGTH__+0x1d6>
 9be:	80 2f       	mov	r24, r16
 9c0:	86 78       	andi	r24, 0x86	; 134
 9c2:	59 f0       	breq	.+22     	; 0x9da <__EEPROM_REGION_LENGTH__+0x1da>
 9c4:	01 ff       	sbrs	r16, 1
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__EEPROM_REGION_LENGTH__+0x1cc>
 9c8:	8b e2       	ldi	r24, 0x2B	; 43
 9ca:	01 c0       	rjmp	.+2      	; 0x9ce <__EEPROM_REGION_LENGTH__+0x1ce>
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	07 fd       	sbrc	r16, 7
 9d0:	8d e2       	ldi	r24, 0x2D	; 45
 9d2:	b6 01       	movw	r22, r12
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 9da:	a1 16       	cp	r10, r17
 9dc:	38 f4       	brcc	.+14     	; 0x9ec <__EEPROM_REGION_LENGTH__+0x1ec>
 9de:	b6 01       	movw	r22, r12
 9e0:	80 e3       	ldi	r24, 0x30	; 48
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 9e8:	11 50       	subi	r17, 0x01	; 1
 9ea:	f7 cf       	rjmp	.-18     	; 0x9da <__EEPROM_REGION_LENGTH__+0x1da>
 9ec:	aa 94       	dec	r10
 9ee:	e1 e0       	ldi	r30, 0x01	; 1
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	ec 0f       	add	r30, r28
 9f4:	fd 1f       	adc	r31, r29
 9f6:	ea 0d       	add	r30, r10
 9f8:	f1 1d       	adc	r31, r1
 9fa:	80 81       	ld	r24, Z
 9fc:	b6 01       	movw	r22, r12
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 a04:	a1 10       	cpse	r10, r1
 a06:	f2 cf       	rjmp	.-28     	; 0x9ec <__EEPROM_REGION_LENGTH__+0x1ec>
 a08:	19 c0       	rjmp	.+50     	; 0xa3c <__EEPROM_REGION_LENGTH__+0x23c>
 a0a:	f4 e0       	ldi	r31, 0x04	; 4
 a0c:	ff 15       	cp	r31, r15
 a0e:	80 f5       	brcc	.+96     	; 0xa70 <__EEPROM_REGION_LENGTH__+0x270>
 a10:	84 e0       	ldi	r24, 0x04	; 4
 a12:	f8 1a       	sub	r15, r24
 a14:	73 fe       	sbrs	r7, 3
 a16:	23 c0       	rjmp	.+70     	; 0xa5e <__EEPROM_REGION_LENGTH__+0x25e>
 a18:	01 11       	cpse	r16, r1
 a1a:	2b c0       	rjmp	.+86     	; 0xa72 <__EEPROM_REGION_LENGTH__+0x272>
 a1c:	53 fe       	sbrs	r5, 3
 a1e:	2f c0       	rjmp	.+94     	; 0xa7e <__EEPROM_REGION_LENGTH__+0x27e>
 a20:	5f e6       	ldi	r21, 0x6F	; 111
 a22:	85 2e       	mov	r8, r21
 a24:	53 e0       	ldi	r21, 0x03	; 3
 a26:	95 2e       	mov	r9, r21
 a28:	50 e0       	ldi	r21, 0x00	; 0
 a2a:	a5 2e       	mov	r10, r21
 a2c:	07 2d       	mov	r16, r7
 a2e:	00 71       	andi	r16, 0x10	; 16
 a30:	f4 01       	movw	r30, r8
 a32:	84 91       	lpm	r24, Z
 a34:	a7 fc       	sbrc	r10, 7
 a36:	80 81       	ld	r24, Z
 a38:	81 11       	cpse	r24, r1
 a3a:	28 c0       	rjmp	.+80     	; 0xa8c <__EEPROM_REGION_LENGTH__+0x28c>
 a3c:	ff 20       	and	r15, r15
 a3e:	09 f4       	brne	.+2      	; 0xa42 <__EEPROM_REGION_LENGTH__+0x242>
 a40:	d2 cc       	rjmp	.-1628   	; 0x3e6 <vfprintf+0x72>
 a42:	b6 01       	movw	r22, r12
 a44:	80 e2       	ldi	r24, 0x20	; 32
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 a4c:	fa 94       	dec	r15
 a4e:	f6 cf       	rjmp	.-20     	; 0xa3c <__EEPROM_REGION_LENGTH__+0x23c>
 a50:	f6 01       	movw	r30, r12
 a52:	87 81       	ldd	r24, Z+7	; 0x07
 a54:	90 85       	ldd	r25, Z+8	; 0x08
 a56:	2c c0       	rjmp	.+88     	; 0xab0 <__EEPROM_REGION_LENGTH__+0x2b0>
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	9f ef       	ldi	r25, 0xFF	; 255
 a5c:	29 c0       	rjmp	.+82     	; 0xab0 <__EEPROM_REGION_LENGTH__+0x2b0>
 a5e:	b6 01       	movw	r22, r12
 a60:	80 e2       	ldi	r24, 0x20	; 32
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 a68:	fa 94       	dec	r15
 a6a:	f1 10       	cpse	r15, r1
 a6c:	f8 cf       	rjmp	.-16     	; 0xa5e <__EEPROM_REGION_LENGTH__+0x25e>
 a6e:	d4 cf       	rjmp	.-88     	; 0xa18 <__EEPROM_REGION_LENGTH__+0x218>
 a70:	f1 2c       	mov	r15, r1
 a72:	b6 01       	movw	r22, r12
 a74:	80 2f       	mov	r24, r16
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 a7c:	cf cf       	rjmp	.-98     	; 0xa1c <__EEPROM_REGION_LENGTH__+0x21c>
 a7e:	4b e6       	ldi	r20, 0x6B	; 107
 a80:	84 2e       	mov	r8, r20
 a82:	43 e0       	ldi	r20, 0x03	; 3
 a84:	94 2e       	mov	r9, r20
 a86:	40 e0       	ldi	r20, 0x00	; 0
 a88:	a4 2e       	mov	r10, r20
 a8a:	d0 cf       	rjmp	.-96     	; 0xa2c <__EEPROM_REGION_LENGTH__+0x22c>
 a8c:	01 11       	cpse	r16, r1
 a8e:	80 52       	subi	r24, 0x20	; 32
 a90:	b6 01       	movw	r22, r12
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fputc>
 a98:	ff ef       	ldi	r31, 0xFF	; 255
 a9a:	8f 1a       	sub	r8, r31
 a9c:	9f 0a       	sbc	r9, r31
 a9e:	af 0a       	sbc	r10, r31
 aa0:	c7 cf       	rjmp	.-114    	; 0xa30 <__EEPROM_REGION_LENGTH__+0x230>
 aa2:	23 e0       	ldi	r18, 0x03	; 3
 aa4:	2f 15       	cp	r18, r15
 aa6:	10 f4       	brcc	.+4      	; 0xaac <__EEPROM_REGION_LENGTH__+0x2ac>
 aa8:	83 e0       	ldi	r24, 0x03	; 3
 aaa:	b3 cf       	rjmp	.-154    	; 0xa12 <__EEPROM_REGION_LENGTH__+0x212>
 aac:	f1 2c       	mov	r15, r1
 aae:	b6 cf       	rjmp	.-148    	; 0xa1c <__EEPROM_REGION_LENGTH__+0x21c>
 ab0:	64 96       	adiw	r28, 0x14	; 20
 ab2:	e2 e1       	ldi	r30, 0x12	; 18
 ab4:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__epilogue_restores__>

Disassembly of section .text.libgcc:

00002946 <__tablejump2__>:
    2946:	ee 0f       	add	r30, r30
    2948:	ff 1f       	adc	r31, r31
    294a:	05 90       	lpm	r0, Z+
    294c:	f4 91       	lpm	r31, Z
    294e:	e0 2d       	mov	r30, r0
    2950:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

0000275e <__umulhisi3>:
    275e:	a2 9f       	mul	r26, r18
    2760:	b0 01       	movw	r22, r0
    2762:	b3 9f       	mul	r27, r19
    2764:	c0 01       	movw	r24, r0
    2766:	a3 9f       	mul	r26, r19
    2768:	70 0d       	add	r23, r0
    276a:	81 1d       	adc	r24, r1
    276c:	11 24       	eor	r1, r1
    276e:	91 1d       	adc	r25, r1
    2770:	b2 9f       	mul	r27, r18
    2772:	70 0d       	add	r23, r0
    2774:	81 1d       	adc	r24, r1
    2776:	11 24       	eor	r1, r1
    2778:	91 1d       	adc	r25, r1
    277a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

0000238c <__prologue_saves__>:
    238c:	2f 92       	push	r2
    238e:	3f 92       	push	r3
    2390:	4f 92       	push	r4
    2392:	5f 92       	push	r5
    2394:	6f 92       	push	r6
    2396:	7f 92       	push	r7
    2398:	8f 92       	push	r8
    239a:	9f 92       	push	r9
    239c:	af 92       	push	r10
    239e:	bf 92       	push	r11
    23a0:	cf 92       	push	r12
    23a2:	df 92       	push	r13
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	ca 1b       	sub	r28, r26
    23b6:	db 0b       	sbc	r29, r27
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000023fa <__epilogue_restores__>:
    23fa:	2a 88       	ldd	r2, Y+18	; 0x12
    23fc:	39 88       	ldd	r3, Y+17	; 0x11
    23fe:	48 88       	ldd	r4, Y+16	; 0x10
    2400:	5f 84       	ldd	r5, Y+15	; 0x0f
    2402:	6e 84       	ldd	r6, Y+14	; 0x0e
    2404:	7d 84       	ldd	r7, Y+13	; 0x0d
    2406:	8c 84       	ldd	r8, Y+12	; 0x0c
    2408:	9b 84       	ldd	r9, Y+11	; 0x0b
    240a:	aa 84       	ldd	r10, Y+10	; 0x0a
    240c:	b9 84       	ldd	r11, Y+9	; 0x09
    240e:	c8 84       	ldd	r12, Y+8	; 0x08
    2410:	df 80       	ldd	r13, Y+7	; 0x07
    2412:	ee 80       	ldd	r14, Y+6	; 0x06
    2414:	fd 80       	ldd	r15, Y+5	; 0x05
    2416:	0c 81       	ldd	r16, Y+4	; 0x04
    2418:	1b 81       	ldd	r17, Y+3	; 0x03
    241a:	aa 81       	ldd	r26, Y+2	; 0x02
    241c:	b9 81       	ldd	r27, Y+1	; 0x01
    241e:	ce 0f       	add	r28, r30
    2420:	d1 1d       	adc	r29, r1
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	ed 01       	movw	r28, r26
    242e:	08 95       	ret

Disassembly of section .text.avrlibc:

00002988 <atoi>:
    2988:	0e 94 8f 14 	call	0x291e	; 0x291e <atol>
    298c:	cb 01       	movw	r24, r22
    298e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000291e <atol>:
    291e:	2a e0       	ldi	r18, 0x0A	; 10
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e0       	ldi	r20, 0x00	; 0
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	0e 94 5c 05 	call	0xab8	; 0xab8 <strtol>
    292a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ab8 <strtol>:
 ab8:	2f 92       	push	r2
 aba:	3f 92       	push	r3
 abc:	4f 92       	push	r4
 abe:	5f 92       	push	r5
 ac0:	6f 92       	push	r6
 ac2:	7f 92       	push	r7
 ac4:	8f 92       	push	r8
 ac6:	af 92       	push	r10
 ac8:	bf 92       	push	r11
 aca:	cf 92       	push	r12
 acc:	df 92       	push	r13
 ace:	ef 92       	push	r14
 ad0:	0f 93       	push	r16
 ad2:	1f 93       	push	r17
 ad4:	cf 93       	push	r28
 ad6:	df 93       	push	r29
 ad8:	00 d0       	rcall	.+0      	; 0xada <strtol+0x22>
 ada:	00 d0       	rcall	.+0      	; 0xadc <strtol+0x24>
 adc:	00 d0       	rcall	.+0      	; 0xade <strtol+0x26>
 ade:	cd b7       	in	r28, 0x3d	; 61
 ae0:	de b7       	in	r29, 0x3e	; 62
 ae2:	3b 01       	movw	r6, r22
 ae4:	88 2e       	mov	r8, r24
 ae6:	5a 01       	movw	r10, r20
 ae8:	19 01       	movw	r2, r18
 aea:	41 15       	cp	r20, r1
 aec:	51 05       	cpc	r21, r1
 aee:	21 f0       	breq	.+8      	; 0xaf8 <strtol+0x40>
 af0:	fa 01       	movw	r30, r20
 af2:	60 83       	st	Z, r22
 af4:	71 83       	std	Z+1, r23	; 0x01
 af6:	82 83       	std	Z+2, r24	; 0x02
 af8:	21 14       	cp	r2, r1
 afa:	31 04       	cpc	r3, r1
 afc:	29 f0       	breq	.+10     	; 0xb08 <strtol+0x50>
 afe:	c1 01       	movw	r24, r2
 b00:	02 97       	sbiw	r24, 0x02	; 2
 b02:	83 97       	sbiw	r24, 0x23	; 35
 b04:	08 f0       	brcs	.+2      	; 0xb08 <strtol+0x50>
 b06:	1a c1       	rjmp	.+564    	; 0xd3c <strtol+0x284>
 b08:	e8 2c       	mov	r14, r8
 b0a:	63 01       	movw	r12, r6
 b0c:	ff ef       	ldi	r31, 0xFF	; 255
 b0e:	cf 1a       	sub	r12, r31
 b10:	df 0a       	sbc	r13, r31
 b12:	ef 0a       	sbc	r14, r31
 b14:	f3 01       	movw	r30, r6
 b16:	14 91       	lpm	r17, Z
 b18:	87 fc       	sbrc	r8, 7
 b1a:	10 81       	ld	r17, Z
 b1c:	81 2f       	mov	r24, r17
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	0e 94 37 14 	call	0x286e	; 0x286e <isspace>
 b24:	4c 2d       	mov	r20, r12
 b26:	3d 2d       	mov	r19, r13
 b28:	2e 2d       	mov	r18, r14
 b2a:	89 2b       	or	r24, r25
 b2c:	19 f0       	breq	.+6      	; 0xb34 <strtol+0x7c>
 b2e:	36 01       	movw	r6, r12
 b30:	8e 2c       	mov	r8, r14
 b32:	ea cf       	rjmp	.-44     	; 0xb08 <strtol+0x50>
 b34:	1d 32       	cpi	r17, 0x2D	; 45
 b36:	69 f4       	brne	.+26     	; 0xb52 <strtol+0x9a>
 b38:	e8 2c       	mov	r14, r8
 b3a:	63 01       	movw	r12, r6
 b3c:	52 e0       	ldi	r21, 0x02	; 2
 b3e:	c5 0e       	add	r12, r21
 b40:	d1 1c       	adc	r13, r1
 b42:	e1 1c       	adc	r14, r1
 b44:	e4 2f       	mov	r30, r20
 b46:	f3 2f       	mov	r31, r19
 b48:	14 91       	lpm	r17, Z
 b4a:	27 fd       	sbrc	r18, 7
 b4c:	10 81       	ld	r17, Z
 b4e:	01 e0       	ldi	r16, 0x01	; 1
 b50:	0e c0       	rjmp	.+28     	; 0xb6e <strtol+0xb6>
 b52:	1b 32       	cpi	r17, 0x2B	; 43
 b54:	59 f4       	brne	.+22     	; 0xb6c <strtol+0xb4>
 b56:	e8 2c       	mov	r14, r8
 b58:	63 01       	movw	r12, r6
 b5a:	82 e0       	ldi	r24, 0x02	; 2
 b5c:	c8 0e       	add	r12, r24
 b5e:	d1 1c       	adc	r13, r1
 b60:	e1 1c       	adc	r14, r1
 b62:	e4 2f       	mov	r30, r20
 b64:	f3 2f       	mov	r31, r19
 b66:	14 91       	lpm	r17, Z
 b68:	27 fd       	sbrc	r18, 7
 b6a:	10 81       	ld	r17, Z
 b6c:	00 e0       	ldi	r16, 0x00	; 0
 b6e:	21 14       	cp	r2, r1
 b70:	31 04       	cpc	r3, r1
 b72:	09 f1       	breq	.+66     	; 0xbb6 <strtol+0xfe>
 b74:	90 e1       	ldi	r25, 0x10	; 16
 b76:	29 16       	cp	r2, r25
 b78:	31 04       	cpc	r3, r1
 b7a:	29 f4       	brne	.+10     	; 0xb86 <strtol+0xce>
 b7c:	3f c0       	rjmp	.+126    	; 0xbfc <strtol+0x144>
 b7e:	10 e3       	ldi	r17, 0x30	; 48
 b80:	21 14       	cp	r2, r1
 b82:	31 04       	cpc	r3, r1
 b84:	21 f1       	breq	.+72     	; 0xbce <strtol+0x116>
 b86:	f8 e0       	ldi	r31, 0x08	; 8
 b88:	2f 16       	cp	r2, r31
 b8a:	31 04       	cpc	r3, r1
 b8c:	01 f1       	breq	.+64     	; 0xbce <strtol+0x116>
 b8e:	54 f4       	brge	.+20     	; 0xba4 <strtol+0xec>
 b90:	32 e0       	ldi	r19, 0x02	; 2
 b92:	23 16       	cp	r2, r19
 b94:	31 04       	cpc	r3, r1
 b96:	21 f5       	brne	.+72     	; 0xbe0 <strtol+0x128>
 b98:	41 2c       	mov	r4, r1
 b9a:	51 2c       	mov	r5, r1
 b9c:	61 2c       	mov	r6, r1
 b9e:	50 e4       	ldi	r21, 0x40	; 64
 ba0:	75 2e       	mov	r7, r21
 ba2:	4b c0       	rjmp	.+150    	; 0xc3a <strtol+0x182>
 ba4:	4a e0       	ldi	r20, 0x0A	; 10
 ba6:	24 16       	cp	r2, r20
 ba8:	31 04       	cpc	r3, r1
 baa:	39 f0       	breq	.+14     	; 0xbba <strtol+0x102>
 bac:	50 e1       	ldi	r21, 0x10	; 16
 bae:	25 16       	cp	r2, r21
 bb0:	31 04       	cpc	r3, r1
 bb2:	b1 f4       	brne	.+44     	; 0xbe0 <strtol+0x128>
 bb4:	3d c0       	rjmp	.+122    	; 0xc30 <strtol+0x178>
 bb6:	10 33       	cpi	r17, 0x30	; 48
 bb8:	19 f1       	breq	.+70     	; 0xc00 <strtol+0x148>
 bba:	3a e0       	ldi	r19, 0x0A	; 10
 bbc:	23 2e       	mov	r2, r19
 bbe:	31 2c       	mov	r3, r1
 bc0:	4c ec       	ldi	r20, 0xCC	; 204
 bc2:	44 2e       	mov	r4, r20
 bc4:	54 2c       	mov	r5, r4
 bc6:	64 2c       	mov	r6, r4
 bc8:	4c e0       	ldi	r20, 0x0C	; 12
 bca:	74 2e       	mov	r7, r20
 bcc:	36 c0       	rjmp	.+108    	; 0xc3a <strtol+0x182>
 bce:	98 e0       	ldi	r25, 0x08	; 8
 bd0:	29 2e       	mov	r2, r25
 bd2:	31 2c       	mov	r3, r1
 bd4:	41 2c       	mov	r4, r1
 bd6:	51 2c       	mov	r5, r1
 bd8:	61 2c       	mov	r6, r1
 bda:	20 e1       	ldi	r18, 0x10	; 16
 bdc:	72 2e       	mov	r7, r18
 bde:	2d c0       	rjmp	.+90     	; 0xc3a <strtol+0x182>
 be0:	60 e0       	ldi	r22, 0x00	; 0
 be2:	70 e0       	ldi	r23, 0x00	; 0
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	90 e8       	ldi	r25, 0x80	; 128
 be8:	91 01       	movw	r18, r2
 bea:	03 2c       	mov	r0, r3
 bec:	00 0c       	add	r0, r0
 bee:	44 0b       	sbc	r20, r20
 bf0:	55 0b       	sbc	r21, r21
 bf2:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__udivmodsi4>
 bf6:	29 01       	movw	r4, r18
 bf8:	3a 01       	movw	r6, r20
 bfa:	1f c0       	rjmp	.+62     	; 0xc3a <strtol+0x182>
 bfc:	10 33       	cpi	r17, 0x30	; 48
 bfe:	c1 f4       	brne	.+48     	; 0xc30 <strtol+0x178>
 c00:	f6 01       	movw	r30, r12
 c02:	84 91       	lpm	r24, Z
 c04:	e7 fc       	sbrc	r14, 7
 c06:	80 81       	ld	r24, Z
 c08:	8f 7d       	andi	r24, 0xDF	; 223
 c0a:	88 35       	cpi	r24, 0x58	; 88
 c0c:	09 f0       	breq	.+2      	; 0xc10 <strtol+0x158>
 c0e:	b7 cf       	rjmp	.-146    	; 0xb7e <strtol+0xc6>
 c10:	ae 2d       	mov	r26, r14
 c12:	c6 01       	movw	r24, r12
 c14:	01 96       	adiw	r24, 0x01	; 1
 c16:	a1 1d       	adc	r26, r1
 c18:	fc 01       	movw	r30, r24
 c1a:	14 91       	lpm	r17, Z
 c1c:	a7 fd       	sbrc	r26, 7
 c1e:	10 81       	ld	r17, Z
 c20:	e2 e0       	ldi	r30, 0x02	; 2
 c22:	ce 0e       	add	r12, r30
 c24:	d1 1c       	adc	r13, r1
 c26:	e1 1c       	adc	r14, r1
 c28:	02 60       	ori	r16, 0x02	; 2
 c2a:	60 e1       	ldi	r22, 0x10	; 16
 c2c:	26 2e       	mov	r2, r22
 c2e:	31 2c       	mov	r3, r1
 c30:	41 2c       	mov	r4, r1
 c32:	51 2c       	mov	r5, r1
 c34:	61 2c       	mov	r6, r1
 c36:	88 e0       	ldi	r24, 0x08	; 8
 c38:	78 2e       	mov	r7, r24
 c3a:	a0 e0       	ldi	r26, 0x00	; 0
 c3c:	60 e0       	ldi	r22, 0x00	; 0
 c3e:	70 e0       	ldi	r23, 0x00	; 0
 c40:	cb 01       	movw	r24, r22
 c42:	91 01       	movw	r18, r2
 c44:	03 2c       	mov	r0, r3
 c46:	00 0c       	add	r0, r0
 c48:	44 0b       	sbc	r20, r20
 c4a:	55 0b       	sbc	r21, r21
 c4c:	29 83       	std	Y+1, r18	; 0x01
 c4e:	3a 83       	std	Y+2, r19	; 0x02
 c50:	4b 83       	std	Y+3, r20	; 0x03
 c52:	5c 83       	std	Y+4, r21	; 0x04
 c54:	e0 ed       	ldi	r30, 0xD0	; 208
 c56:	e1 0f       	add	r30, r17
 c58:	ea 30       	cpi	r30, 0x0A	; 10
 c5a:	60 f0       	brcs	.+24     	; 0xc74 <strtol+0x1bc>
 c5c:	2f eb       	ldi	r18, 0xBF	; 191
 c5e:	21 0f       	add	r18, r17
 c60:	2a 31       	cpi	r18, 0x1A	; 26
 c62:	10 f4       	brcc	.+4      	; 0xc68 <strtol+0x1b0>
 c64:	e9 ec       	ldi	r30, 0xC9	; 201
 c66:	05 c0       	rjmp	.+10     	; 0xc72 <strtol+0x1ba>
 c68:	2f e9       	ldi	r18, 0x9F	; 159
 c6a:	21 0f       	add	r18, r17
 c6c:	2a 31       	cpi	r18, 0x1A	; 26
 c6e:	50 f5       	brcc	.+84     	; 0xcc4 <strtol+0x20c>
 c70:	e9 ea       	ldi	r30, 0xA9	; 169
 c72:	e1 0f       	add	r30, r17
 c74:	2e 2f       	mov	r18, r30
 c76:	30 e0       	ldi	r19, 0x00	; 0
 c78:	22 15       	cp	r18, r2
 c7a:	33 05       	cpc	r19, r3
 c7c:	1c f5       	brge	.+70     	; 0xcc4 <strtol+0x20c>
 c7e:	a7 fd       	sbrc	r26, 7
 c80:	18 c0       	rjmp	.+48     	; 0xcb2 <strtol+0x1fa>
 c82:	46 16       	cp	r4, r22
 c84:	57 06       	cpc	r5, r23
 c86:	68 06       	cpc	r6, r24
 c88:	79 06       	cpc	r7, r25
 c8a:	80 f0       	brcs	.+32     	; 0xcac <strtol+0x1f4>
 c8c:	29 81       	ldd	r18, Y+1	; 0x01
 c8e:	3a 81       	ldd	r19, Y+2	; 0x02
 c90:	4b 81       	ldd	r20, Y+3	; 0x03
 c92:	5c 81       	ldd	r21, Y+4	; 0x04
 c94:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__mulsi3>
 c98:	6e 0f       	add	r22, r30
 c9a:	71 1d       	adc	r23, r1
 c9c:	81 1d       	adc	r24, r1
 c9e:	91 1d       	adc	r25, r1
 ca0:	61 30       	cpi	r22, 0x01	; 1
 ca2:	71 05       	cpc	r23, r1
 ca4:	81 05       	cpc	r24, r1
 ca6:	30 e8       	ldi	r19, 0x80	; 128
 ca8:	93 07       	cpc	r25, r19
 caa:	10 f0       	brcs	.+4      	; 0xcb0 <strtol+0x1f8>
 cac:	af ef       	ldi	r26, 0xFF	; 255
 cae:	01 c0       	rjmp	.+2      	; 0xcb2 <strtol+0x1fa>
 cb0:	a1 e0       	ldi	r26, 0x01	; 1
 cb2:	f6 01       	movw	r30, r12
 cb4:	14 91       	lpm	r17, Z
 cb6:	e7 fc       	sbrc	r14, 7
 cb8:	10 81       	ld	r17, Z
 cba:	4f ef       	ldi	r20, 0xFF	; 255
 cbc:	c4 1a       	sub	r12, r20
 cbe:	d4 0a       	sbc	r13, r20
 cc0:	e4 0a       	sbc	r14, r20
 cc2:	c8 cf       	rjmp	.-112    	; 0xc54 <strtol+0x19c>
 cc4:	20 2f       	mov	r18, r16
 cc6:	21 70       	andi	r18, 0x01	; 1
 cc8:	a1 14       	cp	r10, r1
 cca:	b1 04       	cpc	r11, r1
 ccc:	b1 f0       	breq	.+44     	; 0xcfa <strtol+0x242>
 cce:	aa 23       	and	r26, r26
 cd0:	49 f0       	breq	.+18     	; 0xce4 <strtol+0x22c>
 cd2:	51 e0       	ldi	r21, 0x01	; 1
 cd4:	c5 1a       	sub	r12, r21
 cd6:	d1 08       	sbc	r13, r1
 cd8:	e1 08       	sbc	r14, r1
 cda:	f5 01       	movw	r30, r10
 cdc:	c0 82       	st	Z, r12
 cde:	d1 82       	std	Z+1, r13	; 0x01
 ce0:	e2 82       	std	Z+2, r14	; 0x02
 ce2:	0b c0       	rjmp	.+22     	; 0xcfa <strtol+0x242>
 ce4:	01 ff       	sbrs	r16, 1
 ce6:	1d c0       	rjmp	.+58     	; 0xd22 <strtol+0x26a>
 ce8:	f2 e0       	ldi	r31, 0x02	; 2
 cea:	cf 1a       	sub	r12, r31
 cec:	d1 08       	sbc	r13, r1
 cee:	e1 08       	sbc	r14, r1
 cf0:	f5 01       	movw	r30, r10
 cf2:	c0 82       	st	Z, r12
 cf4:	d1 82       	std	Z+1, r13	; 0x01
 cf6:	e2 82       	std	Z+2, r14	; 0x02
 cf8:	14 c0       	rjmp	.+40     	; 0xd22 <strtol+0x26a>
 cfa:	a7 ff       	sbrs	r26, 7
 cfc:	12 c0       	rjmp	.+36     	; 0xd22 <strtol+0x26a>
 cfe:	22 23       	and	r18, r18
 d00:	29 f0       	breq	.+10     	; 0xd0c <strtol+0x254>
 d02:	60 e0       	ldi	r22, 0x00	; 0
 d04:	70 e0       	ldi	r23, 0x00	; 0
 d06:	80 e0       	ldi	r24, 0x00	; 0
 d08:	90 e8       	ldi	r25, 0x80	; 128
 d0a:	04 c0       	rjmp	.+8      	; 0xd14 <strtol+0x25c>
 d0c:	6f ef       	ldi	r22, 0xFF	; 255
 d0e:	7f ef       	ldi	r23, 0xFF	; 255
 d10:	8f ef       	ldi	r24, 0xFF	; 255
 d12:	9f e7       	ldi	r25, 0x7F	; 127
 d14:	22 e2       	ldi	r18, 0x22	; 34
 d16:	30 e0       	ldi	r19, 0x00	; 0
 d18:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <errno+0x1>
 d1c:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <errno>
 d20:	09 c0       	rjmp	.+18     	; 0xd34 <strtol+0x27c>
 d22:	22 23       	and	r18, r18
 d24:	81 f0       	breq	.+32     	; 0xd46 <strtol+0x28e>
 d26:	90 95       	com	r25
 d28:	80 95       	com	r24
 d2a:	70 95       	com	r23
 d2c:	61 95       	neg	r22
 d2e:	7f 4f       	sbci	r23, 0xFF	; 255
 d30:	8f 4f       	sbci	r24, 0xFF	; 255
 d32:	9f 4f       	sbci	r25, 0xFF	; 255
 d34:	46 2f       	mov	r20, r22
 d36:	37 2f       	mov	r19, r23
 d38:	28 2f       	mov	r18, r24
 d3a:	12 c0       	rjmp	.+36     	; 0xd60 <strtol+0x2a8>
 d3c:	40 e0       	ldi	r20, 0x00	; 0
 d3e:	30 e0       	ldi	r19, 0x00	; 0
 d40:	20 e0       	ldi	r18, 0x00	; 0
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	0d c0       	rjmp	.+26     	; 0xd60 <strtol+0x2a8>
 d46:	97 ff       	sbrs	r25, 7
 d48:	f5 cf       	rjmp	.-22     	; 0xd34 <strtol+0x27c>
 d4a:	82 e2       	ldi	r24, 0x22	; 34
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <errno+0x1>
 d52:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <errno>
 d56:	6f ef       	ldi	r22, 0xFF	; 255
 d58:	7f ef       	ldi	r23, 0xFF	; 255
 d5a:	8f ef       	ldi	r24, 0xFF	; 255
 d5c:	9f e7       	ldi	r25, 0x7F	; 127
 d5e:	ea cf       	rjmp	.-44     	; 0xd34 <strtol+0x27c>
 d60:	64 2f       	mov	r22, r20
 d62:	73 2f       	mov	r23, r19
 d64:	82 2f       	mov	r24, r18
 d66:	26 96       	adiw	r28, 0x06	; 6
 d68:	0f b6       	in	r0, 0x3f	; 63
 d6a:	f8 94       	cli
 d6c:	de bf       	out	0x3e, r29	; 62
 d6e:	0f be       	out	0x3f, r0	; 63
 d70:	cd bf       	out	0x3d, r28	; 61
 d72:	df 91       	pop	r29
 d74:	cf 91       	pop	r28
 d76:	1f 91       	pop	r17
 d78:	0f 91       	pop	r16
 d7a:	ef 90       	pop	r14
 d7c:	df 90       	pop	r13
 d7e:	cf 90       	pop	r12
 d80:	bf 90       	pop	r11
 d82:	af 90       	pop	r10
 d84:	8f 90       	pop	r8
 d86:	7f 90       	pop	r7
 d88:	6f 90       	pop	r6
 d8a:	5f 90       	pop	r5
 d8c:	4f 90       	pop	r4
 d8e:	3f 90       	pop	r3
 d90:	2f 90       	pop	r2
 d92:	08 95       	ret

Disassembly of section .text.avrlibc:

00000f50 <__ftoa_engine>:
     f50:	28 30       	cpi	r18, 0x08	; 8
     f52:	08 f0       	brcs	.+2      	; 0xf56 <__ftoa_engine+0x6>
     f54:	27 e0       	ldi	r18, 0x07	; 7
     f56:	33 27       	eor	r19, r19
     f58:	da 01       	movw	r26, r20
     f5a:	99 0f       	add	r25, r25
     f5c:	31 1d       	adc	r19, r1
     f5e:	87 fd       	sbrc	r24, 7
     f60:	91 60       	ori	r25, 0x01	; 1
     f62:	00 96       	adiw	r24, 0x00	; 0
     f64:	61 05       	cpc	r22, r1
     f66:	71 05       	cpc	r23, r1
     f68:	39 f4       	brne	.+14     	; 0xf78 <__ftoa_engine+0x28>
     f6a:	32 60       	ori	r19, 0x02	; 2
     f6c:	2e 5f       	subi	r18, 0xFE	; 254
     f6e:	3d 93       	st	X+, r19
     f70:	30 e3       	ldi	r19, 0x30	; 48
     f72:	2a 95       	dec	r18
     f74:	e1 f7       	brne	.-8      	; 0xf6e <__ftoa_engine+0x1e>
     f76:	08 95       	ret
     f78:	9f 3f       	cpi	r25, 0xFF	; 255
     f7a:	30 f0       	brcs	.+12     	; 0xf88 <__ftoa_engine+0x38>
     f7c:	80 38       	cpi	r24, 0x80	; 128
     f7e:	71 05       	cpc	r23, r1
     f80:	61 05       	cpc	r22, r1
     f82:	09 f0       	breq	.+2      	; 0xf86 <__ftoa_engine+0x36>
     f84:	3c 5f       	subi	r19, 0xFC	; 252
     f86:	3c 5f       	subi	r19, 0xFC	; 252
     f88:	3d 93       	st	X+, r19
     f8a:	91 30       	cpi	r25, 0x01	; 1
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <__ftoa_engine+0x40>
     f8e:	80 68       	ori	r24, 0x80	; 128
     f90:	91 1d       	adc	r25, r1
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	1f 93       	push	r17
     f98:	0f 93       	push	r16
     f9a:	ff 92       	push	r15
     f9c:	ef 92       	push	r14
     f9e:	19 2f       	mov	r17, r25
     fa0:	98 7f       	andi	r25, 0xF8	; 248
     fa2:	96 95       	lsr	r25
     fa4:	e9 2f       	mov	r30, r25
     fa6:	96 95       	lsr	r25
     fa8:	96 95       	lsr	r25
     faa:	e9 0f       	add	r30, r25
     fac:	ff 27       	eor	r31, r31
     fae:	ee 50       	subi	r30, 0x0E	; 14
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	99 27       	eor	r25, r25
     fb4:	33 27       	eor	r19, r19
     fb6:	ee 24       	eor	r14, r14
     fb8:	ff 24       	eor	r15, r15
     fba:	a7 01       	movw	r20, r14
     fbc:	e7 01       	movw	r28, r14
     fbe:	05 90       	lpm	r0, Z+
     fc0:	08 94       	sec
     fc2:	07 94       	ror	r0
     fc4:	28 f4       	brcc	.+10     	; 0xfd0 <__ftoa_engine+0x80>
     fc6:	36 0f       	add	r19, r22
     fc8:	e7 1e       	adc	r14, r23
     fca:	f8 1e       	adc	r15, r24
     fcc:	49 1f       	adc	r20, r25
     fce:	51 1d       	adc	r21, r1
     fd0:	66 0f       	add	r22, r22
     fd2:	77 1f       	adc	r23, r23
     fd4:	88 1f       	adc	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	06 94       	lsr	r0
     fda:	a1 f7       	brne	.-24     	; 0xfc4 <__ftoa_engine+0x74>
     fdc:	05 90       	lpm	r0, Z+
     fde:	07 94       	ror	r0
     fe0:	28 f4       	brcc	.+10     	; 0xfec <__ftoa_engine+0x9c>
     fe2:	e7 0e       	add	r14, r23
     fe4:	f8 1e       	adc	r15, r24
     fe6:	49 1f       	adc	r20, r25
     fe8:	56 1f       	adc	r21, r22
     fea:	c1 1d       	adc	r28, r1
     fec:	77 0f       	add	r23, r23
     fee:	88 1f       	adc	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	66 1f       	adc	r22, r22
     ff4:	06 94       	lsr	r0
     ff6:	a1 f7       	brne	.-24     	; 0xfe0 <__ftoa_engine+0x90>
     ff8:	05 90       	lpm	r0, Z+
     ffa:	07 94       	ror	r0
     ffc:	28 f4       	brcc	.+10     	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
     ffe:	f8 0e       	add	r15, r24
    1000:	49 1f       	adc	r20, r25
    1002:	56 1f       	adc	r21, r22
    1004:	c7 1f       	adc	r28, r23
    1006:	d1 1d       	adc	r29, r1
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	66 1f       	adc	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	06 94       	lsr	r0
    1012:	a1 f7       	brne	.-24     	; 0xffc <__ftoa_engine+0xac>
    1014:	05 90       	lpm	r0, Z+
    1016:	07 94       	ror	r0
    1018:	20 f4       	brcc	.+8      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    101a:	49 0f       	add	r20, r25
    101c:	56 1f       	adc	r21, r22
    101e:	c7 1f       	adc	r28, r23
    1020:	d8 1f       	adc	r29, r24
    1022:	99 0f       	add	r25, r25
    1024:	66 1f       	adc	r22, r22
    1026:	77 1f       	adc	r23, r23
    1028:	88 1f       	adc	r24, r24
    102a:	06 94       	lsr	r0
    102c:	a9 f7       	brne	.-22     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
    102e:	84 91       	lpm	r24, Z
    1030:	10 95       	com	r17
    1032:	17 70       	andi	r17, 0x07	; 7
    1034:	41 f0       	breq	.+16     	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
    1036:	d6 95       	lsr	r29
    1038:	c7 95       	ror	r28
    103a:	57 95       	ror	r21
    103c:	47 95       	ror	r20
    103e:	f7 94       	ror	r15
    1040:	e7 94       	ror	r14
    1042:	1a 95       	dec	r17
    1044:	c1 f7       	brne	.-16     	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
    1046:	e8 e9       	ldi	r30, 0x98	; 152
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	68 94       	set
    104c:	15 90       	lpm	r1, Z+
    104e:	15 91       	lpm	r17, Z+
    1050:	35 91       	lpm	r19, Z+
    1052:	65 91       	lpm	r22, Z+
    1054:	95 91       	lpm	r25, Z+
    1056:	05 90       	lpm	r0, Z+
    1058:	7f e2       	ldi	r23, 0x2F	; 47
    105a:	73 95       	inc	r23
    105c:	e1 18       	sub	r14, r1
    105e:	f1 0a       	sbc	r15, r17
    1060:	43 0b       	sbc	r20, r19
    1062:	56 0b       	sbc	r21, r22
    1064:	c9 0b       	sbc	r28, r25
    1066:	d0 09       	sbc	r29, r0
    1068:	c0 f7       	brcc	.-16     	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
    106a:	e1 0c       	add	r14, r1
    106c:	f1 1e       	adc	r15, r17
    106e:	43 1f       	adc	r20, r19
    1070:	56 1f       	adc	r21, r22
    1072:	c9 1f       	adc	r28, r25
    1074:	d0 1d       	adc	r29, r0
    1076:	7e f4       	brtc	.+30     	; 0x1096 <__DATA_REGION_LENGTH__+0x96>
    1078:	70 33       	cpi	r23, 0x30	; 48
    107a:	11 f4       	brne	.+4      	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
    107c:	8a 95       	dec	r24
    107e:	e6 cf       	rjmp	.-52     	; 0x104c <__DATA_REGION_LENGTH__+0x4c>
    1080:	e8 94       	clt
    1082:	01 50       	subi	r16, 0x01	; 1
    1084:	30 f0       	brcs	.+12     	; 0x1092 <__DATA_REGION_LENGTH__+0x92>
    1086:	08 0f       	add	r16, r24
    1088:	0a f4       	brpl	.+2      	; 0x108c <__DATA_REGION_LENGTH__+0x8c>
    108a:	00 27       	eor	r16, r16
    108c:	02 17       	cp	r16, r18
    108e:	08 f4       	brcc	.+2      	; 0x1092 <__DATA_REGION_LENGTH__+0x92>
    1090:	20 2f       	mov	r18, r16
    1092:	23 95       	inc	r18
    1094:	02 2f       	mov	r16, r18
    1096:	7a 33       	cpi	r23, 0x3A	; 58
    1098:	28 f0       	brcs	.+10     	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    109a:	79 e3       	ldi	r23, 0x39	; 57
    109c:	7d 93       	st	X+, r23
    109e:	2a 95       	dec	r18
    10a0:	e9 f7       	brne	.-6      	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    10a2:	10 c0       	rjmp	.+32     	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
    10a4:	7d 93       	st	X+, r23
    10a6:	2a 95       	dec	r18
    10a8:	89 f6       	brne	.-94     	; 0x104c <__DATA_REGION_LENGTH__+0x4c>
    10aa:	06 94       	lsr	r0
    10ac:	97 95       	ror	r25
    10ae:	67 95       	ror	r22
    10b0:	37 95       	ror	r19
    10b2:	17 95       	ror	r17
    10b4:	17 94       	ror	r1
    10b6:	e1 18       	sub	r14, r1
    10b8:	f1 0a       	sbc	r15, r17
    10ba:	43 0b       	sbc	r20, r19
    10bc:	56 0b       	sbc	r21, r22
    10be:	c9 0b       	sbc	r28, r25
    10c0:	d0 09       	sbc	r29, r0
    10c2:	98 f0       	brcs	.+38     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10c4:	23 95       	inc	r18
    10c6:	7e 91       	ld	r23, -X
    10c8:	73 95       	inc	r23
    10ca:	7a 33       	cpi	r23, 0x3A	; 58
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    10ce:	70 e3       	ldi	r23, 0x30	; 48
    10d0:	7c 93       	st	X, r23
    10d2:	20 13       	cpse	r18, r16
    10d4:	b8 f7       	brcc	.-18     	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
    10d6:	7e 91       	ld	r23, -X
    10d8:	70 61       	ori	r23, 0x10	; 16
    10da:	7d 93       	st	X+, r23
    10dc:	30 f0       	brcs	.+12     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10de:	83 95       	inc	r24
    10e0:	71 e3       	ldi	r23, 0x31	; 49
    10e2:	7d 93       	st	X+, r23
    10e4:	70 e3       	ldi	r23, 0x30	; 48
    10e6:	2a 95       	dec	r18
    10e8:	e1 f7       	brne	.-8      	; 0x10e2 <__DATA_REGION_LENGTH__+0xe2>
    10ea:	11 24       	eor	r1, r1
    10ec:	ef 90       	pop	r14
    10ee:	ff 90       	pop	r15
    10f0:	0f 91       	pop	r16
    10f2:	1f 91       	pop	r17
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	99 27       	eor	r25, r25
    10fa:	87 fd       	sbrc	r24, 7
    10fc:	90 95       	com	r25
    10fe:	08 95       	ret

Disassembly of section .text.avrlibc:

0000286e <isspace>:
    286e:	91 11       	cpse	r25, r1
    2870:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__ctype_isfalse>
    2874:	80 32       	cpi	r24, 0x20	; 32
    2876:	19 f0       	breq	.+6      	; 0x287e <isspace+0x10>
    2878:	89 50       	subi	r24, 0x09	; 9
    287a:	85 50       	subi	r24, 0x05	; 5
    287c:	c8 f7       	brcc	.-14     	; 0x2870 <isspace+0x2>
    287e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000249a <memcpy>:
    249a:	cf 92       	push	r12
    249c:	df 92       	push	r13
    249e:	ef 92       	push	r14
    24a0:	dc 01       	movw	r26, r24
    24a2:	6a 01       	movw	r12, r20
    24a4:	e6 2e       	mov	r14, r22
    24a6:	28 0f       	add	r18, r24
    24a8:	39 1f       	adc	r19, r25
    24aa:	a2 17       	cp	r26, r18
    24ac:	b3 07       	cpc	r27, r19
    24ae:	51 f0       	breq	.+20     	; 0x24c4 <memcpy+0x2a>
    24b0:	f6 01       	movw	r30, r12
    24b2:	44 91       	lpm	r20, Z
    24b4:	e7 fc       	sbrc	r14, 7
    24b6:	40 81       	ld	r20, Z
    24b8:	4d 93       	st	X+, r20
    24ba:	4f ef       	ldi	r20, 0xFF	; 255
    24bc:	c4 1a       	sub	r12, r20
    24be:	d4 0a       	sbc	r13, r20
    24c0:	e4 0a       	sbc	r14, r20
    24c2:	f3 cf       	rjmp	.-26     	; 0x24aa <memcpy+0x10>
    24c4:	ef 90       	pop	r14
    24c6:	df 90       	pop	r13
    24c8:	cf 90       	pop	r12
    24ca:	08 95       	ret

Disassembly of section .text.avrlibc:

00002224 <strcmp>:
    2224:	cf 92       	push	r12
    2226:	df 92       	push	r13
    2228:	ef 92       	push	r14
    222a:	6b 01       	movw	r12, r22
    222c:	e8 2e       	mov	r14, r24
    222e:	f6 01       	movw	r30, r12
    2230:	84 91       	lpm	r24, Z
    2232:	e7 fc       	sbrc	r14, 7
    2234:	80 81       	ld	r24, Z
    2236:	f9 01       	movw	r30, r18
    2238:	54 91       	lpm	r21, Z
    223a:	47 fd       	sbrc	r20, 7
    223c:	50 81       	ld	r21, Z
    223e:	85 13       	cpse	r24, r21
    2240:	0b c0       	rjmp	.+22     	; 0x2258 <strcmp+0x34>
    2242:	88 23       	and	r24, r24
    2244:	41 f0       	breq	.+16     	; 0x2256 <strcmp+0x32>
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	c8 1a       	sub	r12, r24
    224a:	d8 0a       	sbc	r13, r24
    224c:	e8 0a       	sbc	r14, r24
    224e:	2f 5f       	subi	r18, 0xFF	; 255
    2250:	3f 4f       	sbci	r19, 0xFF	; 255
    2252:	4f 4f       	sbci	r20, 0xFF	; 255
    2254:	ec cf       	rjmp	.-40     	; 0x222e <strcmp+0xa>
    2256:	58 2f       	mov	r21, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	85 1b       	sub	r24, r21
    225c:	91 09       	sbc	r25, r1
    225e:	ef 90       	pop	r14
    2260:	df 90       	pop	r13
    2262:	cf 90       	pop	r12
    2264:	08 95       	ret

Disassembly of section .text.avrlibc:

00001d46 <strncmp>:
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	6b 01       	movw	r12, r22
    1d52:	e8 2e       	mov	r14, r24
    1d54:	01 15       	cp	r16, r1
    1d56:	11 05       	cpc	r17, r1
    1d58:	19 f1       	breq	.+70     	; 0x1da0 <strncmp+0x5a>
    1d5a:	01 50       	subi	r16, 0x01	; 1
    1d5c:	11 09       	sbc	r17, r1
    1d5e:	f6 01       	movw	r30, r12
    1d60:	84 91       	lpm	r24, Z
    1d62:	e7 fc       	sbrc	r14, 7
    1d64:	80 81       	ld	r24, Z
    1d66:	88 23       	and	r24, r24
    1d68:	99 f0       	breq	.+38     	; 0x1d90 <strncmp+0x4a>
    1d6a:	f9 01       	movw	r30, r18
    1d6c:	94 91       	lpm	r25, Z
    1d6e:	47 fd       	sbrc	r20, 7
    1d70:	90 81       	ld	r25, Z
    1d72:	99 23       	and	r25, r25
    1d74:	69 f0       	breq	.+26     	; 0x1d90 <strncmp+0x4a>
    1d76:	01 15       	cp	r16, r1
    1d78:	11 05       	cpc	r17, r1
    1d7a:	51 f0       	breq	.+20     	; 0x1d90 <strncmp+0x4a>
    1d7c:	89 13       	cpse	r24, r25
    1d7e:	08 c0       	rjmp	.+16     	; 0x1d90 <strncmp+0x4a>
    1d80:	8f ef       	ldi	r24, 0xFF	; 255
    1d82:	c8 1a       	sub	r12, r24
    1d84:	d8 0a       	sbc	r13, r24
    1d86:	e8 0a       	sbc	r14, r24
    1d88:	2f 5f       	subi	r18, 0xFF	; 255
    1d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8c:	4f 4f       	sbci	r20, 0xFF	; 255
    1d8e:	e5 cf       	rjmp	.-54     	; 0x1d5a <strncmp+0x14>
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	f9 01       	movw	r30, r18
    1d94:	24 91       	lpm	r18, Z
    1d96:	47 fd       	sbrc	r20, 7
    1d98:	20 81       	ld	r18, Z
    1d9a:	82 1b       	sub	r24, r18
    1d9c:	91 09       	sbc	r25, r1
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <strncmp+0x5e>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ef 90       	pop	r14
    1daa:	df 90       	pop	r13
    1dac:	cf 90       	pop	r12
    1dae:	08 95       	ret

Disassembly of section .text.avrlibc:

000025b8 <strlen>:
    25b8:	cf 92       	push	r12
    25ba:	df 92       	push	r13
    25bc:	ef 92       	push	r14
    25be:	6b 01       	movw	r12, r22
    25c0:	e8 2e       	mov	r14, r24
    25c2:	a8 2f       	mov	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	fc 01       	movw	r30, r24
    25c8:	24 91       	lpm	r18, Z
    25ca:	a7 fd       	sbrc	r26, 7
    25cc:	20 81       	ld	r18, Z
    25ce:	22 23       	and	r18, r18
    25d0:	19 f0       	breq	.+6      	; 0x25d8 <strlen+0x20>
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	a1 1d       	adc	r26, r1
    25d6:	f7 cf       	rjmp	.-18     	; 0x25c6 <strlen+0xe>
    25d8:	8c 19       	sub	r24, r12
    25da:	9d 09       	sbc	r25, r13
    25dc:	ef 90       	pop	r14
    25de:	df 90       	pop	r13
    25e0:	cf 90       	pop	r12
    25e2:	08 95       	ret

Disassembly of section .text.avrlibc:

0000277c <strcpy>:
    277c:	9a 01       	movw	r18, r20
    277e:	46 2f       	mov	r20, r22
    2780:	dc 01       	movw	r26, r24
    2782:	f9 01       	movw	r30, r18
    2784:	54 91       	lpm	r21, Z
    2786:	47 fd       	sbrc	r20, 7
    2788:	50 81       	ld	r21, Z
    278a:	5d 93       	st	X+, r21
    278c:	55 23       	and	r21, r21
    278e:	21 f0       	breq	.+8      	; 0x2798 <strcpy+0x1c>
    2790:	2f 5f       	subi	r18, 0xFF	; 255
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	4f 4f       	sbci	r20, 0xFF	; 255
    2796:	f5 cf       	rjmp	.-22     	; 0x2782 <strcpy+0x6>
    2798:	08 95       	ret

Disassembly of section .text.avrlibc:

00002430 <strnlen>:
    2430:	cf 92       	push	r12
    2432:	df 92       	push	r13
    2434:	ef 92       	push	r14
    2436:	6b 01       	movw	r12, r22
    2438:	e8 2e       	mov	r14, r24
    243a:	a8 2f       	mov	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	41 15       	cp	r20, r1
    2440:	51 05       	cpc	r21, r1
    2442:	31 f4       	brne	.+12     	; 0x2450 <strnlen+0x20>
    2444:	8c 19       	sub	r24, r12
    2446:	9d 09       	sbc	r25, r13
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
    244e:	08 95       	ret
    2450:	fc 01       	movw	r30, r24
    2452:	24 91       	lpm	r18, Z
    2454:	a7 fd       	sbrc	r26, 7
    2456:	20 81       	ld	r18, Z
    2458:	22 23       	and	r18, r18
    245a:	a1 f3       	breq	.-24     	; 0x2444 <strnlen+0x14>
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	a1 1d       	adc	r26, r1
    2460:	41 50       	subi	r20, 0x01	; 1
    2462:	51 09       	sbc	r21, r1
    2464:	ec cf       	rjmp	.-40     	; 0x243e <strnlen+0xe>

Disassembly of section .text.avrlibc:

00001b7a <fputc>:
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	fb 01       	movw	r30, r22
    1b84:	24 81       	ldd	r18, Z+4	; 0x04
    1b86:	21 fd       	sbrc	r18, 1
    1b88:	03 c0       	rjmp	.+6      	; 0x1b90 <fputc+0x16>
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
    1b8c:	9f ef       	ldi	r25, 0xFF	; 255
    1b8e:	2c c0       	rjmp	.+88     	; 0x1be8 <fputc+0x6e>
    1b90:	22 ff       	sbrs	r18, 2
    1b92:	16 c0       	rjmp	.+44     	; 0x1bc0 <fputc+0x46>
    1b94:	47 81       	ldd	r20, Z+7	; 0x07
    1b96:	50 85       	ldd	r21, Z+8	; 0x08
    1b98:	25 81       	ldd	r18, Z+5	; 0x05
    1b9a:	36 81       	ldd	r19, Z+6	; 0x06
    1b9c:	42 17       	cp	r20, r18
    1b9e:	53 07       	cpc	r21, r19
    1ba0:	44 f4       	brge	.+16     	; 0x1bb2 <fputc+0x38>
    1ba2:	a0 81       	ld	r26, Z
    1ba4:	b1 81       	ldd	r27, Z+1	; 0x01
    1ba6:	9d 01       	movw	r18, r26
    1ba8:	2f 5f       	subi	r18, 0xFF	; 255
    1baa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bac:	31 83       	std	Z+1, r19	; 0x01
    1bae:	20 83       	st	Z, r18
    1bb0:	8c 93       	st	X, r24
    1bb2:	27 81       	ldd	r18, Z+7	; 0x07
    1bb4:	30 85       	ldd	r19, Z+8	; 0x08
    1bb6:	2f 5f       	subi	r18, 0xFF	; 255
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	30 87       	std	Z+8, r19	; 0x08
    1bbc:	27 83       	std	Z+7, r18	; 0x07
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <fputc+0x6e>
    1bc0:	8b 01       	movw	r16, r22
    1bc2:	ec 01       	movw	r28, r24
    1bc4:	fb 01       	movw	r30, r22
    1bc6:	01 84       	ldd	r0, Z+9	; 0x09
    1bc8:	f2 85       	ldd	r31, Z+10	; 0x0a
    1bca:	e0 2d       	mov	r30, r0
    1bcc:	09 95       	icall
    1bce:	89 2b       	or	r24, r25
    1bd0:	e1 f6       	brne	.-72     	; 0x1b8a <fputc+0x10>
    1bd2:	d8 01       	movw	r26, r16
    1bd4:	17 96       	adiw	r26, 0x07	; 7
    1bd6:	8d 91       	ld	r24, X+
    1bd8:	9c 91       	ld	r25, X
    1bda:	18 97       	sbiw	r26, 0x08	; 8
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	18 96       	adiw	r26, 0x08	; 8
    1be0:	9c 93       	st	X, r25
    1be2:	8e 93       	st	-X, r24
    1be4:	17 97       	sbiw	r26, 0x07	; 7
    1be6:	ce 01       	movw	r24, r28
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	08 95       	ret

Disassembly of section .text.avrlibc:

00002112 <sprintf>:
    2112:	af e0       	ldi	r26, 0x0F	; 15
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	ef e8       	ldi	r30, 0x8F	; 143
    2118:	f0 e1       	ldi	r31, 0x10	; 16
    211a:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__prologue_saves__+0x1c>
    211e:	0e 89       	ldd	r16, Y+22	; 0x16
    2120:	1f 89       	ldd	r17, Y+23	; 0x17
    2122:	86 e0       	ldi	r24, 0x06	; 6
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	1a 83       	std	Y+2, r17	; 0x02
    2128:	09 83       	std	Y+1, r16	; 0x01
    212a:	8f ef       	ldi	r24, 0xFF	; 255
    212c:	9f e7       	ldi	r25, 0x7F	; 127
    212e:	9f 83       	std	Y+7, r25	; 0x07
    2130:	8e 83       	std	Y+6, r24	; 0x06
    2132:	9e 01       	movw	r18, r28
    2134:	25 5e       	subi	r18, 0xE5	; 229
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	48 8d       	ldd	r20, Y+24	; 0x18
    213a:	59 8d       	ldd	r21, Y+25	; 0x19
    213c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    213e:	ce 01       	movw	r24, r28
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	0e 94 ba 01 	call	0x374	; 0x374 <vfprintf>
    2146:	e8 85       	ldd	r30, Y+8	; 0x08
    2148:	f9 85       	ldd	r31, Y+9	; 0x09
    214a:	e0 0f       	add	r30, r16
    214c:	f1 1f       	adc	r31, r17
    214e:	10 82       	st	Z, r1
    2150:	2f 96       	adiw	r28, 0x0f	; 15
    2152:	e4 e0       	ldi	r30, 0x04	; 4
    2154:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00001670 <__ultoa_invert>:
    1670:	fa 01       	movw	r30, r20
    1672:	aa 27       	eor	r26, r26
    1674:	28 30       	cpi	r18, 0x08	; 8
    1676:	51 f1       	breq	.+84     	; 0x16cc <__ultoa_invert+0x5c>
    1678:	20 31       	cpi	r18, 0x10	; 16
    167a:	81 f1       	breq	.+96     	; 0x16dc <__ultoa_invert+0x6c>
    167c:	e8 94       	clt
    167e:	6f 93       	push	r22
    1680:	6e 7f       	andi	r22, 0xFE	; 254
    1682:	6e 5f       	subi	r22, 0xFE	; 254
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	8f 4f       	sbci	r24, 0xFF	; 255
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	af 4f       	sbci	r26, 0xFF	; 255
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	3e d0       	rcall	.+124    	; 0x170c <__ultoa_invert+0x9c>
    1690:	b4 e0       	ldi	r27, 0x04	; 4
    1692:	3c d0       	rcall	.+120    	; 0x170c <__ultoa_invert+0x9c>
    1694:	67 0f       	add	r22, r23
    1696:	78 1f       	adc	r23, r24
    1698:	89 1f       	adc	r24, r25
    169a:	9a 1f       	adc	r25, r26
    169c:	a1 1d       	adc	r26, r1
    169e:	68 0f       	add	r22, r24
    16a0:	79 1f       	adc	r23, r25
    16a2:	8a 1f       	adc	r24, r26
    16a4:	91 1d       	adc	r25, r1
    16a6:	a1 1d       	adc	r26, r1
    16a8:	6a 0f       	add	r22, r26
    16aa:	71 1d       	adc	r23, r1
    16ac:	81 1d       	adc	r24, r1
    16ae:	91 1d       	adc	r25, r1
    16b0:	a1 1d       	adc	r26, r1
    16b2:	20 d0       	rcall	.+64     	; 0x16f4 <__ultoa_invert+0x84>
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <__ultoa_invert+0x48>
    16b6:	68 94       	set
    16b8:	3f 91       	pop	r19
    16ba:	2a e0       	ldi	r18, 0x0A	; 10
    16bc:	26 9f       	mul	r18, r22
    16be:	11 24       	eor	r1, r1
    16c0:	30 19       	sub	r19, r0
    16c2:	30 5d       	subi	r19, 0xD0	; 208
    16c4:	31 93       	st	Z+, r19
    16c6:	de f6       	brtc	.-74     	; 0x167e <__ultoa_invert+0xe>
    16c8:	cf 01       	movw	r24, r30
    16ca:	08 95       	ret
    16cc:	46 2f       	mov	r20, r22
    16ce:	47 70       	andi	r20, 0x07	; 7
    16d0:	40 5d       	subi	r20, 0xD0	; 208
    16d2:	41 93       	st	Z+, r20
    16d4:	b3 e0       	ldi	r27, 0x03	; 3
    16d6:	0f d0       	rcall	.+30     	; 0x16f6 <__ultoa_invert+0x86>
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <__ultoa_invert+0x5c>
    16da:	f6 cf       	rjmp	.-20     	; 0x16c8 <__ultoa_invert+0x58>
    16dc:	46 2f       	mov	r20, r22
    16de:	4f 70       	andi	r20, 0x0F	; 15
    16e0:	40 5d       	subi	r20, 0xD0	; 208
    16e2:	4a 33       	cpi	r20, 0x3A	; 58
    16e4:	18 f0       	brcs	.+6      	; 0x16ec <__ultoa_invert+0x7c>
    16e6:	49 5d       	subi	r20, 0xD9	; 217
    16e8:	31 fd       	sbrc	r19, 1
    16ea:	40 52       	subi	r20, 0x20	; 32
    16ec:	41 93       	st	Z+, r20
    16ee:	02 d0       	rcall	.+4      	; 0x16f4 <__ultoa_invert+0x84>
    16f0:	a9 f7       	brne	.-22     	; 0x16dc <__ultoa_invert+0x6c>
    16f2:	ea cf       	rjmp	.-44     	; 0x16c8 <__ultoa_invert+0x58>
    16f4:	b4 e0       	ldi	r27, 0x04	; 4
    16f6:	a6 95       	lsr	r26
    16f8:	97 95       	ror	r25
    16fa:	87 95       	ror	r24
    16fc:	77 95       	ror	r23
    16fe:	67 95       	ror	r22
    1700:	ba 95       	dec	r27
    1702:	c9 f7       	brne	.-14     	; 0x16f6 <__ultoa_invert+0x86>
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	61 05       	cpc	r22, r1
    1708:	71 05       	cpc	r23, r1
    170a:	08 95       	ret
    170c:	9b 01       	movw	r18, r22
    170e:	ac 01       	movw	r20, r24
    1710:	0a 2e       	mov	r0, r26
    1712:	06 94       	lsr	r0
    1714:	57 95       	ror	r21
    1716:	47 95       	ror	r20
    1718:	37 95       	ror	r19
    171a:	27 95       	ror	r18
    171c:	ba 95       	dec	r27
    171e:	c9 f7       	brne	.-14     	; 0x1712 <__ultoa_invert+0xa2>
    1720:	62 0f       	add	r22, r18
    1722:	73 1f       	adc	r23, r19
    1724:	84 1f       	adc	r24, r20
    1726:	95 1f       	adc	r25, r21
    1728:	a0 1d       	adc	r26, r0
    172a:	08 95       	ret

Disassembly of section .text.avrlibc:

000029a2 <__ctype_isfalse>:
    29a2:	99 27       	eor	r25, r25
    29a4:	88 27       	eor	r24, r24

000029a6 <__ctype_istrue>:
    29a6:	08 95       	ret

Disassembly of section .text.avrlibc:

0000265a <eeprom_read_block>:
    265a:	ba 01       	movw	r22, r20
    265c:	a9 01       	movw	r20, r18
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22

00002662 <eeprom_read_blraw>:
    2662:	fc 01       	movw	r30, r24
    2664:	f9 99       	sbic	0x1f, 1	; 31
    2666:	fe cf       	rjmp	.-4      	; 0x2664 <eeprom_read_blraw+0x2>
    2668:	06 c0       	rjmp	.+12     	; 0x2676 <eeprom_read_blraw+0x14>
    266a:	f2 bd       	out	0x22, r31	; 34
    266c:	e1 bd       	out	0x21, r30	; 33
    266e:	f8 9a       	sbi	0x1f, 0	; 31
    2670:	31 96       	adiw	r30, 0x01	; 1
    2672:	00 b4       	in	r0, 0x20	; 32
    2674:	0d 92       	st	X+, r0
    2676:	41 50       	subi	r20, 0x01	; 1
    2678:	50 40       	sbci	r21, 0x00	; 0
    267a:	b8 f7       	brcc	.-18     	; 0x266a <eeprom_read_blraw+0x8>
    267c:	08 95       	ret

Disassembly of section .text.avrlibc:

00002880 <eeprom_read_byte>:
    2880:	cb 01       	movw	r24, r22
    2882:	f9 99       	sbic	0x1f, 1	; 31
    2884:	fe cf       	rjmp	.-4      	; 0x2882 <eeprom_read_byte+0x2>
    2886:	92 bd       	out	0x22, r25	; 34
    2888:	81 bd       	out	0x21, r24	; 33
    288a:	f8 9a       	sbi	0x1f, 0	; 31
    288c:	99 27       	eor	r25, r25
    288e:	80 b5       	in	r24, 0x20	; 32
    2890:	08 95       	ret

Disassembly of section .text.avrlibc:

0000292c <eeprom_read_dword>:
    292c:	cb 01       	movw	r24, r22
    292e:	a6 e1       	ldi	r26, 0x16	; 22
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	44 e0       	ldi	r20, 0x04	; 4
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	0c 94 31 13 	jmp	0x2662	; 0x2662 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000219c <eeprom_update_block>:
    219c:	cf 92       	push	r12
    219e:	df 92       	push	r13
    21a0:	ef 92       	push	r14
    21a2:	21 50       	subi	r18, 0x01	; 1
    21a4:	31 09       	sbc	r19, r1
    21a6:	c0 f0       	brcs	.+48     	; 0x21d8 <eeprom_update_block+0x3c>
    21a8:	6b 01       	movw	r12, r22
    21aa:	e8 2e       	mov	r14, r24
    21ac:	c2 0e       	add	r12, r18
    21ae:	d3 1e       	adc	r13, r19
    21b0:	e1 1c       	adc	r14, r1
    21b2:	ca 01       	movw	r24, r20
    21b4:	82 0f       	add	r24, r18
    21b6:	93 1f       	adc	r25, r19
    21b8:	42 2f       	mov	r20, r18
    21ba:	73 2f       	mov	r23, r19
    21bc:	f6 01       	movw	r30, r12
    21be:	5e 2d       	mov	r21, r14
    21c0:	0e 94 b3 14 	call	0x2966	; 0x2966 <__xload_1>
    21c4:	26 2f       	mov	r18, r22
    21c6:	0e 94 40 13 	call	0x2680	; 0x2680 <eeprom_update_r18>
    21ca:	31 e0       	ldi	r19, 0x01	; 1
    21cc:	c3 1a       	sub	r12, r19
    21ce:	d1 08       	sbc	r13, r1
    21d0:	e1 08       	sbc	r14, r1
    21d2:	41 50       	subi	r20, 0x01	; 1
    21d4:	70 40       	sbci	r23, 0x00	; 0
    21d6:	90 f7       	brcc	.-28     	; 0x21bc <eeprom_update_block+0x20>
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	08 95       	ret

Disassembly of section .text.avrlibc:

0000267e <eeprom_update_byte>:
    267e:	26 2f       	mov	r18, r22

00002680 <eeprom_update_r18>:
    2680:	f9 99       	sbic	0x1f, 1	; 31
    2682:	fe cf       	rjmp	.-4      	; 0x2680 <eeprom_update_r18>
    2684:	92 bd       	out	0x22, r25	; 34
    2686:	81 bd       	out	0x21, r24	; 33
    2688:	f8 9a       	sbi	0x1f, 0	; 31
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	00 b4       	in	r0, 0x20	; 32
    268e:	02 16       	cp	r0, r18
    2690:	39 f0       	breq	.+14     	; 0x26a0 <eeprom_update_r18+0x20>
    2692:	1f ba       	out	0x1f, r1	; 31
    2694:	20 bd       	out	0x20, r18	; 32
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	fa 9a       	sbi	0x1f, 2	; 31
    269c:	f9 9a       	sbi	0x1f, 1	; 31
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	08 95       	ret

Disassembly of section .text.avrlibc:

000027ea <eeprom_update_dword>:
    27ea:	03 96       	adiw	r24, 0x03	; 3
    27ec:	27 2f       	mov	r18, r23
    27ee:	0e 94 40 13 	call	0x2680	; 0x2680 <eeprom_update_r18>
    27f2:	0e 94 3f 13 	call	0x267e	; 0x267e <eeprom_update_byte>
    27f6:	25 2f       	mov	r18, r21
    27f8:	0e 94 40 13 	call	0x2680	; 0x2680 <eeprom_update_r18>
    27fc:	24 2f       	mov	r18, r20
    27fe:	0c 94 40 13 	jmp	0x2680	; 0x2680 <eeprom_update_r18>

Disassembly of section .text.libgcc.mul:

000026e4 <__mulsi3>:
    26e4:	db 01       	movw	r26, r22
    26e6:	8f 93       	push	r24
    26e8:	9f 93       	push	r25
    26ea:	0e 94 22 14 	call	0x2844	; 0x2844 <__muluhisi3>
    26ee:	bf 91       	pop	r27
    26f0:	af 91       	pop	r26
    26f2:	a2 9f       	mul	r26, r18
    26f4:	80 0d       	add	r24, r0
    26f6:	91 1d       	adc	r25, r1
    26f8:	a3 9f       	mul	r26, r19
    26fa:	90 0d       	add	r25, r0
    26fc:	b2 9f       	mul	r27, r18
    26fe:	90 0d       	add	r25, r0
    2700:	11 24       	eor	r1, r1
    2702:	08 95       	ret

Disassembly of section .text.libgcc.div:

000021e0 <__udivmodsi4>:
    21e0:	a1 e2       	ldi	r26, 0x21	; 33
    21e2:	1a 2e       	mov	r1, r26
    21e4:	aa 1b       	sub	r26, r26
    21e6:	bb 1b       	sub	r27, r27
    21e8:	fd 01       	movw	r30, r26
    21ea:	0d c0       	rjmp	.+26     	; 0x2206 <__udivmodsi4_ep>

000021ec <__udivmodsi4_loop>:
    21ec:	aa 1f       	adc	r26, r26
    21ee:	bb 1f       	adc	r27, r27
    21f0:	ee 1f       	adc	r30, r30
    21f2:	ff 1f       	adc	r31, r31
    21f4:	a2 17       	cp	r26, r18
    21f6:	b3 07       	cpc	r27, r19
    21f8:	e4 07       	cpc	r30, r20
    21fa:	f5 07       	cpc	r31, r21
    21fc:	20 f0       	brcs	.+8      	; 0x2206 <__udivmodsi4_ep>
    21fe:	a2 1b       	sub	r26, r18
    2200:	b3 0b       	sbc	r27, r19
    2202:	e4 0b       	sbc	r30, r20
    2204:	f5 0b       	sbc	r31, r21

00002206 <__udivmodsi4_ep>:
    2206:	66 1f       	adc	r22, r22
    2208:	77 1f       	adc	r23, r23
    220a:	88 1f       	adc	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	1a 94       	dec	r1
    2210:	69 f7       	brne	.-38     	; 0x21ec <__udivmodsi4_loop>
    2212:	60 95       	com	r22
    2214:	70 95       	com	r23
    2216:	80 95       	com	r24
    2218:	90 95       	com	r25
    221a:	9b 01       	movw	r18, r22
    221c:	ac 01       	movw	r20, r24
    221e:	bd 01       	movw	r22, r26
    2220:	cf 01       	movw	r24, r30
    2222:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00002844 <__muluhisi3>:
    2844:	0e 94 af 13 	call	0x275e	; 0x275e <__umulhisi3>
    2848:	a5 9f       	mul	r26, r21
    284a:	90 0d       	add	r25, r0
    284c:	b4 9f       	mul	r27, r20
    284e:	90 0d       	add	r25, r0
    2850:	a4 9f       	mul	r26, r20
    2852:	80 0d       	add	r24, r0
    2854:	91 1d       	adc	r25, r1
    2856:	11 24       	eor	r1, r1
    2858:	08 95       	ret

Disassembly of section .text.libgcc:

00002966 <__xload_1>:
    2966:	57 fd       	sbrc	r21, 7
    2968:	60 81       	ld	r22, Z
    296a:	57 ff       	sbrs	r21, 7
    296c:	64 91       	lpm	r22, Z
    296e:	08 95       	ret
