
methane_sensor_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004254  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ea  00800100  00800100  00004254  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00004254  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000070  00000000  00000000  000042af  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000968  00000000  00000000  00004320  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c72a  00000000  00000000  00004c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000275e  00000000  00000000  000113b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004746  00000000  00000000  00013b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001828  00000000  00000000  00018258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9c  00000000  00000000  00019a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000050f0  00000000  00000000  0001a51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000740  00000000  00000000  0001f60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00004190  00004190  00004244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001fd4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.PM_HAL_adc_power_init 0000000e  00003f82  00003f82  00004036  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.PM_HAL_adc_power 00000014  00003ea0  00003ea0  00003f54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.PM_HAL_meth_power_init 0000000e  00003f90  00003f90  00004044  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.PM_HAL_meth_power 00000014  00003eb4  00003eb4  00003f68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PM_HAL_SCD30_power_init 0000000e  00003f9e  00003f9e  00004052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PM_HAL_SCD30_power 00000014  00003ec8  00003ec8  00003f7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_3 00000014  00003edc  00003edc  00003f90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.rn2483_init 00000008  00004142  00004142  000041f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.rn2483_reset_active 00000008  0000414a  0000414a  000041fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rn2483_reset_deactive 00000008  00004152  00004152  00004206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SCD30_HAL_init 0000000e  00003fac  00003fac  00004060  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SCD30_HAL_data_ready 0000000a  00004110  00004110  000041c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_16 0000004e  00003042  00003042  000030f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss._cb      00000002  00800726  00800726  00004254  2**0
                  ALLOC
 29 .text.TC1_HAL_init 00000034  000038ac  000038ac  00003960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.TC1_HAL_start 0000000c  0000408c  0000408c  00004140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.TC1_HAL_stop 0000000c  00004098  00004098  0000414c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__vector_13 0000004e  00003090  00003090  00003144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .bss._cb      00000002  00800728  00800728  00004254  2**0
                  ALLOC
 34 .text.__vector_9 0000007c  0000282a  0000282a  000028de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .bss.cnt      00000001  00800730  00800730  00004254  2**0
                  ALLOC
 36 .bss.callbacks 0000000a  00800710  00800710  00004254  2**0
                  ALLOC
 37 .text.start_and_write_data 0000004c  0000312c  0000312c  000031e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.read_and_stop 0000005a  00002dee  00002dee  00002ea2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TWI_API_write_data 00000014  00003ef0  00003ef0  00003fa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TWI_API_write_data_stop 0000001a  00003de2  00003de2  00003e96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TWI_API_read_data_ack_end_nack_stop 00000032  00003914  00003914  000039c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TWI_API_repeat_read_data_stop 00000030  000039aa  000039aa  00003a5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.TWI_HAL_init 00000012  00003f2c  00003f2c  00003fe0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.TWI_HAL_start 00000048  000033d2  000033d2  00003486  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.TWI_HAL_repeated_start 00000042  000035b8  000035b8  0000366c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.TWI_HAL_write_byte 00000020  00003cb8  00003cb8  00003d6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.TWI_HAL_read_byte_ack 00000014  00003f04  00003f04  00003fb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.TWI_HAL_read_byte_nack 00000014  00003f18  00003f18  00003fcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.TWI_HAL_stop 00000010  00003f62  00003f62  00004016  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.copy_buffer 0000002e  00003a6a  00003a6a  00003b1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.uart0_hal_init 0000003c  0000363c  0000363c  000036f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.uart0_hal_send_string 0000006a  00002c54  00002c54  00002d08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.uart0_hal_message_ready 0000000e  00003fba  00003fba  0000406e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.uart0_hal_clear_rx_buffer 0000000a  0000411a  0000411a  000041ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.uart0_hal_read_message_as_str 00000028  00003b20  00003b20  00003bd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__vector_22 0000004a  000032f4  000032f4  000033a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.__vector_20 00000074  00002b00  00002b00  00002bb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .bss.rx_buffer_has_message 00000001  00800731  00800731  00004254  2**0
                  ALLOC
 59 .bss.rx_buffer_data_len 00000001  00800732  00800732  00004254  2**0
                  ALLOC
 60 .bss.tx_buffer_cursor 00000001  00800733  00800733  00004254  2**0
                  ALLOC
 61 .bss.tx_buffer_data_len 00000001  00800734  00800734  00004254  2**0
                  ALLOC
 62 .text.copy_buffer 0000002e  00003a98  00003a98  00003b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.uart1_hal_init 0000003c  00003678  00003678  0000372c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.uart1_hal_send_string 0000008a  000027a0  000027a0  00002854  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.uart1_hal_message_ready 0000000e  00003fc8  00003fc8  0000407c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.uart1_hal_rx_full 0000000e  00003fd6  00003fd6  0000408a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uart1_hal_clear_rx_buffer 0000000a  00004124  00004124  000041d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.uart1_hal_read_message_as_str 00000028  00003b48  00003b48  00003bfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__vector_30 0000004a  0000333e  0000333e  000033f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__vector_28 00000070  00002b74  00002b74  00002c28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .bss.rx_buffer_has_message 00000001  00800735  00800735  00004254  2**0
                  ALLOC
 72 .bss.rx_buffer_data_len 00000001  00800736  00800736  00004254  2**0
                  ALLOC
 73 .bss.rx_buffer 00000096  00800616  00800616  00004254  2**0
                  ALLOC
 74 .bss.tx_buffer_cursor 00000001  00800737  00800737  00004254  2**0
                  ALLOC
 75 .bss.tx_buffer_data_len 00000001  00800738  00800738  00004254  2**0
                  ALLOC
 76 .bss.tx_buffer 0000012c  008004ea  008004ea  00004254  2**0
                  ALLOC
 77 .text.main    0000001c  00003d8e  00003d8e  00003e42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.calc_ppm_methane 00000096  000025e2  000025e2  00002696  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.ADC_get_value 00000056  00002ea0  00002ea0  00002f54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .data.PPM_factor 00000004  0080071a  00004194  00004248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 81 .data.RRL     00000004  0080071e  00004198  0000424c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 82 .data.Vc      00000004  00800722  0000419c  00004250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 83 .text.EM_has_deveui 00000016  00003e48  00003e48  00003efc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.EM_has_appeui 00000016  00003e5e  00003e5e  00003f12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.EM_has_appkey 00000016  00003e74  00003e74  00003f28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.EM_set_deveui 0000003a  000036b4  000036b4  00003768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.EM_get_deveui 00000030  000039da  000039da  00003a8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.EM_set_appeui 0000003a  000036ee  000036ee  000037a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.EM_get_appeui 00000030  00003a0a  00003a0a  00003abe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.EM_set_appkey 0000003a  00003728  00003728  000037dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.EM_get_appkey 00000030  00003a3a  00003a3a  00003aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.EM_set_ppmfactor 0000000e  00003fe4  00003fe4  00004098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.EM_get_ppmfactor 0000001e  00003cf8  00003cf8  00003dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.EM_set_RRL 0000000e  00003ff2  00003ff2  000040a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.EM_get_RRL 0000001e  00003d16  00003d16  00003dca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.EM_set_Vcc 0000000e  00004000  00004000  000040b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.EM_get_Vcc 0000001e  00003d34  00003d34  00003de8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.EM_set_collections 0000000e  0000400e  0000400e  000040c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.EM_get_collections 00000010  00003f72  00003f72  00004026  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.EM_set_heat_up_time 0000000c  000040a4  000040a4  00004158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.EM_get_heat_up_time 0000000c  000040b0  000040b0  00004164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.EM_set_air_pump_time 0000000c  000040bc  000040bc  00004170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.EM_get_air_pump_time 0000000c  000040c8  000040c8  0000417c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.EM_set_sp_interval 0000000c  000040d4  000040d4  00004188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.EM_get_sp_interval 0000000c  000040e0  000040e0  00004194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.LM_reset_module 00000006  00004172  00004172  00004226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.LM_forward_msg 00000006  00004178  00004178  0000422c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .progmemx.data 00000073  0000049b  0000049b  0000054f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
109 .text.attach_ending 0000001c  00003daa  00003daa  00003e5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.util_strbeginswith 0000004a  00003388  00003388  0000343c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .progmemx.data 00000007  0000058c  0000058c  00000640  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
112 .text.util_reset_module 00000046  0000341a  0000341a  000034ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.util_lora_forward_msg 00000038  00003762  00003762  00003816  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.datetime_to_BCD 00000100  00001ac8  00001ac8  00001b7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.RTC_get_current_time 00000140  00001612  00001612  000016c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.RTC_set_current_time 00000068  00002d28  00002d28  00002ddc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .progmemx.data.CMD_READ_TIME_POINTER 00000001  0000059f  0000059f  00000653  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
118 .text.bytes_2_uint 0000001a  00003dfc  00003dfc  00003eb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.init_measurement 00000038  0000379a  0000379a  0000384e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.validate_data 00000032  00003946  00003946  000039fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.read_value 000000a2  000024a8  000024a8  0000255c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.vect_SCD_do_sample 00000046  00003460  00003460  00003514  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.SCD30_sensor_on 00000022  00003c52  00003c52  00003d06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 .text.SCD30_init_sampling 00000022  00003c74  00003c74  00003d28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 .text.SCD30_deinit_sampling 0000000e  0000401c  0000401c  000040d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 .text.SCD30_start_sampling 0000000a  0000412e  0000412e  000041e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 .text.SCD30_is_sampling_done 0000001c  00003dc6  00003dc6  00003e7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 .text.SCD30_get_reading 0000001a  00003e16  00003e16  00003eca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 .bss.cntSamples 00000002  0080072a  0080072a  00004254  2**0
                  ALLOC
130 .bss._data    00000002  0080072c  0080072c  00004254  2**0
                  ALLOC
131 .bss._nSamples 00000002  0080072e  0080072e  00004254  2**0
                  ALLOC
132 .progmemx.data.READ_DATA_CMD 00000002  0000059d  0000059d  00000651  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
133 .progmemx.data.SET_MEASUREMENT_INTERVAL 00000005  00000593  00000593  00000647  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
134 .progmemx.data.TRIGGER_CONT_MEASUREMENT 00000005  00000598  00000598  0000064c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
135 .text.parse_cmd 00000028  00003b70  00003b70  00003c24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text.validate_cmd 00000056  00002ef6  00002ef6  00002faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .progmemx.data 000000a4  0000037c  0000037c  00000430  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
138 .text.CONF_enter 0000012e  00001752  00001752  00001806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .progmemx.data 00000066  0000050e  0000050e  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
140 .text.CON_RN2483_parse 00000026  00003bc0  00003bc0  00003c74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text.CON_RN2483 000000e8  00001cc6  00001cc6  00001d7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text.CONNECT 00000054  00002f4c  00002f4c  00003000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .progmemx.data 00000188  000001f4  000001f4  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
144 .text.read_cols 000000bc  000021d8  000021d8  0000228c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.read_time 00000092  0000270e  0000270e  000027c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.write_deveui 00000078  00002920  00002920  000029d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.write_appeui 00000078  00002998  00002998  00002a4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.write_appkey 00000078  00002a10  00002a10  00002ac4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.write_PPM_factor 0000004c  00003178  00003178  0000322c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.write_RRL 0000004c  000031c4  000031c4  00003278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.write_VCC 0000004c  00003210  00003210  000032c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.get_time_par 00000034  000038e0  000038e0  00003994  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.write_cols 0000012e  00001880  00001880  00001934  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.write_heat_up 0000004c  0000325c  0000325c  00003310  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.write_air_pump 00000050  00002ff2  00002ff2  000030a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.write_sp_interval 0000004c  000032a8  000032a8  0000335c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.write_reset 000000e2  00001dae  00001dae  00001e62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.write_time 000000fe  00001bc8  00001bc8  00001c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.handle_read 000002a2  00000fc0  00000fc0  00001074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.handle_write 00000200  00001262  00001262  00001316  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .bss.arg      00000050  008006ac  008006ac  00004254  2**0
                  ALLOC
162 .progmemx.data 0000007b  00000420  00000420  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
163 .text.handle_methane 0000011a  000019ae  000019ae  00001a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.handle_co2 000000a4  00002404  00002404  000024b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.handle_sample 00000098  0000254a  0000254a  000025fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.init_methane_SCD30 00000028  00003b98  00003b98  00003c4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .bss.par      00000014  008006fc  008006fc  00004254  2**0
                  ALLOC
168 .text.count_parameters 00000052  00002fa0  00002fa0  00003054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 .text.par_index 00000070  00002be4  00002be4  00002c98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 .text.get_parameter 00000096  00002678  00002678  0000272c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 .progmemx.data 00000010  00000574  00000574  00000628  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
172 .text.test_sampling 000000c8  00002110  00002110  000021c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 .text.test_SCD30_module_start 00000024  00003be6  00003be6  00003c9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 .text.test_runner 00000006  0000417e  0000417e  00004232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 .text.calc_crc8 00000036  0000380a  0000380a  000038be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 .text.get_decimal 000000b4  00002350  00002350  00002404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 .text.str2flaot 0000004e  000030de  000030de  00003192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 .text.is_float 00000058  00002e48  00002e48  00002efc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 .text.avrlibc.fplib 0000000e  0000402a  0000402a  000040de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 .text.avrlibc.fplib 000000ce  00002042  00002042  000020f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .text.avrlibc.fplib 00000008  0000415a  0000415a  0000420e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 .text.avrlibc.fplib 000000de  00001e90  00001e90  00001f44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text.avrlibc.fplib 0000005e  00002d90  00002d90  00002e44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 .text.avrlibc.fplib 0000007a  000028a6  000028a6  0000295a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 .text.avrlibc.fplib 0000000c  000040ec  000040ec  000041a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 .text.avrlibc.fplib 00000006  00004184  00004184  00004238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 .text.avrlibc.fplib 0000000e  00004038  00004038  000040ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text.avrlibc.fplib 0000000e  00004046  00004046  000040fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 .text.avrlibc.fplib 00000022  00003c96  00003c96  00003d4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 .text.avrlibc.fplib 00000044  000034ec  000034ec  000035a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 .text.avrlibc.fplib 0000000e  00004054  00004054  00004108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text.avrlibc.fplib 00000008  00004162  00004162  00004216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 .text.avrlibc.fplib 000000d4  00001f6e  00001f6e  00002022  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 .progmemx.data 00000008  00000584  00000584  00000638  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
195 .text.avrlibc 00000744  000005a0  000005a0  00000654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 .text.libgcc  0000000c  000040f8  000040f8  000041ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 .text.libgcc.mul 0000001e  00003d52  00003d52  00003e06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text.libgcc.prologue 00000038  000037d2  000037d2  00003886  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text.libgcc.prologue 00000036  00003840  00003840  000038f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 .text.avrlibc 00000008  0000416a  0000416a  0000421e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 .text.avrlibc 0000000e  00004062  00004062  00004116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 .text.avrlibc 000002dc  00000ce4  00000ce4  00000d98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text.avrlibc 000001b0  00001462  00001462  00001516  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 .text.avrlibc 00000012  00003f3e  00003f3e  00003ff2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text.avrlibc 00000032  00003978  00003978  00003a2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 .text.avrlibc 0000002e  00003ac6  00003ac6  00003b7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 .text.avrlibc 00000042  000035fa  000035fa  000036ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 .text.avrlibc 0000006a  00002cbe  00002cbe  00002d72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 .text.avrlibc 0000002c  00003af4  00003af4  00003ba8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 .text.avrlibc 0000001e  00003d70  00003d70  00003e24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 .text.avrlibc 00000036  00003876  00003876  0000392a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 .text.avrlibc 00000078  00002a88  00002a88  00002b3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 .text.avrlibc 00000046  000034a6  000034a6  0000355a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 .text.avrlibc 000000bc  00002294  00002294  00002348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 .text.avrlibc 00000006  0000418a  0000418a  0000423e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 .text.avrlibc 00000024  00003c0a  00003c0a  00003cbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 .text.avrlibc 00000012  00003f50  00003f50  00004004  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 .text.avrlibc 0000000e  00004070  00004070  00004124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 .text.avrlibc 0000000e  0000407e  0000407e  00004132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 .text.avrlibc 00000044  00003530  00003530  000035e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 .text.avrlibc 00000024  00003c2e  00003c2e  00003ce2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 .text.avrlibc 00000018  00003e30  00003e30  00003ee4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 .text.avrlibc 0000000c  00004104  00004104  000041b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 .text.libgcc.mul 00000020  00003cd8  00003cd8  00003d8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 .text.libgcc.div 00000044  00003574  00003574  00003628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 .text.libgcc.mul 00000016  00003e8a  00003e8a  00003f3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 .text.libgcc  0000000a  00004138  00004138  000041ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__ctors_end>
   4:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
   8:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
   c:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__vector_3>
  10:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  14:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  18:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  1c:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  20:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  24:	0c 94 15 14 	jmp	0x282a	; 0x282a <__vector_9>
  28:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  2c:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  30:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  34:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__vector_13>
  38:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  3c:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  40:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__vector_16>
  44:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  48:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  4c:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  50:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__vector_20>
  54:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  58:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__vector_22>
  5c:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  60:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  64:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  68:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  6c:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  70:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__vector_28>
  74:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__bad_interrupt>
  78:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__vector_30>
  7c:	c4 0b       	sbc	r28, r20
  7e:	d9 0b       	sbc	r29, r25
  80:	35 0c       	add	r3, r5
  82:	e2 0b       	sbc	r30, r18
  84:	3e 0c       	add	r3, r14
  86:	27 0c       	add	r2, r7
  88:	2e 0c       	add	r2, r14
  8a:	f2 0b       	sbc	r31, r18
  8c:	fe 0b       	sbc	r31, r30
  8e:	0a 0c       	add	r0, r10
  90:	14 0c       	add	r1, r4
  92:	20 0c       	add	r2, r0

00000094 <.dinit>:
  94:	01 00       	.word	0x0001	; ????
  96:	07 1a       	sub	r0, r23
  98:	80 07       	cpc	r24, r16
  9a:	1a 07       	cpc	r17, r26
  9c:	26 00       	.word	0x0026	; ????
  9e:	41 94       	neg	r4
  a0:	07 26       	eor	r0, r23
  a2:	07 39       	cpi	r16, 0x97	; 151
  a4:	80 00       	.word	0x0080	; ????

000000a6 <__trampolines_end>:
  a6:	00 40       	sbci	r16, 0x00	; 0
  a8:	7a 10       	cpse	r7, r10
  aa:	f3 5a       	subi	r31, 0xA3	; 163
  ac:	00 a0       	ldd	r0, Z+32	; 0x20
  ae:	72 4e       	sbci	r23, 0xE2	; 226
  b0:	18 09       	sbc	r17, r8
  b2:	00 10       	cpse	r0, r0
  b4:	a5 d4       	rcall	.+2378   	; 0xa00 <__EEPROM_REGION_LENGTH__+0x200>
  b6:	e8 00       	.word	0x00e8	; ????
  b8:	00 e8       	ldi	r16, 0x80	; 128
  ba:	76 48       	sbci	r23, 0x86	; 134
  bc:	17 00       	.word	0x0017	; ????
  be:	00 e4       	ldi	r16, 0x40	; 64
  c0:	0b 54       	subi	r16, 0x4B	; 75
  c2:	02 00       	.word	0x0002	; ????
  c4:	00 ca       	rjmp	.-3072   	; 0xfffff4c6 <__eeprom_end+0xff7ef4c6>
  c6:	9a 3b       	cpi	r25, 0xBA	; 186
  c8:	00 00       	nop
  ca:	00 e1       	ldi	r16, 0x10	; 16
  cc:	f5 05       	cpc	r31, r5
  ce:	00 00       	nop
  d0:	80 96       	adiw	r24, 0x20	; 32
  d2:	98 00       	.word	0x0098	; ????
  d4:	00 00       	nop
  d6:	40 42       	sbci	r20, 0x20	; 32
  d8:	0f 00       	.word	0x000f	; ????
  da:	00 00       	nop
  dc:	a0 86       	std	Z+8, r10	; 0x08
  de:	01 00       	.word	0x0001	; ????
  e0:	00 00       	nop
  e2:	10 27       	eor	r17, r16
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	e8 03       	fmulsu	r22, r16
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	64 00       	.word	0x0064	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	0a 00       	.word	0x000a	; ????
  f6:	00 00       	nop
  f8:	00 00       	nop
  fa:	01 00       	.word	0x0001	; ????
  fc:	00 00       	nop
  fe:	00 00       	nop
 100:	2c 76       	andi	r18, 0x6C	; 108
 102:	d8 88       	ldd	r13, Y+16	; 0x10
 104:	dc 67       	ori	r29, 0x7C	; 124
 106:	4f 08       	sbc	r4, r15
 108:	23 df       	rcall	.-442    	; 0xffffff50 <__eeprom_end+0xff7eff50>
 10a:	c1 df       	rcall	.-126    	; 0x8e <__SREG__+0x4f>
 10c:	ae 59       	subi	r26, 0x9E	; 158
 10e:	e1 b1       	in	r30, 0x01	; 1
 110:	b7 96       	adiw	r30, 0x27	; 39
 112:	e5 e3       	ldi	r30, 0x35	; 53
 114:	e4 53       	subi	r30, 0x34	; 52
 116:	c6 3a       	cpi	r28, 0xA6	; 166
 118:	e6 51       	subi	r30, 0x16	; 22
 11a:	99 76       	andi	r25, 0x69	; 105
 11c:	96 e8       	ldi	r25, 0x86	; 134
 11e:	e6 c2       	rjmp	.+1484   	; 0x6ec <vfprintf+0x14c>
 120:	84 26       	eor	r8, r20
 122:	eb 89       	ldd	r30, Y+19	; 0x13
 124:	8c 9b       	sbis	0x11, 4	; 17
 126:	62 ed       	ldi	r22, 0xD2	; 210
 128:	40 7c       	andi	r20, 0xC0	; 192
 12a:	6f fc       	.word	0xfc6f	; ????
 12c:	ef bc       	out	0x2f, r14	; 47
 12e:	9c 9f       	mul	r25, r28
 130:	40 f2       	brcs	.-112    	; 0xc2 <__trampolines_end+0x1c>
 132:	ba a5       	ldd	r27, Y+42	; 0x2a
 134:	6f a5       	ldd	r22, Y+47	; 0x2f
 136:	f4 90       	lpm	r15, Z
 138:	05 5a       	subi	r16, 0xA5	; 165
 13a:	2a f7       	brpl	.-54     	; 0x106 <__trampolines_end+0x60>
 13c:	5c 93       	st	X, r21
 13e:	6b 6c       	ori	r22, 0xCB	; 203
 140:	f9 67       	ori	r31, 0x79	; 121
 142:	6d c1       	rjmp	.+730    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 144:	1b fc       	.word	0xfc1b	; ????
 146:	e0 e4       	ldi	r30, 0x40	; 64
 148:	0d 47       	sbci	r16, 0x7D	; 125
 14a:	fe f5       	brtc	.+126    	; 0x1ca <__do_copy_data+0x1e>
 14c:	20 e6       	ldi	r18, 0x60	; 96
 14e:	b5 00       	.word	0x00b5	; ????
 150:	d0 ed       	ldi	r29, 0xD0	; 208
 152:	90 2e       	mov	r9, r16
 154:	03 00       	.word	0x0003	; ????
 156:	94 35       	cpi	r25, 0x54	; 84
 158:	77 05       	cpc	r23, r7
 15a:	00 80       	ld	r0, Z
 15c:	84 1e       	adc	r8, r20
 15e:	08 00       	.word	0x0008	; ????
 160:	00 20       	and	r0, r0
 162:	4e 0a       	sbc	r4, r30
 164:	00 00       	nop
 166:	00 c8       	rjmp	.-4096   	; 0xfffff168 <__eeprom_end+0xff7ef168>
 168:	0c 33       	cpi	r16, 0x3C	; 60
 16a:	33 33       	cpi	r19, 0x33	; 51
 16c:	33 0f       	add	r19, r19
 16e:	98 6e       	ori	r25, 0xE8	; 232
 170:	12 83       	std	Z+2, r17	; 0x02
 172:	11 41       	sbci	r17, 0x11	; 17
 174:	ef 8d       	ldd	r30, Y+31	; 0x1f
 176:	21 14       	cp	r2, r1
 178:	89 3b       	cpi	r24, 0xB9	; 185
 17a:	e6 55       	subi	r30, 0x56	; 86
 17c:	16 cf       	rjmp	.-468    	; 0xffffffaa <__eeprom_end+0xff7effaa>
 17e:	fe e6       	ldi	r31, 0x6E	; 110
 180:	db 18       	sub	r13, r11
 182:	d1 84       	ldd	r13, Z+9	; 0x09
 184:	4b 38       	cpi	r20, 0x8B	; 139
 186:	1b f7       	brvc	.-58     	; 0x14e <__trampolines_end+0xa8>
 188:	7c 1d       	adc	r23, r12
 18a:	90 1d       	adc	r25, r0
 18c:	a4 bb       	out	0x14, r26	; 20
 18e:	e4 24       	eor	r14, r4
 190:	20 32       	cpi	r18, 0x20	; 32
 192:	84 72       	andi	r24, 0x24	; 36
 194:	5e 22       	and	r5, r30
 196:	81 00       	.word	0x0081	; ????
 198:	c9 f1       	breq	.+114    	; 0x20c <_etext+0x18>
 19a:	24 ec       	ldi	r18, 0xC4	; 196
 19c:	a1 e5       	ldi	r26, 0x51	; 81
 19e:	3d 27       	eor	r19, r29

000001a0 <__ctors_end>:
 1a0:	11 24       	eor	r1, r1
 1a2:	1f be       	out	0x3f, r1	; 63
 1a4:	cf ef       	ldi	r28, 0xFF	; 255
 1a6:	d0 e1       	ldi	r29, 0x10	; 16
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	cd bf       	out	0x3d, r28	; 61

000001ac <__do_copy_data>:
 1ac:	e4 e9       	ldi	r30, 0x94	; 148
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	17 c0       	rjmp	.+46     	; 0x1e2 <__do_clear_bss+0x8>
 1b4:	b5 91       	lpm	r27, Z+
 1b6:	a5 91       	lpm	r26, Z+
 1b8:	35 91       	lpm	r19, Z+
 1ba:	25 91       	lpm	r18, Z+
 1bc:	05 91       	lpm	r16, Z+
 1be:	07 fd       	sbrc	r16, 7
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <__do_clear_bss>
 1c2:	95 91       	lpm	r25, Z+
 1c4:	85 91       	lpm	r24, Z+
 1c6:	ef 01       	movw	r28, r30
 1c8:	f9 2f       	mov	r31, r25
 1ca:	e8 2f       	mov	r30, r24
 1cc:	05 90       	lpm	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x20>
 1d6:	fe 01       	movw	r30, r28
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__do_clear_bss+0x8>

000001da <__do_clear_bss>:
 1da:	1d 92       	st	X+, r1
 1dc:	a2 17       	cp	r26, r18
 1de:	b3 07       	cpc	r27, r19
 1e0:	e1 f7       	brne	.-8      	; 0x1da <__do_clear_bss>
 1e2:	e5 3a       	cpi	r30, 0xA5	; 165
 1e4:	f4 07       	cpc	r31, r20
 1e6:	31 f7       	brne	.-52     	; 0x1b4 <__do_copy_data+0x8>
 1e8:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <main>
 1ec:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>

Disassembly of section .text:

00004190 <__bad_interrupt>:
    4190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.PM_HAL_adc_power_init:

00003f82 <PM_HAL_adc_power_init>:
#include <stdbool.h>
#include "PM_HAL.h"
#include "../../util/bit_operators.h"

void PM_HAL_adc_power_init(){
	set_bit(DDRA, 3);
    3f82:	81 b1       	in	r24, 0x01	; 1
    3f84:	88 60       	ori	r24, 0x08	; 8
    3f86:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 3);
    3f88:	82 b1       	in	r24, 0x02	; 2
    3f8a:	87 7f       	andi	r24, 0xF7	; 247
    3f8c:	82 b9       	out	0x02, r24	; 2
    3f8e:	08 95       	ret

Disassembly of section .text.PM_HAL_adc_power:

00003ea0 <PM_HAL_adc_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3ea0:	88 23       	and	r24, r24
    3ea2:	21 f0       	breq	.+8      	; 0x3eac <PM_HAL_adc_power+0xc>
    3ea4:	82 b1       	in	r24, 0x02	; 2
    3ea6:	88 60       	ori	r24, 0x08	; 8
    3ea8:	82 b9       	out	0x02, r24	; 2
    3eaa:	08 95       	ret
    3eac:	82 b1       	in	r24, 0x02	; 2
    3eae:	87 7f       	andi	r24, 0xF7	; 247
    3eb0:	82 b9       	out	0x02, r24	; 2
    3eb2:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power_init:

00003f90 <PM_HAL_meth_power_init>:
		clear_bit(PORTA, 3);
	}
}

void PM_HAL_meth_power_init(){
	set_bit(DDRA, 5);
    3f90:	81 b1       	in	r24, 0x01	; 1
    3f92:	80 62       	ori	r24, 0x20	; 32
    3f94:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 5);
    3f96:	82 b1       	in	r24, 0x02	; 2
    3f98:	8f 7d       	andi	r24, 0xDF	; 223
    3f9a:	82 b9       	out	0x02, r24	; 2
    3f9c:	08 95       	ret

Disassembly of section .text.PM_HAL_meth_power:

00003eb4 <PM_HAL_meth_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3eb4:	88 23       	and	r24, r24
    3eb6:	21 f0       	breq	.+8      	; 0x3ec0 <PM_HAL_meth_power+0xc>
    3eb8:	82 b1       	in	r24, 0x02	; 2
    3eba:	80 62       	ori	r24, 0x20	; 32
    3ebc:	82 b9       	out	0x02, r24	; 2
    3ebe:	08 95       	ret
    3ec0:	82 b1       	in	r24, 0x02	; 2
    3ec2:	8f 7d       	andi	r24, 0xDF	; 223
    3ec4:	82 b9       	out	0x02, r24	; 2
    3ec6:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power_init:

00003f9e <PM_HAL_SCD30_power_init>:
		clear_bit(PORTA, 5);
	}
}

void PM_HAL_SCD30_power_init(){
	set_bit(DDRA, 4);
    3f9e:	81 b1       	in	r24, 0x01	; 1
    3fa0:	80 61       	ori	r24, 0x10	; 16
    3fa2:	81 b9       	out	0x01, r24	; 1
	clear_bit(PORTA, 4);
    3fa4:	82 b1       	in	r24, 0x02	; 2
    3fa6:	8f 7e       	andi	r24, 0xEF	; 239
    3fa8:	82 b9       	out	0x02, r24	; 2
    3faa:	08 95       	ret

Disassembly of section .text.PM_HAL_SCD30_power:

00003ec8 <PM_HAL_SCD30_power>:
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
	clear_bit(EIMSK, 2);
    3ec8:	88 23       	and	r24, r24
    3eca:	21 f0       	breq	.+8      	; 0x3ed4 <PM_HAL_SCD30_power+0xc>
    3ecc:	82 b1       	in	r24, 0x02	; 2
    3ece:	80 61       	ori	r24, 0x10	; 16
    3ed0:	82 b9       	out	0x02, r24	; 2
    3ed2:	08 95       	ret
    3ed4:	82 b1       	in	r24, 0x02	; 2
    3ed6:	8f 7e       	andi	r24, 0xEF	; 239
    3ed8:	82 b9       	out	0x02, r24	; 2
    3eda:	08 95       	ret

Disassembly of section .text.__vector_3:

00003edc <__vector_3>:
}

ISR(INT2_vect){
    3edc:	1f 92       	push	r1
    3ede:	0f 92       	push	r0
    3ee0:	0f b6       	in	r0, 0x3f	; 63
    3ee2:	0f 92       	push	r0
    3ee4:	11 24       	eor	r1, r1
	
}
    3ee6:	0f 90       	pop	r0
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	0f 90       	pop	r0
    3eec:	1f 90       	pop	r1
    3eee:	18 95       	reti

Disassembly of section .text.rn2483_init:

00004142 <rn2483_init>:

#include "RN2483_HAL.h"
#include "../../util/bit_operators.h"

void rn2483_init(){
	set_bit(RN2483_DDR, RN2483_PIN);
    4142:	84 b1       	in	r24, 0x04	; 4
    4144:	80 61       	ori	r24, 0x10	; 16
    4146:	84 b9       	out	0x04, r24	; 4
    4148:	08 95       	ret

Disassembly of section .text.rn2483_reset_active:

0000414a <rn2483_reset_active>:
}

void rn2483_reset_active(){
	clear_bit(RN2483_PORT, RN2483_PIN);
    414a:	85 b1       	in	r24, 0x05	; 5
    414c:	8f 7e       	andi	r24, 0xEF	; 239
    414e:	85 b9       	out	0x05, r24	; 5
    4150:	08 95       	ret

Disassembly of section .text.rn2483_reset_deactive:

00004152 <rn2483_reset_deactive>:
}

void rn2483_reset_deactive(){
	set_bit(RN2483_PORT, RN2483_PIN);
    4152:	85 b1       	in	r24, 0x05	; 5
    4154:	80 61       	ori	r24, 0x10	; 16
    4156:	85 b9       	out	0x05, r24	; 5
    4158:	08 95       	ret

Disassembly of section .text.SCD30_HAL_init:

00003fac <SCD30_HAL_init>:
#include <xc.h>
#include "../../util/bit_operators.h"
#include <stdbool.h>

void SCD30_HAL_init(){
	clear_bit(DDRC, 6);
    3fac:	87 b1       	in	r24, 0x07	; 7
    3fae:	8f 7b       	andi	r24, 0xBF	; 191
    3fb0:	87 b9       	out	0x07, r24	; 7
	clear_bit(PORTC, 6);
    3fb2:	88 b1       	in	r24, 0x08	; 8
    3fb4:	8f 7b       	andi	r24, 0xBF	; 191
    3fb6:	88 b9       	out	0x08, r24	; 8
    3fb8:	08 95       	ret

Disassembly of section .text.SCD30_HAL_data_ready:

00004110 <SCD30_HAL_data_ready>:
}

bool SCD30_HAL_data_ready(){
	return get_bit(PINC, 6);
    4110:	86 b1       	in	r24, 0x06	; 6
    4112:	86 fb       	bst	r24, 6
    4114:	88 27       	eor	r24, r24
    4116:	80 f9       	bld	r24, 0
    4118:	08 95       	ret

Disassembly of section .text.__vector_16:

00003042 <__vector_16>:

void TC0_HAL_stop(){
	TCCR0B=0x00; 
}

ISR(TIMER0_COMPA_vect){
    3042:	1f 92       	push	r1
    3044:	0f 92       	push	r0
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	0f 92       	push	r0
    304a:	11 24       	eor	r1, r1
    304c:	2f 93       	push	r18
    304e:	3f 93       	push	r19
    3050:	4f 93       	push	r20
    3052:	5f 93       	push	r21
    3054:	6f 93       	push	r22
    3056:	7f 93       	push	r23
    3058:	8f 93       	push	r24
    305a:	9f 93       	push	r25
    305c:	af 93       	push	r26
    305e:	bf 93       	push	r27
    3060:	ef 93       	push	r30
    3062:	ff 93       	push	r31
	_cb();
    3064:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <_cb>
    3068:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <_cb+0x1>
    306c:	09 95       	icall
}
    306e:	ff 91       	pop	r31
    3070:	ef 91       	pop	r30
    3072:	bf 91       	pop	r27
    3074:	af 91       	pop	r26
    3076:	9f 91       	pop	r25
    3078:	8f 91       	pop	r24
    307a:	7f 91       	pop	r23
    307c:	6f 91       	pop	r22
    307e:	5f 91       	pop	r21
    3080:	4f 91       	pop	r20
    3082:	3f 91       	pop	r19
    3084:	2f 91       	pop	r18
    3086:	0f 90       	pop	r0
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	0f 90       	pop	r0
    308c:	1f 90       	pop	r1
    308e:	18 95       	reti

Disassembly of section .text.TC1_HAL_init:

000038ac <TC1_HAL_init>:
#include "../../util/bit_operators.h"

static callback_ptr _cb;

void TC1_HAL_init(uint16_t match, callback_ptr cb){
	TCCR1A=0x00;
    38ac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
	TCCR1B=0b00001000; //Set CTC A mode
    38b0:	28 e0       	ldi	r18, 0x08	; 8
    38b2:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
	TCCR1C=0x00;
    38b6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f0082>
	
	OCR1A=match; //Set compare value
    38ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    38be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
	TCNT1=0x0000; //Set counter to zero
    38c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f0085>
    38c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f0084>
	
	set_bit(TIMSK1, 1); //Enable interrupt on compare
    38ca:	ef e6       	ldi	r30, 0x6F	; 111
    38cc:	f0 e0       	ldi	r31, 0x00	; 0
    38ce:	80 81       	ld	r24, Z
    38d0:	82 60       	ori	r24, 0x02	; 2
    38d2:	80 83       	st	Z, r24
	sei();
    38d4:	78 94       	sei
	
	_cb=cb; //Set callback pointer
    38d6:	70 93 29 07 	sts	0x0729, r23	; 0x800729 <_cb+0x1>
    38da:	60 93 28 07 	sts	0x0728, r22	; 0x800728 <_cb>
    38de:	08 95       	ret

Disassembly of section .text.TC1_HAL_start:

0000408c <TC1_HAL_start>:
}

void TC1_HAL_start(){
	set_byte(TCCR1B, 0b00000110);
    408c:	e1 e8       	ldi	r30, 0x81	; 129
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	86 60       	ori	r24, 0x06	; 6
    4094:	80 83       	st	Z, r24
    4096:	08 95       	ret

Disassembly of section .text.TC1_HAL_stop:

00004098 <TC1_HAL_stop>:
}

void TC1_HAL_stop(){
	clear_byte(TCCR1B, 0b00000111);
    4098:	e1 e8       	ldi	r30, 0x81	; 129
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	80 81       	ld	r24, Z
    409e:	88 7f       	andi	r24, 0xF8	; 248
    40a0:	80 83       	st	Z, r24
    40a2:	08 95       	ret

Disassembly of section .text.__vector_13:

00003090 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
    3090:	1f 92       	push	r1
    3092:	0f 92       	push	r0
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	0f 92       	push	r0
    3098:	11 24       	eor	r1, r1
    309a:	2f 93       	push	r18
    309c:	3f 93       	push	r19
    309e:	4f 93       	push	r20
    30a0:	5f 93       	push	r21
    30a2:	6f 93       	push	r22
    30a4:	7f 93       	push	r23
    30a6:	8f 93       	push	r24
    30a8:	9f 93       	push	r25
    30aa:	af 93       	push	r26
    30ac:	bf 93       	push	r27
    30ae:	ef 93       	push	r30
    30b0:	ff 93       	push	r31
	_cb();
    30b2:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <_cb>
    30b6:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <_cb+0x1>
    30ba:	09 95       	icall
    30bc:	ff 91       	pop	r31
    30be:	ef 91       	pop	r30
    30c0:	bf 91       	pop	r27
    30c2:	af 91       	pop	r26
    30c4:	9f 91       	pop	r25
    30c6:	8f 91       	pop	r24
    30c8:	7f 91       	pop	r23
    30ca:	6f 91       	pop	r22
    30cc:	5f 91       	pop	r21
    30ce:	4f 91       	pop	r20
    30d0:	3f 91       	pop	r19
    30d2:	2f 91       	pop	r18
    30d4:	0f 90       	pop	r0
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	0f 90       	pop	r0
    30da:	1f 90       	pop	r1
    30dc:	18 95       	reti

Disassembly of section .text.__vector_9:

0000282a <__vector_9>:
	if(cbCounter==0){
		stop_timer();		
	}
}

ISR(TIMER2_COMPA_vect){
    282a:	1f 92       	push	r1
    282c:	0f 92       	push	r0
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	0f 92       	push	r0
    2832:	11 24       	eor	r1, r1
    2834:	2f 93       	push	r18
    2836:	3f 93       	push	r19
    2838:	4f 93       	push	r20
    283a:	5f 93       	push	r21
    283c:	6f 93       	push	r22
    283e:	7f 93       	push	r23
    2840:	8f 93       	push	r24
    2842:	9f 93       	push	r25
    2844:	af 93       	push	r26
    2846:	bf 93       	push	r27
    2848:	cf 93       	push	r28
    284a:	ef 93       	push	r30
    284c:	ff 93       	push	r31
	cnt++;
    284e:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <cnt>
    2852:	8f 5f       	subi	r24, 0xFF	; 255
    2854:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <cnt>
	
	if(cnt==TC2_CNT_MATCH){
    2858:	80 32       	cpi	r24, 0x20	; 32
    285a:	99 f4       	brne	.+38     	; 0x2882 <__vector_9+0x58>
		cnt=0;
    285c:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <cnt>
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    2860:	c0 e0       	ldi	r28, 0x00	; 0
    2862:	0d c0       	rjmp	.+26     	; 0x287e <__vector_9+0x54>
		{
			if(callbacks[i]!=NULL){
    2864:	ec 2f       	mov	r30, r28
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	ee 0f       	add	r30, r30
    286a:	ff 1f       	adc	r31, r31
    286c:	e0 5f       	subi	r30, 0xF0	; 240
    286e:	f8 4f       	sbci	r31, 0xF8	; 248
    2870:	01 90       	ld	r0, Z+
    2872:	f0 81       	ld	r31, Z
    2874:	e0 2d       	mov	r30, r0
    2876:	30 97       	sbiw	r30, 0x00	; 0
    2878:	09 f0       	breq	.+2      	; 0x287c <__vector_9+0x52>
				callbacks[i]();
    287a:	09 95       	icall
ISR(TIMER2_COMPA_vect){
	cnt++;
	
	if(cnt==TC2_CNT_MATCH){
		cnt=0;
		for (uint8_t i=0; i<MAX_CALLBACKS; i++)
    287c:	cf 5f       	subi	r28, 0xFF	; 255
    287e:	c5 30       	cpi	r28, 0x05	; 5
    2880:	88 f3       	brcs	.-30     	; 0x2864 <__vector_9+0x3a>
			if(callbacks[i]!=NULL){
				callbacks[i]();
			}
		}
	}
}
    2882:	ff 91       	pop	r31
    2884:	ef 91       	pop	r30
    2886:	cf 91       	pop	r28
    2888:	bf 91       	pop	r27
    288a:	af 91       	pop	r26
    288c:	9f 91       	pop	r25
    288e:	8f 91       	pop	r24
    2890:	7f 91       	pop	r23
    2892:	6f 91       	pop	r22
    2894:	5f 91       	pop	r21
    2896:	4f 91       	pop	r20
    2898:	3f 91       	pop	r19
    289a:	2f 91       	pop	r18
    289c:	0f 90       	pop	r0
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	0f 90       	pop	r0
    28a2:	1f 90       	pop	r1
    28a4:	18 95       	reti

Disassembly of section .text.start_and_write_data:

0000312c <start_and_write_data>:

/************************************************************************/
/* Local function                                                                     */
/************************************************************************/

static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    312c:	cf 92       	push	r12
    312e:	df 92       	push	r13
    3130:	ef 92       	push	r14
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	6a 01       	movw	r12, r20
    3138:	e6 2e       	mov	r14, r22
    313a:	d2 2f       	mov	r29, r18
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
    313c:	60 e0       	ldi	r22, 0x00	; 0
    313e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <TWI_HAL_start>
	if(status!=TWI_CODE_SUCCESS) return status;
    3142:	81 11       	cpse	r24, r1
    3144:	13 c0       	rjmp	.+38     	; 0x316c <start_and_write_data+0x40>
    3146:	c0 e0       	ldi	r28, 0x00	; 0
    3148:	0e c0       	rjmp	.+28     	; 0x3166 <start_and_write_data+0x3a>
	
	for (uint8_t i=0; i<length; i++)
	{
		status=TWI_HAL_write_byte(data[i]);
    314a:	ae 2d       	mov	r26, r14
    314c:	c6 01       	movw	r24, r12
    314e:	8c 0f       	add	r24, r28
    3150:	91 1d       	adc	r25, r1
    3152:	a1 1d       	adc	r26, r1
    3154:	fc 01       	movw	r30, r24
    3156:	84 91       	lpm	r24, Z
    3158:	a7 fd       	sbrc	r26, 7
    315a:	80 81       	ld	r24, Z
    315c:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <TWI_HAL_write_byte>
		if(status!=TWI_CODE_SUCCESS) return status;
    3160:	81 11       	cpse	r24, r1
    3162:	04 c0       	rjmp	.+8      	; 0x316c <start_and_write_data+0x40>
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, WRITE);
	if(status!=TWI_CODE_SUCCESS) return status;
	
	for (uint8_t i=0; i<length; i++)
    3164:	cf 5f       	subi	r28, 0xFF	; 255
    3166:	cd 17       	cp	r28, r29
    3168:	80 f3       	brcs	.-32     	; 0x314a <start_and_write_data+0x1e>
	{
		status=TWI_HAL_write_byte(data[i]);
		if(status!=TWI_CODE_SUCCESS) return status;
	}
	return TWI_CODE_SUCCESS;
    316a:	80 e0       	ldi	r24, 0x00	; 0
}
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	ef 90       	pop	r14
    3172:	df 90       	pop	r13
    3174:	cf 90       	pop	r12
    3176:	08 95       	ret

Disassembly of section .text.read_and_stop:

00002dee <read_and_stop>:

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
    2dee:	ef 92       	push	r14
    2df0:	ff 92       	push	r15
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	8c 01       	movw	r16, r24
    2dfc:	d6 2f       	mov	r29, r22
	for (uint8_t i=0; i<length-1; i++)
    2dfe:	c0 e0       	ldi	r28, 0x00	; 0
    2e00:	08 c0       	rjmp	.+16     	; 0x2e12 <read_and_stop+0x24>
	{
		data[i]=TWI_HAL_read_byte_ack();
    2e02:	78 01       	movw	r14, r16
    2e04:	ec 0e       	add	r14, r28
    2e06:	f1 1c       	adc	r15, r1
    2e08:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TWI_HAL_read_byte_ack>
    2e0c:	f7 01       	movw	r30, r14
    2e0e:	80 83       	st	Z, r24
	}
	return TWI_CODE_SUCCESS;
}

static uint8_t read_and_stop(uint8_t data[], uint8_t length){
	for (uint8_t i=0; i<length-1; i++)
    2e10:	cf 5f       	subi	r28, 0xFF	; 255
    2e12:	2c 2f       	mov	r18, r28
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	8d 2f       	mov	r24, r29
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	28 17       	cp	r18, r24
    2e1e:	39 07       	cpc	r19, r25
    2e20:	84 f3       	brlt	.-32     	; 0x2e02 <read_and_stop+0x14>
	{
		data[i]=TWI_HAL_read_byte_ack();
	}
	data[length-1]=TWI_HAL_read_byte_nack();
    2e22:	8d 2f       	mov	r24, r29
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	e8 01       	movw	r28, r16
    2e2a:	c8 0f       	add	r28, r24
    2e2c:	d9 1f       	adc	r29, r25
    2e2e:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <TWI_HAL_read_byte_nack>
    2e32:	88 83       	st	Y, r24
	
	TWI_HAL_stop();
    2e34:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <TWI_HAL_stop>
	return TWI_CODE_SUCCESS;
}
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	1f 91       	pop	r17
    2e40:	0f 91       	pop	r16
    2e42:	ff 90       	pop	r15
    2e44:	ef 90       	pop	r14
    2e46:	08 95       	ret

Disassembly of section .text.TWI_API_write_data:

00003ef0 <TWI_API_write_data>:


static uint8_t start_and_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length);
static uint8_t read_and_stop(uint8_t data[], uint8_t length);

uint8_t TWI_API_write_data(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3ef0:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3ef2:	0e 94 96 18 	call	0x312c	; 0x312c <start_and_write_data>
    3ef6:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3ef8:	81 11       	cpse	r24, r1
		TWI_HAL_stop();
    3efa:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <TWI_HAL_stop>
	}
	return status;
}
    3efe:	8c 2f       	mov	r24, r28
    3f00:	cf 91       	pop	r28
    3f02:	08 95       	ret

Disassembly of section .text.TWI_API_write_data_stop:

00003de2 <TWI_API_write_data_stop>:

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
    3de2:	cf 93       	push	r28
	uint8_t status=start_and_write_data(slaveAddr, data, length);
    3de4:	0e 94 96 18 	call	0x312c	; 0x312c <start_and_write_data>
    3de8:	c8 2f       	mov	r28, r24
	TWI_HAL_stop();
    3dea:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <TWI_HAL_stop>
	if(status!=TWI_CODE_SUCCESS) return status;
    3dee:	c1 11       	cpse	r28, r1
    3df0:	02 c0       	rjmp	.+4      	; 0x3df6 <TWI_API_write_data_stop+0x14>
	return TWI_CODE_SUCCESS;
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	01 c0       	rjmp	.+2      	; 0x3df8 <TWI_API_write_data_stop+0x16>
}

uint8_t TWI_API_write_data_stop(uint8_t slaveAddr, const uint8_t data[], uint8_t length){
	uint8_t status=start_and_write_data(slaveAddr, data, length);
	TWI_HAL_stop();
	if(status!=TWI_CODE_SUCCESS) return status;
    3df6:	8c 2f       	mov	r24, r28
	return TWI_CODE_SUCCESS;
}
    3df8:	cf 91       	pop	r28
    3dfa:	08 95       	ret

Disassembly of section .text.TWI_API_read_data_ack_end_nack_stop:

00003914 <TWI_API_read_data_ack_end_nack_stop>:

uint8_t TWI_API_read_data_ack_end_nack_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    3914:	0f 93       	push	r16
    3916:	1f 93       	push	r17
    3918:	cf 93       	push	r28
    391a:	df 93       	push	r29
    391c:	8b 01       	movw	r16, r22
    391e:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_start(slaveAddr, READ);
    3920:	61 e0       	ldi	r22, 0x01	; 1
    3922:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <TWI_HAL_start>
    3926:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    3928:	88 23       	and	r24, r24
    392a:	21 f0       	breq	.+8      	; 0x3934 <TWI_API_read_data_ack_end_nack_stop+0x20>
		TWI_HAL_stop();
    392c:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <TWI_HAL_stop>
		return status;	
    3930:	8c 2f       	mov	r24, r28
    3932:	04 c0       	rjmp	.+8      	; 0x393c <TWI_API_read_data_ack_end_nack_stop+0x28>
	};
	
	return read_and_stop(data, length);
    3934:	6d 2f       	mov	r22, r29
    3936:	c8 01       	movw	r24, r16
    3938:	0e 94 f7 16 	call	0x2dee	; 0x2dee <read_and_stop>
	
}
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	1f 91       	pop	r17
    3942:	0f 91       	pop	r16
    3944:	08 95       	ret

Disassembly of section .text.TWI_API_repeat_read_data_stop:

000039aa <TWI_API_repeat_read_data_stop>:

uint8_t TWI_API_repeat_read_data_stop(uint8_t slaveAddr, uint8_t data[], uint8_t length){
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	8b 01       	movw	r16, r22
    39b4:	d4 2f       	mov	r29, r20
	uint8_t status;
	
	status=TWI_HAL_repeated_start(slaveAddr);
    39b6:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <TWI_HAL_repeated_start>
    39ba:	c8 2f       	mov	r28, r24
	if(status!=TWI_CODE_SUCCESS){
    39bc:	88 23       	and	r24, r24
    39be:	21 f0       	breq	.+8      	; 0x39c8 <TWI_API_repeat_read_data_stop+0x1e>
		TWI_HAL_stop();
    39c0:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <TWI_HAL_stop>
		return status;
    39c4:	8c 2f       	mov	r24, r28
    39c6:	04 c0       	rjmp	.+8      	; 0x39d0 <TWI_API_repeat_read_data_stop+0x26>
	};
	
	return read_and_stop(data, length);
    39c8:	6d 2f       	mov	r22, r29
    39ca:	c8 01       	movw	r24, r16
    39cc:	0e 94 f7 16 	call	0x2dee	; 0x2dee <read_and_stop>
	
}
    39d0:	df 91       	pop	r29
    39d2:	cf 91       	pop	r28
    39d4:	1f 91       	pop	r17
    39d6:	0f 91       	pop	r16
    39d8:	08 95       	ret

Disassembly of section .text.TWI_HAL_init:

00003f2c <TWI_HAL_init>:




void TWI_HAL_init(){
	TWBR=TWI_TWBR; //Set bit generator
    3f2c:	80 e2       	ldi	r24, 0x20	; 32
    3f2e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f00b8>
	clear_byte(TWSR, 0b00000011); //set prescale to 1
    3f32:	e9 eb       	ldi	r30, 0xB9	; 185
    3f34:	f0 e0       	ldi	r31, 0x00	; 0
    3f36:	80 81       	ld	r24, Z
    3f38:	8c 7f       	andi	r24, 0xFC	; 252
    3f3a:	80 83       	st	Z, r24
    3f3c:	08 95       	ret

Disassembly of section .text.TWI_HAL_start:

000033d2 <TWI_HAL_start>:
	
}

uint8_t TWI_HAL_start(uint8_t addr, TWI_HAL_START_TYPE type){
	uint8_t addr_type=(addr<<1) | type;
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	88 0f       	add	r24, r24
    33d6:	99 1f       	adc	r25, r25
    33d8:	68 2b       	or	r22, r24
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    33da:	84 ea       	ldi	r24, 0xA4	; 164
    33dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    33e0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    33e4:	99 23       	and	r25, r25
    33e6:	e4 f7       	brge	.-8      	; 0x33e0 <TWI_HAL_start+0xe>
	status=twi_read_status(TWSR);
    33e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    33ec:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_START) return status; //Check status is success
    33ee:	88 30       	cpi	r24, 0x08	; 8
    33f0:	99 f4       	brne	.+38     	; 0x3418 <TWI_HAL_start+0x46>
	
	TWDR=addr_type; //Set Write addr
    33f2:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    33f6:	84 e8       	ldi	r24, 0x84	; 132
    33f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    33fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3400:	88 23       	and	r24, r24
    3402:	e4 f7       	brge	.-8      	; 0x33fc <TWI_HAL_start+0x2a>
	status=twi_read_status(TWSR);
    3404:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3408:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status == TWI_CODE_ADDR_W_TRANS_ACK_REC || status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    340a:	88 31       	cpi	r24, 0x18	; 24
    340c:	21 f0       	breq	.+8      	; 0x3416 <TWI_HAL_start+0x44>
    340e:	80 34       	cpi	r24, 0x40	; 64
    3410:	19 f4       	brne	.+6      	; 0x3418 <TWI_HAL_start+0x46>
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	08 95       	ret
    3416:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    3418:	08 95       	ret

Disassembly of section .text.TWI_HAL_repeated_start:

000035b8 <TWI_HAL_repeated_start>:

uint8_t TWI_HAL_repeated_start(uint8_t addr){
	uint8_t addr_type=(addr<<1) | 1;
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	28 2f       	mov	r18, r24
    35c0:	21 60       	ori	r18, 0x01	; 1
	uint8_t status;
	
	TWCR=twi_start_transmission |(1<<TWSTA); //Send start condition
    35c2:	84 ea       	ldi	r24, 0xA4	; 164
    35c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    35c8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    35cc:	99 23       	and	r25, r25
    35ce:	e4 f7       	brge	.-8      	; 0x35c8 <TWI_HAL_repeated_start+0x10>
	status=twi_read_status(TWSR);
    35d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    35d4:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status != TWI_CODE_REP_START) return status; //Check status is success
    35d6:	80 31       	cpi	r24, 0x10	; 16
    35d8:	79 f4       	brne	.+30     	; 0x35f8 <TWI_HAL_repeated_start+0x40>
	
	TWDR=addr_type; //Set Write addr
    35da:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission; //Start transmission of addr
    35de:	84 e8       	ldi	r24, 0x84	; 132
    35e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); //Wait to finish job
    35e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    35e8:	88 23       	and	r24, r24
    35ea:	e4 f7       	brge	.-8      	; 0x35e4 <TWI_HAL_repeated_start+0x2c>
	status=twi_read_status(TWSR);
    35ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    35f0:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_ADDR_R_TRANS_ACK_REC) return TWI_CODE_SUCCESS;
    35f2:	80 34       	cpi	r24, 0x40	; 64
    35f4:	09 f4       	brne	.+2      	; 0x35f8 <TWI_HAL_repeated_start+0x40>
    35f6:	80 e0       	ldi	r24, 0x00	; 0
	
	return status;
}
    35f8:	08 95       	ret

Disassembly of section .text.TWI_HAL_write_byte:

00003cb8 <TWI_HAL_write_byte>:

uint8_t TWI_HAL_write_byte(uint8_t data){
	uint8_t status;
	
	TWDR=data;	//Set data
    3cb8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
	TWCR=twi_start_transmission;
    3cbc:	84 e8       	ldi	r24, 0x84	; 132
    3cbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	
	while (!get_bit(TWCR, TWINT)); 
    3cc2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3cc6:	88 23       	and	r24, r24
    3cc8:	e4 f7       	brge	.-8      	; 0x3cc2 <TWI_HAL_write_byte+0xa>
	status=twi_read_status(TWSR);
    3cca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f00b9>
    3cce:	88 7f       	andi	r24, 0xF8	; 248
	
	if(status==TWI_CODE_DATA_TRANS_ACK_REC) return TWI_CODE_SUCCESS; //Success
    3cd0:	88 32       	cpi	r24, 0x28	; 40
    3cd2:	09 f4       	brne	.+2      	; 0x3cd6 <TWI_HAL_write_byte+0x1e>
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
	return status;
}
    3cd6:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_ack:

00003f04 <TWI_HAL_read_byte_ack>:

uint8_t TWI_HAL_read_byte_ack(){
	TWCR=twi_start_transmission|(1<<TWEA);
    3f04:	84 ec       	ldi	r24, 0xC4	; 196
    3f06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT)); 
    3f0a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3f0e:	88 23       	and	r24, r24
    3f10:	e4 f7       	brge	.-8      	; 0x3f0a <TWI_HAL_read_byte_ack+0x6>
	
	return TWDR;
    3f12:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3f16:	08 95       	ret

Disassembly of section .text.TWI_HAL_read_byte_nack:

00003f18 <TWI_HAL_read_byte_nack>:

uint8_t TWI_HAL_read_byte_nack(){
	TWCR=twi_start_transmission;
    3f18:	84 e8       	ldi	r24, 0x84	; 132
    3f1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	while (!get_bit(TWCR, TWINT));
    3f1e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3f22:	88 23       	and	r24, r24
    3f24:	e4 f7       	brge	.-8      	; 0x3f1e <TWI_HAL_read_byte_nack+0x6>
	
	return TWDR;
    3f26:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f00bb>
}
    3f2a:	08 95       	ret

Disassembly of section .text.TWI_HAL_stop:

00003f62 <TWI_HAL_stop>:

void TWI_HAL_stop(){
	 TWCR=twi_start_transmission|(1<<TWSTO);
    3f62:	84 e9       	ldi	r24, 0x94	; 148
    3f64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
	 while(TWCR&(1<<TWSTO));
    3f68:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f00bc>
    3f6c:	84 fd       	sbrc	r24, 4
    3f6e:	fc cf       	rjmp	.-8      	; 0x3f68 <TWI_HAL_stop+0x6>
}
    3f70:	08 95       	ret

Disassembly of section .text.copy_buffer:

00003a6a <copy_buffer>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    3a6a:	bc 01       	movw	r22, r24
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	09 c0       	rjmp	.+18     	; 0x3a82 <copy_buffer+0x18>
    3a70:	fb 01       	movw	r30, r22
    3a72:	e9 0f       	add	r30, r25
    3a74:	f1 1d       	adc	r31, r1
    3a76:	da 01       	movw	r26, r20
    3a78:	a0 50       	subi	r26, 0x00	; 0
    3a7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a7c:	2c 91       	ld	r18, X
    3a7e:	20 83       	st	Z, r18
    3a80:	9f 5f       	subi	r25, 0xFF	; 255
    3a82:	49 2f       	mov	r20, r25
    3a84:	50 e0       	ldi	r21, 0x00	; 0
    3a86:	20 91 32 07 	lds	r18, 0x0732	; 0x800732 <rx_buffer_data_len>
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	22 50       	subi	r18, 0x02	; 2
    3a8e:	31 09       	sbc	r19, r1
    3a90:	42 17       	cp	r20, r18
    3a92:	53 07       	cpc	r21, r19
    3a94:	6c f3       	brlt	.-38     	; 0x3a70 <copy_buffer+0x6>
    3a96:	08 95       	ret

Disassembly of section .text.uart0_hal_init:

0000363c <uart0_hal_init>:
    363c:	e1 ec       	ldi	r30, 0xC1	; 193
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	80 81       	ld	r24, Z
    3642:	80 61       	ori	r24, 0x10	; 16
    3644:	80 83       	st	Z, r24
    3646:	80 81       	ld	r24, Z
    3648:	88 60       	ori	r24, 0x08	; 8
    364a:	80 83       	st	Z, r24
    364c:	80 81       	ld	r24, Z
    364e:	80 68       	ori	r24, 0x80	; 128
    3650:	80 83       	st	Z, r24
    3652:	80 81       	ld	r24, Z
    3654:	80 64       	ori	r24, 0x40	; 64
    3656:	80 83       	st	Z, r24
    3658:	e0 ec       	ldi	r30, 0xC0	; 192
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	82 60       	ori	r24, 0x02	; 2
    3660:	80 83       	st	Z, r24
    3662:	86 e0       	ldi	r24, 0x06	; 6
    3664:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    3668:	80 e1       	ldi	r24, 0x10	; 16
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    3670:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    3674:	78 94       	sei
    3676:	08 95       	ret

Disassembly of section .text.uart0_hal_send_string:

00002c54 <uart0_hal_send_string>:
    2c54:	cf 92       	push	r12
    2c56:	df 92       	push	r13
    2c58:	ef 92       	push	r14
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	cf 93       	push	r28
    2c60:	6b 01       	movw	r12, r22
    2c62:	e8 2e       	mov	r14, r24
    2c64:	c0 e0       	ldi	r28, 0x00	; 0
    2c66:	12 c0       	rjmp	.+36     	; 0x2c8c <uart0_hal_send_string+0x38>
    2c68:	8c 2f       	mov	r24, r28
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	4e 2d       	mov	r20, r14
    2c6e:	96 01       	movw	r18, r12
    2c70:	20 0f       	add	r18, r16
    2c72:	31 1f       	adc	r19, r17
    2c74:	41 1d       	adc	r20, r1
    2c76:	17 fd       	sbrc	r17, 7
    2c78:	4a 95       	dec	r20
    2c7a:	f9 01       	movw	r30, r18
    2c7c:	24 91       	lpm	r18, Z
    2c7e:	47 fd       	sbrc	r20, 7
    2c80:	20 81       	ld	r18, Z
    2c82:	fc 01       	movw	r30, r24
    2c84:	ec 59       	subi	r30, 0x9C	; 156
    2c86:	fe 4f       	sbci	r31, 0xFE	; 254
    2c88:	20 83       	st	Z, r18
    2c8a:	cf 5f       	subi	r28, 0xFF	; 255
    2c8c:	0c 2f       	mov	r16, r28
    2c8e:	10 e0       	ldi	r17, 0x00	; 0
    2c90:	8e 2d       	mov	r24, r14
    2c92:	b6 01       	movw	r22, r12
    2c94:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    2c98:	08 17       	cp	r16, r24
    2c9a:	19 07       	cpc	r17, r25
    2c9c:	28 f3       	brcs	.-54     	; 0x2c68 <uart0_hal_send_string+0x14>
    2c9e:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <tx_buffer_data_len>
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <tx_buffer_cursor>
    2ca8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tx_buffer>
    2cac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2cb0:	cf 91       	pop	r28
    2cb2:	1f 91       	pop	r17
    2cb4:	0f 91       	pop	r16
    2cb6:	ef 90       	pop	r14
    2cb8:	df 90       	pop	r13
    2cba:	cf 90       	pop	r12
    2cbc:	08 95       	ret

Disassembly of section .text.uart0_hal_message_ready:

00003fba <uart0_hal_message_ready>:
	tx_buffer_cursor=1;
	UDR0=tx_buffer[0];
}

bool uart0_hal_message_ready(){
	return rx_buffer_has_message>0;
    3fba:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <rx_buffer_has_message>
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	91 11       	cpse	r25, r1
    3fc2:	01 c0       	rjmp	.+2      	; 0x3fc6 <uart0_hal_message_ready+0xc>
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
}
    3fc6:	08 95       	ret

Disassembly of section .text.uart0_hal_clear_rx_buffer:

0000411a <uart0_hal_clear_rx_buffer>:
	uart0_hal_clear_rx_buffer();
	return len;
}

void uart0_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    411a:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    411e:	10 92 32 07 	sts	0x0732, r1	; 0x800732 <rx_buffer_data_len>
    4122:	08 95       	ret

Disassembly of section .text.uart0_hal_read_message_as_str:

00003b20 <uart0_hal_read_message_as_str>:
	return len;
}



uint8_t uart0_hal_read_message_as_str(char msg[]){
    3b20:	0f 93       	push	r16
    3b22:	1f 93       	push	r17
    3b24:	cf 93       	push	r28
    3b26:	8c 01       	movw	r16, r24
	copy_buffer((uint8_t *) msg);
    3b28:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <copy_buffer>
	uint8_t len= rx_buffer_data_len-2;
    3b2c:	c0 91 32 07 	lds	r28, 0x0732	; 0x800732 <rx_buffer_data_len>
    3b30:	c2 50       	subi	r28, 0x02	; 2
	msg[len]='\0';
    3b32:	f8 01       	movw	r30, r16
    3b34:	ec 0f       	add	r30, r28
    3b36:	f1 1d       	adc	r31, r1
    3b38:	10 82       	st	Z, r1
	uart0_hal_clear_rx_buffer();
    3b3a:	0e 94 8d 20 	call	0x411a	; 0x411a <uart0_hal_clear_rx_buffer>
	return len;
}
    3b3e:	8c 2f       	mov	r24, r28
    3b40:	cf 91       	pop	r28
    3b42:	1f 91       	pop	r17
    3b44:	0f 91       	pop	r16
    3b46:	08 95       	ret

Disassembly of section .text.__vector_22:

000032f4 <__vector_22>:
uint8_t uart0_hal_read_message(uint8_t msg[]){
	copy_buffer(msg);
	uint8_t len= rx_buffer_data_len-2;
	uart0_hal_clear_rx_buffer();
	return len;
}
    32f4:	1f 92       	push	r1
    32f6:	0f 92       	push	r0
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	0f 92       	push	r0
    32fc:	11 24       	eor	r1, r1
    32fe:	8f 93       	push	r24
    3300:	ef 93       	push	r30
    3302:	ff 93       	push	r31
    3304:	e0 91 33 07 	lds	r30, 0x0733	; 0x800733 <tx_buffer_cursor>
    3308:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <tx_buffer_data_len>
    330c:	e8 17       	cp	r30, r24
    330e:	58 f4       	brcc	.+22     	; 0x3326 <__vector_22+0x32>
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	8e 0f       	add	r24, r30
    3314:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <tx_buffer_cursor>
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	ec 59       	subi	r30, 0x9C	; 156
    331c:	fe 4f       	sbci	r31, 0xFE	; 254
    331e:	80 81       	ld	r24, Z
    3320:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    3324:	04 c0       	rjmp	.+8      	; 0x332e <__vector_22+0x3a>
    3326:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <tx_buffer_cursor>
    332a:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <tx_buffer_data_len>
    332e:	ff 91       	pop	r31
    3330:	ef 91       	pop	r30
    3332:	8f 91       	pop	r24
    3334:	0f 90       	pop	r0
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	0f 90       	pop	r0
    333a:	1f 90       	pop	r1
    333c:	18 95       	reti

Disassembly of section .text.__vector_20:

00002b00 <__vector_20>:
    2b00:	1f 92       	push	r1
    2b02:	0f 92       	push	r0
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	0f 92       	push	r0
    2b08:	11 24       	eor	r1, r1
    2b0a:	2f 93       	push	r18
    2b0c:	8f 93       	push	r24
    2b0e:	9f 93       	push	r25
    2b10:	ef 93       	push	r30
    2b12:	ff 93       	push	r31
    2b14:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <rx_buffer_has_message>
    2b18:	81 11       	cpse	r24, r1
    2b1a:	0e c0       	rjmp	.+28     	; 0x2b38 <__vector_20+0x38>
    2b1c:	e0 91 32 07 	lds	r30, 0x0732	; 0x800732 <rx_buffer_data_len>
    2b20:	e4 36       	cpi	r30, 0x64	; 100
    2b22:	50 f4       	brcc	.+20     	; 0x2b38 <__vector_20+0x38>
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	8e 0f       	add	r24, r30
    2b28:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <rx_buffer_data_len>
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    2b32:	e0 50       	subi	r30, 0x00	; 0
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 83       	st	Z, r24
    2b38:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <rx_buffer_data_len>
    2b3c:	83 30       	cpi	r24, 0x03	; 3
    2b3e:	80 f0       	brcs	.+32     	; 0x2b60 <__vector_20+0x60>
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	fc 01       	movw	r30, r24
    2b44:	e1 50       	subi	r30, 0x01	; 1
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	20 81       	ld	r18, Z
    2b4a:	2a 30       	cpi	r18, 0x0A	; 10
    2b4c:	49 f4       	brne	.+18     	; 0x2b60 <__vector_20+0x60>
    2b4e:	fc 01       	movw	r30, r24
    2b50:	e2 50       	subi	r30, 0x02	; 2
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	8d 30       	cpi	r24, 0x0D	; 13
    2b58:	19 f4       	brne	.+6      	; 0x2b60 <__vector_20+0x60>
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <rx_buffer_has_message>
    2b60:	ff 91       	pop	r31
    2b62:	ef 91       	pop	r30
    2b64:	9f 91       	pop	r25
    2b66:	8f 91       	pop	r24
    2b68:	2f 91       	pop	r18
    2b6a:	0f 90       	pop	r0
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	0f 90       	pop	r0
    2b70:	1f 90       	pop	r1
    2b72:	18 95       	reti

Disassembly of section .text.copy_buffer:

00003a98 <copy_buffer>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3a98:	bc 01       	movw	r22, r24
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	09 c0       	rjmp	.+18     	; 0x3ab0 <copy_buffer+0x18>
    3a9e:	fb 01       	movw	r30, r22
    3aa0:	e9 0f       	add	r30, r25
    3aa2:	f1 1d       	adc	r31, r1
    3aa4:	da 01       	movw	r26, r20
    3aa6:	aa 5e       	subi	r26, 0xEA	; 234
    3aa8:	b9 4f       	sbci	r27, 0xF9	; 249
    3aaa:	2c 91       	ld	r18, X
    3aac:	20 83       	st	Z, r18
    3aae:	9f 5f       	subi	r25, 0xFF	; 255
    3ab0:	49 2f       	mov	r20, r25
    3ab2:	50 e0       	ldi	r21, 0x00	; 0
    3ab4:	20 91 36 07 	lds	r18, 0x0736	; 0x800736 <rx_buffer_data_len>
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	22 50       	subi	r18, 0x02	; 2
    3abc:	31 09       	sbc	r19, r1
    3abe:	42 17       	cp	r20, r18
    3ac0:	53 07       	cpc	r21, r19
    3ac2:	6c f3       	brlt	.-38     	; 0x3a9e <copy_buffer+0x6>
    3ac4:	08 95       	ret

Disassembly of section .text.uart1_hal_init:

00003678 <uart1_hal_init>:
    3678:	e9 ec       	ldi	r30, 0xC9	; 201
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	80 81       	ld	r24, Z
    367e:	80 61       	ori	r24, 0x10	; 16
    3680:	80 83       	st	Z, r24
    3682:	80 81       	ld	r24, Z
    3684:	88 60       	ori	r24, 0x08	; 8
    3686:	80 83       	st	Z, r24
    3688:	80 81       	ld	r24, Z
    368a:	80 68       	ori	r24, 0x80	; 128
    368c:	80 83       	st	Z, r24
    368e:	80 81       	ld	r24, Z
    3690:	80 64       	ori	r24, 0x40	; 64
    3692:	80 83       	st	Z, r24
    3694:	e8 ec       	ldi	r30, 0xC8	; 200
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	80 81       	ld	r24, Z
    369a:	82 60       	ori	r24, 0x02	; 2
    369c:	80 83       	st	Z, r24
    369e:	86 e0       	ldi	r24, 0x06	; 6
    36a0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f00ca>
    36a4:	80 e1       	ldi	r24, 0x10	; 16
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    36ac:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    36b0:	78 94       	sei
    36b2:	08 95       	ret

Disassembly of section .text.uart1_hal_send_string:

000027a0 <uart1_hal_send_string>:
    27a0:	6f 92       	push	r6
    27a2:	7f 92       	push	r7
    27a4:	8f 92       	push	r8
    27a6:	cf 92       	push	r12
    27a8:	df 92       	push	r13
    27aa:	ef 92       	push	r14
    27ac:	3b 01       	movw	r6, r22
    27ae:	88 2e       	mov	r8, r24
    27b0:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <tx_buffer_data_len>
    27b4:	81 11       	cpse	r24, r1
    27b6:	fc cf       	rjmp	.-8      	; 0x27b0 <uart1_hal_send_string+0x10>
    27b8:	88 2d       	mov	r24, r8
    27ba:	b3 01       	movw	r22, r6
    27bc:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    27c0:	bc 01       	movw	r22, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	12 c0       	rjmp	.+36     	; 0x27ea <uart1_hal_send_string+0x4a>
    27c6:	29 2f       	mov	r18, r25
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	e8 2c       	mov	r14, r8
    27cc:	63 01       	movw	r12, r6
    27ce:	c4 0e       	add	r12, r20
    27d0:	d5 1e       	adc	r13, r21
    27d2:	e1 1c       	adc	r14, r1
    27d4:	57 fd       	sbrc	r21, 7
    27d6:	ea 94       	dec	r14
    27d8:	f6 01       	movw	r30, r12
    27da:	44 91       	lpm	r20, Z
    27dc:	e7 fc       	sbrc	r14, 7
    27de:	40 81       	ld	r20, Z
    27e0:	f9 01       	movw	r30, r18
    27e2:	e6 51       	subi	r30, 0x16	; 22
    27e4:	fb 4f       	sbci	r31, 0xFB	; 251
    27e6:	40 83       	st	Z, r20
    27e8:	9f 5f       	subi	r25, 0xFF	; 255
    27ea:	49 2f       	mov	r20, r25
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	46 17       	cp	r20, r22
    27f0:	57 07       	cpc	r21, r23
    27f2:	48 f3       	brcs	.-46     	; 0x27c6 <uart1_hal_send_string+0x26>
    27f4:	fb 01       	movw	r30, r22
    27f6:	e6 51       	subi	r30, 0x16	; 22
    27f8:	fb 4f       	sbci	r31, 0xFB	; 251
    27fa:	8d e0       	ldi	r24, 0x0D	; 13
    27fc:	80 83       	st	Z, r24
    27fe:	fb 01       	movw	r30, r22
    2800:	e5 51       	subi	r30, 0x15	; 21
    2802:	fb 4f       	sbci	r31, 0xFB	; 251
    2804:	8a e0       	ldi	r24, 0x0A	; 10
    2806:	80 83       	st	Z, r24
    2808:	6e 5f       	subi	r22, 0xFE	; 254
    280a:	60 93 38 07 	sts	0x0738, r22	; 0x800738 <tx_buffer_data_len>
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <tx_buffer_cursor>
    2814:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <_end>
    2818:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    281c:	ef 90       	pop	r14
    281e:	df 90       	pop	r13
    2820:	cf 90       	pop	r12
    2822:	8f 90       	pop	r8
    2824:	7f 90       	pop	r7
    2826:	6f 90       	pop	r6
    2828:	08 95       	ret

Disassembly of section .text.uart1_hal_message_ready:

00003fc8 <uart1_hal_message_ready>:
}

bool uart1_hal_message_ready(){
	return rx_buffer_has_message>0;
    3fc8:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <rx_buffer_has_message>
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	91 11       	cpse	r25, r1
    3fd0:	01 c0       	rjmp	.+2      	; 0x3fd4 <uart1_hal_message_ready+0xc>
    3fd2:	80 e0       	ldi	r24, 0x00	; 0
}
    3fd4:	08 95       	ret

Disassembly of section .text.uart1_hal_rx_full:

00003fd6 <uart1_hal_rx_full>:

bool uart1_hal_rx_full(){
	return rx_buffer_data_len>=UART1_RX_BUFF_LENGTH-1;
    3fd6:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <rx_buffer_data_len>
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	95 39       	cpi	r25, 0x95	; 149
    3fde:	08 f4       	brcc	.+2      	; 0x3fe2 <uart1_hal_rx_full+0xc>
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
}
    3fe2:	08 95       	ret

Disassembly of section .text.uart1_hal_clear_rx_buffer:

00004124 <uart1_hal_clear_rx_buffer>:
	uart1_hal_clear_rx_buffer();
	return len;
}

void uart1_hal_clear_rx_buffer(){
	rx_buffer_has_message=0;
    4124:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <rx_buffer_has_message>
	rx_buffer_data_len=0;
    4128:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <rx_buffer_data_len>
    412c:	08 95       	ret

Disassembly of section .text.uart1_hal_read_message_as_str:

00003b48 <uart1_hal_read_message_as_str>:
		tx_buffer[i]=msg[i];
	}
	
	tx_buffer_data_len=length;
	tx_buffer_cursor=1;
	UDR1=tx_buffer[0];
    3b48:	0f 93       	push	r16
    3b4a:	1f 93       	push	r17
    3b4c:	cf 93       	push	r28
    3b4e:	8c 01       	movw	r16, r24
    3b50:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <copy_buffer>
    3b54:	c0 91 36 07 	lds	r28, 0x0736	; 0x800736 <rx_buffer_data_len>
    3b58:	c2 50       	subi	r28, 0x02	; 2
    3b5a:	f8 01       	movw	r30, r16
    3b5c:	ec 0f       	add	r30, r28
    3b5e:	f1 1d       	adc	r31, r1
    3b60:	10 82       	st	Z, r1
    3b62:	0e 94 92 20 	call	0x4124	; 0x4124 <uart1_hal_clear_rx_buffer>
    3b66:	8c 2f       	mov	r24, r28
    3b68:	cf 91       	pop	r28
    3b6a:	1f 91       	pop	r17
    3b6c:	0f 91       	pop	r16
    3b6e:	08 95       	ret

Disassembly of section .text.__vector_30:

0000333e <__vector_30>:
    333e:	1f 92       	push	r1
    3340:	0f 92       	push	r0
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	0f 92       	push	r0
    3346:	11 24       	eor	r1, r1
    3348:	8f 93       	push	r24
    334a:	ef 93       	push	r30
    334c:	ff 93       	push	r31
    334e:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <tx_buffer_cursor>
    3352:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <tx_buffer_data_len>
    3356:	e8 17       	cp	r30, r24
    3358:	58 f4       	brcc	.+22     	; 0x3370 <__vector_30+0x32>
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	8e 0f       	add	r24, r30
    335e:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <tx_buffer_cursor>
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	e6 51       	subi	r30, 0x16	; 22
    3366:	fb 4f       	sbci	r31, 0xFB	; 251
    3368:	80 81       	ld	r24, Z
    336a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    336e:	04 c0       	rjmp	.+8      	; 0x3378 <__vector_30+0x3a>
    3370:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <tx_buffer_cursor>
    3374:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <tx_buffer_data_len>
    3378:	ff 91       	pop	r31
    337a:	ef 91       	pop	r30
    337c:	8f 91       	pop	r24
    337e:	0f 90       	pop	r0
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	0f 90       	pop	r0
    3384:	1f 90       	pop	r1
    3386:	18 95       	reti

Disassembly of section .text.__vector_28:

00002b74 <__vector_28>:
    2b74:	1f 92       	push	r1
    2b76:	0f 92       	push	r0
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	0f 92       	push	r0
    2b7c:	11 24       	eor	r1, r1
    2b7e:	2f 93       	push	r18
    2b80:	8f 93       	push	r24
    2b82:	9f 93       	push	r25
    2b84:	ef 93       	push	r30
    2b86:	ff 93       	push	r31
    2b88:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <rx_buffer_has_message>
    2b8c:	81 11       	cpse	r24, r1
    2b8e:	0e c0       	rjmp	.+28     	; 0x2bac <__vector_28+0x38>
    2b90:	e0 91 36 07 	lds	r30, 0x0736	; 0x800736 <rx_buffer_data_len>
    2b94:	e6 39       	cpi	r30, 0x96	; 150
    2b96:	50 f4       	brcc	.+20     	; 0x2bac <__vector_28+0x38>
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	8e 0f       	add	r24, r30
    2b9c:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <rx_buffer_data_len>
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    2ba6:	ea 5e       	subi	r30, 0xEA	; 234
    2ba8:	f9 4f       	sbci	r31, 0xF9	; 249
    2baa:	80 83       	st	Z, r24
    2bac:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <rx_buffer_data_len>
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	eb 5e       	subi	r30, 0xEB	; 235
    2bb6:	f9 4f       	sbci	r31, 0xF9	; 249
    2bb8:	20 81       	ld	r18, Z
    2bba:	2a 30       	cpi	r18, 0x0A	; 10
    2bbc:	49 f4       	brne	.+18     	; 0x2bd0 <__vector_28+0x5c>
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	ec 5e       	subi	r30, 0xEC	; 236
    2bc2:	f9 4f       	sbci	r31, 0xF9	; 249
    2bc4:	80 81       	ld	r24, Z
    2bc6:	8d 30       	cpi	r24, 0x0D	; 13
    2bc8:	19 f4       	brne	.+6      	; 0x2bd0 <__vector_28+0x5c>
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <rx_buffer_has_message>
    2bd0:	ff 91       	pop	r31
    2bd2:	ef 91       	pop	r30
    2bd4:	9f 91       	pop	r25
    2bd6:	8f 91       	pop	r24
    2bd8:	2f 91       	pop	r18
    2bda:	0f 90       	pop	r0
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	0f 90       	pop	r0
    2be0:	1f 90       	pop	r1
    2be2:	18 95       	reti

Disassembly of section .text.main:

00003d8e <main>:
#include "PROGRAMS/MAINPG/MAINPG.h"
#include "PROGRAMS/CONFIG_MODE/CONFIG_MODE.h"

int main(void)
{
	test_runner();
    3d8e:	0e 94 bf 20 	call	0x417e	; 0x417e <test_runner>
	
	while(1)
	{
		if(1){
			CONF_enter();
    3d92:	0e 94 a9 0b 	call	0x1752	; 0x1752 <CONF_enter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3d96:	2f ef       	ldi	r18, 0xFF	; 255
    3d98:	81 e1       	ldi	r24, 0x11	; 17
    3d9a:	9a e7       	ldi	r25, 0x7A	; 122
    3d9c:	21 50       	subi	r18, 0x01	; 1
    3d9e:	80 40       	sbci	r24, 0x00	; 0
    3da0:	90 40       	sbci	r25, 0x00	; 0
    3da2:	e1 f7       	brne	.-8      	; 0x3d9c <main+0xe>
    3da4:	00 c0       	rjmp	.+0      	; 0x3da6 <main+0x18>
    3da6:	00 00       	nop
    3da8:	f4 cf       	rjmp	.-24     	; 0x3d92 <main+0x4>

Disassembly of section .text.calc_ppm_methane:

000025e2 <calc_ppm_methane>:
	vect_ADC_do_sample();
}

bool ADC_is_sampling_done(){
	return cntSamples>=_nSamples;
}
    25e2:	8f 92       	push	r8
    25e4:	9f 92       	push	r9
    25e6:	af 92       	push	r10
    25e8:	bf 92       	push	r11
    25ea:	cf 92       	push	r12
    25ec:	df 92       	push	r13
    25ee:	ef 92       	push	r14
    25f0:	ff 92       	push	r15
    25f2:	bc 01       	movw	r22, r24
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__floatunsisf>
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	59 e3       	ldi	r21, 0x39	; 57
    2604:	0e 94 b1 20 	call	0x4162	; 0x4162 <__mulsf3>
    2608:	80 90 22 07 	lds	r8, 0x0722	; 0x800722 <Vc>
    260c:	90 90 23 07 	lds	r9, 0x0723	; 0x800723 <Vc+0x1>
    2610:	a0 90 24 07 	lds	r10, 0x0724	; 0x800724 <Vc+0x2>
    2614:	b0 90 25 07 	lds	r11, 0x0725	; 0x800725 <Vc+0x3>
    2618:	a5 01       	movw	r20, r10
    261a:	94 01       	movw	r18, r8
    261c:	0e 94 b1 20 	call	0x4162	; 0x4162 <__mulsf3>
    2620:	6b 01       	movw	r12, r22
    2622:	7c 01       	movw	r14, r24
    2624:	9b 01       	movw	r18, r22
    2626:	ac 01       	movw	r20, r24
    2628:	c5 01       	movw	r24, r10
    262a:	b4 01       	movw	r22, r8
    262c:	0e 94 15 20 	call	0x402a	; 0x402a <__subsf3>
    2630:	a7 01       	movw	r20, r14
    2632:	96 01       	movw	r18, r12
    2634:	0e 94 ad 20 	call	0x415a	; 0x415a <__divsf3>
    2638:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <RRL>
    263c:	30 91 1f 07 	lds	r19, 0x071F	; 0x80071f <RRL+0x1>
    2640:	40 91 20 07 	lds	r20, 0x0720	; 0x800720 <RRL+0x2>
    2644:	50 91 21 07 	lds	r21, 0x0721	; 0x800721 <RRL+0x3>
    2648:	0e 94 b1 20 	call	0x4162	; 0x4162 <__mulsf3>
    264c:	20 91 1a 07 	lds	r18, 0x071A	; 0x80071a <PPM_factor>
    2650:	30 91 1b 07 	lds	r19, 0x071B	; 0x80071b <PPM_factor+0x1>
    2654:	40 91 1c 07 	lds	r20, 0x071C	; 0x80071c <PPM_factor+0x2>
    2658:	50 91 1d 07 	lds	r21, 0x071D	; 0x80071d <PPM_factor+0x3>
    265c:	0e 94 b1 20 	call	0x4162	; 0x4162 <__mulsf3>
    2660:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__fixunssfsi>
    2664:	cb 01       	movw	r24, r22
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	df 90       	pop	r13
    266c:	cf 90       	pop	r12
    266e:	bf 90       	pop	r11
    2670:	af 90       	pop	r10
    2672:	9f 90       	pop	r9
    2674:	8f 90       	pop	r8
    2676:	08 95       	ret

Disassembly of section .text.ADC_get_value:

00002ea0 <ADC_get_value>:

ADC_STATUS ADC_get_value(uint16_t *value){
    2ea0:	0f 93       	push	r16
    2ea2:	1f 93       	push	r17
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	00 d0       	rcall	.+0      	; 0x2eaa <ADC_get_value+0xa>
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
    2eae:	8c 01       	movw	r16, r24
	uint8_t status;
	uint8_t data[2];
	uint16_t bit_value;
	
	*value=0xffff;
    2eb0:	8f ef       	ldi	r24, 0xFF	; 255
    2eb2:	9f ef       	ldi	r25, 0xFF	; 255
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
    2eba:	42 e0       	ldi	r20, 0x02	; 2
    2ebc:	be 01       	movw	r22, r28
    2ebe:	6f 5f       	subi	r22, 0xFF	; 255
    2ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec2:	8d e4       	ldi	r24, 0x4D	; 77
    2ec4:	0e 94 8a 1c 	call	0x3914	; 0x3914 <TWI_API_read_data_ack_end_nack_stop>
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2ec8:	81 11       	cpse	r24, r1
    2eca:	0d c0       	rjmp	.+26     	; 0x2ee6 <ADC_get_value+0x46>
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	98 2f       	mov	r25, r24
    2ed2:	88 27       	eor	r24, r24
    2ed4:	2a 81       	ldd	r18, Y+2	; 0x02
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
    2ed6:	82 2b       	or	r24, r18
    2ed8:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <calc_ppm_methane>
    2edc:	f8 01       	movw	r30, r16
    2ede:	91 83       	std	Z+1, r25	; 0x01
    2ee0:	80 83       	st	Z, r24
	return ADC_STATUS_SUCCESS;
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	01 c0       	rjmp	.+2      	; 0x2ee8 <ADC_get_value+0x48>
	uint16_t bit_value;
	
	*value=0xffff;
	
	status=TWI_API_read_data_ack_end_nack_stop(ADC_SLAVE_ADDR, data, 2);
	if(status != TWI_CODE_SUCCESS) return ADC_STATUS_ERROR;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
	bit_value = (data[0]<<8)|(data[1] & 0xFF);
	//*value=bit_value;
	*value=calc_ppm_methane(bit_value);
	return ADC_STATUS_SUCCESS;
}
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	08 95       	ret

Disassembly of section .text.EM_has_deveui:

00003e48 <EM_has_deveui>:
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
}

bool EM_has_deveui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR);
    3e48:	60 e4       	ldi	r22, 0x40	; 64
    3e4a:	70 e0       	ldi	r23, 0x00	; 0
    3e4c:	80 e8       	ldi	r24, 0x80	; 128
    3e4e:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <eeprom_read_byte>
    3e52:	91 e0       	ldi	r25, 0x01	; 1
    3e54:	81 11       	cpse	r24, r1
    3e56:	01 c0       	rjmp	.+2      	; 0x3e5a <EM_has_deveui+0x12>
    3e58:	90 e0       	ldi	r25, 0x00	; 0
}
    3e5a:	89 2f       	mov	r24, r25
    3e5c:	08 95       	ret

Disassembly of section .text.EM_has_appeui:

00003e5e <EM_has_appeui>:

bool EM_has_appeui(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR);
    3e5e:	61 e4       	ldi	r22, 0x41	; 65
    3e60:	70 e0       	ldi	r23, 0x00	; 0
    3e62:	80 e8       	ldi	r24, 0x80	; 128
    3e64:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <eeprom_read_byte>
    3e68:	91 e0       	ldi	r25, 0x01	; 1
    3e6a:	81 11       	cpse	r24, r1
    3e6c:	01 c0       	rjmp	.+2      	; 0x3e70 <EM_has_appeui+0x12>
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
}
    3e70:	89 2f       	mov	r24, r25
    3e72:	08 95       	ret

Disassembly of section .text.EM_has_appkey:

00003e74 <EM_has_appkey>:

bool EM_has_appkey(){
	return eeprom_read_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR);
    3e74:	62 e4       	ldi	r22, 0x42	; 66
    3e76:	70 e0       	ldi	r23, 0x00	; 0
    3e78:	80 e8       	ldi	r24, 0x80	; 128
    3e7a:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <eeprom_read_byte>
    3e7e:	91 e0       	ldi	r25, 0x01	; 1
    3e80:	81 11       	cpse	r24, r1
    3e82:	01 c0       	rjmp	.+2      	; 0x3e86 <EM_has_appkey+0x12>
    3e84:	90 e0       	ldi	r25, 0x00	; 0
}
    3e86:	89 2f       	mov	r24, r25
    3e88:	08 95       	ret

Disassembly of section .text.EM_set_deveui:

000036b4 <EM_set_deveui>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    36b4:	cf 92       	push	r12
    36b6:	df 92       	push	r13
    36b8:	ef 92       	push	r14
    36ba:	6b 01       	movw	r12, r22
    36bc:	e8 2e       	mov	r14, r24
    36be:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    36c2:	40 97       	sbiw	r24, 0x10	; 16
    36c4:	79 f4       	brne	.+30     	; 0x36e4 <EM_set_deveui+0x30>
    36c6:	20 e1       	ldi	r18, 0x10	; 16
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e0       	ldi	r20, 0x00	; 0
    36cc:	50 e0       	ldi	r21, 0x00	; 0
    36ce:	8e 2d       	mov	r24, r14
    36d0:	b6 01       	movw	r22, r12
    36d2:	0e 94 98 1a 	call	0x3530	; 0x3530 <eeprom_update_block>
    36d6:	61 e0       	ldi	r22, 0x01	; 1
    36d8:	80 e4       	ldi	r24, 0x40	; 64
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <eeprom_update_byte>
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	01 c0       	rjmp	.+2      	; 0x36e6 <EM_set_deveui+0x32>
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	ef 90       	pop	r14
    36e8:	df 90       	pop	r13
    36ea:	cf 90       	pop	r12
    36ec:	08 95       	ret

Disassembly of section .text.EM_get_deveui:

000039da <EM_get_deveui>:
    39da:	0f 93       	push	r16
    39dc:	1f 93       	push	r17
    39de:	cf 93       	push	r28
    39e0:	8c 01       	movw	r16, r24
    39e2:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <EM_has_deveui>
    39e6:	c8 2f       	mov	r28, r24
    39e8:	88 23       	and	r24, r24
    39ea:	51 f0       	breq	.+20     	; 0x3a00 <EM_get_deveui+0x26>
    39ec:	20 e1       	ldi	r18, 0x10	; 16
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e0       	ldi	r20, 0x00	; 0
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	c8 01       	movw	r24, r16
    39f8:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <eeprom_read_block>
    39fc:	f8 01       	movw	r30, r16
    39fe:	10 8a       	std	Z+16, r1	; 0x10
    3a00:	8c 2f       	mov	r24, r28
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	08 95       	ret

Disassembly of section .text.EM_set_appeui:

000036ee <EM_set_appeui>:
    36ee:	cf 92       	push	r12
    36f0:	df 92       	push	r13
    36f2:	ef 92       	push	r14
    36f4:	6b 01       	movw	r12, r22
    36f6:	e8 2e       	mov	r14, r24
    36f8:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    36fc:	40 97       	sbiw	r24, 0x10	; 16
    36fe:	79 f4       	brne	.+30     	; 0x371e <EM_set_appeui+0x30>
    3700:	20 e1       	ldi	r18, 0x10	; 16
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e1       	ldi	r20, 0x10	; 16
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	8e 2d       	mov	r24, r14
    370a:	b6 01       	movw	r22, r12
    370c:	0e 94 98 1a 	call	0x3530	; 0x3530 <eeprom_update_block>
    3710:	61 e0       	ldi	r22, 0x01	; 1
    3712:	81 e4       	ldi	r24, 0x41	; 65
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <eeprom_update_byte>
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	01 c0       	rjmp	.+2      	; 0x3720 <EM_set_appeui+0x32>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	ef 90       	pop	r14
    3722:	df 90       	pop	r13
    3724:	cf 90       	pop	r12
    3726:	08 95       	ret

Disassembly of section .text.EM_get_appeui:

00003a0a <EM_get_appeui>:
    3a0a:	0f 93       	push	r16
    3a0c:	1f 93       	push	r17
    3a0e:	cf 93       	push	r28
    3a10:	8c 01       	movw	r16, r24
    3a12:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <EM_has_appeui>
    3a16:	c8 2f       	mov	r28, r24
    3a18:	88 23       	and	r24, r24
    3a1a:	51 f0       	breq	.+20     	; 0x3a30 <EM_get_appeui+0x26>
    3a1c:	20 e1       	ldi	r18, 0x10	; 16
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	40 e1       	ldi	r20, 0x10	; 16
    3a22:	50 e0       	ldi	r21, 0x00	; 0
    3a24:	60 e0       	ldi	r22, 0x00	; 0
    3a26:	c8 01       	movw	r24, r16
    3a28:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <eeprom_read_block>
    3a2c:	f8 01       	movw	r30, r16
    3a2e:	10 8a       	std	Z+16, r1	; 0x10
    3a30:	8c 2f       	mov	r24, r28
    3a32:	cf 91       	pop	r28
    3a34:	1f 91       	pop	r17
    3a36:	0f 91       	pop	r16
    3a38:	08 95       	ret

Disassembly of section .text.EM_set_appkey:

00003728 <EM_set_appkey>:
    3728:	cf 92       	push	r12
    372a:	df 92       	push	r13
    372c:	ef 92       	push	r14
    372e:	6b 01       	movw	r12, r22
    3730:	e8 2e       	mov	r14, r24
    3732:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    3736:	80 97       	sbiw	r24, 0x20	; 32
    3738:	79 f4       	brne	.+30     	; 0x3758 <EM_set_appkey+0x30>
    373a:	20 e2       	ldi	r18, 0x20	; 32
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e2       	ldi	r20, 0x20	; 32
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	8e 2d       	mov	r24, r14
    3744:	b6 01       	movw	r22, r12
    3746:	0e 94 98 1a 	call	0x3530	; 0x3530 <eeprom_update_block>
    374a:	61 e0       	ldi	r22, 0x01	; 1
    374c:	82 e4       	ldi	r24, 0x42	; 66
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <eeprom_update_byte>
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	01 c0       	rjmp	.+2      	; 0x375a <EM_set_appkey+0x32>
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	ef 90       	pop	r14
    375c:	df 90       	pop	r13
    375e:	cf 90       	pop	r12
    3760:	08 95       	ret

Disassembly of section .text.EM_get_appkey:

00003a3a <EM_get_appkey>:
    3a3a:	0f 93       	push	r16
    3a3c:	1f 93       	push	r17
    3a3e:	cf 93       	push	r28
    3a40:	8c 01       	movw	r16, r24
    3a42:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <EM_has_appkey>
    3a46:	c8 2f       	mov	r28, r24
    3a48:	88 23       	and	r24, r24
    3a4a:	51 f0       	breq	.+20     	; 0x3a60 <EM_get_appkey+0x26>
    3a4c:	20 e2       	ldi	r18, 0x20	; 32
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e2       	ldi	r20, 0x20	; 32
    3a52:	50 e0       	ldi	r21, 0x00	; 0
    3a54:	60 e0       	ldi	r22, 0x00	; 0
    3a56:	c8 01       	movw	r24, r16
    3a58:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <eeprom_read_block>
    3a5c:	f8 01       	movw	r30, r16
    3a5e:	10 a2       	std	Z+32, r1	; 0x20
    3a60:	8c 2f       	mov	r24, r28
    3a62:	cf 91       	pop	r28
    3a64:	1f 91       	pop	r17
    3a66:	0f 91       	pop	r16
    3a68:	08 95       	ret

Disassembly of section .text.EM_set_ppmfactor:

00003fe4 <EM_set_ppmfactor>:
	eeprom_read_block((void *) appkey, ( const void *) EEPROM_APPKEY_ADDR, EEPROM_APPKEY_LENGTH);
	appkey[EEPROM_APPKEY_LENGTH]='\0';
	return true;
}

void EM_set_ppmfactor(float val){
    3fe4:	ab 01       	movw	r20, r22
    3fe6:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_PPM_FACTOR_ADDR, val);
    3fe8:	83 e4       	ldi	r24, 0x43	; 67
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <eeprom_update_dword>
    3ff0:	08 95       	ret

Disassembly of section .text.EM_get_ppmfactor:

00003cf8 <EM_get_ppmfactor>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3cf8:	cf 93       	push	r28
    3cfa:	df 93       	push	r29
    3cfc:	ec 01       	movw	r28, r24
    3cfe:	63 e4       	ldi	r22, 0x43	; 67
    3d00:	70 e0       	ldi	r23, 0x00	; 0
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	0e 94 38 20 	call	0x4070	; 0x4070 <eeprom_read_dword>
    3d08:	68 83       	st	Y, r22
    3d0a:	79 83       	std	Y+1, r23	; 0x01
    3d0c:	8a 83       	std	Y+2, r24	; 0x02
    3d0e:	9b 83       	std	Y+3, r25	; 0x03
    3d10:	df 91       	pop	r29
    3d12:	cf 91       	pop	r28
    3d14:	08 95       	ret

Disassembly of section .text.EM_set_RRL:

00003ff2 <EM_set_RRL>:

void EM_get_ppmfactor(float *val){
	*val=eeprom_read_float((const float *) EEPROM_PPM_FACTOR_ADDR);
}

void EM_set_RRL(float val){
    3ff2:	ab 01       	movw	r20, r22
    3ff4:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_RRL_ADDR, val);
    3ff6:	87 e4       	ldi	r24, 0x47	; 71
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <eeprom_update_dword>
    3ffe:	08 95       	ret

Disassembly of section .text.EM_get_RRL:

00003d16 <EM_get_RRL>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3d16:	cf 93       	push	r28
    3d18:	df 93       	push	r29
    3d1a:	ec 01       	movw	r28, r24
    3d1c:	67 e4       	ldi	r22, 0x47	; 71
    3d1e:	70 e0       	ldi	r23, 0x00	; 0
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	0e 94 38 20 	call	0x4070	; 0x4070 <eeprom_read_dword>
    3d26:	68 83       	st	Y, r22
    3d28:	79 83       	std	Y+1, r23	; 0x01
    3d2a:	8a 83       	std	Y+2, r24	; 0x02
    3d2c:	9b 83       	std	Y+3, r25	; 0x03
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	08 95       	ret

Disassembly of section .text.EM_set_Vcc:

00004000 <EM_set_Vcc>:

void EM_get_RRL(float *val){
	*val=eeprom_read_float((const float *) EEPROM_RRL_ADDR);
}

void EM_set_Vcc(float val){
    4000:	ab 01       	movw	r20, r22
    4002:	bc 01       	movw	r22, r24
	eeprom_update_float((float *) EEPROM_VCC_ADDR, val);
    4004:	8b e4       	ldi	r24, 0x4B	; 75
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <eeprom_update_dword>
    400c:	08 95       	ret

Disassembly of section .text.EM_get_Vcc:

00003d34 <EM_get_Vcc>:


void EM_clear_lora_prameters(){
	eeprom_update_byte((uint8_t *) EEPROM_HAS_DEVEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPEUI_ADDR, false);
	eeprom_update_byte((uint8_t *) EEPROM_HAS_APPKEY_ADDR, false);
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	ec 01       	movw	r28, r24
    3d3a:	6b e4       	ldi	r22, 0x4B	; 75
    3d3c:	70 e0       	ldi	r23, 0x00	; 0
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	0e 94 38 20 	call	0x4070	; 0x4070 <eeprom_read_dword>
    3d44:	68 83       	st	Y, r22
    3d46:	79 83       	std	Y+1, r23	; 0x01
    3d48:	8a 83       	std	Y+2, r24	; 0x02
    3d4a:	9b 83       	std	Y+3, r25	; 0x03
    3d4c:	df 91       	pop	r29
    3d4e:	cf 91       	pop	r28
    3d50:	08 95       	ret

Disassembly of section .text.EM_set_collections:

0000400e <EM_set_collections>:
void EM_get_Vcc(float *val){
	*val=eeprom_read_float((const float *) EEPROM_VCC_ADDR);
}

void EM_set_collections(const void *cols, uint8_t size){
	eeprom_update_block(cols, (void *) EEPROM_COLLECTION_ADDR, size );
    400e:	24 2f       	mov	r18, r20
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	44 e6       	ldi	r20, 0x64	; 100
    4014:	50 e0       	ldi	r21, 0x00	; 0
    4016:	0e 94 98 1a 	call	0x3530	; 0x3530 <eeprom_update_block>
    401a:	08 95       	ret

Disassembly of section .text.EM_get_collections:

00003f72 <EM_get_collections>:
}

void EM_get_collections(void *cols, uint8_t size){
	eeprom_read_block(cols, ( const void *) EEPROM_COLLECTION_ADDR, size);
    3f72:	26 2f       	mov	r18, r22
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	44 e6       	ldi	r20, 0x64	; 100
    3f78:	50 e0       	ldi	r21, 0x00	; 0
    3f7a:	60 e0       	ldi	r22, 0x00	; 0
    3f7c:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <eeprom_read_block>
    3f80:	08 95       	ret

Disassembly of section .text.EM_set_heat_up_time:

000040a4 <EM_set_heat_up_time>:
}

void EM_set_heat_up_time(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_HEAT_UP_T_ADDR, time);
    40a4:	68 2f       	mov	r22, r24
    40a6:	8f e4       	ldi	r24, 0x4F	; 79
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <eeprom_update_byte>
    40ae:	08 95       	ret

Disassembly of section .text.EM_get_heat_up_time:

000040b0 <EM_get_heat_up_time>:
}

uint8_t EM_get_heat_up_time(){
	return eeprom_read_byte((const uint8_t *) EEPROM_HEAT_UP_T_ADDR);
    40b0:	6f e4       	ldi	r22, 0x4F	; 79
    40b2:	70 e0       	ldi	r23, 0x00	; 0
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <eeprom_read_byte>
}
    40ba:	08 95       	ret

Disassembly of section .text.EM_set_air_pump_time:

000040bc <EM_set_air_pump_time>:

void EM_set_air_pump_time(uint16_t time){
	eeprom_update_word((uint16_t *) EEPROM_AIR_PUMP_T_ADDR, time);
    40bc:	bc 01       	movw	r22, r24
    40be:	80 e5       	ldi	r24, 0x50	; 80
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	0e 94 82 20 	call	0x4104	; 0x4104 <eeprom_update_word>
    40c6:	08 95       	ret

Disassembly of section .text.EM_get_air_pump_time:

000040c8 <EM_get_air_pump_time>:
}

uint16_t EM_get_air_pump_time(){
	return eeprom_read_word((const uint16_t *) EEPROM_AIR_PUMP_T_ADDR);
    40c8:	60 e5       	ldi	r22, 0x50	; 80
    40ca:	70 e0       	ldi	r23, 0x00	; 0
    40cc:	80 e0       	ldi	r24, 0x00	; 0
    40ce:	0e 94 3f 20 	call	0x407e	; 0x407e <eeprom_read_word>
}
    40d2:	08 95       	ret

Disassembly of section .text.EM_set_sp_interval:

000040d4 <EM_set_sp_interval>:

void EM_set_sp_interval(uint8_t time){
	eeprom_update_byte((uint8_t *) EEPROM_SP_INTERVAL_ADDR, time);
    40d4:	68 2f       	mov	r22, r24
    40d6:	82 e5       	ldi	r24, 0x52	; 82
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <eeprom_update_byte>
    40de:	08 95       	ret

Disassembly of section .text.EM_get_sp_interval:

000040e0 <EM_get_sp_interval>:
}
uint8_t EM_get_sp_interval(){
	return eeprom_read_byte((const uint8_t *) EEPROM_SP_INTERVAL_ADDR);
    40e0:	62 e5       	ldi	r22, 0x52	; 82
    40e2:	70 e0       	ldi	r23, 0x00	; 0
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <eeprom_read_byte>
    40ea:	08 95       	ret

Disassembly of section .text.LM_reset_module:

00004172 <LM_reset_module>:
bool LM_is_free(){
	return busy==false;
}

LM_STATUS LM_reset_module(){
	return util_reset_module();
    4172:	0e 94 0d 1a 	call	0x341a	; 0x341a <util_reset_module>
}
    4176:	08 95       	ret

Disassembly of section .text.LM_forward_msg:

00004178 <LM_forward_msg>:

void LM_forward_msg(const char msg[], char res[]){
	util_lora_forward_msg(msg, res);
    4178:	0e 94 b1 1b 	call	0x3762	; 0x3762 <util_lora_forward_msg>
    417c:	08 95       	ret

Disassembly of section .text.attach_ending:

00003daa <attach_ending>:
 * Auxiliary - global
**************************************************************/

void attach_ending(char buffer[])
{
    strcat(buffer, CMD_END_CHARS);
    3daa:	fc 01       	movw	r30, r24
    3dac:	01 90       	ld	r0, Z+
    3dae:	00 20       	and	r0, r0
    3db0:	e9 f7       	brne	.-6      	; 0x3dac <attach_ending+0x2>
    3db2:	cf 01       	movw	r24, r30
    3db4:	23 e0       	ldi	r18, 0x03	; 3
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	40 ea       	ldi	r20, 0xA0	; 160
    3dba:	54 e0       	ldi	r21, 0x04	; 4
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
    3dc4:	08 95       	ret

Disassembly of section .text.util_strbeginswith:

00003388 <util_strbeginswith>:
		case LM_NO_TEST:
		return sd->success_state;
		default:
		return sd->failure_state;
	}
}
    3388:	6f 92       	push	r6
    338a:	7f 92       	push	r7
    338c:	8f 92       	push	r8
    338e:	cf 92       	push	r12
    3390:	df 92       	push	r13
    3392:	ef 92       	push	r14
    3394:	0f 93       	push	r16
    3396:	1f 93       	push	r17
    3398:	3b 01       	movw	r6, r22
    339a:	88 2e       	mov	r8, r24
    339c:	69 01       	movw	r12, r18
    339e:	e4 2e       	mov	r14, r20
    33a0:	84 2f       	mov	r24, r20
    33a2:	b9 01       	movw	r22, r18
    33a4:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    33a8:	8c 01       	movw	r16, r24
    33aa:	4e 2d       	mov	r20, r14
    33ac:	96 01       	movw	r18, r12
    33ae:	88 2d       	mov	r24, r8
    33b0:	b3 01       	movw	r22, r6
    33b2:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <strncmp>
    33b6:	21 e0       	ldi	r18, 0x01	; 1
    33b8:	89 2b       	or	r24, r25
    33ba:	09 f0       	breq	.+2      	; 0x33be <util_strbeginswith+0x36>
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	82 2f       	mov	r24, r18
    33c0:	1f 91       	pop	r17
    33c2:	0f 91       	pop	r16
    33c4:	ef 90       	pop	r14
    33c6:	df 90       	pop	r13
    33c8:	cf 90       	pop	r12
    33ca:	8f 90       	pop	r8
    33cc:	7f 90       	pop	r7
    33ce:	6f 90       	pop	r6
    33d0:	08 95       	ret

Disassembly of section .text.util_reset_module:

0000341a <util_reset_module>:
bool util_strbeginswith(const char *s1, const char *s2){
	return strncmp(s1, s2, strlen(s2))==0?true:false;
}

LM_STATUS util_reset_module(){
	rn2483_reset_active();
    341a:	0e 94 a5 20 	call	0x414a	; 0x414a <rn2483_reset_active>
    341e:	2f ef       	ldi	r18, 0xFF	; 255
    3420:	89 e6       	ldi	r24, 0x69	; 105
    3422:	98 e1       	ldi	r25, 0x18	; 24
    3424:	21 50       	subi	r18, 0x01	; 1
    3426:	80 40       	sbci	r24, 0x00	; 0
    3428:	90 40       	sbci	r25, 0x00	; 0
    342a:	e1 f7       	brne	.-8      	; 0x3424 <util_reset_module+0xa>
    342c:	00 c0       	rjmp	.+0      	; 0x342e <util_reset_module+0x14>
    342e:	00 00       	nop
	_delay_ms(1000);
	rn2483_reset_deactive();
    3430:	0e 94 a9 20 	call	0x4152	; 0x4152 <rn2483_reset_deactive>
	
	while(!uart0_hal_message_ready()){};
    3434:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <uart0_hal_message_ready>
    3438:	88 23       	and	r24, r24
    343a:	e1 f3       	breq	.-8      	; 0x3434 <util_reset_module+0x1a>
	
	uart0_hal_read_message_as_str(lm_msg);
    343c:	80 e9       	ldi	r24, 0x90	; 144
    343e:	92 e0       	ldi	r25, 0x02	; 2
    3440:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <uart0_hal_read_message_as_str>
	
	if(util_strbeginswith(lm_msg, RN2483)){
    3444:	60 e9       	ldi	r22, 0x90	; 144
    3446:	72 e0       	ldi	r23, 0x02	; 2
    3448:	80 e8       	ldi	r24, 0x80	; 128
    344a:	2c e8       	ldi	r18, 0x8C	; 140
    344c:	35 e0       	ldi	r19, 0x05	; 5
    344e:	40 e0       	ldi	r20, 0x00	; 0
    3450:	0e 94 c4 19 	call	0x3388	; 0x3388 <util_strbeginswith>
    3454:	88 23       	and	r24, r24
    3456:	11 f0       	breq	.+4      	; 0x345c <util_reset_module+0x42>
		return LM_STATUS_SUCCESS;
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	08 95       	ret
	}else{
		return LM_STATUS_FATAL_ERROR;
    345c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    345e:	08 95       	ret

Disassembly of section .text.util_lora_forward_msg:

00003762 <util_lora_forward_msg>:

void util_lora_forward_msg(const char msg[], char res[]){
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	ea 01       	movw	r28, r20
	strcpy(lm_msg, msg);
    3768:	ab 01       	movw	r20, r22
    376a:	68 2f       	mov	r22, r24
    376c:	80 e9       	ldi	r24, 0x90	; 144
    376e:	92 e0       	ldi	r25, 0x02	; 2
    3770:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <strcpy>
	attach_ending(lm_msg);
    3774:	80 e9       	ldi	r24, 0x90	; 144
    3776:	92 e0       	ldi	r25, 0x02	; 2
    3778:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <attach_ending>
	uart0_hal_send_string(lm_msg);
    377c:	60 e9       	ldi	r22, 0x90	; 144
    377e:	72 e0       	ldi	r23, 0x02	; 2
    3780:	80 e8       	ldi	r24, 0x80	; 128
    3782:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <uart0_hal_send_string>
	
	while(!uart0_hal_message_ready());
    3786:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <uart0_hal_message_ready>
    378a:	88 23       	and	r24, r24
    378c:	e1 f3       	breq	.-8      	; 0x3786 <util_lora_forward_msg+0x24>
	uart0_hal_read_message_as_str(res);
    378e:	ce 01       	movw	r24, r28
    3790:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <uart0_hal_read_message_as_str>
    3794:	df 91       	pop	r29
    3796:	cf 91       	pop	r28
    3798:	08 95       	ret

Disassembly of section .text.datetime_to_BCD:

00001ac8 <datetime_to_BCD>:
	CMD_SET_ALARM_TIME[1]=decToBCD(dt.minute);
	status = TWI_API_write_data_stop(RTC_ADDR, CMD_SET_ALARM_TIME, 5);
	if(status != TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
	
	return RTC_STATUS_SUCCESS;
}
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <datetime_to_BCD+0x8>
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <datetime_to_BCD+0xa>
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <datetime_to_BCD+0xc>
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	f9 01       	movw	r30, r18
    1ada:	3d ec       	ldi	r19, 0xCD	; 205
    1adc:	43 9f       	mul	r20, r19
    1ade:	21 2d       	mov	r18, r1
    1ae0:	11 24       	eor	r1, r1
    1ae2:	26 95       	lsr	r18
    1ae4:	26 95       	lsr	r18
    1ae6:	26 95       	lsr	r18
    1ae8:	10 e1       	ldi	r17, 0x10	; 16
    1aea:	21 9f       	mul	r18, r17
    1aec:	d0 01       	movw	r26, r0
    1aee:	11 24       	eor	r1, r1
    1af0:	22 0f       	add	r18, r18
    1af2:	b2 2f       	mov	r27, r18
    1af4:	bb 0f       	add	r27, r27
    1af6:	bb 0f       	add	r27, r27
    1af8:	2b 0f       	add	r18, r27
    1afa:	42 1b       	sub	r20, r18
    1afc:	4a 2b       	or	r20, r26
    1afe:	40 83       	st	Z, r20
    1b00:	53 9f       	mul	r21, r19
    1b02:	21 2d       	mov	r18, r1
    1b04:	11 24       	eor	r1, r1
    1b06:	26 95       	lsr	r18
    1b08:	26 95       	lsr	r18
    1b0a:	26 95       	lsr	r18
    1b0c:	40 e1       	ldi	r20, 0x10	; 16
    1b0e:	24 9f       	mul	r18, r20
    1b10:	d0 01       	movw	r26, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	22 0f       	add	r18, r18
    1b16:	42 2f       	mov	r20, r18
    1b18:	44 0f       	add	r20, r20
    1b1a:	44 0f       	add	r20, r20
    1b1c:	24 0f       	add	r18, r20
    1b1e:	52 1b       	sub	r21, r18
    1b20:	5a 2b       	or	r21, r26
    1b22:	51 83       	std	Z+1, r21	; 0x01
    1b24:	63 9f       	mul	r22, r19
    1b26:	41 2d       	mov	r20, r1
    1b28:	11 24       	eor	r1, r1
    1b2a:	46 95       	lsr	r20
    1b2c:	46 95       	lsr	r20
    1b2e:	46 95       	lsr	r20
    1b30:	10 e1       	ldi	r17, 0x10	; 16
    1b32:	41 9f       	mul	r20, r17
    1b34:	d0 01       	movw	r26, r0
    1b36:	11 24       	eor	r1, r1
    1b38:	44 0f       	add	r20, r20
    1b3a:	24 2f       	mov	r18, r20
    1b3c:	22 0f       	add	r18, r18
    1b3e:	22 0f       	add	r18, r18
    1b40:	42 0f       	add	r20, r18
    1b42:	64 1b       	sub	r22, r20
    1b44:	6a 2b       	or	r22, r26
    1b46:	62 83       	std	Z+2, r22	; 0x02
    1b48:	73 9f       	mul	r23, r19
    1b4a:	41 2d       	mov	r20, r1
    1b4c:	11 24       	eor	r1, r1
    1b4e:	46 95       	lsr	r20
    1b50:	46 95       	lsr	r20
    1b52:	46 95       	lsr	r20
    1b54:	20 e1       	ldi	r18, 0x10	; 16
    1b56:	42 9f       	mul	r20, r18
    1b58:	d0 01       	movw	r26, r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	44 0f       	add	r20, r20
    1b5e:	24 2f       	mov	r18, r20
    1b60:	22 0f       	add	r18, r18
    1b62:	22 0f       	add	r18, r18
    1b64:	42 0f       	add	r20, r18
    1b66:	74 1b       	sub	r23, r20
    1b68:	7a 2b       	or	r23, r26
    1b6a:	73 83       	std	Z+3, r23	; 0x03
    1b6c:	83 9f       	mul	r24, r19
    1b6e:	41 2d       	mov	r20, r1
    1b70:	11 24       	eor	r1, r1
    1b72:	46 95       	lsr	r20
    1b74:	46 95       	lsr	r20
    1b76:	46 95       	lsr	r20
    1b78:	10 e1       	ldi	r17, 0x10	; 16
    1b7a:	41 9f       	mul	r20, r17
    1b7c:	b0 01       	movw	r22, r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	44 0f       	add	r20, r20
    1b82:	24 2f       	mov	r18, r20
    1b84:	22 0f       	add	r18, r18
    1b86:	22 0f       	add	r18, r18
    1b88:	42 0f       	add	r20, r18
    1b8a:	84 1b       	sub	r24, r20
    1b8c:	86 2b       	or	r24, r22
    1b8e:	84 83       	std	Z+4, r24	; 0x04
    1b90:	93 9f       	mul	r25, r19
    1b92:	31 2d       	mov	r19, r1
    1b94:	11 24       	eor	r1, r1
    1b96:	36 95       	lsr	r19
    1b98:	36 95       	lsr	r19
    1b9a:	36 95       	lsr	r19
    1b9c:	20 e1       	ldi	r18, 0x10	; 16
    1b9e:	32 9f       	mul	r19, r18
    1ba0:	a0 01       	movw	r20, r0
    1ba2:	11 24       	eor	r1, r1
    1ba4:	33 0f       	add	r19, r19
    1ba6:	83 2f       	mov	r24, r19
    1ba8:	88 0f       	add	r24, r24
    1baa:	88 0f       	add	r24, r24
    1bac:	38 0f       	add	r19, r24
    1bae:	93 1b       	sub	r25, r19
    1bb0:	94 2b       	or	r25, r20
    1bb2:	95 83       	std	Z+5, r25	; 0x05
    1bb4:	26 96       	adiw	r28, 0x06	; 6
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	08 95       	ret

Disassembly of section .text.RTC_get_current_time:

00001612 <RTC_get_current_time>:
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	27 97       	sbiw	r28, 0x07	; 7
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	8c 01       	movw	r16, r24
    162c:	21 e0       	ldi	r18, 0x01	; 1
    162e:	4f e9       	ldi	r20, 0x9F	; 159
    1630:	55 e0       	ldi	r21, 0x05	; 5
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	81 e5       	ldi	r24, 0x51	; 81
    1636:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <TWI_API_write_data>
    163a:	81 11       	cpse	r24, r1
    163c:	7c c0       	rjmp	.+248    	; 0x1736 <RTC_get_current_time+0x124>
    163e:	47 e0       	ldi	r20, 0x07	; 7
    1640:	be 01       	movw	r22, r28
    1642:	6f 5f       	subi	r22, 0xFF	; 255
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	81 e5       	ldi	r24, 0x51	; 81
    1648:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <TWI_API_repeat_read_data_stop>
    164c:	81 11       	cpse	r24, r1
    164e:	75 c0       	rjmp	.+234    	; 0x173a <RTC_get_current_time+0x128>
    1650:	29 81       	ldd	r18, Y+1	; 0x01
    1652:	82 2f       	mov	r24, r18
    1654:	8f 77       	andi	r24, 0x7F	; 127
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	95 95       	asr	r25
    165a:	87 95       	ror	r24
    165c:	95 95       	asr	r25
    165e:	87 95       	ror	r24
    1660:	95 95       	asr	r25
    1662:	87 95       	ror	r24
    1664:	95 95       	asr	r25
    1666:	87 95       	ror	r24
    1668:	88 0f       	add	r24, r24
    166a:	98 2f       	mov	r25, r24
    166c:	99 0f       	add	r25, r25
    166e:	99 0f       	add	r25, r25
    1670:	89 0f       	add	r24, r25
    1672:	2f 70       	andi	r18, 0x0F	; 15
    1674:	82 0f       	add	r24, r18
    1676:	f8 01       	movw	r30, r16
    1678:	80 83       	st	Z, r24
    167a:	2a 81       	ldd	r18, Y+2	; 0x02
    167c:	82 2f       	mov	r24, r18
    167e:	8f 77       	andi	r24, 0x7F	; 127
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	95 95       	asr	r25
    1684:	87 95       	ror	r24
    1686:	95 95       	asr	r25
    1688:	87 95       	ror	r24
    168a:	95 95       	asr	r25
    168c:	87 95       	ror	r24
    168e:	95 95       	asr	r25
    1690:	87 95       	ror	r24
    1692:	88 0f       	add	r24, r24
    1694:	98 2f       	mov	r25, r24
    1696:	99 0f       	add	r25, r25
    1698:	99 0f       	add	r25, r25
    169a:	89 0f       	add	r24, r25
    169c:	2f 70       	andi	r18, 0x0F	; 15
    169e:	82 0f       	add	r24, r18
    16a0:	81 83       	std	Z+1, r24	; 0x01
    16a2:	2b 81       	ldd	r18, Y+3	; 0x03
    16a4:	82 2f       	mov	r24, r18
    16a6:	8f 73       	andi	r24, 0x3F	; 63
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	95 95       	asr	r25
    16ac:	87 95       	ror	r24
    16ae:	95 95       	asr	r25
    16b0:	87 95       	ror	r24
    16b2:	95 95       	asr	r25
    16b4:	87 95       	ror	r24
    16b6:	95 95       	asr	r25
    16b8:	87 95       	ror	r24
    16ba:	88 0f       	add	r24, r24
    16bc:	98 2f       	mov	r25, r24
    16be:	99 0f       	add	r25, r25
    16c0:	99 0f       	add	r25, r25
    16c2:	89 0f       	add	r24, r25
    16c4:	2f 70       	andi	r18, 0x0F	; 15
    16c6:	82 0f       	add	r24, r18
    16c8:	82 83       	std	Z+2, r24	; 0x02
    16ca:	2c 81       	ldd	r18, Y+4	; 0x04
    16cc:	82 2f       	mov	r24, r18
    16ce:	8f 73       	andi	r24, 0x3F	; 63
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	95 95       	asr	r25
    16d4:	87 95       	ror	r24
    16d6:	95 95       	asr	r25
    16d8:	87 95       	ror	r24
    16da:	95 95       	asr	r25
    16dc:	87 95       	ror	r24
    16de:	95 95       	asr	r25
    16e0:	87 95       	ror	r24
    16e2:	88 0f       	add	r24, r24
    16e4:	98 2f       	mov	r25, r24
    16e6:	99 0f       	add	r25, r25
    16e8:	99 0f       	add	r25, r25
    16ea:	89 0f       	add	r24, r25
    16ec:	2f 70       	andi	r18, 0x0F	; 15
    16ee:	82 0f       	add	r24, r18
    16f0:	83 83       	std	Z+3, r24	; 0x03
    16f2:	2e 81       	ldd	r18, Y+6	; 0x06
    16f4:	82 2f       	mov	r24, r18
    16f6:	8f 71       	andi	r24, 0x1F	; 31
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	95 95       	asr	r25
    16fc:	87 95       	ror	r24
    16fe:	95 95       	asr	r25
    1700:	87 95       	ror	r24
    1702:	95 95       	asr	r25
    1704:	87 95       	ror	r24
    1706:	95 95       	asr	r25
    1708:	87 95       	ror	r24
    170a:	88 0f       	add	r24, r24
    170c:	98 2f       	mov	r25, r24
    170e:	99 0f       	add	r25, r25
    1710:	99 0f       	add	r25, r25
    1712:	89 0f       	add	r24, r25
    1714:	2f 70       	andi	r18, 0x0F	; 15
    1716:	82 0f       	add	r24, r18
    1718:	84 83       	std	Z+4, r24	; 0x04
    171a:	8f 81       	ldd	r24, Y+7	; 0x07
    171c:	98 2f       	mov	r25, r24
    171e:	92 95       	swap	r25
    1720:	9f 70       	andi	r25, 0x0F	; 15
    1722:	99 0f       	add	r25, r25
    1724:	29 2f       	mov	r18, r25
    1726:	22 0f       	add	r18, r18
    1728:	22 0f       	add	r18, r18
    172a:	92 0f       	add	r25, r18
    172c:	8f 70       	andi	r24, 0x0F	; 15
    172e:	89 0f       	add	r24, r25
    1730:	85 83       	std	Z+5, r24	; 0x05
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	03 c0       	rjmp	.+6      	; 0x173c <RTC_get_current_time+0x12a>
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	01 c0       	rjmp	.+2      	; 0x173c <RTC_get_current_time+0x12a>
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	27 96       	adiw	r28, 0x07	; 7
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret

Disassembly of section .text.RTC_set_current_time:

00002d28 <RTC_set_current_time>:
	dt->year=BCDTodec((data[6] & 0xFF));
	
	return RTC_STATUS_SUCCESS;
}

RTC_STATUS RTC_set_current_time(Datetime dt){
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	64 97       	sbiw	r28, 0x14	; 20
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data [8];
	DatetimeBCD bcd;
	datetime_to_BCD(dt, &bcd);
    2d3c:	9e 01       	movw	r18, r28
    2d3e:	27 5f       	subi	r18, 0xF7	; 247
    2d40:	3f 4f       	sbci	r19, 0xFF	; 255
    2d42:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <datetime_to_BCD>
	
	data[0]=0x02;
    2d46:	82 e0       	ldi	r24, 0x02	; 2
    2d48:	89 83       	std	Y+1, r24	; 0x01
	data[1]=bcd.second;
    2d4a:	89 85       	ldd	r24, Y+9	; 0x09
    2d4c:	8a 83       	std	Y+2, r24	; 0x02
	data[2]=bcd.minute;
    2d4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d50:	8b 83       	std	Y+3, r24	; 0x03
	data[3]=bcd.hour;
    2d52:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d54:	8c 83       	std	Y+4, r24	; 0x04
	data[4]=bcd.day;
    2d56:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d58:	8d 83       	std	Y+5, r24	; 0x05
	data[5]=0x00;
    2d5a:	1e 82       	std	Y+6, r1	; 0x06
	data[6]=bcd.month;
    2d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5e:	8f 83       	std	Y+7, r24	; 0x07
	data[7]=bcd.year;
    2d60:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d62:	88 87       	std	Y+8, r24	; 0x08
	
	uint8_t status=TWI_API_write_data_stop(RTC_ADDR, data, 8);
    2d64:	ae 01       	movw	r20, r28
    2d66:	4f 5f       	subi	r20, 0xFF	; 255
    2d68:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6a:	60 e8       	ldi	r22, 0x80	; 128
    2d6c:	28 e0       	ldi	r18, 0x08	; 8
    2d6e:	81 e5       	ldi	r24, 0x51	; 81
    2d70:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <TWI_API_write_data_stop>
	if(status!=TWI_CODE_SUCCESS) return RTC_STATUS_FATAL_ERROR;
    2d74:	88 23       	and	r24, r24
    2d76:	11 f0       	breq	.+4      	; 0x2d7c <RTC_set_current_time+0x54>
    2d78:	82 e0       	ldi	r24, 0x02	; 2
    2d7a:	01 c0       	rjmp	.+2      	; 0x2d7e <RTC_set_current_time+0x56>
	
	return RTC_STATUS_SUCCESS;
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
}
    2d7e:	64 96       	adiw	r28, 0x14	; 20
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	df 91       	pop	r29
    2d8c:	cf 91       	pop	r28
    2d8e:	08 95       	ret

Disassembly of section .text.bytes_2_uint:

00003dfc <bytes_2_uint>:
	if(data[5]!=crc) return false;
	
	return true;
}

static uint16_t bytes_2_uint(uint8_t data[]){
    3dfc:	fc 01       	movw	r30, r24
	f.bytes[3]=data[0];
	f.bytes[2]=data[1];
	f.bytes[1]=data[3];
	f.bytes[0]=data[4];
	
	return (uint16_t) f.f;
    3dfe:	54 81       	ldd	r21, Z+4	; 0x04
    3e00:	43 81       	ldd	r20, Z+3	; 0x03
    3e02:	31 81       	ldd	r19, Z+1	; 0x01
    3e04:	20 81       	ld	r18, Z
    3e06:	65 2f       	mov	r22, r21
    3e08:	74 2f       	mov	r23, r20
    3e0a:	83 2f       	mov	r24, r19
    3e0c:	92 2f       	mov	r25, r18
    3e0e:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__fixunssfsi>
}
    3e12:	cb 01       	movw	r24, r22
    3e14:	08 95       	ret

Disassembly of section .text.init_measurement:

0000379a <init_measurement>:
	_delay_ms(2000);
	return init_measurement();
}

void SCD30_sensor_off(){
	PM_HAL_SCD30_power(false);
    379a:	25 e0       	ldi	r18, 0x05	; 5
    379c:	43 e9       	ldi	r20, 0x93	; 147
    379e:	55 e0       	ldi	r21, 0x05	; 5
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	81 e6       	ldi	r24, 0x61	; 97
    37a4:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <TWI_API_write_data_stop>
    37a8:	81 11       	cpse	r24, r1
    37aa:	0f c0       	rjmp	.+30     	; 0x37ca <init_measurement+0x30>
    37ac:	25 e0       	ldi	r18, 0x05	; 5
    37ae:	48 e9       	ldi	r20, 0x98	; 152
    37b0:	55 e0       	ldi	r21, 0x05	; 5
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	81 e6       	ldi	r24, 0x61	; 97
    37b6:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <TWI_API_write_data_stop>
    37ba:	81 11       	cpse	r24, r1
    37bc:	08 c0       	rjmp	.+16     	; 0x37ce <init_measurement+0x34>
    37be:	0e 94 88 20 	call	0x4110	; 0x4110 <SCD30_HAL_data_ready>
    37c2:	88 23       	and	r24, r24
    37c4:	e1 f3       	breq	.-8      	; 0x37be <init_measurement+0x24>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	08 95       	ret
    37ca:	82 e0       	ldi	r24, 0x02	; 2
    37cc:	08 95       	ret
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	08 95       	ret

Disassembly of section .text.validate_data:

00003946 <validate_data>:
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    394a:	ec 01       	movw	r28, r24
    394c:	62 e0       	ldi	r22, 0x02	; 2
    394e:	0e 94 05 1c 	call	0x380a	; 0x380a <calc_crc8>
    3952:	9a 81       	ldd	r25, Y+2	; 0x02
    3954:	89 13       	cpse	r24, r25
    3956:	0a c0       	rjmp	.+20     	; 0x396c <validate_data+0x26>
    3958:	62 e0       	ldi	r22, 0x02	; 2
    395a:	ce 01       	movw	r24, r28
    395c:	03 96       	adiw	r24, 0x03	; 3
    395e:	0e 94 05 1c 	call	0x380a	; 0x380a <calc_crc8>
    3962:	9d 81       	ldd	r25, Y+5	; 0x05
    3964:	89 17       	cp	r24, r25
    3966:	21 f0       	breq	.+8      	; 0x3970 <validate_data+0x2a>
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	03 c0       	rjmp	.+6      	; 0x3972 <validate_data+0x2c>
    396c:	80 e0       	ldi	r24, 0x00	; 0
    396e:	01 c0       	rjmp	.+2      	; 0x3972 <validate_data+0x2c>
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	df 91       	pop	r29
    3974:	cf 91       	pop	r28
    3976:	08 95       	ret

Disassembly of section .text.read_value:

000024a8 <read_value>:
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <read_value+0xa>
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <read_value+0xc>
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <read_value+0xe>
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	8c 01       	movw	r16, r24
    24bc:	8f ef       	ldi	r24, 0xFF	; 255
    24be:	9f ef       	ldi	r25, 0xFF	; 255
    24c0:	f8 01       	movw	r30, r16
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	0e 94 88 20 	call	0x4110	; 0x4110 <SCD30_HAL_data_ready>
    24ca:	81 11       	cpse	r24, r1
    24cc:	07 c0       	rjmp	.+14     	; 0x24dc <read_value+0x34>
    24ce:	8e ef       	ldi	r24, 0xFE	; 254
    24d0:	9f ef       	ldi	r25, 0xFF	; 255
    24d2:	f8 01       	movw	r30, r16
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	2c c0       	rjmp	.+88     	; 0x2534 <read_value+0x8c>
    24dc:	22 e0       	ldi	r18, 0x02	; 2
    24de:	4d e9       	ldi	r20, 0x9D	; 157
    24e0:	55 e0       	ldi	r21, 0x05	; 5
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	81 e6       	ldi	r24, 0x61	; 97
    24e6:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <TWI_API_write_data_stop>
    24ea:	81 11       	cpse	r24, r1
    24ec:	1e c0       	rjmp	.+60     	; 0x252a <read_value+0x82>
    24ee:	8f e3       	ldi	r24, 0x3F	; 63
    24f0:	9f e1       	ldi	r25, 0x1F	; 31
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <read_value+0x4a>
    24f6:	00 c0       	rjmp	.+0      	; 0x24f8 <read_value+0x50>
    24f8:	00 00       	nop
    24fa:	46 e0       	ldi	r20, 0x06	; 6
    24fc:	be 01       	movw	r22, r28
    24fe:	6f 5f       	subi	r22, 0xFF	; 255
    2500:	7f 4f       	sbci	r23, 0xFF	; 255
    2502:	81 e6       	ldi	r24, 0x61	; 97
    2504:	0e 94 8a 1c 	call	0x3914	; 0x3914 <TWI_API_read_data_ack_end_nack_stop>
    2508:	81 11       	cpse	r24, r1
    250a:	11 c0       	rjmp	.+34     	; 0x252e <read_value+0x86>
    250c:	ce 01       	movw	r24, r28
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	0e 94 a3 1c 	call	0x3946	; 0x3946 <validate_data>
    2514:	88 23       	and	r24, r24
    2516:	69 f0       	breq	.+26     	; 0x2532 <read_value+0x8a>
    2518:	ce 01       	movw	r24, r28
    251a:	01 96       	adiw	r24, 0x01	; 1
    251c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <bytes_2_uint>
    2520:	f8 01       	movw	r30, r16
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	80 83       	st	Z, r24
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	05 c0       	rjmp	.+10     	; 0x2534 <read_value+0x8c>
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	03 c0       	rjmp	.+6      	; 0x2534 <read_value+0x8c>
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	01 c0       	rjmp	.+2      	; 0x2534 <read_value+0x8c>
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	26 96       	adiw	r28, 0x06	; 6
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	08 95       	ret

Disassembly of section .text.vect_SCD_do_sample:

00003460 <vect_SCD_do_sample>:
    3460:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <_data>
    3464:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <_data+0x1>
    3468:	20 91 2a 07 	lds	r18, 0x072A	; 0x80072a <cntSamples>
    346c:	30 91 2b 07 	lds	r19, 0x072B	; 0x80072b <cntSamples+0x1>
    3470:	a9 01       	movw	r20, r18
    3472:	4f 5f       	subi	r20, 0xFF	; 255
    3474:	5f 4f       	sbci	r21, 0xFF	; 255
    3476:	50 93 2b 07 	sts	0x072B, r21	; 0x80072b <cntSamples+0x1>
    347a:	40 93 2a 07 	sts	0x072A, r20	; 0x80072a <cntSamples>
    347e:	22 0f       	add	r18, r18
    3480:	33 1f       	adc	r19, r19
    3482:	82 0f       	add	r24, r18
    3484:	93 1f       	adc	r25, r19
    3486:	0e 94 54 12 	call	0x24a8	; 0x24a8 <read_value>
    348a:	20 91 2a 07 	lds	r18, 0x072A	; 0x80072a <cntSamples>
    348e:	30 91 2b 07 	lds	r19, 0x072B	; 0x80072b <cntSamples+0x1>
    3492:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <_nSamples>
    3496:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <_nSamples+0x1>
    349a:	28 17       	cp	r18, r24
    349c:	39 07       	cpc	r19, r25
    349e:	10 f0       	brcs	.+4      	; 0x34a4 <vect_SCD_do_sample+0x44>
    34a0:	0e 94 4c 20 	call	0x4098	; 0x4098 <TC1_HAL_stop>
    34a4:	08 95       	ret

Disassembly of section .text.SCD30_sensor_on:

00003c52 <SCD30_sensor_on>:
    3c52:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <SCD30_HAL_init>
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <PM_HAL_SCD30_power>
    3c5c:	2f ef       	ldi	r18, 0xFF	; 255
    3c5e:	83 ed       	ldi	r24, 0xD3	; 211
    3c60:	90 e3       	ldi	r25, 0x30	; 48
    3c62:	21 50       	subi	r18, 0x01	; 1
    3c64:	80 40       	sbci	r24, 0x00	; 0
    3c66:	90 40       	sbci	r25, 0x00	; 0
    3c68:	e1 f7       	brne	.-8      	; 0x3c62 <SCD30_sensor_on+0x10>
    3c6a:	00 c0       	rjmp	.+0      	; 0x3c6c <SCD30_sensor_on+0x1a>
    3c6c:	00 00       	nop
    3c6e:	0e 94 cd 1b 	call	0x379a	; 0x379a <init_measurement>
    3c72:	08 95       	ret

Disassembly of section .text.SCD30_init_sampling:

00003c74 <SCD30_init_sampling>:
}

void SCD30_init_sampling(uint16_t samplingInterval, uint16_t nSamples, uint16_t data[]){
	_nSamples=nSamples;
    3c74:	70 93 2f 07 	sts	0x072F, r23	; 0x80072f <_nSamples+0x1>
    3c78:	60 93 2e 07 	sts	0x072E, r22	; 0x80072e <_nSamples>
	cntSamples=0;
    3c7c:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <cntSamples+0x1>
    3c80:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <cntSamples>
	_data=data;
    3c84:	50 93 2d 07 	sts	0x072D, r21	; 0x80072d <_data+0x1>
    3c88:	40 93 2c 07 	sts	0x072C, r20	; 0x80072c <_data>

	//Init
	TC1_HAL_init(samplingInterval, &vect_SCD_do_sample);
    3c8c:	60 e3       	ldi	r22, 0x30	; 48
    3c8e:	7a e1       	ldi	r23, 0x1A	; 26
    3c90:	0e 94 56 1c 	call	0x38ac	; 0x38ac <TC1_HAL_init>
    3c94:	08 95       	ret

Disassembly of section .text.SCD30_deinit_sampling:

0000401c <SCD30_deinit_sampling>:
}

void SCD30_deinit_sampling(){
	TC1_HAL_stop();
    401c:	0e 94 4c 20 	call	0x4098	; 0x4098 <TC1_HAL_stop>
	_data=NULL;
    4020:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <_data+0x1>
    4024:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <_data>
    4028:	08 95       	ret

Disassembly of section .text.SCD30_start_sampling:

0000412e <SCD30_start_sampling>:
}

void SCD30_start_sampling(){
	vect_SCD_do_sample();
    412e:	0e 94 30 1a 	call	0x3460	; 0x3460 <vect_SCD_do_sample>
	TC1_HAL_start();
    4132:	0e 94 46 20 	call	0x408c	; 0x408c <TC1_HAL_start>
    4136:	08 95       	ret

Disassembly of section .text.SCD30_is_sampling_done:

00003dc6 <SCD30_is_sampling_done>:
}

bool SCD30_is_sampling_done(){
	return cntSamples>=_nSamples;
    3dc6:	40 91 2a 07 	lds	r20, 0x072A	; 0x80072a <cntSamples>
    3dca:	50 91 2b 07 	lds	r21, 0x072B	; 0x80072b <cntSamples+0x1>
    3dce:	20 91 2e 07 	lds	r18, 0x072E	; 0x80072e <_nSamples>
    3dd2:	30 91 2f 07 	lds	r19, 0x072F	; 0x80072f <_nSamples+0x1>
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	42 17       	cp	r20, r18
    3dda:	53 07       	cpc	r21, r19
    3ddc:	08 f4       	brcc	.+2      	; 0x3de0 <SCD30_is_sampling_done+0x1a>
    3dde:	80 e0       	ldi	r24, 0x00	; 0
}
    3de0:	08 95       	ret

Disassembly of section .text.SCD30_get_reading:

00003e16 <SCD30_get_reading>:

SCD30_STATUS SCD30_get_reading(uint16_t *value){
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	ec 01       	movw	r28, r24
	while(!SCD30_HAL_data_ready()){};
    3e1c:	0e 94 88 20 	call	0x4110	; 0x4110 <SCD30_HAL_data_ready>
    3e20:	88 23       	and	r24, r24
    3e22:	e1 f3       	breq	.-8      	; 0x3e1c <SCD30_get_reading+0x6>
	
	return read_value(value);
    3e24:	ce 01       	movw	r24, r28
    3e26:	0e 94 54 12 	call	0x24a8	; 0x24a8 <read_value>
}
    3e2a:	df 91       	pop	r29
    3e2c:	cf 91       	pop	r28
    3e2e:	08 95       	ret

Disassembly of section .text.parse_cmd:

00003b70 <parse_cmd>:
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3b70:	fc 01       	movw	r30, r24
    3b72:	80 81       	ld	r24, Z
    3b74:	82 37       	cpi	r24, 0x72	; 114
    3b76:	41 f0       	breq	.+16     	; 0x3b88 <parse_cmd+0x18>
	if(msg[0]=='w') return CONF_WRTIE;
    3b78:	87 37       	cpi	r24, 0x77	; 119
    3b7a:	41 f0       	breq	.+16     	; 0x3b8c <parse_cmd+0x1c>
	if(msg[0]=='c') return CONF_CONNECT;
    3b7c:	83 36       	cpi	r24, 0x63	; 99
    3b7e:	41 f0       	breq	.+16     	; 0x3b90 <parse_cmd+0x20>
	if(msg[0]=='s') return CONF_SAMPLE;
    3b80:	83 37       	cpi	r24, 0x73	; 115
    3b82:	41 f4       	brne	.+16     	; 0x3b94 <parse_cmd+0x24>
    3b84:	8a e0       	ldi	r24, 0x0A	; 10
    3b86:	08 95       	ret
		}
	}
}

static CONF_STATES parse_cmd(char msg[]){
	if(msg[0]=='r') return CONF_READ;
    3b88:	87 e0       	ldi	r24, 0x07	; 7
    3b8a:	08 95       	ret
	if(msg[0]=='w') return CONF_WRTIE;
    3b8c:	88 e0       	ldi	r24, 0x08	; 8
    3b8e:	08 95       	ret
	if(msg[0]=='c') return CONF_CONNECT;
    3b90:	89 e0       	ldi	r24, 0x09	; 9
    3b92:	08 95       	ret
	if(msg[0]=='s') return CONF_SAMPLE;
	
	return CONF_NOT_VALID;
    3b94:	85 e0       	ldi	r24, 0x05	; 5
}
    3b96:	08 95       	ret

Disassembly of section .text.validate_cmd:

00002ef6 <validate_cmd>:

static bool validate_cmd(char msg[]){
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	ec 01       	movw	r28, r24
	uint16_t len=strlen(msg);
    2efc:	bc 01       	movw	r22, r24
    2efe:	80 e8       	ldi	r24, 0x80	; 128
    2f00:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    2f04:	bc 01       	movw	r22, r24
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2f06:	fc 01       	movw	r30, r24
    2f08:	31 97       	sbiw	r30, 0x01	; 1
    2f0a:	ec 0f       	add	r30, r28
    2f0c:	fd 1f       	adc	r31, r29
    2f0e:	80 81       	ld	r24, Z
    2f10:	80 32       	cpi	r24, 0x20	; 32
    2f12:	b1 f0       	breq	.+44     	; 0x2f40 <validate_cmd+0x4a>
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e0       	ldi	r20, 0x00	; 0
    2f1a:	0d c0       	rjmp	.+26     	; 0x2f36 <validate_cmd+0x40>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e2 0f       	add	r30, r18
    2f20:	f3 1f       	adc	r31, r19
    2f22:	90 81       	ld	r25, Z
    2f24:	90 32       	cpi	r25, 0x20	; 32
    2f26:	21 f4       	brne	.+8      	; 0x2f30 <validate_cmd+0x3a>
			if(lastCharWasSpace) return false;
    2f28:	41 11       	cpse	r20, r1
    2f2a:	0c c0       	rjmp	.+24     	; 0x2f44 <validate_cmd+0x4e>
			lastCharWasSpace=true;
    2f2c:	41 e0       	ldi	r20, 0x01	; 1
    2f2e:	01 c0       	rjmp	.+2      	; 0x2f32 <validate_cmd+0x3c>
		}else{
			lastCharWasSpace=false;
    2f30:	40 e0       	ldi	r20, 0x00	; 0
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
    2f32:	2f 5f       	subi	r18, 0xFF	; 255
    2f34:	3f 4f       	sbci	r19, 0xFF	; 255
    2f36:	26 17       	cp	r18, r22
    2f38:	37 07       	cpc	r19, r23
    2f3a:	80 f3       	brcs	.-32     	; 0x2f1c <validate_cmd+0x26>
			lastCharWasSpace=true;
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	03 c0       	rjmp	.+6      	; 0x2f46 <validate_cmd+0x50>

static bool validate_cmd(char msg[]){
	uint16_t len=strlen(msg);
	bool lastCharWasSpace=false;
	
	if(msg[len-1]==' ') return false;
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	01 c0       	rjmp	.+2      	; 0x2f46 <validate_cmd+0x50>
	
	//Check for multiple space in row
	for (uint16_t i=0; i<len; i++)
	{
		if(msg[i]==' '){
			if(lastCharWasSpace) return false;
    2f44:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			lastCharWasSpace=false;
		}
	}
	return true;
}
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	08 95       	ret

Disassembly of section .text.CONF_enter:

00001752 <CONF_enter>:
char cnf_reply[200];

static CONF_STATES parse_cmd(char msg[]);
static bool validate_cmd(char msg[]);

void CONF_enter(){
    1752:	cf 93       	push	r28
	uart1_hal_init();
    1754:	0e 94 3c 1b 	call	0x3678	; 0x3678 <uart1_hal_init>
	CONF_STATES state=CONF_INTRO;
    1758:	c0 e0       	ldi	r28, 0x00	; 0
    175a:	0d c0       	rjmp	.+26     	; 0x1776 <CONF_enter+0x24>
				
				if(!init_methane_SCD30()){
					uart1_hal_send_string("Failed to initialize system...");
					state=CONF_EXIT;
				}else{
					state=CONF_CLEAR_FOR_NEW_CMD;
    175c:	c2 e0       	ldi	r28, 0x02	; 2
    175e:	0b c0       	rjmp	.+22     	; 0x1776 <CONF_enter+0x24>
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
					state=CONF_PARSE;
				}
				if(uart1_hal_rx_full()){
					state=CONF_NOT_VALID;
    1760:	c5 e0       	ldi	r28, 0x05	; 5
    1762:	09 c0       	rjmp	.+18     	; 0x1776 <CONF_enter+0x24>
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
				if(validate_cmd(cnf_rx_cmd)){
					state=parse_cmd(cnf_rx_cmd);
				}else{
					state=CONF_FORMAT_ERR;
    1764:	c6 e0       	ldi	r28, 0x06	; 6
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <CONF_enter+0x24>
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1768:	c5 e0       	ldi	r28, 0x05	; 5
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <CONF_enter+0x24>
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    176c:	c5 e0       	ldi	r28, 0x05	; 5
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <CONF_enter+0x24>
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
					state=CONF_CLEAR_FOR_NEW_CMD;
				}else{
					state=CONF_NOT_VALID;
    1770:	c5 e0       	ldi	r28, 0x05	; 5
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <CONF_enter+0x24>
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
					state=CONF_REPLY;
				}else{
					state=CONF_NOT_VALID;
    1774:	c5 e0       	ldi	r28, 0x05	; 5
void CONF_enter(){
	uart1_hal_init();
	CONF_STATES state=CONF_INTRO;
	
	while(1){
		switch(state){
    1776:	ec 2f       	mov	r30, r28
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	ec 30       	cpi	r30, 0x0C	; 12
    177c:	f1 05       	cpc	r31, r1
    177e:	d8 f7       	brcc	.-10     	; 0x1776 <CONF_enter+0x24>
    1780:	e2 5c       	subi	r30, 0xC2	; 194
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__tablejump2__>
			case CONF_INTRO:
				uart1_hal_send_string("******** Methane Sensor v1.0 ********");
    1788:	6c e7       	ldi	r22, 0x7C	; 124
    178a:	73 e0       	ldi	r23, 0x03	; 3
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
				uart1_hal_send_string("Setting modules up... Please wait");
    1792:	62 ea       	ldi	r22, 0xA2	; 162
    1794:	73 e0       	ldi	r23, 0x03	; 3
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
				
				if(!init_methane_SCD30()){
    179c:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <init_methane_SCD30>
    17a0:	81 11       	cpse	r24, r1
    17a2:	dc cf       	rjmp	.-72     	; 0x175c <CONF_enter+0xa>
					uart1_hal_send_string("Failed to initialize system...");
    17a4:	64 ec       	ldi	r22, 0xC4	; 196
    17a6:	73 e0       	ldi	r23, 0x03	; 3
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
					state=CONF_EXIT;
    17ae:	c4 e0       	ldi	r28, 0x04	; 4
    17b0:	e2 cf       	rjmp	.-60     	; 0x1776 <CONF_enter+0x24>
					
			break;
			
			case CONF_WAIT_FOR_CMD:
				state=CONF_WAIT_FOR_CMD;
				if(uart1_hal_message_ready()){
    17b2:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <uart1_hal_message_ready>
    17b6:	81 11       	cpse	r24, r1
					state=CONF_PARSE;
    17b8:	c3 e0       	ldi	r28, 0x03	; 3
				}
				if(uart1_hal_rx_full()){
    17ba:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <uart1_hal_rx_full>
    17be:	81 11       	cpse	r24, r1
    17c0:	cf cf       	rjmp	.-98     	; 0x1760 <CONF_enter+0xe>
    17c2:	d9 cf       	rjmp	.-78     	; 0x1776 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_PARSE:
				uart1_hal_read_message_as_str(cnf_rx_cmd);
    17c4:	80 e2       	ldi	r24, 0x20	; 32
    17c6:	94 e0       	ldi	r25, 0x04	; 4
    17c8:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <uart1_hal_read_message_as_str>
				if(validate_cmd(cnf_rx_cmd)){
    17cc:	80 e2       	ldi	r24, 0x20	; 32
    17ce:	94 e0       	ldi	r25, 0x04	; 4
    17d0:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <validate_cmd>
    17d4:	88 23       	and	r24, r24
    17d6:	31 f2       	breq	.-116    	; 0x1764 <CONF_enter+0x12>
					state=parse_cmd(cnf_rx_cmd);
    17d8:	80 e2       	ldi	r24, 0x20	; 32
    17da:	94 e0       	ldi	r25, 0x04	; 4
    17dc:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <parse_cmd>
    17e0:	c8 2f       	mov	r28, r24
    17e2:	c9 cf       	rjmp	.-110    	; 0x1776 <CONF_enter+0x24>
					state=CONF_FORMAT_ERR;
				}
			break;
			
			case CONF_READ:
				if(handle_read(cnf_rx_cmd, cnf_reply)){
    17e4:	60 e2       	ldi	r22, 0x20	; 32
    17e6:	74 e0       	ldi	r23, 0x04	; 4
    17e8:	80 e8       	ldi	r24, 0x80	; 128
    17ea:	48 e5       	ldi	r20, 0x58	; 88
    17ec:	53 e0       	ldi	r21, 0x03	; 3
    17ee:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <handle_read>
    17f2:	88 23       	and	r24, r24
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <CONF_enter+0xa6>
    17f6:	b8 cf       	rjmp	.-144    	; 0x1768 <CONF_enter+0x16>
					state=CONF_REPLY;
    17f8:	cb e0       	ldi	r28, 0x0B	; 11
    17fa:	bd cf       	rjmp	.-134    	; 0x1776 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_WRTIE:
				if(handle_write(cnf_rx_cmd, cnf_reply)){
    17fc:	60 e2       	ldi	r22, 0x20	; 32
    17fe:	74 e0       	ldi	r23, 0x04	; 4
    1800:	80 e8       	ldi	r24, 0x80	; 128
    1802:	48 e5       	ldi	r20, 0x58	; 88
    1804:	53 e0       	ldi	r21, 0x03	; 3
    1806:	0e 94 31 09 	call	0x1262	; 0x1262 <handle_write>
    180a:	88 23       	and	r24, r24
    180c:	09 f4       	brne	.+2      	; 0x1810 <CONF_enter+0xbe>
    180e:	ae cf       	rjmp	.-164    	; 0x176c <CONF_enter+0x1a>
					state=CONF_REPLY;
    1810:	cb e0       	ldi	r28, 0x0B	; 11
    1812:	b1 cf       	rjmp	.-158    	; 0x1776 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_CONNECT:
				if(CONNECT(cnf_rx_cmd)){
    1814:	60 e2       	ldi	r22, 0x20	; 32
    1816:	74 e0       	ldi	r23, 0x04	; 4
    1818:	80 e8       	ldi	r24, 0x80	; 128
    181a:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <CONNECT>
    181e:	88 23       	and	r24, r24
    1820:	09 f4       	brne	.+2      	; 0x1824 <CONF_enter+0xd2>
    1822:	a6 cf       	rjmp	.-180    	; 0x1770 <CONF_enter+0x1e>
					state=CONF_CLEAR_FOR_NEW_CMD;
    1824:	c2 e0       	ldi	r28, 0x02	; 2
    1826:	a7 cf       	rjmp	.-178    	; 0x1776 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_SAMPLE:
				if(handle_sample(cnf_rx_cmd, cnf_reply)){
    1828:	60 e2       	ldi	r22, 0x20	; 32
    182a:	74 e0       	ldi	r23, 0x04	; 4
    182c:	80 e8       	ldi	r24, 0x80	; 128
    182e:	48 e5       	ldi	r20, 0x58	; 88
    1830:	53 e0       	ldi	r21, 0x03	; 3
    1832:	0e 94 a5 12 	call	0x254a	; 0x254a <handle_sample>
    1836:	88 23       	and	r24, r24
    1838:	09 f4       	brne	.+2      	; 0x183c <CONF_enter+0xea>
    183a:	9c cf       	rjmp	.-200    	; 0x1774 <CONF_enter+0x22>
					state=CONF_REPLY;
    183c:	cb e0       	ldi	r28, 0x0B	; 11
    183e:	9b cf       	rjmp	.-202    	; 0x1776 <CONF_enter+0x24>
					state=CONF_NOT_VALID;
				}
			break;
			
			case CONF_REPLY:
				uart1_hal_send_string(cnf_reply);
    1840:	68 e5       	ldi	r22, 0x58	; 88
    1842:	73 e0       	ldi	r23, 0x03	; 3
    1844:	80 e8       	ldi	r24, 0x80	; 128
    1846:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    184a:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    184c:	94 cf       	rjmp	.-216    	; 0x1776 <CONF_enter+0x24>
			
			case CONF_NOT_VALID:
				uart1_hal_send_string("Not valid");
    184e:	63 ee       	ldi	r22, 0xE3	; 227
    1850:	73 e0       	ldi	r23, 0x03	; 3
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1858:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    185a:	8d cf       	rjmp	.-230    	; 0x1776 <CONF_enter+0x24>
			
			case CONF_FORMAT_ERR:
				uart1_hal_send_string("Wrong format");
    185c:	6d ee       	ldi	r22, 0xED	; 237
    185e:	73 e0       	ldi	r23, 0x03	; 3
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
				state=CONF_CLEAR_FOR_NEW_CMD;
    1866:	c2 e0       	ldi	r28, 0x02	; 2
			break;
    1868:	86 cf       	rjmp	.-244    	; 0x1776 <CONF_enter+0x24>
			
			case CONF_CLEAR_FOR_NEW_CMD:
				uart1_hal_clear_rx_buffer();
    186a:	0e 94 92 20 	call	0x4124	; 0x4124 <uart1_hal_clear_rx_buffer>
				uart1_hal_send_string("******* Ready for new command *******");
    186e:	6a ef       	ldi	r22, 0xFA	; 250
    1870:	73 e0       	ldi	r23, 0x03	; 3
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
				state=CONF_WAIT_FOR_CMD;
    1878:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    187a:	7d cf       	rjmp	.-262    	; 0x1776 <CONF_enter+0x24>
			
			case CONF_EXIT:
				return;
		}
	}
}
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

Disassembly of section .text.CON_RN2483_parse:

00003bc0 <CON_RN2483_parse>:
	}
	
	return true;
}

static STATES_CON_LORA CON_RN2483_parse(char msg[]){
    3bc0:	0f 93       	push	r16
    3bc2:	1f 93       	push	r17
	if(strncmp(msg, "exit", strlen("exit"))==0){
    3bc4:	bc 01       	movw	r22, r24
    3bc6:	80 e8       	ldi	r24, 0x80	; 128
    3bc8:	04 e0       	ldi	r16, 0x04	; 4
    3bca:	10 e0       	ldi	r17, 0x00	; 0
    3bcc:	2e e0       	ldi	r18, 0x0E	; 14
    3bce:	35 e0       	ldi	r19, 0x05	; 5
    3bd0:	40 e0       	ldi	r20, 0x00	; 0
    3bd2:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <strncmp>
    3bd6:	89 2b       	or	r24, r25
    3bd8:	11 f4       	brne	.+4      	; 0x3bde <CON_RN2483_parse+0x1e>
		return CL_EXIT;
    3bda:	84 e0       	ldi	r24, 0x04	; 4
    3bdc:	01 c0       	rjmp	.+2      	; 0x3be0 <CON_RN2483_parse+0x20>
	}
	return CL_FORWARD;
    3bde:	83 e0       	ldi	r24, 0x03	; 3
    3be0:	1f 91       	pop	r17
    3be2:	0f 91       	pop	r16
    3be4:	08 95       	ret

Disassembly of section .text.CON_RN2483:

00001cc6 <CON_RN2483>:
	}
}



static bool CON_RN2483(){
    1cc6:	6f 92       	push	r6
    1cc8:	7f 92       	push	r7
    1cca:	8f 92       	push	r8
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
	STATES_CON_LORA state=CL_INIT;
    1cd6:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (1)
	{
		switch(state){
    1cd8:	c2 30       	cpi	r28, 0x02	; 2
    1cda:	19 f1       	breq	.+70     	; 0x1d22 <CON_RN2483+0x5c>
    1cdc:	28 f4       	brcc	.+10     	; 0x1ce8 <CON_RN2483+0x22>
    1cde:	cc 23       	and	r28, r28
    1ce0:	49 f0       	breq	.+18     	; 0x1cf4 <CON_RN2483+0x2e>
    1ce2:	c1 30       	cpi	r28, 0x01	; 1
    1ce4:	a1 f0       	breq	.+40     	; 0x1d0e <CON_RN2483+0x48>
    1ce6:	f8 cf       	rjmp	.-16     	; 0x1cd8 <CON_RN2483+0x12>
    1ce8:	c3 30       	cpi	r28, 0x03	; 3
    1cea:	09 f1       	breq	.+66     	; 0x1d2e <CON_RN2483+0x68>
    1cec:	c4 30       	cpi	r28, 0x04	; 4
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <CON_RN2483+0x2c>
    1cf0:	4d c0       	rjmp	.+154    	; 0x1d8c <CON_RN2483+0xc6>
    1cf2:	f2 cf       	rjmp	.-28     	; 0x1cd8 <CON_RN2483+0x12>
			case CL_INIT:
				uart0_hal_init();
    1cf4:	0e 94 1e 1b 	call	0x363c	; 0x363c <uart0_hal_init>
				rn2483_init();
    1cf8:	0e 94 a1 20 	call	0x4142	; 0x4142 <rn2483_init>
				LM_reset_module();
    1cfc:	0e 94 b9 20 	call	0x4172	; 0x4172 <LM_reset_module>
				uart1_hal_send_string("******* You are directly connected to RN2483 ********");
    1d00:	63 e1       	ldi	r22, 0x13	; 19
    1d02:	75 e0       	ldi	r23, 0x05	; 5
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
				state=CL_READ_MSG;
    1d0a:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1d0c:	e5 cf       	rjmp	.-54     	; 0x1cd8 <CON_RN2483+0x12>
			
			case CL_READ_MSG:
				state=CL_READ_MSG;
				if(uart1_hal_message_ready()){
    1d0e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <uart1_hal_message_ready>
    1d12:	88 23       	and	r24, r24
    1d14:	09 f3       	breq	.-62     	; 0x1cd8 <CON_RN2483+0x12>
					uart1_hal_read_message_as_str(cnf_rx_cmd);
    1d16:	80 e2       	ldi	r24, 0x20	; 32
    1d18:	94 e0       	ldi	r25, 0x04	; 4
    1d1a:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <uart1_hal_read_message_as_str>
					state=CL_PARSE_MSG;
    1d1e:	c2 e0       	ldi	r28, 0x02	; 2
    1d20:	db cf       	rjmp	.-74     	; 0x1cd8 <CON_RN2483+0x12>
				}
			break;
			
			case CL_PARSE_MSG:
				state=CON_RN2483_parse(cnf_rx_cmd);
    1d22:	80 e2       	ldi	r24, 0x20	; 32
    1d24:	94 e0       	ldi	r25, 0x04	; 4
    1d26:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <CON_RN2483_parse>
    1d2a:	c8 2f       	mov	r28, r24
			break;
    1d2c:	d5 cf       	rjmp	.-86     	; 0x1cd8 <CON_RN2483+0x12>
			
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
    1d2e:	80 e2       	ldi	r24, 0x20	; 32
    1d30:	94 e0       	ldi	r25, 0x04	; 4
    1d32:	6c 01       	movw	r12, r24
    1d34:	20 e8       	ldi	r18, 0x80	; 128
    1d36:	e2 2e       	mov	r14, r18
    1d38:	2f 93       	push	r18
    1d3a:	df 92       	push	r13
    1d3c:	8f 93       	push	r24
    1d3e:	89 e4       	ldi	r24, 0x49	; 73
    1d40:	95 e0       	ldi	r25, 0x05	; 5
    1d42:	a0 e0       	ldi	r26, 0x00	; 0
    1d44:	af 93       	push	r26
    1d46:	9f 93       	push	r25
    1d48:	8f 93       	push	r24
    1d4a:	c8 e5       	ldi	r28, 0x58	; 88
    1d4c:	d3 e0       	ldi	r29, 0x03	; 3
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
				uart1_hal_send_string(cnf_reply);
    1d56:	3e 01       	movw	r6, r28
    1d58:	20 e8       	ldi	r18, 0x80	; 128
    1d5a:	82 2e       	mov	r8, r18
    1d5c:	88 2d       	mov	r24, r8
    1d5e:	b3 01       	movw	r22, r6
    1d60:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
    1d64:	ae 01       	movw	r20, r28
    1d66:	6c 2d       	mov	r22, r12
    1d68:	7d 2d       	mov	r23, r13
    1d6a:	8e 2d       	mov	r24, r14
    1d6c:	0e 94 bc 20 	call	0x4178	; 0x4178 <LM_forward_msg>
				uart1_hal_send_string(cnf_reply);
    1d70:	88 2d       	mov	r24, r8
    1d72:	b3 01       	movw	r22, r6
    1d74:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
				state=CL_READ_MSG;
			break;
    1d78:	8d b7       	in	r24, 0x3d	; 61
    1d7a:	9e b7       	in	r25, 0x3e	; 62
    1d7c:	08 96       	adiw	r24, 0x08	; 8
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	9e bf       	out	0x3e, r25	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	8d bf       	out	0x3d, r24	; 61
			case CL_FORWARD:
				sprintf(cnf_reply, "-->%s", (const char *) cnf_rx_cmd );
				uart1_hal_send_string(cnf_reply);
				LM_forward_msg(cnf_rx_cmd, cnf_reply);
				uart1_hal_send_string(cnf_reply);
				state=CL_READ_MSG;
    1d88:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    1d8a:	a6 cf       	rjmp	.-180    	; 0x1cd8 <CON_RN2483+0x12>
			
			case CL_EXIT:
				uart0_hal_clear_rx_buffer();
    1d8c:	0e 94 8d 20 	call	0x411a	; 0x411a <uart0_hal_clear_rx_buffer>
				uart1_hal_send_string("Closing connection to RN2483...");
    1d90:	6f e4       	ldi	r22, 0x4F	; 79
    1d92:	75 e0       	ldi	r23, 0x05	; 5
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
				return true;
		}
	}
	
	return true;
}
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	cf 90       	pop	r12
    1da6:	8f 90       	pop	r8
    1da8:	7f 90       	pop	r7
    1daa:	6f 90       	pop	r6
    1dac:	08 95       	ret

Disassembly of section .text.CONNECT:

00002f4c <CONNECT>:
extern char cnf_reply[];

static bool CON_RN2483();
static STATES_CON_LORA CON_RN2483_parse(char msg[]);

bool CONNECT(const char cmd[]){
    2f4c:	cf 93       	push	r28
    2f4e:	df 93       	push	r29
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	64 97       	sbiw	r28, 0x14	; 20
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
	char par[20];
	
	if(!get_parameter(cmd, par, 1)) return false;
    2f60:	21 e0       	ldi	r18, 0x01	; 1
    2f62:	ae 01       	movw	r20, r28
    2f64:	4f 5f       	subi	r20, 0xFF	; 255
    2f66:	5f 4f       	sbci	r21, 0xFF	; 255
    2f68:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    2f6c:	88 23       	and	r24, r24
    2f6e:	79 f0       	breq	.+30     	; 0x2f8e <CONNECT+0x42>
	
	if(strcmp(par, C_LORA)==0){
    2f70:	be 01       	movw	r22, r28
    2f72:	6f 5f       	subi	r22, 0xFF	; 255
    2f74:	7f 4f       	sbci	r23, 0xFF	; 255
    2f76:	80 e8       	ldi	r24, 0x80	; 128
    2f78:	2f e6       	ldi	r18, 0x6F	; 111
    2f7a:	35 e0       	ldi	r19, 0x05	; 5
    2f7c:	40 e0       	ldi	r20, 0x00	; 0
    2f7e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    2f82:	89 2b       	or	r24, r25
    2f84:	19 f4       	brne	.+6      	; 0x2f8c <CONNECT+0x40>
		return CON_RN2483();
    2f86:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <CON_RN2483>
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <CONNECT+0x42>
	}else{
		return false;
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2f8e:	64 96       	adiw	r28, 0x14	; 20
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	df 91       	pop	r29
    2f9c:	cf 91       	pop	r28
    2f9e:	08 95       	ret

Disassembly of section .text.read_cols:

000021d8 <read_cols>:
}

/************************************************************************/
/* Read functions                                                       */
/************************************************************************/
static void read_cols(char res[]){
    21d8:	cf 92       	push	r12
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	1f 93       	push	r17
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	a3 97       	sbiw	r28, 0x23	; 35
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	7c 01       	movw	r14, r24
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    21f8:	63 e2       	ldi	r22, 0x23	; 35
    21fa:	ce 01       	movw	r24, r28
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <EM_get_collections>
	res[0]='\0';
    2202:	f7 01       	movw	r30, r14
    2204:	10 82       	st	Z, r1
	for (uint8_t i=0; i<7; i++)
    2206:	10 e0       	ldi	r17, 0x00	; 0
    2208:	35 c0       	rjmp	.+106    	; 0x2274 <read_cols+0x9c>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
    220a:	81 2f       	mov	r24, r17
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	fc 01       	movw	r30, r24
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	e8 0f       	add	r30, r24
    221a:	f9 1f       	adc	r31, r25
    221c:	21 e0       	ldi	r18, 0x01	; 1
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	2c 0f       	add	r18, r28
    2222:	3d 1f       	adc	r19, r29
    2224:	e2 0f       	add	r30, r18
    2226:	f3 1f       	adc	r31, r19
    2228:	23 81       	ldd	r18, Z+3	; 0x03
    222a:	2f 93       	push	r18
    222c:	22 81       	ldd	r18, Z+2	; 0x02
    222e:	2f 93       	push	r18
    2230:	21 81       	ldd	r18, Z+1	; 0x01
    2232:	2f 93       	push	r18
    2234:	20 81       	ld	r18, Z
    2236:	2f 93       	push	r18
    2238:	01 96       	adiw	r24, 0x01	; 1
    223a:	9f 93       	push	r25
    223c:	8f 93       	push	r24
    223e:	84 ef       	ldi	r24, 0xF4	; 244
    2240:	91 e0       	ldi	r25, 0x01	; 1
    2242:	a0 e0       	ldi	r26, 0x00	; 0
    2244:	af 93       	push	r26
    2246:	9f 93       	push	r25
    2248:	8f 93       	push	r24
    224a:	0f 2e       	mov	r0, r31
    224c:	fc ea       	ldi	r31, 0xAC	; 172
    224e:	cf 2e       	mov	r12, r31
    2250:	f6 e0       	ldi	r31, 0x06	; 6
    2252:	df 2e       	mov	r13, r31
    2254:	f0 2d       	mov	r31, r0
    2256:	df 92       	push	r13
    2258:	cf 92       	push	r12
    225a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
		strcat(res, arg);
    225e:	a6 01       	movw	r20, r12
    2260:	60 e8       	ldi	r22, 0x80	; 128
    2262:	c7 01       	movw	r24, r14
    2264:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <strcat>
/************************************************************************/
static void read_cols(char res[]){
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
	res[0]='\0';
	for (uint8_t i=0; i<7; i++)
    2268:	1f 5f       	subi	r17, 0xFF	; 255
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	17 30       	cpi	r17, 0x07	; 7
    2276:	48 f2       	brcs	.-110    	; 0x220a <read_cols+0x32>
	{
		sprintf(arg, "ID=%u, n=%u, si=%u \r\n", i+1, cols[i].samplings, cols[i].samplingInterval);
		strcat(res, arg);
	}
}
    2278:	a3 96       	adiw	r28, 0x23	; 35
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	df 90       	pop	r13
    2290:	cf 90       	pop	r12
    2292:	08 95       	ret

Disassembly of section .text.read_time:

0000270e <read_time>:

static void read_time(char res[]){
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	00 d0       	rcall	.+0      	; 0x2718 <read_time+0xa>
    2718:	00 d0       	rcall	.+0      	; 0x271a <read_time+0xc>
    271a:	00 d0       	rcall	.+0      	; 0x271c <read_time+0xe>
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	18 2f       	mov	r17, r24
    2722:	09 2f       	mov	r16, r25
	TWI_HAL_init();
    2724:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <TWI_HAL_init>
	
	Datetime dt;
	
	RTC_STATUS status=RTC_get_current_time(&dt);
    2728:	ce 01       	movw	r24, r28
    272a:	01 96       	adiw	r24, 0x01	; 1
    272c:	0e 94 09 0b 	call	0x1612	; 0x1612 <RTC_get_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    2730:	88 23       	and	r24, r24
    2732:	51 f0       	breq	.+20     	; 0x2748 <read_time+0x3a>
		strcpy(res, "Failed to read time");
    2734:	24 e1       	ldi	r18, 0x14	; 20
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	4a e0       	ldi	r20, 0x0A	; 10
    273a:	52 e0       	ldi	r21, 0x02	; 2
    273c:	60 e0       	ldi	r22, 0x00	; 0
    273e:	81 2f       	mov	r24, r17
    2740:	90 2f       	mov	r25, r16
    2742:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
    2746:	21 c0       	rjmp	.+66     	; 0x278a <read_time+0x7c>
	}else{
		sprintf(res, "%02u-%02u-%02uT%02u:%02u:%02u", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);	
    2748:	59 81       	ldd	r21, Y+1	; 0x01
    274a:	4a 81       	ldd	r20, Y+2	; 0x02
    274c:	3b 81       	ldd	r19, Y+3	; 0x03
    274e:	2c 81       	ldd	r18, Y+4	; 0x04
    2750:	9d 81       	ldd	r25, Y+5	; 0x05
    2752:	8e 81       	ldd	r24, Y+6	; 0x06
    2754:	1f 92       	push	r1
    2756:	5f 93       	push	r21
    2758:	1f 92       	push	r1
    275a:	4f 93       	push	r20
    275c:	1f 92       	push	r1
    275e:	3f 93       	push	r19
    2760:	1f 92       	push	r1
    2762:	2f 93       	push	r18
    2764:	1f 92       	push	r1
    2766:	9f 93       	push	r25
    2768:	1f 92       	push	r1
    276a:	8f 93       	push	r24
    276c:	8e e1       	ldi	r24, 0x1E	; 30
    276e:	92 e0       	ldi	r25, 0x02	; 2
    2770:	a0 e0       	ldi	r26, 0x00	; 0
    2772:	af 93       	push	r26
    2774:	9f 93       	push	r25
    2776:	8f 93       	push	r24
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
	}
}
    278a:	26 96       	adiw	r28, 0x06	; 6
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	08 95       	ret

Disassembly of section .text.write_deveui:

00002920 <write_deveui>:

/************************************************************************/
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
    2920:	cf 92       	push	r12
    2922:	df 92       	push	r13
    2924:	ef 92       	push	r14
    2926:	0f 93       	push	r16
    2928:	1f 93       	push	r17
    292a:	cf 93       	push	r28
    292c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    292e:	22 e0       	ldi	r18, 0x02	; 2
    2930:	4c ea       	ldi	r20, 0xAC	; 172
    2932:	56 e0       	ldi	r21, 0x06	; 6
    2934:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    2938:	c8 2f       	mov	r28, r24
    293a:	88 23       	and	r24, r24
    293c:	29 f1       	breq	.+74     	; 0x2988 <write_deveui+0x68>
	
	if(strlen(arg)!=16) return false;
    293e:	8c ea       	ldi	r24, 0xAC	; 172
    2940:	96 e0       	ldi	r25, 0x06	; 6
    2942:	6c 01       	movw	r12, r24
    2944:	20 e8       	ldi	r18, 0x80	; 128
    2946:	e2 2e       	mov	r14, r18
    2948:	8e 2d       	mov	r24, r14
    294a:	b6 01       	movw	r22, r12
    294c:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    2950:	40 97       	sbiw	r24, 0x10	; 16
    2952:	c9 f4       	brne	.+50     	; 0x2986 <write_deveui+0x66>
	
	if(!EM_set_deveui(arg)){
    2954:	8e 2d       	mov	r24, r14
    2956:	b6 01       	movw	r22, r12
    2958:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <EM_set_deveui>
    295c:	c8 2f       	mov	r28, r24
    295e:	81 11       	cpse	r24, r1
    2960:	09 c0       	rjmp	.+18     	; 0x2974 <write_deveui+0x54>
		strcpy(res, RW_S_FAILED);
    2962:	27 e0       	ldi	r18, 0x07	; 7
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	4c e3       	ldi	r20, 0x3C	; 60
    2968:	52 e0       	ldi	r21, 0x02	; 2
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	c8 01       	movw	r24, r16
    296e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return false;
    2972:	0a c0       	rjmp	.+20     	; 0x2988 <write_deveui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2974:	28 e0       	ldi	r18, 0x08	; 8
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	43 e4       	ldi	r20, 0x43	; 67
    297a:	52 e0       	ldi	r21, 0x02	; 2
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	c8 01       	movw	r24, r16
    2980:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
    2984:	01 c0       	rjmp	.+2      	; 0x2988 <write_deveui+0x68>
/* Write functions                                                      */
/************************************************************************/
static bool write_deveui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    2986:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2988:	8c 2f       	mov	r24, r28
    298a:	cf 91       	pop	r28
    298c:	1f 91       	pop	r17
    298e:	0f 91       	pop	r16
    2990:	ef 90       	pop	r14
    2992:	df 90       	pop	r13
    2994:	cf 90       	pop	r12
    2996:	08 95       	ret

Disassembly of section .text.write_appeui:

00002998 <write_appeui>:

static bool write_appeui(const char cmd[], char res[]){
    2998:	cf 92       	push	r12
    299a:	df 92       	push	r13
    299c:	ef 92       	push	r14
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    29a6:	22 e0       	ldi	r18, 0x02	; 2
    29a8:	4c ea       	ldi	r20, 0xAC	; 172
    29aa:	56 e0       	ldi	r21, 0x06	; 6
    29ac:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    29b0:	c8 2f       	mov	r28, r24
    29b2:	88 23       	and	r24, r24
    29b4:	29 f1       	breq	.+74     	; 0x2a00 <write_appeui+0x68>
	
	if(strlen(arg)!=16) return false;
    29b6:	8c ea       	ldi	r24, 0xAC	; 172
    29b8:	96 e0       	ldi	r25, 0x06	; 6
    29ba:	6c 01       	movw	r12, r24
    29bc:	20 e8       	ldi	r18, 0x80	; 128
    29be:	e2 2e       	mov	r14, r18
    29c0:	8e 2d       	mov	r24, r14
    29c2:	b6 01       	movw	r22, r12
    29c4:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    29c8:	40 97       	sbiw	r24, 0x10	; 16
    29ca:	c9 f4       	brne	.+50     	; 0x29fe <write_appeui+0x66>
	
	if(!EM_set_appeui(arg)){
    29cc:	8e 2d       	mov	r24, r14
    29ce:	b6 01       	movw	r22, r12
    29d0:	0e 94 77 1b 	call	0x36ee	; 0x36ee <EM_set_appeui>
    29d4:	c8 2f       	mov	r28, r24
    29d6:	81 11       	cpse	r24, r1
    29d8:	09 c0       	rjmp	.+18     	; 0x29ec <write_appeui+0x54>
		strcpy(res, RW_S_FAILED);
    29da:	27 e0       	ldi	r18, 0x07	; 7
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	4c e3       	ldi	r20, 0x3C	; 60
    29e0:	52 e0       	ldi	r21, 0x02	; 2
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	c8 01       	movw	r24, r16
    29e6:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return false;
    29ea:	0a c0       	rjmp	.+20     	; 0x2a00 <write_appeui+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    29ec:	28 e0       	ldi	r18, 0x08	; 8
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	43 e4       	ldi	r20, 0x43	; 67
    29f2:	52 e0       	ldi	r21, 0x02	; 2
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	c8 01       	movw	r24, r16
    29f8:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
    29fc:	01 c0       	rjmp	.+2      	; 0x2a00 <write_appeui+0x68>
}

static bool write_appeui(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=16) return false;
    29fe:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2a00:	8c 2f       	mov	r24, r28
    2a02:	cf 91       	pop	r28
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	ef 90       	pop	r14
    2a0a:	df 90       	pop	r13
    2a0c:	cf 90       	pop	r12
    2a0e:	08 95       	ret

Disassembly of section .text.write_appkey:

00002a10 <write_appkey>:

static bool write_appkey(const char cmd[], char res[]){
    2a10:	cf 92       	push	r12
    2a12:	df 92       	push	r13
    2a14:	ef 92       	push	r14
    2a16:	0f 93       	push	r16
    2a18:	1f 93       	push	r17
    2a1a:	cf 93       	push	r28
    2a1c:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2a1e:	22 e0       	ldi	r18, 0x02	; 2
    2a20:	4c ea       	ldi	r20, 0xAC	; 172
    2a22:	56 e0       	ldi	r21, 0x06	; 6
    2a24:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    2a28:	c8 2f       	mov	r28, r24
    2a2a:	88 23       	and	r24, r24
    2a2c:	29 f1       	breq	.+74     	; 0x2a78 <write_appkey+0x68>
	
	if(strlen(arg)!=32) return false;
    2a2e:	8c ea       	ldi	r24, 0xAC	; 172
    2a30:	96 e0       	ldi	r25, 0x06	; 6
    2a32:	6c 01       	movw	r12, r24
    2a34:	20 e8       	ldi	r18, 0x80	; 128
    2a36:	e2 2e       	mov	r14, r18
    2a38:	8e 2d       	mov	r24, r14
    2a3a:	b6 01       	movw	r22, r12
    2a3c:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    2a40:	80 97       	sbiw	r24, 0x20	; 32
    2a42:	c9 f4       	brne	.+50     	; 0x2a76 <write_appkey+0x66>
	
	if(!EM_set_appkey(arg)){
    2a44:	8e 2d       	mov	r24, r14
    2a46:	b6 01       	movw	r22, r12
    2a48:	0e 94 94 1b 	call	0x3728	; 0x3728 <EM_set_appkey>
    2a4c:	c8 2f       	mov	r28, r24
    2a4e:	81 11       	cpse	r24, r1
    2a50:	09 c0       	rjmp	.+18     	; 0x2a64 <write_appkey+0x54>
		strcpy(res, RW_S_FAILED);
    2a52:	27 e0       	ldi	r18, 0x07	; 7
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4c e3       	ldi	r20, 0x3C	; 60
    2a58:	52 e0       	ldi	r21, 0x02	; 2
    2a5a:	60 e0       	ldi	r22, 0x00	; 0
    2a5c:	c8 01       	movw	r24, r16
    2a5e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return false;
    2a62:	0a c0       	rjmp	.+20     	; 0x2a78 <write_appkey+0x68>
	}else{
		strcpy(res, RW_S_SUCCESS);
    2a64:	28 e0       	ldi	r18, 0x08	; 8
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	43 e4       	ldi	r20, 0x43	; 67
    2a6a:	52 e0       	ldi	r21, 0x02	; 2
    2a6c:	60 e0       	ldi	r22, 0x00	; 0
    2a6e:	c8 01       	movw	r24, r16
    2a70:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <write_appkey+0x68>
}

static bool write_appkey(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	if(strlen(arg)!=32) return false;
    2a76:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	}else{
		strcpy(res, RW_S_SUCCESS);
		return true;
	}
}
    2a78:	8c 2f       	mov	r24, r28
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	ef 90       	pop	r14
    2a82:	df 90       	pop	r13
    2a84:	cf 90       	pop	r12
    2a86:	08 95       	ret

Disassembly of section .text.write_PPM_factor:

00003178 <write_PPM_factor>:

static bool write_PPM_factor(const char cmd[], char res[]){
    3178:	0f 93       	push	r16
    317a:	1f 93       	push	r17
    317c:	cf 93       	push	r28
    317e:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3180:	22 e0       	ldi	r18, 0x02	; 2
    3182:	4c ea       	ldi	r20, 0xAC	; 172
    3184:	56 e0       	ldi	r21, 0x06	; 6
    3186:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    318a:	c8 2f       	mov	r28, r24
    318c:	88 23       	and	r24, r24
    318e:	a9 f0       	breq	.+42     	; 0x31ba <write_PPM_factor+0x42>
	
	if(!is_float(arg)) return false;
    3190:	8c ea       	ldi	r24, 0xAC	; 172
    3192:	96 e0       	ldi	r25, 0x06	; 6
    3194:	0e 94 24 17 	call	0x2e48	; 0x2e48 <is_float>
    3198:	c8 2f       	mov	r28, r24
    319a:	88 23       	and	r24, r24
    319c:	71 f0       	breq	.+28     	; 0x31ba <write_PPM_factor+0x42>
	
	float val=str2flaot(arg);
    319e:	8c ea       	ldi	r24, 0xAC	; 172
    31a0:	96 e0       	ldi	r25, 0x06	; 6
    31a2:	0e 94 6f 18 	call	0x30de	; 0x30de <str2flaot>
	EM_set_ppmfactor(val);
    31a6:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <EM_set_ppmfactor>
	
	strcpy(res, RW_S_SUCCESS);
    31aa:	28 e0       	ldi	r18, 0x08	; 8
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	43 e4       	ldi	r20, 0x43	; 67
    31b0:	52 e0       	ldi	r21, 0x02	; 2
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	c8 01       	movw	r24, r16
    31b6:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
	return true;
}
    31ba:	8c 2f       	mov	r24, r28
    31bc:	cf 91       	pop	r28
    31be:	1f 91       	pop	r17
    31c0:	0f 91       	pop	r16
    31c2:	08 95       	ret

Disassembly of section .text.write_RRL:

000031c4 <write_RRL>:


static bool write_RRL(const char cmd[], char res[]){
    31c4:	0f 93       	push	r16
    31c6:	1f 93       	push	r17
    31c8:	cf 93       	push	r28
    31ca:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    31cc:	22 e0       	ldi	r18, 0x02	; 2
    31ce:	4c ea       	ldi	r20, 0xAC	; 172
    31d0:	56 e0       	ldi	r21, 0x06	; 6
    31d2:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    31d6:	c8 2f       	mov	r28, r24
    31d8:	88 23       	and	r24, r24
    31da:	a9 f0       	breq	.+42     	; 0x3206 <write_RRL+0x42>
	
	if(!is_float(arg)) return false;
    31dc:	8c ea       	ldi	r24, 0xAC	; 172
    31de:	96 e0       	ldi	r25, 0x06	; 6
    31e0:	0e 94 24 17 	call	0x2e48	; 0x2e48 <is_float>
    31e4:	c8 2f       	mov	r28, r24
    31e6:	88 23       	and	r24, r24
    31e8:	71 f0       	breq	.+28     	; 0x3206 <write_RRL+0x42>
	
	float val=str2flaot(arg);
    31ea:	8c ea       	ldi	r24, 0xAC	; 172
    31ec:	96 e0       	ldi	r25, 0x06	; 6
    31ee:	0e 94 6f 18 	call	0x30de	; 0x30de <str2flaot>
	EM_set_RRL(val);
    31f2:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <EM_set_RRL>
	
	strcpy(res, RW_S_SUCCESS);
    31f6:	28 e0       	ldi	r18, 0x08	; 8
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	43 e4       	ldi	r20, 0x43	; 67
    31fc:	52 e0       	ldi	r21, 0x02	; 2
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	c8 01       	movw	r24, r16
    3202:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
	return true;
}
    3206:	8c 2f       	mov	r24, r28
    3208:	cf 91       	pop	r28
    320a:	1f 91       	pop	r17
    320c:	0f 91       	pop	r16
    320e:	08 95       	ret

Disassembly of section .text.write_VCC:

00003210 <write_VCC>:

static bool write_VCC(const char cmd[], char res[]){
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	cf 93       	push	r28
    3216:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3218:	22 e0       	ldi	r18, 0x02	; 2
    321a:	4c ea       	ldi	r20, 0xAC	; 172
    321c:	56 e0       	ldi	r21, 0x06	; 6
    321e:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    3222:	c8 2f       	mov	r28, r24
    3224:	88 23       	and	r24, r24
    3226:	a9 f0       	breq	.+42     	; 0x3252 <write_VCC+0x42>
	
	if(!is_float(arg)) return false;
    3228:	8c ea       	ldi	r24, 0xAC	; 172
    322a:	96 e0       	ldi	r25, 0x06	; 6
    322c:	0e 94 24 17 	call	0x2e48	; 0x2e48 <is_float>
    3230:	c8 2f       	mov	r28, r24
    3232:	88 23       	and	r24, r24
    3234:	71 f0       	breq	.+28     	; 0x3252 <write_VCC+0x42>
	
	float val=str2flaot(arg);
    3236:	8c ea       	ldi	r24, 0xAC	; 172
    3238:	96 e0       	ldi	r25, 0x06	; 6
    323a:	0e 94 6f 18 	call	0x30de	; 0x30de <str2flaot>
	EM_set_Vcc(val);
    323e:	0e 94 00 20 	call	0x4000	; 0x4000 <EM_set_Vcc>
	
	strcpy(res, RW_S_SUCCESS);
    3242:	28 e0       	ldi	r18, 0x08	; 8
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	43 e4       	ldi	r20, 0x43	; 67
    3248:	52 e0       	ldi	r21, 0x02	; 2
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	c8 01       	movw	r24, r16
    324e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
	return true;
}
    3252:	8c 2f       	mov	r24, r28
    3254:	cf 91       	pop	r28
    3256:	1f 91       	pop	r17
    3258:	0f 91       	pop	r16
    325a:	08 95       	ret

Disassembly of section .text.get_time_par:

000038e0 <get_time_par>:
	}
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static uint8_t get_time_par(char ts[], uint8_t index){
    38e0:	cf 93       	push	r28
    38e2:	df 93       	push	r29
    38e4:	00 d0       	rcall	.+0      	; 0x38e6 <get_time_par+0x6>
    38e6:	1f 92       	push	r1
    38e8:	cd b7       	in	r28, 0x3d	; 61
    38ea:	de b7       	in	r29, 0x3e	; 62
	char par[3];
	par[0]=ts[index];
    38ec:	fc 01       	movw	r30, r24
    38ee:	e6 0f       	add	r30, r22
    38f0:	f1 1d       	adc	r31, r1
    38f2:	80 81       	ld	r24, Z
    38f4:	89 83       	std	Y+1, r24	; 0x01
	par[1]=ts[index+1];
    38f6:	81 81       	ldd	r24, Z+1	; 0x01
    38f8:	8a 83       	std	Y+2, r24	; 0x02
	par[2]='\0';
    38fa:	1b 82       	std	Y+3, r1	; 0x03
	
	return atoi(par);
    38fc:	be 01       	movw	r22, r28
    38fe:	6f 5f       	subi	r22, 0xFF	; 255
    3900:	7f 4f       	sbci	r23, 0xFF	; 255
    3902:	80 e8       	ldi	r24, 0x80	; 128
    3904:	0e 94 b5 20 	call	0x416a	; 0x416a <atoi>
}
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	08 95       	ret

Disassembly of section .text.write_cols:

00001880 <write_cols>:
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}

static bool write_cols(const char cmd[], char res[]){
    1880:	4f 92       	push	r4
    1882:	5f 92       	push	r5
    1884:	6f 92       	push	r6
    1886:	7f 92       	push	r7
    1888:	8f 92       	push	r8
    188a:	af 92       	push	r10
    188c:	bf 92       	push	r11
    188e:	cf 92       	push	r12
    1890:	df 92       	push	r13
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	a3 97       	sbiw	r28, 0x23	; 35
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	3b 01       	movw	r6, r22
    18b0:	88 2e       	mov	r8, r24
    18b2:	5a 01       	movw	r10, r20
	uint8_t index=0;
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
    18b4:	22 e0       	ldi	r18, 0x02	; 2
    18b6:	4c ea       	ldi	r20, 0xAC	; 172
    18b8:	56 e0       	ldi	r21, 0x06	; 6
    18ba:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    18be:	18 2f       	mov	r17, r24
    18c0:	88 23       	and	r24, r24
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <write_cols+0x46>
    18c4:	5d c0       	rjmp	.+186    	; 0x1980 <write_cols+0x100>
	index=atoi(arg);
    18c6:	8c ea       	ldi	r24, 0xAC	; 172
    18c8:	96 e0       	ldi	r25, 0x06	; 6
    18ca:	6c 01       	movw	r12, r24
    18cc:	20 e8       	ldi	r18, 0x80	; 128
    18ce:	e2 2e       	mov	r14, r18
    18d0:	8e 2d       	mov	r24, r14
    18d2:	b6 01       	movw	r22, r12
    18d4:	0e 94 b5 20 	call	0x416a	; 0x416a <atoi>
	if(index<1 || index>7) return false;
    18d8:	0f ef       	ldi	r16, 0xFF	; 255
    18da:	08 0f       	add	r16, r24
    18dc:	07 30       	cpi	r16, 0x07	; 7
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <write_cols+0x62>
    18e0:	4a c0       	rjmp	.+148    	; 0x1976 <write_cols+0xf6>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
    18e2:	23 e0       	ldi	r18, 0x03	; 3
    18e4:	4c ea       	ldi	r20, 0xAC	; 172
    18e6:	56 e0       	ldi	r21, 0x06	; 6
    18e8:	88 2d       	mov	r24, r8
    18ea:	b3 01       	movw	r22, r6
    18ec:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    18f0:	18 2f       	mov	r17, r24
    18f2:	88 23       	and	r24, r24
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <write_cols+0x78>
    18f6:	44 c0       	rjmp	.+136    	; 0x1980 <write_cols+0x100>
	samplings=atoi(arg);
    18f8:	8e 2d       	mov	r24, r14
    18fa:	b6 01       	movw	r22, r12
    18fc:	0e 94 b5 20 	call	0x416a	; 0x416a <atoi>
    1900:	2c 01       	movw	r4, r24
	if(samplings<2 || samplings>300) return false;
    1902:	02 97       	sbiw	r24, 0x02	; 2
    1904:	8b 32       	cpi	r24, 0x2B	; 43
    1906:	91 40       	sbci	r25, 0x01	; 1
    1908:	c0 f5       	brcc	.+112    	; 0x197a <write_cols+0xfa>
	
	if(!get_parameter(cmd, arg, 4)) return false;
    190a:	24 e0       	ldi	r18, 0x04	; 4
    190c:	4c ea       	ldi	r20, 0xAC	; 172
    190e:	56 e0       	ldi	r21, 0x06	; 6
    1910:	88 2d       	mov	r24, r8
    1912:	b3 01       	movw	r22, r6
    1914:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    1918:	18 2f       	mov	r17, r24
    191a:	88 23       	and	r24, r24
    191c:	89 f1       	breq	.+98     	; 0x1980 <write_cols+0x100>
	samplingInterval=atoi(arg);
    191e:	8e 2d       	mov	r24, r14
    1920:	b6 01       	movw	r22, r12
    1922:	0e 94 b5 20 	call	0x416a	; 0x416a <atoi>
    1926:	6c 01       	movw	r12, r24
	if(samplingInterval<2 || samplingInterval>600) return false;
    1928:	02 97       	sbiw	r24, 0x02	; 2
    192a:	87 35       	cpi	r24, 0x57	; 87
    192c:	92 40       	sbci	r25, 0x02	; 2
    192e:	38 f5       	brcc	.+78     	; 0x197e <write_cols+0xfe>
	
	COLLECTION cols[7];
	EM_get_collections(cols, sizeof(COLLECTION)*7);
    1930:	63 e2       	ldi	r22, 0x23	; 35
    1932:	ce 01       	movw	r24, r28
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	7c 01       	movw	r14, r24
    1938:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <EM_get_collections>
	
	cols[index].samplings=samplings;
    193c:	80 2f       	mov	r24, r16
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	fc 01       	movw	r30, r24
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	ee 0f       	add	r30, r30
    1948:	ff 1f       	adc	r31, r31
    194a:	e8 0f       	add	r30, r24
    194c:	f9 1f       	adc	r31, r25
    194e:	ee 0d       	add	r30, r14
    1950:	ff 1d       	adc	r31, r15
    1952:	51 82       	std	Z+1, r5	; 0x01
    1954:	40 82       	st	Z, r4
	cols[index].samplingInterval=samplingInterval;
    1956:	d3 82       	std	Z+3, r13	; 0x03
    1958:	c2 82       	std	Z+2, r12	; 0x02
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    195a:	b7 01       	movw	r22, r14
    195c:	80 e8       	ldi	r24, 0x80	; 128
    195e:	43 e2       	ldi	r20, 0x23	; 35
    1960:	0e 94 07 20 	call	0x400e	; 0x400e <EM_set_collections>
	
	strcpy(res, RW_S_SUCCESS);
    1964:	28 e0       	ldi	r18, 0x08	; 8
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	43 e4       	ldi	r20, 0x43	; 67
    196a:	52 e0       	ldi	r21, 0x02	; 2
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	c5 01       	movw	r24, r10
    1970:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
	return true;	
    1974:	05 c0       	rjmp	.+10     	; 0x1980 <write_cols+0x100>
	uint16_t samplings=0;
	uint16_t samplingInterval=0;
	
	if(!get_parameter(cmd, arg, 2)) return false;
	index=atoi(arg);
	if(index<1 || index>7) return false;
    1976:	10 e0       	ldi	r17, 0x00	; 0
    1978:	03 c0       	rjmp	.+6      	; 0x1980 <write_cols+0x100>
	index--; //Offset index
	
	if(!get_parameter(cmd, arg, 3)) return false;
	samplings=atoi(arg);
	if(samplings<2 || samplings>300) return false;
    197a:	10 e0       	ldi	r17, 0x00	; 0
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <write_cols+0x100>
	
	if(!get_parameter(cmd, arg, 4)) return false;
	samplingInterval=atoi(arg);
	if(samplingInterval<2 || samplingInterval>600) return false;
    197e:	10 e0       	ldi	r17, 0x00	; 0
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
	
	strcpy(res, RW_S_SUCCESS);
	return true;	
}
    1980:	81 2f       	mov	r24, r17
    1982:	a3 96       	adiw	r28, 0x23	; 35
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	ff 90       	pop	r15
    1998:	ef 90       	pop	r14
    199a:	df 90       	pop	r13
    199c:	cf 90       	pop	r12
    199e:	bf 90       	pop	r11
    19a0:	af 90       	pop	r10
    19a2:	8f 90       	pop	r8
    19a4:	7f 90       	pop	r7
    19a6:	6f 90       	pop	r6
    19a8:	5f 90       	pop	r5
    19aa:	4f 90       	pop	r4
    19ac:	08 95       	ret

Disassembly of section .text.write_heat_up:

0000325c <write_heat_up>:

static bool write_heat_up(const char cmd[], char res[]){
    325c:	0f 93       	push	r16
    325e:	1f 93       	push	r17
    3260:	cf 93       	push	r28
    3262:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    3264:	22 e0       	ldi	r18, 0x02	; 2
    3266:	4c ea       	ldi	r20, 0xAC	; 172
    3268:	56 e0       	ldi	r21, 0x06	; 6
    326a:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    326e:	c8 2f       	mov	r28, r24
    3270:	88 23       	and	r24, r24
    3272:	a9 f0       	breq	.+42     	; 0x329e <write_heat_up+0x42>
	
	uint8_t val=atoi(arg);
    3274:	6c ea       	ldi	r22, 0xAC	; 172
    3276:	76 e0       	ldi	r23, 0x06	; 6
    3278:	80 e8       	ldi	r24, 0x80	; 128
    327a:	0e 94 b5 20 	call	0x416a	; 0x416a <atoi>
	
	if(val<1 || val>200) return false;
    327e:	9f ef       	ldi	r25, 0xFF	; 255
    3280:	98 0f       	add	r25, r24
    3282:	98 3c       	cpi	r25, 0xC8	; 200
    3284:	58 f4       	brcc	.+22     	; 0x329c <write_heat_up+0x40>
	
	EM_set_heat_up_time(val);
    3286:	0e 94 52 20 	call	0x40a4	; 0x40a4 <EM_set_heat_up_time>
	
	strcpy(res, RW_S_SUCCESS);
    328a:	28 e0       	ldi	r18, 0x08	; 8
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	43 e4       	ldi	r20, 0x43	; 67
    3290:	52 e0       	ldi	r21, 0x02	; 2
    3292:	60 e0       	ldi	r22, 0x00	; 0
    3294:	c8 01       	movw	r24, r16
    3296:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
	return true;
    329a:	01 c0       	rjmp	.+2      	; 0x329e <write_heat_up+0x42>
static bool write_heat_up(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<1 || val>200) return false;
    329c:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_heat_up_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    329e:	8c 2f       	mov	r24, r28
    32a0:	cf 91       	pop	r28
    32a2:	1f 91       	pop	r17
    32a4:	0f 91       	pop	r16
    32a6:	08 95       	ret

Disassembly of section .text.write_air_pump:

00002ff2 <write_air_pump>:

static bool write_air_pump(const char cmd[], char res[]){
    2ff2:	0f 93       	push	r16
    2ff4:	1f 93       	push	r17
    2ff6:	cf 93       	push	r28
    2ff8:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    2ffa:	22 e0       	ldi	r18, 0x02	; 2
    2ffc:	4c ea       	ldi	r20, 0xAC	; 172
    2ffe:	56 e0       	ldi	r21, 0x06	; 6
    3000:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    3004:	c8 2f       	mov	r28, r24
    3006:	88 23       	and	r24, r24
    3008:	b9 f0       	breq	.+46     	; 0x3038 <write_air_pump+0x46>
	
	uint16_t val=atoi(arg);
    300a:	6c ea       	ldi	r22, 0xAC	; 172
    300c:	76 e0       	ldi	r23, 0x06	; 6
    300e:	80 e8       	ldi	r24, 0x80	; 128
    3010:	0e 94 b5 20 	call	0x416a	; 0x416a <atoi>
	
	if(val<5 || val>1000) return false;
    3014:	9c 01       	movw	r18, r24
    3016:	25 50       	subi	r18, 0x05	; 5
    3018:	31 09       	sbc	r19, r1
    301a:	24 3e       	cpi	r18, 0xE4	; 228
    301c:	33 40       	sbci	r19, 0x03	; 3
    301e:	58 f4       	brcc	.+22     	; 0x3036 <write_air_pump+0x44>
	
	EM_set_air_pump_time(val);
    3020:	0e 94 5e 20 	call	0x40bc	; 0x40bc <EM_set_air_pump_time>
	
	strcpy(res, RW_S_SUCCESS);
    3024:	28 e0       	ldi	r18, 0x08	; 8
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	43 e4       	ldi	r20, 0x43	; 67
    302a:	52 e0       	ldi	r21, 0x02	; 2
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	c8 01       	movw	r24, r16
    3030:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
	return true;
    3034:	01 c0       	rjmp	.+2      	; 0x3038 <write_air_pump+0x46>
static bool write_air_pump(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint16_t val=atoi(arg);
	
	if(val<5 || val>1000) return false;
    3036:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_air_pump_time(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    3038:	8c 2f       	mov	r24, r28
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	08 95       	ret

Disassembly of section .text.write_sp_interval:

000032a8 <write_sp_interval>:

static bool write_sp_interval(const char cmd[], char res[]){
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	cf 93       	push	r28
    32ae:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, arg, 2)) return false;
    32b0:	22 e0       	ldi	r18, 0x02	; 2
    32b2:	4c ea       	ldi	r20, 0xAC	; 172
    32b4:	56 e0       	ldi	r21, 0x06	; 6
    32b6:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    32ba:	c8 2f       	mov	r28, r24
    32bc:	88 23       	and	r24, r24
    32be:	a9 f0       	breq	.+42     	; 0x32ea <write_sp_interval+0x42>
	
	uint8_t val=atoi(arg);
    32c0:	6c ea       	ldi	r22, 0xAC	; 172
    32c2:	76 e0       	ldi	r23, 0x06	; 6
    32c4:	80 e8       	ldi	r24, 0x80	; 128
    32c6:	0e 94 b5 20 	call	0x416a	; 0x416a <atoi>
	
	if(val<6 || val>24) return false;
    32ca:	9a ef       	ldi	r25, 0xFA	; 250
    32cc:	98 0f       	add	r25, r24
    32ce:	93 31       	cpi	r25, 0x13	; 19
    32d0:	58 f4       	brcc	.+22     	; 0x32e8 <write_sp_interval+0x40>
	
	EM_set_sp_interval(val);
    32d2:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <EM_set_sp_interval>
	
	strcpy(res, RW_S_SUCCESS);
    32d6:	28 e0       	ldi	r18, 0x08	; 8
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	43 e4       	ldi	r20, 0x43	; 67
    32dc:	52 e0       	ldi	r21, 0x02	; 2
    32de:	60 e0       	ldi	r22, 0x00	; 0
    32e0:	c8 01       	movw	r24, r16
    32e2:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
	return true;
    32e6:	01 c0       	rjmp	.+2      	; 0x32ea <write_sp_interval+0x42>
static bool write_sp_interval(const char cmd[], char res[]){
	if(!get_parameter(cmd, arg, 2)) return false;
	
	uint8_t val=atoi(arg);
	
	if(val<6 || val>24) return false;
    32e8:	c0 e0       	ldi	r28, 0x00	; 0
	
	EM_set_sp_interval(val);
	
	strcpy(res, RW_S_SUCCESS);
	return true;
}
    32ea:	8c 2f       	mov	r24, r28
    32ec:	cf 91       	pop	r28
    32ee:	1f 91       	pop	r17
    32f0:	0f 91       	pop	r16
    32f2:	08 95       	ret

Disassembly of section .text.write_reset:

00001dae <write_reset>:

static bool write_reset(const char cmd[], char res[]){
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	a3 97       	sbiw	r28, 0x23	; 35
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	8a 01       	movw	r16, r20
	
	COLLECTION cols[7];
	
	EM_set_deveui("0000000000000000");
    1dc8:	6b e4       	ldi	r22, 0x4B	; 75
    1dca:	72 e0       	ldi	r23, 0x02	; 2
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <EM_set_deveui>
	EM_set_appeui("0000000000000000");
    1dd2:	6b e4       	ldi	r22, 0x4B	; 75
    1dd4:	72 e0       	ldi	r23, 0x02	; 2
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	0e 94 77 1b 	call	0x36ee	; 0x36ee <EM_set_appeui>
	EM_set_appkey("00000000000000000000000000000000");
    1ddc:	6c e5       	ldi	r22, 0x5C	; 92
    1dde:	72 e0       	ldi	r23, 0x02	; 2
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	0e 94 94 1b 	call	0x3728	; 0x3728 <EM_set_appkey>
	EM_set_ppmfactor(1.00);
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	80 e8       	ldi	r24, 0x80	; 128
    1dec:	9f e3       	ldi	r25, 0x3F	; 63
    1dee:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <EM_set_ppmfactor>
	EM_set_RRL(2500.00);
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	70 e4       	ldi	r23, 0x40	; 64
    1df6:	8c e1       	ldi	r24, 0x1C	; 28
    1df8:	95 e4       	ldi	r25, 0x45	; 69
    1dfa:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <EM_set_RRL>
	EM_set_Vcc(5.00);
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	80 ea       	ldi	r24, 0xA0	; 160
    1e04:	90 e4       	ldi	r25, 0x40	; 64
    1e06:	0e 94 00 20 	call	0x4000	; 0x4000 <EM_set_Vcc>
	EM_set_heat_up_time(2);
    1e0a:	82 e0       	ldi	r24, 0x02	; 2
    1e0c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <EM_set_heat_up_time>
	EM_set_air_pump_time(5);
    1e10:	85 e0       	ldi	r24, 0x05	; 5
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 5e 20 	call	0x40bc	; 0x40bc <EM_set_air_pump_time>
	EM_set_sp_interval(6);
    1e18:	86 e0       	ldi	r24, 0x06	; 6
    1e1a:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <EM_set_sp_interval>
	
	for (uint8_t i=0; i<7; i++)
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	1a c0       	rjmp	.+52     	; 0x1e56 <write_reset+0xa8>
	{
		cols[i].type=T_INT16;
    1e22:	e8 2f       	mov	r30, r24
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	9f 01       	movw	r18, r30
    1e28:	22 0f       	add	r18, r18
    1e2a:	33 1f       	adc	r19, r19
    1e2c:	22 0f       	add	r18, r18
    1e2e:	33 1f       	adc	r19, r19
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	21 e0       	ldi	r18, 0x01	; 1
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	2c 0f       	add	r18, r28
    1e3a:	3d 1f       	adc	r19, r29
    1e3c:	e2 0f       	add	r30, r18
    1e3e:	f3 1f       	adc	r31, r19
    1e40:	92 e0       	ldi	r25, 0x02	; 2
    1e42:	94 83       	std	Z+4, r25	; 0x04
		cols[i].samplings=2;
    1e44:	22 e0       	ldi	r18, 0x02	; 2
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	31 83       	std	Z+1, r19	; 0x01
    1e4a:	20 83       	st	Z, r18
		cols[i].samplingInterval=3;
    1e4c:	23 e0       	ldi	r18, 0x03	; 3
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	33 83       	std	Z+3, r19	; 0x03
    1e52:	22 83       	std	Z+2, r18	; 0x02
	EM_set_Vcc(5.00);
	EM_set_heat_up_time(2);
	EM_set_air_pump_time(5);
	EM_set_sp_interval(6);
	
	for (uint8_t i=0; i<7; i++)
    1e54:	8f 5f       	subi	r24, 0xFF	; 255
    1e56:	87 30       	cpi	r24, 0x07	; 7
    1e58:	20 f3       	brcs	.-56     	; 0x1e22 <write_reset+0x74>
		cols[i].type=T_INT16;
		cols[i].samplings=2;
		cols[i].samplingInterval=3;
	}
	
	EM_set_collections(cols, sizeof(COLLECTION)*7);
    1e5a:	be 01       	movw	r22, r28
    1e5c:	6f 5f       	subi	r22, 0xFF	; 255
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	80 e8       	ldi	r24, 0x80	; 128
    1e62:	43 e2       	ldi	r20, 0x23	; 35
    1e64:	0e 94 07 20 	call	0x400e	; 0x400e <EM_set_collections>
	
	strcpy(res, "All settings reset");
    1e68:	23 e1       	ldi	r18, 0x13	; 19
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4d e7       	ldi	r20, 0x7D	; 125
    1e6e:	52 e0       	ldi	r21, 0x02	; 2
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	c8 01       	movw	r24, r16
    1e74:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
	return true;
}
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	a3 96       	adiw	r28, 0x23	; 35
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	08 95       	ret

Disassembly of section .text.write_time:

00001bc8 <write_time>:

static bool write_time(const char cmd[], char res[]){
    1bc8:	6f 92       	push	r6
    1bca:	7f 92       	push	r7
    1bcc:	8f 92       	push	r8
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <write_time+0x16>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <write_time+0x18>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <write_time+0x1a>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	3b 01       	movw	r6, r22
    1be8:	88 2e       	mov	r8, r24
    1bea:	7a 01       	movw	r14, r20
	TWI_HAL_init();
    1bec:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <TWI_HAL_init>
	if(!get_parameter(cmd, arg, 2)) return false;
    1bf0:	22 e0       	ldi	r18, 0x02	; 2
    1bf2:	4c ea       	ldi	r20, 0xAC	; 172
    1bf4:	56 e0       	ldi	r21, 0x06	; 6
    1bf6:	88 2d       	mov	r24, r8
    1bf8:	b3 01       	movw	r22, r6
    1bfa:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    1bfe:	18 2f       	mov	r17, r24
    1c00:	88 23       	and	r24, r24
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <write_time+0x3e>
    1c04:	4e c0       	rjmp	.+156    	; 0x1ca2 <write_time+0xda>
	if(strlen(arg)!=17){
    1c06:	6c ea       	ldi	r22, 0xAC	; 172
    1c08:	76 e0       	ldi	r23, 0x06	; 6
    1c0a:	80 e8       	ldi	r24, 0x80	; 128
    1c0c:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    1c10:	41 97       	sbiw	r24, 0x11	; 17
    1c12:	49 f0       	breq	.+18     	; 0x1c26 <write_time+0x5e>
		strcpy(res, "Must be in format: yy-mm-ddThh:mm:ss");
    1c14:	25 e2       	ldi	r18, 0x25	; 37
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e9       	ldi	r20, 0x90	; 144
    1c1a:	52 e0       	ldi	r21, 0x02	; 2
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	c7 01       	movw	r24, r14
    1c20:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
    1c24:	3e c0       	rjmp	.+124    	; 0x1ca2 <write_time+0xda>
	}
	
	Datetime dt;
	
	dt.year=get_time_par(arg, 0);
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	8c ea       	ldi	r24, 0xAC	; 172
    1c2a:	96 e0       	ldi	r25, 0x06	; 6
    1c2c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <get_time_par>
    1c30:	88 2e       	mov	r8, r24
	dt.month=get_time_par(arg, 3);
    1c32:	63 e0       	ldi	r22, 0x03	; 3
    1c34:	8c ea       	ldi	r24, 0xAC	; 172
    1c36:	96 e0       	ldi	r25, 0x06	; 6
    1c38:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <get_time_par>
    1c3c:	78 2e       	mov	r7, r24
	dt.day=get_time_par(arg, 6);
    1c3e:	66 e0       	ldi	r22, 0x06	; 6
    1c40:	8c ea       	ldi	r24, 0xAC	; 172
    1c42:	96 e0       	ldi	r25, 0x06	; 6
    1c44:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <get_time_par>
    1c48:	68 2e       	mov	r6, r24
	dt.hour=get_time_par(arg, 9);
    1c4a:	69 e0       	ldi	r22, 0x09	; 9
    1c4c:	8c ea       	ldi	r24, 0xAC	; 172
    1c4e:	96 e0       	ldi	r25, 0x06	; 6
    1c50:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <get_time_par>
    1c54:	08 2f       	mov	r16, r24
	dt.minute=get_time_par(arg, 12);
    1c56:	6c e0       	ldi	r22, 0x0C	; 12
    1c58:	8c ea       	ldi	r24, 0xAC	; 172
    1c5a:	96 e0       	ldi	r25, 0x06	; 6
    1c5c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <get_time_par>
    1c60:	d8 2e       	mov	r13, r24
	dt.second=get_time_par(arg, 15);
    1c62:	6f e0       	ldi	r22, 0x0F	; 15
    1c64:	8c ea       	ldi	r24, 0xAC	; 172
    1c66:	96 e0       	ldi	r25, 0x06	; 6
    1c68:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <get_time_par>
	
	RTC_STATUS status=RTC_set_current_time(dt);
    1c6c:	48 2f       	mov	r20, r24
    1c6e:	5d 2d       	mov	r21, r13
    1c70:	60 2f       	mov	r22, r16
    1c72:	76 2d       	mov	r23, r6
    1c74:	87 2d       	mov	r24, r7
    1c76:	98 2d       	mov	r25, r8
    1c78:	0e 94 94 16 	call	0x2d28	; 0x2d28 <RTC_set_current_time>
	if(status!=RTC_STATUS_SUCCESS){
    1c7c:	88 23       	and	r24, r24
    1c7e:	49 f0       	breq	.+18     	; 0x1c92 <write_time+0xca>
		strcpy(res, "Failed to set time");
    1c80:	23 e1       	ldi	r18, 0x13	; 19
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	45 eb       	ldi	r20, 0xB5	; 181
    1c86:	52 e0       	ldi	r21, 0x02	; 2
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	c7 01       	movw	r24, r14
    1c8c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
    1c90:	08 c0       	rjmp	.+16     	; 0x1ca2 <write_time+0xda>
	}
	strcpy(res, RW_S_SUCCESS);
    1c92:	28 e0       	ldi	r18, 0x08	; 8
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	43 e4       	ldi	r20, 0x43	; 67
    1c98:	52 e0       	ldi	r21, 0x02	; 2
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	c7 01       	movw	r24, r14
    1c9e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
	return true;
}
    1ca2:	81 2f       	mov	r24, r17
    1ca4:	26 96       	adiw	r28, 0x06	; 6
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	df 90       	pop	r13
    1cbe:	8f 90       	pop	r8
    1cc0:	7f 90       	pop	r7
    1cc2:	6f 90       	pop	r6
    1cc4:	08 95       	ret

Disassembly of section .text.handle_read:

00000fc0 <handle_read>:
static bool write_sp_interval(const char cmd[], char res[]);
static bool write_reset(const char cmd[], char res[]);
static bool write_time(const char cmd[], char res[]);
static uint8_t get_time_par(char ts[], uint8_t index);

bool handle_read(const char cmd[], char res[]){
     fc0:	cf 92       	push	r12
     fc2:	df 92       	push	r13
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	68 97       	sbiw	r28, 0x18	; 24
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	6b 01       	movw	r12, r22
     fe2:	e8 2e       	mov	r14, r24
     fe4:	f4 2e       	mov	r15, r20
     fe6:	05 2f       	mov	r16, r21
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	ae 01       	movw	r20, r28
     fec:	4f 5f       	subi	r20, 0xFF	; 255
     fee:	5f 4f       	sbci	r21, 0xFF	; 255
     ff0:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
     ff4:	18 2f       	mov	r17, r24
     ff6:	88 23       	and	r24, r24
     ff8:	09 f4       	brne	.+2      	; 0xffc <handle_read+0x3c>
     ffa:	23 c1       	rjmp	.+582    	; 0x1242 <__stack+0x143>
     ffc:	8e 2d       	mov	r24, r14
     ffe:	b6 01       	movw	r22, r12
    1000:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <count_parameters>
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	09 f4       	brne	.+2      	; 0x100a <__DATA_REGION_LENGTH__+0xa>
    1008:	1b c1       	rjmp	.+566    	; 0x1240 <__stack+0x141>
	
	if (strcmp(par, RW_DEVEUI)==0)
    100a:	ce 01       	movw	r24, r28
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	6c 01       	movw	r12, r24
    1010:	20 e8       	ldi	r18, 0x80	; 128
    1012:	e2 2e       	mov	r14, r18
    1014:	28 ec       	ldi	r18, 0xC8	; 200
    1016:	32 e0       	ldi	r19, 0x02	; 2
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	8e 2d       	mov	r24, r14
    101c:	b6 01       	movw	r22, r12
    101e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    1022:	89 2b       	or	r24, r25
    1024:	29 f4       	brne	.+10     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
	{
		EM_get_deveui(res);
    1026:	8f 2d       	mov	r24, r15
    1028:	90 2f       	mov	r25, r16
    102a:	0e 94 ed 1c 	call	0x39da	; 0x39da <EM_get_deveui>
    102e:	09 c1       	rjmp	.+530    	; 0x1242 <__stack+0x143>
	}
	else if (strcmp(par, RW_APPEUI)==0)
    1030:	2f ec       	ldi	r18, 0xCF	; 207
    1032:	32 e0       	ldi	r19, 0x02	; 2
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	8e 2d       	mov	r24, r14
    1038:	b6 01       	movw	r22, r12
    103a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    103e:	89 2b       	or	r24, r25
    1040:	29 f4       	brne	.+10     	; 0x104c <__DATA_REGION_LENGTH__+0x4c>
	{
		EM_get_appeui(res);
    1042:	8f 2d       	mov	r24, r15
    1044:	90 2f       	mov	r25, r16
    1046:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <EM_get_appeui>
    104a:	fb c0       	rjmp	.+502    	; 0x1242 <__stack+0x143>
	}
	else if (strcmp(par, RW_APPKEY)==0)
    104c:	26 ed       	ldi	r18, 0xD6	; 214
    104e:	32 e0       	ldi	r19, 0x02	; 2
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	8e 2d       	mov	r24, r14
    1054:	b6 01       	movw	r22, r12
    1056:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    105a:	89 2b       	or	r24, r25
    105c:	29 f4       	brne	.+10     	; 0x1068 <__DATA_REGION_LENGTH__+0x68>
	{
		EM_get_appkey(res);
    105e:	8f 2d       	mov	r24, r15
    1060:	90 2f       	mov	r25, r16
    1062:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <EM_get_appkey>
    1066:	ed c0       	rjmp	.+474    	; 0x1242 <__stack+0x143>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    1068:	2d ed       	ldi	r18, 0xDD	; 221
    106a:	32 e0       	ldi	r19, 0x02	; 2
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	8e 2d       	mov	r24, r14
    1070:	b6 01       	movw	r22, r12
    1072:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    1076:	89 2b       	or	r24, r25
    1078:	e1 f4       	brne	.+56     	; 0x10b2 <__DATA_REGION_LENGTH__+0xb2>
	{
		EM_get_ppmfactor(&val);
    107a:	ce 01       	movw	r24, r28
    107c:	45 96       	adiw	r24, 0x15	; 21
    107e:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <EM_get_ppmfactor>
		sprintf(res, "%.2f", val);
    1082:	88 8d       	ldd	r24, Y+24	; 0x18
    1084:	8f 93       	push	r24
    1086:	8f 89       	ldd	r24, Y+23	; 0x17
    1088:	8f 93       	push	r24
    108a:	8e 89       	ldd	r24, Y+22	; 0x16
    108c:	8f 93       	push	r24
    108e:	8d 89       	ldd	r24, Y+21	; 0x15
    1090:	8f 93       	push	r24
    1092:	82 ee       	ldi	r24, 0xE2	; 226
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	af 93       	push	r26
    109a:	9f 93       	push	r25
    109c:	8f 93       	push	r24
    109e:	0f 93       	push	r16
    10a0:	ff 92       	push	r15
    10a2:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	c8 c0       	rjmp	.+400    	; 0x1242 <__stack+0x143>
	}
	else if(strcmp(par, RW_RRL)==0)
    10b2:	27 ee       	ldi	r18, 0xE7	; 231
    10b4:	32 e0       	ldi	r19, 0x02	; 2
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	8e 2d       	mov	r24, r14
    10ba:	b6 01       	movw	r22, r12
    10bc:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    10c0:	89 2b       	or	r24, r25
    10c2:	e1 f4       	brne	.+56     	; 0x10fc <__DATA_REGION_LENGTH__+0xfc>
	{
		EM_get_RRL(&val);
    10c4:	ce 01       	movw	r24, r28
    10c6:	45 96       	adiw	r24, 0x15	; 21
    10c8:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <EM_get_RRL>
		sprintf(res, "%.2f", val);
    10cc:	88 8d       	ldd	r24, Y+24	; 0x18
    10ce:	8f 93       	push	r24
    10d0:	8f 89       	ldd	r24, Y+23	; 0x17
    10d2:	8f 93       	push	r24
    10d4:	8e 89       	ldd	r24, Y+22	; 0x16
    10d6:	8f 93       	push	r24
    10d8:	8d 89       	ldd	r24, Y+21	; 0x15
    10da:	8f 93       	push	r24
    10dc:	82 ee       	ldi	r24, 0xE2	; 226
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	af 93       	push	r26
    10e4:	9f 93       	push	r25
    10e6:	8f 93       	push	r24
    10e8:	0f 93       	push	r16
    10ea:	ff 92       	push	r15
    10ec:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	a3 c0       	rjmp	.+326    	; 0x1242 <__stack+0x143>
	}
	else if(strcmp(par, RW_VCC)==0)
    10fc:	2c ee       	ldi	r18, 0xEC	; 236
    10fe:	32 e0       	ldi	r19, 0x02	; 2
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	8e 2d       	mov	r24, r14
    1104:	b6 01       	movw	r22, r12
    1106:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    110a:	89 2b       	or	r24, r25
    110c:	e1 f4       	brne	.+56     	; 0x1146 <__stack+0x47>
	{
		EM_get_Vcc(&val);
    110e:	ce 01       	movw	r24, r28
    1110:	45 96       	adiw	r24, 0x15	; 21
    1112:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <EM_get_Vcc>
		sprintf(res, "%.2f", val);
    1116:	88 8d       	ldd	r24, Y+24	; 0x18
    1118:	8f 93       	push	r24
    111a:	8f 89       	ldd	r24, Y+23	; 0x17
    111c:	8f 93       	push	r24
    111e:	8e 89       	ldd	r24, Y+22	; 0x16
    1120:	8f 93       	push	r24
    1122:	8d 89       	ldd	r24, Y+21	; 0x15
    1124:	8f 93       	push	r24
    1126:	82 ee       	ldi	r24, 0xE2	; 226
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	af 93       	push	r26
    112e:	9f 93       	push	r25
    1130:	8f 93       	push	r24
    1132:	0f 93       	push	r16
    1134:	ff 92       	push	r15
    1136:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	7e c0       	rjmp	.+252    	; 0x1242 <__stack+0x143>
	}
	else if(strcmp(par, RW_COLS)==0)
    1146:	21 ef       	ldi	r18, 0xF1	; 241
    1148:	32 e0       	ldi	r19, 0x02	; 2
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	8e 2d       	mov	r24, r14
    114e:	b6 01       	movw	r22, r12
    1150:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    1154:	89 2b       	or	r24, r25
    1156:	29 f4       	brne	.+10     	; 0x1162 <__stack+0x63>
	{
		read_cols(res);
    1158:	8f 2d       	mov	r24, r15
    115a:	90 2f       	mov	r25, r16
    115c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <read_cols>
    1160:	70 c0       	rjmp	.+224    	; 0x1242 <__stack+0x143>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    1162:	26 ef       	ldi	r18, 0xF6	; 246
    1164:	32 e0       	ldi	r19, 0x02	; 2
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	8e 2d       	mov	r24, r14
    116a:	b6 01       	movw	r22, r12
    116c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    1170:	89 2b       	or	r24, r25
    1172:	a1 f4       	brne	.+40     	; 0x119c <__stack+0x9d>
	{
		uint8_t val=EM_get_heat_up_time();
    1174:	0e 94 58 20 	call	0x40b0	; 0x40b0 <EM_get_heat_up_time>
		sprintf(res, "heat up time=%u m", val);
    1178:	1f 92       	push	r1
    117a:	8f 93       	push	r24
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	93 e0       	ldi	r25, 0x03	; 3
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	af 93       	push	r26
    1184:	9f 93       	push	r25
    1186:	8f 93       	push	r24
    1188:	0f 93       	push	r16
    118a:	ff 92       	push	r15
    118c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	53 c0       	rjmp	.+166    	; 0x1242 <__stack+0x143>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    119c:	22 e1       	ldi	r18, 0x12	; 18
    119e:	33 e0       	ldi	r19, 0x03	; 3
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	8e 2d       	mov	r24, r14
    11a4:	b6 01       	movw	r22, r12
    11a6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    11aa:	89 2b       	or	r24, r25
    11ac:	a1 f4       	brne	.+40     	; 0x11d6 <__stack+0xd7>
	{
		uint16_t val=EM_get_air_pump_time();
    11ae:	0e 94 64 20 	call	0x40c8	; 0x40c8 <EM_get_air_pump_time>
		sprintf(res, "air pump time=%u s", val);
    11b2:	9f 93       	push	r25
    11b4:	8f 93       	push	r24
    11b6:	8d e1       	ldi	r24, 0x1D	; 29
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	a0 e0       	ldi	r26, 0x00	; 0
    11bc:	af 93       	push	r26
    11be:	9f 93       	push	r25
    11c0:	8f 93       	push	r24
    11c2:	0f 93       	push	r16
    11c4:	ff 92       	push	r15
    11c6:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	36 c0       	rjmp	.+108    	; 0x1242 <__stack+0x143>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    11d6:	20 e3       	ldi	r18, 0x30	; 48
    11d8:	33 e0       	ldi	r19, 0x03	; 3
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	8e 2d       	mov	r24, r14
    11de:	b6 01       	movw	r22, r12
    11e0:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    11e4:	89 2b       	or	r24, r25
    11e6:	a1 f4       	brne	.+40     	; 0x1210 <__stack+0x111>
	{
		uint8_t val=EM_get_sp_interval();
    11e8:	0e 94 70 20 	call	0x40e0	; 0x40e0 <EM_get_sp_interval>
		sprintf(res, "sampling process interval=%u h", val);
    11ec:	1f 92       	push	r1
    11ee:	8f 93       	push	r24
    11f0:	8c e3       	ldi	r24, 0x3C	; 60
    11f2:	93 e0       	ldi	r25, 0x03	; 3
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	af 93       	push	r26
    11f8:	9f 93       	push	r25
    11fa:	8f 93       	push	r24
    11fc:	0f 93       	push	r16
    11fe:	ff 92       	push	r15
    1200:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	19 c0       	rjmp	.+50     	; 0x1242 <__stack+0x143>
	}
	else if(strcmp(par, RW_TIME)==0)
    1210:	2b e5       	ldi	r18, 0x5B	; 91
    1212:	33 e0       	ldi	r19, 0x03	; 3
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	8e 2d       	mov	r24, r14
    1218:	b6 01       	movw	r22, r12
    121a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    121e:	89 2b       	or	r24, r25
    1220:	29 f4       	brne	.+10     	; 0x122c <__stack+0x12d>
	{
		read_time(res);
    1222:	8f 2d       	mov	r24, r15
    1224:	90 2f       	mov	r25, r16
    1226:	0e 94 87 13 	call	0x270e	; 0x270e <read_time>
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <__stack+0x143>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    122c:	26 e1       	ldi	r18, 0x16	; 22
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e6       	ldi	r20, 0x60	; 96
    1232:	53 e0       	ldi	r21, 0x03	; 3
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	8f 2d       	mov	r24, r15
    1238:	90 2f       	mov	r25, r16
    123a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <__stack+0x143>

bool handle_read(const char cmd[], char res[]){
	char par[20];
	float val;
	
	if(!get_parameter(cmd, par, 1) || count_parameters(cmd)==2) return false;
    1240:	10 e0       	ldi	r17, 0x00	; 0
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
	}
	return true;
}
    1242:	81 2f       	mov	r24, r17
    1244:	68 96       	adiw	r28, 0x18	; 24
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	08 95       	ret

Disassembly of section .text.handle_write:

00001262 <handle_write>:

bool handle_write(const char cmd[], char res[]){
    1262:	6f 92       	push	r6
    1264:	7f 92       	push	r7
    1266:	8f 92       	push	r8
    1268:	af 92       	push	r10
    126a:	bf 92       	push	r11
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ef 92       	push	r14
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	64 97       	sbiw	r28, 0x14	; 20
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	3b 01       	movw	r6, r22
    128a:	88 2e       	mov	r8, r24
    128c:	5a 01       	movw	r10, r20
	char par[20];
	if(!get_parameter(cmd, par, 1)) return false;
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	ae 01       	movw	r20, r28
    1292:	4f 5f       	subi	r20, 0xFF	; 255
    1294:	5f 4f       	sbci	r21, 0xFF	; 255
    1296:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    129a:	18 2f       	mov	r17, r24
    129c:	88 23       	and	r24, r24
    129e:	09 f4       	brne	.+2      	; 0x12a2 <handle_write+0x40>
    12a0:	cd c0       	rjmp	.+410    	; 0x143c <handle_write+0x1da>
	
	if (strcmp(par, RW_DEVEUI)==0)
    12a2:	ce 01       	movw	r24, r28
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	6c 01       	movw	r12, r24
    12a8:	20 e8       	ldi	r18, 0x80	; 128
    12aa:	e2 2e       	mov	r14, r18
    12ac:	28 ec       	ldi	r18, 0xC8	; 200
    12ae:	32 e0       	ldi	r19, 0x02	; 2
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	8e 2d       	mov	r24, r14
    12b4:	b6 01       	movw	r22, r12
    12b6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    12ba:	89 2b       	or	r24, r25
    12bc:	39 f4       	brne	.+14     	; 0x12cc <handle_write+0x6a>
	{
		return write_deveui(cmd, res);
    12be:	a5 01       	movw	r20, r10
    12c0:	88 2d       	mov	r24, r8
    12c2:	b3 01       	movw	r22, r6
    12c4:	0e 94 90 14 	call	0x2920	; 0x2920 <write_deveui>
    12c8:	18 2f       	mov	r17, r24
    12ca:	b8 c0       	rjmp	.+368    	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPEUI)==0)
    12cc:	2f ec       	ldi	r18, 0xCF	; 207
    12ce:	32 e0       	ldi	r19, 0x02	; 2
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	8e 2d       	mov	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    12da:	89 2b       	or	r24, r25
    12dc:	39 f4       	brne	.+14     	; 0x12ec <handle_write+0x8a>
	{
		return write_appeui(cmd, res);
    12de:	a5 01       	movw	r20, r10
    12e0:	88 2d       	mov	r24, r8
    12e2:	b3 01       	movw	r22, r6
    12e4:	0e 94 cc 14 	call	0x2998	; 0x2998 <write_appeui>
    12e8:	18 2f       	mov	r17, r24
    12ea:	a8 c0       	rjmp	.+336    	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_APPKEY)==0)
    12ec:	26 ed       	ldi	r18, 0xD6	; 214
    12ee:	32 e0       	ldi	r19, 0x02	; 2
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	8e 2d       	mov	r24, r14
    12f4:	b6 01       	movw	r22, r12
    12f6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    12fa:	89 2b       	or	r24, r25
    12fc:	39 f4       	brne	.+14     	; 0x130c <handle_write+0xaa>
	{
		return write_appkey(cmd, res);
    12fe:	a5 01       	movw	r20, r10
    1300:	88 2d       	mov	r24, r8
    1302:	b3 01       	movw	r22, r6
    1304:	0e 94 08 15 	call	0x2a10	; 0x2a10 <write_appkey>
    1308:	18 2f       	mov	r17, r24
    130a:	98 c0       	rjmp	.+304    	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_PPM_FACTOR)==0)
    130c:	2d ed       	ldi	r18, 0xDD	; 221
    130e:	32 e0       	ldi	r19, 0x02	; 2
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	8e 2d       	mov	r24, r14
    1314:	b6 01       	movw	r22, r12
    1316:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    131a:	89 2b       	or	r24, r25
    131c:	39 f4       	brne	.+14     	; 0x132c <handle_write+0xca>
	{
		return write_PPM_factor(cmd, res);
    131e:	a5 01       	movw	r20, r10
    1320:	88 2d       	mov	r24, r8
    1322:	b3 01       	movw	r22, r6
    1324:	0e 94 bc 18 	call	0x3178	; 0x3178 <write_PPM_factor>
    1328:	18 2f       	mov	r17, r24
    132a:	88 c0       	rjmp	.+272    	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RRL)==0)
    132c:	27 ee       	ldi	r18, 0xE7	; 231
    132e:	32 e0       	ldi	r19, 0x02	; 2
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	8e 2d       	mov	r24, r14
    1334:	b6 01       	movw	r22, r12
    1336:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    133a:	89 2b       	or	r24, r25
    133c:	39 f4       	brne	.+14     	; 0x134c <handle_write+0xea>
	{
		return write_RRL(cmd, res);
    133e:	a5 01       	movw	r20, r10
    1340:	88 2d       	mov	r24, r8
    1342:	b3 01       	movw	r22, r6
    1344:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <write_RRL>
    1348:	18 2f       	mov	r17, r24
    134a:	78 c0       	rjmp	.+240    	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_VCC)==0)
    134c:	2c ee       	ldi	r18, 0xEC	; 236
    134e:	32 e0       	ldi	r19, 0x02	; 2
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	8e 2d       	mov	r24, r14
    1354:	b6 01       	movw	r22, r12
    1356:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    135a:	89 2b       	or	r24, r25
    135c:	39 f4       	brne	.+14     	; 0x136c <handle_write+0x10a>
	{
		return write_VCC(cmd, res);
    135e:	a5 01       	movw	r20, r10
    1360:	88 2d       	mov	r24, r8
    1362:	b3 01       	movw	r22, r6
    1364:	0e 94 08 19 	call	0x3210	; 0x3210 <write_VCC>
    1368:	18 2f       	mov	r17, r24
    136a:	68 c0       	rjmp	.+208    	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_COLS)==0)
    136c:	21 ef       	ldi	r18, 0xF1	; 241
    136e:	32 e0       	ldi	r19, 0x02	; 2
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	8e 2d       	mov	r24, r14
    1374:	b6 01       	movw	r22, r12
    1376:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    137a:	89 2b       	or	r24, r25
    137c:	39 f4       	brne	.+14     	; 0x138c <handle_write+0x12a>
	{
		return write_cols(cmd, res);
    137e:	a5 01       	movw	r20, r10
    1380:	88 2d       	mov	r24, r8
    1382:	b3 01       	movw	r22, r6
    1384:	0e 94 40 0c 	call	0x1880	; 0x1880 <write_cols>
    1388:	18 2f       	mov	r17, r24
    138a:	58 c0       	rjmp	.+176    	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_HEAT_UP_T)==0)
    138c:	26 ef       	ldi	r18, 0xF6	; 246
    138e:	32 e0       	ldi	r19, 0x02	; 2
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	8e 2d       	mov	r24, r14
    1394:	b6 01       	movw	r22, r12
    1396:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    139a:	89 2b       	or	r24, r25
    139c:	39 f4       	brne	.+14     	; 0x13ac <handle_write+0x14a>
	{
		return write_heat_up(cmd, res);
    139e:	a5 01       	movw	r20, r10
    13a0:	88 2d       	mov	r24, r8
    13a2:	b3 01       	movw	r22, r6
    13a4:	0e 94 2e 19 	call	0x325c	; 0x325c <write_heat_up>
    13a8:	18 2f       	mov	r17, r24
    13aa:	48 c0       	rjmp	.+144    	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_AIR_PUMP_T)==0)
    13ac:	22 e1       	ldi	r18, 0x12	; 18
    13ae:	33 e0       	ldi	r19, 0x03	; 3
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	8e 2d       	mov	r24, r14
    13b4:	b6 01       	movw	r22, r12
    13b6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    13ba:	89 2b       	or	r24, r25
    13bc:	39 f4       	brne	.+14     	; 0x13cc <handle_write+0x16a>
	{
		return write_air_pump(cmd, res);
    13be:	a5 01       	movw	r20, r10
    13c0:	88 2d       	mov	r24, r8
    13c2:	b3 01       	movw	r22, r6
    13c4:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <write_air_pump>
    13c8:	18 2f       	mov	r17, r24
    13ca:	38 c0       	rjmp	.+112    	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_SP_INTERVAL)==0)
    13cc:	20 e3       	ldi	r18, 0x30	; 48
    13ce:	33 e0       	ldi	r19, 0x03	; 3
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	8e 2d       	mov	r24, r14
    13d4:	b6 01       	movw	r22, r12
    13d6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    13da:	89 2b       	or	r24, r25
    13dc:	39 f4       	brne	.+14     	; 0x13ec <handle_write+0x18a>
	{
		return write_sp_interval(cmd, res);
    13de:	a5 01       	movw	r20, r10
    13e0:	88 2d       	mov	r24, r8
    13e2:	b3 01       	movw	r22, r6
    13e4:	0e 94 54 19 	call	0x32a8	; 0x32a8 <write_sp_interval>
    13e8:	18 2f       	mov	r17, r24
    13ea:	28 c0       	rjmp	.+80     	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_RESET)==0)
    13ec:	26 e7       	ldi	r18, 0x76	; 118
    13ee:	33 e0       	ldi	r19, 0x03	; 3
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	8e 2d       	mov	r24, r14
    13f4:	b6 01       	movw	r22, r12
    13f6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    13fa:	89 2b       	or	r24, r25
    13fc:	39 f4       	brne	.+14     	; 0x140c <handle_write+0x1aa>
	{
		return write_reset(cmd, res);
    13fe:	a5 01       	movw	r20, r10
    1400:	88 2d       	mov	r24, r8
    1402:	b3 01       	movw	r22, r6
    1404:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <write_reset>
    1408:	18 2f       	mov	r17, r24
    140a:	18 c0       	rjmp	.+48     	; 0x143c <handle_write+0x1da>
	}
	else if(strcmp(par, RW_TIME)==0)
    140c:	2b e5       	ldi	r18, 0x5B	; 91
    140e:	33 e0       	ldi	r19, 0x03	; 3
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	8e 2d       	mov	r24, r14
    1414:	b6 01       	movw	r22, r12
    1416:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    141a:	89 2b       	or	r24, r25
    141c:	39 f4       	brne	.+14     	; 0x142c <handle_write+0x1ca>
	{
		return write_time(cmd, res);
    141e:	a5 01       	movw	r20, r10
    1420:	88 2d       	mov	r24, r8
    1422:	b3 01       	movw	r22, r6
    1424:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <write_time>
    1428:	18 2f       	mov	r17, r24
    142a:	08 c0       	rjmp	.+16     	; 0x143c <handle_write+0x1da>
	}
	else{
		strcpy(res, RW_S_NOT_EXIST);
    142c:	26 e1       	ldi	r18, 0x16	; 22
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e6       	ldi	r20, 0x60	; 96
    1432:	53 e0       	ldi	r21, 0x03	; 3
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	c5 01       	movw	r24, r10
    1438:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
	}
	
}
    143c:	81 2f       	mov	r24, r17
    143e:	64 96       	adiw	r28, 0x14	; 20
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	ef 90       	pop	r14
    1452:	df 90       	pop	r13
    1454:	cf 90       	pop	r12
    1456:	bf 90       	pop	r11
    1458:	af 90       	pop	r10
    145a:	8f 90       	pop	r8
    145c:	7f 90       	pop	r7
    145e:	6f 90       	pop	r6
    1460:	08 95       	ret

Disassembly of section .text.handle_methane:

000019ae <handle_methane>:
	return true;
	_delay_ms(500);
}


static bool handle_methane(const char cmd[], char res[]){
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <handle_methane+0x12>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	f4 2e       	mov	r15, r20
    19c6:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    19c8:	22 e0       	ldi	r18, 0x02	; 2
    19ca:	4c ef       	ldi	r20, 0xFC	; 252
    19cc:	56 e0       	ldi	r21, 0x06	; 6
    19ce:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    19d2:	18 2f       	mov	r17, r24
    19d4:	88 23       	and	r24, r24
    19d6:	09 f4       	brne	.+2      	; 0x19da <handle_methane+0x2c>
    19d8:	6b c0       	rjmp	.+214    	; 0x1ab0 <handle_methane+0x102>
	
	if(strcmp(par, METH_POWER_ON)==0){
    19da:	8c ef       	ldi	r24, 0xFC	; 252
    19dc:	96 e0       	ldi	r25, 0x06	; 6
    19de:	6c 01       	movw	r12, r24
    19e0:	20 e8       	ldi	r18, 0x80	; 128
    19e2:	e2 2e       	mov	r14, r18
    19e4:	20 e2       	ldi	r18, 0x20	; 32
    19e6:	34 e0       	ldi	r19, 0x04	; 4
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	8e 2d       	mov	r24, r14
    19ec:	b6 01       	movw	r22, r12
    19ee:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    19f2:	89 2b       	or	r24, r25
    19f4:	79 f4       	brne	.+30     	; 0x1a14 <handle_methane+0x66>
		PM_HAL_meth_power_init();
    19f6:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(true);
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor on");
    1a00:	28 e1       	ldi	r18, 0x18	; 24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	43 e2       	ldi	r20, 0x23	; 35
    1a06:	54 e0       	ldi	r21, 0x04	; 4
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	8f 2d       	mov	r24, r15
    1a0c:	90 2f       	mov	r25, r16
    1a0e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
    1a12:	4e c0       	rjmp	.+156    	; 0x1ab0 <handle_methane+0x102>
	}else if(strcmp(par, METH_POWER_OFF)==0){
    1a14:	2b e3       	ldi	r18, 0x3B	; 59
    1a16:	34 e0       	ldi	r19, 0x04	; 4
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	8e 2d       	mov	r24, r14
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    1a22:	89 2b       	or	r24, r25
    1a24:	79 f4       	brne	.+30     	; 0x1a44 <handle_methane+0x96>
		PM_HAL_meth_power_init();
    1a26:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <PM_HAL_meth_power_init>
		PM_HAL_meth_power(false);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <PM_HAL_meth_power>
		
		strcpy(res, "Power methane sensor off");
    1a30:	29 e1       	ldi	r18, 0x19	; 25
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	4f e3       	ldi	r20, 0x3F	; 63
    1a36:	54 e0       	ldi	r21, 0x04	; 4
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	8f 2d       	mov	r24, r15
    1a3c:	90 2f       	mov	r25, r16
    1a3e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
    1a42:	36 c0       	rjmp	.+108    	; 0x1ab0 <handle_methane+0x102>
	}
	else if(strcmp(par, METH_READ)==0)
    1a44:	28 e5       	ldi	r18, 0x58	; 88
    1a46:	34 e0       	ldi	r19, 0x04	; 4
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	8e 2d       	mov	r24, r14
    1a4c:	b6 01       	movw	r22, r12
    1a4e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    1a52:	89 2b       	or	r24, r25
    1a54:	21 f5       	brne	.+72     	; 0x1a9e <handle_methane+0xf0>
	{
		uint16_t val;
		
		if (ADC_get_value(&val)!=ADC_STATUS_SUCCESS)
    1a56:	ce 01       	movw	r24, r28
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <ADC_get_value>
    1a5e:	88 23       	and	r24, r24
    1a60:	51 f0       	breq	.+20     	; 0x1a76 <handle_methane+0xc8>
		{
			strcpy(res, "Error when reading data");
    1a62:	28 e1       	ldi	r18, 0x18	; 24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4d e5       	ldi	r20, 0x5D	; 93
    1a68:	54 e0       	ldi	r21, 0x04	; 4
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	8f 2d       	mov	r24, r15
    1a6e:	90 2f       	mov	r25, r16
    1a70:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
    1a74:	1d c0       	rjmp	.+58     	; 0x1ab0 <handle_methane+0x102>
		}else{
			sprintf(res, "PPM=%u", val);
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	8f 93       	push	r24
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	8f 93       	push	r24
    1a7e:	85 e7       	ldi	r24, 0x75	; 117
    1a80:	94 e0       	ldi	r25, 0x04	; 4
    1a82:	a0 e0       	ldi	r26, 0x00	; 0
    1a84:	af 93       	push	r26
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	0f 93       	push	r16
    1a8c:	ff 92       	push	r15
    1a8e:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	09 c0       	rjmp	.+18     	; 0x1ab0 <handle_methane+0x102>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    1a9e:	26 e1       	ldi	r18, 0x16	; 22
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	4c e7       	ldi	r20, 0x7C	; 124
    1aa4:	54 e0       	ldi	r21, 0x04	; 4
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	8f 2d       	mov	r24, r15
    1aaa:	90 2f       	mov	r25, r16
    1aac:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
	}
	return false;
}
    1ab0:	81 2f       	mov	r24, r17
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	08 95       	ret

Disassembly of section .text.handle_co2:

00002404 <handle_co2>:

static bool handle_co2(const char cmd[], char res[]){
    2404:	ff 92       	push	r15
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	00 d0       	rcall	.+0      	; 0x2410 <handle_co2+0xc>
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	f4 2e       	mov	r15, r20
    2416:	05 2f       	mov	r16, r21
	if(!get_parameter(cmd, par, 2)) return false;
    2418:	22 e0       	ldi	r18, 0x02	; 2
    241a:	4c ef       	ldi	r20, 0xFC	; 252
    241c:	56 e0       	ldi	r21, 0x06	; 6
    241e:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    2422:	18 2f       	mov	r17, r24
    2424:	88 23       	and	r24, r24
    2426:	b9 f1       	breq	.+110    	; 0x2496 <handle_co2+0x92>
	
	if(strcmp(par, CO2_READ)==0){
    2428:	6c ef       	ldi	r22, 0xFC	; 252
    242a:	76 e0       	ldi	r23, 0x06	; 6
    242c:	80 e8       	ldi	r24, 0x80	; 128
    242e:	28 e5       	ldi	r18, 0x58	; 88
    2430:	34 e0       	ldi	r19, 0x04	; 4
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    2438:	89 2b       	or	r24, r25
    243a:	21 f5       	brne	.+72     	; 0x2484 <handle_co2+0x80>
		uint16_t val;
		if(SCD30_get_reading(&val)!=SCD30_STATUS_SUCCESS){
    243c:	ce 01       	movw	r24, r28
    243e:	01 96       	adiw	r24, 0x01	; 1
    2440:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <SCD30_get_reading>
    2444:	88 23       	and	r24, r24
    2446:	51 f0       	breq	.+20     	; 0x245c <handle_co2+0x58>
			strcpy(res, "Error when reading data");
    2448:	28 e1       	ldi	r18, 0x18	; 24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4d e5       	ldi	r20, 0x5D	; 93
    244e:	54 e0       	ldi	r21, 0x04	; 4
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	8f 2d       	mov	r24, r15
    2454:	90 2f       	mov	r25, r16
    2456:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
    245a:	1d c0       	rjmp	.+58     	; 0x2496 <handle_co2+0x92>
		}else{
			sprintf(res, "PPM=%u", val);
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	8f 93       	push	r24
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	8f 93       	push	r24
    2464:	85 e7       	ldi	r24, 0x75	; 117
    2466:	94 e0       	ldi	r25, 0x04	; 4
    2468:	a0 e0       	ldi	r26, 0x00	; 0
    246a:	af 93       	push	r26
    246c:	9f 93       	push	r25
    246e:	8f 93       	push	r24
    2470:	0f 93       	push	r16
    2472:	ff 92       	push	r15
    2474:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	09 c0       	rjmp	.+18     	; 0x2496 <handle_co2+0x92>
		}
		return true;
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    2484:	26 e1       	ldi	r18, 0x16	; 22
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4c e7       	ldi	r20, 0x7C	; 124
    248a:	54 e0       	ldi	r21, 0x04	; 4
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	8f 2d       	mov	r24, r15
    2490:	90 2f       	mov	r25, r16
    2492:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
	}
}
    2496:	81 2f       	mov	r24, r17
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	ff 90       	pop	r15
    24a6:	08 95       	ret

Disassembly of section .text.handle_sample:

0000254a <handle_sample>:


static bool handle_methane(const char cmd[], char res[]);
static bool handle_co2(const char cmd[], char res[]);

bool handle_sample(const char cmd[], char res[]){
    254a:	6f 92       	push	r6
    254c:	7f 92       	push	r7
    254e:	8f 92       	push	r8
    2550:	cf 92       	push	r12
    2552:	df 92       	push	r13
    2554:	ef 92       	push	r14
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
    255a:	cf 93       	push	r28
    255c:	3b 01       	movw	r6, r22
    255e:	88 2e       	mov	r8, r24
    2560:	8a 01       	movw	r16, r20
	if(!get_parameter(cmd, par, 1)) return false;
    2562:	21 e0       	ldi	r18, 0x01	; 1
    2564:	4c ef       	ldi	r20, 0xFC	; 252
    2566:	56 e0       	ldi	r21, 0x06	; 6
    2568:	0e 94 3c 13 	call	0x2678	; 0x2678 <get_parameter>
    256c:	c8 2f       	mov	r28, r24
    256e:	88 23       	and	r24, r24
    2570:	69 f1       	breq	.+90     	; 0x25cc <handle_sample+0x82>
	
	if(strcmp(par, S_METH)==0){
    2572:	8c ef       	ldi	r24, 0xFC	; 252
    2574:	96 e0       	ldi	r25, 0x06	; 6
    2576:	6c 01       	movw	r12, r24
    2578:	20 e8       	ldi	r18, 0x80	; 128
    257a:	e2 2e       	mov	r14, r18
    257c:	22 e9       	ldi	r18, 0x92	; 146
    257e:	34 e0       	ldi	r19, 0x04	; 4
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	8e 2d       	mov	r24, r14
    2584:	b6 01       	movw	r22, r12
    2586:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    258a:	89 2b       	or	r24, r25
    258c:	39 f4       	brne	.+14     	; 0x259c <handle_sample+0x52>
		return handle_methane(cmd, res);
    258e:	a8 01       	movw	r20, r16
    2590:	88 2d       	mov	r24, r8
    2592:	b3 01       	movw	r22, r6
    2594:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <handle_methane>
    2598:	c8 2f       	mov	r28, r24
    259a:	18 c0       	rjmp	.+48     	; 0x25cc <handle_sample+0x82>
	}else if(strcmp(par, S_CO2)==0){
    259c:	27 e9       	ldi	r18, 0x97	; 151
    259e:	34 e0       	ldi	r19, 0x04	; 4
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	8e 2d       	mov	r24, r14
    25a4:	b6 01       	movw	r22, r12
    25a6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <strcmp>
    25aa:	89 2b       	or	r24, r25
    25ac:	39 f4       	brne	.+14     	; 0x25bc <handle_sample+0x72>
		return handle_co2(cmd, res);
    25ae:	a8 01       	movw	r20, r16
    25b0:	88 2d       	mov	r24, r8
    25b2:	b3 01       	movw	r22, r6
    25b4:	0e 94 02 12 	call	0x2404	; 0x2404 <handle_co2>
    25b8:	c8 2f       	mov	r28, r24
    25ba:	08 c0       	rjmp	.+16     	; 0x25cc <handle_sample+0x82>
	}else{
		strcpy(res, CONF_STAT_NOT_EXIST);
    25bc:	26 e1       	ldi	r18, 0x16	; 22
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	4c e7       	ldi	r20, 0x7C	; 124
    25c2:	54 e0       	ldi	r21, 0x04	; 4
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	c8 01       	movw	r24, r16
    25c8:	0e 94 bc 1c 	call	0x3978	; 0x3978 <memcpy>
		return true;
	}
}
    25cc:	8c 2f       	mov	r24, r28
    25ce:	cf 91       	pop	r28
    25d0:	1f 91       	pop	r17
    25d2:	0f 91       	pop	r16
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	8f 90       	pop	r8
    25dc:	7f 90       	pop	r7
    25de:	6f 90       	pop	r6
    25e0:	08 95       	ret

Disassembly of section .text.init_methane_SCD30:

00003b98 <init_methane_SCD30>:

bool init_methane_SCD30(){
	TWI_HAL_init();
    3b98:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <TWI_HAL_init>
	PM_HAL_adc_power_init();
    3b9c:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <PM_HAL_adc_power_init>
	PM_HAL_adc_power(true);
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <PM_HAL_adc_power>
	PM_HAL_SCD30_power_init();
    3ba6:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <PM_HAL_SCD30_power_init>
	PM_HAL_SCD30_power(true);
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <PM_HAL_SCD30_power>
	SCD30_STATUS status=SCD30_sensor_on();
    3bb0:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <SCD30_sensor_on>
	if(status!= SCD30_STATUS_SUCCESS) return false;
    3bb4:	88 23       	and	r24, r24
    3bb6:	11 f0       	breq	.+4      	; 0x3bbc <init_methane_SCD30+0x24>
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	08 95       	ret
	return true;
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(500);
}
    3bbe:	08 95       	ret

Disassembly of section .text.count_parameters:

00002fa0 <count_parameters>:
	par[parLen]='\0';
	
	return true;
}

uint8_t count_parameters(const char src[]){
    2fa0:	6f 92       	push	r6
    2fa2:	7f 92       	push	r7
    2fa4:	8f 92       	push	r8
    2fa6:	cf 92       	push	r12
    2fa8:	df 92       	push	r13
    2faa:	ef 92       	push	r14
    2fac:	3b 01       	movw	r6, r22
    2fae:	88 2e       	mov	r8, r24
	uint16_t len=strlen(src);
    2fb0:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    2fb4:	bc 01       	movw	r22, r24
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
	return true;
}

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
    2fba:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint16_t i=0; i<len; i++)
    2fbc:	10 c0       	rjmp	.+32     	; 0x2fde <count_parameters+0x3e>
	{
		if(src[i]==' '){
    2fbe:	e8 2c       	mov	r14, r8
    2fc0:	63 01       	movw	r12, r6
    2fc2:	c2 0e       	add	r12, r18
    2fc4:	d3 1e       	adc	r13, r19
    2fc6:	e1 1c       	adc	r14, r1
    2fc8:	37 fd       	sbrc	r19, 7
    2fca:	ea 94       	dec	r14
    2fcc:	f6 01       	movw	r30, r12
    2fce:	94 91       	lpm	r25, Z
    2fd0:	e7 fc       	sbrc	r14, 7
    2fd2:	90 81       	ld	r25, Z
    2fd4:	90 32       	cpi	r25, 0x20	; 32
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <count_parameters+0x3a>
			cnt++;
    2fd8:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t count_parameters(const char src[]){
	uint16_t len=strlen(src);
	uint8_t cnt=0;
	
	for (uint16_t i=0; i<len; i++)
    2fda:	2f 5f       	subi	r18, 0xFF	; 255
    2fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fde:	26 17       	cp	r18, r22
    2fe0:	37 07       	cpc	r19, r23
    2fe2:	68 f3       	brcs	.-38     	; 0x2fbe <count_parameters+0x1e>
		if(src[i]==' '){
			cnt++;
		}
	}
	return cnt;
}
    2fe4:	ef 90       	pop	r14
    2fe6:	df 90       	pop	r13
    2fe8:	cf 90       	pop	r12
    2fea:	8f 90       	pop	r8
    2fec:	7f 90       	pop	r7
    2fee:	6f 90       	pop	r6
    2ff0:	08 95       	ret

Disassembly of section .text.par_index:

00002be4 <par_index>:

uint16_t par_index(const char src[], uint8_t parNo){
    2be4:	cf 92       	push	r12
    2be6:	df 92       	push	r13
    2be8:	ef 92       	push	r14
    2bea:	0f 93       	push	r16
    2bec:	1f 93       	push	r17
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2bf2:	44 23       	and	r20, r20
    2bf4:	29 f1       	breq	.+74     	; 0x2c40 <par_index+0x5c>
    2bf6:	04 2f       	mov	r16, r20
    2bf8:	6b 01       	movw	r12, r22
    2bfa:	e8 2e       	mov	r14, r24
    2bfc:	c0 e0       	ldi	r28, 0x00	; 0
    2bfe:	d0 e0       	ldi	r29, 0x00	; 0
    2c00:	10 e0       	ldi	r17, 0x00	; 0
    2c02:	14 c0       	rjmp	.+40     	; 0x2c2c <par_index+0x48>
	
	for (uint16_t i=0; i<strlen(src); i++)
	{
		if(src[i]==' '){
    2c04:	ae 2d       	mov	r26, r14
    2c06:	c6 01       	movw	r24, r12
    2c08:	8c 0f       	add	r24, r28
    2c0a:	9d 1f       	adc	r25, r29
    2c0c:	a1 1d       	adc	r26, r1
    2c0e:	d7 fd       	sbrc	r29, 7
    2c10:	aa 95       	dec	r26
    2c12:	fc 01       	movw	r30, r24
    2c14:	84 91       	lpm	r24, Z
    2c16:	a7 fd       	sbrc	r26, 7
    2c18:	80 81       	ld	r24, Z
    2c1a:	80 32       	cpi	r24, 0x20	; 32
    2c1c:	31 f4       	brne	.+12     	; 0x2c2a <par_index+0x46>
			cnt++;
    2c1e:	1f 5f       	subi	r17, 0xFF	; 255
			if(cnt==parNo){
    2c20:	01 13       	cpse	r16, r17
    2c22:	03 c0       	rjmp	.+6      	; 0x2c2a <par_index+0x46>
				return i+1;
    2c24:	ce 01       	movw	r24, r28
    2c26:	01 96       	adiw	r24, 0x01	; 1
    2c28:	0d c0       	rjmp	.+26     	; 0x2c44 <par_index+0x60>
uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
	
	for (uint16_t i=0; i<strlen(src); i++)
    2c2a:	21 96       	adiw	r28, 0x01	; 1
    2c2c:	8e 2d       	mov	r24, r14
    2c2e:	b6 01       	movw	r22, r12
    2c30:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    2c34:	c8 17       	cp	r28, r24
    2c36:	d9 07       	cpc	r29, r25
    2c38:	28 f3       	brcs	.-54     	; 0x2c04 <par_index+0x20>
			if(cnt==parNo){
				return i+1;
			}
		}
	}
	return 0;
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <par_index+0x60>
}

uint16_t par_index(const char src[], uint8_t parNo){
	uint8_t cnt=0;
	
	if(parNo==0) return 0;
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
				return i+1;
			}
		}
	}
	return 0;
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ef 90       	pop	r14
    2c4e:	df 90       	pop	r13
    2c50:	cf 90       	pop	r12
    2c52:	08 95       	ret

Disassembly of section .text.get_parameter:

00002678 <get_parameter>:

#include <xc.h>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
    2678:	8f 92       	push	r8
    267a:	9f 92       	push	r9
    267c:	af 92       	push	r10
    267e:	cf 92       	push	r12
    2680:	df 92       	push	r13
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	6b 01       	movw	r12, r22
    2690:	e8 2e       	mov	r14, r24
    2692:	ea 01       	movw	r28, r20
    2694:	f2 2e       	mov	r15, r18
	uint8_t pars=count_parameters(src);
    2696:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <count_parameters>
	if(pars<parNo) return false;
    269a:	8f 15       	cp	r24, r15
    269c:	58 f1       	brcs	.+86     	; 0x26f4 <get_parameter+0x7c>
	
	uint16_t len=strlen(src);
    269e:	8e 2d       	mov	r24, r14
    26a0:	b6 01       	movw	r22, r12
    26a2:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    26a6:	8c 01       	movw	r16, r24
	uint16_t startIndex=par_index(src, parNo);
    26a8:	4f 2d       	mov	r20, r15
    26aa:	8e 2d       	mov	r24, r14
    26ac:	b6 01       	movw	r22, r12
    26ae:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <par_index>
	uint8_t parLen=0;
    26b2:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=startIndex; i<len; i++)
    26b4:	15 c0       	rjmp	.+42     	; 0x26e0 <get_parameter+0x68>
	{
		if(src[i]==' ') break;
    26b6:	46 01       	movw	r8, r12
    26b8:	ae 2c       	mov	r10, r14
    26ba:	82 0e       	add	r8, r18
    26bc:	93 1e       	adc	r9, r19
    26be:	a1 1c       	adc	r10, r1
    26c0:	37 fd       	sbrc	r19, 7
    26c2:	aa 94       	dec	r10
    26c4:	4a 2d       	mov	r20, r10
    26c6:	94 01       	movw	r18, r8
    26c8:	f4 01       	movw	r30, r8
    26ca:	24 91       	lpm	r18, Z
    26cc:	47 fd       	sbrc	r20, 7
    26ce:	20 81       	ld	r18, Z
    26d0:	20 32       	cpi	r18, 0x20	; 32
    26d2:	59 f0       	breq	.+22     	; 0x26ea <get_parameter+0x72>
		par[parLen++]=src[i];
    26d4:	fe 01       	movw	r30, r28
    26d6:	e9 0f       	add	r30, r25
    26d8:	f1 1d       	adc	r31, r1
    26da:	20 83       	st	Z, r18
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    26dc:	8f 5f       	subi	r24, 0xFF	; 255
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
    26de:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint16_t len=strlen(src);
	uint16_t startIndex=par_index(src, parNo);
	uint8_t parLen=0;
	
	for (uint8_t i=startIndex; i<len; i++)
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	20 17       	cp	r18, r16
    26e6:	31 07       	cpc	r19, r17
    26e8:	30 f3       	brcs	.-52     	; 0x26b6 <get_parameter+0x3e>
	{
		if(src[i]==' ') break;
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
    26ea:	c9 0f       	add	r28, r25
    26ec:	d1 1d       	adc	r29, r1
    26ee:	18 82       	st	Y, r1
	
	return true;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	01 c0       	rjmp	.+2      	; 0x26f6 <get_parameter+0x7e>
#include <stdbool.h>
#include <string.h>

bool get_parameter(const char src[], char par[], uint8_t parNo){
	uint8_t pars=count_parameters(src);
	if(pars<parNo) return false;
    26f4:	80 e0       	ldi	r24, 0x00	; 0
		par[parLen++]=src[i];
	}
	par[parLen]='\0';
	
	return true;
}
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	ff 90       	pop	r15
    2700:	ef 90       	pop	r14
    2702:	df 90       	pop	r13
    2704:	cf 90       	pop	r12
    2706:	af 90       	pop	r10
    2708:	9f 90       	pop	r9
    270a:	8f 90       	pop	r8
    270c:	08 95       	ret

Disassembly of section .text.test_sampling:

00002110 <test_sampling>:
}

/************************************************************************/
/* Test init of SCD30 and timer                                         */
/************************************************************************/
static void test_sampling(){
    2110:	ff 92       	push	r15
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	6e 97       	sbiw	r28, 0x1e	; 30
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
	uint16_t data[5];
	uart1_hal_send_string("RUN ");
    212a:	64 e7       	ldi	r22, 0x74	; 116
    212c:	75 e0       	ldi	r23, 0x05	; 5
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
	SCD30_STATUS status=SCD30_sensor_on();
    2134:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <SCD30_sensor_on>
    2138:	18 2f       	mov	r17, r24
	SCD30_init_sampling(3, 5, data);
    213a:	ae 01       	movw	r20, r28
    213c:	4f 5f       	subi	r20, 0xFF	; 255
    213e:	5f 4f       	sbci	r21, 0xFF	; 255
    2140:	65 e0       	ldi	r22, 0x05	; 5
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <SCD30_init_sampling>
	if(status!=SCD30_STATUS_SUCCESS){
    214c:	11 23       	and	r17, r17
    214e:	31 f0       	breq	.+12     	; 0x215c <test_sampling+0x4c>
		uart1_hal_send_string("FAIL ");
    2150:	69 e7       	ldi	r22, 0x79	; 121
    2152:	75 e0       	ldi	r23, 0x05	; 5
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
    215a:	32 c0       	rjmp	.+100    	; 0x21c0 <test_sampling+0xb0>
		return;
	}
	
	SCD30_start_sampling();
    215c:	0e 94 97 20 	call	0x412e	; 0x412e <SCD30_start_sampling>
	while(!SCD30_is_sampling_done()){};
    2160:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <SCD30_is_sampling_done>
    2164:	88 23       	and	r24, r24
    2166:	e1 f3       	breq	.-8      	; 0x2160 <test_sampling+0x50>
	
	SCD30_deinit_sampling();
    2168:	0e 94 0e 20 	call	0x401c	; 0x401c <SCD30_deinit_sampling>
	
	for (uint8_t i=0; i<5; i++)
    216c:	f1 2c       	mov	r15, r1
    216e:	25 c0       	rjmp	.+74     	; 0x21ba <test_sampling+0xaa>
	{
		char msg[20];
		sprintf(msg, " %u ", data[i]);
    2170:	ef 2d       	mov	r30, r15
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	ee 0f       	add	r30, r30
    2176:	ff 1f       	adc	r31, r31
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	8c 0f       	add	r24, r28
    217e:	9d 1f       	adc	r25, r29
    2180:	e8 0f       	add	r30, r24
    2182:	f9 1f       	adc	r31, r25
    2184:	81 81       	ldd	r24, Z+1	; 0x01
    2186:	8f 93       	push	r24
    2188:	80 81       	ld	r24, Z
    218a:	8f 93       	push	r24
    218c:	8f e7       	ldi	r24, 0x7F	; 127
    218e:	95 e0       	ldi	r25, 0x05	; 5
    2190:	a0 e0       	ldi	r26, 0x00	; 0
    2192:	af 93       	push	r26
    2194:	9f 93       	push	r25
    2196:	8f 93       	push	r24
    2198:	8e 01       	movw	r16, r28
    219a:	05 5f       	subi	r16, 0xF5	; 245
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	1f 93       	push	r17
    21a0:	0f 93       	push	r16
    21a2:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <sprintf>
		uart1_hal_send_string(msg);
    21a6:	b8 01       	movw	r22, r16
    21a8:	80 e8       	ldi	r24, 0x80	; 128
    21aa:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <uart1_hal_send_string>
	SCD30_start_sampling();
	while(!SCD30_is_sampling_done()){};
	
	SCD30_deinit_sampling();
	
	for (uint8_t i=0; i<5; i++)
    21ae:	f3 94       	inc	r15
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	94 e0       	ldi	r25, 0x04	; 4
    21bc:	9f 15       	cp	r25, r15
    21be:	c0 f6       	brcc	.-80     	; 0x2170 <test_sampling+0x60>
	{
		char msg[20];
		sprintf(msg, " %u ", data[i]);
		uart1_hal_send_string(msg);
	}
}
    21c0:	6e 96       	adiw	r28, 0x1e	; 30
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	ff 90       	pop	r15
    21d6:	08 95       	ret

Disassembly of section .text.test_SCD30_module_start:

00003be6 <test_SCD30_module_start>:
//void read_firmware_api();
//void throw_error(uint8_t status, uint8_t index);
//void read_measure_interval();

void test_SCD30_module_start(){
		uart1_hal_init();
    3be6:	0e 94 3c 1b 	call	0x3678	; 0x3678 <uart1_hal_init>
		PM_HAL_SCD30_power_init();
    3bea:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <PM_HAL_SCD30_power_init>
		TWI_HAL_init();
    3bee:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <TWI_HAL_init>
		
			
		while(1){
			test_sampling();
    3bf2:	0e 94 88 10 	call	0x2110	; 0x2110 <test_sampling>
    3bf6:	2f ef       	ldi	r18, 0xFF	; 255
    3bf8:	8e e9       	ldi	r24, 0x9E	; 158
    3bfa:	94 e2       	ldi	r25, 0x24	; 36
    3bfc:	21 50       	subi	r18, 0x01	; 1
    3bfe:	80 40       	sbci	r24, 0x00	; 0
    3c00:	90 40       	sbci	r25, 0x00	; 0
    3c02:	e1 f7       	brne	.-8      	; 0x3bfc <test_SCD30_module_start+0x16>
    3c04:	00 c0       	rjmp	.+0      	; 0x3c06 <test_SCD30_module_start+0x20>
    3c06:	00 00       	nop
    3c08:	f4 cf       	rjmp	.-24     	; 0x3bf2 <test_SCD30_module_start+0xc>

Disassembly of section .text.test_runner:

0000417e <test_runner>:
#include "PUMP_module/test_PUMP_module.h"
#include "LED_module/test_LED_module.h"

void test_runner(){
	//test_LORA_module_start();
	test_SCD30_module_start();
    417e:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <test_SCD30_module_start>
    4182:	08 95       	ret

Disassembly of section .text.calc_crc8:

0000380a <calc_crc8>:
 *  Author: Mainframe
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
    380a:	ac 01       	movw	r20, r24
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    380c:	30 e0       	ldi	r19, 0x00	; 0
 */ 

#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;
    380e:	8f ef       	ldi	r24, 0xFF	; 255

	    for (uint8_t byte = 0; byte < length; byte++)
    3810:	14 c0       	rjmp	.+40     	; 0x383a <calc_crc8+0x30>
	    {
		    remainder ^= data[byte];
    3812:	fa 01       	movw	r30, r20
    3814:	e3 0f       	add	r30, r19
    3816:	f1 1d       	adc	r31, r1
    3818:	90 81       	ld	r25, Z
    381a:	89 27       	eor	r24, r25

		    for (uint8_t i = 8; i >0; --i)
    381c:	28 e0       	ldi	r18, 0x08	; 8
    381e:	0a c0       	rjmp	.+20     	; 0x3834 <calc_crc8+0x2a>
		    {
			    if(remainder & 0x80){
    3820:	88 23       	and	r24, r24
    3822:	34 f4       	brge	.+12     	; 0x3830 <calc_crc8+0x26>
				    remainder=(remainder << 1) ^ CRC_POLYNOMIAL;
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	88 0f       	add	r24, r24
    3828:	99 1f       	adc	r25, r25
    382a:	91 e3       	ldi	r25, 0x31	; 49
    382c:	89 27       	eor	r24, r25
    382e:	01 c0       	rjmp	.+2      	; 0x3832 <calc_crc8+0x28>
				    }else{
				    remainder=(remainder << 1);
    3830:	88 0f       	add	r24, r24

	    for (uint8_t byte = 0; byte < length; byte++)
	    {
		    remainder ^= data[byte];

		    for (uint8_t i = 8; i >0; --i)
    3832:	21 50       	subi	r18, 0x01	; 1
    3834:	21 11       	cpse	r18, r1
    3836:	f4 cf       	rjmp	.-24     	; 0x3820 <calc_crc8+0x16>
#include "CRC8.h"

uint8_t calc_crc8(uint8_t data[], uint8_t length){
	    uint8_t remainder=CRC_INIT_VALUE;

	    for (uint8_t byte = 0; byte < length; byte++)
    3838:	3f 5f       	subi	r19, 0xFF	; 255
    383a:	36 17       	cp	r19, r22
    383c:	50 f3       	brcs	.-44     	; 0x3812 <calc_crc8+0x8>
				    remainder=(remainder << 1);
			    }
		    }
	    }
	    return remainder;
    383e:	08 95       	ret

Disassembly of section .text.get_decimal:

00002350 <get_decimal>:
	return intVal+deci;
	
	
}

static float get_decimal(char str[]){
    2350:	cf 92       	push	r12
    2352:	df 92       	push	r13
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	6c 01       	movw	r12, r24
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    2362:	10 e0       	ldi	r17, 0x00	; 0
    2364:	08 c0       	rjmp	.+16     	; 0x2376 <get_decimal+0x26>
	{
		if(str[i]=='.'){
    2366:	cc 0d       	add	r28, r12
    2368:	dd 1d       	adc	r29, r13
    236a:	88 81       	ld	r24, Y
    236c:	8e 32       	cpi	r24, 0x2E	; 46
    236e:	11 f4       	brne	.+4      	; 0x2374 <get_decimal+0x24>
			index=i+1;
    2370:	1f 5f       	subi	r17, 0xFF	; 255
			break;
    2372:	0c c0       	rjmp	.+24     	; 0x238c <get_decimal+0x3c>
}

static float get_decimal(char str[]){
	uint8_t index=0;
	
	for (uint8_t i=0; i<strlen(str)-1; i++)
    2374:	1f 5f       	subi	r17, 0xFF	; 255
    2376:	c1 2f       	mov	r28, r17
    2378:	d0 e0       	ldi	r29, 0x00	; 0
    237a:	b6 01       	movw	r22, r12
    237c:	80 e8       	ldi	r24, 0x80	; 128
    237e:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	c8 17       	cp	r28, r24
    2386:	d9 07       	cpc	r29, r25
    2388:	70 f3       	brcs	.-36     	; 0x2366 <get_decimal+0x16>
	
	
}

static float get_decimal(char str[]){
	uint8_t index=0;
    238a:	10 e0       	ldi	r17, 0x00	; 0
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    238c:	11 23       	and	r17, r17
    238e:	71 f1       	breq	.+92     	; 0x23ec <get_decimal+0x9c>
	uint8_t len=strlen(&str[index]);
    2390:	c1 0e       	add	r12, r17
    2392:	d1 1c       	adc	r13, r1
    2394:	80 e8       	ldi	r24, 0x80	; 128
    2396:	e8 2e       	mov	r14, r24
    2398:	8e 2d       	mov	r24, r14
    239a:	b6 01       	movw	r22, r12
    239c:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    23a0:	c8 2f       	mov	r28, r24
	uint16_t val=atoi(&str[index]);
    23a2:	8e 2d       	mov	r24, r14
    23a4:	b6 01       	movw	r22, r12
    23a6:	0e 94 b5 20 	call	0x416a	; 0x416a <atoi>
    23aa:	8c 01       	movw	r16, r24
	float divisor=1;
    23ac:	0f 2e       	mov	r0, r31
    23ae:	c1 2c       	mov	r12, r1
    23b0:	d1 2c       	mov	r13, r1
    23b2:	f0 e8       	ldi	r31, 0x80	; 128
    23b4:	ef 2e       	mov	r14, r31
    23b6:	ff e3       	ldi	r31, 0x3F	; 63
    23b8:	ff 2e       	mov	r15, r31
    23ba:	f0 2d       	mov	r31, r0
	
	while(len>0){
    23bc:	0b c0       	rjmp	.+22     	; 0x23d4 <get_decimal+0x84>
		divisor*=10;
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	c7 01       	movw	r24, r14
    23c8:	b6 01       	movw	r22, r12
    23ca:	0e 94 b1 20 	call	0x4162	; 0x4162 <__mulsf3>
    23ce:	6b 01       	movw	r12, r22
    23d0:	7c 01       	movw	r14, r24
		len--;
    23d2:	c1 50       	subi	r28, 0x01	; 1
	if(index==0) return 0.0000;
	uint8_t len=strlen(&str[index]);
	uint16_t val=atoi(&str[index]);
	float divisor=1;
	
	while(len>0){
    23d4:	c1 11       	cpse	r28, r1
    23d6:	f3 cf       	rjmp	.-26     	; 0x23be <get_decimal+0x6e>
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
    23d8:	b8 01       	movw	r22, r16
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__floatunsisf>
    23e2:	a7 01       	movw	r20, r14
    23e4:	96 01       	movw	r18, r12
    23e6:	0e 94 ad 20 	call	0x415a	; 0x415a <__divsf3>
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <get_decimal+0xa2>
			index=i+1;
			break;
		}
	}
	
	if(index==0) return 0.0000;
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	cb 01       	movw	r24, r22
		divisor*=10;
		len--;
	}
	
	return ((float) val)/divisor;
}
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	df 90       	pop	r13
    2400:	cf 90       	pop	r12
    2402:	08 95       	ret

Disassembly of section .text.str2flaot:

000030de <str2flaot>:
#include <stdlib.h>
#include <string.h>

static float get_decimal(char str[]);

float str2flaot(char str[]){
    30de:	cf 92       	push	r12
    30e0:	df 92       	push	r13
    30e2:	ef 92       	push	r14
    30e4:	ff 92       	push	r15
    30e6:	0f 93       	push	r16
    30e8:	1f 93       	push	r17
    30ea:	cf 93       	push	r28
    30ec:	df 93       	push	r29
    30ee:	8c 01       	movw	r16, r24
	
	uint16_t intVal=atoi(str);
    30f0:	bc 01       	movw	r22, r24
    30f2:	80 e8       	ldi	r24, 0x80	; 128
    30f4:	0e 94 b5 20 	call	0x416a	; 0x416a <atoi>
    30f8:	ec 01       	movw	r28, r24
	float deci=get_decimal(str);
    30fa:	c8 01       	movw	r24, r16
    30fc:	0e 94 a8 11 	call	0x2350	; 0x2350 <get_decimal>
    3100:	6b 01       	movw	r12, r22
    3102:	7c 01       	movw	r14, r24
	return intVal+deci;
    3104:	be 01       	movw	r22, r28
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__floatunsisf>
    310e:	9b 01       	movw	r18, r22
    3110:	ac 01       	movw	r20, r24
    3112:	c7 01       	movw	r24, r14
    3114:	b6 01       	movw	r22, r12
    3116:	0e 94 16 20 	call	0x402c	; 0x402c <__addsf3>
	
	
}
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	1f 91       	pop	r17
    3120:	0f 91       	pop	r16
    3122:	ff 90       	pop	r15
    3124:	ef 90       	pop	r14
    3126:	df 90       	pop	r13
    3128:	cf 90       	pop	r12
    312a:	08 95       	ret

Disassembly of section .text.is_float:

00002e48 <is_float>:
	}
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
    2e48:	ef 92       	push	r14
    2e4a:	ff 92       	push	r15
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	7c 01       	movw	r14, r24
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2e56:	10 e0       	ldi	r17, 0x00	; 0
	
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
    2e58:	00 e0       	ldi	r16, 0x00	; 0
	for (uint8_t i=0; i<strlen(str); i++)
    2e5a:	0d c0       	rjmp	.+26     	; 0x2e76 <is_float+0x2e>
	{
		if(str[i]=='.'){
    2e5c:	ce 0d       	add	r28, r14
    2e5e:	df 1d       	adc	r29, r15
    2e60:	88 81       	ld	r24, Y
    2e62:	8e 32       	cpi	r24, 0x2E	; 46
    2e64:	21 f4       	brne	.+8      	; 0x2e6e <is_float+0x26>
			if (got_dot)
    2e66:	01 11       	cpse	r16, r1
    2e68:	11 c0       	rjmp	.+34     	; 0x2e8c <is_float+0x44>
			{
				return false;
			}else{
				got_dot=true;
    2e6a:	01 e0       	ldi	r16, 0x01	; 1
    2e6c:	03 c0       	rjmp	.+6      	; 0x2e74 <is_float+0x2c>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2e6e:	80 53       	subi	r24, 0x30	; 48
    2e70:	8a 30       	cpi	r24, 0x0A	; 10
    2e72:	70 f4       	brcc	.+28     	; 0x2e90 <is_float+0x48>
	return ((float) val)/divisor;
}

bool is_float(char str[]){
	bool got_dot=false;
	for (uint8_t i=0; i<strlen(str); i++)
    2e74:	1f 5f       	subi	r17, 0xFF	; 255
    2e76:	c1 2f       	mov	r28, r17
    2e78:	d0 e0       	ldi	r29, 0x00	; 0
    2e7a:	b7 01       	movw	r22, r14
    2e7c:	80 e8       	ldi	r24, 0x80	; 128
    2e7e:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <strlen>
    2e82:	c8 17       	cp	r28, r24
    2e84:	d9 07       	cpc	r29, r25
    2e86:	50 f3       	brcs	.-44     	; 0x2e5c <is_float+0x14>
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
	}
	return true;
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	03 c0       	rjmp	.+6      	; 0x2e92 <is_float+0x4a>
	for (uint8_t i=0; i<strlen(str); i++)
	{
		if(str[i]=='.'){
			if (got_dot)
			{
				return false;
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	01 c0       	rjmp	.+2      	; 0x2e92 <is_float+0x4a>
				continue;
			}
		}
		
		//Check for digitis
		if(str[i]<'0' || str[i]>'9') return false;
    2e90:	80 e0       	ldi	r24, 0x00	; 0
	}
	return true;
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	1f 91       	pop	r17
    2e98:	0f 91       	pop	r16
    2e9a:	ff 90       	pop	r15
    2e9c:	ef 90       	pop	r14
    2e9e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000402a <__subsf3>:
    402a:	50 58       	subi	r21, 0x80	; 128

0000402c <__addsf3>:
    402c:	bb 27       	eor	r27, r27
    402e:	aa 27       	eor	r26, r26
    4030:	0e 94 21 10 	call	0x2042	; 0x2042 <__addsf3x>
    4034:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00002042 <__addsf3x>:
    2042:	11 c0       	rjmp	.+34     	; 0x2066 <__addsf3x+0x24>
    2044:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fp_pscA>
    2048:	38 f0       	brcs	.+14     	; 0x2058 <__addsf3x+0x16>
    204a:	0e 94 23 20 	call	0x4046	; 0x4046 <__fp_pscB>
    204e:	20 f0       	brcs	.+8      	; 0x2058 <__addsf3x+0x16>
    2050:	39 f4       	brne	.+14     	; 0x2060 <__addsf3x+0x1e>
    2052:	9f 3f       	cpi	r25, 0xFF	; 255
    2054:	19 f4       	brne	.+6      	; 0x205c <__addsf3x+0x1a>
    2056:	26 f4       	brtc	.+8      	; 0x2060 <__addsf3x+0x1e>
    2058:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <__fp_nan>
    205c:	0e f4       	brtc	.+2      	; 0x2060 <__addsf3x+0x1e>
    205e:	e0 95       	com	r30
    2060:	e7 fb       	bst	r30, 7
    2062:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__fp_inf>
    2066:	e9 2f       	mov	r30, r25
    2068:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fp_split3>
    206c:	58 f3       	brcs	.-42     	; 0x2044 <__addsf3x+0x2>
    206e:	ba 17       	cp	r27, r26
    2070:	62 07       	cpc	r22, r18
    2072:	73 07       	cpc	r23, r19
    2074:	84 07       	cpc	r24, r20
    2076:	95 07       	cpc	r25, r21
    2078:	20 f0       	brcs	.+8      	; 0x2082 <__addsf3x+0x40>
    207a:	79 f4       	brne	.+30     	; 0x209a <__addsf3x+0x58>
    207c:	a6 f5       	brtc	.+104    	; 0x20e6 <__addsf3x+0xa4>
    207e:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__fp_zero>
    2082:	0e f4       	brtc	.+2      	; 0x2086 <__addsf3x+0x44>
    2084:	e0 95       	com	r30
    2086:	0b 2e       	mov	r0, r27
    2088:	ba 2f       	mov	r27, r26
    208a:	a0 2d       	mov	r26, r0
    208c:	0b 01       	movw	r0, r22
    208e:	b9 01       	movw	r22, r18
    2090:	90 01       	movw	r18, r0
    2092:	0c 01       	movw	r0, r24
    2094:	ca 01       	movw	r24, r20
    2096:	a0 01       	movw	r20, r0
    2098:	11 24       	eor	r1, r1
    209a:	ff 27       	eor	r31, r31
    209c:	59 1b       	sub	r21, r25
    209e:	99 f0       	breq	.+38     	; 0x20c6 <__addsf3x+0x84>
    20a0:	59 3f       	cpi	r21, 0xF9	; 249
    20a2:	50 f4       	brcc	.+20     	; 0x20b8 <__addsf3x+0x76>
    20a4:	50 3e       	cpi	r21, 0xE0	; 224
    20a6:	68 f1       	brcs	.+90     	; 0x2102 <__addsf3x+0xc0>
    20a8:	1a 16       	cp	r1, r26
    20aa:	f0 40       	sbci	r31, 0x00	; 0
    20ac:	a2 2f       	mov	r26, r18
    20ae:	23 2f       	mov	r18, r19
    20b0:	34 2f       	mov	r19, r20
    20b2:	44 27       	eor	r20, r20
    20b4:	58 5f       	subi	r21, 0xF8	; 248
    20b6:	f3 cf       	rjmp	.-26     	; 0x209e <__addsf3x+0x5c>
    20b8:	46 95       	lsr	r20
    20ba:	37 95       	ror	r19
    20bc:	27 95       	ror	r18
    20be:	a7 95       	ror	r26
    20c0:	f0 40       	sbci	r31, 0x00	; 0
    20c2:	53 95       	inc	r21
    20c4:	c9 f7       	brne	.-14     	; 0x20b8 <__addsf3x+0x76>
    20c6:	7e f4       	brtc	.+30     	; 0x20e6 <__addsf3x+0xa4>
    20c8:	1f 16       	cp	r1, r31
    20ca:	ba 0b       	sbc	r27, r26
    20cc:	62 0b       	sbc	r22, r18
    20ce:	73 0b       	sbc	r23, r19
    20d0:	84 0b       	sbc	r24, r20
    20d2:	ba f0       	brmi	.+46     	; 0x2102 <__addsf3x+0xc0>
    20d4:	91 50       	subi	r25, 0x01	; 1
    20d6:	a1 f0       	breq	.+40     	; 0x2100 <__addsf3x+0xbe>
    20d8:	ff 0f       	add	r31, r31
    20da:	bb 1f       	adc	r27, r27
    20dc:	66 1f       	adc	r22, r22
    20de:	77 1f       	adc	r23, r23
    20e0:	88 1f       	adc	r24, r24
    20e2:	c2 f7       	brpl	.-16     	; 0x20d4 <__addsf3x+0x92>
    20e4:	0e c0       	rjmp	.+28     	; 0x2102 <__addsf3x+0xc0>
    20e6:	ba 0f       	add	r27, r26
    20e8:	62 1f       	adc	r22, r18
    20ea:	73 1f       	adc	r23, r19
    20ec:	84 1f       	adc	r24, r20
    20ee:	48 f4       	brcc	.+18     	; 0x2102 <__addsf3x+0xc0>
    20f0:	87 95       	ror	r24
    20f2:	77 95       	ror	r23
    20f4:	67 95       	ror	r22
    20f6:	b7 95       	ror	r27
    20f8:	f7 95       	ror	r31
    20fa:	9e 3f       	cpi	r25, 0xFE	; 254
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <__addsf3x+0xbe>
    20fe:	b0 cf       	rjmp	.-160    	; 0x2060 <__addsf3x+0x1e>
    2100:	93 95       	inc	r25
    2102:	88 0f       	add	r24, r24
    2104:	08 f0       	brcs	.+2      	; 0x2108 <__addsf3x+0xc6>
    2106:	99 27       	eor	r25, r25
    2108:	ee 0f       	add	r30, r30
    210a:	97 95       	ror	r25
    210c:	87 95       	ror	r24
    210e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

0000415a <__divsf3>:
    415a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__divsf3x>
    415e:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001e90 <__divsf3x>:
    1e90:	10 c0       	rjmp	.+32     	; 0x1eb2 <__divsf3x+0x22>
    1e92:	0e 94 23 20 	call	0x4046	; 0x4046 <__fp_pscB>
    1e96:	58 f0       	brcs	.+22     	; 0x1eae <__divsf3x+0x1e>
    1e98:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fp_pscA>
    1e9c:	40 f0       	brcs	.+16     	; 0x1eae <__divsf3x+0x1e>
    1e9e:	29 f4       	brne	.+10     	; 0x1eaa <__divsf3x+0x1a>
    1ea0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea2:	29 f0       	breq	.+10     	; 0x1eae <__divsf3x+0x1e>
    1ea4:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__fp_inf>
    1ea8:	51 11       	cpse	r21, r1
    1eaa:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <__fp_szero>
    1eae:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <__fp_nan>
    1eb2:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fp_split3>
    1eb6:	68 f3       	brcs	.-38     	; 0x1e92 <__divsf3x+0x2>

00001eb8 <__divsf3_pse>:
    1eb8:	99 23       	and	r25, r25
    1eba:	b1 f3       	breq	.-20     	; 0x1ea8 <__divsf3x+0x18>
    1ebc:	55 23       	and	r21, r21
    1ebe:	91 f3       	breq	.-28     	; 0x1ea4 <__divsf3x+0x14>
    1ec0:	95 1b       	sub	r25, r21
    1ec2:	55 0b       	sbc	r21, r21
    1ec4:	bb 27       	eor	r27, r27
    1ec6:	aa 27       	eor	r26, r26
    1ec8:	62 17       	cp	r22, r18
    1eca:	73 07       	cpc	r23, r19
    1ecc:	84 07       	cpc	r24, r20
    1ece:	38 f0       	brcs	.+14     	; 0x1ede <__divsf3_pse+0x26>
    1ed0:	9f 5f       	subi	r25, 0xFF	; 255
    1ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed4:	22 0f       	add	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	44 1f       	adc	r20, r20
    1eda:	aa 1f       	adc	r26, r26
    1edc:	a9 f3       	breq	.-22     	; 0x1ec8 <__divsf3_pse+0x10>
    1ede:	35 d0       	rcall	.+106    	; 0x1f4a <__divsf3_pse+0x92>
    1ee0:	0e 2e       	mov	r0, r30
    1ee2:	3a f0       	brmi	.+14     	; 0x1ef2 <__divsf3_pse+0x3a>
    1ee4:	e0 e8       	ldi	r30, 0x80	; 128
    1ee6:	32 d0       	rcall	.+100    	; 0x1f4c <__divsf3_pse+0x94>
    1ee8:	91 50       	subi	r25, 0x01	; 1
    1eea:	50 40       	sbci	r21, 0x00	; 0
    1eec:	e6 95       	lsr	r30
    1eee:	00 1c       	adc	r0, r0
    1ef0:	ca f7       	brpl	.-14     	; 0x1ee4 <__divsf3_pse+0x2c>
    1ef2:	2b d0       	rcall	.+86     	; 0x1f4a <__divsf3_pse+0x92>
    1ef4:	fe 2f       	mov	r31, r30
    1ef6:	29 d0       	rcall	.+82     	; 0x1f4a <__divsf3_pse+0x92>
    1ef8:	66 0f       	add	r22, r22
    1efa:	77 1f       	adc	r23, r23
    1efc:	88 1f       	adc	r24, r24
    1efe:	bb 1f       	adc	r27, r27
    1f00:	26 17       	cp	r18, r22
    1f02:	37 07       	cpc	r19, r23
    1f04:	48 07       	cpc	r20, r24
    1f06:	ab 07       	cpc	r26, r27
    1f08:	b0 e8       	ldi	r27, 0x80	; 128
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <__divsf3_pse+0x56>
    1f0c:	bb 0b       	sbc	r27, r27
    1f0e:	80 2d       	mov	r24, r0
    1f10:	bf 01       	movw	r22, r30
    1f12:	ff 27       	eor	r31, r31
    1f14:	93 58       	subi	r25, 0x83	; 131
    1f16:	5f 4f       	sbci	r21, 0xFF	; 255
    1f18:	3a f0       	brmi	.+14     	; 0x1f28 <__divsf3_pse+0x70>
    1f1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f1c:	51 05       	cpc	r21, r1
    1f1e:	78 f0       	brcs	.+30     	; 0x1f3e <__divsf3_pse+0x86>
    1f20:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__fp_inf>
    1f24:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <__fp_szero>
    1f28:	5f 3f       	cpi	r21, 0xFF	; 255
    1f2a:	e4 f3       	brlt	.-8      	; 0x1f24 <__divsf3_pse+0x6c>
    1f2c:	98 3e       	cpi	r25, 0xE8	; 232
    1f2e:	d4 f3       	brlt	.-12     	; 0x1f24 <__divsf3_pse+0x6c>
    1f30:	86 95       	lsr	r24
    1f32:	77 95       	ror	r23
    1f34:	67 95       	ror	r22
    1f36:	b7 95       	ror	r27
    1f38:	f7 95       	ror	r31
    1f3a:	9f 5f       	subi	r25, 0xFF	; 255
    1f3c:	c9 f7       	brne	.-14     	; 0x1f30 <__divsf3_pse+0x78>
    1f3e:	88 0f       	add	r24, r24
    1f40:	91 1d       	adc	r25, r1
    1f42:	96 95       	lsr	r25
    1f44:	87 95       	ror	r24
    1f46:	97 f9       	bld	r25, 7
    1f48:	08 95       	ret
    1f4a:	e1 e0       	ldi	r30, 0x01	; 1
    1f4c:	66 0f       	add	r22, r22
    1f4e:	77 1f       	adc	r23, r23
    1f50:	88 1f       	adc	r24, r24
    1f52:	bb 1f       	adc	r27, r27
    1f54:	62 17       	cp	r22, r18
    1f56:	73 07       	cpc	r23, r19
    1f58:	84 07       	cpc	r24, r20
    1f5a:	ba 07       	cpc	r27, r26
    1f5c:	20 f0       	brcs	.+8      	; 0x1f66 <__divsf3_pse+0xae>
    1f5e:	62 1b       	sub	r22, r18
    1f60:	73 0b       	sbc	r23, r19
    1f62:	84 0b       	sbc	r24, r20
    1f64:	ba 0b       	sbc	r27, r26
    1f66:	ee 1f       	adc	r30, r30
    1f68:	88 f7       	brcc	.-30     	; 0x1f4c <__divsf3_pse+0x94>
    1f6a:	e0 95       	com	r30
    1f6c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00002d90 <__fixunssfsi>:
    2d90:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__fp_splitA>
    2d94:	88 f0       	brcs	.+34     	; 0x2db8 <__fixunssfsi+0x28>
    2d96:	9f 57       	subi	r25, 0x7F	; 127
    2d98:	98 f0       	brcs	.+38     	; 0x2dc0 <__fixunssfsi+0x30>
    2d9a:	b9 2f       	mov	r27, r25
    2d9c:	99 27       	eor	r25, r25
    2d9e:	b7 51       	subi	r27, 0x17	; 23
    2da0:	b0 f0       	brcs	.+44     	; 0x2dce <__fixunssfsi+0x3e>
    2da2:	e1 f0       	breq	.+56     	; 0x2ddc <__fixunssfsi+0x4c>
    2da4:	66 0f       	add	r22, r22
    2da6:	77 1f       	adc	r23, r23
    2da8:	88 1f       	adc	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	1a f0       	brmi	.+6      	; 0x2db4 <__fixunssfsi+0x24>
    2dae:	ba 95       	dec	r27
    2db0:	c9 f7       	brne	.-14     	; 0x2da4 <__fixunssfsi+0x14>
    2db2:	14 c0       	rjmp	.+40     	; 0x2ddc <__fixunssfsi+0x4c>
    2db4:	b1 30       	cpi	r27, 0x01	; 1
    2db6:	91 f0       	breq	.+36     	; 0x2ddc <__fixunssfsi+0x4c>
    2db8:	0e 94 2a 20 	call	0x4054	; 0x4054 <__fp_zero>
    2dbc:	b1 e0       	ldi	r27, 0x01	; 1
    2dbe:	08 95       	ret
    2dc0:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__fp_zero>
    2dc4:	67 2f       	mov	r22, r23
    2dc6:	78 2f       	mov	r23, r24
    2dc8:	88 27       	eor	r24, r24
    2dca:	b8 5f       	subi	r27, 0xF8	; 248
    2dcc:	39 f0       	breq	.+14     	; 0x2ddc <__fixunssfsi+0x4c>
    2dce:	b9 3f       	cpi	r27, 0xF9	; 249
    2dd0:	cc f3       	brlt	.-14     	; 0x2dc4 <__fixunssfsi+0x34>
    2dd2:	86 95       	lsr	r24
    2dd4:	77 95       	ror	r23
    2dd6:	67 95       	ror	r22
    2dd8:	b3 95       	inc	r27
    2dda:	d9 f7       	brne	.-10     	; 0x2dd2 <__fixunssfsi+0x42>
    2ddc:	3e f4       	brtc	.+14     	; 0x2dec <__fixunssfsi+0x5c>
    2dde:	90 95       	com	r25
    2de0:	80 95       	com	r24
    2de2:	70 95       	com	r23
    2de4:	61 95       	neg	r22
    2de6:	7f 4f       	sbci	r23, 0xFF	; 255
    2de8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000028a6 <__floatunsisf>:
    28a6:	e8 94       	clt
    28a8:	09 c0       	rjmp	.+18     	; 0x28bc <__floatsisf+0x12>

000028aa <__floatsisf>:
    28aa:	97 fb       	bst	r25, 7
    28ac:	3e f4       	brtc	.+14     	; 0x28bc <__floatsisf+0x12>
    28ae:	90 95       	com	r25
    28b0:	80 95       	com	r24
    28b2:	70 95       	com	r23
    28b4:	61 95       	neg	r22
    28b6:	7f 4f       	sbci	r23, 0xFF	; 255
    28b8:	8f 4f       	sbci	r24, 0xFF	; 255
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	99 23       	and	r25, r25
    28be:	a9 f0       	breq	.+42     	; 0x28ea <__floatsisf+0x40>
    28c0:	f9 2f       	mov	r31, r25
    28c2:	96 e9       	ldi	r25, 0x96	; 150
    28c4:	bb 27       	eor	r27, r27
    28c6:	93 95       	inc	r25
    28c8:	f6 95       	lsr	r31
    28ca:	87 95       	ror	r24
    28cc:	77 95       	ror	r23
    28ce:	67 95       	ror	r22
    28d0:	b7 95       	ror	r27
    28d2:	f1 11       	cpse	r31, r1
    28d4:	f8 cf       	rjmp	.-16     	; 0x28c6 <__floatsisf+0x1c>
    28d6:	fa f4       	brpl	.+62     	; 0x2916 <__floatsisf+0x6c>
    28d8:	bb 0f       	add	r27, r27
    28da:	11 f4       	brne	.+4      	; 0x28e0 <__floatsisf+0x36>
    28dc:	60 ff       	sbrs	r22, 0
    28de:	1b c0       	rjmp	.+54     	; 0x2916 <__floatsisf+0x6c>
    28e0:	6f 5f       	subi	r22, 0xFF	; 255
    28e2:	7f 4f       	sbci	r23, 0xFF	; 255
    28e4:	8f 4f       	sbci	r24, 0xFF	; 255
    28e6:	9f 4f       	sbci	r25, 0xFF	; 255
    28e8:	16 c0       	rjmp	.+44     	; 0x2916 <__floatsisf+0x6c>
    28ea:	88 23       	and	r24, r24
    28ec:	11 f0       	breq	.+4      	; 0x28f2 <__floatsisf+0x48>
    28ee:	96 e9       	ldi	r25, 0x96	; 150
    28f0:	11 c0       	rjmp	.+34     	; 0x2914 <__floatsisf+0x6a>
    28f2:	77 23       	and	r23, r23
    28f4:	21 f0       	breq	.+8      	; 0x28fe <__floatsisf+0x54>
    28f6:	9e e8       	ldi	r25, 0x8E	; 142
    28f8:	87 2f       	mov	r24, r23
    28fa:	76 2f       	mov	r23, r22
    28fc:	05 c0       	rjmp	.+10     	; 0x2908 <__floatsisf+0x5e>
    28fe:	66 23       	and	r22, r22
    2900:	71 f0       	breq	.+28     	; 0x291e <__floatsisf+0x74>
    2902:	96 e8       	ldi	r25, 0x86	; 134
    2904:	86 2f       	mov	r24, r22
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	2a f0       	brmi	.+10     	; 0x2916 <__floatsisf+0x6c>
    290c:	9a 95       	dec	r25
    290e:	66 0f       	add	r22, r22
    2910:	77 1f       	adc	r23, r23
    2912:	88 1f       	adc	r24, r24
    2914:	da f7       	brpl	.-10     	; 0x290c <__floatsisf+0x62>
    2916:	88 0f       	add	r24, r24
    2918:	96 95       	lsr	r25
    291a:	87 95       	ror	r24
    291c:	97 f9       	bld	r25, 7
    291e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000040ec <__fp_inf>:
    40ec:	97 f9       	bld	r25, 7
    40ee:	9f 67       	ori	r25, 0x7F	; 127
    40f0:	80 e8       	ldi	r24, 0x80	; 128
    40f2:	70 e0       	ldi	r23, 0x00	; 0
    40f4:	60 e0       	ldi	r22, 0x00	; 0
    40f6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004184 <__fp_nan>:
    4184:	9f ef       	ldi	r25, 0xFF	; 255
    4186:	80 ec       	ldi	r24, 0xC0	; 192
    4188:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004038 <__fp_pscA>:
    4038:	00 24       	eor	r0, r0
    403a:	0a 94       	dec	r0
    403c:	16 16       	cp	r1, r22
    403e:	17 06       	cpc	r1, r23
    4040:	18 06       	cpc	r1, r24
    4042:	09 06       	cpc	r0, r25
    4044:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004046 <__fp_pscB>:
    4046:	00 24       	eor	r0, r0
    4048:	0a 94       	dec	r0
    404a:	12 16       	cp	r1, r18
    404c:	13 06       	cpc	r1, r19
    404e:	14 06       	cpc	r1, r20
    4050:	05 06       	cpc	r0, r21
    4052:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00003c96 <__fp_round>:
    3c96:	09 2e       	mov	r0, r25
    3c98:	03 94       	inc	r0
    3c9a:	00 0c       	add	r0, r0
    3c9c:	11 f4       	brne	.+4      	; 0x3ca2 <__fp_round+0xc>
    3c9e:	88 23       	and	r24, r24
    3ca0:	52 f0       	brmi	.+20     	; 0x3cb6 <__fp_round+0x20>
    3ca2:	bb 0f       	add	r27, r27
    3ca4:	40 f4       	brcc	.+16     	; 0x3cb6 <__fp_round+0x20>
    3ca6:	bf 2b       	or	r27, r31
    3ca8:	11 f4       	brne	.+4      	; 0x3cae <__fp_round+0x18>
    3caa:	60 ff       	sbrs	r22, 0
    3cac:	04 c0       	rjmp	.+8      	; 0x3cb6 <__fp_round+0x20>
    3cae:	6f 5f       	subi	r22, 0xFF	; 255
    3cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    3cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb6:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000034ec <__fp_split3>:
    34ec:	57 fd       	sbrc	r21, 7
    34ee:	90 58       	subi	r25, 0x80	; 128
    34f0:	44 0f       	add	r20, r20
    34f2:	55 1f       	adc	r21, r21
    34f4:	59 f0       	breq	.+22     	; 0x350c <__fp_splitA+0x10>
    34f6:	5f 3f       	cpi	r21, 0xFF	; 255
    34f8:	71 f0       	breq	.+28     	; 0x3516 <__fp_splitA+0x1a>
    34fa:	47 95       	ror	r20

000034fc <__fp_splitA>:
    34fc:	88 0f       	add	r24, r24
    34fe:	97 fb       	bst	r25, 7
    3500:	99 1f       	adc	r25, r25
    3502:	61 f0       	breq	.+24     	; 0x351c <__fp_splitA+0x20>
    3504:	9f 3f       	cpi	r25, 0xFF	; 255
    3506:	79 f0       	breq	.+30     	; 0x3526 <__fp_splitA+0x2a>
    3508:	87 95       	ror	r24
    350a:	08 95       	ret
    350c:	12 16       	cp	r1, r18
    350e:	13 06       	cpc	r1, r19
    3510:	14 06       	cpc	r1, r20
    3512:	55 1f       	adc	r21, r21
    3514:	f2 cf       	rjmp	.-28     	; 0x34fa <__fp_split3+0xe>
    3516:	46 95       	lsr	r20
    3518:	f1 df       	rcall	.-30     	; 0x34fc <__fp_splitA>
    351a:	08 c0       	rjmp	.+16     	; 0x352c <__fp_splitA+0x30>
    351c:	16 16       	cp	r1, r22
    351e:	17 06       	cpc	r1, r23
    3520:	18 06       	cpc	r1, r24
    3522:	99 1f       	adc	r25, r25
    3524:	f1 cf       	rjmp	.-30     	; 0x3508 <__fp_splitA+0xc>
    3526:	86 95       	lsr	r24
    3528:	71 05       	cpc	r23, r1
    352a:	61 05       	cpc	r22, r1
    352c:	08 94       	sec
    352e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004054 <__fp_zero>:
    4054:	e8 94       	clt

00004056 <__fp_szero>:
    4056:	bb 27       	eor	r27, r27
    4058:	66 27       	eor	r22, r22
    405a:	77 27       	eor	r23, r23
    405c:	cb 01       	movw	r24, r22
    405e:	97 f9       	bld	r25, 7
    4060:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00004162 <__mulsf3>:
    4162:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__mulsf3x>
    4166:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00001f6e <__mulsf3x>:
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <__mulsf3x+0x20>
    1f70:	0e 94 1c 20 	call	0x4038	; 0x4038 <__fp_pscA>
    1f74:	38 f0       	brcs	.+14     	; 0x1f84 <__mulsf3x+0x16>
    1f76:	0e 94 23 20 	call	0x4046	; 0x4046 <__fp_pscB>
    1f7a:	20 f0       	brcs	.+8      	; 0x1f84 <__mulsf3x+0x16>
    1f7c:	95 23       	and	r25, r21
    1f7e:	11 f0       	breq	.+4      	; 0x1f84 <__mulsf3x+0x16>
    1f80:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__fp_inf>
    1f84:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <__fp_nan>
    1f88:	11 24       	eor	r1, r1
    1f8a:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <__fp_szero>
    1f8e:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fp_split3>
    1f92:	70 f3       	brcs	.-36     	; 0x1f70 <__mulsf3x+0x2>

00001f94 <__mulsf3_pse>:
    1f94:	95 9f       	mul	r25, r21
    1f96:	c1 f3       	breq	.-16     	; 0x1f88 <__mulsf3x+0x1a>
    1f98:	95 0f       	add	r25, r21
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	55 1f       	adc	r21, r21
    1f9e:	62 9f       	mul	r22, r18
    1fa0:	f0 01       	movw	r30, r0
    1fa2:	72 9f       	mul	r23, r18
    1fa4:	bb 27       	eor	r27, r27
    1fa6:	f0 0d       	add	r31, r0
    1fa8:	b1 1d       	adc	r27, r1
    1faa:	63 9f       	mul	r22, r19
    1fac:	aa 27       	eor	r26, r26
    1fae:	f0 0d       	add	r31, r0
    1fb0:	b1 1d       	adc	r27, r1
    1fb2:	aa 1f       	adc	r26, r26
    1fb4:	64 9f       	mul	r22, r20
    1fb6:	66 27       	eor	r22, r22
    1fb8:	b0 0d       	add	r27, r0
    1fba:	a1 1d       	adc	r26, r1
    1fbc:	66 1f       	adc	r22, r22
    1fbe:	82 9f       	mul	r24, r18
    1fc0:	22 27       	eor	r18, r18
    1fc2:	b0 0d       	add	r27, r0
    1fc4:	a1 1d       	adc	r26, r1
    1fc6:	62 1f       	adc	r22, r18
    1fc8:	73 9f       	mul	r23, r19
    1fca:	b0 0d       	add	r27, r0
    1fcc:	a1 1d       	adc	r26, r1
    1fce:	62 1f       	adc	r22, r18
    1fd0:	83 9f       	mul	r24, r19
    1fd2:	a0 0d       	add	r26, r0
    1fd4:	61 1d       	adc	r22, r1
    1fd6:	22 1f       	adc	r18, r18
    1fd8:	74 9f       	mul	r23, r20
    1fda:	33 27       	eor	r19, r19
    1fdc:	a0 0d       	add	r26, r0
    1fde:	61 1d       	adc	r22, r1
    1fe0:	23 1f       	adc	r18, r19
    1fe2:	84 9f       	mul	r24, r20
    1fe4:	60 0d       	add	r22, r0
    1fe6:	21 1d       	adc	r18, r1
    1fe8:	82 2f       	mov	r24, r18
    1fea:	76 2f       	mov	r23, r22
    1fec:	6a 2f       	mov	r22, r26
    1fee:	11 24       	eor	r1, r1
    1ff0:	9f 57       	subi	r25, 0x7F	; 127
    1ff2:	50 40       	sbci	r21, 0x00	; 0
    1ff4:	9a f0       	brmi	.+38     	; 0x201c <__mulsf3_pse+0x88>
    1ff6:	f1 f0       	breq	.+60     	; 0x2034 <__mulsf3_pse+0xa0>
    1ff8:	88 23       	and	r24, r24
    1ffa:	4a f0       	brmi	.+18     	; 0x200e <__mulsf3_pse+0x7a>
    1ffc:	ee 0f       	add	r30, r30
    1ffe:	ff 1f       	adc	r31, r31
    2000:	bb 1f       	adc	r27, r27
    2002:	66 1f       	adc	r22, r22
    2004:	77 1f       	adc	r23, r23
    2006:	88 1f       	adc	r24, r24
    2008:	91 50       	subi	r25, 0x01	; 1
    200a:	50 40       	sbci	r21, 0x00	; 0
    200c:	a9 f7       	brne	.-22     	; 0x1ff8 <__mulsf3_pse+0x64>
    200e:	9e 3f       	cpi	r25, 0xFE	; 254
    2010:	51 05       	cpc	r21, r1
    2012:	80 f0       	brcs	.+32     	; 0x2034 <__mulsf3_pse+0xa0>
    2014:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__fp_inf>
    2018:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <__fp_szero>
    201c:	5f 3f       	cpi	r21, 0xFF	; 255
    201e:	e4 f3       	brlt	.-8      	; 0x2018 <__mulsf3_pse+0x84>
    2020:	98 3e       	cpi	r25, 0xE8	; 232
    2022:	d4 f3       	brlt	.-12     	; 0x2018 <__mulsf3_pse+0x84>
    2024:	86 95       	lsr	r24
    2026:	77 95       	ror	r23
    2028:	67 95       	ror	r22
    202a:	b7 95       	ror	r27
    202c:	f7 95       	ror	r31
    202e:	e7 95       	ror	r30
    2030:	9f 5f       	subi	r25, 0xFF	; 255
    2032:	c1 f7       	brne	.-16     	; 0x2024 <__mulsf3_pse+0x90>
    2034:	fe 2b       	or	r31, r30
    2036:	88 0f       	add	r24, r24
    2038:	91 1d       	adc	r25, r1
    203a:	96 95       	lsr	r25
    203c:	87 95       	ror	r24
    203e:	97 f9       	bld	r25, 7
    2040:	08 95       	ret

Disassembly of section .text.avrlibc:

000005a0 <vfprintf>:
 5a0:	a4 e1       	ldi	r26, 0x14	; 20
 5a2:	b0 e0       	ldi	r27, 0x00	; 0
 5a4:	e6 ed       	ldi	r30, 0xD6	; 214
 5a6:	f2 e0       	ldi	r31, 0x02	; 2
 5a8:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__prologue_saves__>
 5ac:	6c 01       	movw	r12, r24
 5ae:	1a 01       	movw	r2, r20
 5b0:	46 2e       	mov	r4, r22
 5b2:	59 01       	movw	r10, r18
 5b4:	fc 01       	movw	r30, r24
 5b6:	10 86       	std	Z+8, r1	; 0x08
 5b8:	17 82       	std	Z+7, r1	; 0x07
 5ba:	84 81       	ldd	r24, Z+4	; 0x04
 5bc:	81 ff       	sbrs	r24, 1
 5be:	62 c3       	rjmp	.+1732   	; 0xc84 <__EEPROM_REGION_LENGTH__+0x484>
 5c0:	ce 01       	movw	r24, r28
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	9d 87       	std	Y+13, r25	; 0x0d
 5c6:	8c 87       	std	Y+12, r24	; 0x0c
 5c8:	a0 e8       	ldi	r26, 0x80	; 128
 5ca:	8a 8b       	std	Y+18, r24	; 0x12
 5cc:	9b 8b       	std	Y+19, r25	; 0x13
 5ce:	ac 8b       	std	Y+20, r26	; 0x14
 5d0:	f1 01       	movw	r30, r2
 5d2:	84 91       	lpm	r24, Z
 5d4:	47 fc       	sbrc	r4, 7
 5d6:	80 81       	ld	r24, Z
 5d8:	88 23       	and	r24, r24
 5da:	09 f4       	brne	.+2      	; 0x5de <vfprintf+0x3e>
 5dc:	4f c3       	rjmp	.+1694   	; 0xc7c <__EEPROM_REGION_LENGTH__+0x47c>
 5de:	44 2d       	mov	r20, r4
 5e0:	91 01       	movw	r18, r2
 5e2:	2f 5f       	subi	r18, 0xFF	; 255
 5e4:	3f 4f       	sbci	r19, 0xFF	; 255
 5e6:	4f 4f       	sbci	r20, 0xFF	; 255
 5e8:	85 32       	cpi	r24, 0x25	; 37
 5ea:	19 f0       	breq	.+6      	; 0x5f2 <vfprintf+0x52>
 5ec:	19 01       	movw	r2, r18
 5ee:	44 2e       	mov	r4, r20
 5f0:	0a c0       	rjmp	.+20     	; 0x606 <vfprintf+0x66>
 5f2:	f9 01       	movw	r30, r18
 5f4:	84 91       	lpm	r24, Z
 5f6:	47 fd       	sbrc	r20, 7
 5f8:	80 81       	ld	r24, Z
 5fa:	92 e0       	ldi	r25, 0x02	; 2
 5fc:	29 0e       	add	r2, r25
 5fe:	31 1c       	adc	r3, r1
 600:	41 1c       	adc	r4, r1
 602:	85 32       	cpi	r24, 0x25	; 37
 604:	49 f4       	brne	.+18     	; 0x618 <vfprintf+0x78>
 606:	b6 01       	movw	r22, r12
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 60e:	bf 86       	std	Y+15, r11	; 0x0f
 610:	ae 86       	std	Y+14, r10	; 0x0e
 612:	ae 84       	ldd	r10, Y+14	; 0x0e
 614:	bf 84       	ldd	r11, Y+15	; 0x0f
 616:	dc cf       	rjmp	.-72     	; 0x5d0 <vfprintf+0x30>
 618:	10 e0       	ldi	r17, 0x00	; 0
 61a:	f1 2c       	mov	r15, r1
 61c:	00 e0       	ldi	r16, 0x00	; 0
 61e:	00 32       	cpi	r16, 0x20	; 32
 620:	a0 f4       	brcc	.+40     	; 0x64a <vfprintf+0xaa>
 622:	8b 32       	cpi	r24, 0x2B	; 43
 624:	69 f0       	breq	.+26     	; 0x640 <vfprintf+0xa0>
 626:	30 f4       	brcc	.+12     	; 0x634 <vfprintf+0x94>
 628:	80 32       	cpi	r24, 0x20	; 32
 62a:	59 f0       	breq	.+22     	; 0x642 <vfprintf+0xa2>
 62c:	83 32       	cpi	r24, 0x23	; 35
 62e:	69 f4       	brne	.+26     	; 0x64a <vfprintf+0xaa>
 630:	00 61       	ori	r16, 0x10	; 16
 632:	2c c0       	rjmp	.+88     	; 0x68c <vfprintf+0xec>
 634:	8d 32       	cpi	r24, 0x2D	; 45
 636:	39 f0       	breq	.+14     	; 0x646 <vfprintf+0xa6>
 638:	80 33       	cpi	r24, 0x30	; 48
 63a:	39 f4       	brne	.+14     	; 0x64a <vfprintf+0xaa>
 63c:	01 60       	ori	r16, 0x01	; 1
 63e:	26 c0       	rjmp	.+76     	; 0x68c <vfprintf+0xec>
 640:	02 60       	ori	r16, 0x02	; 2
 642:	04 60       	ori	r16, 0x04	; 4
 644:	23 c0       	rjmp	.+70     	; 0x68c <vfprintf+0xec>
 646:	08 60       	ori	r16, 0x08	; 8
 648:	21 c0       	rjmp	.+66     	; 0x68c <vfprintf+0xec>
 64a:	07 fd       	sbrc	r16, 7
 64c:	29 c0       	rjmp	.+82     	; 0x6a0 <vfprintf+0x100>
 64e:	90 ed       	ldi	r25, 0xD0	; 208
 650:	98 0f       	add	r25, r24
 652:	9a 30       	cpi	r25, 0x0A	; 10
 654:	78 f4       	brcc	.+30     	; 0x674 <vfprintf+0xd4>
 656:	06 ff       	sbrs	r16, 6
 658:	06 c0       	rjmp	.+12     	; 0x666 <vfprintf+0xc6>
 65a:	aa e0       	ldi	r26, 0x0A	; 10
 65c:	1a 9f       	mul	r17, r26
 65e:	90 0d       	add	r25, r0
 660:	11 24       	eor	r1, r1
 662:	19 2f       	mov	r17, r25
 664:	13 c0       	rjmp	.+38     	; 0x68c <vfprintf+0xec>
 666:	ea e0       	ldi	r30, 0x0A	; 10
 668:	fe 9e       	mul	r15, r30
 66a:	90 0d       	add	r25, r0
 66c:	11 24       	eor	r1, r1
 66e:	f9 2e       	mov	r15, r25
 670:	00 62       	ori	r16, 0x20	; 32
 672:	0c c0       	rjmp	.+24     	; 0x68c <vfprintf+0xec>
 674:	8e 32       	cpi	r24, 0x2E	; 46
 676:	21 f4       	brne	.+8      	; 0x680 <vfprintf+0xe0>
 678:	06 fd       	sbrc	r16, 6
 67a:	00 c3       	rjmp	.+1536   	; 0xc7c <__EEPROM_REGION_LENGTH__+0x47c>
 67c:	00 64       	ori	r16, 0x40	; 64
 67e:	06 c0       	rjmp	.+12     	; 0x68c <vfprintf+0xec>
 680:	8c 36       	cpi	r24, 0x6C	; 108
 682:	11 f4       	brne	.+4      	; 0x688 <vfprintf+0xe8>
 684:	00 68       	ori	r16, 0x80	; 128
 686:	02 c0       	rjmp	.+4      	; 0x68c <vfprintf+0xec>
 688:	88 36       	cpi	r24, 0x68	; 104
 68a:	51 f4       	brne	.+20     	; 0x6a0 <vfprintf+0x100>
 68c:	f1 01       	movw	r30, r2
 68e:	84 91       	lpm	r24, Z
 690:	47 fc       	sbrc	r4, 7
 692:	80 81       	ld	r24, Z
 694:	ff ef       	ldi	r31, 0xFF	; 255
 696:	2f 1a       	sub	r2, r31
 698:	3f 0a       	sbc	r3, r31
 69a:	4f 0a       	sbc	r4, r31
 69c:	81 11       	cpse	r24, r1
 69e:	bf cf       	rjmp	.-130    	; 0x61e <vfprintf+0x7e>
 6a0:	9b eb       	ldi	r25, 0xBB	; 187
 6a2:	98 0f       	add	r25, r24
 6a4:	93 30       	cpi	r25, 0x03	; 3
 6a6:	18 f4       	brcc	.+6      	; 0x6ae <vfprintf+0x10e>
 6a8:	00 61       	ori	r16, 0x10	; 16
 6aa:	80 5e       	subi	r24, 0xE0	; 224
 6ac:	06 c0       	rjmp	.+12     	; 0x6ba <vfprintf+0x11a>
 6ae:	9b e9       	ldi	r25, 0x9B	; 155
 6b0:	98 0f       	add	r25, r24
 6b2:	93 30       	cpi	r25, 0x03	; 3
 6b4:	08 f0       	brcs	.+2      	; 0x6b8 <vfprintf+0x118>
 6b6:	66 c1       	rjmp	.+716    	; 0x984 <__EEPROM_REGION_LENGTH__+0x184>
 6b8:	0f 7e       	andi	r16, 0xEF	; 239
 6ba:	06 ff       	sbrs	r16, 6
 6bc:	16 e0       	ldi	r17, 0x06	; 6
 6be:	0f 73       	andi	r16, 0x3F	; 63
 6c0:	70 2e       	mov	r7, r16
 6c2:	85 36       	cpi	r24, 0x65	; 101
 6c4:	21 f4       	brne	.+8      	; 0x6ce <vfprintf+0x12e>
 6c6:	20 2f       	mov	r18, r16
 6c8:	20 64       	ori	r18, 0x40	; 64
 6ca:	72 2e       	mov	r7, r18
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <vfprintf+0x13e>
 6ce:	86 36       	cpi	r24, 0x66	; 102
 6d0:	21 f4       	brne	.+8      	; 0x6da <vfprintf+0x13a>
 6d2:	80 2f       	mov	r24, r16
 6d4:	80 68       	ori	r24, 0x80	; 128
 6d6:	78 2e       	mov	r7, r24
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <vfprintf+0x13e>
 6da:	11 11       	cpse	r17, r1
 6dc:	11 50       	subi	r17, 0x01	; 1
 6de:	77 fe       	sbrs	r7, 7
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <vfprintf+0x150>
 6e2:	1c 33       	cpi	r17, 0x3C	; 60
 6e4:	50 f4       	brcc	.+20     	; 0x6fa <vfprintf+0x15a>
 6e6:	ee 24       	eor	r14, r14
 6e8:	e3 94       	inc	r14
 6ea:	e1 0e       	add	r14, r17
 6ec:	27 e0       	ldi	r18, 0x07	; 7
 6ee:	0b c0       	rjmp	.+22     	; 0x706 <vfprintf+0x166>
 6f0:	18 30       	cpi	r17, 0x08	; 8
 6f2:	38 f0       	brcs	.+14     	; 0x702 <vfprintf+0x162>
 6f4:	27 e0       	ldi	r18, 0x07	; 7
 6f6:	17 e0       	ldi	r17, 0x07	; 7
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <vfprintf+0x164>
 6fa:	27 e0       	ldi	r18, 0x07	; 7
 6fc:	6c e3       	ldi	r22, 0x3C	; 60
 6fe:	e6 2e       	mov	r14, r22
 700:	02 c0       	rjmp	.+4      	; 0x706 <vfprintf+0x166>
 702:	21 2f       	mov	r18, r17
 704:	e1 2c       	mov	r14, r1
 706:	f5 01       	movw	r30, r10
 708:	34 96       	adiw	r30, 0x04	; 4
 70a:	ff 87       	std	Y+15, r31	; 0x0f
 70c:	ee 87       	std	Y+14, r30	; 0x0e
 70e:	f5 01       	movw	r30, r10
 710:	60 81       	ld	r22, Z
 712:	71 81       	ldd	r23, Z+1	; 0x01
 714:	82 81       	ldd	r24, Z+2	; 0x02
 716:	93 81       	ldd	r25, Z+3	; 0x03
 718:	0e 2d       	mov	r16, r14
 71a:	ae 01       	movw	r20, r28
 71c:	4f 5f       	subi	r20, 0xFF	; 255
 71e:	5f 4f       	sbci	r21, 0xFF	; 255
 720:	0e 94 31 0a 	call	0x1462	; 0x1462 <__ftoa_engine>
 724:	5c 01       	movw	r10, r24
 726:	59 80       	ldd	r5, Y+1	; 0x01
 728:	50 fe       	sbrs	r5, 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <vfprintf+0x190>
 72c:	53 fe       	sbrs	r5, 3
 72e:	06 c0       	rjmp	.+12     	; 0x73c <vfprintf+0x19c>
 730:	71 fc       	sbrc	r7, 1
 732:	06 c0       	rjmp	.+12     	; 0x740 <vfprintf+0x1a0>
 734:	72 fe       	sbrs	r7, 2
 736:	06 c0       	rjmp	.+12     	; 0x744 <vfprintf+0x1a4>
 738:	00 e2       	ldi	r16, 0x20	; 32
 73a:	05 c0       	rjmp	.+10     	; 0x746 <vfprintf+0x1a6>
 73c:	0d e2       	ldi	r16, 0x2D	; 45
 73e:	03 c0       	rjmp	.+6      	; 0x746 <vfprintf+0x1a6>
 740:	0b e2       	ldi	r16, 0x2B	; 43
 742:	01 c0       	rjmp	.+2      	; 0x746 <vfprintf+0x1a6>
 744:	00 e0       	ldi	r16, 0x00	; 0
 746:	85 2d       	mov	r24, r5
 748:	8c 70       	andi	r24, 0x0C	; 12
 74a:	19 f0       	breq	.+6      	; 0x752 <vfprintf+0x1b2>
 74c:	01 11       	cpse	r16, r1
 74e:	73 c2       	rjmp	.+1254   	; 0xc36 <__EEPROM_REGION_LENGTH__+0x436>
 750:	be c2       	rjmp	.+1404   	; 0xcce <__EEPROM_REGION_LENGTH__+0x4ce>
 752:	77 fe       	sbrs	r7, 7
 754:	0f c0       	rjmp	.+30     	; 0x774 <vfprintf+0x1d4>
 756:	ea 0c       	add	r14, r10
 758:	54 fe       	sbrs	r5, 4
 75a:	04 c0       	rjmp	.+8      	; 0x764 <vfprintf+0x1c4>
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	81 33       	cpi	r24, 0x31	; 49
 760:	09 f4       	brne	.+2      	; 0x764 <vfprintf+0x1c4>
 762:	ea 94       	dec	r14
 764:	1e 14       	cp	r1, r14
 766:	74 f5       	brge	.+92     	; 0x7c4 <vfprintf+0x224>
 768:	28 e0       	ldi	r18, 0x08	; 8
 76a:	2e 15       	cp	r18, r14
 76c:	78 f5       	brcc	.+94     	; 0x7cc <vfprintf+0x22c>
 76e:	38 e0       	ldi	r19, 0x08	; 8
 770:	e3 2e       	mov	r14, r19
 772:	2c c0       	rjmp	.+88     	; 0x7cc <vfprintf+0x22c>
 774:	76 fc       	sbrc	r7, 6
 776:	2a c0       	rjmp	.+84     	; 0x7cc <vfprintf+0x22c>
 778:	81 2f       	mov	r24, r17
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	8a 15       	cp	r24, r10
 77e:	9b 05       	cpc	r25, r11
 780:	9c f0       	brlt	.+38     	; 0x7a8 <vfprintf+0x208>
 782:	8c ef       	ldi	r24, 0xFC	; 252
 784:	a8 16       	cp	r10, r24
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	b8 06       	cpc	r11, r24
 78a:	74 f0       	brlt	.+28     	; 0x7a8 <vfprintf+0x208>
 78c:	97 2d       	mov	r25, r7
 78e:	90 68       	ori	r25, 0x80	; 128
 790:	79 2e       	mov	r7, r25
 792:	0a c0       	rjmp	.+20     	; 0x7a8 <vfprintf+0x208>
 794:	e2 e0       	ldi	r30, 0x02	; 2
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	ec 0f       	add	r30, r28
 79a:	fd 1f       	adc	r31, r29
 79c:	e1 0f       	add	r30, r17
 79e:	f1 1d       	adc	r31, r1
 7a0:	80 81       	ld	r24, Z
 7a2:	80 33       	cpi	r24, 0x30	; 48
 7a4:	19 f4       	brne	.+6      	; 0x7ac <vfprintf+0x20c>
 7a6:	11 50       	subi	r17, 0x01	; 1
 7a8:	11 11       	cpse	r17, r1
 7aa:	f4 cf       	rjmp	.-24     	; 0x794 <vfprintf+0x1f4>
 7ac:	77 fe       	sbrs	r7, 7
 7ae:	0e c0       	rjmp	.+28     	; 0x7cc <vfprintf+0x22c>
 7b0:	ee 24       	eor	r14, r14
 7b2:	e3 94       	inc	r14
 7b4:	e1 0e       	add	r14, r17
 7b6:	81 2f       	mov	r24, r17
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	a8 16       	cp	r10, r24
 7bc:	b9 06       	cpc	r11, r25
 7be:	2c f4       	brge	.+10     	; 0x7ca <vfprintf+0x22a>
 7c0:	1a 19       	sub	r17, r10
 7c2:	04 c0       	rjmp	.+8      	; 0x7cc <vfprintf+0x22c>
 7c4:	ee 24       	eor	r14, r14
 7c6:	e3 94       	inc	r14
 7c8:	01 c0       	rjmp	.+2      	; 0x7cc <vfprintf+0x22c>
 7ca:	10 e0       	ldi	r17, 0x00	; 0
 7cc:	77 fe       	sbrs	r7, 7
 7ce:	06 c0       	rjmp	.+12     	; 0x7dc <vfprintf+0x23c>
 7d0:	1a 14       	cp	r1, r10
 7d2:	1b 04       	cpc	r1, r11
 7d4:	34 f4       	brge	.+12     	; 0x7e2 <vfprintf+0x242>
 7d6:	c5 01       	movw	r24, r10
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	05 c0       	rjmp	.+10     	; 0x7e6 <vfprintf+0x246>
 7dc:	85 e0       	ldi	r24, 0x05	; 5
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <vfprintf+0x246>
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	01 11       	cpse	r16, r1
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	11 23       	and	r17, r17
 7ec:	31 f0       	breq	.+12     	; 0x7fa <vfprintf+0x25a>
 7ee:	21 2f       	mov	r18, r17
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	2f 5f       	subi	r18, 0xFF	; 255
 7f4:	3f 4f       	sbci	r19, 0xFF	; 255
 7f6:	82 0f       	add	r24, r18
 7f8:	93 1f       	adc	r25, r19
 7fa:	2f 2d       	mov	r18, r15
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	82 17       	cp	r24, r18
 800:	93 07       	cpc	r25, r19
 802:	14 f4       	brge	.+4      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 804:	f8 1a       	sub	r15, r24
 806:	01 c0       	rjmp	.+2      	; 0x80a <__EEPROM_REGION_LENGTH__+0xa>
 808:	f1 2c       	mov	r15, r1
 80a:	87 2d       	mov	r24, r7
 80c:	89 70       	andi	r24, 0x09	; 9
 80e:	49 f4       	brne	.+18     	; 0x822 <__EEPROM_REGION_LENGTH__+0x22>
 810:	ff 20       	and	r15, r15
 812:	39 f0       	breq	.+14     	; 0x822 <__EEPROM_REGION_LENGTH__+0x22>
 814:	b6 01       	movw	r22, r12
 816:	80 e2       	ldi	r24, 0x20	; 32
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 81e:	fa 94       	dec	r15
 820:	f7 cf       	rjmp	.-18     	; 0x810 <__EEPROM_REGION_LENGTH__+0x10>
 822:	00 23       	and	r16, r16
 824:	29 f0       	breq	.+10     	; 0x830 <__EEPROM_REGION_LENGTH__+0x30>
 826:	b6 01       	movw	r22, r12
 828:	80 2f       	mov	r24, r16
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 830:	73 fc       	sbrc	r7, 3
 832:	09 c0       	rjmp	.+18     	; 0x846 <__EEPROM_REGION_LENGTH__+0x46>
 834:	ff 20       	and	r15, r15
 836:	39 f0       	breq	.+14     	; 0x846 <__EEPROM_REGION_LENGTH__+0x46>
 838:	b6 01       	movw	r22, r12
 83a:	80 e3       	ldi	r24, 0x30	; 48
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 842:	fa 94       	dec	r15
 844:	f7 cf       	rjmp	.-18     	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
 846:	77 fe       	sbrs	r7, 7
 848:	49 c0       	rjmp	.+146    	; 0x8dc <__EEPROM_REGION_LENGTH__+0xdc>
 84a:	35 01       	movw	r6, r10
 84c:	b7 fe       	sbrs	r11, 7
 84e:	02 c0       	rjmp	.+4      	; 0x854 <__EEPROM_REGION_LENGTH__+0x54>
 850:	61 2c       	mov	r6, r1
 852:	71 2c       	mov	r7, r1
 854:	c5 01       	movw	r24, r10
 856:	86 19       	sub	r24, r6
 858:	97 09       	sbc	r25, r7
 85a:	88 24       	eor	r8, r8
 85c:	83 94       	inc	r8
 85e:	91 2c       	mov	r9, r1
 860:	8c 0e       	add	r8, r28
 862:	9d 1e       	adc	r9, r29
 864:	88 0e       	add	r8, r24
 866:	99 1e       	adc	r9, r25
 868:	f5 01       	movw	r30, r10
 86a:	ee 19       	sub	r30, r14
 86c:	f1 09       	sbc	r31, r1
 86e:	f9 8b       	std	Y+17, r31	; 0x11
 870:	e8 8b       	std	Y+16, r30	; 0x10
 872:	01 2f       	mov	r16, r17
 874:	10 e0       	ldi	r17, 0x00	; 0
 876:	11 95       	neg	r17
 878:	01 95       	neg	r16
 87a:	11 09       	sbc	r17, r1
 87c:	ff ef       	ldi	r31, 0xFF	; 255
 87e:	6f 16       	cp	r6, r31
 880:	7f 06       	cpc	r7, r31
 882:	29 f4       	brne	.+10     	; 0x88e <__EEPROM_REGION_LENGTH__+0x8e>
 884:	b6 01       	movw	r22, r12
 886:	8e e2       	ldi	r24, 0x2E	; 46
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 88e:	a6 14       	cp	r10, r6
 890:	b7 04       	cpc	r11, r7
 892:	44 f0       	brlt	.+16     	; 0x8a4 <__EEPROM_REGION_LENGTH__+0xa4>
 894:	88 89       	ldd	r24, Y+16	; 0x10
 896:	99 89       	ldd	r25, Y+17	; 0x11
 898:	86 15       	cp	r24, r6
 89a:	97 05       	cpc	r25, r7
 89c:	1c f4       	brge	.+6      	; 0x8a4 <__EEPROM_REGION_LENGTH__+0xa4>
 89e:	f4 01       	movw	r30, r8
 8a0:	81 81       	ldd	r24, Z+1	; 0x01
 8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <__EEPROM_REGION_LENGTH__+0xa6>
 8a4:	80 e3       	ldi	r24, 0x30	; 48
 8a6:	f1 e0       	ldi	r31, 0x01	; 1
 8a8:	6f 1a       	sub	r6, r31
 8aa:	71 08       	sbc	r7, r1
 8ac:	2f ef       	ldi	r18, 0xFF	; 255
 8ae:	82 1a       	sub	r8, r18
 8b0:	92 0a       	sbc	r9, r18
 8b2:	60 16       	cp	r6, r16
 8b4:	71 06       	cpc	r7, r17
 8b6:	2c f0       	brlt	.+10     	; 0x8c2 <__EEPROM_REGION_LENGTH__+0xc2>
 8b8:	b6 01       	movw	r22, r12
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 8c0:	dd cf       	rjmp	.-70     	; 0x87c <__EEPROM_REGION_LENGTH__+0x7c>
 8c2:	a6 14       	cp	r10, r6
 8c4:	b7 04       	cpc	r11, r7
 8c6:	39 f4       	brne	.+14     	; 0x8d6 <__EEPROM_REGION_LENGTH__+0xd6>
 8c8:	9a 81       	ldd	r25, Y+2	; 0x02
 8ca:	96 33       	cpi	r25, 0x36	; 54
 8cc:	18 f4       	brcc	.+6      	; 0x8d4 <__EEPROM_REGION_LENGTH__+0xd4>
 8ce:	95 33       	cpi	r25, 0x35	; 53
 8d0:	11 f4       	brne	.+4      	; 0x8d6 <__EEPROM_REGION_LENGTH__+0xd6>
 8d2:	54 fe       	sbrs	r5, 4
 8d4:	81 e3       	ldi	r24, 0x31	; 49
 8d6:	b6 01       	movw	r22, r12
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	51 c0       	rjmp	.+162    	; 0x97e <__EEPROM_REGION_LENGTH__+0x17e>
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	81 33       	cpi	r24, 0x31	; 49
 8e0:	19 f0       	breq	.+6      	; 0x8e8 <__EEPROM_REGION_LENGTH__+0xe8>
 8e2:	95 2d       	mov	r25, r5
 8e4:	9f 7e       	andi	r25, 0xEF	; 239
 8e6:	59 2e       	mov	r5, r25
 8e8:	b6 01       	movw	r22, r12
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 8f0:	11 11       	cpse	r17, r1
 8f2:	05 c0       	rjmp	.+10     	; 0x8fe <__EEPROM_REGION_LENGTH__+0xfe>
 8f4:	74 fc       	sbrc	r7, 4
 8f6:	1c c0       	rjmp	.+56     	; 0x930 <__EEPROM_REGION_LENGTH__+0x130>
 8f8:	85 e6       	ldi	r24, 0x65	; 101
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	1b c0       	rjmp	.+54     	; 0x934 <__EEPROM_REGION_LENGTH__+0x134>
 8fe:	b6 01       	movw	r22, r12
 900:	8e e2       	ldi	r24, 0x2E	; 46
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 908:	02 e0       	ldi	r16, 0x02	; 2
 90a:	01 0f       	add	r16, r17
 90c:	82 e0       	ldi	r24, 0x02	; 2
 90e:	11 e0       	ldi	r17, 0x01	; 1
 910:	18 0f       	add	r17, r24
 912:	e1 e0       	ldi	r30, 0x01	; 1
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	ec 0f       	add	r30, r28
 918:	fd 1f       	adc	r31, r29
 91a:	e8 0f       	add	r30, r24
 91c:	f1 1d       	adc	r31, r1
 91e:	80 81       	ld	r24, Z
 920:	b6 01       	movw	r22, r12
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 928:	81 2f       	mov	r24, r17
 92a:	10 13       	cpse	r17, r16
 92c:	f0 cf       	rjmp	.-32     	; 0x90e <__EEPROM_REGION_LENGTH__+0x10e>
 92e:	e2 cf       	rjmp	.-60     	; 0x8f4 <__EEPROM_REGION_LENGTH__+0xf4>
 930:	85 e4       	ldi	r24, 0x45	; 69
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	b6 01       	movw	r22, r12
 936:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 93a:	b7 fc       	sbrc	r11, 7
 93c:	05 c0       	rjmp	.+10     	; 0x948 <__EEPROM_REGION_LENGTH__+0x148>
 93e:	a1 14       	cp	r10, r1
 940:	b1 04       	cpc	r11, r1
 942:	39 f4       	brne	.+14     	; 0x952 <__EEPROM_REGION_LENGTH__+0x152>
 944:	54 fe       	sbrs	r5, 4
 946:	05 c0       	rjmp	.+10     	; 0x952 <__EEPROM_REGION_LENGTH__+0x152>
 948:	b1 94       	neg	r11
 94a:	a1 94       	neg	r10
 94c:	b1 08       	sbc	r11, r1
 94e:	8d e2       	ldi	r24, 0x2D	; 45
 950:	01 c0       	rjmp	.+2      	; 0x954 <__EEPROM_REGION_LENGTH__+0x154>
 952:	8b e2       	ldi	r24, 0x2B	; 43
 954:	b6 01       	movw	r22, r12
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 95c:	80 e3       	ldi	r24, 0x30	; 48
 95e:	ea e0       	ldi	r30, 0x0A	; 10
 960:	ae 16       	cp	r10, r30
 962:	b1 04       	cpc	r11, r1
 964:	2c f0       	brlt	.+10     	; 0x970 <__EEPROM_REGION_LENGTH__+0x170>
 966:	8f 5f       	subi	r24, 0xFF	; 255
 968:	aa e0       	ldi	r26, 0x0A	; 10
 96a:	aa 1a       	sub	r10, r26
 96c:	b1 08       	sbc	r11, r1
 96e:	f7 cf       	rjmp	.-18     	; 0x95e <__EEPROM_REGION_LENGTH__+0x15e>
 970:	b6 01       	movw	r22, r12
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 978:	b6 01       	movw	r22, r12
 97a:	c5 01       	movw	r24, r10
 97c:	c0 96       	adiw	r24, 0x30	; 48
 97e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 982:	72 c1       	rjmp	.+740    	; 0xc68 <__EEPROM_REGION_LENGTH__+0x468>
 984:	83 36       	cpi	r24, 0x63	; 99
 986:	31 f0       	breq	.+12     	; 0x994 <__EEPROM_REGION_LENGTH__+0x194>
 988:	83 37       	cpi	r24, 0x73	; 115
 98a:	91 f0       	breq	.+36     	; 0x9b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 98c:	83 35       	cpi	r24, 0x53	; 83
 98e:	09 f0       	breq	.+2      	; 0x992 <__EEPROM_REGION_LENGTH__+0x192>
 990:	5d c0       	rjmp	.+186    	; 0xa4c <__EEPROM_REGION_LENGTH__+0x24c>
 992:	24 c0       	rjmp	.+72     	; 0x9dc <__EEPROM_REGION_LENGTH__+0x1dc>
 994:	c5 01       	movw	r24, r10
 996:	02 96       	adiw	r24, 0x02	; 2
 998:	9f 87       	std	Y+15, r25	; 0x0f
 99a:	8e 87       	std	Y+14, r24	; 0x0e
 99c:	f5 01       	movw	r30, r10
 99e:	80 81       	ld	r24, Z
 9a0:	89 83       	std	Y+1, r24	; 0x01
 9a2:	6a 88       	ldd	r6, Y+18	; 0x12
 9a4:	7b 88       	ldd	r7, Y+19	; 0x13
 9a6:	8c 88       	ldd	r8, Y+20	; 0x14
 9a8:	aa 24       	eor	r10, r10
 9aa:	a3 94       	inc	r10
 9ac:	b1 2c       	mov	r11, r1
 9ae:	14 c0       	rjmp	.+40     	; 0x9d8 <__EEPROM_REGION_LENGTH__+0x1d8>
 9b0:	c5 01       	movw	r24, r10
 9b2:	03 96       	adiw	r24, 0x03	; 3
 9b4:	9f 87       	std	Y+15, r25	; 0x0f
 9b6:	8e 87       	std	Y+14, r24	; 0x0e
 9b8:	f5 01       	movw	r30, r10
 9ba:	60 80       	ld	r6, Z
 9bc:	71 80       	ldd	r7, Z+1	; 0x01
 9be:	82 80       	ldd	r8, Z+2	; 0x02
 9c0:	06 ff       	sbrs	r16, 6
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <__EEPROM_REGION_LENGTH__+0x1ca>
 9c4:	41 2f       	mov	r20, r17
 9c6:	50 e0       	ldi	r21, 0x00	; 0
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <__EEPROM_REGION_LENGTH__+0x1ce>
 9ca:	4f ef       	ldi	r20, 0xFF	; 255
 9cc:	5f ef       	ldi	r21, 0xFF	; 255
 9ce:	88 2d       	mov	r24, r8
 9d0:	b3 01       	movw	r22, r6
 9d2:	0e 94 3b 1c 	call	0x3876	; 0x3876 <strnlen>
 9d6:	5c 01       	movw	r10, r24
 9d8:	0f 77       	andi	r16, 0x7F	; 127
 9da:	15 c0       	rjmp	.+42     	; 0xa06 <__EEPROM_REGION_LENGTH__+0x206>
 9dc:	c5 01       	movw	r24, r10
 9de:	03 96       	adiw	r24, 0x03	; 3
 9e0:	9f 87       	std	Y+15, r25	; 0x0f
 9e2:	8e 87       	std	Y+14, r24	; 0x0e
 9e4:	f5 01       	movw	r30, r10
 9e6:	60 80       	ld	r6, Z
 9e8:	71 80       	ldd	r7, Z+1	; 0x01
 9ea:	82 80       	ldd	r8, Z+2	; 0x02
 9ec:	06 ff       	sbrs	r16, 6
 9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <__EEPROM_REGION_LENGTH__+0x1f6>
 9f0:	41 2f       	mov	r20, r17
 9f2:	50 e0       	ldi	r21, 0x00	; 0
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <__EEPROM_REGION_LENGTH__+0x1fa>
 9f6:	4f ef       	ldi	r20, 0xFF	; 255
 9f8:	5f ef       	ldi	r21, 0xFF	; 255
 9fa:	88 2d       	mov	r24, r8
 9fc:	b3 01       	movw	r22, r6
 9fe:	0e 94 3b 1c 	call	0x3876	; 0x3876 <strnlen>
 a02:	5c 01       	movw	r10, r24
 a04:	00 68       	ori	r16, 0x80	; 128
 a06:	03 fd       	sbrc	r16, 3
 a08:	1d c0       	rjmp	.+58     	; 0xa44 <__EEPROM_REGION_LENGTH__+0x244>
 a0a:	8f 2d       	mov	r24, r15
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	a8 16       	cp	r10, r24
 a10:	b9 06       	cpc	r11, r25
 a12:	c0 f4       	brcc	.+48     	; 0xa44 <__EEPROM_REGION_LENGTH__+0x244>
 a14:	b6 01       	movw	r22, r12
 a16:	80 e2       	ldi	r24, 0x20	; 32
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 a1e:	fa 94       	dec	r15
 a20:	f4 cf       	rjmp	.-24     	; 0xa0a <__EEPROM_REGION_LENGTH__+0x20a>
 a22:	f3 01       	movw	r30, r6
 a24:	84 91       	lpm	r24, Z
 a26:	87 fc       	sbrc	r8, 7
 a28:	80 81       	ld	r24, Z
 a2a:	ff ef       	ldi	r31, 0xFF	; 255
 a2c:	6f 1a       	sub	r6, r31
 a2e:	7f 0a       	sbc	r7, r31
 a30:	8f 0a       	sbc	r8, r31
 a32:	b6 01       	movw	r22, r12
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 a3a:	f1 10       	cpse	r15, r1
 a3c:	fa 94       	dec	r15
 a3e:	21 e0       	ldi	r18, 0x01	; 1
 a40:	a2 1a       	sub	r10, r18
 a42:	b1 08       	sbc	r11, r1
 a44:	a1 14       	cp	r10, r1
 a46:	b1 04       	cpc	r11, r1
 a48:	61 f7       	brne	.-40     	; 0xa22 <__EEPROM_REGION_LENGTH__+0x222>
 a4a:	0e c1       	rjmp	.+540    	; 0xc68 <__EEPROM_REGION_LENGTH__+0x468>
 a4c:	84 36       	cpi	r24, 0x64	; 100
 a4e:	11 f0       	breq	.+4      	; 0xa54 <__EEPROM_REGION_LENGTH__+0x254>
 a50:	89 36       	cpi	r24, 0x69	; 105
 a52:	79 f5       	brne	.+94     	; 0xab2 <__EEPROM_REGION_LENGTH__+0x2b2>
 a54:	c5 01       	movw	r24, r10
 a56:	07 ff       	sbrs	r16, 7
 a58:	09 c0       	rjmp	.+18     	; 0xa6c <__EEPROM_REGION_LENGTH__+0x26c>
 a5a:	04 96       	adiw	r24, 0x04	; 4
 a5c:	9f 87       	std	Y+15, r25	; 0x0f
 a5e:	8e 87       	std	Y+14, r24	; 0x0e
 a60:	f5 01       	movw	r30, r10
 a62:	60 81       	ld	r22, Z
 a64:	71 81       	ldd	r23, Z+1	; 0x01
 a66:	82 81       	ldd	r24, Z+2	; 0x02
 a68:	93 81       	ldd	r25, Z+3	; 0x03
 a6a:	0a c0       	rjmp	.+20     	; 0xa80 <__EEPROM_REGION_LENGTH__+0x280>
 a6c:	02 96       	adiw	r24, 0x02	; 2
 a6e:	9f 87       	std	Y+15, r25	; 0x0f
 a70:	8e 87       	std	Y+14, r24	; 0x0e
 a72:	f5 01       	movw	r30, r10
 a74:	60 81       	ld	r22, Z
 a76:	71 81       	ldd	r23, Z+1	; 0x01
 a78:	07 2e       	mov	r0, r23
 a7a:	00 0c       	add	r0, r0
 a7c:	88 0b       	sbc	r24, r24
 a7e:	99 0b       	sbc	r25, r25
 a80:	0f 76       	andi	r16, 0x6F	; 111
 a82:	e0 2e       	mov	r14, r16
 a84:	97 ff       	sbrs	r25, 7
 a86:	0a c0       	rjmp	.+20     	; 0xa9c <__EEPROM_REGION_LENGTH__+0x29c>
 a88:	90 95       	com	r25
 a8a:	80 95       	com	r24
 a8c:	70 95       	com	r23
 a8e:	61 95       	neg	r22
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	f0 2f       	mov	r31, r16
 a98:	f0 68       	ori	r31, 0x80	; 128
 a9a:	ef 2e       	mov	r14, r31
 a9c:	2a e0       	ldi	r18, 0x0A	; 10
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	ae 01       	movw	r20, r28
 aa2:	4f 5f       	subi	r20, 0xFF	; 255
 aa4:	5f 4f       	sbci	r21, 0xFF	; 255
 aa6:	0e 94 4a 11 	call	0x2294	; 0x2294 <__ultoa_invert>
 aaa:	a8 2e       	mov	r10, r24
 aac:	2c 85       	ldd	r18, Y+12	; 0x0c
 aae:	a2 1a       	sub	r10, r18
 ab0:	4b c0       	rjmp	.+150    	; 0xb48 <__EEPROM_REGION_LENGTH__+0x348>
 ab2:	85 37       	cpi	r24, 0x75	; 117
 ab4:	29 f4       	brne	.+10     	; 0xac0 <__EEPROM_REGION_LENGTH__+0x2c0>
 ab6:	0f 7e       	andi	r16, 0xEF	; 239
 ab8:	e0 2e       	mov	r14, r16
 aba:	2a e0       	ldi	r18, 0x0A	; 10
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	25 c0       	rjmp	.+74     	; 0xb0a <__EEPROM_REGION_LENGTH__+0x30a>
 ac0:	90 2f       	mov	r25, r16
 ac2:	99 7f       	andi	r25, 0xF9	; 249
 ac4:	e9 2e       	mov	r14, r25
 ac6:	8f 36       	cpi	r24, 0x6F	; 111
 ac8:	c1 f0       	breq	.+48     	; 0xafa <__EEPROM_REGION_LENGTH__+0x2fa>
 aca:	18 f4       	brcc	.+6      	; 0xad2 <__EEPROM_REGION_LENGTH__+0x2d2>
 acc:	88 35       	cpi	r24, 0x58	; 88
 ace:	79 f0       	breq	.+30     	; 0xaee <__EEPROM_REGION_LENGTH__+0x2ee>
 ad0:	d5 c0       	rjmp	.+426    	; 0xc7c <__EEPROM_REGION_LENGTH__+0x47c>
 ad2:	80 37       	cpi	r24, 0x70	; 112
 ad4:	19 f0       	breq	.+6      	; 0xadc <__EEPROM_REGION_LENGTH__+0x2dc>
 ad6:	88 37       	cpi	r24, 0x78	; 120
 ad8:	21 f0       	breq	.+8      	; 0xae2 <__EEPROM_REGION_LENGTH__+0x2e2>
 ada:	d0 c0       	rjmp	.+416    	; 0xc7c <__EEPROM_REGION_LENGTH__+0x47c>
 adc:	a9 2f       	mov	r26, r25
 ade:	a0 61       	ori	r26, 0x10	; 16
 ae0:	ea 2e       	mov	r14, r26
 ae2:	e4 fe       	sbrs	r14, 4
 ae4:	0d c0       	rjmp	.+26     	; 0xb00 <__EEPROM_REGION_LENGTH__+0x300>
 ae6:	ee 2d       	mov	r30, r14
 ae8:	e4 60       	ori	r30, 0x04	; 4
 aea:	ee 2e       	mov	r14, r30
 aec:	09 c0       	rjmp	.+18     	; 0xb00 <__EEPROM_REGION_LENGTH__+0x300>
 aee:	04 ff       	sbrs	r16, 4
 af0:	0a c0       	rjmp	.+20     	; 0xb06 <__EEPROM_REGION_LENGTH__+0x306>
 af2:	f9 2f       	mov	r31, r25
 af4:	f6 60       	ori	r31, 0x06	; 6
 af6:	ef 2e       	mov	r14, r31
 af8:	06 c0       	rjmp	.+12     	; 0xb06 <__EEPROM_REGION_LENGTH__+0x306>
 afa:	28 e0       	ldi	r18, 0x08	; 8
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	05 c0       	rjmp	.+10     	; 0xb0a <__EEPROM_REGION_LENGTH__+0x30a>
 b00:	20 e1       	ldi	r18, 0x10	; 16
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	02 c0       	rjmp	.+4      	; 0xb0a <__EEPROM_REGION_LENGTH__+0x30a>
 b06:	20 e1       	ldi	r18, 0x10	; 16
 b08:	32 e0       	ldi	r19, 0x02	; 2
 b0a:	c5 01       	movw	r24, r10
 b0c:	e7 fe       	sbrs	r14, 7
 b0e:	09 c0       	rjmp	.+18     	; 0xb22 <__EEPROM_REGION_LENGTH__+0x322>
 b10:	04 96       	adiw	r24, 0x04	; 4
 b12:	9f 87       	std	Y+15, r25	; 0x0f
 b14:	8e 87       	std	Y+14, r24	; 0x0e
 b16:	f5 01       	movw	r30, r10
 b18:	60 81       	ld	r22, Z
 b1a:	71 81       	ldd	r23, Z+1	; 0x01
 b1c:	82 81       	ldd	r24, Z+2	; 0x02
 b1e:	93 81       	ldd	r25, Z+3	; 0x03
 b20:	08 c0       	rjmp	.+16     	; 0xb32 <__EEPROM_REGION_LENGTH__+0x332>
 b22:	02 96       	adiw	r24, 0x02	; 2
 b24:	9f 87       	std	Y+15, r25	; 0x0f
 b26:	8e 87       	std	Y+14, r24	; 0x0e
 b28:	f5 01       	movw	r30, r10
 b2a:	60 81       	ld	r22, Z
 b2c:	71 81       	ldd	r23, Z+1	; 0x01
 b2e:	80 e0       	ldi	r24, 0x00	; 0
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	ae 01       	movw	r20, r28
 b34:	4f 5f       	subi	r20, 0xFF	; 255
 b36:	5f 4f       	sbci	r21, 0xFF	; 255
 b38:	0e 94 4a 11 	call	0x2294	; 0x2294 <__ultoa_invert>
 b3c:	a8 2e       	mov	r10, r24
 b3e:	fc 85       	ldd	r31, Y+12	; 0x0c
 b40:	af 1a       	sub	r10, r31
 b42:	2e 2d       	mov	r18, r14
 b44:	2f 77       	andi	r18, 0x7F	; 127
 b46:	e2 2e       	mov	r14, r18
 b48:	e6 fe       	sbrs	r14, 6
 b4a:	0b c0       	rjmp	.+22     	; 0xb62 <__EEPROM_REGION_LENGTH__+0x362>
 b4c:	0e 2d       	mov	r16, r14
 b4e:	0e 7f       	andi	r16, 0xFE	; 254
 b50:	a1 16       	cp	r10, r17
 b52:	50 f4       	brcc	.+20     	; 0xb68 <__EEPROM_REGION_LENGTH__+0x368>
 b54:	e4 fe       	sbrs	r14, 4
 b56:	0a c0       	rjmp	.+20     	; 0xb6c <__EEPROM_REGION_LENGTH__+0x36c>
 b58:	e2 fc       	sbrc	r14, 2
 b5a:	08 c0       	rjmp	.+16     	; 0xb6c <__EEPROM_REGION_LENGTH__+0x36c>
 b5c:	0e 2d       	mov	r16, r14
 b5e:	0e 7e       	andi	r16, 0xEE	; 238
 b60:	05 c0       	rjmp	.+10     	; 0xb6c <__EEPROM_REGION_LENGTH__+0x36c>
 b62:	ba 2c       	mov	r11, r10
 b64:	0e 2d       	mov	r16, r14
 b66:	03 c0       	rjmp	.+6      	; 0xb6e <__EEPROM_REGION_LENGTH__+0x36e>
 b68:	ba 2c       	mov	r11, r10
 b6a:	01 c0       	rjmp	.+2      	; 0xb6e <__EEPROM_REGION_LENGTH__+0x36e>
 b6c:	b1 2e       	mov	r11, r17
 b6e:	04 ff       	sbrs	r16, 4
 b70:	0d c0       	rjmp	.+26     	; 0xb8c <__EEPROM_REGION_LENGTH__+0x38c>
 b72:	fe 01       	movw	r30, r28
 b74:	ea 0d       	add	r30, r10
 b76:	f1 1d       	adc	r31, r1
 b78:	80 81       	ld	r24, Z
 b7a:	80 33       	cpi	r24, 0x30	; 48
 b7c:	11 f4       	brne	.+4      	; 0xb82 <__EEPROM_REGION_LENGTH__+0x382>
 b7e:	09 7e       	andi	r16, 0xE9	; 233
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <__EEPROM_REGION_LENGTH__+0x394>
 b82:	02 ff       	sbrs	r16, 2
 b84:	06 c0       	rjmp	.+12     	; 0xb92 <__EEPROM_REGION_LENGTH__+0x392>
 b86:	b3 94       	inc	r11
 b88:	b3 94       	inc	r11
 b8a:	04 c0       	rjmp	.+8      	; 0xb94 <__EEPROM_REGION_LENGTH__+0x394>
 b8c:	80 2f       	mov	r24, r16
 b8e:	86 78       	andi	r24, 0x86	; 134
 b90:	09 f0       	breq	.+2      	; 0xb94 <__EEPROM_REGION_LENGTH__+0x394>
 b92:	b3 94       	inc	r11
 b94:	03 fd       	sbrc	r16, 3
 b96:	11 c0       	rjmp	.+34     	; 0xbba <__EEPROM_REGION_LENGTH__+0x3ba>
 b98:	00 ff       	sbrs	r16, 0
 b9a:	06 c0       	rjmp	.+12     	; 0xba8 <__EEPROM_REGION_LENGTH__+0x3a8>
 b9c:	bf 14       	cp	r11, r15
 b9e:	88 f4       	brcc	.+34     	; 0xbc2 <__EEPROM_REGION_LENGTH__+0x3c2>
 ba0:	fa 0c       	add	r15, r10
 ba2:	1f 2d       	mov	r17, r15
 ba4:	1b 19       	sub	r17, r11
 ba6:	0e c0       	rjmp	.+28     	; 0xbc4 <__EEPROM_REGION_LENGTH__+0x3c4>
 ba8:	bf 14       	cp	r11, r15
 baa:	60 f4       	brcc	.+24     	; 0xbc4 <__EEPROM_REGION_LENGTH__+0x3c4>
 bac:	b6 01       	movw	r22, r12
 bae:	80 e2       	ldi	r24, 0x20	; 32
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 bb6:	b3 94       	inc	r11
 bb8:	f7 cf       	rjmp	.-18     	; 0xba8 <__EEPROM_REGION_LENGTH__+0x3a8>
 bba:	bf 14       	cp	r11, r15
 bbc:	18 f4       	brcc	.+6      	; 0xbc4 <__EEPROM_REGION_LENGTH__+0x3c4>
 bbe:	fb 18       	sub	r15, r11
 bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <__EEPROM_REGION_LENGTH__+0x3c6>
 bc2:	1a 2d       	mov	r17, r10
 bc4:	f1 2c       	mov	r15, r1
 bc6:	04 ff       	sbrs	r16, 4
 bc8:	10 c0       	rjmp	.+32     	; 0xbea <__EEPROM_REGION_LENGTH__+0x3ea>
 bca:	b6 01       	movw	r22, r12
 bcc:	80 e3       	ldi	r24, 0x30	; 48
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 bd4:	02 ff       	sbrs	r16, 2
 bd6:	17 c0       	rjmp	.+46     	; 0xc06 <__EEPROM_REGION_LENGTH__+0x406>
 bd8:	01 fd       	sbrc	r16, 1
 bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__EEPROM_REGION_LENGTH__+0x3e2>
 bdc:	88 e7       	ldi	r24, 0x78	; 120
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <__EEPROM_REGION_LENGTH__+0x3e6>
 be2:	88 e5       	ldi	r24, 0x58	; 88
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	b6 01       	movw	r22, r12
 be8:	0c c0       	rjmp	.+24     	; 0xc02 <__EEPROM_REGION_LENGTH__+0x402>
 bea:	80 2f       	mov	r24, r16
 bec:	86 78       	andi	r24, 0x86	; 134
 bee:	59 f0       	breq	.+22     	; 0xc06 <__EEPROM_REGION_LENGTH__+0x406>
 bf0:	01 ff       	sbrs	r16, 1
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <__EEPROM_REGION_LENGTH__+0x3f8>
 bf4:	8b e2       	ldi	r24, 0x2B	; 43
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <__EEPROM_REGION_LENGTH__+0x3fa>
 bf8:	80 e2       	ldi	r24, 0x20	; 32
 bfa:	07 fd       	sbrc	r16, 7
 bfc:	8d e2       	ldi	r24, 0x2D	; 45
 bfe:	b6 01       	movw	r22, r12
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 c06:	a1 16       	cp	r10, r17
 c08:	38 f4       	brcc	.+14     	; 0xc18 <__EEPROM_REGION_LENGTH__+0x418>
 c0a:	b6 01       	movw	r22, r12
 c0c:	80 e3       	ldi	r24, 0x30	; 48
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 c14:	11 50       	subi	r17, 0x01	; 1
 c16:	f7 cf       	rjmp	.-18     	; 0xc06 <__EEPROM_REGION_LENGTH__+0x406>
 c18:	aa 94       	dec	r10
 c1a:	e1 e0       	ldi	r30, 0x01	; 1
 c1c:	f0 e0       	ldi	r31, 0x00	; 0
 c1e:	ec 0f       	add	r30, r28
 c20:	fd 1f       	adc	r31, r29
 c22:	ea 0d       	add	r30, r10
 c24:	f1 1d       	adc	r31, r1
 c26:	80 81       	ld	r24, Z
 c28:	b6 01       	movw	r22, r12
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 c30:	a1 10       	cpse	r10, r1
 c32:	f2 cf       	rjmp	.-28     	; 0xc18 <__EEPROM_REGION_LENGTH__+0x418>
 c34:	19 c0       	rjmp	.+50     	; 0xc68 <__EEPROM_REGION_LENGTH__+0x468>
 c36:	f4 e0       	ldi	r31, 0x04	; 4
 c38:	ff 15       	cp	r31, r15
 c3a:	80 f5       	brcc	.+96     	; 0xc9c <__EEPROM_REGION_LENGTH__+0x49c>
 c3c:	84 e0       	ldi	r24, 0x04	; 4
 c3e:	f8 1a       	sub	r15, r24
 c40:	73 fe       	sbrs	r7, 3
 c42:	23 c0       	rjmp	.+70     	; 0xc8a <__EEPROM_REGION_LENGTH__+0x48a>
 c44:	01 11       	cpse	r16, r1
 c46:	2b c0       	rjmp	.+86     	; 0xc9e <__EEPROM_REGION_LENGTH__+0x49e>
 c48:	53 fe       	sbrs	r5, 3
 c4a:	2f c0       	rjmp	.+94     	; 0xcaa <__EEPROM_REGION_LENGTH__+0x4aa>
 c4c:	58 e8       	ldi	r21, 0x88	; 136
 c4e:	85 2e       	mov	r8, r21
 c50:	55 e0       	ldi	r21, 0x05	; 5
 c52:	95 2e       	mov	r9, r21
 c54:	50 e0       	ldi	r21, 0x00	; 0
 c56:	a5 2e       	mov	r10, r21
 c58:	07 2d       	mov	r16, r7
 c5a:	00 71       	andi	r16, 0x10	; 16
 c5c:	f4 01       	movw	r30, r8
 c5e:	84 91       	lpm	r24, Z
 c60:	a7 fc       	sbrc	r10, 7
 c62:	80 81       	ld	r24, Z
 c64:	81 11       	cpse	r24, r1
 c66:	28 c0       	rjmp	.+80     	; 0xcb8 <__EEPROM_REGION_LENGTH__+0x4b8>
 c68:	ff 20       	and	r15, r15
 c6a:	09 f4       	brne	.+2      	; 0xc6e <__EEPROM_REGION_LENGTH__+0x46e>
 c6c:	d2 cc       	rjmp	.-1628   	; 0x612 <vfprintf+0x72>
 c6e:	b6 01       	movw	r22, r12
 c70:	80 e2       	ldi	r24, 0x20	; 32
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 c78:	fa 94       	dec	r15
 c7a:	f6 cf       	rjmp	.-20     	; 0xc68 <__EEPROM_REGION_LENGTH__+0x468>
 c7c:	f6 01       	movw	r30, r12
 c7e:	87 81       	ldd	r24, Z+7	; 0x07
 c80:	90 85       	ldd	r25, Z+8	; 0x08
 c82:	2c c0       	rjmp	.+88     	; 0xcdc <__EEPROM_REGION_LENGTH__+0x4dc>
 c84:	8f ef       	ldi	r24, 0xFF	; 255
 c86:	9f ef       	ldi	r25, 0xFF	; 255
 c88:	29 c0       	rjmp	.+82     	; 0xcdc <__EEPROM_REGION_LENGTH__+0x4dc>
 c8a:	b6 01       	movw	r22, r12
 c8c:	80 e2       	ldi	r24, 0x20	; 32
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 c94:	fa 94       	dec	r15
 c96:	f1 10       	cpse	r15, r1
 c98:	f8 cf       	rjmp	.-16     	; 0xc8a <__EEPROM_REGION_LENGTH__+0x48a>
 c9a:	d4 cf       	rjmp	.-88     	; 0xc44 <__EEPROM_REGION_LENGTH__+0x444>
 c9c:	f1 2c       	mov	r15, r1
 c9e:	b6 01       	movw	r22, r12
 ca0:	80 2f       	mov	r24, r16
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 ca8:	cf cf       	rjmp	.-98     	; 0xc48 <__EEPROM_REGION_LENGTH__+0x448>
 caa:	44 e8       	ldi	r20, 0x84	; 132
 cac:	84 2e       	mov	r8, r20
 cae:	45 e0       	ldi	r20, 0x05	; 5
 cb0:	94 2e       	mov	r9, r20
 cb2:	40 e0       	ldi	r20, 0x00	; 0
 cb4:	a4 2e       	mov	r10, r20
 cb6:	d0 cf       	rjmp	.-96     	; 0xc58 <__EEPROM_REGION_LENGTH__+0x458>
 cb8:	01 11       	cpse	r16, r1
 cba:	80 52       	subi	r24, 0x20	; 32
 cbc:	b6 01       	movw	r22, r12
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	0e 94 44 15 	call	0x2a88	; 0x2a88 <fputc>
 cc4:	ff ef       	ldi	r31, 0xFF	; 255
 cc6:	8f 1a       	sub	r8, r31
 cc8:	9f 0a       	sbc	r9, r31
 cca:	af 0a       	sbc	r10, r31
 ccc:	c7 cf       	rjmp	.-114    	; 0xc5c <__EEPROM_REGION_LENGTH__+0x45c>
 cce:	23 e0       	ldi	r18, 0x03	; 3
 cd0:	2f 15       	cp	r18, r15
 cd2:	10 f4       	brcc	.+4      	; 0xcd8 <__EEPROM_REGION_LENGTH__+0x4d8>
 cd4:	83 e0       	ldi	r24, 0x03	; 3
 cd6:	b3 cf       	rjmp	.-154    	; 0xc3e <__EEPROM_REGION_LENGTH__+0x43e>
 cd8:	f1 2c       	mov	r15, r1
 cda:	b6 cf       	rjmp	.-148    	; 0xc48 <__EEPROM_REGION_LENGTH__+0x448>
 cdc:	64 96       	adiw	r28, 0x14	; 20
 cde:	e2 e1       	ldi	r30, 0x12	; 18
 ce0:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__epilogue_restores__>

Disassembly of section .text.libgcc:

000040f8 <__tablejump2__>:
    40f8:	ee 0f       	add	r30, r30
    40fa:	ff 1f       	adc	r31, r31
    40fc:	05 90       	lpm	r0, Z+
    40fe:	f4 91       	lpm	r31, Z
    4100:	e0 2d       	mov	r30, r0
    4102:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00003d52 <__umulhisi3>:
    3d52:	a2 9f       	mul	r26, r18
    3d54:	b0 01       	movw	r22, r0
    3d56:	b3 9f       	mul	r27, r19
    3d58:	c0 01       	movw	r24, r0
    3d5a:	a3 9f       	mul	r26, r19
    3d5c:	70 0d       	add	r23, r0
    3d5e:	81 1d       	adc	r24, r1
    3d60:	11 24       	eor	r1, r1
    3d62:	91 1d       	adc	r25, r1
    3d64:	b2 9f       	mul	r27, r18
    3d66:	70 0d       	add	r23, r0
    3d68:	81 1d       	adc	r24, r1
    3d6a:	11 24       	eor	r1, r1
    3d6c:	91 1d       	adc	r25, r1
    3d6e:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000037d2 <__prologue_saves__>:
    37d2:	2f 92       	push	r2
    37d4:	3f 92       	push	r3
    37d6:	4f 92       	push	r4
    37d8:	5f 92       	push	r5
    37da:	6f 92       	push	r6
    37dc:	7f 92       	push	r7
    37de:	8f 92       	push	r8
    37e0:	9f 92       	push	r9
    37e2:	af 92       	push	r10
    37e4:	bf 92       	push	r11
    37e6:	cf 92       	push	r12
    37e8:	df 92       	push	r13
    37ea:	ef 92       	push	r14
    37ec:	ff 92       	push	r15
    37ee:	0f 93       	push	r16
    37f0:	1f 93       	push	r17
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	ca 1b       	sub	r28, r26
    37fc:	db 0b       	sbc	r29, r27
    37fe:	0f b6       	in	r0, 0x3f	; 63
    3800:	f8 94       	cli
    3802:	de bf       	out	0x3e, r29	; 62
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	cd bf       	out	0x3d, r28	; 61
    3808:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00003840 <__epilogue_restores__>:
    3840:	2a 88       	ldd	r2, Y+18	; 0x12
    3842:	39 88       	ldd	r3, Y+17	; 0x11
    3844:	48 88       	ldd	r4, Y+16	; 0x10
    3846:	5f 84       	ldd	r5, Y+15	; 0x0f
    3848:	6e 84       	ldd	r6, Y+14	; 0x0e
    384a:	7d 84       	ldd	r7, Y+13	; 0x0d
    384c:	8c 84       	ldd	r8, Y+12	; 0x0c
    384e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3850:	aa 84       	ldd	r10, Y+10	; 0x0a
    3852:	b9 84       	ldd	r11, Y+9	; 0x09
    3854:	c8 84       	ldd	r12, Y+8	; 0x08
    3856:	df 80       	ldd	r13, Y+7	; 0x07
    3858:	ee 80       	ldd	r14, Y+6	; 0x06
    385a:	fd 80       	ldd	r15, Y+5	; 0x05
    385c:	0c 81       	ldd	r16, Y+4	; 0x04
    385e:	1b 81       	ldd	r17, Y+3	; 0x03
    3860:	aa 81       	ldd	r26, Y+2	; 0x02
    3862:	b9 81       	ldd	r27, Y+1	; 0x01
    3864:	ce 0f       	add	r28, r30
    3866:	d1 1d       	adc	r29, r1
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
    3872:	ed 01       	movw	r28, r26
    3874:	08 95       	ret

Disassembly of section .text.avrlibc:

0000416a <atoi>:
    416a:	0e 94 31 20 	call	0x4062	; 0x4062 <atol>
    416e:	cb 01       	movw	r24, r22
    4170:	08 95       	ret

Disassembly of section .text.avrlibc:

00004062 <atol>:
    4062:	2a e0       	ldi	r18, 0x0A	; 10
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	0e 94 72 06 	call	0xce4	; 0xce4 <strtol>
    406e:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ce4 <strtol>:
 ce4:	2f 92       	push	r2
 ce6:	3f 92       	push	r3
 ce8:	4f 92       	push	r4
 cea:	5f 92       	push	r5
 cec:	6f 92       	push	r6
 cee:	7f 92       	push	r7
 cf0:	8f 92       	push	r8
 cf2:	af 92       	push	r10
 cf4:	bf 92       	push	r11
 cf6:	cf 92       	push	r12
 cf8:	df 92       	push	r13
 cfa:	ef 92       	push	r14
 cfc:	0f 93       	push	r16
 cfe:	1f 93       	push	r17
 d00:	cf 93       	push	r28
 d02:	df 93       	push	r29
 d04:	00 d0       	rcall	.+0      	; 0xd06 <strtol+0x22>
 d06:	00 d0       	rcall	.+0      	; 0xd08 <strtol+0x24>
 d08:	00 d0       	rcall	.+0      	; 0xd0a <strtol+0x26>
 d0a:	cd b7       	in	r28, 0x3d	; 61
 d0c:	de b7       	in	r29, 0x3e	; 62
 d0e:	3b 01       	movw	r6, r22
 d10:	88 2e       	mov	r8, r24
 d12:	5a 01       	movw	r10, r20
 d14:	19 01       	movw	r2, r18
 d16:	41 15       	cp	r20, r1
 d18:	51 05       	cpc	r21, r1
 d1a:	21 f0       	breq	.+8      	; 0xd24 <strtol+0x40>
 d1c:	fa 01       	movw	r30, r20
 d1e:	60 83       	st	Z, r22
 d20:	71 83       	std	Z+1, r23	; 0x01
 d22:	82 83       	std	Z+2, r24	; 0x02
 d24:	21 14       	cp	r2, r1
 d26:	31 04       	cpc	r3, r1
 d28:	29 f0       	breq	.+10     	; 0xd34 <strtol+0x50>
 d2a:	c1 01       	movw	r24, r2
 d2c:	02 97       	sbiw	r24, 0x02	; 2
 d2e:	83 97       	sbiw	r24, 0x23	; 35
 d30:	08 f0       	brcs	.+2      	; 0xd34 <strtol+0x50>
 d32:	1a c1       	rjmp	.+564    	; 0xf68 <strtol+0x284>
 d34:	e8 2c       	mov	r14, r8
 d36:	63 01       	movw	r12, r6
 d38:	ff ef       	ldi	r31, 0xFF	; 255
 d3a:	cf 1a       	sub	r12, r31
 d3c:	df 0a       	sbc	r13, r31
 d3e:	ef 0a       	sbc	r14, r31
 d40:	f3 01       	movw	r30, r6
 d42:	14 91       	lpm	r17, Z
 d44:	87 fc       	sbrc	r8, 7
 d46:	10 81       	ld	r17, Z
 d48:	81 2f       	mov	r24, r17
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <isspace>
 d50:	4c 2d       	mov	r20, r12
 d52:	3d 2d       	mov	r19, r13
 d54:	2e 2d       	mov	r18, r14
 d56:	89 2b       	or	r24, r25
 d58:	19 f0       	breq	.+6      	; 0xd60 <strtol+0x7c>
 d5a:	36 01       	movw	r6, r12
 d5c:	8e 2c       	mov	r8, r14
 d5e:	ea cf       	rjmp	.-44     	; 0xd34 <strtol+0x50>
 d60:	1d 32       	cpi	r17, 0x2D	; 45
 d62:	69 f4       	brne	.+26     	; 0xd7e <strtol+0x9a>
 d64:	e8 2c       	mov	r14, r8
 d66:	63 01       	movw	r12, r6
 d68:	52 e0       	ldi	r21, 0x02	; 2
 d6a:	c5 0e       	add	r12, r21
 d6c:	d1 1c       	adc	r13, r1
 d6e:	e1 1c       	adc	r14, r1
 d70:	e4 2f       	mov	r30, r20
 d72:	f3 2f       	mov	r31, r19
 d74:	14 91       	lpm	r17, Z
 d76:	27 fd       	sbrc	r18, 7
 d78:	10 81       	ld	r17, Z
 d7a:	01 e0       	ldi	r16, 0x01	; 1
 d7c:	0e c0       	rjmp	.+28     	; 0xd9a <strtol+0xb6>
 d7e:	1b 32       	cpi	r17, 0x2B	; 43
 d80:	59 f4       	brne	.+22     	; 0xd98 <strtol+0xb4>
 d82:	e8 2c       	mov	r14, r8
 d84:	63 01       	movw	r12, r6
 d86:	82 e0       	ldi	r24, 0x02	; 2
 d88:	c8 0e       	add	r12, r24
 d8a:	d1 1c       	adc	r13, r1
 d8c:	e1 1c       	adc	r14, r1
 d8e:	e4 2f       	mov	r30, r20
 d90:	f3 2f       	mov	r31, r19
 d92:	14 91       	lpm	r17, Z
 d94:	27 fd       	sbrc	r18, 7
 d96:	10 81       	ld	r17, Z
 d98:	00 e0       	ldi	r16, 0x00	; 0
 d9a:	21 14       	cp	r2, r1
 d9c:	31 04       	cpc	r3, r1
 d9e:	09 f1       	breq	.+66     	; 0xde2 <strtol+0xfe>
 da0:	90 e1       	ldi	r25, 0x10	; 16
 da2:	29 16       	cp	r2, r25
 da4:	31 04       	cpc	r3, r1
 da6:	29 f4       	brne	.+10     	; 0xdb2 <strtol+0xce>
 da8:	3f c0       	rjmp	.+126    	; 0xe28 <strtol+0x144>
 daa:	10 e3       	ldi	r17, 0x30	; 48
 dac:	21 14       	cp	r2, r1
 dae:	31 04       	cpc	r3, r1
 db0:	21 f1       	breq	.+72     	; 0xdfa <strtol+0x116>
 db2:	f8 e0       	ldi	r31, 0x08	; 8
 db4:	2f 16       	cp	r2, r31
 db6:	31 04       	cpc	r3, r1
 db8:	01 f1       	breq	.+64     	; 0xdfa <strtol+0x116>
 dba:	54 f4       	brge	.+20     	; 0xdd0 <strtol+0xec>
 dbc:	32 e0       	ldi	r19, 0x02	; 2
 dbe:	23 16       	cp	r2, r19
 dc0:	31 04       	cpc	r3, r1
 dc2:	21 f5       	brne	.+72     	; 0xe0c <strtol+0x128>
 dc4:	41 2c       	mov	r4, r1
 dc6:	51 2c       	mov	r5, r1
 dc8:	61 2c       	mov	r6, r1
 dca:	50 e4       	ldi	r21, 0x40	; 64
 dcc:	75 2e       	mov	r7, r21
 dce:	4b c0       	rjmp	.+150    	; 0xe66 <strtol+0x182>
 dd0:	4a e0       	ldi	r20, 0x0A	; 10
 dd2:	24 16       	cp	r2, r20
 dd4:	31 04       	cpc	r3, r1
 dd6:	39 f0       	breq	.+14     	; 0xde6 <strtol+0x102>
 dd8:	50 e1       	ldi	r21, 0x10	; 16
 dda:	25 16       	cp	r2, r21
 ddc:	31 04       	cpc	r3, r1
 dde:	b1 f4       	brne	.+44     	; 0xe0c <strtol+0x128>
 de0:	3d c0       	rjmp	.+122    	; 0xe5c <strtol+0x178>
 de2:	10 33       	cpi	r17, 0x30	; 48
 de4:	19 f1       	breq	.+70     	; 0xe2c <strtol+0x148>
 de6:	3a e0       	ldi	r19, 0x0A	; 10
 de8:	23 2e       	mov	r2, r19
 dea:	31 2c       	mov	r3, r1
 dec:	4c ec       	ldi	r20, 0xCC	; 204
 dee:	44 2e       	mov	r4, r20
 df0:	54 2c       	mov	r5, r4
 df2:	64 2c       	mov	r6, r4
 df4:	4c e0       	ldi	r20, 0x0C	; 12
 df6:	74 2e       	mov	r7, r20
 df8:	36 c0       	rjmp	.+108    	; 0xe66 <strtol+0x182>
 dfa:	98 e0       	ldi	r25, 0x08	; 8
 dfc:	29 2e       	mov	r2, r25
 dfe:	31 2c       	mov	r3, r1
 e00:	41 2c       	mov	r4, r1
 e02:	51 2c       	mov	r5, r1
 e04:	61 2c       	mov	r6, r1
 e06:	20 e1       	ldi	r18, 0x10	; 16
 e08:	72 2e       	mov	r7, r18
 e0a:	2d c0       	rjmp	.+90     	; 0xe66 <strtol+0x182>
 e0c:	60 e0       	ldi	r22, 0x00	; 0
 e0e:	70 e0       	ldi	r23, 0x00	; 0
 e10:	80 e0       	ldi	r24, 0x00	; 0
 e12:	90 e8       	ldi	r25, 0x80	; 128
 e14:	91 01       	movw	r18, r2
 e16:	03 2c       	mov	r0, r3
 e18:	00 0c       	add	r0, r0
 e1a:	44 0b       	sbc	r20, r20
 e1c:	55 0b       	sbc	r21, r21
 e1e:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__udivmodsi4>
 e22:	29 01       	movw	r4, r18
 e24:	3a 01       	movw	r6, r20
 e26:	1f c0       	rjmp	.+62     	; 0xe66 <strtol+0x182>
 e28:	10 33       	cpi	r17, 0x30	; 48
 e2a:	c1 f4       	brne	.+48     	; 0xe5c <strtol+0x178>
 e2c:	f6 01       	movw	r30, r12
 e2e:	84 91       	lpm	r24, Z
 e30:	e7 fc       	sbrc	r14, 7
 e32:	80 81       	ld	r24, Z
 e34:	8f 7d       	andi	r24, 0xDF	; 223
 e36:	88 35       	cpi	r24, 0x58	; 88
 e38:	09 f0       	breq	.+2      	; 0xe3c <strtol+0x158>
 e3a:	b7 cf       	rjmp	.-146    	; 0xdaa <strtol+0xc6>
 e3c:	ae 2d       	mov	r26, r14
 e3e:	c6 01       	movw	r24, r12
 e40:	01 96       	adiw	r24, 0x01	; 1
 e42:	a1 1d       	adc	r26, r1
 e44:	fc 01       	movw	r30, r24
 e46:	14 91       	lpm	r17, Z
 e48:	a7 fd       	sbrc	r26, 7
 e4a:	10 81       	ld	r17, Z
 e4c:	e2 e0       	ldi	r30, 0x02	; 2
 e4e:	ce 0e       	add	r12, r30
 e50:	d1 1c       	adc	r13, r1
 e52:	e1 1c       	adc	r14, r1
 e54:	02 60       	ori	r16, 0x02	; 2
 e56:	60 e1       	ldi	r22, 0x10	; 16
 e58:	26 2e       	mov	r2, r22
 e5a:	31 2c       	mov	r3, r1
 e5c:	41 2c       	mov	r4, r1
 e5e:	51 2c       	mov	r5, r1
 e60:	61 2c       	mov	r6, r1
 e62:	88 e0       	ldi	r24, 0x08	; 8
 e64:	78 2e       	mov	r7, r24
 e66:	a0 e0       	ldi	r26, 0x00	; 0
 e68:	60 e0       	ldi	r22, 0x00	; 0
 e6a:	70 e0       	ldi	r23, 0x00	; 0
 e6c:	cb 01       	movw	r24, r22
 e6e:	91 01       	movw	r18, r2
 e70:	03 2c       	mov	r0, r3
 e72:	00 0c       	add	r0, r0
 e74:	44 0b       	sbc	r20, r20
 e76:	55 0b       	sbc	r21, r21
 e78:	29 83       	std	Y+1, r18	; 0x01
 e7a:	3a 83       	std	Y+2, r19	; 0x02
 e7c:	4b 83       	std	Y+3, r20	; 0x03
 e7e:	5c 83       	std	Y+4, r21	; 0x04
 e80:	e0 ed       	ldi	r30, 0xD0	; 208
 e82:	e1 0f       	add	r30, r17
 e84:	ea 30       	cpi	r30, 0x0A	; 10
 e86:	60 f0       	brcs	.+24     	; 0xea0 <strtol+0x1bc>
 e88:	2f eb       	ldi	r18, 0xBF	; 191
 e8a:	21 0f       	add	r18, r17
 e8c:	2a 31       	cpi	r18, 0x1A	; 26
 e8e:	10 f4       	brcc	.+4      	; 0xe94 <strtol+0x1b0>
 e90:	e9 ec       	ldi	r30, 0xC9	; 201
 e92:	05 c0       	rjmp	.+10     	; 0xe9e <strtol+0x1ba>
 e94:	2f e9       	ldi	r18, 0x9F	; 159
 e96:	21 0f       	add	r18, r17
 e98:	2a 31       	cpi	r18, 0x1A	; 26
 e9a:	50 f5       	brcc	.+84     	; 0xef0 <strtol+0x20c>
 e9c:	e9 ea       	ldi	r30, 0xA9	; 169
 e9e:	e1 0f       	add	r30, r17
 ea0:	2e 2f       	mov	r18, r30
 ea2:	30 e0       	ldi	r19, 0x00	; 0
 ea4:	22 15       	cp	r18, r2
 ea6:	33 05       	cpc	r19, r3
 ea8:	1c f5       	brge	.+70     	; 0xef0 <strtol+0x20c>
 eaa:	a7 fd       	sbrc	r26, 7
 eac:	18 c0       	rjmp	.+48     	; 0xede <strtol+0x1fa>
 eae:	46 16       	cp	r4, r22
 eb0:	57 06       	cpc	r5, r23
 eb2:	68 06       	cpc	r6, r24
 eb4:	79 06       	cpc	r7, r25
 eb6:	80 f0       	brcs	.+32     	; 0xed8 <strtol+0x1f4>
 eb8:	29 81       	ldd	r18, Y+1	; 0x01
 eba:	3a 81       	ldd	r19, Y+2	; 0x02
 ebc:	4b 81       	ldd	r20, Y+3	; 0x03
 ebe:	5c 81       	ldd	r21, Y+4	; 0x04
 ec0:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <__mulsi3>
 ec4:	6e 0f       	add	r22, r30
 ec6:	71 1d       	adc	r23, r1
 ec8:	81 1d       	adc	r24, r1
 eca:	91 1d       	adc	r25, r1
 ecc:	61 30       	cpi	r22, 0x01	; 1
 ece:	71 05       	cpc	r23, r1
 ed0:	81 05       	cpc	r24, r1
 ed2:	30 e8       	ldi	r19, 0x80	; 128
 ed4:	93 07       	cpc	r25, r19
 ed6:	10 f0       	brcs	.+4      	; 0xedc <strtol+0x1f8>
 ed8:	af ef       	ldi	r26, 0xFF	; 255
 eda:	01 c0       	rjmp	.+2      	; 0xede <strtol+0x1fa>
 edc:	a1 e0       	ldi	r26, 0x01	; 1
 ede:	f6 01       	movw	r30, r12
 ee0:	14 91       	lpm	r17, Z
 ee2:	e7 fc       	sbrc	r14, 7
 ee4:	10 81       	ld	r17, Z
 ee6:	4f ef       	ldi	r20, 0xFF	; 255
 ee8:	c4 1a       	sub	r12, r20
 eea:	d4 0a       	sbc	r13, r20
 eec:	e4 0a       	sbc	r14, r20
 eee:	c8 cf       	rjmp	.-112    	; 0xe80 <strtol+0x19c>
 ef0:	20 2f       	mov	r18, r16
 ef2:	21 70       	andi	r18, 0x01	; 1
 ef4:	a1 14       	cp	r10, r1
 ef6:	b1 04       	cpc	r11, r1
 ef8:	b1 f0       	breq	.+44     	; 0xf26 <strtol+0x242>
 efa:	aa 23       	and	r26, r26
 efc:	49 f0       	breq	.+18     	; 0xf10 <strtol+0x22c>
 efe:	51 e0       	ldi	r21, 0x01	; 1
 f00:	c5 1a       	sub	r12, r21
 f02:	d1 08       	sbc	r13, r1
 f04:	e1 08       	sbc	r14, r1
 f06:	f5 01       	movw	r30, r10
 f08:	c0 82       	st	Z, r12
 f0a:	d1 82       	std	Z+1, r13	; 0x01
 f0c:	e2 82       	std	Z+2, r14	; 0x02
 f0e:	0b c0       	rjmp	.+22     	; 0xf26 <strtol+0x242>
 f10:	01 ff       	sbrs	r16, 1
 f12:	1d c0       	rjmp	.+58     	; 0xf4e <strtol+0x26a>
 f14:	f2 e0       	ldi	r31, 0x02	; 2
 f16:	cf 1a       	sub	r12, r31
 f18:	d1 08       	sbc	r13, r1
 f1a:	e1 08       	sbc	r14, r1
 f1c:	f5 01       	movw	r30, r10
 f1e:	c0 82       	st	Z, r12
 f20:	d1 82       	std	Z+1, r13	; 0x01
 f22:	e2 82       	std	Z+2, r14	; 0x02
 f24:	14 c0       	rjmp	.+40     	; 0xf4e <strtol+0x26a>
 f26:	a7 ff       	sbrs	r26, 7
 f28:	12 c0       	rjmp	.+36     	; 0xf4e <strtol+0x26a>
 f2a:	22 23       	and	r18, r18
 f2c:	29 f0       	breq	.+10     	; 0xf38 <strtol+0x254>
 f2e:	60 e0       	ldi	r22, 0x00	; 0
 f30:	70 e0       	ldi	r23, 0x00	; 0
 f32:	80 e0       	ldi	r24, 0x00	; 0
 f34:	90 e8       	ldi	r25, 0x80	; 128
 f36:	04 c0       	rjmp	.+8      	; 0xf40 <strtol+0x25c>
 f38:	6f ef       	ldi	r22, 0xFF	; 255
 f3a:	7f ef       	ldi	r23, 0xFF	; 255
 f3c:	8f ef       	ldi	r24, 0xFF	; 255
 f3e:	9f e7       	ldi	r25, 0x7F	; 127
 f40:	22 e2       	ldi	r18, 0x22	; 34
 f42:	30 e0       	ldi	r19, 0x00	; 0
 f44:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <errno+0x1>
 f48:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <errno>
 f4c:	09 c0       	rjmp	.+18     	; 0xf60 <strtol+0x27c>
 f4e:	22 23       	and	r18, r18
 f50:	81 f0       	breq	.+32     	; 0xf72 <strtol+0x28e>
 f52:	90 95       	com	r25
 f54:	80 95       	com	r24
 f56:	70 95       	com	r23
 f58:	61 95       	neg	r22
 f5a:	7f 4f       	sbci	r23, 0xFF	; 255
 f5c:	8f 4f       	sbci	r24, 0xFF	; 255
 f5e:	9f 4f       	sbci	r25, 0xFF	; 255
 f60:	46 2f       	mov	r20, r22
 f62:	37 2f       	mov	r19, r23
 f64:	28 2f       	mov	r18, r24
 f66:	12 c0       	rjmp	.+36     	; 0xf8c <strtol+0x2a8>
 f68:	40 e0       	ldi	r20, 0x00	; 0
 f6a:	30 e0       	ldi	r19, 0x00	; 0
 f6c:	20 e0       	ldi	r18, 0x00	; 0
 f6e:	90 e0       	ldi	r25, 0x00	; 0
 f70:	0d c0       	rjmp	.+26     	; 0xf8c <strtol+0x2a8>
 f72:	97 ff       	sbrs	r25, 7
 f74:	f5 cf       	rjmp	.-22     	; 0xf60 <strtol+0x27c>
 f76:	82 e2       	ldi	r24, 0x22	; 34
 f78:	90 e0       	ldi	r25, 0x00	; 0
 f7a:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <errno+0x1>
 f7e:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <errno>
 f82:	6f ef       	ldi	r22, 0xFF	; 255
 f84:	7f ef       	ldi	r23, 0xFF	; 255
 f86:	8f ef       	ldi	r24, 0xFF	; 255
 f88:	9f e7       	ldi	r25, 0x7F	; 127
 f8a:	ea cf       	rjmp	.-44     	; 0xf60 <strtol+0x27c>
 f8c:	64 2f       	mov	r22, r20
 f8e:	73 2f       	mov	r23, r19
 f90:	82 2f       	mov	r24, r18
 f92:	26 96       	adiw	r28, 0x06	; 6
 f94:	0f b6       	in	r0, 0x3f	; 63
 f96:	f8 94       	cli
 f98:	de bf       	out	0x3e, r29	; 62
 f9a:	0f be       	out	0x3f, r0	; 63
 f9c:	cd bf       	out	0x3d, r28	; 61
 f9e:	df 91       	pop	r29
 fa0:	cf 91       	pop	r28
 fa2:	1f 91       	pop	r17
 fa4:	0f 91       	pop	r16
 fa6:	ef 90       	pop	r14
 fa8:	df 90       	pop	r13
 faa:	cf 90       	pop	r12
 fac:	bf 90       	pop	r11
 fae:	af 90       	pop	r10
 fb0:	8f 90       	pop	r8
 fb2:	7f 90       	pop	r7
 fb4:	6f 90       	pop	r6
 fb6:	5f 90       	pop	r5
 fb8:	4f 90       	pop	r4
 fba:	3f 90       	pop	r3
 fbc:	2f 90       	pop	r2
 fbe:	08 95       	ret

Disassembly of section .text.avrlibc:

00001462 <__ftoa_engine>:
    1462:	28 30       	cpi	r18, 0x08	; 8
    1464:	08 f0       	brcs	.+2      	; 0x1468 <__ftoa_engine+0x6>
    1466:	27 e0       	ldi	r18, 0x07	; 7
    1468:	33 27       	eor	r19, r19
    146a:	da 01       	movw	r26, r20
    146c:	99 0f       	add	r25, r25
    146e:	31 1d       	adc	r19, r1
    1470:	87 fd       	sbrc	r24, 7
    1472:	91 60       	ori	r25, 0x01	; 1
    1474:	00 96       	adiw	r24, 0x00	; 0
    1476:	61 05       	cpc	r22, r1
    1478:	71 05       	cpc	r23, r1
    147a:	39 f4       	brne	.+14     	; 0x148a <__ftoa_engine+0x28>
    147c:	32 60       	ori	r19, 0x02	; 2
    147e:	2e 5f       	subi	r18, 0xFE	; 254
    1480:	3d 93       	st	X+, r19
    1482:	30 e3       	ldi	r19, 0x30	; 48
    1484:	2a 95       	dec	r18
    1486:	e1 f7       	brne	.-8      	; 0x1480 <__ftoa_engine+0x1e>
    1488:	08 95       	ret
    148a:	9f 3f       	cpi	r25, 0xFF	; 255
    148c:	30 f0       	brcs	.+12     	; 0x149a <__ftoa_engine+0x38>
    148e:	80 38       	cpi	r24, 0x80	; 128
    1490:	71 05       	cpc	r23, r1
    1492:	61 05       	cpc	r22, r1
    1494:	09 f0       	breq	.+2      	; 0x1498 <__ftoa_engine+0x36>
    1496:	3c 5f       	subi	r19, 0xFC	; 252
    1498:	3c 5f       	subi	r19, 0xFC	; 252
    149a:	3d 93       	st	X+, r19
    149c:	91 30       	cpi	r25, 0x01	; 1
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <__ftoa_engine+0x40>
    14a0:	80 68       	ori	r24, 0x80	; 128
    14a2:	91 1d       	adc	r25, r1
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	1f 93       	push	r17
    14aa:	0f 93       	push	r16
    14ac:	ff 92       	push	r15
    14ae:	ef 92       	push	r14
    14b0:	19 2f       	mov	r17, r25
    14b2:	98 7f       	andi	r25, 0xF8	; 248
    14b4:	96 95       	lsr	r25
    14b6:	e9 2f       	mov	r30, r25
    14b8:	96 95       	lsr	r25
    14ba:	96 95       	lsr	r25
    14bc:	e9 0f       	add	r30, r25
    14be:	ff 27       	eor	r31, r31
    14c0:	e0 50       	subi	r30, 0x00	; 0
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	99 27       	eor	r25, r25
    14c6:	33 27       	eor	r19, r19
    14c8:	ee 24       	eor	r14, r14
    14ca:	ff 24       	eor	r15, r15
    14cc:	a7 01       	movw	r20, r14
    14ce:	e7 01       	movw	r28, r14
    14d0:	05 90       	lpm	r0, Z+
    14d2:	08 94       	sec
    14d4:	07 94       	ror	r0
    14d6:	28 f4       	brcc	.+10     	; 0x14e2 <__ftoa_engine+0x80>
    14d8:	36 0f       	add	r19, r22
    14da:	e7 1e       	adc	r14, r23
    14dc:	f8 1e       	adc	r15, r24
    14de:	49 1f       	adc	r20, r25
    14e0:	51 1d       	adc	r21, r1
    14e2:	66 0f       	add	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	88 1f       	adc	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	06 94       	lsr	r0
    14ec:	a1 f7       	brne	.-24     	; 0x14d6 <__ftoa_engine+0x74>
    14ee:	05 90       	lpm	r0, Z+
    14f0:	07 94       	ror	r0
    14f2:	28 f4       	brcc	.+10     	; 0x14fe <__ftoa_engine+0x9c>
    14f4:	e7 0e       	add	r14, r23
    14f6:	f8 1e       	adc	r15, r24
    14f8:	49 1f       	adc	r20, r25
    14fa:	56 1f       	adc	r21, r22
    14fc:	c1 1d       	adc	r28, r1
    14fe:	77 0f       	add	r23, r23
    1500:	88 1f       	adc	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	66 1f       	adc	r22, r22
    1506:	06 94       	lsr	r0
    1508:	a1 f7       	brne	.-24     	; 0x14f2 <__ftoa_engine+0x90>
    150a:	05 90       	lpm	r0, Z+
    150c:	07 94       	ror	r0
    150e:	28 f4       	brcc	.+10     	; 0x151a <__ftoa_engine+0xb8>
    1510:	f8 0e       	add	r15, r24
    1512:	49 1f       	adc	r20, r25
    1514:	56 1f       	adc	r21, r22
    1516:	c7 1f       	adc	r28, r23
    1518:	d1 1d       	adc	r29, r1
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	66 1f       	adc	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	06 94       	lsr	r0
    1524:	a1 f7       	brne	.-24     	; 0x150e <__ftoa_engine+0xac>
    1526:	05 90       	lpm	r0, Z+
    1528:	07 94       	ror	r0
    152a:	20 f4       	brcc	.+8      	; 0x1534 <__ftoa_engine+0xd2>
    152c:	49 0f       	add	r20, r25
    152e:	56 1f       	adc	r21, r22
    1530:	c7 1f       	adc	r28, r23
    1532:	d8 1f       	adc	r29, r24
    1534:	99 0f       	add	r25, r25
    1536:	66 1f       	adc	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	06 94       	lsr	r0
    153e:	a9 f7       	brne	.-22     	; 0x152a <__ftoa_engine+0xc8>
    1540:	84 91       	lpm	r24, Z
    1542:	10 95       	com	r17
    1544:	17 70       	andi	r17, 0x07	; 7
    1546:	41 f0       	breq	.+16     	; 0x1558 <__ftoa_engine+0xf6>
    1548:	d6 95       	lsr	r29
    154a:	c7 95       	ror	r28
    154c:	57 95       	ror	r21
    154e:	47 95       	ror	r20
    1550:	f7 94       	ror	r15
    1552:	e7 94       	ror	r14
    1554:	1a 95       	dec	r17
    1556:	c1 f7       	brne	.-16     	; 0x1548 <__ftoa_engine+0xe6>
    1558:	e6 ea       	ldi	r30, 0xA6	; 166
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	68 94       	set
    155e:	15 90       	lpm	r1, Z+
    1560:	15 91       	lpm	r17, Z+
    1562:	35 91       	lpm	r19, Z+
    1564:	65 91       	lpm	r22, Z+
    1566:	95 91       	lpm	r25, Z+
    1568:	05 90       	lpm	r0, Z+
    156a:	7f e2       	ldi	r23, 0x2F	; 47
    156c:	73 95       	inc	r23
    156e:	e1 18       	sub	r14, r1
    1570:	f1 0a       	sbc	r15, r17
    1572:	43 0b       	sbc	r20, r19
    1574:	56 0b       	sbc	r21, r22
    1576:	c9 0b       	sbc	r28, r25
    1578:	d0 09       	sbc	r29, r0
    157a:	c0 f7       	brcc	.-16     	; 0x156c <__ftoa_engine+0x10a>
    157c:	e1 0c       	add	r14, r1
    157e:	f1 1e       	adc	r15, r17
    1580:	43 1f       	adc	r20, r19
    1582:	56 1f       	adc	r21, r22
    1584:	c9 1f       	adc	r28, r25
    1586:	d0 1d       	adc	r29, r0
    1588:	7e f4       	brtc	.+30     	; 0x15a8 <__ftoa_engine+0x146>
    158a:	70 33       	cpi	r23, 0x30	; 48
    158c:	11 f4       	brne	.+4      	; 0x1592 <__ftoa_engine+0x130>
    158e:	8a 95       	dec	r24
    1590:	e6 cf       	rjmp	.-52     	; 0x155e <__ftoa_engine+0xfc>
    1592:	e8 94       	clt
    1594:	01 50       	subi	r16, 0x01	; 1
    1596:	30 f0       	brcs	.+12     	; 0x15a4 <__ftoa_engine+0x142>
    1598:	08 0f       	add	r16, r24
    159a:	0a f4       	brpl	.+2      	; 0x159e <__ftoa_engine+0x13c>
    159c:	00 27       	eor	r16, r16
    159e:	02 17       	cp	r16, r18
    15a0:	08 f4       	brcc	.+2      	; 0x15a4 <__ftoa_engine+0x142>
    15a2:	20 2f       	mov	r18, r16
    15a4:	23 95       	inc	r18
    15a6:	02 2f       	mov	r16, r18
    15a8:	7a 33       	cpi	r23, 0x3A	; 58
    15aa:	28 f0       	brcs	.+10     	; 0x15b6 <__ftoa_engine+0x154>
    15ac:	79 e3       	ldi	r23, 0x39	; 57
    15ae:	7d 93       	st	X+, r23
    15b0:	2a 95       	dec	r18
    15b2:	e9 f7       	brne	.-6      	; 0x15ae <__ftoa_engine+0x14c>
    15b4:	10 c0       	rjmp	.+32     	; 0x15d6 <__ftoa_engine+0x174>
    15b6:	7d 93       	st	X+, r23
    15b8:	2a 95       	dec	r18
    15ba:	89 f6       	brne	.-94     	; 0x155e <__ftoa_engine+0xfc>
    15bc:	06 94       	lsr	r0
    15be:	97 95       	ror	r25
    15c0:	67 95       	ror	r22
    15c2:	37 95       	ror	r19
    15c4:	17 95       	ror	r17
    15c6:	17 94       	ror	r1
    15c8:	e1 18       	sub	r14, r1
    15ca:	f1 0a       	sbc	r15, r17
    15cc:	43 0b       	sbc	r20, r19
    15ce:	56 0b       	sbc	r21, r22
    15d0:	c9 0b       	sbc	r28, r25
    15d2:	d0 09       	sbc	r29, r0
    15d4:	98 f0       	brcs	.+38     	; 0x15fc <__ftoa_engine+0x19a>
    15d6:	23 95       	inc	r18
    15d8:	7e 91       	ld	r23, -X
    15da:	73 95       	inc	r23
    15dc:	7a 33       	cpi	r23, 0x3A	; 58
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <__ftoa_engine+0x180>
    15e0:	70 e3       	ldi	r23, 0x30	; 48
    15e2:	7c 93       	st	X, r23
    15e4:	20 13       	cpse	r18, r16
    15e6:	b8 f7       	brcc	.-18     	; 0x15d6 <__ftoa_engine+0x174>
    15e8:	7e 91       	ld	r23, -X
    15ea:	70 61       	ori	r23, 0x10	; 16
    15ec:	7d 93       	st	X+, r23
    15ee:	30 f0       	brcs	.+12     	; 0x15fc <__ftoa_engine+0x19a>
    15f0:	83 95       	inc	r24
    15f2:	71 e3       	ldi	r23, 0x31	; 49
    15f4:	7d 93       	st	X+, r23
    15f6:	70 e3       	ldi	r23, 0x30	; 48
    15f8:	2a 95       	dec	r18
    15fa:	e1 f7       	brne	.-8      	; 0x15f4 <__ftoa_engine+0x192>
    15fc:	11 24       	eor	r1, r1
    15fe:	ef 90       	pop	r14
    1600:	ff 90       	pop	r15
    1602:	0f 91       	pop	r16
    1604:	1f 91       	pop	r17
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	99 27       	eor	r25, r25
    160c:	87 fd       	sbrc	r24, 7
    160e:	90 95       	com	r25
    1610:	08 95       	ret

Disassembly of section .text.avrlibc:

00003f3e <isspace>:
    3f3e:	91 11       	cpse	r25, r1
    3f40:	0c 94 c5 20 	jmp	0x418a	; 0x418a <__ctype_isfalse>
    3f44:	80 32       	cpi	r24, 0x20	; 32
    3f46:	19 f0       	breq	.+6      	; 0x3f4e <isspace+0x10>
    3f48:	89 50       	subi	r24, 0x09	; 9
    3f4a:	85 50       	subi	r24, 0x05	; 5
    3f4c:	c8 f7       	brcc	.-14     	; 0x3f40 <isspace+0x2>
    3f4e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003978 <memcpy>:
    3978:	cf 92       	push	r12
    397a:	df 92       	push	r13
    397c:	ef 92       	push	r14
    397e:	dc 01       	movw	r26, r24
    3980:	6a 01       	movw	r12, r20
    3982:	e6 2e       	mov	r14, r22
    3984:	28 0f       	add	r18, r24
    3986:	39 1f       	adc	r19, r25
    3988:	a2 17       	cp	r26, r18
    398a:	b3 07       	cpc	r27, r19
    398c:	51 f0       	breq	.+20     	; 0x39a2 <memcpy+0x2a>
    398e:	f6 01       	movw	r30, r12
    3990:	44 91       	lpm	r20, Z
    3992:	e7 fc       	sbrc	r14, 7
    3994:	40 81       	ld	r20, Z
    3996:	4d 93       	st	X+, r20
    3998:	4f ef       	ldi	r20, 0xFF	; 255
    399a:	c4 1a       	sub	r12, r20
    399c:	d4 0a       	sbc	r13, r20
    399e:	e4 0a       	sbc	r14, r20
    39a0:	f3 cf       	rjmp	.-26     	; 0x3988 <memcpy+0x10>
    39a2:	ef 90       	pop	r14
    39a4:	df 90       	pop	r13
    39a6:	cf 90       	pop	r12
    39a8:	08 95       	ret

Disassembly of section .text.avrlibc:

00003ac6 <strcat>:
    3ac6:	9a 01       	movw	r18, r20
    3ac8:	46 2f       	mov	r20, r22
    3aca:	dc 01       	movw	r26, r24
    3acc:	bd 01       	movw	r22, r26
    3ace:	6f 5f       	subi	r22, 0xFF	; 255
    3ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad2:	5c 91       	ld	r21, X
    3ad4:	55 23       	and	r21, r21
    3ad6:	11 f0       	breq	.+4      	; 0x3adc <strcat+0x16>
    3ad8:	db 01       	movw	r26, r22
    3ada:	f8 cf       	rjmp	.-16     	; 0x3acc <strcat+0x6>
    3adc:	f9 01       	movw	r30, r18
    3ade:	54 91       	lpm	r21, Z
    3ae0:	47 fd       	sbrc	r20, 7
    3ae2:	50 81       	ld	r21, Z
    3ae4:	5d 93       	st	X+, r21
    3ae6:	55 23       	and	r21, r21
    3ae8:	21 f0       	breq	.+8      	; 0x3af2 <strcat+0x2c>
    3aea:	2f 5f       	subi	r18, 0xFF	; 255
    3aec:	3f 4f       	sbci	r19, 0xFF	; 255
    3aee:	4f 4f       	sbci	r20, 0xFF	; 255
    3af0:	f5 cf       	rjmp	.-22     	; 0x3adc <strcat+0x16>
    3af2:	08 95       	ret

Disassembly of section .text.avrlibc:

000035fa <strcmp>:
    35fa:	cf 92       	push	r12
    35fc:	df 92       	push	r13
    35fe:	ef 92       	push	r14
    3600:	6b 01       	movw	r12, r22
    3602:	e8 2e       	mov	r14, r24
    3604:	f6 01       	movw	r30, r12
    3606:	84 91       	lpm	r24, Z
    3608:	e7 fc       	sbrc	r14, 7
    360a:	80 81       	ld	r24, Z
    360c:	f9 01       	movw	r30, r18
    360e:	54 91       	lpm	r21, Z
    3610:	47 fd       	sbrc	r20, 7
    3612:	50 81       	ld	r21, Z
    3614:	85 13       	cpse	r24, r21
    3616:	0b c0       	rjmp	.+22     	; 0x362e <strcmp+0x34>
    3618:	88 23       	and	r24, r24
    361a:	41 f0       	breq	.+16     	; 0x362c <strcmp+0x32>
    361c:	8f ef       	ldi	r24, 0xFF	; 255
    361e:	c8 1a       	sub	r12, r24
    3620:	d8 0a       	sbc	r13, r24
    3622:	e8 0a       	sbc	r14, r24
    3624:	2f 5f       	subi	r18, 0xFF	; 255
    3626:	3f 4f       	sbci	r19, 0xFF	; 255
    3628:	4f 4f       	sbci	r20, 0xFF	; 255
    362a:	ec cf       	rjmp	.-40     	; 0x3604 <strcmp+0xa>
    362c:	58 2f       	mov	r21, r24
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	85 1b       	sub	r24, r21
    3632:	91 09       	sbc	r25, r1
    3634:	ef 90       	pop	r14
    3636:	df 90       	pop	r13
    3638:	cf 90       	pop	r12
    363a:	08 95       	ret

Disassembly of section .text.avrlibc:

00002cbe <strncmp>:
    2cbe:	cf 92       	push	r12
    2cc0:	df 92       	push	r13
    2cc2:	ef 92       	push	r14
    2cc4:	0f 93       	push	r16
    2cc6:	1f 93       	push	r17
    2cc8:	6b 01       	movw	r12, r22
    2cca:	e8 2e       	mov	r14, r24
    2ccc:	01 15       	cp	r16, r1
    2cce:	11 05       	cpc	r17, r1
    2cd0:	19 f1       	breq	.+70     	; 0x2d18 <strncmp+0x5a>
    2cd2:	01 50       	subi	r16, 0x01	; 1
    2cd4:	11 09       	sbc	r17, r1
    2cd6:	f6 01       	movw	r30, r12
    2cd8:	84 91       	lpm	r24, Z
    2cda:	e7 fc       	sbrc	r14, 7
    2cdc:	80 81       	ld	r24, Z
    2cde:	88 23       	and	r24, r24
    2ce0:	99 f0       	breq	.+38     	; 0x2d08 <strncmp+0x4a>
    2ce2:	f9 01       	movw	r30, r18
    2ce4:	94 91       	lpm	r25, Z
    2ce6:	47 fd       	sbrc	r20, 7
    2ce8:	90 81       	ld	r25, Z
    2cea:	99 23       	and	r25, r25
    2cec:	69 f0       	breq	.+26     	; 0x2d08 <strncmp+0x4a>
    2cee:	01 15       	cp	r16, r1
    2cf0:	11 05       	cpc	r17, r1
    2cf2:	51 f0       	breq	.+20     	; 0x2d08 <strncmp+0x4a>
    2cf4:	89 13       	cpse	r24, r25
    2cf6:	08 c0       	rjmp	.+16     	; 0x2d08 <strncmp+0x4a>
    2cf8:	8f ef       	ldi	r24, 0xFF	; 255
    2cfa:	c8 1a       	sub	r12, r24
    2cfc:	d8 0a       	sbc	r13, r24
    2cfe:	e8 0a       	sbc	r14, r24
    2d00:	2f 5f       	subi	r18, 0xFF	; 255
    2d02:	3f 4f       	sbci	r19, 0xFF	; 255
    2d04:	4f 4f       	sbci	r20, 0xFF	; 255
    2d06:	e5 cf       	rjmp	.-54     	; 0x2cd2 <strncmp+0x14>
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	f9 01       	movw	r30, r18
    2d0c:	24 91       	lpm	r18, Z
    2d0e:	47 fd       	sbrc	r20, 7
    2d10:	20 81       	ld	r18, Z
    2d12:	82 1b       	sub	r24, r18
    2d14:	91 09       	sbc	r25, r1
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <strncmp+0x5e>
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	ef 90       	pop	r14
    2d22:	df 90       	pop	r13
    2d24:	cf 90       	pop	r12
    2d26:	08 95       	ret

Disassembly of section .text.avrlibc:

00003af4 <strlen>:
    3af4:	cf 92       	push	r12
    3af6:	df 92       	push	r13
    3af8:	ef 92       	push	r14
    3afa:	6b 01       	movw	r12, r22
    3afc:	e8 2e       	mov	r14, r24
    3afe:	a8 2f       	mov	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	fc 01       	movw	r30, r24
    3b04:	24 91       	lpm	r18, Z
    3b06:	a7 fd       	sbrc	r26, 7
    3b08:	20 81       	ld	r18, Z
    3b0a:	22 23       	and	r18, r18
    3b0c:	19 f0       	breq	.+6      	; 0x3b14 <strlen+0x20>
    3b0e:	01 96       	adiw	r24, 0x01	; 1
    3b10:	a1 1d       	adc	r26, r1
    3b12:	f7 cf       	rjmp	.-18     	; 0x3b02 <strlen+0xe>
    3b14:	8c 19       	sub	r24, r12
    3b16:	9d 09       	sbc	r25, r13
    3b18:	ef 90       	pop	r14
    3b1a:	df 90       	pop	r13
    3b1c:	cf 90       	pop	r12
    3b1e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003d70 <strcpy>:
    3d70:	9a 01       	movw	r18, r20
    3d72:	46 2f       	mov	r20, r22
    3d74:	dc 01       	movw	r26, r24
    3d76:	f9 01       	movw	r30, r18
    3d78:	54 91       	lpm	r21, Z
    3d7a:	47 fd       	sbrc	r20, 7
    3d7c:	50 81       	ld	r21, Z
    3d7e:	5d 93       	st	X+, r21
    3d80:	55 23       	and	r21, r21
    3d82:	21 f0       	breq	.+8      	; 0x3d8c <strcpy+0x1c>
    3d84:	2f 5f       	subi	r18, 0xFF	; 255
    3d86:	3f 4f       	sbci	r19, 0xFF	; 255
    3d88:	4f 4f       	sbci	r20, 0xFF	; 255
    3d8a:	f5 cf       	rjmp	.-22     	; 0x3d76 <strcpy+0x6>
    3d8c:	08 95       	ret

Disassembly of section .text.avrlibc:

00003876 <strnlen>:
    3876:	cf 92       	push	r12
    3878:	df 92       	push	r13
    387a:	ef 92       	push	r14
    387c:	6b 01       	movw	r12, r22
    387e:	e8 2e       	mov	r14, r24
    3880:	a8 2f       	mov	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	41 15       	cp	r20, r1
    3886:	51 05       	cpc	r21, r1
    3888:	31 f4       	brne	.+12     	; 0x3896 <strnlen+0x20>
    388a:	8c 19       	sub	r24, r12
    388c:	9d 09       	sbc	r25, r13
    388e:	ef 90       	pop	r14
    3890:	df 90       	pop	r13
    3892:	cf 90       	pop	r12
    3894:	08 95       	ret
    3896:	fc 01       	movw	r30, r24
    3898:	24 91       	lpm	r18, Z
    389a:	a7 fd       	sbrc	r26, 7
    389c:	20 81       	ld	r18, Z
    389e:	22 23       	and	r18, r18
    38a0:	a1 f3       	breq	.-24     	; 0x388a <strnlen+0x14>
    38a2:	01 96       	adiw	r24, 0x01	; 1
    38a4:	a1 1d       	adc	r26, r1
    38a6:	41 50       	subi	r20, 0x01	; 1
    38a8:	51 09       	sbc	r21, r1
    38aa:	ec cf       	rjmp	.-40     	; 0x3884 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00002a88 <fputc>:
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	fb 01       	movw	r30, r22
    2a92:	24 81       	ldd	r18, Z+4	; 0x04
    2a94:	21 fd       	sbrc	r18, 1
    2a96:	03 c0       	rjmp	.+6      	; 0x2a9e <fputc+0x16>
    2a98:	8f ef       	ldi	r24, 0xFF	; 255
    2a9a:	9f ef       	ldi	r25, 0xFF	; 255
    2a9c:	2c c0       	rjmp	.+88     	; 0x2af6 <fputc+0x6e>
    2a9e:	22 ff       	sbrs	r18, 2
    2aa0:	16 c0       	rjmp	.+44     	; 0x2ace <fputc+0x46>
    2aa2:	47 81       	ldd	r20, Z+7	; 0x07
    2aa4:	50 85       	ldd	r21, Z+8	; 0x08
    2aa6:	25 81       	ldd	r18, Z+5	; 0x05
    2aa8:	36 81       	ldd	r19, Z+6	; 0x06
    2aaa:	42 17       	cp	r20, r18
    2aac:	53 07       	cpc	r21, r19
    2aae:	44 f4       	brge	.+16     	; 0x2ac0 <fputc+0x38>
    2ab0:	a0 81       	ld	r26, Z
    2ab2:	b1 81       	ldd	r27, Z+1	; 0x01
    2ab4:	9d 01       	movw	r18, r26
    2ab6:	2f 5f       	subi	r18, 0xFF	; 255
    2ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aba:	31 83       	std	Z+1, r19	; 0x01
    2abc:	20 83       	st	Z, r18
    2abe:	8c 93       	st	X, r24
    2ac0:	27 81       	ldd	r18, Z+7	; 0x07
    2ac2:	30 85       	ldd	r19, Z+8	; 0x08
    2ac4:	2f 5f       	subi	r18, 0xFF	; 255
    2ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac8:	30 87       	std	Z+8, r19	; 0x08
    2aca:	27 83       	std	Z+7, r18	; 0x07
    2acc:	14 c0       	rjmp	.+40     	; 0x2af6 <fputc+0x6e>
    2ace:	8b 01       	movw	r16, r22
    2ad0:	ec 01       	movw	r28, r24
    2ad2:	fb 01       	movw	r30, r22
    2ad4:	01 84       	ldd	r0, Z+9	; 0x09
    2ad6:	f2 85       	ldd	r31, Z+10	; 0x0a
    2ad8:	e0 2d       	mov	r30, r0
    2ada:	09 95       	icall
    2adc:	89 2b       	or	r24, r25
    2ade:	e1 f6       	brne	.-72     	; 0x2a98 <fputc+0x10>
    2ae0:	d8 01       	movw	r26, r16
    2ae2:	17 96       	adiw	r26, 0x07	; 7
    2ae4:	8d 91       	ld	r24, X+
    2ae6:	9c 91       	ld	r25, X
    2ae8:	18 97       	sbiw	r26, 0x08	; 8
    2aea:	01 96       	adiw	r24, 0x01	; 1
    2aec:	18 96       	adiw	r26, 0x08	; 8
    2aee:	9c 93       	st	X, r25
    2af0:	8e 93       	st	-X, r24
    2af2:	17 97       	sbiw	r26, 0x07	; 7
    2af4:	ce 01       	movw	r24, r28
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	08 95       	ret

Disassembly of section .text.avrlibc:

000034a6 <sprintf>:
    34a6:	af e0       	ldi	r26, 0x0F	; 15
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	e9 e5       	ldi	r30, 0x59	; 89
    34ac:	fa e1       	ldi	r31, 0x1A	; 26
    34ae:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__prologue_saves__+0x1c>
    34b2:	0e 89       	ldd	r16, Y+22	; 0x16
    34b4:	1f 89       	ldd	r17, Y+23	; 0x17
    34b6:	86 e0       	ldi	r24, 0x06	; 6
    34b8:	8d 83       	std	Y+5, r24	; 0x05
    34ba:	1a 83       	std	Y+2, r17	; 0x02
    34bc:	09 83       	std	Y+1, r16	; 0x01
    34be:	8f ef       	ldi	r24, 0xFF	; 255
    34c0:	9f e7       	ldi	r25, 0x7F	; 127
    34c2:	9f 83       	std	Y+7, r25	; 0x07
    34c4:	8e 83       	std	Y+6, r24	; 0x06
    34c6:	9e 01       	movw	r18, r28
    34c8:	25 5e       	subi	r18, 0xE5	; 229
    34ca:	3f 4f       	sbci	r19, 0xFF	; 255
    34cc:	48 8d       	ldd	r20, Y+24	; 0x18
    34ce:	59 8d       	ldd	r21, Y+25	; 0x19
    34d0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    34d2:	ce 01       	movw	r24, r28
    34d4:	01 96       	adiw	r24, 0x01	; 1
    34d6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vfprintf>
    34da:	e8 85       	ldd	r30, Y+8	; 0x08
    34dc:	f9 85       	ldd	r31, Y+9	; 0x09
    34de:	e0 0f       	add	r30, r16
    34e0:	f1 1f       	adc	r31, r17
    34e2:	10 82       	st	Z, r1
    34e4:	2f 96       	adiw	r28, 0x0f	; 15
    34e6:	e4 e0       	ldi	r30, 0x04	; 4
    34e8:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00002294 <__ultoa_invert>:
    2294:	fa 01       	movw	r30, r20
    2296:	aa 27       	eor	r26, r26
    2298:	28 30       	cpi	r18, 0x08	; 8
    229a:	51 f1       	breq	.+84     	; 0x22f0 <__ultoa_invert+0x5c>
    229c:	20 31       	cpi	r18, 0x10	; 16
    229e:	81 f1       	breq	.+96     	; 0x2300 <__ultoa_invert+0x6c>
    22a0:	e8 94       	clt
    22a2:	6f 93       	push	r22
    22a4:	6e 7f       	andi	r22, 0xFE	; 254
    22a6:	6e 5f       	subi	r22, 0xFE	; 254
    22a8:	7f 4f       	sbci	r23, 0xFF	; 255
    22aa:	8f 4f       	sbci	r24, 0xFF	; 255
    22ac:	9f 4f       	sbci	r25, 0xFF	; 255
    22ae:	af 4f       	sbci	r26, 0xFF	; 255
    22b0:	b1 e0       	ldi	r27, 0x01	; 1
    22b2:	3e d0       	rcall	.+124    	; 0x2330 <__ultoa_invert+0x9c>
    22b4:	b4 e0       	ldi	r27, 0x04	; 4
    22b6:	3c d0       	rcall	.+120    	; 0x2330 <__ultoa_invert+0x9c>
    22b8:	67 0f       	add	r22, r23
    22ba:	78 1f       	adc	r23, r24
    22bc:	89 1f       	adc	r24, r25
    22be:	9a 1f       	adc	r25, r26
    22c0:	a1 1d       	adc	r26, r1
    22c2:	68 0f       	add	r22, r24
    22c4:	79 1f       	adc	r23, r25
    22c6:	8a 1f       	adc	r24, r26
    22c8:	91 1d       	adc	r25, r1
    22ca:	a1 1d       	adc	r26, r1
    22cc:	6a 0f       	add	r22, r26
    22ce:	71 1d       	adc	r23, r1
    22d0:	81 1d       	adc	r24, r1
    22d2:	91 1d       	adc	r25, r1
    22d4:	a1 1d       	adc	r26, r1
    22d6:	20 d0       	rcall	.+64     	; 0x2318 <__ultoa_invert+0x84>
    22d8:	09 f4       	brne	.+2      	; 0x22dc <__ultoa_invert+0x48>
    22da:	68 94       	set
    22dc:	3f 91       	pop	r19
    22de:	2a e0       	ldi	r18, 0x0A	; 10
    22e0:	26 9f       	mul	r18, r22
    22e2:	11 24       	eor	r1, r1
    22e4:	30 19       	sub	r19, r0
    22e6:	30 5d       	subi	r19, 0xD0	; 208
    22e8:	31 93       	st	Z+, r19
    22ea:	de f6       	brtc	.-74     	; 0x22a2 <__ultoa_invert+0xe>
    22ec:	cf 01       	movw	r24, r30
    22ee:	08 95       	ret
    22f0:	46 2f       	mov	r20, r22
    22f2:	47 70       	andi	r20, 0x07	; 7
    22f4:	40 5d       	subi	r20, 0xD0	; 208
    22f6:	41 93       	st	Z+, r20
    22f8:	b3 e0       	ldi	r27, 0x03	; 3
    22fa:	0f d0       	rcall	.+30     	; 0x231a <__ultoa_invert+0x86>
    22fc:	c9 f7       	brne	.-14     	; 0x22f0 <__ultoa_invert+0x5c>
    22fe:	f6 cf       	rjmp	.-20     	; 0x22ec <__ultoa_invert+0x58>
    2300:	46 2f       	mov	r20, r22
    2302:	4f 70       	andi	r20, 0x0F	; 15
    2304:	40 5d       	subi	r20, 0xD0	; 208
    2306:	4a 33       	cpi	r20, 0x3A	; 58
    2308:	18 f0       	brcs	.+6      	; 0x2310 <__ultoa_invert+0x7c>
    230a:	49 5d       	subi	r20, 0xD9	; 217
    230c:	31 fd       	sbrc	r19, 1
    230e:	40 52       	subi	r20, 0x20	; 32
    2310:	41 93       	st	Z+, r20
    2312:	02 d0       	rcall	.+4      	; 0x2318 <__ultoa_invert+0x84>
    2314:	a9 f7       	brne	.-22     	; 0x2300 <__ultoa_invert+0x6c>
    2316:	ea cf       	rjmp	.-44     	; 0x22ec <__ultoa_invert+0x58>
    2318:	b4 e0       	ldi	r27, 0x04	; 4
    231a:	a6 95       	lsr	r26
    231c:	97 95       	ror	r25
    231e:	87 95       	ror	r24
    2320:	77 95       	ror	r23
    2322:	67 95       	ror	r22
    2324:	ba 95       	dec	r27
    2326:	c9 f7       	brne	.-14     	; 0x231a <__ultoa_invert+0x86>
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	61 05       	cpc	r22, r1
    232c:	71 05       	cpc	r23, r1
    232e:	08 95       	ret
    2330:	9b 01       	movw	r18, r22
    2332:	ac 01       	movw	r20, r24
    2334:	0a 2e       	mov	r0, r26
    2336:	06 94       	lsr	r0
    2338:	57 95       	ror	r21
    233a:	47 95       	ror	r20
    233c:	37 95       	ror	r19
    233e:	27 95       	ror	r18
    2340:	ba 95       	dec	r27
    2342:	c9 f7       	brne	.-14     	; 0x2336 <__ultoa_invert+0xa2>
    2344:	62 0f       	add	r22, r18
    2346:	73 1f       	adc	r23, r19
    2348:	84 1f       	adc	r24, r20
    234a:	95 1f       	adc	r25, r21
    234c:	a0 1d       	adc	r26, r0
    234e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000418a <__ctype_isfalse>:
    418a:	99 27       	eor	r25, r25
    418c:	88 27       	eor	r24, r24

0000418e <__ctype_istrue>:
    418e:	08 95       	ret

Disassembly of section .text.avrlibc:

00003c0a <eeprom_read_block>:
    3c0a:	ba 01       	movw	r22, r20
    3c0c:	a9 01       	movw	r20, r18
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22

00003c12 <eeprom_read_blraw>:
    3c12:	fc 01       	movw	r30, r24
    3c14:	f9 99       	sbic	0x1f, 1	; 31
    3c16:	fe cf       	rjmp	.-4      	; 0x3c14 <eeprom_read_blraw+0x2>
    3c18:	06 c0       	rjmp	.+12     	; 0x3c26 <eeprom_read_blraw+0x14>
    3c1a:	f2 bd       	out	0x22, r31	; 34
    3c1c:	e1 bd       	out	0x21, r30	; 33
    3c1e:	f8 9a       	sbi	0x1f, 0	; 31
    3c20:	31 96       	adiw	r30, 0x01	; 1
    3c22:	00 b4       	in	r0, 0x20	; 32
    3c24:	0d 92       	st	X+, r0
    3c26:	41 50       	subi	r20, 0x01	; 1
    3c28:	50 40       	sbci	r21, 0x00	; 0
    3c2a:	b8 f7       	brcc	.-18     	; 0x3c1a <eeprom_read_blraw+0x8>
    3c2c:	08 95       	ret

Disassembly of section .text.avrlibc:

00003f50 <eeprom_read_byte>:
    3f50:	cb 01       	movw	r24, r22
    3f52:	f9 99       	sbic	0x1f, 1	; 31
    3f54:	fe cf       	rjmp	.-4      	; 0x3f52 <eeprom_read_byte+0x2>
    3f56:	92 bd       	out	0x22, r25	; 34
    3f58:	81 bd       	out	0x21, r24	; 33
    3f5a:	f8 9a       	sbi	0x1f, 0	; 31
    3f5c:	99 27       	eor	r25, r25
    3f5e:	80 b5       	in	r24, 0x20	; 32
    3f60:	08 95       	ret

Disassembly of section .text.avrlibc:

00004070 <eeprom_read_dword>:
    4070:	cb 01       	movw	r24, r22
    4072:	a6 e1       	ldi	r26, 0x16	; 22
    4074:	b0 e0       	ldi	r27, 0x00	; 0
    4076:	44 e0       	ldi	r20, 0x04	; 4
    4078:	50 e0       	ldi	r21, 0x00	; 0
    407a:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000407e <eeprom_read_word>:
    407e:	cb 01       	movw	r24, r22
    4080:	a8 e1       	ldi	r26, 0x18	; 24
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	42 e0       	ldi	r20, 0x02	; 2
    4086:	50 e0       	ldi	r21, 0x00	; 0
    4088:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00003530 <eeprom_update_block>:
    3530:	cf 92       	push	r12
    3532:	df 92       	push	r13
    3534:	ef 92       	push	r14
    3536:	21 50       	subi	r18, 0x01	; 1
    3538:	31 09       	sbc	r19, r1
    353a:	c0 f0       	brcs	.+48     	; 0x356c <eeprom_update_block+0x3c>
    353c:	6b 01       	movw	r12, r22
    353e:	e8 2e       	mov	r14, r24
    3540:	c2 0e       	add	r12, r18
    3542:	d3 1e       	adc	r13, r19
    3544:	e1 1c       	adc	r14, r1
    3546:	ca 01       	movw	r24, r20
    3548:	82 0f       	add	r24, r18
    354a:	93 1f       	adc	r25, r19
    354c:	42 2f       	mov	r20, r18
    354e:	73 2f       	mov	r23, r19
    3550:	f6 01       	movw	r30, r12
    3552:	5e 2d       	mov	r21, r14
    3554:	0e 94 9c 20 	call	0x4138	; 0x4138 <__xload_1>
    3558:	26 2f       	mov	r18, r22
    355a:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <eeprom_update_r18>
    355e:	31 e0       	ldi	r19, 0x01	; 1
    3560:	c3 1a       	sub	r12, r19
    3562:	d1 08       	sbc	r13, r1
    3564:	e1 08       	sbc	r14, r1
    3566:	41 50       	subi	r20, 0x01	; 1
    3568:	70 40       	sbci	r23, 0x00	; 0
    356a:	90 f7       	brcc	.-28     	; 0x3550 <eeprom_update_block+0x20>
    356c:	ef 90       	pop	r14
    356e:	df 90       	pop	r13
    3570:	cf 90       	pop	r12
    3572:	08 95       	ret

Disassembly of section .text.avrlibc:

00003c2e <eeprom_update_byte>:
    3c2e:	26 2f       	mov	r18, r22

00003c30 <eeprom_update_r18>:
    3c30:	f9 99       	sbic	0x1f, 1	; 31
    3c32:	fe cf       	rjmp	.-4      	; 0x3c30 <eeprom_update_r18>
    3c34:	92 bd       	out	0x22, r25	; 34
    3c36:	81 bd       	out	0x21, r24	; 33
    3c38:	f8 9a       	sbi	0x1f, 0	; 31
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	00 b4       	in	r0, 0x20	; 32
    3c3e:	02 16       	cp	r0, r18
    3c40:	39 f0       	breq	.+14     	; 0x3c50 <eeprom_update_r18+0x20>
    3c42:	1f ba       	out	0x1f, r1	; 31
    3c44:	20 bd       	out	0x20, r18	; 32
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	fa 9a       	sbi	0x1f, 2	; 31
    3c4c:	f9 9a       	sbi	0x1f, 1	; 31
    3c4e:	0f be       	out	0x3f, r0	; 63
    3c50:	08 95       	ret

Disassembly of section .text.avrlibc:

00003e30 <eeprom_update_dword>:
    3e30:	03 96       	adiw	r24, 0x03	; 3
    3e32:	27 2f       	mov	r18, r23
    3e34:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <eeprom_update_r18>
    3e38:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <eeprom_update_byte>
    3e3c:	25 2f       	mov	r18, r21
    3e3e:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <eeprom_update_r18>
    3e42:	24 2f       	mov	r18, r20
    3e44:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <eeprom_update_r18>

Disassembly of section .text.avrlibc:

00004104 <eeprom_update_word>:
    4104:	01 96       	adiw	r24, 0x01	; 1
    4106:	27 2f       	mov	r18, r23
    4108:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <eeprom_update_r18>
    410c:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <eeprom_update_byte>

Disassembly of section .text.libgcc.mul:

00003cd8 <__mulsi3>:
    3cd8:	db 01       	movw	r26, r22
    3cda:	8f 93       	push	r24
    3cdc:	9f 93       	push	r25
    3cde:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <__muluhisi3>
    3ce2:	bf 91       	pop	r27
    3ce4:	af 91       	pop	r26
    3ce6:	a2 9f       	mul	r26, r18
    3ce8:	80 0d       	add	r24, r0
    3cea:	91 1d       	adc	r25, r1
    3cec:	a3 9f       	mul	r26, r19
    3cee:	90 0d       	add	r25, r0
    3cf0:	b2 9f       	mul	r27, r18
    3cf2:	90 0d       	add	r25, r0
    3cf4:	11 24       	eor	r1, r1
    3cf6:	08 95       	ret

Disassembly of section .text.libgcc.div:

00003574 <__udivmodsi4>:
    3574:	a1 e2       	ldi	r26, 0x21	; 33
    3576:	1a 2e       	mov	r1, r26
    3578:	aa 1b       	sub	r26, r26
    357a:	bb 1b       	sub	r27, r27
    357c:	fd 01       	movw	r30, r26
    357e:	0d c0       	rjmp	.+26     	; 0x359a <__udivmodsi4_ep>

00003580 <__udivmodsi4_loop>:
    3580:	aa 1f       	adc	r26, r26
    3582:	bb 1f       	adc	r27, r27
    3584:	ee 1f       	adc	r30, r30
    3586:	ff 1f       	adc	r31, r31
    3588:	a2 17       	cp	r26, r18
    358a:	b3 07       	cpc	r27, r19
    358c:	e4 07       	cpc	r30, r20
    358e:	f5 07       	cpc	r31, r21
    3590:	20 f0       	brcs	.+8      	; 0x359a <__udivmodsi4_ep>
    3592:	a2 1b       	sub	r26, r18
    3594:	b3 0b       	sbc	r27, r19
    3596:	e4 0b       	sbc	r30, r20
    3598:	f5 0b       	sbc	r31, r21

0000359a <__udivmodsi4_ep>:
    359a:	66 1f       	adc	r22, r22
    359c:	77 1f       	adc	r23, r23
    359e:	88 1f       	adc	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	1a 94       	dec	r1
    35a4:	69 f7       	brne	.-38     	; 0x3580 <__udivmodsi4_loop>
    35a6:	60 95       	com	r22
    35a8:	70 95       	com	r23
    35aa:	80 95       	com	r24
    35ac:	90 95       	com	r25
    35ae:	9b 01       	movw	r18, r22
    35b0:	ac 01       	movw	r20, r24
    35b2:	bd 01       	movw	r22, r26
    35b4:	cf 01       	movw	r24, r30
    35b6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00003e8a <__muluhisi3>:
    3e8a:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__umulhisi3>
    3e8e:	a5 9f       	mul	r26, r21
    3e90:	90 0d       	add	r25, r0
    3e92:	b4 9f       	mul	r27, r20
    3e94:	90 0d       	add	r25, r0
    3e96:	a4 9f       	mul	r26, r20
    3e98:	80 0d       	add	r24, r0
    3e9a:	91 1d       	adc	r25, r1
    3e9c:	11 24       	eor	r1, r1
    3e9e:	08 95       	ret

Disassembly of section .text.libgcc:

00004138 <__xload_1>:
    4138:	57 fd       	sbrc	r21, 7
    413a:	60 81       	ld	r22, Z
    413c:	57 ff       	sbrs	r21, 7
    413e:	64 91       	lpm	r22, Z
    4140:	08 95       	ret
